class C{  @Override public boolean isRespectHight(){  return true;}  }
class C{  public java.lang.String toString(){  return toString(true,false);}  }
class C{  public void clear(){  rwlock.writeLock().lock();  try {    Entry tab[]=table;    modCount++;    for (int index=tab.length; --index >= 0; ) {      tab[index]=null;    }    lruTracker.clear();    count=0;  }  finally {    rwlock.writeLock().unlock();  }}  }
class C{  private void addGetExtraStatement(MethodSpec.Builder injectSpecBuilder,Element e,boolean isOptional){  String fieldName=e.getSimpleName().toString();  Extra extra=e.getAnnotation(Extra.class);  String keyName=extra.key().length() > 0 ? extra.key() : fieldName;  TypeName fieldType=TypeName.get(e.asType()).box();  if (isOptional) {    injectSpecBuilder.beginControlFlow("if (intent.hasExtra($S))",fieldName);  }  if (shouldUseParceler(e)) {    injectSpecBuilder.addStatement(PARCELER_GET_EXTRA_STATEMENT,fieldName,PARCELER_CLASS,keyName);  } else {    String statement=GET_EXTRA_STATEMENTS.get(fieldType.toString());    if (statement != null) {      injectSpecBuilder.addStatement(statement,fieldName,keyName);    } else {      logError("[getExtra] Unsupported type: " + fieldType.toString());    }  }  if (isOptional) {    injectSpecBuilder.endControlFlow();  }}  }
class C{  public TagStructureContext removeElementConnectionToTag(IAccessibleElement element){  PdfStructElem structElem=connectedModelToStruct.remove(element);  removeStructToModelConnection(structElem);  return this;}  }
class C{  public int hashCode(){  return impl.hashCode();}  }
class C{  private AciTargets(Target targetEntry,TargetAttr targetAttr,TargetFilter targetFilter,SearchScope targetScope,TargAttrFilters targAttrFilters,TargetControl targetControl,ExtOp extOp){  this.target=targetEntry;  this.targetAttr=targetAttr;  this.targetScope=targetScope;  this.targetFilter=targetFilter;  this.targAttrFilters=targAttrFilters;  this.targetControl=targetControl;  this.extOp=extOp;}  }
class C{  public void SwitchTo(int lexState){  if (lexState >= 3 || lexState < 0)   throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",TokenMgrError.INVALID_LEXICAL_STATE); else   curLexState=lexState;}  }
class C{  public final boolean equals(Object obj){  if (this == obj) {    return true;  }  if (!(obj instanceof ProtocolVersion)) {    return false;  }  ProtocolVersion that=(ProtocolVersion)obj;  return ((this.protocol.equals(that.protocol)) && (this.major == that.major) && (this.minor == that.minor));}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation());  unchecked(null);}  }
class C{  private void padNumber(StringBuffer sb,Integer count,PadNumberOption padNumberLength){  if (count != null) {    if (padNumberLength == PadNumberOption.PAD_ONE_ZERO) {      if (count > 0 && count < 10) {        sb.append("0").append(count);      } else {        sb.append(count.intValue());      }    } else     if (padNumberLength == PadNumberOption.PAD_TWO_ZERO) {      if (count > 0 && count < 10) {        sb.append("00").append(count);      } else       if (count > 9 && count < 100) {        sb.append("0").append(count);      } else {        sb.append(count.intValue());      }    } else     if (padNumberLength == PadNumberOption.PAD_THREE_ZERO) {      if (count > 0 && count < 10) {        sb.append("000").append(count);      } else       if (count > 9 && count < 100) {        sb.append("00").append(count);      } else       if (count > 99 && count < 1000) {        sb.append("0").append(count);      } else {        sb.append(count.intValue());      }    }  }}  }
class C{  @Deprecated public Timestamp(int year,int month,int date,int hour,int minute,int second,int nano){  super(year,month,date,hour,minute,second);  if (nano > 999999999 || nano < 0) {    throw new IllegalArgumentException("nanos > 999999999 or < 0");  }  nanos=nano;}  }
class C{  public static void main(String[] args){  StringBuilder str=new StringBuilder();  str.append("Custom Scripted Connector Bundler").append(" for OpenIDM v").append(ScriptedBundler.class.getPackage().getImplementationVersion());  System.out.println(str);  CommandLineParser parser=new BasicParser();  CommandLine cmdline=null;  try {    cmdline=parser.parse(options,args);  } catch (  ParseException e) {    printHelp();    return;  }  if (cmdline == null || cmdline.hasOption("h") || !cmdline.hasOption("c")) {    printHelp();  } else {    bundleConnector(cmdline.getOptionValue("c"),cmdline.hasOption("v"));  }}  }
class C{  public static Map<String,File> filesInDirectory(File dir,String regex,boolean recursively){  return filesInDirectory(dir,Pattern.compile(regex),recursively);}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {  ProcessorCharacters charProcessor=(ProcessorCharacters)handler.getProcessorFor(null,"text()","text");  charProcessor.setXslTextElement(null);}  }
class C{  public static void logModifyResponse(ModifyOperation modifyOperation){  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {    publisher.logModifyResponse(modifyOperation);  }}  }
class C{  public static String byteArrayToString(byte[] bytes){  char chars[]=new char[bytes.length];  for (int i=0; i < bytes.length; i++) {    chars[i]=(char)bytes[i];  }  return new String(chars);}  }
class C{  public boolean equals(MemberName that){  if (this == that)   return true;  if (that == null)   return false;  return this.clazz == that.clazz && this.getReferenceKind() == that.getReferenceKind() && Objects.equals(this.name,that.name) && Objects.equals(this.getType(),that.getType());}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (cv != null) {    return cv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  private boolean throwsException(Method method,Class<?> exception){  Class exs[]=method.getExceptionTypes();  for (int i=0; i < exs.length; i++) {    if (exs[i] == exception) {      return true;    }  }  return false;}  }
class C{  public static WhoAmIExtendedRequest unmodifiableWhoAmIExtendedRequest(final WhoAmIExtendedRequest request){  if (request instanceof UnmodifiableWhoAmIExtendedRequestImpl) {    return request;  }  return new UnmodifiableWhoAmIExtendedRequestImpl(request);}  }
class C{  public boolean addElement(Object key){  return false;}  }
class C{  boolean search(int from){  this.hitEnd=false;  this.requireEnd=false;  from=from < 0 ? 0 : from;  this.first=from;  this.oldLast=oldLast < 0 ? from : oldLast;  for (int i=0; i < groups.length; i++)   groups[i]=-1;  acceptMode=NOANCHOR;  boolean result=parentPattern.root.match(this,from,text);  if (!result)   this.first=-1;  this.oldLast=this.last;  return result;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.SignedInfoElement createSignedInfoElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SignedInfoElementImpl();}  }
class C{  void printVersion(){  versionPresent=true;  usageOrVersionDisplayed=true;  versionHandler.printVersion();}  }
class C{  @Inject public ContextHolderCache(ContextCacheSize contextCacheSize){  cache=new LeastRecentlyUsed<String,ContextHolder>(contextCacheSize.getDesiredCacheSize());  this.contextCacheSize=contextCacheSize;}  }
class C{  public Encoder withoutPadding(){  if (!doPadding)   return this;  return new Encoder(isURL,newline,linemax,false);}  }
class C{  public W3CEndpointReferenceBuilder element(Element element){  if (element == null) {    throw new IllegalArgumentException("The extension element cannot be null.");  }  elements.add(element);  return this;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  String tagname;  doc=(Document)load("staffNS",false);  element=doc.getElementById("CANADA");  tagname=element.getTagName();  assertEquals("throw_Equals","emp:address",tagname);}  }
class C{  @Override public void begin(String namespace,String nameX,Attributes attributes) throws Exception {  for (int i=0; i < attributes.getLength(); i++) {    String name=attributes.getLocalName(i);    if ("".equals(name)) {      name=attributes.getQName(i);    }    if ("path".equals(name) || "docBase".equals(name)) {      continue;    }    String value=attributes.getValue(i);    if (!digester.isFakeAttribute(digester.peek(),name) && !IntrospectionUtils.setProperty(digester.peek(),name,value) && digester.getRulesValidation()) {      digester.getLogger().warn("[SetContextPropertiesRule]{" + digester.getMatch() + "} Setting property '"+ name+ "' to '"+ value+ "' did not find a matching property.");    }  }}  }
class C{  protected void sendCreateSession(String sessionId,DeltaSession session){  if (cluster.getMembers().length > 0) {    SessionMessage msg=new SessionMessageImpl(getName(),SessionMessage.EVT_SESSION_CREATED,null,sessionId,sessionId + "-" + System.currentTimeMillis());    if (log.isDebugEnabled()) {      log.debug(sm.getString("deltaManager.sendMessage.newSession",name,sessionId));    }    msg.setTimestamp(session.getCreationTime());    counterSend_EVT_SESSION_CREATED++;    send(msg);  }}  }
class C{  public final void initVerify(PublicKey publicKey) throws InvalidKeyException {  engineInitVerify(publicKey);  state=VERIFY;  if (!skipDebug && pdebug != null) {    pdebug.println("Signature." + algorithm + " verification algorithm from: "+ this.provider.getName());  }}  }
class C{  public XMLString toLowerCase(){  return new XString(str().toLowerCase());}  }
class C{  public void putAll(Map<? extends K,? extends V> m){  putMapEntries(m,true);}  }
class C{  public boolean isColor(){  return isColor;}  }
class C{  public static void initiateLogoutRequest(HttpServletRequest request,HttpServletResponse response,PrintWriter out,String binding,Map paramsMap,LogoutRequest origLogoutRequest,SOAPMessage msg,Object newSession,SAML2EventLogger audit) throws SAML2Exception {  if (debug.messageEnabled()) {    debug.message("SPSingleLogout:initiateLogoutRequest");    debug.message("binding : " + binding);    debug.message("paramsMap : " + paramsMap);  }  String metaAlias=(String)paramsMap.get(SAML2Constants.SP_METAALIAS);  try {    Object session=null;    if (newSession != null) {      session=newSession;    } else {      session=sessionProvider.getSession(request);    }    if (null != audit) {      audit.setSSOTokenId(session);    }    if (!SPCache.isFedlet) {      if (session == null) {        throw new SAML2Exception(SAML2Utils.bundle.getString("nullSSOToken"));      }    }    if (metaAlias == null) {      if (!SPCache.isFedlet) {        String[] values=sessionProvider.getProperty(session,SAML2Constants.SP_METAALIAS);        if (values != null && values.length > 0) {          metaAlias=values[0];        }      } else {        List spMetaAliases=sm.getAllHostedServiceProviderMetaAliases("/");        if ((spMetaAliases != null) && !spMetaAliases.isEmpty()) {          metaAlias=(String)spMetaAliases.get(0);        }      }    }    if (metaAlias == null) {      throw new SAML2Exception(SAML2Utils.bundle.getString("nullSPMetaAlias"));    }    paramsMap.put(SAML2Constants.METAALIAS,metaAlias);    String realm=SAML2Utils.getRealm(SAML2MetaUtils.getRealmByMetaAlias(metaAlias));    debug.message("realm : " + realm);    String spEntityID=sm.getEntityByMetaAlias(metaAlias);    if (spEntityID == null) {      debug.error("Service Provider ID is missing");      String[] data={spEntityID};      LogUtil.error(Level.INFO,LogUtil.INVALID_SP,data,null);      throw new SAML2Exception(SAML2Utils.bundle.getString("nullSPEntityID"));    }    debug.message("spEntityID : " + spEntityID);    String tokenID=sessionProvider.getSessionID(session);    String infoKeyString=null;    if (SPCache.isFedlet) {      infoKeyString=SAML2Utils.getParameter(paramsMap,SAML2Constants.INFO_KEY);    } else {      try {        String[] values=sessionProvider.getProperty(session,AccountUtils.getNameIDInfoKeyAttribute());        if (values != null && values.length > 0) {          infoKeyString=values[0];        }      } catch (      SessionException se) {        debug.error("Unable to get infoKeyString from " + "session.",se);        throw new SAML2Exception(SAML2Utils.bundle.getString("errorInfoKeyString"));      }    }    if (debug.messageEnabled()) {      debug.message("tokenID : " + tokenID);      debug.message("infoKeyString : " + infoKeyString);    }    SPSSODescriptorElement spsso=sm.getSPSSODescriptor(realm,spEntityID);    if (spsso == null) {      String[] data={spEntityID};      LogUtil.error(Level.INFO,LogUtil.SP_METADATA_ERROR,data,null);      throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));    }    List extensionsList=LogoutUtil.getExtensionsList(paramsMap);    String relayState=SAML2Utils.getParameter(paramsMap,SAML2Constants.RELAY_STATE);    if (relayState == null || relayState.equals("")) {      relayState=SAML2Utils.getAttributeValueFromSSOConfig(realm,spEntityID,SAML2Constants.SP_ROLE,SAML2Constants.DEFAULT_RELAY_STATE);    }    SAML2Utils.validateRelayStateURL(realm,spEntityID,relayState,SAML2Constants.SP_ROLE);    if (infoKeyString == null) {      debug.warning("SPSingleLogout.initiateLogoutRequest : Unable to get infoKeyString from session.");      sessionProvider.invalidateSession(session,request,response);      if ((relayState != null) && !relayState.equals("")) {        try {          response.sendRedirect(relayState);        } catch (        IOException e) {          debug.error("SPSingleLogout.initiateLogoutRequest: " + "Error in send redirect to " + relayState,e);        }      } else {        RequestDispatcher dispatcher=request.getRequestDispatcher("saml2/jsp/default.jsp?message=spSloSuccess");        try {          dispatcher.forward(request,response);        } catch (        IOException e) {          debug.error("SPSingleLogout.initiateLogoutRequest: " + "Error in forwarding to default.jsp",e);        }catch (        ServletException e) {          debug.error("SPSingleLogout.initiateLogoutRequest: " + "Error in forwarding to default.jsp",e);        }      }      return;    }    StringTokenizer st=new StringTokenizer(infoKeyString,SAML2Constants.SECOND_DELIM);    String requestID=null;    while (st.hasMoreTokens()) {      String tmpInfoKeyString=st.nextToken();      NameIDInfoKey nameIdInfoKey=NameIDInfoKey.parse(tmpInfoKeyString);      if (nameIdInfoKey.getHostEntityID().equals(spEntityID)) {        requestID=prepareForLogout(realm,tokenID,metaAlias,extensionsList,binding,relayState,request,response,paramsMap,tmpInfoKeyString,origLogoutRequest,msg);      }    }    SOAPMessage soapMsg=(SOAPMessage)IDPCache.SOAPMessageByLogoutRequestID.get(requestID);    if (soapMsg != null) {      IDPProxyUtil.sendProxyLogoutResponseBySOAP(soapMsg,response,out);    }    if (binding.equals(SAML2Constants.SOAP) || (requestID == null)) {      sessionProvider.invalidateSession(session,request,response);    }  } catch (  SAML2MetaException sme) {    debug.error("Error retreiving metadata",sme);    throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));  }catch (  SessionException ssoe) {    debug.error("Session exception: ",ssoe);    throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));  }}  }
class C{  public void increment(){  setBuild(getBuild() + 1);  if (getBuild() >= MAX_VERSION) {    setRevision(getRevision() + 1);    setBuild(0);    if (getRevision() >= MAX_VERSION) {      setMinor(getMinor() + 1);      setRevision(0);      if (getMinor() >= MAX_VERSION) {        setMajor(getMajor() + 1);        setMinor(0);      }    }  }}  }
class C{  public void testUsingProxySelector() throws Exception {  MockServer server=new MockServer("server");  MockServer proxy=new MockServer("proxy");  URL url=new URL("http://localhost:" + server.port());  ProxySelector defPS=ProxySelector.getDefault();  ProxySelector.setDefault(new TestProxySelector(server.port(),proxy.port()));  try {    HttpURLConnection connection=(HttpURLConnection)url.openConnection();    connection.setConnectTimeout(2000);    connection.setReadTimeout(2000);    server.start();synchronized (bound) {      if (!server.started)       bound.wait(5000);    }    proxy.start();synchronized (bound) {      if (!proxy.started)       bound.wait(5000);    }    connection.connect();    server.join();    proxy.join();    assertTrue("Connection does not use proxy",connection.usingProxy());    assertTrue("Proxy server was not used",proxy.accepted);    connection.disconnect();    assertTrue("usingProxy broken after disconnect",connection.usingProxy());  }  finally {    ProxySelector.setDefault(defPS);  }}  }
class C{  private TimerQueue timerQueue(){  return TimerQueue.sharedInstance();}  }
class C{  public void adjustValuesBelow(int startRow,int column,int delta){  if (((startRow | column) < 0) || (startRow > size()) || (column >= width())) {    throw new IndexOutOfBoundsException(startRow + ", " + column);  }  if (startRow >= mRowGapStart) {    startRow+=mRowGapLength;  }  moveValueGapTo(column,startRow);  mValueGap[column + mColumns]+=delta;}  }
class C{  public void fatal(Object message,Throwable exception){  log(Level.SEVERE,String.valueOf(message),exception);}  }
class C{  public static int countByField2(boolean field2){  return getPersistence().countByField2(field2);}  }
class C{  public static boolean isPrintableString(String s){  if (s == null) {    return false;  }  int length=s.length();  for (int i=0; i < length; i++) {    if (!isPrintableCharacter(s.charAt(i))) {      return false;    }  }  return true;}  }
class C{  Element(String name,int index){  this.name=name;  this.index=index;  if (index > getMaxIndex()) {    AppContext.getAppContext().put(MAX_INDEX_KEY,index);  }}  }
class C{  public ELException(Throwable cause){  super(cause);}  }
class C{  public String nextString() throws GSERException {  if (!hasNext(GSER_STRING)) {    LocalizableMessage msg=ERR_GSER_NO_VALID_STRING.get(gserValue.substring(pos,length));    throw new GSERException(msg);  }  String str=next(GSER_STRING);  return str.substring(1,str.length() - 1).replace("\"\"","\"");}  }
class C{  @Override public void encodeEnd(final FacesContext context) throws IOException {  encodeAll(context);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.KeyActivationType createKeyActivationType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.KeyActivationTypeImpl();}  }
class C{  public boolean isHidden(){  return hidden;}  }
class C{  public static boolean isObjectClassPresent(Set objectClasses,String objectClass){  if (objectClasses != null && !objectClasses.isEmpty()) {    Iterator itr=objectClasses.iterator();    while (itr.hasNext()) {      String serviceOC=(String)itr.next();      if (serviceOC.equalsIgnoreCase(objectClass)) {        return true;      }    }  }  return false;}  }
class C{  static IndexOutOfBoundsException throwIndexOutOfBoundsException(int index,int size){  throw new IndexOutOfBoundsException("Invalid index " + index + ", size is "+ size);}  }
class C{  public final void testGetCrtCoefficient(){  RSAMultiPrimePrivateCrtKeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);  assertTrue(BigInteger.ONE.equals(ks.getCrtCoefficient()));}  }
class C{  public void updateRule(String ruleGroup,String ruleJson,boolean delete) throws Exception {  Map<Short,Rule> ruleMap=this.ruleMap;  if (ruleGroupsActive) {    if (ruleGroup != null) {      ruleMap=ruleGroupMap.get(ruleGroup);      if (ruleMap == null) {        ruleMap=new LinkedHashMap<>(hashSize);        ruleGroupMap.put(ruleGroup,ruleMap);      }    } else {      throw new PerformantException("Supplied rule group is null");    }  }  if (ruleMap == null) {    throw new PerformantException("Rule map not found for rule:" + ruleJson + "\trule-group:"+ ruleGroup);  }  updateRuleMap(ruleMap,ruleJson,delete);}  }
class C{  public static Map<String,File> filesInDirectory(File dir,Pattern regex,boolean recursively){  if (dir == null)   throw new NullPointerException("dir is null");  Map<String,File> map=new LinkedHashMap<>();  if (dir.isDirectory()) {    File[] listFiles=dir.listFiles();    if (listFiles != null) {      for (      File f : listFiles) {        if (f.isFile()) {          if (regex.matcher(f.getName()).matches()) {            map.put(f.getName(),f);          }        } else         if (f.isDirectory() && recursively) {          Map<String,File> files=filesInDirectory(f,regex,true);          map.putAll(files);        }      }    }  } else   throw new IllegalArgumentException(dir + " is not a directory");  return map;}  }
class C{  void updateEntityConfig(String realm,String cotName,String protocolType,String entityID) throws COTException, JAXBException {  if (protocolType.equalsIgnoreCase(COTConstants.IDFF)) {    try {      (new IDFFCOTUtils(callerSession)).updateEntityConfig(realm,cotName,entityID);    } catch (    IDFFMetaException idffe) {      throw new COTException(idffe);    }  } else   if (protocolType.equalsIgnoreCase(COTConstants.SAML2)) {    try {      (new SAML2COTUtils(callerSession)).updateEntityConfig(realm,cotName,entityID);    } catch (    SAML2MetaException idffe) {      throw new COTException(idffe);    }  } else   if (protocolType.equalsIgnoreCase(COTConstants.WS_FED)) {    try {      (new WSFederationCOTUtils(callerSession)).updateEntityConfig(realm,cotName,entityID);    } catch (    WSFederationMetaException e) {      throw new COTException(e);    }  } else {    String[] args={protocolType};    throw new COTException("invalidProtocolType",args);  }}  }
class C{  public org.omg.DynamicAny.DynAny copy(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("copy",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    return $self.copy();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public boolean isDone(){  return (index > 1);}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public ModelMBeanAttributeInfo(String name,String type,String description,boolean isReadable,boolean isWritable,boolean isIs,Descriptor descriptor){  super(name,type,description,isReadable,isWritable,isIs);  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanAttributeInfo.class.getName(),"ModelMBeanAttributeInfo(String,String,String," + "boolean,boolean,boolean,Descriptor)","Entry",name);  }  attrDescriptor=validDescriptor(descriptor);}  }
class C{  public Binding(String name,Object obj,boolean isRelative){  super(name,null,isRelative);  this.boundObj=obj;}  }
class C{  public NodeIterator nodeset() throws javax.xml.transform.TransformerException {  return (m_origObj instanceof NodeIterator) ? (NodeIterator)m_origObj : super.nodeset();}  }
class C{  public void removeUserLockoutEntry(String userDN){  pwResetFailHash.remove(userDN);  userWarningCount=0;}  }
class C{  @Override public void flush(){}  }
class C{  public boolean isStale() throws IOException {  if (hasBufferedData()) {    return false;  }  int oldTimeout=this.socket.getSoTimeout();  try {    this.socket.setSoTimeout(1);    return fillBuffer() == -1;  } catch (  SocketTimeoutException e) {    return false;  }catch (  IOException e) {    return true;  } finally {    this.socket.setSoTimeout(oldTimeout);  }}  }
class C{  private void quitClicked(){  application.quitClicked(getCurrentStep(),this);}  }
class C{  public ValidationEventLocatorImpl(Node _node){  if (_node == null) {    throw new IllegalArgumentException(Messages.format(Messages.MUST_NOT_BE_NULL,"_node"));  }  this.node=_node;}  }
class C{  public AMEntryExistsException(String msg,String errorCode,Object args[]){  super(msg,errorCode,args);}  }
class C{  public static void rebind(String name,Remote obj) throws RemoteException, java.net.MalformedURLException {  ParsedNamingURL parsed=parseURL(name);  Registry registry=getRegistry(parsed);  if (obj == null)   throw new NullPointerException("cannot bind to null");  registry.rebind(parsed.name,obj);}  }
class C{  private static Entry createModifyMsg(final DN baseDN,final long changeNumber,final String cookie,final UpdateMsg msg) throws DirectoryException {  final ModifyCommonMsg modifyMsg=(ModifyCommonMsg)msg;  String changeInitiatorsName=null;  String ldifChanges=null;  try {    final StringBuilder builder=new StringBuilder(128);    for (    Modification mod : modifyMsg.getMods()) {      final Attribute attr=mod.getAttribute();      if (mod.getModificationType() == ModificationType.REPLACE && !attr.isEmpty() && attr.getAttributeDescription().getAttributeType().equals(getModifiersNameAttributeType())) {        changeInitiatorsName=attr.iterator().next().toString();      }      final AttributeDescription attrDesc=attr.getAttributeDescription();      builder.append(mod.getModificationType());      builder.append(": ");      builder.append(attrDesc);      builder.append('\n');      for (      ByteString value : attr) {        builder.append(attrDesc);        appendLDIFSeparatorAndValue(builder,value);        builder.append('\n');      }      builder.append("-\n");    }    ldifChanges=builder.toString();  } catch (  Exception e) {    logEncodingMessageError("modify",modifyMsg.getDN(),e);  }  final boolean isModifyDNMsg=modifyMsg instanceof ModifyDNMsg;  final Entry entry=createChangelogEntry(baseDN,changeNumber,cookie,modifyMsg,ldifChanges,isModifyDNMsg ? "modrdn" : "modify",changeInitiatorsName);  if (isModifyDNMsg) {    final ModifyDNMsg modDNMsg=(ModifyDNMsg)modifyMsg;    addAttribute(entry,"newrdn",modDNMsg.getNewRDN());    if (modDNMsg.getNewSuperior() != null) {      addAttribute(entry,"newsuperior",modDNMsg.getNewSuperior());    }    addAttribute(entry,"deleteoldrdn",String.valueOf(modDNMsg.deleteOldRdn()));  }  return entry;}  }
class C{  public static int secondaryHash(Object key){  return secondaryHash(key.hashCode());}  }
class C{  Builder addLenient(String name,String value){  namesAndValues.add(name);  namesAndValues.add(value.trim());  return this;}  }
class C{  private static String handleTime(List<String> tokens,Iterator<String> iter){  DateTime dt=new DateTime();  if (iter.hasNext()) {    String operationToken=iter.next();    if (operationToken.equals("+") || operationToken.equals("-")) {      if (iter.hasNext()) {        String quantityToken=iter.next();        ReadablePeriod period=getTimePeriod(quantityToken);        if (operationToken.equals("-")) {          dt=dt.minus(period);        } else {          dt=dt.plus(period);        }      } else {        logger.warn("Token '{}' not followed by a quantity",operationToken);      }    } else {      logger.warn("Invalid token '{}', must be operator '+' or '-'",operationToken);    }  }  return DATE_UTIL.formatDateTime(dt);}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.ReferenceListType.KeyReference createReferenceListTypeKeyReference() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.ReferenceListTypeImpl.KeyReferenceImpl();}  }
class C{  public static boolean isSourceSiteValid(final Issuer issuer,final String orgName,final String hostEntityId){  boolean isValid=false;  try {    if (issuer != null) {      String entityID=issuer.getValue().trim();      if (entityID != null && entityID.length() != 0) {        isValid=saml2MetaManager.isTrustedProvider(orgName,hostEntityId,entityID);      }    }    return isValid;  } catch (  Exception e) {    debug.error("SAML2Utils.isSourceSiteValid: " + "Exception : ",e);    return false;  }}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private static List toSimpleModel(List listToClean){  ListIterator<Object> listIter=listToClean.listIterator();  while (listIter.hasNext()) {    Object listEntry=listIter.next();    if (listEntry instanceof ODocument || listEntry instanceof Set) {      listIter.set(asSimpleBinding(listEntry));    } else {      asSimpleBinding(listEntry);    }  }  return listToClean;}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  backTrail();  DelegationViewBean vb=(DelegationViewBean)getViewBean(DelegationViewBean.class);  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public void printStackTrace(java.io.PrintWriter pw){  if (rootCause != null) {    String superString=super.toString();synchronized (pw) {      pw.print(superString + (superString.endsWith(".") ? "" : ".") + "  Root exception is ");      rootCause.printStackTrace(pw);    }  } else {    super.printStackTrace(pw);  }}  }
class C{  public void printStackTrace(PrintWriter s){  super.printStackTrace(s);}  }
class C{  public Set search(SSOToken token,String entryDN,String searchFilter,int searchScope) throws AMException {  Set resultSet=Collections.EMPTY_SET;  try {    PersistentObject po=UMSObject.getObjectHandle(token,new Guid(entryDN));    SearchControl control=new SearchControl();    control.setSearchScope(searchScope);    SearchResults results=po.search(searchFilter,control);    resultSet=searchResultsToSet(results);  } catch (  UMSException ue) {    LdapException lex=(LdapException)ue.getRootCause();    ResultCode errorCode=lex.getResult().getResultCode();    if (retryErrorCodes.contains("" + errorCode)) {      throw new AMException(token,Integer.toString(errorCode.intValue()),ue);    }    if (debug.warningEnabled()) {      debug.warning("DirectoryServicesImpl.search(token:, entryDN: " + entryDN + ", searchFilter: "+ searchFilter+ "searchScope: "+ searchScope+ " error occurred: ",ue);    }    processInternalException(token,ue,"341");  }  return resultSet;}  }
class C{  public static void fill(byte[] array,int start,int end,byte value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public void endMonitoringOf(final InetAddress inetAddress){  candidateSockets.endMonitoringOfSocketIdentifier(SocketIdentifier.fromInet4Address(inetAddress));}  }
class C{  @Override public void onAttachFragment(final Fragment childFragment){  super.onAttachFragment(childFragment);}  }
class C{  public static void fixPropertiesKeys(final Properties prop){  final Enumeration<Object> keys=prop.keys();  while (keys.hasMoreElements()) {    final String currentKey=(String)keys.nextElement();    final String fixedKey=fixPropertyKey(currentKey);    final String value=prop.getProperty(currentKey);    prop.remove(currentKey);    prop.setProperty(fixedKey,value);  }}  }
class C{  public TreeMapEntry(final String name){  this(DN.valueOf(name));}  }
class C{  public static Polynomial25519 square(Polynomial25519 a){  Polynomial25519 output=new Polynomial25519();  output.c=Polynomial25519.innerSquare(a.c);  output.reduceDegree();  output.reduceCoefficients();  return output;}  }
class C{  @SuppressWarnings("fallthrough") public int read(char cbuf[],int off,int len) throws IOException {synchronized (lock) {    int n=super.read(cbuf,off,len);    for (int i=off; i < off + n; i++) {      int c=cbuf[i];      if (skipLF) {        skipLF=false;        if (c == '\n')         continue;      }switch (c) {case '\r':        skipLF=true;case '\n':      lineNumber++;    break;}}return n;}}  }
class C{  static boolean checkForNoDuplicateKeyInValue(Set values){  boolean valid=true;  HashSet keySet=new HashSet();  if ((values != null) && !values.isEmpty()) {    for (Iterator i=values.iterator(); (i.hasNext() && valid); ) {      String str=((String)i.next()).trim();      if (str.length() > 0) {        int startIndex=str.indexOf("[");        if (startIndex != -1) {          int endIndex=str.indexOf("]");          str=str.substring(startIndex + 1,endIndex).trim();          if (keySet.add(str) == false)           valid=false;        }      }    }  }  return valid;}  }
class C{  @Override public void write(String str,int st,int len) throws IOException {  try {    beforeWrite(len);    out.write(str,st,len);    afterWrite(len);  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public ReplicationParameters replicationPortSource(int port){  this.replicationPortSource=port;  return this;}  }
class C{  public Set createRoles(Map roles) throws AMException, SSOException {  Iterator iter=roles.keySet().iterator();  Set result=new HashSet();  while (iter.hasNext()) {    String roleName=(String)iter.next();    String roleDN=AMNamingAttrManager.getNamingAttr(ROLE) + "=" + roleName+ ","+ super.entryDN;    Map attributes=(Map)roles.get(roleName);    AMRoleImpl roleImpl=new AMRoleImpl(super.token,roleDN);    Set aciSet=null;    if (!attributes.isEmpty()) {      aciSet=(Set)attributes.remove("iplanet-am-role-aci-list");    }    if (aciSet != null) {      Iterator iter2=aciSet.iterator();      Set newAciSet=new HashSet();      while (iter2.hasNext()) {        String acis=(String)iter2.next();        StringTokenizer stz=new StringTokenizer(acis,"##");        while (stz.hasMoreTokens()) {          newAciSet.add(stz.nextToken());        }      }      attributes.put("iplanet-am-role-aci-list",replaceAciListMacros(newAciSet,roleDN,entryDN,null,null));    }    roleImpl.setAttributes(attributes);    roleImpl.create();    result.add(roleImpl);  }  return result;}  }
class C{  public boolean allowsAllContentSubTypes(){  if (mediaRange == null) {    return false;  } else   return mediaRange.getSubtype().compareTo(STAR) == 0;}  }
class C{  protected Object validateExchange(Object exchange){  Objects.requireNonNull(exchange,"The exchange object can't be NULL.");  return exchange;}  }
class C{  public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){  if (bevelType == RAISED) {    paintRaisedBevel(c,g,x,y,width,height);  } else   if (bevelType == LOWERED) {    paintLoweredBevel(c,g,x,y,width,height);  }}  }
class C{  public ImageIcon(URL location,String description){  image=Toolkit.getDefaultToolkit().getImage(location);  if (image == null) {    return;  }  this.location=location;  this.description=description;  loadImage(image);}  }
class C{  public static ResourceType mergeResourceType(ResourceType srcType,ResourceType destType){  Set<String> patterns=new HashSet<>();  patterns.addAll(destType.getPatterns());  patterns.addAll(srcType.getPatterns());  Map<String,Boolean> actions=new HashMap<>();  actions.putAll(destType.getActions());  actions.putAll(srcType.getActions());  return createResourceType(null,destType.getName(),patterns,actions,destType.getUUID());}  }
class C{  protected int _documentRoot(int nodeIdentifier){  if (nodeIdentifier == NULL)   return NULL;  for (int parent=_parent(nodeIdentifier); parent != NULL; nodeIdentifier=parent, parent=_parent(nodeIdentifier))   ;  return nodeIdentifier;}  }
class C{  private static synchronized String formatDateAsDate(Date d){  return formatDateIn.format(d);}  }
class C{  private void highLightMarker(int index){  highLightMarker(markers.get(index));}  }
class C{  protected void displaySessionDetailPage(HttpServletRequest req,HttpServletResponse resp,ContextName cn,String sessionId,StringManager smClient) throws ServletException, IOException {  Session session=getSessionForNameAndId(cn,sessionId,smClient);  resp.setHeader("Pragma","No-cache");  resp.setHeader("Cache-Control","no-cache,no-store,max-age=0");  resp.setDateHeader("Expires",0);  req.setAttribute("currentSession",session);  getServletContext().getRequestDispatcher(resp.encodeURL(sessionDetailJspPath)).include(req,resp);}  }
class C{  protected RemoteObject(RemoteRef newref){  ref=newref;}  }
class C{  public static void main(String[] args){  DOMTestCase.doMain(alltests.class,args);}  }
class C{  public void initXPath(Compiler compiler,String expression,PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException {  m_ops=compiler;  m_namespaceContext=namespaceContext;  m_functionTable=compiler.getFunctionTable();  Lexer lexer=new Lexer(compiler,namespaceContext,this);  lexer.tokenize(expression);  m_ops.setOp(0,OpCodes.OP_XPATH);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,2);  try {    nextToken();    Expr();    if (null != m_token) {      String extraTokens="";      while (null != m_token) {        extraTokens+="'" + m_token + "'";        nextToken();        if (null != m_token)         extraTokens+=", ";      }      error(XPATHErrorResources.ER_EXTRA_ILLEGAL_TOKENS,new Object[]{extraTokens});    }  } catch (  org.apache.xpath.XPathProcessorException e) {    if (CONTINUE_AFTER_FATAL_ERROR.equals(e.getMessage())) {      initXPath(compiler,"/..",namespaceContext);    } else     throw e;  }  compiler.shrink();}  }
class C{  public VersionViewBean(){  super(PAGE_NAME);  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public void popSAXLocator(){  m_saxLocations.pop();}  }
class C{  private boolean isBeanCompatible(Class<?> javaType){  if (javaType.isArray() || javaType.isPrimitive()) {    return false;  }  if (javaType.getName().startsWith("java.") || javaType.getName().startsWith("javax.")) {    return false;  }  try {    javaType.getConstructor(new Class[]{});  } catch (  java.lang.NoSuchMethodException e) {    return false;  }  Class<?> superClass=javaType.getSuperclass();  if (superClass != null && superClass != java.lang.Object.class && superClass != java.lang.Exception.class && superClass != java.lang.Throwable.class) {    if (!isBeanCompatible(superClass)) {      return false;    }  }  return true;}  }
class C{  public static NSObject parse(InputStream in) throws ParseException, IOException {  byte[] buf=PropertyListParser.readAll(in);  in.close();  return parse(buf);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append("CollectionCertStoreParameters: [\n");  sb.append("  collection: " + coll + "\n");  sb.append("]");  return sb.toString();}  }
class C{  public MimeHeaderField(){}  }
class C{  @Override public Image createAwtImage(java.awt.Color foreground,java.awt.Color background){  int f=foreground.getRGB();  int g=background.getRGB();  java.awt.Canvas canvas=new java.awt.Canvas();  int width;  byte bars[];switch (codeType) {case EAN13:    bars=getBarsEAN13(code);  width=11 + 12 * 7;break;case EAN8:bars=getBarsEAN8(code);width=11 + 8 * 7;break;case UPCA:bars=getBarsEAN13("0" + code);width=11 + 12 * 7;break;case UPCE:bars=getBarsUPCE(code);width=9 + 6 * 7;break;case SUPP2:bars=getBarsSupplemental2(code);width=6 + 2 * 7;break;case SUPP5:bars=getBarsSupplemental5(code);width=4 + 5 * 7 + 4 * 2;break;default :throw new PdfException("Invalid code type");}boolean print=true;int ptr=0;int height=(int)barHeight;int[] pix=new int[width * height];for (int k=0; k < bars.length; ++k) {int w=bars[k];int c=g;if (print) {c=f;}print=!print;for (int j=0; j < w; ++j) {pix[ptr++]=c;}}for (int k=width; k < pix.length; k+=width) {System.arraycopy(pix,0,pix,k,width);}return canvas.createImage(new java.awt.image.MemoryImageSource(width,height,pix,0,width));}  }
class C{  public void handleTblServerButtonDeleteRequest(RequestInvocationEvent event) throws ModelControlException {  CCActionTable table=(CCActionTable)getChild(TBL_SERVERS);  table.restoreStateData();  Integer[] selected=tblServerModel.getSelectedRows();  SerializedField szCache=(SerializedField)getChild(SZ_CACHE);  List list=(List)szCache.getSerializedObj();  Set names=new HashSet(selected.length * 2);  for (int i=0; i < selected.length; i++) {    String name=(String)list.get(selected[i].intValue());    names.add(name);  }  try {    ServerSiteModel model=(ServerSiteModel)getModel();    model.deleteServers(names);    if (selected.length == 1) {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","serverconfig.message.deleted");    } else {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","serverconfig.message.deleted.pural");    }  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  public GitHubResponse(HttpURLConnection response,Object body){  this.response=response;  this.body=body;}  }
class C{  public RegexFileFilter(String pattern,IOCase caseSensitivity){  if (pattern == null) {    throw new IllegalArgumentException("Pattern is missing");  }  int flags=0;  if (caseSensitivity != null && !caseSensitivity.isCaseSensitive()) {    flags=Pattern.CASE_INSENSITIVE;  }  this.pattern=Pattern.compile(pattern,flags);}  }
class C{  public void testIdle(){  try {    createPool().testAllIdle();  } catch (  SQLException x) {    throw new RuntimeException(x);  }}  }
class C{  @Override public String toString(){  return _stmt == null ? "NULL" : _stmt.toString();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.PhysicalVerificationType createPhysicalVerificationType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.PhysicalVerificationTypeImpl();}  }
class C{  private BigInteger modPow2(BigInteger exponent,int p){  BigInteger result=ONE;  BigInteger baseToPow2=this.mod2(p);  int expOffset=0;  int limit=exponent.bitLength();  if (this.testBit(0))   limit=(p - 1) < limit ? (p - 1) : limit;  while (expOffset < limit) {    if (exponent.testBit(expOffset))     result=result.multiply(baseToPow2).mod2(p);    expOffset++;    if (expOffset < limit)     baseToPow2=baseToPow2.square().mod2(p);  }  return result;}  }
class C{  @Bean public JwtTokenStore tokenStore(){  return new JwtTokenStore(jwtAccessTokenConverter());}  }
class C{  public void pushBack(byte b){  back=b;  isBack=true;}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  public SequenceInputStream(InputStream s1,InputStream s2){  Vector<InputStream> v=new Vector<>(2);  v.addElement(s1);  v.addElement(s2);  e=v.elements();  try {    nextStream();  } catch (  IOException ex) {    throw new Error("panic");  }}  }
class C{  public static String applyErrorBackgroundToHtml(String html){  return DIV_OPEN_ERROR_BACKGROUND + html + DIV_CLOSE;}  }
class C{  private void showDlgApplications(){  RuleBuilder.instance().resetActionPath();  Intent intent=new Intent();  intent.setClass(getApplicationContext(),ActivityDlgApplications.class);  startActivityForResult(intent,REQUEST_ADD_ACTION);}  }
class C{  @Override public void flush() throws IOException {  try {    out.flush();  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public Extensions(){  this.extensions=null;}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  model=getModel();  setDisplayFieldValue(TITLE_HTML_PAGE,model.getHTMLPageTitle());  setDisplayFieldValue(COPYRIGHT_TEXT,model.getCopyRightText());  setDisplayFieldValue(LBL_SUN_LOGO,model.getSunLogoLabel());  setDisplayFieldValue(LBL_PRODUCT,model.getProductLabel());  setDisplayFieldValue(LBL_JAVA_LOGO,model.getJavaLogoLabel());}  }
class C{  public static SmsRouteTreeBuilder filter(String uriTemplate,Predicate<String> handlesFunction,Filter filter){  return new SmsRouteTreeBuilder(uriTemplate).handles(handlesFunction).filtered(filter);}  }
class C{  public RequirementsBuilder addCustomField(String name,JsonValue customJsonValue){  Reject.ifNull(name,customJsonValue);  jsonValue.add(name,getUnderlyingObject(customJsonValue));  return this;}  }
class C{  private boolean isClosed(){  return buf == null;}  }
class C{  public final HashCode append(double value){  hashCode=combine(hashCode,value);  return this;}  }
class C{  private String doSASLDigestMD5(ByteSequence bindDN,ByteSequence bindPassword,Map<String,List<String>> saslProperties,List<Control> requestControls,List<Control> responseControls) throws ClientException, LDAPException {  String authID=null;  String realm=null;  String qop="auth";  String digestURI="ldap/" + hostName;  String authzID=null;  boolean realmSetFromProperty=false;  if (saslProperties == null || saslProperties.isEmpty()) {    LocalizableMessage message=ERR_LDAPAUTH_NO_SASL_PROPERTIES.get(SASL_MECHANISM_DIGEST_MD5);    throw new ClientException(ReturnCode.CLIENT_SIDE_PARAM_ERROR,message);  }  for (  Entry<String,List<String>> entry : saslProperties.entrySet()) {    String name=entry.getKey();    List<String> values=entry.getValue();    String lowerName=toLowerCase(name);    if (lowerName.equals(SASL_PROPERTY_AUTHID)) {      authID=getSingleValue(values,ERR_LDAPAUTH_AUTHID_SINGLE_VALUED);    } else     if (lowerName.equals(SASL_PROPERTY_REALM)) {      Iterator<String> iterator=values.iterator();      if (iterator.hasNext()) {        realm=iterator.next();        realmSetFromProperty=true;        if (iterator.hasNext()) {          LocalizableMessage message=ERR_LDAPAUTH_REALM_SINGLE_VALUED.get();          throw new ClientException(ReturnCode.CLIENT_SIDE_PARAM_ERROR,message);        }      }    } else     if (lowerName.equals(SASL_PROPERTY_QOP)) {      Iterator<String> iterator=values.iterator();      if (iterator.hasNext()) {        qop=toLowerCase(iterator.next());        if (iterator.hasNext()) {          LocalizableMessage message=ERR_LDAPAUTH_QOP_SINGLE_VALUED.get();          throw new ClientException(ReturnCode.CLIENT_SIDE_PARAM_ERROR,message);        }        if (qop.equals("auth")) {        } else         if (qop.equals("auth-int") || qop.equals("auth-conf")) {          LocalizableMessage message=ERR_LDAPAUTH_DIGESTMD5_QOP_NOT_SUPPORTED.get(qop);          throw new ClientException(ReturnCode.CLIENT_SIDE_PARAM_ERROR,message);        } else {          LocalizableMessage message=ERR_LDAPAUTH_DIGESTMD5_INVALID_QOP.get(qop);          throw new ClientException(ReturnCode.CLIENT_SIDE_PARAM_ERROR,message);        }      }    } else     if (lowerName.equals(SASL_PROPERTY_DIGEST_URI)) {      digestURI=toLowerCase(getSingleValue(values,ERR_LDAPAUTH_DIGEST_URI_SINGLE_VALUED));    } else     if (lowerName.equals(SASL_PROPERTY_AUTHZID)) {      authzID=toLowerCase(getSingleValue(values,ERR_LDAPAUTH_AUTHZID_SINGLE_VALUED));    } else {      LocalizableMessage message=ERR_LDAPAUTH_INVALID_SASL_PROPERTY.get(name,SASL_MECHANISM_DIGEST_MD5);      throw new ClientException(ReturnCode.CLIENT_SIDE_PARAM_ERROR,message);    }  }  if (authID == null || authID.length() == 0) {    LocalizableMessage message=ERR_LDAPAUTH_SASL_AUTHID_REQUIRED.get(SASL_MECHANISM_DIGEST_MD5);    throw new ClientException(ReturnCode.CLIENT_SIDE_PARAM_ERROR,message);  }  if (bindPassword == null) {    bindPassword=ByteString.empty();  }  sendInitialBindRequest(SASL_MECHANISM_DIGEST_MD5,bindDN);  LDAPMessage responseMessage1=readBindResponse(ERR_LDAPAUTH_CANNOT_READ_INITIAL_BIND_RESPONSE,SASL_MECHANISM_DIGEST_MD5);  checkConnected(responseMessage1);  BindResponseProtocolOp bindResponse1=responseMessage1.getBindResponseProtocolOp();  int resultCode1=bindResponse1.getResultCode();  if (resultCode1 != ReturnCode.SASL_BIND_IN_PROGRESS.get()) {    LocalizableMessage errorMessage=bindResponse1.getErrorMessage();    if (errorMessage == null) {      errorMessage=LocalizableMessage.EMPTY;    }    LocalizableMessage message=ERR_LDAPAUTH_UNEXPECTED_INITIAL_BIND_RESPONSE.get(SASL_MECHANISM_DIGEST_MD5,resultCode1,ReturnCode.get(resultCode1),errorMessage);    throw new LDAPException(resultCode1,errorMessage,message,bindResponse1.getMatchedDN(),null);  }  ByteString serverCredentials=bindResponse1.getServerSASLCredentials();  if (serverCredentials == null) {    LocalizableMessage message=ERR_LDAPAUTH_NO_DIGESTMD5_SERVER_CREDENTIALS.get();    throw new LDAPException(ReturnCode.PROTOCOL_ERROR.get(),message);  }  String credString=serverCredentials.toString();  String lowerCreds=toLowerCase(credString);  String nonce=null;  boolean useUTF8=false;  int pos=0;  int length=credString.length();  while (pos < length) {    int equalPos=credString.indexOf('=',pos + 1);    if (equalPos < 0) {      LocalizableMessage message=ERR_LDAPAUTH_DIGESTMD5_INVALID_TOKEN_IN_CREDENTIALS.get(credString,pos);      throw new LDAPException(ReturnCode.PROTOCOL_ERROR.get(),message);    }    String tokenName=lowerCreds.substring(pos,equalPos);    StringBuilder valueBuffer=new StringBuilder();    pos=readToken(credString,equalPos + 1,length,valueBuffer);    String tokenValue=valueBuffer.toString();    if (tokenName.equals("charset")) {      if (!tokenValue.equalsIgnoreCase("utf-8")) {        LocalizableMessage message=ERR_LDAPAUTH_DIGESTMD5_INVALID_CHARSET.get(tokenValue);        throw new LDAPException(ReturnCode.PROTOCOL_ERROR.get(),message);      }      useUTF8=true;    } else     if (tokenName.equals("realm")) {      if (!realmSetFromProperty) {        if (realm == null) {          realm=tokenValue;        } else {          realm=null;          realmSetFromProperty=true;        }      }    } else     if (tokenName.equals("nonce")) {      nonce=tokenValue;    } else     if (tokenName.equals("qop")) {      StringTokenizer tokenizer=new StringTokenizer(tokenValue,",");      LinkedList<String> qopModes=new LinkedList<>();      while (tokenizer.hasMoreTokens()) {        qopModes.add(toLowerCase(tokenizer.nextToken().trim()));      }      if (!qopModes.contains(qop)) {        LocalizableMessage message=ERR_LDAPAUTH_REQUESTED_QOP_NOT_SUPPORTED_BY_SERVER.get(qop,tokenValue);        throw new ClientException(ReturnCode.CLIENT_SIDE_PARAM_ERROR,message);      }    } else {    }  }  if (nonce == null) {    LocalizableMessage message=ERR_LDAPAUTH_DIGESTMD5_NO_NONCE.get();    throw new LDAPException(ReturnCode.PROTOCOL_ERROR.get(),message);  }  String cnonce=generateCNonce();  String nonceCount="00000001";  String charset=useUTF8 ? "UTF-8" : "ISO-8859-1";  String responseDigest;  try {    responseDigest=generateDigestMD5Response(authID,authzID,bindPassword,realm,nonce,cnonce,nonceCount,digestURI,qop,charset);  } catch (  ClientException ce) {    throw ce;  }catch (  Exception e) {    LocalizableMessage message=ERR_LDAPAUTH_DIGESTMD5_CANNOT_CREATE_RESPONSE_DIGEST.get(getExceptionMessage(e));    throw new ClientException(ReturnCode.CLIENT_SIDE_LOCAL_ERROR,message,e);  }  StringBuilder credBuffer=new StringBuilder();  credBuffer.append("username=\"").append(authID).append("\"");  if (realm != null) {    credBuffer.append(",realm=\"").append(realm).append("\"");  }  credBuffer.append(",nonce=\"").append(nonce);  credBuffer.append("\",cnonce=\"").append(cnonce);  credBuffer.append("\",nc=").append(nonceCount);  credBuffer.append(",qop=").append(qop);  credBuffer.append(",digest-uri=\"").append(digestURI);  credBuffer.append("\",response=").append(responseDigest);  if (useUTF8) {    credBuffer.append(",charset=utf-8");  }  if (authzID != null) {    credBuffer.append(",authzid=\"").append(authzID).append("\"");  }  sendSecondBindRequest(SASL_MECHANISM_DIGEST_MD5,bindDN,credBuffer.toString(),requestControls);  LDAPMessage responseMessage2=readBindResponse(ERR_LDAPAUTH_CANNOT_READ_SECOND_BIND_RESPONSE,SASL_MECHANISM_DIGEST_MD5);  responseControls.addAll(responseMessage2.getControls());  checkConnected(responseMessage2);  BindResponseProtocolOp bindResponse2=checkSuccessfulBind(responseMessage2,SASL_MECHANISM_DIGEST_MD5);  ByteString rspAuthCreds=bindResponse2.getServerSASLCredentials();  if (rspAuthCreds == null) {    LocalizableMessage message=ERR_LDAPAUTH_DIGESTMD5_NO_RSPAUTH_CREDS.get();    throw new LDAPException(ReturnCode.PROTOCOL_ERROR.get(),message);  }  String credStr=toLowerCase(rspAuthCreds.toString());  if (!credStr.startsWith("rspauth=")) {    LocalizableMessage message=ERR_LDAPAUTH_DIGESTMD5_NO_RSPAUTH_CREDS.get();    throw new LDAPException(ReturnCode.PROTOCOL_ERROR.get(),message);  }  byte[] serverRspAuth;  try {    serverRspAuth=hexStringToByteArray(credStr.substring(8));  } catch (  Exception e) {    LocalizableMessage message=ERR_LDAPAUTH_DIGESTMD5_COULD_NOT_DECODE_RSPAUTH.get(getExceptionMessage(e));    throw new LDAPException(ReturnCode.PROTOCOL_ERROR.get(),message);  }  byte[] clientRspAuth;  try {    clientRspAuth=generateDigestMD5RspAuth(authID,authzID,bindPassword,realm,nonce,cnonce,nonceCount,digestURI,qop,charset);  } catch (  Exception e) {    LocalizableMessage message=ERR_LDAPAUTH_DIGESTMD5_COULD_NOT_CALCULATE_RSPAUTH.get(getExceptionMessage(e));    throw new ClientException(ReturnCode.CLIENT_SIDE_LOCAL_ERROR,message);  }  if (!Arrays.equals(serverRspAuth,clientRspAuth)) {    LocalizableMessage message=ERR_LDAPAUTH_DIGESTMD5_RSPAUTH_MISMATCH.get();    throw new ClientException(ReturnCode.CLIENT_SIDE_LOCAL_ERROR,message);  }  return null;}  }
class C{  public void paintToolBarContentBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintToolBarContentBackground(context,g,x,y,w,h);}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public void clipRect(int x,int y,int width,int height){  graphics.clipRect(x,y,width,height);  if (debugLog()) {    info().log(toShortString() + " Setting clipRect: " + (new Rectangle(x,y,width,height))+ " New clipRect: "+ graphics.getClip());  }}  }
class C{  @Descriptor("Displays available commands.") public void help(CommandSession session){  ServiceLoader<CustomCommandScope> ldr=ServiceLoader.load(CustomCommandScope.class);  PrintStream console=session.getConsole();  for (  CustomCommandScope cmdScope : ldr) {    String scope=cmdScope.getScope();    Map<String,String> functionMap=cmdScope.getFunctionMap();    if (StringUtils.isNotEmpty(scope) && functionMap != null) {      int maxEntryLen=0;      for (      Map.Entry<String,String> entry : functionMap.entrySet()) {        int len=scope.length() + entry.getKey().length() + 4;        maxEntryLen=len > maxEntryLen ? len : maxEntryLen;      }      StringBuilder spaceBuilder=new StringBuilder();      for (int i=0; i < maxEntryLen; i++) {        spaceBuilder.append(' ');      }      String spacer=spaceBuilder.toString();      for (      Map.Entry<String,String> entry : functionMap.entrySet()) {        String name=scope + ":" + entry.getKey();        String desc=entry.getValue();        console.append(LEAD_OPTION_SPACE).append(name).append(spacer.substring(Math.min(name.length(),spacer.length()))).println(desc);      }    }  }}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws SAXException {  return null;}  }
class C{  public ArgumentParser(final String mainClassName,final LocalizableMessage toolDescription,final boolean longArgumentsCaseSensitive){  this.mainClassName=mainClassName;  this.toolDescription=toolDescription;  this.longArgumentsCaseSensitive=longArgumentsCaseSensitive;  allowsTrailingArguments=false;  trailingArgsDisplayName=null;  maxTrailingArguments=0;  minTrailingArguments=0;  initGroups();}  }
class C{  @Override protected void makeFinished(){  byte[] verify_data;  boolean isTLS=(serverHello.server_version[1] == 1);  if (isTLS) {    verify_data=new byte[12];    computerVerifyDataTLS("server finished",verify_data);  } else {    verify_data=new byte[36];    computerVerifyDataSSLv3(SSLv3Constants.server,verify_data);  }  serverFinished=new Finished(verify_data);  send(serverFinished);  if (isResuming) {    if (isTLS) {      computerReferenceVerifyDataTLS("client finished");    } else {      computerReferenceVerifyDataSSLv3(SSLv3Constants.client);    }    status=NEED_UNWRAP;  } else {    session.lastAccessedTime=System.currentTimeMillis();    status=FINISHED;  }}  }
class C{  private void ensureLogFileIsValid(final RecordParser<K,V> parser) throws ChangelogException {  try (final RandomAccessFile readerWriter=new RandomAccessFile(logfile,"rws");final BlockLogReader<K,V> reader=BlockLogReader.newReader(logfile,readerWriter,parser)){    final long lastValidPosition=reader.checkLogIsValid();    if (lastValidPosition != -1) {      readerWriter.setLength(lastValidPosition);      logger.error(INFO_CHANGELOG_LOG_FILE_RECOVERED.get(logfile.getPath()));    }  } catch (  IOException e) {    throw new ChangelogException(ERR_CHANGELOG_UNABLE_TO_RECOVER_LOG_FILE.get(logfile.getPath(),StaticUtils.stackTraceToSingleLineString(e)));  }}  }
class C{  private static String keyDump(Tree index,ByteSequence key){  StringBuilder buffer=new StringBuilder(128);  buffer.append("Index: ").append(index).append(ServerConstants.EOL);  buffer.append("Key:").append(ServerConstants.EOL);  StaticUtils.byteArrayToHexPlusAscii(buffer,key.toByteArray(),6);  return buffer.toString();}  }
class C{  public void runTest() throws Throwable {  java.util.List features=new java.util.ArrayList();  features.add("Core");  features.add("XML");  features.add("HTML");  features.add("Views");  features.add("StyleSheets");  features.add("CSS");  features.add("CSS2");  features.add("Events");  features.add("UIEvents");  features.add("MouseEvents");  features.add("MutationEvents");  features.add("HTMLEvents");  features.add("Range");  features.add("Traversal");  features.add("bogus.bogus.bogus");  Document doc;  Node rootNode;  String featureElement;  boolean state;  doc=(Document)load("staff",false);  rootNode=doc.getDocumentElement();  state=rootNode.isSupported("Core","2.0");  assertTrue("Core2",state);  for (int indexN10078=0; indexN10078 < features.size(); indexN10078++) {    featureElement=(String)features.get(indexN10078);    state=rootNode.isSupported(featureElement,"1.0");  }  for (int indexN10083=0; indexN10083 < features.size(); indexN10083++) {    featureElement=(String)features.get(indexN10083);    state=rootNode.isSupported(featureElement,"2.0");  }}  }
class C{  public static String join(Collection<?> c,String delim){  StringBuilder retval=new StringBuilder();  Iterator<?> itr=c.iterator();  if (itr.hasNext())   retval.append(itr.next()); else   return "";  while (itr.hasNext()) {    retval.append(delim);    retval.append(itr.next());  }  return retval.toString();}  }
class C{  public static boolean removeAccountFederation(NameIDInfo info,String userID) throws SAML2Exception {  SAML2Utils.debug.message("AccountUtils.removeAccountFederation:");  if (info == null) {    throw new SAML2Exception(SAML2Utils.bundle.getString("nullNameIDInfo"));  }  if (userID == null) {    throw new SAML2Exception(SAML2Utils.bundle.getString("nullUserID"));  }  try {    Set existingFed=SAML2Utils.getDataStoreProvider().getAttribute(userID,getNameIDInfoAttribute());    Set existingInfoKey=SAML2Utils.getDataStoreProvider().getAttribute(userID,getNameIDInfoKeyAttribute());    if (existingFed == null || existingFed.isEmpty()) {      if (SAML2Utils.debug.messageEnabled()) {        SAML2Utils.debug.message("AccountUtils.removeAccount" + "Federation: user does not have account federation infos.");      }      return false;    }    String infoValue=info.toValueString();    String infoKeyValue=info.getNameIDInfoKey().toValueString();    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message("AccountUtils.removeAccount" + "Federation: info to be removed:" + infoValue + "user="+ userID+ "infoKeyValue = "+ infoKeyValue);    }    if (existingFed.contains(infoValue)) {      existingFed.remove(infoValue);      if (existingInfoKey != null && existingInfoKey.contains(infoKeyValue)) {        existingInfoKey.remove(infoKeyValue);      }      Map map=new HashMap();      map.put(getNameIDInfoAttribute(),existingFed);      map.put(getNameIDInfoKeyAttribute(),existingInfoKey);      SAML2Utils.getDataStoreProvider().setAttributes(userID,map);      return true;    }    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message("AccountUtils.removeAccount" + "Federation: account federation info not found.");    }    return false;  } catch (  DataStoreProviderException dse) {    SAML2Utils.debug.error("SAML2Utils.removeAccountFederation: " + "DataStoreProviderException",dse);    throw new SAML2Exception(dse.getMessage());  }}  }
class C{  protected String start(String name,StringManager smClient){  StringWriter stringWriter=new StringWriter();  PrintWriter printWriter=new PrintWriter(stringWriter);  super.start(printWriter,name,smClient);  return stringWriter.toString();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node retval;  Node lastChild;  Node firstChild;  Node refChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  textNode=doc.createTextNode("terday");  refChild=titleAttr.getFirstChild();  retval=titleAttr.insertBefore(textNode,refChild);  value=titleAttr.getValue();  assertEquals("attrValue","terdayYes",value);  value=titleAttr.getNodeValue();  assertEquals("attrNodeValue","terdayYes",value);  value=retval.getNodeValue();  assertEquals("retvalValue","terday",value);  firstChild=titleAttr.getFirstChild();  value=firstChild.getNodeValue();  assertEquals("firstChildValue","terday",value);  lastChild=titleAttr.getLastChild();  value=lastChild.getNodeValue();  assertEquals("lastChildValue","Yes",value);}  }
class C{  public Cache(String name,int initCapacity,int maxSize){  this(name,initCapacity,maxSize,0.75f);}  }
class C{  @Override public void onTokenRefresh(){  String refreshedToken=FirebaseInstanceId.getInstance().getToken();  Log.d(TAG,"Refreshed token: " + refreshedToken);  sendRegistrationToServer(refreshedToken);}  }
class C{  public static void connectionClosed(ClientConnection clientConnection){synchronized (directoryServer.establishedConnections) {    directoryServer.establishedConnections.remove(clientConnection);    directoryServer.currentConnections--;  }}  }
class C{  private long stringToIp(String ip) throws PolicyException {  StringTokenizer st=new StringTokenizer(ip,".");  int tokenCount=st.countTokens();  if (tokenCount != 4) {    String args[]={"ip",ip};    throw new PolicyException(ResBundleUtils.rbName,"invalid_property_value",args,null);  }  long ipValue=0L;  while (st.hasMoreElements()) {    String s=st.nextToken();    short ipElement=0;    try {      ipElement=Short.parseShort(s);    } catch (    Exception e) {      String args[]={"ip",ip};      throw new PolicyException(ResBundleUtils.rbName,"invalid_property_value",args,null);    }    if (ipElement < 0 || ipElement > 255) {      String args[]={"ipElement",s};      throw new PolicyException(ResBundleUtils.rbName,"invalid_property_value",args,null);    }    ipValue=ipValue * 256L + ipElement;  }  return ipValue;}  }
class C{  public Name add(int posn,String comp) throws InvalidNameException {  impl.add(posn,comp);  return this;}  }
class C{  public static void updateCookieToMediumConsistencyPoint(MultiDomainServerState cookie,ECLMultiDomainDBCursor cursor,ChangeNumberIndexRecord cnIndexRecord) throws ChangelogException {  if (cnIndexRecord == null) {    return;  }  while (cursor.next()) {    UpdateMsg updateMsg=cursor.getRecord();    if (updateMsg.getCSN().compareTo(cnIndexRecord.getCSN()) > 0) {      break;    }    cookie.update(cursor.getData(),updateMsg.getCSN());  }}  }
class C{  private void handleMessageInternal(@NotNull IUser user,String message) throws RpcException {  kernelComm.sendMessage(user,message);  kernelComm.performMarkAsRead(user,0);}  }
class C{  public void testDivisionKnuthOneDigitByOneDigit(){  byte aBytes[]={113,-83,123,-5};  byte bBytes[]={2,-3,-4,-5};  int aSign=1;  int bSign=-1;  byte rBytes[]={-37};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public Instant minusMillis(long millisToSubtract){  if (millisToSubtract == Long.MIN_VALUE) {    return plusMillis(Long.MAX_VALUE).plusMillis(1);  }  return plusMillis(-millisToSubtract);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList childList;  doc=(Document)load("staffNS",false);  childList=doc.getElementsByTagNameNS("**","*");  assertSize("documentgetelementsbytagnameNS03",0,childList);}  }
class C{  public final boolean isMimeTypeEqual(DataFlavor dataFlavor){  return isMimeTypeEqual(dataFlavor.mimeType);}  }
class C{  public static Map<IdType,Set<IdOperation>> parseSupportedTypesAndOperations(Set<String> typesAndOperations){  Map<IdType,Set<IdOperation>> supportedTypesAndOperations=new HashMap<IdType,Set<IdOperation>>(6);  if (DEBUG.messageEnabled()) {    DEBUG.message("Parsing supported types and operations:" + typesAndOperations);  }  for (  String typeAndOperation : typesAndOperations) {    int idx=typeAndOperation.indexOf('=');    if (idx == -1) {      DEBUG.error("Invalid supported type/operation configuration: " + typeAndOperation);      continue;    }    String type=typeAndOperation.substring(0,idx).trim();    IdType idType=null;    boolean supportsService=false;    if (type.equalsIgnoreCase(IdType.USER.getName())) {      idType=IdType.USER;      supportsService=true;    } else     if (type.equalsIgnoreCase(IdType.GROUP.getName())) {      idType=IdType.GROUP;    } else     if (type.equalsIgnoreCase(IdType.ROLE.getName())) {      idType=IdType.ROLE;    } else     if (type.equalsIgnoreCase(IdType.FILTEREDROLE.getName())) {      idType=IdType.FILTEREDROLE;    } else     if (type.equalsIgnoreCase(IdType.AGENT.getName())) {      idType=IdType.AGENT;    } else     if (type.equalsIgnoreCase(IdType.REALM.getName())) {      idType=IdType.REALM;      supportsService=true;    }    supportedTypesAndOperations.put(idType,parseSupportedOperations(typeAndOperation.substring(idx + 1),supportsService));  }  Set<IdOperation> realmOps=supportedTypesAndOperations.get(IdType.REALM);  if (realmOps == null) {    realmOps=new HashSet<IdOperation>(1);  }  realmOps.add(IdOperation.SERVICE);  supportedTypesAndOperations.put(IdType.REALM,realmOps);  if (DEBUG.messageEnabled()) {    DEBUG.message("Parsed supported types and operations are: " + supportedTypesAndOperations);  }  return supportedTypesAndOperations;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  NodeList elementList;  boolean hasAttributes;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("emp:employee");  element=(Element)elementList.item(0);  assertNotNull("empEmployeeNotNull",element);  hasAttributes=element.hasAttributes();  assertTrue("hasAttributes",hasAttributes);}  }
class C{  public String toXMLString() throws XACMLException {  return toXMLString(true,true);}  }
class C{  private AttributeSchemaImpl checkAndUpdateChoiceValues(AttributeSchemaImpl existingAttr,AttributeSchemaImpl newAttr,List<String> newChoices) throws UpgradeException {  List<String> choices=new ArrayList<>(Arrays.asList(existingAttr.getChoiceValues()));  if (choices.containsAll(newChoices)) {    return null;  } else {    choices.addAll(newChoices);    updateChoiceValues(newAttr,choices);  }  return newAttr;}  }
class C{  @Override public List<Foo> findByUuid_C(String uuid,long companyId){  return findByUuid_C(uuid,companyId,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);}  }
class C{  private void createAgent(Map<String,Set<String>> idAttrs,IdType objectIdType,String idType,String idName,String realm,SSOToken adminToken) throws SMSException, SSOException, ConfigurationException, IdRepoException, MalformedURLException {  String agentType;  String serverUrl=null;  String agentUrl=null;  final String SERVER_URL="serverurl";  final String AGENT_URL="agenturl";  final String DEFAULT_AGENT_TYPE="2.2_Agent";  Set<String> set=idAttrs.remove(IdConstants.AGENT_TYPE);  if (set == null) {    set=idAttrs.remove(AGENT_TYPE_LOWER_CASE);  }  if (set != null && !set.isEmpty()) {    agentType=set.iterator().next();  } else   if (objectIdType.equals(IdType.AGENTONLY) || objectIdType.equals(IdType.AGENT)) {    agentType=DEFAULT_AGENT_TYPE;  } else {    throw new UnsupportedOperationException("Unsupported: Agent Type required for " + idType);  }  set=idAttrs.remove(SERVER_URL);  if (set != null && !set.isEmpty()) {    serverUrl=set.iterator().next();  }  set=idAttrs.remove(AGENT_URL);  if (set != null && !set.isEmpty()) {    agentUrl=set.iterator().next();  }  if (agentType.equals(AgentConfiguration.AGENT_TYPE_WEB) || agentType.equals(AgentConfiguration.AGENT_TYPE_J2EE)) {    if (StringUtils.isBlank(agentUrl)) {      throw new MalformedURLException("Agent type requires agenturl to be configured.");    } else     if (StringUtils.isBlank(serverUrl)) {      throw new MalformedURLException("Agent type requires serverurl to be configured.");    }  }  if (objectIdType.equals(IdType.AGENT) || objectIdType.equals(IdType.AGENTONLY)) {    if (StringUtils.isBlank(serverUrl) || StringUtils.isBlank(agentUrl)) {      AgentConfiguration.createAgent(adminToken,realm,idName,agentType,idAttrs);    } else {      AgentConfiguration.createAgent(adminToken,realm,idName,agentType,idAttrs,serverUrl,agentUrl);    }  } else {    if (StringUtils.isBlank(serverUrl) || StringUtils.isBlank(agentUrl)) {      AgentConfiguration.createAgentGroup(adminToken,realm,idName,agentType,idAttrs);    } else {      AgentConfiguration.createAgentGroup(adminToken,realm,idName,agentType,idAttrs,serverUrl,agentUrl);    }  }}  }
class C{  public SpeechConfiguration(String audioFormat){  this.audioFormat=audioFormat;}  }
class C{  public void test_maxLjava_util_CollectionLjava_util_Comparator(){  ReversedMyIntComparator rmic=new ReversedMyIntComparator();  assertTrue("Returned incorrect max element using custom comparator",Collections.max(mys,rmic) == myobjArray[0]);  ArrayList al=new ArrayList();  try {    Collections.max(al,rmic);    fail("NoSuchElementException expected");  } catch (  NoSuchElementException e) {  }  al.add("String");  al.add(new Integer(1));  al.add(new Double(3.14));  try {    Collections.max(al,rmic);    fail("ClassCastException expected");  } catch (  ClassCastException e) {  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsu.TimestampElement createTimestampElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsu.impl.TimestampElementImpl();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node parentNode;  String parentName;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  parentNode=employeeNode.getParentNode();  parentName=parentNode.getNodeName();  assertEqualsAutoCase("element","parentNodeName","body",parentName);}  }
class C{  public void checkFileExists(File file) throws FileNotFoundException {  logger.config("Reading file:" + "path" + file.getPath() + ":abs:"+ file.getAbsolutePath());  if (!file.exists()) {    logger.severe("Unable to find:" + file.getPath());    throw new FileNotFoundException(ErrorMessage.UNABLE_TO_FIND_FILE.getMsg(file.getPath()));  }}  }
class C{  public AttrSet(Attr attr){  add(attr);}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  @Override public Writer append(CharSequence csq) throws IOException {  try {    int len=0;    if (csq != null) {      len=csq.length();    }    beforeWrite(len);    out.append(csq);    afterWrite(len);  } catch (  IOException e) {    handleIOException(e);  }  return this;}  }
class C{  void shutdown(){  if (isShuttingDown.compareAndSet(false,true)) {    logsReplicaDB.clear();    logsCNIndexDB.clear();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node addressNode;  Text textNode;  Text splitNode;  String value;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  addressNode=elementList.item(0);  textNode=(Text)addressNode.getFirstChild();  splitNode=textNode.splitText(30);  value=splitNode.getNodeValue();  assertEquals("textSplitTextFourAssert","98551",value);}  }
class C{  public int component_count(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("component_count",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    return $self.component_count();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public InsertTabAction(){  super(insertTabAction);}  }
class C{  public FrameBodyTOPE(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public boolean equals(ProxySubject subject){  return super.equals(subject);}  }
class C{  public boolean greaterThanOrEqual(XObject obj2) throws javax.xml.transform.TransformerException {  if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.lessThanOrEqual(this);  return this.num() >= obj2.num();}  }
class C{  public void reset(){  engineReset();  state=INITIAL;}  }
class C{  private Response processResponse(Response response,Bindings bindings,final URI originalUri){  LocationHeader header=LocationHeader.valueOf(response);  if (header.getLocationUri() != null) {    try {      URI currentURI=new URI(header.getLocationUri());      URI rebasedURI=Uris.rebase(currentURI,evaluateBaseUri(bindings,originalUri));      if (!currentURI.equals(rebasedURI)) {        response.getHeaders().put(LocationHeader.NAME,rebasedURI.toString());      }    } catch (    URISyntaxException|ResponseException ex) {      logger.error("Cannot rebase 'Location' URI",ex);      return newInternalServerError(ex);    }  }  return response;}  }
class C{  private void copy(){  ImmutableList<A> p=elements=new ImmutableList<>(elements.head,elements.tail);  while (true) {    ImmutableList<A> tail=p.tail;    if (tail == null) {      break;    }    tail=new ImmutableList<>(tail.head,tail.tail);    p.setTail(tail);    p=tail;  }  last=p;  shared=false;}  }
class C{  public void testClearBitPositiveInside2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=17;  byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public boolean isOldToken(){  return oldToken;}  }
class C{  public static boolean isAuthenticated(){  SecurityContext securityContext=SecurityContextHolder.getContext();  Authentication authentication=securityContext.getAuthentication();  if (authentication != null) {    Collection<? extends GrantedAuthority> authorities=authentication.getAuthorities();    if (authorities != null) {      for (      GrantedAuthority authority : authorities) {        if (authority.getAuthority().equals(AuthoritiesConstants.ANONYMOUS)) {          return false;        }      }    }    return true;  }  return false;}  }
class C{  private boolean validateEndIp(Set ipSet) throws PolicyException {  if (startIp == Long.MAX_VALUE) {    String args[]={END_IP,START_IP};    throw new PolicyException(ResBundleUtils.rbName,"pair_property_not_defined",args,null);  }  if (ipSet.size() != 1) {    String args[]={END_IP};    throw new PolicyException(ResBundleUtils.rbName,"multiple_values_not_allowed_for",args,null);  }  Iterator endIpIter=ipSet.iterator();  try {    String endIpString=(String)endIpIter.next();    endIp=stringToIp(endIpString);  } catch (  ClassCastException ce) {    String args[]={END_IP};    throw new PolicyException(ResBundleUtils.rbName,"property_is_not_a_String",args,ce);  }  if (endIp < startIp) {    throw new PolicyException(ResBundleUtils.rbName,"start_ip_can_not_be_greater_than_end_ip",null,null);  }  return true;}  }
class C{  private void processJournal() throws IOException {  fileSystem.delete(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        fileSystem.delete(entry.cleanFiles[t]);        fileSystem.delete(entry.dirtyFiles[t]);      }      i.remove();    }  }}  }
class C{  public void addSelectionPath(TreePath path){  getSelectionModel().addSelectionPath(path);}  }
class C{  private void removeOldestProfile(List<Map<String,Object>> profiles){  Map<String,Object> oldestProfile=null;  long oldestDate=currentTimeMillis();  for (  Map<String,Object> profile : profiles) {    long lastSelectedDate=(Long)profile.get("lastSelectedDate");    if (lastSelectedDate < oldestDate) {      oldestDate=lastSelectedDate;      oldestProfile=profile;    }  }  if (oldestProfile != null) {    profiles.remove(oldestProfile);  }}  }
class C{  protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, java.io.IOException {  processRequest(request,response);}  }
class C{  private void copyTables(){  if (prefixTable != null) {    prefixTable=(Hashtable)prefixTable.clone();  } else {    prefixTable=new Hashtable();  }  if (uriTable != null) {    uriTable=(Hashtable)uriTable.clone();  } else {    uriTable=new Hashtable();  }  elementNameTable=new Hashtable();  attributeNameTable=new Hashtable();  declSeen=true;}  }
class C{  public boolean isContextual(){  return (mask & CONTEXTUAL_MASK) != 0;}  }
class C{  private boolean findAndRemove(Object e){  if (e != null) {    for (Node pred=null, p=head; p != null; ) {      Object item=p.item;      if (p.isData) {        if (item != null && item != p && e.equals(item) && p.tryMatchData()) {          unsplice(pred,p);          return true;        }      } else       if (item == null)       break;      pred=p;      if ((p=p.next) == pred) {        pred=null;        p=head;      }    }  }  return false;}  }
class C{  boolean inSubroutine(final long id){  if ((status & Label.VISITED) != 0) {    return (srcAndRefPositions[(int)(id >>> 32)] & (int)id) != 0;  }  return false;}  }
class C{  public InstantiationError(){  super();}  }
class C{  public static XMPDateTime convertToDate(String rawValue) throws XMPException {  if (rawValue == null || rawValue.length() == 0) {    throw new XMPException("Empty convert-string",XMPError.BADVALUE);  } else {    return ISO8601Converter.parse(rawValue);  }}  }
class C{  public HeapImpl(final HeapImpl parent,final Name name){  this.parent=parent;  this.name=checkNotNull(name);}  }
class C{  private void assertNoConfigEntriesWithFilter(String filter,String errorMsg) throws Exception {  InternalSearchOperation op=connection.processSearch(newSearchRequest("cn=config",WHOLE_SUBTREE,filter));  assertEquals(op.getResultCode(),ResultCode.SUCCESS,op.getErrorMessage().toString());  List<SearchResultEntry> entries=op.getSearchEntries();  assertNotNull(entries);  StringBuilder sb=new StringBuilder();  for (  SearchResultEntry entry : entries) {    sb.append(entry.toLDIFString());    sb.append(' ');  }  assertEquals(entries.size(),0,errorMsg + ":\n" + sb);}  }
class C{  private void initData(Context context){  scroller=new WheelScroller(getContext(),scrollingListener);  mPaintLineCenter=new Paint();  mPaintLineCenter.setColor(DefaultConfig.COLOR);  mPaintLineCenter.setAntiAlias(true);  mPaintLineCenter.setStrokeWidth(1);  mPaintLineCenter.setStyle(Paint.Style.FILL);  mPaintLineRight=new Paint();  mPaintLineRight.setColor(0xffe8e8e8);  mPaintLineRight.setAntiAlias(true);  mPaintLineRight.setStrokeWidth(1);  mPaintLineRight.setStyle(Paint.Style.FILL);  mPaintRectCenter=new Paint();  mPaintRectCenter.setColor(DefaultConfig.COLOR);  mPaintRectCenter.setAlpha((int)(0.1 * 255));  mPaintRectCenter.setAntiAlias(true);  mPaintRectCenter.setStyle(Paint.Style.FILL);  mLineRightMar=context.getResources().getDimensionPixelSize(R.dimen.picker_line_mar);  defaultColor=DefaultConfig.TV_NORMAL_COLOR;  selectorColor=DefaultConfig.TV_SELECTOR_COLOR;}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  float xT=event.getX();  float yT=event.getY();  int xV=circleShape.getPoint().x;  int yV=circleShape.getPoint().y;  int radius=circleShape.getRadius();  double dx=Math.pow(xT - xV,2);  double dy=Math.pow(yT - yV,2);  boolean isTouchOnFocus=(dx + dy) <= Math.pow(radius,2);switch (event.getAction()) {case MotionEvent.ACTION_DOWN:    if (isTouchOnFocus && isPerformClick) {      targetView.getView().setPressed(true);      targetView.getView().invalidate();    }  return true;case MotionEvent.ACTION_UP:if (isTouchOnFocus || dismissOnTouch) dismiss();if (isTouchOnFocus && isPerformClick) {targetView.getView().performClick();targetView.getView().setPressed(true);targetView.getView().invalidate();targetView.getView().setPressed(false);targetView.getView().invalidate();}return true;default :break;}return super.onTouchEvent(event);}  }
class C{  public void removeResourceEnvRef(String name){  entries.remove(name);  ContextResourceEnvRef resourceEnvRef=null;synchronized (resourceEnvRefs) {    resourceEnvRef=resourceEnvRefs.remove(name);  }  if (resourceEnvRef != null) {    support.firePropertyChange("resourceEnvRef",resourceEnvRef,null);    resourceEnvRef.setNamingResources(null);  }}  }
class C{  public synchronized boolean isNotificationEnabled(Notification notification){  String type=notification.getType();  if (type == null) {    return false;  }  try {    for (    String prefix : enabledTypes) {      if (type.startsWith(prefix)) {        return true;      }    }  } catch (  java.lang.NullPointerException e) {    return false;  }  return false;}  }
class C{  public static ArrayList<String> matches(String text){  return matches(text,ALL);}  }
class C{  public XMLSignatureException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
class C{  private void rangeCheck(int index){  if (index >= size)   throw new IndexOutOfBoundsException(outOfBoundsMsg(index));}  }
class C{  public String buildJavaVendor(){  return properties.getProperty("build.java.vendor");}  }
class C{  @NonNull public final Agera observeOnMain(){  return observeOn(Looper.getMainLooper());}  }
class C{  private java.awt.Color[] read_color_array() throws java.io.IOException {  java.util.Collection<java.awt.Color> color_list=new java.util.LinkedList<java.awt.Color>();  for (; ; ) {    java.awt.Color curr_color=read_color();    if (curr_color == null) {      break;    }    color_list.add(curr_color);  }  java.awt.Color[] result=new java.awt.Color[color_list.size()];  java.util.Iterator<java.awt.Color> it=color_list.iterator();  for (int i=0; i < result.length; ++i) {    result[i]=it.next();  }  return result;}  }
class C{  public void removeTreeSelectionListener(TreeSelectionListener x){  listenerList.remove(TreeSelectionListener.class,x);}  }
class C{  public long toTotalMonths(){  return years * 12L + months;}  }
class C{  public void uninstallUI(JComponent c){  uninstallDefaults();  uninstallListeners();  this.spinner=null;  c.removeAll();}  }
class C{  public void addDefinition(ICOSDefinition cosDef) throws UMSException {  if (!(cosDef instanceof DirectCOSDefinition)) {    String msg=i18n.getString(IUMSConstants.INVALID_COSDEFINITION);    throw new UMSException(msg);  }  String[] cosAttributes=cosDef.getCOSAttributes();  AbstractCollection aList=(AbstractCollection)Arrays.asList(ICOSDefinition.qualifiers);  for (int i=0; i < cosAttributes.length; i++) {    String cosAttribute=null;    String qualifier=null;    StringTokenizer st=new StringTokenizer(cosAttributes[i]);    if (st.hasMoreTokens()) {      cosAttribute=st.nextToken();    }    if (cosAttribute == null) {      String msg=i18n.getString(IUMSConstants.INVALID_COS_ATTRIBUTE_QUALIFIER);      throw new UMSException(msg);    }    if (st.hasMoreTokens())     qualifier=st.nextToken();    if (qualifier == null) {      qualifier=ICOSDefinition.qualifiers[ICOSDefinition.DEFAULT];      cosDef.removeCOSAttribute(cosAttribute);      cosDef.addCOSAttribute(cosAttribute,ICOSDefinition.DEFAULT);    }    if (!aList.contains(qualifier)) {      String msg=i18n.getString(IUMSConstants.INVALID_COS_ATTRIBUTE_QUALIFIER);      throw new UMSException(msg);    }  }  PersistentObject po=(PersistentObject)cosDef;  _parentObject.addChild(po);}  }
class C{  public void close() throws IOException {  if (sink != null) {    sink.receivedLast();  }}  }
class C{  public IOException(String message){  super(message);}  }
class C{  public String toXMLString(){  StringBuilder xml=new StringBuilder();  xml.append("<SessionRequest vers=").append(QUOTE).append(requestVersion).append(QUOTE).append(" reqid=").append(QUOTE).append(requestID).append(QUOTE);  if (requester != null) {    try {      String data=Base64.encode(requester.getBytes("UTF8"));      xml.append(" requester=").append(QUOTE).append(data).append(QUOTE);    } catch (    java.io.UnsupportedEncodingException e) {      throw new IllegalArgumentException(e.getMessage());    }  }  xml.append('>').append(NL);switch (methodID) {case GetSession:    xml.append("<GetSession reset=");  if (resetFlag)   xml.append(QUOTE).append("true").append(QUOTE).append('>').append(NL); else   xml.append(QUOTE).append("false").append(QUOTE).append('>').append(NL);xml.append("<SessionID>").append(sessionID).append("</SessionID>").append(NL);xml.append("</GetSession>").append(NL);break;case GetValidSessions:xml.append("<GetValidSessions>").append(NL);xml.append("<SessionID>").append(sessionID).append("</SessionID>").append(NL);if (pattern != null) {xml.append("<Pattern>").append(pattern).append("</Pattern>").append(NL);}xml.append("</GetValidSessions>").append(NL);break;case DestroySession:if (destroySessionID == null) {return null;}xml.append("<DestroySession>").append(NL);xml.append("<SessionID>").append(sessionID).append("</SessionID>").append(NL);xml.append("<DestroySessionID>").append(destroySessionID).append("</DestroySessionID>").append(NL);xml.append("</DestroySession>").append(NL);break;case Logout:xml.append("<Logout>").append(NL);xml.append("<SessionID>").append(sessionID).append("</SessionID>").append(NL);xml.append("</Logout>").append(NL);break;case AddSessionListener:if (notificationURL == null) {return null;}xml.append("<AddSessionListener>").append(NL);xml.append("<SessionID>").append(sessionID).append("</SessionID>").append(NL);xml.append("<URL>").append(notificationURL).append("</URL>").append(NL);xml.append("</AddSessionListener>").append(NL);break;case SetProperty:if (propertyName == null || propertyValue == null) {return null;}xml.append("<SetProperty>").append(NL);xml.append("<SessionID>").append(sessionID).append("</SessionID>").append(NL);xml.append("<Property name=").append(QUOTE).append(XMLUtils.escapeSpecialCharacters(propertyName)).append(QUOTE).append(" value=").append(QUOTE).append(XMLUtils.escapeSpecialCharacters(propertyValue)).append(QUOTE).append('>').append("</Property>").append(NL);xml.append("</SetProperty>").append(NL);break;case GetSessionCount:xml.append("<GetSessionCount>").append(NL);xml.append("<SessionID>").append(sessionID).append("</SessionID>").append(NL);xml.append("<UUID>").append(uuid).append("</UUID>").append(NL);xml.append("</GetSessionCount>").append(NL);break;default :return null;}xml.append("</SessionRequest>");return xml.toString();}  }
class C{  public void repaint(long time,int x,int y,int width,int height){  if (RepaintManager.HANDLE_TOP_LEVEL_PAINT) {    RepaintManager.currentManager(this).addDirtyRegion(this,x,y,width,height);  } else {    super.repaint(time,x,y,width,height);  }}  }
class C{  public void test_setAccessible$Ljava_lang_reflect_AccessibleObjectZ(){  try {    AccessibleObject ao=TestClass.class.getField("aField");    AccessibleObject[] aoa=new AccessibleObject[]{ao};    AccessibleObject.setAccessible(aoa,true);    assertTrue("Returned false to isAccessible",ao.isAccessible());    AccessibleObject.setAccessible(aoa,false);    assertTrue("Returned true to isAccessible",!ao.isAccessible());  } catch (  Exception e) {    fail("Exception during test : " + e.getMessage());  }}  }
class C{  public void handleTblSupportedCharsetsButtonDeleteRequest(RequestInvocationEvent event) throws ModelControlException {  setSubmitCycle(true);  CCActionTable table=(CCActionTable)getChild(SMG11NModelImpl.ATTRIBUTE_NAME_SUPPORTED_CHARSETS);  table.restoreStateData();  CCActionTableModel tblModel=(CCActionTableModel)propertySheetModel.getModel(SMG11NModelImpl.ATTRIBUTE_NAME_SUPPORTED_CHARSETS);  Integer[] selected=tblModel.getSelectedRows();  if ((selected != null) && (selected.length > 0)) {    OrderedSet tblValues=(OrderedSet)getPageSessionAttribute(SMG11NModelImpl.ATTRIBUTE_NAME_SUPPORTED_CHARSETS);    tblValues.removeAll(selected);    setPageSessionAttribute(SMG11NModelImpl.ATTRIBUTE_NAME_SUPPORTED_CHARSETS,tblValues);    populateSupportedCharsetsTable(tblValues);  }  forwardTo();}  }
class C{  public void reset(){  if (!m_hasBeenReset && m_shouldReset) {    m_hasBeenReset=true;    if (this.m_outputStream != null) {      try {        m_outputStream.close();      } catch (      java.io.IOException ioe) {      }    }    m_outputStream=null;    m_countersTable=null;    m_xcontext.reset();    m_xcontext.getVarStack().reset();    resetUserParameters();    m_currentTemplateElements.removeAllElements();    m_currentMatchTemplates.removeAllElements();    m_currentMatchedNodes.removeAllElements();    m_serializationHandler=null;    m_outputTarget=null;    m_keyManager=new KeyManager();    m_attrSetStack=null;    m_countersTable=null;    m_currentTemplateRuleIsNull=new BoolStack();    m_doc=DTM.NULL;    m_transformThread=null;    m_xcontext.getSourceTreeManager().reset();  }}  }
class C{  public void validate(ValidatableObject vo) throws SAXException {  if (validatedObjects.add(ProxyGroup.unwrap(vo))) {    MSVValidator.validate(jaxbContext,this,vo);  } else {    reportEvent(vo,Messages.format(Messages.CYCLE_DETECTED));  }}  }
class C{  public Promise<QueryResponse,ResourceException> queryPolicies(Context context,QueryRequest request,QueryResourceHandler resultHandler){  return policyResource.handleQuery(context,request,resultHandler);}  }
class C{  protected SetOfIntegerSyntax(int lowerBound,int upperBound){  if (lowerBound <= upperBound && lowerBound < 0) {    throw new IllegalArgumentException();  }  members=lowerBound <= upperBound ? new int[][]{{lowerBound,upperBound}} : new int[0][];}  }
class C{  private ArrayIterator(final M[] a){  this.a=a;}  }
class C{  public void test_getContent() throws IOException {  URLConnection conn=new URL("http://www.apache.org").openConnection();  Class[] classes={Foo.class,String.class};  ContentHandler handler=new ContentHandlerImpl();  ((ContentHandlerImpl)handler).setContent(new Foo());  Object content=handler.getContent(conn,classes);  assertEquals("Foo",((Foo)content).getFoo());  ((ContentHandlerImpl)handler).setContent(new FooSub());  content=handler.getContent(conn,classes);  assertEquals("FooSub",((Foo)content).getFoo());  Class[] classes2={FooSub.class,String.class};  ((ContentHandlerImpl)handler).setContent(new Foo());  content=handler.getContent(conn,classes2);  assertNull(content);}  }
class C{  public FingerprintCertificateMapper(){  super();}  }
class C{  protected void configureList(){  list.setFont(comboBox.getFont());  list.setForeground(comboBox.getForeground());  list.setBackground(comboBox.getBackground());  list.setSelectionForeground(UIManager.getColor("ComboBox.selectionForeground"));  list.setSelectionBackground(UIManager.getColor("ComboBox.selectionBackground"));  list.setBorder(null);  list.setCellRenderer(comboBox.getRenderer());  list.setFocusable(false);  list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);  setListSelection(comboBox.getSelectedIndex());  installListListeners();}  }
class C{  public void destroy() throws Exception {  for (  ServiceConfigBean<?> serviceConfig : serviceConfigs) {    try {      serviceConfig.unexport();    } catch (    Throwable e) {      LoggerUtil.error(e.getMessage(),e);    }  }  for (  RefererConfigBean<?> referenceConfig : referenceConfigs.values()) {    try {      referenceConfig.destroy();    } catch (    Throwable e) {      LoggerUtil.error(e.getMessage(),e);    }  }}  }
class C{  public void testGetMetaData() throws SQLException {  PreparedStatement ps=null;  try {    String query="update zoo set name='Masha', family='cat' where id=?;";    ps=conn.prepareStatement(query);    assertNotNull(ps);    ResultSetMetaData meta=ps.getMetaData();    assertNotNull(meta);  }  finally {    try {      ps.close();    } catch (    SQLException ee) {    }  }  try {    String query="select * from zoo where id = ?";    ps=conn.prepareStatement(query);    ResultSetMetaData rsmd=ps.getMetaData();    assertNotNull(rsmd);    assertEquals(3,rsmd.getColumnCount());    assertEquals("id",rsmd.getColumnName(1));  }  finally {    try {      ps.close();    } catch (    SQLException ee) {    }  }  try {    ps.getMetaData();    fail("SQLException expected");  } catch (  SQLException e) {  }}  }
class C{  static int toUpperCaseEx(int codePoint){  assert isValidCodePoint(codePoint);  return CharacterData.of(codePoint).toUpperCaseEx(codePoint);}  }
class C{  public static boolean convertToBoolean(String value) throws XMPException {  if (value == null || value.length() == 0) {    throw new XMPException("Empty convert-string",XMPError.BADVALUE);  }  value=value.toLowerCase();  try {    return Integer.parseInt(value) != 0;  } catch (  NumberFormatException e) {    return "true".equals(value) || "t".equals(value) || "on".equals(value)|| "yes".equals(value);  }}  }
class C{  public static boolean isNormalized(CharSequence src,Form form){  return NativeNormalizer.isNormalized(src,form);}  }
class C{  public UUID(long mostSigBits,long leastSigBits){  this.mostSigBits=mostSigBits;  this.leastSigBits=leastSigBits;  init();}  }
class C{  public boolean hasDescription(){  return (description != null);}  }
class C{  public PlaPointInt orthogonal_projection(PlaPointInt p_other){  PlaPointInt result;  int horizontal_distance=Math.abs(this.v_x - p_other.v_x);  int vertical_distance=Math.abs(this.v_y - p_other.v_y);  if (horizontal_distance <= vertical_distance) {    result=new PlaPointInt(p_other.v_x,this.v_y);  } else {    result=new PlaPointInt(this.v_x,p_other.v_y);  }  return result;}  }
class C{  public boolean equal(org.omg.DynamicAny.DynAny dyn_any){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("equal",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    return $self.equal(dyn_any);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private void connect(InetAddress anAddr,int aPort,int timeout) throws IOException {  InetAddress normalAddr=anAddr.isAnyLocalAddress() ? InetAddress.getLocalHost() : anAddr;  if (streaming && usingSocks()) {    socksConnect(anAddr,aPort,0);  } else {    IoBridge.connect(fd,normalAddr,aPort,timeout);  }  super.address=normalAddr;  super.port=aPort;}  }
class C{  public void addElement(int value){  if ((m_firstFree + 1) >= m_mapSize) {    if (null == m_map) {      m_map=new int[m_blocksize];      m_mapSize=m_blocksize;    } else {      m_mapSize+=m_blocksize;      int newMap[]=new int[m_mapSize];      System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);      m_map=newMap;    }  }  m_map[m_firstFree]=value;  m_firstFree++;}  }
class C{  private void logEntry(LogEntry entry){  StringBuilder logMessage=new StringBuilder("Bundle: ");  logMessage.append(entry.getBundle());  if (entry.getServiceReference() != null) {    logMessage.append(" - ");    logMessage.append(entry.getServiceReference());  }  logMessage.append(" ");  logMessage.append(entry.getMessage());  Throwable ex=entry.getException();switch (entry.getLevel()) {case LogService.LOG_ERROR:{      defaultEntryLogger.error(logMessage.toString(),ex);      break;    }case LogService.LOG_WARNING:{    defaultEntryLogger.warn(logMessage.toString(),ex);    break;  }case LogService.LOG_INFO:{  defaultEntryLogger.info(logMessage.toString(),ex);  break;}case LogService.LOG_DEBUG:{defaultEntryLogger.debug(logMessage.toString(),ex);break;}default :{defaultEntryLogger.warn("Unknown OSGi log level [" + entry.getLevel() + "] for"+ logMessage.toString(),ex);}}}  }
class C{  public Boolean isMustUnderstand(){  return mustUnderstand;}  }
class C{  public boolean isInFinalState(){  return state == State.FINISHED || state == State.CANCELLED || state == State.FAILED || state == State.INTERRUPTED;}  }
class C{  @Override public WXDomObject clone(){  if (sDestroy.get()) {    return null;  }  WXDomObject dom=null;  try {    dom=new WXDomObject();    if (this.cssstyle != null) {      dom.cssstyle.copy(this.cssstyle);    }    dom.ref=ref;    dom.type=type;    dom.style=style;    dom.attr=attr;    dom.event=event == null ? null : event.clone();    if (this.csslayout != null) {      dom.csslayout.copy(this.csslayout);    }  } catch (  Exception e) {    if (WXEnvironment.isApkDebugable()) {      WXLogUtils.e("WXDomObject clone error: " + WXLogUtils.getStackTrace(e));    }  }  return dom;}  }
class C{  private boolean flagPoleHit(){  Shape intersection=SVGPath.intersect(spriteBoundsArray[5],SpriteHandler.getCurrentCast().get(2).getSpriteBounds());  return intersection.getBoundsInParent().getWidth() != -1;}  }
class C{  public boolean isDocOrdered(){  return true;}  }
class C{  private static void thresholdBlock(byte[] luminances,int xoffset,int yoffset,int threshold,int stride,BitMatrix matrix){  for (int y=0, offset=yoffset * stride + xoffset; y < BLOCK_SIZE; y++, offset+=stride) {    for (int x=0; x < BLOCK_SIZE; x++) {      if ((luminances[offset + x] & 0xFF) <= threshold) {        matrix.set(xoffset + x,yoffset + y);      }    }  }}  }
class C{  public static byte[] readFully(InputStream in) throws IOException {  byte[] buffer=new byte[1024];  ByteArrayOutputStream bytes=new ByteArrayOutputStream();  while (true) {    int byteCount=in.read(buffer);    if (byteCount == -1) {      return bytes.toByteArray();    }    bytes.write(buffer,0,byteCount);  }}  }
class C{  public Object[] toArray(){  return al.toArray();}  }
class C{  public Future<Job> failed(){  this.failed_at=System.currentTimeMillis();  return this.updateNow().compose(null).compose(null);}  }
class C{  public static LDAPURL decode(String url,boolean fullyDecode) throws DirectoryException {  String scheme;  int schemeEndPos=url.indexOf("://");  if (schemeEndPos < 0) {    LocalizableMessage message=ERR_LDAPURL_NO_COLON_SLASH_SLASH.get(url);    throw new DirectoryException(INVALID_ATTRIBUTE_SYNTAX,message);  } else   if (schemeEndPos == 0) {    LocalizableMessage message=ERR_LDAPURL_NO_SCHEME.get(url);    throw new DirectoryException(INVALID_ATTRIBUTE_SYNTAX,message);  } else {    scheme=urlDecode(url.substring(0,schemeEndPos));  }  int length=url.length();  if (length == schemeEndPos + 3) {    return new LDAPURL(scheme,null,DEFAULT_PORT,DEFAULT_BASE_DN,null,DEFAULT_SEARCH_SCOPE,DEFAULT_SEARCH_FILTER,null);  }  String host=null;  int port=DEFAULT_PORT;  int startPos=schemeEndPos + 3;  int pos=startPos;  while (pos < length) {    char c=url.charAt(pos);    if (c == '/') {      break;    }    pos++;  }  if (pos > startPos) {    String hostPort=url.substring(startPos,pos);    int colonPos=hostPort.lastIndexOf(':');    if (colonPos < 0) {      host=urlDecode(hostPort);    } else     if (colonPos == 0) {      LocalizableMessage message=ERR_LDAPURL_NO_HOST.get(url);      throw new DirectoryException(INVALID_ATTRIBUTE_SYNTAX,message);    } else     if (colonPos == (hostPort.length() - 1)) {      LocalizableMessage message=ERR_LDAPURL_NO_PORT.get(url);      throw new DirectoryException(INVALID_ATTRIBUTE_SYNTAX,message);    } else {      try {        final HostPort hp=HostPort.valueOf(hostPort);        host=urlDecode(hp.getHost());        port=hp.getPort();      } catch (      NumberFormatException e) {        LocalizableMessage message=ERR_LDAPURL_CANNOT_DECODE_PORT.get(url,hostPort.substring(colonPos + 1));        throw new DirectoryException(INVALID_ATTRIBUTE_SYNTAX,message);      }catch (      IllegalArgumentException e) {        LocalizableMessage message=ERR_LDAPURL_INVALID_PORT.get(url,port);        throw new DirectoryException(INVALID_ATTRIBUTE_SYNTAX,message);      }    }  }  pos++;  if (pos > length) {    return new LDAPURL(scheme,host,port,DEFAULT_BASE_DN,null,DEFAULT_SEARCH_SCOPE,DEFAULT_SEARCH_FILTER,null);  }  startPos=pos;  String baseDNString=null;  pos=url.indexOf('?',startPos);  if (pos < 0) {    baseDNString=urlDecode(url.substring(startPos));    startPos=length;  } else {    baseDNString=urlDecode(url.substring(startPos,pos));    startPos=pos + 1;  }  DN baseDN;  if (fullyDecode) {    baseDN=DN.valueOf(baseDNString);  } else {    baseDN=null;  }  if (startPos >= length) {    if (fullyDecode) {      return new LDAPURL(scheme,host,port,baseDN,null,DEFAULT_SEARCH_SCOPE,DEFAULT_SEARCH_FILTER,null);    } else {      return new LDAPURL(scheme,host,port,baseDNString,null,DEFAULT_SEARCH_SCOPE,null,null);    }  }  String attrsString;  pos=url.indexOf('?',startPos);  if (pos < 0) {    attrsString=url.substring(startPos);    startPos=length;  } else {    attrsString=url.substring(startPos,pos);    startPos=pos + 1;  }  LinkedHashSet<String> attributes=new LinkedHashSet<>();  StringTokenizer tokenizer=new StringTokenizer(attrsString,",");  while (tokenizer.hasMoreTokens()) {    attributes.add(urlDecode(tokenizer.nextToken()));  }  if (startPos >= length) {    if (fullyDecode) {      return new LDAPURL(scheme,host,port,baseDN,attributes,DEFAULT_SEARCH_SCOPE,DEFAULT_SEARCH_FILTER,null);    } else {      return new LDAPURL(scheme,host,port,baseDNString,attributes,DEFAULT_SEARCH_SCOPE,null,null);    }  }  String scopeString;  pos=url.indexOf('?',startPos);  if (pos < 0) {    scopeString=toLowerCase(urlDecode(url.substring(startPos)));    startPos=length;  } else {    scopeString=toLowerCase(urlDecode(url.substring(startPos,pos)));    startPos=pos + 1;  }  SearchScope scope;  if (scopeString.equals("")) {    scope=DEFAULT_SEARCH_SCOPE;  } else   if (scopeString.equals("base")) {    scope=SearchScope.BASE_OBJECT;  } else   if (scopeString.equals("one")) {    scope=SearchScope.SINGLE_LEVEL;  } else   if (scopeString.equals("sub")) {    scope=SearchScope.WHOLE_SUBTREE;  } else   if (scopeString.equals("subord") || scopeString.equals("subordinate")) {    scope=SearchScope.SUBORDINATES;  } else {    LocalizableMessage message=ERR_LDAPURL_INVALID_SCOPE_STRING.get(url,scopeString);    throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);  }  if (startPos >= length) {    if (fullyDecode) {      return new LDAPURL(scheme,host,port,baseDN,attributes,scope,DEFAULT_SEARCH_FILTER,null);    } else {      return new LDAPURL(scheme,host,port,baseDNString,attributes,scope,null,null);    }  }  String filterString;  pos=url.indexOf('?',startPos);  if (pos < 0) {    filterString=urlDecode(url.substring(startPos));    startPos=length;  } else {    filterString=urlDecode(url.substring(startPos,pos));    startPos=pos + 1;  }  SearchFilter filter;  if (fullyDecode) {    if (filterString.equals("")) {      filter=DEFAULT_SEARCH_FILTER;    } else {      filter=SearchFilter.createFilterFromString(filterString);    }    if (startPos >= length) {      if (fullyDecode) {        return new LDAPURL(scheme,host,port,baseDN,attributes,scope,filter,null);      } else {        return new LDAPURL(scheme,host,port,baseDNString,attributes,scope,filterString,null);      }    }  } else {    filter=null;  }  String extensionsString=url.substring(startPos);  LinkedList<String> extensions=new LinkedList<>();  tokenizer=new StringTokenizer(extensionsString,",");  while (tokenizer.hasMoreTokens()) {    extensions.add(urlDecode(tokenizer.nextToken()));  }  if (fullyDecode) {    return new LDAPURL(scheme,host,port,baseDN,attributes,scope,filter,extensions);  } else {    return new LDAPURL(scheme,host,port,baseDNString,attributes,scope,filterString,extensions);  }}  }
class C{  public int size(){  return size;}  }
class C{  public static int sizeOfChar(){  return 2;}  }
class C{  public synchronized <T>Observable<T> observeEvent(Class<T> eventClass,String key){  return observeEvent(new RXQueueKey(eventClass,key));}  }
class C{  private AdminTestCaseUtils(){}  }
class C{  public ServerEditCTSViewBean(){  super("ServerEditCTS",DEFAULT_DISPLAY_URL);}  }
class C{  public JPanel(){  this(true);}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {  return toXMLString(includeNS,declareNS,false);}  }
class C{  public double[] board_to_dsn(PlaPointFloat p_point){  double[] result=new double[2];  result[0]=board_to_dsn(p_point.v_x) + base_x;  result[1]=board_to_dsn(p_point.v_y) + base_y;  return result;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.EncryptionMethodType.KeySize createEncryptionMethodTypeKeySize() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.EncryptionMethodTypeImpl.KeySizeImpl();}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  }  if (object instanceof Map) {    Map<?,?> map=(Map)object;    if (size() != map.size()) {      return false;    }    Set<Map.Entry<K,V>> set=entrySet();    return set.equals(map.entrySet());  }  return false;}  }
class C{  @Override public void removeRoleMapping(String role){synchronized (roleMappings) {    roleMappings.remove(role);  }  fireContainerEvent("removeRoleMapping",role);}  }
class C{  public void update(byte[] data){  if (sha != null) {    sha.update(data);  }  if (md5 != null) {    md5.update(data);  }}  }
class C{  public final void testNextBytesbyteArray02(){  byte[] myBytes;  byte[] myBytes1;  byte[] myBytes2;  for (int i=1; i < LENGTH; i+=INCR) {    myBytes=new byte[i];    for (int j=1; j < i; j++) {      myBytes[j]=(byte)(j & 0xFF);    }    sr.setSeed(myBytes);    sr2.setSeed(myBytes);    for (int k=1; k < LENGTH; k+=INCR) {      myBytes1=new byte[k];      myBytes2=new byte[k];      sr.nextBytes(myBytes1);      sr2.nextBytes(myBytes2);      for (int l=0; l < k; l++) {        assertFalse("unexpected: myBytes1[l] != myBytes2[l]  :: l==" + l + " k="+ k+ " i="+ i+ " myBytes1[l]="+ myBytes1[l]+ " myBytes2[l]="+ myBytes2[l],myBytes1[l] != myBytes2[l]);      }    }  }  for (int n=1; n < LENGTH; n+=INCR) {    int n1=10;    int n2=20;    int n3=100;    byte[][] bytes1=new byte[10][n1];    byte[][] bytes2=new byte[5][n2];    for (int k=0; k < bytes1.length; k++) {      sr.nextBytes(bytes1[k]);    }    for (int k=0; k < bytes2.length; k++) {      sr2.nextBytes(bytes2[k]);    }    for (int k=0; k < n3; k++) {      int i1=k / n1;      int i2=k % n1;      int i3=k / n2;      int i4=k % n2;      assertTrue("non-equality: i1=" + i1 + " i2="+ i2+ " i3="+ i3+ " i4="+ i4,bytes1[i1][i2] == bytes2[i3][i4]);    }  }}  }
class C{  protected void stop(PrintWriter writer,ContextName cn,StringManager smClient){  if (debug >= 1)   log("stop: Stopping web application '" + cn + "'");  if (!validateContextName(cn,writer,smClient)) {    return;  }  String displayPath=cn.getDisplayName();  try {    Context context=(Context)host.findChild(cn.getName());    if (context == null) {      writer.println(smClient.getString("managerServlet.noContext",RequestUtil.filter(displayPath)));      return;    }    if (context.getName().equals(this.context.getName())) {      writer.println(smClient.getString("managerServlet.noSelf"));      return;    }    context.stop();    writer.println(smClient.getString("managerServlet.stopped",displayPath));  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);    log("ManagerServlet.stop[" + displayPath + "]",t);    writer.println(smClient.getString("managerServlet.exception",t.toString()));  }}  }
class C{  public CompareOperationWrapper(CompareOperation compare){  super(compare);}  }
class C{  private static void debugPrintln(String msg){  if (debug) {    System.err.println("JAXP: " + msg);  }}  }
class C{  public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {  B64OutputStream bos=null;  try {    bos=new B64OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public void addSegment(IShape segment){  if (closed) {    return;  }  if (isSinglePointOpen()) {    startPoint=segment.getBasePoints().get(0);  }  segments.add(segment);}  }
class C{  CodeStream put12(final int b,final int s){  ensureCapacity(3);  _data[_length++]=(byte)(b & 0xFF);  _data[_length++]=(byte)((s >>> 8) & 0xFF);  _data[_length++]=(byte)(s & 0xFF);  return this;}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.GivenNameElement createGivenNameElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.GivenNameElementImpl(value);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node createdNode;  String prefix;  doc=(Document)load("staffNS",false);  createdNode=doc.createElement("test:employee");  prefix=createdNode.getPrefix();  assertNull("throw_Null",prefix);}  }
class C{  public boolean isDisplayDelete(){  return displayDelete;}  }
class C{  public com.sun.identity.saml2.jaxb.entityconfig.EntityConfigElement createEntityConfigElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.entityconfig.impl.EntityConfigElementImpl();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementgetattributenode.class,args);}  }
class C{  public SimplexNoise(Random random){  for (int i=0; i < 256; i++) {    int randInd=random.nextInt(255);    short randShort=(short)randInd;    short randShortMod12=(short)(randInd % 12);    perm[i]=randShort;    perm[i + 256]=randShort;    permMod12[i]=randShortMod12;    permMod12[i + 256]=randShortMod12;  }}  }
class C{  public OperationRejectedException(OperationType type,LocalizableMessage ufn,LocalizableMessage message){  this(type,ufn,Collections.singleton(message));}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entities;  Node entityNode;  String entityValue;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  entities=docType.getEntities();  assertNotNull("entitiesNotNull",entities);  entityNode=entities.getNamedItem("ent1");  assertNotNull("ent1NotNull",entityNode);  entityValue=entityNode.getNodeValue();  assertNull("entityNodeValue",entityValue);}  }
class C{  public void assignService(String universalId) throws AMConsoleException {  String[] params={universalId,AMAdminConstants.DISCOVERY_SERVICE};  logEvent("ATTEMPT_IDENTITY_ASSIGN_SERVICE",params);  try {    AMIdentity amid=IdUtils.getIdentity(getUserSSOToken(),universalId);    amid.assignService(AMAdminConstants.DISCOVERY_SERVICE,Collections.EMPTY_MAP);  } catch (  SSOException e) {    String strError=getErrorString(e);    String[] paramsEx={universalId,AMAdminConstants.DISCOVERY_SERVICE,strError};    logEvent("SSO_EXCEPTION_IDENTITY_ASSIGN_SERVICE",paramsEx);    throw new AMConsoleException(strError);  }catch (  IdRepoException e) {    String strError=getErrorString(e);    String[] paramsEx={universalId,AMAdminConstants.DISCOVERY_SERVICE,strError};    logEvent("IDM_EXCEPTION_IDENTITY_ASSIGN_SERVICE",paramsEx);    throw new AMConsoleException(strError);  }}  }
class C{  public Duration plusMinutes(long minutesToAdd){  return plus(Math.multiplyExact(minutesToAdd,SECONDS_PER_MINUTE),0);}  }
class C{  public DragSourceEvent(DragSourceContext dsc,int x,int y){  super(dsc);  locationSpecified=true;  this.x=x;  this.y=y;}  }
class C{  public ChangeStatusMsg(ServerStatus requestedStatus,ServerStatus newStatus){  this.requestedStatus=requestedStatus;  this.newStatus=newStatus;}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  public boolean is_inside(PlaPointFloat begin,PlaPointFloat end,double margin){  if (is_nan || begin.is_nan || end.is_nan)   return false;  double d_begin_this=begin.distance_square(this);  double d_end_this=end.distance_square(this);  double d_begin_end=begin.distance_square(end);  if (d_begin_end >= d_begin_this + margin) {    if (d_begin_end >= d_end_this + margin) {      return true;    } else {      return false;    }  } else {    if (d_begin_end >= d_end_this + margin) {      return false;    } else {      return false;    }  }}  }
class C{  protected ImageView createBackSideView(int height){  ImageView imageView=new ImageView(getContext());  imageView.setBackgroundColor(mBackSideColor);  imageView.setLayoutParams(new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,height));  return imageView;}  }
class C{  @Override public String open(String path,OutputStream os) throws MalformedURLException, IOException, AuthenticationException {  ensureValidToken();  String spec=MessageFormat.format("/webhdfs/v1/{0}?op=OPEN&user.name={1}",URLUtil.encodePath(path),this.principal);  HttpURLConnection conn=authenticatedURL.openConnection(new URL(new URL(httpfsUrl),spec),token);  conn.setRequestMethod("GET");  conn.setRequestProperty("Content-Type","application/octet-stream");  conn.connect();  InputStream is=conn.getInputStream();  copy(is,os);  is.close();  os.close();  String resp=result(conn,false);  conn.disconnect();  return resp;}  }
class C{  public PKCS10CertificationRequest(String signatureAlgorithm,X509Name subject,PublicKey key,ASN1Set attributes,PrivateKey signingKey,String provider) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  String algorithmName=Strings.toUpperCase(signatureAlgorithm);  DERObjectIdentifier sigOID=(DERObjectIdentifier)algorithms.get(algorithmName);  if (sigOID == null) {    try {      sigOID=new DERObjectIdentifier(algorithmName);    } catch (    Exception e) {      throw new IllegalArgumentException("Unknown signature type requested");    }  }  if (subject == null) {    throw new IllegalArgumentException("subject must not be null");  }  if (key == null) {    throw new IllegalArgumentException("public key must not be null");  }  if (noParams.contains(sigOID)) {    this.sigAlgId=new AlgorithmIdentifier(sigOID);  } else   if (params.containsKey(algorithmName)) {    this.sigAlgId=new AlgorithmIdentifier(sigOID,(ASN1Encodable)params.get(algorithmName));  } else {    this.sigAlgId=new AlgorithmIdentifier(sigOID,DERNull.INSTANCE);  }  try {    ASN1Sequence seq=(ASN1Sequence)ASN1Primitive.fromByteArray(key.getEncoded());    this.reqInfo=new CertificationRequestInfo(subject,new SubjectPublicKeyInfo(seq),attributes);  } catch (  IOException e) {    throw new IllegalArgumentException("can't encode public key");  }  Signature sig;  if (provider == null) {    sig=Signature.getInstance(signatureAlgorithm);  } else {    sig=Signature.getInstance(signatureAlgorithm,provider);  }  sig.initSign(signingKey);  try {    sig.update(reqInfo.getEncoded(ASN1Encoding.DER));  } catch (  Exception e) {    throw new IllegalArgumentException("exception encoding TBS cert request - " + e);  }  this.sigBits=new DERBitString(sig.sign());}  }
class C{  public RepeatField repeatField() throws ParseException {  try {    this.lexer.match('r');    this.lexer.SPorHT();    this.lexer.match('=');    this.lexer.SPorHT();    RepeatField repeatField=new RepeatField();    lexer.match(LexerCore.ID);    Token repeatInterval=lexer.getNextToken();    this.lexer.SPorHT();    TypedTime typedTime=getTypedTime(repeatInterval.getTokenValue());    repeatField.setRepeatInterval(typedTime);    lexer.match(LexerCore.ID);    Token activeDuration=lexer.getNextToken();    this.lexer.SPorHT();    typedTime=getTypedTime(activeDuration.getTokenValue());    repeatField.setActiveDuration(typedTime);    while (lexer.hasMoreChars()) {      char la=lexer.lookAhead(0);      if (la == '\n' || la == '\r')       break;      lexer.match(LexerCore.ID);      Token offsets=lexer.getNextToken();      this.lexer.SPorHT();      typedTime=getTypedTime(offsets.getTokenValue());      repeatField.addOffset(typedTime);    }    return repeatField;  } catch (  Exception e) {    throw lexer.createParseException();  }}  }
class C{  public String toStringImpl(){  return theClass;}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  Iterator iter=resourceResults.iterator();  while (iter.hasNext()) {    ResourceResult rr=(ResourceResult)iter.next();    sb.append(rr.toString());  }  return sb.toString();}  }
class C{  private void removeElementAt(int at){  if (at < m_firstFree) {    int index=at >>> m_SHIFT;    int maxindex=m_firstFree >>> m_SHIFT;    int offset=at & m_MASK;    while (index <= maxindex) {      int copylen=m_blocksize - offset - 1;      int[] block=m_map[index];      if (null == block)       block=m_map[index]=new int[m_blocksize]; else       System.arraycopy(block,offset + 1,block,offset,copylen);      if (index < maxindex) {        int[] next=m_map[index + 1];        if (next != null)         block[m_blocksize - 1]=(next != null) ? next[0] : 0;      } else       block[m_blocksize - 1]=0;      offset=0;      ++index;    }  }  --m_firstFree;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrgetvalue1.class,args);}  }
class C{  private AST.While parse_do_while() throws SyntaxException {  LineCol lineCol=current.getLineCol();  nextNode(false);  List<Statement> statements;  if (current instanceof ElementStartNode) {    statements=parseElemStart((ElementStartNode)current,true,Collections.emptySet(),false);  } else {    err.UnexpectedTokenException("while body",current == null ? "LineEnd" : current.toString(),current == null ? lineCol : current.getLineCol());    err.debug("assume that the body is empty");    statements=Collections.emptyList();    jumpToTheNearestEndingNode();  }  if (current == null) {    err.UnexpectedEndException(lineCol);    return null;  } else {    nextNode(false);    expecting("while",current.previous(),current,err);    Expression condition=next_exp(true);    return new AST.While(condition,statements,true,lineCol);  }}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.wedding.com/";  String qualifiedName;  Document doc;  Attr newAttr;  java.util.List illegalQNames=new java.util.ArrayList();  illegalQNames.add("person:{");  illegalQNames.add("person:}");  illegalQNames.add("person:~");  illegalQNames.add("person:'");  illegalQNames.add("person:!");  illegalQNames.add("person:@");  illegalQNames.add("person:#");  illegalQNames.add("person:$");  illegalQNames.add("person:%");  illegalQNames.add("person:^");  illegalQNames.add("person:&");  illegalQNames.add("person:*");  illegalQNames.add("person:(");  illegalQNames.add("person:)");  illegalQNames.add("person:+");  illegalQNames.add("person:=");  illegalQNames.add("person:[");  illegalQNames.add("person:]");  illegalQNames.add("person:\\");  illegalQNames.add("person:/");  illegalQNames.add("person:;");  illegalQNames.add("person:`");  illegalQNames.add("person:<");  illegalQNames.add("person:>");  illegalQNames.add("person:,");  illegalQNames.add("person:a ");  illegalQNames.add("person:\"");  doc=(Document)load("staffNS",false);  for (int indexN10090=0; indexN10090 < illegalQNames.size(); indexN10090++) {    qualifiedName=(String)illegalQNames.get(indexN10090);{      boolean success=false;      try {        newAttr=doc.createAttributeNS(namespaceURI,qualifiedName);      } catch (      DOMException ex) {        success=(ex.code == DOMException.INVALID_CHARACTER_ERR);      }      assertTrue("throw_INVALID_CHARACTER_ERR",success);    }  }}  }
class C{  @Override public void onDestroy(){  if (mWebView != null) {    mWebView.destroy();    mWebView=null;  }  super.onDestroy();}  }
class C{  public void abort() throws AuthLoginException {  debug.message("in abort");  try {    logout();  } catch (  Exception ae) {    if (debug.messageEnabled()) {      debug.message("Error logging out.. :");      debug.message("Exception ",ae);    }    try {      destroySession();      loginStatus.setStatus(LoginStatus.AUTH_COMPLETED);    } catch (    Exception e) {      debug.message("Error aborting");      if (debug.messageEnabled()) {        debug.message("Exception ",e);      }      throw new AuthLoginException(BUNDLE_NAME,"abortFailed",null);    }  }}  }
class C{  public ProxyRequireHeader createProxyRequireHeader(String optionTag) throws ParseException {  if (optionTag == null)   throw new NullPointerException("bad optionTag arg");  ProxyRequire p=new ProxyRequire();  p.setOptionTag(optionTag);  return p;}  }
class C{  public boolean checkAndPerformStylusEvent(MotionEvent event){  final float slop=ViewConfiguration.get(mView.getContext()).getScaledTouchSlop();  if (!mView.isLongClickable()) {    return false;  }  final boolean stylusButtonPressed=isStylusButtonPressed(event);switch (event.getAction()) {case MotionEvent.ACTION_DOWN:    mIsButtonPressed=false;  if (stylusButtonPressed && mView.performLongClick()) {    mIsButtonPressed=true;    return true;  }break;case MotionEvent.ACTION_MOVE:if (Utilities.pointInView(mView,event.getX(),event.getY(),slop)) {if (!mIsButtonPressed && stylusButtonPressed && mView.performLongClick()) {  mIsButtonPressed=true;  return true;} else if (mIsButtonPressed && !stylusButtonPressed) {  mIsButtonPressed=false;}}break;case MotionEvent.ACTION_UP:case MotionEvent.ACTION_CANCEL:mIsButtonPressed=false;break;}return false;}  }
class C{  public void replace(ByteString value){  clear();  add(value);}  }
class C{  private void assertNoType(AST.Access type) throws SyntaxException {  if (type != null) {    err.SyntaxException("JavaScript don't have type",type.line_col());  }}  }
class C{  public void stopServer(boolean suppressOutput) throws ApplicationException {  stopServer(suppressOutput,false);}  }
class C{  private static int[] makePositive(byte a[]){  int keep, k;  int byteLength=a.length;  for (keep=0; keep < byteLength && a[keep] == -1; keep++)   ;  for (k=keep; k < byteLength && a[k] == 0; k++)   ;  int extraByte=(k == byteLength) ? 1 : 0;  int intLength=((byteLength - keep + extraByte) + 3) >>> 2;  int result[]=new int[intLength];  int b=byteLength - 1;  for (int i=intLength - 1; i >= 0; i--) {    result[i]=a[b--] & 0xff;    int numBytesToTransfer=Math.min(3,b - keep + 1);    if (numBytesToTransfer < 0)     numBytesToTransfer=0;    for (int j=8; j <= 8 * numBytesToTransfer; j+=8)     result[i]|=((a[b--] & 0xff) << j);    int mask=-1 >>> (8 * (3 - numBytesToTransfer));    result[i]=~result[i] & mask;  }  for (int i=result.length - 1; i >= 0; i--) {    result[i]=(int)((result[i] & LONG_MASK) + 1);    if (result[i] != 0)     break;  }  return result;}  }
class C{  public BatikTestDocumentBuilderFactory(DocumentBuilderSetting[] settings) throws DOMTestIncompatibleException {  super(settings);  domImpl=null;  SAXParserFactory saxFactory=SAXParserFactory.newInstance();  try {    SAXParser saxParser=saxFactory.newSAXParser();    xmlReader=saxParser.getXMLReader();  } catch (  Exception ex) {    throw new DOMTestIncompatibleException(ex,null);  }  String xmlReaderClassName=xmlReader.getClass().getName();  try {    ClassLoader classLoader=ClassLoader.getSystemClassLoader();    Class domFactoryClass=classLoader.loadClass("org.apache.batik.dom.svg.SAXSVGDocumentFactory");    Constructor domFactoryConstructor=domFactoryClass.getConstructor(new Class[]{String.class});    domFactory=domFactoryConstructor.newInstance(new Object[]{xmlReaderClassName});    createDocument=domFactoryClass.getMethod("createDocument",new Class[]{String.class,java.io.InputStream.class});  } catch (  InvocationTargetException ex) {    throw new DOMTestIncompatibleException(ex.getTargetException(),null);  }catch (  Exception ex) {    throw new DOMTestIncompatibleException(ex,null);  }}  }
class C{  public XMLString substring(int beginIndex,int endIndex){  return new XString(str().substring(beginIndex,endIndex));}  }
class C{  private static void addToProfileNameTable(SSOToken ssoToken,String dn) throws SSOException {  if (debug.messageEnabled()) {    debug.message("In AMObjectImpl." + "addToProfileNameTable(SSOToken,dn)..");  }  Hashtable pTable=profileNameTable;synchronized (pTable) {    Set dnList=(Set)pTable.get(ssoToken.getPrincipal().getName());    if (dnList == null) {      AMSSOTokenListener ssoTokenListener=new AMSSOTokenListener(ssoToken.getPrincipal().getName());      try {        ssoToken.addSSOTokenListener(ssoTokenListener);      } catch (      SSOTokenListenersUnsupportedException ex) {        debug.message("AMObjectImpl.addToProfileNameTable: {}",ex.getMessage());      }      dnList=new HashSet();      pTable.put(ssoToken.getPrincipal().getName(),dnList);    }    dnList.add(dn);  }}  }
class C{  @Override public void addPropertyChangeListener(PropertyChangeListener listener){  support.addPropertyChangeListener(listener);}  }
class C{  @Indexable(type=IndexableType.REINDEX) @Override public Foo addFoo(Foo foo){  foo.setNew(true);  return fooPersistence.update(foo);}  }
class C{  public void rejectedExecution(Runnable r,ThreadPoolExecutor e){  if (!e.isShutdown()) {    r.run();  }}  }
class C{  public ResultSet readForUpdate(String fullId,String type,String localId,Connection connection) throws NotFoundException, SQLException {  PreparedStatement readForUpdateStatement=null;  ResultSet rs=null;  try {    long typeId=readTypeId(type,connection);    if (typeId < 0) {      throw new NotFoundException("Object " + fullId + " not found. No id could be retrieved for type "+ type);    }    readForUpdateStatement=getPreparedStatement(connection,QueryDefinition.READFORUPDATEQUERYSTR);    logger.trace("Populating prepared statement {} for {}",readForUpdateStatement,fullId);    readForUpdateStatement.setString(1,String.valueOf(typeId));    readForUpdateStatement.setString(2,localId);    logger.debug("Executing: {}",readForUpdateStatement);    rs=readForUpdateStatement.executeQuery();    if (rs.next()) {      logger.debug("Read for update full id: {}",fullId);      return rs;    } else {      CleanupHelper.loggedClose(rs);      CleanupHelper.loggedClose(readForUpdateStatement);      throw new NotFoundException("Object " + fullId + " not found in "+ type);    }  } catch (  SQLException ex) {    CleanupHelper.loggedClose(rs);    CleanupHelper.loggedClose(readForUpdateStatement);    throw ex;  }}  }
class C{  public void run(){  Logger logger=(com.sun.identity.log.Logger)Logger.getLogger(logName);  try {    Logger.rwLock.readRequest();synchronized (logger) {      try {        String[][] result=LogReader.read(PREFIX + logName,new LogQuery(1),Token.createToken("Auditor",new String(logPassword.getChars())));        if (!((result == null) || (result.length == 0))) {          LogSign logSign=new LogSign(logName);          int signPos=-1;          String signFieldName=LogConstants.SIGNATURE_FIELDNAME;          for (int j=0; j < result[0].length; j++) {            if (result[0][j].equalsIgnoreCase(signFieldName)) {              signPos=j;              break;            }          }          if (signPos == -1) {            Debug.error("Could not locate sign header");            return;          }          if ((result.length > 1) && (result[1][signPos].trim().equals("-"))) {            String signature=logSign.sign();            if (!((signature == null) || signature.equals(""))) {              com.sun.identity.log.LogRecord lr=new com.sun.identity.log.LogRecord(Level.SEVERE,"Signature");              ((com.sun.identity.log.LogRecord)lr).addLogInfo(LogConstants.SIGNATURE_FIELDNAME,signature);              publish(lr);            } else {              Debug.warning(logName + "Signature is Null");            }          } else {            Debug.message(logName + ": Read returned only header or last " + "record was a signature ");          }        } else {          Debug.message(logName + ": Read returned null records");        }      } catch (      Exception e) {        Debug.error(logName + ":Error Writing Signature",e);      }    }  }  finally {    Logger.rwLock.readDone();  }}  }
class C{  @Override public int hashCode(){  return years + Integer.rotateLeft(months,8) + Integer.rotateLeft(days,16);}  }
class C{  public static SetPropSubCommandHandler create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> path,SetRelationDefinition<?,?> r) throws ArgumentException {  return new SetPropSubCommandHandler(parser,path.child(r),r);}  }
class C{  protected IOException createException(InputStream response,int code,String status){  if (isError(code)) {    final RequestError error;    try {      error=parseError(response);    } catch (    IOException e) {      return e;    }    if (error != null)     return new RequestException(error,code);  } else   try {    response.close();  } catch (  IOException ignored) {  }  String message;  if (status != null && status.length() > 0)   message=status + " (" + code+ ')'; else   message="Unknown error occurred (" + code + ')';  return new IOException(message);}  }
class C{  public NSObject parse() throws ParseException {  index=0;  if (data.length >= 3 && (data[0] & 0xFF) == 0xEF && (data[1] & 0xFF) == 0xBB && (data[2] & 0xFF) == 0xBF)   skip(3);  skipWhitespacesAndComments();  expect(DICTIONARY_BEGIN_TOKEN,ARRAY_BEGIN_TOKEN,COMMENT_BEGIN_TOKEN);  try {    return parseObject();  } catch (  ArrayIndexOutOfBoundsException ex) {    throw new ParseException("Reached end of input unexpectedly.",index);  }}  }
class C{  public LockableFileWriter(File file,String encoding,boolean append,String lockDir) throws IOException {  this(file,Charsets.toCharset(encoding),append,lockDir);}  }
class C{  public static boolean toBoolean(Object value,boolean defaultValue){  boolean result;  if (value != null) {    if (value.toString().trim().equals("1") || value.toString().trim().toLowerCase().equals("true")) {      result=true;    } else {      result=false;    }  } else {    result=defaultValue;  }  return result;}  }
class C{  public void insert_reference(org.omg.CORBA.Object value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_reference",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    $self.insert_reference(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public KeywordMap(boolean ignoreCase){  this(ignoreCase,52);  this.ignoreCase=ignoreCase;  noWordSep=new StringBuilder();}  }
class C{  private static void clearCacheForResourceNames(String serviceName,Set affectedResourceNames){  if ((affectedResourceNames == null) || affectedResourceNames.isEmpty()) {    return;  }  Map resourceTokenIDsMap=(Map)(resourceResultCache.resultCache).get(serviceName);  if ((resourceTokenIDsMap == null) || resourceTokenIDsMap.isEmpty()) {    return;  }  ResourceName resourceComparator=resourceResultCache.policyProperties.getResourceComparator(serviceName);  Iterator arIter=affectedResourceNames.iterator();  while (arIter.hasNext()) {    String affectedRN=(String)arIter.next();    if (debug.messageEnabled()) {      debug.message("ResourceResultCache." + "clearCacheForResourceNames():" + "affectedResourceName="+ affectedRN);    }synchronized (resourceTokenIDsMap) {      Set cachedResourceNames=resourceTokenIDsMap.keySet();      Iterator crIter=cachedResourceNames.iterator();      while (crIter.hasNext()) {        String cachedRN=(String)crIter.next();        if (debug.messageEnabled()) {          debug.message("ResourceResultCache." + "clearCacheForResourceNames():" + "affectedResourceName=" + affectedRN + ":cachedResourceName="+ cachedRN);        }        if (affectedRN.equals(cachedRN)) {          crIter.remove();          if (debug.messageEnabled()) {            debug.message("ResourceResultCache." + "clearCacheForResourceNames():" + "cleared cached results for "+ "resourceName=" + cachedRN + ":affectedResourceName="+ affectedRN+ ":match=SAME RESOURCE NAME");          }        } else {          ResourceMatch rm=resourceComparator.compare(cachedRN,affectedRN,true);          if (rm.equals(ResourceMatch.EXACT_MATCH)) {            crIter.remove();            if (debug.messageEnabled()) {              debug.message("ResourceResultCache." + "clearCacheForResourceNames():" + "cleared cached results for "+ "resourceName=" + cachedRN + ":affectedResourceName="+ affectedRN+ ":match=EXACT_MATCH");            }          } else           if (rm.equals(ResourceMatch.WILDCARD_MATCH)) {            crIter.remove();            if (debug.messageEnabled()) {              debug.message("ResourceResultCache." + "clearCacheForResourceNames():" + "cleared cached results for "+ "resourceName=" + cachedRN + ":affectedResourceName="+ affectedRN+ ":match=WILD_CARD_MATCH");            }          } else           if (rm.equals(ResourceMatch.SUB_RESOURCE_MATCH)) {            crIter.remove();            if (debug.messageEnabled()) {              debug.message("ResourceResultCache." + "clearCacheForResourceNames():" + "cleared cached results for "+ "resourceName=" + cachedRN + ":affectedResourceName="+ affectedRN+ ":match=SUB_RESOURCE_MACTH");            }          }        }      }    }  }}  }
class C{  static <T>T find(Class<T> type,String fallbackClassName) throws DatatypeConfigurationException {  final String factoryId=type.getName();  dPrint("find factoryId =" + factoryId);  try {    String systemProp=ss.getSystemProperty(factoryId);    if (systemProp != null) {      dPrint("found system property, value=" + systemProp);      return newInstance(type,systemProp,null,true);    }  } catch (  SecurityException se) {    if (debug)     se.printStackTrace();  }  try {    if (firstTime) {synchronized (cacheProps) {        if (firstTime) {          String configFile=ss.getSystemProperty("java.home") + File.separator + "lib"+ File.separator+ "jaxp.properties";          File f=new File(configFile);          firstTime=false;          if (ss.doesFileExist(f)) {            dPrint("Read properties file " + f);            cacheProps.load(ss.getFileInputStream(f));          }        }      }    }    final String factoryClassName=cacheProps.getProperty(factoryId);    if (factoryClassName != null) {      dPrint("found in $java.home/jaxp.properties, value=" + factoryClassName);      return newInstance(type,factoryClassName,null,true);    }  } catch (  Exception ex) {    if (debug)     ex.printStackTrace();  }  final T provider=findServiceProvider(type);  if (provider != null) {    return provider;  }  if (fallbackClassName == null) {    throw new DatatypeConfigurationException("Provider for " + factoryId + " cannot be found");  }  dPrint("loaded from fallback value: " + fallbackClassName);  return newInstance(type,fallbackClassName,null,true);}  }
class C{  public void selectText(int startIndex,int endIndex){  AccessibleEditableText at=getEditorAccessibleEditableText();  if (at != null) {    at.selectText(startIndex,endIndex);  }}  }
class C{  public void removeAttribute(String name){  attributes.remove(name);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemns05.class,args);}  }
class C{  private final String _findDecodedFromSymbols(final int len) throws IOException {  if ((_inputEnd - _inputPtr) < len) {    _loadToHaveAtLeast(len);  }  if (len < 5) {    int inPtr=_inputPtr;    final byte[] inBuf=_inputBuffer;    int q=inBuf[inPtr] & 0xFF;    if (len > 1) {      q=(q << 8) + (inBuf[++inPtr] & 0xFF);      if (len > 2) {        q=(q << 8) + (inBuf[++inPtr] & 0xFF);        if (len > 3) {          q=(q << 8) + (inBuf[++inPtr] & 0xFF);        }      }    }    _quad1=q;    return _symbols.findName(q);  }  final byte[] inBuf=_inputBuffer;  int inPtr=_inputPtr;  int q1=(inBuf[inPtr++] & 0xFF);  q1=(q1 << 8) | (inBuf[inPtr++] & 0xFF);  q1=(q1 << 8) | (inBuf[inPtr++] & 0xFF);  q1=(q1 << 8) | (inBuf[inPtr++] & 0xFF);  if (len < 9) {    int q2=(inBuf[inPtr++] & 0xFF);    int left=len - 5;    if (left > 0) {      q2=(q2 << 8) + (inBuf[inPtr++] & 0xFF);      if (left > 1) {        q2=(q2 << 8) + (inBuf[inPtr++] & 0xFF);        if (left > 2) {          q2=(q2 << 8) + (inBuf[inPtr++] & 0xFF);        }      }    }    _quad1=q1;    _quad2=q2;    return _symbols.findName(q1,q2);  }  int q2=(inBuf[inPtr++] & 0xFF);  q2=(q2 << 8) | (inBuf[inPtr++] & 0xFF);  q2=(q2 << 8) | (inBuf[inPtr++] & 0xFF);  q2=(q2 << 8) | (inBuf[inPtr++] & 0xFF);  if (len < 13) {    int q3=(inBuf[inPtr++] & 0xFF);    int left=len - 9;    if (left > 0) {      q3=(q3 << 8) + (inBuf[inPtr++] & 0xFF);      if (left > 1) {        q3=(q3 << 8) + (inBuf[inPtr++] & 0xFF);        if (left > 2) {          q3=(q3 << 8) + (inBuf[inPtr++] & 0xFF);        }      }    }    _quad1=q1;    _quad2=q2;    _quad3=q3;    return _symbols.findName(q1,q2,q3);  }  return _findDecodedLong(len,q1,q2);}  }
class C{  public final void addElement(Object value){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    Object newMap[]=new Object[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  m_map[m_firstFree]=value;  m_firstFree++;}  }
class C{  public boolean isMember(AMIdentity identity) throws IdRepoException, SSOException {  boolean ismember=false;  IdRepoException idException=null;  IdServices idServices=IdServicesFactory.getDataStoreServices();  try {    Set members=idServices.getMemberships(token,getType(),getName(),identity.getType(),orgName,getDN());    if (members != null && members.contains(identity)) {      ismember=true;    } else     if (members != null) {      String dn=identity.getDN();      Iterator it=members.iterator();      while (it.hasNext()) {        AMIdentity id=(AMIdentity)it.next();        if (identity.equals(id)) {          ismember=true;          break;        } else         if (dn != null) {          String mdn=id.getDN();          if ((mdn != null) && mdn.equalsIgnoreCase(dn)) {            ismember=true;            break;          }        }      }    }    if (!ismember && members != null && !members.isEmpty()) {      String identityDN=identity.getUniversalId();      String amsdkdn=identity.getDN();      if ((amsdkdn != null) && (identityDN.toLowerCase().indexOf(",amsdkdn=") != -1)) {        identityDN=identityDN.substring(0,identityDN.indexOf(amsdkdn) - 9);      }      Iterator it=members.iterator();      while (it.hasNext()) {        AMIdentity id=(AMIdentity)it.next();        String idDN=id.getUniversalId();        String mdn=id.getDN();        if (mdn != null) {          int endIdx=idDN.indexOf(mdn) - 9;          if (endIdx >= 0) {            idDN=idDN.substring(0,endIdx);          }        }        if (idDN.equalsIgnoreCase(identityDN)) {          ismember=true;          break;        }      }    }  } catch (  IdRepoException ide) {    idException=ide;  }  if (idException != null) {    throw (idException);  }  return ismember;}  }
class C{  void outputEntityDecl(String name,String value) throws IOException {  final java.io.Writer writer=m_writer;  writer.write("<!ENTITY ");  writer.write(name);  writer.write(" \"");  writer.write(value);  writer.write("\">");  writer.write(m_lineSep,0,m_lineSepLen);}  }
class C{  public BeanContextChildSupport(BeanContextChild bcc){  super();  beanContextChildPeer=(bcc != null) ? bcc : this;  pcSupport=new PropertyChangeSupport(beanContextChildPeer);  vcSupport=new VetoableChangeSupport(beanContextChildPeer);}  }
class C{  public boolean isMidnightEndOfDay(){  return timeEndOfDay;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  populateValues=true;  forwardTo();}  }
class C{  public StringSizeTerminated(String identifier,AbstractTagFrameBody frameBody){  super(identifier,frameBody);}  }
class C{  public RadiusAuditLoggingException(String message){  super(message);}  }
class C{  public ServerAddViewBean(){  super("ServerAdd");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  createPageTitleModel();  createPropertyModel();  registerChildren();}  }
class C{  public FrameBodyCTOC(FrameBodyCTOC body){  super(body);}  }
class C{  public synchronized void readRequest(){  if (currentWriters == 0 && writerLocks.size() == 0) {    ++currentReaders;  } else {    ++queuedReaders;    try {      wait();    } catch (    InterruptedException e) {    }  }}  }
class C{  public AccessibleRelationSet(AccessibleRelation[] relations){  if (relations.length != 0) {    this.relations=new Vector(relations.length);    for (int i=0; i < relations.length; i++) {      add(relations[i]);    }  }}  }
class C{  public boolean is_board_read_only(){  return board_is_read_only;}  }
class C{  public static Authenticator withAccessToken(final String username,final ZonkyApiToken token,final boolean isDryRun){  return new Authenticator(null,true,isDryRun);}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  String fMsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_INCORRECT_PROGRAMMER_ASSERTION,new Object[]{"Programmer's assertion:  the method FunctionMultiArgs.reportWrongNumberArgs() should never be called."});  throw new RuntimeException(fMsg);}  }
class C{  public DTMIterator createDTMIterator(int node){  DTMIterator iter=new org.apache.xpath.axes.OneStepIteratorForward(Axis.SELF);  iter.setRoot(node,this);  return iter;}  }
class C{  public ModifyOperation processModify(ByteString rawEntryDN,List<RawModification> rawModifications){  return processModify(rawEntryDN,rawModifications,null);}  }
class C{  private int yearLength(){  int year=internalGet(YEAR);  if (internalGetEra() == BCE) {    year=1 - year;  }  return yearLength(year);}  }
class C{  public DeflaterInputStream(InputStream in,Deflater defl,int bufLen){  super(in);  if (in == null)   throw new NullPointerException("Null input");  if (defl == null)   throw new NullPointerException("Null deflater");  if (bufLen < 1)   throw new IllegalArgumentException("Buffer size < 1");  def=defl;  buf=new byte[bufLen];}  }
class C{  public void removeAttributes(Set attrNames) throws IdRepoException, SSOException {  if (attrNames == null || attrNames.isEmpty()) {    throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,IdRepoErrorCode.ILLEGAL_ARGUMENTS,null);  }  boolean agentflg=getType().equals(IdType.AGENTONLY);  if (agentflg) {    IdServices idServices=IdServicesFactory.getDataStoreServices();    idServices.removeAttributes(token,type,name,attrNames,orgName,null);    Iterator it=attrNames.iterator();    while (it.hasNext()) {      String attr=(String)it.next();      modMap.remove(attr);    }  } else {    Iterator it=attrNames.iterator();    while (it.hasNext()) {      String attr=(String)it.next();      modMap.put(attr,Collections.EMPTY_SET);    }  }}  }
class C{  public static Foo create(long fooId){  return getPersistence().create(fooId);}  }
class C{  XSLTElementDef(Class classObject,XSLTElementProcessor contentHandler,int type){  this.m_classObject=classObject;  this.m_type=type;  setElementProcessor(contentHandler);}  }
class C{  public AwtreeShapeSearch(RoutingBoard p_board,int p_compensated_clearance_class_no){  r_board=p_board;  compensated_clearance_class_no=p_compensated_clearance_class_no;}  }
class C{  public ProtocolException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  public void testHashCode(){  CodeSigner cs1=new CodeSigner(cpath,ts);  CodeSigner cs2=new CodeSigner(cpath,ts);  CodeSigner cs3=new CodeSigner(cpath,null);  assertTrue(cs1.hashCode() == cs2.hashCode());  assertTrue(cs2.hashCode() != cs3.hashCode());}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String idName=getStringOptionValue(ARGUMENT_ID_NAME);  String type=getStringOptionValue(ARGUMENT_ID_TYPE);  List privileges=(List)rc.getOption(IArgument.PRIVILEGES);  IdType idType=convert2IdType(type);  String[] params={realm,type,idName};  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_IDREPO_REMOVE_PRIVILEGES",params);    DelegationManager mgr=new DelegationManager(adminSSOToken,realm);    Set privilegeObjects=mgr.getPrivileges();    AMIdentity amid;    if (idType.equals(IdType.ROLE) && idName.equalsIgnoreCase(ALL_AUTHENTICATED_USERS)) {      amid=new AMIdentity(adminSSOToken,idName,idType,"/",null);    } else {      amid=new AMIdentity(adminSSOToken,idName,idType,realm,null);    }    String uid=amid.getUniversalId();    for (Iterator i=privileges.iterator(); i.hasNext(); ) {      String name=(String)i.next();      DelegationPrivilege dp=getDelegationPrivilege(name,privilegeObjects);      boolean removed=false;      if (dp != null) {        Set subjects=dp.getSubjects();        if (subjects.contains(uid)) {          subjects.remove(uid);          mgr.addPrivilege(dp);          removed=true;        }      }      if (!removed) {        String[] args={idName,name};        String msg=MessageFormat.format(getResourceString("delegation-does-not-have-privilege"),(Object[])args);        throw new CLIException(msg,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);      }    }    outputWriter.printlnMessage(MessageFormat.format(getResourceString("idrepo-remove-privileges-succeed"),(Object[])params));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_IDREPO_REMOVE_PRIVILEGES",params);  } catch (  DelegationException e) {    String[] args={realm,type,idName,e.getMessage()};    debugError("RemovePrivileges.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_REMOVE_PRIVILEGES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,type,idName,e.getMessage()};    debugError("RemovePrivileges.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_REMOVE_PRIVILEGES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public static String parseLastModifDate(final File file){  Date date=new Date(file.lastModified());  DateFormat dateFormat=new SimpleDateFormat("yyyyMMddHHmm");  return dateFormat.format(date);}  }
class C{  public static long dynamicQueryCount(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery,com.liferay.portal.kernel.dao.orm.Projection projection){  return getService().dynamicQueryCount(dynamicQuery,projection);}  }
class C{  private void checkJobPromotion(){  int timeout=config.getInteger("job.promotion.interval",1000);  int limit=config.getInteger("job.promotion.limit",1000);  vertx.setPeriodic(timeout,null);}  }
class C{  public final void init(int size,SecureRandom random){  paramGenSpi.engineInit(size,random);}  }
class C{  private void initializeGroupManager() throws ConfigException, InitializationException {  try {    groupManager=new GroupManager(serverContext);  } catch (  DirectoryException de) {    logger.traceException(de);    throw new InitializationException(de.getMessageObject());  }  groupManager.initializeGroupImplementations();}  }
class C{  public static int showInternalConfirmDialog(Component parentComponent,Object message,String title,int optionType,int messageType){  return showInternalConfirmDialog(parentComponent,message,title,optionType,messageType,null);}  }
class C{  public boolean isPaused(){  return sessionDone.get();}  }
class C{  @Override public synchronized void clear(){  if (null != factory) {    final Iterator<PooledSoftReference<T>> iter=idleReferences.iterator();    while (iter.hasNext()) {      try {        final PooledSoftReference<T> ref=iter.next();        if (null != ref.getObject()) {          factory.destroyObject(ref);        }      } catch (      final Exception e) {      }    }  }  idleReferences.clear();  pruneClearedReferences();}  }
class C{  private static void validateNewAddition(Vector paths,ExpressionOwner owner,LocPathIterator path) throws RuntimeException {  assertion(owner.getExpression() == path,"owner.getExpression() != path!!!");  int n=paths.size();  for (int i=0; i < n; i++) {    ExpressionOwner ew=(ExpressionOwner)paths.elementAt(i);    assertion(ew != owner,"duplicate owner on the list!!!");    assertion(ew.getExpression() != path,"duplicate expression on the list!!!");  }}  }
class C{  public static String toUpperCase(String string){  boolean changed=false;  char[] chars=string.toCharArray();  for (int i=0; i != chars.length; i++) {    char ch=chars[i];    if ('a' <= ch && 'z' >= ch) {      changed=true;      chars[i]=(char)(ch - 'a' + 'A');    }  }  if (changed) {    return new String(chars);  }  return string;}  }
class C{  public void openLayout(final String id){synchronized (stateChangeLock) {    mapStates.put(id,SwipeRevealLayout.STATE_OPEN);    if (mapLayouts.containsKey(id)) {      final SwipeRevealLayout layout=mapLayouts.get(id);      layout.open(true);    } else     if (openOnlyOne) {      closeOthers(id,mapLayouts.get(id));    }  }}  }
class C{  public static void checkURI(String uri) throws IOException {  try {    URI ur=new URI(uri);    if (ur.getScheme() == null || ur.getRawSchemeSpecificPart().isEmpty()) {      throw new IOException("No scheme or scheme-specific-part in uniformResourceIdentifier: " + uri);    }    if (!ur.isAbsolute()) {      throw new IOException("Relative uniformResourceIdentifier: " + uri);    }  } catch (  URISyntaxException e) {    throw (IOException)new IOException("Bad representation of uniformResourceIdentifier: " + uri).initCause(e);  }}  }
class C{  protected void paint(SynthContext context,Graphics g){  Rectangle clip=g.getClipBounds();  Rectangle bounds=table.getBounds();  bounds.x=bounds.y=0;  if (table.getRowCount() <= 0 || table.getColumnCount() <= 0 || !bounds.intersects(clip)) {    paintDropLines(context,g);    return;  }  boolean ltr=table.getComponentOrientation().isLeftToRight();  Point upperLeft=clip.getLocation();  Point lowerRight=new Point(clip.x + clip.width - 1,clip.y + clip.height - 1);  int rMin=table.rowAtPoint(upperLeft);  int rMax=table.rowAtPoint(lowerRight);  if (rMin == -1) {    rMin=0;  }  if (rMax == -1) {    rMax=table.getRowCount() - 1;  }  int cMin=table.columnAtPoint(ltr ? upperLeft : lowerRight);  int cMax=table.columnAtPoint(ltr ? lowerRight : upperLeft);  if (cMin == -1) {    cMin=0;  }  if (cMax == -1) {    cMax=table.getColumnCount() - 1;  }  paintCells(context,g,rMin,rMax,cMin,cMax);  paintGrid(context,g,rMin,rMax,cMin,cMax);  paintDropLines(context,g);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wspolicy.PolicyElement createPolicyElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wspolicy.impl.PolicyElementImpl();}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append(super.toString());  buffer.append("(");  if (prefixes != null) {    for (int i=0; i < prefixes.length; i++) {      if (i > 0) {        buffer.append(",");      }      buffer.append(prefixes[i]);    }  }  buffer.append(")");  return buffer.toString();}  }
class C{  public StructuralObjectClassVirtualAttributeProvider(){  super();}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {  if (m_savedLastOrder != null && !m_savedLastOrder.empty())   getElemDef().setLastOrder(m_savedLastOrder.pop());  if (!getElemDef().getRequiredFound())   handler.error(XSLTErrorResources.ER_REQUIRED_ELEM_NOT_FOUND,new Object[]{getElemDef().getRequiredElem()},null);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element newElement1;  Element newElement2;  String attribute1;  String attribute2;  doc=(Document)load("staff",true);  newElement1=doc.createElement("ADDRESS");  newElement2=doc.createElement("address");  newElement1.setAttribute("district","Fort Worth");  newElement2.setAttribute("county","Dallas");  attribute1=newElement1.getAttribute("district");  attribute2=newElement2.getAttribute("county");  assertEquals("attrib1","Fort Worth",attribute1);  assertEquals("attrib2","Dallas",attribute2);}  }
class C{  private static TypeDescription queryStateDescription(){  return new TypeDescription.Latent("org.apache.cassandra.service.QueryState",Modifier.PUBLIC | Modifier.ABSTRACT,null,null);}  }
class C{  public Trie(boolean lowerCaseOnly){  m_Root=new Node();  m_lowerCaseOnly=lowerCaseOnly;}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  public String toString(){  BigInteger b=toBigInteger(1);  return b.toString();}  }
class C{  private SpannableStringBuilder warpChooserTitle(String appName){  @SuppressLint("StringFormatMatches") String title=String.format(getString(R.string.select_transfer_way_apk,appName));  ForegroundColorSpan fontSpanRed=new ForegroundColorSpan(getResources().getColor(R.color.colorAccent));  int start=2;  int end=start + appName.length() + 3;  SpannableStringBuilder mSpannableBuilder=new SpannableStringBuilder(title);  mSpannableBuilder.setSpan(fontSpanRed,start,end,Spanned.SPAN_INCLUSIVE_INCLUSIVE);  return mSpannableBuilder;}  }
class C{  public synchronized long skip(long n) throws IOException {  getBufIfOpen();  if (n <= 0) {    return 0;  }  long avail=count - pos;  if (avail <= 0) {    if (markpos < 0)     return getInIfOpen().skip(n);    fill();    avail=count - pos;    if (avail <= 0)     return 0;  }  long skipped=(avail < n) ? avail : n;  pos+=skipped;  return skipped;}  }
class C{  @Override public String toString(){  return new String(buf,0,count);}  }
class C{  public void paintPopupMenuBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  MethodType methodType(){  return signatureType(basicTypeSignature());}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws NotSerializableException {  throw new NotSerializableException("Not serializable.");}  }
class C{  public boolean isPoolPreparedStatements(){  return poolPreparedStatements;}  }
class C{  public TagException(String msg){  super(msg);}  }
class C{  public Rectangle moveDown(float move){  y-=move;  return this;}  }
class C{  protected int calcOffsetToNextView(int direction){  int spanCount=getSpanCount();  int orientation=getOrientation();  if (orientation == VERTICAL) {switch (direction) {case View.FOCUS_DOWN:      return spanCount;case View.FOCUS_UP:    return -spanCount;case View.FOCUS_RIGHT:  return 1;case View.FOCUS_LEFT:return -1;}} else if (orientation == HORIZONTAL) {switch (direction) {case View.FOCUS_DOWN:return 1;case View.FOCUS_UP:return -1;case View.FOCUS_RIGHT:return spanCount;case View.FOCUS_LEFT:return -spanCount;}}return 0;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XMLString s1=m_arg0.execute(xctxt).xstr();  double start=m_arg1.execute(xctxt).num();  int lenOfS1=s1.length();  XMLString substr;  if (lenOfS1 <= 0)   return XString.EMPTYSTRING; else {    int startIndex;    if (Double.isNaN(start)) {      start=-1000000;      startIndex=0;    } else {      start=Math.round(start);      startIndex=(start > 0) ? (int)start - 1 : 0;    }    if (null != m_arg2) {      double len=m_arg2.num(xctxt);      int end=(int)(Math.round(len) + start) - 1;      if (end < 0)       end=0; else       if (end > lenOfS1)       end=lenOfS1;      if (startIndex > lenOfS1)       startIndex=lenOfS1;      substr=s1.substring(startIndex,end);    } else {      if (startIndex > lenOfS1)       startIndex=lenOfS1;      substr=s1.substring(startIndex);    }  }  return (XString)substr;}  }
class C{  @Inject public ExceptionHandler(OAuth2Representation representation,BaseURLProviderFactory baseURLProviderFactory,OAuth2RequestFactory requestFactory,JacksonRepresentationFactory jacksonRepresentationFactory){  this.representation=representation;  this.baseURLProviderFactory=baseURLProviderFactory;  this.requestFactory=requestFactory;  this.jacksonRepresentationFactory=jacksonRepresentationFactory;}  }
class C{  public ParseException(String message){  super(message);}  }
class C{  public DecodingException(LocalizableMessage message){  super(message);}  }
class C{  public CLIFrameworkTest(){  super("CLI");}  }
class C{  private static boolean copy(JsonValue subject,PatchOperation operation) throws BadRequestException {  if (!operation.isCopy()) {    throw new BadRequestException("Operation is a " + operation.getOperation() + ", not a copy!");  }  JsonValue value=subject.get(operation.getFrom());  if (value == null || value.isNull()) {    return false;  }  subject.add(operation.getField(),value.getObject());  return true;}  }
class C{  public void postCompileStep(Compiler compiler){}  }
class C{  public FrameBodyRVAD(){}  }
class C{  @SuppressWarnings("unchecked") public LongMap(int initialCapacity,float loadFactor){  if (initialCapacity < 0)   throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);  if (initialCapacity > 1 << 30)   throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);  capacity=nextPowerOfTwo(initialCapacity);  if (loadFactor <= 0)   throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);  this.loadFactor=loadFactor;  threshold=(int)(capacity * loadFactor);  mask=capacity - 1;  hashShift=63 - Long.numberOfTrailingZeros(capacity);  stashCapacity=Math.max(3,(int)Math.ceil(Math.log(capacity)) * 2);  pushIterations=Math.max(Math.min(capacity,8),(int)Math.sqrt(capacity) / 8);  keyTable=new long[capacity + stashCapacity];  valueTable=(V[])new Object[keyTable.length];}  }
class C{  public void printError(String str){  System.err.print(str);}  }
class C{  private void interruptWorkers(){  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    for (    Worker w : workers)     w.interruptIfStarted();  }  finally {    mainLock.unlock();  }}  }
class C{  public void printMessage(String str){  buff.append(str).append("\n");}  }
class C{  public void paintDesktopPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public OrFileFilter(){  this.fileFilters=new ArrayList<IOFileFilter>();}  }
class C{  public void removeEventChargingFunctionAddress(String ecfAddress) throws ParseException {  if (ecfAddress == null)   throw new NullPointerException("JAIN-SIP Exception, " + "P-Charging-Function-Addresses, setEventChargingFunctionAddress(), the ecfAddress parameter is null.");  if (!this.delete(ecfAddress,ParameterNamesIms.ECF)) {    throw new java.text.ParseException("ECF Address Not Removed",0);  }}  }
class C{  public Rule removeRule(String ruleName){  return ((Rule)rules.remove(ruleName));}  }
class C{  public static String stackTraceToSingleLineString(Throwable throwable,boolean isFullStack){  StringBuilder buffer=new StringBuilder();  stackTraceToSingleLineString(buffer,throwable,isFullStack);  return buffer.toString();}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  setPropertiesFromAttributes(handler,rawName,attributes,this);  try {    Source sourceFromURIResolver=getSourceFromUriResolver(handler);    String hrefUrl=getBaseURIOfIncludedStylesheet(handler,sourceFromURIResolver);    if (handler.importStackContains(hrefUrl)) {      throw new org.xml.sax.SAXException(XSLMessages.createMessage(getStylesheetInclErr(),new Object[]{hrefUrl}));    }    handler.pushImportURL(hrefUrl);    handler.pushImportSource(sourceFromURIResolver);    int savedStylesheetType=handler.getStylesheetType();    handler.setStylesheetType(this.getStylesheetType());    handler.pushNewNamespaceSupport();    try {      parse(handler,uri,localName,rawName,attributes);    }  finally {      handler.setStylesheetType(savedStylesheetType);      handler.popImportURL();      handler.popImportSource();      handler.popNamespaceSupport();    }  } catch (  TransformerException te) {    handler.error(te.getMessage(),te);  }}  }
class C{  public static <P>P decode(PropertyDefinition<P> pd,Object value){  String s=String.valueOf(value);  return pd.castValue(pd.accept(new ValueDecoder(),s));}  }
class C{  public X509Certificate generateX509Certificate(PrivateKey key,SecureRandom random) throws SecurityException, SignatureException, InvalidKeyException {  try {    return generateX509Certificate(key,"BC",random);  } catch (  NoSuchProviderException e) {    throw new SecurityException("BC provider not installed!");  }}  }
class C{  protected void layout(int width,int height){  setSpanOnAxis(X_AXIS,width);  setSpanOnAxis(Y_AXIS,height);}  }
class C{  void build(){  XSLTAttributeDef hrefAttr=new XSLTAttributeDef(null,"href",XSLTAttributeDef.T_URL,true,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef elementsAttr=new XSLTAttributeDef(null,"elements",XSLTAttributeDef.T_SIMPLEPATTERNLIST,true,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef methodAttr=new XSLTAttributeDef(null,"method",XSLTAttributeDef.T_QNAME,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef versionAttr=new XSLTAttributeDef(null,"version",XSLTAttributeDef.T_NMTOKEN,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef encodingAttr=new XSLTAttributeDef(null,"encoding",XSLTAttributeDef.T_CDATA,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef omitXmlDeclarationAttr=new XSLTAttributeDef(null,"omit-xml-declaration",XSLTAttributeDef.T_YESNO,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef standaloneAttr=new XSLTAttributeDef(null,"standalone",XSLTAttributeDef.T_YESNO,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef doctypePublicAttr=new XSLTAttributeDef(null,"doctype-public",XSLTAttributeDef.T_CDATA,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef doctypeSystemAttr=new XSLTAttributeDef(null,"doctype-system",XSLTAttributeDef.T_CDATA,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef cdataSectionElementsAttr=new XSLTAttributeDef(null,"cdata-section-elements",XSLTAttributeDef.T_QNAMES_RESOLVE_NULL,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef indentAttr=new XSLTAttributeDef(null,"indent",XSLTAttributeDef.T_YESNO,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef mediaTypeAttr=new XSLTAttributeDef(null,"media-type",XSLTAttributeDef.T_CDATA,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef nameAttrRequired=new XSLTAttributeDef(null,"name",XSLTAttributeDef.T_QNAME,true,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef nameAVTRequired=new XSLTAttributeDef(null,"name",XSLTAttributeDef.T_AVT_QNAME,true,true,XSLTAttributeDef.WARNING);  XSLTAttributeDef nameAVT_NCNAMERequired=new XSLTAttributeDef(null,"name",XSLTAttributeDef.T_NCNAME,true,true,XSLTAttributeDef.WARNING);  XSLTAttributeDef nameAttrOpt_ERROR=new XSLTAttributeDef(null,"name",XSLTAttributeDef.T_QNAME,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef useAttr=new XSLTAttributeDef(null,"use",XSLTAttributeDef.T_EXPR,true,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef namespaceAVTOpt=new XSLTAttributeDef(null,"namespace",XSLTAttributeDef.T_URL,false,true,XSLTAttributeDef.WARNING);  XSLTAttributeDef decimalSeparatorAttr=new XSLTAttributeDef(null,"decimal-separator",XSLTAttributeDef.T_CHAR,false,XSLTAttributeDef.ERROR,".");  XSLTAttributeDef infinityAttr=new XSLTAttributeDef(null,"infinity",XSLTAttributeDef.T_CDATA,false,XSLTAttributeDef.ERROR,"Infinity");  XSLTAttributeDef minusSignAttr=new XSLTAttributeDef(null,"minus-sign",XSLTAttributeDef.T_CHAR,false,XSLTAttributeDef.ERROR,"-");  XSLTAttributeDef NaNAttr=new XSLTAttributeDef(null,"NaN",XSLTAttributeDef.T_CDATA,false,XSLTAttributeDef.ERROR,"NaN");  XSLTAttributeDef percentAttr=new XSLTAttributeDef(null,"percent",XSLTAttributeDef.T_CHAR,false,XSLTAttributeDef.ERROR,"%");  XSLTAttributeDef perMilleAttr=new XSLTAttributeDef(null,"per-mille",XSLTAttributeDef.T_CHAR,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef zeroDigitAttr=new XSLTAttributeDef(null,"zero-digit",XSLTAttributeDef.T_CHAR,false,XSLTAttributeDef.ERROR,"0");  XSLTAttributeDef digitAttr=new XSLTAttributeDef(null,"digit",XSLTAttributeDef.T_CHAR,false,XSLTAttributeDef.ERROR,"#");  XSLTAttributeDef patternSeparatorAttr=new XSLTAttributeDef(null,"pattern-separator",XSLTAttributeDef.T_CHAR,false,XSLTAttributeDef.ERROR,";");  XSLTAttributeDef groupingSeparatorAttr=new XSLTAttributeDef(null,"grouping-separator",XSLTAttributeDef.T_CHAR,false,XSLTAttributeDef.ERROR,",");  XSLTAttributeDef useAttributeSetsAttr=new XSLTAttributeDef(null,"use-attribute-sets",XSLTAttributeDef.T_QNAMES,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef testAttrRequired=new XSLTAttributeDef(null,"test",XSLTAttributeDef.T_EXPR,true,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef selectAttrRequired=new XSLTAttributeDef(null,"select",XSLTAttributeDef.T_EXPR,true,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef selectAttrOpt=new XSLTAttributeDef(null,"select",XSLTAttributeDef.T_EXPR,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef selectAttrDefNode=new XSLTAttributeDef(null,"select",XSLTAttributeDef.T_EXPR,false,XSLTAttributeDef.ERROR,"node()");  XSLTAttributeDef selectAttrDefDot=new XSLTAttributeDef(null,"select",XSLTAttributeDef.T_EXPR,false,XSLTAttributeDef.ERROR,".");  XSLTAttributeDef matchAttrRequired=new XSLTAttributeDef(null,"match",XSLTAttributeDef.T_PATTERN,true,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef matchAttrOpt=new XSLTAttributeDef(null,"match",XSLTAttributeDef.T_PATTERN,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef priorityAttr=new XSLTAttributeDef(null,"priority",XSLTAttributeDef.T_NUMBER,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef modeAttr=new XSLTAttributeDef(null,"mode",XSLTAttributeDef.T_QNAME,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef spaceAttr=new XSLTAttributeDef(Constants.S_XMLNAMESPACEURI,"space",false,false,false,XSLTAttributeDef.WARNING,"default",Constants.ATTRVAL_STRIP,"preserve",Constants.ATTRVAL_PRESERVE);  XSLTAttributeDef spaceAttrLiteral=new XSLTAttributeDef(Constants.S_XMLNAMESPACEURI,"space",XSLTAttributeDef.T_URL,false,true,XSLTAttributeDef.ERROR);  XSLTAttributeDef stylesheetPrefixAttr=new XSLTAttributeDef(null,"stylesheet-prefix",XSLTAttributeDef.T_CDATA,true,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef resultPrefixAttr=new XSLTAttributeDef(null,"result-prefix",XSLTAttributeDef.T_CDATA,true,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef disableOutputEscapingAttr=new XSLTAttributeDef(null,"disable-output-escaping",XSLTAttributeDef.T_YESNO,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef levelAttr=new XSLTAttributeDef(null,"level",false,false,false,XSLTAttributeDef.ERROR,"single",Constants.NUMBERLEVEL_SINGLE,"multiple",Constants.NUMBERLEVEL_MULTI,"any",Constants.NUMBERLEVEL_ANY);  levelAttr.setDefault("single");  XSLTAttributeDef countAttr=new XSLTAttributeDef(null,"count",XSLTAttributeDef.T_PATTERN,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef fromAttr=new XSLTAttributeDef(null,"from",XSLTAttributeDef.T_PATTERN,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef valueAttr=new XSLTAttributeDef(null,"value",XSLTAttributeDef.T_EXPR,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef formatAttr=new XSLTAttributeDef(null,"format",XSLTAttributeDef.T_CDATA,false,true,XSLTAttributeDef.ERROR);  formatAttr.setDefault("1");  XSLTAttributeDef langAttr=new XSLTAttributeDef(null,"lang",XSLTAttributeDef.T_NMTOKEN,false,true,XSLTAttributeDef.ERROR);  XSLTAttributeDef letterValueAttr=new XSLTAttributeDef(null,"letter-value",false,true,false,XSLTAttributeDef.ERROR,"alphabetic",Constants.NUMBERLETTER_ALPHABETIC,"traditional",Constants.NUMBERLETTER_TRADITIONAL);  XSLTAttributeDef groupingSeparatorAVT=new XSLTAttributeDef(null,"grouping-separator",XSLTAttributeDef.T_CHAR,false,true,XSLTAttributeDef.ERROR);  XSLTAttributeDef groupingSizeAttr=new XSLTAttributeDef(null,"grouping-size",XSLTAttributeDef.T_NUMBER,false,true,XSLTAttributeDef.ERROR);  XSLTAttributeDef dataTypeAttr=new XSLTAttributeDef(null,"data-type",false,true,true,XSLTAttributeDef.ERROR,"text",Constants.SORTDATATYPE_TEXT,"number",Constants.SORTDATATYPE_TEXT);  dataTypeAttr.setDefault("text");  XSLTAttributeDef orderAttr=new XSLTAttributeDef(null,"order",false,true,false,XSLTAttributeDef.ERROR,"ascending",Constants.SORTORDER_ASCENDING,"descending",Constants.SORTORDER_DESCENDING);  orderAttr.setDefault("ascending");  XSLTAttributeDef caseOrderAttr=new XSLTAttributeDef(null,"case-order",false,true,false,XSLTAttributeDef.ERROR,"upper-first",Constants.SORTCASEORDER_UPPERFIRST,"lower-first",Constants.SORTCASEORDER_LOWERFIRST);  XSLTAttributeDef terminateAttr=new XSLTAttributeDef(null,"terminate",XSLTAttributeDef.T_YESNO,false,false,XSLTAttributeDef.ERROR);  terminateAttr.setDefault("no");  XSLTAttributeDef xslExcludeResultPrefixesAttr=new XSLTAttributeDef(Constants.S_XSLNAMESPACEURL,"exclude-result-prefixes",XSLTAttributeDef.T_PREFIXLIST,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef xslExtensionElementPrefixesAttr=new XSLTAttributeDef(Constants.S_XSLNAMESPACEURL,"extension-element-prefixes",XSLTAttributeDef.T_PREFIX_URLLIST,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef xslUseAttributeSetsAttr=new XSLTAttributeDef(Constants.S_XSLNAMESPACEURL,"use-attribute-sets",XSLTAttributeDef.T_QNAMES,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef xslVersionAttr=new XSLTAttributeDef(Constants.S_XSLNAMESPACEURL,"version",XSLTAttributeDef.T_NMTOKEN,false,false,XSLTAttributeDef.ERROR);  XSLTElementDef charData=new XSLTElementDef(this,null,"text()",null,null,null,new ProcessorCharacters(),ElemTextLiteral.class);  charData.setType(XSLTElementDef.T_PCDATA);  XSLTElementDef whiteSpaceOnly=new XSLTElementDef(this,null,"text()",null,null,null,null,ElemTextLiteral.class);  charData.setType(XSLTElementDef.T_PCDATA);  XSLTAttributeDef resultAttr=new XSLTAttributeDef(null,"*",XSLTAttributeDef.T_AVT,false,true,XSLTAttributeDef.WARNING);  XSLTAttributeDef xslResultAttr=new XSLTAttributeDef(Constants.S_XSLNAMESPACEURL,"*",XSLTAttributeDef.T_CDATA,false,false,XSLTAttributeDef.WARNING);  XSLTElementDef[] templateElements=new XSLTElementDef[23];  XSLTElementDef[] templateElementsAndParams=new XSLTElementDef[24];  XSLTElementDef[] templateElementsAndSort=new XSLTElementDef[24];  XSLTElementDef[] exsltFunctionElements=new XSLTElementDef[24];  XSLTElementDef[] charTemplateElements=new XSLTElementDef[15];  XSLTElementDef resultElement=new XSLTElementDef(this,null,"*",null,templateElements,new XSLTAttributeDef[]{spaceAttrLiteral,xslExcludeResultPrefixesAttr,xslExtensionElementPrefixesAttr,xslUseAttributeSetsAttr,xslVersionAttr,xslResultAttr,resultAttr},new ProcessorLRE(),ElemLiteralResult.class,20,true);  XSLTElementDef unknownElement=new XSLTElementDef(this,"*","unknown",null,templateElementsAndParams,new XSLTAttributeDef[]{xslExcludeResultPrefixesAttr,xslExtensionElementPrefixesAttr,xslUseAttributeSetsAttr,xslVersionAttr,xslResultAttr,resultAttr},new ProcessorUnknown(),ElemUnknown.class,20,true);  XSLTElementDef xslValueOf=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"value-of",null,null,new XSLTAttributeDef[]{selectAttrRequired,disableOutputEscapingAttr},new ProcessorTemplateElem(),ElemValueOf.class,20,true);  XSLTElementDef xslCopyOf=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"copy-of",null,null,new XSLTAttributeDef[]{selectAttrRequired},new ProcessorTemplateElem(),ElemCopyOf.class,20,true);  XSLTElementDef xslNumber=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"number",null,null,new XSLTAttributeDef[]{levelAttr,countAttr,fromAttr,valueAttr,formatAttr,langAttr,letterValueAttr,groupingSeparatorAVT,groupingSizeAttr},new ProcessorTemplateElem(),ElemNumber.class,20,true);  XSLTElementDef xslSort=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"sort",null,null,new XSLTAttributeDef[]{selectAttrDefDot,langAttr,dataTypeAttr,orderAttr,caseOrderAttr},new ProcessorTemplateElem(),ElemSort.class,19,true);  XSLTElementDef xslWithParam=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"with-param",null,templateElements,new XSLTAttributeDef[]{nameAttrRequired,selectAttrOpt},new ProcessorTemplateElem(),ElemWithParam.class,19,true);  XSLTElementDef xslApplyTemplates=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"apply-templates",null,new XSLTElementDef[]{xslSort,xslWithParam},new XSLTAttributeDef[]{selectAttrDefNode,modeAttr},new ProcessorTemplateElem(),ElemApplyTemplates.class,20,true);  XSLTElementDef xslApplyImports=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"apply-imports",null,null,new XSLTAttributeDef[]{},new ProcessorTemplateElem(),ElemApplyImport.class);  XSLTElementDef xslForEach=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"for-each",null,templateElementsAndSort,new XSLTAttributeDef[]{selectAttrRequired,spaceAttr},new ProcessorTemplateElem(),ElemForEach.class,true,false,true,20,true);  XSLTElementDef xslIf=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"if",null,templateElements,new XSLTAttributeDef[]{testAttrRequired,spaceAttr},new ProcessorTemplateElem(),ElemIf.class,20,true);  XSLTElementDef xslWhen=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"when",null,templateElements,new XSLTAttributeDef[]{testAttrRequired,spaceAttr},new ProcessorTemplateElem(),ElemWhen.class,false,true,1,true);  XSLTElementDef xslOtherwise=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"otherwise",null,templateElements,new XSLTAttributeDef[]{spaceAttr},new ProcessorTemplateElem(),ElemOtherwise.class,false,false,2,false);  XSLTElementDef xslChoose=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"choose",null,new XSLTElementDef[]{xslWhen,xslOtherwise},new XSLTAttributeDef[]{spaceAttr},new ProcessorTemplateElem(),ElemChoose.class,true,false,true,20,true);  XSLTElementDef xslAttribute=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"attribute",null,charTemplateElements,new XSLTAttributeDef[]{nameAVTRequired,namespaceAVTOpt,spaceAttr},new ProcessorTemplateElem(),ElemAttribute.class,20,true);  XSLTElementDef xslCallTemplate=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"call-template",null,new XSLTElementDef[]{xslWithParam},new XSLTAttributeDef[]{nameAttrRequired},new ProcessorTemplateElem(),ElemCallTemplate.class,20,true);  XSLTElementDef xslVariable=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"variable",null,templateElements,new XSLTAttributeDef[]{nameAttrRequired,selectAttrOpt},new ProcessorTemplateElem(),ElemVariable.class,20,true);  XSLTElementDef xslParam=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"param",null,templateElements,new XSLTAttributeDef[]{nameAttrRequired,selectAttrOpt},new ProcessorTemplateElem(),ElemParam.class,19,true);  XSLTElementDef xslText=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"text",null,new XSLTElementDef[]{charData},new XSLTAttributeDef[]{disableOutputEscapingAttr},new ProcessorText(),ElemText.class,20,true);  XSLTElementDef xslProcessingInstruction=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"processing-instruction",null,charTemplateElements,new XSLTAttributeDef[]{nameAVT_NCNAMERequired,spaceAttr},new ProcessorTemplateElem(),ElemPI.class,20,true);  XSLTElementDef xslElement=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"element",null,templateElements,new XSLTAttributeDef[]{nameAVTRequired,namespaceAVTOpt,useAttributeSetsAttr,spaceAttr},new ProcessorTemplateElem(),ElemElement.class,20,true);  XSLTElementDef xslComment=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"comment",null,charTemplateElements,new XSLTAttributeDef[]{spaceAttr},new ProcessorTemplateElem(),ElemComment.class,20,true);  XSLTElementDef xslCopy=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"copy",null,templateElements,new XSLTAttributeDef[]{spaceAttr,useAttributeSetsAttr},new ProcessorTemplateElem(),ElemCopy.class,20,true);  XSLTElementDef xslMessage=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"message",null,templateElements,new XSLTAttributeDef[]{terminateAttr},new ProcessorTemplateElem(),ElemMessage.class,20,true);  XSLTElementDef xslFallback=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"fallback",null,templateElements,new XSLTAttributeDef[]{spaceAttr},new ProcessorTemplateElem(),ElemFallback.class,20,true);  XSLTElementDef exsltFunction=new XSLTElementDef(this,Constants.S_EXSLT_FUNCTIONS_URL,"function",null,exsltFunctionElements,new XSLTAttributeDef[]{nameAttrRequired},new ProcessorExsltFunction(),ElemExsltFunction.class);  XSLTElementDef exsltResult=new XSLTElementDef(this,Constants.S_EXSLT_FUNCTIONS_URL,"result",null,templateElements,new XSLTAttributeDef[]{selectAttrOpt},new ProcessorExsltFuncResult(),ElemExsltFuncResult.class);  int i=0;  templateElements[i++]=charData;  templateElements[i++]=xslApplyTemplates;  templateElements[i++]=xslCallTemplate;  templateElements[i++]=xslApplyImports;  templateElements[i++]=xslForEach;  templateElements[i++]=xslValueOf;  templateElements[i++]=xslCopyOf;  templateElements[i++]=xslNumber;  templateElements[i++]=xslChoose;  templateElements[i++]=xslIf;  templateElements[i++]=xslText;  templateElements[i++]=xslCopy;  templateElements[i++]=xslVariable;  templateElements[i++]=xslMessage;  templateElements[i++]=xslFallback;  templateElements[i++]=xslProcessingInstruction;  templateElements[i++]=xslComment;  templateElements[i++]=xslElement;  templateElements[i++]=xslAttribute;  templateElements[i++]=resultElement;  templateElements[i++]=unknownElement;  templateElements[i++]=exsltFunction;  templateElements[i++]=exsltResult;  System.arraycopy(templateElements,0,templateElementsAndParams,0,i);  System.arraycopy(templateElements,0,templateElementsAndSort,0,i);  System.arraycopy(templateElements,0,exsltFunctionElements,0,i);  templateElementsAndParams[i]=xslParam;  templateElementsAndSort[i]=xslSort;  exsltFunctionElements[i]=xslParam;  i=0;  charTemplateElements[i++]=charData;  charTemplateElements[i++]=xslApplyTemplates;  charTemplateElements[i++]=xslCallTemplate;  charTemplateElements[i++]=xslApplyImports;  charTemplateElements[i++]=xslForEach;  charTemplateElements[i++]=xslValueOf;  charTemplateElements[i++]=xslCopyOf;  charTemplateElements[i++]=xslNumber;  charTemplateElements[i++]=xslChoose;  charTemplateElements[i++]=xslIf;  charTemplateElements[i++]=xslText;  charTemplateElements[i++]=xslCopy;  charTemplateElements[i++]=xslVariable;  charTemplateElements[i++]=xslMessage;  charTemplateElements[i++]=xslFallback;  XSLTElementDef importDef=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"import",null,null,new XSLTAttributeDef[]{hrefAttr},new ProcessorImport(),null,1,true);  XSLTElementDef includeDef=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"include",null,null,new XSLTAttributeDef[]{hrefAttr},new ProcessorInclude(),null,20,true);  XSLTAttributeDef[] scriptAttrs=new XSLTAttributeDef[]{new XSLTAttributeDef(null,"lang",XSLTAttributeDef.T_NMTOKEN,true,false,XSLTAttributeDef.WARNING),new XSLTAttributeDef(null,"src",XSLTAttributeDef.T_URL,false,false,XSLTAttributeDef.WARNING)};  XSLTAttributeDef[] componentAttrs=new XSLTAttributeDef[]{new XSLTAttributeDef(null,"prefix",XSLTAttributeDef.T_NMTOKEN,true,false,XSLTAttributeDef.WARNING),new XSLTAttributeDef(null,"elements",XSLTAttributeDef.T_STRINGLIST,false,false,XSLTAttributeDef.WARNING),new XSLTAttributeDef(null,"functions",XSLTAttributeDef.T_STRINGLIST,false,false,XSLTAttributeDef.WARNING)};  XSLTElementDef[] topLevelElements=new XSLTElementDef[]{includeDef,importDef,whiteSpaceOnly,unknownElement,new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"strip-space",null,null,new XSLTAttributeDef[]{elementsAttr},new ProcessorStripSpace(),null,20,true),new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"preserve-space",null,null,new XSLTAttributeDef[]{elementsAttr},new ProcessorPreserveSpace(),null,20,true),new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"output",null,null,new XSLTAttributeDef[]{methodAttr,versionAttr,encodingAttr,omitXmlDeclarationAttr,standaloneAttr,doctypePublicAttr,doctypeSystemAttr,cdataSectionElementsAttr,indentAttr,mediaTypeAttr,XSLTAttributeDef.m_foreignAttr},new ProcessorOutputElem(),null,20,true),new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"key",null,null,new XSLTAttributeDef[]{nameAttrRequired,matchAttrRequired,useAttr},new ProcessorKey(),null,20,true),new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"decimal-format",null,null,new XSLTAttributeDef[]{nameAttrOpt_ERROR,decimalSeparatorAttr,groupingSeparatorAttr,infinityAttr,minusSignAttr,NaNAttr,percentAttr,perMilleAttr,zeroDigitAttr,digitAttr,patternSeparatorAttr},new ProcessorDecimalFormat(),null,20,true),new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"attribute-set",null,new XSLTElementDef[]{xslAttribute},new XSLTAttributeDef[]{nameAttrRequired,useAttributeSetsAttr},new ProcessorAttributeSet(),null,20,true),new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"variable",null,templateElements,new XSLTAttributeDef[]{nameAttrRequired,selectAttrOpt},new ProcessorGlobalVariableDecl(),ElemVariable.class,20,true),new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"param",null,templateElements,new XSLTAttributeDef[]{nameAttrRequired,selectAttrOpt},new ProcessorGlobalParamDecl(),ElemParam.class,20,true),new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"template",null,templateElementsAndParams,new XSLTAttributeDef[]{matchAttrOpt,nameAttrOpt_ERROR,priorityAttr,modeAttr,spaceAttr},new ProcessorTemplate(),ElemTemplate.class,true,20,true),new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"namespace-alias",null,null,new XSLTAttributeDef[]{stylesheetPrefixAttr,resultPrefixAttr},new ProcessorNamespaceAlias(),null,20,true),new XSLTElementDef(this,Constants.S_BUILTIN_EXTENSIONS_URL,"component",null,new XSLTElementDef[]{new XSLTElementDef(this,Constants.S_BUILTIN_EXTENSIONS_URL,"script",null,new XSLTElementDef[]{charData},scriptAttrs,new ProcessorLRE(),ElemExtensionScript.class,20,true)},componentAttrs,new ProcessorLRE(),ElemExtensionDecl.class),new XSLTElementDef(this,Constants.S_BUILTIN_OLD_EXTENSIONS_URL,"component",null,new XSLTElementDef[]{new XSLTElementDef(this,Constants.S_BUILTIN_OLD_EXTENSIONS_URL,"script",null,new XSLTElementDef[]{charData},scriptAttrs,new ProcessorLRE(),ElemExtensionScript.class,20,true)},componentAttrs,new ProcessorLRE(),ElemExtensionDecl.class),exsltFunction};  XSLTAttributeDef excludeResultPrefixesAttr=new XSLTAttributeDef(null,"exclude-result-prefixes",XSLTAttributeDef.T_PREFIXLIST,false,false,XSLTAttributeDef.WARNING);  XSLTAttributeDef extensionElementPrefixesAttr=new XSLTAttributeDef(null,"extension-element-prefixes",XSLTAttributeDef.T_PREFIX_URLLIST,false,false,XSLTAttributeDef.WARNING);  XSLTAttributeDef idAttr=new XSLTAttributeDef(null,"id",XSLTAttributeDef.T_CDATA,false,false,XSLTAttributeDef.WARNING);  XSLTAttributeDef versionAttrRequired=new XSLTAttributeDef(null,"version",XSLTAttributeDef.T_NMTOKEN,true,false,XSLTAttributeDef.WARNING);  XSLTElementDef stylesheetElemDef=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"stylesheet","transform",topLevelElements,new XSLTAttributeDef[]{extensionElementPrefixesAttr,excludeResultPrefixesAttr,idAttr,versionAttrRequired,spaceAttr},new ProcessorStylesheetElement(),null,true,-1,false);  importDef.setElements(new XSLTElementDef[]{stylesheetElemDef,resultElement,unknownElement});  includeDef.setElements(new XSLTElementDef[]{stylesheetElemDef,resultElement,unknownElement});  build(null,null,null,new XSLTElementDef[]{stylesheetElemDef,whiteSpaceOnly,resultElement,unknownElement},null,new ProcessorStylesheetDoc(),null);}  }
class C{  public static Time valueOf(String s){  int hour;  int minute;  int second;  int firstColon;  int secondColon;  if (s == null)   throw new java.lang.IllegalArgumentException();  firstColon=s.indexOf(':');  secondColon=s.indexOf(':',firstColon + 1);  if ((firstColon > 0) & (secondColon > 0) & (secondColon < s.length() - 1)) {    hour=Integer.parseInt(s.substring(0,firstColon));    minute=Integer.parseInt(s.substring(firstColon + 1,secondColon));    second=Integer.parseInt(s.substring(secondColon + 1));  } else {    throw new java.lang.IllegalArgumentException();  }  return new Time(hour,minute,second);}  }
class C{  @Override public boolean isLeapYear(){  return IsoChronology.INSTANCE.isLeapYear(year);}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  forwardToAuthDomainView(event);}  }
class C{  protected void childDeserializedHook(Object child,BCSChild bcsc){synchronized (children) {    children.put(child,bcsc);  }}  }
class C{  public static void sort(short[] array){  DualPivotQuicksort.sort(array);}  }
class C{  public void store(SSOToken token) throws SMSException, SSOException {}  }
class C{  @Override @Test(timeout=120000) public void testSkip() throws Exception {  doSkipTest(CIPHER_OPENSSL_JNA,false);  doSkipTest(CIPHER_OPENSSL_JNA,true);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element createdNode;  Node parentNode;  doc=(Document)load("staff",false);  createdNode=doc.createElement("employee");  parentNode=createdNode.getParentNode();  assertNull("parentNode",parentNode);}  }
class C{  public FastRemovalDequeue<JspServletWrapper>.Entry push(JspServletWrapper jsw){  if (log.isTraceEnabled()) {    log.trace(Localizer.getMessage("jsp.message.jsp_added",jsw.getJspUri(),context.getContextPath()));  }  FastRemovalDequeue<JspServletWrapper>.Entry entry=jspQueue.push(jsw);  JspServletWrapper replaced=entry.getReplaced();  if (replaced != null) {    if (log.isDebugEnabled()) {      log.debug(Localizer.getMessage("jsp.message.jsp_removed_excess",replaced.getJspUri(),context.getContextPath()));    }    unloadJspServletWrapper(replaced);    entry.clearReplaced();  }  return entry;}  }
class C{  public void visitFormalTypeParameter(String name){}  }
class C{  @SuppressWarnings("unused") static <T>Promise<Collection<T>> blockingPromiseCollection(Class<T> componentType){  return new BlockingPromise<>();}  }
class C{  public int readWord() throws IOException {  length+=2;  int k1=in.read();  if (k1 < 0)   return 0;  return (k1 + (in.read() << 8)) & 0xffff;}  }
class C{  public static String formatSize(Object obj,boolean mb){  long bytes=-1L;  if (obj instanceof Long) {    bytes=((Long)obj).longValue();  } else   if (obj instanceof Integer) {    bytes=((Integer)obj).intValue();  }  if (mb) {    StringBuilder buff=new StringBuilder();    if (bytes < 0) {      buff.append('-');      bytes=-bytes;    }    long mbytes=bytes / (1024 * 1024);    long rest=((bytes - (mbytes * (1024 * 1024))) * 100) / (1024 * 1024);    buff.append(mbytes).append('.');    if (rest < 10) {      buff.append('0');    }    buff.append(rest).append(" MB");    return buff.toString();  } else {    return ((bytes / 1024) + " KB");  }}  }
class C{  private int processPrefix(final String[] s,final int maxPrefix){  int prefix=maxPrefix;  try {    if (s.length < 1 || s.length > 2) {      throw genericDecodeError();    } else     if (s.length == 2) {      if (s[0].indexOf('*') > -1) {        throw new LocalizedIllegalArgumentException(ERR_ADDRESSMASK_WILDCARD_DECODE_ERROR.get());      }      prefix=Integer.parseInt(s[1]);    }    if (prefix < 0 || prefix > maxPrefix) {      throw new LocalizedIllegalArgumentException(ERR_ADDRESSMASK_PREFIX_DECODE_ERROR.get());    }  } catch (  final NumberFormatException nfex) {    throw genericDecodeError();  }  return prefix;}  }
class C{  Template(final TemplateFile templateFile,final String name,final List<AttributeType> rdnAttributes,final List<String> subordinateTemplateNames,final List<Integer> numEntriesPerTemplate,final List<TemplateLine> templateLines){  this.templateFile=templateFile;  this.name=name;  this.rdnAttributes=rdnAttributes;  this.subTemplateNames=subordinateTemplateNames;  this.numEntriesPerTemplate=numEntriesPerTemplate;  this.templateLines=templateLines;}  }
class C{  public final void testWriteReplace2(){  MyCertificate c1=new MyFailingCertificate("TEST_TYPE",testEncoding);  try {    c1.writeReplace();    fail();  } catch (  ObjectStreamException expected) {  }}  }
class C{  public BasicControl(String id){  this.id=id;}  }
class C{  private void processHostPattern(final String rule){  final String[] s=rule.split("^[0-9a-zA-z-.]+");  if (s.length > 0) {    throw genericDecodeError();  }  hostPattern=rule;}  }
class C{  public boolean isIdentity(){  return true;}  }
class C{  public byte peek(){  return sequence.byteAt(pos);}  }
class C{  public static String decodeText(String text) throws UnsupportedEncodingException {  if (text.indexOf(ENCODED_TOKEN_MARKER) < 0) {    return text;  }  int offset=0;  int endOffset=text.length();  int startWhiteSpace=-1;  int endWhiteSpace=-1;  StringBuilder decodedText=new StringBuilder(text.length());  boolean previousTokenEncoded=false;  while (offset < endOffset) {    char ch=text.charAt(offset);    if (LINEAR_WHITESPACE.indexOf(ch) != -1) {      startWhiteSpace=offset;      while (offset < endOffset) {        ch=text.charAt(offset);        if (LINEAR_WHITESPACE.indexOf(ch) != -1) {          offset++;        } else {          endWhiteSpace=offset;          break;        }      }    } else {      int wordStart=offset;      while (offset < endOffset) {        ch=text.charAt(offset);        if (LINEAR_WHITESPACE.indexOf(ch) == -1) {          offset++;        } else {          break;        }      }      String word=text.substring(wordStart,offset);      if (word.startsWith(ENCODED_TOKEN_MARKER)) {        try {          String decodedWord=decodeWord(word);          if (!previousTokenEncoded && startWhiteSpace != -1) {            decodedText.append(text.substring(startWhiteSpace,endWhiteSpace));            startWhiteSpace=-1;          }          previousTokenEncoded=true;          decodedText.append(decodedWord);          continue;        } catch (        ParseException e) {        }      }      if (startWhiteSpace != -1) {        decodedText.append(text.substring(startWhiteSpace,endWhiteSpace));        startWhiteSpace=-1;      }      previousTokenEncoded=false;      decodedText.append(word);    }  }  return decodedText.toString();}  }
class C{  public static void removeByUuid(java.lang.String uuid){  getPersistence().removeByUuid(uuid);}  }
class C{  private void waitUntilReadable() throws IOException {  readTimeout.enter();  try {    while (readBuffer.size() == 0 && !finished && !closed && errorCode == null) {      waitForIo();    }  }  finally {    readTimeout.exitAndThrowIfTimedOut();  }}  }
class C{  public static Collection<Tag> values(){  RootCfgDefn.getInstance();  return Collections.unmodifiableCollection(TAGS.values());}  }
class C{  public void start_scope(LogfileScope p_logfile_scope,PlaPointFloat p_start_corner){  start_scope(p_logfile_scope);  add_corner(p_start_corner);}  }
class C{  protected static int daysSinceModified(SSOToken stoken,String entryDN) throws AMException, SSOException {  NumberFormat nf=NumberFormat.getInstance();  SimpleDateFormat df=new SimpleDateFormat("yyyyMMddhhmmss");  ParsePosition pp=new ParsePosition(0);  Set attrNames=new HashSet(1);  attrNames.add("modifytimestamp");  Map attributes=AMDirectoryAccessFactory.getDirectoryServices().getAttributes(stoken,entryDN,attrNames,AMObject.UNDETERMINED_OBJECT_TYPE);  Set values=(Set)attributes.get("modifytimestamp");  if ((values == null) || values.isEmpty()) {    return -1;  }  String value=(String)values.iterator().next();  if ((value == null) || value.length() == 0) {    return -1;  }  Number n;  try {    n=nf.parse(value);  } catch (  ParseException pe) {    if (AMCommonUtils.debug.warningEnabled()) {      AMCommonUtils.debug.warning("AMStoreConnection.daysSinceModified: " + "unable to parse date: " + value + " :Returning default= -1",pe);    }    return (-1);  }  Date modDate=df.parse(n.toString(),pp);  Date nowDate=newDate();  long modTimeMSecs=modDate.getTime();  long nowTimeMSecs=nowDate.getTime();  long elapsedTimeMSecs=nowTimeMSecs - modTimeMSecs;  int elapsedDays=(int)(elapsedTimeMSecs / (1000 * 60 * 60* 24));  if (AMCommonUtils.debug.messageEnabled()) {    AMCommonUtils.debug.message("AMStoreConnection.daysSinceModified() for dn: " + entryDN + ", days: "+ elapsedDays+ " days");  }  return (elapsedDays);}  }
class C{  public MessageViewBean(){  super(PAGE_NAME);  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public X509CRLHolder(byte[] crlEncoding) throws IOException {  this(parseStream(new ByteArrayInputStream(crlEncoding)));}  }
class C{  public static void fill(float[] a,float val){  for (int i=0, len=a.length; i < len; i++)   a[i]=val;}  }
class C{  public String encodeBody(){  return encodeBody(new StringBuilder()).toString();}  }
class C{  public int hashCode(){  return (getName().hashCode() ^ mask);}  }
class C{  public Vector(float x,float y,float z){  vals[I1]=x;  vals[I2]=y;  vals[I3]=z;}  }
class C{  public static JsonValue jsonFromFile(String resourceFilePath) throws IOException {  final InputStream configStream=JsonUtils.class.getResourceAsStream(resourceFilePath);  return new JsonValue(MAPPER.readValue(configStream,Map.class));}  }
class C{  private void buildFor(StringBuilder sb,AST.For aFor,int indentation) throws SyntaxException {  buildIndentation(sb,indentation);  sb.append("for (var ").append(aFor.name).append(" in ");  buildExpression(sb,aFor.exp,indentation);  sb.append(") {\n");  buildStatements(sb,aFor.body,indentation + INDENT);  buildIndentation(sb,indentation);  sb.append("}\n");}  }
class C{  @Override public void finish() throws IOException {  super.finish();  writeLong(crc.getValue());  writeLong(crc.tbytes);}  }
class C{  private static boolean isBeforeDot(String src,int index){  int ch;  int cc;  int len=src.length();  for (int i=index + Character.charCount(src.codePointAt(index)); i < len; i+=Character.charCount(ch)) {    ch=src.codePointAt(i);    if (ch == '\u0307') {      return true;    } else {      cc=Normalizer.getCombiningClass(ch);      if ((cc == 0) || (cc == COMBINING_CLASS_ABOVE)) {        return false;      }    }  }  return false;}  }
class C{  static void useWhoAmIExtendedRequest(Connection connection) throws LdapException {  if (isSupported(WhoAmIExtendedRequest.OID)) {    final String name="uid=bjensen,ou=People,dc=example,dc=com";    final char[] password="hifalutin".toCharArray();    final Result result=connection.bind(name,password);    if (result.isSuccess()) {      final WhoAmIExtendedRequest request=Requests.newWhoAmIExtendedRequest();      final WhoAmIExtendedResult extResult=connection.extendedRequest(request);      if (extResult.isSuccess()) {        System.out.println("Authz ID: " + extResult.getAuthorizationID());      }    }  } else {    System.err.println("WhoAmIExtendedRequest not supported");  }}  }
class C{  public boolean hasValue() throws SdpParseException {  NameValue nameValue=getAttribute();  if (nameValue == null)   return false; else {    Object value=nameValue.getValueAsObject();    if (value == null)     return false; else     return true;  }}  }
class C{  public ClassNotFoundException(String s,Throwable ex){  super(s,null);  this.ex=ex;}  }
class C{  public FrameBodyWCOM(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public void testGetPrivateKey() throws Exception {  byte[] privateKeyData={1,2,3,4,5};  PrivateKeyStub privateKey=new PrivateKeyStub("private","fff",privateKeyData);  PublicKeyStub publicKey=new PublicKeyStub("public","fff",null);  KeyPair kp=new KeyPair(publicKey,privateKey);  Signer s=new SignerStub("sss5");  assertNull(s.getPrivateKey());  s.setKeyPair(kp);  assertSame(privateKey,s.getPrivateKey());}  }
class C{  public QName(String qname,Element namespaceContext,PrefixResolver resolver,boolean validate){  _namespaceURI=null;  int indexOfNSSep=qname.indexOf(':');  if (indexOfNSSep > 0) {    if (null != namespaceContext) {      String prefix=qname.substring(0,indexOfNSSep);      _prefix=prefix;      if (prefix.equals("xml")) {        _namespaceURI=S_XMLNAMESPACEURI;      } else       if (prefix.equals("xmlns")) {        return;      } else {        _namespaceURI=resolver.getNamespaceForPrefix(prefix,namespaceContext);      }      if (null == _namespaceURI) {        throw new RuntimeException(XMLMessages.createXMLMessage(XMLErrorResources.ER_PREFIX_MUST_RESOLVE,new Object[]{prefix}));      }    } else {    }  }  _localName=(indexOfNSSep < 0) ? qname : qname.substring(indexOfNSSep + 1);  if (validate) {    if ((_localName == null) || (!XML11Char.isXML11ValidNCName(_localName))) {      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_INVALID,null));    }  }  m_hashCode=toString().hashCode();}  }
class C{  public ConnectorReference(ConnectorKey connectorKey){  this(connectorKey,null);}  }
class C{  public List<Integer> replaceCloseWithLine(){  List<Integer> modifiedSubpathsIndices=new ArrayList<>();  int i=0;  for (  Subpath subpath : subpaths) {    if (subpath.isClosed()) {      subpath.setClosed(false);      subpath.addSegment(new Line(subpath.getLastPoint(),subpath.getStartPoint()));      modifiedSubpathsIndices.add(i);    }    ++i;  }  return modifiedSubpathsIndices;}  }
class C{  public final void addInstanceOf(String className){  Reject.ifNull(className);  String value=className.trim();  if (!value.matches(CLASS_RE)) {    throw new IllegalArgumentException("\"" + value + "\" is not a valid Java class name");  }  instanceOfInterfaces.add(value);}  }
class C{  public final boolean isSimNetworkLocked(){  return tm != null && tm.getSimState() == TelephonyManager.SIM_STATE_NETWORK_LOCKED;}  }
class C{  public Pattern(DyeColor color,PatternType pattern){  this.color=color;  this.pattern=pattern;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String substring;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  substring=child.substringData(0,8);  assertEquals("characterdataSubStringValueAssert","Margaret",substring);}  }
class C{  @Override public void addApplicationListener(String listener){synchronized (applicationListenersLock) {    String results[]=new String[applicationListeners.length + 1];    for (int i=0; i < applicationListeners.length; i++) {      if (listener.equals(applicationListeners[i])) {        log.info(sm.getString("standardContext.duplicateListener",listener));        return;      }      results[i]=applicationListeners[i];    }    results[applicationListeners.length]=listener;    applicationListeners=results;  }  fireContainerEvent("addApplicationListener",listener);}  }
class C{  static Promise<Float> blockingPromiseFloat(){  return new BlockingPromise<>();}  }
class C{  private boolean is_legal_class_name(String p_string){  if (p_string.equals(""))   return false;  for (int i=0; i < reserved_name_chars.length; ++i) {    if (p_string.contains(reserved_name_chars[i])) {      return false;    }  }  return true;}  }
class C{  public void build(){  if (directoryName == null) {    throw new RuntimeException("Directory name not set!");  }  Golbat.initialize(contentResolver,directoryName,cameraRequestCode,galleryRequestCode,imageQuality,imageType,maxSizeInPixel);}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  try {    if (hasFallbackChildren()) {      executeFallbacks(transformer);    } else {    }  } catch (  TransformerException e) {    transformer.getErrorListener().fatalError(e);  }}  }
class C{  boolean equals(ClearanceMatrixEntry p_other){  for (int i=0; i < layer_structure.size(); ++i) {    if (layer[i] != p_other.layer[i]) {      return false;    }  }  return true;}  }
class C{  public JsonValue create(String location,String resourceId,JsonValue payload,Context context) throws ResourceException {  Reject.ifTrue(StringUtils.isEmpty(location),"The endpoint destination may not be null or empty.");  Reject.ifNull(payload,"The payload object to create must not be null.");  final Router rootRouter=router.get();  final CreateRequest createRequest=Requests.newCreateRequest(location,payload);  if (resourceId != null) {    createRequest.setNewResourceId(resourceId);  }  return rootRouter.handleCreate(context,createRequest).getOrThrowUninterruptibly().getContent();}  }
class C{  public void initialize(String hostedEntityID,String realm){}  }
class C{  public void testClearBitPositiveOutside2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=191;  byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void clearPermissions(){  loginButtonProperties.clearPermissions();}  }
class C{  public HttpParams copy(){  return this;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  private boolean serializeCompactRDFAttrProps(XMPNode parentNode,int indent) throws IOException {  boolean allAreAttrs=true;  for (Iterator it=parentNode.iterateChildren(); it.hasNext(); ) {    XMPNode prop=(XMPNode)it.next();    if (canBeRDFAttrProp(prop)) {      writeNewline();      writeIndent(indent);      write(prop.getName());      write("=\"");      appendNodeValue(prop.getValue(),true);      write('"');    } else {      allAreAttrs=false;    }  }  return allAreAttrs;}  }
class C{  @Override public void save() throws Exception {  if (getReadonly()) {    log.error(sm.getString("memoryUserDatabase.readOnly"));    return;  }  if (!isWriteable()) {    log.warn(sm.getString("memoryUserDatabase.notPersistable"));    return;  }  File fileNew=new File(pathnameNew);  if (!fileNew.isAbsolute()) {    fileNew=new File(System.getProperty(Globals.CATALINA_BASE_PROP),pathnameNew);  }  PrintWriter writer=null;  try {    FileOutputStream fos=new FileOutputStream(fileNew);    OutputStreamWriter osw=new OutputStreamWriter(fos,"UTF8");    writer=new PrintWriter(osw);    writer.println("<?xml version='1.0' encoding='utf-8'?>");    writer.println("<tomcat-users xmlns=\"http://tomcat.apache.org/xml\"");    writer.println("              xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");    writer.println("              xsi:schemaLocation=\"http://tomcat.apache.org/xml tomcat-users.xsd\"");    writer.println("              version=\"1.0\">");    Iterator<?> values=null;    values=getRoles();    while (values.hasNext()) {      writer.print("  ");      writer.println(values.next());    }    values=getGroups();    while (values.hasNext()) {      writer.print("  ");      writer.println(values.next());    }    values=getUsers();    while (values.hasNext()) {      writer.print("  ");      writer.println(((MemoryUser)values.next()).toXml());    }    writer.println("</tomcat-users>");    if (writer.checkError()) {      writer.close();      fileNew.delete();      throw new IOException(sm.getString("memoryUserDatabase.writeException",fileNew.getAbsolutePath()));    }    writer.close();  } catch (  IOException e) {    if (writer != null) {      writer.close();    }    fileNew.delete();    throw e;  }  File fileOld=new File(pathnameOld);  if (!fileOld.isAbsolute()) {    fileOld=new File(System.getProperty(Globals.CATALINA_BASE_PROP),pathnameOld);  }  fileOld.delete();  File fileOrig=new File(pathname);  if (!fileOrig.isAbsolute()) {    fileOrig=new File(System.getProperty(Globals.CATALINA_BASE_PROP),pathname);  }  if (fileOrig.exists()) {    fileOld.delete();    if (!fileOrig.renameTo(fileOld)) {      throw new IOException(sm.getString("memoryUserDatabase.renameOld",fileOld.getAbsolutePath()));    }  }  if (!fileNew.renameTo(fileOrig)) {    if (fileOld.exists()) {      fileOld.renameTo(fileOrig);    }    throw new IOException(sm.getString("memoryUserDatabase.renameNew",fileOrig.getAbsolutePath()));  }  fileOld.delete();}  }
class C{  public synchronized int read() throws IOException {  if (!connected) {    throw new IOException("Pipe not connected");  } else   if (closedByReader) {    throw new IOException("Pipe closed");  } else   if (writeSide != null && !writeSide.isAlive() && !closedByWriter && (in < 0)) {    throw new IOException("Write end dead");  }  readSide=Thread.currentThread();  int trials=2;  while (in < 0) {    if (closedByWriter) {      return -1;    }    if ((writeSide != null) && (!writeSide.isAlive()) && (--trials < 0)) {      throw new IOException("Pipe broken");    }    notifyAll();    try {      wait(1000);    } catch (    InterruptedException ex) {      throw new java.io.InterruptedIOException();    }  }  int ret=buffer[out++] & 0xFF;  if (out >= buffer.length) {    out=0;  }  if (in == out) {    in=-1;  }  return ret;}  }
class C{  public static Intent buildStartInterpreterIntent(String interpreterName){  final ComponentName componentName=Constants.SL4A_SERVICE_LAUNCHER_COMPONENT_NAME;  Intent intent=new Intent();  intent.setComponent(componentName);  intent.setAction(Constants.ACTION_LAUNCH_INTERPRETER);  intent.putExtra(Constants.EXTRA_INTERPRETER_NAME,interpreterName);  return intent;}  }
class C{  public void removeSessionList(String userID){  FSUtils.debug.message("FSSessionManager.removeSessionList: Called ");  userIDSessionListMap.remove(userID.toLowerCase());  if ((agent != null) && agent.isRunning() && (idffSvc != null)) {    idffSvc.setUserIDSessionList((long)userIDSessionListMap.size());  }}  }
class C{  public void concatenate(SIPHeaderList<HDR> other,boolean topFlag) throws IllegalArgumentException {  if (!topFlag) {    this.addAll(other);  } else {    this.addAll(0,other);  }}  }
class C{  public boolean isVisible(){  return popup != null;}  }
class C{  public synchronized void run(){  running=true;  while (running) {    try {      Socket s=ss.accept();      acceptedConnections++;      if (acceptedConnections >= acceptLimit) {        running=false;      }      new Thread(new Worker(s),"additional worker").start();    } catch (    SocketException e) {      log(e.getMessage());      running=false;    }catch (    IOException e) {      log(e.getMessage());    }  }  log("AcceptThread terminated" + this);}  }
class C{  @Override public String toString(){  return getClass().getSimpleName();}  }
class C{  private void sendLDAPMessage(LDAPMessage message){  final ASN1WriterHolder holder=getASN1Writer();  try {    message.write(holder.writer);    holder.buffer.copyTo(saslChannel);    if (logger.isTraceEnabled()) {      logger.trace("LDAPMessage=%s",message);    }    if (keepStats) {      statTracker.updateMessageWritten(message);    }  } catch (  ClosedChannelException e) {    logger.traceException(e);    disconnect(DisconnectReason.IO_ERROR,false,ERR_IO_ERROR_ON_CLIENT_CONNECTION.get(getExceptionMessage(e)));    return;  }catch (  Exception e) {    logger.traceException(e);    disconnect(DisconnectReason.SERVER_ERROR,false,ERR_UNEXPECTED_EXCEPTION_ON_CLIENT_CONNECTION.get(getExceptionMessage(e)));    return;  } finally {    close(holder);  }}  }
class C{  private void initPlatformServiceGlobalSettings() throws SMSException, SSOException {  ServiceSchemaManager scm=new ServiceSchemaManager(ISAuthConstants.PLATFORM_SERVICE_NAME,ssoAuthSession);  updatePlatformServiceGlobals(scm);  new AuthConfigMonitor(scm);}  }
class C{  public Comparator<? super E> comparator(){  return comparator;}  }
class C{  public final void tunnelProxy(HttpHost proxy,boolean secure){  if (proxy == null) {    throw new IllegalArgumentException("Proxy host may not be null.");  }  if (!this.connected) {    throw new IllegalStateException("No tunnel unless connected.");  }  if (this.proxyChain == null) {    throw new IllegalStateException("No proxy tunnel without proxy.");  }  HttpHost[] proxies=new HttpHost[this.proxyChain.length + 1];  System.arraycopy(this.proxyChain,0,proxies,0,this.proxyChain.length);  proxies[proxies.length - 1]=proxy;  this.proxyChain=proxies;  this.secure=secure;}  }
class C{  public void testDelete4() throws SQLException {  DatabaseCreator.fillFKCascadeTable(conn);  statement.execute("DELETE FROM " + DatabaseCreator.PARENT_TABLE + " WHERE id = 3;");}  }
class C{  protected void ensureRowsAreVisible(int beginRow,int endRow){  if (tree != null && beginRow >= 0 && endRow < getRowCount(tree)) {    boolean scrollVert=DefaultLookup.getBoolean(tree,this,"Tree.scrollsHorizontallyAndVertically",false);    if (beginRow == endRow) {      Rectangle scrollBounds=getPathBounds(tree,getPathForRow(tree,beginRow));      if (scrollBounds != null) {        if (!scrollVert) {          scrollBounds.x=tree.getVisibleRect().x;          scrollBounds.width=1;        }        tree.scrollRectToVisible(scrollBounds);      }    } else {      Rectangle beginRect=getPathBounds(tree,getPathForRow(tree,beginRow));      if (beginRect != null) {        Rectangle visRect=tree.getVisibleRect();        Rectangle testRect=beginRect;        int beginY=beginRect.y;        int maxY=beginY + visRect.height;        for (int counter=beginRow + 1; counter <= endRow; counter++) {          testRect=getPathBounds(tree,getPathForRow(tree,counter));          if (testRect == null) {            return;          }          if ((testRect.y + testRect.height) > maxY)           counter=endRow;        }        tree.scrollRectToVisible(new Rectangle(visRect.x,beginY,1,testRect.y + testRect.height - beginY));      }    }  }}  }
class C{  public int stack_depth(){  return max_stack_level;}  }
class C{  public boolean doAccessibleAction(int i){  Action[] actions=JTextComponent.this.getActions();  if (i < 0 || i >= actions.length) {    return false;  }  ActionEvent ae=new ActionEvent(JTextComponent.this,ActionEvent.ACTION_PERFORMED,null,EventQueue.getMostRecentEventTime(),getCurrentEventModifiers());  actions[i].actionPerformed(ae);  return true;}  }
class C{  public double noise(double x,double y,double z,double w,double frequency,double amplitude){  return noise(x,y,z,w,frequency,amplitude,false);}  }
class C{  @Deprecated public boolean removeAttribute(Attribute attribute,List<ByteString> missingValues){  return removeAttribute(attribute,(Collection<ByteString>)missingValues);}  }
class C{  @Override public void onAttachFragment(final Fragment fragment){  super.onAttachFragment(fragment);}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public FramedRoutingAttribute(int routing){  super(OctetUtils.toOctets(AttributeType.FRAMED_ROUTING,routing));  this.routing=routing;}  }
class C{  public EmailFieldParser(String emailField){  this.lexer=new Lexer("charLexer",emailField);}  }
class C{  public boolean contains_plane(String p_net_name){  for (  DsnLayer curr_layer : arr) {    if (!curr_layer.is_signal) {      if (curr_layer.net_names.contains(p_net_name)) {        return true;      }    }  }  return false;}  }
class C{  static void putTarget(int typeRef,TypePath typePath,ByteVector out){switch (typeRef >>> 24) {case 0x00:case 0x01:case 0x16:    out.putShort(typeRef >>> 16);  break;case 0x13:case 0x14:case 0x15:out.putByte(typeRef >>> 24);break;case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:out.putInt(typeRef);break;default :out.put12(typeRef >>> 24,(typeRef & 0xFFFF00) >> 8);break;}if (typePath == null) {out.putByte(0);} else {int length=typePath.b[typePath.offset] * 2 + 1;out.putByteArray(typePath.b,typePath.offset,length);}}  }
class C{  public void testIntValueNegative1(){  byte aBytes[]={12,56,100,-2,-76,-128,45,91,3};  int sign=-1;  int resInt=2144511229;  int aNumber=new BigInteger(sign,aBytes).intValue();  assertTrue(aNumber == resInt);}  }
class C{  public ServerHello(HandshakeIODataStream in,int length) throws IOException {  server_version[0]=(byte)in.read();  server_version[1]=(byte)in.read();  Streams.readFully(in,random);  int size=in.readUint8();  session_id=new byte[size];  in.read(session_id,0,size);  byte b0=(byte)in.read();  byte b1=(byte)in.read();  cipher_suite=CipherSuite.getByCode(b0,b1);  compression_method=(byte)in.read();  this.length=38 + session_id.length;  if (this.length != length) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect ServerHello");  }}  }
class C{  BaseDnRegistry(){  this(false);}  }
class C{  public void logout(Session session) throws SessionException {  if (debug.messageEnabled()) {    debug.message(MessageFormat.format("Remote logout {0}",session.getID().toString()));  }  SessionRequest sreq=new SessionRequest(SessionRequest.Logout,session.getID().toString(),false);  requests.sendRequestWithRetry(session.getSessionServiceURL(),sreq,session);}  }
class C{  public String findMostSpecific(String attributeType){  pos=0;  beg=0;  end=0;  cur=0;  chars=dn.toCharArray();  String attType=nextAT();  if (attType == null) {    return null;  }  while (true) {    String attValue="";    if (pos == length) {      return null;    }switch (chars[pos]) {case '"':      attValue=quotedAV();    break;case '#':  attValue=hexAV();break;case '+':case ',':case ';':break;default :attValue=escapedAV();}if (attributeType.equalsIgnoreCase(attType)) {return attValue;}if (pos >= length) {return null;}if (chars[pos] == ',' || chars[pos] == ';') {} else if (chars[pos] != '+') {throw new IllegalStateException("Malformed DN: " + dn);}pos++;attType=nextAT();if (attType == null) {throw new IllegalStateException("Malformed DN: " + dn);}}}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String subConfigName=getStringOptionValue(IArgument.SUB_CONFIGURATION_NAME);  String realmName=getStringOptionValue(IArgument.REALM_NAME);  String subConfigId=getStringOptionValue(IArgument.SUB_CONFIGURATION_ID);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  List attrValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);  if ((datafile == null) && (attrValues == null)) {    throw new CLIException(getResourceString("missing-attributevalues"),ExitCodes.INCORRECT_OPTION,rc.getSubCommand().getName());  }  int priority=0;  String strPriority=getStringOptionValue(OPTION_PRIORITY);  if ((strPriority != null) && (strPriority.length() > 0)) {    try {      priority=Integer.parseInt(strPriority);    } catch (    NumberFormatException ex) {      throw new CLIException(getResourceString("add-sub-configuration-priority-no-integer"),ExitCodes.INVALID_OPTION_VALUE);    }  }  Map<String,Set<String>> attributeValues=AttributeValues.parse(getCommandManager(),datafile,attrValues);  attributeValues=processFileAttributes(attributeValues);  if ((realmName == null) || (realmName.length() == 0)) {    addSubConfigToRoot(serviceName,subConfigName,subConfigId,attributeValues,priority);  } else {    addSubConfigToRealm(realmName,serviceName,subConfigName,subConfigId,attributeValues,priority);  }}  }
class C{  public int hashCode(){  return x + 37 * y + 43 * w + 47 * h;}  }
class C{  private IdSearchResults searchIdentity(IdType idType,String userTokenID,boolean populate) throws IdRepoException, SSOException {  if (DEBUG.messageEnabled()) {    DEBUG.message("In searchAutehnticatedUser: idType " + idType);    DEBUG.message("In getUserProfile : Search for user " + userTokenID);  }  IdSearchResults searchResults=null;  Set returnSet=mergeSet(aliasAttrNames,USER_ATTRIBUTES);  int maxResults=2;  int maxTime=0;  String pattern;  Map avPairs;  boolean isRecursive=true;  IdSearchControl idsc=new IdSearchControl();  idsc.setRecursive(isRecursive);  idsc.setTimeOut(maxTime);  if (populate) {    idsc.setAllReturnAttributes(true);  } else {    idsc.setReturnAttributes(returnSet);  }  if (DEBUG.messageEnabled()) {    DEBUG.message("alias attr=" + aliasAttrNames + ", attr="+ USER_ATTRIBUTES+ ",merge="+ returnSet);  }  if (DEBUG.messageEnabled()) {    DEBUG.message("Search for Identity " + userTokenID);  }  Set result=Collections.EMPTY_SET;  try {    idsc.setMaxResults(0);    searchResults=amIdRepo.searchIdentities(idType,userTokenID,idsc);    if (searchResults != null) {      result=searchResults.getSearchResults();    }  } catch (  SSOException sso) {    if (DEBUG.messageEnabled()) {      DEBUG.message("SSOException Error searching Identity " + " with username " + sso.getMessage());    }  }catch (  IdRepoException e) {    if (DEBUG.messageEnabled()) {      DEBUG.message("IdRepoException : Error searching " + " Identities with username : " + e.getMessage());    }  }  if (result.isEmpty() && (aliasAttrNames != null) && (!aliasAttrNames.isEmpty())) {    if (DEBUG.messageEnabled()) {      DEBUG.message("No identity found, try Alias attrname.");    }    pattern="*";    avPairs=toAvPairMap(aliasAttrNames,userTokenID);    if (DEBUG.messageEnabled()) {      DEBUG.message("Search for Filter (avPairs) :" + avPairs);      DEBUG.message("userTokenID : " + userTokenID);      DEBUG.message("userDN : " + userDN);      DEBUG.message("idType :" + idType);      DEBUG.message("pattern :" + pattern);      DEBUG.message("isRecursive :" + isRecursive);      DEBUG.message("maxResults :" + maxResults);      DEBUG.message("maxTime :" + maxTime);      DEBUG.message("returnSet :" + returnSet);    }    Set resultAlias=Collections.EMPTY_SET;    try {      idsc.setMaxResults(maxResults);      idsc.setSearchModifiers(IdSearchOpModifier.OR,avPairs);      searchResults=amIdRepo.searchIdentities(idType,pattern,idsc);      if (searchResults != null) {        resultAlias=searchResults.getSearchResults();      }      if ((resultAlias.isEmpty()) && (userDN != null) && (!userDN.equalsIgnoreCase(userTokenID))) {        avPairs=toAvPairMap(aliasAttrNames,userDN);        if (DEBUG.messageEnabled()) {          DEBUG.message("Search for Filter (avPairs) " + "with userDN : " + avPairs);        }        idsc.setMaxResults(maxResults);        idsc.setSearchModifiers(IdSearchOpModifier.OR,avPairs);        searchResults=amIdRepo.searchIdentities(idType,pattern,idsc);      }    } catch (    SSOException sso) {      if (DEBUG.messageEnabled()) {        DEBUG.message("SSOException : Error searching " + "Identities with aliasattrname : " + sso.getMessage());      }    }catch (    IdRepoException e) {      if (DEBUG.messageEnabled()) {        DEBUG.message("IdRepoException : Error searching " + "Identities : " + e.getMessage());      }    }  }  return searchResults;}  }
class C{  static <K,V>boolean checkInvariants(TreeNode<K,V> t){  TreeNode<K,V> tp=t.parent, tl=t.left, tr=t.right, tb=t.prev, tn=(TreeNode<K,V>)t.next;  if (tb != null && tb.next != t)   return false;  if (tn != null && tn.prev != t)   return false;  if (tp != null && t != tp.left && t != tp.right)   return false;  if (tl != null && (tl.parent != t || tl.hash > t.hash))   return false;  if (tr != null && (tr.parent != t || tr.hash < t.hash))   return false;  if (t.red && tl != null && tl.red && tr != null && tr.red)   return false;  if (tl != null && !checkInvariants(tl))   return false;  if (tr != null && !checkInvariants(tr))   return false;  return true;}  }
class C{  public boolean verifySignature(byte[] signature){  if (forSigning) {    throw new IllegalStateException("RSADigestSigner not initialised for verification");  }  byte[] hash=new byte[digest.getDigestSize()];  digest.doFinal(hash,0);  byte[] sig;  byte[] expected;  try {    sig=rsaEngine.processBlock(signature,0,signature.length);    expected=derEncode(hash);  } catch (  Exception e) {    return false;  }  if (sig.length == expected.length) {    return Arrays.constantTimeAreEqual(sig,expected);  } else   if (sig.length == expected.length - 2) {    int sigOffset=sig.length - hash.length - 2;    int expectedOffset=expected.length - hash.length - 2;    expected[1]-=2;    expected[3]-=2;    int nonEqual=0;    for (int i=0; i < hash.length; i++) {      nonEqual|=(sig[sigOffset + i] ^ expected[expectedOffset + i]);    }    for (int i=0; i < sigOffset; i++) {      nonEqual|=(sig[i] ^ expected[i]);    }    return nonEqual == 0;  } else {    return false;  }}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  TestCaseUtils.initializeTestBackend(true);  user1=DN.valueOf("cn=user1,dc=example,dc=com");  user2=DN.valueOf("cn=user2,dc=example,dc=com");  user3=DN.valueOf("cn=user3,dc=example,dc=com");  user4=DN.valueOf("cn=user4,dc=example,dc=com");}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  modifyProperties();  forwardTo();}  }
class C{  @Override public Principal authenticate(String username,String clientDigest,String nonce,String nc,String cnonce,String qop,String realmName,String md5a2){  Principal authenticatedUser=super.authenticate(username,clientDigest,nonce,nc,cnonce,qop,realmName,md5a2);  return filterLockedAccounts(username,authenticatedUser);}  }
class C{  private void endArguments(){  if (argumentStack % 2 != 0) {    buf.append('>');  }  argumentStack/=2;}  }
class C{  private void read(char symbol) throws ParseException {  expect(symbol);  index++;}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  super.beginDisplay(event);  String serverName=(String)getPageSessionAttribute(ServerEditViewBeanBase.PG_ATTR_SERVER_NAME);  ServerSiteModel model=(ServerSiteModel)getModel();  ptModel.setPageTitleText(model.getEditServerPageTitle(serverName));  getProperties();}  }
class C{  public static int showInternalConfirmDialog(Component parentComponent,Object message,String title,int optionType,int messageType,Icon icon){  return showInternalOptionDialog(parentComponent,message,title,optionType,messageType,icon,null,null);}  }
class C{  public ScriptCompiler add(URL classPath){  compiler.add(classPath);  return this;}  }
class C{  public PlaDelTriTriangle position_locate(PlaDelTriCorner p_corner){  if (anchor == null)   return null;  if (anchor.children.isEmpty())   return anchor;  for (  PlaDelTriTriangle curr_child : anchor.children) {    PlaDelTriTriangle result=position_locate_recu(p_corner,curr_child);    if (result != null)     return result;  }  System.out.println("TriangleGraph.position_locate: containing triangle not found");  return null;}  }
class C{  public void cancelCellEditing(){  fireEditingCanceled();}  }
class C{  protected void checkDOMVersion(Hashtable h){  if (null == h)   h=new Hashtable();  final String DOM_LEVEL2_CLASS="org.w3c.dom.Document";  final String DOM_LEVEL2_METHOD="createElementNS";  final String DOM_LEVEL2WD_CLASS="org.w3c.dom.Node";  final String DOM_LEVEL2WD_METHOD="supported";  final String DOM_LEVEL2FD_CLASS="org.w3c.dom.Node";  final String DOM_LEVEL2FD_METHOD="isSupported";  final Class twoStringArgs[]={java.lang.String.class,java.lang.String.class};  try {    Class clazz=ObjectFactory.findProviderClass(DOM_LEVEL2_CLASS,ObjectFactory.findClassLoader(),true);    Method method=clazz.getMethod(DOM_LEVEL2_METHOD,twoStringArgs);    h.put(VERSION + "DOM","2.0");    try {      clazz=ObjectFactory.findProviderClass(DOM_LEVEL2WD_CLASS,ObjectFactory.findClassLoader(),true);      method=clazz.getMethod(DOM_LEVEL2WD_METHOD,twoStringArgs);      h.put(ERROR + VERSION + "DOM.draftlevel","2.0wd");      h.put(ERROR,ERROR_FOUND);    } catch (    Exception e2) {      try {        clazz=ObjectFactory.findProviderClass(DOM_LEVEL2FD_CLASS,ObjectFactory.findClassLoader(),true);        method=clazz.getMethod(DOM_LEVEL2FD_METHOD,twoStringArgs);        h.put(VERSION + "DOM.draftlevel","2.0fd");      } catch (      Exception e3) {        h.put(ERROR + VERSION + "DOM.draftlevel","2.0unknown");        h.put(ERROR,ERROR_FOUND);      }    }  } catch (  Exception e) {    h.put(ERROR + VERSION + "DOM","ERROR attempting to load DOM level 2 class: " + e.toString());    h.put(ERROR,ERROR_FOUND);  }}  }
class C{  public TagField createField(Artwork artwork) throws FieldDataInvalidException {  if (artwork.isLinked()) {    return new MetadataBlockDataPicture(Utils.getDefaultBytes(artwork.getImageUrl(),TextEncoding.CHARSET_ISO_8859_1),artwork.getPictureType(),MetadataBlockDataPicture.IMAGE_IS_URL,"",0,0,0,0);  } else {    if (!artwork.setImageFromData()) {      throw new FieldDataInvalidException("Unable to createField buffered image from the image");    }    return new MetadataBlockDataPicture(artwork.getBinaryData(),artwork.getPictureType(),artwork.getMimeType(),artwork.getDescription(),artwork.getWidth(),artwork.getHeight(),0,0);  }}  }
class C{  public static java.lang.Object narrow(java.lang.Object narrowFrom,java.lang.Class narrowTo) throws ClassCastException {  if (proDelegate != null) {    return proDelegate.narrow(narrowFrom,narrowTo);  }  return null;}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  public void modify(Collection<Modification> modSet){  checkCache();  if (m_modSet == null) {    m_modSet=new HashSet<>();  }  if (m_attrSet == null) {    m_attrSet=new AttrSet();  }  for (  Modification mod : modSet) {switch (mod.getModificationType().intValue()) {case 0:      m_attrSet.add(new Attr(mod.getAttribute()));    break;case 1:  if (mod.getAttribute().size() == 0) {    m_attrSet.remove(mod.getAttribute().getAttributeDescriptionAsString());  } else {    Attribute attr=mod.getAttribute();    for (    ByteString value : attr) {      m_attrSet.remove(attr.getAttributeDescriptionAsString(),value.toString());    }  }break;case 2:m_attrSet.replace(new Attr(mod.getAttribute()));break;default :break;}m_modSet.add(mod);}}  }
class C{  public void cancelAll(){  for (  Future future : runableMap.values()) {    future.cancel(true);  }  runableMap.clear();  shutdown();}  }
class C{  protected Expression mult(int opPos) throws TransformerException {  return compileOperation(new Mult(),opPos);}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.SPSSODescriptorElement createSPSSODescriptorElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.SPSSODescriptorElementImpl();}  }
class C{  public ExtendedOperationConfigManager(ServerContext serverContext){  this.serverContext=serverContext;  handlers=new ConcurrentHashMap<>();}  }
class C{  protected synchronized void open(){  File pathname=getLogFile(rotatable && !renameOnRotate);  Charset charset=null;  if (encoding != null) {    try {      charset=B2CConverter.getCharset(encoding);    } catch (    UnsupportedEncodingException ex) {      log.error(sm.getString("accessLogValve.unsupportedEncoding",encoding),ex);    }  }  if (charset == null) {    charset=StandardCharsets.ISO_8859_1;  }  try {    writer=new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(pathname,true),charset),128000),false);    currentLogFile=pathname;  } catch (  IOException e) {    writer=null;    currentLogFile=null;    log.error(sm.getString("accessLogValve.openFail",pathname),e);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  String attrValue;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(3);  testEmployee.setAttribute("street","Neither");  attrValue=testEmployee.getAttribute("street");  assertEquals("elementChangeAttributeValueAssert","Neither",attrValue);}  }
class C{  public synchronized void removeListeningPoints(){  for (Iterator it=this.listeningPoints.values().iterator(); it.hasNext(); ) {    ListeningPointImpl lp=(ListeningPointImpl)it.next();    lp.messageProcessor.stop();    it.remove();  }}  }
class C{  public void test_lastIndexOfSubList2(){  ArrayList sub=new ArrayList();  sub.add(new Integer(1));  sub.add(new Integer(2));  sub.add(new Integer(3));  ArrayList sub2=new ArrayList();  sub2.add(new Integer(7));  sub2.add(new Integer(8));  ArrayList src=new ArrayList();  src.addAll(sub);  src.addAll(sub);  src.addAll(sub);  src.add(new Integer(5));  src.add(new Integer(6));  Collections.reverse(src);  sub=new ArrayList(src.subList(0,8));  assertEquals("TestA : Returned wrong lastIndexOfSubList, ",0,Collections.lastIndexOfSubList(src,sub));  sub=new ArrayList(src.subList(0,5));  assertEquals("TestB : Returned wrong lastIndexOfSubList, ",0,Collections.lastIndexOfSubList(src,sub));  sub=new ArrayList(src.subList(2,5));  assertEquals("TestC : Returned wrong lastIndexOfSubList, ",8,Collections.lastIndexOfSubList(src,sub));  sub=new ArrayList(src.subList(9,11));  assertEquals("TestD : Returned wrong lastIndexOfSubList, ",9,Collections.lastIndexOfSubList(src,sub));  sub=new ArrayList(src.subList(10,11));  assertEquals("TestE : Returned wrong lastIndexOfSubList, ",10,Collections.lastIndexOfSubList(src,sub));  sub=new ArrayList(src.subList(0,2));  assertEquals("TestF : Returned wrong lastIndexOfSubList, ",0,Collections.lastIndexOfSubList(src,sub));  sub=new ArrayList(src.subList(0,1));  assertEquals("TestG : Returned wrong lastIndexOfSubList, ",0,Collections.lastIndexOfSubList(src,sub));  sub=new ArrayList(src.subList(0,11));  assertEquals("TestH : Returned wrong lastIndexOfSubList, ",0,Collections.lastIndexOfSubList(src,sub));  assertEquals("TestI : Returned wrong lastIndexOfSubList, ",-1,Collections.lastIndexOfSubList(src,sub2));}  }
class C{  public SAMLToken(String primaryKey,String secondaryKey,long expiryTime,Object token){  this.primaryKey=primaryKey;  this.secondaryKey=secondaryKey;  this.expiryTime=expiryTime;  this.token=token;}  }
class C{  public String encode(){  return new StringBuilder().append(TIME_FIELD).append(startTime).append(Separators.SP).append(stopTime).append(Separators.NEWLINE).toString();}  }
class C{  public void testDivideRoundFloorNeg(){  String a="-92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="-1.24390557635720517122423359799284E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_FLOOR);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public static void logDisconnect(ClientConnection clientConnection,DisconnectReason disconnectReason,LocalizableMessage message){  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {    publisher.logDisconnect(clientConnection,disconnectReason,message);  }}  }
class C{  public HandlerList(){  handlerslots=new EnumMap<EventPriority,ArrayList<RegisteredListener>>(EventPriority.class);  for (  EventPriority o : EventPriority.values()) {    handlerslots.put(o,new ArrayList<RegisteredListener>());  }synchronized (allLists) {    allLists.add(this);  }}  }
class C{  public SCPlatformModelImpl(HttpServletRequest req,String serviceName,Map map) throws AMConsoleException {  super(req,serviceName,map);}  }
class C{  private boolean validateAuthnToServices(Set authnToServiceSet) throws PolicyException {  if (authnToServiceSet.isEmpty()) {    String args[]={AUTHENTICATE_TO_SERVICE};    throw new PolicyException(ResBundleUtils.rbName,"property_does_not_allow_empty_values",args,null);  }  authenticateToService=null;  Iterator authnToServiceSetIter=authnToServiceSet.iterator();  try {    authenticateToService=(String)authnToServiceSetIter.next();  } catch (  ClassCastException e) {    String args[]={AUTHENTICATE_TO_SERVICE};    throw new PolicyException(ResBundleUtils.rbName,"property_is_not_a_String",args,null);  }  if (authenticateToService != null) {    String realm=AMAuthUtils.getRealmFromRealmQualifiedData(authenticateToService);    if ((realm == null) || (realm.length() == 0)) {      realmEmpty=true;    }  }  return true;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.EncryptedDataElement createEncryptedDataElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.EncryptedDataElementImpl();}  }
class C{  public static int resetSearchEntryCount(){  return searchEntryCounter.getAndSet(0);}  }
class C{  public char current(){  if (count != 0 && pos < offset + count) {    return array[pos];  }  return DONE;}  }
class C{  void delete(Attribute attr,CSN csn){  AttributeType attrType=attr.getAttributeDescription().getAttributeType();  for (  ByteString val : attr) {    delete(val,attrType,csn);  }}  }
class C{  @Override protected Object clone() throws CloneNotSupportedException {  throw new CloneNotSupportedException();}  }
class C{  public boolean isSuperTypeOf(final AttributeType type){  return type.isSubTypeOf(this);}  }
class C{  private void initH2Console(ServletContext servletContext){  log.debug("Initialize H2 console");  ServletRegistration.Dynamic h2ConsoleServlet=servletContext.addServlet("H2Console",new org.h2.server.web.WebServlet());  h2ConsoleServlet.addMapping("/h2-console/*");  h2ConsoleServlet.setInitParameter("-properties","src/main/resources/");  h2ConsoleServlet.setLoadOnStartup(1);}  }
class C{  @Override public void close() throws SQLException {  if (!isClosedInternal()) {    try {      passivate();    }  finally {      setClosedInternal(true);      pooledConnection.notifyListeners();    }  }}  }
class C{  public static float swapFloat(float value){  return Float.intBitsToFloat(swapInteger(Float.floatToIntBits(value)));}  }
class C{  public void print(char c){  writer.print(c);}  }
class C{  public void preloadIcon(ComponentName componentName,Bitmap icon,int dpi,String label,long userSerial,InvariantDeviceProfile idp){  try {    PackageManager packageManager=mContext.getPackageManager();    packageManager.getActivityIcon(componentName);    return;  } catch (  PackageManager.NameNotFoundException e) {  }  ContentValues values=newContentValues(Bitmap.createScaledBitmap(icon,idp.iconBitmapSize,idp.iconBitmapSize,true),label,Color.TRANSPARENT);  values.put(IconDB.COLUMN_COMPONENT,componentName.flattenToString());  values.put(IconDB.COLUMN_USER,userSerial);  mIconDb.getWritableDatabase().insertWithOnConflict(IconDB.TABLE_NAME,null,values,SQLiteDatabase.CONFLICT_REPLACE);}  }
class C{  void dispatchOnLauncherTransitionStart(View v,boolean animated,boolean toWorkspace){  if (v instanceof LauncherTransitionable) {    ((LauncherTransitionable)v).onLauncherTransitionStart(mLauncher,animated,toWorkspace);  }  dispatchOnLauncherTransitionStep(v,0f);}  }
class C{  public Evaluate_SVM(int dataNum,int dimension,double W[][],String readLabelFile,double limitRandom,int[] TestTrain) throws Exception {  this.dataNums=dataNum;  this.dimensions=dimension;  this.readLabelFiles=readLabelFile;  this.limitRandom=limitRandom;  this.TestTrain=TestTrain;  this.countTestTrain();  vectrain=new Feature[train][dimensions];  vectest=new Feature[test][dimensions];  trainattr=new double[train];  testattr=new double[test];  this.Ws=W;  labels=new int[dataNums];  this.makeSource();}  }
class C{  public void optimizeLineSection(){  int i=0;  while (i < lineData.size() - 1) {    LineInfo li=lineData.get(i);    LineInfo liNext=lineData.get(i + 1);    if (!liNext.lineFileIDSet && liNext.inputStartLine == li.inputStartLine && liNext.inputLineCount == 1 && li.inputLineCount == 1 && liNext.outputStartLine == li.outputStartLine + li.inputLineCount * li.outputLineIncrement) {      li.setOutputLineIncrement(liNext.outputStartLine - li.outputStartLine + liNext.outputLineIncrement);      lineData.remove(i + 1);    } else {      i++;    }  }  i=0;  while (i < lineData.size() - 1) {    LineInfo li=lineData.get(i);    LineInfo liNext=lineData.get(i + 1);    if (!liNext.lineFileIDSet && liNext.inputStartLine == li.inputStartLine + li.inputLineCount && liNext.outputLineIncrement == li.outputLineIncrement && liNext.outputStartLine == li.outputStartLine + li.inputLineCount * li.outputLineIncrement) {      li.setInputLineCount(li.inputLineCount + liNext.inputLineCount);      lineData.remove(i + 1);    } else {      i++;    }  }}  }
class C{  private static Backend<?> initializeMemoryBackend(boolean createBaseEntry,String backendId) throws Exception {  DN baseDN=DN.valueOf("o=" + backendId);  MemoryBackend memoryBackend=(MemoryBackend)DirectoryServer.getBackend(backendId);  if (memoryBackend == null) {    memoryBackend=new MemoryBackend();    memoryBackend.setBackendID(backendId);    memoryBackend.setBaseDNs(baseDN);    memoryBackend.openBackend();    DirectoryServer.registerBackend(memoryBackend);  }  memoryBackend.clearMemoryBackend();  if (createBaseEntry) {    memoryBackend.addEntry(createEntry(baseDN),null);  }  return memoryBackend;}  }
class C{  public void repaint_all(){  work_frame.repaint();  for (  GuiSubWindowSavable cur_subwindow : permanent_subwindows)   cur_subwindow.repaint();}  }
class C{  public ArrayList<PlaPointInt> intersection_points(PlaSegmentInt p_other){  ArrayList<PlaPointInt> risul=new ArrayList<PlaPointInt>(2);  if (!middle.is_parallel(p_other.middle)) {    PlaPointFloat f_intersect=middle.intersection_approx(p_other.middle);    if (f_intersect.is_NaN()) {      Stat.instance.userPrintln("intersection_points: How did this happen ?");      return risul;    }    PlaPointInt i_intersect=f_intersect.round();    risul.add(i_intersect);    return risul;  }  PlaPointInt myi_start=start_point.round();  PlaPointInt myi_end=end_point.round();  PlaPointInt oti_start=p_other.start_point.round();  if (oti_start.is_inside(myi_start,myi_end,0.1))   risul.add(oti_start);  PlaPointInt oti_end=p_other.start_point.round();  if (oti_end.is_inside(myi_start,myi_end,0.1))   risul.add(oti_end);  return risul;}  }
class C{  public HDR remove(int index){  return this.hlist.remove(index);}  }
class C{  public boolean isClientPresent(String clientType){  String dn=generateClientDN(clientType);  boolean exists=false;  try {    AMEntity amEntity=amConnection.getEntity(dn);    exists=amEntity.isExists();  } catch (  SSOException ssoe) {  }  return exists;}  }
class C{  public static IOFileFilter prefixFileFilter(String prefix){  return new PrefixFileFilter(prefix);}  }
class C{  public void mark(){  mark=pos;}  }
class C{  public Builder optionalAttributes(final Collection<String> attributeNamesOrOIDs){  this.optionalAttributeOIDs.addAll(attributeNamesOrOIDs);  return this;}  }
class C{  public void run(){  while (this.isRunning) {    try {synchronized (this) {        while (sipStack.maxConnections != -1 && this.nConnections >= sipStack.maxConnections) {          try {            this.wait();            if (!this.isRunning)             return;          } catch (          InterruptedException ex) {            break;          }        }        this.nConnections++;      }      Socket newsock=sock.accept();      if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {        logger.logDebug("Accepting new connection!");      }      TCPMessageChannel newChannel=new TCPMessageChannel(newsock,sipStack,this,"TCPMessageChannelThread-" + nConnections);      if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))       logger.logDebug(Thread.currentThread() + " adding incoming channel " + newChannel.getKey()+ " for processor "+ getIpAddress()+ ":"+ getPort()+ "/"+ getTransport());      incomingMessageChannels.put(newChannel.getKey(),newChannel);    } catch (    SocketException ex) {      this.isRunning=false;    }catch (    IOException ex) {      if (logger.isLoggingEnabled())       logger.logException(ex);      continue;    }catch (    Exception ex) {      InternalErrorHandler.handleException(ex);    }  }}  }
class C{  @Override protected void doHead(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  boolean serveContent=DispatcherType.INCLUDE.equals(request.getDispatcherType());  serveResource(request,response,serveContent,fileEncoding);}  }
class C{  public static DeleteRequest newDeleteRequest(final String name){  Reject.ifNull(name);  return new DeleteRequestImpl(DN.valueOf(name));}  }
class C{  private static CompareResponseProtocolOp readCompareResponse(ASN1Reader reader) throws LDAPException {  try {    reader.readStartSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  int resultCode;  try {    resultCode=(int)reader.readInteger();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_RESULT_CODE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  DN matchedDN;  try {    String dnString=reader.readOctetStringAsString();    if (dnString.length() == 0) {      matchedDN=null;    } else {      matchedDN=DN.valueOf(dnString);    }  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_MATCHED_DN.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  LocalizableMessage errorMessage;  try {    errorMessage=LocalizableMessage.raw(reader.readOctetStringAsString());    if (errorMessage.length() == 0) {      errorMessage=null;    }  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_ERROR_MESSAGE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  ArrayList<String> referralURLs=null;  try {    if (reader.hasNextElement()) {      reader.readStartSequence();      referralURLs=new ArrayList<>();      while (reader.hasNextElement()) {        referralURLs.add(reader.readOctetStringAsString());      }      reader.readEndSequence();    }  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_REFERRALS.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  try {    reader.readEndSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  return new CompareResponseProtocolOp(resultCode,errorMessage,matchedDN,referralURLs);}  }
class C{  private void alterMaxAge(OAuth2Request req){  final Request request=req.getRequest();  Form query=request.getResourceRef().getQueryAsForm();  Parameter param=query.getFirst(MAX_AGE);  if (param == null) {    param=new Parameter(MAX_AGE,CONFIRMED_MAX_AGE);    query.add(param);  } else {    param.setValue(CONFIRMED_MAX_AGE);  }  request.getResourceRef().setQuery(query.getQueryString());}  }
class C{  public DefaultEntryCache(){  super();  DirectoryServer.registerBackendInitializationListener(this);}  }
class C{  public static boolean compileClass(Class<?> classToCompile){  return false;}  }
class C{  private static void extractAndAddValueUsingIfNotEmpty(final HttpServletRequest request,final Map<String,List<String>> paramsMap,final String parameterName){  String parameterValue=request.getParameter(parameterName);  insertValueUsingIfNotEmpty(paramsMap,parameterValue,parameterName);}  }
class C{  public static void test_callStaticMethod(){  assertSame("blort",Target.blort());}  }
class C{  private static boolean isMoreAbove(String src,int index){  int ch;  int cc;  int len=src.length();  for (int i=index + Character.charCount(src.codePointAt(index)); i < len; i+=Character.charCount(ch)) {    ch=src.codePointAt(i);    cc=Normalizer.getCombiningClass(ch);    if (cc == COMBINING_CLASS_ABOVE) {      return true;    } else     if (cc == 0) {      return false;    }  }  return false;}  }
class C{  private ConditionResult processApproximate(SearchFilter completeFilter,Entry entry) throws DirectoryException {  if (getAttributeType() == null) {    LocalizableMessage message=ERR_SEARCH_FILTER_APPROXIMATE_NO_ATTRIBUTE_TYPE.get(entry.getName(),toString());    throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);  }  if (assertionValue == null) {    LocalizableMessage message=ERR_SEARCH_FILTER_APPROXIMATE_NO_ASSERTION_VALUE.get(entry.getName(),toString(),getAttributeType().getNameOrOID());    throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);  }  Iterable<Attribute> attrs=entry.getAllAttributes(attributeDescription);  if (isEmpty(attrs)) {    if (logger.isTraceEnabled()) {      logger.trace("Returning FALSE for approximate component %s in " + "filter %s because entry %s didn't have attribute " + "type %s",this,completeFilter,entry.getName(),getAttributeType().getNameOrOID());    }    return ConditionResult.FALSE;  }  ConditionResult result=ConditionResult.FALSE;  for (  Attribute a : attrs) {switch (a.approximatelyEqualTo(assertionValue)) {case TRUE:      if (logger.isTraceEnabled()) {        logger.trace("Returning TRUE for approximate component %s in " + "filter %s for entry %s",this,completeFilter,entry.getName());      }    return ConditionResult.TRUE;case FALSE:  break;case UNDEFINED:if (logger.isTraceEnabled()) {  logger.trace("Undefined result encountered for approximate " + "component %s in filter %s for entry %s",this,completeFilter,entry.getName());}result=ConditionResult.UNDEFINED;break;default :}}if (logger.isTraceEnabled()) {logger.trace("Returning %s for approximate component %s in filter " + "%s for entry %s",result,this,completeFilter,entry.getName());}return result;}  }
class C{  boolean equals(FSSessionPartner partner){  if (this.sessionPartner.equals(partner.getPartner()) && (this.isRoleIDP == partner.getIsRoleIDP())) {    return true;  }  return false;}  }
class C{  @DataProvider(name="testSafeDataManyRealRSsProvider") private Object[][] testSafeDataManyRealRSsProvider(){  return new Object[][]{{1},{2},{3},{4}};}  }
class C{  Lookup(Class<?> lookupClass){  this(lookupClass,ALL_MODES);  checkUnprivilegedlookupClass(lookupClass,ALL_MODES);}  }
class C{  private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  ObjectInputStream.GetField fields=s.readFields();  String pathField=(String)fields.get("path",null);  char sep=s.readChar();  if (sep != separatorChar)   pathField=pathField.replace(sep,separatorChar);  String path=fs.normalize(pathField);  UNSAFE.putObject(this,PATH_OFFSET,path);  UNSAFE.putIntVolatile(this,PREFIX_LENGTH_OFFSET,fs.prefixLength(path));}  }
class C{  public void startDocument() throws SAXException {  if (contentHandler != null) {    contentHandler.startDocument();  }}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public void appendProgressHtml(String text){  progressPanel.appendHtml(text);}  }
class C{  public ManagementPermission(String name,String actions) throws IllegalArgumentException {  super(name);  if (!name.equals("control") && !name.equals("monitor")) {    throw new IllegalArgumentException("name: " + name);  }  if (actions != null && actions.length() > 0) {    throw new IllegalArgumentException("actions: " + actions);  }}  }
class C{  @Override public void repaint(){}  }
class C{  @SuppressWarnings({"SuspiciousNameCombination","deprecation"}) public static int calculateMaxBitmapSize(@NonNull Context context){  WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=wm.getDefaultDisplay();  Point size=new Point();  int width, height;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {    display.getSize(size);    width=size.x;    height=size.y;  } else {    width=display.getWidth();    height=display.getHeight();  }  int screenDiagonal=(int)Math.sqrt(Math.pow(width,2) + Math.pow(height,2));  Canvas canvas=new Canvas();  return Math.min(screenDiagonal * 2,Math.min(canvas.getMaximumBitmapWidth(),canvas.getMaximumBitmapHeight()));}  }
class C{  private void removeOldArchiveFilesIfNeeded(File archiveDirectory){  if (maxConfigArchiveSize > 0) {    String[] archivedFileList=archiveDirectory.list();    int numToDelete=archivedFileList.length - maxConfigArchiveSize;    if (numToDelete > 0) {      Set<String> archiveSet=new TreeSet<>();      for (      String name : archivedFileList) {        if (!name.startsWith("config-")) {          continue;        }        archiveSet.add(name);      }      Iterator<String> iterator=archiveSet.iterator();      for (int i=0; i < numToDelete && iterator.hasNext(); i++) {        File archive=new File(archiveDirectory,iterator.next());        try {          archive.delete();        } catch (        Exception e) {        }      }    }  }}  }
class C{  public void paintScrollBarThumbBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){}  }
class C{  private Set intersectIP(Set permitted,Set ips){  Set intersect=new HashSet();  for (Iterator it=ips.iterator(); it.hasNext(); ) {    byte[] ip=ASN1OctetString.getInstance(((GeneralSubtree)it.next()).getBase().getName()).getOctets();    if (permitted == null) {      if (ip != null) {        intersect.add(ip);      }    } else {      Iterator it2=permitted.iterator();      while (it2.hasNext()) {        byte[] _permitted=(byte[])it2.next();        intersect.addAll(intersectIPRange(_permitted,ip));      }    }  }  return intersect;}  }
class C{  public Templater androidBuildToolsVersion(String androidBuildToolsVersion){  this.androidBuildToolsVersion=androidBuildToolsVersion;  return this;}  }
class C{  public EntryMsg(int serverID,int destination,byte[] entryBytes,int startPos,int length,int msgId){  super(serverID,destination);  this.entryByteArray=new byte[length];  System.arraycopy(entryBytes,startPos,this.entryByteArray,0,length);  this.msgId=msgId;}  }
class C{  @Override public void writeRecord(String record){  if (writer != null) {    while (!stopRequested.get()) {      try {        queue.put(record);        break;      } catch (      InterruptedException e) {      }    }  }}  }
class C{  public boolean checkError(){  OutputStream delegate=out;  if (delegate == null) {    return ioError;  }  flush();  return ioError || delegate.checkError();}  }
class C{  protected static String intsToCommaDelimitedString(int[] ints){  if (ints == null) {    return "";  }  StringBuilder result=new StringBuilder();  for (int i=0; i < ints.length; i++) {    result.append(ints[i]);    if (i < (ints.length - 1)) {      result.append(", ");    }  }  return result.toString();}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthDesktopIconUI();}  }
class C{  public static UIComponent findComponentInRoot(String id){  UIComponent component=null;  FacesContext facesContext=FacesContext.getCurrentInstance();  if (facesContext != null) {    UIComponent root=facesContext.getViewRoot();    component=findComponent(root,id);  }  return component;}  }
class C{  private BigInteger bigMultiplyPowerTen(int n){  if (n <= 0)   return this.inflated();  if (intCompact != INFLATED)   return bigTenToThe(n).multiply(intCompact); else   return intVal.multiply(bigTenToThe(n));}  }
class C{  public Map modifyDiscoEntries(String userID,List removes,List inserts){  DiscoEntryHandlerImplUtils.debug.message("in UserDiscoEntryHandler.modifyDiscoEntries");  Map result=new HashMap();  result.put(STATUS_CODE,DiscoConstants.STATUS_FAILED);  Map discoEntries=new HashMap();  DataStoreProvider store=null;  try {    store=DataStoreProviderManager.getInstance().getDataStoreProvider(DISCO);    DiscoEntryHandlerImplUtils.getUserDiscoEntries(store,userID,USER_ATTR_NAME,discoEntries);  } catch (  Exception e) {    DiscoEntryHandlerImplUtils.debug.error("UserDiscoEntryHandler.modifyDiscoEntries: Exception:",e);    return result;  }  if ((removes != null) && !removes.isEmpty()) {    if (DiscoEntryHandlerImplUtils.debug.messageEnabled()) {      DiscoEntryHandlerImplUtils.debug.message("UserDiscoEntryHandler.modifyDiscoEntries: handling " + removes.size() + " removes.");    }    if (!DiscoEntryHandlerImplUtils.handleRemoves(discoEntries,removes)) {      return result;    }  }  Set results=new HashSet();  results.addAll(discoEntries.values());  List newEntryIDs=null;  if ((inserts != null) && (inserts.size() != 0)) {    if (DiscoEntryHandlerImplUtils.debug.messageEnabled()) {      DiscoEntryHandlerImplUtils.debug.message("UserDiscoEntryHandler.modifyDiscoEntries: handling " + inserts.size() + " inserts.");    }    Map insertResults=DiscoEntryHandlerImplUtils.handleInserts(results,inserts);    if (!((String)insertResults.get(STATUS_CODE)).equals(DiscoConstants.STATUS_OK)) {      return result;    }    newEntryIDs=(List)insertResults.get(NEW_ENTRY_IDS);  }  if (!DiscoEntryHandlerImplUtils.setUserDiscoEntries(store,userID,USER_ATTR_NAME,results)) {    DiscoEntryHandlerImplUtils.debug.error("UserDiscoEntryHandler.modifyDiscoEntries: " + "couldn't set DiscoEntries through DiscoEntryHandler.");    return result;  } else {    if (DiscoEntryHandlerImplUtils.debug.messageEnabled()) {      DiscoEntryHandlerImplUtils.debug.message("UserDiscoEntryHandler.modifyDisco" + "Entries: set DiscoEntries through DiscoEntryHandler " + "successfully.");    }    result.put(STATUS_CODE,DiscoConstants.STATUS_OK);    if ((newEntryIDs != null) && (newEntryIDs.size() != 0)) {      result.put(NEW_ENTRY_IDS,newEntryIDs);    }    return result;  }}  }
class C{  private String prepareSecretKey(String secretKey){  secretKey=secretKey.replaceAll("\\s+","");  if ((secretKey.length() % 2) != 0) {    secretKey="0" + secretKey;  }  return secretKey;}  }
class C{  private void parse(KXmlParser parser,DocumentImpl document,Node node,int endToken) throws XmlPullParserException, IOException {  int token=parser.getEventType();  while (token != endToken && token != XmlPullParser.END_DOCUMENT) {    if (token == XmlPullParser.PROCESSING_INSTRUCTION) {      String text=parser.getText();      int dot=text.indexOf(' ');      String target=(dot != -1 ? text.substring(0,dot) : text);      String data=(dot != -1 ? text.substring(dot + 1) : "");      node.appendChild(document.createProcessingInstruction(target,data));    } else     if (token == XmlPullParser.DOCDECL) {      String name=parser.getRootElementName();      String publicId=parser.getPublicId();      String systemId=parser.getSystemId();      document.appendChild(new DocumentTypeImpl(document,name,publicId,systemId));    } else     if (token == XmlPullParser.COMMENT) {      if (!ignoreComments) {        node.appendChild(document.createComment(parser.getText()));      }    } else     if (token == XmlPullParser.IGNORABLE_WHITESPACE) {      if (!ignoreElementContentWhitespace && document != node) {        appendText(document,node,token,parser.getText());      }    } else     if (token == XmlPullParser.TEXT || token == XmlPullParser.CDSECT) {      appendText(document,node,token,parser.getText());    } else     if (token == XmlPullParser.ENTITY_REF) {      String entity=parser.getName();      if (entityResolver != null) {      }      String resolved=resolvePredefinedOrCharacterEntity(entity);      if (resolved != null) {        appendText(document,node,token,resolved);      } else {        node.appendChild(document.createEntityReference(entity));      }    } else     if (token == XmlPullParser.START_TAG) {      if (namespaceAware) {        String namespace=parser.getNamespace();        String name=parser.getName();        String prefix=parser.getPrefix();        if ("".equals(namespace)) {          namespace=null;        }        Element element=document.createElementNS(namespace,name);        element.setPrefix(prefix);        node.appendChild(element);        for (int i=0; i < parser.getAttributeCount(); i++) {          String attrNamespace=parser.getAttributeNamespace(i);          String attrPrefix=parser.getAttributePrefix(i);          String attrName=parser.getAttributeName(i);          String attrValue=parser.getAttributeValue(i);          if ("".equals(attrNamespace)) {            attrNamespace=null;          }          Attr attr=document.createAttributeNS(attrNamespace,attrName);          attr.setPrefix(attrPrefix);          attr.setValue(attrValue);          element.setAttributeNodeNS(attr);        }        token=parser.nextToken();        parse(parser,document,element,XmlPullParser.END_TAG);        parser.require(XmlPullParser.END_TAG,namespace,name);      } else {        String name=parser.getName();        Element element=document.createElement(name);        node.appendChild(element);        for (int i=0; i < parser.getAttributeCount(); i++) {          String attrName=parser.getAttributeName(i);          String attrValue=parser.getAttributeValue(i);          Attr attr=document.createAttribute(attrName);          attr.setValue(attrValue);          element.setAttributeNode(attr);        }        token=parser.nextToken();        parse(parser,document,element,XmlPullParser.END_TAG);        parser.require(XmlPullParser.END_TAG,"",name);      }    }    token=parser.nextToken();  }}  }
class C{  private void sendLoopDetectedResponse(SIPRequest sipRequest,SIPServerTransaction transaction){  SIPResponse sipResponse=sipRequest.createResponse(Response.LOOP_DETECTED);  if (transaction.getState() != TransactionState.TERMINATED) {    ServerHeader serverHeader=MessageFactoryImpl.getDefaultServerHeader();    if (serverHeader != null) {      sipResponse.setHeader(serverHeader);    }    try {      sipStack.addTransactionPendingAck(transaction);      transaction.sendResponse(sipResponse);      transaction.releaseSem();    } catch (    Exception ex) {      logger.logError("Problem sending error response",ex);      transaction.releaseSem();      sipStack.removeTransaction(transaction);    }  }}  }
class C{  public String encodeURL(String url,short encodingScheme,boolean escape,Session session){  return encodeSessionURL(url,encodingScheme,escape,sessionCookies.getCookieName(),session);}  }
class C{  public AffineTransform(AffineTransform Tx){  this.m00=Tx.m00;  this.m10=Tx.m10;  this.m01=Tx.m01;  this.m11=Tx.m11;  this.m02=Tx.m02;  this.m12=Tx.m12;  this.state=Tx.state;  this.type=Tx.type;}  }
class C{  public void removeListener(final FileAlterationListener listener){  if (listener != null) {    while (listeners.remove(listener)) {    }  }}  }
class C{  public String soundex(String str){  if (str == null) {    return null;  }  str=SoundexUtils.clean(str);  if (str.length() == 0) {    return str;  }  char out[]={'0','0','0','0'};  char last, mapped;  int incount=1, count=1;  out[0]=str.charAt(0);  last=getMappingCode(str,0);  while ((incount < str.length()) && (count < out.length)) {    mapped=getMappingCode(str,incount++);    if (mapped != 0) {      if ((mapped != '0') && (mapped != last)) {        out[count++]=mapped;      }      last=mapped;    }  }  return new String(out);}  }
class C{  public Integer checkRoleWriting(Role role,String relationTypeName,Boolean initFlag) throws IllegalArgumentException, RelationTypeNotFoundException {  if (role == null || relationTypeName == null || initFlag == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"checkRoleWriting",new Object[]{role,relationTypeName,initFlag});  RelationType relType=getRelationType(relationTypeName);  String roleName=role.getRoleName();  List<ObjectName> roleValue=role.getRoleValue();  boolean writeChkFlag=true;  if (initFlag.booleanValue()) {    writeChkFlag=false;  }  RoleInfo roleInfo;  try {    roleInfo=relType.getRoleInfo(roleName);  } catch (  RoleInfoNotFoundException exc) {    RELATION_LOGGER.exiting(RelationService.class.getName(),"checkRoleWriting");    return Integer.valueOf(RoleStatus.NO_ROLE_WITH_NAME);  }  Integer result=checkRoleInt(2,roleName,roleValue,roleInfo,writeChkFlag);  RELATION_LOGGER.exiting(RelationService.class.getName(),"checkRoleWriting");  return result;}  }
class C{  public static BooleanArgument usePKCS11KeystoreArgument() throws ArgumentException {  return BooleanArgument.builder("usePkcs11Keystore").description(INFO_ARGUMENT_DESCRIPTION_USE_PKCS11.get()).buildArgument();}  }
class C{  public boolean isAcceptedLicense(){  return acceptedLicense;}  }
class C{  public boolean delete(Long dataTypeID){  if (dataTypeID == null) {    throw new IllegalArgumentException("primary key null.");  }  return database.delete(DATABASE_TABLE,KEY_DATATYPEID + "=" + dataTypeID,null) > 0;}  }
class C{  protected boolean isWhitespace(char ch){  return ((ch == '\t') || Character.isSpaceChar(ch));}  }
class C{  private int initiateSAMLLoginAtIDP(final HttpServletResponse response,final HttpServletRequest request) throws SAML2Exception, AuthLoginException {  final String spEntityID=SPSSOFederate.getSPEntityId(metaAlias);  final IDPSSODescriptorElement idpsso=SPSSOFederate.getIDPSSOForAuthnReq(realm,entityName);  final SPSSODescriptorElement spsso=SPSSOFederate.getSPSSOForAuthnReq(realm,spEntityID);  if (idpsso == null || spsso == null) {    return processError(bundle.getString("samlLocalConfigFailed"),"SAML2 :: initiateSAMLLoginAtIDP() : {}",bundle.getString("samlLocalConfigFailed"));  }  List<SingleSignOnServiceElement> ssoServiceList=idpsso.getSingleSignOnService();  final SingleSignOnServiceElement endPoint=SPSSOFederate.getSingleSignOnServiceEndpoint(ssoServiceList,reqBinding);  if (endPoint == null || StringUtils.isEmpty(endPoint.getLocation())) {    throw new SAML2Exception(SAML2Utils.bundle.getString("ssoServiceNotfound"));  }  if (reqBinding == null) {    SAML2Utils.debug.message("SAML2 :: initiateSAMLLoginAtIDP() reqBinding is null using endpoint  binding: {}",endPoint.getBinding());    reqBinding=endPoint.getBinding();    if (reqBinding == null) {      throw new SAML2Exception(SAML2Utils.bundle.getString("UnableTofindBinding"));    }  }  String ssoURL=endPoint.getLocation();  SAML2Utils.debug.message("SAML2 :: initiateSAMLLoginAtIDP()  ssoURL : {}",ssoURL);  final List extensionsList=SPSSOFederate.getExtensionsList(spEntityID,realm);  final Map<String,Collection<String>> spConfigAttrsMap=SPSSOFederate.getAttrsMapForAuthnReq(realm,spEntityID);  authnRequest=SPSSOFederate.createAuthnRequest(realm,spEntityID,params,spConfigAttrsMap,extensionsList,spsso,idpsso,ssoURL,false);  final AuthnRequestInfo reqInfo=new AuthnRequestInfo(request,response,realm,spEntityID,null,authnRequest,null,params);synchronized (SPCache.requestHash) {    SPCache.requestHash.put(authnRequest.getID(),reqInfo);  }  saveAuthnRequest(authnRequest,reqInfo);  final Callback[] nextCallbacks=getCallback(REDIRECT);  final RedirectCallback redirectCallback=(RedirectCallback)nextCallbacks[0];  setCookiesForRedirects(request,response);  if (SAML2Constants.HTTP_POST.equals(reqBinding)) {    final String postMsg=SPSSOFederate.getPostBindingMsg(idpsso,spsso,spConfigAttrsMap,authnRequest);    configurePostRedirectCallback(postMsg,ssoURL,redirectCallback);  } else {    final String authReqXMLString=authnRequest.toXMLString(true,true);    final String redirectUrl=SPSSOFederate.getRedirect(authReqXMLString,null,ssoURL,idpsso,spsso,spConfigAttrsMap);    configureGetRedirectCallback(redirectUrl,redirectCallback);  }  return REDIRECT;}  }
class C{  public int findHeader(String name,int starting){  for (int i=starting; i < count; i++) {    if (headers[i].getName().equalsIgnoreCase(name)) {      return i;    }  }  return -1;}  }
class C{  public static Object createFormBean(HttpServletRequest request,Class<?> c){  Object bean;  try {    bean=c.newInstance();  } catch (  Exception e) {    return new Object();  }  Method[] ms=c.getMethods();  for (int i=0; i < ms.length; i++) {    String name=ms[i].getName();    if (name.startsWith("set")) {      Class<?>[] cc=ms[i].getParameterTypes();      if (cc.length == 1) {        String type=cc[0].getName();        try {          String prop=Character.toLowerCase(name.charAt(3)) + name.substring(4);          String param=getString(request,prop);          if (param != null && !param.equals("")) {            if (type.equals("java.lang.String")) {              ms[i].invoke(bean,new Object[]{htmlEncode(param)});            } else             if (type.equals("int") || type.equals("java.lang.Integer")) {              ms[i].invoke(bean,new Object[]{new Integer(param)});            } else             if (type.equals("long") || type.equals("java.lang.Long")) {              ms[i].invoke(bean,new Object[]{new Long(param)});            } else             if (type.equals("boolean") || type.equals("java.lang.Boolean")) {              ms[i].invoke(bean,new Object[]{Boolean.valueOf(param)});            } else             if (type.equals("float") || type.equals("java.lang.Float")) {              ms[i].invoke(bean,new Object[]{new Float(param)});            } else             if (type.equals("java.util.Date")) {              Date date=null;              if (param.indexOf(':') != (-1)) {                date=DateUtil.parseDateTime(param);              } else {                date=DateUtil.parseDate(param);              }              if (date != null) {                ms[i].invoke(bean,new Object[]{date});              } else {                System.err.println("WARNING: date is null: " + param);              }            }          }        } catch (        Exception e) {          System.err.println("WARNING: Invoke method " + ms[i].getName() + " failed: "+ e.getMessage());        }      }    }  }  return bean;}  }
class C{  public MuxingAttributeSet(AttributeSet[] attrs){  this.attrs=attrs;}  }
class C{  public static double atan(double a){  return StrictMath.atan(a);}  }
class C{  private void init(){  try (BufferedReader reader=new BufferedReader(new FileReader(PASSWORD_FILE))){    String line=reader.readLine();    while (line != null) {      String tokens[]=line.split(":");      if (tokens.length > 5 && tokens[0].length() > 0 && tokens[5].length() > 0) {        homes.put(tokens[0],tokens[5]);      }      line=reader.readLine();    }  } catch (  Exception e) {    log.warn(sm.getString("passwdUserDatabase.readFail"),e);  }}  }
class C{  public Element toElement() throws AuthnSvcException {  Document doc=null;  try {    doc=XMLUtils.newDocument();  } catch (  Exception ex) {    AuthnSvcUtils.debug.error("SASLResponse:toElement",ex);    throw new AuthnSvcException(ex.getMessage());  }  Element saslRespE=doc.createElementNS(AuthnSvcConstants.NS_AUTHN_SVC,AuthnSvcConstants.PTAG_SASL_RESPONSE);  saslRespE.setAttributeNS(AuthnSvcConstants.NS_XML,AuthnSvcConstants.XMLNS_AUTHN_SVC,AuthnSvcConstants.NS_AUTHN_SVC);  saslRespE.setAttributeNS(AuthnSvcConstants.NS_XML,AuthnSvcConstants.XMLNS_DISCO,DiscoConstants.DISCO_NS);  Element statusE=doc.createElementNS(AuthnSvcConstants.NS_AUTHN_SVC,AuthnSvcConstants.PTAG_STATUS);  statusE.setAttributeNS(null,AuthnSvcConstants.ATTR_CODE,AuthnSvcConstants.PREFIX_AUTHN_SVC + ":" + statusCode);  saslRespE.appendChild(statusE);  if (passwordTransforms != null) {    passwordTransforms.addToParent(saslRespE);  }  if (data != null) {    Element dataE=doc.createElementNS(AuthnSvcConstants.NS_AUTHN_SVC,AuthnSvcConstants.PTAG_DATA);    dataE.appendChild(doc.createTextNode(Base64.encode(data)));    saslRespE.appendChild(dataE);  }  if (resourceOffering != null) {    Document roDoc=XMLUtils.toDOMDocument(resourceOffering.toString(),AuthnSvcUtils.debug);    if (roDoc == null) {      throw new AuthnSvcException("invalidRO");    }    saslRespE.appendChild(doc.importNode(roDoc.getDocumentElement(),true));  }  if (credentials != null && !credentials.isEmpty()) {    Element credentialsE=doc.createElementNS(AuthnSvcConstants.NS_AUTHN_SVC,AuthnSvcConstants.PTAG_CREDENTIALS);    Iterator iter=credentials.iterator();    while (iter.hasNext()) {      credentialsE.appendChild(doc.importNode((Element)iter.next(),true));    }    saslRespE.appendChild(credentialsE);  }  if (serverMechanism != null) {    saslRespE.setAttributeNS(null,AuthnSvcConstants.ATTR_SERVER_MECHANISM,serverMechanism);  }  if (id != null) {    saslRespE.setAttributeNS(null,AuthnSvcConstants.ATTR_id,id);  }  doc.appendChild(saslRespE);  return doc.getDocumentElement();}  }
class C{  public void updateCtm(float a,float b,float c,float d,float e,float f){  updateCtm(new Matrix(a,b,c,d,e,f));}  }
class C{  @KnownFailure("(Ticket 91) Tables apply foreign key constraint. Catalogs not supported") public void test_getCrossReferenceLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_String() throws SQLException {  ResultSet rs=meta.getCrossReference(conn.getCatalog(),null,DatabaseCreator.TEST_TABLE3,conn.getCatalog(),null,DatabaseCreator.TEST_TABLE1);  ResultSetMetaData rsmd=rs.getMetaData();  assertTrue("Rows do not obtained",rs.next());  int col=rsmd.getColumnCount();  assertEquals("Incorrect number of columns",14,col);  String[] columnNames={"PKTABLE_CAT","PKTABLE_SCHEM","PKTABLE_NAME","PKCOLUMN_NAME","FKTABLE_CAT","FKTABLE_SCHEM","FKTABLE_NAME","FKCOLUMN_NAME","KEY_SEQ","UPDATE_RULE","DELETE_RULE","FK_NAME","PK_NAME","DEFERRABILITY"};  for (int c=1; c <= col; ++c) {    assertEquals("Incorrect column name",columnNames[c - 1],rsmd.getColumnName(c));  }  assertEquals("Incorrect primary key table catalog",conn.getCatalog(),rs.getString("PKTABLE_CAT"));  assertEquals("Incorrect primary key table schema","",rs.getString("PKTABLE_SCHEM"));  assertEquals("Incorrect primary key table name",DatabaseCreator.TEST_TABLE3,rs.getString("PKTABLE_NAME"));  assertEquals("Incorrect primary key column name","fkey",rs.getString("PKCOLUMN_NAME"));  assertEquals("Incorrect foreign key table catalog",conn.getCatalog(),rs.getString("FKTABLE_CAT"));  assertEquals("Incorrect foreign key table schema","",rs.getString("FKTABLE_SCHEM"));  assertEquals("Incorrect foreign key table name",DatabaseCreator.TEST_TABLE1,rs.getString("FKTABLE_NAME"));  assertEquals("Incorrect foreign key column name","fk",rs.getString("FKCOLUMN_NAME"));  assertEquals("Incorrect sequence number within foreign key",1,rs.getShort("KEY_SEQ"));  assertEquals("Incorrect update rule value",DatabaseMetaData.importedKeyNoAction,rs.getShort("UPDATE_RULE"));  assertEquals("Incorrect delete rule value",DatabaseMetaData.importedKeyNoAction,rs.getShort("DELETE_RULE"));  assertNull("Incorrect foreign key name",rs.getString("FK_NAME"));  assertNull("Incorrect primary key name",rs.getString("PK_NAME"));  assertEquals("Incorrect deferrability",DatabaseMetaData.importedKeyNotDeferrable,rs.getShort("DEFERRABILITY"));  rs.close();  conn.close();  try {    meta.getCrossReference(conn.getCatalog(),null,DatabaseCreator.TEST_TABLE3,conn.getCatalog(),null,DatabaseCreator.TEST_TABLE1);    fail("SQLException not thrown");  } catch (  SQLException e) {  }  conn.close();  try {    meta.getCrossReference(conn.getCatalog(),null,DatabaseCreator.TEST_TABLE3,conn.getCatalog(),null,DatabaseCreator.TEST_TABLE1);    fail("SQLException not thrown");  } catch (  SQLException e) {  }}  }
class C{  public void checkOverrideAllMethods(STypeDef sTypeDef) throws SyntaxException {  checkOverride(sTypeDef);  if (sTypeDef instanceof SClassDef) {    SClassDef c=(SClassDef)sTypeDef;    if (c.modifiers().contains(SModifier.ABSTRACT))     return;    List<SMethodDef> abstractMethods=new ArrayList<>();    recordAbstractMethodsForOverrideCheck(c,abstractMethods);    for (    SMethodDef m : abstractMethods) {      boolean found=false;      for (      SMethodDef overridden : m.overridden()) {        if (overridden.declaringType().equals(c)) {          found=true;          break;        }      }      if (!found) {        err.SyntaxException(m + " is not overridden in " + c,c.line_col());        return;      }    }  }}  }
class C{  public Policy(PolicyManager pm,Node policyNode) throws InvalidFormatException, InvalidNameException, NameNotFoundException, PolicyException {  if (!policyNode.getNodeName().equalsIgnoreCase(PolicyManager.POLICY_ROOT_NODE)) {    if (PolicyManager.debug.warningEnabled()) {      PolicyManager.debug.warning("invalid policy xml blob given to construct policy");    }    throw (new InvalidFormatException(ResBundleUtils.rbName,"invalid_xml_policy_root_node",null,"",PolicyException.POLICY));  }  policyName=XMLUtils.getNodeAttributeValue(policyNode,PolicyManager.NAME_ATTRIBUTE);  validateName(policyName);  description=XMLUtils.getNodeAttributeValue(policyNode,PolicyManager.DESCRIPTION_ATTRIBUTE);  getModificationInfo(policyNode);  String referralPolicy=XMLUtils.getNodeAttributeValue(policyNode,Policy.REFERRAL_POLICY);  if ((referralPolicy != null) && (referralPolicy.equalsIgnoreCase("true"))) {    this.referralPolicy=true;  }  String active=XMLUtils.getNodeAttributeValue(policyNode,Policy.ACTIVE_FLAG);  if ((active != null) && (active.equalsIgnoreCase("false"))) {    this.active=false;  }  String pri=XMLUtils.getNodeAttributeValue(policyNode,PolicyManager.PRIORITY_ATTRIBUTE);  if (pri != null) {    try {      priority=Integer.parseInt(pri);    } catch (    NumberFormatException nfe) {      PolicyManager.debug.error("Number format exception in " + "determining policy's priority: " + pri,nfe);    }  }  Set ruleNodes=XMLUtils.getChildNodes(policyNode,PolicyManager.POLICY_RULE_NODE);  if (ruleNodes != null) {    Iterator items=ruleNodes.iterator();    while (items.hasNext()) {      Node ruleNode=(Node)items.next();      Rule rule=new Rule(ruleNode);      addRule(rule);    }  }  if (!this.referralPolicy) {    Node subjectsNode=XMLUtils.getChildNode(policyNode,PolicyManager.POLICY_SUBJECTS_NODE);    if (subjectsNode != null) {      users=new Subjects(pm,subjectsNode);    }    Node conditionsNode=XMLUtils.getChildNode(policyNode,PolicyManager.POLICY_CONDITIONS_NODE);    if (conditionsNode != null) {      conditions=new Conditions(pm.getConditionTypeManager(),conditionsNode);    }    Node respProvidersNode=XMLUtils.getChildNode(policyNode,PolicyManager.POLICY_RESP_PROVIDERS_NODE);    if (respProvidersNode != null) {      respProviders=new ResponseProviders(pm.getResponseProviderTypeManager(),respProvidersNode);    }  } else {    Node referralsNode=XMLUtils.getChildNode(policyNode,PolicyManager.POLICY_REFERRALS_NODE);    if (referralsNode != null) {      referrals=new Referrals(pm,referralsNode);    }  }}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.validation.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new JAXPDOMTestDocumentBuilderFactory(null,JAXPDOMTestDocumentBuilderFactory.getConfiguration2());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  for (int i=0; i < m_exprs.length; i++) {    m_exprs[i].fixupVariables(vars,globalsSize);  }}  }
class C{  @Override public PdfFormXObject createFormXObject(Color foreground,PdfDocument document){  return createFormXObject(foreground,DEFAULT_MODULE_SIZE,DEFAULT_MODULE_SIZE,document);}  }
class C{  public void applyDismissing(ViewPropertyAnimator animator,float currValue,float endValue,float velocity,float maxDistance){  AnimatorProperties properties=getDismissingProperties(currValue,endValue,velocity,maxDistance);  animator.setDuration(properties.duration);  animator.setInterpolator(properties.interpolator);}  }
class C{  protected void deployApps(String name){  File appBase=host.getAppBaseFile();  File configBase=host.getConfigBaseFile();  ContextName cn=new ContextName(name,false);  String baseName=cn.getBaseName();  if (deploymentExists(cn.getName())) {    return;  }  File xml=new File(configBase,baseName + ".xml");  if (xml.exists()) {    deployDescriptor(cn,xml);    return;  }  File war=new File(appBase,baseName + ".war");  if (war.exists()) {    deployWAR(cn,war);    return;  }  File dir=new File(appBase,baseName);  if (dir.exists())   deployDirectory(cn,dir);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsse.BinarySecurityTokenType createBinarySecurityTokenType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsse.impl.BinarySecurityTokenTypeImpl();}  }
class C{  public int end(String name){  return groups[getMatchedGroupIndex(name) * 2 + 1];}  }
class C{  protected void mergeIntoWebXml() throws IOException {  File webappBase=new File(uriRoot);  File webXml=new File(webappBase,"WEB-INF/web.xml");  File webXml2=new File(webappBase,"WEB-INF/web2.xml");  String insertStartMarker=Localizer.getMessage("jspc.webinc.insertStart");  String insertEndMarker=Localizer.getMessage("jspc.webinc.insertEnd");  try (BufferedReader reader=new BufferedReader(openWebxmlReader(webXml));BufferedReader fragmentReader=new BufferedReader(openWebxmlReader(new File(webxmlFile)));PrintWriter writer=new PrintWriter(openWebxmlWriter(webXml2))){    boolean inserted=false;    int current=reader.read();    while (current > -1) {      if (current == '<') {        String element=getElement(reader);        if (!inserted && insertBefore.contains(element)) {          writer.println(insertStartMarker);          while (true) {            String line=fragmentReader.readLine();            if (line == null) {              writer.println();              break;            }            writer.println(line);          }          writer.println(insertEndMarker);          writer.println();          writer.write(element);          inserted=true;        } else         if (element.equals(insertStartMarker)) {          while (true) {            current=reader.read();            if (current < 0) {              throw new EOFException();            }            if (current == '<') {              element=getElement(reader);              if (element.equals(insertEndMarker)) {                break;              }            }          }          current=reader.read();          while (current == '\n' || current == '\r') {            current=reader.read();          }          continue;        } else {          writer.write(element);        }      } else {        writer.write(current);      }      current=reader.read();    }  }   try (FileInputStream fis=new FileInputStream(webXml2);FileOutputStream fos=new FileOutputStream(webXml)){    byte buf[]=new byte[512];    while (true) {      int n=fis.read(buf);      if (n < 0) {        break;      }      fos.write(buf,0,n);    }  }   if (!webXml2.delete() && log.isDebugEnabled())   log.debug(Localizer.getMessage("jspc.delete.fail",webXml2.toString()));  if (!(new File(webxmlFile)).delete() && log.isDebugEnabled())   log.debug(Localizer.getMessage("jspc.delete.fail",webxmlFile));}  }
class C{  protected final void fireServiceAdded(Class serviceClass){  BeanContextServiceAvailableEvent bcssae=new BeanContextServiceAvailableEvent(getBeanContextServicesPeer(),serviceClass);  fireServiceAdded(bcssae);}  }
class C{  public void actionPerformed(ActionEvent e){  JEditorPane editor=getEditor(e);  if (editor != null) {    int size=this.size;    if ((e != null) && (e.getSource() == editor)) {      String s=e.getActionCommand();      try {        size=Integer.parseInt(s,10);      } catch (      NumberFormatException nfe) {      }    }    if (size != 0) {      MutableAttributeSet attr=new SimpleAttributeSet();      StyleConstants.setFontSize(attr,size);      setCharacterAttributes(editor,attr,false);    } else {      UIManager.getLookAndFeel().provideErrorFeedback(editor);    }  }}  }
class C{  public void removeToTag(){  parameters.delete(ParameterNames.TO_TAG);}  }
class C{  public void clearRequiredChangeTime(){  logger.trace("Clearing required change time for user %s",userDNString);  this.requiredChangeTime=Long.MIN_VALUE;  clearAttribute(OP_ATTR_PWPOLICY_CHANGED_BY_REQUIRED_TIME);}  }
class C{  public PersistentLicenseLocator(LicenseLocator delegate,LicenseLog log,String username){  if (delegate == null) {    throw new NullPointerException("delegate license locator is null");  }  if (log == null) {    throw new NullPointerException("license log is null");  }  if (username == null) {    throw new NullPointerException("username is null");  }  if (username.trim().isEmpty()) {    throw new IllegalArgumentException("username is empty");  }  this.delegate=delegate;  this.log=log;  this.username=username;}  }
class C{  public final void testGetEncodedString() throws CertificateEncodingException {  CertPath cp1=new MyCertPath(testEncoding);  cp1.getEncoded("MyEncoding");}  }
class C{  public static void calculateAlignedPositions(int allocated,SizeRequirements total,SizeRequirements[] children,int[] offsets,int[] spans){  calculateAlignedPositions(allocated,total,children,offsets,spans,true);}  }
class C{  public void enableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glEnableVertexAttribArray(location);}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.X509DataType.X509IssuerSerial createX509DataTypeX509IssuerSerial() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.X509DataTypeImpl.X509IssuerSerialImpl();}  }
class C{  private static DN makeDNFromServerProperties(Map<ServerProperty,Object> serverProperties) throws ADSContextException {  String serverID=getServerID(serverProperties);  if (serverID != null) {    return makeDNFromServerUniqueId(serverID);  }  String hostname=getHostname(serverProperties);  try {    String ipath=getInstallPath(serverProperties);    return makeDNFromHostnameAndPath(hostname,ipath);  } catch (  ADSContextException ace) {    ServerDescriptor s=ServerDescriptor.createStandalone(serverProperties);    return makeDNFromServerUniqueId(s.getHostPort(true).toString());  }}  }
class C{  void ackReceived(long cseqNumber){  if (this.isAckSeen()) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))     logger.logDebug("Ack already seen for response -- dropping");    return;  }  SIPServerTransaction tr=this.getInviteTransaction();  if (tr != null) {    if (tr.getCSeq() == cseqNumber) {      acquireTimerTaskSem();      try {        if (this.timerTask != null) {          this.getStack().getTimer().cancel(timerTask);          this.timerTask=null;        }      }  finally {        releaseTimerTaskSem();      }      if (this.dialogDeleteTask != null) {        this.getStack().getTimer().cancel(dialogDeleteTask);        this.dialogDeleteTask=null;      }      lastAckReceivedCSeqNumber=Long.valueOf(cseqNumber);      if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {        logger.logDebug("ackReceived for " + ((SIPTransaction)tr).getMethod());        this.ackLine=logger.getLineCount();        this.printDebugInfo();      }      if (this.isBackToBackUserAgent) {        this.releaseAckSem();      }      this.setState(CONFIRMED_STATE);    }  } else {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))     logger.logDebug("tr is null -- not updating the ack state");  }}  }
class C{  public double function_in_y_value_approx(double p_y){  if (line_dir.is_horizontal) {    System.out.println("function_in_y_value_approx: line is horizontal");    return 0;  }  PlaPointFloat p1=point_a.to_float();  PlaPointFloat p2=point_b.to_float();  double dy=p2.v_y - p1.v_y;  double dx=p2.v_x - p1.v_x;  double det=p1.v_x * p2.v_y - p2.v_x * p1.v_y;  double result=(dx * p_y + det) / dy;  return result;}  }
class C{  public void test_checkServerTrusted_02() throws Exception {  X509TrustManagerImpl xtm=new X509TrustManagerImpl();  X509Certificate[] xcert=setInvalid();  try {    xtm.checkServerTrusted(xcert,"SSL");    fail("CertificateException wasn't thrown");  } catch (  CertificateException expected) {  }}  }
class C{  public boolean write_specctra_ses_file(BoardFrame p_board_frame){  String design_file_name=get_name();  String[] file_name_parts=design_file_name.split("\\.",2);  String design_name=file_name_parts[0];{    String output_file_name=design_name + ".ses";    File curr_output_file=new File(get_parent(),output_file_name);    java.io.OutputStream output_stream;    try {      output_stream=new FileOutputStream(curr_output_file);    } catch (    Exception e) {      output_stream=null;    }    if (p_board_frame.board_panel.itera_board.export_specctra_session_file(design_file_name,output_stream)) {      p_board_frame.screen_messages.set_status_message(resources.getString("message_11") + " " + output_file_name+ " "+ resources.getString("message_12"));    } else {      p_board_frame.screen_messages.set_status_message(resources.getString("message_13") + " " + output_file_name+ " "+ resources.getString("message_7"));      return false;    }  }  if (WindowMessage.confirm(resources.getString("confirm"))) {    return write_rules_file(design_name,p_board_frame.board_panel.itera_board);  }  return true;}  }
class C{  void purgeUpTo(final CSN purgeCSN) throws ChangelogException {  if (purgeCSN == null) {    return;  }  final Record<CSN,UpdateMsg> oldestRecord=log.purgeUpTo(purgeCSN);  if (oldestRecord != null) {    csnLimits=new CSNLimits(oldestRecord.getKey(),csnLimits.newestCSN);  }}  }
class C{  public ScenarioBuilder branchOnAppId(String branchName,String id){  String commitId=scenario.getCommits().get(id).name();  try {    git.checkout().setName(branchName).setCreateBranch(true).setStartPoint(commitId).call();  } catch (  Exception ex) {    throw new IllegalStateException("cannot create branch: " + branchName + " on ID "+ commitId,ex);  }  return this;}  }
class C{  public void sizeWidthToFit(){  if (headerRenderer == null) {    return;  }  Component c=headerRenderer.getTableCellRendererComponent(null,getHeaderValue(),false,false,0,0);  setMinWidth(c.getMinimumSize().width);  setMaxWidth(c.getMaximumSize().width);  setPreferredWidth(c.getPreferredSize().width);  setWidth(getPreferredWidth());}  }
class C{  public final void testGetEncoded(){  byte[] encodedKey=new byte[]{(byte)1,(byte)2,(byte)3,(byte)4};  EncodedKeySpec meks=new MyEncodedKeySpec(encodedKey);  byte[] ek=meks.getEncoded();  boolean result=true;  for (int i=0; i < encodedKey.length; i++) {    if (encodedKey[i] != ek[i]) {      result=false;    }  }  assertTrue(result);}  }
class C{  public Enumeration<Permission> elements(){synchronized (this) {    return Collections.enumeration(perms);  }}  }
class C{  public String encode(){  return encode(new StringBuilder()).toString();}  }
class C{  public Dimension minimumLayoutSize(Container parent){  return new Dimension(4,4);}  }
class C{  @Override public Class<?> resolveClass(ObjectStreamClass classDesc) throws ClassNotFoundException, IOException {  String name=classDesc.getName();  try {    return resolveClass(name);  } catch (  ClassNotFoundException e) {    return super.resolveClass(classDesc);  }}  }
class C{  @DataProvider(name="validStatements") public Object[][] valids(){  return new Object[][]{{"1"},{"40"},{"56"},{"128"},{"256"},{"129"}};}  }
class C{  static public String idToDN(String namingAttribute,String name,String[] parentID){  StringBuilder sb=new StringBuilder();  sb.append(namingAttribute).append("=").append(name);  for (int i=0; i < parentID.length; i++) {    if (parentID[i] != null) {      sb.append(",o=").append(parentID[i]);    }  }  return sb.toString();}  }
class C{  public FinderPatternFinder(BitMatrix image){  this(image,null);}  }
class C{  public static void writeAttributeSet(ObjectOutputStream out,AttributeSet a) throws IOException {  int n=a.getAttributeCount();  out.writeInt(n);  Enumeration keys=a.getAttributeNames();  while (keys.hasMoreElements()) {    Object key=keys.nextElement();    if (key instanceof Serializable) {      out.writeObject(key);    } else {      Object ioFmt=freezeKeyMap.get(key);      if (ioFmt == null) {        throw new NotSerializableException(key.getClass().getName() + " is not serializable as a key in an AttributeSet");      }      out.writeObject(ioFmt);    }    Object value=a.getAttribute(key);    Object ioFmt=freezeKeyMap.get(value);    if (value instanceof Serializable) {      out.writeObject((ioFmt != null) ? ioFmt : value);    } else {      if (ioFmt == null) {        throw new NotSerializableException(value.getClass().getName() + " is not serializable as a value in an AttributeSet");      }      out.writeObject(ioFmt);    }  }}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  if (contentHandler != null) {    contentHandler.processingInstruction(target,data);  }}  }
class C{  private boolean doAcquireSharedNanos(int arg,long nanosTimeout) throws InterruptedException {  if (nanosTimeout <= 0L)   return false;  final long deadline=System.nanoTime() + nanosTimeout;  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        int r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          failed=false;          return true;        }      }      nanosTimeout=deadline - System.nanoTime();      if (nanosTimeout <= 0L)       return false;      if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);      if (Thread.interrupted())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  @Override public void progressUpdate(ProgressUpdateEvent ev){synchronized (this) {    ProgressDescriptor desc=createProgressDescriptor(ev);    boolean isLastDescriptor=desc.getProgressStep().isLast();    if (isLastDescriptor) {      lastDescriptor=desc;    }    descriptorToDisplay=desc;  }}  }
class C{  public BasicAttribute(String id,boolean ordered){  attrID=id;  values=new Vector<>();  this.ordered=ordered;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CUSTOMER\"";  db.execSQL(sql);}  }
class C{  private ByteBuffer writeString(CharsetEncoder encoder,String next,int i,int noOfValues) throws CharacterCodingException {  ByteBuffer bb;  if ((i + 1) == noOfValues) {    bb=encoder.encode(CharBuffer.wrap(next));  } else {    if (isNullSeperateMultipleValues()) {      bb=encoder.encode(CharBuffer.wrap(next + '\0'));    } else {      bb=encoder.encode(CharBuffer.wrap(next));    }  }  bb.rewind();  return bb;}  }
class C{  protected MouseDragGestureRecognizer(DragSource ds,Component c,int act){  this(ds,c,act,null);}  }
class C{  public void writeObjectData(ObjectOutputStream stream) throws IOException {  doWriteObject(stream);}  }
class C{  @Override public Foo removeByUUID_G(String uuid,long groupId) throws NoSuchFooException {  Foo foo=findByUUID_G(uuid,groupId);  return remove(foo);}  }
class C{  public void endNonEscaping() throws org.xml.sax.SAXException {  m_disableOutputEscapingStates.pop();}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.SignatureMethodType createSignatureMethodType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.SignatureMethodTypeImpl();}  }
class C{  @Override public void handleMessage(final T message) throws ResourceException {  if (scriptEntry.isActive()) {    Script script=scriptEntry.getScript(ContextUtil.createInternalContext());    try {      script.put(MESSAGE,message);      script.eval();    } catch (    ScriptException e) {      throw new InternalServerErrorException("Failure running script " + script,e);    }  } else {    throw new InternalServerErrorException("Script is not active: " + scriptEntry);  }}  }
class C{  public ValidationEventLocatorImpl(Locator loc){  if (loc == null) {    throw new IllegalArgumentException(Messages.format(Messages.MUST_NOT_BE_NULL,"loc"));  }  this.url=toURL(loc.getSystemId());  this.columnNumber=loc.getColumnNumber();  this.lineNumber=loc.getLineNumber();}  }
class C{  public Observable<Long> inactiveCountObservable(String type){  io.vertx.rx.java.ObservableFuture<Long> handler=io.vertx.rx.java.RxHelper.observableFuture();  inactiveCount(type,handler.toHandler());  return handler;}  }
class C{  private void sendAddMsg(boolean firstBackend,String... fractionalConf) throws Exception {  String entryLdif="dn: " + (firstBackend ? ENTRY_DN : ENTRY_DN2) + "\n"+ "objectClass: top\n"+ "objectClass: person\n"+ "objectClass: organizationalPerson\n";  String classStr="";  if (fractionalConf[0].equalsIgnoreCase("inetOrgPerson") || fractionalConf[0].equalsIgnoreCase("2.16.840.1.113730.3.2.2")) {    classStr="objectClass: " + fractionalConf[0] + "\n";  }  entryLdif+=classStr + "uid: 1\n" + "entryUUID: "+ ENTRY_UUID+ "\n"+ "sn: snValue\n"+ "cn: cnValue\n"+ OPTIONAL_ATTR+ ": "+ OPTIONAL_ATTR+ "Value\n";  boolean first=true;  for (  String fracCfgValue : fractionalConf) {    if (!first) {      entryLdif+=fracCfgValue + ": " + fracCfgValue+ "Value\n";    }    first=false;  }  replicationDomain.publish(newAddMsg(TestCaseUtils.entryFromLdifString(entryLdif),ENTRY_UUID));}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public void checkPermissionToSetProperty(SSOToken clientToken,String key,String value) throws SessionException {  SessionUtils.checkPermissionToSetProperty(clientToken,key,value);}  }
class C{  public AuditEvent auditAccessSuccess(){  long endTime=timeService.now();  long elapsedTime=endTime - startTime;  return accessEvent().forHttpServletRequest(request).timestamp(endTime).transactionId(AuditRequestContext.getTransactionIdValue()).eventName(AM_ACCESS_OUTCOME).component(component).response(SUCCESSFUL,"",elapsedTime,MILLISECONDS).toEvent();}  }
class C{  private void checkEnablingState(){  boolean enableFields=rbReplicated.isSelected() && cbTopologyExists.isSelected();  for (  JTextComponent tf : hmFields.values()) {    tf.setEnabled(enableFields);  }  for (  JLabel l : hmLabels.values()) {    l.setEnabled(enableFields);  }  cbTopologyExists.setEnabled(rbReplicated.isSelected());  getLabel(FieldName.REPLICATION_PORT).setEnabled(rbReplicated.isSelected());  getField(FieldName.REPLICATION_PORT).setEnabled(rbReplicated.isSelected());  cbSecureReplication.setEnabled(rbReplicated.isSelected());}  }
class C{  public boolean isFileHidingEnabled(){  return useFileHiding;}  }
class C{  void declarePrefix(String prefix,String uri){  if (!tablesDirty) {    copyTables();  }  if (declarations == null) {    declarations=new Vector();  }  prefix=prefix.intern();  uri=uri.intern();  if ("".equals(prefix)) {    if ("".equals(uri)) {      defaultNS=null;    } else {      defaultNS=uri;    }  } else {    prefixTable.put(prefix,uri);    uriTable.put(uri,prefix);  }  declarations.addElement(prefix);}  }
class C{  public static Map<String,File> filesInDirectory(String dir,Pattern regex,boolean recursively){  return filesInDirectory(new File(dir),regex,recursively);}  }
class C{  protected TreeModelListener createTreeModelListener(){  return getHandler();}  }
class C{  public ConnectionEvent(PooledConnection con){  super(con);}  }
class C{  public ConnectionParameters adminPassword(String password){  adminPassword=password;  return this;}  }
class C{  public void reset(){  totalInvokes=0;  totalTime=0;}  }
class C{  public void makeImmutable(){  if (mutable) {    if (subjectLocality != null) {      subjectLocality.makeImmutable();    }    if (authnContext != null) {      authnContext.makeImmutable();    }    mutable=false;  }}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  throw new WrongNumberArgsException(XSLMessages.createXPATHMessage("three",null));}  }
class C{  private String convertLineSeparators(String string){  return string.replaceAll(System.lineSeparator()," ");}  }
class C{  public void testCertificates() throws Exception {  Identity i=new IdentityStub("iii");  PublicKeyStub pk1=new PublicKeyStub("kkk","fff",null);  CertificateStub c1=new CertificateStub("fff",null,null,pk1);  CertificateStub c2=new CertificateStub("zzz",null,null,pk1);  i.addCertificate(c1);  i.addCertificate(c2);  java.security.Certificate[] s=i.certificates();  assertEquals(2,s.length);  assertTrue(c1.equals(s[0]) || c2.equals(s[0]));  assertTrue(c1.equals(s[1]) || c2.equals(s[1]));  s[0]=null;  s[1]=null;  s=i.certificates();  assertEquals(2,s.length);  assertTrue(c1.equals(s[0]) || c2.equals(s[0]));  assertTrue(c1.equals(s[1]) || c2.equals(s[1]));}  }
class C{  public static boolean putString(Context context,String key,String value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putString(key,value);  return editor.commit();}  }
class C{  public void stopServer(boolean suppressOutput,boolean noPropertiesFile) throws ApplicationException {  if (suppressOutput && !StandardOutputSuppressor.isSuppressed()) {    StandardOutputSuppressor.suppress();  }  if (suppressOutput && application != null) {    application.setNotifyListeners(false);  }  try {    if (application != null) {      LocalizableMessageBuilder mb=new LocalizableMessageBuilder();      mb.append(application.getFormattedProgress(INFO_PROGRESS_STOPPING.get()));      mb.append(application.getLineBreak());      application.notifyListeners(mb.toMessage());    }    logger.info(LocalizableMessage.raw("stopping server"));    ArrayList<String> argList=new ArrayList<>();    argList.add(Utils.getScriptPath(Utils.getPath(installation.getServerStopCommandFile())));    int size=argList.size();    if (noPropertiesFile) {      size++;    }    String[] args=new String[size];    argList.toArray(args);    if (noPropertiesFile) {      args[argList.size()]="--" + OPTION_LONG_NO_PROP_FILE;    }    ProcessBuilder pb=new ProcessBuilder(args);    Map<String,String> env=pb.environment();    env.put(SetupUtils.OPENDJ_JAVA_HOME,System.getProperty("java.home"));    env.remove(SetupUtils.OPENDJ_JAVA_ARGS);    env.remove("CLASSPATH");    logger.info(LocalizableMessage.raw("Before calling stop-ds.  Is server running? " + installation.getStatus().isServerRunning()));    int stopTries=3;    while (stopTries > 0) {      stopTries--;      logger.info(LocalizableMessage.raw("Launching stop command, stopTries left: " + stopTries));      try {        logger.info(LocalizableMessage.raw("Launching stop command, argList: " + argList));        Process process=pb.start();        BufferedReader err=new BufferedReader(new InputStreamReader(process.getErrorStream()));        BufferedReader out=new BufferedReader(new InputStreamReader(process.getInputStream()));        new StopReader(err,true);        new StopReader(out,false);        int returnValue=process.waitFor();        int clientSideError=org.opends.server.protocols.ldap.LDAPResultCode.CLIENT_SIDE_CONNECT_ERROR;        if (isWindows() && (returnValue == clientSideError || returnValue == 0)) {          int nTries=10;          boolean stopped=false;          for (int i=0; i < nTries && !stopped; i++) {            logger.trace("waiting for server to stop");            try {              Thread.sleep(5000);            } catch (            Exception ex) {            }            stopped=!installation.getStatus().isServerRunning();            logger.info(LocalizableMessage.raw("After calling stop-ds.  Is server running? " + !stopped));            if (stopped) {              break;            }            if (application != null) {              LocalizableMessageBuilder mb=new LocalizableMessageBuilder();              mb.append(application.getFormattedLog(INFO_PROGRESS_SERVER_WAITING_TO_STOP.get()));              mb.append(application.getLineBreak());              application.notifyListeners(mb.toMessage());            }          }          if (!stopped) {            returnValue=-1;          }        }        if (returnValue == clientSideError) {          if (application != null) {            LocalizableMessageBuilder mb=new LocalizableMessageBuilder();            mb.append(application.getLineBreak());            mb.append(application.getFormattedLog(INFO_PROGRESS_SERVER_ALREADY_STOPPED.get()));            mb.append(application.getLineBreak());            application.notifyListeners(mb.toMessage());          }          logger.info(LocalizableMessage.raw("server already stopped"));          break;        } else         if (returnValue != 0) {          if (stopTries <= 0) {            throw new ApplicationException(ReturnCode.STOP_ERROR,INFO_ERROR_STOPPING_SERVER_CODE.get(returnValue),null);          }        } else {          if (application != null) {            application.notifyListeners(application.getFormattedLog(INFO_PROGRESS_SERVER_STOPPED.get()));          }          logger.info(LocalizableMessage.raw("server stopped"));          break;        }      } catch (      Exception e) {        throw new ApplicationException(ReturnCode.STOP_ERROR,getThrowableMsg(INFO_ERROR_STOPPING_SERVER.get(),e),e);      }    }  }  finally {    if (suppressOutput) {      if (StandardOutputSuppressor.isSuppressed()) {        StandardOutputSuppressor.unsuppress();      }      if (application != null) {        application.setNotifyListeners(true);      }    }  }}  }
class C{  public static String insertContent(String original,int position,String content){  return original.substring(0,position) + content + original.substring(position);}  }
class C{  @SuppressLint("Assert") public void reconfigure(SQLiteDatabaseConfiguration configuration){  if (configuration == null) {    throw new IllegalArgumentException("configuration must not be null.");  }synchronized (mLock) {    throwIfClosedLocked();    boolean walModeChanged=((configuration.openFlags ^ mConfiguration.openFlags) & SQLiteDatabase.ENABLE_WRITE_AHEAD_LOGGING) != 0;    if (walModeChanged) {      if (!mAcquiredConnections.isEmpty()) {        throw new IllegalStateException("Write Ahead Logging (WAL) mode cannot " + "be enabled or disabled while there are transactions in " + "progress.  Finish all transactions and release all active "+ "database connections first.");      }      closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked();      assert mAvailableNonPrimaryConnections.isEmpty();    }    boolean foreignKeyModeChanged=configuration.foreignKeyConstraintsEnabled != mConfiguration.foreignKeyConstraintsEnabled;    if (foreignKeyModeChanged) {      if (!mAcquiredConnections.isEmpty()) {        throw new IllegalStateException("Foreign Key Constraints cannot " + "be enabled or disabled while there are transactions in " + "progress.  Finish all transactions and release all active "+ "database connections first.");      }    }    if (mConfiguration.openFlags != configuration.openFlags) {      if (walModeChanged) {        closeAvailableConnectionsAndLogExceptionsLocked();      }      SQLiteConnection newPrimaryConnection=openConnectionLocked(configuration,true);      closeAvailableConnectionsAndLogExceptionsLocked();      discardAcquiredConnectionsLocked();      mAvailablePrimaryConnection=newPrimaryConnection;      mConfiguration.updateParametersFrom(configuration);      setMaxConnectionPoolSizeLocked();    } else {      mConfiguration.updateParametersFrom(configuration);      setMaxConnectionPoolSizeLocked();      closeExcessConnectionsAndLogExceptionsLocked();      reconfigureAllConnectionsLocked();    }    wakeConnectionWaitersLocked();  }}  }
class C{  public static PreReadRequestControl newControl(final boolean isCritical,final String... attributes){  Reject.ifNull((Object)attributes);  if (attributes.length == 0) {    return isCritical ? CRITICAL_EMPTY_INSTANCE : NONCRITICAL_EMPTY_INSTANCE;  } else   if (attributes.length == 1) {    return new PreReadRequestControl(isCritical,singletonList(attributes[0]));  } else {    return new PreReadRequestControl(isCritical,unmodifiableList(new ArrayList<String>(asList(attributes))));  }}  }
class C{  @Override public void initializeForBranch(TemplateFile templateFile,Branch branch,String[] arguments,int lineNumber,List<LocalizableMessage> warnings) throws InitializationException {  initializeInternal(templateFile,arguments,lineNumber);}  }
class C{  @Override public void reset() throws IOException {  fInputStream.reset();}  }
class C{  public static void convertToBinary(File in,File out) throws IOException, ParserConfigurationException, ParseException, SAXException, PropertyListFormatException {  NSObject root=parse(in);  saveAsBinary(root,out);}  }
class C{  public final void writeBytes(String str) throws IOException {  byte[] bytes=new byte[str.length()];  for (int index=0; index < str.length(); index++) {    bytes[index]=(byte)(str.charAt(index) & 0xFF);  }  write(bytes);}  }
class C{  public String current_member_name() throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("current_member_name",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    return $self.current_member_name();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  static MatchingRuleImpl collationLessThanMatchingRule(Locale locale){  return new CollationLessThanMatchingRuleImpl(locale);}  }
class C{  public void addIfNotNull(String attrName,Object attrValue){  if (attrValue != null) {    add(attrName,attrValue);  }}  }
class C{  @Override public Foo[] findByUuid_PrevAndNext(long fooId,String uuid,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=findByPrimaryKey(fooId);  Session session=null;  try {    session=openSession();    Foo[] array=new FooImpl[3];    array[0]=getByUuid_PrevAndNext(session,foo,uuid,orderByComparator,true);    array[1]=foo;    array[2]=getByUuid_PrevAndNext(session,foo,uuid,orderByComparator,false);    return array;  } catch (  Exception e) {    throw processException(e);  } finally {    closeSession(session);  }}  }
class C{  public static ValidatingUnmarshaller create(Grammar grammar,SAXUnmarshallerHandler _core,Locator locator){  Verifier v=new Verifier(new REDocumentDeclaration(grammar),new ErrorHandlerAdaptor(_core,locator));  v.setPanicMode(true);  return new ValidatingUnmarshaller(new VerifierFilter(v),_core);}  }
class C{  public void close(boolean removeSocket,boolean stopKeepAliveTask){  isRunning=false;  if (mySock != null) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))     logger.logDebug("Closing socket " + key);    try {      mySock.close();    } catch (    IOException ex) {      if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))       logger.logDebug("Error closing socket " + ex);    }  }  if (myParser != null) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))     logger.logDebug("Closing my parser " + myParser);    myParser.close();  }  if (removeSocket) {    String ioHandlerKey=key.substring(4);    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))     logger.logDebug("Closing TLS socket " + ioHandlerKey);    sipStack.ioHandler.removeSocket(ioHandlerKey);    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("Closing message Channel (key = " + key + ")"+ this);    }  } else {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      String ioHandlerKey=key.substring(4);      logger.logDebug("not removing socket key from the cached map since it has already been updated by the iohandler.sendBytes " + ioHandlerKey);    }  }  if (stopKeepAliveTask) {    cancelPingKeepAliveTimeoutTaskIfStarted();  }}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  populateValues=true;  forwardTo();}  }
class C{  @Before public void registerIdlingResource(){  Espresso.registerIdlingResources(mAddTaskIntentsTestRule.getActivity().getCountingIdlingResource());}  }
class C{  public void test_setDoubleLjava_lang_ObjectD() throws Exception {  TestField x=new TestField();  Field f=null;  double val=0.0;  try {    f=x.getClass().getDeclaredField("doubleField");    f.setDouble(x,Double.MIN_VALUE);    val=f.getDouble(x);  } catch (  Exception e) {    fail("Exception during setDouble test: " + e.toString());  }  assertEquals("Returned incorrect double field value",Double.MIN_VALUE,val);  boolean thrown=false;  try {    f=x.getClass().getDeclaredField("booleanField");    f.setDouble(x,Double.MIN_VALUE);    fail("Accessed field of invalid type");  } catch (  IllegalArgumentException ex) {    thrown=true;  }  assertTrue("IllegalArgumentException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("doublePFField");    assertFalse(f.isAccessible());    f.setDouble(x,Double.MIN_VALUE);    fail("Accessed inaccessible field");  } catch (  IllegalAccessException ex) {    thrown=true;  }  assertTrue("IllegalAccessException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("doubleField");    f.setDouble(null,Double.MIN_VALUE);    fail("NullPointerException expected but not thrown");  } catch (  NullPointerException ex) {    thrown=true;  }catch (  Exception ex) {    fail("NullPointerException expected but not thrown");  }  assertTrue("NullPointerException expected but not thrown",thrown);  f=x.getClass().getDeclaredField("doubleSField");  f.setDouble(null,Double.MIN_VALUE);  val=f.getDouble(x);  assertEquals("Returned incorrect double field value",Double.MIN_VALUE,val);}  }
class C{  private ChronoLocalDate ofWeekBasedYear(Chronology chrono,int yowby,int wowby,int dow){  ChronoLocalDate date=chrono.date(yowby,1,1);  int ldow=localizedDayOfWeek(date);  int offset=startOfWeekOffset(1,ldow);  int yearLen=date.lengthOfYear();  int newYearWeek=computeWeek(offset,yearLen + weekDef.getMinimalDaysInFirstWeek());  wowby=Math.min(wowby,newYearWeek - 1);  int days=-offset + (dow - 1) + (wowby - 1) * 7;  return date.plus(days,DAYS);}  }
class C{  protected void prepareSortKeyStatements(SQLBuilder builder,List<SortKey> sortKeys,Map<String,Object> replacementTokens){  if (sortKeys == null) {    return;  }  for (int i=0; i < sortKeys.size(); i++) {    final SortKey sortKey=sortKeys.get(i);    final String tokenName="sortKey" + i;    final String tableAlias="orderby" + i;    builder.join("${_dbSchema}.${_propTable}",tableAlias).on(where(tableAlias + ".${_mainTable}_id = obj.id").and(tableAlias + ".propkey = ${" + tokenName+ "}")).orderBy(tableAlias + ".propvalue",sortKey.isAscendingOrder());    replacementTokens.put(tokenName,sortKey.getField().toString());  }}  }
class C{  void paintLayeredHighlights(Graphics g,int p0,int p1,Shape viewBounds,JTextComponent editor,View view){  int start=getStartOffset();  int end=getEndOffset();  p0=Math.max(start,p0);  p1=Math.min(end,p1);  union(((LayeredHighlighter.LayerPainter)painter).paintLayer(g,p0,p1,viewBounds,editor,view));}  }
class C{  private static ErrorPage findErrorPage(Context context,Throwable exception){  if (exception == null) {    return (null);  }  Class<?> clazz=exception.getClass();  String name=clazz.getName();  while (!Object.class.equals(clazz)) {    ErrorPage errorPage=context.findErrorPage(name);    if (errorPage != null) {      return (errorPage);    }    clazz=clazz.getSuperclass();    if (clazz == null) {      break;    }    name=clazz.getName();  }  return (null);}  }
class C{  public boolean isReplicationSecure(){  return isReplicationServer() && Boolean.TRUE.equals(serverProperties.get(ServerProperty.IS_REPLICATION_SECURE));}  }
class C{  @Bean public Docket swaggerSpringfoxDocket(JHipsterProperties jHipsterProperties){  log.debug("Starting Swagger");  StopWatch watch=new StopWatch();  watch.start();  Contact contact=new Contact(jHipsterProperties.getSwagger().getContactName(),jHipsterProperties.getSwagger().getContactUrl(),jHipsterProperties.getSwagger().getContactEmail());  ApiInfo apiInfo=new ApiInfo(jHipsterProperties.getSwagger().getTitle(),jHipsterProperties.getSwagger().getDescription(),jHipsterProperties.getSwagger().getVersion(),jHipsterProperties.getSwagger().getTermsOfServiceUrl(),contact,jHipsterProperties.getSwagger().getLicense(),jHipsterProperties.getSwagger().getLicenseUrl());  Docket docket=new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo).forCodeGeneration(true).genericModelSubstitutes(ResponseEntity.class).ignoredParameterTypes(java.sql.Date.class).directModelSubstitute(java.time.LocalDate.class,java.sql.Date.class).directModelSubstitute(java.time.ZonedDateTime.class,Date.class).directModelSubstitute(java.time.LocalDateTime.class,Date.class).select().paths(regex(DEFAULT_INCLUDE_PATTERN)).build();  watch.stop();  log.debug("Started Swagger in {} ms",watch.getTotalTimeMillis());  return docket;}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  OpenCamera theCamera=camera;  if (theCamera == null) {    theCamera=OpenCameraInterface.open(requestedCameraId);    if (theCamera == null) {      throw new IOException("Camera.open() failed to return object from driver");    }    camera=theCamera;  }  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);    if (requestedFramingRectWidth > 0 && requestedFramingRectHeight > 0) {      setManualFramingRect(requestedFramingRectWidth,requestedFramingRectHeight);      requestedFramingRectWidth=0;      requestedFramingRectHeight=0;    }  }  Camera cameraObject=theCamera.getCamera();  Camera.Parameters parameters=cameraObject.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=cameraObject.getParameters();      parameters.unflatten(parametersFlattened);      try {        cameraObject.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }  cameraObject.setPreviewDisplay(holder);}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  @Override public void addModification(Modification modification) throws DirectoryException {  modifiedEntry.applyModification(modification,permissiveModify);  super.addModification(modification);}  }
class C{  public void outputNextPrompt(){  if (currentPrompt == null) {    abandon(new ConversationAbandonedEvent(this));  } else {    context.getForWhom().sendRawMessage(prefix.getPrefix(context) + currentPrompt.getPromptText(context));    if (!currentPrompt.blocksForInput(context)) {      currentPrompt=currentPrompt.acceptInput(context,null);      outputNextPrompt();    }  }}  }
class C{  @Override public void initializeForTemplate(TemplateFile templateFile,Template template,String[] arguments,int lineNumber,List<LocalizableMessage> warnings) throws InitializationException {  if (arguments.length != 1) {    LocalizableMessage message=ERR_MAKELDIF_TAG_INVALID_ARGUMENT_COUNT.get(getName(),lineNumber,1,arguments.length);    throw new InitializationException(message);  }  text=arguments[0];}  }
class C{  private int findIndex(Object key,Object[] array){  int length=array.length;  int index=getModuloHash(key,length);  int last=(index + length - 2) % length;  while (index != last) {    if (array[index] == key || (array[index] == null)) {      break;    }    index=(index + 2) % length;  }  return index;}  }
class C{  FilePreferencesImpl(boolean userNode){  super(null,"");  this.userNode=userNode;  path=userNode ? USER_HOME : SYSTEM_HOME;  initPrefs();}  }
class C{  public void testGetPrefix1() throws Throwable {  Document doc;  Node createdNode;  String prefix;  doc=(Document)load("staffNS",builder);  createdNode=doc.createElement("test:employee");  prefix=createdNode.getPrefix();  assertNull("throw_Null",prefix);}  }
class C{  public synchronized boolean readRequestImmediate(){  if (currentWriters == 0 && writerLocks.size() == 0) {    ++currentReaders;    return true;  }  return false;}  }
class C{  public void visitCode(){  if (mv != null) {    mv.visitCode();  }}  }
class C{  private void disable_redo(){  if (!redo_possible)   return;  redo_possible=false;  for (int i=deleted_objects_stack.size() - 1; i >= stack_level; --i) {    deleted_objects_stack.remove(i);  }  Iterator<UndoObjectNode> it=objects_map.values().iterator();  while (it.hasNext()) {    UndoObjectNode curr_node=it.next();    if (curr_node.undo_level > stack_level) {      it.remove();    } else     if (curr_node.undo_level == stack_level) {      curr_node.redo_object=null;    }  }}  }
class C{  public ID3v24Frame(AbstractID3v2Frame frame) throws InvalidFrameException {  if ((frame instanceof ID3v24Frame)) {    throw new UnsupportedOperationException("Copy Constructor not called. Please type cast the argument");  }  if (frame instanceof ID3v23Frame) {    statusFlags=new StatusFlags((ID3v23Frame.StatusFlags)frame.getStatusFlags());    encodingFlags=new EncodingFlags(frame.getEncodingFlags().getFlags());  } else {    statusFlags=new StatusFlags();    encodingFlags=new EncodingFlags();  }  if (frame instanceof ID3v23Frame) {    createV24FrameFromV23Frame((ID3v23Frame)frame);  } else   if (frame instanceof ID3v22Frame) {    ID3v23Frame v23Frame=new ID3v23Frame(frame);    createV24FrameFromV23Frame(v23Frame);  }  this.frameBody.setHeader(this);}  }
class C{  protected void PathExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  int filterExprMatch=FilterExpr();  if (filterExprMatch != FILTER_MATCH_FAILED) {    boolean locationPathStarted=(filterExprMatch == FILTER_MATCH_PREDICATES);    if (tokenIs('/')) {      nextToken();      if (!locationPathStarted) {        insertOp(opPos,2,OpCodes.OP_LOCATIONPATH);        locationPathStarted=true;      }      if (!RelativeLocationPath()) {        error(XPATHErrorResources.ER_EXPECTED_REL_LOC_PATH,null);      }    }    if (locationPathStarted) {      m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.ENDOP);      m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);      m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);    }  } else {    LocationPath();  }}  }
class C{  private NSArray parseArray() throws ParseException {  skip();  skipWhitespacesAndComments();  List<NSObject> objects=new LinkedList<NSObject>();  while (!accept(ARRAY_END_TOKEN)) {    objects.add(parseObject());    skipWhitespacesAndComments();    if (accept(ARRAY_ITEM_DELIMITER_TOKEN)) {      skip();    } else {      break;    }    skipWhitespacesAndComments();  }  read(ARRAY_END_TOKEN);  return new NSArray(objects.toArray(new NSObject[objects.size()]));}  }
class C{  private int moveComponents(Container target,int x,int y,int width,int height,int rowStart,int rowEnd,boolean ltr,boolean useBaseline,int[] ascent,int[] descent){switch (newAlign) {case LEFT:    x+=ltr ? 0 : width;  break;case CENTER:x+=width / 2;break;case RIGHT:x+=ltr ? width : 0;break;case LEADING:break;case TRAILING:x+=width;break;}int maxAscent=0;int nonbaselineHeight=0;int baselineOffset=0;if (useBaseline) {int maxDescent=0;for (int i=rowStart; i < rowEnd; i++) {Component m=target.getComponent(i);if (m.visible) {if (ascent[i] >= 0) {maxAscent=Math.max(maxAscent,ascent[i]);maxDescent=Math.max(maxDescent,descent[i]);} else {nonbaselineHeight=Math.max(m.getHeight(),nonbaselineHeight);}}}height=Math.max(maxAscent + maxDescent,nonbaselineHeight);baselineOffset=(height - maxAscent - maxDescent) / 2;}for (int i=rowStart; i < rowEnd; i++) {Component m=target.getComponent(i);if (m.isVisible()) {int cy;if (useBaseline && ascent[i] >= 0) {cy=y + baselineOffset + maxAscent - ascent[i];} else {cy=y + (height - m.height) / 2;}if (ltr) {m.setLocation(x,cy);} else {m.setLocation(target.width - x - m.width,cy);}x+=m.width + hgap;}}return height;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthDesktopPaneUI();}  }
class C{  private static void writeFileHeaderComments(final File file,final LDIFEntryWriter writer) throws IOException {  try (BufferedReader br=new BufferedReader(new FileReader(file))){    String comment=br.readLine();    while (comment != null && comment.startsWith("#")) {      writer.writeComment(comment.replaceAll("# ","").replaceAll("#",""));      comment=br.readLine();    }  } catch (  IOException ex) {    throw ex;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddress;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testAddress=(Element)elementList.item(0);{    boolean success=false;    try {      testAddress.setAttribute("","value");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  public void throwException(){  mv.visitInsn(Opcodes.ATHROW);}  }
class C{  private void checkBoundedTypeParameter(Method method){  TypeVariable<Method> typeParameter=getTypeParameter(method);  assertEquals("T",typeParameter.getName());  assertEquals(method,typeParameter.getGenericDeclaration());  Type[] bounds=typeParameter.getBounds();  assertLenghtOne(bounds);  Type bound=bounds[0];  assertEquals(BoundedWildcardsGenericMethods.class,bound);}  }
class C{  public void testGetIssuerDN(){  if (this.cert == null) {    Logger.global.warning("testGetIssuerDN: error in test setup.");  }  assertEquals("The issuer DN is not correct.",tbt_cert.getIssuerDN(),cert.getIssuerDN());}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws IOException {  s.writeObject(thisX500Name.getEncodedInternal());}  }
class C{  public final void clear(){  m_index=-1;}  }
class C{  public boolean hasGrParam(){  return uriParms.getNameValue(GRUU) != null;}  }
class C{  public static int readUint16(DataInput di) throws IOException {  final byte[] buf={0x00,0x00,0x00,0x00};  di.readFully(buf,2,2);  final int i=ByteBuffer.wrap(buf).getInt();  return i;}  }
class C{  @Override public boolean hasNextElement() throws IOException {  return reader.hasNextElement();}  }
class C{  @Inject public CTSWorkerInit(CTSWorkerTaskProvider workerTaskProvider,ThreadMonitor monitor,CoreTokenConfig config,@Named(CoreTokenConstants.CTS_SCHEDULED_SERVICE) ScheduledExecutorService scheduledService,@Named(CoreTokenConstants.CTS_DEBUG) Debug debug){  this.workers=workerTaskProvider.getTasks();  this.monitor=monitor;  this.config=config;  this.scheduledService=scheduledService;  this.debug=debug;}  }
class C{  public AMTableTiledView(View parent,CCActionTableModel model,String name){  super(parent,name);  this.model=model;  registerChildren();  setPrimaryModel(model);}  }
class C{  public <T>Dispatch<T> createDispatch(QName portName,Class<T> type,Mode mode){  return delegate.createDispatch(portName,type,mode);}  }
class C{  public LDIFException(LocalizableMessage message,Throwable cause){  super(message,cause);  lineNumber=-1;  canContinueReading=true;}  }
class C{  @SuppressWarnings("unused") static <K,V>ReplayPromise<Map<K,V>> replayPromiseMap(Class<K> keyType,Class<V> valueType,final Duration timeout,final long time){  return new ReplayPromiseImpl<>(timeout,time);}  }
class C{  public static void cleanDirectory(File directory) throws IOException {  if (!directory.exists()) {    String message=directory + " does not exist";    throw new IllegalArgumentException(message);  }  if (!directory.isDirectory()) {    String message=directory + " is not a directory";    throw new IllegalArgumentException(message);  }  File[] files=directory.listFiles();  if (files == null) {    throw new IOException("Failed to list contents of " + directory);  }  IOException exception=null;  for (  File file : files) {    try {      forceDelete(file);    } catch (    IOException ioe) {      exception=ioe;    }  }  if (null != exception) {    throw exception;  }}  }
class C{  public boolean stopCellEditing(){  fireEditingStopped();  return true;}  }
class C{  void cancelEvent(){  notify.set(false);}  }
class C{  @Override public void close(){  closed=true;  ioException=null;}  }
class C{  public void _write(OutputStream output){  output.write_TypeCode(value);}  }
class C{  ReplicationMonitor(ReplicationDomain domain){  this.domain=domain;}  }
class C{  public OneTimeUse createOneTimeUse(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ONE_TIME_USE,xml);  if (obj == null) {    return new OneTimeUseImpl(xml);  } else {    return (OneTimeUse)obj;  }}  }
class C{  public CutAction(){  super(cutAction);}  }
class C{  protected EncryptionChunkReader(){}  }
class C{  public void resetStats(MetricReference metricReference){  TImeMetricInfo info=metricStatisticsMap.get(metricReference);  info.totalTime=new Long(0);  info.numberOfEvents=new Long(0);  info.averageTime=new Long(1);  info.lastLoggedEventTime=new Long(0);}  }
class C{  public void load(String aURL){synchronized (digester) {    File aRegistryFile=serverFile(aURL);    try {      registry=(StoreRegistry)digester.parse(aRegistryFile);      registryResource=aRegistryFile.toURI().toURL();    } catch (    IOException e) {      log.error(e);    }catch (    SAXException e) {      log.error(e);    }  }}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthToolTipUI();}  }
class C{  public static Set servicesAssignedByDefault(){  if (!loadedAuthServices) {    AuthenticationServiceNameProvider provider=AuthenticationServiceNameProviderFactory.getProvider();    defaultServicesToLoad.addAll(provider.getAuthenticationServiceNames());    if (debug.messageEnabled()) {      debug.message("ServiceManager::servicesAssignedByDefault:" + "defaultServicesToLoad = " + defaultServicesToLoad);    }    loadedAuthServices=true;    defaultServicesToLoad=Collections.unmodifiableSet(defaultServicesToLoad);  }  return (defaultServicesToLoad);}  }
class C{  public SQLRecoverableException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  protected void increment(){  indentation++;}  }
class C{  public void paintSliderTrackBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public int hashCode(){  return hashCode;}  }
class C{  public boolean isAuthorized(Object credential){  return true;}  }
class C{  public void updateEntityConfig(String realm,String name,String entityId) throws WSFederationMetaException, JAXBException {  String classMethod="WSFederationCOTUtils.updateEntityConfig: ";  WSFederationMetaManager metaManager=null;  if (callerSession != null) {    metaManager=new WSFederationMetaManager(callerSession);  } else {    metaManager=new WSFederationMetaManager();  }  ObjectFactory objFactory=new ObjectFactory();  FederationElement edes=metaManager.getEntityDescriptor(realm,entityId);  if (edes == null) {    debug.error(classMethod + "No such entity: " + entityId);    String[] data={realm,entityId};    throw new WSFederationMetaException("entityid_invalid",data);  }  FederationConfigElement eConfig=metaManager.getEntityConfig(realm,entityId);  if (eConfig == null) {    BaseConfigType bctype=null;    AttributeType atype=objFactory.createAttributeType();    atype.setName(SAML2Constants.COT_LIST);    atype.getValue().add(name);    FederationConfigElement ele=objFactory.createFederationConfigElement();    ele.setFederationID(entityId);    ele.setHosted(false);    List ll=ele.getIDPSSOConfigOrSPSSOConfig();    if (metaManager.getUriNamedClaimTypesOffered(edes) != null) {      bctype=objFactory.createIDPSSOConfigElement();      bctype.getAttribute().add(atype);      ll.add(bctype);    } else {      bctype=objFactory.createSPSSOConfigElement();      bctype.getAttribute().add(atype);      ll.add(bctype);    }    metaManager.setEntityConfig(realm,ele);  } else {    List elist=eConfig.getIDPSSOConfigOrSPSSOConfig();    for (Iterator iter=elist.iterator(); iter.hasNext(); ) {      BaseConfigType bConfig=(BaseConfigType)iter.next();      List list=bConfig.getAttribute();      boolean foundCOT=false;      for (Iterator iter2=list.iterator(); iter2.hasNext(); ) {        AttributeType avp=(AttributeType)iter2.next();        if (avp.getName().trim().equalsIgnoreCase(SAML2Constants.COT_LIST)) {          foundCOT=true;          List avpl=avp.getValue();          if (avpl.isEmpty() || !containsValue(avpl,name)) {            avpl.add(name);            metaManager.setEntityConfig(realm,eConfig);            break;          }        }      }      if (!foundCOT) {        AttributeType atype=objFactory.createAttributeType();        atype.setName(SAML2Constants.COT_LIST);        atype.getValue().add(name);        list.add(atype);        metaManager.setEntityConfig(realm,eConfig);      }    }  }}  }
class C{  public String[] split(String res){  if (resourceNameUtil == null) {    PolicyManager.debug.error("split: Don't have resource comparator");    String[] list=new String[1];    list[0]=res;    return (list);  }  return (resourceNameUtil.split(res));}  }
class C{  public static void registerShutdownListener(ServerShutdownListener listener){  DirectoryServer.registerShutdownListener(listener);}  }
class C{  public PropertyNotFoundException(String propertyName){  super(ERR_PROPERTY_NOT_FOUND_EXCEPTION.get(propertyName));  this.propertyName=propertyName;}  }
class C{  Method copy(){  if (this.root != null)   throw new IllegalArgumentException("Can not copy a non-root Method");  Method res=new Method(clazz,name,parameterTypes,returnType,exceptionTypes,modifiers,slot,signature,annotations,parameterAnnotations,annotationDefault);  res.root=this;  res.methodAccessor=methodAccessor;  return res;}  }
class C{  public List(ListNumberingType listNumberingType){  super();  setListSymbol(listNumberingType);}  }
class C{  public boolean renameFile(File oldFile,File newFile){synchronized (fileCache) {    if (oldFile.renameTo(newFile)) {      validateFileCache();      return true;    }    return false;  }}  }
class C{  public void logLogout(SSOToken ssot){  try {    String logLogout=bundle.getString("logout");    List<String> dataList=new ArrayList<String>();    dataList.add(logLogout);    StringBuilder messageId=new StringBuilder();    messageId.append("LOGOUT");    String indexType=ssot.getProperty(ISAuthConstants.INDEX_TYPE);    if (indexType != null) {      messageId.append("_").append(indexType.toUpperCase());      dataList.add(indexType);      if (indexType.equals(AuthContext.IndexType.USER.toString())) {        dataList.add(ssot.getProperty(ISAuthConstants.PRINCIPAL));      } else       if (indexType.equals(AuthContext.IndexType.ROLE.toString())) {        dataList.add(ssot.getProperty(ISAuthConstants.ROLE));      } else       if (indexType.equals(AuthContext.IndexType.SERVICE.toString())) {        dataList.add(ssot.getProperty(ISAuthConstants.SERVICE));      } else       if (indexType.equals(AuthContext.IndexType.LEVEL.toString())) {        dataList.add(ssot.getProperty(ISAuthConstants.AUTH_LEVEL));      } else       if (indexType.equals(AuthContext.IndexType.MODULE_INSTANCE.toString())) {        dataList.add(ssot.getProperty(ISAuthConstants.AUTH_TYPE));      }    }    Hashtable<String,String> props=new Hashtable<String,String>();    String client=ssot.getProperty(ISAuthConstants.HOST);    if (client != null) {      props.put(LogConstants.IP_ADDR,client);    }    String userDN=ssot.getProperty(ISAuthConstants.PRINCIPAL);    if (userDN != null) {      props.put(LogConstants.LOGIN_ID,userDN);    }    String orgDN=ssot.getProperty(ISAuthConstants.ORGANIZATION);    if (orgDN != null) {      props.put(LogConstants.DOMAIN,orgDN);    }    String authMethName=ssot.getProperty(ISAuthConstants.AUTH_TYPE);    if (authMethName != null) {      props.put(LogConstants.MODULE_NAME,authMethName);    }    String contextId=null;    contextId=ssot.getProperty(Constants.AM_CTX_ID);    if (contextId != null) {      props.put(LogConstants.CONTEXT_ID,contextId);    }    props.put(LogConstants.LOGIN_ID_SID,ssot.getTokenID().toString());    String[] data=dataList.toArray(new String[dataList.size()]);    this.logIt(data,LOG_ACCESS,messageId.toString(),props);  } catch (  SSOException ssoExp) {    debug.error("AuthD.logLogout: SSO Error",ssoExp);  }catch (  Exception e) {    debug.error("AuthD.logLogout: Error ",e);  }}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("LDAPControl(oid=");  buffer.append(getOID());  buffer.append(", criticality=");  buffer.append(isCritical());  if (value != null) {    buffer.append(", value=");    buffer.append(value.toHexPlusAsciiString(4));  }  buffer.append(")");}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  String subConfigName=(String)getDisplayFieldValue(ATTR_SUBCONFIG_NAME);  SubConfigModel model=(SubConfigModel)getModel();  try {    AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);    String schemaName=(String)getPageSessionAttribute(AMServiceProfile.PG_SESSION_SUB_SCHEMA_NAME);    Map values=ps.getAttributeValues(model.getAttributeNames(schemaName));    model.createSubConfig(subConfigName,schemaName,values);    backToProfileViewBean();  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    forwardTo();  }}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String agentName=getStringOptionValue(IArgument.AGENT_NAME);  String outfile=getStringOptionValue(IArgument.OUTPUT_FILE);  boolean includeHashedPassword=isOptionSet(IArgument.AGENT_HASHED_PASSWORD);  boolean inherit=isOptionSet(OPT_INHERIT);  String[] params={realm,agentName};  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SHOW_AGENT",params);    AMIdentity amid=new AMIdentity(adminSSOToken,agentName,IdType.AGENTONLY,realm,null);    if (!amid.isExists()) {      String[] args={realm,agentName,"agent did not exist"};      writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SHOW_AGENT",args);      Object[] p={agentName};      String msg=MessageFormat.format(getResourceString("show-agent-agent-does-not-exist"),p);      throw new CLIException(msg,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    Map values=AgentConfiguration.getAgentAttributes(adminSSOToken,realm,agentName,inherit);    Set passwords=AgentConfiguration.getAttributesSchemaNames(amid,AttributeSchema.Syntax.PASSWORD);    String agentType=AgentConfiguration.getAgentType(amid);    if (AgentConfiguration.AGENT_TYPE_OAUTH2.equals(agentType)) {      includeHashedPassword=false;    }    if ((values != null) && !values.isEmpty()) {      StringBuilder buff=new StringBuilder();      List<String> sortedKeys=new ArrayList<String>(values.keySet());      Collections.sort(sortedKeys);      for (      String attrName : sortedKeys) {        if (includeHashedPassword || !passwords.contains(attrName)) {          Set vals=(Set)values.get(attrName);          if (vals != null) {            if (vals.isEmpty()) {              buff.append(attrName).append("=").append("\n");            } else {              for (Iterator j=vals.iterator(); j.hasNext(); ) {                String val=(String)j.next();                buff.append(attrName).append("=").append(val).append("\n");              }            }          }        }      }      if (outfile == null) {        outputWriter.printlnMessage(buff.toString());      } else {        writeToFile(outfile,buff.toString());        outputWriter.printlnMessage(getResourceString("show-agent-to-file"));      }    } else {      outputWriter.printlnMessage(getResourceString("show-agent-no-attributes"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_SHOW_AGENT",params);  } catch (  SMSException e) {    String[] args={realm,agentName,e.getMessage()};    debugError("ShowAgent.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SHOW_AGENT",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  IdRepoException e) {    String[] args={realm,agentName,e.getMessage()};    debugError("ShowAgent.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SHOW_AGENT",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,agentName,e.getMessage()};    debugError("ShowAgent.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SHOW_AGENT",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  private ResourceResponse readResource(Context context,String resourceId) throws ResourceException {  ReadRequest readRequest=Requests.newReadRequest(resourceId);  return connectionFactory.getConnection().read(context,readRequest);}  }
class C{  public final void popCurrentNode(){  m_currentNodes.quickPop(1);}  }
class C{  public static void resetPeakUsage(String name){  for (  MemoryPoolMXBean mbean : memoryPoolMXBeans) {    if (name.equals("all") || name.equals(mbean.getName())) {      mbean.resetPeakUsage();    }  }}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return _fooLocalService.deleteFoo(foo);}  }
class C{  private void fireMenuKeyReleased(MenuKeyEvent event){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == MenuKeyListener.class) {      ((MenuKeyListener)listeners[i + 1]).menuKeyReleased(event);    }  }}  }
class C{  @Override public int read(byte[] b,int off,int len) throws IOException {  if (b == null) {    throw new NullPointerException("Byte array must not be null");  }  if (len < 0 || off < 0 || (off + len) > b.length) {    throw new IndexOutOfBoundsException("Array Size=" + b.length + ", offset="+ off+ ", length="+ len);  }  int read=0;  if (len == 0) {    return 0;  }  while (len > 0) {    if (encoderOut.hasRemaining()) {      int c=Math.min(encoderOut.remaining(),len);      encoderOut.get(b,off,c);      off+=c;      len-=c;      read+=c;    } else {      fillBuffer();      if (endOfInput && !encoderOut.hasRemaining()) {        break;      }    }  }  return read == 0 && endOfInput ? -1 : read;}  }
class C{  public static String decodeJavaMIMEType(String nat){  return (isJavaMIMEType(nat)) ? nat.substring(JavaMIME.length(),nat.length()).trim() : null;}  }
class C{  public FakeModifyOperation(DN dn,CSN csn,String entryuuid){  super(csn);  this.dn=dn;  this.entryuuid=entryuuid;}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  try {    Request request=requestEvent.getRequest();    SipProvider sipProvider=(SipProvider)requestEvent.getSource();    ServerTransaction st=sipProvider.getNewServerTransaction(request);    TTask ttask=new TTask(requestEvent,st);    int ttime=100;    new Timer().schedule(ttask,ttime);  } catch (  Exception ex) {    ex.printStackTrace();    DialogTerminationOn50XTest.fail("Shootme: Failed on process INVITE",ex);  }}  }
class C{  private static void loadDefaultKitsIfNecessary(){  if (SwingUtilities.appContextGet(kitTypeRegistryKey) == null) {synchronized (defaultEditorKitMap) {      if (defaultEditorKitMap.size() == 0) {        defaultEditorKitMap.put("text/plain","javax.swing.JEditorPane$PlainEditorKit");        defaultEditorKitMap.put("text/html","javax.swing.text.html.HTMLEditorKit");        defaultEditorKitMap.put("text/rtf","javax.swing.text.rtf.RTFEditorKit");        defaultEditorKitMap.put("application/rtf","javax.swing.text.rtf.RTFEditorKit");      }    }    Hashtable ht=new Hashtable();    SwingUtilities.appContextPut(kitTypeRegistryKey,ht);    ht=new Hashtable();    SwingUtilities.appContextPut(kitLoaderRegistryKey,ht);    for (    String key : defaultEditorKitMap.keySet()) {      registerEditorKitForContentType(key,defaultEditorKitMap.get(key));    }  }}  }
class C{  public static int[] checkObjectStart(PdfTokenizer lineTokenizer){  try {    lineTokenizer.seek(0);    if (!lineTokenizer.nextToken() || lineTokenizer.getTokenType() != TokenType.Number)     return null;    int num=lineTokenizer.getIntValue();    if (!lineTokenizer.nextToken() || lineTokenizer.getTokenType() != TokenType.Number)     return null;    int gen=lineTokenizer.getIntValue();    if (!lineTokenizer.nextToken())     return null;    if (!Arrays.equals(Obj,lineTokenizer.getByteContent()))     return null;    return new int[]{num,gen};  } catch (  Exception ioe) {  }  return null;}  }
class C{  public MARSHAL(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  private void checkIsCorrectClass(){  if (checkIsSubClass(ACT_NAME)) {    type=ElementType.ACTTIVITY;  } else   if (checkIsSubClass(FRAG_NAME) || checkIsSubClass(V4_FRAG_NAME)) {    type=ElementType.FRAGMENT;  } else {    throw new IllegalArgumentException(String.format("class %s must be extends from %s or %s or %s",element.getQualifiedName(),ACT_NAME,FRAG_NAME,V4_FRAG_NAME));  }}  }
class C{  public void display_layer_messsage(){  screen_messages.clear_add_field();  BrdLayer curr_layer=itera_settings.get_layer();  screen_messages.show_layer_name(curr_layer);}  }
class C{  public ViaHeader createViaHeader(String host,int port,String transport,String branch) throws ParseException, InvalidArgumentException {  if (host == null || transport == null)   throw new NullPointerException("null arg");  Via via=new Via();  if (branch != null)   via.setBranch(branch);  if (host.indexOf(':') >= 0 && host.indexOf('[') < 0) {    if (stripAddressScopeZones) {      int zoneStart=host.indexOf('%');      if (zoneStart != -1)       host=host.substring(0,zoneStart);    }    host='[' + host + ']';  }  via.setHost(host);  via.setPort(port);  via.setTransport(transport);  return via;}  }
class C{  public StringBuilder encodeBody(StringBuilder retval){  if (callId == null)   return retval; else {    retval.append(callId);    if (!parameters.isEmpty()) {      retval.append(SEMICOLON);      parameters.encode(retval);    }    return retval;  }}  }
class C{  public void changedUpdate(DocumentEvent changes,Shape a,ViewFactory f){  updateDamage(changes,a,f);}  }
class C{  public static int readUBEInt32(ByteBuffer b){  int result=0;  result+=readUBEInt16(b) << 16;  result+=readUBEInt16(b);  return result;}  }
class C{  int arity(){  return arity;}  }
class C{  public Builder singleValue(boolean isSingleValue){  this.isSingleValue=isSingleValue;  return this;}  }
class C{  public Method element(){  return element;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.ExtensionType createExtensionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ExtensionTypeImpl();}  }
class C{  private static void dualPivotQuicksort(double[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  double ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    double t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    double t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    double t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    double t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    double t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    double t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    double t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    double t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    double t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  double pivot1=ae2;  a[e2]=a[left];  double pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      double ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      double ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      double ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  private Boolean processYESNO(StylesheetHandler handler,String uri,String name,String rawName,String value) throws org.xml.sax.SAXException {  if (!(value.equals("yes") || value.equals("no"))) {    handleError(handler,XSLTErrorResources.INVALID_BOOLEAN,new Object[]{name,value},null);    return null;  }  return new Boolean(value.equals("yes") ? true : false);}  }
class C{  public static void premain(String optionsString,final Instrumentation instrumentation){  try {    Util.deleteFolder(Whyline.getWorkingTraceFolder());    (new File(Whyline.getWorkingTraceFolder(),Whyline.STATIC_FOLDER_PATH)).mkdirs();    (new File(Whyline.getWorkingTraceFolder(),Whyline.DYNAMIC_FOLDER_PATH)).mkdir();    (new File(Whyline.getWorkingTraceFolder(),Whyline.HISTORY_PATH)).mkdir();    classes=Util.getWriterFor(Whyline.getWorkingClassnamesFile());    processAgentOptions(optionsString);    EventKind.class.getEnumConstants();    instrumentation.addTransformer(new ClassInstrumenter());    for (    Class<?> c : instrumentation.getAllLoadedClasses()) {      QualifiedClassName name=QualifiedClassName.get(c.getName());      if (name != null) {        classIDs.includeClassName(name);        Class<?> superclass=c.getSuperclass();        if (superclass != null)         classIDs.markSuperclass(name,QualifiedClassName.get(superclass.getName()));        if (c.getClassLoader() == null && !name.isArray() && !name.isPrimitive())         addClassToTrace(name,null,0,ClassInstrumenter.bootClassPath);      }    }  } catch (  Exception e) {    e.printStackTrace();    fail("" + e.toString());  }  Whyline.debug("Invoking main()...");}  }
class C{  private static LDAPFilter createFilter(Filter filter) throws LDAPException, IOException {  if (filter.getAnd() != null) {    return createANDFilter(filter.getAnd());  } else   if (filter.getApproxMatch() != null) {    return createApproximateFilter(filter.getApproxMatch());  } else   if (filter.getEqualityMatch() != null) {    return createEqualityFilter(filter.getEqualityMatch());  } else   if (filter.getExtensibleMatch() != null) {    return createExtensibleFilter(filter.getExtensibleMatch());  } else   if (filter.getGreaterOrEqual() != null) {    return createGreaterOrEqualFilter(filter.getGreaterOrEqual());  } else   if (filter.getLessOrEqual() != null) {    return createLessOrEqualFilter(filter.getLessOrEqual());  } else   if (filter.getNot() != null) {    return createNOTFilter(filter.getNot());  } else   if (filter.getOr() != null) {    return createORFilter(filter.getOr());  } else   if (filter.getPresent() != null) {    return createPresentFilter(filter.getPresent());  } else   if (filter.getSubstrings() != null) {    return createSubstringFilter(filter.getSubstrings());  }  return null;}  }
class C{  PdfType3Font(PdfDictionary fontDictionary){  super(fontDictionary);  ensureObjectIsAddedToDocument(fontDictionary);  checkFontDictionary(fontDictionary,PdfName.Type3);  subset=true;  embedded=true;  fontProgram=new Type3FontProgram(false);  fontEncoding=DocFontEncoding.createDocFontEncoding(fontDictionary.get(PdfName.Encoding),null,false);  PdfDictionary charProcsDic=getPdfObject().getAsDictionary(PdfName.CharProcs);  PdfArray fontMatrixArray=getPdfObject().getAsArray(PdfName.FontMatrix);  if (getPdfObject().containsKey(PdfName.FontBBox)) {    PdfArray fontBBox=getPdfObject().getAsArray(PdfName.FontBBox);    fontProgram.getFontMetrics().setBbox(fontBBox.getAsNumber(0).intValue(),fontBBox.getAsNumber(1).intValue(),fontBBox.getAsNumber(2).intValue(),fontBBox.getAsNumber(3).intValue());  } else {    fontProgram.getFontMetrics().setBbox(0,0,0,0);  }  PdfNumber firstCharNumber=fontDictionary.getAsNumber(PdfName.FirstChar);  int firstChar=firstCharNumber != null ? Math.max(firstCharNumber.intValue(),0) : 0;  int[] widths=FontUtil.convertSimpleWidthsArray(fontDictionary.getAsArray(PdfName.Widths),firstChar,0);  double[] fontMatrix=new double[6];  for (int i=0; i < fontMatrixArray.size(); i++) {    fontMatrix[i]=((PdfNumber)fontMatrixArray.get(i)).getValue();  }  setFontMatrix(fontMatrix);  for (  PdfName glyphName : charProcsDic.keySet()) {    int unicode=AdobeGlyphList.nameToUnicode(glyphName.getValue());    if (unicode != -1 && fontEncoding.canEncode(unicode)) {      int code=fontEncoding.convertToByte(unicode);      getFontProgram().addGlyph(code,unicode,widths[code],null,new Type3Glyph(charProcsDic.getAsStream(glyphName),getDocument()));    }  }}  }
class C{  public JsonObject put(String key,Object value){  content.put(key,value);  return this;}  }
class C{  public static Message sendRequest(Message req,String connectTo) throws SOAPBindingException, SOAPFaultException {  return sendRequest(req,connectTo,null,null);}  }
class C{  protected void fireColumnMarginChanged(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TableColumnModelListener.class) {      if (changeEvent == null)       changeEvent=new ChangeEvent(this);      ((TableColumnModelListener)listeners[i + 1]).columnMarginChanged(changeEvent);    }  }}  }
class C{  public static Foo remove(long fooId) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().remove(fooId);}  }
class C{  public void insert_ulonglong(long value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_ulonglong",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    $self.insert_ulonglong(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public FocusEvent(Component source,int id,boolean temporary,Component opposite){  super(source,id);  this.temporary=temporary;  this.opposite=opposite;}  }
class C{  public boolean validate_connection(){  throw new org.omg.CORBA.NO_IMPLEMENT(reason);}  }
class C{  public SplitStringValidator(final String regexp,final Validator<String> other){  this.regexp=regexp;  this.other=other;}  }
class C{  public static void replaceNamedConfig(String configName,int priority,Map attributeDataMap,String orgName,SSOToken token) throws SMSException, SSOException, AMConfigurationException {  if (debug.messageEnabled()) {    debug.message("replaceNamedConfig name=" + configName + ", value="+ attributeDataMap+ ",org="+ orgName);  }  if (configName == null) {    throw new AMConfigurationException(bundleName,"null-name");  }  ServiceConfigManager scm=new ServiceConfigManager(token,SERVICE_NAME,SERVICE_VERSION);  ServiceConfig oConfig=scm.getOrganizationConfig(orgName,null);  if (oConfig == null) {    throw new AMConfigurationException(bundleName,"service-not-registered");  }  ServiceConfig namedConfig=oConfig.getSubConfig(NAMED_CONFIGURATION);  if (namedConfig == null) {    throw new AMConfigurationException(bundleName,"named-config-not-defined");  }  ServiceConfig pConfig=namedConfig.getSubConfig(configName);  if (pConfig == null) {    throw new AMConfigurationException(bundleName,"config-not-exists");  }  pConfig.setAttributes(attributeDataMap);}  }
class C{  public static <T>boolean contains(T[] array,T value){  return indexOf(array,value) != -1;}  }
class C{  public boolean isMutable(){  return mutable;}  }
class C{  public void toString(StringBuilder buffer,int indent){  StringBuilder indentBuf=new StringBuilder(indent);  for (int i=0; i < indent; i++) {    indentBuf.append(' ');  }  buffer.append(indentBuf);  buffer.append("LDAP Control");  buffer.append(EOL);  buffer.append(indentBuf);  buffer.append("  OID:  ");  buffer.append(getOID());  buffer.append(EOL);  buffer.append(indentBuf);  buffer.append("  Criticality:  ");  buffer.append(isCritical());  buffer.append(EOL);  if (value != null) {    buffer.append(indentBuf);    buffer.append("  Value:");    buffer.append(value.toHexPlusAsciiString(indent + 4));  }}  }
class C{  private InvokerBytecodeGenerator(String className,LambdaForm form,MethodType invokerType){  this(form,form.names.length,className,form.debugName,invokerType);  Name[] names=form.names;  for (int i=0, index=0; i < localsMap.length; i++) {    localsMap[i]=index;    if (i < names.length) {      BasicType type=names[i].type();      index+=type.basicTypeSlots();      localTypes[i]=type;    }  }}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.getCamera().stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public String readLine() throws IOException {  String line=currentFilePart.readLine();  while (line == null) {    currentFilePart=currentFilePart.rollOver();    if (currentFilePart != null) {      line=currentFilePart.readLine();    } else {      break;    }  }  if ("".equals(line) && !trailingNewlineOfFileSkipped) {    trailingNewlineOfFileSkipped=true;    line=readLine();  }  return line;}  }
class C{  private MethodDef parse_method_def_normal() throws SyntaxException {  LineCol lineCol=current.getLineCol();  String methodName=((Element)current).getContent();  Set<AST.Anno> annos=new HashSet<>(this.annos);  this.annos.clear();  List<VariableDef> variableList=new ArrayList<>();  Set<String> names=new HashSet<>();  parse_method_def_variables(variableList,names);  nextNode(false);  List<Statement> stmts=parseElemStart((ElementStartNode)current,true,names,false);  MethodDef def=new MethodDef(methodName,modifiers,null,variableList,annos,stmts,lineCol);  annos.clear();  modifiers.clear();  return def;}  }
class C{  private static void test_simpleUse(Configuration config) throws Exception {  String result=(String)createInstanceAndCallStaticMethod(config,"test.Test1","test");  assertSame("blort",result);}  }
class C{  public MediaSize(int x,int y,int units){  super(x,y,units);  if (x > y) {    throw new IllegalArgumentException("X dimension > Y dimension");  }  sizeVector.add(this);}  }
class C{  public void test_subListII(){  SimpleList mList=new SimpleList();  mList.add(new Object());  mList.add(new Object());  List sList=mList.subList(0,2);  sList.add(new Object());  sList.get(0);  sList.add(0,new Object());  sList.get(0);  sList.addAll(Arrays.asList(new String[]{"1","2"}));  sList.get(0);  sList.addAll(0,Arrays.asList(new String[]{"3","4"}));  sList.get(0);  sList.remove(0);  sList.get(0);  ListIterator lit=sList.listIterator();  lit.add(new Object());  lit.next();  lit.remove();  lit.next();  sList.clear();  sList.add(new Object());  List al=new ArrayList();  for (int i=0; i < 10; i++) {    al.add(new Integer(i));  }  assertTrue("Sublist returned should have implemented Random Access interface",al.subList(3,7) instanceof RandomAccess);  List ll=new LinkedList();  for (int i=0; i < 10; i++) {    ll.add(new Integer(i));  }  assertTrue("Sublist returned should not have implemented Random Access interface",!(ll.subList(3,7) instanceof RandomAccess));}  }
class C{  public boolean validateSignature(@NonNull byte[] content,@NonNull String headerSignature){  final byte[] signature=generateSignature(content);  final byte[] decodeHeaderSignature=Base64.getDecoder().decode(headerSignature);  return MessageDigest.isEqual(decodeHeaderSignature,signature);}  }
class C{  protected void fill_list(){  RuleNets nets=this.board_frame.board_panel.itera_board.get_routing_board().brd_rules.nets;  RuleNet[] sorted_arr=new RuleNet[nets.max_net_no()];  for (int i=0; i < sorted_arr.length; ++i) {    sorted_arr[i]=nets.get(i + 1);  }  java.util.Arrays.sort(sorted_arr);  for (int i=0; i < sorted_arr.length; ++i) {    this.add_to_list(sorted_arr[i]);  }  this.gui_list.setVisibleRowCount(Math.min(sorted_arr.length,DEFAULT_TABLE_SIZE));}  }
class C{  public final short readShort() throws IOException {  readFully(scratch,0,SizeOf.SHORT);  return Memory.peekShort(scratch,0,ByteOrder.BIG_ENDIAN);}  }
class C{  public void test_setFloatLjava_lang_ObjectF() throws Exception {  TestField x=new TestField();  Field f=null;  float val=0.0F;  try {    f=x.getClass().getDeclaredField("floatField");    f.setFloat(x,Float.MIN_VALUE);    val=f.getFloat(x);  } catch (  Exception e) {    fail("Exception during setFloat test : " + e.getMessage());  }  assertEquals("Returned incorrect float field value",Float.MIN_VALUE,val,0.0);  boolean thrown=false;  try {    f=x.getClass().getDeclaredField("booleanField");    f.setFloat(x,Float.MIN_VALUE);    fail("Accessed field of invalid type");  } catch (  IllegalArgumentException ex) {    thrown=true;  }  assertTrue("IllegalArgumentException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("floatPFField");    assertFalse(f.isAccessible());    f.setFloat(x,Float.MIN_VALUE);    fail("Accessed inaccessible field");  } catch (  IllegalAccessException ex) {    thrown=true;  }  assertTrue("IllegalAccessException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("floatField");    f.setFloat(null,Float.MIN_VALUE);    fail("NullPointerException expected but not thrown");  } catch (  NullPointerException ex) {    thrown=true;  }catch (  Exception ex) {    fail("NullPointerException expected but not thrown");  }  assertTrue("NullPointerException expected but not thrown",thrown);  f=x.getClass().getDeclaredField("floatSField");  f.setFloat(null,Float.MIN_VALUE);  val=f.getFloat(x);  assertEquals("Returned incorrect float field value",Float.MIN_VALUE,val);}  }
class C{  public MockPolicy(boolean matches,boolean isDisabled){  this.matches=matches;  this.isDisabled=isDisabled;}  }
class C{  private static List<Node> filterElementNodes(NodeList list){  List<Node> result=new ArrayList<Node>(list.getLength());  for (int i=0; i < list.getLength(); i++) {    if (list.item(i).getNodeType() == Node.ELEMENT_NODE) {      result.add(list.item(i));    }  }  return result;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.WssGssKerberosV5ApReqToken11Element createWssGssKerberosV5ApReqToken11Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.WssGssKerberosV5ApReqToken11ElementImpl();}  }
class C{  @Override public synchronized boolean isClosed(){  return closed;}  }
class C{  public void useSourceImageAspectRatio(){  useSourceImageAspectRatio=true;}  }
class C{  public FactoryConfigurationError(java.lang.String msg,java.lang.Exception e){  super(msg);  nested=e;}  }
class C{  public ContentModel contentModel(){  if (state == null) {    return null;  } else {    return state.getModel();  }}  }
class C{  public void removeRole(AMRole role) throws AMException, SSOException {  removeRole(role.getDN());}  }
class C{  @Override public String rename(String srcPath,String destPath) throws MalformedURLException, IOException, AuthenticationException {  String resp=null;  ensureValidToken();  HttpURLConnection conn=authenticatedURL.openConnection(new URL(new URL(httpfsUrl),MessageFormat.format("/webhdfs/v1/{0}?op=RENAME&destination={1}",URLUtil.encodePath(srcPath),URLUtil.encodePath(destPath))),token);  conn.setRequestMethod("PUT");  conn.connect();  resp=result(conn,true);  conn.disconnect();  return resp;}  }
class C{  public boolean isOpaque(){  Color back=getBackground();  Component p=getParent();  if (p != null) {    p=p.getParent();  }  boolean colorMatch=(back != null) && (p != null) && back.equals(p.getBackground())&& p.isOpaque();  return !colorMatch && super.isOpaque();}  }
class C{  public JarEntry(String name){  super(name);}  }
class C{  public String processURL(String URL,HttpServletRequest servletRequest){  String url=URL;  if (url != null) {    url=processDynamicVariables(url,servletRequest);  }  if (debug.messageEnabled()) {    debug.message("processURL : " + url);  }  return url;}  }
class C{  public void flush() throws IOException {  super.flush();}  }
class C{  public IContentOperator registerContentOperator(String operatorString,IContentOperator operator){  return operators.put(operatorString,operator);}  }
class C{  @Override public Foo findByUuid_C_Last(String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByUuid_C_Last(uuid,companyId,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(6);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("uuid=");  msg.append(uuid);  msg.append(", companyId=");  msg.append(companyId);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  public void treeNodesInserted(TreeModelEvent e){  if (e != null) {    int changedIndexs[];    FHTreeStateNode changedParent=getNodeForPath(SwingUtilities2.getTreePath(e,getModel()),false,false);    int maxCounter;    changedIndexs=e.getChildIndices();    if (changedParent != null && changedIndexs != null && (maxCounter=changedIndexs.length) > 0) {      boolean isVisible=(changedParent.isVisible() && changedParent.isExpanded());      for (int counter=0; counter < maxCounter; counter++) {        changedParent.childInsertedAtModelIndex(changedIndexs[counter],isVisible);      }      if (isVisible && treeSelectionModel != null)       treeSelectionModel.resetRowSelection();      if (changedParent.isVisible())       this.visibleNodesChanged();    }  }}  }
class C{  private void createButtons(){  closeButton=createTitleButton();  closeButton.setAction(closeAction);  closeButton.setText(null);  closeButton.putClientProperty("paintActive",Boolean.TRUE);  closeButton.setBorder(handyEmptyBorder);  closeButton.putClientProperty(AccessibleContext.ACCESSIBLE_NAME_PROPERTY,"Close");  closeButton.setIcon(UIManager.getIcon("InternalFrame.closeIcon"));  if (getWindowDecorationStyle() == JRootPane.FRAME) {    maximizeIcon=UIManager.getIcon("InternalFrame.maximizeIcon");    minimizeIcon=UIManager.getIcon("InternalFrame.minimizeIcon");    iconifyButton=createTitleButton();    iconifyButton.setAction(iconifyAction);    iconifyButton.setText(null);    iconifyButton.putClientProperty("paintActive",Boolean.TRUE);    iconifyButton.setBorder(handyEmptyBorder);    iconifyButton.putClientProperty(AccessibleContext.ACCESSIBLE_NAME_PROPERTY,"Iconify");    iconifyButton.setIcon(UIManager.getIcon("InternalFrame.iconifyIcon"));    toggleButton=createTitleButton();    toggleButton.setAction(restoreAction);    toggleButton.putClientProperty("paintActive",Boolean.TRUE);    toggleButton.setBorder(handyEmptyBorder);    toggleButton.putClientProperty(AccessibleContext.ACCESSIBLE_NAME_PROPERTY,"Maximize");    toggleButton.setIcon(maximizeIcon);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode01.class,args);}  }
class C{  public Player createAndAddPlayer(Client client){  if (players.size() >= MAX_PLAYER_COUNT) {    throw new IllegalStateException("Maximum player count (" + MAX_PLAYER_COUNT + ") has been reached.");  }  Player p=new Player(this,client);  broadcastRoomMessage(MessageType.PLAYER_CHANGED,"+");  players.add(p);  if (activeBroadcastTimerTask == null) {    activeBroadcastTimerTask=createBroadcastTimerTask();    drawmessageBroadcastTimer.schedule(activeBroadcastTimerTask,TIMER_DELAY,TIMER_DELAY);  }  String content=String.valueOf(players.size());  p.sendRoomMessage(MessageType.IMAGE_MESSAGE,content);  ByteArrayOutputStream bout=new ByteArrayOutputStream();  try {    ImageIO.write(roomImage,"PNG",bout);  } catch (  IOException e) {  }  BinaryWebsocketMessage msg=new BinaryWebsocketMessage(ByteBuffer.wrap(bout.toByteArray()));  p.getClient().sendMessage(msg);  return p;}  }
class C{  private int readFirstBytes() throws IOException {  getBOM();  return fbIndex < fbLength ? firstBytes[fbIndex++] : -1;}  }
class C{  public FolderNode(){  this(null,"",new ArrayList<TreeNode>(0));}  }
class C{  public void end(){  this.postState=new Hashtable<Object,Object>(11);  this.object.storeState(this.postState);  this.removeRedundantState();}  }
class C{  public DoubleHolder(double initial){  value=initial;}  }
class C{  public DOMTestDocumentBuilderFactory newInstance(DocumentBuilderSetting[] newSettings) throws DOMTestIncompatibleException {  if (newSettings == null) {    return this;  }  DocumentBuilderSetting[] mergedSettings=mergeSettings(newSettings);  return new BatikTestDocumentBuilderFactory(mergedSettings);}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  protected boolean remove(Object targetChild,boolean callChildSetBC){  if (targetChild == null)   throw new IllegalArgumentException();synchronized (BeanContext.globalHierarchyLock) {    if (!containsKey(targetChild))     return false;    if (!validatePendingRemove(targetChild)) {      throw new IllegalStateException();    }    BCSChild bcsc=(BCSChild)children.get(targetChild);    BCSChild pbcsc=null;    Object peer=null;synchronized (targetChild) {      if (callChildSetBC) {        BeanContextChild cbcc=getChildBeanContextChild(targetChild);        if (cbcc != null) synchronized (cbcc) {          cbcc.removePropertyChangeListener("beanContext",childPCL);          cbcc.removeVetoableChangeListener("beanContext",childVCL);          try {            cbcc.setBeanContext(null);          } catch (          PropertyVetoException pve1) {            cbcc.addPropertyChangeListener("beanContext",childPCL);            cbcc.addVetoableChangeListener("beanContext",childVCL);            throw new IllegalStateException();          }        }      }synchronized (children) {        children.remove(targetChild);        if (bcsc.isProxyPeer()) {          pbcsc=(BCSChild)children.get(peer=bcsc.getProxyPeer());          children.remove(peer);        }      }      if (getChildSerializable(targetChild) != null)       serializable--;      childJustRemovedHook(targetChild,bcsc);      if (peer != null) {        if (getChildSerializable(peer) != null)         serializable--;        childJustRemovedHook(peer,pbcsc);      }    }    fireChildrenRemoved(new BeanContextMembershipEvent(getBeanContextPeer(),peer == null ? new Object[]{targetChild} : new Object[]{targetChild,peer}));  }  return true;}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  private void createResourceTypeCollectionConfig(Subject subject,String realm,String uuid) throws EntitlementException {  try {    final ServiceConfig orgConfig=resourceTypeServiceConfig.getOrgConfig(subject,realm);    if (orgConfig.getSubConfig(CONFIG_RESOURCE_TYPES) == null) {      orgConfig.addSubConfig(CONFIG_RESOURCE_TYPES,SCHEMA_RESOURCE_TYPES,0,Collections.EMPTY_MAP);    }  } catch (  SMSException ex) {    handleSaveException(subject,realm,uuid,ex);  }catch (  SSOException ex) {    handleSaveException(subject,realm,uuid,ex);  }}  }
class C{  private void generateReferenceDoc(final StringBuilder builder,Collection<SubCommand> subCommands){  toRefEntry(builder,subCommands);}  }
class C{  private static void displayPropertyOptionKey(ConsoleApplication app){  LocalizableMessageBuilder builder;  app.println(INFO_DSCFG_HELP_DESCRIPTION_OPTION.get());  app.println();  builder=new LocalizableMessageBuilder();  builder.append(" r -- ");  builder.append(INFO_DSCFG_HELP_DESCRIPTION_READ.get());  app.println(builder.toMessage());  builder=new LocalizableMessageBuilder();  builder.append(" w -- ");  builder.append(INFO_DSCFG_HELP_DESCRIPTION_WRITE.get());  app.println(builder.toMessage());  builder=new LocalizableMessageBuilder();  builder.append(" m -- ");  builder.append(INFO_DSCFG_HELP_DESCRIPTION_MANDATORY.get());  app.println(builder.toMessage());  builder=new LocalizableMessageBuilder();  builder.append(" s -- ");  builder.append(INFO_DSCFG_HELP_DESCRIPTION_SINGLE_VALUED.get());  app.println(builder.toMessage());  builder=new LocalizableMessageBuilder();  builder.append(" a -- ");  builder.append(INFO_DSCFG_HELP_DESCRIPTION_ADMIN_ACTION.get());  app.println(builder.toMessage());}  }
class C{  public String toString(){  ByteArrayOutputStream baos=new ByteArrayOutputStream();  PrintStream p=new PrintStream(baos);  p.print(algorithm + " Message Digest from " + provider.getName()+ ", ");switch (state) {case INITIAL:    p.print("<initialized>");  break;case IN_PROGRESS:p.print("<in progress>");break;}p.println();return (baos.toString());}  }
class C{  protected void doCopy(HttpServletRequest req,HttpServletResponse resp) throws IOException {  if (readOnly) {    resp.sendError(WebdavStatus.SC_FORBIDDEN);    return;  }  copyResource(req,resp);}  }
class C{  private boolean isLocked(String path,String ifHeader){  LockInfo lock=resourceLocks.get(path);  Enumeration<String> tokenList=null;  if ((lock != null) && (lock.hasExpired())) {    resourceLocks.remove(path);  } else   if (lock != null) {    tokenList=lock.tokens.elements();    boolean tokenMatch=false;    while (tokenList.hasMoreElements()) {      String token=tokenList.nextElement();      if (ifHeader.indexOf(token) != -1) {        tokenMatch=true;        break;      }    }    if (!tokenMatch)     return true;  }  Enumeration<LockInfo> collectionLocksList=collectionLocks.elements();  while (collectionLocksList.hasMoreElements()) {    lock=collectionLocksList.nextElement();    if (lock.hasExpired()) {      collectionLocks.removeElement(lock);    } else     if (path.startsWith(lock.path)) {      tokenList=lock.tokens.elements();      boolean tokenMatch=false;      while (tokenList.hasMoreElements()) {        String token=tokenList.nextElement();        if (ifHeader.indexOf(token) != -1) {          tokenMatch=true;          break;        }      }      if (!tokenMatch)       return true;    }  }  return false;}  }
class C{  private static JsonValue checkIfExist(JsonValue jsonValue,String jsonLabel){  try {    return jsonValue.get(jsonLabel).required();  } catch (  JsonValueException e) {    debug.message("{} doesn't exist in {}.",jsonLabel,jsonValue);    throw new IllegalArgumentException(jsonLabel + " doesn't exist in " + jsonValue+ ".");  }}  }
class C{  public JMenuItem(String text,Icon icon){  setModel(new DefaultButtonModel());  init(text,icon);  initFocusability();}  }
class C{  private void updateFavoriteStation(){  String showString=null;  if (FmRadioStation.isFavoriteStation(mContext,mCurrentStation)) {    String stationName=FmRadioStation.getStationName(mContext,mCurrentStation,FmRadioStation.STATION_TYPE_FAVORITE);    FmRadioStation.updateStationToDb(mContext,stationName,FmRadioStation.STATION_TYPE_SEARCHED,mCurrentStation);    mButtonAddToFavorite.setImageResource(R.drawable.btn_fm_favorite_off_selector);    mTextStationName.setText("");    showString=mProjectStringExt.getProjectString(mContext,R.string.toast_channel_deleted,R.string.toast_channel_deleted1);  } else {    String stationName=FmRadioStation.getStationName(mContext,mCurrentStation,FmRadioStation.STATION_TYPE_SEARCHED);    if (FmRadioStation.isStationExist(mContext,mCurrentStation,FmRadioStation.STATION_TYPE_SEARCHED)) {      FmRadioStation.updateStationToDb(mContext,stationName,FmRadioStation.STATION_TYPE_FAVORITE,mCurrentStation);    } else {      FmRadioStation.insertStationToDb(mContext,stationName,mCurrentStation,FmRadioStation.STATION_TYPE_FAVORITE);    }    mButtonAddToFavorite.setImageResource(R.drawable.btn_fm_favorite_on_selector);    mTextStationName.setText(stationName);    showString=mProjectStringExt.getProjectString(mContext,R.string.toast_channel_added,R.string.toast_channel_added1);  }  showToast(showString);}  }
class C{  public void rewind(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("rewind",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    $self.rewind();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static Optional<String> tail(final String value){  return Optional.ofNullable(value).filter(null).map(null);}  }
class C{  public static void replaceAttributeSchema(ServiceSchema serviceSchema,String attributeName,Node attributeSchemaNode) throws UpgradeException {  String classMethod="UpgradeUtils:replaceAttributeSchema: ";  if (debug.messageEnabled()) {    debug.message(classMethod + "Updating attributeschema : " + attributeName+ "from service :"+ serviceSchema.getName());  }  try {    serviceSchema.replaceAttributeSchema(attributeName,attributeSchemaNode);  } catch (  SMSException sme) {    debug.error(classMethod + "Cannot update attribute schema for " + serviceSchema.getName(),sme);    throw new UpgradeException(sme.getMessage());  }catch (  SSOException ssoe) {    debug.error(classMethod + "Invalid SSOToken : ",ssoe);    throw new UpgradeException(ssoe.getMessage());  }}  }
class C{  private AST.While parse_while() throws SyntaxException {  LineCol lineCol=current.getLineCol();  Expression condition=next_exp(true);  List<Statement> body;  if (current instanceof ElementStartNode) {    body=parseElemStart((ElementStartNode)current,true,Collections.emptySet(),false);  } else {    err.UnexpectedTokenException("while body",current == null ? "LineEnd" : current.toString(),current == null ? lineCol : current.getLineCol());    err.debug("assume that the body is empty");    body=Collections.emptyList();    jumpToTheNearestEndingNode();  }  return new AST.While(condition,body,false,lineCol);}  }
class C{  public List<String> next() throws IOException {  List<String> list=new ArrayList<>(this.fields);  StringBuilder sb=new StringBuilder();  int c;  boolean escaped=false;  while ((c=read()) != -1) {    if (escaped) {      sb.append((char)c);      escaped=false;    } else     if (c == separator.getEscape()) {      escaped=true;    } else     if (c == separator.getQuote() && sb.length() == 0) {      quoted=true;    } else     if (c == separator.getQuote() && quoted) {      c=read();      if (c == separator.getQuote()) {        sb.append((char)c);      } else {        next=c;        quoted=false;      }    } else     if (c == separator.getCharacter() && !quoted) {      list.add(sb.toString());      sb.setLength(0);    } else     if (c == LF && !quoted) {      break;    } else {      sb.append((char)c);    }  }  if (list.size() > 0 || sb.length() > 0) {    list.add(sb.toString());  }  if (list.size() == 0 && c == -1) {    return null;  } else {    this.fields=Math.max(this.fields,list.size());    return list;  }}  }
class C{  public String toString(){synchronized (idleThreadList) {    return poolName + "[" + allThreadList.length+ " Total threads, "+ ((tail >= 0) ? (tail + 1) : 0)+ " Idle threads]";  }}  }
class C{  public void stopHandler(){  if (logger.isTraceEnabled()) {    debugInfo("stop");  }  DirectoryServer.deregisterMonitorProvider(this);}  }
class C{  public void updateToken(Subject subject,String tokenId,String eTag,JSONObject newVals) throws CoreTokenException, JSONException {  SSOToken token=SubjectUtils.getSSOToken(subject);  if (token == null) {    throw new CoreTokenException(210,null,401);  }  String dn=null;  try {    dn=getCoreTokenDN(tokenId);    if (SMSEntry.checkIfEntryExists(dn,token)) {      SMSEntry s=new SMSEntry(token,dn);      String tokenAttrs=getTokenAttributeValueFromSM(s,JSON_ATTR);      JSONObject json=new JSONObject(tokenAttrs);      checkETag(eTag,json,tokenId);      newVals=validateAndToLowerCase(newVals);      if (newVals.has(CoreTokenConstants.TOKEN_ID)) {        throw new CoreTokenException(221,null,409);      }      if (newVals.has(CoreTokenConstants.TOKEN_TYPE)) {        throw new CoreTokenException(224,null,409);      }      json=updateAttributeValues(json,newVals);      Map<String,Set<String>> map=validateAndCreateMap(tokenId,json);      s.setAttributes(map);      s.save();    } else {      throw new CoreTokenException(203,null,404);    }  } catch (  SMSException e) {    CoreTokenUtils.debug.error("OpenSSOCoreTokenStore.updateToken",e);    throw new CoreTokenException(206,null,e);  }catch (  SSOException e) {    CoreTokenUtils.debug.error("OpenSSOCoreTokenStore.updateToken",e);    throw new CoreTokenException(301,null,e);  }}  }
class C{  @Override public boolean isSecure(){  return this.request.isSecure();}  }
class C{  private void closeOthers(String id,SwipeRevealLayout swipeLayout){synchronized (stateChangeLock) {    if (getOpenCount() > 1) {      for (      Map.Entry<String,Integer> entry : mapStates.entrySet()) {        if (!entry.getKey().equals(id)) {          entry.setValue(SwipeRevealLayout.STATE_CLOSE);        }      }      for (      SwipeRevealLayout layout : mapLayouts.values()) {        if (layout != swipeLayout) {          layout.close(true);        }      }    }  }}  }
class C{  public int length(){  ImmutableList<A> l=this;  int len=0;  while (l.tail != null) {    l=l.tail;    len++;  }  return len;}  }
class C{  private void fireMenuKeyTyped(MenuKeyEvent event){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == MenuKeyListener.class) {      ((MenuKeyListener)listeners[i + 1]).menuKeyTyped(event);    }  }}  }
class C{  public void characters(String characters) throws SAXException {  final int length=characters.length();  if (length > m_charsBuff.length) {    m_charsBuff=new char[length * 2 + 1];  }  characters.getChars(0,length,m_charsBuff,0);  characters(m_charsBuff,0,length);}  }
class C{  protected String encodeBody(){  return encodeBody(new StringBuilder()).toString();}  }
class C{  protected void notifyDataChangedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onChanged();    }  }}  }
class C{  protected FilterInputStream(InputStream in){  this.in=in;}  }
class C{  @Transient public boolean isCompositionEnabled(){  return false;}  }
class C{  WalkingIteratorSorted(Compiler compiler,int opPos,int analysis,boolean shouldLoadWalkers) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis,shouldLoadWalkers);}  }
class C{  void addClientConnection(ClientConnection clientConnection){  clientConnections.put(clientConnection,clientConnection);}  }
class C{  public static int realmsConfig(List<String> realmList){  String classMethod="Agent.realmsConfig:";  Date startDate=newDate();  StringBuilder sb=new StringBuilder("receiving list of realms (size = ");  sb.append(realmList.size()).append("):\n");  SsoServerInstanceImpl sig=sunMib.getSvrInstanceGroup();  TableSsoServerRealmTable rtab=null;  if (sig != null) {    try {      rtab=sig.accessSsoServerRealmTable();    } catch (    SnmpStatusException ex) {      debug.error(classMethod + "getting realm table: ",ex);      return -1;    }  }  int realmsAdded=0;  for (int i=0; i < realmList.size(); i++) {    String ss=realmList.get(i);    SsoServerRealmEntryImpl rei=new SsoServerRealmEntryImpl(sunMib);    rei.SsoServerRealmIndex=Integer.valueOf(i + 1);    String ss2=ss;    ss2=getEscapedString(ss2);    rei.SsoServerRealmName=ss2;    ObjectName oname=rei.createSsoServerRealmEntryObjectName(server);    if (oname == null) {      debug.error(classMethod + "Error creating object for realm '" + ss+ "'");      continue;    }    String rlmToDN=DNMapper.orgNameToDN(ss);    sb.append("  realm #").append(i).append(" = ").append(ss).append(", DN = ").append(rlmToDN).append("\n");    try {      rtab.addEntry(rei,oname);      if ((server != null) && (rei != null)) {        server.registerMBean(rei,oname);      }      realm2Index.put(ss,rei.SsoServerRealmIndex);      index2Realm.put(rei.SsoServerRealmIndex,ss);      realm2DN.put(ss,rlmToDN);      DN2Realm.put(rlmToDN,ss);    } catch (    JMException ex) {      debug.error(classMethod + ss,ex);    }catch (    SnmpStatusException ex) {      debug.error(classMethod + ss,ex);    }    realmsAdded++;  }  if (realmsAdded == 0) {    debug.error(classMethod + "No realms processed successfully.");    return -2;  }  if (debug.messageEnabled()) {    debug.message(classMethod + sb.toString());  }  String[] nms=MonitoringUtil.getNetworkMonitorNames();  if ((nms != null) && (nms.length > 0)) {    SsoServerEntitlementSvc esi=sunMib.getEntitlementsGroup();    if (esi != null) {      try {        TableSsoServerEntitlementPolicyStatsTable ptab=esi.accessSsoServerEntitlementPolicyStatsTable();        for (int i=0; i < realmList.size(); i++) {          String ss=realmList.get(i);          Integer Ii=Integer.valueOf(i + 1);          SsoServerEntitlementPolicyStatsEntryImpl ssi=new SsoServerEntitlementPolicyStatsEntryImpl(sunMib);          ssi.EntitlementPolicyCaches=0;          ssi.EntitlementReferralCaches=0;          ssi.EntitlementPolicyStatsIndex=Integer.valueOf(i + 1);          ssi.SsoServerRealmIndex=Ii;          ObjectName sname=ssi.createSsoServerEntitlementPolicyStatsEntryObjectName(server);          if (sname == null) {            debug.error(classMethod + "Error creating object for Entitlements " + "Policy Stats, realm = '"+ ss+ "'");            continue;          }          try {            ptab.addEntry(ssi,sname);            if ((server != null) && (ssi != null)) {              server.registerMBean(ssi,sname);            }          } catch (          JMException ex) {            debug.error(classMethod + "on Entitlements Policy Stats '" + ss+ "': ",ex);          }catch (          SnmpStatusException ex) {            debug.error(classMethod + "on Entitlements Policy Stats '" + ss+ "': ",ex);          }        }      } catch (      SnmpStatusException ex) {        debug.error(classMethod + "getting Entitlements Policy Stats table: ",ex);      }    }  } else {    debug.error(classMethod + "Entitlement NetworkMonitor list empty.");  }  Date stopDate=newDate();  if (debug.messageEnabled()) {    String stDate=sdf.format(startDate);    String endDate=sdf.format(stopDate);    debug.message("Agent.realmsConfig:\n    Start Time = " + stDate + "\n      End Time = "+ endDate);  }  return 0;}  }
class C{  public Locale locale(){  return this.locale;}  }
class C{  public void dup2X2(){  mv.visitInsn(Opcodes.DUP2_X2);}  }
class C{  @Override public void write(String s,int off,int len) throws IOException {  if (suspended) {    return;  }  if (s == null) {    throw new NullPointerException(sm.getString("outputBuffer.writeNull"));  }  cb.append(s,off,len);  charsWritten+=len;}  }
class C{  public void decrement(){  int counterVal=counter.decrementAndGet();  if (counterVal == 0) {    if (null != resourceCallback) {      resourceCallback.onTransitionToIdle();    }  }  if (counterVal < 0) {    throw new IllegalArgumentException("Counter has been corrupted!");  }}  }
class C{  private void deleteAttrsFromEntry(String dn,String... attrTypeStrings) throws Exception {  ModifyRequest modifyRequest=newModifyRequest(dn);  for (  String attrTypeString : attrTypeStrings) {    modifyRequest.addModification(DELETE,attrTypeString);  }  getRootConnection().processModify(modifyRequest);}  }
class C{  public void removeAttribute(String attrName) throws SMSException {  Set attribute=(Set)attrSet.get(attrName);  if (attribute == null) {    throw (new SMSException(LdapException.newLdapException(ResultCode.ATTRIBUTE_OR_VALUE_EXISTS,getBundleString(IUMSConstants.SMS_ATTR_OR_VAL_EXISTS)),"sms-ATTR_OR_VAL_EXISTS"));  }  attrSet.remove(attrName);  if (modSet == null) {    modSet=new HashSet();  }  BasicAttribute ba=new BasicAttribute(attrName,attribute);  for (Iterator items=attribute.iterator(); items.hasNext(); )   ba.add(items.next());  modSet.add(new ModificationItem(DirContext.REMOVE_ATTRIBUTE,ba));}  }
class C{  public String encodeURL(String url){  return this._getHttpServletResponse() != null ? this._getHttpServletResponse().encodeURL(url) : null;}  }
class C{  protected int dpToPixels(int dpValue){  return (int)(dpValue * dpToPixelsScaleFactor + 0.5f);}  }
class C{  @Override public boolean sendSearchReference(SearchOperation searchOperation,SearchResultReference searchReference){  if (ldapVersion == 2) {    logger.error(ERR_LDAPV2_SKIPPING_SEARCH_REFERENCE,getConnectionID(),searchOperation.getOperationID(),searchReference);    return false;  }  SearchResultReferenceProtocolOp protocolOp=new SearchResultReferenceProtocolOp(searchReference);  sendLDAPMessage(new LDAPMessage(searchOperation.getMessageID(),protocolOp,searchReference.getControls()));  return true;}  }
class C{  protected int estimateParametersLen(final NameValuePair[] nvps){  if ((nvps == null) || (nvps.length < 1))   return 0;  int result=(nvps.length - 1) * 2;  for (int i=0; i < nvps.length; i++) {    result+=estimateNameValuePairLen(nvps[i]);  }  return result;}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.SPKIDataType.SPKISexp createSPKIDataTypeSPKISexp() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.SPKIDataTypeImpl.SPKISexpImpl();}  }
class C{  public StaticTextTag(){  text="";}  }
class C{  public SIPHeader parse() throws ParseException {  SessionExpires se=new SessionExpires();  if (debug)   dbg_enter("parse");  try {    headerName(TokenTypes.SESSIONEXPIRES_TO);    String nextId=lexer.getNextId();    try {      int delta=Integer.parseInt(nextId);      se.setExpires(delta);    } catch (    NumberFormatException ex) {      throw createParseException("bad integer format");    }catch (    InvalidArgumentException ex) {      throw createParseException(ex.getMessage());    }    this.lexer.SPorHT();    super.parse(se);    return se;  }  finally {    if (debug)     dbg_leave("parse");  }}  }
class C{  private static Set<String> parseData(String data,boolean realm){  Set<String> returnData=Collections.emptySet();  if (data != null && data.length() != 0) {    StringTokenizer stz=new StringTokenizer(data,ISAuthConstants.PIPE_SEPARATOR);    returnData=new HashSet<String>();    while (stz.hasMoreTokens()) {      String nameValue=stz.nextToken();      int index=nameValue.indexOf(ISAuthConstants.COLON);      if ((index == -1) && (realm)) {        continue;      } else       if (index == -1) {        returnData.add(nameValue);        continue;      }      String name=nameValue.substring(0,index).trim();      String value=nameValue.substring(index + 1).trim();      if (realm) {        returnData.add(name);      } else {        returnData.add(value);      }    }  }  if (utilDebug.messageEnabled()) {    utilDebug.message("parseData:Input data : " + data);    utilDebug.message("parseData:returnData : " + returnData);  }  return returnData;}  }
class C{  public void test_PBKDF2_rfc3211_64() throws Exception {  char[] password="password".toCharArray();  byte[] salt=new byte[]{(byte)0x12,(byte)0x34,(byte)0x56,(byte)0x78,(byte)0x78,(byte)0x56,(byte)0x34,(byte)0x12};  int iterations=5;  int keyLength=64;  byte[] expected=new byte[]{(byte)0xD1,(byte)0xDA,(byte)0xA7,(byte)0x86,(byte)0x15,(byte)0xF2,(byte)0x87,(byte)0xE6};  test_PBKDF2_UTF8(password,salt,iterations,keyLength,expected);  test_PBKDF2_8BIT(password,salt,iterations,keyLength,expected);}  }
class C{  public LinkedHashMapEntry(final DN name){  super(Reject.checkNotNull(name),new LinkedHashMap<AttributeDescription,Attribute>());}  }
class C{  protected void addMenus(){  add(createFileMenuBar());  add(createViewMenuBar());  add(createHelpMenuBar());}  }
class C{  private final void consumeExpected(char expected) throws javax.xml.transform.TransformerException {  if (tokenIs(expected)) {    nextToken();  } else {    error(XPATHErrorResources.ER_EXPECTED_BUT_FOUND,new Object[]{String.valueOf(expected),m_token});    throw new XPathProcessorException(CONTINUE_AFTER_FATAL_ERROR);  }}  }
class C{  protected void calcScore(){  if ((m_namespace == null) && (m_name == null))   m_score=SCORE_NODETEST; else   if (((m_namespace == WILD) || (m_namespace == null)) && (m_name == WILD))   m_score=SCORE_NODETEST; else   if ((m_namespace != WILD) && (m_name == WILD))   m_score=SCORE_NSWILD; else   m_score=SCORE_QNAME;  m_isTotallyWild=(m_namespace == null && m_name == WILD);}  }
class C{  protected void fireStartElem(String elemName) throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_STARTELEMENT,elemName,m_attributes);  }}  }
class C{  public static void addRecordsAtRandom(WorkflowTrace trace,ConnectionEnd messageIssuer){  List<ProtocolMessage> protocolMessages=trace.getProtocolMessages();  Random random=RandomHelper.getRandom();  int recordsNumber=random.nextInt(4);  int i=0;  while (recordsNumber > 0 && i < MAX_MODIFICATION_COUNT) {    i++;    int randomPM=random.nextInt(protocolMessages.size());    ProtocolMessage pm=protocolMessages.get(randomPM);    if (pm.getMessageIssuer() == messageIssuer) {      Record r=new Record();      r.setMaxRecordLengthConfig(random.nextInt(50));      pm.addRecord(r);      recordsNumber--;      LOGGER.debug("Adding a new record to {}",pm.getClass());    }  }}  }
class C{  public static boolean isBookSearchUrl(String url){  return url.startsWith("http://google.com/books") || url.startsWith("http://books.google.");}  }
class C{  private void calculatePercentComplete(){  if (getTotalRecords() == 0) {    percentComplete=100;  } else   if (getRecordsCompleted() == 0) {    percentComplete=0;  } else {    percentComplete=(double)((double)getRecordsCompleted() / (double)getTotalRecords()) * 100d;  }}  }
class C{  public void testIntValueNegative3(){  byte aBytes[]={12,56,100,-2,-76,127,45,91,3};  int sign=-1;  int resInt=-2133678851;  int aNumber=new BigInteger(sign,aBytes).intValue();  assertTrue(aNumber == resInt);}  }
class C{  public String soapMessageToString(final SOAPMessage message){  try {    ByteArrayOutputStream bop=new ByteArrayOutputStream();    message.writeTo(bop);    return new String(bop.toByteArray());  } catch (  IOException ie) {    debug.error("SOAPCommunicator.soapMessageToString:",ie);    return null;  }catch (  SOAPException soapex) {    debug.error("SOAPCommunicator.soapMessageToString:",soapex);    return null;  }}  }
class C{  public static String addSchemaFileToElementDefinitionIfAbsent(String definition,String schemaFile){  if (schemaFile != null && !definition.contains(SCHEMA_PROPERTY_FILENAME)) {    int pos=definition.lastIndexOf(')');    return definition.substring(0,pos).trim() + " " + SCHEMA_PROPERTY_FILENAME+ " '"+ schemaFile+ "' )";  }  return definition;}  }
class C{  public InvalidParameterSpecException(){  super();}  }
class C{  @Override public ShapeTileSimplex intersection(ShapeTileBox p_box){  return intersection(p_box.to_Simplex());}  }
class C{  public void insert(MutableTreeNode newChild,int childIndex){  if (!allowsChildren) {    throw new IllegalStateException("node does not allow children");  } else   if (newChild == null) {    throw new IllegalArgumentException("new child is null");  } else   if (isNodeAncestor(newChild)) {    throw new IllegalArgumentException("new child is an ancestor");  }  MutableTreeNode oldParent=(MutableTreeNode)newChild.getParent();  if (oldParent != null) {    oldParent.remove(newChild);  }  newChild.setParent(this);  if (children == null) {    children=new Vector();  }  children.insertElementAt(newChild,childIndex);}  }
class C{  public void testSubjectAltNameAndCn(){  assertFalse(verifier.verify("imap.g.com",new StubX509Certificate("").addSubjectAlternativeName(ALT_DNS_NAME,"a.y.com")));  assertFalse(verifier.verify("imap.g.com",new StubX509Certificate("cn=imap.g.com").addSubjectAlternativeName(ALT_DNS_NAME,"a.y.com")));  assertTrue(verifier.verify("imap.g.com",new StubX509Certificate("").addSubjectAlternativeName(ALT_DNS_NAME,"imap.g.com")));}  }
class C{  private boolean isCauseConcurrentModificationException(Throwable ex,int maxLevels){  return isCauseException(ex,OConcurrentModificationException.class,maxLevels);}  }
class C{  private void increaseUseCount(){  if (m_vec2 != null)   m_useCount2++;}  }
class C{  public void sendAcknowledgement() throws IOException {  if (isCommitted()) {    return;  }  if (included) {    return;  }  getCoyoteResponse().action(ActionCode.ACK,null);}  }
class C{  public URLStreamHandler createURLStreamHandler(String protocol){  String method="AMURLStreamHandlerFactory.createURLStreamHandler ";  URLStreamHandler prot_handler=null;  if (protocol.equalsIgnoreCase("https") && (prot_handler_string != null)) {    try {      prot_handler=(URLStreamHandler)Class.forName(prot_handler_string).newInstance();    } catch (    ClassNotFoundException e) {      debug.error(method + "Failed to find protocol handler class ",e);    }catch (    InstantiationException e) {      debug.error(method + "Failed to instantiate protocol handler class ",e);    }catch (    IllegalAccessException e) {      debug.error(method + "Invalid access for protocol handler class ",e);    }  }  return prot_handler;}  }
class C{  @SuppressWarnings("unchecked") public void test_binarySearchLjava_util_ListLjava_lang_Object(){  List localList=new LinkedList();  assertEquals(-1,Collections.binarySearch(localList,new Object()));  localList.add(new Object());  try {    Collections.binarySearch(localList,new Integer(1));    fail("Should throw ClassCastException");  } catch (  ClassCastException e) {  }  LinkedList<String> lls=new LinkedList<String>();  lls.add("1");  lls.add("2");  lls.add("3");  lls.add("4");  lls.add("");  LinkedList ll=lls;  try {    Collections.binarySearch(ll,new Integer(10));    fail("ClassCastException expected");  } catch (  ClassCastException e) {  }}  }
class C{  @Override public int hashCode(){  return date.hashCode() ^ time.hashCode();}  }
class C{  public boolean checkItemInDag(String id){  return this.parentChildMap.keySet().contains(id) || this.getLeaves().contains(id);}  }
class C{  private T compareSplit(String resource,String target,String breakPoint){  if (!resource.contains(breakPoint)) {    return super.compare(resource,target,true);  }  T firstMatch=compareBeforeBreakpoint(resource,target,breakPoint);  if (noMatch.equals(firstMatch) || subResourceMatch.equals(firstMatch)) {    return firstMatch;  }  T secondMatch=compareAfterBreakpoint(resource,target,breakPoint);  return wildcardResponseCombiner(firstMatch,secondMatch);}  }
class C{  protected void sendProxyAuthnRequest(FSAuthnRequest authnRequest,String preferredIDP) throws FSException, IOException {  FSAuthnRequest newAuthnRequest=getNewAuthnRequest(authnRequest);  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSSSOAndFedHandler.sendProxyAuthnRequest:" + "New Authentication request:" + newAuthnRequest.toXMLString());  }  FSSessionManager sessManager=FSSessionManager.getInstance(IDFFMetaUtils.getMetaAlias(realm,hostedEntityId,IFSConstants.SP,null));  String requestID=newAuthnRequest.getRequestID();  sessManager.setAuthnRequest(requestID,newAuthnRequest);  sessManager.setProxySPDescriptor(requestID,spDescriptor);  sessManager.setProxySPAuthnRequest(requestID,authnRequest);  sessManager.setIDPEntityID(requestID,preferredIDP);  String targetURL=null;  SPDescriptorType localDescriptor=null;  BaseConfigType localDescriptorConfig=null;  try {    IDPDescriptorType idpDescriptor=metaManager.getIDPDescriptor(realm,preferredIDP);    targetURL=idpDescriptor.getSingleSignOnServiceURL();    if (targetURL == null) {      FSUtils.debug.error("FSSSOAndFedHandler.sendProxyAuthnRequest: Single " + "Sign-on service is not found for the proxying IDP");      return;    }    localDescriptor=metaManager.getSPDescriptor(realm,hostedEntityId);    localDescriptorConfig=metaManager.getSPDescriptorConfig(realm,hostedEntityId);  } catch (  Exception e) {    FSUtils.debug.error("FSSSOAndFedHandler.sendProxyAuthnRequest:",e);    return;  }  String queryString=newAuthnRequest.toURLEncodedQueryString();  if (FSServiceUtils.isSigningOn()) {    String certAlias=IDFFMetaUtils.getFirstAttributeValueFromConfig(localDescriptorConfig,IFSConstants.SIGNING_CERT_ALIAS);    if (localDescriptor.isAuthnRequestsSigned()) {      queryString=FSSignatureUtil.signAndReturnQueryString(queryString,certAlias);    }  }  StringBuffer tmpURL=new StringBuffer(1000);  if (targetURL.indexOf("?") != -1) {    tmpURL.append(targetURL).append("&").append(queryString);  } else {    tmpURL.append(targetURL).append("?").append(queryString);  }  String redirectURL=tmpURL.toString();  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSSSOAndFedHandler.sendProxyAuthnRequest:" + "SSO URL to be redirected" + redirectURL);  }  response.setStatus(response.SC_MOVED_TEMPORARILY);  response.setHeader("Location",redirectURL);  response.sendRedirect(redirectURL);}  }
class C{  public URI(URI p_base,String p_uriSpec) throws MalformedURIException {  initialize(p_base,p_uriSpec);}  }
class C{  public void testGetSystemId() throws Throwable {  Document doc;  DocumentType docType;  DOMImplementation domImpl;  String publicId;  String systemId;  doc=(Document)load("staffNS",builder);  domImpl=doc.getImplementation();  docType=domImpl.createDocumentType("l2:root","PUB","SYS");  publicId=docType.getPublicId();  systemId=docType.getSystemId();  assertEquals("documenttypepublicid01","PUB",publicId);  assertEquals("documenttypesystemid01","SYS",systemId);}  }
class C{  public static LDAPControl readControl(ASN1Reader reader) throws LDAPException {  try {    reader.readStartSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_CONTROL_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  String oid;  try {    oid=reader.readOctetStringAsString();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_CONTROL_DECODE_OID.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  boolean isCritical=false;  ByteString value=null;  try {    if (reader.hasNextElement() && reader.peekType() == ASN1.UNIVERSAL_BOOLEAN_TYPE) {      try {        isCritical=reader.readBoolean();      } catch (      Exception e2) {        logger.traceException(e2);        LocalizableMessage message=ERR_LDAP_CONTROL_DECODE_CRITICALITY.get(e2);        throw new LDAPException(PROTOCOL_ERROR,message,e2);      }    }    if (reader.hasNextElement() && reader.peekType() == ASN1.UNIVERSAL_OCTET_STRING_TYPE) {      try {        value=reader.readOctetString();      } catch (      Exception e2) {        logger.traceException(e2);        LocalizableMessage message=ERR_LDAP_CONTROL_DECODE_VALUE.get(e2);        throw new LDAPException(PROTOCOL_ERROR,message,e2);      }    }  } catch (  IOException e) {    logger.traceException(e);  }  try {    reader.readEndSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_CONTROL_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  return new LDAPControl(oid,isCritical,value);}  }
class C{  public boolean isRecordingEnabled(){  return enableRecording;}  }
class C{  public void testRemoveNamedItemNS1() throws Throwable {  Document doc;  NamedNodeMap attributes;  Node element;  Attr attribute;  NodeList elementList;  doc=(Document)load("staffNS",builder);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=elementList.item(1);  attributes=element.getAttributes();  attribute=(Attr)attributes.removeNamedItemNS("http://www.nist.gov","domestic");  attribute=(Attr)attributes.getNamedItemNS("http://www.nist.gov","domestic");  assertNull("namednodemapremovenameditemns01",attribute);}  }
class C{  private void reAllocBuff(int len){  if (bufferSize + len <= cb.length) {    bufferSize=cb.length;    return;  }  if (len < cb.length) {    len=cb.length;  }  char[] tmp=new char[cb.length + len];  System.arraycopy(cb,0,tmp,0,cb.length);  cb=tmp;  bufferSize=cb.length;}  }
class C{  public Duration plusDays(long daysToAdd){  return plus(Math.multiplyExact(daysToAdd,SECONDS_PER_DAY),0);}  }
class C{  public static final XPATHErrorResources loadResourceBundle(String className) throws MissingResourceException {  Locale locale=Locale.getDefault();  String suffix=getResourceSuffix(locale);  try {    return (XPATHErrorResources)ResourceBundle.getBundle(className + suffix,locale);  } catch (  MissingResourceException e) {    try {      return (XPATHErrorResources)ResourceBundle.getBundle(className,new Locale("en","US"));    } catch (    MissingResourceException e2) {      throw new MissingResourceException("Could not load any resource bundles.",className,"");    }  }}  }
class C{  public boolean equals(Object o){  if (o instanceof ServiceConfigManager) {    ServiceConfigManager oscm=(ServiceConfigManager)o;    if (serviceName.equals(oscm.serviceName) && version.equals(oscm.version)) {      return (true);    }  }  return (false);}  }
class C{  public void namespaceAfterStartElement(final String prefix,final String uri) throws SAXException {  startPrefixMapping(prefix,uri,false);}  }
class C{  private void checkServerPassword(Collection<LocalizableMessage> errorMessages){  addErrorMessageIfArgumentsConflict(errorMessages,directoryManagerPwdStringArg,directoryManagerPwdFileArg);  if (noPromptArg.isPresent() && !directoryManagerPwdStringArg.isPresent() && !directoryManagerPwdFileArg.isPresent()) {    errorMessages.add(ERR_INSTALLDS_NO_ROOT_PASSWORD.get(directoryManagerPwdStringArg.getLongIdentifier(),directoryManagerPwdFileArg.getLongIdentifier()));  }}  }
class C{  protected int countAncestors(ElemTemplateElement elem){  int count=0;  while (null != elem) {    count++;    elem=elem.getParentElem();  }  return count;}  }
class C{  public AudienceRestrictionCondition(org.w3c.dom.Element audienceRestrictionConditionElement) throws SAMLException {  Element elt=(Element)audienceRestrictionConditionElement;  String eltName=elt.getLocalName();  if (eltName == null) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("AudienceRestrictionCondition: " + "null condition ");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  if (!(eltName.equals("AudienceRestrictionCondition"))) {    if (!(eltName.equals("Condition"))) {      if (SAMLUtilsCommon.debug.messageEnabled()) {        SAMLUtilsCommon.debug.message("AudienceRestrictionCondition: " + "unsupported condition ");      }      throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("unsupportedCondition"));    }  }  if (eltName.equals("Condition")) {    String type=elt.getAttribute("xsi:type");    if (!(type.equals("AudienceRestrictionCondition"))) {      if (SAMLUtilsCommon.debug.messageEnabled()) {        SAMLUtilsCommon.debug.message("AudienceRestrictionCondition: invalid condition");      }      throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("invalidElement"));    }  }  NodeList nl=elt.getChildNodes();  if (nl.getLength() <= 0) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("AudienceRestrictionCondition: " + "no Audience in this Element");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("noElement"));  }  int length=nl.getLength();  for (int n=0; n < length; n++) {    Node child=(Node)nl.item(n);    if (child.getNodeType() != Node.ELEMENT_NODE) {      continue;    }    String childName=child.getLocalName();    if (childName.equals("Audience")) {      _audience.add(XMLUtils.getElementValue((Element)child));    } else {      if (SAMLUtilsCommon.debug.messageEnabled()) {        SAMLUtilsCommon.debug.message("AudienceRestrictionCondition:" + "  invalid element found");      }      throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("invalidElement"));    }  }}  }
class C{  public void recreate(EglCore newEglCore){  if (mSurface == null) {    throw new RuntimeException("not yet implemented for SurfaceTexture");  }  mEglCore=newEglCore;  createWindowSurface(mSurface);}  }
class C{  public CallbackRequest handle(HttpServletRequest req) throws LineBotCallbackException, IOException {  String signature=req.getHeader("X-Line-Signature");  if (signature == null || signature.length() == 0) {    throw new LineBotCallbackException("Missing 'X-Line-Signature' header");  }  final byte[] json=ByteStreams.toByteArray(req.getInputStream());  if (log.isDebugEnabled()) {    log.debug("got: {}",new String(json,StandardCharsets.UTF_8));  }  if (!lineSignatureValidator.validateSignature(json,signature)) {    throw new LineBotCallbackException("Invalid API signature");  }  final CallbackRequest callbackRequest=objectMapper.readValue(json,CallbackRequest.class);  if (callbackRequest == null || callbackRequest.getEvents() == null) {    throw new LineBotCallbackException("Invalid content");  }  return callbackRequest;}  }
class C{  public void removeLocalEjb(String name){  entries.remove(name);  ContextLocalEjb localEjb=null;synchronized (localEjbs) {    localEjb=localEjbs.remove(name);  }  if (localEjb != null) {    support.firePropertyChange("localEjb",localEjb,null);    localEjb.setNamingResources(null);  }}  }
class C{  private void cleanUp(){  if (resources.size() == 0) {    return;  }  javax.naming.Context ctxt;  try {    if (container instanceof Server) {      ctxt=((Server)container).getGlobalNamingContext();    } else {      ctxt=ContextBindings.getClassLoader();      ctxt=(javax.naming.Context)ctxt.lookup("comp/env");    }  } catch (  NamingException e) {    log.warn(sm.getString("namingResources.cleanupNoContext",container),e);    return;  }  for (  ContextResource cr : resources.values()) {    if (cr.getSingleton()) {      String closeMethod=cr.getCloseMethod();      if (closeMethod != null && closeMethod.length() > 0) {        String name=cr.getName();        Object resource;        try {          resource=ctxt.lookup(name);        } catch (        NamingException e) {          log.warn(sm.getString("namingResources.cleanupNoResource",cr.getName(),container),e);          continue;        }        cleanUp(resource,name,closeMethod);      }    }  }}  }
class C{  protected ForwardingFileObject(F fileObject){  fileObject.getClass();  this.fileObject=fileObject;}  }
class C{  @Override public void draw(java.awt.Graphics p_graphics,freert.graphics.GdiContext p_graphics_context,double p_intensity){  Color draw_color=p_graphics_context.get_trace_colors(false)[get_layer()];  double layer_visibility=p_graphics_context.get_layer_visibility(get_layer());  p_graphics_context.fill_area(get_shape(),p_graphics,draw_color,p_intensity * layer_visibility);  p_graphics_context.draw_boundary(get_shape(),0,draw_color,p_graphics,layer_visibility);}  }
class C{  public static void siteNames(Map<String,String> sNames,Map<String,String> urlSites){  String classMethod="Agent.siteNames:";  if (sNames.isEmpty()) {    if (debug.messageEnabled()) {      debug.message(classMethod + "no sites");    }    return;  }  Date startDate=newDate();  siteToURL=sNames;  URLToSite=urlSites;  if (debug.messageEnabled()) {    StringBuilder sb=new StringBuilder("Site Names and URLs:\n");    for (    Map.Entry<String,String> entry : sNames.entrySet()) {      sb.append("    siteName = ").append(entry.getKey()).append(", primary URL = ").append(entry.getValue()).append("\n");    }    debug.message(classMethod + sb.toString());  }  int i=1;  for (  Map.Entry<String,String> entry : siteIdTable.entrySet()) {    String svrId=entry.getKey();    String siteId=entry.getValue();    String svrURL=namingTable.get(siteId);    String siteName=urlSites.get(svrURL);    String escSiteName=getEscapedString(siteName);    SsoServerTopologyImpl tg=sunMib.getTopologyGroup();    if (siteId.equals(svrId)) {      SsoServerSitesEntryImpl ssse=new SsoServerSitesEntryImpl(sunMib);      Integer sid=Integer.valueOf(0);      try {        sid=Integer.valueOf(siteId);      } catch (      NumberFormatException nfe) {        debug.error(classMethod + "invalid siteid (" + siteId+ "): "+ nfe.getMessage(),nfe);      }      ssse.SiteId=sid;      ssse.SiteName=escSiteName;      if (debug.messageEnabled()) {        debug.message(classMethod + "doing siteName " + siteName+ ", svrURL = "+ svrURL);      }      final ObjectName stName=ssse.createSsoServerSitesEntryObjectName(server);      if (stName == null) {        debug.error(classMethod + "Error creating object for siteName '" + siteName+ "'");        continue;      }      try {        TableSsoServerSitesTable stTbl=tg.accessSsoServerSitesTable();        stTbl.addEntry(ssse,stName);        if ((server != null) && (stName != null)) {          server.registerMBean(ssse,stName);        }      } catch (      Exception ex) {        debug.error(classMethod + siteId,ex);      }    } else {      SsoServerSiteMapEntryImpl ssse=new SsoServerSiteMapEntryImpl(sunMib);      ssse.MapServerURL=namingTable.get(svrId);      ssse.MapSiteName=escSiteName;      ssse.MapId=siteId;      try {        ssse.SiteMapId=Integer.valueOf(svrId);      } catch (      NumberFormatException nfe) {        debug.error(classMethod + "invalid serverID (" + svrId+ "): "+ nfe.getMessage(),nfe);        continue;      }      ssse.SiteMapIndex=new Integer(i++);      final ObjectName smName=ssse.createSsoServerSiteMapEntryObjectName(server);      if (smName == null) {        debug.error(classMethod + "Error creating object for server siteName '" + siteName+ "'");        continue;      }      if (debug.messageEnabled()) {        debug.message(classMethod + "doing servermap entry; sitemapid = " + svrId+ ", mapid = "+ siteId+ ", siteName = "+ siteName);      }      try {        TableSsoServerSiteMapTable stTbl=tg.accessSsoServerSiteMapTable();        stTbl.addEntry(ssse,smName);        if ((server != null) && (smName != null)) {          server.registerMBean(ssse,smName);        }      } catch (      Exception ex) {        debug.error(classMethod + siteId + "/"+ svrId,ex);      }    }  }  Date stopDate=newDate();  if (debug.messageEnabled()) {    String stDate=sdf.format(startDate);    String endDate=sdf.format(stopDate);    debug.message("Agent.siteNames:\n    Start Time = " + stDate + "\n      End Time = "+ endDate);  }}  }
class C{  @RequestMapping(value="/activate",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<String> activateAccount(@RequestParam(value="key") String key){  return userService.activateRegistration(key).map(null).orElse(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));}  }
class C{  public void doPost(HttpServletRequest req,HttpServletResponse resp) throws ServletException, java.io.IOException {  if (SAMLUtils.getMaxContentLength() != 0) {    int length=req.getContentLength();    if (length == -1) {      throw new ServletException(SAMLUtils.bundle.getString("unknownLength"));    }    if (length > SAMLUtils.getMaxContentLength()) {      if (SAMLUtils.debug.messageEnabled()) {        SAMLUtils.debug.message("content length too large" + length);      }      throw new ServletException(SAMLUtils.bundle.getString("largeContentLength"));    }  }  String remoteAddr=ClientUtils.getClientIPAddress(req);  Set partnerSourceID=null;  if ((partnerSourceID=checkCaller(req,resp)) != null) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message(" got request from a trusted server, " + "processing it now..");    }    try {      MimeHeaders mimeHeaders=SAMLUtils.getMimeHeaders(req);      ServletInputStream sInputStream=req.getInputStream();      SOAPMessage soapMessage=msgFactory.createMessage(mimeHeaders,sInputStream);      SOAPMessage soapMessageReply=null;      soapMessageReply=this.onMessage(req,resp,soapMessage,partnerSourceID);      if (soapMessageReply != null) {        if (soapMessageReply.saveRequired())         soapMessageReply.saveChanges();        if (containsFault(soapMessageReply)) {          if (SAMLUtils.debug.messageEnabled()) {            SAMLUtils.debug.message("Contains a SOAPFault!");          }          resp.setStatus(resp.SC_INTERNAL_SERVER_ERROR);        } else {          resp.setStatus(resp.SC_OK);        }        SAMLUtils.setMimeHeaders(soapMessageReply.getMimeHeaders(),resp);        ServletOutputStream sOutputStream=resp.getOutputStream();        soapMessageReply.writeTo(sOutputStream);        sOutputStream.flush();      }    } catch (    Exception e) {      throw new ServletException(e);    }  } else {    SAMLUtils.debug.error("Error message from SOAP Receiver:" + remoteAddr + " is untrusted site");    String[] data={SAMLUtils.bundle.getString("untrustedSite"),remoteAddr};    LogUtils.error(java.util.logging.Level.INFO,LogUtils.UNTRUSTED_SITE,data);    SOAPMessage faultReply=FormSOAPError(resp,"Server","untrustedSite",null);    SAMLUtils.setMimeHeaders(faultReply.getMimeHeaders(),resp);    ServletOutputStream sOutputStream=resp.getOutputStream();    try {      faultReply.writeTo(sOutputStream);    } catch (    SOAPException se) {      throw new ServletException(se);    }    sOutputStream.flush();  }}  }
class C{  public JKServletContext createJkServletContext(){  return new JKServletContext();}  }
class C{  public final AMAccessAuditEventBuilder responseWithDetail(AccessAuditEventBuilder.ResponseStatus status,String statusCode,JsonValue detail){  Reject.ifNull(detail);  Object object=object(field("status",status == null ? null : status.toString()),field("statusCode",statusCode),field("detail",detail.getObject()));  this.jsonValue.put("response",object);  return this;}  }
class C{  private void doRecon(ReconciliationContext reconContext) throws SynchronizationException {  final ReconciliationStatistic stats=reconContext.getStatistics();  stats.reconStart();  String reconId=reconContext.getReconId();  EventEntry measureIdQueries=Publisher.start(EVENT_RECON_ID_QUERIES,reconId,null);  reconContext.setStage(ReconStage.ACTIVE_QUERY_ENTRIES);  Context context=ObjectSetContext.get();  try {    executeOnRecon(context,reconContext);    context=new TriggerContext(context,"recon");    ObjectSetContext.push(context);    logReconStart(reconContext,context);    stats.sourceQueryStart();    final long firstSourceQueryStart=startNanoTime(reconContext);    ReconQueryResult sourceQueryResult=reconContext.querySourceIter(reconSourceQueryPageSize,null);    Iterator<ResultEntry> sourceIter=sourceQueryResult.getIterator();    stats.addDuration(DurationMetric.sourceQuery,firstSourceQueryStart);    stats.sourceQueryEnd();    if (!sourceIter.hasNext()) {      if (!reconContext.getReconHandler().allowEmptySourceSet()) {        LOGGER.warn("Cannot reconcile from an empty data source, unless allowEmptySourceSet is true.");        reconContext.setStage(ReconStage.COMPLETED_FAILED);        stats.reconEnd();        logReconEndFailure(reconContext,context);        return;      }    }    Set<String> remainingTargetIds=new LinkedHashSet<>();    ResultIterable targetIterable=new ResultIterable(Collections.<String>emptyList(),Collections.<JsonValue>emptyList());    if (reconContext.getReconHandler().isRunTargetPhase()) {      stats.targetQueryStart();      final long targetQueryStart=startNanoTime(reconContext);      targetIterable=reconContext.queryTarget();      remainingTargetIds.addAll(targetIterable.getAllIds());      remainingTargetIds=Collections.synchronizedSet(remainingTargetIds);      stats.addDuration(DurationMetric.targetQuery,targetQueryStart);      stats.targetQueryEnd();    }    Map<String,Map<String,Link>> allLinks=null;    if (prefetchLinks) {      allLinks=new HashMap<>();      int totalLinkEntries=0;      stats.linkQueryStart();      for (      String linkQualifier : getAllLinkQualifiers(context,reconContext)) {        final long linkQueryStart=startNanoTime(reconContext);        Map<String,Link> linksByQualifier=Link.getLinksForMapping(ObjectMapping.this,linkQualifier);        stats.addDuration(DurationMetric.linkQuery,linkQueryStart);        allLinks.put(linkQualifier,linksByQualifier);        totalLinkEntries+=linksByQualifier.size();      }      reconContext.setTotalLinkEntries(totalLinkEntries);      stats.linkQueryEnd();    }    measureIdQueries.end();    EventEntry measureSource=Publisher.start(EVENT_RECON_SOURCE,reconId,null);    reconContext.setStage(ReconStage.ACTIVE_RECONCILING_SOURCE);    stats.sourcePhaseStart();    final long sourcePhaseStart=startNanoTime(reconContext);    boolean queryNextPage=false;    LOGGER.info("Performing source sync for recon {} on mapping {}",reconId,name);    do {      if (queryNextPage) {        LOGGER.debug("Querying next page of source ids");        final long pagedSourceQueryStart=startNanoTime(reconContext);        sourceQueryResult=reconContext.querySourceIter(reconSourceQueryPageSize,sourceQueryResult.getPagingCookie());        sourceIter=sourceQueryResult.getIterator();        stats.addDuration(DurationMetric.sourceQuery,pagedSourceQueryStart);      }      ReconPhase sourcePhase=new ReconPhase(sourceIter,reconContext,context,allLinks,remainingTargetIds,sourceRecon);      sourcePhase.setFeedSize(feedSize);      sourcePhase.execute();      queryNextPage=true;    } while (reconSourceQueryPaging && sourceQueryResult.getPagingCookie() != null);    stats.addDuration(DurationMetric.sourcePhase,sourcePhaseStart);    stats.sourcePhaseEnd();    measureSource.end();    LOGGER.debug("Remaining targets after source phase : {}",remainingTargetIds);    if (reconContext.getReconHandler().isRunTargetPhase()) {      EventEntry measureTarget=Publisher.start(EVENT_RECON_TARGET,reconId,null);      final long targetPhaseStart=startNanoTime(reconContext);      reconContext.setStage(ReconStage.ACTIVE_RECONCILING_TARGET);      targetIterable=targetIterable.removeNotMatchingEntries(remainingTargetIds);      stats.targetPhaseStart();      ReconPhase targetPhase=new ReconPhase(targetIterable.iterator(),reconContext,context,allLinks,null,targetRecon);      targetPhase.setFeedSize(feedSize);      targetPhase.execute();      stats.addDuration(DurationMetric.targetPhase,targetPhaseStart);      stats.targetPhaseEnd();      measureTarget.end();    }    stats.reconEnd();    reconContext.setStage(ReconStage.ACTIVE_PROCESSING_RESULTS);    doResults(reconContext,context);    reconContext.setStage(ReconStage.COMPLETED_SUCCESS);    logReconEndSuccess(reconContext,context);  } catch (  InterruptedException ex) {    SynchronizationException syncException;    if (reconContext.isCanceled()) {      reconContext.setStage(ReconStage.COMPLETED_CANCELED);      syncException=new SynchronizationException("Reconciliation canceled: " + reconContext.getReconId());    } else {      reconContext.setStage(ReconStage.COMPLETED_FAILED);      syncException=new SynchronizationException("Interrupted execution of reconciliation",ex);    }    doResults(reconContext,context);    throw syncException;  }catch (  SynchronizationException e) {    reconContext.setStage(ReconStage.COMPLETED_FAILED);    if (reconContext.getStage() != ReconStage.ACTIVE_PROCESSING_RESULTS && reconContext.getStage() != ReconStage.COMPLETED_SUCCESS) {      doResults(reconContext,context);    }    stats.reconEnd();    logReconEndFailure(reconContext,context);    throw new SynchronizationException("Synchronization failed",e);  }catch (  Exception e) {    reconContext.setStage(ReconStage.COMPLETED_FAILED);    doResults(reconContext,context);    stats.reconEnd();    logReconEndFailure(reconContext,context);    throw new SynchronizationException("Synchronization failed",e);  } finally {    ObjectSetContext.pop();    if (!stats.hasEnded()) {      stats.reconEnd();    }  }}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public ServerSideSortRequestControl(boolean isCritical,List<SortKey> sortKeys){  super(OID_SERVER_SIDE_SORT_REQUEST_CONTROL,isCritical);  this.sortKeys=sortKeys;}  }
class C{  public XMLStreamException(String msg,Location location){  super("ParseError at [row,col]:[" + location.getLineNumber() + ","+ location.getColumnNumber()+ "]\n"+ "Message: "+ msg);  this.location=location;}  }
class C{  public ID3v24Frame(ByteBuffer byteBuffer) throws InvalidFrameException, InvalidDataTypeException {  this(byteBuffer,"");}  }
class C{  public Table addCell(Image image){  return addCell(new Cell().add(image));}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.KeyInfoElement createKeyInfoElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.KeyInfoElementImpl();}  }
class C{  private Object readResolve() throws ObjectStreamException {  return m_dialogStateArray[m_dialogState];}  }
class C{  public final void testEqualsObject04(){  ECFieldF2m f1=new ECFieldF2m(2000,new int[]{981,2,1});  ECFieldF2m f2=new ECFieldF2m(2000,BigInteger.valueOf(0L).setBit(0).setBit(1).setBit(2).setBit(981).setBit(2000));  assertTrue(f1.equals(f2) && f2.equals(f1));}  }
class C{  public void test_DivideBigDecimalRoundingModeUP(){  String a="-37361671119238118911893939591735";  String b="74723342238476237823787879183470";  RoundingMode rm=RoundingMode.UP;  String c="-1";  BigDecimal aNumber=new BigDecimal(new BigInteger(a));  BigDecimal bNumber=new BigDecimal(new BigInteger(b));  BigDecimal result=aNumber.divide(bNumber,rm);  assertEquals("incorrect value",c,result.toString());}  }
class C{  public KeyGenerationParameters(SecureRandom random,int strength){  this.random=random;  this.strength=strength;}  }
class C{  protected File[] filterDirectoryContents(File directory,int depth,File[] files) throws IOException {  return files;}  }
class C{  public GregorianCalendar(TimeZone zone,Locale aLocale){  super(zone,aLocale);  gdate=(BaseCalendar.Date)gcal.newCalendarDate(zone);  setTimeInMillis(System.currentTimeMillis());}  }
class C{  public static void clearRootClientConnectionAtShutdown(){  InternalClientConnection.clearRootClientConnectionAtShutdown();}  }
class C{  public void delete(String id) throws NotFoundException, ServerException {  SyncResultHandler<String> handler=new SyncResultHandler<String>();  try {    taskExecutor.execute(id,taskFactory.delete(id,handler));    handler.getResults();  } catch (  ServerException e) {    throw e;  }catch (  DataLayerException e) {    if (debug.warningEnabled()) {      debug.warning("Unable to create token corresponding",e);    }    throw new ServerException("Could not create token in token data store: " + e.getMessage());  }}  }
class C{  public int hashCode(){  return selectedUserDNs.hashCode();}  }
class C{  public static List<SearchScope> values(){  return IMMUTABLE_ELEMENTS;}  }
class C{  private boolean createFolder() throws ConnectorException {  File dir=new File(configuration.getTypes().get(type).getPath() + currentFolder + newFolderName);  if (dir.exists()) {    throw new ConnectorException(Constants.Errors.CKFINDER_CONNECTOR_ERROR_ALREADY_EXIST);  } else {    return FileUtils.mkdir(dir,configuration);  }}  }
class C{  public final boolean isWarnEnabled(){  return false;}  }
class C{  public int addClientExternal(SSOToken token,Map props) throws AMClientCapException {synchronized (externalClientData) {    extCapInstance.addClient(token,props);    String ct=getClientType(props);    Map eMap=mergeWithParent(props);    externalClientData.put(ct,eMap);    addToIndexes(ct,eMap);  }  return 0;}  }
class C{  private boolean delete(WriteableTransaction txn,DN dn) throws StorageRuntimeException {  ByteString key=toKey(dn);  if (txn.delete(getName(),key)) {    containsReferrals=containsReferrals(txn);    return true;  }  return false;}  }
class C{  static void installLazyActionMap(JComponent c,Class loaderClass,String defaultsKey){  ActionMap map=(ActionMap)UIManager.get(defaultsKey);  if (map == null) {    map=new LazyActionMap(loaderClass);    UIManager.getLookAndFeelDefaults().put(defaultsKey,map);  }  SwingUtilities.replaceUIActionMap(c,map);}  }
class C{  public void endCDATA() throws SAXException {  m_textType=DTM.TEXT_NODE;}  }
class C{  protected boolean checkIndexRequired(){  String f=filter.getText().trim();  try {    LDAPFilter ldapFilter=LDAPFilter.decode(f);    ArrayList<LocalizableMessage> msgs=new ArrayList<>();    updateIndexRequiredMessages(ldapFilter,msgs);    if (!msgs.isEmpty()) {      StringBuilder sb=new StringBuilder();      for (      LocalizableMessage msg : msgs) {        sb.append("<br>-").append(msg);      }      return displayConfirmationDialog(INFO_CTRL_PANEL_VLV_INDEXES_NOT_DEFINED_CONFIRMATION_TITLE.get(),INFO_CTRL_PANEL_VLV_INDEXES_NOT_DEFINED_CONFIRMATION_MSG.get(getBackend().getBackendID(),sb));    }    return true;  } catch (  Throwable t) {    throw new RuntimeException("Unexpected error: " + t,t);  }}  }
class C{  public BinaryOpValueExp(int o,ValueExp v1,ValueExp v2){  op=o;  exp1=v1;  exp2=v2;}  }
class C{  TagStack(TagElement tag,TagStack next){  this.tag=tag;  this.elem=tag.getElement();  this.next=next;  Element elem=tag.getElement();  if (elem.getContent() != null) {    this.state=new ContentModelState(elem.getContent());  }  if (next != null) {    inclusions=next.inclusions;    exclusions=next.exclusions;    pre=next.pre;  }  if (tag.isPreformatted()) {    pre=true;  }  if (elem.inclusions != null) {    if (inclusions != null) {      inclusions=(BitSet)inclusions.clone();      inclusions.or(elem.inclusions);    } else {      inclusions=elem.inclusions;    }  }  if (elem.exclusions != null) {    if (exclusions != null) {      exclusions=(BitSet)exclusions.clone();      exclusions.or(elem.exclusions);    } else {      exclusions=elem.exclusions;    }  }}  }
class C{  @Override public void send(HandshakeIODataStream out){  out.write(client_version);  out.write(random);  out.writeUint8(session_id.length);  out.write(session_id);  int size=cipher_suites.length << 1;  out.writeUint16(size);  for (int i=0; i < cipher_suites.length; i++) {    out.write(cipher_suites[i].toBytes());  }  out.writeUint8(compression_methods.length);  for (int i=0; i < compression_methods.length; i++) {    out.write(compression_methods[i]);  }}  }
class C{  String reencodeSymmetricKeyAttribute(final String symmetricKeyAttribute,final String requestedInstanceKeyID) throws CryptoManagerException {  final SecretKey secretKey=decodeSymmetricKeyAttribute(symmetricKeyAttribute);  final Map<String,byte[]> certMap=getTrustedCertificates();  if (certMap.get(requestedInstanceKeyID) == null) {    throw new CryptoManagerException(ERR_CRYPTOMGR_REWRAP_SYMMETRIC_KEY_ATTRIBUTE_NO_WRAPPER.get(requestedInstanceKeyID));  }  final byte[] wrappingKeyCert=certMap.get(requestedInstanceKeyID);  return encodeSymmetricKeyAttribute(preferredKeyWrappingTransformation,requestedInstanceKeyID,wrappingKeyCert,secretKey);}  }
class C{  public void postProcess(final HttpResponse response,final HttpProcessor processor,final HttpContext context) throws HttpException, IOException {  if (response == null) {    throw new IllegalArgumentException("HTTP response may not be null");  }  if (processor == null) {    throw new IllegalArgumentException("HTTP processor may not be null");  }  if (context == null) {    throw new IllegalArgumentException("HTTP context may not be null");  }  processor.process(response,context);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testAddress;  NamedNodeMap attributes;  Node child;  String name;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testAddress=elementList.item(1);  attributes=testAddress.getAttributes();  child=attributes.item(0);  name=child.getNodeName();  assertTrue("namednodemapReturnFirstItemAssert",(equals("domestic",name) | equals("street",name)));}  }
class C{  protected void close(Connection dbConnection){  if (dbConnection == null)   return;  try {    if (!dbConnection.getAutoCommit()) {      dbConnection.commit();    }  } catch (  SQLException e) {    containerLog.error("Exception committing connection before closing:",e);  }  try {    dbConnection.close();  } catch (  SQLException e) {    containerLog.error(sm.getString("dataSourceRealm.close"),e);  }}  }
class C{  public JLabel(String text){  this(text,null,LEADING);}  }
class C{  public static PlayerInteractEvent callPlayerInteractEvent(EntityHuman who,Action action,ItemStack itemstack,EnumHand hand){  if (action != Action.LEFT_CLICK_AIR && action != Action.RIGHT_CLICK_AIR) {    throw new AssertionError(String.format("%s performing %s with %s",who,action,itemstack));  }  return callPlayerInteractEvent(who,action,null,EnumDirection.SOUTH,itemstack,hand);}  }
class C{  public String format(DateTimeFormatter formatter){  Objects.requireNonNull(formatter,"formatter");  return formatter.format(this);}  }
class C{  public boolean checkSessionLocal(SessionID sessionId) throws SessionException {  return sessionOperationStrategy.getOperation(sessionId).checkSessionLocal(sessionId);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  String version="";  String version1="1.0";  String version2="2.0";  String featureCore;  String featureXML;  boolean success;  java.util.List featuresXML=new java.util.ArrayList();  featuresXML.add("XML");  featuresXML.add("xmL");  java.util.List featuresCore=new java.util.ArrayList();  featuresCore.add("Core");  featuresCore.add("CORE");  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  for (int indexN10063=0; indexN10063 < featuresXML.size(); indexN10063++) {    featureXML=(String)featuresXML.get(indexN10063);    success=domImpl.hasFeature(featureXML,version);    assertTrue("domimplementationhasfeature01_XML_1",success);    success=domImpl.hasFeature(featureXML,version1);    assertTrue("domimplementationhasfeature01_XML_2",success);  }  for (int indexN1007C=0; indexN1007C < featuresCore.size(); indexN1007C++) {    featureCore=(String)featuresCore.get(indexN1007C);    success=domImpl.hasFeature(featureCore,version);    assertTrue("domimplementationhasfeature01_Core_1",success);    success=domImpl.hasFeature(featureCore,version1);    success=domImpl.hasFeature(featureCore,version2);    assertTrue("domimplementationhasfeature01_Core_3",success);  }}  }
class C{  String[] toCommandLineArgumentsInitialize(String configurationFile,ConnectionParameters connParams){  return new String[]{"initialize","--no-prompt","--configFile",configurationFile,"--hostSource",connParams.getHostName(),"--portSource",s(connParams.getAdminPort()),"--hostDestination",connParamsForDestination.getHostName(),"--portDestination",s(connParamsForDestination.getAdminPort()),"--adminUID",connParams.getAdminUid(),"--adminPassword",connParams.getAdminPassword(),"--baseDN",baseDn,"--trustAll","--noPropertiesFile"};}  }
class C{  public boolean isPopupMenuVisible(){  ensurePopupMenuCreated();  return popupMenu.isVisible();}  }
class C{  public static void gc(){  memoryMXBean.gc();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeappendchildnomodificationallowederrEE.class,args);}  }
class C{  public static String ensureRight(final String value,final String suffix){  return ensureRight(value,suffix,true);}  }
class C{  private JPanel createRadioButtonPanel(){  JPanel panel=new JPanel(new GridBagLayout());  GridBagConstraints gbc=new GridBagConstraints();  panel.setOpaque(false);  gbc.gridwidth=GridBagConstraints.REMAINDER;  gbc.insets=UIFactory.getEmptyInsets();  gbc.weightx=1.0;  gbc.fill=GridBagConstraints.HORIZONTAL;  panel.add(getRadioButton(NewSuffixOptions.Type.LEAVE_DATABASE_EMPTY),gbc);  gbc.insets.top=UIFactory.TOP_INSET_RADIOBUTTON;  panel.add(getRadioButton(NewSuffixOptions.Type.CREATE_BASE_ENTRY),gbc);  panel.add(getRadioButton(NewSuffixOptions.Type.IMPORT_FROM_LDIF_FILE),gbc);  JPanel auxPanel=createBrowseButtonPanel(FieldName.LDIF_PATH,getLDIFBrowseButton());  gbc.insets=UIFactory.getEmptyInsets();  gbc.insets.top=UIFactory.TOP_INSET_RADIO_SUBORDINATE;  gbc.insets.left=UIFactory.LEFT_INSET_RADIO_SUBORDINATE;  panel.add(auxPanel,gbc);  gbc.insets.left=0;  panel.add(getRadioButton(NewSuffixOptions.Type.IMPORT_AUTOMATICALLY_GENERATED_DATA),gbc);  auxPanel=createNumberEntriesPanel();  gbc.insets=UIFactory.getEmptyInsets();  gbc.insets.top=UIFactory.TOP_INSET_SECONDARY_FIELD;  gbc.insets.left=UIFactory.LEFT_INSET_RADIO_SUBORDINATE;  panel.add(auxPanel,gbc);  return panel;}  }
class C{  private Builder(Event35.Builder other){  super(other);}  }
class C{  public void dup2(){  mv.visitInsn(Opcodes.DUP2);}  }
class C{  public void translate(int deltaX,int deltaY){  for (int i=0; i < npoints; i++) {    xpoints[i]+=deltaX;    ypoints[i]+=deltaY;  }  if (bounds != null) {    bounds.translate(deltaX,deltaY);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataindexsizeerrsubstringnegativeoffset.class,args);}  }
class C{  private static boolean containsCertNicknameErrorMessage(Collection<LocalizableMessage> msgs){  for (  final LocalizableMessage msg : msgs) {    if (StaticUtils.hasDescriptor(msg,ERR_INSTALLDS_CERTNICKNAME_NOT_FOUND) || StaticUtils.hasDescriptor(msg,ERR_INSTALLDS_MUST_PROVIDE_CERTNICKNAME)) {      return true;    }  }  return false;}  }
class C{  void notifyPendingStatusMessage(){synchronized (eventMonitor) {    pendingStatusMessage=true;    eventMonitor.notifyAll();  }}  }
class C{  public void handleButton1Request(RequestInvocationEvent event){  removePageSessionAttribute(getTrackingTabIDName());  setPageSessionAttribute(getTrackingTabIDName(),Integer.toString(TAB_PROFILE));  forwardToEntitiesViewBean();}  }
class C{  protected final String copyElement(int nodeID,int exptype,SerializationHandler handler) throws SAXException {  final ExtendedType extType=m_extendedTypes[exptype];  String uri=extType.getNamespace();  String name=extType.getLocalName();  if (uri.length() == 0) {    handler.startElement(name);    return name;  } else {    int qnameIndex=m_dataOrQName.elementAt(nodeID);    if (qnameIndex == 0) {      handler.startElement(name);      handler.namespaceAfterStartElement(EMPTY_STR,uri);      return name;    }    if (qnameIndex < 0) {      qnameIndex=-qnameIndex;      qnameIndex=m_data.elementAt(qnameIndex);    }    String qName=m_valuesOrPrefixes.indexToString(qnameIndex);    handler.startElement(qName);    int prefixIndex=qName.indexOf(':');    String prefix;    if (prefixIndex > 0) {      prefix=qName.substring(0,prefixIndex);    } else {      prefix=null;    }    handler.namespaceAfterStartElement(prefix,uri);    return qName;  }}  }
class C{  public boolean aggregate(long timestamp,int aggregationWindow,String ruleActionId,String aggregationKey,Object aggregationValue) throws AggregationRejectException {  checkStaleData(timestamp,ruleActionId);  String key=Utils.createMapKey(timestamp,aggregationWindow,ruleActionId,aggregationKey);  Aggregator aggregator=getAggregationMap().get(key);  if (aggregator == null) {    aggregator=template.getInstance();    getAggregationMap().put(key,aggregator);    getFlushMap().put(key,template.getInstance());  }  if (aggregator.disableLimitChecks() || (aggregator.size() < aggregator.getHardLimit())) {    if (aggregator.add(aggregationValue)) {      return getFlushMap().get(key).add(aggregationValue);    } else {      return false;    }  } else {    throw AggregationRejectException;  }}  }
class C{  public FrameBodyTRSN(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy,int duration){  mMode=SCROLL_MODE;  mFinished=false;  mDuration=duration;  mStartTime=AnimationUtils.currentAnimationTimeMillis();  mStartX=startX;  mStartY=startY;  mFinalX=startX + dx;  mFinalY=startY + dy;  mDeltaX=dx;  mDeltaY=dy;  mDurationReciprocal=1.0f / (float)mDuration;}  }
class C{  public void parse(InputStream stream,String name) throws HyphenationException {  InputSource source=new InputSource(stream);  source.setSystemId(name);  try {    parser.parse(source);  } catch (  FileNotFoundException fnfe) {    throw new HyphenationException("File not found: " + fnfe.getMessage());  }catch (  IOException ioe) {    throw new HyphenationException(ioe.getMessage());  }catch (  SAXException e) {    throw new HyphenationException(errMsg);  }}  }
class C{  boolean fitsOnScreen(){  boolean result=false;  Component component=getComponent();  if (owner != null && component != null) {    int popupWidth=component.getWidth();    int popupHeight=component.getHeight();    Container parent=(Container)SwingUtilities.getRoot(owner);    if (parent instanceof JFrame || parent instanceof JDialog || parent instanceof JWindow) {      Rectangle parentBounds=parent.getBounds();      Insets i=parent.getInsets();      parentBounds.x+=i.left;      parentBounds.y+=i.top;      parentBounds.width-=i.left + i.right;      parentBounds.height-=i.top + i.bottom;      if (JPopupMenu.canPopupOverlapTaskBar()) {        GraphicsConfiguration gc=parent.getGraphicsConfiguration();        Rectangle popupArea=getContainerPopupArea(gc);        result=parentBounds.intersection(popupArea).contains(x,y,popupWidth,popupHeight);      } else {        result=parentBounds.contains(x,y,popupWidth,popupHeight);      }    } else     if (parent instanceof JApplet) {      Rectangle parentBounds=parent.getBounds();      Point p=parent.getLocationOnScreen();      parentBounds.x=p.x;      parentBounds.y=p.y;      result=parentBounds.contains(x,y,popupWidth,popupHeight);    }  }  return result;}  }
class C{  public double num(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return -(m_right.num(xctxt));}  }
class C{  protected void verify(PrivateKey privateKey,Certificate cert) throws ResourceException {  PublicKey publicKey=cert.getPublicKey();  byte[] data={65,66,67,68,69,70,71,72,73,74};  boolean verified;  try {    Signature signer=Signature.getInstance(privateKey.getAlgorithm());    signer.initSign(privateKey);    signer.update(data);    byte[] signed=signer.sign();    Signature verifier=Signature.getInstance(publicKey.getAlgorithm());    verifier.initVerify(publicKey);    verifier.update(data);    verified=verifier.verify(signed);  } catch (  Exception e) {    throw new InternalServerErrorException("Error verifying private key and signed certificate",e);  }  if (!verified) {    throw new BadRequestException("Private key does not match signed certificate");  }}  }
class C{  public static <V>List<V> invertList(List<V> sourceList){  if (isEmpty(sourceList)) {    return sourceList;  }  List<V> invertList=new ArrayList<V>(sourceList.size());  for (int i=sourceList.size() - 1; i >= 0; i--) {    invertList.add(sourceList.get(i));  }  return invertList;}  }
class C{  private String fieldComment(String name,String type,String paramComment){  String comment=String.format("  %s (%s)",name,type);  if (!Strings.isNullOrEmpty(paramComment)) {    if (paramComment.charAt(paramComment.length() - 1) == '\n') {      paramComment=paramComment.substring(0,paramComment.length() - 1);    }    comment+=": " + paramComment.replaceAll("(\\r?\\n)","\n    ");  }  return comment + "\n";}  }
class C{  public void warn(Object message,Throwable exception){  log(Level.WARNING,String.valueOf(message),exception);}  }
class C{  public void testConstrBigIntegerScaleMathContext(){  String a="1231212478987482988429808779810457634781384756794987";  BigInteger bA=new BigInteger(a);  int aScale=10;  int precision=46;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String res="1231212478987482988429808779810457634781384757";  int resScale=4;  BigDecimal result=new BigDecimal(bA,aScale,mc);  assertEquals("incorrect value",res,result.unscaledValue().toString());  assertEquals("incorrect scale",resScale,result.scale());  BigDecimal bd;  BigInteger bi=new BigInteger("12345678901234567890123456789012345");  BigInteger nbi=new BigInteger("-12345678901234567890123456789012345");  mc=new MathContext(31,RoundingMode.UP);  bd=new BigDecimal(bi,-10,mc);  assertEquals("incorrect value","1.234567890123456789012345678902E+44",bd.toString());  bd=new BigDecimal(nbi,-10,mc);  assertEquals("incorrect value","-1.234567890123456789012345678902E+44",bd.toString());  mc=new MathContext(28,RoundingMode.DOWN);  bd=new BigDecimal(bi,-10,mc);  assertEquals("incorrect value","1.234567890123456789012345678E+44",bd.toString());  bd=new BigDecimal(nbi,-10,mc);  assertEquals("incorrect value","-1.234567890123456789012345678E+44",bd.toString());  mc=new MathContext(33,RoundingMode.CEILING);  bd=new BigDecimal(bi,-10,mc);  assertEquals("incorrect value","1.23456789012345678901234567890124E+44",bd.toString());  bd=new BigDecimal(nbi,-10,mc);  assertEquals("incorrect value","-1.23456789012345678901234567890123E+44",bd.toString());  mc=new MathContext(34,RoundingMode.FLOOR);  bd=new BigDecimal(bi,-10,mc);  assertEquals("incorrect value","1.234567890123456789012345678901234E+44",bd.toString());  bd=new BigDecimal(nbi,-10,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901235E+44",bd.toString());  mc=new MathContext(34,RoundingMode.HALF_EVEN);  bd=new BigDecimal(bi,-10,mc);  assertEquals("incorrect value","1.234567890123456789012345678901234E+44",bd.toString());  bd=new BigDecimal(nbi,-10,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901234E+44",bd.toString());  bd=new BigDecimal(new BigInteger("-12345678901234567890123456789012335"),-10,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901234E+44",bd.toString());  mc=new MathContext(34,RoundingMode.HALF_UP);  bd=new BigDecimal(bi,-10,mc);  assertEquals("incorrect value","1.234567890123456789012345678901235E+44",bd.toString());  bd=new BigDecimal(nbi,-10,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901235E+44",bd.toString());  mc=new MathContext(34,RoundingMode.HALF_DOWN);  bd=new BigDecimal(bi,-10,mc);  assertEquals("incorrect value","1.234567890123456789012345678901234E+44",bd.toString());  bd=new BigDecimal(nbi,-10,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901234E+44",bd.toString());  mc=new MathContext(34,RoundingMode.UNNECESSARY);  try {    bd=new BigDecimal(bi,-10,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }  try {    bd=new BigDecimal(nbi,-10,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }  mc=new MathContext(31,RoundingMode.UP);  bd=new BigDecimal(bi,10,mc);  assertEquals("incorrect value","1234567890123456789012345.678902",bd.toString());  bd=new BigDecimal(nbi,10,mc);  assertEquals("incorrect value","-1234567890123456789012345.678902",bd.toString());  mc=new MathContext(28,RoundingMode.DOWN);  bd=new BigDecimal(bi,10,mc);  assertEquals("incorrect value","1234567890123456789012345.678",bd.toString());  bd=new BigDecimal(nbi,10,mc);  assertEquals("incorrect value","-1234567890123456789012345.678",bd.toString());  mc=new MathContext(33,RoundingMode.CEILING);  bd=new BigDecimal(bi,10,mc);  assertEquals("incorrect value","1234567890123456789012345.67890124",bd.toString());  bd=new BigDecimal(nbi,10,mc);  assertEquals("incorrect value","-1234567890123456789012345.67890123",bd.toString());  mc=new MathContext(34,RoundingMode.FLOOR);  bd=new BigDecimal(bi,10,mc);  assertEquals("incorrect value","1234567890123456789012345.678901234",bd.toString());  bd=new BigDecimal(nbi,10,mc);  assertEquals("incorrect value","-1234567890123456789012345.678901235",bd.toString());  mc=new MathContext(34,RoundingMode.HALF_EVEN);  bd=new BigDecimal(bi,10,mc);  assertEquals("incorrect value","1234567890123456789012345.678901234",bd.toString());  bd=new BigDecimal(nbi,10,mc);  assertEquals("incorrect value","-1234567890123456789012345.678901234",bd.toString());  bd=new BigDecimal(new BigInteger("-12345678901234567890123456789012335"),10,mc);  assertEquals("incorrect value","-1234567890123456789012345.678901234",bd.toString());  mc=new MathContext(34,RoundingMode.HALF_UP);  bd=new BigDecimal(bi,10,mc);  assertEquals("incorrect value","1234567890123456789012345.678901235",bd.toString());  bd=new BigDecimal(nbi,10,mc);  assertEquals("incorrect value","-1234567890123456789012345.678901235",bd.toString());  mc=new MathContext(34,RoundingMode.HALF_DOWN);  bd=new BigDecimal(bi,10,mc);  assertEquals("incorrect value","1234567890123456789012345.678901234",bd.toString());  bd=new BigDecimal(nbi,10,mc);  assertEquals("incorrect value","-1234567890123456789012345.678901234",bd.toString());  mc=new MathContext(34,RoundingMode.UNNECESSARY);  try {    bd=new BigDecimal(bi,10,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }  try {    bd=new BigDecimal(nbi,10,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }  mc=new MathContext(28,RoundingMode.FLOOR);  bd=new BigDecimal(bi,10,mc);  assertEquals("incorrect value","1234567890123456789012345.678",bd.toString());  bd=new BigDecimal(nbi,10,mc);  assertEquals("incorrect value","-1234567890123456789012345.679",bd.toString());}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document newDoc;  DocumentType docType=null;  DOMImplementation domImpl;  Element element;  Attr attr;  NodeList childList;  Node importedAttr;  String nodeName;  int nodeType;  String nodeValue;  doc=(Document)load("staffNS",true);  domImpl=doc.getImplementation();  newDoc=domImpl.createDocument("http://www.w3.org/DOM/Test","l2:root",docType);  childList=doc.getElementsByTagNameNS("http://www.nist.gov","employee");  element=(Element)childList.item(1);  attr=element.getAttributeNode("defaultAttr");  importedAttr=newDoc.importNode(attr,true);  nodeName=importedAttr.getNodeName();  nodeValue=importedAttr.getNodeValue();  nodeType=(int)importedAttr.getNodeType();  assertEquals("documentimportnode04_nodeName","defaultAttr",nodeName);  assertEquals("documentimportnode04_nodeType",2,nodeType);  assertEquals("documentimportnode04_nodeValue","defaultVal",nodeValue);}  }
class C{  protected void enableJmx() throws Exception {  ArrayList<Modification> mods=new ArrayList<Modification>();  InternalClientConnection conn=InternalClientConnection.getRootConnection();  mods.add(new Modification(ModificationType.REPLACE,Attributes.create("ds-cfg-enabled","true")));  ModifyOperationBasis op=new ModifyOperationBasis(conn,conn.nextOperationID(),conn.nextMessageID(),new ArrayList<Control>(),DN.valueOf("cn=JMX Connection Handler,cn=Connection Handlers,cn=config"),mods);  op.run();}  }
class C{  public Response priorResponse(){  return priorResponse;}  }
class C{  private static void updateParseCache(String key,Long value){  if (value == null) {    return;  }  if (parseCache.size() > CACHE_SIZE) {    parseCache.clear();  }  parseCache.put(key,value);}  }
class C{  private boolean processModifyDNRequest(LDAPMessage message,List<Control> controls){  if (ldapVersion == 2 && !controls.isEmpty()) {    ModifyDNResponseProtocolOp responseOp=new ModifyDNResponseProtocolOp(LDAPResultCode.PROTOCOL_ERROR,ERR_LDAPV2_CONTROLS_NOT_ALLOWED.get());    sendLDAPMessage(message,responseOp);    disconnectControlsNotAllowed();    return false;  }  ModifyDNRequestProtocolOp protocolOp=message.getModifyDNRequestProtocolOp();  ModifyDNOperationBasis modifyDNOp=new ModifyDNOperationBasis(this,nextOperationID.getAndIncrement(),message.getMessageID(),controls,protocolOp.getEntryDN(),protocolOp.getNewRDN(),protocolOp.deleteOldRDN(),protocolOp.getNewSuperior());  try {    addOperationInProgress(modifyDNOp);  } catch (  DirectoryException de) {    logger.traceException(de);    ModifyDNResponseProtocolOp responseOp=new ModifyDNResponseProtocolOp(de.getResultCode().intValue(),de.getMessageObject(),de.getMatchedDN(),de.getReferralURLs());    sendLDAPMessage(new LDAPMessage(message.getMessageID(),responseOp,modifyDNOp.getResponseControls()));  }  return connectionValid;}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  String encoded=null;  try {    encoded=encodeBytes(source,off,len,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  private void updateCurrentStation(){  int freq=mService.getFrequency();  if (FmRadioUtils.isValidStation(freq)) {    if (mCurrentStation != freq) {      Log.d(TAG,"frequency in service isn't same as in database");      mCurrentStation=freq;      FmRadioStation.setCurrentStation(mContext,mCurrentStation);      refreshStationUI(mCurrentStation);    }  }}  }
class C{  public static void convertToXml(File in,File out) throws ParserConfigurationException, ParseException, SAXException, PropertyListFormatException, IOException {  NSObject root=parse(in);  saveAsXML(root,out);}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  s.writeObject(SerializationTester.test(transferable) ? transferable : null);  s.writeObject(SerializationTester.test(listener) ? listener : null);}  }
class C{  public FilterExprIterator(Expression expr){  super(null);  m_expr=expr;}  }
class C{  public Map<String,Object> generateConfig(final String tokenIdleTime,final String maxTokenLife,final boolean enforceClientIP,final String realm,boolean secureCookie,boolean httpOnlyCookie,String cookieName,Collection<String> cookieDomains,String hmacKey) throws SMSException, SSOException {  Map<String,Object> config=new HashMap<String,Object>();  config.put(JwtSessionModule.KEY_ALIAS_KEY,getKeyAlias(realm));  config.put(JwtSessionModule.PRIVATE_KEY_PASSWORD_KEY,amKeyProvider.getPrivateKeyPass());  config.put(JwtSessionModule.KEYSTORE_TYPE_KEY,amKeyProvider.getKeystoreType());  config.put(JwtSessionModule.KEYSTORE_FILE_KEY,amKeyProvider.getKeystoreFilePath());  config.put(JwtSessionModule.KEYSTORE_PASSWORD_KEY,new String(amKeyProvider.getKeystorePass()));  config.put(JwtSessionModule.TOKEN_IDLE_TIME_IN_MINUTES_CLAIM_KEY,tokenIdleTime);  config.put(JwtSessionModule.MAX_TOKEN_LIFE_IN_MINUTES_KEY,maxTokenLife);  config.put(JwtSessionModule.SECURE_COOKIE_KEY,secureCookie);  config.put(JwtSessionModule.HTTP_ONLY_COOKIE_KEY,httpOnlyCookie);  config.put(ENFORCE_CLIENT_IP_SETTING_KEY,enforceClientIP);  config.put(JwtSessionModule.SESSION_COOKIE_NAME_KEY,cookieName);  config.put(JwtSessionModule.COOKIE_DOMAINS_KEY,cookieDomains);  config.put(JwtSessionModule.HMAC_SIGNING_KEY,hmacKey);  return config;}  }
class C{  private String doConsentToIntro(String metaAlias,String targetURL,String cotSelected) throws FSPostLoginException {  String tldURL=null;  try {    if (entityID == null) {      if (metaManager != null) {        entityID=metaManager.getEntityIDByMetaAlias(metaAlias);      }    }    if (realm == null) {      realm=IDFFMetaUtils.getRealmByMetaAlias(metaAlias);    }    CircleOfTrustManager cotManager=new CircleOfTrustManager();    CircleOfTrustDescriptor cotDesc=cotManager.getCircleOfTrust(realm,cotSelected);    if (cotDesc != null && (cotDesc.getCircleOfTrustStatus()).equalsIgnoreCase(IFSConstants.ACTIVE)) {      tldURL=cotDesc.getIDFFWriterServiceURL();    }  } catch (  IDFFMetaException metaExp) {    FSUtils.debug.error("FSPostLogin::doConsentToIntro in cot managment expextion:",metaExp);    tldURL=null;  }catch (  COTException meta2Exp) {    FSUtils.debug.error("FSPostLogin::doConsentToIntro in cot managment expextion:",meta2Exp);    tldURL=null;  }  String redirectURL=targetURL;  if (tldURL != null && entityID != null) {    redirectURL=new StringBuffer().append(tldURL).append(IFSConstants.QUESTION_MARK).append(IFSConstants.LRURL).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(targetURL)).append(IFSConstants.AMPERSAND).append(IFSConstants.PROVIDER_ID_KEY).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(entityID)).toString();  }  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSPostLogin::doConsentToIntro return url" + redirectURL);  }  return redirectURL;}  }
class C{  public ServantObject _servant_preinvoke(String operation,Class expectedType){  throw new org.omg.CORBA.NO_IMPLEMENT(reason);}  }
class C{  protected Class<?> findLoadedClass0(String name){  String path=binaryNameToPath(name,true);  ResourceEntry entry=resourceEntries.get(path);  if (entry != null) {    return entry.loadedClass;  }  return null;}  }
class C{  public void organizationConfigChanged(String service,String version,String org,String groupname,String componentName,int type){  try {    ConfigManagerUMS cm=ConfigManagerUMS.getConfigManager();    if (org == null)     org="";    if (service == null) {      _debug.error("CMListener-> serviceName is null!");      return;    }    if (_debug.messageEnabled())     _debug.message("CMListener-> Service modified: " + service + " for Org:"+ org);    if (service.equals(ConfigManagerUMS.UMS_SRVC)) {synchronized (ConfigManagerUMS._cch) {        cm.deleteOrgFromCache(org);      }    }  } catch (  Exception e) {    _debug.error("CMListener-> Caught exception: ",e);  }}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  return encodeBytes(source,off,len,NO_OPTIONS);}  }
class C{  private void IntersiteTransfer(HttpServletRequest request,HttpServletResponse response,String target) throws IOException, ServletException {  URL theTarget=new URL(target);  String theHost=theTarget.getHost();  int thePort=theTarget.getPort();  if (theHost == null) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.error("SAMLAwareServlet:IntersiteTransfer:" + "Failed to get host name of target URL.");    }    SAMLUtils.sendError(request,response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,"missingTargetHost",SAMLUtils.bundle.getString("missingTargetHost"));    return;  }  if (SAMLUtils.debug.messageEnabled()) {    SAMLUtils.debug.message("TargetUrl Host = " + theHost + " Port= "+ thePort);  }  SAMLServiceManager.SiteEntry thisSite=null;  Set trustedserver=(Set)SAMLServiceManager.getAttribute(SAMLConstants.TRUSTED_SERVER_LIST);  if (trustedserver == null) {    SAMLUtils.sendError(request,response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,"nullTrustedSite",SAMLUtils.bundle.getString("nullTrustedSite"));    return;  }  Iterator iter=trustedserver.iterator();  while (iter.hasNext()) {    String key=null;    int portNum=0;    SAMLServiceManager.SiteEntry se=(SAMLServiceManager.SiteEntry)iter.next();    key=se.getHostName();    portNum=se.getPort();    if (portNum != -1) {      if (theHost.indexOf(key) != -1) {        if (thePort != -1) {          if (thePort == portNum) {            thisSite=se;            break;          }        }      }    } else {      if (theHost.indexOf(key) != -1) {        thisSite=se;      }    }  }  if (thisSite != null) {    Object ssoToken=null;    boolean loggedIn=false;    try {      SessionProvider sessionProvider=SessionManager.getProvider();      ssoToken=sessionProvider.getSession(request);      if (ssoToken != null && sessionProvider.isValid(ssoToken)) {        loggedIn=true;      }    } catch (    SessionException se) {      SAMLUtils.debug.message("Invalid SSO!");    }    if (!loggedIn) {      response.sendRedirect(SAMLUtils.getLoginRedirectURL(request));      return;    }    List artis=new ArrayList();    try {      artis=createArtifact(ssoToken,thisSite.getSourceID(),request,response,target,thisSite.getVersion());    } catch (    SAMLException se) {      SAMLUtils.debug.error("IntersiteTransfer:Failed to create" + " AssertionArtifact(s)");      SAMLUtils.sendError(request,response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,"errorCreateArtifact",se.getMessage());      ;      return;    }    String targetName=(String)SAMLServiceManager.getAttribute(SAMLConstants.TARGET_SPECIFIER);    String artifactName=(String)SAMLServiceManager.getAttribute(SAMLConstants.ARTIFACT_NAME);    iter=artis.iterator();    StringBuffer sb=new StringBuffer(1000);    String samltmp=null;    while (iter.hasNext()) {      samltmp=URLEncDec.encode((String)iter.next());      if (SAMLUtils.debug.messageEnabled()) {        SAMLUtils.debug.message("Encoded SAML AssertionArtifact " + samltmp);      }      sb.append("&").append(artifactName).append("=").append(samltmp);    }    String redirecto=thisSite.getSAMLUrl() + "?" + targetName+ "="+ URLEncDec.encode(target)+ sb.toString();    response.setStatus(response.SC_MOVED_TEMPORARILY);    response.setHeader("Location",redirecto);    String[] data={SAMLUtils.bundle.getString("redirectTo"),target,redirecto};    LogUtils.access(java.util.logging.Level.FINE,LogUtils.REDIRECT_TO_URL,data,ssoToken);    response.sendRedirect(redirecto);  } else {    String[] data={SAMLUtils.bundle.getString("targetForbidden"),target};    LogUtils.error(java.util.logging.Level.INFO,LogUtils.TARGET_FORBIDDEN,data);    SAMLUtils.sendError(request,response,HttpServletResponse.SC_FORBIDDEN,"targetForbidden",SAMLUtils.bundle.getString("targetForbidden") + " " + target);    return;  }}  }
class C{  public static boolean sessionTimedOut(AuthContextLocal authContext){  boolean timedOut=false;  LoginState loginState=getLoginState(authContext);  if (loginState != null) {    timedOut=loginState.isTimedOut();    if (!timedOut) {      InternalSession sess=loginState.getSession();      if (sess != null) {        timedOut=sess.isTimedOut();      }      loginState.setTimedOut(timedOut);    }    if (utilDebug.messageEnabled()) {      utilDebug.message("AuthUtils.sessionTimedOut: " + timedOut);    }  }  return timedOut;}  }
