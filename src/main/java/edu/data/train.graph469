class C{  private void storeComputes(String rpLink,ServiceDocumentQueryResult queryResult){  Map<String,ComputeState> computes=new HashMap<>();  queryResult.documentLinks.forEach(null);  if (rpLink != null) {    ResourcePoolData rpData=this.result.resourcesPools.get(rpLink);    rpData.computeStateLinks.addAll(computes.keySet());  }  for (  Map.Entry<String,ComputeState> computeEntry : computes.entrySet()) {    String computeLink=computeEntry.getKey();    ComputeState compute=computeEntry.getValue();    this.result.computesByLink.put(computeLink,compute);    Set<String> rpLinks=this.result.rpLinksByComputeLink.get(computeLink);    if (rpLinks == null) {      rpLinks=new HashSet<String>();      this.result.rpLinksByComputeLink.put(computeLink,rpLinks);    }    if (rpLink != null) {      rpLinks.add(rpLink);    }  }}  }
class C{  public static TypeReference findCommonSuperclass(TypeReference t1,TypeReference t2){  if (t1 == t2) {    return t1;  }  if (t1.isPrimitiveType() || t2.isPrimitiveType()) {    if (t1.isIntLikeType() && t2.isIntLikeType()) {      if (t1.isIntType() || t2.isIntType()) {        return TypeReference.Int;      } else       if (t1.isCharType() || t2.isCharType()) {        return TypeReference.Char;      } else       if (t1.isShortType() || t2.isShortType()) {        return TypeReference.Short;      } else       if (t1.isByteType() || t2.isByteType()) {        return TypeReference.Byte;      } else {        if (VM.VerifyAssertions)         VM._assert(VM.NOT_REACHED);        return null;      }    } else     if (t1.isWordLikeType() && t2.isWordLikeType()) {      return TypeReference.Word;    } else {      return null;    }  }  if (t1 == TypeReference.NULL_TYPE) {    return t2;  } else   if (t2 == TypeReference.NULL_TYPE) {    return t1;  }  if (DBG_TYPE) {    VM.sysWrite("finding common supertype of " + t1 + " and "+ t2);  }  int arrayDimensions=0;  while (t1.isArrayType() && t2.isArrayType()) {    ++arrayDimensions;    t1=t1.getArrayElementType();    t2=t2.getArrayElementType();  }  if (t1.isPrimitiveType() || t2.isPrimitiveType()) {    TypeReference type=TypeReference.JavaLangObject;    if (t1 == t2) {      if (t1.isUnboxedType()) {        arrayDimensions++;        type=t1;      } else {        if (VM.VerifyAssertions)         VM._assert(VM.NOT_REACHED);      }    }    --arrayDimensions;    while (arrayDimensions-- > 0) {      type=type.getArrayTypeForElementType();    }    if (DBG_TYPE) {      VM.sysWrite("one is a primitive array, so supertype is " + type);    }    return type;  }  if (t1.isArrayType() || t2.isArrayType()) {    TypeReference type=TypeReference.JavaLangObject;    while (arrayDimensions-- > 0) {      type=type.getArrayTypeForElementType();    }    if (DBG_TYPE) {      VM.sysWrite("differing dimensionalities for arrays, so supertype is " + type);    }    return type;  }  RVMClass c1=(RVMClass)t1.peekType();  RVMClass c2=(RVMClass)t2.peekType();  if (c1 != null && c2 != null) {    Stack<RVMClass> s1=new Stack<RVMClass>();    do {      s1.push(c1);      c1=c1.getSuperClass();    } while (c1 != null);    Stack<RVMClass> s2=new Stack<RVMClass>();    do {      s2.push(c2);      c2=c2.getSuperClass();    } while (c2 != null);    if (DBG_TYPE) {      VM.sysWrite("stack 1: " + s1);    }    if (DBG_TYPE) {      VM.sysWrite("stack 2: " + s2);    }    TypeReference best=TypeReference.JavaLangObject;    while (!s1.empty() && !s2.empty()) {      RVMClass temp=s1.pop();      if (temp == s2.pop()) {        best=temp.getTypeRef();      } else {        break;      }    }    if (DBG_TYPE) {      VM.sysWrite("common supertype of the two classes is " + best);    }    while (arrayDimensions-- > 0) {      best=best.getArrayTypeForElementType();    }    return best;  } else {    if (DBG_TYPE && c1 == null) {      VM.sysWrite(c1 + " is not loaded, using Object as common supertype");    }    if (DBG_TYPE && c2 == null) {      VM.sysWrite(c2 + " is not loaded, using Object as common supertype");    }    TypeReference common=TypeReference.JavaLangObject;    while (arrayDimensions-- > 0) {      common=common.getArrayTypeForElementType();    }    return common;  }}  }
class C{  public void done(){  if (resultNumber == (end + 1)) {    getPreviousAndNextLinksForPagination(start != 0,true,requestAndResponse,result);  } else   if (start == 0 && !anyMatches) {    result.append(noMatchesText);  } else   if (start != 0 && !anyMatches) {    result.append(servletText.sentenceNoMoreResults());  } else   if (start != 0) {    getPreviousAndNextLinksForPagination(true,false,requestAndResponse,result);  }}  }
class C{  public DataSource_Definition(Service parentService,String name,String hostname){  super(parentService);  this.name=name;  this.hostname=hostname;}  }
class C{  protected void parseAuthority(final String original,final boolean escaped) throws URIException {  _is_reg_name=_is_server=_is_hostname=_is_IPv4address=_is_IPv6reference=false;  final String charset=getProtocolCharset();  boolean hasPort=true;  int from=0;  int next=original.indexOf('@');  if (next != -1) {    _userinfo=(escaped) ? original.substring(0,next).toCharArray() : encode(original.substring(0,next),allowed_userinfo,charset);    from=next + 1;  }  next=original.indexOf('[',from);  if (next >= from) {    next=original.indexOf(']',from);    if (next == -1) {      throw new URIException(URIException.PARSING,"IPv6reference");    } else {      next++;    }    _host=(escaped) ? original.substring(from,next).toCharArray() : encode(original.substring(from,next),allowed_IPv6reference,charset);    _is_IPv6reference=true;  } else {    next=original.indexOf(':',from);    if (next == -1) {      next=original.length();      hasPort=false;    }    _host=original.substring(from,next).toCharArray();    if (validate(_host,IPv4address)) {      _is_IPv4address=true;    } else     if (validate(_host,hostname)) {      _is_hostname=true;    } else {      _is_reg_name=true;    }  }  if (_is_reg_name) {    _is_server=_is_hostname=_is_IPv4address=_is_IPv6reference=false;    if (escaped) {      _authority=original.toCharArray();      if (!validate(_authority,reg_name)) {        throw new URIException("Invalid authority");      }    } else {      _authority=encode(original,allowed_reg_name,charset);    }  } else {    if (original.length() - 1 > next && hasPort && original.charAt(next) == ':') {      from=next + 1;      try {        _port=Integer.parseInt(original.substring(from));      } catch (      final NumberFormatException error) {        throw new URIException(URIException.PARSING,"invalid port number");      }    }    final StringBuffer buf=new StringBuffer();    if (_userinfo != null) {      buf.append(_userinfo);      buf.append('@');    }    if (_host != null) {      buf.append(_host);      if (_port != -1) {        buf.append(':');        buf.append(_port);      }    }    _authority=buf.toString().toCharArray();    _is_server=true;  }}  }
class C{  public static void printf(String format,Object... args){  out.printf(LOCALE,format,args);  out.flush();}  }
class C{  public JSONWriter endObject() throws JSONException {  return this.end('k','}');}  }
class C{  protected Object readResolve() throws ObjectStreamException {  EnumSyntax[] theTable=getEnumValueTable();  if (theTable == null) {    throw new InvalidObjectException("Null enumeration value table for class " + getClass());  }  int theOffset=getOffset();  int theIndex=value - theOffset;  if (0 > theIndex || theIndex >= theTable.length) {    throw new InvalidObjectException("Integer value = " + value + " not in valid range "+ theOffset+ ".."+ (theOffset + theTable.length - 1)+ "for class "+ getClass());  }  EnumSyntax result=theTable[theIndex];  if (result == null) {    throw new InvalidObjectException("No enumeration value for integer value = " + value + "for class "+ getClass());  }  return result;}  }
class C{  public void deleteTag(int tagId,int ifdId){  mData.removeTag(getTrueTagKey(tagId),ifdId);}  }
class C{  public static BoxDataSet serializableInstance(){  return new BoxDataSet(new ShortDataBox(4,4),null);}  }
class C{  @Override protected void onStart(){  super.onStart();  LOG.d(TAG,"Started the activity.");  if (this.appView == null) {    return;  }  this.appView.handleStart();}  }
class C{  @Override public boolean isCellEditable(int rowIndex,int columnIndex){  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:12.877 -0500",hash_original_method="194E237603CA4A7D605DF99CBAD71850",hash_generated_method="7822E0FCF7BC1C60BED7C2F8679B7090") @Override public void closeOutbound(){  if (logger != null) {    logger.println("closeOutbound() " + isOutboundDone);  }  if (isOutboundDone) {    return;  }  isOutboundDone=true;  if (handshake_started) {    alertProtocol.alert(AlertProtocol.WARNING,AlertProtocol.CLOSE_NOTIFY);    close_notify_was_sent=true;  } else {    shutdown();  }  engine_was_closed=true;}  }
class C{  public static byte[] ensureCapacity(byte[] array,int minCapacity){  int oldCapacity=array.length;  byte[] newArray;  if (minCapacity > oldCapacity) {    int newCapacity=(oldCapacity * 3) / 2 + 1;    if (newCapacity < minCapacity) {      newCapacity=minCapacity;    }    newArray=new byte[newCapacity];    System.arraycopy(array,0,newArray,0,oldCapacity);  } else {    newArray=array;  }  return newArray;}  }
class C{  public boolean isHighlighted(){  return this.highlighted;}  }
class C{  public AlertInfoHeader createAlertInfoHeader(URI alertInfo){  if (alertInfo == null)   throw new NullPointerException("null arg alertInfo");  AlertInfo a=new AlertInfo();  a.setAlertInfo(alertInfo);  return a;}  }
class C{  @VisibleForTesting protected void doReplaceDoi(Resource resource,BigDecimal version,BigDecimal replacedVersion){  Preconditions.checkNotNull(resource);  DOI doiToRegister=resource.getDoi();  DOI doiToReplace=resource.getAssignedDoi();  if (doiToRegister != null && resource.isPubliclyAvailable() && doiToReplace != null && resource.getEmlVersion() != null && resource.getEmlVersion().compareTo(version) == 0 && replacedVersion != null && resource.findVersionHistory(replacedVersion) != null) {    doRegisterDoi(resource,doiToReplace);    try {      File replacedVersionEmlFile=dataDir.resourceEmlFile(resource.getShortname(),replacedVersion);      Resource lastPublishedVersion=ResourceUtils.reconstructVersion(replacedVersion,resource.getShortname(),doiToReplace,resource.getOrganisation(),resource.findVersionHistory(replacedVersion),replacedVersionEmlFile,resource.getKey());      DataCiteMetadata assignedDoiMetadata=DataCiteMetadataBuilder.createDataCiteMetadata(doiToReplace,lastPublishedVersion);      DataCiteMetadataBuilder.addIsPreviousVersionOfDOIRelatedIdentifier(assignedDoiMetadata,doiToRegister);      URI resourceVersionUri=cfg.getResourceVersionUri(resource.getShortname(),replacedVersion);      registrationManager.getDoiService().update(doiToReplace,resourceVersionUri);      registrationManager.getDoiService().update(doiToReplace,assignedDoiMetadata);    } catch (    InvalidMetadataException e) {      String errorMsg="Failed to update " + doiToReplace.toString() + " metadata: "+ e.getMessage();      log.error(errorMsg);      throw new PublicationException(PublicationException.TYPE.DOI,errorMsg,e);    }catch (    DoiException e) {      String errorMsg="Failed to update " + doiToReplace.toString() + ": "+ e.getMessage();      log.error(errorMsg);      throw new PublicationException(PublicationException.TYPE.DOI,errorMsg,e);    }catch (    IllegalArgumentException e) {      String errorMsg="Failed to update " + doiToReplace.toString() + ": "+ e.getMessage();      log.error(errorMsg,e);      throw new PublicationException(PublicationException.TYPE.DOI,errorMsg,e);    }  } else {    throw new InvalidConfigException(TYPE.INVALID_DOI_REGISTRATION,"Resource not in required state to replace DOI!");  }}  }
class C{  public static QualifiedName parseQualifiedName(String value){  String[] parts=value.split(":");  UnsignedShort namespaceIndex=UnsignedShort.ZERO;  String name=value;  if (parts.length > 1)   try {    namespaceIndex=UnsignedShort.parseUnsignedShort(parts[0]);    name=value.substring(parts[0].length() + 1);  } catch (  NumberFormatException e) {  }catch (  IllegalArgumentException e) {  }  return new QualifiedName(namespaceIndex,name);}  }
class C{  private static void checkInvokes(SootMethod m,Body b,FileWriter fw) throws Exception {  StmtBody stmtBody=(StmtBody)b;  Chain units=stmtBody.getUnits();  Iterator stmtIt=units.snapshotIterator();  while (stmtIt.hasNext()) {    Stmt stmt=(Stmt)stmtIt.next();    if (!stmt.containsInvokeExpr()) {      continue;    }    InvokeExpr expr=(InvokeExpr)stmt.getInvokeExpr();    InstanceInvokeExpr iie=SootUtils.getInstanceInvokeExpr(stmt);    if (iie != null) {      Collection<SootMethod> resolved=null;      resolved=PTABridge.v().getTargetsInsNoContext(stmt);      if (resolved == null || resolved.isEmpty()) {        fw.write(String.format("No valid allocations for receiver of %s of type %s in %s (%s).\n\n",iie.getMethodRef(),iie.getBase().getType(),m,SootUtils.getSourceLocation(stmt,m.getDeclaringClass())));        AnalysisReport.v().addEntry("No valid allocations for receiver of method call.",stmt,AnalysisReport.Level.LOW);      }    }  }}  }
class C{  public void warn(String trace){  printTrace(trace,WARN_LEVEL);}  }
class C{  public InterruptedException(){}  }
class C{  private void convertData(){  m_traces=new ArrayList<Trace>();  for (  final TraceList trace : m_module.getContent().getTraceContainer().getTraces()) {    m_traces.add(new Trace(trace));  }  m_module.getContent().getTraceContainer().addListener(m_traceListener);  m_functions=new ArrayList<Function>();  for (  final INaviFunction function : m_module.getContent().getFunctionContainer().getFunctions()) {    m_functions.add(new Function(this,function));  }  for (  final Function function : m_functions) {    m_functionMap.put(function.getNative(),function);  }  m_views=new ArrayList<View>();  for (  final INaviView view : m_module.getContent().getViewContainer().getViews()) {    m_views.add(new View(this,view,m_nodeTagManager,m_viewTagManager));  }  createCallgraph();}  }
class C{  @Override public String generateURLFragment(String urlText){  return " href=\"" + urlText + "\"";}  }
class C{  public void onDrag(Interaction iact){}  }
class C{  protected boolean isAssignBucketsAllowed(final Cache cache){  return (isAssignBuckets() && (cache instanceof GemFireCacheImpl));}  }
class C{  protected void addDeployables() throws Exception {  for (  Deployable deployable : getConfiguration().getDeployables()) {    if (deployable.getType() == DeployableType.WAR) {      addHandler(createHandler(deployable));    } else {      throw new ContainerException("Only WAR archives are supported for deployment in " + "Jetty. Got [" + deployable.getFile() + "]");    }  }  addHandler(createHandler("/cargocpc",new File(getConfiguration().getHome(),"cargocpc.war").getPath()));}  }
class C{  private Set<PersonUser> findPersonUsers(String tenantName,SearchCriteria criteria,int limit) throws Exception {  try {    ValidateUtil.validateNotEmpty(tenantName,"Tenant name");    ValidateUtil.validateNotNull(criteria,"Search criteria");    TenantInformation tenantInfo=findTenant(tenantName);    ServerUtils.validateNotNullTenant(tenantInfo,tenantName);    IIdentityProvider provider=tenantInfo.findProviderADAsFallBack(criteria.getDomain());    ServerUtils.validateNotNullIdp(provider,tenantName,criteria.getDomain());    return provider.findUsers(criteria.getSearchString(),criteria.getDomain(),limit);  } catch (  Exception ex) {    logger.error(String.format("Failed to find person users [Criteria : %s] in tenant [%s]",criteria,tenantName));    throw ex;  }}  }
class C{  public String updateItem(String token,String itemUrl) throws MalformedURLException, IOException {  return makeHttpRequest(token,itemUrl,NEW_DATA_ITEM,"PUT",HttpURLConnection.HTTP_OK);}  }
class C{  public static boolean deleteRecursively(File path){  boolean deleted=true;  if (path.isDirectory()) {    File[] files=path.listFiles();    for (int i=0; ((i < files.length) && deleted); i++) {      if (files[i].isDirectory()) {        deleted=deleteRecursively(files[i]);      } else {        deleted=files[i].delete();      }    }    deleted=deleted && path.delete();  } else {    deleted=false;  }  return deleted;}  }
class C{  protected void updateSplashScreen(){}  }
class C{  @Override public void releaseWriter(){  writerLock.unlock();}  }
class C{  private void establecerElementosBusqueda(HttpServletRequest request){  String pFondoID=request.getParameter("fondo");  String pCodigo=request.getParameter("codigo");  String pTitulo=request.getParameter("tituloBuscar");  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));  GestionSeriesBI serieBI=getGestionSeriesBI(request);  List series=serieBI.findSeriesValorables(pFondoID,pCodigo,pTitulo);  CollectionUtils.transform(series,SerieToPO.getInstance(services));  request.setAttribute(ValoracionConstants.LISTA_SERIES_KEY,series);}  }
class C{  @RequestMapping(method=RequestMethod.POST) public HttpEntity<?> postProduct(@RequestBody Product input){  input=this.productRepository.save(input);  HttpHeaders httpHeaders=new HttpHeaders();  httpHeaders.setLocation(linkTo(methodOn(Rest3Controller.class,input.getId()).getProduct(input.getId())).toUri());  return new ResponseEntity<>(httpHeaders,HttpStatus.CREATED);}  }
class C{  public IconDrawable(@NonNull Context context,@NonNull String iconKey){  this(context,new IconState(findValidIconForKey(iconKey)));}  }
class C{  protected IRawStore reopenStore(final IRawStore store){  boolean closedForWrites=false;  if (store.isReadOnly() && store instanceof Journal && ((Journal)store).getRootBlockView().getCloseTime() != 0L) {    closedForWrites=true;  }  store.close();  final Properties properties=(Properties)getProperties().clone();  properties.setProperty(Options.CREATE_TEMP_FILE,"false");  final File file=store.getFile();  assertNotNull(file);  properties.setProperty(Options.FILE,file.toString());  if (closedForWrites) {    properties.setProperty(Options.READ_ONLY,"true");  }  return new Journal(properties);}  }
class C{  public boolean isStaticlyPolyfilled(N4MemberDeclaration element){  return isTaggedAs(Tag.staticlyPolyfilled,element);}  }
class C{  public String invokeAPI(String path,String method,List<Pair> queryParams,Object body,Map<String,String> headerParams,Map<String,String> formParams,String accept,String contentType,String[] authNames) throws ApiException {  updateParamsForAuth(authNames,queryParams,headerParams);  Client client=getClient();  StringBuilder b=new StringBuilder();  b.append("?");  if (queryParams != null) {    for (    Pair queryParam : queryParams) {      if (!queryParam.getName().isEmpty()) {        b.append(escapeString(queryParam.getName()));        b.append("=");        b.append(escapeString(queryParam.getValue()));        b.append("&");      }    }  }  String querystring=b.substring(0,b.length() - 1);  Builder builder;  if (accept == null)   builder=client.resource(basePath + path + querystring).getRequestBuilder(); else   builder=client.resource(basePath + path + querystring).accept(accept);  for (  String key : headerParams.keySet()) {    builder=builder.header(key,headerParams.get(key));  }  for (  String key : defaultHeaderMap.keySet()) {    if (!headerParams.containsKey(key)) {      builder=builder.header(key,defaultHeaderMap.get(key));    }  }  ClientResponse response=null;  if ("GET".equals(method)) {    response=(ClientResponse)builder.get(ClientResponse.class);  } else   if ("POST".equals(method)) {    if (contentType.startsWith("application/x-www-form-urlencoded")) {      String encodedFormParams=this.getXWWWFormUrlencodedParams(formParams);      response=builder.type(contentType).post(ClientResponse.class,encodedFormParams);    } else     if (body == null) {      response=builder.post(ClientResponse.class,null);    } else     if (body instanceof FormDataMultiPart) {      response=builder.type(contentType).post(ClientResponse.class,body);    } else     response=builder.type(contentType).post(ClientResponse.class,serialize(body));  } else   if ("PUT".equals(method)) {    if ("application/x-www-form-urlencoded".equals(contentType)) {      String encodedFormParams=this.getXWWWFormUrlencodedParams(formParams);      response=builder.type(contentType).put(ClientResponse.class,encodedFormParams);    } else     if (body == null) {      response=builder.put(ClientResponse.class,serialize(body));    } else {      response=builder.type(contentType).put(ClientResponse.class,serialize(body));    }  } else   if ("DELETE".equals(method)) {    if ("application/x-www-form-urlencoded".equals(contentType)) {      String encodedFormParams=this.getXWWWFormUrlencodedParams(formParams);      response=builder.type(contentType).delete(ClientResponse.class,encodedFormParams);    } else     if (body == null) {      response=builder.delete(ClientResponse.class);    } else {      response=builder.type(contentType).delete(ClientResponse.class,serialize(body));    }  } else {    throw new ApiException(500,"unknown method type " + method);  }  if (response.getStatusInfo() == ClientResponse.Status.NO_CONTENT) {    return null;  } else   if (response.getStatusInfo().getFamily() == Family.SUCCESSFUL) {    if (response.hasEntity()) {      return (String)response.getEntity(String.class);    } else {      return "";    }  } else {    String message="error";    String respBody=null;    if (response.hasEntity()) {      try {        respBody=String.valueOf(response.getEntity(String.class));        message=respBody;      } catch (      RuntimeException e) {      }    }    throw new ApiException(response.getStatusInfo().getStatusCode(),message,response.getHeaders(),respBody);  }}  }
class C{  public static void warpImageWithTransform(BufferedImage image,BufferedImage canvas,Matrix canvasToImageTransform){  if (image == null) {    String message=Logging.getMessage("nullValue.ImageIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (canvas == null) {    String message=Logging.getMessage("nullValue.CanvasIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (canvasToImageTransform == null) {    String message=Logging.getMessage("nullValue.MatrixIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  int sourceWidth=image.getWidth();  int sourceHeight=image.getHeight();  int destWidth=canvas.getWidth();  int destHeight=canvas.getHeight();  for (int dy=0; dy < destHeight; dy++) {    for (int dx=0; dx < destWidth; dx++) {      Vec4 vec=new Vec4(dx,dy,1).transformBy3(canvasToImageTransform);      if (vec.x >= 0 && vec.y >= 0 && vec.x <= (sourceWidth - 1) && vec.y <= (sourceHeight - 1)) {        int x0=(int)Math.floor(vec.x);        int x1=(int)Math.ceil(vec.x);        double xf=vec.x - x0;        int y0=(int)Math.floor(vec.y);        int y1=(int)Math.ceil(vec.y);        double yf=vec.y - y0;        int color=interpolateColor(xf,yf,image.getRGB(x0,y0),image.getRGB(x1,y0),image.getRGB(x0,y1),image.getRGB(x1,y1));        canvas.setRGB(dx,dy,color);      }    }  }}  }
class C{  public blink addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void addInvokevirtual(int clazz,String name,String desc){  add(INVOKEVIRTUAL);  addIndex(constPool.addMethodrefInfo(clazz,name,desc));  growStack(Descriptor.dataSize(desc) - 1);}  }
class C{  public void testExportImportOneWithMarker_kml(){  testExportImportOneWithMarker(TrackFileFormat.KML);}  }
class C{  private boolean put(boolean isRoot,Vector names,int len,Object value){  if (len == 0) {    if (isRoot) {      if (rootValue != null)       return false;      rootValue=value;    } else {      if (otherValue != null)       return false;      otherValue=value;    }    return true;  } else {    Object name=names.elementAt(len - 1);    ContextMap nestedMap=(ContextMap)nameTable.get(name);    if (nestedMap == null) {      nestedMap=new ContextMap();      nameTable.put(name,nestedMap);    }    return nestedMap.put(isRoot,names,len - 1,value);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.SCHEDULE_TIME_EVENT__TIME_EVENT:    setTimeEvent((TimeEvent)newValue);  return;case SexecPackage.SCHEDULE_TIME_EVENT__TIME_VALUE:setTimeValue((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private boolean checkTerminateStagingTrack(Track terminateStageTrack){  if (!terminateStageTrack.acceptsDropTrain(_train)) {    addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildStagingNotTrain"),new Object[]{terminateStageTrack.getName()}));    return false;  }  if (((!Setup.isBuildAggressive() || !Setup.isStagingTrackImmediatelyAvail()) && terminateStageTrack.getNumberRS() != 0) || terminateStageTrack.getNumberRS() != terminateStageTrack.getPickupRS()) {    addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildStagingTrackOccupied"),new Object[]{terminateStageTrack.getName(),terminateStageTrack.getNumberEngines(),terminateStageTrack.getNumberCars()}));    return false;  }  if (terminateStageTrack.getDropRS() != 0) {    addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildStagingTrackReserved"),new Object[]{terminateStageTrack.getName(),terminateStageTrack.getDropRS()}));    return false;  }  if (terminateStageTrack.getPickupRS() > 0) {    addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildStagingTrackDepart"),new Object[]{terminateStageTrack.getName()}));  }  if (terminateStageTrack.getDropOption().equals(Track.TRAINS) || terminateStageTrack.getDropOption().equals(Track.ROUTES)) {    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildTrainCanTerminateTrack"),new Object[]{_train.getName(),terminateStageTrack.getName()}));    return true;  }  if (!Setup.isTrainIntoStagingCheckEnabled()) {    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildTrainCanTerminateTrack"),new Object[]{_train.getName(),terminateStageTrack.getName()}));    return true;  }  if (!checkTerminateStagingTrackRestrictions(terminateStageTrack)) {    addLine(_buildReport,SEVEN,Bundle.getMessage("buildOptionRestrictStaging"));    return false;  }  return true;}  }
class C{  public DiscussionObject(DiscussionObject parent){  this.id=parent.getId();  this.projectId=parent.getProjectId();  this.subject=parent.getSubject();  this.content=parent.getContent();  this.creatorId=parent.getCreatorId();  this.deleted=parent.getDeleted();  this.created=parent.getCreated();  this.updated=parent.getUpdated();  this.bcId=parent.getBcId();  this.creatorName=parent.getCreatorName();  this.companyId=parent.getCompanyId();  this.creatorAvatar=parent.getCreatorAvatar();}  }
class C{  public void animate(MarkerWithPosition marker,LatLng from,LatLng to){  lock.lock();  mAnimationTasks.add(new AnimationTask(marker,from,to));  lock.unlock();}  }
class C{  public void updateInventory(UpdateInventory update) throws Exception {  Thread.sleep(100);  LOG.info("Inventory " + update.getPartId() + " updated");}  }
class C{  public void validateCopiedS3Files(List<StorageFile> expectedStorageFiles,List<S3ObjectSummary> actualS3Files,String storageName,BusinessObjectDataKey businessObjectDataKey){  validateS3Files(expectedStorageFiles,actualS3Files,storageName,businessObjectDataKey,"copied");}  }
class C{  private boolean checkForKey() throws Exception {  String query=m_query;  query=query.replaceAll(" +"," ");  if (!query.startsWith("SELECT *")) {    return false;  }  m_orderBy.clear();  if (!m_DataBaseConnection.isConnected()) {    m_DataBaseConnection.connectToDatabase();  }  DatabaseMetaData dmd=m_DataBaseConnection.getMetaData();  String table=endOfQuery(true);  ResultSet rs=dmd.getPrimaryKeys(null,null,table);  while (rs.next()) {    m_orderBy.add(rs.getString(4));  }  rs.close();  if (m_orderBy.size() != 0) {    return true;  }  rs=dmd.getBestRowIdentifier(null,null,table,DatabaseMetaData.bestRowSession,false);  ResultSetMetaData rmd=rs.getMetaData();  int help=0;  while (rs.next()) {    m_orderBy.add(rs.getString(2));    help++;  }  rs.close();  if (help == rmd.getColumnCount()) {    m_orderBy.clear();  }  if (m_orderBy.size() != 0) {    return true;  }  return false;}  }
class C{  @SuppressWarnings("deprecation") @Override public void run(){  try {    String line;    while ((line=in.readLine()) != null) {      out.println(line);    }  } catch (  IOException e) {  }synchronized (this) {    done=true;    notifyAll();  }}  }
class C{  public static void recordUse(RegisterOperand regOp){  Register reg=regOp.getRegister();  regOp.setNext(reg.useList);  reg.useList=regOp;  reg.useCount++;}  }
class C{  public static long roundDown(int field,long timeInMillis){switch (field) {case Calendar.DAY_OF_MONTH:case Calendar.DAY_OF_WEEK:case Calendar.DAY_OF_YEAR:    return (timeInMillis - timeInMillis % (24 * 60 * 60* 1000));case Calendar.HOUR:  return (timeInMillis - timeInMillis % (60 * 60 * 1000));case Calendar.MINUTE:return (timeInMillis - timeInMillis % (60 * 1000));case Calendar.SECOND:return (timeInMillis - timeInMillis % (1000));default :return 0L;}}  }
class C{  final private void deleteServerSchema(Attributes origAttrs) throws NamingException {  Attribute origAttrVal;switch (objectType) {case OBJECTCLASS_ROOT:    origAttrVal=info.parser.stringifyObjDesc(origAttrs);  break;case ATTRIBUTE_ROOT:origAttrVal=info.parser.stringifyAttrDesc(origAttrs);break;case SYNTAX_ROOT:origAttrVal=info.parser.stringifySyntaxDesc(origAttrs);break;case MATCHRULE_ROOT:origAttrVal=info.parser.stringifyMatchRuleDesc(origAttrs);break;case SCHEMA_ROOT:throw new SchemaViolationException("Cannot delete schema root");default :throw new SchemaViolationException("Cannot delete child of schema object");}ModificationItem[] mods=new ModificationItem[1];mods[0]=new ModificationItem(DirContext.REMOVE_ATTRIBUTE,origAttrVal);info.modifyAttributes(myEnv,mods);}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.770 -0400",hash_original_method="391E9756F83F23FF347EF2129E3A0E99",hash_generated_method="D1659AD21EAF8B4DE464BAC0141C052C") @Override public Writer append(CharSequence csq,int start,int end) throws IOException {  try {    beforeWrite(end - start);    out.append(csq,start,end);    afterWrite(end - start);  } catch (  IOException e) {    handleIOException(e);  }  return this;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public SmallPuzzle(){  s=new int[2];}  }
class C{  public void test_uri_ordering(){  final V v=new V();  final IVComparator c=new IVComparator();  assertLT(c.compare(v.noninline_uri1,v.noninline_uri2));}  }
class C{  public void learnEdges(int iterLimit,int edgeChangeTol){  ProximalGradient pg=new ProximalGradient(.5,.9,true);  pg.setEdgeChangeTol(edgeChangeTol);  setParams(new MGMParams(pg.learnBackTrack(this,params.toMatrix1D(),0.0,iterLimit),p,lsum));}  }
class C{  public boolean removeTime(When time){  return super.removeElement(time);}  }
class C{  public void showPrevious(){  setDisplayedChild(mWhichChild - 1);}  }
class C{  public JSONArray put(boolean value){  this.put(value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public boolean hasPhotosLeftExt(){  return hasExtension(GphotoPhotosLeft.class);}  }
class C{  private void checkBoundaryEncodes(String expected,String input){  final CharBuffer in=CharBuffer.wrap(input.toCharArray());  final int n=expected.length();  final CharBuffer out=CharBuffer.allocate(n);  for (int i=0; i < n; ++i) {    out.clear();    out.position(n - i);    in.clear();    CoderResult cr=_encoder.encode(in,out,true);    out.limit(out.position()).position(n - i);    out.compact();    if (cr.isOverflow()) {      CoderResult cr2=_encoder.encode(in,out,true);      if (!cr2.isUnderflow()) {        Assert.fail("second encode should finish at offset = " + i);      }    }    out.flip();    String actual=out.toString();    if (!expected.equals(actual)) {      Assert.assertEquals("offset = " + i,expected,actual);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:12.254 -0500",hash_original_method="2C3172373C11B75B4FA9213153A6C85C",hash_generated_method="D890C9DEA68AA972AD35B056A68FF470") public static AndroidHttpClient newInstance(String userAgent){  return newInstance(userAgent,null);}  }
class C{  public static UnaryExpression isNull(String propertyName){  return new UnaryExpression(Operator.NULL,propertyName);}  }
class C{  public void closeDialog(){  view.close();}  }
class C{  private static void multiplyAxB(final double[] aBlock,final double[] bBlock,final double[] cBlock,final int step){  final int blockStripeMini=step % 3;  final int blockStripeMaxi=step / 3;  final int blockArea=step * step;  for (int iL=0; iL < blockArea; iL+=step) {    int rc=iL;    for (int kL=0; kL < blockArea; kL+=step) {      int ra=iL;      int rb=kL;      double sum=0.0d;      for (int jL=blockStripeMini; --jL >= 0; ) {        sum+=aBlock[ra++] * bBlock[rb++];      }      for (int jL=blockStripeMaxi; --jL >= 0; ) {        sum+=aBlock[ra++] * bBlock[rb++] + aBlock[ra++] * bBlock[rb++] + aBlock[ra++] * bBlock[rb++];      }      cBlock[rc++]+=sum;    }  }}  }
class C{  private void doDrillDownAdvanceScoring(Bits acceptDocs,LeafCollector collector,DocsAndCost[] dims) throws IOException {  final int maxDoc=context.reader().maxDoc();  final int numDims=dims.length;  int[] filledSlots=new int[CHUNK];  int[] docIDs=new int[CHUNK];  float[] scores=new float[CHUNK];  int[] missingDims=new int[CHUNK];  int[] counts=new int[CHUNK];  docIDs[0]=-1;  int nextChunkStart=CHUNK;  final FixedBitSet seen=new FixedBitSet(CHUNK);  while (true) {    DocsAndCost dc=dims[0];    int docID=dc.approximation.docID();    while (docID < nextChunkStart) {      if (acceptDocs == null || acceptDocs.get(docID)) {        int slot=docID & MASK;        if (docIDs[slot] != docID && (dc.twoPhase == null || dc.twoPhase.matches())) {          seen.set(slot);          docIDs[slot]=docID;          missingDims[slot]=1;          counts[slot]=1;        }      }      docID=dc.approximation.nextDoc();    }    dc=dims[1];    docID=dc.approximation.docID();    while (docID < nextChunkStart) {      if (acceptDocs == null || acceptDocs.get(docID) && (dc.twoPhase == null || dc.twoPhase.matches())) {        int slot=docID & MASK;        if (docIDs[slot] != docID) {          seen.set(slot);          docIDs[slot]=docID;          missingDims[slot]=0;          counts[slot]=1;        } else {          if (missingDims[slot] >= 1) {            missingDims[slot]=2;            counts[slot]=2;          } else {            counts[slot]=1;          }        }      }      docID=dc.approximation.nextDoc();    }    int filledCount=0;    int slot0=0;    while (slot0 < CHUNK && (slot0=seen.nextSetBit(slot0)) != DocIdSetIterator.NO_MORE_DOCS) {      int ddDocID=docIDs[slot0];      assert ddDocID != -1;      int baseDocID=baseIterator.docID();      if (baseDocID < ddDocID) {        baseDocID=baseIterator.advance(ddDocID);      }      if (baseDocID == ddDocID) {        scores[slot0]=baseScorer.score();        filledSlots[filledCount++]=slot0;        counts[slot0]++;      } else {        docIDs[slot0]=-1;      }      slot0++;    }    seen.clear(0,CHUNK);    if (filledCount == 0) {      if (nextChunkStart >= maxDoc) {        break;      }      nextChunkStart+=CHUNK;      continue;    }    for (int dim=2; dim < numDims; dim++) {      dc=dims[dim];      docID=dc.approximation.docID();      while (docID < nextChunkStart) {        int slot=docID & MASK;        if (docIDs[slot] == docID && counts[slot] >= dim && (dc.twoPhase == null || dc.twoPhase.matches())) {          if (missingDims[slot] >= dim) {            missingDims[slot]=dim + 1;            counts[slot]=dim + 2;          } else {            counts[slot]=dim + 1;          }        }        docID=dc.approximation.nextDoc();      }    }    for (int i=0; i < filledCount; i++) {      int slot=filledSlots[i];      collectDocID=docIDs[slot];      collectScore=scores[slot];      if (counts[slot] == 1 + numDims) {        collectHit(collector,dims);      } else       if (counts[slot] == numDims) {        collectNearMiss(dims[missingDims[slot]].sidewaysLeafCollector);      }    }    if (nextChunkStart >= maxDoc) {      break;    }    nextChunkStart+=CHUNK;  }}  }
class C{  public void multiplyByScalar(float scalar){  this.points[0]*=scalar;  this.points[1]*=scalar;  this.points[2]*=scalar;  this.points[3]*=scalar;}  }
class C{  public void bind(int index,long value){  mPreparedStatement.bindLong(index,value);}  }
class C{  private long cancelWaiter(WNode node,WNode group,boolean interrupted){  if (node != null && group != null) {    Thread w;    node.status=CANCELLED;    for (WNode p=group, q; (q=p.cowait) != null; ) {      if (q.status == CANCELLED) {        U.compareAndSwapObject(p,WCOWAIT,q,q.cowait);        p=group;      } else       p=q;    }    if (group == node) {      for (WNode r=group.cowait; r != null; r=r.cowait) {        if ((w=r.thread) != null)         U.unpark(w);      }      for (WNode pred=node.prev; pred != null; ) {        WNode succ, pp;        while ((succ=node.next) == null || succ.status == CANCELLED) {          WNode q=null;          for (WNode t=wtail; t != null && t != node; t=t.prev)           if (t.status != CANCELLED)           q=t;          if (succ == q || U.compareAndSwapObject(node,WNEXT,succ,succ=q)) {            if (succ == null && node == wtail)             U.compareAndSwapObject(this,WTAIL,node,pred);            break;          }        }        if (pred.next == node)         U.compareAndSwapObject(pred,WNEXT,node,succ);        if (succ != null && (w=succ.thread) != null) {          succ.thread=null;          U.unpark(w);        }        if (pred.status != CANCELLED || (pp=pred.prev) == null)         break;        node.prev=pp;        U.compareAndSwapObject(pp,WNEXT,pred,succ);        pred=pp;      }    }  }  WNode h;  while ((h=whead) != null) {    long s;    WNode q;    if ((q=h.next) == null || q.status == CANCELLED) {      for (WNode t=wtail; t != null && t != h; t=t.prev)       if (t.status <= 0)       q=t;    }    if (h == whead) {      if (q != null && h.status == 0 && ((s=state) & ABITS) != WBIT && (s == 0L || q.mode == RMODE))       release(h);      break;    }  }  return (interrupted || Thread.interrupted()) ? INTERRUPTED : 0L;}  }
class C{  public static boolean isSupport(int type){  return type == IPV4 || type == DOMAIN_NAME || type == IPV6;}  }
class C{  public Type basicGetDeclaredType(){  return declaredType;}  }
class C{  public static void copy(String src,String dst) throws IOException {  copy(new File(src),new File(dst));}  }
class C{  public boolean isSimpleCover(){  return false;}  }
class C{  public Object newLatch(EventBean payload){  if (stateless) {    return payload;  }  if (useSpin) {    InsertIntoLatchSpin nextLatch=new InsertIntoLatchSpin(this,currentLatchSpin,msecWait,payload);    currentLatchSpin=nextLatch;    return nextLatch;  } else {    InsertIntoLatchWait nextLatch=new InsertIntoLatchWait(currentLatchWait,msecWait,payload);    currentLatchWait.setLater(nextLatch);    currentLatchWait=nextLatch;    return nextLatch;  }}  }
class C{  public Object lastKey(){  return key(lastEntry());}  }
class C{  public GitlabMilestone createMilestone(Serializable projectId,String title,String description,Date dueDate) throws IOException {  String tailUrl=GitlabProject.URL + "/" + projectId+ GitlabMilestone.URL;  GitlabHTTPRequestor requestor=dispatch().with("title",title);  if (description != null) {    requestor=requestor.with("description",description);  }  if (dueDate != null) {    SimpleDateFormat formatter=new SimpleDateFormat("yyyy-MM-dd");    String formatted=formatter.format(dueDate);    requestor=requestor.with("due_date",formatted);  }  return requestor.to(tailUrl,GitlabMilestone.class);}  }
class C{  public boolean isOk(){  return ok;}  }
class C{  public void removeValueChangedListener(ValueChangedListener listener){  listeners.remove(listener);}  }
class C{  public GlobalInterlockException(String msg,Throwable ex){  super(msg,ex);}  }
class C{  public static long str2Long(String s){  long i=0;  try {    i=Long.parseLong(strReplace(",","",null2Str(s,"0")));  } catch (  Exception e) {    i=0;  }  return i;}  }
class C{  public static boolean isFileOlder(File file,long timeMillis){  if (file == null) {    throw new IllegalArgumentException("No specified file");  }  if (!file.exists()) {    return false;  }  return file.lastModified() < timeMillis;}  }
class C{  public CompanyPrivilegeObject(CompanyPrivilegeObject parent){  this.id=parent.getId();  this.userId=parent.getUserId();  this.companyId=parent.getCompanyId();  this.isAdmin=parent.getIsAdmin();  this.canCreateProject=parent.getCanCreateProject();}  }
class C{  private static JCheckBox createCheckBox(String key,ActionListener al){  JCheckBox cb=new JCheckBox(getMsg(key));  cb.setMnemonic(getMnemonic(key));  cb.addActionListener(al);  return cb;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.TRACE_OPTION___OPTION_1:    setOption_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public T caseReturnType(ReturnType object){  return null;}  }
class C{  private void add(DAGNode node,String contextId){  Map<String,DAGNode> contextNodes=nodes.get(contextId);  if (contextNodes == null) {    contextNodes=new HashMap<>();    nodes.put(contextId,contextNodes);  }  contextNodes.put(node.getId(),node);}  }
class C{  public void meet() throws ParseException {  meet=true;}  }
class C{  @Override public boolean nullPlusNonNullIsNull(){  debugCodeCall("nullPlusNonNullIsNull");  return true;}  }
class C{  public static void tagList(final JFrame parent,final ZyGraph graph,final TraceList list,final CTag tag){  final List<NaviNode> nodes=CTraceNodeFinder.getTraceNodes(graph,list);  for (  final NaviNode node : nodes) {    CTaggingFunctions.tagNode(parent,node,tag);  }}  }
class C{  public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {  byte[] decoded=Base64.decodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(decoded);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  @Override protected void onNewIntent(Intent intent){  LogUtils.i(TAG,"onNewIntent");  if (intent.getStringExtra(Constants.Column.TITLE) != null) {    LogUtils.i(TAG,intent.getStringExtra(Constants.Column.TITLE));  }  super.onNewIntent(intent);  setIntent(intent);}  }
class C{  public static void removeEmptyContainers(Map<Integer,List<InstanceId>> allocation){  Iterator<Integer> containerIds=allocation.keySet().iterator();  while (containerIds.hasNext()) {    Integer containerId=containerIds.next();    if (allocation.get(containerId).isEmpty()) {      containerIds.remove();    }  }}  }
class C{  public void cancel(Account account,OCFile file){  mSyncFolderHandler.cancel(account,file);}  }
class C{  public DoubleBufferSet(int b,int k){  this.buffers=new DoubleBuffer[b];  this.clear(k);}  }
class C{  public boolean isEveryOwnedOutputSpent(TransactionBag transactionBag){  for (  TransactionOutput output : outputs) {    if (output.isAvailableForSpending() && output.isMineOrWatched(transactionBag))     return false;  }  return true;}  }
class C{  public void testDoConfigureSetsAdminServer() throws Exception {  configuration.setProperty(WebLogicPropertySet.SERVER,SERVER);  configuration.doConfigure(container);  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(SERVER,"//weblogic:admin-server-name",config);}  }
class C{  public final void removeBrowseListener(BrowseListener l){  listeners.remove(BrowseListener.class,l);}  }
class C{  public void valueChange(ValueChangeEvent e){  String name=e.getPropertyName();  Object value=e.getNewValue();  log.config(name + "=" + value);  if (value == null)   return;  if (name.equals("AD_Org_ID")) {    if (value == null)     m_AD_Org_ID=0; else     m_AD_Org_ID=((Integer)value).intValue();    loadBPartner();  }  if (name.equals("C_BPartner_ID")) {    bpartnerSearch.setValue(value);    m_C_BPartner_ID=((Integer)value).intValue();    loadBPartner();  } else   if (name.equals("C_Charge_ID")) {    if (value == null) {      m_C_Charge_ID=0;    } else {      m_C_Charge_ID=((Integer)value).intValue();    }    setAllocateButton();  } else   if (name.equals("C_Currency_ID")) {    m_C_Currency_ID=((Integer)value).intValue();    loadBPartner();  } else   if (name.equals("Date") && multiCurrency.isSelected())   loadBPartner();}  }
class C{  public void fireTextRemoved(final NetworkTextObject deleted){  for (  TextListener listener : textListeners) {    listener.textRemoved(deleted);  }}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public JsonParser createJsonParser(byte[] data,int offset,int len) throws IOException, JsonParseException {  IOContext ctxt=_createContext(data,true);  if (_inputDecorator != null) {    InputStream in=_inputDecorator.decorate(ctxt,data,offset,len);    if (in != null) {      return _createJsonParser(in,ctxt);    }  }  return _createJsonParser(data,offset,len,ctxt);}  }
class C{  public static void deleteBookmarks(final CCodeBookmarkManager manager,final int[] rows){  Preconditions.checkNotNull(manager,"IE01262: Manager argument can not be null");  Preconditions.checkNotNull(rows,"IE01263: Rows argument can not be null");  final List<CCodeBookmark> bookmarks=new ArrayList<CCodeBookmark>();  for (  final int row : rows) {    bookmarks.add(manager.get(row));  }  for (  final CCodeBookmark bookmark : bookmarks) {    manager.removeBookmark(bookmark);  }}  }
class C{  public void toggleSelection(int position){  if (selectedItems.get(position,false)) {    selectedItems.delete(position);  } else {    selectedItems.put(position,true);  }  notifyItemChanged(position);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object msgVars=stack.pop();  String msgString=getString(stack);  int level=getInt(stack);  int code=getInt(stack);  if (Sage.client) {    sage.msg.SystemMessage newMsg=new sage.msg.SystemMessage(code,level,msgString,(msgVars instanceof java.util.Properties) ? ((java.util.Properties)msgVars) : null);    stack.push(new Integer(-1));    stack.push(new Integer(-1));    stack.push(newMsg.getPersistentString());    stack.push(null);    return makeNetworkedCall(stack);  }  if (code < 0) {    sage.msg.SystemMessage sysMsg=sage.msg.SystemMessage.buildMsgFromString(msgString);    sage.msg.MsgManager.postMessage(sysMsg);    return null;  }  sage.msg.SystemMessage newMsg=new sage.msg.SystemMessage(code,level,msgString,(msgVars instanceof java.util.Properties) ? ((java.util.Properties)msgVars) : null);  sage.msg.MsgManager.postMessage(newMsg);  return null;}  }
class C{  public WheelVerticalView(Context context){  this(context,null);}  }
class C{  protected void handleModelChangedEvent(Model model,Object object,int index){  if (model == treeModel) {    if (object instanceof TreeModel.TreeChangedEvent) {      if (((TreeModel.TreeChangedEvent)object).isNodeChanged()) {        updateNodeAndChildren(((TreeModel.TreeChangedEvent)object).getNode());      } else       if (((TreeModel.TreeChangedEvent)object).isTreeChanged()) {        updateAllNodes();      } else {      }    }  } else   if (model == branchRateModel) {    if (index == -1) {      updateAllNodes();    } else {      if (DEBUG) {        if (index >= treeModel.getNodeCount()) {          throw new IllegalArgumentException("Node index out of bounds");        }      }      updateNode(treeModel.getNode(index));    }  } else   if (model == frequencyModel) {    updateAllNodes();  } else   if (model == tipStatesModel) {    if (object instanceof Taxon) {      for (int i=0; i < treeModel.getNodeCount(); i++)       if (treeModel.getNodeTaxon(treeModel.getNode(i)) != null && treeModel.getNodeTaxon(treeModel.getNode(i)).getId().equalsIgnoreCase(((Taxon)object).getId()))       updateNode(treeModel.getNode(i));    } else     updateAllNodes();  } else   if (model instanceof SiteModel) {    updateAllNodes();  } else {    throw new RuntimeException("Unknown componentChangedEvent");  }  super.handleModelChangedEvent(model,object,index);}  }
class C{  public void writeExpression(Expression oldExp){  Object oldValue=getValue(oldExp);  if (get(oldValue) != null) {    return;  }  bindings.put(oldValue,(Expression)cloneStatement(oldExp));  writeObject(oldValue);}  }
class C{  void verifyRecipient(Node nodeAssertion,Node nodeConfirmationData) throws AssertionValidationException {  String acsFromRequest=XMLConverter.getStringAttValue(nodeConfirmationData,SamlXmlTags.ATTRIBUTE_RECIPIENT);  if (!doesAcsMatch(acsFromRequest)) {    String assertionId=XMLConverter.getStringAttValue(nodeAssertion,SamlXmlTags.ATTRIBUTE_ID);    AssertionValidationException exception=new AssertionValidationException(String.format("Found incorrect recipient for assertion id=%s, expected is %s or %s, but was %s",assertionId,acsUrl,acsUrlHttps,acsFromRequest),AssertionValidationException.ReasonEnum.INVALID_RECIPIENT,new String[]{assertionId});    throw exception;  }}  }
class C{  public short loadShort(){  return (short)0;}  }
class C{  private boolean hasSignerAtNewLocation(){  boolean hasSigner=false;  if (tenantName != null) {    ILdapMessage message=null;    try {      String searchFilter=String.format("(objectclass=%s)",TRUSTED_CRED_OBJECT_CLASS);      message=lookupObject(getTenantsDn(tenantName),LdapScope.SCOPE_ONE_LEVEL,searchFilter);      if (message != null) {        ILdapEntry[] entries=message.getEntries();        if (entries != null && entries.length > 0) {          hasSigner=true;        }      }    }  finally {      closeMessage(message);    }  }  return hasSigner;}  }
class C{  public void testIntegration2(){  boolean res;  int originalAppIdValue=mAppIdValue;  int originalContentTypeValue=mContentTypeValue;  String originalAppIdName=mAppIdName;  String originalContentTypeName=mContentTypeName;  String originalClassName=mClassName;  byte[] originalMessageBody=mMessageBody;  Random rd=new Random();  IWapPushManager iwapman=getInterface();  IDataVerify dataverify=getVerifyInterface();  mClassName="com.android.smspush.unitTests.ReceiverActivity";  for (int i=0; i < OMA_CONTENT_TYPE_NAMES.length; i++) {    mContentTypeName=OMA_CONTENT_TYPE_NAMES[i];    mAppIdValue=rd.nextInt(0x0FFFFFFF);    mMessageBody=new byte[100 + rd.nextInt(100)];    rd.nextBytes(mMessageBody);    byte[] pdu=createPDU(7);    byte[] wappushPdu=retrieveWspBody();    try {      dataverify.resetData();      iwapman.addPackage(Integer.toString(mAppIdValue),mContentTypeName,mPackageName,mClassName,WapPushManagerParams.APP_TYPE_ACTIVITY,false,false);      dispatchWapPdu(wappushPdu,iwapman);      iwapman.deletePackage(Integer.toString(mAppIdValue),mContentTypeName,mPackageName,mClassName);      if (mContentTypeName.equals(WspTypeDecoder.CONTENT_TYPE_B_PUSH_CO)) {        assertTrue(dataverify.verifyData(wappushPdu));      } else {        assertTrue(dataverify.verifyData(mMessageBody));      }    } catch (    RemoteException e) {    }  }  mClassName=originalClassName;  mAppIdName=originalAppIdName;  mContentTypeName=originalContentTypeName;  mAppIdValue=originalAppIdValue;  mContentTypeValue=originalContentTypeValue;  mMessageBody=originalMessageBody;}  }
class C{  private void socksConnect(InetAddress applicationServerAddress,int applicationServerPort,int timeout) throws IOException {  try {    IoBridge.connect(fd,socksGetServerAddress(),socksGetServerPort(),timeout);  } catch (  Exception e) {    throw new SocketException("SOCKS connection failed",e);  }  socksRequestConnection(applicationServerAddress,applicationServerPort);  lastConnectedAddress=applicationServerAddress;  lastConnectedPort=applicationServerPort;}  }
class C{  static void testLoadWithMalformedDoc(Path dir) throws IOException {  try (DirectoryStream<Path> stream=Files.newDirectoryStream(dir,"*.xml")){    for (    Path file : stream) {      System.out.println("testLoadWithMalformedDoc, file=" + file.getFileName());      try (InputStream in=Files.newInputStream(file)){        Properties props=new Properties();        try {          props.loadFromXML(in);          throw new RuntimeException("InvalidPropertiesFormatException not thrown");        } catch (        InvalidPropertiesFormatException x) {          System.out.println(x);        }      }     }  } }  }
class C{  private ArrayList<Track> parseTopTracks(String json){  ArrayList<Track> tracks=new ArrayList<>();  try {    JsonNode jsonNode=this.objectMapper.readTree(json);    for (    JsonNode trackNode : jsonNode.get("tracks")) {      JsonNode albumNode=trackNode.get("album");      String albumName=albumNode.get("name").asText();      String artistName=trackNode.get("artists").get(0).get("name").asText();      String trackName=trackNode.get("name").asText();      tracks.add(new Track(trackName,new Album(albumName,new Artist(artistName))));    }  } catch (  IOException e) {    throw new RuntimeException("Failed to parse JSON",e);  }  return tracks;}  }
class C{  public final static byte[] decode(char[] sArr){  int sLen=sArr != null ? sArr.length : 0;  if (sLen == 0)   return new byte[0];  int sepCnt=0;  for (int i=0; i < sLen; i++)   if (IA[sArr[i]] < 0)   sepCnt++;  if ((sLen - sepCnt) % 4 != 0)   return null;  int pad=0;  for (int i=sLen; i > 1 && IA[sArr[--i]] <= 0; )   if (sArr[i] == '=')   pad++;  int len=((sLen - sepCnt) * 6 >> 3) - pad;  byte[] dArr=new byte[len];  for (int s=0, d=0; d < len; ) {    int i=0;    for (int j=0; j < 4; j++) {      int c=IA[sArr[s++]];      if (c >= 0)       i|=c << (18 - j * 6); else       j--;    }    dArr[d++]=(byte)(i >> 16);    if (d < len) {      dArr[d++]=(byte)(i >> 8);      if (d < len)       dArr[d++]=(byte)i;    }  }  return dArr;}  }
class C{  public static boolean checkDisabled(Plugin method){  if (!hasMethod()) {    return true;  }  if (Method.isCompatible(method)) {    Method=null;  }  return (Method == null);}  }
class C{  private boolean execute(boolean readResponse) throws IOException {  try {    httpEngine.sendRequest();    if (readResponse) {      httpEngine.readResponse();    }    return true;  } catch (  IOException e) {    if (handleFailure(e)) {      return false;    } else {      throw e;    }  }}  }
class C{  private void openFirstUseDialog(){  try {    Stage promptStage=new Stage();    AnchorPane preloaderPane=FXMLLoader.load(getClass().getResource(PRELOADER_FIRST_USE_PROMPT));    Button openButton=(Button)preloaderPane.lookup("#openButton");    Button okButton=(Button)preloaderPane.lookup("#okButton");    TextField musicottFolderTextField=(TextField)preloaderPane.lookup("#musicottFolderTextField");    String sep=File.separator;    String userHome=System.getProperty("user.home");    String defaultMusicottLocation=userHome + sep + "Music"+ sep+ "Musicott";    musicottFolderTextField.setText(defaultMusicottLocation);    okButton.setOnMouseClicked(null);    openButton.setOnMouseClicked(null);    Scene promptScene=new Scene(preloaderPane,SCENE_WIDTH,SCENE_HEIGHT);    promptStage.setOnCloseRequest(null);    promptStage.initModality(Modality.APPLICATION_MODAL);    promptStage.initOwner(preloaderStage.getOwner());    promptStage.setResizable(false);    promptStage.setScene(promptScene);    promptStage.initStyle(StageStyle.UNDECORATED);    promptStage.showAndWait();  } catch (  IOException e) {    ErrorDemon.getInstance().showErrorDialog("Error opening Musicott's folder selection","",e);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList nameList;  Node nameNode;  Node firstChild;  String childValue;  doc=(Document)load("hc_staff",false);  nameList=doc.getElementsByTagName("strong");  nameNode=nameList.item(3);  firstChild=nameNode.getFirstChild();  childValue=firstChild.getNodeValue();  assertEquals("documentGetElementsByTagNameValueAssert","Jeny Oconnor",childValue);}  }
class C{  public void deselect(OMGraphicList list){  super.deselect(list);  if (selectedList != null) {    System.out.println("Current selection list: " + selectedList.getDescription());  }}  }
class C{  public void put(IN4JSProject api,IN4JSProject impl){  final String apiId=api.getProjectId();  if (apiId == null)   return;  final String implId=impl.getImplementationId().orNull();  if (implId == null) {    projectsWithUndefImplIds.add(impl);    return;  }  ApiImplMapping.ApiImplAssociation assoc=assocs.get(apiId);  if (assoc == null) {    assoc=new ApiImplAssociation(api);    assocs.put(apiId,assoc);  }  final IN4JSProject replaced=assoc.putImpl(impl);  if (replaced != null && !Objects.equals(replaced,impl)) {    putConflict(apiId,implId,replaced,impl);  }}  }
class C{  private Integer parseDayIcon(JSONObject response) throws JSONException {  JSONObject hourly=response.getJSONObject("hourly");  String icon=hourly.getString("icon");  return iconResources.get(icon);}  }
class C{  private void triggerScanning(DataCollectionScanJob job) throws Exception {  _logger.info("Started scanning Providers : triggerScanning()");  _jobScheduler.refreshProviderConnections();  List<URI> providerList=job.getProviders();  List<URI> allProviderURI=_dbClient.queryByType(StorageProvider.class,true);  List<StorageProvider> allProviders=_dbClient.queryObject(StorageProvider.class,allProviderURI);  allProviderURI=new ArrayList<URI>();  for (  StorageProvider provider : allProviders) {    allProviderURI.add(provider.getId());  }  Map<String,StorageSystemViewObject> storageSystemsCache=Collections.synchronizedMap(new HashMap<String,StorageSystemViewObject>());  boolean exceptionIntercepted=false;  if (ControllerServiceImpl.Lock.SCAN_COLLECTION_LOCK.acquire(ControllerServiceImpl.Lock.SCAN_COLLECTION_LOCK.getRecommendedTimeout())) {    try {      boolean scanIsNeeded=false;      boolean hasProviders=false;      for (      StorageProvider provider : allProviders) {        if (provider.connected() || provider.initializing()) {          hasProviders=true;          if (_jobScheduler.isProviderScanJobSchedulingNeeded(provider,ControllerServiceImpl.SCANNER,job.isSchedulerJob())) {            scanIsNeeded=true;            break;          }        }      }      if (!scanIsNeeded) {        for (        StorageProvider provider : allProviders) {          ScanTaskCompleter scanCompleter=job.findProviderTaskCompleter(provider.getId());          if (scanCompleter == null) {            continue;          }          if (provider.connected() || provider.initializing()) {            scanCompleter.statusReady(_dbClient,"SCAN is not needed");          } else {            String errMsg="Failed to establish connection to the storage provider";            scanCompleter.error(_dbClient,DeviceControllerErrors.smis.unableToCallStorageProvider(errMsg));            provider.setLastScanStatusMessage(errMsg);            _dbClient.persistObject(provider);          }        }        if (!hasProviders) {          _util.performBookKeeping(storageSystemsCache,allProviderURI);        }        _logger.info("Scan is not needed");      } else {        List<URI> cacheProviders=new ArrayList<URI>();        for (        StorageProvider provider : allProviders) {          if (provider.connected() || provider.initializing()) {            ScanTaskCompleter scanCompleter=job.findProviderTaskCompleter(provider.getId());            if (scanCompleter == null) {              String taskId=UUID.randomUUID().toString();              scanCompleter=new ScanTaskCompleter(StorageProvider.class,provider.getId(),taskId);              job.addCompleter(scanCompleter);            }            try {              scanCompleter.updateObjectState(_dbClient,DiscoveredDataObject.DataCollectionJobStatus.IN_PROGRESS);              scanCompleter.setNextRunTime(_dbClient,System.currentTimeMillis() + DataCollectionJobScheduler.JobIntervals.get(ControllerServiceImpl.SCANNER).getInterval() * 1000);              provider.setLastScanStatusMessage("");              _dbClient.persistObject(provider);              _logger.info("provider.getInterfaceType():{}",provider.getInterfaceType());              performScan(provider.getId(),scanCompleter,storageSystemsCache);              cacheProviders.add(provider.getId());            } catch (            Exception ex) {              _logger.error("Scan failed for {}--->",provider.getId(),ex);              scanCompleter.error(_dbClient,DeviceControllerErrors.dataCollectionErrors.scanFailed(ex.getLocalizedMessage(),ex));            }          } else {            if (null != provider.getStorageSystems() && !provider.getStorageSystems().isEmpty()) {              provider.getStorageSystems().clear();            }            if (providerList.contains(provider.getId())) {              String errMsg="Failed to establish connection to the storage provider";              provider.setLastScanStatusMessage(errMsg);              job.findProviderTaskCompleter(provider.getId()).error(_dbClient,DeviceControllerErrors.smis.unableToCallStorageProvider(errMsg));            }            _dbClient.persistObject(provider);          }        }        _util.performBookKeeping(storageSystemsCache,allProviderURI);        for (        URI provider : cacheProviders) {          job.findProviderTaskCompleter(provider).ready(_dbClient);          _logger.info("Scan complete successfully for " + provider);        }      }    } catch (    final Exception ex) {      _logger.error("Scan failed for {} ",ex.getMessage());      exceptionIntercepted=true;      throw ex;    } finally {      ControllerServiceImpl.Lock.SCAN_COLLECTION_LOCK.release();      try {        if (!exceptionIntercepted) {          triggerDiscoveryNew(storageSystemsCache);        }      } catch (      Exception ex) {        _logger.error("Exception occurred while triggering discovery of new systems",ex);      }    }  } else {    job.setTaskError(_dbClient,DeviceControllerErrors.dataCollectionErrors.scanLockFailed());    _logger.debug("Not able to Acquire Scanning lock-->{}",Thread.currentThread().getId());  }}  }
class C{  public void remoteReconfigCoordinator(String nodeId,String type) throws LocalRepositoryException {  final String prefix=String.format("reconfigCoordinator(%s): on %s",type,nodeId);  _log.debug(prefix);  final String[] cmd={_SYSTOOL_CMD,_SYSTOOL_REMOTE_SYSTOOL,nodeId,_SYSTOOL_RECONFIG_COORDINATOR,type};  final Exec.Result result=Exec.sudo(_SYSTOOL_TIMEOUT,cmd);  checkFailure(result,prefix);}  }
class C{  @Override public synchronized void close() throws IOException {  if (DBG)   log("close() EX");}  }
class C{  @Override public boolean remove(Object value){  return _set.remove(unwrap(value));}  }
class C{  public GameDelegateBridge(final IDelegateBridge bridge){  m_bridge=bridge;  m_historyWriter=new GameDelegateHistoryWriter(m_bridge.getHistoryWriter(),getData());}  }
class C{  public void action(String action){  bot.sendIRC().action(channel.getName(),action);}  }
class C{  public DistributedLogClientBuilder periodicHandshakeIntervalMs(long intervalMs){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setPeriodicHandshakeIntervalMs(intervalMs);  return newBuilder;}  }
class C{  public void start(){  if (description_file_loaded) {    pause=false;    if (graphics_on)     this.repaint();    for (int i=0; i < control_systems.length; i++) {      control_systems[i].trialInit();    }    startrun=System.currentTimeMillis();    frames=0;  } else {    Dialog tmp;    if (graphics_on)     tmp=new DialogMessage(parent,"TBSim Error","You must load a description file first.\n" + "Use the `load' option under the `file' menu.");  }}  }
class C{  public MetaSentence(Session s,String sSentence,SerializerWrite serwrite,SerializerRead serread){  super(s);  m_sSentence=sSentence;  m_SerWrite=serwrite;  m_SerRead=serread;}  }
class C{  public SingleIsA_ createSingleIsA_(){  SingleIsA_Impl singleIsA_=new SingleIsA_Impl();  return singleIsA_;}  }
class C{  public GeneratorConfiguration createGeneratorConfiguration(){  GeneratorConfigurationImpl generatorConfiguration=new GeneratorConfigurationImpl();  return generatorConfiguration;}  }
class C{  public Collection<SynchronizingStorageEngine> values(){  return localStores.values();}  }
class C{  public WifiP2pDevice remove(String deviceAddress){  validateDeviceAddress(deviceAddress);  return mDevices.remove(deviceAddress);}  }
class C{  public int cell(int r,int c){  return board[r][c];}  }
class C{  public static ToHitData toHit(IGame game,int attackerId,Targetable target,MovePath md){  final Entity ae=game.getEntity(attackerId);  if (target == null) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is null");  }  Entity te=null;  if (target.getTargetType() == Targetable.TYPE_ENTITY) {    te=(Entity)target;  }  Coords chargeSrc=ae.getPosition();  MoveStep chargeStep=null;  if (ae instanceof Infantry) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Infantry can't D.F.A.");  }  if (ae.getJumpType() == Mech.JUMP_BOOSTER) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Can't D.F.A. using mechanical jump boosters.");  }  if (!md.contains(MoveStepType.DFA)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"D.F.A. action not found in movement path");  }  if (!md.contains(MoveStepType.START_JUMP)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"D.F.A. must involve jumping");  }  if ((te != null) && te.isAirborne()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Cannot D.F.A. an airborne target.");  }  if ((te != null) && (te instanceof Dropship)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Cannot D.F.A. a dropship.");  }  if ((te != null) && (Entity.NONE != te.getTransportId())) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is a passenger.");  }  if (md.contains(MoveStepType.EVADE)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"No evading while charging");  }  if ((te != null) && (Entity.NONE != te.getSwarmTargetId())) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is swarming a Mek.");  }  md.compile(game,ae);  for (final Enumeration<MoveStep> i=md.getSteps(); i.hasMoreElements(); ) {    final MoveStep step=i.nextElement();    if (!step.isLegal(md)) {      break;    }    if (step.getType() == MoveStepType.DFA) {      chargeStep=step;    } else {      chargeSrc=step.getPosition();    }  }  if ((chargeStep == null) || !target.getPosition().equals(chargeStep.getPosition())) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Could not reach target with movement");  }  if ((te != null) && (!te.isDone() && !te.isImmobile())) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target must be done with movement");  }  return DfaAttackAction.toHit(game,attackerId,target,chargeSrc);}  }
class C{  private void registerListener(final String requestUrl,final String target,String[] methods,Integer expireTime,String filter,Integer queueExpireTime,Map<String,String> staticHeaders){  registerListener(requestUrl,target,methods,expireTime,filter,queueExpireTime,staticHeaders,null);}  }
class C{  public void invoke(BurlapInput in,BurlapOutput out) throws Exception {  invoke(_service,in,out);}  }
class C{  private int[][] generateDistinctRandomSets(int n,int p,int maxNumSets,int[][] setsToAvoidOverlapWith){  if (true) {    throw new RuntimeException("Not implemented yet");  }  int maxPossibleNumSets=0;  try {    maxPossibleNumSets=MathsUtils.numOfSets(n,p);    if (maxNumSets > maxPossibleNumSets) {      maxNumSets=maxPossibleNumSets;      return generateAllDistinctSets(n,p);    }  } catch (  Exception e) {  }  int[][] sets=new int[maxNumSets][p];  Vector<Integer> availableChoices=new Vector<Integer>();  for (int i=0; i < n; i++) {    availableChoices.add(new Integer(i));  }  Vector<Integer> thisSet=new Vector<Integer>();  Hashtable<Vector<Integer>,Integer> chosenSets=new Hashtable<Vector<Integer>,Integer>();  for (int s=0; s < maxNumSets; s++) {    for (; ; ) {      availableChoices.addAll(thisSet);      if (setsToAvoidOverlapWith != null) {        for (int i=0; i < p; i++) {          availableChoices.remove(new Integer(setsToAvoidOverlapWith[s][p]));        }      }      thisSet.clear();      for (int q=0; q < p; q++) {        int randIndex=random.nextInt(n - q);        Integer nextSelection=availableChoices.remove(randIndex);        sets[s][q]=nextSelection.intValue();      }      Arrays.sort(sets[s]);      for (int q=0; q < p; q++) {        thisSet.add(new Integer(sets[s][q]));      }      if (chosenSets.get(thisSet) == null) {        chosenSets.put(thisSet,new Integer(0));        break;      }    }  }  return sets;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.CONDITION_RHS___COMPARISON_OPERATOR_1:    return getComparison_operator_1();case UmplePackage.CONDITION_RHS___RHS_1:  return getRHS_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  boolean implementsAlg(String serv,String alg,String attribute,String val){  String servAlg=serv + "." + alg;  String prop=getPropertyIgnoreCase(servAlg);  if (prop == null) {    alg=getPropertyIgnoreCase("Alg.Alias." + servAlg);    if (alg != null) {      servAlg=serv + "." + alg;      prop=getPropertyIgnoreCase(servAlg);    }  }  if (prop != null) {    if (attribute == null) {      return true;    }    return checkAttribute(servAlg,attribute,val);  }  return false;}  }
class C{  public void clipRect(int x,int y,int width,int height){  clip(new Rectangle(x,y,width,height));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void shrinkFileIfPossible(int minPercent){  if (fileStore.isReadOnly()) {    return;  }  long end=getFileLengthInUse();  long fileSize=fileStore.size();  if (end >= fileSize) {    return;  }  if (minPercent > 0 && fileSize - end < BLOCK_SIZE) {    return;  }  int savedPercent=(int)(100 - (end * 100 / fileSize));  if (savedPercent < minPercent) {    return;  }  if (!closed) {    sync();  }  fileStore.truncate(end);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static <T>T eachLine(URL url,@ClosureParams(value=FromString.class,options={"String","String,Integer"}) Closure<T> closure) throws IOException {  return eachLine(url,1,closure);}  }
class C{  public void showDroidsafeTextMarkers(IEditorPart openedEditor,String className){  if (openedEditor != null && openedEditor instanceof ITextEditor && fProcessedClasses != null) {    ITextEditor editor=(ITextEditor)openedEditor;    if (fProcessedClasses.contains(className)) {      if (fClassesNeedUpdate.contains(className)) {        ClassMarkerProcessor classProcessor=get(className);        classProcessor.updateTaintMarkers(editor);        fClassesNeedUpdate.remove(className);      }    } else {      fProcessedClasses.add(className);      Map<String,Map<IntRange,Map<String,Set<CallLocationModel>>>> classTaintedDataMap=fTaintedDataMap.get(className);      Map<String,Set<IntRange>> classUnreachableMethodMap=fUnreachableSourceMethodMap.get(className);      if (classTaintedDataMap != null || classUnreachableMethodMap != null) {        IEditorInput input=editor.getEditorInput();        if (input instanceof FileEditorInput) {          ClassMarkerProcessor classProcessor=get(className);          classProcessor.showDroidsafeTextMarkers(editor);        }      }    }  }}  }
class C{  public DoubleMatrix2D like(int rows,int columns){  return new RCDoubleMatrix2D(rows,columns);}  }
class C{  public static EnvironmentId parse(String fqn){  if (fqn == null) {    throw new IllegalArgumentException("Null fqn isn't allowed.");  }  final Matcher matcher=ENV_FQN_PATTERN.matcher(fqn);  if (matcher.matches()) {    return new EnvironmentId(Scope.fromValue(matcher.group(1)),matcher.group(2),matcher.group(3));  }  throw new IllegalArgumentException("Invalid fqn: " + fqn);}  }
class C{  public void shiftLeft() throws IOException {  writeCode(SHIFT_LEFT);}  }
class C{  public void addData(String name,InputStream data,long dataSize,String mimeType){  args.put(name,data);  if (!filenames.containsKey(name)) {    filenames.put(name,name);  }  filesizes.put(name,String.valueOf(dataSize));  mimeTypes.put(name,mimeType);}  }
class C{  @Field(41) public Pointer<Integer> pulVal(){  return this.io.getPointerField(this,41);}  }
class C{  private void writeDataPage(ByteBuffer pageBuffer,int pageNumber) throws IOException {  getPageChannel().writePage(pageBuffer,pageNumber);  _addRowBufferH.possiblyInvalidate(pageNumber,pageBuffer);  ++_modCount;}  }
class C{  public static <T1,T2,T3,T4,T5,T6,R>QuadFunction<T3,T4,T5,T6,R> partial6(final T1 t1,final T2 t2,final HexFunction<T1,T2,T3,T4,T5,T6,R> hexFunc){  return null;}  }
class C{  public StateWrapper(final IInfluencingState<ApiLatticeElement,ObjectType> wrappedState){  Preconditions.checkNotNull(wrappedState,"IE02086: Wrapped state argument can not be null");  element=wrappedState.getElement();  object=wrappedState.getObject();}  }
class C{  public ConversionException(final String message){  super(message);}  }
class C{  protected static Long max(Long l1,Long l2){  if (l1 == null && l2 == null) {    return null;  }  if (l2 == null) {    return l1;  }  if (l1 == null) {    return l2;  }  return Math.max(l1,l2);}  }
class C{  public static BufferedImage createCompatibleImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height);}  }
class C{  public static void main(final String[] args) throws Exception {  int i=0;  int flags=ClassReader.SKIP_DEBUG;  boolean ok=true;  if (args.length < 1 || args.length > 2) {    ok=false;  }  if (ok && "-debug".equals(args[0])) {    i=1;    flags=0;    if (args.length != 2) {      ok=false;    }  }  if (!ok) {    System.err.println("Prints the ASM code to generate the given class.");    System.err.println("Usage: ASMifier [-debug] " + "<fully qualified class name or class file name>");    return;  }  ClassReader cr;  if (args[i].endsWith(".class") || args[i].indexOf('\\') > -1 || args[i].indexOf('/') > -1) {    cr=new ClassReader(new FileInputStream(args[i]));  } else {    cr=new ClassReader(args[i]);  }  cr.accept(new TraceClassVisitor(null,new ASMifier(),new PrintWriter(System.out)),flags);}  }
class C{  @Override public void onAlarm(Alarm alarm){  if (mCurrentScrollDir == DragController.SCROLL_LEFT) {    mContent.scrollLeft();    mScrollHintDir=DragController.SCROLL_NONE;  } else   if (mCurrentScrollDir == DragController.SCROLL_RIGHT) {    mContent.scrollRight();    mScrollHintDir=DragController.SCROLL_NONE;  } else {    return;  }  mCurrentScrollDir=DragController.SCROLL_NONE;  mScrollPauseAlarm.setOnAlarmListener(new OnScrollFinishedListener(mDragObject));  mScrollPauseAlarm.setAlarm(DragController.RESCROLL_DELAY);}  }
class C{  public void edit(){  if (this.selectedObject instanceof Placemark && this.selectedObject.hasUserProperty(EDITABLE)) {    Placemark placemark=(Placemark)this.selectedObject;    Bundle args=new Bundle();    args.putString("title","Select the " + placemark.getDisplayName() + "'s type");    if (placemark.hasUserProperty(AIRCRAFT_TYPE)) {      args.putString("vehicleKey",AIRCRAFT_TYPE);      args.putString("vehicleValue",(String)placemark.getUserProperty(AIRCRAFT_TYPE));    } else     if (placemark.hasUserProperty(AUTOMOTIVE_TYPE)) {      args.putString("vehicleKey",AUTOMOTIVE_TYPE);      args.putString("vehicleValue",(String)placemark.getUserProperty(AUTOMOTIVE_TYPE));    }    VehicleTypeDialog dialog=new VehicleTypeDialog();    dialog.setArguments(args);    dialog.show(getSupportFragmentManager(),"aircraft_type");  } else {    Toast.makeText(getApplicationContext(),(this.selectedObject == null ? "Object " : this.selectedObject.getDisplayName()) + " is not editable.",Toast.LENGTH_LONG).show();  }}  }
class C{  public AsyncTimerOptions create(){  return new AsyncTimerOptions();}  }
class C{  public static String md5(String stringToHash){  if (stringToHash != null) {    try {      MessageDigest md=MessageDigest.getInstance("MD5");      byte[] bytes=md.digest(stringToHash.getBytes());      StringBuilder sb=new StringBuilder(2 * bytes.length);      for (int i=0; i < bytes.length; i++) {        int low=(bytes[i] & 0x0f);        int high=((bytes[i] & 0xf0) >> 4);        sb.append(Constants.HEXADECIMAL[high]);        sb.append(Constants.HEXADECIMAL[low]);      }      return sb.toString();    } catch (    NoSuchAlgorithmException e) {      return "";    }  } else {    return "";  }}  }
class C{  public static void printFeatures(String fname,List<Object> features,String layername){  if (!features.isEmpty()) {    print(layername + "." + fname+ "=");    for (    Object obj : features) {      print(obj.toString());    }    println();  }}  }
class C{  private static String percentEncodeRfc3986(String string){  try {    string=string.replace("+","%2B");    string=URLDecoder.decode(string,"UTF-8");    string=URLEncoder.encode(string,"UTF-8");    return string.replace("+","%20").replace("*","%2A").replace("%7E","~");  } catch (  Exception e) {    return string;  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("{");  sb.append(getContinuousScale().toString());  sb.append(",#");  sb.append(new Color(color1[0],color1[1],color1[2],color1[3]).getRGB());  sb.append(",#");  sb.append(new Color(color2[0],color2[1],color2[2],color2[3]).getRGB());  if (color3 != null) {    sb.append(",#");    sb.append(new Color(color3[0],color3[1],color3[2],color3[3]).getRGB());  }  sb.append("}");  return sb.toString();}  }
class C{  public TextCharacter withoutModifier(SGR modifier){  if (!modifiers.contains(modifier)) {    return this;  }  EnumSet<SGR> newSet=EnumSet.copyOf(this.modifiers);  newSet.remove(modifier);  return new TextCharacter(character,foregroundColor,backgroundColor,newSet);}  }
class C{  private static Intent createGeoUriIntent(String uri){  return new Intent(Intent.ACTION_VIEW,Uri.parse(uri));}  }
class C{  public static String toJson(final Object object){  return toJson(object,true);}  }
class C{  public boolean isAuditLogDataAvailable(){  return (model.getAuditLogData() != null && model.getAuditLogData().length > 0);}  }
class C{  private Promise<PrivateKey> fetchPreKey(){  return PromisesArray.of(ownKeys.getPreKeys()).random();}  }
class C{  public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'SISTER_CACHE' ("+ "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "'RESULT' TEXT,"+ "'PAGE' INTEGER,"+ "'TIME' INTEGER);");}  }
class C{  @Override protected final double blackVarianceImpl(final double maturity,final double strike){  final double vol=blackVolImpl(maturity,strike);  final double variance=vol * vol * maturity;  return variance;}  }
class C{  protected StoragePool checkPoolExistsInDB(String nativeGuid) throws IOException {  StoragePool pool=null;  List<StoragePool> poolInDB=CustomQueryUtility.getActiveStoragePoolByNativeGuid(_dbClient,nativeGuid);  if (poolInDB != null && !poolInDB.isEmpty()) {    pool=poolInDB.get(0);  }  return pool;}  }
class C{  public void addListener(final ICodeNodeListener listener){  m_listeners.addListener(listener);}  }
class C{  void reset(){synchronized (this) {    databaseRef=null;  }}  }
class C{  public FlowLayout(int align,int hgap,int vgap){  this.hgap=hgap;  this.vgap=vgap;  setAlignment(align);}  }
class C{  private final void updateBuffer(int offset){  fBufferOffset=offset;  if (fBufferOffset + fBuffer.length > fRangeOffset + fRangeLength)   fBufferLength=fRangeLength - (fBufferOffset - fRangeOffset); else   fBufferLength=fBuffer.length;  try {    final String content=fDocument.get(fBufferOffset,fBufferLength);    content.getChars(0,fBufferLength,fBuffer,0);  } catch (  BadLocationException e) {  }}  }
class C{  public HeadlessConsole(){  logToSystem=true;}  }
class C{  @Override public void close() throws IOException {  coreContainer.shutdown();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.605 -0500",hash_original_method="C19DA42AB571E96824BDE2AB4D9CB311",hash_generated_method="88B07071FEA72C990EF2B30E64B194D7") public static String convertKeypadLettersToDigits(String input){  if (input == null) {    return input;  }  int len=input.length();  if (len == 0) {    return input;  }  char[] out=input.toCharArray();  for (int i=0; i < len; i++) {    char c=out[i];    out[i]=(char)KEYPAD_MAP.get(c,c);  }  return new String(out);}  }
class C{  public void encodeByte(int b){  ensureFreeBytes(1);  buf[offset++]=(byte)b;}  }
class C{  public SearchObject(IconType icon,String keyword){  this.icon=icon;  this.keyword=keyword;}  }
class C{  @Override protected void onRestoreInstanceState(@NonNull Bundle state){  ensureList();  super.onRestoreInstanceState(state);}  }
class C{  public T caseCompositeProcessor(CompositeProcessor object){  return null;}  }
class C{  @OnClose public void onClose(final Session session,final CloseReason closeReason){  removeSession(session);}  }
class C{  public UserCredentialsListener(String userId){  this.userId=userId;}  }
class C{  public void addMember(Stream member){  memberSet.add(member);}  }
class C{  public static Function<String> jsonArray(Object... args){  return new JSONArgumentFunction<>("json_array",null,args);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.VARIABLE;}  }
class C{  public MemcacheClientBuilder<V> withConnections(final int connections){  if (connections < 1) {    throw new IllegalArgumentException("connections must be at least 1");  }  this.connections=connections;  return this;}  }
class C{  public void push(int value) throws IOException {  print("push",new String[]{"" + value});}  }
class C{  private void executeList(String[] args) throws IOException, ServiceException, DocumentListException {  DocumentListFeed feed=null;  String msg="";switch (args.length) {case 1:    msg="List of docs: ";  feed=docs.getDocsListFeed("all");break;case 2:msg="List of all " + args[1] + ": ";feed=docs.getDocsListFeed(args[1]);break;case 3:if (args[1].equals("folder")) {msg="Contents of folder_id '" + args[2] + "': ";feed=docs.getFolderDocsListFeed(args[2]);}break;}if (feed != null) {output.println(msg);for (DocumentListEntry entry : feed.getEntries()) {printDocumentEntry(entry);}} else {printMessage(COMMAND_HELP_MESSAGE);}}  }
class C{  public static void writeField(final Field field,final Object target,final Object value) throws IllegalAccessException {  FieldUtils.writeField(field,target,value,false);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MOrderTax[").append("C_Order_ID=").append(getC_Order_ID()).append(", C_Tax_ID=").append(getC_Tax_ID()).append(", Base=").append(getTaxBaseAmt()).append(", Tax=").append(getTaxAmt()).append("]");  return sb.toString();}  }
class C{  public Stream<Tuple2io<int[]>> read(String in) throws FileNotFoundException {  return read(new FileInputStream(in));}  }
class C{  public final void XprintLatin1NoLf(String string) throws IOException {  if (_source == null) {    return;  }  if (string == null) {    string="null";  }  byte[] writeBuffer=_writeBuffer;  int writeLength=_writeLength;  int length=string.length();  int offset=0;  int charsLength=CHARS_LENGTH;  char[] chars=_chars;  while (length > 0) {    int sublen=Math.min(charsLength,writeBuffer.length - writeLength);    if (sublen <= 0) {      _source.write(writeBuffer,0,writeLength,false);      _position+=writeLength;      _isFlushRequired=true;      writeLength=0;      sublen=Math.min(charsLength,writeBuffer.length - writeLength);    }    sublen=Math.min(length,sublen);    string.getChars(offset,sublen,chars,0);    for (int i=0; i < sublen; i++) {      byte value=(byte)chars[i];      if (value == '\r' || value == '\n') {        length=0;        break;      }      writeBuffer[writeLength++]=value;    }    offset+=sublen;    length-=sublen;  }  _writeLength=writeLength;}  }
class C{  public boolean isEncryptionEnabled(){  return encrypt;}  }
class C{  public GSAContextDisplaySelection(String encoding,String content,int startOffset,int endOffset){  this.encoding=encoding;  this.content=content;  this.startOffset=startOffset;  this.endOffset=endOffset;}  }
class C{  public CertificateValidity(DerInputStream in) throws IOException {  DerValue derVal=in.getDerValue();  construct(derVal);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatadeletedataend.class,args);}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];        fileCount++;      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public boolean empty(){  return m_firstFree == 0;}  }
class C{  public CategoryImageRetrieveStrategyAttributeImpl(final String attributeCode){  this.attributeCode=attributeCode;}  }
class C{  public boolean isGlobalInt32BaseAtomicsSupported(){  return hasExtension("cl_khr_global_int32_base_atomics");}  }
class C{  public ReliefF(final ClassificationDataSet cds,int featureCount,final int m,final int n,final DistanceMetric dm,VectorCollectionFactory<Vec> vcf,ExecutorService threadPool){  this(featureCount,m,n,dm,vcf);  fit(cds,threadPool);}  }
class C{  public Boolean isHttpSystemBackup(){  return httpSystemBackup;}  }
class C{  public static Test suite(){  return (new TestSuite(SetPropertyITCase.class));}  }
class C{  public void randomizeFanOut(){  for (  Synapse synapse : getFanOut().values()) {    synapse.randomize();  }}  }
class C{  public void markUsed(long pos,int length){  freeSpace.markUsed(pos,length);}  }
class C{  public void randomInit(){  do {    m_bits=new boolean[m_nNodes * m_nNodes];    for (int i=0; i < m_nNodes; i++) {      int iPos;      do {        iPos=m_random.nextInt(m_nNodes * m_nNodes);      } while (isSquare(iPos));      m_bits[iPos]=true;    }  } while (hasCycles());  calcGlobalScore();}  }
class C{  public static CfciRunner serializableInstance(){  return new CfciRunner(Dag.serializableInstance(),new Parameters());}  }
class C{  public static void swapCol(Matrix A,int j,int k){  swapCol(A,j,k,0,A.rows());}  }
class C{  public void onDestroy(){  closeDialog();}  }
class C{  @Deprecated public void addPostalLocation(Context context,long postalId,double latitude,double longitude){  final ContentResolver resolver=context.getContentResolver();  ContentValues values=new ContentValues(2);  values.put(POSTAL_LOCATION_LATITUDE,latitude);  values.put(POSTAL_LOCATION_LONGITUDE,longitude);  Uri loc=resolver.insert(CONTENT_URI,values);  long locId=ContentUris.parseId(loc);  values.clear();  values.put(AUX_DATA,locId);  resolver.update(ContentUris.withAppendedId(CONTENT_URI,postalId),values,null,null);}  }
class C{  public ActiveInfoStorageCalculatorKraskov(String calculatorName) throws InstantiationException, IllegalAccessException, ClassNotFoundException {  super(calculatorName);  if (!calculatorName.equalsIgnoreCase(MI_CALCULATOR_KRASKOV1) && !calculatorName.equalsIgnoreCase(MI_CALCULATOR_KRASKOV2)) {    throw new ClassNotFoundException("Must be an underlying Kraskov-Grassberger calculator");  }}  }
class C{  public static List<Publisher> listPublishers(){  List<Publisher> result=new LinkedList<Publisher>();  List<String> ids=new LinkedList<String>();  PreparedStatement statement=DatabaseRequest.ALL_PUBLISHERS.getStatement();  try {    ResultSet set=statement.executeQuery();    while (set.next()) {      String id=set.getString("id");      if (!ids.contains(id)) {        ids.add(id);        result.add(new Publisher(id,set.getString("name"),set.getString("sort")));      }    }  } catch (  SQLException e) {    logger.error("listPublishers: " + e);    sqlException+=(2 ^ 7);  }  return result;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.MODIFIABLE_ELEMENT__DECLARED_MODIFIERS:    getDeclaredModifiers().clear();  return;}super.eUnset(featureID);}  }
class C{  public static void checkStore(GridCacheContext<?,?> ctx) throws IgniteCheckedException {  if (!ctx.store().configured())   throw new IgniteCheckedException("Failed to find cache store for method 'reload(..)' " + "(is GridCacheStore configured?)");}  }
class C{  public RectCompat(){  left=top=right=bottom=0;}  }
class C{  public char toChar(int index){  if (index < 0 || index >= R) {    throw new IndexOutOfBoundsException("Alphabet index out of bounds");  }  return alphabet[index];}  }
class C{  public void addObservations(int[] source,int[] dest,boolean[] valid){  int rows=dest.length;  if (dest.length - startObservationTime <= 0) {    return;  }  int[] pastVal=new int[destEmbeddingDelay];  for (int d=0; d < destEmbeddingDelay; d++) {    pastVal[d]=0;    for (int p=0; p < k - 1; p++) {      pastVal[d]+=dest[startObservationTime + d - 1 - (k - 1) * destEmbeddingDelay + p * destEmbeddingDelay];      pastVal[d]*=base;    }  }  int minDestLengthRequired=(k > 0) ? (k - 1) * destEmbeddingDelay + 1 : 0;  int timeSinceLastDestInvalid=minDestLengthRequired;  for (int t=startObservationTime - 1; t >= 0; t--) {    if (!valid[t]) {      timeSinceLastDestInvalid=startObservationTime - t - 1;      break;    }  }  int[] sourcePastVal=new int[sourceEmbeddingDelay];  for (int d=0; d < sourceEmbeddingDelay; d++) {    sourcePastVal[d]=0;    for (int p=0; p < sourceHistoryEmbedLength - 1; p++) {      sourcePastVal[d]+=source[startObservationTime + d - delay - (sourceHistoryEmbedLength - 1) * sourceEmbeddingDelay + p * sourceEmbeddingDelay];      sourcePastVal[d]*=base;    }  }  int minSourceLengthRequired=(sourceHistoryEmbedLength - 1) * sourceEmbeddingDelay + 1;  int timeSinceLastSourceInvalid=minSourceLengthRequired;  for (int t=startObservationTime - delay; t >= 0; t--) {    if (!valid[t]) {      timeSinceLastSourceInvalid=startObservationTime - t - 1;      break;    }  }  int destVal, destEmbeddingPhase=0, sourceEmbeddingPhase=0;  for (int r=startObservationTime; r < rows; r++) {    timeSinceLastDestInvalid++;    timeSinceLastSourceInvalid++;    if (k > 0) {      pastVal[destEmbeddingPhase]+=dest[r - 1];    }    sourcePastVal[sourceEmbeddingPhase]+=source[r - delay];    if (!valid[r]) {      timeSinceLastDestInvalid=0;    }    if (!valid[r - delay]) {      timeSinceLastSourceInvalid=0;    }    if ((timeSinceLastDestInvalid > minDestLengthRequired) && (timeSinceLastSourceInvalid >= minSourceLengthRequired)) {      destVal=dest[r];      int thisPastVal=pastVal[destEmbeddingPhase];      int thisSourceVal=sourcePastVal[sourceEmbeddingPhase];      sourceNextPastCount[thisSourceVal][destVal][thisPastVal]++;      sourcePastCount[thisSourceVal][thisPastVal]++;      nextPastCount[destVal][thisPastVal]++;      pastCount[thisPastVal]++;      nextCount[destVal]++;      observations++;    }    if (k > 0) {      pastVal[destEmbeddingPhase]-=maxShiftedValue[dest[r - 1 - (k - 1) * destEmbeddingDelay]];      pastVal[destEmbeddingPhase]*=base;    }    sourcePastVal[sourceEmbeddingPhase]-=maxShiftedSourceValue[source[r - delay - (sourceHistoryEmbedLength - 1) * sourceEmbeddingDelay]];    sourcePastVal[sourceEmbeddingPhase]*=base;    destEmbeddingPhase=(destEmbeddingPhase + 1) % destEmbeddingDelay;    sourceEmbeddingPhase=(sourceEmbeddingPhase + 1) % sourceEmbeddingDelay;  }}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private void writeComponent(ICalComponent component) throws IOException {  ICalComponentScribe componentScribe=index.getComponentScribe(component);  writer.writeStartComponent(componentScribe.getComponentName().toLowerCase());  List propertyObjs=componentScribe.getProperties(component);  if (component instanceof ICalendar && component.getProperty(Version.class) == null) {    propertyObjs.add(0,new Version(targetVersion));  }  for (  Object propertyObj : propertyObjs) {    context.setParent(component);    ICalProperty property=(ICalProperty)propertyObj;    ICalPropertyScribe propertyScribe=index.getPropertyScribe(property);    ICalParameters parameters;    JCalValue value;    try {      parameters=propertyScribe.prepareParameters(property,context);      value=propertyScribe.writeJson(property,context);    } catch (    SkipMeException e) {      continue;    }    String propertyName=propertyScribe.getPropertyName(targetVersion).toLowerCase();    ICalDataType dataType=propertyScribe.dataType(property,targetVersion);    writer.writeProperty(propertyName,parameters,dataType,value);  }  List subComponents=componentScribe.getComponents(component);  if (component instanceof ICalendar) {    Collection<VTimezone> tzs=getTimezoneComponents();    for (    VTimezone tz : tzs) {      if (!subComponents.contains(tz)) {        subComponents.add(0,tz);      }    }  }  for (  Object subComponentObj : subComponents) {    ICalComponent subComponent=(ICalComponent)subComponentObj;    writeComponent(subComponent);  }  writer.writeEndComponent();}  }
class C{  public static PapeResponse createPapeResponse(){  return new PapeResponse();}  }
class C{  @Override public String toString(){  StringBuilder result=new StringBuilder();  for (  DF_LatticeCell cell : values()) {    result.append(cell);    result.append("\n");  }  return result.toString();}  }
class C{  public static int OS2IP(byte[] input){  if (input.length > 4) {    throw new ArithmeticException("invalid input length");  }  if (input.length == 0) {    return 0;  }  int result=0;  for (int j=0; j < input.length; j++) {    result|=(input[j] & 0xff) << (8 * (input.length - 1 - j));  }  return result;}  }
class C{  public static boolean verify(byte[] data,byte[] signature,byte[] pub){  if (Secp256k1Context.isEnabled()) {    try {      return NativeSecp256k1.verify(data,signature,pub);    } catch (    NativeSecp256k1Util.AssertFailException e) {      log.error("Caught AssertFailException inside secp256k1",e);      return false;    }  }  return verify(data,ECDSASignature.decodeFromDER(signature),pub);}  }
class C{  public ExchangeType createExchangeTypeFromString(EDataType eDataType,String initialValue){  ExchangeType result=ExchangeType.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  public CheckedListIterator(ListIterator<E> i,Class<E> type){  this.i=i;  this.type=type;}  }
class C{  public static void orthoM(float[] m,int mOffset,float left,float right,float bottom,float top,float near,float far){  if (left == right) {    throw new IllegalArgumentException("left == right");  }  if (bottom == top) {    throw new IllegalArgumentException("bottom == top");  }  if (near == far) {    throw new IllegalArgumentException("near == far");  }  final float r_width=1.0f / (right - left);  final float r_height=1.0f / (top - bottom);  final float r_depth=1.0f / (far - near);  final float x=2.0f * (r_width);  final float y=2.0f * (r_height);  final float z=-2.0f * (r_depth);  final float tx=-(right + left) * r_width;  final float ty=-(top + bottom) * r_height;  final float tz=-(far + near) * r_depth;  m[mOffset + 0]=x;  m[mOffset + 5]=y;  m[mOffset + 10]=z;  m[mOffset + 12]=tx;  m[mOffset + 13]=ty;  m[mOffset + 14]=tz;  m[mOffset + 15]=1.0f;  m[mOffset + 1]=0.0f;  m[mOffset + 2]=0.0f;  m[mOffset + 3]=0.0f;  m[mOffset + 4]=0.0f;  m[mOffset + 6]=0.0f;  m[mOffset + 7]=0.0f;  m[mOffset + 8]=0.0f;  m[mOffset + 9]=0.0f;  m[mOffset + 11]=0.0f;}  }
class C{  public void fill(Graphics2D g,Shape s,boolean isRounded,boolean paintRightShadow){  if (isRounded) {    fillInternalShadowRounded(g,s);  } else {    fillInternalShadow(g,s,paintRightShadow);  }}  }
class C{  public final void close() throws SQLException {  if (m_ps != null) {    m_ps.close();  }  m_ps=null;}  }
class C{  @SuppressWarnings("unchecked") public void mouseDragged(MouseEvent e){  if (locked == false) {    VisualizationViewer<V,E> vv=(VisualizationViewer<V,E>)e.getSource();    if (vertex != null) {      Point p=e.getPoint();      Point2D graphPoint=vv.getRenderContext().getMultiLayerTransformer().inverseTransform(p);      Point2D graphDown=vv.getRenderContext().getMultiLayerTransformer().inverseTransform(down);      Layout<V,E> layout=vv.getGraphLayout();      double dx=graphPoint.getX() - graphDown.getX();      double dy=graphPoint.getY() - graphDown.getY();      PickedState<V> ps=vv.getPickedVertexState();      for (      V v : ps.getPicked()) {        Point2D vp=layout.apply(v);        vp.setLocation(vp.getX() + dx,vp.getY() + dy);        layout.setLocation(v,vp);      }      down=p;    } else {      Point2D out=e.getPoint();      if (e.getModifiers() == this.addToSelectionModifiers || e.getModifiers() == modifiers) {        rect.setFrameFromDiagonal(down,out);      }    }    if (vertex != null)     e.consume();    vv.repaint();  }}  }
class C{  protected synchronized void bcsPreSerializationHook(ObjectOutputStream oos) throws IOException {  oos.writeInt(serializable);  if (serializable <= 0)   return;  int count=0;  Iterator i=services.entrySet().iterator();  while (i.hasNext() && count < serializable) {    Map.Entry entry=(Map.Entry)i.next();    BCSSServiceProvider bcsp=null;    try {      bcsp=(BCSSServiceProvider)entry.getValue();    } catch (    ClassCastException cce) {      continue;    }    if (bcsp.getServiceProvider() instanceof Serializable) {      oos.writeObject(entry.getKey());      oos.writeObject(bcsp);      count++;    }  }  if (count != serializable)   throw new IOException("wrote different number of service providers than expected");}  }
class C{  protected void fireOpenOrderEnd(ConcurrentHashMap<Integer,TradeOrder> openOrders){  Object[] listeners=this.listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == BrokerChangeListener.class) {      ((BrokerChangeListener)listeners[i + 1]).openOrderEnd(openOrders);    }  }}  }
class C{  public void execute(final Session session){  for (  String cqlStatement : cqlStatements) {    LOG.debug("Executing CQL: " + cqlStatement);    session.execute(cqlStatement);  }}  }
class C{  public boolean isColorRelative(int i){  return (masks[i] & COLOR_RELATIVE_MASK) != 0;}  }
class C{  public Value addObject(Object instance) throws RepositoryException {  if (instance instanceof RDFObjectBehaviour) {    RDFObjectBehaviour support=(RDFObjectBehaviour)instance;    Object entity=support.getBehaviourDelegate();    if (entity != instance)     return addObject(entity);  }  if (instance instanceof RDFObject) {    if (((RDFObject)instance).getObjectConnection() == this)     return ((RDFObject)instance).getResource();  } else {    if (of.isDatatype(instance.getClass()))     return of.createLiteral(instance);  }  Class<?> type=instance.getClass();  if (RDFObject.class.isAssignableFrom(type) || isEntity(type)) {    Resource resource=assignResource(instance);    if (!isAlreadyMerged(resource)) {      addObject(resource,instance);    }    return resource;  }  return of.createLiteral(instance);}  }
class C{  @LogMessageDoc(level="ERROR",message="Failure writing PacketOut " + "switch={switch} packet-in={packet-in} " + "packet-out={packet-out}",explanation="An I/O error occured while writing a packet " + "out message to the switch",recommendation=LogMessageDoc.CHECK_SWITCH) protected void doFlood(IOFSwitch sw,OFPacketIn pi,FloodlightContext cntx){  OFPort inPort=(pi.getVersion().compareTo(OFVersion.OF_12) < 0 ? pi.getInPort() : pi.getMatch().get(MatchField.IN_PORT));  if (topologyService.isIncomingBroadcastAllowed(sw.getId(),inPort) == false) {    if (log.isTraceEnabled()) {      log.trace("doFlood, drop broadcast packet, pi={}, " + "from a blocked port, srcSwitch=[{},{}], linkInfo={}",new Object[]{pi,sw.getId(),inPort});    }    return;  }  OFPacketOut.Builder pob=sw.getOFFactory().buildPacketOut();  List<OFAction> actions=new ArrayList<OFAction>();  if (sw.hasAttribute(IOFSwitch.PROP_SUPPORTS_OFPP_FLOOD)) {    actions.add(sw.getOFFactory().actions().output(OFPort.FLOOD,Integer.MAX_VALUE));  } else {    actions.add(sw.getOFFactory().actions().output(OFPort.ALL,Integer.MAX_VALUE));  }  pob.setActions(actions);  pob.setBufferId(OFBufferId.NO_BUFFER);  pob.setInPort(inPort);  pob.setData(pi.getData());  try {    if (log.isTraceEnabled()) {      log.trace("Writing flood PacketOut switch={} packet-in={} packet-out={}",new Object[]{sw,pi,pob.build()});    }    messageDamper.write(sw,pob.build());  } catch (  IOException e) {    log.error("Failure writing PacketOut switch={} packet-in={} packet-out={}",new Object[]{sw,pi,pob.build()},e);  }  return;}  }
class C{  public boolean isFinal(){  if (_final == null) {    return false;  } else {    return _final;  }}  }
class C{  public static Boolean readSharedPreference(Context context,String key,Boolean default_value){  try {    SharedPreferences settings=getSharedPreferenceManager(context);    return settings.getBoolean(key,default_value);  } catch (  Exception e) {    return default_value;  }}  }
class C{  public static ByteBuffer exportImage(final BufferedImage image,final String targetExt){  final ByteBuffer baos=new ByteBuffer();  ImageIO.setUseCache(false);  try {    ImageIO.write(image,targetExt,baos);    return baos;  } catch (  final IOException e) {    ConcurrentLog.logException(e);    return null;  }}  }
class C{  private void updateCallStackForCallNode(Stack<MethodCall> callStack,CCFGMethodCallNode callNode){  MethodCall call=MethodCall.constructForCallNode(callNode);  updateCallStackForCall(callStack,call);}  }
class C{  @RequestMapping(value=BUSINESS_OBJECT_DATA_ATTRIBUTES_URI_PREFIX + "/namespaces/{namespace}" + "/businessObjectDefinitionNames/{businessObjectDefinitionName}"+ "/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}"+ "/businessObjectFormatVersions/{businessObjectFormatVersion}/partitionValues/{partitionValue}/subPartition1Values/{subPartition1Value}"+ "/subPartition2Values/{subPartition2Value}/subPartition3Values/{subPartition3Value}/subPartition4Values/{subPartition4Value}"+ "/businessObjectDataVersions/{businessObjectDataVersion}/businessObjectDataAttributeNames/{businessObjectDataAttributeName}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_ATTRIBUTES_DELETE) public BusinessObjectDataAttribute deleteBusinessObjectDataAttribute(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectFormatUsage") String businessObjectFormatUsage,@PathVariable("businessObjectFormatFileType") String businessObjectFormatFileType,@PathVariable("businessObjectFormatVersion") Integer businessObjectFormatVersion,@PathVariable("partitionValue") String partitionValue,@PathVariable("subPartition1Value") String subPartition1Value,@PathVariable("subPartition2Value") String subPartition2Value,@PathVariable("subPartition3Value") String subPartition3Value,@PathVariable("subPartition4Value") String subPartition4Value,@PathVariable("businessObjectDataVersion") Integer businessObjectDataVersion,@PathVariable("businessObjectDataAttributeName") String businessObjectDataAttributeName){  return businessObjectDataAttributeService.deleteBusinessObjectDataAttribute(new BusinessObjectDataAttributeKey(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,partitionValue,Arrays.asList(subPartition1Value,subPartition2Value,subPartition3Value,subPartition4Value),businessObjectDataVersion,businessObjectDataAttributeName));}  }
class C{  public HyphenatedWordsFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public void init(){  try {    String current_dir=ScopeApplicationAdapter.webAppPath + File.separatorChar;    File fInit=new File(current_dir + "WEB-INF" + File.separatorChar+ "velocity.properties");    if (fInit.exists()) {      Velocity.init(current_dir + "WEB-INF" + File.separatorChar+ "velocity.properties");    } else {      Velocity.init("WeBContent" + File.separatorChar + "WEB-INF"+ File.separatorChar+ "velocity.properties");    }  } catch (  Exception e) {    log.error("Problem initializing Velocity : ",e);    System.out.println("Problem initializing Velocity : " + e);  }}  }
class C{  public static void main(String[] args){  parseCmdLine(args);  int size=1 << levels;  int msize=1 << (levels - 1);  QuadTreeNode.gcmp=size * 1024;  QuadTreeNode.lcmp=msize * 1024;  long start0=System.currentTimeMillis();  QuadTreeNode tree=QuadTreeNode.createTree(msize,0,0,null,Quadrant.cSouthEast,levels);  long end0=System.currentTimeMillis();  long start1=System.currentTimeMillis();  int leaves=tree.countTree();  long end1=System.currentTimeMillis();  long start2=System.currentTimeMillis();  int perm=tree.perimeter(size);  long end2=System.currentTimeMillis();  if (printResult) {    System.out.println("Perimeter is " + perm);    System.out.println("Number of leaves " + leaves);  }  if (printMsgs) {    System.out.println("QuadTree alloc time " + (end0 - start0) / 1000.0);    System.out.println("Count leaves time " + (end1 - start1) / 1000.0);    System.out.println("Perimeter compute time " + (end2 - start2) / 1000.0);  }}  }
class C{  public boolean isAnnotationPresent(Class<? extends Annotation> annotationType){  return getAnnotation(annotationType) != null;}  }
class C{  @Field(0) public int image_type(){  return this.io.getIntField(this,0);}  }
class C{  public Object GetInstance(){  if (OptionInstance) {    return PlugInObject;  }  return null;}  }
class C{  public void dispatchToEvents(int nodeHandle,org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException {}  }
class C{  public int findFirstVisibleItemPosition(){  final View child=findOneVisibleChild(0,layoutManager.getChildCount(),false,true);  return child == null ? RecyclerView.NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  public Optional<Vector3D> rayTrace(Cuboid cuboid,double minDist,double maxDist){  Vector3D bbox;  double tMin;  double tMax;  bbox=ray.signDirX ? cuboid.max : cuboid.min;  tMin=(bbox.getX() - ray.origin.getX()) * ray.invDir.getX();  bbox=ray.signDirX ? cuboid.min : cuboid.max;  tMax=(bbox.getX() - ray.origin.getX()) * ray.invDir.getX();  bbox=ray.signDirY ? cuboid.max : cuboid.min;  double tyMin=(bbox.getY() - ray.origin.getY()) * ray.invDir.getY();  bbox=ray.signDirY ? cuboid.min : cuboid.max;  double tyMax=(bbox.getY() - ray.origin.getY()) * ray.invDir.getY();  if ((tMin > tyMax) || (tyMin > tMax)) {    return Optional.empty();  }  if (tyMin > tMin) {    tMin=tyMin;  }  if (tyMax < tMax) {    tMax=tyMax;  }  bbox=ray.signDirZ ? cuboid.max : cuboid.min;  double tzMin=(bbox.getZ() - ray.origin.getZ()) * ray.invDir.getZ();  bbox=ray.signDirZ ? cuboid.min : cuboid.max;  double tzMax=(bbox.getZ() - ray.origin.getZ()) * ray.invDir.getZ();  if ((tMin > tzMax) || (tzMin > tMax)) {    return Optional.empty();  }  if (tzMin > tMin) {    tMin=tzMin;  }  if (tzMax < tMax) {    tMax=tzMax;  }  if ((tMin < maxDist) && (tMax > minDist)) {    return Optional.of(ray.origin.add(ray.dir.scalarMultiply(tMin)));  }  return Optional.empty();}  }
class C{  private int countNonNewline(String str,int off,int len){  for (int cnt=0; cnt < len; cnt++) {    final int pos=off + cnt;    if (str.charAt(pos) == UNIX_NEWLINE) {      return cnt;    }    if (str.charAt(pos) == CARRIAGE_RETURN) {      return cnt;    }  }  return len;}  }
class C{  @Override public boolean containsKey(Object key){  return _map.containsKey(unwrapKey(key));}  }
class C{  public void savePreference(){  if (m_AD_User_ID > 0) {    Query query=new Query(Env.getCtx(),I_AD_Preference.Table_Name,"AD_User_ID = ? AND Attribute = ? AND AD_Window_ID Is NULL",null);    for (int i=0; i < PROPERTIES.length; i++) {      String attribute=PROPERTIES[i];      String value=props.getProperty(attribute);      MPreference preference=query.setParameters(new Object[]{m_AD_User_ID,attribute}).firstOnly();      if (preference == null) {        preference=new MUserPreference(Env.getCtx(),0,null);        preference.setAD_User_ID(m_AD_User_ID);        preference.setAttribute(attribute);      } else {        if (preference.getAD_Client_ID() > 0 || preference.getAD_Org_ID() > 0) {          preference=new MUserPreference(Env.getCtx(),preference.getAD_Preference_ID(),null);        }      }      preference.setValue(value);      preference.saveEx();    }  }}  }
class C{  public static Number bitwiseNegate(Number left){  return NumberMath.bitwiseNegate(left);}  }
class C{  public final void mulTransposeLeft(Matrix4f m1,Matrix4f m2){  if (this != m1 && this != m2) {    this.m00=m1.m00 * m2.m00 + m1.m10 * m2.m10 + m1.m20 * m2.m20 + m1.m30 * m2.m30;    this.m01=m1.m00 * m2.m01 + m1.m10 * m2.m11 + m1.m20 * m2.m21 + m1.m30 * m2.m31;    this.m02=m1.m00 * m2.m02 + m1.m10 * m2.m12 + m1.m20 * m2.m22 + m1.m30 * m2.m32;    this.m03=m1.m00 * m2.m03 + m1.m10 * m2.m13 + m1.m20 * m2.m23 + m1.m30 * m2.m33;    this.m10=m1.m01 * m2.m00 + m1.m11 * m2.m10 + m1.m21 * m2.m20 + m1.m31 * m2.m30;    this.m11=m1.m01 * m2.m01 + m1.m11 * m2.m11 + m1.m21 * m2.m21 + m1.m31 * m2.m31;    this.m12=m1.m01 * m2.m02 + m1.m11 * m2.m12 + m1.m21 * m2.m22 + m1.m31 * m2.m32;    this.m13=m1.m01 * m2.m03 + m1.m11 * m2.m13 + m1.m21 * m2.m23 + m1.m31 * m2.m33;    this.m20=m1.m02 * m2.m00 + m1.m12 * m2.m10 + m1.m22 * m2.m20 + m1.m32 * m2.m30;    this.m21=m1.m02 * m2.m01 + m1.m12 * m2.m11 + m1.m22 * m2.m21 + m1.m32 * m2.m31;    this.m22=m1.m02 * m2.m02 + m1.m12 * m2.m12 + m1.m22 * m2.m22 + m1.m32 * m2.m32;    this.m23=m1.m02 * m2.m03 + m1.m12 * m2.m13 + m1.m22 * m2.m23 + m1.m32 * m2.m33;    this.m30=m1.m03 * m2.m00 + m1.m13 * m2.m10 + m1.m23 * m2.m20 + m1.m33 * m2.m30;    this.m31=m1.m03 * m2.m01 + m1.m13 * m2.m11 + m1.m23 * m2.m21 + m1.m33 * m2.m31;    this.m32=m1.m03 * m2.m02 + m1.m13 * m2.m12 + m1.m23 * m2.m22 + m1.m33 * m2.m32;    this.m33=m1.m03 * m2.m03 + m1.m13 * m2.m13 + m1.m23 * m2.m23 + m1.m33 * m2.m33;  } else {    float m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33;    m00=m1.m00 * m2.m00 + m1.m10 * m2.m10 + m1.m20 * m2.m20 + m1.m30 * m2.m30;    m01=m1.m00 * m2.m01 + m1.m10 * m2.m11 + m1.m20 * m2.m21 + m1.m30 * m2.m31;    m02=m1.m00 * m2.m02 + m1.m10 * m2.m12 + m1.m20 * m2.m22 + m1.m30 * m2.m32;    m03=m1.m00 * m2.m03 + m1.m10 * m2.m13 + m1.m20 * m2.m23 + m1.m30 * m2.m33;    m10=m1.m01 * m2.m00 + m1.m11 * m2.m10 + m1.m21 * m2.m20 + m1.m31 * m2.m30;    m11=m1.m01 * m2.m01 + m1.m11 * m2.m11 + m1.m21 * m2.m21 + m1.m31 * m2.m31;    m12=m1.m01 * m2.m02 + m1.m11 * m2.m12 + m1.m21 * m2.m22 + m1.m31 * m2.m32;    m13=m1.m01 * m2.m03 + m1.m11 * m2.m13 + m1.m21 * m2.m23 + m1.m31 * m2.m33;    m20=m1.m02 * m2.m00 + m1.m12 * m2.m10 + m1.m22 * m2.m20 + m1.m32 * m2.m30;    m21=m1.m02 * m2.m01 + m1.m12 * m2.m11 + m1.m22 * m2.m21 + m1.m32 * m2.m31;    m22=m1.m02 * m2.m02 + m1.m12 * m2.m12 + m1.m22 * m2.m22 + m1.m32 * m2.m32;    m23=m1.m02 * m2.m03 + m1.m12 * m2.m13 + m1.m22 * m2.m23 + m1.m32 * m2.m33;    m30=m1.m03 * m2.m00 + m1.m13 * m2.m10 + m1.m23 * m2.m20 + m1.m33 * m2.m30;    m31=m1.m03 * m2.m01 + m1.m13 * m2.m11 + m1.m23 * m2.m21 + m1.m33 * m2.m31;    m32=m1.m03 * m2.m02 + m1.m13 * m2.m12 + m1.m23 * m2.m22 + m1.m33 * m2.m32;    m33=m1.m03 * m2.m03 + m1.m13 * m2.m13 + m1.m23 * m2.m23 + m1.m33 * m2.m33;    this.m00=m00;    this.m01=m01;    this.m02=m02;    this.m03=m03;    this.m10=m10;    this.m11=m11;    this.m12=m12;    this.m13=m13;    this.m20=m20;    this.m21=m21;    this.m22=m22;    this.m23=m23;    this.m30=m30;    this.m31=m31;    this.m32=m32;    this.m33=m33;  }}  }
class C{  public boolean hasContainedTerritory(final String territoryName){  return m_contains.containsKey(territoryName);}  }
class C{  public void showDialog(){  view.setEnabledImportButton(false);  view.showDialog();}  }
class C{  private Region remove(Region x){  this.deletedNode=NULL_NODE;  this.root=remove(x,this.root);  Region d=this.deletedElement;  this.deletedElement=null;  if (d == null) {    return null;  } else {    return new Region(d);  }}  }
class C{  public boolean visit(MethodDeclaration node){  return true;}  }
class C{  public JSONWriter object() throws JSONException {  if (this.mode == 'i') {    this.mode='o';  }  if (this.mode == 'o' || this.mode == 'a') {    this.append("{");    this.push(new JSONObject());    this.comma=false;    return this;  }  throw new JSONException("Misplaced object.");}  }
class C{  public Linear3SystemSolver(final int numVariables,final int numEquations){  this.numVertices=numVariables;  this.numEdges=numEquations;  peeled=new boolean[numEdges];  edge=new int[numVertices];  edge2Vertex=new int[3][numEdges];  stack=new int[numEdges];  d=new int[numVertices];  visitStack=new IntArrayList(INITIAL_QUEUE_SIZE);  neverUsed=true;}  }
class C{  public void initializeHeader(ObjectReference object){  byte oldValue=VM.objectModel.readAvailableByte(object);  byte newValue=(byte)((oldValue & GC_MARK_BIT_MASK) | markState);  if (HeaderByte.NEEDS_UNLOGGED_BIT)   newValue|=HeaderByte.UNLOGGED_BIT;  VM.objectModel.writeAvailableByte(object,newValue);}  }
class C{  public FastMultiByteArrayInputStream(final FastMultiByteArrayInputStream is){  this.array=is.array;  this.length=is.length;  this.current=array[0];}  }
class C{  public Object convert(Object valueToConvert) throws IllegalArgumentException {  if (valueToConvert instanceof java.sql.Time) {    return ((Time)valueToConvert).toString();  }  throw new IllegalArgumentException("The source object must be of type: " + getSourceType().getName());}  }
class C{  void mul(int y,MutableBigInteger z){  if (y == 1) {    z.copyValue(this);    return;  }  if (y == 0) {    z.clear();    return;  }  long ylong=y & LONG_MASK;  int[] zval=(z.value.length < intLen + 1 ? new int[intLen + 1] : z.value);  long carry=0;  for (int i=intLen - 1; i >= 0; i--) {    long product=ylong * (value[i + offset] & LONG_MASK) + carry;    zval[i + 1]=(int)product;    carry=product >>> 32;  }  if (carry == 0) {    z.offset=1;    z.intLen=intLen;  } else {    z.offset=0;    z.intLen=intLen + 1;    zval[0]=(int)carry;  }  z.value=zval;}  }
class C{  public Element removeElement(ElementKey<?,?> childKey){  return removeElement(childKey.getId());}  }
class C{  @Override public boolean validSubTokenKey(String subtok){  return super.validToken(subtok) && filterBy.containsKey(subtok);}  }
class C{  private void handleResponse(int response,ResponseData rawData){  mPolicy.processServerResponse(response,rawData);  if (mPolicy.allowAccess()) {    mCallback.allow(response);  } else {    mCallback.dontAllow(response);  }}  }
class C{  protected void cancelRepaints(){  Display.impl.cancelRepaint(this);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.774 -0400",hash_original_method="EA1F98341C1FEBB76DE541E0DAA4DDD0",hash_generated_method="2908ECB022F338E34CD3F0E8541D8B63") @Override public void close() throws IOException {  try {    out.close();  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  private void validateBusinessObjectDataNotificationRegistrationUpdateRequest(BusinessObjectDataNotificationRegistrationUpdateRequest request){  Assert.notNull(request,"A business object data notification update request must be specified.");  Assert.hasText(request.getBusinessObjectDataEventType(),"A business object data event type must be specified.");  request.setBusinessObjectDataEventType(request.getBusinessObjectDataEventType().trim());  Assert.hasText(request.getNotificationRegistrationStatus(),"A notification registration status must be specified.");  request.setNotificationRegistrationStatus(request.getNotificationRegistrationStatus().trim());  validateBusinessObjectDataNotificationFilter(request.getBusinessObjectDataNotificationFilter(),request.getBusinessObjectDataEventType());  validateNotificationActions(request.getJobActions());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:19.741 -0500",hash_original_method="942D4E1EA5C6469103A344EA38AACE8F",hash_generated_method="052441FC657C7AFDE50D7B0A486E54D0") public boolean queryAfterZeroResults(){  return mQueryAfterZeroResults;}  }
class C{  public static boolean isMultOperator(String opr){  boolean is=false;  if (opr.equals(FolderSearchOpr.IN_AND) || opr.equals(FolderSearchOpr.IN_OR) || opr.equals(FolderSearchOpr.LIKE_AND)|| opr.equals(FolderSearchOpr.LIKE_OR))   is=true;  return is;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","ycit");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final PullToRefreshBase.Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(PullToRefreshBase.State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(PullToRefreshBase.State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(PullToRefreshBase.State.RESET);}} else if (isTouchEvent && PullToRefreshBase.State.OVERSCROLLING == view.getState()) {view.setState(PullToRefreshBase.State.RESET);}}}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  DShowTVPlayer.setAudioDecoderFilter(getString(stack));  return null;}  }
class C{  public void animateUnlayout(final int duration,int opacity,Runnable callback){  animateUnlayout(duration,false,opacity,callback);}  }
class C{  @Override public boolean test(final Object receiver,final String property,final Object[] args,final Object expectedValue){  if (!PROPERTY_IS_SUPPORTING_RUNNER.equals(property)) {    LOGGER.debug("invoked wrong property to test : " + property);    return false;  }  final Optional<IFile> file=getFileFromInput(receiver);  if (!file.isPresent()) {    return false;  }  if (!generatedFileLocator.tryGetGeneratedSourceForN4jsFile(file.get()).isPresent()) {    return false;  }  final Object arg0=args[0];  if (!(arg0 instanceof String)) {    LOGGER.debug("invalid runner key value, should be String");    return false;  }  final String runnerId=arg0.toString();  final IRunnerDescriptor runnerDesc;  try {    runnerDesc=runnerRegistry.getDescriptor(runnerId);  } catch (  Exception e) {    LOGGER.debug("invalid runner key value, no runner found for id: " + runnerId);    return false;  }  final List<RuntimeEnvironment> compatibleRuntimeEnvironmets=newArrayList();  try {    compatibleRuntimeEnvironmets.addAll(findCompatibleRuntimeEnvironments(file.get()));  } catch (  final DependencyCycleDetectedException|InsolvableRuntimeEnvironmentException e) {    LOGGER.info(e.getMessage());    return false;  }  if ("eu.numberfour.n4js.runner.nodejs.NODEJS".equals(runnerDesc.getId())) {    final boolean haveCustomNodeRuntimeEnvironment=hRuntimeEnvironments.findRuntimeEnvironmentProject(RuntimeEnvironment.NODEJS).isPresent();    if (!haveCustomNodeRuntimeEnvironment)     return true;  }  if (!compatibleRuntimeEnvironmets.isEmpty() && "RE_NodeJS_Mangelhaft".equals(compatibleRuntimeEnvironmets.get(0).getProjectId())) {    return true;  }  final boolean runnerToTestIsCompatible=compatibleRuntimeEnvironmets.contains(runnerDesc.getEnvironment());  if (!runnerToTestIsCompatible) {    LOGGER.debug("Runner with id '" + runnerId + "' does not support running selected file.");    return false;  }  return true;}  }
class C{  public void add(OnClickWrapper onClickWrapper){  onClickWrapperList.add(onClickWrapper);}  }
class C{  public Cursor toCursor() throws IOException {  CursorImpl cursor=null;  if (_index == null) {    cursor=CursorImpl.createCursor(_table);  } else {    cursor=IndexCursorImpl.createCursor(_table,_index,_startRow,_startRowInclusive,_endRow,_endRowInclusive);  }  cursor.setColumnMatcher(_columnMatcher);  if (_savepoint == null) {    if (!_beforeFirst) {      cursor.afterLast();    }  } else {    cursor.restoreSavepoint(_savepoint);  }  return cursor;}  }
class C{  public Sentence parseAsMatchingSource(){  return parse(new ConvCtxForMatchingSource());}  }
class C{  private void updateColorOfPoint(DataPointColored point){  if (coloringMethod == ColoringMethod.None) {    if (point == projector.getCurrentPoint() && hotPointMode == true) {      point.setColor(hotColor);    } else {      point.setColor(baseColor);    }  } else   if (coloringMethod == ColoringMethod.DecayTrail) {    if (point == projector.getCurrentPoint()) {      if (point == projector.getCurrentPoint() && hotPointMode == true) {        point.setColor(hotColor);      } else {        point.setColor(baseColor);      }      point.spikeActivation(ceiling);    } else {      point.decrementActivation(floor,decrementAmount);      point.setColorBasedOnVal(Utils.colorToFloat(baseColor));    }  } else   if (coloringMethod == ColoringMethod.Frequency) {    if (point == projector.getCurrentPoint()) {      if (point == projector.getCurrentPoint() && hotPointMode == true) {        point.setColor(hotColor);      } else {        point.setColor(baseColor);      }      point.incrementActivation(ceiling,incrementAmount);    } else {      point.setColorBasedOnVal(Utils.colorToFloat(baseColor));    }  }}  }
class C{  public static ServerLocator createServerLocator(final boolean ha,TransportConfiguration... transportConfigurations){  return new ServerLocatorImpl(ha,transportConfigurations);}  }
class C{  private int readShort(InputStream is) throws IOException {  int c1=is.read();  int c2=is.read();  return ((c1 << 8) | c2);}  }
class C{  @Override public void clear(){  super.clear();  double[] set=_set;  byte[] states=_states;  for (int i=set.length; i-- > 0; ) {    set[i]=(double)0;    states[i]=FREE;  }}  }
class C{  public static String[] translatePathName(String path){  path=prettifyPath(path);  if (path.indexOf('/') != 0)   path='/' + path;  int index=path.lastIndexOf('/');  if (index == path.length() - 1)   path=path.substring(0,path.length() - 1);  index=path.lastIndexOf('/');  String name;  if (index == -1) {    name=path;    path="/";  } else {    name=path.substring(index + 1);    path=path.substring(0,index + 1);  }  return new String[]{path,name};}  }
class C{  public static boolean isInterface(int flags){  return (flags & AccInterface) != 0;}  }
class C{  private Producer<CloseableReference<CloseableImage>> newBitmapCacheGetToBitmapCacheSequence(Producer<CloseableReference<CloseableImage>> inputProducer){  BitmapMemoryCacheProducer bitmapMemoryCacheProducer=mProducerFactory.newBitmapMemoryCacheProducer(inputProducer);  BitmapMemoryCacheKeyMultiplexProducer bitmapKeyMultiplexProducer=mProducerFactory.newBitmapMemoryCacheKeyMultiplexProducer(bitmapMemoryCacheProducer);  ThreadHandoffProducer<CloseableReference<CloseableImage>> threadHandoffProducer=mProducerFactory.newBackgroundThreadHandoffProducer(bitmapKeyMultiplexProducer,mThreadHandoffProducerQueue);  return mProducerFactory.newBitmapMemoryCacheGetProducer(threadHandoffProducer);}  }
class C{  public ApiConfig(String apiKey,String accessToken,String referrer,LogLevel logLevel){  this(apiKey,accessToken,referrer);  mLogLevel=logLevel;}  }
class C{  public int prepareInt(){  return 0;}  }
class C{  public static RowLimitClause create(String numRowsVariable,String offsetVariable){  return new RowLimitClause(null,null,numRowsVariable,offsetVariable);}  }
class C{  @Override public final long put(final byte[] key,final long l) throws SpaceExceededException {  assert l >= 0 : "l = " + l;  assert (key != null);  final Row.Entry newentry=this.rowdef.newEntry();  newentry.setCol(0,key);  newentry.setCol(1,l);  final Row.Entry oldentry=this.index.replace(newentry);  if (oldentry == null)   return -1;  return oldentry.getColLong(1);}  }
class C{  public static GetAlarmsResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  GetAlarmsResponse object=new GetAlarmsResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"getAlarmsResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (GetAlarmsResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(StorageAlarm.Factory.parse(reader));      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(StorageAlarm.Factory.parse(reader));            }          } else {            loopDone1=true;          }        }      }      object.set_return((StorageAlarm[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(StorageAlarm.class,list1));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static void main(String[] args){  Debug.init();  String name=(args.length < 1) ? "com.bbn.openmap.layer.shape.ShapeLayer" : args[0];  PropertyConsumer propertyconsumer=null;  try {    Class<?> c=Class.forName(name);    propertyconsumer=(PropertyConsumer)c.newInstance();  } catch (  Exception e) {    e.printStackTrace();    System.exit(1);  }  if (propertyconsumer != null) {    Properties props=new Properties(), info=new Properties();    System.out.println("Inspecting " + name);    String pp=name.substring(name.lastIndexOf(".") + 1);    propertyconsumer.setPropertyPrefix(pp.toLowerCase());    props=propertyconsumer.getProperties(props);    info=propertyconsumer.getPropertyInfo(info);    Inspector inspector=new Inspector();    inspector.setPrint(true);    inspector.addActionListener(inspector);    inspector.inspectPropertyConsumer(propertyconsumer);  }}  }
class C{  public String defaultPackageName(){  final Supplier<String> defaultProjectPackage=null;  if (document() instanceof Project) {    return defaultProjectPackage.get();  } else {    return projectOrThrow().getPackageName().orElseGet(defaultProjectPackage) + "." + DocumentUtil.relativeName(document(),Dbms.class,JAVA_NAME,null);  }}  }
class C{  public boolean hasLongColumnInfo(){  return this.hasLongColumnInfo;}  }
class C{  public void removeDataChangedListener(DataChangedListener d){  listeners.removeListener(d);}  }
class C{  public void createAllProxies(DistributedMember member,Region<String,Object> monitoringRegion){  if (logger.isDebugEnabled()) {    logger.debug("Creating proxy for: {}",member.getId());  }  if (remoteFilterChain.isServerGroupFiltered("")) {    if (logger.isTraceEnabled()) {      logger.trace("Returning from server group filter");    }    return;  }  if (remoteFilterChain.isManagedNodeFiltered(member)) {    if (logger.isTraceEnabled()) {      logger.trace("returning from managed node filter");    }    return;  }  Set<String> mbeanNames=monitoringRegion.keySet();  Iterator<String> it=mbeanNames.iterator();  while (it.hasNext()) {    ObjectName objectName=null;    if (remoteFilterChain.isRemoteMBeanFiltered(objectName)) {      if (logger.isTraceEnabled()) {        logger.trace("continue  from remote MBEan node filter");      }      continue;    }    try {      objectName=ObjectName.getInstance(it.next());      if (logger.isDebugEnabled()) {        logger.debug("Creating proxy for ObjectName: " + objectName.toString());      }      createProxy(member,objectName,monitoringRegion,monitoringRegion.get(objectName.toString()));    } catch (    ManagementException e) {      logger.warn("Create Proxy failed for {} with exception {}",objectName,e.getMessage(),e);      continue;    }catch (    Exception e) {      logger.warn("Create Proxy failed for {} with exception {}",objectName,e.getMessage(),e);      continue;    }  }}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public void clear(){  pending.clear();  mTileCache.clear();  mCtx.unbindService(this);}  }
class C{  public double nextDouble(double alpha,double beta){  double a=alpha;  double b=beta;  if ((a_setup != a) || (b_setup != b)) {    double mpa, mmb, mode;    double amb;    double a_, b_, a_1, b_1, pl;    double help_1, help_2;    amb=a * a - b * b;    samb=Math.sqrt(amb);    mode=b / samb;    help_1=a * Math.sqrt(2.0 * samb + 1.0);    help_2=b * (samb + 1.0);    mpa=(help_2 + help_1) / amb;    mmb=(help_2 - help_1) / amb;    a_=mpa - mode;    b_=-mmb + mode;    hr=-1.0 / (-a * mpa / Math.sqrt(1.0 + mpa * mpa) + b);    hl=1.0 / (-a * mmb / Math.sqrt(1.0 + mmb * mmb) + b);    a_1=a_ - hr;    b_1=b_ - hl;    mmb_1=mode - b_1;    mpa_1=mode + a_1;    s=(a_ + b_);    pm=(a_1 + b_1) / s;    pr=hr / s;    pmr=pm + pr;    a_setup=a;    b_setup=b;  }  for (; ; ) {    u=randomGenerator.nextDouble();    v=randomGenerator.nextDouble();    if (u <= pm) {      x=mmb_1 + u * s;      if (Math.log(v) <= (-a * Math.sqrt(1.0 + x * x) + b * x + samb))       break;    } else {      if (u <= pmr) {        e=-Math.log((u - pm) / pr);        x=mpa_1 + hr * e;        if ((Math.log(v) - e) <= (-a * Math.sqrt(1.0 + x * x) + b * x + samb))         break;      } else {        e=Math.log((u - pmr) / (1.0 - pmr));        x=mmb_1 + hl * e;        if ((Math.log(v) + e) <= (-a * Math.sqrt(1.0 + x * x) + b * x + samb))         break;      }    }  }  return (x);}  }
class C{  @Override public void passScoreAfterParsing(Text url,Content content,Parse parse) throws ScoringFilterException {  LOG.info("------>WE ARE PUSHING FEEDBACK------:");  boolean containsSem=false;  boolean semFather=false;  try {    containsSem=Boolean.parseBoolean(parse.getData().getMeta(WdcParser.META_CONTAINS_SEM));    LOG.info("------>GOT THE contains sem------:" + containsSem);    semFather=Boolean.parseBoolean(parse.getData().getMeta(WdcParser.META_CONTAINS_SEM_FATHER));  } catch (  Exception e) {    LOG.info("ERROR GETTING THE META DATA" + e.getMessage());  }  try {    AnthURL anthUrl=new AnthURL(hash(url.toString()),new URI(url.toString()),semFather,!semFather,false,false,containsSem);    onlineClassifier.pushFeedback(anthUrl);  } catch (  Exception uriE) {    LOG.info("COULD NOT create proper URI from" + uriE.getMessage());    System.out.println("Could not create proper URI from: " + url + ". Skipping.");  }  parse.getData().getContentMeta().set(WdcParser.META_CONTAINS_SEM_FATHER_FOR_SUB,Boolean.toString(containsSem));}  }
class C{  public WriteFileRecordRequest(){  super();  setFunctionCode(Modbus.WRITE_FILE_RECORD);  setDataLength(1);}  }
class C{  public <T extends Comparable<T>>void findSimilarUsersFromTerms(String[] terms,LuceneUtils lUtils,int numResults,ArrayList<SemVectorResult<T>> docResult,QueryTransform<T> docTransform){  List<SearchResult> results;  try {    VectorSearcher vecSearcher=new VectorSearcher.VectorSearcherCosine(termVecReader,docVecReader,luceneUtils,flagConfig,terms);    results=vecSearcher.getNearestNeighbors(numResults);  } catch (  pitt.search.semanticvectors.vectors.ZeroVectorException e) {    results=new LinkedList<>();  }  for (  SearchResult r : results) {    String filename=r.getObjectVector().getObject().toString();    docResult.add(new SemVectorResult<>(docTransform.fromSV(filename),r.getScore()));  }}  }
class C{  public KMLLatLonBox(String namespaceURI){  super(namespaceURI);}  }
class C{  protected Expression parseTypeExpression() throws SyntaxError, IOException {switch (token) {case VOID:    return new TypeExpression(scan(),Type.tVoid);case BOOLEAN:  return new TypeExpression(scan(),Type.tBoolean);case BYTE:return new TypeExpression(scan(),Type.tByte);case CHAR:return new TypeExpression(scan(),Type.tChar);case SHORT:return new TypeExpression(scan(),Type.tShort);case INT:return new TypeExpression(scan(),Type.tInt);case LONG:return new TypeExpression(scan(),Type.tLong);case FLOAT:return new TypeExpression(scan(),Type.tFloat);case DOUBLE:return new TypeExpression(scan(),Type.tDouble);case IDENT:Expression e=new IdentifierExpression(pos,scanner.idValue);scan();while (token == FIELD) {e=new FieldExpression(scan(),e,scanner.idValue);expect(IDENT);}return e;}env.error(pos,"type.expected");throw new SyntaxError();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:07.524 -0500",hash_original_method="3F005229FAC5669CED0C1EDA320C3ED4",hash_generated_method="58DD3E2A538F54ACD2033ECAA73C07AE") public AllocationBuilder addIndexSetType(Primitive p){  Entry indexType=new Entry();  indexType.a=null;  indexType.prim=p;  mIndexTypes.addElement(indexType);  return this;}  }
class C{  public int increment(int offset){  CharSequence txt=getText();  int i;  if (txt != null) {    try {      i=Integer.parseInt(txt.toString());    } catch (    NumberFormatException e) {      i=0;    }  } else {    i=0;  }  i=i + offset;  setText(String.valueOf(i));  return i;}  }
class C{  public static double cdf(double x,double mu,double sigma,double skew){  x=(x - mu) / sigma;  if (Math.abs(skew) > 0.) {    double tmp=1 - skew * x;    if (tmp < 1e-15) {      return (skew < 0.) ? 0. : 1.;    }    x=-Math.log(tmp) / skew;  }  return .5 + .5 * NormalDistribution.erf(x * MathUtil.SQRTHALF);}  }
class C{  public static void appendTemplateCallLabel(StringBuffer buffer,String labelTemplate,Map<String,RDFNode> args){  for (int i=0; i < labelTemplate.length(); i++) {    if (i < labelTemplate.length() - 3 && labelTemplate.charAt(i) == '{' && labelTemplate.charAt(i + 1) == '?') {      int varEnd=i + 2;      while (varEnd < labelTemplate.length()) {        if (labelTemplate.charAt(varEnd) == '}') {          String varName=labelTemplate.substring(i + 2,varEnd);          RDFNode varValue=args.get(varName);          if (varValue instanceof Resource) {            buffer.append(get().getLabel((Resource)varValue));          } else           if (varValue instanceof Literal) {            buffer.append(varValue.asNode().getLiteralLexicalForm());          }          break;        } else {          varEnd++;        }      }      i=varEnd;    } else {      buffer.append(labelTemplate.charAt(i));    }  }}  }
class C{  private static String[] delimitedListToStringArray(final String str,final String delimiter){  return delimitedListToStringArray(str,delimiter,null);}  }
class C{  public EC2Processor(PropertyHandler paramHandler,String instanceId){  this.ph=paramHandler;  this.instanceId=instanceId;  try {    this.platformService=APPlatformServiceFactory.getInstance();  } catch (  IllegalStateException e) {    LOGGER.error(e.getMessage());    throw e;  }}  }
class C{  AttributeListAdapter(){}  }
class C{  private void badIndex(int index) throws ArrayIndexOutOfBoundsException {  String msg="Attempt to modify attribute at illegal index: " + index;  throw new ArrayIndexOutOfBoundsException(msg);}  }
class C{  public final void sendTo(DataOutput out) throws IOException {  finishWriting();  if (this.chunks != null) {    for (    ByteBuffer bb : this.chunks) {      int bytesToWrite=bb.remaining();      if (bytesToWrite > 0) {        if (bb.hasArray()) {          out.write(bb.array(),bb.arrayOffset() + bb.position(),bytesToWrite);          bb.position(bb.limit());        } else {          byte[] bytes=new byte[bytesToWrite];          bb.get(bytes);          out.write(bytes);        }        this.size-=bytesToWrite;      }    }  }{    ByteBuffer bb=this.buffer;    int bytesToWrite=bb.remaining();    if (bytesToWrite > 0) {      if (bb.hasArray()) {        out.write(bb.array(),bb.arrayOffset() + bb.position(),bytesToWrite);        bb.position(bb.limit());      } else {        byte[] bytes=new byte[bytesToWrite];        bb.get(bytes);        out.write(bytes);      }      this.size-=bytesToWrite;    }  }}  }
class C{  public static void i(String tag,String msg,Throwable tr){  println(INFO,tag,msg,tr);}  }
class C{  public void printPool(){  for (  Entry<VariableReference,Object> entry : pool.entrySet()) {    System.out.println("Pool: " + entry.getKey().getName() + ", "+ entry.getKey().getType()+ " : "+ entry.getValue());  }}  }
class C{  public DeclaredVersion createDeclaredVersion(){  DeclaredVersionImpl declaredVersion=new DeclaredVersionImpl();  return declaredVersion;}  }
class C{  @Override public final void flushObjectValues(final boolean reinit){  parser.flushObjectValues(reinit);}  }
class C{  public void updateInventory(UpdateInventoryInput input) throws Exception {  int sleep=ran.nextInt(1000);  Thread.sleep(sleep);  System.out.println("Inventory " + input.getPartId() + " updated");}  }
class C{  @DataProvider(name="builder") public Object[][] providesBuilder(){  return new Object[][]{{new Builder<Object,Object>().maximumWeightedCapacity(capacity())}};}  }
class C{  public ActionErrors validateFile(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if ((fichero == null) || StringUtils.isBlank(fichero.getFileName())) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(TransferenciasConstants.LABEL_TRANSFERENCIAS_IMPORT_FILE,request.getLocale())));  }  return errors;}  }
class C{  public void newRepeat(){  mFormEntryController.newRepeat();}  }
class C{  @Override synchronized public void shutdown(){  if (!isOpen())   return;  final QueryEngine queryEngine=this.queryEngine.get();  if (queryEngine != null) {    queryEngine.shutdown();  }  if (concurrencyManager != null) {    concurrencyManager.shutdown();  }  if (localTransactionManager != null) {    localTransactionManager.shutdown();  }  if (resourceManager != null) {    resourceManager.shutdown();  }  super.shutdown();}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.PROPERTY_NAME_VALUE_PAIR_SINGLE_NAME;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public ArrayList<ArrayList<Region>> defineRegions(ArrayList<ChartSet> data){  final int nSets=data.size();  final int nEntries=data.get(0).size();  ArrayList<ArrayList<Region>> result=new ArrayList<>(nSets);  for (int i=0; i < nSets; i++)   result.add(new ArrayList<Region>(nEntries));  float offset;  BarSet barSet;  Bar bar;  for (int i=0; i < nEntries; i++) {    offset=data.get(0).getEntry(i).getX() - drawingOffset;    for (int j=0; j < nSets; j++) {      barSet=(BarSet)data.get(j);      bar=(Bar)barSet.getEntry(i);      if (bar.getValue() > 0)       result.get(j).add(new Region((int)offset,(int)bar.getY(),(int)(offset+=barWidth),(int)this.getZeroPosition())); else       result.get(j).add(new Region((int)offset,(int)this.getZeroPosition(),(int)(offset+=barWidth),(int)bar.getY()));      if (j != nSets - 1)       offset+=style.setSpacing;    }  }  return result;}  }
class C{  public boolean process(ContentEvent event){  Preconditions.checkState(ensembleSize == ensembleStreams.length,String.format("Ensemble size ({}) and number of enseble streams ({}) do not match.",ensembleSize,ensembleStreams.length));  InstanceContentEvent inEvent=(InstanceContentEvent)event;  if (inEvent.getInstanceIndex() < 0) {    for (    Stream stream : ensembleStreams)     stream.put(event);    return false;  }  if (inEvent.isTesting()) {    Instance testInstance=inEvent.getInstance();    for (int i=0; i < ensembleSize; i++) {      Instance instanceCopy=testInstance.copy();      InstanceContentEvent instanceContentEvent=new InstanceContentEvent(inEvent.getInstanceIndex(),instanceCopy,false,true);      instanceContentEvent.setClassifierIndex(i);      instanceContentEvent.setEvaluationIndex(inEvent.getEvaluationIndex());      ensembleStreams[i].put(instanceContentEvent);    }  }  if (inEvent.isTraining()) {    train(inEvent);  }  return true;}  }
class C{  public void testStmtExecuteLargeBatch() throws Exception {  createTable("testExecuteLargeBatch","(id BIGINT AUTO_INCREMENT PRIMARY KEY, n INT)");  this.stmt.addBatch("INSERT INTO testExecuteLargeBatch (n) VALUES (1)");  this.stmt.addBatch("INSERT INTO testExecuteLargeBatch (n) VALUES (2)");  this.stmt.addBatch("INSERT INTO testExecuteLargeBatch (n) VALUES (3)");  this.stmt.addBatch("INSERT INTO testExecuteLargeBatch (n) VALUES (4)");  this.stmt.addBatch("INSERT INTO testExecuteLargeBatch (n) VALUES (5), (6), (7)");  this.stmt.addBatch("INSERT INTO testExecuteLargeBatch (n) VALUES (8)");  this.stmt.addBatch("INSERT INTO testExecuteLargeBatch (n) VALUES (9), (10)");  long[] counts=this.stmt.executeLargeBatch();  assertEquals(7,counts.length);  assertEquals(1,counts[0]);  assertEquals(1,counts[1]);  assertEquals(1,counts[2]);  assertEquals(1,counts[3]);  assertEquals(3,counts[4]);  assertEquals(1,counts[5]);  assertEquals(2,counts[6]);  this.rs=this.stmt.getGeneratedKeys();  ResultSetMetaData rsmd=this.rs.getMetaData();  assertEquals(1,rsmd.getColumnCount());  assertEquals(JDBCType.BIGINT.getVendorTypeNumber().intValue(),rsmd.getColumnType(1));  assertEquals(20,rsmd.getColumnDisplaySize(1));  long generatedKey=0;  while (this.rs.next()) {    assertEquals(++generatedKey,this.rs.getLong(1));  }  assertEquals(10,generatedKey);  this.rs.close();  createTable("testExecuteLargeBatch","(id BIGINT AUTO_INCREMENT PRIMARY KEY, n INT)");  this.stmt.addBatch("INSERT INTO testExecuteLargeBatch (n) VALUES (1)");  this.stmt.addBatch("INSERT INTO testExecuteLargeBatch (n) VALUES (2)");  this.stmt.addBatch("INSERT INTO testExecuteLargeBatch VALUES (3)");  this.stmt.addBatch("INSERT INTO testExecuteLargeBatch (n) VALUES (4)");  this.stmt.addBatch("INSERT INTO testExecuteLargeBatch (n) VALUES (5), (6), (7)");  this.stmt.addBatch("INSERT INTO testExecuteLargeBatch (n) VALUES ('eight')");  this.stmt.addBatch("INSERT INTO testExecuteLargeBatch (n) VALUES (9), (10)");  try {    this.stmt.executeLargeBatch();    fail("BatchUpdateException expected");  } catch (  BatchUpdateException e) {    assertEquals("Incorrect integer value: 'eight' for column 'n' at row 1",e.getMessage());    counts=e.getLargeUpdateCounts();    assertEquals(7,counts.length);    assertEquals(1,counts[0]);    assertEquals(1,counts[1]);    assertEquals(Statement.EXECUTE_FAILED,counts[2]);    assertEquals(1,counts[3]);    assertEquals(3,counts[4]);    assertEquals(Statement.EXECUTE_FAILED,counts[5]);    assertEquals(2,counts[6]);  }catch (  Exception e) {    fail("BatchUpdateException expected");  }  this.rs=this.stmt.getGeneratedKeys();  generatedKey=0;  while (this.rs.next()) {    assertEquals(++generatedKey,this.rs.getLong(1));  }  assertEquals(8,generatedKey);  this.rs.close();}  }
class C{  public ReadCoilsResponse(){  setFunctionCode(Modbus.READ_COILS);  setDataLength(1);  coils=null;}  }
class C{  public MessageVersion(String version){  this.version=version;  try {    getVersionParts();  } catch (  NumberFormatException e) {    throw new IllegalArgumentException(String.format("Invalid version string : %s.",version),e);  }}  }
class C{  public static String parseResponseString(Headers responseHeaders,byte[] responseBody){  if (responseBody == null || responseBody.length == 0)   return "";  return IOUtils.toString(responseBody,HeaderUtil.parseHeadValue(responseHeaders.getContentType(),Headers.HEAD_KEY_CONTENT_TYPE,""));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:59.807 -0500",hash_original_method="71E6FB134E3F8929FE201B0D15431D0F",hash_generated_method="3E798F46F6654ECB3DE3CF8AC41C1333") @Deprecated public static String lookupProviderNameFromId(int protocol){switch (protocol) {case PROTOCOL_GOOGLE_TALK:    return ProviderNames.GTALK;case PROTOCOL_AIM:  return ProviderNames.AIM;case PROTOCOL_MSN:return ProviderNames.MSN;case PROTOCOL_YAHOO:return ProviderNames.YAHOO;case PROTOCOL_ICQ:return ProviderNames.ICQ;case PROTOCOL_JABBER:return ProviderNames.JABBER;case PROTOCOL_SKYPE:return ProviderNames.SKYPE;case PROTOCOL_QQ:return ProviderNames.QQ;}return null;}  }
class C{  protected IWorkbook doLoadWorkbookFromURI(IProgressMonitor monitor,URI uri) throws InterruptedException, InvocationTargetException {  throw new UnsupportedOperationException();}  }
class C{  @Override public void run(){  amIActive=true;  String areaHeader=null;  String slopeHeader=null;  String outputHeader=null;  int i;  int progress;  int row, col;  double powerValue=0;  double z=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      areaHeader=args[i];    } else     if (i == 1) {      slopeHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    } else     if (i == 3) {      powerValue=Double.parseDouble(args[i]);    }  }  if ((areaHeader == null) || (slopeHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    if (powerValue < 0.1) {      powerValue=0.1;    }    if (powerValue > 20) {      powerValue=20;    }    WhiteboxRaster slopeImage=new WhiteboxRaster(slopeHeader,"r");    int rows=slopeImage.getNumberRows();    int cols=slopeImage.getNumberColumns();    double slopeNoData=slopeImage.getNoDataValue();    WhiteboxRaster areaImage=new WhiteboxRaster(areaHeader,"r");    if (areaImage.getNumberRows() != rows || areaImage.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    double areaNoData=areaImage.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",areaHeader,WhiteboxRaster.DataType.FLOAT,areaNoData);    output.setPreferredPalette("blueyellow.pal");    double[] area;    double[] slope;    for (row=0; row < rows; row++) {      area=areaImage.getRowValues(row);      slope=slopeImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (area[col] != areaNoData && slope[col] != slopeNoData) {          if (slope[col] != 0) {            z=(Math.pow(area[col],powerValue)) * (Math.tan(Math.toRadians(slope[col])));          } else {            z=0;          }          output.setValue(row,col,z);        } else {          output.setValue(row,col,areaNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    slopeImage.close();    areaImage.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void addAtom(Atom at){  formula.add(at);}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  super.onActivityResult(requestCode,resultCode,data);  if (BuildConfig.DEBUG)   Log.v("onActivityResult");  if (requestCode == VOICE_RECOGNITION_REQUEST_CODE && resultCode == RESULT_OK) {    ArrayList<String> matches=data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);    if (BuildConfig.DEBUG)     Log.v("Voice recog text: " + matches.get(0));    quickReply(matches.get(0));  }}  }
class C{  @Override public void execute(FunctionContext context){  String id=this.props.getProperty(ID);  String noAckTest=this.props.getProperty(NOACKTEST);  if (id.equals(TEST_FUNCTION1)) {    execute1(context);  } else   if (id.equals(TEST_FUNCTION2)) {    execute2(context);  } else   if (id.equals(TEST_FUNCTION3)) {    execute3(context);  } else   if ((id.equals(TEST_FUNCTION4)) || (id.equals(TEST_FUNCTION7))) {    execute4(context);  } else   if ((id.equals(TEST_FUNCTION5)) || (id.equals(TEST_FUNCTION6))) {    execute5(context);  } else   if (id.equals(TEST_FUNCTION8)) {    execute8(context);  } else   if (id.equals(TEST_FUNCTION9)) {    execute9(context);  } else   if (id.equals(TEST_FUNCTION_EXCEPTION)) {    executeException(context);  } else   if (id.equals(TEST_FUNCTION_REEXECUTE_EXCEPTION)) {    executeFunctionReexecuteException(context);  } else   if (id.equals(TEST_FUNCTION_RESULT_SENDER)) {    executeResultSender(context);  } else   if (id.equals(MEMBER_FUNCTION)) {    executeMemberFunction(context);  } else   if (id.equals(TEST_FUNCTION_TIMEOUT)) {    executeTimeOut(context);  } else   if (id.equals(TEST_FUNCTION_SOCKET_TIMEOUT)) {    executeSocketTimeOut(context);  } else   if (id.equals(TEST_FUNCTION_HA)) {    executeHA(context);  } else   if (id.equals(TEST_FUNCTION_NONHA)) {    executeHA(context);  } else   if (id.equals(TEST_FUNCTION_HA_SERVER) || id.equals(TEST_FUNCTION_NONHA_SERVER)) {    executeHAAndNonHAOnServer(context);  } else   if (id.equals(TEST_FUNCTION_NONHA_REGION) || id.equals(TEST_FUNCTION_HA_REGION)) {    executeHAAndNonHAOnRegion(context);  } else   if (id.equals(TEST_FUNCTION_ONSERVER_REEXECUTE_EXCEPTION)) {    executeFunctionReexecuteExceptionOnServer(context);  } else   if (id.equals(TEST_FUNCTION_NO_LASTRESULT)) {    executeWithNoLastResult(context);  } else   if (id.equals(TEST_FUNCTION_SEND_EXCEPTION)) {    executeWithSendException(context);  } else   if (id.equals(TEST_FUNCTION_THROW_EXCEPTION)) {    executeWithThrowException(context);  } else   if (id.equals(TEST_FUNCTION_LASTRESULT)) {    executeWithLastResult(context);  } else   if (id.equals(TEST_FUNCTION_RETURN_ARGS)) {    executeFunctionReturningArgs(context);  } else   if (id.equals(TEST_FUNCTION_RUNNING_FOR_LONG_TIME)) {    executeFunctionRunningForLongTime(context);  } else   if (id.equals(TEST_FUNCTION_BUCKET_FILTER)) {    executeFunctionBucketFilter(context);  } else   if (id.equals(TEST_FUNCTION_NONHA_NOP)) {    execute1(context);  } else   if (noAckTest.equals("true")) {    execute1(context);  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  protected static double calcSigmaFromMu(double mu){  double sigma=Math.sqrt(mu);  if (sigma < 0.5) {    sigma=0.5;  }  return sigma;}  }
class C{  public static String replaceDateValues(String aQuery,DateTime replaceWith){  Matcher matcher=DATE_REPLACE_PATTERN.matcher(aQuery);  while (matcher.find()) {    final String format=matcher.group(1);    DateTimeFormatter formatter=QueryReplaceUtil.makeDateTimeFormat(format);    if (matcher.groupCount() > 3 && matcher.group(3) != null && matcher.group(4) != null) {      int count=Integer.valueOf(matcher.group(3));      DateMod dm=DateMod.valueOf(matcher.group(4));      DateTime toMod=new DateTime(replaceWith);      if (dm.equals(DateMod.H)) {        toMod=toMod.minusHours(count);      } else       if (dm.equals(DateMod.D)) {        toMod=toMod.minusDays(count);      } else       if (dm.equals(DateMod.M)) {        toMod=toMod.minusMonths(count);      }      aQuery=aQuery.replace(matcher.group(),formatter.print(toMod));    } else {      aQuery=aQuery.replace(matcher.group(),formatter.print(replaceWith));    }    matcher=DATE_REPLACE_PATTERN.matcher(aQuery);  }  return aQuery;}  }
class C{  @Override public String toString(){  return "surfaceReference[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + ","+ "channelDesc="+ channelDesc+ "]";}  }
class C{  public void acquireUninterruptibly(final Object topic){  Object topicObject=topic;  if (topicObject == null) {    topicObject=NULL_TOPIC;  }  Topic pendingTopic=null;synchronized (this.topicsQueue) {    if (this.currentTopic == null) {      if (logger.isDebugEnabled()) {        logger.debug("Collaboration.acquireUninterruptibly: {}: no current topic, setting topic to {}",this.toString(),topicObject);      }      setCurrentTopic(new Topic(topicObject));      this.currentTopic.addThread(Thread.currentThread());      this.topicsMap.put(topicObject,this.currentTopic);      return;    } else     if (isCurrentTopic(topicObject)) {      if (logger.isDebugEnabled()) {        logger.debug("Collaboration.acquireUninterruptibly: {}: already current topic: {}",this.toString(),topicObject);      }      this.currentTopic.addThread(Thread.currentThread());      return;    } else     if (hasCurrentTopic(Thread.currentThread())) {      assertNotRecursingTopic(topicObject);    } else {      pendingTopic=(Topic)this.topicsMap.get(topicObject);      if (pendingTopic == null) {        pendingTopic=new Topic(topicObject);        this.topicsMap.put(topicObject,pendingTopic);        this.topicsQueue.add(pendingTopic);      }      pendingTopic.addThread(Thread.currentThread());      if (logger.isDebugEnabled()) {        logger.debug("Collaboration.acquireUninterruptibly: {}: adding pendingTopic {}; current topic is {}",this.toString(),pendingTopic,this.currentTopic);      }    }  }  boolean interrupted=Thread.interrupted();  try {    awaitTopic(pendingTopic,false);  } catch (  InterruptedException e) {    interrupted=true;    this.stopper.checkCancelInProgress(e);  } finally {    if (interrupted)     Thread.currentThread().interrupt();  }}  }
class C{  private void prepareRPVolumeData() throws Exception {  Volume rpSourceVolume=new Volume();  URI rpSourceVolumeURI=URIUtil.createId(Volume.class);  rpTestVolumeURIs.add(rpSourceVolumeURI);  rpSourceVolume.setId(rpSourceVolumeURI);  rpSourceVolume.setLabel("rpSourceVolume");  rpSourceVolume.setPersonality(Volume.PersonalityTypes.SOURCE.toString());  _dbClient.createObject(rpSourceVolume);  Volume rpTargetVolume=new Volume();  URI rpTargetVolumeURI=URIUtil.createId(Volume.class);  rpTestVolumeURIs.add(rpTargetVolumeURI);  rpTargetVolume.setId(rpTargetVolumeURI);  rpTargetVolume.setLabel("rpTargetVolume");  rpTargetVolume.setPersonality(Volume.PersonalityTypes.TARGET.toString());  _dbClient.createObject(rpTargetVolume);  Volume rpSourceJournalVolume=new Volume();  URI rpSourceJournalVolumeURI=URIUtil.createId(Volume.class);  rpTestVolumeURIs.add(rpSourceJournalVolumeURI);  rpSourceJournalVolume.setId(rpSourceJournalVolumeURI);  rpSourceJournalVolume.setLabel("rpSourceJournalVolume");  rpSourceJournalVolume.setPersonality(Volume.PersonalityTypes.METADATA.toString());  _dbClient.createObject(rpSourceJournalVolume);  Volume rpTargetJournalVolume=new Volume();  URI rpTargetJournalVolumeURI=URIUtil.createId(Volume.class);  rpTestVolumeURIs.add(rpTargetJournalVolumeURI);  rpTargetJournalVolume.setId(rpTargetJournalVolumeURI);  rpTargetJournalVolume.setLabel("rpTargetJournalVolume");  rpTargetJournalVolume.setPersonality(Volume.PersonalityTypes.METADATA.toString());  _dbClient.createObject(rpTargetJournalVolume);  for (  URI volumeURI : rpTestVolumeURIs) {    Volume volume=_dbClient.queryObject(Volume.class,volumeURI);    Assert.assertNotNull(String.format("rp test volume %s not found",volumeURI),volume);  }}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws IOException {  Iterator<Entry> i=(size > 0) ? entrySet0().iterator() : null;  s.defaultWriteObject();  s.writeInt(table.length);  s.writeInt(size);  if (i != null) {    while (i.hasNext()) {      Entry e=i.next();      s.writeObject(e.getKey());      s.writeInt(e.getValue());    }  }}  }
class C{  public static DataSourceDescriptor findDataSource(String dataSourceId){  ProjectRegistry projectRegistry=DBeaverCore.getInstance().getProjectRegistry();  for (  IProject project : DBeaverCore.getInstance().getLiveProjects()) {    DataSourceRegistry dataSourceRegistry=projectRegistry.getDataSourceRegistry(project);    if (dataSourceRegistry != null) {      DataSourceDescriptor dataSourceContainer=dataSourceRegistry.getDataSource(dataSourceId);      if (dataSourceContainer != null) {        return dataSourceContainer;      }    }  }  return null;}  }
class C{  public static String bin2str(final byte[] values,final boolean separateBytes){  return bin2str(values,JBBPBitOrder.LSB0,separateBytes);}  }
class C{  public static MosaicDefinitionCreationTransaction createMosaicDefinitionCreationTransaction(final TimeInstant timeStamp,final Account signer){  return new MosaicDefinitionCreationTransaction(timeStamp,signer,Utils.createMosaicDefinition(signer),Utils.generateRandomAccount(),Amount.fromNem(50_000));}  }
class C{  void addGroupOrRangeJunction(AbstractGroupOrRangeJunction gj){  if (this.groupJunctions == null) {    this.groupJunctions=new ArrayList();  }  this.groupJunctions.add(gj);}  }
class C{  @Override public int read() throws IOException {  if (read_pos == read_pos_end) {    throw new EndOfBufferException();  }  return buffer[read_pos++] & 0xFF;}  }
class C{  @Override public boolean onBlockEventReceived(World par1World,int par2,int par3,int par4,int par5,int par6){  super.onBlockEventReceived(par1World,par2,par3,par4,par5,par6);  TileEntity tileentity=par1World.getTileEntity(par2,par3,par4);  return tileentity != null ? tileentity.receiveClientEvent(par5,par6) : false;}  }
class C{  @Override public int update(Uri uri,ContentValues values,String selection,String[] selectionArgs){  if (uri == null) {    LogUtils.log(this,Log.WARN,NULL_URI_FORMAT_STRING);    return 0;  }switch (sUriMatcher.match(uri)) {case LABELS_ID:    initializeDatabaseIfNull();  final String labelIdString=uri.getLastPathSegment();final int labelId;try {labelId=Integer.parseInt(labelIdString);} catch (NumberFormatException e) {LogUtils.log(this,Log.WARN,UNKNOWN_URI_FORMAT_STRING,uri);return 0;}final String where=String.format("%s = %d",LabelsTable.KEY_ID,labelId);final int result=mDatabase.update(LabelsTable.TABLE_NAME,values,combineSelectionAndWhere(selection,where),selectionArgs);getContext().getContentResolver().notifyChange(uri,null);return result;default :LogUtils.log(this,Log.WARN,UNKNOWN_URI_FORMAT_STRING,uri);return 0;}}  }
class C{  private Map<String,String> permission(FsPermission perm){  if (perm == null)   perm=FsPermission.getDefault();  return F.asMap(IgfsUtils.PROP_PERMISSION,toString(perm));}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.FORMAL_PARAMETER__DECLARED_TYPE_REF:    setDeclaredTypeRef((TypeRef)null);  return;case N4JSPackage.FORMAL_PARAMETER__BOGUS_TYPE_REF:setBogusTypeRef((TypeRef)null);return;case N4JSPackage.FORMAL_PARAMETER__NAME:setName(NAME_EDEFAULT);return;case N4JSPackage.FORMAL_PARAMETER__ANNOTATIONS:getAnnotations().clear();return;case N4JSPackage.FORMAL_PARAMETER__VARIADIC:setVariadic(VARIADIC_EDEFAULT);return;case N4JSPackage.FORMAL_PARAMETER__DEFINED_TYPE_ELEMENT:setDefinedTypeElement((TFormalParameter)null);return;case N4JSPackage.FORMAL_PARAMETER__INITIALIZER:setInitializer((Expression)null);return;case N4JSPackage.FORMAL_PARAMETER__BINDING_PATTERN:setBindingPattern((BindingPattern)null);return;}super.eUnset(featureID);}  }
class C{  public int countComponents(int n,int[][] edges){  Set<Integer> set=new HashSet<>();  id=new int[n];  for (int i=0; i < n; i++) {    id[i]=i;  }  for (  int[] edge : edges) {    union(edge[0],edge[1]);  }  for (int i=0; i < n; i++) {    set.add(root(i));  }  return set.size();}  }
class C{  public boolean isWordPart(char aChar){  return (Character.isLetterOrDigit(aChar) || aChar == '-' || aChar == '_');}  }
class C{  public StepBreakpointHitReply(final int packetId,final int errorCode,final long tid,final RegisterValues registerValues){  super(packetId,errorCode,tid,registerValues);}  }
class C{  @Override public void waitForResult(){  try {    this.future.get();  } catch (  Exception e) {    throw new IllegalStateException("could not process tile",e);  }}  }
class C{  public void startBasicBlock(){  instanceOfType=null;  instanceOfValueNumber=null;}  }
class C{  public void test_langCodeLiterals(){  final Literal a=new LiteralImpl("bigdata","en");  assertEquals(a,roundTrip_tuned(a));}  }
class C{  public static char convertByte2Uint8(byte b){  return (char)(b & 0xff);}  }
class C{  private synchronized void writeBytes(ZipFile zf,ZipEntry ze,ZipOutputStream os) throws IOException {  int n;  InputStream is=null;  try {    is=zf.getInputStream(ze);    long left=ze.getSize();    while ((left > 0) && (n=is.read(buffer,0,buffer.length)) != -1) {      os.write(buffer,0,n);      left-=n;    }  }  finally {    if (is != null) {      is.close();    }  }}  }
class C{  static void quit(){  PreferenceManager.getInstance().save();  try {    WeaponOrderHandler.saveWeaponOrderFile();  } catch (  IOException e) {    System.out.println("Error saving custom weapon orders!");    e.printStackTrace();  }  try {    QuirksHandler.saveCustomQuirksList();  } catch (  IOException e) {    System.out.println("Error saving quirks override!");    e.printStackTrace();  }  System.exit(0);}  }
class C{  public static byte[] addressAsByteArray(Address byte_array){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return null;}  }
class C{  public static HCoordinate perpendicularBisector(Coordinate a,Coordinate b){  double dx=b.x - a.x;  double dy=b.y - a.y;  HCoordinate l1=new HCoordinate(a.x + dx / 2.0,a.y + dy / 2.0,1.0);  HCoordinate l2=new HCoordinate(a.x - dy + dx / 2.0,a.y + dx + dy / 2.0,1.0);  return new HCoordinate(l1,l2);}  }
class C{  private void loadTableInfo(){  Timestamp payDate=(Timestamp)fieldPayDate.getValue();  miniTable.setColorCompare(payDate);  log.config("PayDate=" + payDate);  BankInfo bi=(BankInfo)fieldBankAccount.getSelectedItem();  ValueNamePair paymentRule=(ValueNamePair)fieldPaymentRule.getSelectedItem();  KeyNamePair docType=(KeyNamePair)fieldDtype.getSelectedItem();  int c_bpartner_id=0;  if (fieldBPartner.getValue() != null)   c_bpartner_id=((Integer)fieldBPartner.getValue()).intValue();  loadTableInfo(bi,payDate,paymentRule,onlyDue.isSelected(),c_bpartner_id,docType,miniTable);  calculateSelection();}  }
class C{  void addToQueue(ConnectionRequest request,boolean retry){  if (!running) {    start();  }  if (!autoDetected) {    autoDetected=true;    if (Util.getImplementation().shouldAutoDetectAccessPoint()) {      AutoDetectAPN r=new AutoDetectAPN();      r.setPost(false);      r.setUrl(autoDetectURL);      r.setPriority(ConnectionRequest.PRIORITY_CRITICAL);      addToQueue(r,false);    }  }  request.validateImpl();synchronized (LOCK) {    int i=request.getPriority();    if (!retry) {      if (!request.isDuplicateSupported()) {        if (pending.contains(request)) {          System.out.println("Duplicate entry in the queue: " + request.getClass().getName() + ": "+ request);          return;        }        ConnectionRequest currentRequest=networkThreads[0].getCurrentRequest();        if (currentRequest != null && !currentRequest.retrying && currentRequest.equals(request)) {          System.out.println("Duplicate entry detected");          return;        }      }    } else {      i=ConnectionRequest.PRIORITY_HIGH;    }switch (i) {case ConnectionRequest.PRIORITY_CRITICAL:      pending.insertElementAt(request,0);    ConnectionRequest currentRequest=networkThreads[0].getCurrentRequest();  if (currentRequest != null && currentRequest.getPriority() < ConnectionRequest.PRIORITY_CRITICAL) {    if (currentRequest.isPausable()) {      currentRequest.pause();      pending.insertElementAt(currentRequest,1);    } else {      currentRequest.kill();    }  }break;case ConnectionRequest.PRIORITY_HIGH:case ConnectionRequest.PRIORITY_NORMAL:case ConnectionRequest.PRIORITY_LOW:case ConnectionRequest.PRIORITY_REDUNDANT:addSortedToQueue(request,i);break;}LOCK.notify();}}  }
class C{  public LEFT_OUTER_JOIN LEFT_OUTER_JOIN(String tableToJoin){  return new LEFT_OUTER_JOIN(this,tableToJoin);}  }
class C{  public static ByteBuffer allocateDirect(int capacity){  if (capacity < 0) {    throw new IllegalArgumentException();  }  return new ByteBuffer(capacity);}  }
class C{  public boolean isDotNet(){  return mDotNet;}  }
class C{  public static byte[] hexStringToBytes(String hexString){  if (hexString == null || hexString.equals("")) {    return null;  }  hexString=hexString.toUpperCase();  int length=hexString.length() / 2;  char[] hexChars=hexString.toCharArray();  byte[] d=new byte[length];  for (int i=0; i < length; i++) {    int pos=i * 2;    d[i]=(byte)(charToByte(hexChars[pos]) << 4 | charToByte(hexChars[pos + 1]));  }  return d;}  }
class C{  public boolean serialize(RowMutator mutator,DataObject val){  return serialize(mutator,val,null);}  }
class C{  public String sqlADAction_updateLinkColumnElement(String vendorName,String catalogName,String schemaName){  ArrayList<String> columnNames=new ArrayList<String>();  columnNames.add("AD_Element_ID");  String subQuery=sql_select(vendorName,catalogName,schemaName,"AD_Element","e",new ArrayList<String>(Arrays.asList("AD_Element_ID")),null,new ArrayList<String>(Arrays.asList("UPPER(c.ColumnName)=UPPER(e.ColumnName)")),null,false);  ArrayList<String> values=new ArrayList<String>();  values.add(new StringBuffer("(").append(subQuery).append(")").toString());  ArrayList<String> conditions=new ArrayList<String>();  conditions.add("c.AD_Element_ID IS NULL");  return sql_update(vendorName,catalogName,schemaName,"AD_Column","c",columnNames,values,conditions);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Seeker.getInstance().getVideoStoreDirectories();}  }
class C{  public static <I,A>Parser<I,A> chainl1(Parser<I,A> p,Parser<I,BinaryOperator<A>> op){  return bind(p,null);}  }
class C{  @DSSink({DSSinkKind.BLUETOOTH}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:34.940 -0500",hash_original_method="D15419F6AD1B4E28C80D3421F9F86FA4",hash_generated_method="B6AAA10A8046DEAF7A51157791491AE3") public boolean startScoUsingVirtualVoiceCall(BluetoothDevice device){  if (DBG)   log("startScoUsingVirtualVoiceCall()");  if (mService != null && isEnabled() && isValidDevice(device)) {    try {      return mService.startScoUsingVirtualVoiceCall(device);    } catch (    RemoteException e) {      Log.e(TAG,e.toString());    }  } else {    Log.w(TAG,"Proxy not attached to service");    if (DBG)     Log.d(TAG,Log.getStackTraceString(new Throwable()));  }  return false;}  }
class C{  public StringInputDialog(final Shell parentShell,final String label,final String initialValue,final String dialogTitle,final String purpose){  super(parentShell);  this.label=label;  text=initialValue;  this.dialogTitle=dialogTitle;  setOptionDialogSettingsKey(StringInputDialog.class.getName() + "." + purpose);}  }
class C{  public void append(String addPath){  String currentPath=textField.getText();  if (currentPath.length() == 0) {    setValue(addPath);  } else {    setValue(currentPath.concat(";" + addPath));  }}  }
class C{  @Override public void addAttribute(String name,String value){  if (value != null) {    current.setAttribute(name,value);  }}  }
class C{  @SuppressWarnings("unchecked") public CompactHashSet(int size){  objects=(E[])new Object[(size == 0 ? 1 : size)];  elements=0;  freecells=objects.length;  modCount=0;}  }
class C{  public boolean isActive(){  return active;}  }
class C{  public final TextBuilder append(String str){  return (str == null) ? append("null") : append(str,0,str.length());}  }
class C{  public void start(int totalSeeds,int maxNFE){  this.totalSeeds=totalSeeds;  this.maxNFE=maxNFE;  lastSeed=1;  lastNFE=0;  currentSeed=1;  currentNFE=0;  statistics.clear();  startTime=System.currentTimeMillis();  lastTime=startTime;}  }
class C{  public void deployDatasources(InstalledLocalContainer container) throws Exception {  GeronimoInstalledLocalDeployer deployer=new GeronimoInstalledLocalDeployer(container);  for (  DataSource datasource : getDataSources()) {    Map<String,String> replacements=new HashMap<String,String>();    replacements.put("id",datasource.getId());    replacements.put("dependencies",GeronimoUtils.getGeronimoExtraClasspathDependiesXML(container));    replacements.put("jndiLocation",datasource.getJndiLocation());    replacements.put("driverClass",datasource.getDriverClass());    replacements.put("password",datasource.getPassword());    replacements.put("username",datasource.getUsername());    replacements.put("url",datasource.getUrl());    if (datasource.getTransactionSupport() == TransactionSupport.NO_TRANSACTION) {      replacements.put("transactionSupport","no-transaction");    } else     if (datasource.getTransactionSupport() == TransactionSupport.LOCAL_TRANSACTION) {      replacements.put("transactionSupport","local-transaction");    } else     if (datasource.getTransactionSupport() == TransactionSupport.XA_TRANSACTION) {      replacements.put("transactionSupport","xa-transaction");    } else {      throw new ContainerException("Unknown transaction support type: " + datasource.getTransactionSupport());    }    FilterChain filterChain=new FilterChain();    getAntUtils().addTokensToFilterChain(filterChain,replacements);    File target=new File(getHome(),"var/temp/cargo-datasource-" + datasource.getId() + ".xml");    getResourceUtils().copyResource(RESOURCE_PATH + "geronimo/DataSourceTemplate.xml",target,filterChain,"UTF-8");    deployer.deployRar("org.codehaus.cargo.datasource/" + datasource.getId() + "/1.0/car",target);  }}  }
class C{  public boolean isInterface(){  ClassDef classDef=getClassDef();  return (classDef.getAccessFlags() & AccessFlags.INTERFACE.getValue()) != 0;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void disconnect(UniversalConnection connection){  UniversalDataSource uds=connectionMap.remove(connection);  if (uds != null) {    uds.releaseConnection(connection);  }}  }
class C{  public Path createSourcepath(){  if (compileSourcepath == null) {    compileSourcepath=new Path(getProject());  }  return compileSourcepath.createPath();}  }
class C{  private void notifyInstanceListeners(InstanceEvent e){  for (  InstanceListener il : m_instanceListeners) {    il.acceptInstance(e);  }}  }
class C{  @Override public void send(final Message message,final int deliveryMode,final int priority,final long timeToLive) throws JMSException {  session.lock();  try {    if (ActiveMQRAMessageProducer.trace) {      ActiveMQRALogger.LOGGER.trace("send " + this + " message="+ message+ " deliveryMode="+ deliveryMode+ " priority="+ priority+ " ttl="+ timeToLive);    }    checkState();    producer.send(message,deliveryMode,priority,timeToLive);    if (ActiveMQRAMessageProducer.trace) {      ActiveMQRALogger.LOGGER.trace("sent " + this + " result="+ message);    }  }  finally {    session.unlock();  }}  }
class C{  @Override public void onPacketReceiving(PacketEvent packetEvent){  if (packetEvent.isCancelled()) {    return;  }  Player sender=packetEvent.getPlayer();  byte[] sharedSecret=packetEvent.getPacket().getByteArrays().read(0);  packetEvent.getAsyncMarker().incrementProcessingDelay();  VerifyResponseTask verifyTask=new VerifyResponseTask(plugin,packetEvent,sender,sharedSecret);  Bukkit.getScheduler().runTaskAsynchronously(plugin,verifyTask);}  }
class C{  @Override public DummyProjectBuilder withTypeName(String projectTypeName){  return this;}  }
class C{  public MonetaryFormat codeSeparator(char codeSeparator){  checkArgument(!Character.isDigit(codeSeparator));  checkArgument(codeSeparator > 0);  if (codeSeparator == this.codeSeparator)   return this; else   return new MonetaryFormat(negativeSign,positiveSign,zeroDigit,decimalMark,minDecimals,decimalGroups,shift,roundingMode,codes,codeSeparator,codePrefixed);}  }
class C{  @SuppressFBWarnings("JLM_JSR166_UTILCONCURRENT_MONITORENTER") private Response load() throws IOException {synchronized (this.saved) {    if (this.saved.isEmpty()) {      Iterable<String> head;      InputStream body;      try {        head=this.origin.head();        body=this.origin.body();      } catch (      final RsForward ex) {        head=ex.head();        body=ex.body();      }      this.saved.add(new RsSimple(head,body));    }  }  return this.saved.get(0);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.TRACE_CASE_DEF___TRACECASE_NAME_1:    return TRACECASE_NAME_1_EDEFAULT == null ? tracecase_name_1 != null : !TRACECASE_NAME_1_EDEFAULT.equals(tracecase_name_1);case UmplePackage.TRACE_CASE_DEF___TRACE_DIRECTIVE_1:  return traceDirective_1 != null && !traceDirective_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public String globalInfo(){  return "Class for performing parameter selection by cross-validation " + "for any classifier.\n\n" + "For more information, see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public int readLocalIndex(){  if (opcode == Bytecodes.WIDE) {    return Bytes.beU2(code,curBCI + 2);  }  return Bytes.beU1(code,curBCI + 1);}  }
class C{  private void init(String entidad){  try {    Session session=HibernateUtil.currentSession(entidad);    List list=session.find("FROM " + HibernateKeys.HIBERNATE_Iuserlicenc);    if (list != null && !list.isEmpty()) {      setProperty(HibernateKeys.HIBERNATE_Iuserlicenc,list.get(0));    }  } catch (  HibernateException e) {    log.error("Impossible to load intial values for Repository.",e);  }}  }
class C{  public void clearActiveLineRange(){  if (activeLineRangeStart != -1 || activeLineRangeEnd != -1) {    activeLineRangeStart=activeLineRangeEnd=-1;    repaint();  }}  }
class C{  public Store(Store other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetStoreName()) {    this.storeName=other.storeName;  }  if (other.isSetScope()) {    this.scope=other.scope;  }  this.persist=other.persist;}  }
class C{  @Override public void displayCycle(Cycle cycle){  this.cycle=cycle;  if (alreadyInitializedRecyclerList) {    populateRecyclerList();  } else {    initRecyclerView();    alreadyInitializedRecyclerList=true;    populateRecyclerList();  }}  }
class C{  public Node cloneSubtreeRetainDirection(){  Node clone=node.cloneNode(false);  if (node.getNodeType() == Node.ELEMENT_NODE) {    String direction=DomUtil.getComputedStyle(Element.as(node)).getProperty("direction");    if (direction.isEmpty()) {      direction="auto";    }    Element.as(clone).setAttribute("dir",direction);  }  for (  NodeTree child : children) {    clone.appendChild(child.cloneSubtreeRetainDirection());  }  return clone;}  }
class C{  public synchronized void add(final IProgressOperation operation){  m_operations.add(operation);  for (  final IGlobalProgressManagerListener listener : m_listeners) {    try {      listener.added(operation);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public void doEntryRemove(RemoveAllEntryData entry,DistributedRegion rgn){  @Released EntryEventImpl ev=RemoveAllMessage.createEntryEvent(entry,getSender(),this.context,rgn,this.possibleDuplicate,this.needsRouting,this.callbackArg,true,skipCallbacks);  try {    if (ev.getVersionTag() != null) {      checkVersionTag(rgn,ev.getVersionTag());    }    rgn.basicDestroy(ev,false,null);  } catch (  EntryNotFoundException ignore) {    this.appliedOperation=true;  }catch (  ConcurrentCacheModificationException e) {    dispatchElidedEvent(rgn,ev);    this.appliedOperation=false;  } finally {    if (ev.getVersionTag() != null && !ev.getVersionTag().isRecorded()) {      if (rgn.getVersionVector() != null) {        rgn.getVersionVector().recordVersion(getSender(),ev.getVersionTag());      }    }    ev.release();  }}  }
class C{  public InetAddressUnresolvableException(String hostname,Throwable cause){  super(hostname + " could not be resolved",cause);  this.hostname=hostname;}  }
class C{  public final boolean sendMessageAtFrontOfQueue(Message msg){  return mExec.sendMessageAtFrontOfQueue(msg);}  }
class C{  ChallengeMovementListener(int x,int y){  returnX=x;  returnY=y;}  }
class C{  public static Parameters from(ExecutableElement method){  PVector<Param> params=Empty.<Param>vector();  for (  VariableElement parameter : method.getParameters()) {    params=params.plus(new Param(parameter.asType().toString(),parameter.getSimpleName().toString()));  }  return new Parameters(params);}  }
class C{  public void testLongsCount(){  LongAdder counter=new LongAdder();  SplittableRandom r=new SplittableRandom();  long size=0;  for (int reps=0; reps < REPS; ++reps) {    counter.reset();    r.longs(size).parallel().forEach(null);    assertEquals(counter.sum(),size);    size+=524959;  }}  }
class C{  JPEGMetadata(ImageWriteParam param,JPEGImageWriter writer){  this(true,false);  JPEGImageWriteParam jparam=null;  if ((param != null) && (param instanceof JPEGImageWriteParam)) {    jparam=(JPEGImageWriteParam)param;    if (!jparam.areTablesSet()) {      jparam=null;    }  }  if (jparam != null) {    markerSequence.add(new DQTMarkerSegment(jparam.getQTables()));    markerSequence.add(new DHTMarkerSegment(jparam.getDCHuffmanTables(),jparam.getACHuffmanTables()));  } else {    markerSequence.add(new DQTMarkerSegment(JPEG.getDefaultQTables()));    markerSequence.add(new DHTMarkerSegment(JPEG.getDefaultHuffmanTables(true),JPEG.getDefaultHuffmanTables(false)));  }  if (!isConsistent()) {    throw new InternalError("Default stream metadata is inconsistent");  }}  }
class C{  public static void println(boolean x){  out.println(x);}  }
class C{  public ST createStringTemplateInternally(CompiledST impl){  ST st=createStringTemplate(impl);  if (trackCreationEvents && st.debugState != null) {    st.debugState.newSTEvent=null;  }  return st;}  }
class C{  public static SplitCasesSpec serializableInstance(){  return new SplitCasesSpec(0,new int[0],new ArrayList<String>());}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  public ActivationException(){  initCause(null);}  }
class C{  private void showContextMenu(final MouseEvent event){  if (producers.getSelectedIndex() > -1) {    JPopupMenu contextMenu=new JPopupMenu();  }}  }
class C{  private ByteBuffer generateRandomByteBuffer(int size){  byte[] data=new byte[size];  new Random().nextBytes(data);  ByteBuffer bb=ByteBuffer.wrap(data);  return bb;}  }
class C{  public JOptionPane(Object message,int messageType,int optionType){  this(message,messageType,optionType,null);}  }
class C{  private String send(JsonObject message){  URL url;  HttpURLConnection connection=null;  try {    url=new URL(this.service);    connection=(HttpURLConnection)url.openConnection();    connection.setRequestMethod("POST");    connection.setConnectTimeout(5000);    connection.setUseCaches(false);    connection.setDoInput(true);    connection.setDoOutput(true);    String payload="payload=" + URLEncoder.encode(message.toString(),"UTF-8");    DataOutputStream wr=new DataOutputStream(connection.getOutputStream());    wr.writeBytes(payload);    wr.flush();    wr.close();    InputStream is=connection.getInputStream();    BufferedReader rd=new BufferedReader(new InputStreamReader(is));    String line;    StringBuffer response=new StringBuffer();    while ((line=rd.readLine()) != null) {      response.append(line);      response.append('\r');    }    System.out.println(response.toString());    rd.close();    return response.toString();  } catch (  Exception e) {    e.printStackTrace();    return null;  } finally {    if (connection != null) {      connection.disconnect();    }  }}  }
class C{  public void sendMessage(String id,DTNHost to){  this.router.sendMessage(id,to);}  }
class C{  public boolean isSelfService(){  Object oo=get_Value(COLUMNNAME_IsSelfService);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void parseFollowsets(String json){  try {    JSONObject data=(JSONObject)parser.parse(json);    for (    Object key : data.keySet()) {      String room=((String)key).toLowerCase();      Set<Integer> emotesets=new HashSet<>();      for (      Object set : (JSONArray)data.get(key)) {        emotesets.add(((Number)set).intValue());      }      if (!prevEmotesets.containsKey(room) || !prevEmotesets.get(room).equals(emotesets)) {        fetchEmotes(room,emotesets);        prevEmotesets.put(room,emotesets);      }    }  } catch (  Exception ex) {    LOGGER.warning(String.format("[FFZ-WS] Error parsing 'follow_sets': %s [%s]",ex,json));  }}  }
class C{  public static int EROFS(){  return Errno.EROFS.intValue();}  }
class C{  private void updateBasePlan(double addedCost){  basePlanModel.updateBaseCost(addedCost);}  }
class C{  public void initCqListeners(CqListener[] addedListeners){  ArrayList<CqListener> oldListeners;synchronized (this.clSync) {    oldListeners=this.cqListeners;    if (addedListeners == null || addedListeners.length == 0) {      this.setCqListeners(null);    } else {      List nl=Arrays.asList(addedListeners);      if (nl.contains(null)) {        throw new IllegalArgumentException(LocalizedStrings.CqAttributesFactory_INITCQLISTENERS_PARAMETER_HAD_A_NULL_ELEMENT.toLocalizedString());      }      this.setCqListeners(new ArrayList(nl));    }  }  if (oldListeners != null) {    CqListener cql=null;    for (Iterator<CqListener> iter=oldListeners.iterator(); iter.hasNext(); ) {      try {        cql=iter.next();        cql.close();      } catch (      Exception ex) {        logger.warn(LocalizedMessage.create(LocalizedStrings.CqAttributesFactory_EXCEPTION_OCCURED_WHILE_CLOSING_CQ_LISTENER_ERROR_0,ex.getLocalizedMessage()));        if (logger.isDebugEnabled()) {          logger.debug(ex.getMessage(),ex);        }      }catch (      VirtualMachineError err) {        SystemFailure.initiateFailure(err);        throw err;      }catch (      Throwable t) {        SystemFailure.checkFailure();        logger.warn(LocalizedMessage.create(LocalizedStrings.CqAttributesFactory_RUNTIME_EXCEPTION_OCCURED_WHILE_CLOSING_CQ_LISTENER_ERROR_0,t.getLocalizedMessage()));        if (logger.isDebugEnabled()) {          logger.debug(t.getMessage(),t);        }      }    }  }}  }
class C{  public CDebuggerNodeMenuBuilder(final JTree projectTree,final DefaultMutableTreeNode parentNode,final CDebuggersTable table,final IDatabase database,final DebuggerTemplate debuggers[]){  super(projectTree);  m_parentNode=parentNode;  m_database=database;  m_debuggers=debuggers.clone();  m_table=table;}  }
class C{  public void worked(int work){}  }
class C{  public static ValueExp minus(ValueExp value1,ValueExp value2){  return new BinaryOpValueExp(MINUS,value1,value2);}  }
class C{  public byte[] extractData(byte[] stegoData,String stegoFileName,byte[] origSigData) throws OpenStegoException {  byte[] msg=null;  DCTDataHeader header=null;  DctLSBInputStream is=null;  int bytesRead=0;  try {    is=new DctLSBInputStream(ImageUtil.byteArrayToImage(stegoData,stegoFileName),this.config);    header=is.getDataHeader();    msg=new byte[header.getDataLength()];    bytesRead=is.read(msg,0,msg.length);    if (bytesRead != msg.length) {      throw new OpenStegoException(null,NAMESPACE,DctLSBErrors.ERR_IMAGE_DATA_READ);    }    is.close();  } catch (  IOException ioEx) {    throw new OpenStegoException(ioEx);  }  return msg;}  }
class C{  void selectType(Environment env,Context ctx,int tm){  Type t=Type.tInt;  if ((tm & TM_DOUBLE) != 0) {    t=Type.tDouble;  } else   if ((tm & TM_FLOAT) != 0) {    t=Type.tFloat;  } else   if ((tm & TM_LONG) != 0) {    t=Type.tLong;  }  left=convert(env,ctx,t,left);  right=convert(env,ctx,t,right);}  }
class C{  public ClusterRestRep update(URI id,ClusterUpdateParam input){  return client.put(ClusterRestRep.class,input,getIdUrl(),id);}  }
class C{  void release(){  final ArrayList<FixedAllocator> freeFixed[]=m_parent != null ? m_parent.m_freeFixed : m_store.m_freeFixed;  final IAllocationContext pcontext=m_parent == null ? null : m_parent.m_context;  for (  FixedAllocator f : m_allFixed) {    f.setAllocationContext(pcontext);    f.setFreeList(freeFixed[m_store.fixedAllocatorIndex(f.m_size)]);  }  if (log.isDebugEnabled())   log.debug("Releasing " + m_deferredFrees.size() + " deferred frees");  final boolean defer=m_store.m_minReleaseAge > 0 || m_store.m_activeTxCount > 0 || m_store.m_contexts.size() > 0;  for (  Long l : m_deferredFrees) {    final int addr=(int)(l >> 32);    final int sze=l.intValue();    if (defer) {      m_store.deferFree(addr,sze);    } else {      m_store.immediateFree(addr,sze);    }  }  m_deferredFrees.clear();}  }
class C{  @Override public boolean connectionAllowed(String eventName){  if (m_listenees.containsKey(eventName)) {    return false;  }  return true;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  int processRequest(RenewSpec spec){  assert spec != null;  int result=tokenOwner ? initialCount : spec.getRemainingRenewables();  if (!tokenOwner && spec.isRenew()) {    result--;  }  if (result < 0) {    throw new RenewException("Unable to renew non-renewable token");  }  result=spec.isRenewable() ? result : 0;  assert result >= 0;  return result;}  }
class C{  public KDTree(List<V> vecs,DistanceMetric distanceMetric,PivotSelection pvSelection,ExecutorService threadpool){  if (!(distanceMetric instanceof EuclideanDistance || distanceMetric instanceof ChebyshevDistance || distanceMetric instanceof ManhattanDistance|| distanceMetric instanceof MinkowskiDistance))   throw new ArithmeticException("KD Trees are not compatible with the given distance metric.");  this.distanceMetric=distanceMetric;  this.pvSelection=pvSelection;  this.size=vecs.size();  allVecs=vecs=new ArrayList<V>(vecs);  if (threadpool == null || threadpool instanceof FakeExecutor)   distCache=distanceMetric.getAccelerationCache(allVecs); else   distCache=distanceMetric.getAccelerationCache(vecs,threadpool);  List<Integer> vecIndices=new IntList(size);  ListUtils.addRange(vecIndices,0,size,1);  if (threadpool == null)   this.root=buildTree(vecIndices,0,null,null); else {    ModifiableCountDownLatch mcdl=new ModifiableCountDownLatch(1);    this.root=buildTree(vecIndices,0,threadpool,mcdl);    try {      mcdl.await();    } catch (    InterruptedException ex) {      this.root=buildTree(vecIndices,0,null,null);    }  }}  }
class C{  public SVGPathOutlineHandle(SVGPathFigure owner,boolean isHoverHandle){  super(owner);  this.isHoverHandle=isHoverHandle;}  }
class C{  protected void init(){}  }
class C{  protected boolean[] datasetIntegrity(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,boolean predictorMissing){  print("clusterer doesn't alter original datasets");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance);  print("...");  int numTrain=getNumInstances(), missingLevel=20;  boolean[] result=new boolean[2];  Instances train=null;  Clusterer clusterer=null;  try {    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,multiInstance);    if (nominalPredictor && !multiInstance) {      train.deleteAttributeAt(0);    }    if (missingLevel > 0) {      addMissing(train,missingLevel,predictorMissing);    }    clusterer=AbstractClusterer.makeCopies(getClusterer(),1)[0];  } catch (  Exception ex) {    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    Instances trainCopy=new Instances(train);    clusterer.buildClusterer(trainCopy);    compareDatasets(train,trainCopy);    println("yes");    result[0]=true;  } catch (  Exception ex) {    println("no");    result[0]=false;    if (m_Debug) {      println("\n=== Full Report ===");      print("Problem during training");      println(": " + ex.getMessage() + "\n");      println("Here is the dataset:\n");      println("=== Train Dataset ===\n" + train.toString() + "\n");    }  }  return result;}  }
class C{  public static TransferEntropyCalculatorDiscrete newInstance(int base,int destHistoryEmbedLength){  return new TransferEntropyCalculatorDiscrete(base,destHistoryEmbedLength);}  }
class C{  public static void writeFile(InputStream inStream,OutputStream out) throws IOException {  try {    byte[] buf=new byte[BUFF_SIZE];    int len=inStream.read(buf);    while (len > 0) {      out.write(buf,0,len);      len=inStream.read(buf);    }  }  finally {    if (inStream != null) {      inStream.close();    }    if (out != null) {      out.close();    }  }}  }
class C{  private void drawChannelCenterLine(Graphics2D graphics,double xaxis){  double height=getSize().getHeight() - mSpectrumInset;  graphics.setColor(Color.LIGHT_GRAY);  graphics.draw(new Line2D.Double(xaxis,height * 0.65d,xaxis,height - 1.0d));}  }
class C{  public static void waitTillOperationReceived(){synchronized (lockObject) {    if (!receivedOperation) {      try {        lockObject.wait(10000);      } catch (      InterruptedException e) {        fail("interrupted",e);      }    }    if (!receivedOperation) {      fail(" operation should have been received but it has not been received yet");    }  }}  }
class C{  @NotNull public List<PlayerNbt> createMultiplayerPlayerNbts(){  List<PlayerNbt> result=new ArrayList<PlayerNbt>();  for (  File playerdataFile : getPlayerdataFiles()) {    if (playerdataFile.isFile()) {      result.add(createPlayerdataPlayerNbt(getPlayerUUIDFromPlayerdataFile(playerdataFile)));    }  }  if (!result.isEmpty()) {    Log.i("using players from the playerdata directory");    return result;  }  for (  File playersFile : getPlayersFiles()) {    if (playersFile.isFile()) {      result.add(createPlayersPlayerNbt(getPlayerNameFromPlayersFile(playersFile)));    }  }  if (!result.isEmpty()) {    Log.i("using players from the players directory");    return result;  }  Log.i("no multiplayer players found");  return result;}  }
class C{  public long queryForCountStar(DatabaseConnection databaseConnection) throws SQLException {  if (countStarQuery == null) {    StringBuilder sb=new StringBuilder(64);    sb.append("SELECT COUNT(*) FROM ");    databaseType.appendEscapedEntityName(sb,tableInfo.getTableName());    countStarQuery=sb.toString();  }  long count=databaseConnection.queryForLong(countStarQuery);  logger.debug("query of '{}' returned {}",countStarQuery,count);  return count;}  }
class C{  public static int checkAndCorrect(BinaryMessage frame,int startIndex){  int syndrome=getSyndrome(frame,startIndex);switch (syndrome) {case 0:    return 0;case 1:  frame.flip(startIndex + 9);return 1;case 2:frame.flip(startIndex + 8);return 1;case 3:frame.flip(startIndex + 4);return 1;case 4:frame.flip(startIndex + 7);return 1;case 5:return 2;case 6:return 2;case 7:frame.flip(startIndex + 3);return 1;case 8:frame.flip(startIndex + 6);return 1;case 9:return 2;case 10:return 2;case 11:frame.flip(startIndex + 2);return 1;case 12:frame.flip(startIndex + 5);return 1;case 13:frame.flip(startIndex + 1);return 1;case 14:frame.flip(startIndex + 0);return 1;case 15:return 2;}return 2;}  }
class C{  public void mousePressed(MouseEvent e){  mouseSupport.fireMapMousePressed(e);  e.getComponent().requestFocus();  if (e.getSource() instanceof MapBean) {    drawDistanceObjects=true;    if (theMap == null) {      theMap=(MapBean)e.getSource();      theMap.addPaintListener(this);    }    rPoint1=theMap.getCoordinates(e);    rPoint2=null;    segments.addElement(rPoint1);    totalDistance+=distance;    theMap.repaint();  }}  }
class C{  public CPluginsReloadAction(){  super("Reload Plugins");  putValue(ACCELERATOR_KEY,HotKeys.RELOAD_PLUGINS_ACCELERATOR_KEY.getKeyStroke());}  }
class C{  private void visitStatement(StatementTree node,CollapseEmptyOrNot collapseEmptyOrNot,AllowLeadingBlankLine allowLeadingBlank,AllowTrailingBlankLine allowTrailingBlank){  sync(node);switch (node.getKind()) {case BLOCK:    builder.space();  visitBlock((BlockTree)node,collapseEmptyOrNot,allowLeadingBlank,allowTrailingBlank);break;default :builder.open(plusTwo);builder.breakOp(" ");scan(node,null);builder.close();}}  }
class C{  public int nrOfDefinitionLists(){  return superSection.nrOfDefinitionLists();}  }
class C{  public static <K,V>Map<K,V> synchronizedMap(Map<K,V> map){  if (map == null) {    throw new NullPointerException();  }  return new SynchronizedMap<K,V>(map);}  }
class C{  public static byte[] mergeCentralDirectoryData(ZipExtraField[] data){  int sum=4 * data.length;  for (int i=0; i < data.length; i++) {    sum+=data[i].getCentralDirectoryLength().getValue();  }  byte[] result=new byte[sum];  int start=0;  for (int i=0; i < data.length; i++) {    System.arraycopy(data[i].getHeaderId().getBytes(),0,result,start,2);    System.arraycopy(data[i].getCentralDirectoryLength().getBytes(),0,result,start + 2,2);    byte[] local=data[i].getCentralDirectoryData();    System.arraycopy(local,0,result,start + 4,local.length);    start+=(local.length + 4);  }  return result;}  }
class C{  @Override public void startDocument() throws SAXException {  buffer=new StringBuffer();  jsVector=new HashSet();  locator=new LocatorImpl();  inlineResourceList=new ArrayList<>();  jsSet=new HashSet<>();}  }
class C{  public static void main(String[] args){  JFrame frame=new JFrame(TextFieldDemo.class.getAnnotation(DemoProperties.class).value());  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.getContentPane().add(new TextFieldDemo());  frame.setPreferredSize(new Dimension(800,600));  frame.pack();  frame.setLocationRelativeTo(null);  frame.setVisible(true);}  }
class C{  public void tryToDequeueFileTransfers(){  mImOperationHandler.post(new FileTransferDequeueTask(mCtx,mCore,mMessagingLog,mChatService,mFileTransferService,mContactManager,mRcsSettings));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static ILaunchConfiguration addOrModifyLauncherArgs(ILaunchConfiguration config,String launcherDir,String launcherId) throws CoreException {  ILaunchConfigurationWorkingCopy launchConfigWc=config.getWorkingCopy();  if (launcherDir != null && launcherDir.trim().isEmpty()) {    launcherDir=null;  }  GWTLaunchConfigurationWorkingCopy.setCodeServerLauncherDir(launchConfigWc,launcherDir);  LaunchConfigurationProcessorUtilities.updateViaProcessor(new SuperDevModeCodeServerLauncherDirArgumentProcessor(),launchConfigWc);  if (launcherId != null) {    launchConfigWc.setAttribute(GWTLaunchConstants.SUPERDEVMODE_LAUNCH_ID,launcherId);  }  config=launchConfigWc.doSave();  return config;}  }
class C{  public void testInputAvailable2() throws Exception {  File f=this.initFile("testInputAvailable2");  FileOutputStream fos=new FileOutputStream(f);  DataOutputStream dos=new DataOutputStream(fos);  BufferedFileDataInput bfdi=new BufferedFileDataInput(f);  assertEquals("initial availability",0,bfdi.available());  dos.writeByte(1);  dos.flush();  assertEquals("after byte availability",1,bfdi.available());  dos.writeShort(2);  dos.flush();  assertEquals("after short availability",3,bfdi.available());  dos.writeInt(3);  dos.flush();  assertEquals("after int availability",7,bfdi.available());  dos.writeLong(4);  dos.flush();  assertEquals("after long availability",15,bfdi.available());  byte[] byteArray=new byte[10];  for (int i=0; i < byteArray.length; i++)   byteArray[i]=(byte)i;  dos.write(byteArray);  dos.flush();  assertEquals("after byte array availability",25,bfdi.available());  dos.close();  assertEquals("byte 1",1,bfdi.readByte());  assertEquals("after byte read",24,bfdi.available());  assertEquals("short 1",2,bfdi.readShort());  assertEquals("after short read",22,bfdi.available());  assertEquals("int 1",3,bfdi.readInt());  assertEquals("after int read",18,bfdi.available());  assertEquals("long 1",4,bfdi.readLong());  assertEquals("after int read",10,bfdi.available());  byte[] myBytes=new byte[10];  bfdi.readFully(myBytes);  assertEquals("after byte array read",0,bfdi.available());  bfdi.close();}  }
class C{  private void awaitResponse() throws IgniteInterruptedCheckedException {  U.await(respLatch);}  }
class C{  protected Strictness_Impl(){  super();}  }
class C{  public long length(){  return len;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MJournal[");  sb.append(get_ID()).append(",").append(getDescription()).append(",DR=").append(getTotalDr()).append(",CR=").append(getTotalCr()).append("]");  return sb.toString();}  }
class C{  public static void prepare(Class<? extends Table> clazz) throws Exception {  Object tableName=clazz.getField("TABLE_NAME").get(null);  MyDBOverseer.get().executeSql(DROP_STATMENT + tableName);  MyDBOverseer.get().executeSql(String.format("%s%s(%s)",CREATE_STATMENT,tableName,clazz.getMethod("buildColumnDeclarations").invoke(null)));  MyDBOverseer.get().executeBatch((List)clazz.getField("INIT_DATAS").get(null),(DBOperator)clazz.getField("CREATE_DBOPER").get(null));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:01.784 -0500",hash_original_method="017D692B38F8FD212CF524C82FCE2BD9",hash_generated_method="CA820402C5228EA8399842E1F8EBE838") public synchronized void deleteRights(DrmRights rights){  int res=nativeDeleteRights(rights);  if (JNI_DRM_FAILURE == res)   return;}  }
class C{  void create(OutputStream out,Manifest manifest) throws IOException {  ZipOutputStream zos=new JarOutputStream(out);  if (flag0) {    zos.setMethod(ZipOutputStream.STORED);  }  if (manifest != null) {    if (vflag) {      output(getMsg("out.added.manifest"));    }    ZipEntry e=new ZipEntry(MANIFEST_DIR);    e.setTime(System.currentTimeMillis());    e.setSize(0);    e.setCrc(0);    zos.putNextEntry(e);    e=new ZipEntry(MANIFEST_NAME);    e.setTime(System.currentTimeMillis());    if (flag0) {      crc32Manifest(e,manifest);    }    zos.putNextEntry(e);    manifest.write(zos);    zos.closeEntry();  }  for (  File file : entries) {    addFile(zos,file);  }  zos.close();}  }
class C{  private void updatePathConstraints(TestChromosome test){  List<BranchCondition> pathCondition=ConcolicExecution.getSymbolicPath(test);  pathConditions.put(test,pathCondition);}  }
class C{  public List<Graph> search(){  long start=System.currentTimeMillis();  TetradLogger.getInstance().log("info","Starting ION Search.");  logGraphs("\nInitial Pags: ",this.input);  TetradLogger.getInstance().log("info","Transfering local information.");  long steps=System.currentTimeMillis();  List<Node> varNodes=new ArrayList<>();  for (  String varName : variables) {    varNodes.add(new GraphNode(varName));  }  Graph graph=new EdgeListGraph(varNodes);  transferLocal(graph);  for (  NodePair pair : nonIntersection(graph)) {    graph.addEdge(new Edge(pair.getFirst(),pair.getSecond(),Endpoint.CIRCLE,Endpoint.CIRCLE));  }  TetradLogger.getInstance().log("info","Steps 1-2: " + (System.currentTimeMillis() - steps) / 1000. + "s");  System.out.println("step2");  System.out.println(graph);  steps=System.currentTimeMillis();  Queue<Graph> searchPags=new LinkedList<>();  searchPags.offer(graph);  List<Set<IonIndependenceFacts>> sepAndAssoc=findSepAndAssoc(graph);  this.separations=sepAndAssoc.get(0);  this.associations=sepAndAssoc.get(1);  Map<Collection<Node>,List<PossibleDConnectingPath>> paths;  Queue<Graph> step3Pags=new LinkedList<>();  Set<Graph> reject=new HashSet<>();  if (separations.isEmpty()) {    step3Pags.add(graph);  }  int numNodes=graph.getNumNodes();  int pl=numNodes - 1;  if (pathLengthSearch) {    pl=2;  }  for (int l=pl; l < numNodes; l++) {    if (pathLengthSearch) {      TetradLogger.getInstance().log("info","Braching over path lengths: " + l + " of "+ (numNodes - 1));    }    int seps=separations.size();    int currentSep=1;    int numAdjacencies=separations.size();    for (    IonIndependenceFacts fact : separations) {      if (adjacencySearch) {        TetradLogger.getInstance().log("info","Braching over path nonadjacencies: " + currentSep + " of "+ numAdjacencies);      }      seps--;      searchPags.addAll(step3Pags);      recGraphs.add(searchPags.size());      step3Pags.clear();      while (!searchPags.isEmpty()) {        System.out.println("ION Step 3 size: " + searchPags.size());        double currentUsage=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();        if (currentUsage > maxMemory)         maxMemory=currentUsage;        Graph pag=searchPags.poll();        List<PossibleDConnectingPath> dConnections=new ArrayList<>();        if (adjacencySearch) {          for (          Collection<Node> conditions : fact.getZ()) {            if (pathLengthSearch) {              dConnections.addAll(PossibleDConnectingPath.findDConnectingPathsOfLength(pag,fact.getX(),fact.getY(),conditions,l));            } else {              dConnections.addAll(PossibleDConnectingPath.findDConnectingPaths(pag,fact.getX(),fact.getY(),conditions));            }          }        } else {          for (          IonIndependenceFacts allfact : separations) {            for (            Collection<Node> conditions : allfact.getZ()) {              if (pathLengthSearch) {                dConnections.addAll(PossibleDConnectingPath.findDConnectingPathsOfLength(pag,allfact.getX(),allfact.getY(),conditions,l));              } else {                dConnections.addAll(PossibleDConnectingPath.findDConnectingPaths(pag,allfact.getX(),allfact.getY(),conditions));              }            }          }        }        if (dConnections.isEmpty()) {          step3Pags.add(pag);          continue;        }        paths=new HashMap<>();        for (        PossibleDConnectingPath path : dConnections) {          List<PossibleDConnectingPath> p=paths.get(path.getConditions());          if (p == null) {            p=new LinkedList<>();          }          p.add(path);          paths.put(path.getConditions(),p);        }        List<Set<GraphChange>> possibleChanges=new ArrayList<>();        for (        Set<GraphChange> changes : findChanges(paths)) {          Set<GraphChange> newChanges=new HashSet<>();          for (          GraphChange gc : changes) {            boolean okay=true;            for (            Triple collider : gc.getColliders()) {              if (pag.isUnderlineTriple(collider.getX(),collider.getY(),collider.getZ())) {                okay=false;                break;              }            }            if (!okay) {              continue;            }            for (            Triple collider : gc.getNoncolliders()) {              if (pag.isDefCollider(collider.getX(),collider.getY(),collider.getZ())) {                okay=false;                break;              }            }            if (okay) {              newChanges.add(gc);            }          }          if (!newChanges.isEmpty()) {            possibleChanges.add(newChanges);          } else {            possibleChanges.clear();            break;          }        }        float starthitset=System.currentTimeMillis();        Collection<GraphChange> hittingSets=IonHittingSet.findHittingSet(possibleChanges);        recHitTimes.add((System.currentTimeMillis() - starthitset) / 1000.);        for (        GraphChange gc : hittingSets) {          boolean badhittingset=false;          for (          Edge edge : gc.getRemoves()) {            Node node1=edge.getNode1();            Node node2=edge.getNode2();            Set<Triple> triples=new HashSet<>();            triples.addAll(gc.getColliders());            triples.addAll(gc.getNoncolliders());            if (triples.size() != (gc.getColliders().size() + gc.getNoncolliders().size())) {              badhittingset=true;              break;            }            for (            Triple triple : triples) {              if (node1.equals(triple.getY())) {                if (node2.equals(triple.getX()) || node2.equals(triple.getZ())) {                  badhittingset=true;                  break;                }              }              if (node2.equals(triple.getY())) {                if (node1.equals(triple.getX()) || node1.equals(triple.getZ())) {                  badhittingset=true;                  break;                }              }            }            if (badhittingset) {              break;            }            for (            NodePair pair : gc.getOrients()) {              if ((node1.equals(pair.getFirst()) && node2.equals(pair.getSecond())) || (node2.equals(pair.getFirst()) && node1.equals(pair.getSecond()))) {                badhittingset=true;                break;              }            }            if (badhittingset) {              break;            }          }          if (!badhittingset) {            for (            NodePair pair : gc.getOrients()) {              for (              Triple triple : gc.getNoncolliders()) {                if (pair.getSecond().equals(triple.getY())) {                  if (pair.getFirst().equals(triple.getX()) && pag.getEndpoint(triple.getZ(),triple.getY()).equals(Endpoint.ARROW)) {                    badhittingset=true;                    break;                  }                  if (pair.getFirst().equals(triple.getZ()) && pag.getEndpoint(triple.getX(),triple.getY()).equals(Endpoint.ARROW)) {                    badhittingset=true;                    break;                  }                }                if (badhittingset) {                  break;                }              }              if (badhittingset) {                break;              }            }          }          if (badhittingset) {            continue;          }          Graph changed=gc.applyTo(pag);          if (reject.contains(changed)) {            continue;          }          if (step3Pags.contains(changed)) {            continue;          }          if (predictsFalseIndependence(associations,changed) || changed.existsDirectedCycle()) {            reject.add(changed);          }          step3Pags.add(changed);        }      }      if (!adjacencySearch) {        break;      }    }  }  TetradLogger.getInstance().log("info","Step 3: " + (System.currentTimeMillis() - steps) / 1000. + "s");  steps=System.currentTimeMillis();  Map<Edge,Boolean> necEdges;  Set<Graph> outputPags=new HashSet<>();  while (!step3Pags.isEmpty()) {    Graph pag=step3Pags.poll();    necEdges=new HashMap<>();    for (    Edge edge : pag.getEdges()) {      necEdges.put(edge,false);    }    for (    IonIndependenceFacts fact : associations) {      for (      List<Node> nodes : fact.getZ()) {        if (nodes.isEmpty()) {          List<List<Node>> treks=treks(pag,fact.x,fact.y);          if (treks.size() == 1) {            List<Node> trek=treks.get(0);            List<Triple> triples=new ArrayList<>();            for (int i=1; i < trek.size(); i++) {              necEdges.put(pag.getEdge(trek.get(i - 1),trek.get(i)),true);              if (i == 1) {                continue;              }              pag.addUnderlineTriple(trek.get(i - 2),trek.get(i - 1),trek.get(i));            }          }          break;        }      }    }    boolean elimTreks;    List<Graph> possRemovePags=possRemove(pag,necEdges);    double currentUsage=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();    if (currentUsage > maxMemory)     maxMemory=currentUsage;    for (    Graph newPag : possRemovePags) {      elimTreks=false;      for (      IonIndependenceFacts fact : associations) {        for (        List<Node> nodes : fact.getZ()) {          if (nodes.isEmpty()) {            if (treks(newPag,fact.x,fact.y).isEmpty()) {              elimTreks=true;            }            break;          }        }      }      if (!elimTreks) {        outputPags.add(newPag);      }    }  }  outputPags=removeMoreSpecific(outputPags);  TetradLogger.getInstance().log("info","Step 4: " + (System.currentTimeMillis() - steps) / 1000. + "s");  steps=System.currentTimeMillis();  Set<Graph> outputSet=new HashSet<>();  for (  Graph pag : outputPags) {    Set<Triple> unshieldedPossibleColliders=new HashSet<>();    for (    Triple triple : getPossibleTriples(pag)) {      if (!pag.isAdjacentTo(triple.getX(),triple.getZ())) {        unshieldedPossibleColliders.add(triple);      }    }    PowerSet<Triple> pset=new PowerSet<>(unshieldedPossibleColliders);    for (    Set<Triple> set : pset) {      Graph newGraph=new EdgeListGraph(pag);      for (      Triple triple : set) {        newGraph.setEndpoint(triple.getX(),triple.getY(),Endpoint.ARROW);        newGraph.setEndpoint(triple.getZ(),triple.getY(),Endpoint.ARROW);      }      doFinalOrientation(newGraph);    }    for (    Graph outputPag : finalResult) {      if (!predictsFalseIndependence(associations,outputPag)) {        Set<Triple> underlineTriples=new HashSet<>(outputPag.getUnderLines());        for (        Triple triple : underlineTriples) {          outputPag.removeUnderlineTriple(triple.getX(),triple.getY(),triple.getZ());        }        outputSet.add(outputPag);      }    }  }  output.addAll(outputSet);  TetradLogger.getInstance().log("info","Step 5: " + (System.currentTimeMillis() - steps) / 1000. + "s");  runtime=((System.currentTimeMillis() - start) / 1000.);  logGraphs("\nReturning output (" + output.size() + " Graphs):",output);  double currentUsage=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();  if (currentUsage > maxMemory)   maxMemory=currentUsage;  return output;}  }
class C{  public static AreaChart criar(Map<String,List<Relatorio>> map,String titulo){  config(titulo);  eixoX=new CategoryAxis();  eixoY=new NumberAxis();  grafico=new AreaChart<>(eixoX,eixoY);  for (  String chave : map.keySet()) {    XYChart.Series<String,Number> serie=new XYChart.Series<>();    serie.setName(chave);    List<Relatorio> relatorios=map.get(chave);    for (    Relatorio relatorio : relatorios) {      serie.getData().add(new XYChart.Data<String,Number>(relatorio.getData(),relatorio.getTotal()));    }    grafico.getData().add(serie);  }  return grafico;}  }
class C{  private void initListeners(){  if (m_module.isLoaded()) {    m_module.getContent().getViewContainer().getNativeCallgraphView().addListener(m_viewListener);  }}  }
class C{  private void processTargetFixup(BBQ bbq){  BasicBlock b, p;  Stmt s;  while (!bbq.isEmpty()) {    try {      b=bbq.pull();    } catch (    NoSuchElementException e) {      break;    }    s=b.getTailJStmt();    if (s instanceof GotoStmt) {      if (b.succ.size() == 1) {        ((GotoStmt)s).setTarget(b.succ.firstElement().getHeadJStmt());      } else {        G.v().out.println("Error :");        for (int i=0; i < b.statements.size(); i++)         G.v().out.println(b.statements.get(i));        throw new RuntimeException(b + " has " + b.succ.size()+ " successors.");      }    } else     if (s instanceof IfStmt) {      if (b.succ.size() != 2)       G.v().out.println("How can an if not have 2 successors?");      if ((b.succ.firstElement()) == b.next) {        ((IfStmt)s).setTarget(b.succ.elementAt(1).getHeadJStmt());      } else {        ((IfStmt)s).setTarget(b.succ.firstElement().getHeadJStmt());      }    } else     if (s instanceof TableSwitchStmt) {      int count=0;      TableSwitchStmt sts=(TableSwitchStmt)s;      for (      BasicBlock basicBlock : b.succ) {        p=(basicBlock);        if (count == 0) {          sts.setDefaultTarget(p.getHeadJStmt());        } else {          sts.setTarget(count - 1,p.getHeadJStmt());        }        count++;      }    } else     if (s instanceof LookupSwitchStmt) {      int count=0;      LookupSwitchStmt sls=(LookupSwitchStmt)s;      for (      BasicBlock basicBlock : b.succ) {        p=(basicBlock);        if (count == 0) {          sls.setDefaultTarget(p.getHeadJStmt());        } else {          sls.setTarget(count - 1,p.getHeadJStmt());        }        count++;      }    }    b.done=false;    for (    BasicBlock basicBlock : b.succ) {      p=(basicBlock);      if (p.done)       bbq.push(p);    }  }}  }
class C{  public int match(String s){  String rep=new String(_dataChars,0,_nDataChars);  return rep.indexOf(s);}  }
class C{  @Override public int runCommand(String command) throws IOException {  int exitStatus;  try {    exitStatus=runCommand(false,Arrays.asList(command.split(" ")));  } catch (  InterruptedException e) {    throw new IllegalStateException(e);  }  if (exitStatus != 0) {    throw new IllegalStateException(getErrorMessage());  }  return exitStatus;}  }
class C{  public Scan(){  super();}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XObject m_selected;  m_selected=((Expression)m_obj).execute(xctxt);  m_selected.allowDetachToRelease(m_allowRelease);  if (m_selected.getType() == CLASS_STRING)   return m_selected; else   return new XString(m_selected.str());}  }
class C{  public Matrix4x3d pick(double x,double y,double width,double height,int[] viewport){  return pick(x,y,width,height,viewport,this);}  }
class C{  public WrappedGTestResultParser(String testRunName,Collection<ITestRunListener> listeners){  super(testRunName,listeners);}  }
class C{  @Override public boolean isAssignableBy(Type other){  if (other instanceof NullType) {    return !this.isPrimitive();  }  if (other.isPrimitive()) {    if (this.getQualifiedName().equals(Object.class.getCanonicalName())) {      return true;    } else {      return isCorrespondingBoxingType(other.describe());    }  }  if (other instanceof LambdaArgumentTypePlaceholder) {    return this.getTypeDeclaration().hasAnnotation(FunctionalInterface.class.getCanonicalName());  } else   if (other instanceof ReferenceTypeImpl) {    ReferenceTypeImpl otherRef=(ReferenceTypeImpl)other;    if (compareConsideringTypeParameters(otherRef)) {      return true;    }    for (    ReferenceType otherAncestor : otherRef.getAllAncestors()) {      if (compareConsideringTypeParameters(otherAncestor)) {        return true;      }    }    return false;  } else   if (other.isTypeVariable()) {    return true;  } else   if (other.isWildcard()) {    if (this.getQualifiedName().equals(Object.class.getCanonicalName())) {      return true;    } else     if (other.asWildcard().isExtends()) {      return isAssignableBy(other.asWildcard().getBoundedType());    } else {      return false;    }  } else {    return false;  }}  }
class C{  @DSComment("View state info") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:50.373 -0500",hash_original_method="5950FF2359622B18F5A5CA611CFB5FEA",hash_generated_method="6166B14C683B9315F9D6F2BDCDD2DABC") public static AccessibilityNodeInfo obtain(View source){  AccessibilityNodeInfo info=AccessibilityNodeInfo.obtain();  info.setSource(source);  return info;}  }
class C{  private void stopCountdown(){  mTimeoutTV.removeCallbacks(mTimeoutCounter);  mTimeoutTV.setVisibility(View.GONE);}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public int sizeInBytes(){  return available;}  }
class C{  private void generateComponents(int startingAt,int endingAt){  if (collectStats) {    formattedChars+=(endingAt - startingAt);  }  int layoutFlags=0;  TextLabelFactory factory=new TextLabelFactory(fFrc,fChars,fBidi,layoutFlags);  int[] charsLtoV=null;  if (fBidi != null) {    fLevels=BidiUtils.getLevels(fBidi);    int[] charsVtoL=BidiUtils.createVisualToLogicalMap(fLevels);    charsLtoV=BidiUtils.createInverseMap(charsVtoL);    fIsDirectionLTR=fBidi.baseIsLeftToRight();  } else {    fLevels=null;    fIsDirectionLTR=true;  }  try {    fComponents=TextLine.getComponents(fParagraph,fChars,startingAt,endingAt,charsLtoV,fLevels,factory);  } catch (  IllegalArgumentException e) {    System.out.println("startingAt=" + startingAt + "; endingAt="+ endingAt);    System.out.println("fComponentLimit=" + fComponentLimit);    throw e;  }  fComponentStart=startingAt;  fComponentLimit=endingAt;}  }
class C{  protected void clearOutEvents(){  sCInterface.clearOutEvents();  sCIIfA.clearOutEvents();}  }
class C{  public static ArtifactCoordinates fromString(String string){  final Matcher matcher=VALID_PATTERN.matcher(string);  if (matcher.matches()) {    if (matcher.group(4) != null) {      return new ArtifactCoordinates(matcher.group(1),matcher.group(2),matcher.group(3),matcher.group(4));    } else {      return new ArtifactCoordinates(matcher.group(1),matcher.group(2),matcher.group(3));    }  } else {    throw new IllegalArgumentException(string);  }}  }
class C{  static public void assertEquals(String message,Object expected,Object actual){  if (expected == null && actual == null)   return;  if (expected != null && expected.equals(actual))   return;  failNotEquals(message,expected,actual);}  }
class C{  protected void checkJAXPVersion(Hashtable h){  if (null == h)   h=new Hashtable();  final Class noArgs[]=new Class[0];  Class clazz=null;  try {    final String JAXP1_CLASS="javax.xml.parsers.DocumentBuilder";    final String JAXP11_METHOD="getDOMImplementation";    clazz=ObjectFactory.findProviderClass(JAXP1_CLASS,ObjectFactory.findClassLoader(),true);    Method method=clazz.getMethod(JAXP11_METHOD,noArgs);    h.put(VERSION + "JAXP","1.1 or higher");  } catch (  Exception e) {    if (null != clazz) {      h.put(ERROR + VERSION + "JAXP","1.0.1");      h.put(ERROR,ERROR_FOUND);    } else {      h.put(ERROR + VERSION + "JAXP",CLASS_NOTPRESENT);      h.put(ERROR,ERROR_FOUND);    }  }}  }
class C{  public static String formAuthorizationHeader(String token,PrivateKey key,URL requestUrl,String requestMethod) throws GeneralSecurityException {  if (key == null) {    return String.format("AuthSub token=\"%s\"",token);  } else {    long timestamp=System.currentTimeMillis() / 1000;    long nonce=RANDOM.nextLong();    String dataToSign=String.format("%s %s %d %s",requestMethod,requestUrl.toExternalForm(),timestamp,unsignedLongToString(nonce));    SignatureAlgorithm sigAlg=getSigAlg(key);    byte[] signature=sign(key,dataToSign,sigAlg);    String encodedSignature=Base64.encode(signature);    return String.format("AuthSub token=\"%s\" data=\"%s\" sig=\"%s\" " + "sigalg=\"%s\"",token,dataToSign,encodedSignature,sigAlg.getAuthSubName());  }}  }
class C{  public Matrix4f rotationY(float ang){  float sin, cos;  sin=(float)Math.sin(ang);  cos=(float)Math.cos(ang);  MemUtil.INSTANCE.identity(this);  this._m00(cos);  this._m02(-sin);  this._m20(sin);  this._m22(cos);  _properties(PROPERTY_AFFINE);  return this;}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public LRTAStarAgent(OnlineSearchProblem problem,PerceptToStateFunction ptsFunction,HeuristicFunction hf){  setProblem(problem);  setPerceptToStateFunction(ptsFunction);  setHeuristicFunction(hf);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:48.615 -0500",hash_original_method="BFD2027492A8CA27CCE6A852F5D0D4BF",hash_generated_method="CFB27AB400DD88FBC877D4D8B3607B54") @DSVerified("callback modeled") @DSSafe(DSCat.ANDROID_CALLBACK) public void onDataConnectionStateChanged(int state,int networkType){}  }
class C{  public boolean matches(XPathContext xctxt,int targetNode,QName mode) throws TransformerException {  double score=m_stepPattern.getMatchScore(xctxt,targetNode);  return (XPath.MATCH_SCORE_NONE != score) && matchModes(mode,m_template.getMode());}  }
class C{  public boolean isCustomizable(){  return customizable;}  }
class C{  public void startRetransmitTimer(SIPServerTransaction sipServerTx,Response response){  if (sipServerTx.getRequest().getMethod().equals(Request.INVITE) && response.getStatusCode() / 100 == 2) {    this.startTimer(sipServerTx);  }}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deactivate") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep deleteMigration(@PathParam("id") URI id){  ArgValidator.checkFieldUriType(id,Migration.class,"id");  Migration migration=queryResource(id);  if (!BulkList.MigrationFilter.isUserAuthorizedForMigration(migration,getUserFromContext(),_permissionsHelper)) {    StorageOSUser user=getUserFromContext();    throw APIException.forbidden.insufficientPermissionsForUser(user.getName());  }  String status=migration.getMigrationStatus();  String migrationName=migration.getLabel();  if (status == null || status.isEmpty() || migrationName == null || migrationName.isEmpty()) {    throw APIException.badRequests.migrationHasntStarted(id.toString());  }  if (!status.equalsIgnoreCase(VPlexMigrationInfo.MigrationStatus.COMMITTED.getStatusValue()) && !status.equalsIgnoreCase(VPlexMigrationInfo.MigrationStatus.CANCELLED.getStatusValue()) && !status.equalsIgnoreCase(VPlexMigrationInfo.MigrationStatus.ERROR.getStatusValue())) {    throw VPlexApiException.exceptions.cantRemoveMigrationInvalidState(migrationName);  }  URI volId=migration.getVolume();  Volume vplexVol=_dbClient.queryObject(Volume.class,volId);  String taskId=UUID.randomUUID().toString();  Operation op=_dbClient.createTaskOpStatus(Volume.class,volId,taskId,ResourceOperationTypeEnum.DELETE_MIGRATION);  TaskResourceRep task=toTask(vplexVol,taskId,op);  if (migration.getInactive()) {    s_logger.info("Migration {} has been deleted",id);    op.ready();    vplexVol.getOpStatus().createTaskStatus(taskId,op);    _dbClient.persistObject(vplexVol);    return task;  }  try {    VPlexController controller=_vplexBlockServiceApi.getController();    controller.deleteMigration(vplexVol.getStorageController(),id,taskId);  } catch (  InternalException e) {    s_logger.error("Error",e);    String errMsg=String.format("Error: %s",e.getMessage());    task.setState(Operation.Status.error.name());    task.setMessage(errMsg);    op.error(e);    vplexVol.getOpStatus().updateTaskStatus(taskId,op);    _dbClient.persistObject(vplexVol);  }  return task;}  }
class C{  public void receiveErrorregisterVASACertificate(java.lang.Exception e){}  }
class C{  public int toComparison(){  return comparison;}  }
class C{  protected void writeHeader(){  out.println("digraph tokens {");  out.println("  graph [ fontsize=30 labelloc=\"t\" label=\"\" splines=true overlap=false rankdir = \"LR\" ];");  out.println("  // A2 paper size");  out.println("  size = \"34.4,16.5\";");  out.println("  edge [ fontname=\"" + FONT_NAME + "\" fontcolor=\"red\" color=\"#606060\" ]");  out.println("  node [ style=\"filled\" fillcolor=\"#e8e8f0\" shape=\"Mrecord\" fontname=\"" + FONT_NAME + "\" ]");  out.println();}  }
class C{  public void actionPerformed(ActionEvent evt){  root.panel.view.getSharedContext().setDebug_draw_line_boxes(!root.panel.view.getSharedContext().debugDrawLineBoxes());  root.panel.view.repaint();}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static <T>MutableSeq<T> newMutableSeq(T value){  Collection<T> collection=new ArrayList<>();  collection.add(value);  return new SeqImpl<>(collection);}  }
class C{  public static Uri importContent(String sessionId,String fileName,InputStream sourceStream) throws IOException {  String targetPath="/" + sessionId + "/upload/"+ fileName;  targetPath=createUniqueFilename(targetPath);  copyToVfs(sourceStream,targetPath);  return vfsUri(targetPath);}  }
class C{  protected void cloneTo(BaseElement copy){  copy.node=node.cloneNode(true);  copy.attributes=attributes;  if (parent != null) {    copy.parent=(BaseElement)parent.clone();    copy.parent.children.remove(this);    copy.parent.children.add(copy);  }  copy.children.clear();  for (  BaseElement elem : children) {    copy.children.add((BaseElement)elem.clone());  }}  }
class C{  public void reset(){  parser.reset();}  }
class C{  protected static boolean isGet(HttpServletRequest request){  return request.getMethod().equals("GET");}  }
class C{  public static boolean bytesWriteObject(ActiveMQBuffer message,Object value){  if (value == null) {    throw new NullPointerException("Attempt to write a null value");  }  if (value instanceof String) {    bytesWriteUTF(message,(String)value);  } else   if (value instanceof Boolean) {    bytesWriteBoolean(message,(Boolean)value);  } else   if (value instanceof Character) {    bytesWriteChar(message,(Character)value);  } else   if (value instanceof Byte) {    bytesWriteByte(message,(Byte)value);  } else   if (value instanceof Short) {    bytesWriteShort(message,(Short)value);  } else   if (value instanceof Integer) {    bytesWriteInt(message,(Integer)value);  } else   if (value instanceof Long) {    bytesWriteLong(message,(Long)value);  } else   if (value instanceof Float) {    bytesWriteFloat(message,(Float)value);  } else   if (value instanceof Double) {    bytesWriteDouble(message,(Double)value);  } else   if (value instanceof byte[]) {    bytesWriteBytes(message,(byte[])value);  } else {    return false;  }  return true;}  }
class C{  private void rememberDeletedOffset(int offset){  fDeleteOffset=offset;}  }
class C{  @Override protected void doAction(){  BufferEntry bufferEntry=bufferSelectedEntry();  if (bufferEntry != null) {    Buffer.populate(bufferEntry);    kseFrame.updateControls(true);  }}  }
class C{  private void checkAxisIndices(List<Integer> indices){  if (indices == null) {    return;  }  int count=indices.size();  if (count == 0) {    throw new IllegalArgumentException("Empty list not permitted.");  }  Set<Integer> set=new HashSet<Integer>();  for (  Integer item : indices) {    if (set.contains(item)) {      throw new IllegalArgumentException("Indices must be unique.");    }    set.add(item);  }}  }
class C{  @Override public int hashCode(){  return Objects.hashCode(getOwnerType()) ^ Objects.hashCode(getRawType()) ^ Arrays.hashCode(getActualTypeArguments());}  }
class C{  private ResultContentEvent newResultContentEvent(double[] prediction,InstanceContentEvent inEvent){  ResultContentEvent rce=new ResultContentEvent(inEvent.getInstanceIndex(),inEvent.getInstance(),inEvent.getClassId(),prediction,inEvent.isLastEvent());  rce.setClassifierIndex(this.processorId);  rce.setEvaluationIndex(inEvent.getEvaluationIndex());  return rce;}  }
class C{  public void addPropertiesFromString(String[] props){  try {    if (props[0].contains(":")) {      String[] split=props[0].split(":");      host=split[0];      port=new Integer(split[1]);    } else {      host=props[0];    }    exchange=props[1];    exchangeType=props[2];    if (props[3] != null) {      routingKeys=props[3].split(":");      for (      String rKey : routingKeys) {        registry.bind(LogstreamUtil.LOG_TYPE,rKey);      }    }  } catch (  Exception ex) {    throw new RuntimeException(ex);  }}  }
class C{  public boolean isNumberShared(ContactId contact){  return RcsStatus.ACTIVE.equals(getContactSharingStatus(contact));}  }
class C{  private String extractJavadoc(IJavaElement element) throws CoreException {  if (element instanceof IMember) {    return JavadocContentAccess2.getHTMLContent((IMember)element,true,UrlContextProvider.get(WorkspaceIdProvider.getWorkspaceId(),element.getJavaProject().getPath().toString()));  } else   if (element instanceof IPackageDeclaration) {    return JavadocContentAccess2.getHTMLContent((IPackageDeclaration)element,UrlContextProvider.get(WorkspaceIdProvider.getWorkspaceId(),element.getJavaProject().getPath().toString()));  } else   if (element instanceof IPackageFragment) {    return JavadocContentAccess2.getHTMLContent((IPackageFragment)element,UrlContextProvider.get(WorkspaceIdProvider.getWorkspaceId(),element.getJavaProject().getPath().toString()));  }  return null;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public boolean voidIt(){  log.info("voidIt - " + toString());  return closeIt();}  }
class C{  public BasicStatusLine(final ProtocolVersion version,int statusCode,final String reasonPhrase){  super();  if (version == null) {    throw new IllegalArgumentException("Protocol version may not be null.");  }  if (statusCode < 0) {    throw new IllegalArgumentException("Status code may not be negative.");  }  this.protoVersion=version;  this.statusCode=statusCode;  this.reasonPhrase=reasonPhrase;}  }
class C{  public void add(String key,String value){  if (key != null && value != null) {    Object params=urlParamsWithObjects.get(key);    if (params == null) {      params=new HashSet<String>();      this.put(key,params);    }    if (params instanceof List) {      ((List<Object>)params).add(value);    } else     if (params instanceof Set) {      ((Set<Object>)params).add(value);    }  }}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public InterfaceMaker(){  super(SOURCE);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public void initializeAtomsForDP(List<Datum> data,String filename,Random random){  omega=new ArrayList<>(K);  dof=new double[K];  beta=new double[K];  if (filename != null) {    try {      loc=BatchMixtureModel.initializeClustersFromFile(filename,K);      log.debug("loc : {}",loc);      if (loc.size() < K) {        loc=BatchMixtureModel.gonzalezInitializeMixtureCenters(loc,data,K,random);      }    } catch (    FileNotFoundException e) {      log.debug("failed to initialized from file");      e.printStackTrace();      loc=BatchMixtureModel.gonzalezInitializeMixtureCenters(data,K,random);    }  } else {    loc=BatchMixtureModel.gonzalezInitializeMixtureCenters(data,K,random);  }  for (int i=0; i < K; i++) {    beta[i]=1;    dof[i]=baseNu;    omega.add(0,AlgebraUtils.invertMatrix(baseOmegaInverse));  }}  }
class C{  public void decayingCounters(){  if (Controller.options.LOGGING_LEVEL >= 2) {    printlnToLogWithTimePrefix("Decaying clock and decayable objects");  }}  }
class C{  public void test_GET_accessPath_delete_c() throws Exception {  if (TestMode.quads != getTestMode())   return;  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.trig");  final long result=countResults(doGetWithAccessPath(null,null,null,new URIImpl("http://www.bigdata.com/")));  assertEquals(3,result);}  }
class C{  public Transaction intern(Transaction tx){  lock.lock();  try {    cleanPool();    Entry entry=memoryPool.get(tx.getHash());    if (entry != null) {      if (entry.tx != null) {        checkState(entry.addresses == null);        Transaction transaction=entry.tx.get();        if (transaction != null) {          tx=transaction;        }        return tx;      } else {        checkNotNull(entry.addresses);        entry.tx=new WeakTransactionReference(tx,referenceQueue);        Set<PeerAddress> addrs=entry.addresses;        entry.addresses=null;        TransactionConfidence confidence=tx.getConfidence();        log.debug("Adding tx [{}] {} to the memory pool",confidence.numBroadcastPeers(),tx.getHashAsString());        for (        PeerAddress a : addrs) {          markBroadcast(a,tx);        }        return tx;      }    } else {      log.debug("Provided with a downloaded transaction we didn't see announced yet: {}",tx.getHashAsString());      entry=new Entry();      entry.tx=new WeakTransactionReference(tx,referenceQueue);      memoryPool.put(tx.getHash(),entry);      return tx;    }  }  finally {    lock.unlock();  }}  }
class C{  @AntDoc("A ceylon module to be compiled`") public void addConfiguredModule(Module module){  this.moduleset.addConfiguredModule(module);}  }
class C{  private static List<Throwable> expandFromMultiple(Throwable t){  return expandFromMultiple(t,new ArrayList<Throwable>());}  }
class C{  final public boolean isVisible(){  return isAdded() && !isHidden() && mView != null && mView.getWindowToken() != null && mView.getVisibility() == View.VISIBLE;}  }
class C{  @Bean(initMethod="start",destroyMethod="stop") @Profile(Constants.SPRING_PROFILE_DEVELOPMENT) public Server h2TCPServer() throws SQLException {  return Server.createTcpServer("-tcp","-tcpAllowOthers");}  }
class C{  public static byte[] loadVCFBytes(File vcfFile) throws FileNotFoundException, IOException {  return IOUtils.toByteArray(new FileInputStream(vcfFile));}  }
class C{  public static <T>void onNextDropped(T t){}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.METHOD_DECLARATION__TYPE_VARS:    return ((InternalEList<?>)getTypeVars()).basicRemove(otherEnd,msgs);case N4JSPackage.METHOD_DECLARATION__DECLARED_TYPE_REF:  return basicSetDeclaredTypeRef(null,msgs);case N4JSPackage.METHOD_DECLARATION__BOGUS_TYPE_REF:return basicSetBogusTypeRef(null,msgs);case N4JSPackage.METHOD_DECLARATION__DECLARED_NAME:return basicSetDeclaredName(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public KeyChainGroup(NetworkParameters params){  this(params,null,new ArrayList<DeterministicKeyChain>(1),null,null);}  }
class C{  private void delete(Node x,Node y,Set<Node> subset,Graph graph,boolean log){  if (log) {    Edge oldEdge=graph.getEdge(x,y);    System.out.println(graph.getNumEdges() + ". DELETE " + oldEdge+ " "+ subset+ " ("+ nf.format(scoreGraph(graph).getPValue())+ ")");  }  graph.removeEdge(x,y);  for (  Node h : subset) {    if (Edges.isUndirectedEdge(graph.getEdge(x,h))) {      graph.removeEdge(x,h);      graph.addDirectedEdge(x,h);      if (log) {        Edge oldEdge=graph.getEdge(x,h);        TetradLogger.getInstance().log("directedEdges","--- Directing " + oldEdge + " to "+ graph.getEdge(x,h));      }    }    if (Edges.isUndirectedEdge(graph.getEdge(y,h))) {      graph.removeEdge(y,h);      graph.addDirectedEdge(y,h);      if (log) {        Edge oldEdge=graph.getEdge(y,h);        TetradLogger.getInstance().log("directedEdges","--- Directing " + oldEdge + " to "+ graph.getEdge(y,h));      }    }  }}  }
class C{  public static byte[] decode(byte[] source,int off,int len){  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiCrop=(byte)(source[i] & 0x7f);    sbiDecode=DECODABET[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=sbiCrop;        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn);          b4Posn=0;          if (sbiCrop == EQUALS_SIGN)           break;        }      }    } else {      System.err.println("Bad Base64 input character at " + i + ": "+ source[i]+ "(decimal)");      return null;    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public void addFilterInfo(FilterInfo other){  if (other.cqs != null) {    if (this.cqs == null) {      this.cqs=new HashMap();    }    for (    Map.Entry<Long,Integer> entry : other.cqs.entrySet()) {      this.cqs.put(entry.getKey(),entry.getValue());    }  }  if (other.interestedClients != null) {    if (this.interestedClients == null) {      this.interestedClients=new HashSet();    }    this.interestedClients.addAll(other.interestedClients);  }  if (other.interestedClientsInv != null) {    if (this.interestedClientsInv == null) {      this.interestedClientsInv=new HashSet();    }    this.interestedClientsInv.addAll(other.interestedClientsInv);  }}  }
class C{  void reset(){  if (aadBuffer == null) {    aadBuffer=new ByteArrayOutputStream();  } else {    aadBuffer.reset();  }  if (gctrPAndC != null)   gctrPAndC.reset();  if (ghashAllToS != null)   ghashAllToS.reset();  processed=0;  sizeOfAAD=0;  if (ibuffer != null) {    ibuffer.reset();  }}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public final int length(){  return array.length;}  }
class C{  public boolean equals(Object obj){  return (obj != null && obj instanceof MimeType && getStringValue().equals(((MimeType)obj).getStringValue()));}  }
class C{  public static <T,K,V>MutableMap<K,V> toMap(Iterable<T> iterable,Function<? super T,? extends K> keyFunction,Function<? super T,? extends V> valueFunction){  return Iterate.addToMap(iterable,keyFunction,valueFunction,UnifiedMap.newMap());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.466 -0400",hash_original_method="32C7A1E0157D2C9087EAC41BD14B15D7",hash_generated_method="00FDB7FDFDC88CB2383D99F2E4B0637A") private boolean conditionCH0(String value,int index){  if (index != 0) {    return false;  } else   if (!contains(value,index + 1,5,"HARAC","HARIS") && !contains(value,index + 1,3,"HOR","HYM","HIA","HEM")) {    return false;  } else   if (contains(value,0,5,"CHORE")) {    return false;  } else {    return true;  }}  }
class C{  protected static boolean isOn(String property){  return ("true,on,yes,1".indexOf(property) > -1);}  }
class C{  public PatchSetAttribute asPatchSetAttribute(RevWalk revWalk,Change change,PatchSet patchSet){  try (ReviewDb db=schema.open()){    return asPatchSetAttribute(db,revWalk,change,patchSet);  } catch (  OrmException e) {    log.error("Cannot open database connection",e);    return new PatchSetAttribute();  }}  }
class C{  public synchronized void removeZoomListener(ZoomListener listener){  mZoomListeners.remove(listener);}  }
class C{  public static String trimAndNullIfEmpty(final String text){  String emptyStr=null;  if (null != text && !text.trim().isEmpty()) {    emptyStr=text.trim();  }  return emptyStr;}  }
class C{  public final int offset(){  return _offset;}  }
class C{  public Xform(Integer formId,String xformXml){  this();  setFormId(formId);  setXformXml(xformXml);  setDateCreated(new Date());  setCreator(Context.getAuthenticatedUser());}  }
class C{  public void load(Element e,Object o) throws Exception {  throw new Exception("Method not coded");}  }
class C{  public void updateList(){  try {    sessions.clear();    Set<MultimediaStreamingSession> currentSessions=getMultimediaSessionApi().getStreamingSessions(StreamingSessionUtils.SERVICE_ID);    sessions=new ArrayList<>(currentSessions);    if (sessions.size() > 0) {      String[] items=new String[sessions.size()];      for (int i=0; i < items.length; i++) {        items[i]=getString(R.string.label_session,sessions.get(i).getSessionId());      }      setListAdapter(new ArrayAdapter<>(StreamingSessionList.this,android.R.layout.simple_list_item_1,items));    } else {      setListAdapter(null);    }  } catch (  RcsServiceException e) {    showExceptionThenExit(e);  }}  }
class C{  public CalculatorScreen(final boolean openAPP) throws Exception {  super(null,openAPP ? SeleniumTestsContextManager.getThreadContext().getApp() : null);}  }
class C{  private void disconnect(Throwable exception){  Connection c=Connections.getInstance(context).getConnection(clientHandle);  c.changeConnectionStatus(ConnectionStatus.DISCONNECTED);  c.addAction("Disconnect Failed - an error occured");}  }
class C{  @Deprecated public static float signum(float f){  return Math.signum(f);}  }
class C{  public void testGetScope() throws Exception {  Identity i=new IdentityStub("testGetScope");  assertNull(i.getScope());  IdentityScope s=IdentityScope.getSystemScope();  Identity i2=new IdentityStub("testGetScope2",s);  assertSame(s,i2.getScope());}  }
class C{  public static String slurpURLNoExceptions(URL u){  try {    return slurpURL(u);  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  public void init(ActionListener doneAction,HashMap<String,NamedIcon> iconMap){  if (!jmri.util.ThreadingUtil.isGUIThread())   log.error("Not on GUI thread",new Exception("traceback"));  _update=true;  _supressDragging=true;  _currentIconMap=iconMap;  if (iconMap != null) {    checkCurrentMap(iconMap);  }  makeBottomPanel(doneAction);}  }
class C{  public static byte[] readDex(byte[] data) throws IOException {  if (data.length < 3) {    throw new IOException("File too small to be a dex/zip");  }  if ("dex".equals(new String(data,0,3,StandardCharsets.ISO_8859_1))) {    return data;  } else   if ("PK".equals(new String(data,0,2,StandardCharsets.ISO_8859_1))) {    try (ZipFile zipFile=new ZipFile(data)){      ZipEntry classes=zipFile.findFirstEntry("classes.dex");      if (classes != null) {        return toByteArray(zipFile.getInputStream(classes));      } else {        throw new IOException("Can not find classes.dex in zip file");      }    }   }  throw new IOException("the src file not a .dex or zip file");}  }
class C{  public static String formatNumber(final BigDecimal number,final int fractionDigits,final boolean useGrouping){  return NumberUtil.formatNumber(number,fractionDigits,useGrouping);}  }
class C{  public static NumberFormat makeNumberFormat(int digits){switch (digits) {case 0:    return NF0;case 2:  return NF2;case 3:return NF3;case 4:return NF4;case 6:return NF6;case 8:return NF8;}final NumberFormat nf=NumberFormat.getInstance(Locale.US);nf.setMaximumFractionDigits(digits);nf.setMinimumFractionDigits(digits);nf.setGroupingUsed(false);return nf;}  }
class C{  private void createReflectedImages(){  final int width=this.wrappedViewBitmap.getWidth();  final int height=this.wrappedViewBitmap.getHeight();  final Matrix matrix=new Matrix();  matrix.postScale(1,-1);  final int scaledDownHeight=(int)(height * originalScaledownFactor);  final int invertedHeight=height - scaledDownHeight - reflectionGap;  final int invertedBitmapSourceTop=scaledDownHeight - invertedHeight;  final Bitmap invertedBitmap=Bitmap.createBitmap(this.wrappedViewBitmap,0,invertedBitmapSourceTop,width,invertedHeight,matrix,true);  this.wrappedViewDrawingCanvas.drawBitmap(invertedBitmap,0,scaledDownHeight + reflectionGap,null);  final Paint paint=new Paint();  final LinearGradient shader=new LinearGradient(0,height * imageReflectionRatio + reflectionGap,0,height,0x70ffffff,0x00ffffff,Shader.TileMode.CLAMP);  paint.setShader(shader);  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));  this.wrappedViewDrawingCanvas.drawRect(0,height * (1 - imageReflectionRatio),width,height,paint);}  }
class C{  private PrincipalUser _getJobOwner(BigInteger jobId){  Alert alert=null;  try {    alert=_alertService.findAlertByPrimaryKey(jobId);  } catch (  Exception ex) {  }  return alert != null ? alert.getOwner() : null;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (newRecord && getParent().isComplete()) {    log.saveError("ParentComplete",Msg.translate(getCtx(),"M_RequisitionLine"));    return false;  }  if (getLine() == 0) {    String sql="SELECT COALESCE(MAX(Line),0)+10 FROM M_RequisitionLine WHERE M_Requisition_ID=?";    int ii=DB.getSQLValueEx(get_TrxName(),sql,getM_Requisition_ID());    setLine(ii);  }  if (getM_Product_ID() != 0 && getC_Charge_ID() != 0)   setC_Charge_ID(0);  if (getM_AttributeSetInstance_ID() != 0 && getC_Charge_ID() != 0)   setM_AttributeSetInstance_ID(0);  if (getM_Product_ID() > 0 && getC_UOM_ID() <= 0) {    setC_UOM_ID(getM_Product().getC_UOM_ID());  }  if (getPriceActual().signum() == 0)   setPrice();  setLineNetAmt();  return true;}  }
class C{  private float drawYAxisMarker(ChartValueSeries chartValueSeries,Canvas canvas,int xPosition,int yValue){  String marker=chartValueSeries.formatMarker(yValue);  Paint paint=chartValueSeries.getMarkerPaint();  Rect rect=getRect(paint,marker);  int yPosition=getY(chartValueSeries,yValue) + (int)(rect.height() / 2);  canvas.drawText(marker,xPosition,yPosition,paint);  return paint.measureText(marker);}  }
class C{  private Bitmap[] loadBitmaps(int arrayId){  int[] bitmapIds=getIntArray(arrayId);  Bitmap[] bitmaps=new Bitmap[bitmapIds.length];  for (int i=0; i < bitmapIds.length; i++) {    Drawable backgroundDrawable=mResources.getDrawable(bitmapIds[i]);    bitmaps[i]=((BitmapDrawable)backgroundDrawable).getBitmap();  }  return bitmaps;}  }
class C{  public boolean isOvershooting(){  return (mStartValue < mEndValue && getCurrentValue() > mEndValue) || (mStartValue > mEndValue && getCurrentValue() < mEndValue);}  }
class C{  public static boolean boolValue(String propName,boolean dflt){  String sysProp=getProperty(propName);  return (sysProp != null && !sysProp.isEmpty()) ? Boolean.getBoolean(sysProp) : dflt;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public ApproximationSetCollector(Algorithm algorithm,double[] epsilon){  super();  this.algorithm=algorithm;  this.epsilon=epsilon;}  }
class C{  public Boolean isAutoSubscribe(){  return autoSubscribe;}  }
class C{  public static void writeDeclaredField(final Object target,final String fieldName,final Object value,final boolean forceAccess) throws IllegalAccessException {  if (target == null) {    throw new IllegalArgumentException("target object must not be null");  }  Class<?> cls=target.getClass();  Field field=FieldUtils.getDeclaredField(cls,fieldName,forceAccess);  if (field == null) {    throw new IllegalArgumentException("Cannot locate declared field " + cls.getName() + "."+ fieldName);  }  FieldUtils.writeField(field,target,value);}  }
class C{  protected int convertSizeToPowerOfTwo(int size){  if (size <= 4)   return 4; else   if (size <= 8)   return 8; else   if (size <= 16)   return 16; else   if (size <= 32)   return 32; else   if (size <= 64)   return 64; else   if (size <= 128)   return 128; else   if (size <= 256)   return 256; else   if (size <= 512)   return 512; else   if (size <= 1024)   return 1024; else   return PLConstants.kTextureMaxSize;}  }
class C{  public static PendingActionNotificationResponse createPendingTransferNotificationResponse(EppResource eppResource,Trid transferRequestTrid,boolean actionResult,DateTime processedDate){  assertIsContactOrDomain(eppResource);  return eppResource instanceof ContactResource ? ContactPendingActionNotificationResponse.create(eppResource.getForeignKey(),actionResult,transferRequestTrid,processedDate) : DomainPendingActionNotificationResponse.create(eppResource.getForeignKey(),actionResult,transferRequestTrid,processedDate);}  }
class C{  public boolean isProxyClass(String name){  return proxyClasses.get(name) != null;}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  try {    XPathContext xctxt=transformer.getXPathContext();    int sourceNode=xctxt.getCurrentNode();    XObject value=m_selectExpression.execute(xctxt,sourceNode,this);    SerializationHandler handler=transformer.getSerializationHandler();    if (null != value) {      int type=value.getType();      String s;switch (type) {case XObject.CLASS_BOOLEAN:case XObject.CLASS_NUMBER:case XObject.CLASS_STRING:        s=value.str();      handler.characters(s.toCharArray(),0,s.length());    break;case XObject.CLASS_NODESET:  DTMIterator nl=value.iter();DTMTreeWalker tw=new TreeWalker2Result(transformer,handler);int pos;while (DTM.NULL != (pos=nl.nextNode())) {DTM dtm=xctxt.getDTMManager().getDTM(pos);short t=dtm.getNodeType(pos);if (t == DTM.DOCUMENT_NODE) {for (int child=dtm.getFirstChild(pos); child != DTM.NULL; child=dtm.getNextSibling(child)) {  tw.traverse(child);}} else if (t == DTM.ATTRIBUTE_NODE) {SerializerUtils.addAttribute(handler,pos);} else {tw.traverse(pos);}}break;case XObject.CLASS_RTREEFRAG:SerializerUtils.outputResultTreeFragment(handler,value,transformer.getXPathContext());break;default :s=value.str();handler.characters(s.toCharArray(),0,s.length());break;}}} catch (org.xml.sax.SAXException se) {throw new TransformerException(se);}}  }
class C{  private boolean recursiveExpand(TreeItem[] items,IProgressMonitor monitor,long cancelTime,int[] numItemsLeft){  boolean canceled=false;  for (int i=0; !canceled && i < items.length; i++) {    TreeItem item=items[i];    boolean visible=numItemsLeft[0]-- >= 0;    if (monitor.isCanceled() || (!visible && System.currentTimeMillis() > cancelTime)) {      canceled=true;    } else {      Object itemData=item.getData();      if (itemData != null) {        if (!item.getExpanded()) {          FilteredTree.this.treeViewer.setExpandedState(itemData,true);        }        TreeItem[] children=item.getItems();        if (items.length > 0) {          canceled=recursiveExpand(children,monitor,cancelTime,numItemsLeft);        }      }    }  }  return canceled;}  }
class C{  public static StringConverterFactory create(){  return new StringConverterFactory();}  }
class C{  public <T>T read(String localName,String uri,Class<T> cls) throws XMLStreamException {  return _xml.get(localName,uri,cls);}  }
class C{  public void snackBar(@StringRes int message,@StringRes int actionMessage,View.OnClickListener actionOnClick,int priority,boolean isDismissible){  snackBar.message(message,actionMessage,actionOnClick,priority,isDismissible,0);}  }
class C{  @Override protected Object executeInLock(String lockName,TransactionCallback txCallback) throws JobPersistenceException {  return executeInNonManagedTXLock(lockName,txCallback,null);}  }
class C{  public InvalidParameterException(String msg){  super(msg);}  }
class C{  public final void writeUTF(String str) throws IOException {  writeUTF(str,this);}  }
class C{  public static final double[] minusEquals(final double[] v1,final double[] v2){  assert (v1.length == v2.length) : ERR_VEC_DIMENSIONS;  for (int i=0; i < v1.length; i++) {    v1[i]-=v2[i];  }  return v1;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static void checkLineFeed(final InputStream input,final ByteArrayOutputStream baos,final Integer position) throws IOException {  if (input.read() != '\n') {    throw new HttpException(HttpURLConnection.HTTP_BAD_REQUEST,String.format("there is no LF after CR in header, line #%d: \"%s\"",position,new Utf8String(baos.toByteArray()).string()));  }}  }
class C{  protected boolean needsPropertyChangeSupport(ClassNode declaringClass,SourceUnit sourceUnit){  boolean foundAdd=false, foundRemove=false, foundFire=false;  ClassNode consideredClass=declaringClass;  while (consideredClass != null) {    for (    MethodNode method : consideredClass.getMethods()) {      foundAdd=foundAdd || method.getName().equals("addPropertyChangeListener") && method.getParameters().length == 1;      foundRemove=foundRemove || method.getName().equals("removePropertyChangeListener") && method.getParameters().length == 1;      foundFire=foundFire || method.getName().equals("firePropertyChange") && method.getParameters().length == 3;      if (foundAdd && foundRemove && foundFire) {        return false;      }    }    consideredClass=consideredClass.getSuperClass();  }  consideredClass=declaringClass.getSuperClass();  while (consideredClass != null) {    if (hasBindableAnnotation(consideredClass))     return false;    for (    FieldNode field : consideredClass.getFields()) {      if (hasBindableAnnotation(field))       return false;    }    consideredClass=consideredClass.getSuperClass();  }  if (foundAdd || foundRemove || foundFire) {    sourceUnit.getErrorCollector().addErrorAndContinue(new SimpleMessage("@Bindable cannot be processed on " + declaringClass.getName() + " because some but not all of addPropertyChangeListener, removePropertyChange, and firePropertyChange were declared in the current or super classes.",sourceUnit));    return false;  }  return true;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  private static int z(int digit){  if (digit == 0) {    return 0;  }  return (digit * 2 - 1) % 9 + 1;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_notationssetnameditem1.class,args);}  }
class C{  private SecurityWarning(){}  }
class C{  public ST createSingleton(Token templateToken){  String template;  if (templateToken.getType() == GroupParser.BIGSTRING || templateToken.getType() == GroupParser.BIGSTRING_NO_NL) {    template=Misc.strip(templateToken.getText(),2);  } else {    template=Misc.strip(templateToken.getText(),1);  }  CompiledST impl=compile(getFileName(),null,null,template,templateToken);  ST st=createStringTemplateInternally(impl);  st.groupThatCreatedThisInstance=this;  st.impl.hasFormalArgs=false;  st.impl.name=ST.UNKNOWN_NAME;  st.impl.defineImplicitlyDefinedTemplates(this);  return st;}  }
class C{  public int compareTo(JumpingSolitaireState jss){  for (int i=0; i < filled.length; i++) {    if (!filled[i] && jss.filled[i]) {      return -1;    }    if (filled[i] && !jss.filled[i]) {      return +1;    }  }  return 0;}  }
class C{  @Override public Void visitReturn(ReturnTree node,Void p){  if (node.getExpression() == null) {    return super.visitReturn(node,p);  }  Pair<Tree,AnnotatedTypeMirror> preAssCtxt=visitorState.getAssignmentContext();  try {    Tree enclosing=TreeUtils.enclosingOfKind(getCurrentPath(),new HashSet<Tree.Kind>(Arrays.asList(Tree.Kind.METHOD,Tree.Kind.LAMBDA_EXPRESSION)));    AnnotatedTypeMirror ret=null;    if (enclosing.getKind() == Tree.Kind.METHOD) {      MethodTree enclosingMethod=TreeUtils.enclosingMethod(getCurrentPath());      boolean valid=validateTypeOf(enclosing);      if (valid) {        ret=atypeFactory.getMethodReturnType(enclosingMethod,node);      }    } else {      Pair<AnnotatedDeclaredType,AnnotatedExecutableType> result=atypeFactory.getFnInterfaceFromTree((LambdaExpressionTree)enclosing);      ret=result.second.getReturnType();    }    if (ret != null) {      visitorState.setAssignmentContext(Pair.of((Tree)node,ret));      commonAssignmentCheck(ret,node.getExpression(),"return.type.incompatible");    }    return super.visitReturn(node,p);  }  finally {    visitorState.setAssignmentContext(preAssCtxt);  }}  }
class C{  public void updateValue(String iconValue){  TrackIconUtils.setIconSpinner(spinner,iconValue);  textView.setText(recordingSettingsActivity.getString(TrackIconUtils.getIconActivityType(iconValue)));  textView.clearFocus();}  }
class C{  private SAXParseException makeException(String message){  if (locator != null) {    return new SAXParseException(message,locator);  } else {    return new SAXParseException(message,null,null,-1,-1);  }}  }
class C{  private Vcenter createVcenter(VcenterCreateParam createParam,Boolean validateConnection){  Vcenter vcenter;  if (isSystemAdmin()) {    vcenter=createNewSystemVcenter(createParam,validateConnection);  } else {    TenantOrg tenant=_dbClient.queryObject(TenantOrg.class,URI.create(getUserFromContext().getTenantId()));    vcenter=createNewTenantVcenter(tenant,createParam,validateConnection);  }  return vcenter;}  }
class C{  public final void unmarkResourceAbsent(long resourceID){  this.unmarkResourceAbsent(Long.toString(resourceID));}  }
class C{  protected StringLiteralImpl(){  super();}  }
class C{  public boolean put(int key,Object value){  int i=indexOfInsertion(key);  if (i < 0) {    i=-i - 1;    this.values[i]=value;    return false;  }  if (this.distinct > this.highWaterMark) {    int newCapacity=chooseGrowCapacity(this.distinct + 1,this.minLoadFactor,this.maxLoadFactor);    rehash(newCapacity);    return put(key,value);  }  this.table[i]=key;  this.values[i]=value;  if (this.state[i] == FREE)   this.freeEntries--;  this.state[i]=FULL;  this.distinct++;  if (this.freeEntries < 1) {    int newCapacity=chooseGrowCapacity(this.distinct + 1,this.minLoadFactor,this.maxLoadFactor);    rehash(newCapacity);  }  return true;}  }
class C{  public ICUNormalizer2Filter(TokenStream input,Normalizer2 normalizer){  super(input);  this.normalizer=normalizer;}  }
class C{  void onStart(){  long now=U.currentTimeMillis();  lastStartTime=now;  long lastEndTime=this.lastEndTime == 0 ? createTime : this.lastEndTime;  lastIdleTime=now - lastEndTime;  totalIdleTime+=lastIdleTime;  running=true;}  }
class C{  public ItemDroppingTeleporterBehaviour(final SpeakerNPC speakerNPC,final List<String> setZones,final String zoneStartsWithLimiter,final String repeatedText,final String itemName){  super(speakerNPC,setZones,zoneStartsWithLimiter,repeatedText);  this.speakerNPC=speakerNPC;  this.itemName=itemName;}  }
class C{  ScheduledFutureTask(Callable<V> callable,long ns){  super(callable);  this.time=ns;  this.period=0;  this.sequenceNumber=sequencer.getAndIncrement();}  }
class C{  final boolean shouldMapTextChar(int value){  if (value < ASCII_MAX)   return shouldMapTextChar_ASCII[value];  return get(value);}  }
class C{  public static StorageEvent parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  StorageEvent object=new StorageEvent();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"StorageEvent".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (StorageEvent)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list8=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","eventConfigType").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setEventConfigType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","eventId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setEventId(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));      reader.next();    } else {      object.setEventId(java.lang.Long.MIN_VALUE);    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","eventObjType").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setEventObjType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","eventTimeStamp").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setEventTimeStamp(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","eventType").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setEventType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","messageId").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setMessageId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","objectId").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setObjectId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","parameterList").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list8.add(null);        reader.next();      } else {        list8.add(NameValuePair.Factory.parse(reader));      }      boolean loopDone8=false;      while (!loopDone8) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone8=true;        } else {          if (new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","parameterList").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list8.add(null);              reader.next();            } else {              list8.add(NameValuePair.Factory.parse(reader));            }          } else {            loopDone8=true;          }        }      }      object.setParameterList((NameValuePair[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(NameValuePair.class,list8));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public ExifTag(String name,String value){  super(Namespaces.EXIF_NAMESPACE,name,null,value);  this.name=name;  setRequired(false);}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  public static Optional<ReservedList> load(Key<ReservedList> key){  return get(key.getName());}  }
class C{  public static int parseColon(String str){  final int[] multipliers={1,60,3600,86400,31536000};  String[] bits=str.split(":");  int result=0;  for (int i=0; i < bits.length; i++) {    String bit=bits[bits.length - (i + 1)].trim();    if (bit.length() > 0) {      result+=multipliers[i] * Integer.parseInt(bit);    }  }  return (result);}  }
class C{  public TopDocs search(Document d,String indexPath) throws IOException {  if (d.getField("ro-order") != null)   return scoreDocs(d.getValues("ro-order")[0],DirectoryReader.open(FSDirectory.open(new File(indexPath)))); else {    ImageSearcher searcher=new GenericImageSearcher(numReferenceObjectsUsed,featureClass,featureFieldName);    ImageSearchHits hits=searcher.search(d,DirectoryReader.open(FSDirectory.open(new File(indexPath + "-ro"))));    StringBuilder sb=new StringBuilder(numReferenceObjectsUsed * 4);    for (int j=0; j < numReferenceObjectsUsed; j++) {      sb.append(hits.doc(j).getValues("ro-id")[0]);      sb.append(' ');    }    return scoreDocs(sb.toString(),DirectoryReader.open(FSDirectory.open(new File(indexPath))));  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void balance(){  int i=0, n=length;  String[] k=new String[n];  char[] v=new char[n];  Iterator iter=new Iterator();  while (iter.hasMoreElements()) {    v[i]=iter.getValue();    k[i++]=iter.nextElement();  }  init();  insertBalanced(k,v,0,n);}  }
class C{  public RequestHandle put(Context context,String url,RequestParams params,ResponseHandlerInterface responseHandler){  return put(context,url,paramsToEntity(params,responseHandler),null,responseHandler);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case ValidationPackage.VALIDATION_MARKER___ERESOURCE:    return eResource();}return super.eInvoke(operationID,arguments);}  }
class C{  public void run(long jobsToComplete) throws AuditLogEntryException, IOException, StateUpdateException, SQLException {  clearCounters();  long lastPersistedAuditLogId=0;  if (startAfterAuditLogId.isPresent()) {    lastPersistedAuditLogId=startAfterAuditLogId.get();  } else {    LOG.debug("Fetching last persisted audit log ID");    Optional<String> lastPersistedIdString=keyValueStore.get(LAST_PERSISTED_AUDIT_LOG_ID_KEY);    if (!lastPersistedIdString.isPresent()) {      Optional<Long> maxId=auditLogReader.getMaxId();      lastPersistedAuditLogId=maxId.orElse(Long.valueOf(0));      LOG.warn(String.format("Since the last persisted ID was not " + "previously set, using max ID in the audit log: %s",lastPersistedAuditLogId));    } else {      lastPersistedAuditLogId=Long.parseLong(lastPersistedIdString.get());    }  }  LOG.info("Using last persisted ID of " + lastPersistedAuditLogId);  auditLogReader.setReadAfterId(lastPersistedAuditLogId);  for (  PersistedJobInfo jobInfo : jobInfoStore.getRunnableFromDb()) {    LOG.debug(String.format("Restoring %s to (re)run",jobInfo));    ReplicationJob job=restoreReplicationJob(jobInfo);    prettyLogStart(job);    jobRegistry.registerJob(job);    queueJobForExecution(job);  }  TimeZone tz=TimeZone.getTimeZone("UTC");  DateFormat df=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'");  df.setTimeZone(tz);  statsTracker.start();  long updateTimeForLastPersistedId=0;  while (true) {    if (pauseRequested) {      LOG.debug("Pause requested. Sleeping...");      ReplicationUtils.sleep(pollWaitTimeMs);      continue;    }    long completedJobs=counters.getCounter(ReplicationCounters.Type.SUCCESSFUL_TASKS) + counters.getCounter(ReplicationCounters.Type.NOT_COMPLETABLE_TASKS);    if (jobsToComplete > 0 && completedJobs >= jobsToComplete) {      LOG.debug(String.format("Hit the limit for the number of " + "successful jobs (%d) - returning.",jobsToComplete));      return;    }    if (jobExecutor.getNotDoneJobCount() > maxJobsInMemory) {      LOG.debug(String.format("There are too many jobs in memory. " + "Waiting until more complete. (limit: %d)",maxJobsInMemory));      ReplicationUtils.sleep(pollWaitTimeMs);      continue;    }    LOG.debug("Fetching the next entry from the audit log");    Optional<AuditLogEntry> auditLogEntry=auditLogReader.resilientNext();    if (!auditLogEntry.isPresent()) {      LOG.debug(String.format("No more entries from the audit log. " + "Sleeping for %s ms",pollWaitTimeMs));      ReplicationUtils.sleep(pollWaitTimeMs);      continue;    }    AuditLogEntry entry=auditLogEntry.get();    LOG.debug("Got audit log entry: " + entry);    List<ReplicationJob> replicationJobs=jobFactory.createReplicationJobs(auditLogEntry.get(),replicationFilters);    LOG.debug(String.format("Audit log entry id: %s converted to %s",entry.getId(),replicationJobs));    for (    ReplicationJob job : replicationJobs) {      jobRegistry.registerJob(job);    }    if (System.currentTimeMillis() - updateTimeForLastPersistedId > 10000) {      keyValueStore.resilientSet(LAST_PERSISTED_AUDIT_LOG_ID_KEY,Long.toString(entry.getId()));      updateTimeForLastPersistedId=System.currentTimeMillis();    }    for (    ReplicationJob replicationJob : replicationJobs) {      LOG.debug("Scheduling: " + replicationJob);      prettyLogStart(replicationJob);      long tasksSubmittedForExecution=counters.getCounter(ReplicationCounters.Type.EXECUTION_SUBMITTED_TASKS);      if (tasksSubmittedForExecution >= jobsToComplete) {        LOG.warn(String.format("Not submitting %s for execution " + " due to the limit for the number of " + "jobs to execute",replicationJob));        continue;      } else {        queueJobForExecution(replicationJob);      }    }  }}  }
class C{  public Boolean isMemoryReservationLockSupported(){  return memoryReservationLockSupported;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:05:57.040 -0400",hash_original_method="2FE3DF2A181D04B622B627D661DD5F8F",hash_generated_method="F19E4AF2315240F3614DF3012C7D3968") public GraphEnvironment(){  super(null);}  }
class C{  @Override protected void register(ContainerFactory containerFactory){  containerFactory.registerContainer("jonas4x",ContainerType.REMOTE,Jonas4xRemoteContainer.class);  containerFactory.registerContainer("jonas4x",ContainerType.INSTALLED,Jonas4xInstalledLocalContainer.class);  containerFactory.registerContainer("jonas5x",ContainerType.REMOTE,Jonas5xRemoteContainer.class);  containerFactory.registerContainer("jonas5x",ContainerType.INSTALLED,Jonas5xInstalledLocalContainer.class);}  }
class C{  public DTMIterator createDTMIterator(int node){  DTMIterator iter=new org.apache.xpath.axes.OneStepIteratorForward(Axis.SELF);  iter.setRoot(node,this);  return iter;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case OrientedPackage.COMPONENT__INPUT_COMPONET_REFS:    getInputComponetRefs().clear();  return;case OrientedPackage.COMPONENT__OUTPUT_COMPONET_REFS:getOutputComponetRefs().clear();return;case OrientedPackage.COMPONENT__INPUT_PORT_REFS:getInputPortRefs().clear();return;case OrientedPackage.COMPONENT__OUTPUT_PORT_REFS:getOutputPortRefs().clear();return;case OrientedPackage.COMPONENT__ID:setId(ID_EDEFAULT);return;case OrientedPackage.COMPONENT__INPUT_CNT:setInputCnt(INPUT_CNT_EDEFAULT);return;case OrientedPackage.COMPONENT__OUTPUT_CNT:setOutputCnt(OUTPUT_CNT_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int size=s.readInt();  if (size < 0)   throw new java.io.StreamCorruptedException("Illegal mappings count: " + size);  init(capacity(size));  for (int i=0; i < size; i++) {    @SuppressWarnings("unchecked") K key=(K)s.readObject();    @SuppressWarnings("unchecked") V value=(V)s.readObject();    putForCreate(key,value);  }}  }
class C{  private String createWorkflowStepForInvalidateCache(Workflow workflow,StorageSystem vplexSystem,URI vplexVolumeURI,String waitFor,Workflow.Method rollbackMethod){  Volume vplexVolume=getDataObject(Volume.class,vplexVolumeURI,_dbClient);  URI vplexURI=vplexSystem.getId();  Workflow.Method invalidateCacheMethod=createInvalidateCacheMethod(vplexURI,vplexVolumeURI);  workflow.createStep(INVALIDATE_CACHE_STEP,String.format("Invalidate read cache for VPLEX volume %s (%s) on system %s",vplexVolume.getLabel(),vplexVolumeURI,vplexURI),waitFor,vplexURI,vplexSystem.getSystemType(),this.getClass(),invalidateCacheMethod,rollbackMethod,null);  _log.info("Created workflow step to invalidate the read cache for volume {}",vplexVolumeURI);  return INVALIDATE_CACHE_STEP;}  }
class C{  protected long readLong() throws IOException, ReplicatorException, InterruptedException {  assertReadMode();  return dataInput.readLong();}  }
class C{  public void actionPerformed(ActionEvent e){  int currentTab=0;  for (Iterator<String> i=this.tabs.keySet().iterator(); i.hasNext(); ) {    String tabName=i.next();    TabInfo tabInfo=this.tabs.get(tabName);    if (tabInfo.getHeader().getButton() == e.getSource()) {      this.visibleTab=currentTab;      render();      return;    }    currentTab++;  }}  }
class C{  public static void drawPath(@NonNull Canvas canvas,@NonNull Paint paint,@NonNull List<Point> points){  if (points.size() < 2) {    return;  }  PATH.reset();  Point firstPoint=points.get(0);  PATH.moveTo(firstPoint.x,firstPoint.y);  Stream.of(points).skip(1).forEach(null);  PATH.close();  canvas.drawPath(PATH,paint);}  }
class C{  public Shape chartToScreenShape(Shape s){  GeneralPath p=new GeneralPath();  Transform inverse=Transform.makeTranslation(getAbsoluteX(),getAbsoluteY());  if (currentTransform != null) {    inverse.concatenate(currentTransform);  }  p.append(s.getPathIterator(inverse),false);  return p;}  }
class C{  public static boolean removeFromCache(String imageUri,DiskCache diskCache){  File image=diskCache.get(imageUri);  return image != null && image.exists() && image.delete();}  }
class C{  public Boolean isWakeOnLanEnabled(){  return wakeOnLanEnabled;}  }
class C{  public EntityQuery filterByDate(){  this.filterByDate=true;  this.filterByDateMoment=null;  this.filterByFieldNames=null;  return this;}  }
class C{  protected void stopHarvestTiming(int candidateCount){  this.lastHarvestingTime=this.getHarvestDuration();  this.lastStartHarvestingTime=-1;  this.totalCandidateCount+=candidateCount;}  }
class C{  public double[][] dataProjections(V p){  double[] centered=minusEquals(p.toArray(),centroid);  double[][] sum=new double[p.getDimensionality()][strongEigenvectors[0].length];  for (int i=0; i < strongEigenvectors[0].length; i++) {    double[] v_i=getCol(strongEigenvectors,i);    timesEquals(v_i,transposeTimes(centered,v_i));    setCol(sum,i,v_i);  }  return sum;}  }
class C{  private static void ReleaseBooleanArrayElements(JNIEnvironment env,int arrayJREF,Address copyBufferAddress,int releaseMode){  if (traceJNI)   VM.sysWrite("JNI called: ReleaseBooleanArrayElements  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    boolean[] sourceArray=(boolean[])env.getJNIRef(arrayJREF);    if (Magic.objectAsAddress(sourceArray).NE(copyBufferAddress)) {      int size=sourceArray.length;      if ((releaseMode == 0 || releaseMode == 1) && size != 0) {        for (int i=0; i < size; i+=BYTES_IN_INT) {          Address addr=copyBufferAddress.plus(i);          int data=addr.loadInt();          if (VM.LittleEndian) {            if (i < size)             sourceArray[i]=((data) & 0x000000ff) != 0;            if (i + 1 < size)             sourceArray[i + 1]=((data >>> BITS_IN_BYTE) & 0x000000ff) != 0;            if (i + 2 < size)             sourceArray[i + 2]=((data >>> (2 * BITS_IN_BYTE)) & 0x000000ff) != 0;            if (i + 3 < size)             sourceArray[i + 3]=((data >>> (3 * BITS_IN_BYTE)) & 0x000000ff) != 0;          } else {            if (i < size)             sourceArray[i]=((data >>> (3 * BITS_IN_BYTE)) & 0x000000ff) != 0;            if (i + 1 < size)             sourceArray[i + 1]=((data >>> (2 * BITS_IN_BYTE)) & 0x000000ff) != 0;            if (i + 2 < size)             sourceArray[i + 2]=((data >>> BITS_IN_BYTE) & 0x000000ff) != 0;            if (i + 3 < size)             sourceArray[i + 3]=((data) & 0x000000ff) != 0;          }        }      }      if (releaseMode == 0 || releaseMode == 2) {        sysCall.sysFree(copyBufferAddress);      }    }  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  protected boolean isInfoEnabled(){  return trace.isInfoEnabled();}  }
class C{  public int equivHashCode(){  return (getUnit().hashCode() * 17) + (getValue().equivHashCode() * 101);}  }
class C{  public void init(int WindowNo,FormFrame frame){  log.info("");  m_WindowNo=WindowNo;  m_frame=frame;  try {    jbInit();    dynInit();    frame.getContentPane().add(centerPanel,BorderLayout.CENTER);    frame.getContentPane().add(southPanel,BorderLayout.SOUTH);  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }}  }
class C{  private void simpleSyntaxValidation(String value){  Map<String,Integer> characterCounts=new HashMap<>();  characterCounts.put(START_DELIMITER,0);  characterCounts.put(START_PAREN,0);  for (  char theChar : value.toCharArray()) {    if (START_DELIMITER.indexOf(theChar) != -1) {      Integer count=characterCounts.get(START_DELIMITER);      characterCounts.put(START_DELIMITER,count + 1);    } else     if (END_DELIMITER.indexOf(theChar) != -1) {      Integer count=characterCounts.get(START_DELIMITER);      characterCounts.put(START_DELIMITER,count - 1);    } else     if (START_PAREN.indexOf(theChar) != -1) {      Integer count=characterCounts.get(START_PAREN);      characterCounts.put(START_PAREN,count + 1);    } else     if (END_PAREN.indexOf(theChar) != -1) {      Integer count=characterCounts.get(START_PAREN);      characterCounts.put(START_PAREN,count - 1);    }  }  for (  String character : characterCounts.keySet()) {    Integer count=characterCounts.get(character);    if (count != 0) {      String invalid="";      if (START_DELIMITER.contains(character)) {        invalid=END_DELIMITER;      } else       if (START_PAREN.contains(character)) {        invalid=END_PAREN;      }      String reason="";      if (count > 0) {        reason=String.format("Missing a '%s'",invalid);      } else       if (count < 0) {        reason=String.format("Extra '%s' characters",invalid);      }      throw CustomConfigControllerException.exceptions.invalidSyntax(value,reason);    }  }}  }
class C{  public SequenceForMySQL(Session s,String sSeqTable){  sent1=new StaticSentence(s,"UPDATE " + sSeqTable + " SET ID = LAST_INSERT_ID(ID + 1)");  sent2=new StaticSentence(s,"SELECT LAST_INSERT_ID()",null,SerializerReadInteger.INSTANCE);}  }
class C{  public AbstractLongList elements(long[] elements){  this.elements=elements;  this.size=elements.length;  return this;}  }
class C{  public static int nextPoisson(double xm){  double em;  double t, y;  if (xm < 12.0) {    if (xm != oldm) {      oldm=xm;      g=Math.exp(-xm);    }    em=-1.0;    t=1.0;    do {      ++em;      t*=MathUtils.nextDouble();    } while (t > g);  } else {    if (xm != oldm) {      oldm=xm;      sq=Math.sqrt(2.0 * xm);      alxm=Math.log(xm);      g=xm * alxm - gammln(xm + 1.0);    }    do {      do {        y=Math.tan(Math.PI * MathUtils.nextDouble());        em=sq * y + xm;      } while (em < 0.0);      em=Math.floor(em);      t=0.9 * (1.0 + y * y) * Math.exp(em * alxm - gammln(em + 1.0) - g);    } while (MathUtils.nextDouble() > t);  }  return (int)em;}  }
class C{  private void snoopDHCPClientName(Ethernet eth,Device srcDevice){  if (!(eth.getPayload() instanceof IPv4))   return;  IPv4 ipv4=(IPv4)eth.getPayload();  if (!(ipv4.getPayload() instanceof UDP))   return;  UDP udp=(UDP)ipv4.getPayload();  if (!(udp.getPayload() instanceof DHCP))   return;  DHCP dhcp=(DHCP)udp.getPayload();  byte opcode=dhcp.getOpCode();  if (opcode == DHCP.OPCODE_REQUEST) {    DHCPOption dhcpOption=dhcp.getOption(DHCPOptionCode.OptionCode_Hostname);    if (dhcpOption != null) {      cntDhcpClientNameSnooped.updateCounterNoFlush();      srcDevice.dhcpClientName=new String(dhcpOption.getData());    }  }}  }
class C{  @Override public synchronized void reset() throws IOException {  in.reset();}  }
class C{  public Property monthOfYear(){  return new Property(this,getChronology().monthOfYear());}  }
class C{  public ReilInterpreter(final Endianness endianness,final ICpuPolicy cpuPolicy,final IInterpreterPolicy interpreterPolicy){  Preconditions.checkNotNull(endianness,"Error: Argument endianness can't be null");  this.cpuPolicy=Preconditions.checkNotNull(cpuPolicy,"Error: Argument cpuPolicy can't be null");  this.interpreterPolicy=Preconditions.checkNotNull(interpreterPolicy,"Error: Argument interpreterPolicy can't be null");  this.memory=new ReilMemory(endianness);}  }
class C{  public static void initialize(final RPServerManager rpMan){  StendhalRPAction.rpman=rpMan;}  }
class C{  public void add(Double value){  if (value == null) {    addNull();  } else {    _add(numberNode(value.doubleValue()));  }}  }
class C{  public SendableDocumentMessage.SendableDocumentMessageBuilder replyTo(Message replyTo){  this.replyTo=replyTo != null ? replyTo.getMessageId() : 0;  return this;}  }
class C{  protected ServiceCoded removeVolumesFromCGInternal(URI vplexURI,URI cgURI,List<URI> vplexVolumeURIs){  try {    if (vplexVolumeURIs.isEmpty()) {      log.info("Empty volume list; no volumes to remove from CG %s",cgURI.toString());      return null;    }    StorageSystem vplexSystem=getDataObject(StorageSystem.class,vplexURI,dbClient);    VPlexApiClient client=getVPlexAPIClient(vplexApiFactory,vplexSystem,dbClient);    log.info("Got VPLEX API client.");    Map<String,List<String>> cgToVolumesMap=new HashMap<String,List<String>>();    List<Volume> vplexVolumes=new ArrayList<Volume>();    for (    URI vplexVolumeURI : vplexVolumeURIs) {      Volume vplexVolume=getDataObject(Volume.class,vplexVolumeURI,dbClient);      if (vplexVolume == null || vplexVolume.getInactive()) {        log.error(String.format("Skipping null or inactive vplex volume %s",vplexVolumeURI.toString()));        continue;      }      vplexVolume.setConsistencyGroup(NullColumnValueGetter.getNullURI());      vplexVolumes.add(vplexVolume);      String cgName=getVplexCgName(vplexVolume,cgURI);      List<String> vplexVolumeNames=cgToVolumesMap.get(cgName);      if (vplexVolumeNames == null) {        vplexVolumeNames=new ArrayList<String>();        cgToVolumesMap.put(cgName,vplexVolumeNames);      }      vplexVolumeNames.add(vplexVolume.getDeviceLabel());      log.info(String.format("Adding VPLEX volume [%s](%s) with device label [%s] to be removed from VPLEX CG [%s]",vplexVolume.getLabel(),vplexVolume.getId(),vplexVolume.getDeviceLabel(),cgName));    }    for (    Map.Entry<String,List<String>> entry : cgToVolumesMap.entrySet()) {      String cgName=entry.getKey();      List<String> vplexVolumeNames=entry.getValue();      log.info(String.format("Removing the following VPLEX volumes from VPLEX CG [%s]: %s",cgName,Joiner.on(", ").join(vplexVolumeNames)));      client.removeVolumesFromConsistencyGroup(vplexVolumeNames,cgName,false);    }    log.info("Removed volumes from consistency group.");    dbClient.updateObject(vplexVolumes);    return null;  } catch (  VPlexApiException vae) {    log.error("Exception removing volumes from consistency group: " + vae.getMessage(),vae);    return vae;  }catch (  Exception ex) {    log.error("Exception removing volumes from consistency group: " + ex.getMessage(),ex);    String opName=ResourceOperationTypeEnum.DELETE_CG_VOLUME.getName();    ServiceError serviceError=VPlexApiException.errors.removeVolumesFromCGFailed(opName,ex);    return serviceError;  }}  }
class C{  protected void onStop(){  super.onStop();  try {    if (client != null) {      client.stop();      Log.i("Jetty","Stopped httpclient");    }  } catch (  Exception e) {    Log.e("Jetty","Error stopping httpclient ",e);  } finally {    client=null;    fileInProgress=null;  }}  }
class C{  public int length(){  return this.map.size();}  }
class C{  public void addPropertyChangeListener(String propertyName,PropertyChangeListener in_pcl){  beanContextChildSupport.addPropertyChangeListener(propertyName,in_pcl);}  }
class C{  public void dispose(){  mRunButton.setSelected(false);  super.dispose();}  }
class C{  private void handleError(@NotNull Throwable e){  String errorMessage=(e.getMessage() != null && !e.getMessage().isEmpty()) ? e.getMessage() : constant.initFailed();  console.printError(errorMessage);  notificationManager.showError(errorMessage);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public boolean isSensorMessage(){  return getElement(0) == 0x61 && getElement(1) >= 0x30 && getElement(2) >= 0x41 && getElement(2) <= 0x6F && getNumDataElements() == 3;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MProjectLine[");  sb.append(get_ID()).append("-").append(getLine()).append(",C_Project_ID=").append(getC_Project_ID()).append(",C_ProjectPhase_ID=").append(getC_ProjectPhase_ID()).append(",C_ProjectTask_ID=").append(getC_ProjectTask_ID()).append(",C_ProjectIssue_ID=").append(getC_ProjectIssue_ID()).append(", M_Product_ID=").append(getM_Product_ID()).append(", PlannedQty=").append(getPlannedQty()).append("]");  return sb.toString();}  }
class C{  private void addEndToken(int tokenType){  addToken(zzMarkedPos,zzMarkedPos,tokenType);}  }
class C{  public StrengthFitnessEvaluator(int k){  super();  this.k=k;  comparator=new ParetoDominanceComparator();}  }
class C{  public boolean bool(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return m_right.bool(xctxt);}  }
class C{  public void storeLocal(final int local){  storeInsn(getLocalType(local),local);}  }
class C{  public boolean letsRedstoneGoOut(byte aSide,int aCoverID,int aCoverVariable,ICoverable aTileEntity){  return false;}  }
class C{  @Override public int available() throws IOException {  if (c.checkEOF() || (r.isAppDataValid() == false)) {    return 0;  }  return r.available();}  }
class C{  @Override public void checkServerTrusted(X509Certificate[] chain,String authType) throws CertificateException {}  }
class C{  @Override public void shutdown(){  super.shutdown();  disconnect();}  }
class C{  protected boolean isIncluded(EStructuralFeature feature){  return dataClass.isAssignableFrom(feature.getEType().getInstanceClass());}  }
class C{  public void notifyInSeconds(final int sec,final TurnListener turnListener){  notifyInTurns(SingletonRepository.getRPWorld().getTurnsInSeconds(sec),turnListener);}  }
class C{  public boolean hasCursor(){  return isServerFlagSet(MySQLConstants.SERVER_STATUS_CURSOR_EXISTS);}  }
class C{  protected GenericCDATASection(){}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return VALUE;case 2:  return VERSION;default :return null;}}  }
class C{  protected AbstractCatchBlockImpl(){  super();}  }
class C{  protected void onDeviceConnected(){  mField.setEnabled(true);  mSendButton.setEnabled(true);}  }
class C{  private Item newString(final String value){  key2.set(STR,value,null,null);  Item result=get(key2);  if (result == null) {    pool.put12(STR,newUTF8(value));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  public final void update(byte[] data,int off,int len) throws SignatureException {  if (state == SIGN || state == VERIFY) {    if (data == null) {      throw new IllegalArgumentException("data is null");    }    if (off < 0 || len < 0) {      throw new IllegalArgumentException("off or len is less than 0");    }    if (data.length - off < len) {      throw new IllegalArgumentException("data too small for specified offset and length");    }    engineUpdate(data,off,len);  } else {    throw new SignatureException("object not initialized for " + "signature or verification");  }}  }
class C{  @Override public boolean isActive(){  return true;}  }
class C{  public char next() throws JSONException {  int c;  if (this.usePrevious) {    this.usePrevious=false;    c=this.previous;  } else {    try {      c=this.reader.read();    } catch (    IOException exception) {      throw new JSONException(exception);    }    if (c <= 0) {      this.eof=true;      c=0;    }  }  this.index+=1;  if (this.previous == '\r') {    this.line+=1;    this.character=c == '\n' ? 0 : 1;  } else   if (c == '\n') {    this.line+=1;    this.character=0;  } else {    this.character+=1;  }  this.previous=(char)c;  return this.previous;}  }
class C{  public static boolean intersect(long x,long y){  return (x & y) != 0L;}  }
class C{  public boolean find(){  return matcher.find();}  }
class C{  public void debug(Throwable throwable,String msg){  innerLog(Level.DEBUG,throwable,msg,UNKNOWN_ARG,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
class C{  public void reset(){  list.iterReverse();  currentIndex=list.size() - 1;}  }
class C{  public FixedWidthTextTableReader(String location) throws DataIOException {  this(FixedWidthTextTableSchema.load(location));}  }
class C{  @Override public boolean supportsNamedParameters(){  debugCodeCall("supportsNamedParameters");  return false;}  }
class C{  private Builder(org.apache.nutch.storage.ProtocolStatus.Builder other){  super(other);}  }
class C{  public PasswordManagerCtrl(){  this.setupCommandLine();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:13.024 -0500",hash_original_method="69EAD59EF006B3A496038767E7251C79",hash_generated_method="E8BF02F1B64289F3B2238534086D0E8C") @Override protected void shutdownInput() throws IOException {  shutdownInput=true;  try {    Libcore.os.shutdown(fd,SHUT_RD);  } catch (  ErrnoException errnoException) {    throw errnoException.rethrowAsSocketException();  }}  }
class C{  public JapaneseBaseFormFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  private PhantomReferenceElement(E ref,ReferenceQueue<? super E> refQ){  super(ref,refQ);  hashCode=ref != null ? ref.hashCode() : 0;}  }
class C{  public ColorList adjustSaturation(float step){  for (  TColor c : colors) {    c.saturate(step);  }  return this;}  }
class C{  @Override public void logError(CacheErrorCategory category,Class<?> clazz,String message,@Nullable Throwable throwable){}  }
class C{  public void validateAttributes(){  if ((this.totalNumBuckets <= 0)) {    throw new IllegalStateException(LocalizedStrings.PartitionAttributesImpl_TOTALNUMBICKETS_0_IS_AN_ILLEGAL_VALUE_PLEASE_CHOOSE_A_VALUE_GREATER_THAN_0.toLocalizedString(Integer.valueOf(this.totalNumBuckets)));  }  if ((this.redundancy < 0) || (this.redundancy >= 4)) {    throw new IllegalStateException(LocalizedStrings.PartitionAttributesImpl_REDUNDANTCOPIES_0_IS_AN_ILLEGAL_VALUE_PLEASE_CHOOSE_A_VALUE_BETWEEN_0_AND_3.toLocalizedString(Integer.valueOf(this.redundancy)));  }  for (Iterator it=this.getLocalProperties().keySet().iterator(); it.hasNext(); ) {    String propName=(String)it.next();    if (!PartitionAttributesFactory.LOCAL_MAX_MEMORY_PROPERTY.equals(propName)) {      throw new IllegalStateException(LocalizedStrings.PartitionAttributesImpl_UNKNOWN_LOCAL_PROPERTY_0.toLocalizedString(propName));    }  }  for (Iterator it=this.getGlobalProperties().keySet().iterator(); it.hasNext(); ) {    String propName=(String)it.next();    if (!PartitionAttributesFactory.GLOBAL_MAX_BUCKETS_PROPERTY.equals(propName) && !PartitionAttributesFactory.GLOBAL_MAX_MEMORY_PROPERTY.equals(propName)) {      throw new IllegalStateException(LocalizedStrings.PartitionAttributesImpl_UNKNOWN_GLOBAL_PROPERTY_0.toLocalizedString(propName));    }  }  if (this.recoveryDelay < -1) {    throw new IllegalStateException("RecoveryDelay " + this.recoveryDelay + " is an illegal value, please choose a value that is greater than or equal to -1");  }  if (this.startupRecoveryDelay < -1) {    throw new IllegalStateException("StartupRecoveryDelay " + this.startupRecoveryDelay + " is an illegal value, please choose a value that is greater than or equal to -1");  }  if (this.fixedPAttrs != null) {    List<FixedPartitionAttributesImpl> duplicateFPAattrsList=new ArrayList<FixedPartitionAttributesImpl>();    Set<FixedPartitionAttributes> fpAttrsSet=new HashSet<FixedPartitionAttributes>();    for (    FixedPartitionAttributesImpl fpa : this.fixedPAttrs) {      if (fpa == null || fpa.getPartitionName() == null) {        throw new IllegalStateException(LocalizedStrings.PartitionAttributesImpl_FIXED_PARTITION_NAME_CANNOT_BE_NULL.toString());      }      if (fpAttrsSet.contains(fpa)) {        duplicateFPAattrsList.add(fpa);      } else {        fpAttrsSet.add(fpa);      }    }    if (duplicateFPAattrsList.size() != 0) {      throw new IllegalStateException(LocalizedStrings.PartitionAttributesImpl_PARTITION_NAME_0_CAN_BE_ADDED_ONLY_ONCE_IN_FIXED_PARTITION_ATTRIBUTES.toString(duplicateFPAattrsList.toString()));    }  }}  }
class C{  public MySqlSelectIntoStatement parseSelectInto(){  MySqlSelectIntoParser parse=new MySqlSelectIntoParser(this.exprParser);  return parse.parseSelectInto();}  }
class C{  private void configureValidators(ValidatorLogger logger,AbstractXtremIOValidator... validators){  for (  AbstractXtremIOValidator validator : validators) {    validator.setFactory(this);    validator.setLogger(logger);  }}  }
class C{  public void defineToFile(String key,File value){  define(key,value.getAbsolutePath());}  }
class C{  private boolean findAndAddClosestValidLeafNodes(Node start,boolean checkStart,boolean backward,AnchorElement baseAnchor){  Node node=checkStart ? start : (backward ? start.getPreviousSibling() : start.getNextSibling());  if (node == null) {    node=start.getParentNode();    if (sInvalidParentWrapper == null) {      sInvalidParentWrapper=RegExp.compile("(BODY)|(HTML)");    }    if (sInvalidParentWrapper.test(node.getNodeName()))     return false;    return findAndAddClosestValidLeafNodes(node,false,backward,baseAnchor);  }  checkStart=false;switch (node.getNodeType()) {case Node.TEXT_NODE:    String text=node.getNodeValue();  if (text.isEmpty() || StringUtil.countWords(text) == 0)   break;boolean added=addNonLinkTextIfValid(node.getNodeValue());if (backward || !added) return false;break;case Node.ELEMENT_NODE:Element e=Element.as(node);if (e.hasTagName("A")) {if (backward) return false;mNumForwardLinksProcessed++;if (!addLinkIfValid(AnchorElement.as(e),baseAnchor)) return false;break;}default :if (!node.hasChildNodes()) break;checkStart=true;if (backward) {node=node.getLastChild();} else {node=node.getFirstChild();}break;}return findAndAddClosestValidLeafNodes(node,checkStart,backward,baseAnchor);}  }
class C{  @Override public int helo(String hostname) throws IOException {  return sendCommand("LHLO",hostname);}  }
class C{  public RFF_RBF(int featurSize,double sigma,int dim,Random rand,boolean inMemory){  this(sigma,dim,inMemory);  if (featurSize <= 0)   throw new IllegalArgumentException("The number of numeric features must be positive, not " + featurSize);  if (sigma <= 0 || Double.isInfinite(sigma) || Double.isNaN(sigma))   throw new IllegalArgumentException("The sigma parameter must be positive, not " + sigma);  if (dim <= 1)   throw new IllegalArgumentException("The target dimension must be positive, not " + dim);  transform=new RandomMatrixRFF_RBF(Math.sqrt(0.5 / (sigma * sigma)),featurSize,dim,rand.nextLong());  offsets=new RandomVectorRFF_RBF(dim,rand.nextLong());  if (inMemory) {    transform=transform.add(0.0);    offsets=new DenseVector(offsets);  }}  }
class C{  public int size(){  return data.length;}  }
class C{  public InputBuilder<T> emitAll(Collection<T> records){  input.addAll(records);  return this;}  }
class C{  public JHyperlink(String text){  this();  setText(text);}  }
class C{  public void endElement(String name) throws org.xml.sax.SAXException {  endElement(null,null,name);}  }
class C{  public void trace() throws IOException {  print("trace",null);}  }
class C{  public void nextPage(){  skipResults+=pageSize;  pageNumber+=1;}  }
class C{  public void ready(String message){  setMessage(message);  setProgress(100);  updateStatus(Status.ready.name());}  }
class C{  public boolean saveLogToLocal(String path){  String content=PcStringUtils.renderJson(new ParallelTaskBean(this));  File file=new File(path);  boolean success=false;  try {    FileUtils.writeStringToFile(file,content);    success=true;  } catch (  IOException e) {    logger.error("error writing parallel task to path {} details ",path,e);  }  logger.info("Save parallel task {} log  to disk at path {}. Success?: {}",this.taskId,path,success);  return success;}  }
class C{  private void populateCache() throws KettleException {  String carbonStorePath=CarbonProperties.getInstance().getProperty(CarbonCommonConstants.STORE_LOCATION_HDFS);  String[] dimColumnNames=columnsInfo.getDimColNames();  String[] dimColumnIds=columnsInfo.getDimensionColumnIds();  String databaseName=columnsInfo.getSchemaName();  String tableName=columnsInfo.getTableName();  CarbonTable carbonTable=CarbonMetadata.getInstance().getCarbonTable(databaseName + CarbonCommonConstants.UNDERSCORE + tableName);  CarbonTableIdentifier carbonTableIdentifier=carbonTable.getCarbonTableIdentifier();  CacheProvider cacheProvider=CacheProvider.getInstance();  Cache reverseDictionaryCache=cacheProvider.createCache(CacheType.REVERSE_DICTIONARY,carbonStorePath);  List<String> dictionaryKeys=new ArrayList<>(dimColumnNames.length);  List<DictionaryColumnUniqueIdentifier> dictionaryColumnUniqueIdentifiers=new ArrayList<>(dimColumnNames.length);  ColumnSchemaDetailsWrapper columnSchemaDetailsWrapper=columnsInfo.getColumnSchemaDetailsWrapper();  for (int i=0; i < dimColumnNames.length; i++) {    String dimColName=dimColumnNames[i].substring(tableName.length() + 1);    ColumnSchemaDetails details=columnSchemaDetailsWrapper.get(dimColumnIds[i]);    if (details.isDirectDictionary()) {      continue;    }    GenericDataType complexType=columnsInfo.getComplexTypesMap().get(dimColName);    if (complexType != null) {      List<GenericDataType> primitiveChild=new ArrayList<GenericDataType>();      complexType.getAllPrimitiveChildren(primitiveChild);      for (      GenericDataType eachPrimitive : primitiveChild) {        details=columnSchemaDetailsWrapper.get(eachPrimitive.getColumnId());        if (details.isDirectDictionary()) {          continue;        }        ColumnIdentifier columnIdentifier=new ColumnIdentifier(eachPrimitive.getColumnId(),columnsInfo.getColumnProperties(eachPrimitive.getName()),details.getColumnType());        String dimColumnName=tableName + CarbonCommonConstants.UNDERSCORE + eachPrimitive.getName();        DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier=new DictionaryColumnUniqueIdentifier(carbonTableIdentifier,columnIdentifier);        dictionaryColumnUniqueIdentifiers.add(dictionaryColumnUniqueIdentifier);        dictionaryKeys.add(dimColumnName);      }    } else {      ColumnIdentifier columnIdentifier=new ColumnIdentifier(dimColumnIds[i],columnsInfo.getColumnProperties(dimColName),details.getColumnType());      DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier=new DictionaryColumnUniqueIdentifier(carbonTableIdentifier,columnIdentifier);      dictionaryColumnUniqueIdentifiers.add(dictionaryColumnUniqueIdentifier);      dictionaryKeys.add(dimColumnNames[i]);    }  }  initDictionaryCacheInfo(dictionaryKeys,dictionaryColumnUniqueIdentifiers,reverseDictionaryCache,carbonStorePath);}  }
class C{  public long rsslim(){  return Long.parseLong(fields[24]);}  }
class C{  public boolean isSourceFileKnown(){  return !UNKNOWN_SOURCE_FILE.equals(sourceFile);}  }
class C{  public AttachmentEntry uploadAttachment(File file,BasePageEntry<?> parentPage,String title) throws IOException, ServiceException {  return uploadAttachment(file,parentPage.getSelfLink().getHref(),title,"");}  }
class C{  public static boolean isSyntheticInit(JCTree stat){  if (stat.hasTag(EXEC)) {    JCExpressionStatement exec=(JCExpressionStatement)stat;    if (exec.expr.hasTag(ASSIGN)) {      JCAssign assign=(JCAssign)exec.expr;      if (assign.lhs.hasTag(SELECT)) {        JCFieldAccess select=(JCFieldAccess)assign.lhs;        if (select.sym != null && (select.sym.flags() & SYNTHETIC) != 0) {          Name selected=name(select.selected);          if (selected != null && selected == selected.table.names._this)           return true;        }      }    }  }  return false;}  }
class C{  @Override public void minus(int value){  this.value-=value;}  }
class C{  public void write(SWFActions swfactions) throws IOException {  ActionParser parser=new ActionParser(swfactions);  swfactions.start(conditions);  parser.parse(bytes);  swfactions.done();}  }
class C{  public void initializeSections(ChunkSection... initSections){  if (isLoaded()) {    GlowServer.logger.log(Level.SEVERE,"Tried to initialize already loaded chunk (" + x + ","+ z+ ")",new Throwable());    return;  }  sections=new ChunkSection[DEPTH / SEC_DEPTH];  System.arraycopy(initSections,0,sections,0,Math.min(sections.length,initSections.length));  biomes=new byte[WIDTH * HEIGHT];  heightMap=new byte[WIDTH * HEIGHT];  for (int i=0; i < sections.length; ++i) {    if (sections[i] == null)     continue;    int by=16 * i;    for (int cx=0; cx < WIDTH; ++cx) {      for (int cz=0; cz < HEIGHT; ++cz) {        for (int cy=by; cy < by + 16; ++cy) {          createEntity(cx,cy,cz,getType(cx,cz,cy));        }      }    }  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof DialPointer.Pointer)) {    return false;  }  DialPointer.Pointer that=(DialPointer.Pointer)obj;  if (this.widthRadius != that.widthRadius) {    return false;  }  if (!PaintUtilities.equal(this.fillPaint,that.fillPaint)) {    return false;  }  if (!PaintUtilities.equal(this.outlinePaint,that.outlinePaint)) {    return false;  }  return super.equals(obj);}  }
class C{  protected void createUserDictSettings(PreferenceGroup userDictGroup){  final Activity activity=getActivity();  userDictGroup.removeAll();  final TreeSet<String> localeList=UserDictionaryList.getUserDictionaryLocalesSet(activity);  if (localeList.isEmpty()) {    userDictGroup.addPreference(createUserDictionaryPreference(null,activity));  } else {    for (    String locale : localeList) {      userDictGroup.addPreference(createUserDictionaryPreference(locale,activity));    }  }}  }
class C{  private Ref functionArgDeclaration() throws PageException {  Ref ref=impOp();  if (cfml.forwardIfCurrent(':') || cfml.forwardIfCurrent('=')) {    cfml.removeSpace();    ref=new LFunctionValue(ref,assignOp());  }  return ref;}  }
class C{  private void applyFilter(){  filteredModelMap.clear();  for (  Entry<String,List<FunctionDescription>> entry : modelMap.entrySet()) {    List<FunctionDescription> newList=new LinkedList<>();    for (    FunctionDescription function : entry.getValue()) {      newList.add(function);    }    filteredModelMap.put(entry.getKey(),newList);  }  if (!getFilterNameString().isEmpty()) {    for (    Entry<String,List<FunctionDescription>> entry : filteredModelMap.entrySet()) {      if (entry.getKey().toLowerCase(Locale.ENGLISH).contains(filterNameStringLowerCase)) {        continue;      }      for (int i=entry.getValue().size() - 1; i >= 0; i--) {        FunctionDescription function=entry.getValue().get(i);        if (!function.getDisplayName().toLowerCase(Locale.ENGLISH).contains(filterNameStringLowerCase) && !function.getHelpTextName().toLowerCase(Locale.ENGLISH).contains(filterNameStringLowerCase) && !function.getFunctionNameWithParameters().toLowerCase(Locale.ENGLISH).contains(filterNameStringLowerCase)&& !function.getDescription().toLowerCase(Locale.ENGLISH).contains(filterNameStringLowerCase)) {          filteredModelMap.get(entry.getKey()).remove(i);        }      }    }    for (    String key : modelMap.keySet()) {      List<FunctionDescription> list=filteredModelMap.get(key);      if (list.isEmpty()) {        filteredModelMap.remove(key);      }    }  }}  }
class C{  private void fillBeforeAndAfter(View sel,int position){  final int dividerWidth=mDividerWidth;  if (!mStackFromRight) {    fillLeft(position - 1,sel.getLeft() - dividerWidth);    adjustViewsLeftOrRight();    fillRight(position + 1,sel.getRight() + dividerWidth);  } else {    fillRight(position + 1,sel.getRight() + dividerWidth);    adjustViewsLeftOrRight();    fillLeft(position - 1,sel.getLeft() - dividerWidth);  }}  }
class C{  @SuppressWarnings("fallthrough") protected void decodeAtom(PushbackInputStream inStream,OutputStream outStream,int rem) throws java.io.IOException {  int i;  byte a=-1, b=-1, c=-1, d=-1;  if (rem < 2) {    throw new CEFormatException("BASE64Decoder: Not enough bytes for an atom.");  }  do {    i=inStream.read();    if (i == -1) {      throw new CEStreamExhausted();    }  } while (i == '\n' || i == '\r');  decode_buffer[0]=(byte)i;  i=readFully(inStream,decode_buffer,1,rem - 1);  if (i == -1) {    throw new CEStreamExhausted();  }  if (rem > 3 && decode_buffer[3] == '=') {    rem=3;  }  if (rem > 2 && decode_buffer[2] == '=') {    rem=2;  }switch (rem) {case 4:    d=pem_convert_array[decode_buffer[3] & 0xff];case 3:  c=pem_convert_array[decode_buffer[2] & 0xff];case 2:b=pem_convert_array[decode_buffer[1] & 0xff];a=pem_convert_array[decode_buffer[0] & 0xff];break;}switch (rem) {case 2:outStream.write((byte)(((a << 2) & 0xfc) | ((b >>> 4) & 3)));break;case 3:outStream.write((byte)(((a << 2) & 0xfc) | ((b >>> 4) & 3)));outStream.write((byte)(((b << 4) & 0xf0) | ((c >>> 2) & 0xf)));break;case 4:outStream.write((byte)(((a << 2) & 0xfc) | ((b >>> 4) & 3)));outStream.write((byte)(((b << 4) & 0xf0) | ((c >>> 2) & 0xf)));outStream.write((byte)(((c << 6) & 0xc0) | (d & 0x3f)));break;}return;}  }
class C{  public void mousePressed(MouseEvent e){  events.clear();  if (mapDragOperationFromModifiers(e) != DnDConstants.ACTION_NONE) {    try {      motionThreshold=DragSource.getDragThreshold();    } catch (    Exception exc) {      motionThreshold=5;    }    appendEvent(e);  }}  }
class C{  private void testRow(){  int testRow=((NumericTable)table.getData()).getCurrentRow();  if (testRow >= ((NumericTable)table.getData()).getRowCount()) {    testRow=0;  }  table.updateRowSelection();  for (int j=0; j < inputNeurons.size(); j++) {    inputNeurons.get(j).forceSetActivation(((NumericTable)table.getData()).getLogicalValueAt(testRow,j));  }  if (network != null) {    network.update();    network.fireNeuronsUpdated(inputNeurons);  } else {    inputNeurons.get(0).getNetwork().update();    inputNeurons.get(0).getNetwork().fireNeuronsUpdated(inputNeurons);  }  if (iterationMode) {    advanceRow();  }}  }
class C{  private Document createDocument(String path){  return createDocument(path,null,null);}  }
class C{  boolean isExport(){  return this.export;}  }
class C{  @DELETE @Produces(MediaType.APPLICATION_JSON) @Path("/{dashboardId}") @Description("Deletes the dashboard having the given ID.") public Response deleteDashboard(@Context HttpServletRequest req,@PathParam("dashboardId") BigInteger dashboardId){  if (dashboardId == null || dashboardId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Dashboard Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  Dashboard dashboard=dService.findDashboardByPrimaryKey(dashboardId);  if (dashboard != null) {    validateResourceAuthorization(req,dashboard.getOwner(),getRemoteUser(req));    dService.deleteDashboard(dashboard);    return Response.status(Status.OK).build();  }  throw new WebApplicationException(Response.Status.NOT_FOUND.getReasonPhrase(),Response.Status.NOT_FOUND);}  }
class C{  public IndexPartitionCause(){}  }
class C{  public DImportKeyPairType(JFrame parent){  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  setTitle(res.getString("DImportKeyPairType.Title"));  initComponents();}  }
class C{  @Beta public static <K,V>ImmutableSortedMap<K,V> copyOf(Iterable<? extends Entry<? extends K,? extends V>> entries){  @SuppressWarnings("unchecked") Ordering<K> naturalOrder=(Ordering<K>)NATURAL_ORDER;  return copyOf(entries,naturalOrder);}  }
class C{  public static boolean assertEquals(final long a,final long b){  if (a == b) {    return true;  }  throw new ExamException(a + " != " + b);}  }
class C{  public Channel sessionConnectGenerateChannel(Session session) throws JSchException {  session.connect(sshMeta.getSshConnectionTimeoutMillis());  ChannelExec channel=(ChannelExec)session.openChannel("exec");  channel.setCommand(sshMeta.getCommandLine());  if (sshMeta.isRunAsSuperUser()) {    try {      channel.setInputStream(null,true);      OutputStream out=channel.getOutputStream();      channel.setOutputStream(System.out,true);      channel.setExtOutputStream(System.err,true);      channel.setPty(true);      channel.connect();      out.write((sshMeta.getPassword() + "\n").getBytes());      out.flush();    } catch (    IOException e) {      logger.error("error in sessionConnectGenerateChannel for super user",e);    }  } else {    channel.setInputStream(null);    channel.connect();  }  return channel;}  }
class C{  public CButton(Icon icon){  this(null,icon);}  }
class C{  public static String createQueryString(Map<String,?> options) throws URISyntaxException {  try {    if (options.size() > 0) {      StringBuffer rc=new StringBuffer();      boolean first=true;      for (      Entry<String,?> entry : options.entrySet()) {        if (first) {          first=false;        } else {          rc.append("&");        }        rc.append(URLEncoder.encode(entry.getKey(),"UTF-8"));        rc.append("=");        rc.append(URLEncoder.encode((String)entry.getValue(),"UTF-8"));      }      return rc.toString();    } else {      return "";    }  } catch (  UnsupportedEncodingException e) {    throw (URISyntaxException)new URISyntaxException(e.toString(),"Invalid encoding").initCause(e);  }}  }
class C{  private static int unsignedByteToInt(byte b){  return b & 0xFF;}  }
class C{  public synchronized static boolean initSkinXMLHandler(String fileName){  udSpec=null;  if (fileName == null) {    System.out.println("ERROR: Bad skin specification file: " + "null filename!");    return false;  }  File file=new File(Configuration.skinsDir(),fileName);  if (!file.exists() || !file.isFile()) {    System.out.println("ERROR: Bad skin specification file: " + "file doesn't exist!  File name: " + fileName);    return false;  }  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();  try {    DocumentBuilder builder=dbf.newDocumentBuilder();    System.out.println("Parsing " + file.getName());    Document doc=builder.parse(file);    System.out.println("Parsing finished.");    NodeList listOfComponents=doc.getElementsByTagName(UI_ELEMENT);    int totalComponents=listOfComponents.getLength();    skinSpecs=new HashMap<String,SkinSpecification>((int)(totalComponents * 1.25));    for (int comp=0; comp < totalComponents; comp++) {      Element borderList=(Element)listOfComponents.item(comp);      String name=borderList.getElementsByTagName(NAME).item(0).getTextContent();      if (name.equals(SkinSpecification.UIComponents.UnitDisplay.getComp())) {        parseUnitDisplaySkinSpec(borderList);        continue;      }      SkinSpecification skinSpec;      Element noBorderEle=(Element)borderList.getElementsByTagName(NO_BORDER).item(0);      boolean noBorder=false;      if (noBorderEle != null) {        noBorder=Boolean.parseBoolean(noBorderEle.getTextContent());      }      Element plainTag=(Element)borderList.getElementsByTagName(PLAIN).item(0);      if (plainTag == null && !noBorder) {        Element border=(Element)borderList.getElementsByTagName(BORDER).item(0);        if (border == null) {          System.err.println("Missing <" + BORDER + "> tag in element #"+ comp);          continue;        }        skinSpec=parseBorderTag(border);      } else {        skinSpec=new SkinSpecification();        skinSpec.noBorder=noBorder;      }      if (plainTag == null) {        NodeList backgrounds=borderList.getElementsByTagName(BACKGROUND_IMAGE);        if (backgrounds != null) {          for (int bg=0; bg < backgrounds.getLength(); bg++) {            skinSpec.backgrounds.add(backgrounds.item(bg).getTextContent());          }        }      }      Element showScrollEle=(Element)borderList.getElementsByTagName(SHOW_SCROLL_BARS).item(0);      if (showScrollEle != null) {        skinSpec.showScrollBars=Boolean.parseBoolean(showScrollEle.getTextContent());      }      NodeList fontColors=borderList.getElementsByTagName(FONT_COLOR);      if (fontColors.getLength() > 0) {        skinSpec.fontColors.clear();        for (int fc=0; fc < fontColors.getLength(); fc++) {          String fontColorContent=fontColors.item(fc).getTextContent();          skinSpec.fontColors.add(Color.decode(fontColorContent));        }      }      Element tileBGEle=(Element)borderList.getElementsByTagName(TILE_BACKGROUND).item(0);      if (tileBGEle != null) {        skinSpec.tileBackground=Boolean.parseBoolean(tileBGEle.getTextContent());      }      if (SkinSpecification.UIComponents.getUIComponent(name) == null) {        System.out.println("SKIN ERROR: " + "Unable to add unrecognized UI component: " + name + "!");      } else {        skinSpecs.put(name,skinSpec);      }    }    if (!skinSpecs.containsKey(UIComponents.DefaultUIElement.getComp()) || !skinSpecs.containsKey(UIComponents.DefaultButton.getComp())) {      System.out.println("SKIN ERROR: Bad skin specification file: " + "file doesn't specify " + UIComponents.DefaultUIElement + " or "+ UIComponents.DefaultButton+ "!");      return false;    }  } catch (  Exception e) {    System.out.println(e.getMessage());    e.printStackTrace();    return false;  }  if (udSpec == null) {    udSpec=new UnitDisplaySkinSpecification();  }  return true;}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  public static void init(){  logger=Logger.getLogger("");  logger.getHandlers()[0].setFormatter(new BriefLogFormatter());}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public void removeLayersFromBeanContext(List<Layer> layers){  BeanContext bc=getBeanContext();  if (bc == null || layers == null) {    return;  }  for (  Layer layer : layers) {    bc.remove(layer);  }}  }
class C{  public boolean isShowLibraryFunctions(){  return m_libraryFunctionCheckbox.isSelected();}  }
class C{  @Override public boolean test(final Array params){  return c1.test(params) && c2.test(params);}  }
class C{  @Override public boolean isResponsible(Class<?> clazz){  return clazz == Date.class;}  }
class C{  private long normalizeTimestamp(long timestampMicros,long binDurationMillis){  long timeMillis=TimeUnit.MICROSECONDS.toMillis(timestampMicros);  timeMillis-=(timeMillis % binDurationMillis);  return timeMillis;}  }
class C{  void showInputBox(String message,Predicate<String> filter,Consumer<String> resultCallback){  Text text=createMessage(message);  TextField field=new TextField();  field.setMaxWidth(Math.max(text.getLayoutBounds().getWidth(),200));  field.setFont(FXGL.getUIFactory().newFont(18));  FXGLButton btnOK=new FXGLButton("OK");  field.textProperty().addListener(null);  btnOK.setDisable(true);  btnOK.setOnAction(null);  VBox vbox=new VBox(50,text,field,btnOK);  vbox.setAlignment(Pos.CENTER);  vbox.setUserData(new Point2D(Math.max(text.getLayoutBounds().getWidth(),200),text.getLayoutBounds().getHeight() * 3 + 50 * 2));  setContent("Input",vbox);  show();}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) private static boolean relaunchTask(int tabId){  if (tabId == Tab.INVALID_TAB_ID)   return false;  Context context=ApplicationStatus.getApplicationContext();  ActivityManager manager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  for (  AppTask task : manager.getAppTasks()) {    RecentTaskInfo info=DocumentUtils.getTaskInfoFromTask(task);    if (info == null)     continue;    int id=ActivityDelegate.getTabIdFromIntent(info.baseIntent);    if (id != tabId)     continue;    DocumentTabModelSelector.setPrioritizedTabId(id);    if (!moveToFront(task))     continue;    return true;  }  return false;}  }
class C{  private static void copyRowStyle(FlexTable sourceTable,FlexTable targetTable,int sourceRow,int targetRow){  String rowStyle=sourceTable.getRowFormatter().getStyleName(sourceRow);  targetTable.getRowFormatter().setStyleName(targetRow,rowStyle);}  }
class C{  private Object readResolve(){  if (iChronology == null) {    return new LocalDate(iLocalMillis,ISOChronology.getInstanceUTC());  }  if (DateTimeZone.UTC.equals(iChronology.getZone()) == false) {    return new LocalDate(iLocalMillis,iChronology.withUTC());  }  return this;}  }
class C{  public static Lock newLock(String name){  return factory.newLock(name);}  }
class C{  public boolean optBoolean(int index,boolean defaultValue){  try {    return this.getBoolean(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @RequestMapping(method=RequestMethod.GET) public String displayCategories(){  return "m_startPage_def";}  }
class C{  public void replace(String statement) throws CannotCompileException {  thisClass.getClassFile();  ConstPool constPool=getConstPool();  int pos=currentPos;  int index=iterator.u16bitAt(pos + 1);  Javac jc=new Javac(thisClass);  ClassPool cp=thisClass.getClassPool();  CodeAttribute ca=iterator.get();  try {    CtClass[] params=new CtClass[]{cp.get(javaLangObject)};    CtClass retType=CtClass.booleanType;    int paramVar=ca.getMaxLocals();    jc.recordParams(javaLangObject,params,true,paramVar,withinStatic());    int retVar=jc.recordReturnType(retType,true);    jc.recordProceed(new ProceedForInstanceof(index));    jc.recordType(getType());    checkResultValue(retType,statement);    Bytecode bytecode=jc.getBytecode();    storeStack(params,true,paramVar,bytecode);    jc.recordLocalVariables(ca,pos);    bytecode.addConstZero(retType);    bytecode.addStore(retVar,retType);    jc.compileStmnt(statement);    bytecode.addLoad(retVar,retType);    replace0(pos,bytecode,3);  } catch (  CompileError e) {    throw new CannotCompileException(e);  }catch (  NotFoundException e) {    throw new CannotCompileException(e);  }catch (  BadBytecode e) {    throw new CannotCompileException("broken method");  }}  }
class C{  public static float calculateAspectRatio(float left,float top,float right,float bottom){  final float width=right - left;  final float height=bottom - top;  final float aspectRatio=width / height;  return aspectRatio;}  }
class C{  private String generateUrl(String outfit,int i){  try {    String hash=hmac(i + "_" + outfit,Configuration.getConfiguration().get("stendhal.secret"));    StringBuilder sb=new StringBuilder();    sb.append("https://stendhalgame.org/content/game/photo.php?outfit=");    sb.append(outfit);    sb.append("&i=");    sb.append(i);    sb.append("&h=");    sb.append(hash.toLowerCase(Locale.ENGLISH));    return sb.toString();  } catch (  Exception e) {    logger.error(e,e);    return "";  }}  }
class C{  @Override public void agg(Object newVal){  if (firstTime) {    aggVal=(BigDecimal)newVal;    firstTime=false;  } else {    aggVal=aggVal.add((BigDecimal)newVal);  }}  }
class C{  protected void engineInitVerify(PublicKey publicKey) throws InvalidKeyException {  BigInteger p, q, y;  int n1;  if (publicKey == null || !(publicKey instanceof DSAPublicKey)) {    throw new InvalidKeyException("publicKey is not an instance of DSAPublicKey");  }  DSAParams params=((DSAPublicKey)publicKey).getParams();  p=params.getP();  q=params.getQ();  y=((DSAPublicKey)publicKey).getY();  n1=p.bitLength();  if (p.compareTo(BigInteger.valueOf(1)) != 1 || n1 < 512 || n1 > 1024 || (n1 & 077) != 0) {    throw new InvalidKeyException("bad p");  }  if (q.signum() != 1 || q.bitLength() != 160) {    throw new InvalidKeyException("bad q");  }  if (y.signum() != 1) {    throw new InvalidKeyException("y <= 0");  }  dsaKey=(DSAKey)publicKey;  msgDigest.reset();}  }
class C{  public boolean trim(){  final int l=arraySize(size,f);  if (l >= n || size > maxFill(l,f))   return true;  try {    rehash(l);  } catch (  OutOfMemoryError cantDoIt) {    return false;  }  return true;}  }
class C{  public LogisticGrowthModel(String name,Parameter N0Parameter,Parameter growthRateParameter,Parameter shapeParameter,double alpha,Type units,boolean usingGrowthRate){  super(name);  logisticGrowth=new LogisticGrowth(units);  this.N0Parameter=N0Parameter;  addVariable(N0Parameter);  N0Parameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.growthRateParameter=growthRateParameter;  addVariable(growthRateParameter);  growthRateParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.shapeParameter=shapeParameter;  addVariable(shapeParameter);  shapeParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.alpha=alpha;  this.usingGrowthRate=usingGrowthRate;  setUnits(units);}  }
class C{  public void logResults(){  if (!OracleLog.isLoggingEnabled() || (currentLogLevel > FINE_LOG_LEVEL))   return;  boolean chatty_logging=(currentLogLevel < FINE_LOG_LEVEL);  StringBuilder sb=new StringBuilder();  sb.append("\n\n");  if (chatty_logging || (dbConnectNanos > 0L))   logMsgTime(sb,"JDBC connect in: ",dbConnectNanos);  if (chatty_logging || (dbTransactionNanos > 0L))   logMsgTime(sb,"JDBC commit/rollback in: ",dbTransactionNanos);  if (chatty_logging || (ioReadBytes > 0) || (ioReadNanos > 0L))   logMsgCountTime(sb,"IO read: ",ioReadBytes,ioReadNanos);  if (chatty_logging || (ioWrites > 0)) {    sb.append("IO writes: ");    sb.append(Integer.toString(ioWrites));    sb.append(" of ");    sb.append(Integer.toString(ioWriteBytes));    sb.append(" bytes in ");    sb.append(nanosToString(ioWriteNanos));    sb.append("\n");  }  if ((chatty_logging) || (checksums > 0))   logMsgCountTime(sb,"Checksums: ",checksums,checksumNanos);  if (chatty_logging || (dbDDLs > 0))   logMsgCountTime(sb,"DDLS: ",dbDDLs,dbDDLNanos);  if (chatty_logging || (dbGUIDs > 0))   logMsgCountTime(sb,"GUID fetches: ",dbGUIDs,dbGUIDNanos);  if (chatty_logging || (dbTimestampReads > 0))   logMsgCountTime(sb,"SYSTIMESTAMP reads: ",dbTimestampReads,dbTimestampNanons);  if (chatty_logging || (dbSequenceBatch > 0))   logMsgCountTime(sb,"Sequence batch fetches: ",dbSequenceBatch,dbSequenceBatchNanos);  if (chatty_logging || (dbCursorReads > 0)) {    logMsgCount(sb,"Cursor reads: ",dbCursorReads);  }  if (chatty_logging || (dbLobReads > 0) || (dbLobWrites > 0)) {    logMsgCountTime(sb,"LOB reads: ",dbLobReads,dbLobReadNanos);    logMsgCountTime(sb,"LOB writes: ",dbLobWrites,dbLobWriteNanos);  }  if (chatty_logging || (dbProcCalls > 0))   logMsgCountTime(sb,"PLSQL calls: ",dbProcCalls,dbProcCallNanos);  if ((chatty_logging) || (dbDocReadRoundTrips > 0) || (dbDocWriteRoundTrips > 0)) {    logMsgCountTime(sb,"Doc read round-trips: ",dbDocReadRoundTrips,dbDocReadNanos);    logMsgCountTime(sb,"Doc write round-trips: ",dbDocWriteRoundTrips,dbDocWriteNanos);  }  if (encounteredNegativeTimeDiff) {    sb.append("Warning: timings might be off, encountered negative time diff!!!\n");  }  long elapsed=getTime() - total_time;  logMsgTime(sb,"\nElapsed total: ",elapsed);  log.fine(sb.toString());}  }
class C{  public Set<Key> keySet(int access){  Set<Key> set=new LinkedHashSet<Key>();  Map.Entry<Key,Member> entry;  Iterator<Entry<Key,Member>> it=_data.entrySet().iterator();  while (it.hasNext()) {    entry=it.next();    if (entry.getValue().getAccess() <= access)     set.add(entry.getKey());  }  return set;}  }
class C{  public static Map<String,Object> cancelOrderItem(DispatchContext ctx,Map<String,? extends Object> context){  LocalDispatcher dispatcher=ctx.getDispatcher();  Delegator delegator=ctx.getDelegator();  Locale locale=(Locale)context.get("locale");  GenericValue userLogin=(GenericValue)context.get("userLogin");  BigDecimal cancelQuantity=(BigDecimal)context.get("cancelQuantity");  String orderId=(String)context.get("orderId");  String orderItemSeqId=(String)context.get("orderItemSeqId");  String shipGroupSeqId=(String)context.get("shipGroupSeqId");  Map<String,String> itemReasonMap=UtilGenerics.checkMap(context.get("itemReasonMap"));  Map<String,String> itemCommentMap=UtilGenerics.checkMap(context.get("itemCommentMap"));  String itemMsgInfo=orderId + " / " + orderItemSeqId+ " / "+ shipGroupSeqId;  Security security=ctx.getSecurity();  boolean hasPermission=OrderServices.hasPermission(orderId,userLogin,"UPDATE",security,delegator);  if (!hasPermission) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderYouDoNotHavePermissionToChangeThisOrdersStatus",locale));  }  Map<String,String> fields=UtilMisc.<String,String>toMap("orderId",orderId);  if (orderItemSeqId != null) {    fields.put("orderItemSeqId",orderItemSeqId);  }  if (shipGroupSeqId != null) {    fields.put("shipGroupSeqId",shipGroupSeqId);  }  List<GenericValue> orderItemShipGroupAssocs=null;  try {    orderItemShipGroupAssocs=EntityQuery.use(delegator).from("OrderItemShipGroupAssoc").where(fields).queryList();  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCannotGetOrderItemAssocEntity",UtilMisc.toMap("itemMsgInfo",itemMsgInfo),locale));  }  if (orderItemShipGroupAssocs != null) {    for (    GenericValue orderItemShipGroupAssoc : orderItemShipGroupAssocs) {      GenericValue orderItem=null;      try {        orderItem=orderItemShipGroupAssoc.getRelatedOne("OrderItem",false);      } catch (      GenericEntityException e) {        Debug.logError(e,module);      }      if (orderItem == null) {        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCannotCancelItemItemNotFound",UtilMisc.toMap("itemMsgInfo",itemMsgInfo),locale));      }      BigDecimal aisgaCancelQuantity=orderItemShipGroupAssoc.getBigDecimal("cancelQuantity");      if (aisgaCancelQuantity == null) {        aisgaCancelQuantity=BigDecimal.ZERO;      }      BigDecimal availableQuantity=orderItemShipGroupAssoc.getBigDecimal("quantity").subtract(aisgaCancelQuantity);      BigDecimal itemCancelQuantity=orderItem.getBigDecimal("cancelQuantity");      if (itemCancelQuantity == null) {        itemCancelQuantity=BigDecimal.ZERO;      }      BigDecimal itemQuantity=orderItem.getBigDecimal("quantity").subtract(itemCancelQuantity);      if (availableQuantity == null)       availableQuantity=BigDecimal.ZERO;      if (itemQuantity == null)       itemQuantity=BigDecimal.ZERO;      BigDecimal thisCancelQty=null;      if (cancelQuantity != null) {        thisCancelQty=cancelQuantity;      } else {        thisCancelQty=availableQuantity;      }      if (availableQuantity.compareTo(thisCancelQty) >= 0) {        if (availableQuantity.compareTo(BigDecimal.ZERO) == 0) {          continue;        }        orderItem.set("cancelQuantity",itemCancelQuantity.add(thisCancelQty));        orderItemShipGroupAssoc.set("cancelQuantity",aisgaCancelQuantity.add(thisCancelQty));        try {          List<GenericValue> toStore=UtilMisc.toList(orderItem,orderItemShipGroupAssoc);          delegator.storeAll(toStore);        } catch (        GenericEntityException e) {          Debug.logError(e,module);          return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderUnableToSetCancelQuantity",UtilMisc.toMap("itemMsgInfo",itemMsgInfo),locale));        }        Map<String,Object> localCtx=UtilMisc.toMap("userLogin",userLogin,"orderId",orderItem.getString("orderId"),"orderItemSeqId",orderItem.getString("orderItemSeqId"),"shipGroupSeqId",orderItemShipGroupAssoc.getString("shipGroupSeqId"));        try {          dispatcher.runSync("deleteOrderItemShipGroupAssoc",localCtx);        } catch (        GenericServiceException e) {          Debug.logError(e,module);          return ServiceUtil.returnError(e.getMessage());        }        if (!"Y".equals(orderItem.getString("isPromo"))) {          String reasonEnumId=null;          String changeComments=null;          if (UtilValidate.isNotEmpty(itemReasonMap)) {            reasonEnumId=itemReasonMap.get(orderItem.getString("orderItemSeqId"));          }          if (UtilValidate.isNotEmpty(itemCommentMap)) {            changeComments=itemCommentMap.get(orderItem.getString("orderItemSeqId"));          }          Map<String,Object> serviceCtx=FastMap.newInstance();          serviceCtx.put("orderId",orderItem.getString("orderId"));          serviceCtx.put("orderItemSeqId",orderItem.getString("orderItemSeqId"));          serviceCtx.put("cancelQuantity",thisCancelQty);          serviceCtx.put("changeTypeEnumId","ODR_ITM_CANCEL");          serviceCtx.put("reasonEnumId",reasonEnumId);          serviceCtx.put("changeComments",changeComments);          serviceCtx.put("userLogin",userLogin);          Map<String,Object> resp=null;          try {            resp=dispatcher.runSync("createOrderItemChange",serviceCtx);          } catch (          GenericServiceException e) {            Debug.logError(e,module);            return ServiceUtil.returnError(e.getMessage());          }          if (ServiceUtil.isError(resp)) {            return ServiceUtil.returnError((String)resp.get(ModelService.ERROR_MESSAGE));          }        }        try {          BigDecimal quantity=thisCancelQty.setScale(1,orderRounding);          String cancelledItemToOrder=UtilProperties.getMessage(resource,"OrderCancelledItemToOrder",locale);          dispatcher.runSync("createOrderNote",UtilMisc.<String,Object>toMap("orderId",orderId,"note",cancelledItemToOrder + orderItem.getString("productId") + " ("+ quantity+ ")","internalNote","Y","userLogin",userLogin));        } catch (        GenericServiceException e) {          Debug.logError(e,module);        }        if (thisCancelQty.compareTo(itemQuantity) >= 0) {          Map<String,Object> statusCtx=UtilMisc.<String,Object>toMap("orderId",orderId,"orderItemSeqId",orderItem.getString("orderItemSeqId"),"statusId","ITEM_CANCELLED","userLogin",userLogin);          try {            dispatcher.runSyncIgnore("changeOrderItemStatus",statusCtx);          } catch (          GenericServiceException e) {            Debug.logError(e,module);            return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderUnableToCancelOrderLine",UtilMisc.toMap("itemMsgInfo",itemMsgInfo),locale));          }        } else {          Map<String,Object> invCtx=UtilMisc.<String,Object>toMap("orderId",orderId,"orderItemSeqId",orderItem.getString("orderItemSeqId"),"shipGroupSeqId",shipGroupSeqId,"cancelQuantity",thisCancelQty,"userLogin",userLogin);          try {            dispatcher.runSyncIgnore("cancelOrderItemInvResQty",invCtx);          } catch (          GenericServiceException e) {            Debug.logError(e,module);            return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderUnableToUpdateInventoryReservations",UtilMisc.toMap("itemMsgInfo",itemMsgInfo),locale));          }        }      } else {        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderInvalidCancelQuantityCannotCancel",UtilMisc.toMap("thisCancelQty",thisCancelQty),locale));      }    }  } else {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCannotCancelItemItemNotFound",UtilMisc.toMap("itemMsgInfo",itemMsgInfo),locale));  }  return ServiceUtil.returnSuccess();}  }
class C{  @Check public void checkInterfaceDeclaration(N4InterfaceDeclaration n4InterfaceDecl){  holdsNoKeywordInsteadOfComma(n4InterfaceDecl);  ICompositeNode node=NodeModelUtils.findActualNodeFor(n4InterfaceDecl);  ILeafNode keywordNode;  keywordNode=findLeafWithKeyword(n4InterfaceDecl,"{",node,"implements",false);  if (keywordNode != null) {    TInterface tinterface=n4InterfaceDecl.getDefinedTypeAsInterface();    if (tinterface == null) {      return;    }    if (tinterface.getSuperInterfaceRefs().isEmpty()) {      return;    }    if (tinterface.getSuperInterfaceRefs().stream().allMatch(null)) {      List<? extends IdentifiableElement> interfaces=tinterface.getSuperInterfaceRefs().stream().flatMap(null).collect(Collectors.toList());      String message=getMessageForSYN_KW_EXTENDS_IMPLEMENTS_MIXED_UP(validatorMessageHelper.description(tinterface),"implement","interface" + (interfaces.size() > 1 ? "s" : "") + validatorMessageHelper.names(interfaces),"extends");      addIssue(message,n4InterfaceDecl,keywordNode.getTotalOffset(),keywordNode.getLength(),SYN_KW_EXTENDS_IMPLEMENTS_MIXED_UP);    }  }}  }
class C{  @Override protected Size2D arrangeRR(Graphics2D g2,Range widthRange,Range heightRange){  g2.setFont(getFont());  FontMetrics fm=g2.getFontMetrics(getFont());  Rectangle2D bounds=TextUtilities.getTextBounds(getText(),g2,fm);  if (bounds.getWidth() <= widthRange.getUpperBound() && bounds.getHeight() <= heightRange.getUpperBound()) {    return new Size2D(bounds.getWidth(),bounds.getHeight());  } else {    return new Size2D(0.0,0.0);  }}  }
class C{  private void removeListeners(){  m_debugger.removeListener(m_debuggerListener);  m_debugger.getProcessManager().removeListener(m_processListener);}  }
class C{  @Override public List<E> lowerHalf(){  long a=0;  for (  E entry : this)   a+=get(entry);  a=a / this.size();  ArrayList<E> list=new ArrayList<E>();  for (  E entry : this)   if (get(entry) < a)   list.add(entry);  return list;}  }
class C{  private double computeFastPathMinProbability(FixedNode scopeStart){  ArrayList<FixedNode> pathBeginNodes=new ArrayList<>();  pathBeginNodes.add(scopeStart);  double minPathProbability=nodeProbabilities.applyAsDouble(scopeStart);  boolean isLoopScope=scopeStart instanceof LoopBeginNode;  do {    Node current=pathBeginNodes.remove(pathBeginNodes.size() - 1);    do {      if (isLoopScope && current instanceof LoopExitNode && ((LoopBeginNode)scopeStart).loopExits().contains((LoopExitNode)current)) {        return minPathProbability;      } else       if (current instanceof LoopBeginNode && current != scopeStart) {        current=getMaxProbabilityLoopExit((LoopBeginNode)current,pathBeginNodes);        minPathProbability=getMinPathProbability((FixedNode)current,minPathProbability);      } else       if (current instanceof ControlSplitNode) {        current=getMaxProbabilitySux((ControlSplitNode)current,pathBeginNodes);        minPathProbability=getMinPathProbability((FixedNode)current,minPathProbability);      } else {        assert current.successors().count() <= 1;        current=current.successors().first();      }    } while (current != null);  } while (!pathBeginNodes.isEmpty());  return minPathProbability;}  }
class C{  public static <T>T narrow(Object narrowFrom,Class<T> narrowTo){  ensureAvailable();  return proxy.narrow(narrowFrom,narrowTo);}  }
class C{  public static void render(Node node,Namespaces ns,RenderContext rc){  render(node,ns,rc,false);}  }
class C{  public static GaplessInfo createFromXingHeaderValue(int value){  int encoderDelay=value >> 12;  int encoderPadding=value & 0x0FFF;  return encoderDelay == 0 && encoderPadding == 0 ? null : new GaplessInfo(encoderDelay,encoderPadding);}  }
class C{  public static void loop(Listener listener,final List<HostAddress> addresses,SearchFilter searchFilter) throws QueryException {  MasterProtocol protocol;  ArrayDeque<HostAddress> loopAddresses=new ArrayDeque<>((!addresses.isEmpty()) ? addresses : listener.getBlacklistKeys());  if (loopAddresses.isEmpty()) {    loopAddresses.addAll(listener.getUrlParser().getHostAddresses());  }  int maxConnectionTry=listener.getRetriesAllDown();  QueryException lastQueryException=null;  while (!loopAddresses.isEmpty() || (!searchFilter.isFailoverLoop() && maxConnectionTry > 0)) {    protocol=getNewProtocol(listener.getProxy(),listener.getUrlParser());    if (listener.isExplicitClosed()) {      return;    }    maxConnectionTry--;    try {      HostAddress host=loopAddresses.pollFirst();      if (host == null) {        loopAddresses.addAll(listener.getUrlParser().getHostAddresses());        host=loopAddresses.pollFirst();      }      protocol.setHostAddress(host);      protocol.connect();      if (listener.isExplicitClosed()) {        protocol.close();        return;      }      listener.removeFromBlacklist(protocol.getHostAddress());      listener.foundActiveMaster(protocol);      return;    } catch (    QueryException e) {      listener.addToBlacklist(protocol.getHostAddress());      lastQueryException=e;    }    if (loopAddresses.isEmpty() && !searchFilter.isFailoverLoop() && maxConnectionTry > 0) {      loopAddresses=new ArrayDeque<>(listener.getBlacklistKeys());    }  }  if (lastQueryException != null) {    throw new QueryException("No active connection found for master : " + lastQueryException.getMessage(),lastQueryException.getErrorCode(),lastQueryException.getSqlState(),lastQueryException);  }  throw new QueryException("No active connection found for master");}  }
class C{  public void test_encode_decode_randomBits_stress(){  final Random r=new Random();  for (int i=0; i < 10000000; i++) {    final int nbits=r.nextInt(32);    final int pid=r.nextInt();    final int ctr=r.nextInt();    if (pid == 0 && ctr == 0) {      continue;    }    final TermIdEncoder encoder=new TermIdEncoder(nbits);    doEncodeDecodeTest(encoder,pid,ctr);  }}  }
class C{  public FirstInnerOperatorCondition(Class[] willGet,boolean allowEmptyChains){  this.willGet=willGet;  this.allowEmptyChains=allowEmptyChains;}  }
class C{  public boolean isProxied(){  return (!(null == proxyHostName || 0 >= proxyPortNumber));}  }
class C{  protected SurfaceData initAcceleratedSurface(){  return null;}  }
class C{  String formatNumberToPlainText(TemplateNumberModel number,Expression exp,boolean useTempModelExc) throws TemplateException {  return formatNumberToPlainText(number,getTemplateNumberFormat(exp,useTempModelExc),exp,useTempModelExc);}  }
class C{  public void add(final Number operand){  this.value+=operand.byteValue();}  }
class C{  @Override public Adapter createAdapter(Notifier target){  return modelSwitch.doSwitch((EObject)target);}  }
class C{  public Component add(Action action){  Component c=((TaskPaneGroupUI)ui).createAction(action);  add(c);  return c;}  }
class C{  public void printReport(PrintWriter out) throws AdeException {  out.println("% msg-id1" + DELIM + "msg-internal-id"+ DELIM+ "msg-id2"+ DELIM+ "msg-internal-id2"+ DELIM+ "information");  final DbDictionary dictionary=AdeInternal.getAdeImpl().getDataStore().getAdeDictionaries().getMessageIdDictionary();  int msgId1, msgId2;  String msgStr1, msgStr2;  for (int i=0; i < mCoOccurrencesAndMiMatrix.getRowNum(); i++) {    for (int j=0; j <= i; j++) {      msgId1=m_msgIndices2msgIdMap[i];      msgId2=m_msgIndices2msgIdMap[j];      msgStr1=dictionary.getWordById(msgId1);      msgStr2=dictionary.getWordById(msgId2);      out.println(msgStr1 + DELIM + msgId1+ DELIM+ msgStr2+ DELIM+ msgId2+ DELIM+ mCoOccurrencesAndMiMatrix.get(i,j));    }  }}  }
class C{  public CoapResource(String name){  this(name,true);}  }
class C{  @Inline @Uninterruptible public static void scanObject(int code,int id,Object object,TransitiveClosure trace){  scanObject(code,id,object,trace,SpecializedScanMethod.ENABLED);}  }
class C{  @ApiOperation(value="Load a configuration file to the single engine") @RequestMapping(value="engine/install",method=RequestMethod.POST) @ResponseStatus(HttpStatus.NO_CONTENT) @ResponseBody public final void postInstall(@RequestParam MultipartFile file){  try {    Properties properties=new Properties();    properties.load(file.getInputStream());    getSymmetricEngineHolder().install(properties);  } catch (  RuntimeException ex) {    throw ex;  }catch (  Exception ex) {    throw new RuntimeException(ex);  }}  }
class C{  public JSONObject(JSONTokener x) throws JSONException {  this();  char c;  String key;  if (x.nextClean() != '{') {    throw x.syntaxError("A JSONObject text must begin with '{'");  }  for (; ; ) {    c=x.nextClean();switch (c) {case 0:      throw x.syntaxError("A JSONObject text must end with '}'");case '}':    return;default :  x.back();key=x.nextValue().toString();}c=x.nextClean();if (c != ':') {throw x.syntaxError("Expected a ':' after a key");}this.putOnce(key,x.nextValue());switch (x.nextClean()) {case ';':case ',':if (x.nextClean() == '}') {return;}x.back();break;case '}':return;default :throw x.syntaxError("Expected a ',' or '}'");}}}  }
class C{  public void loadMetaData(){  loadMetaData(null,null);}  }
class C{  private void refreshTasks(){  for (  Task<T> task : tasks.getTasks()) {    task.refresh();  }}  }
class C{  public View build(){  View view=new View(subst);  while (true) {    View simpler=view.simplify(requestedVars);    if (simpler.map.size() == view.map.size()) {      return simpler;    }    view=simpler;  }}  }
class C{  public synchronized StringBuffer append(char ch){  append0(ch);  return this;}  }
class C{  public void configure(){  XNetTrafficController packets=new XNetPacketizer(new LenzCommandStation());  packets.connectPort(this);  this.getSystemConnectionMemo().setXNetTrafficController(packets);  new XNetInitializationManager(this.getSystemConnectionMemo());}  }
class C{  public StripedLockIntObjectConcurrentHashMap(int initialCapacity,float loadFactor){  int cap=getInitCap(initialCapacity,loadFactor);  setTable(new IntHashEntry[cap]);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:08.148 -0400",hash_original_method="C8AEE2334DE35BDFE5D79AEDA5278F3C",hash_generated_method="BDB2785D6763AFBD54AB81AD10712999") public static synchronized int insertProviderAt(Provider provider,int position){  int size=providers.size();  if ((position < 1) || (position > size)) {    position=size + 1;  }  providers.add(position - 1,provider);  providersNames.put(provider.getName(),provider);  setNeedRefresh();  return position;}  }
class C{  public void back() throws JSONException {  if (this.usePrevious || this.index <= 0) {    throw new JSONException("Stepping back two steps is not supported");  }  this.index-=1;  this.character-=1;  this.usePrevious=true;  this.eof=false;}  }
class C{  public static String formatAddressType(String address){  if (InetAddressUtils.isIPv6Address(address)) {    return "IN IP6 ".concat(address);  }  return "IN IP4 ".concat(address);}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  EditRoomPrefForm editRoomPrefForm=(EditRoomPrefForm)form;  MessageResources rsc=getResources(request);  String doit=editRoomPrefForm.getDoit();  if (doit != null && doit.equals(rsc.getMessage("button.returnToRoomDetail"))) {    response.sendRedirect("roomDetail.do?id=" + editRoomPrefForm.getId());    return null;  }  if (doit != null && doit.equals(rsc.getMessage("button.update"))) {    ActionMessages errors=new ActionMessages();    errors=editRoomPrefForm.validate(mapping,request);    if (errors != null && errors.size() != 0) {      saveErrors(request,errors);    } else {      doUpdate(editRoomPrefForm,request);      return mapping.findForward("showRoomDetail");    }  }  Long id=Long.valueOf(request.getParameter("id"));  LocationDAO ldao=new LocationDAO();  Location location=ldao.get(id);  if (location instanceof Room) {    Room r=(Room)location;    editRoomPrefForm.setName(r.getLabel());  } else   if (location instanceof NonUniversityLocation) {    NonUniversityLocation nonUnivLocation=(NonUniversityLocation)location;    editRoomPrefForm.setName(nonUnivLocation.getName());  } else {    ActionMessages errors=new ActionMessages();    errors.add("editRoomGroup",new ActionMessage("errors.lookup.notFound","Room Group"));    saveErrors(request,errors);  }  sessionContext.checkPermission(location,Right.RoomEditPreference);  TreeSet<Department> departments=Department.getUserDepartments(sessionContext.getUser());  TreeSet<Department> availableDepts=new TreeSet<Department>();  for (  RoomDept rd : location.getRoomDepts()) {    if (departments.contains(rd.getDepartment()))     availableDepts.add(rd.getDepartment());  }  editRoomPrefForm.setDepts(new ArrayList<Department>(availableDepts));  ArrayList depts=new ArrayList();  ArrayList selectedPrefs=new ArrayList();  for (  Department dept : availableDepts) {    RoomPref roomPref=location.getRoomPreference(dept);    if (roomPref != null) {      selectedPrefs.add(roomPref.getPrefLevel().getUniqueId().toString());    } else {      selectedPrefs.add(PreferenceLevel.PREF_LEVEL_NEUTRAL);    }    depts.add(new LabelValueBean(dept.getDeptCode() + "-" + dept.getAbbreviation(),dept.getDeptCode()));  }  editRoomPrefForm.setRoomPrefLevels(selectedPrefs);  request.setAttribute(Department.DEPT_ATTR_NAME,depts);  if (departments.size() == 1) {    editRoomPrefForm.setDeptCode(departments.first().getDeptCode());  } else   if (sessionContext.getAttribute(SessionAttribute.DepartmentCodeRoom) != null) {    editRoomPrefForm.setDeptCode((String)sessionContext.getAttribute(SessionAttribute.DepartmentCodeRoom));  }  Vector<PreferenceLevel> prefs=new Vector<PreferenceLevel>();  for (  PreferenceLevel pref : PreferenceLevel.getPreferenceLevelList()) {    if (!pref.getPrefProlog().equalsIgnoreCase(PreferenceLevel.sRequired))     prefs.addElement(pref);  }  request.setAttribute(PreferenceLevel.PREF_LEVEL_ATTR_NAME,prefs);  return mapping.findForward("showEditRoomPref");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:20.799 -0500",hash_original_method="A776EE9CD94492AC9830F6D90123EF80",hash_generated_method="4AF9EA9654FEF9F99B4CC125624506F1") public void launchQuerySearch(){  launchQuerySearch(KeyEvent.KEYCODE_UNKNOWN,null);}  }
class C{  public Base64OutputStream(OutputStream out,int flags,boolean encode){  super(out);  this.flags=flags;  if (encode) {    coder=new Base64.Encoder(flags,null);  } else {    coder=new Base64.Decoder(flags,null);  }}  }
class C{  static <T>List<T> cast(Iterable<T> iterable){  return (List<T>)iterable;}  }
class C{  public PeriodAxis(String label,RegularTimePeriod first,RegularTimePeriod last,TimeZone timeZone){  this(label,first,last,timeZone,Locale.getDefault());}  }
class C{  public ItemCollectionRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public Industry(int id,String name,List<Industry> segments){  this.id=id;  this.name=name;  this.segments=segments;}  }
class C{  protected Filter cursorHrefToFilter(Element cursorElement,ParsedURL purl,Point2D hotSpot){  AffineRable8Bit f=null;  String uriStr=purl.toString();  Dimension cursorSize=null;  DocumentLoader loader=ctx.getDocumentLoader();  SVGDocument svgDoc=(SVGDocument)cursorElement.getOwnerDocument();  URIResolver resolver=ctx.createURIResolver(svgDoc,loader);  try {    Element rootElement=null;    Node n=resolver.getNode(uriStr,cursorElement);    if (n.getNodeType() == Node.DOCUMENT_NODE) {      SVGDocument doc=(SVGDocument)n;      ctx.initializeDocument(doc);      rootElement=doc.getRootElement();    } else {      throw new BridgeException(ctx,cursorElement,ERR_URI_IMAGE_INVALID,new Object[]{uriStr});    }    GraphicsNode node=ctx.getGVTBuilder().build(ctx,rootElement);    float width=DEFAULT_PREFERRED_WIDTH;    float height=DEFAULT_PREFERRED_HEIGHT;    UnitProcessor.Context uctx=UnitProcessor.createContext(ctx,rootElement);    String s=rootElement.getAttribute(SVG_WIDTH_ATTRIBUTE);    if (s.length() != 0) {      width=UnitProcessor.svgHorizontalLengthToUserSpace(s,SVG_WIDTH_ATTRIBUTE,uctx);    }    s=rootElement.getAttribute(SVG_HEIGHT_ATTRIBUTE);    if (s.length() != 0) {      height=UnitProcessor.svgVerticalLengthToUserSpace(s,SVG_HEIGHT_ATTRIBUTE,uctx);    }    cursorSize=Toolkit.getDefaultToolkit().getBestCursorSize(Math.round(width),Math.round(height));    AffineTransform at=ViewBox.getPreserveAspectRatioTransform(rootElement,cursorSize.width,cursorSize.height,ctx);    Filter filter=node.getGraphicsNodeRable(true);    f=new AffineRable8Bit(filter,at);  } catch (  BridgeException ex) {    throw ex;  }catch (  SecurityException ex) {    throw new BridgeException(ctx,cursorElement,ex,ERR_URI_UNSECURE,new Object[]{uriStr});  }catch (  Exception ex) {  }  if (f == null) {    ImageTagRegistry reg=ImageTagRegistry.getRegistry();    Filter filter=reg.readURL(purl);    if (filter == null) {      return null;    }    if (BrokenLinkProvider.hasBrokenLinkProperty(filter)) {      return null;    }    Rectangle preferredSize=filter.getBounds2D().getBounds();    cursorSize=Toolkit.getDefaultToolkit().getBestCursorSize(preferredSize.width,preferredSize.height);    if (preferredSize != null && preferredSize.width > 0 && preferredSize.height > 0) {      AffineTransform at=new AffineTransform();      if (preferredSize.width > cursorSize.width || preferredSize.height > cursorSize.height) {        at=ViewBox.getPreserveAspectRatioTransform(new float[]{0,0,preferredSize.width,preferredSize.height},SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMINYMIN,true,cursorSize.width,cursorSize.height);      }      f=new AffineRable8Bit(filter,at);    } else {      return null;    }  }  AffineTransform at=f.getAffine();  at.transform(hotSpot,hotSpot);  Rectangle cursorViewport=new Rectangle(0,0,cursorSize.width,cursorSize.height);  PadRable8Bit cursorImage=new PadRable8Bit(f,cursorViewport,PadMode.ZERO_PAD);  return cursorImage;}  }
class C{  public void addExceptionDates(ExceptionDates exceptionDates){  addProperty(exceptionDates);}  }
class C{  public void write(int c) throws IOException {  m_os.write(c);}  }
class C{  public static JCTree referencedStatement(JCLabeledStatement tree){  JCTree t=tree;  do   t=((JCLabeledStatement)t).body; while (t.hasTag(LABELLED));switch (t.getTag()) {case DOLOOP:case WHILELOOP:case FORLOOP:case FOREACHLOOP:case SWITCH:    return t;default :  return tree;}}  }
class C{  public static String sanitizeJsonString(String value){  if (value == null) {    return null;  }  value=sanitize(value);  return value;}  }
class C{  public RhythmGroup addOverlay(RhythmOverlay overlay){  mOverlays.add(overlay);  if (mCurrentOverlayIndex == NO_OVERLAY) {    selectOverlay(0);  }  return this;}  }
class C{  public static String rename(String desc,String oldname,String newname){  if (desc.indexOf(oldname) < 0)   return desc;  StringBuffer newdesc=new StringBuffer();  int head=0;  int i=0;  for (; ; ) {    int j=desc.indexOf('L',i);    if (j < 0)     break; else     if (desc.startsWith(oldname,j + 1) && desc.charAt(j + oldname.length() + 1) == ';') {      newdesc.append(desc.substring(head,j));      newdesc.append('L');      newdesc.append(newname);      newdesc.append(';');      head=i=j + oldname.length() + 2;    } else {      i=desc.indexOf(';',j) + 1;      if (i < 1)       break;    }  }  if (head == 0)   return desc; else {    int len=desc.length();    if (head < len)     newdesc.append(desc.substring(head,len));    return newdesc.toString();  }}  }
class C{  public DeepMLTest(String name){  super(name);}  }
class C{  public TriggerIsNPCNameForUnstartedQuestCondition(final List<String> regions){  this.regions=ImmutableList.copyOf(regions);}  }
class C{  public JavaPacketizer(){}  }
class C{  protected void drawPoints(Canvas canvas,Paint paint,List<Float> pointsList,XYSeriesRenderer seriesRenderer,float yAxisValue,int seriesIndex,int startIndex){  if (isRenderPoints(seriesRenderer)) {    ScatterChart pointsChart=getPointsChart();    if (pointsChart != null) {      int length=(int)mPathMeasure.getLength();      int pointsLength=pointsList.size();      float[] coords=new float[2];      for (int i=0; i < length; i++) {        mPathMeasure.getPosTan(i,coords,null);        double prevDiff=Double.MAX_VALUE;        boolean ok=true;        for (int j=0; j < pointsLength && ok; j+=2) {          double diff=Math.abs(pointsList.get(j) - coords[0]);          if (diff < 1) {            pointsList.set(j + 1,coords[1]);            prevDiff=diff;          }          ok=prevDiff > diff;        }      }      pointsChart.drawSeries(canvas,paint,pointsList,seriesRenderer,yAxisValue,seriesIndex,startIndex);    }  }}  }
class C{  public boolean isLeaf(){  return (getChildCount() == 0);}  }
class C{  public void testLoadContent(){  System.out.println("loadContent");  AuditCommand mockAuditCommand=createMock(AuditCommand.class);  mockAuditCommand.loadContent();  expectLastCall().once();  replay(mockAuditCommand);  AuditServiceThreadImpl instance=initialiseAuditServiceThread(mockAuditCommand);  instance.loadContent();  verify(mockAuditCommand);}  }
class C{  private void nextToken(StreamTokenizer tokenizer) throws IOException {  tokenizer.nextToken();  if ((tokenizer.ttype == '\'') || (tokenizer.ttype == '"')) {    tokenizer.ttype=StreamTokenizer.TT_WORD;  } else   if ((tokenizer.ttype == StreamTokenizer.TT_WORD) && (tokenizer.sval.equals("?"))) {    tokenizer.ttype='?';  }  if (LOG.isDebugging()) {    if (tokenizer.ttype == StreamTokenizer.TT_NUMBER) {      LOG.debug("token: " + tokenizer.nval);    } else     if (tokenizer.ttype == StreamTokenizer.TT_WORD) {      LOG.debug("token: " + tokenizer.sval);    } else     if (tokenizer.ttype == StreamTokenizer.TT_EOF) {      LOG.debug("token: EOF");    } else     if (tokenizer.ttype == StreamTokenizer.TT_EOL) {      LOG.debug("token: EOL");    } else {      LOG.debug("token type: " + tokenizer.ttype);    }  }}  }
class C{  private TStep makeStep(String opName){  int count=0;  for (  TStep step : steps) {    if (step.name().equals(opName)) {      count++;    }  }  return new TStep(opName,count);}  }
class C{  public static void onContextStop(){  PersistedEvents.persistEvents(applicationContext,stateMap);}  }
class C{  private void ensureBoundsVisible(){  final Rectangle screenBounds=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration().getBounds();  final Rectangle bounds=getBounds();  boolean aligned=false;  if (bounds.x < screenBounds.x) {    bounds.x=screenBounds.x;    aligned=true;  }  if (bounds.x + bounds.width > screenBounds.x + screenBounds.width) {    bounds.x=screenBounds.x + screenBounds.width - bounds.width;    aligned=true;  }  if (bounds.y + bounds.height > screenBounds.y + screenBounds.height) {    bounds.y=screenBounds.y + screenBounds.height - bounds.height;    aligned=true;  }  if (bounds.y < screenBounds.y) {    bounds.y=screenBounds.y;    aligned=true;  }  if (aligned) {    settings.set(centerXSetting,(int)bounds.getCenterX());    settings.set(centerYSetting,(int)bounds.getCenterY());  }}  }
class C{  public static void throwIfNotQueryable(final AccessibleObject accessor){  Queryable queryable=accessor.getAnnotation(Queryable.class);  if (queryable != null && !queryable.value()) {    throw new NotQueryableException(String.format("%1$s \"%2$s\" (%3$s) is not queryable as has been marked with @Queryable(false)",Classes.RAW_CLASS.apply(GenericPropertyInfo.propertyTypeOf(accessor)).getSimpleName(),((Member)accessor).getName(),((Member)accessor).getDeclaringClass().getName()));  }}  }
class C{  public void updateBinaryStream(int columnIndex,java.io.InputStream x,int length) throws SQLException {  checkState();  checkTypeConcurrency();  rs.updateBinaryStream(columnIndex,x,length);}  }
class C{  public void handleEnumerationRequest(EnumerationContext aws){switch (aws.stage) {case HOSTDESC:    getHostComputeDescription(aws,AWSEnumerationStages.PARENTAUTH);  break;case PARENTAUTH:getParentAuth(aws,AWSEnumerationStages.KICKOFF_ENUMERATION);break;case KICKOFF_ENUMERATION:kickOffEnumerationWorkFlows(aws,AWSEnumerationStages.PATCH_COMPLETION);break;case PATCH_COMPLETION:setOperationDurationStat(aws.awsAdapterOperation);AdapterUtils.sendPatchToEnumerationTask(this,aws.computeEnumerationRequest.taskReference);break;case ERROR:AdapterUtils.sendFailurePatchToEnumerationTask(this,aws.computeEnumerationRequest.taskReference,aws.error);break;default :logSevere("Unknown AWS enumeration stage %s ",aws.stage.toString());aws.error=new Exception("Unknown AWS enumeration stage");AdapterUtils.sendFailurePatchToEnumerationTask(this,aws.computeEnumerationRequest.taskReference,aws.error);break;}}  }
class C{  public static <K,V>SortedMap<K,V> synchronizedSortedMap(SortedMap<K,V> map){  if (map == null) {    throw new NullPointerException();  }  return new SynchronizedSortedMap<K,V>(map);}  }
class C{  private static MkSocket createMockSocket() throws IOException {  return new MkSocket(new ByteArrayInputStream(Joiner.on(BkBasicTest.CRLF).join("GET / HTTP/1.1",BkBasicTest.HOST,"Content-Length: 2","","hi").getBytes()));}  }
class C{  @SuppressWarnings("deprecation") public static LocalVariableMap[] readResultFile(JobConf job,String fname) throws DMLRuntimeException, IOException {  HashMap<Long,LocalVariableMap> tmp=new HashMap<Long,LocalVariableMap>();  FileSystem fs=FileSystem.get(job);  Path path=new Path(fname);  LongWritable key=new LongWritable();  Text value=new Text();  int countAll=0;  for (  Path lpath : MatrixReader.getSequenceFilePaths(fs,path)) {    SequenceFile.Reader reader=new SequenceFile.Reader(FileSystem.get(job),lpath,job);    try {      while (reader.next(key,value)) {        if (!tmp.containsKey(key.get()))         tmp.put(key.get(),new LocalVariableMap());        Object[] dat=ProgramConverter.parseDataObject(value.toString());        tmp.get(key.get()).put((String)dat[0],(Data)dat[1]);        countAll++;      }    }  finally {      if (reader != null)       reader.close();    }  }  LOG.debug("Num remote worker results (before deduplication): " + countAll);  LOG.debug("Num remote worker results: " + tmp.size());  return tmp.values().toArray(new LocalVariableMap[0]);}  }
class C{  private Targetable chooseTarget(Coords pos){  boolean friendlyFire=clientgui.getClient().getGame().getOptions().booleanOption("friendly_fire");  Targetable choice=null;  Iterator<Entity> choices;  if (friendlyFire) {    choices=clientgui.getClient().getGame().getEntities(pos);  } else {    choices=clientgui.getClient().getGame().getEnemyEntities(pos,ce());  }  List<Targetable> targets=new ArrayList<Targetable>();  final IPlayer localPlayer=clientgui.getClient().getLocalPlayer();  while (choices.hasNext()) {    Targetable t=choices.next();    boolean isSensorReturn=false;    boolean isVisible=true;    if (t instanceof Entity) {      isSensorReturn=((Entity)t).isSensorReturn(localPlayer);      isVisible=((Entity)t).hasSeenEntity(localPlayer);    }    if (!ce().equals(t) && !isSensorReturn && isVisible) {      targets.add(t);    }  }  Building bldg=clientgui.getClient().getGame().getBoard().getBuildingAt(pos);  if (bldg != null) {    targets.add(new BuildingTarget(pos,clientgui.getClient().getGame().getBoard(),Targetable.TYPE_BLDG_TAG));  }  targets.add(new HexTarget(pos,clientgui.getClient().getGame().getBoard(),Targetable.TYPE_HEX_TAG));  if (targets.size() == 1) {    choice=targets.get(0);  } else   if (targets.size() > 1) {    String input=(String)JOptionPane.showInputDialog(clientgui,Messages.getString("FiringDisplay.ChooseTargetDialog.message",new Object[]{pos.getBoardNum()}),Messages.getString("FiringDisplay.ChooseTargetDialog.title"),JOptionPane.QUESTION_MESSAGE,null,SharedUtility.getDisplayArray(targets),null);    choice=SharedUtility.getTargetPicked(targets,input);  }  return choice;}  }
class C{  @Deprecated public SimpleTriggerImpl(String name,String group,int repeatCount,long repeatInterval){  this(name,group,new Date(),null,repeatCount,repeatInterval);}  }
class C{  public boolean isIndependent(Node x,Node y,List<Node> z){  x=getVariable(variables,x.getName());  z=GraphUtils.replaceNodes(z,variables);  double[] residualsX=residuals(x,z);  double[] residualsY=residuals(y,z);  List<Double> residualsXFiltered=new ArrayList<>();  List<Double> residualsYFiltered=new ArrayList<>();  for (int i=0; i < residualsX.length; i++) {    if (!Double.isNaN(residualsX[i]) && !Double.isNaN(residualsY[i])) {      residualsXFiltered.add(residualsX[i]);      residualsYFiltered.add(residualsY[i]);    }  }  residualsX=new double[residualsXFiltered.size()];  residualsY=new double[residualsYFiltered.size()];  for (int i=0; i < residualsXFiltered.size(); i++) {    residualsX[i]=residualsXFiltered.get(i);    residualsY[i]=residualsYFiltered.get(i);  }  if (residualsX.length != residualsY.length)   throw new IllegalArgumentException("Missing values handled.");  int sampleSize=residualsX.length;  double r=StatUtils.correlation(residualsX,residualsY);  if (r > 1.)   r=1.;  if (r < -1.)   r=-1.;  double fisherZ=Math.sqrt(sampleSize - z.size() - 3.0) * 0.5 * (Math.log(1.0 + r) - Math.log(1.0 - r));  if (Double.isNaN(fisherZ)) {    return false;  }  double pvalue=2.0 * (1.0 - RandomUtil.getInstance().normalCdf(0,1,Math.abs(fisherZ)));  this.pValue=pvalue;  boolean independent=pvalue > alpha;  if (verbose) {    if (independent) {      TetradLogger.getInstance().log("independencies",SearchLogUtils.independenceFactMsg(x,y,z,getPValue()));      System.out.println(SearchLogUtils.independenceFactMsg(x,y,z,getPValue()));    } else {      TetradLogger.getInstance().log("dependencies",SearchLogUtils.dependenceFactMsg(x,y,z,getPValue()));    }  }  return independent;}  }
class C{  public void initializeRegion(){  InternalDistributedSystem system=this.newRegion.getSystem();  for (int retry=0; retry < 5; retry++) {    Set recps=getRecipients();    if (logger.isDebugEnabled()) {      logger.debug("Creating region {}",this.newRegion);    }    if (recps.isEmpty()) {      if (logger.isDebugEnabled()) {        logger.debug("CreateRegionProcessor.initializeRegion, no recipients, msg not sent");      }      this.newRegion.getDistributionAdvisor().setInitialized();      EventTracker tracker=((LocalRegion)this.newRegion).getEventTracker();      if (tracker != null) {        tracker.setInitialized();      }      return;    }    CreateRegionReplyProcessor replyProc=new CreateRegionReplyProcessor(recps);    boolean useMcast=false;    CreateRegionMessage msg=getCreateRegionMessage(recps,replyProc,useMcast);    if (((LocalRegion)newRegion).isUsedForPartitionedRegionBucket()) {      replyProc.enableSevereAlertProcessing();      msg.severeAlertCompatible=true;    }    this.newRegion.getDistributionManager().putOutgoing(msg);    try {      this.newRegion.getCache().getCancelCriterion().checkCancelInProgress(null);      try {        replyProc.waitForRepliesUninterruptibly();        if (!replyProc.needRetry()) {          break;        }      } catch (      ReplyException e) {        Throwable t=e.getCause();        if (t instanceof IllegalStateException) {          throw (IllegalStateException)t;        }        e.handleAsUnexpected();        break;      }    }  finally {      replyProc.cleanup();      EventTracker tracker=((LocalRegion)this.newRegion).getEventTracker();      if (tracker != null) {        tracker.setInitialized();      }      if (((LocalRegion)this.newRegion).isUsedForPartitionedRegionBucket()) {        if (logger.isDebugEnabled()) {          logger.debug("initialized bucket event tracker: {}",tracker);        }      }    }  }  this.newRegion.getDistributionAdvisor().setInitialized();}  }
class C{  public static TypeReference newTypeParameterBoundReference(int sort,int paramIndex,int boundIndex){  return new TypeReference((sort << 24) | (paramIndex << 16) | (boundIndex << 8));}  }
class C{  public XMLWriter(OutputStream output) throws IOException {  this(new OutputStreamWriter(output,"UTF8"));}  }
class C{  protected void installDefaults(){  LookAndFeel.installColorsAndFont(table,"Table.background","Table.foreground","Table.font");  LookAndFeel.installProperty(table,"opaque",Boolean.TRUE);  Color sbg=table.getSelectionBackground();  if (sbg == null || sbg instanceof UIResource) {    sbg=UIManager.getColor("Table.selectionBackground");    table.setSelectionBackground(sbg != null ? sbg : UIManager.getColor("textHighlight"));  }  Color sfg=table.getSelectionForeground();  if (sfg == null || sfg instanceof UIResource) {    sfg=UIManager.getColor("Table.selectionForeground");    table.setSelectionForeground(sfg != null ? sfg : UIManager.getColor("textHighlightText"));  }  Color gridColor=table.getGridColor();  if (gridColor == null || gridColor instanceof UIResource) {    gridColor=UIManager.getColor("Table.gridColor");    table.setGridColor(gridColor != null ? gridColor : Color.GRAY);  }  Container parent=SwingUtilities.getUnwrappedParent(table);  if (parent != null) {    parent=parent.getParent();    if (parent != null && parent instanceof JScrollPane) {      LookAndFeel.installBorder((JScrollPane)parent,"Table.scrollPaneBorder");    }  }  isFileList=Boolean.TRUE.equals(table.getClientProperty("Table.isFileList"));}  }
class C{  final boolean removeStrategy(final GenericPlanStrategy<T,I> strategy,final String subpopulation){  final StrategyWeights<T,I> weights=getStrategyWeights(subpopulation);  int idx=weights.strategies.indexOf(strategy);  if (idx != -1) {    weights.strategies.remove(idx);    double weight=weights.weights.remove(idx);    weights.totalWeights-=weight;    return true;  }  return false;}  }
class C{  void cancelRedirectsAndImages(){  if (redirectThread != null) {    redirectThread.cancel();    redirectThread=null;  }  threadQueue.discardQueue();  embeddedCSS=null;  externalCSS=null;  if (getComponentForm() != null) {    marqueeMotion=null;    getComponentForm().deregisterAnimated(this);  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public static void convertOSM2MultimodalNetwork(String path2InputFiles,String path2OSMFile){  log.info("Conversion from OSM to multimodal MATSim network...");  new MultimodalNetworkCreatorPT(network).createMultimodalNetwork(path2OSMFile);  new PTScheduleCreatorHAFAS(schedule,vehicles,transformation).createSchedule(path2InputFiles);  new PTMapperBusAndTram(schedule).routePTLines(network);  log.info("Conversion from OSM to multimodal MATSim network... done.");}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static VqlParser parse(String columnPath){  return parse(columnPath,false);}  }
class C{  protected UnManagedVolume injectVolumeCharacterstics(UnManagedVolume storageVolumeInfo,CIMInstance volumeInstance,Map<String,String> volumeCharacterstics){  if (null == volumeCharacterstics) {    volumeCharacterstics=new HashMap<String,String>();  }  for (  SupportedVolumeCharacterstics characterstic : SupportedVolumeCharacterstics.values()) {    injectIntoVolumeCharactersticContainer(volumeCharacterstics,characterstic.getCharacterstic(),characterstic.getAlterCharacterstic(),volumeInstance);  }  if (storageVolumeInfo.getVolumeCharacterstics() == null) {    storageVolumeInfo.setVolumeCharacterstics(new StringMap());  }  storageVolumeInfo.getVolumeCharacterstics().replace(volumeCharacterstics);  return storageVolumeInfo;}  }
class C{  public void dispose() throws GSSException {  x.dispose();}  }
class C{  public String toString(){  return this.m00 + ", " + this.m01+ ", "+ this.m02+ ", "+ this.m03+ "\n"+ this.m10+ ", "+ this.m11+ ", "+ this.m12+ ", "+ this.m13+ "\n"+ this.m20+ ", "+ this.m21+ ", "+ this.m22+ ", "+ this.m23+ "\n"+ this.m30+ ", "+ this.m31+ ", "+ this.m32+ ", "+ this.m33+ "\n";}  }
class C{  public void runTest() throws Throwable {  Document doc1;  Document doc2;  Node newChild;  NodeList elementList;  Node elementNode;  Node appendedChild;  doc1=(Document)load("hc_staff",false);  doc2=(Document)load("hc_staff",true);  newChild=doc1.createElement("br");  elementList=doc2.getElementsByTagName("p");  elementNode=elementList.item(1);{    boolean success=false;    try {      appendedChild=elementNode.appendChild(newChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  public SE8cSignalHead(String sname,NamedBeanHandle<Turnout> lowTO,NamedBeanHandle<Turnout> highTO){  super(sname);  this.lowTurnout=lowTO;  this.highTurnout=highTO;  systemName=sname;  init();}  }
class C{  @Override public void repaint(Rectangle r){}  }
class C{  public void activeLineRangeChanged(ActiveLineRangeEvent e){  if (e.getMin() == -1) {    clearActiveLineRange();  } else {    setActiveLineRange(e.getMin(),e.getMax());  }}  }
class C{  void forgetVolumes(List<VolumeInfo> nativeVolumeInfoList){  Map<String,Set<String>> systemVolumesMap=new HashMap<String,Set<String>>();  for (  VolumeInfo volumeInfo : nativeVolumeInfoList) {    String systemGuid=volumeInfo.getStorageSystemNativeGuid();    Set<String> systemVolumes=null;    if (systemVolumesMap.containsKey(systemGuid)) {      systemVolumes=systemVolumesMap.get(systemGuid);    } else {      systemVolumes=new HashSet<String>();      systemVolumesMap.put(systemGuid,systemVolumes);    }    systemVolumes.add(volumeInfo.getVolumeWWN());  }  rediscoverStorageSystems(new ArrayList<String>(systemVolumesMap.keySet()));  VPlexApiUtils.pauseThread(60000);  Set<String> logUnitsPaths=findLogicalUnits(systemVolumesMap);  try {    URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_FORGET_LOG_UNIT);    s_logger.info("Forget logical units URI is {}",requestURI.toString());    StringBuilder argBuilder=new StringBuilder();    for (    String logUnitPath : logUnitsPaths) {      if (argBuilder.length() != 0) {        argBuilder.append(",");      }      argBuilder.append(logUnitPath);    }    Map<String,String> argsMap=new HashMap<String,String>();    argsMap.put(VPlexApiConstants.ARG_DASH_U,argBuilder.toString());    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,false);    s_logger.info("Forget logical units POST data is {}",postDataObject.toString());    ClientResponse response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Forget logical units response is {}",responseStr);    int status=response.getStatus();    response.close();    if (status != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Forget volumes is completing asynchronously");        _vplexApiClient.waitForCompletion(response);      } else {        s_logger.error("Request to forget logical units failed with Status: {}",response.getStatus());        return;      }    }    s_logger.info("Successfully forgot logical units");  } catch (  Exception e) {    s_logger.error("Exception forgetting logical units: %s",e.getMessage(),e);  }}  }
class C{  public void clearHighlightedView(){  mStrokeCell=null;  mStrokeCellPrevBound=null;  invalidate();  requestLayout();}  }
class C{  public Element next(){  return theNext;}  }
class C{  @GET @Path("check-geo-distributed") public Response checkGeoSetup(){  Boolean isGeo=false;  List<URI> ids=_dbClient.queryByType(VirtualDataCenter.class,true);  Iterator<VirtualDataCenter> iter=_dbClient.queryIterativeObjects(VirtualDataCenter.class,ids);  while (iter.hasNext()) {    VirtualDataCenter vdc=iter.next();    if (!vdc.getLocal()) {      if ((vdc.getConnectionStatus() == VirtualDataCenter.ConnectionStatus.ISOLATED) || vdc.getRepStatus() == VirtualDataCenter.GeoReplicationStatus.REP_NONE) {        continue;      }      isGeo=true;    }  }  return Response.ok(isGeo.toString(),MediaType.APPLICATION_OCTET_STREAM).build();}  }
class C{  public static boolean isHadoop2Env(){  Configuration hadoopConf=new Configuration();  String hadoopVersion=hadoopConf.get(MAPREDUCE_FRAMEWORK_NAME_PROP);  return hadoopVersion != null && hadoopVersion.equals(YARN);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void reconnectCircuit(){  ArrayList<Gate> new_Gates=new ArrayList<Gate>();  ArrayList<Wire> new_Wires=new ArrayList<Wire>();  if (_Gates != null) {    for (int i=0; i < _Gates.size(); i++) {      Gate g=new Gate(_Gates.get(i));      new_Gates.add(g);    }  }  if (_Wires != null) {    for (int i=0; i < _Wires.size(); i++) {      Wire w=new Wire(_Wires.get(i));      new_Wires.add(w);    }  }  for (int i=0; i < new_Gates.size(); i++) {    if (_Gates.get(i).Outgoing != null) {      int index=_Gates.get(i).Outgoing.Index;      for (      Wire w : new_Wires) {        if (w.Index == index) {          new_Gates.get(i).Outgoing=w;        }      }    }  }  for (int i=0; i < new_Wires.size(); i++) {    if (_Wires.get(i).From != null) {      int index=_Wires.get(i).From.Index;      for (      Gate g : new_Gates) {        if (g.Index == index) {          new_Wires.get(i).From=g;        }      }    }    if (_Wires.get(i).To != null) {      int index=_Wires.get(i).To.Index;      for (      Gate g : new_Gates) {        if (g.Index == index) {          new_Wires.get(i).To=g;        }      }    }    if (_Wires.get(i).Next != null) {      int index=_Wires.get(i).Next.Index;      for (      Wire w : new_Wires) {        if (w.Index == index) {          new_Wires.get(i).Next=w;        }      }    }  }  _Gates=new_Gates;  _Wires=new_Wires;}  }
class C{  private boolean hasLocationsChanges(String newLocations){  String oldLocations=this.preferencePage.getPreferenceStore().getString(LIBRARY_PATH_LOCATION_PREFIX);  if (oldLocations != null && oldLocations.equalsIgnoreCase(newLocations)) {    return false;  }  List<String> oldCheckedElements=new ArrayList<String>();  if (oldLocations != null && oldLocations.length() > 0) {    String[] locations=oldLocations.split(ESCAPE_REGEX + LOCATION_DELIM);    for (int i=0; i < locations.length; i++) {      String values[]=locations[i].split(ESCAPE_REGEX + STATE_DELIM);      if (Boolean.valueOf(values[1]).booleanValue()) {        oldCheckedElements.add(values[0]);      }    }  }  Object[] newCheckedLocations=fTableViewer.getCheckedElements();  if (newCheckedLocations.length != oldCheckedElements.size()) {    return true;  }  for (int i=0; i < newCheckedLocations.length; i++) {    if (!oldCheckedElements.contains(newCheckedLocations[i])) {      return true;    }  }  return false;}  }
class C{  protected boolean shouldSelect(Transaction tx){  return isSelectable(tx);}  }
class C{  @RequestMapping(value="/_search/bloodPressures/{query}",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public List<BloodPressure> search(@PathVariable String query){  return StreamSupport.stream(bloodPressureSearchRepository.search(queryString(query)).spliterator(),false).collect(Collectors.toList());}  }
class C{  public void route(){  long startTime=System.currentTimeMillis();  final int distanceLimitMm;  final int tmpTimeLimitSeconds;  if (destinationSplit != null) {    int maxAbsLatFixed=Math.max(Math.abs(destinationSplit.fixedLat),Math.abs(maxAbsOriginLat));    double maxAbsLatRadians=Math.toRadians(VertexStore.fixedDegreesToFloating(maxAbsLatFixed));    millimetersPerDegreeLonFixed=MM_PER_DEGREE_LAT_FIXED * Math.cos(maxAbsLatRadians);    double maxSpeedMetersPerSecond=profileRequest.getSpeed(streetMode);    if (maxSpeedMetersPerSecond == 0)     maxSpeedMetersPerSecond=36.11;    maxSpeedSecondsPerMillimeter=1 / (maxSpeedMetersPerSecond * 1000);  }  if (distanceLimitMeters > 0) {    distanceLimitMm=distanceLimitMeters * 1000;    if (dominanceVariable != State.RoutingVariable.DISTANCE_MILLIMETERS) {      LOG.warn("Setting a distance limit when distance is not the dominance function, this is a resource limiting issue and paths may be incorrect.");    }  } else {    distanceLimitMm=Integer.MAX_VALUE;  }  if (timeLimitSeconds > 0) {    tmpTimeLimitSeconds=timeLimitSeconds;    if (dominanceVariable != State.RoutingVariable.DURATION_SECONDS) {      LOG.warn("Setting a time limit when time is not the dominance function, this is a resource limiting issue and paths may be incorrect.");    }  } else {    tmpTimeLimitSeconds=Integer.MAX_VALUE;  }  if (timeLimitSeconds > 0 && distanceLimitMeters > 0) {    LOG.warn("Both distance limit of {}m and time limit of {}s are set in StreetRouter",distanceLimitMeters,timeLimitSeconds);  } else   if (timeLimitSeconds == 0 && distanceLimitMeters == 0) {    LOG.debug("Distance and time limit are both set to 0 in StreetRouter. This means NO LIMIT in searching so the entire street graph will be explored. This can be slow.");  } else   if (distanceLimitMeters > 0) {    LOG.debug("Using distance limit of {} meters",distanceLimitMeters);  } else   if (timeLimitSeconds > 0) {    LOG.debug("Using time limit of {} sec",timeLimitSeconds);  }  if (queue.size() == 0) {    LOG.warn("Routing without first setting an origin, no search will happen.");  }  PrintStream debugPrintStream=null;  if (DEBUG_OUTPUT) {    File debugFile=new File(String.format("street-router-debug.csv"));    OutputStream outputStream;    try {      outputStream=new BufferedOutputStream(new FileOutputStream(debugFile));    } catch (    FileNotFoundException e) {      throw new RuntimeException(e);    }    debugPrintStream=new PrintStream(outputStream);    debugPrintStream.println("lat,lon,weight");  }  EdgeStore.Edge edge=streetLayer.edgeStore.getCursor();  if (transitStopSearch) {    routingVisitor=new StopVisitor(streetLayer,dominanceVariable,maxTransitStops,profileRequest.getMinTimeLimit(streetMode));  } else   if (flagSearch != null) {    routingVisitor=new VertexFlagVisitor(streetLayer,dominanceVariable,flagSearch,maxVertices,profileRequest.getMinTimeLimit(streetMode));  }  while (!queue.isEmpty()) {    State s0=queue.poll();    if (DEBUG_OUTPUT) {      VertexStore.Vertex v=streetLayer.vertexStore.getCursor(s0.vertex);      double lat=v.getLat();      double lon=v.getLon();      if (s0.backEdge != -1) {        EdgeStore.Edge e=streetLayer.edgeStore.getCursor(s0.backEdge);        v.seek(e.getFromVertex());        lat=(lat + v.getLat()) / 2;        lon=(lon + v.getLon()) / 2;      }      debugPrintStream.println(String.format("%.6f,%.6f,%d",v.getLat(),v.getLon(),s0.weight));    }    if (s0.backEdge >= 0 && !bestStatesAtEdge.get(s0.backEdge).contains(s0))     continue;    if (toVertex > 0 && toVertex == s0.vertex)     break;    if (s0.getRoutingVariable(dominanceVariable) > bestValueAtDestination)     break;    if (routingVisitor != null) {      routingVisitor.visitVertex(s0);      if (routingVisitor.shouldBreakSearch()) {        LOG.debug("{} routing visitor stopped search",routingVisitor.getClass().getSimpleName());        queue.clear();        break;      }    }    if (destinationSplit != null && (s0.vertex == destinationSplit.vertex0 || s0.vertex == destinationSplit.vertex1)) {      State atDest=getState(destinationSplit);      if (atDest != null && bestValueAtDestination > atDest.getRoutingVariable(dominanceVariable)) {        bestValueAtDestination=atDest.getRoutingVariable(dominanceVariable);      }    }    streetLayer.outgoingEdges.get(s0.vertex).forEach(null);  }  if (DEBUG_OUTPUT) {    debugPrintStream.close();  }  long routingTimeMsec=System.currentTimeMillis() - startTime;  LOG.debug("Routing took {} msec",routingTimeMsec);}  }
class C{  public void clearAll(){  scriptString=null;  clearIOS();}  }
class C{  public RDN(AttributeTypeAndValue[] aAndVs){  this.values=new DERSet(aAndVs);}  }
class C{  public ServiceCall<Void> resetCustomization(String customizationId){  Validator.notNull(customizationId,"customizationId cannot be null");  RequestBuilder requestBuilder=RequestBuilder.post(String.format(PATH_RESET,customizationId));  return createServiceCall(requestBuilder.build(),ResponseConverterUtils.getVoid());}  }
class C{  public NotificationPopup(@NotNull StatusNotification notification,@NotNull Resources resources,@NotNull NotificationActionDelegate delegate){  this.notification=notification;  this.resources=resources;  this.delegate=delegate;  setStyleName(resources.notificationCss().notificationPopupPanel());  notification.addObserver(this);  FlowPanel contentWrapper=new FlowPanel();  contentWrapper.add(titlePanel=createTitleWidget());  contentWrapper.add(messagePanel=createContentWidget());  contentWrapper.setStyleName(resources.notificationCss().notificationPopupContentWrapper());  contentWrapper.ensureDebugId(CONTENT_DBG_ID + notification.getId());  FlowPanel notificationWrapper=new FlowPanel();  notificationWrapper.add(iconPanel=createIconWidget());  notificationWrapper.add(contentWrapper);  notificationWrapper.add(createCloseWidget());  notificationWrapper.setStyleName(resources.notificationCss().notificationPopup());  notificationWrapper.ensureDebugId(NOTIFICATION_WRAPPER_DBG_ID + notification.getId());  setWidget(notificationWrapper);}  }
class C{  public Iterator<TreeNode> findChildren(){  List<TreeNode> nodes;  if (children == null)   nodes=Collections.emptyList(); else   nodes=children;  return nodes.iterator();}  }
class C{  @SuppressWarnings("try") private static void deconstructSSIForm(LIR lir){  for (  AbstractBlockBase<?> block : lir.getControlFlowGraph().getBlocks()) {    try (Indent i=Debug.logAndIndent("Fixup Block %s",block)){      if (block.getPredecessorCount() != 0) {        SSIUtil.removeIncoming(lir,block);      } else {        assert lir.getControlFlowGraph().getStartBlock().equals(block);      }      SSIUtil.removeOutgoing(lir,block);    }   }}  }
class C{  @Override public void hide(){  super.hide();}  }
class C{  public DrawerAdapter(Context context,int headerLayoutResourceId,int entryLayoutResourceId){  super(context,headerLayoutResourceId,entryLayoutResourceId);  mContext=context;  mHeaderLayoutResourceId=headerLayoutResourceId;  mEntryLayoutResourceId=entryLayoutResourceId;  mLayoutInflater=LayoutInflater.from(mContext);  this.add(new Entry(0,null));  setNotifyOnChange(true);}  }
class C{  public void initJava(){  int index=(p_panel != null ? p_panel.fJavaType.getSelectedIndex() : 0);  initJava(index);}  }
class C{  private Name serializedLambdaName(){  StringBuilder buf=new StringBuilder();  buf.append(names.lambda);  buf.append(enclosingMethodName());  buf.append('$');  String disam=serializedLambdaDisambiguation();  buf.append(Integer.toHexString(disam.hashCode()));  buf.append('$');  buf.append(syntheticMethodNameCounts.getIndex(buf));  String result=buf.toString();  return names.fromString(result);}  }
class C{  public String formatLongDateTime(Date date){  return DateFormat.getDateTimeInstance(DateFormat.LONG,DateFormat.LONG).format(date);}  }
class C{  private void printNextNodes(BasicBlock block){  if (forward) {    System.out.print(block + " Succs:");  } else {    System.out.print(block + " Preds:");  }  Enumeration<BasicBlock> e=getNextNodes(block);  while (e.hasMoreElements()) {    System.out.print(' ');    System.out.print(e.nextElement());  }  System.out.println();}  }
class C{  protected boolean canClone(Object obj,String getter){  try {    Class objClass=obj.getClass().getMethod(getter).getReturnType();    if (Enum.class.isAssignableFrom(objClass)) {      logger.log(Level.FINE,"Found enum, not cloneable");      return false;    }    Method meth=objClass.getMethod("clone");    if (meth != null) {      logger.log(Level.FINE,"Found clone method");      if (meth.getParameterTypes().length == 0 && meth.getReturnType().isAssignableFrom(objClass)) {        return true;      } else {        logger.log(Level.FINE,"Wrong kind of clone method, parameter size {0}, returnType {1}",new Object[]{meth.getParameterTypes().length,meth.getReturnType()});      }    }  } catch (  NoSuchMethodException ex) {  }catch (  SecurityException ex) {    Exceptions.printStackTrace(ex);  }  return false;}  }
class C{  public CacheLIRS(long maxMemory){  this(maxMemory,16,8);}  }
class C{  public BayesImEditorObs(BayesImWrapperObs wrapper,BayesIm bayesIm){  if (wrapper == null) {    throw new NullPointerException();  }  this.wrapper=wrapper;  init(bayesIm);}  }
class C{  public static UnitValue parseUnitValue(String s,boolean isHor){  return parseUnitValue(s,null,isHor);}  }
class C{  public static String removeAdditionalParty(HttpServletRequest request,HttpServletResponse response){  ShoppingCart cart=getCartObject(request);  String partyId=request.getParameter("additionalPartyId");  String roleTypeId[]=request.getParameterValues("additionalRoleTypeId");  List<String> eventList=new LinkedList<String>();  Locale locale=UtilHttp.getLocale(request);  int i;  if (UtilValidate.isEmpty(partyId) || roleTypeId.length < 1) {    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderPartyIdAndOrRoleTypeIdNotDefined",locale));    return "error";  }  if (request.getAttribute("_EVENT_MESSAGE_LIST_") != null) {    List<String> msg=UtilGenerics.checkList(request.getAttribute("_EVENT_MESSAGE_LIST_"));    eventList.addAll(msg);  }  for (i=0; i < roleTypeId.length; i++) {    try {      cart.removeAdditionalPartyRole(partyId,roleTypeId[i]);    } catch (    Exception e) {      Debug.logInfo(e.getLocalizedMessage(),module);      eventList.add(e.getLocalizedMessage());    }  }  request.removeAttribute("_EVENT_MESSAGE_LIST_");  request.setAttribute("_EVENT_MESSAGE_LIST_",eventList);  return "success";}  }
class C{  @Override public void run(){  try {    ArchiveManager archives=new ArchiveManager();    ArticleReaderInterface articleReader=null;    ArchiveDescription description=null;    Task<Revision> task=null;    DiffCalculatorInterface diffCalc;    if (MODE_STATISTICAL_OUTPUT) {      diffCalc=new TimedDiffCalculator(new TaskTransmitter());    } else {      diffCalc=new DiffCalculator(new TaskTransmitter());    }    long start, time;    while (archives.hasArchive()) {      System.gc();      try {        description=archives.getArchive();        ArticleFilter nameFilter=new ArticleFilter();        articleReader=InputFactory.getTaskReader(description,nameFilter);        ArticleConsumerLogMessages.logArchiveRetrieved(logger,description);      } catch (      ArticleReaderException e) {        articleReader=null;        ArticleConsumerLogMessages.logExceptionRetrieveArchive(logger,description,e);      }      while (articleReader != null) {        try {          if (articleReader.hasNext()) {            start=System.currentTimeMillis();            task=articleReader.next();            time=System.currentTimeMillis() - start;            if (task == null) {              continue;            }            ArticleConsumerLogMessages.logArticleRead(logger,task,time,articleReader.getBytePosition());            start=System.currentTimeMillis();            diffCalc.process(task);            time=System.currentTimeMillis() - start;            DiffConsumerLogMessages.logArticleProcessed(logger,task,time);          } else {            ArticleConsumerLogMessages.logNoMoreArticles(logger,description);            articleReader=null;          }        } catch (        ArticleReaderException e) {          ArticleConsumerLogMessages.logTaskReaderException(logger,e);          articleReader.resetTaskCompleted();        }catch (        DiffException e) {          DiffConsumerLogMessages.logDiffException(logger,e);          articleReader.resetTaskCompleted();          diffCalc.reset();        }      }    }    diffCalc.closeTransmitter();    ArticleConsumerLogMessages.logNoMoreArchives(logger);  } catch (  ConfigurationException e) {    DiffToolLogMessages.logException(logger,e);    throw new RuntimeException(e);  }catch (  UnsupportedEncodingException e) {    DiffToolLogMessages.logException(logger,e);    throw new RuntimeException(e);  }catch (  IOException e) {    DiffToolLogMessages.logException(logger,e);    throw new RuntimeException(e);  }catch (  TimeoutException e) {    DiffToolLogMessages.logException(logger,e);    throw new RuntimeException(e);  }catch (  Exception e) {    DiffToolLogMessages.logException(logger,e);    throw new RuntimeException(e);  }}  }
class C{  public void takeSnapshot(String tag,String... keyspaceNames) throws IOException {  if (operationMode == Mode.JOINING)   throw new IOException("Cannot snapshot until bootstrap completes");  if (tag == null || tag.equals(""))   throw new IOException("You must supply a snapshot name.");  Iterable<Keyspace> keyspaces;  if (keyspaceNames.length == 0) {    keyspaces=Keyspace.all();  } else {    ArrayList<Keyspace> t=new ArrayList<>(keyspaceNames.length);    for (    String keyspaceName : keyspaceNames)     t.add(getValidKeyspace(keyspaceName));    keyspaces=t;  }  for (  Keyspace keyspace : keyspaces)   if (keyspace.snapshotExists(tag))   throw new IOException("Snapshot " + tag + " already exists.");  for (  Keyspace keyspace : keyspaces)   keyspace.snapshot(tag,null);}  }
class C{  public SolrQuery removeSort(String itemName){  if (sortClauses != null) {    for (    SortClause existing : sortClauses) {      if (existing.getItem().equals(itemName)) {        sortClauses.remove(existing);        if (sortClauses.isEmpty())         sortClauses=null;        serializeSorts();        break;      }    }  }  return this;}  }
class C{  public Iterator<ValueNumberFrame> factIterator(){  return factAtLocationMap.values().iterator();}  }
class C{  public double eval(Map<String,Double> tuple) throws Exception {synchronized (this) {    this.setVariables(tuple);    return this.eval();  }}  }
class C{  public static double sortableLongToDouble(long encoded){  return Double.longBitsToDouble(sortableDoubleBits(encoded));}  }
class C{  public Class loadClass(String name) throws ClassNotFoundException {  return (loadClass(name,false));}  }
class C{  public void defaultRouteSet(boolean enabled){  mDefaultRouteSet.set(enabled);}  }
class C{  public void start(){  this.dbHistory.start();}  }
class C{  public Builder binLogPosition(int position){  this.innerBinLogPosition=position;  return this;}  }
class C{  private void readEncodingData(int base){  if (base == 0) {    System.arraycopy(FontSupport.standardEncoding,0,encoding,0,FontSupport.standardEncoding.length);  } else   if (base == 1) {    System.out.println("**** EXPERT ENCODING!");  } else {    pos=base;    int encodingtype=readByte();    if ((encodingtype & 127) == 0) {      int ncodes=readByte();      for (int i=1; i < ncodes + 1; i++) {        int idx=readByte() & 0xff;        encoding[idx]=i;      }    } else     if ((encodingtype & 127) == 1) {      int nranges=readByte();      int p=1;      for (int i=0; i < nranges; i++) {        int start=readByte();        int more=readByte();        for (int j=start; j < start + more + 1; j++) {          encoding[j]=p++;        }      }    } else {      System.out.println("Bad encoding type: " + encodingtype);    }  }}  }
class C{  public void registerClasses(Iterable<?> objs) throws IgniteCheckedException {  if (objs != null)   for (  Object o : objs)   registerClass(o);}  }
class C{  public void saveAsEPS(String file) throws IOException {  java.awt.Color paper=fxToAWTColor(background);  java.awt.Color ink=fxToAWTColor(foreground);  PostScriptRenderer eps=new PostScriptRenderer(new FileOutputStream(file),zoom,border,paper,ink);  eps.render(barcode);}  }
class C{  protected void drawChartValuesText(Canvas canvas,XYSeries series,XYSeriesRenderer renderer,Paint paint,List<Float> points,int seriesIndex,int startIndex){  int seriesNr=mDataset.getSeriesCount();  int length=points.size();  float halfDiffX=getHalfDiffX(points,length,seriesNr);  for (int i=0; i < length; i+=2) {    int index=startIndex + i / 2;    double value=series.getY(index);    if (!isNullValue(value)) {      float x=points.get(i);      if (mType == Type.DEFAULT) {        x+=seriesIndex * 2 * halfDiffX - (seriesNr - 1.5f) * halfDiffX;      }      if (value >= 0) {        drawText(canvas,getLabel(renderer.getChartValuesFormat(),value),x,points.get(i + 1) - renderer.getChartValuesSpacing(),paint,0);      } else {        drawText(canvas,getLabel(renderer.getChartValuesFormat(),value),x,points.get(i + 1) + renderer.getChartValuesTextSize() + renderer.getChartValuesSpacing() - 3,paint,0);      }    }  }}  }
class C{  protected Element addElement(Element parent,String name,String classname,boolean primitive,int array){  return addElement(parent,name,classname,primitive,array,false);}  }
class C{  public void quitServer(String reason){  this.sendRawLine("QUIT :" + reason);}  }
class C{  public void testThrowingException() throws Exception {  Map<String,Method> functions=new HashMap<>();  functions.put("foo",StaticThrowingException.class.getMethod("method"));  String source="3 * foo() / 5";  Expression expr=JavascriptCompiler.compile(source,functions,getClass().getClassLoader());  ArithmeticException expected=expectThrows(ArithmeticException.class,null);  assertEquals(MESSAGE,expected.getMessage());  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw);  expected.printStackTrace(pw);  pw.flush();  assertTrue(sw.toString().contains("JavascriptCompiler$CompiledExpression.evaluate(" + source + ")"));}  }
class C{  public Vector<HtmlLink> grabLinks(final String html){  final Vector<HtmlLink> result=new Vector<HtmlLink>();  final Matcher matcherTag=patternTag.matcher(html);  while (matcherTag.find()) {    final String href=matcherTag.group(1);    final String linkText=matcherTag.group(2);    final Matcher matcherLink=patternLink.matcher(href);    while (matcherLink.find()) {      final String link=matcherLink.group(1);      final HtmlLink obj=new HtmlLink(link,linkText);      result.add(obj);    }  }  return result;}  }
class C{  public static float convertLength(String length,String attr,short unitsType,UnitProcessor.Context uctx){switch (unitsType) {case OBJECT_BOUNDING_BOX:    return UnitProcessor.svgOtherLengthToObjectBoundingBox(length,attr,uctx);case USER_SPACE_ON_USE:  return UnitProcessor.svgOtherLengthToUserSpace(length,attr,uctx);default :throw new IllegalArgumentException("Invalid unit type");}}  }
class C{  public void runScript(File file){  try {    this.eval(file);  } catch (  FileNotFoundException ex) {    log.error("File {} not found.",file);  }catch (  IOException ex) {    log.error("Exception working with file {}",file);  }catch (  ScriptException ex) {    log.error("Error in script {}.",file,ex);  }}  }
class C{  public static Entity findSpotter(IGame game,Entity attacker,Targetable target){  Entity spotter=null;  int taggedBy=-1;  if (target instanceof Entity) {    taggedBy=((Entity)target).getTaggedBy();  }  ToHitData bestMods=new ToHitData(TargetRoll.IMPOSSIBLE,"");  for (  Entity other : game.getEntitiesVector()) {    if (((other.isSpotting() && (other.getSpotTargetId() == target.getTargetId())) || (taggedBy == other.getId())) && !attacker.isEnemyOf(other)) {      LosEffects los=LosEffects.calculateLos(game,other.getId(),target,true);      ToHitData mods=los.losModifiers(game);      if (game.getOptions().booleanOption("double_blind") && !Compute.inVisualRange(game,los,other,target) && !Compute.inSensorRange(game,los,other,target,null)) {        mods.addModifier(TargetRoll.IMPOSSIBLE,"outside of visual and sensor range");      }      los.setTargetCover(LosEffects.COVER_NONE);      mods.append(Compute.getAttackerMovementModifier(game,other.getId()));      if (other.isAttackingThisTurn()) {        mods.addModifier(1,"spotter is making an attack this turn");      }      if ((spotter == null) || (mods.getValue() < bestMods.getValue())) {        spotter=other;        bestMods=mods;      }    }  }  return spotter;}  }
class C{  public boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof Interval))   return false;  Interval other=(Interval)o;  return other.start == this.start && other.end == this.end;}  }
class C{  @Override public int portRemote(){  if (_s != null)   return _s.getPort(); else   return 0;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public Promise<T> delay(long delay,TimeUnit unit){  return new Promise<T>(observable.delay(delay,unit));}  }
class C{  @Override public String toString(){  return "DateTickUnit[" + this.unitType.toString() + ", "+ this.count+ "]";}  }
class C{  private Object parseString(GridField field,String in){  log.log(Level.FINE,"Parse: " + field + ":"+ in);  if (in == null)   return null;  int dt=field.getDisplayType();  try {    if (dt == DisplayType.Integer || (DisplayType.isID(dt) && field.getColumnName().endsWith("_ID"))) {      int i=Integer.parseInt(in);      return new Integer(i);    } else     if (DisplayType.isNumeric(dt)) {      return DisplayType.getNumberFormat(dt).parse(in);    } else     if (DisplayType.isDate(dt)) {      long time=0;      try {        time=DisplayType.getDateFormat_JDBC().parse(in).getTime();        return new Timestamp(time);      } catch (      Exception e) {        log.log(Level.SEVERE,in + "(" + in.getClass()+ ")"+ e);        time=DisplayType.getDateFormat(dt).parse(in).getTime();      }      return new Timestamp(time);    } else     if (dt == DisplayType.YesNo)     return Boolean.valueOf(in); else     return in;  } catch (  Exception ex) {    log.log(Level.SEVERE,"Object=" + in,ex);    return null;  }}  }
class C{  public static NameMatcher<TriggerKey> triggerNameContains(String compareTo){  return NameMatcher.nameContains(compareTo);}  }
class C{  @Override protected void closing(){}  }
class C{  public boolean equals(Object other){  if (!(other instanceof GF2mVector)) {    return false;  }  GF2mVector otherVec=(GF2mVector)other;  if (!field.equals(otherVec.field)) {    return false;  }  return IntUtils.equals(vector,otherVec.vector);}  }
class C{  private void updateBlockMirrorConsistencyGroup(){  log.info("Migrating BlockMirror consistencyGroup to consistencyGroups.");  DbClient dbClient=getDbClient();  List<URI> blockMirrorURIs=dbClient.queryByType(BlockMirror.class,false);  Iterator<BlockMirror> blockMirrors=dbClient.queryIterativeObjects(BlockMirror.class,blockMirrorURIs);  List<BlockObject> blockObjects=new ArrayList<BlockObject>();  while (blockMirrors.hasNext()) {    blockObjects.add(blockMirrors.next());  }  migrate(blockObjects);}  }
class C{  private int addToPopulation(Solution solution){  int id=nextFreeId();  solutions.put(id,solution);  return id;}  }
class C{  public MidiPortWrapper(MidiDeviceInfo info,int portType,int portIndex){  mInfo=info;  mType=portType;  mPortIndex=portIndex;}  }
class C{  public static Validator<CharSequence> emailAddress(@NonNull final CharSequence errorMessage){  return new EmailAddressValidator(errorMessage);}  }
class C{  public final void writeFloat(float v) throws IOException {  this.size+=4;}  }
class C{  public Terrain(int terrainSize,float scale,float minY,float maxY,String heightMapFile,String textureFile,int textInc) throws Exception {  this.terrainSize=terrainSize;  gameItems=new GameItem[terrainSize * terrainSize];  BufferedImage heightMapImage=ImageIO.read(getClass().getResourceAsStream(heightMapFile));  verticesPerCol=heightMapImage.getWidth() - 1;  verticesPerRow=heightMapImage.getHeight() - 1;  heightMapMesh=new HeightMapMesh(minY,maxY,heightMapImage,textureFile,textInc);  boundingBoxes=new Rectangle2D.Float[terrainSize][terrainSize];  for (int row=0; row < terrainSize; row++) {    for (int col=0; col < terrainSize; col++) {      float xDisplacement=(col - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getXLength();      float zDisplacement=(row - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getZLength();      GameItem terrainBlock=new GameItem(heightMapMesh.getMesh());      terrainBlock.setScale(scale);      terrainBlock.setPosition(xDisplacement,0,zDisplacement);      gameItems[row * terrainSize + col]=terrainBlock;      boundingBoxes[row][col]=getBoundingBox(terrainBlock);    }  }}  }
class C{  public InputFieldDialog(final String LABEL_KEY){  this(I18n.tr("Input"),LABEL_KEY);}  }
class C{  private char readChar() throws IOException {  int x=readByte() & 0xff;  if (x < 0x80) {    return (char)x;  } else   if (x >= 0xe0) {    return (char)(((x & 0xf) << 12) + ((readByte() & 0x3f) << 6) + (readByte() & 0x3f));  } else {    return (char)(((x & 0x1f) << 6) + (readByte() & 0x3f));  }}  }
class C{  public boolean readBoundary() throws IOException {  byte[] marker=new byte[2];  boolean nextChunk=false;  head+=boundaryLength;  marker[0]=readByte();  if (marker[0] == LF) {    return true;  }  marker[1]=readByte();  if (arrayequals(marker,STREAM_TERMINATOR,2)) {    nextChunk=false;  } else   if (arrayequals(marker,FIELD_SEPARATOR,2)) {    nextChunk=true;  } else {    throw new FileUploadException(MalformedStreamException,"Unexpected characters follow a boundary");  }  return nextChunk;}  }
class C{  public void generatePotentialMenuTimes(TimeIncrement timeIncrement,LocalTime optionalStartTime,LocalTime optionalEndTime){  LocalTime startTime=(optionalStartTime == null) ? LocalTime.MIN : optionalStartTime;  LocalTime endTime=(optionalEndTime == null) ? LocalTime.MAX : optionalEndTime;  potentialMenuTimes=new ArrayList<LocalTime>();  int increment=timeIncrement.minutes;  LocalTime entry=LocalTime.MIDNIGHT;  boolean continueLoop=true;  while (continueLoop) {    if (PickerUtilities.isLocalTimeInRange(entry,startTime,endTime,true)) {      potentialMenuTimes.add(entry);    }    entry=entry.plusMinutes(increment);    continueLoop=(!(LocalTime.MIDNIGHT.equals(entry)));  }}  }
class C{  @Override public void updateFinished(){  determineNumberOfClusters();}  }
class C{  private static void renumProviders(){  Provider[] p=Services.getProviders();  for (int i=0; i < p.length; i++) {    p[i].setProviderNumber(i + 1);  }}  }
class C{  public boolean isOk(){  return this.ok;}  }
class C{  public void sessionDestroyed(HttpSessionEvent event){  String nativeId=event.getSession().getId();  try {    String sessionId=SessionCachingFilter.getSessionManager().destroyNativeSession(nativeId);    LOG.debug("Received sessionDestroyed event for native session {} (wrapped by {})",nativeId,sessionId);  } catch (  DistributedSystemDisconnectedException dex) {    LOG.debug("Cache disconnected - unable to destroy native session {0}",nativeId);  }}  }
class C{  public boolean isNfsMountCreationRequired(){  return nfsMountCreationRequired;}  }
class C{  public void addFillOutsideLine(FillOutsideLine fill){  mFillBelowLine.add(fill);}  }
class C{  public void requestAutoFocus(Handler handler,int message){  if (camera != null && previewing) {    autoFocusCallback.setHandler(handler,message);    camera.autoFocus(autoFocusCallback);  }}  }
class C{  public static ComponentRelationshipBuilder component(String componentName){  return new ComponentRelationshipBuilder(componentName);}  }
class C{  public static final String format(ReadOnlyVector3 vec){  if (vec == null) {    return ("");  }  return (String.format(Landscape.stringFormat,vec.getX()) + "," + String.format(Landscape.stringFormat,vec.getY())+ ","+ String.format(Landscape.stringFormat,vec.getZ()));}  }
class C{  void sendMessage(ChannelData channelData,TransportAddress srcAddr,TransportAddress remoteAddr) throws IllegalArgumentException, IOException, StunException {  boolean pad=srcAddr.getTransport() == Transport.TCP || srcAddr.getTransport() == Transport.TLS;  sendMessage(channelData.encode(pad),srcAddr,remoteAddr);}  }
class C{  public static LazyPStackX<Integer> range(int start,int end){  return fromStreamS(ReactiveSeq.range(start,end));}  }
class C{  public UnchangeableAllowingOnBehalfActingException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public static Complex conjugate(Complex c){  return new Complex(c.real,-c.imag);}  }
class C{  public JRadioButtonMenuItem(String text,boolean selected){  this(text);  setSelected(selected);}  }
class C{  private static void appendNamedParameter(StringBuffer sb,String name,Object value){  if (value != null) {    sb.append(name).append("=\"").append(value).append("\" ");  }}  }
class C{  public void addValue(String key,BigDecimal val,String comment) throws HeaderCardException {  addHeaderCard(key,new HeaderCard(key,val,comment));}  }
class C{  public static void clearCache(){  initCache();  m_Cache.clear();}  }
class C{  @Override public final boolean hasStableIds(){  return true;}  }
class C{  public static Element createElementInEncryptionSpace(Document doc,String elementName){  if (doc == null) {    throw new RuntimeException("Document is null");  }  if ((xencPrefix == null) || (xencPrefix.length() == 0)) {    return doc.createElementNS(EncryptionConstants.EncryptionSpecNS,elementName);  }  return doc.createElementNS(EncryptionConstants.EncryptionSpecNS,xencPrefix + ":" + elementName);}  }
class C{  public int calcColumnWidth(int col){  return calcColumnWidth(getJTable(),col);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return m_arg0.execute(xctxt).bool() ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  public static boolean isControlCharacter(char c){  return c < 32 || c == 127;}  }
class C{  @SuppressWarnings("unchecked") public T withResult(Object result){  response.result=result;  return (T)this;}  }
class C{  public static String convertExchangeShortNameToClassname(String shortExchangeName){  if (BITSTAMP_EXCHANGE_NAME.equalsIgnoreCase(shortExchangeName)) {    return BitstampExchange.class.getName();  } else   if (BTCE_EXCHANGE_NAME.equalsIgnoreCase(shortExchangeName)) {    return BTCEExchange.class.getName();  } else   if (CAMPBX_EXCHANGE_NAME.equalsIgnoreCase(shortExchangeName)) {    return CampBXExchange.class.getName();  } else   if (OPEN_EXCHANGE_RATES_EXCHANGE_NAME.equalsIgnoreCase(shortExchangeName)) {    return OERExchange.class.getName();  } else   if (VIRTEX_EXCHANGE_NAME.equalsIgnoreCase(shortExchangeName)) {    return VirtExExchange.class.getName();  } else {    return null;  }}  }
class C{  public SQLNonTransientConnectionException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  private void tryScrollBackToTopAbortRefresh(){  tryScrollBackToTop();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:30.780 -0500",hash_original_method="373B413D23312B4F586E9709CD9454D3",hash_generated_method="4885D96B2E3A8FE3ADAF1F0D12C568CC") private static String displayNameFor(int off){  off=off / 1000 / 60;  char[] buf=new char[9];  buf[0]='G';  buf[1]='M';  buf[2]='T';  if (off < 0) {    buf[3]='-';    off=-off;  } else {    buf[3]='+';  }  int hours=off / 60;  int minutes=off % 60;  buf[4]=(char)('0' + hours / 10);  buf[5]=(char)('0' + hours % 10);  buf[6]=':';  buf[7]=(char)('0' + minutes / 10);  buf[8]=(char)('0' + minutes % 10);  return new String(buf);}  }
class C{  public static Integer evictionPolicyMaxSize(@Nullable EvictionPolicy plc){  if (plc instanceof LruEvictionPolicyMBean)   return ((LruEvictionPolicyMBean)plc).getMaxSize();  if (plc instanceof RandomEvictionPolicyMBean)   return ((RandomEvictionPolicyMBean)plc).getMaxSize();  if (plc instanceof FifoEvictionPolicyMBean)   return ((FifoEvictionPolicyMBean)plc).getMaxSize();  return null;}  }
class C{  public void fillInInvokerStackTrace(){  getCause().setStackTrace(Thread.currentThread().getStackTrace());}  }
class C{  public String pullRequestsUrl(String account,String collection,String repoId){  Objects.requireNonNull(repoId,"Repository id required");  return getTeamBaseUrl(account,collection) + format(PULL_REQUESTS,repoId) + getApiVersion();}  }
class C{  @Override public synchronized boolean equals(Object object){  if (this == object) {    return true;  }  if (object instanceof List) {    List<?> list=(List<?>)object;    if (list.size() != elementCount) {      return false;    }    int index=0;    Iterator<?> it=list.iterator();    while (it.hasNext()) {      Object e1=elementData[index++], e2=it.next();      if (!(e1 == null ? e2 == null : e1.equals(e2))) {        return false;      }    }    return true;  }  return false;}  }
class C{  private void processAnsiCommandCharacter(char ansiCommandCharacter){switch (ansiCommandCharacter) {case '@':    processAnsiCommand_atsign();  break;case 'A':processAnsiCommand_A();break;case 'B':processAnsiCommand_B();break;case 'C':processAnsiCommand_C();break;case 'D':processAnsiCommand_D();break;case 'd':processAnsiCommand_d();break;case 'E':processAnsiCommand_E();break;case 'F':processAnsiCommand_F();break;case 'G':processAnsiCommand_G();break;case 'H':processAnsiCommand_H();break;case 'h':processAnsiCommand_h();break;case 'J':processAnsiCommand_J();break;case 'K':processAnsiCommand_K();break;case 'L':processAnsiCommand_L();break;case 'l':processAnsiCommand_l();break;case 'M':processAnsiCommand_M();break;case 'm':processAnsiCommand_m();break;case 'n':processAnsiCommand_n();break;case 'P':processAnsiCommand_P();break;case 'r':processAnsiCommand_r();break;case 'S':processAnsiCommand_S();break;case 'T':processAnsiCommand_T();break;case 'X':break;case 'Z':break;default :Logger.log("Ignoring unsupported ANSI command character: '" + ansiCommandCharacter + "'");break;}}  }
class C{  private JSONWriter append(String string) throws JSONException {  if (string == null) {    throw new JSONException("Null pointer");  }  if (this.mode == 'o' || this.mode == 'a') {    try {      if (this.comma && this.mode == 'a') {        this.writer.write(',');      }      this.writer.write(string);    } catch (    IOException e) {      throw new JSONException(e);    }    if (this.mode == 'o') {      this.mode='k';    }    this.comma=true;    return this;  }  throw new JSONException("Value out of sequence.");}  }
class C{  public DatagramReader(final byte[] byteArray){  byteStream=new ByteArrayInputStream(Arrays.copyOf(byteArray,byteArray.length));  currentByte=0;  currentBitIndex=-1;}  }
class C{  public synchronized Stream<Map.Entry<ID,Type>> stream(){  return registered.entrySet().stream();}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  protected int availableIDsSize(){  return this.idsAvailable.size();}  }
class C{  public void list(){  Iterator<String> iter=lastNames.iterator();  while (iter.hasNext()) {    System.out.println(iter.next());  }  System.out.println();  iter=doubleLastNames.iterator();  while (iter.hasNext()) {    System.out.println(iter.next());  }  System.out.println();  iter=firstNames.iterator();  while (iter.hasNext()) {    System.out.println(iter.next());  }  System.out.println();}  }
class C{  MutableBigInteger divideKnuth(MutableBigInteger b,MutableBigInteger quotient,boolean needRemainder){  if (b.intLen == 0)   throw new ArithmeticException("BigInteger divide by zero");  if (intLen == 0) {    quotient.intLen=quotient.offset=0;    return needRemainder ? new MutableBigInteger() : null;  }  int cmp=compare(b);  if (cmp < 0) {    quotient.intLen=quotient.offset=0;    return needRemainder ? new MutableBigInteger(this) : null;  }  if (cmp == 0) {    quotient.value[0]=quotient.intLen=1;    quotient.offset=0;    return needRemainder ? new MutableBigInteger() : null;  }  quotient.clear();  if (b.intLen == 1) {    int r=divideOneWord(b.value[b.offset],quotient);    if (needRemainder) {      if (r == 0)       return new MutableBigInteger();      return new MutableBigInteger(r);    } else {      return null;    }  }  if (intLen >= KNUTH_POW2_THRESH_LEN) {    int trailingZeroBits=Math.min(getLowestSetBit(),b.getLowestSetBit());    if (trailingZeroBits >= KNUTH_POW2_THRESH_ZEROS * 32) {      MutableBigInteger a=new MutableBigInteger(this);      b=new MutableBigInteger(b);      a.rightShift(trailingZeroBits);      b.rightShift(trailingZeroBits);      MutableBigInteger r=a.divideKnuth(b,quotient);      r.leftShift(trailingZeroBits);      return r;    }  }  return divideMagnitude(b,quotient,needRemainder);}  }
class C{  public void applyComponentOrientation(ComponentOrientation o){  possiblyFixCursor(o.isLeftToRight());  super.applyComponentOrientation(o);}  }
class C{  public RandomBallCoverOneShot(List<V> vecs,DistanceMetric dm,int s,ExecutorService execServ){  this.dm=dm;  this.s=s;  this.allVecs=new ArrayList<V>(vecs);  if (execServ instanceof FakeExecutor)   distCache=dm.getAccelerationCache(allVecs); else   distCache=dm.getAccelerationCache(vecs,execServ);  IntList allIndices=new IntList(allVecs.size());  ListUtils.addRange(allIndices,0,allVecs.size(),1);  try {    setUp(allIndices,execServ);  } catch (  InterruptedException ex) {    try {      setUp(allIndices,new FakeExecutor());    } catch (    InterruptedException ex1) {    }  }}  }
class C{  public static Bitmap createThumbnailBitmap(Context context,Uri mediaUri,int maxThumbWidth,int maxThumbHeight){  Bitmap thumbnailBitmap=null;  ResourceUtils.Resource resource=ResourceUtils.openResource(context,mediaUri,null);  if (null == resource) {    return null;  }  try {    BitmapFactory.Options options=new BitmapFactory.Options();    options.inPreferredConfig=Bitmap.Config.ARGB_8888;    resource=ResourceUtils.openResource(context,mediaUri,null);    Bitmap fullSizeBitmap=null;    if (null != resource) {      try {        fullSizeBitmap=BitmapFactory.decodeStream(resource.mContentStream,null,options);      } catch (      Exception e) {        Log.e(LOG_TAG,"BitmapFactory.decodeStream fails " + e.getLocalizedMessage());      }    }    if (null != fullSizeBitmap) {      if ((fullSizeBitmap.getHeight() < maxThumbHeight) && (fullSizeBitmap.getWidth() < maxThumbWidth)) {        thumbnailBitmap=fullSizeBitmap;      } else {        double thumbnailWidth=maxThumbWidth;        double thumbnailHeight=maxThumbHeight;        double imageWidth=fullSizeBitmap.getWidth();        double imageHeight=fullSizeBitmap.getHeight();        if (imageWidth > imageHeight) {          thumbnailHeight=thumbnailWidth * imageHeight / imageWidth;        } else {          thumbnailWidth=thumbnailHeight * imageWidth / imageHeight;        }        try {          thumbnailBitmap=Bitmap.createScaledBitmap((null == fullSizeBitmap) ? thumbnailBitmap : fullSizeBitmap,(int)thumbnailWidth,(int)thumbnailHeight,false);        } catch (        OutOfMemoryError ex) {          Log.e(LOG_TAG,"createThumbnailBitmap " + ex.getMessage());        }      }      if (null != fullSizeBitmap) {        fullSizeBitmap.recycle();        System.gc();      }    }    if (null != resource) {      resource.mContentStream.close();    }  } catch (  Exception e) {    Log.e(LOG_TAG,"createThumbnailBitmap fails " + e.getLocalizedMessage());  }  return thumbnailBitmap;}  }
class C{  public OsmoseBug(){  open();}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  public Swagger2MarkupConfig build(){  buildNaturalOrdering();  return config;}  }
class C{  public void moveTo(int x,int y){  Rectangle r=getBounds();  translate(x - r.x,y - r.y);}  }
class C{  public boolean submitNoWake(Runnable task){  ClassLoader loader=Thread.currentThread().getContextClassLoader();  boolean isPriority=false;  boolean isQueue=true;  boolean isWake=false;  return scheduleImpl(task,loader,MAX_EXPIRE,isPriority,isQueue,isWake);}  }
class C{  private void updateMenu(){  this.removeAll();  for (  WorkspaceComponent component : workspace.getComponentList()) {    JMenu componentMenu=new JMenu(component.getName());    for (    PotentialConsumer potentialConsumer : component.getPotentialConsumers()) {      if (potentialConsumer.getDataType() == producer.getDataType()) {        CouplingMenuItem menuItem=new CouplingMenuItem(workspace,potentialConsumer.getDescription(),producer,potentialConsumer);        componentMenu.add(menuItem);      }    }    this.add(componentMenu);  }}  }
class C{  @Override public int doStartTag() throws JspException {  i=0;  return EVAL_BODY_BUFFERED;}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.765 -0400",hash_original_method="C68A979C97C9773BF4E1D97780D466BC",hash_generated_method="ABED2FB5692629886742AFEF5BC17E85") public void readFully(byte[] data,int offset,int length) throws IOException, EOFException {  int remaining=length;  while (remaining > 0) {    int location=offset + length - remaining;    int count=read(data,location,remaining);    if (-1 == count) {      throw new EOFException();    }    remaining-=count;  }}  }
class C{  public void focusLost(FocusEvent e){  ((FocusListener)a).focusLost(e);  ((FocusListener)b).focusLost(e);}  }
class C{  @Override protected EClass eStaticClass(){  return EipPackage.Literals.ROUTE;}  }
class C{  protected void basicCheck(Environment env) throws ClassNotFound {  if (tracing)   env.dtEnter("BinaryClass.basicCheck: " + getName());  if (basicChecking || basicCheckDone) {    if (tracing)     env.dtExit("BinaryClass.basicCheck: OK " + getName());    return;  }  if (tracing)   env.dtEvent("BinaryClass.basicCheck: CHECKING " + getName());  basicChecking=true;  super.basicCheck(env);  if (doInheritanceChecks) {    collectInheritedMethods(env);  }  basicCheckDone=true;  basicChecking=false;  if (tracing)   env.dtExit("BinaryClass.basicCheck: " + getName());}  }
class C{  public AnnotationFS add(AnnotationFS aOriginFs,AnnotationFS aTargetFs,JCas aJCas,int aStart,int aEnd,AnnotationFeature aFeature,Object aLabelValue) throws BratAnnotationException {  if (crossMultipleSentence || isSameSentence(aJCas,aOriginFs.getBegin(),aTargetFs.getEnd())) {    return interalAddToCas(aJCas,aStart,aEnd,aOriginFs,aTargetFs,aLabelValue,aFeature);  } else {    throw new ArcCrossedMultipleSentenceException("Arc Annotation shouldn't cross sentence boundary");  }}  }
class C{  public long size(){  long size=0;  for (int x=0; x < trees.length; x++)   size+=trees[x].child.numNodes(GPNode.NODESEARCH_ALL);  return size;}  }
class C{  public ApplicationExceptionBean(ApplicationExceptionBean template){  setId(template.getId());  setCauseStackTrace(template.getCauseStackTrace());  setMessageKey(template.getMessageKey());  setMessageParams(template.getMessageParams());}  }
class C{  private static Node createNode(final Graph2D graph2D,final INaviViewNode node){  if (node instanceof INaviGroupNode) {    return ((INaviGroupNode)node).isCollapsed() ? graph2D.getHierarchyManager().createFolderNode(graph2D) : graph2D.getHierarchyManager().createGroupNode(graph2D);  } else {    return graph2D.createNode();  }}  }
class C{  public void addPrefix(String prefix,String uri){  namespaces.put(prefix,uri);  this.prefix.put(uri,prefix);}  }
class C{  @Override public void test() throws ParameterException {  if (!list.isDefined() || !length.isDefined()) {    return;  }  if (list.size() != length.intValue()) {    throw new WrongParameterValueException("Global Parameter Constraint Error." + "\nThe size of the list parameter \"" + list.getName() + "\" must be "+ length.getValue()+ ", current size is "+ list.size()+ ". The value is defined by the integer parameter "+ length.getName()+ ".\n");  }}  }
class C{  public InlineQueryResultVoice.InlineQueryResultVoiceBuilder title(String title){  this.title=title;  return this;}  }
class C{  private List<DiffEntry> commitToCommit(String commitAId,String commitBId,DiffFormatter formatter) throws IOException {  if (commitAId == null) {    commitAId=Constants.HEAD;  }  ObjectId commitA=repository.resolve(commitAId);  if (commitA == null) {    throw new IllegalArgumentException("Invalid commit id " + commitAId);  }  ObjectId commitB=repository.resolve(commitBId);  if (commitB == null) {    throw new IllegalArgumentException("Invalid commit id " + commitBId);  }  RevTree treeA;  try (RevWalk revWalkA=new RevWalk(repository)){    treeA=revWalkA.parseTree(commitA);  }   RevTree treeB;  try (RevWalk revWalkB=new RevWalk(repository)){    treeB=revWalkB.parseTree(commitB);  }   if (!request.isNoRenames()) {    formatter.setDetectRenames(true);    int renameLimit=request.getRenameLimit();    if (renameLimit > 0) {      formatter.getRenameDetector().setRenameLimit(renameLimit);    }  }  return formatter.scan(treeA,treeB);}  }
class C{  @Override public void writeBatch() throws IOException {  if (getInstances() == null) {    throw new IOException("No instances to save");  }  if (getRetrieval() == INCREMENTAL) {    throw new IOException("Batch and incremental saving cannot be mixed.");  }  setRetrieval(BATCH);  setWriteMode(WRITE);  if ((retrieveFile() == null) && (getWriter() == null)) {    for (int i=0; i < getInstances().numInstances(); i++) {      System.out.println(instanceToSvmlight(getInstances().instance(i)));    }    setWriteMode(WAIT);  } else {    PrintWriter outW=new PrintWriter(getWriter());    for (int i=0; i < getInstances().numInstances(); i++) {      outW.println(instanceToSvmlight(getInstances().instance(i)));    }    outW.flush();    outW.close();    setWriteMode(WAIT);    outW=null;    resetWriter();    setWriteMode(CANCEL);  }}  }
class C{  public void loadLocal(final int local){  loadInsn(getLocalType(local),local);}  }
class C{  private void testArrayAndOther(OverloadedMethodsSubset oms){  assertEquals(Serializable.class,oms.getCommonSupertypeForUnwrappingHint(int[].class,String.class));  assertEquals(Serializable.class,oms.getCommonSupertypeForUnwrappingHint(Object[].class,String.class));  assertEquals(Object.class,oms.getCommonSupertypeForUnwrappingHint(int[].class,List.class));  assertEquals(Object.class,oms.getCommonSupertypeForUnwrappingHint(Object[].class,List.class));  assertEquals(int[].class,oms.getCommonSupertypeForUnwrappingHint(int[].class,int[].class));  assertEquals(Object[].class,oms.getCommonSupertypeForUnwrappingHint(Object[].class,Object[].class));}  }
class C{  private void addNewAccessor(final ITypeBinding type,final IVariableBinding field,final String contents,final ListRewrite rewrite,final ASTNode insertion){  final String delimiter=StubUtility.getLineDelimiterUsed();  final MethodDeclaration declaration=(MethodDeclaration)rewrite.getASTRewrite().createStringPlaceholder(CodeFormatterUtil.format(CodeFormatter.K_CLASS_BODY_DECLARATIONS,contents,0,delimiter),ASTNode.METHOD_DECLARATION);  if (insertion != null)   rewrite.insertBefore(declaration,insertion,null); else   rewrite.insertLast(declaration,null);}  }
class C{  public Rectangle2D createProperBounds(double x1,double y1,double x2,double y2){  double x=Math.min(x1,x2);  double y=Math.min(y1,y2);  double w=Math.abs(x1 - x2);  double h=Math.abs(y1 - y2);  return new Rectangle2D.Double(x,y,w,h);}  }
class C{  public void revert(){  orientation=orientation == RIGHT ? LEFT : RIGHT;}  }
class C{  PrefixExpression(AST ast){  super(ast);}  }
class C{  static int svd_imin(int a,int b){  return Math.min(a,b);}  }
class C{  public ColladaAccessor(String ns){  super(ns);}  }
class C{  public synchronized int lastIndexOf(Object object,int location){  if (location < elementCount) {    if (object != null) {      for (int i=location; i >= 0; i--) {        if (object.equals(elementData[i])) {          return i;        }      }    } else {      for (int i=location; i >= 0; i--) {        if (elementData[i] == null) {          return i;        }      }    }    return -1;  }  throw arrayIndexOutOfBoundsException(location,elementCount);}  }
class C{  public static synchronized X509CertImpl intern(X509Certificate c) throws CertificateException {  if (c == null) {    return null;  }  boolean isImpl=c instanceof X509CertImpl;  byte[] encoding;  if (isImpl) {    encoding=((X509CertImpl)c).getEncodedInternal();  } else {    encoding=c.getEncoded();  }  X509CertImpl newC=getFromCache(certCache,encoding);  if (newC != null) {    return newC;  }  if (isImpl) {    newC=(X509CertImpl)c;  } else {    newC=new X509CertImpl(encoding);    encoding=newC.getEncodedInternal();  }  addToCache(certCache,encoding,newC);  return newC;}  }
class C{  protected void checkSlice(int slice){  if (slice < 0 || slice >= slices)   throw new IndexOutOfBoundsException("Attempted to access " + toStringShort() + " at slice="+ slice);}  }
class C{  public static float rotateX(float pX,float pY,float cX,float cY,float angleInDegrees){  double angle=Math.toRadians(angleInDegrees);  return (float)(Math.cos(angle) * (pX - cX) - Math.sin(angle) * (pY - cY) + cX);}  }
class C{  private BaseToken fetchTokenLocal(TokenOnWire tw){  BaseToken verificationToken=null;  URI tkId=tw.getTokenId();  if (!tw.isProxyToken()) {    verificationToken=_dbClient.queryObject(Token.class,tkId);    if (null != verificationToken && !checkExpiration(((Token)verificationToken),true)) {      _log.warn("Token found in database but is expired: {}",verificationToken.getId());      return null;    }  } else {    verificationToken=_dbClient.queryObject(ProxyToken.class,tkId);    if (null != verificationToken && !checkExpiration((ProxyToken)verificationToken)) {      _log.warn("ProxyToken found in database but is expired: {}",verificationToken.getId());      return null;    }  }  if (verificationToken == null) {    _log.error("Could not find token with id {} for validation",tkId);  }  return verificationToken;}  }
class C{  public SignatureVisitor visitSuperclass(){  return this;}  }
class C{  public byte byteValue(){  return toNumber().byteValue();}  }
class C{  public static EqualityExpression eq(String propertyName,Object value){  return new EqualityExpression(Operator.EQUAL,propertyName,value);}  }
class C{  public CtClass makeNestedClass(String name,boolean isStatic){  throw new RuntimeException(getName() + " is not a class");}  }
class C{  public int processBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  return (encrypting) ? encryptBlock(in,inOff,out,outOff) : decryptBlock(in,inOff,out,outOff);}  }
class C{  public boolean containsProperly(Geometry g){  if (!baseGeom.getEnvelopeInternal().contains(g.getEnvelopeInternal()))   return false;  return baseGeom.relate(g,"T**FF*FF*");}  }
class C{  public AbstractLocalContainerStub(){}  }
class C{  public GlowInventoryView(HumanEntity player,Inventory top){  this(player,top.getType(),top,player.getInventory());}  }
class C{  public NotificationChain basicSetReturnTypeRef(TypeRef newReturnTypeRef,NotificationChain msgs){  TypeRef oldReturnTypeRef=returnTypeRef;  returnTypeRef=newReturnTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,TypesPackage.TFUNCTION__RETURN_TYPE_REF,oldReturnTypeRef,newReturnTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void navigateToHome(Context context){  if (context != null) {    context.startActivity(new Intent(context,HomeActivity.class));  }}  }
class C{  public void readExif(String inFileName) throws FileNotFoundException, IOException {  if (inFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  InputStream is=null;  try {    is=(InputStream)new BufferedInputStream(new FileInputStream(inFileName));    readExif(is);  } catch (  IOException e) {    closeSilently(is);    throw e;  }  is.close();}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public DOTGenerator(Grammar grammar){  this.grammar=grammar;}  }
