class C{  protected void generatePseudoKingMoves(PriorityMoveList moves){  long fromBB=getPieceBB(colorToMove,KING);  int fromSquare=bitscanForward(fromBB);  long toBB=kingMove(fromSquare) & getNotColorToMoveBB();  generatePseudoKingCastlingMoves(fromBB,moves);  while (toBB != 0) {    int toSquare=bitscanForward(toBB);    int contents=getPieceWithPromoteMask(toSquare);    addMove(new Move(fromSquare,toSquare,KING,colorToMove,contents),moves);    toBB=bitscanClear(toBB);    toSquare=bitscanForward(toBB);  }}  }
class C{  void replaceAtt(int nTargetNode,String sName,ArrayList<String> values){  Attribute newAtt=new Attribute(sName,values);  if (m_Instances.classIndex() == nTargetNode) {    m_Instances.setClassIndex(-1);    m_Instances.deleteAttributeAt(nTargetNode);    m_Instances.insertAttributeAt(newAtt,nTargetNode);    m_Instances.setClassIndex(nTargetNode);  } else {    m_Instances.deleteAttributeAt(nTargetNode);    m_Instances.insertAttributeAt(newAtt,nTargetNode);  }}  }
class C{  public Process executeAsync(final CommandLine command) throws IOException {  return executeAsync(command,(Map<String,String>)null);}  }
class C{  public boolean isCreateReversal(){  Object oo=get_Value(COLUMNNAME_IsCreateReversal);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public double x(){  return x;}  }
class C{  public static IndexKeyInfo compileIndexKeyInfo(IndexMultiKey indexMultiKey,String[] hashIndexPropsProvided,SubordPropHashKey[] hashJoinedProps,String[] rangeIndexPropsProvided,SubordPropRangeKey[] rangeJoinedProps){  IndexedPropDesc[] indexedKeyProps=indexMultiKey.getHashIndexedProps();  boolean isCoerceHash=false;  SubordPropHashKey[] hashesDesc=new SubordPropHashKey[indexedKeyProps.length];  Class[] hashPropCoercionTypes=new Class[indexedKeyProps.length];  for (int i=0; i < indexedKeyProps.length; i++) {    String indexField=indexedKeyProps[i].getIndexPropName();    int index=CollectionUtil.findItem(hashIndexPropsProvided,indexField);    if (index == -1) {      throw new IllegalStateException("Could not find index property for lookup '" + indexedKeyProps[i]);    }    hashesDesc[i]=hashJoinedProps[index];    hashPropCoercionTypes[i]=indexedKeyProps[i].getCoercionType();    ExprEvaluator evaluatorHashkey=hashesDesc[i].getHashKey().getKeyExpr().getExprEvaluator();    if (evaluatorHashkey != null && JavaClassHelper.getBoxedType(indexedKeyProps[i].getCoercionType()) != JavaClassHelper.getBoxedType(evaluatorHashkey.getType())) {      isCoerceHash=true;    }  }  indexedKeyProps=indexMultiKey.getRangeIndexedProps();  SubordPropRangeKey[] rangesDesc=new SubordPropRangeKey[indexedKeyProps.length];  Class[] rangePropCoercionTypes=new Class[indexedKeyProps.length];  boolean isCoerceRange=false;  for (int i=0; i < indexedKeyProps.length; i++) {    String indexField=indexedKeyProps[i].getIndexPropName();    int index=CollectionUtil.findItem(rangeIndexPropsProvided,indexField);    if (index == -1) {      throw new IllegalStateException("Could not find range property for lookup '" + indexedKeyProps[i]);    }    rangesDesc[i]=rangeJoinedProps[index];    rangePropCoercionTypes[i]=rangeJoinedProps[index].getCoercionType();    if (JavaClassHelper.getBoxedType(indexedKeyProps[i].getCoercionType()) != JavaClassHelper.getBoxedType(rangePropCoercionTypes[i])) {      isCoerceRange=true;    }  }  return new IndexKeyInfo(Arrays.asList(hashesDesc),new CoercionDesc(isCoerceHash,hashPropCoercionTypes),Arrays.asList(rangesDesc),new CoercionDesc(isCoerceRange,rangePropCoercionTypes));}  }
class C{  public static BigDecimal findProductMrpQoh(String mrpId,GenericValue product,String facilityId,LocalDispatcher dispatcher,Delegator delegator){  return findProductMrpQoh(mrpId,product.getString("productId"),facilityId,dispatcher,delegator);}  }
class C{  public static void hideFragment(Activity activity,int containerViewId,Fragment previousFragment,Fragment newFragment,Bundle bundle,boolean canBack){  FragmentTransaction mFragmentTransaction=activity.getFragmentManager().beginTransaction();  if (bundle != null) {    newFragment.setArguments(bundle);  }  if (null != previousFragment) {    mFragmentTransaction.hide(previousFragment);  }  mFragmentTransaction.add(containerViewId,newFragment,newFragment.getClass().getName());  if (canBack && previousFragment != null) {    mFragmentTransaction.addToBackStack(newFragment.getClass().getName());  }  mFragmentTransaction.commit();}  }
class C{  public ProjectType(){}  }
class C{  public VNXeCommandResult deleteLunsFromConsistencyGroup(String cgId,List<String> luns){  LunGroupModifyParam param=new LunGroupModifyParam();  List<LunAddParam> lunDelete=new ArrayList<LunAddParam>();  for (  String lunId : luns) {    VNXeBase lun=new VNXeBase(lunId);    LunAddParam lunAdd=new LunAddParam();    lunAdd.setLun(lun);    lunDelete.add(lunAdd);  }  param.setLunDelete(lunDelete);  ConsistencyGroupRequests req=new ConsistencyGroupRequests(_khClient);  return req.modifyConsistencyGroupSync(cgId,param);}  }
class C{  @Override public void close() throws IOException {  running.set(false);  service.shutdown();  try {    if (!service.awaitTermination(SHUTDOWN_TIMEOUT,TimeUnit.SECONDS)) {      LOG.error("Was not able to process all remaining spans to write upon closing in: " + SHUTDOWN_TIMEOUT + " "+ TimeUnit.SECONDS+ ". There could be un-sent spans still left."+ "  They have been dropped.");    }  } catch (  InterruptedException e1) {    LOG.warn("Thread interrupted when terminating executor.",e1);  }}  }
class C{  public static String toJSONString(List list){  if (list == null)   return "null";  boolean first=true;  StringBuffer sb=new StringBuffer();  Iterator iter=list.iterator();  sb.append('[');  while (iter.hasNext()) {    if (first)     first=false; else     sb.append(',');    Object value=iter.next();    if (value == null) {      sb.append("null");      continue;    }    sb.append(JSONValue.toJSONString(value));  }  sb.append(']');  return sb.toString();}  }
class C{  public static int visit(int x){  lastVisited=x;  return x;}  }
class C{  public boolean isTagEnabled(String tag){  try {    return mService.isTagEnabled(tag);  } catch (  RemoteException e) {    return false;  }}  }
class C{  private static boolean removeVPoolFromUnManagedVolumeObjectVPools(VirtualPool virtualPool,UnManagedDiscoveredObject unManagedObject){  if (unManagedObject.getSupportedVpoolUris().contains(virtualPool.getId().toString())) {    _log.info("Removing Invalid VPool {}",virtualPool.getId().toString());    unManagedObject.getSupportedVpoolUris().remove(virtualPool.getId().toString());    return true;  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.350 -0500",hash_original_method="EC5E9CE8FA57602393C1D5810AE2C351",hash_generated_method="847260701FB52388FF90DC2C4169A50B") public static int calculateSignalLevel(int rssi,int numLevels){  if (rssi <= MIN_RSSI) {    return 0;  } else   if (rssi >= MAX_RSSI) {    return numLevels - 1;  } else {    float inputRange=(MAX_RSSI - MIN_RSSI);    float outputRange=(numLevels - 1);    return (int)((float)(rssi - MIN_RSSI) * outputRange / inputRange);  }}  }
class C{  @Override protected void customize(GeneratorPanel<ILineSegment> gp){  Generator<ILineSegment> gen1=new UniformGenerator(1);  Generator<ILineSegment> gen2=new DoubleGenerator(1.0,1.0);  Generator<ILineSegment> gen3=new IntegerGenerator(100,100);  Generator<ILineSegment> gen4=new SlidingLadderGenerator(100);  Generator<ILineSegment> gen4a=new GridGenerator(100,5);  Generator<ILineSegment> gen5=new HubGenerator(40,100,100);  Generator<ILineSegment> gen6=new LoadFromFileGenerator("");  gp.addGenerator("Uniform",gen1);  gp.addGenerator("Double",gen2);  gp.addGenerator("Integer",gen3);  gp.addGenerator("Sliding Ladder",gen4);  gp.addGenerator("Grid",gen4a);  gp.addGenerator("Wheel Hub",gen5);  gp.addGenerator("File...",gen6);}  }
class C{  public DomainObjectExceptionBean(ApplicationExceptionBean sup,ClassEnum classEnum){  super(sup);  setClassEnum(classEnum);}  }
class C{  public boolean isNext(char c){  if (!hasNext())   return false;  return lcText[pos + 1] == c;}  }
class C{  public String join(String separator) throws JSONException {  int len=this.length();  StringBuilder sb=new StringBuilder();  for (int i=0; i < len; i+=1) {    if (i > 0) {      sb.append(separator);    }    sb.append(JSONObject.valueToString(this.list.get(i)));  }  return sb.toString();}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  public static void startDelete(ConversationQueryHandler handler,int token,boolean deleteAll,Collection<Long> threadIds){synchronized (sDeletingThreadsLock) {    if (DELETEDEBUG) {      Log.v(TAG,"Conversation startDelete sDeletingThreads: " + sDeletingThreads);    }    if (sDeletingThreads) {      Log.e(TAG,"startDeleteAll already in the middle of a delete",new Exception());    }    sDeletingThreads=true;    for (    long threadId : threadIds) {      Uri uri=ContentUris.withAppendedId(Threads.CONTENT_URI,threadId);      String selection=deleteAll ? null : "locked=0";      handler.setDeleteToken(token);      handler.startDelete(token,new Long(threadId),uri,selection,null);      DraftCache.getInstance().setDraftState(threadId,false);    }  }}  }
class C{  protected long pack(int upper,int lower){  return (((long)upper) << 32) | lower;}  }
class C{  public void startGame(){  Bukkit.getPluginManager().callEvent(new GameStartEvent());  final String MAPS_PATH=PLUGIN.getConfiguration().getSettingsConfig().getString("MapsPath");  final String ARENAS_PATH=PLUGIN.getConfiguration().getSettingsConfig().getString("ArenasPath");  this.mapSelection=VOTE_MANAGER.getWinningMap();  this.gameFile=new GameFile(ARENAS_PATH,mapSelection + ".yml");  this.arenaWorld=Bukkit.createWorld(new WorldCreator(MAPS_PATH + gameFile.getConfig().getString("World")));  this.arenaWorld.setSpawnFlags(false,false);  this.arenaWorld.setGameRuleValue("doMobSpawning","false");  this.spawns=gameFile.getLocations(arenaWorld,"Spawns");  this.doors=gameFile.getDoors(arenaWorld);  this.checkpoints=gameFile.getCheckpoints(arenaWorld);  this.nukeRoom=gameFile.getLocation(arenaWorld,"Nukeroom");  this.handleStart();  VOTE_MANAGER.resetVotes();  Bukkit.getConsoleSender().sendMessage(Utils.color("&6Start game method"));  for (  Entity entity : arenaWorld.getEntities()) {    if (!(entity instanceof Player) && (entity instanceof Animals || entity instanceof Monster)) {      entity.remove();    }  }}  }
class C{  public void testComputeZ(){  Geometry linearGeom=read("LINESTRING (0 0 0, 10 10 10)");  LengthIndexedLine indexedLine=new LengthIndexedLine(linearGeom);  double projIndex=indexedLine.project(new Coordinate(5,5));  Coordinate projPt=indexedLine.extractPoint(projIndex);  assertTrue(projPt.equals3D(new Coordinate(5,5,5)));}  }
class C{  public static byte[] hexStringToBytes(final String hexString){  return DatatypeConverter.parseHexBinary(hexString);}  }
class C{  public static GdbTargetRemote parse(GdbOutput gdbOutput) throws GdbParseException, DebuggerException {  String output=gdbOutput.getOutput();  Matcher matcher=GDB_TARGET_REMOTE.matcher(output);  if (matcher.find()) {    String host=matcher.group(1);    String port=matcher.group(2);    return new GdbTargetRemote(host,port);  } else   if (CONNECTION_TIMED_OUT.matcher(output).find()) {    throw new DebuggerException(output);  }  throw new GdbParseException(GdbTargetRemote.class,output);}  }
class C{  public ByteArrayBuffer(final int pos,final int limit,final byte[] buf){  if (pos < 0)   throw new IllegalArgumentException("pos<0");  if (pos > limit)   throw new IllegalArgumentException("pos>limit");  if (buf == null)   throw new IllegalArgumentException("buf");  if (limit > buf.length)   throw new IllegalArgumentException("limit>buf.length");  this.buf=buf;  this.pos=pos;  this.limit=limit;}  }
class C{  public CreatureRespawnPoint(StendhalRPZone zone,int x,int y,Creature creature,int maximum,final Observer observer){  this(zone,x,y,creature,maximum);  this.observers.add(observer);}  }
class C{  public static void runJavadoc(String[] javadocArgs){  if (com.sun.tools.javadoc.Main.execute(javadocArgs) != 0) {    throw new Error("Javadoc failed to execute");  }}  }
class C{  @org.junit.Test public void testMath() throws Exception {  Bot bot=Bot.createInstance();  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  text.input("1 + 1");  String response=waitForOutput(output);  if (!response.equals("1 + 1 = 2") && !response.equals("1 + 1 = two")) {    fail("incorrect:" + response);  }  bot.shutdown();}  }
class C{  public final static boolean darkSquare(int x,int y){  return (x & 1) == (y & 1);}  }
class C{  public void incrementConsciousnessLevel(int amount){  this.consciousnessLevel=this.consciousnessLevel + amount;  if (this.consciousnessLevel > 5) {    incrementAccessCount();  }}  }
class C{  public WindowMenuListener(JMenu windowMenu,JDesktopPane desktopPane){  if (windowMenu == null) {    throw new NullPointerException("Window menu must not be null.");  }  if (desktopPane == null) {    throw new NullPointerException("Desktop pane must not be null.");  }  this.windowMenu=windowMenu;  this.desktopPane=desktopPane;  itemsToFrames=new Hashtable();}  }
class C{  public String generateNamedAttributeJspFragment(Node.NamedAttribute n,String tagHandlerVar) throws JasperException {  String varName=n.getTemporaryVariableName();  out.printin("javax.servlet.jsp.tagext.JspFragment " + varName + " = ");  generateJspFragment(n,tagHandlerVar);  out.println(";");  return varName;}  }
class C{  public NotIsolatedAnalysis(DirectedGraph dg,LatestComputation latest,Map equivRhsMap){  this(dg,latest,equivRhsMap,new ArrayPackedSet(new CollectionFlowUniverse(equivRhsMap.values())));}  }
class C{  public Class<? extends BatchEnvironment> envClass(){  return BatchEnvironment.class;}  }
class C{  public static boolean isPublic(Member member){  return Modifier.isPublic(member.getModifiers());}  }
class C{  public boolean isRotationEnabled(){  return mIsRotationEnabled;}  }
class C{  protected TraceType_Impl(){  super();}  }
class C{  public boolean hasLocations(){  return super.hasElement(Where.KEY);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ASSOCIATION_CLASS_CONTENT___COMMENT_1:    getComment_1().clear();  getComment_1().addAll((Collection<? extends Comment_>)newValue);return;case UmplePackage.ASSOCIATION_CLASS_CONTENT___CLASS_DEFINITION_1:getClassDefinition_1().clear();getClassDefinition_1().addAll((Collection<? extends ClassDefinition_>)newValue);return;case UmplePackage.ASSOCIATION_CLASS_CONTENT___POSITION_1:getPosition_1().clear();getPosition_1().addAll((Collection<? extends Position_>)newValue);return;case UmplePackage.ASSOCIATION_CLASS_CONTENT___DISPLAY_COLOR_1:getDisplayColor_1().clear();getDisplayColor_1().addAll((Collection<? extends DisplayColor_>)newValue);return;case UmplePackage.ASSOCIATION_CLASS_CONTENT___INVARIANT_1:getInvariant_1().clear();getInvariant_1().addAll((Collection<? extends Invariant_>)newValue);return;case UmplePackage.ASSOCIATION_CLASS_CONTENT___SOFTWARE_PATTERN_1:getSoftwarePattern_1().clear();getSoftwarePattern_1().addAll((Collection<? extends SoftwarePattern_>)newValue);return;case UmplePackage.ASSOCIATION_CLASS_CONTENT___DEPEND_1:getDepend_1().clear();getDepend_1().addAll((Collection<? extends Depend_>)newValue);return;case UmplePackage.ASSOCIATION_CLASS_CONTENT___SINGLE_ASSOCIATION_END_1:getSingleAssociationEnd_1().clear();getSingleAssociationEnd_1().addAll((Collection<? extends SingleAssociationEnd_>)newValue);return;case UmplePackage.ASSOCIATION_CLASS_CONTENT___STATE_MACHINE_1:getStateMachine_1().clear();getStateMachine_1().addAll((Collection<? extends StateMachine_>)newValue);return;case UmplePackage.ASSOCIATION_CLASS_CONTENT___ATTRIBUTE_1:getAttribute_1().clear();getAttribute_1().addAll((Collection<? extends Attribute_>)newValue);return;case UmplePackage.ASSOCIATION_CLASS_CONTENT___ASSOCIATION_1:getAssociation_1().clear();getAssociation_1().addAll((Collection<? extends Association_>)newValue);return;case UmplePackage.ASSOCIATION_CLASS_CONTENT___INLINE_ASSOCIATION_1:getInlineAssociation_1().clear();getInlineAssociation_1().addAll((Collection<? extends InlineAssociation_>)newValue);return;case UmplePackage.ASSOCIATION_CLASS_CONTENT___EXTRA_CODE_1:getExtraCode_1().clear();getExtraCode_1().addAll((Collection<? extends ExtraCode_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private void updatePlayPauseImage(boolean isPlaying){  int resId=isPlaying ? R.drawable.playlistcore_ic_pause_black : R.drawable.playlistcore_ic_play_arrow_black;  playPauseButton.setImageResource(resId);}  }
class C{  public static long floor(double a){  return (long)a;}  }
class C{  public static Variable variable(String name){  NullArgumentException.validateNotNull("Variable name",name);  return new Variable(name);}  }
class C{  public void copy(){  if (selectionStart != selectionEnd) {    Clipboard clipboard=getToolkit().getSystemClipboard();    String selection=getSelectedText();    int repeatCount=inputHandler.getRepeatCount();    StringBuffer buf=new StringBuffer();    for (int i=0; i < repeatCount; i++) {      buf.append(selection);    }    clipboard.setContents(new StringSelection(buf.toString()),null);  }}  }
class C{  public void testSecretKeyFactory06() throws NoSuchProviderException, NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  for (int i=0; i < validValues.length; i++) {    SecretKeyFactory secKF=SecretKeyFactory.getInstance(validValues[i],defaultProviderName);    assertEquals("Incorrect algorithm",secKF.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",secKF.getProvider().getName(),defaultProviderName);  }}  }
class C{  protected UnaryExpressionImpl(){  super();}  }
class C{  public static String padRight(String s,int length){  if (s.length() > length) {    throw new RuntimeException(s + " cannot be padded to length " + length+ ", it is too long");  }  String t=new String(s);  for (int i=0; i < length - s.length(); i++) {    t+=" ";  }  return t;}  }
class C{  public static void copyDirectoryRecursive(Path from,Path to) throws IOException {  LOGGER.info("Copyin complete directory from " + from + " to "+ to);  Files.walkFileTree(from,new CopyFileVisitor(to));}  }
class C{  protected void create_y_axis(int i){  Log.e("index vlaue",i + "");  float ver_height=((graphheight / label_size) * i) + border;  if (i == largest_value_set.size() - 1)   canvas.drawLine(horstart,ver_height,width - (border),ver_height,paint); else   canvas.drawLine(horstart,ver_height,border,ver_height,paint);  paint.setColor(Color.BLACK);  int Y_labels=(int)size - 1 - i;  String y_labels=String.format("%.1f",Y_labels * y_axis_ratio);  paint.setTextAlign(Paint.Align.RIGHT);  canvas.drawText(y_labels,horstart - 15,ver_height - 10,paint);  paint.setTextAlign(Paint.Align.LEFT);}  }
class C{  @Override public void runSingleIteration(){  int numEdgesTraversed=0;  int numWalksResetToQueryNode=0;  for (  long leftNode : salsaInternalState.getCurrentLeftNodes().keySet()) {    int numWalksToStart=salsaInternalState.getCurrentLeftNodes().get(leftNode);    int numWalks=0;    for (int i=0; i < numWalksToStart; i++) {      if (random.nextDouble() >= salsaInternalState.getSalsaRequest().getResetProbability()) {        numWalks++;      }    }    numWalksResetToQueryNode+=numWalksToStart - numWalks;    if (numWalks > 0) {      EdgeIterator sampledRightNodes=salsaInternalState.getBipartiteGraph().getRandomLeftNodeEdges(leftNode,numWalks,random);      int leftNodeDegree=salsaInternalState.getBipartiteGraph().getLeftNodeDegree(leftNode);      if (sampledRightNodes != null) {        while (sampledRightNodes.hasNext()) {          long rightNode=sampledRightNodes.nextLong();          salsaInternalState.addNodeToCurrentRightNodes(rightNode);          int numVisits=salsaInternalState.visitRightNode(nodeVisitor,leftNode,rightNode,sampledRightNodes.currentEdgeType(),leftNodeDegree);          salsaInternalState.getSalsaStats().updateVisitStatsPerRightNode(numVisits);          numEdgesTraversed++;        }      }    }  }  salsaInternalState.resetCurrentLeftNodes(salsaInternalState.getSalsaRequest().getQueryNode(),numWalksResetToQueryNode);  salsaInternalState.getSalsaStats().addToNumRHSVisits(numEdgesTraversed);}  }
class C{  public Transform(Matrix matrix){  super(matrix);}  }
class C{  private void splitInOut(MInOut original,int C_DocType_ID,MInOutLineConfirm[] confirmLines){  MInOut split=null;  for (int i=0; i < confirmLines.length; i++) {    MInOutLineConfirm confirmLine=confirmLines[i];    BigDecimal differenceQty=confirmLine.getDifferenceQty();    if (differenceQty.compareTo(Env.ZERO) == 0)     continue;    MInOutLine oldLine=confirmLine.getLine();    log.fine("Qty=" + differenceQty + ", Old="+ oldLine);    if (split == null) {      split=new MInOut(original,C_DocType_ID,original.getMovementDate());      split.addDescription("Splitted from " + original.getDocumentNo());      split.setIsInDispute(true);      split.saveEx();      original.addDescription("Split: " + split.getDocumentNo());      original.saveEx();    }    MInOutLine splitLine=new MInOutLine(split);    splitLine.setC_OrderLine_ID(oldLine.getC_OrderLine_ID());    splitLine.setC_UOM_ID(oldLine.getC_UOM_ID());    splitLine.setDescription(oldLine.getDescription());    splitLine.setIsDescription(oldLine.isDescription());    splitLine.setLine(oldLine.getLine());    splitLine.setM_AttributeSetInstance_ID(oldLine.getM_AttributeSetInstance_ID());    splitLine.setM_Locator_ID(oldLine.getM_Locator_ID());    splitLine.setM_Product_ID(oldLine.getM_Product_ID());    splitLine.setM_Warehouse_ID(oldLine.getM_Warehouse_ID());    splitLine.setRef_InOutLine_ID(oldLine.getRef_InOutLine_ID());    splitLine.addDescription("Split: from " + oldLine.getMovementQty());    splitLine.setQty(differenceQty);    splitLine.saveEx();    oldLine.addDescription("Splitted: from " + oldLine.getMovementQty());    oldLine.setQty(oldLine.getMovementQty().subtract(differenceQty));    oldLine.saveEx();    confirmLine.setTargetQty(confirmLine.getTargetQty().subtract(differenceQty));    confirmLine.setDifferenceQty(Env.ZERO);    confirmLine.saveEx();  }  if (split == null) {    return;  }  m_processMsg="Split @M_InOut_ID@=" + split.getDocumentNo() + " - @M_InOutConfirm_ID@=";  MDocType dt=MDocType.get(getCtx(),original.getC_DocType_ID());  if (!dt.isPrepareSplitDocument()) {    return;  }  if (!split.processIt(DocAction.ACTION_Prepare))   throw new AdempiereException(split.getProcessMsg());  split.saveEx();  MInOutConfirm[] splitConfirms=split.getConfirmations(true);  if (splitConfirms.length > 0) {    int index=0;    if (splitConfirms[index].isProcessed()) {      if (splitConfirms.length > 1)       index++;      if (splitConfirms[index].isProcessed()) {        m_processMsg+=splitConfirms[index].getDocumentNo() + " processed??";        return;      }    }    splitConfirms[index].setIsInDispute(true);    splitConfirms[index].saveEx();    m_processMsg+=splitConfirms[index].getDocumentNo();    MInOutLineConfirm[] splitConfirmLines=splitConfirms[index].getLines(false);    for (int i=0; i < splitConfirmLines.length; i++) {      MInOutLineConfirm splitConfirmLine=splitConfirmLines[i];      splitConfirmLine.setScrappedQty(Env.ZERO);      splitConfirmLine.setConfirmedQty(Env.ZERO);      splitConfirmLine.saveEx();    }  } else   m_processMsg+="??";}  }
class C{  public final static <T>Stream<ListX<T>> groupedBySizeAndTime(final Stream<T> stream,final int size,final long time,final TimeUnit t){  return new BatchByTimeAndSizeOperator<T,ListX<T>>(stream).batchBySizeAndTime(size,time,t);}  }
class C{  public static Date parseIso8601Date(String dateString) throws ParseException {  try {    return getIso8601DateFormat().parse(dateString);  } catch (  ParseException e) {    return getAlternativeIso8601DateFormat().parse(dateString);  }}  }
class C{  public Composer alpha(long animDuration,float alpha,Ease ease){  AnimParameter beforeParam=mTweenParameterList.size() > 0 ? mTweenParameterList.get(mTweenParameterList.size() - 1) : mInitialParam;  mTweenParameterList.add(new TweenParameter(beforeParam.x,beforeParam.y,Util.convertAlphaFloatToInt(alpha),beforeParam.scaleX,beforeParam.scaleY,beforeParam.rotation,animDuration,ease));  return this;}  }
class C{  public CrawlDatum forceRefetch(Text url,CrawlDatum datum,boolean asap){  if (datum.getFetchInterval() > maxInterval)   datum.setFetchInterval(maxInterval * 0.9f);  datum.setStatus(CrawlDatum.STATUS_DB_UNFETCHED);  datum.setRetriesSinceFetch(0);  datum.setSignature(null);  datum.setModifiedTime(0L);  if (asap)   datum.setFetchTime(System.currentTimeMillis());  return datum;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof DefaultShadowGenerator)) {    return false;  }  DefaultShadowGenerator that=(DefaultShadowGenerator)obj;  if (this.shadowSize != that.shadowSize) {    return false;  }  if (!this.shadowColor.equals(that.shadowColor)) {    return false;  }  if (this.shadowOpacity != that.shadowOpacity) {    return false;  }  if (this.distance != that.distance) {    return false;  }  if (this.angle != that.angle) {    return false;  }  return true;}  }
class C{  public boolean isBlocking(){  return blocking;}  }
class C{  public AlgorithmId(ObjectIdentifier oid){  algid=oid;}  }
class C{  public ResultReceiver startScanningFrom(@NonNull Context context){  context.registerReceiver(this,RxWifi.filter);  getWifiManager(context).startScan();  return this;}  }
class C{  protected int makePressColor(){  int r=(this.backgroundColor >> 16) & 0xFF;  int g=(this.backgroundColor >> 8) & 0xFF;  int b=(this.backgroundColor >> 0) & 0xFF;  return Color.argb(128,r,g,b);}  }
class C{  private void createVehiclesByCepasLineDirectionAndBusRegNum() throws SQLException, NoConnectionException {  HashMap<Id,CepasLine> cepasLines=new HashMap<>();  String serviceTableName=this.tripTableName + "_services_by_vehicle";  try {    ResultSet resultSet=dba.executeQuery("select distinct srvc_number from " + serviceTableName + " where srvc_number is not null");    while (resultSet.next()) {      Id lineId=Id.create(resultSet.getString(1),TransitLine.class);      CepasLine cepasLine=new CepasLine(lineId);      cepasLines.put(lineId,cepasLine);    }    resultSet=dba.executeQuery("select distinct srvc_number, direction from " + serviceTableName + " where srvc_number is not null");    while (resultSet.next()) {      Id lineId=Id.create(resultSet.getString(1),TransitLine.class);      CepasLine cepasLine=cepasLines.get(lineId);      CepasRoute cepasRoute=new CepasRoute(resultSet.getInt(2),cepasLine);      cepasLine.routes.put(resultSet.getInt(2),cepasRoute);    }    resultSet=dba.executeQuery("select distinct srvc_number, direction, bus_reg_num from " + serviceTableName + " where srvc_number is not null");    while (resultSet.next()) {      Id lineId=Id.create(resultSet.getString(1),TransitLine.class);      CepasLine cepasLine=cepasLines.get(lineId);      CepasRoute cepasRoute=cepasLine.routes.get(resultSet.getInt(2));      Id ptVehicleId=Id.create(lineId.toString() + "_" + resultSet.getInt(2)+ "_"+ resultSet.getString(3),TransitVehicle.class);      CepasVehicle ptVehicle=new CepasVehicle(lineId,cepasRoute,ptVehicleId);      cepasRoute.vehicles.put(ptVehicleId,ptVehicle);      this.cepasVehicles.put(ptVehicleId.toString(),ptVehicle);    }    System.out.println(cepasLines);  } catch (  SQLException se) {    System.out.println("Indexing....");    dba.executeUpdate("update " + this.tripTableName + " set srvc_number = trim(srvc_number);");    dba.executeUpdate("create index " + tripTableName.split("\\.")[1] + "_idx on "+ this.tripTableName+ "(srvc_number, direction, bus_reg_num)");    dba.executeStatement("create table " + serviceTableName + " as select distinct srvc_number, direction, bus_reg_num from "+ this.tripTableName+ " where srvc_number is not null");    createVehiclesByCepasLineDirectionAndBusRegNum();  }}  }
class C{  public strong addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  protected SpecialMethodSensorAssignmentFactory(){}  }
class C{  public AbstractSimpleState(S id){  this(id,null,null,null,null);}  }
class C{  public TimeChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer){  super(dataset,renderer);}  }
class C{  public AnimatableNumberOrIdentValue(AnimationTarget target,float v,boolean numericIdent){  super(target,v);  this.numericIdent=numericIdent;}  }
class C{  static int check_parameters(SMat A,long dimensions,long iterations,double endl,double endr,boolean b){  int error_index;  error_index=0;  if (endl > endr)   error_index=2; else   if (dimensions > iterations)   error_index=3; else   if (A.cols <= 0 || A.rows <= 0)   error_index=4; else   if (iterations <= 0 || iterations > A.cols || iterations > A.rows)   error_index=5; else   if (dimensions <= 0 || dimensions > iterations)   error_index=6;  if (0 != error_index)   svd_error("svdLAS2 parameter error: %s\n",error_msg[error_index]);  return (error_index);}  }
class C{  private void toggleRearFrontCamera(){  boolean wasCameraSwitched=false;  if ((null != mCall) && mCall.getCallState().equals(IMXCall.CALL_STATE_CONNECTED) && mCall.isVideo()) {    wasCameraSwitched=mCall.switchRearFrontCamera();  } else {    Log.w(LOG_TAG,"## toggleRearFrontCamera(): Skipped");  }  Log.w(LOG_TAG,"## toggleRearFrontCamera(): done? " + wasCameraSwitched);}  }
class C{  public MINFORecord(Name name,int dclass,long ttl,Name responsibleAddress,Name errorAddress){  super(name,Type.MINFO,dclass,ttl);  this.responsibleAddress=checkName("responsibleAddress",responsibleAddress);  this.errorAddress=checkName("errorAddress",errorAddress);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  double x, y;  int progress;  int n;  int featureNum, numFeatures;  int oneHundredthTotal;  ShapeType shapeType, outputShapeType;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON) {      showFeedback("This tool only works with shapefiles of a polygon base shape type.");      return;    }    outputShapeType=ShapeType.POLYLINE;    if (shapeType == ShapeType.POLYGONZ) {      outputShapeType=ShapeType.POLYLINEZ;    } else     if (shapeType == ShapeType.POLYGONM) {      outputShapeType=ShapeType.POLYLINEM;    }    ShapeFile output=new ShapeFile(outputFile,outputShapeType);    output.setProjectionStringFromOtherShapefile(input);    FileUtilities.copyFile(new File(input.getDatabaseFile()),new File(output.getDatabaseFile()));    numFeatures=input.getNumberOfRecords();    oneHundredthTotal=numFeatures / 100;    n=0;    progress=0;    byte[] rawData;    whitebox.geospatialfiles.shapefile.Geometry recGeometry;    for (    ShapeFileRecord record : input.records) {      rawData=record.getGeometry().toByteBuffer().array();switch (outputShapeType) {case POLYLINE:        recGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(rawData);      break;case POLYLINEZ:    recGeometry=new PolyLineZ(rawData);  break;default :recGeometry=new PolyLineM(rawData);break;}output.addRecord(recGeometry);n++;if (n >= oneHundredthTotal) {n=0;if (cancelOp) {cancelOperation();return;}progress++;updateProgress(progress);}}output.write();updateProgress("Displaying vector: ",0);returnData(outputFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public static ImageSource asset(String assetName){  if (assetName == null) {    throw new NullPointerException("Asset name must not be null");  }  return uri(ASSET_SCHEME + assetName);}  }
class C{  public void revalidate(){}  }
class C{  public FunctionSource functionSourceByName(String functionName){  return functionNames.get(functionName);}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetnextsiblingnull.class,args);}  }
class C{  private void doStats(SurfacePriviledged<T> surface,long start){  long finish=System.nanoTime() - start;  System.out.println("Divider Size: " + surface.getDividerSize());  System.out.println("Integer Precision: " + surface.getUseIntegerPrecision());  System.out.println("Area: " + surface.getArea());  for (  PathIterator<T>.Path p : surface.getPathIterator().getHorizontalPaths()) {    for (    Element<T> e : p.elems) {      System.out.println("Element: " + e);    }  }  for (  PathIterator<T>.Path p : surface.getPathIterator().getVerticalPaths()) {    for (    Element<T> e : p.elems) {      System.out.println("Element: " + e);    }  }  System.out.println("execution time: " + ((double)finish / 1000000000.0d) + "  secs.");}  }
class C{  public void readCells(Reader r){  Cell currentCell=null;  ArrayList v=new ArrayList();  num_processed_cells=0;  Scanner d=new Scanner(r);  System.out.println("-----Loading 2237 Cells....");  System.out.println();  try {    while (readCellLine(d,v) != -1)     currentCell=processCellLine(currentCell,v);  } catch (  IOException e) {    System.out.println(e.getMessage());  }  System.out.println();  System.out.println("-----Phew! Finally finished loading...");}  }
class C{  private void releaseServiceWithoutCheck(BeanContextChild child,BCSSChild bcssChild,Object requestor,Object service,boolean callRevokedListener){  if (bcssChild.serviceRecords == null || bcssChild.serviceRecords.isEmpty()) {    return;  }synchronized (child) {    for (Iterator<ServiceRecord> iter=bcssChild.serviceRecords.iterator(); iter.hasNext(); ) {      ServiceRecord rec=(ServiceRecord)iter.next();      if (rec.requestor == requestor && rec.service == service) {        rec.provider.releaseService(getBeanContextServicesPeer(),requestor,service);        if (callRevokedListener && rec.revokedListener != null) {          rec.revokedListener.serviceRevoked(new BeanContextServiceRevokedEvent(getBeanContextServicesPeer(),rec.serviceClass,true));        }        iter.remove();        break;      }    }  }}  }
class C{  public void collapse(){  collapse(true);}  }
class C{  @Override public void firePropertyChange(String propertyName,byte oldValue,byte newValue){}  }
class C{  public DatepickerCombo(final Composite parent,final int style){  this(parent,style,DateFormat.getDateTimeInstance());}  }
class C{  @Override public String toString(){  return "object \"" + value + "\"";}  }
class C{  public static boolean fixLogging(ConfigServerImpl cs,ConfigImpl config,Document doc){  Element luceeConfiguration=doc.getDocumentElement();  String strVersion=luceeConfiguration.getAttribute("version");  double version=Caster.toDoubleValue(strVersion,1.0d);  config.setVersion(version);  if (version >= 4.3D)   return false;  Element src=XMLConfigWebFactory.getChildByName(doc.getDocumentElement(),"datasource");  fixLogging(cs,doc,src,"datasource",false,"{lucee-config}/logs/datasource.log");  setVersion(doc,ConfigWebUtil.getEngine(config).getInfo().getVersion());  if (version >= 4.2D)   return true;  src=XMLConfigWebFactory.getChildByName(doc.getDocumentElement(),"mappings");  fixLogging(cs,doc,src,"mapping",false,"{lucee-config}/logs/mapping.log");  src=XMLConfigWebFactory.getChildByName(doc.getDocumentElement(),"rest");  fixLogging(cs,doc,src,"rest",false,"{lucee-config}/logs/rest.log");  src=XMLConfigWebFactory.getChildByName(doc.getDocumentElement(),"gateways");  fixLogging(cs,doc,src,"gateway",false,"{lucee-config}/logs/gateway.log");  src=XMLConfigWebFactory.getChildByName(doc.getDocumentElement(),"remote-clients");  fixLogging(cs,doc,src,"remoteclient",false,"{lucee-config}/logs/remoteclient.log");  src=XMLConfigWebFactory.getChildByName(doc.getDocumentElement(),"orm");  fixLogging(cs,doc,src,"orm",false,"{lucee-config}/logs/orm.log");  src=XMLConfigWebFactory.getChildByName(doc.getDocumentElement(),"mail");  fixLogging(cs,doc,src,"mail",false,"{lucee-config}/logs/mail.log");  src=XMLConfigWebFactory.getChildByName(doc.getDocumentElement(),"search");  fixLogging(cs,doc,src,"search",false,"{lucee-config}/logs/search.log");  src=XMLConfigWebFactory.getChildByName(doc.getDocumentElement(),"scheduler");  fixLogging(cs,doc,src,"scheduler",false,"{lucee-config}/logs/scheduler.log");  src=XMLConfigWebFactory.getChildByName(doc.getDocumentElement(),"scope");  fixLogging(cs,doc,src,"scope",false,"{lucee-config}/logs/scope.log");  Element app=src=XMLConfigWebFactory.getChildByName(doc.getDocumentElement(),"application");  fixLogging(cs,doc,src,"application","application-log","application-log-level",false,"{lucee-config}/logs/application.log");  fixLogging(cs,doc,app,"exception","exception-log","exception-log-level",false,"{lucee-config}/logs/exception.log");  fixLogging(cs,doc,app,"trace","trace-log","trace-log-level",false,"{lucee-config}/logs/trace.log");  fixLogging(cs,doc,app,"thread","thread-log","thread-log-level",false,"{lucee-config}/logs/thread.log");  fixLogging(cs,doc,app,"deploy","deploy-log","deploy-log-level",false,"{lucee-config}/logs/deploy.log");  fixLogging(cs,doc,app,"requesttimeout","requesttimeout-log","requesttimeout-log-level",false,"{lucee-config}/logs/requesttimeout.log");  setVersion(doc,ConfigWebUtil.getEngine(config).getInfo().getVersion());  return true;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter a string: ");  String string=input.nextLine();  System.out.println("The number of letters in the string \"" + string + "\": "+ countLetters(string));}  }
class C{  private void drawCenterRect(Canvas canvas){  int center=getHeight() / 2;  int offset=(int)(getItemHeight() / 2 * 1.2);  Paint paint=new Paint();  paint.setColor(getResources().getColor(R.color.province_line_border));  paint.setStrokeWidth((float)3);  canvas.drawLine(0,center - offset,getWidth(),center - offset,paint);  canvas.drawLine(0,center + offset,getWidth(),center + offset,paint);}  }
class C{  public T span(String value){  return attr("span",value);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:14.177 -0500",hash_original_method="9480E4BE528687F57BD0A5E0057A4838",hash_generated_method="F54C80ECC216888F4BACE2C30A5CB57E") final Segment<K,V> segmentFor(int hash){  return segments[(hash >>> segmentShift) & segmentMask];}  }
class C{  @NotNull public LogicalPosition visualToLogical(@NotNull VisualPosition visual) throws IllegalStateException {  if (myCache.isEmpty()) {    return new LogicalPosition(visual.line,visual.column,0,0,0,0,0);  }  myVisualToLogicalStrategy.init(visual,myCache);  return calculate(myVisualToLogicalStrategy);}  }
class C{  public StateMachineModelBuilder(){  super();}  }
class C{  public static XMLGregorianCalendar now(){  return getXMLGregorianCalendarValue(null);}  }
class C{  public int determineInsertionIndex(TabLaunchType type,Tab newTab){  TabModel currentModel=mTabModelSelector.getCurrentModel();  Tab currentTab=TabModelUtils.getCurrentTab(currentModel);  if (currentTab == null) {    assert (currentModel.getCount() == 0);    return 0;  }  int currentId=currentTab.getId();  int currentIndex=TabModelUtils.getTabIndexById(currentModel,currentId);  if (sameModelType(currentModel,newTab)) {    if (willOpenInForeground(type,newTab.isIncognito())) {      return currentIndex + 1;    } else {      int index=getIndexOfLastTabOpenedBy(currentId,currentIndex);      if (index != NO_TAB) {        return index + 1;      } else {        return currentIndex + 1;      }    }  } else {    return mTabModelSelector.getModel(newTab.isIncognito()).getCount();  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.GENERATE_PATH___LANGUAGE_1:    setLanguage_1((String)newValue);  return;case UmplePackage.GENERATE_PATH___OUTPUT_1:setOutput_1((String)newValue);return;case UmplePackage.GENERATE_PATH___OVERRIDE_1:setOverride_1((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == VariableEnvironmentElement.class) {switch (baseOperationID) {case N4JSPackage.VARIABLE_ENVIRONMENT_ELEMENT___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS:      return N4JSPackage.PROPERTY_ASSIGNMENT___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS;default :    return -1;}}if (baseClass == NamedElement.class) {switch (baseOperationID) {case N4JSPackage.NAMED_ELEMENT___GET_NAME:  return N4JSPackage.PROPERTY_ASSIGNMENT___GET_NAME;default :return -1;}}if (baseClass == PropertyNameOwner.class) {switch (baseOperationID) {case N4JSPackage.PROPERTY_NAME_OWNER___GET_NAME:return N4JSPackage.PROPERTY_ASSIGNMENT___GET_NAME;case N4JSPackage.PROPERTY_NAME_OWNER___IS_VALID_NAME:return N4JSPackage.PROPERTY_ASSIGNMENT___IS_VALID_NAME;default :return -1;}}if (baseClass == TypableElement.class) {switch (baseOperationID) {default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  private static DefaultTestCase buildLoadTargetClassTestCase(String className) throws EvosuiteError {  DefaultTestCase test=new DefaultTestCase();  StringPrimitiveStatement stmt0=new StringPrimitiveStatement(test,className);  VariableReference string0=test.addStatement(stmt0);  try {    Method currentThreadMethod=Thread.class.getMethod("currentThread");    Statement currentThreadStmt=new MethodStatement(test,new GenericMethod(currentThreadMethod,currentThreadMethod.getDeclaringClass()),null,Collections.emptyList());    VariableReference currentThreadVar=test.addStatement(currentThreadStmt);    Method getContextClassLoaderMethod=Thread.class.getMethod("getContextClassLoader");    Statement getContextClassLoaderStmt=new MethodStatement(test,new GenericMethod(getContextClassLoaderMethod,getContextClassLoaderMethod.getDeclaringClass()),currentThreadVar,Collections.emptyList());    VariableReference contextClassLoaderVar=test.addStatement(getContextClassLoaderStmt);    BooleanPrimitiveStatement stmt1=new BooleanPrimitiveStatement(test,true);    VariableReference boolean0=test.addStatement(stmt1);    Method forNameMethod=Class.class.getMethod("forName",String.class,boolean.class,ClassLoader.class);    Statement forNameStmt=new MethodStatement(test,new GenericMethod(forNameMethod,forNameMethod.getDeclaringClass()),null,Arrays.<VariableReference>asList(string0,boolean0,contextClassLoaderVar));    test.addStatement(forNameStmt);    return test;  } catch (  NoSuchMethodException|SecurityException e) {    throw new EvosuiteError("Unexpected exception while creating Class Initializer Test Case");  }}  }
class C{  public void addHeader(String key,List<String> value){  this.headers.put(key,value);}  }
class C{  protected TreeCellRenderer createDefaultCellRenderer(){  return new DefaultTreeCellRenderer();}  }
class C{  @Override protected Profile instantiateProfile(InternalDistributedMember memberId,int version){  return new GatewaySenderProfile(memberId,version);}  }
class C{  public static int rotateLeft(int i,int distance){  return (i << distance) | (i >>> -distance);}  }
class C{  public void unlock(final T tx){  if (DEBUG)   log.debug("enter");  lock.lock();  if (DEBUG)   log.debug("have private lock");  try {    assertNotDead();    assertOwnsLock(tx);    if (queue.remove() != tx) {      throw new AssertionError();    }    if (waitsFor != null) {      final Iterator<T> itr=queue.iterator();synchronized (waitsFor) {        while (itr.hasNext()) {          final T pendingTx=itr.next();          try {            waitsFor.removeEdge(pendingTx,tx);          } catch (          Throwable t) {            log.warn(t.getMessage(),t);          }        }      }    }    if (queue.isEmpty()) {      if (INFO)       log.info("Nothing pending");      return;    }    if (INFO)     log.info("Signaling blocked requestors");    available.signalAll();  }  finally {    lock.unlock();    if (DEBUG)     log.debug("released private lock");  }}  }
class C{  public final void print(char[] buffer) throws IOException {  print(buffer,0,buffer.length);}  }
class C{  @Override public void resyncSingleVolumeSnapshot(StorageSystem storage,URI volume,URI snapshot,TaskCompleter taskCompleter) throws DeviceControllerException {  try {    if (storage.checkIfVmax3()) {      throw DeviceControllerException.exceptions.blockDeviceOperationNotSupported();    }    callEMCRefreshIfRequired(_dbClient,_helper,storage,Arrays.asList(snapshot));    BlockSnapshot from=_dbClient.queryObject(BlockSnapshot.class,snapshot);    CIMObjectPath syncObjectPath=_cimPath.getSyncObject(storage,from);    CIMObjectPath cimJob=_helper.callModifyReplica(storage,_helper.getResyncSnapshotWithWaitInputArguments(syncObjectPath));    ControllerServiceImpl.enqueueJob(new QueueJob(new SmisBlockResyncSnapshotJob(cimJob,storage.getId(),taskCompleter)));  } catch (  WBEMException e) {    String message=String.format("Error encountered when trying to resync snapshot %s on array %s",snapshot.toString(),storage.getSerialNumber());    _log.error(message,e);    ServiceError error=DeviceControllerErrors.smis.unableToCallStorageProvider(e.getMessage());    taskCompleter.error(_dbClient,error);  }catch (  Exception e) {    String message=String.format("Generic exception when trying to resync snapshot %s on array %s",snapshot.toString(),storage.getSerialNumber());    _log.error(message,e);    ServiceError error=DeviceControllerErrors.smis.methodFailed("resyncSingleVolumeSnapshot",e.getMessage());    taskCompleter.error(_dbClient,error);  }}  }
class C{  public static List<String> tokenize(String arguments,boolean stringify){  LinkedList<String> argList=new LinkedList<String>();  StringBuilder currArg=new StringBuilder();  boolean escaped=false;  int state=NO_TOKEN_STATE;  int len=arguments.length();  for (int i=0; i < len; i++) {    char c=arguments.charAt(i);    if (escaped) {      escaped=false;      currArg.append(c);    } else {switch (state) {case SINGLE_QUOTE_STATE:        if (c == '\'') {          state=NORMAL_TOKEN_STATE;        } else {          currArg.append(c);        }      break;case DOUBLE_QUOTE_STATE:    if (c == '"') {      state=NORMAL_TOKEN_STATE;    } else     if (c == '\\') {      i++;      char next=arguments.charAt(i);      if (next == '"' || next == '\\') {        currArg.append(next);      } else {        currArg.append(c);        currArg.append(next);      }    } else {      currArg.append(c);    }  break;case NO_TOKEN_STATE:case NORMAL_TOKEN_STATE:switch (c) {case '\\':  escaped=true;state=NORMAL_TOKEN_STATE;break;case '\'':state=SINGLE_QUOTE_STATE;break;case '"':state=DOUBLE_QUOTE_STATE;break;default :if (!Character.isWhitespace(c)) {currArg.append(c);state=NORMAL_TOKEN_STATE;} else if (state == NORMAL_TOKEN_STATE) {argList.add(currArg.toString());currArg=new StringBuilder();state=NO_TOKEN_STATE;}}break;default :throw new IllegalStateException("ArgumentTokenizer state " + state + " is invalid!");}}}if (escaped) {currArg.append('\\');argList.add(currArg.toString());} else if (state != NO_TOKEN_STATE) {argList.add(currArg.toString());}if (stringify) {for (int i=0; i < argList.size(); i++) {argList.set(i,"\"" + _escapeQuotesAndBackslashes(argList.get(i)) + "\"");}}return argList;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  MobileSessionCtx wsc=MobileSessionCtx.get(request);  WWindowStatus ws=WWindowStatus.get(request);  if (wsc == null || ws == null)   ;  String formName=MobileUtil.getParameter(request,FIELD_FORM);  String fieldName=MobileUtil.getParameter(request,FIELD_NAME);  String fieldValue=MobileUtil.getParameter(request,FIELD_VALUE);  String locationValue=MobileUtil.getParameter(request,LOCATION_VALUE);  log.info("doPost - Form=" + formName + " - Field="+ fieldName+ " - Value="+ fieldValue+ " - Location="+ locationValue);  MobileDoc doc=createPage(wsc,ws,formName,fieldName,fieldValue,locationValue);  form fu=new form(request.getRequestURI());  fu.setName(FORM_NAME);  fu.addElement(new input(input.TYPE_HIDDEN,FIELD_FORM,"y"));  fu.addElement(new input(input.TYPE_HIDDEN,FIELD_NAME,"y"));  fu.addElement(new input(input.TYPE_HIDDEN,FIELD_VALUE,"y"));  fu.addElement(new input(input.TYPE_HIDDEN,LOCATION_VALUE,locationValue));  doc.getBody().addElement(fu);  MobileUtil.createResponse(request,response,this,null,doc,false);}  }
class C{  public static double fixedDegreesToFloating(double fixed){  return fixed / FIXED_FACTOR;}  }
class C{  public void animateThenRemove(MarkerWithPosition marker,LatLng from,LatLng to){  lock.lock();  AnimationTask animationTask=new AnimationTask(marker,from,to);  animationTask.removeOnAnimationComplete(mClusterManager.getMarkerManager());  mAnimationTasks.add(animationTask);  lock.unlock();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  NodeList elementList;  doc=(Document)load("staffNS",false);  element=doc.getDocumentElement();  elementList=element.getElementsByTagNameNS("**","*");  assertSize("elementgetelementsbytagnamens02",0,elementList);}  }
class C{  public void serieEnEstudio(String idSerie,String gestorSerie) throws FondosOperacionNoPermitidaException {  LoggingEvent logEvent=AuditFondos.getLogginEventModificacionSerie(this);  Locale locale=getServiceClient().getLocale();  checkPermission(FondosSecurityManager.PASO_A_EN_ESTUDIO_ACTION);  SerieVO serie=_serieDBEntity.getSerie(idSerie);  AuditFondos.addDataLogCambiosEstadoSerie(locale,logEvent,serie,serie.getEstadoserie(),EstadoSerie.EN_ESTUDIO);  getAuthorizationHelper().verificarPermitidoPasoAEstudio(serie);  iniciarTransaccion();  _serieDBEntity.updateGestor(idSerie,gestorSerie);  _serieDBEntity.updateEstadoSerie(idSerie,EstadoSerie.EN_ESTUDIO,serie.getEstadoserie());  GestionControlUsuariosBI userService=getServiceRepository().lookupGestionControlUsuariosBI();  UsuarioVO userInicial=userService.getUsuario(serie.getIdusrgestor());  UsuarioVO userFinal=userInicial;  if (!StringUtils.equals(serie.getIdusrgestor(),gestorSerie))   userFinal=userService.getUsuario(gestorSerie);  logEvent=AuditFondos.getLogginEventModificacionSerie(this);  AuditFondos.addDataLogCambiosUsrGestorSerie(locale,logEvent,serie,userInicial.getNombre(),userInicial.getId(),userFinal.getNombre(),userFinal.getId());  commit();}  }
class C{  private List<ServiceTag> createTagList(Map<String,ServiceTag> tags){  List<ServiceTag> list=new ArrayList<ServiceTag>();  int cnt=0;  for (Iterator<ServiceTag> iter=tags.values().iterator(); iter.hasNext(); ) {    ServiceTag tag=iter.next();    if (tag.getScore() < minScoreVal)     continue;    list.add(tag);    if (cnt++ >= maxTags)     break;  }  double biggest=0.0;  for (Iterator<ServiceTag> iter=list.iterator(); iter.hasNext(); ) {    ServiceTag st=iter.next();    if (st.getScore() > biggest) {      biggest=st.getScore();    }  }  Iterator<ServiceTag> iter=list.iterator();  while (iter.hasNext()) {    ServiceTag st=iter.next();    st.setWeight(minWeightVal + ((st.getScore() / biggest) * (maxWeightVal - minWeightVal)));  }  return list;}  }
class C{  protected void appendSummary(final StringBuffer buffer,final String fieldName,final long[] array){  appendSummarySize(buffer,fieldName,array.length);}  }
class C{  public String displayName(){  return displayName;}  }
class C{  public Timeout(){  super(Harness.options,"Timeout","Collection timeout (seconds)",Integer.valueOf(System.getProperty("mmtk.harness.timeout","300")));}  }
class C{  private double calcDistanceIndicator(final double x,final double y){  double distanceX;  double distanceY;  if (this.minX <= x && x <= this.maxX) {    distanceX=0;  } else {    distanceX=Math.min(Math.abs(this.minX - x),Math.abs(this.maxX - x));  }  if (this.minY <= y && y <= this.maxY) {    distanceY=0;  } else {    distanceY=Math.min(Math.abs(this.minY - y),Math.abs(this.maxY - y));  }  return distanceX * distanceX + distanceY * distanceY;}  }
class C{  private void siphash_round(){  v0+=v1;  v2+=v3;  v1=rotateLeft(v1,13);  v3=rotateLeft(v3,16);  v1^=v0;  v3^=v2;  v0=rotateLeft(v0,32);  v2+=v1;  v0+=v3;  v1=rotateLeft(v1,17);  v3=rotateLeft(v3,21);  v1^=v2;  v3^=v0;  v2=rotateLeft(v2,32);}  }
class C{  public final void addField2(FieldInfo finfo){  fields.add(finfo);}  }
class C{  ByteVector encodeUTF8(final String s,int i,int maxByteLength){  int charLength=s.length();  int byteLength=i;  char c;  for (int j=i; j < charLength; ++j) {    c=s.charAt(j);    if (c >= '\001' && c <= '\177') {      byteLength++;    } else     if (c > '\u07FF') {      byteLength+=3;    } else {      byteLength+=2;    }  }  if (byteLength > maxByteLength) {    throw new IllegalArgumentException();  }  int start=length - i - 2;  if (start >= 0) {    data[start]=(byte)(byteLength >>> 8);    data[start + 1]=(byte)byteLength;  }  if (length + byteLength - i > data.length) {    enlarge(byteLength - i);  }  int len=length;  for (int j=i; j < charLength; ++j) {    c=s.charAt(j);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else     if (c > '\u07FF') {      data[len++]=(byte)(0xE0 | c >> 12 & 0xF);      data[len++]=(byte)(0x80 | c >> 6 & 0x3F);      data[len++]=(byte)(0x80 | c & 0x3F);    } else {      data[len++]=(byte)(0xC0 | c >> 6 & 0x1F);      data[len++]=(byte)(0x80 | c & 0x3F);    }  }  length=len;  return this;}  }
class C{  private void sendLocalBroadcast(String event,String dirRemotePath,RemoteOperationResult result){  Log_OC.d(TAG,"Send broadcast " + event);  Intent intent=new Intent(event);  intent.putExtra(FileSyncAdapter.EXTRA_ACCOUNT_NAME,mAccount.name);  if (dirRemotePath != null) {    intent.putExtra(FileSyncAdapter.EXTRA_FOLDER_PATH,dirRemotePath);  }  intent.putExtra(FileSyncAdapter.EXTRA_RESULT,result);  mContext.sendBroadcast(intent);  Log_OC.d(TAG,"Send broadcast completed" + event);}  }
class C{  public boolean empty(){  return isEmpty();}  }
class C{  private int diff_cleanupSemanticScore(String one,String two){  if (one.length() == 0 || two.length() == 0) {    return 6;  }  char char1=one.charAt(one.length() - 1);  char char2=two.charAt(0);  boolean nonAlphaNumeric1=!Character.isLetterOrDigit(char1);  boolean nonAlphaNumeric2=!Character.isLetterOrDigit(char2);  boolean whitespace1=nonAlphaNumeric1 && Character.isWhitespace(char1);  boolean whitespace2=nonAlphaNumeric2 && Character.isWhitespace(char2);  boolean lineBreak1=whitespace1 && Character.getType(char1) == Character.CONTROL;  boolean lineBreak2=whitespace2 && Character.getType(char2) == Character.CONTROL;  boolean blankLine1=lineBreak1 && BLANKLINEEND.matcher(one).find();  boolean blankLine2=lineBreak2 && BLANKLINESTART.matcher(two).find();  if (blankLine1 || blankLine2) {    return 5;  } else   if (lineBreak1 || lineBreak2) {    return 4;  } else   if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {    return 3;  } else   if (whitespace1 || whitespace2) {    return 2;  } else   if (nonAlphaNumeric1 || nonAlphaNumeric2) {    return 1;  }  return 0;}  }
class C{  public void requestAutoFocus(Handler handler,int message){  if (camera != null && previewing) {    autoFocusCallback.setHandler(handler,message);    camera.autoFocus(autoFocusCallback);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:26.259 -0400",hash_original_method="911F14A3F7F22EFA3B185959CB78D2B3",hash_generated_method="A0609E5877C66A204139C3D4F1E21A11") public PriorityQueue(int initialCapacity){  this(initialCapacity,null);}  }
class C{  public Coord toWGS84(Coord projection){  if (!projection.isProjected()) {    return projection;  }  return inverseMercator(projection.getLatitude(),projection.getLongitude());}  }
class C{  public static boolean isCastableToBinary(Object object,boolean checkBase64String){  if (isBinary(object))   return true;  if (object instanceof InputStream)   return true;  if (object instanceof ByteArrayOutputStream)   return true;  if (object instanceof Blob)   return true;  if (!checkBase64String)   return false;  String str=Caster.toString(object,null);  if (str == null)   return false;  return Base64Util.isBase64(str);}  }
class C{  public synchronized boolean reset(){  boolean changed=false;  if (setSubMode(false)) {    changed=true;  }  if (setSlowMode(-1)) {    changed=true;  }  if (setHosting(null)) {    changed=true;  }  if (setR9kMode(false)) {    changed=true;  }  if (setEmoteOnly(false)) {    changed=true;  }  return changed;}  }
class C{  public CSVParser(char separator,char quotechar,char escape,boolean strictQuotes,boolean ignoreLeadingWhiteSpace,boolean ignoreQuotations){  this(separator,quotechar,escape,strictQuotes,ignoreLeadingWhiteSpace,ignoreQuotations,DEFAULT_NULL_FIELD_INDICATOR);}  }
class C{  protected int extract(int value){  return value;}  }
class C{  public double removeNondestructively(final int index){  if (index >= numObjs)   throw new ArrayIndexOutOfBoundsException(index);  double ret=objs[index];  if (index < numObjs - 1)   System.arraycopy(objs,index + 1,objs,index,numObjs - index - 1);  numObjs--;  return ret;}  }
class C{  public static void main(String[] args) throws Exception {  File file=new File("Exercise12_15.txt");  if (file.exists()) {    System.out.println("File already exists");    System.exit(0);  }  try (PrintWriter output=new PrintWriter(file)){    for (int i=0; i < 100; i++) {      output.print(((int)(Math.random() * 500) + 1));      output.print(" ");    }  }   ArrayList<Integer> list=new ArrayList<>();  try (Scanner input=new Scanner(file)){    while (input.hasNext()) {      list.add(input.nextInt());    }  }   Collections.sort(list);  System.out.print(list.toString());  System.out.println();}  }
class C{  public int insertBlobTrigger(Connection conn,OperableTrigger trigger) throws SQLException, IOException {  PreparedStatement ps=null;  ByteArrayOutputStream os=null;  try {    os=new ByteArrayOutputStream();    ObjectOutputStream oos=new ObjectOutputStream(os);    oos.writeObject(trigger);    oos.close();    byte[] buf=os.toByteArray();    ByteArrayInputStream is=new ByteArrayInputStream(buf);    ps=conn.prepareStatement(rtp(INSERT_BLOB_TRIGGER));    ps.setString(1,trigger.getKey().getName());    ps.setString(2,trigger.getKey().getGroup());    ps.setBinaryStream(3,is,buf.length);    return ps.executeUpdate();  }  finally {    closeStatement(ps);  }}  }
class C{  public static void disableTranslucentBars(Window window){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);    window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);  }}  }
class C{  private Thread fullGetFirstQueuedThread(){  Node h, s;  Thread st;  if (((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null) || ((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null))   return st;  Node t=tail;  Thread firstThread=null;  while (t != null && t != head) {    Thread tt=t.thread;    if (tt != null)     firstThread=tt;    t=t.prev;  }  return firstThread;}  }
class C{  JSONStringer close(Scope empty,Scope nonempty,String closeBracket) throws JSONException {  Scope context=peek();  if (context != nonempty && context != empty) {    throw new JSONException("Nesting problem");  }  stack.remove(stack.size() - 1);  if (context == nonempty) {    newline();  }  out.append(closeBracket);  return this;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.LITERAL_OR_COMPUTED_PROPERTY_NAME___GET_NAME:    return getName();}return super.eInvoke(operationID,arguments);}  }
class C{  private void writeReferenceLine(final String seqId,final int end,final String md5) throws IOException {  GFF3Feature polypeptideFeature=new GFF3Feature(seqId,".","polypeptide",1,end,"+");  polypeptideFeature.addAttribute(GFF3Feature.ID_ATTR,seqId);  polypeptideFeature.addAttribute(GFF3Feature.MD5_ATTR,md5);  this.gffWriter.write(polypeptideFeature.getGFF3FeatureLine());}  }
class C{  public GuaranteedDelayedPlayerTextSender(final String source,final Player player,final String message,int seconds){  super(player,message,seconds);  this.source=source;}  }
class C{  public boolean hasChecksForPermission(Class<? extends Annotation> annotationClass){  return bindings.containsKey(annotationClass);}  }
class C{  private void loadMediaAttributes(Attributes attributes){  String url=attributes.getValue("url");  String sizeStr=attributes.getValue("length");  String mimeType=attributes.getValue("type");  if (url != null && url.trim().length() > 0 && URLUtil.isValidUrl(url)) {    try {      episode.setRemoteMediaUrl(url.trim());      episode.setGeneratedId(TextHelper.generateMD5(url));    } catch (    NoSuchAlgorithmException|UnsupportedEncodingException e) {      Timber.w("Error in loadMediaAttributes");      episode.setRemoteMediaUrl(null);    }  }  if (mimeType != null && mimeType.trim().length() > 0) {    episode.setMimeType(mimeType.trim().toLowerCase());  }  if (sizeStr != null && sizeStr.trim().length() > 0) {    try {      episode.setSize(Integer.parseInt(sizeStr.trim().replace(",","")));    } catch (    NumberFormatException e) {      episode.setSize(0);    }  }}  }
class C{  public DiskWriteAttributesFactory(){}  }
class C{  public void processBytes(byte[] in,int inOff,int len,byte[] out,int outOff) throws DataLengthException {  if (outOff + len > out.length) {    throw new DataLengthException("output buffer too small in processBytes()");  }  for (int i=0; i != len; i++) {    cipher.processBlock(in,inOff + i,out,outOff + i);  }}  }
class C{  static int indexFor(int h,int length){  return h & (length - 1);}  }
class C{  private static void mult(int[] src,int srcLen,int value,int[] dst){  long val=value & LONG_MASK;  long carry=0;  for (int i=0; i < srcLen; i++) {    long product=(src[i] & LONG_MASK) * val + carry;    dst[i]=(int)product;    carry=product >>> 32;  }  dst[srcLen]=(int)carry;}  }
class C{  @Override public boolean onKeyDown(int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_MENU) {    setMenuVisible(!isMenuVisible);    return true;  }  return super.onKeyDown(keyCode,event);}  }
class C{  private void editAndClose(){  trackSelection.forEach(null);  UpdateMetadataTask updateTask=new UpdateMetadataTask(trackSelection,newCoverImage);  updateTask.setDaemon(true);  updateTask.start();  editStage.close();}  }
class C{  private static final boolean subPartMatch(String p,String t){  return (p == t) || ((null != p) && (p.equals(t)));}  }
class C{  @Override public void beforePropertyChange(@NotNull VirtualFilePropertyEvent event){  if (!event.getPropertyName().equals(VirtualFile.PROP_NAME)) {    return;  }  MasonSettings masonSettings=MasonSettings.getInstance(getProject());  List<VirtualFile> componentsRoots=masonSettings.getComponentsRootsVirtualFiles();  if (componentsRoots.isEmpty()) {    return;  }  VirtualFile renamedFile=event.getFile();  if (renamedFile.isDirectory()) {    if (containsAtLeastOneFile(renamedFile,componentsRoots)) {      renamedFile.putUserData(FORCE_REINDEX,true);    }  }}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 204) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public static JSONArray array(Integer... values){  if (values == null) {    throw new NullPointerException("values is null");  }  JSONArray array=new JSONArray();  for (  int value : values) {    array.add(value);  }  return array;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element newElement1;  Element newElement2;  String attribute1;  String attribute2;  String nodeName1;  String nodeName2;  doc=(Document)load("hc_staff",true);  newElement1=doc.createElement("ACRONYM");  newElement2=doc.createElement("acronym");  newElement1.setAttribute("lang","EN");  newElement2.setAttribute("title","Dallas");  attribute1=newElement1.getAttribute("lang");  attribute2=newElement2.getAttribute("title");  assertEquals("attrib1","EN",attribute1);  assertEquals("attrib2","Dallas",attribute2);  nodeName1=newElement1.getNodeName();  nodeName2=newElement2.getNodeName();  assertEqualsAutoCase("element","nodeName1","ACRONYM",nodeName1);  assertEqualsAutoCase("element","nodeName2","acronym",nodeName2);}  }
class C{  public void merge(NameConstraintsExtension newConstraints) throws IOException {  if (newConstraints == null) {    return;  }  GeneralSubtrees newExcluded=newConstraints.get(EXCLUDED_SUBTREES);  if (excluded == null) {    excluded=(newExcluded != null) ? (GeneralSubtrees)newExcluded.clone() : null;  } else {    if (newExcluded != null) {      excluded.union(newExcluded);    }  }  GeneralSubtrees newPermitted=newConstraints.get(PERMITTED_SUBTREES);  if (permitted == null) {    permitted=(newPermitted != null) ? (GeneralSubtrees)newPermitted.clone() : null;  } else {    if (newPermitted != null) {      newExcluded=permitted.intersect(newPermitted);      if (newExcluded != null) {        if (excluded != null) {          excluded.union(newExcluded);        } else {          excluded=(GeneralSubtrees)newExcluded.clone();        }      }    }  }  if (permitted != null) {    permitted.reduce(excluded);  }  encodeThis();}  }
class C{  protected void writeModelFile() throws IOException {  modfile=File.createTempFile("ceylon-jsmod-",".tmp");  try (OutputStreamWriter fw=new OutputStreamWriter(new FileOutputStream(modfile),encoding)){    JsCompiler.beginWrapper(fw);    fw.write("ex$.$CCMM$=");    ModelEncoder.encodeModel(mmg.getModel(),fw);    fw.write(";\n");    JsCompiler.endWrapper(fw);  }  finally {  }}  }
class C{  public GROUP_BY GROUP_BY(String groupBy){  return new GROUP_BY(this,groupBy);}  }
class C{  public static void notifyDirectoryChange(ContentResolver resolver){  ContentValues contentValues=new ContentValues();  resolver.update(Directory.CONTENT_URI,contentValues,null,null);}  }
class C{  private boolean[] sampleLine(Point p1,Point p2,int size){  boolean[] res=new boolean[size];  float d=distance(p1,p2);  float moduleSize=d / (size - 1);  float dx=moduleSize * (p2.x - p1.x) / d;  float dy=moduleSize * (p2.y - p1.y) / d;  float px=p1.x;  float py=p1.y;  for (int i=0; i < size; i++) {    res[i]=image.get(MathUtils.round(px),MathUtils.round(py));    px+=dx;    py+=dy;  }  return res;}  }
class C{  public void flush() throws IOException {  if (len > 0) {    BigdataFileSystem.log.info("Flushing buffer: id=" + id + ", version="+ version+ ", len="+ len);    repo.appendBlock(id,version,buffer,0,len);    len=0;    nblocks++;  }}  }
class C{  public DFISimilarity(Independence independenceMeasure){  this.independence=independenceMeasure;}  }
class C{  @SuppressWarnings("rawtypes") public static void createProjectMetaInf(ZipFile zip,Project aProject,RepositoryService aRepository) throws IOException {  for (Enumeration zipEnumerate=zip.entries(); zipEnumerate.hasMoreElements(); ) {    ZipEntry entry=(ZipEntry)zipEnumerate.nextElement();    String entryName=normalizeEntryName(entry);    if (entryName.startsWith(META_INF)) {      File metaInfDir=new File(aRepository.getMetaInfFolder(aProject),FilenameUtils.getPath(entry.getName().replace(META_INF,"")));      FileUtils.forceMkdir(metaInfDir);      FileUtils.copyInputStreamToFile(zip.getInputStream(entry),new File(metaInfDir,FilenameUtils.getName(entry.getName())));      LOG.info("Imported META-INF for project [" + aProject.getName() + "] with id ["+ aProject.getId()+ "]");    }  }}  }
class C{  public boolean checkPersonality(Volume.PersonalityTypes personality){  return checkPersonality(personality.name());}  }
class C{  public NewestFirstComparator(Date now){  Preconditions.checkNotNull(now);  mNow=new Date(now.getTime() + MILLIS_IN_DAY);}  }
class C{  private void readProperties(){  Properties props;  Enumeration<?> enm;  String name;  String[] laf;  String tmpStr;  int i;  Memory mem;  m_Info.clear();  props=System.getProperties();  enm=props.propertyNames();  while (enm.hasMoreElements()) {    name=(String)enm.nextElement();    m_Info.put(name,(String)props.get(name));  }  m_Info.put("weka.version",Version.VERSION);  laf=LookAndFeel.getInstalledLookAndFeels();  tmpStr="";  for (i=0; i < laf.length; i++) {    if (i > 0) {      tmpStr+=",";    }    tmpStr+=laf[i];  }  m_Info.put("ui.installedLookAndFeels",tmpStr);  m_Info.put("ui.currentLookAndFeel",LookAndFeel.getSystemLookAndFeel());  mem=new Memory();  m_Info.put("memory.initial","" + Utils.doubleToString(Memory.toMegaByte(mem.getInitial()),1) + "MB"+ " ("+ mem.getInitial()+ ")");  m_Info.put("memory.max","" + Utils.doubleToString(Memory.toMegaByte(mem.getMax()),1) + "MB"+ " ("+ mem.getMax()+ ")");}  }
class C{  @ObjectiveCName("sendDocumentWithPeer:withName:withMime:withDescriptor:") public void sendDocument(Peer peer,String fileName,String mimeType,String descriptor){  sendDocument(peer,fileName,mimeType,null,descriptor);}  }
class C{  public static Boolean isJavaApplicationByURL(URL url){  if (url == null) {    return false;  }  String curExtension="";  int i=url.getPath().lastIndexOf('.');  if (i > 0) {    curExtension=url.getPath().substring(i + 1);  } else {    return true;  }  List notJ2EETechs=new ArrayList<>();  notJ2EETechs.add("php");  notJ2EETechs.add("asp");  notJ2EETechs.add("cgi");  notJ2EETechs.add("pl");  return (!notJ2EETechs.contains(curExtension));}  }
class C{  public static void e(String message){  if (BuildConfig.DEBUG)   Log.e(TAG,buildLogMsg(message));}  }
class C{  @Override protected boolean shouldShowDetailsButton(){  return status.isMultiStatus();}  }
class C{  public EntityRemove(Location location,BaseEntity state){  checkNotNull(location);  checkNotNull(state);  this.location=location;  this.state=state;}  }
class C{  public void testNGramTokenizer2() throws Exception {  Reader reader=new StringReader("test");  TokenStream stream=tokenizerFactory("NGram","minGramSize","2","maxGramSize","3").create();  ((Tokenizer)stream).setReader(reader);  assertTokenStreamContents(stream,new String[]{"te","tes","es","est","st"});}  }
class C{  public static String quoteEscape(String original){  String result=original;  if (result.indexOf('\"') >= 0) {    result=result.replace("\"",ESCAPED_QUOTE);  }  if (result.indexOf(COMMA) >= 0) {    result="\"" + result + "\"";  }  return result;}  }
class C{  private static byte charToByte(char c){  return (byte)"0123456789ABCDEF".indexOf(c);}  }
class C{  @Override public void scan(Address addr){  int index=subspace.getIndex(addr);  int length=((LargeObjectSpace)mmtkSpace).getSize(addr).toInt();  if (DEBUG) {    Log.write("TreadmillDriver: super=",addr);    Log.write(", index=",index);    Log.write(", pages=",length);    Log.write(", bytes=",Conversions.pagesToBytes(length).toInt());    Log.writeln(", max=",usedSpaceStream.getMaxValue());  }  totalObjects++;  totalUsedSpace+=length;  objectsStream.increment(index,(short)1);  int remainder=subspace.spaceRemaining(addr);  usedSpaceStream.distribute(index,remainder,blockSize,length);  Address tmp=addr.plus(length);  if (tmp.GT(maxAddr))   maxAddr=tmp;}  }
class C{  private void publishEnvironmentUpdateEvent(Environment old,Environment updated){  Collection<Profile> removedProfiles=getProfileDifference(old,updated);  Collection<Profile> addedProfiles=getProfileDifference(updated,old);  EnvironmentUpdateEvent event=new EnvironmentUpdateEvent(this,old,updated,addedProfiles,removedProfiles);  eventPublisher.publishEvent(event);}  }
class C{  protected <K extends Serializable,V extends Serializable>CacheBinding<K,V> persist(String name,Class<K> keyType,Class<V> valType){  return persist(name,TypeLiteral.get(keyType),TypeLiteral.get(valType));}  }
class C{  final public int remove(final int index){  assert index >= 0 && index < nkeys;  final int length=nkeys - index - 1;  if (length > 0) {    System.arraycopy(keys,index + 1,keys,index,length);  }  keys[--nkeys]=null;  return nkeys;}  }
class C{  public AppEvent(EventType type){  super(type);}  }
class C{  private void mergeActiveServicesWithTriggers(Map<Marketplace,Map<Long,TriggerData>> map,List<TriggerData> triggers){  if (triggers != null) {    for (    TriggerData triggerData : triggers) {      try {        final Marketplace marketplace=dm.getReference(Marketplace.class,triggerData.marketplaceKey);        if (!map.containsKey(marketplace)) {          map.put(marketplace,new HashMap<Long,TriggerData>());        }        final Map<Long,TriggerData> catalogEntries=map.get(marketplace);        catalogEntries.put(Long.valueOf(triggerData.serviceKey),triggerData);      } catch (      ObjectNotFoundException ex) {        SaaSSystemException e=new SaaSSystemException(ex);        logger.logError(LogMessageIdentifier.ERROR_MARKETPLACE_NOT_FOUND,"" + triggerData.marketplaceKey);        throw e;      }    }  }}  }
class C{  public boolean isAbsolute(){  return (type == ABSOLUTE);}  }
class C{  public boolean makeEntryAChildOfAParent(User user,Entry parent,Entry child,boolean justTheEntry,boolean isAdmin,Errors errors){  if (user == null) {    Errors.add(errors,errorMessages.errorUserIsNull());    return false;  }  if (parent == null) {    Errors.add(errors,errorMessages.errorParentIsNull());    return false;  }  if (child == null) {    Errors.add(errors,errorMessages.errorChildIsNull());    return false;  }  if (!canUserModifyEntry(user,parent,isAdmin)) {    Errors.add(errors,errorMessages.errorTheUserIsNotEntitledToModifyTheParentEntry());    return false;  }  if (!canUserModifyEntry(user,child,isAdmin)) {    Errors.add(errors,errorMessages.errorTheUserIsNotEntitledToModifyTheChildEntry());    return false;  }  if (!justTheEntry) {    if (isEntryADescendantOfAncestor(parent,child)) {      Errors.add(errors,errorMessages.errorChildIsAnAncestorOfTheParent());      return false;    }  } else {    final ArrayList<Entry> childsChildrenInOrder=getChildrenInOrder(child);    final Entry parentOfChild=getEntryById(child.getParentId());    for (    final Entry childsChildTemp : childsChildrenInOrder) {      if (!makeNotebookEntry(user,childsChildTemp,isAdmin,errors)) {        return false;      }    }    if (parentOfChild != null) {      Entry previous=child;      for (      final Entry childsChildTemp : childsChildrenInOrder) {        if (!createParentChildRelationship(user,parentOfChild,childsChildTemp,previous,isAdmin,errors)) {          return false;        }        previous=childsChildTemp;      }    }  }  if (!createParentChildRelationship(user,parent,child,null,isAdmin,errors)) {    return false;  }  return true;}  }
class C{  public void writeParameterPrior(Parameter parameter,XMLWriter writer){  if (parameter.priorType != PriorType.NONE_FIXED && parameter.isTruncated) {    writer.writeOpenTag(PriorParsers.UNIFORM_PRIOR,new Attribute[]{new Attribute.Default<String>(PriorParsers.LOWER,"" + parameter.getLowerBound()),new Attribute.Default<String>(PriorParsers.UPPER,"" + parameter.getUpperBound())});    writeParameterIdref(writer,parameter);    writer.writeCloseTag(PriorParsers.UNIFORM_PRIOR);  }switch (parameter.priorType) {case NONE_FIXED:    break;case NONE_IMPROPER:  writer.writeComment("Improper uniform prior: " + parameter.getName());break;case UNIFORM_PRIOR:if (parameter.isPriorImproper()) {throw new IllegalArgumentException("Uniform priors cannot have infinite bounds (use 'NONE_IMPROPER')");} else {writer.writeOpenTag(PriorParsers.UNIFORM_PRIOR,new Attribute[]{new Attribute.Default<String>(PriorParsers.LOWER,"" + parameter.getLowerBound()),new Attribute.Default<String>(PriorParsers.UPPER,"" + parameter.getUpperBound())});writeParameterIdref(writer,parameter);writer.writeCloseTag(PriorParsers.UNIFORM_PRIOR);}break;case EXPONENTIAL_PRIOR:writer.writeOpenTag(PriorParsers.EXPONENTIAL_PRIOR,new Attribute[]{new Attribute.Default<String>(PriorParsers.MEAN,"" + parameter.mean),new Attribute.Default<String>(PriorParsers.OFFSET,"" + parameter.offset)});writeParameterIdref(writer,parameter);writer.writeCloseTag(PriorParsers.EXPONENTIAL_PRIOR);break;case LAPLACE_PRIOR:writer.writeOpenTag(PriorParsers.LAPLACE_PRIOR,new Attribute[]{new Attribute.Default<String>(PriorParsers.MEAN,"" + parameter.mean),new Attribute.Default<String>(PriorParsers.SCALE,"" + parameter.scale)});writeParameterIdref(writer,parameter);writer.writeCloseTag(PriorParsers.LAPLACE_PRIOR);break;case NORMAL_PRIOR:writer.writeOpenTag(PriorParsers.NORMAL_PRIOR,new Attribute[]{new Attribute.Default<String>(PriorParsers.MEAN,"" + parameter.mean),new Attribute.Default<String>(PriorParsers.STDEV,"" + parameter.stdev)});writeParameterIdref(writer,parameter);writer.writeCloseTag(PriorParsers.NORMAL_PRIOR);break;case LOGNORMAL_PRIOR:writer.writeOpenTag(PriorParsers.LOG_NORMAL_PRIOR,new Attribute[]{new Attribute.Default<String>(PriorParsers.MEAN,"" + parameter.mean),new Attribute.Default<String>(PriorParsers.STDEV,"" + parameter.stdev),new Attribute.Default<String>(PriorParsers.OFFSET,"" + parameter.offset),new Attribute.Default<Boolean>(PriorParsers.MEAN_IN_REAL_SPACE,parameter.isMeanInRealSpace())});writeParameterIdref(writer,parameter);writer.writeCloseTag(PriorParsers.LOG_NORMAL_PRIOR);break;case GAMMA_PRIOR:writer.writeOpenTag(PriorParsers.GAMMA_PRIOR,new Attribute[]{new Attribute.Default<String>(PriorParsers.SHAPE,"" + parameter.shape),new Attribute.Default<String>(PriorParsers.SCALE,"" + parameter.scale),new Attribute.Default<String>(PriorParsers.OFFSET,"" + parameter.offset)});writeParameterIdref(writer,parameter);writer.writeCloseTag(PriorParsers.GAMMA_PRIOR);break;case INVERSE_GAMMA_PRIOR:writer.writeOpenTag(PriorParsers.INVGAMMA_PRIOR,new Attribute[]{new Attribute.Default<String>(PriorParsers.SHAPE,"" + parameter.shape),new Attribute.Default<String>(PriorParsers.SCALE,"" + parameter.scale),new Attribute.Default<String>(PriorParsers.OFFSET,"" + parameter.offset)});writeParameterIdref(writer,parameter);writer.writeCloseTag(PriorParsers.INVGAMMA_PRIOR);break;case ONE_OVER_X_PRIOR:writer.writeOpenTag(OneOnXPriorParser.ONE_ONE_X_PRIOR);writeParameterIdref(writer,parameter);writer.writeCloseTag(OneOnXPriorParser.ONE_ONE_X_PRIOR);break;case POISSON_PRIOR:writer.writeOpenTag(PriorParsers.POISSON_PRIOR,new Attribute[]{new Attribute.Default<String>(PriorParsers.MEAN,"" + parameter.mean),new Attribute.Default<String>(PriorParsers.OFFSET,"" + parameter.offset)});writeParameterIdref(writer,parameter);writer.writeCloseTag(PriorParsers.POISSON_PRIOR);break;case BETA_PRIOR:writer.writeOpenTag(PriorParsers.BETA_PRIOR,new Attribute[]{new Attribute.Default<String>(PriorParsers.SHAPE,"" + parameter.shape),new Attribute.Default<String>(PriorParsers.SHAPEB,"" + parameter.shapeB),new Attribute.Default<String>(PriorParsers.OFFSET,"" + parameter.offset)});writeParameterIdref(writer,parameter);writer.writeCloseTag(PriorParsers.BETA_PRIOR);break;case CTMC_RATE_REFERENCE_PRIOR:writer.writeOpenTag(CTMCScalePriorParser.MODEL_NAME);writer.writeOpenTag(CTMCScalePriorParser.SCALEPARAMETER);writeParameterIdref(writer,parameter);writer.writeCloseTag(CTMCScalePriorParser.SCALEPARAMETER);PartitionTreeModel treeModel=null;for (PartitionClockModel pcm : options.getPartitionClockModels()) {if (pcm.getClockRateParameter() == parameter) {for (AbstractPartitionData pd : options.getDataPartitions(pcm)) {treeModel=pd.getPartitionTreeModel();break;}}}if (treeModel == null) {throw new IllegalArgumentException("No tree model found for clock model");}writer.writeIDref(TreeModel.TREE_MODEL,treeModel.getPrefix() + TreeModel.TREE_MODEL);writer.writeCloseTag(CTMCScalePriorParser.MODEL_NAME);break;case NORMAL_HPM_PRIOR:case LOGNORMAL_HPM_PRIOR:break;case DIRICHLET_PRIOR:int dimensions=parameter.getParameterDimensionWeights().length;String counts="1.0";for (int i=1; i < dimensions; i++) {counts+=" 1.0";}writer.writeOpenTag(PriorParsers.DIRICHLET_PRIOR,new Attribute[]{new Attribute.Default<String>(PriorParsers.COUNTS,counts)});writeParameterIdref(writer,parameter);writer.writeCloseTag(PriorParsers.DIRICHLET_PRIOR);break;default :throw new IllegalArgumentException("Unknown priorType");}}  }
class C{  protected UIViewRoot restoreSerializedView(FacesContext context,SerializedView sv,String viewId){  if (sv == null) {    return null;  }  TreeStructure structRoot=(TreeStructure)sv.getStructure();  if (structRoot == null) {    return null;  }  UIComponent viewRoot=structRoot.createComponent();  if (viewRoot != null) {    restoreComponentTreeStructure(structRoot,viewRoot);    Object state=sv.getState();    viewRoot.processRestoreState(context,state);  }  return ((UIViewRoot)viewRoot);}  }
class C{  public ShoppingCartCouponsList(final String id,final List<String> coupons,final List<String> appliedCoupons){  super(id,coupons);  this.appliedCoupons=appliedCoupons;}  }
class C{  public static boolean smOrEq(double a,double b){  return (a - b < SMALL);}  }
class C{  private CGraphFunctions(){}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  private void doDdpOrientation(Node d,Node a,Node b,Node c,Graph graph){  List<Node> sepset=getSepset(d,c);  if (sepset == null)   return;  if (sepset.contains(b)) {    graph.setEndpoint(c,b,Endpoint.TAIL);    this.orientSimilarPairs(graph,this.getKnowledge(),c,b,Endpoint.TAIL);    if (verbose) {      logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Definite discriminating path d = " + d,graph.getEdge(b,c)));      System.out.println(SearchLogUtils.edgeOrientedMsg("Definite discriminating path d = " + d,graph.getEdge(b,c)));    }    changeFlag=true;  } else {    if (!isArrowpointAllowed(a,b,graph)) {      return;    }    if (!isArrowpointAllowed(c,b,graph)) {      return;    }    graph.setEndpoint(a,b,Endpoint.ARROW);    graph.setEndpoint(c,b,Endpoint.ARROW);    this.orientSimilarPairs(graph,this.getKnowledge(),a,b,Endpoint.ARROW);    this.orientSimilarPairs(graph,this.getKnowledge(),c,b,Endpoint.ARROW);    logger.log("colliderOrientations",SearchLogUtils.colliderOrientedMsg("Definite discriminating path.. d = " + d,a,b,c));    changeFlag=true;  }}  }
class C{  public RewriteMatch execute(HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse,Throwable throwable) throws IOException, ServletException, InvocationTargetException {  Object[] params=new Object[]{throwable};  return execute(httpServletRequest,httpServletResponse,params,null);}  }
class C{  public void rotateImage(RotateDegrees degrees){  rotateImage(degrees,mAnimationDurationMillis);}  }
class C{  public void putAsString(String key,int value){  String strValue=Integer.valueOf(value).toString();  super.put(key,strValue);}  }
class C{  public void performPaste(){  text.paste();  checkSelection();  checkDeleteable();  checkSelectable();}  }
class C{  private String determineBourneVolumeEventType(){  String eventType="";  eventType=_indication.get(CIMConstants.INDICATION_CLASS_TAG);  String eventEnum=null;  logMessage("Raw indication of Type found {}",new Object[]{eventType});  if (eventType != null && eventType.length() > 0) {    if (eventType.contains(CIMConstants.INST_CREATION_EVENT)) {      eventEnum=OperationTypeEnum.CREATE_BLOCK_VOLUME.getEvType(true);    } else     if (eventType.contains(CIMConstants.INST_DELETION_EVENT)) {      eventEnum=OperationTypeEnum.DELETE_BLOCK_VOLUME.getEvType(true);    } else {      String[] osDescs=new String[0];      String[] osCodes=new String[0];      osDescs=MonitoringPropertiesLoader.splitStringIntoArray(getOperationalStatusDescriptions());      osCodes=MonitoringPropertiesLoader.splitStringIntoArray(getOperationalStatusCodes());      eventEnum=_evtDeterminer.determineEventTypeBasedOnOperationStatusValues(_indication,Boolean.TRUE,osDescs,osCodes);    }  }  return eventEnum;}  }
class C{  public void init(int size,int certainty,SecureRandom random){  this.use186_3=false;  this.L=size;  this.N=getDefaultN(size);  this.certainty=certainty;  this.random=random;}  }
class C{  public AddWorkingSetModificationStrategy(final IWorkingSet toAdd,final int newItemsIndex,final int newAllItemsIndex){  this.toAdd=toAdd;  this.newItemsIndex=newItemsIndex;  this.newAllItemsIndex=newAllItemsIndex;}  }
class C{  public Object clone(){  HashMap result=null;  try {    result=(HashMap)super.clone();  } catch (  CloneNotSupportedException e) {  }  result.table=new Entry[table.length];  result.entrySet=null;  result.modCount=0;  result.size=0;  result.init();  result.putAllForCreate(this);  return result;}  }
class C{  public static final Instance copyValues(Instance x_dest,Instance x_src,int indices[]){  int i=0;  for (  int j : indices) {    x_dest.setValue(i++,x_src.value(j));  }  return x_dest;}  }
class C{  boolean checkEditConditional(){  if (inEditConditionalMode) {    javax.swing.JOptionPane.showMessageDialog(editConditionalFrame,java.text.MessageFormat.format(rbx.getString("Error35"),new Object[]{_curConditional.getSystemName()}),Bundle.getMessage("ErrorTitle"),javax.swing.JOptionPane.ERROR_MESSAGE);    return true;  }  return false;}  }
class C{  public List<JsonValue> values(){  return Collections.unmodifiableList(values);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:26.696 -0500",hash_original_method="95D7FBD84C6C38BA2D84311C3C9BEF51",hash_generated_method="B8E9354FF2CC6187E51B7768F0C1932A") public ApnSetting rspApnSetting(Message response){  ApnSetting retVal=(ApnSetting)response.obj;  if (DBG)   log("rspApnSetting=" + retVal);  return retVal;}  }
class C{  public static boolean isJoinTable(TableElement e,Set<String> tablesReferecedByOtherTables){  ForeignKeyElement[] foreignKeys=e.getForeignKeys();  if (foreignKeys == null || foreignKeys.length != 2) {    return false;  }  int foreignKeySize=foreignKeys[0].getColumns().length + foreignKeys[1].getColumns().length;  if (foreignKeySize < e.getColumns().length) {    return false;  }  String tableName=e.getName().getName();  for (int i=0; i < 2; i++) {    if (tableName.equals(foreignKeys[i].getReferencedTable().getName().getName())) {      return false;    }  }  if (isFkUnique(foreignKeys[0]) || isFkUnique(foreignKeys[1])) {    return false;  }  if (tablesReferecedByOtherTables.contains(e.getName().getName())) {    return false;  }  return true;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException, ClassNotFoundException {  ObjectOutputStream.PutField fields=s.putFields();  fields.put("baseTypeName",baseTypeName);  fields.put("object",object);  fields.put("reference",reference instanceof Serializable ? reference : null);  s.writeFields();}  }
class C{  public boolean isCompleteCRLEnabled(){  return completeCRLEnabled;}  }
class C{  @Override public void scaleAndRotate(){  if (decode_pdf.getDisplayView() == Display.PAGEFLOW) {    decode_pdf.setPageParameters(scaling,commonValues.getCurrentPage(),rotation);    return;  }  if (!decode_pdf.isOpen() && OpenFile.isPDf) {    return;  }  final double width=pageContainer.getViewportBounds().getWidth() * 0.95;  final double height=pageContainer.getViewportBounds().getHeight() * 0.95;  float tempScaling=1.5f;  if (decode_pdf != null) {    for (int i=0; i < group.getChildren().size(); i++) {      if (!group.getChildren().get(i).equals(decode_pdf)) {        group.getChildren().remove(group.getChildren().get(i));      }    }    int index=getSelectedComboIndex(Commands.SCALING);    if (decode_pdf.getDisplayView() == Display.PAGEFLOW) {      setSelectedComboIndex(Commands.SCALING,0);      index=0;      scalingBox.setEnabled(false);    } else     if (decode_pdf.getDisplayView() != Display.PAGEFLOW) {      scalingBox.setEnabled(true);    }    int page=commonValues.getCurrentPage();    if (commonValues.isMultiTiff()) {      page=1;    }    if (index != -1) {      int tw=0, th=0;      double sw;      double sh;      PdfPageData pData=decode_pdf.getPdfPageData();      int curPW=pData.getCropBoxWidth(page);      int curPH=pData.getCropBoxHeight(page);switch (rotation) {case 0:        tw=curPW;      th=curPH;    break;case 90:  tw=curPH;th=curPW;break;case 180:tw=curPW;th=curPH;break;case 270:tw=curPH;th=curPW;break;}switch (decode_pdf.getDisplayView()) {case Display.SINGLE_PAGE:switch (index) {case 0:tempScaling=(float)getScalingRatio(tw,th,width,height);break;case 1:tempScaling=(float)(height / th);break;case 2:tempScaling=(float)(width / tw);break;default :tempScaling=decode_pdf.getDPIFactory().adjustScaling(scalingFloatValues[index]);break;}sw=(int)(tempScaling * tw);sh=(int)(tempScaling * th);if (sw < width) {group.setTranslateX((width - sw) / 2.0);} else {group.setTranslateX(0);}if (sh < height && sw < width) {} else {}group.setTranslateY(0);break;case Display.CONTINUOUS:switch (index) {case 0:tempScaling=(float)getScalingRatio(tw,th,width,height);break;case 1:tempScaling=(float)(height / th);break;case 2:tempScaling=(float)(width / tw);break;default :tempScaling=decode_pdf.getDPIFactory().adjustScaling(scalingFloatValues[index]);break;}sw=(int)(tempScaling * tw);if (sw < width) {group.setTranslateX((width - sw) / 2.0);} else {group.setTranslateX(0);}group.setTranslateY(0);break;case Display.CONTINUOUS_FACING:tw*=2;switch (index) {case 0:tempScaling=(float)getScalingRatio(tw,th,width,height);break;case 1:tempScaling=(float)(height / th);break;case 2:tempScaling=(float)(width / tw);break;default :tempScaling=decode_pdf.getDPIFactory().adjustScaling(scalingFloatValues[index]);break;}sw=(int)(tempScaling * tw);if (sw < width) {group.setTranslateX((width - sw) / 2.0);} else {group.setTranslateX(0);}group.setTranslateY(0);break;case Display.FACING:break;case Display.PAGEFLOW:break;default :System.err.println("unsupported page display ");break;}}scaling=tempScaling;if (Float.isInfinite(scaling)) {scaling=1f;}decode_pdf.setPageParameters(scaling,page,rotation);}if (LogWriter.isRunningFromIDE) {System.out.println("Memory usage after zoom=" + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1000);}}  }
class C{  public static Vector DiscardLastElement(Vector v){  if (v.size() > 0)   v.remove(v.size() - 1);  return v;}  }
class C{  public static void runModule(String module,String version,Class<?> runClass,String... arguments){  instance().run(module,version,runClass,arguments);}  }
class C{  public SelectItem(Object value,String label,String description,boolean disabled,boolean escape){  this(value,label,description,disabled,escape,false);}  }
class C{  public static BufferedImage createCompatibleImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height);}  }
class C{  public void incrementSequence(){  Sequence sequence=getSequence();  if (sequence == null) {    setSequence(1);  } else {    sequence.increment();  }}  }
class C{  public static File searchPaths(Iterable<? extends File> paths,String relFile){  for (  File path : paths) {    File f=new File(path,relFile);    if (f.exists()) {      return path;    }  }  return null;}  }
class C{  @Override public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs){switch (eContainerFeatureID()) {case TypesPackage.ENUMERATOR__OWNING_ENUMERATION:    return eInternalContainer().eInverseRemove(this,TypesPackage.ENUMERATION_TYPE__ENUMERATOR,EnumerationType.class,msgs);}return super.eBasicRemoveFromContainerFeature(msgs);}  }
class C{  protected Object toReference(int type,Object referent,int hash){switch (type) {case HARD:    return referent;case SOFT:  return new SoftRef(hash,referent,parent.queue);case WEAK:return new WeakRef(hash,referent,parent.queue);default :throw new Error();}}  }
class C{  public JSONObject put(String key,int value) throws JSONException {  this.put(key,new Integer(value));  return this;}  }
class C{  @Override public void activate(){}  }
class C{  @Override public Query rewrite(IndexReader reader) throws IOException {  if (disjuncts.length == 1) {    return disjuncts[0];  }  boolean actuallyRewritten=false;  List<Query> rewrittenDisjuncts=new ArrayList<>();  for (  Query sub : disjuncts) {    Query rewrittenSub=sub.rewrite(reader);    actuallyRewritten|=rewrittenSub != sub;    rewrittenDisjuncts.add(rewrittenSub);  }  if (actuallyRewritten) {    return new DisjunctionMaxQuery(rewrittenDisjuncts,tieBreakerMultiplier);  }  return super.rewrite(reader);}  }
class C{  ManagedBean addDynamicAttributes(ManagedBean managed) throws org.apache.geode.admin.AdminException {  if (managed == null) {    throw new IllegalArgumentException(LocalizedStrings.StatisticResourceJmxImpl_MANAGEDBEAN_IS_NULL.toLocalizedString());  }  refresh();  ManagedBean newManagedBean=new DynamicManagedBean(managed);  for (int i=0; i < this.statistics.length; i++) {    StatisticAttributeInfo attrInfo=new StatisticAttributeInfo();    attrInfo.setName(this.statistics[i].getName());    attrInfo.setDisplayName(this.statistics[i].getName());    attrInfo.setDescription(this.statistics[i].getDescription());    attrInfo.setType("java.lang.Number");    attrInfo.setIs(false);    attrInfo.setReadable(true);    attrInfo.setWriteable(false);    attrInfo.setStat(this.statistics[i]);    newManagedBean.addAttribute(attrInfo);  }  return newManagedBean;}  }
class C{  protected void deleteLinks(List<Link> links,String reason){  deleteLinks(links,reason,null);}  }
class C{  public void fetchActiveStreamingResult() throws SQLException {  if (activeStreamingResult != null) {    activeStreamingResult.fetchAllStreaming();  }}  }
class C{  @Override public String toString(){  String fmt="  %12d:%11d%12d %s";  String hfmt="  %12s:%11s%12s %s";  final StringBuilder sb=new StringBuilder();  sb.append("ReversePurgeItemHashMap").append(LS);  sb.append(String.format(hfmt,"Index","States","Values","Keys")).append(LS);  for (int i=0; i < keys.length; i++) {    if (states[i] <= 0)     continue;    sb.append(String.format(fmt,i,states[i],values[i],keys[i].toString()));    sb.append(LS);  }  return sb.toString();}  }
class C{  protected float textWidthImpl(char buffer[],int start,int stop){  float wide=0;  for (int i=start; i < stop; i++) {    wide+=textFont.width(buffer[i]) * textSize;  }  return wide;}  }
class C{  public void reconfigCoordinator(String type) throws LocalRepositoryException {  final String prefix=String.format("reconfigCoordinator(%s): ",type);  _log.debug(prefix);  final String[] cmd={_SYSTOOL_CMD,_SYSTOOL_RECONFIG_COORDINATOR,type};  final Exec.Result result=Exec.sudo(_SYSTOOL_TIMEOUT,cmd);  checkFailure(result,prefix);}  }
class C{  public BlockMetadataStore(World owningWorld){  this.owningWorld=owningWorld;}  }
class C{  public static boolean isLineDelimiterChar(char ch){  return ch == '\n' || ch == '\r';}  }
class C{  public static void assertExceptions(final Exception occurred,final Exception expected){  assertEquals(occurred.getClass(),expected.getClass());  assertEquals(occurred.getMessage(),expected.getMessage());}  }
class C{  public void testAboveAsciiEscapeWithReader() throws Exception {  _testEscapeAboveAscii(false);}  }
class C{  private void compressSamples(){  if (samples.size() < 2) {    return;  }  final ListIterator<SampleItem> it=samples.listIterator();  SampleItem next=it.next();  while (it.hasNext()) {    final SampleItem prev=next;    next=it.next();    if (prev.g + next.g + next.delta > allowableError(it.previousIndex())) {      continue;    }    next.g+=prev.g;    it.previous();    it.previous();    it.remove();    it.next();  }}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  try {    completeElement();    out.write("<?" + target + " "+ data+ "?>");  } catch (  IOException ioe) {    throw new SAXException(ioe);  }}  }
class C{  private void extractResourceFromZip(final HttpServerRequest req,final String zipUrl,final String insidePath,final HttpClientResponse response){  Logger log=RequestLoggerFactory.getLogger(ZipExtractHandler.class,req);  response.bodyHandler(null);}  }
class C{  public void testIsolatedMode() throws Exception {  processTest(DeploymentMode.ISOLATED);}  }
class C{  private void engineTransform(byte[] in){  byte2int(in,0,data,0,DATA_LENGTH / 4);  transform(data);}  }
class C{  public void saveMessageRecord(MessageRecord messageRecord) throws Exception {  doInTransaction(null);}  }
class C{  @Override public void prerender(final Renderer renderer){  if (fieldCamera == null) {    fieldCamera=(FieldCamera)World.getInstance().getTools().getChild(layerInfo.name);  }  Color instCol=fieldCamera.getColor();  if (!instCol.equals(color)) {    setColor(instCol);    if (!viewshedEnabled) {      texture=null;    }  }  if (viewshedEnabled) {    if (texture == null) {      viewshed=new Viewshed(fieldCamera.getCamera(),textureUnit);      texture=viewshed.getTexture();    }    fieldCamera.prerender(renderer,viewshed);  } else {    if (texture == null) {      texture=createFootprintTexture();    }    BasicCamera camera=fieldCamera.getCamera();    matrix.set(camera.getModelViewProjectionMatrix());    matrix.multiplyLocal(BIAS);    texture.setTextureMatrix(matrix);  }  Landscape.getInstance().getTextureState().setTexture(texture,textureUnit);  Landscape.getInstance().markDirty(DirtyType.RenderState);}  }
class C{  public static <A>FluxTValue<A> fromAnyM(AnyMValue<A> anyM){  return of(anyM.map(null));}  }
class C{  protected BooleanControl(Type type,boolean initialValue){  this(type,initialValue,"true","false");}  }
class C{  @Override public boolean equals(Object other){  if (!(other instanceof Matrix)) {    return false;  }  for (int r=0; r < rows; r++) {    if (!Arrays.equals(data[r],((Matrix)other).data[r])) {      return false;    }  }  return true;}  }
class C{  private static void assertDocWithValsIsLast(final int numDocs,final String sort){  assertQ(sort,req("q","*:*","rows","" + numDocs,"sort",sort),"//result[@numFound='" + numDocs + "']","//result/doc[" + numDocs + "]/float[@name='id']='0.0'");}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public HttpMethodInfoBuilder httpResponder(Response responder){  this.responder=responder;  return this;}  }
class C{  @Override public void receive(DatagramPacket p) throws IOException {  socketDelegate.receive(p);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:22.808 -0500",hash_original_method="2DB3995911F14A1266042DB21211C241",hash_generated_method="450A8DC28F0797E0CC68180DE79FD145") private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  for (Node<E> p=first(); p != null; p=succ(p)) {    Object item=p.item;    if (item != null)     s.writeObject(item);  }  s.writeObject(null);}  }
class C{  public static void liftingFromBottom(View view,float baseRotation,int duration){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,view.getHeight() / 3);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).rotationX(0).translationY(0).start();}  }
class C{  public IMouseState createEdgeClickedRightState(final Edge e,final MouseEvent event){  final CEdgeClickedRightState<NodeType,EdgeType> state=new CEdgeClickedRightState<NodeType,EdgeType>(this,m_graph,e);  m_factory.createEdgeClickedRightAction().execute(state,event);  return state;}  }
class C{  @Override public void run(){  Configuration configuration;  try {    configuration=Configuration.getConfiguration();  } catch (  IOException e1) {    logger.error(e1,e1);    return;  }  if (!configuration.has("stendhal.program." + account)) {    return;  }  String cmd=configuration.get("stendhal.program." + account);  send(cmd);}  }
class C{  static int dp2px(Context context,float dp){  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,context.getResources().getDisplayMetrics());  return Math.round(px);}  }
class C{  public boolean isAfter(@NonNull CalendarDay other){  if (other == null) {    throw new IllegalArgumentException("other cannot be null");  }  if (year == other.year) {    return (month == other.month) ? (day > other.day) : (month > other.month);  } else {    return year > other.year;  }}  }
class C{  private void adjustMinPrefForSpanningComps(DimConstraint[] specs,Float[] defPush,FlowSizeSpec fss,ArrayList<LinkedDimGroup>[] groupsLists){  for (int r=groupsLists.length - 1; r >= 0; r--) {    ArrayList<LinkedDimGroup> groups=groupsLists[r];    for (    LinkedDimGroup group : groups) {      if (group.span == 1)       continue;      int[] sizes=group.getMinPrefMax();      for (int s=LayoutUtil.MIN; s <= LayoutUtil.PREF; s++) {        int cSize=sizes[s];        if (cSize == LayoutUtil.NOT_SET)         continue;        int rowSize=0;        int sIx=(r << 1) + 1;        int len=Math.min((group.span << 1),fss.sizes.length - sIx) - 1;        for (int j=sIx; j < sIx + len; j++) {          int sz=fss.sizes[j][s];          if (sz != LayoutUtil.NOT_SET)           rowSize+=sz;        }        if (rowSize < cSize && len > 0) {          for (int eagerness=0, newRowSize=0; eagerness < 4 && newRowSize < cSize; eagerness++)           newRowSize=fss.expandSizes(specs,defPush,cSize,sIx,len,s,eagerness);        }      }    }  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static <E,S extends Set<E>>SynchronizedMutableSet<E> of(S set,Object lock){  return new SynchronizedMutableSet<>(SetAdapter.adapt(set),lock);}  }
class C{  public static void checkState(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalStateException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public Key(@NotNull String dataClass,int processingWeight){  myDataClass=dataClass;  myProcessingWeight=processingWeight;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:30.809 -0500",hash_original_method="8529106FFAE0E25F63F016FC3AC665F8",hash_generated_method="706D43A0C1C8370E2C360C8B34F818CE") public MalformedChunkCodingException(final String message){  super(message);}  }
class C{  @Override public void debuggerRemoved(final BackEndDebuggerProvider provider,final IDebugger debugger){  for (int i=0; i < getItemCount(); i++) {    if (getItemAt(i).getObject() == debugger) {      removeItemAt(i);      return;    }  }}  }
class C{  public Frame<V> init(final Frame<? extends V> src){  returnValue=src.returnValue;  System.arraycopy(src.values,0,values,0,values.length);  top=src.top;  return this;}  }
class C{  @Override public boolean containsKey(Object key){  if (key == null) {    key=NULL_OBJECT;  }  int index=findIndex(key,elementData);  return elementData[index] == key;}  }
class C{  public MLOutput execute(String dmlScriptFilePath,ArrayList<String> args,boolean parsePyDML,String configFilePath) throws IOException, DMLException, ParseException {  String[] argsArr=new String[args.size()];  argsArr=args.toArray(argsArr);  return execute(dmlScriptFilePath,argsArr,parsePyDML,configFilePath);}  }
class C{  public boolean isReadonly(){  return readonly;}  }
class C{  void buildCode(Prototype f){  int[] code=f.code;  int pc, n=code.length;  for (pc=0; pc < n; pc++) {    buildOpCode(f,pc);    ps.append("\n");  }}  }
class C{  public static double[][] makeDelayEmbeddingVector(double[] data,int k,int tau,int startKthPoint,int numEmbeddingVectors) throws Exception {  if (startKthPoint < (k - 1) * tau) {    throw new Exception("Start point t=" + startKthPoint + " is too early for a "+ k+ " length embedding vector with delay "+ tau);  }  if (numEmbeddingVectors + startKthPoint > data.length) {    throw new Exception("Too many embedding vectors " + numEmbeddingVectors + " requested for the given startPoint "+ startKthPoint+ " and time series length "+ data.length);  }  double[][] embeddingVectors=new double[numEmbeddingVectors][k];  for (int t=startKthPoint; t < numEmbeddingVectors + startKthPoint; t++) {    for (int i=0; i < k; i++) {      embeddingVectors[t - startKthPoint][i]=data[t - i * tau];    }  }  return embeddingVectors;}  }
class C{  public static void main(String[] args){}  }
class C{  @Override public void branchChainTo(BranchLabel label){  if (this.breakLabel.forwardReferenceCount() > 0) {    label.becomeDelegateFor(this.breakLabel);  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  mNum=getArguments() != null ? getArguments().getInt("num") : 1;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String idrisiHeaderFile=null;  String idrisiDataFile=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  String[] imageFiles;  int numImages=0;  double noData=-32768;  InputStream inStream=null;  OutputStream outStream=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    }  }  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      int progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",(int)progress);      idrisiDataFile=imageFiles[i];      if (!((new File(idrisiDataFile)).exists())) {        showFeedback("IDRISI raster file does not exist.");        break;      }      idrisiHeaderFile=idrisiDataFile.replace(".rst",".rdc");      if (!idrisiHeaderFile.contains(".rdc")) {        idrisiHeaderFile=idrisiDataFile.replace(".RST",".rdc");      }      whiteboxHeaderFile=idrisiHeaderFile.replace(".rdc",".dep");      whiteboxDataFile=idrisiHeaderFile.replace(".rdc",".tas");      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxDataFile)).delete();      if (!createHeaderFile(idrisiHeaderFile,whiteboxHeaderFile)) {        showFeedback("IDRISI header file was not read properly. " + "Tool failed to import");        return;      }      int length;      byte[] buffer=new byte[1024];      if (!idrisiFileIsByteDataType && !idrisiFileIsRGB) {        File fromfile=new File(idrisiDataFile);        inStream=new FileInputStream(fromfile);        File tofile=new File(whiteboxDataFile);        outStream=new FileOutputStream(tofile);        while ((length=inStream.read(buffer)) > 0) {          outStream.write(buffer,0,length);        }        outStream.close();        inStream.close();      } else       if (!idrisiFileIsRGB) {        RandomAccessFile rIn=null;        FileChannel inChannel=null;        int numBytesToRead=nrows * ncols;        ByteBuffer buf=ByteBuffer.allocate(numBytesToRead);        rIn=new RandomAccessFile(idrisiDataFile,"r");        inChannel=rIn.getChannel();        inChannel.position(0);        inChannel.read(buf);        java.nio.ByteOrder byteorder=java.nio.ByteOrder.nativeOrder();        buf.order(byteorder);        buf.rewind();        byte[] ba=new byte[numBytesToRead];        buf.get(ba);        WhiteboxRaster wr=new WhiteboxRaster(whiteboxHeaderFile,"rw");        double z;        int row=0, col=0;        for (int j=0; j < numBytesToRead; j++) {          z=(double)(ba[j] & 0xff);          wr.setValue(row,col,z);          col++;          if (col == ncols) {            col=0;            row++;          }        }        wr.close();        inChannel.close();      } else {        RandomAccessFile rIn=null;        FileChannel inChannel=null;        int numBytesToRead=nrows * ncols * 3;        ByteBuffer buf=ByteBuffer.allocate(numBytesToRead);        rIn=new RandomAccessFile(idrisiDataFile,"r");        inChannel=rIn.getChannel();        inChannel.position(0);        inChannel.read(buf);        java.nio.ByteOrder byteorder=java.nio.ByteOrder.nativeOrder();        buf.order(byteorder);        buf.rewind();        byte[] ba=new byte[numBytesToRead];        buf.get(ba);        int r, g, b;        WhiteboxRaster wr=new WhiteboxRaster(whiteboxHeaderFile,"rw");        double z;        int row=0, col=0;        for (int j=0; j < numBytesToRead; j+=3) {          b=(int)(ba[j] & 0xff);          g=(int)(ba[j + 1] & 0xff);          r=(int)(ba[j + 2] & 0xff);          z=(double)((255 << 24) | (b << 16) | (g << 8)| r);          wr.setValue(row,col,z);          col++;          if (col == ncols) {            col=0;            row++;          }        }        wr.close();        inChannel.close();      }      output=new WhiteboxRaster(whiteboxHeaderFile,"r");      output.findMinAndMaxVals();      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.writeHeaderFile();      output.close();      returnData(whiteboxHeaderFile);    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:15.058 -0500",hash_original_method="72982976B71B01DF2412198462460DF0",hash_generated_method="3FC970F17DE45AAF7F1BC31C989BC4E0") final public boolean isVisible(){  return (((getTaintInt() + mView.getTaintInt())) == 1);}  }
class C{  public static void registerStorageType(ResourceLocation id,Class<? extends SharedStorage> storageClass){  if (STORAGE_MAP.containsKey(id))   throw new RuntimeException("Duplicate shared storage ID");  STORAGE_MAP.put(id,storageClass);}  }
class C{  public BuilderForDnsDiscoverer maxDiscoverAttempts(int maxDiscoverAttempts){  super.maxDiscoverAttempts=maxDiscoverAttempts;  return this;}  }
class C{  public FuzzyQueryBuilder(String name,long value){  this(name,(Object)value);}  }
class C{  RdfFileRecordReader(RDFFormat format,int charBufferSize,int statementBufferSize,int timeoutSeconds){  rdfParser=Rio.createParser(format);  rdfParser.setRDFHandler(this);  statementCache=new LinkedBlockingQueue<RyaStatementWritable>(statementBufferSize);  pipeOut=new PipedWriter();  pipeIn=new PipedReader(charBufferSize);  this.timeoutSeconds=timeoutSeconds;  logger.info("Initializing RecordReader with parameters:");  logger.info("\tRDF serialization format = " + format.getName());  logger.info("\tinput buffer size = " + charBufferSize + " characters");  logger.info("\tstatement cache size = " + statementBufferSize);  logger.info("\tparser timeout = " + timeoutSeconds + " seconds");}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.arrowPaint,stream);  SerialUtilities.writeStroke(this.arrowStroke,stream);}  }
class C{  public BaseThumbnailRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public ScaleAndIndexes indexes(int... indexes){  return new ScaleAndIndexes(scale,indexes.clone());}  }
class C{  void writeFile(String name) throws java.io.FileNotFoundException, java.io.IOException {  if (log.isDebugEnabled()) {    log.debug("writeFile " + name);  }  File file=findFile(name);  if (file == null) {    file=new File(name);  }  Element root=new Element("consist-roster-config");  Document doc=newDocument(root,dtdLocation + "consist-roster-config.dtd");  java.util.Map<String,String> m=new java.util.HashMap<String,String>();  m.put("type","text/xsl");  m.put("href",xsltLocation + "consistRoster.xsl");  ProcessingInstruction p=new ProcessingInstruction("xml-stylesheet",m);  doc.addContent(0,p);  for (int i=0; i < numEntries(); i++) {    NceConsistRosterEntry r=_list.get(i);    String tempComment=r.getComment();    StringBuffer buf=new StringBuffer();    for (int k=0; k < tempComment.length(); k++) {      if (tempComment.startsWith("\n",k)) {        buf.append("<?p?>");      } else {        buf.append(tempComment.substring(k,k + 1));      }    }    r.setComment(buf.toString());  }  Element values;  root.addContent(values=new Element("roster"));  for (int i=0; i < numEntries(); i++) {    values.addContent(_list.get(i).store());  }  writeXML(file,doc);  for (int i=0; i < numEntries(); i++) {    NceConsistRosterEntry r=_list.get(i);    String xmlComment=r.getComment();    StringBuffer buf=new StringBuffer();    for (int k=0; k < xmlComment.length(); k++) {      if (xmlComment.startsWith("<?p?>",k)) {        buf.append("\n");        k=k + 4;      } else {        buf.append(xmlComment.substring(k,k + 1));      }    }    r.setComment(buf.toString());  }  setDirty(false);}  }
class C{  public int createShardMapping(ShardingType type,String globalGroupName) throws FabricCommunicationException {  Response r=errorSafeCallMethod(METHOD_SHARDING_CREATE_DEFINITION,new Object[]{type.toString(),globalGroupName});  return (Integer)r.getResultSet().get(0).get(FIELD_RESULT);}  }
class C{  public static List<SootClass> matchShortName(String shortName){  Chain<SootClass> classes=Scene.v().getClasses();  List<SootClass> list=new LinkedList();  for (  SootClass sootClass : classes) {    if (sootClass.getShortName().equals(shortName))     list.add(sootClass);  }  return list;}  }
class C{  public static String rawToAsciiString(byte[] quality,int offset,int length){  final StringBuilder b=new StringBuilder();  final int end=offset + length;  for (int i=offset; i < end; i++) {    b.append(rawToAsciiQuality(quality[i]));  }  return b.toString();}  }
class C{  public static long convertToLocal(java.util.Date x,Calendar target){  if (target == null) {    throw DbException.getInvalidValueException("calendar",null);  }  target=(Calendar)target.clone();  Calendar local=Calendar.getInstance();synchronized (local) {    local.setTime(x);    convertTime(local,target);  }  return target.getTime().getTime();}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (newRecord)   setC_Order_ID(0);  getShipment();  if (getC_BPartner_ID() == 0) {    if (m_inout != null)     setC_BPartner_ID(m_inout.getC_BPartner_ID());  }  if (getC_Currency_ID() == 0) {    if (m_inout != null) {      if (m_inout.getC_Order_ID() != 0) {        MOrder order=new MOrder(getCtx(),m_inout.getC_Order_ID(),get_TrxName());        setC_Currency_ID(order.getC_Currency_ID());      } else       if (m_inout.getC_Invoice_ID() != 0) {        MInvoice invoice=new MInvoice(getCtx(),m_inout.getC_Invoice_ID(),get_TrxName());        setC_Currency_ID(invoice.getC_Currency_ID());      }    }  }  if (m_inout != null && m_inout.isSOTrx() != isSOTrx()) {    log.saveError("RMA.IsSOTrx <> InOut.IsSOTrx","");    return false;  }  return true;}  }
class C{  public static void show(final Command c,final Display display){  Check.notNull(display,"display");  if (c == null) {    showGenericHelp(display);  } else {    showHelpForCommand(c,display);  }}  }
class C{  public GitlabProject createProject(String name,Integer namespaceId,String description,Boolean issuesEnabled,Boolean wallEnabled,Boolean mergeRequestsEnabled,Boolean wikiEnabled,Boolean snippetsEnabled,Boolean publik,Integer visibilityLevel,String importUrl) throws IOException {  Query query=new Query().append("name",name).appendIf("namespace_id",namespaceId).appendIf("description",description).appendIf("issues_enabled",issuesEnabled).appendIf("wall_enabled",wallEnabled).appendIf("merge_requests_enabled",mergeRequestsEnabled).appendIf("wiki_enabled",wikiEnabled).appendIf("snippets_enabled",snippetsEnabled).appendIf("public",publik).appendIf("visibility_level",visibilityLevel).appendIf("import_url",importUrl);  String tailUrl=GitlabProject.URL + query.toString();  return dispatch().to(tailUrl,GitlabProject.class);}  }
class C{  public static void clearAuthzCacheForRole(Service s,Operation op,RoleState roleState){  op.nestCompletion(null);}  }
class C{  public void putTypeDescription(File f,String typeDescription){  putTypeDescription(getExtension(f),typeDescription);}  }
class C{  protected void map(){  TransactionState realState=getRealState();  if (realState == null || realState == TransactionState.TRYING) {    if (isInviteTransaction() && !this.isMapped && sipStack.getTimer() != null) {      this.isMapped=true;      sipStack.getTimer().schedule(new SendTrying(),200);    } else {      isMapped=true;    }  }  sipStack.removePendingTransaction(this);}  }
class C{  public static Instances filter(String expression,Instances input) throws Exception {  Instances output=new Instances(input,0);  Hashtable<String,Integer> attTypes=new Hashtable<String,Integer>();  for (int i=0; i < input.numAttributes(); i++)   attTypes.put("ATT" + (i + 1),input.attribute(i).type());  if (input.classIndex() > -1)   attTypes.put("CLASS",input.classAttribute().type());  SymbolFactory sf=new DefaultSymbolFactory();  HashMap symbols=new HashMap();  ByteArrayInputStream parserInput=new ByteArrayInputStream(expression.getBytes());  for (int i=0; i < input.numInstances(); i++) {    Instance instance=input.instance(i);    for (int n=0; n < instance.numAttributes(); n++) {      if (n == instance.classIndex())       symbols.put("CLASS",getValue(instance,n));      symbols.put("ATT" + (n + 1),getValue(instance,n));    }    parserInput.reset();    Parser parser=new Parser(new Scanner(parserInput,sf),sf);    parser.setSymbols(symbols);    parser.parse();    if (parser.getResult())     output.add((Instance)instance.copy());  }  return output;}  }
class C{  public void removeTreeModelListener(TreeModelListener l){  this.listeners.remove(l);}  }
class C{  public StandardToolTipTagFragmentGenerator(){  super();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:01.362 -0500",hash_original_method="1309D9DA3902B8EF77EAE3BBEDE0D6E3",hash_generated_method="3164AD5F9817D9B1ADFA7239E670A2D9") public int regionStart(){  return regionStart;}  }
class C{  public static void sort(byte[] array){  sort(0,array.length,array);}  }
class C{  public static byte[] hash(byte[] input){  SHA1 sha1=new SHA1();  return sha1.getSHA1Hash(input);}  }
class C{  @RequestProcessing(value="/search-header",method=HTTPRequestMethod.GET) @Before(adviceClass=StopwatchStartAdvice.class) @After(adviceClass=StopwatchEndAdvice.class) public void showSearchHeader(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("search-header.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  filler.fillHeaderAndFooter(request,response,dataModel);  filler.fillRandomArticles(dataModel);  filler.fillHotArticles(dataModel);  filler.fillSideTags(dataModel);  filler.fillLatestCmts(dataModel);}  }
class C{  public CharEscaperBuilder(){  this.map=new HashMap<Character,String>();}  }
class C{  public static String randomString(String sampler,int length){  StringBuilder builder=new StringBuilder(length);  for (int i=0; i < length; i++)   builder.append(sampler.charAt(SEEDED_RANDOM.nextInt(sampler.length())));  return builder.toString();}  }
class C{  public void externalEntityDecl(String name,String publicId,String systemId) throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.externalEntityDecl(name,publicId,systemId);}  }
class C{  public boolean isSetVersions(){  return this.versions != null;}  }
class C{  protected HttpsURL(){}  }
class C{  public int size(){  return size;}  }
class C{  public IncompatibleSystemException(String message){  super(message);}  }
class C{  public void addDataPoint(DataPoint dp,int classification){  if (dp.getNumericalValues().length() != numNumerVals)   throw new RuntimeException("Data point does not contain enough numerical data points");  if (dp.getCategoricalValues().length != categories.length)   throw new RuntimeException("Data point does not contain enough categorical data points");  for (int i=0; i < dp.getCategoricalValues().length; i++) {    int val=dp.getCategoricalValues()[i];    if (!categories[i].isValidCategory(val) && val >= 0)     throw new RuntimeException("Categoriy value given is invalid");  }  datapoints.add(dp);  category.add(classification);  columnVecCache.clear();}  }
class C{  public void contextDestroyed(ServletContextEvent event){  for (Enumeration e=servletContext.getAttributeNames(); e.hasMoreElements(); ) {    String beanName=(String)e.nextElement();    handleAttributeEvent(beanName,servletContext.getAttribute(beanName),ELUtils.Scope.APPLICATION);  }  this.applicationAssociate=null;}  }
class C{  private void reset(){  for (  AbstractRuleEditingElement<?> ruleElement : ruleElements) {    ruleElement.dispose();  }  ruleElements.clear();}  }
class C{  public PhraseChart(PhraseTable[] tables,List<FeatureFunction> features,Sentence source,int num_options){  float startTime=System.currentTimeMillis();  this.numOptions=num_options;  this.features=features;  this.sentence=source;  max_source_phrase_length=0;  for (  PhraseTable table1 : tables)   max_source_phrase_length=Math.max(max_source_phrase_length,table1.getMaxSourcePhraseLength());  sentence_length=source.length();  entries=new ArrayList<>();  for (int i=0; i < sentence_length * max_source_phrase_length; i++)   entries.add(null);  for (int begin=0; begin != sentence_length; ++begin) {    for (int end=begin + 1; (end != sentence_length + 1) && (end <= begin + max_source_phrase_length); ++end) {      if (source.hasPath(begin,end)) {        for (        PhraseTable table : tables)         addToRange(begin,end,table.getPhrases(Arrays.copyOfRange(source.getWordIDs(),begin,end)));      }    }  }  entries.stream().filter(null).forEach(null);  LOG.info("Input {}: Collecting options took {} seconds",source.id(),(System.currentTimeMillis() - startTime) / 1000.0f);  if (LOG.isDebugEnabled()) {    for (int i=1; i < sentence_length - 1; i++) {      for (int j=i + 1; j < sentence_length && j <= i + max_source_phrase_length; j++) {        if (source.hasPath(i,j)) {          PhraseNodes phrases=getRange(i,j);          if (phrases != null) {            LOG.debug("{} ({}-{})",source.source(i,j),i,j);            for (            HGNode node : phrases) {              Rule rule=node.bestHyperedge.getRule();              LOG.debug("    {} :: est={}",rule.getEnglishWords(),rule.getEstimatedCost());            }          }        }      }    }  }}  }
class C{  public Anonymous_concreteMethodDeclaration_2_ createAnonymous_concreteMethodDeclaration_2_(){  Anonymous_concreteMethodDeclaration_2_Impl anonymous_concreteMethodDeclaration_2_=new Anonymous_concreteMethodDeclaration_2_Impl();  return anonymous_concreteMethodDeclaration_2_;}  }
class C{  protected String paramString(){  String reorderingAllowedString=(reorderingAllowed ? "true" : "false");  String resizingAllowedString=(resizingAllowed ? "true" : "false");  String updateTableInRealTimeString=(updateTableInRealTime ? "true" : "false");  return super.paramString() + ",draggedDistance=" + draggedDistance+ ",reorderingAllowed="+ reorderingAllowedString+ ",resizingAllowed="+ resizingAllowedString+ ",updateTableInRealTime="+ updateTableInRealTimeString;}  }
class C{  private static float[] deriveRotationAnchorOffsets(Graphics2D g2,AttributedString text,TextAnchor anchor){  float[] result=new float[2];  TextLayout layout=new TextLayout(text.getIterator(),g2.getFontRenderContext());  Rectangle2D bounds=layout.getBounds();  float ascent=layout.getAscent();  float halfAscent=ascent / 2.0f;  float descent=layout.getDescent();  float leading=layout.getLeading();  float xAdj=0.0f;  float yAdj=0.0f;  if (isHorizontalLeft(anchor)) {    xAdj=0.0f;  } else   if (isHorizontalCenter(anchor)) {    xAdj=(float)bounds.getWidth() / 2.0f;  } else   if (isHorizontalRight(anchor)) {    xAdj=(float)bounds.getWidth();  }  if (isTop(anchor)) {    yAdj=descent + leading - (float)bounds.getHeight();  } else   if (isHalfHeight(anchor)) {    yAdj=descent + leading - (float)(bounds.getHeight() / 2.0);  } else   if (isHalfAscent(anchor)) {    yAdj=-halfAscent;  } else   if (isBaseline(anchor)) {    yAdj=0.0f;  } else   if (isBottom(anchor)) {    yAdj=descent + leading;  }  result[0]=xAdj;  result[1]=yAdj;  return result;}  }
class C{  public NullExtent(Extent extent,BBC failReason){  super(extent);  this.reason=failReason;}  }
class C{  public void requestPreviewFrame(Handler handler,int message){  if (camera != null && previewing) {    previewCallback.setHandler(handler,message);    if (useOneShotPreviewCallback) {      camera.setOneShotPreviewCallback(previewCallback);    } else {      camera.setPreviewCallback(previewCallback);    }  }}  }
class C{  public static byte[] unEscape(final byte[] bytes){  final byte[] temp=new byte[bytes.length];  int currentPosition=0;  boolean isEscaped=false;  for (  final byte b : bytes) {    if (isEscaped) {      if (b == REPLACEMENT_CHAR) {        temp[currentPosition++]=ESCAPE_CHAR;      } else       if (b == ESCAPE_CHAR) {        temp[currentPosition++]=DELIMITER;      } else {        temp[currentPosition++]=b;      }      isEscaped=false;    } else {      if (b == ESCAPE_CHAR) {        isEscaped=true;      } else {        temp[currentPosition++]=b;      }    }  }  final byte[] unEscaped=new byte[currentPosition];  System.arraycopy(temp,0,unEscaped,0,currentPosition);  return unEscaped;}  }
class C{  public void createPackageContents(){  if (isCreated)   return;  isCreated=true;  mappingModelEClass=createEClass(MAPPING_MODEL);  createEReference(mappingModelEClass,MAPPING_MODEL__RULES);  createEAttribute(mappingModelEClass,MAPPING_MODEL__TARGET_PLATFORM);  infoModelMappingModelEClass=createEClass(INFO_MODEL_MAPPING_MODEL);  infoModelMappingRuleEClass=createEClass(INFO_MODEL_MAPPING_RULE);  infomodelSourceEClass=createEClass(INFOMODEL_SOURCE);  createEReference(infomodelSourceEClass,INFOMODEL_SOURCE__MODEL);  infoModelPropertySourceEClass=createEClass(INFO_MODEL_PROPERTY_SOURCE);  createEReference(infoModelPropertySourceEClass,INFO_MODEL_PROPERTY_SOURCE__PROPERTY);  infoModelAttributeSourceEClass=createEClass(INFO_MODEL_ATTRIBUTE_SOURCE);  createEAttribute(infoModelAttributeSourceEClass,INFO_MODEL_ATTRIBUTE_SOURCE__ATTRIBUTE);  functionBlockMappingModelEClass=createEClass(FUNCTION_BLOCK_MAPPING_MODEL);  functionBlockMappingRuleEClass=createEClass(FUNCTION_BLOCK_MAPPING_RULE);  functionBlockSourceEClass=createEClass(FUNCTION_BLOCK_SOURCE);  createEReference(functionBlockSourceEClass,FUNCTION_BLOCK_SOURCE__MODEL);  functionBlockPropertySourceEClass=createEClass(FUNCTION_BLOCK_PROPERTY_SOURCE);  functionBlockAttributeSourceEClass=createEClass(FUNCTION_BLOCK_ATTRIBUTE_SOURCE);  createEAttribute(functionBlockAttributeSourceEClass,FUNCTION_BLOCK_ATTRIBUTE_SOURCE__ATTRIBUTE);  configurationSourceEClass=createEClass(CONFIGURATION_SOURCE);  createEReference(configurationSourceEClass,CONFIGURATION_SOURCE__PROPERTY);  statusSourceEClass=createEClass(STATUS_SOURCE);  createEReference(statusSourceEClass,STATUS_SOURCE__PROPERTY);  operationSourceEClass=createEClass(OPERATION_SOURCE);  createEReference(operationSourceEClass,OPERATION_SOURCE__OPERATION);  eventSourceEClass=createEClass(EVENT_SOURCE);  createEReference(eventSourceEClass,EVENT_SOURCE__EVENT);  createEReference(eventSourceEClass,EVENT_SOURCE__EVENT_PROPERTY);  entityMappingModelEClass=createEClass(ENTITY_MAPPING_MODEL);  entityMappingRuleEClass=createEClass(ENTITY_MAPPING_RULE);  entitySourceEClass=createEClass(ENTITY_SOURCE);  createEReference(entitySourceEClass,ENTITY_SOURCE__MODEL);  entityPropertySourceEClass=createEClass(ENTITY_PROPERTY_SOURCE);  createEReference(entityPropertySourceEClass,ENTITY_PROPERTY_SOURCE__PROPERTY);  entityAttributeSourceEClass=createEClass(ENTITY_ATTRIBUTE_SOURCE);  createEAttribute(entityAttributeSourceEClass,ENTITY_ATTRIBUTE_SOURCE__ATTRIBUTE);  enumMappingModelEClass=createEClass(ENUM_MAPPING_MODEL);  enumMappingRuleEClass=createEClass(ENUM_MAPPING_RULE);  enumSourceEClass=createEClass(ENUM_SOURCE);  createEReference(enumSourceEClass,ENUM_SOURCE__MODEL);  enumPropertySourceEClass=createEClass(ENUM_PROPERTY_SOURCE);  createEReference(enumPropertySourceEClass,ENUM_PROPERTY_SOURCE__PROPERTY);  enumAttributeSourceEClass=createEClass(ENUM_ATTRIBUTE_SOURCE);  createEAttribute(enumAttributeSourceEClass,ENUM_ATTRIBUTE_SOURCE__ATTRIBUTE);  dataTypeMappingModelEClass=createEClass(DATA_TYPE_MAPPING_MODEL);  targetEClass=createEClass(TARGET);  referenceTargetEClass=createEClass(REFERENCE_TARGET);  createEReference(referenceTargetEClass,REFERENCE_TARGET__MAPPING_MODEL);  stereoTypeTargetEClass=createEClass(STEREO_TYPE_TARGET);  createEAttribute(stereoTypeTargetEClass,STEREO_TYPE_TARGET__NAME);  createEReference(stereoTypeTargetEClass,STEREO_TYPE_TARGET__ATTRIBUTES);  attributeEClass=createEClass(ATTRIBUTE);  createEAttribute(attributeEClass,ATTRIBUTE__NAME);  createEAttribute(attributeEClass,ATTRIBUTE__VALUE);  sourceEClass=createEClass(SOURCE);  faultSourceEClass=createEClass(FAULT_SOURCE);  createEReference(faultSourceEClass,FAULT_SOURCE__PROPERTY);  mappingRuleEClass=createEClass(MAPPING_RULE);  createEReference(mappingRuleEClass,MAPPING_RULE__TARGET);  createEReference(mappingRuleEClass,MAPPING_RULE__SOURCES);  modelAttributeEEnum=createEEnum(MODEL_ATTRIBUTE);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @Override public int hashCode(){  return principalClass.hashCode();}  }
class C{  public static AvgProjectionExpression avgDistinct(Expression expression){  return new AvgProjectionExpression(expression,true);}  }
class C{  static int indexFor(int h,int length){  return h & (length - 1);}  }
class C{  public void testSSLConnect() throws Exception {  MqttAndroidClient mqttClient=null;  try {    mqttClient=new MqttAndroidClient(mContext,mqttSSLServerURI,"testSSLConnect");    MqttConnectOptions options=new MqttConnectOptions();    options.setSocketFactory(mqttClient.getSSLSocketFactory(this.getContext().getAssets().open("test.bks"),keyStorePwd));    IMqttToken connectToken=null;    IMqttToken disconnectToken=null;    connectToken=mqttClient.connect(options);    connectToken.waitForCompletion(waitForCompletionTime);    disconnectToken=mqttClient.disconnect(null,null);    disconnectToken.waitForCompletion(waitForCompletionTime);    connectToken=mqttClient.connect(options);    connectToken.waitForCompletion(waitForCompletionTime);    disconnectToken=mqttClient.disconnect(null,null);    disconnectToken.waitForCompletion(waitForCompletionTime);  } catch (  Exception exception) {    fail("Failed:" + "testSSLConnect" + " exception="+ exception);  } finally {    if (mqttClient != null) {      mqttClient.close();    }  }}  }
class C{  protected void failOptimistic(){  IgniteCache<Object,Object> cache=jcache(0);  try (Transaction tx=grid(0).transactions().txStart(OPTIMISTIC,REPEATABLE_READ)){    cache.put(new TestKey(String.valueOf(++key)),"");    tx.commit();    assert false : "p2p marshalling failed, but error response was not sent";  } catch (  IgniteException e) {    assert X.hasCause(e,IOException.class);  }  assert readCnt.get() == 0;}  }
class C{  protected void updateMenu(){  boolean fileOpen;  boolean isChanged;  boolean canUndo;  fileOpen=(getCurrentPanel() != null);  isChanged=fileOpen && (getCurrentPanel().isChanged());  canUndo=fileOpen && (getCurrentPanel().canUndo());  m_MenuFileOpen.setEnabled(true);  m_MenuFileSave.setEnabled(isChanged);  m_MenuFileSaveAs.setEnabled(fileOpen);  m_MenuFileClose.setEnabled(fileOpen);  m_MenuFileCloseAll.setEnabled(fileOpen);  m_MenuFileProperties.setEnabled(fileOpen);  m_MenuFileExit.setEnabled(true);  m_MenuEditUndo.setEnabled(canUndo);  m_MenuEditCopy.setEnabled(fileOpen);  m_MenuEditSearch.setEnabled(fileOpen);  m_MenuEditClearSearch.setEnabled(fileOpen);  m_MenuEditAttributeAsClass.setEnabled(fileOpen);  m_MenuEditRenameAttribute.setEnabled(fileOpen);  m_MenuEditDeleteAttribute.setEnabled(fileOpen);  m_MenuEditDeleteAttributes.setEnabled(fileOpen);  m_MenuEditDeleteInstance.setEnabled(fileOpen);  m_MenuEditDeleteInstances.setEnabled(fileOpen);  m_MenuEditSortInstances.setEnabled(fileOpen);  m_MenuViewAttributes.setEnabled(fileOpen);  m_MenuViewValues.setEnabled(fileOpen);  m_MenuViewOptimalColWidths.setEnabled(fileOpen);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:16.645 -0400",hash_original_method="E46607BFB7F04DB7D8CE36C6CC4FB9FC",hash_generated_method="99F04E8EBD2AA5F8F1B97CCE695C2A79") public void incomingPanConnection(BluetoothAdapter adapter,BluetoothDevice device){  connectPanOrIncomingPanConnection(adapter,device,false);}  }
class C{  @Override protected boolean isZoneLevelResource(){  return true;}  }
class C{  public static boolean isXML11Content(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_CONTENT) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return stack.getUIMgrSafe().getVideoFrame().getDVDLanguage();}  }
class C{  private void apply(ReplDBMSEvent event,boolean doCommit,boolean doRollback,boolean syncTHL) throws ReplicatorException, ConsistencyException, InterruptedException {  try {    taskProgress.beginApplyInterval();    applier.apply(event,doCommit,doRollback,syncTHL);    if (doCommit) {      schedule.commit();      blockEventCount=0;      lastCommitMillis=System.currentTimeMillis();    }  } catch (  ApplierException e) {    if (context.getApplierFailurePolicy() == FailurePolicy.STOP) {      throw e;    } else {      String message="Event application failed: seqno=" + event.getSeqno() + " fragno="+ event.getFragno()+ " message="+ e.getMessage();      logError(message,e);    }  } finally {    taskProgress.endApplyInterval();  }}  }
class C{  public void addChannels(List<Channel> channels){  for (  Channel channel : channels) {    addChannel(channel);  }}  }
class C{  public Marsh(){  super();}  }
class C{  @Override public int hashCode(){  return Objects.hashCode(name,url,duration);}  }
class C{  @Override protected AccessCheckingPortal createPortal(final ConfigurableFactoryContext ctx){  return new KeyedPortal(getKey(ctx),getQuantity(ctx));}  }
class C{  private AlternateTypeRule[] alternativeTypeRules(){  return new AlternateTypeRule[]{Alternates.newRule(FlakeId.class,String.class),Alternates.newRule(Zone.class,String.class)};}  }
class C{  public static void createBenchmarkHTable(TableName tableName,String cfName) throws IOException {  Configuration conf=HBaseConnection.getCurrentHBaseConfiguration();  HBaseAdmin admin=new HBaseAdmin(conf);  try {    if (admin.tableExists(tableName)) {      logger.info("disabling hbase table " + tableName);      admin.disableTable(tableName);      logger.info("deleting hbase table " + tableName);      admin.deleteTable(tableName);    }    HTableDescriptor tableDesc=new HTableDescriptor(tableName);    tableDesc.setValue(HTableDescriptor.SPLIT_POLICY,DisabledRegionSplitPolicy.class.getName());    KylinConfig kylinConfig=KylinConfig.getInstanceFromEnv();    tableDesc.addFamily(createColumnFamily(kylinConfig,cfName,false));    logger.info("creating hbase table " + tableName);    admin.createTable(tableDesc,null);    Preconditions.checkArgument(admin.isTableAvailable(tableName),"table " + tableName + " created, but is not available due to some reasons");    logger.info("create hbase table " + tableName + " done.");  }  finally {    IOUtils.closeQuietly(admin);  }}  }
class C{  @Interruptible public static void printTotalsXml(){  Xml.openTag("mmtk-stats-totals");  Xml.singleValue("gc",phase / 2);  for (int c=0; c < counters; c++) {    if (!counter[c].isComplex())     if (counter[c].mergePhases()) {      printTotalXml(counter[c],Phase.COMBINED);    } else {      printTotalXml(counter[c],Phase.MUTATOR);      printTotalXml(counter[c],Phase.GC);    }  }  Xml.singleValue("total-time",Plan.totalTime.getTotalMillis(),"ms");  Xml.closeTag("mmtk-stats-totals");}  }
class C{  public void testReceiveBrowseReceive() throws Exception {  Message[] outbound=new Message[]{session.createTextMessage("First Message"),session.createTextMessage("Second Message"),session.createTextMessage("Third Message")};  beginTx();  while (consumer.receive(1000) != null) {  }  commitTx();  beginTx();  producer.send(outbound[0]);  producer.send(outbound[1]);  producer.send(outbound[2]);  commitTx();  beginTx();  assertEquals(outbound[0],consumer.receive(1000));  consumer.close();  commitTx();  beginTx();  QueueBrowser browser=session.createBrowser((Queue)destination);  Enumeration enumeration=browser.getEnumeration();  assertTrue("should have received the second message",enumeration.hasMoreElements());  assertEquals(outbound[1],(Message)enumeration.nextElement());  assertTrue("Should have received the third message",enumeration.hasMoreElements());  assertEquals(outbound[2],(Message)enumeration.nextElement());  LOG.info("Check for more...");  boolean tooMany=false;  while (enumeration.hasMoreElements()) {    LOG.info("Got extra message: " + ((TextMessage)enumeration.nextElement()).getText());    tooMany=true;  }  assertFalse(tooMany);  LOG.info("close browser...");  browser.close();  LOG.info("reopen and consume...");  consumer=resourceProvider.createConsumer(session,destination);  assertEquals(outbound[1],consumer.receive(1000));  assertEquals(outbound[2],consumer.receive(1000));  consumer.close();  commitTx();}  }
class C{  public int addNodeRow(){  return getNodeTable().addRow();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public MovieRenameTask(List<Movie> moviesToRename){  super(BUNDLE.getString("movie.rename"));  this.moviesToRename=moviesToRename;}  }
class C{  protected void buildClassPath(ArrayList<String> pathList){}  }
class C{  private int parseChar() throws IOException {  while (_chunkLength <= 0) {    if (!parseChunkLength())     return -1;  }  _chunkLength--;  return parseUTF8Char();}  }
class C{  public static void writeLines(File file,Collection<?> lines,String lineEnding) throws IOException {  writeLines(file,null,lines,lineEnding,false);}  }
class C{  protected boolean useNullKey(){  return true;}  }
class C{  public void replace(String statement) throws CannotCompileException {  throw new RuntimeException("not implemented yet");}  }
class C{  static public LocoNetMessage makePeerXfr(int src,int dst,int[] d,int code){  LocoNetMessage msg=new LocoNetMessage(16);  msg.setOpCode(LnConstants.OPC_PEER_XFER);  msg.setElement(1,0x10);  int pxct1=0;  int pxct2=0;  pxct1|=(code & 0x7) * 0x10;  pxct2|=((code & 0x38) / 8) * 0x10;  msg.setElement(2,src & 0x7F);  msg.setElement(3,dst & 0x7F);  msg.setElement(4,highByte(dst) & 0x7F);  msg.setElement(6,d[0] & 0x7F);  if (highBit(d[0])) {    pxct1|=0x01;  }  msg.setElement(7,d[1] & 0x7F);  if (highBit(d[1])) {    pxct1|=0x02;  }  msg.setElement(8,d[2] & 0x7F);  if (highBit(d[2])) {    pxct1|=0x04;  }  msg.setElement(9,d[3] & 0x7F);  if (highBit(d[3])) {    pxct1|=0x08;  }  msg.setElement(11,d[4] & 0x7F);  if (highBit(d[4])) {    pxct2|=0x01;  }  msg.setElement(12,d[5] & 0x7F);  if (highBit(d[5])) {    pxct2|=0x02;  }  msg.setElement(13,d[6] & 0x7F);  if (highBit(d[6])) {    pxct2|=0x04;  }  msg.setElement(14,d[7] & 0x7F);  if (highBit(d[7])) {    pxct2|=0x08;  }  msg.setElement(5,pxct1);  msg.setElement(10,pxct2);  return msg;}  }
class C{  public static SearchSourceBuilder searchSource(){  return new SearchSourceBuilder();}  }
class C{  private void initialize(){  this.setContentPane(getJContentPane());  this.setResizable(true);}  }
class C{  public void deleteCookie(Cookie cookie){  String name=cookie.getName() + cookie.getDomain();  cookies.remove(name);  SharedPreferences.Editor prefsWriter=cookiePrefs.edit();  prefsWriter.remove(COOKIE_NAME_PREFIX + name);  prefsWriter.commit();}  }
class C{  @Override public void trigger(DialogueState state,Collection<String> updatedVars){  for (  String var : Arrays.asList(system.getSettings().userInput,system.getSettings().systemOutput)) {    if (!paused && updatedVars.contains(var) && state.hasChanceNode(var)) {      System.out.println(getTextRendering(system.getContent(var).toDiscrete()));    }  }}  }
class C{  @SuppressWarnings("rawtypes") public static RangeBOp toRangeBOp(final BOpContextBase context,final RangeNode range,final GlobalAnnotations globals){  final RangeBOp bop=new RangeBOp();  final ValueExpressionNode from=range.from();  if (from != null) {    final IValueExpression<? extends IV> ve=AST2BOpUtility.toVE(context,globals,from);    bop.setFrom(ve);  }  final ValueExpressionNode to=range.to();  if (to != null) {    final IValueExpression<? extends IV> ve=AST2BOpUtility.toVE(context,globals,to);    bop.setTo(ve);  }  return bop;}  }
class C{  public void swapIdx(int idx1,int idx2){  if ((idx1 >= weapons.size()) || (idx2 >= weapons.size()) || (idx1 < 0)|| (idx2 < 0)) {    return;  }  Mounted m1=weapons.get(idx1);  weapons.set(idx1,weapons.get(idx2));  weapons.set(idx2,m1);  fireContentsChanged(this,idx1,idx1);  fireContentsChanged(this,idx2,idx2);}  }
class C{  public MaskFormatter(String mask) throws ParseException {  this();  setMask(mask);}  }
class C{  public void testCreateDeployerWhenDeployerElementSpecified() throws Exception {  TestableDeployerMojo mojo=new TestableDeployerMojo();  Deployer deployerElement=new Deployer();  deployerElement.setImplementation(InstalledLocalDeployerStub.class.getName());  deployerElement.setType(DeployerType.INSTALLED.getType());  mojo.setDeployerElement(deployerElement);  org.codehaus.cargo.container.deployer.Deployer deployer=mojo.createDeployer(new InstalledLocalContainerStub());  assertEquals(InstalledLocalDeployerStub.class.getName(),deployer.getClass().getName());}  }
class C{  private Model trainBaseModel(ExampleSet exampleSet) throws OperatorException {  Model model=applyInnerLearner(exampleSet);  createOrReplacePredictedLabelFor(exampleSet,model);  return model;}  }
class C{  private boolean isOcelotSittingOnChest(World worldIn,BlockPos pos){  for (  final EntityOcelot entityOcelot : worldIn.getEntitiesWithinAABB(EntityOcelot.class,new AxisAlignedBB(pos.getX(),pos.getY() + 1,pos.getZ(),pos.getX() + 1,pos.getY() + 2,pos.getZ() + 1))) {    if (entityOcelot.isSitting()) {      return true;    }  }  return false;}  }
class C{  public void testSSLWithEmptyCipherSuitesProperty(){  testSSLProtocolsAndCipherSuitesProperties(SecurityHelperTest.TEST_ARG.CIPHERS);}  }
class C{  @Override public int hashCode(){  return super.hashCode();}  }
class C{  public boolean isBinaryType(){  return this.binaryType != null;}  }
class C{  public void testConstrStringException(){  String a="-238768.787678287a+10";  try {    new BigDecimal(a);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  @Override public String toString(){  return "cudaMemcpy3DPeerParms[" + createString(",") + "]";}  }
class C{  public void addListener(final PropertyChangeListener listener){  pcs.addPropertyChangeListener(listener);}  }
class C{  public LangString(String label,String lang){  assert label != null;  if (lang != null && lang.length() < 1)   throw new IllegalArgumentException("language cannot be the empty string");  this.label=label;  this.lang=lang == null ? toLang(Locale.getDefault()) : lang;}  }
class C{  public byte[] receive(){  return null;}  }
class C{  public void clearDiskCache(){  if (null != mDiskCacheProvider) {    try {      mDiskCacheProvider.getDiskCache().clear();    } catch (    IOException e) {    }  }}  }
class C{  public Task<VcenterRestRep> deactivate(URI id,boolean detachStorage){  URI deactivateUri=client.uriBuilder(getDeactivateUrl()).queryParam("detach-storage",detachStorage).build(id);  return postTaskURI(deactivateUri);}  }
class C{  public void show(){  view.show();}  }
class C{  static String changeWStoXML(String string) throws IOException {  StringBuilder sb=new StringBuilder();  StringReader sr=new StringReader(string);  int i=0;  char c;  while ((i=sr.read()) > -1) {    c=(char)i;    if (c == '\\') {      char c1=(char)sr.read();      if (c1 == ' ') {        sb.append('\\');        String s="20";        sb.append(s);      } else {        sb.append('\\');        sb.append(c1);      }    } else {      sb.append(c);    }  }  return sb.toString();}  }
class C{  public EntryStream<K,V> filterValues(Predicate<? super V> valuePredicate){  return filter(null);}  }
class C{  private static String initialise(Token currentToken,int[][] expectedTokenSequences,String[] tokenImage){  String eol=System.getProperty("line.separator","\n");  StringBuilder expected=new StringBuilder();  int maxSize=0;  for (int i=0; i < expectedTokenSequences.length; i++) {    if (maxSize < expectedTokenSequences[i].length) {      maxSize=expectedTokenSequences[i].length;    }    for (int j=0; j < expectedTokenSequences[i].length; j++) {      expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');    }    if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {      expected.append("...");    }    expected.append(eol).append("    ");  }  String retval="Encountered \"";  Token tok=currentToken.next;  for (int i=0; i < maxSize; i++) {    if (i != 0)     retval+=" ";    if (tok.kind == 0) {      retval+=tokenImage[0];      break;    }    retval+=" " + tokenImage[tok.kind];    retval+=" \"";    retval+=add_escapes(tok.image);    retval+=" \"";    tok=tok.next;  }  retval+="\" at line " + currentToken.next.beginLine + ", column "+ currentToken.next.beginColumn;  retval+="." + eol;  if (expectedTokenSequences.length == 1) {    retval+="Was expecting:" + eol + "    ";  } else {    retval+="Was expecting one of:" + eol + "    ";  }  retval+=expected.toString();  return retval;}  }
class C{  public ProbFci(IndependenceTest independenceTest){  if (independenceTest == null || knowledge == null) {    throw new NullPointerException();  }  this.independenceTest=independenceTest;  this.variables.addAll(independenceTest.getVariables());}  }
class C{  void addLabel(){  PositionableLabel l=super.addLabel(textLabel.getText().trim());  setDirty(true);  l.setForeground(defaultTextColor);}  }
class C{  public OwnCloudNote createNote(OwnCloudNote note) throws JSONException, IOException {  return putNote(note,"notes",METHOD_POST);}  }
class C{  @Override public void update(BasicCamera camera){  endpointA.update(camera);  endpointB.update(camera);}  }
class C{  private void animatePropertyBy(int constantName,float startValue,float byValue){  if (mAnimatorMap.size() > 0) {    Animator animatorToCancel=null;    Set<Animator> animatorSet=mAnimatorMap.keySet();    for (    Animator runningAnim : animatorSet) {      PropertyBundle bundle=mAnimatorMap.get(runningAnim);      if (bundle.cancel(constantName)) {        if (bundle.mPropertyMask == NONE) {          animatorToCancel=runningAnim;          break;        }      }    }    if (animatorToCancel != null) {      animatorToCancel.cancel();    }  }  NameValuesHolder nameValuePair=new NameValuesHolder(constantName,startValue,byValue);  mPendingAnimations.add(nameValuePair);  View v=mView.get();  if (v != null) {    v.removeCallbacks(mAnimationStarter);    v.post(mAnimationStarter);  }}  }
class C{  public static String escapeXml(String buffer){  int start=0;  int length=buffer.length();  char[] arrayBuffer=buffer.toCharArray();  StringBuffer escapedBuffer=null;  for (int i=0; i < length; i++) {    char c=arrayBuffer[i];    if (c <= HIGHEST_SPECIAL) {      char[] escaped=specialCharactersRepresentation[c];      if (escaped != null) {        if (start == 0) {          escapedBuffer=new StringBuffer(length + 5);        }        if (start < i) {          escapedBuffer.append(arrayBuffer,start,i - start);        }        start=i + 1;        escapedBuffer.append(escaped);      }    }  }  if (start == 0) {    return buffer;  }  if (start < length) {    escapedBuffer.append(arrayBuffer,start,length - start);  }  return escapedBuffer.toString();}  }
class C{  private double calcDeltaM(int m){  double dEdxm=0;  double dEdym=0;  for (int i=0; i < vertices.length; i++) {    if (i != m) {      double dist=dm[m][i];      double l_mi=L * dist;      double k_mi=K / (dist * dist);      double dx=xydata[m].getX() - xydata[i].getX();      double dy=xydata[m].getY() - xydata[i].getY();      double d=Math.sqrt(dx * dx + dy * dy);      double common=k_mi * (1 - l_mi / d);      dEdxm+=common * dx;      dEdym+=common * dy;    }  }  return Math.sqrt(dEdxm * dEdxm + dEdym * dEdym);}  }
class C{  public void start(){  random=primeGenerator(random);  cleanupAsynchronous();  schedule.reset();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:37.907 -0500",hash_original_method="19E2EF483A3AD0C60513AE35D850A021",hash_generated_method="B36994A490A24608EA801CABF753A3F7") public SIPRequest createAckRequest(To responseToHeader){  SIPRequest newRequest;  Iterator headerIterator;  SIPHeader nextHeader;  newRequest=new SIPRequest();  newRequest.setRequestLine((RequestLine)this.requestLine.clone());  newRequest.setMethod(Request.ACK);  headerIterator=getHeaders();  while (headerIterator.hasNext()) {    nextHeader=(SIPHeader)headerIterator.next();    if (nextHeader instanceof RouteList) {      continue;    } else     if (nextHeader instanceof ProxyAuthorization) {      continue;    } else     if (nextHeader instanceof ContentLength) {      nextHeader=(SIPHeader)nextHeader.clone();      try {        ((ContentLength)nextHeader).setContentLength(0);      } catch (      InvalidArgumentException e) {      }    } else     if (nextHeader instanceof ContentType) {      continue;    } else     if (nextHeader instanceof CSeq) {      CSeq cseq=(CSeq)nextHeader.clone();      try {        cseq.setMethod(Request.ACK);      } catch (      ParseException e) {      }      nextHeader=cseq;    } else     if (nextHeader instanceof To) {      if (responseToHeader != null) {        nextHeader=responseToHeader;      } else {        nextHeader=(SIPHeader)nextHeader.clone();      }    } else     if (nextHeader instanceof ContactList || nextHeader instanceof Expires) {      continue;    } else     if (nextHeader instanceof ViaList) {      nextHeader=(SIPHeader)((ViaList)nextHeader).getFirst().clone();    } else {      nextHeader=(SIPHeader)nextHeader.clone();    }    try {      newRequest.attachHeader(nextHeader,false);    } catch (    SIPDuplicateHeaderException e) {      e.printStackTrace();    }  }  if (MessageFactoryImpl.getDefaultUserAgentHeader() != null) {    newRequest.setHeader(MessageFactoryImpl.getDefaultUserAgentHeader());  }  return newRequest;}  }
class C{  private static int textCompaction(int[] codewords,int codeIndex,StringBuilder result){  int[] textCompactionData=new int[codewords[0] << 1];  int[] byteCompactionData=new int[codewords[0] << 1];  int index=0;  boolean end=false;  while ((codeIndex < codewords[0]) && !end) {    int code=codewords[codeIndex++];    if (code < TEXT_COMPACTION_MODE_LATCH) {      textCompactionData[index]=code / 30;      textCompactionData[index + 1]=code % 30;      index+=2;    } else {switch (code) {case TEXT_COMPACTION_MODE_LATCH:        textCompactionData[index++]=TEXT_COMPACTION_MODE_LATCH;      break;case BYTE_COMPACTION_MODE_LATCH:    codeIndex--;  end=true;break;case NUMERIC_COMPACTION_MODE_LATCH:codeIndex--;end=true;break;case MODE_SHIFT_TO_BYTE_COMPACTION_MODE:textCompactionData[index]=MODE_SHIFT_TO_BYTE_COMPACTION_MODE;code=codewords[codeIndex++];byteCompactionData[index]=code;index++;break;case BYTE_COMPACTION_MODE_LATCH_6:codeIndex--;end=true;break;}}}decodeTextCompaction(textCompactionData,byteCompactionData,index,result);return codeIndex;}  }
class C{  InstanceSubstitution substInNodeToInstanceSub(InstanceSubstitution isub,String opName,SubstInNode subIn){  InstanceSubstitution result=isub.clone();  int lastBang=opName.lastIndexOf('!');  String postPrefix="";  if (lastBang != -1) {    postPrefix=opName.substring(0,lastBang + 1);  }  IDocument doc=moduleNameToIDocument(subIn.getLocation().source());  Subst[] substitutes=subIn.getSubsts();  OpDeclNode[] paramsArray=OpDeclNodeVectorToArray(isub.params);  String[] subsArray=StringVectorToArray(isub.substs);  for (int i=0; i < substitutes.length; i++) {    Subst subst=substitutes[i];    result.params.add(subst.getOp());    NodeRepresentation nodeRep;    try {      nodeRep=new NodeRepresentation(doc,subst.getExpr());    } catch (    BadLocationException e) {      MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","Something unexpected is going on at " + "line 5277 of NewDecomposeProofHandler.");      return null;    }    if (nodeRep.nodeText.length != 1) {      MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","Cannot handle instantiation of module parameter\n " + "with multi-line formula.");      return null;    }    NodeTextRep ntRep=nodeRep.toNodeTextRep();    ntRep=instantiateInNodeText(paramsArray,subsArray,subst.getExpr(),ntRep);    ntRep=renameInNodeText(subst.getExpr(),ntRep,isub.prefix,postPrefix);    if (ntRep == null) {      return null;    }    result.substs.add(ntRep.nodeText[0]);  }  return result;}  }
class C{  private static int removeWhiteSpace(char[] data){  if (data == null) {    return 0;  }  int newSize=0;  int len=data.length;  for (int i=0; i < len; i++) {    if (!isWhiteSpace(data[i])) {      data[newSize++]=data[i];    }  }  return newSize;}  }
class C{  private void refreshAccountSchema(){  if (m_acctSchema == null) {    m_acctSchema=new MAcctSchema(Env.getCtx(),m_C_AcctSchema_ID,null);  }  return;}  }
class C{  private void transformOneRowChangeCase(OneRowChange oneRowChange){  String oldSchema=oneRowChange.getSchemaName();  oneRowChange.setSchemaName(transformCase(oldSchema));  if (logger.isDebugEnabled())   logger.debug("Schema case transformed from " + oldSchema + " to "+ oneRowChange.getSchemaName());  String oldTable=oneRowChange.getTableName();  oneRowChange.setTableName(transformCase(oldTable));  if (logger.isDebugEnabled())   logger.debug("Table case transformed from: " + oldTable + " to "+ oneRowChange.getTableName());  ArrayList<OneRowChange.ColumnSpec> keys=oneRowChange.getKeySpec();  ArrayList<OneRowChange.ColumnSpec> columns=oneRowChange.getColumnSpec();  for (int c=0; c < columns.size(); c++) {    OneRowChange.ColumnSpec colSpec=columns.get(c);    transformColumnCase(colSpec);  }  for (int k=0; k < keys.size(); k++) {    OneRowChange.ColumnSpec colSpec=keys.get(k);    transformColumnCase(colSpec);  }}  }
class C{  public Builder addMatch3Method(Match3MethodSpec match3MethodSpec,int maxArity){  checkArgument(maxArity <= MAX_ARITY,"Arity greater than " + MAX_ARITY + "is not currently supported");  match3Methods.addAll(new Match3MethodPermutationBuilder(matchType,match3MethodSpec,maxArity).build());  return this;}  }
class C{  public synchronized void cancel() throws InterruptedException {  logger.info("Cancelling redo reader thread...");  this.cancelled=true;  this.interrupt();  this.join(30000);  if (this.isAlive()) {    logger.warn("Redo reader thread did not respond to cancellation...");  }}  }
class C{  public ServiceHelper resetConf(String key){  conf=conf.withoutPath(key);  return this;}  }
class C{  public static TangoPoseData matrixToTangoPose(Matrix4 transform){  Vector3 p=transform.getTranslation();  Quaternion q=new Quaternion();  q.fromMatrix(transform);  q.conjugate();  TangoPoseData tangoPose=new TangoPoseData();  double[] t=tangoPose.translation=new double[3];  t[0]=p.x;  t[1]=p.y;  t[2]=p.z;  double[] r=tangoPose.rotation=new double[4];  r[0]=q.x;  r[1]=q.y;  r[2]=q.z;  r[3]=q.w;  return tangoPose;}  }
class C{  public void loadConf(Configuration otherConf){  addConfiguration(otherConf);}  }
class C{  public static DLockRemoteToken createFromDataInput(DataInput in) throws IOException, ClassNotFoundException {  Object name=DataSerializer.readObject(in);  RemoteThread lesseeThread=null;  InternalDistributedMember lessee=(InternalDistributedMember)DataSerializer.readObject(in);  lesseeThread=new RemoteThread(lessee,in.readInt());  int leaseId=in.readInt();  long leaseExpireTime=in.readLong();  return new DLockRemoteToken(name,lesseeThread,leaseId,leaseExpireTime);}  }
class C{  public void testLoadFileTest() throws Exception {  InstanceManager.getDefault(ConfigureManager.class).load(new java.io.File("java/test/jmri/configurexml/load/LoadFileTest.xml"));  Assert.assertNotNull(InstanceManager.sensorManagerInstance().getSensor("IS1"));  Assert.assertNull(InstanceManager.sensorManagerInstance().getSensor("no sensor"));  Assert.assertNotNull(InstanceManager.turnoutManagerInstance().getTurnout("IT1"));  Assert.assertNull(InstanceManager.turnoutManagerInstance().getTurnout("no sensor"));  Assert.assertNotNull(InstanceManager.memoryManagerInstance().getMemory("IM1"));  Assert.assertNull(InstanceManager.memoryManagerInstance().getMemory("no memory"));}  }
class C{  public static String incrementAtIndex(final String s,final int index){  final char[] chars=s.toCharArray();  chars[index]=(char)(chars[index] + 1);  return new String(chars);}  }
class C{  private <A extends Annotation>A findFieldAnnotation(Class<A> annotationType,Class<?> cls,String fieldName){  do {    for (    Field f : cls.getDeclaredFields()) {      if (fieldName.equals(f.getName())) {        return f.getAnnotation(annotationType);      }    }    if (cls.isInterface() || cls == Object.class) {      break;    }    cls=cls.getSuperclass();  } while (cls != null);  return null;}  }
class C{  public BigInteger generateServerCredentials(){  BigInteger k=SRP6Util.calculateK(digest,N,g);  this.b=selectPrivateValue();  this.B=k.multiply(v).mod(N).add(g.modPow(b,N)).mod(N);  return B;}  }
class C{  public long cmajflt(){  return Long.parseLong(fields[12]);}  }
class C{  @POST @Path("/{id}/deactivate") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) public TaskResourceRep deactivateHost(@PathParam("id") URI id,@DefaultValue("false") @QueryParam("detach_storage") boolean detachStorage,@DefaultValue("false") @QueryParam("detach-storage") boolean detachStorageDeprecated,@DefaultValue("true") @QueryParam("deactivate_boot_volume") boolean deactivateBootVolume) throws DatabaseException {  Host host=queryHost(_dbClient,id);  ArgValidator.checkEntity(host,id,true);  boolean hasPendingTasks=hostHasPendingTasks(id);  if (hasPendingTasks) {    throw APIException.badRequests.resourceCannotBeDeleted("Host with another operation in progress");  }  boolean isHostInUse=ComputeSystemHelper.isHostInUse(_dbClient,host.getId());  if (isHostInUse && !(detachStorage || detachStorageDeprecated)) {    throw APIException.badRequests.resourceHasActiveReferences(Host.class.getSimpleName(),id);  } else {    String taskId=UUID.randomUUID().toString();    Operation op=_dbClient.createTaskOpStatus(Host.class,host.getId(),taskId,ResourceOperationTypeEnum.DELETE_HOST);    ComputeSystemController controller=getController(ComputeSystemController.class,null);    controller.detachHostStorage(host.getId(),true,deactivateBootVolume,taskId);    if (!NullColumnValueGetter.isNullURI(host.getComputeElement())) {      host.setProvisioningStatus(Host.ProvisioningJobStatus.IN_PROGRESS.toString());    }    _dbClient.persistObject(host);    auditOp(OperationTypeEnum.DELETE_HOST,true,op.getStatus(),host.auditParameters());    return toTask(host,taskId,op);  }}  }
class C{  public static ComponentUI createUI(JComponent c){  return new PaletteFormattedTextFieldUI();}  }
class C{  public void subscribeToViewEvent(Class<? extends SystemEvent> systemEvent,SystemEventListener listener){  if (systemEvent == null) {    throw new NullPointerException();  }  if (listener == null) {    throw new NullPointerException();  }  if (viewListeners == null) {    viewListeners=new HashMap<>(4,1.0f);  }  List<SystemEventListener> listeners=viewListeners.get(systemEvent);  if (listeners == null) {    listeners=new CopyOnWriteArrayList<>();    viewListeners.put(systemEvent,listeners);  }  listeners.add(listener);}  }
class C{  protected WeakCollection(Collection<WeakReference<T>> collection){  this.collection=collection;}  }
class C{  public Swagger2MarkupConfigBuilder withLineSeparator(LineSeparator lineSeparator){  Validate.notNull(lineSeparator,"%s must no be null","lineSeparator");  config.lineSeparator=lineSeparator;  return this;}  }
class C{  private void parseMenu(XmlPullParser parser,AttributeSet attrs,SublimeMenu menu) throws XmlPullParserException, IOException {  MenuState menuState=new MenuState(menu);  int eventType=parser.getEventType();  String tagName;  boolean lookingForEndOfUnknownTag=false;  String unknownTagName=null;  do {    if (eventType == XmlPullParser.START_TAG) {      tagName=parser.getName();      if (tagName.equals(XML_MENU)) {        eventType=parser.next();        break;      }      throw new RuntimeException("Expecting menu, got " + tagName);    }    eventType=parser.next();  } while (eventType != XmlPullParser.END_DOCUMENT);  boolean reachedEndOfMenu=false;  while (!reachedEndOfMenu) {switch (eventType) {case XmlPullParser.START_TAG:      if (lookingForEndOfUnknownTag) {        break;      }    tagName=parser.getName();  if (tagName.equals(XML_GROUP)) {    if (menuState.groupId != MenuState.defaultGroupId) {      throw new RuntimeException("A 'Group' item cannot have " + "other 'Group' items as children.");    }    menuState.readGroup(attrs);    menuState.addGroup();  } else   if (tagName.equals(XML_TEXT) || tagName.equals(XML_TEXT_WITH_BADGE) || tagName.equals(XML_CHECKBOX)|| tagName.equals(XML_SWITCH)) {    menuState.readMenuItem(attrs,tagName);  } else   if (tagName.equals(XML_SEPARATOR)) {    menuState.readMenuItem(attrs,tagName);  } else   if (tagName.equals(XML_GROUP_HEADER)) {    if (menuState.groupId == MenuState.defaultGroupId) {      throw new RuntimeException("'GroupHeader' item should " + "be placed inside a Group element.");    }    menuState.readMenuItem(attrs,tagName);  } else   if (tagName.equals(XML_MENU)) {    throw new RuntimeException("Sub-menus are not supported. " + "Similar functionality can be afforded " + "using the 'group' tag.");  } else {    lookingForEndOfUnknownTag=true;    unknownTagName=tagName;  }break;case XmlPullParser.END_TAG:tagName=parser.getName();if (lookingForEndOfUnknownTag && tagName.equals(unknownTagName)) {lookingForEndOfUnknownTag=false;unknownTagName=null;} else if (tagName.equals(XML_GROUP)) {if (menuState.isGroupCollapsible() && menuState.groupHeadersAdded != 1) {if (menuState.groupHeadersAdded < 1) {  throw new RuntimeException("A 'GroupHeader' is required " + "to create a 'collapsible' Group.");} else {  throw new RuntimeException("A 'collapsible' Group can only " + "have ONE 'GroupHeader'. You have provided: " + menuState.groupHeadersAdded + ".");}}menuState.resetGroup();} else if (tagName.equals(XML_TEXT) || tagName.equals(XML_TEXT_WITH_BADGE) || tagName.equals(XML_CHECKBOX)|| tagName.equals(XML_SWITCH)|| tagName.equals(XML_GROUP_HEADER)|| tagName.equals(XML_SEPARATOR)) {if (!menuState.hasAddedItem()) {menuState.addItem();}} else if (tagName.equals(XML_MENU)) {reachedEndOfMenu=true;}break;case XmlPullParser.END_DOCUMENT:throw new RuntimeException("Unexpected end of document");}eventType=parser.next();}}  }
class C{  static public void dumpBlobs(final Writer w,final boolean showEntries,final String namespace,final IIndex ndx){  final int BIN_SIZE=256;  final int NBINS=(BlobsIndexHelper.MAX_COUNTER + 1) / BIN_SIZE;  try {    int maxCollisionCounter=0;    final long[] bins=new long[NBINS];    final BigdataValueFactory vf=BigdataValueFactoryImpl.getInstance(namespace);    final BigdataValueSerializer<BigdataValue> valSer=vf.getValueSerializer();    final StringBuilder tmp=new StringBuilder();    w.append("fastRangeCount=" + ndx.rangeCount() + "\n");    @SuppressWarnings("unchecked") final ITupleIterator<BlobIV<?>> itr=ndx.rangeIterator();    long nvisited=0L;    while (itr.hasNext()) {      final ITuple<BlobIV<?>> tuple=itr.next();      nvisited++;      if (tuple.isNull()) {        if (showEntries) {          w.append("NullIV: key=");          w.append(BytesUtil.toString(tuple.getKey()));          w.append("\n");        }      } else {        final BlobIV<?> iv=(BlobIV<?>)IVUtility.decodeFromOffset(tuple.getKeyBuffer().array(),0);        final BigdataValue value=valSer.deserialize(tuple.getValueStream(),tmp);        if (showEntries) {          w.append(iv.toString());          w.append(" => ");          w.append(value.toString());          w.append("\n");        }        final int counter=iv.counter();        if (counter > maxCollisionCounter) {          maxCollisionCounter=counter;        }        final int bin=(int)(counter / BIN_SIZE);        bins[bin]++;      }    }    w.append("nvisited=" + nvisited + "\n");    w.append("binSize=" + BIN_SIZE + "\n");    w.append("nbins=" + NBINS + "\n");    int nnzero=0;    for (int bin=0; bin < NBINS; bin++) {      final long numberInBin=bins[bin];      if (numberInBin == 0)       continue;      w.append("bins[" + bin + "]="+ numberInBin+ "\n");      nnzero++;    }    w.append("numNonZeroBins=" + nnzero + "\n");    w.append("maxCollisionCounter=" + maxCollisionCounter + "\n");  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isSummary(){  return m_isSummary;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void appendLineStringTaggedText(LineString lineString,int level,Writer writer) throws IOException {  appendLineString(lineString,level,false,writer);}  }
class C{  public void updateDate(int columnIndex,java.sql.Date x) throws SQLException {  checkState();  checkTypeConcurrency();  rs.updateDate(columnIndex,x);}  }
class C{  public static long convertAmount(final double exchangeRate,final int sourceFractionDigits,final long sourceAmount,final int targetFractionDigits){  int digitDelta=targetFractionDigits - sourceFractionDigits;  double value=((double)sourceAmount * exchangeRate);  if (digitDelta != 0) {    if (digitDelta < 0) {      for (int i=0; i < -digitDelta; i++) {        value*=0.1;      }    } else {      for (int i=0; i < digitDelta; i++) {        value*=10.0;      }    }  }  return (long)value;}  }
class C{  public TestNodeGroupManager createNodeGroup(){  List<Operation> ops=this.hosts.stream().map(null).map(null).collect(toList());  getTestRequestSender().sendAndWait(ops);  return this;}  }
class C{  private void startHandshake(boolean resumable) throws IOException {  checkWrite();  try {    if (getConnectionState() == cs_HANDSHAKE) {      performInitialHandshake();    } else {      kickstartHandshake();    }  } catch (  Exception e) {    handleException(e,resumable);  }}  }
class C{  private void block(){  Thread t=Thread.currentThread();  int i=0;synchronized (this) {    if (waitingThreads == null) {      if (waitingThread == null) {        waitingThread=t;      } else {        waitingThreads=new ArrayList<>();        waitingThreads.add(waitingThread);        waitingThreads.add(t);        i=1;        waitingThread=null;      }    } else {      i=waitingThreads.size();      waitingThreads.add(t);    }  }  while (!finished) {    try {      t.wait(500);    } catch (    Exception e) {      Thread.yield();    }  }synchronized (this) {    Thread.interrupted();    if (waitingThread == t) {      waitingThread=null;    }    if (waitingThreads != null) {      waitingThreads.remove(i);    }  }}  }
class C{  public void createCalibrationCharts(String colorScheme,SortedMap<Integer,Integer[]> distanceTripMap,SortedMap<Integer,Integer[]> travelTimeTripMap,SortedMap<Integer,Integer[]> numberTripsPerMode,String path,String surveyName) throws IOException {  path=path.substring(0,path.lastIndexOf("/")) + "/calibration" + path.substring(path.lastIndexOf("/"),path.length());  getSimulationData(distanceTripMap,travelTimeTripMap,numberTripsPerMode);  simulationDistDataset.calculateSharesAndTotals();  simulationTTDataset.calculateSharesAndTotals();  commonColorScheme=colorScheme;  createModeShareStackedBarChart(surveyName + " Mode Share per Distance Class",path + fileTripDistanceByModeBenchmark,surveyDistDataset,"Distance [km]","Mode share [%]");  createModeShareStackedBarChart("Simulation Mode Share per Distance Class",path + fileTripDistanceByModeSimulation,simulationDistDataset,"Distance [km]","Mode share [%]");  createModeShareComparisonChart("Modeshare per Distance Class - " + surveyName + " vs. Simulation",path + fileTripDistanceByModeComparison,simulationDistDataset,surveyDistDataset,"Distance [km]","Bias mode share [%]");  createCummulativeModeShareChart(surveyName + " Cumulative Mode Share per Distance Class",path + fileCumulativeTripDistanceByModeBenchmark,surveyDistDataset,"Distance [km]","Cumulative mode share [%]");  createCummulativeModeShareChart("Simulation Cumulative Mode Share per Distance Class",path + fileCumulativeTripDistanceByModeSimulation,simulationDistDataset,"Distance [km]","Cumulative mode share [%]");  createCummulativeModeShareComparisonChart("Cummulative Modeshare per Distance Class - " + surveyName + " vs. Simulation",path + fileCumulativeTripDistanceByModeComparison,simulationDistDataset,surveyDistDataset,"Distance [km]","Bias cumulative mode share (%)");  createModeShareStackedBarChart(surveyName + " Mode Share per Travel Time Class",path + fileTripTTByModeBenchmark,surveyTTDataset,"Travel Time [min]","Mode share [%]");  createModeShareStackedBarChart("Simulation Mode Share per Travel Time Class",path + fileTripTTByModeSimulation,simulationTTDataset,"Travel Time [min]","Mode share [%]");  createModeShareComparisonChart("Modeshare per Travel Time - " + surveyName + " vs. Simulation",path + fileTripTTByModeComparison,simulationTTDataset,surveyTTDataset,"Travel Time [min]","Bias mode share [%]");  createCummulativeModeShareChart(surveyName + " Cumulative Mode Share per Travel Time Class",path + fileCumulativeTripTTByModeBenchmark,surveyTTDataset,"Travel Time [min]","Cumulative mode share [%]");  createCummulativeModeShareChart("Simulation Cumulative Mode Share per Travel Time Class",path + fileCumModeshareTTSimulation,simulationTTDataset,"Travel Time [min]","Cumulative mode share [%]");  createCummulativeModeShareComparisonChart("Cummulative Modeshare per Travel Time Class - " + surveyName + " vs. Simulation",path + fileCumModeshareTTComparison,simulationTTDataset,surveyTTDataset,"Travel Time [min]","Bias cumulative mode share (%)");  createModeShareHistoryChart("Simulation Modeshare",path.substring(0,path.indexOf("ITERS")) + fileModeshareHistory,modeShareHistoryDataset,"Iteration","Mode share [%]",surveyTTDataset);}  }
class C{  public void removeEventListener(VideoSharingListener listener) throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    WeakReference<IVideoSharingListener> weakRef=mVideoSharingListeners.remove(listener);    if (weakRef == null) {      return;    }    IVideoSharingListener rcsListener=weakRef.get();    if (rcsListener != null) {      mApi.removeEventListener2(rcsListener);    }  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public Builder appendReadData(byte[] data){  Assertions.checkState(data != null && data.length > 0);  segments.add(new Segment(data,null));  return this;}  }
class C{  public static void registerProvider(CrashInfoProvider prov){  providers.add(prov);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String qual=getString(stack);  return MMC.getInstance().getQualityFormat(qual);}  }
class C{  FlowState manageProvisioningProcess(FlowState flowState,InstanceStatus result) throws APPlatformException {  EC2Communication ec2comm=new EC2Communication(ph);  String instanceState;  FlowState newState=null;  String mail=ph.getMailForCompletion();  String accessInfo=null;switch (flowState) {case CREATION_REQUESTED:    Image imageId=ec2comm.resolveAMI(ph.getImageName());  ec2comm.createInstance(imageId);newState=FlowState.CREATING;break;case MODIFICATION_REQUESTED:ec2comm.modifyInstance();newState=FlowState.UPDATING;break;case DELETION_REQUESTED:ec2comm.terminateInstance(ph.getAWSInstanceId());newState=FlowState.DELETING;break;case CREATING:if (isInstanceRunning(ec2comm)) {accessInfo=Messages.get(ph.getCustomerLocale(),"accessInfo_DNS",new Object[]{ec2comm.getPublicDNS(ph.getAWSInstanceId())});result.setAccessInfo(accessInfo + KEY_PAIR_NAME + ph.getKeyPairName());if (mail != null) {newState=dispatchManualOperation(AWSController.ID,instanceId,ph,mail);} else {newState=FlowState.FINISHED;}}break;case UPDATING:accessInfo=Messages.get(ph.getCustomerLocale(),"accessInfo_DNS",new Object[]{ec2comm.getPublicDNS(ph.getAWSInstanceId())});if (accessInfo == null || accessInfo.trim().length() == 0) {accessInfo=Messages.get(ph.getCustomerLocale(),"accessInfo_STOPPED");}result.setAccessInfo(accessInfo + KEY_PAIR_NAME + ph.getKeyPairName());if (mail != null) {newState=dispatchManualOperation(AWSController.ID,instanceId,ph,mail);} else {newState=FlowState.FINISHED;}break;case DELETING:instanceState=ec2comm.getInstanceState(ph.getAWSInstanceId());ec2comm.isInstanceReady(ph.getAWSInstanceId());if ("terminated".equals(instanceState)) {if (mail != null) {newState=dispatchManualOperation(AWSController.ID,instanceId,ph,mail);} else {newState=FlowState.DESTROYED;}}break;case FINISHED:if (isInstanceRunning(ec2comm)) {accessInfo=Messages.get(ph.getCustomerLocale(),"accessInfo_DNS",new Object[]{ec2comm.getPublicDNS(ph.getAWSInstanceId())});result.setAccessInfo(accessInfo + KEY_PAIR_NAME + ph.getKeyPairName());}break;default :}return newState;}  }
class C{  public void addOrigin(PlanNode node){  Loop loop=new Loop();  boolean newLoop=true, hasMaps=false, hasProducts=false;  PlanNode prev=null;  if (node instanceof IndexScan) {    loop.setIndex((IndexScan)node);    prev=node;    node=node.getOutput();  }  while (node instanceof TableLoader) {    loop.addLoader(node);    prev=node;    node=node.getOutput();  }  while (true) {    if (node instanceof Flatten) {      loop.addFlatten((Flatten)node);    } else     if (node instanceof Product) {      Product product=(Product)node;      if (newLoop) {        loop.addFlattenOrProduct(product);        if (products == null)         products=new HashMap<>();        Loop oloop=products.get(product);        if (oloop != null) {          loop=oloop.merge(loop,product);          newLoop=false;        } else {          products.put(product,loop);        }      }      hasProducts=true;    } else     if (node instanceof MapJoin) {      MapJoin map=(MapJoin)node;switch (map.getJoinType()) {case INNER:        break;case LEFT:case SEMI:case ANTI:      if (prev == map.getInner())       return;    break;default :  return;}hasMaps=true;} else if (node instanceof Select) {Select select=(Select)node;if (!select.getConditions().isEmpty()) {SelectConditions selectConditions=null;boolean newSelect=false;if (selects != null) selectConditions=selects.get(select);if (selectConditions == null) {  selectConditions=new SelectConditions(select);  newSelect=true;}if (!loop.isEmpty()) {  selectConditions.moveConditions(loop);}if (select.getConditions().isEmpty()) {  if (!newSelect)   selects.remove(select);} else {  if (hasMaps && newLoop) {    selectConditions.addLoop(loop);  }  if (hasProducts || hasMaps) {    if (selects == null)     selects=new HashMap<>();    selects.put(select,selectConditions);  }}}} else break;prev=node;node=node.getOutput();}}  }
class C{  public Tokenizer(File f) throws FileNotFoundException {  this(new FileInputStream(f));  wantClose=true;  filename=f.getName();}  }
class C{  public void generate(){  preprocessClasses();  processClasses();  processExcludes();  processFields();  processMethods();  processMetadata();  processClassInheritance();  assembleClassXML();  assembleClassPackageHierarchy();}  }
class C{  public void initializeValues(){  for (  Mapping fixedMapping : fixedMappings) {    Parameter parameter=fixedMapping.getParameter();    fixedMapping.setValue(initialValue(parameter));  }  for (  Mapping freeMapping : freeMappings) {    Parameter parameter=freeMapping.getParameter();    freeMapping.setValue(initialValue(parameter));  }}  }
class C{  protected void warn(){  if (this.warn) {    getLogger().warn("The jonas5x local deployer requires the target JOnAS server to be in" + " development mode.",getClass().getName());    getLogger().warn("",getClass().getName());    getLogger().warn("If this is not the case, please use the jonas5x remote deployer.",getClass().getName());    getLogger().warn("Note that the jonas5x remote deployer can be used on a local server" + " by setting the server name to localhost.",getClass().getName());  }}  }
class C{  public boolean cursorHasNext(long id){  return getCursor(id).index < size();}  }
class C{  private void selectWord(MouseEvent e){  if (selectedWordEvent != null && selectedWordEvent.getX() == e.getX() && selectedWordEvent.getY() == e.getY()) {    return;  }  Action a=null;  RTextArea textArea=getTextArea();  ActionMap map=textArea.getActionMap();  if (map != null) {    a=map.get(RTextAreaEditorKit.selectWordAction);  }  if (a == null) {    if (selectWord == null) {      selectWord=new RTextAreaEditorKit.SelectWordAction();    }    a=selectWord;  }  a.actionPerformed(new ActionEvent(textArea,ActionEvent.ACTION_PERFORMED,null,e.getWhen(),e.getModifiers()));  selectedWordEvent=e;}  }
class C{  public static int depthFactor(int currLocation,int nextLocation){  if (currLocation == Location.EXTERIOR && nextLocation == Location.INTERIOR)   return 1; else   if (currLocation == Location.INTERIOR && nextLocation == Location.EXTERIOR)   return -1;  return 0;}  }
class C{  public static CreateIndexClause create(boolean unique,String indexName,String windowName,String... properties){  return new CreateIndexClause(indexName,windowName,properties,unique);}  }
class C{  synchronized long lockAndAbortAll(IndexWriter indexWriter){  assert indexWriter.holdsFullFlushLock();  if (infoStream.isEnabled("DW")) {    infoStream.message("DW","lockAndAbortAll");  }  long abortedDocCount=0;  boolean success=false;  try {    deleteQueue.clear();    final int limit=perThreadPool.getMaxThreadStates();    perThreadPool.setAbort();    for (int i=0; i < limit; i++) {      final ThreadState perThread=perThreadPool.getThreadState(i);      perThread.lock();      abortedDocCount+=abortThreadState(perThread);    }    deleteQueue.clear();    deleteQueue.skipSequenceNumbers(perThreadPool.getActiveThreadStateCount() + 1);    flushControl.abortPendingFlushes();    flushControl.waitForFlush();    success=true;    return abortedDocCount;  }  finally {    if (infoStream.isEnabled("DW")) {      infoStream.message("DW","finished lockAndAbortAll success=" + success);    }    if (success == false) {      unlockAllAfterAbortAll(indexWriter);    }  }}  }
class C{  public void monitorQueryThread(Thread queryThread,Query query){  if (LOW_MEMORY) {    String reason=LocalizedStrings.QueryMonitor_LOW_MEMORY_CANCELED_QUERY.toLocalizedString(LOW_MEMORY_USED_BYTES);    ((DefaultQuery)query).setCanceled(true,new QueryExecutionLowMemoryException(reason));    throw new QueryExecutionLowMemoryException(reason);  }  QueryThreadTask queryTask=new QueryThreadTask(queryThread,query,queryExecutionStatus.get());synchronized (queryThreads) {    queryThreads.add(queryTask);    queryThreads.notify();  }  if (logger.isDebugEnabled()) {    logger.debug("Adding thread to QueryMonitor. QueryMonitor size is:{}, Thread (id): {} query: {} thread is : {}",queryThreads.size(),queryThread.getId(),query.getQueryString(),queryThread);  }  if (GemFireCacheImpl.getInstance() != null && GemFireCacheImpl.getInstance().TEST_MAX_QUERY_EXECUTION_TIME > 0) {    if (this.queryMonitorTasks == null) {      this.queryMonitorTasks=new ConcurrentHashMap();    }    this.queryMonitorTasks.put(queryThread,queryTask);  }}  }
class C{  private static Map<String,Object> collectConstants(String type){  Map<String,Object> constants=new LinkedHashMap<>();  for (  Field field : toClass(type).getFields()) {    int modifiers=field.getModifiers();    if (isPublic(modifiers) && isStatic(modifiers) && isFinal(modifiers)) {      try {        constants.put(field.getName(),field.get(null));      } catch (      Exception e) {        throw new IllegalArgumentException(String.format("UIImportConstants cannot access constant field '%s' of type '%s'.",type,field.getName()),e);      }    }  }  return unmodifiableMap(new ConstantsMap(constants,type));}  }
class C{  public static boolean hasConstant(Assignment assignment,ModuleNode moduleNode){  OpDeclNode[] constantDecls=moduleNode.getConstantDecls();  for (int i=0; i < constantDecls.length; i++) {    if (assignment.getLabel().equals(constantDecls[i].getName().toString()) && assignment.getParams().length == constantDecls[i].getNumberOfArgs()) {      return true;    }  }  return false;}  }
class C{  public boolean areAllDaysExcluded(){  for (int i=1; i <= MAX_DAYS_IN_MONTH; i++) {    if (isDayExcluded(i) == false) {      return false;    }  }  return true;}  }
class C{  protected void runTLCPreLoop(){}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (external: ");  result.append(external);  result.append(')');  return result.toString();}  }
class C{  public static boolean isDirectory(String fileName){  return FilePath.get(fileName).isDirectory();}  }
class C{  public int archiveSize(){  return this.archives.size();}  }
class C{  public boolean isDSVerifiedMethod(SootMethod m){  return verified_methods.contains(m);}  }
class C{  private ReflectionUtil(){  throw new UnsupportedOperationException("No instantiation");}  }
class C{  private void createResourcePoolAndComputeHostState() throws Throwable {  this.outPool=createDefaultResourcePool(this.host);  ResourceGroupState resourceGroup=createDefaultResourceGroup(this.host,this.projectID);  this.computeHost=createDefaultComputeHost(this.host,this.userEmail,this.privateKey,this.zoneID,this.outPool.documentSelfLink,resourceGroup.documentSelfLink);}  }
class C{  public Schedule newSchedule(String name){  Schedule schedule=getScheduleByName(name);  if (schedule == null) {    _id++;    schedule=new Schedule(Integer.toString(_id),name);    Integer oldSize=Integer.valueOf(_scheduleHashTable.size());    _scheduleHashTable.put(schedule.getId(),schedule);    setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_scheduleHashTable.size()));  }  return schedule;}  }
class C{  int readCorner2(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 3,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 2,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 4,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 3,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public SecurityException(){  super();}  }
class C{  public String handleGetMessage(Locale locale,String key){  if (bundleName() != null) {    ResourceBundle rb=ResourceBundle.getBundle(bundleName(),locale);    if (rb.containsKey(key)) {      return rb.getString(key);    } else {      return retry(locale,key);    }  } else {    return retry(locale,key);  }}  }
class C{  public TypeNotPresentException(String typeName,@Nullable Throwable cause){  super("Type " + typeName + " not present",cause);  this.typeName=typeName;}  }
class C{  public int size(){  return list.size();}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {  ProcessorCharacters charProcessor=(ProcessorCharacters)handler.getProcessorFor(null,"text()","text");  charProcessor.setXslTextElement(null);}  }
class C{  public static boolean end(List<Animator> animators){  boolean isEndCalled=false;  if (animators != null) {    for (    Animator animator : animators) {      if (end(animator)) {        isEndCalled=true;      }    }  }  return isEndCalled;}  }
class C{  public boolean is(String arg,boolean allowAbbr){  if (name.equalsIgnoreCase(arg)) {    return true;  }  if (allowAbbr && arg.length() == 1) {    if (arg.charAt(0) == c) {      return true;    }  }  return false;}  }
class C{  public String attributeCaseFix(String columnName){  if (m_checkForUpperCaseNames) {    String ucname=columnName.toUpperCase();    if (ucname.equals(EXP_TYPE_COL.toUpperCase())) {      return EXP_TYPE_COL;    } else     if (ucname.equals(EXP_SETUP_COL.toUpperCase())) {      return EXP_SETUP_COL;    } else     if (ucname.equals(EXP_RESULT_COL.toUpperCase())) {      return EXP_RESULT_COL;    } else {      return columnName;    }  } else   if (m_checkForLowerCaseNames) {    String ucname=columnName.toLowerCase();    if (ucname.equals(EXP_TYPE_COL.toLowerCase())) {      return EXP_TYPE_COL;    } else     if (ucname.equals(EXP_SETUP_COL.toLowerCase())) {      return EXP_SETUP_COL;    } else     if (ucname.equals(EXP_RESULT_COL.toLowerCase())) {      return EXP_RESULT_COL;    } else {      return columnName;    }  } else {    return columnName;  }}  }
class C{  static public TModel2D estimateBestModel(List<PointMatch> candidates,Collection<PointMatch> inliers,float min_epsilon,float max_epsilon,float min_inlier_ratio){  inliers.clear();  TModel2D model=null;  float epsilon=0.0f;  if (candidates.size() > MIN_SET_SIZE) {    int highest_num_inliers=0;    int convergence_count=0;    TModel2D m=null;    do {      final ArrayList<PointMatch> temp_inliers=new ArrayList<PointMatch>();      epsilon+=min_epsilon;      m=estimateModel(candidates,temp_inliers,1000,epsilon,min_inlier_ratio);      if (m != null) {        int num_inliers=temp_inliers.size();        if (num_inliers <= highest_num_inliers) {          ++convergence_count;        } else {          model=m.clone();          inliers.clear();          inliers.addAll(temp_inliers);          convergence_count=0;          highest_num_inliers=num_inliers;        }      }    } while ((m == null || convergence_count < 4) && epsilon < max_epsilon);  }  if (model == null) {  } else {  }  return model;}  }
class C{  @Override public Value sample(Assignment condition){  Assignment augmentedCond=new Assignment(condition,uncondDistrib.sample());  return condDistrib.sample(augmentedCond);}  }
class C{  public CodeConstantOperand(RVMMethod v){  if (VM.VerifyAssertions)   VM._assert(v != null);  value=v;}  }
class C{  public static JavaFXBinder<Integer> bind(WritableIntegerValue writableDoubleValue){  requireNonNull(writableDoubleValue,"writableDoubleValue");  return new DefaultJavaFXBinder(writableDoubleValue);}  }
class C{  public VerbTag(){  super();}  }
class C{  public static Group createGroup(Composite parent,String text,int columns,int hspan,int fill){  Group g=new Group(parent,SWT.NONE);  g.setLayout(new GridLayout(columns,false));  g.setText(text);  g.setFont(parent.getFont());  GridData gd=new GridData(fill);  gd.horizontalSpan=hspan;  g.setLayoutData(gd);  return g;}  }
class C{  private FlexibleNode readInternalNode(TaxonList taxonList) throws IOException, ImportException {  FlexibleNode node=new FlexibleNode();  final char ch=readCharacter();  assert ch == '(';  node.addChild(readBranch(taxonList));  if (getLastDelimiter() != ',') {    throw new BadFormatException("Expecting ',' in tree, but got '" + (char)getLastDelimiter() + "'");  }  do {    node.addChild(readBranch(taxonList));  } while (getLastDelimiter() == ',');  if (getLastDelimiter() != ')') {    throw new BadFormatException("Missing closing ')' in tree");  }  try {    String label=readToken(",():;");    if (label.length() > 0) {      node.setAttribute("label",label);    }  } catch (  IOException ioe) {  }  return node;}  }
class C{  public UndeployDeployableOnlineScriptCommand(Configuration configuration,String resourcePath,Deployable deployable){  super(configuration,resourcePath);  this.deployable=deployable;}  }
class C{  public static Var createConstVar(Value value){  String varName=getConstVarName(value);  Var var=new Var(varName);  var.setConstant(true);  var.setAnonymous(true);  var.setValue(value);  return var;}  }
class C{  public void dispose(){  if (textureRenderer != null) {    try {      textureRenderer.cleanup();      textureRenderer=null;    } catch (    Exception e) {    }  }}  }
class C{  public Map<MbBaust,List<NotizenMassnahmeResult>> convertZielobjektNotizenMap(List<NotizenMassnahmeResult> searchResult){  Map<MbBaust,List<NotizenMassnahmeResult>> bausteineMassnahmenMap=new HashMap<MbBaust,List<NotizenMassnahmeResult>>();  for (  NotizenMassnahmeResult result : searchResult) {    List<NotizenMassnahmeResult> list=bausteineMassnahmenMap.get(result.baustein);    if (list == null) {      list=new ArrayList<NotizenMassnahmeResult>();      bausteineMassnahmenMap.put(result.baustein,list);    }    list.add(result);  }  return bausteineMassnahmenMap;}  }
class C{  public static boolean isEnum(int mod){  return (mod & ENUM) != 0;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private boolean isControllerMethodSignatureValid(JMethod method){  try {    if (!method.isPublic()) {      return false;    }    boolean exposed=method.getAnnotation(Expose.class) != null;    boolean factory=method.getAnnotation(Factory.class) != null;    if ((exposed && factory) || (!exposed && !factory)) {      return false;    }    JParameter[] parameters=method.getParameters();    if (exposed) {      if (parameters != null && parameters.length != 0 && parameters.length != 1) {        return false;      }      if (parameters != null && parameters.length == 1) {        JClassType gwtEventType=controllerClass.getOracle().getType(GwtEvent.class.getCanonicalName());        JClassType nativeEventType=controllerClass.getOracle().getType(NativeEvent.class.getCanonicalName());        JClassType cruxEventType=controllerClass.getOracle().getType(BaseEvent.class.getCanonicalName());        JClassType parameterType=parameters[0].getType().isClassOrInterface();        if (parameterType == null || (!gwtEventType.isAssignableFrom(parameterType) && !cruxEventType.isAssignableFrom(parameterType) && !nativeEventType.isAssignableFrom(parameterType))) {          return false;        }      }    } else     if (factory) {      if (parameters == null || parameters.length != 1) {        return false;      }      JType returnType=method.getReturnType().getErasedType();      boolean hasReturn=returnType != JPrimitiveType.VOID;      if (!hasReturn) {        return false;      }    }    JClassType objectType=controllerClass.getOracle().getType(Object.class.getCanonicalName());    if (method.getEnclosingType().equals(objectType)) {      return false;    }    return true;  } catch (  NotFoundException e) {    throw new CruxGeneratorException(e.getMessage(),e);  }}  }
class C{  public JSONArray put(int index,Collection<Object> value) throws JSONException {  this.put(index,new JSONArray(value));  return this;}  }
class C{  public HashMap<String,Boolean> startInstances(PropertyHandler ph) throws HeatException, APPlatformException, NovaException {  OpenStackConnection connection=getConnection(ph);  List<String> serverIds=new HeatClient(connection).getServerIds(ph.getStackName());  HashMap<String,Boolean> operationStatuses=new HashMap<String,Boolean>();  if (serverIds.size() == 0) {    throw new InstanceNotAliveException(Messages.getAll("error_starting_failed_instance_not_found"));  }  NovaClient nc=new NovaClient(connection);  for (  String id : serverIds) {    Boolean result=Boolean.FALSE;    try {      result=nc.startServer(ph,id);    } catch (    OpenStackConnectionException ex) {      if (ex.getResponseCode() == 401) {        logger.info("Could not start server (Server ID:" + id + ") in stack (Stack ID: "+ ph.getStackId()+ ") because of unauthorized. Retry once after authorised.",ex);        try {          connection=getConnection(ph);          nc=new NovaClient(connection);          result=nc.startServer(ph,id);        } catch (        OpenStackConnectionException e) {          logger.info("Could not start server (Server ID:" + id + ") in stack (Stack ID: "+ ph.getStackId()+ ")",e);          result=Boolean.FALSE;        }      } else {        logger.info("Could not start server (Server ID:" + id + ") in stack (Stack ID: "+ ph.getStackId()+ ")",ex);        result=Boolean.FALSE;      }    }    operationStatuses.put(id,result);  }  return operationStatuses;}  }
class C{  public RestoreSnapshotRequest source(XContentBuilder source){  try {    return source(source.bytes());  } catch (  Exception e) {    throw new IllegalArgumentException("Failed to build json for repository request",e);  }}  }
class C{  public boolean isEnable(){  return enable;}  }
class C{  public void configure(){  XNetTrafficController packets=new XNetPacketizer(new HornbyEliteCommandStation());  packets.connectPort(this);  this.getSystemConnectionMemo().setXNetTrafficController(packets);  new EliteXNetInitializationManager(this.getSystemConnectionMemo());}  }
class C{  public boolean sharedUseCompression(){  return urlParser.getOptions().useCompression;}  }
class C{  @Override public TreePath scan(Tree tree,Tree target){  TreePath prev=path;  if (tree != null && foundPaths.get(tree) == null) {    TreePath current=new TreePath(path,tree);    foundPaths.put(tree,current);    path=current;  } else {    this.path=foundPaths.get(tree);  }  if (tree == target) {    throw new Result(path);  }  try {    return super.scan(tree,target);  }  finally {    this.path=prev;  }}  }
class C{  public StorageFileSystem[] queryStorageFileSystems(String[] fileSystem) throws InvalidArgument, InvalidSession, StorageFault, NotImplemented {  final String methodName="queryStorageFileSystems(): ";  log.info(methodName + "Entry");  if (fileSystem != null) {    log.info(methodName + "input file system Ids: " + Arrays.asList(fileSystem));  }  sslUtil.checkHttpRequest(true,true);  SOSManager sosManager=contextManager.getSOSManager();  StorageFileSystem[] fileSystems=sosManager.queryStorageFileSystems(fileSystem);  log.info(methodName + "Exit returning fileSystems of size[" + fileSystems.length+ "]");  return fileSystems;}  }
class C{  private static void resetStore(IPreferenceStore store,String prefix){  int start=0;  while (start < 99) {    String name=prefix + start;    if (store.contains(name)) {      store.setToDefault(name);    } else {      break;    }    start++;  }}  }
class C{  private boolean isOAuthProxyErrorResponse() throws IOException {  Set<String> headers=httpConn.getHeaderFields().keySet();  boolean isOAuthRedirectToApproval=headers.contains(OAuthProxyProtocol.Header.X_OAUTH_APPROVAL_URL);  boolean isOtherOAuthError=httpConn.getResponseCode() == HttpURLConnection.HTTP_OK && (headers.contains(OAuthProxyProtocol.Header.X_OAUTH_ERROR) || headers.contains(OAuthProxyProtocol.Header.X_OAUTH_ERROR_TEXT));  return isOAuthRedirectToApproval || isOtherOAuthError;}  }
class C{  public HttpPollerProcessor(){  super();}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public boolean shouldAllowRequest(String url){  for (  PluginEntry entry : this.entryMap.values()) {    CordovaPlugin plugin=pluginMap.get(entry.service);    if (plugin != null) {      Boolean result=plugin.shouldAllowRequest(url);      if (result != null) {        return result;      }    }  }  if (url.startsWith("blob:") || url.startsWith("data:") || url.startsWith("about:blank")) {    return true;  }  if (url.startsWith("https://ssl.gstatic.com/accessibility/javascript/android/")) {    return true;  }  if (url.startsWith("file://")) {    return !url.contains("/app_webview/");  }  return false;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.954 -0500",hash_original_method="BACCEAD3B6EC38250A4D00D9AA0D9F78",hash_generated_method="32582E56D2E66C5F6A01976E86765F0C") public void readFromParcel(Parcel in){  addTaintLocal(in.getTaintInt());}  }
class C{  private void readObject(){}  }
class C{  static Object[] computeFolderNonJavaResources(IPackageFragmentRoot root,IContainer folder,char[][] inclusionPatterns,char[][] exclusionPatterns) throws JavaModelException {  IResource[] nonJavaResources=new IResource[5];  int nonJavaResourcesCounter=0;  try {    IResource[] members=folder.members();    int length=members.length;    if (length > 0) {      IJavaProject otherJavaProject=JavaCore.create(folder.getProject());      String sourceLevel=otherJavaProject.getOption(JavaCore.COMPILER_SOURCE,true);      String complianceLevel=otherJavaProject.getOption(JavaCore.COMPILER_COMPLIANCE,true);      JavaProject javaProject=(JavaProject)root.getJavaProject();      IClasspathEntry[] classpath=javaProject.getResolvedClasspath();      nextResource:       for (int i=0; i < length; i++) {        IResource member=members[i];switch (member.getType()) {case IResource.FILE:          String fileName=member.getName();        if (Util.isValidCompilationUnitName(fileName,sourceLevel,complianceLevel) && !Util.isExcluded(member,inclusionPatterns,exclusionPatterns))         continue nextResource;      if (Util.isValidClassFileName(fileName,sourceLevel,complianceLevel))       continue nextResource;    if (isClasspathEntry(member.getFullPath(),classpath))     continue nextResource;  break;case IResource.FOLDER:if (Util.isValidFolderNameForPackage(member.getName(),sourceLevel,complianceLevel) && (!Util.isExcluded(member,inclusionPatterns,exclusionPatterns) || isClasspathEntry(member.getFullPath(),classpath))) continue nextResource;break;}if (nonJavaResources.length == nonJavaResourcesCounter) {System.arraycopy(nonJavaResources,0,(nonJavaResources=new IResource[nonJavaResourcesCounter * 2]),0,nonJavaResourcesCounter);}nonJavaResources[nonJavaResourcesCounter++]=member;}}return nonJavaResources;} catch (CoreException e) {throw new JavaModelException(e);}}  }
class C{  @SuppressWarnings({"TypeMayBeWeakened"}) private void processDeletedFiles(List<String> uris){  assert uris != null;  if (uris.isEmpty())   return;synchronized (mux) {    Set<String> uriSet=new HashSet<>(uris);    for (Iterator<GridUriDeploymentUnitDescriptor> iter=unitLoaders.iterator(); iter.hasNext(); ) {      GridUriDeploymentUnitDescriptor desc=iter.next();      if (desc.getType() == GridUriDeploymentUnitDescriptor.Type.FILE && uriSet.contains(desc.getUri())) {        iter.remove();        onUnitReleased(desc.getClassLoader());      }    }  }}  }
class C{  public void writeContentType(OutputStream os,MimeBodyPart msg) throws IOException {  MimeContentType ct=msg.getContentType();  if (msg instanceof MimeMultipart) {    String boundary=StringUtil.randString(DEFAULT_BOUNDARY_STRING_LENGTH);    ct.setParam("boundary",boundary);  }  writeHeader(os,ct);}  }
class C{  public static void addJspFile(WebXml webXml,String theServletName,String theJspFile){  if (theServletName == null) {    throw new NullPointerException();  }  if (hasFilter(webXml,theServletName)) {    throw new IllegalStateException("Servlet '" + theServletName + "' already defined");  }  WebXmlElement servletElement=(WebXmlElement)webXml.getDescriptorType().getTagByName(WebXmlType.SERVLET).create();  servletElement.addContent(webXml.getDescriptorType().getTagByName(WebXmlType.SERVLET_NAME).create().setText(theServletName));  servletElement.addContent(webXml.getDescriptorType().getTagByName(WebXmlType.JSP_FILE).create().setText(theJspFile));  webXml.addTag(servletElement);}  }
class C{  protected void sequence_Arguments_MemberExpression_TypeArguments(ISerializationContext context,NewExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void replaceFavicon(Bitmap favicon){  replaceFavicon(favicon,COLOR_AUTO);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:46.558 -0500",hash_original_method="A07009E9A7F898B8C8462F16115B27B1",hash_generated_method="4875565CCE8D6061402A1696DEC4F9F1") public static final void writeByteArrayXml(byte[] val,String name,XmlSerializer out) throws XmlPullParserException, java.io.IOException {  if (val == null) {    out.startTag(null,"null");    out.endTag(null,"null");    return;  }  out.startTag(null,"byte-array");  if (name != null) {    out.attribute(null,"name",name);  }  final int N=val.length;  out.attribute(null,"num",Integer.toString(N));  StringBuilder sb=new StringBuilder(val.length * 2);  for (int i=0; i < N; i++) {    int b=val[i];    int h=b >> 4;    sb.append(h >= 10 ? ('a' + h - 10) : ('0' + h));    h=b & 0xff;    sb.append(h >= 10 ? ('a' + h - 10) : ('0' + h));  }  out.text(sb.toString());  out.endTag(null,"byte-array");}  }
class C{  public void paintScrollBarThumbBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int mediaMask=DBObject.MEDIA_MASK_ALL;  if (curNumberOfParameters == 1) {    mediaMask=getMediaMask(stack);  }  return Wizard.getInstance().getAllTitles(mediaMask);}  }
class C{  public void slashSlashComments(boolean flag){  slashSlashCommentsP=flag;}  }
class C{  public static int copy(Reader input,Writer output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  public void inputSentence(String text,String userName,List<String> targetUserNames,boolean isWhisper,Network network){  Vertex input=createInputSentence(text.trim(),network);  input.addRelationship(Primitive.INSTANTIATION,Primitive.CHAT);  if (isWhisper) {    input.addRelationship(Primitive.ASSOCIATED,Primitive.WHISPER);  }  Long userId=this.userSpeakers.get(userName);  Vertex user=null;  if (userId != null) {    user=network.findById(userId);  }  if (user == null) {    if (userName.startsWith("anonymous")) {      user=network.createAnonymousSpeaker();    } else {      user=network.createSpeaker(userName);    }    this.userSpeakers.put(userName,user.getId());  }  user.addRelationship(Primitive.NICK,network.createName(userName));  input.addRelationship(Primitive.SPEAKER,user);  Set<String> uniqueTargetUserNames=new HashSet<String>();  for (  String targetUserName : targetUserNames) {    if (!targetUserName.equals(userName) && !uniqueTargetUserNames.contains(targetUserName)) {      uniqueTargetUserNames.add(targetUserName);      Vertex targetUser=null;      if (targetUserName.equals(getNick()) || targetUserName.equals(getNickAlt())) {        targetUser=network.createVertex(Primitive.SELF);      } else {        targetUser=network.createSpeaker(targetUserName);      }      targetUser.addRelationship(Primitive.NICK,network.createVertex(targetUserName));      input.addRelationship(Primitive.TARGET,targetUser);    }  }  user.addRelationship(Primitive.INPUT,input);  Vertex conversation=getConversation(network);  if (conversation == null) {    conversation=network.createInstance(Primitive.CONVERSATION);    conversation.addRelationship(Primitive.TYPE,Primitive.CHAT);    setConversation(conversation);    conversation.addRelationship(Primitive.SPEAKER,Primitive.SELF);    for (    String eachUser : getUsers()) {      conversation.addRelationship(Primitive.SPEAKER,network.createSpeaker(eachUser));    }  }  Language.addToConversation(input,conversation);  network.save();  getBot().memory().addActiveMemory(input);}  }
class C{  public static URL makeURL(String path){  try {    return new URL(path);  } catch (  Exception e) {    return null;  }}  }
class C{  private List<Receipt> populateActiveReceiptsOnly(final Map<Installment,List<Receipt>> receipts){  final List<Receipt> rcpt=new ArrayList<Receipt>();  for (  final Map.Entry<Installment,List<Receipt>> entry : receipts.entrySet())   for (  final Receipt r : entry.getValue())   if (!rcpt.contains(r) && !r.getReceiptStatus().equals(RCPT_CANCEL_STATUS))   rcpt.add(r);  return receiptsInDescendingOrderOfReceiptDate(rcpt);}  }
class C{  private static double v2SquaredLength(Point2D.Double a){  return (a.x * a.x) + (a.y * a.y);}  }
class C{  public static int aspectRatioDenominator(Size size){  BigInteger width=BigInteger.valueOf(size.width());  BigInteger height=BigInteger.valueOf(size.height());  BigInteger gcd=width.gcd(height);  int denominator=Math.min(width.intValue(),height.intValue()) / gcd.intValue();  return denominator;}  }
class C{  private void writeNamespaces(OutputNode node,Type type,Label label) throws Exception {  Class expect=type.getType();  Decorator primary=context.getDecorator(expect);  Decorator decorator=label.getDecorator();  decorator.decorate(node,primary);}  }
class C{  private void failTask(Throwable e){  ServiceUtils.logSevere(this,e);  this.sendStageProgressPatch(buildPatch(TaskState.TaskStage.FAILED,e));}  }
class C{  public void putINT16(int int16){  put((byte)(int16 & 0xFF));  put((byte)((int16 >> 8) & 0xFF));}  }
class C{  private static IMultiPoint[] randomPoints(int n,int d,int scale){  IMultiPoint points[]=new IMultiPoint[n];  for (int i=0; i < n; i++) {    StringBuilder sb=new StringBuilder();    for (int j=0; j < d; j++) {      sb.append(rGen.nextDouble() * scale);      if (j < d - 1) {        sb.append(",");      }    }    points[i]=new Hyperpoint(sb.toString());  }  return points;}  }
class C{  @Override public Effect copy(){  return new Effect(subeffects.stream().map(null).collect(Collectors.toList()));}  }
class C{  public void writeFacilityAttributes(String file){  ObjectAttributesXmlWriter ow=new ObjectAttributesXmlWriter(this.amenityAttributes);  ow.writeFile(file);}  }
class C{  public <T>List<T> asBeanList(EntityListExtractor<T> entityListExtractor){  return entityListExtractor.extractList(html);}  }
class C{  private final void sendMessageToConnection(OFMessage m){  connection.messageReceived(m);}  }
class C{  @SuppressWarnings("SignalWithoutCorrespondingAwait") private IgniteInternalFuture<Long> internalUpdateAsync(long l,@Nullable Callable<Long> updateCall,boolean updated) throws IgniteCheckedException {  checkRemoved();  A.ensure(l > 0," Parameter mustn't be less then 1: " + l);  lock.lock();  try {    if (locVal + l <= upBound) {      long curVal=locVal;      locVal+=l;      return new GridFinishedFuture<>(updated ? locVal : curVal);    }  }  finally {    lock.unlock();  }  if (updateCall == null)   updateCall=internalUpdate(l,updated);  while (true) {    if (updateGuard.compareAndSet(false,true)) {      try {        return ctx.closures().callLocalSafe(updateCall,true);      }  finally {        lock.lock();        try {          updateGuard.set(false);          cond.signalAll();        }  finally {          lock.unlock();        }      }    } else {      lock.lock();      try {        while (locVal >= upBound && updateGuard.get())         U.await(cond,500,MILLISECONDS);        checkRemoved();        if (locVal + l <= upBound) {          long curVal=locVal;          locVal+=l;          return new GridFinishedFuture<>(updated ? locVal : curVal);        }      }  finally {        lock.unlock();      }    }  }}  }
class C{  @Nullable public String[] names(){  return names;}  }
class C{  public static void text(double x,double y,String s){  offscreen.setFont(font);  FontMetrics metrics=offscreen.getFontMetrics();  double xs=scaleX(x);  double ys=scaleY(y);  int ws=metrics.stringWidth(s);  int hs=metrics.getDescent();  offscreen.drawString(s,(float)(xs - ws / 2.0),(float)(ys + hs));  draw();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrsetvaluenomodificationallowederrEE.class,args);}  }
class C{  public boolean isLenient(){  return false;}  }
class C{  public Seed(final String name,final String clazz,final String subclass,final Map<String,String> attributes){  super(name,clazz,subclass,attributes);}  }
class C{  public JTree(TreeNode root,boolean asksAllowsChildren){  this(new DefaultTreeModel(root,asksAllowsChildren));}  }
class C{  public boolean containsPoint(){  return containsPoint;}  }
class C{  public static ImageEncoder newInstance(String format,boolean encodingAlpha){  ImageEncoder imageEncoder=newInstance(format);  imageEncoder.setEncodingAlpha(encodingAlpha);  return imageEncoder;}  }
class C{  public static int binarySearch(int[] a,int key){  int low=0;  int high=a.length - 1;  while (low <= high) {    int mid=(low + high) >> 1;    int midVal=a[mid];    if (midVal < key)     low=mid + 1; else     if (midVal > key)     high=mid - 1; else     return mid;  }  return -(low + 1);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypeRefsPackage.COMPOSED_TYPE_REF__CACHED_COMPOSED_MEMBERS:    getCachedComposedMembers().clear();  getCachedComposedMembers().addAll((Collection<? extends TMember>)newValue);return;case TypeRefsPackage.COMPOSED_TYPE_REF__ORIGINAL_COMPOSED_TYPE_REF:setOriginalComposedTypeRef((ComposedTypeRef)newValue);return;case TypeRefsPackage.COMPOSED_TYPE_REF__TYPE_REFS:getTypeRefs().clear();getTypeRefs().addAll((Collection<? extends TypeRef>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static int StringEquals(String first,Object second){  if (first == null) {    throw new NullPointerException("StringEquals is not supposed to work on a null caller");  }  if (second == null) {    return -BooleanHelper.K;  }  if (first.equals(second)) {    return BooleanHelper.K;  } else {    ConstantPoolManager.getInstance().addDynamicConstant(first);    ConstantPoolManager.getInstance().addDynamicConstant(second);    double distance=-getDistanceBasedOnLeftAlignmentCharacterDistance(first,second.toString());    double d2=distance / (1.0 + Math.abs(distance));    return (int)Math.round(BooleanHelper.K * d2);  }}  }
class C{  public static void changeToTheme(Activity activity){  activity.finish();  activity.startActivity(new Intent(activity,activity.getClass()));}  }
class C{  private void createComputeProgram() throws IOException {  int program=glCreateProgram();  int cshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/raytracing.glslcs",GL_COMPUTE_SHADER);  int random=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/random.glsl",GL_COMPUTE_SHADER);  int randomCommon=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/randomCommon.glsl",GL_COMPUTE_SHADER,"330");  glAttachShader(program,cshader);  glAttachShader(program,random);  glAttachShader(program,randomCommon);  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.computeProgram=program;}  }
class C{  protected void processLocally(final DM dm){  this.statStart=startGrantWait();  this.svc=DLockService.getInternalServiceNamed(this.serviceName);  basicProcess(dm,true);}  }
class C{  public void storeAuthToken(AuthToken authToken){  SharedPreferences.Editor prefsEditor=getSharedPreferences().edit();  prefsEditor.putString(TOKEN_KEY,authToken.getToken());  prefsEditor.putString(TOKEN_TYPE_KEY,authToken.getTokenType());  JSONObject entitlementCredentials=authToken.getEntitlementCredentials();  if (entitlementCredentials != null) {    prefsEditor.putString(ENTITLEMENT_CREDENTIALS_KEY,entitlementCredentials.toString());  }  prefsEditor.apply();}  }
class C{  public void testParseUserWithEmptyPassword(){  User expectedUser=new User();  expectedUser.setName("name");  expectedUser.setPassword("");  expectedUser.addRole("role");  User user=User.parseUser("name::role");  assertEquals(expectedUser,user);}  }
class C{  public VideoFrameReleaseTimeHelper(Context context){  this(getDefaultDisplayRefreshRate(context),true);}  }
class C{  public void test_rotateLjava_util_ListI(){  Collections.rotate(new ArrayList<Object>(),25);  List<String> list=new ArrayList<String>();  list.add(0,"zero");  list.add(1,"one");  list.add(2,"two");  list.add(3,"three");  list.add(4,"four");  Collections.rotate(list,Integer.MIN_VALUE);  assertEquals("Rotated incorrectly at position 0, ","three",list.get(0));  assertEquals("Rotated incorrectly at position 1, ","four",list.get(1));  assertEquals("Rotated incorrectly at position 2, ","zero",list.get(2));  assertEquals("Rotated incorrectly at position 3, ","one",list.get(3));  assertEquals("Rotated incorrectly at position 4, ","two",list.get(4));}  }
class C{  public String toString(){  return this.getTypeName();}  }
class C{  private static Date string2Date(String date){  int year=Integer.parseInt(date.substring(0,2));  int month=Integer.parseInt(date.substring(2,4));  int day=Integer.parseInt(date.substring(4,6));  int hour=Integer.parseInt(date.substring(6,8));  int minute=Integer.parseInt(date.substring(8,10));  Calendar cal=Calendar.getInstance();  cal.set(convertTwoDigitYear(year),month - 1,day,hour,minute,0);  cal.set(Calendar.MILLISECOND,0);  return cal.getTime();}  }
class C{  private void replaceOrRegister(State state){  final State child=state.lastChild();  if (child.hasChildren())   replaceOrRegister(child);  final State registered=stateRegistry.get(child);  if (registered != null) {    state.replaceLastChild(registered);  } else {    stateRegistry.put(child,child);  }}  }
class C{  private static Document parseTokenXmlToDom(String xmlToken) throws MalformedTokenException {  if (xmlToken == null) {    return null;  }  Logger log=LoggerFactory.getLogger(SamlTokenImpl.class);  final Document parsedToken;  try {    parsedToken=xmlParserFactory.newDocumentBuilder().parse(new InputSource(new StringReader(xmlToken)));  } catch (  SAXException e) {    log.info(PARSING_TOKEN_ERROR_MSG,e);    throw new MalformedTokenException(PARSING_TOKEN_ERROR_MSG,e);  }catch (  IOException e) {    String message="Error reading from in-memory stream " + "(heap space exhausted?)";    log.error(message,e);    throw new IllegalStateException(message,e);  }catch (  ParserConfigurationException e) {    String message="DOM Document builder is not available " + "(incompatible Java implementation?)";    log.error(message,e);    throw new IllegalStateException(message,e);  }  return parsedToken;}  }
class C{  public void comment(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (ch == null || start < 0 || length >= (ch.length - start) || length < 0)   return;  append(m_doc.createComment(new String(ch,start,length)));}  }
class C{  public void removePage(Integer pageNumber){  removePageRecord(pageNumber);}  }
class C{  public void testGetF28(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF28();  assertEquals(expResult,result);}  }
class C{  public static String readFile(File file) throws IOException {  if (!file.exists()) {    return null;  }  try {    byte[] bytes=Files.readAllBytes(file.toPath());    String content=new String(bytes);    return content;  } catch (  IOException e) {    e.printStackTrace();    throw e;  }}  }
class C{  @Override public ObjectNode removeAll(){  _children=null;  return this;}  }
class C{  Router createRouter(){  Router router=Router.router(vertx);  router.route().handler(BodyHandler.create().setBodyLimit(2048));  router.route(HttpMethod.GET,"/status").handler(null);  addTelemetryApiRoutes(router);  addRegistrationApiRoutes(router);  return router;}  }
class C{  private ZoneOffsetTransition[] findTransitionArray(int year){  Integer yearObj=year;  ZoneOffsetTransition[] transArray=lastRulesCache.get(yearObj);  if (transArray != null) {    return transArray;  }  ZoneOffsetTransitionRule[] ruleArray=lastRules;  transArray=new ZoneOffsetTransition[ruleArray.length];  for (int i=0; i < ruleArray.length; i++) {    transArray[i]=ruleArray[i].createTransition(year);  }  if (year < LAST_CACHED_YEAR) {    lastRulesCache.putIfAbsent(yearObj,transArray);  }  return transArray;}  }
class C{  protected void reduceAfConstraints(final AnnotatedTypeFactory typeFactory,final Set<AFConstraint> outgoing,final Queue<AFConstraint> toProcess,final Set<TypeVariable> targets){  final Set<AFConstraint> visited=new HashSet<>();  List<AFReducer> reducers=new ArrayList<>();  reducers.add(new A2FReducer(typeFactory));  reducers.add(new F2AReducer(typeFactory));  reducers.add(new FIsAReducer(typeFactory));  Set<AFConstraint> newConstraints=new HashSet<>(10);  while (!toProcess.isEmpty()) {    newConstraints.clear();    AFConstraint constraint=toProcess.remove();    if (!visited.contains(constraint)) {      if (constraint.isIrreducible(targets)) {        outgoing.add(constraint);      } else {        final Iterator<AFReducer> reducerIterator=reducers.iterator();        boolean handled=false;        while (!handled && reducerIterator.hasNext()) {          handled=reducerIterator.next().reduce(constraint,newConstraints);        }        if (!handled) {          ErrorReporter.errorAbort("Unhandled constraint type: " + constraint.toString());        }        toProcess.addAll(newConstraints);      }      visited.add(constraint);    }  }}  }
class C{  public void dispose(){  Connector[] connectors=ConnectorService.getInstance().getConnectors();  for (  Connector connector : connectors) {    try {      connector.dispose();    } catch (    Throwable t) {    }  }}  }
class C{  public void removeMapping(String facetId){  setAttribute(facetId,(String)null);}  }
class C{  public void updateRaster(float lt,float ln,int w,int h,byte[] bytes,Color[] colorTable,int trans,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkRaster.write(lt,ln,w,h,bytes,colorTable,trans,properties,link.dos);}  }
class C{  public static CharacterReference lookup(char character){  int index;  CharacterReference ret;  if (character < BREAKPOINT)   ret=mCharacterList[character]; else {    index=lookup(mCharacterList,character,BREAKPOINT,mCharacterList.length - 1);    if (index < mCharacterList.length) {      ret=mCharacterList[index];      if (character != ret.getCharacter())       ret=null;    } else     ret=null;  }  return (ret);}  }
class C{  public Blade app(Bootstrap bootstrap){  Assert.notNull(bootstrap);  this.bootstrap=bootstrap;  return this;}  }
class C{  boolean checkClosedForWrite(){  return checkClosed(true);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.INVARIANT___ANONYMOUS_INVARIANT_11:    getAnonymous_invariant_1_1().clear();  getAnonymous_invariant_1_1().addAll((Collection<? extends Anonymous_invariant_1_>)newValue);return;case UmplePackage.INVARIANT___ANONYMOUS_INVARIANT_21:getAnonymous_invariant_2_1().clear();getAnonymous_invariant_2_1().addAll((Collection<? extends Anonymous_invariant_2_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public Bundler putBundle(String key,Bundle value){  bundle.putBundle(key,value);  return this;}  }
class C{  public static void putFloat(Context context,String key,float value){  SharedPreferences mainPref=context.getSharedPreferences(context.getResources().getString(R.string.shared_pref_package),Context.MODE_PRIVATE);  Editor editor=mainPref.edit();  editor.putFloat(key,value);  editor.commit();}  }
class C{  public void testUserConfiguresJmsQueueAsResource() throws MalformedURLException {  ResourceFixture fixture=ConfigurationFixtureFactory.createJmsQueueAsResource();  addResourceToConfigurationViaProperty(fixture);  testWar("jms");}  }
class C{  public int indexString(String string,Environment env){  if (indexHashObject == null)   createIndexHash(env);  Integer result=(Integer)indexHashAscii.get(string);  if (result == null) {    if (MoreStuff == null)     MoreStuff=new Vector();    result=new Integer(cpool.length + MoreStuff.size());    MoreStuff.addElement(string);    indexHashAscii.put(string,result);  }  return result.intValue();}  }
class C{  public boolean isPrimaryDnsServerAddressSettable(){  return primaryDnsServerAddressSettable;}  }
class C{  public void close() throws IOException {  if (_isKeepalive) {    if (!_didGet)     getConnInput();    if (!_isRequestDone) {      if (_tempBuffer == null)       _tempBuffer=new byte[256];      try {        while (read(_tempBuffer,0,_tempBuffer.length) > 0) {        }      } catch (      IOException e) {        _isKeepalive=false;      }    }  }  if (_isKeepalive) {    HttpStream oldSaved;    long now;    now=CurrentTime.currentTime();synchronized (LOCK) {      oldSaved=_savedStream;      _savedStream=this;      _saveTime=now;    }    if (oldSaved != null && oldSaved != this) {      oldSaved._isKeepalive=false;      oldSaved.close();    }    return;  }  try {    try {      if (_ws != null)       _ws.close();    } catch (    Throwable e) {    }    _ws=null;    try {      if (_rs != null)       _rs.close();    } catch (    Throwable e) {    }    _rs=null;    try {      if (_os != null)       _os.close();    } catch (    Throwable e) {    }    _os=null;    try {      if (_is != null)       _is.close();    } catch (    Throwable e) {    }    _is=null;  }  finally {    if (_s != null)     _s.close();    _s=null;  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:08.751 -0500",hash_original_method="75C2AC8A8F418D624F70F1077C2FBC95",hash_generated_method="A546D36DD3CD43F0C743AE5AE607FB0C") public static ExecutorService newCachedThreadPool(ThreadFactory threadFactory){  return new ThreadPoolExecutor(0,Integer.MAX_VALUE,60L,TimeUnit.SECONDS,new SynchronousQueue<Runnable>(),threadFactory);}  }
class C{  public static Vector3f interpolationFactorsTriangle(float v0X,float v0Y,float v1X,float v1Y,float v2X,float v2Y,float x,float y,Vector3f dest){  float v12Y=v1Y - v2Y;  float v21X=v2X - v1X;  float v02X=v0X - v2X;  float yv2Y=y - v2Y;  float xv2X=x - v2X;  float v02Y=v0Y - v2Y;  float invDen=1.0f / (v12Y * v02X + v21X * v02Y);  dest.x=(v12Y * xv2X + v21X * yv2Y) * invDen;  dest.y=(v02X * yv2Y - v02Y * xv2X) * invDen;  dest.z=1.0f - dest.x - dest.y;  return dest;}  }
class C{  public LogAction(final ConfAction params){  super(params);}  }
class C{  private void notifyDownloadCompleted(int status,boolean countRetry,int retryAfter,int redirectCount,boolean gotData,String filename){  updateDownloadDatabase(status,countRetry,retryAfter,redirectCount,gotData,filename);  if (DownloaderService.isStatusCompleted(status)) {  }}  }
class C{  public void stop(){  mVibrator=null;  mContext.getContentResolver().unregisterContentObserver(mContentObserver);}  }
class C{  public static X509Certificate parseCertificate(String base64EncodedCertificate) throws CertificateException {  CertificateFactory certificateFactory=CertificateFactory.getInstance("X.509");  ByteArrayInputStream bIn=new ByteArrayInputStream(CashBoxUtils.base64Decode(base64EncodedCertificate,false));  return (X509Certificate)certificateFactory.generateCertificate(bIn);}  }
class C{  @Override protected void process(DirtyRegion dirtyRegion){  if (!isInstalled() || dirtyRegion == null || getDocument() == null)   return;  if (getTypeScriptFoldingStrategy() != null) {    getTypeScriptFoldingStrategy().reconcile(dirtyRegion,null);  }  super.process(dirtyRegion);}  }
class C{  public static boolean isNetworkAvailable(Context context){  ConnectivityManager cwjManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo info=cwjManager.getActiveNetworkInfo();  if (info != null) {    return info.isAvailable();  }  return false;}  }
class C{  public boolean isUriDefined(){  return (uri != null) && !HttpInfo.UNDEFINED.equals(uri);}  }
class C{  public static Sector warpImageWithControlPoints(BufferedImage sourceImage,java.awt.geom.Point2D[] imagePoints,LatLon[] geoPoints,BufferedImage destImage){  if (sourceImage == null) {    String message=Logging.getMessage("nullValue.SourceImageIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (destImage == null) {    String message=Logging.getMessage("nullValue.DestinationImageIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  String message=validateControlPoints(3,imagePoints,geoPoints);  if (message != null) {    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (imagePoints.length >= 4 && geoPoints.length >= 4) {    return warpImageWithControlPoints4(sourceImage,imagePoints,geoPoints,destImage);  } else {    return warpImageWithControlPoints3(sourceImage,imagePoints,geoPoints,destImage);  }}  }
class C{  public void queue(BtLEQueue queue){  if (mQueued) {    throw new IllegalStateException("This builder had already been queued. You must not reuse it.");  }  mQueued=true;  queue.add(mTransaction);}  }
class C{  public void unblock(){  this.blockingQueue.offer(0);}  }
class C{  protected PostValidationImpl(){  super();}  }
class C{  public boolean abort(){  if (log == null)   log=CLogger.getCLogger(getClass());  if (isOpen()) {    m_state=STATE_Aborted;    log.info("aborting ...");    return true;  }  String msg="abort failed: Not Open (" + getState() + ")";  if (m_throwException)   throw new IllegalStateException(msg);  log.warning(msg);  return false;}  }
class C{  public static boolean isVerification(){  return ToastBootstrap.isVerification;}  }
class C{  public byte[] calculateChecksum(byte[] baseKey,int usage,byte[] input,int start,int len) throws GeneralSecurityException {  if (debug) {    System.out.println("ARCFOUR: calculateChecksum with usage = " + usage);  }  if (!KeyUsage.isValid(usage)) {    throw new GeneralSecurityException("Invalid key usage number: " + usage);  }  byte[] Ksign=null;  try {    byte[] ss="signaturekey".getBytes();    byte[] new_ss=new byte[ss.length + 1];    System.arraycopy(ss,0,new_ss,0,ss.length);    Ksign=getHmac(baseKey,new_ss);  } catch (  Exception e) {    GeneralSecurityException gse=new GeneralSecurityException("Calculate Checkum Failed!");    gse.initCause(e);    throw gse;  }  byte[] salt=getSalt(usage);  MessageDigest messageDigest=null;  try {    messageDigest=MessageDigest.getInstance("MD5");  } catch (  NoSuchAlgorithmException e) {    GeneralSecurityException gse=new GeneralSecurityException("Calculate Checkum Failed!");    gse.initCause(e);    throw gse;  }  messageDigest.update(salt);  messageDigest.update(input,start,len);  byte[] md5tmp=messageDigest.digest();  byte[] hmac=getHmac(Ksign,md5tmp);  if (debug) {    traceOutput("hmac",hmac,0,hmac.length);  }  if (hmac.length == getChecksumLength()) {    return hmac;  } else   if (hmac.length > getChecksumLength()) {    byte[] buf=new byte[getChecksumLength()];    System.arraycopy(hmac,0,buf,0,buf.length);    return buf;  } else {    throw new GeneralSecurityException("checksum size too short: " + hmac.length + "; expecting : "+ getChecksumLength());  }}  }
class C{  protected boolean handleEnterKeyPress(){  return false;}  }
class C{  protected boolean isSystemAdminOrMonitorUser(){  return _permissionsHelper.userHasGivenRole(getUserFromContext(),null,Role.SYSTEM_ADMIN,Role.SYSTEM_MONITOR);}  }
class C{  @Override public void teardown(){}  }
class C{  public final void replaceAll(Object from,Object to){  replaceAll(from,to,false);}  }
class C{  public String outputString(Document doc){  StringWriter out=new StringWriter();  try {    output(doc,out);  } catch (  IOException e) {  }  return out.toString();}  }
class C{  protected BigdataStatement roundTrip(Resource s,URI p,Value o){  store().addStatement(s,p,o,null);  return store().getStatement(s,p,o,null);}  }
class C{  public URIBuilder addParameter(final String param,final String value){  if (this.queryParams == null) {    this.queryParams=new ArrayList<NameValuePair>();  }  this.queryParams.add(new BasicNameValuePair(param,value));  this.encodedQuery=null;  this.encodedSchemeSpecificPart=null;  return this;}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  private synchronized void incrementTransactionID(){  if (isCheckingValidity()) {    if (transactionID >= Modbus.MAX_TRANSACTION_ID) {      transactionID=1;    } else {      transactionID++;    }  }  request.setTransactionID(getTransactionID());}  }
class C{  private Boolean __isUser1Running(InetAddress inetAddress){  JSONObject jsonObjectResult=EspBaseApiUtil.Get(__getUpgradeGetUserUrl(inetAddress));  if (jsonObjectResult == null) {    log.warn(Thread.currentThread().toString() + "##__isUser1Running(inetAddress=[" + inetAddress+ "]):1 "+ null);    return null;  }  String userResult=null;  try {    userResult=jsonObjectResult.getString(USER_BIN);  } catch (  JSONException e) {    e.printStackTrace();  }  if (userResult.equals(USER1_BIN)) {    log.debug(Thread.currentThread().toString() + "##__isUser1Running(inetAddress=[" + inetAddress+ "]): "+ true);    return true;  } else   if (userResult.equals(USER2_BIN)) {    log.debug(Thread.currentThread().toString() + "##__isUser1Running(inetAddress=[" + inetAddress+ "]): "+ false);    return false;  }  log.warn(Thread.currentThread().toString() + "##__isUser1Running(inetAddress=[" + inetAddress+ "]):2 "+ null);  return null;}  }
class C{  private boolean canUpdateAnimation(long time,OverviewAnimationType type,int sourceIndex,boolean finishImmediately){  if (mAnimationFactory != null) {    if ((mOverviewAnimationType == OverviewAnimationType.DISCARD || mOverviewAnimationType == OverviewAnimationType.UNDISCARD || mOverviewAnimationType == OverviewAnimationType.DISCARD_ALL) && (type == OverviewAnimationType.DISCARD || type == OverviewAnimationType.UNDISCARD || type == OverviewAnimationType.DISCARD_ALL)) {      return true;    }  }  return false;}  }
class C{  private void loadTestsFromUrl(String rootRelativePath){  LinkedList<String> directoriesList=new LinkedList<String>();  directoriesList.add(rootRelativePath);  String relativePath;  String itemName;  while (!directoriesList.isEmpty()) {    relativePath=directoriesList.removeFirst();    List<String> dirRelativePaths=FsUtils.getLayoutTestsDirContents(relativePath,false,true);    if (dirRelativePaths != null) {      for (      String dirRelativePath : dirRelativePaths) {        itemName=new File(dirRelativePath).getName();        if (FileFilter.isTestDir(itemName)) {          directoriesList.add(dirRelativePath);        }      }    }    List<String> testRelativePaths=FsUtils.getLayoutTestsDirContents(relativePath,false,false);    if (testRelativePaths != null) {      for (      String testRelativePath : testRelativePaths) {        itemName=new File(testRelativePath).getName();        if (FileFilter.isTestFile(itemName)) {          if (!mFileFilter.isCrash(testRelativePath)) {            mTestsList.add(testRelativePath);          } else {          }        }      }    }  }}  }
class C{  public static final double[][] transpose(final double[] v){  double[][] re=new double[v.length][1];  for (int i=0; i < v.length; i++) {    re[i][0]=v[i];  }  return re;}  }
class C{  public static CipherTextIvMac encrypt(String plaintext,SecretKeys secretKeys,String encoding) throws UnsupportedEncodingException, GeneralSecurityException {  return encrypt(plaintext.getBytes(encoding),secretKeys);}  }
class C{  public Configuration domain(String domain){  this.domain=domain;  return this;}  }
class C{  public void testSequenceEventAtCommand() throws Throwable {  ClientSequencer sequencer=new ClientSequencer(new ClientSessionState(UUID.randomUUID()));  long sequence=sequencer.nextRequest();  PublishRequest request=PublishRequest.builder().withSession(1).withEventIndex(2).withPreviousIndex(0).build();  CommandResponse response=CommandResponse.builder().withStatus(Response.Status.OK).withIndex(2).withEventIndex(2).build();  AtomicInteger run=new AtomicInteger();  sequencer.sequenceResponse(sequence,response,null);  sequencer.sequenceEvent(request,null);  assertEquals(run.get(),2);}  }
class C{  public void encrypt(byte[] inbuffer,byte[] outbuffer){  int nLen=inbuffer.length;  long lTemp;  for (int nI=0; nI < nLen; nI+=8) {    lTemp=BinConverter.byteArrayToLong(inbuffer,nI);    lTemp=encryptBlock(lTemp);    BinConverter.longToByteArray(lTemp,outbuffer,nI);  }  ;}  }
class C{  public CoapRequestWorker(String name,Request coapRequest){  super(name);  this.coapRequest=coapRequest;}  }
class C{  public void addAll(Collection<Feature> feats){  this.features.addAll(feats);}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){}  }
class C{  public boolean isExistingRequest(String request){  if (this.containsKey(request)) {    return true;  } else {    return false;  }}  }
class C{  public synchronized void addTemplate(DockerSlaveTemplate t){  templates.add(t);}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(1);  newVector.addElement(new Option("\tRandom number seed.\n" + "\t(default 1)","S",1,"-S <num>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  private void handleValidator(){  Attributes attrs=validatorInfo.getAttributes();  String ln=validatorInfo.getLocalName();  boolean hasValidatorId=false;  boolean hasBinding=false;  for (int i=0; i < attrs.getLength(); i++) {    if (attrs.getLocalName(i).equals("validatorId")) {      hasValidatorId=true;    }    if (attrs.getLocalName(i).equals("binding")) {      hasBinding=true;    }  }  if (failed=(!hasBinding && !hasValidatorId)) {    Object[] obj=new Object[1];    obj[0]=ln;    ResourceBundle rb=ResourceBundle.getBundle(RIConstants.TLV_RESOURCE_LOCATION);    failureMessages.append(MessageFormat.format(rb.getString("TLV_VALIDATOR_ERROR"),obj));    failureMessages.append("\n");  }}  }
class C{  @Override public Representation put(Representation entity){  try {    if (!getSchema().isMutable()) {      final String message="This IndexSchema is not mutable.";      throw new SolrException(ErrorCode.BAD_REQUEST,message);    } else {      if (null == entity.getMediaType()) {        entity.setMediaType(MediaType.APPLICATION_JSON);      }      if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON,true)) {        String message="Only media type " + MediaType.APPLICATION_JSON.toString() + " is accepted."+ "  Request has media type "+ entity.getMediaType().toString()+ ".";        log.error(message);        throw new SolrException(ErrorCode.BAD_REQUEST,message);      } else {        Object object=ObjectBuilder.fromJSON(entity.getText());        if (!(object instanceof Map)) {          String message="Invalid JSON type " + object.getClass().getName() + ", expected Map of the form"+ " (ignore the backslashes): {\"type\":\"text_general\", ...}, either with or"+ " without a \"name\" mapping.  If the \"name\" is specified, it must match the"+ " name given in the request URL: /schema/fields/(name)";          log.error(message);          throw new SolrException(ErrorCode.BAD_REQUEST,message);        } else {          Map<String,Object> map=(Map<String,Object>)object;          if (1 == map.size() && map.containsKey(IndexSchema.FIELD)) {            map=(Map<String,Object>)map.get(IndexSchema.FIELD);          }          String bodyFieldName;          if (null != (bodyFieldName=(String)map.remove(IndexSchema.NAME)) && !fieldName.equals(bodyFieldName)) {            String message="Field name in the request body '" + bodyFieldName + "' doesn't match field name in the request URL '"+ fieldName+ "'";            log.error(message);            throw new SolrException(ErrorCode.BAD_REQUEST,message);          } else {            String fieldType;            if (null == (fieldType=(String)map.remove(IndexSchema.TYPE))) {              String message="Missing '" + IndexSchema.TYPE + "' mapping.";              log.error(message);              throw new SolrException(ErrorCode.BAD_REQUEST,message);            } else {              ManagedIndexSchema oldSchema=(ManagedIndexSchema)getSchema();              Object copies=map.get(IndexSchema.COPY_FIELDS);              List<String> copyFieldNames=null;              if (copies != null) {                if (copies instanceof List) {                  copyFieldNames=(List<String>)copies;                } else                 if (copies instanceof String) {                  copyFieldNames=Collections.singletonList(copies.toString());                } else {                  String message="Invalid '" + IndexSchema.COPY_FIELDS + "' type.";                  log.error(message);                  throw new SolrException(ErrorCode.BAD_REQUEST,message);                }              }              if (copyFieldNames != null) {                map.remove(IndexSchema.COPY_FIELDS);              }              boolean success=false;              while (!success) {                try {                  SchemaField newField=oldSchema.newField(fieldName,fieldType,map);synchronized (oldSchema.getSchemaUpdateLock()) {                    IndexSchema newSchema=oldSchema.addField(newField,copyFieldNames);                    if (null != newSchema) {                      getSolrCore().setLatestSchema(newSchema);                      success=true;                    } else {                      throw new SolrException(ErrorCode.SERVER_ERROR,"Failed to add field.");                    }                  }                } catch (                ManagedIndexSchema.SchemaChangedInZkException e) {                  log.debug("Schema changed while processing request, retrying");                  oldSchema=(ManagedIndexSchema)getSolrCore().getLatestSchema();                }              }            }          }        }      }    }  } catch (  Exception e) {    getSolrResponse().setException(e);  }  handlePostExecution(log);  return new SolrOutputRepresentation();}  }
class C{  public boolean dataNew(int currentRow,boolean copyCurrent){  log.info("Current=" + currentRow + ", Copy="+ copyCurrent);  if (m_readOnly) {    fireDataStatusEEvent("AccessCannotInsert","",true);    return false;  }  dataSave(-2,false);  m_inserting=true;  int size=m_fields.size();  m_rowData=new Object[size];  Object[] rowData=new Object[size];  m_changed=true;  m_compareDB=true;  m_newRow=currentRow + 1;  if (m_sort.size() < m_newRow)   m_newRow=m_sort.size();  MSort newSort=m_virtual ? new MSort(NEW_ROW_ID,null) : new MSort(m_sort.size(),null);  if (m_virtual) {    m_virtualBuffer.put(NEW_ROW_ID,rowData);  } else {    m_buffer.add(rowData);  }  m_sort.add(m_newRow,newSort);  m_rowCount++;  if (copyCurrent) {    boolean hasDocTypeTargetField=(getField("C_DocTypeTarget_ID") != null);    Object[] origData=getDataAtRow(currentRow);    for (int i=0; i < size; i++) {      GridField field=(GridField)m_fields.get(i);      String columnName=field.getColumnName();      if (field.isVirtualColumn())       ; else       if (field.isKey() || columnName.equals("AD_Client_ID") || columnName.startsWith("Created")|| columnName.startsWith("Updated")|| columnName.equals("EntityType")|| columnName.equals("DocumentNo")|| columnName.equals("Processed")|| columnName.equals("IsSelfService")|| columnName.equals("DocAction")|| columnName.equals("DocStatus")|| columnName.equals("Posted")|| columnName.equals("IsReconciled")|| columnName.equals("IsApproved")|| columnName.equals("IsGenerated")|| columnName.startsWith("Ref_")|| columnName.equals("GrandTotal")|| columnName.equals("TotalLines")|| columnName.equals("C_CashLine_ID")|| columnName.equals("C_Payment_ID")|| columnName.equals("IsPaid")|| columnName.equals("IsAllocated")|| (columnName.equals("C_DocType_ID") && hasDocTypeTargetField)|| (columnName.equals("Line") || !field.IsAllowCopy())) {        rowData[i]=field.getDefault();        field.setValue(rowData[i],m_inserting);      } else       rowData[i]=origData[i];    }  } else {    for (int i=0; i < size; i++) {      GridField field=(GridField)m_fields.get(i);      rowData[i]=field.getDefault();      field.setValue(rowData[i],m_inserting);    }  }  m_rowChanged=-1;  log.fine("Current=" + currentRow + ", New="+ m_newRow);  fireTableRowsInserted(m_newRow,m_newRow);  fireDataStatusIEvent(copyCurrent ? "UpdateCopied" : "Inserted","");  log.fine("Current=" + currentRow + ", New="+ m_newRow+ " - complete");  return true;}  }
class C{  @SuppressWarnings("unchecked") private static void createNodeChilds(final DefaultMutableTreeNode node){  final Object value=((TreeUserObject)node.getUserObject()).data;  if (value instanceof Map) {    for (    final Entry<Object,Object> entry : ((Map<Object,Object>)value).entrySet())     node.add(new DefaultMutableTreeNode(createTreeUserObject(entry.getKey().toString(),entry.getValue())));  } else   if (value instanceof Object[]) {    int i=0;    for (    final Object e : (Object[])value)     node.add(new DefaultMutableTreeNode(createTreeUserObject(Integer.toString(i++),e)));  }}  }
class C{  private void onUsersSynced(Set<JsonUser> syncedUsers) throws UserSyncException {  if (syncedUsers == null || syncedUsers.isEmpty()) {    throw new UserSyncException("Set of users retrieved from server is null or empty.");  }synchronized (mLock) {    ImmutableSet<JsonUser> addedUsers=ImmutableSet.copyOf(Sets.difference(syncedUsers,mKnownUsers));    ImmutableSet<JsonUser> deletedUsers=ImmutableSet.copyOf(Sets.difference(mKnownUsers,syncedUsers));    mKnownUsers.clear();    mKnownUsers.addAll(syncedUsers);    mEventBus.post(new KnownUsersSyncedEvent(addedUsers,deletedUsers));    if (mActiveUser != null && deletedUsers.contains(mActiveUser)) {      mEventBus.post(new ActiveUserUnsetEvent(mActiveUser,ActiveUserUnsetEvent.REASON_USER_DELETED));    }  }}  }
class C{  public RequestHandle patch(String url,RequestParams params,ResponseHandlerInterface responseHandler){  return patch(null,url,params,responseHandler);}  }
class C{  public JsonParser createJsonParser(URL url) throws IOException, JsonParseException {  return _createJsonParser(_optimizedStreamFromURL(url),_createContext(url,true));}  }
class C{  public static void registerMBean(Object mbean,Class<?> mbeanClass){  MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();  try {    if (logger.isDebugEnabled())     logger.debug("Registering mbean: " + mbean.getClass());    ObjectName name=generateMBeanObjectName(mbeanClass);    if (mbs.isRegistered(name))     mbs.unregisterMBean(name);    mbs.registerMBean(mbean,name);  } catch (  Exception e) {    throw new ServerRuntimeException(String.format("Unable to register mbean for class %s because '%s'",mbeanClass.getName(),e),e);  }}  }
class C{  @Override public synchronized void updateByte(int columnIndex,byte x) throws SQLException {  if (!this.onInsertRow) {    if (!this.doingUpdates) {      this.doingUpdates=true;      syncUpdate();    }    this.updater.setByte(columnIndex,x);  } else {    this.inserter.setByte(columnIndex,x);    this.thisRow.setColumnValue(columnIndex - 1,this.inserter.getBytesRepresentation(columnIndex - 1));  }}  }
class C{  public CGraphSynchronizer(final ZyGraph graph,final CSpecialInstructionsModel model){  m_graph=Preconditions.checkNotNull(graph,"IE02843: graph argument can not be null");  m_model=Preconditions.checkNotNull(model,"IE02844: model argument can not be null");  updateInstructionMap();  m_model.setInstructions(updateInstructions());  m_graph.addListener(m_graphListener);  m_graph.getRawView().addListener(m_listener);  for (  final ITypeDescription description : model.getDescriptions()) {    description.addListener(m_descriptionListener);  }}  }
class C{  public boolean similar(Object other){  if (!(other instanceof JSONArray)) {    return false;  }  int len=this.length();  if (len != ((JSONArray)other).length()) {    return false;  }  for (int i=0; i < len; i+=1) {    Object valueThis=this.get(i);    Object valueOther=((JSONArray)other).get(i);    if (valueThis instanceof JSONObject) {      if (!((JSONObject)valueThis).similar(valueOther)) {        return false;      }    } else     if (valueThis instanceof JSONArray) {      if (!((JSONArray)valueThis).similar(valueOther)) {        return false;      }    } else     if (!valueThis.equals(valueOther)) {      return false;    }  }  return true;}  }
class C{  public void previous(Container parent){synchronized (parent.getTreeLock()) {    checkLayout(parent);    int ncomponents=parent.getComponentCount();    for (int i=0; i < ncomponents; i++) {      Component comp=parent.getComponent(i);      if (comp.isVisible()) {        comp.setVisible(false);        currentCard=((i > 0) ? i - 1 : ncomponents - 1);        comp=parent.getComponent(currentCard);        comp.setVisible(true);        parent.validate();        return;      }    }    showDefaultComponent(parent);  }}  }
class C{  private boolean createZone(MDSDialog dialog,Zone zone,Integer vsanId,List<Zone> zonesInFabric,Zoneset activeZoneset) throws NetworkDeviceControllerException {  _log.info("Creating zone: " + zone.getName() + " vsan: "+ vsanId);  boolean added=false;  Zone zoneInFabric=getZoneInFabric(zone.getName(),activeZoneset.getZones());  if (zoneInFabric != null) {    if (!sameMembers(zoneInFabric,zone)) {      throw NetworkDeviceControllerException.exceptions.activeZoneWithSameNameExists(zone.getName());    }    _log.info("Found existing active zone with the name " + zone.getName() + ".  No create necessary");  } else {    zoneInFabric=getZoneInFabric(zone.getName(),zonesInFabric);    if (zoneInFabric != null) {      _log.info("Found an inactive zone with the name " + zone.getName());      dialog.zoneNameVsan(zoneInFabric.getName(),vsanId,true);      _log.info("Deleted inactive zone with the name " + zone.getName());    }    dialog.zoneNameVsan(zone.getName(),vsanId,false);    try {      for (      ZoneMember member : zone.getMembers()) {        if (!StringUtils.isEmpty(member.getAlias())) {          dialog.zoneMemberAlias(member.getAlias());        } else {          dialog.zoneMemberPwwn(member.getAddress());        }      }    }  finally {      dialog.exitToConfig();    }    added=true;  }  return added;}  }
class C{  protected void fireAreaInvalidated(Rectangle2D.Double invalidatedArea){  if (listenerList.getListenerCount() > 0) {    FigureEvent event=null;    Object[] listeners=listenerList.getListenerList();    for (int i=listeners.length - 2; i >= 0; i-=2) {      if (listeners[i] == FigureListener.class) {        if (event == null) {          event=new FigureEvent(this,invalidatedArea);        }        ((FigureListener)listeners[i + 1]).areaInvalidated(event);      }    }  }}  }
class C{  public static DataStorage newDataStorage(String type) throws IllegalDataStorageTypeException {  DataStorageServiceProvider serviceProvider=DataStorageServiceLoader.getInstance().getStorageProviderByType(type);  if (serviceProvider == null) {    throw new IllegalDataStorageTypeException("data storage provider of type: " + type + " is null");  }  DataStorage dataStorage=serviceProvider.getStorage();  try {    LOG.info("Initializing data storage engine: " + dataStorage);    dataStorage.init();  } catch (  IOException e) {    LOG.error("Failed to initialize data storage engine " + dataStorage,e);    throw new IllegalStateException(e);  }  return dataStorage;}  }
class C{  public void dump(String prefix,FileDescriptor fd,PrintWriter writer,String[] args){  dumpInner(prefix,fd,writer,args);}  }
class C{  public static void fillFirstQuadrantWithSectorPoints(int radius,Map<String,Point> sector,List<String> indexesKeys,Map<String,Integer> keysIndexes){  if (SHOW_LOGS)   Log.v(TAG,">> fillFirstQuadrantWithSectorPoints, size " + sector.size());  for (int y=-radius; y <= 0; y++) {    int x=(int)Math.sqrt(Math.pow(radius,2) - Math.pow(y,2));    String key=getSectorKey(x,y);    if (SHOW_LOGS)     Log.v(TAG,"fillFirstQuadrantWithSectorPoints, key[" + key + "]");    indexesKeys.add(key);    keysIndexes.put(key,indexesKeys.size() - 1);    sector.put(key,new Point(x,y));  }  if (SHOW_LOGS)   Log.v(TAG,"<< fillFirstQuadrantWithSectorPoints");}  }
class C{  public NullPointerException(java.lang.String s){  super(s);}  }
class C{  public void fireActionEvent(BoundingBox box){  for (int i=0; i < points.size(); i++) {    PointLayer point=(PointLayer)points.elementAt(i);    if (box.contains(point)) {      dispatcher.fireActionEvent(new ActionEvent(point));      return;    }  }}  }
class C{  public boolean containsAll(int[] array){  for (int i=array.length; i-- > 0; ) {    if (!contains(array[i])) {      return false;    }  }  return true;}  }
class C{  @SuppressWarnings("unchecked") private Collection<GraphEdgeMatcherDescriptor> loadNamedRelationship(ObjectXmlPersist persist,URI fromUri) throws IOException {  return (Collection<GraphEdgeMatcherDescriptor>)persist.load(fromUri);}  }
class C{  public Matcher matcher(CharSequence input){  return new Matcher(this,input);}  }
class C{  public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {  byte[] decoded=Base64.decodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(decoded);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public Image scaledLargerRatio(int width,int height){  float hRatio=((float)height) / ((float)getHeight());  float wRatio=((float)width) / ((float)getWidth());  if (hRatio > wRatio) {    return scaled((int)(getWidth() * hRatio),height);  } else {    return scaled(width,(int)(getHeight() * wRatio));  }}  }
class C{  public SCirc(LLPoint ll1,short offset_x1,short offset_y1,short width,short height){  super(GraphicType.GT_Circle,RenderType.RT_Offset,LineType.LT_Unknown,DeclutterType.DC_None);  ll1_=ll1;  major_=0;  minor_=0;  p1_=new XYPoint(offset_x1,offset_y1);  width_=width;  height_=height;}  }
class C{  public void println() throws IOException {  onNewLine=true;  aligned=false;  needsNewLine=false;  out.write(lineSep);}  }
class C{  @Override public boolean canBeLongAddress(int address){  return isLongAddress(address);}  }
class C{  public void testDoubleReverse() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new DoubleDocValuesField("value",30.1));  doc.add(newStringField("value","30.1",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new DoubleDocValuesField("value",-1.3));  doc.add(newStringField("value","-1.3",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new DoubleDocValuesField("value",4.2333333333333));  doc.add(newStringField("value","4.2333333333333",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new DoubleDocValuesField("value",4.2333333333332));  doc.add(newStringField("value","4.2333333333332",Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.DOUBLE,true));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(4,td.totalHits);  assertEquals("30.1",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4.2333333333333",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("4.2333333333332",searcher.doc(td.scoreDocs[2].doc).get("value"));  assertEquals("-1.3",searcher.doc(td.scoreDocs[3].doc).get("value"));  ir.close();  dir.close();}  }
class C{  public static double kthMinSubjectTo(double[] array,int k,int[] extraData,int condition) throws Exception {  if (array.length < k) {    throw new Exception(String.format("Length of array (%d) is less than k (%d)",array.length,k));  }  double[] mins=new double[k];  for (int i=0; i < k; i++) {    mins[i]=Double.POSITIVE_INFINITY;  }  for (int t=0; t < array.length; t++) {    if (extraData[t] != condition) {      continue;    }    if (array[t] < mins[k - 1]) {      mins[k - 1]=array[t];      for (int i=k - 2; i >= 0; i--) {        if (array[t] < mins[i]) {          mins[i + 1]=mins[i];          mins[i]=array[t];          continue;        }        break;      }    }  }  return mins[k - 1];}  }
class C{  public SplittedExampleSet(ExampleSet exampleSet,int numberOfSubsets,int samplingType,boolean useLocalRandomSeed,int seed,boolean autoSwitchToShuffled) throws UserError {  this(exampleSet,new Partition(numberOfSubsets,exampleSet.size(),createPartitionBuilder(exampleSet,samplingType,useLocalRandomSeed,seed,autoSwitchToShuffled)));}  }
class C{  public boolean isGreaterThan(Money money){  assertDefined();  BigDecimal thisValue=notNull(this);  BigDecimal parameter=notNull(money);  return (thisValue.compareTo(parameter) > 0);}  }
class C{  @Override public Hashtable<IPoint,List<ILineSegment>> intersections(ILineSegment[] segments){  startTime();  initialize();  for (int i=0; i < segments.length - 1; i++) {    for (int j=i + 1; j < segments.length; j++) {      IPoint p=segments[i].intersection(segments[j]);      if (p != null) {        record(p,segments[i],segments[j]);      }    }  }  computeTime();  return report;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:41.467 -0500",hash_original_method="C836FB5DAC382D9C0C874AE67C8DA33E",hash_generated_method="3AEDB2DDF9E51769ADDAB8C6DF7F9A04") public static byte[] encode(byte[] data,int off,int length){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    encoder.encode(data,off,length,bOut);  } catch (  IOException e) {    throw new RuntimeException("exception encoding Hex string: " + e);  }  return bOut.toByteArray();}  }
class C{  public String toString(Properties ctx){  StringBuffer sb=new StringBuffer();  if (m_mediaSize != null && m_mediaSize.getMediaSizeName() != null) {    sb.append(m_mediaSize.getMediaSizeName());    String name=m_mediaSize.getMediaSizeName().toString();    if (name != null) {      if (!name.startsWith("iso"))       sb.append(" - ").append(m_mediaSize.toString(MediaSize.INCH,"\"")).append(" (").append(getMediaPrintableArea().toString(MediaPrintableArea.INCH,"\""));      if (!name.startsWith("na"))       sb.append(" - ").append(m_mediaSize.toString(MediaSize.MM,"mm")).append(" (").append(getMediaPrintableArea().toString(MediaPrintableArea.MM,"mm"));    }    sb.append(") - ").append(Msg.getMsg(ctx,m_landscape ? "Landscape" : "Portrait"));  } else   sb.append("Custom - ").append(toString());  return sb.toString();}  }
class C{  boolean trySetCipherSuite(CipherSuite suite){  if (resumingSession) {    return true;  }  if (suite.isNegotiable() == false) {    return false;  }  if (protocolVersion.v >= suite.obsoleted) {    return false;  }  if (protocolVersion.v < suite.supported) {    return false;  }  KeyExchange keyExchange=suite.keyExchange;  privateKey=null;  certs=null;  dh=null;  tempPrivateKey=null;  tempPublicKey=null;  Collection<SignatureAndHashAlgorithm> supportedSignAlgs=null;  if (protocolVersion.v >= ProtocolVersion.TLS12.v) {    if (peerSupportedSignAlgs != null) {      supportedSignAlgs=peerSupportedSignAlgs;    } else {      SignatureAndHashAlgorithm algorithm=null;switch (keyExchange) {case K_RSA:case K_DHE_RSA:case K_DH_RSA:case K_ECDH_RSA:case K_ECDHE_RSA:        algorithm=SignatureAndHashAlgorithm.valueOf(HashAlgorithm.SHA1.value,SignatureAlgorithm.RSA.value,0);      break;case K_DHE_DSS:case K_DH_DSS:    algorithm=SignatureAndHashAlgorithm.valueOf(HashAlgorithm.SHA1.value,SignatureAlgorithm.DSA.value,0);  break;case K_ECDH_ECDSA:case K_ECDHE_ECDSA:algorithm=SignatureAndHashAlgorithm.valueOf(HashAlgorithm.SHA1.value,SignatureAlgorithm.ECDSA.value,0);break;default :}if (algorithm == null) {supportedSignAlgs=Collections.<SignatureAndHashAlgorithm>emptySet();} else {supportedSignAlgs=new ArrayList<SignatureAndHashAlgorithm>(1);supportedSignAlgs.add(algorithm);supportedSignAlgs=SignatureAndHashAlgorithm.getSupportedAlgorithms(algorithmConstraints,supportedSignAlgs);}session.setPeerSupportedSignatureAlgorithms(supportedSignAlgs);}}switch (keyExchange) {case K_RSA:if (setupPrivateKeyAndChain("RSA") == false) {return false;}break;case K_RSA_EXPORT:if (setupPrivateKeyAndChain("RSA") == false) {return false;}try {if (JsseJce.getRSAKeyLength(certs[0].getPublicKey()) > 512) {if (!setupEphemeralRSAKeys(suite.exportable)) {return false;}}} catch (RuntimeException e) {return false;}break;case K_DHE_RSA:if (setupPrivateKeyAndChain("RSA") == false) {return false;}if (protocolVersion.v >= ProtocolVersion.TLS12.v) {preferableSignatureAlgorithm=SignatureAndHashAlgorithm.getPreferableAlgorithm(supportedSignAlgs,"RSA",privateKey);if (preferableSignatureAlgorithm == null) {if ((debug != null) && Debug.isOn("handshake")) {System.out.println("No signature and hash algorithm for cipher " + suite);}return false;}}setupEphemeralDHKeys(suite.exportable,privateKey);break;case K_ECDHE_RSA:if (setupPrivateKeyAndChain("RSA") == false) {return false;}if (protocolVersion.v >= ProtocolVersion.TLS12.v) {preferableSignatureAlgorithm=SignatureAndHashAlgorithm.getPreferableAlgorithm(supportedSignAlgs,"RSA",privateKey);if (preferableSignatureAlgorithm == null) {if ((debug != null) && Debug.isOn("handshake")) {System.out.println("No signature and hash algorithm for cipher " + suite);}return false;}}if (setupEphemeralECDHKeys() == false) {return false;}break;case K_DHE_DSS:if (protocolVersion.v >= ProtocolVersion.TLS12.v) {preferableSignatureAlgorithm=SignatureAndHashAlgorithm.getPreferableAlgorithm(supportedSignAlgs,"DSA");if (preferableSignatureAlgorithm == null) {if ((debug != null) && Debug.isOn("handshake")) {System.out.println("No signature and hash algorithm for cipher " + suite);}return false;}}if (setupPrivateKeyAndChain("DSA") == false) {return false;}setupEphemeralDHKeys(suite.exportable,privateKey);break;case K_ECDHE_ECDSA:if (protocolVersion.v >= ProtocolVersion.TLS12.v) {preferableSignatureAlgorithm=SignatureAndHashAlgorithm.getPreferableAlgorithm(supportedSignAlgs,"ECDSA");if (preferableSignatureAlgorithm == null) {if ((debug != null) && Debug.isOn("handshake")) {System.out.println("No signature and hash algorithm for cipher " + suite);}return false;}}if (setupPrivateKeyAndChain("EC") == false) {return false;}if (setupEphemeralECDHKeys() == false) {return false;}break;case K_ECDH_RSA:if (setupPrivateKeyAndChain("EC") == false) {return false;}setupStaticECDHKeys();break;case K_ECDH_ECDSA:if (setupPrivateKeyAndChain("EC") == false) {return false;}setupStaticECDHKeys();break;case K_KRB5:case K_KRB5_EXPORT:if (!setupKerberosKeys()) {return false;}break;case K_DH_ANON:setupEphemeralDHKeys(suite.exportable,null);break;case K_ECDH_ANON:if (setupEphemeralECDHKeys() == false) {return false;}break;default :throw new RuntimeException("Unrecognized cipherSuite: " + suite);}setCipherSuite(suite);if (protocolVersion.v >= ProtocolVersion.TLS12.v) {if (peerSupportedSignAlgs == null) {setPeerSupportedSignAlgs(supportedSignAlgs);}}return true;}  }
class C{  @Override public void addPages(){  DataSourceViewDescriptor view=dataSource.getDriver().getProviderDescriptor().getView(IActionConstants.EDIT_CONNECTION_POINT);  if (view != null) {    pageSettings=new ConnectionPageSettings(this,view,dataSource);    addPage(pageSettings);  }  boolean embedded=dataSource.getDriver().isEmbedded();  pageGeneral=new ConnectionPageGeneral(this,dataSource);  if (!embedded) {    pageNetwork=new ConnectionPageNetwork(this);  }  pageEvents=new EditShellCommandsDialogPage(dataSource);  addPage(pageGeneral);  if (pageSettings != null) {    if (!embedded) {      pageSettings.addSubPage(pageNetwork);    }    pageSettings.addSubPage(pageEvents);  }  addPreferencePage(new PrefPageMetaData(),"Metadata","Metadata reading preferences");  WizardPrefPage rsPage=addPreferencePage(new PrefPageResultSetMain(),"Result Sets","Result Set preferences");  rsPage.addSubPage(new PrefPageResultSetBinaries(),"Binaries","Binary data representation");  rsPage.addSubPage(new PrefPageDataFormat(),"Data Formatting","Data formatting preferences");  rsPage.addSubPage(new PrefPageResultSetPresentation(),"Presentation","ResultSets UI & presentation");  WizardPrefPage sqlPage=addPreferencePage(new PrefPageSQLEditor(),"SQL Editor","SQL editor settings");  sqlPage.addSubPage(new PrefPageSQLExecute(),"SQL Processing","SQL processing settings");}  }
class C{  public void configureForForeignSession(ForeignSession session,boolean isExpanded){  mDeviceIcon.setVisibility(View.VISIBLE);  mDeviceLabel.setText(session.name);  setTimeLabelVisibility(View.VISIBLE);  mTimeLabel.setText(getTimeString(session));switch (session.deviceType) {case ForeignSession.DEVICE_TYPE_PHONE:    mDeviceIcon.setImageResource(R.drawable.recent_phone);  break;case ForeignSession.DEVICE_TYPE_TABLET:mDeviceIcon.setImageResource(R.drawable.recent_tablet);break;default :mDeviceIcon.setImageResource(R.drawable.recent_laptop);break;}configureExpandedCollapsed(isExpanded);}  }
class C{  private String createStorageSynchronizedObjPath(CIMObjectPath targetPath,CIMObjectPath sourcePath){  @SuppressWarnings("rawtypes") CIMProperty[] propKeys={new CIMProperty<String>(SmisConstants.CP_SYNCED_ELEMENT,CIMDataType.STRING_T,targetPath.toString(),true,false,null),new CIMProperty<String>(SmisConstants.CP_SYSTEM_ELEMENT,CIMDataType.STRING_T,sourcePath.toString(),true,false,null)};  return CimObjectPathCreator.createInstance(Constants.STORAGE_SYNCHRONIZED_SV_SV,Constants.EMC_NAMESPACE,propKeys).toString();}  }
class C{  private void onComplete(){  onDone(tx,err);}  }
class C{  protected void replyResourceConstraintPacket(IQ request){  XMPPError xmppError=new XMPPError(XMPPError.Condition.resource_constraint);  IQ error=IQ.createErrorResponse(request,xmppError);  this.connection.sendPacket(error);}  }
class C{  public static int hashCode(boolean[] field){  return field == null || field.length == 0 ? 0 : Arrays.hashCode(field);}  }
class C{  protected JsonSerializer<Object> _createAndCacheUntypedSerializer(Class<?> type,BeanProperty property) throws JsonMappingException {  JsonSerializer<Object> ser;  try {    ser=_createUntypedSerializer(_config.constructType(type),property);  } catch (  IllegalArgumentException iae) {    throw new JsonMappingException(iae.getMessage(),null,iae);  }  if (ser != null) {    _serializerCache.addAndResolveNonTypedSerializer(type,ser,this);  }  return ser;}  }
class C{  protected double calculateTextBlockWidth(TextBlock block,CategoryLabelPosition position,Graphics2D g2){  RectangleInsets insets=getTickLabelInsets();  Size2D size=block.calculateDimensions(g2);  Rectangle2D box=new Rectangle2D.Double(0.0,0.0,size.getWidth(),size.getHeight());  Shape rotatedBox=ShapeUtilities.rotateShape(box,position.getAngle(),0.0f,0.0f);  double w=rotatedBox.getBounds2D().getWidth() + insets.getLeft() + insets.getRight();  return w;}  }
class C{  public static String normalizeUnsignedShort(String value){  return normalizeIntegerValue(value,"0","65535");}  }
class C{  public Set<URI> uris(String alias){  JClass jc=lookupAlias(alias);  return jc.getUris();}  }
class C{  public static RootedTree rootTreeAtCenter(RootedTree tree){  HashMap<HashPair<Node>,Double> dists=new LinkedHashMap<HashPair<Node>,Double>();  try {    double maxDistance=-Double.MAX_VALUE;    Node current=null;    Node direction=null;    for (    Node e : tree.getExternalNodes()) {      for (      Node n : tree.getAdjacencies(e)) {        final double d=dist(tree,e,n,dists);        if (d > maxDistance) {          maxDistance=d;          current=e;          direction=n;        }      }    }    double distanceLeft=maxDistance / 2.0;    while (true) {      final double len=tree.getEdgeLength(current,direction);      if (distanceLeft <= len) {        return new ReRootedTree(tree,current,direction,distanceLeft);      }      distanceLeft-=len;      maxDistance=-Double.MAX_VALUE;      Node next=null;      for (      Node n : tree.getAdjacencies(direction)) {        if (n == current)         continue;        final double d=dist(tree,direction,n,dists);        if (d > maxDistance) {          maxDistance=d;          next=n;        }      }      current=direction;      direction=next;    }  } catch (  Graph.NoEdgeException e1) {    return null;  }}  }
class C{  void disconnect(){  this.server=null;  if (this.jmxc != null) {    try {      this.jmxc.close();    } catch (    IOException e) {    }  }  this.jmxc=null;}  }
class C{  public URI toURI() throws URISyntaxException {  return new URI(toExternalForm());}  }
class C{  static void checkSignedShort(final int value,final String msg){  if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {    throw new IllegalArgumentException(msg + " (must be a signed short): " + value);  }}  }
class C{  public static void writeSetting(final AbstractSQLProvider provider,final CModule module,final String key,final String value) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE01999: Provider argument can not be null");  Preconditions.checkNotNull(module,"IE00540: Module argument can not be null");  Preconditions.checkNotNull(key,"IE00541: Key argument can not be null");  Preconditions.checkNotNull(value,"IE02011: Value argument can not be null");  Preconditions.checkArgument(module.inSameDatabase(provider),"IE00542: Module is not part of this database");  writeSetting(provider.getConnection(),module.getConfiguration().getId(),key,value,CTableNames.MODULE_SETTINGS_TABLE);}  }
class C{  public static void enableForProduct(Product product,DataService ds,String... types) throws ObjectNotFoundException {  assert (product != null);  List<ProductToPaymentType> paymentTypes=new ArrayList<ProductToPaymentType>();  for (  String type : types) {    PaymentType pt=new PaymentType();    pt.setPaymentTypeId(type);    pt=(PaymentType)ds.getReferenceByBusinessKey(pt);    ProductToPaymentType ptpt=new ProductToPaymentType(product,pt);    try {      ds.persist(ptpt);    } catch (    NonUniqueBusinessKeyException e) {    }    paymentTypes.add(ptpt);  }  product.setPaymentTypes(paymentTypes);}  }
class C{  public static SECIdType newInstance(){  final SECIdType returnInstance=new SECIdType();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  public boolean isStreaming(){  return false;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:33.250 -0500",hash_original_method="64F6A72F78EB0039947A0530C3919D96",hash_generated_method="A20B17C2FAE41E0FE8ECB3D168D178C1") MenuItemImpl(MenuBuilder menu,int group,int id,int categoryOrder,int ordering,CharSequence title,int showAsAction){  if (sPrependShortcutLabel == null) {    sPrependShortcutLabel=menu.getContext().getResources().getString(com.android.internal.R.string.prepend_shortcut_label);    sEnterShortcutLabel=menu.getContext().getResources().getString(com.android.internal.R.string.menu_enter_shortcut_label);    sDeleteShortcutLabel=menu.getContext().getResources().getString(com.android.internal.R.string.menu_delete_shortcut_label);    sSpaceShortcutLabel=menu.getContext().getResources().getString(com.android.internal.R.string.menu_space_shortcut_label);  }  mMenu=menu;  mId=id;  mGroup=group;  mCategoryOrder=categoryOrder;  mOrdering=ordering;  mTitle=title;  mShowAsAction=showAsAction;}  }
class C{  public void valueTextIndex(boolean valTextIdx){  this.valTextIdx=valTextIdx;}  }
class C{  public GDALDataRaster(Object source,boolean quickReadingMode) throws IllegalArgumentException, FileNotFoundException {  super();  File file=WWIO.getFileForLocalAddress(source);  if (null == file) {    String message;    if (null != source) {      message=Logging.getMessage("generic.UnrecognizedSourceType",source.getClass().getName());    } else {      message=Logging.getMessage("nullValue.SourceIsNull");    }    if (!quickReadingMode) {      Logging.logger().finest(message);    }    throw new IllegalArgumentException(message);  }  this.srcFile=file;  String name=this.srcFile.getName();  if (null != name && name.length() > 0) {    this.setValue(AVKey.DATASET_NAME,name);    this.setValue(AVKey.DISPLAY_NAME,name);    this.setValue(AVKey.FILE,this.srcFile);  }  Dataset ds=GDALUtils.open(file,quickReadingMode);  if (ds == null) {    String message=GDALUtils.getErrorMessage();    if (WWUtil.isEmpty(message))     message=Logging.getMessage("nullValue.DataSetIsNull");    if (!quickReadingMode) {      Logging.logger().severe(message);    }    throw new IllegalArgumentException(message);  }  this.init(ds,quickReadingMode);}  }
class C{  @SuppressWarnings("unchecked") private boolean transformStrings(MethodNode mn){  logger.info("Current method: " + mn.name);  boolean changed=false;  ListIterator<AbstractInsnNode> iterator=mn.instructions.iterator();  while (iterator.hasNext()) {    AbstractInsnNode node=iterator.next();    if (node instanceof MethodInsnNode) {      MethodInsnNode min=(MethodInsnNode)node;      if (min.owner.equals("java/lang/String")) {        if (min.name.equals("equals")) {          changed=true;          MethodInsnNode equalCheck=new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(StringHelper.class),"StringEquals",Type.getMethodDescriptor(Type.INT_TYPE,new Type[]{Type.getType(String.class),Type.getType(Object.class)}),false);          mn.instructions.insertBefore(node,equalCheck);          mn.instructions.remove(node);          TransformationStatistics.transformedStringComparison();        } else         if (min.name.equals("equalsIgnoreCase")) {          changed=true;          MethodInsnNode equalCheck=new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(StringHelper.class),"StringEqualsIgnoreCase",Type.getMethodDescriptor(Type.INT_TYPE,new Type[]{Type.getType(String.class),Type.getType(String.class)}),false);          mn.instructions.insertBefore(node,equalCheck);          mn.instructions.remove(node);          TransformationStatistics.transformedStringComparison();        } else         if (min.name.equals("startsWith")) {          changed=true;          if (min.desc.equals("(Ljava/lang/String;)Z")) {            mn.instructions.insertBefore(node,new InsnNode(Opcodes.ICONST_0));          }          MethodInsnNode equalCheck=new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(StringHelper.class),"StringStartsWith",Type.getMethodDescriptor(Type.INT_TYPE,new Type[]{Type.getType(String.class),Type.getType(String.class),Type.INT_TYPE}),false);          mn.instructions.insertBefore(node,equalCheck);          mn.instructions.remove(node);          TransformationStatistics.transformedStringComparison();        } else         if (min.name.equals("endsWith")) {          changed=true;          MethodInsnNode equalCheck=new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(StringHelper.class),"StringEndsWith",Type.getMethodDescriptor(Type.INT_TYPE,new Type[]{Type.getType(String.class),Type.getType(String.class)}),false);          mn.instructions.insertBefore(node,equalCheck);          mn.instructions.remove(node);          TransformationStatistics.transformedStringComparison();        } else         if (min.name.equals("isEmpty")) {          changed=true;          MethodInsnNode equalCheck=new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(StringHelper.class),"StringIsEmpty",Type.getMethodDescriptor(Type.INT_TYPE,new Type[]{Type.getType(String.class)}),false);          mn.instructions.insertBefore(node,equalCheck);          mn.instructions.remove(node);          TransformationStatistics.transformedStringComparison();        } else         if (min.name.equals("matches")) {          changed=true;          MethodInsnNode equalCheck=new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(StringHelper.class),"StringMatches",Type.getMethodDescriptor(Type.INT_TYPE,new Type[]{Type.getType(String.class),Type.getType(String.class)}),false);          mn.instructions.insertBefore(node,equalCheck);          mn.instructions.remove(node);          TransformationStatistics.transformedStringComparison();        } else         if (min.name.equals("regionMatches")) {          Type[] argumentTypes=Type.getArgumentTypes(min.desc);          if (argumentTypes.length == 4) {            changed=true;            MethodInsnNode equalCheck=new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(StringHelper.class),"StringRegionMatches",Type.getMethodDescriptor(Type.INT_TYPE,new Type[]{Type.getType(String.class),Type.INT_TYPE,Type.getType(String.class),Type.INT_TYPE,Type.INT_TYPE}),false);            mn.instructions.insertBefore(node,equalCheck);            mn.instructions.remove(node);            TransformationStatistics.transformedStringComparison();          } else           if (argumentTypes.length == 5) {            changed=true;            MethodInsnNode equalCheck=new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(StringHelper.class),"StringRegionMatches",Type.getMethodDescriptor(Type.INT_TYPE,new Type[]{Type.getType(String.class),Type.BOOLEAN_TYPE,Type.INT_TYPE,Type.getType(String.class),Type.INT_TYPE,Type.INT_TYPE}),false);            mn.instructions.insertBefore(node,equalCheck);            mn.instructions.remove(node);            TransformationStatistics.transformedStringComparison();          }        }      } else       if (min.owner.equals("java/util/regex/Pattern")) {        if (min.name.equals("matches")) {          changed=true;          MethodInsnNode equalCheck=new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(StringHelper.class),"StringMatchRegex",Type.getMethodDescriptor(Type.INT_TYPE,new Type[]{Type.getType(String.class),Type.getType(CharSequence.class)}),false);          mn.instructions.insertBefore(node,equalCheck);          mn.instructions.remove(node);        }      } else       if (min.owner.equals("java/util/regex/Matcher")) {        if (min.name.equals("matches")) {          changed=true;          MethodInsnNode equalCheck=new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(StringHelper.class),"StringMatchRegex",Type.getMethodDescriptor(Type.INT_TYPE,new Type[]{Type.getType(Matcher.class)}),false);          mn.instructions.insertBefore(node,equalCheck);          mn.instructions.remove(node);        }      }    }  }  return changed;}  }
class C{  protected void failed(Throwable t) throws InvalidJobException {  if (currentState != State.RUNNING) {    throw new InvalidJobException("Illegal state change");  }  currentState=State.FAILED;  Debug.logError(t,"Async-Service failed.",module);}  }
class C{  @RequestMapping(value="/{id}",method=RequestMethod.DELETE) public ResultVO delete(@CurrentUser User currentUser,@PathVariable String id){  try {    ClientParam param=new ClientParam(StringUtils.isBlank(id) ? null : Long.valueOf(id));    ResultVO resultVO=validateHelper.validate(param,currentUser,logger,OperationType.DELETE);    if (resultVO != null) {      return resultVO;    }    clientDomain.delete(param,currentUser);    final String USER="user";    return new ResultVO(ResultConstant.OK,OperationStatus.SUCCESS,String.format(ControllerConstant.DELETE,USER));  } catch (  CommonsException e) {    return resultHelper.infoResp(logger,e.getErrorType(),e.getMessage());  }catch (  Exception e) {    return resultHelper.errorResp(logger,e,ErrorType.UNKNOWN,e.getMessage());  }}  }
class C{  public RectangleIntersectsSegmentVisitor(Polygon rectangle){  rectEnv=rectangle.getEnvelopeInternal();  rectIntersector=new RectangleLineIntersector(rectEnv);}  }
class C{  public void updateByte(int columnIndex,byte x) throws SQLException {  checkUpdatable();  getField(columnIndex).setByte(x);}  }
class C{  @Override public void registerOutParameter(int parameterIndex,int sqlType,int scale) throws SQLException {  registerOutParameter(parameterIndex);}  }
class C{  private void updateGainComponents(GainMode mode){switch (mode) {case LINEARITY:    if (!mMasterGain.isEnabled()) {      mMasterGain.setEnabled(true);      mMasterGainValueLabel.setEnabled(true);    }  if (mIFGain.isEnabled()) {    mIFGain.setEnabled(false);    mIFGainValueLabel.setEnabled(false);  }if (mLNAGain.isEnabled()) {  mLNAAGC.setEnabled(false);  mLNAGainValueLabel.setEnabled(false);  mLNAGain.setEnabled(false);}if (mMixerGain.isEnabled()) {mMixerGainValueLabel.setEnabled(false);mMixerAGC.setEnabled(false);mMixerGain.setEnabled(false);}break;case SENSITIVITY:if (!mMasterGain.isEnabled()) {mMasterGain.setEnabled(true);mMasterGainValueLabel.setEnabled(true);}if (mIFGain.isEnabled()) {mIFGain.setEnabled(false);mIFGainValueLabel.setEnabled(false);}if (mLNAGain.isEnabled()) {mLNAAGC.setEnabled(false);mLNAGainValueLabel.setEnabled(false);mLNAGain.setEnabled(false);}if (mMixerGain.isEnabled()) {mMixerGainValueLabel.setEnabled(false);mMixerAGC.setEnabled(false);mMixerGain.setEnabled(false);}break;case CUSTOM:if (mMasterGain.isEnabled()) {mMasterGain.setEnabled(false);mMasterGainValueLabel.setEnabled(false);}if (!mIFGain.isEnabled()) {mIFGain.setEnabled(true);mIFGainValueLabel.setEnabled(true);}if (!mLNAGain.isEnabled()) {mLNAAGC.setEnabled(true);mLNAGainValueLabel.setEnabled(true);mLNAGain.setEnabled(true);}if (!mMixerGain.isEnabled()) {mMixerGainValueLabel.setEnabled(true);mMixerAGC.setEnabled(true);mMixerGain.setEnabled(true);}default :break;}}  }
class C{  public GZipInputStreamRandomAccess(File gzipFile,Long index) throws IOException {  this(new SeekableRandomAccessFile(gzipFile),index);}  }
class C{  private static int parseHdlr(ParsableByteArray hdlr){  hdlr.setPosition(Mp4Util.FULL_ATOM_HEADER_SIZE + 4);  return hdlr.readInt();}  }
class C{  public static String toLowerCase(String string){  boolean changed=false;  char[] chars=string.toCharArray();  for (int i=0; i != chars.length; i++) {    char ch=chars[i];    if ('A' <= ch && 'Z' >= ch) {      changed=true;      chars[i]=(char)(ch - 'A' + 'a');    }  }  if (changed) {    return new String(chars);  }  return string;}  }
class C{  public void quitSynchronous(){  mIsFinished=true;  mLooper.quit();  if (mLooper.getThread() != Thread.currentThread()) {    try {      mLooper.getThread().join();    } catch (    InterruptedException e) {      throw new RuntimeException("Got interrupted waiting to join thread " + mName);    }  }}  }
class C{  public void writeLong(final long value,final JBBPByteOrder byteOrder) throws IOException {  if (byteOrder == JBBPByteOrder.BIG_ENDIAN) {    this.writeInt((int)(value >>> 32),byteOrder);    this.writeInt((int)value,byteOrder);  } else {    this.writeInt((int)value,byteOrder);    this.writeInt((int)(value >>> 32),byteOrder);  }}  }
class C{  static void putTarget(int typeRef,TypePath typePath,ByteVector out){switch (typeRef >>> 24) {case 0x00:case 0x01:case 0x16:    out.putShort(typeRef >>> 16);  break;case 0x13:case 0x14:case 0x15:out.putByte(typeRef >>> 24);break;case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:out.putInt(typeRef);break;default :out.put12(typeRef >>> 24,(typeRef & 0xFFFF00) >> 8);break;}if (typePath == null) {out.putByte(0);} else {int length=typePath.b[typePath.offset] * 2 + 1;out.putByteArray(typePath.b,typePath.offset,length);}}  }
class C{  public Vertex parseStateMachine(URL url,String encoding,boolean debug,Network network){  try {    return parseStateMachine(Utils.openStream(url),debug,network,encoding,MAX_FILE_SIZE);  } catch (  IOException exception) {    throw new SelfParseException("Parsing error occurred",exception);  }}  }
class C{  private DataFlavor(String primaryType,String subType,MimeTypeParameterList params,Class<?> representationClass,String humanPresentableName){  super();  if (primaryType == null) {    throw new NullPointerException("primaryType");  }  if (subType == null) {    throw new NullPointerException("subType");  }  if (representationClass == null) {    throw new NullPointerException("representationClass");  }  if (params == null)   params=new MimeTypeParameterList();  params.set("class",representationClass.getName());  if (humanPresentableName == null) {    humanPresentableName=params.get("humanPresentableName");    if (humanPresentableName == null)     humanPresentableName=primaryType + "/" + subType;  }  try {    mimeType=new MimeType(primaryType,subType,params);  } catch (  MimeTypeParseException mtpe) {    throw new IllegalArgumentException("MimeType Parse Exception: " + mtpe.getMessage());  }  this.representationClass=representationClass;  this.humanPresentableName=humanPresentableName;  mimeType.removeParameter("humanPresentableName");}  }
class C{  protected Node newNode(){  return new GenericEntity();}  }
class C{  public ListWithDefault<T> subList(int fromIndex,int toIndex){  return new ListWithDefault<T>(delegate.subList(fromIndex,toIndex),lazyDefaultValues,(Closure)initClosure.clone());}  }
class C{  private void checkEmptiness(Elements elements,TestSolutionHandler testSolutionHandler){  if (elements.isEmpty()) {    testSolutionHandler.addTestSolution(TestSolution.NOT_APPLICABLE);    return;  }  TestSolution testSolution=TestSolution.NOT_APPLICABLE;  String textElement;  for (  Element el : elements) {    textElement=testableTextBuilder.buildTextFromElement(el);    if (textElement == null) {      testSolution=setTestSolution(testSolution,TestSolution.NOT_APPLICABLE);    } else     if (isElementEmpty(textElement)) {      testSolution=setTestSolution(testSolution,getFailureSolution());      addSourceCodeRemark(getFailureSolution(),el,getFailureMsgCode());    } else {      testSolution=setTestSolution(testSolution,getSuccessSolution());      addSourceCodeRemark(getSuccessSolution(),el,getSuccessMsgCode());    }  }  testSolutionHandler.addTestSolution(testSolution);}  }
class C{  private void checkCycles(Dimension dim){  List<DimensionPK> check=new ArrayList<DimensionPK>();  Dimension child=dim;  check.add(child.getId());  Dimension parent=getParent(child);  while (parent != null) {    if (check.contains(parent.getId())) {      sanitizeParent(child);      break;    } else {      child=parent;      check.add(child.getId());      parent=getParent(child);    }  }}  }
class C{  public HeapDataOutputStream(byte[] bytes){  int len=bytes.length;  if (len <= 0) {    throw new IllegalArgumentException("The byte array must not be empty");  }  if (len > 32) {    this.MIN_CHUNK_SIZE=len;  } else {    this.MIN_CHUNK_SIZE=32;  }  this.buffer=ByteBuffer.wrap(bytes);  this.doNotCopy=false;}  }
class C{  public boolean tetradScore3(int v1,int v2,int v3,int v4){  return oneFactorTest(v1,v2,v3,v4);}  }
class C{  @Override public void updateCharacterStream(int columnIndex,Reader x,int length) throws SQLException {  updateCharacterStream(columnIndex,x,(long)length);}  }
class C{  public void destroy(){  log.fine("destroy");}  }
class C{  public CombinedXYChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer,XYCombinedChartDef[] chartDefinitions){  super(dataset,renderer);  this.chartDefinitions=chartDefinitions;  int length=chartDefinitions.length;  mCharts=new XYChart[length];  for (int i=0; i < length; i++) {    try {      mCharts[i]=getXYChart(chartDefinitions[i].getType());    } catch (    Exception e) {    }    if (mCharts[i] == null) {      throw new IllegalArgumentException("Unknown chart type " + chartDefinitions[i].getType());    } else {      XYMultipleSeriesDataset newDataset=new XYMultipleSeriesDataset();      XYMultipleSeriesRenderer newRenderer=new XYMultipleSeriesRenderer();      for (      int seriesIndex : chartDefinitions[i].getSeriesIndex()) {        newDataset.addSeries(dataset.getSeriesAt(seriesIndex));        newRenderer.addSeriesRenderer(renderer.getSeriesRendererAt(seriesIndex));      }      newRenderer.setBarSpacing(renderer.getBarSpacing());      newRenderer.setPointSize(renderer.getPointSize());      mCharts[i].setDatasetRenderer(newDataset,newRenderer);    }  }}  }
class C{  public boolean isUseAnisotropy(){  return useAnisotropy;}  }
class C{  public static void writeln(byte[] b){  writeln(b,true);}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  previewFormat=parameters.getPreviewFormat();  previewFormatString=parameters.get("preview-format");  log.debug("Default preview format: " + previewFormat + '/'+ previewFormatString);  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  screenResolution=new Point();  display.getSize(screenResolution);  log.debug("Screen resolution: " + screenResolution);  cameraResolution=getCameraResolution(parameters,screenResolution);  log.debug("Camera resolution: " + screenResolution);}  }
class C{  public static boolean mergeTemplate(String templateName,String encoding,Context context,Writer writer) throws ResourceNotFoundException, ParseErrorException, MethodInvocationException, Exception {  Template template=RuntimeSingleton.getTemplate(templateName,encoding);  if (template == null) {    RuntimeSingleton.error("Velocity.parseTemplate() failed loading template '" + templateName + "'");    return false;  } else {    template.merge(context,writer);    return true;  }}  }
class C{  public Item(String affiliation){  this.affiliation=affiliation;}  }
class C{  @Override public int intValue(){  return value;}  }
class C{  public Select<T> limit(int limit){  if (limit < 1) {    throw new QuantumFluxException("Limit must be larger than 0");  }  this.mLimit=limit;  return this;}  }
class C{  public static boolean convertPackageIdentifier(PsiBuilder b,int l){  IElementType currentTokenType=b.getTokenType();  if (currentTokenType == PACKAGE) {    b.advanceLexer();    return true;  } else   if (PACKAGE_TOKENS.contains(currentTokenType)) {    PsiBuilder.Marker m=b.mark();    b.advanceLexer();    m.collapse(PACKAGE);    return true;  }  return false;}  }
class C{  private static void configureEffectiveResourceBase(final ClassLoader classLoader) throws MalformedURLException {  String resourceBaseStr=System.getProperty(SystemProperties.JETTY_RESOURCE_BASE);  if (resourceBaseStr == null) {    resourceBaseStr=System.getProperty(SystemProperties.JETTY_HOME);  }  final String jettyOverrideWeb=System.getProperty(SystemProperties.JETTY_OVERRIDE_WEB_XML);  final boolean isDeclared=resourceBaseStr != null && resourceBaseStr.trim().length() > 0;  boolean isFile=false;  boolean isClassPath=false;  if (!isDeclared) {    final File file=new File("bigdata-war-html/src/main/webapp/");    final URL resourceBaseURL;    if (file.exists()) {      resourceBaseURL=file.toURI().toURL();      isFile=true;    } else {      URL tmp=null;      String src=null;      if (tmp == null) {        tmp=ClassLoader.getSystemClassLoader().getResource(src="bigdata-war-html/src/main/webapp/WEB-INF/web.xml");      }      if (tmp == null) {        tmp=ClassLoader.getSystemClassLoader().getResource(src="war/src/main/webapp/WEB-INF/web.xml");      }      if (tmp != null) {        if (src != null) {          if (log.isInfoEnabled())           log.info("Found: src=" + src + ", url="+ tmp);        }        resourceBaseURL=new URL(trimURISubstring(tmp,"WEB-INF/web.xml"));      } else {        resourceBaseURL=null;      }      isClassPath=resourceBaseURL != null;    }    if (resourceBaseURL != null) {      resourceBaseStr=resourceBaseURL.toExternalForm();      System.setProperty(SystemProperties.JETTY_RESOURCE_BASE,resourceBaseStr);    }  }  if (resourceBaseStr != null && jettyOverrideWeb == null) {    final URL overrideWebXmlURL=new URL(resourceBaseStr + (resourceBaseStr.endsWith("/") ? "" : "/") + "WEB-INF/override-web.xml");    System.setProperty(SystemProperties.JETTY_OVERRIDE_WEB_XML,overrideWebXmlURL.toExternalForm());  }  if (log.isInfoEnabled())   log.info("jetty configuration" + ": resourceBaseStr=" + resourceBaseStr + ", isDeclared="+ isDeclared+ ", isFile="+ isFile+ ", isClassPath="+ isClassPath+ ", jetty.resourceBase(effective)="+ System.getProperty(SystemProperties.JETTY_RESOURCE_BASE)+ ", jetty.overrideWebXml(effective)="+ System.getProperty(SystemProperties.JETTY_OVERRIDE_WEB_XML));}  }
class C{  public CountSimComparisonLinkFilter(final List<CountSimComparison> countSimComparisons){  this.countSimComparisons=countSimComparisons;  this.countSimComparisonLinkMap=new Hashtable<>();  if (this.countSimComparisons.size() < 1) {    return;  }  List<CountSimComparison> countSimComparisonsPerLink=new Vector<CountSimComparison>();  Id<Link> prevId=this.countSimComparisons.get(0).getId();  Iterator<CountSimComparison> csc_it=this.countSimComparisons.iterator();  while (csc_it.hasNext()) {    CountSimComparison csc=csc_it.next();    if (csc.getId().compareTo(prevId) == 0) {      countSimComparisonsPerLink.add(csc);    }    if (!(csc.getId().compareTo(prevId) == 0) || (!csc_it.hasNext())) {      countSimComparisonLinkMap.put(prevId,countSimComparisonsPerLink);      countSimComparisonsPerLink=new Vector<CountSimComparison>();      countSimComparisonsPerLink.add(csc);    }    prevId=csc.getId();  }}  }
class C{  private Map<ContextKey,ContextValue<?>> evaluateServicePmContext(HttpServletRequest request){  final String instanceType=request.getParameter(REQUEST_PARAM_INSTANCE_TYPE).trim();  final String region=request.getParameter(REQUEST_PARAM_REGION).trim();  final String os=request.getParameter(REQUEST_PARAM_OS).trim();  final String customerId=request.getParameter(REQUEST_PARAM_CUSTOMER_ID).trim();  if (!emptyString(instanceType) && !emptyString(region) && !emptyString(os)) {    Map<String,String> parameterMap=new HashMap<String,String>();    parameterMap.put(SERVICE_PARAMETER_INSTANCE_TYPE,instanceType);    parameterMap.put(SERVICE_PARAMETER_REGION,region);    parameterMap.put(SERVICE_PARAMETER_OS,os);    Map<ContextKey,ContextValue<?>> context=new HashMap<ContextKey,ContextValue<?>>();    context.put(ContextKey.SERVICE_PARAMETERS,new ContextValueParameterMap(parameterMap));    if (!emptyString(customerId)) {      context.put(ContextKey.CUSTOMER_ID,new ContextValueString(customerId));    }    return context;  }  return null;}  }
class C{  boolean istRestoreWanted(PRESELECT preselect){  return prefs.getStringSet(PREF_USE_LAST,emptyStringSet).contains(preselect.toString());}  }
class C{  public boolean isBoolean(String key){  Object val=get(key);  return val instanceof Boolean;}  }
class C{  public boolean isDefinitelyNotNull(){  int baseKind=getBaseKind();  return baseKind == NN || baseKind == CHECKED_NN || baseKind == NO_KABOOM_NN;}  }
class C{  @Override public void start() throws AtlasException {  if (!HAConfiguration.isHAEnabled(configuration)) {    LOG.info("HA is not enabled, no need to start leader election service");    return;  }  cacheActiveStateChangeHandlers();  serverId=AtlasServerIdSelector.selectServerId(configuration);  joinElection();}  }
class C{  public Zipper<A> filterBefore(Predicate<? super A> predicate){  List<A> front2=front.filter(predicate);  return new Zipper<>(front2,back,front2.size());}  }
class C{  protected void cutSelectedBean(){  if (Debug.debugging("beanbox"))   Debug.output("Enter> cutSelectedBean");  if (selectedBean == null || selectedBeanLocation == null) {    if (Debug.debugging("beanbox"))     Debug.output("selectedBean=" + selectedBean);    if (Debug.debugging("beanbox"))     Debug.output("selectedBeanLocation=" + selectedBeanLocation);    clearSelection();    return;  }  try {    serBean=new ByteArrayOutputStream();    ObjectOutputStream oos=new ObjectOutputStream(serBean);    oos.writeObject(selectedBean);  } catch (  Exception e) {    e.printStackTrace();    clearSelection();    if (Debug.debugging("beanbox"))     Debug.output("Exit> copySelectedBean");    return;  }  cutBean=selectedBean;  selectedBeanBox.showCut(selectedBean);  if (Debug.debugging("beanbox"))   Debug.output("Exit> cutSelectedBean");}  }
class C{  public Vector<int[]> computeStartAndEndTimePairs(boolean[] sourceValid,boolean[] destValid,boolean[][] condValid) throws Exception {  if (sourceValid.length != destValid.length) {    throw new Exception("Validity arrays must be of same length");  }  if (condValid.length != destValid.length) {    throw new Exception("Validity arrays must be of same length");  }  int lengthOfDestPastRequired=(k - 1) * k_tau + 1;  int lengthOfSourcePastRequired=(l - 1) * l_tau + 1;  int[] lengthOfConditionalsPastsRequired=new int[condEmbedDims.length];  for (int i=0; i < condEmbedDims.length; i++) {    lengthOfConditionalsPastsRequired[i]=(condEmbedDims[i] - 1) * cond_taus[i] + 1;  }  int startTime=0;  Vector<int[]> startAndEndTimePairs=new Vector<int[]>();  boolean previousWasOk=false;  for (int t=startTimeForFirstDestEmbedding; t < destValid.length - 1; t++) {    if (previousWasOk) {      boolean nextCondsValid=true;      for (int i=0; i < condEmbedDims.length; i++) {        nextCondsValid&=condValid[t + 1 - condDelays[i]][i];      }      if (nextCondsValid && destValid[t + 1] && sourceValid[t + 1 - delay]) {        continue;      } else {        previousWasOk=false;        int[] timePair=new int[2];        timePair[0]=startTime;        timePair[1]=t;        startAndEndTimePairs.add(timePair);        continue;      }    }    if (!destValid[t + 1]) {      continue;    }    boolean allOk=true;    for (int tBack=0; tBack < lengthOfDestPastRequired; tBack++) {      if (!destValid[t - tBack]) {        allOk=false;        break;      }    }    if (!allOk) {      continue;    }    for (int tBack=delay - 1; tBack < delay - 1 + lengthOfSourcePastRequired; tBack++) {      if (!sourceValid[t - tBack]) {        allOk=false;        break;      }    }    if (!allOk) {      continue;    }    for (int i=0; i < condEmbedDims.length; i++) {      for (int tBack=condDelays[i] - 1; tBack < condDelays[i] - 1 + lengthOfConditionalsPastsRequired[i]; tBack++) {        if (!condValid[t - tBack][i]) {          allOk=false;          break;        }      }      if (!allOk) {        continue;      }    }    startTime=t - startTimeForFirstDestEmbedding;    previousWasOk=true;  }  if (previousWasOk) {    previousWasOk=false;    int[] timePair=new int[2];    timePair[0]=startTime;    timePair[1]=destValid.length - 1;    startAndEndTimePairs.add(timePair);  }  return startAndEndTimePairs;}  }
class C{  public static int green(int color){  return (color >> 8) & 0xFF;}  }
class C{  public Minutes toStandardMinutes(){  return Minutes.minutes(getValue() / DateTimeConstants.SECONDS_PER_MINUTE);}  }
class C{  public boolean isChecked(){  return isChecked;}  }
class C{  private void addSourceMarkdownToExport(Entry source,int index,StringBuilder result) throws IOException {  result.append("Reference " + index + " ");  final String title=source.getNoteOrTitle("");  result.append(title);  final String url=source.getSourceUrl();  if (url != null && !url.isEmpty()) {    result.append("  \n");    result.append(" [" + url + "] [Reference"+ index+ "]");    result.append("\n");  } else {    result.append("\n");  }  result.append("\n");  result.append("[Reference" + index + "]: ");  if (url != null && !url.isEmpty()) {    result.append(url);  }  result.append(" \"");  result.append(title);  result.append("\"\n");}  }
class C{  private void calculateLineHeight(){  lineHeight=maxAscent=0;  for (int i=0; i < syntaxScheme.styles.length; i++) {    Style ss=syntaxScheme.styles[i];    if (ss != null && ss.font != null) {      FontMetrics fm=getFontMetrics(ss.font);      int height=fm.getHeight();      if (height > lineHeight)       lineHeight=height;      int ascent=fm.getMaxAscent();      if (ascent > maxAscent)       maxAscent=ascent;    }  }  Font temp=getFont();  FontMetrics fm=getFontMetrics(temp);  int height=fm.getHeight();  if (height > lineHeight) {    lineHeight=height;  }  int ascent=fm.getMaxAscent();  if (ascent > maxAscent) {    maxAscent=ascent;  }}  }
class C{  protected void doPathLayout(){  if (pathApplied)   return;  if (!spacingApplied)   adjustTextSpacing();  getGlyphAdvances();  if (textPath == null) {    pathApplied=true;    return;  }  boolean horizontal=!isVertical();  boolean glyphOrientationAuto=isGlyphOrientationAuto();  int glyphOrientationAngle=0;  if (!glyphOrientationAuto) {    glyphOrientationAngle=getGlyphOrientationAngle();  }  float pathLength=textPath.lengthOfPath();  float startOffset=textPath.getStartOffset();  int numGlyphs=gv.getNumGlyphs();  for (int i=0; i < numGlyphs; i++) {    gv.setGlyphVisible(i,true);  }  float glyphsLength;  if (horizontal) {    glyphsLength=(float)gv.getLogicalBounds().getWidth();  } else {    glyphsLength=(float)gv.getLogicalBounds().getHeight();  }  if (pathLength == 0f || glyphsLength == 0f) {    pathApplied=true;    textPathAdvance=advance;    return;  }  Point2D firstGlyphPosition=gv.getGlyphPosition(0);  float glyphOffset=0;  float currentPosition;  if (horizontal) {    glyphOffset=(float)(firstGlyphPosition.getY());    currentPosition=(float)(firstGlyphPosition.getX() + startOffset);  } else {    glyphOffset=(float)(firstGlyphPosition.getX());    currentPosition=(float)(firstGlyphPosition.getY() + startOffset);  }  char ch=aci.first();  int start=aci.getBeginIndex();  int currentChar=0;  int lastGlyphDrawn=-1;  float lastGlyphAdvance=0;  for (int i=0; i < numGlyphs; i++) {    Point2D currentGlyphPos=gv.getGlyphPosition(i);    float glyphAdvance=0;    float nextGlyphOffset=0;    Point2D nextGlyphPosition=gv.getGlyphPosition(i + 1);    if (horizontal) {      glyphAdvance=(float)(nextGlyphPosition.getX() - currentGlyphPos.getX());      nextGlyphOffset=(float)(nextGlyphPosition.getY() - currentGlyphPos.getY());    } else {      glyphAdvance=(float)(nextGlyphPosition.getY() - currentGlyphPos.getY());      nextGlyphOffset=(float)(nextGlyphPosition.getX() - currentGlyphPos.getX());    }    Rectangle2D glyphBounds=gv.getGlyphOutline(i).getBounds2D();    float glyphWidth=(float)glyphBounds.getWidth();    float glyphHeight=(float)glyphBounds.getHeight();    float glyphMidX=0;    if (glyphWidth > 0) {      glyphMidX=(float)(glyphBounds.getX() + glyphWidth / 2f);      glyphMidX-=(float)currentGlyphPos.getX();    }    float glyphMidY=0;    if (glyphHeight > 0) {      glyphMidY=(float)(glyphBounds.getY() + glyphHeight / 2f);      glyphMidY-=(float)currentGlyphPos.getY();    }    float charMidPos;    if (horizontal) {      charMidPos=currentPosition + glyphMidX;    } else {      charMidPos=currentPosition + glyphMidY;    }    Point2D charMidPoint=textPath.pointAtLength(charMidPos);    if (charMidPoint != null) {      float angle=textPath.angleAtLength(charMidPos);      AffineTransform glyphPathTransform=new AffineTransform();      if (horizontal) {        glyphPathTransform.rotate(angle);      } else {        glyphPathTransform.rotate(angle - (Math.PI / 2));      }      if (horizontal) {        glyphPathTransform.translate(0,glyphOffset);      } else {        glyphPathTransform.translate(glyphOffset,0);      }      if (horizontal) {        glyphPathTransform.translate(-glyphMidX,0f);      } else {        glyphPathTransform.translate(0f,-glyphMidY);      }      AffineTransform glyphTransform=gv.getGlyphTransform(i);      if (glyphTransform != null) {        glyphPathTransform.concatenate(glyphTransform);      }      gv.setGlyphTransform(i,glyphPathTransform);      gv.setGlyphPosition(i,charMidPoint);      lastGlyphDrawn=i;      lastGlyphAdvance=glyphAdvance;    } else {      gv.setGlyphVisible(i,false);    }    currentPosition+=glyphAdvance;    glyphOffset+=nextGlyphOffset;    currentChar+=gv.getCharacterCount(i,i);    if (currentChar >= charMap.length)     currentChar=charMap.length - 1;    ch=aci.setIndex(currentChar + start);  }  if (lastGlyphDrawn > -1) {    Point2D lastGlyphPos=gv.getGlyphPosition(lastGlyphDrawn);    if (horizontal) {      textPathAdvance=new Point2D.Double(lastGlyphPos.getX() + lastGlyphAdvance,lastGlyphPos.getY());    } else {      textPathAdvance=new Point2D.Double(lastGlyphPos.getX(),lastGlyphPos.getY() + lastGlyphAdvance);    }  } else {    textPathAdvance=new Point2D.Double(0,0);  }  layoutApplied=false;  spacingApplied=false;  pathApplied=true;}  }
class C{  protected String generateStorageSandboxPath(){  Path sandboxPath=FileSystems.getDefault().getPath(System.getProperty("user.home"),STORAGE_PATH_PREFIX,UUID.randomUUID().toString());  return sandboxPath.toAbsolutePath().toString();}  }
class C{  private void fireUpdate(List<Observer<A>> observerList,A argument){  for (  Observer<A> observer : observerList) {    observer.update(this,argument);  }}  }
class C{  public double distance2(double[] point1,double[] point2) throws Exception {  if (point1.length == point2.length) {    Double sum=0D;    for (int i=0; i < point1.length; i++) {      double tmp=point2[i] - point1[i];      sum=sum + tmp * tmp;    }    return sum;  } else {    throw new Exception("Exception in Euclidean distance: array lengths are not equal");  }}  }
class C{  public boolean isSetKey(){  return this.key != null;}  }
class C{  @Override public List<SourceRecord> poll() throws InterruptException {  List<SourceRecord> records=new ArrayList<>(0);  while (!reader.messages.isEmpty() && records.size() < batchSize) {    Document message=reader.messages.poll();    Struct messageStruct=getStruct(message);    String topic=getTopic(message);    String db=getDB(message);    String timestamp=getTimestamp(message);    records.add(new SourceRecord(Collections.singletonMap("mongodb",db),Collections.singletonMap(db,timestamp),topic,messageStruct.schema(),messageStruct));    log.trace(message.toString());  }  return records;}  }
class C{  public BamReader(final BgzfInputStream input,boolean readHeader) throws IOException {  mInput=input;  mIOBuf=new byte[4096];  if (readHeader) {    final int numRefs=readHeader(input);    readReferences(input,numRefs);  }  mCurrentAlignment=new byte[8192];  mCurrentRecord=new SamBamRecordImpl(this);  populateHasNext();}  }
class C{  public int fileCount(){  return index.size();}  }
class C{  public static WebSocketFrame createBinaryFrame(byte[] payload){  return new WebSocketFrame().setFin(true).setOpcode(BINARY).setPayload(payload);}  }
class C{  public Scroll scroll(){  return scroll;}  }
class C{  public void shutdown(){  logger.info("Shutting down scanner.");  executor.shutdown();}  }
class C{  public static void bind(Object object){  getBinderManager().bind(object);}  }
class C{  public static DLockGrantor waitForGrantor(DLockService svc) throws InterruptedException {  if (svc == null)   return null;  DLockGrantor oldGrantor=null;  DLockGrantor grantor=getGrantorForService(svc);  do {    if (grantor == null || grantor.isDestroyed())     return null;    grantor.waitWhileInitializing();    if (svc.isDestroyed())     return null;    if (!svc.isCurrentlyOrIsMakingLockGrantor())     return null;    if (!grantor.isReady())     return null;    oldGrantor=grantor;    grantor=getGrantorForService(svc);  } while (oldGrantor != grantor);  return grantor;}  }
class C{  public void initOptions(){  if (ApplicationSettings.MINIMIZE_TO_TRAY.getValue()) {    if (OSUtils.supportsTray() && !ResourceManager.instance().isTrayIconAvailable()) {    } else {      minimizeToTray.setSelected(true);    }  } else {    shutdownImmediately.setSelected(true);  }  _checkBoxShowHideExitDialog.setSelected(ApplicationSettings.SHOW_HIDE_EXIT_DIALOG.getValue());}  }
class C{  public boolean isDomainCrosshairVisible(){  return this.domainCrosshairVisible;}  }
class C{  public RestartableSet(ValueMap.Builder out){  this.out=out;}  }
class C{  public void clear(){  statements.clear();}  }
class C{  static void scheduleAt(Activity a,long startTime){  getInstance()._schedule(a,startTime);}  }
class C{  public CompValidateChecker warn(ICalProperty property,Integer... codes){  propertyWarnings.put(property,codes);  return this;}  }
class C{  @Override public void refreshing(){  mActionBarHeaderPullingProgressLayout.setVisibility(View.INVISIBLE);  mActionBarHeaderRefreshingProgressBar.setVisibility(View.VISIBLE);}  }
class C{  public static int hex(String hex){  if (hex.charAt(0) == HEX_PREFIX)   hex=hex.substring(1);  if (hex.length() > 6) {    int rgb=Integer.parseInt(hex.substring(2),16);    int alpha=Integer.parseInt(hex.substring(0,2),16);    return ColorLib.setAlpha(rgb,alpha);  } else {    return setAlpha(Integer.parseInt(hex,16),255);  }}  }
class C{  @SuppressWarnings("unchecked") protected ElementCanvas<SelectableMultiPoint> createCanvas(int width,int height){  canvas=new SelectablePointCanvas();  canvas.setSize(width,height);  kdtreeDecorator=new KDTreeDecorator(new NopDrawer(),canvas,model);  DrawingDecorator chain=new RectangleDecorator(kdtreeDecorator,canvas,model);  canvas.setDrawer(chain);  canvas.setModel(model);  MouseHandler<SelectableMultiPoint> mh=new MouseHandler<SelectableMultiPoint>(this,canvas,this,model);  canvas.addMouseMotionListener((java.awt.event.MouseMotionListener)mh);  canvas.addMouseListener(mh);  return canvas;}  }
class C{  public float[] toArray(float[] result,int offset){  if (result == null || result.length - offset < 3) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Vec3","toArray","missingResult"));  }  result[offset++]=(float)this.x;  result[offset++]=(float)this.y;  result[offset]=(float)this.z;  return result;}  }
class C{  public boolean closeIt(){  log.info("closeIt - " + toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_CLOSE);  if (m_processMsg != null)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_CLOSE);  if (m_processMsg != null)   return false;  return true;}  }
class C{  private static Object callAttributeMethodOnJavaCompiler(JavaCompiler compiler,Todo arg){  if (attributeMethod == null) {    try {      attributeMethod=JavaCompiler.class.getDeclaredMethod("attribute",java.util.Queue.class);    } catch (    NoSuchMethodException e) {      try {        attributeMethod=JavaCompiler.class.getDeclaredMethod("attribute",com.sun.tools.javac.util.ListBuffer.class);      } catch (      NoSuchMethodException e2) {        throw Lombok.sneakyThrow(e2);      }    }  }  try {    return attributeMethod.invoke(compiler,arg);  } catch (  Exception e) {    if (e instanceof InvocationTargetException)     throw Lombok.sneakyThrow(e.getCause());    throw Lombok.sneakyThrow(e);  }}  }
class C{  public static Set<AnnotationMirror> findEffectiveAnnotations(final QualifierHierarchy qualifierHierarchy,final AnnotatedTypeMirror toSearch){  AnnotatedTypeMirror source=toSearch;  TypeKind kind=source.getKind();  while (kind == TypeKind.TYPEVAR || kind == TypeKind.WILDCARD || kind == TypeKind.INTERSECTION) {switch (source.getKind()) {case TYPEVAR:      source=((AnnotatedTypeVariable)source).getUpperBound();    break;case WILDCARD:  source=((AnnotatedWildcardType)source).getExtendsBound();break;case INTERSECTION:final Set<AnnotationMirror> glb=glbOfBounds((AnnotatedIntersectionType)source,qualifierHierarchy);return glb;default :ErrorReporter.errorAbort("Unexpected AnnotatedTypeMirror with no primary annotation!" + "toSearch=" + toSearch + "source="+ source);}kind=source.getKind();}return source.getAnnotations();}  }
class C{  public TableIterator(Table table,IntIterator rows){  m_table=table;  m_rows=rows;  m_modCount=table.getModificationCount();}  }
class C{  public void put(ServletRequest request,T value,Map<String,Object> expandContext){  AttributeAccessor<T> aa=new AttributeAccessor<T>(name,expandContext,this.attributeName,this.fma,this.needsExpand);  aa.put(request,value);}  }
class C{  public static Paint newGuidelinePaint(){  final Paint paint=new Paint();  paint.setColor(Color.parseColor(SEMI_TRANSPARENT));  paint.setStrokeWidth(DEFAULT_GUIDELINE_THICKNESS_PX);  return paint;}  }
class C{  public LinkedList<Patch> patch_make(String text1,LinkedList<Diff> diffs){  if (text1 == null || diffs == null) {    throw new IllegalArgumentException("Null inputs. (patch_make)");  }  LinkedList<Patch> patches=new LinkedList<Patch>();  if (diffs.isEmpty()) {    return patches;  }  Patch patch=new Patch();  int char_count1=0;  int char_count2=0;  String prepatch_text=text1;  String postpatch_text=text1;  for (  Diff aDiff : diffs) {    if (patch.diffs.isEmpty() && aDiff.operation != Operation.EQUAL) {      patch.start1=char_count1;      patch.start2=char_count2;    }switch (aDiff.operation) {case INSERT:      patch.diffs.add(aDiff);    patch.length2+=aDiff.text.length();  postpatch_text=postpatch_text.substring(0,char_count2) + aDiff.text + postpatch_text.substring(char_count2);break;case DELETE:patch.length1+=aDiff.text.length();patch.diffs.add(aDiff);postpatch_text=postpatch_text.substring(0,char_count2) + postpatch_text.substring(char_count2 + aDiff.text.length());break;case EQUAL:if (aDiff.text.length() <= 2 * Patch_Margin && !patch.diffs.isEmpty() && aDiff != diffs.getLast()) {patch.diffs.add(aDiff);patch.length1+=aDiff.text.length();patch.length2+=aDiff.text.length();}if (aDiff.text.length() >= 2 * Patch_Margin) {if (!patch.diffs.isEmpty()) {patch_addContext(patch,prepatch_text);patches.add(patch);patch=new Patch();prepatch_text=postpatch_text;char_count1=char_count2;}}break;}if (aDiff.operation != Operation.INSERT) {char_count1+=aDiff.text.length();}if (aDiff.operation != Operation.DELETE) {char_count2+=aDiff.text.length();}}if (!patch.diffs.isEmpty()) {patch_addContext(patch,prepatch_text);patches.add(patch);}return patches;}  }
class C{  @Override public void handleStart(Operation start){  ServiceUtils.logInfo(this,"Starting service %s",getSelfLink());  State startState=start.getBody(State.class);  InitializationUtils.initialize(startState);  validateState(startState);  if (TaskState.TaskStage.CREATED == startState.taskState.stage) {    startState.taskState.stage=TaskState.TaskStage.STARTED;  }  if (startState.documentExpirationTimeMicros <= 0) {    startState.documentExpirationTimeMicros=ServiceUtils.computeExpirationTime(ServiceUtils.DEFAULT_DOC_EXPIRATION_TIME_MICROS);  }  start.setBody(startState).complete();  try {    if (ControlFlags.isOperationProcessingDisabled(startState.controlFlags)) {      ServiceUtils.logInfo(this,"Skipping start operation processing (disabled)");    } else     if (TaskState.TaskStage.STARTED == startState.taskState.stage) {      sendStageProgressPatch(startState.taskState.stage);    }  } catch (  Throwable t) {    failTask(t);  }}  }
class C{  public Failure(Description description,Throwable thrownException){  this.fThrownException=thrownException;  this.fDescription=description;}  }
class C{  public static int arrayBaseOffset(Class cls){  return UNSAFE.arrayBaseOffset(cls);}  }
class C{  private void dump(DBTransaction transaction) throws Exception {  final String query="insert into items(datewhen, charname, slotname, itemid, itemname, amount) values(?, ?, ?, ?, ?, ?)";  date=new java.sql.Date(new java.util.Date().getTime());  for (  final RPObject object : new CharacterIterator(transaction,false)) {    if (object == null) {      continue;    }    DBTransaction writeTransaction=TransactionPool.get().beginWork();    try {      PreparedStatement ps=writeTransaction.prepareStatement(query,null);      final String name=object.get("name");      final int id=object.getInt("#db_id");      System.out.println(id + " " + name);      for (      final RPSlot slot : object.slots()) {        final String slotName=slot.getName();        for (        final RPObject item : slot) {          if (item.has("type") && item.get("type").equals("item")) {            logItem(ps,name,slotName,item);          }        }      }      ps.close();      TransactionPool.get().commit(writeTransaction);    } catch (    Exception e) {      logger.error(e,e);      TransactionPool.get().rollback(writeTransaction);    }  }}  }
class C{  public static Resources openLayered(String resource) throws IOException {  return openLayered(resource,-1);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Label buildLabel(){  final Label label=createLabel();  label.setImmediate(false);  label.setWidth("-1px");  label.setHeight("-1px");  return label;}  }
class C{  public static ConditionOperand CARRY_FROM_ADD(){  return new ConditionOperand(CARRY_FROM_ADD);}  }
class C{  public void addCountryListener(CountryListener listener,Looper looper){synchronized (mListeners) {    if (!mListeners.containsKey(listener)) {      ListenerTransport transport=new ListenerTransport(listener,looper);      try {        mService.addCountryListener(transport);        mListeners.put(listener,transport);      } catch (      RemoteException e) {        Log.e(TAG,"addCountryListener: RemoteException",e);      }    }  }}  }
class C{  public static CommandContext requireExitStatus(int status){  return builder().requireExitStatus(status).build();}  }
class C{  public boolean isSERVER_STATUS_IN_TRANS(){  return this.isServerFlagSet(MySQLConstants.SERVER_STATUS_IN_TRANS);}  }
class C{  public void expand(Component body){  if (autoClose) {    for (    Component cc : this) {      AccordionContent c=(AccordionContent)cc;      c.openClose(body == c.body);    }  } else {    for (    Component cc : this) {      AccordionContent c=(AccordionContent)cc;      if (body == c.body) {        c.openClose(true);      }    }  }}  }
class C{  public GitlabGroup createGroup(String name,String path) throws IOException {  return createGroup(name,path,null,null,null);}  }
class C{  public String toString(){  return str;}  }
class C{  public void addBitmapToMemoryCache(String key,Bitmap bitmap){  cache.put(key,bitmap);}  }
class C{  public TriGParser(ValueFactory valueFactory){  super(valueFactory);}  }
class C{  public Solution(INode initial,INode goal){  this(initial,goal,null);}  }
class C{  static public double factorial(int k){  if (k < 0)   throw new IllegalArgumentException();  int length1=longFactorials.length;  if (k < length1)   return longFactorials[k];  int length2=doubleFactorials.length;  if (k < length1 + length2)   return doubleFactorials[k - length1]; else   return Double.POSITIVE_INFINITY;}  }
class C{  public Drawable colorDrawableWrap(Drawable drawable,ColorStateList colorStates){  if (drawable != null) {    drawable=DrawableCompat.wrap(drawable);    DrawableCompat.setTintList(drawable,colorStates);    DrawableCompat.setTintMode(drawable,PorterDuff.Mode.SRC_ATOP);    drawable=DrawableCompat.unwrap(drawable);    return drawable;  }  return null;}  }
class C{  public synchronized IUser editUserName(final IUser user,final String userName) throws CouldntSaveDataException {  Preconditions.checkNotNull(user,"IE02723: user argument can not be null");  Preconditions.checkNotNull(userName,"IE02724: userName argument can not be null");  if (!users.contains(user)) {    throw new IllegalStateException("IE02725: User is not known to the user management.");  }  if (containsUserName(userName)) {    throw new IllegalStateException("IE02726: User name is already in use by another user.");  }  final IUser newUser=provider.editUserName(user,userName);  for (  final IUserManagerListener listener : listeners) {    try {      listener.editedUser(newUser);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }  return newUser;}  }
class C{  public boolean isSingleton_1(){  return singleton_1;}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.MODEL;}  }
class C{  public static File createJar(JarEntry... entries) throws IOException {  Validate.notNull(entries);  Validate.noNullElements(entries);  File tempFile=File.createTempFile(TestUtils.class.getSimpleName(),".jar");  tempFile.deleteOnExit();  try (FileOutputStream fos=new FileOutputStream(tempFile);JarArchiveOutputStream jaos=new JarArchiveOutputStream(fos)){    writeJarEntry(jaos,MANIFEST_PATH,MANIFEST_TEXT.getBytes(Charsets.UTF_8));    for (    JarEntry entry : entries) {      writeJarEntry(jaos,entry.name,entry.data);    }  }   return tempFile;}  }
class C{  public void mapDatasetToAxis(int index,int axisIndex){  List axisIndices=new java.util.ArrayList(1);  axisIndices.add(new Integer(axisIndex));  mapDatasetToAxes(index,axisIndices);}  }
class C{  public static void clear(){  if (sInstance == null)   return;  sInstance.clearNotification();}  }
class C{  public static SymbolTable initialSymtab(ValueFactory imageFactory,SymbolTable defaultSystemSymtab,SymbolTable... imports){  if (imports == null || imports.length == 0) {    return defaultSystemSymtab;  }  if (imports.length == 1 && imports[0].isSystemTable()) {    return imports[0];  }  return LocalSymbolTable.makeNewLocalSymbolTable(imageFactory,defaultSystemSymtab,null,imports);}  }
class C{  public static final String parseInputStreamToString(InputStream stream) throws IOException {  return parseInputStreamToString(stream,false);}  }
class C{  public BasicBalloonAttributes(BalloonAttributes attributes){  if (attributes == null) {    String message=Logging.getMessage("nullValue.AttributesIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.copy(attributes);}  }
class C{  public static void stashApplicationRepositories(String classpath){  if (DBG_APP_CL) {    VM.sysWriteln("RVMClassLoader.stashApplicationRepositories: " + "applicationRepositories = ",classpath);  }  if (appCL != null && !classpath.equals(applicationRepositories)) {    appCL=null;    if (DBG_APP_CL) {      VM.sysWriteln("RVMClassLoader.stashApplicationRepositories: Wiping out my remembered appCL.");    }  }  applicationRepositories=classpath;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:42.973 -0500",hash_original_method="1F5F04F240A97C1BD6CC299225911198",hash_generated_method="E5E8D44B72D0A011B16DAFF2C1C0710B") public static void dumpHprofDataDdms(){  VMDebug.dumpHprofDataDdms();}  }
class C{  protected LigatureSubstFormat1(RandomAccessFile raf,int offset) throws IOException {  coverageOffset=raf.readUnsignedShort();  ligSetCount=raf.readUnsignedShort();  ligatureSetOffsets=new int[ligSetCount];  ligatureSets=new LigatureSet[ligSetCount];  for (int i=0; i < ligSetCount; i++) {    ligatureSetOffsets[i]=raf.readUnsignedShort();  }  raf.seek(offset + coverageOffset);  coverage=Coverage.read(raf);  for (int i=0; i < ligSetCount; i++) {    ligatureSets[i]=new LigatureSet(raf,offset + ligatureSetOffsets[i]);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:07.040 -0500",hash_original_method="CB3C7AA59A60FE20BA988C0CAC39DBAA",hash_generated_method="8542731C5595BA0410D5197C4DB68A0C") public CertificateRequest(byte[] certificate_types,X509Certificate[] accepted){  if (accepted == null) {    fatalAlert(AlertProtocol.INTERNAL_ERROR,"CertificateRequest: array of certificate authority certificates is null");  }  this.certificate_types=certificate_types;  int totalPrincipalsLength=0;  certificate_authorities=new X500Principal[accepted.length];  encoded_principals=new byte[accepted.length][];  for (int i=0; i < accepted.length; i++) {    certificate_authorities[i]=accepted[i].getIssuerX500Principal();    encoded_principals[i]=certificate_authorities[i].getEncoded();    totalPrincipalsLength+=encoded_principals[i].length + 2;  }  length=3 + certificate_types.length + totalPrincipalsLength;}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.TARGET;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:49.690 -0500",hash_original_method="DD1F10463F473A3E036D58A6099CEA6B",hash_generated_method="7069691769D07F3822B320ECD25C6539") public void clear(){  headers.clear();}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("MonitorTestTarg");  targetClass=bpe.location().declaringType();  mainThread=bpe.thread();  int initialSize=mainThread.frames().size();  if (vm().canRequestMonitorEvents()) {    contendedEnterRequest=eventRequestManager().createMonitorContendedEnterRequest();    contendedEnterRequest.setSuspendPolicy(EventRequest.SUSPEND_NONE);    contendedEnterRequest.enable();    contendedEnteredRequest=eventRequestManager().createMonitorContendedEnteredRequest();    contendedEnteredRequest.setSuspendPolicy(EventRequest.SUSPEND_NONE);    contendedEnteredRequest.enable();    monitorWaitRequest=eventRequestManager().createMonitorWaitRequest();    monitorWaitRequest.setSuspendPolicy(EventRequest.SUSPEND_NONE);    monitorWaitRequest.enable();    monitorWaitedRequest=eventRequestManager().createMonitorWaitedRequest();    monitorWaitedRequest.setSuspendPolicy(EventRequest.SUSPEND_NONE);    monitorWaitedRequest.enable();  } else {    System.out.println("request monitor events not supported ");  }  resumeTo("MonitorTestTarg","foo","()V");  listenUntilVMDisconnect();  if (vm().canRequestMonitorEvents()) {    if (actualContendedEnterCount == 0) {      failure("Did not receive any  contended enter event.");    }    if (actualContendedEnteredCount == 0) {      failure("Did not receive any contended entered event. ");    }    if (actualWaitCount == 0) {      failure("Did not receive any contended monitor wait event");    }    if (actualWaitedCount == 0) {      failure("Did not receive any contended monitor waited event");    }  }  if (!testFailed) {    println("MonitorEventTest: passed");  } else {    throw new Exception("MonitorEventTest: failed");  }}  }
class C{  private void writeNumericalColumn(NumericColumn numCol,JsonWriter writer) throws IOException {  if (numCol.getLow() != null) {    writer.name(RANGE);    writer.beginObject();    writer.name(LOW).value(numCol.getLow());    writer.name(HIGH).value(numCol.getHigh());    writer.endObject();  }}  }
class C{  protected void checkChiSquareValue(int[] counts,int totalCount){  int expectedTotalCount=0;  for (  int count : counts) {    expectedTotalCount+=count;  }  assertEquals("Total counts is incorrect",totalCount,expectedTotalCount);  if (expectedTotalCount == 0) {    return;  }  double expectedValue=(double)totalCount / (double)counts.length;  double chiSquared=0.0;  for (  int count : counts) {    chiSquared+=Math.pow((count - expectedValue),2) / expectedValue;  }  int degreesOfFreedom=counts.length - 1;  double threshold;  if (degreesOfFreedom < upperTailChiSquared95Table.length) {    threshold=upperTailChiSquared95Table[degreesOfFreedom];  } else {    double x_p=1.64;    threshold=degreesOfFreedom + Math.sqrt(2 * degreesOfFreedom) * x_p + (2.0 / 3.0) * Math.pow(x_p,2) - (2.0 / 3.0);  }  if (chiSquared >= threshold) {    fail(String.format("Chi-square value above 95 percent " + "threshold: %1$f, limit: %2$f, nu: %3$d",chiSquared,threshold,degreesOfFreedom));  }}  }
class C{  @Override public String toString(){  return super.toString();}  }
class C{  private final void freeNode(int node){  assert (node != NULL_NODE);  assert (0 < m_nodeCount);  m_parent[node]=m_freeList != NULL_NODE ? m_freeList : NULL_NODE;  m_height[node]=-1;  m_freeList=node;  m_nodeCount--;}  }
class C{  @Override public boolean keyDown(int keycode){  if (keycode == Keys.SPACE) {    randomKick();  }  return true;}  }
class C{  private long generateInitialValue(){  long result;  LOCK.lock();  try {    do {      result=RAND.nextLong() & MASK;    } while (result > MAX_INITIAL);  }  finally {    LOCK.unlock();  }  return result;}  }
class C{  public void put(int key,E value){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=new WeakReference(value);  } else {    i=~i;    if (i < mSize && (mValues[i] == DELETED || mValues[i].get() == null)) {      mKeys[i]=key;      mValues[i]=new WeakReference(value);      return;    }    if (mSize >= mKeys.length && (mGarbage || hasReclaimedRefs())) {      gc();      i=~binarySearch(mKeys,0,mSize,key);    }    if (mSize >= mKeys.length) {      int n=ArrayUtils.idealIntArraySize(mSize + 1);      int[] nkeys=new int[n];      WeakReference<?>[] nvalues=new WeakReference[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=new WeakReference(value);    mSize++;  }}  }
class C{  public JsonArray add(boolean value){  values.add(valueOf(value));  return this;}  }
class C{  @Override public Long sort(final byte[] key,final SortingParams sortingParameters,final byte[] dstkey){  checkIsInMultiOrPipeline();  client.sort(key,sortingParameters,dstkey);  return client.getIntegerReply();}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length == 0 || (args.length % 2) != 0) {    System.out.println("Usage: generator [-options]\n" + "    -full <true|false>     True if we should build the whole LAF or false for building just states and painters.\n" + "    -skinFile <value>      Path to the skin.laf file for the LAF to be generated from.\n"+ "    -buildDir <value>      The directory beneath which the build-controlled artifacts (such as the Painters) should\n"+ "                           be placed. This is the root directory beneath which the necessary packages and source\n"+ "                           files will be created.\n"+ "    -resourcesDir <value>  The resources directory containing templates and images.\n"+ "    -packagePrefix <value> The package name associated with this synth look and feel. For example,\n"+ "                           \"org.mypackage.mylaf\"\n"+ "    -lafName <value>       The name of the laf, such as \"MyLAF\".\n");  } else {    boolean full=false;    File skinFile=new File(System.getProperty("user.dir"));    File buildDir=new File(System.getProperty("user.dir"));    File resourcesDir=new File(System.getProperty("user.dir"));    String packagePrefix="org.mypackage.mylaf";    String lafName="MyLAF";    for (int i=0; i < args.length; i+=2) {      String key=args[i].trim().toLowerCase();      String value=args[i + 1].trim();      if ("-full".equals(key)) {        full=Boolean.parseBoolean(value);      } else       if ("-skinfile".equals(key)) {        skinFile=new File(value);      } else       if ("-builddir".equals(key)) {        buildDir=new File(value);      } else       if ("-resourcesdir".equals(key)) {        resourcesDir=new File(value);      } else       if ("-packageprefix".equals(key)) {        packagePrefix=value;      } else       if ("-lafname".equals(key)) {        lafName=value;      }    }    System.out.println("### GENERATING LAF CODE ################################");    System.out.println("   full          :" + full);    System.out.println("   skinFile      :" + skinFile.getAbsolutePath());    System.out.println("   buildDir      :" + buildDir.getAbsolutePath());    System.out.println("   resourcesDir  :" + resourcesDir.getAbsolutePath());    System.out.println("   packagePrefix :" + packagePrefix);    System.out.println("   lafName       :" + lafName);    JAXBContext ctx=JAXBContext.newInstance("build.tools.generatenimbus");    Unmarshaller u=ctx.createUnmarshaller();    SynthModel model=(SynthModel)u.unmarshal(skinFile);    Generator.init(full,buildDir,packagePrefix,lafName,model);    Generator.getInstance().generate();  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  protected static String decode(final String encodedValue){  return UriUtils.decode(encodedValue);}  }
class C{  @Override public void start(){  mIsRunning=true;  final long lastFrameRemainder=mNativeInfoHandle.restoreRemainder();  startAnimation(lastFrameRemainder);}  }
class C{  public CActionHelp(final JFrame parent){  super("Help Contents");  m_parent=Preconditions.checkNotNull(parent,"IE02864: parent argument can not be null");  putValue(MNEMONIC_KEY,KeyEvent.VK_H);  putValue(ACCELERATOR_KEY,HotKeys.HELP_HK.getKeyStroke());}  }
class C{  public boolean isFailed(){  return failed;}  }
class C{  public static QueryColumn toQueryColumn(Object o,PageContext pc) throws PageException {  if (o instanceof QueryColumn)   return (QueryColumn)o;  if (o instanceof String) {    o=VariableInterpreter.getVariableAsCollection(pc,(String)o);    if (o instanceof QueryColumn)     return (QueryColumn)o;  }  throw new CasterException(o,"querycolumn");}  }
class C{  private void parseMenu(XmlPullParser parser,AttributeSet attrs,Menu menu) throws XmlPullParserException, IOException {  MenuState menuState=new MenuState(menu);  int eventType=parser.getEventType();  String tagName;  boolean lookingForEndOfUnknownTag=false;  String unknownTagName=null;  do {    if (eventType == XmlPullParser.START_TAG) {      tagName=parser.getName();      if (tagName.equals(XML_MENU)) {        eventType=parser.next();        break;      }      throw new RuntimeException("Expecting menu, got " + tagName);    }    eventType=parser.next();  } while (eventType != XmlPullParser.END_DOCUMENT);  boolean reachedEndOfMenu=false;  while (!reachedEndOfMenu) {switch (eventType) {case XmlPullParser.START_TAG:      if (lookingForEndOfUnknownTag) {        break;      }    tagName=parser.getName();  if (tagName.equals(XML_GROUP)) {    menuState.readGroup(attrs);  } else   if (tagName.equals(XML_ITEM)) {    menuState.readItem(attrs);  } else   if (tagName.equals(XML_MENU)) {    SubMenu subMenu=menuState.addSubMenuItem();    parseMenu(parser,attrs,subMenu);  } else {    lookingForEndOfUnknownTag=true;    unknownTagName=tagName;  }break;case XmlPullParser.END_TAG:tagName=parser.getName();if (lookingForEndOfUnknownTag && tagName.equals(unknownTagName)) {lookingForEndOfUnknownTag=false;unknownTagName=null;} else if (tagName.equals(XML_GROUP)) {menuState.resetGroup();} else if (tagName.equals(XML_ITEM)) {if (!menuState.hasAddedItem()) {if (menuState.itemActionProvider != null && menuState.itemActionProvider.hasSubMenu()) {  menuState.addSubMenuItem();} else {  menuState.addItem();}}} else if (tagName.equals(XML_MENU)) {reachedEndOfMenu=true;}break;case XmlPullParser.END_DOCUMENT:throw new RuntimeException("Unexpected end of document");}eventType=parser.next();}}  }
class C{  public void export(String s){  String json=JsonWriter.indent("\t").string().value(toJSON()).done();  try {    File dir=new File(ToastBootstrap.toastHome,"system/profiler");    dir.mkdirs();    File exp=new File(dir,name + ".json");    if (s == null) {      if (exp.exists()) {        File last=new File(dir.getAbsoluteFile(),name + "_old.json");        if (last.exists())         last.delete();        exp.renameTo(last);        exp=new File(dir,name + ".json");      }    } else {      exp=new File(dir,name + "-" + s+ ".json");      if (exp.exists())       exp.delete();    }    FileWriter writer=new FileWriter(exp);    writer.write(json);    writer.close();  } catch (  Exception e) {    log.error("Exception whilst exporting profiler log: " + e);    log.exception(e);  }}  }
class C{  public CUfunction(){}  }
class C{  public boolean isNotApproved(){  return STATUS_NotApproved.equals(m_status);}  }
class C{  public static void logOnLevel(Logger logger,final Level level){  logger.setLevel(level);  for (  Handler handler : logger.getHandlers()) {    handler.setLevel(level);    if (handler instanceof ConsoleHandler) {      handler.setFormatter(new ShortFormatter());    }  }}  }
class C{  public int updateFrom(Configuration delta){  int changed=0;  if (delta.fontScale > 0 && fontScale != delta.fontScale) {    changed|=ActivityInfo.CONFIG_FONT_SCALE;    fontScale=delta.fontScale;  }  if (delta.mcc != 0 && mcc != delta.mcc) {    changed|=ActivityInfo.CONFIG_MCC;    mcc=delta.mcc;  }  if (delta.mnc != 0 && mnc != delta.mnc) {    changed|=ActivityInfo.CONFIG_MNC;    mnc=delta.mnc;  }  if (delta.locale != null && (locale == null || !locale.equals(delta.locale))) {    changed|=ActivityInfo.CONFIG_LOCALE;    locale=delta.locale != null ? (Locale)delta.locale.clone() : null;    changed|=ActivityInfo.CONFIG_LAYOUT_DIRECTION;    setLayoutDirection(locale);  }  if (delta.userSetLocale && (!userSetLocale || ((changed & ActivityInfo.CONFIG_LOCALE) != 0))) {    userSetLocale=true;    changed|=ActivityInfo.CONFIG_LOCALE;  }  if (delta.touchscreen != TOUCHSCREEN_UNDEFINED && touchscreen != delta.touchscreen) {    changed|=ActivityInfo.CONFIG_TOUCHSCREEN;    touchscreen=delta.touchscreen;  }  if (delta.keyboard != KEYBOARD_UNDEFINED && keyboard != delta.keyboard) {    changed|=ActivityInfo.CONFIG_KEYBOARD;    keyboard=delta.keyboard;  }  if (delta.keyboardHidden != KEYBOARDHIDDEN_UNDEFINED && keyboardHidden != delta.keyboardHidden) {    changed|=ActivityInfo.CONFIG_KEYBOARD_HIDDEN;    keyboardHidden=delta.keyboardHidden;  }  if (delta.hardKeyboardHidden != HARDKEYBOARDHIDDEN_UNDEFINED && hardKeyboardHidden != delta.hardKeyboardHidden) {    changed|=ActivityInfo.CONFIG_KEYBOARD_HIDDEN;    hardKeyboardHidden=delta.hardKeyboardHidden;  }  if (delta.navigation != NAVIGATION_UNDEFINED && navigation != delta.navigation) {    changed|=ActivityInfo.CONFIG_NAVIGATION;    navigation=delta.navigation;  }  if (delta.navigationHidden != NAVIGATIONHIDDEN_UNDEFINED && navigationHidden != delta.navigationHidden) {    changed|=ActivityInfo.CONFIG_KEYBOARD_HIDDEN;    navigationHidden=delta.navigationHidden;  }  if (delta.orientation != ORIENTATION_UNDEFINED && orientation != delta.orientation) {    changed|=ActivityInfo.CONFIG_ORIENTATION;    orientation=delta.orientation;  }  if (getScreenLayoutNoDirection(delta.screenLayout) != (SCREENLAYOUT_SIZE_UNDEFINED | SCREENLAYOUT_LONG_UNDEFINED) && (getScreenLayoutNoDirection(screenLayout) != getScreenLayoutNoDirection(delta.screenLayout))) {    changed|=ActivityInfo.CONFIG_SCREEN_LAYOUT;    if ((delta.screenLayout & SCREENLAYOUT_LAYOUTDIR_MASK) == 0) {      screenLayout=(screenLayout & SCREENLAYOUT_LAYOUTDIR_MASK) | delta.screenLayout;    } else {      screenLayout=delta.screenLayout;    }  }  if (delta.uiMode != (UI_MODE_TYPE_UNDEFINED | UI_MODE_NIGHT_UNDEFINED) && uiMode != delta.uiMode) {    changed|=ActivityInfo.CONFIG_UI_MODE;    if ((delta.uiMode & UI_MODE_TYPE_MASK) != UI_MODE_TYPE_UNDEFINED) {      uiMode=(uiMode & ~UI_MODE_TYPE_MASK) | (delta.uiMode & UI_MODE_TYPE_MASK);    }    if ((delta.uiMode & UI_MODE_NIGHT_MASK) != UI_MODE_NIGHT_UNDEFINED) {      uiMode=(uiMode & ~UI_MODE_NIGHT_MASK) | (delta.uiMode & UI_MODE_NIGHT_MASK);    }  }  if (delta.screenWidthDp != SCREEN_WIDTH_DP_UNDEFINED && screenWidthDp != delta.screenWidthDp) {    changed|=ActivityInfo.CONFIG_SCREEN_SIZE;    screenWidthDp=delta.screenWidthDp;  }  if (delta.screenHeightDp != SCREEN_HEIGHT_DP_UNDEFINED && screenHeightDp != delta.screenHeightDp) {    changed|=ActivityInfo.CONFIG_SCREEN_SIZE;    screenHeightDp=delta.screenHeightDp;  }  if (delta.smallestScreenWidthDp != SMALLEST_SCREEN_WIDTH_DP_UNDEFINED && smallestScreenWidthDp != delta.smallestScreenWidthDp) {    changed|=ActivityInfo.CONFIG_SMALLEST_SCREEN_SIZE;    smallestScreenWidthDp=delta.smallestScreenWidthDp;  }  if (delta.densityDpi != DENSITY_DPI_UNDEFINED && densityDpi != delta.densityDpi) {    changed|=ActivityInfo.CONFIG_DENSITY;    densityDpi=delta.densityDpi;  }  if (delta.compatScreenWidthDp != SCREEN_WIDTH_DP_UNDEFINED) {    compatScreenWidthDp=delta.compatScreenWidthDp;  }  if (delta.compatScreenHeightDp != SCREEN_HEIGHT_DP_UNDEFINED) {    compatScreenHeightDp=delta.compatScreenHeightDp;  }  if (delta.compatSmallestScreenWidthDp != SMALLEST_SCREEN_WIDTH_DP_UNDEFINED) {    compatSmallestScreenWidthDp=delta.compatSmallestScreenWidthDp;  }  if (delta.seq != 0) {    seq=delta.seq;  }  if (delta.customTheme != null && (customTheme == null || !customTheme.equals(delta.customTheme))) {    changed|=ActivityInfo.CONFIG_THEME_RESOURCE;    customTheme=(CustomTheme)delta.customTheme.clone();  }  return changed;}  }
class C{  public final AssertSubscriber<T> assertNotSubscribed(){  int s=subscriptionCount;  if (s == 1) {    throw new AssertionError("OnSubscribe called once",null);  }  if (s > 1) {    throw new AssertionError("OnSubscribe called multiple times: " + s,null);  }  return this;}  }
class C{  public void addAndActivateHDChain(DeterministicKeyChain chain){  log.info("Creating and activating a new HD chain: {}",chain);  for (  ListenerRegistration<KeyChainEventListener> registration : basic.getListeners())   chain.addEventListener(registration.listener,registration.executor);  if (lookaheadSize >= 0)   chain.setLookaheadSize(lookaheadSize);  if (lookaheadThreshold >= 0)   chain.setLookaheadThreshold(lookaheadThreshold);  chains.add(chain);}  }
class C{  public LanguagePanel(ActionListener actionListener){  setLayout(new BoxLayout(this,BoxLayout.X_AXIS));  this.actionListener=actionListener;  this.languageLabel=new JLabel();  languageOptions=new JComboBox<Object>();  Font font=new Font("Dialog",Font.PLAIN,11);  languageOptions.setFont(font);  Locale[] locales=LanguageUtils.getLocales(font);  languageOptions.setModel(new DefaultComboBoxModel<Object>(locales));  languageOptions.setRenderer(LanguageFlagFactory.getListRenderer());  Locale locale=guessLocale(locales);  languageOptions.setSelectedItem(locale);  applySettings(false);  languageOptions.addItemListener(new StateListener());  add(languageLabel);  add(Box.createHorizontalStrut(5));  add(languageOptions);}  }
class C{  @Override public void generate(final ITranslationEnvironment environment,final long baseOffset,final OperandSize operandSize,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  long offset=baseOffset;  final int previousInstructions=(int)(baseOffset % 0x100);  final OperandSize archSize=environment.getArchitectureSize();  final OperandSize resultSize=TranslationHelpers.getNextSize(operandSize);  String maskedEax=null;  final String ediChange=String.valueOf(operandSize.getByteSize());  final String mask=String.valueOf(TranslationHelpers.getAllBitsMask(operandSize));  final String truncateMask=String.valueOf(TranslationHelpers.getAllBitsMask(archSize));  final String result=environment.getNextVariableString();  instructions.add(ReilHelpers.createLdm(offset++,archSize,"edi",operandSize,result));  if (operandSize != archSize) {    maskedEax=environment.getNextVariableString();    instructions.add(ReilHelpers.createAnd(offset++,archSize,"eax",archSize,mask,archSize,maskedEax));  } else {    maskedEax="eax";  }  final String addResult=environment.getNextVariableString();  final String subResult=environment.getNextVariableString();  final String jmpGoal=String.format("%d.%d",ReilHelpers.toNativeAddress(new CAddress(baseOffset)).toLong(),previousInstructions + 5 + (operandSize != archSize ? 1 : 0));  instructions.add(ReilHelpers.createJcc(offset++,OperandSize.BYTE,Helpers.DIRECTION_FLAG,OperandSize.ADDRESS,jmpGoal));  instructions.add(ReilHelpers.createAdd(offset++,archSize,"edi",archSize,ediChange,resultSize,addResult));  instructions.add(ReilHelpers.createAnd(offset++,resultSize,addResult,resultSize,truncateMask,resultSize,"edi"));  final String jmpGoal2=String.format("%d.%d",ReilHelpers.toNativeAddress(new CAddress(baseOffset)).toLong(),previousInstructions + 7 + (operandSize != archSize ? 1 : 0));  instructions.add(ReilHelpers.createJcc(offset++,OperandSize.BYTE,"1",OperandSize.ADDRESS,jmpGoal2));  instructions.add(ReilHelpers.createSub(offset++,archSize,"edi",archSize,ediChange,resultSize,subResult));  instructions.add(ReilHelpers.createAnd(offset++,resultSize,subResult,resultSize,truncateMask,resultSize,"edi"));  instructions.add(ReilHelpers.createNop(offset++));  Helpers.generateSub(environment,offset++,operandSize,maskedEax,result,instructions);}  }
class C{  public boolean isFromCache(){  return isFromCache;}  }
class C{  public static void main(String[] args){  Locale.setDefault(Locale.US);  PositionPanel panel=new PositionPanel();  panel.setPosition(50.5f,-30.9f);  int res=JOptionPane.showConfirmDialog(null,panel,"Specify a Position",JOptionPane.OK_CANCEL_OPTION);  if (res == JOptionPane.OK_OPTION) {    System.out.println(panel.getLat());    System.out.println(panel.getLon());  }}  }
class C{  public Comparator<? super K> keyComparator(){  return keyComparator;}  }
class C{  public RequestPrepare(final Deserializer deserializer){  this.data=deserializer.readBytes("data");}  }
class C{  public static <ValueT>ByteBuffer toByteBuffer(ValueT obj) throws IOException {  byte[] bytes=null;  ByteArrayOutputStream bos=null;  ObjectOutputStream oos=null;  try {    bos=new ByteArrayOutputStream();    oos=new ObjectOutputStream(bos);    oos.writeObject(obj);    oos.flush();    bytes=bos.toByteArray();  }  finally {    if (oos != null) {      oos.close();    }    if (bos != null) {      bos.close();    }  }  return ByteBuffer.wrap(bytes);}  }
class C{  public static SemPmWrapper serializableInstance(){  return new SemPmWrapper(Dag.serializableInstance());}  }
class C{  public PacketOutputStream writeLong(final long theLong){  assureBufferCapacity(8);  buffer.putLong(theLong);  return this;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FssFileInfo[");  buffer.append("m_ext = ").append(m_ext);  buffer.append(", m_extId1 = ").append(m_extId1);  buffer.append(", m_extId2 = ").append(m_extId2);  buffer.append(", m_extId3 = ").append(m_extId3);  buffer.append(", m_extId4 = ").append(m_extId4);  buffer.append(", m_flags = ").append(m_flags);  buffer.append("]");  return buffer.toString();}  }
class C{  public void handleEvent(Event evt){  Object[] defs=docRemovedListener.defsToBeRemoved.toArray();  docRemovedListener.defsToBeRemoved.clear();  for (int i=0; i < defs.length; i++) {    XBLOMDefinitionElement def=(XBLOMDefinitionElement)defs[i];    if (def.getAttributeNS(null,XBL_REF_ATTRIBUTE).length() == 0) {      DefinitionRecord defRec=(DefinitionRecord)definitions.get(def,null);      removeDefinition(defRec);    } else {      removeDefinitionRef(def);    }  }  Object[] imps=docRemovedListener.importsToBeRemoved.toArray();  docRemovedListener.importsToBeRemoved.clear();  for (int i=0; i < imps.length; i++) {    removeImport((Element)imps[i]);  }  Object[] nodes=docRemovedListener.nodesToBeInvalidated.toArray();  docRemovedListener.nodesToBeInvalidated.clear();  for (int i=0; i < nodes.length; i++) {    invalidateChildNodes((Node)nodes[i]);  }}  }
class C{  public void testAddressDefault() throws Exception {  check(new OdbcConfiguration(),true);}  }
class C{  public static String trimLeadingCharacter(String str,char leadingCharacter){  if (!hasLength(str)) {    return str;  }  StringBuilder sb=new StringBuilder(str);  while (sb.length() > 0 && sb.charAt(0) == leadingCharacter) {    sb.deleteCharAt(0);  }  return sb.toString();}  }
class C{  public static String generateFilename(String template,TvShow tvShow,MediaFile mf){  return generateName(template,tvShow,mf,true);}  }
class C{  public static void logVersionInfo(){  Log.i(TAG,"vendor  : " + GLES20.glGetString(GLES20.GL_VENDOR));  Log.i(TAG,"renderer: " + GLES20.glGetString(GLES20.GL_RENDERER));  Log.i(TAG,"version : " + GLES20.glGetString(GLES20.GL_VERSION));  if (false) {    int[] values=new int[1];    GLES30.glGetIntegerv(GLES30.GL_MAJOR_VERSION,values,0);    int majorVersion=values[0];    GLES30.glGetIntegerv(GLES30.GL_MINOR_VERSION,values,0);    int minorVersion=values[0];    if (GLES30.glGetError() == GLES30.GL_NO_ERROR) {      Log.i(TAG,"iversion: " + majorVersion + "."+ minorVersion);    }  }}  }
class C{  public Item(String objectName,boolean isDir) throws XmlPullParserException {  super();  this.name="Item";  this.objectName=objectName;  this.isDir=isDir;}  }
class C{  private void commandMyEmotes(){  Set<Integer> emotesets=getSpecialUser().getEmoteSet();  if (emotesets.isEmpty()) {    g.printLine("No subscriber emotes found. (Only works if you joined" + " any channel before.)");  } else {    StringBuilder b=new StringBuilder("Your subemotes: ");    String sep="";    for (    Integer emoteset : emotesets) {      b.append(sep);      if (Emoticons.isTurboEmoteset(emoteset)) {        b.append("Turbo/Prime emotes");      } else {        String sep2="";        for (        Emoticon emote : g.emoticons.getEmoticons(emoteset)) {          b.append(sep2);          b.append(emote.code);          sep2=", ";        }      }      sep=" / ";    }    g.printLine(b.toString());  }}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName() == MapBean.LayersProperty) {    listenToLayers((Layer[])evt.getNewValue());  }}  }
class C{  public Iterator contextTypes(){  return fContextTypes.values().iterator();}  }
class C{  public String text(){  return text;}  }
class C{  public static boolean isAMixin(@NotNull PsiClass psiClass){  return !(psiClass.isInterface() || isAConcern(psiClass) || isASideEffect(psiClass));}  }
class C{  public static void formatTooltip(JComponent jcomponent){  String tip=jcomponent.getToolTipText();  if (tip == null || tip.length() == 0)   return;  if (tip.toLowerCase().indexOf("<html>") > -1)   return;  tip=StringUtil.wrap(tip,50);  tip=StringUtil.replaceAll(tip,"\n","<p>");  tip="<html>" + tip + "</html>";  jcomponent.setToolTipText(tip);}  }
class C{  public <T extends Comparable<T>>void sortR(List<T> list){  sort(list,getReverse(defaultComp));}  }
class C{  public NewArrayExpr newNewArrayExpr(Type type,Value size){  return new JNewArrayExpr(type,size);}  }
class C{  public static LongArrayBitVector ofLength(final long length){  return new LongArrayBitVector(length).length(length);}  }
class C{  public ActiveSyncContext(SyncOperation syncOperation,long historyRowId,int syncAdapterUid){  super();  mSyncAdapterUid=syncAdapterUid;  mSyncOperation=syncOperation;  mHistoryRowId=historyRowId;  mSyncAdapter=null;  mStartTime=SystemClock.elapsedRealtime();  mTimeoutStartTime=mStartTime;  mSyncWakeLock=mSyncHandler.getSyncWakeLock(mSyncOperation.account,mSyncOperation.authority);  mSyncWakeLock.setWorkSource(new WorkSource(syncAdapterUid));  mSyncWakeLock.acquire();}  }
class C{  @Override public boolean matches(O object,QueryOptions queryOptions){  return !negatedQuery.matches(object,queryOptions);}  }
class C{  public Builder alternateIntents(final Boolean alternateIntents){  this.alternateIntents=alternateIntents;  return this;}  }
class C{  public void insert(Blorp item,int position){  if (sentinel.next == null || position == 0) {    insertFront(item);    return;  }  Node currentNode=sentinel.next.next;  while (position > 1 && currentNode.next != null) {    position-=1;    currentNode=currentNode.next;  }  Node newNode=new Node(item,currentNode.next);  currentNode.next=newNode;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public Iterator<Map.Entry<K,V>> iterator(){  return inner.iterator();}  }
class C{  public static String encodeWorkspaceLocation(IProject project){  return getStringVariableManager().generateVariableExpression(WORKSPACE_LOC_VARIABLE,project.getFullPath().toString());}  }
class C{  public static SipResponse create200OkReInviteResponse(SipDialogPath dialog,SipRequest request) throws PayloadException {  try {    Response response=SipUtils.MSG_FACTORY.createResponse(200,request.getStackMessage());    response.addHeader(dialog.getSipStack().getContact());    response.addHeader(SipUtils.buildServerHeader());    Header requireHeader=SipUtils.HEADER_FACTORY.createHeader(RequireHeader.NAME,"timer");    response.addHeader(requireHeader);    Header sessionExpiresHeader=request.getHeader(SipUtils.HEADER_SESSION_EXPIRES);    if (sessionExpiresHeader != null) {      response.addHeader(sessionExpiresHeader);    }    SipResponse resp=new SipResponse(response);    resp.setStackTransaction(request.getStackTransaction());    return resp;  } catch (  ParseException e) {    throw new PayloadException("Can't create response for re-invite!",e);  }}  }
class C{  public static DoubleMatrix1D plusMult(DoubleMatrix1D A,DoubleMatrix1D B,double s){  return A.assign(B,F.plusMult(s));}  }
class C{  public boolean deleteEntries(boolean force){  getEntries(true);  for (  MPPForecastRunResult entry : m_entries) {    entry.delete(force);  }  boolean ok=getEntries(true).size() == 0;  if (ok)   m_entries=null;  return ok;}  }
class C{  public void clearViewCSS(){  defaultView=null;  if (cssEngine != null) {    cssEngine.dispose();  }  cssEngine=null;}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public TextSpanLayout createTextLayout(AttributedCharacterIterator aci,int[] charMap,Point2D offset,FontRenderContext frc){  return new GlyphLayout(aci,charMap,offset,frc);}  }
class C{  public TernaryInstruction(OperationTypes op,byte in1,byte in2,byte in3,byte out,long outputDim1,long outputDim2,String istr){  super(null,out);  mrtype=MRINSTRUCTION_TYPE.Ternary;  _op=op;  input1=in1;  input2=in2;  input3=in3;  _outputDim1=outputDim1;  _outputDim2=outputDim2;  instString=istr;}  }
class C{  public static org.oscm.internal.vo.VOSubscription convertToUp(org.oscm.vo.VOSubscription oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOSubscription newVO=new org.oscm.internal.vo.VOSubscription();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setServiceId(oldVO.getServiceId());  newVO.setServiceKey(oldVO.getServiceKey());  newVO.setActivationDate(oldVO.getActivationDate());  newVO.setCreationDate(oldVO.getCreationDate());  newVO.setDeactivationDate(oldVO.getDeactivationDate());  newVO.setServiceAccessInfo(oldVO.getServiceAccessInfo());  newVO.setServiceAccessType(EnumConverter.convert(oldVO.getServiceAccessType(),org.oscm.internal.types.enumtypes.ServiceAccessType.class));  newVO.setServiceBaseURL(oldVO.getServiceBaseURL());  newVO.setServiceLoginPath(oldVO.getServiceLoginPath());  newVO.setStatus(EnumConverter.convert(oldVO.getStatus(),org.oscm.internal.types.enumtypes.SubscriptionStatus.class));  newVO.setServiceInstanceId(oldVO.getServiceInstanceId());  newVO.setTimeoutMailSent(oldVO.isTimeoutMailSent());  newVO.setPurchaseOrderNumber(oldVO.getPurchaseOrderNumber());  newVO.setSubscriptionId(oldVO.getSubscriptionId());  newVO.setProvisioningProgress(oldVO.getProvisioningProgress());  newVO.setNumberOfAssignedUsers(oldVO.getNumberOfAssignedUsers());  newVO.setSellerName(oldVO.getSellerName());  newVO.setTechnicalServiceOperations(convertToUpVOTechnicalServiceOperation(oldVO.getTechnicalServiceOperations()));  newVO.setOwnerId(oldVO.getOwnerId());  newVO.setUnitKey(oldVO.getUnitKey());  newVO.setUnitName(oldVO.getUnitName());  return newVO;}  }
class C{  public void testSimpleValidString() throws Exception {  JsonFactory jsonF=new JsonFactory();  DataFormatDetector detector=new DataFormatDetector(jsonF);  final String JSON="\"JSON!\"";  DataFormatMatcher matcher=detector.findFormat(new ByteArrayInputStream(JSON.getBytes("UTF-8")));  assertTrue(matcher.hasMatch());  assertEquals("JSON",matcher.getMatchedFormatName());  assertSame(jsonF,matcher.getMatch());  assertEquals(MatchStrength.WEAK_MATCH,matcher.getMatchStrength());  JsonParser jp=matcher.createParserWithMatch();  assertToken(JsonToken.VALUE_STRING,jp.nextToken());  assertEquals("JSON!",jp.getText());  assertNull(jp.nextToken());  jp.close();}  }
class C{  @Override public ServiceRefAmp bind(ServiceRefAmp service,String address){  if (log.isLoggable(Level.FINEST)) {    log.finest(L.l("bind {0} for {1} in {2}",address,service.api().getType(),this));  }  address=toCanonical(address);  registry().bind(address,service);  return service;}  }
class C{  public static boolean referenceEquals(Object x,Object y){  return x == y;}  }
class C{  public boolean shouldSendVolumeKeys(BluetoothDevice device){  if (isEnabled() && isValidDevice(device)) {    ParcelUuid[] uuids=device.getUuids();    if (uuids == null)     return false;    for (    ParcelUuid uuid : uuids) {      if (BluetoothUuid.isAvrcpTarget(uuid)) {        return true;      }    }  }  return false;}  }
class C{  public void remove(Component component){  int index=indexOfComponent(component);  if (index != -1) {    removeTabAt(index);  } else {    Component children[]=getComponents();    for (int i=0; i < children.length; i++) {      if (component == children[i]) {        super.remove(i);        break;      }    }  }}  }
class C{  public static double SEWDfitness(boolean useTrainingData,GEPIndividual ind){  GEPDependentVariable dv;  if (useTrainingData)   dv=GEPDependentVariable.trainingData; else   dv=GEPDependentVariable.testingData;  int numValues=dv.getDependentVariableValues().length;  int numDepVars=((GEPSpecies)ind.species).numberOfChromosomes;  double[][] dataMatrixInTheNewSpace=new double[numValues][numDepVars];  for (int i=0; i < numValues; i++)   for (int j=0; j < numDepVars; j++)   dataMatrixInTheNewSpace[i][j]=ind.eval(j,useTrainingData,i);  double[] xmiss=new double[1];  xmiss[0]=-999;  double error=sammon_error(dataMatrixInTheNewSpace,xmiss);  return (1000.0) / (1.0 + error);}  }
class C{  @Override public String globalInfo(){  return "Carries out one split of a repeated k-fold cross-validation, " + "using the set SplitEvaluator to generate some results. " + "Note that the run number is actually the nth split of a repeated "+ "k-fold cross-validation, i.e. if k=10, run number 100 is the 10th "+ "fold of the 10th cross-validation run. This producer's sole purpose "+ "is to allow more fine-grained distribution of cross-validation "+ "experiments. If the class attribute is nominal, the dataset is stratified.";}  }
class C{  public UsedClass methodInC8(UsedClass p){  return p;}  }
class C{  @SuppressWarnings("unchecked") public <T>void queryByConstraint(Constraint constraint,QueryResultList<T> result,URI startId,int maxCount) throws Exception {  ConstraintDescriptor constrainDescriptor=constraint.toConstraintDescriptor();  WebResource rRoot=createRequest(GEOVISIBLE_URI + "constraint/" + result.getClass().getName());  if (startId != null) {    rRoot=rRoot.queryParam("start_id",startId.toString());  }  if (maxCount > 0) {    rRoot=rRoot.queryParam("max_count",Integer.toString(maxCount));  }  rRoot.accept(MediaType.APPLICATION_OCTET_STREAM);  ClientResponse resp=addSignature(rRoot).post(ClientResponse.class,constrainDescriptor);  InputStream input=resp.getEntityInputStream();  ObjectInputStream objInputStream=new ObjectInputStream(input);  ResourcesResponse<?> resources=(ResourcesResponse<?>)objInputStream.readObject();  List<Object> queryResult=(List<Object>)resources.getObjects();  List<T> ret=new ArrayList<T>();  for (  Object obj : queryResult) {    ret.add((T)obj);  }  result.setResult(ret.iterator());}  }
class C{  public MonotoneSolver(final ILatticeGraph<GraphNode> graph,final Lattice lattice,final IStateVector<GraphNode,LatticeElement> startVector,final ITransformationProvider<GraphNode,LatticeElement> transformationProvider,final IGraphWalker<GraphNode,ObjectType> walker){  if (graph == null) {    throw new IllegalArgumentException("Error: Graph argument can not be null");  }  if (lattice == null) {    throw new IllegalArgumentException("Error: Lattice argument can not be null");  }  if (startVector == null) {    throw new IllegalArgumentException("Error: Start vector argument can not be null");  }  if (transformationProvider == null) {    throw new IllegalArgumentException("Error: Transformation list argument can not be null");  }  final List<GraphNode> nodes=graph.getNodes();  if (nodes.size() != startVector.size()) {    throw new IllegalArgumentException(String.format("Error: Invalid start vector (%d states for %d nodes)",startVector.size(),nodes.size()));  }  for (  final GraphNode node : nodes) {    if (!startVector.hasState(node)) {      throw new IllegalArgumentException("Error: Node " + node + " does not have a state in the initial state vector");    }  }  this.graph=graph;  this.lattice=lattice;  this.state=startVector;  this.transformationList=transformationProvider;  this.walker=walker;}  }
class C{  @Override public Iterator<Example> iterator(){  return new AttributesExampleReader(parent.iterator(),this);}  }
class C{  public HasDataSourceSupportValidator(ConfigurationType type){  super(type,DatasourcePropertySet.DATASOURCE);}  }
class C{  public void editButtonActionPerformed(){  nodeAddress=readNodeAddress();  if (nodeAddress < 0) {    return;  }  curNode=(SerialNode)SerialTrafficController.instance().getNodeFromAddress(nodeAddress);  if (curNode == null) {    statusText1.setText(rb.getString("Error4"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return;  }  nodeAddrStatic.setText(Integer.toString(nodeAddress));  nodeAddrField.setVisible(false);  nodeAddrStatic.setVisible(true);  nodeType=curNode.getNodeType();  nodeTypeBox.setSelectedIndex(nodeType);  editMode=true;  addButton.setVisible(false);  editButton.setVisible(false);  deleteButton.setVisible(false);  doneButton.setVisible(false);  updateButton.setVisible(true);  cancelButton.setVisible(true);  statusText1.setText(editStatus1);  statusText2.setText(editStatus2);  statusText3.setText(editStatus3);}  }
class C{  public static String printLine(String[] values,CSVStrategy strategy){  StringWriter stringWriter=new StringWriter();  CSVPrinter csvPrinter=new CSVPrinter(stringWriter,strategy);  for (int i=0; i < values.length; i++) {    if (values[i] == null) {      values[i]="null";    } else     if (values[i].equals("null")) {      values[i]="\"null\"";    }  }  try {    csvPrinter.println(values);  } catch (  IOException e) {  }  return stringWriter.toString().trim();}  }
class C{  public void print(PrintStream out){  if (isPublic()) {    out.print("public ");  }  if (isPrivate()) {    out.print("private ");  }  if (isProtected()) {    out.print("protected ");  }  if (isFinal()) {    out.print("final ");  }  if (isStatic()) {    out.print("static ");  }  if (isSynchronized()) {    out.print("synchronized ");  }  if (isAbstract()) {    out.print("abstract ");  }  if (isNative()) {    out.print("native ");  }  if (isVolatile()) {    out.print("volatile ");  }  if (isTransient()) {    out.print("transient ");  }  out.println(toString() + ";");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:09.272 -0500",hash_original_method="D2BFC1F98E74B177BF943E41A8084666",hash_generated_method="C92E9FC3016310B3D6E79D111F411533") public static EGL wrap(EGL egl,int configFlags,Writer log){  if (log != null) {    egl=new EGLLogWrapper(egl,configFlags,log);  }  return egl;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  protected DBMSEvent extractEventStatementLevel(String firstData) throws InterruptedException, ExtractorException {  boolean doCommit;  boolean first=true;  if (!initialized)   throw new ExtractorException("Extractor not initialized");  ArrayList<DBMSData> trx=new ArrayList<DBMSData>(128);  while (true) {    DBMSEvent dbmsEvent=null;    String queryString;    if (first)     queryString=firstData; else     queryString=getNextOp();    first=false;    if (queryString.compareTo("COMMIT") == 0) {      doCommit=true;    } else {      doCommit=false;    }    if (queryString.indexOf("truncate") == 0 || queryString.indexOf("TRUNCATE") == 0) {      trx.add(new StatementData(queryString));      doCommit=true;    }    if (doCommit) {      dbmsEvent=new DBMSEvent(lastEventID,trx,new Timestamp(System.currentTimeMillis()));    } else {      trx.add(new StatementData(queryString));    }    if (dbmsEvent != null) {      return dbmsEvent;    }  }}  }
class C{  public static int ERESTART(){  return 85;}  }
class C{  public NotificationChain basicSetDeclaredTypeRef(TypeRef newDeclaredTypeRef,NotificationChain msgs){  TypeRef oldDeclaredTypeRef=declaredTypeRef;  declaredTypeRef=newDeclaredTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.FORMAL_PARAMETER__DECLARED_TYPE_REF,oldDeclaredTypeRef,newDeclaredTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  protected void closeAllOpenResults() throws SQLException {  MySQLConnection locallyScopedConn=this.connection;  if (locallyScopedConn == null) {    return;  }synchronized (locallyScopedConn.getConnectionMutex()) {    if (this.openResults != null) {      for (      ResultSetInternalMethods element : this.openResults) {        try {          element.realClose(false);        } catch (        SQLException sqlEx) {          AssertionFailedException.shouldNotHappen(sqlEx);        }      }      this.openResults.clear();    }  }}  }
class C{  public int numIslands(char[][] grid){  int count=0;  for (int i=0; i < grid.length; i++) {    for (int j=0; j < grid[i].length; j++) {      if (grid[i][j] == '0') {        continue;      }      bfs(grid,i,j);      count++;    }  }  return count;}  }
class C{  protected boolean saveKeyStoreAs(KeyStoreHistory history){  File saveFile=null;  try {    KeyStoreState currentState=history.getCurrentState();    Password password=currentState.getPassword();    if (password == null) {      SetPasswordAction setPasswordAction=new SetPasswordAction(kseFrame);      if (setPasswordAction.setKeyStorePassword()) {        currentState=history.getCurrentState();        password=currentState.getPassword();      } else {        return false;      }    }    JFileChooser chooser=FileChooserFactory.getKeyStoreFileChooser();    chooser.setCurrentDirectory(CurrentDirectory.get());    chooser.setDialogTitle(res.getString("SaveAsAction.SaveKeyStoreAs.Title"));    chooser.setMultiSelectionEnabled(false);    int rtnValue=chooser.showSaveDialog(frame);    if (rtnValue != JFileChooser.APPROVE_OPTION) {      return false;    }    saveFile=chooser.getSelectedFile();    CurrentDirectory.updateForFile(saveFile);    if (saveFile.isFile()) {      String message=MessageFormat.format(res.getString("SaveAsAction.OverWriteFile.message"),saveFile);      int selected=JOptionPane.showConfirmDialog(frame,message,res.getString("SaveAsAction.SaveKeyStoreAs.Title"),JOptionPane.YES_NO_OPTION);      if (selected != JOptionPane.YES_OPTION) {        return false;      }    }    if (isKeyStoreFileOpen(saveFile)) {      JOptionPane.showMessageDialog(frame,res.getString("SaveAsAction.NoSaveKeyStoreAlreadyOpen.message"),res.getString("SaveAsAction.SaveKeyStoreAs.Title"),JOptionPane.WARNING_MESSAGE);      return false;    }    KeyStoreUtil.save(currentState.getKeyStore(),saveFile,password);    currentState.setPassword(password);    history.setFile(saveFile);    currentState.setAsSavedState();    kseFrame.updateControls(false);    kseFrame.addRecentFile(saveFile);    return true;  } catch (  FileNotFoundException ex) {    JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString("SaveAsAction.NoWriteFile.message"),saveFile),res.getString("SaveAsAction.SaveKeyStoreAs.Title"),JOptionPane.WARNING_MESSAGE);    return false;  }catch (  Exception ex) {    DError.displayError(frame,ex);    return false;  }}  }
class C{  public void paintViewportBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static boolean isWritable(Path path){  return isAccessible(path,AccessMode.WRITE);}  }
class C{  public static int EAFNOSUPPORT(){  return Errno.EAFNOSUPPORT.intValue();}  }
class C{  protected void checkBox(int row,int column,int height,int width){  if (column < 0 || width < 0 || column + width > columns || row < 0 || height < 0 || row + height > rows)   throw new IndexOutOfBoundsException(toStringShort() + ", column:" + column+ ", row:"+ row+ " ,width:"+ width+ ", height:"+ height);}  }
class C{  public final void popPredicateRoot(){  m_predicateRoots.popQuick();}  }
class C{  public static String toString(JSONArray names,JSONArray ja) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  StringBuffer sb=new StringBuffer();  for (int i=0; i < ja.length(); i+=1) {    JSONObject jo=ja.optJSONObject(i);    if (jo != null) {      sb.append(rowToString(jo.toJSONArray(names)));    }  }  return sb.toString();}  }
class C{  private void resetCurrentSegment(){  Segment lastSegment=lastSegment();  if (lastSegment != null) {    currentSegment=lastSegment;  } else {    SegmentDescriptor descriptor=SegmentDescriptor.builder().withId(1).withVersion(1).withIndex(1).withMaxSegmentSize(storage.maxSegmentSize()).withMaxEntries(storage.maxEntriesPerSegment()).build();    descriptor.lock();    currentSegment=createSegment(descriptor);    segments.put(1L,currentSegment);  }}  }
class C{  public int swap(){  if (!mEgl.eglSwapBuffers(mEglDisplay,mEglSurface)) {    return mEgl.eglGetError();  }  return EGL10.EGL_SUCCESS;}  }
class C{  public boolean readBit(){  return readBits(1) == 1;}  }
class C{  public void testMergeScheduler() throws Exception {  String algLines[]={"# ----- properties ","content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource","docs.file=" + getReuters20LinesFile(),"content.source.log.step=3","doc.term.vector=false","content.source.forever=false","directory=RAMDirectory","merge.scheduler=" + MyMergeScheduler.class.getName(),"doc.stored=false","doc.tokenized=false","debug.level=1","# ----- alg ","{ \"Rounds\"","  ResetSystemErase","  CreateIndex","  { \"AddDocs\"  AddDoc > : * ","} : 2"};  Benchmark benchmark=execBenchmark(algLines);  assertTrue("did not use the specified MergeScheduler",((MyMergeScheduler)benchmark.getRunData().getIndexWriter().getConfig().getMergeScheduler()).called);  benchmark.getRunData().getIndexWriter().close();  IndexReader ir=DirectoryReader.open(benchmark.getRunData().getDirectory());  int ndocsExpected=20;  assertEquals("wrong number of docs in the index!",ndocsExpected,ir.numDocs());  ir.close();}  }
class C{  public void selectNone(){  selectionModel.clear();  repaint();}  }
class C{  public CategoryTick(Comparable category,TextBlock label,TextBlockAnchor labelAnchor,TextAnchor rotationAnchor,double angle){  super("",TextAnchor.CENTER,rotationAnchor,angle);  this.category=category;  this.label=label;  this.labelAnchor=labelAnchor;}  }
class C{  @SuppressWarnings("rawtypes") public synchronized Object handleData(Map data){  return (handleData(data,defaultAction));}  }
class C{  @Override public void updateNClob(int columnIndex,NClob x) throws SQLException {  throw unsupported("NClob");}  }
class C{  private void addIdentitySequence(AISBuilder builder,String schemaName,String tableName,String column,boolean defaultIdentity,Sequence sequence){  TableName sequenceName=nameGenerator.generateIdentitySequenceName(builder.akibanInformationSchema(),new TableName(schemaName,tableName),column);  Sequence newSeq=builder.sequence(sequenceName.getSchemaName(),sequenceName.getTableName(),sequence.getStartsWith(),sequence.getIncrement(),sequence.getMinValue(),sequence.getMaxValue(),sequence.isCycle());  builder.columnAsIdentity(schemaName,tableName,column,sequenceName.getTableName(),defaultIdentity);  LOG.debug("Generated sequence: {}, with storage; {}",sequenceName,newSeq.getStorageNameString());}  }
class C{  public String toString(){  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw);  for (int i=0; i < labelCount; i++) {    pw.println(taxonList.getTaxon(i));  }  pw.println();  for (int i=0; i < splitCount; i++) {    for (int j=0; j < labelCount; j++) {      if (splits[i][j] == true)       pw.print('*'); else       pw.print('.');    }    pw.println();  }  return sw.toString();}  }
class C{  public static double distanceQuerySortKey(double radius){  if (radius >= haversinMeters(Double.MAX_VALUE)) {    return haversinMeters(Double.MAX_VALUE);  }  long lo=0;  long hi=Double.doubleToRawLongBits(Double.MAX_VALUE);  while (lo <= hi) {    long mid=(lo + hi) >>> 1;    double sortKey=Double.longBitsToDouble(mid);    double midRadius=haversinMeters(sortKey);    if (midRadius == radius) {      return sortKey;    } else     if (midRadius > radius) {      hi=mid - 1;    } else {      lo=mid + 1;    }  }  double ceil=Double.longBitsToDouble(lo);  assert haversinMeters(ceil) > radius;  return ceil;}  }
class C{  public Response deleteGroup(String groupName){  return restClient.delete("groups/" + groupName,new HashMap<String,String>());}  }
class C{  public static void main(final String[] args) throws Exception {  handleCommandLineArgs(args);  JOptionPane.showMessageDialog(null,new JLabel("<html>" + "This is the ReliefImageBreaker, it is no longer used. " + "<br>It will take any image and finalized map folder, and will create cut out images of the relief art "+ "<br>for each territory and sea zone."+ "<br><br>TripleA no longer uses these, and instead uses reliefTiles (use the TileImageBreaker for that)."+ "</html>"));  final FileSave locationSelection=new FileSave("Where to save Relief Images?",null,s_mapFolderLocation);  location=locationSelection.getPathString();  if (s_mapFolderLocation == null && locationSelection.getFile() != null) {    s_mapFolderLocation=locationSelection.getFile().getParentFile();  }  if (location == null) {    System.out.println("You need to select a folder to save the tiles in for this to work");    System.out.println("Shutting down");    System.exit(0);    return;  }  new ReliefImageBreaker().createMaps();}  }
class C{  public HammingWindow(int N){  super(N);  for (int i=0; i < N; i++) {    w[i]=(double)(0.54 + 0.46 * Math.cos(-Math.PI + i * 2 * Math.PI / (N - 1)));  }}  }
class C{  public MmsException(String message,Throwable cause){  super(message,cause);}  }
class C{  protected void afterDownstream(){}  }
class C{  @DSComment("View to hold data at cursor, no security concern") @DSSafe(DSCat.SAFE_OTHERS) @DSVerified @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:12.408 -0500",hash_original_method="E86C9DC4408CF260B8E6AACF31CF8025",hash_generated_method="CF872DAE47252191A5AA057CAEF11C5C") @Override public View newView(Context context,Cursor cursor,ViewGroup parent){  return mInflater.inflate(mLayout,parent,false);}  }
class C{  @Override public synchronized int read(){  return pos < count ? buf[pos++] & 0xFF : -1;}  }
class C{  protected <T>T doExecute(GuzzWriteCallback<T> action,boolean enforceNativeSession) throws DataAccessException {  Assert.notNull(action,"Callback object must not be null");  WriteTranSession session=this.currentSession(enforceNativeSession);  try {    T result=action.doWrite(session);    return result;  } catch (  DaoException ex) {    throw convertHibernateAccessException(ex);  }catch (  SQLException ex) {    throw convertJdbcAccessException(ex);  }catch (  RuntimeException ex) {    throw ex;  }}  }
class C{  private String connectionString(DTNHost h1,DTNHost h2){  if (h1.getAddress() < h2.getAddress()) {    return h1 + " <-> " + h2;  } else {    return h2 + " <-> " + h1;  }}  }
class C{  public static ByteBuffer decode(ByteBuffer buf,PDFObject params) throws PDFParseException {  ASCII85Decode me=new ASCII85Decode(buf);  return me.decode();}  }
class C{  public OffsetAttributeImpl(){}  }
class C{  public void redo(){  for (  final ISelectionHistoryListener listener : m_listeners) {    try {      listener.startedRedo();    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }  m_graph.selectNodes(m_graph.getSelectedNodes(),false);  m_graph.selectNodes(getUndoSnapshot(false).getSelection(),true);  for (  final ISelectionHistoryListener listener : m_listeners) {    try {      listener.finishedRedo();    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.LABELLED_STATEMENT__NAME:    setName(NAME_EDEFAULT);  return;case N4JSPackage.LABELLED_STATEMENT__STATEMENT:setStatement((Statement)null);return;}super.eUnset(featureID);}  }
class C{  @Override public boolean supportsTransactions(){  debugCodeCall("supportsTransactions");  return true;}  }
class C{  public Enumeration<Object> keys(){  return m_Methods.keys();}  }
class C{  public void redirect(String url) throws IOException {  endChangesIfNecessary();  ResponseWriter writer=getWrapped();  writer.startElement("redirect",null);  writer.writeAttribute("url",url,null);  writer.endElement("redirect");}  }
class C{  ObjectStreamField(Field field,boolean unshared,boolean showType){  this.field=field;  this.unshared=unshared;  name=field.getName();  Class<?> ftype=field.getType();  type=(showType || ftype.isPrimitive()) ? ftype : Object.class;  signature=getClassSignature(ftype).intern();}  }
class C{  public void mergeWithNewerEntries(final DiasporaPodList newPodList) throws JSONException {  if (isTrackMergeChanges()) {    trackAddedIndexStart=-1;    trackUpdatedIndexes.clear();  }  for (  DiasporaPod newPod : newPodList) {    int index=pods.indexOf(newPod);    if (index >= 0) {      DiasporaPod updatePodBak=new DiasporaPod().fromJson(pods.get(index).toJson());      DiasporaPod updatePod=pods.get(index);      updatePod.fromJson(newPod.toJson());      if (updatePodBak.getId() != 0 && updatePod.getId() == 0) {        updatePod.setId(updatePodBak.getId());      }      if (updatePodBak.getActive6() != 0 && updatePod.getActive6() == 0) {        updatePod.setActive6(updatePodBak.getActive6());      }      if (updatePodBak.getScore() != 0 && updatePod.getScore() == 0) {        updatePod.setScore(updatePodBak.getScore());      }      if (!updatePodBak.getName().equals("") && keepOldNameDuringMerge) {        updatePod.setName(updatePodBak.getName());      }      if (isTrackMergeChanges()) {        trackUpdatedIndexes.add(index);      }    } else {      pods.add(newPod);      if (isTrackMergeChanges() && trackAddedIndexStart == -1) {        trackAddedIndexStart=pods.size() - 1;      }    }  }}  }
class C{  public synchronized void copyFileData(JDBCSequentialFile fileFrom,JDBCSequentialFile fileTo) throws SQLException {  try {    connection.setAutoCommit(false);    copyFileRecord.setInt(1,fileFrom.getId());    copyFileRecord.setInt(2,fileTo.getId());    copyFileRecord.executeUpdate();    connection.commit();  } catch (  SQLException e) {    connection.rollback();    throw e;  }}  }
class C{  public final ArrayList<String> parseAdeExtArgs(String[] args) throws AdeException {  ArrayList<String> adeArgs;  adeArgs=new ArrayList<String>();  if (args.length == 0) {    usageError("Expecting at least one argument");    return new ArrayList<String>(0);  }  if (args.length > 3) {    usageError("Too many arguments");  }  if (args[0].equalsIgnoreCase("all")) {    adeArgs.add("-a");  } else {    adeArgs.add("-s");    adeArgs.add(args[0]);  }  final DateTimeFormatter outFormatter=DateTimeFormat.forPattern("MM/dd/yyyy HH:mm ZZZ").withOffsetParsed().withZoneUTC();  if (args.length > 2) {    final DateTimeFormatter formatter=DateTimeFormat.forPattern("MM/dd/yyyy").withOffsetParsed().withZoneUTC();    m_endDateTime=formatter.parseDateTime(args[2]);    adeArgs.add("-end-date");    m_endDateTime=m_endDateTime.withDurationAdded(Duration.standardDays(1),1);    adeArgs.add(m_endDateTime.toString(outFormatter));  } else {    m_endDateTime=null;  }  if (args.length > 1) {    final DateTimeFormatter formatter=DateTimeFormat.forPattern("MM/dd/yyyy").withOffsetParsed().withZoneUTC();    m_startDateTime=formatter.parseDateTime(args[1]);    adeArgs.add("-start-date");    adeArgs.add(m_startDateTime.toString(outFormatter));  } else {    m_startDateTime=null;  }  StringBuilder bldadeArgsString=new StringBuilder("");  for (  String arg : adeArgs) {    bldadeArgsString.append(arg + " ");  }  logger.trace("Arguments used to call TrainLog: " + bldadeArgsString.toString());  return adeArgs;}  }
class C{  public void gotoMarker(IMarker marker){  List<?> targetObjects=markerHelper.getTargetObjects(editingDomain,marker);  if (!targetObjects.isEmpty()) {    setSelectionToViewer(targetObjects);  }}  }
class C{  private static int find4DayBlockWithMostFVals(String FPLAN,String BITFELD){  Map<Integer,Integer> departuresPerBitfeld=new HashMap<>();  try {    BufferedReader readsLines=new BufferedReader(new InputStreamReader(new FileInputStream(FPLAN),"latin1"));    String newLine=readsLines.readLine();    int numberOfDepartures=0;    while (newLine != null) {      if (newLine.charAt(0) == '*') {        if (newLine.charAt(1) == 'Z') {          try {            numberOfDepartures=Integer.parseInt(newLine.substring(22,25)) + 1;          } catch (          Exception e) {            numberOfDepartures=1;          }        }        if (newLine.charAt(1) == 'A' && newLine.charAt(3) == 'V') {          if (newLine.substring(22,28).trim().length() > 0) {            int bitfeldNumber=Integer.parseInt(newLine.substring(22,28));            int bitfeldValue=numberOfDepartures;            if (departuresPerBitfeld.containsKey(bitfeldNumber)) {              bitfeldValue+=departuresPerBitfeld.get(bitfeldNumber);            }            departuresPerBitfeld.put(bitfeldNumber,bitfeldValue);          }        }      }      newLine=readsLines.readLine();    }    readsLines.close();  } catch (  IOException e) {    e.printStackTrace();  }  int[] bitfeldStats=new int[96];  try {    BufferedReader readsLines=new BufferedReader(new InputStreamReader(new FileInputStream(BITFELD),"latin1"));    String newLine=readsLines.readLine();    while (newLine != null) {      int bitFeldValue=1;      if (departuresPerBitfeld.containsKey(Integer.parseInt(newLine.substring(0,6)))) {        bitFeldValue=departuresPerBitfeld.get(Integer.parseInt(newLine.substring(0,6)));      }      String bitfeld=newLine.substring(7,103);      for (int i=0; i < bitfeld.length(); i++) {        if (bitfeld.charAt(i) == 'F') {          bitfeldStats[i]+=bitFeldValue;        }      }      newLine=readsLines.readLine();    }    readsLines.close();  } catch (  IOException e) {    e.printStackTrace();  }  int maxFNumber=0;  int posMaxFNumber=-1;  for (int i=0; i < bitfeldStats.length; i++) {    if (bitfeldStats[i] > maxFNumber) {      maxFNumber=bitfeldStats[i];      posMaxFNumber=i;    }  }  log.info("Selected HAFAS-4day-block: " + posMaxFNumber);  return posMaxFNumber;}  }
class C{  public boolean isNegated(){  return negated;}  }
class C{  public boolean isSendOrder(){  Object oo=get_Value(COLUMNNAME_SendOrder);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  try {    super.execute(mapping,form,request,response);    InstructorEditForm frm=(InstructorEditForm)form;    ActionMessages errors=new ActionMessages();    String instructorId=(request.getParameter("instructorId") == null) ? (request.getAttribute("instructorId") == null) ? null : request.getAttribute("instructorId").toString() : request.getParameter("instructorId");    sessionContext.checkPermission(instructorId,"DepartmentalInstructor",Right.InstructorDetail);    String op=frm.getOp();    if (request.getParameter("op2") != null && request.getParameter("op2").length() > 0)     op=request.getParameter("op2");    if (op == null)     throw new Exception("Null Operation not supported.");    if (op.equals(MSG.actionEditInstructor()) || op.equals(MSG.actionEditInstructorPreferences()) || op.equals(MSG.actionBackToInstructors())|| op.equals(MSG.actionDisplayInstructorPreferences())|| op.equals(MSG.actionNextInstructor())|| op.equals(MSG.actionPreviousInstructor())) {      instructorId=frm.getInstructorId();    } else {      frm.reset(mapping,request);    }    Debug.debug("op: " + op);    Debug.debug("instructor: " + instructorId);    if (instructorId == null || instructorId.trim() == "")     throw new Exception("Instructor Info not supplied.");    if (op.equals(MSG.actionBackToInstructors()) && instructorId != null && instructorId.trim() != "") {      response.sendRedirect(response.encodeURL("instructorList.do"));      return null;    }    DepartmentalInstructorDAO idao=new DepartmentalInstructorDAO();    DepartmentalInstructor inst=idao.get(new Long(instructorId));    LookupTables.setupInstructorDistribTypes(request,sessionContext,inst);    if (op.equals(MSG.actionEditInstructor()) && instructorId != null && instructorId.trim() != "") {      sessionContext.checkPermission(instructorId,"DepartmentalInstructor",Right.InstructorEdit);      response.sendRedirect(response.encodeURL("instructorInfoEdit.do?instructorId=" + instructorId));      return null;    }    if (op.equals(MSG.actionEditInstructorPreferences()) && instructorId != null && instructorId.trim() != "") {      sessionContext.checkPermission(instructorId,"DepartmentalInstructor",Right.InstructorPreferences);      response.sendRedirect(response.encodeURL("instructorPrefEdit.do?instructorId=" + instructorId));      return null;    }    if (op.equals(MSG.actionNextInstructor())) {      response.sendRedirect(response.encodeURL("instructorDetail.do?instructorId=" + frm.getNextId()));      return null;    }    if (op.equals(MSG.actionPreviousInstructor())) {      response.sendRedirect(response.encodeURL("instructorDetail.do?instructorId=" + frm.getPreviousId()));      return null;    }    doLoad(request,frm,inst,instructorId);    BackTracker.markForBack(request,"instructorDetail.do?instructorId=" + instructorId,MSG.backInstructor(frm.getName() == null ? "null" : frm.getName().trim()),true,false);    Set allClasses=new HashSet();    for (Iterator i=DepartmentalInstructor.getAllForInstructor(inst,inst.getDepartment().getSession().getUniqueId()).iterator(); i.hasNext(); ) {      DepartmentalInstructor di=(DepartmentalInstructor)i.next();      allClasses.addAll(di.getClasses());    }    if (!allClasses.isEmpty()) {      boolean hasTimetable=sessionContext.hasPermission(Right.ClassAssignments);      WebTable classTable=(hasTimetable ? new WebTable(9,null,new String[]{MSG.columnClass(),MSG.columnInstructorCheckConflicts(),MSG.columnInstructorShare(),MSG.columnLimit(),MSG.columnEnrollment(),MSG.columnManager(),MSG.columnAssignedTime(),MSG.columnAssignedDatePattern(),MSG.columnAssignedRoom()},new String[]{"left","left","left","left","left","left","left","left","left"},null) : new WebTable(5,null,new String[]{MSG.columnClass(),MSG.columnInstructorCheckConflicts(),MSG.columnInstructorShare(),MSG.columnLimit(),MSG.columnManager()},new String[]{"left","left","left","left","left"},null));      String backType=request.getParameter("backType");      String backId=request.getParameter("backId");      TreeSet classes=new TreeSet(new ClassInstructorComparator(new ClassComparator(ClassComparator.COMPARE_BY_LABEL)));      classes.addAll(allClasses);      Vector classIds=new Vector(classes.size());      for (Iterator iterInst=classes.iterator(); iterInst.hasNext(); ) {        ClassInstructor ci=(ClassInstructor)iterInst.next();        Class_ c=ci.getClassInstructing();        classIds.add(c.getUniqueId());        String limitString="";        if (!c.getSchedulingSubpart().getInstrOfferingConfig().isUnlimitedEnrollment().booleanValue()) {          if (c.getExpectedCapacity() != null) {            limitString=c.getExpectedCapacity().toString();            if (c.getMaxExpectedCapacity() != null && !c.getMaxExpectedCapacity().equals(c.getExpectedCapacity())) {              limitString=limitString + "-" + c.getMaxExpectedCapacity().toString();            }          } else {            limitString="0";            if (c.getMaxExpectedCapacity() != null && c.getMaxExpectedCapacity().intValue() != 0) {              limitString=limitString + "-" + c.getMaxExpectedCapacity().toString();            }          }        }        String enrollmentString="";        if (c.getEnrollment() != null) {          enrollmentString=c.getEnrollment().toString();        } else {          enrollmentString="0";        }        String managingDept=null;        if (c.getManagingDept() != null) {          Department d=c.getManagingDept();          managingDept=d.getManagingDeptAbbv();        }        String assignedTime="";        String assignedDate="";        String assignedRoom="";        ClassAssignmentDetails ca=ClassAssignmentDetails.createClassAssignmentDetails(sessionContext,courseTimetablingSolverService.getSolver(),c.getUniqueId(),false);        if (ca == null) {          try {            Assignment a=classAssignmentService.getAssignment().getAssignment(c);            if (a.getUniqueId() != null)             ca=ClassAssignmentDetails.createClassAssignmentDetailsFromAssignment(sessionContext,a.getUniqueId(),false);          } catch (          Exception e) {          }        }        if (ca != null) {          if (ca.getAssignedTime() != null) {            assignedTime=ca.getAssignedTime().toHtml(false,false,true,true);            assignedDate=ca.getAssignedTime().getDatePatternHtml();          }          if (ca.getAssignedRoom() != null) {            for (int i=0; i < ca.getAssignedRoom().length; i++) {              if (i > 0)               assignedRoom+=", ";              assignedRoom+=ca.getAssignedRoom()[i].toHtml(false,false,true);            }          }        }        String onClick=null;        if (sessionContext.hasPermission(c,Right.ClassDetail)) {          onClick="onClick=\"document.location='classDetail.do?cid=" + c.getUniqueId() + "';\"";        }        boolean back="PreferenceGroup".equals(backType) && c.getUniqueId().toString().equals(backId);        WebTableLine line=null;        if (hasTimetable) {          line=classTable.addLine(onClick,new String[]{(back ? "<A name=\"back\"></A>" : "") + c.getClassLabel(),(ci.isLead().booleanValue() ? "<IMG border='0' alt='true' align='absmiddle' src='images/accept.png'>" : ""),ci.getPercentShare() + "%",limitString,enrollmentString,managingDept,assignedTime,assignedDate,assignedRoom},null,null);        } else {          line=classTable.addLine(onClick,new String[]{(back ? "<A name=\"back\"></A>" : "") + c.getClassLabel(),(ci.isLead().booleanValue() ? "<IMG border='0' alt='true' align='absmiddle' src='images/accept.png'>" : ""),ci.getPercentShare() + "%",limitString,managingDept},null,null);        }        if (c.isCancelled()) {          line.setStyle("color: gray; font-style: italic;");          line.setTitle(MSG.classNoteCancelled(c.getClassLabel()));        }      }      Navigation.set(sessionContext,Navigation.sClassLevel,classIds);      String tblData=classTable.printTable();      request.setAttribute("classTable",tblData);    }    if (ApplicationProperty.RoomAvailabilityIncludeInstructors.isTrue() && inst.getExternalUniqueId() != null && !inst.getExternalUniqueId().isEmpty() && RoomAvailability.getInstance() != null && RoomAvailability.getInstance() instanceof DefaultRoomAvailabilityService) {      WebTable.setOrder(sessionContext,"instructorUnavailability.ord",request.getParameter("iuord"),1);      WebTable eventTable=new WebTable(5,"Instructor Unavailability","instructorDetail.do?instructorId=" + frm.getInstructorId() + "&iuord=%%",new String[]{"Event","Type","Date","Time","Room"},new String[]{"left","left","left","left","left"},null);      Formats.Format<Date> dfShort=Formats.getDateFormat(Formats.Pattern.DATE_EVENT_SHORT);      Formats.Format<Date> dfLong=Formats.getDateFormat(Formats.Pattern.DATE_EVENT_LONG);      org.hibernate.Session hibSession=EventDAO.getInstance().getSession();      Map<Event,Set<Meeting>> unavailabilities=new HashMap<Event,Set<Meeting>>();      for (      Meeting meeting : (List<Meeting>)hibSession.createQuery("select distinct m from Event e inner join e.meetings m left outer join e.additionalContacts c, Session s " + "where e.class in (CourseEvent, SpecialEvent, UnavailableEvent) and m.meetingDate >= s.eventBeginDate and m.meetingDate <= s.eventEndDate " + "and s.uniqueId = :sessionId and (e.mainContact.externalUniqueId = :user or c.externalUniqueId = :user) and m.approvalStatus = 1").setLong("sessionId",sessionContext.getUser().getCurrentAcademicSessionId()).setString("user",inst.getExternalUniqueId()).setCacheable(true).list()) {        Set<Meeting> meetings=unavailabilities.get(meeting.getEvent());        if (meetings == null) {          meetings=new HashSet<Meeting>();          unavailabilities.put(meeting.getEvent(),meetings);        }        meetings.add(meeting);      }      for (      Event event : new TreeSet<Event>(unavailabilities.keySet())) {        for (        MultiMeeting m : Event.getMultiMeetings(unavailabilities.get(event))) {          String date=m.getDays() + " " + (m.getMeetings().size() == 1 ? dfLong.format(m.getMeetings().first().getMeetingDate()) : dfShort.format(m.getMeetings().first().getMeetingDate()) + " - " + dfLong.format(m.getMeetings().last().getMeetingDate()));          String time=m.getMeetings().first().startTime() + " - " + m.getMeetings().first().stopTime();          String room=(m.getMeetings().first().getLocation() == null ? "" : m.getMeetings().first().getLocation().getLabelWithHint());          eventTable.addLine(sessionContext.hasPermission(event,Right.EventDetail) ? "onClick=\"showGwtDialog('Event Detail', 'gwt.jsp?page=events&menu=hide#event=" + event.getUniqueId() + "','900','85%');\"" : null,new String[]{event.getEventName(),event.getEventTypeAbbv(),date,time,room},new Comparable[]{event.getEventName(),event.getEventType(),m.getMeetings().first().getMeetingDate(),m.getMeetings().first().getStartPeriod(),room});        }      }      if (!eventTable.getLines().isEmpty())       request.setAttribute("eventTable",eventTable.printTable(WebTable.getOrder(sessionContext,"instructorUnavailability.ord")));    }    frm.setDisplayPrefs(CommonValues.Yes.eq(sessionContext.getUser().getProperty(UserProperty.DispInstructorPrefs)));    if (op.equals(MSG.actionDisplayInstructorPreferences()) || "true".equals(request.getParameter("showPrefs"))) {      frm.setDisplayPrefs(true);      sessionContext.getUser().setProperty(UserProperty.DispInstructorPrefs,CommonValues.Yes.value());    }    if (op.equals(MSG.actionHideInstructorPreferences()) || "false".equals(request.getParameter("showPrefs"))) {      frm.setDisplayPrefs(false);      sessionContext.getUser().setProperty(UserProperty.DispInstructorPrefs,CommonValues.No.value());    }    if (frm.isDisplayPrefs()) {      Set timePatterns=new HashSet();      frm.setAvailableTimePatterns(null);      initPrefs(frm,inst,null,false);      timePatterns.add(new TimePattern(new Long(-1)));      processPrefAction(request,frm,errors);      for (      Preference pref : inst.getPreferences()) {        if (pref instanceof TimePref) {          frm.setAvailability(((TimePref)pref).getPreference());          break;        }      }      LookupTables.setupRooms(request,inst);      LookupTables.setupBldgs(request,inst);      LookupTables.setupRoomFeatures(request,inst);      LookupTables.setupRoomGroups(request,inst);    }    DepartmentalInstructor previous=inst.getPreviousDepartmentalInstructor(sessionContext,Right.InstructorDetail);    frm.setPreviousId(previous == null ? null : previous.getUniqueId().toString());    DepartmentalInstructor next=inst.getNextDepartmentalInstructor(sessionContext,Right.InstructorDetail);    frm.setNextId(next == null ? null : next.getUniqueId().toString());    return mapping.findForward("showInstructorDetail");  } catch (  Exception e) {    Debug.error(e);    throw e;  }}  }
class C{  @OnClick(R.id.fast_forward) public void onFastForwardClicked(View v){  if (ListType.ItemsAll.TYPE_SONG.equals(currentNowPlayingItemType)) {    Player.GoTo action=new Player.GoTo(currentActivePlayerId,Player.GoTo.NEXT);    action.execute(hostManager.getConnection(),defaultActionCallback,callbackHandler);  } else {    Player.SetSpeed action=new Player.SetSpeed(currentActivePlayerId,GlobalType.IncrementDecrement.INCREMENT);    action.execute(hostManager.getConnection(),defaultPlaySpeedChangedCallback,callbackHandler);  }}  }
class C{  static String _targetSoFile(String libName,int version){  Context context=mContext;  if (null == context) {    return "";  }  String path="/data/data/" + context.getPackageName() + "/files";  File f=context.getFilesDir();  if (f != null) {    path=f.getPath();  }  return path + "/lib" + libName+ "bk"+ version+ ".so";}  }
class C{  private ApplicationAddVolumeList addVolumesToApplication(VolumeGroupVolumeList volumeList,VolumeGroup application){  List<URI> addVolumeURIs=volumeList.getVolumes();  String groupName=volumeList.getReplicationGroupName();  Set<URI> allVolumes=RPHelper.getReplicationSetVolumes(addVolumeURIs,_dbClient);  Map<String,Boolean> checkedRGMap=new HashMap<String,Boolean>();  for (  URI volumeUri : allVolumes) {    Volume volume=_dbClient.queryObject(Volume.class,volumeUri);    if (volume == null || volume.getInactive()) {      throw APIException.badRequests.volumeCantBeAddedToVolumeGroup(volumeUri.toString(),"Volume has been deleted");    }    BlockServiceUtils.validateVolumeNoReplica(volume,application,_dbClient);    boolean vplex=RPHelper.isVPlexVolume(volume,_dbClient);    if (vplex) {      Volume backendVol=VPlexUtil.getVPLEXBackendVolume(volume,true,_dbClient);      if (backendVol == null || backendVol.getInactive()) {        throw APIException.badRequests.volumeCantBeAddedToVolumeGroup(volume.getLabel(),"The backing volume for the VPLEX virtual volume has been deleted");      }      String rgName=backendVol.getReplicationGroupInstance();      if (NullColumnValueGetter.isNotNullValue(rgName) && rgName.equals(groupName)) {        if (!vplexBlockServiceApiImpl.checkAllVPlexVolsInRequest(backendVol,allVolumes,checkedRGMap)) {          throw APIException.badRequests.volumeCantBeAddedToVolumeGroup(volume.getLabel(),"Volume has to be added to a different replication group than it is currently in");        }      }      if (!BlockServiceUtils.checkUnityVolumeCanBeAddedOrRemovedToCG(volumeList.getReplicationGroupName(),backendVol,_dbClient,true)) {        throw APIException.badRequests.volumeCantBeAddedToVolumeGroup(volume.getLabel(),"the Unity subgroup has snapshot.");      }    } else {      if (!BlockServiceUtils.checkUnityVolumeCanBeAddedOrRemovedToCG(volumeList.getReplicationGroupName(),volume,_dbClient,true)) {        throw APIException.badRequests.volumeCantBeAddedToVolumeGroup(volume.getLabel(),"the Unity subgroup has snapshot.");      }    }  }  ApplicationAddVolumeList outVolumesList=new ApplicationAddVolumeList();  outVolumesList.setConsistencyGroup(volumeList.getConsistencyGroup());  outVolumesList.setReplicationGroupName(groupName);  outVolumesList.setVolumes(addVolumeURIs);  return outVolumesList;}  }
class C{  public CharSequence format(Monetary monetary){  int maxDecimals=minDecimals;  if (decimalGroups != null)   for (  int group : decimalGroups)   maxDecimals+=group;  int smallestUnitExponent=monetary.smallestUnitExponent();  checkState(maxDecimals <= smallestUnitExponent,"The maximum possible number of decimals (%s) cannot exceed %s.",maxDecimals,smallestUnitExponent);  long satoshis=Math.abs(monetary.getValue());  long precisionDivisor=checkedPow(10,smallestUnitExponent - shift - maxDecimals);  satoshis=checkedMultiply(divide(satoshis,precisionDivisor,roundingMode),precisionDivisor);  long shiftDivisor=checkedPow(10,smallestUnitExponent - shift);  long numbers=satoshis / shiftDivisor;  long decimals=satoshis % shiftDivisor;  String decimalsStr=String.format(Locale.US,"%0" + (smallestUnitExponent - shift) + "d",decimals);  StringBuilder str=new StringBuilder(decimalsStr);  while (str.length() > minDecimals && str.charAt(str.length() - 1) == '0')   str.setLength(str.length() - 1);  int i=minDecimals;  if (decimalGroups != null) {    for (    int group : decimalGroups) {      if (str.length() > i && str.length() < i + group) {        while (str.length() < i + group)         str.append('0');        break;      }      i+=group;    }  }  if (str.length() > 0)   str.insert(0,decimalMark);  str.insert(0,numbers);  if (monetary.getValue() < 0)   str.insert(0,negativeSign); else   if (positiveSign != 0)   str.insert(0,positiveSign);  if (codes != null) {    if (codePrefixed) {      str.insert(0,codeSeparator);      str.insert(0,code());    } else {      str.append(codeSeparator);      str.append(code());    }  }  if (zeroDigit != '0') {    int offset=zeroDigit - '0';    for (int d=0; d < str.length(); d++) {      char c=str.charAt(d);      if (Character.isDigit(c))       str.setCharAt(d,(char)(c + offset));    }  }  return str;}  }
class C{  private CompoundAttackStrategy(AttackStrategy base,TargetSelectionStrategy targeter,PositioningStrategy positioner){  this.base=base;  this.targeter=targeter;  this.positioner=positioner;}  }
class C{  public static ReilGraph createGraph(final Collection<List<ReilInstruction>> instructionList,final Collection<IAddress> nativeJumpTargets){  final Pair<List<ReilBlock>,List<ReilEdge>> pair=createGraphElements(instructionList,nativeJumpTargets);  return new ReilGraph(pair.first(),pair.second());}  }
class C{  public ReplEvent requestEvent(long seqNo) throws ReplicatorException, IOException {  ReplEvent retval;  if (logger.isDebugEnabled())   logger.debug("Requesting event " + seqNo);  retval=protocol.requestReplEvent(seqNo);  if (logger.isDebugEnabled() && retval instanceof ReplDBMSEvent) {    ReplDBMSEvent ev=(ReplDBMSEvent)retval;    logger.debug("Received event " + ev.getSeqno() + "/"+ ev.getFragno());  }  return retval;}  }
class C{  @Override public void updateScreen(){  ((GuiButton)buttonList.get(1)).enabled=bindList.getSelectedSlot() != -1;  ((GuiButton)buttonList.get(2)).enabled=bindList.getSelectedSlot() != -1;}  }
class C{  public void addParticipant(Who participant){  getParticipants().add(participant);}  }
class C{  @Override public String toString(){  return this.text;}  }
class C{  public static double variance(double[] vector){  double sum=0, sumSquared=0;  if (vector.length <= 1) {    return 0;  }  for (int i=0; i < vector.length; i++) {    sum+=vector[i];    sumSquared+=(vector[i] * vector[i]);  }  return (sumSquared - (sum * sum / (double)vector.length)) / (double)(vector.length - 1);}  }
class C{  void processConnectionClosure(){  if (unsolicited.size() > 0) {    String msg;    if (conn != null) {      msg=conn.host + ":" + conn.port+ " connection closed";    } else {      msg="Connection closed";    }    notifyUnsolicited(new CommunicationException(msg));  }  if (pooled) {    pcb.removePooledConnection(this);  }}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  return true;}  }
class C{  public void clearQheaders(){  qheaders=new NameValueList();}  }
class C{  public String diff() throws IOException {  try {    String reference=readReference();    return diff(reference,m_Output.toString());  } catch (  FileNotFoundException fnf) {    writeAsReference();    return null;  }}  }
class C{  public JSONObject toJSONObject(JSONArray names) throws JSONException {  if (names == null || names.length() == 0 || this.length() == 0) {    return null;  }  JSONObject jo=new JSONObject();  for (int i=0; i < names.length(); i+=1) {    jo.put(names.getString(i),this.opt(i));  }  return jo;}  }
class C{  public static byte[] toBytes(String hex){  if (hex == null)   return null;  int len=hex.length();  byte[] bytes=new byte[len / 2];  int k=0;  for (int i=0; i < len; i+=2) {    int digit=0;    char ch=hex.charAt(i);    if ('0' <= ch && ch <= '9')     digit=ch - '0'; else     if ('a' <= ch && ch <= 'f')     digit=ch - 'a' + 10; else     if ('A' <= ch && ch <= 'F')     digit=ch - 'A' + 10;    ch=hex.charAt(i + 1);    if ('0' <= ch && ch <= '9')     digit=16 * digit + ch - '0'; else     if ('a' <= ch && ch <= 'f')     digit=16 * digit + ch - 'a' + 10; else     if ('A' <= ch && ch <= 'F')     digit=16 * digit + ch - 'A' + 10;    bytes[k++]=(byte)digit;  }  return bytes;}  }
class C{  public static String executeStringQuery(String sql) throws AdeException {  return executeStringQuery(sql,AdeInternal.getDefaultConnection(),true);}  }
class C{  public E push(E object){  addElement(object);  return object;}  }
class C{  @NotNull public MessageBuilder type(@NotNull MessageType type){  types.add(type);  return this;}  }
class C{  public FindReplaceDialog(Shell aShell){  super(aShell);}  }
class C{  private DataPoint isUniquePoint(final DataPoint toCheck,final double tolerance){  logger.debug("checking for uniqueness with tolerance: " + tolerance);  if (toCheck.getDimension() != dimensions) {    throw new IllegalArgumentException("point to check has " + toCheck.getDimension() + " dimensions.  This dataset requires "+ dimensions);  }  return ntree.isUnique(toCheck,tolerance);}  }
class C{  public ServerRequestInterface newSIPServerRequest(SIPRequest sipRequest,MessageChannel messageChannel){  if (messageChannel == null || sipRequest == null) {    throw new IllegalArgumentException("Null Arg!");  }  SipStackImpl theStack=(SipStackImpl)messageChannel.getSIPStack();  DialogFilter retval=new DialogFilter(theStack);  if (messageChannel instanceof SIPTransaction) {    retval.transactionChannel=(SIPTransaction)messageChannel;  }  retval.listeningPoint=messageChannel.getMessageProcessor().getListeningPoint();  if (retval.listeningPoint == null)   return null;  if (sipStack.isLoggingEnabled())   sipStack.getStackLogger().logDebug("Returning request interface for " + sipRequest.getFirstLine() + " "+ retval+ " messageChannel = "+ messageChannel);  return retval;}  }
class C{  @Override protected void after() throws Exception {  Codec.setDefault(savedCodec);  InfoStream.setDefault(savedInfoStream);  if (savedLocale != null)   Locale.setDefault(savedLocale);  if (savedTimeZone != null)   TimeZone.setDefault(savedTimeZone);}  }
class C{  public static Collection<ClusterNode> allNodes(GridCacheContext ctx,AffinityTopologyVersion topOrder){  return ctx.discovery().cacheNodes(ctx.namex(),topOrder);}  }
class C{  private void processInlineGuard(Instruction s){  ValueGraphVertex v=new ValueGraphVertex(s);  graph.addGraphNode(v);  nameMap.put(s,v);  if (s.operator() == IG_PATCH_POINT) {    v.setLabel(s.operator(),1);    link(v,findOrCreateVertex(bypassMoves(InlineGuard.getValue(s))),0);  } else {    v.setLabel(s.operator(),2);    link(v,findOrCreateVertex(bypassMoves(InlineGuard.getValue(s))),0);    link(v,findOrCreateVertex(InlineGuard.getGoal(s)),1);  }}  }
class C{  private void trackAllChildViews(){  int childCount=mRv.getChildCount();  for (int i=0; i < childCount; i++) {    View v=mRv.getChildAt(i);    if (v instanceof BaseRecyclerViewFastScrollBar.FastScrollFocusableView) {      mTrackedFastScrollViews.add((BaseRecyclerViewFastScrollBar.FastScrollFocusableView)v);    }  }}  }
class C{  public static void writeChartAsJPEG(OutputStream out,JFreeChart chart,int width,int height) throws IOException {  writeChartAsJPEG(out,chart,width,height,null);}  }
class C{  private void ivrZoneName(boolean isZoneset,String zoneName,boolean isActivate,boolean isRemove) throws NetworkDeviceControllerException {  _log.info(MessageFormat.format("Host: {0}, Port: {1} - BEGIN Configure {2}: {3} - Remove {4}",new Object[]{getSession().getSession().getHost(),getSession().getSession().getPort(),isZoneset ? "zoneset" : "zone",zoneName,isRemove}));  if (!inConfigMode) {    throw NetworkDeviceControllerException.exceptions.mdsDeviceNotInConfigMode();  }  SSHPrompt[] promptsToCheck={SSHPrompt.MDS_CONFIG,SSHPrompt.MDS_CONFIG_IVR_ZONE,SSHPrompt.MDS_CONFIG_IVR_ZONESET};  if (!Arrays.asList(promptsToCheck).contains(lastPrompt)) {    String message=Arrays.asList(promptsToCheck).toString();    throw NetworkDeviceControllerException.exceptions.mdsUnexpectedLastPrompt(lastPrompt.toString(),message);  }  if (isActivate && isRemove) {    String message="cannot be activate and remove at the same time";    throw NetworkDeviceControllerException.exceptions.mdsUnexpectedDeviceState(message);  }  String ivrZoneNameResourceKey="MDSDialog.ivr.zoneName.cmd";  if (isZoneset) {    ivrZoneNameResourceKey=isActivate ? "MDSDialog.ivr.zonesetName.activate.cmd" : "MDSDialog.ivr.zonesetName.cmd";  }  SSHPrompt[] prompts={isZoneset ? SSHPrompt.MDS_CONFIG_IVR_ZONESET : SSHPrompt.MDS_CONFIG_IVR_ZONE,SSHPrompt.MDS_CONFIG};  String noString=isRemove ? MDSDialogProperties.getString("MDSDialog.zoneNameVsan.no.cmd") : "";  StringBuilder buf=new StringBuilder();  String payload=MessageFormat.format(noString + MDSDialogProperties.getString(ivrZoneNameResourceKey),zoneName);  boolean retryNeeded=true;  boolean error=false;  String errorMessage=MDSDialogProperties.getString("MDSDialog.ivr.waitForZoneset.activate.error.atLeast2Members");  for (int retryCount=0; retryCount < sessionLockRetryMax && retryNeeded; retryCount++) {    lastPrompt=sendWaitFor(payload,defaultTimeout,prompts,buf);    String[] lines=getLines(buf);    retryNeeded=checkForIvrZoneSession(lines,retryCount);    if (isActivate && isZoneset) {      for (      String line : lines) {        error=line.indexOf(errorMessage) >= 0;        if (error) {          break;        }      }    }  }  if (isZoneset) {    SSHPrompt[] morePromptsToCheck={SSHPrompt.MDS_CONFIG_IVR_ZONESET,SSHPrompt.MDS_CONFIG};    if (!Arrays.asList(morePromptsToCheck).contains(lastPrompt)) {      String message=Arrays.asList(morePromptsToCheck).toString();      throw NetworkDeviceControllerException.exceptions.mdsUnexpectedLastPrompt(lastPrompt.toString(),message);    }  } else {    SSHPrompt[] morePromptsToCheck={SSHPrompt.MDS_CONFIG_IVR_ZONE,SSHPrompt.MDS_CONFIG};    if (!Arrays.asList(morePromptsToCheck).contains(lastPrompt)) {      String message=Arrays.asList(morePromptsToCheck).toString();      throw NetworkDeviceControllerException.exceptions.mdsUnexpectedLastPrompt(lastPrompt.toString(),message);    }  }  if (error) {    throw new NetworkDeviceControllerException(errorMessage + ": " + zoneName);  }  _log.info(MessageFormat.format("Host: {0}, Port: {1} - END Configure {2}: {3} - Remove {4}",new Object[]{getSession().getSession().getHost(),getSession().getSession().getPort(),isZoneset ? "zoneset" : "zone",zoneName,isRemove}));}  }
class C{  public String readConfigName(SolrZkClient zkClient,String collection) throws KeeperException, InterruptedException {  if (collection == null) {    throw new IllegalArgumentException("collection must not be null");  }  String configName=null;  byte[] aliasData=zkClient.getData(ZkStateReader.ALIASES,null,null,true);  Aliases aliases=ClusterState.load(aliasData);  String alias=aliases.getCollectionAlias(collection);  if (alias != null) {    List<String> aliasList=StrUtils.splitSmart(alias,",",true);    if (aliasList.size() > 1) {      throw new IllegalArgumentException("collection cannot be an alias that maps to multiple collections");    }    collection=aliasList.get(0);  }  String path=ZkStateReader.COLLECTIONS_ZKNODE + "/" + collection;  if (LOG.isInfoEnabled()) {    LOG.info("Load collection config from:" + path);  }  byte[] data=zkClient.getData(path,null,null,true);  if (data != null) {    ZkNodeProps props=ZkNodeProps.load(data);    configName=props.getStr(ZkController.CONFIGNAME_PROP);  }  if (configName != null && !zkClient.exists(ZkConfigManager.CONFIGS_ZKNODE + "/" + configName,true)) {    LOG.error("Specified config does not exist in ZooKeeper:" + configName);    throw new IllegalArgumentException("Specified config does not exist in ZooKeeper:" + configName);  }  return configName;}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  DynaValidatorForm oForm=(DynaValidatorForm)form;  String cUser=null;  String cPass=null;  if (oForm != null) {    cUser=(String)oForm.get(Constants.LOGIN_FORM_USER_FIELD);    cPass=(String)oForm.get(Constants.LOGIN_FORM_PASS_FIELD);  }  if (!AuthenticationHelper.validateUserPassword(cUser,cPass)) {    return mapping.findForward(GLOBAL_FORWARD_LOGIN);  }  AuthenticationHelper.authenticateUser(request);  return mapping.findForward(SUCCESS_FORWARD);}  }
class C{  public static int px2dip(Context context,float px){  float density=getDensity(context);  return (int)(px / density + DOT_FIVE);}  }
class C{  @Override public boolean ownInsertsAreVisible(int type){  debugCodeCall("ownInsertsAreVisible",type);  return false;}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public ShardsIterator randomAllActiveShardsIt(){  return new PlainShardsIterator(allActiveShards);}  }
class C{  public void testDeployMethodWithDeployableMonitorParameterCanBeCalled(){  TestableAbstractRemoteDeployer deployer=new TestableAbstractRemoteDeployer(createContainer());  deployer.deploy(new WAR("some/file"),new DeployableMonitorStub("some/file"));}  }
class C{  @Override public synchronized void addInstanceListener(InstanceListener dsl){  super.addInstanceListener(dsl);  m_instanceEventTargets++;  try {    if ((m_Loader instanceof DatabaseLoader && m_dbSet && m_dataFormat == null) || (!(m_Loader instanceof DatabaseLoader) && m_dataFormat == null)) {      m_dataFormat=m_Loader.getStructure();      m_dbSet=false;    }  } catch (  Exception ex) {  }  m_ie.m_formatNotificationOnly=true;  notifyStructureAvailable(m_dataFormat);}  }
class C{  public final void testValidateOnValueChange(){  boolean validateOnValueChange=false;  AbstractValidateableViewImplementation abstractValidateableView=new AbstractValidateableViewImplementation(getContext());  abstractValidateableView.validateOnValueChange(validateOnValueChange);  assertEquals(validateOnValueChange,abstractValidateableView.isValidatedOnValueChange());}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  public <T extends PropertyContainer>List<SearchMatch<T>> search(String query,Class<T> clazz){  SearchResult result=doQuery(query,clazz);  List<SearchMatch<T>> matches=buildSearchMatches(result);  @SuppressWarnings("unchecked") Function<SearchMatch,T> resolver=(Function<SearchMatch,T>)(clazz.equals(Node.class) ? getNodeResolver() : getRelationshipResolver());  return resolveMatchItems(matches,resolver);}  }
class C{  public static Element makeElement(Branch source,String path){  StringTokenizer tokens=new StringTokenizer(path,"/");  Element parent;  if (source instanceof Document) {    Document document=(Document)source;    parent=document.getRootElement();    String name=tokens.nextToken();    if (parent == null) {      parent=document.addElement(name);    }  } else {    parent=(Element)source;  }  Element element=null;  while (tokens.hasMoreTokens()) {    String name=tokens.nextToken();    if (name.indexOf(':') > 0) {      element=parent.element(parent.getQName(name));    } else {      element=parent.element(name);    }    if (element == null) {      element=parent.addElement(name);    }    parent=element;  }  return element;}  }
class C{  protected final BinaryExchangeType createBinaryExchangeElement(ObjectFactory wstFactory,byte[] data){  BinaryExchangeType xchg=wstFactory.createBinaryExchangeType();  xchg.setEncodingType(Constants.ENCODING_TYPE_BASE64);  xchg.setValueType(Constants.BINARY_EXCHANGE_TYPE_SPNEGO);  xchg.setValue(StringUtils.newStringUtf8(Base64.encodeBase64(data,false)));  return xchg;}  }
class C{  public static void delta(int[] a,int offset,int len){  for (int i=len + offset - 1; i > offset; --i) {    a[i]-=a[i - 1];  }  a[offset]++;}  }
class C{  @Override public boolean isDataFlavorSupported(DataFlavor flavor){  return this.flavor.equals(flavor);}  }
class C{  public void revertNameChange(String oldValue){  AttributeItemFigure label=getFigure();  label.setVisible(true);  setSelected(EditPart.SELECTED_PRIMARY);  label.revalidate();}  }
class C{  public void addUniqueAttribute(String name,String value,int flags) throws SAXException {  if (m_elemContext.m_startTagOpen) {    try {      final String patchedName=patchName(name);      final java.io.Writer writer=m_writer;      if ((flags & NO_BAD_CHARS) > 0 && m_xmlcharInfo.onlyQuotAmpLtGt) {        writer.write(' ');        writer.write(patchedName);        writer.write("=\"");        writer.write(value);        writer.write('"');      } else {        writer.write(' ');        writer.write(patchedName);        writer.write("=\"");        writeAttrString(writer,value,this.getEncoding());        writer.write('"');      }    } catch (    IOException e) {      throw new SAXException(e);    }  }}  }
class C{  public static Builder builder(){  return new Builder(new PollResponse());}  }
class C{  @BeforeClass() public static void initClass() throws SQLException {  createTable("genkeys","priKey INT NOT NULL AUTO_INCREMENT, dataField VARCHAR(64), PRIMARY KEY (priKey)");}  }
class C{  public void collapseParentActionRow(final Object parentRowIdx){  final Collection<?> children=((Hierarchical)hierarchicalContainer).getChildren(parentRowIdx);  if (children != null && !children.isEmpty()) {    String ids=children.toString().substring(1);    ids=ids.substring(0,ids.length() - 1);    for (    final String childId : ids.split(", ")) {      ((Hierarchical)hierarchicalContainer).removeItem(childId);    }  }}  }
class C{  private String _serializeQuery(Query query,Map<Object,String> done,String id) throws ConverterException {  Collection.Key[] keys=CollectionUtil.keys(query);  StringBuilder sb=new StringBuilder(goIn() + "<QUERY ID=\"" + id+ "\">");  sb.append(goIn() + "<COLUMNNAMES>");  for (int i=0; i < keys.length; i++) {    sb.append(goIn() + "<COLUMN NAME=\"" + keys[i].getString()+ "\"></COLUMN>");  }  sb.append(goIn() + "</COLUMNNAMES>");  String value;  deep++;  sb.append(goIn() + "<ROWS>");  int len=query.getRecordcount();  for (int row=1; row <= len; row++) {    sb.append(goIn() + "<ROW>");    for (int col=0; col < keys.length; col++) {      try {        value=_serialize(query.getAt(keys[col],row),done);      } catch (      PageException e) {        value=_serialize(e.getMessage(),done);      }      sb.append("<COLUMN TYPE=\"" + type + "\">"+ value+ "</COLUMN>");    }    sb.append(goIn() + "</ROW>");  }  sb.append(goIn() + "</ROWS>");  deep--;  sb.append(goIn() + "</QUERY>");  type="QUERY";  return sb.toString();}  }
class C{  public boolean contains(String key){  return mPreferences.contains(key);}  }
class C{  public ShortChunks(final long length,final int chunkBits){  super(length);  assert chunkBits > 0 && chunkBits <= 30;  mChunkBits=chunkBits;  mChunkSize=1 << mChunkBits;  mChunkMask=mChunkSize - 1;  final long ch=(length + mChunkSize - 1) / mChunkSize;  if (ch > Integer.MAX_VALUE) {    throw new RuntimeException();  }  final int chunks=(int)ch;  mArray=new short[chunks][];  long left=mLength;  for (int i=0; i < chunks; i++) {    final int assignedLength=left <= mChunkSize ? (int)left : mChunkSize;    assert assignedLength > 0;    mArray[i]=new short[assignedLength];    left-=assignedLength;  }  assert left == 0;  mTotalLength=mLength;  assert integrity();}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public void addDeparture(double departureTime,double arrivalTime){  double delta=arrivalTime - departureTime;  this.travelTimes.put(departureTime,delta);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private Geometry binaryUnion(List geoms,int start,int end){  if (end - start <= 1) {    Geometry g0=getGeometry(geoms,start);    return unionSafe(g0,null);  } else   if (end - start == 2) {    return unionSafe(getGeometry(geoms,start),getGeometry(geoms,start + 1));  } else {    int mid=(end + start) / 2;    Geometry g0=binaryUnion(geoms,start,mid);    Geometry g1=binaryUnion(geoms,mid,end);    return unionSafe(g0,g1);  }}  }
class C{  public static byte[] toByteArray(URL url) throws IOException {  return asByteSource(url).read();}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:35.721 -0500",hash_original_method="A4DA9D6458699868D83920107CCFA8FD",hash_generated_method="468CC97B5B32B43115FE9AA120C34125") public static String createCnonce(){  String cnonce;  MessageDigest md5Helper=createMessageDigest("MD5");  cnonce=Long.toString(System.currentTimeMillis());  cnonce=encode(md5Helper.digest(EncodingUtils.getAsciiBytes(cnonce)));  return cnonce;}  }
class C{  public static byte[] hexToBytes(String str){  byte[] bytes=new byte[(str.length() + 1) / 2];  if (str.length() == 0) {    return bytes;  }  bytes[0]=0;  int nibbleIdx=(str.length() % 2);  for (int i=0; i < str.length(); i++) {    char c=str.charAt(i);    if (!isHex(c)) {      throw new IllegalArgumentException("string contains non-hex chars");    }    if ((nibbleIdx % 2) == 0) {      bytes[nibbleIdx >> 1]=(byte)(hexValue(c) << 4);    } else {      bytes[nibbleIdx >> 1]+=(byte)hexValue(c);    }    nibbleIdx++;  }  return bytes;}  }
class C{  protected static boolean retrievePoints(float length,LinkedList<Point2D> points,LinkedList<Point2D> polysegment){  polysegment.clear();  Point2D point=points.removeFirst();  polysegment.add(point);  double consumedLength=0.0;  double norm=0.0;  Point2D nextPoint=null;  while (consumedLength < length && !points.isEmpty()) {    nextPoint=(Point2D)points.removeFirst();    polysegment.add(nextPoint);    norm=LineUtil.norm(point,nextPoint);    consumedLength+=norm;    point=nextPoint;  }  if (MoreMath.approximately_equal(consumedLength,length)) {    points.addFirst(point);    return true;  } else {    if (consumedLength > length) {      points.addFirst(polysegment.removeLast());      consumedLength-=norm;      point=(Point2D)polysegment.getLast();      double d=length - consumedLength;      Point2D interp=LineUtil.interpolatedPoint(point,nextPoint,d);      polysegment.add(interp);      points.addFirst(interp);      return true;    } else {      return false;    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double z;  int r, g, b;  int rOut, gOut, bOut;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  int E=Integer.parseInt(args[2]);  if (E < 20) {    E=20;  }  if (E > 235) {    E=235;  }  if (inputHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    int progress=0;    WhiteboxRaster input=new WhiteboxRaster(inputHeader,"r");    if (input.getDataScale() != WhiteboxRasterBase.DataScale.RGB) {      showFeedback("The input image should be of an RGB data scale.");      return;    }    int rows=input.getNumberRows();    int cols=input.getNumberColumns();    double noData=input.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setDataScale(WhiteboxRasterBase.DataScale.RGB);    double[] data;    long numPixels=0;    int r_l=Integer.MAX_VALUE;    int r_h=Integer.MIN_VALUE;    long r_e=0;    long rSqrTotal=0;    int g_l=Integer.MAX_VALUE;    int g_h=Integer.MIN_VALUE;    long g_e=0;    long gSqrTotal=0;    int b_l=Integer.MAX_VALUE;    int b_h=Integer.MIN_VALUE;    long b_e=0;    long bSqrTotal=0;    int L=0;    int H=255;    for (row=0; row < rows; row++) {      data=input.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          numPixels++;          r=((int)z & 0xFF);          g=(((int)z >> 8) & 0xFF);          b=(((int)z >> 16) & 0xFF);          if (r < r_l) {            r_l=r;          }          if (r > r_h) {            r_h=r;          }          r_e+=r;          rSqrTotal+=r * r;          if (g < g_l) {            g_l=g;          }          if (g > g_h) {            g_h=g;          }          g_e+=g;          gSqrTotal+=g * g;          if (b < b_l) {            b_l=b;          }          if (b > b_h) {            b_h=b;          }          b_e+=b;          bSqrTotal+=b * b;        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    r_e=r_e / numPixels;    g_e=g_e / numPixels;    b_e=b_e / numPixels;    double r_s=(double)rSqrTotal / numPixels;    double g_s=(double)gSqrTotal / numPixels;    double b_s=(double)bSqrTotal / numPixels;    double r_b=(r_h * r_h * (E - L) - r_s * (H - L) + r_l * r_l * (H - E)) / (2 * (r_h * (E - L) - r_e * (H - L) + r_l * (H - E)));    double r_a=(H - L) / ((r_h - r_l) * (r_h + r_l - 2 * r_b));    double r_c=L - r_a * ((r_l - r_b) * (r_l - r_b));    double g_b=(g_h * g_h * (E - L) - g_s * (H - L) + g_l * g_l * (H - E)) / (2 * (g_h * (E - L) - g_e * (H - L) + g_l * (H - E)));    double g_a=(H - L) / ((g_h - g_l) * (g_h + g_l - 2 * g_b));    double g_c=L - g_a * ((g_l - g_b) * (g_l - g_b));    double b_b=(b_h * b_h * (E - L) - b_s * (H - L) + b_l * b_l * (H - E)) / (2 * (b_h * (E - L) - b_e * (H - L) + b_l * (H - E)));    double b_a=(H - L) / ((b_h - b_l) * (b_h + b_l - 2 * b_b));    double b_c=L - b_a * ((b_l - b_b) * (b_l - b_b));    for (row=0; row < rows; row++) {      data=input.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          numPixels++;          r=((int)z & 0xFF);          g=(((int)z >> 8) & 0xFF);          b=(((int)z >> 16) & 0xFF);          rOut=(int)(r_a * ((r - r_b) * (r - r_b)) + r_c);          gOut=(int)(g_a * ((g - g_b) * (g - g_b)) + g_c);          bOut=(int)(b_a * ((b - b_b) * (b - b_b)) + b_c);          if (rOut > 255) {            rOut=255;          }          if (gOut > 255) {            gOut=255;          }          if (bOut > 255) {            bOut=255;          }          if (rOut < 0) {            rOut=0;          }          if (gOut < 0) {            gOut=0;          }          if (bOut < 0) {            bOut=0;          }          z=(double)((255 << 24) | (bOut << 16) | (gOut << 8)| rOut);          output.setValue(row,col,z);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    input.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean hasName(){  return getName() != null;}  }
class C{  public Iterator<Entry<Text,Parse>> iterator(){  return parseMap.entrySet().iterator();}  }
class C{  protected static FontUIResource _getSystemTextFont(){  if (systemFont == null) {    try {      systemFont=new FontUIResource(Font.getFont("swing.plaf.metal.systemFont",new Font(FONT_DEFAULT,Font.PLAIN,FONT_SIZE)));    } catch (    Exception e) {      systemFont=new FontUIResource(FONT_DEFAULT,Font.PLAIN,FONT_SIZE);    }  }  return systemFont;}  }
class C{  public BadPartitioningException(){}  }
class C{  public NameConstraints(GeneralSubtrees permittedSubtrees,GeneralSubtrees excludedSubtrees){  if (permittedSubtrees != null) {    List<GeneralSubtree> ps=permittedSubtrees.getSubtrees();    if (ps == null || ps.isEmpty()) {      throw new IllegalArgumentException("permittedSubtrees are empty");    }  }  if (excludedSubtrees != null) {    List<GeneralSubtree> es=excludedSubtrees.getSubtrees();    if (es == null || es.isEmpty()) {      throw new IllegalArgumentException("excludedSubtrees are empty");    }  }  this.permittedSubtrees=permittedSubtrees;  this.excludedSubtrees=excludedSubtrees;}  }
class C{  private void allocateElements(int numElements){  int initialCapacity=MIN_INITIAL_CAPACITY;  if (numElements >= initialCapacity) {    initialCapacity=numElements;    initialCapacity|=(initialCapacity >>> 1);    initialCapacity|=(initialCapacity >>> 2);    initialCapacity|=(initialCapacity >>> 4);    initialCapacity|=(initialCapacity >>> 8);    initialCapacity|=(initialCapacity >>> 16);    initialCapacity++;    if (initialCapacity < 0)     initialCapacity>>>=1;  }  elements=new Object[initialCapacity];}  }
class C{  public static boolean hasNature(IProject project,String natureId) throws CoreException {  return project.isAccessible() && project.hasNature(natureId);}  }
class C{  public static PreProcessor expandJsonKeys(){  return expandJsonKeys(null);}  }
class C{  private void receiveQuotes(){  Intent intent=getIntent();  Bundle bundle=intent.getExtras();  if (bundle != null) {    this.quotes=(ArrayList)bundle.get("QUOTES");  } else {    this.quotes=new ArrayList<>();  }}  }
class C{  public void expandAll(){  if (!chkExpand.isChecked())   chkExpand.setChecked(true);  TreeUtils.expandAll(tree);}  }
class C{  public void add(short i){  requestFreeSize(2);  U.shortToBytes(i,data,size);  size+=2;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_GEN_EXPR_1__INDEX_1:    return getIndex_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public JPrefuseTable(Table t){  super();  m_table=t;  PrefuseTableModel model=new PrefuseTableModel(m_table);  super.setModel(model);  m_table.addTableListener(model);}  }
class C{  public JSONException syntaxError(String message){  return new JSONException(message + this);}  }
class C{  private Retry processResponseHeaders() throws IOException {  Proxy selectedProxy=httpEngine.connection != null ? httpEngine.connection.getRoute().getProxy() : client.getProxy();  final int responseCode=getResponseCode();switch (responseCode) {case HTTP_PROXY_AUTH:    if (selectedProxy.type() != Proxy.Type.HTTP) {      throw new ProtocolException("Received HTTP_PROXY_AUTH (407) code while not using proxy");    }case HTTP_UNAUTHORIZED:  boolean credentialsFound=HttpAuthenticator.processAuthHeader(client.getAuthenticator(),getResponseCode(),httpEngine.getResponseHeaders().getHeaders(),rawRequestHeaders,selectedProxy,url);return credentialsFound ? Retry.SAME_CONNECTION : Retry.NONE;case HTTP_MULT_CHOICE:case HTTP_MOVED_PERM:case HTTP_MOVED_TEMP:case HTTP_SEE_OTHER:case HTTP_TEMP_REDIRECT:if (!getInstanceFollowRedirects()) {return Retry.NONE;}if (++redirectionCount > MAX_REDIRECTS) {throw new ProtocolException("Too many redirects: " + redirectionCount);}if (responseCode == HTTP_TEMP_REDIRECT && !method.equals("GET") && !method.equals("HEAD")) {return Retry.NONE;}String location=getHeaderField("Location");if (location == null) {return Retry.NONE;}URL previousUrl=url;url=new URL(previousUrl,location);if (!url.getProtocol().equals("https") && !url.getProtocol().equals("http")) {return Retry.NONE;}boolean sameProtocol=previousUrl.getProtocol().equals(url.getProtocol());if (!sameProtocol && !client.getFollowProtocolRedirects()) {return Retry.NONE;}boolean sameHost=previousUrl.getHost().equals(url.getHost());boolean samePort=getEffectivePort(previousUrl) == getEffectivePort(url);if (sameHost && samePort && sameProtocol) {return Retry.SAME_CONNECTION;} else {return Retry.DIFFERENT_CONNECTION;}default :return Retry.NONE;}}  }
class C{  void drawMessages(){  if (mGameStatusMessageNum != TextResources.NO_MESSAGE) {    TexturedAlignedRect msgBox=mGameStatusMessages;    Rect boundsRect=mTextRes.getTextureRect(mGameStatusMessageNum);    msgBox.setTextureCoords(boundsRect);    float scale=(ARENA_WIDTH * STATUS_MESSAGE_WIDTH_PERC) / boundsRect.width();    msgBox.setScale(boundsRect.width() * scale,boundsRect.height() * scale);    msgBox.draw();  }}  }
class C{  public WriteAbortedException(String s,Exception ex){  super(s);  initCause(null);  detail=ex;}  }
class C{  public Address(final long value){  m_value=BigInteger.valueOf(value);}  }
class C{  public BerkeleyDbDatabase(BerkeleyDbEnvironment environment,String dbName,boolean isReadOnly,boolean allowCreateNew,TupleBinding keyBinding,TupleBinding entryBinding) throws DatabaseException {  DatabaseConfig dbConfig=new DatabaseConfig();  dbConfig.setAllowCreate(allowCreateNew);  dbConfig.setReadOnly(isReadOnly);  dbConfig.setTransactional(false);  db=environment.getEnvironment().openDatabase(null,dbName,dbConfig);  this.entryBinding=entryBinding;  this.keyBinding=keyBinding;}  }
class C{  public boolean isValor(){  return valor;}  }
class C{  @Override public boolean hasMoreElements(){  return ((instructionOperands.hasMoreElements()) || ((heapOperands != null) && (curHeapOperand < heapOperands.length)) || ((implicitDefs != null) && (implicitDefs.hasMoreElements())));}  }
class C{  public void decrypt(long[] inbuffer,long[] outbuffer){  int nLen=inbuffer.length;  for (int nI=0; nI < nLen; nI++)   outbuffer[nI]=decryptBlock(inbuffer[nI]);}  }
class C{  public static final double[] trim(double[] a,int size){  if (a.length == size) {    return a;  } else {    double[] b=new double[size];    System.arraycopy(a,0,b,0,size);    return b;  }}  }
class C{  public CompiledST defineTemplateAlias(Token aliasT,Token targetT){  String alias=aliasT.getText();  String target=targetT.getText();  CompiledST targetCode=rawGetTemplate("/" + target);  if (targetCode == null) {    errMgr.compileTimeError(ErrorType.ALIAS_TARGET_UNDEFINED,null,aliasT,alias,target);    return null;  }  rawDefineTemplate("/" + alias,targetCode,aliasT);  return targetCode;}  }
class C{  public AnimatableAngleOrIdentValue(AnimationTarget target,String ident){  super(target);  this.ident=ident;  this.isIdent=true;}  }
class C{  private Coord calculateEndTarget(LinearMovement proto,Coord initLoc){  return (proto.startLoc.distance(initLoc) > proto.endLoc.distance(initLoc) ? proto.startLoc : proto.endLoc);}  }
class C{  protected void deflate() throws IOException {  int byteCount;  while ((byteCount=def.deflate(buf)) != 0) {    out.write(buf,0,byteCount);  }}  }
class C{  private void initializeLight(String systemName){  int num=SerialAddress.getBitFromSystemName(systemName);  output=(num % 100) - 1;  bank=(num / 100) - 1;  setState(OFF);}  }
class C{  private void init(){  this.setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));  this.add(Box.createVerticalStrut(10));  Box solType=Box.createHorizontalBox();  solType.add(new JLabel("Solution Type: "));  solType.add(Box.createHorizontalGlue());  solType.add(Box.createHorizontalStrut(100));  solType.add(solutionTypes);  this.add(solType);  this.add(Box.createVerticalStrut(10));  Box rReg=Box.createHorizontalBox();  rReg.add(new JLabel("Ridge Regression: "));  rReg.add(ridgeRegChkBx);  rReg.add(Box.createHorizontalGlue());  rReg.add(alpha);  alpha.setEnabled(ridgeRegChkBx.isSelected());  this.add(rReg);  this.add(Box.createVerticalStrut(10));  Box noiseBx=Box.createHorizontalBox();  noiseBx.add(new JLabel("Noise: "));  noiseBx.add(noiseChkBx);  noiseBx.add(Box.createHorizontalGlue());  noiseBx.add(noiseTri);  String text=noisePanel.getSummary();  noiseTri.setBothTexts(text,text);  this.add(noiseBx);  this.add(Box.createVerticalStrut(5));  noisePanel.setVisible(noiseTri.isDown());  noisePanel.setEnabled(noiseChkBx.isSelected());  this.add(noisePanel);  this.add(Box.createVerticalStrut(5));  Box applyPanel=Box.createHorizontalBox();  applyPanel.add(Box.createHorizontalStrut(5));  applyPanel.add(progressBar);  applyPanel.add(Box.createHorizontalGlue());  applyPanel.add(Box.createHorizontalStrut(15));  applyPanel.add(applyButton);  applyPanel.add(Box.createHorizontalStrut(5));  this.add(applyPanel);  addActionListeners();  if (trainer != null) {    addTrainerListeners();  }}  }
class C{  public Error(){}  }
class C{  public boolean addAll(NamedList<T> nl){  nvPairs.addAll(nl.nvPairs);  return nl.size() > 0;}  }
class C{  public static void warmup(){  Polygon poly=PolygonGenerator.RandomCircleSweep2(50,50000);  TriangulationProcess process=new TriangulationProcess();  process.triangulate(poly);}  }
class C{  @Override public Rankable copy(){  List<Object> shallowCopyOfFields=ImmutableList.copyOf(getFields());  return new RankableObjectWithFields(getObject(),getCount(),shallowCopyOfFields);}  }
class C{  @SuppressWarnings("unchecked") public void synchronize(G graph){  Set<E> edges=new HashSet<E>();  for (  EdgeDecorator<E2> edge : graph.getEdges()) {    if (!graph.getDelegate().getEdges().contains(edge.getDelegate())) {      edges.add((E)edge);    }  }  Set<V> vertices=new HashSet<V>();  for (  VertexDecorator<V2> vertex : graph.getVertices()) {    if (!graph.getDelegate().getVertices().contains(vertex.getDelegate())) {      vertices.add((V)vertex);    }  }  for (  E edge : edges) {    removeEdge(graph,edge);  }  for (  V vertex : vertices) {    removeVertex(graph,vertex);  }}  }
class C{  private void validateTableMetaData_everything(String tableNamePattern,String[] types) throws Exception {  Set<String> expectedTables=new HashSet<>(Arrays.asList("TEST_NORMAL_TABLE","test_quoted_normal_table","TEST_NORMAL_VIEW","test_quoted_normal_view","RDB$FIELDS","RDB$GENERATORS","RDB$ROLES","RDB$DATABASE","RDB$TRIGGERS"));  if (getDefaultSupportInfo().supportsGlobalTemporaryTables()) {    expectedTables.add("TEST_GTT_ON_COMMIT_DELETE");    expectedTables.add("TEST_GTT_ON_COMMIT_PRESERVE");  }  try (ResultSet tables=dbmd.getTables(null,null,tableNamePattern,types)){    while (tables.next()) {      String tableName=tables.getString(TableMetaData.TABLE_NAME.name());      Map<TableMetaData,Object> rules=getDefaultValueValidationRules();      assertTrue("TABLE_NAME is not allowed to be null or empty",tableName != null && tableName.length() > 0);      expectedTables.remove(tableName);      updateTableRules(tableName,rules);      validateRowValues(tables,rules);    }    assertTrue("getTables() did not return some expected tables: " + expectedTables,expectedTables.isEmpty());  } }  }
class C{  public FieldVisitor visitField(int access,String name,String desc,String signature,Object value){  if (cv != null) {    return cv.visitField(access,name,desc,signature,value);  }  return null;}  }
class C{  private void loadCounterArray(GPR reg){  if (NEEDS_OBJECT_ALOAD_BARRIER) {    asm.emitLAddrToc(T0,Entrypoints.edgeCountersField.getOffset());    asm.emitLVAL(T1,getEdgeCounterIndex());    Barriers.compileArrayLoadBarrier(this);    if (reg != T0) {      asm.emitORI(reg,T0,0);    }  } else {    asm.emitLAddrToc(reg,Entrypoints.edgeCountersField.getOffset());    asm.emitLAddrOffset(reg,reg,getEdgeCounterOffset());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.986 -0500",hash_original_method="6336C9E152BF9657042270231049327C",hash_generated_method="F7106332090212C97007C6DDFFEF2CB5") final synchronized void _sendWill(int option) throws IOException {  if (debug || debugoptions) {    System.err.println("WILL: " + TelnetOption.getOption(option));  }  _output_.write(_COMMAND_WILL);  _output_.write(option);  _output_.flush();}  }
class C{  public SecretKey extract(@Nullable SecretKey salt,byte[] ikm){  requireNonNull(ikm,"ikm must not be null");  if (salt == null) {    salt=new SecretKeySpec(new byte[hash.getByteLength()],hash.getAlgorithm());  }  Mac mac=initMac(salt);  byte[] keyBytes=mac.doFinal(ikm);  return new SecretKeySpec(keyBytes,hash.getAlgorithm());}  }
class C{  public boolean isExtends(){  return myBound != null && myIsExtending;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:44.579 -0500",hash_original_method="B3B247A72B9A5E5D631B15DB9021C14E",hash_generated_method="C5079CC507FC792378C3D1DC8D1E9C32") public static URI resolve(final URI baseURI,URI reference){  if (baseURI == null) {    throw new IllegalArgumentException("Base URI may nor be null");  }  if (reference == null) {    throw new IllegalArgumentException("Reference URI may nor be null");  }  boolean emptyReference=reference.toString().length() == 0;  if (emptyReference) {    reference=URI.create("#");  }  URI resolved=baseURI.resolve(reference);  if (emptyReference) {    String resolvedString=resolved.toString();    resolved=URI.create(resolvedString.substring(0,resolvedString.indexOf('#')));  }  return resolved;}  }
class C{  public static Role find(String value){  return enums.find(value);}  }
class C{  public CacheCollector(GfManagerAgent agent,SnapshotClient view){  this.view=view;  this.systemAgent=agent;  systemAgent.setCacheCollector(this);}  }
class C{  public String toString(){  int iMax=length() - 1;  if (iMax == -1) {    return "[]";  }  StringBuilder b=new StringBuilder((17 + 2) * (iMax + 1));  b.append('[');  for (int i=0; ; i++) {    b.append(longBitsToDouble(longs.get(i)));    if (i == iMax) {      return b.append(']').toString();    }    b.append(',').append(' ');  }}  }
class C{  public static void unregisterMBean(Class<?> mbeanInterface,String mbeanName){  MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();  try {    ObjectName name=generateMBeanObjectName(mbeanInterface.getName(),mbeanName);    if (mbs.isRegistered(name)) {      logger.info("Unregistering mbean: " + name.toString());      mbs.unregisterMBean(name);    } else {      logger.warn("Ignoring attempt to unregister unknown mbean: " + name.toString());    }  } catch (  Exception e) {    throw new ServerRuntimeException("Unable to unregister mbean: interface=" + mbeanInterface + " name="+ mbeanName,e);  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof LineRenderer3D)) {    return false;  }  LineRenderer3D that=(LineRenderer3D)obj;  if (this.xOffset != that.xOffset) {    return false;  }  if (this.yOffset != that.yOffset) {    return false;  }  if (!PaintUtilities.equal(this.wallPaint,that.wallPaint)) {    return false;  }  return super.equals(obj);}  }
class C{  public Iterator<E> iterator(E head,E tail){  return new PatchingIterator(innerChain,head,tail);}  }
class C{  public boolean equals(BasicBlock b){  return (this == b);}  }
class C{  public static Test suite(){  return new TestSuite(AddValuesTest.class);}  }
class C{  private void removed(IJavaElement element){  this.removed.add(element);  ListItem current=getOldPosition(element);  ListItem previous=null, next=null;  if (current.previous != null)   previous=getOldPosition(current.previous);  if (current.next != null)   next=getOldPosition(current.next);  if (previous != null)   previous.next=current.next;  if (next != null)   next.previous=current.previous;}  }
class C{  public Expression parseExpression(boolean insertionProtected) throws ParseException {  return parseExpressionInt(insertionProtected);}  }
class C{  public void delete(){  if (buffer instanceof FileBuffer) {    ((FileBuffer)buffer).delete();  } else   if (buffer instanceof MappedBuffer) {    ((MappedBuffer)buffer).delete();  }}  }
class C{  public DefaultTypedTuple(V value,Double score){  this.score=score;  this.value=value;}  }
class C{  @Override public void mouseClicked(int par1,int par2,int par3){  super.mouseClicked(par1,par2,par3);  this.textFieldFrequency.mouseClicked(par1 - containerWidth,par2 - containerHeight,par3);}  }
class C{  public KeyGenerationParameters(SecureRandom random,int strength){  this.random=random;  this.strength=strength;}  }
class C{  public int currentSegment(float[] coords){  if (isDone()) {    throw new NoSuchElementException("rect iterator out of bounds");  }  if (index == 5) {    return SEG_CLOSE;  }  coords[0]=(float)x;  coords[1]=(float)y;  if (index == 1 || index == 2) {    coords[0]+=(float)w;  }  if (index == 2 || index == 3) {    coords[1]+=(float)h;  }  if (affine != null) {    affine.transform(coords,0,coords,0,1);  }  return (index == 0 ? SEG_MOVETO : SEG_LINETO);}  }
class C{  public code addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5,K k6,V v6){  return new ImmutableCollections.MapN<K,V>(k1,v1,k2,v2,k3,v3,k4,v4,k5,v5,k6,v6);}  }
class C{  public void test_ConstructorLjava_security_cert_CertPathParameters(){  try {    CertPathParameters parameters=new MyCertPathParameters();    CertPathTrustManagerParameters p=new CertPathTrustManagerParameters(parameters);    assertNotSame("Parameters were cloned incorrectly",parameters,p.getParameters());  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }  try {    new CertPathTrustManagerParameters(null);    fail("Expected CertPathTrustManagerParameters was not thrown");  } catch (  NullPointerException npe) {  }}  }
class C{  @Override public Writer append(final CharSequence value){  this.builder.append(value);  return this;}  }
class C{  public int hashCode(){  return impl.hashCode();}  }
class C{  public void clear(IValidatable bean){  for (  Binding b : _optComponents.values()) {    b.clear(bean);  }  for (  Binding b : _bindings.values()) {    b.clear(bean);  }  _modified=false;}  }
class C{  public boolean isInDiskCacheSync(final ImageRequest imageRequest){  final CacheKey cacheKey=mCacheKeyFactory.getEncodedCacheKey(imageRequest,null);  final ImageRequest.CacheChoice cacheChoice=imageRequest.getCacheChoice();switch (cacheChoice) {case DEFAULT:    return mMainBufferedDiskCache.diskCheckSync(cacheKey);case SMALL:  return mSmallImageBufferedDiskCache.diskCheckSync(cacheKey);default :return false;}}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public static void json(String json){  createInstance();  printer.json(json);}  }
class C{  public Matrix4d rotateZ(double ang){  return rotateZ(ang,this);}  }
class C{  protected CCCallFuncN(Object t,String s,Class<?>[] p){  super(t,s,p);}  }
class C{  public boolean isEmpty(){  return string == null && pi == null && element == null;}  }
class C{  public void calcTargetString(){  int whatToShow=getWhatToShow();switch (whatToShow) {case DTMFilter.SHOW_COMMENT:    m_targetString=PsuedoNames.PSEUDONAME_COMMENT;  break;case DTMFilter.SHOW_TEXT:case DTMFilter.SHOW_CDATA_SECTION:case (DTMFilter.SHOW_TEXT | DTMFilter.SHOW_CDATA_SECTION):m_targetString=PsuedoNames.PSEUDONAME_TEXT;break;case DTMFilter.SHOW_ALL:m_targetString=PsuedoNames.PSEUDONAME_ANY;break;case DTMFilter.SHOW_DOCUMENT:case DTMFilter.SHOW_DOCUMENT | DTMFilter.SHOW_DOCUMENT_FRAGMENT:m_targetString=PsuedoNames.PSEUDONAME_ROOT;break;case DTMFilter.SHOW_ELEMENT:if (this.WILD == m_name) m_targetString=PsuedoNames.PSEUDONAME_ANY; else m_targetString=m_name;break;default :m_targetString=PsuedoNames.PSEUDONAME_ANY;break;}}  }
class C{  UserAssignmentDetails(UserAssignmentFactors userAssignmentFactors){  this.userFactors=userAssignmentFactors;  this.usageDetails=new UsageDetails();}  }
