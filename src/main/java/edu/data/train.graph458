class C{  private static void check(double[][] x,double[][] y){  jMatrix A=new jMatrix(x);  jMatrix B=new jMatrix(y);  check(A,B);}  }
class C{  public String toString(){  return String.valueOf(get());}  }
class C{  protected AutumnMessage(){}  }
class C{  public static Cleaner create(Object ob,Runnable thunk){  if (thunk == null)   return null;  return add(new Cleaner(ob,thunk));}  }
class C{  public ASN1Explicit(int tagClass,int tagNumber,ASN1Type type){  super(tagClass,tagNumber);  this.type=type;}  }
class C{  void error(String key,Object... args){  if (fatalErrors) {    String msg=getLocalizedString(key,args);    throw new PropagatedException(new IllegalStateException(msg));  }  warning(key,args);  out.println(getLocalizedString("msg.usage",ownName));}  }
class C{  private static void sendExceptionSettings(final JFrame parent,final IDebugger debugger,final Collection<DebuggerException> exceptions){  Preconditions.checkNotNull(exceptions,"IE00679: Exceptions argument can not be null");  try {    debugger.setExceptionSettings(exceptions);  } catch (  final DebugExceptionWrapper e) {    CUtilityFunctions.logException(e);    final String innerMessage="Could not send exceptions settings command";    final String innerDescription=CUtilityFunctions.createDescription("BinNavi could not send the exception settings command to the debug client.",new String[]{"There was a problem with the connection to the debug client."},new String[]{"The state of the debugged process remains unchanged."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,e);  }}  }
class C{  static SnmpOid makeOid(long l){  long[] x=new long[8];  x[0]=(l >> 56) & 0xFF;  x[1]=(l >> 48) & 0x00FF;  x[2]=(l >> 40) & 0x0000FF;  x[3]=(l >> 32) & 0x000000FF;  x[4]=(l >> 24) & 0x00000000FF;  x[5]=(l >> 16) & 0x0000000000FF;  x[6]=(l >> 8) & 0x000000000000FF;  x[7]=l & 0x00000000000000FF;  return new SnmpOid(x);}  }
class C{  public boolean isLoadMoreEnabled(){  return mLoadMoreEnabled;}  }
class C{  protected void scrollAndUpdateCoords(final MouseEvent e){  if (GUI.debugFX) {  }  final int x=(int)e.getX();  final int y=(int)e.getY();  updateCoords(x,y);}  }
class C{  private void loadColumns(){  ArrayList<MReportColumn> list=new ArrayList<MReportColumn>();  String sql="SELECT * FROM PA_ReportColumn WHERE PA_ReportColumnSet_ID=? AND IsActive='Y' ORDER BY SeqNo";  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,getPA_ReportColumnSet_ID());    ResultSet rs=pstmt.executeQuery();    while (rs.next())     list.add(new MReportColumn(getCtx(),rs,null));    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    try {      if (pstmt != null)       pstmt.close();    } catch (    Exception e) {    }    pstmt=null;  }  m_columns=new MReportColumn[list.size()];  list.toArray(m_columns);  log.finest("ID=" + getPA_ReportColumnSet_ID() + " - Size="+ list.size());}  }
class C{  private void validateFixedPartitionAttributesAgainstTotalNumberBuckets(){  for (  FixedPartitionAttributesImpl fpa : this.pr.getFixedPartitionAttributesImpl()) {    int numBuckets=0;    Set<FixedPartitionAttributesImpl> allFPAs=new HashSet<FixedPartitionAttributesImpl>(this.pr.getRegionAdvisor().adviseAllFixedPartitionAttributes());    allFPAs.add(fpa);    for (    FixedPartitionAttributes samefpa : allFPAs) {      numBuckets=numBuckets + samefpa.getNumBuckets();    }    if (numBuckets > this.pr.getTotalNumberOfBuckets()) {      Object[] prms=new Object[]{this.pr.getName(),numBuckets,this.pr.getTotalNumberOfBuckets()};      throw new IllegalStateException(LocalizedStrings.PartitionedRegionConfigValidator_FOR_REGION_0_SUM_OF_NUM_BUCKETS_1_FOR_DIFFERENT_PRIMARY_PARTITIONS_SHOULD_NOT_BE_GREATER_THAN_TOTAL_NUM_BUCKETS_2.toString(prms));    }  }}  }
class C{  public static List<SimpleOrderedMap<String>> formatForResponseHeader(List<ToleratedUpdateError> errs){  List<SimpleOrderedMap<String>> result=new ArrayList<>(errs.size());  for (  ToleratedUpdateError e : errs) {    result.add(e.getSimpleMap());  }  return result;}  }
class C{  public static void mount(FileSystem fs,Path mountPoint,boolean readonly,boolean log,Map<String,String> mountOptions) throws IOException {  if (readonly)   fs=new ReadOnlyFileSystem(fs);  Fuse.mount(new FuseFileSystemProvider(fs,log).log(log),mountPoint,false,log,mountOptions);}  }
class C{  protected SVGStyleSheetProcessingInstruction(){}  }
class C{  public boolean equals(int i){  return right.equals(i);}  }
class C{  @Override public void onChangedAdded(final RPObject object,final RPObject changes){  super.onChangedAdded(object,changes);  if (changes.has("hidden")) {    hidden=true;  }}  }
class C{  public void dismiss(){  dismissInternal(false);}  }
class C{  public final void testValidateFails(){  DomainNameValidator domainNameValidator=new DomainNameValidator("foo");  assertFalse(domainNameValidator.validate("foo.t.t.c"));  assertFalse(domainNameValidator.validate("foo,com"));  assertFalse(domainNameValidator.validate("foo"));  assertFalse(domainNameValidator.validate("foo.123"));  assertFalse(domainNameValidator.validate(".com"));  assertFalse(domainNameValidator.validate("foo.a"));  assertFalse(domainNameValidator.validate("foo.com/users"));  assertFalse(domainNameValidator.validate("-foo.com"));  assertFalse(domainNameValidator.validate("foo-.com"));  assertFalse(domainNameValidator.validate("sub.-foo.com"));  assertFalse(domainNameValidator.validate("sub.foo-.com"));}  }
class C{  private void initializeLiveAttributes(){  in=createLiveAnimatedString(null,SVG_IN_ATTRIBUTE);  surfaceScale=createLiveAnimatedNumber(null,SVG_SURFACE_SCALE_ATTRIBUTE,1f);  diffuseConstant=createLiveAnimatedNumber(null,SVG_DIFFUSE_CONSTANT_ATTRIBUTE,1f);}  }
class C{  public SimpleIntegerProperty qosProperty(){  return this.qos;}  }
class C{  public void waitResponse(SipTransactionContext ctx,long timeout){  ctx.waitResponse(timeout);  SipMessage message=ctx.getMessageReceived();  if (!(message instanceof SipRequest) || !ctx.isSipResponse()) {    return;  }  String method=((SipRequest)message).getMethod();  SipResponse response=ctx.getSipResponse();  if (response == null) {    return;  }  if (!Request.REGISTER.equals(method)) {    WarningHeader warn=(WarningHeader)response.getHeader(WarningHeader.NAME);    if (Response.FORBIDDEN == ctx.getStatusCode() && warn == null) {      mNetworkInterface.getRegistrationManager().restart();    }  }  if (!Request.REGISTER.equals(method)) {    return;  }  KeepAliveManager keepAliveManager=mSipInterface.getKeepAliveManager();  if (keepAliveManager == null) {    return;  }  ListIterator<ViaHeader> iterator=response.getViaHeaders();  if (!iterator.hasNext()) {    return;  }  ViaHeader respViaHeader=iterator.next();  String keepStr=respViaHeader.getParameter("keep");  if (keepStr == null) {    return;  }  try {    long viaKeep=Integer.parseInt(keepStr) * SECONDS_TO_MILLISECONDS_CONVERSION_RATE;    if (viaKeep > 0) {      keepAliveManager.setPeriod(viaKeep);    } else     if (viaKeep == 0) {      keepAliveManager.setPeriod(mRcsSettings.getSipKeepAlivePeriod());    }  } catch (  NumberFormatException e) {    keepAliveManager.setPeriod(mRcsSettings.getSipKeepAlivePeriod());  }}  }
class C{  protected void flow(Env<AttrContext> env,Queue<Env<AttrContext>> results){  try {    if (shouldStop(CompileState.FLOW))     return;    if (relax || compileStates.isDone(env,CompileState.FLOW)) {      results.add(env);      return;    }    if (verboseCompilePolicy)     printNote("[flow " + env.enclClass.sym + "]");    JavaFileObject prev=log.useSource(env.enclClass.sym.sourcefile != null ? env.enclClass.sym.sourcefile : env.toplevel.sourcefile);    try {      make.at(Position.FIRSTPOS);      TreeMaker localMake=make.forToplevel(env.toplevel);      flow.analyzeTree(env,localMake);      compileStates.put(env,CompileState.FLOW);      if (shouldStop(CompileState.FLOW))       return;      results.add(env);    }  finally {      log.useSource(prev);    }  }  finally {    if (!taskListener.isEmpty()) {      TaskEvent e=new TaskEvent(TaskEvent.Kind.ANALYZE,env.toplevel,env.enclClass.sym);      taskListener.finished(e);    }  }}  }
class C{  private static void trial_search(ICollectionSearch<String> collection,int num){  TrialSuite searchTS=new TrialSuite();  System.out.println("Search trial:" + collection);  for (int t=0; t < NUM_TRIALS; t++) {    int found=0;    long before=System.currentTimeMillis();    for (int w=0; w < fullWords.length; w++) {      if (collection.exists(fullWords[w])) {        found++;      }    }    long after=System.currentTimeMillis();    searchTS.addTrial(num,before,after);    if (num != found) {      System.err.println("Error in search: proper number of elements not found:" + found);    }  }  System.out.println(searchTS.computeTable());}  }
class C{  int runTest(Configuration conf,String[] args,OwlTest test) throws Exception {  conf.setInt(MRReasoningUtils.STEP_PROP,0);  conf.setInt(MRReasoningUtils.SCHEMA_UPDATE_PROP,0);  conf.setBoolean(MRReasoningUtils.DEBUG_FLAG,true);  conf.setBoolean(MRReasoningUtils.OUTPUT_FLAG,true);  Repository repo=MRReasoningUtils.getRepository(conf);  repo.initialize();  RepositoryConnection conn=repo.getConnection();  conn.clear();  conn.add(new StringReader(test.premise),"",RDFFormat.RDFXML);  conn.close();  repo.shutDown();  ReasoningDriver reasoner=new ReasoningDriver();  int result=ToolRunner.run(conf,reasoner,args);  test.success=(result == 0);  if (test.types.contains(TEST_INCONSISTENCY)) {    test.success=test.success && reasoner.hasInconsistencies();  }  if (test.types.contains(TEST_CONSISTENCY)) {    test.success=test.success && !reasoner.hasInconsistencies();  }  if (test.types.contains(TEST_NONENTAILMENT) || test.types.contains(TEST_ENTAILMENT)) {    System.out.println("Reading inferred triples...");    Schema schema=MRReasoningUtils.loadSchema(conf);    FileSystem fs=FileSystem.get(conf);    Path path=MRReasoningUtils.getOutputPath(conf,"final");    OutputCollector inferred=new OutputCollector();    NTriplesParser parser=new NTriplesParser();    parser.setRDFHandler(inferred);    if (fs.isDirectory(path)) {      for (      FileStatus status : fs.listStatus(path)) {        String s=status.getPath().getName();        if (s.startsWith(MRReasoningUtils.INCONSISTENT_OUT) || s.startsWith(MRReasoningUtils.DEBUG_OUT)) {          continue;        }        BufferedReader br=new BufferedReader(new InputStreamReader(fs.open(status.getPath())));        parser.parse(br,"");        br.close();      }    }    MRReasoningUtils.deleteIfExists(conf,"final");    test.inferred.addAll(inferred.triples);    if (test.types.contains(TEST_ENTAILMENT)) {      for (      Statement st : test.expected) {        Fact fact=new Fact(st);        if (!test.inferred.contains(st) && !triviallyTrue(fact.getTriple(),schema) && !schema.containsTriple(fact.getTriple())) {          test.error.add(st);        }      }    }    if (test.types.contains(TEST_NONENTAILMENT)) {      for (      Statement st : test.unexpected) {        Fact fact=new Fact(st);        if (test.inferred.contains(st) || schema.containsTriple(fact.getTriple())) {          test.error.add(st);        }      }    }    test.success=test.success && test.error.isEmpty();  }  conf.setBoolean(MRReasoningUtils.DEBUG_FLAG,false);  MRReasoningUtils.clean(conf);  return result;}  }
class C{  synchronized void discardQueue(){  queue.removeAllElements();  for (Enumeration e=running.elements(); e.hasMoreElements(); ) {    ResourceThread t=(ResourceThread)e.nextElement();    t.cancel();  }  running.removeAllElements();  bgImageCompsSelected.removeAllElements();  bgImageCompsUnselected.removeAllElements();  bgImageCompsPressed.removeAllElements();  threadCount=0;  cssCount=-1;  started=false;}  }
class C{  public final void testPSSParameterSpec0204(){  try {    new PSSParameterSpec("SHA-1","MGF1",MGF1ParameterSpec.SHA1,-20,1);    fail("Expected IAE not thrown");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public void init(Table t,Graph g,Class tupleType){  if (m_table != null) {    throw new IllegalStateException("This TupleManager has already been initialized");  }  m_table=t;  m_graph=g;  m_tupleType=tupleType;  m_tuples=null;}  }
class C{  public void testLoadingWithLocalSubstitutions() throws Exception {  Properties props=new Properties();  props.setProperty("a","y");  props.setProperty("b1","a${a}");  props.setProperty("b2","a$a");  System.setProperty("a","x");  int count=TungstenProperties.substituteSystemValues(props);  Assert.assertEquals("substitution count",1,count);  Assert.assertEquals("y",props.getProperty("a"));  Assert.assertEquals("ay",props.getProperty("b1"));  Assert.assertEquals("a$a",props.getProperty("b2"));}  }
class C{  public void testStartWithOneExpandedWarDeployed() throws Exception {  if (getContainer().getId().startsWith("geronimo")) {    return;  }  File artifactDir=new File(getTestData().targetDir).getParentFile();  Expand expandTask=(Expand)new AntUtils().createProject().createTask("unwar");  expandTask.setDest(new File(artifactDir,"expanded-war"));  expandTask.setSrc(new File(getTestData().getTestDataFileFor("expanded-war")));  expandTask.execute();  Deployable war=new DefaultDeployableFactory().createDeployable(getContainer().getId(),new File(artifactDir,"expanded-war").getPath(),DeployableType.WAR);  getLocalContainer().getConfiguration().addDeployable(war);  URL warPingURL=new URL("http://localhost:" + getTestData().port + "/expanded-war"+ "/index.html");  startAndStop(warPingURL);}  }
class C{  private void updateUnmanagedVolumeAndInitiatorCounts(StoragePort sp,boolean countMetaMembers,StringMap dbMetrics){  Long volumeCount=0L;  Long initiatorCount=0L;  URIQueryResultList queryResult=new URIQueryResultList();  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getUnManagedMaskByPort(sp.getId().toString()),queryResult);  Iterator<URI> maskIt=queryResult.iterator();  while (maskIt.hasNext()) {    UnManagedExportMask umask=_dbClient.queryObject(UnManagedExportMask.class,maskIt.next());    if (umask != null && umask.getInactive() == false && !checkForMatchingExportMask(umask.getMaskName(),umask.getNativeId(),umask.getStorageSystemUri())) {      StringSet unmanagedVolumeUris=umask.getUnmanagedVolumeUris();      Long unmanagedVolumes=(unmanagedVolumeUris != null ? unmanagedVolumeUris.size() : 0L);      if (countMetaMembers && unmanagedVolumeUris != null) {        unmanagedVolumes=0L;        for (        String unmanagedVolumeUri : unmanagedVolumeUris) {          UnManagedVolume uVolume=_dbClient.queryObject(UnManagedVolume.class,URI.create(unmanagedVolumeUri));          Long metaMemberCount=getUnManagedVolumeMetaMemberCount(uVolume);          unmanagedVolumes+=(metaMemberCount != null ? metaMemberCount : 1L);        }      }      Long unmanagedInitiators=0L;      ZoneInfoMap zoneInfoMap=umask.getZoningMap();      if (!zoneInfoMap.isEmpty()) {        for (        ZoneInfo info : zoneInfoMap.values()) {          if (info.getPortWwn().equals(sp.getPortNetworkId())) {            unmanagedInitiators+=1L;          }        }      } else {        unmanagedInitiators+=1L;      }      _log.info(String.format("Port %s UnManagedExportMask %s " + "unmanagedVolumes %d unmanagedInitiators %d",sp.getPortName(),umask.getMaskName(),unmanagedVolumes,unmanagedInitiators));      volumeCount+=unmanagedVolumes;      initiatorCount+=unmanagedInitiators;    }  }  MetricsKeys.putLong(MetricsKeys.unmanagedInitiatorCount,initiatorCount,dbMetrics);  MetricsKeys.putLong(MetricsKeys.unmanagedVolumeCount,volumeCount,dbMetrics);}  }
class C{  public static void closeBufferedReader(BufferedReader stream,String tag){  if (stream != null) {    try {      stream.close();    } catch (    IOException e) {      Log.e(tag,"Exception occured when closing BufferedReader." + e);    }  }}  }
class C{  public ListBasedSpreadsheetPanel(SpreadsheetService service,URL listFeedUrl){  this.service=service;  this.listFeedUrl=listFeedUrl;  model=new ListTableModel();  initializeGui();}  }
class C{  public void sort(){  if (!sorted) {    Collections.sort(samples);    sorted=true;  }}  }
class C{  @Override protected Revision readRevision() throws IOException, ArticleReaderException {  Revision rev=super.readRevision();  this.readRevisionCounter++;  return rev;}  }
class C{  public boolean isMandatory(){  return m_combo.isMandatory();}  }
class C{  public DenseDoubleMatrix3D(int slices,int rows,int columns){  setUp(slices,rows,columns);  this.elements=new double[slices * rows * columns];}  }
class C{  public void update(byte in){  M[mOff++]=in;  if (mOff == 16) {    processCheckSum(M);    processBlock(M);    mOff=0;  }}  }
class C{  public void shutdown(){  setShutdownInProgress(true);  try {    servSock.close();  } catch (  IOException e) {  }  thread.interrupt();  try {    thread.join();  } catch (  InterruptedException e) {  }  debug("Main Monitor Thread Shut Down");  while (true) {    SlaveConnection sc=null;synchronized (allSlaves) {      if (allSlaves.isEmpty())       break;      sc=(SlaveConnection)(allSlaves.removeFirst());    }    debug("Shutting Down Slave" + sc);    if (sc != null)     sc.shutdown(state);    debug("Shut Down Slave" + sc);  }synchronized (allSlaves) {    notifyMonitor(allSlaves);  }  pool.killAll();  debug("Shut Down Completed");}  }
class C{  public static List<org.oscm.vo.VOEventDefinition> convertToApiVOEventDefinition(List<org.oscm.internal.vo.VOEventDefinition> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.vo.VOEventDefinition> newVO=new ArrayList<org.oscm.vo.VOEventDefinition>();  for (  org.oscm.internal.vo.VOEventDefinition tmp : oldVO) {    newVO.add(convertToApi(tmp));  }  return newVO;}  }
class C{  public boolean canTickRandomly(){  return false;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.titlePaint=SerialUtilities.readPaint(stream);  this.subtitlePaint=SerialUtilities.readPaint(stream);  this.chartBackgroundPaint=SerialUtilities.readPaint(stream);  this.legendBackgroundPaint=SerialUtilities.readPaint(stream);  this.legendItemPaint=SerialUtilities.readPaint(stream);  this.plotBackgroundPaint=SerialUtilities.readPaint(stream);  this.plotOutlinePaint=SerialUtilities.readPaint(stream);  this.labelLinkPaint=SerialUtilities.readPaint(stream);  this.baselinePaint=SerialUtilities.readPaint(stream);  this.domainGridlinePaint=SerialUtilities.readPaint(stream);  this.rangeGridlinePaint=SerialUtilities.readPaint(stream);  this.crosshairPaint=SerialUtilities.readPaint(stream);  this.axisLabelPaint=SerialUtilities.readPaint(stream);  this.tickLabelPaint=SerialUtilities.readPaint(stream);  this.itemLabelPaint=SerialUtilities.readPaint(stream);  this.shadowPaint=SerialUtilities.readPaint(stream);  this.thermometerPaint=SerialUtilities.readPaint(stream);  this.wallPaint=SerialUtilities.readPaint(stream);  this.errorIndicatorPaint=SerialUtilities.readPaint(stream);  this.gridBandPaint=SerialUtilities.readPaint(stream);  this.gridBandAlternatePaint=SerialUtilities.readPaint(stream);}  }
class C{  private Map loadJavaAPIMasterDataMap(final String className,final String methodName,final String parametertype[],final String parametervalue[]) throws ApplicationRuntimeException {  Map dataMap=new HashMap();  try {    if (parametertype.length != parametervalue.length)     throw new ApplicationRuntimeException("Number of parameter types and parameter values doesnt match");    final Class cls=Class.forName(className);    final Method method=cls.getMethod(methodName,loadMethodParameter(parametertype));    dataMap=(HashMap)method.invoke(cls.newInstance(),loadMethodArguments(parametertype,parametervalue));  } catch (  final Exception e) {    LOGGER.error("Error occurred in EgovMasterDataCaching loadJavaAPIMasterDataMap",e);    throw new ApplicationRuntimeException("Error occurred in EgovMasterDataCaching loadJavaAPIMasterDataMap",e);  }  return dataMap;}  }
class C{  public boolean hasSaveDestination(){  return processLocation != null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public boolean isLoggable(LogRecord record){  return super.isLoggable(record);}  }
class C{  @Override public void endCamera(){  if (!manipulatingCamera) {    throw new RuntimeException("Cannot call endCamera() " + "without first calling beginCamera()");  }  camera.set(modelview);  cameraInv.set(modelviewInv);  manipulatingCamera=false;}  }
class C{  public static MPrintFormatItem createFromColumn(MPrintFormat format,int AD_Column_ID,int seqNo){  MPrintFormatItem pfi=new MPrintFormatItem(format.getCtx(),0,format.get_TrxName());  pfi.setAD_PrintFormat_ID(format.getAD_PrintFormat_ID());  pfi.setClientOrg(format);  pfi.setAD_Column_ID(AD_Column_ID);  pfi.setPrintFormatType(PRINTFORMATTYPE_Field);  String sql="SELECT c.ColumnName,e.Name,e.PrintName, " + "c.AD_Reference_ID,c.IsKey,c.SeqNo " + "FROM AD_Column c, AD_Element e "+ "WHERE c.AD_Column_ID=?"+ " AND c.AD_Element_ID=e.AD_Element_ID";  Language language=format.getLanguage();  boolean trl=!Env.isMultiLingualDocument(format.getCtx()) && !language.isBaseLanguage();  if (trl)   sql="SELECT c.ColumnName,e.Name,e.PrintName, " + "c.AD_Reference_ID,c.IsKey,c.SeqNo " + "FROM AD_Column c, AD_Element_Trl e "+ "WHERE c.AD_Column_ID=?"+ " AND c.AD_Element_ID=e.AD_Element_ID"+ " AND e.AD_Language=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,format.get_TrxName());    pstmt.setInt(1,AD_Column_ID);    if (trl)     pstmt.setString(2,language.getAD_Language());    rs=pstmt.executeQuery();    if (rs.next()) {      String ColumnName=rs.getString(1);      pfi.setName(rs.getString(2));      pfi.setPrintName(rs.getString(3));      int displayType=rs.getInt(4);      if (DisplayType.isNumeric(displayType))       pfi.setFieldAlignmentType(FIELDALIGNMENTTYPE_TrailingRight); else       if (displayType == DisplayType.Text || displayType == DisplayType.Memo)       pfi.setFieldAlignmentType(FIELDALIGNMENTTYPE_Block); else       pfi.setFieldAlignmentType(FIELDALIGNMENTTYPE_LeadingLeft);      boolean isKey="Y".equals(rs.getString(5));      if (isKey || ColumnName.startsWith("Created") || ColumnName.startsWith("Updated")|| ColumnName.equals("AD_Client_ID")|| ColumnName.equals("AD_Org_ID")|| ColumnName.equals("IsActive")|| displayType == DisplayType.Button || displayType == DisplayType.Binary || displayType == DisplayType.ID || displayType == DisplayType.Image || displayType == DisplayType.RowID || seqNo == 0) {        pfi.setIsPrinted(false);        pfi.setSeqNo(0);      } else {        pfi.setIsPrinted(true);        pfi.setSeqNo(seqNo);      }      int idSeqNo=rs.getInt(6);      if (idSeqNo > 0) {        pfi.setIsOrderBy(true);        pfi.setSortNo(idSeqNo);      }    } else     s_log.log(Level.SEVERE,"Not Found AD_Column_ID=" + AD_Column_ID + " Trl="+ trl+ " "+ language.getAD_Language());  } catch (  SQLException e) {    s_log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (!pfi.save())   return null;  return pfi;}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new FileWriter(journalFileTmp),IO_BUFFER_SIZE);  writer.write(MAGIC);  writer.write("\n");  writer.write(VERSION_1);  writer.write("\n");  writer.write(Integer.toString(appVersion));  writer.write("\n");  writer.write(Integer.toString(valueCount));  writer.write("\n");  writer.write("\n");  for (  Entry entry : lruEntries.values()) {    if (entry.currentEditor != null) {      writer.write(DIRTY + ' ' + entry.key+ '\n');    } else {      writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');    }  }  writer.close();  journalFileTmp.renameTo(journalFile);  journalWriter=new BufferedWriter(new FileWriter(journalFile,true),IO_BUFFER_SIZE);}  }
class C{  private void checkFailedOrCancelledCount(final State current){  Operation.CompletionHandler handler=null;  QueryTask.QuerySpecification spec=QueryTaskUtils.buildChildServiceTaskStatusQuerySpec(this.getSelfLink(),ImageDatastoreSweeperService.State.class,TaskState.TaskStage.FAILED,TaskState.TaskStage.CANCELLED);  this.sendQuery(spec,handler);}  }
class C{  public void newMethod() throws IOException {  writeCode(CALL_NEW_METHOD);}  }
class C{  public void updateDrawerIfNeeded(){  if (muninFoo.getMasters().size() == 0)   drawerHelper.reset();}  }
class C{  public void removeModule(final MemoryModule module){  Preconditions.checkNotNull(module,"IE00758: Module argument can not be null");  if (!addressSpaceModules.remove(module)) {    throw new IllegalStateException("IE00759: Module was not part of this process");  }  moduleAddresses.remove(module.getBaseAddress().getAddress());  moduleByAddress.remove(module.getBaseAddress().getAddress());  for (  final ProcessManagerListener listener : listeners) {    try {      listener.removedModule(module);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  void update(long index,Instant instant,Type type){  this.index=index;  this.type=type;  clock.set(instant);}  }
class C{  protected void validatePatch(State current,State patch){  checkState(current.taskInfo.stage.ordinal() < TaskState.TaskStage.FINISHED.ordinal(),"Invalid stage update. Can not patch anymore when in final stage [%s]",current.taskInfo.stage);  if (patch.taskInfo != null) {    checkState(patch.taskInfo.stage != null,"Invalid stage update. 'stage' can not be null if taskInfo is provided");    checkState(patch.taskInfo.stage.ordinal() >= current.taskInfo.stage.ordinal(),"Invalid stage update. Can not revert to %s from %s",patch.taskInfo.stage,current.taskInfo.stage);    if (patch.taskInfo.subStage != null && current.taskInfo.subStage != null) {      checkState(patch.taskInfo.subStage.ordinal() >= current.taskInfo.subStage.ordinal(),"Invalid stage update. 'subStage' cannot move back.");    }  }  checkArgument(patch.imageWatermarkTime == null,"imageWatermarkTime cannot be changed.");}  }
class C{  public static IgfsDirectoryInfo createDirectory(IgniteUuid id,@Nullable Map<String,IgfsListingEntry> listing,@Nullable Map<String,String> props,long createTime,long modificationTime){  return new IgfsDirectoryInfo(id,listing,props,createTime,modificationTime);}  }
class C{  public void disconnect(LogConnection client) throws ReplicatorException {  client.release();}  }
class C{  public Terrain(int terrainSize,float scale,float minY,float maxY,String heightMapFile,String textureFile,int textInc) throws Exception {  this.terrainSize=terrainSize;  gameItems=new GameItem[terrainSize * terrainSize];  BufferedImage heightMapImage=ImageIO.read(getClass().getResourceAsStream(heightMapFile));  verticesPerCol=heightMapImage.getWidth() - 1;  verticesPerRow=heightMapImage.getHeight() - 1;  heightMapMesh=new HeightMapMesh(minY,maxY,heightMapImage,textureFile,textInc);  boundingBoxes=new Rectangle2D.Float[terrainSize][terrainSize];  for (int row=0; row < terrainSize; row++) {    for (int col=0; col < terrainSize; col++) {      float xDisplacement=(col - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getXLength();      float zDisplacement=(row - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getZLength();      GameItem terrainBlock=new GameItem(heightMapMesh.getMesh());      terrainBlock.setScale(scale);      terrainBlock.setPosition(xDisplacement,0,zDisplacement);      gameItems[row * terrainSize + col]=terrainBlock;      boundingBoxes[row][col]=getBoundingBox(terrainBlock);    }  }}  }
class C{  protected Reader createReader(InputStream in) throws IOException {  return new BufferedReader(new InputStreamReader(in));}  }
class C{  public void popReferenceCenter(DrawContext dc){  if (dc == null) {    String message=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (dc.getGL() == null) {    String message=Logging.getMessage("nullValue.DrawingContextGLIsNull");    Logging.logger().severe(message);    throw new IllegalStateException(message);  }  GL2 gl=dc.getGL().getGL2();  OGLStackHandler ogsh=new OGLStackHandler();  try {    ogsh.pushAttrib(gl,GL2.GL_TRANSFORM_BIT);    gl.glMatrixMode(GL2.GL_MODELVIEW);    gl.glPopMatrix();  }  finally {    ogsh.pop(gl);  }}  }
class C{  public ReaderToTextPane(Reader input,JTextPane output){  this(input,output,Color.BLACK);}  }
class C{  public static byte flags(boolean isDir,boolean isFile){  byte res=isDir ? FLAG_DIR : 0;  if (isFile)   res|=FLAG_FILE;  return res;}  }
class C{  public void addCollider(Triple colliderTrip){  colliders.add(colliderTrip);}  }
class C{  public Set<String> addSpriteFrames(HashMap<String,Object> dictionary,CCTexture2D texture){  @SuppressWarnings("unchecked") HashMap<String,Object> metadataDict=(HashMap<String,Object>)dictionary.get("metadata");  @SuppressWarnings("unchecked") HashMap<String,Object> framesDict=(HashMap<String,Object>)dictionary.get("frames");  int format=0;  if (metadataDict != null)   format=(Integer)metadataDict.get("format");  if (!(format >= 0 && format <= 3)) {    ccMacros.CCLOGERROR("CCSpriteFrameCache","Unsupported Zwoptex plist file format.");  }  for (  Entry<String,Object> frameDictEntry : framesDict.entrySet()) {    @SuppressWarnings("unchecked") HashMap<String,Object> frameDict=(HashMap<String,Object>)frameDictEntry.getValue();    CCSpriteFrame spriteFrame=null;    if (format == 0) {      float x=((Number)frameDict.get("x")).floatValue();      float y=((Number)frameDict.get("y")).floatValue();      float w=((Number)frameDict.get("width")).floatValue();      float h=((Number)frameDict.get("height")).floatValue();      float ox=((Number)frameDict.get("offsetX")).floatValue();      float oy=((Number)frameDict.get("offsetY")).floatValue();      int ow=0;      int oh=0;      try {        ow=((Number)frameDict.get("originalWidth")).intValue();        oh=((Number)frameDict.get("originalHeight")).intValue();      } catch (      Exception e) {        ccMacros.CCLOG("cocos2d","WARNING: originalWidth/Height not found on the CCSpriteFrame. AnchorPoint won't work as expected. Regenerate the .plist");      }      ow=Math.abs(ow);      oh=Math.abs(oh);      spriteFrame=CCSpriteFrame.frame(texture,CGRect.make(x,y,w,h),false,CGPoint.make(ox,oy),CGSize.make(ow,oh));    } else     if (format == 1 || format == 2) {      CGRect frame=GeometryUtil.CGRectFromString((String)frameDict.get("frame"));      boolean rotated=false;      if (format == 2)       rotated=(Boolean)frameDict.get("rotated");      CGPoint offset=GeometryUtil.CGPointFromString((String)frameDict.get("offset"));      CGSize sourceSize=GeometryUtil.CGSizeFromString((String)frameDict.get("sourceSize"));      spriteFrame=CCSpriteFrame.frame(texture,frame,rotated,offset,sourceSize);    } else     if (format == 3) {      CGSize spriteSize=GeometryUtil.CGSizeFromString((String)frameDict.get("spriteSize"));      CGPoint spriteOffset=GeometryUtil.CGPointFromString((String)frameDict.get("spriteOffset"));      CGSize spriteSourceSize=GeometryUtil.CGSizeFromString((String)frameDict.get("spriteSourceSize"));      CGRect textureRect=GeometryUtil.CGRectFromString((String)frameDict.get("textureRect"));      boolean textureRotated=(Boolean)frameDict.get("textureRotated");      spriteFrame=CCSpriteFrame.frame(texture,CGRect.make(textureRect.origin.x,textureRect.origin.y,spriteSize.width,spriteSize.height),textureRotated,spriteOffset,spriteSourceSize);    }    spriteFrames.put(frameDictEntry.getKey(),spriteFrame);  }  return framesDict.keySet();}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.DEF_ROOT;}  }
class C{  protected void startNode(int node) throws org.xml.sax.SAXException {  if (m_contentHandler instanceof NodeConsumer) {  }switch (m_dtm.getNodeType(node)) {case DTM.COMMENT_NODE:{      XMLString data=m_dtm.getStringValue(node);      if (m_contentHandler instanceof LexicalHandler) {        LexicalHandler lh=((LexicalHandler)this.m_contentHandler);        data.dispatchAsComment(lh);      }    }  break;case DTM.DOCUMENT_FRAGMENT_NODE:break;case DTM.DOCUMENT_NODE:this.m_contentHandler.startDocument();break;case DTM.ELEMENT_NODE:DTM dtm=m_dtm;for (int nsn=dtm.getFirstNamespaceNode(node,true); DTM.NULL != nsn; nsn=dtm.getNextNamespaceNode(node,nsn,true)) {String prefix=dtm.getNodeNameX(nsn);this.m_contentHandler.startPrefixMapping(prefix,dtm.getNodeValue(nsn));}String ns=dtm.getNamespaceURI(node);if (null == ns) ns="";org.xml.sax.helpers.AttributesImpl attrs=new org.xml.sax.helpers.AttributesImpl();for (int i=dtm.getFirstAttribute(node); i != DTM.NULL; i=dtm.getNextAttribute(i)) {attrs.addAttribute(dtm.getNamespaceURI(i),dtm.getLocalName(i),dtm.getNodeName(i),"CDATA",dtm.getNodeValue(i));}this.m_contentHandler.startElement(ns,m_dtm.getLocalName(node),m_dtm.getNodeName(node),attrs);break;case DTM.PROCESSING_INSTRUCTION_NODE:{String name=m_dtm.getNodeName(node);if (name.equals("xslt-next-is-raw")) {nextIsRaw=true;} else {this.m_contentHandler.processingInstruction(name,m_dtm.getNodeValue(node));}}break;case DTM.CDATA_SECTION_NODE:{boolean isLexH=(m_contentHandler instanceof LexicalHandler);LexicalHandler lh=isLexH ? ((LexicalHandler)this.m_contentHandler) : null;if (isLexH) {lh.startCDATA();}dispatachChars(node);{if (isLexH) {lh.endCDATA();}}}break;case DTM.TEXT_NODE:{if (nextIsRaw) {nextIsRaw=false;m_contentHandler.processingInstruction(javax.xml.transform.Result.PI_DISABLE_OUTPUT_ESCAPING,"");dispatachChars(node);m_contentHandler.processingInstruction(javax.xml.transform.Result.PI_ENABLE_OUTPUT_ESCAPING,"");} else {dispatachChars(node);}}break;case DTM.ENTITY_REFERENCE_NODE:{if (m_contentHandler instanceof LexicalHandler) {((LexicalHandler)this.m_contentHandler).startEntity(m_dtm.getNodeName(node));} else {}}break;default :}}  }
class C{  public static Document parse(Reader reader,boolean validating,boolean namespaceAware) throws SAXException, IOException, ParserConfigurationException {  return parse(reader,validating,namespaceAware,false);}  }
class C{  public PolynomialGF2mSmallM[] modPolynomialToFracton(PolynomialGF2mSmallM g){  int dg=g.degree >> 1;  int[] a0=normalForm(g.coefficients);  int[] a1=mod(coefficients,g.coefficients);  int[] b0={0};  int[] b1={1};  while (computeDegree(a1) > dg) {    int[][] q=div(a0,a1);    a0=a1;    a1=q[1];    int[] b2=add(b0,modMultiply(q[0],b1,g.coefficients));    b0=b1;    b1=b2;  }  return new PolynomialGF2mSmallM[]{new PolynomialGF2mSmallM(field,a1),new PolynomialGF2mSmallM(field,b1)};}  }
class C{  private boolean checkOrgInStoredList(long orgId,List<Organisation_Users> org) throws Exception {  for (  Organisation_Users orgUsers : org) {    if (orgUsers.getOrganisation().getOrganisation_id().equals(orgId)) {      return true;    }  }  return false;}  }
class C{  public void paintProgressBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public IdItem(CstType type){  if (type == null) {    throw new NullPointerException("type == null");  }  this.type=type;}  }
class C{  public synchronized Record first(){  if (rrs.size() == 0)   throw new IllegalStateException("rrset is empty");  return (Record)rrs.get(0);}  }
class C{  private List<String> readLines(Reader reader){  List<String> lines=new ArrayList<String>();  BufferedReader bufferedReader=new BufferedReader(reader);  String line;  try {    while ((line=bufferedReader.readLine()) != null) {      lines.add(line);    }  } catch (  IOException e) {    String message=resource == null ? "Unable to parse lines" : "Unable to parse " + resource.getLocation() + " ("+ resource.getLocationOnDisk()+ ")";    throw new CassandraMigrationException(message,e);  }  return lines;}  }
class C{  @Override public String toString(){  return "CUsurfObject[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  public boolean hasScheme(){  return super.hasAttribute(SCHEME);}  }
class C{  public TaskHandle enqueuePollTask(JobReference jobRef){  return enqueuer.enqueue(getQueue(QUEUE),createCommonPollTask(jobRef).method(Method.GET));}  }
class C{  public boolean findDeadlock(){  long[] tids;  if (findDeadlocksMethodName.equals("findDeadlockedThreads") && tmbean.isSynchronizerUsageSupported()) {    tids=tmbean.findDeadlockedThreads();    if (tids == null) {      return false;    }    System.out.println("Deadlock found :-");    ThreadInfo[] infos=tmbean.getThreadInfo(tids,true,true);    for (    ThreadInfo ti : infos) {      printThreadInfo(ti);      printMonitorInfo(ti);      printLockInfo(ti.getLockedSynchronizers());      System.out.println();    }  } else {    tids=tmbean.findMonitorDeadlockedThreads();    if (tids == null) {      return false;    }    ThreadInfo[] infos=tmbean.getThreadInfo(tids,Integer.MAX_VALUE);    for (    ThreadInfo ti : infos) {      printThreadInfo(ti);    }  }  return true;}  }
class C{  @SuppressWarnings("unchecked") public void writeDouble(double x) throws SQLException {  attribs.add(Double.valueOf(x));}  }
class C{  ElemTemplateElement popElemTemplateElement(){  return (ElemTemplateElement)m_elems.pop();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:16.602 -0500",hash_original_method="B28E495795E9250815D18C95A5C9BAB3",hash_generated_method="BE47B1335DEB2B492ACCC080BDC577FE") public boolean decodeContentLocation(int startIndex){  return decodeTextString(startIndex);}  }
class C{  OneStepIterator(Compiler compiler,int opPos,int analysis) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis);  int firstStepPos=OpMap.getFirstChildPos(opPos);  m_axis=WalkerFactory.getAxisFromStep(compiler,firstStepPos);}  }
class C{  protected int nextInDoctype() throws IOException, XMLException {switch (current) {case 0x9:case 0xA:case 0xD:case 0x20:    do {      nextChar();    } while (current != -1 && XMLUtilities.isXMLSpace((char)current));  return LexicalUnits.S;case '>':nextChar();context=TOP_LEVEL_CONTEXT;return LexicalUnits.END_CHAR;case 'S':return readIdentifier("YSTEM",LexicalUnits.SYSTEM_IDENTIFIER,LexicalUnits.NAME);case 'P':return readIdentifier("UBLIC",LexicalUnits.PUBLIC_IDENTIFIER,LexicalUnits.NAME);case '"':attrDelimiter='"';return readString();case '\'':attrDelimiter='\'';return readString();case '[':nextChar();context=DTD_DECLARATIONS_CONTEXT;inDTD=true;return LexicalUnits.LSQUARE_BRACKET;default :return readName(LexicalUnits.NAME);}}  }
class C{  public static void error(String msg,Throwable ex){  error(msg,ex,true);}  }
class C{  public void replace(int offset,int length,View[] views){synchronized (stats) {    for (int i=0; i < length; i++) {      ChildState cs=stats.remove(offset);      float csSpan=cs.getMajorSpan();      cs.getChildView().setParent(null);      if (csSpan != 0) {        majorRequirementChange(cs,-csSpan);      }    }    LayoutQueue q=getLayoutQueue();    if (views != null) {      for (int i=0; i < views.length; i++) {        ChildState s=createChildState(views[i]);        stats.add(offset + i,s);        q.addTask(s);      }    }    q.addTask(flushTask);  }}  }
class C{  @Override public boolean onInterceptTouchEvent(MotionEvent ev){  try {    return super.onInterceptTouchEvent(ev);  } catch (  IllegalArgumentException e) {    e.printStackTrace();    return false;  }}  }
class C{  public static float[] toFloatArray(Number[] array){  float[] result=new float[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].floatValue();  }  return result;}  }
class C{  public void addZoomListener(ZoomListener listener){  if (mPinchZoom != null) {    mPinchZoom.addZoomListener(listener);  }}  }
class C{  private <T>T testAppend(T curVal,T newVal,boolean append) throws IgniteCheckedException, EntryProcessorException {  GridRestCommandHandler hnd=new GridCacheCommandHandler(((IgniteKernal)grid()).context());  String key=UUID.randomUUID().toString();  GridRestCacheRequest req=new GridRestCacheRequest();  req.command(append ? GridRestCommand.CACHE_APPEND : GridRestCommand.CACHE_PREPEND);  req.key(key);  req.value(newVal);  assertFalse("Expects failure due to no value in cache.",(Boolean)hnd.handleAsync(req).get().getResponse());  T res;  try {    jcache().put(key,curVal);    assertTrue((Boolean)hnd.handleAsync(req).get().getResponse());  }  finally {    res=(T)jcache().getAndRemove(key);  }  return res;}  }
class C{  protected void onPauseWebRender(){  onPauseWebRender(false);}  }
class C{  public static long absoluteDayFromDateValue(long dateValue){  long y=yearFromDateValue(dateValue);  int m=monthFromDateValue(dateValue);  int d=dayFromDateValue(dateValue);  if (m <= 2) {    y--;    m+=12;  }  long a=((y * 2922L) >> 3) + DAYS_OFFSET[m - 3] + d - 719484;  if (y <= 1582 && ((y < 1582) || (m * 100 + d < 1005))) {    a+=13;  } else   if (y < 1901 || y > 2099) {    a+=(y / 400) - (y / 100) + 15;  }  return a;}  }
class C{  private static long createLongSeed(final byte[] seed){  if (seed == null || seed.length != SEED_SIZE_BYTES) {    throw new IllegalArgumentException("Java RNG requires a 64-bit (8-byte) seed.");  }  long value=0;  for (int i=0; i < 0 + 8; i++) {    final byte b=seed[i];    value<<=8;    value+=b & 0xff;  }  return value;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:25.336 -0500",hash_original_method="F6756F2BA503B7A43E41A22536745AD1",hash_generated_method="F6756F2BA503B7A43E41A22536745AD1") Values initializeValues(Thread current){  return current.localValues=new Values();}  }
class C{  public Matrix3f rotateY(float ang){  return rotateY(ang,this);}  }
class C{  public void clear(){  DelaunayTriangle t;  for (int i=0; i < 3; i++) {    t=neighbors[i];    if (t != null) {      t.clearNeighbor(this);    }  }  clearNeighbors();  points[0]=points[1]=points[2]=null;}  }
class C{  public <CTX>String sanitize(@Nullable String html,@Nullable HtmlChangeListener<CTX> listener,@Nullable CTX context){  if (html == null) {    return "";  }  StringBuilder out=new StringBuilder(html.length());  HtmlSanitizer.sanitize(html,apply(HtmlStreamRenderer.create(out,Handler.DO_NOTHING),listener,context),preprocessor);  return out.toString();}  }
class C{  private void analyze(File file,int burnin) throws TraceException {  if (file.isFile()) {    try {      String name=file.getCanonicalPath();      report(name,burnin);    } catch (    IOException e) {    }  } else {    File[] files=file.listFiles();    for (    File f : files) {      if (f.isDirectory()) {        analyze(f,burnin);      } else       if (f.getName().endsWith(".trees")) {        analyze(f,burnin);      }    }  }}  }
class C{  @Override public boolean isCatalogAtStart(){  debugCodeCall("isCatalogAtStart");  return true;}  }
class C{  public final void negate(){  x=-x;  y=-y;}  }
class C{  public void testLeakAsyncFileChannel() throws IOException {  Path dir=wrap(createTempDir());  OutputStream file=Files.newOutputStream(dir.resolve("stillopen"));  file.write(5);  file.close();  AsynchronousFileChannel leak=AsynchronousFileChannel.open(dir.resolve("stillopen"));  try {    dir.getFileSystem().close();    fail("should have gotten exception");  } catch (  Exception e) {    assertTrue(e.getMessage().contains("file handle leaks"));  }  leak.close();}  }
class C{  public GuacamoleException(Throwable cause){  super(cause);}  }
class C{  public CoordinateLayout(){  this.width=-1;  this.height=-1;}  }
class C{  public boolean isError(){  return error != null;}  }
class C{  private void findAll(QueryKraken query,Object[] args,Result<Iterable<Cursor>> result){  try {    TableKraken table=query.table();    TableKelp tableKelp=table.getTableKelp();    TablePod tablePod=table.getTablePod();    if (query.isStaticNode()) {      RowCursor cursor=tableKelp.cursor();      query.fillKey(cursor,args);      int hash=query.calculateHash(cursor);      if (tablePod.getNode(hash).isSelfCopy() || true) {        query.findAll(result,args);        return;      } else {        result.ok(null);        return;      }    }    query.findAll(result,args);  } catch (  Exception e) {    result.fail(e);  }}  }
class C{  public AnnotationVisitor visitParameterAnnotation(int parameter,String desc,boolean visible){  if (mv != null) {    return mv.visitParameterAnnotation(parameter,desc,visible);  }  return null;}  }
class C{  public SnackbarWrapper dismiss(){  snackbar.dismiss();  return this;}  }
class C{  protected void commit() throws MailboxException {  try {    if (getSession().hasPendingChanges()) {      getSession().save();    }  } catch (  RepositoryException e) {    throw new MailboxException("Unable to commit",e);  }}  }
class C{  public void generate(Queue<Pair<Env<AttrContext>,JCClassDecl>> queue){  generate(queue,null);}  }
class C{  public AggregateFuture(Future<T>... futures){  for (  Future<T> f : futures)   components.add(f);}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  private void generate(Region region,String elementName) throws SAXException {  if (region == null) {    return;  }  AttributesImpl atts=new AttributesImpl();  atts.addAttribute("","",NAME,"",region.getName());  if (region instanceof RegionCreation) {    RegionCreation rc=(RegionCreation)region;    String refId=rc.getRefid();    if (refId != null) {      atts.addAttribute("","",REFID,"",refId);    }  }  handler.startElement("",elementName,elementName,atts);  if (region instanceof RegionCreation) {    RegionCreation rc=(RegionCreation)region;    if (rc.hasAttributes()) {      generate(null,region.getAttributes());    }  } else {    generate(null,region.getAttributes());  }  Collection indexesForRegion=this.cache.getQueryService().getIndexes(region);  if (indexesForRegion != null) {    for (    Object index : indexesForRegion) {      generate((Index)index);    }  }  if (region instanceof PartitionedRegion) {    if (includeKeysValues) {      if (!region.isEmpty()) {        for (Iterator iter=region.entrySet(false).iterator(); iter.hasNext(); ) {          Region.Entry entry=(Region.Entry)iter.next();          generate(entry);        }      }    }  } else {    if (includeKeysValues) {      for (Iterator iter=region.entrySet(false).iterator(); iter.hasNext(); ) {        Region.Entry entry=(Region.Entry)iter.next();        generate(entry);      }    }  }  TreeSet rSet=new TreeSet(new RegionComparator());  rSet.addAll(region.subregions(false));  for (Iterator iter=rSet.iterator(); iter.hasNext(); ) {    Region subregion=(Region)iter.next();    generate(subregion,REGION);  }  if (region instanceof Extensible) {    @SuppressWarnings({"unchecked"}) Extensible<Region<?,?>> extensible=(Extensible<Region<?,?>>)region;    generate(extensible);  }  handler.endElement("",elementName,elementName);}  }
class C{  public void writeNoScale(Image c,Component i){  if (page == null) {    newpage();  }  int x=x0 + width - (c.getWidth(null) + charwidth);  int y=y0 + (linenum * lineheight) + lineascent;  if (page != null && pagenum >= prFirst) {    page.drawImage(c,x,y,c.getWidth(null),c.getHeight(null),null);  }}  }
class C{  public EnumDeclaration addEnum(String name,Modifier... modifiers){  EnumDeclaration enumDeclaration=new EnumDeclaration(Arrays.stream(modifiers).collect(Collectors.toCollection(null)),name);  getTypes().add(enumDeclaration);  enumDeclaration.setParentNode(this);  return enumDeclaration;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:22.743 -0500",hash_original_method="C3E161F555FEE180C4B024634334055B",hash_generated_method="63136E4B87B672F65F22860C3C9A36F0") private void checkRecycled(String errorMessage){  if (mRecycled) {    throw new IllegalStateException(errorMessage);  }}  }
class C{  public PutIndexedScriptRequest source(byte[] source,int offset,int length){  return source(new BytesArray(source,offset,length));}  }
class C{  private void checkGETStatusCodeWithAwait(final String request,final Integer statusCode){  await().atMost(Duration.FIVE_SECONDS).until(null,equalTo(String.valueOf(statusCode)));}  }
class C{  public DeleteReferencesResponse DeleteReferences(RequestHeader RequestHeader,DeleteReferencesItem... ReferencesToDelete) throws ServiceFaultException, ServiceResultException {  DeleteReferencesRequest req=new DeleteReferencesRequest(RequestHeader,ReferencesToDelete);  return (DeleteReferencesResponse)channel.serviceRequest(req);}  }
class C{  public static List<VOPricedEvent> toVOPricedEvent(List<PricedEvent> consideredEvents,LocalizerFacade facade){  List<VOPricedEvent> result=new ArrayList<VOPricedEvent>();  for (  PricedEvent currentEvent : consideredEvents) {    result.add(toVOPricedEvent(currentEvent,facade));  }  return result;}  }
class C{  public PushParams withRegistry(String registry){  this.registry=registry;  return this;}  }
class C{  public Manifold(){  points=new ManifoldPoint[Settings.maxManifoldPoints];  for (int i=0; i < Settings.maxManifoldPoints; i++) {    points[i]=new ManifoldPoint();  }  localNormal=new Vec2();  localPoint=new Vec2();  pointCount=0;}  }
class C{  void forAllAction(NodeRepresentation nodeRep){  QuantifierDecomposition qdc=decomposeQuantifier(nodeRep,true);  if (qdc != null) {    Decomposition decomp=nodeRep.decomposition;    state.hasChanged=true;    if (decomp.definedOp != null) {      state.assumpDefinitions.add(decomp.definedOp);    }    this.state.goalRep=qdc.body;    int newIdx=newAssumeRepsIndex(-1,nodeRep.initialPosition);    for (int i=0; i < qdc.news.size(); i++) {      this.state.assumeReps.add(newIdx + i,qdc.news.elementAt(i));    }  }  raiseWindow();}  }
class C{  public void downloadExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  logger.info("Inicio de downloadExecuteLogic");  String id=request.getParameter(Constants.ID);  if (logger.isInfoEnabled())   logger.info("Id Documento: " + id);  String idObjeto=request.getParameter("idObjeto");  if (logger.isInfoEnabled())   logger.info("Id Objeto: " + idObjeto);  int tipo=TypeConverter.toInt(request.getParameter("tipoObjeto"),TipoObjeto.DESCRIPTOR);  if (logger.isInfoEnabled())   logger.info("Tipo Objeto: " + tipo);  DocDocumentoExtVO fichero=null;  try {    if (StringUtils.isNotBlank(id))     fichero=getGestionDocumentosElectronicosBI(request).getDocumentoExt(tipo,idObjeto,id);    if (fichero != null)     download(response,fichero); else {      obtenerErrores(request,true).add(ActionErrors.GLOBAL_MESSAGE,new ActionError(DocumentosConstants.ERROR_DOC_ELECTRONICOS_DOCUMENTO_NO_ENCONTRADO));      goLastClientExecuteLogic(mappings,form,request,response);    }  } catch (  Exception e) {    obtenerErrores(request,true).add(ActionErrors.GLOBAL_MESSAGE,new ActionError(DocumentosConstants.ERROR_DOC_ELECTRONICOS_DOCUMENTO_NO_ENCONTRADO));    goLastClientExecuteLogic(mappings,form,request,response);  }}  }
class C{  public String toString(){  return getClass().getName() + "[font=" + getFont()+ ",color="+ getColor()+ "]";}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(notationgetpublicidnull.class,args);}  }
class C{  public void warning(org.xml.sax.SAXParseException e) throws org.xml.sax.SAXException {  String formattedMsg=e.getMessage();  SAXSourceLocator locator=getLocator();  ErrorListener handler=m_stylesheetProcessor.getErrorListener();  try {    handler.warning(new TransformerException(formattedMsg,locator));  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  private void movePos(float deltaY){  if ((deltaY < 0 && mPtrIndicator.isInStartPosition())) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("has reached the top"));    }    return;  }  int to=mPtrIndicator.getCurrentPosY() + (int)deltaY;  if (mPtrIndicator.willOverTop(to)) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("over top"));    }    to=PtrIndicator.POS_START;  }  mPtrIndicator.setCurrentPos(to);  int change=to - mPtrIndicator.getLastPosY();  updatePos(change);}  }
class C{  public boolean isAfterStarting(){  return _lifecycle.getState().isAfterStarting();}  }
class C{  public Set<Feed> updateFeeds(int categoryId,boolean overrideOffline){  Long time=feedsChanged.get(categoryId);  if (time == null)   time=0L;  if (time > System.currentTimeMillis() - Utils.UPDATE_TIME) {    return null;  } else   if (Utils.isConnected(cm) || (overrideOffline && Utils.checkConnected(cm))) {    Set<Feed> ret=new LinkedHashSet<>();    Set<Feed> feeds=Controller.getInstance().getConnector().getFeeds();    if (!feeds.isEmpty()) {      for (      Feed f : feeds) {        if (categoryId == VCAT_ALL || f.categoryId == categoryId)         ret.add(f);        feedsChanged.put(f.categoryId,System.currentTimeMillis());      }      DBHelper.getInstance().deleteFeeds();      DBHelper.getInstance().insertFeeds(feeds);      feedsChanged.put(categoryId,System.currentTimeMillis());      notifyListeners();    }    return ret;  }  return null;}  }
class C{  public Lucene70DocValuesConsumer(SegmentWriteState state,String dataCodec,String dataExtension,String metaCodec,String metaExtension) throws IOException {  boolean success=false;  try {    String dataName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,dataExtension);    data=state.directory.createOutput(dataName,state.context);    CodecUtil.writeIndexHeader(data,dataCodec,Lucene70DocValuesFormat.VERSION_CURRENT,state.segmentInfo.getId(),state.segmentSuffix);    String metaName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,metaExtension);    meta=state.directory.createOutput(metaName,state.context);    CodecUtil.writeIndexHeader(meta,metaCodec,Lucene70DocValuesFormat.VERSION_CURRENT,state.segmentInfo.getId(),state.segmentSuffix);    maxDoc=state.segmentInfo.maxDoc();    success=true;  }  finally {    if (!success) {      IOUtils.closeWhileHandlingException(this);    }  }}  }
class C{  private ExportMask populateExportMaskUserAddedInitiators(ExportMask exportMask){  if (exportMask.getInitiators() != null && !exportMask.getInitiators().isEmpty()) {    StringMap userAddedInitiatorsMap=exportMask.getUserAddedInitiators();    List<Initiator> initiators=new ArrayList<Initiator>();    for (    String initiatorId : exportMask.getInitiators()) {      Initiator initiator=dbClient.queryObject(Initiator.class,URI.create(initiatorId));      if (initiator != null) {        initiators.add(initiator);      }    }    if (userAddedInitiatorsMap == null && !initiators.isEmpty()) {      exportMask.addToUserCreatedInitiators(initiators);      log.info("Adding initiators to the userCreatedInitiators " + initiators + "to the export mask "+ exportMask.getMaskName()+ "export mask ID is :"+ exportMask.getId());    } else {      for (      Initiator initiator : initiators) {        if (userAddedInitiatorsMap.get(Initiator.normalizePort(initiator.getInitiatorPort())) == null) {          log.info("Adding initiator to the userCreatedInitiators" + initiator + "to the export mask "+ exportMask.getMaskName()+ "exportmask ID is :"+ exportMask.getId());          exportMask.addToUserCreatedInitiators(initiator);        }      }    }  }  return exportMask;}  }
class C{  public static Shape createShape(Reader r,int wr) throws IOException, ParseException {  PointsParser p=new PointsParser();  AWTPolylineProducer ph=new AWTPolylineProducer();  ph.setWindingRule(wr);  p.setPointsHandler(ph);  p.parse(r);  return ph.getShape();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:14.281 -0500",hash_original_method="6145F82DE390788BB7B29DCBC031D263",hash_generated_method="E4E97F4C3F215E65E2C57219B30401EA") public boolean containsKey(Object key){  int hash=hash(key.hashCode());  return segmentFor(hash).containsKey(key,hash);}  }
class C{  public void testgetKeystoreAlias(){  SecurityHelperTest.resetSecuritySystemProperties();  AuthenticationInfo authInfo=null;  try {    authInfo=SecurityHelper.loadAuthenticationInformation("test.ssl.alias.security.properties",true,TUNGSTEN_APPLICATION_NAME.CONNECTOR);    String alias=authInfo.getKeystoreAliasForConnectionType(SecurityConf.KEYSTORE_ALIAS_CONNECTOR_CLIENT_TO_CONNECTOR);    assertNotNull(alias);    assertEquals("tungsten_data_fabric",alias);    alias=authInfo.getKeystoreAliasForConnectionType(SecurityConf.KEYSTORE_ALIAS_REPLICATOR_MASTER_TO_SLAVE);    assertNull(alias);  } catch (  ServerRuntimeException e) {    assertTrue("There should not be any exception thrown",false);  }catch (  ConfigurationException e) {    assertFalse("That should not be this kind of Exception being thrown",true);  }  SecurityHelperTest.resetSecuritySystemProperties();}  }
class C{  public JsonPrimitive(String string){  setValue(string);}  }
class C{  @Override public void publish(final Topic destination,final Message message,final int deliveryMode,final int priority,final long timeToLive) throws JMSException {  session.lock();  try {    if (ActiveMQRATopicPublisher.trace) {      ActiveMQRALogger.LOGGER.trace("send " + this + " destination="+ destination+ " message="+ message+ " deliveryMode="+ deliveryMode+ " priority="+ priority+ " ttl="+ timeToLive);    }    checkState();    ((TopicPublisher)producer).publish(destination,message,deliveryMode,priority,timeToLive);    if (ActiveMQRATopicPublisher.trace) {      ActiveMQRALogger.LOGGER.trace("sent " + this + " result="+ message);    }  }  finally {    session.unlock();  }}  }
class C{  public void doFind(){  if (findDialog == null) {    findDialog=new FindReplaceDialog(textsParent.getShell());  }  findDialog.setTarget(hexEditControl);  findDialog.open();}  }
class C{  public MailAddress(String localPart,String domain) throws AddressException {  this(new InternetAddress(localPart + "@" + domain));}  }
class C{  public X509CRLImpl(CertificateList crl){  this.crl=crl;  this.tbsCertList=crl.getTbsCertList();  this.extensions=tbsCertList.getCrlExtensions();}  }
class C{  @Override public boolean appCrashed(String processName,int pid,String shortMsg,String longMsg,long timeMillis,String stackTrace) throws RemoteException {  Log.i(TAG,String.format("Application %s (pid %s) crashed: %s\n\n%s",processName,pid,longMsg,stackTrace));  return false;}  }
class C{  private void emit1(int od){  if (!alive)   return;  code=ArrayUtils.ensureCapacity(code,cp);  code[cp++]=(byte)od;}  }
class C{  public void join() throws InterruptedException {  _thread.join();}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  static MethodHandle varargsArray(int nargs){  MethodHandle mh=Lazy.ARRAYS[nargs];  if (mh != null)   return mh;  mh=findCollector("array",nargs,Object[].class);  if (mh != null)   mh=makeIntrinsic(mh,Intrinsic.NEW_ARRAY);  if (mh != null)   return Lazy.ARRAYS[nargs]=mh;  mh=buildVarargsArray(Lazy.MH_fillNewArray,Lazy.MH_arrayIdentity,nargs);  assert (assertCorrectArity(mh,nargs));  mh=makeIntrinsic(mh,Intrinsic.NEW_ARRAY);  return Lazy.ARRAYS[nargs]=mh;}  }
class C{  public void updateRow() throws SQLException {  if (onInsertRow == true) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.updateins").toString());  }  ((Row)getCurrentRow()).setUpdated();  notifyRowChanged();}  }
class C{  protected String composeFilenameEms(SymbolCode code){  String scheme=code.getScheme();  String category=code.getCategory();  String functionId=code.getFunctionId();  char status=SymbologyConstants.STATUS_PRESENT.equalsIgnoreCase(code.getStatus()) ? 'p' : 'a';  if (functionId == null)   functionId="------";  StringBuilder sb=new StringBuilder();  sb.append(DIR_ICON_EMS).append("/").append(scheme.toLowerCase()).append('-').append(category.toLowerCase()).append(status).append(functionId.toLowerCase()).append("-----").append(PATH_SUFFIX);  return sb.toString();}  }
class C{  protected S_SolveImpl(){  super();}  }
class C{  public static void enumerateResourcesPreserveMissing(VerificationHost host,boolean isMock,String resourcePoolLink,String computeHostLinkDescription,String computeHostLink,String testCase) throws Throwable {  EnumSet<TaskOption> options=EnumSet.of(TaskOption.PRESERVE_MISSING_RESOUCES);  if (isMock) {    options.add(TaskOption.IS_MOCK);  }  enumerateResources(host,null,options,resourcePoolLink,computeHostLinkDescription,computeHostLink,testCase,null);}  }
class C{  public static void init(Context context,boolean nativeExopackage){  try {    init(context,nativeExopackage ? SOLOADER_ENABLE_EXOPACKAGE : 0);  } catch (  IOException ex) {    throw new RuntimeException(ex);  }}  }
class C{  public static UCrop of(@NonNull Uri source,@NonNull Uri destination){  return new UCrop(source,destination);}  }
class C{  public final void popContextNodeList(){  if (m_contextNodeLists.isEmpty())   System.err.println("Warning: popContextNodeList when stack is empty!"); else   m_contextNodeLists.pop();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static boolean doSelfValidation(){  char lastChar=UNIHANS[0];  String lastString=Character.toString(lastChar);  for (  char c : UNIHANS) {    if (lastChar == c) {      continue;    }    final String curString=Character.toString(c);    int cmp=COLLATOR.compare(lastString,curString);    if (cmp >= 0) {      Log.e(TAG,"Internal error in Unihan table. " + "The last string \"" + lastString + "\" is greater than current string \""+ curString+ "\".");      return false;    }    lastString=curString;  }  return true;}  }
class C{  public Value read(Type type,NodeMap node,Map map) throws Exception {  ReadGraph graph=read.find(map);  if (graph != null) {    return graph.read(type,node);  }  return null;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","gdou");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public JSONArray put(int index,boolean value) throws JSONException {  this.put(index,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  private void checkPerPortRate(OFPacketIn pin){  Short port=pin.getInPort();  if (portCache.update(port)) {    if (portBlockedCache.update(port)) {      return;    }    SwitchPort swPort=new SwitchPort(getId(),port);    ForwardingBase.blockHost(floodlightProvider,swPort,-1L,(short)5,AppCookie.makeCookie(OFSWITCH_APP_ID,1));    floodlightProvider.addSwitchEvent(this.datapathId,"SWITCH_PORT_BLOCKED_TEMPORARILY " + "OFPort " + port,false);    log.info("Excessive packet in from {}, block port for 5 sec",swPort);  }}  }
class C{  protected void initSimulator(ForceSimulator fsim){  TupleSet ts=m_vis.getGroup(m_nodeGroup);  if (ts == null)   return;  try {    ts.addColumns(FORCEITEM_SCHEMA);  } catch (  IllegalArgumentException iae) {  }  float startX=(referrer == null ? 0f : (float)referrer.getX());  float startY=(referrer == null ? 0f : (float)referrer.getY());  startX=Float.isNaN(startX) ? 0f : startX;  startY=Float.isNaN(startY) ? 0f : startY;  Iterator iter=m_vis.visibleItems(m_nodeGroup);  while (iter.hasNext()) {    VisualItem item=(VisualItem)iter.next();    ForceItem fitem=(ForceItem)item.get(FORCEITEM);    fitem.mass=getMassValue(item);    double x=item.getEndX();    double y=item.getEndY();    fitem.location[0]=(Double.isNaN(x) ? startX : (float)x);    fitem.location[1]=(Double.isNaN(y) ? startY : (float)y);    fsim.addItem(fitem);  }  if (m_edgeGroup != null) {    iter=m_vis.visibleItems(m_edgeGroup);    while (iter.hasNext()) {      EdgeItem e=(EdgeItem)iter.next();      NodeItem n1=e.getSourceItem();      ForceItem f1=(ForceItem)n1.get(FORCEITEM);      NodeItem n2=e.getTargetItem();      ForceItem f2=(ForceItem)n2.get(FORCEITEM);      float coeff=getSpringCoefficient(e);      float slen=getSpringLength(e);      fsim.addSpring(f1,f2,(coeff >= 0 ? coeff : -1.f),(slen >= 0 ? slen : -1.f));    }  }}  }
class C{  public static PropertiesFormat forMIMEType(String mimeType,PropertiesFormat fallback){  return matchMIMEType(mimeType,formats,fallback);}  }
class C{  @Override public void onReceiveAPIResult(Map<String,String> result,int requestCode){  String responseStatus;  String response;  if (requestCode == Constants.DEVICE_INFO_REQUEST_CODE) {    if (result != null) {      responseStatus=result.get(Constants.STATUS_KEY);      if (Constants.Status.SUCCESSFUL.equals(responseStatus)) {        response=result.get(Constants.RESPONSE);        if (response != null && !response.isEmpty()) {          if (Constants.DEBUG_MODE_ENABLED) {            Log.d(TAG,"onReceiveAPIResult." + response);            Log.d(TAG,"Device information sent");          }        }      }    }  }}  }
class C{  public void send(String msg,String to){  send(new XmppMsg(msg),to);}  }
class C{  static MemberName generateCustomizedCode(LambdaForm form,MethodType invokerType){  InvokerBytecodeGenerator g=new InvokerBytecodeGenerator("MH",form,invokerType);  return g.loadMethod(g.generateCustomizedCodeBytes());}  }
class C{  public static void d(String msg){  if (!allowD)   return;  StackTraceElement caller=getCallerStackTraceElement();  String tag=generateTag(caller);  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg);}  }
class C{  public Iterator<E> reverseOrderIterator(){  return new BinarySearchTreeIterator<E>(this.root,false);}  }
class C{  public ExceptionQueuedEventContext(FacesContext context,Throwable thrown,UIComponent component,PhaseId phaseId){  this.context=context;  this.thrown=thrown;  this.component=component;  this.phaseId=((phaseId == null) ? context.getCurrentPhaseId() : phaseId);}  }
class C{  public void assignAll(){  int i;  for (i=0; i < blocks; i++) {    value[i]=0xffffffff;  }  zeroUnusedBits();}  }
class C{  public void expandOpenContainers(Tree tree){  if (tree == null) {    String message=Logging.getMessage("nullValue.TreeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (this.mustExpandNode())   tree.expandPath(this.getPath());  for (  TreeNode child : this.getChildren()) {    if (child instanceof KMLFeatureTreeNode)     ((KMLFeatureTreeNode)child).expandOpenContainers(tree);  }}  }
class C{  public static String checkTrackingCodeCookies(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  java.sql.Timestamp nowStamp=UtilDateTime.nowTimestamp();  GenericValue visit=VisitHandler.getVisit(request.getSession());  if (visit != null) {    Cookie[] cookies=request.getCookies();    if (cookies != null && cookies.length > 0) {      for (int i=0; i < cookies.length; i++) {        if (cookies[i].getName().startsWith("TKCDT_")) {          String trackingCodeId=cookies[i].getValue();          GenericValue trackingCode;          try {            trackingCode=EntityQuery.use(delegator).from("TrackingCode").where("trackingCodeId",trackingCodeId).cache().queryOne();          } catch (          GenericEntityException e) {            Debug.logError(e,"Error looking up TrackingCode with trackingCodeId [" + trackingCodeId + "], ignoring this trackingCodeId",module);            continue;          }          if (trackingCode == null) {            Debug.logError("TrackingCode not found for trackingCodeId [" + trackingCodeId + "], ignoring this trackingCodeId.",module);            continue;          }          if (trackingCode.get("fromDate") != null && nowStamp.before(trackingCode.getTimestamp("fromDate"))) {            if (Debug.infoOn())             Debug.logInfo("The TrackingCode with ID [" + trackingCodeId + "] has not yet gone into effect, ignoring this trackingCodeId",module);            continue;          }          if (trackingCode.get("thruDate") != null && nowStamp.after(trackingCode.getTimestamp("thruDate"))) {            if (Debug.infoOn())             Debug.logInfo("The TrackingCode with ID [" + trackingCodeId + "] has expired, ignoring this trackingCodeId",module);            continue;          }          GenericValue trackingCodeVisit=delegator.makeValue("TrackingCodeVisit",UtilMisc.toMap("trackingCodeId",trackingCodeId,"visitId",visit.get("visitId"),"fromDate",nowStamp,"sourceEnumId","TKCDSRC_COOKIE"));          try {            trackingCodeVisit.create();          } catch (          GenericEntityException e) {            Debug.logError(e,"Error while saving TrackingCodeVisit",module);          }        }      }    }  }  return "success";}  }
class C{  public option addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  private static void process(File f,TestResults expectedResults,Set<Report> toolreports){  try {    System.out.println("\nAnalyzing results from " + f.getName());    TestResults actualResults=readActualResults(f);    if (expectedResults != null && actualResults != null) {      analyze(expectedResults,actualResults);      String actualResultsFileName="notProduced";      if (!(showAveOnlyMode && actualResults.isCommercial)) {        actualResultsFileName=produceResultsFile(expectedResults);      }      Map<String,Counter> scores=calculateScores(expectedResults);      OverallResults results=calculateResults(scores);      results.setTime(actualResults.getTime());      Report scoreCard=new Report(actualResults,scores,results,expectedResults.totalResults(),actualResultsFileName,actualResults.isCommercial(),actualResults.getToolType());      toolreports.add(scoreCard);    } else {      if (expectedResults == null) {        System.out.println("Error!!: expected results were null.");      } else       System.out.println("Error!!: actual results were null for file: " + f);    }  } catch (  Exception e) {    System.out.println("Error processing " + f + ". Continuing.");    e.printStackTrace();  }}  }
class C{  public static String stringFor(int result){switch (result) {case CUDA_SUCCESS:    return "CUDA_SUCCESS";case CUDA_ERROR_INVALID_VALUE:  return "CUDA_ERROR_INVALID_VALUE";case CUDA_ERROR_OUT_OF_MEMORY:return "CUDA_ERROR_OUT_OF_MEMORY";case CUDA_ERROR_NOT_INITIALIZED:return "CUDA_ERROR_NOT_INITIALIZED";case CUDA_ERROR_DEINITIALIZED:return "CUDA_ERROR_DEINITIALIZED";case CUDA_ERROR_PROFILER_DISABLED:return "CUDA_ERROR_PROFILER_DISABLED";case CUDA_ERROR_PROFILER_NOT_INITIALIZED:return "CUDA_ERROR_PROFILER_NOT_INITIALIZED";case CUDA_ERROR_PROFILER_ALREADY_STARTED:return "CUDA_ERROR_PROFILER_ALREADY_STARTED";case CUDA_ERROR_PROFILER_ALREADY_STOPPED:return "CUDA_ERROR_PROFILER_ALREADY_STOPPED";case CUDA_ERROR_NO_DEVICE:return "CUDA_ERROR_NO_DEVICE";case CUDA_ERROR_INVALID_DEVICE:return "CUDA_ERROR_INVALID_DEVICE";case CUDA_ERROR_INVALID_IMAGE:return "CUDA_ERROR_INVALID_IMAGE";case CUDA_ERROR_INVALID_CONTEXT:return "CUDA_ERROR_INVALID_CONTEXT";case CUDA_ERROR_CONTEXT_ALREADY_CURRENT:return "CUDA_ERROR_CONTEXT_ALREADY_CURRENT";case CUDA_ERROR_MAP_FAILED:return "CUDA_ERROR_MAP_FAILED";case CUDA_ERROR_UNMAP_FAILED:return "CUDA_ERROR_UNMAP_FAILED";case CUDA_ERROR_ARRAY_IS_MAPPED:return "CUDA_ERROR_ARRAY_IS_MAPPED";case CUDA_ERROR_ALREADY_MAPPED:return "CUDA_ERROR_ALREADY_MAPPED";case CUDA_ERROR_NO_BINARY_FOR_GPU:return "CUDA_ERROR_NO_BINARY_FOR_GPU";case CUDA_ERROR_ALREADY_ACQUIRED:return "CUDA_ERROR_ALREADY_ACQUIRED";case CUDA_ERROR_NOT_MAPPED:return "CUDA_ERROR_NOT_MAPPED";case CUDA_ERROR_NOT_MAPPED_AS_ARRAY:return "CUDA_ERROR_NOT_MAPPED_AS_ARRAY";case CUDA_ERROR_NOT_MAPPED_AS_POINTER:return "CUDA_ERROR_NOT_MAPPED_AS_POINTER";case CUDA_ERROR_ECC_UNCORRECTABLE:return "CUDA_ERROR_ECC_UNCORRECTABLE";case CUDA_ERROR_UNSUPPORTED_LIMIT:return "CUDA_ERROR_UNSUPPORTED_LIMIT";case CUDA_ERROR_CONTEXT_ALREADY_IN_USE:return "CUDA_ERROR_CONTEXT_ALREADY_IN_USE";case CUDA_ERROR_PEER_ACCESS_UNSUPPORTED:return "CUDA_ERROR_PEER_ACCESS_UNSUPPORTED";case CUDA_ERROR_INVALID_PTX:return "CUDA_ERROR_INVALID_PTX";case CUDA_ERROR_INVALID_GRAPHICS_CONTEXT:return "CUDA_ERROR_INVALID_GRAPHICS_CONTEXT";case CUDA_ERROR_INVALID_SOURCE:return "CUDA_ERROR_INVALID_SOURCE";case CUDA_ERROR_FILE_NOT_FOUND:return "CUDA_ERROR_FILE_NOT_FOUND";case CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND:return "CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND";case CUDA_ERROR_SHARED_OBJECT_INIT_FAILED:return "CUDA_ERROR_SHARED_OBJECT_INIT_FAILED";case CUDA_ERROR_OPERATING_SYSTEM:return "CUDA_ERROR_OPERATING_SYSTEM";case CUDA_ERROR_INVALID_HANDLE:return "CUDA_ERROR_INVALID_HANDLE";case CUDA_ERROR_NOT_FOUND:return "CUDA_ERROR_NOT_FOUND";case CUDA_ERROR_NOT_READY:return "CUDA_ERROR_NOT_READY";case CUDA_ERROR_ILLEGAL_ADDRESS:return "CUDA_ERROR_ILLEGAL_ADDRESS";case CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES:return "CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES";case CUDA_ERROR_LAUNCH_TIMEOUT:return "CUDA_ERROR_LAUNCH_TIMEOUT";case CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING:return "CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING";case CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED:return "CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED";case CUDA_ERROR_PEER_ACCESS_NOT_ENABLED:return "CUDA_ERROR_PEER_ACCESS_NOT_ENABLED";case CUDA_ERROR_PEER_MEMORY_ALREADY_REGISTERED:return "CUDA_ERROR_PEER_MEMORY_ALREADY_REGISTERED";case CUDA_ERROR_PEER_MEMORY_NOT_REGISTERED:return "CUDA_ERROR_PEER_MEMORY_NOT_REGISTERED";case CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE:return "CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE";case CUDA_ERROR_CONTEXT_IS_DESTROYED:return "CUDA_ERROR_CONTEXT_IS_DESTROYED";case CUDA_ERROR_ASSERT:return "CUDA_ERROR_ASSERT";case CUDA_ERROR_TOO_MANY_PEERS:return "CUDA_ERROR_TOO_MANY_PEERS";case CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED:return "CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED";case CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED:return "CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED";case CUDA_ERROR_HARDWARE_STACK_ERROR:return "CUDA_ERROR_HARDWARE_STACK_ERROR";case CUDA_ERROR_ILLEGAL_INSTRUCTION:return "CUDA_ERROR_ILLEGAL_INSTRUCTION";case CUDA_ERROR_MISALIGNED_ADDRESS:return "CUDA_ERROR_MISALIGNED_ADDRESS";case CUDA_ERROR_INVALID_ADDRESS_SPACE:return "CUDA_ERROR_INVALID_ADDRESS_SPACE";case CUDA_ERROR_INVALID_PC:return "CUDA_ERROR_INVALID_PC";case CUDA_ERROR_LAUNCH_FAILED:return "CUDA_ERROR_LAUNCH_FAILED";case CUDA_ERROR_NOT_PERMITTED:return "CUDA_ERROR_NOT_PERMITTED";case CUDA_ERROR_NOT_SUPPORTED:return "CUDA_ERROR_NOT_SUPPORTED";case CUDA_ERROR_UNKNOWN:return "CUDA_ERROR_UNKNOWN";}return "INVALID CUresult: " + result;}  }
class C{  public boolean isSubscribed(){  return isActive() && getOptOutDate() == null;}  }
class C{  private final long fetchIntegerValueAsLong() throws BerException {  long result=0;  final int backup=next;  try {    final int length=fetchLength();    if (length <= 0)     throw new BerException();    if (length > (bytes.length - next))     throw new IndexOutOfBoundsException("Decoded length exceeds buffer");    final int end=next + length;    result=bytes[next++];    while (next < end) {      final byte b=bytes[next++];      if (b < 0) {        result=(result << 8) | (256 + b);      } else {        result=(result << 8) | b;      }    }  } catch (  BerException e) {    next=backup;    throw e;  }catch (  IndexOutOfBoundsException e) {    next=backup;    throw new BerException();  }catch (  ArithmeticException e) {    next=backup;    throw new BerException();  }  return result;}  }
class C{  @SuppressWarnings("unchecked") public static <I extends DeployInstance2>DeployStrategy2<I> strategy(){  return (DeployStrategy2<I>)STRATEGY;}  }
class C{  public boolean isValid(String value){  if (value == null) {    return false;  }  for (int i=0; i < patterns.length; i++) {    if (patterns[i].matcher(value).matches()) {      return true;    }  }  return false;}  }
class C{  private static boolean isUnreservedCharacter(char p_char){  return (isAlphanum(p_char) || MARK_CHARACTERS.indexOf(p_char) != -1);}  }
class C{  protected String createAzimuthLabelString(Angle azimuth){  NumberFormat df=this.getAzimuthFormat();  return df.format(azimuth.degrees);}  }
class C{  public JCExpression makeAnnotationType(ExpressionTransformer exprGen){  Type type=getAnnotationClassType();  if (isInterop()) {    return exprGen.makeJavaType(type.getSatisfiedTypes().get(0));  } else {    return exprGen.makeJavaType(type,ExpressionTransformer.JT_ANNOTATION);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public GeoTimeSerie decode(){  throw new RuntimeException("Not Implemented.");}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String outputHeader=null;  float d=0;  int maxRadius=0;  String outputType=null;  boolean useLowest=false;  WhiteboxRaster dem;  WhiteboxRaster output;  int numCols, numRows;  double gridRes=1;  int x=0, y=0, row, col, i, j;  double elevationAB, elevationXY;  int radius;  double distance;  double heightDiff;  double tmpDistance;  double tmpHeightDiff;  boolean downslope;  double noData;  float progress=0;  double rad2deg=180 / Math.PI;  int minX=0, minY=0;  double minElev=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      demHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      d=Float.parseFloat(args[i]);    } else     if (i == 3) {      maxRadius=Integer.parseInt(args[i]);    } else     if (i == 4) {      outputType=args[i].toLowerCase();    } else     if (i == 5) {      useLowest=Boolean.parseBoolean(args[i]);    }  }  if ((demHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    noData=dem.getNoDataValue();    gridRes=dem.getCellSizeX();    output=new WhiteboxRaster(outputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    updateProgress("Loop 1 of 2:",0);    if (useLowest) {      for (row=0; row < numRows; row++) {        for (col=0; col < numCols; col++) {          if (dem.getValue(row,col) == dem.getMinimumValue()) {            minX=col;            minY=row;            minElev=dem.getValue(row,col);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (numRows - 1));        updateProgress("Loop 1 of 2:",(int)progress);      }    }    updateProgress("Loop 2 of 2:",0);    for (row=0; row < numRows; row++) {      for (col=0; col < numCols; col++) {        radius=0;        downslope=false;        heightDiff=0;        distance=Float.MAX_VALUE;        elevationAB=dem.getValue(row,col);        if ((elevationAB != noData) && (elevationAB > dem.getMinimumValue() + d)) {          do {            radius=radius + 1;            for (i=-radius; i <= radius; i++) {              for (j=-radius; j <= radius; j++) {                if (Math.abs(i) > radius - 1 || Math.abs(j) > radius - 1) {                  x=col + i;                  y=row + j;                  elevationXY=dem.getValue(y,x);                  if (elevationXY != noData) {                    if (elevationAB - elevationXY > d) {                      tmpDistance=Math.sqrt(i * i + j * j) * gridRes;                      tmpHeightDiff=elevationAB - elevationXY;                      if (tmpDistance < distance) {                        downslope=true;                        distance=tmpDistance;                        heightDiff=tmpHeightDiff;                      }                    }                  }                }              }            }          } while ((radius < maxRadius) & (downslope == false));          if (downslope == true) {switch (outputType) {case "tangent":              output.setValue(row,col,heightDiff / distance);            break;case "degrees":          output.setValue(row,col,Math.atan(heightDiff / distance) * rad2deg);        break;case "radians":      output.setValue(row,col,Math.atan(heightDiff / distance));    break;case "distance":  output.setValue(row,col,distance);break;}} else if (useLowest == true) {distance=Math.sqrt(Math.pow((col - minX),2) + Math.pow((row - minY),2)) * gridRes;heightDiff=elevationAB - minElev;switch (outputType) {case "tangent":output.setValue(row,col,heightDiff / distance);break;case "degrees":output.setValue(row,col,Math.atan(heightDiff / distance) * rad2deg);break;case "radians":output.setValue(row,col,Math.atan(heightDiff / distance));break;case "distance":output.setValue(row,col,distance);break;}}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (numRows - 1));updateProgress("Loop 2 of 2:",(int)progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());dem.close();output.close();returnData(outputHeader);} catch (Exception e) {showFeedback(e.getMessage());} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public static <T>List<List<T>> chunkUp(List<T> list,int maxLength){  if (maxLength <= 0) {    throw new IllegalArgumentException("maxLength must be > 0 but was " + maxLength);  }  int fullChunks=list.size() / maxLength;  List<List<T>> result=new ArrayList<>(fullChunks + 1);  for (int i=0; i < fullChunks; i++) {    List<T> subList=list.subList(i * maxLength,(i + 1) * maxLength);    if (subList.size() != maxLength) {      throw new IllegalStateException("bogus length:" + subList.size() + " not "+ maxLength);    }    result.add(subList);  }  List<T> lastChunk=list.subList(fullChunks * maxLength,list.size());  if (!lastChunk.isEmpty())   result.add(lastChunk);  return Collections.unmodifiableList(result);}  }
class C{  public VisorIgfsMetrics aggregate(int n){  if (n > 0) {    foldersCnt/=n;    filesCnt/=n;  }  return this;}  }
class C{  public boolean isIndexed(){  return isIndexed;}  }
class C{  @Transactional private Token createToken(final long ttlSecs,final String tokenIdentity,final String service){  final String uUID=UUID.randomUUID().toString();  final Token token=new Token();  token.setTokenNumber(uUID);  token.setTtlSecs(ttlSecs);  token.setCreatedDate(new Date());  token.setService(service);  token.setTokenIdentity(tokenIdentity);  return tokenRepository.save(token);}  }
class C{  public void doKeyPressed(KeyInputEvent kie){  if (checkCommandeKey(kie)) {  } else   if (isActive()) {    currentShortcut.keyPressed(kie);  }}  }
class C{  @Override public double cloudletSubmit(Cloudlet cl){  return cloudletSubmit(cl,0);}  }
class C{  public void notationDecl(String name,String publicId,String systemId){}  }
class C{  private Hashtable<VertexLabelType,EdgeLabelType> checkForNewVertex(VertexLabelType v){  Hashtable<VertexLabelType,EdgeLabelType> result=globalEdgeLookup.get(v);  if (result == null) {    result=new Hashtable<VertexLabelType,EdgeLabelType>();    globalEdgeLookup.put(v,result);    vertexLabels.add(v);  }  return result;}  }
class C{  @Override public void doIfHasInternetOrNotifyUser(NetworkAction networkAction){  notifyIfNoInternet();  if (networkAction == null) {    return;  }  if (hasInternetConnection()) {    networkAction.execute(networkMode);  } else {    networkAction.onNoNetwork();  }}  }
class C{  public BinaryBlockMatrix(DataFrame dataFrame,MatrixMetadata matrixMetadata){  this.matrixMetadata=matrixMetadata;  binaryBlocks=MLContextConversionUtil.dataFrameToMatrixBinaryBlocks(dataFrame,matrixMetadata);}  }
class C{  private List addDisplayable(Node parent){  List children=(List)this.displayableNodes.get(parent);  if (children == null) {    children=new ArrayList();    this.displayableNodes.put(parent,children);    NodeList nl=parent.getChildNodes();    for (int i=0, len=nl.getLength(); i < len; i++) {      Node child=nl.item(i);      if (child.getNodeType() == Node.ELEMENT_NODE || child.getNodeType() == Node.COMMENT_NODE || (child.getNodeType() == Node.TEXT_NODE && (child.getNodeValue().trim().length() > 0))) {        children.add(child);      }    }    return children;  } else {    return new ArrayList();  }}  }
class C{  protected final void SYSCALL(Instruction s,Operand address){  burs.ir.setHasSysCall(true);  if (VM.BuildFor32Addr) {    int numParams=Call.getNumberOfParams(s);    int longParams=0;    for (int pNum=0; pNum < numParams; pNum++) {      if (Call.getParam(s,pNum).getType().isLongType()) {        longParams++;      }    }    RegisterOperand result=Call.getResult(s);    RegisterOperand result2=null;    if (result != null && result.getType().isLongType()) {      result.setType(TypeReference.Int);      result2=result;      result=new RegisterOperand(regpool.getSecondReg(result.getRegister()),TypeReference.Int);    }    Operand[] params=new Operand[numParams];    for (int i=0; i < numParams; i++) {      params[i]=Call.getParam(s,i);    }    MIR_Call.mutate(s,IA32_SYSCALL,result,result2,address,Call.getMethod(s),numParams + longParams);    for (int paramIdx=0, mirCallIdx=0; paramIdx < numParams; ) {      Operand param=params[paramIdx++];      if (param instanceof RegisterOperand) {        RegisterOperand rparam=(RegisterOperand)param;        if (rparam.getType().isLongType()) {          rparam.setType(TypeReference.Int);          MIR_Call.setParam(s,mirCallIdx++,new RegisterOperand(regpool.getSecondReg(rparam.getRegister()),TypeReference.Int));        }        MIR_Call.setParam(s,mirCallIdx++,param);      } else       if (param instanceof LongConstantOperand) {        long value=((LongConstantOperand)param).value;        int valueHigh=(int)(value >> 32);        int valueLow=(int)(value & 0xffffffff);        MIR_Call.setParam(s,mirCallIdx++,IC(valueLow));        MIR_Call.setParam(s,mirCallIdx++,IC(valueHigh));      } else {        MIR_Call.setParam(s,mirCallIdx++,param);      }    }  } else {    MIR_Call.mutate(s,IA32_SYSCALL,Call.getResult(s),null,address,Call.getMethod(s),Call.getNumberOfParams(s));  }  EMIT(s);}  }
class C{  public void addIStore(int local){  xop(ByteCode.ISTORE_0,ByteCode.ISTORE,local);}  }
class C{  private void extractParameters(ResultPoint[] bullsEyeCorners) throws NotFoundException {  if (!isValid(bullsEyeCorners[0]) || !isValid(bullsEyeCorners[1]) || !isValid(bullsEyeCorners[2])|| !isValid(bullsEyeCorners[3])) {    throw NotFoundException.getNotFoundInstance();  }  int length=2 * nbCenterLayers;  int[] sides={sampleLine(bullsEyeCorners[0],bullsEyeCorners[1],length),sampleLine(bullsEyeCorners[1],bullsEyeCorners[2],length),sampleLine(bullsEyeCorners[2],bullsEyeCorners[3],length),sampleLine(bullsEyeCorners[3],bullsEyeCorners[0],length)};  shift=getRotation(sides,length);  long parameterData=0;  for (int i=0; i < 4; i++) {    int side=sides[(shift + i) % 4];    if (compact) {      parameterData<<=7;      parameterData+=(side >> 1) & 0x7F;    } else {      parameterData<<=10;      parameterData+=((side >> 2) & (0x1f << 5)) + ((side >> 1) & 0x1F);    }  }  int correctedData=getCorrectedParameterData(parameterData,compact);  if (compact) {    nbLayers=(correctedData >> 6) + 1;    nbDataBlocks=(correctedData & 0x3F) + 1;  } else {    nbLayers=(correctedData >> 11) + 1;    nbDataBlocks=(correctedData & 0x7FF) + 1;  }}  }
class C{  boolean diagnoseMismatch(Environment env,Expression args[],Type argTypes[]) throws ClassNotFound {  Type margType[]=new Type[1];  boolean saidSomething=false;  int start=0;  while (start < argTypes.length) {    int code=clazz.diagnoseMismatch(env,id,argTypes,start,margType);    String opName=(id.equals(idInit)) ? "constructor" : opNames[op];    if (code == -2) {      env.error(where,"wrong.number.args",opName);      saidSomething=true;    }    if (code < 0)     break;    int i=code >> 2;    boolean castOK=(code & 2) != 0;    boolean ambig=(code & 1) != 0;    Type targetType=margType[0];    String ttype="" + targetType;    if (castOK)     env.error(args[i].where,"explicit.cast.needed",opName,argTypes[i],ttype); else     env.error(args[i].where,"incompatible.type",opName,argTypes[i],ttype);    saidSomething=true;    start=i + 1;  }  return saidSomething;}  }
class C{  public int defineTemporaryVariable(String name,ClassNode node,boolean store){  BytecodeVariable answer=defineVar(name,node,false,false);  temporaryVariables.addFirst(answer);  usedVariables.removeLast();  if (store)   controller.getOperandStack().storeVar(answer);  return answer.getIndex();}  }
class C{  public MarkerMoveResult onMarkerMoved(Marker marker){  if (marker.equals(centerMarker)) {    onCenterUpdated(marker.getPosition());    return MarkerMoveResult.moved;  }  return MarkerMoveResult.none;}  }
class C{  void sendControllerEvents(MidiMessage message){  int size=controllerEventListeners.size();  if (size == 0)   return;  if (!(message instanceof ShortMessage)) {    if (Printer.debug)     Printer.debug("sendControllerEvents: message is NOT instanceof ShortMessage!");    return;  }  ShortMessage msg=(ShortMessage)message;  int controller=msg.getData1();  List sendToListeners=new ArrayList();  for (int i=0; i < size; i++) {    ControllerListElement cve=(ControllerListElement)controllerEventListeners.get(i);    for (int j=0; j < cve.controllers.length; j++) {      if (cve.controllers[j] == controller) {        sendToListeners.add(cve.listener);        break;      }    }  }  getEventDispatcher().sendAudioEvents(message,sendToListeners);}  }
class C{  public boolean removeEntity(Entity entity){  boolean wasRemoved=this.entities.remove(entity);  if (wasRemoved) {    this.isModified=true;  }  return wasRemoved;}  }
class C{  public boolean isConnected(){  return status == ConnectionStatus.CONNECTED;}  }
class C{  XmlElements(XmlElement[] elems){  m_elems=elems;}  }
class C{  public static SingleByteCharsetConverter initCharset(String javaEncodingName) throws UnsupportedEncodingException, SQLException {  try {    if (CharsetMapping.isMultibyteCharset(javaEncodingName)) {      return null;    }  } catch (  RuntimeException ex) {    SQLException sqlEx=SQLError.createSQLException(ex.toString(),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,null);    sqlEx.initCause(ex);    throw sqlEx;  }  SingleByteCharsetConverter converter=new SingleByteCharsetConverter(javaEncodingName);  CONVERTER_MAP.put(javaEncodingName,converter);  return converter;}  }
class C{  public void forgetLoadedWallpaper(){  sGlobals.forgetLoadedWallpaper();}  }
class C{  @Override public void transform(final Coordinate c,final Point2D p){  p.setLocation(xFromModelUnitsToPixels(c.x),yFromModelUnitsToPixels(c.y));}  }
class C{  public CProject(final int projectId,final String name,final String description,final Date creationDate,final Date modificationDate,final int addressSpaceCount,final List<DebuggerTemplate> assignedDebuggers,final SQLProvider provider){  Preconditions.checkArgument(projectId > 0,String.format("IE00226: Project ID %d is invalid. Project IDs must be strictly positive",projectId));  Preconditions.checkNotNull(name,"IE00227: Project names can't be null");  Preconditions.checkNotNull(description,"IE00228: Project descriptions can't be null");  Preconditions.checkNotNull(creationDate,"IE00229: Project creation dates can't be null");  Preconditions.checkNotNull(modificationDate,"IE00230: Project modification dates can't be null");  Preconditions.checkNotNull(provider,"IE00231: The SQL provider of the project can't be null");  m_configuration=new CProjectConfiguration(this,m_listeners,provider,projectId,name,description,creationDate,modificationDate,assignedDebuggers);  m_addressSpaceCount=addressSpaceCount;  m_provider=provider;}  }
class C{  public void testGetCheckSum(){  SeeedStudioRfidProtocol instance=new SeeedStudioRfidProtocol();  assertEquals("F8",instance.getCheckSum(msgStandalone));}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_2__CODE_LANG_1:    return ((InternalEList<?>)getCodeLang_1()).basicRemove(otherEnd,msgs);case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_2__CODE_LANGS_1:  return ((InternalEList<?>)getCodeLangs_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean isStatic(){  return false;}  }
class C{  public boolean equals(Object o1){  try {    GMatrix m2=(GMatrix)o1;    int i, j;    if (nRow != m2.nRow || nCol != m2.nCol) {      return false;    }    for (i=0; i < nRow; i++) {      for (j=0; j < nCol; j++) {        if (values[i][j] != m2.values[i][j]) {          return false;        }      }    }    return true;  } catch (  ClassCastException e1) {    return false;  }catch (  NullPointerException e2) {    return false;  }}  }
class C{  @DSComment("Character encoder/decoder") @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:01.586 -0500",hash_original_method="B611C5CE05597AA2840AB6FA98EFB1D0",hash_generated_method="716A62D018BCE4DEC3B5E75C09F90BCC") public boolean isOverflow(){  return ((this.type) == 1);}  }
class C{  protected Size2D arrangeNF(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  return arrangeNN(container,g2);}  }
class C{  public mxPoint drawMarker(Object type,mxPoint p0,mxPoint pe,float size,float strokeWidth){  mxPoint offset=null;  double dx=pe.getX() - p0.getX();  double dy=pe.getY() - p0.getY();  double dist=Math.max(1,Math.sqrt(dx * dx + dy * dy));  double absSize=size * scale;  double nx=dx * absSize / dist;  double ny=dy * absSize / dist;  pe=(mxPoint)pe.clone();  pe.setX(pe.getX() - nx * strokeWidth / (2 * size));  pe.setY(pe.getY() - ny * strokeWidth / (2 * size));  nx*=0.5 + strokeWidth / 2;  ny*=0.5 + strokeWidth / 2;  if (type.equals(mxConstants.ARROW_CLASSIC) || type.equals(mxConstants.ARROW_BLOCK)) {    Polygon poly=new Polygon();    poly.addPoint((int)Math.round(pe.getX()),(int)Math.round(pe.getY()));    poly.addPoint((int)Math.round(pe.getX() - nx - ny / 2),(int)Math.round(pe.getY() - ny + nx / 2));    if (type.equals(mxConstants.ARROW_CLASSIC)) {      poly.addPoint((int)Math.round(pe.getX() - nx * 3 / 4),(int)Math.round(pe.getY() - ny * 3 / 4));    }    poly.addPoint((int)Math.round(pe.getX() + ny / 2 - nx),(int)Math.round(pe.getY() - ny - nx / 2));    if (g.getClipBounds() == null || g.getClipBounds().intersects(poly.getBounds())) {      g.fillPolygon(poly);      g.drawPolygon(poly);    }    offset=new mxPoint(-nx * 3 / 4,-ny * 3 / 4);  } else   if (type.equals(mxConstants.ARROW_OPEN)) {    nx*=1.2;    ny*=1.2;    drawLine((int)Math.round(pe.getX() - nx - ny / 2),(int)Math.round(pe.getY() - ny + nx / 2),(int)Math.round(pe.getX() - nx / 6),(int)Math.round(pe.getY() - ny / 6));    drawLine((int)Math.round(pe.getX() - nx / 6),(int)Math.round(pe.getY() - ny / 6),(int)Math.round(pe.getX() + ny / 2 - nx),(int)Math.round(pe.getY() - ny - nx / 2));    offset=new mxPoint(-nx / 4,-ny / 4);  } else   if (type.equals(mxConstants.ARROW_OVAL)) {    nx*=1.2;    ny*=1.2;    absSize*=1.2;    int cx=(int)Math.round(pe.getX() - nx / 2);    int cy=(int)Math.round(pe.getY() - ny / 2);    int a=(int)Math.round(absSize / 2);    int a2=(int)Math.round(absSize);    if (g.hitClip(cx - a,cy - a,a2,a2)) {      g.fillOval(cx - a,cy - a,a2,a2);      g.drawOval(cx - a,cy - a,a2,a2);    }    offset=new mxPoint(-nx / 2,-ny / 2);  } else   if (type.equals(mxConstants.ARROW_DIAMOND)) {    nx*=1.2;    ny*=1.2;    Polygon poly=new Polygon();    poly.addPoint((int)Math.round(pe.getX() + nx / 2),(int)Math.round(pe.getY() + ny / 2));    poly.addPoint((int)Math.round(pe.getX() - ny / 2),(int)Math.round(pe.getY() + nx / 2));    poly.addPoint((int)Math.round(pe.getX() - nx / 2),(int)Math.round(pe.getY() - ny / 2));    poly.addPoint((int)Math.round(pe.getX() + ny / 2),(int)Math.round(pe.getY() - nx / 2));    if (g.getClipBounds() == null || g.getClipBounds().intersects(poly.getBounds())) {      g.fillPolygon(poly);      g.drawPolygon(poly);    }  }  return offset;}  }
class C{  public byte[] encodeToBitcoin(){  if (schnorr != null) {    try {      ByteArrayOutputStream bos=new ByteArrayOutputStream(65);      bos.write(schnorr);      bos.write(sighashFlags);      return bos.toByteArray();    } catch (    IOException e) {      throw new RuntimeException(e);    }  }  try {    ByteArrayOutputStream bos=derByteStream();    bos.write(sighashFlags);    return bos.toByteArray();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  private long runForParallelism(int iterations,int elements,int parallelism){  MergeSort mergeSort=new MergeSort(parallelism);  long[] times=new long[iterations];  for (int i=0; i < iterations; i++) {    System.gc();    long start=System.currentTimeMillis();    mergeSort.sort(generateArray(elements));    times[i]=System.currentTimeMillis() - start;  }  return medianValue(times);}  }
class C{  public static void fill(boolean[] a,int fromIndex,int toIndex,boolean val){  rangeCheck(a.length,fromIndex,toIndex);  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;}  }
class C{  public SabresQuery<T> whereEndsWith(String key,String suffix){  addWhere(key,Where.endsWith(key,suffix));  return this;}  }
class C{  Item newFloat(final float value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(FLOAT).putInt(key.intVal);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  private double calcLoad(double deltaUptime,double deltaTime){  if (deltaTime <= 0 || deltaUptime == 0) {    return 0.0;  }  return Math.min(99.0,deltaTime / (deltaUptime * osBean.getAvailableProcessors()));}  }
class C{  public JSONArray(){  this.list=new ArrayList<Object>();}  }
class C{  public void fallocate(long size){  LibaioContext.fallocate(fd,size);}  }
class C{  public Period normalized(){  long totalMonths=toTotalMonths();  long splitYears=totalMonths / 12;  int splitMonths=(int)(totalMonths % 12);  if (splitYears == years && splitMonths == months) {    return this;  }  return create(Math.toIntExact(splitYears),splitMonths,days);}  }
class C{  public void begin(String namespace,String name,Attributes attributes) throws Exception {  assert digester.peek() instanceof MapEntriesBean : "Assertion Error: Expected MapEntriesBean to be at the top of the stack";  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[MapEntryRule]{" + digester.getMatch() + "} Push "+ CLASS_NAME);  }  Class clazz=digester.getClassLoader().loadClass(CLASS_NAME);  MapEntryBean meb=(MapEntryBean)clazz.newInstance();  digester.push(meb);}  }
class C{  private void dispatchMessage(OFMessage m){  this.switchManager.handleMessage(this.sw,m,null);}  }
class C{  public void testLinkSetConsistency1(){  doLoadData();  final ValueFactory vf=om.getValueFactory();  final URI workeruri=vf.createURI("gpo:#123");  IGPO workergpo=om.getGPO(workeruri);  final URI worksFor=vf.createURI("attr:/employee#worksFor");  final ILinkSet ls=workergpo.getLinksOut(worksFor);  assertTrue(ls.size() > 0);  final IGPO employer=ls.iterator().next();  final ILinkSet employees=employer.getLinksIn(worksFor);  assertTrue(employees.contains(workergpo));  workergpo.removeValue(worksFor,employer.getId());  assertFalse(employees.contains(workergpo));}  }
class C{  public static InfererBuilder<IString,String> factory(String infererName,String... infererSpecs){  final Map<String,String> paramPairs=FactoryUtil.getParamPairs(infererSpecs);  BeamFactory.BeamType beamType=null;  String beamTypeStr=paramPairs.get(BEAM_TYPE_OPT);  if (beamTypeStr != null) {    beamType=Enum.valueOf(BeamFactory.BeamType.class,beamTypeStr);  }  int beamSize=-1;  String beamSizeStr=paramPairs.get(BEAM_SIZE_OPT);  if (beamSizeStr != null) {    try {      beamSize=Integer.parseInt(beamSizeStr);    } catch (    NumberFormatException e) {      throw new RuntimeException(String.format("Error: given beam size, %s:%s, can not be converted into an integer value",BEAM_SIZE_OPT,beamSizeStr));    }  }  if (infererName.equals(MULTIBEAM_DECODER)) {    MultiBeamDecoder.MultiBeamDecoderBuilder<IString,String> builder=MultiBeamDecoder.builder();    if (beamSize != -1)     builder.setBeamSize(beamSize);    if (beamType != null)     builder.setBeamType(beamType);    return builder;  }  if (infererName.equals(CUBE_PRUNING_DECODER)) {    CubePruningDecoder.CubePruningDecoderBuilder<IString,String> builder=CubePruningDecoder.builder();    if (beamSize != -1)     builder.setBeamSize(beamSize);    if (beamType != null)     builder.setBeamType(beamType);    return builder;  }  if (infererName.equals(DTU_DECODER)) {    DTUDecoder.DTUDecoderBuilder<IString,String> builder=DTUDecoder.builder();    if (beamSize != -1)     builder.setBeamSize(beamSize);    if (beamType != null)     builder.setBeamType(beamType);    return builder;  }  throw new RuntimeException(String.format("Unrecognized Inferer '%s'",infererName));}  }
class C{  public void testResourcePrivateMode() throws Exception {  processTestGridifyResource(DeploymentMode.PRIVATE);}  }
class C{  public void publicMethod(){}  }
class C{  private void addTuple(KeyHashValPair<MachineKey,AverageData> tuple){  MachineKey key=tuple.getKey();  dataMap.put(key,tuple.getValue());}  }
class C{  private void addObjectToBuilder(@NotNull StringBuilder builder,@NotNull String object,@NotNull ObjectTypes type){  builder.append(encapsulateObject(object,type));}  }
class C{  public boolean isAntiAliasedText(){  return impl.isAntiAliasedText(nativeGraphics);}  }
class C{  public void java_lang_Class_getDeclaringClass(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassObject());}  }
class C{  public boolean hasPermissionAdministracionTotal(){  Arrays.sort(permissions);  if (Arrays.binarySearch(permissions,AppPermissions.ADMINISTRACION_TOTAL_SISTEMA) >= 0) {    return true;  }  return false;}  }
class C{  public static Plane constructNormalizedXPlane(final double y,final double z,final double DValue){  if (Math.abs(y) < MINIMUM_RESOLUTION && Math.abs(z) < MINIMUM_RESOLUTION)   return null;  final double denom=1.0 / Math.sqrt(y * y + z * z);  return new Plane(0.0,z * denom,-y * denom,DValue);}  }
class C{  private String nextClipId(){  clipCounter++;  return getClipId();}  }
class C{  public void recordInvalidClassName(String name){}  }
class C{  protected void marshalCollection(Collection<T> items,HierarchicalStreamWriter writer,MarshallingContext context){  for (  T item : items) {    marshalObject(item,writer,context);  }}  }
class C{  public static long plus(long tstamp,long microseconds){  long microsmask=(long)UMASK;  long newmicros=tstamp & microsmask;  if ((newmicros + microseconds) <= MAX_MICROS) {    tstamp+=microseconds;  } else {    int[] pieces=new int[NUMIDX];    ComponentTime.unpackBits(tstamp,pieces);    int year=pieces[YIDX];    int month=pieces[MIDX];    int day=pieces[DIDX];    int hour=pieces[HIDX];    int minute=pieces[IIDX];    int second=pieces[SIDX];    newmicros+=microseconds;    int overseconds=(int)(newmicros / 1000000L);    newmicros=(newmicros % 1000000L);    GregorianCalendar cal=new GregorianCalendar(year,month - 1,day,hour,minute,second);    cal.add(Calendar.SECOND,overseconds);    second=cal.get(Calendar.SECOND);    minute=cal.get(Calendar.MINUTE);    hour=cal.get(Calendar.HOUR_OF_DAY);    day=cal.get(Calendar.DAY_OF_MONTH);    month=cal.get(Calendar.MONTH) + 1;    year=cal.get(Calendar.YEAR);    tstamp=newmicros;    tstamp|=((long)year) << YPOS;    tstamp|=((long)month) << MPOS;    tstamp|=((long)day) << DPOS;    tstamp|=((long)hour) << HPOS;    tstamp|=((long)minute) << IPOS;    tstamp|=((long)second) << SPOS;  }  return (tstamp);}  }
class C{  void execute(Database db,Session systemSession,DatabaseEventListener listener){  try {    Prepared command=systemSession.prepare(sql);    command.setObjectId(id);    command.update();  } catch (  DbException e) {    e=e.addSQL(sql);    SQLException s=e.getSQLException();    db.getTrace(Trace.DATABASE).error(s,sql);    if (listener != null) {      listener.exceptionThrown(s,sql);    } else {      throw e;    }  }}  }
class C{  public boolean onPreferenceChange(Preference preference,Object newValue){  if (Boolean.parseBoolean(SystemProperties.get(TelephonyProperties.PROPERTY_INECM_MODE))) {  } else {    setAirplaneModeOn((Boolean)newValue);  }  return true;}  }
class C{  public SimpleFragmentIntent<F> putExtra(String name,double[] value){  if (extras == null) {    extras=new Bundle();  }  extras.putDoubleArray(name,value);  return this;}  }
class C{  static boolean pairSum(int ar[],int x,Map<Integer,Integer> map){  for (int i=0; i < ar.length; i++) {    if (map.containsKey(x - ar[i])) {      return true;    }    map.put(ar[i],1);  }  return false;}  }
class C{  public ExecutionRegion createExecutionRegion(){  ExecutionRegionImpl executionRegion=new ExecutionRegionImpl();  return executionRegion;}  }
class C{  private boolean isIOS(){  if (!System.getProperty("os.name","generic").equals("Darwin") || !System.getProperty("java.runtime.name").equals("Android Runtime"))   return false;  try {    Class.forName("com.intel.moe.frameworks.inapppurchase.ios.PlatformIAPHelper");    return true;  } catch (  ClassNotFoundException e) {    return false;  }}  }
class C{  public void dispose(){  if (children != null) {    for (    IXMLElement c : children) {      c.dispose();    }  }  this.attributes.clear();  this.attributes=null;  this.children=null;  this.fullName=null;  this.name=null;  this.namespace=null;  this.content=null;  this.systemID=null;  this.parent=null;}  }
class C{  public static double rRSEmaxFitness(GEPIndividual ind){  return 1000.0;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void testGetValue2(){  DefaultCategoryDataset d=new DefaultCategoryDataset();  boolean pass=false;  try {    d.getValue(0,0);  } catch (  IndexOutOfBoundsException e) {    pass=true;  }  assertTrue(pass);}  }
class C{  protected void sendRemoveStream(){  callbackScheduledTime=-1;  if (this.hasViews()) {    EventBean[] oldData=null;    if (!currentBatch.isEmpty()) {      oldData=currentBatch.keySet().toArray(new EventBean[currentBatch.size()]);    }    if (oldData != null) {      if (InstrumentationHelper.ENABLED) {        InstrumentationHelper.get().qViewIndicate(this,factory.getViewName(),null,oldData);      }      updateChildren(null,oldData);      if (InstrumentationHelper.ENABLED) {        InstrumentationHelper.get().aViewIndicate();      }    }  }  currentBatch.clear();}  }
class C{  public IllegalAccessException(){}  }
class C{  private void displayPopupMenu(final MouseEvent event){  final int selectedIndex=getSelectionIndex(event);  if (selectedIndex != -1) {    final TargetProcessThread thread=m_table.getModel().getThreads().get(selectedIndex);    final IDebugger debugger=m_debugPerspectiveModel.getCurrentSelectedDebugger();    final CThreadInformationTableMenu popupMenu=new CThreadInformationTableMenu(SwingUtilities.getWindowAncestor(CThreadInformationPanel.this),debugger,thread);    popupMenu.show(m_table,event.getX(),event.getY());  }}  }
class C{  @Override public DateTime nowUtc(){  return new DateTime(currentTimeMillis.get(),UTC);}  }
class C{  public EMail createEMail(MUser from,MUser to,String subject,String message){  return createEMail(from,to,subject,message,false);}  }
class C{  private void doUpdate(HttpServletRequest request,SubjectAreaEditForm frm) throws Exception {  Session hibSession=null;  Transaction tx=null;  if (frm.getUniqueId() == null)   sessionContext.checkPermission(Right.SubjectAreaAdd); else   sessionContext.checkPermission(frm.getUniqueId(),"SubjectArea",Right.SubjectAreaEdit);  try {    SubjectAreaDAO sdao=new SubjectAreaDAO();    DepartmentDAO ddao=new DepartmentDAO();    SubjectArea sa=null;    Department oldDept=null;    hibSession=sdao.getSession();    tx=hibSession.beginTransaction();    if (frm.getUniqueId() != null)     sa=sdao.get(frm.getUniqueId()); else     sa=new SubjectArea();    Department dept=ddao.get(frm.getDepartment());    HashSet<Class_> updatedClasses=new HashSet<Class_>();    sa.setSession(SessionDAO.getInstance().get(sessionContext.getUser().getCurrentAcademicSessionId(),hibSession));    sa.setSubjectAreaAbbreviation(frm.getAbbv());    if (sa.getDepartment() != null && !dept.equals(sa.getDepartment())) {      HashSet availableRooms=new HashSet();      HashSet availableBuildings=new HashSet();      for (Iterator i=dept.getRoomDepts().iterator(); i.hasNext(); ) {        RoomDept roomDept=(RoomDept)i.next();        availableRooms.add(roomDept.getRoom());        if (roomDept.getRoom() instanceof Room)         availableBuildings.add(((Room)roomDept.getRoom()).getBuilding());      }      for (Iterator i=sa.getCourseOfferings().iterator(); i.hasNext(); ) {        CourseOffering co=(CourseOffering)i.next();        if (!co.getIsControl() || co.getInstructionalOffering() == null)         continue;        for (Iterator j=co.getInstructionalOffering().getInstrOfferingConfigs().iterator(); j.hasNext(); ) {          InstrOfferingConfig ioc=(InstrOfferingConfig)j.next();          for (Iterator k=ioc.getSchedulingSubparts().iterator(); k.hasNext(); ) {            SchedulingSubpart ss=(SchedulingSubpart)k.next();            if (!ss.getManagingDept().isExternalManager()) {              for (Iterator l=ss.getPreferences().iterator(); l.hasNext(); ) {                Preference p=(Preference)l.next();                if (p instanceof TimePref)                 continue;                if (p instanceof RoomPref) {                  RoomPref rp=(RoomPref)p;                  if (!availableRooms.contains(rp.getRoom()))                   l.remove();                } else                 if (p instanceof BuildingPref) {                  BuildingPref bp=(BuildingPref)p;                  if (!availableBuildings.contains(bp.getBuilding()))                   l.remove();                } else                 if (p instanceof RoomFeaturePref) {                  RoomFeaturePref rfp=(RoomFeaturePref)p;                  if (rfp.getRoomFeature() instanceof DepartmentRoomFeature)                   l.remove();                } else                 if (p instanceof RoomGroupPref) {                  RoomGroupPref rgp=(RoomGroupPref)p;                  if (!rgp.getRoomGroup().isGlobal())                   l.remove();                }              }              hibSession.saveOrUpdate(ss);            }            for (Iterator l=ss.getClasses().iterator(); l.hasNext(); ) {              Class_ c=(Class_)l.next();              if (!c.getManagingDept().isExternalManager()) {                for (Iterator m=c.getPreferences().iterator(); m.hasNext(); ) {                  Preference p=(Preference)m.next();                  if (p instanceof TimePref)                   continue;                  if (p instanceof RoomPref) {                    RoomPref rp=(RoomPref)p;                    if (!availableRooms.contains(rp.getRoom()))                     m.remove();                  } else                   if (p instanceof BuildingPref) {                    BuildingPref bp=(BuildingPref)p;                    if (!availableBuildings.contains(bp.getBuilding()))                     m.remove();                  } else                   if (p instanceof RoomFeaturePref) {                    RoomFeaturePref rfp=(RoomFeaturePref)p;                    if (rfp.getRoomFeature() instanceof DepartmentRoomFeature)                     m.remove();                  } else                   if (p instanceof RoomGroupPref) {                    RoomGroupPref rgp=(RoomGroupPref)p;                    if (!rgp.getRoomGroup().isGlobal())                     m.remove();                  }                }                c.setManagingDept(dept,sessionContext.getUser(),hibSession);              }              for (Iterator m=c.getClassInstructors().iterator(); m.hasNext(); ) {                ClassInstructor ci=(ClassInstructor)m.next();                DepartmentalInstructor newInstructor=null;                if (ci.getInstructor().getExternalUniqueId() != null) {                  newInstructor=DepartmentalInstructor.findByPuidDepartmentId(ci.getInstructor().getExternalUniqueId(),dept.getUniqueId());                }                ci.getInstructor().getClasses().remove(ci);                hibSession.saveOrUpdate(ci.getInstructor());                if (newInstructor != null) {                  ci.setInstructor(newInstructor);                  newInstructor.getClasses().add(ci);                  hibSession.saveOrUpdate(newInstructor);                } else {                  m.remove();                  hibSession.delete(ci);                }              }              hibSession.saveOrUpdate(c);              updatedClasses.add(c);            }          }        }      }      for (Iterator i=sa.getDepartment().getPreferences().iterator(); i.hasNext(); ) {        Preference p=(Preference)i.next();        if (p instanceof DistributionPref) {          DistributionPref dp=(DistributionPref)p;          boolean change=true;          for (Iterator j=dp.getOrderedSetOfDistributionObjects().iterator(); j.hasNext(); ) {            DistributionObject dobj=(DistributionObject)j.next();            if (dobj.getPrefGroup() instanceof SchedulingSubpart) {              SchedulingSubpart ss=(SchedulingSubpart)dobj.getPrefGroup();              if (!ss.getControllingCourseOffering().getSubjectArea().equals(sa))               change=false;              break;            } else             if (dobj.getPrefGroup() instanceof Class_) {              Class_ c=(Class_)dobj.getPrefGroup();              if (!c.getSchedulingSubpart().getControllingCourseOffering().getSubjectArea().equals(sa))               change=false;              break;            }          }          if (change) {            dp.setOwner(dept);            hibSession.saveOrUpdate(dp);          }        }      }      oldDept=sa.getDepartment();      sa.setDepartment(dept);    } else     if (sa.getDepartment() == null) {      sa.setDepartment(dept);    }    sa.setExternalUniqueId(frm.getExternalId());    sa.setTitle(frm.getTitle());    hibSession.saveOrUpdate(sa);    ChangeLog.addChange(hibSession,sessionContext,sa,ChangeLog.Source.SUBJECT_AREA_EDIT,(frm.getUniqueId() == null ? ChangeLog.Operation.CREATE : ChangeLog.Operation.UPDATE),sa,dept);    tx.commit();    hibSession.refresh(sa);    hibSession.flush();    hibSession.refresh(sa.getSession());    if (oldDept != null) {      hibSession.refresh(oldDept);      hibSession.refresh(sa.getDepartment());    }    String className=ApplicationProperty.ExternalActionClassEdit.value();    if (className != null && className.trim().length() > 0) {      ExternalClassEditAction editAction=(ExternalClassEditAction)(Class.forName(className).newInstance());      for (      Class_ c : updatedClasses) {        editAction.performExternalClassEditAction(c,hibSession);      }    }  } catch (  Exception e) {    if (tx != null)     tx.rollback();    throw (e);  }}  }
class C{  public void destroy(Contextual contextual){  String scopeId=(String)request.getAttribute(SCOPE_ID);  if (null != scopeId) {    HttpSession session=request.getSession();    if (contextual instanceof PassivationCapable == false) {      throw new RuntimeException("Unexpected type for contextual");    }    PassivationCapable pc=(PassivationCapable)contextual;    final String sessionKey=SCOPE_ID + "-" + scopeId;    Map<String,Object> scopeMap=(Map<String,Object>)session.getAttribute(sessionKey);    if (null != scopeMap) {      Object instance=scopeMap.get(INSTANCE + pc.getId());      CreationalContext<?> creational=(CreationalContext<?>)scopeMap.get(CREATIONAL + pc.getId());      if (null != instance && null != creational) {        contextual.destroy(instance,creational);        creational.release();      }    }  }}  }
class C{  public UnitChooser(final Collection<Unit> units,final Map<Unit,Collection<Unit>> dependent,final GameData data,final boolean allowTwoHit,final IUIContext uiContext){  this(units,Collections.emptyList(),dependent,data,allowTwoHit,uiContext);}  }
class C{  public Hours toStandardHours(){  return Hours.hours(FieldUtils.safeMultiply(getValue(),DateTimeConstants.HOURS_PER_DAY));}  }
class C{  private void syncDestination(State state){  FileOutputStream downloadedFileStream=null;  try {    downloadedFileStream=new FileOutputStream(state.mFilename,true);    downloadedFileStream.getFD().sync();  } catch (  FileNotFoundException ex) {    Log.w(Constants.TAG,"file " + state.mFilename + " not found: "+ ex);  }catch (  SyncFailedException ex) {    Log.w(Constants.TAG,"file " + state.mFilename + " sync failed: "+ ex);  }catch (  IOException ex) {    Log.w(Constants.TAG,"IOException trying to sync " + state.mFilename + ": "+ ex);  }catch (  RuntimeException ex) {    Log.w(Constants.TAG,"exception while syncing file: ",ex);  } finally {    if (downloadedFileStream != null) {      try {        downloadedFileStream.close();      } catch (      IOException ex) {        Log.w(Constants.TAG,"IOException while closing synced file: ",ex);      }catch (      RuntimeException ex) {        Log.w(Constants.TAG,"exception while closing file: ",ex);      }    }  }}  }
class C{  private void restoreModules(Snapshot snapshot,Application application,String tag) throws ServiceException {  for (  String key : snapshot.getAppConfig().keySet()) {    try {      hookService.call(snapshot.getAppConfig().get(key).getName(),RemoteExecAction.CLONE_PRE_ACTION);      Module module=ModuleFactory.getModule(snapshot.getAppConfig().get(key).getName());      module.setApplication(application);      moduleService.checkImageExist(snapshot.getAppConfig().get(key).getName());      module.getImage().setName(snapshot.getAppConfig().get(key).getName());      module.setName(snapshot.getAppConfig().get(key).getName());      Map<String,String> properties=new HashMap<>();      properties.put("username",snapshot.getAppConfig().get(key).getProperties().get("username-" + module.getImage().getName()));      properties.put("password",snapshot.getAppConfig().get(key).getProperties().get("password-" + module.getImage().getName()));      properties.put("database",snapshot.getAppConfig().get(key).getProperties().get("database-" + module.getImage().getName()));      if (tag != null) {        restoreDataModule(module);      }      hookService.call(snapshot.getAppConfig().get(key).getName(),RemoteExecAction.CLONE_POST_ACTION);    } catch (    CheckException e) {      throw new ServiceException(e.getLocalizedMessage(),e);    }  }}  }
class C{  public int segmentCount(){  return segments.length;}  }
class C{  public boolean willViewBeDetachedBecauseOrientationChange(Context context){  OrientationChangeFragment fragment=getFragment(context);  return fragment.stopped;}  }
class C{  public SimpleProjectDependency createSimpleProjectDependency(){  SimpleProjectDependencyImpl simpleProjectDependency=new SimpleProjectDependencyImpl();  return simpleProjectDependency;}  }
class C{  public void reset(){  mLastSelectedItem=MenuItem.MENU_ITEM1;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public String addAttribute(String typeUri,boolean required) throws MessageException {  String alias=generateAlias();  addAttribute(alias,typeUri,required,1);  return alias;}  }
class C{  public boolean isMaximizable(){  return maximizable;}  }
class C{  public int size(){  return this.hmap.size();}  }
class C{  public void initializeBlockingSensors(){  List<String> list=getSystemNameList();  for (int i=0; i < list.size(); i++) {    Section s=getBySystemName(list.get(i));    try {      if (s.getForwardBlockingSensor() != null) {        s.getForwardBlockingSensor().setState(Sensor.ACTIVE);      }      if (s.getReverseBlockingSensor() != null) {        s.getReverseBlockingSensor().setState(Sensor.ACTIVE);      }    } catch (    jmri.JmriException reason) {      log.error("Exception when initializing blocking Sensors for Section " + s.getSystemName());    }  }}  }
class C{  protected void forceSetComponentCount(int count){  mComponentCountActual=count;}  }
class C{  public static int readSingleByte(InputStream in) throws IOException {  byte[] buffer=new byte[1];  int result=in.read(buffer,0,1);  return (result != -1) ? buffer[0] & 0xff : -1;}  }
class C{  int generateSrc(Mappings map){  try {    int len;    Object o[];    String outputDir=Main.getOutputDir();    FileWriter fw1, fw2;    BufferedWriter out1, out2;    Map<String,String> a=map.getAliases();    if (a == null) {      Main.panic("Data not exist. (aliases)");      return 1;    }    timezoneList.putAll(a);    if (!outputDir.endsWith(File.separator)) {      outputDir+=File.separatorChar;    }    outputDir+=docDir + File.separatorChar;    File outD=new File(outputDir);    outD.mkdirs();    fw1=new FileWriter(outputDir + "index.html",false);    out1=new BufferedWriter(fw1);    out1.write(header1 + new Date() + header2+ Main.getVersionName()+ header4+ "<FRAMESET cols=\"20%,80%\">\n"+ "<FRAMESET rows=\"30%,70%\">\n"+ "<FRAME src=\"overview-frame.html\" name=\"TimeZoneListFrame\">\n"+ "<FRAME src=\"allTimeZone-frame1.html\" name=\"allTimeZoneFrame\">\n"+ "</FRAMESET>"+ "<FRAME src=\"overview-summary.html\" name=\"rightFrame\">\n"+ "</FRAMESET>\n"+ "<NOFRAMES>\n"+ "<H2>\nFrame Alert\n</H2>\n\n"+ "<P>\n\n"+ "This document is designed to be viewed using the frames feature. If you see this\n"+ "message, you are using a non-frame-capable web client.\n"+ "<BR>\n"+ "Link to<A HREF=\"overview-summary.html\">Non-frame version.</A>\n"+ "</NOFRAMES>\n"+ footer);    out1.close();    fw1.close();    fw1=new FileWriter(outputDir + "overview-frame.html",false);    out1=new BufferedWriter(fw1);    out1.write(header1 + new Date() + header2+ Main.getVersionName()+ header4+ body1+ "<TABLE BORDER=\"0\" WIDTH=\"100%\">\n<TR>\n"+ "<TD NOWRAP><FONT size=\"+1\">\n"+ "<B>Java<sup><font size=-2>TM</font></sup>&nbsp;Platform<br>Standard&nbsp;Ed.</B></FONT></TD>\n"+ "</TR>\n</TABLE>\n\n"+ "<TABLE BORDER=\"0\" WIDTH=\"100%\">\n<TR>\n<TD NOWRAP>"+ "<P>\n<FONT size=\"+1\">\nAll Time Zones Sorted By:</FONT>\n<BR>\n"+ "&nbsp;&nbsp;<A HREF=\"allTimeZone-frame1.html\" TARGET=\"allTimeZoneFrame\">GMT offsets</A></FONT>\n<BR>\n"+ "&nbsp;&nbsp;<A HREF=\"allTimeZone-frame2.html\" TARGET=\"allTimeZoneFrame\">Zone names</A></FONT>\n<BR>"+ "&nbsp;&nbsp;<A HREF=\"allTimeZone-frame3.html\" TARGET=\"allTimeZoneFrame\">City names</A></FONT>\n"+ "<P>\n<FONT size=\"+1\">\nContinents and Oceans</FONT>\n<BR>\n");    for (    String regionKey : regionList.keySet()) {      out1.write("&nbsp;&nbsp;<A HREF=\"" + regionList.get(regionKey) + "\" TARGET=\"allTimeZoneFrame\">"+ regionKey+ "</A><BR>\n");      fw2=new FileWriter(outputDir + regionList.get(regionKey),false);      out2=new BufferedWriter(fw2);      out2.write(header1 + new Date() + header3+ regionKey+ header4+ body1+ "<FONT size=\"+1\"><B>"+ regionKey+ "</B></FONT>\n<BR>\n<TABLE>\n<TR>\n<TD>");      boolean found=false;      for (      String timezoneKey : timezoneList.keySet()) {        int regionIndex=timezoneKey.indexOf('/');        if (regionIndex == -1 || !regionKey.equals(timezoneKey.substring(0,regionIndex))) {          if (found) {            break;          } else {            continue;          }        }        found=true;        if (a.containsKey(timezoneKey)) {          Object realName=a.get(timezoneKey);          while (a.containsKey(realName)) {            realName=a.get(realName);          }          out2.write(timezoneKey + " (alias for " + "<A HREF=\""+ timezoneList.get(realName)+ "\" TARGET=\"rightFrame\">"+ realName+ "</A>)");        } else {          out2.write("<A HREF=\"" + timezoneList.get(timezoneKey) + "\" TARGET=\"rightFrame\">"+ timezoneKey+ "</A>");        }        out2.write("<BR>\n");      }      out2.write("</TD>\n</TR>\n</TABLE>\n" + body2 + footer);      out2.close();      fw2.close();    }    out1.write("</FONT></TD>\n</TR></TABLE>\n" + body2 + footer);    out1.close();    fw1.close();    fw1=new FileWriter(outputDir + "allTimeZone-frame1.html",false);    out1=new BufferedWriter(fw1);    out1.write(header1 + new Date() + header2+ Main.getVersionName()+ header4+ body1+ "<FONT size=\"+1\"><B>Sorted by GMT offsets</B></FONT>\n"+ "<BR>\n\n"+ "<TABLE BORDER=\"0\" WIDTH=\"100%\">\n"+ "<TR>\n<TD NOWRAP>\n");    List<Integer> roi=map.getRawOffsetsIndex();    List<Set<String>> roit=map.getRawOffsetsIndexTable();    int index=0;    for (    Integer offset : zonesByOffset.keySet()) {      int off=roi.get(index);      Set<String> perRO=zonesByOffset.get(offset);      if (offset == off) {        perRO.addAll(roit.get(index));      }      index++;      for (      String timezoneKey : perRO) {        out1.write("<TR>\n<TD><FONT SIZE=\"-1\">(" + Time.toGMTFormat(offset.toString()) + ")</FONT></TD>\n<TD>");        if (a.containsKey(timezoneKey)) {          Object realName=a.get(timezoneKey);          while (a.containsKey(realName)) {            realName=a.get(realName);          }          out1.write(timezoneKey + " (alias for " + "<A HREF=\""+ timezoneList.get(realName)+ "\" TARGET=\"rightFrame\">"+ realName+ "</A>)");        } else {          out1.write("<A HREF=\"" + timezoneList.get(timezoneKey) + "\" TARGET=\"rightFrame\">"+ timezoneKey+ "</A>");        }        out1.write("</TD>\n</TR>\n");      }    }    out1.write("</FONT></TD>\n</TR>\n</TABLE>\n" + body2 + footer);    out1.close();    fw1.close();    fw1=new FileWriter(outputDir + "allTimeZone-frame2.html",false);    out1=new BufferedWriter(fw1);    out1.write(header1 + new Date() + header2+ Main.getVersionName()+ header4+ body1+ "<FONT size=\"+1\"><B>Sorted by zone names</B></FONT>\n"+ "<BR>\n\n"+ "<TABLE BORDER=\"0\" WIDTH=\"100%\">\n"+ "<TR>\n<TD NOWRAP>\n");    o=timezoneList.keySet().toArray();    len=timezoneList.size();    for (int i=0; i < len; i++) {      Object timezoneKey=o[i];      if (a.containsKey(timezoneKey)) {        Object realName=a.get(timezoneKey);        while (a.containsKey(realName)) {          realName=a.get(realName);        }        out1.write(timezoneKey + " (alias for " + "<A HREF=\""+ timezoneList.get(realName)+ "\" TARGET=\"rightFrame\">"+ realName+ "</A>)");      } else {        out1.write("<A HREF=\"" + timezoneList.get(timezoneKey) + "\" TARGET=\"rightFrame\">"+ timezoneKey+ "</A>");      }      out1.write("<BR> \n");    }    out1.write("</FONT></TD>\n</TR>\n</TABLE>\n" + body2 + footer);    out1.close();    fw1.close();    fw1=new FileWriter(outputDir + "allTimeZone-frame3.html",false);    out1=new BufferedWriter(fw1);    out1.write(header1 + new Date() + header2+ Main.getVersionName()+ header4+ body1+ "<FONT size=\"+1\"><B>Sorted by city names</B></FONT>\n"+ "<BR>\n\n"+ "<TABLE BORDER=\"0\" WIDTH=\"100%\">\n"+ "<TR>\n<TD NOWRAP>\n");    Set<String> aliasSet=a.keySet();    len=aliasSet.size();    String aliasNames[]=aliasSet.toArray(new String[0]);    for (int i=0; i < len; i++) {      displayNameList.put(transform(aliasNames[i]),aliasNames[i]);    }    o=displayNameList.keySet().toArray();    len=displayNameList.size();    for (int i=0; i < len; i++) {      Object displayName=o[i];      Object timezoneKey=displayNameList.get(o[i]);      if (a.containsKey(timezoneKey)) {        Object realName=a.get(timezoneKey);        while (a.containsKey(realName)) {          realName=a.get(realName);        }        out1.write(displayName + " (alias for " + "<A HREF=\""+ timezoneList.get(realName)+ "\" TARGET=\"rightFrame\">"+ realName+ "</A>)");      } else {        out1.write("<A HREF=\"" + timezoneList.get(timezoneKey) + "\" TARGET=\"rightFrame\">"+ displayName+ "</A>");      }      out1.write("<BR> \n");    }    out1.write("</FONT></TD>\n</TR>\n</TABLE>\n" + body2 + footer);    out1.close();    fw1.close();    fw1=new FileWriter(outputDir + "overview-summary.html",false);    out1=new BufferedWriter(fw1);    out1.write(header1 + new Date() + header2+ Main.getVersionName()+ header4+ body1+ "<p>This is the list of time zones generated from <B>"+ Main.getVersionName()+ "</B> for Java Platform, "+ "Standard Edition. The source code can be obtained "+ "from ftp site <a href=\"ftp://elsie.nci.nih.gov/pub/\">"+ "ftp://elsie.nci.nih.gov/pub/</a>. A total of <B>"+ len+ "</B> time zones and aliases are supported "+ "in this edition. For the "+ "format of rules and zones, refer to the zic "+ "(zoneinfo compiler) man page on "+ "Solaris or Linux.</p>\n"+ "<p>Note that the time zone data is not "+ "a public interface of the Java Platform. No "+ "applications should rely on the time zone data of "+ "this document. Time zone names and data "+ "may change without any prior notice.</p>\n"+ body2+ footer);    out1.close();    fw1.close();  } catch (  IOException e) {    Main.panic("IO error: " + e.getMessage());    return 1;  }  return 0;}  }
class C{  @SuppressWarnings("unchecked") public EnumeratedData(DataSource original,double offset,double steps){  this.original=original;  this.offset=offset;  this.steps=steps;  Class<? extends Comparable<?>>[] typesOrig=original.getColumnTypes();  Class<? extends Comparable<?>>[] types=new Class[typesOrig.length + 1];  System.arraycopy(typesOrig,0,types,1,typesOrig.length);  types[0]=Double.class;  setColumnTypes(types);  original.addDataListener(this);}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.legendShape=SerialUtilities.readShape(stream);}  }
class C{  public SVGDocument createSVGDocument(String uri,Reader r) throws IOException {  return (SVGDocument)createDocument(uri,r);}  }
class C{  public void startInternalActivity(Intent intent,boolean requireBackStack){  helper.startInternalActivity(intent,requireBackStack);}  }
class C{  public void reset(){}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:11.940 -0500",hash_original_method="2BD2C11E492A0926A3928FBE6062AA1A",hash_generated_method="432462BB27832EACC9C5D0D13F532176") @Override public String toString(){  return "[SSLServerSocketImpl]";}  }
class C{  public int size(){  return count;}  }
class C{  public String nextToken(){  if (currentPosition >= maxPosition) {    throw new NoSuchElementException();  }  int start=currentPosition;  while ((currentPosition < maxPosition) && Character.isLetterOrDigit(str.charAt(currentPosition))) {    currentPosition++;  }  if ((start == currentPosition) && (!Character.isLetterOrDigit(str.charAt(currentPosition)))) {    currentPosition++;  }  return str.substring(start,currentPosition);}  }
class C{  public void clear(int bitIndex){  if (bitIndex < 0) {    throw new IndexOutOfBoundsException("bitIndex < 0: " + bitIndex);  }  int unitIndex=unitIndex(bitIndex);  if (unitIndex >= unitsInUse) {    return;  }  bits[unitIndex]&=~bit(bitIndex);  if (bits[unitsInUse - 1] == 0)   recalculateUnitsInUse();}  }
class C{  public boolean isGenerated(){  Object oo=get_Value(COLUMNNAME_IsGenerated);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void endNonEscaping() throws org.xml.sax.SAXException {  m_disableOutputEscapingStates.pop();}  }
class C{  @Override public List<ReilInstruction> translate(final ITranslationEnvironment environment,final InstructionType instruction,final List<ITranslationExtension<InstructionType>> extensions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instruction,"Error: Argument instruction can't be null");  final String mnemonic=instruction.getMnemonic();  if (mnemonic == null) {    return new ArrayList<ReilInstruction>();  }  final IInstructionTranslator translator=translators.get(mnemonic.toLowerCase());  if (translators.containsKey(mnemonic.toLowerCase())) {    final ArrayList<ReilInstruction> instructions=new ArrayList<ReilInstruction>();    translator.translate(environment,instruction,instructions);    for (    final ITranslationExtension<InstructionType> extension : extensions) {      extension.postProcess(environment,instruction,instructions);    }    return instructions;  } else {    return Lists.newArrayList(ReilHelpers.createUnknown(ReilHelpers.toReilAddress(instruction.getAddress()).toLong()));  }}  }
class C{  public float[] ToArray(){  return points;}  }
class C{  public void dispose(){  g.dispose();}  }
class C{  private static void writeJson() throws IOException {  OutputStream outputStream=new ByteArrayOutputStream();  JsonWriter writer=new JsonWriter(new OutputStreamWriter(outputStream,"UTF-8"));  writer.beginObject();  writer.name("message");  writer.value("Hi");  writer.name("place");  writer.beginObject();  writer.name("name");  writer.value("World!");  writer.endObject();  writer.endObject();  writer.close();  System.out.println(outputStream.toString());}  }
class C{  private static Properties loadProperties(){  Properties properties=new Properties();  File file=new File("DataPartitioner.properties");  FileInputStream fis=null;  try {    if (file.exists()) {      fis=new FileInputStream(file);      properties.load(fis);    }  } catch (  Exception e) {    LOGGER.error(e,e.getMessage());  } finally {    if (null != fis) {      try {        fis.close();      } catch (      IOException e) {        LOGGER.error(e,e.getMessage());      }    }  }  return properties;}  }
class C{  protected void parseMemberName(final String[] args){  for (  String arg : args) {    if (!(arg.startsWith(OPTION_PREFIX) || Command.isCommand(arg))) {      setMemberName(arg);      break;    }  }}  }
class C{  @Override boolean complete(Object result,Throwable failure,boolean checkArgs){synchronized (future) {    if (!completeCalled) {      if (super.complete(result,failure,checkArgs))       future.complete(result,failure,config.fallback,success);      completeCalled=true;    }    return completed;  }}  }
class C{  public ApplicationIdSpeechletRequestVerifier(Set<String> supportedApplicationIds){  this.supportedApplicationIds=Collections.unmodifiableSet(new HashSet<String>(supportedApplicationIds));}  }
class C{  private void match(int ttype,String token) throws ParserException, IOException {  if (lookahead.ttype == ttype && lookahead.sval.compareTo(token) == 0) {    nextToken();  } else {    throw new SyntaxException(st.lineno(),new Token(ttype,token),lookahead);  }}  }
class C{  public boolean moveToSlot(@Nonnull IInventory inv,@Nonnull ItemStack filter,int from,int to){  if (!checkSlotAndSize(inv,filter,from))   return false;  final ItemStack stack=inv.decrStackSize(from,filter.stackSize);  inv.setInventorySlotContents(to,stack);  return true;}  }
class C{  public final void testSetHintTextColorWithIntegerParameter(){  int color=Color.BLACK;  ArrayAdapter<CharSequence> adapter=new ArrayAdapter<CharSequence>(getContext(),android.R.layout.simple_spinner_dropdown_item,new CharSequence[]{"entry1","entry2"});  Spinner spinner=new Spinner(getContext());  spinner.setAdapter(adapter);  spinner.setHintTextColor(color);  assertEquals(color,spinner.getHintTextColors().getDefaultColor());}  }
class C{  public void move(RepositoryLocation source,Folder destination,String newName,boolean overwriteIfExists,ProgressListener listener) throws RepositoryException {  Entry entry=source.locateEntry();  if (entry == null) {    throw new RepositoryException("No such entry: " + source);  } else {    String sourceAbsolutePath=source.getAbsoluteLocation();    String destinationAbsolutePath;    if (!(entry instanceof Folder)) {      destinationAbsolutePath=destination.getLocation().getAbsoluteLocation() + RepositoryLocation.SEPARATOR + source.getName();    } else {      destinationAbsolutePath=destination.getLocation().getAbsoluteLocation();    }    if (sourceAbsolutePath.equals(destinationAbsolutePath)) {      throw new RepositoryException(I18N.getMessage(I18N.getErrorBundle(),"repository.repository_move_same_folder"));    }    if (RepositoryGuiTools.isSuccessor(sourceAbsolutePath,destinationAbsolutePath)) {      throw new RepositoryException(I18N.getMessage(I18N.getErrorBundle(),"repository.repository_move_into_subfolder"));    }    if (destination.getLocation().getRepository() != source.getRepository()) {      copy(source,destination,newName,listener);      entry.delete();    } else {      String effectiveNewName=newName != null ? newName : entry.getName();      Entry toDeleteEntry=null;      if (destination.containsEntry(effectiveNewName)) {        if (overwriteIfExists) {          for (          DataEntry dataEntry : destination.getDataEntries()) {            if (dataEntry.getName().equals(effectiveNewName)) {              toDeleteEntry=dataEntry;            }          }          for (          Folder folderEntry : destination.getSubfolders()) {            if (folderEntry.getName().equals(effectiveNewName)) {              toDeleteEntry=folderEntry;            }          }          if (toDeleteEntry != null) {            toDeleteEntry.delete();          }        } else {          newName=getNewNameForExistingEntry(destination,effectiveNewName);        }      }      if (listener != null) {        listener.setTotal(100);        listener.setCompleted(10);      }      if (newName == null) {        entry.move(destination);      } else {        entry.move(destination,newName);      }      if (listener != null) {        listener.setCompleted(100);        listener.complete();      }    }  }}  }
class C{  public void printCfMaps(){  Iterator it=_cfMap.entrySet().iterator();  while (it.hasNext()) {    Entry entry=(Entry)it.next();    System.out.println(String.format("\t\tColumn family: %s",entry.getKey()));  }}  }
class C{  protected boolean canNavigate(){  return true;}  }
class C{  public void destination(Object buildDir){  this.destination=buildDir;}  }
class C{  public void reset(){  digest.reset();  digest.update(inputPad,0,inputPad.length);}  }
class C{  private final void addCount(long x,int check){  CounterCell[] as;  long b, s;  if ((as=counterCells) != null || !U.compareAndSwapLong(this,BASECOUNT,b=baseCount,s=b + x)) {    CounterHashCode hc;    CounterCell a;    long v;    int m;    boolean uncontended=true;    if ((hc=threadCounterHashCode.get()) == null || as == null || (m=as.length - 1) < 0 || (a=as[m & hc.code]) == null || !(uncontended=U.compareAndSwapLong(a,CELLVALUE,v=a.value,v + x))) {      fullAddCount(x,hc,uncontended);      return;    }    if (check <= 1)     return;    s=sumCount();  }  if (check >= 0) {    Node<V>[] tab, nt;    int n, sc;    while (s >= (long)(sc=sizeCtl) && (tab=table) != null && (n=tab.length) < MAXIMUM_CAPACITY) {      int rs=resizeStamp(n);      if (sc < 0) {        if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 || sc == rs + MAX_RESIZERS || (nt=nextTable) == null || transferIndex <= 0)         break;        if (U.compareAndSwapInt(this,SIZECTL,sc,sc + 1))         transfer(tab,nt);      } else       if (U.compareAndSwapInt(this,SIZECTL,sc,(rs << RESIZE_STAMP_SHIFT) + 2))       transfer(tab,null);      s=sumCount();    }  }}  }
class C{  public static boolean isNumber(String s){  if (s.length() == 0) {    return false;  }  for (  char c : s.toCharArray()) {    if (!Character.isDigit(c)) {      return false;    }  }  return true;}  }
class C{  public boolean isValidSimpleAssignmentTarget(){  return false;}  }
class C{  public final void addStringArray(String[] s){  for (  String line : s) {    this.appendLine(line);  }}  }
class C{  public void rollback(final Set<String> graphSourceNamesToCloseTxOn){  closeTx(graphSourceNamesToCloseTxOn,Transaction.Status.ROLLBACK);}  }
class C{  private static void validateBodyLoggingOverrideParameters(){  boolean checkEnableOverrides=isSoapBodyLoggingEnabled();  validateBodyLoggingOverrideParamNotUsed(checkEnableOverrides,true);  validateBodyLoggingOverrideParamNotUsed(checkEnableOverrides,false);}  }
class C{  public static boolean isLanguageLiteral(Literal literal){  return Objects.requireNonNull(literal,"Literal cannot be null").getLanguage().isPresent();}  }
class C{  LookupEnvironment lookupEnvironment(){  return null;}  }
class C{  public static List<LicenseInfo> decodeLicenses(String infoStr) throws Exception {  _log.info("Retrieving licenses from coordinator service");  List<LicenseInfo> licenseList=new ArrayList<LicenseInfo>();  if (infoStr != null && !infoStr.isEmpty()) {    for (    String licenseStr : infoStr.split(LICENSE_SEPARATOR)) {      String expireDate=null;      LicenseType licenseType=null;      for (      String licenseProps : licenseStr.split(ENCODING_SEPARATOR)) {        String[] licenseProp=licenseProps.split(ENCODING_EQUAL);        if (licenseProp.length < 2) {          continue;        }        if (licenseProp[0].equalsIgnoreCase(LICENSE_TYPE)) {          licenseType=LicenseType.findByValue(licenseProp[1]);        }        if (licenseProp[0].equalsIgnoreCase(EXPIRATION_DATE)) {          expireDate=licenseProp[1];        }        if (licenseType != null && expireDate != null) {          licenseList.add(new LicenseInfo(licenseType,expireDate));          break;        }      }    }  }  return licenseList;}  }
class C{  public void resetBase(){  init();}  }
class C{  @Override public void finishStage(ResponseBuilder rb){  if (rb.stage != ResponseBuilder.STAGE_GET_FIELDS) {    return;  }  mergeResponses(rb);}  }
class C{  public static boolean requiresBidi(char[] text,int start,int limit){  final int RTLMask=(1 << Bidi.DIRECTION_RIGHT_TO_LEFT | 1 << AL | 1 << RLE | 1 << RLO | 1 << AN);  if (0 > start || start > limit || limit > text.length) {    throw new IllegalArgumentException("Value start " + start + " is out of range 0 to "+ limit);  }  for (int i=start; i < limit; ++i) {    if (Character.isHighSurrogate(text[i]) && i < (limit - 1) && Character.isLowSurrogate(text[i + 1])) {      if (((1 << UCharacter.getDirection(Character.codePointAt(text,i))) & RTLMask) != 0) {        return true;      }    } else     if (((1 << UCharacter.getDirection(text[i])) & RTLMask) != 0) {      return true;    }  }  return false;}  }
class C{  public boolean hasAbPageVariationId(){  return hasExtension(GwoAbPageVariationId.class);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public NotificationChain basicSetActualThisTypeRef(ParameterizedTypeRef newActualThisTypeRef,NotificationChain msgs){  ParameterizedTypeRef oldActualThisTypeRef=actualThisTypeRef;  actualThisTypeRef=newActualThisTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,TypeRefsPackage.BOUND_THIS_TYPE_REF__ACTUAL_THIS_TYPE_REF,oldActualThisTypeRef,newActualThisTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @SafeVarargs public static <T>OutputMatcher<T> anyOf(OutputMatcher<T>... matchers){  return OutputMatcherFactory.create(AnyOf.anyOf(matchers));}  }
class C{  public int executeRawNoArgs(DatabaseConnection connection,String statement) throws SQLException {  logger.debug("running raw execute statement: {}",statement);  return connection.executeStatement(statement,DatabaseConnection.DEFAULT_RESULT_FLAGS);}  }
class C{  public synchronized void addObserver(Observer o){  if (o == null)   throw new NullPointerException();  if (!obs.contains(o)) {    obs.addElement(o);  }}  }
class C{  public void close() throws IOException {  manager.sendClose(info);}  }
class C{  public void waitDbNodesStable(DbJmxClient geoInstance,String vdcShortId,int vdcHosts){  String prefix="Waiting for DB cluster become stable for VDC with shortId ' " + vdcShortId + "'...";  log.info(prefix);  long start=System.currentTimeMillis();  int numHosts=(vdcHosts / 2 + 2) > vdcHosts ? vdcHosts : vdcHosts / 2 + 2;  while (System.currentTimeMillis() - start < DB_STABLE_TIMEOUT) {    try {      List<String> liveNodes=geoInstance.getDcLiveNodes(vdcShortId);      log.info("{} has live nodes of {}",vdcShortId,liveNodes);      if (liveNodes.size() >= numHosts) {        int i=0;        for (        String host : liveNodes) {          if (!geoInstance.getJoiningNodes().contains(host) && !geoInstance.getLeavingNodes().contains(host) && !geoInstance.getMovingNodes().contains(host)) {            log.info("Node {} jumps to NORMAL",host);            ++i;          }        }        if (i >= numHosts) {          log.info("Living nodes {} meet the requirement: {}",liveNodes.toString(),numHosts);          log.info("{} Done",prefix);          return;        }      } else {        log.info("db {} not meet {} hosts yet",vdcShortId,numHosts);      }      TimeUnit.SECONDS.sleep(WAIT_INTERVAL_IN_SEC);    } catch (    InterruptedException ex) {    }catch (    Exception ex) {      log.error("Exception checking DB cluster status",ex);    }  }  log.info("{} Timed out",prefix);  throw new IllegalStateException(String.format("%s : Timed out",prefix));}  }
class C{  public void testStatistic() throws Exception {  CountStatisticImpl stat=new CountStatisticImpl("myCounter","seconds","myDescription");  stat.setEnabled(true);  assertStatistic(stat,"myCounter","seconds","myDescription");  assertEquals(0,stat.getCount());  stat.increment();  assertEquals(1,stat.getCount());  stat.increment();  assertEquals(2,stat.getCount());  stat.decrement();  assertEquals(1,stat.getCount());  Thread.sleep(500);  stat.increment();  assertLastTimeNotStartTime(stat);  LOG.info("Counter is: " + stat);  stat.reset();  assertEquals(0,stat.getCount());}  }
class C{  public Where<T,ID> exists(QueryBuilder<?,?> subQueryBuilder){  subQueryBuilder.enableInnerQuery();  addClause(new Exists(new InternalQueryBuilderWrapper(subQueryBuilder)));  return this;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.FUNCTION_EXPRESSION__ANNOTATION_LIST:    setAnnotationList((ExpressionAnnotationList)null);  return;case N4JSPackage.FUNCTION_EXPRESSION__TYPE_VARS:getTypeVars().clear();return;case N4JSPackage.FUNCTION_EXPRESSION__NAME:setName(NAME_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public static String toNTriplesString(Value value){  return toNTriplesString(value,BasicWriterSettings.XSD_STRING_TO_PLAIN_LITERAL.getDefaultValue());}  }
class C{  public CHM(int initialCapacity,float loadFactor){  this(initialCapacity,loadFactor,DFLT_CONC_LVL);}  }
class C{  public void insert(String s){  tree.insert(s,true);}  }
class C{  public void selectInitialValue(){  OptionPaneUI ui=getUI();  if (ui != null) {    ui.selectInitialValue(this);  }}  }
class C{  public Maybe<Zipper<A>> maybeModifyNext(UnaryOperator<A> operator){  return Maybe.JustWhenTrue(!isEnd(),null);}  }
class C{  public void activate(){  node.activate();}  }
class C{  String encodedQuery(){  if (queryNamesAndValues == null)   return null;  int queryStart=url.indexOf('?') + 1;  int queryEnd=delimiterOffset(url,queryStart + 1,url.length(),"#");  return url.substring(queryStart,queryEnd);}  }
class C{  static String changeLess32toXML(String string) throws IOException {  StringBuilder sb=new StringBuilder();  StringReader sr=new StringReader(string);  int i=0;  while ((i=sr.read()) > -1) {    if (i < 32) {      sb.append('\\');      sb.append(Integer.toHexString(i));    } else {      sb.append((char)i);    }  }  return sb.toString();}  }
class C{  public boolean voidIt(){  log.info("voidIt - " + toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_VOID);  if (m_processMsg != null)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_VOID);  if (m_processMsg != null)   return false;  return false;}  }
class C{  public static final SandboxBody show(Window owner){  AddBodyDialog dialog=new AddBodyDialog(owner);  dialog.setLocationRelativeTo(owner);  dialog.setIconImage(Icons.ADD_BODY.getImage());  dialog.setVisible(true);  if (!dialog.canceled) {    SandboxBody body=dialog.body;    body.translate(dialog.pnlTransform.getTranslation());    body.rotateAboutCenter(dialog.pnlTransform.getRotation());synchronized (AddBodyDialog.class) {      N++;    }    return body;  }  return null;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private static void unregisterKeyForClient(DistributedMember clientId,Object key){  try {    ClientSession cs=server.getClientSession(clientId);    if (cs.isPrimary()) {      cs.unregisterInterest(Region.SEPARATOR + REGION_NAME,key,false);    }  } catch (  Exception ex) {    Assert.fail("failed while un-registering key(" + key + ") for client "+ clientId,ex);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void simulate(int tics,int ticsBetweenDraw){  for (int i=0; i < tics; i++) {    g.tic();    if ((i % ticsBetweenDraw) == 0) {      g.drawWorld();      StdDraw.show(PAUSE_TIME_PER_SIMSTEP);    }  }}  }
class C{  public ProblemEvaluator(Problem problem,Solution solution){  super();  this.problem=problem;  this.solution=solution;}  }
class C{  public NounTag(String name){  super(name);}  }
class C{  public static double norm(double t){  return mod(t,_2_PI);}  }
class C{  public boolean isInputMandatory(){  return (udaDefinition.getConfigurationType() == UdaConfigurationType.USER_OPTION_MANDATORY);}  }
class C{  @Override public void postProcess() throws Exception {  m_ResultListener.postProcess(this);  if (m_debugOutput) {    if (m_ZipDest != null) {      m_ZipDest.finished();      m_ZipDest=null;    }  }}  }
class C{  public boolean isStylesheetParsingComplete(){  return m_parsingComplete;}  }
class C{  public boolean isDiscoveryBye(){  return discoveryBye;}  }
class C{  protected void addBuffer(IBuffer buffer){  if (VERBOSE) {    String owner=((Openable)buffer.getOwner()).toStringWithAncestors();    System.out.println("Adding buffer for " + owner);  }synchronized (this.openBuffers) {    this.openBuffers.put(buffer.getOwner(),buffer);  }  this.openBuffers.closeBuffers();  if (VERBOSE) {    System.out.println("-> Buffer cache filling ratio = " + NumberFormat.getInstance().format(this.openBuffers.fillingRatio()) + "%");  }}  }
class C{  public static Coordinate centre(Envelope envelope){  return new Coordinate(avg(envelope.getMinX(),envelope.getMaxX()),avg(envelope.getMinY(),envelope.getMaxY()));}  }
class C{  public static <T>Response<T> startRequestSync(IParserRequest<T> request){  return SyncRequestExecutor.INSTANCE.execute(request);}  }
class C{  public void add(int element){  ensureCapacity(size + 1);  array[size++]=element;}  }
class C{  public TFloatObjectHashMap(int initialCapacity,float loadFactor,TFloatHashingStrategy strategy){  super(initialCapacity,loadFactor);  _hashingStrategy=strategy;}  }
class C{  public boolean isPositive(){  return signum() == 1;}  }
class C{  public static void put(@NotNull List<String> parameters,boolean condition,@NotNull String value){  if (condition) {    parameters.add(value);  }}  }
class C{  public static List<URI> filterNonVplexInitiatorsByExportGroupVarray(ExportGroup exportGroup,List<URI> newInitiators,URI storageURI,DbClient dbClient){  List<URI> filteredInitiators=new ArrayList<URI>(newInitiators);  StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,storageURI);  if (storageSystem != null && !storageSystem.getSystemType().equals(DiscoveredDataObject.Type.vplex.name())) {    filterOutInitiatorsNotAssociatedWithVArray(exportGroup.getVirtualArray(),filteredInitiators,dbClient);  }  return filteredInitiators;}  }
class C{  protected void injectIntoVolumeCharactersticContainer(Map<String,String> volumeCharacterstic,String charactersticKey,String altCharKey,CIMInstance volumeInstance){  Object value=getCIMPropertyValue(volumeInstance,charactersticKey);  if (null == value) {    value=getCIMPropertyValue(volumeInstance,altCharKey);  }  String charactersticName=SupportedVolumeCharacterstics.getVolumeCharacterstic(charactersticKey);  if (null != value && null != charactersticName) {    volumeCharacterstic.put(charactersticName,value.toString());  }}  }
class C{  public DaemonJvmLauncher(){}  }
class C{  public void saveSavingsToAssetAccountMapping(final JsonElement element,final String paramName,final Long productId,final int placeHolderTypeId){  saveProductToAccountMapping(element,paramName,productId,placeHolderTypeId,GLAccountType.ASSET,PortfolioProductType.SAVING);}  }
class C{  public static String enclose(String s){  if (s.startsWith("(")) {    return s;  }  return "(" + s + ")";}  }
class C{  public ReferenceMap(final ReferenceStrength keyType,final ReferenceStrength valueType,final boolean purgeValues){  super(keyType,valueType,DEFAULT_CAPACITY,DEFAULT_LOAD_FACTOR,purgeValues);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static int dpToPx(Context context,int dp){  float density=context.getResources().getDisplayMetrics().density;  return Math.round((float)dp * density);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:57.308 -0500",hash_original_method="C66B8514DBF734E1693DCAFADDDE494C",hash_generated_method="A676E7B94E7A1D16D3D9DF2FED8715D4") public String encodeBody(){  return this.privacy;}  }
class C{  public void push(ElementType type){  stack.add(type);}  }
class C{  private synchronized void migrateAPI(SQLiteDatabase db){  Log.d(LOGTAG,"Migrating API");  String user=prefs.getString(r.getString(R.string.config_username_key),"");  String pass=prefs.getString(r.getString(R.string.config_password_key),"");  String name="OpenStreetMap";  Log.d(LOGTAG,"Adding default URL with user '" + user + "'");  addAPI(db,ID_DEFAULT,name,API_DEFAULT,null,null,user,pass,ID_DEFAULT,true,true);  Log.d(LOGTAG,"Adding default URL without https");  addAPI(db,ID_DEFAULT_NO_HTTPS,"OpenStreetMap no https",API_DEFAULT_NO_HTTPS,null,null,"","",ID_DEFAULT_NO_HTTPS,true,true);  Log.d(LOGTAG,"Selecting default API");  selectAPI(db,ID_DEFAULT);  Log.d(LOGTAG,"Deleting old user/pass settings");  Editor editor=prefs.edit();  editor.remove(r.getString(R.string.config_username_key));  editor.remove(r.getString(R.string.config_password_key));  editor.commit();  Log.d(LOGTAG,"Migration finished");}  }
class C{  final static String parseLanguage(String lang){  if (lang == null) {    return null;  }  String code=null;  String language=null;  String langs[]=lang.split(",| |;|\\.|\\(|\\)|=",-1);  int i=0;  while ((language == null) && (i < langs.length)) {    code=langs[i].split("-")[0];    code=code.split("_")[0];    language=(String)LANGUAGES_MAP.get(code.toLowerCase());    i++;  }  return language;}  }
class C{  @Override public void addBatch() throws SQLException {  try {    debugCodeCall("addBatch");    checkClosedForWrite();    try {      ArrayList<? extends ParameterInterface> parameters=command.getParameters();      int size=parameters.size();      Value[] set=new Value[size];      for (int i=0; i < size; i++) {        ParameterInterface param=parameters.get(i);        Value value=param.getParamValue();        set[i]=value;      }      if (batchParameters == null) {        batchParameters=New.arrayList();      }      batchParameters.add(set);    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void perRaceDriverEpilog(DriverThread dt){  if (verbose)   System.out.println(dt.getName() + ": perRaceDriverEpilog() called");}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.015 -0500",hash_original_method="0C56D37E9DF08871E792A0F50E2C2D13",hash_generated_method="1CF19802A5E86A6D8957B67EF29CF63E") public static void fill(short[] array,short value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  private void ensureRestartPositionConsistency() throws ReplicatorException, InterruptedException {  if (!logConsistencyCheck) {    logger.info("Restart consistency checking is disabled");    return;  }  if (commitSeqno == null) {    logger.info("Restart consistency checking skipped because catalog is disabled");    return;  }  if (!"master".equals(context.getLastOnlineRoleName()) || !context.isSlave()) {    logger.info("Restart consistency checking skipped as we are not recovering a master to a slave");    return;  }  ReplDBMSHeader lastLogEvent=getLastLoggedEvent();  ReplDBMSHeader lastCatalogEvent=commitSeqno.minCommitSeqno();  if (lastCatalogEvent == null) {    logger.info("Restart consistency checking skipped as there is no restart point in catalog");    return;  }  if (lastLogEvent == null) {    logger.info("Restart consistency checking skipped as THL does not contain events");    return;  }  logger.info("Checking restart consistency when recovering master to slave: THL seqno=" + lastLogEvent.getSeqno() + " catalog seqno="+ lastCatalogEvent.getSeqno());  if (lastLogEvent.getSeqno() > lastCatalogEvent.getSeqno()) {    if (lastLogEvent.getEpochNumber() == lastCatalogEvent.getEpochNumber()) {      logger.info("Updating catalog seqno position to match THL");      THLEvent thlEvent=new THLEvent(lastLogEvent.getSeqno(),lastLogEvent.getFragno(),lastLogEvent.getLastFrag(),lastLogEvent.getSourceId(),THLEvent.REPL_DBMS_EVENT,lastLogEvent.getEpochNumber(),(Timestamp)null,lastLogEvent.getExtractedTstamp(),lastLogEvent.getEventId(),lastLogEvent.getShardId(),(ReplEvent)null);      this.updateCommitSeqno(thlEvent);    } else {      logger.warn("Unable to update catalog position as epoch numbers do not match: seqno=" + lastLogEvent.getSeqno() + " THL epoch number="+ lastLogEvent.getEpochNumber()+ " catalog epoch number="+ lastCatalogEvent.getEpochNumber());    }  } else   if (lastLogEvent.getSeqno() < lastCatalogEvent.getSeqno()) {    logger.info("Unable to update catalog position as last THL record is lower than catalog seqno");    logger.info("This condition may occur naturally if the THL has been truncated");  } else {    logger.info("Restart position is consistent; no need to update");  }}  }
class C{  public final void testGetMidTermsOfReductionPolynomial01(){  int[] a=new int[]{981,2,1};  int[] b=new ECFieldF2m(2000,BigInteger.valueOf(0L).setBit(0).setBit(1).setBit(2).setBit(981).setBit(2000)).getMidTermsOfReductionPolynomial();  assertTrue(Arrays.equals(a,b));}  }
class C{  final void putByte(int offset,byte value){  unsafe.putByte(offset + address,value);}  }
class C{  public final boolean isOrEnclosedByPrivateType(){  if (isLocalType())   return true;  ReferenceBinding type=this;  while (type != null) {    if ((type.modifiers & ClassFileConstants.AccPrivate) != 0)     return true;    type=type.enclosingType();  }  return false;}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Configurator errorBackgroundResource(int backgroundRes){  if (backgroundRes > 0) {    viewErrorBackgroundResource=backgroundRes;  }  return this;}  }
class C{  public void writeToParcel(Parcel dest,int flags){  linkProperties.writeToParcel(dest,flags);  dest.writeInt(leaseDuration);  if (serverAddress != null) {    dest.writeByte((byte)1);    dest.writeByteArray(serverAddress.getAddress());  } else {    dest.writeByte((byte)0);  }  dest.writeString(vendorInfo);}  }
class C{  public static final int BuildInteger(byte bytevec[],boolean MSBFirst){  if (MSBFirst)   return BuildIntegerBE(bytevec,0); else   return BuildIntegerLE(bytevec,0);}  }
class C{  public ViewRefRender(ViewRender<T> view){  Objects.requireNonNull(view);  _view=view;  _type=typeOf(view);  _priority=priorityOf(view);}  }
class C{  public static <T1,T2,T3,T4,T5,T6,T7,R>BiFunction<T6,T7,R> partial7(final T1 t1,final T2 t2,final T3 t3,final T4 t4,final T5 t5,final HeptFunction<T1,T2,T3,T4,T5,T6,T7,R> heptFunc){  return null;}  }
class C{  public static boolean contains(Polygon rectangle,Geometry b){  RectangleContains rc=new RectangleContains(rectangle);  return rc.contains(b);}  }
class C{  private String encode(Variable variable) throws IOException {  StringBuilder sb=new StringBuilder();  if (variable instanceof RealVariable) {    RealVariable rv=(RealVariable)variable;    sb.append(rv.getValue());  } else   if (variable instanceof BinaryVariable) {    BinaryVariable bv=(BinaryVariable)variable;    for (int i=0; i < bv.getNumberOfBits(); i++) {      sb.append(bv.get(i) ? "1" : "0");    }  } else   if (variable instanceof Permutation) {    Permutation p=(Permutation)variable;    for (int i=0; i < p.size(); i++) {      if (i > 0) {        sb.append(',');      }      sb.append(p.get(i));    }  } else {    throw new IOException("unable to serialize variable");  }  return sb.toString();}  }
class C{  private void initModel(boolean allConfigurables,RemoteRepository source){  this.listOfConfigurables=Collections.synchronizedList(new LinkedList<Configurable>());  this.originalParameters=new HashMap<>();  this.originalNames=new HashMap<>();  this.originalPermittedUserGroups=new HashMap<>();  this.source=source;  checkForAdminRights();  if (source != null) {    originalCredentials=Wallet.getInstance().getEntry(source.getAlias(),source.getBaseUrl().toString());    if (originalCredentials == null) {      originalCredentials=new UserCredential(source.getBaseUrl().toString(),source.getUsername(),null);    }  }  for (  Configurable configurable : ConfigurationManager.getInstance().getAllConfigurables()) {    boolean sameLocalSource=source == null && configurable.getSource() == null;    boolean sameRemoteSource=source != null && configurable.getSource() != null && configurable.getSource().getName().equals(source.getName());    if (allConfigurables || sameLocalSource || sameRemoteSource) {      this.listOfConfigurables.add(configurable);      Map<String,String> parameterMap=new HashMap<>();      for (      String key : configurable.getParameters().keySet()) {        if (configurable instanceof AbstractConfigurable) {          parameterMap.put(key,((AbstractConfigurable)configurable).getParameterAsXMLString(key));        } else {          parameterMap.put(key,configurable.getParameter(key));        }      }      originalParameters.put(configurable,new HashMap<>(parameterMap));      originalNames.put(configurable,configurable.getName());      originalPermittedUserGroups.put(configurable,ConfigurationManager.getInstance().getPermittedGroupsForConfigurable(configurable));    }  }  ConfigurationManager.getInstance().addObserver(this,false);}  }
class C{  @Override public void drawDomainGridline(Graphics2D g2,CategoryPlot plot,Rectangle2D dataArea,double value){  Line2D line=null;  PlotOrientation orientation=plot.getOrientation();  if (orientation == PlotOrientation.HORIZONTAL) {    line=new Line2D.Double(dataArea.getMinX(),value,dataArea.getMaxX(),value);  } else   if (orientation == PlotOrientation.VERTICAL) {    line=new Line2D.Double(value,dataArea.getMinY(),value,dataArea.getMaxY());  }  Paint paint=plot.getDomainGridlinePaint();  if (paint == null) {    paint=CategoryPlot.DEFAULT_GRIDLINE_PAINT;  }  g2.setPaint(paint);  Stroke stroke=plot.getDomainGridlineStroke();  if (stroke == null) {    stroke=CategoryPlot.DEFAULT_GRIDLINE_STROKE;  }  g2.setStroke(stroke);  g2.draw(line);}  }
class C{  public SmbFile[] listFiles(SmbFileFilter filter) throws SmbException {  return listFiles("*",ATTR_DIRECTORY | ATTR_HIDDEN | ATTR_SYSTEM,null,filter);}  }
class C{  private Connection tableSetup(String insertEntryQuery) throws Throwable {  Connection connection=null;  Statement statement=null;  try {    connection=getNewConnection(true);    statement=connection.createStatement();    statement.executeQuery("DROP TABLE IF EXISTS replica_host_status");    statement.executeQuery("CREATE TABLE replica_host_status (SERVER_ID VARCHAR(255), SESSION_ID VARCHAR(255), " + "LAST_UPDATE_TIMESTAMP TIMESTAMP DEFAULT NOW())");    ResultSet resultSet=statement.executeQuery("SELECT SERVER_ID, SESSION_ID, LAST_UPDATE_TIMESTAMP " + "FROM information_schema.replica_host_status " + "WHERE LAST_UPDATE_TIMESTAMP = ("+ "SELECT MAX(LAST_UPDATE_TIMESTAMP) "+ "FROM information_schema.replica_host_status)");    while (resultSet.next()) {      String values="";      for (int i=1; i < 4; i++) {        values+=(i == 1) ? "'localhost'" : ",'" + resultSet.getString(i) + "'";      }      statement.executeQuery("INSERT INTO replica_host_status (SERVER_ID, SESSION_ID, LAST_UPDATE_TIMESTAMP) " + "VALUES (" + values + ")");    }    if (insertEntryQuery != null) {      statement.executeQuery(insertEntryQuery);    }    try {      setDbName(connection,"testj");    } catch (    Throwable t) {      fail("Unable to set database for testing");    }    int serverId=getServerId(connection);    stopProxy(serverId,1);    statement=connection.createStatement();    statement.executeQuery("select 1");  } catch (  SQLException se) {    fail("Unable to execute queries to set up table: " + se);  } finally {    if (statement != null) {      statement.close();    }  }  return connection;}  }
class C{  public static NamedList<NamedList<?>> unwrapStats(NamedList<NamedList<NamedList<?>>> stats){  if (null == stats)   return null;  return stats.get("stats_fields");}  }
class C{  public boolean logout() throws LoginException {  reset();  return true;}  }
class C{  public void addBugCodeToFilter(BugCode code){  elementChecked(code,true);}  }
class C{  public static boolean isGrounded(InferenceEngine inf,TempTripleStore focusStore,AbstractTripleStore db,SPO head,boolean testHead,boolean testFocusStore){  final VisitedSPOSet visited=new VisitedSPOSet(focusStore.getIndexManager());  try {    boolean ret=isGrounded(inf,focusStore,db,head,testHead,testFocusStore,visited);    if (log.isInfoEnabled())     log.info("head=" + head + " is "+ (ret ? "" : "NOT ")+ "grounded : testHead="+ testHead+ ", testFocusStore="+ testFocusStore+ ", #visited="+ visited.size());    return ret;  }  finally {    visited.close();  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:09.817 -0500",hash_original_method="65449F4F2C00BF62B7AB916EB2126B60",hash_generated_method="96254BD74FAC45D2698DDBC33FF69A6A") public void applyLocalizedPattern(String pattern){  dform.applyLocalizedPattern(pattern);}  }
class C{  public boolean isLocalAndExists(){  return loc.isLocalAndExists();}  }
class C{  private void fillPolyPolygon(Graphics2D g2d,List pols){  if (pols.size() == 1)   g2d.fill((Polygon2D)(pols.get(0))); else {    GeneralPath path=new GeneralPath(GeneralPath.WIND_EVEN_ODD);    for (int i=0; i < pols.size(); i++) {      Polygon2D pol=(Polygon2D)(pols.get(i));      path.append(pol,false);    }    g2d.fill(path);  }}  }
class C{  public ArrayNode arrayNode(){  return new ArrayNode(this);}  }
class C{  private static void convertActivityToTranslucentAfterL(Activity activity){  try {    Method getActivityOptions=Activity.class.getDeclaredMethod("getActivityOptions");    getActivityOptions.setAccessible(true);    Object options=getActivityOptions.invoke(activity);    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method convertToTranslucent=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz,ActivityOptions.class);    convertToTranslucent.setAccessible(true);    convertToTranslucent.invoke(activity,null,options);  } catch (  Throwable t) {  }}  }
class C{  @Override protected EClass eStaticClass(){  return TypeRefsPackage.Literals.FUNCTION_TYPE_REF;}  }
class C{  private static StepRefType stepRef(int stepCount){  StepRefType stepRef=new StepRefType();  stepRef.setURI("#" + STEP + stepCount);  return stepRef;}  }
class C{  private static Object _toAxisType(TypeMapping tm,TimeZone tz,TypeEntry typeEntry,QName type,Class targetClass,Object value,Set<Object> done) throws PageException {  if (value instanceof ObjectWrap) {    value=((ObjectWrap)value).getEmbededObject();  }  if (done.contains(value)) {    return null;  }  done.add(value);  try {    if (type != null) {      if (type.getLocalPart().startsWith("ArrayOf")) {        return toArray(tm,typeEntry,type,value,done);      }      for (int i=0; i < Constants.URIS_SCHEMA_XSD.length; i++) {        if (Constants.URIS_SCHEMA_XSD[i].equals(type.getNamespaceURI())) {          return toAxisTypeXSD(tm,tz,type.getLocalPart(),value,done);        }      }      if (StringUtil.startsWithIgnoreCase(type.getLocalPart(),"xsd_")) {        return toAxisTypeXSD(tm,tz,type.getLocalPart().substring(4),value,done);      }      if (type.getNamespaceURI().indexOf("soap") != -1) {        return toAxisTypeSoap(tm,type.getLocalPart(),value,done);      }      if (StringUtil.startsWithIgnoreCase(type.getLocalPart(),"soap_")) {        return toAxisTypeSoap(tm,type.getLocalPart().substring(5),value,done);      }    }    return _toDefinedType(tm,typeEntry,type,targetClass,value,done);  }  finally {    done.remove(value);  }}  }
class C{  public X509Name(Vector oids,Vector values){  this(oids,values,new X509DefaultEntryConverter());}  }
class C{  public synchronized byte[] toByteArray(){  int remaining=count;  if (remaining == 0) {    return EMPTY_BYTE_ARRAY;  }  byte newbuf[]=new byte[remaining];  int pos=0;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    System.arraycopy(buf,0,newbuf,pos,c);    pos+=c;    remaining-=c;    if (remaining == 0) {      break;    }  }  return newbuf;}  }
class C{  protected String validateCoordinateSystem(AVList params){  Object o=params.getValue(AVKey.COORDINATE_SYSTEM);  if (!this.hasKey(AVKey.COORDINATE_SYSTEM)) {    Logging.logger().warning(Logging.getMessage("generic.UnspecifiedCoordinateSystem",this.getStringValue(AVKey.DISPLAY_NAME)));    return null;  } else   if (AVKey.COORDINATE_SYSTEM_GEOGRAPHIC.equals(o)) {    return null;  } else   if (AVKey.COORDINATE_SYSTEM_PROJECTED.equals(o)) {    return this.validateProjection(params);  } else {    return Logging.getMessage("generic.UnsupportedCoordinateSystem",o);  }}  }
class C{  private void fieldInsn(final int opcode,final Type ownerType,final String name,final Type fieldType){  mv.visitFieldInsn(opcode,ownerType.getInternalName(),name,fieldType.getDescriptor());}  }
class C{  public GeoDistanceBuilder addUnboundedFrom(String key,double from){  ranges.add(new Range(key,from,null));  return this;}  }
class C{  public void update(byte[] buffer){  update(buffer,0,buffer.length);}  }
class C{  private String toUrl(){  final HttpUrl.Builder builder=httpUrl.newBuilder();  for (  final NameValue param : queryParams) {    builder.addQueryParameter(param.getName(),param.getValue());  }  return builder.build().url().toString();}  }
class C{  public void closeConnection(){  try {    producer.close();    session.close();    connection.close();  } catch (  JMSException ex) {    logger.debug(ex.getLocalizedMessage());  }}  }
class C{  protected void verifyCGVolumeRequestCount(int count){  if (count > 1) {    throw APIException.badRequests.invalidFullCopyCountForVolumesInConsistencyGroup();  }}  }
class C{  public boolean check(final char c){  current=current.get(c);  if (current == null) {    reset();  }  return current.isKeyword();}  }
class C{  public boolean isReadWrite(){  return super.isEnabled();}  }
class C{  protected UndefinedTypeImpl(){  super();}  }
class C{  public static boolean isFilesystemCaseSensitive(){  return !areFilenamesEqual("a","A");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    FileOutputStream fos=new FileOutputStream(file);    CacheHeader e=new CacheHeader(key,entry);    boolean success=e.writeHeader(fos);    if (!success) {      fos.close();      VolleyLog.d("Failed to write header for %s",file.getAbsolutePath());      throw new IOException();    }    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  public void vertex(float[] v){  g.vertex(v);}  }
class C{  @Override public boolean equals(Object other){  if (_map.equals(other)) {    return true;  } else   if (other instanceof Map) {    Map that=(Map)other;    if (that.size() != _map.size()) {      return false;    } else {      Iterator it=that.entrySet().iterator();      for (int i=that.size(); i-- > 0; ) {        Map.Entry e=(Map.Entry)it.next();        Object key=e.getKey();        Object val=e.getValue();        if (key instanceof Float && val instanceof Float) {          float k=unwrapKey(key);          float v=unwrapValue(val);          if (_map.containsKey(k) && v == _map.get(k)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  public boolean isActivated(){  return (sActivationFlag == TRACE_ON);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing() throws Exception {  MostFrequentValue<String> oper=new MostFrequentValue<String>();  CountAndLastTupleTestSink matchSink=new CountAndLastTupleTestSink();  CountAndLastTupleTestSink listSink=new CountAndLastTupleTestSink();  oper.most.setSink(matchSink);  oper.list.setSink(listSink);  oper.beginWindow(0);  int atot=5;  int btot=7;  int ctot=6;  for (int i=0; i < atot; i++) {    oper.data.process("a");  }  for (int i=0; i < btot; i++) {    oper.data.process("b");  }  for (int i=0; i < ctot; i++) {    oper.data.process("c");  }  oper.endWindow();  Assert.assertEquals("number emitted tuples",1,matchSink.count);  HashMap<String,Integer> tuple=(HashMap<String,Integer>)matchSink.tuple;  Integer val=tuple.get("b");  Assert.assertEquals("Count of b was ",btot,val.intValue());  Assert.assertEquals("number emitted tuples",1,listSink.count);  ArrayList<HashMap<String,Integer>> list=(ArrayList<HashMap<String,Integer>>)listSink.tuple;  val=list.get(0).get("b");  Assert.assertEquals("Count of b was ",btot,val.intValue());  matchSink.clear();  listSink.clear();  oper.beginWindow(0);  atot=5;  btot=4;  ctot=5;  for (int i=0; i < atot; i++) {    oper.data.process("a");  }  for (int i=0; i < btot; i++) {    oper.data.process("b");  }  for (int i=0; i < ctot; i++) {    oper.data.process("c");  }  oper.endWindow();  Assert.assertEquals("number emitted tuples",1,matchSink.count);  Assert.assertEquals("number emitted tuples",1,listSink.count);  list=(ArrayList<HashMap<String,Integer>>)listSink.tuple;  int acount=0;  int ccount=0;  for (  HashMap<String,Integer> h : list) {    val=h.get("a");    if (val == null) {      ccount=h.get("c");    } else {      acount=val;    }  }  Assert.assertEquals("Count of a was ",atot,acount);  Assert.assertEquals("Count of c was ",ctot,ccount);  HashMap<String,Integer> mtuple=(HashMap<String,Integer>)matchSink.tuple;  val=mtuple.get("a");  if (val == null) {    val=mtuple.get("c");  }  Assert.assertEquals("Count of least frequent key was ",ctot,val.intValue());}  }
class C{  public void assertArrayEqual(byte[] expected,byte[] actual){  TestUtils.assertArrayEqual(expected,actual);}  }
class C{  public void addCoalescingKey(long downTime){  mDownTimeToCoalescingKey.put((int)downTime,0);}  }
class C{  private static Register isCandidateExpression(Instruction s,boolean ssa){switch (s.getOpcode()) {case BOOLEAN_NOT_opcode:case INT_NOT_opcode:case REF_NOT_opcode:case LONG_NOT_opcode:case INT_NEG_opcode:case REF_NEG_opcode:case LONG_NEG_opcode:case FLOAT_NEG_opcode:case DOUBLE_NEG_opcode:case INT_2BYTE_opcode:case INT_2SHORT_opcode:case INT_2USHORT_opcode:case INT_2LONG_opcode:case LONG_2INT_opcode:case FLOAT_2DOUBLE_opcode:case DOUBLE_2FLOAT_opcode:{      Operand val1=Unary.getVal(s);      if (val1.isConstant()) {        return null;      }      Register result=Unary.getResult(s).asRegister().getRegister();      if (ssa) {        return result;      } else       if (val1.asRegister().getRegister() != result) {        return result;      } else {        return null;      }    }case ARRAYLENGTH_opcode:{    Operand val1=GuardedUnary.getVal(s);    if (val1.isConstant()) {      return null;    }    Register result=GuardedUnary.getResult(s).asRegister().getRegister();    return result;  }case INT_ADD_opcode:case REF_ADD_opcode:case LONG_ADD_opcode:case FLOAT_ADD_opcode:case DOUBLE_ADD_opcode:case INT_SUB_opcode:case REF_SUB_opcode:case LONG_SUB_opcode:case FLOAT_SUB_opcode:case DOUBLE_SUB_opcode:case INT_MUL_opcode:case LONG_MUL_opcode:case FLOAT_MUL_opcode:case DOUBLE_MUL_opcode:case FLOAT_DIV_opcode:case DOUBLE_DIV_opcode:case INT_SHL_opcode:case REF_SHL_opcode:case LONG_SHL_opcode:case INT_SHR_opcode:case REF_SHR_opcode:case LONG_SHR_opcode:case INT_USHR_opcode:case REF_USHR_opcode:case LONG_USHR_opcode:case INT_AND_opcode:case REF_AND_opcode:case LONG_AND_opcode:case INT_OR_opcode:case REF_OR_opcode:case LONG_OR_opcode:case INT_XOR_opcode:case REF_XOR_opcode:case LONG_XOR_opcode:case LONG_CMP_opcode:case FLOAT_CMPL_opcode:case DOUBLE_CMPL_opcode:case FLOAT_CMPG_opcode:case DOUBLE_CMPG_opcode:{  Operand val2=Binary.getVal2(s);  if (!val2.isObjectConstant() && !val2.isTIBConstant()) {    if (val2.isConstant()) {      Operand val1=Binary.getVal1(s);      if (val1.isConstant()) {        return null;      }      Register result=Binary.getResult(s).asRegister().getRegister();      if (ssa) {        return result;      } else       if (val1.asRegister().getRegister() != result) {        return result;      } else {        return null;      }    } else {      if (VM.VerifyAssertions) {        VM._assert(val2.isRegister());      }      Operand val1=Binary.getVal1(s);      if (s.operator().isCommutative() && val1.isConstant() && !val1.isMovableObjectConstant()&& !val1.isTIBConstant()) {        Binary.setVal1(s,Binary.getClearVal2(s));        Binary.setVal2(s,val1);        Register result=Binary.getResult(s).asRegister().getRegister();        if (ssa) {          return result;        } else         if (val2.asRegister().getRegister() != result) {          return result;        } else {          return null;        }      }    }  }  return null;}case INT_DIV_opcode:case LONG_DIV_opcode:{Operand val2=GuardedBinary.getVal2(s);if (val2.isConstant()) {  Operand val1=GuardedBinary.getVal1(s);  if (val1.isConstant()) {    return null;  }  Register result=GuardedBinary.getResult(s).asRegister().getRegister();  if (ssa) {    return result;  } else   if (val1.asRegister().getRegister() != result) {    return result;  }}return null;}case BOOLEAN_CMP_INT_opcode:case BOOLEAN_CMP_LONG_opcode:case BOOLEAN_CMP_ADDR_opcode:{Operand val2=BooleanCmp.getVal2(s);if (val2.isConstant() && !val2.isMovableObjectConstant() && !val2.isTIBConstant()) {Operand val1=BooleanCmp.getVal1(s);if (val1.isConstant()) {  return null;}Register result=BooleanCmp.getResult(s).asRegister().getRegister();if (ssa) {  return result;} else if (val1.asRegister().getRegister() != result) {  return result;}} else if (val2.isRegister()) {Operand val1=BooleanCmp.getVal1(s);if (val1.isConstant() && !val1.isMovableObjectConstant() && !val1.isTIBConstant()) {  BooleanCmp.setVal1(s,BooleanCmp.getClearVal2(s));  BooleanCmp.setVal2(s,val1);  BooleanCmp.getCond(s).flipOperands();  Register result=BooleanCmp.getResult(s).asRegister().getRegister();  if (ssa) {    return result;  } else   if (val2.asRegister().getRegister() != result) {    return result;  }}}return null;}case INT_IFCMP_opcode:case LONG_IFCMP_opcode:case FLOAT_IFCMP_opcode:case DOUBLE_IFCMP_opcode:case REF_IFCMP_opcode:{Operand val2=IfCmp.getVal2(s);if (!val2.isObjectConstant() && !val2.isTIBConstant()) {if (val2.isConstant()) {Operand val1=IfCmp.getVal1(s);if (val1.isConstant()) {  return null;}Register result=IfCmp.getGuardResult(s).asRegister().getRegister();if (ssa) {  return result;} else if (val1.asRegister().getRegister() != result) {  return result;}} else {if (VM.VerifyAssertions) {  VM._assert(val2.isRegister());}Operand val1=IfCmp.getVal1(s);if (val1.isConstant() && !val1.isMovableObjectConstant() && !val1.isTIBConstant()) {  IfCmp.setVal1(s,IfCmp.getClearVal2(s));  IfCmp.setVal2(s,val1);  IfCmp.getCond(s).flipOperands();  Register result=IfCmp.getGuardResult(s).asRegister().getRegister();  if (ssa) {    return result;  } else   if (val2.asRegister().getRegister() != result) {    return result;  }}}}return null;}case INT_IFCMP2_opcode:{Operand val2=IfCmp2.getVal2(s);if (!val2.isObjectConstant() && !val2.isTIBConstant()) {if (val2.isConstant()) {Operand val1=IfCmp2.getVal1(s);if (val1.isConstant()) {return null;}Register result=IfCmp2.getGuardResult(s).asRegister().getRegister();if (ssa) {return result;} else if (val1.asRegister().getRegister() != result) {return result;}} else {if (VM.VerifyAssertions) {VM._assert(val2.isRegister());}Operand val1=IfCmp2.getVal1(s);if (val1.isConstant() && !val1.isMovableObjectConstant() && !val1.isTIBConstant()) {IfCmp2.setVal1(s,IfCmp2.getClearVal2(s));IfCmp2.setVal2(s,val1);IfCmp2.getCond1(s).flipOperands();IfCmp2.getCond2(s).flipOperands();Register result=IfCmp2.getGuardResult(s).asRegister().getRegister();if (ssa) {  return result;} else if (val2.asRegister().getRegister() != result) {  return result;}}}}return null;}case INT_COND_MOVE_opcode:case LONG_COND_MOVE_opcode:case REF_COND_MOVE_opcode:case FLOAT_COND_MOVE_opcode:case DOUBLE_COND_MOVE_opcode:case GUARD_COND_MOVE_opcode:{Operand val2=CondMove.getVal2(s);if (!val2.isObjectConstant()) {if (val2.isConstant()) {Operand val1=CondMove.getVal1(s);if (val1.isConstant()) {return null;}Register result=CondMove.getResult(s).asRegister().getRegister();if (ssa) {return result;} else if (val1.asRegister().getRegister() != result) {return result;}} else {if (VM.VerifyAssertions) {VM._assert(val2.isRegister());}Operand val1=CondMove.getVal1(s);if (val1.isConstant() && !val1.isMovableObjectConstant()) {CondMove.setVal1(s,CondMove.getClearVal2(s));CondMove.setVal2(s,val1);CondMove.getCond(s).flipOperands();Register result=CondMove.getResult(s).asRegister().getRegister();if (ssa) {return result;} else if (val2.asRegister().getRegister() != result) {return result;}}}}return null;}case BOUNDS_CHECK_opcode:{Operand ref=BoundsCheck.getRef(s);Operand index=BoundsCheck.getIndex(s);if (index.isConstant()) {if (ref.isConstant()) {return null;}return BoundsCheck.getGuardResult(s).asRegister().getRegister();}return null;}case NULL_CHECK_opcode:{Operand ref=NullCheck.getRef(s);if (ref.isConstant()) {return null;}return NullCheck.getGuardResult(s).asRegister().getRegister();}case INSTANCEOF_opcode:{Operand ref=InstanceOf.getRef(s);if (ref.isConstant()) {return null;}return InstanceOf.getResult(s).getRegister();}case NEWARRAY_opcode:{Operand size=NewArray.getSize(s);if (size.isConstant()) {return NewArray.getResult(s).getRegister();}return null;}case NEW_opcode:{return New.getResult(s).getRegister();}case INT_ZERO_CHECK_opcode:case LONG_ZERO_CHECK_opcode:{Operand val1=ZeroCheck.getValue(s);if (val1.isConstant()) {return null;}return ZeroCheck.getGuardResult(s).asRegister().getRegister();}default :return null;}}  }
class C{  private void computeRotationTime(){  _keyRotationIntervalInMsecs=_maxLifeValuesHolder.computeRotationTimeInMSecs();  _log.info("Key rotation time in msecs: {}",_keyRotationIntervalInMsecs);}  }
class C{  public static int truncatedCompareTo(final Calendar cal1,final Calendar cal2,final int field){  final Calendar truncatedCal1=truncate(cal1,field);  final Calendar truncatedCal2=truncate(cal2,field);  return truncatedCal1.compareTo(truncatedCal2);}  }
class C{  public static void warn(final String message){  if (JQuantLib.logger != null) {    JQuantLib.logger.warn(message);  } else {    System.err.printf("WARN: %s\n",message);  }}  }
class C{  public JSONEditor(IBurpExtenderCallbacks callbacks){  this.callbacks=callbacks;  this.helpers=callbacks.getHelpers();}  }
class C{  @PostConstruct public void init(){  super.init("label.configuration.auth.gatewaytoken");  configurationEnabled=isConfigEnabled();  detailLayout=new VerticalLayout();  detailLayout.setImmediate(true);  gatewayTokenNameTextField=new TextFieldBuilder().immediate(true).buildTextComponent();  gatewayTokenNameTextField.setVisible(false);  gatewayTokenNameTextField.addTextChangeListener(null);  final Button gatewaytokenBtn=SPUIComponentProvider.getButton("TODO-ID","Regenerate Key","",ValoTheme.BUTTON_TINY + " " + "redicon",true,null,SPUIButtonStyleSmall.class);  gatewaytokenBtn.setImmediate(true);  gatewaytokenBtn.setIcon(FontAwesome.REFRESH);  gatewaytokenBtn.addClickListener(null);  gatewayTokenkeyLabel=new LabelBuilder().id("gatewaysecuritytokenkey").name("").buildLabel();  gatewayTokenkeyLabel.addStyleName("gateway-token-label");  gatewayTokenkeyLabel.setImmediate(true);  final HorizontalLayout keyGenerationLayout=new HorizontalLayout();  keyGenerationLayout.setSpacing(true);  keyGenerationLayout.setImmediate(true);  keyGenerationLayout.addComponent(gatewayTokenNameTextField);  keyGenerationLayout.addComponent(gatewayTokenkeyLabel);  keyGenerationLayout.addComponent(gatewaytokenBtn);  detailLayout.addComponent(keyGenerationLayout);  if (isConfigEnabled()) {    gatewayTokenNameTextField.setValue(getSecurityTokenName());    gatewayTokenkeyLabel.setValue(getSecurityTokenKey());    setDetailVisible(true);  }}  }
class C{  public static void resetSecuritySystemProperties(){  System.clearProperty("javax.net.ssl.keyStore");  System.clearProperty("javax.net.ssl.keyStorePassword");  System.clearProperty("javax.net.ssl.trustStore");  System.clearProperty("javax.net.ssl.trustStorePassword");  System.clearProperty("javax.rmi.ssl.client.enabledCipherSuites");  System.clearProperty(SecurityConf.SYSTEM_PROP_CLIENT_SSLPROTOCOLS);  System.clearProperty(SecurityConf.SYSTEM_PROP_CLIENT_SSLCIPHERS);  System.clearProperty("https.protocols");}  }
class C{  private CProjectTreeNodeHelpers(){}  }
class C{  public static <V extends Vec>Vec meanVector(List<V> dataSet){  if (dataSet.isEmpty())   throw new ArithmeticException("Can not compute the mean of zero data points");  Vec mean=new DenseVector(dataSet.get(0).length());  meanVector(mean,dataSet);  return mean;}  }
class C{  public static void installAllAppEngineRuntimes(IFacetedProject project,boolean force,IProgressMonitor monitor) throws CoreException {  Set<IRuntime> existingTargetedRuntimes=project.getTargetedRuntimes();  if (!existingTargetedRuntimes.isEmpty()) {    for (    IRuntime existingTargetedRuntime : existingTargetedRuntimes) {      if (AppEngineStandardFacet.isAppEngineStandardRuntime(existingTargetedRuntime) && !force) {        return;      }    }  }  org.eclipse.wst.server.core.IRuntime[] appEngineRuntimes=getAppEngineRuntimes();  if (appEngineRuntimes.length > 0) {    IRuntime appEngineFacetRuntime=null;    for (int index=0; index < appEngineRuntimes.length; index++) {      appEngineFacetRuntime=FacetUtil.getRuntime(appEngineRuntimes[index]);      project.addTargetedRuntime(appEngineFacetRuntime,monitor);    }    project.setPrimaryRuntime(appEngineFacetRuntime,monitor);  } else {    IRuntime appEngineFacetRuntime=createAppEngineFacetRuntime(monitor);    if (appEngineFacetRuntime == null) {      throw new NullPointerException("Could not locate App Engine facet runtime");    }    project.addTargetedRuntime(appEngineFacetRuntime,monitor);    project.setPrimaryRuntime(appEngineFacetRuntime,monitor);  }}  }
class C{  @Override public void onGeolocationPermissionsShowPrompt(String origin,Callback callback){  super.onGeolocationPermissionsShowPrompt(origin,callback);  callback.invoke(origin,true,false);}  }
class C{  public void testEncodeV4(){  byte[] expectedReturn=msgFixture.requestedAddressFamilyV4;  requestedAddressFamilyAttribute.setFamily(MsgFixture.REQUESTED_ADDRESS_FAMILY_ATTRIBUTE_V4);  byte[] actualReturn=requestedAddressFamilyAttribute.encode();  assertTrue("RequestedAddressFamilyAttribute.encode() did not " + "properly encode a sample attribute for IPv4 family",Arrays.equals(expectedReturn,actualReturn));}  }
class C{  public synchronized boolean remove(final CacheKey key,final EncodedImage encodedImage){  Preconditions.checkNotNull(key);  Preconditions.checkNotNull(encodedImage);  Preconditions.checkArgument(EncodedImage.isValid(encodedImage));  final EncodedImage oldValue=mMap.get(key);  if (oldValue == null) {    return false;  }  CloseableReference<PooledByteBuffer> oldRef=oldValue.getByteBufferRef();  CloseableReference<PooledByteBuffer> ref=encodedImage.getByteBufferRef();  try {    if (oldRef == null || ref == null || oldRef.get() != ref.get()) {      return false;    }    mMap.remove(key);  }  finally {    CloseableReference.closeSafely(ref);    CloseableReference.closeSafely(oldRef);    EncodedImage.closeSafely(oldValue);  }  logStats();  return true;}  }
class C{  private double convertFromPanelY(double pY){  pY=m_panelHeight - pY;  pY/=m_panelHeight;  pY*=m_rangeY;  return pY + m_minY;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static void main(String[] args) throws IOException {  Action action=null;  int index=-1;  String entryString=null;  if (args.length < 1 || args[0].equals("-help") || args[0].equals("-?"))   usage();  if (args.length == 1) {    action=Action.PRINT;  } else {    String s=args[0];    if (Pattern.matches("^A[0-9]*\\+.*",s)) {      String[] result=s.split("\\+",2);      if (result.length == 2) {        if (result[0].length() < 2) {          index=0;        } else {          index=Integer.parseInt(result[0].substring(1));        }        entryString=result[1];        action=Action.ADD;      }    }    if (Pattern.matches("^A[0-9]+\\-",s)) {      String[] result=s.split("\\-",2);      if (result.length == 2) {        index=Integer.parseInt(result[0].substring(1));        entryString=result[1];        action=Action.REMOVE;      }    }    if (Pattern.matches("^A[0-9]+=.*",s)) {      String[] result=s.split("=",2);      if (result.length == 2) {        index=Integer.parseInt(result[0].substring(1));        entryString=result[1];        action=Action.REPLACE;      }    }  }  if (action == null)   usage();  int fileArg=(action == Action.PRINT) ? 0 : 1;  Path file=Paths.get(args[fileArg]);  AclFileAttributeView view=Files.getFileAttributeView(file,AclFileAttributeView.class);  if (view == null) {    System.err.println("ACLs not supported on this platform");    System.exit(-1);  }  List<AclEntry> acl=view.getAcl();switch (action) {case PRINT:{      for (int i=0; i < acl.size(); i++) {        System.out.format("%5d: %s\n",i,acl.get(i));      }      break;    }case ADD:{    AclEntry entry=parseAceString(entryString,file.getFileSystem().getUserPrincipalLookupService());    if (index >= acl.size()) {      acl.add(entry);    } else {      acl.add(index,entry);    }    view.setAcl(acl);    break;  }case REMOVE:{  if (index >= acl.size()) {    System.err.format("Index '%d' is invalid",index);    System.exit(-1);  }  acl.remove(index);  view.setAcl(acl);  break;}case REPLACE:{if (index >= acl.size()) {  System.err.format("Index '%d' is invalid",index);  System.exit(-1);}AclEntry entry=parseAceString(entryString,file.getFileSystem().getUserPrincipalLookupService());acl.set(index,entry);view.setAcl(acl);break;}}}  }
class C{  private void userSelected(MouseEvent e){  User user=getUser(e);  if (user != null) {    userListener.userClicked(user,e);  }}  }
class C{  public DBException(String msg){  super(msg);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  String prefix;  String namespace;  String methName;  String fullName=m_arg0.execute(xctxt).str();  int indexOfNSSep=fullName.indexOf(':');  if (indexOfNSSep < 0) {    prefix="";    namespace=Constants.S_XSLNAMESPACEURL;    methName=fullName;  } else {    prefix=fullName.substring(0,indexOfNSSep);    namespace=xctxt.getNamespaceContext().getNamespaceForPrefix(prefix);    if (null == namespace)     return XBoolean.S_FALSE;    methName=fullName.substring(indexOfNSSep + 1);  }  if (namespace.equals(Constants.S_XSLNAMESPACEURL)) {    try {      if (null == m_functionTable)       m_functionTable=new FunctionTable();      return m_functionTable.functionAvailable(methName) ? XBoolean.S_TRUE : XBoolean.S_FALSE;    } catch (    Exception e) {      return XBoolean.S_FALSE;    }  } else {    ExtensionsProvider extProvider=(ExtensionsProvider)xctxt.getOwnerObject();    return extProvider.functionAvailable(namespace,methName) ? XBoolean.S_TRUE : XBoolean.S_FALSE;  }}  }
class C{  public LdapUserToken(Authentication auth,GrantedAuthority defaultAuthority){  this.auth=auth;  if (auth.getAuthorities() != null) {    this.authorities.addAll(Arrays.asList(auth.getAuthorities()));  }  if (defaultAuthority != null) {    this.authorities.add(defaultAuthority);  }  super.setAuthenticated(true);}  }
class C{  @Override public boolean pressKeyCode(int keyCode,int metaState){  return device.pressKeyCode(keyCode,metaState);}  }
class C{  private static boolean isAssignable(final Type type,final WildcardType toWildcardType,final Map<TypeVariable<?>,Type> typeVarAssigns){  if (type == null) {    return true;  }  if (toWildcardType == null) {    return false;  }  if (toWildcardType.equals(type)) {    return true;  }  final Type[] toUpperBounds=getImplicitUpperBounds(toWildcardType);  final Type[] toLowerBounds=getImplicitLowerBounds(toWildcardType);  if (type instanceof WildcardType) {    final WildcardType wildcardType=(WildcardType)type;    final Type[] upperBounds=getImplicitUpperBounds(wildcardType);    final Type[] lowerBounds=getImplicitLowerBounds(wildcardType);    for (    Type toBound : toUpperBounds) {      toBound=substituteTypeVariables(toBound,typeVarAssigns);      for (      final Type bound : upperBounds) {        if (!isAssignable(bound,toBound,typeVarAssigns)) {          return false;        }      }    }    for (    Type toBound : toLowerBounds) {      toBound=substituteTypeVariables(toBound,typeVarAssigns);      for (      final Type bound : lowerBounds) {        if (!isAssignable(toBound,bound,typeVarAssigns)) {          return false;        }      }    }    return true;  }  for (  final Type toBound : toUpperBounds) {    if (!isAssignable(type,substituteTypeVariables(toBound,typeVarAssigns),typeVarAssigns)) {      return false;    }  }  for (  final Type toBound : toLowerBounds) {    if (!isAssignable(substituteTypeVariables(toBound,typeVarAssigns),type,typeVarAssigns)) {      return false;    }  }  return true;}  }
class C{  public NbtTagByteArray(String name,byte[] value){  super(name);  Validate.notNull(value,"array can't be null.");  this.value=value;}  }
class C{  public int recordSize(int recordNumber){  return (recordCount < recordNumber) ? 0 : offsettable[(recordNumber - 1) * 2 + 1];}  }
class C{  private void initDao() throws Exception {  if (!tableExists()) {    createTable();  }}  }
class C{  public final String matchCategories(Set<String> categories){  if (categories == null) {    return null;  }  Iterator<String> it=categories.iterator();  if (mCategories == null) {    return it.hasNext() ? it.next() : null;  }  while (it.hasNext()) {    final String category=it.next();    if (!mCategories.contains(category)) {      return category;    }  }  return null;}  }
class C{  public void listTraceSessions() throws SQLException {  try (FbService service=attachServiceManager()){    service.startServiceAction(getTraceSPB(service,isc_action_svc_trace_list));    queueService(service);  } catch (  IOException ioe) {    throw new SQLException(ioe);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:54.818 -0500",hash_original_method="DE7905EDF6B0EF2B9BB95373F14A9269",hash_generated_method="1BBDB8944905322C059906793349F99A") public final SecretKey translateKey(SecretKey key) throws InvalidKeyException {  return spiImpl.engineTranslateKey(key);}  }
class C{  public static int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  return encoder.encode(data,off,length,out);}  }
class C{  public boolean isSelected(){  return selected;}  }
class C{  private String generateLDAPQuery(String username) throws GuacamoleException {  List<String> usernameAttributes=confService.getUsernameAttributes();  StringBuilder ldapQuery=new StringBuilder("(&(objectClass=*)");  if (usernameAttributes.size() > 1)   ldapQuery.append("(|");  for (  String usernameAttribute : usernameAttributes) {    ldapQuery.append("(");    ldapQuery.append(escapingService.escapeLDAPSearchFilter(usernameAttribute));    ldapQuery.append("=");    ldapQuery.append(escapingService.escapeLDAPSearchFilter(username));    ldapQuery.append(")");  }  if (usernameAttributes.size() > 1)   ldapQuery.append(")");  ldapQuery.append(")");  return ldapQuery.toString();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public XMLString newstr(char[] string,int start,int length){  return new XStringForChars(string,start,length);}  }
class C{  public DrawerBuilder withDelayDrawerClickEvent(int delayDrawerClickEvent){  this.mDelayDrawerClickEvent=delayDrawerClickEvent;  return this;}  }
class C{  public MethodHandle findGetter(Class<?> refc,String name,Class<?> type) throws NoSuchFieldException, IllegalAccessException {  MemberName field=resolveOrFail(REF_getField,refc,name,type);  return getDirectField(REF_getField,refc,field);}  }
class C{  public void testNextLong(){  SplittableRandom sr=new SplittableRandom();  long f=sr.nextLong();  int i=0;  while (i < NCALLS && sr.nextLong() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  public SeekableOutputStream(RandomAccessFile file){  if (file == null) {    throw new IllegalArgumentException("SeekableOutputStream0");  }  this.file=file;}  }
class C{  public static boolean isValid(String s){  try {    new URI(UriEncoder.encode(s));  } catch (  URISyntaxException e) {    return false;  }  return true;}  }
class C{  protected void beforeOffer(final T t){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.758 -0500",hash_original_method="CCA9C7445DF582DF0CAE5EF884DC96A3",hash_generated_method="8310CE4D93D9519205CC50F2FD928EA8") public Threadable thread(Threadable[] messages){  if (messages == null)   return null;  idTable=new HashMap();  for (int i=0; i < messages.length; ++i) {    if (!messages[i].isDummy())     buildContainer(messages[i]);  }  root=findRootSet();  idTable.clear();  idTable=null;  pruneEmptyContainers(root);  root.reverseChildren();  gatherSubjects();  if (root.next != null)   throw new RuntimeException("root node has a next:" + root);  for (ThreadContainer r=root.child; r != null; r=r.next) {    if (r.threadable == null)     r.threadable=r.child.threadable.makeDummy();  }  Threadable result=(root.child == null ? null : root.child.threadable);  root.flush();  root=null;  return result;}  }
class C{  public ConfigReadException(String message){  super(message);}  }
class C{  protected void scaleTo(Projection thisProj){  if (DEBUG) {    logger.fine("starting scaling evaluation.");  }  if (bitmap == null) {    if (DEBUG) {      logger.fine("source image is null");    }    return;  }  Rectangle winRect=new Rectangle(thisProj.getWidth(),thisProj.getHeight());  Rectangle projRect=new Rectangle();  projRect.setLocation(point1);  projRect.setSize(point2.x - point1.x,point2.y - point1.y);  Rectangle sourceRect=new Rectangle();  sourceRect.width=bitmap.getWidth(this);  sourceRect.height=bitmap.getHeight(this);  clipRect=null;  Rectangle iRect=projRect;  if (corners == null || corners.size() <= 2) {    iRect=winRect.intersection(projRect);  }  if (!iRect.isEmpty()) {    Rectangle nClipRect=new Rectangle();    nClipRect.setBounds(sourceRect);    if ((iRect.width >= 1) && (iRect.height >= 1)) {      if (!winRect.contains(projRect)) {        double xScaleFactor=(double)sourceRect.width / (double)projRect.width;        double yScaleFactor=(double)sourceRect.height / (double)projRect.height;        int xOffset=iRect.x - projRect.x;        int yOffset=iRect.y - projRect.y;        nClipRect.x=(int)Math.floor(xOffset * xScaleFactor);        nClipRect.y=(int)Math.floor(yOffset * yScaleFactor);        nClipRect.width=(int)Math.ceil(iRect.width * xScaleFactor);        nClipRect.height=(int)Math.ceil(iRect.height * yScaleFactor);        if (nClipRect.width + nClipRect.x > sourceRect.width) {          nClipRect.width=sourceRect.width - nClipRect.x;        }        if (nClipRect.height + nClipRect.y > sourceRect.height) {          nClipRect.height=sourceRect.height - nClipRect.y;        }      }      if (nClipRect.width <= 0) {        nClipRect.width=1;      }      if (nClipRect.height <= 0) {        nClipRect.height=1;      }      double widthAdj=(double)iRect.width / (double)nClipRect.width;      double heightAdj=(double)iRect.height / (double)nClipRect.height;      AffineTransform xform=new AffineTransform();      xform.setToScale(widthAdj,heightAdj);      clipRect=nClipRect;      this.scalingXFormOp=new AffineTransformOp(xform,getScaleTransformType());      point1.setLocation(iRect.x,iRect.y);      point2.setLocation(iRect.x + iRect.width,iRect.y + iRect.height);    }  }}  }
class C{  public static ViewPropertyAnimator showViewByScale(View v){  ViewPropertyAnimator propertyAnimator=v.animate().setStartDelay(DEFAULT_DELAY).scaleX(1).scaleY(1);  return propertyAnimator;}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.TRACE_REACTION_WILL_FIRE;}  }
class C{  public static void assertPathDoesNotExist(FileSystem fileSystem,String message,Path path) throws IOException {  try {    FileStatus status=fileSystem.getFileStatus(path);    if (status != null) {      fail(message + ": unexpectedly found " + path+ " as  "+ status);    }  } catch (  FileNotFoundException expected) {  }}  }
class C{  public XmlHandler overrideAnnotatedClassAll(Class<?>... classes){  for (  Class<?> clazz : classes)   overrideAnnotatedClass(clazz,true);  return this;}  }
class C{  public Object opt(String key){  return key == null ? null : this.map.get(key);}  }
class C{  public static boolean isDetailedStatistics(){  return _isDetailedStatistics;}  }
class C{  @Override public BlockingQueue<SolrDocument> concurrentDocumentsByQuery(final String querystring,final String sort,final int offset,final int maxcount,final long maxtime,final int buffersize,final int concurrency,final boolean prefetchIDs,final String... fields){  List<String> querystrings=new ArrayList<>(1);  querystrings.add(querystring);  return concurrentDocumentsByQueries(querystrings,sort,offset,maxcount,maxtime,buffersize,concurrency,prefetchIDs,fields);}  }
class C{  private void snoopDHCPClientName(Ethernet eth,Device srcDevice){  if (!(eth.getPayload() instanceof IPv4))   return;  IPv4 ipv4=(IPv4)eth.getPayload();  if (!(ipv4.getPayload() instanceof UDP))   return;  UDP udp=(UDP)ipv4.getPayload();  if (!(udp.getPayload() instanceof DHCP))   return;  DHCP dhcp=(DHCP)udp.getPayload();  byte opcode=dhcp.getOpCode();  if (opcode == DHCP.OPCODE_REQUEST) {    DHCPOption dhcpOption=dhcp.getOption(DHCPOptionCode.OptionCode_Hostname);    if (dhcpOption != null) {      cntDhcpClientNameSnooped.increment();      srcDevice.dhcpClientName=new String(dhcpOption.getData());    }  }}  }
class C{  @SuppressWarnings("CallToThreadStartDuringObjectConstruction") public GridClientImpl(UUID id,GridClientConfiguration cfg0,boolean routerClient) throws GridClientException {  this.id=id;  cfg=new GridClientConfiguration(cfg0);  boolean success=false;  try {    top=new GridClientTopology(cfg);    for (    GridClientDataConfiguration dataCfg : cfg.getDataConfigurations()) {      GridClientDataAffinity aff=dataCfg.getAffinity();      if (aff instanceof GridClientTopologyListener)       addTopologyListener((GridClientTopologyListener)aff);    }    if (cfg.getBalancer() instanceof GridClientTopologyListener)     top.addTopologyListener((GridClientTopologyListener)cfg.getBalancer());    GridSslContextFactory factory=cfg.getSslContextFactory();    if (factory != null) {      try {        sslCtx=factory.createSslContext();      } catch (      SSLException e) {        throw new GridClientException("Failed to create client (unable to create SSL context, " + "check ssl context factory configuration): " + e.getMessage(),e);      }    }    if (cfg.isAutoFetchMetrics() && !cfg.isEnableMetricsCache())     log.warning("Auto-fetch for metrics is enabled without enabling caching for them.");    if (cfg.isAutoFetchAttributes() && !cfg.isEnableAttributesCache())     log.warning("Auto-fetch for node attributes is enabled without enabling caching for them.");    srvs=parseAddresses(cfg.getServers());    routers=parseAddresses(cfg.getRouters());    if (srvs.isEmpty() && routers.isEmpty())     throw new GridClientException("Servers addresses and routers addresses cannot both be empty " + "for client (please fix configuration and restart): " + this);    if (!srvs.isEmpty() && !routers.isEmpty())     throw new GridClientException("Servers addresses and routers addresses cannot both be provided " + "for client (please fix configuration and restart): " + this);    connMgr=createConnectionManager(id,sslCtx,cfg,routers,top,null,routerClient);    try {      tryInitTopology();    } catch (    GridClientException e) {      top.fail(e);      log.warning("Failed to initialize topology on client start. Will retry in background.");    }catch (    InterruptedException e) {      Thread.currentThread().interrupt();      throw new GridClientException("Client startup was interrupted.",e);    }    topUpdateThread=new TopologyUpdaterThread();    topUpdateThread.setDaemon(true);    topUpdateThread.start();    compute=new GridClientComputeImpl(this,null,null,cfg.getBalancer());    if (log.isLoggable(Level.INFO))     log.info("Client started [id=" + id + ", protocol="+ cfg.getProtocol()+ ']');    success=true;  }  finally {    if (!success)     stop(false);  }}  }
class C{  public static void handle(Response response,String successMessageKey,Object... params){  ReturnCode returnCode=response.getMostSevereReturnCode();  if (returnCode != null) {    JSFUtils.addMessage(returnCode.getMember(),mapToFaces(returnCode.getType()),returnCode.getMessageKey(),returnCode.getMessageParam());  } else {    JSFUtils.addMessage(null,FacesMessage.SEVERITY_INFO,successMessageKey,params);  }}  }
class C{  public PLDataRunnable(PLFileDownloaderListener listener,String url,byte[] data,long startTime){  super();  mListener=listener;  mURL=url;  mData=data;  mStartTime=startTime;}  }
class C{  public DoubleVector copy(){  return (DoubleVector)clone();}  }
class C{  public Property property(DateTimeFieldType type){  if (type == null) {    throw new IllegalArgumentException("The DateTimeFieldType must not be null");  }  DateTimeField field=type.getField(getChronology());  if (field.isSupported() == false) {    throw new IllegalArgumentException("Field '" + type + "' is not supported");  }  return new Property(this,field);}  }
class C{  public static final List<INaviRawModule> loadRawModules(final AbstractSQLProvider provider) throws CouldntLoadDataException {  Preconditions.checkNotNull(provider,"IE00416: Provider argument can not be null");  final CConnection connection=provider.getConnection();  final List<INaviRawModule> modules=new ArrayList<INaviRawModule>();  if (!PostgreSQLHelpers.hasTable(connection,CTableNames.RAW_MODULES_TABLE)) {    return modules;  }  final String query="SELECT id, name FROM " + CTableNames.RAW_MODULES_TABLE + " ORDER BY id";  try (ResultSet resultSet=connection.executeQuery(query,true)){    while (resultSet.next()) {      final int rawModuleId=resultSet.getInt("id");      final String name=PostgreSQLHelpers.readString(resultSet,"name");      final boolean isComplete=PostgreSQLDatabaseFunctions.checkRawModulesTables(provider.getConnection(),PostgreSQLHelpers.getDatabaseName(provider.getConnection()),rawModuleId);      final int functionCount=isComplete ? PostgreSQLDatabaseFunctions.getRawModuleFunctionCount(connection,rawModuleId) : 0;      final CRawModule module=new CRawModule(rawModuleId,name,functionCount,isComplete,provider);      modules.add(module);    }  } catch (  final SQLException e) {    throw new CouldntLoadDataException(e);  }  return modules;}  }
class C{  public _BuildAgentUpdate(final _BuildAgentUpdate_Flag[] flags){  super(flags);}  }
class C{  public boolean isActive(){  return this.active;}  }
class C{  public LeafNode(){}  }
class C{  public void run() throws Exception {  String randomFactor=Integer.toString(1000 + (new SecureRandom()).nextInt(9000));  String username="SusanJones-" + randomFactor;  String givenName="Susan";  String familyName="Jones";  String password="123$$abc";  String testGroupName="discuss_general";  String testGroupId="newgroup-" + randomFactor;  String testGroupDescription="Discuss";  String memberUserName="john.doe." + randomFactor;  String memberFirstName="John";  String memberLastName="Doe";  String memberPassword="123$$$abc";  String ownerUserName="jane.doe." + randomFactor;  String ownerFirstName="Jane";  String ownerLastName="Doe";  String ownerPassword="123$$$abc";  UserEntry createdUserEntry=createUser(username,givenName,familyName,password);  String newFamilyName="Smith";  createdUserEntry.getName().setFamilyName(newFamilyName);  UserEntry updatedUserEntry=updateUser(username,createdUserEntry);  String nickname0="Susy-" + randomFactor;  NicknameEntry createdNicknameEntry0=createNickname(username,nickname0);  String nickname1="Suse-" + randomFactor;  NicknameEntry createdNicknameEntry1=createNickname(username,nickname1);  NicknameFeed retrievedNicknameFeed=retrieveNicknames(username);  StringBuffer nicknames=new StringBuffer();  Iterator<NicknameEntry> nicknameIterator=retrievedNicknameFeed.getEntries().iterator();  while (nicknameIterator.hasNext()) {    nicknames.append(nicknameIterator.next().getNickname().getName());    if (nicknameIterator.hasNext()) {      nicknames.append(", ");    }  }  LOGGER.log(Level.INFO,"User '" + username + "' has the following nicknames: {"+ nicknames.toString()+ "}.");  deleteNickname(nickname0);  deleteNickname(nickname1);  String emailList="Staff-" + randomFactor;  EmailListEntry createdEmailListEntry=createEmailList(emailList);  addRecipientToEmailList(username + "@" + domain,emailList);  addRecipientToEmailList("jane.doe@externaldomain.com",emailList);  EmailListFeed retrievedEmailListFeed=retrieveEmailLists(username);  StringBuffer emailLists=new StringBuffer();  Iterator<EmailListEntry> emailListIterator=retrievedEmailListFeed.getEntries().iterator();  while (emailListIterator.hasNext()) {    emailLists.append(emailListIterator.next().getEmailList().getName());    if (emailListIterator.hasNext()) {      emailLists.append(", ");    }  }  LOGGER.log(Level.INFO,"User '" + username + "' is in the following emailLists: {"+ emailLists.toString()+ "}.");  LOGGER.log(Level.INFO,"Creating users for groups sample run");  createUser(memberUserName,memberFirstName,memberLastName,memberPassword);  createUser(ownerUserName,ownerFirstName,ownerLastName,ownerPassword);  GenericFeed groupsFeed=null;  GenericEntry groupsEntry=null;  Iterator<GenericEntry> groupsEntryIterator=null;  LOGGER.log(Level.INFO,"Creating group: " + testGroupId);  groupsEntry=groupService.createGroup(testGroupId,testGroupName,testGroupDescription,"");  LOGGER.log(Level.INFO,"Group created with following properties:\n" + groupsEntry.getAllProperties());  groupsEntry=groupService.addMemberToGroup(testGroupId,memberUserName);  LOGGER.log(Level.INFO,"Added member: \n" + groupsEntry.getAllProperties());  groupsEntry=groupService.addOwnerToGroup(testGroupId,ownerUserName);  LOGGER.log(Level.INFO,"Added owner: \n" + groupsEntry.getAllProperties());  groupsEntry=groupService.updateGroup(testGroupId,testGroupName,testGroupDescription + "Updated: ","");  LOGGER.log(Level.INFO,"Updated group description:\n" + groupsEntry.getAllProperties());  groupsFeed=groupService.retrieveAllMembers(testGroupId);  groupsEntryIterator=groupsFeed.getEntries().iterator();  StringBuffer members=new StringBuffer();  while (groupsEntryIterator.hasNext()) {    members.append(groupsEntryIterator.next().getProperty(AppsGroupsService.APPS_PROP_GROUP_MEMBER_ID));    if (groupsEntryIterator.hasNext()) {      members.append(", ");    }  }  LOGGER.log(Level.INFO,testGroupId + " has these members: " + members.toString());  groupsFeed=groupService.retreiveGroupOwners(testGroupId);  groupsEntryIterator=groupsFeed.getEntries().iterator();  StringBuffer owners=new StringBuffer();  while (groupsEntryIterator.hasNext()) {    owners.append(groupsEntryIterator.next().getProperty(AppsGroupsService.APPS_PROP_GROUP_EMAIL));    if (groupsEntryIterator.hasNext()) {      owners.append(", ");    }  }  LOGGER.log(Level.INFO,testGroupName + " has these owners: " + owners.toString());  groupsFeed=groupService.retrieveAllGroups();  groupsEntryIterator=groupsFeed.getEntries().iterator();  StringBuffer groups=new StringBuffer();  while (groupsEntryIterator.hasNext()) {    groups.append(groupsEntryIterator.next().getProperty(AppsGroupsService.APPS_PROP_GROUP_ID));    if (groupsEntryIterator.hasNext()) {      groups.append(", ");    }  }  LOGGER.log(Level.INFO,"Domain has these groups:\n" + groups.toString());  groupsFeed=groupService.retrieveGroups(memberUserName,true);  groupsEntryIterator=groupsFeed.getEntries().iterator();  groups=new StringBuffer();  while (groupsEntryIterator.hasNext()) {    groups.append(groupsEntryIterator.next().getProperty(AppsGroupsService.APPS_PROP_GROUP_ID));    if (groupsEntryIterator.hasNext()) {      groups.append(", ");    }  }  LOGGER.log(Level.INFO,memberUserName + " is subscribed to these groups:\n" + groups.toString());  boolean isMember=groupService.isMember(testGroupId,memberUserName);  LOGGER.log(Level.INFO,memberUserName + " is member of " + testGroupId+ "?: "+ isMember);  boolean isOwner=groupService.isOwner(testGroupId,ownerUserName);  LOGGER.log(Level.INFO,ownerUserName + " is owner of " + testGroupId+ "?: "+ isOwner);  groupService.removeOwnerFromGroup(ownerUserName + "@" + domain,testGroupId);  LOGGER.log(Level.INFO,"Removing " + ownerUserName + " as owner from group "+ testGroupId);  groupService.deleteGroup(testGroupId);  deleteUser(memberUserName);  deleteUser(ownerUserName);  deleteEmailList(emailList);  deleteUser(username);  String fakeUsername="SusanJones-fake";  try {    deleteUser(fakeUsername);  } catch (  AppsForYourDomainException e) {    if (e.getErrorCode() == AppsForYourDomainErrorCode.EntityDoesNotExist) {      LOGGER.log(Level.INFO,"Do some post-error processing or logging.");    }  }}  }
class C{  public boolean isMacOSX(){  return operatingSystem == OperatingSystem.MACOSX;}  }
class C{  public int inferStreamType(){switch (mType) {case TYPE_ALARM:    return AudioManager.STREAM_ALARM;case TYPE_NOTIFICATION:  return AudioManager.STREAM_NOTIFICATION;default :return AudioManager.STREAM_RING;}}  }
class C{  public void addRisikoMassnahmenUmsetzungen(List<RisikoMassnahme> allRisikoMassnahmen){  for (  RisikoMassnahme massnahme : allRisikoMassnahmen) {    addRisikoMassnahmeUmsetzung(massnahme);  }}  }
class C{  public String resourceLocation(String resource){  Path inConfigDir=getInstancePath().resolve("conf").resolve(resource);  if (Files.exists(inConfigDir) && Files.isReadable(inConfigDir))   return inConfigDir.toAbsolutePath().normalize().toString();  Path inInstanceDir=getInstancePath().resolve(resource);  if (Files.exists(inInstanceDir) && Files.isReadable(inInstanceDir))   return inInstanceDir.toAbsolutePath().normalize().toString();  try (InputStream is=classLoader.getResourceAsStream(resource.replace(File.separatorChar,'/'))){    if (is != null)     return "classpath:" + resource;  } catch (  IOException e) {  }  return resource;}  }
class C{  public void paint(Graphics g){  int width=getWidth();  int height=getHeight();  if (editingIcon != null) {    int yLoc=calculateIconY(editingIcon);    if (getComponentOrientation().isLeftToRight()) {      editingIcon.paintIcon(this,g,0,yLoc);    } else {      editingIcon.paintIcon(this,g,width - editingIcon.getIconWidth(),yLoc);    }  }  Color background=getBorderSelectionColor();  if (background != null) {    g.setColor(background);    g.drawRect(0,0,width - 1,height - 1);  }  super.paint(g);}  }
class C{  public int addHistogramPlot(String name,double[][] XYdX){  return addHistogramPlot(name,getNewColor(),XYdX);}  }
class C{  public void arcade(double driveSpeed,double turnSpeed,boolean squaredInputs){  double leftMotorSpeed;  double rightMotorSpeed;  driveSpeed=speedLimiter.applyAsDouble(driveSpeed);  turnSpeed=speedLimiter.applyAsDouble(turnSpeed);  if (squaredInputs) {    if (driveSpeed >= 0.0) {      driveSpeed=(driveSpeed * driveSpeed);    } else {      driveSpeed=-(driveSpeed * driveSpeed);    }    if (turnSpeed >= 0.0) {      turnSpeed=(turnSpeed * turnSpeed);    } else {      turnSpeed=-(turnSpeed * turnSpeed);    }  }  if (driveSpeed > 0.0) {    if (turnSpeed > 0.0) {      leftMotorSpeed=driveSpeed - turnSpeed;      rightMotorSpeed=Math.max(driveSpeed,turnSpeed);    } else {      leftMotorSpeed=Math.max(driveSpeed,-turnSpeed);      rightMotorSpeed=driveSpeed + turnSpeed;    }  } else {    if (turnSpeed > 0.0) {      leftMotorSpeed=-Math.max(-driveSpeed,turnSpeed);      rightMotorSpeed=driveSpeed + turnSpeed;    } else {      leftMotorSpeed=driveSpeed - turnSpeed;      rightMotorSpeed=-Math.max(-driveSpeed,-turnSpeed);    }  }  left.setSpeed(leftMotorSpeed);  right.setSpeed(rightMotorSpeed);}  }
class C{  public void writeXml(java.io.OutputStream oStream) throws SQLException, IOException {  if (xmlWriter != null) {    curPosBfrWrite=this.getRow();    xmlWriter.writeXML(this,oStream);  } else {    throw new SQLException(resBundle.handleGetObject("webrowsetimpl.invalidwr").toString());  }}  }
class C{  public String randomSeedTipText(){  return "Random number seed.";}  }
class C{  @Ignore @Test public void onTouchUpAction_eventWhenLeftOverscrolling_smoothScrollBackToRightEnd() throws Exception {  MotionEvent moveEvent=createShortLeftMoveEvent();  when(mViewAdapter.isInAbsoluteStart()).thenReturn(false);  when(mViewAdapter.isInAbsoluteEnd()).thenReturn(true);  HorizontalOverScrollBounceEffectDecorator uut=getUUT();  uut.onTouch(mView,moveEvent);  reset(mView);  float viewX=moveEvent.getX();  when(mView.getTranslationX()).thenReturn(viewX);  MotionEvent upEvent=createDefaultUpActionEvent();  boolean ret=uut.onTouch(mView,upEvent);  assertTrue(ret);  verify(mView,atLeastOnce()).setTranslationX(anyFloat());}  }
class C{  protected void sequence_Wildcard(ISerializationContext context,Wildcard semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public LocalDate roundHalfCeilingCopy(){  return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));}  }
class C{  public static <T extends CompilationResult>T compileGraph(StructuredGraph graph,ResolvedJavaMethod installedCodeOwner,Providers providers,Backend backend,PhaseSuite<HighTierContext> graphBuilderSuite,OptimisticOptimizations optimisticOpts,ProfilingInfo profilingInfo,Suites suites,LIRSuites lirSuites,T compilationResult,CompilationResultBuilderFactory factory){  return compile(new Request<>(graph,installedCodeOwner,providers,backend,graphBuilderSuite,optimisticOpts,profilingInfo,suites,lirSuites,compilationResult,factory));}  }
class C{  @Override public String toString(){  return this.state.toString();}  }
class C{  public static void start(Activity activity){  new FirstRunSignInProcessor(activity,false,null);}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public ImmutableSet<V> replaceValues(K key,Iterable<? extends V> values){  throw new UnsupportedOperationException();}  }
class C{  public void buildDBColumn(final DBTable table,final AbstractSession session,final JPAMTableDefinition tableDef) throws ValidationException {  DBColumn column=null;  if (discriminatorColumn != null) {    column=new DBDiscriminatorColumn(name,discriminatorColumn);  } else   if (inherited) {    if (managedAttribute instanceof RelationAttribute) {      if (inverse) {        column=new DBParentAssociationInverseJoinColumn(name,intrinsicClass,(RelationAttribute)managedAttribute,relationTable);      } else {        column=new DBParentAssociationJoinColumn(name,intrinsicClass,(RelationAttribute)managedAttribute,relationTable);      }    } else {      column=new DBParentAttributeColumn(name,intrinsicClass,managedAttribute);    }  } else   if (foriegnKey && inverse && (intrinsicAttribute == null || intrinsicAttribute.isEmpty())) {    column=new DBPrimaryKeyJoinColumn(name,intrinsicClass,(Id)managedAttribute);  } else   if (intrinsicAttribute.size() == 1) {    if (intrinsicAttribute.peek() instanceof RelationAttribute) {      if (mapKey) {        column=buildMapKeyColumn();      } else {        if (inverse) {          column=new DBInverseJoinColumn(name,(RelationAttribute)managedAttribute,relationTable);        } else {          column=new DBJoinColumn(name,managedAttribute,relationTable);        }      }    } else     if (intrinsicAttribute.peek() instanceof ElementCollection) {      if (foriegnKey) {        column=new DBJoinColumn(name,managedAttribute,relationTable);      } else       if (mapKey) {        column=buildMapKeyColumn();      } else {        column=new DBColumn(name,managedAttribute);      }    } else     if (foriegnKey && inverse && intrinsicAttribute.peek() instanceof Id) {      column=new DBPrimaryKeyJoinColumn(name,intrinsicClass,(Id)managedAttribute);    } else {      column=new DBColumn(name,managedAttribute);    }  } else   if (intrinsicAttribute.size() > 1) {    if (intrinsicAttribute.get(0) instanceof RelationAttribute) {      if (mapKey) {        column=buildMapKeyColumn();      } else {        if (inverse) {          column=new DBInverseJoinColumn(name,(RelationAttribute)managedAttribute,relationTable);        } else {          column=new DBJoinColumn(name,managedAttribute,relationTable);        }      }    } else     if (intrinsicAttribute.get(0) instanceof Embedded) {      List<Embedded> embeddedList=new ArrayList<>();      for (int i=0; i < intrinsicAttribute.size() - 1; i++) {        embeddedList.add((Embedded)intrinsicAttribute.get(i));      }      if (managedAttribute instanceof RelationAttribute) {        if (inverse) {          column=new DBEmbeddedAssociationInverseJoinColumn(name,embeddedList,(RelationAttribute)managedAttribute,relationTable);        } else {          column=new DBEmbeddedAssociationJoinColumn(name,embeddedList,(RelationAttribute)managedAttribute,relationTable);        }      } else       if (foriegnKey) {        column=new DBEmbeddedAttributeJoinColumn(name,embeddedList,managedAttribute);      } else {        column=new DBEmbeddedAttributeColumn(name,embeddedList,managedAttribute);      }    } else     if (intrinsicAttribute.get(0) instanceof EmbeddedId) {      EmbeddedId embeddedId=(EmbeddedId)intrinsicAttribute.get(0);      if (intrinsicAttribute.size() > 2 && ((DefaultAttribute)intrinsicAttribute.get(1)).isDerived() && ((DefaultAttribute)intrinsicAttribute.get(1)).getConnectedAttribute() instanceof RelationAttribute) {        column=new DBInverseJoinColumn(name,(RelationAttribute)((DefaultAttribute)intrinsicAttribute.get(1)).getConnectedAttribute(),relationTable);      } else {        if (((DefaultAttribute)managedAttribute).getConnectedAttribute() instanceof RelationAttribute) {          column=new DBInverseJoinColumn(name,(RelationAttribute)((DefaultAttribute)managedAttribute).getConnectedAttribute(),relationTable);        } else         if (((EmbeddedId)intrinsicAttribute.get(0)).getConnectedAttribute() instanceof RelationAttribute) {          column=new DBInverseJoinColumn(name,(RelationAttribute)((EmbeddedId)intrinsicAttribute.get(0)).getConnectedAttribute(),relationTable);        } else {          column=new DBColumn(name,managedAttribute);        }      }    } else     if (intrinsicAttribute.get(0) instanceof ElementCollection) {      if (mapKey) {        column=buildMapKeyColumn();      } else {        ElementCollection elementCollection=(ElementCollection)intrinsicAttribute.peek();        List<Embedded> embeddedList=new ArrayList<>();        embeddedList.add(new Embedded(elementCollection.getAttributeOverride()));        for (int i=1; i < intrinsicAttribute.size() - 1; i++) {          embeddedList.add((Embedded)intrinsicAttribute.get(i));        }        if (managedAttribute instanceof RelationAttribute) {          if (inverse) {            column=new DBEmbeddedAssociationInverseJoinColumn(name,embeddedList,(RelationAttribute)managedAttribute,relationTable);          } else {            column=new DBEmbeddedAssociationJoinColumn(name,embeddedList,(RelationAttribute)managedAttribute,relationTable);          }        } else         if (foriegnKey) {          column=new DBEmbeddedAttributeJoinColumn(name,embeddedList,managedAttribute);        } else {          column=new DBEmbeddedAttributeColumn(name,embeddedList,managedAttribute);        }      }    }  }  if (column == null) {    column=new DBColumn(name,managedAttribute);  }  column.setId(NBModelerUtil.getAutoGeneratedStringId());  if (getTypeDefinition() != null) {  } else {    final FieldTypeDefinition fieldType=type != null ? session.getPlatform().getFieldTypeDefinition(type) : new FieldTypeDefinition(typeName);    if (fieldType == null) {      throw ValidationException.javaTypeIsNotAValidDatabaseType(type);    }    column.setDataType(fieldType.getName());    if ((fieldType.isSizeAllowed()) && ((this.getSize() != 0) || (fieldType.isSizeRequired()))) {      if (this.getSize() == 0) {        column.setSize(fieldType.getDefaultSize());      } else {        column.setSize(this.getSize());      }      if (this.getSubSize() != 0) {        column.setSubSize(this.getSubSize());      } else       if (fieldType.getDefaultSubSize() != 0) {        column.setSubSize(fieldType.getDefaultSubSize());      }    }    if (shouldAllowNull && fieldType.shouldAllowNull()) {      column.setAllowNull(true);    } else {      column.setAllowNull(false);    }  }  column.setUniqueKey(isUnique());  column.setPrimaryKey(isPrimaryKey() && session.getPlatform().supportsPrimaryKeyConstraint());  table.addColumn(column);}  }
class C{  @Override public int describeContents(){  return 0;}  }
class C{  public static boolean isBase64(final byte[] arrayOctet){  for (int i=0; i < arrayOctet.length; i++) {    if (!isBase64(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {      return false;    }  }  return true;}  }
class C{  private boolean isDigitCharacter(int c){  return (c >= '0' && c <= '9') || c == 'e' || c == 'E' || c == '.' || c == '+' || c == '-';}  }
class C{  public void emitNewarray(int elemcode,Type arrayType){  emitop(newarray);  if (!alive)   return;  emit1(elemcode);  state.pop(1);  state.push(arrayType);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:10.325 -0500",hash_original_method="D59B525355274204B82DF4FF44540199",hash_generated_method="6173B1DB2E76F67DB3683D3E5D8DC8FE") public void addNewsgroup(String newsgroup){  if (__newsgroups != null)   __newsgroups.append(','); else   __newsgroups=new StringBuffer();  __newsgroups.append(newsgroup);}  }
class C{  public String mapMethodName(String owner,String name,String desc){  return name;}  }
class C{  public EqualsBuilder append(boolean lhs,boolean rhs){  if (isEquals == false) {    return this;  }  isEquals=(lhs == rhs);  return this;}  }
class C{  @Override public void close(){  currentRow=null;  rows=null;  columns=null;  rowId=-1;  if (source != null) {    source.close();    source=null;  }}  }
class C{  File directoryFor(Parameter parameter){  File result=_directoryFor(parameter);  uncheck();  return result;}  }
class C{  private static int fixedFromGregorian(DateValue date){  return fixedFromGregorian(date.year(),date.month(),date.day());}  }
class C{  public static void appendChildElement(Element parent,Element el,String[] order) throws IllegalArgumentException {  List<String> l=Arrays.asList(order);  int index=l.indexOf(el.getLocalName());  if (index == -1) {    throw new IllegalArgumentException("new child element '" + el.getLocalName() + "' not specified in order "+ l);  }  List<Element> elements=findSubElements(parent);  Element insertBefore=null;  for (  Element e : elements) {    int index2=l.indexOf(e.getLocalName());    if (index2 == -1) {      throw new IllegalArgumentException("Existing child element '" + e.getLocalName() + "' not specified in order "+ l);    }    if (index2 > index) {      insertBefore=e;      break;    }  }  parent.insertBefore(el,insertBefore);}  }
class C{  public boolean lock(Object key){  Object theLock;synchronized (this) {    theLock=locks.get(key);    if (null == theLock) {      locks.put(key,getCallerId());      return true;    } else     return getCallerId() == theLock;  }}  }
class C{  private NSArray parseArray() throws ParseException {  skip();  skipWhitespacesAndComments();  List<NSObject> objects=new LinkedList<NSObject>();  while (!accept(ARRAY_END_TOKEN)) {    objects.add(parseObject());    skipWhitespacesAndComments();    if (accept(ARRAY_ITEM_DELIMITER_TOKEN)) {      skip();    } else {      break;    }    skipWhitespacesAndComments();  }  read(ARRAY_END_TOKEN);  return new NSArray(objects.toArray(new NSObject[objects.size()]));}  }
class C{  public boolean isAuthenticated(){  return saslNegotiated;}  }
class C{  public DoubleRangeField(String name,final double[] min,final double[] max){  super(name,getType(min.length));  setRangeValues(min,max);}  }
class C{  public static MethExecutorResult executeInstance(String receiver,String selector){  try {    Class receiverClass=Class.forName(receiver);    Object target=receiverClass.newInstance();    Object res=null;    try {      Method theMethod=getMethod(receiverClass,selector,new Class[0]);      res=theMethod.invoke(target,new Object[0]);      return new MethExecutorResult(res);    } catch (    InvocationTargetException invTargEx) {      Throwable targEx=invTargEx.getTargetException();      if (targEx == null) {        return new MethExecutorResult(res);      } else {        return new MethExecutorResult(targEx);      }    }  } catch (  VirtualMachineError e) {    SystemFailure.initiateFailure(e);    throw e;  }catch (  Throwable t) {    return new MethExecutorResult(t);  }}  }
class C{  public static BufferedImage createRGBImageFromInvertedYCCK(Raster ycckRaster,ICC_Profile cmykProfile){  BufferedImage image;  if (cmykProfile != null) {    ycckRaster=convertInvertedYCCKToCMYK(ycckRaster);    image=createRGBImageFromCMYK(ycckRaster,cmykProfile);  } else {    int w=ycckRaster.getWidth(), h=ycckRaster.getHeight();    int[] rgb=new int[w * h];    int[] Y=ycckRaster.getSamples(0,0,w,h,0,(int[])null);    int[] Cb=ycckRaster.getSamples(0,0,w,h,1,(int[])null);    int[] Cr=ycckRaster.getSamples(0,0,w,h,2,(int[])null);    int[] K=ycckRaster.getSamples(0,0,w,h,3,(int[])null);    float vr, vg, vb;    for (int i=0, imax=Y.length; i < imax; i++) {      float k=255 - K[i], y=255 - Y[i], cb=255 - Cb[i], cr=255 - Cr[i];      vr=y + 1.402f * (cr - 128) - k;      vg=y - 0.34414f * (cb - 128) - 0.71414f * (cr - 128) - k;      vb=y + 1.772f * (cb - 128) - k;      rgb[i]=(0xff & (vr < 0.0f ? 0 : vr > 255.0f ? 0xff : (int)(vr + 0.5f))) << 16 | (0xff & (vg < 0.0f ? 0 : vg > 255.0f ? 0xff : (int)(vg + 0.5f))) << 8 | (0xff & (vb < 0.0f ? 0 : vb > 255.0f ? 0xff : (int)(vb + 0.5f)));    }    Raster rgbRaster=Raster.createPackedRaster(new DataBufferInt(rgb,rgb.length),w,h,w,new int[]{0xff0000,0xff00,0xff},null);    ColorSpace cs=ColorSpace.getInstance(ColorSpace.CS_sRGB);    ColorModel cm=new DirectColorModel(cs,24,0xff0000,0xff00,0xff,0x0,false,DataBuffer.TYPE_INT);    image=new BufferedImage(cm,(WritableRaster)rgbRaster,true,null);  }  return image;}  }
class C{  @RequestProcessing(value="/admin",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showIndex(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("admin/index.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  public boolean isCompleteForPhotoCaptureEvent(){  return (mMode != null) && (mFilename != null) && (mExifInterface != null)&& (mIsFrontFacing != null)&& (mIsHdr != null)&& (mZoom != null)&& (mFlashSetting != null)&& (mGridLinesOn != null)&& (mTimerSeconds != null)&& (mTouchCoordinate != null)&& (mVolumeButtonShutter != null);}  }
class C{  @DSSink({DSSinkKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:28.933 -0500",hash_original_method="5FC4A2324FC6DD99D16BF2BD98355D7B",hash_generated_method="F6F0B09859D5F33E88782A14F5B94A7F") public void sendDtmf(int code){  sendDtmf(code,null);}  }
class C{  public void add(String keyword,byte id){  int key=getStringMapKey(keyword);  map[key]=new Keyword(keyword.toCharArray(),id,map[key]);}  }
class C{  @Override public String toBundleName(String baseName,Locale locale){  String newBaseName=baseName;  String lang=locale.getLanguage();  if (lang.length() > 0) {    if (baseName.startsWith(JRE.getUtilResourcesPackage()) || baseName.startsWith(JRE.getTextResourcesPackage())) {      assert JRE.getUtilResourcesPackage().length() == JRE.getTextResourcesPackage().length();      int index=JRE.getUtilResourcesPackage().length();      if (baseName.indexOf(DOTCLDR,index) > 0) {        index+=DOTCLDR.length();      }      newBaseName=baseName.substring(0,index + 1) + lang + baseName.substring(index);    }  }  return super.toBundleName(newBaseName,locale);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public PartialResponseWriter(ResponseWriter writer){  super(writer);}  }
class C{  public DrawerBuilder addStickyDrawerItems(@NonNull IDrawerItem... stickyDrawerItems){  if (this.mStickyDrawerItems == null) {    this.mStickyDrawerItems=new ArrayList<>();  }  Collections.addAll(this.mStickyDrawerItems,stickyDrawerItems);  return this;}  }
class C{  @Override public void connectStorage(URI storage) throws ControllerException {  StorageSystem storageObj=null;  try {    storageObj=_dbClient.queryObject(StorageSystem.class,storage);  } catch (  Exception e) {    throw DeviceControllerException.exceptions.connectStorageFailedDb(e);  }  if (storageObj == null) {    throw DeviceControllerException.exceptions.connectStorageFailedNull();  }  BlockStorageDevice storageDevice=getDevice(storageObj.getSystemType());  storageDevice.doConnect(storageObj);  _log.info("Adding to storage device to work pool: {}",storageObj.getId());}  }
class C{  public static String s1(int v){  char[] result=new char[3];  if (v < 0) {    result[0]='-';    v=-v;  } else {    result[0]='+';  }  for (int i=0; i < 2; i++) {    result[2 - i]=Character.forDigit(v & 0x0f,16);    v>>=4;  }  return new String(result);}  }
class C{  public SimpleQueryStringBuilder defaultOperator(Operator defaultOperator){  this.operator=defaultOperator;  return this;}  }
class C{  public CompositeShapePainter(Shape shape){  if (shape == null) {    throw new IllegalArgumentException();  }  this.shape=shape;}  }
class C{  static String readLine(BufferedReader in,File inputFile){  String line=null;  try {    line=in.readLine();  } catch (  Exception e) {    System.err.println("Can't read from '" + inputFile + "': "+ e);    System.exit(1);  }  return line;}  }
class C{  public boolean isImplicationDefiniteClause(){  return isDefiniteClause() && cachedNegativeSymbols.size() >= 1;}  }
class C{  public Timex3_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_filename=jcas.getRequiredFeatureDE(casType,"filename","uima.cas.String",featOkTst);  casFeatCode_filename=(null == casFeat_filename) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_filename).getCode();  casFeat_sentId=jcas.getRequiredFeatureDE(casType,"sentId","uima.cas.Integer",featOkTst);  casFeatCode_sentId=(null == casFeat_sentId) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_sentId).getCode();  casFeat_firstTokId=jcas.getRequiredFeatureDE(casType,"firstTokId","uima.cas.Integer",featOkTst);  casFeatCode_firstTokId=(null == casFeat_firstTokId) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_firstTokId).getCode();  casFeat_allTokIds=jcas.getRequiredFeatureDE(casType,"allTokIds","uima.cas.String",featOkTst);  casFeatCode_allTokIds=(null == casFeat_allTokIds) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_allTokIds).getCode();  casFeat_timexId=jcas.getRequiredFeatureDE(casType,"timexId","uima.cas.String",featOkTst);  casFeatCode_timexId=(null == casFeat_timexId) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_timexId).getCode();  casFeat_timexInstance=jcas.getRequiredFeatureDE(casType,"timexInstance","uima.cas.Integer",featOkTst);  casFeatCode_timexInstance=(null == casFeat_timexInstance) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_timexInstance).getCode();  casFeat_timexType=jcas.getRequiredFeatureDE(casType,"timexType","uima.cas.String",featOkTst);  casFeatCode_timexType=(null == casFeat_timexType) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_timexType).getCode();  casFeat_timexValue=jcas.getRequiredFeatureDE(casType,"timexValue","uima.cas.String",featOkTst);  casFeatCode_timexValue=(null == casFeat_timexValue) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_timexValue).getCode();  casFeat_foundByRule=jcas.getRequiredFeatureDE(casType,"foundByRule","uima.cas.String",featOkTst);  casFeatCode_foundByRule=(null == casFeat_foundByRule) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_foundByRule).getCode();  casFeat_timexQuant=jcas.getRequiredFeatureDE(casType,"timexQuant","uima.cas.String",featOkTst);  casFeatCode_timexQuant=(null == casFeat_timexQuant) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_timexQuant).getCode();  casFeat_timexFreq=jcas.getRequiredFeatureDE(casType,"timexFreq","uima.cas.String",featOkTst);  casFeatCode_timexFreq=(null == casFeat_timexFreq) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_timexFreq).getCode();  casFeat_timexMod=jcas.getRequiredFeatureDE(casType,"timexMod","uima.cas.String",featOkTst);  casFeatCode_timexMod=(null == casFeat_timexMod) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_timexMod).getCode();  casFeat_emptyValue=jcas.getRequiredFeatureDE(casType,"emptyValue","uima.cas.String",featOkTst);  casFeatCode_emptyValue=(null == casFeat_emptyValue) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_emptyValue).getCode();}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  resolvePrefixTables();  ElemTemplateElement t=getFirstChildElem();  m_hasTextLitOnly=((t != null) && (t.getXSLToken() == Constants.ELEMNAME_TEXTLITERALRESULT) && (t.getNextSiblingElem() == null));  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  cstate.pushStackMark();}  }
class C{  public T caseUnknownTypeRef(UnknownTypeRef object){  return null;}  }
class C{  public static ImageSource resource(int resId){  return new ImageSource(resId);}  }
class C{  public void appendToDoc(String text,Font f,Color fg,Color bg,boolean underline,boolean setFG){  if (text != null) {    int fontIndex=f == null ? 0 : (getFontIndex(fontList,f) + 1);    if (fontIndex != lastFontIndex) {      document.append("\\f").append(fontIndex);      lastFontIndex=fontIndex;      lastWasControlWord=true;    }    if (f != null) {      int fontSize=fixFontSize(f.getSize2D());      if (fontSize != lastFontSize) {        document.append("\\fs").append(fontSize);        lastFontSize=fontSize;        lastWasControlWord=true;      }      if (f.isBold() != lastBold) {        document.append(lastBold ? "\\b0" : "\\b");        lastBold=!lastBold;        lastWasControlWord=true;      }      if (f.isItalic() != lastItalic) {        document.append(lastItalic ? "\\i0" : "\\i");        lastItalic=!lastItalic;        lastWasControlWord=true;      }    } else {      if (lastFontSize != DEFAULT_FONT_SIZE) {        document.append("\\fs").append(DEFAULT_FONT_SIZE);        lastFontSize=DEFAULT_FONT_SIZE;        lastWasControlWord=true;      }      if (lastBold) {        document.append("\\b0");        lastBold=false;        lastWasControlWord=true;      }      if (lastItalic) {        document.append("\\i0");        lastItalic=false;        lastWasControlWord=true;      }    }    if (underline) {      document.append("\\ul");      lastWasControlWord=true;    }    if (setFG) {      int fgIndex=0;      if (fg != null) {        fgIndex=getIndex(colorList,fg) + 1;      }      if (fgIndex != lastFGIndex) {        document.append("\\cf").append(fgIndex);        lastFGIndex=fgIndex;        lastWasControlWord=true;      }    }    if (bg != null) {      int pos=getIndex(colorList,bg);      document.append("\\highlight").append(pos + 1);      lastWasControlWord=true;    }    if (lastWasControlWord) {      document.append(' ');      lastWasControlWord=false;    }    escapeAndAdd(document,text);    if (bg != null) {      document.append("\\highlight0");      lastWasControlWord=true;    }    if (underline) {      document.append("\\ul0");      lastWasControlWord=true;    }  }}  }
class C{  public boolean userCanViewDept(int connectedUserId,String entidad) throws Exception {  boolean can=false;  try {    can=hasUserDeptAuth(connectedUserId,USER_ACTION_ID_VIEW,ISicresAdminDefsKeys.NULL_ID,ISicresAdminDefsKeys.NULL_ID,ISicresAdminDefsKeys.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  public XMLEncoder(OutputStream out){  this(out,"UTF-8",true,0);}  }
class C{  public static Dog maxDog(Dog[] dogs){  Dog maxDog=dogs[0];  for (  Dog d : dogs) {    if (d.size > maxDog.size) {      maxDog=d;    }  }  return maxDog;}  }
class C{  @Override public void markAsMapped(Address start,int bytes){  int startChunk=addressToMmapChunksDown(start);  int endChunk=addressToMmapChunksUp(start.plus(bytes));  for (int i=startChunk; i <= endChunk; i++)   mapped[i]=MAPPED;}  }
class C{  @Override public void logoutRequest(Message arg0,HttpServletRequest request,HttpServletResponse response,String tenant){  Validate.notEmpty(tenant);  LogoutState loState=new LogoutState(request,response,sessionManager,null,null);  ValidationResult vr=new ValidationResult(arg0.getValidationResult().getResponseCode(),arg0.getStatus(),arg0.getSubstatus());  loState.setValidationResult(vr);  this.setLogoutState(loState);  this.getLogoutState().setProcessingState(ProcessingState.PARSED);  loState.getIdmAccessor().setTenant(tenant);  Session lotusSession=findSessionIdByExtSessionId(arg0.getSessionIndex());  if (lotusSession == null) {    logger.warn("No session found matching external session: {}",arg0.getSessionIndex());    return;  }  loState.setSessionId(lotusSession.getId());  loState.setIssuerValue(lotusSession.getExtIDPUsed().getEntityID());  loState.removeResponseHeaders();  try {    SamlServiceImpl.sendSLORequestsToOtherParticipants(tenant,loState);  } catch (  IOException e) {    logger.error("Caught IOException in sending logout request to service providers.");  }}  }
class C{  @Override public int insert(String elem){  int firstIndex=(int)(elem.charAt(0) - 'a');  int lastIndex=(int)(elem.charAt(elem.length() - 2) - 'a');  storage[firstIndex * 26 + lastIndex]=elem;  return 1;}  }
class C{  public LinkedIntegerMap(){  m_values=new LinkedHashMap<>();}  }
class C{  private List<Node> possibleParents(Node x,List<Node> nodes,IKnowledge knowledge){  List<Node> possibleParents=new LinkedList<>();  String _x=x.getName();  for (  Node z : nodes) {    String _z=z.getName();    if (possibleParentOf(_z,_x,knowledge)) {      possibleParents.add(z);    }  }  return possibleParents;}  }
class C{  public File createPDF(){  try {    File temp=File.createTempFile(get_TableName() + get_ID() + "_",".pdf");    return createPDF(temp);  } catch (  Exception e) {    log.severe("Could not create PDF - " + e.getMessage());  }  return null;}  }
class C{  public static void main(String[] args){  String a=args[0].replaceAll(" ","");  a=a.replaceAll("[+]","#+#");  a=a.replaceAll("[-]","#-#");  a=a.replaceAll("[*]","#*#");  a=a.replaceAll("[/]","#/#");  args=a.split("#");  if (args.length != 3) {    System.out.println("Usage: java Calculator operand1 operator operand2");    System.exit(0);  }  int result=0;switch (args[1].charAt(0)) {case '+':    result=Integer.parseInt(args[0]) + Integer.parseInt(args[2]);  break;case '-':result=Integer.parseInt(args[0]) - Integer.parseInt(args[2]);break;case '*':result=Integer.parseInt(args[0]) * Integer.parseInt(args[2]);break;case '/':result=Integer.parseInt(args[0]) / Integer.parseInt(args[2]);break;}System.out.println(args[0] + ' ' + args[1]+ ' '+ args[2]+ " = "+ result);}  }
class C{  protected void initAdapter(){  try {    XmlParser parse=new XmlParser(getContext(),mChangeLogFileResourceId);    ChangeLog chg=new ChangeLog();    if (chg != null) {      mAdapter=new ChangeLogAdapter(getContext(),chg.getRows());      mAdapter.setmRowLayoutId(mRowLayoutId);      mAdapter.setmRowHeaderLayoutId(mRowHeaderLayoutId);      new ParseAsyncTask(mAdapter,parse).execute();      setAdapter(mAdapter);    } else {      setAdapter(null);    }  } catch (  Exception e) {    Log.e(TAG,getResources().getString(R.string.changelog_internal_error_parsing),e);  }}  }
class C{  private boolean hasChar(){  return this.pos < this.len;}  }
class C{  private static void addAndCreateSourceEntry(IJavaProject javaProject,String directoryName,String outputDirectoryName) throws CoreException {  IFolder srcFolder=javaProject.getProject().getFolder(directoryName);  ResourceUtils.createFolderStructure(javaProject.getProject(),srcFolder.getProjectRelativePath());  IPath workspaceRelOutPath=null;  if (outputDirectoryName != null) {    IFolder outFolder=javaProject.getProject().getFolder(outputDirectoryName);    ResourceUtils.createFolderStructure(javaProject.getProject(),outFolder.getProjectRelativePath());    workspaceRelOutPath=outFolder.getFullPath();  }  JavaProjectUtilities.addRawClassPathEntry(javaProject,JavaCore.newSourceEntry(srcFolder.getFullPath(),ClasspathEntry.EXCLUDE_NONE,workspaceRelOutPath));}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>Map<K,V> of(){  return (Map<K,V>)ImmutableCollections.Map0.EMPTY_MAP;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private BarcodeFormat parseBarCodeString(String c){  if ("aztec".equals(c)) {    return BarcodeFormat.AZTEC;  } else   if ("ean13".equals(c)) {    return BarcodeFormat.EAN_13;  } else   if ("ean8".equals(c)) {    return BarcodeFormat.EAN_8;  } else   if ("ean8".equals(c)) {    return BarcodeFormat.EAN_8;  } else   if ("qr".equals(c)) {    return BarcodeFormat.QR_CODE;  } else   if ("ean8".equals(c)) {    return BarcodeFormat.EAN_8;  } else   if ("pdf417".equals(c)) {    return BarcodeFormat.PDF_417;  } else   if ("upce".equals(c)) {    return BarcodeFormat.UPC_E;  } else   if ("datamatrix".equals(c)) {    return BarcodeFormat.DATA_MATRIX;  } else   if ("code39".equals(c)) {    return BarcodeFormat.CODE_39;  } else   if ("code93".equals(c)) {    return BarcodeFormat.CODE_93;  } else   if ("interleaved2of5".equals(c)) {    return BarcodeFormat.ITF;  } else   if ("codabar".equals(c)) {    return BarcodeFormat.CODABAR;  } else   if ("code128".equals(c)) {    return BarcodeFormat.CODE_128;  } else   if ("maxicode".equals(c)) {    return BarcodeFormat.MAXICODE;  } else   if ("rss14".equals(c)) {    return BarcodeFormat.RSS_14;  } else   if ("rssexpanded".equals(c)) {    return BarcodeFormat.RSS_EXPANDED;  } else   if ("upca".equals(c)) {    return BarcodeFormat.UPC_A;  } else   if ("upceanextension".equals(c)) {    return BarcodeFormat.UPC_EAN_EXTENSION;  } else {    android.util.Log.v("RCTCamera","Unsupported code.. [" + c + "]");    return null;  }}  }
class C{  public static int[][] add(int[][] input1,int[][] input2) throws Exception {  int rows=input1.length;  int columns=input1[0].length;  if (input2.length != rows) {    throw new Exception("Row length of arrays are not equal");  }  if (input2[0].length != columns) {    throw new Exception("Column length of arrays are not equal");  }  int[][] returnValues=new int[rows][columns];  for (int r=0; r < rows; r++) {    for (int c=0; c < columns; c++) {      returnValues[r][c]=input1[r][c] + input2[r][c];    }  }  return returnValues;}  }
class C{  public void draw(Shape s){  System.out.println("draw(Shape)");}  }
class C{  static void tick(){  if (Timings.isTimingsEnabled()) {    boolean violated=Timings.fullServerTickTimer.isViolated();    for (    Timing timing : TIMINGS) {      if (timing.isSpecial()) {        continue;      }      timing.tick(violated);    }    TimingsHistory.playerTicks+=Server.getInstance().getOnlinePlayers().size();    TimingsHistory.timedTicks++;  }}  }
class C{  public void remove(){  src.remove();}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;  }}  }
class C{  public int sceKernelPollSema(int semaid,int signal){  if (signal <= 0) {    log.warn(String.format("sceKernelPollSema id=0x%X, signal=%d: bad signal",semaid,signal));    return ERROR_KERNEL_ILLEGAL_COUNT;  }  SceKernelSemaInfo sema=semaMap.get(semaid);  return hleKernelPollSema(sema,signal);}  }
class C{  private int allocateBPOneToOne() throws Exception {  int count=0;  for (int p=0; p < m_payments.length; p++) {    MPayment payment=m_payments[p];    if (payment.isAllocated())     continue;    BigDecimal allocatedAmt=payment.getAllocatedAmt();    log.info(payment + ", Allocated=" + allocatedAmt);    if (allocatedAmt != null && allocatedAmt.signum() != 0)     continue;    BigDecimal availableAmt=payment.getPayAmt().add(payment.getDiscountAmt()).add(payment.getWriteOffAmt()).add(payment.getOverUnderAmt());    if (!payment.isReceipt())     availableAmt=availableAmt.negate();    log.fine("Available=" + availableAmt);    for (int i=0; i < m_invoices.length; i++) {      MInvoice invoice=m_invoices[i];      if (invoice == null || invoice.isPaid())       continue;      if (payment.getC_Currency_ID() == invoice.getC_Currency_ID()) {        BigDecimal openAmt=invoice.getOpenAmt(true,null);        if (!invoice.isSOTrx())         openAmt=openAmt.negate();        BigDecimal difference=availableAmt.subtract(openAmt).abs();        log.fine(invoice + ", Open=" + openAmt+ " - Difference="+ difference);        if (difference.signum() == 0) {          Timestamp dateAcct=payment.getDateAcct();          if (invoice.getDateAcct().after(dateAcct))           dateAcct=invoice.getDateAcct();          if (!createAllocation(payment.getC_Currency_ID(),"1:1 (" + availableAmt + ")",dateAcct,availableAmt,null,null,null,invoice.getC_BPartner_ID(),payment.getC_Payment_ID(),invoice.getC_Invoice_ID(),invoice.getAD_Org_ID())) {            throw new AdempiereSystemError("Cannot create Allocation");          }          processAllocation();          count++;          m_invoices[i]=null;          m_payments[p]=null;          payment=null;          break;        }      } else {      }    }  }  return count;}  }
class C{  public void incExceptionsOccured(){  this.stats.incInt(exceptionsOccuredId,1);}  }
class C{  public static int missilesHit(int missiles,int nMod){  return Compute.missilesHit(missiles,nMod,false);}  }
class C{  private TXEntryState txWriteExistingEntry(final EntryEventImpl event,Object expectedOldValue) throws EntryNotFoundException {  assert !event.isExpiration();  final Object entryKey=event.getKey();  final LocalRegion region=event.getRegion();  final Operation op=event.getOperation();  TXEntryState tx=txReadEntry(event.getKeyInfo(),region,true,expectedOldValue,true);  assert tx != null;  if (tx.existsLocally()) {    final boolean invalidatingInvalidEntry=op.isInvalidate() && Token.isInvalid(tx.getValueInVM(entryKey));    if (!invalidatingInvalidEntry) {      tx.updateForWrite(nextModSerialNum());    }  } else   if (region.isProxy() && !op.isLocal() && !tx.hasOp()) {    tx.updateForWrite(nextModSerialNum());  } else {    throw new EntryNotFoundException(entryKey.toString());  }  return tx;}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  public static OFGroup createL3Interface(U32 id){  return OFGroup.of(0 | (id.getRaw() & 0x0FffFFff) | (OFDPAGroupType.L3_INTERFACE << 28));}  }
class C{  public void displayLineCount(final int linecount){  setCharPosition(null);  setLineNumber(linecount + 1);}  }
class C{  public static String stringForQuery(SQLiteDatabase db,String query,String[] selectionArgs){  SQLiteStatement prog=db.compileStatement(query);  try {    return stringForQuery(prog,selectionArgs);  }  finally {    prog.close();  }}  }
class C{  @Override public void paintComponent(Graphics g){  locations.clear();  g.setColor(background_color);  g.fillRect(0,0,getWidth(),getHeight());  g.setColor(foreground_color);  Graphics2D g2=(Graphics2D)g;  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  FontMetrics fontMetrics=g.getFontMetrics(FONT);  int fontHeight=fontMetrics.getHeight();  g.setFont(FONT);  int topTextY=fontMetrics.getAscent();  int vMargin=fontHeight + MARGIN;  int hMargin=MARGIN;  double width=getWidth() - hMargin * 2;  double height=getHeight() - vMargin * 2;  boolean drawLowerLine=height > -vMargin;  int nowTextX=0;  if (history != null && hoverEntry == -1) {    Integer viewers=history.get(endTime).getViewers();    long ago=System.currentTimeMillis() - endTime;    String text;    if (ago > CONSIDERED_AS_NOW) {      text="latest: " + Helper.formatViewerCount(viewers);    } else {      text="now: " + Helper.formatViewerCount(viewers);    }    if (viewers == -1) {      text="Stream offline";    }    nowTextX=getWidth() - fontMetrics.stringWidth(text);    g.drawString(text,nowTextX,topTextY);  }  if (history == null || history.size() < 2) {    String text="No viewer history yet";    int textWidth=fontMetrics.stringWidth(text);    int y=getHeight() / 2 + fontMetrics.getDescent();    int x=(getWidth() - textWidth) / 2;    boolean drawInfoText=false;    if (history != null && y < topTextY + fontHeight + 4 && x + textWidth + 7 > nowTextX) {      if (drawLowerLine || nowTextX > textWidth + 5) {        if (drawLowerLine) {          y=getHeight() - 2;        } else {          y=topTextY;        }        x=0;        drawInfoText=true;      }    } else {      drawInfoText=true;    }    if (drawInfoText) {      g.drawString(text,x,y);    }    return;  }  String maxValueText="max: " + Helper.formatViewerCount(maxValue);  int maxValueEnd=fontMetrics.stringWidth(maxValueText);  boolean displayMaxValue=true;  if (hoverEntry != -1) {    Integer viewers=history.get(hoverEntry).getViewers();    Date d=new Date(hoverEntry);    String text="Viewers: " + Helper.formatViewerCount(viewers) + " ("+ sdf.format(d)+ ")";    if (viewers == -1) {      text="Stream offline (" + sdf.format(d) + ")";    }    int x=getWidth() - fontMetrics.stringWidth(text);    if (maxValueEnd > x) {      displayMaxValue=false;    }    g.drawString(text,x,topTextY);  }  String minText="min: " + Helper.formatViewerCount(minValue);  int minTextWidth=fontMetrics.stringWidth(minText);  if (drawLowerLine) {    String timeText=makeTimesText(startTime,endTime);    int timeTextWidth=fontMetrics.stringWidth(timeText);    int textX=getWidth() - timeTextWidth;    g.drawString(timeText,textX,getHeight() - 1);    if (minValue >= 1000 && timeTextWidth + minTextWidth > width) {      minText="min: " + minValue / 1000 + "k";    }  }  if (isShowingInfo()) {    if (displayMaxValue) {      g.drawString(maxValueText,0,topTextY);    }    if (drawLowerLine) {      g.drawString(minText,0,getHeight() - 1);    } else     if (maxValueEnd + minTextWidth + 29 < nowTextX) {      g.drawString(minText,maxValueEnd + 10,topTextY);    }  }  if (height < 5) {    return;  }  int range=maxValue - minValue;  if (showFullRange) {    range=maxValue;  }  if (range == 0) {    range=1;  }  double pixelPerViewer=height / range;  double pixelPerTime=width / duration;  int prevX=-1;  int prevY=-1;  Iterator<Entry<Long,StreamInfoHistoryItem>> it=history.entrySet().iterator();  while (it.hasNext()) {    Entry<Long,StreamInfoHistoryItem> entry=it.next();    long time=entry.getKey();    if (time < startTime || time > endTime) {      continue;    }    long offsetTime=time - startTime;    int viewers=entry.getValue().getViewers();    if (viewers == -1) {      viewers=0;    }    int x=(int)(hMargin + offsetTime * pixelPerTime);    int y;    if (showFullRange) {      y=(int)(-vMargin + getHeight() - (viewers) * pixelPerViewer);    } else {      y=(int)(-vMargin + getHeight() - (viewers - minValue) * pixelPerViewer);    }    if (prevX != -1) {      g.drawLine(x,y,prevX,prevY);    }    prevX=x;    prevY=y;    locations.put(new Point(x,y),time);  }  for (  Point point : locations.keySet()) {    int x=point.x;    int y=point.y;    long seconds=locations.get(point);    StreamInfoHistoryItem historyObject=history.get(seconds);    if (seconds == hoverEntry) {      g.setColor(HOVER_COLOR);    } else {      if (!historyObject.isOnline()) {        g.setColor(OFFLINE_COLOR);      } else {        g.setColor(colors.get(seconds));      }    }    g.fillOval(x - POINT_SIZE / 2,y - POINT_SIZE / 2,POINT_SIZE,POINT_SIZE);  }}  }
class C{  public List<String> explainMismatch(Issue issue){  Objects.requireNonNull(issue);  List<String> result=new LinkedList<>();  for (  IssuePropertyMatcher propertyMatcher : propertyMatchers) {    if (!propertyMatcher.matches(issue))     result.add(propertyMatcher.getMessage(issue));  }  return result;}  }
class C{  private String generatePageSQLStatement(boolean tableExists,Map<String,Set<Integer>> dataSourceToUse){  StringBuffer output=new StringBuffer();  output.append("CREATE TABLE IF NOT EXISTS " + GeneratorConstants.TABLE_TPLID_PAGEID + " ("+ "templateId INTEGER UNSIGNED NOT NULL,"+ "pageId INTEGER UNSIGNED NOT NULL, UNIQUE(templateId, pageId));\r\n");  output.append(this.generateSQLStatementForDataInTable(dataSourceToUse,GeneratorConstants.TABLE_TPLID_PAGEID));  if (!tableExists) {    output.append("CREATE INDEX pageIdx ON " + GeneratorConstants.TABLE_TPLID_PAGEID + "(pageId);");    output.append("\r\n");  }  return output.toString();}  }
class C{  private ImageWriter lookupImageWriterForFormat(String imageFormat){  ImageWriter writer=null;  Iterator iter=ImageIO.getImageWritersByFormatName(imageFormat);  if (iter.hasNext()) {    writer=(ImageWriter)iter.next();  }  return writer;}  }
class C{  private void createVMs(Host host){  for (int i=0; i < 4; i++) {    vm[i]=host.getVM(i);  }}  }
class C{  GridResourceField(@NotNull Field field,@NotNull Annotation ann){  this.field=field;  this.ann=ann;  field.setAccessible(true);}  }
class C{  private static void savePgr(DispatchContext dctx,GenericValue pgr){  Map<String,GenericValue> context=UtilMisc.<String,GenericValue>toMap("paymentGatewayResponse",pgr);  LocalDispatcher dispatcher=dctx.getDispatcher();  Delegator delegator=dctx.getDelegator();  try {    dispatcher.addRollbackService("savePaymentGatewayResponse",context,true);    delegator.create(pgr);  } catch (  Exception e) {    Debug.logError(e,module);  }}  }
class C{  protected void onAddEditTextToDialogView(View dialogView,EditText editText){  ViewGroup container=(ViewGroup)dialogView.findViewById(com.android.internal.R.id.edittext_container);  if (container != null) {    container.addView(editText,ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);  }}  }
class C{  @Override public void sendRedirect(String location){  this.request.setAttribute(ATTR_KEY,location);}  }
class C{  @Override public void process(final DM dm,ReplyProcessor21 processor){  final boolean isDebugEnabled=logger.isTraceEnabled(LogMarker.DM);  final long startTime=getTimestamp();  if (isDebugEnabled) {    logger.trace(LogMarker.DM,"GetReplyMessage process invoking reply processor with processorId: {}",this.processorId);  }  if (processor == null) {    if (isDebugEnabled) {      logger.debug("GetReplyMessage processor not found");    }    return;  }  if (this.versionTag != null) {    this.versionTag.replaceNullIDs(this.getSender());  }  processor.process(this);  if (isDebugEnabled) {    logger.debug("{} Processed {}",processor,this);  }  dm.getStats().incReplyMessageTime(DistributionStats.getStatTime() - startTime);}  }
class C{  private VarSymbol enterConstant(String name,Type type){  VarSymbol c=new VarSymbol(PUBLIC | STATIC | FINAL,names.fromString(name),type,predefClass);  c.setData(type.constValue());  predefClass.members().enter(c);  return c;}  }
class C{  public synchronized StringBuffer reverse(){  reverse0();  return this;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void reindex(Connection conn) throws SQLException {  init(conn);  removeAllTriggers(conn,TRIGGER_PREFIX);  FullTextSettings setting=FullTextSettings.getInstance(conn);  setting.getWordList().clear();  Statement stat=conn.createStatement();  stat.execute("TRUNCATE TABLE " + SCHEMA + ".WORDS");  stat.execute("TRUNCATE TABLE " + SCHEMA + ".ROWS");  stat.execute("TRUNCATE TABLE " + SCHEMA + ".MAP");  ResultSet rs=stat.executeQuery("SELECT * FROM " + SCHEMA + ".INDEXES");  while (rs.next()) {    String schema=rs.getString("SCHEMA");    String table=rs.getString("TABLE");    createTrigger(conn,schema,table);    indexExistingRows(conn,schema,table);  }}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  IVariableBinding resolveField(FieldAccess fieldAccess){  return null;}  }
class C{  public ReporterTableAction(String actionName){  super(actionName);  if (reportManager == null) {    setEnabled(false);  }}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  mTerminalView.showContextMenu();  return false;}  }
class C{  public static RendererPreferences preparePreferences(GLPanel glPanel){  RendererPreferences result=new RendererPreferences(glPanel);  result.setPreferences();  IEclipsePreferences prefs=PreferencesIds.getInstanceNode();  prefs.addPreferenceChangeListener(result);  return result;}  }
class C{  private void emitDeserializerImpl(List<Type> expandedTypes,int depth,StringBuilder builder,String inVar,String outVar,String i){  Type type=expandedTypes.get(depth);  String childInVar=inVar + "_";  String childInVarIterator=childInVar + "_iterator";  String childOutVar=outVar + "_";  Class<?> rawClass=getRawClass(type);  if (isList(rawClass)) {    builder.append(i).append(getImplName(type,false)).append(" ").append(outVar).append(" = null;\n");    builder.append(i).append("if (").append(inVar).append(" != null && ").append(inVar).append(".isNull() == null) {\n");    builder.append(i).append("  ").append(outVar).append(" = new ").append(getImplName(type,true)).append("();\n");    builder.append(i).append("  for (int ").append(childInVarIterator).append(" = 0; ").append(childInVarIterator).append(" < ").append(inVar).append(".isArray().size(); ").append(childInVarIterator).append("++) {\n");    builder.append(i).append("    JSONValue ").append(childInVar).append(" = ").append(inVar).append(".isArray().get(").append(childInVarIterator).append(");\n");    emitDeserializerImpl(expandedTypes,depth + 1,builder,childInVar,childOutVar,i + "    ");    builder.append(i).append("    ").append(outVar).append(".add(").append(childOutVar).append(");\n");    builder.append(i).append("  }\n");    builder.append(i).append("}\n");  } else   if (isMap(rawClass)) {    String entryVar="key" + depth;    String entriesVar="keySet" + depth;    builder.append(i).append(getImplName(type,false)).append(" ").append(outVar).append(" = null;\n");    builder.append(i).append("if (").append(inVar).append(" != null && ").append(inVar).append(".isNull() == null) {\n");    builder.append(i).append("  ").append(outVar).append(" = new ").append(getImplName(type,true)).append("();\n");    builder.append(i).append("  java.util.Set<String> ").append(entriesVar).append(" = ").append(inVar).append(".isObject().keySet();\n");    builder.append(i).append("  for (String ").append(entryVar).append(" : ").append(entriesVar).append(") {\n");    builder.append(i).append("    JSONValue ").append(childInVar).append(" = ").append(inVar).append(".isObject().get(").append(entryVar).append(");\n");    emitDeserializerImpl(expandedTypes,depth + 1,builder,childInVar,childOutVar,i + "    ");    builder.append(i).append("    ").append(outVar).append(".put(").append(entryVar).append(", ").append(childOutVar).append(");\n");    builder.append(i).append("  }\n");    builder.append(i).append("}\n");  } else   if (rawClass.isEnum()) {    String primitiveName=rawClass.getCanonicalName();    builder.append(i).append(primitiveName).append(" ").append(outVar).append(" = ").append(primitiveName).append(".valueOf(").append(inVar).append(".isString().stringValue());\n");  } else   if (getEnclosingTemplate().isDtoInterface(rawClass)) {    String className=getImplName(rawClass,false);    builder.append(i).append(className).append(" ").append(outVar).append(" = ").append(getImplNameForDto(rawClass)).append(".fromJsonObject(").append(inVar).append(");\n");  } else   if (rawClass.equals(String.class)) {    String primitiveName=rawClass.getSimpleName();    builder.append(i).append(primitiveName).append(" ").append(outVar).append(" = ").append(inVar).append(".isString() != null ? ").append(inVar).append(".isString().stringValue() : null;\n");  } else   if (isNumber(rawClass)) {    String primitiveName=rawClass.getSimpleName();    String typeCast=rawClass.equals(double.class) || rawClass.equals(Double.class) ? "" : "(" + getPrimitiveName(rawClass) + ")";    if (rawClass.isPrimitive()) {      builder.append(i).append(primitiveName).append(" ").append(outVar).append(" = ").append(typeCast).append(inVar).append(".isNumber().doubleValue();\n");    } else {      if (isInteger(rawClass)) {        builder.append(i).append(primitiveName).append(" ").append(outVar).append(" = ").append(inVar).append(".isNumber() != null ? ((Double)").append(inVar).append(".isNumber().doubleValue()).intValue() : null;\n");      } else       if (isFloat(rawClass)) {        builder.append(i).append(primitiveName).append(" ").append(outVar).append(" = ").append(inVar).append(".isNumber() != null ? ((Double)").append(inVar).append(".isNumber().doubleValue()).floatValue() : null;\n");      } else       if (isLong(rawClass)) {        builder.append(i).append(primitiveName).append(" ").append(outVar).append(" = ").append(inVar).append(".isNumber() != null ? ((Double)").append(inVar).append(".isNumber().doubleValue()).longValue() : null;\n");      } else       if (isDouble(rawClass)) {        builder.append(i).append(primitiveName).append(" ").append(outVar).append(" = ").append(inVar).append(".isNumber() != null ? ((Double)").append(inVar).append(".isNumber().doubleValue()).doubleValue() : null;\n");      }    }  } else   if (isBoolean(rawClass)) {    String primitiveName=rawClass.getSimpleName();    if (rawClass.isPrimitive()) {      builder.append(i).append(primitiveName).append(" ").append(outVar).append(" = ").append(inVar).append(".isBoolean().booleanValue();\n");    } else {      builder.append(i).append(primitiveName).append(" ").append(outVar).append(" = ").append(inVar).append(".isBoolean() != null ? ").append(inVar).append(".isBoolean().booleanValue() : null;\n");    }  } else   if (isAny(rawClass)) {    builder.append(i).append("JSONValue ").append(outVar).append(" = ");    appendCopyJsonExpression(inVar,builder).append(";\n");  } else {    final Class<?> dtoImplementation=getEnclosingTemplate().getDtoImplementation(rawClass);    if (dtoImplementation != null) {      String className=getImplName(rawClass,false);      builder.append(i).append(className).append(" ").append(outVar).append(" = ").append(dtoImplementation.getCanonicalName()).append(".fromJsonObject(").append(inVar).append(");\n");    } else {      throw new IllegalArgumentException("Unable to generate client implementation for DTO interface " + getDtoInterface().getCanonicalName() + ". Type "+ rawClass+ " is not allowed to use in DTO interface.");    }  }}  }
class C{  public ImageWarp(BufferedImage bi,GeoCoordTransformation transform,WorldFile worldFile){  if (bi != null) {    iwidth=bi.getWidth();    iheight=bi.getHeight();    setGeoTrans(transform);    setImageBounds(worldFile);    pixels=getPixels(bi,0,0,iwidth,iheight);    bi=null;  }}  }
class C{  public BoxDataSet(BoxDataSet dataSet){  name=dataSet.name;  variables=new LinkedList<>(dataSet.variables);  dataBox=dataSet.dataBox.copy();  selection=new HashSet<>(dataSet.selection);  multipliers=new HashMap<>(dataSet.multipliers);  knowledge=dataSet.knowledge.copy();}  }
class C{  public ExporterException(final String msg){  super(msg);}  }
class C{  void newbuf(){  if (toCopy != null) {    throw new RuntimeException("BUG: Invalid newbuf() before copy()");  }  LengthRecordNode temp=new LengthRecordNode();  temp.currentMessage=mMessage;  temp.currentPosition=mPosition;  temp.next=stack;  stack=temp;  stackSize=stackSize + 1;  mMessage=new ByteArrayOutputStream();  mPosition=0;}  }
class C{  public SaveFileAction(Application app,@Nullable View view){  this(app,view,false);}  }
class C{  public BlockParams(){  this.translateX=0.0;  this.translateY=0.0;  this.generateEntities=false;}  }
class C{  public Response onCommand(SMTPSession session,Request request){  return NOT_SUPPORTED;}  }
class C{  public String toString(){  return "TAG_End";}  }
class C{  public static boolean isTargetTag(final Component source){  if (source instanceof DragAndDropWrapper) {    final String wrapperData=((DragAndDropWrapper)source).getData().toString();    final String id=wrapperData.replace(SPUIDefinitions.TARGET_TAG_BUTTON,"");    if (wrapperData.contains(SPUIDefinitions.TARGET_TAG_BUTTON) && !id.trim().isEmpty()) {      return true;    }  }  return false;}  }
class C{  public MutablePair(final L left,final R right){  super();  this.left=left;  this.right=right;}  }
class C{  public PluginValidationException(String msg,String rmtMsg,UUID nodeId){  super(msg);  this.nodeId=nodeId;  this.rmtMsg=rmtMsg;}  }
class C{  public IMultiPoint nearest(IMultiPoint target){  OneHelperKDNode top=((OneHelperKDNode)getRoot());  if (top == null || target == null)   return null;  DimensionalNode parent=parent(target);  IMultiPoint result=parent.point;  double smallest=target.distance(result);  double best[]=new double[]{smallest};  double raw[]=target.raw();  IMultiPoint betterOne=top.nearest(raw,best);  if (betterOne != null) {    return betterOne;  }  return result;}  }
class C{  private void executeMove(@NonNull DecoEvent event){  if ((event.getEventType() != DecoEvent.EventType.EVENT_MOVE) && (event.getEventType() != DecoEvent.EventType.EVENT_COLOR_CHANGE)) {    return;  }  if (mChartSeries != null) {    if (mChartSeries.size() <= event.getIndexPosition()) {      throw new IllegalArgumentException("Invalid index: Position out of range (Index: " + event.getIndexPosition() + " Series Count: "+ mChartSeries.size()+ ")");    }    final int index=event.getIndexPosition();    if (index >= 0 && index < mChartSeries.size()) {      ChartSeries item=mChartSeries.get(event.getIndexPosition());      if (event.getEventType() == DecoEvent.EventType.EVENT_COLOR_CHANGE) {        item.startAnimateColorChange(event);      } else {        item.startAnimateMove(event);      }    } else {      Log.e(TAG,"Ignoring move request: Invalid array index. Index: " + index + " Size: "+ mChartSeries.size());    }  }}  }
class C{  public boolean hasLinkedFromUrl(){  return hasValue();}  }
class C{  public String toString(){  return "fp=" + filePosition + ", bs="+ bufferStart+ ", de="+ dataEnd+ ", ds="+ dataSize+ ", bl="+ buffer.length+ ", readonly="+ readonly+ ", bm="+ bufferModified;}  }
class C{  private Builder read(Schema schema,Instance value) throws Exception {  Instantiator creator=schema.getInstantiator();  if (creator.isDefault()) {    return new Builder(this,criteria,schema,value);  }  return new Injector(this,criteria,schema,value);}  }
class C{  private ProtocolInfo readProtocol(InputStream input) throws IOException {  return mapper.readValue(input,ProtocolInfo.class);}  }
class C{  public StringBuilder prefixes(StringBuilder query){  query.append("PREFIX wdata: <").append(entityData).append(">\n");  query.append("PREFIX wd: <").append(entity).append(">\n");  query.append("PREFIX wds: <").append(statement).append(">\n");  query.append("PREFIX wdv: <").append(value).append(">\n");  query.append("PREFIX wdref: <").append(reference).append(">\n");  for (  PropertyType p : PropertyType.values()) {    query.append("PREFIX ").append(p.prefix()).append(": <").append(prop).append(p.suffix()).append(">\n");  }  return query;}  }
class C{  public static boolean hasNBT(int id){switch (id) {case 54:case 130:case 142:case 27:case 137:case 52:case 154:case 84:case 25:case 144:case 138:case 176:case 177:case 63:case 119:case 68:case 323:case 117:case 116:case 28:case 66:case 157:case 61:case 62:case 140:case 146:case 149:case 150:case 158:case 23:case 123:case 124:case 29:case 33:case 151:case 178:case 210:case 211:    return true;default :  return false;}}  }
class C{  public OFHello(){  super();  this.type=OFType.HELLO;  this.length=U16.t(MINIMUM_LENGTH);}  }
class C{  public static <FF extends FileFormat>Optional<FF> matchFileName(String fileName,Iterable<FF> fileFormats){  int lastPathSepIdx=Math.max(fileName.lastIndexOf('/'),fileName.lastIndexOf('\\'));  if (lastPathSepIdx >= 0) {    fileName=fileName.substring(lastPathSepIdx + 1);  }  int dotIdx;  while ((dotIdx=fileName.lastIndexOf('.')) >= 0) {    String ext=fileName.substring(dotIdx + 1);    for (    FF fileFormat : fileFormats) {      if (fileFormat.hasDefaultFileExtension(ext)) {        return Optional.of(fileFormat);      }    }    for (    FF fileFormat : fileFormats) {      if (fileFormat.hasFileExtension(ext)) {        return Optional.of(fileFormat);      }    }    fileName=fileName.substring(0,dotIdx);  }  return Optional.empty();}  }
class C{  public ParameterizedHashMap(int initialCapacity,Equality keyEquality){  this(initialCapacity,DEFAULT_LOAD_FACTOR,keyEquality);}  }
class C{  public static ITypeBinding normalizeForDeclarationUse(ITypeBinding binding,AST ast){  if (binding.isNullType())   return ast.resolveWellKnownType("java.lang.Object");  if (binding.isPrimitive())   return binding;  binding=normalizeTypeBinding(binding);  if (binding == null || !binding.isWildcardType())   return binding;  ITypeBinding bound=binding.getBound();  if (bound == null || !binding.isUpperbound()) {    ITypeBinding[] typeBounds=binding.getTypeBounds();    if (typeBounds.length > 0) {      return typeBounds[0];    } else {      return binding.getErasure();    }  } else {    return bound;  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void awaitAcks() throws IOException {  try {    igfsCtx.data().awaitAllAcksReceived(fileInfo.id());  } catch (  IgniteCheckedException e) {    throw new IOException("Failed to wait for flush acknowledge: " + fileInfo.id,e);  }}  }
class C{  public AccessTokenUnavailableException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  private void namespace(Detail detail) throws Exception {  NamespaceList scope=detail.getNamespaceList();  Namespace namespace=detail.getNamespace();  if (namespace != null) {    decorator.add(namespace);  }  if (scope != null) {    Namespace[] list=scope.value();    for (    Namespace name : list) {      decorator.add(name);    }  }}  }
class C{  private E dequeue(){  int n=size - 1;  if (n < 0)   return null; else {    Object[] array=queue;    E result=(E)array[0];    E x=(E)array[n];    array[n]=null;    Comparator<? super E> cmp=comparator;    if (cmp == null)     siftDownComparable(0,x,array,n); else     siftDownUsingComparator(0,x,array,n,cmp);    size=n;    return result;  }}  }
class C{  public EmpiricalMeasurementDistribution(double[] distribution,double actualValue){  super(actualValue,0);  this.distribution=distribution;  int countWhereActualIsNotGreater=0;  for (int i=0; i < distribution.length; i++) {    if (distribution[i] >= actualValue) {      countWhereActualIsNotGreater++;    }  }  pValue=(double)countWhereActualIsNotGreater / (double)distribution.length;}  }
class C{  public static byte parseByte(final byte[] b,final int off){  final int size=1;  final int len=b.length - off;  if (len >= size) {    return b[off];  } else {    throw new ParseException("Not enough bytes to parse a byte.");  }}  }
class C{  private RE concat(RE x,RE y){  if (rec == Recursion.RIGHT) {    return x.concat(y);  } else {    return y.concat(x);  }}  }
class C{  public boolean updateEntry(int i,File file){  if (file == null) {    log.warning("No File");    return false;  }  if (!file.exists() || file.isDirectory() || !file.canRead()) {    log.warning("not added - " + file + ", Exists="+ file.exists()+ ", Directory="+ file.isDirectory());    return false;  }  log.fine("updateEntry - " + file);  String name=file.getName();  byte[] data=null;  try {    FileInputStream fis=new FileInputStream(file);    ByteArrayOutputStream os=new ByteArrayOutputStream();    byte[] buffer=new byte[1024 * 8];    int length=-1;    while ((length=fis.read(buffer)) != -1)     os.write(buffer,0,length);    fis.close();    data=os.toByteArray();    os.close();  } catch (  IOException ioe) {    log.log(Level.SEVERE,"(file)",ioe);  }  return updateEntry(i,data);}  }
class C{  public boolean shouldRewriteQueryFromText(){  return 0 != (mSearchMode & SEARCH_MODE_QUERY_REWRITE_FROM_TEXT);}  }
class C{  public static String state(){  String value=_state;  _state="";  return value;}  }
class C{  public boolean checkForAttributeType(int attType){  int i=0;  while (i < m_Attributes.size()) {    if (attribute(i++).type() == attType) {      return true;    }  }  return false;}  }
class C{  public void removeAllTextures(){  for (  WeakReference<CCTexture2D> texSR : textures.values()) {    CCTexture2D tex=texSR.get();    if (tex != null)     tex.releaseTexture(CCDirector.gl);  }  textures.clear();}  }
class C{  public boolean shouldStartDownload(){  return startDownload;}  }
class C{  public synchronized void throwing(String sourceClass,String sourceMethod,Throwable thrown){  LogRecord record=new LogRecord(Level.FINER,"THROWN");  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  record.setThrown(thrown);  log(record);}  }
class C{  protected boolean beforeSave(boolean newRecord){  BigDecimal difference=getTargetQty();  difference=difference.subtract(getConfirmedQty());  difference=difference.subtract(getScrappedQty());  setDifferenceQty(difference);  return true;}  }
class C{  public void clear(){  this.size=0;}  }
class C{  private String toIndentedString(Object o){  if (o == null) {    return "null";  }  return o.toString().replace("\n","\n    ");}  }
class C{  @Override public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  public SpatialKey(long id,float... minMax){  this.id=id;  this.minMax=minMax;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  Item(final int index,final Item i){  this.index=index;  type=i.type;  intVal=i.intVal;  longVal=i.longVal;  strVal1=i.strVal1;  strVal2=i.strVal2;  strVal3=i.strVal3;  hashCode=i.hashCode;}  }
class C{  public static double vectorDistance(double[] vec1,double[] vec2,double power){  double oneOverPower=(power == 0 || power == 1.0 || power == 2.0) ? Double.NaN : 1.0 / power;  return vectorDistance(vec1,vec2,power,oneOverPower);}  }
class C{  @LogMessageDoc(level="ERROR",message="Tried to write OFFlowMod to {switch} but got {error}",explanation="An I/O error occured while trying to write a " + "static flow to a switch",recommendation=LogMessageDoc.CHECK_SWITCH) private void writeFlowModToSwitch(IOFSwitch sw,OFFlowMod flowMod){  try {    sw.write(flowMod,null);    sw.flush();  } catch (  IOException e) {    log.error("Tried to write OFFlowMod to {} but failed: {}",HexString.toHexString(sw.getId()),e.getMessage());  }}  }
class C{  public boolean hasAnyProtection(){  if (getRecoverPoint() != null || getContinuousCopies() != null || getSnapshots() != null || getRemoteCopies() != null) {    return true;  }  return false;}  }
class C{  public SwitchPreference(Context context){  this(context,null);}  }
class C{  public void focusGlobalField(){}  }
class C{  private void clean(){}  }
class C{  protected Instance convertInstance(Instance instance) throws Exception {  Instance result;  double[] newVals;  Instance tempInst;  double cumulative;  int i;  int j;  double tempval;  int numAttsLowerBound;  newVals=new double[m_OutputNumAtts];  tempInst=(Instance)instance.copy();  m_ReplaceMissingFilter.input(tempInst);  m_ReplaceMissingFilter.batchFinished();  tempInst=m_ReplaceMissingFilter.output();  m_NominalToBinaryFilter.input(tempInst);  m_NominalToBinaryFilter.batchFinished();  tempInst=m_NominalToBinaryFilter.output();  if (m_AttributeFilter != null) {    m_AttributeFilter.input(tempInst);    m_AttributeFilter.batchFinished();    tempInst=m_AttributeFilter.output();  }  if (!m_center) {    m_standardizeFilter.input(tempInst);    m_standardizeFilter.batchFinished();    tempInst=m_standardizeFilter.output();  } else {    m_centerFilter.input(tempInst);    m_centerFilter.batchFinished();    tempInst=m_centerFilter.output();  }  if (m_HasClass) {    newVals[m_OutputNumAtts - 1]=instance.value(instance.classIndex());  }  if (m_MaxAttributes > 0) {    numAttsLowerBound=m_NumAttribs - m_MaxAttributes;  } else {    numAttsLowerBound=0;  }  if (numAttsLowerBound < 0) {    numAttsLowerBound=0;  }  cumulative=0;  for (i=m_NumAttribs - 1; i >= numAttsLowerBound; i--) {    tempval=0.0;    for (j=0; j < m_NumAttribs; j++) {      tempval+=m_Eigenvectors[j][m_SortedEigens[i]] * tempInst.value(j);    }    newVals[m_NumAttribs - i - 1]=tempval;    cumulative+=m_Eigenvalues[m_SortedEigens[i]];    if ((cumulative / m_SumOfEigenValues) >= m_CoverVariance) {      break;    }  }  if (instance instanceof SparseInstance) {    result=new SparseInstance(instance.weight(),newVals);  } else {    result=new DenseInstance(instance.weight(),newVals);  }  return result;}  }
class C{  protected void addRedemptionsToCashflows(final List<Double> redemptions){  calculateNotionalsFromCashflows();  redemptions_.clear();  for (int i=1; i < notionalSchedule_.size(); ++i) {    final double R=i < redemptions.size() ? redemptions.get(i) : !redemptions.isEmpty() ? redemptions.get(redemptions.size() - 1) : 100.0;    final double amount=(R / 100.0) * (notionals_.get(i - 1) - notionals_.get(i));    final CashFlow redemption=new SimpleCashFlow(amount,notionalSchedule_.get(i));    cashflows_.add(redemption);    redemptions_.add(redemption);  }  Collections.sort(cashflows_,new EarlierThanCashFlowComparator());}  }
class C{  @Deprecated static public void updateState(String taskId,Workflow.StepState state,String message) throws WorkflowException {  WorkflowService.completerUpdateStep(taskId,state,message);}  }
class C{  public RedirectException(final String message){  super(message);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(fqName != null ? fqName : "");  return result.toString();}  }
class C{  public void addToFirst(E ent,double dist,int pos){  firstAssignments.add(new DistanceEntry<>(ent,dist,pos));}  }
class C{  public V put(K key,V value){  int hashCode=hash((key == null) ? NULL : key);  int index=hashIndex(hashCode,data.length);  HashEntry<K,V> entry=data[index];  while (entry != null) {    if (entry.hashCode == hashCode && isEqualKey(key,entry.getKey())) {      V oldValue=entry.getValue();      updateEntry(entry,value);      return oldValue;    }    entry=entry.next;  }  addMapping(index,hashCode,key,value);  return null;}  }
class C{  private static void validateBodyLoggingOverrideParamNotUsed(boolean enable,boolean local){  if (!getSoapBodyLoggingOverrideParameter(enable,local).isEmpty()) {    throw new IllegalStateException(getSoapBodyLoggingOverrideParameterName(enable,local) + " should not be used when " + SOAP_BODY_LOGGING_ENABLED+ " is "+ isSoapBodyLoggingEnabled());  }}  }
class C{  private void shutdown(){synchronized (mJobs) {    mProcessJobs=false;    mJobs.notifyAll();  }}  }
class C{  public int indexOf(AbstractOption option){  return options.indexOf(option);}  }
class C{  private LogUtil(){}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static void stop(Context context){  Intent intent=new Intent(context,EspPushService.class);  context.stopService(intent);}  }
class C{  protected void flush() throws IOException {  setFileLength();}  }
class C{  public void testDoConfigureSetsDefaultPort() throws Exception {  configuration.configure(container);  String config=configuration.getFileHandler().readTextFile(configuration.getHome() + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(configuration.getPropertyValue(ServletPropertySet.PORT),"//weblogic:listen-port",config);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("EntityType"))     p_EntityType=(String)para[i].getParameter(); else     if (name.equals("AllTables"))     p_AllTables="Y".equals(para[i].getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_AD_Table_ID=getRecord_ID();}  }
class C{  public static URI buildUri(String uri){  try {    return new URI(uri);  } catch (  Throwable e) {    Utils.log(Utils.class,Utils.class.getSimpleName(),Level.SEVERE,"Failure building uri %s: %s",uri,Utils.toString(e));  }  return null;}  }
class C{  public synchronized boolean delete() throws IOException {  close(false);  return nioFile.delete();}  }
class C{  public void publishError(Throwable t){  if (logger.isTraceEnabled()) {    logger.trace(this.state + " publishError: " + t);  }  this.state.get().publishError(this,t);}  }
class C{  public static void d(String msg,Throwable thr){  if (DEBUG)   Log.d(TAG,buildMessage(msg),thr);}  }
class C{  public ReplDBMSEvent filter(ReplDBMSEvent event) throws ReplicatorException, InterruptedException {  ArrayList<DBMSData> data=event.getData();  if (data == null)   return event;  for (Iterator<DBMSData> iterator=data.iterator(); iterator.hasNext(); ) {    DBMSData dataElem=iterator.next();    if (dataElem instanceof RowChangeData) {      RowChangeData rdata=(RowChangeData)dataElem;      for (Iterator<OneRowChange> iterator2=rdata.getRowChanges().iterator(); iterator2.hasNext(); ) {        OneRowChange orc=iterator2.next();        if (filterRowChange(orc.getSchemaName(),orc.getTableName(),orc.getAction())) {          iterator2.remove();        }      }      if (rdata.getRowChanges().isEmpty()) {        iterator.remove();      }    } else     if (dataElem instanceof StatementData) {      StatementData sdata=(StatementData)dataElem;      String schema=null;      String table=null;      int operation=-1;      Object parsingMetadata=sdata.getParsingMetadata();      if (parsingMetadata == null) {        String query=sdata.getQuery();        parsingMetadata=parser.match(query);        sdata.setParsingMetadata(parsingMetadata);      }      if (parsingMetadata != null && parsingMetadata instanceof SqlOperation) {        SqlOperation parsed=(SqlOperation)parsingMetadata;        schema=parsed.getSchema();        table=parsed.getName();        operation=parsed.getOperation();        if (logger.isDebugEnabled())         logger.debug("Parsing found schema = " + schema + " / table = "+ table);      }      if (schema == null)       schema=sdata.getDefaultSchema();      if (schema == null) {        if (logger.isDebugEnabled()) {          final String query=sdata.getQuery();          logger.warn("Ignoring query : No schema found for this query from event " + event.getSeqno() + logQuery(query));        }        continue;      }      if (table == null) {        if (logger.isDebugEnabled()) {          final String query=sdata.getQuery();          logger.warn("Ignoring query : No table found for this query from event " + event.getSeqno() + logQuery(query));        }        continue;      }      if (filterStatement(schema,table,operation)) {        iterator.remove();      }    }  }  if (event.getFragno() == 0 && event.getLastFrag() && data.isEmpty()) {    return null;  }  return event;}  }
class C{  private static Scriptable js_reverse(Context cx,Scriptable thisObj,Object[] args){  if (thisObj instanceof NativeArray) {    NativeArray na=(NativeArray)thisObj;    if (na.denseOnly) {      for (int i=0, j=((int)na.length) - 1; i < j; i++, j--) {        Object temp=na.dense[i];        na.dense[i]=na.dense[j];        na.dense[j]=temp;      }      return thisObj;    }  }  long len=getLengthProperty(cx,thisObj);  long half=len / 2;  for (long i=0; i < half; i++) {    long j=len - i - 1;    Object temp1=getElem(cx,thisObj,i);    Object temp2=getElem(cx,thisObj,j);    setElem(cx,thisObj,i,temp2);    setElem(cx,thisObj,j,temp1);  }  return thisObj;}  }
class C{  public boolean equals(Object other){  if (!(other instanceof TIntIntHashMap)) {    return false;  }  TIntIntHashMap that=(TIntIntHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure(that));}  }
class C{  public void updateDirty(){  dirtysteps++;  if (dirtysteps == Integer.MAX_VALUE) {    clearDirty();  }}  }
class C{  private void encounter(Person p1,Person p2){  p1.encounter(p2);  p2.encounter(p1);}  }
class C{  public static void postCollection(){  traceBusy=true;  findDeaths();  traceBusy=false;  trace.process();}  }
class C{  public static GracePeriod forBillingEvent(GracePeriodStatus type,BillingEvent.OneTime billingEvent){  return create(type,billingEvent.getBillingTime(),billingEvent.getClientId(),Key.create(billingEvent));}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  }  if (object instanceof Map) {    Map<?,?> map=(Map)object;    if (size() != map.size()) {      return false;    }    Set<Map.Entry<K,V>> set=entrySet();    return set.equals(map.entrySet());  }  return false;}  }
class C{  public static UiObjectMatcher withTextContaining(String text){  return withTextContaining(text,null);}  }
class C{  public void removeRange(int fromIndex,int toIndex){  if (fromIndex >= size || toIndex > size) {    throwException3(fromIndex,toIndex);  }  int moveCount=size - toIndex;  System.arraycopy(data,toIndex,data,fromIndex,moveCount);  size-=(toIndex - fromIndex);}  }
class C{  public synchronized void merge(Network network){  super.merge(network);  this.size=-1;}  }
class C{  @Override protected void doRun(){  Jython jython;  Class<?>[] classes;  Object[] params;  String argv;  String arg;  int i;  classes=new Class[]{String.class};  params=new Object[]{m_Owner.getFilename().getPath()};  argv="sys.argv = ['" + Utils.backQuoteChars(m_Owner.getFilename().getPath()) + "'";  for (i=0; i < getArgs().length; i++) {    arg=Utils.backQuoteChars(getArgs()[i]);    argv+=", '" + arg + "'";  }  argv+="]";  jython=new Jython();  jython.invoke("exec",new Class[]{String.class},new Object[]{"import sys"});  jython.invoke("exec",new Class[]{String.class},new Object[]{argv});  jython.invoke("execfile",classes,params);}  }
class C{  public double func(EvolutionState state,double[] xs,int benchmark) throws IllegalArgumentException {  double x=xs[0];  double y=(xs.length > 1 ? xs[1] : 0);  double z=(xs.length > 2 ? xs[2] : 0);switch (benchmark) {case KOZA1:    return x * x * x* x + x * x * x + x * x + x;case KOZA2:  return x * x * x* x* x - 2.0 * x * x* x + x;case KOZA3:return x * x * x* x* x* x - 2.0 * x * x* x* x + x * x;case NGUYEN1:return x * x * x + x * x + x;case NGUYEN2:return x * x * x* x + x * x * x + x * x + x;case NGUYEN3:return x * x * x* x* x + x * x * x* x + x * x * x + x * x + x;case NGUYEN4:return x * x * x* x* x* x + x * x * x* x* x + x * x * x* x + x * x * x + x * x + x;case NGUYEN5:return Math.sin(x * x) * Math.cos(x) - 1.0;case NGUYEN6:return Math.sin(x) + Math.sin(x * x + x);case NGUYEN7:return Math.log(x + 1) + Math.log(x * x + 1.0);case NGUYEN8:return Math.sqrt(x);case NGUYEN9:return Math.sin(x) + Math.sin(y * y);case NGUYEN10:return 2 * Math.sin(x) * Math.cos(y);case PAGIE1:return 1.0 / (1.0 + 1.0 / (x * x * x* x)) + 1.0 / (1.0 + 1.0 / (y * y * y* y));case PAGIE2:return 1.0 / (1.0 + 1.0 / (x * x * x* x)) + 1.0 / (1.0 + 1.0 / (y * y * y* y)) + 1.0 / (1.0 + 1.0 / (z * z * z* z));case KORNS1:return 1.57 + (24.3 * xs[3]);case KORNS2:return 0.23 + (14.2 * ((xs[3] + xs[1]) / (3.0 * xs[4])));case KORNS3:return -5.41 + (4.9 * (((xs[3] - xs[0]) + (xs[1] / xs[4])) / (3 * xs[4])));case KORNS4:return -2.3 + (0.13 * Math.sin(xs[2]));case KORNS5:return 3.0 + (2.13 * Math.log(xs[4]));case KORNS6:return 1.3 + (0.13 * Math.sqrt(xs[0]));case KORNS7:return 213.80940889 - (213.80940889 * Math.exp(-0.54723748542 * xs[0]));case KORNS8:return 6.87 + (11.0 * Math.sqrt(7.23 * xs[0] * xs[3]* xs[4]));case KORNS9:return Math.sqrt(xs[0]) / Math.log(xs[1]) * Math.exp(xs[2]) / (xs[3] * xs[3]);case KORNS10:return 0.81 + (24.3 * (((2.0 * xs[1]) + (3.0 * (xs[2] * xs[2]))) / ((4.0 * (xs[3] * xs[3] * xs[3])) + (5.0 * (xs[4] * xs[4] * xs[4]* xs[4])))));case KORNS11:return 6.87 + (11.0 * Math.cos(7.23 * xs[0] * xs[0]* xs[0]));case KORNS12:return 2.0 - (2.1 * (Math.cos(9.8 * xs[0]) * Math.sin(1.3 * xs[4])));case KORNS13:return 32.0 - (3.0 * ((Math.tan(xs[0]) / Math.tan(xs[1])) * (Math.tan(xs[2]) / Math.tan(xs[3]))));case KORNS14:return 22.0 - (4.2 * ((Math.cos(xs[0]) - Math.tan(xs[1])) * (Math.tanh(xs[2]) / Math.sin(xs[3]))));case KORNS15:return 12.0 - (6.0 * ((Math.tan(xs[0]) / Math.exp(xs[1])) * (Math.log(xs[2]) - Math.tan(xs[3]))));case KEIJZER1:case KEIJZER2:case KEIJZER3:return 0.3 * x * Math.sin(2 * Math.PI * x);case KEIJZER4:return x * x * x* Math.exp(-x)* Math.cos(x)* Math.sin(x)* (Math.sin(x) * Math.sin(x) * Math.cos(x) - 1);case KEIJZER5:return (30.0 * x * z) / ((x - 10.0) * y * y);case KEIJZER6:{double sum=0;double fx=Math.floor(x);for (int i=1; i < fx + 1; i++) sum+=(1.0 / i);return sum;}case KEIJZER7:return Math.log(x);case KEIJZER8:return Math.sqrt(x);case KEIJZER9:return asinh(x);case KEIJZER10:return Math.pow(x,y);case KEIJZER11:return x * y + Math.sin((x - 1.0) * (y - 1.0));case KEIJZER12:return x * x * x* x - x * x * x + y * y / 2.0 - y;case KEIJZER13:return 6.0 * Math.sin(x) * Math.cos(y);case KEIJZER14:return 8.0 / (2.0 + x * x + y * y);case KEIJZER15:return x * x * x / 5.0 + y * y * y / 2.0 - y - x;case VLADISLAVLEVA1:return Math.exp(-(x - 1) * (x - 1)) / (1.2 + (y - 2.5) * (y - 2.5));case VLADISLAVLEVA2:return Math.exp(-x) * x * x* x* Math.cos(x)* Math.sin(x)* (Math.cos(x) * Math.sin(x) * Math.sin(x) - 1);case VLADISLAVLEVA3:return Math.exp(-x) * x * x* x* Math.cos(x)* Math.sin(x)* (Math.cos(x) * Math.sin(x) * Math.sin(x) - 1)* (y - 5);case VLADISLAVLEVA4:{double sum=0;for (int i=0; i < 5; i++) sum+=(xs[i] - 3) * (xs[i] - 3);return 10.0 / (5.0 + sum);}case VLADISLAVLEVA5:return (30.0 * (x - 1.0) * (z - 1.0)) / (y * y * (x - 10.0));case VLADISLAVLEVA6:return 6.0 * Math.sin(x) * Math.cos(y);case VLADISLAVLEVA7:return (x - 3.0) * (y - 3.0) + 2 * Math.sin((x - 4.0) * (y - 4.0));case VLADISLAVLEVA8:return ((x - 3.0) * (x - 3.0) * (x - 3.0)* (x - 3.0) + (y - 3.0) * (y - 3.0) * (y - 3.0) - (y - 3.0)) / ((y - 2.0) * (y - 2.0) * (y - 2.0)* (y - 2.0) + 10.0);default :throw new IllegalArgumentException("Invalid benchmark value " + benchmark);}}  }
class C{  public final void update(){  update((String)this.getSelectedItem());}  }
class C{  private static String readFile(String location) throws IOException {  FileInputStream is=new FileInputStream(new File(location));  BufferedReader br=new BufferedReader(new InputStreamReader(is));  StringBuffer fileContents=new StringBuffer();  String newLine=br.readLine();  while (newLine != null) {    fileContents.append(newLine);    fileContents.append("\r\n");    newLine=br.readLine();  }  br.close();  return fileContents.toString();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException {  if (length != DATA_LENGTH) {    throw new StunException("length invalid: " + length);  }  family=(char)(attributeValue[offset] & 0xff);  if (family != IPv4 && family != IPv6) {    throw new StunException("invalid family value: " + family);  }}  }
class C{  public SecP256K1DsaSigner(final KeyPair keyPair){  this.keyPair=keyPair;}  }
class C{  public boolean hasCategories(){  return super.hasElement(Category.KEY);}  }
class C{  public static PhotoGalleryFragment newInstance(){  PhotoGalleryFragment fragment=new PhotoGalleryFragment();  return fragment;}  }
class C{  private void onActionUp(MotionEvent event){  if (isDown) {    this.startX=0F;    this.startY=0F;    this.isDown=false;  }}  }
class C{  public static void FindToken(String token,Vector inputVec,IntPair curLoc,String errorMsg) throws ParseAlgorithmException {  boolean found=false;  while ((!found) && (curLoc.one < inputVec.size())) {    String curLine=GotoNextNonSpace(inputVec,curLoc);    if (curLine.substring(curLoc.two).startsWith(token)) {      int endLoc=curLoc.two + token.length();      if ((endLoc >= curLine.length()) || !(Character.isLetter(curLine.charAt(endLoc)) || (curLine.charAt(endLoc) == '_'))) {        found=true;        curLoc.two=endLoc;      }    }    curLoc.two=NextSpaceCol(curLine,curLoc.two);  }  if (!found) {    throw new ParseAlgorithmException(errorMsg);  }  ;  return;}  }
class C{  public static Date toDate(String datestring,String format){  return parse(datestring,format);}  }
class C{  public void indexLibrary(IPath path,URL indexURL,final boolean updateIndex){  IndexLocation indexFile=null;  if (indexURL != null) {    if (IS_MANAGING_PRODUCT_INDEXES_PROPERTY) {      indexFile=computeIndexLocation(path,indexURL);    } else {      indexFile=IndexLocation.createIndexLocation(indexURL);    }  }  IndexRequest request=null;  boolean forceIndexUpdate=IS_MANAGING_PRODUCT_INDEXES_PROPERTY && updateIndex;  request=new AddJarFileToIndex(path,indexFile,this,forceIndexUpdate,javaProject);  if (!isJobWaiting(request))   request(request);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node retval;  Node firstChild;  Node secondChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  textNode=doc.createTextNode("terday");  retval=titleAttr.appendChild(textNode);  textNode=doc.createTextNode("");  retval=titleAttr.appendChild(textNode);  ((Element)testNode).normalize();  value=titleAttr.getNodeValue();  assertEquals("attrNodeValue","Yesterday",value);  firstChild=titleAttr.getFirstChild();  value=firstChild.getNodeValue();  assertEquals("firstChildValue","Yesterday",value);  secondChild=firstChild.getNextSibling();  assertNull("secondChildIsNull",secondChild);}  }
class C{  public GPUImageBoxBlurFilter(){  this(1f);}  }
class C{  public int[] toArray(){  return codon.clone();}  }
class C{  private static void raiseOverflowException(Number number,Class<?> targetClass){  throw new IllegalArgumentException("Could not convert number [" + number + "] of type ["+ number.getClass().getName()+ "] to target class ["+ targetClass.getName()+ "]: overflow");}  }
class C{  private static String initialise(Token currentToken,int[][] expectedTokenSequences,String[] tokenImage){  String eol=System.getProperty("line.separator","\n");  StringBuffer expected=new StringBuffer();  int maxSize=0;  for (int i=0; i < expectedTokenSequences.length; i++) {    if (maxSize < expectedTokenSequences[i].length) {      maxSize=expectedTokenSequences[i].length;    }    for (int j=0; j < expectedTokenSequences[i].length; j++) {      expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');    }    if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {      expected.append("...");    }    expected.append(eol).append("    ");  }  String retval="Encountered \"";  Token tok=currentToken.next;  for (int i=0; i < maxSize; i++) {    if (i != 0)     retval+=" ";    if (tok.kind == 0) {      retval+=tokenImage[0];      break;    }    retval+=" " + tokenImage[tok.kind];    retval+=" \"";    retval+=add_escapes(tok.image);    retval+=" \"";    tok=tok.next;  }  retval+="\" at line " + currentToken.next.beginLine + ", column "+ currentToken.next.beginColumn;  retval+="." + eol;  if (expectedTokenSequences.length == 1) {    retval+="Was expecting:" + eol + "    ";  } else {    retval+="Was expecting one of:" + eol + "    ";  }  retval+=expected.toString();  return retval;}  }
class C{  public void processEvent(World world){}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof KeyedValues2DItemKey)) {    return false;  }  KeyedValues2DItemKey that=(KeyedValues2DItemKey)obj;  if (!this.rowKey.equals(that.rowKey)) {    return false;  }  if (!this.columnKey.equals(that.columnKey)) {    return false;  }  return true;}  }
class C{  public VersionException(String s){  super(s);}  }
class C{  public void handleSetTemperatureClick(int idx){  listener.onSetTemperatureClick(idx);}  }
class C{  public ListProcessesReply(final int packetId,final int errorCode,final ProcessList processList){  super(packetId,errorCode);  if (success()) {    Preconditions.checkNotNull(processList,"IE01062: Process list argument can not be null");  } else {    if (processList != null) {      throw new IllegalArgumentException("IE01063: Process list argument must be null");    }  }  this.processList=processList;}  }
class C{  protected int calcnCluster(){  return 1;}  }
class C{  protected void verprestamoExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  String codigo=((PrestamoForm)form).getId();  if (StringUtils.isEmpty(codigo))   codigo=(String)request.getParameter("idprestamo");  verprestamoCodeLogic(codigo,mapping,form,request,response);  saveCurrentInvocation(KeysClientsInvocations.SOLICITUDES_VER_PRESTAMO,request);}  }
class C{  private boolean contains(String[] names,String name){  assert name != null;  for (int i=0; i < names.length; i++) {    if (name.equals(names[i])) {      return true;    }  }  return false;}  }
class C{  public SoftwareModuleEvent(final BaseEntityEventType entityEventType,final SoftwareModule softwareModule){  super(entityEventType,softwareModule);}  }
class C{  public boolean isUsePersistentConnections(){  return usePersistentConnections;}  }
class C{  public static Date parseDateStrictly(final String str,final String... parsePatterns) throws ParseException {  return parseDateStrictly(str,null,parsePatterns);}  }
class C{  private void configureParent(){  EasyMock.expect(myView.getSelectedParent()).andReturn(getClassByName("Parent")).anyTimes();}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void play() throws CastException, TransientNetworkDisconnectionException, NoConnectionException {  play(null);}  }
class C{  private void animatePropertyBy(int constantName,float startValue,float byValue){  if (mAnimatorMap.size() > 0) {    Animator animatorToCancel=null;    Set<Animator> animatorSet=mAnimatorMap.keySet();    for (    Animator runningAnim : animatorSet) {      PropertyBundle bundle=mAnimatorMap.get(runningAnim);      if (bundle.cancel(constantName)) {        if (bundle.mPropertyMask == NONE) {          animatorToCancel=runningAnim;          break;        }      }    }    if (animatorToCancel != null) {      animatorToCancel.cancel();    }  }  NameValuesHolder nameValuePair=new NameValuesHolder(constantName,startValue,byValue);  mPendingAnimations.add(nameValuePair);  View v=mView.get();  if (v != null) {    v.removeCallbacks(mAnimationStarter);    v.post(mAnimationStarter);  }}  }
class C{  public void testUnsupportedCallbackException05(){  myCallback c=new myCallback();  assertNotNull("Callback object is null",c);  UnsupportedCallbackException ucE=new UnsupportedCallbackException(c,null);  assertNull("getMessage() must return null.",ucE.getMessage());  assertEquals("Incorrect callback object was returned",c,ucE.getCallback());}  }
class C{  public boolean contains(Key key){  if (key == null)   throw new NullPointerException("argument to contains() is null");  return get(key) != null;}  }
class C{  public GenericEntry retrieveAccountInfoRequest(String user,String requestId) throws AppsForYourDomainException, IOException, ServiceException {  URL url=new URL(BASE_URL + "account/" + domain+ "/"+ user+ "/"+ requestId);  return getEntry(url,GenericEntry.class);}  }
class C{  public void addCheckObject(RuleDescription object){  this.ruleDescriptions.add(object);}  }
class C{  public int endObject(){  if (vtable == null || !nested)   throw new AssertionError("FlatBuffers: endObject called without startObject");  addInt(0);  int vtableloc=offset();  for (int i=vtable_in_use - 1; i >= 0; i--) {    short off=(short)(vtable[i] != 0 ? vtableloc - vtable[i] : 0);    addShort(off);  }  final int standard_fields=2;  addShort((short)(vtableloc - object_start));  addShort((short)((vtable_in_use + standard_fields) * SIZEOF_SHORT));  int existing_vtable=0;  outer_loop:   for (int i=0; i < num_vtables; i++) {    int vt1=bb.capacity() - vtables[i];    int vt2=space;    short len=bb.getShort(vt1);    if (len == bb.getShort(vt2)) {      for (int j=SIZEOF_SHORT; j < len; j+=SIZEOF_SHORT) {        if (bb.getShort(vt1 + j) != bb.getShort(vt2 + j)) {          continue outer_loop;        }      }      existing_vtable=vtables[i];      break outer_loop;    }  }  if (existing_vtable != 0) {    space=bb.capacity() - vtableloc;    bb.putInt(space,existing_vtable - vtableloc);  } else {    if (num_vtables == vtables.length)     vtables=Arrays.copyOf(vtables,num_vtables * 2);    vtables[num_vtables++]=offset();    bb.putInt(bb.capacity() - vtableloc,offset() - vtableloc);  }  nested=false;  return vtableloc;}  }
class C{  public static RectF amendRectF(RectF rectF){  if (rectF.bottom - rectF.top < 1.0f && rectF.bottom > rectF.top) {    float centerY=rectF.centerY();    rectF.top=centerY - 0.5f;    rectF.bottom=centerY + 0.5f;  }  if (rectF.right - rectF.left < 1.0f && rectF.right > rectF.left) {    float centerX=rectF.centerX();    rectF.left=centerX - 0.5f;    rectF.right=centerX + 0.5f;  }  return rectF;}  }
class C{  public ReciprocalFloatFunction(ValueSource source,float m,float a,float b){  this.source=source;  this.m=m;  this.a=a;  this.b=b;}  }
class C{  public static void previousMonth(int year,int month,int[] previousDate){  if (month == 0) {    year--;    month=11;  } else {    month--;  }  previousDate[0]=year;  previousDate[1]=month;}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  setContentView(R.layout.main_activity);  mEditText=(EditText)findViewById(R.id.editText1);  mListView=(ListView)findViewById(R.id.listView1);  mAdapter=new AcronymDataArrayAdapter(this);  mListView.setAdapter(mAdapter);  super.onCreate(savedInstanceState,AcronymOps.class);}  }
class C{  public CoordinateSequenceComparator(){  dimensionLimit=Integer.MAX_VALUE;}  }
class C{  public Socks5Message(int cmd){  super(cmd,null,0);  data=new byte[3];  data[0]=SOCKS_VERSION;  data[1]=(byte)cmd;  data[2]=0;}  }
class C{  public UnixTerminal() throws IOException {  this(System.in,System.out,Charset.defaultCharset());}  }
class C{  public static <T extends AbstractBlockBase<T>>AbstractBlockBase<?>[] computeCodeEmittingOrder(int blockCount,T startBlock){  List<T> order=new ArrayList<>();  BitSet visitedBlocks=new BitSet(blockCount);  PriorityQueue<T> worklist=initializeWorklist(startBlock,visitedBlocks);  computeCodeEmittingOrder(order,worklist,visitedBlocks);  assert checkOrder(order,blockCount);  return order.toArray(new AbstractBlockBase<?>[0]);}  }
class C{  Node<E> findLast(){  Index<E> q=head;  for (; ; ) {    Index<E> d, r;    if ((r=q.right) != null) {      if (r.indexesDeletedNode()) {        q.unlink(r);        q=head;      } else       q=r;    } else     if ((d=q.down) != null) {      q=d;    } else {      Node<E> b=q.node;      Node<E> n=b.next;      for (; ; ) {        if (n == null)         return b.isBaseHeader() ? null : b;        Node<E> f=n.next;        if (n != b.next)         break;        Object v=n.value;        if (v == null) {          n.helpDelete(b,f);          break;        }        if (v == n || b.value == null)         break;        b=n;        n=f;      }      q=head;    }  }}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public Rectangle(Point center,double width,double height){  setRect(new Rect((int)(center.x - (width / 2)),(int)(center.y - (height / 2)),(int)width,(int)height));}  }
class C{  public void run(){  if (closed) {    return;  }  try {    sendSdesPacket();    boolean terminate=false;    while (!terminate) {      try {        Thread.sleep((long)rtcpSession.getReportInterval());        if ((rtcpSession.timeOfLastRTCPSent + rtcpSession.T) <= rtcpSession.currentTime()) {          if ((rtcpSession.isByeRequested && waitingForByeBackoff)) {            if (rtcpSession.timeOfLastRTCPSent > 0 && rtcpSession.timeOfLastRTPSent > 0) {              rtcpSession.getMySource().activeSender=false;              rtcpSession.timeOfLastRTCPSent=rtcpSession.currentTime();            } else {              terminate=true;            }          } else {            if (!closed) {              transmit(assembleRtcpPacket());              if (rtcpSession.isByeRequested && !waitingForByeBackoff) {                terminate=true;              } else {                rtcpSession.timeOfLastRTCPSent=rtcpSession.currentTime();              }            } else {              terminate=true;            }          }        }        waitingForByeBackoff=false;      } catch (      InterruptedException e) {        waitingForByeBackoff=true;        rtcpSession.isByeRequested=true;      }    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public ExtentTest error(String details){  log(Status.ERROR,details);  return this;}  }
class C{  public int offset(){  return offset;}  }
class C{  public static PieDataset createPieDatasetForRow(CategoryDataset dataset,Comparable rowKey){  int row=dataset.getRowIndex(rowKey);  return createPieDatasetForRow(dataset,row);}  }
class C{  public void init() throws ServletException {}  }
class C{  public void committed(CompositeTransaction tx){  removeTransaction(tx);}  }
class C{  public static <T>CopyOnWriteArrayList<T> copyOnWriteArrayList(){  return new CopyOnWriteArrayList<T>();}  }
class C{  public void startDocument() throws SAXException {  int doc=addNode(DTM.DOCUMENT_NODE,DTM.DOCUMENT_NODE,DTM.NULL,DTM.NULL,0,true);  m_parents.push(doc);  m_previous=DTM.NULL;  m_contextIndexes.push(m_prefixMappings.size());}  }
class C{  protected boolean authenticate(String user,String password){  return true;}  }
class C{  public void initialize(){  lightState=new LightState();  lightState.setGlobalAmbient(globalAmbientIntensity);  lightState.setEnabled(true);  headlight=new DirectionalLight();  headlight.setDiffuse(headlightIntensity);  headlight.setSpecular(new ColorRGBA(0.2f,0.2f,0.2f,1f));  headlight.setEnabled(headlightEnabled);  lightState.attach(headlight);  light=new DirectionalLightNode("Sol",azimuth,elevation,direction);  light.getLight().setAmbient(ambientIntensity);  light.getLight().setDiffuse(diffuseIntensity);}  }
class C{  public void addEmail(NgnEmail.EmailType type,String value,String description){  mEmails.add(new NgnEmail(type,value,description));}  }
class C{  static void accept(final AnnotationVisitor av,final String name,final Object value){  if (av != null) {    if (value instanceof String[]) {      String[] typeconst=(String[])value;      av.visitEnum(name,typeconst[0],typeconst[1]);    } else     if (value instanceof AnnotationNode) {      AnnotationNode an=(AnnotationNode)value;      an.accept(av.visitAnnotation(name,an.desc));    } else     if (value instanceof List) {      AnnotationVisitor v=av.visitArray(name);      List<?> array=(List<?>)value;      for (int j=0; j < array.size(); ++j) {        accept(v,null,array.get(j));      }      v.visitEnd();    } else {      av.visit(name,value);    }  }}  }
class C{  void updatedChannel(final StoredClientChannel channel){  log.info("Stored client channel {} was updated",channel.hashCode());  containingWallet.addOrUpdateExtension(this);}  }
class C{  public void testInvokeAll3() throws InterruptedException {  ExecutorService e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    List<Callable<String>> l=new ArrayList<Callable<String>>();    l.add(new StringTask());    l.add(null);    try {      e.invokeAll(l);      shouldThrow();    } catch (    NullPointerException success) {    }  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  public MapView(Context context,AttributeSet attrs){  this(context,attrs,com.android.internal.R.attr.mapViewStyle);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"move");  final String targetValue=instruction.getOperands().get(0).getRootNode().getChildren().get(0).getValue();  final String sourceValue=instruction.getOperands().get(1).getRootNode().getChildren().get(0).getValue();  final OperandSize dw=OperandSize.DWORD;  final long baseOffset=ReilHelpers.toReilAddress(instruction.getAddress()).toLong();  instructions.add(ReilHelpers.createStr(baseOffset,dw,sourceValue,dw,targetValue));}  }
class C{  public void pushMessage(Message message){  for (  IMessageListener listener : listeners) {    listener.pushMessage(message);  }}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  int previewFormat=configManager.getPreviewFormat();  String previewFormatString=configManager.getPreviewFormatString();switch (previewFormat) {case PixelFormat.YCbCr_420_SP:case PixelFormat.YCbCr_422_SP:    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());default :  if ("yuv420p".equals(previewFormatString)) {    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());  }}throw new IllegalArgumentException("Unsupported picture format: " + previewFormat + '/'+ previewFormatString);}  }
class C{  public boolean isEnforcePriceLimit(){  Object oo=get_Value(COLUMNNAME_EnforcePriceLimit);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public DefaultProcessingInstruction(Element parent,String target,String values){  super(target,values);  this.parent=parent;}  }
class C{  public String cardinalityTipText(){  return "The cardinality of the attributes, incl the class attribute.";}  }
class C{  public boolean isRequestAlreadyHooked(HttpServerRequest request){  String hooked=request.headers().get(HOOKED_HEADER);  return hooked != null ? hooked.equals("true") : false;}  }
class C{  public Entry<V> next(){  if (!hasNext)   throw new NoSuchElementException();  long[] keyTable=map.keyTable;  if (nextIndex == INDEX_ZERO) {    entry.key=0;    entry.value=map.zeroValue;  } else {    entry.key=keyTable[nextIndex];    entry.value=map.valueTable[nextIndex];  }  currentIndex=nextIndex;  findNextIndex();  return entry;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ConsensusMessage createAccept(int id,int epoch,byte[] value){  return new ConsensusMessage(ACCEPT,id,epoch,from,value);}  }
class C{  public void write(int b) throws IOException {  oneByte[0]=(byte)b;  if (streamCipher != null) {    out.write(streamCipher.returnByte((byte)b));  } else {    write(oneByte,0,1);  }}  }
class C{  protected static int hashString(final String string,final MpqHashType mpqHash){  final int offset=mpqHash.offset;  long seed1=0x7FED_7FEDL;  long seed2=0xEEEE_EEEEL;  int ch;  final int length=string.length();  for (int i=0; i < length; i++) {    ch=Character.toUpperCase(string.charAt(i));    seed1=CRYPT_TABLE[offset + ch] ^ ((seed1 + seed2) & 0xFFFF_FFFFL);    seed2=(ch + seed1 + seed2+ (seed2 << 5)+ 3) & 0xFFFF_FFFFL;  }  return (int)seed1;}  }
class C{  @Override public void disconnect(String scaleDownNodeID,boolean criticalError){  disconnect(criticalError);}  }
class C{  public void save(Bundle bundle){  Validate.notNull(bundle,"bundle");  SharedPreferences.Editor editor=cache.edit();  for (  String key : bundle.keySet()) {    try {      serializeKey(key,bundle,editor);    } catch (    JSONException e) {      Logger.log(LoggingBehavior.CACHE,Log.WARN,TAG,"Error processing value for key: '" + key + "' -- "+ e);      return;    }  }  boolean successfulCommit=editor.commit();  if (!successfulCommit) {    Logger.log(LoggingBehavior.CACHE,Log.WARN,TAG,"SharedPreferences.Editor.commit() was not successful");  }}  }
class C{  public void applyPreference(PreferenceClass preferenceValue,PreferenceChangeListener listener){  checkValues();  SharedPreferences.Editor editor=edit();  if (prefType.equals(Boolean.class)) {    editor.putBoolean(prefKey,preferenceValue == null ? false : (Boolean)preferenceValue);  } else   if (prefType.equals(Integer.class)) {    editor.putInt(prefKey,preferenceValue == null ? 0 : (Integer)preferenceValue);  } else   if (prefType.equals(Set.class)) {    editor.putStringSet(prefKey,(Set<String>)preferenceValue);  } else   if (prefType.equals(Float.class)) {    editor.putFloat(prefKey,preferenceValue == null ? 0.0f : (Float)preferenceValue);  } else   if (prefType.equals(Long.class)) {    editor.putLong(prefKey,preferenceValue == null ? 0l : (Long)preferenceValue);  } else   if (prefType.equals(String.class)) {    editor.putString(prefKey,((String)preferenceValue));  }  editor.apply();  if (listener != null) {    listener.onPreferenceChanged(prefKey,preferenceValue);  }}  }
class C{  protected void loadUrlRewriter(FilterConfig filterConfig) throws ServletException {  try {    loadUrlRewriterLocal();  } catch (  Throwable e) {    log.error(e);    throw new ServletException(e);  }}  }
class C{  @Override public void readFromNBT(NBTTagCompound tag){  super.readFromNBT(tag);  NBTTagCompound data=tag.getCompoundTag("IC2BasicSink");  energyStored=data.getDouble("energy");}  }
class C{  public static void main(String[] args){  runFileLoader(new MatlabLoader(),args);}  }
class C{  public boolean contains(Album p){synchronized (mAlbums) {    return mAlbums.contains(p);  }}  }
class C{  protected void appendConstant(final Object cst){  appendConstant(buf,cst);}  }
class C{  public void pointerHover(final int[] x,final int[] y){  if (impl.getCurrentForm() == null) {    return;  }  if (x.length == 1) {    addPointerEventWithTimestamp(POINTER_HOVER,x[0],y[0]);  } else {    addPointerEvent(POINTER_HOVER,x,y);  }}  }
class C{  public Size(int width,int height){  mWidth=width;  mHeight=height;}  }
class C{  protected int AxisName() throws javax.xml.transform.TransformerException {  Object val=Keywords.getAxisName(m_token);  if (null == val) {    error(XPATHErrorResources.ER_ILLEGAL_AXIS_NAME,new Object[]{m_token});  }  int axesType=((Integer)val).intValue();  appendOp(2,axesType);  return axesType;}  }
class C{  public JSONObject(String baseName,Locale locale) throws JSONException {  this();  ResourceBundle bundle=ResourceBundle.getBundle(baseName,locale,Thread.currentThread().getContextClassLoader());  Enumeration<String> keys=bundle.getKeys();  while (keys.hasMoreElements()) {    Object key=keys.nextElement();    if (key != null) {      String[] path=((String)key).split("\\.");      int last=path.length - 1;      JSONObject target=this;      for (int i=0; i < last; i+=1) {        String segment=path[i];        JSONObject nextTarget=target.optJSONObject(segment);        if (nextTarget == null) {          nextTarget=new JSONObject();          target.put(segment,nextTarget);        }        target=nextTarget;      }      target.put(path[last],bundle.getString((String)key));    }  }}  }
class C{  static Object doFloorMod(long x,long y){  try {    return Math.floorMod(x,y);  } catch (  ArithmeticException ae) {    return ae;  }}  }
class C{  public static void print(Context cx,Scriptable thisObj,Object[] args,Function funObj){  for (int i=0; i < args.length; i++) {    if (i > 0)     System.out.print(" ");    String s=Context.toString(args[i]);    System.out.print(s);  }  System.out.println();}  }
class C{  public CompositeComparator(Comparator[] cmp,boolean reverse){  this(cmp.length,reverse);  System.arraycopy(cmp,0,m_cmp,0,cmp.length);  m_size=cmp.length;}  }
class C{  public ValueComparator(Map<String,Double> base){  this.base=base;}  }
class C{  public void testSave() throws Exception {  System.out.println("save");  final File file=File.createTempFile("testconf",".xml");  final MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();  final ScanManagerMXBean manager=ScanManager.register(mbs);  try {    final ScanDirConfigMXBean instance=manager.createOtherConfigurationMBean("testSave",file.getAbsolutePath());    assertTrue(mbs.isRegistered(ScanManager.makeScanDirConfigName("testSave")));    final ScanManagerConfig bean=new ScanManagerConfig("testSave");    final DirectoryScannerConfig dir=new DirectoryScannerConfig("tmp");    dir.setRootDirectory(file.getParent());    bean.putScan(dir);    instance.setConfiguration(bean);    instance.save();    final ScanManagerConfig loaded=new XmlConfigUtils(file.getAbsolutePath()).readFromFile();    assertEquals(instance.getConfiguration(),loaded);    assertEquals(bean,loaded);    instance.getConfiguration().removeScan("tmp");    instance.save();    assertNotSame(loaded,instance.getConfiguration());    final ScanManagerConfig loaded2=new XmlConfigUtils(file.getAbsolutePath()).readFromFile();    assertEquals(instance.getConfiguration(),loaded2);  }  finally {    manager.close();    mbs.unregisterMBean(ScanManager.SCAN_MANAGER_NAME);  }  final ObjectName all=new ObjectName(ScanManager.SCAN_MANAGER_NAME.getDomain() + ":*");  assertEquals(0,mbs.queryNames(all,null).size());}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XNumber xnum=new XNumber((double)getCountOfContextNodeList(xctxt));  return xnum;}  }
class C{  public static Event convertToEvent(RecordableEvent event){  Event dbEvent=new Event();  dbEvent.setTimeInMillis(event.getTimestamp());  dbEvent.setEventType(event.getType());  dbEvent.setTenantId(event.getTenantId());  dbEvent.setProjectId(event.getProjectId());  dbEvent.setUserId(event.getUserId());  dbEvent.setVirtualPool(event.getVirtualPool());  dbEvent.setService(event.getService());  dbEvent.setResourceId(event.getResourceId());  dbEvent.setSeverity(event.getSeverity());  dbEvent.setDescription(event.getDescription());  dbEvent.setExtensions(event.getExtensions());  dbEvent.setEventId(event.getEventId());  dbEvent.setAlertType(event.getAlertType());  dbEvent.setRecordType(event.getRecordType());  dbEvent.setNativeGuid(event.getNativeGuid());  dbEvent.setOperationalStatusCodes(event.getOperationalStatusCodes());  dbEvent.setOperationalStatusDescriptions(event.getOperationalStatusDescriptions());  dbEvent.setEventSource(event.getSource());  return dbEvent;}  }
class C{  static final public boolean[] parseBoolean(int what[]){  boolean outgoing[]=new boolean[what.length];  for (int i=0; i < what.length; i++) {    outgoing[i]=(what[i] != 0);  }  return outgoing;}  }
class C{  public Model lookup(String name,int index){  ModelList list=get(name);  if (list != null) {    return list.lookup(index);  }  return null;}  }
class C{  public static TransportAddress applyXor(TransportAddress address,byte[] transactionID){  byte[] addressBytes=address.getAddressBytes();  char port=(char)address.getPort();  char portModifier=(char)((transactionID[0] << 8 & 0x0000FF00) | (transactionID[1] & 0x000000FF));  port^=portModifier;  for (int i=0; i < addressBytes.length; i++)   addressBytes[i]^=transactionID[i];  TransportAddress xoredAdd;  try {    xoredAdd=new TransportAddress(addressBytes,port,Transport.UDP);  } catch (  UnknownHostException e) {    throw new IllegalArgumentException(e);  }  return xoredAdd;}  }
class C{  public static RestorableSupport newRestorableSupport(){  return newRestorableSupport(DEFAULT_DOCUMENT_ELEMENT_TAG_NAME);}  }
class C{  protected Instances modifyHeader(Instances instanceInfo){  instanceInfo=new Instances(getInputFormat(),0);  Attribute oldAtt=instanceInfo.attribute(m_AttIndex.getIndex());  int[] selection=new int[m_Values.size()];  Iterator<String> iter=m_Values.iterator();  int i=0;  while (iter.hasNext()) {    selection[i]=oldAtt.indexOfValue(iter.next().toString());    i++;  }  ArrayList<String> newVals=new ArrayList<String>();  for (i=0; i < selection.length; i++) {    newVals.add(oldAtt.value(selection[i]));  }  Attribute newAtt=new Attribute(oldAtt.name(),newVals);  newAtt.setWeight(oldAtt.weight());  instanceInfo.replaceAttributeAt(newAtt,m_AttIndex.getIndex());  m_NominalMapping=new int[oldAtt.numValues()];  for (i=0; i < m_NominalMapping.length; i++) {    boolean found=false;    for (int j=0; j < selection.length; j++) {      if (selection[j] == i) {        m_NominalMapping[i]=j;        found=true;        break;      }    }    if (!found) {      m_NominalMapping[i]=-1;    }  }  return instanceInfo;}  }
class C{  private void initfromRootBlock(final IRootBlockView rb) throws IOException {  assert (rb != null);  m_storeUUID=rb.getUUID();  if (rb.getNextOffset() == 0) {    defaultInit();  } else {    final long nxtOffset=rb.getNextOffset();    m_nextAllocation=-(int)(nxtOffset >> 32);    if (m_nextAllocation == 0) {      m_nextAllocation=-(1 + META_ALLOCATION);    }    m_committedNextAllocation=m_nextAllocation;    m_metaBitsAddr=-(int)nxtOffset;    if (log.isInfoEnabled()) {      log.info("MetaBitsAddr: " + m_metaBitsAddr);    }{      final long metaAddr=rb.getMetaStartAddr();      m_fileSize=(int)-(metaAddr & 0xFFFFFFFF);      if (log.isInfoEnabled())       log.info("InitFromRootBlock m_fileSize: " + convertAddr(m_fileSize));    }    long rawmbaddr=rb.getMetaBitsAddr();    final int metaBitsStore=(int)(rawmbaddr & 0xFFFF);    if (metaBitsStore > 0) {      rawmbaddr>>=16;      final byte[] buf=new byte[metaBitsStore * 4];      FileChannelUtility.readAll(m_reopener,ByteBuffer.wrap(buf),rawmbaddr);      final DataInputStream strBuf=new DataInputStream(new ByteArrayInputStream(buf));      final int storeVersion=strBuf.readInt();switch ((storeVersion & 0xFF00)) {case (cVersion & 0xFF00):case (cVersionDemispace & 0xFF00):        break;default :      throw new IllegalStateException("Incompatible RWStore header version: storeVersion=" + storeVersion + ", cVersion="+ cVersion+ ", demispace: "+ isUsingDemiSpace());  }  m_lastDeferredReleaseTime=strBuf.readLong();  if (strBuf.readInt() != cDefaultMetaBitsSize) {    throw new IllegalStateException("Store opened with unsupported metabits size");  }  final int allocBlocks=strBuf.readInt();  m_storageStatsAddr=strBuf.readLong();  for (int i=0; i < cReservedMetaBits; i++) {    strBuf.readInt();  }  m_allocSizes=new int[allocBlocks];  for (int i=0; i < allocBlocks; i++) {    m_allocSizes[i]=strBuf.readInt();  }  m_metaBitsSize=metaBitsStore - allocBlocks - cMetaHdrFields;  m_metaBits=new int[m_metaBitsSize];  if (log.isInfoEnabled()) {    log.info("Raw MetaBitsAddr: " + rawmbaddr);  }  for (int i=0; i < m_metaBitsSize; i++) {    m_metaBits[i]=strBuf.readInt();  }  syncMetaTransients();  final int numFixed=m_allocSizes.length;  m_freeFixed=new ArrayList[numFixed];  for (int i=0; i < numFixed; i++) {    m_freeFixed[i]=new ArrayList<FixedAllocator>();  }  checkCoreAllocations();  readAllocationBlocks();}if (log.isInfoEnabled()) log.info("restored from RootBlock: " + m_nextAllocation + ", "+ m_metaBitsAddr);}}  }
class C{  public WarrantyAction(){  super("Warranty");}  }
class C{  public Escaper toEscaper(){  return new CharArrayDecorator(toArray());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  EPG.getInstance().setAutodial(evalBool(stack.pop()));  return null;}  }
class C{  public static void onClick(Activity activity,View img,String videoId,int position){  if (activity != null) {    FragmentManager fragmentManager=activity.getFragmentManager();    YoutubeOverlayFragment yt=(YoutubeOverlayFragment)fragmentManager.findFragmentByTag(YoutubeOverlayFragment.class.getName());    if (yt != null) {      yt.onClick(img,videoId,position);    }  }}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){  if (item.getItemId() == android.R.id.home)   return containerAsHandlesBack.onBackPressed();  return super.onOptionsItemSelected(item);}  }
class C{  public void updateText(int x,int y,String stuff,String font,int justify,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkText.write(x,y,stuff,font,justify,properties,link.dos);}  }
class C{  protected BlockImpl(){  super();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:02.452 -0500",hash_original_method="748B8AADFB217AB8F29DF7ED1C81D966",hash_generated_method="0B4E66181B796C9630F40375F7787CCF") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) public int data() throws IOException {  return sendCommand(SMTPCommand.DATA);}  }
class C{  public String executeCommand(String command) throws IOException {  command=command.endsWith("\r\n") ? command : (command + "\r\n");  byte b[]=command.getBytes(Sage.BYTE_CHARSET);  return executeCommand(b,0,b.length);}  }
class C{  public void explain(boolean explain){  this.explain=explain;}  }
class C{  public static void newrelease(final Player player){}  }
class C{  public static DigestAlgorithm forXML(final String xmlName,final DigestAlgorithm defaultValue){  final DigestAlgorithm algorithm=Registry.XML_ALGORITHMS.get(xmlName);  if (algorithm == null) {    return defaultValue;  }  return algorithm;}  }
class C{  protected final void clearPositionCache(){  if (fCachedPositions != null) {    fCachedPositions=null;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:44.160 -0500",hash_original_method="579B4F5DF75F7C70B58361D381AB3677",hash_generated_method="B38ADA6C9E0B1F648A7D372DCFD6BAE1") public String buildUnionSubQuery(String typeDiscriminatorColumn,String[] unionColumns,Set<String> columnsPresentInTable,int computedColumnsOffset,String typeDiscriminatorValue,String selection,String groupBy,String having){  int unionColumnsCount=unionColumns.length;  String[] projectionIn=new String[unionColumnsCount];  for (int i=0; i < unionColumnsCount; i++) {    String unionColumn=unionColumns[i];    if (unionColumn.equals(typeDiscriminatorColumn)) {      projectionIn[i]="'" + typeDiscriminatorValue + "' AS "+ typeDiscriminatorColumn;    } else     if (i <= computedColumnsOffset || columnsPresentInTable.contains(unionColumn)) {      projectionIn[i]=unionColumn;    } else {      projectionIn[i]="NULL AS " + unionColumn;    }  }  return buildQuery(projectionIn,selection,groupBy,having,null,null);}  }
class C{  public void removeCheckConstraint(){  checkConstraint=null;  checkConstraintSQL=null;}  }
class C{  public static String join(String[] array,String separator){  int len=array.length;  if (len == 0) {    return "";  }  StringBuilder out=new StringBuilder();  out.append(array[0]);  for (int i=1; i < len; i++) {    out.append(separator).append(array[i]);  }  return out.toString();}  }
class C{  public static ExitState error(JavaCompiler comp){  if (hasCeylonCodegenErrors(comp)) {    return new ExitState(ERROR,CeylonState.BUG,comp.errorCount(),null,comp);  } else {    return new ExitState(ERROR,CeylonState.ERROR,comp.errorCount(),null);  }}  }
class C{  public ElideResponse delete(String path,String jsonApiDocument,Object opaqueUser){  return this.delete(path,jsonApiDocument,opaqueUser,SecurityMode.SECURITY_ACTIVE);}  }
class C{  private static Object[] createRemoveOptions(){  if (OSUtils.supportsTrash()) {    String trashLabel=OSUtils.isWindows() ? I18n.tr("Move to Recycle Bin") : I18n.tr("Move to Trash");    return new Object[]{trashLabel,I18n.tr("Delete"),I18n.tr("Cancel")};  } else {    return new Object[]{I18n.tr("Delete"),I18n.tr("Cancel")};  }}  }
class C{  public static <T extends Object & Comparable<? super T>>T min(Collection<? extends T> collection){  Iterator<? extends T> it=collection.iterator();  T min=it.next();  while (it.hasNext()) {    T next=it.next();    if (min.compareTo(next) > 0) {      min=next;    }  }  return min;}  }
class C{  public TypeRefAnnotationArgument createTypeRefAnnotationArgument(){  TypeRefAnnotationArgumentImpl typeRefAnnotationArgument=new TypeRefAnnotationArgumentImpl();  return typeRefAnnotationArgument;}  }
class C{  public boolean isLessThan(Hours other){  if (other == null) {    return getValue() < 0;  }  return getValue() < other.getValue();}  }
class C{  public void merge(Region r){  if (this.start == r.end + 1) {    this.start=r.start;  } else   if (this.end == r.start - 1) {    this.end=r.end;  } else {    throw new AssertionError("Ranges : Merge called on non contiguous values : [this]:" + this + " and "+ r);  }  updateAvailable();}  }
class C{  public XYLine3DRenderer(){  this.wallPaint=DEFAULT_WALL_PAINT;  this.xOffset=DEFAULT_X_OFFSET;  this.yOffset=DEFAULT_Y_OFFSET;}  }
class C{  public void emptyLine(){  out.println();  out.println("\t\t// -----------------------------------------------");  out.println();}  }
class C{  protected void addImpl(Component x,Object constraints,int index){  if (x.getParent() == this) {    return;  } else {    super.addImpl(x,constraints,index);  }}  }
class C{  public static boolean isXMLCharacter(int c){  return (((XML_CHARACTER[c >>> 5] & (1 << (c & 0x1F))) != 0) || (c >= 0x10000 && c <= 0x10ffff));}  }
class C{  public static String toJSONString(Object value){  if (value == null)   return "null";  if (value instanceof String)   return "\"" + escape((String)value) + "\"";  if (value instanceof Double) {    if (((Double)value).isInfinite() || ((Double)value).isNaN())     return "null"; else     return value.toString();  }  if (value instanceof Float) {    if (((Float)value).isInfinite() || ((Float)value).isNaN())     return "null"; else     return value.toString();  }  if (value instanceof Number)   return value.toString();  if (value instanceof Boolean)   return value.toString();  if ((value instanceof JSONAware))   return ((JSONAware)value).toJSONString();  if (value instanceof Map)   return JSONObject.toJSONString((Map)value);  if (value instanceof List)   return JSONArray.toJSONString((List)value);  return value.toString();}  }
class C{  public StandardXYZToolTipGenerator(){  this(DEFAULT_TOOL_TIP_FORMAT,NumberFormat.getNumberInstance(),NumberFormat.getNumberInstance(),NumberFormat.getNumberInstance());}  }
class C{  public synchronized long fileCount(){  return fileCount;}  }
class C{  public static void addIsNewVersionOfDOIRelatedIdentifier(@NotNull DataCiteMetadata metadata,@NotNull DOI replaced) throws InvalidMetadataException {  DataCiteMetadata.RelatedIdentifiers.RelatedIdentifier rid=FACTORY.createDataCiteMetadataRelatedIdentifiersRelatedIdentifier();  rid.setRelatedIdentifierType(RelatedIdentifierType.DOI);  rid.setValue(replaced.getDoiName());  rid.setRelationType(RelationType.IS_NEW_VERSION_OF);  metadata.getRelatedIdentifiers().getRelatedIdentifier().add(rid);}  }
class C{  public void testMoveToStringShortForm() throws ChessParseError {  String fen="r4rk1/2pn3p/2q1q1n1/8/2q2p2/6R1/p4PPP/1R4K1 b - - 0 1";  Position pos=TextIO.readFEN(fen);  assertEquals(fen,TextIO.toFEN(pos));  boolean longForm=false;  Move move=new Move(Position.getSquare(4,5),Position.getSquare(4,3),Piece.EMPTY);  String result=moveToString(pos,move,longForm);  assertEquals("Qee4",result);  move=new Move(Position.getSquare(2,5),Position.getSquare(4,3),Piece.EMPTY);  result=moveToString(pos,move,longForm);  assertEquals("Qc6e4",result);  move=new Move(Position.getSquare(2,3),Position.getSquare(4,3),Piece.EMPTY);  result=moveToString(pos,move,longForm);  assertEquals("Q4e4",result);  move=new Move(Position.getSquare(2,3),Position.getSquare(2,0),Piece.EMPTY);  result=moveToString(pos,move,longForm);  assertEquals("Qc1+",result);  move=new Move(Position.getSquare(0,1),Position.getSquare(0,0),Piece.BQUEEN);  result=moveToString(pos,move,longForm);  assertEquals("a1Q",result);  move=new Move(Position.getSquare(0,1),Position.getSquare(1,0),Piece.BQUEEN);  result=moveToString(pos,move,longForm);  assertEquals("axb1Q#",result);  move=new Move(Position.getSquare(0,1),Position.getSquare(1,0),Piece.BKNIGHT);  result=moveToString(pos,move,longForm);  assertEquals("axb1N",result);  move=new Move(Position.getSquare(3,6),Position.getSquare(4,4),Piece.EMPTY);  result=moveToString(pos,move,longForm);  assertEquals("Ne5",result);  move=new Move(Position.getSquare(7,6),Position.getSquare(7,4),Piece.EMPTY);  result=moveToString(pos,move,longForm);  assertEquals("h5",result);  move=new Move(Position.getSquare(5,7),Position.getSquare(3,7),Piece.EMPTY);  result=moveToString(pos,move,longForm);  assertEquals("Rfd8",result);}  }
class C{  public static void d(String tag,String msg,Throwable tr){  println(DEBUG,tag,msg,tr);}  }
class C{  protected void deleteDevice(Device device){  ArrayList<Entity> emptyToKeep=new ArrayList<Entity>();  for (  Entity entity : device.getEntities()) {    this.removeEntity(entity,device.getEntityClass(),device.getDeviceKey(),emptyToKeep);  }  if (!deviceMap.remove(device.getDeviceKey(),device)) {    if (logger.isDebugEnabled())     logger.debug("device map does not have this device -" + device.toString());  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap notations;  Node notationNode;  String notationName;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  notationNode=notations.getNamedItem("notation1");  assertNotNull("notationNotNull",notationNode);  notationName=notationNode.getNodeName();  assertEquals("nodeName","notation1",notationName);}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_A:    return stateVector[0] == State.main_region_A;default :  return false;}}  }
class C{  private void resetNetworkVisited(){  for (  Node node : this.network.getNodes().values()) {    DijkstraNodeData data=getData(node);    data.resetVisited();  }}  }
class C{  private DeleteGlossaryCommand(){}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  static void add(JarOutputStream jar,Class<?> c) throws IOException {  String name=c.getName();  String classAsPath=name.replace('.','/') + ".class";  jar.putNextEntry(new JarEntry(classAsPath));  InputStream stream=c.getClassLoader().getResourceAsStream(classAsPath);  int nRead;  byte[] buf=new byte[1024];  while ((nRead=stream.read(buf,0,buf.length)) != -1) {    jar.write(buf,0,nRead);  }  jar.closeEntry();}  }
class C{  private void adjustMinPrefForSpanningComps(DimConstraint[] specs,Float[] defPush,FlowSizeSpec fss,ArrayList<LinkedDimGroup>[] groupsLists){  for (int r=groupsLists.length - 1; r >= 0; r--) {    ArrayList<LinkedDimGroup> groups=groupsLists[r];    for (    LinkedDimGroup group : groups) {      if (group.span == 1) {        continue;      }      int[] sizes=group.getMinPrefMax();      for (int s=LayoutUtil.MIN; s <= LayoutUtil.PREF; s++) {        int cSize=sizes[s];        if (cSize == LayoutUtil.NOT_SET) {          continue;        }        int rowSize=0;        int sIx=(r << 1) + 1;        int len=Math.min((group.span << 1),fss.sizes.length - sIx) - 1;        for (int j=sIx; j < sIx + len; j++) {          int sz=fss.sizes[j][s];          if (sz != LayoutUtil.NOT_SET) {            rowSize+=sz;          }        }        if (rowSize < cSize && len > 0) {          for (int eagerness=0, newRowSize=0; eagerness < 4 && newRowSize < cSize; eagerness++) {            newRowSize=fss.expandSizes(specs,defPush,cSize,sIx,len,s,eagerness);          }        }      }    }  }}  }
class C{  public void startDetection(String containerId,String machineId,String workspaceId){  instances.put(containerId,Pair.of(machineId,workspaceId));}  }
class C{  public acronym addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public static void dump(String fileName,Writer writer,boolean details){  PrintWriter pw=new PrintWriter(writer,true);  if (!FilePath.get(fileName).exists()) {    pw.println("File not found: " + fileName);    return;  }  long size=FileUtils.size(fileName);  pw.printf("File %s, %d bytes, %d MB\n",fileName,size,size / 1024 / 1024);  FileChannel file=null;  int blockSize=MVStore.BLOCK_SIZE;  TreeMap<Integer,Long> mapSizesTotal=new TreeMap<Integer,Long>();  long pageSizeTotal=0;  try {    file=FilePath.get(fileName).open("r");    long fileSize=file.size();    int len=Long.toHexString(fileSize).length();    ByteBuffer block=ByteBuffer.allocate(4096);    long pageCount=0;    for (long pos=0; pos < fileSize; ) {      block.rewind();      DataUtils.readFully(file,pos,block);      block.rewind();      int headerType=block.get();      if (headerType == 'H') {        String header=new String(block.array(),DataUtils.LATIN).trim();        pw.printf("%0" + len + "x fileHeader %s%n",pos,header);        pos+=blockSize;        continue;      }      if (headerType != 'c') {        pos+=blockSize;        continue;      }      block.position(0);      Chunk c=null;      try {        c=Chunk.readChunkHeader(block,pos);      } catch (      IllegalStateException e) {        pos+=blockSize;        continue;      }      if (c.len <= 0) {        pos+=blockSize;        continue;      }      int length=c.len * MVStore.BLOCK_SIZE;      pw.printf("%n%0" + len + "x chunkHeader %s%n",pos,c.toString());      ByteBuffer chunk=ByteBuffer.allocate(length);      DataUtils.readFully(file,pos,chunk);      int p=block.position();      pos+=length;      int remaining=c.pageCount;      pageCount+=c.pageCount;      TreeMap<Integer,Integer> mapSizes=new TreeMap<Integer,Integer>();      int pageSizeSum=0;      while (remaining > 0) {        int start=p;        try {          chunk.position(p);        } catch (        IllegalArgumentException e) {          pw.printf("ERROR illegal position %d%n",p);          break;        }        int pageSize=chunk.getInt();        chunk.getShort();        int mapId=DataUtils.readVarInt(chunk);        int entries=DataUtils.readVarInt(chunk);        int type=chunk.get();        boolean compressed=(type & DataUtils.PAGE_COMPRESSED) != 0;        boolean node=(type & 1) != 0;        if (details) {          pw.printf("+%0" + len + "x %s, map %x, %d entries, %d bytes, maxLen %x%n",p,(node ? "node" : "leaf") + (compressed ? " compressed" : ""),mapId,node ? entries + 1 : entries,pageSize,DataUtils.getPageMaxLength(DataUtils.getPagePos(0,0,pageSize,0)));        }        p+=pageSize;        Integer mapSize=mapSizes.get(mapId);        if (mapSize == null) {          mapSize=0;        }        mapSizes.put(mapId,mapSize + pageSize);        Long total=mapSizesTotal.get(mapId);        if (total == null) {          total=0L;        }        mapSizesTotal.put(mapId,total + pageSize);        pageSizeSum+=pageSize;        pageSizeTotal+=pageSize;        remaining--;        long[] children=null;        long[] counts=null;        if (node) {          children=new long[entries + 1];          for (int i=0; i <= entries; i++) {            children[i]=chunk.getLong();          }          counts=new long[entries + 1];          for (int i=0; i <= entries; i++) {            long s=DataUtils.readVarLong(chunk);            counts[i]=s;          }        }        String[] keys=new String[entries];        if (mapId == 0 && details) {          ByteBuffer data;          if (compressed) {            boolean fast=!((type & DataUtils.PAGE_COMPRESSED_HIGH) == DataUtils.PAGE_COMPRESSED_HIGH);            Compressor compressor=getCompressor(fast);            int lenAdd=DataUtils.readVarInt(chunk);            int compLen=pageSize + start - chunk.position();            byte[] comp=DataUtils.newBytes(compLen);            chunk.get(comp);            int l=compLen + lenAdd;            data=ByteBuffer.allocate(l);            compressor.expand(comp,0,compLen,data.array(),0,l);          } else {            data=chunk;          }          for (int i=0; i < entries; i++) {            String k=StringDataType.INSTANCE.read(data);            keys[i]=k;          }          if (node) {            for (int i=0; i < entries; i++) {              long cp=children[i];              pw.printf("    %d children < %s @ " + "chunk %x +%0" + len + "x%n",counts[i],keys[i],DataUtils.getPageChunkId(cp),DataUtils.getPageOffset(cp));            }            long cp=children[entries];            pw.printf("    %d children >= %s @ chunk %x +%0" + len + "x%n",counts[entries],keys.length >= entries ? null : keys[entries],DataUtils.getPageChunkId(cp),DataUtils.getPageOffset(cp));          } else {            String[] values=new String[entries];            for (int i=0; i < entries; i++) {              String v=StringDataType.INSTANCE.read(data);              values[i]=v;            }            for (int i=0; i < entries; i++) {              pw.println("    " + keys[i] + " = "+ values[i]);            }          }        } else {          if (node && details) {            for (int i=0; i <= entries; i++) {              long cp=children[i];              pw.printf("    %d children @ chunk %x +%0" + len + "x%n",counts[i],DataUtils.getPageChunkId(cp),DataUtils.getPageOffset(cp));            }          }        }      }      pageSizeSum=Math.max(1,pageSizeSum);      for (      Integer mapId : mapSizes.keySet()) {        int percent=100 * mapSizes.get(mapId) / pageSizeSum;        pw.printf("map %x: %d bytes, %d%%%n",mapId,mapSizes.get(mapId),percent);      }      int footerPos=chunk.limit() - Chunk.FOOTER_LENGTH;      try {        chunk.position(footerPos);        pw.printf("+%0" + len + "x chunkFooter %s%n",footerPos,new String(chunk.array(),chunk.position(),Chunk.FOOTER_LENGTH,DataUtils.LATIN).trim());      } catch (      IllegalArgumentException e) {        pw.printf("ERROR illegal footer position %d%n",footerPos);      }    }    pw.printf("%n%0" + len + "x eof%n",fileSize);    pw.printf("\n");    pageCount=Math.max(1,pageCount);    pw.printf("page size total: %d bytes, page count: %d, average page size: %d bytes\n",pageSizeTotal,pageCount,pageSizeTotal / pageCount);    pageSizeTotal=Math.max(1,pageSizeTotal);    for (    Integer mapId : mapSizesTotal.keySet()) {      int percent=(int)(100 * mapSizesTotal.get(mapId) / pageSizeTotal);      pw.printf("map %x: %d bytes, %d%%%n",mapId,mapSizesTotal.get(mapId),percent);    }  } catch (  IOException e) {    pw.println("ERROR: " + e);    e.printStackTrace(pw);  } finally {    if (file != null) {      try {        file.close();      } catch (      IOException e) {      }    }  }  pw.flush();}  }
class C{  public void writeBinary(final PacketOutputStream writeBuffer){  if (options.useLegacyDatetimeCode)   calendar=Calendar.getInstance();  calendar.setTimeInMillis(ts.getTime());  writeBuffer.writeTimestampLength(calendar,ts,fractionalSeconds);}  }
class C{  public InputBitStream(final InputStream is,final int bufSize,final boolean testForPosition){  this.is=is;  wrapping=false;  if (!(this.noBuffer=bufSize == 0))   this.buffer=new byte[bufSize];  if (is instanceof RepositionableStream) {    repositionableStream=(RepositionableStream)is;    fileChannel=null;  } else   if (testForPosition) {    FileChannel fc=null;    try {      fc=(FileChannel)(is.getClass().getMethod("getChannel")).invoke(is);    } catch (    IllegalAccessException e) {    }catch (    IllegalArgumentException e) {    }catch (    NoSuchMethodException e) {    }catch (    InvocationTargetException e) {    }catch (    ClassCastException e) {    }    fileChannel=fc;    repositionableStream=null;  } else {    repositionableStream=null;    fileChannel=null;  }}  }
class C{  private int score(Variable v){  int variableScore=100 - v.variableType;  int subStringScore=getLongestCommonSubstring(v.name,fParamName).length();  int shorter=Math.min(v.name.length(),fParamName.length());  if (subStringScore < 0.6 * shorter)   subStringScore=0;  int positionScore=v.positionScore;  int matchedScore=v.alreadyMatched ? 0 : 1;  int autoboxingScore=v.isAutoboxingMatch ? 0 : 1;  int score=autoboxingScore << 30 | variableScore << 21 | subStringScore << 11 | matchedScore << 10 | positionScore;  return score;}  }
class C{  private static Map<AnchorURL,String> allReflinks(final Collection<?> links){  final Map<AnchorURL,String> v=new HashMap<AnchorURL,String>();  final Iterator<?> i=links.iterator();  Object o;  AnchorURL url=null;  String u;  int pos;  loop:   while (i.hasNext())   try {    url=null;    o=i.next();    if (o instanceof AnchorURL)     url=(AnchorURL)o; else     if (o instanceof String)     url=new AnchorURL((String)o); else     if (o instanceof ImageEntry)     url=new AnchorURL(((ImageEntry)o).url()); else     if (o instanceof IconEntry)     url=new AnchorURL(((IconEntry)o).getUrl()); else {      assert false;      continue loop;    }    u=url.toNormalform(true);    if ((pos=u.toLowerCase().indexOf("http://",7)) > 0) {      i.remove();      u=u.substring(pos);      while ((pos=u.toLowerCase().indexOf("http://",7)) > 0)       u=u.substring(pos);      url=new AnchorURL(u);      if (!(v.containsKey(url)))       v.put(url,"ref");      continue loop;    }    if ((pos=u.toLowerCase().indexOf("https://",7)) > 0) {      i.remove();      u=u.substring(pos);      while ((pos=u.toLowerCase().indexOf("https://",7)) > 0)       u=u.substring(pos);      url=new AnchorURL(u);      if (!(v.containsKey(url)))       v.put(url,"ref");      continue loop;    }    if ((pos=u.toLowerCase().indexOf("/www.",11)) > 0) {      i.remove();      u=url.getProtocol() + ":/" + u.substring(pos);      while ((pos=u.toLowerCase().indexOf("/www.",11)) > 0)       u=url.getProtocol() + ":/" + u.substring(pos);      AnchorURL addurl=new AnchorURL(u);      if (!(v.containsKey(addurl)))       v.put(addurl,"ref");      continue loop;    }  } catch (  final MalformedURLException e) {  }  return v;}  }
class C{  public Task<Boolean> contains(final CacheKey key){  if (containsSync(key)) {    return Task.forResult(true);  }  return containsAsync(key);}  }
class C{  public void dec(){  dec(1);}  }
class C{  @Override public String toString(){  try {    return getSummary();  } catch (  SchedulerException se) {    return "SchedulerMetaData: undeterminable.";  }}  }
class C{  private boolean cleanSomeSlots(int i,int n){  boolean removed=false;  Entry[] tab=table;  int len=tab.length;  do {    i=nextIndex(i,len);    Entry e=tab[i];    if (e != null && e.get() == null) {      n=len;      removed=true;      i=expungeStaleEntry(i);    }  } while ((n>>>=1) != 0);  return removed;}  }
class C{  public void testSimple() throws IOException {  fetch("www.fortify.net",443,true,"/sslcheck.html",1,1,0,60);  fetch("mail.google.com",443,true,"/mail/",1,1,0,60);  fetch("www.paypal.com",443,true,"/",1,1,0,60);  fetch("www.yellownet.ch",443,true,"/",1,1,0,60);}  }
class C{  public FloatConverter(final Object defaultValue){  super(true,defaultValue);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.MULTIPLE_IS_A__EXTENDS_NAME_1:    return getExtendsName_1();case UmplePackage.MULTIPLE_IS_A__ANONYMOUS_MULTIPLE_IS_A11:  return getAnonymous_multipleIsA_1_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  CloseableIteration<? extends Statement,SailException> createStatementIterator(Resource subj,IRI pred,Value obj,boolean explicit,Resource... contexts) throws IOException {  int subjID=NativeValue.UNKNOWN_ID;  if (subj != null) {    subjID=valueStore.getID(subj);    if (subjID == NativeValue.UNKNOWN_ID) {      return new EmptyIteration<Statement,SailException>();    }  }  int predID=NativeValue.UNKNOWN_ID;  if (pred != null) {    predID=valueStore.getID(pred);    if (predID == NativeValue.UNKNOWN_ID) {      return new EmptyIteration<Statement,SailException>();    }  }  int objID=NativeValue.UNKNOWN_ID;  if (obj != null) {    objID=valueStore.getID(obj);    if (objID == NativeValue.UNKNOWN_ID) {      return new EmptyIteration<Statement,SailException>();    }  }  List<Integer> contextIDList=new ArrayList<Integer>(contexts.length);  if (contexts.length == 0) {    contextIDList.add(NativeValue.UNKNOWN_ID);  } else {    for (    Resource context : contexts) {      if (context == null) {        contextIDList.add(0);      } else {        int contextID=valueStore.getID(context);        if (contextID != NativeValue.UNKNOWN_ID) {          contextIDList.add(contextID);        }      }    }  }  ArrayList<NativeStatementIterator> perContextIterList=new ArrayList<NativeStatementIterator>(contextIDList.size());  for (  int contextID : contextIDList) {    RecordIterator btreeIter=tripleStore.getTriples(subjID,predID,objID,contextID,explicit,false);    perContextIterList.add(new NativeStatementIterator(btreeIter,valueStore));  }  if (perContextIterList.size() == 1) {    return perContextIterList.get(0);  } else {    return new UnionIteration<Statement,SailException>(perContextIterList);  }}  }
class C{  public static Random createRandom(){  return createRandom(0L);}  }
class C{  public void removeResultListener(ResultListener listener){  getHierarchy().removeResultListener(listener);}  }
class C{  private static boolean less(Comparable v,Comparable w){  return v.compareTo(w) < 0;}  }
class C{  public static <T>MonoTSeq<T> monoT(Publisher<Mono<T>> nested){  return MonoT.fromPublisher(Flux.from(nested));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public STGroupFile(URL url,String encoding,char delimiterStartChar,char delimiterStopChar){  super(delimiterStartChar,delimiterStopChar);  this.url=url;  this.encoding=encoding;  this.fileName=null;}  }
class C{  public StringLiteral newStringLiteral(){  return new StringLiteral(this);}  }
class C{  private int[] skipScan(int numVals,int rl,int[] astart){  int[] apos=new int[numVals];  if (rl > 0) {    for (int k=0; k < numVals; k++) {      int boff=_ptr[k];      int blen=len(k);      int bix=0;      int start=0;      while (bix < blen) {        int lstart=_data[boff + bix];        int llen=_data[boff + bix + 1];        if (start + lstart + llen >= rl)         break;        start+=lstart + llen;        bix+=2;      }      apos[k]=bix;      astart[k]=start;    }  }  return apos;}  }
class C{  protected void updateProgressBar(long currentSize,long totalSize){  mStatusView.setText(Utils.getProgressLabel(currentSize,totalSize));  double position=((double)currentSize / (double)totalSize) * 100.0;  mProgressBar.setProgress((int)position);}  }
class C{  public void testTermInDisguise() throws Exception {  Query expected=new TermQuery(new Term("field","st*ar\\*"));  assertEquals(expected,parse("sT*Ar\\\\\\*"));}  }
class C{  default Builder withHostname(String hostname){  return with(HOSTNAME,hostname);}  }
class C{  public static void branchWithCommit(GitRepository repository,String name,String file,String content,boolean returnToMaster){  GitExecutor.cd(repository);  GitExecutor.git("checkout -b " + name);  Executor.touch(file,content);  GitExecutor.git("add " + file);  GitExecutor.git("commit -m branch_content");  if (returnToMaster) {    GitExecutor.git("checkout master");  }}  }
class C{  private void remeasure(){  measure(MeasureSpec.makeMeasureSpec(getWidth(),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(getHeight(),MeasureSpec.EXACTLY));}  }
class C{  private boolean hasNextProxy(){  return nextProxyIndex < proxies.size();}  }
class C{  public DiskDistributedNoAckAsyncOverflowRegionDUnitTest(){  super();}  }
class C{  protected ConcurrentPhase(String name,int atomicScheduledPhase){  super(name,null);  this.atomicScheduledPhase=atomicScheduledPhase;  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(getSchedule(this.atomicScheduledPhase) != SCHEDULE_CONCURRENT);}  }
class C{  public WARArchiveImpl(Archive<?> delegate){  super(WARArchive.class,delegate);  setDefaultContextRoot();  addFaviconExceptionHandler();}  }
class C{  public static String encode(byte[] data){  try {    return encode(data,0,data.length);  } catch (  ArrayIndexOutOfBoundsException aiobe) {    return aiobe.toString();  }}  }
class C{  public PropertyPanel(PropertyEditor pe,boolean ignoreCustomPanel){  m_Editor=pe;  if (!ignoreCustomPanel && m_Editor instanceof CustomPanelSupplier) {    setLayout(new BorderLayout());    m_CustomPanel=((CustomPanelSupplier)m_Editor).getCustomPanel();    add(m_CustomPanel,BorderLayout.CENTER);    m_HasCustomPanel=true;  } else {    createDefaultPanel();  }}  }
class C{  @Override public void run(){  if (mState == State.MISSION_LOADED || mState == State.MISSION_RUNNING) {    update();  }  mUpdateHandler.postDelayed(this,DELAY_MILLIS);}  }
class C{  public ST(String template){  this(STGroup.defaultGroup,template);}  }
class C{  public EdgeGlow(Drawable edge,Drawable glow){  mEdge=edge;  mGlow=glow;  mInterpolator=new DecelerateInterpolator();}  }
class C{  public static boolean cs_print(Dcs A,boolean brief){  int p, j, m, n, nzmax, nz, Ap[], Ai[];  double Ax[];  if (A == null) {    System.out.print("(null)\n");    return (false);  }  m=A.m;  n=A.n;  Ap=A.p;  Ai=A.i;  Ax=A.x;  nzmax=A.nzmax;  nz=A.nz;  System.out.print(String.format("CSparseJ Version %d.%d.%d, %s.  %s\n",Dcs_common.CS_VER,Dcs_common.CS_SUBVER,Dcs_common.CS_SUBSUB,Dcs_common.CS_DATE,Dcs_common.CS_COPYRIGHT));  if (nz < 0) {    System.out.print(String.format("%d-by-%d, nzmax: %d nnz: %d, 1-norm: %g\n",m,n,nzmax,Ap[n],Dcs_norm.cs_norm(A)));    for (j=0; j < n; j++) {      System.out.print(String.format("    col %d : locations %d to %d\n",j,Ap[j],Ap[j + 1] - 1));      for (p=Ap[j]; p < Ap[j + 1]; p++) {        System.out.print(String.format("      %d : %g\n",Ai[p],Ax != null ? Ax[p] : 1));        if (brief && p > 20) {          System.out.print("  ...\n");          return (true);        }      }    }  } else {    System.out.print(String.format("triplet: %d-by-%d, nzmax: %d nnz: %d\n",m,n,nzmax,nz));    for (p=0; p < nz; p++) {      System.out.print(String.format("    %d %d : %g\n",Ai[p],Ap[p],Ax != null ? Ax[p] : 1));      if (brief && p > 20) {        System.out.print("  ...\n");        return (true);      }    }  }  return (true);}  }
class C{  private boolean updateSelectedExporter(){  m_exporter=ExporterSelection.BinExport;  return checkExporterInstall(getParent());}  }
class C{  void initForYuvFrame(int width,int height,int yStride,int uvStride,int colorspace){  this.width=width;  this.height=height;  this.colorspace=colorspace;  int yLength=yStride * height;  int uvLength=uvStride * ((height + 1) / 2);  int minimumYuvSize=yLength + (uvLength * 2);  if (data == null || data.capacity() < minimumYuvSize) {    data=ByteBuffer.allocateDirect(minimumYuvSize);  }  data.limit(minimumYuvSize);  if (yuvPlanes == null) {    yuvPlanes=new ByteBuffer[3];  }  data.position(0);  yuvPlanes[0]=data.slice();  yuvPlanes[0].limit(yLength);  data.position(yLength);  yuvPlanes[1]=data.slice();  yuvPlanes[1].limit(uvLength);  data.position(yLength + uvLength);  yuvPlanes[2]=data.slice();  yuvPlanes[2].limit(uvLength);  if (yuvStrides == null) {    yuvStrides=new int[3];  }  yuvStrides[0]=yStride;  yuvStrides[1]=uvStride;  yuvStrides[2]=uvStride;}  }
class C{  public void deleteLabel(Serializable projectId,String name) throws IOException {  Query query=new Query();  query.append("name",name);  String tailUrl=GitlabProject.URL + "/" + projectId+ GitlabLabel.URL+ query.toString();  retrieve().method("DELETE").to(tailUrl,Void.class);}  }
class C{  public static void quickSort(double[] a,int fromIndex,int toIndex,DoubleComparator c){  rangeCheck(a.length,fromIndex,toIndex);  quickSort1(a,fromIndex,toIndex - fromIndex,c);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public BatchUpdateException(String reason,String SQLState,int vendorCode,int[] updateCounts,Throwable cause){  super(reason,SQLState,vendorCode,cause);  this.updateCounts=(updateCounts == null) ? null : Arrays.copyOf(updateCounts,updateCounts.length);  this.longUpdateCounts=(updateCounts == null) ? null : copyUpdateCount(updateCounts);}  }
class C{  public static boolean isSqlType(Class<?> cls){  cls=U.box(cls);  return SQL_TYPES.contains(cls) || isGeometryClass(cls);}  }
class C{  @POST @Path("{noteId}/paragraph") @ZeppelinApi public Response insertParagraph(@PathParam("noteId") String noteId,String message) throws IOException {  LOG.info("insert paragraph {} {}",noteId,message);  Note note=notebook.getNote(noteId);  if (note == null) {    return new JsonResponse<>(Status.NOT_FOUND,"note not found.").build();  }  NewParagraphRequest request=gson.fromJson(message,NewParagraphRequest.class);  Paragraph p;  Double indexDouble=request.getIndex();  if (indexDouble == null) {    p=note.addParagraph();  } else {    p=note.insertParagraph(indexDouble.intValue());  }  p.setTitle(request.getTitle());  p.setText(request.getText());  AuthenticationInfo subject=new AuthenticationInfo(SecurityUtils.getPrincipal());  note.persist(subject);  notebookServer.broadcastNote(note);  return new JsonResponse<>(Status.CREATED,"",p.getId()).build();}  }
class C{  public void registerSpecialTileEntities(){  GameRegistry.registerTileEntity(TileEntityAdvancedSolarGenerator.class,"AdvancedSolarGenerator");  GameRegistry.registerTileEntity(TileEntitySolarGenerator.class,"SolarGenerator");  GameRegistry.registerTileEntity(TileEntityBioGenerator.class,"BioGenerator");  GameRegistry.registerTileEntity(TileEntityHeatGenerator.class,"HeatGenerator");  GameRegistry.registerTileEntity(TileEntityGasGenerator.class,"GasGenerator");  GameRegistry.registerTileEntity(TileEntityWindTurbine.class,"WindTurbine");  GameRegistry.registerTileEntity(TileEntityReactorController.class,"ReactorController");}  }
class C{  public String toString(){  return getValue() ? "true" : "false";}  }
class C{  public JSONWriter value(boolean b) throws JSONException {  return this.append(b ? "true" : "false");}  }
class C{  private void validateQuietZone(BitArray row,int startPattern) throws NotFoundException {  int quietCount=this.narrowLineWidth * 10;  quietCount=quietCount < startPattern ? quietCount : startPattern;  for (int i=startPattern - 1; quietCount > 0 && i >= 0; i--) {    if (row.get(i)) {      break;    }    quietCount--;  }  if (quietCount != 0) {    throw NotFoundException.getNotFoundInstance();  }}  }
class C{  public FloatMatrix put(int i,float v){  data[i]=v;  return this;}  }
class C{  public void startCDATA() throws SAXException {  m_handler.startCDATA();}  }
class C{  public List<Recommendation> scheduleStorageForMirror(VirtualArray srcVarray,VirtualPool srcVpool,VirtualPool mirrorVpool,VirtualPoolCapabilityValuesWrapper capabilities,URI vplexStorageSystemURI,URI excludeStorageSystem,String cluster){  _log.info("Executing VPlex Mirror placement strategy");  List<Recommendation> recommendations=new ArrayList<Recommendation>();  _log.info("Getting placement recommendations for srcVarray {}",srcVarray.getId());  Map<String,Object> attributeMap=new HashMap<String,Object>();  List<StoragePool> allMatchingPools=getMatchingPools(srcVarray,null,excludeStorageSystem,mirrorVpool,capabilities,attributeMap);  _log.info("Found {} Matching pools for VirtualArray for the Mirror",allMatchingPools.size());  StringBuffer errorMessage=(StringBuffer)attributeMap.get(AttributeMatcher.ERROR_MESSAGE);  if ((CollectionUtils.isEmpty(allMatchingPools)) && (errorMessage != null) && (errorMessage.length() != 0)) {    throw APIException.badRequests.noStoragePools(srcVarray.getLabel(),srcVpool.getLabel(),errorMessage.toString());  }  Map<String,List<StoragePool>> vplexPoolMapForSrcVarray=sortPoolsByVPlexStorageSystem(allMatchingPools,srcVarray.getId().toString(),cluster);  Iterator<Entry<String,List<StoragePool>>> it=vplexPoolMapForSrcVarray.entrySet().iterator();  if (vplexStorageSystemURI != null) {    while (it.hasNext()) {      Entry<String,List<StoragePool>> entry=it.next();      String vplexKey=entry.getKey();      URI vplexURI=null;      try {        vplexURI=URI.create(vplexKey);      } catch (      IllegalArgumentException ex) {        _log.error("Bad VPLEX URI: " + vplexURI);        continue;      }      if (false == vplexStorageSystemURI.equals(vplexURI)) {        it.remove();      }    }  }  if (vplexPoolMapForSrcVarray.isEmpty()) {    _log.info("No matching pools on storage systems connected to a VPlex");    return recommendations;  }  Set<String> vplexStorageSystemIds=vplexPoolMapForSrcVarray.keySet();  vplexStorageSystemIds=vplexPoolMapForSrcVarray.keySet();  _log.info("{} VPlex storage systems have matching pools",vplexStorageSystemIds.size());  Iterator<String> vplexSystemIdsIter=vplexStorageSystemIds.iterator();  while ((vplexSystemIdsIter.hasNext()) && (recommendations.isEmpty())) {    String vplexStorageSystemId=vplexSystemIdsIter.next();    _log.info("Check matching pools for VPlex {}",vplexStorageSystemId);    if (VirtualPool.ProvisioningType.Thin.toString().equalsIgnoreCase(mirrorVpool.getSupportedProvisioningType())) {      capabilities.put(VirtualPoolCapabilityValuesWrapper.THIN_PROVISIONING,Boolean.TRUE);    }    List<Recommendation> recommendationsForMirrorVarray=_blockScheduler.getRecommendationsForPools(srcVarray.getId().toString(),vplexPoolMapForSrcVarray.get(vplexStorageSystemId),capabilities);    if (recommendationsForMirrorVarray.isEmpty()) {      _log.info("Matching pools insufficient for placement");      continue;    }    _log.info("Matching pools sufficient for placement");    recommendations.addAll(createVPlexRecommendations(vplexStorageSystemId,srcVarray,srcVpool,recommendationsForMirrorVarray));    continue;  }  return recommendations;}  }
class C{  protected void fireOptionSelected(JOptionPane pane){  Object value=pane.getValue();  int option;  if (value == null) {    option=JOptionPane.CLOSED_OPTION;  } else {    if (pane.getOptions() == null) {      if (value instanceof Integer) {        option=((Integer)value).intValue();      } else {        option=JOptionPane.CLOSED_OPTION;      }    } else {      option=JOptionPane.CLOSED_OPTION;      Object[] options=pane.getOptions();      for (int i=0, n=options.length; i < n; i++) {        if (options[i].equals(value)) {          option=i;          break;        }      }      if (option == JOptionPane.CLOSED_OPTION) {        value=null;      }    }  }  fireOptionSelected(pane,option,value,pane.getInputValue());}  }
class C{  protected void downloadUsingMaven(String target,String group,String artifact,String version,String sha1Checksum){  String repoDir="http://repo1.maven.org/maven2";  File targetFile=new File(target);  if (targetFile.exists()) {    return;  }  String repoFile=group.replace('.','/') + "/" + artifact+ "/"+ version+ "/"+ artifact+ "-"+ version+ ".jar";  mkdirs(targetFile.getAbsoluteFile().getParentFile());  String localMavenDir=getLocalMavenDir();  if (new File(localMavenDir).exists()) {    File f=new File(localMavenDir,repoFile);    if (!f.exists()) {      try {        execScript("mvn",args("org.apache.maven.plugins:maven-dependency-plugin:2.1:get","-D" + "repoUrl=" + repoDir,"-D" + "artifact=" + group + ":"+ artifact+ ":"+ version));      } catch (      RuntimeException e) {        println("Could not download using Maven: " + e.toString());      }    }    if (f.exists()) {      byte[] data=readFile(f);      String got=getSHA1(data);      if (sha1Checksum == null) {        println("SHA1 checksum: " + got);      } else {        if (!got.equals(sha1Checksum)) {          throw new RuntimeException("SHA1 checksum mismatch; got: " + got + " expected: "+ sha1Checksum+ " for file "+ f.getAbsolutePath());        }      }      writeFile(targetFile,data);      return;    }  }  String fileURL=repoDir + "/" + repoFile;  download(target,fileURL,sha1Checksum);}  }
class C{  public LabeledIntent(Intent origIntent,String sourcePackage,int labelRes,int icon){  super(origIntent);  mSourcePackage=sourcePackage;  mLabelRes=labelRes;  mNonLocalizedLabel=null;  mIcon=icon;}  }
class C{  @Override protected void installDefaults(){  super.installDefaults();  table.setRowHeight(25);  table.setShowVerticalLines(false);  table.setIntercellSpacing(new Dimension(0,1));}  }
class C{  private void generateXmlFile(int w,int h){  StringBuffer sbForWidth=new StringBuffer();  sbForWidth.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");  sbForWidth.append("<resources>\n");  float cellw=((w * 1.0f / baseW));  System.out.println("width : " + w + ","+ baseW+ ","+ cellw);  for (int i=1; i < baseW; i++) {    sbForWidth.append(WTemplate.replace("{0}",i + "").replace("{1}",change(cellw * i) + ""));  }  sbForWidth.append(WTemplate.replace("{0}",baseW + "").replace("{1}",w + ""));  sbForWidth.append("</resources>");  StringBuffer sbForHeight=new StringBuffer();  sbForHeight.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");  sbForHeight.append("<resources>");  float cellh=h * 1.0f / baseH;  System.out.println("height : " + h + ","+ baseH+ ","+ cellh);  for (int i=1; i < baseH; i++) {    sbForHeight.append(HTemplate.replace("{0}",i + "").replace("{1}",change(cellh * i) + ""));  }  sbForHeight.append(HTemplate.replace("{0}",baseH + "").replace("{1}",h + ""));  sbForHeight.append("</resources>");  File fileDir=new File(dirStr + File.separator + VALUE_TEMPLATE.replace("{0}",w + "").replace("{1}",h + ""));  fileDir.mkdir();  File layxFile=new File(fileDir.getAbsolutePath(),"w_dimens.xml");  File layyFile=new File(fileDir.getAbsolutePath(),"h_dimens.xml");  try {    PrintWriter pw=new PrintWriter(new FileOutputStream(layxFile));    pw.print(sbForWidth.toString());    pw.close();    pw=new PrintWriter(new FileOutputStream(layyFile));    pw.print(sbForHeight.toString());    pw.close();  } catch (  FileNotFoundException e) {    e.printStackTrace();  }}  }
class C{  protected TransactionID sendRequest(Request request,boolean firstRequest,TransactionID transactionID) throws StunException {  if (!firstRequest && (longTermCredentialSession != null))   longTermCredentialSession.addAttributes(request);  StunStack stunStack=harvester.getStunStack();  TransportAddress stunServer=harvester.stunServer;  TransportAddress hostCandidateTransportAddress=hostCandidate.getTransportAddress();  if (transactionID == null) {    byte[] transactionIDAsBytes=request.getTransactionID();    transactionID=(transactionIDAsBytes == null) ? TransactionID.createNewTransactionID() : TransactionID.createTransactionID(harvester.getStunStack(),transactionIDAsBytes);  }synchronized (requests) {    try {      transactionID=stunStack.sendRequest(request,stunServer,hostCandidateTransportAddress,this,transactionID);    } catch (    IllegalArgumentException iaex) {      if (logger.isLoggable(Level.INFO)) {        logger.log(Level.INFO,"Failed to send " + request + " through "+ hostCandidateTransportAddress+ " to "+ stunServer,iaex);      }      throw new StunException(StunException.ILLEGAL_ARGUMENT,iaex.getMessage(),iaex);    }catch (    IOException ioex) {      if (logger.isLoggable(Level.INFO)) {        logger.log(Level.INFO,"Failed to send " + request + " through "+ hostCandidateTransportAddress+ " to "+ stunServer,ioex);      }      throw new StunException(StunException.NETWORK_ERROR,ioex.getMessage(),ioex);    }    requests.put(transactionID,request);  }  return transactionID;}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  private static void registerRJRLauncher(ILaunchConfiguration configuration,ILaunch launch) throws CoreException {  String port=configuration.getAttribute(Plugin.ATTR_PORT,"");  String sslPort=configuration.getAttribute(Plugin.ATTR_SSL_PORT,"");  boolean enableSSL=configuration.getAttribute(Plugin.ATTR_ENABLE_SSL,false);  if (!"".equals(port))   launcher.put(port,launch);  if (enableSSL && !"".equals(sslPort))   launcher.put(sslPort,launch);}  }
class C{  protected Size2D arrangeRR(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  Size2D s1=arrangeNN(container,g2);  if (constraint.getWidthRange().contains(s1.width)) {    return s1;  } else {    RectangleConstraint c=constraint.toFixedWidth(constraint.getWidthRange().getUpperBound());    return arrangeFR(container,g2,c);  }}  }
class C{  public TradeOrderfill findById(Integer id){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    TradeOrderfill instance=entityManager.find(TradeOrderfill.class,id);    entityManager.getTransaction().commit();    return instance;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public static final double[][] random(final int m,final int n){  final double[][] A=new double[m][n];  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=Math.random();    }  }  return A;}  }
class C{  public void pageBreak(){synchronized (this.lock) {    if (isPreview) {      pageImages.addElement(previewImage);    }    if (page != null) {      page.dispose();    }    page=null;    newpage();  }}  }
class C{  public int hashCode(){  int retval=0;  for (int i=1; i < this.key.length; i++) {    retval+=this.key[i] * i;  }  return (retval^=getAlgorithm().toLowerCase(Locale.ENGLISH).hashCode());}  }
class C{  public void applyEffects(Player player,Object... objects){  if (evaluate(objects).toBoolean()) {    if (isType(ApplyType.VELOCITY)) {      player.applyImpulse(velocity);    } else     if (kit != null) {      kit.apply(player,false);    }  }}  }
class C{  private static int GetMethodID(JNIEnvironment env,int classJREF,Address methodNameAddress,Address methodSigAddress){  if (traceJNI)   VM.sysWrite("JNI called: GetMethodID  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    String methodString=JNIGenericHelpers.createStringFromC(methodNameAddress);    Atom methodName=Atom.findOrCreateAsciiAtom(methodString);    String sigString=JNIGenericHelpers.createStringFromC(methodSigAddress);    Atom sigName=Atom.findOrCreateAsciiAtom(sigString);    Class<?> jcls=(Class<?>)env.getJNIRef(classJREF);    RVMType type=java.lang.JikesRVMSupport.getTypeForClass(jcls);    if (!type.isClassType()) {      env.recordException(new NoSuchMethodError());      return 0;    }    RVMClass klass=type.asClass();    if (!klass.isInitialized()) {      RuntimeEntrypoints.initializeClassForDynamicLink(klass);    }    final RVMMethod meth;    if (methodString.equals("<init>")) {      meth=klass.findInitializerMethod(sigName);    } else {      meth=klass.findVirtualMethod(methodName,sigName);    }    if (meth == null) {      env.recordException(new NoSuchMethodError(klass + ": " + methodName+ " "+ sigName));      return 0;    }    if (traceJNI)     VM.sysWrite("got method " + meth + "\n");    return meth.getId();  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  private static String hextetsToIPv6String(int[] hextets){  StringBuilder buf=new StringBuilder(39);  boolean lastWasNumber=false;  for (int i=0; i < hextets.length; i++) {    boolean thisIsNumber=hextets[i] >= 0;    if (thisIsNumber) {      if (lastWasNumber) {        buf.append(':');      }      buf.append(Integer.toHexString(hextets[i]));    } else {      if (i == 0 || lastWasNumber) {        buf.append("::");      }    }    lastWasNumber=thisIsNumber;  }  return buf.toString();}  }
class C{  public DcwVariableLengthIndexFile(BinaryFile inputstream,boolean msbfirst) throws FormatException {  try {    inputstream.byteOrder(msbfirst);    recordCount=inputstream.readInteger();    inputstream.readInteger();    offsettable=new int[recordCount * 2];    inputstream.readIntegerArray(offsettable,0,recordCount * 2);    endOfFileOffset=offsettable[offsettable.length - 2] + offsettable[offsettable.length - 1];    inputstream.close();  } catch (  IOException i) {    throw new FormatException("IOException with " + inputstream.getName() + ": "+ i.getMessage());  }}  }
class C{  static public byte[] ascii2binary(String str){  if (str == null)   return null;  String val=str.substring(2);  int size=val.length();  byte[] buf=new byte[size / 2];  byte[] p=val.getBytes();  for (int i=0; i < (size / 2); i++) {    int j=i * 2;    byte v=0;    if (p[j] >= '0' && p[j] <= '9') {      v=(byte)((p[j] - '0') << 4);    } else     if (p[j] >= 'a' && p[j] <= 'f') {      v=(byte)((p[j] - 'a' + 10) << 4);    } else     if (p[j] >= 'A' && p[j] <= 'F') {      v=(byte)((p[j] - 'A' + 10) << 4);    } else     throw new Error("BAD format :" + str);    if (p[j + 1] >= '0' && p[j + 1] <= '9') {      v+=(p[j + 1] - '0');    } else     if (p[j + 1] >= 'a' && p[j + 1] <= 'f') {      v+=(p[j + 1] - 'a' + 10);    } else     if (p[j + 1] >= 'A' && p[j + 1] <= 'F') {      v+=(p[j + 1] - 'A' + 10);    } else     throw new Error("BAD format :" + str);    buf[i]=v;  }  return buf;}  }
class C{  public final void test_write$BII_2() throws IOException {  assertEquals(0,MY_MESSAGE_LEN % CHUNK_SIZE);  for (int k=0; k < algorithmName.length; k++) {    try {      ByteArrayOutputStream bos=new ByteArrayOutputStream(MY_MESSAGE_LEN);      MessageDigest md=MessageDigest.getInstance(algorithmName[k]);      DigestOutputStream dos=new DigestOutputStream(bos,md);      for (int i=0; i < MY_MESSAGE_LEN / CHUNK_SIZE; i++) {        dos.write(myMessage,i * CHUNK_SIZE,CHUNK_SIZE);      }      assertTrue("write",Arrays.equals(myMessage,bos.toByteArray()));      assertTrue("update",Arrays.equals(dos.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[k])));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public void rollbackChildWorkflow(URI parentURI,String childOrchestrationTaskId,String stepId){  Workflow parentWorkflow=loadWorkflowFromUri(parentURI);  if (parentWorkflow == null) {    _log.info("Could not locate parent workflow %s (%s), possibly it was already deleted");    ServiceCoded coded=WorkflowException.exceptions.workflowNotFound(parentURI.toString());    WorkflowStepCompleter.stepFailed(stepId,coded);  }  for (  URI childURI : parentWorkflow._childWorkflows) {    Workflow childWorkflow=loadWorkflowFromUri(childURI);    if (childWorkflow == null) {      _log.info("Could not locate child workflow %s (%s), possibly it was already deleted");      WorkflowStepCompleter.stepSucceded(stepId);      return;    }    if (!NullColumnValueGetter.isNullValue(childWorkflow.getOrchTaskId()) && childWorkflow.getOrchTaskId().equals(childOrchestrationTaskId)) {      rollbackInnerWorkflow(childWorkflow,stepId);      return;    }  }  WorkflowStepCompleter.stepSucceded(stepId);}  }
class C{  public static void onEvent(final Context context,final String event_id,final String label){  onEvent(context,event_id,label,1);}  }
class C{  private final ArrayList<Integer> findChildren(int index){  ArrayList<Integer> ret=new ArrayList<Integer>();  StartEntry se=new StartEntry();  EndEntry ee=new EndEntry();  int child=index + 1;  while ((child >= 0) && (child < numEntries)) {    boolean haveEE=readEntries(child,se,ee);    if (se.parentIndex == index)     ret.add(child);    if (!haveEE)     break;    if (child != ee.startIndex)     break;    child=se.endIndex + 1;  }  return ret;}  }
class C{  public JoinStateData(StateHolder<S,E> state,Guard<S,E> guard){  Assert.notNull(state,"Holder must be set");  this.state=state;  this.guard=guard;}  }
class C{  public double nextDouble(){  return (((long)next(26) << 27) + next(27)) / (double)(1L << 53);}  }
class C{  public int writeCRT(ByteBuffer databuf,Position.LineMap lineMap,Log log){  int crtEntries=0;  new SourceComputer().csp(methodTree);  for (List<CRTEntry> l=entries.toList(); l.nonEmpty(); l=l.tail) {    CRTEntry entry=l.head;    if (entry.startPc == entry.endPc)     continue;    SourceRange pos=positions.get(entry.tree);    Assert.checkNonNull(pos,"CRT: tree source positions are undefined");    if ((pos.startPos == Position.NOPOS) || (pos.endPos == Position.NOPOS))     continue;    if (crtDebug) {      System.out.println("Tree: " + entry.tree + ", type:"+ getTypes(entry.flags));      System.out.print("Start: pos = " + pos.startPos + ", pc = "+ entry.startPc);    }    int startPos=encodePosition(pos.startPos,lineMap,log);    if (startPos == Position.NOPOS)     continue;    if (crtDebug) {      System.out.print("End:   pos = " + pos.endPos + ", pc = "+ (entry.endPc - 1));    }    int endPos=encodePosition(pos.endPos,lineMap,log);    if (endPos == Position.NOPOS)     continue;    databuf.appendChar(entry.startPc);    databuf.appendChar(entry.endPc - 1);    databuf.appendInt(startPos);    databuf.appendInt(endPos);    databuf.appendChar(entry.flags);    crtEntries++;  }  return crtEntries;}  }
class C{  private DownloadResult downloadValidateRename(InterruptibleHttpClient http_client,Path out_tmp,String url) throws IOException, InterruptedException {  try (FileChannel output=FileChannel.open(out_tmp,StandardOpenOption.CREATE_NEW,StandardOpenOption.WRITE)){    HttpResponse response=http_client.interruptibleGet(url,output);    if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {      Formatter ff=new Formatter();      ff.format("Synchronizer#%d cannot download product at %s," + " remote dhus returned message '%s' (HTTP%d)",getId(),url,response.getStatusLine().getReasonPhrase(),response.getStatusLine().getStatusCode());      throw new IOException(ff.out().toString());    }    Pattern pat=Pattern.compile("filename=\"(.+?)\"",Pattern.CASE_INSENSITIVE);    String contdis=response.getFirstHeader("Content-Disposition").getValue();    Matcher m=pat.matcher(contdis);    if (!m.find()) {      throw new IOException("Synchronizer#" + getId() + " Missing HTTP header field `Content-Disposition` that determines the filename");    }    String filename=m.group(1);    if (filename == null || filename.isEmpty()) {      throw new IOException("Synchronizer#" + getId() + " Invalid filename in HTTP header field `Content-Disposition`");    }    output.close();    Path dest=out_tmp.getParent().resolve(filename);    Files.move(out_tmp,dest,StandardCopyOption.ATOMIC_MOVE);    DownloadResult res=new DownloadResult(dest,response.getEntity().getContentType().getValue(),response.getEntity().getContentLength());    return res;  }  finally {    if (Files.exists(out_tmp)) {      Files.delete(out_tmp);    }  }}  }
class C{  public static String byteArrayToBase64(byte[] a){  return byteArrayToBase64(a,false);}  }
class C{  public Burner(String devName){  this.devName=devName;}  }
class C{  public ServerBuilder idleTimeoutMillis(long idleTimeoutMillis){  return idleTimeout(Duration.ofMillis(idleTimeoutMillis));}  }
class C{  protected void assertSigningDateInCertificateValidityRange(final SP parameters){  if (parameters.isSignWithExpiredCertificate()) {    return;  }  final CertificateToken signingCertificate=parameters.getSigningCertificate();  final Date notAfter=signingCertificate.getNotAfter();  final Date notBefore=signingCertificate.getNotBefore();  final Date signingDate=parameters.bLevel().getSigningDate();  if (signingDate.after(notAfter) || signingDate.before(notBefore)) {    throw new DSSException(String.format("Signing Date (%s) is not in certificate validity range (%s, %s).",signingDate.toString(),notBefore.toString(),notAfter.toString()));  }}  }
class C{  public void initProviderConnection(XBeeConnection connection) throws XBeeException {  if (this.isConnected()) {    throw new IllegalStateException("Cannot open new connection -- existing connection is still open.  Please close first");  }  initConnection(connection);}  }
class C{  static synchronized void registerSpecialVersion(SpecializedMethod spMethod){  RVMMethod source=spMethod.getMethod();  MethodSet<RVMMethod> s=findOrCreateMethodSet(specialVersionsHash,source);  s.add(spMethod);  deferredMethods.add(spMethod);}  }
class C{  public static void assignScheduleModesToLinks(TransitSchedule schedule,Network network){  log.info("... Assigning schedule transport mode to network");  Map<Id<Link>,Set<String>> transitLinkNetworkModes=new HashMap<>();  for (  TransitLine line : schedule.getTransitLines().values()) {    for (    TransitRoute route : line.getRoutes().values()) {      if (route.getRoute() != null) {        for (        Id<Link> linkId : getTransitRouteLinkIds(route)) {          MapUtils.getSet(linkId,transitLinkNetworkModes).add(route.getTransportMode());        }      }    }  }  for (  Link link : network.getLinks().values()) {    if (transitLinkNetworkModes.containsKey(link.getId())) {      Set<String> modes=new HashSet<>();      Set<String> linkModes=transitLinkNetworkModes.get(link.getId());      linkModes.addAll(link.getAllowedModes());      for (      String m : linkModes) {        modes.add(m);      }      link.setAllowedModes(modes);    }  }}  }
class C{  public boolean add(WorkListItem item){  if (DEBUG) {    System.out.println("Adding " + item.getURL().toString());  }  if (!addedSet.add(item.getURL().toString())) {    if (DEBUG) {      System.out.println("\t==> Already processed");    }    return false;  }  itemList.add(item);  return true;}  }
class C{  private void startSampleHost() throws Throwable {  this.sampleHost=new SampleHost();  String bindAddress="127.0.0.1";  String hostId=UUID.randomUUID().toString();  String[] args={"--port=0","--bindAddress=" + bindAddress,"--sandbox=" + this.tmpFolder.getRoot().getAbsolutePath(),"--id=" + hostId};  this.sampleHost.initialize(args);  this.sampleHost.start();  assertEquals(bindAddress,this.sampleHost.getPreferredAddress());  assertEquals(bindAddress,this.sampleHost.getUri().getHost());  assertEquals(hostId,this.sampleHost.getId());  assertEquals(this.sampleHost.getUri(),this.sampleHost.getPublicUri());}  }
class C{  public void addFileTransferInvitationRejected(ContactId remoteContact,MmContent content,MmContent fileIcon,FileTransfer.ReasonCode reasonCode,long timestamp,long timestampSent){  mFileTransferService.addFileTransferInvitationRejected(remoteContact,content,fileIcon,reasonCode,timestamp,timestampSent);}  }
class C{  public void testSubmitQuery() throws Throwable {  Connection connection=mock(Connection.class);  when(connection.send(any(QueryRequest.class))).thenReturn(CompletableFuture.completedFuture(QueryResponse.builder().withStatus(Response.Status.OK).withIndex(10).withResult("Hello world!").build()));  ClientSessionState state=new ClientSessionState(UUID.randomUUID()).setSessionId(1).setState(Session.State.OPEN);  Executor executor=new MockExecutor();  ThreadContext context=mock(ThreadContext.class);  when(context.executor()).thenReturn(executor);  ClientSessionSubmitter submitter=new ClientSessionSubmitter(connection,state,new ClientSequencer(state),context);  assertEquals(submitter.submit(new TestQuery()).get(),"Hello world!");  assertEquals(state.getResponseIndex(),10);}  }
class C{  private boolean isAuthor(ProductReview reviewToBeRemoved){  if (getLoggedInUser().equals(reviewToBeRemoved.getPlatformUser())) {    return true;  } else   return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.677 -0500",hash_original_method="32932F147EA25CC7B7BC47F740C6BF91",hash_generated_method="0DC811C156890046C4A2AB310C83BF76") public boolean isHeaderList(){  return true;}  }
class C{  public void header(int version,long length,int twipsWidth,int twipsHeight,int frameRate,int frameCount) throws IOException {  tagtypes.header(version,length,twipsWidth,twipsHeight,frameRate,frameCount);}  }
class C{  @Override public void generateCode(BlockScope currentScope,boolean valueRequired){}  }
class C{  public static void subOverflow(final long offset,final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions,final OperandSize firstOperandSize,final String firstOperand,final OperandSize secondOperandSize,final String secondOperand,final OperandSize resultOperandSize,final String resultOperand,final String overflow,final long size){  final OperandSize bt=OperandSize.BYTE;  final OperandSize wd=OperandSize.WORD;  final String msbVara=environment.getNextVariableString();  final String msbVarb=environment.getNextVariableString();  final String msbVarr=environment.getNextVariableString();  final String tmpVar3=environment.getNextVariableString();  final String tmpVar4=environment.getNextVariableString();  final String shiftVal="-" + String.valueOf(size - 1);  long baseOffset=offset;  instructions.add(ReilHelpers.createBsh(baseOffset++,firstOperandSize,firstOperand,wd,shiftVal,bt,msbVara));  instructions.add(ReilHelpers.createBsh(baseOffset++,secondOperandSize,secondOperand,wd,shiftVal,bt,msbVarb));  instructions.add(ReilHelpers.createBsh(baseOffset++,resultOperandSize,resultOperand,wd,shiftVal,bt,msbVarr));  instructions.add(ReilHelpers.createAnd(baseOffset++,bt,msbVara,bt,String.valueOf(1),bt,msbVara));  instructions.add(ReilHelpers.createAnd(baseOffset++,bt,msbVarb,bt,String.valueOf(1),bt,msbVarb));  instructions.add(ReilHelpers.createAnd(baseOffset++,bt,msbVarr,bt,String.valueOf(1),bt,msbVarr));  instructions.add(ReilHelpers.createXor(baseOffset++,bt,msbVara,bt,msbVarb,bt,tmpVar4));  instructions.add(ReilHelpers.createXor(baseOffset++,bt,msbVara,bt,msbVarr,bt,tmpVar3));  instructions.add(ReilHelpers.createAnd(baseOffset++,bt,tmpVar4,bt,tmpVar3,bt,overflow));}  }
class C{  void insertExceptionalPrologue(){  if (VM.VerifyAssertions) {    VM._assert((frameSize & (STACKFRAME_ALIGNMENT - 1)) == 0,"Stack frame alignment error");  }  if (frameSize >= 0x7ff0) {    throw new OptimizingCompilerException("Stackframe size exceeded!");  }  PhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet().asPPC();  Register FP=phys.getFP();  Register TR=phys.getTR();  Register TSR=phys.getTSR();  Register R0=phys.getTemp();  Register S1=phys.getGPR(LAST_SCRATCH_GPR);  boolean interruptible=ir.method.isInterruptible();  boolean stackOverflow=interruptible;  boolean yp=hasPrologueYieldpoint();  Instruction ptr=ir.firstInstructionInCodeOrder().nextInstructionInCodeOrder();  if (VM.VerifyAssertions)   VM._assert(ptr.getOpcode() == IR_PROLOGUE_opcode);  if (stackOverflow) {    ptr.insertBefore(MIR_Store.create(PPC_STAddr,A(S1),A(FP),IC(STACKFRAME_RETURN_ADDRESS_OFFSET.toInt())));    Offset offset=Entrypoints.stackLimitField.getOffset();    if (VM.VerifyAssertions)     VM._assert(fits(offset,16));    ptr.insertBefore(MIR_Load.create(PPC_LAddr,A(S1),A(phys.getTR()),IC(PPCMaskLower16(offset))));    ptr.insertBefore(MIR_Binary.create(PPC_ADDI,A(R0),A(S1),IC(frameSize)));    ptr.insertBefore(MIR_Load.create(PPC_LAddr,A(S1),A(FP),IC(STACKFRAME_RETURN_ADDRESS_OFFSET.toInt())));    MIR_Trap.mutate(ptr,PPC_TAddr,PowerPCTrapOperand.LESS(),A(FP),A(R0),TrapCodeOperand.StackOverflow());    ptr=ptr.nextInstructionInCodeOrder();  } else {    Instruction next=ptr.nextInstructionInCodeOrder();    ptr.remove();    ptr=next;  }  ptr.insertBefore(MIR_Move.create(PPC_MFSPR,A(R0),A(phys.getLR())));  ptr.insertBefore(MIR_StoreUpdate.create(PPC_STAddrU,A(FP),A(FP),IC(-frameSize)));  ptr.insertBefore(MIR_Store.create(PPC_STAddr,A(R0),A(FP),IC(frameSize + STACKFRAME_RETURN_ADDRESS_OFFSET.toInt())));  int cmid=ir.compiledMethod.getId();  if (cmid <= 0x7fff) {    ptr.insertBefore(MIR_Unary.create(PPC_LDI,I(R0),IC(cmid)));  } else {    ptr.insertBefore(MIR_Unary.create(PPC_LDIS,I(R0),IC(cmid >>> 16)));    ptr.insertBefore(MIR_Binary.create(PPC_ORI,I(R0),I(R0),IC(cmid & 0xffff)));  }  ptr.insertBefore(MIR_Store.create(PPC_STW,I(R0),A(FP),IC(STACKFRAME_METHOD_ID_OFFSET.toInt())));  if (ir.compiledMethod.isSaveVolatile()) {    saveVolatiles(ptr);  }  saveNonVolatiles(ptr);  if (yp) {    Offset offset=Entrypoints.takeYieldpointField.getOffset();    if (VM.VerifyAssertions)     VM._assert(fits(offset,16));    ptr.insertBefore(MIR_Load.create(PPC_LInt,I(R0),A(TR),IC(PPCMaskLower16(offset))));    ptr.insertBefore(MIR_Binary.create(PPC_CMPI,I(TSR),I(R0),IC(0)));  }}  }
class C{  protected int findClosest(Color c){  if (colorTab == null)   return -1;  int r=c.getRed();  int g=c.getGreen();  int b=c.getBlue();  int minpos=0;  int dmin=256 * 256 * 256;  int len=colorTab.length;  for (int i=0; i < len; ) {    int dr=r - (colorTab[i++] & 0xff);    int dg=g - (colorTab[i++] & 0xff);    int db=b - (colorTab[i] & 0xff);    int d=dr * dr + dg * dg + db * db;    int index=i / 3;    if (usedEntry[index] && (d < dmin)) {      dmin=d;      minpos=index;    }    i++;  }  return minpos;}  }
class C{  private void writeToFile(StringBuffer sb,String fileName){  try {    File out=new File(fileName);    Writer fw=new OutputStreamWriter(new FileOutputStream(out,false),"UTF-8");    for (int i=0; i < sb.length(); i++) {      char c=sb.charAt(i);      if (c == ';' || c == '}') {        fw.write(c);        if (sb.substring(i + 1).startsWith("//")) {        } else {        }      } else       if (c == '{') {        fw.write(c);      } else       fw.write(c);    }    fw.flush();    fw.close();    float size=out.length();    size/=1024;    log.info(out.getAbsolutePath() + " - " + size+ " kB");  } catch (  Exception ex) {    log.log(Level.SEVERE,fileName,ex);    throw new RuntimeException(ex);  }}  }
class C{  private Workflow.Method createForgetVolumesMethod(URI vplexSystemURI,List<VolumeInfo> volumeInfo){  return new Workflow.Method(FORGET_VOLUMES_METHOD_NAME,vplexSystemURI,volumeInfo);}  }
class C{  public boolean hasItem(final String item){  return priceCalculator.hasItem(item);}  }
class C{  public void traverseSubgraphLeftToRight(SalsaNodeVisitor.NodeVisitor nodeVisitor){  int currentEdgeArrayIndex=0;  double weightResetToQueryNode=0;  for (int i=0; i < numLeftNodesAdded; i++) {    long leftNode=subgraphLeftNodes[i];    int degree=subgraphLeftNodeDegree[i];    double weightPerEdge=(double)currentLeftNodes.get(leftNode) / (double)degree;    weightResetToQueryNode+=currentLeftNodes.get(leftNode) * salsaRequest.getResetProbability();    for (int j=0; j < degree; j++) {      long rightNode=subgraphEdgesArray[currentEdgeArrayIndex];      byte edgeType=subgraphEdgeTypesArray[currentEdgeArrayIndex];      currentEdgeArrayIndex++;      int numVisits=visitRightNode(nodeVisitor,leftNode,rightNode,edgeType,weightPerEdge);      salsaStats.updateVisitStatsPerRightNode(numVisits);    }  }  salsaStats.addToNumRHSVisits(currentEdgeArrayIndex);  resetCurrentLeftNodes(salsaRequest.getQueryNode(),(int)weightResetToQueryNode);}  }
class C{  public static boolean hasGingerbread(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD;}  }
class C{  public boolean canHaveInsufficientEnergy(){  return true;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private List<SubscriptionHistory> loadSubscriptions(BillingDataRetrievalServiceLocal bdr){  if (unitKeys == null) {    return bdr.loadSubscriptionsForCustomer(organizationKey,periodStart,periodEnd,-1);  } else {    return bdr.loadSubscriptionsForCustomer(organizationKey,unitKeys,periodStart,periodEnd,-1);  }}  }
class C{  private int rank(Key key,Node x){  if (x == null)   return 0;  int cmp=key.compareTo(x.key);  if (cmp < 0)   return rank(key,x.left); else   if (cmp > 0)   return 1 + size(x.left) + rank(key,x.right); else   return size(x.left);}  }
class C{  public int format(boolean val,byte[] array,int off,int len){  if (len > 0) {    if (val) {      array[off]=(byte)'T';    } else {      array[off]=(byte)'F';    }    off++;  }  return off;}  }
class C{  public void animateFromZero(Integer endValue){  animateText(0,endValue);}  }
class C{  public static void timeUntil(final StringBuilder sbuf,final int seconds){  timeUntil(sbuf,seconds,false);}  }
class C{  public BulkUserImportException(){  super();}  }
class C{  public static synchronized void registerIdentityHandler(final IdentityHandler identityHandler){  if (identityHandler == null)   throw new IllegalArgumentException("Attempt to register null IdentityHandler");  LinkedList<IdentityHandler> newList=duplicateIdentityHandlers();  newList.remove(identityHandler);  newList.addFirst(identityHandler);  identityHandlers=newList;}  }
class C{  public static EventBean[] flatten(ArrayDeque<EventBean[]> eventVector){  if (eventVector.isEmpty()) {    return null;  }  if (eventVector.size() == 1) {    return eventVector.getFirst();  }  int totalElements=0;  for (  EventBean[] arr : eventVector) {    if (arr != null) {      totalElements+=arr.length;    }  }  if (totalElements == 0) {    return null;  }  EventBean[] result=new EventBean[totalElements];  int destPos=0;  for (  EventBean[] arr : eventVector) {    if (arr != null) {      System.arraycopy(arr,0,result,destPos,arr.length);      destPos+=arr.length;    }  }  return result;}  }
class C{  private boolean isCheck(Instruction inst){switch (inst.getOpcode()) {case NULL_CHECK_opcode:case BOUNDS_CHECK_opcode:case INT_ZERO_CHECK_opcode:case LONG_ZERO_CHECK_opcode:    return true;case TRAP_IF_opcode:  TrapCodeOperand tc=TrapIf.getTCode(inst);return tc.isNullPtr() || tc.isArrayBounds() || tc.isDivByZero();default :return false;}}  }
class C{  @Override public void addInstanceInfo(Instance ins){  if (m_Instances != null) {    try {      m_DistanceFunction.update(ins);    } catch (    Exception ex) {      ex.printStackTrace();    }  } else   if (m_Instances == null) {    throw new IllegalStateException("No instances supplied yet. Cannot update without" + "supplying a set of instances first.");  }}  }
class C{  CNBindingEnumeration(CNCtx ctx,boolean isLookedUpCtx,Hashtable<?,?> env){  String batch=(env != null ? (String)env.get(javax.naming.Context.BATCHSIZE) : null);  if (batch != null) {    try {      batchsize=Integer.parseInt(batch);    } catch (    NumberFormatException e) {      throw new IllegalArgumentException("Batch size not numeric: " + batch);    }  }  _ctx=ctx;  _ctx.incEnumCount();  this.isLookedUpCtx=isLookedUpCtx;  _env=env;  _bindingList=new BindingListHolder();  BindingIteratorHolder _bindingIterH=new BindingIteratorHolder();  _ctx._nc.list(0,_bindingList,_bindingIterH);  _bindingIter=_bindingIterH.value;  if (_bindingIter != null) {    more=_bindingIter.next_n(batchsize,_bindingList);  } else {    more=false;  }  counter=0;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public MessageBuilder appendCode(String language,String content){  return appendContent(language + "\n" + content,Styles.CODE_WITH_LANG);}  }
class C{  public static List<String> readLines(final Reader input) throws IOException {  BufferedReader reader=IOUtils.toBufferedReader(input);  List<String> list=new ArrayList<String>();  String line=reader.readLine();  while (line != null) {    list.add(line);    line=reader.readLine();  }  return list;}  }
class C{  public void testNoEventWhenDragOutOfFirstTouchableParentToItsTouchableParent(){  View topLevelTouchable=getViewByTestId("C");  View innerButton=getViewByTestId("A");  SingleTouchGestureGenerator gestureGenerator=createGestureGenerator();  gestureGenerator.startGesture(innerButton);  waitForBridgeAndUIIdle();  gestureGenerator.dragTo(topLevelTouchable,15).endGesture();  waitForBridgeAndUIIdle();  assertTrue(mRecordingModule.getCalls().isEmpty());}  }
class C{  public String globalInfo(){  return "Accepts batch or incremental classifier events and " + "produces a new data set with classifier predictions appended.";}  }
class C{  public int hashCode(){  return rp == null ? m : m + rp.hashCode();}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  s.writeInt(size());  int mask=elements.length - 1;  for (int i=head; i != tail; i=(i + 1) & mask)   s.writeObject(elements[i]);}  }
class C{  @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){  View v=inflater.inflate(R.layout.fragment_course_unit_video,container,false);  messageContainer=v.findViewById(R.id.message_container);  return v;}  }
class C{  public PrefixFilter(byte[][] keyPrefix){  if (keyPrefix == null)   throw new IllegalArgumentException();  if (keyPrefix.length == 0)   throw new IllegalArgumentException();  for (int i=0; i < keyPrefix.length; i++) {    if (keyPrefix[i] == null)     throw new IllegalArgumentException();  }  this.keyPrefix=keyPrefix;}  }
class C{  public void scrollRectToVisible(Rectangle rect){  if (fixedSelection < FIXED_NONE_BOUNDRY) {    Rectangle toScroll;    if (orientation != HORIZONTAL) {      toScroll=new Rectangle(getScrollX(),rect.getY(),rect.getSize().getWidth(),rect.getSize().getHeight() + itemGap);    } else {      toScroll=new Rectangle(rect.getX(),getScrollY(),rect.getSize().getWidth() + itemGap,rect.getSize().getHeight());    }    super.scrollRectToVisible(toScroll,this);  }}  }
class C{  public static double blackFormulaCashItmProbability(final Option.Type optionType,@Real final double strike,@Real final double forward,@StdDev final double stddev){  return blackFormulaCashItmProbability(optionType,strike,forward,stddev,0.0);}  }
class C{  private ApplicationConfig downloadApplicationConfig(final String configUrl){  final ApplicationConfigDownloader downloader=new ApplicationConfigDownloader(configUrl,requestHeaders);  final DownloadResult<ApplicationConfig> downloadResult=downloader.download();  if (downloadResult.error != null) {    Log.d("CHCP","Failed to download application config");    return null;  }  return downloadResult.value;}  }
class C{  public T caseBinary(Binary object){  return null;}  }
class C{  protected void onDocumentFailed(String url,Exception e){  String message=Logging.getMessage("generic.ExceptionWhileReading",url + ": " + e.getMessage());  Logging.logger().warning(message);}  }
class C{  public String toString(){  java.text.MessageFormat form=new java.text.MessageFormat(sun.security.util.ResourcesMgr.getString("NTSidPrimaryGroupPrincipal.name","sun.security.util.AuthResources"));  Object[] source={getName()};  return form.format(source);}  }
class C{  public Intent execute(Context context){  double[] values=new double[]{12,14,11,10,19};  int[] colors=new int[]{Color.BLUE,Color.GREEN,Color.MAGENTA,Color.YELLOW,Color.CYAN};  DefaultRenderer renderer=buildCategoryRenderer(colors);  renderer.setZoomButtonsVisible(true);  renderer.setZoomEnabled(true);  renderer.setChartTitleTextSize(20);  renderer.setDisplayValues(true);  renderer.setShowLabels(true);  SimpleSeriesRenderer r=renderer.getSeriesRendererAt(0);  r.setGradientEnabled(true);  r.setGradientStart(0,Color.BLUE);  r.setGradientStop(0,Color.GREEN);  r.setHighlighted(true);  Intent intent=ChartFactory.getPieChartIntent(context,buildCategoryDataset("Project budget",values),renderer,"Budget");  return intent;}  }
class C{  public void saveFile(){  DataPanel panel;  String filename;  AbstractSaver saver;  panel=getCurrentPanel();  if (panel == null) {    return;  }  filename=panel.getFilename();  if (filename.equals(DataPanel.TAB_INSTANCES)) {    saveFileAs();  } else {    saver=ConverterUtils.getSaverForFile(filename);    try {      saver.setFile(new File(filename));      saver.setInstances(panel.getInstances());      saver.writeBatch();      panel.setChanged(false);      setCurrentFilename(filename);    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public void scale(double value){  Transform3D other=new Transform3D();  other.setScale(value);  transform(other);}  }
class C{  public void hideFloatingActionButton(){  if (!mHidden) {    ObjectAnimator scaleX=ObjectAnimator.ofFloat(this,"scaleX",1,0);    ObjectAnimator scaleY=ObjectAnimator.ofFloat(this,"scaleY",1,0);    AnimatorSet animSetXY=new AnimatorSet();    animSetXY.playTogether(scaleX,scaleY);    animSetXY.setInterpolator(accelerateInterpolator);    animSetXY.setDuration(100);    animSetXY.start();    mHidden=true;  }}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:14.825 -0500",hash_original_method="3ADDFDCD3FB84301D1E5780B2C0B6096",hash_generated_method="AABE4865C1CC5E636F585E88017D1892") public URI(String scheme,String host,String path,String fragment) throws URISyntaxException {  this(scheme,null,host,-1,path,null,fragment);}  }
class C{  public static boolean isLeftToRight(Component c){  return c.getComponentOrientation().isLeftToRight();}  }
class C{  public void addRequestAsReplacement(ActionRequest request,LimitedQueueInfo queueInfo){  cancelPrevious(request.type());  addRequest(request,queueInfo);}  }
class C{  public long run(String[] args) throws Exception {  int size=Integer.parseInt(args[0]);  int nbatches=Integer.parseInt(args[1]);  int ncycles=Integer.parseInt(args[2]);  int[][] arrays=new int[ncycles][size];  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  doReps(oout,oin,sbuf,arrays,1);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,arrays,nbatches);  return System.currentTimeMillis() - start;}  }
class C{  private void loadPropertiesAsResource(Object context,String filename,Properties properties) throws IOException {  InputStream unbuffered;  if (null == filename) {    throw new PropertyFileNotFoundException("No property file name found" + " please check your command line parameters e.g. " + "-Dconfig.properties=/filename.properties ");  } else {    unbuffered=context.getClass().getResourceAsStream(filename);  }  if (unbuffered == null) {    throw new PropertyFileNotFoundException("Check " + "to see if the property file \"" + filename + "\" is installed and available in the class path.");  } else {    InputStream in=new BufferedInputStream(unbuffered);    properties.load(in);    in.close();    unbuffered.close();  }}  }
class C{  public DLSet(ASN1Encodable[] a){  super(a,false);}  }
class C{  public void testConstantScoreQuery() throws Exception {  Query term=new TermQuery(new Term("field","this"));  Query constantScore=new ConstantScoreQuery(new AssertNeedsScores(term,false));  assertEquals(5,searcher.search(constantScore,5).totalHits);}  }
class C{  public TagLib duplicate(boolean deepCopy){  TagLib tl=new TagLib(isCore);  tl.appendixTags=duplicate(this.appendixTags,deepCopy);  tl.displayName=this.displayName;  tl.ELClass=this.ELClass;  tl.exprTransformer=this.exprTransformer;  tl.isCore=this.isCore;  tl.nameSpace=this.nameSpace;  tl.nameSpaceAndNameSpaceSeperator=this.nameSpaceAndNameSpaceSeperator;  tl.nameSpaceSeperator=this.nameSpaceSeperator;  tl.shortName=this.shortName;  tl.tags=duplicate(this.tags,deepCopy);  tl.type=this.type;  tl.source=this.source;  tl.ignoreUnknowTags=this.ignoreUnknowTags;  return tl;}  }
class C{  public void visitFieldInsn(int opcode,String owner,String name,String desc){  if (mv != null) {    mv.visitFieldInsn(opcode,owner,name,desc);  }}  }
class C{  public AccountHeaderBuilder addProfiles(@NonNull IProfile... profiles){  if (this.mProfiles == null) {    this.mProfiles=new ArrayList<>();  }  Collections.addAll(this.mProfiles,IdDistributor.checkIds(profiles));  return this;}  }
class C{  JCERSAPrivateCrtKey(RSAPrivateCrtKeySpec spec){  this.modulus=spec.getModulus();  this.publicExponent=spec.getPublicExponent();  this.privateExponent=spec.getPrivateExponent();  this.primeP=spec.getPrimeP();  this.primeQ=spec.getPrimeQ();  this.primeExponentP=spec.getPrimeExponentP();  this.primeExponentQ=spec.getPrimeExponentQ();  this.crtCoefficient=spec.getCrtCoefficient();}  }
class C{  public void appendText(String text){  try {    this.outputStream.write(text.getBytes());  } catch (  IOException e) {    ProverUIActivator.getDefault().logError("Error printing a console message: >" + text + "<",e);  }}  }
class C{  public void run(){  String lastUsedPath=getDialogSetting(LAST_PATH_SETTING);  if (lastUsedPath == null) {    lastUsedPath="";  }  DirectoryDialog dialog=new DirectoryDialog(getShell(),SWT.MULTI);  dialog.setText("Class Folder Selection");  dialog.setFilterPath(lastUsedPath);  String res=dialog.open();  if (res == null) {    return;  }  IPath filterPath=new Path(dialog.getFilterPath());  IRuntimeClasspathEntry[] elems=new IRuntimeClasspathEntry[1];  IPath path=new Path(res).makeAbsolute();  elems[0]=JavaRuntime.newArchiveRuntimeClasspathEntry(path);  setDialogSetting(LAST_PATH_SETTING,filterPath.toOSString());  getViewer().addEntries(elems);}  }
class C{  public final void readShort(short[] pa,int start,int n) throws IOException {  for (int i=0; i < n; i++) {    pa[start + i]=readShort();  }}  }
class C{  public T caseIdentityEscapeSequence(IdentityEscapeSequence object){  return null;}  }
class C{  @Override public void verifyImageServerAndImportExistingImages(AsyncTask task,String opName){  TaskCompleter completer=null;  log.info("Verifying imageServer and importing any existing images on to the server");  try {    URI computeImageServerID=task._id;    completer=new ComputeImageServerCompleter(computeImageServerID,task._opId,OperationTypeEnum.IMAGESERVER_VERIFY_IMPORT_IMAGES,EVENT_SERVICE_TYPE);    Workflow workflow=workflowService.getNewWorkflow(this,IMAGESERVER_VERIFY_IMPORT_IMAGE_WF,true,task._opId);    workflow.createStep(IMAGESERVER_VERIFICATION_STEP,String.format("Verfiying ImageServer %s",computeImageServerID),null,computeImageServerID,computeImageServerID.toString(),this.getClass(),new Workflow.Method("verifyComputeImageServer",computeImageServerID),null,null);    List<ComputeImage> computeImageList=getAllComputeImages();    if (!CollectionUtils.isEmpty(computeImageList)) {      ComputeImageServer imageServer=dbClient.queryObject(ComputeImageServer.class,computeImageServerID);      for (      ComputeImage computeImage : computeImageList) {        if (null == imageServer.getComputeImages() || !imageServer.getComputeImages().contains(computeImage.getId().toString())) {          StringBuilder msg=new StringBuilder("Importing image ");          msg.append(computeImage.getLabel()).append(" on to imageServer - ");          msg.append(imageServer.getImageServerIp()).append(".");          workflow.createStep(IMAGESERVER_IMPORT_IMAGES_STEP,msg.toString(),IMAGESERVER_VERIFICATION_STEP,computeImageServerID,computeImageServerID.toString(),this.getClass(),new Workflow.Method("importImageMethod",computeImage.getId(),imageServer,opName),null,null);        }      }    }    workflow.executePlan(completer,SUCCESS);  } catch (  Exception ex) {    log.error("Unexpected exception waiting for finish: " + ex.getMessage(),ex);  }}  }
class C{  public void receiveErrordeleteServiceSession(java.lang.Exception e){}  }
class C{  public PutIndexedScriptRequest version(long version){  this.version=version;  return this;}  }
class C{  private static String encode(final String txt){  try {    return URLEncoder.encode(txt,Charset.defaultCharset().name());  } catch (  final UnsupportedEncodingException ex) {    throw new IllegalStateException(ex);  }}  }
class C{  public AllSuperTypesCollector(ContainerType<?> type){  super(type);  result=Lists.newArrayList();}  }
class C{  public void refreshRow() throws SQLException {  checkUpdatable();  rowUpdater.refreshRow();  fbFetcher.updateRow(rowUpdater.getOldRow());  notifyRowUpdater();}  }
class C{  private void showInternalServerErrorMessage(){  CommonDialogUtils.stopProgressDialog(progressDialog);  CommonDialogUtils.getAlertDialogWithOneButtonAndTitle(context,getResources().getString(R.string.title_head_connection_error),getResources().getString(R.string.error_internal_server),getResources().getString(R.string.button_ok),null);}  }
class C{  public static int abs(int i){  return (i < 0) ? -i : i;}  }
class C{  public void forEach(IntConsumer action){  while (iterator.hasNext()) {    action.accept(iterator.nextInt());  }}  }
class C{  public static boolean isEmpty(String s){  if (s == null)   return true;  if (s.trim().length() == 0)   return true;  return false;}  }
class C{  public final char readChar() throws IOException {  mPosition+=2;  d.readFully(w,0,2);  return (char)((w[1] & 0xff) << 8 | (w[0] & 0xff));}  }
class C{  public static double estimateUnknownP(long n,long k){  checkInputs(n,k);  if (n == 0) {    return 0.5;  } else {    return ((double)k / (double)n);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.572 -0500",hash_original_method="F300FF32E0091AB2C24307358D9DBEF4",hash_generated_method="B12EBE8CBD10D6776801D1AE7C3F1A73") public static boolean isPotentialEmergencyNumber(String number){  return isEmergencyNumberInternal(number,false);}  }
class C{  public com.emc.storageos.vasa.VasaServiceStub.QueryAssociatedCapabilityForFileSystemResponse queryAssociatedCapabilityForFileSystem(com.emc.storageos.vasa.VasaServiceStub.QueryAssociatedCapabilityForFileSystem queryAssociatedCapabilityForFileSystem37) throws java.rmi.RemoteException, com.emc.storageos.vasa.NotImplemented, com.emc.storageos.vasa.InvalidArgument, com.emc.storageos.vasa.InvalidSession, com.emc.storageos.vasa.StorageFault {  org.apache.axis2.context.MessageContext _messageContext=null;  try {    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[18].getName());    _operationClient.getOptions().setAction("urn:queryAssociatedCapabilityForFileSystem");    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");    _messageContext=new org.apache.axis2.context.MessageContext();    org.apache.axiom.soap.SOAPEnvelope env=null;    env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),queryAssociatedCapabilityForFileSystem37,optimizeContent(new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/","queryAssociatedCapabilityForFileSystem")));    _serviceClient.addHeadersToEnvelope(env);    _messageContext.setEnvelope(env);    _operationClient.addMessageContext(_messageContext);    _operationClient.execute(true);    org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);    org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();    java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),com.emc.storageos.vasa.VasaServiceStub.QueryAssociatedCapabilityForFileSystemResponse.class,getEnvelopeNamespaces(_returnEnv));    return (com.emc.storageos.vasa.VasaServiceStub.QueryAssociatedCapabilityForFileSystemResponse)object;  } catch (  org.apache.axis2.AxisFault f) {    org.apache.axiom.om.OMElement faultElt=f.getDetail();    if (faultElt != null) {      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {        try {          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);          java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});          m.invoke(ex,new java.lang.Object[]{messageObject});          if (ex instanceof com.emc.storageos.vasa.NotImplemented) {            throw (com.emc.storageos.vasa.NotImplemented)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidArgument) {            throw (com.emc.storageos.vasa.InvalidArgument)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidSession) {            throw (com.emc.storageos.vasa.InvalidSession)ex;          }          if (ex instanceof com.emc.storageos.vasa.StorageFault) {            throw (com.emc.storageos.vasa.StorageFault)ex;          }          throw new java.rmi.RemoteException(ex.getMessage(),ex);        } catch (        java.lang.ClassCastException e) {          throw f;        }catch (        java.lang.ClassNotFoundException e) {          throw f;        }catch (        java.lang.NoSuchMethodException e) {          throw f;        }catch (        java.lang.reflect.InvocationTargetException e) {          throw f;        }catch (        java.lang.IllegalAccessException e) {          throw f;        }catch (        java.lang.InstantiationException e) {          throw f;        }      } else {        throw f;      }    } else {      throw f;    }  } finally {    _messageContext.getTransportOut().getSender().cleanup(_messageContext);  }}  }
class C{  public FastStringWriter(int initialCapacity){  if (initialCapacity < 0) {    throw new IllegalArgumentException();  }  builder=new StringBuilder(initialCapacity);}  }
class C{  public RelativeDateFormat(){  this(0L);}  }
class C{  @Override public ResultSet executeQuery(String sql) throws SQLException {  try {    int id=getNextId(TraceObject.RESULT_SET);    if (isDebugEnabled()) {      debugCodeAssign("ResultSet",TraceObject.RESULT_SET,id,"executeQuery(" + quote(sql) + ")");    }synchronized (session) {      checkClosed();      closeOldResultSet();      sql=JdbcConnection.translateSQL(sql,escapeProcessing);      CommandInterface command=conn.prepareCommand(sql,fetchSize);      ResultInterface result;      boolean scrollable=resultSetType != ResultSet.TYPE_FORWARD_ONLY;      boolean updatable=resultSetConcurrency == ResultSet.CONCUR_UPDATABLE;      setExecutingStatement(command);      try {        result=command.executeQuery(maxRows,scrollable);      }  finally {        setExecutingStatement(null);      }      command.close();      resultSet=new JdbcResultSet(conn,this,result,id,closedByResultSet,scrollable,updatable);    }    return resultSet;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void selectMapElement(MapElement mapElement){  panel.selectMapElement(mapElement);}  }
class C{  public TestLinkServer(Socket s){  super(s);}  }
class C{  private static final String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  private void checkRollback(){  if (CollectionUtil.isEmpty(mDownloadFilesSkip)) {    return;  }  for (  DownloadFileInfo downloadFileInfo : mDownloadFilesSkip) {    if (downloadFileInfo == null) {      continue;    }    String oldDirPath=mOldFileDir.get(downloadFileInfo.getUrl());    if (!FileUtil.isFilePath(oldDirPath) || oldDirPath.equals(downloadFileInfo.getFileDir())) {      continue;    }    try {      mDownloadFileMover.moveDownloadFile(downloadFileInfo.getUrl(),oldDirPath);    } catch (    Exception e) {      e.printStackTrace();      try {        mDownloadFileMover.moveDownloadFile(downloadFileInfo.getUrl(),oldDirPath);      } catch (      Exception e1) {        e1.printStackTrace();      }    }  }}  }
class C{  public static FocusListener remove(FocusListener l,FocusListener oldl){  return (FocusListener)removeInternal(l,oldl);}  }
class C{  private static void analyzeNewStringSetContainsOldStringSetValues(StringSet a,StringSet b,String name,HashMap<String,Change> changes){  if (a != null) {    Iterator<String> iter=a.iterator();    while (iter.hasNext()) {      String val=iter.next();      if (b != null && b.contains(val)) {        continue;      }      String key=name + "." + val;      Change change=new Change(key,val,null,name);      changes.put(key,change);    }  } else   if (a == null && b != null) {    String key=name;    Change change=new Change(key,null,NOT_NULL,name);    changes.put(key,change);  }}  }
class C{  public XMLReaderAdapter() throws SAXException {  setup(XMLReaderFactory.createXMLReader());}  }
class C{  public static String intToString(int i,int radix){  if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX) {    radix=10;  }  if (radix == 10) {    return intToString(i);  }  boolean negative=false;  if (i < 0) {    negative=true;  } else {    i=-i;  }  int bufLen=radix < 8 ? 33 : 12;  char[] buf=new char[bufLen];  int cursor=bufLen;  do {    int q=i / radix;    buf[--cursor]=DIGITS[radix * q - i];    i=q;  } while (i != 0);  if (negative) {    buf[--cursor]='-';  }  return new String(cursor,bufLen - cursor,buf);}  }
class C{  public Terrain(int terrainSize,float scale,float minY,float maxY,String heightMapFile,String textureFile,int textInc) throws Exception {  this.terrainSize=terrainSize;  gameItems=new GameItem[terrainSize * terrainSize];  BufferedImage heightMapImage=ImageIO.read(getClass().getResourceAsStream(heightMapFile));  verticesPerCol=heightMapImage.getWidth() - 1;  verticesPerRow=heightMapImage.getHeight() - 1;  heightMapMesh=new HeightMapMesh(minY,maxY,heightMapImage,textureFile,textInc);  boundingBoxes=new Rectangle2D.Float[terrainSize][terrainSize];  for (int row=0; row < terrainSize; row++) {    for (int col=0; col < terrainSize; col++) {      float xDisplacement=(col - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getXLength();      float zDisplacement=(row - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getZLength();      GameItem terrainBlock=new GameItem(heightMapMesh.getMesh());      terrainBlock.setScale(scale);      terrainBlock.setPosition(xDisplacement,0,zDisplacement);      gameItems[row * terrainSize + col]=terrainBlock;      boundingBoxes[row][col]=getBoundingBox(terrainBlock);    }  }}  }
class C{  @SuppressWarnings("unchecked") public boolean loadThrottlesLayout(java.io.File f) throws java.io.IOException {  try {    ThrottlePrefs prefs=new ThrottlePrefs();    Element root=prefs.rootFromFile(f);    List<Element> throttles=root.getChildren("ThrottleFrame");    if ((throttles != null) && (throttles.size() > 0)) {      for (java.util.Iterator<Element> i=throttles.iterator(); i.hasNext(); ) {        ThrottleFrame tf=ThrottleFrameManager.instance().createThrottleFrame();        tf.setXml(i.next());        tf.toFront();      }    } else {      throttles=root.getChildren("ThrottleWindow");      for (java.util.Iterator<Element> i=throttles.iterator(); i.hasNext(); ) {        ThrottleWindow tw=ThrottleFrameManager.instance().createThrottleWindow();        tw.setXml(i.next());        tw.setVisible(true);      }      Element tlp=root.getChild("ThrottlesListPanel");      if (tlp != null) {        ThrottleFrameManager.instance().getThrottlesListPanel().setXml(tlp);      }    }  } catch (  org.jdom2.JDOMException ex) {    log.warn("Loading Throttles exception",ex);    return false;  }  return true;}  }
class C{  @Override public void draw(Canvas canvas){  Face face=mFace;  if (face == null) {    return;  }  float cx=translateX(face.getPosition().x + face.getWidth() / 2);  float cy=translateY(face.getPosition().y + face.getHeight() / 2);  canvas.drawCircle(cx,cy,FACE_POSITION_RADIUS,mFacePositionPaint);  canvas.drawText("id: " + getId(),cx + ID_X_OFFSET,cy + ID_Y_OFFSET,mIdPaint);  float xOffset=scaleX(face.getWidth() / 2.0f);  float yOffset=scaleY(face.getHeight() / 2.0f);  float left=cx - xOffset;  float top=cy - yOffset;  float right=cx + xOffset;  float bottom=cy + yOffset;  canvas.drawOval(left,top,right,bottom,mBoxPaint);}  }
class C{  public static void displayRows(List<List<String>> rows){  for (  List<String> row : rows) {    for (    String column : row) {      System.out.printf("%25s",column);    }    System.out.println();  }}  }
class C{  protected void convertImage(String srcFilename,String dstFilename) throws IOException {  BufferedImage originalImage=loadImage(srcFilename);  BufferedImage outputImage=getImageWithTransparency(originalImage,0,0);  outputImage=getScaled2x(outputImage);  savePNGImage(dstFilename,outputImage);}  }
class C{  public SurfaceType deriveSubType(String desc){  return new SurfaceType(this,desc);}  }
class C{  @Override public BaseContentEntry<?> parseEntry(Element element){  BaseContentEntry<?> entry=getEntry(element);  parseElement(element,entry);  return entry;}  }
class C{  public void mergeContactCapabilities(ContactId contact,Capabilities capabilities,RcsStatus contactType,RegistrationState registrationState,String displayName) throws ContactManagerException, FileAccessException {synchronized (mContactInfoCache) {    ContactInfo oldInfo=getContactInfoInternal(contact);    Capabilities contactCapabilities=oldInfo.getCapabilities();    CapabilitiesBuilder capBuilder;    if (contactCapabilities != null) {      capBuilder=new CapabilitiesBuilder(contactCapabilities);    } else {      capBuilder=new CapabilitiesBuilder();    }    if (capabilities.isCsVideoSupported()) {      capBuilder.setCsVideo(true);    }    if (capabilities.isFileTransferMsrpSupported()) {      capBuilder.setFileTransferMsrp(true);    }    if (capabilities.isFileTransferHttpSupported()) {      capBuilder.setFileTransferHttp(true);    }    if (capabilities.isFileTransferStoreForwardSupported()) {      capBuilder.setFileTransferStoreForward(true);    }    if (capabilities.isFileTransferThumbnailSupported()) {      capBuilder.setFileTransferThumbnail(true);    }    if (capabilities.isGeolocationPushSupported()) {      capBuilder.setGeolocationPush(true);    }    if (capabilities.isGroupChatStoreForwardSupported()) {      capBuilder.setGroupChatStoreForward(true);    }    if (capabilities.isImSessionSupported()) {      capBuilder.setImSession(true);    }    if (capabilities.isImageSharingSupported()) {      capBuilder.setImageSharing(true);    }    if (capabilities.isIPVideoCallSupported()) {      capBuilder.setIpVideoCall(true);    }    if (capabilities.isIPVoiceCallSupported()) {      capBuilder.setIpVoiceCall(true);    }    if (capabilities.isPresenceDiscoverySupported()) {      capBuilder.setPresenceDiscovery(true);    }    if (capabilities.isSipAutomata()) {      capBuilder.setSipAutomata(true);    }    if (capabilities.isSocialPresenceSupported()) {      capBuilder.setSocialPresence(true);    }    if (capabilities.isVideoSharingSupported()) {      capBuilder.setVideoSharing(true);    }    long timestampOfLastRequest=capabilities.getTimestampOfLastRequest();    if (timestampOfLastRequest != Capabilities.INVALID_TIMESTAMP) {      capBuilder.setTimestampOfLastRequest(timestampOfLastRequest);    }    long timestampOfLastResponse=capabilities.getTimestampOfLastResponse();    if (timestampOfLastResponse != Capabilities.INVALID_TIMESTAMP) {      capBuilder.setTimestampOfLastRequest(timestampOfLastResponse);    }    ContactInfo newInfo=new ContactInfo(oldInfo);    newInfo.setRcsStatus(contactType);    newInfo.setRegistrationState(registrationState);    newInfo.setCapabilities(capBuilder.build());    newInfo.setDisplayName(displayName);    if (newInfo.getCapabilities().equals(oldInfo.getCapabilities()) && newInfo.getRcsStatus() == oldInfo.getRcsStatus() && newInfo.getRegistrationState() == oldInfo.getRegistrationState() && (displayName == null ? oldInfo.getDisplayName() == null : displayName.equals(oldInfo.getDisplayName()))) {      return;    }    setContactInfoInternal(newInfo,oldInfo);  }}  }
class C{  public boolean simulate_natives(){  return soot.PhaseOptions.getBoolean(options,"simulate-natives");}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void fetch(SSLSocketFactory socketFactory,String host,int port,boolean secure,String path,int outerLoop,int innerLoop,int delay,int timeout) throws IOException {  InetSocketAddress address=new InetSocketAddress(host,port);  for (int i=0; i < outerLoop; i++) {    Socket socket=secure ? socketFactory.createSocket() : new Socket();    if (timeout >= 0) {      socket.setKeepAlive(true);      socket.setSoTimeout(timeout * 1000);    }    socket.connect(address);    OutputStream output=socket.getOutputStream();    PrintWriter writer=new PrintWriter(output);    try {      DataInputStream input=new DataInputStream(socket.getInputStream());      try {        for (int j=0; j < innerLoop; j++) {          android.util.Log.d("SSLSocketTest","GET https://" + host + path+ " HTTP/1.1");          writer.println("GET https://" + host + path+ " HTTP/1.1\r");          writer.println("Host: " + host + "\r");          writer.println("Connection: " + (j == innerLoop - 1 ? "Close" : "Keep-Alive") + "\r");          writer.println("\r");          writer.flush();          int length=-1;          boolean chunked=false;          String line=input.readLine();          if (line == null) {            throw new IOException("No response from server");          }          while (line != null && line.length() != 0) {            int dot=line.indexOf(':');            if (dot != -1) {              String key=line.substring(0,dot).trim();              String value=line.substring(dot + 1).trim();              if ("Content-Length".equalsIgnoreCase(key)) {                length=Integer.valueOf(value);              } else               if ("Transfer-Encoding".equalsIgnoreCase(key)) {                chunked="Chunked".equalsIgnoreCase(value);              }            }            line=input.readLine();          }          assertTrue("Need either content length or chunked encoding",length != -1 || chunked);          if (chunked) {            length=Integer.parseInt(input.readLine(),16);            while (length != 0) {              byte[] buffer=new byte[length];              input.readFully(buffer);              input.readLine();              length=Integer.parseInt(input.readLine(),16);            }            input.readLine();          } else {            byte[] buffer=new byte[length];            input.readFully(buffer);          }          try {            Thread.sleep(delay * 1000);          } catch (          InterruptedException ex) {          }        }      }  finally {        input.close();      }    }  finally {      writer.close();    }    socket.close();  }}  }
class C{  public TemporaryView(Table table,Selection rowSelection){  this.name=table.name();  this.rowMap=rowSelection;  this.table=table;}  }
class C{  public static int signedLeb128Size(int value){  int remaining=value >> 7;  int count=0;  boolean hasMore=true;  int end=((value & Integer.MIN_VALUE) == 0) ? 0 : -1;  while (hasMore) {    hasMore=(remaining != end) || ((remaining & 1) != ((value >> 6) & 1));    value=remaining;    remaining>>=7;    count++;  }  return count;}  }
class C{  private void validateSearchParameters(Map<String,List<String>> params,String[] criterias){  if (!isValidSearch(params,criterias)) {    throw APIException.badRequests.invalidParameterSearchMissingParameter(getResourceClass().getName(),Arrays.toString(criterias));  }  List<String> unacceptableKeys=new ArrayList<String>();  List<String> acceptableKeys=new ArrayList<String>();  boolean found=false;  for (  Map.Entry<String,List<String>> entry : params.entrySet()) {    found=false;    for (    String search : criterias) {      if (entry.getKey().equals(search)) {        found=true;        acceptableKeys.add(entry.getKey());      }    }    if (!found) {      unacceptableKeys.add(entry.getKey());    }  }  if (acceptableKeys.size() > 1) {    throw APIException.badRequests.parameterForSearchCouldNotBeCombinedWithAnyOtherParameter(getResourceClass().getName(),Arrays.toString(criterias),acceptableKeys.toString());  }  if (!unacceptableKeys.isEmpty()) {    throw APIException.badRequests.parameterForSearchCouldNotBeCombinedWithAnyOtherParameter(getResourceClass().getName(),Arrays.toString(criterias),unacceptableKeys.toString());  }}  }
class C{  public void init(){  for (int index=0; index < Period.THREAD; index++) {    this.threads.execute(this);  }}  }
class C{  public synchronized void checkState(State... requiredStates) throws IllegalStateException {  for (  State requiredState : requiredStates) {    if (requiredState.equals(currentState)) {      return;    }  }  throw new IllegalStateException(String.format(Locale.US,"Expected states %s, but in state %s",Lists.newArrayList(requiredStates),currentState));}  }
class C{  public void updateShaders(float partialTicks){  if (this.isRequired() && this.canUseShaders()) {    if (this.worldShader == null) {      this.worldShader=new WorldShader().init();    }    if (this.blitBuffer == null) {      this.blitBuffer=new ResizableFramebuffer(false);    }    if (this.toneMappingShader == null && this.isHDRActive()) {      this.toneMappingShader=new Tonemapper().init();    }    this.worldShader.updateDepthBuffer();    this.worldShader.updateMatrices();    this.worldShader.updateTextures(partialTicks);  }}  }
class C{  @SuppressWarnings("unchecked") private HashMap<String,DBObject> loadDBObjects(Class objectClass){  HashMap<String,DBObject> objectMap=new HashMap<String,DBObject>();  DBObject dbObject=new DBObject(this,objectClass);  String objectToLoad=s_logger.localizeMessage("object");  String objectsToLoad=s_logger.localizeMessage("objects");  String sqlLoadHeaders=null;  String sqlLoadContents=null;  if (dbObject != null) {    objectToLoad=dbObject.getObjectType();    objectsToLoad=dbObject.getObjectTypes();    sqlLoadHeaders=dbObject.getLoadHeaderSQL();    sqlLoadContents=dbObject.getLoadContentSQL();  }  s_logger.log(Level.FINE,"loadDBObjects",new Object[]{objectsToLoad,getDirection()});  PreparedStatementWrapper stmtLoadHeaders=setPreparedStatement(sqlLoadHeaders);  PreparedStatementWrapper stmtLoadContents=setPreparedStatement(sqlLoadContents);  int counter=0;  if (dbObject != null) {    String sql=dbObject.getLoadObjectSQL();    Statement stmt=setStatement();    ResultSet rs=executeQuery(stmt,sql);    while (getResultSetNext(rs)) {      String s=getResultSetString(rs,"OBJECT_NAME");      if (!objectMap.containsKey(s)) {        DBObject obj=new DBObject(this,objectClass,s);        obj.populate(stmtLoadHeaders,stmtLoadContents);        if (obj.isPopulated()) {          objectMap.put(s.toUpperCase(),obj);          counter++;        }      }    }    releaseResultSet(rs);    releaseStatement(stmt);  }  releasePreparedStatement(stmtLoadHeaders);  releasePreparedStatement(stmtLoadContents);  if (counter == 1)   s_logger.log(Level.FINE,"dbObjectsLoaded",new Object[]{Integer.toString(counter),objectToLoad}); else   s_logger.log(Level.FINE,"dbObjectsLoaded",new Object[]{Integer.toString(counter),objectsToLoad});  s_logger.flush();  return objectMap;}  }
class C{  public void init(CipherParameters param){  if (!(param instanceof ECPrivateKeyParameters)) {    throw new IllegalArgumentException("ECPrivateKeyParameters are required for decryption.");  }  this.key=(ECPrivateKeyParameters)param;}  }
class C{  protected Node newNode(){  return new SVGOMMarkerElement();}  }
class C{  public Object decode(Object value) throws DecoderException {  if (value == null) {    return null;  } else   if (value instanceof String) {    return decode((String)value);  } else {    throw new DecoderException("Objects of type " + value.getClass().getName() + " cannot be decoded using BCodec");  }}  }
class C{  @Override public boolean execute(String action,JSONArray args,CallbackContext callbackContext){  this.callbackContext=callbackContext;  if (action.equals(ENCODE)) {    JSONObject obj=args.optJSONObject(0);    if (obj != null) {      String type=obj.optString(TYPE);      String data=obj.optString(DATA);      if (type == null) {        type=TEXT_TYPE;      }      if (data == null) {        callbackContext.error("User did not specify data to encode");        return true;      }      encode(type,data);    } else {      callbackContext.error("User did not specify data to encode");      return true;    }  } else   if (action.equals(SCAN)) {    scan(args);  } else {    return false;  }  return true;}  }
class C{  public WarMultiContextTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  public AbstractParsedURLProtocolHandler(String protocol){  this.protocol=protocol;}  }
