class C{  public void addDispatchedMessage(ThreadIdentifier tid,long sequenceId){  Long lastSequenceNumber=Long.valueOf(sequenceId);  boolean wasEmpty=false;  Long oldvalue=null;  Map internalMap=null;  while (true) {    internalMap=this.threadIdToSeqId.map;synchronized (internalMap) {      if (internalMap != this.threadIdToSeqId.map) {        continue;      } else {        wasEmpty=internalMap.isEmpty();        oldvalue=(Long)internalMap.put(tid,lastSequenceNumber);        if (ackedEvents != null) {          ackedEvents.put(tid,lastSequenceNumber);        }        if (oldvalue != null && oldvalue.compareTo(lastSequenceNumber) > 0) {          internalMap.put(tid,oldvalue);          if (ackedEvents != null) {            ackedEvents.put(tid,oldvalue);          }        }        break;      }    }  }  if (wasEmpty) {    Map tempDispatchedMessagesMap=dispatchedMessagesMap;    if (tempDispatchedMessagesMap != null) {      Object old=((ConcurrentMap)tempDispatchedMessagesMap).putIfAbsent(this.regionName,this.threadIdToSeqId);      if (isUsedByTest) {        testMarkerMessageRecieved=true;        if (logger.isDebugEnabled()) {          logger.debug("testIsAckRecieved: {}",testMarkerMessageRecieved);        }      }      Assert.assertTrue(old == null);    }  }}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4){  return ofEntries(entryOf(k1,v1),entryOf(k2,v2),entryOf(k3,v3),entryOf(k4,v4));}  }
class C{  public static boolean isMimeTypeAudio(String mimeType){  if (mimeType.equals(Const.ContentTypes.AUDIO_MP3)) {    return true;  } else   if (mimeType.equals(Const.ContentTypes.AUDIO_WAV)) {    return true;  }  return false;}  }
class C{  public int countLines(String fileName) throws IOException {  DataInputStream in=null;  BufferedReader br=null;  int count=0;  try {    FileInputStream fstream=new FileInputStream(fileName);    in=new DataInputStream(fstream);    br=new BufferedReader(new InputStreamReader(in));    String line=null;    while ((line=br.readLine().trim()) != null) {      count++;    }    fstream.close();  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    try {      if (in != null || br != null) {        in.close();        br.close();      }    } catch (    java.io.IOException ex) {    }    return count;  }}  }
class C{  public String seedTipText(){  return "Seed for the random number generator.";}  }
class C{  protected void addCallerPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Step_caller_feature"),getString("_UI_PropertyDescriptor_description","_UI_Step_caller_feature","_UI_Step_type"),SexecPackage.Literals.STEP__CALLER,true,false,true,null,null,null));}  }
class C{  public OFRoleRequestVendorData(int role){  super(NXT_ROLE_REQUEST,role);}  }
class C{  public void changeExploreEnablement(boolean isTrace){  buttonExplore.setEnabled(isTrace);}  }
class C{  public TypeBinding reportError(BlockScope scope){  if (this.binding instanceof ProblemFieldBinding) {    scope.problemReporter().invalidField(this,(FieldBinding)this.binding);  } else   if (this.binding instanceof ProblemReferenceBinding || this.binding instanceof MissingTypeBinding) {    scope.problemReporter().invalidType(this,(TypeBinding)this.binding);  } else {    scope.problemReporter().unresolvableReference(this,this.binding);  }  return null;}  }
class C{  @Override public boolean isSelected(Photo photo){  return getSelectedPhotos().contains(photo);}  }
class C{  protected void paintOriginLabel(Point2D originPnt,Graphics graphics,MapBean theMap){  if (theMap != null && originPnt != null) {    OMText text=new OMText(originPnt.getY(),originPnt.getX(),getOriginLabel(),OMText.JUSTIFY_CENTER);    text.setBaseline(OMText.BASELINE_BOTTOM);    text.putAttribute(OMGraphicConstants.NO_ROTATE,Boolean.TRUE);    prepareLabel(text);    text.generate(theMap.getRotatedProjection());    text.render(graphics);  }}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;}  }
class C{  public void attachView(@NonNull V view){  if (component == null) {    return;  }  component.getPresenter().attachView(view);}  }
class C{  void checkEndMethod(){  if (endMethod) {    throw new IllegalStateException("Cannot visit elements after visitEnd has been called.");  }}  }
class C{  protected void initSystemColorDefaults(UIDefaults table){  String[] defaultSystemColors={"desktop","#005C5C","activeCaption","#000080","activeCaptionText","#FFFFFF","activeCaptionBorder","#B24D7A","inactiveCaption","#AEB2C3","inactiveCaptionText","#000000","inactiveCaptionBorder","#AEB2C3","window","#AEB2C3","windowBorder","#AEB2C3","windowText","#000000","menu","#AEB2C3","menuText","#000000","text","#FFF7E9","textText","#000000","textHighlight","#000000","textHighlightText","#FFF7E9","textInactiveText","#808080","control","#AEB2C3","controlText","#000000","controlHighlight","#DCDEE5","controlLtHighlight","#DCDEE5","controlShadow","#63656F","controlLightShadow","#9397A5","controlDkShadow","#000000","scrollbar","#AEB2C3","info","#FFF7E9","infoText","#000000"};  loadSystemColors(table,defaultSystemColors,true);}  }
class C{  protected int validateRange(final int startIndex,int endIndex){  if (startIndex < 0) {    throw new StringIndexOutOfBoundsException(startIndex);  }  if (endIndex > size) {    endIndex=size;  }  if (startIndex > endIndex) {    throw new StringIndexOutOfBoundsException("end < start");  }  return endIndex;}  }
class C{  public void giveProduct(final EventRaiser npc,final Player player){  final String orderString=player.getQuest(questSlot);  final String[] order=orderString.split(";");  final int numberOfProductItems=Integer.parseInt(order[0]);  final String productName=order[1];  if (!isOrderReady(player)) {    npc.say("Welcome back! I'm still busy with your order to " + getProductionActivity() + " "+ Grammar.quantityplnoun(numberOfProductItems,productName,"a")+ " for you. Come back in "+ getApproximateRemainingTime(player)+ " to get it.");  } else {    final StackableItem products=(StackableItem)SingletonRepository.getEntityManager().getItem(productName);    products.setQuantity(numberOfProductItems);    if (isProductBound(productName)) {      products.setBoundTo(player.getName());    }    if (player.equipToInventoryOnly(products)) {      npc.say("Welcome back! I'm done with your order. Here you have " + Grammar.quantityplnoun(numberOfProductItems,productName,"the") + ".");      player.setQuest(questSlot,"done");      player.addXP(numberOfProductItems);      player.notifyWorldAboutChanges();      player.incProducedCountForItem(productName,products.getQuantity());      SingletonRepository.getAchievementNotifier().onProduction(player);    } else {      npc.say("Welcome back! I'm done with your order. But right now you cannot take the " + Grammar.plnoun(numberOfProductItems,productName) + ". Come back when you have space.");    }  }}  }
class C{  public RecursiveLibraryDirectoryPanel(boolean precheckFolders,File... roots){  this(precheckFolders,emptyFileSet(),roots);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ENUM___NAME_1:    return getName_1();case UmplePackage.ENUM___STATE_NAME_1:  return getStateName_1();case UmplePackage.ENUM___ANONYMOUS_ENUM_11:return getAnonymous_enum_1_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public PasteAction(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(res.getString("PasteAction.accelerator").charAt(0),Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  putValue(LONG_DESCRIPTION,res.getString("PasteAction.statusbar"));  putValue(NAME,res.getString("PasteAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("PasteAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("PasteAction.image")))));}  }
class C{  public static Grammar doTheMerges(Grammar grammar,Lexicon lexicon,boolean[][][] mergeThesePairs,double[][] mergeWeights){  short[] numSubStatesArray=grammar.numSubStates;  short[] newNumSubStatesArray=grammar.numSubStates;  Grammar newGrammar=null;  while (true) {    boolean somethingToMerge=false;    for (int tag=0; tag < numSubStatesArray.length; tag++) {      for (int i=0; i < newNumSubStatesArray[tag]; i++) {        for (int j=0; j < newNumSubStatesArray[tag]; j++) {          somethingToMerge=somethingToMerge || mergeThesePairs[tag][i][j];        }      }    }    if (!somethingToMerge)     break;    boolean[][][] mergeThisIteration=new boolean[newNumSubStatesArray.length][][];    for (int tag=0; tag < numSubStatesArray.length; tag++) {      mergeThisIteration[tag]=new boolean[mergeThesePairs[tag].length][mergeThesePairs[tag].length];      for (int i=0; i < mergeThesePairs[tag].length; i++) {        for (int j=0; j < mergeThesePairs[tag].length; j++) {          mergeThisIteration[tag][i][j]=mergeThesePairs[tag][i][j];        }      }    }    for (int tag=0; tag < numSubStatesArray.length; tag++) {      boolean[] alreadyDecidedToMerge=new boolean[mergeThesePairs[tag].length];      for (int i=0; i < mergeThesePairs[tag].length; i++) {        for (int j=0; j < mergeThesePairs[tag].length; j++) {          if (alreadyDecidedToMerge[i] || alreadyDecidedToMerge[j])           mergeThisIteration[tag][i][j]=false;          alreadyDecidedToMerge[i]=alreadyDecidedToMerge[i] || mergeThesePairs[tag][i][j];          alreadyDecidedToMerge[j]=alreadyDecidedToMerge[j] || mergeThesePairs[tag][i][j];        }      }    }    for (int tag=0; tag < numSubStatesArray.length; tag++) {      for (int i=0; i < mergeThesePairs[tag].length; i++) {        for (int j=0; j < mergeThesePairs[tag].length; j++) {          mergeThesePairs[tag][i][j]=mergeThesePairs[tag][i][j] && !mergeThisIteration[tag][i][j];        }      }    }    newGrammar=grammar.mergeStates(mergeThisIteration,mergeWeights);    lexicon.mergeStates(mergeThisIteration,mergeWeights);    grammar.fixMergeWeightsEtc(mergeThesePairs,mergeWeights,mergeThisIteration);    grammar=newGrammar;    newNumSubStatesArray=grammar.numSubStates;  }  grammar.makeCRArrays();  return grammar;}  }
class C{  public void sendPacket(byte[] packet,int count){  return;}  }
class C{  public void initFunTab(){  funTab=new FunctionTable();}  }
class C{  public ProfessionalExperience companies(List<Company> companies){  this.companies=companies;  return this;}  }
class C{  private void updateSeekBarsForSpringConfig(SpringConfig springConfig){  float tension=(float)OrigamiValueConverter.origamiValueFromTension(springConfig.tension);  float tensionRange=MAX_TENSION - MIN_TENSION;  int scaledTension=Math.round(((tension - MIN_TENSION) * MAX_SEEKBAR_VAL) / tensionRange);  float friction=(float)OrigamiValueConverter.origamiValueFromFriction(springConfig.friction);  float frictionRange=MAX_FRICTION - MIN_FRICTION;  int scaledFriction=Math.round(((friction - MIN_FRICTION) * MAX_SEEKBAR_VAL) / frictionRange);  mTensionSeekBar.setProgress(scaledTension);  mFrictionSeekBar.setProgress(scaledFriction);}  }
class C{  public SignalServiceDataMessage(long timestamp,SignalServiceGroup group,List<SignalServiceAttachment> attachments,String body,boolean endSession,int expiresInSeconds,boolean expirationUpdate){  this.timestamp=timestamp;  this.body=Optional.fromNullable(body);  this.group=Optional.fromNullable(group);  this.endSession=endSession;  this.expiresInSeconds=expiresInSeconds;  this.expirationUpdate=expirationUpdate;  if (attachments != null && !attachments.isEmpty()) {    this.attachments=Optional.of(attachments);  } else {    this.attachments=Optional.absent();  }}  }
class C{  private void processSync() throws ReplicatorException, IOException, InterruptedException {  Collection<LogFile> logFiles=logFileMap.values();  for (  LogFile logFile : logFiles) {    logFile.flush();  }}  }
class C{  public boolean isARBFloatBufferSupported(){  this.checkCapabilities();  return this.arbFloatBufferSupported;}  }
class C{  @Override public boolean canLoad(Entity unit){  boolean result=false;  return result;}  }
class C{  public void remove(){  if (containers != null) {    for (    Container container : containers) {      DockerClientFactory.build().removeContainerCmd(container.getId()).withForce(true).withRemoveVolumes(true).exec();    }  }}  }
class C{  public synchronized ExtentTest createNode(String name,String description){  ExtentTest t=new ExtentTest(extent,name,description);  t.getModel().setLevel(test.getLevel() + 1);  t.getModel().setParent(getModel());  test.getNodeContext().add(t.getModel());  extent.addNode(t.getModel());  return t;}  }
class C{  public boolean useAllRecords(){  return mUseAllRecords;}  }
class C{  public static Object invokeWithVarArg(int methodID,Address argAddress,TypeReference expectReturnType) throws Exception {  MethodReference mr=MemberReference.getMethodRef(methodID);  if (VM.BuildForPower64ELF_ABI) {    Object[] argObjectArray=packageParameterFromVarArg(mr,argAddress);    return callMethod(null,mr,argObjectArray,expectReturnType,true);  } else {    if (VM.VerifyAssertions)     VM._assert(VM.BuildForSVR4ABI);    Object[] argObjectArray=packageParameterFromVarArgSVR4(mr,argAddress);    return callMethod(null,mr,argObjectArray,expectReturnType,true);  }}  }
class C{  public static <T>CompletableFuture<T> completedFuture(T result){  return CompletableFuture.completedFuture(result);}  }
class C{  public SVGPath relativeSmoothCubicTo(double[] c2xy,double[] xy){  append(PATH_SMOOTH_CUBIC_TO_RELATIVE,c2xy[0],c2xy[1],xy[0],xy[1]);  return this;}  }
class C{  private String createTimerMomentWithFictionalProgressXML(String momentId,String nextMomentId,double lengthMinutes,String progressDescription){  String xml="";  xml+=createStartMomentXml("timer",momentId);  xml+=createNextMomentXml(nextMomentId);  xml+=createLengthMinutesXml(lengthMinutes);  xml+=createFictionalProgressXml(progressDescription);  xml+=createEndMomentXml();  return xml;}  }
class C{  public int length(){  return this.map.size();}  }
class C{  public void clear2LeadSearchLight(int bit){  if (nodeType != SMINI) {    log.error("Invalid setting of Searchlights bits - not SMINI node");    return;  }  if ((bit < 0) || (bit > 46)) {    log.error("Invalid bit number when setting SMINI Searchlights bits: " + Integer.toString(bit));    return;  }  if ((locSearchLightBits[bit] != 1) || (locSearchLightBits[bit + 1] != 1)) {    log.error("bit number for SMINI Searchlights bits already clear: " + Integer.toString(bit));    return;  }  locSearchLightBits[bit]=0;  locSearchLightBits[bit + 1]=0;  num2LSearchLights--;}  }
class C{  public EuclideanDistance(Instances data){  super(data);}  }
class C{  private void angularUnwatch(String name,String noteId,AngularObjectWatcher watcher){  AngularObjectRegistry registry=interpreterContext.getAngularObjectRegistry();  if (registry.get(name,noteId,null) != null) {    registry.get(name,noteId,null).removeWatcher(watcher);  }}  }
class C{  void calcRescaleFactors(){  logger.debug("calcRescaleFactors -- ");  ScreenDimensions.resizeX=spinnerWidth.getValue();  ScreenDimensions.resizeY=spinnerHeight.getValue();switch (ScreenDimensions.quality) {case Medium:    ScreenDimensions.resizeX=(int)(1.0 / 2 * ScreenDimensions.resizeX);  ScreenDimensions.resizeY=(int)(1.0 / 2 * ScreenDimensions.resizeY);break;case Low:ScreenDimensions.resizeX=(int)(3.0 / 8 * ScreenDimensions.resizeX);ScreenDimensions.resizeY=(int)(3.0 / 8 * ScreenDimensions.resizeY);break;case VeryHigh:case High:default :break;}logger.debug("resize: X:" + ScreenDimensions.resizeX + " Y: "+ ScreenDimensions.resizeY);updateVScreenBounds();}  }
class C{  public boolean hasBoundFALSE(){  return haveBoundFALSE;}  }
class C{  public void testGetTableList(){  System.out.println("getTableList");  ArrayList<TableEntry> expResult=new ArrayList<TableEntry>();  TableHelper instance=new TableHelper(expResult);  ArrayList<TableEntry> result=instance.getTableList();  assertEquals(expResult,result);}  }
class C{  public boolean areAnyPinned(RegisterSpecList oldSpecs,int newReg,int targetCategory){  int sz=oldSpecs.size();  for (int i=0; i < sz; i++) {    RegisterSpec oldSpec=oldSpecs.get(i);    int r=oldToNew(oldSpec.getReg());    if (r == newReg || (oldSpec.getCategory() == 2 && (r + 1) == newReg) || (targetCategory == 2 && (r == newReg + 1))) {      return true;    }  }  return false;}  }
class C{  @Ignore("TODO") @Test public void testMemoryFootprintOfHARegionQueuesWithAndWithoutOverflow() throws Exception {  serverVM0.invoke(null);  serverVM1.invoke(null);  Thread.sleep(2000);  Integer numOfEntries=new Integer(30);  PORT1=((Integer)serverVM0.invoke(null)).intValue();  PORT2=((Integer)serverVM1.invoke(null)).intValue();  serverVM0.invoke(null);  serverVM1.invoke(null);  createClientCache(getServerHostName(Host.getHost(0)),new Integer(PORT1),new Integer(PORT2),"1");  final String client1Host=getServerHostName(clientVM1.getHost());  clientVM1.invoke(null);  final String client2Host=getServerHostName(clientVM2.getHost());  clientVM2.invoke(null);  registerInterestListAll();  clientVM1.invoke(null);  clientVM2.invoke(null);  serverVM0.invoke(null);  Long usedMemInVM0=(Long)serverVM0.invoke(null);  Long usedMemInVM1=(Long)serverVM1.invoke(null);  serverVM0.invoke(null);  serverVM1.invoke(null);  logger.fine("Used Mem: " + usedMemInVM1.longValue() + "(without overflow), "+ usedMemInVM0.longValue()+ "(with overflow)");  assertTrue(usedMemInVM0.longValue() < usedMemInVM1.longValue());}  }
class C{  @Deprecated protected void editablePropertyChanged(PropertyChangeEvent e){}  }
class C{  public void addData(Map<E,String> data){  if (data != null) {    for (    E key : data.keySet()) {      add(key,data.get(key));    }  }}  }
class C{  public boolean isDeclaredAbstract(){  return declaredAbstract;}  }
class C{  public static String insertString(final String source,final String newEntry,final int position){  final StringBuilder sb=new StringBuilder();  sb.append(source.substring(0,position)).append(newEntry).append(source.substring(position));  return sb.toString();}  }
class C{  public int eval(INode state){  EightPuzzleNode node=(EightPuzzleNode)state;  int sumDistance=0;  sumDistance+=node.cell(1,0) - node.cell(1,2);  sumDistance+=node.cell(2,0) - node.cell(0,2);  sumDistance+=node.cell(2,1) - node.cell(0,1);  sumDistance+=node.cell(2,2) - node.cell(0,0);  return Math.abs(16 - sumDistance);}  }
class C{  @Override protected void onMessage(String target,String sender,String login,String hostname,String text){  Message message=new Message(text,sender);  Conversation conversation=server.getConversation(target);  if (isMentioned(text)) {    message.setColor(Message.COLOR_RED);    if (conversation.getStatus() != Conversation.STATUS_SELECTED || !server.getIsForeground()) {      service.addNewMention(server.getId(),conversation,target + ": " + sender+ " - "+ text,service.getSettings().isVibrateHighlightEnabled(),service.getSettings().isSoundHighlightEnabled(),service.getSettings().isLedHighlightEnabled());    }    conversation.setStatus(Conversation.STATUS_HIGHLIGHT);  }  conversation.addMessage(message);  Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target);  service.sendBroadcast(intent);}  }
class C{  public String put(String key,String value){  return put(key,value,false);}  }
class C{  @Override protected void addMessage(final String clientId,final FacesMessage.Severity severity,final String key,final Object[] params){  super.addMessage(clientId,severity,key,params);}  }
class C{  public long[] ensureCapacity(int additionalCapacity){  int sizeNeeded=size + additionalCapacity;  if (sizeNeeded >= items.length)   resize(Math.max(8,sizeNeeded));  return items;}  }
class C{  public Vertex parseFunctionByteCode(Vertex equation,BinaryData data,Network network) throws IOException {  return parseEquationByteCode(equation,data,network);}  }
class C{  @Override public StreamBuilderImpl<T,U> filter(PredicateSync<? super T> test){  return new FilterSync<T,U>(this,test);}  }
class C{  @SuppressWarnings("unchecked") public int compareValue(V value){  return getValue().compareTo(value);}  }
class C{  protected void recoverFile() throws IOException {  while (true) {switch (token) {case CLASS:case INTERFACE:      return;case LBRACE:    match(LBRACE,RBRACE);  scan();break;case LPAREN:match(LPAREN,RPAREN);scan();break;case LSQBRACKET:match(LSQBRACKET,RSQBRACKET);scan();break;case EOF:return;default :scan();break;}}}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.MAPPING_RULE;}  }
class C{  private static ContentValues createContentValuesFor(Category category){  ContentValues contentValues=new ContentValues();  contentValues.put(CategoryTable.COLUMN_SOLVED,category.isSolved());  contentValues.put(CategoryTable.COLUMN_SCORES,Arrays.toString(category.getScores()));  return contentValues;}  }
class C{  private static Field findField(Object instance,String name) throws NoSuchFieldException {  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {    try {      Field field=clazz.getDeclaredField(name);      if (!field.isAccessible()) {        field.setAccessible(true);      }      return field;    } catch (    NoSuchFieldException e) {    }  }  throw new NoSuchFieldException("Field " + name + " not found in "+ instance.getClass());}  }
class C{  public void addAll(PairedStats values){  if (values.count() == 0) {    return;  }  xStats.addAll(values.xStats());  if (yStats.count() == 0) {    sumOfProductsOfDeltas=values.sumOfProductsOfDeltas();  } else {    sumOfProductsOfDeltas+=values.sumOfProductsOfDeltas() + (values.xStats().mean() - xStats.mean()) * (values.yStats().mean() - yStats.mean()) * values.count();  }  yStats.addAll(values.yStats());}  }
class C{  public final void pushCurrentExpressionNode(int n){  m_currentExpressionNodes.push(n);}  }
class C{  public HadoopTaskStatus(HadoopTaskState state,@Nullable Throwable failCause){  this(state,failCause,null);}  }
class C{  @SuppressWarnings("unchecked") protected final T_State toHistoryState(final Class<? extends T_State> stateClass,final boolean deepHistory){  if (isStateEngine()) {    final T_State oldCurrentState=getCurrentState();    if (oldCurrentState != null) {      if (oldCurrentState.getClass().equals(stateClass)) {        onError(oldCurrentState,Error.ERROR_STATE_REENTERED);        return oldCurrentState;      }    }    T_State newCurrentState=getState(stateClass);    if (oldCurrentState != null && !newCurrentState.isSuperState(oldCurrentState)) {      oldCurrentState.exit(newCurrentState);    }    newCurrentState.onEnter();    if (deepHistory) {      newCurrentState=(T_State)newCurrentState.enterDeepHistory();    } else {      newCurrentState=(T_State)newCurrentState.enterShallowHistory();    }    currentState=newCurrentState;    currentState.onEnter();    return currentState;  } else {    return (T_State)getStateEngine().toHistoryState(stateClass,deepHistory);  }}  }
class C{  public Reference<? extends T> poll(){  if (head == null)   return null;synchronized (lock) {    return reallyPoll();  }}  }
class C{  public Object[] toArray(){  ArrayList<E> al=new ArrayList<E>();  for (Node<E> p=first(); p != null; p=succ(p)) {    E item=p.item;    if (item != null)     al.add(item);  }  return al.toArray();}  }
class C{  public static boolean isAncestor(Node node1,Node node2){  if (node1 == node2) {    return true;  }  Node ancestor=node2;  while (ancestor != null) {    if (ancestor == node1) {      return true;    }    ancestor=ancestor.parent();  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNodeNS05.class,args);}  }
class C{  public Point createPoint(){  PointImpl point=new PointImpl();  return point;}  }
class C{  @Override public void release(){  super.release();  ClientSingletonRepository.getSound().stop(sound,fadingDuration);}  }
class C{  public static org.apache.nutch.storage.Host.Builder newBuilder(org.apache.nutch.storage.Host.Builder other){  return new org.apache.nutch.storage.Host.Builder(other);}  }
class C{  public void onDestroy(){}  }
class C{  public void triplet(Object obj1,Object obj2,int x){  Object localObj;synchronized (obj1) {synchronized (obj1) {      if (x == 0) {synchronized (obj1) {          localObj=obj2;        }      } else {        localObj=obj1;      }    }  }  doNothing(localObj);}  }
class C{  public String toXml(){  Integer totalInt=txTotalAmount.multiply(new BigDecimal(100)).intValue();  StringBuffer xml=new StringBuffer("<ewaygateway>");  xml.append(createNode("ewayCustomerID",txCustomerID));  xml.append(createNode("ewayTotalAmount","" + totalInt));  xml.append(createNode("ewayCustomerInvoiceRef",txCustomerInvoiceRef));  xml.append(createNode("ewayCardExpiryMonth",txCardExpiryMonth));  xml.append(createNode("ewayCardExpiryYear",txCardExpiryYear));  if (requestMethod != REQUEST_METHOD_REFUND) {    xml.append(createNode("ewayCardHoldersName",txCardHoldersName));    xml.append(createNode("ewayCardNumber",txCardNumber));    xml.append(createNode("ewayTrxnNumber",txTrxnNumber));    xml.append(createNode("ewayCustomerInvoiceDescription",txCustomerInvoiceDescription));    xml.append(createNode("ewayCustomerFirstName",txCustomerFirstName));    xml.append(createNode("ewayCustomerLastName",txCustomerLastName));    xml.append(createNode("ewayCustomerEmail",txCustomerEmailAddress));    xml.append(createNode("ewayCustomerAddress",txCustomerAddress));    xml.append(createNode("ewayCustomerPostcode",txCustomerPostcode));  }  if (requestMethod == REQUEST_METHOD_CVN || requestMethod == REQUEST_METHOD_BEAGLE) {    xml.append(createNode("ewayCVN",txCVN));  }  xml.append(createNode("ewayOption1",txOption1));  xml.append(createNode("ewayOption2",txOption2));  xml.append(createNode("ewayOption3",txOption3));  if (requestMethod == REQUEST_METHOD_BEAGLE) {    xml.append(createNode("ewayCustomerIPAddress",txCustomerIPAddress));    xml.append(createNode("ewayCustomerBillingCountry",txCustomerBillingCountry));  }  if (requestMethod == REQUEST_METHOD_REFUND) {    xml.append(createNode("ewayOriginalTrxnNumber",txTrxnNumber));    xml.append(createNode("ewayRefundPassword",txRefundPassword));  }  xml.append("</ewaygateway>");  if (isTestMode()) {    Debug.logInfo("[eWay Request] : " + xml.toString(),module);  }  return xml.toString();}  }
class C{  public AbstractTLexer(CharStream input){  super(input);}  }
class C{  private List<NameValuePair> buildIPTParameters(Ipt ipt,String organisationKey){  List<NameValuePair> data=new ArrayList<NameValuePair>();  if (ipt != null && organisationKey != null) {    data.add(new BasicNameValuePair("organisationKey",StringUtils.trimToEmpty(organisationKey)));    data.add(new BasicNameValuePair("name",StringUtils.trimToEmpty(ipt.getName())));    data.add(new BasicNameValuePair("description",StringUtils.trimToEmpty(ipt.getDescription())));    data.add(new BasicNameValuePair("primaryContactType",StringUtils.trimToEmpty(ipt.getPrimaryContactType())));    data.add(new BasicNameValuePair("primaryContactName",StringUtils.trimToEmpty(ipt.getPrimaryContactName())));    data.add(new BasicNameValuePair("primaryContactEmail",StringUtils.trimToEmpty(ipt.getPrimaryContactEmail())));    data.add(new BasicNameValuePair("serviceTypes",SERVICE_TYPE_RSS));    data.add(new BasicNameValuePair("serviceURLs",getRssFeedURL()));  } else {    log.debug("One or both of IPT and Organisation key were null. Params needed for ws will be empty");  }  return data;}  }
class C{  public static boolean removeFromCache(String imageUri,DiskCache diskCache){  File image=diskCache.get(imageUri);  return image != null && image.exists() && image.delete();}  }
class C{  public boolean isModification(){  return modification;}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  if (null != m_arg2)   m_arg2.fixupVariables(vars,globalsSize);}  }
class C{  public static FloatBuffer allocate(int capacity){  if (capacity < 0) {    throw new IllegalArgumentException();  }  ByteBuffer bb=ByteBuffer.allocateDirect(capacity * 4);  bb.order(ByteOrder.nativeOrder());  return bb.asFloatBuffer();}  }
class C{  public RecursiveExpansionHandler(List<String> subResourceNames,String collectionName,String collectioneTag,DeltaHandler<ResourceNode> parentHandler){  if (log.isTraceEnabled()) {    log.trace("RecursiveExpansionHandler created for collection '" + collectionName + "' with a child count of "+ subResourceNames.size()+ ".");  }  this.xDeltaResponseNumber=new AtomicInteger(0);  this.processCount=new AtomicInteger(subResourceNames.size());  this.parentHandler=parentHandler;  this.collectionName=collectionName;  this.collectioneTag=collectioneTag;  resourceCollectionExceptionMap=new HashMap<>();  nodeMap=createEmptyNodeMap(subResourceNames);}  }
class C{  @Override public int put(final List<T> buffer,final int from,final int to) throws IOException {  int n=to - from;  if (buffer.size() > n) {    return put(buffer.subList(from,to),0,n);  }  n=buffer.size();  if (n < capacity) {    final int limit=capacity - items.size();    if (n > limit) {      items.removeAll(items.subList(0,n - limit));    }    if (!items.addAll(0,buffer)) {      throw new IOException("Failed to put " + n + " items");    }  } else {    items.clear();    if (!items.addAll(buffer.subList(n - capacity,n))) {      throw new IOException("Failed to put " + n + " items");    }  }  return n;}  }
class C{  public HttpReq(int connectTimeout,int readTimeout,String contentType,ArrayMap<String,String> headerMap){  resCode=0;  resMsg="na";  this.connectTimeout=connectTimeout;  this.readTimeout=readTimeout;  this.contentType=contentType;  this.headerMap=headerMap;}  }
class C{  public final Class toClass(ClassLoader loader) throws CannotCompileException {  return getClassPool().toClass(this,loader);}  }
class C{  public static String toString(int partition[][]){  StringBuilder sb=new StringBuilder();  sb.append("{");  for (int i=0; i < partition.length; i++) {    sb.append(" " + Arrays.toString(partition[i]));  }  sb.append(" }");  return sb.toString();}  }
class C{  protected void onPause(){}  }
class C{  public static void report(){  AOSLogging.logger.printControllerStats();}  }
class C{  @Override public int describeContents(){  return 0;}  }
class C{  public void run(){  boolean done=false;  String str;  int res;  boolean logged=false;  boolean waitpass=false;  try {    in=new BufferedReader(new InputStreamReader(client.getInputStream()));    out=new PrintWriter(client.getOutputStream(),true);    out.println("220 tatooine FTP server (SunOS 5.8) ready.");  } catch (  Exception ex) {    return;  }synchronized (FtpServer.this) {    while (!done) {      try {        str=in.readLine();        res=parseCmd(str);        if ((res > PASS && res != QUIT) && !logged) {          out.println("530 Not logged in.");          continue;        }switch (res) {case ERROR:          out.println("500 '" + str + "': command not understood.");        break;case USER:      if (!logged && !waitpass) {        username=str.substring(5);        password=null;        cwd=null;        if ("user2".equals(username)) {          out.println("230 Guest login ok, access restrictions apply.");          logged=true;        } else {          out.println("331 Password required for " + arg);          waitpass=true;        }      } else {        out.println("503 Bad sequence of commands.");      }    break;case PASS:  if (!logged && waitpass) {    out.println("230 Guest login ok, access restrictions apply.");    password=str.substring(5);    logged=true;    waitpass=false;  } else   out.println("503 Bad sequence of commands.");break;case QUIT:out.println("221 Goodbye.");out.flush();out.close();if (pasv != null) pasv.close();done=true;break;case TYPE:out.println("200 Type set to " + arg + ".");type=arg;break;case CWD:out.println("250 CWD command successful.");if (cwd == null) cwd=str.substring(4); else cwd=cwd + "/" + str.substring(4);break;case CDUP:out.println("250 CWD command successful.");break;case PWD:out.println("257 \"" + cwd + "\" is current directory");break;case PASV:if (!pasvEnabled) {out.println("500 PASV is disabled, use PORT instead.");continue;}try {if (pasv == null) pasv=new ServerSocket(0);int port=pasv.getLocalPort();out.println("227 Entering Passive Mode (127,0,0,1," + (port >> 8) + ","+ (port & 0xff)+ ")");} catch (IOException ssex) {out.println("425 Can't build data connection: Connection refused.");}break;case PORT:if (!portEnabled) {out.println("500 PORT is disabled, use PASV instead");continue;}StringBuffer host;int i=0, j=4;while (j > 0) {i=arg.indexOf(',',i + 1);if (i < 0) break;j--;}if (j != 0) {out.println("500 '" + arg + "': command not understood.");continue;}try {host=new StringBuffer(arg.substring(0,i));for (j=0; j < host.length(); j++) if (host.charAt(j) == ',') host.setCharAt(j,'.');String ports=arg.substring(i + 1);i=ports.indexOf(',');data_port=Integer.parseInt(ports.substring(0,i)) << 8;data_port+=(Integer.parseInt(ports.substring(i + 1)));data_addr=InetAddress.getByName(host.toString());out.println("200 Command okay.");} catch (Exception ex3) {data_port=0;data_addr=null;out.println("500 '" + arg + "': command not understood.");}break;case RETR:{filename=str.substring(5);OutputStream dout=getOutDataStream();if (dout != null) {out.println("200 Command okay.");PrintWriter pout=new PrintWriter(new BufferedOutputStream(dout));pout.println("Hello World!");pout.flush();pout.close();list=false;} else out.println("425 Can't build data connection: Connection refused.");}break;case NLST:filename=arg;case LIST:{OutputStream dout=getOutDataStream();if (dout != null) {out.println("200 Command okay.");PrintWriter pout=new PrintWriter(new BufferedOutputStream(dout));pout.println("total 130");pout.println("drwxrwxrwt   7 sys      sys          577 May 12 03:30 .");pout.println("drwxr-xr-x  39 root     root        1024 Mar 27 12:55 ..");pout.println("drwxrwxr-x   2 root     root         176 Apr 10 12:02 .X11-pipe");pout.println("drwxrwxr-x   2 root     root         176 Apr 10 12:02 .X11-unix");pout.println("drwxrwxrwx   2 root     root         179 Mar 30 15:09 .pcmcia");pout.println("drwxrwxrwx   2 jladen   staff        117 Mar 30 18:18 .removable");pout.println("drwxrwxrwt   2 root     root         327 Mar 30 15:08 .rpc_door");pout.println("-rw-r--r--   1 root     other         21 May  5 16:59 hello2.txt");pout.println("-rw-rw-r--   1 root     sys         5968 Mar 30 15:08 ps_data");pout.flush();pout.close();list=true;try {FtpServer.this.wait();} catch (Exception e) {}} else out.println("425 Can't build data connection: Connection refused.");}break;case STOR:{InputStream is=getInDataStream();if (is != null) {out.println("200 Command okay.");BufferedInputStream din=new BufferedInputStream(is);int val;do {val=din.read();} while (val != -1);din.close();} else out.println("425 Can't build data connection: Connection refused.");}break;}} catch (IOException ioe) {ioe.printStackTrace();try {out.close();} catch (Exception ex2) {}done=true;}}}}  }
class C{  @Override public void neighborChanged(IBlockState state,World worldIn,BlockPos pos,Block blockIn){  if (worldIn.isBlockPowered(pos)) {    this.explode(worldIn,pos,state,null);    worldIn.setBlockToAir(pos);  }}  }
class C{  private void checkRemoved() throws IllegalStateException {  if (rmvd)   throw removedError();  if (rmvCheck) {    try {      rmvd=atomicView.get(key) == null;    } catch (    IgniteCheckedException e) {      throw U.convertException(e);    }    rmvCheck=false;    if (rmvd) {      ctx.kernalContext().dataStructures().onRemoved(key,this);      throw removedError();    }  }}  }
class C{  public boolean isGlyphVisible(int glyphIndex){  return glyphVisible[glyphIndex];}  }
class C{  public void cancelTurnoutTimer(String sname){  for (int i=0; i < _actionList.size(); i++) {    ConditionalAction action=_actionList.get(i);    if ((action.getType() == Conditional.ACTION_DELAYED_TURNOUT) || (action.getType() == Conditional.ACTION_RESET_DELAYED_TURNOUT)) {      if (action.isTimerActive()) {        String devName=getDeviceName(action);        if (devName.equals(sname)) {          action.stopTimer();        } else {          Turnout tn=InstanceManager.turnoutManagerInstance().getTurnout(devName);          if (tn == null) {            log.error(getDisplayName() + " Unknown turnout *" + action.getDeviceName()+ " in cancelTurnoutTimer.");          } else           if (sname.equals(tn.getSystemName()) || sname.equals(tn.getUserName())) {            action.stopTimer();          }        }      }    }  }}  }
class C{  public static boolean isClientLevelOnly(int AD_Client_ID,int AD_Table_ID){  Boolean share=isShared(AD_Client_ID,AD_Table_ID);  if (share != null)   return share.booleanValue();  return false;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SMLA");  translateAll(environment,instruction,"SMLA",instructions);}  }
class C{  private static DialogueState reduce_light(DialogueState state,Collection<String> nodesToKeep){  DialogueState newState=new DialogueState(state,state.getEvidence());  for (  ChanceNode node : new ArrayList<ChanceNode>(newState.getChanceNodes())) {    if (!nodesToKeep.contains(node.getId())) {      CategoricalTable initDistrib=state.queryProb(node.getId(),false).toDiscrete();      for (      ChanceNode outputNode : node.getOutputNodes(ChanceNode.class)) {        MarginalDistribution newDistrib=new MarginalDistribution(outputNode.getDistrib(),initDistrib);        outputNode.setDistrib(newDistrib);      }      newState.removeNode(node.getId());    }  }  return newState;}  }
class C{  public static BigDecimal bomQtyAvailable(int p_M_Product_ID,int p_M_Warehouse_ID,int p_M_Locator_ID) throws SQLException {  return bomQty(p_M_Product_ID,p_M_Warehouse_ID,p_M_Locator_ID,"QtyOnHand").subtract(bomQty(p_M_Product_ID,p_M_Warehouse_ID,p_M_Locator_ID,"QtyReserved"));}  }
class C{  public Iterator<DiasporaPodUrl> iterator(){  return podUrls.iterator();}  }
class C{  public static JBBPOut BeginBin(final OutputStream out,final JBBPByteOrder byteOrder,final JBBPBitOrder bitOrder){  return new JBBPOut(out,byteOrder,bitOrder);}  }
class C{  public void detach(){}  }
class C{  public boolean verifyDrawable(Drawable who){  for (int i=0; i < mHolders.size(); ++i) {    if (who == get(i).getTopLevelDrawable()) {      return true;    }  }  return false;}  }
class C{  public Builder txTimeEnd(long time){  this.innerEndTimeInNanos=time;  return this;}  }
class C{  private void writeData(boolean close) throws IOException {  if (pos != 0 && (close || pos == chunk.length - 1)) {    HTable messages=null;    try {      messages=new HTable(conf,tableName);      Put put=new Put(key);      put.add(cf,Bytes.toBytes(chunkPos),Bytes.head(chunk,(int)pos + 1));      messages.put(put);      chunkPos++;      pos=0;    } catch (    IOException e) {      throw new IOException("Unable to write data",e);    } finally {      if (messages != null) {        messages.close();      }    }  }}  }
class C{  public final void testSetMinLength(){  int minLength=2;  MinLengthValidator minLengthValidator=new MinLengthValidator("foo",1);  minLengthValidator.setMinLength(minLength);  assertEquals(minLength,minLengthValidator.getMinLength());}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.509 -0500",hash_original_method="6C49285A06086C4B176330EBC83C2D3B",hash_generated_method="E7FBE6DA0D5B9B10EFF899381DE4E390") public void putFloatArray(String key,float[] value){  unparcel();  mMap.put(key,value);}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(StringUtilsTest.class);}  }
class C{  public void updateBitmap(float lt,float ln,int offset_x1,int offset_y1,int w,int h,byte[] bytes,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkBitmap.write(lt,ln,offset_x1,offset_y1,w,h,bytes,properties,link.dos);}  }
class C{  static KuzIntKey convertKey(byte[] key){  if (key.length != 32) {    throw new RuntimeException("Key might be 32 bytes length");  }  KuzIntKey kuz=new KuzIntKey();  Kuz128 c=new Kuz128(), x=new Kuz128(), y=new Kuz128(), z=new Kuz128();  for (int i=0; i < 16; i++) {    x.getB()[i]=key[i];    y.getB()[i]=key[i + 16];  }  kuz.getK()[0].set(x);  kuz.getK()[1].set(y);  for (int i=1; i <= 32; i++) {    c.setQ(0,0);    c.setQ(1,0);    c.getB()[15]=(byte)i;    KuznechikMath.kuz_l(c);    z.setQ(0,x.getQ(0) ^ c.getQ(0));    z.setQ(1,x.getQ(1) ^ c.getQ(1));    for (int j=0; j < 16; j++) {      z.getB()[j]=KuznechikTables.kuz_pi[(z.getB()[j] & 0xFF)];    }    KuznechikMath.kuz_l(z);    z.setQ(0,z.getQ(0) ^ y.getQ(0));    z.setQ(1,z.getQ(1) ^ y.getQ(1));    y.set(x);    x.set(z);    if ((i & 7) == 0) {      kuz.getK()[(i >> 2)].set(x);      kuz.getK()[(i >> 2) + 1].set(y);    }  }  return kuz;}  }
class C{  private void writeMatrix(DataOutputStream output,MLArray array) throws IOException {  OSArrayTag tag;  ByteArrayOutputStream buffer;  DataOutputStream bufferDOS;  ByteArrayOutputStream baos=new ByteArrayOutputStream();  DataOutputStream dos=new DataOutputStream(baos);  writeFlags(dos,array);  writeDimensions(dos,array);  writeName(dos,array);switch (array.getType()) {case MLArray.mxCHAR_CLASS:    buffer=new ByteArrayOutputStream();  bufferDOS=new DataOutputStream(buffer);Character[] ac=((MLChar)array).exportChar();for (int i=0; i < ac.length; i++) {bufferDOS.writeByte((byte)ac[i].charValue());}tag=new OSArrayTag(MatDataTypes.miUTF8,buffer.toByteArray());tag.writeTo(dos);break;case MLArray.mxDOUBLE_CLASS:tag=new OSArrayTag(MatDataTypes.miDOUBLE,((MLNumericArray)array).getRealByteBuffer());tag.writeTo(dos);if (array.isComplex()) {tag=new OSArrayTag(MatDataTypes.miDOUBLE,((MLNumericArray)array).getImaginaryByteBuffer());tag.writeTo(dos);}break;case MLArray.mxUINT8_CLASS:tag=new OSArrayTag(MatDataTypes.miUINT8,((MLNumericArray)array).getRealByteBuffer());tag.writeTo(dos);if (array.isComplex()) {tag=new OSArrayTag(MatDataTypes.miUINT8,((MLNumericArray)array).getImaginaryByteBuffer());tag.writeTo(dos);}break;case MLArray.mxSTRUCT_CLASS:int itag=4 << 16 | MatDataTypes.miINT32 & 0xffff;dos.writeInt(itag);dos.writeInt(((MLStructure)array).getMaxFieldLenth());tag=new OSArrayTag(MatDataTypes.miINT8,((MLStructure)array).getKeySetToByteArray());tag.writeTo(dos);for (MLArray a : ((MLStructure)array).getAllFields()) {writeMatrix(dos,a);}break;case MLArray.mxCELL_CLASS:for (MLArray a : ((MLCell)array).cells()) {writeMatrix(dos,a);}break;case MLArray.mxSPARSE_CLASS:int[] ai;buffer=new ByteArrayOutputStream();bufferDOS=new DataOutputStream(buffer);ai=((MLSparse)array).getIR();for (int i : ai) {bufferDOS.writeInt(i);}tag=new OSArrayTag(MatDataTypes.miINT32,buffer.toByteArray());tag.writeTo(dos);buffer=new ByteArrayOutputStream();bufferDOS=new DataOutputStream(buffer);ai=((MLSparse)array).getJC();for (int i : ai) {bufferDOS.writeInt(i);}tag=new OSArrayTag(MatDataTypes.miINT32,buffer.toByteArray());tag.writeTo(dos);buffer=new ByteArrayOutputStream();bufferDOS=new DataOutputStream(buffer);Double[] ad=((MLSparse)array).exportReal();for (int i=0; i < ad.length; i++) {bufferDOS.writeDouble(ad[i].doubleValue());}tag=new OSArrayTag(MatDataTypes.miDOUBLE,buffer.toByteArray());tag.writeTo(dos);if (array.isComplex()) {buffer=new ByteArrayOutputStream();bufferDOS=new DataOutputStream(buffer);ad=((MLSparse)array).exportImaginary();for (int i=0; i < ad.length; i++) {bufferDOS.writeDouble(ad[i].doubleValue());}tag=new OSArrayTag(MatDataTypes.miDOUBLE,buffer.toByteArray());tag.writeTo(dos);}break;default :throw new MatlabIOException("Cannot write matrix of type: " + MLArray.typeToString(array.getType()));}output.writeInt(MatDataTypes.miMATRIX);output.writeInt(baos.size());output.write(baos.toByteArray());}  }
class C{  public boolean isEqual(AttributeSet attr){  return ((getAttributeCount() == attr.getAttributeCount()) && containsAttributes(attr));}  }
class C{  public boolean isAnyAxisInverted(){  if (mAxisLeft.isInverted())   return true;  if (mAxisRight.isInverted())   return true;  return false;}  }
class C{  public void removeAllAnim(){  mDotAnimationSet.cancel();  mDotAnimationSet.removeAllListeners();  mProgressAnimation.cancel();  mProgressAnimation.removeAllListeners();}  }
class C{  public boolean hasChanceNode(String nodeId){  return chanceNodes.containsKey(nodeId);}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == TypeProvidingElement.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == TypedElement.class) {switch (derivedFeatureID) {case N4JSPackage.PROPERTY_NAME_VALUE_PAIR__DECLARED_TYPE_REF:    return N4JSPackage.TYPED_ELEMENT__DECLARED_TYPE_REF;case N4JSPackage.PROPERTY_NAME_VALUE_PAIR__BOGUS_TYPE_REF:  return N4JSPackage.TYPED_ELEMENT__BOGUS_TYPE_REF;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public DAccessDescriptionChooser(JFrame parent,String title,AccessDescription accessDescription){  super(parent,title,ModalityType.DOCUMENT_MODAL);  initComponents(accessDescription);}  }
class C{  public boolean addDirectedEdge(Node node1,Node node2){  throw new UnsupportedOperationException();}  }
class C{  public static ArrayList<Integer> loadReports(Properties ctx){  int roleId=Env.getContextAsInt(ctx,UdiConstants.AD_ROLE_ID);  return loadReports(ctx,roleId);}  }
class C{  @Ignore @Test public void testDispatchedMsgsMapUpdateOnTakes() throws Exception {  this.logWriter.info("HARQAddOperationJUnitTest : testDispatchedEventsMapUpdateOnTakes BEGIN");  String regionName="testDispatchedEventsMapUpdateOnTakes";  HARegionQueue rq=createHARegionQueue(regionName);  Conflatable cf=null;  EventID id=null;  int totalEvents=10;  for (int i=0; i < totalEvents; i++) {    id=new EventID(new byte[]{1},1,i);    cf=new ConflatableObject("key" + i,"value" + i,id,false,"testing");    rq.put(cf);  }  for (int i=0; i < totalEvents; i++) {    rq.take();  }  Map dispatchedMsgMap=HARegionQueue.getDispatchedMessagesMapForTesting();  assertNotNull("dispatchedMessagesMap found null",dispatchedMsgMap);  assertEquals("size of dispatched msgs should be 1",1,dispatchedMsgMap.size());  MapWrapper wrapper=(MapWrapper)dispatchedMsgMap.get(regionName);  assertNotNull("dispatchedMsgMap should contain an entry with queueregion name as key",wrapper);  Map dispatchedData=wrapper.map;  assertEquals("size of wrapper-map should be 1 as all events had same ThreadId",1,dispatchedData.size());  ThreadIdentifier tid=new ThreadIdentifier(new byte[]{1},1);  Long seqId=(Long)dispatchedData.get(tid);  assertEquals("sequenceId against the ThreadId in the wrapper-map should be that of the last event taken.",id.getSequenceID(),seqId.longValue());  this.logWriter.info("HARQAddOperationJUnitTest : testDispatchedEventsMapUpdateOnTakes END");}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public NotificationChain basicSetBody(Block newBody,NotificationChain msgs){  Block oldBody=body;  body=newBody;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__BODY,oldBody,newBody);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void addPart(MessagePart part){  this.parts.add(part);}  }
class C{  public String randomSeedTipText(){  return "Random number seed for the cross-validation.";}  }
class C{  void modifyPopulation(Population population){}  }
class C{  @Override public void exitWindowClosed(){  if (source != null && source.dirty) {    int check=JOptionPane.showConfirmDialog(null,i18n.get(MetaDbfTableModel.class,"Do_you_want_to_save_your_changes","Do you want to save your changes?"),i18n.get(MetaDbfTableModel.class,"Confirm_Close","Confirm Close"),JOptionPane.YES_NO_OPTION);    if (check == JOptionPane.YES_OPTION) {      fireTableStructureChanged();    } else {      source.cleanupChanges();    }  }  super.exitWindowClosed();}  }
class C{  public void testEmptyBean() throws Exception {  ObjectMapper m=new ObjectMapper();  m.configure(SerializationConfig.Feature.FAIL_ON_EMPTY_BEANS,false);  assertEquals("{\"@type\":\"empty\"}",m.writeValueAsString(new Empty()));}  }
class C{  public synchronized void waitForAvailability() throws InterruptedException {  if (currentTaskCount.get() >= concurrentTaskLimit) {    waitForSingleTask();  }}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  public void addContigFields(VcfHeader header){  for (  ContigField c : header.getContigLines()) {    addContigField(c);  }}  }
class C{  void deleteVirtualVolume(List<VolumeInfo> nativeVolumeInfoList) throws VPlexApiException {  s_logger.info("Deleting virtual volume using native volume info");  List<String> nativeVolumeNames=new ArrayList<String>();  for (  VolumeInfo nativeVolumeInfo : nativeVolumeInfoList) {    nativeVolumeNames.add(nativeVolumeInfo.getVolumeName());  }  deleteVirtualVolume(buildVirtualVolumeName(nativeVolumeNames),true,false);}  }
class C{  private void updateTaskProgressOnView(double progress,String message){  navigationController.setStatusProgress(progress);  navigationController.setStatusMessage(message);}  }
class C{  synchronized void chaseEvents(long startTick,long endTick){  if (DEBUG_PUMP)   Printer.println(">> chaseEvents from tick " + startTick + ".."+ (endTick - 1));  byte[][] tempArray=new byte[128][16];  for (int t=0; t < tracks.length; t++) {    if ((trackDisabled == null) || (trackDisabled.length <= t) || (!trackDisabled[t])) {      chaseTrackEvents(t,startTick,endTick,true,tempArray);    }  }  if (DEBUG_PUMP)   Printer.println("<< chaseEvents");}  }
class C{  protected void sequence_UnionTypeExpressionOLD(ISerializationContext context,UnionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static List<Alert> findAll(EntityManager em){  requireArgument(em != null,"Entity manager can not be null.");  TypedQuery<Alert> query=em.createNamedQuery("Alert.findAll",Alert.class);  query.setHint("javax.persistence.cache.storeMode","REFRESH");  try {    return query.getResultList();  } catch (  NoResultException ex) {    return new ArrayList<>(0);  }}  }
class C{  public void save(File file){  try {    ImageIO.write(image,"png",file);  } catch (  Exception e) {  }}  }
class C{  public void clear(){  processQueue();  hash.clear();}  }
class C{  public boolean isUpdate(){  boolean is;  if (m_editFlag == FolderEditFlag.UPDATE)   is=true; else   is=false;  return is;}  }
class C{  private void addMarketingPermissions(Organization organization) throws ObjectNotFoundException, AddMarketingPermissionException {  List<OrganizationRoleType> roleList=new ArrayList<OrganizationRoleType>();  for (  OrganizationToRole orgToRole : organization.getGrantedRoles()) {    roleList.add(orgToRole.getOrganizationRole().getRoleName());  }  if (roleList.contains(OrganizationRoleType.SUPPLIER) && roleList.contains(OrganizationRoleType.TECHNOLOGY_PROVIDER)) {    if (!organization.getGrantedSuppliers().contains(organization)) {      for (      TechnicalProduct tp : organization.getTechnicalProducts()) {        marketingPermissionService.addMarketingPermission(organization,tp.getKey(),Collections.singletonList(organization.getOrganizationId()));      }    }    dm.flush();    dm.refresh(organization);  }}  }
class C{  public ConnectionRunnable(Peer peer,PeerConnectionCallback callback){  this.mPeer=peer;  this.mCallback=callback;}  }
class C{  public String entityData(){  return entityData;}  }
class C{  public void test(int numberOfObjectives,double r){  C2_DTLZ2 problem=new C2_DTLZ2(numberOfObjectives);  DTLZ2 originalProblem=new DTLZ2(numberOfObjectives);  for (int i=0; i < TestThresholds.SAMPLES; i++) {    Solution originalSlution=originalProblem.generate();    Solution solution=problem.newSolution();    EncodingUtils.setReal(solution,EncodingUtils.getReal(originalSlution));    problem.evaluate(solution);    double minDistance=Double.POSITIVE_INFINITY;    for (int j=0; j < numberOfObjectives; j++) {      double distance=Math.pow(solution.getObjective(j) - 1.0,2.0);      for (int k=0; k < numberOfObjectives; k++) {        if (k != j) {          distance+=Math.pow(solution.getObjective(k),2.0);        }      }      minDistance=Math.min(minDistance,distance);    }    double distance=0.0;    for (int j=0; j < numberOfObjectives; j++) {      distance+=Math.pow(solution.getObjective(j) - 1 / Math.sqrt(numberOfObjectives),2.0);    }    minDistance=Math.min(minDistance,distance);    if (minDistance < Math.pow(r,2.0)) {      Assert.assertFalse(solution.violatesConstraints());    } else {      Assert.assertTrue(solution.violatesConstraints());    }  }}  }
class C{  public DisposableObjectSet(final int initialCapacity,final float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public Tan(){  super(Number.class,Number.class);}  }
class C{  public boolean hasMediator(String mediatorName){  return view.hasMediator(mediatorName);}  }
class C{  public static void compact(String fileName,boolean compress){  String tempName=fileName + Constants.SUFFIX_MV_STORE_TEMP_FILE;  FileUtils.delete(tempName);  compact(fileName,tempName,compress);  try {    FileUtils.moveAtomicReplace(tempName,fileName);  } catch (  DbException e) {    String newName=fileName + Constants.SUFFIX_MV_STORE_NEW_FILE;    FileUtils.delete(newName);    FileUtils.move(tempName,newName);    FileUtils.delete(fileName);    FileUtils.move(newName,fileName);  }}  }
class C{  public boolean isUnset(){  return this == ZERO_PIXEL || (pref == null && min == null && max == null && gapPush == false);}  }
class C{  public void createPictScenario03_4() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2013-10-01 00:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  String supplierAdminId="Pict03_4Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict03_4SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  VOMarketplace supplMarketplace=orgSetup.createMarketplace("Pict03_4Supplier_MP",false,supplier);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  serviceSetup.importTechnicalServices(BaseAdmUmTest.TECHNICAL_SERVICE_EXAMPLE2_XML);  VOTechnicalService example2TechService=serviceSetup.getTechnicalService(VOTechServiceFactory.TECH_SERVICE_EXAMPLE2_ID);  setCutOffDay(supplierAdmin.getKey(),1);  String customerAdminId="PIC03_4Customer";  VOOrganization customer=orgSetup.registerCustomer("PIC03_4CustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  VOServiceDetails serviceDetailsTemp=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT_TEST_03_4",TestService.EXAMPLE2,TestPriceModel.FREE,example2TechService,supplMarketplace);  VOServiceDetails serviceDetails=serviceSetup.savePriceModelForCustomer(serviceDetailsTemp,TestPriceModel.EXAMPLE_PICT03_UNIT_HOUR,customer);  serviceDetails=serviceSetup.activateMarketableService(serviceDetails);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_03_4",serviceDetails,customerAdmin,role);  long userDeassignedTime=DateTimeHandling.calculateMillis("2013-10-02 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  long userAssignedTime=DateTimeHandling.calculateMillis("2013-10-02 12:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  role=VOServiceFactory.getRole(serviceDetails,"USER");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  userDeassignedTime=DateTimeHandling.calculateMillis("2013-10-02 13:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  userAssignedTime=DateTimeHandling.calculateMillis("2013-10-02 14:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  userDeassignedTime=DateTimeHandling.calculateMillis("2013-10-22 10:10:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  userAssignedTime=DateTimeHandling.calculateMillis("2013-10-22 10:20:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long userterminateTime=DateTimeHandling.calculateMillis("2013-11-01 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userterminateTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-11-01 13:00:01"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-11-01 13:00:02"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetailsTemp);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-11-01 13:00:03"));  container.login(supplierAdmin.getKey(),ROLE_TECHNOLOGY_MANAGER);  serviceSetup.deleteTechnicalService(example2TechService);  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_03_4",subDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_03_4",customer);}  }
class C{  public final synchronized void unlock(){  locked=false;  notifyAll();}  }
class C{  private NumberObjectDataSet(int rows,List<Node> variables){  data=new Number[rows][variables.size()];  this.variables=new LinkedList<>(variables);  for (int i=0; i < rows; i++) {    for (int j=0; j < variables.size(); j++) {      data[i][j]=null;    }  }}  }
class C{  public void trim(){  trim(0);}  }
class C{  public static void calculateDistanceToFarthestInput(Gate g){  if (g.is_unvisited()) {    g.set_distance_to_input(0);    g.set_unvisited(false);    if (g.Type != Gate.GateType.INPUT) {      for (      Gate child : g.getChildren()) {        calculateDistanceToFarthestInput(child);        g.set_distance_to_input(child.get_distance_to_input() + 1);        if (g.get_farthest_dist2in() < g.get_distance_to_input()) {          g.set_farthest_dist2in(g.get_distance_to_input());        } else {          g.set_distance_to_input(g.get_farthest_dist2in());        }      }    }  }}  }
class C{  public static int lineNumberToPosition(NodeFactory nodeFactory,int lineNumber){  CodeFragmentsInputBuffer codeFragmentsInputBuffer=(CodeFragmentsInputBuffer)nodeFactory.getContext().input;  int position=codeFragmentsInputBuffer.getLength();  codeFragmentsInputBuffer.addLineNumber(lineNumber);  return position;}  }
class C{  protected static void becomeLockGrantor(String serviceName){  DLockService service=(DLockService)DistributedLockService.getServiceNamed(serviceName);  assertNotNull(service);  logInfo("About to call becomeLockGrantor...");  service.becomeLockGrantor();}  }
class C{  public synchronized int indexOf(Object object,int location){  if (object != null) {    for (int i=location; i < elementCount; i++) {      if (object.equals(elementData[i])) {        return i;      }    }  } else {    for (int i=location; i < elementCount; i++) {      if (elementData[i] == null) {        return i;      }    }  }  return -1;}  }
class C{  public void enableStyle(){  style=true;  for (int i=0; i < childCount; i++) {    children[i].enableStyle();  }}  }
class C{  static boolean isISOControl(int ch){  return ((ch >= '\u0000' && ch <= '\u001f') || (ch >= '\u007f' && ch <= '\u009f'));}  }
class C{  private static void def(int opcode,String name,String format,int stackEffect,int flags){  assert nameArray[opcode] == null : "opcode " + opcode + " is already bound to name "+ nameArray[opcode];  nameArray[opcode]=name;  int instructionLength=format.length();  lengthArray[opcode]=instructionLength;  stackEffectArray[opcode]=stackEffect;  Bytecodes.flagsArray[opcode]=flags;  assert !isConditionalBranch(opcode) || isBranch(opcode) : "a conditional branch must also be a branch";}  }
class C{  static boolean isNumberInAddressBook(ContactId contact){  String[] selectionArgs={Phone.CONTENT_ITEM_TYPE,contact.toString()};  ContentResolver contentResolver=AndroidFactory.getApplicationContext().getContentResolver();  Cursor cur=null;  try {    cur=contentResolver.query(Data.CONTENT_URI,PROJECTION_RAW_CONTACT_ID,SELECTION_LOOSE,selectionArgs,Data.RAW_CONTACT_ID);    CursorUtil.assertCursorIsNotNull(cur,Data.CONTENT_URI);    if (cur.getCount() > 0) {      return true;    }  }  finally {    if (cur != null) {      cur.close();      cur=null;    }  }  String[] selectionArgsStrict={Phone.CONTENT_ITEM_TYPE,contact.toString(),contact.toString()};  try {    cur=contentResolver.query(Data.CONTENT_URI,PROJECTION_RAW_CONTACT_ID,SELECTION_STRICT,selectionArgsStrict,Data.RAW_CONTACT_ID);    CursorUtil.assertCursorIsNotNull(cur,Data.CONTENT_URI);    if (cur.getCount() > 0) {      return true;    }  }  finally {    if (cur != null) {      cur.close();    }  }  return false;}  }
class C{  private void consolidateStore(){  if (!isMaster)   return;  cntConsolidateStoreRuns.increment();  if (logger.isDebugEnabled()) {    logger.debug("Running consolidateStore.");  }  IClosableIterator<Map.Entry<String,Versioned<DeviceSyncRepresentation>>> iter=null;  try {    iter=storeClient.entries();  } catch (  SyncException e) {    cntSyncException.increment();    logger.error("Failed to read devices from sync store",e);    return;  }  try {    while (iter.hasNext()) {      boolean found=false;      Versioned<DeviceSyncRepresentation> versionedDevice=iter.next().getValue();      DeviceSyncRepresentation storedDevice=versionedDevice.getValue();      if (storedDevice == null)       continue;      for (      SyncEntity se : storedDevice.getEntities()) {        try {          IDevice d=findDevice(MacAddress.of(se.macAddress),VlanVid.ofVlan(se.vlan),IPv4Address.of(se.ipv4Address),DatapathId.of(se.switchDPID),OFPort.of(se.switchPort));          if (d != null) {            found=true;            break;          }        } catch (        IllegalArgumentException e) {        }      }      if (!found) {        if (logger.isDebugEnabled()) {          logger.debug("Removing device {} from store. No " + "corresponding live device",storedDevice.getKey());        }        cntConsolidateStoreDevicesRemoved.increment();        removeDevice(versionedDevice);      }    }  }  finally {    if (iter != null)     iter.close();  }}  }
class C{  public int read() throws IOException {  return _is.read();}  }
class C{  public static void main(String[] args){  TestClassTree tester=new TestClassTree();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public long optLong(String key,long defaultValue){  try {    return this.getLong(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public final void testValidateFails(){  PhoneNumberValidator phoneNumberValidator=new PhoneNumberValidator("foo");  assertFalse(phoneNumberValidator.validate("12345"));  assertFalse(phoneNumberValidator.validate("123456789012345"));  assertFalse(phoneNumberValidator.validate("abc"));  assertFalse(phoneNumberValidator.validate("123abc"));  assertFalse(phoneNumberValidator.validate("++1 12345667"));  assertFalse(phoneNumberValidator.validate("123+123456"));  assertFalse(phoneNumberValidator.validate("123 123456"));}  }
class C{  Set keySet(Class clazz){  Set set=new HashSet(get(clazz).keySet());  set.remove(CONSTRUCTORS_KEY);  set.remove(GENERIC_GET_KEY);  set.remove(ARGTYPES_KEY);  return set;}  }
class C{  public void write(RyaStatement ryaStatement) throws IOException {  write(NullWritable.get(),new RyaStatementWritable(ryaStatement,tripleContext));}  }
class C{  private void populateTooltip(final Series<Number,Number> series,final Data<Number,Number> data){  final Date date=new Date();  date.setTime(data.getXValue().longValue());  final Tooltip tooltip=new Tooltip(seriesTypeName + " = " + series.getName()+ System.lineSeparator()+ seriesValueName+ " = "+ data.getYValue()+ " "+ seriesUnit+ System.lineSeparator()+ "Time = "+ TimeUtils.TIME_SDF.format(date));  Tooltip.install(data.getNode(),tooltip);}  }
class C{  public static boolean add(Properties ctx,int M_Warehouse_ID,int M_Locator_ID,int M_Product_ID,int M_AttributeSetInstance_ID,int reservationAttributeSetInstance_ID,BigDecimal diffQtyOnHand,BigDecimal diffQtyReserved,BigDecimal diffQtyOrdered,String trxName){  MStorage storage=null;  StringBuffer diffText=new StringBuffer("(");  if (storage == null)   storage=getCreate(ctx,M_Locator_ID,M_Product_ID,M_AttributeSetInstance_ID,trxName);  if (storage.getM_Locator_ID() != M_Locator_ID && storage.getM_Product_ID() != M_Product_ID && storage.getM_AttributeSetInstance_ID() != M_AttributeSetInstance_ID) {    s_log.severe("No Storage found - M_Locator_ID=" + M_Locator_ID + ",M_Product_ID="+ M_Product_ID+ ",ASI="+ M_AttributeSetInstance_ID);    return false;  }  MProduct prd=new MProduct(ctx,M_Product_ID,trxName);  if (prd.getM_AttributeSet_ID() == 0) {    reservationAttributeSetInstance_ID=0;  }  MStorage storage0=null;  if (M_AttributeSetInstance_ID != reservationAttributeSetInstance_ID) {    storage0=get(ctx,M_Locator_ID,M_Product_ID,reservationAttributeSetInstance_ID,trxName);    if (storage0 == null) {      MWarehouse wh=MWarehouse.get(ctx,M_Warehouse_ID);      int xM_Locator_ID=wh.getDefaultLocator().getM_Locator_ID();      storage0=getCreate(ctx,xM_Locator_ID,M_Product_ID,reservationAttributeSetInstance_ID,trxName);    }  }  boolean changed=false;  if (diffQtyOnHand != null && diffQtyOnHand.signum() != 0) {    storage.setQtyOnHand(storage.getQtyOnHand().add(diffQtyOnHand));    diffText.append("OnHand=").append(diffQtyOnHand);    changed=true;  }  if (diffQtyReserved != null && diffQtyReserved.signum() != 0) {    if (storage0 == null) {      storage.setQtyReserved(storage.getQtyReserved().add(diffQtyReserved));    } else {      storage0.setQtyReserved(storage0.getQtyReserved().add(diffQtyReserved));    }    diffText.append(" Reserved=").append(diffQtyReserved);    changed=true;  }  if (diffQtyOrdered != null && diffQtyOrdered.signum() != 0) {    if (storage0 == null)     storage.setQtyOrdered(storage.getQtyOrdered().add(diffQtyOrdered)); else     storage0.setQtyOrdered(storage0.getQtyOrdered().add(diffQtyOrdered));    diffText.append(" Ordered=").append(diffQtyOrdered);    changed=true;  }  if (changed) {    diffText.append(") -> ").append(storage.toString());    s_log.fine(diffText.toString());    if (storage0 != null)     storage0.save(trxName);    return storage.save(trxName);  }  return true;}  }
class C{  public ConditionalGaussianScore(DataSet dataSet){  if (dataSet == null) {    throw new NullPointerException();  }  this.dataSet=dataSet;  this.variables=dataSet.getVariables();  this.likelihood=new ConditionalGaussianLikelihood(dataSet);}  }
class C{  @Override public void paint(Graphics g){  super.paint(g);  boolean oldAntialias=g.isAntiAliased();  g.setAntiAliased(true);  boolean transformed=false;  if (getTransform() != null) {    transformed=true;    if (tmpTransform == null) {      tmpTransform=Transform.makeIdentity();    }    g.getTransform(tmpTransform);    if (currentTransform == null) {      currentTransform=Transform.makeTranslation(getAbsoluteX(),getAbsoluteY());    } else {      currentTransform.setTranslation(getAbsoluteX(),getAbsoluteY());    }    currentTransform.concatenate(transform);    currentTransform.translate(-getAbsoluteX(),-getAbsoluteY());    g.setTransform(currentTransform);  } else {    currentTransform=null;  }  util.paintChart(g,chart,getBounds(),getAbsoluteX(),getAbsoluteY());  if (transformed) {    g.setTransform(tmpTransform);  }  g.setAntiAliased(oldAntialias);}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  @SuppressWarnings("unchecked") @Override protected Object applyUpdatesToManagedData(Object updates){  boolean madeChanges=false;  List<String> words=(List<String>)updates;  log.info("Applying updates: " + words);  boolean ignoreCase=getIgnoreCase();  for (  String word : words) {    if (ignoreCase)     word=word.toLowerCase(Locale.ROOT);    if (managedWords.add(word)) {      madeChanges=true;      log.info("Added word: {}",word);    }  }  return madeChanges ? managedWords : null;}  }
class C{  public void putStartTime(Object key,long startTime){  if (CachePerfStats.enableClockStats) {    this.startTimeMap.put(key,Long.valueOf(startTime));  }}  }
class C{  public static String dbf(String shpFileName){  String ret=null;  if (shpFileName != null) {    ret=shpFileName.substring(0,shpFileName.indexOf(".shp")) + ".dbf";  }  return ret;}  }
class C{  @Override public BufferedImage JPEGToRGBImage(final byte[] data,final int w,final int h,final int pX,final int pY){  if (data.length > 9 && data[6] == 'J' && data[7] == 'F' && data[8] == 'I' && data[9] == 'F') {    return nonRGBJPEGToRGBImage(data,w,h,pX,pY);  } else {    return algorithmicICCToRGB(data,w,h,pX,pY);  }}  }
class C{  public byte[] insert(final String tablename,final Map<String,byte[]> map) throws IOException, SpaceExceededException {  final byte[] uk=ukey(tablename);  update(tablename,uk,map);  final BEncodedHeap heap=getHeap(system_table_pkcounter);  heap.insert(UTF8.getBytes(tablename),system_table_pkcounter_counterName,uk);  return uk;}  }
class C{  public MemberSelectTree buildValueOfMethodAccess(Tree expr){  TypeMirror boxedType=InternalUtils.typeOf(expr);  assert TypesUtils.isBoxedPrimitive(boxedType);  Symbol.MethodSymbol valueOfMethod=getValueOfMethod(env,boxedType);  Type.MethodType methodType=(Type.MethodType)valueOfMethod.asType();  JCTree.JCFieldAccess valueOfAccess=(JCTree.JCFieldAccess)maker.Select((JCTree.JCExpression)expr,valueOfMethod);  valueOfAccess.setType(methodType);  return valueOfAccess;}  }
class C{  public static NumericEntityEscaper below(final int codepoint){  return outsideOf(codepoint,Integer.MAX_VALUE);}  }
class C{  private boolean isUnaryAggregateOuterSPRewriteApplicable(){  boolean ret=false;  Hop input=getInput().get(0);  if (input instanceof BinaryOp && ((BinaryOp)input).isOuterVectorOperator()) {    Hop right=input.getInput().get(1);    double size=right.dimsKnown() ? OptimizerUtils.estimateSize(right.getDim1(),right.getDim2()) : right.getOutputMemEstimate();    if (_op == AggOp.MAXINDEX || _op == AggOp.MININDEX) {      double memBudgetExec=SparkExecutionContext.getBroadcastMemoryBudget();      double memBudgetLocal=OptimizerUtils.getLocalMemBudget();      ret=(2 * size < memBudgetExec && 2 * size < memBudgetLocal);    } else {      if (OptimizerUtils.checkSparkBroadcastMemoryBudget(size)) {        ret=true;      }    }  }  return ret;}  }
class C{  public FBBlob(GDSHelper c,long blob_id){  this(c,blob_id,null);}  }
class C{  public CertificatePolicyId(DerValue val) throws IOException {  this.id=val.getOID();}  }
class C{  protected void report(CompilationFailedException e,boolean child){  println(e.toString());  stacktrace(e,false);}  }
class C{  public synchronized void removeListeningPoints(){  for (Iterator it=this.listeningPoints.values().iterator(); it.hasNext(); ) {    ListeningPointImpl lp=(ListeningPointImpl)it.next();    lp.messageProcessor.stop();    it.remove();  }}  }
class C{  public String readFromString(String s){  if (Parser.pMemory.matcher(s).matches()) {    if (s.indexOf("]") != (s.length() - 1)) {      return "Malformed memory address";    }  }  usedLabels=new HashSet<>();  for (  String label : dsp.getVariableList()) {    Matcher m=Pattern.compile("[\\[\\-\\+*]" + label + "[\\]\\-\\+*]").matcher(s);    int pos=0;    while (m.find(pos)) {      s=s.replace(m.group(),m.group().replace(label,Integer.toString(dsp.getVariable(label))));      pos=Math.max(m.end() - 1,0);      usedLabels.add(label);    }  }  for (  String constant : dsp.getConstantList()) {    Matcher m=Pattern.compile("[\\[\\-\\+*]" + constant + "[\\]\\-\\+*]").matcher(s);    int pos=0;    while (m.find(pos)) {      s=s.replace(m.group(),m.group().replace(constant,Long.toString(dsp.getConstant(constant))));      pos=Math.max(m.end() - 1,0);      usedLabels.add(constant);    }  }  s=s.substring(1,s.length() - 1);  base=index=null;  scale=displacement=0;  if (Parser.pDecimal.matcher(s).matches()) {    displacement=Integer.valueOf(s);    return null;  }  if (pRegisters.matcher(s).matches()) {    base=dsp.getRegisterArgument(s);    return null;  }  if (pBasePlusDisplacement.matcher(s).matches()) {    base=dsp.getRegisterArgument(s.substring(0,s.indexOf("+")));    displacement=Integer.valueOf(s.substring(s.indexOf("+") + 1));    return null;  }  if (pBaseMinusDisplacement.matcher(s).matches()) {    base=dsp.getRegisterArgument(s.substring(0,s.indexOf("-")));    displacement=-Integer.valueOf(s.substring(s.indexOf("-") + 1));    return null;  }  if (pIndexScale.matcher(s).matches()) {    index=dsp.getRegisterArgument(s.substring(0,s.indexOf("*")));    scale=Integer.valueOf(s.substring(s.indexOf("*") + 1));    return null;  }  if (pIndexScalePlusDisplacement.matcher(s).matches()) {    index=dsp.getRegisterArgument(s.substring(0,s.indexOf("*")));    scale=Integer.valueOf(s.substring(s.indexOf("*") + 1,s.indexOf("+")));    displacement=Integer.valueOf(s.substring(s.indexOf("+") + 1));    return null;  }  if (pIndexScaleMinusDisplacement.matcher(s).matches()) {    index=dsp.getRegisterArgument(s.substring(0,s.indexOf("*")));    scale=Integer.valueOf(s.substring(s.indexOf("*") + 1,s.indexOf("-")));    displacement=-Integer.valueOf(s.substring(s.indexOf("-") + 1));    return null;  }  if (pBaseIndex.matcher(s).matches()) {    s+="+0";  }  if (pBaseIndexPlusDisplacement.matcher(s).matches()) {    base=dsp.getRegisterArgument(s.substring(0,s.indexOf("+")));    index=dsp.getRegisterArgument(s.substring(s.indexOf("+") + 1,s.lastIndexOf("+")));    displacement=Integer.valueOf(s.substring(s.lastIndexOf("+") + 1));    scale=1;    return null;  }  if (pBaseIndexMinusDisplacement.matcher(s).matches()) {    base=dsp.getRegisterArgument(s.substring(0,s.indexOf("+")));    index=dsp.getRegisterArgument(s.substring(s.indexOf("+") + 1,s.lastIndexOf("-")));    displacement=-Integer.valueOf(s.substring(s.lastIndexOf("-") + 1));    scale=1;    return null;  }  if (pBaseIndexScale.matcher(s).matches()) {    s+="+0";  }  if (pBaseIndexScalePlusDisplacement.matcher(s).matches()) {    base=dsp.getRegisterArgument(s.substring(0,s.indexOf("+")));    index=dsp.getRegisterArgument(s.substring(s.indexOf("+") + 1,s.indexOf("*")));    scale=Integer.valueOf(s.substring(s.indexOf("*") + 1,s.lastIndexOf("+")));    displacement=Integer.valueOf(s.substring(s.lastIndexOf("+") + 1));    return null;  }  if (pBaseIndexScaleMinusDisplacement.matcher(s).matches()) {    base=dsp.getRegisterArgument(s.substring(0,s.indexOf("+")));    index=dsp.getRegisterArgument(s.substring(s.indexOf("+") + 1,s.indexOf("*")));    scale=Integer.valueOf(s.substring(s.indexOf("*") + 1,s.lastIndexOf("-")));    displacement=-Integer.valueOf(s.substring(s.lastIndexOf("-") + 1));    return null;  }  return "Malformed memory address";}  }
class C{  public void register(TaskName taskName){  log.debug("Adding taskName {} to {}",taskName,this);  if (!isCoordinatorConsumerRegistered) {    registerCoordinatorStreamConsumer();    isCoordinatorConsumerRegistered=true;  }  registerCoordinatorStreamProducer(taskName.getTaskName());}  }
class C{  public ConferenceInfoParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {  try {    SAXParserFactory factory=SAXParserFactory.newInstance();    SAXParser parser=factory.newSAXParser();    parser.parse(mInputSource,this);    return this;  } catch (  IOException e) {    throw new ParseFailureException("Failed to parse input source!",e);  }}  }
class C{  public void dispose(){  m_synchronizer.dispose();}  }
class C{  protected void sendMapRequest(ClientLink link,Projection proj) throws IOException {  Point2D ul=proj.getUpperLeft();  Point2D lr=proj.getLowerRight();  float ulLat=(float)ul.getY();  float ulLon=(float)ul.getX();  float lrLat=(float)lr.getY();  float lrLon=(float)lr.getX();  LinkBoundingPoly[] boundingPolys=null;  if (ProjMath.isCrossingDateline(ulLon,lrLon,proj.getScale())) {    Debug.message("link","Dateline is on screen");    float ymin=(float)Math.min(ulLat,lrLat);    float ymax=(float)Math.max(ulLat,lrLat);    boundingPolys=new LinkBoundingPoly[2];    boundingPolys[0]=new LinkBoundingPoly(ulLon,ymin,180.0f,ymax);    boundingPolys[1]=new LinkBoundingPoly(-180.0f,ymin,lrLon,ymax);  } else {    boundingPolys=new LinkBoundingPoly[1];    boundingPolys[0]=new LinkBoundingPoly(ulLon,lrLat,lrLon,ulLat);  }  Point2D center=proj.getCenter();  LinkMapRequest.write((float)center.getY(),(float)center.getX(),proj.getScale(),proj.getHeight(),proj.getWidth(),boundingPolys,args,link);}  }
class C{  public void write(Protocol protocol,Writer out) throws IOException {  Json.writePretty(protocol,out);}  }
class C{  public static String formatQuantity(long quantity){  return formatQuantity((double)quantity);}  }
class C{  public Integer groupId(String name){  return (namedGroupMap.get(name));}  }
class C{  public boolean isNullCheck(){  if (!isExceptionThrower() || getFirstInstruction() != null) {    return false;  }  short opcode=exceptionThrower.getInstruction().getOpcode();  return nullCheckInstructionSet.get(opcode);}  }
class C{  static void sort(double[] a,int left,int right,double[] work,int workBase,int workLen){  while (left <= right && Double.isNaN(a[right])) {    --right;  }  for (int k=right; --k >= left; ) {    double ak=a[k];    if (ak != ak) {      a[k]=a[right];      a[right]=ak;      --right;    }  }  doSort(a,left,right,work,workBase,workLen);  int hi=right;  while (left < hi) {    int middle=(left + hi) >>> 1;    double middleValue=a[middle];    if (middleValue < 0.0d) {      left=middle + 1;    } else {      hi=middle;    }  }  while (left <= right && Double.doubleToRawLongBits(a[left]) < 0) {    ++left;  }  for (int k=left, p=left - 1; ++k <= right; ) {    double ak=a[k];    if (ak != 0.0d) {      break;    }    if (Double.doubleToRawLongBits(ak) < 0) {      a[k]=0.0d;      a[++p]=-0.0d;    }  }}  }
class C{  protected boolean position(Projection proj){  if (proj == null) {    Debug.error("OMScalingIcon: null projection in position!");    return false;  }  if (bitmap == null) {    return false;  }  float shrinkScale=proj.getScale();  if (shrinkScale > maxScale) {    shrinkScale=maxScale;  }  if (shrinkScale < minScale) {    shrinkScale=minScale;  }  noScalingRequired=baseScale == shrinkScale;  float scaleFactor=baseScale / shrinkScale;  point1=(Point)proj.forward(lat,lon,new Point());  point2=(Point)proj.forward(lat,lon,new Point());  int halfImageWidth=width / 2;  int halfImageHeight=height / 2;  int myX=getX();  int myY=getY();  double p1x=point1.getX();  double p1y=point1.getY();  double newP1x=p1x + (scaleFactor * (myX - halfImageWidth));  double newP1y=p1y + (scaleFactor * (myY - halfImageHeight));  point1.setLocation((int)newP1x,(int)newP1y);  double p2x=point2.getX();  double p2y=point2.getY();  double newP2x=p2x + (scaleFactor * (myX + halfImageWidth));  double newP2y=p2y + (scaleFactor * (myY + halfImageHeight));  point2.setLocation((int)newP2x,(int)newP2y);  setNeedToReposition(false);  return true;}  }
class C{  public boolean isRegALocal(RegisterSpec spec){  SsaInsn defn=getDefinitionForRegister(spec.getReg());  if (defn == null) {    return false;  }  if (defn.getLocalAssignment() != null)   return true;  for (  SsaInsn use : getUseListForRegister(spec.getReg())) {    Insn insn=use.getOriginalRopInsn();    if (insn != null && insn.getOpcode().getOpcode() == RegOps.MARK_LOCAL) {      return true;    }  }  return false;}  }
class C{  protected static void createSequenceFile(Directory dir,String name,byte start,int size,byte[] segID,String segSuffix) throws IOException {  try (IndexOutput os=dir.createOutput(name,newIOContext(random()))){    CodecUtil.writeIndexHeader(os,"Foo",0,segID,segSuffix);    for (int i=0; i < size; i++) {      os.writeByte(start);      start++;    }    CodecUtil.writeFooter(os);  } }  }
class C{  public int eval(INode state){  return eval2(state);}  }
class C{  private void saveCurrent(){  if (!isAllRead()) {    save(_working[_pos]);  }}  }
class C{  private static double doubleHighPart(double d){  if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN) {    return d;  }  long xl=Double.doubleToRawLongBits(d);  xl&=MASK_30BITS;  return Double.longBitsToDouble(xl);}  }
class C{  public DERSequence(ASN1Encodable obj){  super(obj);}  }
class C{  @Override public int size(){  return map.size();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:10.252 -0500",hash_original_method="9A18BDA9B7320ADFBD057B8A639BF335",hash_generated_method="C7C17F28CB7AE80D1B93EFAD44AA3AD8") private static InetAddress[] lookupHostByName(String host) throws UnknownHostException {  BlockGuard.getThreadPolicy().onNetwork();  Object cachedResult=addressCache.get(host);  if (cachedResult != null) {    if (cachedResult instanceof InetAddress[]) {      return (InetAddress[])cachedResult;    } else {      throw new UnknownHostException((String)cachedResult);    }  }  try {    StructAddrinfo hints=new StructAddrinfo();    hints.ai_flags=AI_ADDRCONFIG;    hints.ai_family=AF_UNSPEC;    hints.ai_socktype=SOCK_STREAM;    InetAddress[] addresses=Libcore.os.getaddrinfo(host,hints);    for (    InetAddress address : addresses) {      address.hostName=host;    }    addressCache.put(host,addresses);    return addresses;  } catch (  GaiException gaiException) {    String detailMessage="Unable to resolve host \"" + host + "\": "+ Libcore.os.gai_strerror(gaiException.error);    addressCache.putUnknownHost(host,detailMessage);    throw gaiException.rethrowAsUnknownHostException(detailMessage);  }}  }
class C{  public void declareExtensions(ExtensionProfile extProfile){  extProfile.declare(WorksheetEntry.class,RowCount.getDefaultDescription());  extProfile.declare(WorksheetEntry.class,ColCount.getDefaultDescription());}  }
class C{  protected DoubleMatrix2D trapezoidalLower(DoubleMatrix2D A){  int rows=A.rows();  int columns=A.columns();  for (int r=rows; --r >= 0; ) {    for (int c=columns; --c >= 0; ) {      if (r < c)       A.setQuick(r,c,0);    }  }  return A;}  }
class C{  public boolean checkForValidNonInfantryAndOrProtomechs(int playerId){  Iterator<Entity> iter=getPlayerEntities(getPlayer(playerId),false).iterator();  while (iter.hasNext()) {    Entity entity=iter.next();    boolean excluded=false;    if ((entity instanceof Infantry) && getOptions().booleanOption("inf_move_later")) {      excluded=true;    } else     if ((entity instanceof Protomech) && getOptions().booleanOption("protos_move_later")) {      excluded=true;    }    if (!excluded && getTurn().isValidEntity(entity,this)) {      return true;    }  }  return false;}  }
class C{  public static boolean isIntegerInRange(String s,int a,int b){  if (isEmpty(s))   return defaultEmptyOK;  if (!isSignedInteger(s))   return false;  int num=Integer.parseInt(s);  return ((num >= a) && (num <= b));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:12.359 -0500",hash_original_method="5280B98EAB69F2A556138E3D06C4D0D3",hash_generated_method="0AE1F741F0946B437A1E22F6DD01A830") public final int addAndGet(int delta){  value+=delta;  return value;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void addText(String text){  current.appendChild(document.createTextNode(text));}  }
class C{  public boolean with_all(){  return soot.PhaseOptions.getBoolean(options,"with-all");}  }
class C{  protected AbstractRememberMeServices rememberMeServices(){  TokenBasedRememberMeServices rememberMeServices=new TokenBasedRememberMeServices(properties.getRememberMeKey(),userDetailsService);  rememberMeServices.setParameter(REMEMBER_ME_PARAMETER);  rememberMeServices.setCookieName(REMEMBER_ME_COOKIE);  return rememberMeServices;}  }
class C{  public NoSuchMechanismException(String message){  super(message);}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String03() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  for (int i=1; i < invalidValues.length; i++) {    for (int j=0; j < validValues.length; j++) {      try {        SSLContext.getInstance(validValues[j],invalidValues[i]);        fail("NuSuchProviderException must be thrown (protocol: ".concat(validValues[j]).concat(" provider: ").concat(invalidValues[i]).concat(")"));      } catch (      NoSuchProviderException e) {      }    }  }}  }
class C{  static public void print(byte what){  System.out.print(what);  System.out.flush();}  }
class C{  private void validateState(State current){  ValidationUtils.validateState(current);}  }
class C{  public void seek(long pos) throws IOException {  if ((pos >= bufferStart) && (pos < dataEnd)) {    filePosition=pos;    return;  }  readBuffer(pos);}  }
class C{  public static boolean equals(Object[] field1,Object[] field2){  int index1=0;  int length1=field1 == null ? 0 : field1.length;  int index2=0;  int length2=field2 == null ? 0 : field2.length;  while (true) {    while (index1 < length1 && field1[index1] == null) {      index1++;    }    while (index2 < length2 && field2[index2] == null) {      index2++;    }    boolean atEndOf1=index1 >= length1;    boolean atEndOf2=index2 >= length2;    if (atEndOf1 && atEndOf2) {      return true;    } else     if (atEndOf1 != atEndOf2) {      return false;    } else     if (!field1[index1].equals(field2[index2])) {      return false;    }    index1++;    index2++;  }}  }
class C{  public static String separatorsToSystem(String path){  if (path == null) {    return null;  }  if (isSystemWindows()) {    return separatorsToWindows(path);  } else {    return separatorsToUnix(path);  }}  }
class C{  public static InspectImageParams create(@NotNull String image){  return new InspectImageParams().withImage(image);}  }
class C{  public double optDouble(int index,double defaultValue){  try {    return this.getDouble(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  static void printUrbanSimParameterSettings(UrbanSimParameterConfigModuleV3 module){  log.info("UrbanSimParameter settings:");  log.info("PopulationSamplingRate: " + module.getPopulationSampleRate());  log.info("Year: " + module.getYear());  log.info("OPUS_HOME: " + module.getOpusHome());  log.info("OPUS_DATA_PATH: " + module.getOpusDataPath());  log.info("MATSIM_4_OPUS: " + module.getMATSim4Opus());  log.info("MATSIM_4_OPUS_CONIG: " + module.getMATSim4OpusConfig());  log.info("MATSIM_4_OPUS_OUTPUT: " + module.getMATSim4OpusOutput());  log.info("MATSIM_4_OPUS_TEMP: " + module.getMATSim4OpusTemp());  log.info("MATSIM_4_OPUS_BACKUP: " + module.getMATSim4OpusBackup());  log.info("Compute Agent-performance: " + module.usingAgentPerformance());  log.info("Compute Zone2Zone Impedance Matrix: " + module.usingZone2ZoneImpedance());  log.info("Compute Zone-Based Accessibilities: " + module.usingZoneBasedAccessibility());  log.info("Compute Grid-Based Accessibilities: " + module.usingGridBasedAccessibility());  log.info("(Custom) Test Parameter: " + module.getCustomParameter());  log.info("Backing Up Run Data: " + module.isBackup());}  }
class C{  public boolean isComplete(){  return completed;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public static void main(String[] args){  ResultMatrix matrix;  int i;  int n;  matrix=new ResultMatrixLatex(3,3);  matrix.addHeader("header1","value1");  matrix.addHeader("header2","value2");  matrix.addHeader("header2","value3");  for (i=0; i < matrix.getRowCount(); i++) {    for (n=0; n < matrix.getColCount(); n++) {      matrix.setMean(n,i,(i + 1) * n);      matrix.setStdDev(n,i,((double)(i + 1) * n) / 100);      if (i == n) {        if (i % 2 == 1)         matrix.setSignificance(n,i,SIGNIFICANCE_WIN); else         matrix.setSignificance(n,i,SIGNIFICANCE_LOSS);      }    }  }  System.out.println("\n\n--> " + matrix.getDisplayName());  System.out.println("\n1. complete\n");  System.out.println(matrix.toStringHeader() + "\n");  System.out.println(matrix.toStringMatrix() + "\n");  System.out.println(matrix.toStringKey());  System.out.println("\n2. complete with std deviations\n");  matrix.setShowStdDev(true);  System.out.println(matrix.toStringMatrix());  System.out.println("\n3. cols numbered\n");  matrix.setPrintColNames(false);  System.out.println(matrix.toStringMatrix());  System.out.println("\n4. second col missing\n");  matrix.setColHidden(1,true);  System.out.println(matrix.toStringMatrix());  System.out.println("\n5. last row missing, rows numbered too\n");  matrix.setRowHidden(2,true);  matrix.setPrintRowNames(false);  System.out.println(matrix.toStringMatrix());  System.out.println("\n6. mean prec to 3\n");  matrix.setMeanPrec(3);  matrix.setPrintRowNames(false);  System.out.println(matrix.toStringMatrix());}  }
class C{  public static void testLamAlef(){  final String lamAlef="\u0644\u0627";  final String ltrText="abcd";  TextLayout layout=new TextLayout(lamAlef,map,frc);  TextHitInfo hit;  hit=layout.getNextLeftHit(0);  if (hit.getInsertionIndex() != 2) {    throw new Error("Left hit failed.  Hit:" + hit);  }  hit=layout.getNextRightHit(2);  if (hit.getInsertionIndex() != 0) {    throw new Error("Right hit failed.  Hit:" + hit);  }  hit=layout.hitTestChar(layout.getAdvance() / 2,0);  if (hit.getInsertionIndex() != 0 && hit.getInsertionIndex() != 2) {    throw new Error("Hit-test allowed incorrect caret.  Hit:" + hit);  }  layout=new TextLayout(ltrText + lamAlef,map,frc);  final int ltrLen=ltrText.length();  final int layoutLen=layout.getCharacterCount();  for (int i=0; i < ltrLen; i++) {    hit=layout.getNextRightHit(i);    if (hit.getInsertionIndex() != i + 1) {      throw new Error("Right hit failed in ltr text.");    }  }  hit=layout.getNextRightHit(ltrLen);  if (layoutLen != hit.getInsertionIndex()) {    throw new Error("Right hit failed at direction boundary.");  }  hit=layout.getNextLeftHit(layoutLen);  if (hit.getInsertionIndex() != ltrLen) {    throw new Error("Left hit failed at end of text.");  }}  }
class C{  private void removeZipParameter(final HttpServerRequest request){  if (request.params().contains(ZIP_PARAM)) {    request.params().remove(ZIP_PARAM);  }}  }
class C{  public static int av_cmp_q(AVRational a,AVRational b){  long tmp=a.num * (long)b.den - b.num * (long)a.den;  if (tmp != 0)   return (int)(((tmp ^ a.den ^ b.den) >> 63) | 1); else   if (b.den != 0 && a.den != 0)   return 0; else   if (a.num != 0 && b.num != 0)   return (a.num >> 31) - (b.num >> 31); else   return Integer.MIN_VALUE;}  }
class C{  private static ObjectMapper createObjectMapper(){  ObjectMapper m=new ObjectMapper();  m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);  m.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT,PropertyNames.OBJECT_TYPE_NAME);  m.registerModule(new CoderUtils.Jackson2Module());  return m;}  }
class C{  @Override public String toString(){  String str="";  for (  Effect e : effects.keySet()) {    str+=e.toString();    str+=" [" + effects.get(e) + "]";    str+=",";  }  if (!effects.isEmpty()) {    str=str.substring(0,str.length() - 1);  }  return str;}  }
class C{  @Override public FilteredQueryBuilder boost(float boost){  this.boost=boost;  return this;}  }
class C{  public double readDouble() throws IOException {switch (type) {case MatDataTypes.miUINT8:    return (double)(buf.get() & 0xFF);case MatDataTypes.miINT8:  return (double)buf.get();case MatDataTypes.miUINT16:return (double)(buf.getShort() & 0xFFFF);case MatDataTypes.miINT16:return (double)buf.getShort();case MatDataTypes.miUINT32:return (double)(buf.getInt() & 0xFFFFFFFF);case MatDataTypes.miINT32:return (double)buf.getInt();case MatDataTypes.miDOUBLE:return (double)buf.getDouble();default :throw new IllegalArgumentException("Unknown data type: " + type);}}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public int seconds(){  return this.seconds;}  }
class C{  public void swap(int index,int index2){  Object objSa=subjectArea.get(index);  Object objCo=courseNbr.get(index);  Object objIt=itype.get(index);  Object objCl=classNumber.get(index);  Object objSa2=subjectArea.get(index2);  Object objCo2=courseNbr.get(index2);  Object objIt2=itype.get(index2);  Object objCl2=classNumber.get(index2);  subjectArea.set(index,objSa2);  subjectArea.set(index2,objSa);  courseNbr.set(index,objCo2);  courseNbr.set(index2,objCo);  itype.set(index,objIt2);  itype.set(index2,objIt);  classNumber.set(index,objCl2);  classNumber.set(index2,objCl);}  }
class C{  public String period(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  String colName=mField.getColumnName();  if (value == null)   return "";  int AD_Client_ID=Env.getContextAsInt(ctx,WindowNo,"AD_Client_ID");  Timestamp DateAcct=null;  if (colName.equals("DateAcct"))   DateAcct=(Timestamp)value; else   DateAcct=(Timestamp)mTab.getValue("DateAcct");  int C_Period_ID=0;  if (colName.equals("C_Period_ID"))   C_Period_ID=((Integer)value).intValue();  if (colName.equals("DateDoc")) {    mTab.setValue("DateAcct",value);  } else   if (colName.equals("DateAcct")) {    String sql="SELECT C_Period_ID " + "FROM C_Period " + "WHERE C_Year_ID IN "+ "	(SELECT C_Year_ID FROM C_Year WHERE C_Calendar_ID ="+ "  (SELECT C_Calendar_ID FROM AD_ClientInfo WHERE AD_Client_ID=?))"+ " AND ? BETWEEN StartDate AND EndDate"+ " AND IsActive='Y'"+ " AND PeriodType='S'";    PreparedStatement pstmt=null;    ResultSet rs=null;    try {      pstmt=DB.prepareStatement(sql,null);      pstmt.setInt(1,AD_Client_ID);      pstmt.setTimestamp(2,DateAcct);      rs=pstmt.executeQuery();      if (rs.next())       C_Period_ID=rs.getInt(1);      rs.close();      pstmt.close();      pstmt=null;    } catch (    SQLException e) {      log.log(Level.SEVERE,sql,e);      return e.getLocalizedMessage();    } finally {      DB.close(rs,pstmt);    }    if (C_Period_ID != 0)     mTab.setValue("C_Period_ID",new Integer(C_Period_ID));  } else {    String sql="SELECT PeriodType, StartDate, EndDate " + "FROM C_Period WHERE C_Period_ID=?";    PreparedStatement pstmt=null;    ResultSet rs=null;    try {      pstmt=DB.prepareStatement(sql,null);      pstmt.setInt(1,C_Period_ID);      rs=pstmt.executeQuery();      if (rs.next()) {        String PeriodType=rs.getString(1);        Timestamp StartDate=rs.getTimestamp(2);        Timestamp EndDate=rs.getTimestamp(3);        if (PeriodType.equals("S")) {          if (DateAcct == null || DateAcct.before(StartDate) || DateAcct.after(EndDate))           mTab.setValue("DateAcct",EndDate);        }      }    } catch (    SQLException e) {      log.log(Level.SEVERE,sql,e);      return e.getLocalizedMessage();    } finally {      DB.close(rs,pstmt);      rs=null;      pstmt=null;    }  }  return "";}  }
class C{  public void testGetAdaptationListener(){  System.out.println("getAdaptationListener");  mockInitialisationCalls(true,null);  AuditCommandImpl instance=new TestAuditCommandImpl();  AdaptationListener result=instance.getAdaptationListener();  assertEquals(mockAdaptationListener,result);  setVerifyMode();}  }
class C{  protected boolean isExtremeValue(Instance inst){  boolean result;  int i;  result=false;  for (i=0; i < m_AttributeIndices.length; i++) {    if (m_AttributeIndices[i] == NON_NUMERIC) {      continue;    }    result=isExtremeValue(inst,i);    if (result) {      break;    }  }  return result;}  }
class C{  void addSelfReferenceAsCustomer(Organization organization) throws NonUniqueBusinessKeyException {  Set<OrganizationRoleType> sourceRoles=new HashSet<OrganizationRoleType>();  for (  OrganizationToRole orgToRole : organization.getGrantedRoles()) {    sourceRoles.add(orgToRole.getOrganizationRole().getRoleName());  }  OrganizationReferenceType referenceType=OrganizationReferenceType.getOrgRefTypeForSourceRoles(sourceRoles);  if (referenceType != null) {    if (!organization.getVendorsOfCustomer().contains(organization)) {      OrganizationReference ref=new OrganizationReference(organization,organization,referenceType);      dm.persist(ref);    }    dm.flush();    dm.refresh(organization);  }}  }
class C{  public Doctor(){  super();}  }
class C{  public Grant(String name,String description){  super(name,description);}  }
class C{  public ExtractInterfaceDescriptor(){  super(IJavaRefactorings.EXTRACT_INTERFACE);}  }
class C{  public String conservativeForwardSelectionTipText(){  return "If true (and forward search is selected) then attributes " + "will continue to be added to the best subset as long as merit does " + "not degrade.";}  }
class C{  public static Bitmap rotate(Bitmap bitmap,int angle){  Matrix matrix=new Matrix();  matrix.postRotate(angle);  return Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),matrix,true);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE_NAME;case 3:return CURSOR_ID;case 4:return CLOSE;default :return null;}}  }
class C{  public static void printDetail(String msg){  printDetail(null,msg);}  }
class C{  public void removeCache(String uri){  mImageLoader.removeCache(uri,0,0);}  }
class C{  public T caseDoubleLiteral(DoubleLiteral object){  return null;}  }
class C{  protected void afterSave(){}  }
class C{  void visitSubroutine(final Label JSR,final long id,final int nbSubroutines){  Label stack=this;  while (stack != null) {    Label l=stack;    stack=l.next;    l.next=null;    if (JSR != null) {      if ((l.status & VISITED2) != 0) {        continue;      }      l.status|=VISITED2;      if ((l.status & RET) != 0) {        if (!l.inSameSubroutine(JSR)) {          Edge e=new Edge();          e.info=l.inputStackTop;          e.successor=JSR.successors.successor;          e.next=l.successors;          l.successors=e;        }      }    } else {      if (l.inSubroutine(id)) {        continue;      }      l.addToSubroutine(id,nbSubroutines);    }    Edge e=l.successors;    while (e != null) {      if ((l.status & Label.JSR) == 0 || e != l.successors.next) {        if (e.successor.next == null) {          e.successor.next=stack;          stack=e.successor;        }      }      e=e.next;    }  }}  }
class C{  public static int countOccurrences(String fullString,String pattern){  int lastIndex=0;  int count=0;  while (lastIndex != -1) {    lastIndex=fullString.indexOf(pattern,lastIndex);    if (lastIndex != -1) {      count++;      lastIndex+=pattern.length();    }  }  return count;}  }
class C{  private void invalidatePreview(){  updatePreviewTimer.stop();  if (scanThread != null) {    scanThread.interrupt();    try {      scanThread.join(200);    } catch (    InterruptedException e) {    }    scanThread=null;  }  getSubmitButton().setEnabled(false);  getPreviewButton().setEnabled(false);  getJNumValidProgramsField().setText("");  getJNumFilesField().setText("");  getJSubmissionSizeField().setText("");  getJProgressBar().setValue(0);  if (treePreview != null) {    treePreview.dispose();    treePreview=null;    reopenPreview=true;  } else   reopenPreview=false;  previewSubs=null;  if (!checkOptions()) {    return;  }  getStatusTextField().setText(Messages.getString("OptionPanel.OK"));  requestPreviewUpdate();}  }
class C{  public void clear(){  table=new Entry[INITIAL_CAPACITY];  count=0;  referenceQueue=new ReferenceQueue();}  }
class C{  private void handleResponseError(long requestId,Throwable error){  ContextualFuture future=futures.remove(requestId);  if (future != null) {    future.context.execute(null);  }}  }
class C{  public boolean removePermission(java.security.acl.Permission perm){  if (!permList.contains(perm))   return false;  permList.removeElement(perm);  return true;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:41.612 -0500",hash_original_method="1B8FCD54ED5E137B1A38ACB963DE1ED8",hash_generated_method="1B8FCD54ED5E137B1A38ACB963DE1ED8") boolean isAutomaticDialogSupportEnabled(){  return super.isAutomaticDialogSupportEnabled;}  }
class C{  public void printStackTrace(){  printStackTrace(System.err);}  }
class C{  public static void main(String[] args){  TestTitleInHref tester=new TestTitleInHref();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public static void tintMenuItems(Menu menu,int color,int excludeGroup){  int cntMenuItems=menu.size();  for (int i=0; i < cntMenuItems; i++) {    MenuItem menuItem=menu.getItem(i);    if (menuItem.getGroupId() == excludeGroup) {      continue;    }    Drawable icon=menuItem.getIcon();    if (icon == null) {      continue;    }    mutateAndTintDrawable(icon,color);    menuItem.setIcon(icon);  }}  }
class C{  public static String xmlComment(String data){  int idx=0;  while (true) {    idx=data.indexOf("--",idx);    if (idx < 0) {      break;    }    data=data.substring(0,idx + 1) + " " + data.substring(idx + 1);  }  if (data.indexOf('\n') >= 0) {    return "<!--\n" + indent(data) + "-->\n";  }  return "<!-- " + data + " -->\n";}  }
class C{  public void removeTargetListener(String pn,AnimationTargetListener l){  LinkedList ll=(LinkedList)targetListeners.get(pn);  ll.remove(l);}  }
class C{  public void testRecognizeOpenInternet() throws Exception {  Response testIResponse1=MessageFactory.create3489BindingResponse(discovererAddress,responseServerAddress,responseServerAddress);  Response testIResponse2=MessageFactory.create3489BindingResponse(discovererAddress,responseServerAddress,responseServerAddress);  responseServer.addMessage(testIResponse1);  responseServer.addMessage(testIResponse2);  StunDiscoveryReport expectedReturn=new StunDiscoveryReport();  expectedReturn.setNatType(StunDiscoveryReport.OPEN_INTERNET);  expectedReturn.setPublicAddress(discovererAddress);  StunDiscoveryReport actualReturn=stunAddressDiscoverer.determineAddress();  assertEquals("The StunAddressDiscoverer failed for a no-udp environment.",expectedReturn,actualReturn);}  }
class C{  public Long addFolderByUserId(String SID,Long userId,Long parentFileExplorerItemId,String folderName,Long room_id,Boolean isOwner,Long externalFilesid,String externalType) throws AxisFault {  return this.geFileServiceProxy().addFolderByUserId(SID,userId,parentFileExplorerItemId,folderName,room_id,isOwner,externalFilesid,externalType);}  }
class C{  static public void assertHorizontalCenterAligned(View reference,View test){  int[] xy=new int[2];  reference.getLocationOnScreen(xy);  int referenceLeft=xy[0];  test.getLocationOnScreen(xy);  int testLeft=xy[0];  int center=(reference.getMeasuredWidth() - test.getMeasuredWidth()) / 2;  int delta=testLeft - referenceLeft;  assertEquals("views are not horizontally center aligned",center,delta);}  }
class C{  public static Filter convertFilter(Element filteredElement,GraphicsNode filteredNode,BridgeContext ctx){  Value v=getComputedStyle(filteredElement,SVGCSSEngine.FILTER_INDEX);  int primitiveType=v.getPrimitiveType();switch (primitiveType) {case CSSPrimitiveValue.CSS_IDENT:    return null;case CSSPrimitiveValue.CSS_URI:  String uri=v.getStringValue();Element filter=ctx.getReferencedElement(filteredElement,uri);Bridge bridge=ctx.getBridge(filter);if (bridge == null || !(bridge instanceof FilterBridge)) {throw new BridgeException(ctx,filteredElement,ERR_CSS_URI_BAD_TARGET,new Object[]{uri});}return ((FilterBridge)bridge).createFilter(ctx,filter,filteredElement,filteredNode);default :throw new IllegalStateException("Unexpected primitive type:" + primitiveType);}}  }
class C{  protected ElementMetadata<?,?> findMetadata(QName qName){  if (metadata == null) {    return null;  }  ElementKey<?,?> childKey=metadata.findElement(qName);  if (childKey == null) {    return null;  }  ElementMetadata<?,?> childMeta=metadata.bindElement(childKey);  return childMeta;}  }
class C{  public static <T extends GenericEntity>List<T> filterByDate(List<T> datedValues,boolean allAreSame){  return filterByDate(datedValues,UtilDateTime.nowTimestamp(),null,null,allAreSame);}  }
class C{  public final void initialiseStatus(final String current){  progress_size=0;  status=new ProgressBar();  statusText=new Text();  pane=new StackPane();  status.setMaxSize(Double.MAX_VALUE,Double.MAX_VALUE);  pane.setMaxSize(Double.MAX_VALUE,Double.MAX_VALUE);  pane.getChildren().add(status);  pane.getChildren().add(statusText);  if (masterColor != null) {    final int r=(int)(255 * masterColor.getRed());    final int g=(int)(255 * masterColor.getGreen());    final int b=(int)(255 * masterColor.getBlue());    status.setStyle("-fx-background:rgb(" + r + ','+ g+ ','+ b+ ");");  }  updateStatus(current,4);}  }
class C{  public static Bitmap loadBitmap(Uri uri,Context context) throws ImageLoadException {  return loadBitmap(new UriSource(uri,context));}  }
class C{  @VisibleForTesting public static void ignoreBrowserProviderSystemPackageCheckForTests(boolean ignore){  sIgnoreBrowserProviderSystemPackageCheck=ignore;}  }
class C{  public LabeledPath(Iterable<? extends LatLon> locations){  this.setLocations(locations);}  }
class C{  public static BigInteger probablePrime(int bitLength,Random rnd){  if (bitLength < 2)   throw new ArithmeticException("bitLength < 2");  return (bitLength < SMALL_PRIME_THRESHOLD ? smallPrime(bitLength,DEFAULT_PRIME_CERTAINTY,rnd) : largePrime(bitLength,DEFAULT_PRIME_CERTAINTY,rnd));}  }
class C{  public String treebankFileExtension(){  return "fid";}  }
class C{  public int enumerate(ThreadGroup[] groups,boolean recurse){  return enumerateGeneric(groups,recurse,0,false);}  }
class C{  public int size(){  return table.size();}  }
class C{  public static void showAdvancedSettingsDialog(JFrame jFrame){  FilesUtils.copyFile(new File(Cfg.CFG_PATH),new File(Cfg.CFG_PATH + ".bak"));  AdvancedSettings setings=new AdvancedSettings();  JOptionPane pane=new JOptionPane(setings,JOptionPane.PLAIN_MESSAGE,JOptionPane.OK_CANCEL_OPTION);  JDialog dialog=pane.createDialog(jFrame,R.getString("0000052"));  dialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);  dialog.setSize(840,430);  dialog.setLocationRelativeTo(jFrame);  dialog.setVisible(true);  int status=10;  try {    status=(int)pane.getValue();  } catch (  Exception e) {    FilesUtils.copyFile(new File(Cfg.CFG_PATH + ".bak"),new File(Cfg.CFG_PATH));  }  if (status != 0) {    FilesUtils.copyFile(new File(Cfg.CFG_PATH + ".bak"),new File(Cfg.CFG_PATH));    Cfg.readCfg();  } else {    Cfg.writeCfgFile();    Cfg.readCfg();    R.initResources();  }  new File(Cfg.CFG_PATH + ".bak").delete();}  }
class C{  private ExistsRule(final String fld){  super();  if (!RESOLVER.isField(fld)) {    throw new IllegalArgumentException("Invalid EXISTS rule - " + fld + " is not a supported field");  }  this.field=fld;}  }
class C{  public void rollOver(){  Resource target;  Resource file;  if (qw != null) {    long size=((CountingQuietWriter)qw).getCount();    LogLog.debug("rolling over count=" + size);    nextRollover=size + maxFileSize;  }  LogLog.debug("maxBackupIndex=" + maxBackupIndex);  boolean renameSucceeded=true;  Resource parent=res.getParentResource();  if (maxBackupIndex > 0) {    file=parent.getRealResource(res.getName() + "." + maxBackupIndex+ ".bak");    if (file.exists())     renameSucceeded=file.delete();    for (int i=maxBackupIndex - 1; i >= 1 && renameSucceeded; i--) {      file=parent.getRealResource(res.getName() + "." + i+ ".bak");      if (file.exists()) {        target=parent.getRealResource(res.getName() + "." + (i + 1)+ ".bak");        LogLog.debug("Renaming file " + file + " to "+ target);        renameSucceeded=file.renameTo(target);      }    }    if (renameSucceeded) {      target=parent.getRealResource(res.getName() + ".1.bak");      this.closeFile();      file=res;      LogLog.debug("Renaming file " + file + " to "+ target);      renameSucceeded=file.renameTo(target);      if (!renameSucceeded) {        try {          this.setFile(true);        } catch (        IOException e) {          LogLog.error("setFile(" + res + ", true) call failed.",e);        }      }    }  }  if (renameSucceeded) {    try {      this.setFile(false);      nextRollover=0;    } catch (    IOException e) {      LogLog.error("setFile(" + res + ", false) call failed.",e);    }  }}  }
class C{  @Override protected void thresholdReached() throws IOException {  if (prefix != null) {    outputFile=File.createTempFile(prefix,suffix,directory);  }  FileOutputStream fos=new FileOutputStream(outputFile);  memoryOutputStream.writeTo(fos);  currentOutputStream=fos;  memoryOutputStream=null;}  }
class C{  public Boolean isAuthnRequestsSigned(){  return authnRequestsSigned;}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster streams;  String outputHeader=null;  String streamsHeader=null;  String outletHeader=null;  int rows=0;  int cols=0;  int row, col;  double noData=-32768;  double gridRes=0;  int i;  float progress=0;  double z;  int x, y;  int minX=0;  int minY=0;  double minDist=0;  double snapDistance=0;  int snapDistInt=0;  double outletID;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  outletHeader=args[0];  streamsHeader=args[1];  outputHeader=args[2];  snapDistance=Double.parseDouble(args[3]);  if (outletHeader.isEmpty() || streamsHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if (outletHeader.endsWith(".dep") && outputHeader.endsWith(".shp")) {    outputHeader=StringUtilities.replaceLast(outputHeader,".shp",".dep");  }  if (outletHeader.endsWith(".shp") && outputHeader.endsWith(".dep")) {    outputHeader=StringUtilities.replaceLast(outputHeader,".dep",".shp");  }  try {    streams=new WhiteboxRaster(streamsHeader,"r");    rows=streams.getNumberRows();    cols=streams.getNumberColumns();    if (outletHeader.toLowerCase().endsWith(".shp")) {      double outletX, outletY;      int outletCol, outletRow;      int recordNumber;      double zValue=0, mValue=0;      ShapeFile outlets=new ShapeFile(outletHeader);      if (outlets.getShapeType().getBaseType() != ShapeType.POINT) {        showFeedback("The outlets vector should be of a Point or " + "MultiPoint ShapeType.");        return;      }      ShapeFile output=new ShapeFile(outputHeader,outlets.getShapeType(),outlets.getAttributeTable().getAllFields());      gridRes=(streams.getCellSizeX() + streams.getCellSizeY()) / 2;      snapDistInt=(int)(snapDistance / gridRes);      if (snapDistInt < 1) {        snapDistInt=1;      }      for (      ShapeFileRecord record : outlets.records) {        recordNumber=record.getRecordNumber();        double[][] vertices;        ShapeType shapeType=record.getShapeType();switch (shapeType) {case POINT:          whitebox.geospatialfiles.shapefile.Point recPoint=(whitebox.geospatialfiles.shapefile.Point)(record.getGeometry());        vertices=recPoint.getPoints();      break;case POINTZ:    PointZ recPointZ=(PointZ)(record.getGeometry());  zValue=recPointZ.getZ();mValue=recPointZ.getM();vertices=recPointZ.getPoints();break;case POINTM:PointM recPointM=(PointM)(record.getGeometry());mValue=recPointM.getM();vertices=recPointM.getPoints();break;default :showFeedback("This ShapeType is not supported by this operation. \n" + "Please use an outlet vector of a Point base ShapeType.");return;}outletRow=streams.getRowFromYCoordinate(vertices[0][1]);outletCol=streams.getColumnFromXCoordinate(vertices[0][0]);minDist=99999999;minX=outletCol;minY=outletRow;for (x=outletCol - snapDistInt; x <= outletCol + snapDistInt; x++) {for (y=outletRow - snapDistInt; y <= outletRow + snapDistInt; y++) {z=streams.getValue(y,x);if (z > 0) {z=(x - outletCol) * (x - outletCol) + (y - outletRow) * (y - outletRow);if (z < minDist) {minDist=z;minX=x;minY=y;}}}}outletX=streams.getXCoordinateFromColumn(minX);outletY=streams.getYCoordinateFromRow(minY);Object[] recData=outlets.getAttributeTable().getRecord(recordNumber - 1);switch (shapeType) {case POINT:whitebox.geospatialfiles.shapefile.Point wbPoint=new whitebox.geospatialfiles.shapefile.Point(outletX,outletY);output.addRecord(wbPoint,recData);break;case POINTZ:PointZ pointZ=new PointZ(outletX,outletY,zValue,mValue);output.addRecord(pointZ,recData);break;case POINTM:PointM pointM=new PointM(outletX,outletY,mValue);output.addRecord(pointM,recData);break;}}output.write();} else if (outletHeader.toLowerCase().endsWith(".dep")) {WhiteboxRaster outlets=new WhiteboxRaster(outletHeader,"r");rows=outlets.getNumberRows();cols=outlets.getNumberColumns();noData=outlets.getNoDataValue();gridRes=(outlets.getCellSizeX() + outlets.getCellSizeY()) / 2;if (streams.getNumberColumns() != cols || streams.getNumberRows() != rows) {showFeedback("The input files must have the same dimensions.");return;}WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",outletHeader,WhiteboxRaster.DataType.FLOAT,noData);output.setPreferredPalette(outlets.getPreferredPalette());output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);snapDistInt=(int)(snapDistance / gridRes);if (snapDistInt < 1) {snapDistInt=1;}double[] data;for (row=0; row < rows; row++) {data=outlets.getRowValues(row);for (col=0; col < cols; col++) {outletID=data[col];if (outletID != 0 && outletID != noData) {minDist=99999999;minX=col;minY=row;for (x=col - snapDistInt; x <= col + snapDistInt; x++) {for (y=row - snapDistInt; y <= row + snapDistInt; y++) {z=streams.getValue(y,x);if (z > 0) {z=(x - col) * (x - col) + (y - row) * (y - row);if (z < minDist) {minDist=z;minX=x;minY=y;}}}}output.setValue(minY,minX,outletID);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());outlets.close();streams.close();output.close();}returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  @Override protected void closeDialogOk(){  compPropertiesPanel.commitChanges();  CompetitiveGroup competitive=(CompetitiveGroup)compPropertiesPanel.getGroup();  competitive.setLayout(layoutPanel.getCurrentLayout());  competitive.applyLayout();  competitive.offset(networkPanel.getWhereToAdd().getX(),networkPanel.getWhereToAdd().getY());  networkPanel.getNetwork().addGroup(competitive);  layoutPanel.commitChanges();  networkPanel.repaint();  super.closeDialogOk();}  }
class C{  private void testAllCmpPermutationsInc(Class[][] sortedSignatures,Object[] args,boolean varargs){  final ArgumentTypes argTs=new ArgumentTypes(args,true);  for (int i=0; i < sortedSignatures.length; i++) {    for (int j=0; j < sortedSignatures.length; j++) {      assertEquals("sortedSignatures[" + i + "] <==> sortedSignatures ["+ j+ "]",NumberUtil.getSignum(Integer.valueOf(j).compareTo(i)),NumberUtil.getSignum(argTs.compareParameterListPreferability(sortedSignatures[i],sortedSignatures[j],varargs)));    }  }}  }
class C{  public void test_heisenbug708_doubleBind() throws Exception {  int cnt=0;  int max=10;  for (int i=0; i < max; i++) {    try {      new TestHelper("heisenbug-708-doubleBind","heisenbug-708-doubleBind.rq","heisenbug-708-doubleBind.ttl","heisenbug-708-doubleBind.srx").runTest();    } catch (    AssertionFailedError e) {      cnt++;    }  }  assertTrue("Test failed " + cnt + "/"+ max+ " times",cnt == 0);}  }
class C{  private static boolean isConnected(Context context){  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo activeNetworkInfo=null;  if (connectivityManager != null) {    activeNetworkInfo=connectivityManager.getActiveNetworkInfo();  }  return activeNetworkInfo != null && activeNetworkInfo.isConnected();}  }
class C{  private boolean beginLocalWrite(EntryEventImpl event){  if (!needWriteLock(event)) {    return false;  }  if (cache.isCacheAtShutdownAll()) {    throw new CacheClosedException("Cache is shutting down");  }  Object keys[]=new Object[1];  keys[0]=event.getKey();  waitUntilLocked(keys);  boolean lockedForPrimary=false;  try {    doLockForPrimary(false);    return lockedForPrimary=true;  }  finally {    if (!lockedForPrimary) {      removeAndNotifyKeys(keys);    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  DataInputStream in=null;  BufferedReader br=null;  try {    String inputFilesString=null;    String grassFile=null;    String whiteboxHeaderFile=null;    int i=0;    int row, col, rows, cols;    String[] imageFiles;    int numImages=0;    int progress=0;    double cellsize=0;    double north=0;    double east=0;    double west=0;    double south=0;    double arcNoData=-9999;    double whiteboxNoData=-32768d;    double z=0;    String delimiter=" ";    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      grassFile=imageFiles[i];      if (!((new File(grassFile)).exists())) {        showFeedback("GRASS raster file does not exist.");        return;      }      if (grassFile.lastIndexOf(".") >= 0) {        String extension=grassFile.substring(grassFile.lastIndexOf("."));        whiteboxHeaderFile=grassFile.replace(extension,".dep");      } else {        whiteboxHeaderFile=grassFile + ".dep";      }      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxHeaderFile.replace(".dep",".tas"))).delete();      FileInputStream fstream=new FileInputStream(grassFile);      rows=0;      cols=0;      in=new DataInputStream(fstream);      br=new BufferedReader(new InputStreamReader(in));      if (grassFile != null) {        String line;        String[] str;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if (str[0].toLowerCase().contains("north")) {            north=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("south")) {            south=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("east")) {            east=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("west")) {            west=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("rows")) {            rows=Integer.parseInt(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("cols")) {            cols=Integer.parseInt(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("nodata")) {            arcNoData=Double.parseDouble(str[str.length - 1]);          } else {            break;          }        }        fw=new FileWriter(whiteboxHeaderFile,false);        bw=new BufferedWriter(fw);        out=new PrintWriter(bw,true);        str1="Min:\t" + Double.toString(Integer.MAX_VALUE);        out.println(str1);        str1="Max:\t" + Double.toString(Integer.MIN_VALUE);        out.println(str1);        str1="North:\t" + Double.toString(north);        out.println(str1);        str1="South:\t" + Double.toString(south);        out.println(str1);        str1="East:\t" + Double.toString(east);        out.println(str1);        str1="West:\t" + Double.toString(west);        out.println(str1);        str1="Cols:\t" + Integer.toString(cols);        out.println(str1);        str1="Rows:\t" + Integer.toString(rows);        out.println(str1);        str1="Data Type:\t" + "float";        out.println(str1);        str1="Z Units:\t" + "not specified";        out.println(str1);        str1="XY Units:\t" + "not specified";        out.println(str1);        str1="Projection:\t" + "not specified";        out.println(str1);        str1="Data Scale:\tcontinuous";        out.println(str1);        str1="Preferred Palette:\t" + "spectrum.pal";        out.println(str1);        str1="NoData:\t" + whiteboxNoData;        out.println(str1);        if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {          str1="Byte Order:\t" + "LITTLE_ENDIAN";        } else {          str1="Byte Order:\t" + "BIG_ENDIAN";        }        out.println(str1);        WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"rw");        wbr.reinitialize(whiteboxNoData);        delimiter=" ";        row=0;        col=0;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if (str[0].toLowerCase().contains("north")) {          } else           if (str[0].toLowerCase().contains("south")) {          } else           if (str[0].toLowerCase().contains("east")) {          } else           if (str[0].toLowerCase().contains("west")) {          } else           if (str[0].toLowerCase().contains("rows")) {          } else           if (str[0].toLowerCase().contains("cols")) {          } else           if (str[0].toLowerCase().contains("nodata")) {          } else {            for (i=0; i < str.length; i++) {              if (StringUtilities.isNumeric(str[i])) {                z=Double.parseDouble(str[i]);                if (z != arcNoData) {                  wbr.setValue(row,col,z);                } else {                  wbr.setValue(row,col,whiteboxNoData);                }              } else {                wbr.setValue(row,col,whiteboxNoData);              }              col++;              if (col == cols) {                col=0;                row++;                progress=(int)(100f * row / (rows - 1));                updateProgress(progress);              }            }          }        }        in.close();        br.close();        wbr.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");        wbr.addMetadataEntry("Created on " + new Date());        wbr.flush();        wbr.findMinAndMaxVals();        wbr.close();        returnData(whiteboxHeaderFile);      }    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public BasicLocation(double latitude,double longitude,int xOffset,int yOffset,String name,OMGraphic locationMarker){  super(latitude,longitude,xOffset,yOffset,name,locationMarker);}  }
class C{  public void testBoundedDoubles(){  AtomicInteger fails=new AtomicInteger(0);  SplittableRandom r=new SplittableRandom();  long size=456;  for (double least=0.00011; least < 1.0e20; least*=9) {    for (double bound=least * 1.0011; bound < 1.0e20; bound*=17) {      final double lo=least, hi=bound;      r.doubles(size,lo,hi).parallel().forEach(null);    }  }  assertEquals(fails.get(),0);}  }
class C{  public boolean hasContent(){  return fieldSetFlags()[9];}  }
class C{  public RandomProjectionLSH(List<V> vecs,int ints,boolean inMemory){  randProjMatrix=new NormalMatrix(ints * Integer.SIZE,vecs.get(0).length(),NO_POOL);  if (inMemory) {    Matrix dense=new DenseMatrix(randProjMatrix.rows(),randProjMatrix.cols());    dense.mutableAdd(randProjMatrix);    randProjMatrix=dense;  }  setUpVecs(vecs);}  }
class C{  public Prepared prepare(String sql,boolean rightsChecked){  Parser parser=new Parser(this);  parser.setRightsChecked(rightsChecked);  return parser.prepare(sql);}  }
class C{  public static long murmur3(final BitVector bv,final long prefixLength,final long[] hh1,final long[] hh2,final long[] cc1,final long cc2[]){  final int startStateWord=(int)(prefixLength / (2 * Long.SIZE));  long precomputedUpTo=startStateWord * 2L * Long.SIZE;  long h1=hh1[startStateWord];  long h2=hh2[startStateWord];  long c1=cc1[startStateWord];  long c2=cc2[startStateWord];  long k1, k2;  if (prefixLength > precomputedUpTo) {    if (prefixLength - precomputedUpTo > Long.SIZE) {      k1=bv.getLong(precomputedUpTo,precomputedUpTo+=Long.SIZE);      k2=bv.getLong(precomputedUpTo,prefixLength);    } else {      k1=bv.getLong(precomputedUpTo,prefixLength);      k2=0;    }    k1*=c1;    k1=Long.rotateLeft(k1,23);    k1*=c2;    h1^=k1;    h1+=h2;    h2=Long.rotateLeft(h2,41);    k2*=c2;    k2=Long.rotateLeft(k2,23);    k2*=c1;    h2^=k2;    h2+=h1;    h1=h1 * 3 + 0x52dce729;    h2=h2 * 3 + 0x38495ab5;    c1=c1 * 5 + 0x7b7d159c;    c2=c2 * 5 + 0x6bce6396;  }  h2^=prefixLength;  h1+=h2;  h2+=h1;  h1=finalizeMurmur3(h1);  h2=finalizeMurmur3(h2);  return h1 + h2;}  }
class C{  public JSONObject putOpt(String key,Object value) throws JSONException {  if (key != null && value != null) {    this.put(key,value);  }  return this;}  }
class C{  public Object error(){  return error;}  }
class C{  @Override public void onDirectoryPick(String selectedAbsolutePath,int queryTypeId){  if (!this.mHasEmbeddedDirPicker) {    navigateTo(selectedAbsolutePath,queryTypeId);  }  mDirPicker=null;}  }
class C{  public String random(Object omax){  return random(0,omax);}  }
class C{  public void reset(){  removeAll();  if (container != null) {    container.removeAll();  }  if (lightTriggers) {    if (container == null) {      container=new JPanel();      container.setLayout(new FlowLayout(FlowLayout.LEFT,0,0));    }    add(container);  } else {    container=null;  }  if (layers != null) {    for (int i=0; i < layers.length; i++) {      JButton statusgif=getStatusLightForLayer(layers[i]);      if (statusgif != null) {        if (lightTriggers) {          container.add(statusgif);        } else {          add(statusgif);        }      }    }  }  revalidate();}  }
class C{  public PixelMatrixEditorsComboBoxModel(){  super();  selection=PixelMatrixEditors.VALUES.get(0);}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  public static void addIssue(Set<Issue> errors,Set<Issue> warnings,Issue issue,String logDescription){  if (issue.getSeverity().equals(IssueSeverity.ERROR)) {    logger.error(logDescription);    errors.add(issue);  } else {    logger.warn(logDescription);    warnings.add(issue);  }}  }
class C{  private CommandLineStartup(){}  }
class C{  public Map<String,Object> makeValid(Map<String,? extends Object> source,String mode){  return makeValid(source,mode,true,null);}  }
class C{  @Override public void close(){}  }
class C{  public static void registerPeripheralProvider(IPeripheralProvider handler){  findCC();  if (computerCraft_registerPeripheralProvider != null) {    try {      computerCraft_registerPeripheralProvider.invoke(null,handler);    } catch (    Exception e) {    }  }}  }
class C{  public static String KindToName(int kind){switch (kind) {default :    return "Unknown";case FILE_KIND_MUSIC:  return "Music";case FILE_KIND_ALARM:return "Alarm";case FILE_KIND_NOTIFICATION:return "Notification";case FILE_KIND_RINGTONE:return "Ringtone";}}  }
class C{  protected boolean shouldShowControls(){  MediaControllerCompat mediaController=getSupportMediaController();  if (mediaController == null || mediaController.getMetadata() == null || mediaController.getPlaybackState() == null) {    return false;  }switch (mediaController.getPlaybackState().getState()) {case PlaybackStateCompat.STATE_ERROR:case PlaybackStateCompat.STATE_NONE:case PlaybackStateCompat.STATE_STOPPED:    return false;default :  return true;}}  }
class C{  public static MultisigAggregateModificationTransaction createMultisigModification(){  return new MultisigAggregateModificationTransaction(TimeInstant.ZERO,Utils.generateRandomAccount(),Collections.singletonList(new MultisigCosignatoryModification(MultisigModificationType.AddCosignatory,Utils.generateRandomAccount())));}  }
class C{  private void checkSecretVersions(List<SecretDetailResponseV2> versions,String name,int totalVersions,int versionIdx,int numVersions){  long creationTime=System.currentTimeMillis() / 1000L;  int startIdx=totalVersions - versionIdx - 1;  int expectedVersions=Math.min(numVersions,totalVersions - versionIdx);  assertThat(versions.size()).isEqualTo(expectedVersions);  for (  SecretDetailResponseV2 version : versions) {    assertThat(version.createdAtSeconds() < creationTime);    creationTime=version.createdAtSeconds();    assertThat(version.metadata()).isEqualTo(ImmutableMap.of("version",Integer.toString(startIdx--)));    assertThat(version.name()).isEqualTo(name);  }}  }
class C{  public void finishActivity(Class<?> clz){  if (mActivityStack == null)   return;  for (  Activity activity : mActivityStack) {    if (activity.getClass().equals(clz))     finishActivity(activity);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:35.647 -0500",hash_original_method="CE2184BFA0A9A5A1AA8BA0C0C675B13F",hash_generated_method="F6885C253F66C4BA576C0F815CAC3106") public Request createRequest(URI requestURI,String method,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards) throws ParseException {  if (requestURI == null || method == null || callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null)   throw new ParseException("JAIN-SIP Exception, some parameters are missing" + ", unable to create the request",0);  SIPRequest sipRequest=new SIPRequest();  sipRequest.setRequestURI(requestURI);  sipRequest.setMethod(method);  sipRequest.setCallId(callId);  sipRequest.setCSeq(cSeq);  sipRequest.setFrom(from);  sipRequest.setTo(to);  sipRequest.setVia(via);  sipRequest.setMaxForwards(maxForwards);  if (userAgent != null) {    sipRequest.setHeader(userAgent);  }  return sipRequest;}  }
class C{  protected void parseXml(Reader reader,XmlNamespaceDictionary namespaceDictionary) throws IOException, XmlPullParserException {  this.xmlPullParser.setInput(reader);  Xml.parseElement(this.xmlPullParser,this,namespaceDictionary,null);}  }
class C{  public void update(final byte[] key,final U value){  if (key == null || key.length == 0)   return;  insertOrIgnore(MurmurHash3.hash(key,DEFAULT_UPDATE_SEED)[0] >>> 1,value);}  }
class C{  public boolean isTitleEnabled(){  return mCollapsingTitleEnabled;}  }
class C{  public StoredItemStack removeStackFromPlayer(StoredItemStack remove,EntityPlayer player,boolean enderChest,ActionType action){  return remove;}  }
class C{  public Algebra(){  this(Property.DEFAULT.tolerance());}  }
class C{  public boolean connectToWifi(String knownSSID){  WifiConfiguration config=new WifiConfiguration();  config.SSID=knownSSID;  config.allowedKeyManagement.set(KeyMgmt.NONE);  return connectToWifiWithConfiguration(config);}  }
class C{  @Override public boolean execute(String sql) throws SQLException {  try {    debugCodeCall("execute",sql);    return executeInternal(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static <T>Set<T> minus(Set<T> self,Collection<?> removeMe){  Comparator comparator=(self instanceof SortedSet) ? ((SortedSet)self).comparator() : null;  final Set<T> ansSet=createSimilarSet(self);  ansSet.addAll(self);  if (removeMe != null) {    for (    T o1 : self) {      for (      Object o2 : removeMe) {        boolean areEqual=(comparator != null) ? (comparator.compare(o1,o2) == 0) : coercedEquals(o1,o2);        if (areEqual) {          ansSet.remove(o1);        }      }    }  }  return ansSet;}  }
class C{  public final DoubleGrid3D floor(){  double[][] fieldx=null;  double[] fieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++)       fieldxy[z]=Math.floor(fieldxy[z]);    }  }  return this;}  }
class C{  public String toString(){  return "[Digest Input Stream] " + digest.toString();}  }
class C{  public static boolean shuffle(Object[] objArray,int shuffleCount){  int length;  if (objArray == null || shuffleCount < 0 || (length=objArray.length) < shuffleCount) {    return false;  }  for (int i=1; i <= shuffleCount; i++) {    int random=getRandom(length - i);    Object temp=objArray[length - i];    objArray[length - i]=objArray[random];    objArray[random]=temp;  }  return true;}  }
class C{  private void extendSelection(TreePath newLead){  TreePath aPath=getAnchorSelectionPath();  int aRow=(aPath == null) ? -1 : getRowForPath(tree,aPath);  int newIndex=getRowForPath(tree,newLead);  if (aRow == -1) {    tree.setSelectionRow(newIndex);  } else {    if (aRow < newIndex) {      tree.setSelectionInterval(aRow,newIndex);    } else {      tree.setSelectionInterval(newIndex,aRow);    }    setAnchorSelectionPath(aPath);    setLeadSelectionPath(newLead);  }}  }
class C{  public CoordPanel(CenterSupport support){  centerDelegate=support;  makeWidgets();}  }
class C{  public static FixedWindows of(Duration size){  return new FixedWindows(size,Duration.ZERO);}  }
class C{  private void sortAndFilterItineraries(){  this.itineraries.sort(null);  Itinerary prev=null;  for (Iterator<Itinerary> it=itineraries.iterator(); it.hasNext(); ) {    Itinerary current=it.next();    if (prev != null && prev.alightTimes[this.length - 1] == current.alightTimes[this.length - 1])     it.remove();    prev=current;  }  Collections.reverse(this.itineraries);}  }
class C{  public ScriptedMetricBuilder combineScript(Script combineScript){  this.combineScript=combineScript;  return this;}  }
class C{  public void inOrder(){  inOrder(root);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_STATE_1__STATE_INTERNAL_1:    return ((InternalEList<?>)getStateInternal_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static int pickFromDistribution(final float[] probabilities,final float prob,final int checkboundary){  if (prob < 0.0f || prob > 1.0f)   throw new ArithmeticException("Invalid probability for pickFromDistribution (must be 0.0<=x<=1.0)"); else   if (probabilities.length == 1)   return 0; else   if (probabilities.length < checkboundary) {    for (int x=0; x < probabilities.length - 1; x++)     if (probabilities[x] > prob)     return exemptZeroes(probabilities,x);    return exemptZeroes(probabilities,probabilities.length - 1);  } else {    int top=probabilities.length - 1;    int bottom=0;    int cur;    while (top != bottom) {      cur=(top + bottom) / 2;      if (probabilities[cur] > prob)       if (cur == 0 || probabilities[cur - 1] <= prob)       return exemptZeroes(probabilities,cur); else       top=cur; else       if (cur == probabilities.length - 1)       return exemptZeroes(probabilities,cur); else       if (bottom == cur)       bottom++; else       bottom=cur;    }    return exemptZeroes(probabilities,bottom);  }}  }
class C{  public void clearAdapters(){  for (  LocalAdapter localAdapter : mAdapters) {    localAdapter.mAdapter.unregisterAdapterDataObserver(localAdapter.adapterDataObserver);  }  mAdapters.clear();}  }
class C{  private void removeNotification(){  ((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).cancel(NOTIFICATION_ID);}  }
class C{  @Deprecated public IgfsPath root(){  return ROOT;}  }
class C{  public Object encode(Object pObject) throws EncoderException {  if (pObject == null) {    return null;  } else   if (pObject instanceof String) {    return encode((String)pObject);  } else {    throw new EncoderException("Objects of type " + pObject.getClass().getName() + " cannot be encoded using Q codec");  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  @Override public boolean supportsIntegerValues(){  return SUPPORTS_INTEGER_VALUES;}  }
class C{  @Deprecated public ApprovalInfo approve(String id,String message){  UriBuilder uriBuilder=client.uriBuilder(PathConstants.APPROVE_URL);  if (message != null) {    uriBuilder.replaceQueryParam("message",message);  }  return client.postURI(ApprovalInfo.class,uriBuilder.build(id));}  }
class C{  public HumanResource(String name,int id,HumanResourceManager manager){  this.id=id;  this.name=name;  myManager=manager;  myCustomProperties=new CustomColumnsValues(myManager.getCustomPropertyManager());}  }
class C{  public EqualsBuilder append(int lhs,int rhs){  if (isEquals == false) {    return this;  }  isEquals=(lhs == rhs);  return this;}  }
class C{  public Tasks<R> waitFor() throws ViPRException {  return waitFor(-1);}  }
class C{  @After public void tearDown() throws Exception {  m_brokerModel.onDisconnect();  strategyProxy.cancel();  TradestrategyTest.clearDBData();}  }
class C{  public boolean processRow(StepMetaInterface smi,StepDataInterface sdi) throws KettleException {  meta=(MDKeyGenStepMeta)smi;  StandardLogService.setThreadName(meta.getPartitionID(),null);  data=(MDKeyGenStepData)sdi;  meta.initialize();  Object[] row=getRow();  if (first) {    CarbonTimeStatisticsFactory.getLoadStatisticsInstance().recordMdkGenerateTotalTime(meta.getPartitionID(),System.currentTimeMillis());    first=false;    data.outputRowMeta=new RowMeta();    boolean isExecutionRequired=setStepConfiguration();    if (!isExecutionRequired) {      processingComplete();      return false;    }    setStepOutputInterface();  }  if (null != row) {    putRow(data.outputRowMeta,new Object[measureCount + 1]);    return true;  }  try {    initDataHandler();    dataHandler.initialise();    finalMerger.startFinalMerge();    CarbonTimeStatisticsFactory.getLoadStatisticsInstance().recordDictionaryValue2MdkAdd2FileTime(meta.getPartitionID(),System.currentTimeMillis());    while (finalMerger.hasNext()) {      Object[] r=finalMerger.next();      readCounter++;      Object[] outputRow=process(r);      dataHandler.addDataToStore(outputRow);      writeCounter++;    }  } catch (  CarbonDataWriterException e) {    LOGGER.error(e,"Failed for table: " + this.tableName + " in MDKeyGenStep");    throw new KettleException("Error while initializing data handler : " + e.getMessage());  }catch (  Exception e) {    LOGGER.error(e,"Failed for table: " + this.tableName + " in MDKeyGenStep");    throw new KettleException("There is an unexpected error: " + e.getMessage());  } finally {    try {      dataHandler.finish();    } catch (    CarbonDataWriterException e) {      LOGGER.error(e,"Failed for table: " + this.tableName + " in  finishing data handler");    }catch (    Exception e) {      LOGGER.error(e,"Failed for table: " + this.tableName + " in  finishing data handler");    }  }  LOGGER.info("Record Procerssed For table: " + this.tableName);  String logMessage="Finished Carbon Mdkey Generation Step: Read: " + readCounter + ": Write: "+ writeCounter;  LOGGER.info(logMessage);  CarbonTimeStatisticsFactory.getLoadStatisticsInstance().recordTotalRecords(writeCounter);  processingComplete();  CarbonTimeStatisticsFactory.getLoadStatisticsInstance().recordDictionaryValue2MdkAdd2FileTime(meta.getPartitionID(),System.currentTimeMillis());  CarbonTimeStatisticsFactory.getLoadStatisticsInstance().recordMdkGenerateTotalTime(meta.getPartitionID(),System.currentTimeMillis());  return false;}  }
class C{  private double[] computeOutSlope(double[] curr,int currSegType,double[] next,int nextSegType){  Point2D currEndPoint=getSegmentTerminatingPoint(curr,currSegType);  double dx=0, dy=0;switch (nextSegType) {case PathIterator.SEG_CLOSE:    break;case PathIterator.SEG_CUBICTO:case PathIterator.SEG_LINETO:case PathIterator.SEG_QUADTO:  dx=next[0] - currEndPoint.getX();dy=next[1] - currEndPoint.getY();break;case ExtendedPathIterator.SEG_ARCTO:{boolean large=(next[3] != 0.);boolean goLeft=(next[4] != 0.);Arc2D arc=ExtendedGeneralPath.computeArc(currEndPoint.getX(),currEndPoint.getY(),next[0],next[1],next[2],large,goLeft,next[5],next[6]);double theta=arc.getAngleStart();theta=Math.toRadians(theta);dx=-arc.getWidth() / 2.0 * Math.sin(theta);dy=arc.getHeight() / 2.0 * Math.cos(theta);if (next[2] != 0) {double ang=Math.toRadians(-next[2]);double sinA=Math.sin(ang);double cosA=Math.cos(ang);double tdx=dx * cosA - dy * sinA;double tdy=dx * sinA + dy * cosA;dx=tdx;dy=tdy;}if (goLeft) {dx=-dx;} else {dy=-dy;}}break;case PathIterator.SEG_MOVETO:default :return null;}if (dx == 0 && dy == 0) {return null;}return normalize(new double[]{dx,dy});}  }
class C{  public void testNotEnoughValues() throws Exception {  Directory dir=newDirectory();  int bitsPerValue=DirectWriter.bitsRequired(2);  IndexOutput output=dir.createOutput("foo",IOContext.DEFAULT);  DirectWriter writer=DirectWriter.getInstance(output,5,bitsPerValue);  writer.add(1);  writer.add(0);  writer.add(2);  writer.add(1);  IllegalStateException expected=expectThrows(IllegalStateException.class,null);  assertTrue(expected.getMessage().startsWith("Wrong number of values added"));  output.close();  dir.close();}  }
class C{  public boolean hasPersistentLock(String svcId,String lockId) throws Exception {  try {    DistributedPersistentLock lock=_coordinator.getSiteLocalPersistentLock(lockId);    if (lock != null) {      String lockOwner=lock.getLockOwner();      if (lockOwner != null && lockOwner.equals(svcId)) {        _log.info("Current owner of the {} lock: {} ",lockId,lockOwner);        return true;      }    }  } catch (  Exception e) {    _log.error("Can not get {} lock owner ",lockId);  }  return false;}  }
class C{  private void doneCurrentGroup() throws HeadlessException {  final JTextField text=new JTextField();  final Iterator<Entry<String,Point>> centersiter=m_centers.entrySet().iterator();  guessCountryName(text,centersiter);  final int option=JOptionPane.showConfirmDialog(this,text);  if (option == 0) {    if (!m_centers.keySet().contains(text.getText())) {      JOptionPane.showMessageDialog(this,"not a valid name");      m_current=null;      return;    }    m_polygons.put(text.getText(),new ArrayList<>(m_current));    m_current=null;  } else   if (option > 0) {    m_current=null;  } else {    System.out.println("something very invalid");  }}  }
class C{  public Vector4f mulProject(Matrix4fc mat){  return mulProject(mat,this);}  }
class C{  public void encode(OutputStream out,boolean isCertReq) throws CertificateException, IOException {  DerOutputStream extOut=new DerOutputStream();  Collection<Extension> allExts=map.values();  Object[] objs=allExts.toArray();  for (int i=0; i < objs.length; i++) {    if (objs[i] instanceof CertAttrSet)     ((CertAttrSet)objs[i]).encode(extOut); else     if (objs[i] instanceof Extension)     ((Extension)objs[i]).encode(extOut); else     throw new CertificateException("Illegal extension object");  }  DerOutputStream seq=new DerOutputStream();  seq.write(DerValue.tag_Sequence,extOut);  DerOutputStream tmp;  if (!isCertReq) {    tmp=new DerOutputStream();    tmp.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)3),seq);  } else   tmp=seq;  out.write(tmp.toByteArray());}  }
class C{  public void sendInstantMultimediaMessage(String serviceId,ContactId contact,byte[] content,String contentType) throws RcsServiceNotRegisteredException, RcsPermissionDeniedException, RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    mApi.sendInstantMultimediaMessage(serviceId,contact,content,contentType);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsServiceNotRegisteredException.assertException(e);    RcsPermissionDeniedException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  @Override public void updateScreen(){}  }
class C{  public AngleSlider(final Composite parent,final int style){  super(parent,style | SWT.DOUBLE_BUFFERED);  final ClassLoader loader=org.mihalis.opal.angles.AngleSlider.class.getClassLoader();  backgroundImage=new Image(getDisplay(),loader.getResourceAsStream("images/angleBackground.png"));  buttonFocus=new Image(getDisplay(),loader.getResourceAsStream("images/angleButtonFocus.png"));  buttonNoFocus=new Image(getDisplay(),loader.getResourceAsStream("images/angleButtonFocusLost.png"));  addListeners();  selection=0;  selectionListeners=new ArrayList<SelectionListener>();}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  private static boolean validStr(String s){  return s != null && !s.isEmpty();}  }
class C{  public SelectItem(Object value,String label,String description,boolean disabled,boolean escape,boolean noSelectionOption){  super();  setValue(value);  setLabel(label);  setDescription(description);  setDisabled(disabled);  setEscape(escape);  setNoSelectionOption(noSelectionOption);}  }
class C{  public static String onDocumentTreeActivityResult(Context context,int requestCode,int resultCode,Intent data){  final String selectedPath=StoragePicker.handle(context,requestCode,resultCode,data);  if (selectedPath != null) {    ConfigurationManager.instance().setStoragePath(selectedPath);    BTEngine.ctx.dataDir=Platforms.data();    BTEngine.ctx.torrentsDir=Platforms.torrents();  }  return selectedPath;}  }
class C{  @Override public void logic(){  if (has("risk")) {    remove("risk");    notifyWorldAboutChanges();  }  if (has("damage")) {    remove("damage");    notifyWorldAboutChanges();  }  if (has("heal")) {    remove("heal");    notifyWorldAboutChanges();  }  if (has("dead")) {    remove("dead");    notifyWorldAboutChanges();  }  if (has("online")) {    remove("online");    notifyWorldAboutChanges();  }  if (has("offline")) {    remove("offline");    notifyWorldAboutChanges();  }  applyMovement();  final int turn=SingletonRepository.getRuleProcessor().getTurn();  if (isAttacking() && turn % getAttackRate() == 0) {    RPEntity attackTarget=getAttackTarget();    if (stopped() && isInSight(attackTarget) && !isFacingToward(attackTarget)) {      faceToward(attackTarget);      notifyWorldAboutChanges();    }    StendhalRPAction.playerAttack(this,attackTarget);  }  agePlayer(turn);}  }
class C{  private void addMarketplaceToReview(){  Marketplace mp=new Marketplace();  mp.setOrganization(org);  Set<Marketplace> mps=new HashSet<Marketplace>();  mps.add(mp);  CatalogEntry catalogEntry=new CatalogEntry();  catalogEntry.setMarketplace(mp);  List<CatalogEntry> catalogEntries=new ArrayList<CatalogEntry>();  catalogEntries.add(catalogEntry);  productReview.getProductFeedback().getProduct().setCatalogEntries(catalogEntries);}  }
class C{  public long nextVirtualOffset(){  return mNextVirtualOffset;}  }
class C{  private void removeLastEntry(){  Entry entry=indexToEntry.remove(size() - 1);  keyToEntry.remove(entry.key);}  }
class C{  @Override public void tagMetaData(String xml) throws IOException {  try {    XMPMeta xmpmeta=XMPMetaFactory.parseFromString(xml);    XMPProperty xp=xmpmeta.getProperty(XMPConst.NS_DC,"title");    if (xp != null) {      headerstr="<title>" + xp.getValue() + "</title>";    }    xp=xmpmeta.getProperty(XMPConst.NS_DC,"creator");    if (xp != null) {      headerstr+="<meta name=\"author\" content=\"" + xp.getValue() + "\">";    }    xp=xmpmeta.getProperty(XMPConst.NS_DC,"description");    if (xp != null) {      headerstr+="<meta name=\"description\" content=\"" + xp.getValue() + "\">";    }    xp=xmpmeta.getProperty(XMPConst.NS_DC,"subject");    if (xp != null) {      headerstr+="<meta name=\"keywords\" content=\"" + xp.getValue() + "\">";    }    xp=xmpmeta.getProperty(XMPConst.NS_XMP,"ModifyDate");    if (xp != null) {      headerstr+="<meta name=\"date\" content=\"" + xp.getValue() + "\">";    } else {      xp=xmpmeta.getProperty(XMPConst.NS_XMP,"CreateDate");      if (xp != null) {        headerstr+="<meta name=\"date\" content=\"" + xp.getValue() + "\">";      } else {        xp=xmpmeta.getProperty(XMPConst.NS_DC,"date");        if (xp != null) {          headerstr+="<meta name=\"date\" content=\"" + xp.getValue() + "\">";        }      }    }    xp=xmpmeta.getProperty(XMPConst.NS_XMP,"CreatorTool");    if (xp != null) {      headerstr+="<meta name=\"generator\" content=\"" + xp.getValue() + "\">";    }    xp=xmpmeta.getProperty(XMPConst.NS_DC,"publisher");    if (xp != null) {      headerstr+="<meta name=\"publisher\" content=\"" + xp.getValue() + "\">";    }  } catch (  XMPException ex) {  }}  }
class C{  protected int addToDistinctSets(int[][] sets,int n,int p,int setNumber,int[] workingSet,int fromIndex,int selectFrom){  if (fromIndex == p) {    System.arraycopy(workingSet,0,sets[setNumber],0,p);    setNumber++;  } else {    for (int c=selectFrom; c < n; c++) {      workingSet[fromIndex]=c;      setNumber=addToDistinctSets(sets,n,p,setNumber,workingSet,fromIndex + 1,c + 1);    }  }  return setNumber;}  }
class C{  public void addActionListener(ActionListener al){  actionListener=al;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public RandomizedSet(){  list=new ArrayList<Integer>();  r=new Random();}  }
class C{  private void cut(int i){  Node<Key> x=nodes[i];  Node<Key> parent=x.parent;  parent.child=cut(x,parent.child);  x.parent=null;  parent.order--;  head=insert(x,head);  parent.mark=!parent.mark;  if (!parent.mark && parent.parent != null) {    cut(parent.index);  }}  }
class C{  public BranchesAdapter(Context context,List<Branch> branches){  layoutInflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);  this.branches=branches;}  }
class C{  protected BooleanType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  public ToolTip build(){  return new ToolTip(textResourceId,text,textGravity,textColor,textSize,typeface,typefaceStyle,lines,backgroundColor,leftPadding,rightPadding,topPadding,bottomPadding,radius);}  }
class C{  public boolean isXaSuspended(){  return this.isXaSuspended;}  }
class C{  public static byte[] randomBytes(byte len){  char u8=convertByte2Uint8(len);  return randomBytes(u8);}  }
class C{  public static DecomposableMatchBuilder1<Integer,Integer> caseInt(MatchesAny i){  List<Matcher<Object>> matchers=new ArrayList<>();  matchers.add(any());  return new DecomposableMatchBuilder1<>(matchers,0,new PrimitiveFieldExtractor<>(Integer.class));}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  private void outputProjects(Properties ctx,PrintWriter out,int projectID,boolean includeAny){  out.println("<projects>");  if (includeAny) {    out.println("<project id='-1'");    if (projectID == 0)     out.println(" selected='selected'");    out.println(">ANY</project>");  }  out.println("<project id='1'>Landscaping New Office</project>");  out.println("</projects>");}  }
class C{  public void cancel(){  doIt=false;}  }
class C{  @Nullable @VisibleForTesting State waitUntilFinish(Duration duration,MonitoringUtil.JobMessagesHandler messageHandler,Sleeper sleeper,NanoClock nanoClock) throws IOException, InterruptedException {  MonitoringUtil monitor=new MonitoringUtil(projectId,dataflowOptions.getDataflowClient());  long lastTimestamp=0;  BackOff backoff;  if (!duration.isLongerThan(Duration.ZERO)) {    backoff=MESSAGES_BACKOFF_FACTORY.backoff();  } else {    backoff=MESSAGES_BACKOFF_FACTORY.withMaxCumulativeBackoff(duration).backoff();  }  long startNanos=nanoClock.nanoTime();  State state;  do {    state=getStateWithRetries(STATUS_BACKOFF_FACTORY.withMaxRetries(0).backoff(),sleeper);    boolean hasError=state == State.UNKNOWN;    if (messageHandler != null && !hasError) {      try {        List<JobMessage> allMessages=monitor.getJobMessages(jobId,lastTimestamp);        if (!allMessages.isEmpty()) {          lastTimestamp=fromCloudTime(allMessages.get(allMessages.size() - 1).getTime()).getMillis();          messageHandler.process(allMessages);        }      } catch (      GoogleJsonResponseException|SocketTimeoutException e) {        hasError=true;        LOG.warn("There were problems getting current job messages: {}.",e.getMessage());        LOG.debug("Exception information:",e);      }    }    if (!hasError) {      if (state.isTerminal()) {        return state;      }      backoff.reset();      if (duration.isLongerThan(Duration.ZERO)) {        long nanosConsumed=nanoClock.nanoTime() - startNanos;        Duration consumed=Duration.millis((nanosConsumed + 999999) / 1000000);        Duration remaining=duration.minus(consumed);        if (remaining.isLongerThan(Duration.ZERO)) {          backoff=MESSAGES_BACKOFF_FACTORY.withMaxCumulativeBackoff(remaining).backoff();        } else {          backoff=BackOff.STOP_BACKOFF;        }      }    }  } while (BackOffUtils.next(sleeper,backoff));  LOG.warn("No terminal state was returned.  State value {}",state);  return null;}  }
class C{  private void nothingToDisplay(@Nullable Revision revision){  displayCommitA(revision);  displayCommitB(null);  view.setCompareType(constant.historyNothingToDisplay());  view.setDiffContext("");}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (!getClass().isInstance(obj))   return false;  MessageTypeEventHandler<?> mteh=(MessageTypeEventHandler<?>)obj;  return (messageType == mteh.messageType) && delegate.equals(mteh.delegate);}  }
class C{  public void blacklist(ModelEndpoint endpoint){  blacklist(toUrl(endpoint.getEndpoint().getUrl()));}  }
class C{  final Node predecessor() throws NullPointerException {  Node p=prev;  if (p == null)   throw new NullPointerException(); else   return p;}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFilesString=args[0];  String[] imageFiles=inputFilesString.split(";");  int numFiles=imageFiles.length;  double backgroundValue=Double.parseDouble(args[1]);  if (inputFilesString.isEmpty() || numFiles < 1) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    int progress=0;    double[] data;    for (int a=0; a < numFiles; a++) {      WhiteboxRaster inputFile=new WhiteboxRaster(imageFiles[a],"rw");      int rows=inputFile.getNumberRows();      int cols=inputFile.getNumberColumns();      double noData=inputFile.getNoDataValue();      for (row=0; row < rows; row++) {        data=inputFile.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] == backgroundValue) {            inputFile.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Processing image " + (a + 1) + " of "+ numFiles+ ":",progress);      }      inputFile.close();    }    showFeedback("Operation complete");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void addTermWeights(Map<String,Flt> termWeightMap,Terms vector) throws IOException {  final TermsEnum termsEnum=vector.iterator(null);  final CharsRef spare=new CharsRef();  BytesRef text;  while ((text=termsEnum.next()) != null) {    UnicodeUtil.UTF8toUTF16(text,spare);    final String term=spare.toString();    if (isNoiseWord(term)) {      continue;    }    final int freq=(int)termsEnum.totalTermFreq();    Flt cnt=termWeightMap.get(term);    if (cnt == null) {      termWeightMap.put(term,new Flt(freq));    } else {      cnt.x+=freq;    }  }}  }
class C{  public PushHistory(int maxHistoryLength,JSONObject json){  this.maxHistoryLength=maxHistoryLength;  this.entries=new PriorityQueue<Entry>(maxHistoryLength + 1);  this.pushIds=new HashSet<String>(maxHistoryLength + 1);  this.lastTime=null;  if (json != null) {    JSONObject jsonHistory=json.optJSONObject("seen");    if (jsonHistory != null) {      Iterator<String> it=jsonHistory.keys();      while (it.hasNext()) {        String pushId=(String)it.next();        String timestamp=jsonHistory.optString(pushId,null);        if (pushId != null && timestamp != null) {          tryInsertPush(pushId,timestamp);        }      }    }    setLastReceivedTimestamp(json.optString("lastTime",null));  }}  }
class C{  @Override public void update(long n){  DistributionData original;  do {    original=value.get();  } while (!value.compareAndSet(original,original.combine(DistributionData.singleton(n))));  dirty.afterModification();}  }
class C{  @Override public synchronized void disconnectionNotification(String eventName,Object source){  if (eventName.compareTo("dataSet") == 0) {    if (m_dataProvider == source) {      m_dataProvider=null;    }  }  m_connectedFormat=null;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.STATE_MACHINE___ENUM_1:    return getEnum_1();case UmplePackage.STATE_MACHINE___INLINE_STATE_MACHINE_1:  return getInlineStateMachine_1();case UmplePackage.STATE_MACHINE___REFERENCED_STATE_MACHINE_1:return getReferencedStateMachine_1();case UmplePackage.STATE_MACHINE___ACTIVE_DEFINITION_1:return getActiveDefinition_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  Vset check(Environment env,Context ctx,Vset vset,Hashtable exp){  checkLabel(env,ctx);  vset=reach(env,vset);  Context initctx=new Context(ctx,this);  if (init != null) {    vset=init.checkBlockStatement(env,initctx,vset,exp);  }  CheckContext newctx=new CheckContext(initctx,this);  Vset vsEntry=vset.copy();  ConditionVars cvars;  if (cond != null) {    cvars=cond.checkCondition(env,newctx,vset,exp);    cond=convert(env,newctx,Type.tBoolean,cond);  } else {    cvars=new ConditionVars();    cvars.vsFalse=Vset.DEAD_END;    cvars.vsTrue=vset;  }  vset=body.check(env,newctx,cvars.vsTrue,exp);  vset=vset.join(newctx.vsContinue);  if (inc != null) {    vset=inc.check(env,newctx,vset,exp);  }  initctx.checkBackBranch(env,this,vsEntry,vset);  vset=newctx.vsBreak.join(cvars.vsFalse);  return ctx.removeAdditionalVars(vset);}  }
class C{  private static void deleteWorkingTemporaryDirectory(String dirPath) throws IOException {  File dir=new File(dirPath);  try {    FileUtils.deleteDirectory(dir);  } catch (  IOException e) {    LOGGER.warn("At run completion, unable to delete temporary directory " + dir.getAbsolutePath());  }}  }
class C{  public TwoSizesLongBigList(final LongIterable elements){  long l=0;  final Long2LongOpenHashMap counts=new Long2LongOpenHashMap();  int width=0;  for (LongIterator i=elements.iterator(); i.hasNext(); ) {    final long value=i.nextLong();    width=Math.max(width,Fast.mostSignificantBit(value) + 1);    counts.put(value,counts.get(value) + 1);    l++;  }  length=l;  final long[] keys=counts.keySet().toLongArray();  Arrays.sort(keys);  long costSmall=0;  long costLarge=length * width;  int minIndex=width;  long minCostLarge=costLarge;  long minCostSmall=costSmall;  long k;  int j=0;  for (int i=1; i < width; i++) {    if (ASSERTS)     assert costSmall % i == 0;    if (i != 1)     costSmall=(costSmall / i) * (i + 1);    while (j < keys.length && (k=keys[j]) < (1 << i)) {      final long c=counts.get(k);      costLarge-=c * width;      costSmall+=c * (i + 1);      j++;    }    if (costLarge + costSmall < minCostLarge + minCostSmall) {      minIndex=i;      minCostLarge=costLarge;      minCostSmall=costSmall;    }  }  if (ASSERTS)   assert minCostSmall / (minIndex + 1) + minCostLarge / width == length;  if (width != 0 && minIndex != width) {    final long numSmall=minCostSmall / (minIndex + 1);    final long numLarge=minCostLarge / width;    (small=LongArrayBitVector.getInstance().asLongBigList(minIndex)).size(numSmall);    (marker=LongArrayBitVector.getInstance()).length(length);    (large=LongArrayBitVector.getInstance().asLongBigList(width)).size(numLarge);  } else {    (small=LongArrayBitVector.getInstance().asLongBigList(minIndex)).size(length);    marker=null;    large=null;  }  final int maxSmall=(1 << minIndex);  final LongIterator iterator=elements.iterator();  for (long i=0, p=0, q=0; i < length; i++) {    final long value=iterator.nextLong();    if (value < maxSmall)     small.set(p++,value); else {      large.set(q++,value);      marker.set(i);    }  }  rank=marker != null ? new Rank9(marker) : null;  numBits=small.size64() * minIndex + (marker != null ? rank.numBits() + marker.length() + large.size64() * width : 0);  if (ASSERTS) {    final LongIterator t=elements.iterator();    for (int i=0; i < length; i++) {      final long value=t.nextLong();      assert value == getLong(i) : "At " + i + ": "+ value+ " != "+ getLong(i);    }  }}  }
class C{  public Builder updateEmail(Email oldEmail,Email newEmail){  deleteEmail(oldEmail);  addEmail(newEmail);  return this;}  }
class C{  public MekaDialog(Frame owner){  this(owner,false);}  }
class C{  public String classifierName(){  return classifierName;}  }
class C{  public ComponentDragGestureListener(DefaultDnDCatcher dndCatcher,DragSourceListener dsl){  this.dndCatcher=dndCatcher;  this.dsl=dsl;  Debug.message("draggesturelistener","Created> ComponentDragGestureListener");  Debug.message("draggesturelistener","dndCatcher=" + dndCatcher);}  }
class C{  public CompoundVariation(Variation... operators){  this();  for (  Variation operator : operators) {    appendOperator(operator);  }}  }
class C{  public static <U,T extends U>U upCast(T object,@SuppressWarnings("unused") Class<U> klass){  return object;}  }
class C{  private void checkPerSourceMacRate(OFPacketIn pin){  byte[] data=pin.getPacketData();  byte[] mac=Arrays.copyOfRange(data,6,12);  MACAddress srcMac=MACAddress.valueOf(mac);  short ethType=(short)(((data[12] & 0xff) << 8) + (data[13] & 0xff));  if (ethType != Ethernet.TYPE_LLDP && ethType != Ethernet.TYPE_BSN && macCache.update(srcMac.toLong())) {    if (macBlockedCache.update(srcMac.toLong())) {      return;    }    int port=pin.getInPort();    SwitchPort swPort=new SwitchPort(getId(),port);    ForwardingBase.blockHost(floodlightProvider,swPort,srcMac.toLong(),(short)5,AppCookie.makeCookie(OFSWITCH_APP_ID,0));    floodlightProvider.addSwitchEvent(this.datapathId,"SWITCH_PORT_BLOCKED_TEMPORARILY " + "OFPort " + port + " mac "+ srcMac,false);    log.info("Excessive packet in from {} on {}, block host for 5 sec",srcMac.toString(),swPort);  }}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.STANDALONE_BLOCK;}  }
class C{  public StepBreakpointSetParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_BPS_SET_SUCCESS);}  }
class C{  private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){  try {    PackageManager pm=context.getPackageManager();    List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);    if (handlers == null || handlers.size() == 0) {      return false;    }    for (    ResolveInfo resolveInfo : handlers) {      IntentFilter filter=resolveInfo.filter;      if (filter == null)       continue;      if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;      if (resolveInfo.activityInfo == null)       continue;      return true;    }  } catch (  RuntimeException e) {    Log.e(TAG,"Runtime exception while getting specialized handlers");  }  return false;}  }
class C{  protected final void copyTextNode(final int nodeID,SerializationHandler handler) throws SAXException {  if (nodeID != DTM.NULL) {    int dataIndex=m_dataOrQName.elementAt(nodeID);    if (dataIndex >= 0) {      m_chars.sendSAXcharacters(handler,dataIndex >>> TEXT_LENGTH_BITS,dataIndex & TEXT_LENGTH_MAX);    } else {      m_chars.sendSAXcharacters(handler,m_data.elementAt(-dataIndex),m_data.elementAt(-dataIndex + 1));    }  }}  }
class C{  @Override protected int calcAttackValue(){  int av=0;  int range=RangeType.rangeBracket(nRange,wtype.getATRanges(),true,false);  AmmoType atype=(AmmoType)ammo.getType();  if (atype.getMunitionType() == AmmoType.M_HIGH_EXPLOSIVE) {    if (range == WeaponType.RANGE_SHORT) {      av=wtype.getRoundShortAV();      av=av + (av / 2);    }  } else   if (atype.getMunitionType() == AmmoType.M_EXTENDED_RANGE) {    if (range == WeaponType.RANGE_SHORT) {      av=wtype.getRoundShortAV();    } else     if (range == WeaponType.RANGE_MED) {      av=wtype.getRoundMedAV();    } else     if (range == WeaponType.RANGE_LONG) {      av=wtype.getRoundLongAV();    } else     if (range == WeaponType.RANGE_EXT) {      av=wtype.getRoundLongAV();    }    av=av / 2;  } else {    if (range == WeaponType.RANGE_SHORT) {      av=wtype.getRoundShortAV();    } else     if (range == WeaponType.RANGE_MED) {      av=wtype.getRoundMedAV();    } else     if (range == WeaponType.RANGE_LONG) {      av=wtype.getRoundLongAV();    } else     if (range == WeaponType.RANGE_EXT) {      av=wtype.getRoundExtAV();    }  }  if (bDirect) {    av=Math.min(av + (toHit.getMoS() / 3),av * 2);  }  if (bGlancing) {    av=(int)Math.floor(av / 2.0);  }  av=(int)Math.floor(getBracketingMultiplier() * av);  return av;}  }
class C{  public boolean bool(){  return str().length() > 0;}  }
class C{  public void testReceive_BlockNoServerChannelClose() throws Exception {  assertTrue(this.channel1.isBlocking());  receiveNoServerChannelClose();}  }
class C{  public void saveSettingsToDB(String songId){  if (mApp.getDBAccessHelper().hasEqualizerSettings(songId) == false) {    mApp.getDBAccessHelper().addSongEQValues(songId,mFiftyHertzLevel,mOneThirtyHertzLevel,mThreeTwentyHertzLevel,mEightHundredHertzLevel,mTwoKilohertzLevel,mFiveKilohertzLevel,mTwelvePointFiveKilohertzLevel,mVirtualizerLevel,mBassBoostLevel,mReverbSetting);  } else {    mApp.getDBAccessHelper().updateSongEQValues(songId,mFiftyHertzLevel,mOneThirtyHertzLevel,mThreeTwentyHertzLevel,mEightHundredHertzLevel,mTwoKilohertzLevel,mFiveKilohertzLevel,mTwelvePointFiveKilohertzLevel,mVirtualizerLevel,mBassBoostLevel,mReverbSetting);  }}  }
class C{  public boolean isA_Processed(){  Object oo=get_Value(COLUMNNAME_A_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static Object readSerializedObject(Context context,String fileName){  Object objectToReturn=null;  File SettingsFile=new File(Environment.getExternalStorageDirectory(),"/Domoticz/DomoticzSettings.txt");  final String sPath=SettingsFile.getPath().substring(0,SettingsFile.getPath().lastIndexOf("/"));  boolean mkdirsResultIsOk=new File(sPath + "/").mkdirs();  String combinedFilename=sPath + "/" + fileName;  if (!new File(combinedFilename).exists())   return null;  try {    ObjectInputStream input=new ObjectInputStream(new FileInputStream(combinedFilename));    objectToReturn=input.readObject();    input.close();  } catch (  IOException|ClassNotFoundException e) {    e.printStackTrace();  }  return objectToReturn;}  }
class C{  public static AttributeName nameByString(String qname){  int hash=AttributeName.stringToHash(qname);  int index=Arrays.binarySearch(AttributeName.ATTRIBUTE_HASHES,hash);  if (index < 0) {    return AttributeName.createAttributeName(qname.intern(),false);  } else {    AttributeName rv=AttributeName.ATTRIBUTE_NAMES[index];    @Local String name=rv.getLocal(AttributeName.HTML);    if (!name.equals(qname)) {      return AttributeName.createAttributeName(qname.intern(),false);    }    return rv;  }}  }
class C{  public Reader create(InputStream is,String javaEncoding){  return null;}  }
class C{  public static <T>T withWriterAppend(Path self,@ClosureParams(value=SimpleType.class,options="java.io.Writer") Closure<T> closure) throws IOException {  return withWriterAppend(self,Charset.defaultCharset().name(),closure);}  }
class C{  @Override public final double readDouble() throws IOException {  return Double.longBitsToDouble(readLong());}  }
class C{  static public void validateSplits(final IIndex src,final Split[] splits){  if (src == null)   throw new IllegalArgumentException();  if (splits == null)   throw new IllegalArgumentException();  final LocalPartitionMetadata pmd=src.getIndexMetadata().getPartitionMetadata();  if (pmd == null)   throw new IllegalArgumentException();  validateSplits(pmd,splits,true);}  }
class C{  public CreateSessionResponse CreateSession(CreateSessionRequest req) throws ServiceFaultException, ServiceResultException {  return (CreateSessionResponse)channel.serviceRequest(req);}  }
class C{  private void action_treeDeleteAll(){  log.info("VTreeMaintenance.action_treeDeleteAll");}  }
class C{  public Extractors before(Filter filter){  beforeFilter.add(filter);  return this;}  }
class C{  public static FciRunner serializableInstance(){  return new FciRunner(Dag.serializableInstance(),new Parameters());}  }
class C{  public List<Poi> loadPoisFromAssets(){  try {    OsmDto read=simple.read(OsmDto.class,application.getAssets().open("pois.osm"));    List<Poi> pois=poiMapper.convertDtosToPois(read.getNodeDtoList());    pois.addAll(poiMapper.convertDtosToPois(read.getWayDtoList()));    return pois;  } catch (  Exception e) {    Timber.e(e,"Error while loading POIS from assets");    throw new RuntimeException(e);  }}  }
class C{  public static void arraycopy(java.lang.Object src,int srcOffset,java.lang.Object dst,int dstOffset,int length){  return;}  }
class C{  public Coupling(final Producer<E> Producer,final Consumer<E> Consumer){  LOGGER.debug("new Coupling");  this.producer=Producer;  this.consumer=Consumer;}  }
class C{  public void put(String command,String val) throws Exception {  try {    LinkedList list=new LinkedList();    command="put " + command + " "+ val;    parseCommand(command,list);    if (list.size() < 3) {      System.out.println("Error:put requires a name and a value");    } else {      String name=(String)list.get(1);      String value=(String)list.get(2);      if (list.size() > 3) {        String objectType=(String)list.get(3);        if (objectType.equalsIgnoreCase("int")) {          this.currRegion.put(name,Integer.valueOf(value));        } else         if (objectType.equalsIgnoreCase("str")) {          this.currRegion.put(name,value);        } else {          System.out.println("Invalid object type specified. Please see help.");        }      } else {        this.currRegion.put(name,value.getBytes());      }    }  } catch (  Exception e) {    throw new Exception("unable to put: " + e);  }}  }
class C{  @Override public void close() throws IOException {  PipedInputStream stream=target;  if (stream != null) {    stream.done();    target=null;  }}  }
class C{  private MultiPoint readMultiPointText() throws IOException, ParseException {  String nextToken=getNextEmptyOrOpener();  if (nextToken.equals(EMPTY)) {    return geometryFactory.createMultiPoint(new Point[0]);  }  if (ALLOW_OLD_JTS_MULTIPOINT_SYNTAX) {    String nextWord=lookaheadWord();    if (nextWord != L_PAREN) {      return geometryFactory.createMultiPoint(toPoints(getCoordinatesNoLeftParen()));    }  }  ArrayList points=new ArrayList();  Point point=readPointText();  points.add(point);  nextToken=getNextCloserOrComma();  while (nextToken.equals(COMMA)) {    point=readPointText();    points.add(point);    nextToken=getNextCloserOrComma();  }  Point[] array=new Point[points.size()];  return geometryFactory.createMultiPoint((Point[])points.toArray(array));}  }
class C{  public int size(){  return mSize;}  }
class C{  public static URL findResourceBase(String baseResource){  return findResourceBase(baseResource,Thread.currentThread().getContextClassLoader());}  }
class C{  void heterogenousUnion(final HLL other){  if (HLLType.EMPTY.equals(type)) {switch (other.getType()) {case EXPLICIT:{        if (other.explicitStorage.size() <= explicitThreshold) {          type=HLLType.EXPLICIT;          explicitStorage=other.explicitStorage.clone();        } else {          if (!sparseOff) {            initializeStorage(HLLType.SPARSE);          } else {            initializeStorage(HLLType.FULL);          }          for (          LongCursor c : other.explicitStorage) {            addRaw(c.value);          }        }        return;      }case SPARSE:{      if (!sparseOff) {        type=HLLType.SPARSE;        sparseProbabilisticStorage=other.sparseProbabilisticStorage.clone();      } else {        initializeStorage(HLLType.FULL);        for (        IntByteCursor c : other.sparseProbabilisticStorage) {          final int registerIndex=c.key;          final byte registerValue=c.value;          probabilisticStorage.setMaxRegister(registerIndex,registerValue);        }      }      return;    }default :{    type=HLLType.FULL;    probabilisticStorage=other.probabilisticStorage.clone();    return;  }}} else if (HLLType.EMPTY.equals(other.getType())) {return;}switch (type) {case EXPLICIT:{if (HLLType.SPARSE.equals(other.getType())) {  if (!sparseOff) {    type=HLLType.SPARSE;    sparseProbabilisticStorage=other.sparseProbabilisticStorage.clone();  } else {    initializeStorage(HLLType.FULL);    for (    IntByteCursor c : other.sparseProbabilisticStorage) {      final int registerIndex=c.key;      final byte registerValue=c.value;      probabilisticStorage.setMaxRegister(registerIndex,registerValue);    }  }} else {  type=HLLType.FULL;  probabilisticStorage=other.probabilisticStorage.clone();}for (LongCursor c : explicitStorage) {  addRaw(c.value);}explicitStorage=null;return;}case SPARSE:{if (HLLType.EXPLICIT.equals(other.getType())) {for (LongCursor c : other.explicitStorage) {  addRaw(c.value);}} else {type=HLLType.FULL;probabilisticStorage=other.probabilisticStorage.clone();for (IntByteCursor c : sparseProbabilisticStorage) {  final int registerIndex=c.key;  final byte registerValue=c.value;  probabilisticStorage.setMaxRegister(registerIndex,registerValue);}sparseProbabilisticStorage=null;}return;}default :{if (HLLType.EXPLICIT.equals(other.getType())) {for (LongCursor c : other.explicitStorage) {addRaw(c.value);}} else {for (IntByteCursor c : other.sparseProbabilisticStorage) {final int registerIndex=c.key;final byte registerValue=c.value;probabilisticStorage.setMaxRegister(registerIndex,registerValue);}}}}}  }
class C{  private void updateTrackedViewsFastScrollFocusState(){  for (  BaseRecyclerViewFastScrollBar.FastScrollFocusableView v : mTrackedFastScrollViews) {    RecyclerView.ViewHolder viewHolder=mRv.getChildViewHolder((View)v);    int pos=(viewHolder != null) ? viewHolder.getPosition() : -1;    updateViewFastScrollFocusState(v,pos,true);  }}  }
class C{  public NoFramesView(Element elem,int axis){  super(elem,axis);  visible=false;}  }
class C{  public void addNotify(){  super.addNotify();  if (textArea != null) {    l.install(textArea);  }  updateCellWidths();  updateCellHeights();}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  public void close(){  flushWithoutMargin();}  }
class C{  public void makeDynamic(VariableExpression vexp){  makeDynamic(vexp,ClassHelper.OBJECT_TYPE);}  }
class C{  private static int NewString(JNIEnvironment env,Address uchars,int len){  if (traceJNI)   VM.sysWrite("JNI called: NewString  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    final char[] contents=new char[len];    Memory.memcopy(Magic.objectAsAddress(contents),uchars,len * 2);    return env.pushJNIRef(java.lang.JikesRVMSupport.newStringWithoutCopy(contents,0,len));  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.538 -0500",hash_original_method="6F45F99BF67AD2AF5583C8727970AA91",hash_generated_method="97A13C5DA159D3B479CB785539ED33E8") public final void sendMessageDelayed(int what,long delayMillis){  if (mSmHandler == null)   return;  mSmHandler.sendMessageDelayed(obtainMessage(what),delayMillis);}  }
class C{  public boolean isAfterNow(){  return isAfter(DateTimeUtils.currentTimeMillis());}  }
class C{  private HistoricProcessInstanceQuery createHistoricProcessInstanceQuery(Collection<String> processDefinitionKeys,JobStatusEnum jobStatus,DateTime startTime,DateTime endTime){  HistoricProcessInstanceQuery query=activitiHistoryService.createHistoricProcessInstanceQuery().processDefinitionKeyIn(new ArrayList<>(processDefinitionKeys));  if (JobStatusEnum.RUNNING.equals(jobStatus) || JobStatusEnum.SUSPENDED.equals(jobStatus)) {    query.unfinished();  } else   if (JobStatusEnum.COMPLETED.equals(jobStatus)) {    query.finished();  }  if (startTime != null) {    query.startedAfter(startTime.toDate());  }  if (endTime != null) {    query.finishedBefore(endTime.toDate());  }  return query;}  }
class C{  @Override public String describe(){  String description=super.describe();  StringBuilder res=new StringBuilder();  if (this.resistances == null) {    return description;  }  Map<StatusType,Double> resistances=this.resistances.getMap();  if ((resistances != null) && !resistances.isEmpty()) {    for (    Entry<StatusType,Double> entry : resistances.entrySet()) {      String statusType=entry.getKey().toString().toLowerCase();      if (statusType.equals("confused")) {        statusType="confuse";      }      final int nameLength=statusType.length();      if (statusType.substring(nameLength - 2).equals("ed")) {        statusType=statusType.substring(0,nameLength - 2);      }      statusType=statusType.substring(0,1).toUpperCase() + statusType.substring(1);      res.append(" ");      res.append(statusType);      res.append(" resist: ");      res.append(Math.round(100 * entry.getValue()));      res.append("%");    }  }  if (res.length() > 0) {    description=description + " Resistances (" + res.toString().trim()+ ").";  }  return description;}  }
class C{  @NotNull public static <T extends PsiElement>List<T> findChildrenOfType(PsiElement element,Class<T> psiClass){  List<T> list=new ArrayList<T>();  PsiElement[] children=element.getChildren();  for (  PsiElement child : children) {    if (psiClass.isInstance(child)) {      list.add((T)child);    }  }  return list;}  }
class C{  public void testPerAttribute(){  ((InterquartileRange)m_Filter).setDetectionPerAttribute(true);  Instances icopy=new Instances(m_Instances);  Instances result=null;  try {    m_Filter.setInputFormat(icopy);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on setInputFormat(): \n" + ex.getMessage());  }  try {    result=Filter.useFilter(icopy,m_Filter);    assertNotNull(result);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on useFilter(): \n" + ex.getMessage());  }  int count=0;  for (int i=0; i < icopy.numAttributes(); i++) {    if (icopy.attribute(i).isNumeric())     count++;  }  assertEquals(icopy.numAttributes() + 2 * count,result.numAttributes());  assertEquals(icopy.numInstances(),result.numInstances());}  }
class C{  synchronized boolean lockShared(){  if (isLockedExclusive) {    return false;  }  sharedLockCount++;  return true;}  }
class C{  public CharArrayList(int initialCapacity){  this(new char[initialCapacity]);  setSizeRaw(0);}  }
class C{  public void revokeAdmin(String jid) throws XMPPException {  changeAffiliationByOwner(jid,"member");}  }
class C{  public static int sumOfOddPlace(long number){  int sum=0;  String num=number + "";  for (int i=getSize(number) - 1; i >= 0; i-=2) {    sum+=Integer.parseInt(num.charAt(i) + "");  }  return sum;}  }
class C{  private boolean hasSecond(){  return getSecond() != null;}  }
class C{  private Object read(InputNode node,Class type,Object value) throws Exception {  String root=getName(type);  if (root == null) {    throw new RootException("Root annotation required for %s",type);  }  return value;}  }
class C{  public Message clone(){  return new Message(content,priority);}  }
class C{  boolean checkClosed(){  return checkClosed(false);}  }
class C{  public static Angle fromDMS(String dmsString){  if (dmsString == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  String regex="([-|\\+]?\\d{1,3}[d|D|\u00B0|\\s](\\s*\\d{1,2}['|\u2019|\\s])?" + "(\\s*\\d{1,2}[\"|\u201d|\\s])?\\s*([N|n|S|s|E|e|W|w])?\\s?)";  Pattern pattern=Pattern.compile(regex);  Matcher matcher=pattern.matcher(dmsString + " ");  if (!matcher.matches()) {    String message=Logging.getMessage("generic.ArgumentOutOfRange",dmsString);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  dmsString=dmsString.replaceAll("[D|d|\u00B0|'|\u2019|\"|\u201d]"," ");  dmsString=dmsString.replaceAll("\\s+"," ");  dmsString=dmsString.trim();  int sign=1;  char suffix=dmsString.toUpperCase().charAt(dmsString.length() - 1);  if (!Character.isDigit(suffix)) {    sign=(suffix == 'S' || suffix == 'W') ? -1 : 1;    dmsString=dmsString.substring(0,dmsString.length() - 1);    dmsString=dmsString.trim();  }  char prefix=dmsString.charAt(0);  if (!Character.isDigit(prefix)) {    sign*=(prefix == '-') ? -1 : 1;    dmsString=dmsString.substring(1,dmsString.length());  }  String[] DMS=dmsString.split(" ");  int d=Integer.parseInt(DMS[0]);  int m=DMS.length > 1 ? Integer.parseInt(DMS[1]) : 0;  int s=DMS.length > 2 ? Integer.parseInt(DMS[2]) : 0;  return fromDMS(d,m,s).multiply(sign);}  }
class C{  public static String stripLeadingDollar(String str){  return (str.charAt(0) == '$') ? str.substring(1) : str;}  }
class C{  public boolean isSetMixStructMap(){  return this.mixStructMap != null;}  }
class C{  public String pullRequestUrl(String account,String collection,String repoId,String pullRequest){  Objects.requireNonNull(repoId,"Repository required");  Objects.requireNonNull(pullRequest,"Pull request required");  return getTeamBaseUrl(account,collection) + format(PULL_REQUEST,repoId,pullRequest) + getApiVersion();}  }
class C{  private SavedState(Parcel in){  super(in);  prevScrollY=in.readInt();  scrollY=in.readInt();}  }
class C{  public SkyboxVisualPanel1(){  initComponents();}  }
class C{  @Override public void writeExpression(Expression oldExp){  if (null == oldExp) {    throw new NullPointerException();  }  boolean oldWritingObject=writingObject;  writingObject=true;  Object oldValue=expressionValue(oldExp);  if (oldValue == null || get(oldValue) != null && (oldWritingObject || oldValue.getClass() != String.class)) {    return;  }  if (!isBasicType(oldValue) || (!oldWritingObject && oldValue.getClass() == String.class)) {    recordExpression(oldValue,oldExp);  }  if (checkDeadLoop(oldValue)) {    return;  }  super.writeExpression(oldExp);  writingObject=oldWritingObject;}  }
class C{  @Override public Request<String> logs(ProjectReference projectReference,long taskId){  List<DummyRunnerStatus> statuses=availableRunnerStatuses.get(projectReference.name());  if (statuses != null && !statuses.isEmpty()) {    for (    DummyRunnerStatus runnerStatus : statuses) {      if (taskId == runnerStatus.processId()) {        return new DummyRequest<>(runnerStatus.getLog());      }    }  }  return new DummyRequest<>(null);}  }
class C{  public void runUsingBootstrapper() throws Exception {  runUsing(P2BootstrapInstallation.latest().outsideJvmRunner());}  }
class C{  public void reinitElements(){  this.removeAll();  initElements();}  }
class C{  private JNIWriter(Context context){  context.put(jniWriterKey,this);  fileManager=context.get(JavaFileManager.class);  log=Log.instance(context);  Options options=Options.instance(context);  verbose=options.isSet(VERBOSE);  checkAll=options.isSet("javah:full");  this.context=context;  syms=Symtab.instance(context);  lineSep=System.getProperty("line.separator");}  }
class C{  public String service(String serviceSpec,String serviceCmd) throws Exception {  return executeExtension(ResourceType.SERVICE,serviceSpec,KEY_COMMAND,serviceCmd,null);}  }
class C{  public Vertex parseReturnByteCode(DataInputStream dataStream,Network network) throws IOException {  Vertex equation=network.createTemporyVertex();  equation.addRelationship(Primitive.INSTANTIATION,Primitive.RETURN);  long id=dataStream.readLong();  if (id == 0) {    return equation;  }  Vertex element=network.findById(id);  if (element != null) {    if (element.is(Primitive.ARGUMENT)) {      equation.addRelationship(Primitive.RETURN,element);      id=dataStream.readLong();      while (id > 0) {        element=network.findById(id);        if (element != null) {          equation.addRelationship(Primitive.ARGUMENT,element,Integer.MAX_VALUE);        }        id=dataStream.readLong();      }    } else {      equation.addRelationship(Primitive.RETURN,element);    }  }  return equation;}  }
class C{  public String createSummary(){  StringBuilder builder=new StringBuilder();  builder.append(HtmlSerializerHelper.buildDivHeader("summary"));  builder.append(HtmlSerializerHelper.buildContent("API","summary",2));  builder.append(HtmlSerializerHelper.buildTableHeader());  builder.append(HtmlSerializerHelper.buildTableHeaderRow(1,new Pair<String,Integer>("Service Category",25),new Pair<String,Integer>("Added Number",25),new Pair<String,Integer>("Changed Number",25),new Pair<String,Integer>("Removed Number",25)));  int addedAll=0, removedAll=0, changedAll=0;  for (  ServiceCatalogDiff serviceCatalogDiff : diffList) {    String serviceName=serviceCatalogDiff.getOldServiceCatalog().getServiceName();    int added=serviceCatalogDiff.getNewServiceCatalog().getApiMap().size();    int changed=serviceCatalogDiff.getApiChangedMap().size();    int removed=serviceCatalogDiff.getOldServiceCatalog().getApiMap().size();    builder.append(HtmlSerializerHelper.buildTableRow(1,new Pair<String,Integer>(HtmlSerializerHelper.buildInPageLink(serviceName),25),new Pair<String,Integer>(Integer.toString(added),25),new Pair<String,Integer>(Integer.toString(changed),25),new Pair<String,Integer>(Integer.toString(removed),25)));    addedAll+=added;    changedAll+=changed;    removedAll+=removed;  }  builder.append(HtmlSerializerHelper.buildTableRow(1,new Pair<String,Integer>("Total",25),new Pair<String,Integer>(Integer.toString(addedAll),25),new Pair<String,Integer>(Integer.toString(changedAll),25),new Pair<String,Integer>(Integer.toString(removedAll),25)));  builder.append(HtmlSerializerHelper.buildTableTailer());  builder.append(HtmlSerializerHelper.buildDivTailer());  return builder.toString();}  }
class C{  private ExtendedProperties(){}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(3);  newVector.addElement(new Option("\tSets the attribute index\n" + "\t(default: last)","C",1,"-C <col>"));  newVector.addElement(new Option("\tSets the label of the newly merged classes\n" + "\t(default: 'merged')","L",1,"-L <label>"));  newVector.addElement(new Option("\tSets the merge range. 'first and 'last' are accepted as well.'\n" + "\tE.g.: first-5,7,9,20-last\n" + "\t(default: 1,2)","R",1,"-R <range>"));  return newVector.elements();}  }
class C{  public AgentConfigImpl(){  this(getDefaultProperties());}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int i=0;  int rows, cols;  double p1=0, p2=0, p3=0, p4=0;  int a;  int numCols;  int numRows;  int progress;  double halfPI=Math.PI / 2;  double outputVal;  double smallVal=-9999999;  double largeVal=9999999;  int row, col;  String modelType="sigmoidal";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      if (args[i].toLowerCase().contains("linear")) {        modelType="linear";      } else {        modelType="sigmoidal";      }    } else     if (i == 3) {      if (args[i].toLowerCase().equals("not specified")) {        p1=smallVal;      } else {        p1=Double.parseDouble(args[i]);      }    } else     if (i == 4) {      if (args[i].toLowerCase().equals("not specified")) {        p2=smallVal;      } else {        p2=Double.parseDouble(args[i]);      }    } else     if (i == 5) {      if (args[i].toLowerCase().equals("not specified")) {        p3=largeVal;      } else {        p3=Double.parseDouble(args[i]);      }    } else     if (i == 6) {      if (args[i].toLowerCase().equals("not specified")) {        p4=largeVal;      } else {        p4=Double.parseDouble(args[i]);      }    }  }  if (inputHeader == null || outputHeader == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if ((p1 == smallVal && p2 != smallVal) || (p1 != smallVal && p2 == smallVal) || (p3 == largeVal && p4 != largeVal)|| (p3 != largeVal && p4 == largeVal)) {    showFeedback("Sigmoid parameters not set properly");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setPreferredPalette("spectrum.pal");    double range1=p2 - p1;    double range2=p4 - p3;    double[] data=null;    if (modelType.equals("sigmoidal")) {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            if (data[col] <= p1) {              outputVal=0;            } else             if (data[col] > p1 && data[col] < p2) {              outputVal=1 - Math.cos(((data[col] - p1)) / range1 * halfPI) * Math.cos(((data[col] - p1)) / range1 * halfPI);            } else             if (data[col] >= p2 && data[col] <= p3) {              outputVal=1;            } else             if (data[col] > p3 && data[col] < p4) {              outputVal=(Math.cos((data[col] - p3) / range2 * halfPI) * Math.cos((data[col] - p3) / range2 * halfPI));            } else {              outputVal=0;            }            output.setValue(row,col,outputVal);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            if (data[col] <= p1) {              outputVal=0;            } else             if (data[col] > p1 && data[col] < p2) {              outputVal=(data[col] - p1) / range1;            } else             if (data[col] >= p2 && data[col] <= p3) {              outputVal=1;            } else             if (data[col] > p3 && data[col] < p4) {              outputVal=1 - (data[col] - p3) / range2;            } else {              outputVal=0;            }            output.setValue(row,col,outputVal);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    image.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean containsPrimaryKey(){  return containsPrimaryKey(false);}  }
class C{  private MimeMessage createMimeMessage(Session session,MailMessage mailMessage) throws MessagingException {  String subject=mailMessage.getSubject();  if (subjectPrefix != null && !subjectPrefix.equals("")) {    subject=subjectPrefix + " " + subject;  }  MimeMultipart content=new MimeMultipart("related");  DataSource[] attachments=mailMessage.getAttachmentsArray();  for (  DataSource attachment : attachments) {    MimeBodyPart attachmentPart=createAttachmentPart(attachment);    content.addBodyPart(attachmentPart);  }  MimeBodyPart bodyPart=createMessageBodyPart(mailMessage.getBody(),mailMessage.isBodyHtml());  content.addBodyPart(bodyPart);  MimeMessage message=new MimeMessage(session);  if (from == null) {    message.setFrom();  } else {    message.setFrom(new InternetAddress(from));  }  InternetAddress[] to=createAddresses(mailMessage.getToArray());  if (to.length == 0) {    to=InternetAddress.parse(defaultTo);  }  message.setRecipients(Message.RecipientType.TO,to);  InternetAddress[] cc=createAddresses(mailMessage.getCcArray());  message.setRecipients(Message.RecipientType.CC,cc);  InternetAddress[] bcc=createAddresses(mailMessage.getBccArray());  message.setRecipients(Message.RecipientType.BCC,bcc);  message.setSubject(subject);  message.setContent(content);  return message;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.COMPOUND_EXPR___STRING_EXPR_1:    return getStringExpr_1();case UmplePackage.COMPOUND_EXPR___BOOL_EXPR_1:  return getBoolExpr_1();case UmplePackage.COMPOUND_EXPR___NUM_EXPR_1:return getNumExpr_1();case UmplePackage.COMPOUND_EXPR___GEN_EXPR_1:return getGenExpr_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public synchronized void start(){  if (log.isInfoEnabled()) {    log.info("Starting EsperIO Socket Adapter for engine URI '" + engineURI + "'");  }  EPServiceProviderSPI engineSPI=(EPServiceProviderSPI)EPServiceProviderManager.getExistingProvider(engineURI);  Set<Integer> ports=new HashSet<Integer>();  for (  Map.Entry<String,SocketConfig> entry : config.getSockets().entrySet()) {    if (sockets.containsKey(entry.getKey())) {      throw new ConfigurationException("A socket by name '" + entry.getKey() + "' has already been configured.");    }    int port=entry.getValue().getPort();    if (ports.contains(port)) {      throw new ConfigurationException("A socket for port '" + port + "' has already been configured.");    }    ports.add(port);    EsperSocketService socketService=new EsperSocketService(entry.getKey(),entry.getValue());    sockets.put(entry.getKey(),socketService);  }  for (  Map.Entry<String,EsperSocketService> entry : sockets.entrySet()) {    try {      entry.getValue().start(entry.getKey(),engineSPI);    } catch (    IOException e) {      String message="Error starting socket '" + entry.getKey() + "' port "+ entry.getValue().getPort()+ " :"+ e.getMessage();      log.error(message,e);      throw new EPException(message,e);    }  }  if (log.isInfoEnabled()) {    log.info("Completed starting EsperIO Socket Adapter for engine URI '" + engineURI + "'.");  }}  }
class C{  public boolean match(ThisExpression node,Object other){  if (!(other instanceof ThisExpression)) {    return false;  }  ThisExpression o=(ThisExpression)other;  return safeSubtreeMatch(node.getQualifier(),o.getQualifier());}  }
class C{  public void createImage(){  if (isCleanup()) {    cleanup(false);  }  String fileName=getFileNameForTime(System.currentTimeMillis());  String filePath=getOutputDirectoryString() + "/" + fileName;  if (DEBUG) {    Debug.output("MagicPlanetImageComponent: creating image: " + filePath);  }  Layer[] layers=getLayers();  if (layers == null) {    return;  }  ImageServer is=new ImageServer(layers,new SunJPEGFormatter());  try {    is.setBackground(getBackground());  } catch (  NoSuchMethodError nsme) {  }  byte[] imageBytes=is.createImage(getProj(),getWidth(),getHeight());  FileOutputStream fos;  try {    fos=new FileOutputStream(filePath);    fos.write(imageBytes);    fos.flush();    fos.close();    if (DEBUG) {      Debug.output("  MP: done writing image");    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  mapBean.setProjection(mapBean.getProjection());  String launchCmd=generatePostProcessingCmd(postProcessingScript,filePath);  if (launchCmd != null) {    try {      if (DEBUG)       Debug.output("MP post processing: " + launchCmd);      Runtime.getRuntime().exec(launchCmd);    } catch (    IOException e) {      System.err.println("MP post processing:  " + e);    }  }  if (lastImageFile != null) {    try {      File lastImageFileFile=new File(lastImageFile);      fos=new FileOutputStream(lastImageFileFile);      fos.write(new String(LAST_IMAGE_FILE_KEY + "=" + fileName).getBytes());      fos.flush();      fos.close();      if (DEBUG) {        Debug.output("  MP: done writing file noting last image file name: " + lastImageFile);      }    } catch (    IOException ioe) {      Debug.error("MP: error writing file to note last image file name:\n" + ioe.getMessage());      ioe.printStackTrace();      lastImageFile=null;    }  }}  }
class C{  private List<D> collectRangeToSelect(D startNode,D endNode,boolean includeStart,boolean includeEnd){  D parentNode=dataAdapter.getParent(startNode);  assert (parentNode != null) : "Null parent node when doing range select!";  assert (parentNode.equals(dataAdapter.getParent(endNode))) : "Different parent nodes when doing range highlight!";  assert (dataAdapter.compare(startNode,endNode) <= 0) : "Nodes are in reverse order for range select! " + dataAdapter.getNodeName(startNode) + " - "+ dataAdapter.getNodeName(endNode);  List<D> range=new ArrayList<>();  List<D> children=dataAdapter.getChildren(parentNode);  int i=0;  boolean adding=false;  for (int n=children.size(); i < n; i++) {    D child=children.get(i);    if (child.equals(startNode)) {      adding=true;      if (includeStart) {        range.add(child);      }      continue;    }    if (adding) {      if (child.equals(endNode)) {        if (!includeEnd) {          break;        }        range.add(child);        break;      }      range.add(child);    }  }  if (i == children.size()) {  }  return range;}  }
class C{  @Override public void close(){}  }
class C{  protected ContentFilterImpl(){  super();}  }
class C{  public static void copy(Object o,Object copy){  GemFireCacheImpl gfc=GemFireCacheImpl.getInstance();  if (gfc == null)   return;  TypeRegistry tr=gfc.getPdxRegistry();  PdxUnreadData ud=tr.getUnreadData(o);  if (ud != null && !ud.isEmpty()) {    tr.putUnreadData(copy,ud);  }}  }
class C{  public void close(){  unlock();  U.closeQuiet(raFile);}  }
class C{  @Override public void reset() throws IOException {  throw new IOException("reset not supported");}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean equals(Object o){  if (o instanceof CoverageIntVdt) {    CoverageIntVdt civ=(CoverageIntVdt)o;    return ((attribute == civ.attribute) && (value == civ.value));  } else {    return false;  }}  }
class C{  public void testCanHandleOr() throws Exception {  Dtd dtd=new Dtd("http://java.sun.com/dtd/web-app_2_3.dtd");  List<DescriptorTag> elementOrder=dtd.getElementOrder("error-page");  assertEquals(3,elementOrder.size());  DescriptorTag tag=elementOrder.get(0);  assertEquals("error-code",tag.getTagName());  tag=elementOrder.get(1);  assertEquals("exception-type",tag.getTagName());  tag=elementOrder.get(2);  assertEquals("location",tag.getTagName());}  }
class C{  public TimeEventType createTimeEventTypeFromString(EDataType eDataType,String initialValue){  TimeEventType result=TimeEventType.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  public static int deviceDPI(Context c){  return c.getResources().getDisplayMetrics().densityDpi;}  }
class C{  public SVGOMSolidColorElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  protected boolean afterDelete(boolean success){  if (success)   updateAmtHeader();  return success;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.ARGUMENT;}  }
class C{  @Override protected void onRemovePrivate(String target,String sourceNick,String sourceLogin,String sourceHostname){  Message message=new Message(service.getString(R.string.message_set_channel_public,sourceNick));  message.setColor(Message.COLOR_BLUE);  server.getConversation(target).addMessage(message);  service.sendBroadcast(Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target));}  }
class C{  public void addMovingTime(long time){  movingTime+=time;}  }
class C{  private static boolean nonEmptyIntersection(String[] a,String[] b){  if (a == null || b == null || a.length == 0 || b.length == 0) {    return false;  }  for (  String toFind : a) {    if (contains(b,toFind)) {      return true;    }  }  return false;}  }
class C{  public BloomFilter(double falsePositiveProbability,int expectedNumberOfElements){  this(Math.ceil(-(Math.log(falsePositiveProbability) / Math.log(2))) / Math.log(2),expectedNumberOfElements,(int)Math.ceil(-(Math.log(falsePositiveProbability) / Math.log(2))));}  }
class C{  protected void init(){  sensor=InstanceManager.sensorManagerInstance().provideSensor(sensorName);  programmer=InstanceManager.getDefault(jmri.ProgrammerManager.class).getAddressedProgrammer(locoLong,locoNumber);  now=sensor.getKnownState();  setMomentum(now);}  }
class C{  protected List<MemoryManagerMXBean> loadRawDatas(Map<Object,Object> userData){  return ManagementFactory.getMemoryManagerMXBeans();}  }
class C{  public void assertNull(Object obj){  if (obj != null) {    fail("Expected: null got: " + obj);  }}  }
class C{  public int hashCode(){  return this.getName().hashCode() + this.getActions().hashCode();}  }
class C{  public boolean isData(){  return false;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_CONSTRAINT_BODY_1__LINKING_OP_1:    getLinkingOp_1().clear();  getLinkingOp_1().addAll((Collection<? extends LinkingOp_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void init(ServletConfig config) throws ServletException {  this.config=config;  init();}  }
class C{  public void testFilterSubscriber_passesPatientsToFragments(){  mController.loadSearchResults();  TypedCursorFetchedEvent event=TypedCursorFetchedEventFactory.createEvent(Patient.class,getFakeAppPatientCursor());  mFakeCrudEventBus.post(event);  verify(mFragmentMockUi).setPatients(any(TypedCursor.class));}  }
class C{  private CViewFunctions(){}  }
class C{  public static String toString(URL url,String encoding) throws IOException {  return toString(url,Charsets.toCharset(encoding));}  }
class C{  public static CreateIndexClause create(String indexName,String windowName,String... properties){  return new CreateIndexClause(indexName,windowName,properties);}  }
class C{  public double cdf(int k){  if (k < 0)   return 0.0;  if (k >= cdf.length - 1)   return 1.0;  return cdf[k];}  }
class C{  public ResourceNode addChild(Resource child){  if (children == null) {    children=new HashMap<String,ResourceNode>();  }  ResourceNode childNode=new ResourceNode(child);  childNode.parent=this;  children.put(child.getKey(),childNode);  return childNode;}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:30.193 -0500",hash_original_method="B49F758A210AD21F31F3B71259593715",hash_generated_method="8E72B18CCD8FE382703DB68F2A4AF3C9") public int compareTo(Long object){  return compare(value,object.value);}  }
class C{  public void deleteMails() throws MessagingException {  Folder folder=getStore().getFolder(MAIL_INBOX);  folder.open(Folder.READ_WRITE);  Message[] messages=folder.getMessages();  FetchProfile profile=new FetchProfile();  profile.add(FetchProfile.Item.ENVELOPE);  folder.fetch(messages,profile);  for (  Message message : messages) {    message.setFlag(Flags.Flag.DELETED,true);  }  folder.close(true);}  }
class C{  public void gameSearchResult(Set<String> games){  selectGameDialog.setSearchResult(games);}  }
class C{  protected boolean mustResolveHref(){  KMLIcon icon=this.parent.getIcon();  if (icon == null || icon.getHref() == null)   return false;  return this.getImageSource() == null || icon.getUpdateTime() > this.iconRetrievalTime;}  }
class C{  public static byte[] toByteArray(UUID uuid){  byte[] byteArray=new byte[(Long.SIZE / Byte.SIZE) * 2];  ByteBuffer buffer=ByteBuffer.wrap(byteArray);  LongBuffer longBuffer=buffer.asLongBuffer();  longBuffer.put(new long[]{uuid.getMostSignificantBits(),uuid.getLeastSignificantBits()});  return byteArray;}  }
class C{  private void openScriptEditorPanel(UpdateAction action){  ScriptEditor panel=new ScriptEditor(((UpdateActionCustom)action).getScriptString(),SCRIPT_DIR);  StandardDialog dialog=panel.getDialog(panel);  dialog.pack();  dialog.setLocationRelativeTo(null);  dialog.setVisible(true);  if (!dialog.hasUserCancelled()) {    ((UpdateActionCustom)action).setScriptString(panel.getTextArea().getText());    ((UpdateActionCustom)action).init();  }}  }
class C{  public boolean hasPostcode(){  return super.hasElement(PostCode.KEY);}  }
class C{  public java.lang.StringBuffer append(double d){  return null;}  }
class C{  public final void checkSessionCookie(Map<String,String> headers){  if (headers.containsKey(SET_COOKIE_KEY) && headers.get(SET_COOKIE_KEY).startsWith(SESSION_COOKIE)) {    String cookie=headers.get(SET_COOKIE_KEY);    String expires="";    if (cookie.length() > 0) {      String[] splitCookie=cookie.split(";");      String[] splitSessionId=splitCookie[0].split("=");      cookie=splitSessionId[1];      editor.putString(SESSION_COOKIE,cookie);      editor.commit();      for (      String s : splitCookie) {        if (s.indexOf("Expires") > 0) {          String[] splitExpires=s.split("=");          expires=splitExpires[1];          editor.putString(COOKIE_EXPIRE_KEY,expires);          editor.commit();        }      }    }  }}  }
class C{  public static void run(final PrintStream out,final String queryString,final long waitTime,final boolean useLegacySql) throws IOException {  BigQuery bigquery=new BigQueryOptions.DefaultBigqueryFactory().create(BigQueryOptions.defaultInstance());  QueryRequest queryRequest=QueryRequest.builder(queryString).maxWaitTime(waitTime).useLegacySql(useLegacySql).build();  QueryResponse response=bigquery.query(queryRequest);  if (response.hasErrors()) {    throw new RuntimeException(response.executionErrors().stream().<String>map(null).collect(Collectors.joining("\n")));  }  QueryResult result=response.result();  Iterator<List<FieldValue>> iter=result.iterateAll();  while (iter.hasNext()) {    List<FieldValue> row=iter.next();    out.println(row.stream().map(null).collect(Collectors.joining(",")));  }}  }
class C{  @Override protected void launch(){  GUILauncher.launchFrame(new ModelViewer(),getName(),true);}  }
class C{  public Schedule schedule(){  return new Schedule(effectiveDate_,terminationDate_,tenor_,calendar_,convention_,terminationDateConvention_,rule_,endOfMonth_,firstDate_,nextToLastDate_);}  }
class C{  public Boolean isStatus(){  return status;}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  private static <T>void addUnmentionedPlugins(final IPluginRegistry<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>> registry,final DefaultListModel<PluginItem<T>> model,final List<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>> added){  for (  final com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T> plugin : registry) {    boolean contains=false;    for (    final com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T> plugin2 : added) {      if (plugin == plugin2) {        contains=true;      }    }    if (!contains) {      model.addElement(new PluginItem<T>(plugin));    }  }}  }
class C{  public static boolean isUnix(){  setType();  return (type == UNIX);}  }
class C{  protected boolean hasUncompressedStrip(){  return !mStripBytes.isEmpty();}  }
class C{  public Bundler putStringArrayList(String key,ArrayList<String> value){  bundle.putStringArrayList(key,value);  return this;}  }
class C{  public boolean exportFormatSpc(){  return formatSpc;}  }
class C{  @SuppressWarnings("unchecked") public static <E>Function<E,E> identity(){  return (Function<E,E>)IdentityFunction.INSTANCE;}  }
class C{  private boolean noMatchForTagInAttributes(AttributeSet attr,HTML.Tag t,Object tagValue){  if (attr != null && attr.isDefined(t)) {    Object newValue=attr.getAttribute(t);    if ((tagValue == null) ? (newValue == null) : (newValue != null && tagValue.equals(newValue))) {      return false;    }  }  return true;}  }
class C{  public ArrayListMap(int capacity){  super();  list=new ArrayList<Entry<K,V>>(capacity);}  }
class C{  public void testSetF23Momentary(){  boolean f23Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF23Momentary(f23Momentary);}  }
class C{  private Optional<ModuleDetails> lookupModule(String name){  return spinnakerConfiguration.getModules().stream().filter(null).findAny();}  }
class C{  public KpcRunner(DataWrapper dataWrapper,Parameters params){  super(dataWrapper,params,null);}  }
class C{  @Inline @Override public final void wordWrite(ObjectReference ref,Word target,Word offset,Word location,int mode){  Magic.setWordAtOffset(ref.toObject(),offset.toOffset(),target,location.toInt());}  }
class C{  final private String classDef2ObjectDesc(Attributes attrs) throws NamingException {  StringBuffer objectDesc=new StringBuffer("( ");  Attribute attr=null;  int count=0;  attr=attrs.get(NUMERICOID_ID);  if (attr != null) {    objectDesc.append(writeNumericOID(attr));    count++;  } else {    throw new ConfigurationException("Class definition doesn't" + "have a numeric OID");  }  attr=attrs.get(NAME_ID);  if (attr != null) {    objectDesc.append(writeQDescrs(attr));    count++;  }  attr=attrs.get(DESC_ID);  if (attr != null) {    objectDesc.append(writeQDString(attr));    count++;  }  attr=attrs.get(OBSOLETE_ID);  if (attr != null) {    objectDesc.append(writeBoolean(attr));    count++;  }  attr=attrs.get(SUP_ID);  if (attr != null) {    objectDesc.append(writeOIDs(attr));    count++;  }  attr=attrs.get(ABSTRACT_ID);  if (attr != null) {    objectDesc.append(writeBoolean(attr));    count++;  }  attr=attrs.get(STRUCTURAL_ID);  if (attr != null) {    objectDesc.append(writeBoolean(attr));    count++;  }  attr=attrs.get(AUXILARY_ID);  if (attr != null) {    objectDesc.append(writeBoolean(attr));    count++;  }  attr=attrs.get(MUST_ID);  if (attr != null) {    objectDesc.append(writeOIDs(attr));    count++;  }  attr=attrs.get(MAY_ID);  if (attr != null) {    objectDesc.append(writeOIDs(attr));    count++;  }  if (count < attrs.size()) {    String attrId=null;    for (NamingEnumeration<? extends Attribute> ae=attrs.getAll(); ae.hasMoreElements(); ) {      attr=ae.next();      attrId=attr.getID();      if (attrId.equals(NUMERICOID_ID) || attrId.equals(NAME_ID) || attrId.equals(SUP_ID)|| attrId.equals(MAY_ID)|| attrId.equals(MUST_ID)|| attrId.equals(STRUCTURAL_ID)|| attrId.equals(DESC_ID)|| attrId.equals(AUXILARY_ID)|| attrId.equals(ABSTRACT_ID)|| attrId.equals(OBSOLETE_ID)) {        continue;      } else {        objectDesc.append(writeQDStrings(attr));      }    }  }  objectDesc.append(")");  return objectDesc.toString();}  }
class C{  @Override public DriverTask deleteVolumeMirror(VolumeMirror mirror){  return mirrorHelper.deleteVolumeMirror(mirror);}  }
class C{  public String addStepsForPostDeleteVolumes(Workflow workflow,String waitFor,List<VolumeDescriptor> volumeDescriptors,String taskId,VolumeWorkflowCompleter completer,BlockDeviceController blockDeviceController) throws InternalException {  List<VolumeDescriptor> rpSourceDescriptors=VolumeDescriptor.filterByType(volumeDescriptors,new VolumeDescriptor.Type[]{VolumeDescriptor.Type.RP_SOURCE,VolumeDescriptor.Type.RP_VPLEX_VIRT_SOURCE},new VolumeDescriptor.Type[]{});  if (rpSourceDescriptors.isEmpty()) {    return waitFor;  }  return addRemoveProtectionOnVolumeStep(workflow,waitFor,volumeDescriptors,taskId,blockDeviceController);}  }
class C{  @Override protected EClass eStaticClass(){  return EipPackage.Literals.TRANSFORMER;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:13.108 -0400",hash_original_method="57BCC35162602F325D6D9640393A4B40",hash_generated_method="6BCBEBF0DE04F96EF1B4ADA9EBA1CC83") private StrictMath(){}  }
class C{  private ExecJavaCliParser createExecCommandParser(String containerWorkDir){  String execLine=this.filterAndExecuteLaunchScriptAndReturnExecLine(containerWorkDir);  String[] values=execLine.split("\"");  String javaCli=values[1];  String[] javaCliValues=javaCli.split(" ");  StringBuffer buffer=new StringBuffer();  for (int i=0; i < javaCliValues.length; i++) {    if (i > 0) {      buffer.append(javaCliValues[i]);      if (javaCliValues.length - i > 1) {        buffer.append(" ");      }    }  }  String extractedJavaCli=buffer.toString();  ExecJavaCliParser execJavaCliParser=new ExecJavaCliParser(extractedJavaCli);  return execJavaCliParser;}  }
class C{  static private void _writeDecRef(Writer out,char ch) throws IOException {  if (ch == '\u20ac') {    out.write("&euro;");    return;  }  out.write("&#");  int i=(int)ch;  if (i > 10000) {    out.write('0' + (i / 10000));    i=i % 10000;    out.write('0' + (i / 1000));    i=i % 1000;    out.write('0' + (i / 100));    i=i % 100;    out.write('0' + (i / 10));    i=i % 10;    out.write('0' + i);  } else   if (i > 1000) {    out.write('0' + (i / 1000));    i=i % 1000;    out.write('0' + (i / 100));    i=i % 100;    out.write('0' + (i / 10));    i=i % 10;    out.write('0' + i);  } else {    out.write('0' + (i / 100));    i=i % 100;    out.write('0' + (i / 10));    i=i % 10;    out.write('0' + i);  }  out.write(';');}  }
class C{  public static String toString(Object o) throws PageException {  if (o instanceof String)   return (String)o; else   if (o instanceof Number)   return toString(((Number)o)); else   if (o instanceof Boolean)   return toString(((Boolean)o).booleanValue()); else   if (o instanceof Castable)   return ((Castable)o).castToString(); else   if (o instanceof Date) {    if (o instanceof DateTime)     return ((DateTime)o).castToString();    return new DateTimeImpl((Date)o).castToString();  } else   if (o instanceof Clob)   return toString((Clob)o); else   if (o instanceof Locale)   return toString((Locale)o); else   if (o instanceof TimeZone)   return toString((TimeZone)o); else   if (o instanceof Node)   return XMLCaster.toString((Node)o); else   if (o instanceof Reader) {    Reader r=null;    try {      return IOUtil.toString(r=(Reader)o);    } catch (    IOException e) {      throw Caster.toPageException(e);    } finally {      IOUtil.closeEL(r);    }  } else   if (o instanceof InputStream) {    PageContextImpl pc=(PageContextImpl)ThreadLocalPageContext.get();    InputStream r=null;    try {      return IOUtil.toString(r=(InputStream)o,pc.getWebCharset());    } catch (    IOException e) {      throw Caster.toPageException(e);    } finally {      IOUtil.closeEL(r);    }  } else   if (o instanceof byte[]) {    PageContextImpl pc=(PageContextImpl)ThreadLocalPageContext.get();    try {      return new String((byte[])o,pc.getWebCharset());    } catch (    Throwable t) {      return new String((byte[])o);    }  } else   if (o instanceof char[])   return new String((char[])o); else   if (o instanceof ObjectWrap)   return toString(((ObjectWrap)o).getEmbededObject()); else   if (o instanceof Calendar)   return toString(((Calendar)o).getTime()); else   if (o == null)   return "";  if (o instanceof Map || o instanceof List || o instanceof Function)   throw new CasterException(o,"string");  return o.toString();}  }
class C{  public DrawerBuilder withTranslucentNavigationBarProgrammatically(boolean translucentNavigationBarProgrammatically){  this.mTranslucentNavigationBarProgrammatically=translucentNavigationBarProgrammatically;  if (translucentNavigationBarProgrammatically) {    this.mTranslucentNavigationBar=true;  }  return this;}  }
class C{  public void addSingleInterest(Object key,int interestType,InterestResultPolicy pol,boolean isDurable,boolean receiveUpdatesAsInvalidates){  RegisterInterestTracker rit=this.pool.getRITracker();  boolean finished=false;  try {    rit.addSingleInterest(this.region,key,interestType,pol,isDurable,receiveUpdatesAsInvalidates);    finished=true;  }  finally {    if (!finished) {      rit.removeSingleInterest(this.region,key,interestType,isDurable,receiveUpdatesAsInvalidates);    }  }}  }
class C{  private void nodeLengthsToHeights(FlexibleNode node,double height){  double newHeight=height;  if (node.getLength() > 0.0) {    newHeight+=node.getLength();  }  node.setHeight(newHeight);  for (int i=0; i < node.getChildCount(); i++) {    nodeLengthsToHeights(node.getChild(i),newHeight);  }}  }
class C{  public QueryResultHandlerException(String msg,Throwable t){  super(msg,t);}  }
class C{  public static <T extends TBase>String serializeJson(T obj) throws TException {  return new TSerializer(new TJSONProtocol.Factory()).toString(obj,THRIFT_CHARSET);}  }
class C{  private void sendStageProgressPatch(com.vmware.xenon.common.TaskState.TaskStage stage){  ServiceUtils.logInfo(this,"sendStageProgressPatch %s",stage);  TaskUtils.sendSelfPatch(this,buildPatch(stage,null));}  }
class C{  @SuppressWarnings("unchecked") private void allocateElements(int numElements){  int initialCapacity=MIN_INITIAL_CAPACITY;  if (numElements >= initialCapacity) {    initialCapacity=numElements;    initialCapacity|=(initialCapacity >>> 1);    initialCapacity|=(initialCapacity >>> 2);    initialCapacity|=(initialCapacity >>> 4);    initialCapacity|=(initialCapacity >>> 8);    initialCapacity|=(initialCapacity >>> 16);    initialCapacity++;    if (initialCapacity < 0)     initialCapacity>>>=1;  }  elements=(E[])new Object[initialCapacity];}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public DeadEvent(Object source,Object event){  this.source=source;  this.event=event;}  }
class C{  public CashierNotFoundException(Long cashierId){  super(ERROR_MESSAGE_CODE,DEFAULT_ERROR_MESSAGE,cashierId);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.STATEMENT__KEY:    setKey((String)newValue);  return;case GamlPackage.STATEMENT__FIRST_FACET:setFirstFacet((String)newValue);return;case GamlPackage.STATEMENT__EXPR:setExpr((Expression)newValue);return;case GamlPackage.STATEMENT__FACETS:getFacets().clear();getFacets().addAll((Collection<? extends Facet>)newValue);return;case GamlPackage.STATEMENT__BLOCK:setBlock((Block)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public PrintWriterImpl(){  super((Writer)_dummyWriter);}  }
class C{  public ScriptFilter saveFilter(ScriptFilter sf){  return new ScriptFilterDao().saveOrUpdate(sf);}  }
class C{  public void projectionChanged(ProjectionEvent e){  if (Debug.debugging("scaletextpanel")) {    System.out.println("ScaleTextPanel.projectionChanged()");  }  Projection newProj=e.getProjection();  if (projection == null || (!projection.equals(newProj))) {    setProjection((Projection)newProj.makeClone());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:56.935 -0500",hash_original_method="9DDD7B6FB851EDEB6218261EF1A63117",hash_generated_method="E0AB274C134F13D11EEA12E8EFF7137F") public String toShortString(){  StringBuilder sb=new StringBuilder(64);  toShortString(sb);  return sb.toString();}  }
class C{  public static boolean isIndependentPooledFisher2(List<IndependenceTest> independenceTests,Node x,Node y,List<Node> condSet){  double alpha=independenceTests.get(0).getAlpha();  List<Double> pValues=getAvailablePValues(independenceTests,x,y,condSet);  double tf=0.0;  int numPValues=0;  for (  double p : pValues) {    tf+=-2.0 * Math.log(p);    numPValues++;  }  double p=1.0 - ProbUtils.chisqCdf(tf,2 * numPValues);  return (p > alpha);}  }
class C{  public AnimationBuilder onStop(AnimationListener.Stop stopListener){  viewAnimator.onStop(stopListener);  return this;}  }
class C{  public final int _firstch2(int identity){  if (identity < m_blocksize)   return m_firstch_map0[identity]; else   return m_firstch_map[identity >>> m_SHIFT][identity & m_MASK];}  }
class C{  public Class<?> loadClass(String name) throws ClassNotFoundException {  return getClassLoader().loadClass(name);}  }
class C{  public TranslatedRegion(Region region,Vector offset){  super(region.getBounds().translate(offset));  this.region=region;  this.offset=offset;}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public void send(final OscPacket thePacket,final String theIpAddress,final int thePort){  _myOscNetManager.send(thePacket,theIpAddress,thePort);}  }
class C{  private IceSocketWrapper createDatagramSocket(InetAddress laddr,int preferredPort,int minPort,int maxPort) throws IllegalArgumentException, IOException, BindException {  this.checkPorts(preferredPort,minPort,maxPort);  int bindRetries=StackProperties.getInt(StackProperties.BIND_RETRIES,StackProperties.BIND_RETRIES_DEFAULT_VALUE);  int port=preferredPort;  for (int i=0; i < bindRetries; i++) {    try {      IceSocketWrapper sock=new IceUdpSocketWrapper(new MultiplexingDatagramSocket(port,laddr));      if (logger.isLoggable(Level.FINEST)) {        logger.log(Level.FINEST,"just bound to: " + sock.getLocalSocketAddress());      }      return sock;    } catch (    SocketException se) {      logger.log(Level.INFO,"Retrying a bind because of a failure to bind to" + " address " + laddr + " and port "+ port+ " ("+ se.getMessage()+ ")");      logger.log(Level.FINEST,"",se);    }    port++;    if (port > maxPort)     port=minPort;  }  throw new BindException("Could not bind to any port between " + minPort + " and "+ (port - 1));}  }
class C{  public static String createTrxName(){  return createTrxName(null);}  }
class C{  public void shuffle(Random rnd){  int numberOfInstance=size();  for (int i=0; i < numberOfInstance; i++) {    int j=i + rnd.nextInt(numberOfInstance - i);    IInstance tmpIns=instanceList.get(i);    instanceList.set(i,instanceList.get(j));    instanceList.set(j,tmpIns);    IStructure tmpStructure=goldStructureList.get(i);    goldStructureList.set(i,goldStructureList.get(j));    goldStructureList.set(j,tmpStructure);    if (instanceWeightList != null) {      Float tmp_weight=instanceWeightList.get(i);      instanceWeightList.set(i,instanceWeightList.get(j));      instanceWeightList.set(j,tmp_weight);    }  }}  }
class C{  protected void headerName(int tok) throws ParseException {  this.lexer.match(tok);  this.lexer.SPorHT();  this.lexer.match(':');  this.lexer.SPorHT();}  }
class C{  public static boolean enableConnected(final String ssid,WifiCipherType type,String... password){  return WifiAdmin.getInstance().enableConnected(ssid,type,password);}  }
class C{  @Override public String quit(){  checkIsInMultiOrPipeline();  client.quit();  String quitReturn=client.getStatusCodeReply();  client.disconnect();  return quitReturn;}  }
class C{  public DigitalSignatureValidationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public DrawerBuilder withRootView(@NonNull ViewGroup rootView){  this.mRootView=rootView;  withTranslucentStatusBar(false);  return this;}  }
class C{  public NightModeHelper(Activity activity,int theme){  int currentMode=(activity.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK);  mPrefs=PreferenceManager.getDefaultSharedPreferences(activity);  init(activity,theme,mPrefs.getInt(PREF_KEY,currentMode));}  }
class C{  @Override public ICloseableIterator<IBindingSet> call(final IBindingSet[] bc){  if (log.isInfoEnabled()) {    log.info(bc.length);    log.info(Arrays.toString(bc));    log.info(serviceParams);  }  if (bc != null && bc.length > 0 && !bc[0].equals(EmptyBindingSet.INSTANCE)) {    throw new RuntimeException("cannot run with incoming bindings");  }  final IVariable<IV> var=serviceParams.getAsVar(ValuesParams.VAR);  final List<TermNode> vals=serviceParams.get(ValuesParams.VAL);  final IBindingSet[] bSets=new IBindingSet[vals.size()];  for (int i=0; i < bSets.length; i++) {    bSets[i]=new ListBindingSet();    bSets[i].set(var,(IConstant<IV>)vals.get(i).getValueExpression());  }  return new ThickCloseableIterator<IBindingSet>(bSets,bSets.length);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  protected static final int removeWhiteSpace(byte[] data){  if (data == null) {    return 0;  }  int newSize=0;  int len=data.length;  for (int i=0; i < len; i++) {    byte dataS=data[i];    if (!isWhiteSpace(dataS)) {      data[newSize++]=dataS;    }  }  return newSize;}  }
class C{  private void handleActivateProduct(TriggerProcess process,LocalizerFacade facade) throws IOException, WSDLException, ParserConfigurationException {  INotificationServiceAdapter serviceClient=getServiceClient(process.getTriggerDefinition());  VOTriggerProcess vo=TriggerProcessAssembler.toVOTriggerProcess(process,facade);  VOService product=getParamValue(process.getParamValueForName(TriggerProcessParameterName.PRODUCT),VOService.class);  serviceClient.onActivateProduct(VOConverter.convertToApi(vo),VOConverter.convertToApi(product));  updateProcessState(process);}  }
class C{  public final static String formatParameters(final NameValuePair[] nvps,final boolean quote,HeaderValueFormatter formatter){  if (formatter == null)   formatter=BasicHeaderValueFormatter.DEFAULT;  return formatter.formatParameters(null,nvps,quote).toString();}  }
class C{  public Future<String> spawnBackup(String backupAgentName,String storageAgentName,boolean isOnline) throws BackupException, UnsupportedCapabilityException {  if (logger.isDebugEnabled()) {    logger.debug("Processing backup request: backup=" + backupAgentName + " storage="+ storageAgentName);  }  assertEnabled();  backupAgentName=resolveBackupAgentName(backupAgentName);  BackupAgent backupAgent=findBackupAgent(backupAgentName);  StorageAgent storageAgent=findStorageAgent(storageAgentName);  if (isOnline) {    BackupCapabilities caps=backupAgent.capabilities();    if (!caps.isHotBackupEnabled()) {      throw new UnsupportedCapabilityException("Online backup not supported for agent type " + backupAgentName);    }  }  BackupTask callable=new BackupTask(eventDispatcher,backupAgentName,backupAgent,storageAgent);  Future<String> task=taskService.submit(callable);  return task;}  }
class C{  public void updateValueText(byte val){  if (isDisposed() || position.isDisposed())   return;  String valBinText="0000000" + Long.toBinaryString(val);  String valText=CoreMessages.editor_binary_hex_status_line_value + val + " (dec) = "+ Integer.toHexString(0x0ff & val)+ " (binary) = "+ valBinText.substring(valBinText.length() - 8)+ " (bin)";  value.setText(valText);}  }
class C{  public static String toString(byte[] transactionID){  StringBuilder idStr=new StringBuilder();  idStr.append("0x");  for (int i=0; i < transactionID.length; i++) {    if ((transactionID[i] & 0xFF) <= 15)     idStr.append("0");    idStr.append(Integer.toHexString(transactionID[i] & 0xFF).toUpperCase());  }  return idStr.toString();}  }
class C{  public List<FeedSource> queryDeep(String where,String... selectionArg){  Cursor cursor=db.rawQuery(getSelectDeep() + where,selectionArg);  return loadDeepAllAndCloseCursor(cursor);}  }
class C{  public DeterministicKey deriveNextChild(ImmutableList<ChildNumber> parentPath,boolean relative,boolean createParent,boolean privateDerivation){  DeterministicKey parent=get(parentPath,relative,createParent);  int nAttempts=0;  while (nAttempts++ < MAX_CHILD_DERIVATION_ATTEMPTS) {    try {      ChildNumber createChildNumber=getNextChildNumberToDerive(parent.getChildNumberPath(),privateDerivation);      return deriveChild(parent,createChildNumber);    } catch (    HDDerivationException ignore) {    }  }  throw new HDDerivationException("Maximum number of child derivation attempts reached, this is probably an indication of a bug.");}  }
class C{  public void testGetDataLength(){  char expectedReturn=4;  char actualReturn=changeRequestAttribute.getDataLength();  assertEquals("data length returned an invalid value",expectedReturn,actualReturn);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:53.791 -0400",hash_original_method="D37A8255718A20CFB0E781875CD2288C",hash_generated_method="9764CBBE0E7E33F7F76A65E296AEBE51") public DrmInfoEvent(int uniqueId,int type,String message,HashMap<String,Object> attributes){  super(uniqueId,type,message,attributes);}  }
class C{  private Collator createFromRules(String fileName,ResourceLoader loader){  InputStream input=null;  try {    input=loader.openResource(fileName);    String rules=IOUtils.toString(input,"UTF-8");    return new RuleBasedCollator(rules);  } catch (  IOException|ParseException e) {    throw new RuntimeException(e);  } finally {    IOUtils.closeQuietly(input);  }}  }
class C{  @Override public boolean hasCustomName(){  return displayName != null;}  }
class C{  public static void main(String[] args){  if (args.length == 1) {    run(args[0]);  } else {    throw new IllegalArgumentException("Incorrect number of arguments: [0] Public Transit Mapping config file");  }}  }
class C{  private boolean isReservingOverflow(){  if (!mReserveOverflowSet) {    mReserveOverflow=ActionMenuPresenter.reserveOverflow(mActivity);    mReserveOverflowSet=true;  }  return mReserveOverflow;}  }
class C{  public Boolean isHome(){  return home;}  }
class C{  public void stopDragOrResize(final Point destination){  if (dragged == null && resized == null) {    return;  }  if (destination != null) {    updateDragOrResize(destination);  }  if (dragged != null) {    WorkflowAnnotation draggedAnno=dragged.getDraggedAnnotation();    if (dragged.getHoveredOperator() != null) {      if (draggedAnno instanceof ProcessAnnotation) {        if (destination != null) {          deleteAnnotation(draggedAnno);          addOperatorAnnotation(draggedAnno.createOperatorAnnotation(dragged.getHoveredOperator()));        } else {          moveProcessAnnoToPoint((ProcessAnnotation)draggedAnno,dragged.getOrigin(),dragged.getStartingPoint());        }      } else       if (draggedAnno instanceof OperatorAnnotation) {        OperatorAnnotation opAnno=(OperatorAnnotation)draggedAnno;        if (destination != null) {          model.removeOperatorAnnotation(opAnno);          moveOperatorAnnoToOperator(opAnno,dragged.getHoveredOperator());          opAnno.setAttachedTo(dragged.getHoveredOperator());          model.addOperatorAnnotation(opAnno);        } else {          moveOperatorAnnoToOperator(opAnno,opAnno.getAttachedTo());        }        opAnno.fireUpdate();      }    } else {      if (destination == null) {        if (draggedAnno instanceof OperatorAnnotation) {          moveOperatorAnnoToOperator((OperatorAnnotation)draggedAnno,((OperatorAnnotation)draggedAnno).getAttachedTo());        } else         if (draggedAnno instanceof ProcessAnnotation) {          moveProcessAnnoToPoint((ProcessAnnotation)draggedAnno,dragged.getOrigin(),dragged.getStartingPoint());        }      } else {        if (draggedAnno instanceof OperatorAnnotation && dragged.isUnsnapped()) {          deleteAnnotation(draggedAnno);          addProcessAnnotation(draggedAnno.createProcessAnnotation(draggedAnno.getProcess()));        } else         if (draggedAnno instanceof ProcessAnnotation) {          draggedAnno.fireUpdate();        }      }    }    model.setSelectionRectangle(null);  } else   if (resized != null) {    resized.getResized().fireUpdate();  }  if (resized != null) {    WorkflowAnnotation anno=resized.getResized();    int prefHeight=AnnotationDrawUtils.getContentHeight(AnnotationDrawUtils.createStyledCommentString(anno.getComment(),anno.getStyle()),(int)anno.getLocation().getWidth());    boolean overflowing=false;    if (prefHeight > anno.getLocation().getHeight()) {      overflowing=true;    }    anno.setOverflowing(overflowing);  }  dragged=null;  resized=null;}  }
class C{  public void state(final Element element){  state(element.getProperties());}  }
class C{  protected SVGOMFlowParaElement(){}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:40.037 -0500",hash_original_method="BA169038399FE60257FEACB6F83742BB",hash_generated_method="F4DE400B5ECB636CE5878A6196E9F7A7") synchronized void close(){  if (Log.isLoggable(TAG,Log.DEBUG)) {    Log.d(TAG,"Closing the connection pool on " + mParentDbObj.getPath() + toString());  }  for (int i=mPool.size() - 1; i >= 0; i--) {    mPool.get(i).mDb.close();  }  mPool.clear();}  }
class C{  private final static ElderState startElderCall(InternalDistributedSystem sys,DLockService dls,boolean usesElderCollaborationLock){  InternalDistributedMember elder;  ElderState es=null;  final DM dm=sys.getDistributionManager();  boolean elderCallStarted=false;  while (!elderCallStarted) {    dm.throwIfDistributionStopped();    elder=dm.getElderId();    Assert.assertTrue(elder != null,"starting an elder call with no valid elder");    if (dm.getId().equals(elder)) {      if (usesElderCollaborationLock) {        try {          es=dm.getElderState(false,true);        } catch (        IllegalStateException e) {          continue;        }      } else {        es=dm.getElderState(false,false);      }    } else {      es=null;    }    elderCallStarted=basicStartElderCall(sys,es,elder,dls);  }  return es;}  }
class C{  public File backupPrivateKeys(CharSequence passwordToUse) throws IOException, KeyCrypterException {  File privateKeysBackupFile=null;  if (passwordToUse != null && passwordToUse.length() > 0) {    if (controller.getModel() != null && this.bitcoinController.getModel().getActiveWalletWalletInfo() != null && this.bitcoinController.getModel().getActiveWalletWalletInfo().getWalletVersion() == MultiBitWalletVersion.PROTOBUF_ENCRYPTED) {      PrivateKeysHandler privateKeysHandler=new PrivateKeysHandler(this.bitcoinController.getModel().getNetworkParameters());      String privateKeysBackupFilename=BackupManager.INSTANCE.createBackupFilename(new File(this.bitcoinController.getModel().getActiveWalletFilename()),BackupManager.PRIVATE_KEY_BACKUP_DIRECTORY_NAME,false,false,BitcoinModel.PRIVATE_KEY_FILE_EXTENSION);      privateKeysBackupFile=new File(privateKeysBackupFilename);      BlockChain blockChain=null;      if (this.bitcoinController.getMultiBitService() != null) {        blockChain=this.bitcoinController.getMultiBitService().getChain();      }      privateKeysHandler.exportPrivateKeys(privateKeysBackupFile,this.bitcoinController.getModel().getActiveWallet(),blockChain,true,passwordToUse,passwordToUse);    } else {      log.debug("Wallet '" + this.bitcoinController.getModel().getActiveWalletFilename() + "' private keys not backed up as not PROTOBUF_ENCRYPTED");    }  } else {    log.debug("Wallet '" + this.bitcoinController.getModel().getActiveWalletFilename() + "' private keys not backed up password was blank or of zero length");  }  return privateKeysBackupFile;}  }
class C{  public int size(){  return count;}  }
class C{  public boolean onClick(int position){  if (position != RecyclerView.NO_POSITION) {    toggleSelection(position);    return true;  }  return false;}  }
class C{  @Override public void process(String tuple){  if (!validTuple(tuple)) {    return;  }  beginProcessTokens();  processTokens(tuple.split(splitBy));  endProcessTokens();}  }
class C{  public void popupMenuCanceled(PopupMenuEvent e){}  }
class C{  public static void registerSubtileModel(String subTileName,ModelResourceLocation model,ModelResourceLocation itemModel){  Preconditions.checkState(Loader.instance().isInState(LoaderState.PREINITIALIZATION));  subtileBlockModels.put(subTileName,model);  subtileItemModels.put(subTileName,itemModel);}  }
class C{  public DriveImageView(Context context){  super(context);  initialize(context);}  }
class C{  public ServerHandshaker(int initialMessageSequenceNo,DTLSSession session,RecordLayer recordLayer,SessionListener sessionListener,DtlsConnectorConfig config,int maxTransmissionUnit){  super(false,initialMessageSequenceNo,session,recordLayer,sessionListener,config.getTrustStore(),maxTransmissionUnit);  this.supportedCipherSuites=Arrays.asList(config.getSupportedCipherSuites());  this.pskStore=config.getPskStore();  this.privateKey=config.getPrivateKey();  this.certificateChain=config.getCertificateChain();  this.publicKey=config.getPublicKey();  this.clientAuthenticationRequired=config.isClientAuthenticationRequired();  this.supportedClientCertificateTypes=new ArrayList<>();  this.supportedClientCertificateTypes.add(CertificateType.RAW_PUBLIC_KEY);  if (rootCertificates != null && rootCertificates.length > 0) {    this.supportedClientCertificateTypes.add(CertificateType.X_509);  }  this.supportedServerCertificateTypes=new ArrayList<>();  if (privateKey != null && publicKey != null) {    if (certificateChain == null || certificateChain.length == 0) {      this.supportedServerCertificateTypes.add(CertificateType.RAW_PUBLIC_KEY);    } else     if (config.isSendRawKey()) {      this.supportedServerCertificateTypes.add(CertificateType.RAW_PUBLIC_KEY);      this.supportedServerCertificateTypes.add(CertificateType.X_509);    } else {      this.supportedServerCertificateTypes.add(CertificateType.X_509);      this.supportedServerCertificateTypes.add(CertificateType.RAW_PUBLIC_KEY);    }  }}  }
class C{  public synchronized void removeBatchClassifierListener(BatchClassifierListener cl){  m_batchClassifierListeners.remove(cl);}  }
class C{  public Controller createController(){  SimpleController c=new SimpleController(this);  c.pressPlay();  return c;}  }
class C{  public BufferedImage createCompatibleDestImage(BufferedImage src,ColorModel destCM){  BufferedImage image;  int w=src.getWidth();  int h=src.getHeight();  WritableRaster wr=null;  if (destCM == null) {    destCM=src.getColorModel();    if (destCM instanceof IndexColorModel) {      destCM=ColorModel.getRGBdefault();    } else {      wr=src.getData().createCompatibleWritableRaster(w,h);    }  }  if (wr == null) {    wr=destCM.createCompatibleWritableRaster(w,h);  }  image=new BufferedImage(destCM,wr,destCM.isAlphaPremultiplied(),null);  return image;}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public final Entry<K,V> pollLastEntry(){  throw new UnsupportedOperationException();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.350 -0500",hash_original_method="923751B615B712D23E3EDA9B1C0C5364",hash_generated_method="361E83401346E716FFE65F2C9B0886CD") public static void cursorDoubleToCursorValues(Cursor cursor,String field,ContentValues values){  cursorDoubleToContentValues(cursor,field,values,field);}  }
class C{  protected int drawEchoCharacter(Graphics g,int x,int y,char c){  ONE[0]=c;  SwingUtilities2.drawChars(Utilities.getJComponent(this),g,ONE,0,1,x,y);  return x + g.getFontMetrics().charWidth(c);}  }
class C{  private String composeSelectorOptions(String selectorStyle,ITemplateContext context){  Page<?> page=PageUtils.findPage(context);  int currentPageSize=page.getSize();  Locale locale=context.getLocale();  StringBuilder sb=new StringBuilder();  for (  int value : selectorValues) {    String url=PageUtils.createPageSizeUrl(context,value);    boolean isSelectedValue=value == currentPageSize;    String messageKey=getMessageKey(selectorStyle).concat(isSelectedValue ? ".option.selected" : ".option");    String option=Messages.getMessage(BUNDLE_NAME,messageKey,locale,value,url);    sb.append(option);  }  return sb.toString();}  }
class C{  private ServletHolder jspServletHolder(){  ServletHolder holderJsp=new ServletHolder("jsp",JettyJspServlet.class);  holderJsp.setInitOrder(0);  holderJsp.setInitParameter("logVerbosityLevel","DEBUG");  holderJsp.setInitParameter("fork","false");  holderJsp.setInitParameter("xpoweredBy","false");  holderJsp.setInitParameter("compilerTargetVM","1.7");  holderJsp.setInitParameter("compilerSourceVM","1.7");  holderJsp.setInitParameter("keepgenerated","true");  return holderJsp;}  }
class C{  public ExpandedNodeId(UnsignedInteger serverIndex,int namespaceIndex,Object value){  if (namespaceIndex < 0 || namespaceIndex > 65535)   throw new IllegalArgumentException("namespaceIndex out of bounds");  this.serverIndex=serverIndex == null ? UnsignedInteger.ZERO : serverIndex;  if (value instanceof Integer)   value=UnsignedInteger.getFromBits((Integer)value);  this.value=value;  this.namespaceIndex=namespaceIndex;  if (namespaceIndex == 0) {    if (!ObjectUtils.equals(value,NodeId.NULL_NUMERIC.getValue()) && !ObjectUtils.equals(value,NodeId.NULL_STRING.getValue()) && !ObjectUtils.equals(value,NodeId.NULL_GUID.getValue())&& !ObjectUtils.equals(value,NodeId.NULL_OPAQUE.getValue())) {      this.namespaceUri=NamespaceTable.OPCUA_NAMESPACE;    }  }  if (value == null)   type=IdType.String; else   if (value instanceof UnsignedInteger)   type=IdType.Numeric; else   if (value instanceof String)   type=IdType.String; else   if (value instanceof UUID)   type=IdType.Guid; else   if (value instanceof byte[])   type=IdType.Opaque; else   throw new IllegalArgumentException("value cannot be " + value.getClass().getName());}  }
class C{  private static void printGoals(Goals goals){  System.out.println("\n----- Goals Collection -----\n");  for (  Goal goal : goals.getItems()) {    System.out.println("Account ID: " + goal.getAccountId());    System.out.println("Web Property ID: " + goal.getWebPropertyId());    System.out.println("Web Property Internal Id: " + goal.getInternalWebPropertyId());    System.out.println("Profile ID: " + goal.getId());    System.out.println("Goal Number: " + goal.getId());    System.out.println("Goal Name: " + goal.getName());    System.out.println("Is Goal Active: " + goal.getActive());    System.out.println("Goal Value: " + goal.getValue());    System.out.println("Goal Type: " + goal.getType());    System.out.println("Goal Created: " + goal.getCreated());    System.out.println("Goal Updated: " + goal.getUpdated());    if (goal.getType().equals("URL_DESTINATION")) {      printUrlDestinationDetails(goal.getUrlDestinationDetails());    } else     if (goal.getType().equals("VISIT_TIME_ON_SITE")) {      printVisitTimeOnSiteDetails(goal.getVisitTimeOnSiteDetails());    } else     if (goal.getType().equals("VISIT_NUM_PAGES")) {      printVisitNumPagesDetails(goal.getVisitNumPagesDetails());    } else     if (goal.getType().equals("EVENT")) {      printGoalEventDetails(goal.getEventDetails());    }  }}  }
class C{  public static <T>T withWriter(OutputStream stream,String charset,@ClosureParams(value=SimpleType.class,options="java.io.Writer") Closure<T> closure) throws IOException {  return withWriter(new OutputStreamWriter(stream,charset),closure);}  }
class C{  @Override public TopicSubscriber createSubscriber(final Topic topic) throws JMSException {  lock();  try {    TopicSession session=getTopicSessionInternal();    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createSubscriber " + session + " topic="+ topic);    }    TopicSubscriber result=session.createSubscriber(topic);    result=new ActiveMQRATopicSubscriber(result,this);    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createdSubscriber " + session + " ActiveMQTopicSubscriber="+ result);    }    addConsumer(result);    return result;  }  finally {    unlock();  }}  }
class C{  public SummaryRanges(){  list=new LinkedList<>();}  }
class C{  ContentReader(IXMLReader reader,IXMLEntityResolver resolver,String buffer){  this.reader=reader;  this.resolver=resolver;  this.buffer=buffer;  this.bufferIndex=0;}  }
class C{  protected void fireDataChangedEvent(final int status,final int index){  dataListener.fireDataChangeEvent(index,status);}  }
class C{  public ServiceNotFoundException(){  super();}  }
class C{  public void loadTokenToVectorDict(String[][] tableData){  tokenToVectorDictionary.clear();  for (int i=0; i < tableData.length; i++) {    double[] vector=Utils.parseVectorString(tableData[i][1]);    addTokenVectorPair(tableData[i][0],vector);  }  fireDictionaryChangedEvent();}  }
class C{  public HasResourceSupportValidator(ConfigurationType type){  super(type,ResourcePropertySet.RESOURCE);}  }
class C{  static public Identifier toIdentifier(Expression e){  StringBuffer buf=new StringBuffer();  while (e.op == FIELD) {    FieldExpression fe=(FieldExpression)e;    if (fe.id == idThis || fe.id == idClass) {      return null;    }    buf.insert(0,fe.id);    buf.insert(0,'.');    e=fe.right;  }  if (e.op != IDENT) {    return null;  }  buf.insert(0,((IdentifierExpression)e).id);  return Identifier.lookup(buf.toString());}  }
class C{  public ObserveMessageObserverImpl(CoapHandler handler,CoapObserveRelation relation){  super(handler);  this.relation=relation;}  }
class C{  private void fillFromCurrentSpec(){  ObligationStatus[] statuses=ProverHelper.getObligationStatuses();  if (statuses != null) {    for (int i=0; i < statuses.length; i++) {      updateItem(statuses[i]);    }  }}  }
class C{  public static <A,O extends A>A[] addObjectToArray(A[] array,O obj){  Class<?> compType=Object.class;  if (array != null) {    compType=array.getClass().getComponentType();  } else   if (obj != null) {    compType=obj.getClass();  }  int newArrLength=(array != null ? array.length + 1 : 1);  @SuppressWarnings("unchecked") A[] newArr=(A[])Array.newInstance(compType,newArrLength);  if (array != null) {    System.arraycopy(array,0,newArr,0,array.length);  }  newArr[newArr.length - 1]=obj;  return newArr;}  }
class C{  public void cellToRect(int cellX,int cellY,int cellHSpan,int cellVSpan,Rect resultRect){  final int cellWidth=mCellWidth;  final int cellHeight=mCellHeight;  final int widthGap=mWidthGap;  final int heightGap=mHeightGap;  final int hStartPadding=getPaddingLeft();  final int vStartPadding=getPaddingTop();  int width=cellHSpan * cellWidth + ((cellHSpan - 1) * widthGap);  int height=cellVSpan * cellHeight + ((cellVSpan - 1) * heightGap);  int x=hStartPadding + cellX * (cellWidth + widthGap);  int y=vStartPadding + cellY * (cellHeight + heightGap);  resultRect.set(x,y,x + width,y + height);}  }
class C{  public int readNibble() throws IOException {  int b;  int x=0;  do {    x<<=3;    b=readBit();    x|=readInt(3);  } while (b == 0);  return x;}  }
class C{  public static void touch(File file) throws IOException {  checkNotNull(file);  if (!file.createNewFile() && !file.setLastModified(System.currentTimeMillis())) {    throw new IOException("Unable to update modification time of " + file);  }}  }
class C{  public ServerLocatorImpl(final Topology topology,final boolean useHA,final TransportConfiguration... transportConfigs){  this(topology,useHA,null,transportConfigs);}  }
class C{  public HmRsStatus(final Matcher<Integer> matcher){  super(matcher,HmRsStatus.FEATURE_NAME,HmRsStatus.FEATURE_NAME);}  }
class C{  public boolean isAllowUnusedLabels(){  return allowUnusedLabels;}  }
class C{  public boolean inPaintedArea(Point2D pt){  if ((paint == null) || (shape == null))   return false;  return shape.contains(pt);}  }
class C{  public void disableUnimplementedItems(final int ID,final boolean disableViewModes){  @SuppressWarnings("PointlessBooleanExpression") final boolean debug=!GUI.debugFX;  final int ALL=-10;  if (ID != ALL) {    if (!disableViewModes) {switch (ID) {case Commands.SEPARATECOVER:        separateCover.setDisable(debug);      break;case Commands.FIND:    find.setDisable(debug);  break;case Commands.SAVEFORM:reSaveAsForms.setDisable(debug);break;case Commands.SIGN:signPDF.setDisable(debug);break;}} else {switch (ID) {case Display.PAGEFLOW:pageFlow.setDisable(debug);break;}}} else {separateCover.setDisable(debug);reSaveAsForms.setDisable(debug);signPDF.setDisable(debug);}}  }
class C{  public CandidateAttribute clone(){  CandidateAttribute clone=(CandidateAttribute)super.clone();  clone.candidate=candidate;  return clone;}  }
class C{  @LogMessageDoc(level="ERROR",message="Invalid subaction: '{subaction}'",explanation="A static flow entry contained an invalid subaction",recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG) private static OFActionOutput decode_output(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("((all)|(controller)|(local)|(ingress-port)|(normal)|(flood))").matcher(actionToDecode);  OFActionOutput.Builder ab=OFFactories.getFactory(version).actions().buildOutput();  OFPort port=OFPort.ANY;  if (n.matches()) {    if (n.group(1) != null && n.group(1).equals("all"))     port=OFPort.ALL; else     if (n.group(1) != null && n.group(1).equals("controller"))     port=OFPort.CONTROLLER; else     if (n.group(1) != null && n.group(1).equals("local"))     port=OFPort.LOCAL; else     if (n.group(1) != null && n.group(1).equals("ingress-port"))     port=OFPort.IN_PORT; else     if (n.group(1) != null && n.group(1).equals("normal"))     port=OFPort.NORMAL; else     if (n.group(1) != null && n.group(1).equals("flood"))     port=OFPort.FLOOD;    ab.setPort(port);    ab.setMaxLen(Integer.MAX_VALUE);    log.debug("action {}",ab.build());    return ab.build();  } else {    try {      port=OFPort.of(Integer.parseInt(actionToDecode));      ab.setPort(port);      ab.setMaxLen(Integer.MAX_VALUE);      return ab.build();    } catch (    NumberFormatException e) {      log.error("Could not parse Integer port: '{}'",actionToDecode);      return null;    }  }}  }
class C{  public final Key translateKey(Key key) throws InvalidKeyException {  return spiImpl.engineTranslateKey(key);}  }
class C{  public static String truncate(String string,int length){  if (string.length() > length) {    string=string.substring(0,length);  }  return string;}  }
class C{  public static double logcdf(double x,double k,double theta,double shift){  if (x <= shift) {    return 0.;  }  final double e=Math.exp((x - shift) * theta);  return e < Double.POSITIVE_INFINITY ? GammaDistribution.logregularizedGammaP(k,e) : 0.;}  }
class C{  public DistributionSquare(int min0,int minY,int maxY,int max0,float chance){  super(DistributionHelpers.getRoundedSquareDistribution(Math.max(min0,0),Math.max(minY,0),Math.min(maxY,255),Math.min(max0,255),chance));  this.bestHeight=DistributionHelpers.calculateMeanLevel(this.getDistribution(),(minY + maxY) / 2);}  }
class C{  private void closeConnection(){  if (open.compareAndSet(true,false)) {    disqueConnection.close();  }}  }
class C{  public static String stringFor(int m){switch (m) {case cudaAddressModeWrap:    return "cudaAddressModeWrap";case cudaAddressModeClamp:  return "cudaAddressModeClamp";}return "INVALID cudaTextureAddressMode: " + m;}  }
class C{  protected UncheckedExecutionException(@Nullable String message){  super(message);}  }
class C{  private static void addSpans(Spans spans,List<DocIdSetIterator> allIterators,List<TwoPhaseIterator> twoPhaseIterators){  TwoPhaseIterator twoPhaseIter=spans.asTwoPhaseIterator();  if (twoPhaseIter != null) {    addTwoPhaseIterator(twoPhaseIter,allIterators,twoPhaseIterators);  } else {    addIterator(spans,allIterators,twoPhaseIterators);  }}  }
class C{  public boolean sameType(Fluid stack){  return stack.getID().equals(getID());}  }
class C{  @Uninterruptible("Encoding arguments on stack that won't be seen by GC") @Inline private int uninterruptiblePushJNIRef(Address ref,boolean isRef){  if (isRef && ref.isZero()) {    return 0;  } else {    if (VM.VerifyAssertions)     checkPush(isRef ? Magic.addressAsObject(ref) : null,false);    JNIRefsTop+=BYTES_IN_ADDRESS;    JNIRefs.set(JNIRefsTop >> LOG_BYTES_IN_ADDRESS,ref);    return JNIRefsTop;  }}  }
class C{  private void exportCuratedDocuments(ProjectExportModel aModel,File aCopyDir) throws FileNotFoundException, UIMAException, IOException, ClassNotFoundException, ProjectExportException {  List<de.tudarmstadt.ukp.clarin.webanno.model.SourceDocument> documents=repository.listSourceDocuments(aModel.project);  Class<?> writer;  if (FORMAT_AUTO.equals(aModel.format)) {    writer=WebannoTsv3Writer.class;  } else {    writer=repository.getWritableFormats().get(repository.getWritableFormatId(aModel.format));    if (writer == null) {      writer=WebannoTsv3Writer.class;    }  }  int initProgress=progress - 1;  int i=1;  for (  de.tudarmstadt.ukp.clarin.webanno.model.SourceDocument sourceDocument : documents) {    File curationCasDir=new File(aCopyDir + CURATION_AS_SERIALISED_CAS + sourceDocument.getName());    FileUtils.forceMkdir(curationCasDir);    File curationDir=new File(aCopyDir + CURATION_FOLDER + sourceDocument.getName());    FileUtils.forceMkdir(curationDir);    if (sourceDocument.getState().equals(SourceDocumentState.CURATION_FINISHED) || sourceDocument.getState().equals(SourceDocumentState.CURATION_IN_PROGRESS)) {      File curationCasFile=repository.getCasFile(sourceDocument,CURATION_USER);      if (curationCasFile.exists()) {        FileUtils.copyFileToDirectory(curationCasFile,curationCasDir);        try {          File curationFile=repository.exportAnnotationDocument(sourceDocument,CURATION_USER,writer,CURATION_USER,Mode.CURATION);          FileUtils.copyFileToDirectory(curationFile,curationDir);          FileUtils.forceDelete(curationFile);        } catch (        Exception e) {          error("Unexpected error while exporting project: " + ExceptionUtils.getRootCauseMessage(e));          throw new ProjectExportException("Aborting due to unrecoverable error while exporting!");        }      }    }    progress=initProgress + (int)Math.ceil(((double)i) / documents.size() * 10.0);    i++;  }}  }
class C{  private void inferParameterTypes(Tree.Primary p,Tree.NamedArgumentList nal){  Tree.Term term=unwrapExpressionUntilTerm(p);  if (term instanceof Tree.MemberOrTypeExpression) {    Tree.MemberOrTypeExpression mte=(Tree.MemberOrTypeExpression)term;    Declaration dec=mte.getDeclaration();    if (dec instanceof Functional) {      inferParameterTypesDirectly(dec,nal,mte);    }  }}  }
class C{  public List<List<AttributeTypeAndValue>> parse() throws IOException {  List<List<AttributeTypeAndValue>> list=new ArrayList<List<AttributeTypeAndValue>>();  String attType=nextAT();  if (attType == null) {    return list;  }  ObjectIdentifier oid=AttributeTypeAndValue.getObjectIdentifier(attType);  List<AttributeTypeAndValue> atav=new ArrayList<AttributeTypeAndValue>();  while (true) {    if (pos == chars.length) {      atav.add(new AttributeTypeAndValue(oid,new AttributeValue("",false,oid)));      list.add(0,atav);      return list;    }switch (chars[pos]) {case '"':      atav.add(new AttributeTypeAndValue(oid,new AttributeValue(quotedAV(),hasQE,oid)));    break;case '#':  atav.add(new AttributeTypeAndValue(oid,new AttributeValue(hexAV(),encoded)));break;case '+':case ',':case ';':atav.add(new AttributeTypeAndValue(oid,new AttributeValue("",false,oid)));break;default :atav.add(new AttributeTypeAndValue(oid,new AttributeValue(escapedAV(),hasQE,oid)));}if (pos >= chars.length) {list.add(0,atav);return list;}if (chars[pos] == ',' || chars[pos] == ';') {list.add(0,atav);atav=new ArrayList<AttributeTypeAndValue>();} else if (chars[pos] != '+') {throw new IOException("Invalid distinguished name string");}pos++;attType=nextAT();if (attType == null) {throw new IOException("Invalid distinguished name string");}oid=AttributeTypeAndValue.getObjectIdentifier(attType);}}  }
class C{  public static <E extends Style.HasCssName,F extends Enum<? extends Style.HasCssName>>void addUniqueEnumStyleName(final UIObject uiObject,final Class<F> enumClass,final E style){  removeEnumStyleNames(uiObject,enumClass);  addEnumStyleName(uiObject,style);}  }
class C{  public void write(Object source,Writer out) throws Exception {  write(source,NodeBuilder.write(out,format));}  }
class C{  public DataflowPipelineJob(String projectId,String jobId,DataflowPipelineOptions dataflowOptions,DataflowAggregatorTransforms aggregatorTransforms){  this.projectId=projectId;  this.jobId=jobId;  this.dataflowOptions=dataflowOptions;  this.aggregatorTransforms=aggregatorTransforms;}  }
class C{  public static Integer extractPartitionName(String fileName,PartitionerType partitioner){  if (partitioner == PartitionerType.MODULUS || partitioner == PartitionerType.CASCADING) {    if (!fileName.startsWith(Constants.FILE_PREFIX)) {      return null;    }    try {      return Integer.parseInt(fileName.substring(5,10));    } catch (    NumberFormatException e) {      return null;    }  }  return null;}  }
class C{  public static <T>T doPrivileged(PrivilegedAction<T> action){  return action.run();}  }
class C{  public void play(final String pathToSound){  Boolean isPlaying=soundsPlaying.get(pathToSound);  if (isPlaying == null || !isPlaying) {    soundsPlaying.put(pathToSound,true);    SourceDataLine auline=null;    AudioInputStream audioInputStream=null;    try {      File soundFile=new File(pathToSound);      audioInputStream=AudioSystem.getAudioInputStream(soundFile);      AudioFormat audioFormat=audioInputStream.getFormat();      DataLine.Info info=new DataLine.Info(SourceDataLine.class,audioFormat,audioFormat.getSampleSizeInBits());      boolean bIsSupportedDirectly=AudioSystem.isLineSupported(info);      if (!bIsSupportedDirectly) {        AudioFormat sourceFormat=audioFormat;        AudioFormat targetFormat=new AudioFormat(AudioFormat.Encoding.PCM_SIGNED,sourceFormat.getSampleRate(),16,sourceFormat.getChannels(),sourceFormat.getChannels() * 2,sourceFormat.getSampleRate(),false);        audioInputStream.close();        audioInputStream=AudioSystem.getAudioInputStream(targetFormat,audioInputStream);        audioFormat=audioInputStream.getFormat();      }      AudioFormat format=audioInputStream.getFormat();      auline=(SourceDataLine)AudioSystem.getLine(info);      auline.open(format);      auline.start();      int nBytesRead=0;      byte[] abData=new byte[524288];      try {        while (nBytesRead != -1) {          nBytesRead=audioInputStream.read(abData,0,abData.length);          if (nBytesRead >= 0) {            auline.write(abData,0,nBytesRead);          }        }      }  finally {        try {          auline.drain();        } catch (        Throwable t) {        }      }    } catch (    Throwable t) {      Raptor.getInstance().onError("Error playing sound " + pathToSound,t);    } finally {      try {        auline.close();      } catch (      Throwable t) {      }      try {        audioInputStream.close();      } catch (      Throwable t) {      }      soundsPlaying.put(pathToSound,false);    }  }}  }
class C{  @Override public void updateByte(String columnLabel,byte x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateByte(" + columnLabel + ", "+ x+ ");");    }    update(columnLabel,ValueByte.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  void init(boolean decrypting,String algorithm,byte[] key,byte[] iv) throws InvalidKeyException {  if ((key == null) || (iv == null) || (iv.length != blockSize)) {    throw new InvalidKeyException("Internal error");  }  this.iv=iv;  reset();  embeddedCipher.init(false,algorithm,key);}  }
class C{  public List<ShardRouting> shardsWithState(String index,ShardRoutingState... states){  List<ShardRouting> shards=new ArrayList<>();  for (  ShardRouting shardEntry : this) {    if (!shardEntry.index().equals(index)) {      continue;    }    for (    ShardRoutingState state : states) {      if (shardEntry.state() == state) {        shards.add(shardEntry);      }    }  }  return shards;}  }
class C{  public void savePoiTypesFromH2Geo(H2GeoDto h2GeoDto){  savePoiTypes(poiAssetLoader.loadPoiTypesFromH2GeoDto(h2GeoDto));}  }
class C{  public static Password readFromXML(Element el,String salt,boolean isDefault){  String prefix=isDefault ? "default-" : "";  String pw=el.getAttribute(prefix + "hspw");  if (!StringUtil.isEmpty(pw,true)) {    if (salt == null)     return null;    return new PasswordImpl(ORIGIN_HASHED_SALTED,pw,salt,HASHED_SALTED);  }  pw=el.getAttribute(prefix + "pw");  if (!StringUtil.isEmpty(pw,true)) {    return new PasswordImpl(ORIGIN_HASHED,pw,null,HASHED);  }  String pwEnc=el.getAttribute(prefix + "password");  if (!StringUtil.isEmpty(pwEnc,true)) {    String rawPassword=new BlowfishEasy("tpwisgh").decryptString(pwEnc);    return new PasswordImpl(ORIGIN_ENCRYPTED,rawPassword,salt);  }  return null;}  }
class C{  public void startPart(String contentType) throws IOException {  startPart(contentType,null);}  }
class C{  public JSONArray put(int index,long value) throws JSONException {  this.put(index,new Long(value));  return this;}  }
class C{  @Override public void onCreate(SQLiteDatabase db){  Log.d(LOGTAG,"Creating new SQL database");  db.execSQL("CREATE TABLE " + ROLL_TABLE + " ( "+ COLUMN_PRIMARY+ " INTEGER PRIMARY KEY,"+ ROLL_COLUMN_TIMESTAMP+ " DATETIME,"+ ROLL_COLUMN_FIRST_SERIAL+ " INTEGER,"+ ROLL_COLUMN_NUM_IMAGES+ " INTEGER,"+ ROLL_COLUMN_FORMAT+ " VARCHAR(8),"+ ROLL_COLUMN_CAPTURE_MODE+ " VARCHAR(16),"+ ROLL_COLUMN_CAPTURE_PARAMS+ " VARCHAR(128))");  db.execSQL("CREATE TABLE " + EXPORT_TABLE + " ( "+ COLUMN_PRIMARY+ " INTEGER PRIMARY KEY,"+ EXPORT_COLUMN_ROLL+ " INTEGER,"+ EXPORT_COLUMN_IMAGE+ " INTEGER)");  db.execSQL("CREATE TABLE " + SETTINGS_TABLE + " ( "+ COLUMN_PRIMARY+ " INTEGER PRIMARY KEY,"+ SETTINGS_COLUMN_KEY+ " VARCHAR(128),"+ SETTINGS_COLUMN_VALUE+ " TEXT)");  db.execSQL("INSERT INTO " + SETTINGS_TABLE + " ("+ SETTINGS_COLUMN_KEY+ ","+ SETTINGS_COLUMN_VALUE+ ") VALUES ('db_version','"+ DB_VERSION+ "')");}  }
class C{  public static String normalize(String name){  String kname;  if ((name.length() >= 5) && (name.substring(0,5).equalsIgnoreCase("FILE:"))) {    kname=name.substring(5);  } else   if ((name.length() >= 9) && (name.substring(0,9).equalsIgnoreCase("ANY:FILE:"))) {    kname=name.substring(9);  } else   if ((name.length() >= 7) && (name.substring(0,7).equalsIgnoreCase("SRVTAB:"))) {    kname=name.substring(7);  } else   kname=name;  return kname;}  }
class C{  public synchronized void finest(String sourceClass,String sourceMethod,String msg,Object[] params){  LogRecord record=new LogRecord(Level.FINEST,msg);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  record.setParameters(params);  log(record);}  }
class C{  public NavigationCommand(String command,Image icon){  super(command,icon);}  }
class C{  public StepBreakpointHitSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public final String readUTF() throws IOException {  return DataInputStream.readUTF(this);}  }
class C{  public static void checkArgument(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  @Override public final K acquire(){  K ctx=null;  Reference<K> ref=null;  while ((ctx == null) && ((ref=ctxQueue.poll()) != null)) {    ctx=ref.get();  }  if (ctx == null) {    ctx=newContext();    ctx.usage=USAGE_CLQ;  }  return ctx;}  }
class C{  public String authenticate(){  if (token == null) {    login=new Dialog();    boolean i=Dialog.isAutoAdjustDialogSize();    Dialog.setAutoAdjustDialogSize(false);    login.setLayout(new BorderLayout());    login.setScrollable(false);    Component html=createLoginComponent(null,null,null,null);    login.addComponent(BorderLayout.CENTER,html);    login.setScrollable(false);    login.setDialogUIID("Container");    login.setTransitionInAnimator(CommonTransitions.createSlide(CommonTransitions.SLIDE_VERTICAL,true,300));    login.setTransitionOutAnimator(CommonTransitions.createSlide(CommonTransitions.SLIDE_VERTICAL,false,300));    login.show(0,0,0,0,false,true);    Dialog.setAutoAdjustDialogSize(i);  }  return token;}  }
class C{  private ClassVertex addClassVertexForMissingClass(ClassDescriptor missingClassDescriptor,boolean isInterfaceEdge){  ClassVertex missingClassVertex=ClassVertex.createMissingClassVertex(missingClassDescriptor,isInterfaceEdge);  missingClassVertex.setFinished(true);  addVertexToGraph(missingClassDescriptor,missingClassVertex);  AnalysisContext.currentAnalysisContext();  AnalysisContext.reportMissingClass(missingClassDescriptor);  return missingClassVertex;}  }
class C{  public static boolean isNumber(String str){  if (StringUtils.isEmpty(str)) {    return false;  }  char[] chars=str.toCharArray();  int sz=chars.length;  boolean hasExp=false;  boolean hasDecPoint=false;  boolean allowSigns=false;  boolean foundDigit=false;  int start=(chars[0] == '-') ? 1 : 0;  if (sz > start + 1) {    if (chars[start] == '0' && chars[start + 1] == 'x') {      int i=start + 2;      if (i == sz) {        return false;      }      for (; i < chars.length; i++) {        if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {          return false;        }      }      return true;    }  }  sz--;  int i=start;  while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {    if (chars[i] >= '0' && chars[i] <= '9') {      foundDigit=true;      allowSigns=false;    } else     if (chars[i] == '.') {      if (hasDecPoint || hasExp) {        return false;      }      hasDecPoint=true;    } else     if (chars[i] == 'e' || chars[i] == 'E') {      if (hasExp) {        return false;      }      if (!foundDigit) {        return false;      }      hasExp=true;      allowSigns=true;    } else     if (chars[i] == '+' || chars[i] == '-') {      if (!allowSigns) {        return false;      }      allowSigns=false;      foundDigit=false;    } else {      return false;    }    i++;  }  if (i < chars.length) {    if (chars[i] >= '0' && chars[i] <= '9') {      return true;    }    if (chars[i] == 'e' || chars[i] == 'E') {      return false;    }    if (chars[i] == '.') {      if (hasDecPoint || hasExp) {        return false;      }      return foundDigit;    }    if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {      return foundDigit;    }    if (chars[i] == 'l' || chars[i] == 'L') {      return foundDigit && !hasExp;    }    return false;  }  return !allowSigns && foundDigit;}  }
class C{  public GraphNodeLatent(Node modelNode){  setModelNode(modelNode);  if (modelNode.getNodeType() != NodeType.LATENT) {    throw new IllegalArgumentException("GraphNodeLatent requires " + "a GraphNode of type NodeType.LATENT.");  }  setDisplayComp(new LatentDisplayComp(modelNode.getName()));}  }
class C{  public SystemPropertiesTableModel(){  columnNames=new String[2];  columnNames[0]=res.getString("SystemPropertiesTableModel.NameColumn");  columnNames[1]=res.getString("SystemPropertiesTableModel.ValueColumn");  data=new Object[0][0];}  }
class C{  public void addXSLAttribute(String name,final String value,final String uri){  if (m_elemContext.m_startTagOpen) {    final String patchedName=patchName(name);    final String localName=getLocalName(patchedName);    addAttributeAlways(uri,localName,patchedName,"CDATA",value,true);  }}  }
class C{  protected Paint parseColor(Properties props,String prefix,String prop,Paint dfault){  try {    return PropUtils.parseColorFromProperties(props,prefix + "." + prop,dfault);  } catch (  NumberFormatException exc) {    System.out.println("Color Error " + prefix + "."+ prop);  }  return dfault;}  }
class C{  public static void loadImageResourceIntoSizedView(final Picasso imageLoader,String imageSrc,final ImageView imageView,boolean crop,Callback callback){  final int imageWidthPx=imageView.getLayoutParams().width;  final int imageHeightPx=imageView.getLayoutParams().height;  String imageUrl=getSizedImageUrl(imageSrc,imageWidthPx,imageHeightPx);  RequestCreator c=imageLoader.load(imageUrl).resize(imageWidthPx,imageHeightPx);  if (crop) {    c=c.centerCrop();  } else {    c=c.centerInside();  }  c.into(imageView,callback);}  }
class C{  public boolean removeSpringConfig(SpringConfig springConfig){  if (springConfig == null) {    throw new IllegalArgumentException("springConfig is required");  }  return mSpringConfigMap.remove(springConfig) != null;}  }
class C{  protected synchronized void updateObjectInternal(int columnIndex,Object x,Integer targetType,int scaleOrLength) throws SQLException {  if (!this.onInsertRow) {    if (!this.doingUpdates) {      this.doingUpdates=true;      syncUpdate();    }    if (targetType == null) {      this.updater.setObject(columnIndex,x);    } else {      this.updater.setObject(columnIndex,x,targetType);    }  } else {    if (targetType == null) {      this.inserter.setObject(columnIndex,x);    } else {      this.inserter.setObject(columnIndex,x,targetType);    }    this.thisRow.setColumnValue(columnIndex - 1,this.inserter.getBytesRepresentation(columnIndex - 1));  }}  }
class C{  public static boolean isAnonymousClass(Class class_){  return getSimpleName(class_).length() == 0;}  }
class C{  public boolean equals(CronTrigger that){  if (that == null) {    return false;  }  boolean this_present_triggerId=true & this.isSetTriggerId();  boolean that_present_triggerId=true & that.isSetTriggerId();  if (this_present_triggerId || that_present_triggerId) {    if (!(this_present_triggerId && that_present_triggerId)) {      return false;    }    if (this.triggerId != that.triggerId) {      return false;    }  }  boolean this_present_triggerName=true & this.isSetTriggerName();  boolean that_present_triggerName=true & that.isSetTriggerName();  if (this_present_triggerName || that_present_triggerName) {    if (!(this_present_triggerName && that_present_triggerName)) {      return false;    }    if (!this.triggerName.equals(that.triggerName)) {      return false;    }  }  boolean this_present_createTime=true & this.isSetCreateTime();  boolean that_present_createTime=true & that.isSetCreateTime();  if (this_present_createTime || that_present_createTime) {    if (!(this_present_createTime && that_present_createTime)) {      return false;    }    if (this.createTime != that.createTime) {      return false;    }  }  boolean this_present_operatorId=true & this.isSetOperatorId();  boolean that_present_operatorId=true & that.isSetOperatorId();  if (this_present_operatorId || that_present_operatorId) {    if (!(this_present_operatorId && that_present_operatorId)) {      return false;    }    if (this.operatorId != that.operatorId) {      return false;    }  }  boolean this_present_triggerType=true & this.isSetTriggerType();  boolean that_present_triggerType=true & that.isSetTriggerType();  if (this_present_triggerType || that_present_triggerType) {    if (!(this_present_triggerType && that_present_triggerType)) {      return false;    }    if (!this.triggerType.equals(that.triggerType)) {      return false;    }  }  boolean this_present_cronExpression=true & this.isSetCronExpression();  boolean that_present_cronExpression=true & that.isSetCronExpression();  if (this_present_cronExpression || that_present_cronExpression) {    if (!(this_present_cronExpression && that_present_cronExpression)) {      return false;    }    if (!this.cronExpression.equals(that.cronExpression)) {      return false;    }  }  return true;}  }
class C{  public void stop(){  if (sLogger.isActivated()) {    sLogger.info("Stop address book monitoring");  }  mCheckHandler.removeMessages(CHECK_MESSAGE);  if (mObserverIsRegistered) {    mContactsContractCursor.unregisterContentObserver(mContactsContractObserver);    mObserverIsRegistered=false;    mContactsContractCursor.close();  }  mCleanupExecutor.shutdownNow();}  }
class C{  void init(){  absolute=true;  querySeparator=QUERY_SEPARATOR;  opaque=false;  port=-1;}  }
class C{  public BasicStroke(float width,int cap,int join){  this(width,cap,join,10.0f,null,0.0f);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TypeArgument.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_ARGUMENT___GET_TYPE_REF_AS_STRING:      return TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL___GET_TYPE_REF_AS_STRING;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_REF___GET_TYPE_REF_AS_STRING:  return TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL___GET_TYPE_REF_AS_STRING;case TypeRefsPackage.TYPE_REF___GET_TYPING_STRATEGY:return TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL___GET_TYPING_STRATEGY;case TypeRefsPackage.TYPE_REF___GET_STRUCTURAL_MEMBERS:return TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL___GET_STRUCTURAL_MEMBERS;case TypeRefsPackage.TYPE_REF___IS_USE_SITE_STRUCTURAL_TYPING:return TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL___IS_USE_SITE_STRUCTURAL_TYPING;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == ThisTypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.THIS_TYPE_REF___GET_TYPE_REF_AS_STRING:return TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL___GET_TYPE_REF_AS_STRING;case TypeRefsPackage.THIS_TYPE_REF___GET_TYPING_STRATEGY:return TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL___GET_TYPING_STRATEGY;case TypeRefsPackage.THIS_TYPE_REF___GET_STRUCTURAL_MEMBERS:return TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL___GET_STRUCTURAL_MEMBERS;case TypeRefsPackage.THIS_TYPE_REF___IS_USE_SITE_STRUCTURAL_TYPING:return TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL___IS_USE_SITE_STRUCTURAL_TYPING;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == StructuralTypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.STRUCTURAL_TYPE_REF___GET_TYPING_STRATEGY:return TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL___GET_TYPING_STRATEGY;case TypeRefsPackage.STRUCTURAL_TYPE_REF___SET_TYPING_STRATEGY__TYPINGSTRATEGY:return TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL___SET_TYPING_STRATEGY__TYPINGSTRATEGY;case TypeRefsPackage.STRUCTURAL_TYPE_REF___GET_STRUCTURAL_MEMBERS:return TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL___GET_STRUCTURAL_MEMBERS;case TypeRefsPackage.STRUCTURAL_TYPE_REF___HAS_POSTPONED_SUBSTITUTION_FOR__TYPEVARIABLE:return TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL___HAS_POSTPONED_SUBSTITUTION_FOR__TYPEVARIABLE;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public boolean isAmbiguousTriple(Node x,Node y,Node z){  return ambiguousTriples.contains(new Triple(x,y,z));}  }
class C{  private static int uariminNe(double value,double[] bv,int bvi[],BinaryOperator bOp) throws DMLRuntimeException {  int ixMin=1;  if (bv[0] != value)   ixMin=bvi[0] + 1;  return ixMin;}  }
class C{  public void openImageGallery(ActionListener response){  if (getActivity() == null) {    throw new RuntimeException("Cannot open image gallery in background mode");  }  if (!checkForPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE,"This is required to browse the photos")) {    return;  }  if (editInProgress()) {    stopEditing(true);  }  callback=new EventDispatcher();  callback.addListener(response);  Intent galleryIntent=new Intent(Intent.ACTION_PICK,android.provider.MediaStore.Images.Media.INTERNAL_CONTENT_URI);  this.getActivity().startActivityForResult(galleryIntent,OPEN_GALLERY);}  }
class C{  public DNetscapeComment(JDialog parent,byte[] value) throws IOException {  super(parent);  setTitle(res.getString("DNetscapeComment.Title"));  initComponents();  prepopulateWithValue(value);}  }
class C{  public static boolean isLog2ConsoleEnabled(){  return isLog2ConsoleEnabled;}  }
class C{  public Wallet(NetworkParameters params){  this.params=checkNotNull(params);  keychain=new ArrayList<ECKey>();  watchedScripts=Sets.newHashSet();  unspent=new HashMap<Sha256Hash,Transaction>();  spent=new HashMap<Sha256Hash,Transaction>();  pending=new HashMap<Sha256Hash,Transaction>();  dead=new HashMap<Sha256Hash,Transaction>();  transactions=new HashMap<Sha256Hash,Transaction>();  eventListeners=new CopyOnWriteArrayList<ListenerRegistration<WalletEventListener>>();  extensions=new HashMap<String,WalletExtension>();  if (keyCrypter != null) {    MultiBitWalletExtension multibitWalletExtension=new MultiBitWalletExtension();    extensions.put(multibitWalletExtension.getWalletExtensionID(),multibitWalletExtension);    setVersion(MultiBitWalletVersion.PROTOBUF_ENCRYPTED);  } else {    setVersion(MultiBitWalletVersion.PROTOBUF);  }  confidenceChanged=new HashMap<Transaction,TransactionConfidence.Listener.ChangeReason>();  createTransientState();}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  public static WorkspaceImpl createRuntime(String devMachineRam,String... machineRams) throws Exception {  final WorkspaceImpl workspace=createWorkspace(DEFAULT_USER_NAME,devMachineRam,machineRams);  final String envName=workspace.getConfig().getDefaultEnv();  EnvironmentImpl env=workspace.getConfig().getEnvironments().get(envName);  Map.Entry<String,ExtendedMachineImpl> devMachine=env.getMachines().entrySet().stream().filter(null).findAny().get();  final WorkspaceRuntimeImpl runtime=new WorkspaceRuntimeImpl(workspace.getConfig().getDefaultEnv(),null,env.getMachines().entrySet().stream().map(null).collect(toList()),createMachine(workspace.getId(),envName,devMachine.getKey(),true,devMachine.getValue().getAttributes().get("memoryLimitBytes")));  workspace.setStatus(RUNNING);  workspace.setRuntime(runtime);  return workspace;}  }
class C{  @Override protected void translateCore(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  String typeValue="";  if (instruction.getMnemonic().endsWith(".W")) {    typeValue=instruction.getMnemonic().length() == 9 ? instruction.getMnemonic().substring(5,7) : instruction.getMnemonic().substring(3,5);  } else {    typeValue=instruction.getMnemonic().length() == 7 ? instruction.getMnemonic().substring(5) : instruction.getMnemonic().substring(3);  }  IOperandTreeNode registerOperand1;  String wBit="1";  if (instruction.getOperands().get(0).getRootNode().getChildren().get(0).getChildren().size() == 1) {    wBit="2";    registerOperand1=instruction.getOperands().get(0).getRootNode().getChildren().get(0).getChildren().get(0);  } else {    registerOperand1=instruction.getOperands().get(0).getRootNode().getChildren().get(0);  }  final IOperandTreeNode rootNodeOfRegisterList=instruction.getOperands().get(1).getRootNode().getChildren().get(0);  final String registerNodeValue=(registerOperand1.getValue());  final int registerListLength=rootNodeOfRegisterList.getChildren().size();  final OperandSize bt=OperandSize.BYTE;  final OperandSize dw=OperandSize.DWORD;  long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  String tmpAddress=AddressingModeFourGenerator.generate(baseOffset,environment,instruction,instructions,typeValue,registerNodeValue,wBit,rootNodeOfRegisterList);  baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  for (int i=0; i < registerListLength; i++) {    final String nextAddress=environment.getNextVariableString();    instructions.add(ReilHelpers.createStm(baseOffset++,dw,(rootNodeOfRegisterList.getChildren().get(i).getValue()),dw,tmpAddress));    instructions.add(ReilHelpers.createAdd(baseOffset++,dw,tmpAddress,bt,String.valueOf(4L),dw,nextAddress));    tmpAddress=nextAddress;  }}  }
class C{  public static JComponent unwrap(Component component){  Object comp=component;  while (comp instanceof Component.Wrapper) {    comp=((Component.Wrapper)comp).getComponent();  }  return (JComponent)comp;}  }
class C{  @Override public void updateString(String columnLabel,String x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateString(" + quote(columnLabel) + ", "+ quote(x)+ ");");    }    update(columnLabel,x == null ? (Value)ValueNull.INSTANCE : ValueString.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  protected int exec(String callback){  int ret=0;  try {    boolean doLog=log.isDebugEnabled();    if (doLog) {      log.debug("About to exec " + cmd[0]);    }    final Process proc;    try {      proc=Runtime.getRuntime().exec(cmd,envp,dir);    } catch (    Error err) {      if (err.getMessage() != null && (err.getMessage().contains("posix_spawn") || err.getMessage().contains("UNIXProcess"))) {        Error newErr=new Error("Error forking command due to JVM locale bug (see https://issues.apache.org/jira/browse/SOLR-6387): " + err.getMessage());        newErr.setStackTrace(err.getStackTrace());        err=newErr;      }      throw err;    }    if (wait) {      try {        ret=proc.waitFor();      } catch (      InterruptedException e) {        SolrException.log(log,e);        ret=INVALID_PROCESS_RETURN_CODE;      }    }    if (wait && doLog) {      log.debug("Executable " + cmd[0] + " returned "+ ret);    }  } catch (  IOException e) {    SolrException.log(log,e);    ret=INVALID_PROCESS_RETURN_CODE;  }  return ret;}  }
class C{  private void addTo708WindowRect(int windowID,float x,float y,float w,float h){  if (windowID < 0 || windowID > 7)   return;  java.awt.geom.Rectangle2D.Float rect=cached708WindowRects.get(windowID);  java.awt.geom.Rectangle2D.Float newRect=new java.awt.geom.Rectangle2D.Float(x,y,w,h);  if (rect == null) {    cached708WindowRects.add(windowID,newRect);  } else {    rect.add(newRect);  }}  }
class C{  public int size(){  return st.size();}  }
class C{  public String dump(ASN1Primitive asn1Object) throws Asn1Exception, IOException {  try {    indentLevel++;    if (asn1Object instanceof DERBitString) {      return dumpBitString((DERBitString)asn1Object);    } else     if (asn1Object instanceof ASN1String) {      return dumpString((ASN1String)asn1Object);    } else     if (asn1Object instanceof ASN1UTCTime) {      return dumpUTCTime((ASN1UTCTime)asn1Object);    } else     if (asn1Object instanceof ASN1GeneralizedTime) {      return dumpGeneralizedTime((ASN1GeneralizedTime)asn1Object);    } else     if (asn1Object instanceof ASN1Sequence || asn1Object instanceof ASN1Set) {      return dumpSetOrSequence(asn1Object);    } else     if (asn1Object instanceof ASN1TaggedObject) {      return dumpTaggedObject((ASN1TaggedObject)asn1Object);    } else     if (asn1Object instanceof ASN1Boolean) {      return dumpBoolean((ASN1Boolean)asn1Object);    } else     if (asn1Object instanceof ASN1Enumerated) {      return dumpEnumerated((ASN1Enumerated)asn1Object);    } else     if (asn1Object instanceof ASN1Integer) {      return dumpInteger((ASN1Integer)asn1Object);    } else     if (asn1Object instanceof ASN1Null) {      return dumpNull((ASN1Null)asn1Object);    } else     if (asn1Object instanceof ASN1ObjectIdentifier) {      return dumpObjectIdentifier((ASN1ObjectIdentifier)asn1Object);    } else     if (asn1Object instanceof ASN1OctetString) {      return dumpOctetString((ASN1OctetString)asn1Object);    } else {      throw new Asn1Exception("Unknown ASN.1 object: " + asn1Object.toString());    }  }  finally {    if (true) {      indentLevel--;    }  }}  }
class C{  private void decryptBlock(byte[] src,int srcIndex,byte[] dst,int dstIndex){  int x2=BytesTo32Bits(src,srcIndex) ^ gSubKeys[OUTPUT_WHITEN];  int x3=BytesTo32Bits(src,srcIndex + 4) ^ gSubKeys[OUTPUT_WHITEN + 1];  int x0=BytesTo32Bits(src,srcIndex + 8) ^ gSubKeys[OUTPUT_WHITEN + 2];  int x1=BytesTo32Bits(src,srcIndex + 12) ^ gSubKeys[OUTPUT_WHITEN + 3];  int k=ROUND_SUBKEYS + 2 * ROUNDS - 1;  int t0, t1;  for (int r=0; r < ROUNDS; r+=2) {    t0=Fe32_0(x2);    t1=Fe32_3(x3);    x1^=t0 + 2 * t1 + gSubKeys[k--];    x0=(x0 << 1 | x0 >>> 31) ^ (t0 + t1 + gSubKeys[k--]);    x1=x1 >>> 1 | x1 << 31;    t0=Fe32_0(x0);    t1=Fe32_3(x1);    x3^=t0 + 2 * t1 + gSubKeys[k--];    x2=(x2 << 1 | x2 >>> 31) ^ (t0 + t1 + gSubKeys[k--]);    x3=x3 >>> 1 | x3 << 31;  }  Bits32ToBytes(x0 ^ gSubKeys[INPUT_WHITEN],dst,dstIndex);  Bits32ToBytes(x1 ^ gSubKeys[INPUT_WHITEN + 1],dst,dstIndex + 4);  Bits32ToBytes(x2 ^ gSubKeys[INPUT_WHITEN + 2],dst,dstIndex + 8);  Bits32ToBytes(x3 ^ gSubKeys[INPUT_WHITEN + 3],dst,dstIndex + 12);}  }
class C{  public static TrapCodeOperand DivByZero(){  return new TrapCodeOperand((byte)RuntimeEntrypoints.TRAP_DIVIDE_BY_ZERO);}  }
class C{  public void goForward(){  String uri=manager.getForward();  view.setDocument(uri);  updateButtons();}  }
class C{  public InvalidPhraseException(String message){  super(message);}  }
class C{  public boolean isShowGridX(){  return mShowGridX;}  }
class C{  public static void initFlags(final CFlags flags){  CommonFlagCategories.setCategories(flags);  flags.registerExtendedHelp();  flags.setDescription("Evaluates called variants for genotype agreement with a baseline variant set irrespective of representational differences. Outputs a weighted ROC file which can be viewed with rtg rocplot and VCF files containing false positives (called variants not matched in the baseline), false negatives (baseline variants not matched in the call set), and true positives (variants that match between the baseline and calls).");  CommonFlags.initOutputDirFlag(flags);  flags.registerRequired('b',BASELINE,File.class,"file","VCF file containing baseline variants").setCategory(INPUT_OUTPUT);  flags.registerRequired('c',CALLS,File.class,"file","VCF file containing called variants").setCategory(INPUT_OUTPUT);  flags.registerRequired('t',CommonFlags.TEMPLATE_FLAG,File.class,"SDF","SDF of the reference genome the variants are called against").setCategory(INPUT_OUTPUT);  flags.registerOptional(CommonFlags.RESTRICTION_FLAG,String.class,"string","if set, only read VCF records within the specified range. The format is one of <sequence_name>, <sequence_name>:start-end or <sequence_name>:start+length").setCategory(INPUT_OUTPUT);  flags.registerOptional(CommonFlags.BED_REGIONS_FLAG,File.class,"File","if set, only read VCF records that overlap the ranges contained in the specified BED file").setCategory(INPUT_OUTPUT);  flags.registerOptional('e',EVAL_REGIONS_FLAG,File.class,"File","if set, evaluate within regions contained in the supplied BED file, allowing transborder matches. To be used for truth-set high-confidence regions or other regions of interest where region boundary effects should be minimized").setCategory(INPUT_OUTPUT);  flags.registerOptional(SAMPLE,String.class,"STRING","the name of the sample to select. Use <baseline_sample>,<calls_sample> to select different sample names for baseline and calls. (Required when using multi-sample VCF files)").setCategory(FILTERING);  flags.registerOptional(ALL_RECORDS,"use all records regardless of FILTER status (Default is to only process records where FILTER is \".\" or \"PASS\")").setCategory(FILTERING);  flags.registerOptional(SQUASH_PLOIDY,"treat heterozygous genotypes as homozygous ALT in both baseline and calls, to allow matches that ignore zygosity differences").setCategory(FILTERING);  flags.registerOptional(REF_OVERLAP,"allow alleles to overlap where bases of either allele are same-as-ref (Default is to only allow VCF anchor base overlap)").setCategory(FILTERING);  flags.registerOptional('f',SORT_FIELD,String.class,"STRING","the name of the VCF FORMAT field to use as the ROC score. Also valid are \"QUAL\" or \"INFO.<name>\" to select the named VCF INFO field",VcfUtils.FORMAT_GENOTYPE_QUALITY).setCategory(REPORTING);  flags.registerOptional('O',SORT_ORDER,RocSortOrder.class,"STRING","the order in which to sort the ROC scores so that \"good\" scores come before \"bad\" scores",RocSortOrder.DESCENDING).setCategory(REPORTING);  final Flag modeFlag=flags.registerOptional('m',OUTPUT_MODE,String.class,"STRING","output reporting mode",VcfEvalTask.MODE_SPLIT).setCategory(REPORTING);  modeFlag.setParameterRange(new String[]{VcfEvalTask.MODE_SPLIT,VcfEvalTask.MODE_ANNOTATE,VcfEvalTask.MODE_COMBINE,VcfEvalTask.MODE_GA4GH,VcfEvalTask.MODE_ROC_ONLY});  flags.registerOptional('R',ROC_SUBSET,RocFilter.class,"FILTER","output ROC files corresponding to call subsets").setMaxCount(Integer.MAX_VALUE).enableCsv().setCategory(REPORTING);  flags.registerOptional(MAX_LENGTH,Integer.class,"INT","don't attempt to evaluate variant alternatives longer than this",1000).setCategory(FILTERING);  flags.registerOptional(TWO_PASS,Boolean.class,"BOOL","run diploid matching followed by squash-ploidy matching on FP/FN to find common alleles (Default is automatically set by output mode)").setCategory(FILTERING);  flags.registerOptional(RTG_STATS,"output RTG specific files and statistics").setCategory(REPORTING);  flags.registerOptional(SLOPE_FILES,"output files for ROC slope analysis").setCategory(REPORTING);  flags.registerOptional(OBEY_PHASE,String.class,"STRING","if set, obey global phasing if present in the input VCFs. Use <baseline_phase>,<calls_phase> to select independently for baseline and calls. (Values must be one of [true, false, and invert])","false").setCategory(FILTERING);  CommonFlags.initThreadsFlag(flags);  CommonFlags.initNoGzip(flags);  flags.setValidator(new VcfEvalFlagsValidator());}  }
class C{  public final ObjectProperty<Control> toggleNodeProperty(){  return this.toggleNode;}  }
class C{  NioDatagramSession(IoService service,DatagramChannel channel,IoProcessor<NioSession> processor){  this(service,channel,processor,channel.socket().getRemoteSocketAddress());}  }
class C{  private void addHyperlinkToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,true);}  }
class C{  private static int firstNonWhitespaceForward(IDocument document,int position,String partitioning,int bound){  Assert.isTrue(position >= 0);  Assert.isTrue(bound <= document.getLength());  try {    while (position < bound) {      char ch=document.getChar(position);      if (!Character.isWhitespace(ch) && isDefaultPartition(document,position,partitioning))       return position;      position++;    }  } catch (  BadLocationException e) {  }  return -1;}  }
class C{  public static boolean isVersionSupported(final String protocolVersion){  return Arrays.asList(SUPPORTED_DDP_VERSIONS).contains(protocolVersion);}  }
class C{  private void initialize(URI p_base,String p_uriSpec) throws MalformedURIException {  if (p_base == null && (p_uriSpec == null || p_uriSpec.trim().length() == 0)) {    throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_CANNOT_INIT_URI_EMPTY_PARMS,null));  }  if (p_uriSpec == null || p_uriSpec.trim().length() == 0) {    initialize(p_base);    return;  }  String uriSpec=p_uriSpec.trim();  int uriSpecLen=uriSpec.length();  int index=0;  int colonIndex=uriSpec.indexOf(':');  if (colonIndex < 0) {    if (p_base == null) {      throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_NO_SCHEME_IN_URI,new Object[]{uriSpec}));    }  } else {    initializeScheme(uriSpec);    uriSpec=uriSpec.substring(colonIndex + 1);    uriSpecLen=uriSpec.length();  }  if (uriSpec.startsWith("//")) {    index+=2;    int startPos=index;    char testChar='\0';    while (index < uriSpecLen) {      testChar=uriSpec.charAt(index);      if (testChar == '/' || testChar == '?' || testChar == '#') {        break;      }      index++;    }    if (index > startPos) {      initializeAuthority(uriSpec.substring(startPos,index));    } else {      m_host="";    }  }  initializePath(uriSpec.substring(index));  if (p_base != null) {    if (m_path.length() == 0 && m_scheme == null && m_host == null) {      m_scheme=p_base.getScheme();      m_userinfo=p_base.getUserinfo();      m_host=p_base.getHost();      m_port=p_base.getPort();      m_path=p_base.getPath();      if (m_queryString == null) {        m_queryString=p_base.getQueryString();      }      return;    }    if (m_scheme == null) {      m_scheme=p_base.getScheme();    }    if (m_host == null) {      m_userinfo=p_base.getUserinfo();      m_host=p_base.getHost();      m_port=p_base.getPort();    } else {      return;    }    if (m_path.length() > 0 && m_path.startsWith("/")) {      return;    }    String path=new String();    String basePath=p_base.getPath();    if (basePath != null) {      int lastSlash=basePath.lastIndexOf('/');      if (lastSlash != -1) {        path=basePath.substring(0,lastSlash + 1);      }    }    path=path.concat(m_path);    index=-1;    while ((index=path.indexOf("/./")) != -1) {      path=path.substring(0,index + 1).concat(path.substring(index + 3));    }    if (path.endsWith("/.")) {      path=path.substring(0,path.length() - 1);    }    index=-1;    int segIndex=-1;    String tempString=null;    while ((index=path.indexOf("/../")) > 0) {      tempString=path.substring(0,path.indexOf("/../"));      segIndex=tempString.lastIndexOf('/');      if (segIndex != -1) {        if (!tempString.substring(segIndex++).equals("..")) {          path=path.substring(0,segIndex).concat(path.substring(index + 4));        }      }    }    if (path.endsWith("/..")) {      tempString=path.substring(0,path.length() - 3);      segIndex=tempString.lastIndexOf('/');      if (segIndex != -1) {        path=path.substring(0,segIndex + 1);      }    }    m_path=path;  }}  }
class C{  public BaseParams(Map<String,String> source){  if (source != null) {    for (    Map.Entry<String,String> entry : source.entrySet()) {      put(entry.getKey(),entry.getValue());    }  }}  }
class C{  @Inject public ShowProjectGitReadOnlyUrlPresenter(ShowProjectGitReadOnlyUrlView view,GitServiceClient service,AppContext appContext,GitLocalizationConstant constant,GitOutputPartPresenter console,NotificationManager notificationManager,DtoUnmarshallerFactory dtoUnmarshallerFactory){  this.view=view;  this.console=console;  this.view.setDelegate(this);  this.service=service;  this.appContext=appContext;  this.constant=constant;  this.notificationManager=notificationManager;  this.dtoUnmarshallerFactory=dtoUnmarshallerFactory;}  }
class C{  @Override public Button decorate(final Button button,final String style,final boolean setStyle,final Resource icon){  if (null != style && setStyle) {    button.addStyleName(style);  }  button.addStyleName(ValoTheme.BUTTON_BORDERLESS);  if (null != icon) {    button.addStyleName(ValoTheme.BUTTON_ICON_ONLY);    button.addStyleName("button-no-border");    button.setIcon(icon);  }  return button;}  }
class C{  public boolean isShowDescription(){  return this.showDescription;}  }
class C{  public boolean hasChildren(){  return (getChildCount() != 0);}  }
class C{  public static boolean isDeterministicSlow(Automaton a){  Transition t=new Transition();  int numStates=a.getNumStates();  for (int s=0; s < numStates; s++) {    int count=a.initTransition(s,t);    int lastMax=-1;    for (int i=0; i < count; i++) {      a.getNextTransition(t);      if (t.min <= lastMax) {        assert a.isDeterministic() == false;        return false;      }      lastMax=t.max;    }  }  assert a.isDeterministic() == true;  return true;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:22.757 -0500",hash_original_method="D051F7BD1248EC7F2DE7541E7D2B2D2A",hash_generated_method="F9EDD9A9F559A29A07E24C0A7E7E56D4") public void put(int key,boolean value){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (mSize >= mKeys.length) {      int n=ArrayUtils.idealIntArraySize(mSize + 1);      int[] nkeys=new int[n];      boolean[] nvalues=new boolean[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  public static int computeLazyFieldSize(final int fieldNumber,final LazyField value){  return computeTagSize(fieldNumber) + computeLazyFieldSizeNoTag(value);}  }
class C{  private void respondWithNotGrantor(Iterator requests){  while (requests.hasNext()) {    final DLockRequestMessage request=(DLockRequestMessage)requests.next();    try {      request.respondWithNotGrantor();    }  finally {    }  }}  }
class C{  public boolean isCallerValid(Context context,int authRequirements){  return isCallerValid(context,authRequirements,"");}  }
class C{  private void resetClientDimensions(){  j2DClient clientFrame=j2DClient.get();  Frame mainFrame=clientFrame.getMainFrame();  int frameState=mainFrame.getExtendedState();  if (frameState != JFrame.MAXIMIZED_BOTH) {    mainFrame.setSize(clientFrame.getFrameDefaultSize());  }}  }
class C{  public void endElement(String namespaceURI,String localName,String qName) throws SAXException {  super.endElement(namespaceURI,localName,qName);  xmlBaseHandler.endElement();  if (foreignDepth > 0) {    foreignDepth--;    return;  }  if (ceh.getHadErrorOrFatalError())   return;  nvdlStack.pop();  if (localName.equals("validate"))   finishValidate(); else   if (localName.equals("mode")) {    String parent=(String)nvdlStack.peek();    if ("rules".equals(parent))     finishMode(); else     if ("mode".equals(parent))     finishIncludedMode(); else     finishNestedMode();  }}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public void deleteAllUploadedContacts(final ContactsCallback<Response> callback){  digitsEventCollector.startDeleteContacts(new ContactsDeletionStartDetails());  getDigitsApiService().deleteAll("",new DeleteContactsCallbackWrapper(callback,digitsEventCollector));}  }
class C{  public void recordType(CtClass t){  gen.recordType(t);}  }
class C{  public static void loadConfigFile(File file) throws IOException {  config.clear();  config.putAll(loadPropertiesFromFile(file));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:01.399 -0500",hash_original_method="DEB2FF4C98D7FB31135AB87CA522046D",hash_generated_method="96E38A71C3F4C56BF71911413EC2F281") private int nativeGetDeliveryMethod(){  return getTaintInt();}  }
class C{  private boolean isMethodApi(Method method){  if (_type == _api) {    return true;  }  for (  Method methodApi : _api.getMethods()) {    if (methodApi.getName().equals(method.getName())) {      return true;    }  }  return false;}  }
class C{  protected final Operator SSE2_MOVE(Operand o){  return o.isFloat() ? IA32_MOVSS : IA32_MOVSD;}  }
class C{  protected void continueOutputProcessingJoin(boolean doOutput,boolean forceUpdate){  if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {    log.debug(".continueOutputProcessingJoin");  }  witnessedFirst=false;}  }
class C{  public List<ResolvedMigration> resolveMigrations(){  if (availableMigrations == null) {    availableMigrations=doFindAvailableMigrations();  }  return availableMigrations;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:59.591 -0500",hash_original_method="C1BB4F182A4DB12C2F5D6DBB3B298E48",hash_generated_method="016C7D9E77FD36417D09AB3DDBDC580F") public TransformerConfigurationException(String message,SourceLocator locator,Throwable e){  super(message,locator,e);}  }
class C{  public boolean isCalculated(){  return m_calculated;}  }
class C{  public HGPlainLink(HGHandle... outgoingSet){  if (outgoingSet == null)   throw new HGException("Attempt to construct a link with a null outgoing set. If the link has arity 0, please constructor with a 0 length array of atoms."); else {    this.outgoingSet=outgoingSet;  }}  }
class C{  int stackMapFrames(int pos,int nth) throws BadBytecode {  int type=info[pos] & 0xff;  if (type < 64) {    sameFrame(pos,type);    pos++;  } else   if (type < 128)   pos=sameLocals(pos,type); else   if (type < 247)   throw new BadBytecode("bad frame_type in StackMapTable"); else   if (type == 247)   pos=sameLocals(pos,type); else   if (type < 251) {    int offset=ByteArray.readU16bit(info,pos + 1);    chopFrame(pos,offset,251 - type);    pos+=3;  } else   if (type == 251) {    int offset=ByteArray.readU16bit(info,pos + 1);    sameFrame(pos,offset);    pos+=3;  } else   if (type < 255)   pos=appendFrame(pos,type); else   pos=fullFrame(pos);  return pos;}  }
class C{  public void persistConnection(Connection connection) throws PersistenceException {  MqttConnectOptions conOpts=connection.getConnectionOptions();  MqttMessage lastWill=conOpts.getWillMessage();  SQLiteDatabase db=getWritableDatabase();  ContentValues values=new ContentValues();  values.put(COLUMN_HOST,connection.getHostName());  values.put(COLUMN_port,connection.getPort());  values.put(COLUMN_client_ID,connection.getId());  values.put(COLUMN_ssl,connection.isSSL());  values.put(COLUMN_KEEP_ALIVE,conOpts.getKeepAliveInterval());  values.put(COLUMN_TIME_OUT,conOpts.getConnectionTimeout());  values.put(COLUMN_USER_NAME,conOpts.getUserName());  values.put(COLUMN_TOPIC,conOpts.getWillDestination());  char[] password=conOpts.getPassword();  values.put(COLUMN_CLEAN_SESSION,conOpts.isCleanSession() ? 1 : 0);  values.put(COLUMN_PASSWORD,password != null ? String.valueOf(password) : null);  values.put(COLUMN_MESSAGE,lastWill != null ? new String(lastWill.getPayload()) : null);  values.put(COLUMN_QOS,lastWill != null ? lastWill.getQos() : 0);  if (lastWill == null) {    values.put(COLUMN_RETAINED,0);  } else {    values.put(COLUMN_RETAINED,lastWill.isRetained() ? 1 : 0);  }  long newRowId=db.insert(TABLE_CONNECTIONS,null,values);  db.close();  if (newRowId == -1) {    throw new PersistenceException("Failed to persist connection: " + connection.handle());  } else {    connection.assignPersistenceId(newRowId);  }}  }
class C{  public static String failureToString(Failure failure){  StringBuilder sb=new StringBuilder();  Throwable exception=failure.getException();  if (exception instanceof AssertionError) {    if (exception.getMessage() == null)     sb.append("Assertion failed"); else {      sb.append(String.format("%s%n",exception.getMessage()));      if (exception.getMessage().startsWith("Expected exception:")) {        return sb.toString();      }    }  } else {    if (exception.getCause() != null) {      exception=exception.getCause();    }    sb.append(String.format("    %s%n",exception));  }  for (  StackTraceElement frame : exception.getStackTrace()) {    if (frame.getClassName().startsWith("org.junit."))     continue;    sb.append(printPosition(frame));    if (isStoppingFrame(frame))     break;  }  String noTrailingWhitespace=sb.toString().replaceFirst("\\s+$","");  return noTrailingWhitespace;}  }
class C{  public Optional<Dimension2D> calculateObjectSize(double realWidth,double realHeight,double desiredDistance){  if (!isInitialized()) {    logger.error("projection manager has unknowns projectionWidth = {}, projectionHeight = {}, " + "shooterDistance = {}, pxPerMMhigh = {}",projectionWidth,projectionHeight,shooterDistance,pxPerMMhigh);    return Optional.empty();  }  if (desiredDistance == 0) {    throw new IllegalArgumentException("desiredDistance cannot be 0");  }  final double distRatio=shooterDistance / desiredDistance;  final double adjWidthmm=realWidth * distRatio;  final double adjHeightmm=realHeight * distRatio;  final double adjWidthpx=adjWidthmm * pxPerMMwide;  final double adjHeightpx=adjHeightmm * pxPerMMhigh;  if (logger.isTraceEnabled()) {    logger.trace("real w {} h {} d {}",realWidth,realHeight,desiredDistance);    logger.trace("sD {} dR {} - adjmm {} {} adjpx {} {}",shooterDistance,distRatio,adjWidthmm,adjHeightmm,adjWidthpx,adjHeightpx);  }  return Optional.of(new Dimension2D(adjWidthpx,adjHeightpx));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:19.673 -0500",hash_original_method="36DF2A9A4D9117D0F00790A34A3AF373",hash_generated_method="62E2A730F9165FAE66790E3671D1E968") public boolean isActive(){  checkFocus();synchronized (mH) {    return mServedView != null && mCurrentTextBoxAttribute != null;  }}  }
class C{  @Override public void decorate(final Object element,final IDecoration decoration){  tryHookListeners();  if (element == null || !(element instanceof IResource)) {    return;  }  final IResource resource=(IResource)element;  if (resource.getProject() == null || resource.getProject().isOpen() == false) {    return;  }  if (!TeamUtils.isConfiguredWith(resource,TFSRepositoryProvider.PROVIDER_ID)) {    return;  }  if (eclipseIgnoreFilter.filter(resource).isReject()) {    if (TFSCommonUIClientPlugin.getDefault().getPreferenceStore().getBoolean(UIPreferenceConstants.LABEL_DECORATION_SHOW_IGNORED_STATUS)) {      decoration.addSuffix(Messages.getString("TFSLabelDecorator.IgnoredDecorationSuffix"));    }    return;  }  final TFSRepositoryProvider repositoryProvider=(TFSRepositoryProvider)TeamUtils.getRepositoryProvider(resource);  final TFSRepository repository=repositoryProvider.getRepository();  if (repository != null) {    addRepositoryListener(repository);  }  final String resourcePath=Resources.getLocation(resource,LocationUnavailablePolicy.IGNORE_RESOURCE);  final ResourceDataManager resourceDataManager=TFSEclipseClientPlugin.getDefault().getResourceDataManager();  final ResourceData resourceData=resourceDataManager.getResourceData(resource);  if (PluginResourceFilters.TPIGNORE_FILTER.filter(resource).isReject() || PluginResourceFilters.TFS_IGNORE_FILTER.filter(resource).isReject()) {    if (TFSCommonUIClientPlugin.getDefault().getPreferenceStore().getBoolean(UIPreferenceConstants.LABEL_DECORATION_SHOW_IGNORED_STATUS)) {      decoration.addSuffix(Messages.getString("TFSLabelDecorator.IgnoredDecorationSuffix"));    }    if (resourceData != null) {      decoration.addOverlay(imageHelper.getImageDescriptor(IGNORED_ICON));    }    return;  }  if (repository == null) {    decorateFromFilesystem(resource,decoration,repository);    return;  }  decorateFromPendingChanges(resource,decoration,repository,resourcePath);  resource.getProject().getLocation().toOSString();  if (resourceData != null) {    decorateFromResourceData(resource,decoration,resourceData);  } else   if (!resourceDataManager.hasCompletedRefresh(resource.getProject())) {    decorateFromFilesystem(resource,decoration,repository);  } else   if (resource instanceof IProject) {    decoration.addOverlay(imageHelper.getImageDescriptor(TFS_ICON));  }}  }
class C{  public Set<String> addSpriteFrames(String plist){  String texturePath=null;  int i=plist.lastIndexOf('.');  if (i > 0 && i <= plist.length() - 2)   texturePath=plist.substring(0,i) + ".png";  CCTexture2D texture=CCTextureCache.sharedTextureCache().addImage(texturePath);  return addSpriteFrames(plist,texture);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/detach") public TaskList detachFullCopy(@PathParam("id") URI fullCopyURI) throws InternalException {  Volume fullCopyVolume=queryFullCopy(fullCopyURI);  return getFullCopyManager().detachFullCopy(fullCopyVolume.getAssociatedSourceVolume(),fullCopyURI);}  }
class C{  @Nullable public Object firstMethodValue(Object o) throws IgniteCheckedException {  assert o != null;  Method m=firstMethod(o.getClass());  if (m != null) {    try {      return m.invoke(o);    } catch (    IllegalAccessException|InvocationTargetException e) {      throw new IgniteCheckedException("Failed to invoke method for object [mtd=" + m + ", obj="+ o+ ']',e);    }  }  return null;}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  MessageResources rsc=(MessageResources)super.getServlet().getServletContext().getAttribute(Globals.MESSAGES_KEY);  if (limit < 0) {    errors.add("limit",new ActionMessage("errors.integerGtEq","Limit","0"));  }  String lblMax="Limit";  if (request.getParameter("varLimits") != null) {    lblMax="Max limit";  }  if (op.equals(rsc.getMessage("button.add"))) {    if (itype == null || itype.trim().length() == 0 || itype.equals(Constants.BLANK_OPTION_VALUE)) {      errors.add("itype",new ActionMessage("errors.required","Instructional Type"));    }  }  if (op.equals(MSG.actionSaveConfiguration()) || op.equals(MSG.actionUpdateConfiguration())) {    HttpSession webSession=request.getSession();    Vector sp=(Vector)webSession.getAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME);    InstructionalOffering io=new InstructionalOfferingDAO().get(new Long(this.getInstrOfferingId()));    if (io.existsConfig(this.getName(),this.getConfigId())) {      errors.add("subparts",new ActionMessage("errors.generic","A configuration with this name already exists in this offering. Use a unique name"));    }    for (int i=0; i < sp.size(); i++) {      SimpleItypeConfig sic=(SimpleItypeConfig)sp.elementAt(i);      if (!this.getUnlimited().booleanValue() && ApplicationProperty.ConfigEditCheckLimits.isTrue()) {        int numClasses=sic.getNumClasses();        int maxLimitPerClass=sic.getMaxLimitPerClass();        if (numClasses == 1 && maxLimitPerClass != this.limit) {          sic.setHasError(true);          errors.add("subparts",new ActionMessage("errors.equal",lblMax + " per class for <u>" + sic.getItype().getDesc()+ "</u>","Configuration limit of " + this.limit));        }        if (numClasses > 1 && (maxLimitPerClass * numClasses) < this.limit) {          sic.setHasError(true);          errors.add("subparts",new ActionMessage("errors.integerGtEq","Sum of class limits <u>" + sic.getItype().getDesc() + "</u>","Configuration limit of " + this.limit));        }      }      checkInputfields(request,errors,sic,lblMax,this.getUnlimited().booleanValue());      short errCode=checkChildSubpart(request,errors,sic,lblMax,this.getUnlimited().booleanValue());      if (errCode != NO_ERR) {        String errM="Subparts that are grouped under <u>" + sic.getItype().getDesc() + "</u> must <br>";        if (errCode == ERR_NC)         errM+="&nbsp; &nbsp; &nbsp; have number of classes that is a multiple of " + sic.getNumClasses() + ".";        if (errCode == ERR_CL)         errM+="&nbsp; &nbsp; &nbsp; have a " + lblMax.toLowerCase() + " per class <= "+ lblMax.toLowerCase()+ " per class of "+ sic.getMaxLimitPerClass()+ ".";        if (errCode == ERR_LS)         errM+="&nbsp; &nbsp; &nbsp; not accomodate lesser number of students.";        errors.add("subparts",new ActionMessage("errors.generic",errM));      }    }  }  return errors;}  }
class C{  private void incorporateLine(CharSequence ln){  line=Parsing.prepareLine(ln);  index=0;  column=0;  columnIsInTab=false;  int matches=1;  for (  BlockParser blockParser : activeBlockParsers.subList(1,activeBlockParsers.size())) {    findNextNonSpace();    BlockContinue result=blockParser.tryContinue(this);    if (result instanceof BlockContinueImpl) {      BlockContinueImpl blockContinue=(BlockContinueImpl)result;      if (blockContinue.isFinalize()) {        finalize(blockParser);        return;      } else {        if (blockContinue.getNewIndex() != -1) {          setNewIndex(blockContinue.getNewIndex());        } else         if (blockContinue.getNewColumn() != -1) {          setNewColumn(blockContinue.getNewColumn());        }        matches++;      }    } else {      break;    }  }  List<BlockParser> unmatchedBlockParsers=new ArrayList<>(activeBlockParsers.subList(matches,activeBlockParsers.size()));  BlockParser lastMatchedBlockParser=activeBlockParsers.get(matches - 1);  BlockParser blockParser=lastMatchedBlockParser;  boolean allClosed=unmatchedBlockParsers.isEmpty();  boolean tryBlockStarts=blockParser.getBlock() instanceof Paragraph || blockParser.isContainer();  while (tryBlockStarts) {    findNextNonSpace();    if (isBlank() || (indent < Parsing.CODE_BLOCK_INDENT && Parsing.isLetter(line,nextNonSpace))) {      setNewIndex(nextNonSpace);      break;    }    BlockStartImpl blockStart=findBlockStart(blockParser);    if (blockStart == null) {      setNewIndex(nextNonSpace);      break;    }    if (!allClosed) {      finalizeBlocks(unmatchedBlockParsers);      allClosed=true;    }    if (blockStart.getNewIndex() != -1) {      setNewIndex(blockStart.getNewIndex());    } else     if (blockStart.getNewColumn() != -1) {      setNewColumn(blockStart.getNewColumn());    }    if (blockStart.isReplaceActiveBlockParser()) {      removeActiveBlockParser();    }    for (    BlockParser newBlockParser : blockStart.getBlockParsers()) {      blockParser=addChild(newBlockParser);      tryBlockStarts=newBlockParser.isContainer();    }  }  if (!allClosed && !isBlank() && getActiveBlockParser() instanceof ParagraphParser) {    addLine();  } else {    if (!allClosed) {      finalizeBlocks(unmatchedBlockParsers);    }    propagateLastLineBlank(blockParser,lastMatchedBlockParser);    if (!blockParser.isContainer()) {      addLine();    } else     if (!isBlank()) {      addChild(new ParagraphParser());      addLine();    }  }}  }
class C{  void sendRawLine(String line){  OutputThread.sendRawLine(_bot,_bwriter,line);}  }
class C{  public static boolean unprotect(Address start,int size){  Clock.stop();  assert start.toWord().and(Word.fromIntSignExtend(~PAGE_MASK)).EQ(Word.zero());  Trace.trace(Item.MEMORY,"unprotect(%s,%d)\n",start.toString(),size);  Clock.start();  Address last=start.plus(size);  for (Address p=start; p.LT(last); p=p.plus(BYTES_IN_PAGE)) {    pageTable.setReadable(p);    Clock.tick();  }  return true;}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  out.writeInt(this.parent);  out.writeUTF(this.componentType);  if (this.id != null) {    out.writeUTF(this.id);  } else {    out.writeUTF(NULL_ID);  }}  }
class C{  public static void execute(Connection con,ExecutablePool pool,String region,EventID eventId,Object callbackArg){  AbstractOp op=new ClearOpImpl(region,eventId,callbackArg);  pool.executeOn(con,op);}  }
class C{  public void addRow(String... text){  if (text.length != mWidths.length) {    throw new IllegalArgumentException("Expected " + mWidths.length + " columns, got "+ text.length);  }  for (int i=0; i < text.length; i++) {    if (text[i].length() > mWidths[i]) {      System.err.println("Arrays.toString(mWidths) = " + Arrays.toString(mWidths));      System.err.println("Arrays.toString(text) = " + Arrays.toString(text));      throw new IllegalArgumentException("text too wide, expected: " + mWidths[i] + " got: "+ text[i].length());    }    final String formatString="|" + widthString(mSpacing) + widthString(mWidths[i])+ widthString(mSpacing);    mTable.append(String.format(formatString,"",text[i],""));  }  mTable.append("|").append(StringUtils.LS);  addSeparator();}  }
class C{  public static void dumpFeaturesLabeledData(String testDatapath,String outDatapath) throws Exception {  FeaturesLevel1SharedWithLevel2 features1=new FeaturesLevel1SharedWithLevel2();  FeaturesLevel2 features2=new FeaturesLevel2();  NETaggerLevel1 taggerLevel1=new NETaggerLevel1(ParametersForLbjCode.currentParameters.pathToModelFile + ".level1",ParametersForLbjCode.currentParameters.pathToModelFile + ".level1.lex");  NETaggerLevel2 taggerLevel2=new NETaggerLevel2(ParametersForLbjCode.currentParameters.pathToModelFile + ".level2",ParametersForLbjCode.currentParameters.pathToModelFile + ".level2.lex");  File f=new File(testDatapath);  Vector<String> inFiles=new Vector<>();  Vector<String> outFiles=new Vector<>();  if (f.isDirectory()) {    String[] files=f.list();    for (    String file : files)     if (!file.startsWith(".")) {      inFiles.addElement(testDatapath + "/" + file);      outFiles.addElement(outDatapath + "/" + file);    }  } else {    inFiles.addElement(testDatapath);    outFiles.addElement(outDatapath);  }  for (int fileId=0; fileId < inFiles.size(); fileId++) {    Data testData=new Data(inFiles.elementAt(fileId),inFiles.elementAt(fileId),"-c",new String[]{},new String[]{});    ExpressiveFeaturesAnnotator.annotate(testData);    Decoder.annotateDataBIO(testData,taggerLevel1,taggerLevel2);    OutFile out=new OutFile(outFiles.elementAt(fileId));    for (int docid=0; docid < testData.documents.size(); docid++) {      ArrayList<LinkedVector> sentences=testData.documents.get(docid).sentences;      for (      LinkedVector sentence : sentences) {        for (int j=0; j < sentence.size(); j++) {          NEWord w=(NEWord)sentence.get(j);          out.print(w.neLabel + "\t" + w.form+ "\t");          FeatureVector fv1=features1.classify(w);          FeatureVector fv2=features2.classify(w);          for (int k=0; k < fv1.size(); k++) {            String s=fv1.getFeature(k).toString();            out.print(" " + s.substring(s.indexOf(':') + 1,s.length()));          }          for (int k=0; k < fv2.size(); k++) {            String s=fv2.getFeature(k).toString();            out.print(" " + s.substring(s.indexOf(':') + 1,s.length()));          }          out.println("");        }        out.println("");      }    }    out.close();  }}  }
class C{  public static ClientBuilderForConnector newClientBuilderForConnector(){  return new ClientBuilderForConnector();}  }
class C{  public static PriorExpression prior(int index,String property){  return new PriorExpression(index,property);}  }
class C{  public static void main(String... args) throws Exception {  new TestScalability().test();}  }
class C{  @Override protected void sendFunctionGroup3(){  XNetMessage msg=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),9,f9);  queueMessage(msg,THROTTLEFUNCSENT);  XNetMessage msg1=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),10,f10);  queueMessage(msg1,THROTTLEFUNCSENT);  XNetMessage msg2=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),11,f11);  queueMessage(msg2,THROTTLEFUNCSENT);  XNetMessage msg3=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),12,f12);  queueMessage(msg3,THROTTLEFUNCSENT);}  }
class C{  public static RowLimitClause create(int numRows){  return new RowLimitClause(numRows,null,null,null);}  }
class C{  public static Distribution guessKn(DataSet d){  return new UniformDiscrete(40,Math.max(d.getSampleSize() / 5,50));}  }
class C{  public int priority(){  return priority;}  }
class C{  public boolean isDynamicTracks(){  return dynamicTracks;}  }
class C{  public boolean checkError(){  OutputStream delegate=out;  if (delegate == null) {    return ioError;  }  flush();  return ioError || delegate.checkError();}  }
class C{  private void matchVPools(URI rpSystemId){  List<URI> storagePoolIds=ConnectivityUtil.getRPSystemStoragePools(_dbClient,rpSystemId);  StringBuffer errorMessage=new StringBuffer();  if (storagePoolIds != null && !storagePoolIds.isEmpty()) {    List<StoragePool> storagePools=_dbClient.queryObject(StoragePool.class,storagePoolIds);    ImplicitPoolMatcher.matchModifiedStoragePoolsWithAllVirtualPool(storagePools,_dbClient,_coordinator,errorMessage);  }}  }
class C{  public void clearDatabase(Context context){  context.deleteDatabase(DATABASE_NAME);}  }
class C{  protected void updateNextObject(){  if (!updateNextIndex()) {    findNextValidParent();  }}  }
class C{  public boolean resolve(){  if (stableNode != null) {    return true;  }  ASTNode curNode=node;  while (curNode != null) {    if (curNode instanceof AbstractTypeDeclaration) {      stableBinding=((AbstractTypeDeclaration)curNode).resolveBinding();    } else     if (node instanceof MethodDeclaration) {      stableBinding=((MethodDeclaration)node).resolveBinding();    }    if (stableBinding != null) {      stableNode=curNode;      return true;    }    curNode=curNode.getParent();  }  return false;}  }
class C{  public static int[] indexOfRegion(String string,String leftBoundary,String rightBoundary,char escape,int offset){  int ndx=offset;  int[] res=new int[4];  while (true) {    ndx=string.indexOf(leftBoundary,ndx);    if (ndx == -1) {      return null;    }    int leftBoundaryLen=leftBoundary.length();    if (ndx > 0) {      if (string.charAt(ndx - 1) == escape) {        boolean cont=true;        if (ndx > 1) {          if (string.charAt(ndx - 2) == escape) {            ndx--;            leftBoundaryLen++;            cont=false;          }        }        if (cont) {          ndx+=leftBoundaryLen;          continue;        }      }    }    res[0]=ndx;    ndx+=leftBoundaryLen;    res[1]=ndx;    while (true) {      ndx=string.indexOf(rightBoundary,ndx);      if (ndx == -1) {        return null;      }      if (ndx > 0) {        if (string.charAt(ndx - 1) == escape) {          ndx+=rightBoundary.length();          continue;        }      }      res[2]=ndx;      res[3]=ndx + rightBoundary.length();      return res;    }  }}  }
class C{  protected DoubleMatrix1D viewSelectionLike(int[] offsets){  return new SelectedSparseDoubleMatrix1D(this.elements,offsets);}  }
class C{  public PropertiesImportException(String message){  super(message);}  }
class C{  private Contract findContractByUniqueKey(String SECType,String symbol,String exchange,String currency,ZonedDateTime expiryDate){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Contract> query=builder.createQuery(Contract.class);    Root<Contract> from=query.from(Contract.class);    query.select(from);    List<Predicate> predicates=new ArrayList<Predicate>();    if (null != SECType) {      Predicate predicate=builder.equal(from.get("secType"),SECType);      predicates.add(predicate);    }    if (null != symbol) {      Predicate predicate=builder.equal(from.get("symbol"),symbol);      predicates.add(predicate);    }    if (null != exchange) {      Predicate predicate=builder.equal(from.get("exchange"),exchange);      predicates.add(predicate);    }    if (null != currency) {      Predicate predicate=builder.equal(from.get("currency"),currency);      predicates.add(predicate);    }    if (null != expiryDate) {      Integer yearExpiry=expiryDate.getYear();      Expression<Integer> year=builder.function("year",Integer.class,from.get("expiry"));      Predicate predicateYear=builder.equal(year,yearExpiry);      predicates.add(predicateYear);      Integer monthExpiry=expiryDate.getMonthValue();      Expression<Integer> month=builder.function("month",Integer.class,from.get("expiry"));      Predicate predicateMonth=builder.equal(month,new Integer(1 + monthExpiry.intValue()));      predicates.add(predicateMonth);    }    query.where(predicates.toArray(new Predicate[]{}));    TypedQuery<Contract> typedQuery=entityManager.createQuery(query);    List<Contract> items=typedQuery.getResultList();    if (items.size() > 0) {      return items.get(0);    }    return null;  } catch (  Exception re) {    throw re;  }}  }
class C{  public boolean handleLink(@NotNull String refSuffix,@NotNull Editor editor){  return false;}  }
class C{  public static void printLine(String message){  if (!isDisabled()) {    print(message + LINE_SEPARATOR);  }}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException {  setHints(null);  return decodeInternal(image);}  }
class C{  @SuppressWarnings("unchecked") public boolean equals(Object o){  if (o instanceof BalancedBinaryNode) {    BalancedBinaryNode<K,V> bbn=(BalancedBinaryNode<K,V>)o;    return safeEquals(key,bbn.key()) && safeEquals(value,bbn.value());  }  return false;}  }
class C{  private static Url resolveUrl(final Url baseUrl,final String relativeUrl){  final Url url=parseUrl(relativeUrl);  if (baseUrl == null) {    return url;  }  if (relativeUrl.length() == 0) {    return new Url(baseUrl);  }  if (url.scheme_ != null) {    return url;  }  url.scheme_=baseUrl.scheme_;  if (url.location_ != null) {    return url;  }  url.location_=baseUrl.location_;  if ((url.path_ != null) && ((url.path_.length() > 0) && ('/' == url.path_.charAt(0)))) {    url.path_=removeLeadingSlashPoints(url.path_);    return url;  }  if (url.path_ == null) {    url.path_=baseUrl.path_;    if (url.parameters_ != null) {      return url;    }    url.parameters_=baseUrl.parameters_;    if (url.query_ != null) {      return url;    }    url.query_=baseUrl.query_;    return url;  }  final String basePath=baseUrl.path_;  String path="";  if (basePath != null) {    final int lastSlashIndex=basePath.lastIndexOf('/');    if (lastSlashIndex >= 0) {      path=basePath.substring(0,lastSlashIndex + 1);    }  } else {    path="/";  }  path=path.concat(url.path_);  int pathSegmentIndex;  while ((pathSegmentIndex=path.indexOf("/./")) >= 0) {    path=path.substring(0,pathSegmentIndex + 1).concat(path.substring(pathSegmentIndex + 3));  }  if (path.endsWith("/.")) {    path=path.substring(0,path.length() - 1);  }  while ((pathSegmentIndex=path.indexOf("/../")) > 0) {    final String pathSegment=path.substring(0,pathSegmentIndex);    final int slashIndex=pathSegment.lastIndexOf('/');    if (slashIndex < 0) {      continue;    }    if (!"..".equals(pathSegment.substring(slashIndex))) {      path=path.substring(0,slashIndex + 1).concat(path.substring(pathSegmentIndex + 4));    }  }  if (path.endsWith("/..")) {    final String pathSegment=path.substring(0,path.length() - 3);    final int slashIndex=pathSegment.lastIndexOf('/');    if (slashIndex >= 0) {      path=path.substring(0,slashIndex + 1);    }  }  path=removeLeadingSlashPoints(path);  url.path_=path;  return url;}  }
class C{  public String toDebugString(){  String info="DC SUBJECT: " + subject + "\nDC CREATOR: "+ creator;  return info;}  }
class C{  public Buffer root(){  return root;}  }
class C{  protected Object _deserializeIfNatural(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {switch (jp.getCurrentToken()) {case VALUE_STRING:    if (_baseType.getRawClass().isAssignableFrom(String.class)) {      return jp.getText();    }  break;case VALUE_NUMBER_INT:if (_baseType.getRawClass().isAssignableFrom(Integer.class)) {  return jp.getIntValue();}break;case VALUE_NUMBER_FLOAT:if (_baseType.getRawClass().isAssignableFrom(Double.class)) {return Double.valueOf(jp.getDoubleValue());}break;case VALUE_TRUE:if (_baseType.getRawClass().isAssignableFrom(Boolean.class)) {return Boolean.TRUE;}break;case VALUE_FALSE:if (_baseType.getRawClass().isAssignableFrom(Boolean.class)) {return Boolean.FALSE;}break;}return null;}  }
class C{  private static Pattern importStringToPattern(String s,Processor p,Log log){  if (isValidImportString(s)) {    return validImportStringToPattern(s);  } else {    log.warning("proc.malformed.supported.string",s,p.getClass().getName());    return noMatches;  }}  }
class C{  public static void isNull(Object object,String message){  if (object != null) {    throw new IllegalArgumentException(message);  }}  }
class C{  private void testNonAnnotations(RoundEnvironment roundEnvironment){  try {    Set<? extends Element> elements=roundEnvironment.getElementsAnnotatedWith((Class)Object.class);    throw new RuntimeException("Illegal argument exception not thrown");  } catch (  IllegalArgumentException iae) {  }  try {    Set<? extends Element> elements=roundEnvironment.getElementsAnnotatedWith(processingEnv.getElementUtils().getTypeElement("java.lang.Object"));    throw new RuntimeException("Illegal argument exception not thrown");  } catch (  IllegalArgumentException iae) {  }}  }
class C{  public boolean trackFreedReferenceCounts(){  return trackFreedRefCounts;}  }
class C{  public static void destroyGracefullyOrForcefullyAndWait(SystemProcess process,long gracefulTimeout,TimeUnit gracefulTimeoutUnit) throws IOException, InterruptedException {  if (tryDestroyGracefully(process,gracefulTimeout,gracefulTimeoutUnit)) {    return;  }  destroyForcefullyAndWait(process);}  }
class C{  public boolean isAvoidFirstLastClippingEnabled(){  return mAvoidFirstLastClipping;}  }
class C{  public void removeAt(int index){  if (mValues[index] != DELETED) {    mValues[index]=DELETED;    mGarbage=true;  }}  }
class C{  private boolean scanResultsEqual(ScanResult a,ScanResult b){  if (a == null || b == null) {    return a == b;  } else {    boolean sameBSSID=(a.BSSID == null ? b.BSSID == null : a.BSSID.equals(b.BSSID));    boolean sameSSID=(a.SSID == null ? b.SSID == null : a.SSID.equals(b.SSID));    boolean sameCapabilities=(a.capabilities == null ? b.capabilities == null : a.capabilities.equals(b.capabilities));    boolean sameFrequency=(a.frequency == b.frequency);    boolean sameTimestamp=(a.timestamp == b.timestamp);    boolean sameLevel=(a.level == b.level);    return sameBSSID && sameSSID && sameCapabilities&& sameFrequency&& sameLevel&& sameTimestamp;  }}  }
class C{  private static boolean isExtendedWebpSupported(){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {    return false;  }  if (Build.VERSION.SDK_INT == Build.VERSION_CODES.JELLY_BEAN_MR1) {    byte[] decodedBytes=Base64.decode(VP8X_WEBP_BASE64,Base64.DEFAULT);    BitmapFactory.Options opts=new BitmapFactory.Options();    opts.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(decodedBytes,0,decodedBytes.length,opts);    if (opts.outHeight != 1 || opts.outWidth != 1) {      return false;    }  }  return true;}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 5:{        addNullToken();        return firstToken;      }case 30:    break;case 22:{    addToken(Token.LITERAL_CHAR);  }case 31:break;case 21:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 32:break;case 25:{addToken(Token.COMMENT_MULTILINE);}case 33:break;case 20:{start=zzMarkedPos - 2;yybegin(MLC);}case 34:break;case 7:{addToken(Token.WHITESPACE);}case 35:break;case 15:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 36:break;case 23:{addToken(Token.ERROR_STRING_DOUBLE);}case 37:break;case 14:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 38:break;case 17:{addToken(Token.RESERVED_WORD);}case 39:break;case 9:{addToken(Token.SEPARATOR);}case 40:break;case 2:{addToken(Token.IDENTIFIER);}case 41:break;case 12:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 42:break;case 19:{start=zzMarkedPos - 2;yybegin(EOL_COMMENT);}case 43:break;case 27:{addToken(Token.FUNCTION);}case 44:break;case 4:{addToken(Token.ERROR_CHAR);addNullToken();return firstToken;}case 45:break;case 6:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 46:break;case 24:{addToken(Token.DATA_TYPE);}case 47:break;case 1:{addToken(Token.ERROR_IDENTIFIER);}case 48:break;case 16:{addToken(Token.ERROR_CHAR);}case 49:break;case 26:{addToken(Token.LITERAL_BOOLEAN);}case 50:break;case 18:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 51:break;case 29:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_EOL);start=zzMarkedPos;}case 52:break;case 28:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_MULTILINE);start=zzMarkedPos;}case 53:break;case 13:{addToken(Token.ERROR_NUMBER_FORMAT);}case 54:break;case 3:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 55:break;case 8:{addToken(Token.OPERATOR);}case 56:break;case 10:{}case 57:break;case 11:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 58:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case EOL_COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 532:break;case YYINITIAL:{addNullToken();return firstToken;}case 533:break;case MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 534:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  private void notifyRegisterEntered(final int index,final BigInteger previousValue,final BigInteger newValue){  for (  final IDataEnteredListener listener : enterlisteners) {    listener.registerChanged(index,previousValue,newValue);  }}  }
class C{  @Override public void onDraw(@NonNull final Canvas c){  if (mSelectorPosition == SelectorPosition.UNDER) {    if (mStrokeCell != null) {      mStrokeCell.draw(c);    }  }  super.onDraw(c);}  }
class C{  public static void showComplex_3D(String format,int n1,int n2,int n3,double[] x,String title){  int sliceStride=n2 * 2 * n3;  int rowStride=2 * n3;  System.out.println(title);  System.out.println("-------------------");  for (int k=0; k < 2 * n3; k=k + 2) {    System.out.println("(:,:," + k / 2 + ")=\n");    for (int i=0; i < n1; i++) {      for (int j=0; j < n2; j++) {        if (x[i * sliceStride + j * rowStride + k + 1] == 0) {          System.out.print(String.format(format,x[i * sliceStride + j * rowStride + k]) + "\t");          continue;        }        if (x[i * sliceStride + j * rowStride + k] == 0) {          System.out.print(String.format(format,x[i * sliceStride + j * rowStride + k + 1]) + "i\t");          continue;        }        if (x[i * sliceStride + j * rowStride + k + 1] < 0) {          System.out.print(String.format(format,x[i * sliceStride + j * rowStride + k]) + " - " + String.format(format,-x[i * sliceStride + j * rowStride + k + 1])+ "i\t");          continue;        }        System.out.print(String.format(format,x[i * sliceStride + j * rowStride + k]) + " + " + String.format(format,x[i * sliceStride + j * rowStride + k + 1])+ "i\t");      }      System.out.println("");    }  }  System.out.println("");}  }
class C{  public static String classNamesToString(Class... classes){  return classNamesToString(Arrays.asList(classes));}  }
class C{  public static Hash calculateHash(final SerializableEntity entity){  final byte[] data=BinarySerializer.serializeToBytes(entity);  return new Hash(Hashes.sha3_256(data));}  }
class C{  @Override public String build(){  builder.append(";<;)");  return builder.build();}  }
class C{  public static boolean hasNoInlinePragma(RVMMethod callee,CompilationState state){  return callee.hasNoInlinePragma();}  }
class C{  public synchronized Index recreateIndex(IPath containerPath){  String containerPathString=containerPath.getDevice() == null ? containerPath.toString() : containerPath.toOSString();  try {    IndexLocation indexLocation=computeIndexLocation(containerPath);    Index index=getIndex(indexLocation);    ReadWriteMonitor monitor=index == null ? null : index.monitor;    if (JobManager.VERBOSE)     Util.verbose("-> recreating index: " + indexLocation + " for path: "+ containerPathString);    index=new Index(indexLocation,containerPathString,false);    this.indexes.put(indexLocation,index);    index.monitor=monitor;    return index;  } catch (  IOException e) {    if (JobManager.VERBOSE) {      Util.verbose("-> failed to recreate index for path: " + containerPathString);      e.printStackTrace();    }    return null;  }}  }
class C{  public static void checkAndSetUniqueStringsParam(Element context,AVList params,String paramKey,String paramName,XPath xpath){  if (context == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (params == null) {    String message=Logging.getMessage("nullValue.ParametersIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramKey == null) {    String message=Logging.getMessage("nullValue.ParameterKeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramName == null) {    String message=Logging.getMessage("nullValue.ParameterNameIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Object o=params.getValue(paramKey);  if (o == null) {    String[] strings=getUniqueText(context,paramName,xpath);    if (strings != null && strings.length > 0)     params.setValue(paramKey,strings);  }}  }
class C{  @Override public synchronized boolean retainAll(Collection<?> collection){  return super.retainAll(collection);}  }
class C{  public static RE createRE(String expression,int matchFlags) throws RESyntaxException {  if (expression.startsWith(complexPrefix)) {    return new RE(expression.substring(complexPrefix.length()),matchFlags);  }  return new RE(RE.simplePatternToFullRegularExpression(expression),matchFlags);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.EQUALS_OP___EQUALS_OP_1:    setEqualsOp_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  static public Locator east(){  return east(false);}  }
class C{  public List<IDIYComponent<?>> drawProject(Graphics2D g2d,Project project,Set<DrawOption> drawOptions,IComponentFiler filter,Rectangle selectionRect,List<IDIYComponent<?>> selectedComponents,Set<IDIYComponent<?>> lockedComponents,Set<IDIYComponent<?>> groupedComponents,List<Point> controlPointSlot,List<IDIYComponent<?>> componentSlot,boolean dragInProgress){  failedComponents.clear();  if (project == null) {    return failedComponents;  }  G2DWrapper g2dWrapper=new G2DWrapper(g2d);  if (drawOptions.contains(DrawOption.ANTIALIASING)) {    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);    g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);  } else {    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_OFF);    g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);  }  if (ConfigurationManager.getInstance().readBoolean(IPlugInPort.HI_QUALITY_RENDER_KEY,false)) {    g2d.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION,RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);    g2d.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING,RenderingHints.VALUE_COLOR_RENDER_QUALITY);    g2d.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);    g2d.setRenderingHint(RenderingHints.KEY_DITHERING,RenderingHints.VALUE_DITHER_ENABLE);    g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);  } else {    g2d.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION,RenderingHints.VALUE_ALPHA_INTERPOLATION_SPEED);    g2d.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING,RenderingHints.VALUE_COLOR_RENDER_SPEED);    g2d.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_SPEED);    g2d.setRenderingHint(RenderingHints.KEY_DITHERING,RenderingHints.VALUE_DITHER_DISABLE);    g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);  }  double zoom=1d;  if (drawOptions.contains(DrawOption.ZOOM)) {    zoom=zoomLevel;  } else {    zoom=1 / Constants.PIXEL_SIZE;  }  Dimension d=getCanvasDimensions(project,zoom,true);  g2dWrapper.setColor(theme.getBgColor());  g2dWrapper.fillRect(0,0,d.width,d.height);  g2d.clip(new Rectangle(new Point(0,0),d));  GridType gridType=GridType.LINES;  if (drawOptions.contains(DrawOption.GRID) && gridType != GridType.NONE) {    double zoomStep=project.getGridSpacing().convertToPixels() * zoom;    if (gridType == GridType.CROSSHAIR) {      g2d.setStroke(new BasicStroke(1f,BasicStroke.CAP_BUTT,BasicStroke.JOIN_MITER,10f,new float[]{(float)zoomStep / 2,(float)zoomStep / 2},(float)zoomStep / 4));    } else     if (gridType == GridType.DOT) {      g2d.setStroke(new BasicStroke(1f,BasicStroke.CAP_BUTT,BasicStroke.JOIN_MITER,10f,new float[]{1f,(float)zoomStep - 1},0f));    }    g2dWrapper.setColor(theme.getGridColor());    for (double i=zoomStep; i < d.width; i+=zoomStep) {      g2dWrapper.drawLine((int)i,0,(int)i,d.height - 1);    }    for (double j=zoomStep; j < d.height; j+=zoomStep) {      g2dWrapper.drawLine(0,(int)j,d.width - 1,(int)j);    }  }  if (Math.abs(1.0 - zoom) > 1e-4) {    g2dWrapper.scale(zoom,zoom);  }  for (  IDIYComponent<?> component : project.getComponents()) {    if (filter != null && !filter.testComponent(component)) {      continue;    }    ComponentState state=ComponentState.NORMAL;    if (drawOptions.contains(DrawOption.SELECTION) && selectedComponents.contains(component)) {      if (dragInProgress) {        state=ComponentState.DRAGGING;      } else {        state=ComponentState.SELECTED;      }    }    boolean trackArea=lastDrawnStateMap.get(component) != state;synchronized (g2d) {      g2dWrapper.startedDrawingComponent();      if (!trackArea) {        g2dWrapper.stopTracking();      }      if (lockedComponents.contains(component)) {        g2d.setComposite(lockedComposite);      }      try {        component.draw(g2dWrapper,state,drawOptions.contains(DrawOption.OUTLINE_MODE),project,g2dWrapper);      } catch (      Exception e) {        LOG.error("Error drawing " + component.getName(),e);        failedComponents.add(component);      }      Area area=g2dWrapper.finishedDrawingComponent();      if (trackArea && area != null && !area.isEmpty()) {        componentAreaMap.put(component,area);        lastDrawnStateMap.put(component,state);      }    }  }  if (drawOptions.contains(DrawOption.CONTROL_POINTS)) {    if (dragInProgress || drawOptions.contains(DrawOption.OUTLINE_MODE)) {      for (      IDIYComponent<?> component : project.getComponents()) {        for (int i=0; i < component.getControlPointCount(); i++) {          VisibilityPolicy visibilityPolicy=component.getControlPointVisibilityPolicy(i);          if ((groupedComponents.contains(component) && (visibilityPolicy == VisibilityPolicy.ALWAYS || (selectedComponents.contains(component) && visibilityPolicy == VisibilityPolicy.WHEN_SELECTED)) || (!groupedComponents.contains(component) && !selectedComponents.contains(component) && component.getControlPointVisibilityPolicy(i) == VisibilityPolicy.ALWAYS))) {            g2dWrapper.setColor(CONTROL_POINT_COLOR);            Point controlPoint=component.getControlPoint(i);            int pointSize=CONTROL_POINT_SIZE - 2;            g2dWrapper.fillOval(controlPoint.x - pointSize / 2,controlPoint.y - pointSize / 2,pointSize,pointSize);          }        }      }    }    for (    IDIYComponent<?> component : selectedComponents) {      for (int i=0; i < component.getControlPointCount(); i++) {        if (!groupedComponents.contains(component) && (component.getControlPointVisibilityPolicy(i) == VisibilityPolicy.WHEN_SELECTED || component.getControlPointVisibilityPolicy(i) == VisibilityPolicy.ALWAYS)) {          Point controlPoint=component.getControlPoint(i);          int pointSize=CONTROL_POINT_SIZE;          g2dWrapper.setColor(SELECTED_CONTROL_POINT_COLOR.darker());          g2dWrapper.fillOval(controlPoint.x - pointSize / 2,controlPoint.y - pointSize / 2,pointSize,pointSize);          g2dWrapper.setColor(SELECTED_CONTROL_POINT_COLOR);          g2dWrapper.fillOval(controlPoint.x - CONTROL_POINT_SIZE / 2 + 1,controlPoint.y - CONTROL_POINT_SIZE / 2 + 1,CONTROL_POINT_SIZE - 2,CONTROL_POINT_SIZE - 2);        }      }    }  }  if (componentSlot != null) {    g2dWrapper.startedDrawingComponent();    g2dWrapper.setComposite(slotComposite);    for (    IDIYComponent<?> component : componentSlot) {      try {        component.draw(g2dWrapper,ComponentState.NORMAL,drawOptions.contains(DrawOption.OUTLINE_MODE),project,g2dWrapper);      } catch (      Exception e) {        LOG.error("Error drawing " + component.getName(),e);        failedComponents.add(component);      }    }    g2dWrapper.finishedDrawingComponent();  }  if (controlPointSlot != null) {    for (    Point point : controlPointSlot) {      if (point != null) {        g2dWrapper.setColor(SELECTED_CONTROL_POINT_COLOR.darker());        g2dWrapper.fillOval(point.x - CONTROL_POINT_SIZE / 2,point.y - CONTROL_POINT_SIZE / 2,CONTROL_POINT_SIZE,CONTROL_POINT_SIZE);        g2dWrapper.setColor(SELECTED_CONTROL_POINT_COLOR);        g2dWrapper.fillOval(point.x - CONTROL_POINT_SIZE / 2 + 1,point.y - CONTROL_POINT_SIZE / 2 + 1,CONTROL_POINT_SIZE - 2,CONTROL_POINT_SIZE - 2);      }    }  }  if (drawOptions.contains(DrawOption.SELECTION) && (selectionRect != null)) {    g2d.setColor(Color.white);    g2d.draw(selectionRect);    g2d.setColor(Color.black);    g2d.setStroke(Constants.DASHED_STROKE);    g2d.draw(selectionRect);  }  if (debugComponentAreas) {    g2d.setStroke(ObjectCache.getInstance().fetchBasicStroke(1));    g2d.setColor(Color.red);    for (    Area area : componentAreaMap.values()) {      g2d.draw(area);    }  }  return failedComponents;}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image){  return createCompatibleImage(image,image.getWidth(),image.getHeight());}  }
class C{  private Assert(){}  }
class C{  public String toHostString(){  CharArrayBuffer buffer=new CharArrayBuffer(32);  buffer.append(this.hostname);  if (this.port != -1) {    buffer.append(':');    buffer.append(Integer.toString(this.port));  }  return buffer.toString();}  }
class C{  private void printlnError(Object o){  if (errorLogWriter != null) {    errorLogWriter.println(o);  }}  }
class C{  public void clearAllMoveVectors(){  movementSprites.clear();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(BigBrother.isUnique(getShow(stack)));}  }
class C{  public static short[] generateRandomVector(int seedLength,int dimension,Random random){  boolean[] randVector=new boolean[dimension];  short[] randIndex=new short[seedLength];  int testPlace, entryCount=0;  while (entryCount < seedLength / 2) {    testPlace=random.nextInt(dimension);    if (!randVector[testPlace]) {      randVector[testPlace]=true;      randIndex[entryCount]=new Integer(testPlace + 1).shortValue();      entryCount++;    }  }  while (entryCount < seedLength) {    testPlace=random.nextInt(dimension);    if (!randVector[testPlace]) {      randVector[testPlace]=true;      randIndex[entryCount]=new Integer((1 + testPlace) * -1).shortValue();      entryCount++;    }  }  return randIndex;}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Throwable>void rewrapAndThrowIfInstance(String newMessage,Throwable t,Class<K> clazz) throws K {  if ((t != null) && clazz.isAssignableFrom(t.getClass())) {    K kt=(K)t;    K wrapped=Throwables.rewrap(newMessage,kt);    throw wrapped;  }}  }
class C{  private void checkClusterStatus() throws Exception {  ClusterInfo.ClusterState controlNodeState=_coordinator.getCoordinatorClient().getControlNodesState();  if (controlNodeState == null || !controlNodeState.equals(ClusterInfo.ClusterState.STABLE)) {    String errmsg="Cluster is not stable.";    log.error(errmsg);    throw new IllegalStateException(errmsg);  }}  }
class C{  public JobDataMap(Map<?,?> map){  this();  @SuppressWarnings("unchecked") Map<String,Object> mapTyped=(Map<String,Object>)map;  putAll(mapTyped);}  }
class C{  public static void resetSingleUse(Context context,String showcaseID){  PrefsManager.resetShowcase(context,showcaseID);}  }
class C{  public void visitLineNumber(int line,Label start){  if (mv != null) {    mv.visitLineNumber(line,start);  }}  }
class C{  public var addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public NisNodeInfo(final Node node,final ApplicationMetaData appMetaData){  this.node=node;  this.appMetaData=appMetaData;}  }
class C{  private void invalidateHandles(){  if (handlesAreValid) {    handlesAreValid=false;    Rectangle invalidatedArea=null;    for (    Handle handle : selectionHandles) {      handle.removeHandleListener(eventHandler);      if (invalidatedArea == null) {        invalidatedArea=handle.getDrawingArea();      } else {        invalidatedArea.add(handle.getDrawingArea());      }      handle.dispose();    }    for (    Handle handle : secondaryHandles) {      handle.removeHandleListener(eventHandler);      if (invalidatedArea == null) {        invalidatedArea=handle.getDrawingArea();      } else {        invalidatedArea.add(handle.getDrawingArea());      }      handle.dispose();    }    selectionHandles.clear();    secondaryHandles.clear();    setActiveHandle(null);    if (invalidatedArea != null) {      repaint(invalidatedArea);    }  }}  }
class C{  public static void main(String[] args){  String propertyFileLocation="C:\\Temp\\trade.properties";  ConfigProperties.reNumberDecodesInPropertiesFile(propertyFileLocation);}  }
class C{  protected RegionAttributes createRegionAttributesForPR(int redundancy,int localMaxMem){  AttributesFactory attr=new AttributesFactory();  PartitionAttributesFactory paf=new PartitionAttributesFactory();  PartitionAttributes prAttr=paf.setRedundantCopies(redundancy).setLocalMaxMemory(localMaxMem).setTotalNumBuckets(totalNumBuckets).create();  attr.setPartitionAttributes(prAttr);  return attr.create();}  }
class C{  public final AssertSubscriber<T> assertNoValues(){  if (valueCount != 0) {    throw new AssertionError("No values expected but received: [length = " + values.size() + "] "+ values,null);  }  return this;}  }
class C{  public void print(long x){  out.print(x);  out.flush();}  }
class C{  public PasswordAuthentication(final byte[] userName,final byte[] password){  if (userName != null) {    mUserName=new byte[userName.length];    System.arraycopy(userName,0,mUserName,0,userName.length);  }  mPassword=new byte[password.length];  System.arraycopy(password,0,mPassword,0,password.length);}  }
class C{  public PropertyDescriptor removeProperty(String propertyName){  if (propertyName == null) {    throw new IllegalArgumentException("Property name can not be null");  }  for (Iterator iter=properties.iterator(); iter.hasNext(); ) {    PropertyDescriptor property=(PropertyDescriptor)iter.next();    if (propertyName.equals(property.getName())) {      iter.remove();      return property;    }  }  return null;}  }
class C{  public boolean removeAll(AbstractCharList other){  if (!(other instanceof CharArrayList))   return super.removeAll(other);  if (other.size() == 0) {    return false;  }  int limit=other.size() - 1;  int j=0;  char[] theElements=elements;  int mySize=size();  double N=(double)other.size();  double M=(double)mySize;  if ((N + M) * cern.jet.math.Arithmetic.log2(N) < M * N) {    CharArrayList sortedList=(CharArrayList)other.clone();    sortedList.quickSort();    for (int i=0; i < mySize; i++) {      if (sortedList.binarySearchFromTo(theElements[i],0,limit) < 0)       theElements[j++]=theElements[i];    }  } else {    for (int i=0; i < mySize; i++) {      if (other.indexOfFromTo(theElements[i],0,limit) < 0)       theElements[j++]=theElements[i];    }  }  boolean modified=(j != mySize);  setSize(j);  return modified;}  }
class C{  static TBigInteger oddModPow(TBigInteger base,TBigInteger exponent,TBigInteger modulus){  int k=(modulus.numberLength << 5);  TBigInteger a2=base.shiftLeft(k).mod(modulus);  TBigInteger x2=TBigInteger.getPowerOfTwo(k).mod(modulus);  TBigInteger res;  int n2=calcN(modulus);  if (modulus.numberLength == 1) {    res=squareAndMultiply(x2,a2,exponent,modulus,n2);  } else {    res=slidingWindow(x2,a2,exponent,modulus,n2);  }  return monPro(res,TBigInteger.ONE,modulus,n2);}  }
class C{  @SuppressWarnings("StringEquality") public static void writeProperties(BinaryRawWriter out,@Nullable Map<String,String> props){  if (props != null) {    out.writeInt(props.size());    for (    Map.Entry<String,String> entry : props.entrySet()) {      String key=entry.getKey();      if (key == PROP_PERMISSION)       out.writeByte(PROP_PERMISSION_IDX); else       if (key == PROP_PREFER_LOCAL_WRITES)       out.writeByte(PROP_PREFER_LOCAL_WRITES_IDX); else       if (key == PROP_USER_NAME)       out.writeByte(PROP_USER_NAME_IDX); else       if (key == PROP_GROUP_NAME)       out.writeByte(PROP_GROUP_NAME_IDX); else {        out.writeByte(PROP_IDX);        out.writeString(key);      }      out.writeString(entry.getValue());    }  } else   out.writeInt(-1);}  }
class C{  public static Object wrap(Object object){  try {    if (object == null) {      return NULL;    }    if (object instanceof JSONObject || object instanceof JSONArray || NULL.equals(object)|| object instanceof JSONString|| object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String) {      return object;    }    if (object instanceof Collection) {      return new JSONArray((Collection)object);    }    if (object.getClass().isArray()) {      return new JSONArray(object);    }    if (object instanceof Map) {      return new JSONObject((Map)object);    }    Package objectPackage=object.getClass().getPackage();    String objectPackageName=objectPackage != null ? objectPackage.getName() : "";    if (objectPackageName.startsWith("java.") || objectPackageName.startsWith("javax.") || object.getClass().getClassLoader() == null || object.getClass().getName().contains("GemFireCacheImpl")) {      return object.toString();    }    if (cyclicDepChkEnabled.get() != null && cyclicDependencySet.get() != null) {      if (cyclicDepChkEnabled.get() && cyclicDependencySet.get().contains(object)) {        return object.getClass().getCanonicalName();      } else {        cyclicDependencySet.get().add(object);        return new JSONObject(object);      }    } else     return new JSONObject(object);  } catch (  Exception exception) {    return null;  }}  }
class C{  public static void compareFinishReport(final SpeedTestSocket socket,final Waiter waiter,final long packetSize,final SpeedTestReport report,final boolean download){  SpeedTestReport liveReport;  if (download) {    liveReport=socket.getLiveDownloadReport();  } else {    liveReport=socket.getLiveUploadReport();  }  SpeedTestUtils.testReportNotEmpty(waiter,report,packetSize,false,true);  SpeedTestUtils.testReportNotEmpty(waiter,liveReport,packetSize,false,true);  waiter.assertTrue(report.getProgressPercent() == 100);  waiter.assertTrue(liveReport.getProgressPercent() == 100);  waiter.assertNotNull(report.getTransferRateOctet());  waiter.assertNotNull(report.getTransferRateBit());  waiter.assertEquals(report.getTransferRateOctet(),liveReport.getTransferRateOctet());  waiter.assertEquals(report.getTransferRateBit(),liveReport.getTransferRateBit());  float check=report.getTransferRateOctet().multiply(new BigDecimal("8")).floatValue();  waiter.assertTrue(((report.getTransferRateBit().floatValue() + 0.1) >= check) && ((report.getTransferRateBit().floatValue() - 0.1) <= check));  check=liveReport.getTransferRateOctet().multiply(new BigDecimal("8")).floatValue();  waiter.assertTrue(((liveReport.getTransferRateBit().floatValue() + 0.1) >= check) && ((liveReport.getTransferRateBit().floatValue() - 0.1) <= check));}  }
class C{  protected void afterMerge(OnGoingMerge merge){}  }
class C{  @Beta public static <K,V>ImmutableSortedMap<K,V> copyOf(Iterable<? extends Entry<? extends K,? extends V>> entries,Comparator<? super K> comparator){  return fromEntries(checkNotNull(comparator),false,entries);}  }
class C{  public Object execute(Object o,InternalContextAdapter context) throws MethodInvocationException {  VelPropertyGet vg=null;  try {    Class c=o.getClass();    IntrospectionCacheData icd=context.icacheGet(this);    if (icd != null && icd.contextData == c) {      vg=(VelPropertyGet)icd.thingy;    } else {      vg=rsvc.getUberspect().getPropertyGet(o,identifier,uberInfo);      if (vg != null && vg.isCacheable()) {        icd=new IntrospectionCacheData();        icd.contextData=c;        icd.thingy=vg;        context.icachePut(this,icd);      }    }  } catch (  Exception e) {    rsvc.error("ASTIdentifier.execute() : identifier = " + identifier + " : "+ e);  }  if (vg == null) {    return null;  }  try {    return vg.invoke(o);  } catch (  InvocationTargetException ite) {    EventCartridge ec=context.getEventCartridge();    if (ec != null && ite.getTargetException() instanceof java.lang.Exception) {      try {        return ec.methodException(o.getClass(),vg.getMethodName(),(Exception)ite.getTargetException());      } catch (      Exception e) {        throw new MethodInvocationException("Invocation of method '" + vg.getMethodName() + "'"+ " in  "+ o.getClass()+ " threw exception "+ ite.getTargetException().getClass()+ " : "+ ite.getTargetException().getMessage(),ite.getTargetException(),vg.getMethodName());      }    } else {      throw new MethodInvocationException("Invocation of method '" + vg.getMethodName() + "'"+ " in  "+ o.getClass()+ " threw exception "+ ite.getTargetException().getClass()+ " : "+ ite.getTargetException().getMessage(),ite.getTargetException(),vg.getMethodName());    }  }catch (  IllegalArgumentException iae) {    return null;  }catch (  Exception e) {    rsvc.error("ASTIdentifier() : exception invoking method " + "for identifier '" + identifier + "' in "+ o.getClass()+ " : "+ e);  }  return null;}  }
class C{  @Ignore("TODO") @Test public void testError() throws CacheException, InterruptedException {  String exceptions=Error.class.getName();  try {    String name="testError";    doCreateEntry(name);    assertTrue(doVerifyConnected());    doMessage("<ExpectedException action=add>" + exceptions + "</ExpectedException>");  }  finally {    doMessage("<ExpectedException action=remove>" + exceptions + "</ExpectedException>");    resetVM();  }}  }
class C{  private void resetErrorLog(){  m_errorLog=null;  m_errorCounter=0;  m_errors.setText(s_logger.localizeMessage("guiButtonViewErrors"));  m_errors.setEnabled(false);}  }
class C{  public void onOptionManagerClearedFocus(){  stopScan();}  }
class C{  public int findClosingPeer(int start,int openingPeer,int closingPeer){  assert (start <= _document.getLength());  int depth=1;  start+=1;  int token;  int offset=start;  while (true) {    token=nextToken(offset,_document.getLength());    offset=getPosition();    if (token == SQLIndentSymbols.TokenEOF) {      return NOT_FOUND;    }    if (isSameToken(token,openingPeer)) {      depth++;    } else     if (isSameToken(token,closingPeer)) {      depth--;    }    if (depth == 0) {      return offset;    }  }}  }
class C{  public boolean IsViewFocused(){  return (this.isFocused() || bTouchedDown);}  }
class C{  private MethodSymbol makePrivateSyntheticMethod(long flags,Name name,Type type,Symbol owner){  return new MethodSymbol(flags | SYNTHETIC | PRIVATE,name,type,owner);}  }
class C{  private boolean hasUnvisitedShellEdge(List edgeRings){  for (int i=0; i < edgeRings.size(); i++) {    EdgeRing er=(EdgeRing)edgeRings.get(i);    if (er.isHole())     continue;    List edges=er.getEdges();    DirectedEdge de=(DirectedEdge)edges.get(0);    if (de.getLabel().getLocation(0,Position.RIGHT) != Location.INTERIOR)     continue;    for (int j=0; j < edges.size(); j++) {      de=(DirectedEdge)edges.get(j);      if (!de.isVisited()) {        disconnectedRingcoord=de.getCoordinate();        return true;      }    }  }  return false;}  }
class C{  public static boolean isBlankValue(String s){  if (null == s)   return true;  String _s=s.trim();  return ((EMPTY_STRING.equals(_s)) || (STRING_ZERO.equals(_s)));}  }
class C{  private DoubleDBIDList subsetNeighborhoodQuery(DoubleDBIDList neighc,DBIDRef dbid,PrimitiveDistanceFunction<? super V> df,double adjustedEps,KernelDensityEstimator kernel){  ModifiableDoubleDBIDList n=DBIDUtil.newDistanceDBIDList(neighc.size());  V query=kernel.relation.get(dbid);  for (DoubleDBIDListIter neighbor=neighc.iter(); neighbor.valid(); neighbor.advance()) {    DoubleDBIDPair p=neighbor.getPair();    double dist=df.distance(query,kernel.relation.get(p));    if (dist <= adjustedEps) {      n.add(dist,p);    }  }  return n;}  }
class C{  protected SpeedmentException(String message,Throwable cause,boolean enableSuppression,boolean writableStackTrace){  super(message,cause,enableSuppression,writableStackTrace);}  }
class C{  public static DoubleRange valueOf(String string){  if (string.isEmpty()) {    return null;  }  String[] nums=null;  int i=0;  boolean firstMinus=string.charAt(0) == '-';  if (firstMinus) {    string=string.substring(1);  }  while ((i < ByteRange.SPLITS.length) && ((nums == null) || (nums.length != 2))) {    nums=StringUtils.splitByWholeSeparator(string,ByteRange.SPLITS[i++],2);  }  if ((nums == null) || (nums.length != 2)) {    return null;  }  Double min=DioriteMathUtils.asDouble(firstMinus ? ("-" + nums[0]) : nums[0]);  if (min == null) {    return null;  }  Double max=DioriteMathUtils.asDouble(nums[1]);  if ((max == null) || (min > max)) {    return null;  }  return new DoubleRange(min,max);}  }
class C{  public static void parseRecodeMapEntry(String entry,Pair<String,String> pair){  int ixq=entry.lastIndexOf('"');  String token=UtilFunctions.unquote(entry.substring(0,ixq + 1));  int idx=ixq + 2;  while (entry.charAt(idx) != TfUtils.TXMTD_SEP.charAt(0))   idx++;  String id=entry.substring(ixq + 2,idx);  pair.set(token,id);}  }
class C{  public static int createAndLinkProgram(final int vertexShaderHandle,final int fragmentShaderHandle,final String[] attributes){  int programHandle=GLES20.glCreateProgram();  if (programHandle != 0) {    GLES20.glAttachShader(programHandle,vertexShaderHandle);    GLES20.glAttachShader(programHandle,fragmentShaderHandle);    if (attributes != null) {      final int size=attributes.length;      for (int i=0; i < size; i++) {        GLES20.glBindAttribLocation(programHandle,i,attributes[i]);      }    }    GLES20.glLinkProgram(programHandle);    final int[] linkStatus=new int[1];    GLES20.glGetProgramiv(programHandle,GLES20.GL_LINK_STATUS,linkStatus,0);    if (linkStatus[0] == 0) {      Log.e(TAG,"Error compiling program: " + GLES20.glGetProgramInfoLog(programHandle));      GLES20.glDeleteProgram(programHandle);      programHandle=0;    }  }  if (programHandle == 0) {    throw new RuntimeException("Error creating program.");  }  return programHandle;}  }
class C{  public TypeConstraint(TypeArgument left,TypeArgument right,Variance variance){  this.left=left;  this.right=right;  this.variance=variance;}  }
class C{  public void removeIdentificador(String id){  identificadores.remove(id);}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public static void init(Config config){  jsa=new JSAStrings();  soot.options.Options.v().set_allow_phantom_refs(true);  setApplicationClasses(config);  timeout=config.stringAnalysisTimeout;}  }
class C{  public void drawingComplete(OMGraphic omg,OMAction action){  super.drawingComplete(omg,action);  if (editorTool != null) {    editorTool.drawingComplete(omg,action);  }}  }
class C{  public CacheSpan touch(){  long now=System.currentTimeMillis();  File newCacheFile=getCacheFileName(file.getParentFile(),key,position,now);  file.renameTo(newCacheFile);  return CacheSpan.createCacheEntry(key,position,now,newCacheFile);}  }
class C{  public static int intersectSweptSphereTriangle(float centerX,float centerY,float centerZ,float radius,float velX,float velY,float velZ,float v0X,float v0Y,float v0Z,float v1X,float v1Y,float v1Z,float v2X,float v2Y,float v2Z,float epsilon,float maxT,Vector4f pointAndTime){  float v10X=v1X - v0X;  float v10Y=v1Y - v0Y;  float v10Z=v1Z - v0Z;  float v20X=v2X - v0X;  float v20Y=v2Y - v0Y;  float v20Z=v2Z - v0Z;  float a=v10Y * v20Z - v20Y * v10Z;  float b=v10Z * v20X - v20Z * v10X;  float c=v10X * v20Y - v20X * v10Y;  float d=-(a * v0X + b * v0Y + c * v0Z);  float invLen=(float)(1.0 / Math.sqrt(a * a + b * b + c * c));  float signedDist=(a * centerX + b * centerY + c * centerZ + d) * invLen;  float dot=(a * velX + b * velY + c * velZ) * invLen;  if (dot < epsilon && dot > -epsilon)   return -1;  float pt0=(radius - signedDist) / dot;  if (pt0 > maxT)   return -1;  float pt1=(-radius - signedDist) / dot;  float p0X=centerX - radius * a * invLen + velX * pt0;  float p0Y=centerY - radius * b * invLen + velY * pt0;  float p0Z=centerZ - radius * c * invLen + velZ * pt0;  boolean insideTriangle=testPointInTriangle(p0X,p0Y,p0Z,v0X,v0Y,v0Z,v1X,v1Y,v1Z,v2X,v2Y,v2Z);  if (insideTriangle) {    pointAndTime.x=p0X;    pointAndTime.y=p0Y;    pointAndTime.z=p0Z;    pointAndTime.w=pt0;    return POINT_ON_TRIANGLE_FACE;  }  int isect=-1;  float t0=maxT;  float A=velX * velX + velY * velY + velZ * velZ;  float radius2=radius * radius;  float centerV0X=centerX - v0X;  float centerV0Y=centerY - v0Y;  float centerV0Z=centerZ - v0Z;  float B0=2.0f * (velX * centerV0X + velY * centerV0Y + velZ * centerV0Z);  float C0=centerV0X * centerV0X + centerV0Y * centerV0Y + centerV0Z * centerV0Z - radius2;  float root0=computeLowestRoot(A,B0,C0,t0);  if (root0 < t0) {    pointAndTime.x=v0X;    pointAndTime.y=v0Y;    pointAndTime.z=v0Z;    pointAndTime.w=root0;    t0=root0;    isect=POINT_ON_TRIANGLE_VERTEX;  }  float centerV1X=centerX - v1X;  float centerV1Y=centerY - v1Y;  float centerV1Z=centerZ - v1Z;  float centerV1Len=centerV1X * centerV1X + centerV1Y * centerV1Y + centerV1Z * centerV1Z;  float B1=2.0f * (velX * centerV1X + velY * centerV1Y + velZ * centerV1Z);  float C1=centerV1Len - radius2;  float root1=computeLowestRoot(A,B1,C1,t0);  if (root1 < t0) {    pointAndTime.x=v1X;    pointAndTime.y=v1Y;    pointAndTime.z=v1Z;    pointAndTime.w=root1;    t0=root1;    isect=POINT_ON_TRIANGLE_VERTEX;  }  float centerV2X=centerX - v2X;  float centerV2Y=centerY - v2Y;  float centerV2Z=centerZ - v2Z;  float B2=2.0f * (velX * centerV2X + velY * centerV2Y + velZ * centerV2Z);  float C2=centerV2X * centerV2X + centerV2Y * centerV2Y + centerV2Z * centerV2Z - radius2;  float root2=computeLowestRoot(A,B2,C2,t0);  if (root2 < t0) {    pointAndTime.x=v2X;    pointAndTime.y=v2Y;    pointAndTime.z=v2Z;    pointAndTime.w=root2;    t0=root2;    isect=POINT_ON_TRIANGLE_VERTEX;  }  float velLen=velX * velX + velY * velY + velZ * velZ;  float len10=v10X * v10X + v10Y * v10Y + v10Z * v10Z;  float baseTo0Len=centerV0X * centerV0X + centerV0Y * centerV0Y + centerV0Z * centerV0Z;  float v10Vel=(v10X * velX + v10Y * velY + v10Z * velZ);  float A10=len10 * -velLen + v10Vel * v10Vel;  float v10BaseTo0=v10X * -centerV0X + v10Y * -centerV0Y + v10Z * -centerV0Z;  float velBaseTo0=velX * -centerV0X + velY * -centerV0Y + velZ * -centerV0Z;  float B10=len10 * 2 * velBaseTo0 - 2 * v10Vel * v10BaseTo0;  float C10=len10 * (radius2 - baseTo0Len) + v10BaseTo0 * v10BaseTo0;  float root10=computeLowestRoot(A10,B10,C10,t0);  float f10=(v10Vel * root10 - v10BaseTo0) / len10;  if (f10 >= 0.0f && f10 <= 1.0f && root10 < t0) {    pointAndTime.x=v0X + f10 * v10X;    pointAndTime.y=v0Y + f10 * v10Y;    pointAndTime.z=v0Z + f10 * v10Z;    pointAndTime.w=root10;    t0=root10;    isect=POINT_ON_TRIANGLE_EDGE;  }  float len20=v20X * v20X + v20Y * v20Y + v20Z * v20Z;  float v20Vel=(v20X * velX + v20Y * velY + v20Z * velZ);  float A20=len20 * -velLen + v20Vel * v20Vel;  float v20BaseTo0=v20X * -centerV0X + v20Y * -centerV0Y + v20Z * -centerV0Z;  float B20=len20 * 2 * velBaseTo0 - 2 * v20Vel * v20BaseTo0;  float C20=len20 * (radius2 - baseTo0Len) + v20BaseTo0 * v20BaseTo0;  float root20=computeLowestRoot(A20,B20,C20,t0);  float f20=(v20Vel * root20 - v20BaseTo0) / len20;  if (f20 >= 0.0f && f20 <= 1.0f && root20 < pt1) {    pointAndTime.x=v0X + f20 * v20X;    pointAndTime.y=v0Y + f20 * v20Y;    pointAndTime.z=v0Z + f20 * v20Z;    pointAndTime.w=root20;    t0=root20;    isect=POINT_ON_TRIANGLE_EDGE;  }  float v21X=v2X - v1X;  float v21Y=v2Y - v1Y;  float v21Z=v2Z - v1Z;  float len21=v21X * v21X + v21Y * v21Y + v21Z * v21Z;  float baseTo1Len=centerV1Len;  float v21Vel=(v21X * velX + v21Y * velY + v21Z * velZ);  float A21=len21 * -velLen + v21Vel * v21Vel;  float v21BaseTo1=v21X * -centerV1X + v21Y * -centerV1Y + v21Z * -centerV1Z;  float velBaseTo1=velX * -centerV1X + velY * -centerV1Y + velZ * -centerV1Z;  float B21=len21 * 2 * velBaseTo1 - 2 * v21Vel * v21BaseTo1;  float C21=len21 * (radius2 - baseTo1Len) + v21BaseTo1 * v21BaseTo1;  float root21=computeLowestRoot(A21,B21,C21,t0);  float f21=(v21Vel * root21 - v21BaseTo1) / len21;  if (f21 >= 0.0f && f21 <= 1.0f && root21 < t0) {    pointAndTime.x=v1X + f21 * v21X;    pointAndTime.y=v1Y + f21 * v21Y;    pointAndTime.z=v1Z + f21 * v21Z;    pointAndTime.w=root21;    t0=root21;    isect=POINT_ON_TRIANGLE_EDGE;  }  return isect;}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener l){  m_Support.removePropertyChangeListener(l);}  }
class C{  public boolean isMoveToAllowed(){  return moveToAllowed;}  }
class C{  public static Validator<CharSequence> iPv4Address(@NonNull final CharSequence errorMessage){  return new IPv4AddressValidator(errorMessage);}  }
class C{  @SubscribeEvent public static void breakBlock(BlockEvent.BreakEvent event){  if (isPlayerHarvestingLogWithoutCorrectTool(event.getState(),event.getWorld(),event.getPos(),event.getPlayer())) {    event.setCanceled(true);  }}  }
class C{  public void test_group_concat_with_complex_inner_value_expression(){  AbstractTripleStore kb=TestMockUtility.mockTripleStore(getName());  try {    final BOpContext<IBindingSet> context=TestMockUtility.mockContext(kb);    final String lexiconNamespace=kb.getLexiconRelation().getNamespace();    final String namespace=getName();    final GlobalAnnotations globals=new GlobalAnnotations(lexiconNamespace,ITx.READ_COMMITTED);    final BigdataValueFactory f=BigdataValueFactoryImpl.getInstance(namespace);    final IVariable<IV> org=Var.var("org");    final IVariable<IV> auth=Var.var("auth");    final IVariable<IV> book=Var.var("book");    final IVariable<IV> lprice=Var.var("lprice");    final IConstant<String> org1=new Constant<String>("org1");    final IConstant<String> org2=new Constant<String>("org2");    final IConstant<String> auth1=new Constant<String>("auth1");    final IConstant<String> auth2=new Constant<String>("auth2");    final IConstant<String> auth3=new Constant<String>("auth3");    final IConstant<String> book1=new Constant<String>("book1");    final IConstant<String> book2=new Constant<String>("book2");    final IConstant<String> book3=new Constant<String>("book3");    final IConstant<String> book4=new Constant<String>("book4");    final IConstant<XSDNumericIV<BigdataLiteral>> price5=new Constant<XSDNumericIV<BigdataLiteral>>(new XSDNumericIV<BigdataLiteral>(5));    price5.get().setValue(f.createLiteral(5));    final IConstant<XSDNumericIV<BigdataLiteral>> price7=new Constant<XSDNumericIV<BigdataLiteral>>(new XSDNumericIV<BigdataLiteral>(7));    price7.get().setValue(f.createLiteral(7));    final IConstant<XSDNumericIV<BigdataLiteral>> price9=new Constant<XSDNumericIV<BigdataLiteral>>(new XSDNumericIV<BigdataLiteral>(9));    price9.get().setValue(f.createLiteral(9));    final IBindingSet data[]=new IBindingSet[]{new ContextBindingSet(context,new ListBindingSet(new IVariable<?>[]{org,auth,book,lprice},new IConstant[]{org1,auth1,book1,price9})),new ContextBindingSet(context,new ListBindingSet(new IVariable<?>[]{org,auth,book,lprice},new IConstant[]{org1,auth1,book2,price5})),new ContextBindingSet(context,new ListBindingSet(new IVariable<?>[]{org,auth,book,lprice},new IConstant[]{org1,auth2,book3,price7})),new ContextBindingSet(context,new ListBindingSet(new IVariable<?>[]{org,auth,book,lprice},new IConstant[]{org2,auth3,book4,price7}))};    final GROUP_CONCAT op=new GROUP_CONCAT(false,new StrBOp(new MathBOp(lprice,new Constant<IV>(new XSDNumericIV(1)),MathBOp.MathOp.PLUS,globals),globals),namespace,",");    assertFalse(op.isDistinct());    assertFalse(op.isWildcard());    op.reset();    for (    IBindingSet bs : data) {      op.get(bs);    }    assertEquals(new LiteralImpl("10,6,8,8"),op.done().getValue());  }  finally {    kb.getIndexManager().destroy();  }}  }
class C{  public Plane(double nx,double ny,double nz,double d){  if (nx == 0.0 && ny == 0.0 && nz == 0.0) {    throw new IllegalArgumentException("Vector Is Zero");  }  this.n=new Vec4(nx,ny,nz,d);}  }
class C{  public static boolean isMpqMagicExt(final byte[] magic){  if (magic.length != MPQ_MAGIC_EXT.length)   return false;  for (int i=0; i < MPQ_MAGIC_EXT.length; i++)   if (MPQ_MAGIC_EXT[i] != magic[i])   return false;  return true;}  }
class C{  public synchronized Object clone() throws CloneNotSupportedException {  VariableStack vs=(VariableStack)super.clone();  vs._stackFrames=(XObject[])_stackFrames.clone();  vs._links=(int[])_links.clone();  return vs;}  }
class C{  public boolean isValid(Object value,String invalidValue,String expectedFormat,ExceptionMessageListener receiver){  boolean valid=true;  if (null == value) {    value="";  }  valid=super.isValid(value,invalidValue,expectedFormat,receiver);  if (valid && (((String)value).length() != 0)) {    try {      long i=Long.parseLong(((String)value));      if (i < m_minValue) {        valid=false;        receiver.addExceptionMessage(getMessageFactory().create(MessageContextFactory.BELOW_MIN_VALUE.create(MessageContextFactory.MIN_VALUE.create(new Long(m_minValue)))));      }      if (i > m_maxValue) {        valid=false;        receiver.addExceptionMessage(getMessageFactory().create(MessageContextFactory.EXCEEDS_MAX_VALUE.create(MessageContextFactory.MAX_VALUE.create(new Long(m_maxValue)))));      }    } catch (    Exception ex) {      throw new Error("Coding error - received an exception attempting to conver " + value + " to a long.  This should never happen");    }  }  return valid;}  }
class C{  public static InetAddress parseInetAddr(byte[] inetAddrBytes,int offset,int count){  InetAddress inetAddress=null;  StringBuilder sb=new StringBuilder();  for (int i=0; i < count; i++) {    sb.append(Integer.toString(inetAddrBytes[offset + i] & 0xff));    if (i != count - 1) {      sb.append('.');    }  }  try {    inetAddress=InetAddress.getByName(sb.toString());  } catch (  UnknownHostException e) {    e.printStackTrace();  }  return inetAddress;}  }
class C{  public long[] select(long rank,long[] dest,final int offset,final int length){  if (length == 0)   return dest;  long s=select(rank);  dest[offset]=s;  int curr=(int)(s / Long.SIZE);  long window=bits[curr] & -1L << s;  window&=window - 1;  for (int i=1; i < length; i++) {    while (window == 0)     window=bits[++curr];    dest[offset + i]=curr * Long.SIZE + Long.numberOfTrailingZeros(window);    window&=window - 1;  }  return dest;}  }
class C{  protected void addLink(String field,int len,int n,int e){  int[] array=(int[])m_links.get(n,field);  if (array == null) {    array=new int[]{e};    m_links.set(n,field,array);    return;  } else   if (len == array.length) {    int[] narray=new int[Math.max(3 * array.length / 2,len + 1)];    System.arraycopy(array,0,narray,0,array.length);    array=narray;    m_links.set(n,field,array);  }  array[len]=e;}  }
class C{  private boolean selectDBSchemaFile(String name){  FileObject dbschemaFl=FileUtil.toFileObject(new File(name));  if (dbschemaFl == null) {    return false;  }  dbschemaComboBox.setSelectedItem(dbschemaFl);  if (!dbschemaFl.equals(dbschemaComboBox.getSelectedItem())) {    return false;  }  dbschemaRadioButton.setSelected(true);  return true;}  }
class C{  public void insert(List<Operator> newOperators){  Object selectedNode=getSelectedOperator();  if (selectedNode == null) {    SwingTools.showVerySimpleErrorMessage("cannot_insert_operator");    return;  } else   if (mainFrame.getProcessPanel().getProcessRenderer().getModel().getDisplayedChain() == selectedNode) {    for (    Operator newOperator : newOperators) {      int index=mainFrame.getProcessPanel().getProcessRenderer().getProcessIndexUnder(mainFrame.getProcessPanel().getProcessRenderer().getModel().getCurrentMousePosition());      if (index == -1) {        index=0;      }      ((OperatorChain)selectedNode).getSubprocess(index).addOperator(newOperator);    }  } else {    int i=0;    Operator selectedOperator=(Operator)selectedNode;    ExecutionUnit process=selectedOperator.getExecutionUnit();    int parentIndex=process.getOperators().indexOf(selectedOperator) + 1;    for (    Operator newOperator : newOperators) {      process.addOperator(newOperator,parentIndex + i);      i++;    }  }  AutoWireThread.autoWireInBackground(newOperators,true);  mainFrame.selectOperators(newOperators);}  }
class C{  protected void reset(){  clear(TimeZone.getDefault().getID());  setToNow();}  }
class C{  public int encodeBase64Partial(int bits,int outputBytes,char[] buffer,int outPtr){  buffer[outPtr++]=_base64ToAsciiC[(bits >> 18) & 0x3F];  buffer[outPtr++]=_base64ToAsciiC[(bits >> 12) & 0x3F];  if (_usesPadding) {    buffer[outPtr++]=(outputBytes == 2) ? _base64ToAsciiC[(bits >> 6) & 0x3F] : _paddingChar;    buffer[outPtr++]=_paddingChar;  } else {    if (outputBytes == 2) {      buffer[outPtr++]=_base64ToAsciiC[(bits >> 6) & 0x3F];    }  }  return outPtr;}  }
class C{  public int digest(byte[] buf,int offset,int len) throws DigestException {  if (buf == null) {    throw new IllegalArgumentException("No output buffer given");  }  if (buf.length - offset < len) {    throw new IllegalArgumentException("Output buffer too small for specified offset and length");  }  int numBytes=engineDigest(buf,offset,len);  state=INITIAL;  return numBytes;}  }
class C{  public boolean autoGeneratedId(){  return this.autoGeneratedId;}  }
class C{  public float[][] allPairsShortestPaths(float[][] adjMatrix){  for (int i=0; i < numVertices; i++) {    for (int j=0; j < numVertices; j++) {      if (adjMatrix[i][j] != 0) {        Dk_minus_one[i][j]=adjMatrix[i][j];        Pk_minus_one[i][j]=i;      } else {        Dk_minus_one[i][j]=Float.MAX_VALUE;        Pk_minus_one[i][j]=-1;      }    }  }  for (int k=0; k < numVertices; k++) {    for (int i=0; i < numVertices; i++) {      for (int j=0; j < numVertices; j++) {        if (i != j) {          if (Dk_minus_one[i][j] <= Dk_minus_one[i][k] + Dk_minus_one[k][j]) {            Dk[i][j]=Dk_minus_one[i][j];            Pk[i][j]=Pk_minus_one[i][j];          } else {            Dk[i][j]=Dk_minus_one[i][k] + Dk_minus_one[k][j];            Pk[i][j]=Pk_minus_one[k][j];          }        } else {          Pk[i][j]=-1;        }      }    }    for (int i=0; i < numVertices; i++) {      for (int j=0; j < numVertices; j++) {        Dk_minus_one[i][j]=Dk[i][j];        Pk_minus_one[i][j]=Pk[i][j];      }    }  }  return Dk;}  }
class C{  @Override public void onAction(final Player player,final RPAction action){  if (action.has(TARGET)) {    final Entity entity=EntityHelper.entityFromTargetName(action.get(TARGET),player);    if (entity instanceof RPEntity) {      StendhalRPAction.startAttack(player,(RPEntity)entity);    }  }}  }
class C{  public Interval withStartMillis(long startInstant){  if (startInstant == getStartMillis()) {    return this;  }  return new Interval(startInstant,getEndMillis(),getChronology());}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MSession[").append(getAD_Session_ID()).append(",AD_User_ID=").append(getCreatedBy()).append(",").append(getCreated()).append(",Remote=").append(getRemote_Addr());  String s=getRemote_Host();  if (s != null && s.length() > 0)   sb.append(",").append(s);  if (m_webStoreSession)   sb.append(",WebStoreSession");  sb.append("]");  return sb.toString();}  }
class C{  private Class<?> findClassNonDalvik(String name) throws ClassNotFoundException {  String pathName=CLASS_PATH + name + ".class";  File path=new File(pathName);  RandomAccessFile raf;  try {    raf=new RandomAccessFile(path,"r");  } catch (  FileNotFoundException fnfe) {    throw new ClassNotFoundException("Not found: " + pathName);  }  byte[] fileData;  try {    fileData=new byte[(int)raf.length()];    raf.readFully(fileData);  } catch (  IOException ioe) {    throw new ClassNotFoundException("Read error: " + pathName);  } finally {    try {      raf.close();    } catch (    IOException ioe) {    }  }  try {    return defineClass(name,fileData,0,fileData.length);  } catch (  Throwable th) {    throw new ClassNotFoundException("defineClass failed",th);  }}  }
class C{  public void testClientClose() throws Exception {  IgniteCache<String,String> cache0=grid(0).getOrCreateCache(getClientConfig());  assert cache0.get(KEY_VAL) == null;  cache0.put(KEY_VAL,KEY_VAL);  assert cache0.get(KEY_VAL).equals(KEY_VAL);  IgniteCache<String,String> cache1=grid(1).cache(CACHE_NAME_CLIENT);  IgniteCache<String,String> cache2=grid(2).cache(CACHE_NAME_CLIENT);  assert cache2.get(KEY_VAL).equals(KEY_VAL);  cache2.close();  assert cache0.get(KEY_VAL).equals(KEY_VAL);  assert cache1.get(KEY_VAL).equals(KEY_VAL);  try {    cache2.get(KEY_VAL);    assert false;  } catch (  IllegalStateException ignored) {  }  IgniteCache<String,String> cache2New=grid(2).cache(CACHE_NAME_CLIENT);  assertNotSame(cache2,cache2New);  assert cache2New.get(KEY_VAL).equals(KEY_VAL);  cache0.put(KEY_VAL,KEY_VAL + "recreated");  assert cache0.get(KEY_VAL).equals(KEY_VAL + "recreated");  assert cache1.get(KEY_VAL).equals(KEY_VAL + "recreated");  assert cache2New.get(KEY_VAL).equals(KEY_VAL + "recreated");}  }
class C{  public HelpTipObject(){  super();}  }
class C{  protected void installListeners(Accessible a){  installListeners(a.getAccessibleContext());}  }
class C{  private void checkAvailability(final String uri) throws Exception {  boolean availabe=findAvailability(getInstance(uri));  int counter=1;  while (!availabe && counter < RETRY_NUMBER) {    try {      _log.warn("Resource {} not found on Array. Waiting for a minute to check availability. Count : {}",uri,counter);      Thread.sleep(DELAY_NUMBER);    } catch (    InterruptedException ex) {      Thread.currentThread().interrupt();    }    availabe=findAvailability(getInstance(uri));    counter++;  }  if (!availabe) {    throw XIVRestException.exceptions.resourceNotFound(uri);  }}  }
class C{  public CBCBlockCipherMac(BlockCipher cipher,BlockCipherPadding padding){  this(cipher,(cipher.getBlockSize() * 8) / 2,padding);}  }
class C{  public RuntimeOperationsException(java.lang.RuntimeException e){  super();  runtimeException=e;}  }
class C{  public AccountHeaderBuilder withHeightDp(int heightDp){  this.mHeight=DimenHolder.fromDp(heightDp);  return this;}  }
class C{  @SuppressWarnings("unchecked") public Object clone() throws CloneNotSupportedException {  VolumeDataset clone=(VolumeDataset)super.clone();  clone.data=(List<IndicatorSeries>)ObjectUtilities.deepClone(this.data);  return clone;}  }
class C{  public static void translationY(View v,float fromY,float toY,int duration,Animator.AnimatorListener animatorListener){  ObjectAnimator animator=ObjectAnimator.ofFloat(v,View.TRANSLATION_Y,fromY,toY);  animator.setDuration(duration);  if (animatorListener != null) {    animator.addListener(animatorListener);  }  animator.start();}  }
class C{  public SequenceElement parse(String content) throws IOException, SAXException, ParserConfigurationException {  return this.parse(new ByteArrayInputStream(content.getBytes(Charset.forName("UTF-8"))));}  }
class C{  @Override public String toString(){  return "ObjectStat{" + "bucket='" + bucketName + '\''+ ", name='"+ name+ '\''+ ", contentType='"+ contentType+ '\''+ ", createdTime="+ createdTime+ ", length="+ length+ ", etag='"+ etag+ '\''+ '}';}  }
class C{  public AtomicLongArray(long[] array){  this.array=array.clone();}  }
class C{  public void drawTile(TileDirectory drawtd,VPFGraphicWarehouse warehouse,LatLonPoint ll1,LatLonPoint ll2,float dpplat,float dpplon){  if (Debug.debugging("vpf.tile")) {    Debug.output("Drawtile for " + drawtd);  }  TableHolder tables=new TableHolder(this);  tables.drawTile(drawtd,warehouse,ll1,ll2,dpplat,dpplon);}  }
class C{  public StatisticNotFoundException(Throwable cause){  super();  this.initCause(cause);}  }
class C{  public static boolean isLegalFileNameChar(char c){  return ILLEGAL_FILE_NAME_CHARS.indexOf(c) == -1;}  }
class C{  public void testJsp() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/simple-war/index.jsp");  final String expected="Sample page for testing";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.N4_GETTER_DECLARATION___GET_DEFINED_TYPE_ELEMENT:    return getDefinedTypeElement();case N4JSPackage.N4_GETTER_DECLARATION___IS_ABSTRACT:  return isAbstract();case N4JSPackage.N4_GETTER_DECLARATION___IS_VALID_NAME:return isValidName();case N4JSPackage.N4_GETTER_DECLARATION___GET_ANNOTATIONS:return getAnnotations();case N4JSPackage.N4_GETTER_DECLARATION___IS_DECLARED_STATIC:return isDeclaredStatic();case N4JSPackage.N4_GETTER_DECLARATION___IS_STATIC:return isStatic();case N4JSPackage.N4_GETTER_DECLARATION___IS_DECLARED_FINAL:return isDeclaredFinal();case N4JSPackage.N4_GETTER_DECLARATION___IS_FINAL:return isFinal();case N4JSPackage.N4_GETTER_DECLARATION___IS_CONSTRUCTOR:return isConstructor();case N4JSPackage.N4_GETTER_DECLARATION___IS_CALLABLE_CONSTRUCTOR:return isCallableConstructor();}return super.eInvoke(operationID,arguments);}  }
class C{  public Iterator<Map.Entry<K,Integer>> entryIterator(){  return refSet.entrySet().iterator();}  }
class C{  private void configureMQDestination(MQDestination dest) throws JMSException {  if (npsurviverestart) {    dest.setPersistence(CommonConstants.WMQ_PER_NPHIGH);  }  if (Config.parms.getBoolean("jf")) {    setPutAsyncAllowed(dest);  }  if (Config.parms.getBoolean("jy")) {    setReadAheadAllowed(dest);  }  if (receiveConversion.equals("WMQ_RECEIVE_CONVERSION_QMGR")) {    setReceiveConversion(dest,"WMQ_RECEIVE_CONVERSION_QMGR");  } else   if (receiveConversion.equals("WMQ_RECEIVE_CONVERSION_CLIENT_MSG")) {    setReceiveConversion(dest,"WMQ_RECEIVE_CONVERSION_CLIENT_MSG");  }}  }
class C{  public void reinitElements(){  this.removeAll();  initElements();}  }
class C{  @Override protected boolean isPrepared(final Player player){  if (player.isEquipped(NEEDED_EQUIPMENT)) {    return true;  }  player.sendPrivateText("You need a gold pan to prospect for gold.");  return false;}  }
class C{  public void clear(){  this.items.clear();  if (children != null) {    for (    QuadTreeNode child : children) {      child.clear();    }    children=null;  }}  }
class C{  public final char readChar() throws IOException {  return (char)readShort();}  }
class C{  @Override public void connectionNotification(String eventName,Object source){  if (connectionAllowed(eventName)) {    if (m_firstInput == null) {      m_firstInput=source;      m_firstInputConnectionType=eventName;    } else {      m_secondInput=source;      m_secondInputConnectionType=eventName;    }  }  if (m_firstInput != null && m_secondInput != null) {    if (m_firstInputConnectionType.length() > 0 || m_secondInputConnectionType.length() > 0) {      if (!m_firstInputConnectionType.equals("instance") && !m_secondInputConnectionType.equals("instance")) {        m_incomingBatchConnections=true;      } else {        m_incomingBatchConnections=false;      }    } else {      m_incomingBatchConnections=false;    }  }}  }
class C{  private JsonToken advance() throws IOException {  peek();  JsonToken result=token;  token=null;  value=null;  name=null;  return result;}  }
class C{  public FileMatch(){}  }
class C{  private String generateNewUnassignedIdChunk(){  String id="";  Random rand=new Random();  int idBits=rand.nextInt();  for (int i=0; i < 4; ++i) {    id+=(idBits & 1);    idBits>>=1;  }  return id;}  }
class C{  public Void call() throws Exception {  final ICloseableIterator<IBindingSet[]> source=context.getSource();  try {    while (source.hasNext()) {      final IBindingSet[] chunk=source.next();      for (      IBindingSet bset : chunk) {        consumeBindingSet(bset);      }    }    context.getSink().flush();    return null;  }  finally {    source.close();    context.getSink().close();    if (context.getSink2() != null)     context.getSink2().close();  }}  }
class C{  public Vector2i sub(Vector2i v,Vector2i dest){  dest.x=x - v.x;  dest.y=y - v.y;  return dest;}  }
class C{  public CoapEndpoint(final InetSocketAddress address){  this(address,NetworkConfig.getStandard());}  }
class C{  public CSVReader(Reader reader,char separator,char quotechar){  this(reader,separator,quotechar,CSVParser.DEFAULT_ESCAPE_CHARACTER,DEFAULT_SKIP_LINES,CSVParser.DEFAULT_STRICT_QUOTES);}  }
class C{  public static Map<String,Object> clearAllEntityCaches(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  Boolean distributeBool=(Boolean)context.get("distribute");  boolean distribute=false;  if (distributeBool != null)   distribute=distributeBool.booleanValue();  delegator.clearAllCaches(distribute);  return ServiceUtil.returnSuccess();}  }
class C{  @After public void tearDown(){  comparator=null;}  }
class C{  public AccessibleStateSet(){  states=null;}  }
class C{  void show(final JScrollPane view,final Point pt){  if (view.getViewport().getView() instanceof JTree) {    showJTree(view,pt);  } else   if (view.getViewport().getView() instanceof JList) {    showJList(view,pt);  } else {    assert false : "Bad component type registered: " + view.getViewport().getView();  }}  }
class C{  public boolean saveAsKML(Writer writer){  try {    writer.write("<?xml version='1.0' encoding='UTF-8'?>\n");    writer.write("<kml xmlns='http://www.opengis.net/kml/2.2'>\n");    boolean result=true;    if (mKmlRoot != null)     result=mKmlRoot.writeAsKML(writer,true,this);    writer.write("</kml>\n");    return result;  } catch (  IOException e) {    e.printStackTrace();    return false;  }}  }
class C{  public double lnFactorial(int n){  if (n < 0)   return weka.core.SpecialFunctions.lnFactorial(n);  if (m_lnFactorialCache.length <= n) {    double[] tmp=new double[n + 1];    System.arraycopy(m_lnFactorialCache,0,tmp,0,m_lnFactorialCache.length);    for (int i=m_lnFactorialCache.length; i < tmp.length; i++)     tmp[i]=tmp[i - 1] + Math.log(i);    m_lnFactorialCache=tmp;  }  return m_lnFactorialCache[n];}  }
class C{  public AddPrimaryKeyChange(Table table,Column[] primaryKeyColumns){  super(table);  _primaryKeyColumns=primaryKeyColumns;}  }
class C{  private void addSrcEntry(ConcreteRule<TK,FV> rule){  int startPos=rule.sourcePosition;  int endPos=startPos + rule.abstractRule.source.size() - 1;  assert startPos <= endPos : String.format("Illegal span: [%d,%d]",startPos,endPos);  assert endPos < sequenceLength : String.format("End index out of bounds: [%d,%d] >= %d",startPos,endPos,sequenceLength);  int targetLength=rule.abstractRule.target.size();  int sourceLength=rule.abstractRule.source.size();  if (targetLength > maxTargetLength)   maxTargetLength=targetLength;  if (sourceLength > maxSourceLength)   maxSourceLength=sourceLength;  int offset=getIndex(startPos,endPos);  if (grid[offset] == null)   grid[offset]=new ArrayList<>();  grid[offset].add(rule);  isSorted.clear(offset);  coverage.or(rule.sourceCoverage);}  }
class C{  public boolean isJustMigrated(){  Object oo=get_Value(COLUMNNAME_IsJustMigrated);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  static int makeTag(final int fieldNumber,final int wireType){  return (fieldNumber << TAG_TYPE_BITS) | wireType;}  }
class C{  @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){  View v=inflater.inflate(R.layout.hello_world,container,false);  View tv=v.findViewById(R.id.text);  ((TextView)tv).setText(mLabel != null ? mLabel : "(no label)");  tv.setBackgroundDrawable(getResources().getDrawable(android.R.drawable.gallery_thumb));  return v;}  }
class C{  public TCacheHolderIterator<K,V> iterator(){  throwISEwhenClosed();  return new TCacheHolderIterator<K,V>(this,this.objects,this.expiryPolicy,false);}  }
class C{  public AttributeSelectionPanel(){  this(true,true,true,true);}  }
class C{  MemoryPage(Address pageAddress){  this.pageAddress=pageAddress;  this.readable=true;  this.data=new int[BYTES_IN_PAGE >>> LOG_BYTES_IN_CELL];  this.watch=getWatchPoints();  if (Trace.isEnabled(Item.MEMORY)) {    Clock.stop();    Object[] args={pageAddress};    Trace.trace(Item.MEMORY,"Mapping page %s%n",args);    Clock.start();  }}  }
class C{  public HighlightBuilder phraseLimit(Integer phraseLimit){  this.phraseLimit=phraseLimit;  return this;}  }
class C{  public void unpop(Node nde){  nde.insertBefore(head);  head=nde;  size++;}  }
class C{  @SuppressLint("NewApi") private static List<String> loadTagJson(Context context){  try (InputStream stream=context.getAssets().open("tags.txt")){    try (Reader reader=new InputStreamReader(stream,Charsets.UTF_8)){      ImmutableList.Builder<String> result=ImmutableList.builder();      for (      String line : CharStreams.readLines(reader)) {        line=line.trim();        if (line.length() > 1) {          result.add(line.trim());        }      }      return result.build();    }   } catch (  Exception error) {    logger.error("Could not load list of tags",error);    return Collections.emptyList();  }}  }
class C{  protected Label readLabel(int offset,Label[] labels){  if (labels[offset] == null) {    labels[offset]=new Label();  }  return labels[offset];}  }
class C{  public void start(){  if (!started) {    started=true;    deltaUs=elapsedRealtimeMinus(positionUs);  }}  }
class C{  public static void fill(GL2 gl,Shape s){  gl.glBegin(GL2.GL_TRIANGLE_FAN);  drawShape(gl,s);  gl.glEnd();}  }
class C{  public int adjustAlpha(int color,float factor){  int alpha=Math.round(Color.alpha(color) * factor);  int red=Color.red(color);  int green=Color.green(color);  int blue=Color.blue(color);  return Color.argb(alpha,red,green,blue);}  }
class C{  public boolean hasNext(){  return (current < length);}  }
class C{  public void validateBusinessObjectDataStatusChangeMessage(String message,BusinessObjectDataKey businessObjectDataKey,Integer businessObjectDataId,String username,String newBusinessObjectDataStatus,String oldBusinessObjectDataStatus,List<Attribute> businessObjectDataAttributes){  validateXmlFieldPresent(message,"correlation-id","BusinessObjectData_" + businessObjectDataId);  validateXmlFieldPresent(message,"triggered-by-username",username);  validateXmlFieldPresent(message,"context-message-type","testDomain/testApplication/BusinessObjectDataStatusChanged");  validateXmlFieldPresent(message,"newBusinessObjectDataStatus",newBusinessObjectDataStatus);  if (oldBusinessObjectDataStatus == null) {    validateXmlFieldNotPresent(message,"oldBusinessObjectDataStatus");  } else {    validateXmlFieldPresent(message,"oldBusinessObjectDataStatus",oldBusinessObjectDataStatus);  }  validateXmlFieldPresent(message,"namespace",businessObjectDataKey.getNamespace());  validateXmlFieldPresent(message,"businessObjectDefinitionName",businessObjectDataKey.getBusinessObjectDefinitionName());  validateXmlFieldPresent(message,"businessObjectFormatUsage",businessObjectDataKey.getBusinessObjectFormatUsage());  validateXmlFieldPresent(message,"businessObjectFormatFileType",businessObjectDataKey.getBusinessObjectFormatFileType());  validateXmlFieldPresent(message,"businessObjectFormatVersion",businessObjectDataKey.getBusinessObjectFormatVersion());  validateXmlFieldPresent(message,"partitionValue",businessObjectDataKey.getPartitionValue());  if (CollectionUtils.isEmpty(businessObjectDataKey.getSubPartitionValues())) {    validateXmlFieldNotPresent(message,"subPartitionValues");  } else {    validateXmlFieldPresent(message,"subPartitionValues");  }  for (  String subPartitionValue : businessObjectDataKey.getSubPartitionValues()) {    validateXmlFieldPresent(message,"partitionValue",subPartitionValue);  }  if (CollectionUtils.isEmpty(businessObjectDataAttributes)) {    validateXmlFieldNotPresent(message,"attributes");  } else {    validateXmlFieldPresent(message,"attributes");  }  for (  Attribute attribute : businessObjectDataAttributes) {    validateXmlFieldPresent(message,"attribute","name",attribute.getName(),attribute.getValue() == null ? AbstractServiceTest.EMPTY_STRING : attribute.getValue());  }  validateXmlFieldPresent(message,"businessObjectDataVersion",businessObjectDataKey.getBusinessObjectDataVersion());}  }
class C{  public void add(Product service,List<VOCatalogEntry> entries,boolean active){  technicalProducts.add(service.getTechnicalProduct());  if (entries != null && entries.size() > 0 && service.getTargetCustomer() == null) {    final Long tpKey=Long.valueOf(service.getTechnicalProduct().getKey());    if (!triggerOperations.containsKey(tpKey)) {      triggerOperations.put(tpKey,new ArrayList<TriggerData>());    }    for (    VOCatalogEntry catalogEntry : entries) {      VOMarketplace mp=catalogEntry.getMarketplace();      if (mp != null) {        triggerOperations.get(tpKey).add(new TriggerData(service.getKey(),mp.getKey(),catalogEntry.isVisibleInCatalog(),active));      }    }  }}  }
class C{  public static Element drawEuclidean(SVGPlot svgp,Projection2D proj,NumberVector mid,double radius){  double[] v_mid=mid.toArray();  long[] dims=proj.getVisibleDimensions2D();  SVGPath path=new SVGPath();  for (int dim=BitsUtil.nextSetBit(dims,0); dim >= 0; dim=BitsUtil.nextSetBit(dims,dim + 1)) {    v_mid[dim]+=radius;    double[] p1=proj.fastProjectDataToRenderSpace(v_mid);    v_mid[dim]-=radius;    v_mid[dim]-=radius;    double[] p2=proj.fastProjectDataToRenderSpace(v_mid);    v_mid[dim]+=radius;    double[] dt1=new double[v_mid.length];    dt1[dim]=radius;    double[] d1=proj.fastProjectRelativeDataToRenderSpace(dt1);    for (int dim2=BitsUtil.nextSetBit(dims,0); dim2 >= 0; dim2=BitsUtil.nextSetBit(dims,dim2 + 1)) {      if (dim < dim2) {        v_mid[dim2]+=radius;        double[] p3=proj.fastProjectDataToRenderSpace(v_mid);        v_mid[dim2]-=radius;        v_mid[dim2]-=radius;        double[] p4=proj.fastProjectDataToRenderSpace(v_mid);        v_mid[dim2]+=radius;        double[] dt2=new double[v_mid.length];        dt2[dim2]=radius;        double[] d2=proj.fastProjectRelativeDataToRenderSpace(dt2);        path.moveTo(p1[0],p1[1]);        path.cubicTo(p1[0] + d2[0] * EUCLIDEAN_KAPPA,p1[1] + d2[1] * EUCLIDEAN_KAPPA,p3[0] + d1[0] * EUCLIDEAN_KAPPA,p3[1] + d1[1] * EUCLIDEAN_KAPPA,p3[0],p3[1]);        path.cubicTo(p3[0] - d1[0] * EUCLIDEAN_KAPPA,p3[1] - d1[1] * EUCLIDEAN_KAPPA,p2[0] + d2[0] * EUCLIDEAN_KAPPA,p2[1] + d2[1] * EUCLIDEAN_KAPPA,p2[0],p2[1]);        path.cubicTo(p2[0] - d2[0] * EUCLIDEAN_KAPPA,p2[1] - d2[1] * EUCLIDEAN_KAPPA,p4[0] - d1[0] * EUCLIDEAN_KAPPA,p4[1] - d1[1] * EUCLIDEAN_KAPPA,p4[0],p4[1]);        path.cubicTo(p4[0] + d1[0] * EUCLIDEAN_KAPPA,p4[1] + d1[1] * EUCLIDEAN_KAPPA,p1[0] - d2[0] * EUCLIDEAN_KAPPA,p1[1] - d2[1] * EUCLIDEAN_KAPPA,p1[0],p1[1]);        path.close();      }    }  }  return path.makeElement(svgp);}  }
class C{  public DeadEvent(Object source,Object event){  this.source=source;  this.event=event;}  }
class C{  public boolean isAllowedToViewValues(){  return allowedToViewValues;}  }
class C{  public static void drawBuffer(DrawContext dc,int mode,int count,DoubleBuffer verts,DoubleBuffer coords){  if (dc == null) {    String message=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (verts == null || coords == null) {    String message=Logging.getMessage("nullValue.BufferIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  GL2 gl=dc.getGL().getGL2();  gl.glPushClientAttrib(GL2.GL_CLIENT_VERTEX_ARRAY_BIT);  gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);  gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);  gl.glVertexPointer(2,GL2.GL_DOUBLE,0,verts);  gl.glTexCoordPointer(2,GL2.GL_DOUBLE,0,coords);  gl.glDrawArrays(mode,0,count);  gl.glPopClientAttrib();}  }
class C{  void recomposeNamespaceAliases(NamespaceAlias nsAlias){  m_namespaceAliasComposed.put(nsAlias.getStylesheetNamespace(),nsAlias);}  }
class C{  @SuppressWarnings("unchecked") static public void assertSameIteratorAnyOrder(final Object[] expected,final Iterator actual){  assertSameIteratorAnyOrder("",expected,actual);}  }
class C{  public void eliminarPrevisiones(String[] previsionesAEliminar) throws ActionNotAllowedException {  PistaAuditoriaTransferencias pistaAuditoria=AuditoriaTransferencias.crearPistaAuditoria(ArchivoActions.TRANSFERENCIAS_MODULE_BORRADO_PREVISION_TRANSFERENCIA,this);  checkPermission(TransferenciasSecurityManager.GESTION_PREVISION_EN_ORGANO_REMITENTE);  Collection previsionesVO=_previsionDbEntity.getPrevisionesXIds(previsionesAEliminar);  PrevisionAuthorizationHelper authorizationHelper=getPrevisionAuthorizationHelper();  boolean canBeDone=true;  for (Iterator itPrevisionesVO=previsionesVO.iterator(); itPrevisionesVO.hasNext(); ) {    PrevisionVO previsionVO=(PrevisionVO)itPrevisionesVO.next();    if (!authorizationHelper.puedeSerEliminada(previsionVO))     canBeDone=false;  }  if (!canBeDone)   throw new PrevisionOperacionNoPermitidaException(authorizationHelper.getErrorCode());  iniciarTransaccion();  for (Iterator itPrevisionesVO=previsionesVO.iterator(); itPrevisionesVO.hasNext(); ) {    PrevisionVO previsionVO=(PrevisionVO)itPrevisionesVO.next();    _previsionDbEntity.deletePrevision(previsionVO.getId());    _detallePrevisionDBEntity.dropRow(previsionVO.getId(),null);  }  Locale locale=getServiceClient().getLocale();  pistaAuditoria.auditaEliminarPrevisiones(locale,previsionesVO);  commit();}  }
class C{  public IpcSharedMemoryOperationTimedoutException(String msg){  super(msg);}  }
class C{  static byte[] discardNonBase64(byte[] data){  byte groomedData[]=new byte[data.length];  int bytesCopied=0;  for (int i=0; i < data.length; i++) {    if (isBase64(data[i])) {      groomedData[bytesCopied++]=data[i];    }  }  byte packedData[]=new byte[bytesCopied];  System.arraycopy(groomedData,0,packedData,0,bytesCopied);  return packedData;}  }
class C{  private static void clearCalorie(MyTracksProviderUtils myTracksProviderUtils,Track track){  track.getTripStatistics().setCalorie(0);  myTracksProviderUtils.updateTrack(track);  Cursor cursor=null;  try {    cursor=myTracksProviderUtils.getWaypointCursor(track.getId(),-1L,-1);    if (cursor != null && cursor.moveToFirst()) {      Waypoint waypoint=getNextStatisticsWaypoint(myTracksProviderUtils,cursor);      while (waypoint != null) {        waypoint.getTripStatistics().setCalorie(0);        myTracksProviderUtils.updateWaypoint(waypoint);        waypoint=getNextStatisticsWaypoint(myTracksProviderUtils,cursor);      }    }  }  finally {    if (cursor != null) {      cursor.close();    }  }}  }
class C{  public Period plusMonths(long monthsToAdd){  if (monthsToAdd == 0) {    return this;  }  return create(years,Math.toIntExact(Math.addExact(months,monthsToAdd)),days);}  }
class C{  public BaseDateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,int secondOfMinute,int millisOfSecond,Chronology chronology){  super();  iChronology=checkChronology(chronology);  long instant=iChronology.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);  iMillis=checkInstant(instant,iChronology);}  }
class C{  @Override public void toBytes(ByteBuf buf){  buf.writeBoolean(revealHiddenBlocks);  buf.writeByte(hand.ordinal());}  }
class C{  private void remove(Method method,Annotation label,Annotation[] list) throws Exception {  MethodPart part=factory.getInstance(method,label,list);  MethodType type=part.getMethodType();  if (type == MethodType.GET) {    remove(part,read);  }  if (type == MethodType.IS) {    remove(part,read);  }  if (type == MethodType.SET) {    remove(part,write);  }}  }
class C{  public static boolean isKnownAsUse(BytecodeInstruction instruction){  return registeredUses.containsKey(instruction);}  }
class C{  public KnowledgeEdge(String from,String to){  if (from == null || to == null) {    throw new NullPointerException();  }  this.from=from;  this.to=to;}  }
class C{  public ContentModel(Element content){  this(0,content,null);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void run(){  if (running) {    Out.error(ErrorMessages.ALREADY_RUNNING);    parent.generationFinished(false);  } else {    running=true;    setPriority(MIN_PRIORITY);    try {      if (!outputDir.equals("")) {        Options.setDir(outputDir);      }      Main.generate(new File(inputFile));      Out.statistics();      parent.generationFinished(true);    } catch (    GeneratorException e) {      Out.statistics();      parent.generationFinished(false);    } finally {      running=false;    }  }}  }
class C{  public Graphics create(){  return new ProxyPrintGraphics(getGraphics().create(),printJob);}  }
class C{  @Override public void zoomDomainAxes(double factor,PlotRenderingInfo info,Point2D source){  zoomDomainAxes(factor,info,source,false);}  }
class C{  public boolean refreshDeviceCache(){  try {    final Method refresh=BluetoothGatt.class.getMethod("refresh");    if (refresh != null) {      final boolean success=(Boolean)refresh.invoke(getBluetoothGatt());      Log.i(TAG,"Refreshing result: " + success);      return success;    }  } catch (  Exception e) {    Log.e(TAG,"An exception occured while refreshing device",e);  }  return false;}  }
class C{  private boolean typesMatch(Class<V> valueType,Class getterType){  if (getterType != valueType) {    if (getterType.isPrimitive()) {      return (getterType == float.class && valueType == Float.class) || (getterType == int.class && valueType == Integer.class) || (getterType == boolean.class && valueType == Boolean.class)|| (getterType == long.class && valueType == Long.class)|| (getterType == double.class && valueType == Double.class)|| (getterType == short.class && valueType == Short.class)|| (getterType == byte.class && valueType == Byte.class)|| (getterType == char.class && valueType == Character.class);    }    return false;  }  return true;}  }
class C{  public boolean isEndDateAfter(final LocalDate compareDate){  return this.endDate == null ? false : new LocalDate(this.endDate).isAfter(compareDate);}  }
class C{  public static void deleteRecursive(String path,boolean tryOnly){  if (exists(path)) {    if (isDirectory(path)) {      for (      String s : newDirectoryStream(path)) {        deleteRecursive(s,tryOnly);      }    }    if (tryOnly) {      tryDelete(path);    } else {      delete(path);    }  }}  }
class C{  public Envelope3D(final Envelope envelope){  super(envelope);  if (envelope instanceof Envelope3D) {    this.minz=((Envelope3D)envelope).getMinZ();    this.maxz=((Envelope3D)envelope).getMaxZ();  }}  }
class C{  public static boolean instanceOf(Class<?> type,Object object){  if (type.isInstance(object)) {    return true;  }  Class<?> candidate=object.getClass();  for (  Method method : type.getMethods()) {    try {      candidate.getMethod(method.getName(),method.getParameterTypes());    } catch (    NoSuchMethodException e) {      return false;    }  }  return true;}  }
class C{  private void invalidateBeginTransition(List<Effect> effects,List<Overlay> overlays){  if (mBeginTransition != null && mBeginTransition.isGenerated()) {    final long transitionDurationMs=mBeginTransition.getDuration();    for (    Effect effect : effects) {      if (effect.getStartTime() < transitionDurationMs) {        mBeginTransition.invalidate();        break;      }    }    if (mBeginTransition.isGenerated()) {      for (      Overlay overlay : overlays) {        if (overlay.getStartTime() < transitionDurationMs) {          mBeginTransition.invalidate();          break;        }      }    }  }}  }
class C{  private static int[][] calculateBlackPoints(byte[] luminances,int subWidth,int subHeight,int width,int height){  int[][] blackPoints=new int[subHeight][subWidth];  for (int y=0; y < subHeight; y++) {    int yoffset=y << BLOCK_SIZE_POWER;    int maxYOffset=height - BLOCK_SIZE;    if (yoffset > maxYOffset) {      yoffset=maxYOffset;    }    for (int x=0; x < subWidth; x++) {      int xoffset=x << BLOCK_SIZE_POWER;      int maxXOffset=width - BLOCK_SIZE;      if (xoffset > maxXOffset) {        xoffset=maxXOffset;      }      int sum=0;      int min=0xFF;      int max=0;      for (int yy=0, offset=yoffset * width + xoffset; yy < BLOCK_SIZE; yy++, offset+=width) {        for (int xx=0; xx < BLOCK_SIZE; xx++) {          int pixel=luminances[offset + xx] & 0xFF;          sum+=pixel;          if (pixel < min) {            min=pixel;          }          if (pixel > max) {            max=pixel;          }        }        if (max - min > MIN_DYNAMIC_RANGE) {          for (yy++, offset+=width; yy < BLOCK_SIZE; yy++, offset+=width) {            for (int xx=0; xx < BLOCK_SIZE; xx++) {              sum+=luminances[offset + xx] & 0xFF;            }          }        }      }      int average=sum >> (BLOCK_SIZE_POWER * 2);      if (max - min <= MIN_DYNAMIC_RANGE) {        average=min / 2;        if (y > 0 && x > 0) {          int averageNeighborBlackPoint=(blackPoints[y - 1][x] + (2 * blackPoints[y][x - 1]) + blackPoints[y - 1][x - 1]) / 4;          if (min < averageNeighborBlackPoint) {            average=averageNeighborBlackPoint;          }        }      }      blackPoints[y][x]=average;    }  }  return blackPoints;}  }
class C{  public static void createForwardPage(HttpServletResponse response,String title,String forwardURL,int delaySec) throws ServletException, IOException {  response.setContentType("text/html; charset=UTF-8");  MobileDoc doc=MobileDoc.create(title);  body b=doc.getBody();  b.addElement(getForward(forwardURL,delaySec));  PrintWriter out=response.getWriter();  doc.output(out);  out.flush();  if (out.checkError())   log.log(Level.SEVERE,"Error writing");  out.close();  log.fine(forwardURL + " - " + title);}  }
class C{  public boolean shouldApplicationHandleURL(String url,String caller){  return true;}  }
class C{  public static boolean isXML11ValidNCName(String ncName){  int length=ncName.length();  if (length == 0)   return false;  int i=1;  char ch=ncName.charAt(0);  if (!isXML11NCNameStart(ch)) {    if (length > 1 && isXML11NameHighSurrogate(ch)) {      char ch2=ncName.charAt(1);      if (!XMLChar.isLowSurrogate(ch2) || !isXML11NCNameStart(XMLChar.supplemental(ch,ch2))) {        return false;      }      i=2;    } else {      return false;    }  }  while (i < length) {    ch=ncName.charAt(i);    if (!isXML11NCName(ch)) {      if (++i < length && isXML11NameHighSurrogate(ch)) {        char ch2=ncName.charAt(i);        if (!XMLChar.isLowSurrogate(ch2) || !isXML11NCName(XMLChar.supplemental(ch,ch2))) {          return false;        }      } else {        return false;      }    }    ++i;  }  return true;}  }
class C{  public boolean checkSlotAndSize(@Nonnull IInventory inv,@Nullable ItemStack expected,int src){  final ItemStack actual=inv.getStackInSlot(src);  if (expected == null) {    if (actual != null)     return false;  } else {    if (!checkItemEquality(actual,expected))     return false;    if (actual.stackSize < expected.stackSize)     return false;  }  return true;}  }
class C{  protected boolean havePairOfUnits(AnnotatedTypeMirror lht,AnnotationMirror ul,AnnotatedTypeMirror rht,AnnotationMirror ur){  return UnitsRelationsTools.hasSpecificUnit(lht,ul) && UnitsRelationsTools.hasSpecificUnit(rht,ur);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:58.106 -0500",hash_original_method="4A48D6353D1407BC4C3112124D5D3B7A",hash_generated_method="1DC0478D6B785A0F039D6351F5291594") public void removeProximityAlert(PendingIntent intent){  if (false) {    Log.d(TAG,"removeProximityAlert: intent = " + intent);  }  try {    mService.removeProximityAlert(intent);  } catch (  RemoteException ex) {    Log.e(TAG,"removeProximityAlert: RemoteException",ex);  }}  }
class C{  private Map<String,DataTypeInfo> parseDataType(NodeList nodes){  Map<String,DataTypeInfo> entries=new HashMap<>();  TypeBuilder builder=new TypeBuilder(new HashMap<>());  for (int i=0; i < nodes.getLength(); i++) {    Node node=nodes.item(i);    String name=node.getAttributes().getNamedItem("name").getTextContent();    TypeCon typecon=TypeCon.con(name);    String arity=node.getAttributes().getNamedItem("typeArity").getTextContent();    int typeArity=Integer.parseInt(arity);    String prim=node.getAttributes().getNamedItem("builtin").getTextContent();    boolean builtin=Boolean.parseBoolean(prim);    DataTypeInfo datatype=new DataTypeInfo(typecon,typeArity,builtin);    NodeList cnodes=node.getChildNodes();    for (int j=0; j < cnodes.getLength(); j++) {      Node inode=cnodes.item(j);      NamedNodeMap attrs=inode.getAttributes();      String cname=attrs.getNamedItem("name").getTextContent();      String signature=attrs.getNamedItem("signature").getTextContent();      Type ctype=builder.build(signature);      datatype.addConstructor(cname,ctype);    }    entries.put(name,datatype);  }  return entries;}  }
class C{  public final boolean isHtmlSafe(){  return htmlSafe;}  }
class C{  public boolean addAll(Collection<? extends E> c){  if (c == null)   throw new NullPointerException();  if (c == this)   throw new IllegalArgumentException();  boolean modified=false;  for (  E e : c)   if (add(e))   modified=true;  return modified;}  }
class C{  public boolean containsKey(E key){  return entries.containsKey(key);}  }
class C{  public static int hexToDecimal(String hex) throws NumberFormatException {  int decimalValue=0;  for (int i=0; i < hex.length(); i++) {    if (!(hex.charAt(i) >= '0' && hex.charAt(i) <= '9') || !(hex.charAt(i) >= 'A' && hex.charAt(i) <= 'F'))     throw new NumberFormatException("String is not a hex string");    char hexChar=hex.charAt(i);    decimalValue=decimalValue * 16 + hexCharToDecimal(hexChar);  }  return decimalValue;}  }
class C{  public void returnConnection(Object connectionObject){  connPoolCache.returnPooledConnectionToPool(connectionObject);}  }
class C{  @Override public void perform(IR ir){  if (ir.desiredSSAOptions.getAbort())   return;  boolean didSomething=eliminateLoads(ir,ir.HIRInfo.indexPropagationSolution);  ir.actualSSAOptions.setScalarValid(false);  ir.actualSSAOptions.setHeapValid(false);  ir.HIRInfo.loadEliminationDidSomething=didSomething;  ir.HIRInfo.indexPropagationSolution=null;}  }
class C{  public void clear(){  while (unitsInUse > 0)   bits[--unitsInUse]=0;}  }
class C{  protected XMLWriter createXMLWriter() throws Exception {  return new HTMLWriter(System.out);}  }
class C{  private void initializeKeyMap(AccessProfile accessProfile){  _keyMap.put(Constants.dbClient,_dbClient);  _keyMap.put(Constants.ACCESSPROFILE,accessProfile);  _keyMap.put(Constants.PROPS,accessProfile.getProps());  _keyMap.put(Constants._serialID,accessProfile.getserialID());  _keyMap.put(Constants._nativeGUIDs,Sets.newHashSet());}  }
class C{  private void checkUpperValue(){  if (upperValue < minimum) {    upperValue=minimum;  }  if (upperValue > maximum) {    upperValue=maximum;  }  if (upperValue < lowerValue) {    upperValue=lowerValue;  }}  }
class C{  public EpsilonBoxDominanceArchive(EpsilonBoxDominanceComparator comparator){  super(comparator);}  }
class C{  public void notifyAttachmentChanged(){  getData().notifyTerritoryAttachmentChanged(this);}  }
class C{  public void delete(WebMediumConfig config){  config.addCredentials(this);  POST(this.url + "/delete-" + config.getType(),config.toXML());}  }
class C{  public static final int makeTypeDescriptor(int highNibble,int lowNibble){  assert highNibble == (highNibble & 0xF);  assert lowNibble == (lowNibble & 0xF);  return ((highNibble << 4) | lowNibble);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void processSeqElement(Attributes a){  if (a.getLength() > 0) {    String res=a.getValue(0);    seq_elem=new RSSSequenceElement();    seq_elem.setResource(res);    seq.addElement(seq_elem);  }}  }
class C{  public static Lop constructAppendLopChain(Hop left,Hop right1,Hop right2,DataType dt,ValueType vt,boolean cbind,Hop current) throws HopsException, LopsException {  long m1_dim1=left.getDim1();  long m1_dim2=left.getDim2();  long m2_dim1=right1.getDim1();  long m2_dim2=right1.getDim2();  long m3_dim1=right2.getDim1();  long m3_dim2=right2.getDim2();  long m41_dim2=(m1_dim2 > 0 && m2_dim2 > 0) ? (m1_dim2 + m2_dim2) : -1;  long m41_nnz=(left.getNnz() > 0 && right1.getNnz() > 0) ? (left.getNnz() + right1.getNnz()) : -1;  long m42_dim2=(m1_dim2 > 0 && m2_dim2 > 0 && m3_dim2 > 0) ? (m1_dim2 + m2_dim2 + m3_dim2) : -1;  long m42_nnz=(left.getNnz() > 0 && right1.getNnz() > 0 && right2.getNnz() > 0) ? (left.getNnz() + right1.getNnz() + right2.getNnz()) : -1;  long brlen=left.getRowsInBlock();  long bclen=left.getColsInBlock();  if (bclen < 3)   throw new HopsException("MR_RAPPEND requires a blocksize of >= 3.");  Group group1=new Group(left.constructLops(),Group.OperationTypes.Sort,DataType.MATRIX,vt);  group1.getOutputParameters().setDimensions(m1_dim1,m1_dim2,brlen,bclen,left.getNnz());  group1.setAllPositions(left.getBeginLine(),left.getBeginColumn(),left.getEndLine(),left.getEndColumn());  Group group2=new Group(right1.constructLops(),Group.OperationTypes.Sort,DataType.MATRIX,vt);  group1.getOutputParameters().setDimensions(m2_dim1,m2_dim2,brlen,bclen,right1.getNnz());  group1.setAllPositions(right1.getBeginLine(),right1.getBeginColumn(),right1.getEndLine(),right1.getEndColumn());  Group group3=new Group(right2.constructLops(),Group.OperationTypes.Sort,DataType.MATRIX,vt);  group1.getOutputParameters().setDimensions(m3_dim1,m3_dim2,brlen,bclen,right2.getNnz());  group1.setAllPositions(right2.getBeginLine(),right2.getBeginColumn(),right2.getEndLine(),right2.getEndColumn());  AppendR appR1=new AppendR(group1,group2,dt,vt,cbind,ExecType.MR);  appR1.getOutputParameters().setDimensions(m1_dim1,m41_dim2,brlen,bclen,m41_nnz);  appR1.setAllPositions(current.getBeginLine(),current.getBeginColumn(),current.getEndLine(),current.getEndColumn());  AppendR appR2=new AppendR(appR1,group3,dt,vt,cbind,ExecType.MR);  appR1.getOutputParameters().setDimensions(m1_dim1,m42_dim2,brlen,bclen,m42_nnz);  appR1.setAllPositions(current.getBeginLine(),current.getBeginColumn(),current.getEndLine(),current.getEndColumn());  return appR2;}  }
class C{  private void initializeListeners(){  m_graph.getRawView().addListener(m_viewListener);  for (  final INaviViewNode node : m_graph.getRawView().getGraph().getNodes()) {    if (node instanceof INaviGroupNode) {      ((INaviGroupNode)node).addGroupListener(m_groupNodeListener);    }  }  for (  final INaviViewNode node : m_graph.getRawView().getGraph()) {    if (node instanceof INaviFunctionNode) {      addModuleListener((INaviFunctionNode)node);    }    final Iterator<CTag> it=node.getTagsIterator();    while (it.hasNext()) {      addTagListener(it.next());    }  }}  }
class C{  protected String extractPackage(String classname){  if (classname.indexOf(".") > -1) {    return classname.substring(0,classname.lastIndexOf("."));  } else {    return DEFAULT_PACKAGE;  }}  }
class C{  public DNSOutput(int size){  array=new byte[size];  pos=0;  saved_pos=-1;}  }
class C{  public ProductDetailsAdapter(Context context,Product product,Category[] categories){  setHasStableIds(true);  fields=new ArrayList<AbstractMap.SimpleImmutableEntry<String,String>>();  try {    for (    String fieldName : relevantFields) {      Field f=Product.class.getDeclaredField(fieldName);      f.setAccessible(true);      String content=(String)f.get(product);      if (content != null && !content.isEmpty()) {        String key=context.getResources().getString(fieldLabels.get(fieldName));        if (fieldName.equals("category") && categories != null) {          content=getCategoryName(categories,content);        }        fields.add(new AbstractMap.SimpleImmutableEntry<String,String>(key,content));      }    }  } catch (  Exception e) {    Log.e(getClass().getSimpleName(),"Unexpected error",e);  }}  }
class C{  public String globalInfo(){  return "Multinomial naive bayes for text data. Operates " + "directly (and only) on String attributes. " + "Other types of input attributes are accepted but "+ "ignored during training and classification";}  }
class C{  public static void register(){  DdmServer.registerHandler(CHUNK_THEN,mInstance);  DdmServer.registerHandler(CHUNK_THST,mInstance);  DdmServer.registerHandler(CHUNK_STKL,mInstance);}  }
class C{  private void launchAnim3(){  animatedVector3.start();}  }
class C{  public SupplierShareResultEvaluator(Document xml) throws XPathExpressionException {  super(xml,"SupplierRevenueShareResult");}  }
class C{  public void testRangeFacetInfiniteLoopDetection(){  for (  String field : new String[]{"foo_f","foo_sf","foo_d","foo_sd","foo_i","foo_si"}) {    assertQEx("no zero gap error: " + field,req("q","*:*","facet","true","facet.range",field,"facet.range.start","23","facet.range.gap","0","facet.range.end","100"),400);  }  for (  String field : new String[]{"foo_pdt","foo_dt"}) {    for (    String type : new String[]{"date","range"}) {      assertQEx("no zero gap error for facet." + type + ": "+ field,req("q","*:*","facet","true","facet." + type,field,"facet." + type + ".start","NOW","facet." + type + ".gap","+0DAYS","facet." + type + ".end","NOW+10DAY"),400);    }  }  for (  String field : new String[]{"foo_f","foo_sf"}) {    assertQEx("no float underflow error: " + field,req("q","*:*","facet","true","facet.range",field,"facet.range.start","100000000000","facet.range.end","100000086200","facet.range.gap","2160"),400);  }  for (  String field : new String[]{"foo_d","foo_sd"}) {    assertQEx("no double underflow error: " + field,req("q","*:*","facet","true","facet.range",field,"facet.range.start","9900000000000","facet.range.end","9900000086200","facet.range.gap","0.0003"),400);  }}  }
class C{  public String convertEqualityOperatorToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public char skip(int n){  _pos+=n;  if (_length <= _pos) {    _pos=_string.length();    return DONE;  } else   return _string.charAt(_pos);}  }
class C{  public static void deleteQuietly(File f){  if (!delete_(f,true)) {    f.deleteOnExit();  }}  }
class C{  public boolean equals(TarEntry it){  return getName().equals(it.getName());}  }
class C{  public static String nextTemporaryVariableName(){  return Constants.TEMP_VARIABLE_NAME_PREFIX + (tempSequenceNumber++);}  }
class C{  public static String xmlEscape(String s){  StringBuilder sb=new StringBuilder();  for (int i=0; i < s.length(); i++) {    char ch=s.charAt(i);switch (ch) {case '"':      sb.append("&quot;");    break;case '&':  sb.append("&amp;");break;case '\'':sb.append("&apos;");break;case '<':sb.append("&lt;");break;case '>':sb.append("&gt;");break;case '\n':sb.append("&#xA;");break;case '\r':sb.append("&#xD;");break;case '\t':sb.append("&#x9;");break;case '\0':break;default :sb.append(ch);break;}}return sb.toString();}  }
class C{  public static void putAllAsStrings(Map<String,String> out,Map<String,ByteIterator> in){  for (  String s : in.keySet()) {    out.put(s,in.get(s).toString());  }}  }
class C{  public JSONArray put(long value){  this.put(new Long(value));  return this;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.203 -0500",hash_original_method="1BF084B14EC69DE3E76A3A4117F862C8",hash_generated_method="4DDD304917D503E6862800E37AB9B148") public static boolean isMirrored(char c){  return isMirrored((int)c);}  }
class C{  public NumberTick(Number number,String label,TextAnchor textAnchor,TextAnchor rotationAnchor,double angle){  super(number.doubleValue(),label,textAnchor,rotationAnchor,angle);  this.number=number;}  }
class C{  protected void processMappingConverter(DatabaseMapping mapping,String convertValue,List<ConvertMetadata> converts,MetadataClass referenceClass,MetadataClass referenceClassWithGenerics,boolean isForMapKey){  boolean hasConverts=(converts != null && !converts.isEmpty());  if (convertValue != null && !convertValue.equals(Convert.NONE)) {    processConvert(mapping,convertValue,referenceClass,isForMapKey,hasConverts);  } else   if (hasConverts) {    processConverts(converts,mapping,referenceClass,isForMapKey);  } else   if (getProject().hasAutoApplyConverter(referenceClassWithGenerics)) {    getProject().getAutoApplyConverter(referenceClassWithGenerics).process(mapping,isForMapKey,null);  } else {    if (isEnumerated(referenceClass,isForMapKey)) {      processEnumerated(getEnumerated(isForMapKey),mapping,referenceClass,isForMapKey);    } else     if (isLob(referenceClass,isForMapKey)) {      processLob(getLob(isForMapKey),mapping,referenceClass,isForMapKey);    } else     if (isTemporal(referenceClass,isForMapKey)) {      processTemporal(getTemporal(isForMapKey),mapping,referenceClass,isForMapKey);    } else     if (isSerialized(referenceClass,isForMapKey)) {      processSerialized(mapping,referenceClass,isForMapKey);    }  }}  }
class C{  ArrayList<ArrayList<String>> solveNQueens(int n){  ArrayList<ArrayList<String>> rst=new ArrayList<ArrayList<String>>();  if (n <= 0) {    return rst;  }  search(n,new ArrayList<Integer>(),rst);  return rst;}  }
class C{  public String filter(String urlString) throws URLFilterException {  for (int i=0; i < this.filters.length; i++) {    if (urlString == null)     return null;    urlString=this.filters[i].filter(urlString);  }  return urlString;}  }
class C{  public Map<String,Object> send(Map<String,Object> request) throws HttpClientException {  return send((String)props.get("payment.valuelink.url"),request);}  }
class C{  public Map<Installment,Map<String,BigDecimal>> prepareRsnWiseDemandForPropToBeDeactivated(final Property property){  LOGGER.debug("Entered into prepareRsnWiseDemandForPropToBeDeactivated, property: " + property);  final Map<Installment,Map<String,BigDecimal>> amts=prepareRsnWiseDemandForOldProp(property);  for (  final Installment inst : amts.keySet())   for (  final String dmdRsn : amts.get(inst).keySet())   amts.get(inst).put(dmdRsn,amts.get(inst).get(dmdRsn).negate());  LOGGER.debug("amts: " + amts + "\n Exiting from prepareRsnWiseDemandForPropToBeDeactivated");  return amts;}  }
class C{  protected void unselectedChoiceStates(){  int start=mLayoutManager.findFirstVisibleItemPosition();  int end=mLayoutManager.findLastVisibleItemPosition();  for (int i=0; i < checked.size(); i++) {    if (checked.get(i) && i >= start && i <= end) {      reloadChoiceStateInView(swipeListView.getChildAt(i - start).findViewById(swipeFrontView),i);    }    checked.set(i,false);  }  swipeListView.onChoiceEnded();  returnOldActions();}  }
