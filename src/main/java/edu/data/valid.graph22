class C{  public void clear(){  dict.clear();}  }
class C{  public static Short valueOf(String string) throws NumberFormatException {  return valueOf(parseShort(string));}  }
class C{  public Tree<E> addChild(E item){  Tree<E> it=new Tree<E>(this,item);  children.add(it);  return it;}  }
class C{  protected CompoundControl(Type type,Control[] memberControls){  super(type);  this.controls=memberControls;}  }
class C{  public SynchronizationException(String message){  super(message);}  }
class C{  public static int unsignedByteToInt(int b){  return b & 0xFF;}  }
class C{  public DropTarget(Component c,DropTargetListener dtl) throws HeadlessException {  this(c,DnDConstants.ACTION_COPY_OR_MOVE,dtl,true,null);}  }
class C{  public static boolean isStationExistInChList(Context context,int stationFreq){  Log.d(TAG,">>> isStationExist: stationFreq=" + stationFreq);  boolean isExist=false;  Cursor cur=context.getContentResolver().query(Station.CONTENT_URI,new String[]{Station.COLUMN_STATION_NAME},Station.COLUMN_STATION_FREQ + "=? AND " + Station.COLUMN_STATION_TYPE+ "<>1",new String[]{String.valueOf(stationFreq)},null);  if (null != cur) {    try {      if (cur.moveToFirst()) {        isExist=true;      }    }  finally {      cur.close();    }  }  Log.d(TAG,"<<< isStationExist: " + isExist);  return isExist;}  }
class C{  public void dispatchToEvents(int nodeHandle,org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException {}  }
class C{  public void makeImmutable(){  isMutable=false;}  }
class C{  protected int findTokenStart(int from){  if (from < 0) {    throw new IllegalArgumentException("Search position must not be negative: " + from);  }  boolean found=false;  while (!found && (this.currentHeader != null)) {    final int to=this.currentHeader.length();    while (!found && (from < to)) {      final char ch=this.currentHeader.charAt(from);      if (isTokenSeparator(ch) || isWhitespace(ch)) {        from++;      } else       if (isTokenChar(this.currentHeader.charAt(from))) {        found=true;      } else {        throw new ParseException("Invalid character before token (pos " + from + "): "+ this.currentHeader);      }    }    if (!found) {      if (this.headerIt.hasNext()) {        this.currentHeader=this.headerIt.nextHeader().getValue();        from=0;      } else {        this.currentHeader=null;      }    }  }  return found ? from : -1;}  }
class C{  public static Object toObject(final String xml){  final ByteArrayInputStream out=new ByteArrayInputStream(xml.getBytes());  final XMLDecoder encoder=new XMLDecoder(out);  final Object object=encoder.readObject();  encoder.close();  return object;}  }
class C{  private Map<Integer,ReplicationServerInfo> collectReplicationServersInfo(){  final Map<Integer,ReplicationServerInfo> rsInfos=new ConcurrentSkipListMap<>();  for (  String serverUrl : getReplicationServerUrls()) {    final ConnectedRS rs=performPhaseOneHandshake(serverUrl,false);    final ReplicationServerInfo rsInfo=rs.rsInfo;    if (rsInfo != null) {      rsInfos.put(rsInfo.getServerId(),rsInfo);    }  }  return rsInfos;}  }
class C{  public String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  public void writeSearchResultEntry(final int messageID,final SearchResultEntry entry) throws IOException {  logger.trace("ENCODE LDAP SEARCH RESULT ENTRY(messageID=%d, entry=%s)",messageID,entry);  writeMessageHeader(messageID);{    LDAP.writeEntry(writer,LDAP.OP_TYPE_SEARCH_RESULT_ENTRY,entry);  }  writeMessageFooter(entry.getControls());}  }
class C{  private void socksSendRequest(int command,InetAddress address,int port) throws IOException {  Socks4Message request=new Socks4Message();  request.setCommandOrResult(command);  request.setPort(port);  request.setIP(address.getAddress());  request.setUserId("default");  getOutputStream().write(request.getBytes(),0,request.getLength());}  }
class C{  @Deprecated public void _INVALID_setDamage(int damage){  setDamage(damage);}  }
class C{  public FilterConfig findFilterConfig(String name){  return (filterConfigs.get(name));}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException, java.io.InvalidObjectException {  Object a=s.readFields().get("array",null);  if (a == null || !a.getClass().isArray())   throw new java.io.InvalidObjectException("Not array type");  if (a.getClass() != Object[].class)   a=Arrays.copyOf((Object[])a,Array.getLength(a),Object[].class);  unsafe.putObjectVolatile(this,arrayFieldOffset,a);}  }
class C{  public static List<MappedMember> findMethodParent(MappedClass owner,String name,String desc,boolean originalNames){  List<MappedMember> list=new ArrayList<MappedMember>();  for (  MappedClass interfaceClass : owner.getInterfaces()) {    MappedMember mm=findMethodInParentInclusive(interfaceClass,name,desc,originalNames);    if (mm != null) {      list.add(mm);    }  }  if (owner.getParent() != null) {    MappedMember mm=findMethodInParentInclusive(owner.getParent(),name,desc,originalNames);    if (mm != null) {      list.add(mm);    }  }  return list;}  }
class C{  public static boolean isGingerbread(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD;}  }
class C{  @Override public void initializeForTemplate(TemplateFile templateFile,Template template,String[] arguments,int lineNumber,List<LocalizableMessage> warnings) throws InitializationException {  initializeInternal(templateFile,arguments,lineNumber);}  }
class C{  static MatchingRuleImpl collationEqualityMatchingRule(Locale locale){  return new CollationEqualityMatchingRuleImpl(locale);}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo fetchFooByUuidAndGroupId(java.lang.String uuid,long groupId){  return _fooLocalService.fetchFooByUuidAndGroupId(uuid,groupId);}  }
class C{  public SCSOAPBindingModelImpl(HttpServletRequest req,Map map) throws AMConsoleException {  super(req,SERVICE_NAME,map);}  }
class C{  public final void testGetCertificates(){  CertPath cp1=new MyCertPath(testEncoding);  cp1.getCertificates();}  }
class C{  public String toString(){  return "BadBinaryOpValueExpException: " + exp;}  }
class C{  public SecurityCollection(String name,String description){  super();  setName(name);  setDescription(description);}  }
class C{  public ReconAuditEventBuilder reconciling(String reconciling){  jsonValue.put(RECONCILING,reconciling);  return self();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  DocumentFragment newdocFragment;  Node newChild1;  Node newChild2;  Node child;  String childName;  java.util.List result=new java.util.ArrayList();  Node appendedChild;  int nodeType;  java.util.List expected=new java.util.ArrayList();  expected.add("em");  expected.add("strong");  expected.add("code");  expected.add("sup");  expected.add("var");  expected.add("acronym");  expected.add("br");  expected.add("b");  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  newdocFragment=doc.createDocumentFragment();  newChild1=doc.createElement("br");  newChild2=doc.createElement("b");  appendedChild=newdocFragment.appendChild(newChild1);  appendedChild=newdocFragment.appendChild(newChild2);  appendedChild=employeeNode.appendChild(newdocFragment);  for (int indexN100A2=0; indexN100A2 < childList.getLength(); indexN100A2++) {    child=(Node)childList.item(indexN100A2);    nodeType=(int)child.getNodeType();    if (equals(1,nodeType)) {      childName=child.getNodeName();      result.add(childName);    }  }  assertEqualsAutoCase("element","nodeNames",expected,result);}  }
class C{  private File retrieveLastRotationTimeFile(){  File[] files=getCNIndexDBPath().listFiles(LAST_ROTATION_TIME_FILE_FILTER);  return (files != null && files.length > 0) ? files[0] : null;}  }
class C{  public void insert_obstacle(PlaArea p_area,int p_layer,int p_clearance_class,ItemFixState p_fixed_state){  if (p_area == null) {    System.out.println("BasicBoard.insert_obstacle: p_area is null");    return;  }  BrdArea obs=new BrdArea(p_area,p_layer,PlaVectorInt.ZERO,0,false,p_clearance_class,0,0,null,p_fixed_state,this);  insert_item(obs);}  }
class C{  public void addDirtyRegion(Applet applet,int x,int y,int w,int h){  addDirtyRegion0(applet,x,y,w,h);}  }
class C{  public boolean isSigned(){  return isSigned;}  }
class C{  public void start_scope(LogfileScope p_logfile_scope,boolean p_boolean_value){  start_scope(p_logfile_scope);  int int_value;  if (p_boolean_value) {    int_value=1;  } else {    int_value=0;  }  add_int(int_value);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodedocumentnodeattribute.class,args);}  }
class C{  @Ignore @Test public void b6460701_b6431651() throws Exception {  URL[] urls=new URL[]{new URL("http://foobar.jar")};  MyURLClassLoader ucl=new MyURLClassLoader(urls);  ucl.addURL(null);  ucl.addURL(new URL("http://foobar.jar"));  ucl.addURL(null);  ucl.addURL(new URL("http://foobar.jar"));  ucl.addURL(null);  ucl.addURL(new URL("http://foobar.jar"));  urls=ucl.getURLs();  if (urls.length != 1)   throw new RuntimeException("Failed: There should only be 1 url in the list of search URLs");  URL url;  for (int i=0; i < urls.length; i++) {    url=urls[i];    if (url == null || !url.equals(new URL("http://foobar.jar")))     throw new RuntimeException("Failed: The url should not be null and should be http://foobar.jar");  }}  }
class C{  private static String findJarServiceProviderName(String factoryId){  SecuritySupport ss=SecuritySupport.getInstance();  String serviceId=SERVICES_PATH + factoryId;  InputStream is=null;  ClassLoader cl=findClassLoader();  is=ss.getResourceAsStream(cl,serviceId);  if (is == null) {    ClassLoader current=ObjectFactory.class.getClassLoader();    if (cl != current) {      cl=current;      is=ss.getResourceAsStream(cl,serviceId);    }  }  if (is == null) {    return null;  }  debugPrintln("found jar resource=" + serviceId + " using ClassLoader: "+ cl);  BufferedReader rd;  try {    rd=new BufferedReader(new InputStreamReader(is,"UTF-8"));  } catch (  java.io.UnsupportedEncodingException e) {    rd=new BufferedReader(new InputStreamReader(is));  }  String factoryClassName=null;  try {    factoryClassName=rd.readLine();  } catch (  IOException x) {    return null;  } finally {    try {      rd.close();    } catch (    IOException exc) {    }  }  if (factoryClassName != null && !"".equals(factoryClassName)) {    debugPrintln("found in resource, value=" + factoryClassName);    return factoryClassName;  }  return null;}  }
class C{  public List<Entitlement> evaluate(String realm,Subject adminSubject,Subject subject,String applicationName,String normalisedResourceName,String requestedResourceName,Map<String,Set<String>> envParameters,boolean recursive) throws EntitlementException {  init(adminSubject,subject,realm,applicationName,normalisedResourceName,requestedResourceName,null,envParameters,recursive);  indexes=getApplication().getResourceSearchIndex(normalisedResourceName,realm);  return evaluate(realm);}  }
class C{  public NotSubject(EntitlementSubject eSubject,String pSubjectName){  this.eSubject=eSubject;  this.pSubjectName=pSubjectName;}  }
class C{  public static String capitalize(final String input) throws IllegalArgumentException {  if (input == null) {    throw new IllegalArgumentException("input can't be null");  }  if (input.length() == 0) {    return "";  }  return head(input).map(null).map(null).get();}  }
class C{  public int pos(){  return pos;}  }
class C{  public Factory(String threadNamePrefix){  if (threadNamePrefix == null) {    throw new NullPointerException("Null thread name prefix");  }  this.threadNamePrefix=threadNamePrefix;}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (this == o) {    return true;  }  if (!(o instanceof AnonymousAuthPrincipal)) {    return false;  }  AnonymousAuthPrincipal that=(AnonymousAuthPrincipal)o;  return this.getName().equals(that.getName());}  }
class C{  public Extensions createExtensions(Element value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.EXTENSIONS,value);  if (obj == null) {    return new ExtensionsImpl(value);  } else {    return (Extensions)obj;  }}  }
class C{  public void propertyChange(PropertyChangeEvent e){  JSpinner spinner=getSpinner();  if (spinner == null) {    return;  }  Object source=e.getSource();  String name=e.getPropertyName();  if ((source instanceof JFormattedTextField) && "value".equals(name)) {    Object lastValue=spinner.getValue();    try {      spinner.setValue(getTextField().getValue());    } catch (    IllegalArgumentException iae) {      try {        ((JFormattedTextField)source).setValue(lastValue);      } catch (      IllegalArgumentException iae2) {      }    }  }}  }
class C{  public void makeImmutable(){  if (isMutable) {    isMutable=false;  }}  }
class C{  public ArrayStoreException(){  super();}  }
class C{  @SideOnly(Side.CLIENT) public static void sendSpamlessMessage(int messageID,ITextComponent message){  Minecraft.getMinecraft().ingameGUI.getChatGUI().printChatMessageWithOptionalDeletion(message,messageID);}  }
class C{  public void handleTblRequestHandlerListButtonAddRequest(RequestInvocationEvent event) throws ModelControlException {  try {    Map values=getValues();    onBeforeSaveProfile(values);    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);    SCSAML2SOAPBindingRequestHandlerListAddViewBean vb=(SCSAML2SOAPBindingRequestHandlerListAddViewBean)getViewBean(SCSAML2SOAPBindingRequestHandlerListAddViewBean.class);    unlockPageTrail();    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodelistindexequalzero.class,args);}  }
class C{  private boolean isValid(String action,String namespace){  if (namespace.equals(SAMLConstants.ACTION_NAMESPACE)) {    if (action.equals("Read") || action.equals("Write") || action.equals("Execute")|| action.equals("Delete")|| action.equals("Control")) {      return true;    } else {      return false;    }  }  if (namespace.equals(SAMLConstants.ACTION_NAMESPACE_NEGATION)) {    if (action.equals("Read") || action.equals("~Read") || action.equals("Write")|| action.equals("~Write")|| action.equals("Execute")|| action.equals("~Execute")|| action.equals("Delete")|| action.equals("~Delete")|| action.equals("Control")|| action.equals("~Control")) {      return true;    } else {      return false;    }  }  if (namespace.equals(SAMLConstants.ACTION_NAMESPACE_GHPP)) {    if (action.equals("GET") || action.equals("HEAD") || action.equals("PUT")|| action.equals("POST")) {      return true;    } else {      return false;    }  }  if (namespace.equals(SAMLConstants.ACTION_NAMESPACE_UNIX)) {    int permissionNum=0;    try {      permissionNum=Integer.parseInt(action);    } catch (    NumberFormatException ne) {      if (SAMLUtilsCommon.debug.messageEnabled()) {        SAMLUtilsCommon.debug.message("Actions: Unix " + "file permissions " + "error:"+ ne.getMessage());      }      return false;    }    int quota=permissionNum / 1000;    int remain=permissionNum - 1000 * quota;    int tmp=0;    if (quota == 0 || quota == 2 || quota == 4 || quota == 6) {      for (int i=0; i < 3; i++) {        tmp=remain / 10;        quota=remain - tmp * 10;        if (quota < 0 || quota > 7)         return false;        remain=tmp;      }      return true;    } else {      return false;    }  }  return true;}  }
class C{  protected SecretKey generateSecretKey(String algorithm,int keyStrength) throws EncryptionException {  try {    KeyGenerator keygen=KeyGenerator.getInstance(algorithm);    if (keyStrength != 0) {      keygen.init(keyStrength);    }    return keygen.generateKey();  } catch (  NoSuchAlgorithmException ne) {    throw new EncryptionException(ne);  }}  }
class C{  private void rehash(){  int oldCapacity=table.length;  Object oldMap[]=table;  int newCapacity=oldCapacity * 2 + 1;  Object newMap[]=new Object[newCapacity];  for (int i=oldCapacity; i-- > 0; )   if (oldMap[i] != null) {    int index=(System.identityHashCode(oldMap[i]) & 0x7FFFFFFF) % newMap.length;    while (newMap[index] != null)     index=(index + 1) % newMap.length;    newMap[index]=oldMap[i];  }  threshold=(int)(newCapacity * loadFactor);  table=newMap;}  }
class C{  private void debugInfo(String testName,String message){  logger.trace("** TEST %s ** %s",testName,message);}  }
class C{  public static X509Certificate rootCertificate(KeyStore keyStore,String algorithm){  try {    X509Certificate found=null;    for (    String alias : Collections.list(keyStore.aliases())) {      if (!keyStore.entryInstanceOf(alias,TrustedCertificateEntry.class)) {        continue;      }      TrustedCertificateEntry certificateEntry=(TrustedCertificateEntry)keyStore.getEntry(alias,null);      Certificate certificate=certificateEntry.getTrustedCertificate();      if (!certificate.getPublicKey().getAlgorithm().equals(algorithm)) {        continue;      }      if (!(certificate instanceof X509Certificate)) {        continue;      }      X509Certificate x=(X509Certificate)certificate;      if (!x.getIssuerDN().equals(x.getSubjectDN())) {        continue;      }      if (found != null) {        throw new IllegalStateException("KeyStore has more than one root CA for " + algorithm + "\nfirst: "+ found+ "\nsecond: "+ certificate);      }      found=x;    }    if (found == null) {      throw new IllegalStateException("KeyStore contained no root CA for " + algorithm);    }    return found;  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public void write(ByteArrayOutputStream tagBuffer){  setTextEncoding(ID3TextEncodingConversion.getTextEncoding(getHeader(),getTextEncoding()));  if (!((TextEncodedStringSizeTerminated)getObject(DataTypes.OBJ_TEXT)).canBeEncoded()) {    this.setTextEncoding(ID3TextEncodingConversion.getUnicodeTextEncoding(getHeader()));  }  super.write(tagBuffer);}  }
class C{  private String randomDigits(){  Random random=new Random();  return String.valueOf(random.nextInt(99999999));}  }
class C{  @SuppressWarnings("UnusedDeclaration") public static String addParameter(String url,String parameterName,String parameterValue){  try {    if (url == null) {      return null;    }    StringBuilder targetUrl=new StringBuilder();    targetUrl.append(url);    URL testURL=new URL(url);    if (testURL.getQuery() != null) {      targetUrl.append("&");    } else     if ("".equals(testURL.getPath())) {      targetUrl.append("/?");    } else {      targetUrl.append("?");    }    targetUrl.append(parameterName);    targetUrl.append("=");    targetUrl.append(parameterValue);    return targetUrl.toString();  } catch (  MalformedURLException ex) {    return url;  }}  }
class C{  public void test_X500Principal_02(){  String name="CN=Duke,OU=JavaSoft,O=Sun Microsystems,C=US";  byte[] ba=getByteArray(TestUtils.getX509Certificate_v1());  ByteArrayInputStream is=new ByteArrayInputStream(ba);  InputStream isNull=null;  try {    X500Principal xpr=new X500Principal(is);    assertNotNull("Null object returned",xpr);    byte[] resArray=xpr.getEncoded();    assertEquals(ba.length,resArray.length);  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }  try {    X500Principal xpr=new X500Principal(isNull);    fail("NullPointerException wasn't thrown");  } catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of NullPointerException");  }  is=new ByteArrayInputStream(name.getBytes());  try {    X500Principal xpr=new X500Principal(is);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }}  }
class C{  private void assertThatCursorCanBeFullyRead(DBCursor<Record<String,String>> cursor,int fromIndex,int endIndex) throws Exception {  assertThat(cursor.getRecord()).isNull();  for (int i=fromIndex; i <= endIndex; i++) {    assertThat(cursor.next()).as("next() value when i=" + i).isTrue();    assertThat(cursor.getRecord()).isEqualTo(Record.from(String.format("key%02d",i),"value" + i));  }  assertThatCursorIsExhausted(cursor);}  }
class C{  public String toString(){  if (exception != null) {    return super.toString() + "\n" + exception.toString();  } else {    return super.toString();  }}  }
class C{  public final boolean popAndTop(){  m_index--;  return (m_index >= 0) ? m_values[m_index] : false;}  }
class C{  @Override public Foo createFoo(long fooId){  return fooPersistence.create(fooId);}  }
class C{  private <T>boolean removeModification(PropertyEditorModification<T> mod){  return mods.remove(mod);}  }
class C{  void addActionDecision(ActionDecision newActionDecision,ServiceType resourceType){  String action=newActionDecision.getActionName();  ActionDecision oldActionDecision=(ActionDecision)actionDecisions.get(action);  if (oldActionDecision == null) {    addActionDecision(newActionDecision);  } else {    ActionSchema actionSchema=null;    AttributeSchema.Syntax actionSyntax=null;    try {      actionSchema=resourceType.getActionSchema(action);      actionSyntax=actionSchema.getSyntax();    } catch (    InvalidNameException e) {      PolicyManager.debug.error("can not find action schmea for action = " + action,e);    }    if (!AttributeSchema.Syntax.BOOLEAN.equals(actionSyntax)) {      addActionDecision(newActionDecision);    } else {      String falseValue=actionSchema.getFalseValue();      String trueValue=actionSchema.getTrueValue();      addActionDecision(newActionDecision,trueValue,falseValue);    }  }}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  MAPClientManagerViewBean vb=(MAPClientManagerViewBean)getViewBean(MAPClientManagerViewBean.class);  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public void populateLockoutValues(String orgDN){  try {    String value=getAttributeValue(orgDN,PW_RESET_FAILURE_LOCKOUT_MODE);    if (value != null && value.equals(STRING_TRUE)) {      pwResetFailureLockoutMode=true;    }    value=getAttributeValue(orgDN,PW_RESET_FAILURE_DURATION);    if (value != null && value.length() > 0) {      pwResetFailureLockoutTime=Long.parseLong(value);      pwResetFailureLockoutTime*=NUM_OF_MILLISECS_IN_MIN;    }    pwResetLockoutNotification=getAttributeValue(orgDN,PW_RESET_LOCKOUT_EMAIL_ADDRESS);    value=getAttributeValue(orgDN,PW_RESET_LOCKOUT_WARN_USER);    if (value != null && value.length() > 0) {      pwResetLockoutUserWarningCnt=Integer.parseInt(value);    }    value=getAttributeValue(orgDN,PW_RESET_FAILURE_LOCKOUT_DURATION);    if (value != null && value.length() > 0) {      pwResetFailureLockoutDuration=Long.parseLong(value);      pwResetFailureLockoutDuration*=NUM_OF_MILLISECS_IN_MIN;    }    value=getAttributeValue(orgDN,PW_RESET_FAILURE_LOCKOUT_MULTIPLIER);    if (value != null && value.length() > 0) {      pwResetFailureLockoutMultiplier=Integer.parseInt(value);    }    value=getAttributeValue(orgDN,PW_RESET_FAILURE_COUNT);    if (value != null && value.length() > 0) {      pwResetFailureLockoutCnt=Integer.parseInt(value);    }    value=getAttributeValue(orgDN,PW_RESET_LOCKOUT_ATTR_NAME);    if (value != null && value.trim().length() > 0) {      pwResetLockoutAttrName=value;    }    value=getAttributeValue(orgDN,PW_RESET_LOCKOUT_ATTR_VALUE);    if (value != null && value.trim().length() > 0) {      pwResetLockoutAttrValue=value;    }  } catch (  NumberFormatException e) {    debug.error("PWResetModelImpl.populateLockoutValues",e);  }catch (  SSOException e) {    debug.warning("PWResetModelImpl.populateLockoutValues",e);  }catch (  SMSException e) {    debug.error("PWResetModelImpl.populateLockoutValues",e);  }}  }
class C{  @Override public boolean hasOverlappingRendering(){  return false;}  }
class C{  public void onLoginFailure(Map requestParamsMap,HttpServletRequest req,HttpServletResponse res) throws AuthenticationException {}  }
class C{  public static String concatenateRealmPath(String parentRealm,String subrealm){  String realm;  if (subrealm == null) {    realm=parentRealm;  } else {    subrealm=cleanRealm(subrealm);    if (parentRealm == null || parentRealm.equals("/")) {      realm=subrealm;    } else {      realm=parentRealm + subrealm;    }  }  return cleanRealm(realm);}  }
class C{  private static void sendNotModified(ChannelHandlerContext ctx){  FullHttpResponse response=new DefaultFullHttpResponse(HTTP_1_1,NOT_MODIFIED);  setDateHeader(response);  ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);  LOG.trace(Constants.LOG_RETURNING_RESPONSE,response);}  }
class C{  public static EnumEvalResult evaluate(AciEvalContext evalCtx,Aci aci){  return aci.evaluate(evalCtx);}  }
class C{  public void testAvailable() throws Exception {  byte[] data=new byte[]{-127,-100,-50,-10,-1,0,1,10,50,127};  TestInputStream tis=new TestInputStream(data);  CipherInputStream cis=new CipherInputStream(tis,new NullCipher());  assertEquals("The returned by available() method value " + "should be 0.",cis.available(),0);}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (this == o)   return true;  if (!(o instanceof AuthPrincipal))   return false;  AuthPrincipal that=(AuthPrincipal)o;  if (this.getName().equals(that.getName()))   return true;  return false;}  }
class C{  public String[] findConnectors() throws MBeanException {  Service service;  try {    service=(Service)getManagedResource();  } catch (  InstanceNotFoundException e) {    throw new MBeanException(e);  }catch (  RuntimeOperationsException e) {    throw new MBeanException(e);  }catch (  InvalidTargetObjectTypeException e) {    throw new MBeanException(e);  }  Connector[] connectors=service.findConnectors();  String[] str=new String[connectors.length];  for (int i=0; i < connectors.length; i++) {    str[i]=connectors[i].toString();  }  return str;}  }
class C{  public static boolean isEncoded(ByteSequence value){  if (value == null || value.length() == 0) {    return false;  }  if (value.byteAt(0) != '{') {    return false;  }  int closingBracePos=-1;  for (int i=1; i < value.length(); i++) {    if (value.byteAt(i) == '}') {      closingBracePos=i;      break;    }  }  return closingBracePos >= 0 && closingBracePos != 1 && closingBracePos != value.length() - 1;}  }
class C{  public void addEditActionListener(ActionListener listener){  editButton.addActionListener(listener);}  }
class C{  public void serviceRevoked(BeanContextServiceRevokedEvent bcssre){synchronized (BeanContext.globalHierarchyLock) {    if (services.containsKey(bcssre.getServiceClass()))     return;    fireServiceRevoked(bcssre);    Iterator i;synchronized (children) {      i=children.keySet().iterator();    }    while (i.hasNext()) {      Object c=i.next();      if (c instanceof BeanContextServices) {        ((BeanContextServicesListener)c).serviceRevoked(bcssre);      }    }  }}  }
class C{  public static Builder createBuilder(AbstractManagedObjectDefinition<?,?> d,String propertyName){  return new Builder(d,propertyName);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.X509DataType.X509SKI createX509DataTypeX509SKI() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.X509DataTypeImpl.X509SKIImpl();}  }
class C{  public AttrSet read(java.security.Principal principal,Guid guid,String attrNames[]) throws UMSException {  String id=guid.getDn();  ConnectionEntryReader entryReader;  SearchRequest request=LDAPRequests.newSearchRequest(id,SearchScope.BASE_OBJECT,"(objectclass=*)",attrNames);  entryReader=readLDAPEntry(principal,request);  if (entryReader == null) {    throw new AccessRightsException(id);  }  Collection<Attribute> attrs=new ArrayList<>();  try (ConnectionEntryReader reader=entryReader){    while (reader.hasNext()) {      if (reader.isReference()) {        reader.readReference();      }      SearchResultEntry entry=entryReader.readEntry();      for (      Attribute attr : entry.getAllAttributes()) {        attrs.add(attr);      }    }    if (attrs.isEmpty()) {      throw new EntryNotFoundException(i18n.getString(IUMSConstants.ENTRY_NOT_FOUND,new String[]{id}));    }    return new AttrSet(attrs);  } catch (  IOException e) {    throw new UMSException(i18n.getString(IUMSConstants.UNABLE_TO_READ_ENTRY,new String[]{id}),e);  }}  }
class C{  public java.lang.String signXML(java.lang.String xmlString,java.lang.String certAlias) throws XMLSignatureException {  return signXML(xmlString,certAlias,null);}  }
class C{  Lexer(Compiler compiler,PrefixResolver resolver,XPathParser xpathProcessor){  m_compiler=compiler;  m_namespaceContext=resolver;  m_processor=xpathProcessor;}  }
class C{  public StopProcessing(ResultCode resultCode,LocalizableMessage errorMessage,DN matchedDN,List<String> referralURLs){  this.errorMessage=errorMessage;  this.matchedDN=matchedDN;  this.resultCode=resultCode;  this.referralURLs=referralURLs;}  }
class C{  static Promise<String> blockingPromiseString(){  return new BlockingPromise<>();}  }
class C{  public final int hashCode(){  if (toString() == null) {    return 0;  }  return toString().hashCode();}  }
class C{  public void testSetObject_int_Object_int_int() throws SQLException {  PreparedStatement ps=null;  try {    String query="insert into type (IntVal) values (?);";    ps=conn.prepareStatement(query);    Statement st=null;    try {      ps.setObject(1,Integer.MAX_VALUE,Types.INTEGER,Integer.MAX_VALUE);      ps.execute();      st=conn.createStatement();      st.execute("select * from type where IntVal=" + Integer.MAX_VALUE);      ResultSet rs=st.getResultSet();      assertEquals(1,getCount(rs));    }  finally {      try {        st.close();      } catch (      Exception ee) {      }    }    query="insert into type (LongVal) values (?);";    ps=conn.prepareStatement(query);    try {      ps.setObject(1,"test text",Types.CHAR,Integer.MIN_VALUE);      ps.execute();      st=conn.createStatement();      st.execute("select * from type where LongVal='test text';");      ResultSet rs=st.getResultSet();      assertEquals(1,getCount(rs));    }  finally {      try {        st.close();      } catch (      Exception ee) {      }    }    query="insert into type (DecVal) values (?);";    ps=conn.prepareStatement(query);    BigDecimal bd2=new BigDecimal("12.21");    ps.setObject(1,bd2,Types.DECIMAL,2);    ps.execute();    query="insert into type (dateVal) values (?);";    ps=conn.prepareStatement(query);    Date d=new Date(123456789);    try {      ps.setObject(1,d,Types.DATE,-1);      ps.execute();      st=conn.createStatement();      st.execute("select * from type where dateVal='" + d.getTime() + "';");      ResultSet rs=st.getResultSet();      assertEquals(1,getCount(rs));    }  finally {      try {        st.close();      } catch (      Exception ee) {      }    }    query="insert into type(BlobVal) values (?);";    ps=conn.prepareStatement(query);    try {      ps.setObject(1,"",Types.BLOB,0);      ps.execute();    }  finally {      try {        st.close();      } catch (      Exception ee) {      }    }  }  finally {    try {      ps.close();    } catch (    Exception ee) {    }  }  try {    ps.setObject(1,"test text",Types.CHAR,Integer.MIN_VALUE);    fail("Exception not thrown");  } catch (  SQLException e) {  }}  }
class C{  public ExtensionNamespaceSupport defineJavaNamespace(String ns){  return defineJavaNamespace(ns,ns);}  }
class C{  public static byte[] slurp(InputStream in) throws IOException {  if (in == null)   throw new NullPointerException("`in' must not be null");  try {    int nRead;    byte[] buffer=new byte[1024];    ByteArrayOutputStream out=new ByteArrayOutputStream();    while ((nRead=in.read(buffer,0,buffer.length)) != -1) {      out.write(buffer,0,nRead);    }    return out.toByteArray();  }  finally {    in.close();  }}  }
class C{  public static boolean recursiveDelete(File file){  if (file.exists()) {    boolean successful=true;    if (file.isDirectory()) {      File[] childList=file.listFiles();      if (childList != null) {        for (        File f : childList) {          successful&=recursiveDelete(f);        }      }    }    return successful & file.delete();  }  return false;}  }
class C{  protected void fireValueChanged(boolean isAdjusting){  fireValueChanged(getMinSelectionIndex(),getMaxSelectionIndex(),isAdjusting);}  }
class C{  public void accumulate(long x){  Cell[] as;  long b, v, r;  int m;  Cell a;  if ((as=cells) != null || (r=function.applyAsLong(b=base,x)) != b && !casBase(b,r)) {    boolean uncontended=true;    if (as == null || (m=as.length - 1) < 0 || (a=as[getProbe() & m]) == null || !(uncontended=(r=function.applyAsLong(v=a.value,x)) == v || a.cas(v,r)))     longAccumulate(x,function,uncontended);  }}  }
class C{  void invoke(@NonNull EventBus bus,@NonNull Object event){  try {    Object subscriber=mSubscriber.get();    if (subscriber != null) {      mMethod.invoke(subscriber,event);    }  } catch (  InvocationTargetException e) {  }catch (  Throwable e) {    e.printStackTrace();  }}  }
class C{  public RuleNet new_net(){  int net_idx=net_list.size() + 1;  String net_name="net#" + net_idx;  return add(net_name,1,false);}  }
class C{  public void run(){  Map<RADIUSServer,Boolean> tmp;  if (debug.messageEnabled()) {    debug.message("Checking server statuses");  }synchronized (SERVER_STATUS) {    tmp=new LinkedHashMap<RADIUSServer,Boolean>(SERVER_STATUS);  }  DatagramSocket testSocket=null;  int offline=0;  for (  Map.Entry<RADIUSServer,Boolean> entry : tmp.entrySet()) {    RADIUSServer server=entry.getKey();    if (!entry.getValue()) {      offline++;      try {        testSocket=new DatagramSocket();        testSocket.setSoTimeout(socket.getSoTimeout());        AccessRequest req=createAccessRequest();        req.addAttribute(new UserNameAttribute("nonexistent"));        req.addAttribute(new UserPasswordAttribute(req.getAuthenticator(),secret,"invalidpass"));        req.addAttribute(new NASIPAddressAttribute(InetAddress.getLocalHost()));        req.addAttribute(new NASPortAttribute(socket.getLocalPort()));        byte[] buffer=new byte[4096];        DatagramPacket dp=new DatagramPacket(buffer,buffer.length);        dp.setPort(server.getPort());        dp.setAddress(InetAddress.getByName(server.getHost()));        byte[] data=req.getOctets();        dp.setLength(data.length);        dp.setData(data);        testSocket.send(dp);        byte[] buffer2=new byte[4096];        dp=new DatagramPacket(buffer2,buffer2.length);        testSocket.receive(dp);        dp.getData();        if (debug.messageEnabled()) {          debug.message("Moving server to online state - " + server);        }synchronized (SERVER_STATUS) {          SERVER_STATUS.put(server,Boolean.TRUE);        }        offline--;      } catch (      Exception ex) {        if (debug.messageEnabled()) {          debug.message("Exception occured while checking RADIUS server status: " + ex.getMessage());        }      } finally {        if (testSocket != null) {          testSocket.disconnect();        }      }    }  }  if (offline == 0) {    cancelled=true;  }}  }
class C{  public void internalEntityDecl(String name,String value) throws SAXException {  if (null != m_resultDeclHandler)   m_resultDeclHandler.internalEntityDecl(name,value);}  }
class C{  @Override public void write(byte[] bts,int st,int end) throws IOException {  try {    beforeWrite(end);    out.write(bts,st,end);    afterWrite(end);  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public PdfFormXObject(PdfPage page){  this(page.getCropBox());  getPdfObject().getOutputStream().writeBytes(page.getContentBytes());  resources=new PdfResources((PdfDictionary)page.getResources().getPdfObject().clone());  getPdfObject().put(PdfName.Resources,resources.getPdfObject());}  }
class C{  private String translatePattern(String pattern,String from,String to){  StringBuilder result=new StringBuilder();  boolean inQuote=false;  for (int i=0; i < pattern.length(); ++i) {    char c=pattern.charAt(i);    if (inQuote) {      if (c == '\'') {        inQuote=false;      }    } else {      if (c == '\'') {        inQuote=true;      } else       if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {        int ci=from.indexOf(c);        if (ci >= 0) {          if (ci < to.length()) {            c=to.charAt(ci);          }        } else {          throw new IllegalArgumentException("Illegal pattern " + " character '" + c + "'");        }      }    }    result.append(c);  }  if (inQuote) {    throw new IllegalArgumentException("Unfinished quote in pattern");  }  return result.toString();}  }
class C{  public void loadState(Bundle bundle) throws Exception {  if (bundle != null && !bundle.isEmpty()) {    for (    ViewItem item : getItems()) {      item.loadState(bundle);    }  }}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  public PrinterAbortException(){  super();}  }
class C{  public void insert_char(char value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_char",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    $self.insert_char(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  protected void sendDataIfMyLastMessage(List<ProtocolMessage> protocolMessages) throws IOException {  ProtocolMessage pm=protocolMessages.get(workflowContext.getProtocolMessagePointer());  if (handlingMyLastProtocolMessage(protocolMessages,workflowContext.getProtocolMessagePointer()) && messageBytesCollector.getRecordBytes().length != 0) {    LOGGER.debug("Records going to be sent: {}",ArrayConverter.bytesToHexString(messageBytesCollector.getRecordBytes()));    if (pm.getRecords().get(0).isMeasuringTiming()) {      transportHandler.measureTiming(true);    }    transportHandler.sendData(messageBytesCollector.getRecordBytes());    messageBytesCollector.flushRecordBytes();  }}  }
class C{  public static String toGreekAlphabetNumberLowerCase(int number){  return AlphabetNumbering.toAlphabetNumber(number,ALPHABET_LOWERCASE);}  }
class C{  void increment(){  count.incrementAndGet();  rateWindow.incrementForTimestamp(timerGetter.now());}  }
class C{  public void run(){synchronized (map) {synchronized (thisTurn) {      if (!thisTurn.isEmpty()) {        for (Iterator iter=thisTurn.iterator(); iter.hasNext(); ) {          Object obj=iter.next();          doGroupAction(obj);          iter.remove();        }      }    }  }synchronized (nextTurn[containerNeeded - 1]) {    Set tempSet=thisTurn;    for (int i=0; i < containerNeeded + 1; i++) {      if (i == 0) {        thisTurn=nextTurn[0];      } else {        if (i == containerNeeded) {          nextTurn[containerNeeded - 1]=tempSet;        } else {          nextTurn[i - 1]=nextTurn[i];        }      }    }  }}  }
class C{  public static String convertJAXBToString(Object jaxbObj) throws JAXBException {  StringWriter sw=new StringWriter();  Marshaller marshaller=jaxbContext.createMarshaller();  marshaller.setProperty(PROP_JAXB_FORMATTED_OUTPUT,Boolean.TRUE);  marshaller.setProperty(PROP_NAMESPACE_PREFIX_MAPPER,nsPrefixMapper);  marshaller.marshal(jaxbObj,sw);  return sw.toString();}  }
class C{  public synchronized void deleteObservers(){  observers.clear();}  }
class C{  void shutdown(){  initiateShutdown();  if (logger.isTraceEnabled()) {    logger.trace(getMessage("Shutting down status analyzer."));  }synchronized (eventMonitor) {    eventMonitor.notifyAll();  }  try {    join(2000);  } catch (  InterruptedException e) {  }  if (isAlive()) {    interrupt();  }}  }
class C{  public static void addSiteSecondaryURLs(SSOToken ssoToken,String siteName,Collection secondaryURLs) throws SMSException, SSOException, ConfigurationException {  ServiceConfig rootNode=getRootSiteConfig(ssoToken);  ServiceConfig sc=rootNode.getSubConfig(siteName);  ServiceConfig accessPoint=sc.getSubConfig(SUBCONFIG_ACCESS_URL);  Set toAdd=new HashSet(secondaryURLs.size() * 2);  toAdd.addAll(secondaryURLs);  Set secondary=accessPoint.getSubConfigNames("*");  if ((secondary != null) && !secondary.isEmpty()) {    toAdd.removeAll(secondary);  }  Set allURLs=getAllSiteURLs(ssoToken);  for (Iterator i=toAdd.iterator(); i.hasNext(); ) {    String url=(String)i.next();    if (allURLs.contains(url)) {      String[] param={url};      throw new ConfigurationException("duplicated.site.url",param);    }  }  for (Iterator i=toAdd.iterator(); i.hasNext(); ) {    String url=(String)i.next();    Map values=new HashMap(2);    Set set=new HashSet(2);    set.add(getNextId(ssoToken));    values.put(ATTR_SEC_ID,set);    accessPoint.addSubConfig(url,SUBCONFIG_SEC_URLS,0,values);  }}  }
class C{  boolean isHostNameArgument(final Argument a){  return HOST_LONG_IDENTIFIERS.contains(a.getLongIdentifier());}  }
class C{  public RunnerSearchConfig ignorePackageOrClass(String name){  ignoredPaths.add(name);  return this;}  }
class C{  public String toString(){  if (array != null) {    return new String(array,offset,count);  }  return "";}  }
class C{  public SimpleAttributeSet(){}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  public static int reverseBytes(int i){  i=((i >>> 8) & 0x00FF00FF) | ((i & 0x00FF00FF) << 8);  return (i >>> 16) | (i << 16);}  }
class C{  private static Set<AttributeType> createFractionalConcernedAttrList(FractionalConfig fractionalConfig,Set<ObjectClass> entryObjectClasses){  Set<String> fractionalConcernedAttributes=new HashSet<>();  Set<String> fractionalAllClassesAttributes=fractionalConfig.getFractionalAllClassesAttributes();  Map<String,Set<String>> fractionalSpecificClassesAttributes=fractionalConfig.getFractionalSpecificClassesAttributes();  Set<String> fractionalClasses=fractionalSpecificClassesAttributes.keySet();  for (  ObjectClass entryObjectClass : entryObjectClasses) {    for (    String fractionalClass : fractionalClasses) {      if (entryObjectClass.hasNameOrOID(fractionalClass.toLowerCase())) {        fractionalConcernedAttributes.addAll(fractionalSpecificClassesAttributes.get(fractionalClass));      }    }  }  fractionalConcernedAttributes.addAll(fractionalAllClassesAttributes);  Set<AttributeType> results=new HashSet<>();  for (  String attrName : fractionalConcernedAttributes) {    results.add(DirectoryServer.getSchema().getAttributeType(attrName));  }  return results;}  }
class C{  public void sessionInvalidated(Object session){  try {    String tokenID=SessionManager.getProvider().getSessionID(session);    String cacheKey=tokenID + LibertyManagerClient.DISCO_RO;    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("LibertyClientSSOTokenListener." + "sessionInvalidated : Session expired. Cleaning cache");    }    if (LibertyManagerClient.bootStrapCache.containsKey(cacheKey)) {      LibertyManagerClient.bootStrapCache.remove(cacheKey);    }    cacheKey=tokenID + LibertyManagerClient.DISCO_CRED;    if (LibertyManagerClient.bootStrapCache.containsKey(cacheKey)) {      LibertyManagerClient.bootStrapCache.remove(cacheKey);    }  } catch (  SessionException se) {    FSUtils.debug.error("LibertyClientSSOTokenListener.sessionInvalidated:",se);  }}  }
class C{  public void deleteEntityConfig(String realm,String entityId) throws IDFFMetaException {  if (entityId == null) {    LogUtil.error(Level.INFO,LogUtil.NULL_ENTITY_ID,null);    throw new IDFFMetaException("nullEntityID",null);  } else {    if ((realm == null) || (realm.length() == 0)) {      realm=ROOT_REALM;    }    String[] args={entityId,realm};    try {      Map oldAttrs=idffMetaConfigInstance.getConfiguration(realm,entityId);      if (oldAttrs == null || oldAttrs.isEmpty()) {        LogUtil.error(Level.INFO,LogUtil.ENTITY_DOES_NOT_EXISTS,args);        throw new IDFFMetaException("entityDoesNotExists",args);      }      Set oldValues=(Set)oldAttrs.get(IDFF_ENTITY_CONFIG_ATTR);      if (oldValues == null || oldValues.isEmpty()) {        LogUtil.error(Level.INFO,LogUtil.NO_ENTITY_CONFIG_TO_DELETE,args);        throw new IDFFMetaException("noEntityConfig",args);      }      removeEntityFromCOT(realm,entityId);      Set attr=new HashSet();      attr.add(IDFF_ENTITY_CONFIG_ATTR);      idffMetaConfigInstance.deleteConfiguration(realm,entityId,attr);      LogUtil.access(Level.INFO,LogUtil.DELETE_ENTITY_CONFIG_SUCCEEDED,args);      IDFFMetaCache.setEntityConfig(realm,entityId,null);    } catch (    ConfigurationException e) {      debug.error("IDFFMetaManager.deleteEntityConfig:",e);      LogUtil.error(Level.INFO,LogUtil.DELETE_ENTITY_CONFIG_FAILED,args);      throw new IDFFMetaException(e);    }catch (    UnsupportedOperationException uoe) {      debug.error("Unsupported operation",uoe);      LogUtil.error(Level.INFO,LogUtil.UNSUPPORTED_OPERATION,null);      throw new IDFFMetaException("unsupportedOperation",null);    }  }}  }
class C{  public void valueChanged(ListSelectionEvent e){  int oldLeadSelectionIndex=leadSelectionIndex;  leadSelectionIndex=JList.this.getLeadSelectionIndex();  if (oldLeadSelectionIndex != leadSelectionIndex) {    Accessible oldLS, newLS;    oldLS=(oldLeadSelectionIndex >= 0) ? getAccessibleChild(oldLeadSelectionIndex) : null;    newLS=(leadSelectionIndex >= 0) ? getAccessibleChild(leadSelectionIndex) : null;    firePropertyChange(AccessibleContext.ACCESSIBLE_ACTIVE_DESCENDANT_PROPERTY,oldLS,newLS);  }  firePropertyChange(AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,Boolean.valueOf(false),Boolean.valueOf(true));  firePropertyChange(AccessibleContext.ACCESSIBLE_SELECTION_PROPERTY,Boolean.valueOf(false),Boolean.valueOf(true));  AccessibleStateSet s=getAccessibleStateSet();  ListSelectionModel lsm=JList.this.getSelectionModel();  if (lsm.getSelectionMode() != ListSelectionModel.SINGLE_SELECTION) {    if (!s.contains(AccessibleState.MULTISELECTABLE)) {      s.add(AccessibleState.MULTISELECTABLE);      firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,null,AccessibleState.MULTISELECTABLE);    }  } else {    if (s.contains(AccessibleState.MULTISELECTABLE)) {      s.remove(AccessibleState.MULTISELECTABLE);      firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,AccessibleState.MULTISELECTABLE,null);    }  }}  }
class C{  public void put(E e) throws InterruptedException {  checkNotNull(e);  final ReentrantLock lock=this.lock;  lock.lockInterruptibly();  try {    while (count == items.length)     notFull.await();    enqueue(e);  }  finally {    lock.unlock();  }}  }
class C{  @Inject public AuthIdHelper(CoreServicesWrapper coreServicesWrapper,JwtBuilderFactory jwtBuilderFactory,SigningManager signingManager){  this.coreServicesWrapper=coreServicesWrapper;  this.jwtBuilderFactory=jwtBuilderFactory;  this.signingManager=signingManager;}  }
class C{  @Override public boolean accept(File file){  return file.isFile();}  }
class C{  private ConditionResult processAND(SearchFilter completeFilter,Entry entry,int depth) throws DirectoryException {  if (filterComponents == null) {    LocalizableMessage message=ERR_SEARCH_FILTER_COMPOUND_COMPONENTS_NULL.get(entry.getName(),completeFilter,filterType);    throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message);  } else   if (filterComponents.isEmpty()) {    if (logger.isTraceEnabled()) {      logger.trace("Returning TRUE for LDAP TRUE " + "filter (&)");    }    return ConditionResult.TRUE;  } else {    if (depth >= MAX_NESTED_FILTER_DEPTH) {      LocalizableMessage message=ERR_SEARCH_FILTER_NESTED_TOO_DEEP.get(entry.getName(),completeFilter);      throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message);    }    for (    SearchFilter f : filterComponents) {      ConditionResult result=f.matchesEntryInternal(completeFilter,entry,depth + 1);switch (result) {case TRUE:        break;case FALSE:      if (logger.isTraceEnabled()) {        logger.trace("Returning FALSE for AND component %s in " + "filter %s for entry %s",f,completeFilter,entry.getName());      }    return result;case UNDEFINED:  if (logger.isTraceEnabled()) {    logger.trace("Undefined result for AND component %s in filter " + "%s for entry %s",f,completeFilter,entry.getName());  }return result;default :LocalizableMessage message=ERR_SEARCH_FILTER_INVALID_RESULT_TYPE.get(entry.getName(),completeFilter,result);throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message);}}if (logger.isTraceEnabled()) {logger.trace("Returning TRUE for AND component %s in filter %s " + "for entry %s",this,completeFilter,entry.getName());}return ConditionResult.TRUE;}}  }
class C{  public void test_LongValueExactFloatPos(){  float a=9223372036854775806.99999F;  BigDecimal aNumber=new BigDecimal(a);  try {    aNumber.longValueExact();    fail("java.lang.ArithmeticException isn't thrown after calling longValueExact");  } catch (  java.lang.ArithmeticException ae) {  }}  }
class C{  private org.w3c.dom.Element lookup(com.sun.identity.liberty.ws.disco.jaxb.QueryType query,com.sun.identity.liberty.ws.soapbinding.Message message) throws JAXBException {  DiscoUtils.debug.message("in lookup.");  Status status=new Status(DiscoConstants.DISCO_NS,DiscoConstants.DISCO_NSPREFIX);  QueryResponse resp=new QueryResponse(status);  String providerID=DiscoServiceManager.getDiscoProviderID();  String resourceID=null;  ResourceIDType resID=query.getResourceID();  if (resID == null) {    resourceID=getResourceID(query.getEncryptedResourceID(),providerID);  } else {    resourceID=resID.getValue();  }  DiscoEntryHandler entryHandler=null;  String userDN=null;  boolean isB2E=false;  if (resourceID == null || resourceID.equals(DiscoConstants.IMPLIED_RESOURCE)) {    DiscoUtils.debug.message("DiscoveryService.lookup: in B2E case");    isB2E=true;  }  if (!isB2E) {    ResourceIDMapper idMapper=DiscoServiceManager.getResourceIDMapper(providerID);    if (idMapper == null) {      idMapper=DiscoServiceManager.getDefaultResourceIDMapper();    }    userDN=idMapper.getUserID(providerID,resourceID,message);    if (userDN == null) {      DiscoUtils.debug.error("DiscoService.lookup: couldn't find the " + "user associated with the resourceID:" + resourceID);      status.setCode(DiscoConstants.QNAME_FAILED);      Document doc=null;      try {        doc=XMLUtils.newDocument();      } catch (      Exception ex) {        DiscoUtils.debug.error("DiscoService.lookup:",ex);      }      DiscoUtils.getDiscoMarshaller().marshal(resp,doc);      return doc.getDocumentElement();    }    if (DiscoUtils.debug.messageEnabled()) {      DiscoUtils.debug.message("DiscoService.lookup: userDN=" + userDN);    }    entryHandler=DiscoServiceManager.getDiscoEntryHandler();  } else {    entryHandler=DiscoServiceManager.getGlobalEntryHandler();  }  if (entryHandler == null) {    status.setCode(DiscoConstants.QNAME_FAILED);    DiscoUtils.debug.message("DiscoService.lookup: null DiscoEntryHandler.");    return XMLUtils.toDOMDocument(resp.toString(),null).getDocumentElement();  }  Map discoEntriesMap=entryHandler.getDiscoEntries(userDN,query.getRequestedServiceType());  Collection results=discoEntriesMap.values();  Map returnMap=null;  if (results.size() == 0) {    if (DiscoUtils.debug.messageEnabled()) {      DiscoUtils.debug.message("DiscoService.lookup: lookup " + "NoResults for user:" + userDN);    }    status.setCode(DiscoConstants.QNAME_FAILED);    String[] data={userDN};    LogUtil.error(Level.INFO,LogUtil.DS_LOOKUP_FAILURE,data);  } else {    if (DiscoUtils.debug.messageEnabled()) {      DiscoUtils.debug.message("DiscoService.lookup: find " + results.size() + "ResourceOfferings for userDN:"+ userDN);    }    Authorizer authorizer=null;    if (DiscoServiceManager.needPolicyEvalLookup()) {      DiscoUtils.debug.message("DiscoService.lookup:needPolicyEval.");      authorizer=DiscoServiceManager.getAuthorizer();      if (authorizer == null) {        status.setCode(DiscoConstants.QNAME_FAILED);        String[] data={userDN};        LogUtil.error(Level.INFO,LogUtil.DS_LOOKUP_FAILURE,data);        return XMLUtils.toDOMDocument(resp.toString(),null).getDocumentElement();      }    }    returnMap=DiscoUtils.checkPolicyAndHandleDirectives(userDN,message,results,authorizer,null,null,message.getToken());    List offerings=(List)returnMap.get(DiscoUtils.OFFERINGS);    if (offerings.isEmpty()) {      if (DiscoUtils.debug.messageEnabled()) {        DiscoUtils.debug.message("DiscoService.lookup: after policy" + " check and directive handling, NoResults for:" + userDN);      }      status.setCode(DiscoConstants.QNAME_FAILED);      String[] data={userDN};      LogUtil.error(Level.INFO,LogUtil.DS_LOOKUP_FAILURE,data);    } else {      resp.setResourceOffering(offerings);      DiscoUtils.debug.message("after resp.getresoff.addall");      List credentials=(List)returnMap.get(DiscoUtils.CREDENTIALS);      if ((credentials != null) && (!credentials.isEmpty())) {        DiscoUtils.debug.message("DiscoService.lookup: has cred.");        resp.setCredentials(credentials);      }      status.setCode(DiscoConstants.QNAME_OK);      String[] data={userDN};      LogUtil.access(Level.INFO,LogUtil.DS_LOOKUP_SUCCESS,data);    }  }  return XMLUtils.toDOMDocument(resp.toString(),null).getDocumentElement();}  }
class C{  boolean hasMask(int mask){  return (this.mask & mask) != 0;}  }
class C{  @DataProvider(name="longLimitData") Object[][] createLongLimitData(){  return new Object[][]{{1L,1L}};}  }
class C{  @Override public boolean isVerbose(){  return verboseArg.isPresent();}  }
class C{  public Object clone(){  Conditions answer=null;  try {    answer=(Conditions)super.clone();  } catch (  CloneNotSupportedException se) {    answer=new Conditions();  }  answer.name=name;  answer.description=description;  answer.conditions=new HashMap();  Iterator items=conditions.keySet().iterator();  while (items.hasNext()) {    Object item=items.next();    Condition condition=(Condition)conditions.get(item);    answer.conditions.put(item,condition.clone());  }  return (answer);}  }
class C{  public synchronized void start(){  TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"start","starting the timer");  if (isActive == false) {    timer=new java.util.Timer();    TimerAlarmClock alarmClock;    Date date;    Date currentDate=new Date();    sendPastNotifications(currentDate,sendPastNotifications);    for (    Object[] obj : timerTable.values()) {      date=(Date)obj[TIMER_DATE_INDEX];      boolean fixedRate=((Boolean)obj[FIXED_RATE_INDEX]).booleanValue();      if (fixedRate) {        alarmClock=new TimerAlarmClock(this,date);        obj[ALARM_CLOCK_INDEX]=(Object)alarmClock;        timer.schedule(alarmClock,alarmClock.next);      } else {        alarmClock=new TimerAlarmClock(this,(date.getTime() - currentDate.getTime()));        obj[ALARM_CLOCK_INDEX]=(Object)alarmClock;        timer.schedule(alarmClock,alarmClock.timeout);      }    }    isActive=true;    TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"start","timer started");  } else {    TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"start","the timer is already activated");  }}  }
class C{  public void debug(Object message,Throwable t){}  }
class C{  public JKDefaultTableModel(final Vector data,final Vector columnNames){  setDataVector(data,columnNames);}  }
class C{  public GeneralName(int tag,ASN1Encodable name){  this.obj=name;  this.tag=tag;}  }
class C{  public void addSetNext(String pattern,String methodName,String paramType){  addRule(pattern,new SetNextRule(methodName,paramType));}  }
class C{  public static boolean addSmiles(Context context,Spannable spannable){  boolean hasChanges=false;  for (  Entry<Pattern,Integer> entry : emoticons.entrySet()) {    Matcher matcher=entry.getKey().matcher(spannable);    while (matcher.find()) {      boolean set=true;      for (      ImageSpan span : spannable.getSpans(matcher.start(),matcher.end(),ImageSpan.class))       if (spannable.getSpanStart(span) >= matcher.start() && spannable.getSpanEnd(span) <= matcher.end())       spannable.removeSpan(span); else {        set=false;        break;      }      if (set) {        hasChanges=true;        spannable.setSpan(new ImageSpan(context,entry.getValue()),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);      }    }  }  return hasChanges;}  }
class C{  public FrameBodyTIT3(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public NSObject lastObject(){  return array[array.length - 1];}  }
class C{  private StringBuilder determineMethodsAllowed(HttpServletRequest req){  StringBuilder methodsAllowed=new StringBuilder();  WebResource resource=resources.getResource(getRelativePath(req));  if (!resource.exists()) {    methodsAllowed.append("OPTIONS, MKCOL, PUT, LOCK");    return methodsAllowed;  }  methodsAllowed.append("OPTIONS, GET, HEAD, POST, DELETE, TRACE");  methodsAllowed.append(", PROPPATCH, COPY, MOVE, LOCK, UNLOCK");  if (listings) {    methodsAllowed.append(", PROPFIND");  }  if (resource.isFile()) {    methodsAllowed.append(", PUT");  }  return methodsAllowed;}  }
class C{  public void push(){  for (int i=cursor; i < size; i++) {    if (buffer[i] != null) {      target.publish(buffer[i]);    }    buffer[i]=null;  }  for (int i=0; i < cursor; i++) {    if (buffer[i] != null) {      target.publish(buffer[i]);    }    buffer[i]=null;  }  cursor=0;}  }
class C{  protected XMLPropertyListParser(){}  }
class C{  public void propertyChange(PropertyChangeEvent e){  getHandler().propertyChange(e);}  }
class C{  @Override public void enqueueCall(Callback<GeocodingResponse> callback){  getCall().enqueue(callback);}  }
class C{  public Mp4BoxHeader(){}  }
class C{  protected Map<Object,Object> createIssueMap(Issue issue){  Map<Object,Object> params=new HashMap<Object,Object>();  if (issue != null) {    params.put(FIELD_BODY,issue.getBody());    params.put(FIELD_TITLE,issue.getTitle());  }  return params;}  }
class C{  private int countOfMode(boolean data){  int count=0;  for (Node p=head; p != null; ) {    if (!p.isMatched()) {      if (p.isData != data)       return 0;      if (++count == Integer.MAX_VALUE)       break;    }    Node n=p.next;    if (n != p)     p=n; else {      count=0;      p=head;    }  }  return count;}  }
class C{  public void addListener(ConfigurationListener l){  serviceListeners.add(Pair.<ConfigurationListener,Predicate<String>>of(l,null));}  }
class C{  @SuppressWarnings("unchecked") private void rehash(HashEntry<K,V> node){  HashEntry<K,V>[] oldTable=table;  int oldCapacity=oldTable.length;  int newCapacity=oldCapacity << 1;  threshold=(int)(newCapacity * loadFactor);  HashEntry<K,V>[] newTable=(HashEntry<K,V>[])new HashEntry<?,?>[newCapacity];  int sizeMask=newCapacity - 1;  for (int i=0; i < oldCapacity; i++) {    HashEntry<K,V> e=oldTable[i];    if (e != null) {      HashEntry<K,V> next=e.next;      int idx=e.hash & sizeMask;      if (next == null)       newTable[idx]=e; else {        HashEntry<K,V> lastRun=e;        int lastIdx=idx;        for (HashEntry<K,V> last=next; last != null; last=last.next) {          int k=last.hash & sizeMask;          if (k != lastIdx) {            lastIdx=k;            lastRun=last;          }        }        newTable[lastIdx]=lastRun;        for (HashEntry<K,V> p=e; p != lastRun; p=p.next) {          V v=p.value;          int h=p.hash;          int k=h & sizeMask;          HashEntry<K,V> n=newTable[k];          newTable[k]=new HashEntry<K,V>(h,p.key,v,n);        }      }    }  }  int nodeIndex=node.hash & sizeMask;  node.setNext(newTable[nodeIndex]);  newTable[nodeIndex]=node;  table=newTable;}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.ConditionAbstractType createConditionAbstractType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.ConditionAbstractTypeImpl();}  }
class C{  public MalformedURLException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  public SQLPermission(String name,String actions){  super(name,actions);}  }
class C{  protected final boolean isListState(){  return stateTextTypes.charAt(state) == 'L';}  }
class C{  public boolean isTrustedXACMLProvider(String realm,String entityId,String trustedEntityId,String role) throws SAML2MetaException {  boolean result=false;  if (role != null) {    if (role.equals(SAML2Constants.PDP_ROLE)) {      XACMLPDPConfigElement pdpConfig=getPolicyDecisionPointConfig(realm,entityId);      if (pdpConfig != null) {        result=isSameCircleOfTrust(pdpConfig,realm,trustedEntityId);      }    } else     if (role.equals(SAML2Constants.PEP_ROLE)) {      XACMLAuthzDecisionQueryConfigElement pepConfig=getPolicyEnforcementPointConfig(realm,entityId);      result=isSameCircleOfTrust(pepConfig,realm,trustedEntityId);    }  }  return result;}  }
class C{  public final void printVerboseMessage(final LocalizableMessage msg){  if (isVerbose()) {    out.println(wrap(msg));  }}  }
class C{  private PreparedStatement roles(Connection dbConnection,String username) throws SQLException {  PreparedStatement roles=dbConnection.prepareStatement(preparedRoles);  roles.setString(1,username);  return (roles);}  }
class C{  public byte[] writeByteArray(){  ByteBuffer dataBuffer;  byte[] data;  if (value == null) {    logger.warning("Value of StringFixedlength Field is null using default value instead");    data=new byte[size];    for (int i=0; i < size; i++) {      data[i]=' ';    }    return data;  }  try {    String charSetName=getTextEncodingCharSet();    if (charSetName.equals(TextEncoding.CHARSET_UTF_16)) {      charSetName=TextEncoding.CHARSET_UTF_16_LE_ENCODING_FORMAT;      CharsetEncoder encoder=Charset.forName(charSetName).newEncoder();      dataBuffer=encoder.encode(CharBuffer.wrap('\ufeff' + (String)value));    } else {      CharsetEncoder encoder=Charset.forName(charSetName).newEncoder();      dataBuffer=encoder.encode(CharBuffer.wrap((String)value));    }  } catch (  CharacterCodingException ce) {    logger.warning("There was a problem writing the following StringFixedlength Field:" + value + ":"+ ce.getMessage()+ "using default value instead");    data=new byte[size];    for (int i=0; i < size; i++) {      data[i]=' ';    }    return data;  }  if (dataBuffer != null) {    if (dataBuffer.limit() == size) {      data=new byte[dataBuffer.limit()];      dataBuffer.get(data,0,dataBuffer.limit());      return data;    } else     if (dataBuffer.limit() > size) {      logger.warning("There was a problem writing the following StringFixedlength Field:" + value + " when converted to bytes has length of:"+ dataBuffer.limit()+ " but field was defined with length of:"+ size+ " too long so stripping extra length");      data=new byte[size];      dataBuffer.get(data,0,size);      return data;    } else {      logger.warning("There was a problem writing the following StringFixedlength Field:" + value + " when converted to bytes has length of:"+ dataBuffer.limit()+ " but field was defined with length of:"+ size+ " too short so padding with spaces to make up extra length");      data=new byte[size];      dataBuffer.get(data,0,dataBuffer.limit());      for (int i=dataBuffer.limit(); i < size; i++) {        data[i]=' ';      }      return data;    }  } else {    logger.warning("There was a serious problem writing the following StringFixedlength Field:" + value + ":"+ "using default value instead");    data=new byte[size];    for (int i=0; i < size; i++) {      data[i]=' ';    }    return data;  }}  }
class C{  public boolean isPolicyAssigned(String policyDN,String serviceName) throws AMException, SSOException {  throw new UnsupportedOperationException();}  }
class C{  public CompoundName(String n,Properties syntax) throws InvalidNameException {  if (syntax == null) {    throw new NullPointerException();  }  mySyntax=syntax;  impl=new NameImpl(syntax,n);}  }
class C{  public TagException(String msg,Throwable ex){  super(msg,ex);}  }
class C{  public static int reverse(int i){  i=((i >>> 1) & 0x55555555) | ((i & 0x55555555) << 1);  i=((i >>> 2) & 0x33333333) | ((i & 0x33333333) << 2);  i=((i >>> 4) & 0x0F0F0F0F) | ((i & 0x0F0F0F0F) << 4);  i=((i >>> 8) & 0x00FF00FF) | ((i & 0x00FF00FF) << 8);  return ((i >>> 16)) | ((i) << 16);}  }
class C{  public void back(){  if (--pos == -1) {    pos=0;  }}  }
class C{  static void _dumpAsString(String indent,boolean verbose,ASN1Primitive obj,StringBuffer buf){  String nl=System.getProperty("line.separator");  if (obj instanceof ASN1Sequence) {    Enumeration e=((ASN1Sequence)obj).getObjects();    String tab=indent + TAB;    buf.append(indent);    if (obj instanceof BERSequence) {      buf.append("BER Sequence");    } else     if (obj instanceof DERSequence) {      buf.append("DER Sequence");    } else {      buf.append("Sequence");    }    buf.append(nl);    while (e.hasMoreElements()) {      Object o=e.nextElement();      if (o == null || o.equals(DERNull.INSTANCE)) {        buf.append(tab);        buf.append("NULL");        buf.append(nl);      } else       if (o instanceof ASN1Primitive) {        _dumpAsString(tab,verbose,(ASN1Primitive)o,buf);      } else {        _dumpAsString(tab,verbose,((ASN1Encodable)o).toASN1Primitive(),buf);      }    }  } else   if (obj instanceof ASN1TaggedObject) {    String tab=indent + TAB;    buf.append(indent);    if (obj instanceof BERTaggedObject) {      buf.append("BER Tagged [");    } else {      buf.append("Tagged [");    }    ASN1TaggedObject o=(ASN1TaggedObject)obj;    buf.append(Integer.toString(o.getTagNo()));    buf.append(']');    if (!o.isExplicit()) {      buf.append(" IMPLICIT ");    }    buf.append(nl);    if (o.isEmpty()) {      buf.append(tab);      buf.append("EMPTY");      buf.append(nl);    } else {      _dumpAsString(tab,verbose,o.getObject(),buf);    }  } else   if (obj instanceof ASN1Set) {    Enumeration e=((ASN1Set)obj).getObjects();    String tab=indent + TAB;    buf.append(indent);    if (obj instanceof BERSet) {      buf.append("BER Set");    } else {      buf.append("DER Set");    }    buf.append(nl);    while (e.hasMoreElements()) {      Object o=e.nextElement();      if (o == null) {        buf.append(tab);        buf.append("NULL");        buf.append(nl);      } else       if (o instanceof ASN1Primitive) {        _dumpAsString(tab,verbose,(ASN1Primitive)o,buf);      } else {        _dumpAsString(tab,verbose,((ASN1Encodable)o).toASN1Primitive(),buf);      }    }  } else   if (obj instanceof ASN1OctetString) {    ASN1OctetString oct=(ASN1OctetString)obj;    if (obj instanceof BEROctetString || obj instanceof BERConstructedOctetString) {      buf.append(indent + "BER Constructed Octet String" + "["+ oct.getOctets().length+ "] ");    } else {      buf.append(indent + "DER Octet String" + "["+ oct.getOctets().length+ "] ");    }    if (verbose) {      buf.append(dumpBinaryDataAsString(indent,oct.getOctets()));    } else {      buf.append(nl);    }  } else   if (obj instanceof ASN1ObjectIdentifier) {    buf.append(indent + "ObjectIdentifier(" + ((ASN1ObjectIdentifier)obj).getId()+ ")"+ nl);  } else   if (obj instanceof DERBoolean) {    buf.append(indent + "Boolean(" + ((DERBoolean)obj).isTrue()+ ")"+ nl);  } else   if (obj instanceof ASN1Integer) {    buf.append(indent + "Integer(" + ((ASN1Integer)obj).getValue()+ ")"+ nl);  } else   if (obj instanceof DERBitString) {    DERBitString bt=(DERBitString)obj;    buf.append(indent + "DER Bit String" + "["+ bt.getBytes().length+ ", "+ bt.getPadBits()+ "] ");    if (verbose) {      buf.append(dumpBinaryDataAsString(indent,bt.getBytes()));    } else {      buf.append(nl);    }  } else   if (obj instanceof DERIA5String) {    buf.append(indent + "IA5String(" + ((DERIA5String)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERUTF8String) {    buf.append(indent + "UTF8String(" + ((DERUTF8String)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERPrintableString) {    buf.append(indent + "PrintableString(" + ((DERPrintableString)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERVisibleString) {    buf.append(indent + "VisibleString(" + ((DERVisibleString)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERBMPString) {    buf.append(indent + "BMPString(" + ((DERBMPString)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERT61String) {    buf.append(indent + "T61String(" + ((DERT61String)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERUTCTime) {    buf.append(indent + "UTCTime(" + ((DERUTCTime)obj).getTime()+ ") "+ nl);  } else   if (obj instanceof DERGeneralizedTime) {    buf.append(indent + "GeneralizedTime(" + ((DERGeneralizedTime)obj).getTime()+ ") "+ nl);  } else   if (obj instanceof BERApplicationSpecific) {    buf.append(outputApplicationSpecific("BER",indent,verbose,obj,nl));  } else   if (obj instanceof DERApplicationSpecific) {    buf.append(outputApplicationSpecific("DER",indent,verbose,obj,nl));  } else   if (obj instanceof DEREnumerated) {    DEREnumerated en=(DEREnumerated)obj;    buf.append(indent + "DER Enumerated(" + en.getValue()+ ")"+ nl);  } else   if (obj instanceof DERExternal) {    DERExternal ext=(DERExternal)obj;    buf.append(indent + "External " + nl);    String tab=indent + TAB;    if (ext.getDirectReference() != null) {      buf.append(tab + "Direct Reference: " + ext.getDirectReference().getId()+ nl);    }    if (ext.getIndirectReference() != null) {      buf.append(tab + "Indirect Reference: " + ext.getIndirectReference().toString()+ nl);    }    if (ext.getDataValueDescriptor() != null) {      _dumpAsString(tab,verbose,ext.getDataValueDescriptor(),buf);    }    buf.append(tab + "Encoding: " + ext.getEncoding()+ nl);    _dumpAsString(tab,verbose,ext.getExternalContent(),buf);  } else {    buf.append(indent + obj.toString() + nl);  }}  }
class C{  @Get public Representation userCodeForm() throws OAuth2RestletException, InvalidGrantException, NotFoundException, ServerException {  final OAuth2Request request=requestFactory.create(getRequest());  if (request.getParameter(OAuth2Constants.DeviceCode.USER_CODE) != null) {    return verify(null);  } else {    return getTemplateRepresentation(FORM,request,null);  }}  }
class C{  @Override public void endPrefixMapping(String prefix) throws SAXException {  if (saxLog.isDebugEnabled()) {    saxLog.debug("endPrefixMapping(" + prefix + ")");  }  ArrayStack<String> stack=namespaces.get(prefix);  if (stack == null) {    return;  }  try {    stack.pop();    if (stack.empty())     namespaces.remove(prefix);  } catch (  EmptyStackException e) {    throw createSAXException("endPrefixMapping popped too many times");  }}  }
class C{  public void skippedEntity(StylesheetHandler handler,String name) throws org.xml.sax.SAXException {}  }
class C{  public void updateEntityConfig(String realm,String cotName,String entityID) throws IDFFMetaException, JAXBException {  String classMethod="IDFFCOTUtils.updateEntityConfig: ";  IDFFMetaManager idffMetaMgr=new IDFFMetaManager(callerSession);  ObjectFactory objFactory=new ObjectFactory();  EntityDescriptorElement entityDesc=idffMetaMgr.getEntityDescriptor(realm,entityID);  if (entityDesc == null) {    debug.error(classMethod + " No such entity: " + entityID);    String[] data={entityID};    throw new IDFFMetaException("invalidEntityID",data);  }  EntityConfigElement entityConfig=idffMetaMgr.getEntityConfig(realm,entityID);  if (entityConfig == null) {    BaseConfigType IDFFCOTUtils=null;    AttributeType atype=objFactory.createAttributeType();    atype.setName(COT_LIST);    atype.getValue().add(cotName);    entityConfig=objFactory.createEntityConfigElement();    entityConfig.setEntityID(entityID);    entityConfig.setHosted(false);    if (IDFFMetaUtils.getSPDescriptor(entityDesc) != null) {      IDFFCOTUtils=objFactory.createSPDescriptorConfigElement();      IDFFCOTUtils.getAttribute().add(atype);      entityConfig.getSPDescriptorConfig().add(IDFFCOTUtils);    }    if (IDFFMetaUtils.getIDPDescriptor(entityDesc) != null) {      IDFFCOTUtils=objFactory.createIDPDescriptorConfigElement();      IDFFCOTUtils.getAttribute().add(atype);      entityConfig.getIDPDescriptorConfig().add(IDFFCOTUtils);    }    if (entityDesc.getAffiliationDescriptor() != null) {      IDFFCOTUtils=objFactory.createAffiliationDescriptorConfigElement();      IDFFCOTUtils.getAttribute().add(atype);      entityConfig.setAffiliationDescriptorConfig(IDFFCOTUtils);    }    idffMetaMgr.setEntityConfig(realm,entityConfig);  } else {    List spConfigList=entityConfig.getSPDescriptorConfig();    List idpConfigList=entityConfig.getIDPDescriptorConfig();    updateCOTAttrInConfig(realm,spConfigList,cotName,entityConfig,objFactory,idffMetaMgr);    updateCOTAttrInConfig(realm,idpConfigList,cotName,entityConfig,objFactory,idffMetaMgr);    BaseConfigType affiConfig=entityConfig.getAffiliationDescriptorConfig();    if (affiConfig != null) {      List affiConfigList=new ArrayList();      affiConfigList.add(affiConfig);      updateCOTAttrInConfig(realm,affiConfigList,cotName,entityConfig,objFactory,idffMetaMgr);    }  }}  }
class C{  public void clear(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    setArray(new Object[0]);  }  finally {    lock.unlock();  }}  }
class C{  boolean fitsIntoLong(boolean isPositive,boolean ignoreNegativeZero){  while (count > 0 && digits[count - 1] == '0') {    --count;  }  if (count == 0) {    return isPositive || ignoreNegativeZero;  }  if (decimalAt < count || decimalAt > MAX_COUNT) {    return false;  }  if (decimalAt < MAX_COUNT)   return true;  for (int i=0; i < count; ++i) {    char dig=digits[i], max=LONG_MIN_REP[i];    if (dig > max)     return false;    if (dig < max)     return true;  }  if (count < decimalAt)   return true;  return !isPositive;}  }
class C{  public ImmunityStar(Mario mario,int stageZone,float xPos,float yPos,float xVel,float yVel,Image... sprites){  super(new String[]{"M " + ASPECT_LENGTH + ","+ ASPECT_LENGTH+ " L "+ ASPECT_LENGTH+ ","+ ASPECT_LENGTH,"M " + ASPECT_LENGTH + ", 0"+ " L "+ ASPECT_LENGTH+ ","+ (ASPECT_LENGTH - (7.46 * REL_HEIGHT)),"M " + (ASPECT_LENGTH - (3.73 * REL_HEIGHT)) + ","+ ASPECT_LENGTH+ " L "+ (3.73 * REL_HEIGHT)+ ","+ ASPECT_LENGTH,"M 0,0 " + " L 0," + (ASPECT_LENGTH - (7.46 * REL_HEIGHT)),"M " + (7.46 * REL_HEIGHT) + ","+ (ASPECT_LENGTH - 1)+ " L "+ (ASPECT_LENGTH - (7.46 * REL_HEIGHT))+ ","+ (ASPECT_LENGTH - 1),"M 0,0 L 0,0 " + ASPECT_LENGTH + ",0 "+ ASPECT_LENGTH+ ","+ ASPECT_LENGTH+ ", 0,"+ ASPECT_LENGTH+ ", 0,0"},stageZone,xPos,yPos,xVel,yVel,sprites);  super.getSpriteFrame().toFront();  pushThreshold=0.5f * REL_HEIGHT;  gravity=REL_HEIGHT;  jumpVel=-9.6f * REL_HEIGHT;}  }
class C{  public void test_getPrimeQ(){  assertEquals("invalid prime Q",Util.rsaCrtParam.getPrimeQ(),key.getPrimeQ());}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text terNode;  Text dayNode;  DocumentFragment docFrag;  Node retval;  Node firstChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  terNode=doc.createTextNode("ter");  dayNode=doc.createTextNode("day");  docFrag=doc.createDocumentFragment();  retval=docFrag.appendChild(terNode);  retval=docFrag.appendChild(dayNode);  firstChild=titleAttr.getFirstChild();  assertNotNull("attrChildNotNull",firstChild);  retval=titleAttr.replaceChild(docFrag,firstChild);  value=titleAttr.getValue();  assertEquals("attrValue","terday",value);  value=titleAttr.getNodeValue();  assertEquals("attrNodeValue","terday",value);  value=retval.getNodeValue();  assertEquals("retvalValue","Yes",value);  firstChild=titleAttr.getFirstChild();  value=firstChild.getNodeValue();  assertEquals("firstChildValue","ter",value);}  }
class C{  public NOTCondition(Condition condition){  Reject.ifNull(condition);  this.condition=condition;}  }
class C{  public GenericAgentProfileViewBean(String name){  super(name);}  }
class C{  public ISPolicy(){  super();  defaultPolicy=java.security.Policy.getPolicy();  debug.message("ISPolicy:: ISPolicy() called");}  }
class C{  public static byte[] toByteArray(Reader input,Charset encoding) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output,encoding);  return output.toByteArray();}  }
class C{  public SHA1PasswordStorageSchemeTestCase(){  super("cn=SHA-1,cn=Password Storage Schemes,cn=config");}  }
class C{  public SpinnerDateModel(Date value,Comparable start,Comparable end,int calendarField){  if (value == null) {    throw new IllegalArgumentException("value is null");  }  if (!calendarFieldOK(calendarField)) {    throw new IllegalArgumentException("invalid calendarField");  }  if (!(((start == null) || (start.compareTo(value) <= 0)) && ((end == null) || (end.compareTo(value) >= 0)))) {    throw new IllegalArgumentException("(start <= value <= end) is false");  }  this.value=Calendar.getInstance();  this.start=start;  this.end=end;  this.calendarField=calendarField;  this.value.setTime(value);}  }
class C{  public void access(Level level,String messageId,String data[],Object session) throws LogException {  access(level,messageId,data,session,null);}  }
class C{  public void acceptDrag(int dragOperation){  getDropTargetContext().acceptDrag(dragOperation);}  }
class C{  private static int[] add(int[] x,long val){  int[] y;  long sum=0;  int xIndex=x.length;  int[] result;  int highWord=(int)(val >>> 32);  if (highWord == 0) {    result=new int[xIndex];    sum=(x[--xIndex] & LONG_MASK) + val;    result[xIndex]=(int)sum;  } else {    if (xIndex == 1) {      result=new int[2];      sum=val + (x[0] & LONG_MASK);      result[1]=(int)sum;      result[0]=(int)(sum >>> 32);      return result;    } else {      result=new int[xIndex];      sum=(x[--xIndex] & LONG_MASK) + (val & LONG_MASK);      result[xIndex]=(int)sum;      sum=(x[--xIndex] & LONG_MASK) + (highWord & LONG_MASK) + (sum >>> 32);      result[xIndex]=(int)sum;    }  }  boolean carry=(sum >>> 32 != 0);  while (xIndex > 0 && carry)   carry=((result[--xIndex]=x[xIndex] + 1) == 0);  while (xIndex > 0)   result[--xIndex]=x[xIndex];  if (carry) {    int bigger[]=new int[result.length + 1];    System.arraycopy(result,0,bigger,1,result.length);    bigger[0]=0x01;    return bigger;  }  return result;}  }
class C{  @Override public void onItemRangeInserted(T sender,int positionStart,int itemCount){  this.adapter.notifyItemRangeInserted(positionStart,itemCount);}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] enclosingRectangle=image.getEnclosingRectangle();  if (enclosingRectangle == null) {    throw NotFoundException.getNotFoundInstance();  }  int left=enclosingRectangle[0];  int top=enclosingRectangle[1];  int width=enclosingRectangle[2];  int height=enclosingRectangle[3];  BitMatrix bits=new BitMatrix(MATRIX_WIDTH,MATRIX_HEIGHT);  for (int y=0; y < MATRIX_HEIGHT; y++) {    int iy=top + (y * height + height / 2) / MATRIX_HEIGHT;    for (int x=0; x < MATRIX_WIDTH; x++) {      int ix=left + (x * width + width / 2 + (y & 0x01) * width / 2) / MATRIX_WIDTH;      if (image.get(ix,iy)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  static public void assertEquals(String message,short expected,short actual){  assertEquals(message,new Short(expected),new Short(actual));}  }
class C{  protected BasicPoolEntry createEntry(RouteSpecificPool rospl,ClientConnectionOperator op){  if (log.isDebugEnabled()) {    log.debug("Creating new connection [" + rospl.getRoute() + "]");  }  BasicPoolEntry entry=new BasicPoolEntry(op,rospl.getRoute(),refQueue);  poolLock.lock();  try {    rospl.createdEntry(entry);    numConnections++;    issuedConnections.add(entry.getWeakRef());  }  finally {    poolLock.unlock();  }  return entry;}  }
class C{  public LDAPConnectionConsoleInteraction(ConsoleApplication app,SecureConnectionCliArgs secureArgs){  this(app,secureArgs,false);}  }
class C{  public ConnectionParameters hostName(String hostName){  this.hostName=hostName;  return this;}  }
class C{  public void testConstrBIScale(){  String a="1231212478987482988429808779810457634781384756794987";  BigInteger bA=new BigInteger(a);  int aScale=10;  BigDecimal aNumber=new BigDecimal(bA,aScale);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  public static void invalidateSession(String... keepAttributes){  if (FacesContext.getCurrentInstance() != null) {    ExternalContext context=FacesContext.getCurrentInstance().getExternalContext();    Map<String,Object> sessionMap=new HashMap(context.getSessionMap());    context.invalidateSession();    HttpSession session=(HttpSession)context.getSession(true);    for (    String attribute : keepAttributes) {      session.setAttribute(attribute,sessionMap.get(attribute));    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  NodeList genList;  Node gen;  NodeList gList;  Element genElement;  Attr newAttr;  Attr setAttr1;  doc=(Document)load("staffNS",true);  if (!isExpandEntityReferences()) {    genderList=doc.getElementsByTagName("gender");    gender=genderList.item(2);    genList=gender.getChildNodes();    gen=genList.item(0);  } else {    gen=doc.createEntityReference("ent4");  }  gList=gen.getChildNodes();  genElement=(Element)gList.item(0);  assertNotNull("notnull",genElement);  newAttr=doc.createAttributeNS("www.xyz.com","emp:local1");{    boolean success=false;    try {      setAttr1=genElement.setAttributeNodeNS(newAttr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public static short reverseBytes(short s){  return (short)((s << 8) | ((s >>> 8) & 0xFF));}  }
class C{  public SQLTransientConnectionException(String reason){  super(reason,null,0);}  }
class C{  boolean configureReplicationServer(){  return configureReplicationServer;}  }
class C{  protected void registerChildren(){  registerChild(TXT_INDEX,StaticTextField.class);  registerChild(TXT_ID,StaticTextField.class);  registerChild(TILED_CHOICE,CallBackChoiceTiledView.class);  registerChild(TXT_PROMPT,StaticTextField.class);  registerChild(TXT_VALUE,StaticTextField.class);  registerChild(TXT_INFO,StaticTextField.class);  registerChild(SCRIPT_CONTENT,StaticTextField.class);  registerChild(TEXT_CONTENT,StaticTextField.class);  registerChild(MESSAGE_TYPE,StaticTextField.class);}  }
class C{  public void archiveKeyStore(String logName,String location){  Logger logger=(com.sun.identity.log.Logger)Logger.getLogger(logName);  ArrayList al=SecureFileHandler.getCurrentFileList(logName);  String ts=((String)al.get(al.size() - 2)).substring(((String)al.get(al.size() - 2)).lastIndexOf("."));  if (Debug.messageEnabled()) {    Debug.message("Archive:archiveKeyStore:Keystore timestamp = " + ts);  }  String LogKeyStoreArchiveName=location + PREFIX + "log."+ logName+ ts;  String VerKeyStoreArchiveName=location + PREFIX + "ver."+ logName+ ts;  String logKeyStoreOldName=location + PREFIX + "log."+ logName;  String verKeyStoreOldName=location + PREFIX + "ver."+ logName;  File logKeystore=new File(logKeyStoreOldName);  logKeystore.renameTo(new File(LogKeyStoreArchiveName));  File verKeystore=new File(verKeyStoreOldName);  verKeystore.renameTo(new File(VerKeyStoreArchiveName));  filesPerKeystoreCounter=0;}  }
class C{  public static ArgumentException missingBindPassword(char[] bindDN){  LocalizableMessage msg=ERR_DSCFG_ERROR_NO_PASSWORD.get(bindDN);  return new ArgumentException(msg);}  }
class C{  public boolean read_scope(DsnReadScopeParameters p_par){  try {    DsnComponentPlacement component_placement=read_scope(p_par.scanner);    if (component_placement == null) {      return false;    }    p_par.placement_list.add(component_placement);  } catch (  java.io.IOException e) {    System.out.println("Component.read_scope: IO error scanning file");    return false;  }  return true;}  }
class C{  private void processPropertyDescriptors(){  if (properties == null) {    properties=new TreeMap<>();  }  List<PropertyDescriptor> list;  PropertyDescriptor pd, gpd, spd;  IndexedPropertyDescriptor ipd, igpd, ispd;  Iterator<List<PropertyDescriptor>> it=pdStore.values().iterator();  while (it.hasNext()) {    pd=null;    gpd=null;    spd=null;    ipd=null;    igpd=null;    ispd=null;    list=it.next();    for (int i=0; i < list.size(); i++) {      pd=list.get(i);      if (pd instanceof IndexedPropertyDescriptor) {        ipd=(IndexedPropertyDescriptor)pd;        if (ipd.getIndexedReadMethod() != null) {          if (igpd != null) {            igpd=new IndexedPropertyDescriptor(igpd,ipd);          } else {            igpd=ipd;          }        }      } else {        if (pd.getReadMethod() != null) {          String pdName=pd.getReadMethod().getName();          if (gpd != null) {            String gpdName=gpd.getReadMethod().getName();            if (gpdName.equals(pdName) || !gpdName.startsWith(IS_PREFIX)) {              gpd=new PropertyDescriptor(gpd,pd);            }          } else {            gpd=pd;          }        }      }    }    for (int i=0; i < list.size(); i++) {      pd=list.get(i);      if (pd instanceof IndexedPropertyDescriptor) {        ipd=(IndexedPropertyDescriptor)pd;        if (ipd.getIndexedWriteMethod() != null) {          if (igpd != null) {            if (isAssignable(igpd.getIndexedPropertyType(),ipd.getIndexedPropertyType())) {              if (ispd != null) {                ispd=new IndexedPropertyDescriptor(ispd,ipd);              } else {                ispd=ipd;              }            }          } else {            if (ispd != null) {              ispd=new IndexedPropertyDescriptor(ispd,ipd);            } else {              ispd=ipd;            }          }        }      } else {        if (pd.getWriteMethod() != null) {          if (gpd != null) {            if (isAssignable(gpd.getPropertyType(),pd.getPropertyType())) {              if (spd != null) {                spd=new PropertyDescriptor(spd,pd);              } else {                spd=pd;              }            }          } else {            if (spd != null) {              spd=new PropertyDescriptor(spd,pd);            } else {              spd=pd;            }          }        }      }    }    pd=null;    ipd=null;    if (igpd != null && ispd != null) {      if ((gpd == spd) || (gpd == null)) {        pd=spd;      } else       if (spd == null) {        pd=gpd;      } else       if (spd instanceof IndexedPropertyDescriptor) {        pd=mergePropertyWithIndexedProperty(gpd,(IndexedPropertyDescriptor)spd);      } else       if (gpd instanceof IndexedPropertyDescriptor) {        pd=mergePropertyWithIndexedProperty(spd,(IndexedPropertyDescriptor)gpd);      } else {        pd=mergePropertyDescriptor(gpd,spd);      }      if (igpd == ispd) {        ipd=igpd;      } else {        ipd=mergePropertyDescriptor(igpd,ispd);      }      if (pd == null) {        pd=ipd;      } else {        Class<?> propType=pd.getPropertyType();        Class<?> ipropType=ipd.getIndexedPropertyType();        if (propType.isArray() && propType.getComponentType() == ipropType) {          pd=pd.getClass0().isAssignableFrom(ipd.getClass0()) ? new IndexedPropertyDescriptor(pd,ipd) : new IndexedPropertyDescriptor(ipd,pd);        } else         if (pd.getClass0().isAssignableFrom(ipd.getClass0())) {          pd=pd.getClass0().isAssignableFrom(ipd.getClass0()) ? new PropertyDescriptor(pd,ipd) : new PropertyDescriptor(ipd,pd);        } else {          pd=ipd;        }      }    } else     if (gpd != null && spd != null) {      if (igpd != null) {        gpd=mergePropertyWithIndexedProperty(gpd,igpd);      }      if (ispd != null) {        spd=mergePropertyWithIndexedProperty(spd,ispd);      }      if (gpd == spd) {        pd=gpd;      } else       if (spd instanceof IndexedPropertyDescriptor) {        pd=mergePropertyWithIndexedProperty(gpd,(IndexedPropertyDescriptor)spd);      } else       if (gpd instanceof IndexedPropertyDescriptor) {        pd=mergePropertyWithIndexedProperty(spd,(IndexedPropertyDescriptor)gpd);      } else {        pd=mergePropertyDescriptor(gpd,spd);      }    } else     if (ispd != null) {      pd=ispd;      if (spd != null) {        pd=mergePropertyDescriptor(ispd,spd);      }      if (gpd != null) {        pd=mergePropertyDescriptor(ispd,gpd);      }    } else     if (igpd != null) {      pd=igpd;      if (gpd != null) {        pd=mergePropertyDescriptor(igpd,gpd);      }      if (spd != null) {        pd=mergePropertyDescriptor(igpd,spd);      }    } else     if (spd != null) {      pd=spd;    } else     if (gpd != null) {      pd=gpd;    }    if (pd instanceof IndexedPropertyDescriptor) {      ipd=(IndexedPropertyDescriptor)pd;      if (ipd.getIndexedReadMethod() == null && ipd.getIndexedWriteMethod() == null) {        pd=new PropertyDescriptor(ipd);      }    }    if ((pd == null) && (list.size() > 0)) {      pd=list.get(0);    }    if (pd != null) {      properties.put(pd.getName(),pd);    }  }}  }
class C{  boolean holdsSchedulerLock(){  return schedulerLock.isHeldByCurrentThread();}  }
class C{  private void updateCRL(Connection ldc,String dn,byte[] crls){  try {    ModifyRequest modifyRequest=LDAPRequests.newModifyRequest(dn).addModification(ModificationType.REPLACE,mCrlAttrName,crls);    ldc.modify(modifyRequest);  } catch (  LdapException e) {    debug.error("Error updating CRL Cache : ",e);  }}  }
class C{  public void enableCookieTimeToLive(boolean flag){  cookieTimeToLiveEnabledFlag=flag;  if (DEBUG.messageEnabled()) {    DEBUG.message("LoginState.enableCookieTimeToLive(): enable=" + cookieTimeToLiveEnabledFlag);  }}  }
class C{  @Override public void dismiss(){  super.dismiss();}  }
class C{  public Document toDocument(boolean refresh) throws SOAPBindingException {  if (!refresh && doc != null) {    return doc;  }  try {    doc=XMLUtils.newDocument();  } catch (  Exception ex) {    Utils.debug.error("Message:toDocument",ex);    throw new SOAPBindingException(ex.getMessage());  }  String wsseNS=WSSEConstants.NS_WSSE_WSF11;  String wsuNS=WSSEConstants.NS_WSU_WSF11;  if (SOAPBindingConstants.WSF_10_VERSION.equals(wsfVersion)) {    wsseNS=WSSEConstants.NS_WSSE;    wsuNS=WSSEConstants.NS_WSU;  }  Element envelopeE=doc.createElementNS(SOAPBindingConstants.NS_SOAP,SOAPBindingConstants.PTAG_ENVELOPE);  envelopeE.setAttributeNS(SOAPBindingConstants.NS_XML,SOAPBindingConstants.XMLNS_SOAP,SOAPBindingConstants.NS_SOAP);  envelopeE.setAttributeNS(SOAPBindingConstants.NS_XML,SOAPBindingConstants.XMLNS_SOAP_BINDING,SOAPBindingConstants.NS_SOAP_BINDING);  envelopeE.setAttributeNS(SOAPBindingConstants.NS_XML,SOAPBindingConstants.XMLNS_SOAP_BINDING_11,SOAPBindingConstants.NS_SOAP_BINDING_11);  envelopeE.setAttributeNS(SOAPBindingConstants.NS_XML,WSSEConstants.TAG_XML_WSU,wsuNS);  doc.appendChild(envelopeE);  Element headerE=doc.createElementNS(SOAPBindingConstants.NS_SOAP,SOAPBindingConstants.PTAG_HEADER);  envelopeE.appendChild(headerE);  if (correlationHeader != null) {    correlationHeader.addToParent(headerE);  }  if (consentHeader != null) {    consentHeader.addToParent(headerE);  }  if (usageDirectiveHeaders != null && !usageDirectiveHeaders.isEmpty()) {    Iterator iter=usageDirectiveHeaders.iterator();    while (iter.hasNext()) {      ((UsageDirectiveHeader)iter.next()).addToParent(headerE);    }  }  if (providerHeader != null) {    providerHeader.addToParent(headerE);  }  if (processingContextHeader != null) {    processingContextHeader.addToParent(headerE);  }  if (serviceInstanceUpdateHeader != null) {    serviceInstanceUpdateHeader.addToParent(headerE);  }  if (soapHeaders != null && !soapHeaders.isEmpty()) {    if (Utils.debug.messageEnabled()) {      Utils.debug.message("Message.toDocument: adding headers ");    }    Iterator iter=soapHeaders.iterator();    while (iter.hasNext()) {      Element soapHeaderE=(Element)iter.next();      headerE.appendChild(doc.importNode(soapHeaderE,true));    }  }  boolean hasSecurityHeaders=(securityHeaders != null && !securityHeaders.isEmpty());  if (securityProfileType != ANONYMOUS || hasSecurityHeaders) {    if (Utils.debug.messageEnabled()) {      Utils.debug.message("Message.toDocument: adding security headers ");    }    Element securityE=doc.createElementNS(wsseNS,WSSEConstants.TAG_WSSE + ":" + WSSEConstants.TAG_SECURITYT);    securityE.setAttributeNS(SOAPBindingConstants.NS_XML,WSSEConstants.TAG_XML_WSSE,wsseNS);    headerE.appendChild(securityE);    if (assertion != null) {      Document assertionDoc=XMLUtils.toDOMDocument(assertion.toString(true,true),Utils.debug);      if (assertionDoc == null) {        String msg=Utils.bundle.getString("cannotProcessSAMLAssertion");        Utils.debug.error("Message.Message: " + msg);        throw new SOAPBindingException(msg);      }      Element assertionE=assertionDoc.getDocumentElement();      securityE.appendChild(doc.importNode(assertionE,true));    } else     if (binarySecurityToken != null) {      Document bstDoc=XMLUtils.toDOMDocument(binarySecurityToken.toString(),Utils.debug);      if (bstDoc == null) {        String msg=Utils.bundle.getString("cannotProcessBinarySecurityToken");        Utils.debug.error("Message.Message: " + msg);        throw new SOAPBindingException(msg);      }      Element binarySecurityTokenE=bstDoc.getDocumentElement();      securityE.appendChild(doc.importNode(binarySecurityTokenE,true));    }    if (hasSecurityHeaders) {      Iterator iter=securityHeaders.iterator();      while (iter.hasNext()) {        securityE.appendChild(doc.importNode((Node)iter.next(),true));      }    }  }  Element bodyE=null;  if (soapFault != null) {    if (Utils.debug.messageEnabled()) {      Utils.debug.message("Message.toDocument: adding soapFault ");    }    bodyE=doc.createElementNS(SOAPBindingConstants.NS_SOAP,SOAPBindingConstants.PTAG_BODY);    envelopeE.appendChild(bodyE);    soapFault.addToParent(bodyE);  }  if (soapBodies != null && !soapBodies.isEmpty()) {    if (Utils.debug.messageEnabled()) {      Utils.debug.message("Message.toDocument: adding bodies ");    }    if (bodyE == null) {      bodyE=doc.createElementNS(SOAPBindingConstants.NS_SOAP,SOAPBindingConstants.PTAG_BODY);      bodyE.setAttributeNS(SOAPBindingConstants.NS_XML,SOAPBindingConstants.XMLNS_SOAP,SOAPBindingConstants.NS_SOAP);      envelopeE.appendChild(bodyE);    }    Iterator iter=soapBodies.iterator();    while (iter.hasNext()) {      Element soapBodyE=(Element)iter.next();      bodyE.appendChild(doc.importNode(soapBodyE,true));    }    if (bodyId == null) {      bodyId=SAMLUtils.generateID();    }    if (SOAPBindingConstants.WSF_10_VERSION.equals(wsfVersion)) {      bodyE.setAttributeNS(null,SOAPBindingConstants.ATTR_id,bodyId);    } else {      bodyE.setAttributeNS(wsuNS,WSSEConstants.WSU_ID,bodyId);    }  }  return doc;}  }
class C{  protected void updateUndoPositions(Vector positions){  for (int counter=positions.size() - 1; counter >= 0; counter--) {    UndoPosRef ref=(UndoPosRef)positions.elementAt(counter);    if (ref.rec.unused) {      positions.removeElementAt(counter);    } else     ref.resetLocation();  }}  }
class C{  public void createAgentGroup(String realmName,String name,String type,String serverURL,String agentURL) throws AMConsoleException {  String[] params={realmName,name,type};  try {    logEvent("ATTEMPT_CREATE_AGENT_GROUP",params);    AgentConfiguration.createAgentGroup(getUserSSOToken(),realmName,name,type,AgentConfiguration.getDefaultValues(type,true),serverURL,agentURL);    logEvent("SUCCEED_CREATE_AGENT_GROUP",params);  } catch (  MalformedURLException e) {    String[] paramsEx={realmName,name,type,getErrorString(e)};    logEvent("EXCEPTION_CREATE_AGENT_GROUP",paramsEx);    debug.warning("AgentsModelImpl.createAgentGroup",e);    throw new AMConsoleException(getErrorString(e));  }catch (  ConfigurationException e) {    String[] paramsEx={realmName,name,type,getErrorString(e)};    logEvent("EXCEPTION_CREATE_AGENT_GROUP",paramsEx);    debug.warning("AgentsModelImpl.createAgentGroup",e);    throw new AMConsoleException(getErrorString(e));  }catch (  SSOException e) {    String[] paramsEx={realmName,name,type,getErrorString(e)};    logEvent("EXCEPTION_CREATE_AGENT_GROUP",paramsEx);    debug.warning("AgentsModelImpl.createAgentGroup",e);    throw new AMConsoleException(getErrorString(e));  }catch (  IdRepoException e) {    String[] paramsEx={realmName,name,type,getErrorString(e)};    logEvent("EXCEPTION_CREATE_AGENT_GROUP",paramsEx);    debug.warning("AgentsModelImpl.createAgentGroup",e);    throw new AMConsoleException(getErrorString(e));  }catch (  SMSException e) {    String[] paramsEx={realmName,name,type,getErrorString(e)};    logEvent("EXCEPTION_CREATE_AGENT_GROUP",paramsEx);    debug.warning("AgentsModelImpl.createAgentGroup",e);    throw new AMConsoleException(getErrorString(e));  }}  }
class C{  public CircleOfTrustDescriptor(String circleOfTrustName,String realm,String circleOfTrustStatus) throws COTException {  setCircleOfTrustName(circleOfTrustName);  this.realm=realm;  setCircleOfTrustStatus(circleOfTrustStatus);}  }
class C{  public SSLConnectionException(LocalizableMessage message){  super(message);}  }
class C{  public boolean containsAttribute(Object name,Object value){  return value.equals(getAttribute(name));}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  public static void extract(String archivePath,String packege,String className,boolean inner,String to) throws IOException {  ZipFile archive=new ZipFile(archivePath);  List entries=findRelevant(archive,packege,className,inner);  InputStream in=null;  OutputStream out=null;  byte[] buffer=new byte[2048];  ZipEntry entry;  String outFile;  int lastSep, amountRead;  for (int i=0; i < entries.size(); i++) {    entry=(ZipEntry)entries.get(i);    outFile=entry.getName();    if ((lastSep=outFile.lastIndexOf('/')) != -1)     outFile=outFile.substring(lastSep);    try {      in=archive.getInputStream(entry);      if (in == null)       throw new IOException("Zip file entry <" + entry.getName() + "> not found");      out=new FileOutputStream(to + File.separator + outFile);      while ((amountRead=in.read(buffer)) != -1)       out.write(buffer,0,amountRead);    }  finally {      if (in != null)       in.close();      if (out != null)       out.close();    }  }}  }
class C{  public void testReceive_NonBlockNoServerBufZero() throws Exception {  this.channel1.configureBlocking(false);  receiveNonBlockNoServer(CAPACITY_ZERO);}  }
class C{  public ServiceUnavailableException(String explanation){  super(explanation);}  }
class C{  public ErodingFactor(final float factor){  this.factor=factor;  nextShrink=System.currentTimeMillis() + (long)(900000 * factor);  idleHighWaterMark=1;}  }
class C{  static boolean isAppXml(String mime){  return mime != null && (mime.equals("application/xml") || mime.equals("application/xml-dtd") || mime.equals("application/xml-external-parsed-entity")|| mime.startsWith("application/") && mime.endsWith("+xml"));}  }
class C{  public long roundTripTime() throws InterruptedException {  latch.await();  return received - sent;}  }
class C{  public AssertionIDRef createAssertionIDRef(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ASSERTION_ID_REF,xml);  if (obj == null) {    return new AssertionIDRefImpl(xml);  } else {    return (AssertionIDRef)obj;  }}  }
class C{  private static Map<String,ClassNode> loadNodes(File file){  Map<String,ClassNode> nodes=null;  try {    nodes=JarUtils.loadClasses(file);  } catch (  IOException e) {    e.printStackTrace();  }  if (nodes == null) {    Logger.errLow("Failed reading classes from: " + file.getAbsolutePath());    return null;  }  return nodes;}  }
class C{  protected void installListeners(){  pcl=createPropertyChangeListener();  desktop.addPropertyChangeListener(pcl);}  }
class C{  protected void parseSessionSslId(Request request){  if (request.getRequestedSessionId() == null && SSL_ONLY.equals(request.getServletContext().getEffectiveSessionTrackingModes()) && request.connector.secure) {    request.setRequestedSessionId(request.getAttribute(SSLSupport.SESSION_ID_KEY).toString());    request.setRequestedSessionSSL(true);  }}  }
class C{  private Entry createTestEntry(AttributeType type,String[] values){  DN entryDN=DN.valueOf("dc=example, dc=com");  ObjectClass top=CoreSchema.getTopObjectClass();  ObjectClass extensible=CoreSchema.getExtensibleObjectObjectClass();  HashMap<ObjectClass,String> objectClasses=new HashMap<>();  objectClasses.put(top,top.getNameOrOID());  objectClasses.put(extensible,extensible.getNameOrOID());  Entry testEntry=new Entry(entryDN,objectClasses,null,null);  Attribute attr=Attributes.create(type.getNameOrOID(),values);  testEntry.putAttribute(type,newArrayList(attr));  return testEntry;}  }
class C{  public boolean isFocusPainted(){  return paintFocus;}  }
class C{  public HRuleView(Element elem){  super(elem);  setPropertiesFromAttributes();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList childList;  String nullNS=null;  doc=(Document)load("staffNS",false);  childList=doc.getElementsByTagNameNS(nullNS,"0");  assertSize("documentgetelementsbytagnameNS04",0,childList);}  }
class C{  private IdentityServer(PropertyAccessor properties,IdentityServer identityServer){  configProperties=properties;  String bootFileName=getProperty(ServerConstants.PROPERTY_BOOT_FILE_LOCATION,ServerConstants.DEFAULT_BOOT_FILE_LOCATION);  bootFileProperties=loadProps(bootFileName,identityServer);}  }
class C{  public void testSecretKeyFactory06() throws NoSuchProviderException, NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  for (int i=0; i < validValues.length; i++) {    SecretKeyFactory secKF=SecretKeyFactory.getInstance(validValues[i],defaultProviderName);    assertEquals("Incorrect algorithm",secKF.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",secKF.getProvider().getName(),defaultProviderName);  }}  }
class C{  public void removeResourceEnvRef(String name){  try {    envCtx.unbind(name);  } catch (  NamingException e) {    log.error(sm.getString("naming.unbindFailed",e));  }}  }
class C{  public void resolvePrefixTables() throws TransformerException {  setPrefixTable(null);  if (null != this.m_declaredPrefixes) {    StylesheetRoot stylesheet=this.getStylesheetRoot();    int n=m_declaredPrefixes.size();    for (int i=0; i < n; i++) {      XMLNSDecl decl=(XMLNSDecl)m_declaredPrefixes.get(i);      String prefix=decl.getPrefix();      String uri=decl.getURI();      if (null == uri)       uri="";      boolean shouldExclude=excludeResultNSDecl(prefix,uri);      if (null == m_prefixTable)       setPrefixTable(new ArrayList());      NamespaceAlias nsAlias=stylesheet.getNamespaceAliasComposed(uri);      if (null != nsAlias) {        decl=new XMLNSDecl(nsAlias.getStylesheetPrefix(),nsAlias.getResultNamespace(),shouldExclude);      } else       decl=new XMLNSDecl(prefix,uri,shouldExclude);      m_prefixTable.add(decl);    }  }  ElemTemplateElement parent=this.getParentNodeElem();  if (null != parent) {    List prefixes=parent.m_prefixTable;    if (null == m_prefixTable && !needToCheckExclude()) {      setPrefixTable(parent.m_prefixTable);    } else {      int n=prefixes.size();      for (int i=0; i < n; i++) {        XMLNSDecl decl=(XMLNSDecl)prefixes.get(i);        boolean shouldExclude=excludeResultNSDecl(decl.getPrefix(),decl.getURI());        if (shouldExclude != decl.getIsExcluded()) {          decl=new XMLNSDecl(decl.getPrefix(),decl.getURI(),shouldExclude);        }        addOrReplaceDecls(decl);      }    }  } else   if (null == m_prefixTable) {    setPrefixTable(new ArrayList());  }}  }
class C{  public void destroyToken(SSOToken token) throws SSOException {  try {    SSOTokenImpl tokenImpl=(SSOTokenImpl)token;    if (tokenImpl.isLdapConnection() == true) {      tokenImpl.setStatus(false);      return;    }    SSOTokenID tokenid=token.getTokenID();    String id=tokenid.toString();    SessionID sessid=new SessionID(id);    Session session=sessionCache.getSession(sessid);    session.destroySession(session);  } catch (  Exception e) {    if (debug.messageEnabled()) {      debug.message("DestroyToken: ",e);    }    throw new SSOException(e);  }}  }
class C{  public AccountService retrieveAccount(String id,Handler<AsyncResult<Account>> resultHandler){  delegate.retrieveAccount(id,resultHandler);  return this;}  }
class C{  @SuppressWarnings("unchecked") private V report(int s) throws ExecutionException {  Object x=outcome;  if (s == NORMAL)   return (V)x;  if (s >= CANCELLED)   throw new CancellationException();  throw new ExecutionException((Throwable)x);}  }
class C{  @Override public String toString(){  return name;}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  toString(buffer);  return buffer.toString();}  }
class C{  protected IOException copyRange(InputStream istream,ServletOutputStream ostream,long start,long end){  if (debug > 10)   log("Serving bytes:" + start + "-"+ end);  long skipped=0;  try {    skipped=istream.skip(start);  } catch (  IOException e) {    return e;  }  if (skipped < start) {    return new IOException(sm.getString("defaultservlet.skipfail",Long.valueOf(skipped),Long.valueOf(start)));  }  IOException exception=null;  long bytesToRead=end - start + 1;  byte buffer[]=new byte[input];  int len=buffer.length;  while ((bytesToRead > 0) && (len >= buffer.length)) {    try {      len=istream.read(buffer);      if (bytesToRead >= len) {        ostream.write(buffer,0,len);        bytesToRead-=len;      } else {        ostream.write(buffer,0,(int)bytesToRead);        bytesToRead=0;      }    } catch (    IOException e) {      exception=e;      len=-1;    }    if (len < buffer.length)     break;  }  return exception;}  }
class C{  public Link(String text,PdfAction action){  this(text,new PdfLinkAnnotation(new Rectangle(0,0,0,0)).setAction(action));}  }
class C{  public void insert_reference(org.omg.CORBA.Object value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_reference",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    $self.insert_reference(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public boolean isRowSelected(int row){  return getSelectionModel().isRowSelected(row);}  }
class C{  public final void testGetP(){  DSAParameterSpec dps=new DSAParameterSpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"));  assertEquals(1,dps.getP().intValue());}  }
class C{  public SocketTimeoutException(){}  }
class C{  public ReplicationServer(final ReplicationServerCfg cfg,final DSRSShutdownSync dsrsShutdownSync,final ECLEnabledDomainPredicate predicate) throws ConfigException {  this.config=cfg;  this.dsrsShutdownSync=dsrsShutdownSync;  this.domainPredicate=predicate;  enableExternalChangeLog();  cryptoSuite=DirectoryServer.getInstance().getServerContext().getCryptoManager().newCryptoSuite(cfg.getCipherTransformation(),cfg.getCipherKeyLength(),cfg.isConfidentialityEnabled());  this.changelogDB=new FileChangelogDB(this,config.getReplicationDBDirectory(),cryptoSuite);  replSessionSecurity=new ReplSessionSecurity();  initialize();  cfg.addChangeListener(this);  localPorts.add(getReplicationPort());  allInstances.add(this);}  }
class C{  public boolean isAssured(){  return assuredFlag;}  }
class C{  private Session resolveSession(SessionID sessionID) throws SessionException {  if (statelessSessionManager.containsJwt(sessionID)) {    return statelessSessionManager.generate(sessionID);  }  return sessionCache.getSession(sessionID);}  }
class C{  public TagField createArtworkField(byte[] data){  return new Mp4TagCoverField(data);}  }
class C{  public boolean equals(Object other){  if (other instanceof CSeqHeader) {    final CSeqHeader o=(CSeqHeader)other;    return this.getSeqNumber() == o.getSeqNumber() && this.getMethod().equals(o.getMethod());  }  return false;}  }
class C{  public PdfDocument(PdfReader reader,PdfWriter writer){  this(reader,writer,new StampingProperties());}  }
class C{  public static boolean isAlpha(final char c){  return com.forgerock.opendj.util.StaticUtils.isAlpha(c);}  }
class C{  private void registerDelayedListener(DN baseDN,ConfigAddListener delayedListener) throws ConfigException {  DN currentDN=baseDN.parent();  DN previousDN=currentDN;  while (currentDN != null) {    if (!configRepository.hasEntry(currentDN)) {      delayedListener=new DelayedConfigAddListener(currentDN,delayedListener,configRepository);      previousDN=currentDN;      currentDN=currentDN.parent();    } else {      configRepository.registerAddListener(previousDN,delayedListener);      return;    }  }  throw new ConfigException(ERR_ADMIN_UNABLE_TO_REGISTER_LISTENER.get(baseDN));}  }
class C{  @Override public void destroy(Session requester,Session session) throws SessionException {  if (debug.messageEnabled()) {    debug.message(MessageFormat.format("Local destroy for {0}",session.getID().toString()));  }  if (session == null) {    return;  }  InternalSession internalSessionToDestroy=sessionAccessManager.getInternalSession(session.getSessionID());  if (internalSessionToDestroy == null) {    internalSessionToDestroy=sessionAccessManager.getInternalSessionByHandle(session.getSessionID().toString());  }  if (internalSessionToDestroy != null) {    sessionChangeAuthorizer.checkPermissionToDestroySession(requester,internalSessionToDestroy.getSessionID());    destroyInternalSession(internalSessionToDestroy.getSessionID());  }}  }
class C{  private void deleteAttrsEntry(DN dn,String... attrTypeStrings) throws Exception {  ModifyRequest modifyRequest=Requests.newModifyRequest(dn);  for (  String attrTypeString : attrTypeStrings) {    modifyRequest.addModification(DELETE,attrTypeString);  }  getRootConnection().processModify(modifyRequest);}  }
class C{  public void testBitLengthPositive3(){  byte aBytes[]={1,0,0,0,0,0,0,0,0,0,0};  int aSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertEquals(81,aNumber.bitLength());}  }
class C{  private void restoreScreen(BackupProtos.Key key,byte[] buffer,int dataSize) throws IOException {  if (VERBOSE)   Log.v(TAG,"unpacking screen " + key.id);  if (DEBUG)   Log.d(TAG,"read (" + buffer.length + "): "+ Base64.encodeToString(buffer,0,dataSize,Base64.NO_WRAP));  ContentResolver cr=mContext.getContentResolver();  ContentValues values=unpackScreen(buffer,dataSize);  cr.insert(LauncherSettings.WorkspaceScreens.CONTENT_URI,values);}  }
class C{  protected final void registerPropertyDefinition(PropertyDefinition<?> d){  String propName=d.getName();  propertyDefinitions.put(propName,d);  allPropertyDefinitions.put(propName,d);  if (d instanceof AggregationPropertyDefinition<?,?>) {    AggregationPropertyDefinition<?,?> apd=(AggregationPropertyDefinition<?,?>)d;    aggregationPropertyDefinitions.put(propName,apd);    allAggregationPropertyDefinitions.put(apd.getManagedObjectDefinition().getName() + ":" + propName,apd);  }}  }
class C{  public Socket createSocket(InetAddress address,int port,InetAddress myAddress,int myPort) throws IOException {  if (myAddress != null) {    Socket sock=new Socket();    sock.bind(new InetSocketAddress(myAddress,0));    try {      sock.connect(new InetSocketAddress(address,port),8000);    } catch (    SocketTimeoutException e) {      throw new ConnectException("Socket timeout error (8sec)" + address + ":"+ port);    }    return sock;  } else {    Socket sock=new Socket();    if (myPort != 0) {      sock.bind(new InetSocketAddress(port));    }    try {      sock.connect(new InetSocketAddress(address,port),8000);    } catch (    SocketTimeoutException e) {      throw new ConnectException("Socket timeout error (8sec)" + address + ":"+ port);    }    return sock;  }}  }
class C{  private void addRepoListName(String name,String id,String list) throws JobPersistenceException, ResourceException {synchronized (lock) {    logger.trace("Adding name: {} to {}",name,id);    JsonValue map=getOrCreateRepo(id);    String rev=map.get("_rev").asString();    List<String> names=map.get(list).asList(String.class);    if (names == null) {      names=new ArrayList<>();      map.put(list,names);    }    if (!names.contains(name)) {      names.add(name);    }    getRepositoryService().update(Requests.newUpdateRequest(id,map).setRevision(rev));  }}  }
class C{  public int compare(int[] o1,int[] o2){  int m1=o1[0];  int m2=o2[0];  return Integer.compare(m1,m2);}  }
class C{  @Override public void onBuildHeaders(List<Header> target){  Intent intent=getIntent();  Object[] objectArray=(Object[])intent.getSerializableExtra(ConfigPrefs.VIDEO_CONFIGS);  if (objectArray != null) {    sVideoConfigs=Arrays.copyOf(objectArray,objectArray.length,WZMediaConfig[].class);  }  Object[] objectArray2=(Object[])intent.getSerializableExtra(ConfigPrefs.H264_PROFILE_LEVELS);  if (objectArray2 != null) {    sProfileLevels=Arrays.copyOf(objectArray2,objectArray2.length,WZProfileLevel[].class);  }  sFixedFrameSize=intent.getBooleanExtra(ConfigPrefs.FIXED_FRAME_SIZE,false);  sFixedFrameRate=intent.getBooleanExtra(ConfigPrefs.FIXED_FRAME_RATE,false);  int header_resource=getIntent().getIntExtra(ConfigPrefs.PREFS_TYPE,-1);  if (header_resource != -1) {switch (header_resource) {case ConfigPrefs.ALL_PREFS:      loadHeadersFromResource(R.xml.capture_pref_headers,target);    break;case ConfigPrefs.CONNECTION_ONLY_PREFS:  loadHeadersFromResource(R.xml.connection_only_pref_headers,target);break;case ConfigPrefs.VIDEO_AND_CONNECTION:loadHeadersFromResource(R.xml.video_and_connection,target);break;}}}  }
class C{  public void onStart(final FileAlterationObserver observer){}  }
class C{  public void list(){  list(System.out,0);}  }
class C{  @Override public int hashCode(){  return ((int)(seconds ^ (seconds >>> 32))) + 51 * nanos;}  }
class C{  public void entityReference(String name) throws org.xml.sax.SAXException {  append(m_doc.createEntityReference(name));}  }
class C{  private Branch(TemplateFile templateFile,DN branchDN,String[] subordinateTemplateNames,int[] numEntriesPerTemplate,TemplateLine[] extraLines){  this.branchDN=branchDN;  this.subordinateTemplateNames=subordinateTemplateNames;  this.numEntriesPerTemplate=numEntriesPerTemplate;  this.extraLines=extraLines;  subordinateTemplates=null;  Entry entry=createEntry(branchDN);  ArrayList<LocalizableMessage> warnings=new ArrayList<>();  ArrayList<TemplateLine> lineList=new ArrayList<>();  for (  String ocName : entry.getObjectClasses().values()) {    try {      String[] valueStrings=new String[]{ocName};      Tag[] tags=new Tag[1];      tags[0]=new StaticTextTag();      tags[0].initializeForBranch(templateFile,this,valueStrings,0,warnings);      lineList.add(new TemplateLine(CoreSchema.getObjectClassAttributeType(),0,tags));    } catch (    Exception e) {      e.printStackTrace();    }  }  addLines(lineList,entry.getAllAttributes(),templateFile,warnings);  rdnLines=new TemplateLine[lineList.size()];  lineList.toArray(rdnLines);}  }
class C{  @Override @SuppressWarnings("dep-ann") public String encodeRedirectUrl(String url){  return this._getHttpServletResponse().encodeRedirectUrl(url);}  }
class C{  @Override public void access(){  this.thisAccessedTime=System.currentTimeMillis();  if (ACTIVITY_CHECK) {    accessCount.incrementAndGet();  }}  }
class C{  private JsonValue doSourceSync(Context context,String resourceId,JsonValue value) throws SynchronizationException {  return doSourceSync(context,resourceId,value,false,null);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XMLString s1=getArg0AsString(xctxt);  return (XString)s1.fixWhiteSpace(true,true,false);}  }
class C{  Object processURL(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  if (getSupportsAVT()) {    try {      AVT avt=new AVT(handler,uri,name,rawName,value,owner);      return avt;    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }  } else {    return value;  }}  }
class C{  public static String toUpperCase(String str){  return str.toUpperCase(Locale.ENGLISH);}  }
class C{  public int scanLiteral(int quote,XMLString content) throws IOException {  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  } else   if (fCurrentEntity.position == fCurrentEntity.count - 1) {    fCurrentEntity.ch[0]=fCurrentEntity.ch[fCurrentEntity.count - 1];    load(1,false);    fCurrentEntity.position=0;  }  int offset=fCurrentEntity.position;  int c=fCurrentEntity.ch[offset];  int newlines=0;  boolean external=fCurrentEntity.isExternal();  if (c == '\n' || (c == '\r' && external)) {    do {      c=fCurrentEntity.ch[fCurrentEntity.position++];      if (c == '\r' && external) {        newlines++;        if (fCurrentEntity.position == fCurrentEntity.count) {          offset=0;          fCurrentEntity.position=newlines;          if (load(newlines,false)) {            break;          }        }        if (fCurrentEntity.ch[fCurrentEntity.position] == '\n') {          fCurrentEntity.position++;          offset++;        } else {          newlines++;        }      } else       if (c == '\n') {        newlines++;        if (fCurrentEntity.position == fCurrentEntity.count) {          offset=0;          fCurrentEntity.position=newlines;          if (load(newlines,false)) {            break;          }        }      } else {        fCurrentEntity.position--;        break;      }    } while (fCurrentEntity.position < fCurrentEntity.count - 1);    for (int i=offset; i < fCurrentEntity.position; i++) {      fCurrentEntity.ch[i]='\n';    }    int length=fCurrentEntity.position - offset;    if (fCurrentEntity.position == fCurrentEntity.count - 1) {      content.setValues(fCurrentEntity.ch,offset,length);      return -1;    }  }  while (fCurrentEntity.position < fCurrentEntity.count) {    c=fCurrentEntity.ch[fCurrentEntity.position++];    if (c == quote || c == '%' || !XMLChar.isContent(c)) {      fCurrentEntity.position--;      break;    }  }  int length=fCurrentEntity.position - offset;  content.setValues(fCurrentEntity.ch,offset,length);  if (fCurrentEntity.position != fCurrentEntity.count) {    c=fCurrentEntity.ch[fCurrentEntity.position];  } else {    c=-1;  }  return c;}  }
class C{  public static long dynamicQueryCount(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery,com.liferay.portal.kernel.dao.orm.Projection projection){  return getService().dynamicQueryCount(dynamicQuery,projection);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.DOBElement createDOBElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.DOBElementImpl();}  }
class C{  public ListIterator<E> listIterator(){  return new ListItr(0);}  }
class C{  public void testIsUnmappable(){  assertFalse(CoderResult.UNDERFLOW.isUnmappable());  assertFalse(CoderResult.OVERFLOW.isUnmappable());  assertFalse(CoderResult.malformedForLength(1).isUnmappable());  assertTrue(CoderResult.unmappableForLength(1).isUnmappable());}  }
class C{  public static <A>ImmutableList<A> from(final A[] array){  ImmutableList<A> xs=empty();  if (array != null) {    for (int i=array.length - 1; i >= 0; i--) {      xs=new ImmutableList<>(array[i],xs);    }  }  return xs;}  }
class C{  protected void notifySubscribers(Response data){  subject.onNext(data);}  }
class C{  public void init(boolean encrypting,CipherParameters params){  this.encrypting=encrypting;  if (params instanceof RC2Parameters) {    RC2Parameters param=(RC2Parameters)params;    workingKey=generateWorkingKey(param.getKey(),param.getEffectiveKeyBits());  } else   if (params instanceof KeyParameter) {    byte[] key=((KeyParameter)params).getKey();    workingKey=generateWorkingKey(key,key.length * 8);  } else {    throw new IllegalArgumentException("invalid parameter passed to RC2 init - " + params.getClass().getName());  }}  }
class C{  boolean isSubjectResultCached(SSOToken token) throws SSOException {  return (resultCache.get(token.getTokenID().toString()) != null);}  }
class C{  private void createLayout(){  GridBagConstraints gbc=new GridBagConstraints();  gbc.fill=GridBagConstraints.BOTH;  gbc.weightx=1.0;  gbc.weighty=1.0;  tree=new CustomTree();  tree.getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);  tree.setBackground(ColorAndFontConstants.background);  tree.setCellRenderer(new TreeCellRenderer());  tree.setShowsRootHandles(true);  tree.setScrollsOnExpand(false);  add(tree,gbc);}  }
class C{  public boolean isPaused(){  return state == Trigger.STATE_PAUSED;}  }
class C{  public void registerObserver(IndexChangeObserver observer){  observers.add(observer);}  }
class C{  public BatchUpdateException(Throwable cause){  this((cause == null ? null : cause.toString()),null,0,(int[])null,cause);}  }
class C{  public String toString(){  return encryptedString;}  }
class C{  public static void addParam(final String name,final String value,final StringBuilder uri){  if (uri.length() > 0)   uri.append('&');  uri.append(encode(name)).append('=');  if (value != null)   uri.append(encode(value));}  }
class C{  void createMap(Thread t,T firstValue){  t.inheritableThreadLocals=new ThreadLocalMap(this,firstValue);}  }
class C{  public boolean offer(E e){  if (e == null)   throw new NullPointerException();  modCount++;  int i=size;  if (i >= queue.length)   grow(i + 1);  size=i + 1;  if (i == 0)   queue[0]=e; else   siftUp(i,e);  return true;}  }
class C{  public void findBrokenClass() throws TestFailed, InvocationTargetException {  findDexClass(CLASS_NAME);}  }
class C{  public WindowEvent(Window source,int id){  this(source,id,null,0,0);}  }
class C{  protected AbstractSelectionKey(){}  }
class C{  public Object remove(String name){  return nameValuePairs.remove(name);}  }
class C{  public void addFocusListener(FocusListener l){}  }
class C{  @Override public Foo fetchByUUID_G(String uuid,long groupId,boolean retrieveFromCache){  Object[] finderArgs=new Object[]{uuid,groupId};  Object result=null;  if (retrieveFromCache) {    result=finderCache.getResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs,this);  }  if (result instanceof Foo) {    Foo foo=(Foo)result;    if (!Objects.equals(uuid,foo.getUuid()) || (groupId != foo.getGroupId())) {      result=null;    }  }  if (result == null) {    StringBundler query=new StringBundler(4);    query.append(_SQL_SELECT_FOO_WHERE);    boolean bindUuid=false;    if (uuid == null) {      query.append(_FINDER_COLUMN_UUID_G_UUID_1);    } else     if (uuid.equals(StringPool.BLANK)) {      query.append(_FINDER_COLUMN_UUID_G_UUID_3);    } else {      bindUuid=true;      query.append(_FINDER_COLUMN_UUID_G_UUID_2);    }    query.append(_FINDER_COLUMN_UUID_G_GROUPID_2);    String sql=query.toString();    Session session=null;    try {      session=openSession();      Query q=session.createQuery(sql);      QueryPos qPos=QueryPos.getInstance(q);      if (bindUuid) {        qPos.add(uuid);      }      qPos.add(groupId);      List<Foo> list=q.list();      if (list.isEmpty()) {        finderCache.putResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs,list);      } else {        Foo foo=list.get(0);        result=foo;        cacheResult(foo);        if ((foo.getUuid() == null) || !foo.getUuid().equals(uuid) || (foo.getGroupId() != groupId)) {          finderCache.putResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs,foo);        }      }    } catch (    Exception e) {      finderCache.removeResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs);      throw processException(e);    } finally {      closeSession(session);    }  }  if (result instanceof List<?>) {    return null;  } else {    return (Foo)result;  }}  }
class C{  @AfterClass @Override public void classCleanUp() throws Exception {  callParanoiaCheck=false;  super.classCleanUp();  TestCaseUtils.clearBackend("userRoot");  paranoiaCheck();}  }
class C{  public boolean isSneaking(){  return isSneaking;}  }
class C{  public void append(NSString s){  append(s.getContent());}  }
class C{  private void updateDomObj(WXComponent component){  if (component == null) {    return;  }  WXDomObject domObject=mRegistry.get(component.getRef());  if (domObject == null) {    return;  }  domObject.old();  component.updateDom(domObject.clone());  if (component instanceof WXVContainer) {    WXVContainer container=(WXVContainer)component;    int count=container.childCount();    for (int i=0; i < count; ++i) {      updateDomObj(container.getChild(i));    }  }}  }
class C{  boolean matches(String selector,int sCurrent,int sLast,int thisCurrent,int thisLast){  sCurrent=Math.max(sCurrent,0);  thisCurrent=Math.max(thisCurrent,0);  int thisDotIndex=boundedIndexOf(name,'.',thisCurrent,thisLast);  int thisPoundIndex=boundedIndexOf(name,'#',thisCurrent,thisLast);  int sDotIndex=boundedIndexOf(selector,'.',sCurrent,sLast);  int sPoundIndex=boundedIndexOf(selector,'#',sCurrent,sLast);  if (sDotIndex != -1) {    if (thisDotIndex == -1) {      return false;    }    if (sCurrent == sDotIndex) {      if ((thisLast - thisDotIndex) != (sLast - sDotIndex) || !selector.regionMatches(sCurrent,name,thisDotIndex,(thisLast - thisDotIndex))) {        return false;      }    } else {      if ((sLast - sCurrent) != (thisLast - thisCurrent) || !selector.regionMatches(sCurrent,name,thisCurrent,(thisLast - thisCurrent))) {        return false;      }    }    return true;  }  if (sPoundIndex != -1) {    if (thisPoundIndex == -1) {      return false;    }    if (sCurrent == sPoundIndex) {      if ((thisLast - thisPoundIndex) != (sLast - sPoundIndex) || !selector.regionMatches(sCurrent,name,thisPoundIndex,(thisLast - thisPoundIndex))) {        return false;      }    } else {      if ((sLast - sCurrent) != (thisLast - thisCurrent) || !selector.regionMatches(sCurrent,name,thisCurrent,(thisLast - thisCurrent))) {        return false;      }    }    return true;  }  if (thisDotIndex != -1) {    return (((thisDotIndex - thisCurrent) == (sLast - sCurrent)) && selector.regionMatches(sCurrent,name,thisCurrent,thisDotIndex - thisCurrent));  }  if (thisPoundIndex != -1) {    return (((thisPoundIndex - thisCurrent) == (sLast - sCurrent)) && selector.regionMatches(sCurrent,name,thisCurrent,thisPoundIndex - thisCurrent));  }  return (((thisLast - thisCurrent) == (sLast - sCurrent)) && selector.regionMatches(sCurrent,name,thisCurrent,thisLast - thisCurrent));}  }
class C{  public boolean canGoBack(){  return webView.canGoBack();}  }
class C{  private boolean isInvokeBasic(Name name){  if (name.function == null)   return false;  if (name.arguments.length < 1)   return false;  MemberName member=name.function.member();  return memberRefersTo(member,MethodHandle.class,"invokeBasic") && !member.isPublic() && !member.isStatic();}  }
class C{  @SuppressWarnings("deprecation") private void initCropGridStyle(@NonNull TypedArray a){  int cropGridStrokeSize=a.getDimensionPixelSize(R.styleable.gallery_ucrop_UCropView_gallery_ucrop_grid_stroke_size,getResources().getDimensionPixelSize(R.dimen.gallery_ucrop_default_crop_grid_stroke_width));  int cropGridColor=a.getColor(R.styleable.gallery_ucrop_UCropView_gallery_ucrop_grid_color,getResources().getColor(R.color.gallery_default_ucrop_color_default_crop_grid));  mCropGridPaint.setStrokeWidth(cropGridStrokeSize);  mCropGridPaint.setColor(cropGridColor);  mCropGridRowCount=a.getInt(R.styleable.gallery_ucrop_UCropView_gallery_ucrop_grid_row_count,DEFAULT_CROP_GRID_ROW_COUNT);  mCropGridColumnCount=a.getInt(R.styleable.gallery_ucrop_UCropView_gallery_ucrop_grid_column_count,DEFAULT_CROP_GRID_COLUMN_COUNT);}  }
class C{  public RadiusRequestHandler(AccessRequestHandlerFactory accessRequestHandlerFactory,final RadiusRequestContext reqCtx,final ByteBuffer buffer,final EventBus eventBus){  LOG.message("Entering RadiusRequestHandler.RadiusRequestHandler()");  this.requestContext=reqCtx;  this.buffer=buffer;  this.eventBus=eventBus;  this.accessRequestHandlerFactory=accessRequestHandlerFactory;  LOG.message("Leaving RadiusRequestHandler.RadiusRequestHandler()");}  }
class C{  protected void redoTo(UndoableEdit edit) throws CannotRedoException {  boolean done=false;  while (!done) {    UndoableEdit next=edits.elementAt(indexOfNextAdd++);    next.redo();    done=next == edit;  }}  }
class C{  public boolean isExclusive(){  return _exclusive;}  }
class C{  public MessageDispatcher build(long maxSize,int concurrency,long expireAfter,Debug debug){  Cache<String,MessagePromise> cache=CacheBuilder.newBuilder().concurrencyLevel(concurrency).maximumSize(maxSize).expireAfterWrite(expireAfter,TimeUnit.SECONDS).build();  return new MessageDispatcher(cache,debug);}  }
class C{  public void calculateValues(){  calculatePercentComplete();  calculateEta();}  }
class C{  public Response[] send(Member[] destination,Serializable message,int rpcOptions,int channelOptions,long timeout) throws ChannelException {  if (destination == null || destination.length == 0)   return new Response[0];  int sendOptions=channelOptions & ~Channel.SEND_OPTIONS_SYNCHRONIZED_ACK;  RpcCollectorKey key=new RpcCollectorKey(UUIDGenerator.randomUUID(false));  RpcCollector collector=new RpcCollector(key,rpcOptions,destination.length);  try {synchronized (collector) {      if (rpcOptions != NO_REPLY)       responseMap.put(key,collector);      RpcMessage rmsg=new RpcMessage(rpcId,key.id,message);      channel.send(destination,rmsg,sendOptions);      if (rpcOptions != NO_REPLY)       collector.wait(timeout);    }  } catch (  InterruptedException ix) {    Thread.currentThread().interrupt();  } finally {    responseMap.remove(key);  }  return collector.getResponses();}  }
class C{  private LDIFImportResult importLDIF(LDIFImportConfig importConfig,boolean writeLDIF) throws DirectoryException {  backendLock.writeLock().lock();  try (LDIFReader reader=newLDIFReader(importConfig)){    entryMap.clear();    childDNs.clear();    try {      while (true) {        Entry e=null;        try {          e=reader.readEntry();          if (e == null) {            break;          }        } catch (        LDIFException le) {          if (!le.canContinueReading()) {            LocalizableMessage m=ERR_LDIF_BACKEND_ERROR_READING_LDIF.get(stackTraceToSingleLineString(le));            throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),m,le);          }          continue;        }        DN entryDN=e.getName();        if (entryMap.containsKey(entryDN)) {          LocalizableMessage m=ERR_LDIF_BACKEND_DUPLICATE_ENTRY.get(ldifFilePath,currentConfig.dn(),entryDN);          logger.error(m);          reader.rejectLastEntry(m);          continue;        }        if (baseDNs.contains(entryDN)) {          entryMap.put(entryDN,e);          continue;        }        if (!isBelowBaseDN(entryDN)) {          LocalizableMessage m=ERR_LDIF_BACKEND_ENTRY_OUT_OF_SCOPE.get(ldifFilePath,currentConfig.dn(),entryDN);          logger.error(m);          reader.rejectLastEntry(m);          continue;        }        DN parentDN=DirectoryServer.getParentDNInSuffix(entryDN);        if (parentDN == null || !entryMap.containsKey(parentDN)) {          LocalizableMessage m=ERR_LDIF_BACKEND_MISSING_PARENT.get(ldifFilePath,currentConfig.dn(),entryDN);          logger.error(m);          reader.rejectLastEntry(m);          continue;        }        entryMap.put(entryDN,e);        Set<DN> childDNSet=childDNs.get(parentDN);        if (childDNSet == null) {          childDNSet=new HashSet<>();          childDNs.put(parentDN,childDNSet);        }        childDNSet.add(entryDN);      }      if (writeLDIF) {        writeLDIF();      }      return new LDIFImportResult(reader.getEntriesRead(),reader.getEntriesRejected(),reader.getEntriesIgnored());    } catch (    DirectoryException de) {      throw de;    }catch (    Exception e) {      LocalizableMessage m=ERR_LDIF_BACKEND_ERROR_READING_LDIF.get(stackTraceToSingleLineString(e));      throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),m,e);    }  }  finally {    backendLock.writeLock().unlock();  }}  }
class C{  @Override public void write(byte[] b) throws IOException {  write(b,0,b.length);}  }
class C{  public boolean removeBackendPopulatedListener(BackendPopulatedListener listener){  return backendPopulatedListeners.remove(listener);}  }
class C{  public OutputStreamWriter(OutputStream out){  super(out);  try {    se=StreamEncoder.forOutputStreamWriter(out,this,(String)null);  } catch (  UnsupportedEncodingException e) {    throw new Error(e);  }}  }
class C{  protected void stopCurrentThreadIfNeeded(){  if (currentThreadShouldBeStopped()) {    long lastTime=lastTimeThreadKilledItself.longValue();    if (lastTime + threadRenewalDelay < System.currentTimeMillis()) {      if (lastTimeThreadKilledItself.compareAndSet(lastTime,System.currentTimeMillis() + 1)) {        final String msg=sm.getString("threadPoolExecutor.threadStoppedToAvoidPotentialLeak",Thread.currentThread().getName());        throw new StopPooledThreadException(msg);      }    }  }}  }
class C{  public String toXMLString(){  StringBuilder sb=new StringBuilder();  sb.append(LT).append(ADVICES_HANDLEABLE_BY_AM_RESPONSE).append(">").append(NEW_LINE);  sb.append(PolicyUtils.attributeValuePairToXMLString(ADVICES_HANDLEABLE_BY_AM,advicesHandleableByAM));  sb.append(LT).append(SLASH).append(ADVICES_HANDLEABLE_BY_AM_RESPONSE).append(GT).append(NEW_LINE);  return sb.toString();}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  boolean inHalfOpenRange(K key,K least,K fence){  if (key == null)   throw new NullPointerException();  return ((least == null || compare(key,least) >= 0) && (fence == null || compare(key,fence) < 0));}  }
class C{  public BeanContextServicesSupport(BeanContextServices peer,Locale lcle,boolean dtime){  this(peer,lcle,dtime,true);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.LegalIdentityType createLegalIdentityType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LegalIdentityTypeImpl();}  }
class C{  protected static EventListener addInternal(EventListener a,EventListener b){  if (a == null)   return b;  if (b == null)   return a;  return new DnDEventMulticaster(a,b);}  }
class C{  public void testDialogProperties(){  try {    assertEquals("The Dialog did not have the right Call ID.",((CallIdHeader)riInvite.getHeader(CallIdHeader.NAME)).getCallId(),dialog.getCallId().getCallId());    assertEquals("Dialog.getLocalParty() returned a bad address.",((FromHeader)tiInvite.getHeader(FromHeader.NAME)).getAddress(),dialog.getLocalParty());    assertTrue("Dialog.getLocalSequenceNumber() returned a bad value.",1 == dialog.getLocalSeqNumber());    assertEquals("Dialog.getLocalTag() returned a bad tag",((FromHeader)riInvite.getHeader(FromHeader.NAME)).getTag(),dialog.getLocalTag());    assertEquals("Dialog.getRemoteParty() returned a bad address.",((ToHeader)tiInvite.getHeader(ToHeader.NAME)).getAddress(),dialog.getRemoteParty());    assertEquals("Dialog.getRemoteTag() returned a bad tag",((ToHeader)ringing.getHeader(ToHeader.NAME)).getTag(),dialog.getRemoteTag());    assertFalse("Dialog.isServer returned true for a client side dialog",dialog.isServer());  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  private static void addEntryLevelRightsInfo(AciLDAPOperationContainer container,int mask,Entry retEntry,String rightStr){  if (hasAttrMask(mask,ACL_RIGHTS_INFO)) {    String typeStr=aclRightsInfoEntryLogsStr + ";" + rightStr;    Attribute attr=Attributes.create(typeStr,container.getEvalSummary());    retEntry.addAttribute(attr,null);  }}  }
class C{  public FrameBodyTMCL(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public void dragEnter(DragSourceDragEvent dsde){}  }
class C{  public Bounds(){  super();}  }
class C{  public StringBuffer insert(int index,long l){  return insert(index,Long.toString(l));}  }
class C{  @Override public List<Index> readAllCached(Identifier id){  String key=id.getDatabaseName() + ":" + id.getTableName();  Cache c=CacheFactory.getCache("index");  Element e=c.get(key);  if (e == null || e.getObjectValue() == null) {    List<Index> all=readAll(id);    if (all != null && !all.isEmpty()) {      e=new Element(key,all);      c.put(e);    } else {      return all;    }  } else {    if (logger.isTraceEnabled()) {      logger.trace("Pulling Index from Cache: " + e.getObjectValue().toString());    }  }  return (List<Index>)e.getObjectValue();}  }
class C{  public void parse(final SetCookie cookie,final String value) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (value == null) {    throw new MalformedCookieException("Missing value for version attribute");  }  int version=-1;  try {    version=Integer.parseInt(value);  } catch (  NumberFormatException e) {    version=-1;  }  if (version < 0) {    throw new MalformedCookieException("Invalid cookie version.");  }  cookie.setVersion(version);}  }
class C{  @Override public void removeApplicationParameter(String name){synchronized (applicationParametersLock) {    int n=-1;    for (int i=0; i < applicationParameters.length; i++) {      if (name.equals(applicationParameters[i].getName())) {        n=i;        break;      }    }    if (n < 0)     return;    int j=0;    ApplicationParameter results[]=new ApplicationParameter[applicationParameters.length - 1];    for (int i=0; i < applicationParameters.length; i++) {      if (i != n)       results[j++]=applicationParameters[i];    }    applicationParameters=results;  }  fireContainerEvent("removeApplicationParameter",name);}  }
class C{  @Override public boolean validateObject(final UserPassKey key,final PooledObject<PooledConnectionAndInfo> p){  try {    validateLifetime(p);  } catch (  final Exception e) {    return false;  }  boolean valid=false;  final PooledConnection pconn=p.getObject().getPooledConnection();  Connection conn=null;  validatingSet.add(pconn);  if (null == _validationQuery) {    int timeout=_validationQueryTimeout;    if (timeout < 0) {      timeout=0;    }    try {      conn=pconn.getConnection();      valid=conn.isValid(timeout);    } catch (    final SQLException e) {      valid=false;    } finally {      Utils.closeQuietly(conn);      validatingSet.remove(pconn);    }  } else {    Statement stmt=null;    ResultSet rset=null;    validatingSet.add(pconn);    try {      conn=pconn.getConnection();      stmt=conn.createStatement();      rset=stmt.executeQuery(_validationQuery);      if (rset.next()) {        valid=true;      } else {        valid=false;      }      if (_rollbackAfterValidation) {        conn.rollback();      }    } catch (    final Exception e) {      valid=false;    } finally {      Utils.closeQuietly(rset);      Utils.closeQuietly(stmt);      Utils.closeQuietly(conn);      validatingSet.remove(pconn);    }  }  return valid;}  }
class C{  protected void writeFile(OutputStream output,PrintWriter writer,String name,Object value){  if (value instanceof byte[]) {    writeFile(output,writer,name,(byte[])value);    return;  }  writeFile(output,writer,name,(File)value);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node entRef;  Node createdNode;  Node appendedNode;  doc=(Document)load("staff",true);  entRef=doc.createEntityReference("ent4");  assertNotNull("createdEntRefNotNull",entRef);  createdNode=doc.createElement("text3");{    boolean success=false;    try {      appendedNode=entRef.appendChild(createdNode);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public InvalidMidiDataException(String message){  super(message);}  }
class C{  private boolean authenticate(byte method,InputStream in,BufferedOutputStream out) throws IOException {  return authenticate(method,in,out,0L);}  }
class C{  public void update(Graphics g,JComponent c){  AbstractButton button=(AbstractButton)c;  if ((c.getBackground() instanceof UIResource) && button.isContentAreaFilled() && c.isEnabled()) {    ButtonModel model=button.getModel();    if (!MetalUtils.isToolBarButton(c)) {      if (!model.isArmed() && !model.isPressed() && MetalUtils.drawGradient(c,g,"ToggleButton.gradient",0,0,c.getWidth(),c.getHeight(),true)) {        paint(g,c);        return;      }    } else     if ((model.isRollover() || model.isSelected()) && MetalUtils.drawGradient(c,g,"ToggleButton.gradient",0,0,c.getWidth(),c.getHeight(),true)) {      paint(g,c);      return;    }  }  super.update(g,c);}  }
class C{  @AndroidOnly("The RI doesn't throw the IllegalStateException.") public void test_unwrap_ByteBuffer_ByteBuffer_04(){  String host="new host";  int port=8080;  ByteBuffer bbs=ByteBuffer.allocate(10);  ByteBuffer bbd=ByteBuffer.allocate(100);  SSLEngine sse=getEngine(host,port);  try {    sse.unwrap(bbs,bbd);    fail("IllegalStateException wasn't thrown");  } catch (  IllegalStateException iobe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalStateException");  }}  }
class C{  public int viewToModel(float x,float y,Shape a,Position.Bias[] bias){  Rectangle alloc=(Rectangle)a;  if (x < alloc.x + alloc.width) {    bias[0]=Position.Bias.Forward;    return getStartOffset();  }  bias[0]=Position.Bias.Backward;  return getEndOffset();}  }
class C{  private void registerReplicationMonitor(){  if (monitor != null) {    DirectoryServer.registerMonitorProvider(monitor);  }}  }
class C{  public boolean add(E e){  return offer(e);}  }
class C{  public MemoryBackend(final Schema schema){  this.schema=schema;  this.decodeOptions=new DecodeOptions().setSchema(schema);}  }
class C{  public boolean isEmpty(){synchronized (actions) {    if (allowToChange) {      return actions.isEmpty();    }  }  return true;}  }
class C{  public void appendToFsb(org.apache.xml.utils.FastStringBuffer fsb){  XString xstring=(XString)xstr();  xstring.appendToFsb(fsb);}  }
class C{  public ClientCredentials extractCredentials(OAuth2Request request,String endpoint) throws InvalidRequestException, InvalidClientException, NotFoundException {  final Request req=request.getRequest();  boolean basicAuth=false;  if (req.getChallengeResponse() != null) {    basicAuth=true;  }  final ClientCredentials client;  Client.TokenEndpointAuthMethod method=CLIENT_SECRET_POST;  if (JWT_PROFILE_CLIENT_ASSERTION_TYPE.equalsIgnoreCase(request.<String>getParameter(CLIENT_ASSERTION_TYPE))) {    client=verifyJwtBearer(request,basicAuth,endpoint);    method=PRIVATE_KEY_JWT;  } else {    String clientId=request.getParameter(OAuth2Constants.Params.CLIENT_ID);    String clientSecret=request.getParameter(OAuth2Constants.Params.CLIENT_SECRET);    if (basicAuth && clientId != null) {      logger.error("Client (" + clientId + ") using multiple authentication methods");      throw new InvalidRequestException("Client authentication failed");    }    if (req.getChallengeResponse() != null) {      final ChallengeResponse challengeResponse=req.getChallengeResponse();      clientId=challengeResponse.getIdentifier();      clientSecret="";      if (challengeResponse.getSecret() != null && challengeResponse.getSecret().length > 0) {        clientSecret=String.valueOf(req.getChallengeResponse().getSecret());      }      method=CLIENT_SECRET_BASIC;    }    if (clientId == null || clientId.isEmpty()) {      logger.error("Client Id is not set");      throw failureFactory.getException(request,"Client authentication failed");    }    client=new ClientCredentials(clientId,clientSecret == null ? null : clientSecret.toCharArray(),false,basicAuth);  }  final OpenIdConnectClientRegistration cr=clientRegistrationStore.get(client.getClientId(),request);  final Set<String> scopes=cr.getAllowedScopes();  if (scopes.contains(OAuth2Constants.Params.OPENID) && req.getResourceRef().getLastSegment().equals(OAuth2Constants.Params.ACCESS_TOKEN) && !cr.getTokenEndpointAuthMethod().equals(method.getType())) {    throw failureFactory.getException(request,"Invalid authentication method for accessing this endpoint.");  }  return client;}  }
class C{  public void log(LogRecord record){  if (!isLoggable(record.getLevel())) {    return;  }  Filter theFilter=filter;  if (theFilter != null && !theFilter.isLoggable(record)) {    return;  }  Logger logger=this;  while (logger != null) {    final Handler[] loggerHandlers=isSystemLogger ? logger.accessCheckedHandlers() : logger.getHandlers();    for (    Handler handler : loggerHandlers) {      handler.publish(record);    }    final boolean useParentHdls=isSystemLogger ? logger.useParentHandlers : logger.getUseParentHandlers();    if (!useParentHdls) {      break;    }    logger=isSystemLogger ? logger.parent : logger.getParent();  }}  }
class C{  public SessionHAStatisticsViewBean(){  super(SESSION_HA_STATISTICS);  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public InputStream _invoke(OutputStream output) throws ApplicationException, RemarshalException {  throw new org.omg.CORBA.NO_IMPLEMENT(reason);}  }
class C{  @NonNull public static Interpolator fastOutSlowIn(){  return new FastOutSlowInInterpolator();}  }
class C{  public void write(byte b[]) throws IOException {  write(b,0,b.length);}  }
class C{  public void testConstructorSignBytesZeroNull3(){  byte aBytes[]={};  int aSign=1;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,aNumber.signum());}  }
class C{  public Element first(){switch (type) {case '&':case '|':case '*':case '?':    return null;case '+':case ',':  return ((ContentModel)content).first();default :return (Element)content;}}  }
class C{  public int viewToModel(float fx,float fy,Shape a,Position.Bias[] bias){  bias[0]=Position.Bias.Forward;  Rectangle alloc=a.getBounds();  Document doc=getDocument();  int x=(int)fx;  int y=(int)fy;  if (y < alloc.y) {    return getStartOffset();  } else   if (y > alloc.y + alloc.height) {    return getEndOffset() - 1;  } else {    Element map=doc.getDefaultRootElement();    int fontHeight=metrics.getHeight();    int lineIndex=(fontHeight > 0 ? Math.abs((y - alloc.y) / fontHeight) : map.getElementCount() - 1);    if (lineIndex >= map.getElementCount()) {      return getEndOffset() - 1;    }    Element line=map.getElement(lineIndex);    int dx=0;    if (lineIndex == 0) {      alloc.x+=firstLineOffset;      alloc.width-=firstLineOffset;    }    if (x < alloc.x) {      return line.getStartOffset();    } else     if (x > alloc.x + alloc.width) {      return line.getEndOffset() - 1;    } else {      try {        int p0=line.getStartOffset();        int p1=line.getEndOffset() - 1;        Segment s=SegmentCache.getSharedSegment();        doc.getText(p0,p1 - p0,s);        tabBase=alloc.x;        int offs=p0 + Utilities.getTabbedTextOffset(s,metrics,tabBase,x,this,p0);        SegmentCache.releaseSharedSegment(s);        return offs;      } catch (      BadLocationException e) {        return -1;      }    }  }}  }
class C{  public static PersistentSearchRequestControl newControl(final boolean isCritical,final boolean changesOnly,final boolean returnECs,final PersistentSearchChangeType... changeTypes){  Reject.ifNull((Object)changeTypes);  return newControl(isCritical,changesOnly,returnECs,Arrays.asList(changeTypes));}  }
class C{  public String toString(boolean includeNS,boolean declareNS){  StringBuffer result=new StringBuffer(1000);  String prefix="";  String uri="";  if (includeNS) {    prefix=SAMLConstants.ASSERTION_PREFIX;  }  if (declareNS) {    uri=SAMLConstants.assertionDeclareStr;  }  result.append("<").append(prefix).append("AuthenticationStatement").append(uri);  if (_authenticationMethod != null && _authenticationMethod.length() != 0) {    result.append(" AuthenticationMethod=\"").append(_authenticationMethod.replace("|","%7C")).append("\"");  }  if (_authenticationInstant != null && _authenticationInstant.toString().length() != 0) {    result.append(" AuthenticationInstant=\"").append(DateUtils.toUTCDateFormat(_authenticationInstant)).append("\"");  }  result.append(">\n").append(this._subject.toString(includeNS,false));  if (_subjectLocality != null) {    result.append(_subjectLocality.toString(includeNS,false));  }  if (_authorityBinding != null && !_authorityBinding.isEmpty()) {    Iterator iter=this.getAuthorityBinding().iterator();    while (iter.hasNext()) {      AuthorityBinding authBinding=(AuthorityBinding)iter.next();      result.append(authBinding.toString(includeNS,false));    }  }  result.append("</").append(prefix).append("AuthenticationStatement>\n");  return (result.toString());}  }
class C{  @Override public void onDrawFrame(GL10 gl10){  GLES20.glClearColor(1.0f,0.0f,0.0f,1.0f);  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);  GLES20.glEnable(GLES20.GL_DEPTH_TEST);  GLES20.glEnable(GLES20.GL_CULL_FACE);  GLES20.glEnable(GLES20.GL_BLEND);  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);  long currentTimeMillis=System.currentTimeMillis();  updateWithDelta(currentTimeMillis - lastTimeMillis);  lastTimeMillis=currentTimeMillis;}  }
class C{  public void testCertStore16() throws NoSuchAlgorithmException, InvalidAlgorithmParameterException {  if (!initParams()) {    return;  }  CertStore certS;  for (int i=0; i < dValid.length; i++) {    certS=CertStore.getInstance(dValid[i],dParams);    assertEquals("Incorrect type",certS.getType(),dValid[i]);    try {      certS=CertStore.getInstance(dValid[i],dParams,defaultProviderCol);      assertEquals("Incorrect type",certS.getType(),dValid[i]);    } catch (    IllegalArgumentException e) {      fail("Unexpected IllegalArgumentException " + e.getMessage());    }    try {      certS=CertStore.getInstance(dValid[i],dParams,defaultProviderColName);      assertEquals("Incorrect type",certS.getType(),dValid[i]);    } catch (    NoSuchProviderException e) {      fail("Unexpected IllegalArgumentException " + e.getMessage());    }  }}  }
class C{  public Object clone(){  AMIdentitySubject theClone=null;  try {    theClone=(AMIdentitySubject)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  if (subjectValues != null) {    theClone.subjectValues=new HashSet();    theClone.subjectValues.addAll(subjectValues);  }  return theClone;}  }
class C{  @Override public void createITable(Index index){  logger.info("Creating iTable for index: " + index.toString());  PreparedStatement createStmt=PreparedStatementFactory.getPreparedStatement(generateTableCreationSyntax(index),session);  BoundStatement bs=new BoundStatement(createStmt);  session.execute(bs);}  }
class C{  public void test_ConstructorILjava_lang_StringIIIIIIII(){  SimpleTimeZone st=new SimpleTimeZone(1000,"TEST",Calendar.NOVEMBER,1,Calendar.SUNDAY,0,Calendar.NOVEMBER,-1,Calendar.SUNDAY,0);  assertTrue("Incorrect TZ constructed",st.inDaylightTime(new GregorianCalendar(1998,Calendar.NOVEMBER,13).getTime()));  assertTrue("Incorrect TZ constructed",!(st.inDaylightTime(new GregorianCalendar(1998,Calendar.OCTOBER,13).getTime())));  assertEquals("Incorrect TZ constructed","TEST",st.getID());  assertEquals("Incorrect TZ constructed",1000,st.getRawOffset());  assertTrue("Incorrect TZ constructed",st.useDaylightTime());  try {    new SimpleTimeZone(1000,"TEST",12,1,Calendar.SUNDAY,0,Calendar.NOVEMBER,-1,Calendar.SUNDAY,0);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    new SimpleTimeZone(1000,"TEST",Calendar.NOVEMBER,10,Calendar.SUNDAY,0,Calendar.NOVEMBER,-1,Calendar.SUNDAY,0);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    new SimpleTimeZone(1000,"TEST",Calendar.NOVEMBER,1,10,0,Calendar.NOVEMBER,-1,Calendar.SUNDAY,0);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    new SimpleTimeZone(1000,"TEST",Calendar.DECEMBER,1,Calendar.SUNDAY,0,Calendar.NOVEMBER,-10,Calendar.SUNDAY,0);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }}  }
class C{  @Override public void updatePosition(){  for (int i=0; i < spriteBoundsArray.length; i++) {    spriteBoundsArray[i].setTranslateX(xPos);    spriteBoundsArray[i].setTranslateY(yPos);  }  spriteFrame.setTranslateX(xPos);  spriteFrame.setTranslateY(yPos);}  }
class C{  @SuppressWarnings("unused") public void openFileChooser(ValueCallback<Uri> uploadMsg,String acceptType,String capture){  openFileChooser(uploadMsg,acceptType);}  }
class C{  protected int checkRiskAttribute(){  int retVal=0;  if (debug.messageEnabled()) {    debug.message("{}.checkRiskAttribute",ADAPTIVE);  }  if (riskAttributeName != null && riskAttributeValue != null) {    Set<String> riskAttributeValues=null;    riskAttributeValues=getIdentityAttributeSet(riskAttributeName);    if (riskAttributeValues != null) {      for (      String riskAttr : riskAttributeValues) {        if (riskAttributeValue.equalsIgnoreCase(riskAttr)) {          if (debug.messageEnabled()) {            debug.message("{}.checkRiskAttribute: Found Match",ADAPTIVE);          }          retVal=riskAttributeScore;          break;        }      }    }  }  if (!riskAttributeInvert) {    retVal=riskAttributeScore - retVal;  }  return retVal;}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){}  }
class C{  @SuppressWarnings("fallthrough") public int read() throws IOException {synchronized (lock) {    int c=super.read();    if (skipLF) {      if (c == '\n')       c=super.read();      skipLF=false;    }switch (c) {case '\r':      skipLF=true;case '\n':    lineNumber++;  return '\n';}return c;}}  }
class C{  public R visitInteger(IntegerPropertyDefinition pd,P p){  return visitUnknown(pd,p);}  }
class C{  public static int serviceState(){  return serviceState(NullOutputStream.printStream(),NullOutputStream.printStream());}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.SPProvidedNameIdentifierElement createSPProvidedNameIdentifierElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.SPProvidedNameIdentifierElementImpl();}  }
class C{  @SuppressWarnings("unchecked") public void writeTimestamp(java.sql.Timestamp x) throws SQLException {  attribs.add(x);}  }
class C{  public int addNumberedOption(LocalizableMessage description,MenuCallback<T> callback,LocalizableMessage... extraFields){  List<LocalizableMessage> fields=new ArrayList<>();  fields.add(description);  if (extraFields != null) {    fields.addAll(Arrays.asList(extraFields));  }  numericFields.add(fields);  numericCallbacks.add(callback);  return numericCallbacks.size();}  }
class C{  public InterruptedIOException(){  super();}  }
class C{  public boolean warningEnabled(){  return getDebugServiceInstance().warningEnabled();}  }
class C{  @Override public void allIdentitiesChanged(){}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public void readAndExecute(LDAPConnection connection,String fileNameValue,LDAPModifyOptions modifyOptions) throws IOException, LDAPException {  ArrayList<Control> controls=modifyOptions.getControls();  LDIFReader reader;  try {    InputStream is=System.in;    if (fileNameValue != null) {      is=new FileInputStream(fileNameValue);    }    LDIFImportConfig importConfig=new LDIFImportConfig(is);    importConfig.setValidateSchema(false);    reader=new LDIFReader(importConfig);  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDIF_FILE_CANNOT_OPEN_FOR_READ.get(fileNameValue,e.getLocalizedMessage());    throw new FileNotFoundException(message.toString());  }  if (fileNameValue == null) {    fileNameValue="Console";  }  while (true) {    ChangeRecordEntry entry=null;    try {      entry=reader.readChangeRecord(modifyOptions.getDefaultAdd());    } catch (    LDIFException le) {      logger.traceException(le);      if (!modifyOptions.continueOnError()) {        try {          reader.close();        } catch (        Exception e) {          logger.traceException(e);        }        LocalizableMessage message=ERR_LDIF_FILE_INVALID_LDIF_ENTRY.get(le.getLineNumber(),fileNameValue,le);        throw new IOException(message.toString());      } else {        printWrappedText(err,ERR_LDIF_FILE_INVALID_LDIF_ENTRY.get(le.getLineNumber(),fileNameValue,le));        continue;      }    }catch (    Exception e) {      logger.traceException(e);      if (!modifyOptions.continueOnError()) {        try {          reader.close();        } catch (        Exception e2) {          logger.traceException(e2);        }        LocalizableMessage message=ERR_LDIF_FILE_READ_ERROR.get(fileNameValue,e);        throw new IOException(message.toString());      } else {        printWrappedText(err,ERR_LDIF_FILE_READ_ERROR.get(fileNameValue,e));        continue;      }    }    if (entry == null) {      try {        reader.close();      } catch (      Exception e) {        logger.traceException(e);      }      break;    }    ProtocolOp protocolOp=null;    ByteString asn1OctetStr=ByteString.valueOfUtf8(entry.getDN().toString());    String operationType="";switch (entry.getChangeOperationType()) {case ADD:      operationType="ADD";    AddChangeRecordEntry addEntry=(AddChangeRecordEntry)entry;  List<Attribute> attrs=addEntry.getAttributes();ArrayList<RawAttribute> attributes=new ArrayList<>(attrs.size());for (Attribute a : attrs) {attributes.add(new LDAPAttribute(a));}protocolOp=new AddRequestProtocolOp(asn1OctetStr,attributes);out.println(INFO_PROCESSING_OPERATION.get(operationType,asn1OctetStr));break;case DELETE:operationType="DELETE";protocolOp=new DeleteRequestProtocolOp(asn1OctetStr);out.println(INFO_PROCESSING_OPERATION.get(operationType,asn1OctetStr));break;case MODIFY:operationType="MODIFY";ModifyChangeRecordEntry modEntry=(ModifyChangeRecordEntry)entry;ArrayList<RawModification> mods=new ArrayList<>(modEntry.getModifications());protocolOp=new ModifyRequestProtocolOp(asn1OctetStr,mods);out.println(INFO_PROCESSING_OPERATION.get(operationType,asn1OctetStr));break;case MODIFY_DN:operationType="MODIFY DN";ModifyDNChangeRecordEntry modDNEntry=(ModifyDNChangeRecordEntry)entry;if (modDNEntry.getNewSuperiorDN() != null) {protocolOp=new ModifyDNRequestProtocolOp(asn1OctetStr,ByteString.valueOfUtf8(modDNEntry.getNewRDN().toString()),modDNEntry.deleteOldRDN(),ByteString.valueOfUtf8(modDNEntry.getNewSuperiorDN().toString()));} else {protocolOp=new ModifyDNRequestProtocolOp(asn1OctetStr,ByteString.valueOfUtf8(modDNEntry.getNewRDN().toString()),modDNEntry.deleteOldRDN());}out.println(INFO_PROCESSING_OPERATION.get(operationType,asn1OctetStr));break;default :break;}if (!modifyOptions.showOperations()) {LDAPMessage responseMessage=null;try {LDAPMessage message=new LDAPMessage(nextMessageID.getAndIncrement(),protocolOp,controls);connection.getLDAPWriter().writeMessage(message);responseMessage=connection.getLDAPReader().readMessage();} catch (DecodeException ae) {logger.traceException(ae);printWrappedText(err,INFO_OPERATION_FAILED.get(operationType));printWrappedText(err,ae.getMessage());if (!modifyOptions.continueOnError()) {String msg=LDAPToolUtils.getMessageForConnectionException(ae);throw new IOException(msg,ae);}return;}int resultCode=0;LocalizableMessage errorMessage=null;DN matchedDN=null;List<String> referralURLs=null;try {switch (entry.getChangeOperationType()) {case ADD:AddResponseProtocolOp addOp=responseMessage.getAddResponseProtocolOp();resultCode=addOp.getResultCode();errorMessage=addOp.getErrorMessage();matchedDN=addOp.getMatchedDN();referralURLs=addOp.getReferralURLs();break;case DELETE:DeleteResponseProtocolOp delOp=responseMessage.getDeleteResponseProtocolOp();resultCode=delOp.getResultCode();errorMessage=delOp.getErrorMessage();matchedDN=delOp.getMatchedDN();referralURLs=delOp.getReferralURLs();break;case MODIFY:ModifyResponseProtocolOp modOp=responseMessage.getModifyResponseProtocolOp();resultCode=modOp.getResultCode();errorMessage=modOp.getErrorMessage();matchedDN=modOp.getMatchedDN();referralURLs=modOp.getReferralURLs();break;case MODIFY_DN:ModifyDNResponseProtocolOp modDNOp=responseMessage.getModifyDNResponseProtocolOp();resultCode=modDNOp.getResultCode();errorMessage=modDNOp.getErrorMessage();matchedDN=modDNOp.getMatchedDN();referralURLs=modDNOp.getReferralURLs();break;default :break;}} catch (ClassCastException ce) {if (responseMessage.getProtocolOpType() == LDAPConstants.OP_TYPE_EXTENDED_RESPONSE) {ExtendedResponseProtocolOp extRes=responseMessage.getExtendedResponseProtocolOp();resultCode=extRes.getResultCode();errorMessage=extRes.getErrorMessage();matchedDN=extRes.getMatchedDN();referralURLs=extRes.getReferralURLs();} else {logger.traceException(ce);resultCode=ResultCode.OTHER.intValue();errorMessage=null;matchedDN=null;referralURLs=null;}}if (resultCode != SUCCESS && resultCode != REFERRAL) {LocalizableMessage msg=INFO_OPERATION_FAILED.get(operationType);if (!modifyOptions.continueOnError()) {throw new LDAPException(resultCode,errorMessage,msg,matchedDN,null);} else {LDAPToolUtils.printErrorMessage(err,msg,resultCode,errorMessage,matchedDN);}} else {out.println(INFO_OPERATION_SUCCESSFUL.get(operationType,asn1OctetStr));if (errorMessage != null) {printWrappedText(out,errorMessage);}if (referralURLs != null) {out.println(referralURLs);}}for (Control c : responseMessage.getControls()) {String oid=c.getOID();if (oid.equals(OID_LDAP_READENTRY_PREREAD)) {SearchResultEntry searchEntry;try {LDAPPreReadResponseControl prrc;if (c instanceof LDAPControl) {prrc=LDAPPreReadResponseControl.DECODER.decode(c.isCritical(),((LDAPControl)c).getValue());} else {prrc=(LDAPPreReadResponseControl)c;}searchEntry=prrc.getSearchEntry();} catch (DirectoryException de) {printWrappedText(err,ERR_LDAPMODIFY_PREREAD_CANNOT_DECODE_VALUE.get(de.getMessage()));continue;}StringBuilder buffer=new StringBuilder();searchEntry.toString(buffer,0);out.println(INFO_LDAPMODIFY_PREREAD_ENTRY.get());out.println(buffer);} else if (oid.equals(OID_LDAP_READENTRY_POSTREAD)) {SearchResultEntry searchEntry;try {LDAPPostReadResponseControl pprc;if (c instanceof LDAPControl) {pprc=LDAPPostReadResponseControl.DECODER.decode(c.isCritical(),((LDAPControl)c).getValue());} else {pprc=(LDAPPostReadResponseControl)c;}searchEntry=pprc.getSearchEntry();} catch (DirectoryException de) {printWrappedText(err,ERR_LDAPMODIFY_POSTREAD_CANNOT_DECODE_VALUE.get(de.getMessage()));continue;}StringBuilder buffer=new StringBuilder();searchEntry.toString(buffer,0);out.println(INFO_LDAPMODIFY_POSTREAD_ENTRY.get());out.println(buffer);} else if (oid.equals(OID_CSN_CONTROL)) {if (c instanceof LDAPControl) {out.println(INFO_CHANGE_NUMBER_CONTROL_RESULT.get(operationType,((LDAPControl)c).getValue()));} else {out.println(INFO_CHANGE_NUMBER_CONTROL_RESULT.get(operationType,((ChangeNumberControlPlugin.ChangeNumberControl)c).getCSN()));}}}}}}  }
class C{  public StateInteractive mouse_dragged(PlaPointFloat p_point){  return this;}  }
class C{  protected void tearDown(){  Locale.setDefault(defaultLocale);}  }
class C{  public HashAttributeSet(AttributeSet attributes){  this(attributes,Attribute.class);}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.SPKIDataType.SPKISexp createSPKIDataTypeSPKISexp(byte[] value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.SPKIDataTypeImpl.SPKISexpImpl(value);}  }
class C{  public void removeCaretListener(CaretListener listener){  listenerList.remove(CaretListener.class,listener);}  }
class C{  public boolean equal(org.omg.DynamicAny.DynAny dyn_any){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("equal",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    return $self.equal(dyn_any);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private void enableMaintenanceMode(){synchronized (maintenanceEnabled) {    if (!maintenanceEnabled.getAndSet(true)) {      maintenanceFilter.enableMaintenanceMode();    }  }}  }
class C{  public void end(String namespace,String name) throws Exception {}  }
class C{  private String normalizeString(final String string){  final StringBuilder builder=new StringBuilder(string.length());  prepareUnicode(builder,ByteString.valueOfUtf8(string),ignoreWhiteSpaceInStrings,!caseSensitiveStrings);  if (builder.length() == 0 && string.length() > 0) {    return " ";  }  return builder.toString();}  }
class C{  public static VariableModification<byte[]> duplicate(){  return new ByteArrayDuplicateModification();}  }
class C{  protected void decryptBuffer(ByteBuffer out) throws IOException {  int inputSize=inBuffer.remaining();  try {    int n=cipher.update(inBuffer,out);    if (n < inputSize) {      cipher.doFinal(inBuffer,out);      cipherReset=true;    }  } catch (  ShortBufferException e) {    throw new IOException(e);  }catch (  IllegalBlockSizeException e) {    throw new IOException(e);  }catch (  BadPaddingException e) {    throw new IOException(e);  }}  }
class C{  @Override public int countAll(){  Long count=(Long)finderCache.getResult(FINDER_PATH_COUNT_ALL,FINDER_ARGS_EMPTY,this);  if (count == null) {    Session session=null;    try {      session=openSession();      Query q=session.createQuery(_SQL_COUNT_FOO);      count=(Long)q.uniqueResult();      finderCache.putResult(FINDER_PATH_COUNT_ALL,FINDER_ARGS_EMPTY,count);    } catch (    Exception e) {      finderCache.removeResult(FINDER_PATH_COUNT_ALL,FINDER_ARGS_EMPTY);      throw processException(e);    } finally {      closeSession(session);    }  }  return count.intValue();}  }
class C{  @Override public synchronized String publishInstance(RestSTSInstanceConfig instanceConfig,RestSTS restSTSInstance,boolean republish) throws STSPublishException {  String deploymentSubPath=deploymentPathNormalization.normalizeDeploymentPath(instanceConfig.getDeploymentSubPath());  if (publishedRoutes.containsKey(normalizeDeploymentSubPathForRouteCache(deploymentSubPath))) {    throw new STSPublishException(ResourceException.CONFLICT,"A rest-sts instance at sub-path " + deploymentSubPath + " has already been published.");  }  AuditFilter auditFilter=InjectorHolder.getInstance(AuditFilter.class);  FilterChain auditedRestSTSService=new FilterChain(Resources.newSingleton(new RestSTSService(restSTSInstance,logger)),new AuditFilterWrapper(auditFilter,STS));  RouteMatcher<Request> route=router.addRoute(EQUALS,uriTemplate(deploymentSubPath),auditedRestSTSService);  publishedRoutes.put(normalizeDeploymentSubPathForRouteCache(deploymentSubPath),route);  if (!republish) {    try {      persistentStore.persistSTSInstance(deploymentSubPath,instanceConfig.getDeploymentConfig().getRealm(),instanceConfig);    } catch (    STSPublishException e) {      router.removeRoute(route);      publishedRoutes.remove(normalizeDeploymentSubPathForRouteCache(deploymentSubPath));      throw e;    }  }  return deploymentSubPath;}  }
class C{  protected synchronized void deploy(PrintWriter writer,ContextName cn,String tag,boolean update,HttpServletRequest request,StringManager smClient){  if (debug >= 1) {    log("deploy: Deploying web application '" + cn + "'");  }  if (!validateContextName(cn,writer,smClient)) {    return;  }  String name=cn.getName();  String baseName=cn.getBaseName();  String displayPath=cn.getDisplayName();  Context context=(Context)host.findChild(name);  if (context != null && !update) {    writer.println(smClient.getString("managerServlet.alreadyContext",displayPath));    return;  }  File deployedWar=new File(host.getAppBaseFile(),baseName + ".war");  File uploadedWar;  if (tag == null) {    if (update) {      uploadedWar=new File(deployedWar.getAbsolutePath() + ".tmp");      if (uploadedWar.exists() && !uploadedWar.delete()) {        writer.println(smClient.getString("managerServlet.deleteFail",uploadedWar));      }    } else {      uploadedWar=deployedWar;    }  } else {    File uploadPath=new File(versioned,tag);    if (!uploadPath.mkdirs() && !uploadPath.isDirectory()) {      writer.println(smClient.getString("managerServlet.mkdirFail",uploadPath));      return;    }    uploadedWar=new File(uploadPath,baseName + ".war");  }  if (debug >= 2) {    log("Uploading WAR file to " + uploadedWar);  }  try {    if (isServiced(name)) {      writer.println(smClient.getString("managerServlet.inService",displayPath));    } else {      addServiced(name);      try {        uploadWar(writer,request,uploadedWar,smClient);        if (update && tag == null) {          if (deployedWar.exists() && !deployedWar.delete()) {            writer.println(smClient.getString("managerServlet.deleteFail",deployedWar));            return;          }          uploadedWar.renameTo(deployedWar);        }        if (tag != null) {          copy(uploadedWar,deployedWar);        }        check(name);      }  finally {        removeServiced(name);      }    }  } catch (  Exception e) {    log("managerServlet.check[" + displayPath + "]",e);    writer.println(smClient.getString("managerServlet.exception",e.toString()));    return;  }  writeDeployResult(writer,smClient,name,displayPath);}  }
class C{  Shape adjustPaintRegion(Shape a){  return a;}  }
class C{  @Override public void onPropertyChanged(Observable sender,int propertyId){  if (ConversationActivityItem.class.isInstance(sender)) {    ConversationActivityItem conversationActivityItem=(ConversationActivityItem)sender;switch (propertyId) {case ConversationActivityItem.STATUS_CHANGED_PROPERTY_ID:      this.chatItemPresenter.setStatus(conversationActivityItem.getStatus().toString());    break;case ConversationActivityItem.TIMESTAMP_CHANGED_PROPERTY_ID:  this.chatItemPresenter.setTimestamp(conversationActivityItem.getTimestamp().toString());break;default :}}if (Person.class.isInstance(sender)) {Person person=(Person)sender;switch (propertyId) {case Person.DISPLAYNAME_PROPERTY_ID:this.chatItemPresenter.setDisplayName(person.getDisplayName());break;case Person.SIPURI_PROPERTY_ID:break;default :}}}  }
class C{  protected void finalize(){  if (cmmProfile != null) {    CMSManager.getModule().freeProfile(cmmProfile);  } else   if (profileActivator != null) {    ProfileDeferralMgr.unregisterDeferral(profileActivator);  }}  }
class C{  @Bean(initMethod="start",destroyMethod="stop") @Profile(Constants.SPRING_PROFILE_DEVELOPMENT) public Server h2TCPServer() throws SQLException {  return Server.createTcpServer("-tcp","-tcpAllowOthers");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatareplacedataexceedslengthofdata.class,args);}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public static AsfHeader readHeader(final File file) throws IOException {  final InputStream stream=new FileInputStream(file);  final AsfHeader result=FULL_READER.read(Utils.readGUID(stream),stream,0);  stream.close();  return result;}  }
class C{  public CDATASection createCDATASection(String data) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public boolean acceptFirstLine(String firstLine){  if (firstlineMatcher == null)   return false;  return firstLine != null && firstlineMatcher.reset(firstLine).matches();}  }
class C{  public void propertyChange(PropertyChangeEvent e){  if (e.getSource() == splitPane) {    String changeName=e.getPropertyName();    if (changeName == JSplitPane.ORIENTATION_PROPERTY) {      orientation=splitPane.getOrientation();      resetLayoutManager();    } else     if (changeName == JSplitPane.CONTINUOUS_LAYOUT_PROPERTY) {      setContinuousLayout(splitPane.isContinuousLayout());      if (!isContinuousLayout()) {        if (nonContinuousLayoutDivider == null) {          setNonContinuousLayoutDivider(createDefaultNonContinuousLayoutDivider(),true);        } else         if (nonContinuousLayoutDivider.getParent() == null) {          setNonContinuousLayoutDivider(nonContinuousLayoutDivider,true);        }      }    } else     if (changeName == JSplitPane.DIVIDER_SIZE_PROPERTY) {      divider.setDividerSize(splitPane.getDividerSize());      dividerSize=divider.getDividerSize();      splitPane.revalidate();      splitPane.repaint();    }  }}  }
class C{  public static <K,V>Map<K,V> map(K key1,V value1,K key2,V value2,K key3,V value3){  return getInstance().mapInstance(key1,value1,key2,value2,key3,value3);}  }
class C{  private boolean isInteractionResponseExists(Message msg){  try {    return (InteractionManager.getInstance().getInteractionResponseElement(msg) != null);  } catch (  Exception e) {    IDPPUtils.debug.error("PPRequestHandler.isInteractionResponse" + "Exists: Exception while getting interaction response.",e);    return false;  }}  }
class C{  private static void test_getResourceAsStream(Configuration config) throws Exception {  createInstanceAndCallStaticMethod(config,"test.TestMethods","test_getResourceAsStream");}  }
class C{  public void removeAttribute(String name) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);}  }
class C{  public ASN1ValueCollection(int tagNumber,ASN1Type type){  super(tagNumber);  this.type=type;}  }
class C{  public static final byte[] toOctets(AttributeType type,String str){  final byte[] s=str.getBytes(StandardCharsets.UTF_8);  byte[] octets;  if (s.length > Attribute.MAX_ATTRIBUTE_VALUE_LENGTH) {    octets=new byte[Attribute.MAX_ATTRIBUTE_LENGTH];    octets[0]=(byte)type.getTypeCode();    octets[1]=(byte)Attribute.MAX_ATTRIBUTE_LENGTH;    System.arraycopy(s,0,octets,2,Attribute.MAX_ATTRIBUTE_VALUE_LENGTH);  } else {    octets=new byte[s.length + 2];    octets[0]=(byte)type.getTypeCode();    octets[1]=(byte)(s.length + 2);    System.arraycopy(s,0,octets,2,s.length);  }  return octets;}  }
class C{  public void isClearDegradedState(boolean isClearDegradedState){  this.isClearDegradedState=isClearDegradedState;}  }
class C{  public UtilProxySAMLAuthenticatorLookup(final IDPSSOFederateRequest data,final HttpServletRequest request,final HttpServletResponse response,final PrintWriter out){  this.data=data;  this.out=out;  this.request=request;  this.response=response;}  }
class C{  public static boolean isXML11NameHighSurrogate(int c){  return (0xD800 <= c && c <= 0xDB7F);}  }
class C{  public Object clone(){  ExtendedPKIXBuilderParameters params=null;  try {    params=new ExtendedPKIXBuilderParameters(getTrustAnchors(),getTargetConstraints());  } catch (  Exception e) {    throw new RuntimeException(e.getMessage());  }  params.setParams(this);  return params;}  }
class C{  public void log(Level level,String msg,Object param1){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msg);  Object params[]={param1};  lr.setParameters(params);  doLog(lr);}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.ReferenceType createReferenceType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.ReferenceTypeImpl();}  }
class C{  public void close() throws IOException {  if (!closed) {    finish();    if (usesDefaultDeflater)     def.end();    out.close();    closed=true;  }}  }
class C{  public com.sun.identity.liberty.ws.authnsvc.jaxb.PasswordTransformsElement createPasswordTransformsElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.authnsvc.jaxb.impl.PasswordTransformsElementImpl();}  }
class C{  public void releaseResources(){  Log.i(TAG,"releasing resources");  datatypeLookup.close();  filterLookup.close();  dbInstance.close();  instance=null;}  }
class C{  public static void deleteConfigSubtree(ConfigurationHandler confHandler,DN dn) throws OpenDsException, ConfigException {  Entry confEntry=confHandler.getEntry(dn);  if (confEntry != null) {    for (    DN childDN : new ArrayList<>(confHandler.getChildren(dn))) {      deleteConfigSubtree(confHandler,childDN);    }    confHandler.deleteEntry(dn);  }}  }
class C{  private final boolean shouldCollectText(){  return collectText[stackTop];}  }
class C{  protected DTD(String name){  this.name=name;  defEntity("#RE",GENERAL,'\r');  defEntity("#RS",GENERAL,'\n');  defEntity("#SPACE",GENERAL,' ');  defineElement("unknown",EMPTY,false,true,null,null,null,null);}  }
class C{  public void discardRecording(){  if (recorder != null) {    try {      recorder.stop();      recorder.release();      recorder=null;      if (file != null && file.exists() && !file.isDirectory()) {        file.delete();      }    } catch (    IllegalStateException e) {    }catch (    RuntimeException e) {    }    isRecording=false;  }}  }
class C{  public ServerSiteViewBean(){  super("ServerSite");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  createTableModel();  ptModel=new CCPageTitleModel(getClass().getClassLoader().getResourceAsStream("com/sun/identity/console/simplePageTitle.xml"));  registerChildren();}  }
class C{  public final void testDEFAULTsaltLen(){  assertEquals(20,PSSParameterSpec.DEFAULT.getSaltLength());}  }
class C{  @Override public String toString(){  return getClass().getSimpleName();}  }
class C{  public void readString(ASN1StringType type) throws IOException {  if (tag == type.id) {    readContent();  } else   if (tag == type.constrId) {    throw new ASN1Exception("Decoding constructed ASN.1 string type is not provided");  } else {    throw expected("string");  }}  }
class C{  public int hashCode(){  return (usesShift) ? (~key) : key;}  }
class C{  public void addNodeTest(PredicatedNodeTest test){  if (null == m_nodeTests) {    m_nodeTests=new PredicatedNodeTest[1];    m_nodeTests[0]=test;  } else {    PredicatedNodeTest[] tests=m_nodeTests;    int len=m_nodeTests.length;    m_nodeTests=new PredicatedNodeTest[len + 1];    System.arraycopy(tests,0,m_nodeTests,0,len);    m_nodeTests[len]=test;  }  test.exprSetParent(this);}  }
class C{  private void assertAddEntry(SearchResultEntry entry,String uid,String entryUUID,long changeNumber,CSN csn) throws Exception {  assertAttributeValue(entry,"changetype","add");  assertEntryMatchesLDIF(entry,"changes","objectClass: domain","objectClass: top","entryUUID: " + entryUUID);  assertEntryCommonAttributes(entry,uid,entryUUID,changeNumber,csn);}  }
class C{  public boolean isSSOTokenValid(){  try {    SMSEntry.validateToken(token);    return true;  } catch (  SMSException smse) {    debug.warning("ServiceSchemaManager: token is not valid.",smse);  }  return false;}  }
class C{  public void edit(File file) throws IOException {  checkAWTPermission();  checkExec();  checkActionSupport(Action.EDIT);  file.canWrite();  checkFileValidation(file);  peer.edit(file);}  }
class C{  static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {  try {    Class providerClass=findProviderClass(className,cl,doFallback);    Object instance=providerClass.newInstance();    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return instance;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  public BrokerReader(ReplicationBroker broker,int numMsgExpected){  this.broker=broker;  this.numMsgExpected=numMsgExpected;}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfString makeIndirect(PdfDocument document){  return (PdfString)super.makeIndirect(document);}  }
class C{  private static byte[] decode_base64(String s,int maxolen) throws IllegalArgumentException {  StringBuilder sb=new StringBuilder();  int off=0, slen=s.length(), olen=0;  byte ret[];  byte c1, c2, c3, c4, o;  if (maxolen <= 0) {    throw new IllegalArgumentException("Invalid maxolen");  }  while (off < slen - 1 && olen < maxolen) {    c1=char64(s.charAt(off++));    c2=char64(s.charAt(off++));    if (c1 == -1 || c2 == -1) {      break;    }    o=(byte)(c1 << 2);    o|=(c2 & 0x30) >> 4;    sb.append((char)o);    if (++olen >= maxolen || off >= slen) {      break;    }    c3=char64(s.charAt(off++));    if (c3 == -1) {      break;    }    o=(byte)((c2 & 0x0f) << 4);    o|=(c3 & 0x3c) >> 2;    sb.append((char)o);    if (++olen >= maxolen || off >= slen) {      break;    }    c4=char64(s.charAt(off++));    o=(byte)((c3 & 0x03) << 6);    o|=c4;    sb.append((char)o);    ++olen;  }  ret=new byte[olen];  for (off=0; off < olen; off++) {    ret[off]=(byte)sb.charAt(off);  }  return ret;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node createdNode;  Node childNode;  String childName;  int childType;  Node textNode;  java.util.List actual=new java.util.ArrayList();  java.util.List expected=new java.util.ArrayList();  expected.add("em");  expected.add("strong");  expected.add("code");  expected.add("sup");  expected.add("var");  expected.add("acronym");  expected.add("br");  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  createdNode=doc.createElement("br");  employeeNode=employeeNode.appendChild(createdNode);  for (int indexN10087=0; indexN10087 < childList.getLength(); indexN10087++) {    childNode=(Node)childList.item(indexN10087);    childName=childNode.getNodeName();    childType=(int)childNode.getNodeType();    if (equals(1,childType)) {      actual.add(childName);    } else {      assertEquals("textNodeType",3,childType);    }  }  assertEqualsAutoCase("element","childElements",expected,actual);}  }
class C{  public WaitForMetaData(String message){  super(message);}  }
class C{  public void testShiftRight2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=-27;  byte rBytes[]={12,1,-61,39,-11,-94,-55,106,-40,31,-119,24,-48,0,0,0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftRight(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private static boolean in_front_of_pad(PlaLineInt p_line,ShapeTile p_pad_shape,int p_from_side,int p_width,boolean p_with_sides){  if (!p_pad_shape.is_IntOctagon()) {    System.out.println(classname + "in_front_of_pad NOT IntOctagon");    return true;  }  ShapeTileOctagon pad_octagon=p_pad_shape.bounding_octagon();  PlaPointInt point_a=p_line.point_a;  PlaPointInt point_b=p_line.point_b;  double diag_width=p_width * Math.sqrt(2);  boolean result;switch (p_from_side) {case 0:    result=Math.min(point_a.v_y,point_b.v_y) >= pad_octagon.oct_uy + p_width || Math.max(point_a.v_x - point_a.v_y,point_b.v_x - point_b.v_y) <= pad_octagon.oct_ulx - diag_width || Math.min(point_a.v_x + point_a.v_y,point_b.v_x + point_b.v_x) >= pad_octagon.oct_urx + diag_width;  if (p_with_sides && !result) {    result=Math.max(point_a.v_x,point_b.v_x) <= pad_octagon.oct_lx - p_width && Math.min(point_a.v_x - point_a.v_y,point_b.v_x - point_b.v_y) <= pad_octagon.oct_ulx - diag_width || Math.min(point_a.v_x,point_b.v_x) >= pad_octagon.oct_rx + p_width && Math.min(point_a.v_x + point_a.v_y,point_b.v_x + point_b.v_y) >= pad_octagon.oct_urx + diag_width;  }break;case 1:result=Math.min(point_a.v_y,point_b.v_y) >= pad_octagon.oct_uy + p_width || Math.max(point_a.v_x - point_a.v_y,point_b.v_x - point_b.v_y) <= pad_octagon.oct_ulx - diag_width || Math.max(point_a.v_x,point_b.v_x) <= pad_octagon.oct_lx - p_width;if (p_with_sides && !result) {result=Math.min(point_a.v_x,point_b.v_x) <= pad_octagon.oct_lx - p_width && Math.max(point_a.v_x + point_a.v_y,point_b.v_x + point_b.v_y) <= pad_octagon.oct_llx - diag_width || Math.max(point_a.v_y,point_b.v_y) >= pad_octagon.oct_uy + p_width && Math.min(point_a.v_x + point_a.v_y,point_b.v_x + point_b.v_y) >= pad_octagon.oct_urx + diag_width;}break;case 2:result=Math.max(point_a.v_x,point_b.v_x) <= pad_octagon.oct_lx - p_width || Math.max(point_a.v_x - point_a.v_y,point_b.v_x - point_b.v_y) <= pad_octagon.oct_ulx - diag_width || Math.max(point_a.v_x + point_a.v_y,point_b.v_x + point_b.v_y) <= pad_octagon.oct_llx - diag_width;if (p_with_sides && !result) {result=Math.max(point_a.v_y,point_b.v_y) <= pad_octagon.oct_ly - p_width && Math.min(point_a.v_x + point_a.v_y,point_b.v_x + point_b.v_y) <= pad_octagon.oct_llx - diag_width || Math.min(point_a.v_y,point_b.v_y) >= pad_octagon.oct_uy + p_width && Math.min(point_a.v_x - point_a.v_y,point_b.v_x - point_b.v_y) <= pad_octagon.oct_ulx - diag_width;}break;case 3:result=Math.max(point_a.v_x,point_b.v_x) <= pad_octagon.oct_lx - p_width || Math.max(point_a.v_y,point_b.v_y) <= pad_octagon.oct_ly - p_width || Math.max(point_a.v_x + point_a.v_y,point_b.v_x + point_b.v_y) <= pad_octagon.oct_llx - diag_width;if (p_with_sides && !result) {result=Math.min(point_a.v_y,point_b.v_y) <= pad_octagon.oct_ly - p_width && Math.min(point_a.v_x - point_a.v_y,point_b.v_x - point_b.v_y) >= pad_octagon.oct_lrx + diag_width || Math.min(point_a.v_x,point_b.v_x) <= pad_octagon.oct_lx - p_width && Math.max(point_a.v_x - point_a.v_y,point_b.v_x - point_b.v_y) <= pad_octagon.oct_ulx - diag_width;}break;case 4:result=Math.max(point_a.v_y,point_b.v_y) <= pad_octagon.oct_ly - p_width || Math.max(point_a.v_x + point_a.v_y,point_b.v_x + point_b.v_y) <= pad_octagon.oct_llx - diag_width || Math.min(point_a.v_x - point_a.v_y,point_b.v_x - point_b.v_y) >= pad_octagon.oct_lrx + diag_width;if (p_with_sides && !result) {result=Math.min(point_a.v_x,point_b.v_x) >= pad_octagon.oct_rx + p_width && Math.max(point_a.v_x - point_a.v_y,point_b.v_x - point_b.v_y) >= pad_octagon.oct_lrx + diag_width || Math.max(point_a.v_x,point_b.v_x) <= pad_octagon.oct_lx - p_width && Math.min(point_a.v_x + point_a.v_y,point_b.v_x + point_b.v_y) <= pad_octagon.oct_llx - diag_width;}break;case 5:result=Math.max(point_a.v_y,point_b.v_y) <= pad_octagon.oct_ly - p_width || Math.min(point_a.v_x,point_b.v_x) >= pad_octagon.oct_rx + p_width || Math.min(point_a.v_x - point_a.v_y,point_b.v_x - point_b.v_y) >= pad_octagon.oct_lrx + diag_width;if (p_with_sides && !result) {result=Math.max(point_a.v_x,point_b.v_x) >= pad_octagon.oct_rx + p_width && Math.min(point_a.v_x + point_a.v_y,point_b.v_x + point_b.v_y) >= pad_octagon.oct_urx + diag_width || Math.min(point_a.v_y,point_b.v_y) <= pad_octagon.oct_ly - p_width && Math.max(point_a.v_x + point_a.v_y,point_b.v_x + point_b.v_y) <= pad_octagon.oct_llx - diag_width;}break;case 6:result=Math.min(point_a.v_x,point_b.v_x) >= pad_octagon.oct_rx + p_width || Math.min(point_a.v_x + point_a.v_y,point_b.v_x + point_b.v_y) >= pad_octagon.oct_urx + diag_width || Math.min(point_a.v_x - point_a.v_y,point_b.v_x - point_b.v_y) >= pad_octagon.oct_lrx + diag_width;if (p_with_sides && !result) {result=Math.max(point_a.v_y,point_b.v_y) <= pad_octagon.oct_ly - p_width && Math.max(point_a.v_x - point_a.v_y,point_b.v_x - point_b.v_y) >= pad_octagon.oct_lrx + diag_width || Math.min(point_a.v_y,point_b.v_y) >= pad_octagon.oct_uy + p_width && Math.max(point_a.v_x + point_a.v_y,point_b.v_x + point_b.v_y) >= pad_octagon.oct_urx + diag_width;}break;case 7:result=Math.min(point_a.v_y,point_b.v_y) >= pad_octagon.oct_uy + p_width || Math.min(point_a.v_x + point_a.v_y,point_b.v_x + point_b.v_y) >= pad_octagon.oct_urx + diag_width || Math.min(point_a.v_x,point_b.v_x) >= pad_octagon.oct_rx + p_width;if (p_with_sides && !result) {result=Math.max(point_a.v_y,point_b.v_y) >= pad_octagon.oct_uy + p_width && Math.max(point_a.v_x - point_a.v_y,point_b.v_x - point_b.v_y) <= pad_octagon.oct_ulx - diag_width || Math.max(point_a.v_x,point_b.v_x) >= pad_octagon.oct_rx + p_width && Math.min(point_a.v_x - point_a.v_y,point_b.v_x - point_b.v_y) >= pad_octagon.oct_lrx + diag_width;}break;default :{System.out.println("ForcedPadAlgo.in_front_of_pad: p_from_side out of range");result=true;}}return result;}  }
class C{  @Override public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  if ((signature != null) && (signedXMLString != null)) {    return signedXMLString;  }  StringBuffer sb=new StringBuffer(2000);  String NS="";  String appendNS="";  if (declareNS) {    NS=SAML2Constants.ASSERTION_DECLARE_STR;  }  if (includeNSPrefix) {    appendNS=SAML2Constants.ASSERTION_PREFIX;  }  sb.append("<").append(appendNS).append(ASSERTION_ELEMENT).append(NS);  if ((version == null) || (version.length() == 0)) {    SAML2SDKUtils.debug.error("AssertionImpl.toXMLString(): version missing");    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("missing_assertion_version"));  }  sb.append(" ").append(ASSERTION_VERSION_ATTR).append("=\"").append(version).append("\"");  if ((id == null) || (id.length() == 0)) {    SAML2SDKUtils.debug.error("AssertionImpl.toXMLString(): assertion id missing");    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("missing_assertion_id"));  }  sb.append(" ").append(ASSERTION_ID_ATTR).append("=\"").append(id).append("\"");  if (issueInstant == null) {    SAML2SDKUtils.debug.error("AssertionImpl.toXMLString(): issue instant missing");    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("missing_issue_instant"));  }  String instantStr=DateUtils.toUTCDateFormat(issueInstant);  sb.append(" ").append(ASSERTION_ISSUEINSTANT_ATTR).append("=\"").append(instantStr).append("\"").append(">\n");  if (issuer == null) {    SAML2SDKUtils.debug.error("AssertionImpl.toXMLString(): issuer missing");    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("missing_subelement_issuer"));  }  sb.append(issuer.toXMLString(includeNSPrefix,false));  if (signature != null) {    sb.append(signature);  }  if (subject != null) {    sb.append(subject.toXMLString(includeNSPrefix,false));  }  if (conditions != null) {    sb.append(conditions.toXMLString(includeNSPrefix,false));  }  if (advice != null) {    sb.append(advice.toXMLString(includeNSPrefix,false));  }  int length=0;  if (statements != null) {    length=statements.size();    for (int i=0; i < length; i++) {      String str=(String)statements.get(i);      sb.append(str);    }  }  if (authnStatements != null) {    length=authnStatements.size();    for (int i=0; i < length; i++) {      AuthnStatement st=(AuthnStatement)authnStatements.get(i);      sb.append(st.toXMLString(includeNSPrefix,false));    }  }  if (authzDecisionStatements != null) {    length=authzDecisionStatements.size();    for (int i=0; i < length; i++) {      AuthzDecisionStatement st=(AuthzDecisionStatement)authzDecisionStatements.get(i);      sb.append(st.toXMLString(includeNSPrefix,false));    }  }  if (attributeStatements != null) {    length=attributeStatements.size();    for (int i=0; i < length; i++) {      AttributeStatement st=(AttributeStatement)attributeStatements.get(i);      sb.append(st.toXMLString(includeNSPrefix,false));    }  }  sb.append("</").append(appendNS).append(ASSERTION_ELEMENT).append(">\n");  return sb.toString();}  }
class C{  public BAD_PARAM(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  final boolean transferAfterCancelledWait(Node node){  if (compareAndSetWaitStatus(node,Node.CONDITION,0)) {    enq(node);    return true;  }  while (!isOnSyncQueue(node))   Thread.yield();  return false;}  }
class C{  @Override public void removeTransformer(ClassFileTransformer transformer){  if (transformer == null) {    return;  }  if (this.transformers.remove(transformer)) {    log.info(sm.getString("webappClassLoader.removeTransformer",transformer,getContextName()));    return;  }}  }
class C{  public void waitForShutdown(){  try {    join(2000);  } catch (  InterruptedException e) {  }}  }
class C{  public int size(){  return parameters.size();}  }
class C{  public GroupManager(ServerContext serverContext) throws DirectoryException {  super(DN.valueOf(CONFIG_DN),EnumSet.of(PluginType.POST_OPERATION_ADD,PluginType.POST_OPERATION_DELETE,PluginType.POST_OPERATION_MODIFY,PluginType.POST_OPERATION_MODIFY_DN,PluginType.POST_SYNCHRONIZATION_ADD,PluginType.POST_SYNCHRONIZATION_DELETE,PluginType.POST_SYNCHRONIZATION_MODIFY,PluginType.POST_SYNCHRONIZATION_MODIFY_DN),true);  this.serverContext=serverContext;  groupImplementations=new ConcurrentHashMap<>();  groupInstances=new DITCacheMap<>();  lock=new ReentrantReadWriteLock();  DirectoryServer.registerInternalPlugin(this);  DirectoryServer.registerBackendInitializationListener(this);}  }
class C{  private static void replaceCurrencyData(Pattern pattern,String ctry,String curdata){  if (ctry.length() != 2) {    info("currency.properties entry for " + ctry + " is ignored because of the invalid country code.",null);    return;  }  Matcher m=pattern.matcher(curdata);  if (!m.find() || (m.group(4) == null && countOccurrences(curdata,',') >= 3)) {    info("currency.properties entry for " + ctry + " ignored because the value format is not recognized.",null);    return;  }  try {    if (m.group(4) != null && !isPastCutoverDate(m.group(4))) {      info("currency.properties entry for " + ctry + " ignored since cutover date has not passed :"+ curdata,null);      return;    }  } catch (  ParseException ex) {    info("currency.properties entry for " + ctry + " ignored since exception encountered :"+ ex.getMessage(),null);    return;  }  String code=m.group(1);  int numeric=Integer.parseInt(m.group(2));  int entry=numeric << NUMERIC_CODE_SHIFT;  int fraction=Integer.parseInt(m.group(3));  if (fraction > SIMPLE_CASE_COUNTRY_MAX_DEFAULT_DIGITS) {    info("currency.properties entry for " + ctry + " ignored since the fraction is more than "+ SIMPLE_CASE_COUNTRY_MAX_DEFAULT_DIGITS+ ":"+ curdata,null);    return;  }  int index;  for (index=0; index < scOldCurrencies.length; index++) {    if (scOldCurrencies[index].equals(code)) {      break;    }  }  if (index == scOldCurrencies.length) {    entry|=(fraction << SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_SHIFT) | (code.charAt(2) - 'A');  } else {    entry|=SPECIAL_CASE_COUNTRY_MASK | (index + SPECIAL_CASE_COUNTRY_INDEX_DELTA);  }  setMainTableEntry(ctry.charAt(0),ctry.charAt(1),entry);}  }
class C{  @Action(name="stop",operationDescription=@Operation(errors={@ApiError(code=400,description=RECORD_RESOURCE + ERROR_400_DESCRIPTION)},description=RECORD_RESOURCE + "operation.stop.description"),response=@Schema(schemaResource="RecordStatus.schema.json")) public Promise<ActionResponse,ResourceException> actionStop(Context serverContext,ActionRequest actionRequest){  try {    Record record=debugRecorder.stopRecording();    if (record == null) {      return new BadRequestException("No record or it's already stopped.").asPromise();    } else {      JsonObject result=JsonValueBuilder.jsonValue();      result.put(STATUS_LABEL,false);      result.put(RECORD_LABEL,record.exportJson().asMap());      return newResultPromise(newActionResponse(result.build()));    }  } catch (  RecordException e) {    debug.message("Record can't be stopped.",e);    return new BadRequestException("Record can't be stopped.",e).asPromise();  }}  }
class C{  @Override public boolean containsValue(Object value){  HashMapEntry[] tab=table;  int len=tab.length;  if (value == null) {    for (int i=0; i < len; i++) {      for (HashMapEntry e=tab[i]; e != null; e=e.next) {        if (e.value == null) {          return true;        }      }    }    return entryForNullKey != null && entryForNullKey.value == null;  }  for (int i=0; i < len; i++) {    for (HashMapEntry e=tab[i]; e != null; e=e.next) {      if (value.equals(e.value)) {        return true;      }    }  }  return entryForNullKey != null && value.equals(entryForNullKey.value);}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  String xmlElementStr=null;  if ((getCompleteURI != null) && (getCompleteURI.length() > 0)) {    StringBuffer xmlString=new StringBuffer(100);    xmlString.append(SAML2Constants.START_TAG);    if (includeNSPrefix) {      xmlString.append(SAML2Constants.PROTOCOL_PREFIX);    }    xmlString.append(SAML2Constants.GETCOMPLETE);    if (declareNS) {      xmlString.append(SAML2Constants.PROTOCOL_DECLARE_STR);    }    xmlString.append(SAML2Constants.END_TAG).append(SAML2Constants.NEWLINE).append(getCompleteURI).append(SAML2Constants.NEWLINE).append(SAML2Constants.SAML2_END_TAG).append(SAML2Constants.GETCOMPLETE).append(SAML2Constants.END_TAG);    xmlElementStr=xmlString.toString();  }  return xmlElementStr;}  }
class C{  int convertToDigit(char ch){  int val=ch - zeroDigit;  return (val >= 0 && val <= 9) ? val : -1;}  }
class C{  public AciException(LocalizableMessage message,Throwable cause){  super(message,cause);}  }
class C{  boolean removeMapping(Object o){  if (!(o instanceof Map.Entry))   return false;  Entry<K,V>[] tab=getTable();  Map.Entry<?,?> entry=(Map.Entry<?,?>)o;  Object k=maskNull(entry.getKey());  int h=hash(k);  int i=indexFor(h,tab.length);  Entry<K,V> prev=tab[i];  Entry<K,V> e=prev;  while (e != null) {    Entry<K,V> next=e.next;    if (h == e.hash && e.equals(entry)) {      modCount++;      size--;      if (prev == e)       tab[i]=next; else       prev.next=next;      return true;    }    prev=e;    e=next;  }  return false;}  }
class C{  public void start_adding_hole(Point2D p_point){  if (board_is_read_only)   return;  PlaPointFloat location=gdi_context.coordinate_transform.screen_to_board(p_point);  StateInteractive new_state=StateConstructHole.get_instance(location,interactive_state,this,actlog);  set_interactive_state(new_state);}  }
class C{  public String toLDAPDate(Calendar calendar){  return GeneralizedTime.valueOf(calendar).toString();}  }
class C{  public boolean isInStep(Position position,RouteLeg route,int stepIndex) throws ServicesException, TurfException {  double distance=getDistanceToStep(position,route,stepIndex);  return (distance <= offRouteThresholdKm);}  }
class C{  public Cursor fetch(long id){  Cursor mCursor=database.query(true,DATABASE_TABLE,KEYS,KEY_ID + "=" + id,null,null,null,null,null);  if (mCursor != null) {    mCursor.moveToFirst();  }  return mCursor;}  }
class C{  public URL createServerURL(URL server,String path) throws MalformedURLException {  return new URL(server.getProtocol(),server.getHost(),server.getPort(),localServerDeploymentPath + "/" + path);}  }
class C{  public void storeArg(final int arg){  storeInsn(argumentTypes[arg],getArgIndex(arg));}  }
class C{  public StateInteractive left_button_clicked(PlaPointFloat p_location){  super.left_button_clicked(p_location);  remove_concave_corners();  i_brd.repaint();  return this;}  }
class C{  @Override public int doStartTag() throws JspException {  return SKIP_BODY;}  }
class C{  public PartialToken(Map<CoreTokenField,Object> entry){  Reject.ifNull(entry);  this.entry=entry;}  }
class C{  protected String[] args(String... arguments){  return arguments;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  populateValues=true;  repopulateMechID();  forwardTo();}  }
class C{  public NoPermissionException(){  super();}  }
class C{  public void makeImmutable(){  if (isMutable) {    if (conditions != null) {      int length=conditions.size();      for (int i=0; i < length; i++) {        Condition condition=(Condition)conditions.get(i);        condition.makeImmutable();      }      conditions=Collections.unmodifiableList(conditions);    }    if (audienceRestrictions != null) {      int length=audienceRestrictions.size();      for (int i=0; i < length; i++) {        AudienceRestriction ar=(AudienceRestriction)audienceRestrictions.get(i);        ar.makeImmutable();      }      audienceRestrictions=Collections.unmodifiableList(audienceRestrictions);    }    if (oneTimeUses != null) {      int length=oneTimeUses.size();      for (int i=0; i < length; i++) {        OneTimeUse oneTimeUse=(OneTimeUse)oneTimeUses.get(i);        oneTimeUse.makeImmutable();      }      oneTimeUses=Collections.unmodifiableList(oneTimeUses);    }    if (proxyRestrictions != null) {      int length=proxyRestrictions.size();      for (int i=0; i < length; i++) {        ProxyRestriction pr=(ProxyRestriction)proxyRestrictions.get(i);        pr.makeImmutable();      }      proxyRestrictions=Collections.unmodifiableList(proxyRestrictions);    }    isMutable=false;  }}  }
class C{  private void updateReplicas(ServerDescriptor replicationServer,Collection<ReplicaDescriptor> candidateReplicas,Collection<ReplicaDescriptor> updatedReplicas) throws IOException {  ServerLoader loader=getServerLoader(replicationServer.getAdsProperties());  SearchRequest request=newSearchRequest("cn=monitor",WHOLE_SUBTREE,"(&(missing-changes=*)(server-id=*))","domain-name","server-id","missing-changes","approx-older-change-not-synchronized-millis");  try (ConnectionWrapper conn=loader.createConnectionWrapper();ConnectionEntryReader entryReader=conn.getConnection().search(request)){    while (entryReader.hasNext()) {      SearchResultEntry sr=entryReader.readEntry();      final DN dn=DN.valueOf(firstValueAsString(sr,"domain-name"));      int replicaId=-1;      try {        replicaId=sr.getAttribute("server-id").parse().asInteger();      } catch (      Throwable t) {        logger.warn(LocalizableMessage.raw("Unexpected error reading replica ID: " + t,t));      }      for (      ReplicaDescriptor replica : candidateReplicas) {        if (replica.isReplicated() && dn.equals(replica.getSuffix().getDN()) && replica.getServerId() == replicaId) {          setAgeOfOldestMissingChange(replica,sr);          setMissingChanges(replica,sr);          updatedReplicas.add(replica);          break;        }      }    }  } catch (  EntryNotFoundException ignored) {  }}  }
class C{  public void testCertificateFactory07(){  if (!X509Support) {    fail(NotSupportMsg);    return;  }  try {    CertificateFactory.getInstance(null,defaultProvider);    fail("NullPointerException or CertificateException must be thrown when type is null");  } catch (  CertificateException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertificateFactory.getInstance(invalidValues[i],defaultProvider);      fail("CertificateException was not thrown as expected (type:".concat(invalidValues[i]).concat(" provider: ").concat(defaultProvider.getName()).concat(")"));    } catch (    CertificateException e) {    }  }}  }
class C{  public boolean retainAll(Collection<?> c){  if (!(c instanceof RegularEnumSet))   return super.retainAll(c);  RegularEnumSet<?> es=(RegularEnumSet<?>)c;  if (es.elementType != elementType) {    boolean changed=(elements != 0);    elements=0;    return changed;  }  long oldElements=elements;  elements&=es.elements;  return elements != oldElements;}  }
class C{  public void testCompareGreaterScale2(){  String a="12380964839238475457356735674573563567890295784902768787678287";  int aScale=48;  String b="4573563567890295784902768787678287";  int bScale=2;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  int result=-1;  assertEquals("incorrect result",result,aNumber.compareTo(bNumber));}  }
class C{  public void error(SAXParseException e) throws SAXException {}  }
class C{  public void removeDisallowedString(final String string){  disallowedStrings.remove(string.toLowerCase());}  }
class C{  public void addBrowserEventListener(BrowserEventListener l){  listeners.add(l);}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.validation.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new LSDocumentBuilderFactory(JAXPDOMTestDocumentBuilderFactory.getConfiguration2());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  public SyncFailureHandler create(JsonValue config) throws Exception {  if (null == config || config.isNull()) {    return InfiniteRetrySyncFailureHandler.INSTANCE;  }  JsonValue maxRetries=config.get(CONFIG_MAX_RETRIES);  JsonValue postRetry=config.get(CONFING_POST_RETRY);  if (maxRetries.isNull() || maxRetries.asInteger() < 0) {    return InfiniteRetrySyncFailureHandler.INSTANCE;  } else   if (maxRetries.asInteger() == 0) {    return getPostRetryHandler(postRetry);  } else {    return new SimpleRetrySyncFailureHandler(maxRetries.asInteger(),getPostRetryHandler(postRetry));  }}  }
class C{  public AccessibleJTableHeaderEntry(int c,JTableHeader p,JTable t){  parent=p;  column=c;  table=t;  this.setAccessibleParent(parent);}  }
class C{  public AnnotationVisitor visitLocalVariableAnnotation(int typeRef,TypePath typePath,Label[] start,Label[] end,int[] index,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitLocalVariableAnnotation(typeRef,typePath,start,end,index,desc,visible);  }  return null;}  }
class C{  public Set createSubGroupContainers(Map groupContainersMap) throws AMException, SSOException {  Iterator iter=groupContainersMap.keySet().iterator();  Set groupContainers=new HashSet();  while (iter.hasNext()) {    String groupContainerName=(String)iter.next();    String groupContainerDN=AMNamingAttrManager.getNamingAttr(GROUP_CONTAINER) + "=" + groupContainerName+ ","+ entryDN;    Map attributes=(Map)groupContainersMap.get(groupContainerName);    AMGroupContainerImpl groupContainerImpl=new AMGroupContainerImpl(token,groupContainerDN);    groupContainerImpl.setAttributes(attributes);    groupContainerImpl.create();    groupContainers.add(groupContainerImpl);  }  return groupContainers;}  }
class C{  public static Timestamp valueOf(String s){  final int YEAR_LENGTH=4;  final int MONTH_LENGTH=2;  final int DAY_LENGTH=2;  final int MAX_MONTH=12;  final int MAX_DAY=31;  String date_s;  String time_s;  String nanos_s;  int year=0;  int month=0;  int day=0;  int hour;  int minute;  int second;  int a_nanos=0;  int firstDash;  int secondDash;  int dividingSpace;  int firstColon=0;  int secondColon=0;  int period=0;  String formatError="Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]";  String zeros="000000000";  String delimiterDate="-";  String delimiterTime=":";  if (s == null)   throw new java.lang.IllegalArgumentException("null string");  s=s.trim();  dividingSpace=s.indexOf(' ');  if (dividingSpace > 0) {    date_s=s.substring(0,dividingSpace);    time_s=s.substring(dividingSpace + 1);  } else {    throw new java.lang.IllegalArgumentException(formatError);  }  firstDash=date_s.indexOf('-');  secondDash=date_s.indexOf('-',firstDash + 1);  if (time_s == null)   throw new java.lang.IllegalArgumentException(formatError);  firstColon=time_s.indexOf(':');  secondColon=time_s.indexOf(':',firstColon + 1);  period=time_s.indexOf('.',secondColon + 1);  boolean parsedDate=false;  if ((firstDash > 0) && (secondDash > 0) && (secondDash < date_s.length() - 1)) {    String yyyy=date_s.substring(0,firstDash);    String mm=date_s.substring(firstDash + 1,secondDash);    String dd=date_s.substring(secondDash + 1);    if (yyyy.length() == YEAR_LENGTH && (mm.length() >= 1 && mm.length() <= MONTH_LENGTH) && (dd.length() >= 1 && dd.length() <= DAY_LENGTH)) {      year=Integer.parseInt(yyyy);      month=Integer.parseInt(mm);      day=Integer.parseInt(dd);      if ((month >= 1 && month <= MAX_MONTH) && (day >= 1 && day <= MAX_DAY)) {        parsedDate=true;      }    }  }  if (!parsedDate) {    throw new java.lang.IllegalArgumentException(formatError);  }  if ((firstColon > 0) & (secondColon > 0) & (secondColon < time_s.length() - 1)) {    hour=Integer.parseInt(time_s.substring(0,firstColon));    minute=Integer.parseInt(time_s.substring(firstColon + 1,secondColon));    if ((period > 0) & (period < time_s.length() - 1)) {      second=Integer.parseInt(time_s.substring(secondColon + 1,period));      nanos_s=time_s.substring(period + 1);      if (nanos_s.length() > 9)       throw new java.lang.IllegalArgumentException(formatError);      if (!Character.isDigit(nanos_s.charAt(0)))       throw new java.lang.IllegalArgumentException(formatError);      nanos_s=nanos_s + zeros.substring(0,9 - nanos_s.length());      a_nanos=Integer.parseInt(nanos_s);    } else     if (period > 0) {      throw new java.lang.IllegalArgumentException(formatError);    } else {      second=Integer.parseInt(time_s.substring(secondColon + 1));    }  } else {    throw new java.lang.IllegalArgumentException(formatError);  }  return new Timestamp(year - 1900,month - 1,day,hour,minute,second,a_nanos);}  }
class C{  public static Foo fetchByUuid_C_First(java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByUuid_C_First(uuid,companyId,orderByComparator);}  }
class C{  public static void main(String[] args){  new UninstallLauncher(args).launch();}  }
class C{  public static String expandVariables(final String s){  return expandVariables(s,true);}  }
class C{  protected String generateNonce(){  byte random[]=new byte[16];  StringBuilder buffer=new StringBuilder();  randomSource.nextBytes(random);  for (int j=0; j < random.length; j++) {    byte b1=(byte)((random[j] & 0xf0) >> 4);    byte b2=(byte)(random[j] & 0x0f);    if (b1 < 10) {      buffer.append((char)('0' + b1));    } else {      buffer.append((char)('A' + (b1 - 10)));    }    if (b2 < 10) {      buffer.append((char)('0' + b2));    } else {      buffer.append((char)('A' + (b2 - 10)));    }  }  return buffer.toString();}  }
class C{  public SessionID(String sid){  encryptedString=sid;}  }
class C{  public void addArgument(final Argument argument) throws ArgumentException {  addArgument(argument,null);}  }
class C{  public void unsetTiling(){  if (!canWriteTiles()) {    throw new UnsupportedOperationException("Tiling not supported!");  }  if (getTilingMode() != MODE_EXPLICIT) {    throw new IllegalStateException("Tiling mode not MODE_EXPLICIT!");  }  this.tilingSet=false;  this.tileWidth=0;  this.tileHeight=0;  this.tileGridXOffset=0;  this.tileGridYOffset=0;}  }
class C{  public void clearCoRoutine(){  clearCoRoutine(true);}  }
class C{  public Phaser(int parties){  this(null,parties);}  }
class C{  private boolean crossCheckDiagonal(int startI,int centerJ,int maxCount,int originalStateCountTotal){  int[] stateCount=getCrossCheckStateCount();  int i=0;  while (startI >= i && centerJ >= i && image.get(centerJ - i,startI - i)) {    stateCount[2]++;    i++;  }  if (startI < i || centerJ < i) {    return false;  }  while (startI >= i && centerJ >= i && !image.get(centerJ - i,startI - i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i++;  }  if (startI < i || centerJ < i || stateCount[1] > maxCount) {    return false;  }  while (startI >= i && centerJ >= i && image.get(centerJ - i,startI - i) && stateCount[0] <= maxCount) {    stateCount[0]++;    i++;  }  if (stateCount[0] > maxCount) {    return false;  }  int maxI=image.getHeight();  int maxJ=image.getWidth();  i=1;  while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i,startI + i)) {    stateCount[2]++;    i++;  }  if (startI + i >= maxI || centerJ + i >= maxJ) {    return false;  }  while (startI + i < maxI && centerJ + i < maxJ && !image.get(centerJ + i,startI + i) && stateCount[3] < maxCount) {    stateCount[3]++;    i++;  }  if (startI + i >= maxI || centerJ + i >= maxJ || stateCount[3] >= maxCount) {    return false;  }  while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i,startI + i) && stateCount[4] < maxCount) {    stateCount[4]++;    i++;  }  if (stateCount[4] >= maxCount) {    return false;  }  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2]+ stateCount[3]+ stateCount[4];  return Math.abs(stateCountTotal - originalStateCountTotal) < 2 * originalStateCountTotal && foundPatternCross(stateCount);}  }
class C{  public SoapSTSServerCryptoStateBuilder signatureKeyAlias(String signatureKeyAlias){  this.signatureKeyAlias=signatureKeyAlias;  return this;}  }
class C{  public void testmodInversePos2(){  byte aBytes[]={15,24,123,56,-11,-112,-34,-98,8,10,12,14,25,125,-15,28,-127};  byte mBytes[]={2,122,45,36,100};  int aSign=1;  int mSign=1;  byte rBytes[]={1,-93,40,127,73};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger modulus=new BigInteger(mSign,mBytes);  BigInteger result=aNumber.modInverse(modulus);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private void removeChildElement(XMLElement child) throws Exception {  boolean removed=false;  ArrayList childElements=getChildElements();  if (childElements != null && childElements.size() > 0) {    int childStartTokenIndex=child.getStartToken().getTokenIndex();    Iterator it=childElements.iterator();    while (it.hasNext()) {      XMLElement nextChild=(XMLElement)it.next();      if (nextChild.getStartToken().getTokenIndex() == childStartTokenIndex) {        it.remove();        removed=true;        break;      }    }  }  if (!removed) {    throw new Exception("Failed to remove child element: " + child + " from: "+ this);  }}  }
class C{  private StringManager(String packageName){  String bundleName=packageName + ".LocalStrings";  ResourceBundle tempBundle=null;  try {    tempBundle=ResourceBundle.getBundle(bundleName,Locale.getDefault());  } catch (  MissingResourceException ex) {    ClassLoader cl=Thread.currentThread().getContextClassLoader();    if (cl != null) {      try {        tempBundle=ResourceBundle.getBundle(bundleName,Locale.getDefault(),cl);      } catch (      MissingResourceException ex2) {      }    }  }  if (tempBundle != null) {    locale=tempBundle.getLocale();  } else {    locale=null;  }  bundle=tempBundle;}  }
class C{  public boolean isMultiSelect(){  return getFieldFlag(FF_MULTI_SELECT);}  }
class C{  private static boolean nonEmptyIntersection(String[] a,String[] b){  if (a == null || b == null || a.length == 0 || b.length == 0) {    return false;  }  for (  String toFind : a) {    if (contains(b,toFind)) {      return true;    }  }  return false;}  }
class C{  private SubMap<K,V> newSubMap(K fromKey,boolean fromInclusive,K toKey,boolean toInclusive){  if (isDescending) {    K tk=fromKey;    fromKey=toKey;    toKey=tk;    boolean ti=fromInclusive;    fromInclusive=toInclusive;    toInclusive=ti;  }  if (lo != null) {    if (fromKey == null) {      fromKey=lo;      fromInclusive=loInclusive;    } else {      int c=m.compare(fromKey,lo);      if (c < 0 || (c == 0 && !loInclusive && fromInclusive))       throw new IllegalArgumentException("key out of range");    }  }  if (hi != null) {    if (toKey == null) {      toKey=hi;      toInclusive=hiInclusive;    } else {      int c=m.compare(toKey,hi);      if (c > 0 || (c == 0 && !hiInclusive && toInclusive))       throw new IllegalArgumentException("key out of range");    }  }  return new SubMap<K,V>(m,fromKey,fromInclusive,toKey,toInclusive,isDescending);}  }
class C{  public int hashCode(){  return selectedRoleDNs.hashCode();}  }
class C{  public IdentityHashMap(int maxSize){  if (maxSize < 0) {    throw new IllegalArgumentException("maxSize < 0: " + maxSize);  }  size=0;  threshold=getThreshold(maxSize);  elementData=newElementArray(computeElementArraySize());}  }
class C{  public void endDocument() throws SAXException {  flushPending();  m_saxHandler.endDocument();  if (m_tracer != null)   super.fireEndDoc();}  }
class C{  public boolean equals(Object obj){  if (obj instanceof ActivationGroupDesc) {    ActivationGroupDesc desc=(ActivationGroupDesc)obj;    return ((className == null ? desc.className == null : className.equals(desc.className)) && (location == null ? desc.location == null : location.equals(desc.location)) && (data == null ? desc.data == null : data.equals(desc.data))&& (env == null ? desc.env == null : env.equals(desc.env))&& (props == null ? desc.props == null : props.equals(desc.props)));  } else {    return false;  }}  }
class C{  public void testCompareToNegNeg1(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=-1;  int bSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  assertEquals(-1,aNumber.compareTo(bNumber));}  }
class C{  public static int computeDecreaseStation(int station){  int result=station - STEP;  if (result < LOWEST_STATION) {    result=HIGHEST_STATION;  }  return result;}  }
class C{  public XMLSignatureException(String message,Throwable cause){  super(message);  this.cause=cause;}  }
class C{  @Override public boolean isShow(HttpServletRequest request) throws PortalException {  return true;}  }
class C{  protected void installListeners(){  mouseInputListener=createMouseInputListener();  header.addMouseListener(mouseInputListener);  header.addMouseMotionListener(mouseInputListener);  header.addFocusListener(focusListener);}  }
class C{  public static Map<String,byte[]> process(Map<String,ClassNode> nodes,Map<String,MappedClass> mappings,boolean useMaxs){  Map<String,byte[]> out=new HashMap<String,byte[]>();  SkidRemapper mapper=new SkidRemapper(mappings);  try {    for (    ClassNode cn : nodes.values()) {      ClassWriter cw=new MappingClassWriter(mappings,useMaxs ? ClassWriter.COMPUTE_MAXS : ClassWriter.COMPUTE_FRAMES);      ClassVisitor remapper=new ClassRemapper(cw,mapper);      cn.accept(remapper);      out.put(mappings.containsKey(cn.name) ? mappings.get(cn.name).getNewName() : cn.name,cw.toByteArray());    }  } catch (  Exception e) {    e.printStackTrace();  }  return out;}  }
class C{  @Override public void execute() throws BuildException {  super.execute();  execute(createQueryString("/sessions").toString());}  }
class C{  private MBeanAttributeInfo[] nonNullAttributes(){  return (attributes == null) ? MBeanAttributeInfo.NO_ATTRIBUTES : attributes;}  }
class C{  public Door(final TreeSpecies species,BlockFace face,boolean isOpen){  this(getWoodDoorOfSpecies(species),face,isOpen);}  }
class C{  public boolean delete(long id){  return database.delete(DATABASE_TABLE,KEY_ID + "=" + id,null) > 0;}  }
class C{  public void adjustJulLevel(){  julToSlf4jManager.adjustJulLevel();}  }
class C{  public boolean isRequired(){  return getFieldFlag(FF_REQUIRED);}  }
class C{  public void test_getCharLjava_lang_ObjectI(){  char[] x={1};  char ret=0;  boolean thrown=false;  try {    ret=Array.getChar(x,0);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,ret);  try {    ret=Array.getChar(new Object(),0);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    ret=Array.getChar(x,4);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    ret=Array.getChar(null,0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  public void removeAuthnRequest(String requestID){  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSSessionManager.removeAuthnRequest: Called, ID=" + requestID);  }  idAuthnRequestMap.remove(requestID);  idDestnMap.remove(requestID);  if ((agent != null) && agent.isRunning() && (idffSvc != null)) {    idffSvc.setIdDestn((long)idDestnMap.size());  }  if (cRunnable != null) {    cRunnable.removeElement(requestID);  }}  }
class C{  public Extensions createExtensions() throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.EXTENSIONS);  if (obj == null) {    return new ExtensionsImpl();  } else {    return (Extensions)obj;  }}  }
class C{  public static boolean isNumericString(String str){  for (int i=str.length() - 1; i >= 0; i--) {    char ch=str.charAt(i);    if (ch > 0x007f) {      return false;    }    if (('0' <= ch && ch <= '9') || ch == ' ') {      continue;    }    return false;  }  return true;}  }
class C{  protected Size2DSyntax(int x,int y,int units){  if (x < 0) {    throw new IllegalArgumentException("x < 0");  }  if (y < 0) {    throw new IllegalArgumentException("y < 0");  }  if (units < 1) {    throw new IllegalArgumentException("units < 1");  }  this.x=x * units;  this.y=y * units;}  }
class C{  @Deprecated public PistonBaseMaterial(final int type,final byte data){  super(type,data);}  }
class C{  public WritePendingException(){}  }
class C{  public final void testClone(){  LDAPCertStoreParameters cp1=new LDAPCertStoreParameters("myhost",1100);  LDAPCertStoreParameters cp2=(LDAPCertStoreParameters)cp1.clone();  assertTrue("newObject",cp1 != cp2);  assertTrue("hostsTheSame",cp1.getServerName().equals(cp2.getServerName()));  assertTrue("portsTheSame",cp1.getPort() == cp2.getPort());}  }
class C{  public final boolean isEnabled(AvroGenerator.Feature f){  return (_avroGeneratorFeatures & f.getMask()) != 0;}  }
class C{  public int awaitAdvance(int phase){  final Phaser root=this.root;  long s=(root == this) ? state : reconcileState();  int p=(int)(s >>> PHASE_SHIFT);  if (phase < 0)   return phase;  if (p == phase)   return root.internalAwaitAdvance(phase,null);  return p;}  }
class C{  public void testGetInstanceStringProvider03() throws IllegalArgumentException, NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  KeyAgreement keyA;  for (int i=0; i < validValues.length; i++) {    keyA=KeyAgreement.getInstance(validValues[i],defaultProvider);    assertEquals("Incorrect algorithm",keyA.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",keyA.getProvider(),defaultProvider);  }}  }
class C{  public boolean messageEnabled(){  return debug.messageEnabled();}  }
class C{  private void processInboundRename(final PreParseModifyOperation modifyOperation){  final List<RawModification> rawMods=new LinkedList<>(modifyOperation.getRawModifications());  final ListIterator<RawModification> iterator=rawMods.listIterator();  while (iterator.hasNext()) {    final RawModification rawMod=iterator.next();    final RawAttribute rawAttr=rawMod.getAttribute();    final String fromName=toLowerCase(rawAttr.getAttributeType().trim());    final String toName=attributesToRename.get(fromName);    if (toName != null) {      if (logger.isTraceEnabled()) {        logger.trace("AttributeCleanupPlugin renaming '%s' to '%s'",rawAttr.getAttributeType(),toName);      }      rawAttr.setAttributeType(toName);    }  }  modifyOperation.setRawModifications(rawMods);}  }
class C{  private static final <T>int find(MapElement<T>[] map,CharChunk name){  return find(map,name,name.getStart(),name.getEnd());}  }
class C{  public void sessionInvalidated(Object session){  String classMethod="SPSessionListener.sessionInvalidated: ";  HashMap paramsMap=new HashMap();  NameIDInfoKey nameIdInfoKey=null;  if (session == null || infoKeyString == null || sessionID == null) {    return;  }  SessionProvider sessionProvider=null;  SPFedSession fedSession=null;  try {    sessionProvider=SessionManager.getProvider();  } catch (  SessionException se) {    return;  }  if (!sessionID.equals(sessionProvider.getSessionID(session))) {    return;  }  List fedSessionList=(List)SPCache.fedSessionListsByNameIDInfoKey.get(infoKeyString);  if (fedSessionList == null) {    return;  }  try {    Iterator iter=fedSessionList.iterator();    while (iter.hasNext()) {      fedSession=(SPFedSession)iter.next();      if (fedSession.spTokenID.equals(sessionID)) {        paramsMap.put(SAML2Constants.ROLE,SAML2Constants.SP_ROLE);        String metaAlias=fedSession.metaAlias;        nameIdInfoKey=NameIDInfoKey.parse(infoKeyString);        String spEntityID=sm.getEntityByMetaAlias(metaAlias);        String realm=SAML2Utils.getRealm(SAML2MetaUtils.getRealmByMetaAlias(metaAlias));        BaseConfigType spConfig=sm.getSPSSOConfig(realm,spEntityID);        if (spConfig != null) {          List spSessionSyncList=(List)SAML2MetaUtils.getAttributes(spConfig).get(SAML2Constants.SP_SESSION_SYNC_ENABLED);          if (spEntityID != null && spSessionSyncList != null && (spSessionSyncList.size() != 0)) {            boolean spSessionSyncEnabled=((String)spSessionSyncList.get(0)).equals(SAML2Constants.TRUE) ? true : false;            if (spSessionSyncEnabled) {              if (SAML2Utils.debug.messageEnabled()) {                SAML2Utils.debug.message(classMethod + "SP Session Synchronization flag " + "is enabled, initiating SLO to IDP");              }              initiateSPSingleLogout(metaAlias,realm,SAML2Constants.SOAP,nameIdInfoKey,fedSession,paramsMap);            }          }        } else {          if (SAML2Utils.debug.messageEnabled()) {            SAML2Utils.debug.message(classMethod + "Unable to retrieve the SP config" + " data, spConfig is null");          }        }      }    }  } catch (  SAML2MetaException sme) {    SAML2Utils.debug.error("SPSessionListener.sessionInvalidated:",sme);  }catch (  SAML2Exception se) {    SAML2Utils.debug.error("SPSessionListener.sessionInvalidated:",se);  }catch (  SessionException s) {    SAML2Utils.debug.error("IDPSessionListener.sessionInvalidated:",s);  }synchronized (fedSessionList) {    Iterator iter=fedSessionList.iterator();    while (iter.hasNext()) {      fedSession=(SPFedSession)iter.next();      if (fedSession.spTokenID.equals(sessionID)) {        iter.remove();        if ((agent != null) && agent.isRunning() && (saml2Svc != null)) {          saml2Svc.setFedSessionCount((long)SPCache.fedSessionListsByNameIDInfoKey.size());        }      }    }    if (fedSessionList.isEmpty()) {      SPCache.fedSessionListsByNameIDInfoKey.remove(infoKeyString);    }  }}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.KeyDescriptorType createKeyDescriptorType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.KeyDescriptorTypeImpl();}  }
class C{  public void testGetEntry2() throws Exception {  assertNull(cache.toVerboseString(),"Expected empty cache.  " + "Cache contents:" + ServerConstants.EOL + cache.toVerboseString());  TestCaseUtils.initializeTestBackend(false);  String b=DirectoryServer.getBackend(DN.valueOf("o=test")).getBackendID();  assertNull(cache.getEntry(testEntriesList.get(0).getName()),"Not expected to find " + testEntriesList.get(0).getName() + " in the cache.  Cache contents:"+ ServerConstants.EOL+ cache.toVerboseString());  cache.putEntry(testEntriesList.get(0),b,1);  assertNotNull(cache.getEntry(testEntriesList.get(0).getName()),"Expected to find " + testEntriesList.get(0).getName() + " in the cache.  Cache contents:"+ ServerConstants.EOL+ cache.toVerboseString());  cache.clear();}  }
class C{  ClientType(String type){  this.type=type;}  }
class C{  protected UserException(String reason){  super(reason);}  }
class C{  List<Rating> rankRatingsByDemand(final Map<Rating,BigDecimal> currentShare){  final List<Rating> ratingsUnderTarget=rankRatingsByDemand(currentShare,null);  final List<Rating> ratingsUnderMaximum=rankRatingsByDemand(currentShare,null);  Collections.reverse(ratingsUnderMaximum);  final List<Rating> result=Stream.concat(ratingsUnderTarget.stream(),ratingsUnderMaximum.stream()).distinct().collect(Collectors.toList());  return Collections.unmodifiableList(result);}  }
class C{  public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize){  return new ScheduledThreadPoolExecutor(corePoolSize);}  }
class C{  private void doAcquireSharedInterruptibly(long arg) throws InterruptedException {  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        long r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          failed=false;          return;        }      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  Set searchOrganizationNames(SSOToken token,int numOfEntries,boolean sortResults,boolean ascendingOrder,String serviceName,String attrName,Set values) throws SMSException, SSOException {  if (backendProxyEnabled && !SMSJAXRPCObjectFlg) {    if (isAllowed(token,normalizedDN,readActionSet)) {      if (adminSSOToken == null) {        adminSSOToken=(SSOToken)AccessController.doPrivileged(com.sun.identity.security.AdminTokenAction.getInstance());      }      token=adminSSOToken;    }  } else   if (!SMSJAXRPCObjectFlg) {    getDelegationPermission(token,normalizedDN,readActionSet);  }  Set resultSet=smsObject.searchOrganizationNames(token,dn,numOfEntries,sortResults,ascendingOrder,serviceName,attrName,values);  if (SMSJAXRPCObjectFlg) {    return (resultSet);  }  Set allowedSet=new OrderedSet();  for (Iterator items=resultSet.iterator(); items.hasNext(); ) {    String item=(String)items.next();    if (hasReadPermission(token,item)) {      allowedSet.add(item);    }  }  if (attrName.equalsIgnoreCase(EXPORTEDARGS))   return allowedSet;  Set answer=parseResult(allowedSet,normalizedDN,true);  if (debug.messageEnabled()) {    debug.message("SMSEntry: Successfully obtained " + "organization names for : " + dn);  }  return answer;}  }
class C{  public void checkCast(final Type type){  if (!type.equals(OBJECT_TYPE)) {    typeInsn(Opcodes.CHECKCAST,type);  }}  }
class C{  public SocketPermissionCollection(){  perms=new ArrayList<SocketPermission>();}  }
class C{  public static void overrideSymbolSet(SymbolInfo[] override){  symbols=override;}  }
class C{  public boolean removeLastOccurrence(Object o){  if (o == null)   return false;  int mask=elements.length - 1;  int i=(tail - 1) & mask;  Object x;  while ((x=elements[i]) != null) {    if (o.equals(x)) {      delete(i);      return true;    }    i=(i - 1) & mask;  }  return false;}  }
class C{  public void windowClosing(WindowEvent e){  ((WindowListener)a).windowClosing(e);  ((WindowListener)b).windowClosing(e);}  }
class C{  private final void dispatachChars(Node node) throws org.xml.sax.SAXException {  if (m_Serializer != null) {    this.m_Serializer.characters(node);  } else {    String data=((Text)node).getData();    this.m_contentHandler.characters(data.toCharArray(),0,data.length());  }}  }
class C{  private static boolean canBeCandidate(Class<?>[] params,Object[] args){  for (int i=0; i < args.length; ++i) {    if (!params[i].isInstance(args[i]) && (params[i].isPrimitive() || args[i] != null)) {      Class<?> cls=params[i];      Object obj=args[i];      if (null == obj)       continue;      if (cls.equals(int.class)) {        if (!(obj instanceof Integer))         return false;      } else       if (cls.equals(short.class)) {        if (!(obj instanceof Short))         return false;      } else       if (cls.equals(byte.class)) {        if (!(obj instanceof Byte))         return false;      } else       if (cls.equals(boolean.class)) {        if (!(obj instanceof Boolean))         return false;      } else       if (cls.equals(char.class)) {        if (!(obj instanceof Character))         return false;      } else       if (cls.equals(long.class)) {        if (!(obj instanceof Long))         return false;      } else       if (cls.equals(double.class)) {        if (!(obj instanceof Double))         return false;      } else       if (cls.equals(float.class)) {        if (!(obj instanceof Float))         return false;      } else       if (cls.isArray()) {        if (!(obj instanceof java.util.List))         return false;      } else       if (cls.isInterface() && isFunctionalInterface(cls)) {        if (!(obj instanceof Function))         return false;      } else       if (!cls.isAnnotation() && !cls.isAnonymousClass() && !cls.isArray()&& !cls.isEnum()&& !cls.isLocalClass()&& !cls.isMemberClass()&& !cls.isPrimitive()&& !cls.isSynthetic()&& isFunctionalAbstractClass(cls)) {        if (!(obj instanceof Function))         return false;      } else {        notFunctionalAbstractClass.put(cls,null);        notFunctionalInterfaces.put(cls,null);        return false;      }    }  }  return true;}  }
class C{  @Override public boolean shouldFilter(){  return RequestContext.getCurrentContext().getRequest().getRequestURI().endsWith(Swagger2Controller.DEFAULT_URL);}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s5_several_branches();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  public SIPHeader parse() throws ParseException {  Expires expires=new Expires();  if (debug)   dbg_enter("parse");  try {    lexer.match(TokenTypes.EXPIRES);    lexer.SPorHT();    lexer.match(':');    lexer.SPorHT();    String nextId=lexer.getNextId();    try {      int delta=Integer.parseInt(nextId);      expires.setExpires(delta);      this.lexer.match('\n');      return expires;    } catch (    NumberFormatException ex) {      throw createParseException("bad integer format");    }catch (    InvalidArgumentException ex) {      throw createParseException(ex.getMessage());    }  }  finally {    if (debug)     dbg_leave("parse");  }}  }
class C{  private Group<?> extractGroup(AttributeType attributeType,SearchFilter filter){switch (filter.getFilterType()) {case AND:    for (    SearchFilter f : filter.getFilterComponents()) {      Group<?> g=extractGroup(attributeType,f);      if (g != null) {        return g;      }    }  break;case EQUALITY:if (filter.getAttributeType().equals(attributeType)) {  try {    DN dn=DN.valueOf(filter.getAssertionValue());    return DirectoryServer.getGroupManager().getGroupInstance(dn);  } catch (  Exception e) {    logger.traceException(e);  }}break;}return null;}  }
class C{  public double angle_approx(PlaVectorInt p_other){  double result=Math.acos(cos_angle(p_other));  if (side_of(p_other) == PlaSide.ON_THE_LEFT) {    result=-result;  }  return result;}  }
class C{  public boolean contains(int index){  return index >= getFirst() && index <= getLast();}  }
class C{  public SaltedSHA1FieldStorageScheme() throws Exception {  super(SHA1_LENGTH,ALGORITHM_SHA_1);}  }
class C{  protected final boolean isListState(){  return stateTextTypes.charAt(state) == 'L';}  }
class C{  public Element signWithWSSX509TokenProfile(Document doc,java.security.cert.Certificate cert,String algorithm,List ids) throws XMLSignatureException {  return signWithWSSX509TokenProfile(doc,cert,algorithm,ids,SOAPBindingConstants.WSF_10_VERSION);}  }
class C{  protected PdfObject generateTree(){  if (pageRefs.size() == 0)   throw new PdfException(PdfException.DocumentHasNoPages);  if (generated)   throw new PdfException(PdfException.PdfPagesTreeCouldBeGeneratedOnlyOnce);  if (root == null) {    while (parents.size() != 1) {      List<PdfPages> nextParents=new ArrayList<>();      int dynamicLeafSize=leafSize;      PdfPages current=null;      for (int i=0; i < parents.size(); i++) {        PdfPages pages=parents.get(i);        int pageCount=pages.getCount();        if (i % dynamicLeafSize == 0) {          if (pageCount <= 1) {            dynamicLeafSize++;          } else {            current=new PdfPages(-1,document);            nextParents.add(current);            dynamicLeafSize=leafSize;          }        }        assert current != null;        current.addPages(pages);      }      parents=nextParents;    }    root=parents.get(0);  }  generated=true;  return root.getPdfObject();}  }
class C{  public static ChatPage paginate(String unpaginatedString,int pageNumber,int lineLength,int pageHeight){  String[] lines=wordWrap(unpaginatedString,lineLength);  int totalPages=lines.length / pageHeight + (lines.length % pageHeight == 0 ? 0 : 1);  int actualPageNumber=pageNumber <= totalPages ? pageNumber : totalPages;  int from=(actualPageNumber - 1) * pageHeight;  int to=from + pageHeight <= lines.length ? from + pageHeight : lines.length;  String[] selectedLines=Java15Compat.Arrays_copyOfRange(lines,from,to);  return new ChatPage(selectedLines,actualPageNumber,totalPages);}  }
class C{  public static String toString(byte[] a){  if (a == null)   return "null";  int iMax=a.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(a[i]);    if (i == iMax)     return b.append(']').toString();    b.append(", ");  }}  }
class C{  private boolean addNodesInDocOrder(int start,int end,int testIndex,NodeList nodelist,XPathContext support){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  boolean foundit=false;  int i;  Node node=nodelist.item(testIndex);  for (i=end; i >= start; i--) {    Node child=(Node)elementAt(i);    if (child == node) {      i=-2;      break;    }    if (!DOM2Helper.isNodeAfter(node,child)) {      insertElementAt(node,i + 1);      testIndex--;      if (testIndex > 0) {        boolean foundPrev=addNodesInDocOrder(0,i,testIndex,nodelist,support);        if (!foundPrev) {          addNodesInDocOrder(i,size() - 1,testIndex,nodelist,support);        }      }      break;    }  }  if (i == -1) {    insertElementAt(node,0);  }  return foundit;}  }
class C{  public boolean isAuthnContextMatching(List requestedACClassRefs,String acClassRef,String comparison,String realm,String idpEntityID){  Map acClassRefLevelMap=null;  if (IDPCache.classRefLevelHash != null) {    acClassRefLevelMap=(Map)IDPCache.classRefLevelHash.get(idpEntityID + "|" + realm);  }  if (acClassRefLevelMap == null || acClassRefLevelMap.isEmpty()) {    updateAuthnContextMapping(realm,idpEntityID);    acClassRefLevelMap=(Map)IDPCache.classRefLevelHash.get(idpEntityID + "|" + realm);    if (acClassRefLevelMap == null) {      acClassRefLevelMap=new HashMap();    }  }  return SAML2Utils.isAuthnContextMatching(requestedACClassRefs,acClassRef,comparison,acClassRefLevelMap);}  }
class C{  public long insert(long timeStamp,long logEventID,String ruleName,String actionAppName,String actionEventName,String actionParameters,String description){  if (ruleName == null || actionAppName == null || actionEventName == null || actionParameters == null || description == null) {    throw new IllegalArgumentException("insert parameter null.");  }  ContentValues initialValues=new ContentValues();  initialValues.put(KEY_TIMESTAMP,timeStamp);  initialValues.put(KEY_LOGEVENTID,logEventID);  initialValues.put(KEY_RULENAME,ruleName);  initialValues.put(KEY_ACTIONAPPNAME,actionAppName);  initialValues.put(KEY_ACTIONEVENTNAME,actionEventName);  initialValues.put(KEY_ACTIONPARAMETERS,actionParameters);  initialValues.put(KEY_DESCRIPTION,description);  return database.insert(DATABASE_TABLE,null,initialValues);}  }
class C{  public static ByteString encodeResponseValue(long connectionID){  ByteStringBuilder builder=new ByteStringBuilder(8);  ASN1Writer writer=ASN1.getWriter(builder);  try {    writer.writeInteger(connectionID);  } catch (  Exception e) {    logger.traceException(e);  }  return builder.toByteString();}  }
class C{  private boolean isPortConfigurationAcceptable(String configDN,int newPort,List<LocalizableMessage> unacceptableReasons){  try {    if (StaticUtils.isAddressInUse(new InetSocketAddress(newPort).getAddress(),newPort,true)) {      throw new IOException(ERR_CONNHANDLER_ADDRESS_INUSE.get().toString());    }    return true;  } catch (  Exception e) {    LocalizableMessage message=ERR_CONNHANDLER_CANNOT_BIND.get("JMX",configDN,WILDCARD_ADDRESS,newPort,getExceptionMessage(e));    unacceptableReasons.add(message);    return false;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createAttributeNS03.class,args);}  }
class C{  boolean isLastTextOrPasswordField(){  Element parent=getFormElement();  Element elem=getElement();  if (parent != null) {    ElementIterator it=new ElementIterator(parent);    Element next;    boolean found=false;    while ((next=it.next()) != null) {      if (next == elem) {        found=true;      } else       if (found && isControl(next)) {        AttributeSet elemAttr=next.getAttributes();        if (HTMLDocument.matchNameAttribute(elemAttr,HTML.Tag.INPUT)) {          String type=(String)elemAttr.getAttribute(HTML.Attribute.TYPE);          if ("text".equals(type) || "password".equals(type)) {            return false;          }        }      }    }  }  return true;}  }
class C{  public void testReceive_NonBlockNoServerNull() throws Exception {  this.channel1.configureBlocking(false);  receiveNoServerNull();}  }
class C{  @Override protected byte[] decrypt(byte type,byte[] fragment,int offset,int len){  byte[] data=decCipher.update(fragment,offset,len);  byte[] content;  if (block_size != 0) {    int padding_length=data[data.length - 1] & 0xFF;    for (int i=0; i < padding_length; i++) {      if ((data[data.length - 2 - i] & 0xFF) != padding_length) {        throw new AlertException(AlertProtocol.DECRYPTION_FAILED,new SSLProtocolException("Received message has bad padding"));      }    }    content=new byte[data.length - hash_size - padding_length- 1];  } else {    content=new byte[data.length - hash_size];  }  byte[] mac_value;  mac_material_part[0]=type;  mac_material_part[1]=(byte)((0x00FF00 & content.length) >> 8);  mac_material_part[2]=(byte)(0x0000FF & content.length);  messageDigest.update(mac_read_secret);  messageDigest.update(pad_1);  messageDigest.update(read_seq_num);  messageDigest.update(mac_material_part);  messageDigest.update(data,0,content.length);  mac_value=messageDigest.digest();  messageDigest.update(mac_read_secret);  messageDigest.update(pad_2);  messageDigest.update(mac_value);  mac_value=messageDigest.digest();  if (logger != null) {    logger.println("Decrypted:");    logger.print(data);    logger.println("Expected mac value:");    logger.print(mac_value);  }  for (int i=0; i < hash_size; i++) {    if (mac_value[i] != data[i + content.length]) {      throw new AlertException(AlertProtocol.BAD_RECORD_MAC,new SSLProtocolException("Bad record MAC"));    }  }  System.arraycopy(data,0,content,0,content.length);  incSequenceNumber(read_seq_num);  return content;}  }
class C{  public List reverse(){  Collections.reverse(this);  return this;}  }
class C{  private boolean process_session_scope() throws java.io.IOException {  Object next_token=null;  for (int i=0; i < 3; ++i) {    next_token=scanner.next_token();    boolean keyword_ok=true;    if (i == 0) {      keyword_ok=(next_token == DsnKeyword.OPEN_BRACKET);    } else     if (i == 1) {      keyword_ok=(next_token == DsnKeyword.SESSION);      scanner.yybegin(DsnFileScanner.NAME);    }    if (!keyword_ok) {      System.out.println("SessionToEagle.process_session_scope specctra session file format expected");      return false;    }  }  out_file.write("GRID ");  out_file.write(unit.toString());  out_file.write("\n");  out_file.write("SET WIRE_BEND 2\n");  out_file.write("SET OPTIMIZING OFF\n");  for (int index=0; index < board.layer_structure.size(); ++index) {    out_file.write("LAYER " + get_eagle_layer_string(index) + ";\n");  }  out_file.write("LAYER 17;\n");  out_file.write("LAYER 18;\n");  out_file.write("LAYER 19;\n");  out_file.write("LAYER 20;\n");  out_file.write("LAYER 23;\n");  out_file.write("LAYER 24;\n");  freert.planar.ShapeTileBox board_bounding_box=board.get_bounding_box();  Float min_x=(float)board_scale_factor * (board_bounding_box.box_ll.v_x - 1);  Float min_y=(float)board_scale_factor * (board_bounding_box.box_ll.v_y - 1);  Float max_x=(float)board_scale_factor * (board_bounding_box.box_ur.v_x + 1);  Float max_y=(float)board_scale_factor * (board_bounding_box.box_ur.v_y + 1);  out_file.write("GROUP (");  out_file.write(min_x.toString());  out_file.write(" ");  out_file.write(min_y.toString());  out_file.write(") (");  out_file.write(max_x.toString());  out_file.write(" ");  out_file.write(max_y.toString());  out_file.write(");\n");  out_file.write("RIPUP;\n");  for (; ; ) {    Object prev_token=next_token;    next_token=scanner.next_token();    if (next_token == null) {      return true;    }    if (next_token == DsnKeyword.CLOSED_BRACKET) {      break;    }    if (prev_token == DsnKeyword.OPEN_BRACKET) {      if (next_token == DsnKeyword.ROUTES) {        if (!process_routes_scope()) {          return false;        }      } else       if (next_token == DsnKeyword.PLACEMENT_SCOPE) {        if (!process_placement_scope()) {          return false;        }      } else {        DsnKeywordScope.skip_scope(scanner);      }    }  }  out_file.write("RATSNEST\n");  return true;}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AuthnContextElement createAuthnContextElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextElementImpl();}  }
class C{  public ResultPoint[] detect() throws NotFoundException {  int height=image.getHeight();  int width=image.getWidth();  int halfHeight=height / 2;  int halfWidth=width / 2;  int deltaY=Math.max(1,height / (MAX_MODULES * 8));  int deltaX=Math.max(1,width / (MAX_MODULES * 8));  int top=0;  int bottom=height;  int left=0;  int right=width;  ResultPoint pointA=findCornerFromCenter(halfWidth,0,left,right,halfHeight,-deltaY,top,bottom,halfWidth / 2);  top=(int)pointA.getY() - 1;  ResultPoint pointB=findCornerFromCenter(halfWidth,-deltaX,left,right,halfHeight,0,top,bottom,halfHeight / 2);  left=(int)pointB.getX() - 1;  ResultPoint pointC=findCornerFromCenter(halfWidth,deltaX,left,right,halfHeight,0,top,bottom,halfHeight / 2);  right=(int)pointC.getX() + 1;  ResultPoint pointD=findCornerFromCenter(halfWidth,0,left,right,halfHeight,deltaY,top,bottom,halfWidth / 2);  bottom=(int)pointD.getY() + 1;  pointA=findCornerFromCenter(halfWidth,0,left,right,halfHeight,-deltaY,top,bottom,halfWidth / 4);  return new ResultPoint[]{pointA,pointB,pointC,pointD};}  }
class C{  public InteractionRequiredException(){  super(400,"interaction_required","The request requires some interaction that is not allowed.");}  }
class C{  public ResourceSet(Collection<T> coll){  super(coll);}  }
class C{  @KnownFailure("not supported") public void testUpdate4() throws SQLException {  DatabaseCreator.fillFKStrictTable(conn);  try {    statement.executeUpdate("UPDATE " + DatabaseCreator.FKSTRICT_TABLE + " SET name_id = 6 WHERE name_id = 2");    fail("expecting SQLException");  } catch (  SQLException ex) {  }}  }
class C{  public void updateUI(){  if (isAcceptAllFileFilterUsed()) {    removeChoosableFileFilter(getAcceptAllFileFilter());  }  FileChooserUI ui=((FileChooserUI)UIManager.getUI(this));  if (fileSystemView == null) {    setFileSystemView(FileSystemView.getFileSystemView());  }  setUI(ui);  if (isAcceptAllFileFilterUsed()) {    addChoosableFileFilter(getAcceptAllFileFilter());  }}  }
class C{  private void showContactAsBarcode(Uri contactUri){  Log.i(TAG,"Showing contact URI as barcode: " + contactUri);  if (contactUri == null) {    return;  }  ContentResolver resolver=getContentResolver();  Cursor cursor;  try {    cursor=resolver.query(contactUri,null,null,null,null);  } catch (  IllegalArgumentException ignored) {    return;  }  if (cursor == null) {    return;  }  String id;  String name;  boolean hasPhone;  try {    if (!cursor.moveToFirst()) {      return;    }    id=cursor.getString(cursor.getColumnIndex(BaseColumns._ID));    name=cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));    hasPhone=cursor.getInt(cursor.getColumnIndex(ContactsContract.Contacts.HAS_PHONE_NUMBER)) > 0;  }  finally {    cursor.close();  }  Bundle bundle=new Bundle();  if (name != null && !name.isEmpty()) {    bundle.putString(ContactsContract.Intents.Insert.NAME,massageContactData(name));  }  if (hasPhone) {    Cursor phonesCursor=resolver.query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,null,ContactsContract.CommonDataKinds.Phone.CONTACT_ID + '=' + id,null,null);    if (phonesCursor != null) {      try {        int foundPhone=0;        int phonesNumberColumn=phonesCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER);        int phoneTypeColumn=phonesCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.TYPE);        while (phonesCursor.moveToNext() && foundPhone < Contents.PHONE_KEYS.length) {          String number=phonesCursor.getString(phonesNumberColumn);          if (number != null && !number.isEmpty()) {            bundle.putString(Contents.PHONE_KEYS[foundPhone],massageContactData(number));          }          int type=phonesCursor.getInt(phoneTypeColumn);          bundle.putInt(Contents.PHONE_TYPE_KEYS[foundPhone],type);          foundPhone++;        }      }  finally {        phonesCursor.close();      }    }  }  Cursor methodsCursor=resolver.query(ContactsContract.CommonDataKinds.StructuredPostal.CONTENT_URI,null,ContactsContract.CommonDataKinds.StructuredPostal.CONTACT_ID + '=' + id,null,null);  if (methodsCursor != null) {    try {      if (methodsCursor.moveToNext()) {        String data=methodsCursor.getString(methodsCursor.getColumnIndex(ContactsContract.CommonDataKinds.StructuredPostal.FORMATTED_ADDRESS));        if (data != null && !data.isEmpty()) {          bundle.putString(ContactsContract.Intents.Insert.POSTAL,massageContactData(data));        }      }    }  finally {      methodsCursor.close();    }  }  Cursor emailCursor=resolver.query(ContactsContract.CommonDataKinds.Email.CONTENT_URI,null,ContactsContract.CommonDataKinds.Email.CONTACT_ID + '=' + id,null,null);  if (emailCursor != null) {    try {      int foundEmail=0;      int emailColumn=emailCursor.getColumnIndex(ContactsContract.CommonDataKinds.Email.DATA);      while (emailCursor.moveToNext() && foundEmail < Contents.EMAIL_KEYS.length) {        String email=emailCursor.getString(emailColumn);        if (email != null && !email.isEmpty()) {          bundle.putString(Contents.EMAIL_KEYS[foundEmail],massageContactData(email));        }        foundEmail++;      }    }  finally {      emailCursor.close();    }  }  Intent intent=new Intent(Intents.Encode.ACTION);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);  intent.putExtra(Intents.Encode.TYPE,Contents.Type.CONTACT);  intent.putExtra(Intents.Encode.DATA,bundle);  intent.putExtra(Intents.Encode.FORMAT,BarcodeFormat.QR_CODE.toString());  Log.i(TAG,"Sending bundle for encoding: " + bundle);  startActivity(intent);}  }
class C{  public CharVector(int capacity){  if (capacity > 0) {    blockSize=capacity;  } else {    blockSize=DEFAULT_BLOCK_SIZE;  }  array=new char[blockSize];  n=0;}  }
class C{  public static ImageTypeSpecifier createFromRenderedImage(RenderedImage image){  if (image == null) {    throw new IllegalArgumentException("image == null!");  }  if (image instanceof BufferedImage) {    int bufferedImageType=((BufferedImage)image).getType();    if (bufferedImageType != BufferedImage.TYPE_CUSTOM) {      return getSpecifier(bufferedImageType);    }  }  return new ImageTypeSpecifier(image);}  }
class C{  public static XNodeSet executeFilterExpr(int context,XPathContext xctxt,PrefixResolver prefixResolver,boolean isTopLevel,int stackFrame,Expression expr) throws org.apache.xml.utils.WrappedRuntimeException {  PrefixResolver savedResolver=xctxt.getNamespaceContext();  XNodeSet result=null;  try {    xctxt.pushCurrentNode(context);    xctxt.setNamespaceContext(prefixResolver);    if (isTopLevel) {      VariableStack vars=xctxt.getVarStack();      int savedStart=vars.getStackFrame();      vars.setStackFrame(stackFrame);      result=(org.apache.xpath.objects.XNodeSet)expr.execute(xctxt);      result.setShouldCacheNodes(true);      vars.setStackFrame(savedStart);    } else     result=(org.apache.xpath.objects.XNodeSet)expr.execute(xctxt);  } catch (  javax.xml.transform.TransformerException se) {    throw new org.apache.xml.utils.WrappedRuntimeException(se);  } finally {    xctxt.popCurrentNode();    xctxt.setNamespaceContext(savedResolver);  }  return result;}  }
class C{  @Override public void flush(){  target.flush();}  }
class C{  public SQLNonTransientConnectionException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public static void writeStringToFile(File file,String data,boolean append) throws IOException {  writeStringToFile(file,data,Charset.defaultCharset(),append);}  }
class C{  public void write(PdfDocument document) throws IOException {  setXfaForm(this,document);}  }
class C{  public Builder addPattern(String pattern){  patterns.add(pattern);  return this;}  }
class C{  public OutputStreamWriter(OutputStream out,String charsetName) throws UnsupportedEncodingException {  super(out);  if (charsetName == null)   throw new NullPointerException("charsetName");  se=StreamEncoder.forOutputStreamWriter(out,this,charsetName);}  }
class C{  public int length() throws UnsupportedOperationException {  if (this.type == TYPE_MALFORMED_INPUT || this.type == TYPE_UNMAPPABLE_CHAR) {    return this.length;  }  throw new UnsupportedOperationException("length meaningless for " + toString());}  }
class C{  public JsonValue notifyDelete(Context context,String resourceContainer,String resourceId,JsonValue oldValue) throws SynchronizationException {  if (isSourceObject(resourceContainer,resourceId)) {    return doSourceSync(context,resourceId,null,true,oldValue);  }  return json(null);}  }
class C{  private String processIntegerToken(String token){  String result=token.replaceAll("" + groupSeparator,"");  boolean isNegative=false;  int preLen=negativePrefix.length();  if ((preLen > 0) && result.startsWith(negativePrefix)) {    isNegative=true;    result=result.substring(preLen);  }  int sufLen=negativeSuffix.length();  if ((sufLen > 0) && result.endsWith(negativeSuffix)) {    isNegative=true;    result=result.substring(result.length() - sufLen,result.length());  }  if (isNegative)   result="-" + result;  return result;}  }
class C{  public final void testEqualsObject03(){  CertPath cp1=new MyCertPath(testEncoding);  assertFalse(cp1.equals(null));}  }
class C{  private void writeObject(java.io.ObjectOutputStream stream) throws IOException {  if (stubDelegate == null) {    setDefaultDelegate();  }  if (stubDelegate != null) {    stubDelegate.writeObject(this,stream);  }}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  ServerSiteModel model=(ServerSiteModel)getModel();  AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);  String name=(String)getDisplayFieldValue(TF_NAME);  name=name.trim();  String url=(String)getDisplayFieldValue(TF_URL);  url=url.trim();  if ((name.length() > 0) && (url.length() > 0)) {    try {      model.createSite(name,url);      backTrail();      ServerSiteViewBean vb=(ServerSiteViewBean)getViewBean(ServerSiteViewBean.class);      passPgSessionMap(vb);      vb.forwardTo(getRequestContext());    } catch (    AMConsoleException e) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());      forwardTo();    }  } else {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",model.getLocalizedString("serverconfig.create.site.missing.attributes"));    forwardTo();  }}  }
class C{  public String toXMLString() throws FSMsgException {  return toXMLString(true,true);}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public boolean addAllStrings(Collection<? extends Object> values){  boolean wasModified=false;  for (  Object v : values) {    wasModified|=add(v.toString());  }  return wasModified;}  }
class C{  public void initialize(Map configParams) throws PolicyException {  Set orgNameSet=(Set)configParams.get(PolicyManager.ORGANIZATION_NAME);  if ((orgNameSet != null) && (orgNameSet.size() != 0)) {    Iterator items=orgNameSet.iterator();    orgName=(String)items.next();  }  initialized=true;}  }
class C{  public void testSpecialCase1(){  byte aBytes[]={-1,-1,-1,-1};  byte bBytes[]={5,-4,-3,-2};  int aSign=-1;  int bSign=-1;  byte rBytes[]={-1,0,0,0,0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  private void validateStatusReplicationOptions(LocalizableMessageBuilder buf){  if (quietArg.isPresent()) {    LocalizableMessage message=ERR_REPLICATION_STATUS_QUIET.get(STATUS_REPLICATION_SUBCMD_NAME,"--" + quietArg.getLongIdentifier());    addMessage(buf,message);  }}  }
class C{  private void uninstallBorder(JRootPane root){  LookAndFeel.uninstallBorder(root);}  }
class C{  @Override public void delete(){  cachedContent=null;  File outputFile=getStoreLocation();  if (outputFile != null && outputFile.exists()) {    outputFile.delete();  }}  }
class C{  public boolean remove(ByteString value){  return values.remove(createAttributeValue(attributeDescription,value));}  }
class C{  @Override public void organizationConfigChanged(String serviceName,String version,String orgName,String goupName,String serviceComponent,int type){  debug.message("AuthServiceListener.organizationConfigChanged : Config changed for Org={}, Service={}, " + "Chagne type={}",orgName,serviceName,type);  if (type != ADDED) {    int componentSlash=serviceComponent.lastIndexOf('/');    if (componentSlash != -1) {      String componentName=serviceComponent.substring(componentSlash + 1);      serviceAttributeCache.remove(key(componentName,orgName));    }  }}  }
class C{  private void addProperty(Property prop,int index,Map<String,Property> keys_map,String key_name) throws MalformedObjectNameException {  if (keys_map.containsKey(key_name))   throw new MalformedObjectNameException("key `" + key_name + "' already defined");  if (index == _kp_array.length) {    Property[] tmp_prop_array=new Property[index + 10];    System.arraycopy(_kp_array,0,tmp_prop_array,0,index);    _kp_array=tmp_prop_array;  }  _kp_array[index]=prop;  keys_map.put(key_name,prop);}  }
class C{  public static void logError(Level lvl,String msgid,String[] data,Object tok,String ipaddr,String userid,String org,String module,Map props){  Map accProps=accumulateLogProps(ipaddr,userid,org,module,props);  LogUtil.error(lvl,msgid,data,tok,accProps);}  }
class C{  protected void concatenate(GenericObjectList objList){  concatenate(objList,false);}  }
class C{  public static String roleValueToString(List<ObjectName> roleValue) throws IllegalArgumentException {  if (roleValue == null) {    String excMsg="Invalid parameter";    throw new IllegalArgumentException(excMsg);  }  StringBuilder result=new StringBuilder();  for (  ObjectName currObjName : roleValue) {    if (result.length() > 0)     result.append("\n");    result.append(currObjName.toString());  }  return result.toString();}  }
class C{  public static File writeDataToFile(final byte[] data,final File file){  return writeDataToFile(data,file,false);}  }
class C{  @Override public void close(){  promise.cancel(true);}  }
class C{  public ELException(String pMessage,Throwable pRootCause){  super(pMessage,pRootCause);}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  public static int createProgram(String vertexSource,String fragmentSource){  int vertexShader=loadShader(GLES20.GL_VERTEX_SHADER,vertexSource);  if (vertexShader == 0) {    return 0;  }  int pixelShader=loadShader(GLES20.GL_FRAGMENT_SHADER,fragmentSource);  if (pixelShader == 0) {    return 0;  }  int program=GLES20.glCreateProgram();  checkGlError("glCreateProgram");  if (program == 0) {    Log.e(TAG,"Could not create program");  }  GLES20.glAttachShader(program,vertexShader);  checkGlError("glAttachShader");  GLES20.glAttachShader(program,pixelShader);  checkGlError("glAttachShader");  GLES20.glLinkProgram(program);  int[] linkStatus=new int[1];  GLES20.glGetProgramiv(program,GLES20.GL_LINK_STATUS,linkStatus,0);  if (linkStatus[0] != GLES20.GL_TRUE) {    Log.e(TAG,"Could not link program: ");    Log.e(TAG,GLES20.glGetProgramInfoLog(program));    GLES20.glDeleteProgram(program);    program=0;  }  return program;}  }
class C{  public IdentityMembershipConditionViewBean(){  super("IdentityMembershipCondition",DEFAULT_DISPLAY_URL);}  }
class C{  @Override public String toString(){  rwlock.readLock().lock();  try {    int max=size() - 1;    StringBuilder buf=new StringBuilder();    buf.append("{");    Iterator it=entrySet().iterator();    for (int i=0; i <= max; i++) {      Entry e=(Entry)(it.next());      buf.append(e.key).append("=").append(e.value);      if (i < max) {        buf.append(", ");      }    }    buf.append("}");    return buf.toString();  }  finally {    rwlock.readLock().unlock();  }}  }
class C{  protected Session swapIn(String id) throws IOException {  if (store == null)   return null;  Object swapInLock=null;synchronized (this) {    swapInLock=sessionSwapInLocks.get(id);    if (swapInLock == null) {      swapInLock=new Object();      sessionSwapInLocks.put(id,swapInLock);    }  }  Session session=null;synchronized (swapInLock) {    session=sessions.get(id);    if (session == null) {      try {        if (SecurityUtil.isPackageProtectionEnabled()) {          try {            session=AccessController.doPrivileged(new PrivilegedStoreLoad(id));          } catch (          PrivilegedActionException ex) {            Exception e=ex.getException();            log.error(sm.getString("persistentManager.swapInException",id),e);            if (e instanceof IOException) {              throw (IOException)e;            } else             if (e instanceof ClassNotFoundException) {              throw (ClassNotFoundException)e;            }          }        } else {          session=store.load(id);        }      } catch (      ClassNotFoundException e) {        String msg=sm.getString("persistentManager.deserializeError",id);        log.error(msg,e);        throw new IllegalStateException(msg,e);      }      if (session != null && !session.isValid()) {        log.error(sm.getString("persistentManager.swapInInvalid",id));        session.expire();        removeSession(id);        session=null;      }      if (session != null) {        if (log.isDebugEnabled())         log.debug(sm.getString("persistentManager.swapIn",id));        session.setManager(this);        ((StandardSession)session).tellNew();        add(session);        ((StandardSession)session).activate();        session.access();        session.endAccess();      }    }  }synchronized (this) {    sessionSwapInLocks.remove(id);  }  return session;}  }
class C{  private void putProviderInfo(){  super.put("Provider.id name",(name != null) ? name : "null");  super.put("Provider.id version",versionString);  super.put("Provider.id info",(info != null) ? info : "null");  super.put("Provider.id className",this.getClass().getName());}  }
class C{  private void executeTimeoutScenario() throws Exception {  checkAssuredParametersOnReceivedUpdateMsg();  scenarioExecuted=true;}  }
class C{  private void printEquivalentCommand(){  ArrayList<String> args=new ArrayList<>(getObfuscatedCommandLineArguments(getConnectionCommandLineArguments(useAdminCtx,true)));  args.add(getNoPropertiesFileArgument());  args.add("--defaultAdd");  String equiv=getEquivalentCommandLine(getCommandLinePath("ldapmodify"),args);  StringBuilder sb=new StringBuilder();  sb.append(INFO_CTRL_PANEL_EQUIVALENT_CMD_TO_CREATE_ENTRY.get()).append("<br><b>");  sb.append(equiv);  sb.append("<br>");  String[] lines=ldif.split("\n");  for (  String line : lines) {    sb.append(obfuscateLDIFLine(line));    sb.append("<br>");  }  sb.append("</b><br>");  getProgressDialog().appendProgressHtml(Utilities.applyFont(sb.toString(),ColorAndFontConstants.progressFont));}  }
class C{  @Override public void destroyObject(final UserPassKey key,final PooledObject<PooledConnectionAndInfo> p) throws Exception {  final PooledConnection pc=p.getObject().getPooledConnection();  pc.removeConnectionEventListener(this);  pcMap.remove(pc);  pc.close();}  }
class C{  public BorderLayout(int hgap,int vgap){  this.hgap=hgap;  this.vgap=vgap;}  }
class C{  public static void byteArrayToHexPlusAscii(StringBuilder buffer,byte[] b,int indent){  StringBuilder indentBuf=new StringBuilder(indent);  for (int i=0; i < indent; i++) {    indentBuf.append(' ');  }  int length=b.length;  int pos=0;  while (length - pos >= 16) {    StringBuilder asciiBuf=new StringBuilder(17);    buffer.append(indentBuf);    buffer.append(byteToHex(b[pos]));    asciiBuf.append(byteToASCII(b[pos]));    pos++;    for (int i=1; i < 16; i++, pos++) {      buffer.append(' ');      buffer.append(byteToHex(b[pos]));      asciiBuf.append(byteToASCII(b[pos]));      if (i == 7) {        buffer.append("  ");        asciiBuf.append(' ');      }    }    buffer.append("  ");    buffer.append(asciiBuf);    buffer.append(EOL);  }  int remaining=length - pos;  if (remaining > 0) {    StringBuilder asciiBuf=new StringBuilder(remaining + 1);    buffer.append(indentBuf);    buffer.append(byteToHex(b[pos]));    asciiBuf.append(byteToASCII(b[pos]));    pos++;    for (int i=1; i < 16; i++) {      buffer.append(' ');      if (i < remaining) {        buffer.append(byteToHex(b[pos]));        asciiBuf.append(byteToASCII(b[pos]));        pos++;      } else {        buffer.append("  ");      }      if (i == 7) {        buffer.append("  ");        if (i < remaining) {          asciiBuf.append(' ');        }      }    }    buffer.append("  ");    buffer.append(asciiBuf);    buffer.append(EOL);  }}  }
class C{  public URI(String scheme,String host,String path,String fragment) throws URISyntaxException {  this(scheme,null,host,-1,path,null,fragment);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap notations;  Node notationNode;  NamedNodeMap attrList;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  notationNode=notations.getNamedItem("notation1");  assertNotNull("notationNotNull",notationNode);  attrList=notationNode.getAttributes();  assertNull("nodeNotationNodeAttributesAssert1",attrList);}  }
class C{  public WhoAmIExtendedOperation(){  super(newHashSet(OID_PROXIED_AUTH_V1,OID_PROXIED_AUTH_V2));}  }
class C{  private boolean validateAuthLevels(Set authLevelSet) throws PolicyException {  if (authLevelSet.isEmpty() || (authLevelSet.size() > 1)) {    String args[]={AUTH_LEVEL};    throw new PolicyException(ResBundleUtils.rbName,"property_does_not_allow_empty_or_multiple_values",args,null);  }  Iterator authLevels=authLevelSet.iterator();  authLevel=(String)authLevels.next();  try {    authRealm=AMAuthUtils.getRealmFromRealmQualifiedData(authLevel);    String authLevelIntString=AMAuthUtils.getDataFromRealmQualifiedData(authLevel);    authLevelInt=Integer.parseInt(authLevelIntString);  } catch (  NumberFormatException e) {    String args[]={AUTH_LEVEL};    throw new PolicyException(ResBundleUtils.rbName,"property_is_not_an_Integer",args,null);  }  return true;}  }
class C{  public Dimension minimumLayoutSize(Container target){  checkContainer(target);  checkRequests();  Dimension size=new Dimension(xTotal.minimum,yTotal.minimum);  Insets insets=target.getInsets();  size.width+=insets.left + insets.right;  size.height+=insets.top + insets.bottom;  return size;}  }
class C{  public UnmarshalException(String message,String errorCode){  this(message,errorCode,null);}  }
class C{  public Node selectSingleNode(Node contextNode,String str) throws TransformerException {  return selectSingleNode(contextNode,str,contextNode);}  }
class C{  public DeflaterOutputStream(OutputStream out,boolean syncFlush){  this(out,new Deflater(),512,syncFlush);  usesDefaultDeflater=true;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  forwardTo();}  }
class C{  public void save() throws IOException, TagException {  save(this.file);}  }
class C{  public SampleModel createCompatibleSampleModel(int w,int h){  int minBandoff=bandOffsets[0];  int numBands=bandOffsets.length;  for (int i=1; i < numBands; i++) {    if (bandOffsets[i] < minBandoff) {      minBandoff=bandOffsets[i];    }  }  int[] bandOff;  if (minBandoff > 0) {    bandOff=new int[numBands];    for (int i=0; i < numBands; i++) {      bandOff[i]=bandOffsets[i] - minBandoff;    }  } else {    bandOff=bandOffsets;  }  return new PixelInterleavedSampleModel(dataType,w,h,pixelStride,pixelStride * w,bandOff);}  }
class C{  public boolean postSingleSignOnFailure(String hostedEntityID,String realm,HttpServletRequest request,HttpServletResponse response,AuthnRequest authnRequest,Response ssoResponse,String profile,int failureCode){  return false;}  }
class C{  public void insert_dyn_any(org.omg.DynamicAny.DynAny value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_dyn_any",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    $self.insert_dyn_any(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  String xmlStr=null;  if ((statusCodeValue != null) && (statusCodeValue.length() != 0)) {    StringBuffer xmlString=new StringBuffer(500);    xmlString.append(SAML2Constants.START_TAG);    if (includeNSPrefix) {      xmlString.append(SAML2Constants.PROTOCOL_PREFIX);    }    xmlString.append(SAML2Constants.STATUS_CODE);    if (declareNS) {      xmlString.append(SAML2Constants.PROTOCOL_DECLARE_STR);    }    xmlString.append(SAML2Constants.SPACE);    xmlString.append(SAML2Constants.VALUE).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(statusCodeValue).append(SAML2Constants.QUOTE);    xmlString.append(SAML2Constants.END_TAG);    if (statusCode != null) {      xmlString.append(SAML2Constants.NEWLINE).append(statusCode.toXMLString(includeNSPrefix,declareNS));    }    xmlString.append(SAML2Constants.NEWLINE).append(SAML2Constants.SAML2_END_TAG).append(SAML2Constants.STATUS_CODE).append(SAML2Constants.END_TAG);    xmlStr=xmlString.toString();  }  return xmlStr;}  }
class C{  public void clear(){  n=0;}  }
class C{  public String toStringImpl(){  return routeString;}  }
class C{  public void testDoubleValueMinusZero(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E-400";  BigDecimal aNumber=new BigDecimal(a);  long minusZero=-9223372036854775808L;  double result=aNumber.doubleValue();  assertTrue("incorrect value",Double.doubleToLongBits(result) == minusZero);}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  @Override public void start(int svc) throws ChannelException {  this.internalStart(svc);}  }
class C{  static void computeHash(int[] arrW){  int a=arrW[HASH_OFFSET];  int b=arrW[HASH_OFFSET + 1];  int c=arrW[HASH_OFFSET + 2];  int d=arrW[HASH_OFFSET + 3];  int e=arrW[HASH_OFFSET + 4];  int temp;  for (int t=16; t < 80; t++) {    temp=arrW[t - 3] ^ arrW[t - 8] ^ arrW[t - 14]^ arrW[t - 16];    arrW[t]=(temp << 1) | (temp >>> 31);  }  for (int t=0; t < 20; t++) {    temp=((a << 5) | (a >>> 27)) + ((b & c) | ((~b) & d)) + (e + arrW[t] + 0x5A827999);    e=d;    d=c;    c=(b << 30) | (b >>> 2);    b=a;    a=temp;  }  for (int t=20; t < 40; t++) {    temp=(((a << 5) | (a >>> 27))) + (b ^ c ^ d) + (e + arrW[t] + 0x6ED9EBA1);    e=d;    d=c;    c=(b << 30) | (b >>> 2);    b=a;    a=temp;  }  for (int t=40; t < 60; t++) {    temp=((a << 5) | (a >>> 27)) + ((b & c) | (b & d) | (c & d)) + (e + arrW[t] + 0x8F1BBCDC);    e=d;    d=c;    c=(b << 30) | (b >>> 2);    b=a;    a=temp;  }  for (int t=60; t < 80; t++) {    temp=(((a << 5) | (a >>> 27))) + (b ^ c ^ d) + (e + arrW[t] + 0xCA62C1D6);    e=d;    d=c;    c=(b << 30) | (b >>> 2);    b=a;    a=temp;  }  arrW[HASH_OFFSET]+=a;  arrW[HASH_OFFSET + 1]+=b;  arrW[HASH_OFFSET + 2]+=c;  arrW[HASH_OFFSET + 3]+=d;  arrW[HASH_OFFSET + 4]+=e;}  }
class C{  public URLConnection openConnection(Proxy proxy) throws IOException {  if (proxy == null) {    throw new IllegalArgumentException("proxy == null");  }  return streamHandler.openConnection(this,proxy);}  }
class C{  public boolean hasBinaryAttributes(){  return false;}  }
class C{  @Override public Foo create(long fooId){  Foo foo=new FooImpl();  foo.setNew(true);  foo.setPrimaryKey(fooId);  String uuid=PortalUUIDUtil.generate();  foo.setUuid(uuid);  foo.setCompanyId(companyProvider.getCompanyId());  return foo;}  }
class C{  public static Artwork createArtworkFromMetadataBlockDataPicture(MetadataBlockDataPicture coverArt){  return AndroidArtwork.createArtworkFromMetadataBlockDataPicture(coverArt);}  }
class C{  public void appendCell(int value){  appendCell(String.valueOf(value));}  }
class C{  public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName) throws SAXException {  if (null == m_entities) {    m_entities=new Vector();  }  try {    systemId=SystemIDResolver.getAbsoluteURI(systemId,getDocumentBaseURI());  } catch (  Exception e) {    throw new org.xml.sax.SAXException(e);  }  m_entities.addElement(publicId);  m_entities.addElement(systemId);  m_entities.addElement(notationName);  m_entities.addElement(name);}  }
class C{  public String linkForMessage(ProtoElement element){  if (isExternalFile(element.getFile())) {    String fullName=element.getFullName();    return String.format("[%s]{@link external:\"%s\"}",fullName,fullName);  } else {    String simpleName=element.getSimpleName();    return String.format("[%s]{@link %s}",simpleName,simpleName);  }}  }
class C{  private static void swingInvoke(Runnable r) throws InterruptedException {  try {    SwingUtilities.invokeAndWait(r);  } catch (  InterruptedException x) {    throw x;  }catch (  InvocationTargetException x) {    x.printStackTrace();  }}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  m_expr.fixupVariables(vars,globalsSize);}  }
class C{  public boolean isForceOnError(){  return this.forceOnError;}  }
class C{  public void runTest() throws Throwable {  Document doc1;  Document doc2;  Node refChild;  Node newChild;  NodeList elementList;  Node elementNode;  Node insertedNode;  doc1=(Document)load("hc_staff",false);  doc2=(Document)load("hc_staff",true);  newChild=doc1.createElement("br");  elementList=doc2.getElementsByTagName("p");  elementNode=elementList.item(1);  refChild=elementNode.getFirstChild();{    boolean success=false;    try {      insertedNode=elementNode.insertBefore(newChild,refChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  public void flush() throws IOException {  if (prefix_ != -1)   bf_.writeBits(prefix_,numBits_);  bf_.writeBits(endOfInfo_,numBits_);  bf_.flush();}  }
class C{  @SuppressWarnings("all") static <T>Promise<T> invokablePromise(Consumer<Promise<T>> promiseConsumer){  return new InvokerPromise<>((Consumer<CallbackHandle<T>>)(Object)promiseConsumer);}  }
class C{  @Override public void write(String str) throws IOException {  out.write(str);}  }
class C{  public BackingStoreException(Throwable cause){  super(cause);}  }
class C{  public boolean remove(Object e){  if (e == null)   return false;  Class<?> eClass=e.getClass();  if (eClass != elementType && eClass.getSuperclass() != elementType)   return false;  int eOrdinal=((Enum<?>)e).ordinal();  int eWordNum=eOrdinal >>> 6;  long oldElements=elements[eWordNum];  elements[eWordNum]&=~(1L << eOrdinal);  boolean result=(elements[eWordNum] != oldElements);  if (result)   size--;  return result;}  }
class C{  public boolean equals(Object o){  if (o instanceof AuthenticatedUsers) {    return (true);  }  return (false);}  }
class C{  public Result createResult(Element elem) throws XACMLException {  Object object=XACMLSDKUtils.getObjectInstance(XACMLConstants.RESULT,elem);  if (object == null) {    return new ResultImpl(elem);  } else {    return (Result)object;  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (getUIClassID().equals(uiClassID)) {    updateUI();  }}  }
class C{  public int previous(){  return NativeCollation.previous(address);}  }
class C{  @Override public void onLoginSuccess(MessageInfo messageInfo,Map requestParamsMap,HttpServletRequest request,HttpServletResponse response,SSOToken ssoToken) throws AuthenticationException {  try {    Map<String,Object> contextMap=persistentCookieModuleWrapper.getContextMap(messageInfo);    contextMap.put(OPENAM_USER_CLAIM_KEY,ssoToken.getPrincipal().getName());    contextMap.put(OPENAM_AUTH_TYPE_CLAIM_KEY,ssoToken.getAuthType());    contextMap.put(OPENAM_SESSION_ID_CLAIM_KEY,ssoToken.getTokenID().toString());    contextMap.put(OPENAM_REALM_CLAIM_KEY,ssoToken.getProperty(SSO_TOKEN_ORGANIZATION_PROPERTY_KEY));    contextMap.put(OPENAM_CLIENT_IP_CLAIM_KEY,ClientUtils.getClientIPAddress(request));    String jwtString=ssoToken.getProperty(JwtSessionModule.JWT_VALIDATED_KEY);    if (jwtString != null) {      messageInfo.getMap().put(JwtSessionModule.JWT_VALIDATED_KEY,Boolean.parseBoolean(jwtString));    }  } catch (  SSOException e) {    DEBUG.error("Could not secure response",e);    throw new AuthenticationException(e.getLocalizedMessage());  }}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiColorChooserUI();  return MultiLookAndFeel.createUIs(mui,((MultiColorChooserUI)mui).uis,a);}  }
class C{  protected void fireMenuKeyPressed(MenuKeyEvent event){  if (DEBUG) {    System.out.println("in JMenuItem.fireMenuKeyPressed for " + getText() + "  "+ KeyStroke.getKeyStrokeForEvent(event));  }  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == MenuKeyListener.class) {      ((MenuKeyListener)listeners[i + 1]).menuKeyPressed(event);    }  }}  }
class C{  private int fractionalConfigToInt(){  if (!fractional) {    return NOT_FRACTIONAL;  } else   if (fractionalExclusive) {    return EXCLUSIVE_FRACTIONAL;  }  return INCLUSIVE_FRACTIONAL;}  }
class C{  public ValidationException(String msg){  super(msg);}  }
class C{  public static byte[] decodeBase64(final byte[] base64Data){  return decodeBase64(base64Data,0,base64Data.length);}  }
class C{  public URL(String protocol,String host,int port,String file,URLStreamHandler handler) throws MalformedURLException {  if (port < -1) {    throw new MalformedURLException("port < -1: " + port);  }  if (protocol == null) {    throw new NullPointerException("protocol == null");  }  if (host != null && host.contains(":") && host.charAt(0) != '[') {    host="[" + host + "]";  }  this.protocol=protocol;  this.host=host;  this.port=port;  file=UrlUtils.authoritySafePath(host,file);  int hash=file.indexOf("#");  if (hash != -1) {    this.file=file.substring(0,hash);    this.ref=file.substring(hash + 1);  } else {    this.file=file;  }  fixURL(false);  if (handler == null) {    setupStreamHandler();    if (streamHandler == null) {      throw new MalformedURLException("Unknown protocol: " + protocol);    }  } else {    streamHandler=handler;  }}  }
class C{  public static Builder builder(){  return new Builder();}  }
class C{  public static boolean isCurrentVersionLessThan(int expectedVersion,boolean notParsed){  String[] parsedVersion=parseVersion(getCurrentVersion());  if (parsedVersion == null) {    return notParsed;  }  return Integer.valueOf(parsedVersion[0]).intValue() < expectedVersion;}  }
class C{  public void registerEngineMimeType(String type,ScriptEngineFactory factory){  if (type == null || factory == null)   throw new NullPointerException();  mimeTypeAssociations.put(type,factory);}  }
class C{  public ToggleButtonModel(){}  }
class C{  public AndSubject(Set<EntitlementSubject> eSubjects){  super(eSubjects);}  }
class C{  private void newClientLateServer1() throws Exception {  debugInfo("Starting newClientLateServer1");  ServerState state=newServerState(secondCSNServer2,firstCSNServer1);  newClientWithChanges(state,secondCSNServer1);  debugInfo("Ending newClientLateServer1");}  }
class C{  @Deprecated public Date(int year,int month,int date,int hrs,int min,int sec){  int y=year + 1900;  if (month >= 12) {    y+=month / 12;    month%=12;  } else   if (month < 0) {    y+=CalendarUtils.floorDivide(month,12);    month=CalendarUtils.mod(month,12);  }  BaseCalendar cal=getCalendarSystem(y);  cdate=(BaseCalendar.Date)cal.newCalendarDate(TimeZone.getDefaultRef());  cdate.setNormalizedDate(y,month + 1,date).setTimeOfDay(hrs,min,sec,0);  getTimeImpl();  cdate=null;}  }
class C{  public void testDivideBigDecimalScaleMathContextHALF_EVEN(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=45;  String b="134432345432345748766876876723342238476237823787879183470";  int bScale=70;  int precision=21;  RoundingMode rm=RoundingMode.HALF_EVEN;  MathContext mc=new MathContext(precision,rm);  String c="2.77923185514690367475E+26";  int resScale=-6;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entityList;  Node entity;  int entityType;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  entityList=docType.getEntities();  assertNotNull("entitiesNotNull",entityList);  for (int indexN10049=0; indexN10049 < entityList.getLength(); indexN10049++) {    entity=(Node)entityList.item(indexN10049);    entityType=(int)entity.getNodeType();    assertEquals("documenttypeGetEntitiesTypeAssert",6,entityType);  }}  }
class C{  public static int roundUpToPowerOfTwo(int i){  i--;  i|=i >>> 1;  i|=i >>> 2;  i|=i >>> 4;  i|=i >>> 8;  i|=i >>> 16;  return i + 1;}  }
class C{  public Mp4TagByteField(Mp4FieldKey id,String value) throws FieldDataInvalidException {  this(id,value,1);}  }
class C{  @Override public synchronized void stop(){  getTransport().disconnect();  channel=null;}  }
class C{  public PlaDirection calc_nearest_exit_restriction_direction(Polyline p_trace_polyline,int p_trace_half_width,int p_layer){  Collection<BrdTraceExitRestriction> trace_exit_restrictions=get_trace_exit_restrictions(p_layer);  if (trace_exit_restrictions.isEmpty())   return null;  PlaShape pin_shape=get_shape(p_layer - first_layer());  PlaPointInt pin_center=center_get();  if (!(pin_shape instanceof ShapeTile))   return null;  double edge_to_turn_dist=r_board.brd_rules.get_pin_edge_to_turn_dist();  if (edge_to_turn_dist < 0)   return null;  ShapeTile offset_pin_shape=((ShapeTile)pin_shape).offset(edge_to_turn_dist + p_trace_half_width);  ArrayList<PlaToupleInt> entries=offset_pin_shape.entrance_points(p_trace_polyline);  if (entries.size() == 0)   return null;  PlaToupleInt latest_entry_tuple=entries.get(entries.size() - 1);  PlaPointFloat trace_entry_location_approx=p_trace_polyline.plaline(latest_entry_tuple.v_a).intersection_approx(offset_pin_shape.border_line(latest_entry_tuple.v_b));  if (trace_entry_location_approx.is_NaN())   return null;  double min_exit_corner_distance=Double.MAX_VALUE;  PlaPointFloat nearest_exit_corner=null;  PlaDirection pin_exit_direction=null;  final double TOLERANCE=1;  for (  BrdTraceExitRestriction curr_exit_restriction : trace_exit_restrictions) {    int curr_intersecting_border_line_no=offset_pin_shape.intersecting_border_line_no(pin_center,curr_exit_restriction.direction);    PlaLineInt curr_pin_exit_ray=new PlaLineInt(pin_center,curr_exit_restriction.direction);    PlaPointFloat curr_exit_corner=curr_pin_exit_ray.intersection_approx(offset_pin_shape.border_line(curr_intersecting_border_line_no));    double curr_exit_corner_distance=curr_exit_corner.distance_square(trace_entry_location_approx);    boolean new_nearest_corner_found=false;    if (curr_exit_corner_distance + TOLERANCE < min_exit_corner_distance) {      new_nearest_corner_found=true;    } else     if (curr_exit_corner_distance < min_exit_corner_distance + TOLERANCE) {      for (int i=1; i < p_trace_polyline.corner_count(); ++i) {        PlaPointFloat curr_trace_corner=p_trace_polyline.corner_approx(i);        double curr_trace_corner_distance=curr_trace_corner.distance_square(curr_exit_corner);        double old_trace_corner_distance=curr_trace_corner.distance_square(nearest_exit_corner);        if (curr_trace_corner_distance + TOLERANCE < old_trace_corner_distance) {          new_nearest_corner_found=true;          break;        } else         if (curr_trace_corner_distance > old_trace_corner_distance + TOLERANCE) {          break;        }      }    }    if (new_nearest_corner_found) {      min_exit_corner_distance=curr_exit_corner_distance;      pin_exit_direction=curr_exit_restriction.direction;      nearest_exit_corner=curr_exit_corner;    }  }  return pin_exit_direction;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.PostalCodeElement createPostalCodeElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.PostalCodeElementImpl();}  }
class C{  public static BufferedImage resizeImage(Image image){  BufferedImage result=new BufferedImage(128,128,BufferedImage.TYPE_INT_ARGB);  Graphics2D graphics=result.createGraphics();  graphics.drawImage(image,0,0,128,128,null);  graphics.dispose();  return result;}  }
class C{  private void updateBaseConfig(BaseConfigType baseConfig,Map values,String role) throws AMConsoleException {  List attrList=baseConfig.getAttribute();  if (role.equals(EntityModel.IDENTITY_PROVIDER)) {    attrList.clear();    baseConfig=createAttributeElement(getIDPEXDataMap(),baseConfig);    attrList=baseConfig.getAttribute();  } else   if (role.equals(EntityModel.SERVICE_PROVIDER)) {    attrList.clear();    baseConfig=createAttributeElement(getSPEXDataMap(),baseConfig);    attrList=baseConfig.getAttribute();  }  for (Iterator it=attrList.iterator(); it.hasNext(); ) {    AttributeElement avpnew=(AttributeElement)it.next();    String name=avpnew.getName();    if (values.keySet().contains(name)) {      Set set=(Set)values.get(name);      if (set != null) {        avpnew.getValue().clear();        avpnew.getValue().addAll(set);      }    }  }}  }
class C{  public void focusLost(FocusEvent e){  setVisible(false);  setSelectionVisible(ownsSelection || e.isTemporary());}  }
class C{  public PageRanges(int member){  super(member);  if (member < 1) {    throw new IllegalArgumentException("Page value < 1 specified");  }}  }
class C{  public AuthorityBinding(Element element) throws SAMLException {  if (element == null) {    SAMLUtilsCommon.debug.message("AuthorityBinding: Input is null.");    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  String tag=null;  tag=element.getLocalName();  if ((tag == null) || (!tag.equals("AuthorityBinding"))) {    SAMLUtilsCommon.debug.message("AuthorityBinding: wrong input");    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("wrongInput"));  }  int i=0;  NamedNodeMap atts=((Node)element).getAttributes();  int attrCount=atts.getLength();  for (i=0; i < attrCount; i++) {    Node att=atts.item(i);    if (att.getNodeType() == Node.ATTRIBUTE_NODE) {      String attName=att.getLocalName();      if (attName == null || attName.length() == 0) {        if (SAMLUtilsCommon.debug.messageEnabled()) {          SAMLUtilsCommon.debug.message("AuthorityBinding: " + "Attribute Name is either null or empty.");        }        throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));      }      if (attName.equals("AuthorityKind")) {        String kind=((Attr)att).getValue().trim();        if (kind == null || kind.length() == 0) {          if (SAMLUtilsCommon.debug.messageEnabled()) {            SAMLUtilsCommon.debug.message("AuthorityBinding: " + "AuthorityKind is null or empty.");          }          throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("missingAttributeValue"));        }        if (kind.equals("samlp:AuthenticationQuery"))         _authorityKind=AuthorityKindType.AUTHENTICATION; else         if (kind.equals("samlp:AttributeQuery"))         _authorityKind=AuthorityKindType.ATTRIBUTE; else         if (kind.equals("samlp:AuthorizationDecisionQuery"))         _authorityKind=AuthorityKindType.AUTHORIZATION; else {          if (SAMLUtilsCommon.debug.messageEnabled()) {            SAMLUtilsCommon.debug.message("AuthorityBinding: " + "The type of authority is illegal!");          }          throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("wrongInput"));        }      } else       if (attName.equals("Binding")) {        _binding=((Attr)att).getValue().trim();        if (_binding == null || _binding.length() == 0) {          if (SAMLUtilsCommon.debug.messageEnabled()) {            SAMLUtilsCommon.debug.message("AuthorityBinding: " + "Binding URI is null or empty.");          }          throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("missingAttributeValue"));        }      } else       if (attName.equals("Location")) {        _location=((Attr)att).getValue().trim();        if (_location == null || _location.length() == 0) {          if (SAMLUtilsCommon.debug.messageEnabled()) {            SAMLUtilsCommon.debug.message("AuthorityBinding:" + " Location URI is null or empty.");          }          throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("missingAttributeValue"));        }      }    }  }  if (_authorityKind == AuthorityKindType.NOT_SUPPORTED) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("AuthorityBinding: " + "AuthorityKind is required attribute");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("missingAttribute"));  }  if (_location == null) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("AuthorityBinding: Location is " + "required attribute");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("missingAttribute"));  }  if (_binding == null) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("AuthorityBinding: Binding is" + " required attribute");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("missingAttribute"));  }  NodeList nodes=element.getChildNodes();  int nodeCount=nodes.getLength();  if (nodeCount > 0) {    for (i=0; i < nodeCount; i++) {      Node currentNode=nodes.item(i);      if (currentNode.getNodeType() == Node.ELEMENT_NODE) {        if (SAMLUtilsCommon.debug.messageEnabled()) {          SAMLUtilsCommon.debug.message("AuthorityBinding: " + " illegal input!");        }        throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("wrongInput"));      }    }  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.TokenElement createTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.TokenElementImpl();}  }
class C{  public boolean isExpanded(int row){  TreeUI tree=getUI();  if (tree != null) {    TreePath path=tree.getPathForRow(this,row);    if (path != null) {      Boolean value=expandedState.get(path);      return (value != null && value.booleanValue());    }  }  return false;}  }
class C{  public boolean equals(Object object){  return super.equals(object) && object instanceof Copies;}  }
class C{  private void rotateScreen(){  final Context context=InstrumentationRegistry.getTargetContext();  final int orientation=context.getResources().getConfiguration().orientation;  Activity activity=activityRule.getActivity();  activity.setRequestedOrientation((orientation == Configuration.ORIENTATION_PORTRAIT) ? ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE : ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);}  }
class C{  private boolean onlyClientSetChanged(RadiusServiceConfig cfg,RadiusServiceConfig currentCfg){  return cfg.getPort() == currentCfg.getPort() && cfg.isEnabled() == currentCfg.isEnabled() && cfg.getThreadPoolConfig() != null && cfg.getThreadPoolConfig().equals(currentCfg.getThreadPoolConfig());}  }
class C{  public float[] justify(float delta){  float[] deltas=new float[info.length * 2];  boolean grow=delta > 0;  if (DEBUG)   System.out.println("delta: " + delta);  int fallbackPriority=-1;  for (int p=0; delta != 0; p++) {    boolean lastPass=p > MAX_PRIORITY;    if (lastPass)     p=fallbackPriority;    float weight=0;    float gslimit=0;    float absorbweight=0;    for (int i=start; i < limit; i++) {      GlyphJustificationInfo gi=info[i];      if ((grow ? gi.growPriority : gi.shrinkPriority) == p) {        if (fallbackPriority == -1) {          fallbackPriority=p;        }        if (i != start) {          weight+=gi.weight;          if (grow) {            gslimit+=gi.growLeftLimit;            if (gi.growAbsorb) {              absorbweight+=gi.weight;            }          } else {            gslimit+=gi.shrinkLeftLimit;            if (gi.shrinkAbsorb) {              absorbweight+=gi.weight;            }          }        }        if (i + 1 != limit) {          weight+=gi.weight;          if (grow) {            gslimit+=gi.growRightLimit;            if (gi.growAbsorb) {              absorbweight+=gi.weight;            }          } else {            gslimit+=gi.shrinkRightLimit;            if (gi.shrinkAbsorb) {              absorbweight+=gi.weight;            }          }        }      }    }    if (!grow) {      gslimit=-gslimit;    }    boolean hitLimit=(weight == 0) || (!lastPass && ((delta < 0) == (delta < gslimit)));    boolean absorbing=hitLimit && absorbweight > 0;    float weightedDelta=delta / weight;    float weightedAbsorb=0;    if (hitLimit && absorbweight > 0) {      weightedAbsorb=(delta - gslimit) / absorbweight;    }    if (DEBUG) {      System.out.println("pass: " + p + ", d: "+ delta+ ", l: "+ gslimit+ ", w: "+ weight+ ", aw: "+ absorbweight+ ", wd: "+ weightedDelta+ ", wa: "+ weightedAbsorb+ ", hit: "+ (hitLimit ? "y" : "n"));    }    int n=start * 2;    for (int i=start; i < limit; i++) {      GlyphJustificationInfo gi=info[i];      if ((grow ? gi.growPriority : gi.shrinkPriority) == p) {        if (i != start) {          float d;          if (hitLimit) {            d=grow ? gi.growLeftLimit : -gi.shrinkLeftLimit;            if (absorbing) {              d+=gi.weight * weightedAbsorb;            }          } else {            d=gi.weight * weightedDelta;          }          deltas[n]+=d;        }        n++;        if (i + 1 != limit) {          float d;          if (hitLimit) {            d=grow ? gi.growRightLimit : -gi.shrinkRightLimit;            if (absorbing) {              d+=gi.weight * weightedAbsorb;            }          } else {            d=gi.weight * weightedDelta;          }          deltas[n]+=d;        }        n++;      } else {        n+=2;      }    }    if (!lastPass && hitLimit && !absorbing) {      delta-=gslimit;    } else {      delta=0;    }  }  if (DEBUG) {    float total=0;    for (int i=0; i < deltas.length; i++) {      total+=deltas[i];      System.out.print(deltas[i] + ", ");      if (i % 20 == 9) {        System.out.println();      }    }    System.out.println("\ntotal: " + total);    System.out.println();  }  return deltas;}  }
class C{  public void assignService(String serviceName,Map attributes) throws SMSException {  addServiceConfig(serviceName,attributes);}  }
class C{  public static void flow(InputStream is,OutputStream os) throws IOException {  byte[] buf=new byte[DEFAULT_BUFFER_SIZE];  int numRead;  while ((numRead=is.read(buf)) >= 0) {    os.write(buf,0,numRead);  }}  }
class C{  public DeleteMsg(DN dn,CSN csn,String entryUUID){  super(new DeleteContext(csn,entryUUID),dn);}  }
class C{  public IIOInvalidTreeException(String message,Node offendingNode){  super(message);  this.offendingNode=offendingNode;}  }
class C{  public DeviceCmyk(float c,float m,float y,float k){  super(new PdfDeviceCs.Cmyk(),new float[]{c > 1 ? 1 : (c > 0 ? c : 0),m > 1 ? 1 : (m > 0 ? m : 0),y > 1 ? 1 : (y > 0 ? y : 0),k > 1 ? 1 : (k > 0 ? k : 0)});  if (c > 1 || c < 0 || m > 1 || m < 0 || y > 1 || y < 0 || k > 1 || k < 0) {    Logger LOGGER=LoggerFactory.getLogger(DeviceCmyk.class);    LOGGER.warn(LogMessageConstant.COLORANT_INTENSITIES_INVALID);  }}  }
class C{  public AffineTransform(float[] flatmatrix){  m00=flatmatrix[0];  m10=flatmatrix[1];  m01=flatmatrix[2];  m11=flatmatrix[3];  if (flatmatrix.length > 5) {    m02=flatmatrix[4];    m12=flatmatrix[5];  }  updateState();}  }
class C{  public void test_map_LargePosition() throws IOException {  int[] sizes={4096,65536};  final int CONTENT_LEN=10;  for (int i=0; i < sizes.length; ++i) {    if (i > 0) {      fileOfReadOnlyFileChannel=File.createTempFile("File_of_readOnlyFileChannel","tmp");      fileOfReadOnlyFileChannel.deleteOnExit();      readOnlyFileChannel=new FileInputStream(fileOfReadOnlyFileChannel).getChannel();    }    writeLargeDataToFile(fileOfReadOnlyFileChannel,sizes[i] + 2 * CONTENT_LEN);    MappedByteBuffer mapped=readOnlyFileChannel.map(MapMode.READ_ONLY,sizes[i],CONTENT_LEN);    assertEquals("Incorrectly mapped file channel for " + sizes[i] + " position (capacity)",CONTENT_LEN,mapped.capacity());    assertEquals("Incorrectly mapped file channel for " + sizes[i] + " position (limit)",CONTENT_LEN,mapped.limit());    assertEquals("Incorrectly mapped file channel for " + sizes[i] + " position (position)",0,mapped.position());    assertEquals(0,readOnlyFileChannel.position());    readOnlyFileChannel.close();    fileOfReadOnlyFileChannel.delete();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(processinginstructionsetdatanomodificationallowederr.class,args);}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  if (m_nodeTests != null) {    for (int i=0; i < m_nodeTests.length; i++) {      m_nodeTests[i].fixupVariables(vars,globalsSize);    }  }}  }
class C{  public MP3AudioHeader(final File seekFile,long startByte) throws IOException, InvalidAudioFrameException {  if (!seek(seekFile,startByte)) {    throw new InvalidAudioFrameException(ErrorMessage.NO_AUDIO_HEADER_FOUND.getMsg(seekFile.getName()));  }}  }
class C{  public static int nextMessageID(){  int nextID=nextMessageID.getAndIncrement();  if (nextID == Integer.MAX_VALUE) {    nextMessageID.set(1);  }  return nextID;}  }
class C{  public List<IdentityDetails> searchIdentityDetails(CrestQuery crestQuery,Map<String,Set<String>> searchModifiers,SSOToken admin) throws ResourceException {  try {    String realm="/";    String objectType="User";    if (searchModifiers != null) {      realm=attractValues("realm",searchModifiers,"/");      objectType=attractValues("objecttype",searchModifiers,"User");    }    AMIdentityRepository repo=getRepo(admin,realm);    IdType idType=getIdType(objectType);    if (idType != null) {      List<AMIdentity> identities=fetchAMIdentities(idType,crestQuery,true,repo,searchModifiers);      List<IdentityDetails> result=new ArrayList<>();      for (      AMIdentity identity : identities) {        result.add(convertToIdentityDetails(identity,null));      }      return result;    }    debug.error("IdentityServicesImpl.searchIdentities unsupported IdType " + objectType);    throw new BadRequestException("searchIdentities: unsupported IdType " + objectType);  } catch (  IdRepoException e) {    debug.error("IdentityServicesImpl.searchIdentities",e);    throw new InternalServerErrorException(e.getMessage());  }catch (  SSOException e) {    debug.error("IdentityServicesImpl.searchIdentities",e);    throw new InternalServerErrorException(e.getMessage());  }catch (  ObjectNotFound e) {    debug.error("IdentityServicesImpl.searchIdentities",e);    throw new NotFoundException(e.getMessage());  }}  }
class C{  public static String fromByteArray(byte[] bytes){  return new String(asCharArray(bytes));}  }
class C{  public void put(E e){  offer(e);}  }
class C{  public static <C extends ConfigurationClient,S extends Configuration>CreateSubCommandHandler<C,S> create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> p,SetRelationDefinition<C,S> r) throws ArgumentException {  return new CreateSubCommandHandler<>(parser,p,r,null,p.child(r));}  }
class C{  public boolean isSpdy(){  return spdyConnection != null;}  }
class C{  public static Bitmap decodeSampledBitmapFromDescriptor(FileDescriptor fileDescriptor,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  return BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);}  }
class C{  private boolean isAReferenceTag(String str){  if (str == null) {    return false;  }  return str.indexOf("<") == 0 && str.lastIndexOf(">") == (str.length() - 1);}  }
class C{  public void windowIconified(WindowEvent e){  ((WindowListener)a).windowIconified(e);  ((WindowListener)b).windowIconified(e);}  }
class C{  public ServerParser(String server){  super(server);}  }
class C{  private void cancelClicked(){  isCanceled=true;  dispose();}  }
class C{  public void onTokenRefresh(){}  }
class C{  private org.forgerock.opendj.ldap.Entry putAttribute(org.forgerock.opendj.ldap.Entry configEntry,String attrName,Syntax syntax,Object... values){  org.forgerock.opendj.ldap.Entry newEntry=LinkedHashMapEntry.deepCopyOfEntry(configEntry);  AttributeType attrType=DirectoryServer.getSchema().getAttributeType(attrName,syntax);  newEntry.replaceAttribute(new LinkedAttribute(AttributeDescription.create(attrType),values));  return newEntry;}  }
class C{  public static boolean isEmpty(Map<?,?> map){  return map == null || map.isEmpty();}  }
class C{  private static int hash(int h){  h+=(h << 15) ^ 0xffffcd7d;  h^=(h >>> 10);  h+=(h << 3);  h^=(h >>> 6);  h+=(h << 2) + (h << 14);  return h ^ (h >>> 16);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.AnalyzedNameElement createAnalyzedNameElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.AnalyzedNameElementImpl();}  }
class C{  public JobImpressions(int value){  super(value,0,Integer.MAX_VALUE);}  }
class C{  public static int dayOfWeek(long day){  long[] remainder=new long[1];  floorDivide(day + Calendar.THURSDAY,7,remainder);  int dayOfWeek=(int)remainder[0];  dayOfWeek=(dayOfWeek == 0) ? 7 : dayOfWeek;  return dayOfWeek;}  }
class C{  public static boolean isConsumerCapability(Capability<?> capability){  return capability == TeslaCapabilities.CAPABILITY_CONSUMER;}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (this == o) {    return true;  }  if (getClass() != o.getClass()) {    return false;  }  AuthenticatorPushPrincipal that=(AuthenticatorPushPrincipal)o;  return Objects.equals(this.name,that.name);}  }
class C{  @Deprecated public void addLogAppender(org.apache.log4j.Appender appender){  if (this.logger instanceof gov.nist.core.LogWriter) {    ((gov.nist.core.LogWriter)this.logger).addAppender(appender);  }}  }
class C{  public ConstraintViolationException(ServerManagedObject<?> managedObject,Collection<LocalizableMessage> messages){  super(getDefaultMessage(messages));  this.managedObject=managedObject;  this.messages=new ArrayList<>(messages);}  }
class C{  public BlockVector(){  this.x=0;  this.y=0;  this.z=0;}  }
class C{  public static void fill(short[] array,short value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public final void lazySet(int newValue){  unsafe.putOrderedInt(this,valueOffset,newValue);}  }
class C{  public JTextComponent(){  super();  enableEvents(AWTEvent.KEY_EVENT_MASK | AWTEvent.INPUT_METHOD_EVENT_MASK);  caretEvent=new MutableCaretEvent(this);  addMouseListener(caretEvent);  addFocusListener(caretEvent);  setEditable(true);  setDragEnabled(false);  setLayout(null);  updateUI();}  }
class C{  public JKServerDownException(final Throwable cause){  super(cause);}  }
class C{  public void writeChangeRecord(ChangeRecordEntry changeRecord) throws IOException {  ifNull(changeRecord);  BufferedWriter writer=exportConfig.getWriter();  int wrapColumn=exportConfig.getWrapColumn();  boolean wrapLines=wrapColumn > 1;  writeDN("dn",changeRecord.getDN(),writer,wrapLines,wrapColumn);  if (changeRecord instanceof AddChangeRecordEntry) {    StringBuilder changeTypeLine=new StringBuilder("changetype: add");    writeLDIFLine(changeTypeLine,writer,wrapLines,wrapColumn);    AddChangeRecordEntry addRecord=(AddChangeRecordEntry)changeRecord;    for (    Attribute a : addRecord.getAttributes()) {      for (      ByteString v : a) {        final String attrName=a.getAttributeDescription().toString();        writeAttribute(attrName,v,writer,wrapLines,wrapColumn);      }    }  } else   if (changeRecord instanceof DeleteChangeRecordEntry) {    StringBuilder changeTypeLine=new StringBuilder("changetype: delete");    writeLDIFLine(changeTypeLine,writer,wrapLines,wrapColumn);  } else   if (changeRecord instanceof ModifyChangeRecordEntry) {    StringBuilder changeTypeLine=new StringBuilder("changetype: modify");    writeLDIFLine(changeTypeLine,writer,wrapLines,wrapColumn);    ModifyChangeRecordEntry modifyRecord=(ModifyChangeRecordEntry)changeRecord;    List<RawModification> mods=modifyRecord.getModifications();    Iterator<RawModification> iterator=mods.iterator();    while (iterator.hasNext()) {      RawModification m=iterator.next();      RawAttribute a=m.getAttribute();      String attrName=a.getAttributeType();      StringBuilder modTypeLine=new StringBuilder();      modTypeLine.append(m.getModificationType());      modTypeLine.append(": ");      modTypeLine.append(attrName);      writeLDIFLine(modTypeLine,writer,wrapLines,wrapColumn);      for (      ByteString s : a.getValues()) {        StringBuilder valueLine=new StringBuilder(attrName);        String stringValue=s.toString();        if (needsBase64Encoding(stringValue)) {          valueLine.append(":: ");          valueLine.append(Base64.encode(s));        } else {          valueLine.append(": ");          valueLine.append(stringValue);        }        writeLDIFLine(valueLine,writer,wrapLines,wrapColumn);      }      if (iterator.hasNext()) {        StringBuilder dashLine=new StringBuilder("-");        writeLDIFLine(dashLine,writer,wrapLines,wrapColumn);      }    }  } else   if (changeRecord instanceof ModifyDNChangeRecordEntry) {    StringBuilder changeTypeLine=new StringBuilder("changetype: moddn");    writeLDIFLine(changeTypeLine,writer,wrapLines,wrapColumn);    ModifyDNChangeRecordEntry modifyDNRecord=(ModifyDNChangeRecordEntry)changeRecord;    StringBuilder newRDNLine=new StringBuilder("newrdn: ");    newRDNLine.append(modifyDNRecord.getNewRDN());    writeLDIFLine(newRDNLine,writer,wrapLines,wrapColumn);    StringBuilder deleteOldRDNLine=new StringBuilder("deleteoldrdn: ");    deleteOldRDNLine.append(modifyDNRecord.deleteOldRDN() ? "1" : "0");    writeLDIFLine(deleteOldRDNLine,writer,wrapLines,wrapColumn);    DN newSuperiorDN=modifyDNRecord.getNewSuperiorDN();    if (newSuperiorDN != null) {      StringBuilder newSuperiorLine=new StringBuilder("newsuperior: ");      newSuperiorLine.append(newSuperiorDN);      writeLDIFLine(newSuperiorLine,writer,wrapLines,wrapColumn);    }  }  writer.newLine();}  }
class C{  public void serialize(Node node) throws IOException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.serialize(node);}  }
class C{  @AfterClass @Override public void classCleanUp() throws Exception {  callParanoiaCheck=false;  super.classCleanUp();  replicationServer.remove();  paranoiaCheck();}  }
class C{  public void paint(Graphics g,JComponent c){  Shape clip=g.getClip();  paintImpl(g,c);  g.setClip(clip);  paintDropLine(g);}  }
class C{  private void onStore(Context context,JsonValue value) throws ResourceException {  JsonValue scriptBindings=json(object());  scriptBindings.put("context",context);  scriptBindings.put("value",value.getObject());  for (  JsonPointer key : Collections.unmodifiableSet(getSchema().getFields().keySet())) {    getSchema().getField(key).onValidate(context,value);  }  execScriptHook(context,ScriptHook.onValidate,value,scriptBindings);  for (  JsonPointer key : Collections.unmodifiableSet(getSchema().getFields().keySet())) {    getSchema().getField(key).onStore(context,value);  }  execScriptHook(context,ScriptHook.onStore,value,scriptBindings);}  }
class C{  @Override public String toString(){  return getPlaceName();}  }
class C{  public void testDivisionKnuthFirstDigitsEqual(){  byte aBytes[]={2,-3,-4,-5,-1,-5,-4,-3,-2,-1,0,1,2,3,4,5};  byte bBytes[]={2,-3,-4,-5,-1,-1,-1,-1};  int aSign=-1;  int bSign=-1;  byte rBytes[]={0,-1,-1,-1,-1,-2,-88,-60,41};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public synchronized void push(final String dn,final String element) throws IOException {  Cursor cursor=queueDatabase.openCursor(null,null);  try {    DatabaseEntry foundChange=new DatabaseEntry();    final DatabaseEntry key=new DatabaseEntry(dn.getBytes("UTF-8"));    final DatabaseEntry data=new DatabaseEntry(element.getBytes("UTF-8"));    OperationStatus retVal=cursor.getSearchKey(key,foundChange,LockMode.DEFAULT);    if (OperationStatus.SUCCESS.equals(retVal)) {      cursor.putCurrent(data);      opsCounter++;    } else     if (OperationStatus.NOTFOUND.equals(retVal)) {      queueDatabase.put(null,key,data);      opsCounter++;    }    if (opsCounter >= cacheSize) {      queueDatabase.sync();      opsCounter=0;    }  } catch (  IOException willNeverOccur) {    willNeverOccur.printStackTrace();    throw willNeverOccur;  } finally {    cursor.close();  }}  }
class C{  public void auditModify(Map<String,Object> finalState,String[] modifiedAttributes){  if (shouldAudit(ConfigOperation.UPDATE)) {    JsonValue afterState=convertObjectToJsonValue(finalState);    AMConfigAuditEventBuilder builder=getBaseBuilder().operation(ConfigOperation.UPDATE).changedFields(modifiedAttributes);    recordBeforeStateIfNotNull(builder,beforeState);    recordAfterStateIfNotNull(builder,afterState);    auditEventPublisher.tryPublish(CONFIG_TOPIC,builder.toEvent());  }}  }
class C{  public void updatePEPDescriptor(String realm,String entityName,Map attrValues) throws AMConsoleException {}  }
class C{  public FSLogoutStatus processHttpSingleLogoutRequest(HttpServletRequest request,HttpServletResponse response,Object ssoToken){  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("Entered FSPrelogoutHandler::" + "processSingleLogoutRequest HTTP Redirect");  }  this.request=request;  this.locale=FSServiceUtils.getLocale(request);  setLogoutURL();  this.response=response;  this.ssoToken=ssoToken;  FSSessionManager sMgr=FSSessionManager.getInstance(metaAlias);  FSSession session=sMgr.getSession(ssoToken);  String sessionIndex=session.getSessionIndex();  try {    if (session != null && session.getOneTime()) {      this.userID=SessionManager.getProvider().getPrincipalName(ssoToken);      FSUtils.debug.message("FSPH:processSingleLogout: Onetime case");    } else {      this.userID=FSLogoutUtil.getUserFromRequest(reqLogout,realm,hostedEntityId,hostedRole,hostedConfig,metaAlias);    }  } catch (  SessionException se) {    FSUtils.debug.error("processSingleLogoutRequest",se);    this.userID=null;  }  if (userID == null) {    FSUtils.debug.message("FSPrelogoutHandler::User Not found");    FSLogoutUtil.returnToSource(response,remoteDescriptor,IFSConstants.SAML_RESPONDER,COMMON_ERROR_URL,reqLogout.getMinorVersion(),hostedConfig,hostedEntityId,userID);    return new FSLogoutStatus(IFSConstants.SAML_RESPONDER);  }  String acceptString=request.getHeader("Accept");  if ((acceptString != null) && (acceptString.indexOf("text/vnd.wap.wml") != -1)) {    isWMLAgent=true;  }  String relayState=reqLogout.getRelayState();  FSLogoutUtil.cleanSessionMapPartnerList(userID,remoteEntityID,metaAlias,session);  FSUtils.debug.message("FSPrelogoutHandler::calling getCurrentProvider");  boolean bHasAnyOtherProvider=false;  HashMap providerMap=new HashMap();  FSSessionPartner sessionPartner=null;  providerMap=FSLogoutUtil.getCurrentProvider(userID,metaAlias,ssoToken);  if (providerMap != null) {    sessionPartner=(FSSessionPartner)providerMap.get(IFSConstants.PARTNER_SESSION);    sessionIndex=(String)providerMap.get(IFSConstants.SESSION_INDEX);    if (sessionPartner != null) {      bHasAnyOtherProvider=true;      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("bHasAnyOtherProvider = " + bHasAnyOtherProvider);      }      currentEntityId=sessionPartner.getPartner();    }  }  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("bHasAnyOtherProvider other than source : " + bHasAnyOtherProvider);  }  FSUtils.debug.message("FSPreLogout::creating FSSingleLogoutHandler");  FSSingleLogoutHandler handlerObj=new FSSingleLogoutHandler();  handlerObj.setHostedDescriptor(hostedDescriptor);  handlerObj.setHostedDescriptorConfig(hostedConfig);  handlerObj.setRealm(realm);  handlerObj.setHostedEntityId(hostedEntityId);  handlerObj.setHostedProviderRole(hostedRole);  handlerObj.setMetaAlias(metaAlias);  handlerObj.setSingleLogoutProtocol(IFSConstants.LOGOUT_SP_REDIRECT_PROFILE);  return handlerObj.processHttpSingleLogoutRequest(response,request,reqLogout,sessionPartner,userID,ssoToken,remoteEntityID,sessionIndex,isWMLAgent,relayState,(hostedRole.equals(IFSConstants.SP) ? IFSConstants.IDP : IFSConstants.SP));}  }
class C{  @Override public int addListener(SSOToken token,IdRepoListener idRepoListener){  if (DEBUG.messageEnabled()) {    DEBUG.message("addListener invoked");  }  if (this.idRepoListener != null) {    throw new IllegalStateException("There is an idRepoListener already registered within this IdRepo");  }  this.idRepoListener=idRepoListener;  String psearchBaseDN=CollectionHelper.getMapAttr(configMap,LDAP_PERSISTENT_SEARCH_BASE_DN);  if (StringUtils.isEmpty(psearchBaseDN)) {    if (DEBUG.warningEnabled()) {      DEBUG.warning("Persistent search base DN is missing, persistent search is disabled.");    }    return 0;  }  String pSearchId=getPSearchId();synchronized (pSearchMap) {    DJLDAPv3PersistentSearch pSearch=pSearchMap.get(pSearchId);    if (pSearch == null) {      String username=CollectionHelper.getMapAttr(configMap,LDAP_SERVER_USER_NAME);      char[] password=CollectionHelper.getMapAttr(configMap,LDAP_SERVER_PASSWORD,"").toCharArray();      pSearch=new DJLDAPv3PersistentSearch(configMap,createConnectionFactory(username,password,1));      if (dnCacheEnabled) {        pSearch.addMovedOrRenamedListener(this);      }      pSearch.addListener(idRepoListener,getSupportedTypes());      pSearch.startQuery();      pSearchMap.put(pSearchId,pSearch);    } else {      pSearch.addListener(idRepoListener,getSupportedTypes());      if (dnCacheEnabled) {        pSearch.addMovedOrRenamedListener(this);      }    }  }  return 0;}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws SAML2Exception {  StringBuffer result=new StringBuffer(1000);  String prefix="";  String uri="";  if (includeNS) {    prefix=SAML2Constants.ASSERTION_PREFIX;  }  if (declareNS) {    uri=SAML2Constants.ASSERTION_DECLARE_STR;  }  result.append("<").append(prefix).append("SubjectLocality").append(uri);  if (address != null && address.trim().length() != 0) {    result.append(" Address=\"").append(address).append("\"");  }  if (dnsName != null && dnsName.trim().length() != 0) {    result.append(" DNSName=\"").append(dnsName).append("\"");  }  result.append("></").append(prefix).append("SubjectLocality>");  return result.toString();}  }
class C{  protected DropTargetContext createDropTargetContext(){  return new DropTargetContext(this);}  }
class C{  public boolean add(E e){  return map.put(e,PRESENT) == null;}  }
class C{  @Override public void nextBytes(byte[] bytes){synchronized (OpenSslJnaCryptoRandom.class) {    if (rdrandEnabled && OpenSslNativeJna.RAND_get_rand_method().equals(OpenSslNativeJna.RAND_SSLeay())) {      close();      throw new RuntimeException("rdrand should be used but default is detected");    }    ByteBuffer buf=ByteBuffer.allocateDirect(bytes.length);    int retVal=OpenSslNativeJna.RAND_bytes(buf,bytes.length);    throwOnError(retVal);    buf.rewind();    buf.get(bytes,0,bytes.length);  }}  }
class C{  public void addMembers(Guid[] guids) throws UMSException {  if (guids == null) {    throw new IllegalArgumentException(i18n.getString(IUMSConstants.NULL_GUIDS));  }  for (int i=0; i < guids.length; i++) {    addMember(guids[i]);  }}  }
class C{  public boolean canOverwriteCurrentInstall(){  return canOverwriteCurrentInstall;}  }
class C{  public static boolean deletePhoto(Uri fileUri){  try {    File mediaStorageDir=getMediaStorageDir();    if (!mediaStorageDir.exists())     return false;    File photoToDelete=new File(fileUri.getPath());    return photoToDelete.delete();  } catch (  Exception e) {    Log.e(TAG,"Failed to delete image!");    Log.e(TAG,e.getLocalizedMessage());    return false;  }}  }
class C{  private void examineUnparsedOperation(ModifyDNOperation modifyDNOperation,ResultCode resultCode){  assertEquals(modifyDNOperation.getResultCode(),resultCode);  assertTrue(modifyDNOperation.getErrorMessage().length() > 0);  assertTrue(modifyDNOperation.getProcessingStartTime() > 0);  assertTrue(modifyDNOperation.getProcessingStopTime() > 0);  assertTrue(modifyDNOperation.getProcessingTime() >= 0);  assertTrue(modifyDNOperation.getErrorMessage().length() > 0);  ensurePostReponseHasRun();}  }
class C{  public X509Principal(String dirName){  super(dirName);}  }
class C{  public TreeMapEntry(final DN name){  super(Reject.checkNotNull(name),new TreeMap<AttributeDescription,Attribute>());}  }
class C{  @Nullable public static BundlingConfig createBundling(DiagCollector diagCollector,BundlingConfigProto bundlingConfig,Method method){  BundlingDescriptorProto bundleDescriptor=bundlingConfig.getBundleDescriptor();  String bundledFieldName=bundleDescriptor.getBundledField();  Field bundledField=method.getInputType().getMessageType().lookupField(bundledFieldName);  if (bundledField == null) {    diagCollector.addDiag(Diag.error(SimpleLocation.TOPLEVEL,"Bundled field missing for bundle config: method = %s, message type = %s, field = %s",method.getFullName(),method.getInputType().getMessageType().getFullName(),bundledFieldName));  }  ImmutableList.Builder<FieldSelector> discriminatorsBuilder=ImmutableList.builder();  for (  String discriminatorName : bundleDescriptor.getDiscriminatorFieldsList()) {    FieldSelector selector=FieldSelector.resolve(method.getInputType().getMessageType(),discriminatorName);    if (selector == null) {      diagCollector.addDiag(Diag.error(SimpleLocation.TOPLEVEL,"Discriminator field missing for bundle config: method = %s, message type = %s, " + "field = %s",method.getFullName(),method.getInputType().getMessageType().getFullName(),discriminatorName));    }    discriminatorsBuilder.add(selector);  }  String subresponseFieldName=bundleDescriptor.getSubresponseField();  Field subresponseField;  if (!subresponseFieldName.isEmpty()) {    subresponseField=method.getOutputType().getMessageType().lookupField(subresponseFieldName);  } else {    subresponseField=null;  }  BundlingSettingsProto bundlingSettings=bundlingConfig.getThresholds();  int elementCountThreshold=bundlingSettings.getElementCountThreshold();  long requestByteThreshold=bundlingSettings.getRequestByteThreshold();  int elementCountLimit=bundlingSettings.getElementCountLimit();  long requestByteLimit=bundlingSettings.getRequestByteLimit();  long delayThresholdMillis=bundlingConfig.getThresholds().getDelayThresholdMillis();  if (bundledFieldName == null) {    return null;  }  return new BundlingConfig(elementCountThreshold,requestByteThreshold,elementCountLimit,requestByteLimit,delayThresholdMillis,bundledField,discriminatorsBuilder.build(),subresponseField);}  }
class C{  private void createRenamedFileNode(final Element rootElement){  Element element=creator.getDocument().createElement("RenamedFile");  element.setAttribute("name",this.fileName);  if (renamed) {    element.setAttribute("newName",this.newFileName);  }  rootElement.appendChild(element);}  }
class C{  @Override public void init() throws ServletException {  super.init();  if (getServletConfig().getInitParameter("secret") != null)   secret=getServletConfig().getInitParameter("secret");  if (getServletConfig().getInitParameter("maxDepth") != null)   maxDepth=Integer.parseInt(getServletConfig().getInitParameter("maxDepth"));  if (getServletConfig().getInitParameter("allowSpecialPaths") != null)   allowSpecialPaths=Boolean.parseBoolean(getServletConfig().getInitParameter("allowSpecialPaths"));}  }
class C{  public JmxClientConnection(JmxConnectionHandler jmxConnectionHandler,AuthenticationInfo authInfo){  super();  nextMessageID=new AtomicInteger(1);  nextOperationID=new AtomicLong(0);  this.jmxConnectionHandler=jmxConnectionHandler;  jmxConnectionHandler.registerClientConnection(this);  setAuthenticationInfo(authInfo);  connectionID=DirectoryServer.newConnectionAccepted(this);  if (connectionID < 0) {    disconnect(DisconnectReason.ADMIN_LIMIT_EXCEEDED,true,ERR_CONNHANDLER_REJECTED_BY_SERVER.get());  }  operationList=new LinkedList<>();  jmxConnectionHandler.getRMIConnector().jmxRmiConnectorNoClientCertificate.addNotificationListener(this,null,null);}  }
class C{  private String updateCacheAndReturnDomain(SSOToken token,String canonOrgDN) throws AMException {  try {    DomainComponentTree dcTree=new DomainComponentTree(token,new Guid(DCTREE_START_DN));    SearchControl scontrol=new SearchControl();    scontrol.setSearchScope(SearchControl.SCOPE_SUB);    PersistentObject po=UMSObject.getObject(token,new Guid(DCTREE_START_DN));    String searchFilter="(inetDomainBaseDN=" + canonOrgDN + ")";    if (debug.messageEnabled()) {      debug.message("DCTree.updateCache-> " + "searchFilter= " + searchFilter);    }    SearchResults results=po.search(searchFilter,null);    int count=0;    String domainName=null;    String canonDomain=null;    while (results.hasMoreElements()) {      DomainComponent dcNode=(DomainComponent)results.next();      count++;      domainName=dcTree.mapDCToDomainName(dcNode);      if (debug.messageEnabled()) {        debug.message("DCTree:updateCache-> " + "domainName= " + domainName);      }      Attr isCanonical=dcNode.getAttribute(INET_CANONICAL_DOMAIN);      if (isCanonical != null) {        canonDomain=domainName;      }    }    results.abandon();    if (count == 1) {      canonDomain=domainName;    }    if (debug.messageEnabled()) {      debug.message("DCTree.updateCache-> " + "returning domain= " + canonDomain);    }    return canonDomain;  } catch (  UMSException umse) {    debug.error("DCTree:updateCache: UMSException",umse);    return null;  }}  }
class C{  public void addAttribute(String name,String type,String value){  names.addElement(name);  types.addElement(type);  values.addElement(value);}  }
class C{  public boolean hasIsdnSubaddress(){  return hasParm(ISUB);}  }
class C{  public static String encode(String clearText){  return encode(clearText,encryptor);}  }
class C{  public QueryResponseWrapper query(String db,Query toQuery) throws IndexParseException, FieldNotIndexedException {  ParsedQuery parsedQuery=ParsedQueryFactory.getParsedQuery(db,toQuery,queries.getSession());  return queries.query(parsedQuery);}  }
class C{  protected void forwardUpdate(DocumentEvent.ElementChange ec,DocumentEvent e,Shape a,ViewFactory f){  boolean wasValid=isLayoutValid(majorAxis);  super.forwardUpdate(ec,e,a,f);  if (wasValid && (!isLayoutValid(majorAxis))) {    Component c=getContainer();    if ((a != null) && (c != null)) {      int pos=e.getOffset();      int index=getViewIndexAtPosition(pos);      Rectangle alloc=getInsideAllocation(a);      if (majorAxis == X_AXIS) {        alloc.x+=majorOffsets[index];        alloc.width-=majorOffsets[index];      } else {        alloc.y+=minorOffsets[index];        alloc.height-=minorOffsets[index];      }      c.repaint(alloc.x,alloc.y,alloc.width,alloc.height);    }  }}  }
class C{  public AccountException(){  super();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createDocument01.class,args);}  }
class C{  private SortedSet<String> createRSListExceptOne(int rsIdToExclude){  SortedSet<String> replServers=new TreeSet<>();  if (rsIdToExclude != RS1_ID) {    replServers.add(getHostPort(rs1Port));  }  if (rsIdToExclude != RS2_ID) {    replServers.add(getHostPort(rs2Port));  }  if (rsIdToExclude != RS3_ID) {    replServers.add(getHostPort(rs3Port));  }  return replServers;}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  EntitiesModel model=(EntitiesModel)getModel();  try {    Map values=getValues();    String universalId=(String)getPageSessionAttribute(EntityEditViewBean.UNIVERSAL_ID);    String serviceName=(String)getPageSessionAttribute(SERVICE_NAME);    model.setServiceAttributeValues(universalId,serviceName,values);    setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","message.updated");  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  public PluginResult.PreOperation invokePreOperationAddPlugins(PreOperationAddOperation addOperation) throws CanceledOperationException {  PluginResult.PreOperation result=null;  for (int i=0; i < preOperationAddPlugins.length; i++) {    DirectoryServerPlugin p=preOperationAddPlugins[i];    if (isInternalOperation(addOperation,p)) {      continue;    }    try {      result=p.doPreOperation(addOperation);    } catch (    CanceledOperationException coe) {      throw coe;    }catch (    Exception e) {      return handlePreOperationException(e,i,preOperationAddPlugins,addOperation,p);    }    if (result == null) {      return handlePreOperationResult(addOperation,i,preOperationAddPlugins,p);    } else     if (!result.continuePluginProcessing()) {      registerSkippedPreOperationPlugins(i,preOperationAddPlugins,addOperation);      return result;    }  }  if (result == null) {    result=PluginResult.PreOperation.continueOperationProcessing();  }  return result;}  }
class C{  public int tabForCoordinate(JTabbedPane pane,int x,int y){  return tabForCoordinate(pane,x,y,true);}  }
class C{  public void paintToolBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintToolBarBackground(context,g,x,y,w,h);}  }
class C{  public final int _exptype2Type(int exptype){  if (NULL != exptype)   return m_extendedTypes[exptype].getNodeType(); else   return NULL;}  }
class C{  protected String paramString(){  String tabPlacementString;  if (tabPlacement == TOP) {    tabPlacementString="TOP";  } else   if (tabPlacement == BOTTOM) {    tabPlacementString="BOTTOM";  } else   if (tabPlacement == LEFT) {    tabPlacementString="LEFT";  } else   if (tabPlacement == RIGHT) {    tabPlacementString="RIGHT";  } else   tabPlacementString="";  String haveRegisteredString=(haveRegistered ? "true" : "false");  return super.paramString() + ",haveRegistered=" + haveRegisteredString+ ",tabPlacement="+ tabPlacementString;}  }
class C{  public RestEndpointServlet(){  this.restletXACMLServiceServlet=new RestletServiceServlet(this,XACMLServiceEndpointApplication.class,"xacmlRestletServiceServlet");  this.restletOAuth2ServiceServlet=new RestletServiceServlet(this,OAuth2ServiceEndpointApplication.class,"oauth2RestletServiceServlet");  this.restletUMAServiceServlet=new RestletServiceServlet(this,UMAServiceEndpointApplication.class,"umaRestletServiceServlet");  this.authenticationFilter=InjectorHolder.getInstance(Key.get(Filter.class,Names.named("AuthenticationFilter")));  this.restletXACMLHttpServlet=new HttpServletWrapper(this,new HttpFrameworkServlet(new RestletAuthnHttpApplication()));}  }
class C{  public int compare(File file1,File file2){  long size1=0;  if (file1.isDirectory()) {    size1=sumDirectoryContents && file1.exists() ? FileUtils.sizeOfDirectory(file1) : 0;  } else {    size1=file1.length();  }  long size2=0;  if (file2.isDirectory()) {    size2=sumDirectoryContents && file2.exists() ? FileUtils.sizeOfDirectory(file2) : 0;  } else {    size2=file2.length();  }  long result=size1 - size2;  if (result < 0) {    return -1;  } else   if (result > 0) {    return 1;  } else {    return 0;  }}  }
class C{  private Expression<?> toExpression(Instruction consumer,Instruction producer){  int opcode=producer.getOpcode();switch (opcode) {case Opcodes.ACONST_NULL:case Opcodes.BIPUSH:case Opcodes.SIPUSH:case Opcodes.DCONST_0:case Opcodes.DCONST_1:case Opcodes.FCONST_0:case Opcodes.FCONST_1:case Opcodes.FCONST_2:case Opcodes.ICONST_0:case Opcodes.ICONST_1:case Opcodes.ICONST_2:case Opcodes.ICONST_3:case Opcodes.ICONST_4:case Opcodes.ICONST_5:case Opcodes.ICONST_M1:case Opcodes.LCONST_0:case Opcodes.LCONST_1:case Opcodes.LDC:case Opcodes.LDC2_W:case Opcodes.LDC_W:    return new LiteralExpression(this,(PushConstant<?>)producer);case Opcodes.ALOAD:case Opcodes.ALOAD_0:case Opcodes.ALOAD_1:case Opcodes.ALOAD_2:case Opcodes.ALOAD_3:case Opcodes.DLOAD:case Opcodes.DLOAD_0:case Opcodes.DLOAD_1:case Opcodes.DLOAD_2:case Opcodes.DLOAD_3:case Opcodes.FLOAD:case Opcodes.FLOAD_0:case Opcodes.FLOAD_1:case Opcodes.FLOAD_2:case Opcodes.FLOAD_3:case Opcodes.ILOAD:case Opcodes.ILOAD_0:case Opcodes.ILOAD_1:case Opcodes.ILOAD_2:case Opcodes.ILOAD_3:case Opcodes.LLOAD:case Opcodes.LLOAD_0:case Opcodes.LLOAD_1:case Opcodes.LLOAD_2:case Opcodes.LLOAD_3:  return new LocalExpression(this,(GetLocal)producer);case Opcodes.GETFIELD:return new GetFieldExpression(this,(GETFIELD)producer);case Opcodes.GETSTATIC:return new GetStaticExpression(this,(GETSTATIC)producer);case Opcodes.ARRAYLENGTH:return new ArrayLengthExpression(this,(ARRAYLENGTH)producer);case Opcodes.CHECKCAST:break;case Opcodes.D2F:case Opcodes.D2I:case Opcodes.D2L:case Opcodes.F2D:case Opcodes.F2I:case Opcodes.F2L:case Opcodes.I2B:case Opcodes.I2C:case Opcodes.I2D:case Opcodes.I2F:case Opcodes.I2L:case Opcodes.I2S:case Opcodes.L2D:case Opcodes.L2F:case Opcodes.L2I:return new CastExpression(this,(Conversion)producer);case Opcodes.AALOAD:case Opcodes.BALOAD:case Opcodes.DALOAD:case Opcodes.CALOAD:case Opcodes.FALOAD:case Opcodes.IALOAD:case Opcodes.LALOAD:case Opcodes.SALOAD:return new GetArrayValueExpression(this,(GetArrayValue)producer);case Opcodes.ANEWARRAY:case Opcodes.MULTIANEWARRAY:case Opcodes.NEWARRAY:return new NewExpression(this,(Instantiation)producer);case Opcodes.NEW:if (consumer instanceof INVOKESPECIAL) return new NewExpression(this,(Instantiation)producer);if (producer.getNext() instanceof DUP) {Instruction c=producer.getNext();while (c != null && !(c instanceof INVOKESPECIAL)) c=c.getConsumers().getFirstConsumer();return consumer == null ? new NewExpression(this,(Instantiation)producer) : getExpression(consumer,c);} else return new NewExpression(this,(Instantiation)producer);case Opcodes.INVOKEINTERFACE:case Opcodes.INVOKESPECIAL:case Opcodes.INVOKESTATIC:case Opcodes.INVOKEVIRTUAL:return new CallExpression(this,(Invoke)producer);case Opcodes.DADD:case Opcodes.IADD:case Opcodes.FADD:case Opcodes.LADD:case Opcodes.ISUB:case Opcodes.FSUB:case Opcodes.DSUB:case Opcodes.LSUB:case Opcodes.DDIV:case Opcodes.FDIV:case Opcodes.IDIV:case Opcodes.LDIV:case Opcodes.DMUL:case Opcodes.FMUL:case Opcodes.IMUL:case Opcodes.LMUL:case Opcodes.DREM:case Opcodes.FREM:case Opcodes.IREM:case Opcodes.LREM:case Opcodes.IAND:case Opcodes.IOR:case Opcodes.IXOR:case Opcodes.LAND:case Opcodes.LOR:case Opcodes.LXOR:case Opcodes.IUSHR:case Opcodes.ISHL:case Opcodes.ISHR:case Opcodes.LSHL:case Opcodes.LSHR:case Opcodes.LUSHR:case Opcodes.DCMPG:case Opcodes.DCMPL:case Opcodes.FCMPG:case Opcodes.FCMPL:case Opcodes.LCMP:return new BinaryOperatorExpression(this,(BinaryComputation)producer);case Opcodes.LNEG:case Opcodes.FNEG:case Opcodes.DNEG:case Opcodes.INEG:return new UnaryOperatorExpression(this,(UnaryComputation)producer);case Opcodes.INSTANCEOF:return new InstanceOfExpression(this,(INSTANCEOF)producer);case Opcodes.DUP:case Opcodes.DUP_X1:case Opcodes.DUP_X2:StackDependencies.Producers producers=producer.getProducersOfArgument(0);Expression<?> expr=getExpression(consumer,producers.getFirstProducer());return expr;case Opcodes.DUP2:case Opcodes.DUP2_X1:case Opcodes.DUP2_X2:System.err.println("Not handling dup2lications");break;default :assert false : "Shouldn't be creating an expression for " + producer;}return null;}  }
class C{  public Builder syntax(String syntaxOID){  this.syntaxOID=syntaxOID;  return this;}  }
class C{  public AttributeList(int initialCapacity){  super(initialCapacity);}  }
class C{  public JKTableRecord addRecord(){  final JKTableRecord record=createEmptyRecord();  addRecord(record);  return record;}  }
class C{  public synchronized boolean acquireValidLock(){  while (!expired) {    if (owner == null) {      owner=Thread.currentThread();      acquireCount=1;      return true;    } else {      if (owner != Thread.currentThread()) {        try {          waitCount++;          this.wait();          waitCount--;        } catch (        InterruptedException ex) {        }      } else {        acquireCount++;        return true;      }    }  }  return false;}  }
class C{  public void insertRow(int row,Object[] rowData){  insertRow(row,convertToVector(rowData));}  }
class C{  public String toString(){  StringBuffer str=new StringBuffer(200);  str=str.append("(").append(getClass().getName()).append("\n");  String actions=getActions();  if (subject != null) {    str=str.append(subject.toString()).append("\n");  }  if (codesource != null) {    str=str.append(codesource.toString()).append("\n");  }  if ((serviceName != null) && (serviceName.length() != 0)) {    str=str.append("serviceName=").append(serviceName).append("\n");  }  if ((resourceName != null) && (resourceName.length() != 0)) {    str=str.append("resourceName=").append(resourceName).append("\n");  }  if ((actions != null) && (actions.length() != 0)) {    str=str.append("actions=").append(actions).append("\n");  }  if ((envParams != null) && !(envParams.isEmpty())) {    str=str.append("envParams=").append(envParams.values()).append("\n");  }  str.append(")");  return str.toString();}  }
class C{  LayoutFocusTraversalPolicy(Comparator<? super Component> c){  super(c);}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation()).setNonQualifierBranches("master,int");  unchecked(null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeappendchildnewchilddiffdocument.class,args);}  }
class C{  public Vector subtract(Vector v){  float x=vals[I1] - v.vals[I1];  float y=vals[I2] - v.vals[I2];  float z=vals[I3] - v.vals[I3];  return new Vector(x,y,z);}  }
class C{  public static byte[] digest(InputStream data,MessageDigest messageDigest) throws GeneralSecurityException, IOException {  byte[] buf=new byte[8192];  int n;  while ((n=data.read(buf)) > 0) {    messageDigest.update(buf,0,n);  }  return messageDigest.digest();}  }
class C{  public void testClose1(){  try {    target.close();    target.next();    fail("Should get SQLException");  } catch (  SQLException e) {  }}  }
class C{  private static void filterServersOnSameHost(RSEvaluations evals,int localServerId){  boolean foundRSInSameVM=false;  final LocalEvaluation eval=new LocalEvaluation();  for (  Entry<Integer,ReplicationServerInfo> entry : evals.bestRSs.entrySet()) {    final Integer rsId=entry.getKey();    final ReplicationServerInfo rsInfo=entry.getValue();    final HostPort hp=HostPort.valueOf(rsInfo.getServerURL());    if (hp.isLocalAddress()) {      if (isLocalReplicationServerPort(hp.getPort())) {        if (!foundRSInSameVM) {          rejectAllWithRSOnDifferentVMThanDS(eval,localServerId);          foundRSInSameVM=true;        }        eval.accept(rsId,rsInfo);      } else       if (!foundRSInSameVM) {        eval.accept(rsId,rsInfo);      } else {        eval.reject(rsInfo,NOTE_RS_ON_DIFFERENT_VM_THAN_DS.get(rsId,localServerId));      }    } else {      eval.reject(rsInfo,NOTE_RS_ON_DIFFERENT_HOST_THAN_DS.get(rsId,localServerId));    }  }  evals.keepBest(eval);}  }
class C{  protected LayoutManager createLayoutManager(){  return getHandler();}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public void deleteStaticGroups(Set groupDNs) throws AMException, SSOException {  Iterator iter=groupDNs.iterator();  while (iter.hasNext()) {    String groupDN=(String)iter.next();    AMStaticGroup group=new AMStaticGroupImpl(super.token,groupDN);    group.delete();  }}  }
class C{  public int skipWhitespaces(){  int skipped=0;  while (pos < length && source.charAt(pos) == ' ') {    skipped++;    pos++;  }  return skipped;}  }
class C{  public void close(){  if (parsingComplete()) {    close(this.input.getCharacterStream());    close(this.input.getByteStream());  }}  }
class C{  private boolean isCompressable(){  MessageBytes contentEncodingMB=response.getMimeHeaders().getValue("Content-Encoding");  if ((contentEncodingMB != null) && (contentEncodingMB.indexOf("gzip") != -1)) {    return false;  }  if (compressionLevel == 2) {    return true;  }  long contentLength=response.getContentLengthLong();  if ((contentLength == -1) || (contentLength > compressionMinSize)) {    if (compressableMimeTypes != null) {      return (startsWithStringArray(compressableMimeTypes,response.getContentType()));    }  }  return false;}  }
class C{  public TagField createField(ID3v23FieldKey id3Key,String value) throws KeyNotFoundException, FieldDataInvalidException {  if (id3Key == null) {    throw new KeyNotFoundException();  }  return super.doCreateTagField(new FrameAndSubId(id3Key.getFrameId(),id3Key.getSubId()),value);}  }
class C{  public static int resetPostDisconnectCount(){  return postDisconnectCounter.getAndSet(0);}  }
class C{  private void waitForAbandon(long expectedCount) throws Exception {  long stopTime=System.currentTimeMillis() + 10000;  while (System.currentTimeMillis() < stopTime) {    if (ldapStatistics.getOperationsAbandoned() == expectedCount) {      return;    }    Thread.sleep(10);  }  throw new AssertionError("Expected abandon count of " + expectedCount + " but got "+ ldapStatistics.getOperationsAbandoned());}  }
class C{  public static void marshal(Object jaxbObject,OutputStream xml){  _marshal(jaxbObject,xml);}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo updateFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return _fooLocalService.updateFoo(foo);}  }
class C{  protected void log(Level level,String methodName,String message,Object[] params){  Object[] args={methodName,message};  logger.log(level,MessageFormat.format(logEntryTemplate,args),params);}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public int read() throws IOException {  int c=in.read();  if (c >= 0)   monitor.setProgress(++nread);  if (monitor.isCanceled()) {    InterruptedIOException exc=new InterruptedIOException("progress");    exc.bytesTransferred=nread;    throw exc;  }  return c;}  }
class C{  private String base_phone_number() throws ParseException {  StringBuilder s=new StringBuilder();  if (debug)   dbg_enter("base_phone_number");  try {    int lc=0;    while (lexer.hasMoreChars()) {      char w=lexer.lookAhead(0);      if (Lexer.isDigit(w) || w == '-' || w == '.' || w == '(' || w == ')') {        lexer.consume(1);        s.append(w);        lc++;      } else       if (lc > 0)       break; else       throw createParseException("unexpected " + w);    }    return s.toString();  }  finally {    if (debug)     dbg_leave("base_phone_number");  }}  }
class C{  public LazyReplicatedMap(MapOwner owner,Channel channel,long timeout,String mapContextName,ClassLoader[] cls){  super(owner,channel,timeout,mapContextName,AbstractReplicatedMap.DEFAULT_INITIAL_CAPACITY,AbstractReplicatedMap.DEFAULT_LOAD_FACTOR,Channel.SEND_OPTIONS_DEFAULT,cls,true);}  }
class C{  @Override public Image createAwtImage(java.awt.Color foreground,java.awt.Color background){  int f=foreground.getRGB();  int g=background.getRGB();  java.awt.Canvas canvas=new java.awt.Canvas();  String bCode=keepNumbers(code);  if (generateChecksum) {    bCode+=getChecksum(bCode);  }  int len=bCode.length();  int nn=(int)n;  int fullWidth=len * (3 + 2 * nn) + (6 + nn);  byte[] bars=getBarsInter25(bCode);  boolean print=true;  int ptr=0;  int height=(int)barHeight;  int[] pix=new int[fullWidth * height];  for (int k=0; k < bars.length; ++k) {    int w=(bars[k] == 0 ? 1 : nn);    int c=g;    if (print) {      c=f;    }    print=!print;    for (int j=0; j < w; ++j) {      pix[ptr++]=c;    }  }  for (int k=fullWidth; k < pix.length; k+=fullWidth) {    System.arraycopy(pix,0,pix,k,fullWidth);  }  return canvas.createImage(new java.awt.image.MemoryImageSource(fullWidth,height,pix,0,fullWidth));}  }
class C{  private void sendNotification(String to,String subject,String message,String realm,String confirmationLink) throws ResourceException {  try {    mailmgr=new ServiceConfigManager(RestUtils.getToken(),MailServerImpl.SERVICE_NAME,MailServerImpl.SERVICE_VERSION);    mailscm=mailmgr.getOrganizationConfig(realm,null);    mailattrs=mailscm.getAttributes();  } catch (  SMSException smse) {    if (debug.errorEnabled()) {      debug.error("{} :: Cannot create service {}",SEND_NOTIF_TAG,MailServerImpl.SERVICE_NAME,smse);    }    throw new InternalServerErrorException("Cannot create the service: " + MailServerImpl.SERVICE_NAME,smse);  }catch (  SSOException ssoe) {    if (debug.errorEnabled()) {      debug.error("{} :: Invalid SSOToken ",SEND_NOTIF_TAG,ssoe);    }    throw new InternalServerErrorException("Cannot create the service: " + MailServerImpl.SERVICE_NAME,ssoe);  }  if (mailattrs == null || mailattrs.isEmpty()) {    if (debug.errorEnabled()) {      debug.error("{} :: no attrs set {}",SEND_NOTIF_TAG,mailattrs);    }    throw new NotFoundException("No service Config Manager found for realm " + realm);  }  String attr=mailattrs.get(MAIL_IMPL_CLASS).iterator().next();  MailServer mailServer;  try {    mailServer=mailServerLoader.load(attr,realm);  } catch (  IllegalStateException e) {    debug.error("{} :: Failed to load mail server implementation: {}",SEND_NOTIF_TAG,attr,e);    throw new InternalServerErrorException("Failed to load mail server implementation: " + attr,e);  }  try {    if (StringUtils.isBlank(subject)) {      subject=mailattrs.get(MAIL_SUBJECT).iterator().next();    }  } catch (  Exception e) {    if (debug.warningEnabled()) {      debug.warning("{} no subject found ",SEND_NOTIF_TAG,e);    }    subject="";  }  try {    if (StringUtils.isBlank(message)) {      message=mailattrs.get(MAIL_MESSAGE).iterator().next();    }    message=message + System.getProperty("line.separator") + confirmationLink;  } catch (  Exception e) {    if (debug.warningEnabled()) {      debug.warning("{} no message found",SEND_NOTIF_TAG,e);    }    message=confirmationLink;  }  try {    mailServer.sendEmail(to,subject,message);  } catch (  MessagingException e) {    if (debug.errorEnabled()) {      debug.error("{} Failed to send mail",SEND_NOTIF_TAG,e);    }    throw new InternalServerErrorException("Failed to send mail",e);  }}  }
class C{  public MemoryBackend(final Schema schema,final EntryReader reader) throws IOException {  this(schema);  load(reader,false);}  }
class C{  public static void execAndCheckOutput(ProcessBuilder builder,String expectedOut,String expectedErr) throws Exception {  Process process=builder.start();  ExecutorService executorService=Executors.newFixedThreadPool(2);  try {    Future<String> errFuture=executorService.submit(streamToStringCallable(process.getErrorStream()));    Future<String> outFuture=executorService.submit(streamToStringCallable(process.getInputStream()));    assertEquals(expectedOut,outFuture.get(10,TimeUnit.SECONDS));    assertEquals(expectedErr,errFuture.get(10,TimeUnit.SECONDS));  }  finally {    executorService.shutdown();    process.waitFor();  }}  }
class C{  private E dequeue(){  final Object[] items=this.items;  @SuppressWarnings("unchecked") E x=(E)items[takeIndex];  items[takeIndex]=null;  if (++takeIndex == items.length)   takeIndex=0;  count--;  if (itrs != null)   itrs.elementDequeued();  notFull.signal();  return x;}  }
class C{  public boolean contains(Object o){  return map.containsKey(o);}  }
class C{  private Attribute checkPasswordHistory(String dn) throws DirectoryException {  Entry entry=DirectoryServer.getEntry(DN.valueOf(dn));  assertNotNull(entry);  AttributeType pwdHistory=DirectoryServer.getSchema().getAttributeType("pwdhistory");  assertNotNull(pwdHistory);  Attribute historyAttr=entry.getAttribute(AttributeDescription.create(pwdHistory));  assertNotNull(historyAttr);  assertThat(historyAttr).hasSize(3);  for (  ByteString v : historyAttr) {    String[] history=v.toString().split("#");    assertEquals(history.length,3);    String[] pwComps=UserPasswordSyntax.decodeUserPassword(history[2]);    PasswordStorageScheme<?> scheme=DirectoryServer.getPasswordStorageScheme(pwComps[0]);    assertTrue(scheme.isStorageSchemeSecure());  }  return historyAttr;}  }
class C{  public TraditionalWorkQueue(){}  }
class C{  public Boolean isMustUnderstand(){  return mustUnderstand;}  }
class C{  public void resetPasswdLockout(String token,boolean resetDuration){  try {    String userDN=null;    if (token != null) {      AMIdentity amIdentity=null;      if (isAccountLockout.getStoreInvalidAttemptsInDS()) {        amIdentity=AuthD.getAuth().getIdentity(IdType.USER,token,loginState.getOrgDN());        userDN=normalizeDN(IdentityUtils.getDN(amIdentity));      } else {        userDN=normalizeDN(token);      }      if (acInfo == null) {        acInfo=isAccountLockout.getAcInfo(userDN,amIdentity);      }      isAccountLockout.resetLockoutAttempts(userDN,amIdentity,acInfo,resetDuration);      warnUser=0;    }    if (DEBUG.messageEnabled()) {      DEBUG.message("resetPasswordFailCount: token=" + token + "  userDN="+ userDN);    }  } catch (  Exception ex) {    DEBUG.message("Exception in resetPasswordLockout",ex);  }}  }
class C{  public void logDeleteRequest(DeleteOperation deleteOperation){}  }
class C{  private StaticUtils(){}  }
class C{  @Inject public ResourceSetTokenDataStore(JavaBeanAdapterFactory adapterFactory,TaskExecutor taskExecutor,TaskFactory taskFactory){  super((JavaBeanAdapter<ResourceSetDescription>)adapterFactory.create(ResourceSetDescription.class),taskExecutor,taskFactory);}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> filterUpdate(Context context,UpdateRequest request,RequestHandler next){  try {    final JsonValue jsonValue=request.getContent();    final Subject callingSubject=contextHelper.getSubject(context);    final String realm=contextHelper.getRealm(context);    retrieveResourceType(jsonValue,callingSubject,realm);  } catch (  EntitlementException eE) {    debug.error("Error filtering policy create CREST request",eE);    return resourceErrorHandler.handleError(context,request,eE).asPromise();  }catch (  ResourceException rE) {    debug.error("Error filtering policy create CREST request",rE);    return rE.asPromise();  }  return transform(next.handleUpdate(context,request));}  }
class C{  private void publishInDebugLogger(String msg){  tracer.trace(msg);}  }
class C{  @Override protected int sizeOf(String key,BitmapDrawable value){  final int bitmapSize=getBitmapSize(value) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  public BigInteger asNumber(){  BigInteger result=null;switch (this.descriptorType) {case TYPE_BOOLEAN:case TYPE_WORD:case TYPE_DWORD:case TYPE_QWORD:case TYPE_BINARY:    if (this.content.length > 8) {      throw new NumberFormatException("Binary data would exceed QWORD");    }  break;case TYPE_GUID:throw new NumberFormatException("GUID cannot be converted to a number.");case TYPE_STRING:result=new BigInteger(getString(),10);break;default :throw new IllegalStateException();}if (result == null) {final byte[] copy=new byte[this.content.length];for (int i=0; i < copy.length; i++) {copy[i]=this.content[this.content.length - (i + 1)];}result=new BigInteger(1,copy);}return result;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.soap.HeaderElement createHeaderElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.soap.impl.HeaderElementImpl();}  }
class C{  public void mouseExited(MouseEvent e){  hasMouseOver=false;  repaint();}  }
class C{  public InvalidPasswordException(String message,String tokenId){  super(message);  this.tokenId=tokenId;}  }
class C{  public static DN valueOf(final String dn,final Schema schema){  Reject.ifNull(dn,schema);  if (dn.length() == 0) {    return ROOT_DN;  }  final Map<String,DN> cache=CACHE.get();  final DN cachedDN=cache.get(dn);  if (cachedDN != null && cachedDN.schema == schema) {    return cachedDN;  }  return decode(new SubstringReader(dn),schema,cache);}  }
class C{  public Tasker addFinisher(TaskFinisher finisher){  this.finisher=finisher;  return this;}  }
class C{  public boolean isAnalysisStarted(MetricReference ref){  return metricStatisticsMap.get(ref).task != null;}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  @Override public boolean isAsyncStarted(){  return request.isAsyncStarted();}  }
class C{  public Node item(int i){  int count=0;  for (int n=dtm.getFirstAttribute(element); n != -1; n=dtm.getNextAttribute(n)) {    if (count == i)     return dtm.getNode(n); else     ++count;  }  return null;}  }
class C{  public SAML2TokenRepositoryException(String error){  super(error);}  }
class C{  public DefaultCaret(){}  }
class C{  public SQLTimeoutException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  private void debug(Integer debugOverride,String msg,EntitlementException error){  if (debugOverride == null) {    debugOverride=Debug.ERROR;  }switch (debugOverride) {case Debug.WARNING:    if (DEBUG.warningEnabled()) {      DEBUG.warning(msg,error);    }  break;case Debug.MESSAGE:if (DEBUG.messageEnabled()) {  DEBUG.message(msg);}break;default :if (DEBUG.errorEnabled()) {DEBUG.error(msg,error);}break;}}  }
class C{  public String colorize(final String message){  if (SUPPORTED) {    final StringBuilder buff=new StringBuilder(start.length() + message.length() + END.length());    buff.append(start).append(message).append(END);    return buff.toString();  } else {    return message;  }}  }
class C{  protected String nativeTypeName(Type type,Field field,String name){  return name;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  List names=(List)rc.getOption(AuthOptions.AUTH_CONFIG_NAMES);  String[] params={realm,names.toString()};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_DELETE_AUTH_CONFIGURATIONS",params);  try {    for (Iterator i=names.iterator(); i.hasNext(); ) {      String name=(String)i.next();      AMAuthConfigUtils.removeNamedConfig(name,realm,adminSSOToken);    }    if (names.size() == 1) {      getOutputWriter().printlnMessage(getResourceString("authentication-delete-auth-configuration-succeeded"));    } else {      getOutputWriter().printlnMessage(getResourceString("authentication-delete-auth-configurations-succeeded"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_DELETE_AUTH_CONFIGURATIONS",params);  } catch (  AMConfigurationException e) {    debugError("DeleteAuthConfiguraton.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_DELETE_AUTH_CONFIGURATIONS",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    debugError("DeleteAuthConfiguraton.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_DELETE_AUTH_CONFIGURATIONS",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    debugError("DeleteAuthConfiguraton.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_DELETE_AUTH_CONFIGURATIONS",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public static void notifyRestoreEnded(Backend<?> backend,RestoreConfig config,boolean successful){  for (  RestoreTaskListener listener : directoryServer.restoreTaskListeners) {    try {      listener.processRestoreEnd(backend,config,successful);    } catch (    Exception e) {      logger.traceException(e);    }  }}  }
class C{  public void endCDATA() throws SAXException {  if (null != m_resultLexicalHandler)   m_resultLexicalHandler.endCDATA();}  }
class C{  public static Service create(QName serviceName){  return new Service(null,serviceName);}  }
class C{  private LazyStyle(String prefix){  if (prefix == null) {    throw new IllegalArgumentException("The prefix must not be null");  }  this.prefix=prefix;  String temp=prefix;  if (temp.endsWith("cellRenderer\"") || temp.endsWith("renderer\"") || temp.endsWith("listRenderer\"")) {    temp=temp.substring(temp.lastIndexOf(":\"") + 1);  }  List<String> sparts=split(temp);  parts=new Part[sparts.size()];  for (int i=0; i < parts.length; i++) {    parts[i]=new Part(sparts.get(i));    if (parts[i].named) {      simple=false;    }  }}  }
class C{  protected int bindUdp(DatagramSocket socket,int portstart,int retries) throws IOException {  InetSocketAddress addr=null;  while (retries > 0) {    try {      addr=new InetSocketAddress(getBind(),portstart);      socket.bind(addr);      setUdpPort(portstart);      log.info(sm.getString("receiverBase.udp.bind",addr));      return 0;    } catch (    IOException x) {      retries--;      if (retries <= 0) {        log.info(sm.getString("receiverBase.unable.bind.udp",addr));        throw x;      }      portstart++;      try {        Thread.sleep(25);      } catch (      InterruptedException ti) {        Thread.currentThread().interrupt();      }      retries=bindUdp(socket,portstart,retries);    }  }  return retries;}  }
class C{  public static void doArtifactResolution(HttpServletRequest request,HttpServletResponse response){  String classMethod="IDPArtifactResolution.doArtifactResolution: ";  try {    String idpMetaAlias=request.getParameter(SAML2MetaManager.NAME_META_ALIAS_IN_URI);    if ((idpMetaAlias == null) || (idpMetaAlias.trim().length() == 0)) {      idpMetaAlias=SAML2MetaUtils.getMetaAliasByUri(request.getRequestURI());    }    if ((idpMetaAlias == null) || (idpMetaAlias.trim().length() == 0)) {      if (SAML2Utils.debug.messageEnabled()) {        SAML2Utils.debug.message(classMethod + "unable to get IDP meta alias from request.");      }      String[] data={idpMetaAlias};      LogUtil.error(Level.INFO,LogUtil.IDP_METADATA_ERROR,data,null);      SAMLUtils.sendError(request,response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,"nullIDPMetaAlias",SAML2Utils.bundle.getString("nullIDPMetaAlias"));      return;    }    String idpEntityID=null;    String realm=null;    try {      idpEntityID=IDPSSOUtil.metaManager.getEntityByMetaAlias(idpMetaAlias);      if ((idpEntityID == null) || (idpEntityID.trim().length() == 0)) {        SAMLUtils.debug.error(classMethod + "Unable to get IDP Entity ID from meta.");        String[] data={idpEntityID};        LogUtil.error(Level.INFO,LogUtil.INVALID_IDP,data,null);        SAMLUtils.sendError(request,response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,"nullIDPEntityID",SAML2Utils.bundle.getString("nullIDPEntityID"));        return;      }      realm=SAML2MetaUtils.getRealmByMetaAlias(idpMetaAlias);    } catch (    SAML2MetaException sme) {      SAML2Utils.debug.error(classMethod + "Unable to get IDP Entity ID from meta.");      String[] data={idpMetaAlias};      LogUtil.error(Level.INFO,LogUtil.IDP_METADATA_ERROR,data,null);      SAMLUtils.sendError(request,response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,"metaDataError",SAML2Utils.bundle.getString("metaDataError"));      return;    }    if (!SAML2Utils.isIDPProfileBindingSupported(realm,idpEntityID,SAML2Constants.ARTIFACT_RESOLUTION_SERVICE,SAML2Constants.SOAP)) {      SAML2Utils.debug.error(classMethod + "Artifact Resolution Service binding: Redirect is not " + "supported for "+ idpEntityID);      String[] data={idpEntityID,SAML2Constants.SOAP};      LogUtil.error(Level.INFO,LogUtil.BINDING_NOT_SUPPORTED,data,null);      SAMLUtils.sendError(request,response,HttpServletResponse.SC_BAD_REQUEST,"unsupportedBinding",SAML2Utils.bundle.getString("unsupportedBinding"));      return;    }    try {      MimeHeaders headers=getHeaders(request);      InputStream is=request.getInputStream();      SOAPMessage msg=messageFactory.createMessage(headers,is);      SOAPMessage reply=null;      reply=onMessage(msg,request,response,realm,idpEntityID);      if (reply != null) {        if (reply.saveRequired()) {          reply.saveChanges();        }        response.setStatus(HttpServletResponse.SC_OK);        putHeaders(reply.getMimeHeaders(),response);        OutputStream outputStream=response.getOutputStream();        reply.writeTo(outputStream);        outputStream.flush();      } else {        response.setStatus(HttpServletResponse.SC_NO_CONTENT);      }    } catch (    SOAPException ex) {      SAML2Utils.debug.error(classMethod + "SOAP error",ex);      String[] data={idpEntityID};      LogUtil.error(Level.INFO,LogUtil.INVALID_SOAP_MESSAGE,data,null);      SAMLUtils.sendError(request,response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,"invalidSOAPMessage",SAML2Utils.bundle.getString("invalidSOAPMessage") + " " + ex.getMessage());      return;    }catch (    SAML2Exception se) {      SAML2Utils.debug.error(classMethod + "SAML2 error",se);      SAMLUtils.sendError(request,response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,"unableToCreateArtifactResponse",SAML2Utils.bundle.getString("unableToCreateArtifactResponse") + " " + se.getMessage());      return;    }  } catch (  IOException ioe) {    SAML2Utils.debug.error(classMethod + "I/O rrror",ioe);  }}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  List attrValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);  if ((datafile == null) && (attrValues == null)) {    throw new CLIException(getResourceString("missing-attributevalues"),ExitCodes.INCORRECT_OPTION,rc.getSubCommand().getName());  }  Map attributeValues=AttributeValues.parse(getCommandManager(),datafile,attrValues);  try {    String[] params={realm,serviceName};    OrganizationConfigManager ocm=new OrganizationConfigManager(adminSSOToken,realm);    Set assignedServices=ocm.getAssignedServices(true);    AMIdentityRepository repo=new AMIdentityRepository(adminSSOToken,realm);    AMIdentity ai=repo.getRealmIdentity();    Set servicesFromIdRepo=ai.getAssignedServices();    boolean modified=false;    if (assignedServices.contains(serviceName)) {      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_REALM_REMOVE_SERVICE_ATTR_VALUES",params);      Map origValues=ocm.getServiceAttributes(serviceName);      if (AttributeValues.mergeAttributeValues(origValues,attributeValues,false)) {        ocm.modifyService(serviceName,origValues);      }      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_REALM_REMOVE_SERVICE_ATTR_VALUES",params);      modified=true;    }    if (servicesFromIdRepo.contains(serviceName)) {      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_REALM_REMOVE_SERVICE_ATTR_VALUES",params);      Map origValues=ai.getServiceAttributes(serviceName);      if (AttributeValues.mergeAttributeValues(origValues,attributeValues,false)) {        ai.modifyService(serviceName,origValues);      }      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_REALM_REMOVE_SERVICE_ATTR_VALUES",params);      modified=true;    }    if (modified) {      outputWriter.printlnMessage(getResourceString("realm-remove-service-attributes-succeed"));      outputWriter.printlnMessage("");      outputWriter.printlnMessage(FormatUtils.printAttributeValues("{0}={1}",attributeValues));    } else {      outputWriter.printlnMessage(MessageFormat.format(getResourceString("realm-remove-service-attributes-not-assigned"),(Object[])params));    }  } catch (  IdRepoException e) {    String[] args={realm,e.getMessage()};    debugError("RealmRemoveServiceAttributes.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REALM_REMOVE_SERVICE_ATTR_VALUES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,e.getMessage()};    debugError("RealmRemoveServiceAttributes.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REALM_REMOVE_SERVICE_ATTR_VALUES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={realm,e.getMessage()};    debugError("RealmRemoveServiceAttributes.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REALM_REMOVE_SERVICE_ATTR_VALUES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  @Override @SuppressWarnings("dep-ann") public boolean isRequestedSessionIdFromUrl(){  return this._getHttpServletRequest().isRequestedSessionIdFromUrl();}  }
class C{  public void rejectDrop(){  getDropTargetContext().rejectDrop();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testName;  Node cdataNode;  int nodeType;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("name");  testName=(Element)elementList.item(1);  cdataNode=testName.getLastChild();  nodeType=(int)cdataNode.getNodeType();  if (equals(3,nodeType)) {    cdataNode=doc.createCDATASection("");    nodeType=(int)cdataNode.getNodeType();  }  assertEquals("nodeTypeCDATA",4,nodeType);}  }
class C{  Node(K key,Object value,Node<K,V> next){  this.key=key;  this.value=value;  this.next=next;}  }
class C{  public static boolean seekForV1OrV11Tag(ByteBuffer byteBuffer){  byte[] buffer=new byte[FIELD_TAGID_LENGTH];  byteBuffer.get(buffer,0,FIELD_TAGID_LENGTH);  return (Arrays.equals(buffer,TAG_ID));}  }
class C{  private static boolean test(ODatabaseDocumentPool pool,String dbURL,String user,String password,boolean finalTry){  ODatabaseDocumentTx db=null;  try {    logger.info("Verifying the DB.");    db=pool.acquire(dbURL,user,password);    Iterator<ODocument> iter=db.browseClass("config");    if (iter.hasNext()) {      iter.next();    }  } catch (  OException ex) {    if (finalTry) {      logger.info("Exceptions encountered in verifying the DB",ex);    } else {      logger.debug("DB exception in testing.",ex);    }    return false;  } finally {    if (db != null) {      db.close();    }  }  return true;}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified,long networkTimeMs){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;  this.networkTimeMs=networkTimeMs;}  }
class C{  public void eval(String script){  mClientProxy.transact(script);}  }
class C{  public Ansi(final Attribute attr,final AnsiColor foreground,final AnsiColor background){  init(attr,foreground,background);}  }
class C{  public void registerServer(Map<ServerProperty,Object> serverProperties) throws ADSContextException {  DN dn=makeDNFromServerProperties(serverProperties);  AddRequest request=newAddRequest(dn);  for (  ServerProperty prop : serverProperties.keySet()) {    Attribute attribute=makeAttrFromServerProperty(prop,serverProperties.get(prop));    if (attribute != null) {      request.addAttribute(attribute);    }  }  request.addAttribute("objectclass","top","ds-cfg-branch","extensibleobject");  try {    if (!isExistingEntry(getServerContainerDN())) {      createContainerEntry(getServerContainerDN());    }    throwIfNotSuccess(connectionWrapper.getConnection().add(request));    if (serverProperties.containsKey(ServerProperty.INSTANCE_PUBLIC_KEY_CERTIFICATE)) {      registerInstanceKeyCertificate(serverProperties,dn);    }    Map<ServerGroupProperty,Object> serverGroupProperties=new HashMap<>();    Set<String> memberList=getServerGroupMemberList(ALL_SERVERGROUP_NAME);    if (memberList == null) {      memberList=new HashSet<>();    }    String newMember="cn=" + Rdn.escapeValue(serverProperties.get(ServerProperty.ID));    memberList.add(newMember);    serverGroupProperties.put(ServerGroupProperty.MEMBERS,memberList);    updateServerGroup(ALL_SERVERGROUP_NAME,serverGroupProperties);    Set<?> rawGroupList=(Set<?>)serverProperties.get(ServerProperty.GROUPS);    Set<String> groupList=new HashSet<>();    if (rawGroupList != null) {      for (      Object elm : rawGroupList) {        groupList.add(elm.toString());      }    }    groupList.add(ALL_SERVERGROUP_NAME);    serverProperties.put(ServerProperty.GROUPS,groupList);    updateServer(serverProperties);  } catch (  ADSContextException ace) {    throw ace;  }catch (  LdapException x) {    if (x.getResult().getResultCode().equals(ResultCode.ENTRY_ALREADY_EXISTS)) {      throw new ADSContextException(ErrorType.ALREADY_REGISTERED);    }    throw new ADSContextException(ErrorType.ERROR_UNEXPECTED,x);  }}  }
class C{  public boolean isDoubleBuffered(){  return getFlag(IS_DOUBLE_BUFFERED);}  }
class C{  public DateFormatter(DateFormat format){  super(format);  setFormat(format);}  }
class C{  public int next(){  return this.icuIterator.next();}  }
class C{  private static String toString(int[][] ints){  StringBuilder sb=new StringBuilder("[");  for (int i=0; i < ints.length; i++) {    if (i != 0) {      sb.append(",");    }    sb.append(toString(ints[i]));  }  sb.append("]");  return sb.toString();}  }
class C{  public void add(MutableTreeNode newChild){  if (newChild != null && newChild.getParent() == this)   insert(newChild,getChildCount() - 1); else   insert(newChild,getChildCount());}  }
class C{  public void propertyResolved(ELContext context,Object base,Object property){}  }
class C{  public boolean innermostDelegateEquals(final Connection c){  final Connection innerCon=getInnermostDelegateInternal();  if (innerCon == null) {    return c == null;  }  return innerCon.equals(c);}  }
class C{  public boolean delete(Long attributeID){  if (attributeID == null) {    throw new IllegalArgumentException("primary key null.");  }  return database.delete(DATABASE_TABLE,KEY_EVENTATTRIBUTEID + "=" + attributeID,null) > 0;}  }
class C{  public static double[] copyOfRange(double[] original,int from,int to){  int newLength=to - from;  if (newLength < 0)   throw new IllegalArgumentException(from + " > " + to);  double[] copy=new double[newLength];  System.arraycopy(original,from,copy,0,Math.min(original.length - from,newLength));  return copy;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeclonetruecopytext.class,args);}  }
class C{  private boolean isSameCircleOfTrust(BaseConfigType config,String realm,String entityID){  boolean isTrusted=false;  if (config != null) {    Map attr=IDFFMetaUtils.getAttributes(config);    List cotList=(List)attr.get(IDFFCOTUtils.COT_LIST);    if ((cotList != null) && !cotList.isEmpty()) {      for (Iterator iter=cotList.iterator(); iter.hasNext(); ) {        String cotName=(String)iter.next();        if (cotManager.isInCircleOfTrust(realm,cotName,COTConstants.IDFF,entityID)) {          isTrusted=true;        }      }    }  }  return isTrusted;}  }
class C{  public void mark(int readAheadLimit) throws IOException {synchronized (lock) {    ensureOpen();    markedPos=pos;  }}  }
class C{  public SOAPMessage secureResponse(SOAPMessage soapMessage,Map sharedData) throws SOAPBindingException {  Utils.debug.message("MessageProcessor.secureResponse : Init");  try {    Message req=(Message)sharedData.get(SOAPBindingConstants.LIBERTY_REQUEST);    addCorrelationHeader(soapMessage,req);    if (_config.isResponseSignEnabled()) {      soapMessage=signMessage(soapMessage,null,null);    }    if (Utils.debug.messageEnabled()) {      Utils.debug.message("MessageProcessor.secureResponse: " + XMLUtils.print(soapMessage.getSOAPPart().getEnvelope()));    }    return soapMessage;  } catch (  Exception ex) {    Utils.debug.error("MessageProcessor.secureResponse: " + "Failed in securing the response",ex);    throw new SOAPBindingException(Utils.bundle.getString("secureResponseFailed"));  }}  }
class C{  @Override public synchronized void publish(LogRecord record){  if (!isLoggable(record)) {    return;  }  String msg;  try {    msg=getFormatter().format(record);  } catch (  Exception ex) {    reportError(null,ex,ErrorManager.FORMAT_FAILURE);    return;  }  try {    if (!doneHeader) {      writer.write(getFormatter().getHead(this));      doneHeader=true;    }    writer.write(msg);  } catch (  Exception ex) {    reportError(null,ex,ErrorManager.WRITE_FAILURE);  }}  }
class C{  Resource(Principal principal,Guid guid) throws UMSException {  super(principal,guid);  verifyClass();}  }
class C{  public synchronized int capacity(){  return elementData.length;}  }
class C{  public void GetInstance02(boolean mode) throws CertificateException, NoSuchProviderException, IllegalArgumentException, CRLException {  try {    CertificateFactory.getInstance(null,mProv.getName());    fail("NullPointerException or CertificateException must be thrown when type is null");  } catch (  CertificateException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertificateFactory.getInstance(invalidValues[i],mProv.getName());      fail("CertificateException must be thrown (type: ".concat(invalidValues[i]).concat(")"));    } catch (    CertificateException e) {    }  }  String prov=null;  for (int i=0; i < validValues.length; i++) {    try {      CertificateFactory.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (type: ".concat(validValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }    try {      CertificateFactory.getInstance(validValues[i],"");      fail("IllegalArgumentException must be thrown when provider is empty (type: ".concat(validValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  for (int i=0; i < validValues.length; i++) {    for (int j=1; j < invalidValues.length; j++) {      try {        CertificateFactory.getInstance(validValues[i],invalidValues[j]);        fail("NoSuchProviderException must be thrown (type: ".concat(validValues[i]).concat(" provider: ").concat(invalidValues[j]).concat(")"));      } catch (      NoSuchProviderException e) {      }    }  }  CertificateFactory cerF;  for (int i=0; i < validValues.length; i++) {    cerF=CertificateFactory.getInstance(validValues[i],mProv.getName());    assertEquals("Incorrect type",cerF.getType(),validValues[i]);    assertEquals("Incorrect provider",cerF.getProvider().getName(),mProv.getName());    checkResult(cerF,mode);  }}  }
class C{  public String readHeaders() throws FileUploadIOException, MalformedStreamException {  int i=0;  byte b;  ByteArrayOutputStream baos=new ByteArrayOutputStream();  int size=0;  while (i < HEADER_SEPARATOR.length) {    try {      b=readByte();    } catch (    FileUploadIOException e) {      throw e;    }catch (    IOException e) {      throw new MalformedStreamException("Stream ended unexpectedly");    }    if (++size > HEADER_PART_SIZE_MAX) {      throw new MalformedStreamException(String.format("Header section has more than %s bytes (maybe it is not properly terminated)",Integer.valueOf(HEADER_PART_SIZE_MAX)));    }    if (b == HEADER_SEPARATOR[i]) {      i++;    } else {      i=0;    }    baos.write(b);  }  String headers=null;  if (headerEncoding != null) {    try {      headers=baos.toString(headerEncoding);    } catch (    UnsupportedEncodingException e) {      headers=baos.toString();    }  } else {    headers=baos.toString();  }  return headers;}  }
class C{  @Override public boolean markSupported(){  return in.markSupported();}  }
class C{  public String generateName(final Random random,final int length,final char startingSymbol){  return generateName(null,length,startingSymbol);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(notationgetsystemidnull.class,args);}  }
class C{  public NamespaceSupport(){  reset();}  }
class C{  @Override public Position deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context) throws JsonParseException {  JsonArray rawCoordinates=json.getAsJsonArray();  double longitude=rawCoordinates.get(0).getAsDouble();  double latitude=rawCoordinates.get(1).getAsDouble();  if (rawCoordinates.size() > 2) {    double altitude=rawCoordinates.get(2).getAsDouble();    return Position.fromCoordinates(longitude,latitude,altitude);  }  return Position.fromCoordinates(longitude,latitude);}  }
class C{  public ServerCloneException(String s,Exception cause){  super(s);  initCause(null);  detail=cause;}  }
class C{  public void dismiss(JSpinner spinner){  spinner.removeChangeListener(this);}  }
class C{  private TopologyMsg waitAndProcessTopoFromRemoteRS() throws DirectoryException {  ReplicationMsg msg;  try {    msg=session.receive();  } catch (  Exception e) {    LocalizableMessage message=LocalizableMessage.raw(e.getLocalizedMessage());    throw new DirectoryException(ResultCode.OTHER,message);  }  if (!(msg instanceof TopologyMsg)) {    if (msg instanceof StopMsg) {      return null;    }    LocalizableMessage message=ERR_REPLICATION_PROTOCOL_MESSAGE_TYPE.get(msg.getClass().getCanonicalName(),"TopologyMsg");    throw new DirectoryException(ResultCode.OTHER,message);  }  TopologyMsg inTopoMsg=(TopologyMsg)msg;  if (getProtocolVersion() >= ProtocolVersion.REPLICATION_PROTOCOL_V4) {    RSInfo rsInfo=inTopoMsg.getRsInfos().get(0);    weight=rsInfo.getWeight();  }  if (generationId == localGenerationId) {    if (logger.isTraceEnabled()) {      logger.trace("In " + replicationServer.getMonitorInstanceName() + " RS with serverID="+ serverId+ " is connected with the right generation ID, same as local ="+ generationId);    }  } else {    checkGenerationId();  }  return inTopoMsg;}  }
class C{  @Override public String format(DateTimeFormatter formatter){  Objects.requireNonNull(formatter,"formatter");  return formatter.format(this);}  }
class C{  @Override public void bind(Name name,Object obj) throws NamingException {  getBoundContext().bind(parseName(name),obj);}  }
class C{  public String toLDIFString(){  StringBuilder buffer=new StringBuilder();  for (  StringBuilder ldifLine : toLDIF()) {    buffer.append(ldifLine);    buffer.append(EOL);  }  return buffer.toString();}  }
class C{  private View createGapView(){  final View view=new View(mContext);  final int width=directionVertical() ? ViewGroup.LayoutParams.MATCH_PARENT : (int)dpToPx(GAP_SIZE);  final int height=directionVertical() ? (int)dpToPx(GAP_SIZE) : ViewGroup.LayoutParams.MATCH_PARENT;  final ViewGroup.LayoutParams params=new ViewGroup.LayoutParams(width,height);  if (directionVertical()) {    params.width=1;  } else {    params.height=1;  }  view.setLayoutParams(params);  return view;}  }
class C{  static final void localInit(){  int p=probeGenerator.addAndGet(PROBE_INCREMENT);  int probe=(p == 0) ? 1 : p;  long seed=mix64(seeder.getAndAdd(SEEDER_INCREMENT));  Thread t=Thread.currentThread();  UNSAFE.putLong(t,SEED,seed);  UNSAFE.putInt(t,PROBE,probe);}  }
class C{  protected void updateMonitorCount(DN baseDN,String attr) throws Exception {  monitorDN=baseDN;  monitorAttr=attr;  lastCount=getMonitorAttrValue(baseDN,attr);}  }
class C{  private BigInteger inflated(){  if (intVal == null) {    return BigInteger.valueOf(intCompact);  }  return intVal;}  }
class C{  public void removeAllElements(){  if (null == m_map)   return;  for (int i=0; i < m_firstFree; i++) {    m_map[i]=DTM.NULL;  }  m_firstFree=0;}  }
class C{  public boolean isModifyAcceptable(ManagementContext context,ManagedObject<?> managedObject,Collection<LocalizableMessage> unacceptableReasons) throws LdapException {  return true;}  }
class C{  public void paintSplitPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public TextTablePrinter(OutputStream stream){  this(new BufferedWriter(new OutputStreamWriter(stream)));}  }
class C{  public DiskFileItem(String fieldName,String contentType,boolean isFormField,String fileName,int sizeThreshold,File repository){  this.fieldName=fieldName;  this.contentType=contentType;  this.isFormField=isFormField;  this.fileName=fileName;  this.sizeThreshold=sizeThreshold;  this.repository=repository;}  }
class C{  public void concatenate(SIPObjectList otherList){  super.concatenate(otherList);}  }
class C{  private Base64(){}  }
class C{  public void testMacClone() throws NoSuchAlgorithmException, CloneNotSupportedException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac[] macs=createMacs();  assertNotNull("Mac objects were not created",macs);  for (int i=0; i < macs.length; i++) {    try {      Mac mac1=(Mac)macs[i].clone();      assertEquals(mac1.getAlgorithm(),macs[i].getAlgorithm());      assertEquals(mac1.getProvider(),macs[i].getProvider());      assertFalse(macs[i].equals(mac1));    } catch (    CloneNotSupportedException e) {    }  }}  }
class C{  private static void createPolicyAdminPolicy(PolicyManager policyManager,String orgDN,String orgID){  String classMethod="UpgradeUtils:createRealmReadOnlyPolicy";  try {    String policyName=orgID + "^^PolicyAdmin";    Policy realmPolicy=new Policy(policyName,null,false,true);    String resourceName="sms://*" + orgDN + "/"+ POLICY_SERVICE;    Rule rule=getRule(DELEGATION_SERVICE,resourceName);    if (rule != null) {      realmPolicy.addRule(rule);    }    String policyAdminRoleUniversalID=getUniversalID(orgDN,ORG_POLICY_ADMIN_ROLE);    Subject subject=getSubject(policyManager,policyAdminRoleUniversalID);    if (subject != null) {      realmPolicy.addSubject(DELEGATION_SUBJECT,subject,false);    }    policyManager.addPolicy(realmPolicy);  } catch (  Exception e) {    debug.error(classMethod + "Error creating policy admin policy",e);  }}  }
class C{  public SAMLResponderException(String s){  super(s);}  }
class C{  public void write(char cbuf[],int off,int len) throws IOException {  if (sink == null) {    throw new IOException("Pipe not connected");  } else   if ((off | len | (off + len)| (cbuf.length - (off + len))) < 0) {    throw new IndexOutOfBoundsException();  }  sink.receive(cbuf,off,len);}  }
class C{  public boolean isSendPropertyNotification(String key){  return hotSwappableSessionServiceConfig.isSendPropertyNotification(key);}  }
class C{  private void checkReturnType(Method method){  TypeVariable<Method> typeParameter=getTypeParameter(method);  Type genericReturnType=method.getGenericReturnType();  assertEquals(typeParameter,genericReturnType);  assertInstanceOf(TypeVariable.class,genericReturnType);  assertEquals(method,((TypeVariable<?>)genericReturnType).getGenericDeclaration());}  }
class C{  public void remove(KeyStroke key){  super.remove(key);  if (getComponent() != null) {    getComponent().componentInputMapChanged(this);  }}  }
class C{  @Override public int hashCode(){  return transition.hashCode() ^ offsetBefore.hashCode() ^ Integer.rotateLeft(offsetAfter.hashCode(),16);}  }
class C{  private ResourceResponse patchResourceById(Context context,Request request,String resourceId,String revision,List<PatchOperation> patchOperations) throws ResourceException {  idRequired(request.getResourcePath());  noSubObjects(request.getResourcePath());  ResourceResponse resource=readResource(context,repoId(resourceId));  return patchResource(context,request,resource,revision,patchOperations);}  }
class C{  public Set searchDynamicGroups(String wildcard,Map avPairs,int level) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),getSearchFilter(AMObject.DYNAMIC_GROUP),wildcard,avPairs,level);}  }
class C{  public T mapping(String mapping){  jsonValue.put(MAPPING,mapping);  return self();}  }
class C{  public OBJ_ADAPTER(){  this("");}  }
class C{  private String openFile(String file){  BufferedReader br=null;  try {    br=new BufferedReader(new FileReader(file));    StringBuffer sb=new StringBuffer(5000);    String temp;    while ((temp=br.readLine()) != null) {      sb.append(temp);    }    return sb.toString();  } catch (  FileNotFoundException fnf) {    debug.error("FedletConfigurationImpl.getConfiguration: " + file + " for component "+ componentName,fnf);    return null;  }catch (  IOException ioe) {    debug.error("FedletConfigurationImpl.getConfiguration:" + file + " for component "+ componentName,ioe);    return null;  } finally {    if (br != null) {      try {        br.close();      } catch (      IOException ioe) {      }    }  }}  }
class C{  public String toString(){  validate();  return (ssm.toString());}  }
class C{  public static void write(String data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  void distributeSpace(int space,boolean keepHidden){  boolean lValid=(components[0] != null && components[0].isVisible());  boolean rValid=(components[1] != null && components[1].isVisible());  if (keepHidden) {    if (lValid && getSizeForPrimaryAxis(components[0].getSize()) == 0) {      lValid=false;      if (rValid && getSizeForPrimaryAxis(components[1].getSize()) == 0) {        lValid=true;      }    } else     if (rValid && getSizeForPrimaryAxis(components[1].getSize()) == 0) {      rValid=false;    }  }  if (lValid && rValid) {    double weight=splitPane.getResizeWeight();    int lExtra=(int)(weight * (double)space);    int rExtra=(space - lExtra);    sizes[0]+=lExtra;    sizes[1]+=rExtra;    int lMin=getMinimumSizeOfComponent(components[0]);    int rMin=getMinimumSizeOfComponent(components[1]);    boolean lMinValid=(sizes[0] >= lMin);    boolean rMinValid=(sizes[1] >= rMin);    if (!lMinValid && !rMinValid) {      if (sizes[0] < 0) {        sizes[1]+=sizes[0];        sizes[0]=0;      } else       if (sizes[1] < 0) {        sizes[0]+=sizes[1];        sizes[1]=0;      }    } else     if (!lMinValid) {      if (sizes[1] - (lMin - sizes[0]) < rMin) {        if (sizes[0] < 0) {          sizes[1]+=sizes[0];          sizes[0]=0;        }      } else {        sizes[1]-=(lMin - sizes[0]);        sizes[0]=lMin;      }    } else     if (!rMinValid) {      if (sizes[0] - (rMin - sizes[1]) < lMin) {        if (sizes[1] < 0) {          sizes[0]+=sizes[1];          sizes[1]=0;        }      } else {        sizes[0]-=(rMin - sizes[1]);        sizes[1]=rMin;      }    }    if (sizes[0] < 0) {      sizes[0]=0;    }    if (sizes[1] < 0) {      sizes[1]=0;    }  } else   if (lValid) {    sizes[0]=Math.max(0,sizes[0] + space);  } else   if (rValid) {    sizes[1]=Math.max(0,sizes[1] + space);  }}  }
class C{  public boolean pull_tight(AlgoPullTight p_pull_tight_algo){  if (!is_on_the_board())   return false;  if (is_shove_fixed())   return false;  if (!is_nets_normal())   return false;  if (p_pull_tight_algo.only_net_no_arr.size() > 0 && !nets_equal(p_pull_tight_algo.only_net_no_arr)) {    return false;  }  if (!net_nos.is_empty()) {    if (!r_board.brd_rules.nets.get(net_nos.first()).get_class().can_pull_tight()) {      return false;    }  }  Polyline new_lines=p_pull_tight_algo.pull_tight(polyline,get_layer(),get_half_width(),net_nos,clearance_idx(),touching_pins_at_end_corners());  if (new_lines != polyline) {    change_polyline(new_lines);    return true;  }  TraceAngleRestriction angle_restriction=r_board.brd_rules.get_trace_snap_angle();  if (r_board.brd_rules.get_pin_edge_to_turn_dist() > 0) {    if (swap_connection_to_pin(true)) {      pull_tight(p_pull_tight_algo);      return true;    }    if (swap_connection_to_pin(false)) {      pull_tight(p_pull_tight_algo);      return true;    }    if (correct_connection_to_pin(true,angle_restriction)) {      pull_tight(p_pull_tight_algo);      return true;    }    if (correct_connection_to_pin(false,angle_restriction)) {      pull_tight(p_pull_tight_algo);      return true;    }  }  return false;}  }
class C{  public org.omg.CORBA.Object _duplicate(){  throw new org.omg.CORBA.NO_IMPLEMENT(reason);}  }
class C{  @SuppressWarnings("deprecation") public String toString(){  int year=super.getYear() + 1900;  int month=super.getMonth() + 1;  int day=super.getDate();  int hour=super.getHours();  int minute=super.getMinutes();  int second=super.getSeconds();  String yearString;  String monthString;  String dayString;  String hourString;  String minuteString;  String secondString;  String nanosString;  String zeros="000000000";  String yearZeros="0000";  StringBuffer timestampBuf;  if (year < 1000) {    yearString="" + year;    yearString=yearZeros.substring(0,(4 - yearString.length())) + yearString;  } else {    yearString="" + year;  }  if (month < 10) {    monthString="0" + month;  } else {    monthString=Integer.toString(month);  }  if (day < 10) {    dayString="0" + day;  } else {    dayString=Integer.toString(day);  }  if (hour < 10) {    hourString="0" + hour;  } else {    hourString=Integer.toString(hour);  }  if (minute < 10) {    minuteString="0" + minute;  } else {    minuteString=Integer.toString(minute);  }  if (second < 10) {    secondString="0" + second;  } else {    secondString=Integer.toString(second);  }  if (nanos == 0) {    nanosString="0";  } else {    nanosString=Integer.toString(nanos);    nanosString=zeros.substring(0,(9 - nanosString.length())) + nanosString;    char[] nanosChar=new char[nanosString.length()];    nanosString.getChars(0,nanosString.length(),nanosChar,0);    int truncIndex=8;    while (nanosChar[truncIndex] == '0') {      truncIndex--;    }    nanosString=new String(nanosChar,0,truncIndex + 1);  }  timestampBuf=new StringBuffer(20 + nanosString.length());  timestampBuf.append(yearString);  timestampBuf.append("-");  timestampBuf.append(monthString);  timestampBuf.append("-");  timestampBuf.append(dayString);  timestampBuf.append(" ");  timestampBuf.append(hourString);  timestampBuf.append(":");  timestampBuf.append(minuteString);  timestampBuf.append(":");  timestampBuf.append(secondString);  timestampBuf.append(".");  timestampBuf.append(nanosString);  return (timestampBuf.toString());}  }
class C{  public String toString(){  return getStringValue();}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.SPKIDataType.SPKISexp createSPKIDataTypeSPKISexp(byte[] value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.SPKIDataTypeImpl.SPKISexpImpl(value);}  }
class C{  public AddRequestProtocolOp(ByteString dn){  this.dn=dn;  this.attributes=new ArrayList<>();}  }
class C{  public void write(byte b[]) throws IOException {  write(b,0,b.length);}  }
class C{  public boolean isTokenValid(SSOToken token){  return manager.isValidToken(token);}  }
class C{  public PlaPointFloat start_point_approx(){  return start_point.to_float();}  }
class C{  public void paint(Graphics g,Shape a){  sync();  Rectangle rect=(a instanceof Rectangle) ? (Rectangle)a : a.getBounds();  Rectangle clip=g.getClipBounds();  fBounds.setBounds(rect);  paintHighlights(g,a);  paintBorder(g,rect);  if (clip != null) {    g.clipRect(rect.x + leftInset,rect.y + topInset,rect.width - leftInset - rightInset,rect.height - topInset - bottomInset);  }  Container host=getContainer();  Image img=getImage(host == null || host.isEnabled());  if (img != null) {    if (!hasPixels(img)) {      Icon icon=getLoadingImageIcon();      if (icon != null) {        icon.paintIcon(host,g,rect.x + leftInset,rect.y + topInset);      }    } else {      g.drawImage(img,rect.x + leftInset,rect.y + topInset,width,height,imageObserver);    }  } else {    Icon icon=getNoImageIcon();    if (icon != null) {      icon.paintIcon(host,g,rect.x + leftInset,rect.y + topInset);    }    View view=getAltView();    if (view != null && ((state & WIDTH_FLAG) == 0 || width > DEFAULT_WIDTH)) {      Rectangle altRect=new Rectangle(rect.x + leftInset + DEFAULT_WIDTH,rect.y + topInset,rect.width - leftInset - rightInset- DEFAULT_WIDTH,rect.height - topInset - bottomInset);      view.paint(g,altRect);    }  }  if (clip != null) {    g.setClip(clip.x,clip.y,clip.width,clip.height);  }}  }
class C{  protected static EventListener removeInternal(EventListener l,EventListener oldl){  if (l == oldl || l == null) {    return null;  } else   if (l instanceof DnDEventMulticaster) {    return ((DnDEventMulticaster)l).remove(oldl);  } else {    return l;  }}  }
class C{  protected JTextField createEditorComponent(){  JTextField editor=new BorderlessTextField("",9);  editor.setBorder(null);  return editor;}  }
class C{  public static boolean contentEqualsIgnoreEOL(File file1,File file2,String charsetName) throws IOException {  boolean file1Exists=file1.exists();  if (file1Exists != file2.exists()) {    return false;  }  if (!file1Exists) {    return true;  }  if (file1.isDirectory() || file2.isDirectory()) {    throw new IOException("Can't compare directories, only files");  }  if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {    return true;  }  Reader input1=null;  Reader input2=null;  try {    if (charsetName == null) {      input1=new InputStreamReader(new FileInputStream(file1));      input2=new InputStreamReader(new FileInputStream(file2));    } else {      input1=new InputStreamReader(new FileInputStream(file1),charsetName);      input2=new InputStreamReader(new FileInputStream(file2),charsetName);    }    return IOUtils.contentEqualsIgnoreEOL(input1,input2);  }  finally {    IOUtils.closeQuietly(input1);    IOUtils.closeQuietly(input2);  }}  }
class C{  private void clearProjectLookup(){  if (projectLookup != null) {    Collection<? extends Project> projects=projectLookup.lookupAll(Project.class);    for (    Project project : projects) {      content.remove(project);    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapnotfounderr.class,args);}  }
class C{  public static byte[] toAsciiBytes(byte[] raw){  if (raw == null || raw.length == 0) {    return EMPTY_BYTE_ARRAY;  }  byte[] l_ascii=new byte[raw.length << 3];  for (int ii=0, jj=l_ascii.length - 1; ii < raw.length; ii++, jj-=8) {    for (int bits=0; bits < BITS.length; ++bits) {      if ((raw[ii] & BITS[bits]) == 0) {        l_ascii[jj - bits]='0';      } else {        l_ascii[jj - bits]='1';      }    }  }  return l_ascii;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String i18nKey=getStringOptionValue(ARGUMENT_I18N_KEY);  ServiceSchemaManager ssm=getServiceSchemaManager();  IOutput outputWriter=getOutputWriter();  try {    String[] params={serviceName,i18nKey};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SET_SERVICE_SCHEMA_I18N_KEY",params);    ssm.setI18NKey(i18nKey);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_SET_SERVICE_SCHEMA_I18N_KEY",params);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("service-schema-set-i18n-key-succeed"),(Object[])params));  } catch (  SSOException e) {    String[] args={serviceName,i18nKey,e.getMessage()};    debugError("SetServiceSchemaI18nKey.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_SERVICE_SCHEMA_I18N_KEY",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serviceName,i18nKey,e.getMessage()};    debugError("SetServiceSchemaI18nKey.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_SERVICE_SCHEMA_I18N_KEY",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void dispatchClientCallback(TransactInfo transactInfo,String paramMarshalling){  ClientCallback clientCallback=callbacks.get(transactInfo.getInvokeId());  if (clientCallback != null) {    clientCallback.onReceiveResult(transactInfo.getInvokeName(),clientCallback.getResult(paramMarshalling));    callbacks.remove(transactInfo.getInvokeId());  } else {    if (JsBridge.DEBUG) {      Log.w("dispatchClientCallback","no ClientCallback:" + transactInfo.getInvokeName());    }  }}  }
class C{  public void decrementActiveSessions(){  monitoringOperations.decrementActiveSessions();}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  protected StepPattern stepPattern(int opPos,int stepCount,StepPattern ancestorPattern) throws TransformerException {  int startOpPos=opPos;  int stepType=getOp(opPos);  if (OpCodes.ENDOP == stepType) {    return null;  }  boolean addMagicSelf=true;  int endStep=getNextOpPos(opPos);  StepPattern pattern;  int argLen;switch (stepType) {case OpCodes.OP_FUNCTION:    if (DEBUG)     System.out.println("MATCH_FUNCTION: " + m_currentPattern);  addMagicSelf=false;argLen=getOp(opPos + OpMap.MAPINDEX_LENGTH);pattern=new FunctionPattern(compileFunction(opPos),Axis.PARENT,Axis.CHILD);break;case OpCodes.FROM_ROOT:if (DEBUG) System.out.println("FROM_ROOT, " + m_currentPattern);addMagicSelf=false;argLen=getArgLengthOfStep(opPos);opPos=getFirstChildPosOfStep(opPos);pattern=new StepPattern(DTMFilter.SHOW_DOCUMENT | DTMFilter.SHOW_DOCUMENT_FRAGMENT,Axis.PARENT,Axis.CHILD);break;case OpCodes.MATCH_ATTRIBUTE:if (DEBUG) System.out.println("MATCH_ATTRIBUTE: " + getStepLocalName(startOpPos) + ", "+ m_currentPattern);argLen=getArgLengthOfStep(opPos);opPos=getFirstChildPosOfStep(opPos);pattern=new StepPattern(DTMFilter.SHOW_ATTRIBUTE,getStepNS(startOpPos),getStepLocalName(startOpPos),Axis.PARENT,Axis.ATTRIBUTE);break;case OpCodes.MATCH_ANY_ANCESTOR:if (DEBUG) System.out.println("MATCH_ANY_ANCESTOR: " + getStepLocalName(startOpPos) + ", "+ m_currentPattern);argLen=getArgLengthOfStep(opPos);opPos=getFirstChildPosOfStep(opPos);int what=getWhatToShow(startOpPos);if (0x00000500 == what) addMagicSelf=false;pattern=new StepPattern(getWhatToShow(startOpPos),getStepNS(startOpPos),getStepLocalName(startOpPos),Axis.ANCESTOR,Axis.CHILD);break;case OpCodes.MATCH_IMMEDIATE_ANCESTOR:if (DEBUG) System.out.println("MATCH_IMMEDIATE_ANCESTOR: " + getStepLocalName(startOpPos) + ", "+ m_currentPattern);argLen=getArgLengthOfStep(opPos);opPos=getFirstChildPosOfStep(opPos);pattern=new StepPattern(getWhatToShow(startOpPos),getStepNS(startOpPos),getStepLocalName(startOpPos),Axis.PARENT,Axis.CHILD);break;default :error(XPATHErrorResources.ER_UNKNOWN_MATCH_OPERATION,null);return null;}pattern.setPredicates(getCompiledPredicates(opPos + argLen));if (null == ancestorPattern) {} else {pattern.setRelativePathPattern(ancestorPattern);}StepPattern relativePathPattern=stepPattern(endStep,stepCount + 1,pattern);return (null != relativePathPattern) ? relativePathPattern : pattern;}  }
class C{  public int doEndTag() throws JspException {  return SKIP_BODY;}  }
class C{  public RESTResponse call() throws IOException {  HttpURLConnection urlConnect=null;  RESTResponse response=new RESTResponse();  List<String> returnList=new ArrayList<>();  try {    URL serviceURL=new URL(path + paramsToString());    urlConnect=(HttpURLConnection)serviceURL.openConnection();    if (httpMethod == HTTPMethod.GET) {      urlConnect.setRequestMethod("GET");    } else {      urlConnect.setRequestMethod("POST");      urlConnect.setDoOutput(true);    }    urlConnect.setUseCaches(false);    if (!headers.isEmpty()) {      for (      Map.Entry<String,String> entry : headers.entrySet()) {        urlConnect.setRequestProperty(entry.getKey(),entry.getValue());      }    }    if (httpMethod == HTTPMethod.POST) {      try (DataOutputStream output=new DataOutputStream(urlConnect.getOutputStream())){        output.writeBytes(postData);        output.flush();      }     }    response.setResponseCode(urlConnect.getResponseCode());    try (BufferedReader reader=new BufferedReader(new InputStreamReader(urlConnect.getInputStream()))){      String line;      while ((line=reader.readLine()) != null) {        returnList.add(line);      }    }   } catch (  FileNotFoundException|UnknownHostException|ConnectException ex) {    throw ex;  }catch (  IOException ex) {    if (urlConnect != null) {      InputStream is=urlConnect.getErrorStream();      try (BufferedReader br=new BufferedReader(new InputStreamReader(is))){        String line;        while ((line=br.readLine()) != null) {          returnList.add(line);        }      }     }  }  response.setContent(returnList);  return response;}  }
class C{  @Override public void write(ASN1Writer stream) throws IOException {  stream.writeStartSequence(OP_TYPE_MODIFY_DN_REQUEST);  stream.writeOctetString(entryDN);  stream.writeOctetString(newRDN);  stream.writeBoolean(deleteOldRDN);  if (newSuperior != null) {    stream.writeOctetString(TYPE_MODIFY_DN_NEW_SUPERIOR,newSuperior);  }  stream.writeEndSequence();}  }
class C{  public boolean isSubscribable() throws AMException, SSOException {  return getBooleanAttribute(SUBSCRIBABLE_ATTRIBUTE);}  }
class C{  private static byte[] computeTls12(byte[] secret,String label,byte[] seed,int size,String macAlgorithm){  try {    byte[] labelSeed=ArrayConverter.concatenate(label.getBytes(),seed);    SecretKeySpec keySpec=new SecretKeySpec(secret,macAlgorithm);    Mac mac=Mac.getInstance(macAlgorithm);    mac.init(keySpec);    byte[] out=new byte[0];    byte[] ai=labelSeed;    byte[] buf;    byte[] buf2;    while (out.length < size) {      mac.update(ai);      buf=mac.doFinal();      ai=buf;      mac.update(ai);      mac.update(labelSeed);      buf2=mac.doFinal();      out=ArrayConverter.concatenate(out,buf2);    }    return Arrays.copyOf(out,size);  } catch (  NoSuchAlgorithmException|InvalidKeyException ex) {    throw new CryptoException(ex);  }}  }
class C{  public void enableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glEnableVertexAttribArray(location);}  }
class C{  public String toXMLString() throws XACMLException {  return this.toXMLString(true,false);}  }
class C{  @Deprecated public static void startServer(DirectoryEnvironmentConfig config) throws InitializationException {  if (DirectoryServer.isRunning()) {    throw new InitializationException(ERR_EMBEDUTILS_SERVER_ALREADY_RUNNING.get(config.getServerRootAsString()));  }  DirectoryServer directoryServer=DirectoryServer.reinitialize(config);  try {    directoryServer.startServer();  } catch (  ConfigException e) {    throw new InitializationException(e.getMessageObject(),e);  }}  }
class C{  public static void logInfo(){  String installDir=toCanonicalPath(DirectoryServer.getServerRoot());  if (installDir == null) {    logger.info(NOTE_UNKNOWN_INSTALL_DIRECTORY);  } else {    logger.info(NOTE_INSTALL_DIRECTORY,installDir);  }  String instanceDir=toCanonicalPath(DirectoryServer.getInstanceRoot());  if (instanceDir == null) {    logger.info(NOTE_UNKNOWN_INSTANCE_DIRECTORY);  } else {    logger.info(NOTE_INSTANCE_DIRECTORY,instanceDir);  }  logger.info(NOTE_JVM_INFO,System.getProperty("java.runtime.version"),System.getProperty("java.vendor"),getArch(),Runtime.getRuntime().maxMemory());  long physicalMemorySize=getPhysicalMemorySize();  if (physicalMemorySize != -1) {    logger.info(NOTE_JVM_HOST,getHostName(),getOSInfo(),physicalMemorySize,Runtime.getRuntime().availableProcessors());  } else {    logger.info(NOTE_JVM_HOST_WITH_UNKNOWN_PHYSICAL_MEM,getHostName(),getOSInfo(),Runtime.getRuntime().availableProcessors());  }  logger.info(NOTE_JVM_ARGS,getInputArguments());}  }
class C{  public void paintSliderBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintSliderBackground(context,g,x,y,w,h);}  }
class C{  public Header nextHeader() throws NoSuchElementException {  final int current=this.currentIndex;  if (current < 0) {    throw new NoSuchElementException("Iteration already finished.");  }  this.lastIndex=current;  this.currentIndex=findNext(current);  return (Header)this.allHeaders.get(current);}  }
class C{  public E element(){  return getFirst();}  }
class C{  public PrintJobEvent(DocPrintJob source,int reason){  super(source);  this.reason=reason;}  }
class C{  public ClientException(String msg){  super(msg);}  }
class C{  public static ProxiedAuthV2RequestControl newControl(final String authorizationID){  if (authorizationID.length() == 0) {    return ANONYMOUS;  }  final int colonIndex=authorizationID.indexOf(':');  if (colonIndex < 0) {    final LocalizableMessage message=ERR_PROXYAUTH2_INVALID_AUTHZID_TYPE.get(authorizationID);    throw new LocalizedIllegalArgumentException(message);  }  return new ProxiedAuthV2RequestControl(authorizationID);}  }
class C{  public void testNegPosFirstLonger(){  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=-1;  int bSign=1;  byte rBytes[]={-1,127,-10,-57,-101,-1,-1,-2,-2,-91,-2,31,-1,-11,125,-22,-83,30,95};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public boolean toLDIF(LDIFExportConfig exportConfig) throws IOException, LDIFException {  try {    if (!exportConfig.includeEntry(this)) {      if (logger.isTraceEnabled()) {        logger.trace("Skipping entry %s because of the export configuration.",dn);      }      return false;    }  } catch (  Exception e) {    logger.traceException(e);    throw new LDIFException(ERR_LDIF_COULD_NOT_EVALUATE_FILTERS_FOR_EXPORT.get(dn,e),e);  }  if (exportConfig.invokeExportPlugins()) {    PluginResult.ImportLDIF pluginResult=getPluginConfigManager().invokeLDIFExportPlugins(exportConfig,this);    if (!pluginResult.continueProcessing()) {      return false;    }  }  BufferedWriter writer=exportConfig.getWriter();  int wrapColumn=exportConfig.getWrapColumn();  boolean wrapLines=wrapColumn > 1;  StringBuilder dnLine=new StringBuilder("dn");  appendLDIFSeparatorAndValue(dnLine,ByteString.valueOfUtf8(dn.toString()));  LDIFWriter.writeLDIFLine(dnLine,writer,wrapLines,wrapColumn);  final boolean typesOnly=exportConfig.typesOnly();  if (exportConfig.includeObjectClasses()) {    if (typesOnly) {      StringBuilder ocLine=new StringBuilder("objectClass:");      LDIFWriter.writeLDIFLine(ocLine,writer,wrapLines,wrapColumn);    } else {      for (      String s : objectClasses.values()) {        StringBuilder ocLine=new StringBuilder("objectClass: ").append(s);        LDIFWriter.writeLDIFLine(ocLine,writer,wrapLines,wrapColumn);      }    }  } else {    if (logger.isTraceEnabled()) {      logger.trace("Skipping objectclasses for entry %s because of the export configuration.",dn);    }  }  writeLDIFLines(userAttributes,typesOnly,"user",exportConfig,writer,wrapColumn,wrapLines);  if (exportConfig.includeOperationalAttributes()) {    writeLDIFLines(operationalAttributes,typesOnly,"operational",exportConfig,writer,wrapColumn,wrapLines);  } else {    if (logger.isTraceEnabled()) {      logger.trace("Skipping all operational attributes for entry %s " + "because of the export configuration.",dn);    }  }  if (!exportConfig.includeVirtualAttributes()) {    for (    AttributeType t : suppressedAttributes.keySet()) {      if (exportConfig.includeAttribute(t)) {        for (        Attribute a : suppressedAttributes.get(t)) {          writeLDIFLine(a,typesOnly,writer,wrapLines,wrapColumn);        }      }    }  }  writer.newLine();  return true;}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.EncryptionMethodType.OAEPparams createEncryptionMethodTypeOAEPparams(byte[] value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.EncryptionMethodTypeImpl.OAEPparamsImpl(value);}  }
class C{  private void returnTerminationStatus(HttpServletResponse response){  try {    response.setStatus(204);    response.flushBuffer();    return;  } catch (  Exception e) {    FSUtils.debug.error("FSSOAPReceiver.returnFedTerminationStatus: Exception::",e);  }}  }
class C{  private ByteString(final byte[] b,final int offset,final int length){  this.buffer=b;  this.offset=offset;  this.length=length;}  }
class C{  public static <T>ObjectPool<T> erodingPool(final ObjectPool<T> pool){  return erodingPool(pool,1f);}  }
class C{  private void enqueue(E x){  items[putIndex]=x;  putIndex=inc(putIndex);  count++;  notEmpty.signal();}  }
class C{  public CreationTemplate(String name,AttrSet required,AttrSet optional,ArrayList classes){  super(name);  setRequiredAttributeSet(required);  setOptionalAttributeSet(optional);  setCreationClasses(classes);}  }
class C{  public static String xmlOpen(String xmlName){  return xmlOpenStart + xmlName + xmlOpenEnd;}  }
class C{  public FrameBodyWPAY(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  static Map addMapToMap(Map mapToAdd,Map toMap){  if ((mapToAdd != null) && (toMap != null)) {    Set keySet=mapToAdd.keySet();    Iterator keyIter=keySet.iterator();    while (keyIter.hasNext()) {      String key=(String)keyIter.next();      Set values=(Set)mapToAdd.get(key);      addElementToMap(key,values,toMap);    }  }  return toMap;}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(long fooId) throws com.liferay.portal.kernel.exception.PortalException {  return getService().deleteFoo(fooId);}  }
class C{  public static void validate(Host host,URL war,String pathname) throws IOException {  File docBase=new File(host.getAppBaseFile(),pathname);  String canonicalDocBasePrefix=docBase.getCanonicalPath();  if (!canonicalDocBasePrefix.endsWith(File.separator)) {    canonicalDocBasePrefix+=File.separator;  }  JarURLConnection juc=(JarURLConnection)war.openConnection();  juc.setUseCaches(false);  try (JarFile jarFile=juc.getJarFile()){    Enumeration<JarEntry> jarEntries=jarFile.entries();    while (jarEntries.hasMoreElements()) {      JarEntry jarEntry=jarEntries.nextElement();      String name=jarEntry.getName();      File expandedFile=new File(docBase,name);      if (!expandedFile.getCanonicalPath().startsWith(canonicalDocBasePrefix)) {        throw new IllegalArgumentException(sm.getString("expandWar.illegalPath",war,name,expandedFile.getCanonicalPath(),canonicalDocBasePrefix));      }    }  } catch (  IOException e) {    throw e;  }}  }
class C{  public Document decryptAndReplace(Document encryptedDoc,java.lang.String certAlias) throws EncryptionException {  return decryptAndReplace(encryptedDoc,keyProvider.getPrivateKey(certAlias));}  }
class C{  public AuthLoginException(String message){  super(message);}  }
class C{  public static int collectDefaults(){  int flags=0;  for (  Feature f : values()) {    if (f.enabledByDefault()) {      flags|=f.getMask();    }  }  return flags;}  }
class C{  public final void pushContextNodeList(DTMIterator nl){  m_contextNodeLists.push(nl);}  }
class C{  @Override public String toString(){  if (hasStrValue) {    return strValue;  }switch (type) {case T_CHARS:    strValue=charC.toString();  hasStrValue=true;return strValue;case T_BYTES:strValue=byteC.toString();hasStrValue=true;return strValue;}return null;}  }
class C{  public InvalidPluginException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public static Integer[] transformIntArray(int[] source){  Integer[] destin=new Integer[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  static final int tableSizeFor(int cap){  int n=cap - 1;  n|=n >>> 1;  n|=n >>> 2;  n|=n >>> 4;  n|=n >>> 8;  n|=n >>> 16;  return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;}  }
class C{  public Builder removeName(String name){  this.names.remove(name);  return this;}  }
class C{  public static String decryptLocal(String encoded){  return decode(encoded,localEncryptor);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.Freshness createFreshness() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.FreshnessImpl();}  }
class C{  public void testConnect_BlockNoServer() throws IOException {  connectWithoutServer();  disconnectAfterConnected();}  }
class C{  public SmsConsoleServiceConfig(){  Document doc=parseDocument(CONFIG_FILENAME);  configServices(doc);  hiddenServices=Collections.unmodifiableSet(services.get(HIDDEN_SERVICES));}  }
class C{  private Import parse_pkg_import() throws SyntaxException {  LineCol lineCol=current.getLineCol();  Expression stmt=next_exp(false);  if (stmt instanceof AST.Access) {    AST.Access a=(AST.Access)stmt;    AST.PackageRef pkg=null;    AST.Access access=null;    boolean importAll;    if (a.name.equals("_")) {      if (a.exp instanceof AST.PackageRef) {        pkg=(AST.PackageRef)a.exp;        importAll=true;      } else {        if (!(a.exp instanceof AST.Access)) {          err.UnexpectedTokenException("package::class",a.exp.toString(),a.exp.line_col());          err.debug("ignore this import");          return null;        }        access=(AST.Access)a.exp;        importAll=true;      }    } else {      access=a;      importAll=false;    }    return new Import(pkg,access,importAll,lineCol);  } else {    err.UnexpectedTokenException("import statement",stmt.toString(),stmt.line_col());    err.debug("ignore this import");    return null;  }}  }
class C{  public void handleProperty(String property){  propertyName=property;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node addressNode;  Node clonedNode;  NamedNodeMap attributes;  Node attributeNode;  String attributeName;  java.util.Collection result=new java.util.ArrayList();  java.util.Collection htmlExpected=new java.util.ArrayList();  htmlExpected.add("class");  htmlExpected.add("title");  java.util.Collection expected=new java.util.ArrayList();  expected.add("class");  expected.add("title");  expected.add("dir");  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  addressNode=elementList.item(1);  clonedNode=addressNode.cloneNode(false);  attributes=clonedNode.getAttributes();  for (int indexN10076=0; indexN10076 < attributes.getLength(); indexN10076++) {    attributeNode=(Node)attributes.item(indexN10076);    attributeName=attributeNode.getNodeName();    result.add(attributeName);  }  if (("text/html".equals(getContentType()))) {    assertEqualsIgnoreCase("nodeNames_html",htmlExpected,result);  } else {    assertEquals("nodeNames",expected,result);  }}  }
class C{  public double magnitude(){  return Math.sqrt(this.dot(this));}  }
class C{  protected StackFrame newFrame(final int nLocals,final int nStack){  return new StackFrame(nLocals,nStack);}  }
class C{  public void fileRotated(){}  }
class C{  public Future<Long> card(JobState state){  Future<Long> future=Future.future();  jobService.card(state,future.completer());  return future;}  }
class C{  static boolean handleHotseatButtonKeyEvent(View v,int keyCode,KeyEvent e){  boolean consume=FocusLogic.shouldConsume(keyCode);  if (e.getAction() == KeyEvent.ACTION_UP || !consume) {    return consume;  }  DeviceProfile profile=((Launcher)v.getContext()).getDeviceProfile();  if (DEBUG) {    Log.v(TAG,String.format("Handle HOTSEAT BUTTONS keyevent=[%s] on hotseat buttons, isVertical=%s",KeyEvent.keyCodeToString(keyCode),profile.isVerticalBarLayout()));  }  final ShortcutAndWidgetContainer hotseatParent=(ShortcutAndWidgetContainer)v.getParent();  final CellLayout hotseatLayout=(CellLayout)hotseatParent.getParent();  Hotseat hotseat=(Hotseat)hotseatLayout.getParent();  Workspace workspace=(Workspace)v.getRootView().findViewById(R.id.workspace);  int pageIndex=workspace.getNextPage();  int pageCount=workspace.getChildCount();  int countX=-1;  int countY=-1;  int iconIndex=hotseatParent.indexOfChild(v);  int iconRank=((CellLayout.LayoutParams)hotseatLayout.getShortcutsAndWidgets().getChildAt(iconIndex).getLayoutParams()).cellX;  final CellLayout iconLayout=(CellLayout)workspace.getChildAt(pageIndex);  if (iconLayout == null) {    return consume;  }  final ViewGroup iconParent=iconLayout.getShortcutsAndWidgets();  ViewGroup parent=null;  int[][] matrix=null;  if (keyCode == KeyEvent.KEYCODE_DPAD_UP && !profile.isVerticalBarLayout()) {    matrix=FocusLogic.createSparseMatrix(iconLayout,hotseatLayout,true,profile.inv.hotseatAllAppsRank,iconRank == profile.inv.hotseatAllAppsRank);    iconIndex+=iconParent.getChildCount();    countX=iconLayout.getCountX();    countY=iconLayout.getCountY() + hotseatLayout.getCountY();    parent=iconParent;  } else   if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT && profile.isVerticalBarLayout()) {    matrix=FocusLogic.createSparseMatrix(iconLayout,hotseatLayout,false,profile.inv.hotseatAllAppsRank,iconRank == profile.inv.hotseatAllAppsRank);    iconIndex+=iconParent.getChildCount();    countX=iconLayout.getCountX() + hotseatLayout.getCountX();    countY=iconLayout.getCountY();    parent=iconParent;  } else   if (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT && profile.isVerticalBarLayout()) {    keyCode=KeyEvent.KEYCODE_PAGE_DOWN;  } else {    matrix=FocusLogic.createSparseMatrix(hotseatLayout);    countX=hotseatLayout.getCountX();    countY=hotseatLayout.getCountY();    parent=hotseatParent;  }  int newIconIndex=FocusLogic.handleKeyEvent(keyCode,countX,countY,matrix,iconIndex,pageIndex,pageCount,Utilities.isRtl(v.getResources()));  View newIcon=null;  if (newIconIndex == FocusLogic.NEXT_PAGE_FIRST_ITEM) {    parent=getCellLayoutChildrenForIndex(workspace,pageIndex + 1);    newIcon=parent.getChildAt(0);    workspace.snapToPage(pageIndex + 1);  }  if (parent == iconParent && newIconIndex >= iconParent.getChildCount()) {    newIconIndex-=iconParent.getChildCount();  }  if (parent != null) {    if (newIcon == null && newIconIndex >= 0) {      newIcon=parent.getChildAt(newIconIndex);    }    if (newIcon != null) {      newIcon.requestFocus();      playSoundEffect(keyCode,v);    }  }  return consume;}  }
class C{  public static String doFix(String path,@Nullable String fileContent,HighlightInfo.IntentionActionDescriptor intentionActionDescriptor){  UIUtil.invokeAndWaitIfNeeded((Runnable)null);  return null;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.ZeroKnowledgeElement createZeroKnowledgeElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ZeroKnowledgeElementImpl();}  }
class C{  public String transform(String input) throws AuthLoginException {  if (input == null) {    throw new AuthLoginException("No input to the Clear Text Transform!");  }  return input;}  }
class C{  public CertificateMapperConfigManager(ServerContext serverContext){  this.serverContext=serverContext;  certificateMappers=new ConcurrentHashMap<>();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList nameList;  java.util.List expectedNames=new java.util.ArrayList();  expectedNames.add("html");  expectedNames.add("head");  expectedNames.add("meta");  expectedNames.add("title");  expectedNames.add("script");  expectedNames.add("script");  expectedNames.add("script");  expectedNames.add("body");  expectedNames.add("p");  expectedNames.add("em");  expectedNames.add("strong");  expectedNames.add("code");  expectedNames.add("sup");  expectedNames.add("var");  expectedNames.add("acronym");  expectedNames.add("p");  expectedNames.add("em");  expectedNames.add("strong");  expectedNames.add("code");  expectedNames.add("sup");  expectedNames.add("var");  expectedNames.add("acronym");  expectedNames.add("p");  expectedNames.add("em");  expectedNames.add("strong");  expectedNames.add("code");  expectedNames.add("sup");  expectedNames.add("var");  expectedNames.add("acronym");  expectedNames.add("p");  expectedNames.add("em");  expectedNames.add("strong");  expectedNames.add("code");  expectedNames.add("sup");  expectedNames.add("var");  expectedNames.add("acronym");  expectedNames.add("p");  expectedNames.add("em");  expectedNames.add("strong");  expectedNames.add("code");  expectedNames.add("sup");  expectedNames.add("var");  expectedNames.add("acronym");  java.util.List svgExpectedNames=new java.util.ArrayList();  svgExpectedNames.add("svg");  svgExpectedNames.add("rect");  svgExpectedNames.add("script");  svgExpectedNames.add("head");  svgExpectedNames.add("meta");  svgExpectedNames.add("title");  svgExpectedNames.add("body");  svgExpectedNames.add("p");  svgExpectedNames.add("em");  svgExpectedNames.add("strong");  svgExpectedNames.add("code");  svgExpectedNames.add("sup");  svgExpectedNames.add("var");  svgExpectedNames.add("acronym");  svgExpectedNames.add("p");  svgExpectedNames.add("em");  svgExpectedNames.add("strong");  svgExpectedNames.add("code");  svgExpectedNames.add("sup");  svgExpectedNames.add("var");  svgExpectedNames.add("acronym");  svgExpectedNames.add("p");  svgExpectedNames.add("em");  svgExpectedNames.add("strong");  svgExpectedNames.add("code");  svgExpectedNames.add("sup");  svgExpectedNames.add("var");  svgExpectedNames.add("acronym");  svgExpectedNames.add("p");  svgExpectedNames.add("em");  svgExpectedNames.add("strong");  svgExpectedNames.add("code");  svgExpectedNames.add("sup");  svgExpectedNames.add("var");  svgExpectedNames.add("acronym");  svgExpectedNames.add("p");  svgExpectedNames.add("em");  svgExpectedNames.add("strong");  svgExpectedNames.add("code");  svgExpectedNames.add("sup");  svgExpectedNames.add("var");  svgExpectedNames.add("acronym");  java.util.List actualNames=new java.util.ArrayList();  Element thisElement;  String thisTag;  doc=(Document)load("hc_staff",false);  nameList=doc.getElementsByTagName("*");  for (int indexN10148=0; indexN10148 < nameList.getLength(); indexN10148++) {    thisElement=(Element)nameList.item(indexN10148);    thisTag=thisElement.getTagName();    actualNames.add(thisTag);  }  if (("image/svg+xml".equals(getContentType()))) {    assertEqualsAutoCase("element","svgTagNames",svgExpectedNames,actualNames);  } else {    assertEqualsAutoCase("element","tagNames",expectedNames,actualNames);  }}  }
class C{  public boolean isRedirectPermanently(){  return this.redirectPermanently;}  }
class C{  @Override public Foo fetchFooByUuidAndGroupId(String uuid,long groupId){  return fooPersistence.fetchByUUID_G(uuid,groupId);}  }
class C{  private boolean invalidated(int index,int prevTakeIndex,long dequeues,int length){  if (index < 0)   return false;  int distance=index - prevTakeIndex;  if (distance < 0)   distance+=length;  return dequeues > distance;}  }
class C{  public static PropertyException unknownPropertyDefinitionException(final PropertyDefinition<?> pd){  return new PropertyException(pd,ERR_UNKNOWN_PROPERTY_DEFINITION_EXCEPTION.get(pd.getName(),pd.getClass().getName()));}  }
class C{  private UserAttr(String attrStr,String attrVal,UserAttrType userAttrType,EnumBindRuleType type){  this.attrStr=attrStr;  this.attrVal=attrVal;  this.userAttrType=userAttrType;  this.type=type;  this.parentInheritance=null;}  }
class C{  public Unmarshaller createUnmarshaller() throws JAXBException {  return new UnmarshallerImpl(this,gi);}  }
class C{  protected String adjustURLPattern(String urlPattern){  if (urlPattern == null)   return (urlPattern);  if (urlPattern.startsWith("/") || urlPattern.startsWith("*."))   return (urlPattern);  if (!isServlet22())   return (urlPattern);  if (log.isDebugEnabled())   log.debug(sm.getString("standardContext.urlPattern.patternWarning",urlPattern));  return ("/" + urlPattern);}  }
class C{  public KeyInfoConfirmationData createKeyInfoConfirmationData(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.KEYINFO_CONFIRMATION_DATA);  if (obj == null) {    return new KeyInfoConfirmationDataImpl();  } else {    return (KeyInfoConfirmationData)obj;  }}  }
class C{  public URI(){}  }
class C{  public HttpURLConnection createSessionAwareConnection(URL url,SessionID sid,String extraCookies) throws Exception {  HttpURLConnection connection=null;  try {    connection=HttpURLConnectionManager.getConnection(url);    StringBuilder securityCookieValue=new StringBuilder();    securityCookieValue.append(serverConfig.getLocalServerURL().toString());    securityCookieValue.append(Constants.AT);    securityCookieValue.append(currentTimeMillis());    String securityCookie=AccessController.doPrivileged(new EncodeAction(securityCookieValue.toString()));    StringBuilder cookie=new StringBuilder();    cookie.append(serviceConfig.getSecurityCookieName());    cookie.append(Constants.EQUALS);    cookie.append(serviceConfig.isCookieEncodingEnabled() ? URLEncDec.encode(securityCookie) : securityCookie);    if (extraCookies != null) {      cookie.append(Constants.SEMI_COLON);      cookie.append(extraCookies);    }    if (sid != null) {      cookie.append(Constants.SEMI_COLON).append(sessionCookies.getCookieName());      cookie.append(Constants.EQUALS);      cookie.append(serviceConfig.isCookieEncodingEnabled() ? URLEncDec.encode(sid.toString()) : sid.toString());      String httpId=sid.getTail();      if (httpId != null) {        cookie.append(Constants.SEMI_COLON);        cookie.append(serviceConfig.getHttpSessionTrackingCookieName());        cookie.append(Constants.EQUALS);        cookie.append(serviceConfig.isCookieEncodingEnabled() ? URLEncDec.encode(httpId) : httpId);      }    }    if (sessionDebug.messageEnabled()) {      sessionDebug.message("created cookie value: " + cookie.toString());    }    connection.setRequestProperty("Cookie",cookie.toString());    connection.setRequestMethod("GET");    connection.setDoInput(true);  } catch (  Exception ex) {    sessionDebug.message("Failed contacting " + url,ex);    throw ex;  }  return connection;}  }
class C{  public Lyrics3TimeStamp(String identifier,AbstractTagFrameBody frameBody){  super(identifier,frameBody);}  }
class C{  private Aci(String input,DN dn,AciBody body,AciTargets targets){  this.aciString=input;  this.dn=dn;  this.body=body;  this.targets=targets;}  }
class C{  public ButtonGroup(){}  }
class C{  @Parameters({"parent-realm","entity-type","entity-name"}) @Test(groups={"api"}) public void modifyWithNullValues(String parentRealm,String idType,String entityName) throws Exception {  Object[] params={parentRealm,idType,entityName};  entering("modifyWithNullValues",params);  try {    AMIdentity amid=getIdentity(parentRealm,IdUtils.getType(idType),entityName);    modifyIdentity(amid,null);  } catch (  Exception e) {    log(Level.SEVERE,"modifyWithNullValues",e.getMessage(),params);    e.printStackTrace();    throw e;  }  exiting("modifyWithNullValues");}  }
class C{  protected int estimateProtocolVersionLen(final ProtocolVersion version){  return version.getProtocol().length() + 4;}  }
class C{  public HashMap(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR);}  }
class C{  protected boolean validatePendingRemove(Object targetChild){  return true;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.FederationIDElement createFederationIDElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.FederationIDElementImpl();}  }
class C{  protected static void delete(File file) throws IOException {  if (file.isDirectory()) {    if (file.list().length == 0) {      file.delete();      System.out.println("Directory is deleted : " + file.getAbsolutePath());    } else {      String files[]=file.list();      for (      String temp : files) {        File fileDelete=new File(file,temp);        delete(fileDelete);      }      if (file.list().length == 0) {        file.delete();        System.out.println("Directory is deleted : " + file.getAbsolutePath());      }    }  } else {    file.delete();    System.out.println("File is deleted : " + file.getAbsolutePath());  }}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  realm=getStringOptionValue(FedCLIConstants.ARGUMENT_REALM,"/");  cot=getStringOptionValue(FedCLIConstants.ARGUMENT_COT);  spec=FederationManager.getIDFFSubCommandSpecification(rc);  entityID=getStringOptionValue(FedCLIConstants.ARGUMENT_ENTITY_ID);  String[] params={realm,entityID,cot,spec};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_ADD_COT_MEMBER",params);  try {    CircleOfTrustManager cotManager=new CircleOfTrustManager(ssoToken);    cotManager.addCircleOfTrustMember(realm,cot,spec,entityID);    Object[] objs={spec,cot,entityID,realm};    getOutputWriter().printlnMessage(MessageFormat.format(getResourceString("add-circle-of-trust-member-succeeded"),objs));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_ADD_COT_MEMBER",params);  } catch (  COTException e) {    debugWarning("AddCircleOfTrustMembers.handleRequest",e);    if (e instanceof L10NMessage) {      String[] args={realm,entityID,cot,spec,((L10NMessage)e).getL10NMessage(getCommandManager().getLocale())};      writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ADD_COT_MEMBER",args);      throw new CLIException(((L10NMessage)e).getL10NMessage(getCommandManager().getLocale()),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    } else {      String[] args={realm,entityID,cot,spec,e.getMessage()};      writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ADD_COT_MEMBER",args);      throw new CLIException(e.getMessage(),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Attr attribute;  Attr newAttribute1;  String attrValue;  doc=(Document)load("staffNS",false);  element=doc.createElementNS("namespaceURI","root");  attribute=doc.createAttributeNS("http://www.w3.org/DOM/Level2","l2:att");  newAttribute1=element.setAttributeNodeNS(attribute);  attribute=element.getAttributeNodeNS("http://www.w3.org/DOM/Level2","att");  attrValue=attribute.getNodeValue();  assertEquals("elementgetattributenodens02","",attrValue);}  }
class C{  public void testCase6(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={1,2,3,4,5,6,7,1,2,3,1,2,3,4,5};  int aSign=1;  int bSign=-1;  byte rBytes[]={-11,-41,-101,54,-97,-52,-77,-41,44,-86,-116,-45,126,-116,20,61,14,-86,-65,86,1,35,35,106};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.multiply(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public boolean isEmpty(){  return (impl.isEmpty());}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public void rotate_45_deg(int p_factor){  if (p_factor % 2 == 0) {    rotate_90_degree(p_factor / 2);  } else {    rotate_deg(p_factor * 45);  }}  }
class C{  public IssuingDistributionPointExtension(GeneralNames fullName,boolean onlyContainsUserCerts,boolean onlyContainsCACerts,boolean[] reasonFlags,boolean indirectCRL,boolean critical) throws IOException {  this.extensionId=PKIXExtensions.IssuingDistributionPoint_Id;  this.critical=critical;  this.fullName=fullName;  this.onlyContainsUserCerts=onlyContainsUserCerts;  this.onlyContainsCACerts=onlyContainsCACerts;  this.reasonFlags=reasonFlags;  this.indirectCRL=indirectCRL;  encodeThis();}  }
class C{  protected String resolvePrefix(SerializationHandler rhandler,String prefix,String nodeNamespace) throws TransformerException {  if (null != prefix && (prefix.length() == 0 || prefix.equals("xmlns"))) {    prefix=rhandler.getPrefix(nodeNamespace);    if (null == prefix || prefix.length() == 0 || prefix.equals("xmlns")) {      if (nodeNamespace.length() > 0) {        NamespaceMappings prefixMapping=rhandler.getNamespaceMappings();        prefix=prefixMapping.generateNextPrefix();      } else       prefix="";    }  }  return prefix;}  }
class C{  @Override public int hashCode(){  return (univIdWithoutDN.toLowerCase().hashCode());}  }
class C{  boolean removedAt(int removedIndex){  if (isDetached())   return true;  final int cycles=itrs.cycles;  final int takeIndex=ArrayBlockingQueue.this.takeIndex;  final int prevCycles=this.prevCycles;  final int prevTakeIndex=this.prevTakeIndex;  final int len=items.length;  int cycleDiff=cycles - prevCycles;  if (removedIndex < takeIndex)   cycleDiff++;  final int removedDistance=(cycleDiff * len) + (removedIndex - prevTakeIndex);  int cursor=this.cursor;  if (cursor >= 0) {    int x=distance(cursor,prevTakeIndex,len);    if (x == removedDistance) {      if (cursor == putIndex)       this.cursor=cursor=NONE;    } else     if (x > removedDistance) {      this.cursor=cursor=dec(cursor);    }  }  int lastRet=this.lastRet;  if (lastRet >= 0) {    int x=distance(lastRet,prevTakeIndex,len);    if (x == removedDistance)     this.lastRet=lastRet=REMOVED; else     if (x > removedDistance)     this.lastRet=lastRet=dec(lastRet);  }  int nextIndex=this.nextIndex;  if (nextIndex >= 0) {    int x=distance(nextIndex,prevTakeIndex,len);    if (x == removedDistance)     this.nextIndex=nextIndex=REMOVED; else     if (x > removedDistance)     this.nextIndex=nextIndex=dec(nextIndex);  } else   if (cursor < 0 && nextIndex < 0 && lastRet < 0) {    this.prevTakeIndex=DETACHED;    return true;  }  return false;}  }
class C{  static <T>T newInstance(Class<T> type,String className,ClassLoader cl,boolean doFallback) throws FactoryConfigurationError {  return newInstance(type,className,cl,doFallback,false);}  }
class C{  public void removeSources(){  sources=new Vector();}  }
class C{  public BasicSplitPaneDivider createDefaultDivider(){  return new BasicSplitPaneDivider(this);}  }
