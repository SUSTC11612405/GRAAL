class C{  @FlakyTest(tolerance=3) @LargeTest public void testTouchScrollingToTrackballMode(){  Instrumentation inst=getInstrumentation();  int firstVisiblePosition=touchScroll(inst);  inst.sendCharacterSync(KeyEvent.KEYCODE_DPAD_DOWN);  inst.waitForIdleSync();  inst.sendCharacterSync(KeyEvent.KEYCODE_DPAD_DOWN);  inst.waitForIdleSync();  inst.sendCharacterSync(KeyEvent.KEYCODE_BACK);  inst.waitForIdleSync();  assertTrue("List not in trackball mode",!mListView.isInTouchMode());  assertTrue("List did not preserve scroll position",firstVisiblePosition == mListView.getFirstVisiblePosition());}  }
class C{  public static void arrayCopy(int[][] src,int[][] dest){  for (int r=0; r < src.length; r++) {    System.arraycopy(src[r],0,dest[r],0,src[r].length);  }}  }
class C{  public VirtualFile createFile(String filename) throws FileNotFoundException {  return createFile(filename,"initial content");}  }
class C{  public SourceFragmentType createSourceFragmentTypeFromString(EDataType eDataType,String initialValue){  SourceFragmentType result=SourceFragmentType.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public final void advanceWindow(){  currentWindowMillis+=windowWidthMillis;  windowId++;}  }
class C{  @SuppressWarnings("unchecked") public synchronized E elementAt(int location){  if (location < elementCount) {    return (E)elementData[location];  }  throw new ArrayIndexOutOfBoundsException(location);}  }
class C{  public long skip(long n) throws IOException {  if (n > Integer.MAX_VALUE)   throw new IOException("Too many bytes to skip - " + n);  if (length == 0)   return 0;  n=(length < n) ? length : n;  n=in.skip(n);  length-=n;  return n;}  }
class C{  public void removeSmaller(int value){  while (!isEmpty()) {    if (ringBuffer[(tail + 1) % ringBuffer.length] < value) {      removeOldest();    } else {      break;    }  }}  }
class C{  private void inheritMetadataEntry(String debugName,MetaData meta){  this.key=new KeyPair("IGNORE",METADATA);  this.metadataType=meta.getID();  this.owner=debugName;  if (meta.count() != 0) {    if (StandardDefs.MD_DEFAULTPROPERTY.equals(meta.getID())) {      this.key.name=meta.getValue(0);    }  }}  }
class C{  @Override public void removeListener(Listener<ComplexBuffer> listener){  super.removeListener(listener);  if (mSampleListeners.isEmpty()) {    mComplexMixer.stop();  }}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public Chronology withZone(DateTimeZone zone){  if (zone == null) {    zone=DateTimeZone.getDefault();  }  if (zone == getZone()) {    return this;  }  if (zone == DateTimeZone.UTC && iWithUTC != null) {    return iWithUTC;  }  DateTime lowerLimit=iLowerLimit;  if (lowerLimit != null) {    MutableDateTime mdt=lowerLimit.toMutableDateTime();    mdt.setZoneRetainFields(zone);    lowerLimit=mdt.toDateTime();  }  DateTime upperLimit=iUpperLimit;  if (upperLimit != null) {    MutableDateTime mdt=upperLimit.toMutableDateTime();    mdt.setZoneRetainFields(zone);    upperLimit=mdt.toDateTime();  }  LimitChronology chrono=getInstance(getBase().withZone(zone),lowerLimit,upperLimit);  if (zone == DateTimeZone.UTC) {    iWithUTC=chrono;  }  return chrono;}  }
class C{  protected void parsePlaceObject2(InStream in) throws IOException {  boolean hasClipActions=in.readUBits(1) != 0;  boolean isClipBracket=in.readUBits(1) != 0;  boolean hasName=in.readUBits(1) != 0;  boolean hasRatio=in.readUBits(1) != 0;  boolean hasColorTransform=in.readUBits(1) != 0;  boolean hasMatrix=in.readUBits(1) != 0;  boolean hasCharacter=in.readUBits(1) != 0;  boolean isMove=in.readUBits(1) != 0;  int depth=in.readUI16();  int charId=hasCharacter ? in.readUI16() : 0;  Matrix matrix=hasMatrix ? new Matrix(in) : null;  AlphaTransform cxform=hasColorTransform ? new AlphaTransform(in) : null;  int ratio=hasRatio ? in.readUI16() : -1;  int clipDepth=isClipBracket ? in.readUI16() : 0;  String name=hasName ? in.readString() : null;  int clipActionFlags=0;  if (hasClipActions) {    in.readUI16();    clipActionFlags=in.readUI16();  }  SWFActions actions=tagtypes.tagPlaceObject2(isMove,clipDepth,depth,charId,matrix,cxform,ratio,name,clipActionFlags);  if (hasClipActions && actions != null) {    int flags=0;    while ((flags=in.readUI16()) != 0) {      actions.start(flags);      ActionParser parser=new ActionParser(actions);      parser.parse(in);    }    actions.done();  }}  }
class C{  public void writeTreeLikelihood(AbstractPartitionData partition,XMLWriter writer){  String prefix=partition.getName() + ".";  PartitionSubstitutionModel substModel=partition.getPartitionSubstitutionModel();  PartitionTreeModel treeModel=partition.getPartitionTreeModel();  PartitionClockModel clockModel=partition.getPartitionClockModel();  AncestralStatesComponentOptions ancestralStatesOptions=(AncestralStatesComponentOptions)options.getComponentOptions(AncestralStatesComponentOptions.class);  String treeLikelihoodTag=TreeLikelihoodParser.ANCESTRAL_TREE_LIKELIHOOD;  if (ancestralStatesOptions.isCountingStates(partition)) {    treeLikelihoodTag=MarkovJumpsTreeLikelihoodParser.MARKOV_JUMP_TREE_LIKELIHOOD;  }  writer.writeOpenTag(treeLikelihoodTag,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,prefix + TreeLikelihoodParser.TREE_LIKELIHOOD),new Attribute.Default<String>(AncestralStateTreeLikelihoodParser.RECONSTRUCTION_TAG_NAME,prefix + AncestralStateTreeLikelihoodParser.RECONSTRUCTION_TAG)});  writer.writeIDref(AttributePatternsParser.ATTRIBUTE_PATTERNS,prefix + "pattern");  writer.writeIDref(TreeModel.TREE_MODEL,treeModel.getPrefix() + TreeModel.TREE_MODEL);  writer.writeIDref(SiteModel.SITE_MODEL,substModel.getName() + "." + SiteModel.SITE_MODEL);  writer.writeIDref(GeneralSubstitutionModelParser.GENERAL_SUBSTITUTION_MODEL,substModel.getName() + "." + AbstractSubstitutionModel.MODEL);  ClockModelGenerator.writeBranchRatesModelRef(clockModel,writer);  if (substModel.getDiscreteSubstType() == DiscreteSubstModelType.ASYM_SUBST) {    int stateCount=options.getStatesForDiscreteModel(substModel).size();    writer.writeComment("The root state frequencies");    writeDiscreteFrequencyModel(partition.getPrefix() + "root.",substModel.getName() + ".",stateCount,true,writer);  }  getCallingGenerator().generateInsertionPoint(ComponentGenerator.InsertionPoint.IN_TREE_LIKELIHOOD,partition,writer);  writer.writeCloseTag(treeLikelihoodTag);}  }
class C{  @Override @Action(value="/reports/collectionSummary-criteria") public String criteria(){  addRelatedEntity("department",Department.class,"name");  addDropdownData("servicetypeList",collectionsUtil.getBillingServiceList());  setupDropdownDataExcluding();  setReportParam(EGOV_FROM_DATE,new Date());  setReportParam(EGOV_TO_DATE,new Date());  addDropdownData("receiptStatuses",getPersistenceService().findAllByNamedQuery(CollectionConstants.STATUS_OF_RECEIPTS));  serviceTypeMap.putAll(CollectionConstants.SERVICE_TYPE_CLASSIFICATION);  serviceTypeMap.remove(CollectionConstants.SERVICE_TYPE_PAYMENT);  return INDEX;}  }
class C{  public void test_simpleRemoval(){  final IRawStore store=new SimpleMemoryRawStore();  try {    final Random r=new Random();    final HTreeIndexMetadata metadata=new HTreeIndexMetadata(UUID.randomUUID());    metadata.setAddressBits(2);    final HTree htree=HTree.create(store,metadata);    final byte[] key=new byte[]{1,2,3};    final byte[] val=new byte[24];    r.nextBytes(val);    assertNull(htree.insert(key,val));    assertEquals(1,htree.getEntryCount());    final DirectoryPage root=(DirectoryPage)htree.getRoot();    TestCase3.assertEquals(val,htree.lookupFirst(key));    htree.remove(key);    assertEquals(0,htree.getEntryCount());    TestCase3.assertEquals(null,htree.lookupFirst(key));  }  finally {    store.destroy();  }}  }
class C{  public SequenceCharacterIterator(CharSequence sequence,int first) throws IllegalArgumentException {  this(sequence,first,sequence.length());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s2=getString(stack);  String s1=getString(stack);  return (s1 == null || s2 == null) ? new Integer(-1) : new Integer(s1.indexOf(s2));}  }
class C{  private static void recordMemoryUsage(String prefix,MemoryUsage memory,Map<String,Long> metrics){  metrics.put(prefix + ".init",memory.getInit());  metrics.put(prefix + ".used",memory.getUsed());  metrics.put(prefix + ".committed",memory.getCommitted());  metrics.put(prefix + ".max",memory.getMax());}  }
class C{  public void destroyParticlesInGroup(ParticleGroup group,boolean callDestructionListener){  assert (isLocked() == false);  if (isLocked()) {    return;  }  m_particleSystem.destroyParticlesInGroup(group,callDestructionListener);}  }
class C{  static int stepLevel(SemanticNode nd){  String stepStr=((SyntaxTreeNode)nd.stn).getHeirs()[0].image.toString();  String stepNum=stepStr.substring(stepStr.indexOf('<') + 1,stepStr.indexOf('>'));  return Integer.valueOf(stepNum).intValue();}  }
class C{  protected int index(long val){  long[] set=_set;  Object[] values=_values;  int length=set.length;  int hash=_hashingStrategy.computeHashCode(val) & 0x7fffffff;  int index=hash % length;  if (!isFree(values,index) && (isRemoved(values,index) || set[index] != val)) {    int probe=1 + (hash % (length - 2));    do {      index-=probe;      if (index < 0) {        index+=length;      }    } while (!isFree(values,index) && (isRemoved(values,index) || set[index] != val));  }  return isFree(values,index) ? -1 : index;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  VinciLog.d("Pruning old cache entries.");  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VinciLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  VinciLog.d("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.TFIELD__TYPE_REF:    return basicSetTypeRef(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static boolean isFacebookRequestCode(int requestCode){  return requestCode >= callbackRequestCodeOffset && requestCode < callbackRequestCodeOffset + MAX_REQUEST_CODE_RANGE;}  }
class C{  public RegisteredProject importProject(String path,SourceStorage sourceStorage,boolean rewrite) throws ServerException, IOException, ForbiddenException, UnauthorizedException, ConflictException, NotFoundException {  projectTreeChangesDetector.suspend();  try {    final ProjectImporter importer=importers.getImporter(sourceStorage.getType());    if (importer == null) {      throw new NotFoundException(String.format("Unable import sources project from '%s'. Sources type '%s' is not supported.",sourceStorage.getLocation(),sourceStorage.getType()));    }    final LineConsumerFactory outputOutputConsumerFactory=null;    String normalizePath=(path.startsWith("/")) ? path : "/".concat(path);    FolderEntry folder=asFolder(normalizePath);    if (folder != null && !rewrite) {      throw new ConflictException(String.format("Project %s already exists ",path));    }    if (folder == null) {      folder=getProjectsRoot().createFolder(normalizePath);    }    try {      importer.importSources(folder,sourceStorage,outputOutputConsumerFactory);    } catch (    final Exception e) {      folder.remove();      throw e;    }    final String name=folder.getPath().getName();    for (    ProjectConfig project : workspaceProjectsHolder.getProjects()) {      if (normalizePath.equals(project.getPath())) {        List<String> innerProjects=projectRegistry.getProjects(normalizePath);        for (        String innerProject : innerProjects) {          RegisteredProject registeredProject=projectRegistry.getProject(innerProject);          projectRegistry.putProject(registeredProject,asFolder(registeredProject.getPath()),true,false);        }        RegisteredProject rp=projectRegistry.putProject(project,folder,true,false);        workspaceProjectsHolder.sync(projectRegistry);        return rp;      }    }    RegisteredProject rp=projectRegistry.putProject(new NewProjectConfig(normalizePath,name,BaseProjectType.ID,sourceStorage),folder,true,false);    workspaceProjectsHolder.sync(projectRegistry);    return rp;  }  finally {    projectTreeChangesDetector.resume();  }}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  public void preOrder(){  preOrder(root);}  }
class C{  @Deprecated public SelfStartingMonitoringView(MonitoringView monitoringView){  dynamicMonitoringView=new DynamicMonitoringView(monitoringView);}  }
class C{  public List discoverHtml(UrlIdentifier identifier) throws DiscoveryException {  return discoverHtml(identifier,_httpFetcher);}  }
class C{  public static boolean hasJellyBeanMr1(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1;}  }
class C{  public double averageSimilarity(){  if (mSimilaritySumN == 0) {    return 0;  }  return mSimilaritySum / mSimilaritySumN;}  }
class C{  public static boolean areIdentical(OfflinePlayer player,OfflinePlayer compareTo){  return getIdentificationForAsString(player).equals(getIdentificationForAsString(compareTo));}  }
class C{  void deleteResource(IResource resource){  try {    resource.delete(IResource.KEEP_HISTORY,null);  } catch (  CoreException e) {    errorTable.add(e.getStatus());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:13.478 -0500",hash_original_method="A7A36943EFC7086371CF45712D37E84A",hash_generated_method="3DDD9AD55C14ABD700A1340C985CA31C") public int sendCommand(String command,String args) throws IOException {  String message;  __commandBuffer.setLength(0);  __commandBuffer.append(command);  if (args != null) {    __commandBuffer.append(' ');    __commandBuffer.append(args);  }  __commandBuffer.append(SocketClient.NETASCII_EOL);  __writer.write(message=__commandBuffer.toString());  __writer.flush();  if (_commandSupport_.getListenerCount() > 0)   _commandSupport_.fireCommandSent(command,message);  __getReply();  return _replyCode;}  }
class C{  @Override protected void sendData(OutputStream out) throws IOException {  LOG.trace("enter sendData(OutputStream out)");  if (lengthOfData() == 0) {    LOG.debug("No data to send.");    return;  }  byte[] tmp=new byte[4096];  InputStream instream=source.createInputStream();  try {    int len;    while ((len=instream.read(tmp)) >= 0) {      out.write(tmp,0,len);    }  }  finally {    instream.close();  }}  }
class C{  @Override public String toString(){  StringBuilder result=new StringBuilder();  ArrayList<String> allEntries=new ArrayList<String>(jarEntries.keySet().size());  allEntries.addAll(jarEntries.keySet());  Collections.sort(allEntries);  for (  String entry : allEntries) {    result.append(entry);    result.append(" [");    if (jarEntriesToAdd.containsKey(entry)) {      result.append(jarEntriesToAdd.get(entry).length + " (bytes)");    } else {      result.append(jarFile.getAbsolutePath());    }    result.append("]\n");  }  return result.toString();}  }
class C{  public void applyTemplates(Object input,XPath xpath,String mode) throws Exception {  Mode mod=ruleManager.getMode(mode);  List<Node> list=xpath.selectNodes(input);  for (  Node current : list) {    mod.fireRule(current);  }}  }
class C{  public boolean isRemoving(){  return removing;}  }
class C{  public FciCcdSearchEditor(PcRunner runner){  super(runner,"Result forbid_latent_common_causes");}  }
class C{  @RequestMapping(method=RequestMethod.GET) public @ResponseBody List<Message> listMessages() throws ServiceException, CheckException {  return messageService.listByUser(authentificationUtils.getAuthentificatedUser(),0);}  }
class C{  public void printString(String v,int strOffset,int length) throws IOException {  int offset=_offset;  byte[] buffer=_buffer;  for (int i=0; i < length; i++) {    if (SIZE <= offset + 16) {      _offset=offset;      flushBuffer();      offset=_offset;    }    char ch=v.charAt(i + strOffset);    if (ch < 0x80)     buffer[offset++]=(byte)(ch); else     if (ch < 0x800) {      buffer[offset++]=(byte)(0xc0 + ((ch >> 6) & 0x1f));      buffer[offset++]=(byte)(0x80 + (ch & 0x3f));    } else {      buffer[offset++]=(byte)(0xe0 + ((ch >> 12) & 0xf));      buffer[offset++]=(byte)(0x80 + ((ch >> 6) & 0x3f));      buffer[offset++]=(byte)(0x80 + (ch & 0x3f));    }  }  _offset=offset;}  }
class C{  public void autonomousInit(){}  }
class C{  public ColorList reverse(){  Collections.reverse(colors);  return this;}  }
class C{  public static void pack(final File sourceDir,final File targetZip) throws IOException {  pack(sourceDir,targetZip,Deflater.DEFAULT_COMPRESSION);}  }
class C{  public MediaCategory(){}  }
class C{  public static FasRunner serializableInstance(){  return new FasRunner(Dag.serializableInstance(),new Parameters());}  }
class C{  public void destroy(){  if (DEBUG) {    CLog.d(LOG_TAG,"work_status: destroy %s",this);  }  mExitTasksEarly=true;  setPause(false);  Iterator<Entry<String,LoadImageTask>> it=(Iterator<Entry<String,LoadImageTask>>)mLoadWorkList.entrySet().iterator();  while (it.hasNext()) {    Entry<String,LoadImageTask> item=it.next();    final LoadImageTask task=item.getValue();    it.remove();    if (task != null) {      task.cancel();    }  }  mLoadWorkList.clear();}  }
class C{  public void lockOrientation(){  orientationLocked=true;  if (isScreenLandscape()) {    enterFullScreen();  } else {    exitFullScreen();  }}  }
class C{  public TypeSpecifier createTypeSpecifier(){  TypeSpecifierImpl typeSpecifier=new TypeSpecifierImpl();  return typeSpecifier;}  }
class C{  public static void main(final String[] args) throws IOException {  final Scanner scanner=new Scanner(System.in);  System.out.println("Enter your project id: ");  String projectId=scanner.nextLine();  System.out.println("Enter your dataset id: ");  String datasetId=scanner.nextLine();  System.out.println("Enter your table id: ");  String tableId=scanner.nextLine();  scanner.close();  System.out.println("Enter JSON to stream to BigQuery: \n" + "Press End-of-stream (CTRL-D) to stop");  JsonReader fromCli=new JsonReader(new InputStreamReader(System.in));  Iterator<TableDataInsertAllResponse> responses=run(projectId,datasetId,tableId,fromCli);  while (responses.hasNext()) {    System.out.println(responses.next());  }  fromCli.close();}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    operand.visit(v);  }}  }
class C{  public void valueChanged(TreeSelectionEvent e){  DefaultMutableTreeNode node=(DefaultMutableTreeNode)e.getPath().getLastPathComponent();  if (node == null) {    return;  }  Object nodeInfo=node.getUserObject();  if (nodeInfo instanceof ThreadInfo) {    displayThreadInfo(nodeInfo);    setThreadDisplay(true);  } else   if (nodeInfo instanceof ThreadDumpInfo) {    displayThreadDumpInfo(nodeInfo);  } else   if (nodeInfo instanceof HistogramInfo) {    HistogramInfo tdi=(HistogramInfo)nodeInfo;    displayTable((HistogramTableModel)tdi.content);    setThreadDisplay(false);  } else   if (nodeInfo instanceof LogFileContent) {    displayLogFileContent(nodeInfo);  } else   if (nodeInfo instanceof Logfile && ((String)((Logfile)nodeInfo).getContent()).startsWith("Thread Dumps")) {    displayLogFile();    setThreadDisplay(false);  } else   if (nodeInfo instanceof Category) {    displayCategory(nodeInfo);    setThreadDisplay(true);  } else {    setThreadDisplay(false);    displayContent(null);  }}  }
class C{  final void treeify(Node<K,V>[] tab){  TreeNode<K,V> root=null;  for (TreeNode<K,V> x=this, next; x != null; x=next) {    next=(TreeNode<K,V>)x.next;    x.left=x.right=null;    if (root == null) {      x.parent=null;      x.red=false;      root=x;    } else {      K k=x.key;      int h=x.hash;      Class<?> kc=null;      for (TreeNode<K,V> p=root; ; ) {        int dir, ph;        K pk=p.key;        if ((ph=p.hash) > h)         dir=-1; else         if (ph < h)         dir=1; else         if ((kc == null && (kc=comparableClassFor(k)) == null) || (dir=compareComparables(kc,k,pk)) == 0)         dir=tieBreakOrder(k,pk);        TreeNode<K,V> xp=p;        if ((p=(dir <= 0) ? p.left : p.right) == null) {          x.parent=xp;          if (dir <= 0)           xp.left=x; else           xp.right=x;          root=balanceInsertion(root,x);          break;        }      }    }  }  moveRootToFront(tab,root);}  }
class C{  public static WebappInfo create(String id,String url,String icon,String name,String shortName,int orientation,int source,long themeColor,long backgroundColor){  if (id == null || url == null) {    Log.e("WebappInfo","Data passed in was incomplete: " + id + ", "+ url);    return null;  }  Uri uri=Uri.parse(url);  return new WebappInfo(id,uri,icon,name,shortName,orientation,source,themeColor,backgroundColor);}  }
class C{  public static void startTrace(final JFrame parent,final IDebugger debugger,final ZyGraph graph,final TraceLogger logger){  checkArguments(parent,debugger,logger);  Preconditions.checkNotNull(graph,"IE01569: Graph argument can not be null");  if (!debugger.isConnected()) {    return;  }  if (logger.hasEchoBreakpoints()) {    final TraceList trace=createTrace(parent,logger);    if (trace == null) {      return;    }    final TraceList oldTrace=logger.switchTargetList(trace);    saveTrace(oldTrace);  } else {    final int bps=countEchoBreakpoints(debugger.getBreakpointManager(),graph);    if (bps == 0) {      CMessageBox.showError(parent,"All nodes of the graph are already covered by another active trace");    } else {      final CTraceOptionsDialog dlg=CTraceOptionsDialog.show(parent);      if (!dlg.wasCancelled()) {        final int maximumHits=dlg.getMaximumHits();        if (maximumHits == 0) {          return;        }        final EchoBreakpointCollector ebc=new EchoBreakpointCollector(debugger.getBreakpointManager());        graph.iterate(new NodeBreakpointDecider(ebc));        showStartTraceProgressWindow(parent,ebc.getBreakpoints(),logger,maximumHits);      }    }  }}  }
class C{  @Nullable public Generator create(LibraryTable libraryTable,File baseDir,final String comment){  final Library[] libraries=libraryTable.getLibraries();  if (libraries.length == 0) {    return null;  }  final CompositeGenerator gen=new CompositeGenerator();  gen.add(new Comment(comment),1);  TreeMap<String,Library> sortedLibs=new TreeMap<String,Library>();  for (  final Library library : libraries) {    final String libraryName=library.getName();    if (!myUsedLibraries.contains(libraryName)) {      continue;    }    sortedLibs.put(BuildProperties.getLibraryPathId(libraryName),library);  }  for (  final Library library : sortedLibs.values()) {    final String libraryName=library.getName();    final Path libraryPath=new Path(BuildProperties.getLibraryPathId(libraryName));    genLibraryContent(myProject,myGenOptions,library,baseDir,libraryPath);    gen.add(libraryPath,1);  }  return gen.getGeneratorCount() > 0 ? gen : null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @SuppressWarnings("unchecked") @Nullable public Object affinityKey(@Nullable String cacheName,@Nullable Object key) throws IgniteCheckedException {  if (key == null)   return null;  AffinityInfo affInfo=affinityCache(cacheName,ctx.discovery().topologyVersionEx());  if (affInfo == null)   return null;  return affInfo.affinityKey(key);}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public OMGraphicList filter(String SQLQuery){  return new OMGraphicList();}  }
class C{  protected Sides(int value){  super(value);}  }
class C{  public void invokeVirtual(final Type owner,final Method method){  invokeInsn(Opcodes.INVOKEVIRTUAL,owner,method,false);}  }
class C{  protected boolean isUseShortClassName(){  return useShortClassName;}  }
class C{  public static RegisterOperand moveIntoRegister(GenericRegisterPool pool,Instruction s,Operand op){  if (op instanceof RegisterOperand) {    return (RegisterOperand)op;  }  TypeReference type=op.getType();  Operator move_op=IRTools.getMoveOp(type);  return moveIntoRegister(type,move_op,pool,s,op);}  }
class C{  static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  Class factoryClass=lookUpFactoryClass(factoryId,propertiesFilename,fallbackClassName);  if (factoryClass == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  try {    Object instance=factoryClass.newInstance();    debugPrintln("created new instance of factory " + factoryId);    return instance;  } catch (  Exception x) {    throw new ConfigurationError("Provider for factory " + factoryId + " could not be instantiated: "+ x,x);  }}  }
class C{  public long nextLong(final long n){  if (n <= 0)   throw new IllegalArgumentException("n must be > 0");  long bits, val;  do {    bits=(nextLong() >>> 1);    val=bits % n;  } while (bits - val + (n - 1) < 0);  return val;}  }
class C{  public int size(){  return fifo.size();}  }
class C{  public static PsiElement findAncestorWithType(@NotNull PsiElement element,IElementType type){  PsiElement parent=element.getParent();  while (parent != null) {    if (parent.getNode() != null && parent.getNode().getElementType() == type) {      return parent;    }    parent=parent.getParent();  }  return null;}  }
class C{  private final long available(final boolean force){  return force & properState(force) ? Math.max(youngAvailable(),oldAvailable()) : oldAvailable();}  }
class C{  public Builder(@NonNull AuthorizationServiceConfiguration configuration,@NonNull String clientId,@NonNull String responseType,@NonNull Uri redirectUri){  setAuthorizationServiceConfiguration(configuration);  setClientId(clientId);  setResponseType(responseType);  setRedirectUri(redirectUri);  setState(AuthorizationRequest.generateRandomState());  setCodeVerifier(CodeVerifierUtil.generateRandomCodeVerifier());}  }
class C{  public final CompletableFuture<PartitionReceiver> createEpochReceiver(final String consumerGroupName,final String partitionId,final Instant dateTime,final long epoch) throws ServiceBusException {  return PartitionReceiver.create(this.underlyingFactory,this.eventHubName,consumerGroupName,partitionId,null,false,dateTime,epoch,true);}  }
class C{  DrillDownQuery(FacetsConfig config,Query baseQuery,List<BooleanQuery.Builder> dimQueries,Map<String,Integer> drillDownDims){  this.baseQuery=baseQuery;  this.dimQueries.addAll(dimQueries);  this.drillDownDims.putAll(drillDownDims);  this.config=config;}  }
class C{  public void finish(){  mManager.popForResult();}  }
class C{  @Override protected synchronized XAResource refreshXAConnection() throws ResourceException {  XAResource res=null;  if (this.xaConnection != null) {    try {      this.xaConnection.close();    } catch (    Exception err) {    }  }  try {    this.xaConnection=createXAConnection();    if (this.xaConnection != null)     res=this.xaConnection.getXAResource();  } catch (  SQLException sql) {    throw new ResourceException("Error in getting XA resource",sql);  }  return res;}  }
class C{  public int updateTriggerState(Connection conn,TriggerKey triggerKey,String state) throws SQLException {  PreparedStatement ps=null;  try {    ps=conn.prepareStatement(rtp(UPDATE_TRIGGER_STATE));    ps.setString(1,state);    ps.setString(2,triggerKey.getName());    ps.setString(3,triggerKey.getGroup());    return ps.executeUpdate();  }  finally {    closeStatement(ps);  }}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);  invalidateOptionsMenu();}  }
class C{  void prepareDisplayTaskFor(ImageAware imageAware,String memoryCacheKey){  cacheKeysForImageAwares.put(imageAware.getId(),memoryCacheKey);}  }
class C{  static NamedList<Number> mergeQueryCounts(NamedList<Number> globalQueryCounts,NamedList<Number> shardQueryCounts){  if (globalQueryCounts == null) {    return shardQueryCounts;  }  for (  Entry<String,Number> entry : shardQueryCounts) {    int idx=globalQueryCounts.indexOf(entry.getKey(),0);    if (idx == -1) {      globalQueryCounts.add(entry.getKey(),entry.getValue());    } else {      globalQueryCounts.setVal(idx,FacetComponent.num(globalQueryCounts.getVal(idx).longValue() + entry.getValue().longValue()));    }  }  return globalQueryCounts;}  }
class C{  private boolean doesSwcHaveRSLInfo(String swcPath){  if (swcPath == null)   return false;  List<Configuration.RslPathInfo> rslInfoList=configuration.getRslPathInfo();  for (  Configuration.RslPathInfo rslInfo : rslInfoList) {    if (swcPath.equals(rslInfo.getSwcVirtualFile().getName()))     return true;  }  return false;}  }
class C{  public Collection<GridCacheEntryInfo> preloadEntries(){  return preloadEntries == null ? Collections.<GridCacheEntryInfo>emptyList() : preloadEntries;}  }
class C{  static int countLines(final String fileName) throws IOException {  return countLines(new File(fileName));}  }
class C{  public String encode(String pString){  return soundex(pString);}  }
class C{  private void order(Annotation label){  if (label != null) {    order=(Order)label;  }}  }
class C{  public void removeDatabase(final Database database){  Preconditions.checkNotNull(database,"Error: Database argument can not be null");  m_manager.removeDatabase(database.getNative());}  }
class C{  protected JFreeChart createChart(CategoryDataset dataset,String title,MUOM uom){  JFreeChart chart=ChartFactory.createBarChart3D(title," "," ",dataset,PlotOrientation.VERTICAL,true,true,false);  if (uom == null || uom.isHour()) {    chart=ChartFactory.createBarChart3D(title,Msg.translate(Env.getCtx(),"Days"),Msg.translate(Env.getCtx(),"Hours"),dataset,PlotOrientation.VERTICAL,true,true,false);  } else {    chart=ChartFactory.createBarChart3D(title,Msg.translate(Env.getCtx(),"Days"),Msg.translate(Env.getCtx(),"Kilo"),dataset,PlotOrientation.VERTICAL,true,true,false);  }  return chart;}  }
class C{  public static void revertSetAsInitial(){  Iterator i=oldSystemProps.entrySet().iterator();  while (i.hasNext()) {    Map.Entry entry=(Map.Entry)i.next();    restoreSystemProperty((String)entry.getKey(),(String)entry.getValue());  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_BEFORE_CODE_1__CODE_LANG_1:    return codeLang_1 != null && !codeLang_1.isEmpty();case UmplePackage.ANONYMOUS_BEFORE_CODE_1__CODE_LANGS_1:  return codeLangs_1 != null && !codeLangs_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @Override protected void createNewTag(){  super.createNewTag();  if (isNotEmpty(getTagNameValue())) {    DistributionSetTag newDistTag=entityFactory.generateDistributionSetTag(tagNameValue,tagDescValue,ColorPickerConstants.START_COLOR.getCSS());    if (isNotEmpty(getColorPicked())) {      newDistTag.setColour(getColorPicked());    }    newDistTag=tagManagement.createDistributionSetTag(newDistTag);    displaySuccess(newDistTag.getName());    resetDistTagValues();  } else {    displayValidationError(i18n.get(SPUILabelDefinitions.MISSING_TAG_NAME));  }}  }
class C{  public static long[] hashToLongs(int[] data,long seed){  if ((data == null) || (data.length == 0)) {    return null;  }  return hash(data,seed);}  }
class C{  public FeatureDescriptor(){  this.values=new HashMap<String,Object>();}  }
class C{  public static AvgProjectionExpression avg(Expression expression){  return new AvgProjectionExpression(expression,false);}  }
class C{  public static void copyIntoColumn3D(int[][][] destination,int index1,int index2,int[] source) throws Exception {  if (source.length != destination.length) {    throw new Exception("Destination column is not of the same length as the source (" + destination.length + " vs "+ source.length+ ")");  }  for (int r=0; r < destination.length; r++) {    destination[r][index1][index2]=source[r];  }}  }
class C{  public final int countDataPaths(){  return mDataPaths != null ? mDataPaths.size() : 0;}  }
class C{  public Signature(byte[] signature){  mSignature=signature.clone();}  }
class C{  protected void handleCustomAction(SolrQueryRequest req,SolrQueryResponse rsp){  throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Unsupported operation: " + req.getParams().get(CoreAdminParams.ACTION));}  }
class C{  public Builder addCollectionItemClause(String collectionFieldName,String itemName,Occurance occurance){  return addFieldClause(QuerySpecification.buildCollectionItemName(collectionFieldName),itemName,occurance);}  }
class C{  public static byte[] step1(SMState astate,byte[] secret) throws SMException {  BigInteger secret_mpi=new BigInteger(1,secret);  astate.secret=secret_mpi;  astate.receivedQuestion=false;  astate.x2=randomExponent();  astate.x3=randomExponent();  BigInteger[] msg1=new BigInteger[6];  msg1[0]=astate.g1.modPow(astate.x2,MODULUS_S);  BigInteger[] res=proofKnowLog(astate.g1,astate.x2,1);  msg1[1]=res[0];  msg1[2]=res[1];  msg1[3]=astate.g1.modPow(astate.x3,MODULUS_S);  res=proofKnowLog(astate.g1,astate.x3,2);  msg1[4]=res[0];  msg1[5]=res[1];  byte[] ret=serialize(msg1);  astate.smProgState=PROG_OK;  return ret;}  }
class C{  public void beforeFirst() throws SQLException {  if (getType() == ResultSet.TYPE_FORWARD_ONLY) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.beforefirst").toString());  }  cursorPos=0;  absolutePos=0;  notifyCursorMoved();}  }
class C{  @SuppressWarnings("unchecked") public static List<String> tokenize(CharSequence self){  return InvokerHelper.asList(new StringTokenizer(self.toString()));}  }
class C{  public void print_calendar(Calendar cal){  print(cal.getTime());}  }
class C{  protected boolean isMessageDeleted() throws MessagingException {  return getMessageIn().isSet(Flags.Flag.DELETED);}  }
class C{  private TimSort(T[] a,Comparator<? super T> c,T[] work,int workBase,int workLen){  this.a=a;  this.c=c;  int len=a.length;  int tlen=(len < 2 * INITIAL_TMP_STORAGE_LENGTH) ? len >>> 1 : INITIAL_TMP_STORAGE_LENGTH;  if (work == null || workLen < tlen || workBase + tlen > work.length) {    @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) T[] newArray=(T[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),tlen);    tmp=newArray;    tmpBase=0;    tmpLen=tlen;  } else {    tmp=work;    tmpBase=workBase;    tmpLen=workLen;  }  int stackLen=(len < 120 ? 5 : len < 1542 ? 10 : len < 119151 ? 24 : 49);  runBase=new int[stackLen];  runLen=new int[stackLen];}  }
class C{  public int findNext(){  if (findString.length() == 0 || document.getLength() - findString.length() < startIndex) {    return -1;  }  try {    int nextMatch=0;    Segment text=new Segment();    text.setPartialReturn(true);    int offset=startIndex;    int nleft=document.getLength() - startIndex;    while (nleft > 0) {      document.getText(offset,nleft,text);      char next=text.first();      for (text.first(); next != Segment.DONE; next=text.next()) {        char current=text.current();        if (current == matchUpperCase[nextMatch] || current == matchLowerCase[nextMatch]) {          nextMatch++;          if (nextMatch == matchLowerCase.length) {            int foundIndex=text.getIndex() - text.getBeginIndex() + offset - matchLowerCase.length + 1;            if (matchType == MatchType.CONTAINS) {              return foundIndex;            } else             if (matchType == MatchType.STARTS_WITH) {              if (!isWordChar(foundIndex - 1)) {                return foundIndex;              }            } else             if (matchType == MatchType.FULL_WORD) {              if (!isWordChar(foundIndex - 1) && !isWordChar(foundIndex + matchLowerCase.length)) {                return foundIndex;              }            }            nextMatch=0;          }        } else {          nextMatch=0;        }      }      nleft-=text.count;      offset+=text.count;    }    return -1;  } catch (  BadLocationException e) {    throw new IndexOutOfBoundsException();  }}  }
class C{  @Override public void mousePressed(MouseEvent e){  if (!tree.isEnabled())   return;  TreePath closestPath=tree.getClosestPathForLocation(e.getX(),e.getY());  if (closestPath == null)   return;  Rectangle bounds=tree.getPathBounds(closestPath);  if ((e.getY() >= bounds.y) && (e.getY() < (bounds.y + bounds.height)) && ((e.getX() < bounds.x) || (e.getX() > (bounds.x + bounds.width)))) {    if (isLocationInExpandControl(closestPath,e.getX(),e.getY())) {      return;    }    selectPathForEvent(closestPath,e);  }}  }
class C{  public boolean isUILocked(){  return m_isLocked;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SGraphPackage.REGION__VERTICES:    getVertices().clear();  return;case SGraphPackage.REGION__COMPOSITE:setComposite((CompositeElement)null);return;}super.eUnset(featureID);}  }
class C{  public void saveSelection(IMiniTable miniTable){  log.info("");  ArrayList<Integer> results=new ArrayList<Integer>();  setSelection(null);  int rows=miniTable.getRowCount();  for (int i=0; i < rows; i++) {    IDColumn id=(IDColumn)miniTable.getValueAt(i,0);    if (id != null && id.isSelected())     results.add(id.getRecord_ID());  }  if (results.size() == 0)   return;  log.config("Selected #" + results.size());  setSelection(results);}  }
class C{  private void validateData(final byte[] data){  final int maxAllowableDataLength=MAX_BYTES_PER_RECORD - AGGREGATED_RECORD_MAGIC.length - this.md5.getDigestLength();  if (data != null && data.length > (maxAllowableDataLength)) {    throw new IllegalArgumentException("Data must be less than or equal to " + maxAllowableDataLength + " bytes in size, got "+ data.length+ " bytes");  }}  }
class C{  public boolean hasKeywords(){  return hasRepeatingExtension(Keyword.class);}  }
class C{  public void renderHyperlinkTitle(Appendable writer,Map<String,Object> context,ModelFormField modelFormField,String titleText) throws IOException {  if (UtilValidate.isNotEmpty(modelFormField.getHeaderLink())) {    StringBuilder targetBuffer=new StringBuilder();    FlexibleStringExpander target=FlexibleStringExpander.getInstance(modelFormField.getHeaderLink());    String fullTarget=target.expandString(context);    targetBuffer.append(fullTarget);    String targetType=CommonWidgetModels.Link.DEFAULT_URL_MODE;    if (UtilValidate.isNotEmpty(targetBuffer.toString()) && targetBuffer.toString().toLowerCase().startsWith("javascript:")) {      targetType="plain";    }    WidgetWorker.makeHyperlinkString(writer,modelFormField.getHeaderLinkStyle(),targetType,targetBuffer.toString(),null,titleText,null,modelFormField,this.request,this.response,null,null);  } else   if (modelFormField.isSortField()) {    renderSortField(writer,context,modelFormField,titleText);  } else   if (modelFormField.isRowSubmit()) {    if (UtilValidate.isNotEmpty(titleText))     writer.append(titleText).append("<br/>");    writer.append("<input type=\"checkbox\" name=\"selectAll\" value=\"Y\" onclick=\"javascript:toggleAll(this, '");    writer.append(modelFormField.getModelForm().getName());    writer.append("');\"/>");  } else {    writer.append(titleText);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:21.062 -0500",hash_original_method="8BBEA010362F5295A61D1C019D01CC8B",hash_generated_method="E6257857295F6B2249220AB672C4A441") public Time(Date date){  SimpleTimeZone tz=new SimpleTimeZone(0,"Z");  SimpleDateFormat dateF=new SimpleDateFormat("yyyyMMddHHmmss");  dateF.setTimeZone(tz);  String d=dateF.format(date) + "Z";  int year=Integer.parseInt(d.substring(0,4));  if (year < 1950 || year > 2049) {    time=new DERGeneralizedTime(d);  } else {    time=new DERUTCTime(d.substring(2));  }}  }
class C{  public IntArray(){  _data=new int[16];  _size=0;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.WITH_STATEMENT__EXPRESSION:    return getExpression();case N4JSPackage.WITH_STATEMENT__STATEMENT:  return getStatement();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void updateStyle(JComponent c){  SeaGlassContext context=getContext(c,ENABLED);  SynthStyle oldStyle=style;  style=SeaGlassLookAndFeel.updateStyle(context,this);  if (style != oldStyle) {    if (oldStyle != null) {      uninstallKeyboardActions((JRootPane)c);      installKeyboardActions((JRootPane)c);    }  }  context.dispose();}  }
class C{  public static boolean matchDevice(final BluetoothGatt gatt){  final BluetoothGattService service=gatt.getService(UART_SERVICE_UUID);  return service != null && service.getCharacteristic(UART_TX_CHARACTERISTIC_UUID) != null && service.getCharacteristic(UART_RX_CHARACTERISTIC_UUID) != null;}  }
class C{  public void clearWhoList(){  super.removeElement(Who.KEY);}  }
class C{  @Override public int size(){  return array.length;}  }
class C{  public static double numAllConditions(Instances data){  double total=0;  Enumeration<Attribute> attEnum=data.enumerateAttributes();  while (attEnum.hasMoreElements()) {    Attribute att=attEnum.nextElement();    if (att.isNominal()) {      total+=att.numValues();    } else {      total+=2.0 * data.numDistinctValues(att);    }  }  return total;}  }
class C{  public void updatePoly(double[] llpoints,int units,int lType,int nsegs,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkPoly.write(llpoints,units,lType,nsegs,properties,link.dos);}  }
class C{  @Override public void trim(){}  }
class C{  static boolean removeAllImpl(Set<?> set,Iterator<?> iterator){  boolean changed=false;  while (iterator.hasNext()) {    changed|=set.remove(iterator.next());  }  return changed;}  }
class C{  public void reply(CanReply f){  if (addrActive.match(f)) {    setOwnState(Sensor.ACTIVE);  } else   if (addrInactive.match(f)) {    setOwnState(Sensor.INACTIVE);  }}  }
class C{  private String addValue(){  List<String> terms=new ArrayList<>();  int maxCeiling=TestUtil.nextInt(random(),0,255);  int max=0;  for (char ch='a'; ch <= 'z'; ch++) {    int num=TestUtil.nextInt(random(),0,maxCeiling);    for (int i=0; i < num; i++)     terms.add(Character.toString(ch));    max=Math.max(max,num);  }  expected.add(max);  Collections.shuffle(terms,random());  return Arrays.toString(terms.toArray(new String[terms.size()]));}  }
class C{  @SuppressWarnings("unchecked") public Builder withEntries(List<? extends Entry> entries){  request.entries=(List<Entry>)Assert.notNull(entries,"entries");  return this;}  }
class C{  @Override protected EntitySetupDescriptor read(final Element element,final int x,final int y){  Object identifier;  if (element.hasAttribute("ref")) {    final String s=element.getAttribute("ref");    try {      identifier=Integer.valueOf(s);    } catch (    final NumberFormatException ex) {      identifier=s;    }  } else {    logger.warn("Portal without 'ref' value");    return null;  }  final PortalSetupDescriptor desc=read(element,x,y,identifier);  final List<Element> list=XMLUtil.getElements(element,"destination");  if (!list.isEmpty()) {    if (list.size() > 1) {      logger.warn("More than one destination specified");    }    readDestination(desc,list.get(0));  }  if (element.hasAttribute("replacing")) {    final String s=element.getAttribute("replacing");    if (s.equals("true")) {      desc.setReplacing(true);    } else     if (s.equals("false")) {      desc.setReplacing(false);    } else {      logger.error("Invalid 'replacing' value: " + s);    }  }  return desc;}  }
class C{  public boolean isPluginDeclared(String id){  if (pluginDcls.contains(id))   return true;  pluginDcls.add(id);  return false;}  }
class C{  public static StoreWriter createWriter(File file){  return StoreImpl.createWriter(file,newConfiguration());}  }
class C{  @After public void cleanEnv() throws IOException {  s3Dao.deleteDirectory(s3DaoTestHelper.getTestS3FileTransferRequestParamsDto());  s3Operations.rollback();}  }
class C{  public boolean isAllowStopFromRestart(){  return getState().isAllowStopFromRestart();}  }
class C{  private void initializeByteFunctions(){  this.core.withKnowledgebase(null);}  }
class C{  public boolean isReadOnly(int columnIndex) throws SQLException {  checkColRange(columnIndex);  return colInfo[columnIndex].readOnly;}  }
class C{  public SignatureOutputStream(OutputStream stream,String algorithm,PublicKey publicKey) throws NoSuchAlgorithmException {  super(stream);  try {    signature=Signature.getInstance(algorithm);    signature.initVerify(publicKey);  } catch (  final InvalidKeyException e) {    System.out.println("Internal Error at signature:" + e.getMessage());  }}  }
class C{  public boolean voidIt(){  log.info("voidIt - " + toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_VOID);  if (m_processMsg != null)   return false;  MRMALine lines[]=getLines(true);  for (  MRMALine rmaLine : lines) {    rmaLine.addDescription(Msg.getMsg(getCtx(),"Voided") + " (" + rmaLine.getQty()+ ")");    rmaLine.setQty(Env.ZERO);    rmaLine.setAmt(Env.ZERO);    rmaLine.saveEx();  }  addDescription(Msg.getMsg(getCtx(),"Voided"));  setAmt(Env.ZERO);  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_VOID);  if (m_processMsg != null)   return false;  setProcessed(true);  setDocAction(DOCACTION_None);  return true;}  }
class C{  public void bind() throws StunException {  byte[] createPermissionTransactionID=TransactionID.createNewTransactionID().getBytes();  Request createPermissionRequest=MessageFactory.createCreatePermissionRequest(peerAddress,createPermissionTransactionID);  createPermissionRequest.setTransactionID(createPermissionTransactionID);  turnCandidateHarvest.sendRequest(RelayedCandidateDatagramSocket.this,createPermissionRequest);  bindingTransactionID=createPermissionTransactionID;  bindingTimeStamp=System.currentTimeMillis();  if (channelDataIsPreferred) {    if (channelNumber == CHANNEL_NUMBER_NOT_SPECIFIED) {      channelNumber=getNextChannelNumber();      channelNumberIsConfirmed=false;    }    if (channelNumber != CHANNEL_NUMBER_NOT_SPECIFIED) {      byte[] channelBindTransactionID=TransactionID.createNewTransactionID().getBytes();      Request channelBindRequest=MessageFactory.createChannelBindRequest(channelNumber,peerAddress,channelBindTransactionID);      channelBindRequest.setTransactionID(channelBindTransactionID);synchronized (packetsToReceive) {        if (!closed && (receiveChannelDataThread == null))         createReceiveChannelDataThread();      }      turnCandidateHarvest.sendRequest(RelayedCandidateDatagramSocket.this,channelBindRequest);    }  }}  }
class C{  protected final void SYSCALL(Instruction s){  burs.ir.setHasSysCall(true);  Operand target=Call.getClearAddress(s);  MethodOperand meth=Call.getClearMethod(s);  int numParams=Call.getNumberOfParams(s);  int longParams=0;  if (VM.BuildFor32Addr) {    for (int pNum=0; pNum < numParams; pNum++) {      if (Call.getParam(s,pNum).getType().isLongType()) {        longParams++;      }    }  }  RegisterOperand result=Call.getClearResult(s);  RegisterOperand result2=null;  if (VM.BuildFor32Addr) {    if (result != null && result.getType().isLongType()) {      result2=I(regpool.getSecondReg(result.getRegister()));    }  }  Operator callOp;  if (target instanceof RegisterOperand) {    Register ctr=regpool.getPhysicalRegisterSet().asPPC().getCTR();    EMIT(MIR_Move.create(PPC_MTSPR,A(ctr),(RegisterOperand)target));    target=null;    callOp=PPC_BCTRL_SYS;  } else   if (target instanceof BranchOperand) {    callOp=PPC_BL_SYS;  } else {    throw new OptimizingCompilerException("Unexpected target operand " + target + " to call "+ s);  }  Operand[] params=new Operand[numParams];  for (int i=0; i < numParams; i++) {    params[i]=Call.getClearParam(s,i);  }  BranchOperand callTarget=(BranchOperand)target;  EMIT(MIR_Call.mutate(s,callOp,result,result2,callTarget,meth,numParams + longParams));  for (int paramIdx=0, mirCallIdx=0; paramIdx < numParams; ) {    Operand param=params[paramIdx++];    MIR_Call.setParam(s,mirCallIdx++,param);    if (VM.BuildFor32Addr) {      if (param instanceof RegisterOperand) {        RegisterOperand rparam=(RegisterOperand)param;        if (rparam.getType().isLongType()) {          MIR_Call.setParam(s,mirCallIdx++,L(regpool.getSecondReg(rparam.getRegister())));        }      }    }  }}  }
class C{  public MyEventListener(){  sqlException=null;  closed=false;  connectionErrorOccured=false;}  }
class C{  public IgniteInterruptedCheckedException(String msg){  super(msg);}  }
class C{  public void start(){  if (looperUpdater == null) {    looperUpdater=new Timer("Looper - " + this.m_name);    looperUpdater.scheduleAtFixedRate(new Task(this),0L,(long)(this.period * 1000));  }}  }
class C{  public Strictness_ createStrictness_(){  Strictness_Impl strictness_=new Strictness_Impl();  return strictness_;}  }
class C{  public void handleNotification(Notification notification,Object hb){  AdminDistributedSystemJmxImpl adminDSJmx=(AdminDistributedSystemJmxImpl)this.member.getDistributedSystem();  String typeStatResourceStats=RefreshNotificationType.STATISTIC_RESOURCE_STATISTICS.getType();  if (typeStatResourceStats.equals(notification.getType()) && getMBeanName().equals(notification.getUserData()) && !adminDSJmx.isRmiClientCountZero()) {    try {      refresh();    } catch (    org.apache.geode.admin.AdminException e) {      logger.warn(e.getMessage(),e);    }catch (    org.apache.geode.admin.OperationCancelledException e) {      logger.warn(e.getMessage(),e);      _setRefreshInterval(0);    }catch (    CancelException e) {    }catch (    java.lang.RuntimeException e) {      logger.debug(e.getMessage(),e);      _setRefreshInterval(0);    }catch (    VirtualMachineError err) {      SystemFailure.initiateFailure(err);      throw err;    }catch (    java.lang.Error e) {      SystemFailure.checkFailure();      logger.error(e.getMessage(),e);      this.refreshInterval=0;    }  }}  }
class C{  public ZookeeperServer(){}  }
class C{  public synchronized void close() throws IOException {  if (!responseSent) {    if (size() == 0)     write(emptyData);    DataOutputStream dos=new DataOutputStream(out);    dos.writeBytes("Content-type: application/octet-stream\r\n");    dos.writeBytes("Content-length: " + size() + "\r\n");    dos.writeBytes("\r\n");    writeTo(dos);    dos.flush();    reset();    responseSent=true;  }}  }
class C{  private void parseEndTag(){  final int uriIdx=getLEWord(mParserOffset + (4 * WORD_SIZE));  final int nameIdx=getLEWord(mParserOffset + (5 * WORD_SIZE));  final String name=getString(nameIdx);  String uri;  if (uriIdx == 0xFFFFFFFF) {    uri="";  } else {    uri=getString(uriIdx);  }  mListener.endElement(uri,name,null);  mParserOffset+=(6 * WORD_SIZE);}  }
class C{  public TelnetTerminalServer(ServerSocketFactory serverSocketFactory,int port) throws IOException {  this(serverSocketFactory,port,Charset.defaultCharset());}  }
class C{  public static IDownloaderClient CreateProxy(Messenger msg){  return new Proxy(msg);}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (!(obj instanceof SecretKey))   return false;  String thatAlg=((SecretKey)obj).getAlgorithm();  if (!(thatAlg.equalsIgnoreCase(this.algorithm))) {    if ((!(thatAlg.equalsIgnoreCase("DESede")) || !(this.algorithm.equalsIgnoreCase("TripleDES"))) && (!(thatAlg.equalsIgnoreCase("TripleDES")) || !(this.algorithm.equalsIgnoreCase("DESede"))))     return false;  }  byte[] thatKey=((SecretKey)obj).getEncoded();  return MessageDigest.isEqual(this.key,thatKey);}  }
class C{  @OnClick(R.id.toggle_bottom_sheet_button) public void toggleButtonSheet(View v){  bottomSheetBehavior.setState(getNewState());}  }
class C{  static void unregister(final Object lhs,final Object rhs){  Set<Pair<IDKey,IDKey>> registry=getRegistry();  if (registry != null) {    final Pair<IDKey,IDKey> pair=getRegisterPair(lhs,rhs);    registry.remove(pair);synchronized (EqualsBuilder.class) {      registry=getRegistry();      if (registry != null && registry.isEmpty()) {        REGISTRY.remove();      }    }  }}  }
class C{  public static void writeReceiptsToFiles(List<byte[]> printedReceipts,String prefix,File baseDir){  try {    int index=1;    for (    byte[] printedReceipt : printedReceipts) {      ByteArrayInputStream bIn=new ByteArrayInputStream(printedReceipt);      File receiptFile=new File(baseDir,prefix + "Receipt " + index+ ".pdf");      BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(new FileOutputStream(receiptFile));      IOUtils.copy(bIn,bufferedOutputStream);      bufferedOutputStream.close();      index++;    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public String seedTipText(){  return "the random number seed for shuffling the dataset. If seed is negative, shuffling will not be performed.";}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xC484901F,version=271) public int sceUsbCamSetZoom(int zoom){  this.zoom=zoom;  return 0;}  }
class C{  public double optDouble(String key,double defaultValue){  try {    return this.getDouble(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static long hleSysClock2USec(long sysclocks){  return sysclocks;}  }
class C{  public JSONObject(String baseName,Locale locale) throws JSONException {  this();  ResourceBundle bundle=ResourceBundle.getBundle(baseName,locale,Thread.currentThread().getContextClassLoader());  Enumeration<String> keys=bundle.getKeys();  while (keys.hasMoreElements()) {    Object key=keys.nextElement();    if (key != null) {      String[] path=((String)key).split("\\.");      int last=path.length - 1;      JSONObject target=this;      for (int i=0; i < last; i+=1) {        String segment=path[i];        JSONObject nextTarget=target.optJSONObject(segment);        if (nextTarget == null) {          nextTarget=new JSONObject();          target.put(segment,nextTarget);        }        target=nextTarget;      }      target.put(path[last],bundle.getString((String)key));    }  }}  }
class C{  @Override public void initializePlugin(){  initData();  this.schemaAnalyser=SchemaAnalyzerFactory.getInstance(SchemaAnalyzerFactory.ALL);  this.usedSchemaAnalyser=schemaAnalyser;  this.signatureManager=new SignatureManager();  this.optionManager=OptionManager.getInstance();  this.optionManager.setPlugin(this);  this.optionManager.setSignatureManager(signatureManager);  this.analysisData=new AnalysisDataCollector();  setPluginFunctions(new PluginFunctionInterface[]{new SignatureWrappingAnalyzeFunction(this)});  TestSuite.getInstance().getCurrentRequest().addCurrentRequestContentObserver(optionManager);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:36.228 -0500",hash_original_method="3A41672F51C7647865E5A6F21420932E",hash_generated_method="7CC931B79D0F2CBE4F800519728D8281") public PKCS10CertificationRequest(byte[] bytes){  super(toDERSequence(bytes));}  }
class C{  public boolean isLifo(){  String cm=getCostingMethod();  return cm != null && cm.equals(COSTINGMETHOD_Lifo);}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster features;  WhiteboxRaster dataImage;  WhiteboxRaster output;  String featureHeader=null;  String dataHeader=null;  String outputHeader=null;  int row, col;  int progress=0;  int i;  double featuresNoData=-32768;  double dataNoData=-32768;  double distThreshold=0;  boolean blnSelect=true;  int featureID;  String instructions=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      if (args[i].toLowerCase().contains("isolate features from")) {        blnSelect=true;      } else       if (args[i].toLowerCase().contains("remove features from")) {        blnSelect=false;      }    } else     if (i == 1) {      featureHeader=args[i];    } else     if (i == 2) {      if (args[i].toLowerCase().contains("intersect")) {        instructions="intersect";      } else       if (args[i].toLowerCase().contains("are completely within")) {        instructions="within";      } else       if (args[i].toLowerCase().contains("are within a distance of")) {        instructions="distance";      } else       if (args[i].toLowerCase().contains("have their centroid in")) {        instructions="centroid";      }    } else     if (i == 3) {      dataHeader=args[i];    } else     if (i == 4) {      outputHeader=args[i];    } else     if (i == 5) {      if (!args[i].equals("not specified")) {        distThreshold=Double.parseDouble(args[i]);      }    }  }  if ((featureHeader == null) || (dataHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    features=new WhiteboxRaster(featureHeader,"r");    int rows=features.getNumberRows();    int cols=features.getNumberColumns();    featuresNoData=features.getNoDataValue();    int minFeatureID=(int)features.getMinimumValue();    int numFeatures=(int)(features.getMaximumValue() - minFeatureID);    dataImage=new WhiteboxRaster(dataHeader,"r");    if (dataImage.getNumberColumns() != cols || dataImage.getNumberRows() != rows) {      showFeedback("The input files must have the same dimensions, i.e. number of" + " rows and columns.");      return;    }    dataNoData=dataImage.getNoDataValue();    output=new WhiteboxRaster(outputHeader,"rw",featureHeader,WhiteboxRaster.DataType.FLOAT,featuresNoData);    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setPreferredPalette("qual.pal");    if (instructions.equals("intersect")) {      boolean[] intersect=new boolean[numFeatures + 1];      double[] featuresData=null;      double[] data=null;      updateProgress("Loop 1 of 2:",0);      for (row=0; row < rows; row++) {        featuresData=features.getRowValues(row);        data=dataImage.getRowValues(row);        for (col=0; col < cols; col++) {          if (featuresData[col] != featuresNoData) {            featureID=(int)featuresData[col];            if (featureID != 0 && data[col] > 0 && data[col] != dataNoData) {              intersect[featureID - minFeatureID]=true;            }          } else {            output.setValue(row,col,featuresNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Loop 1 of 2:",progress);      }      updateProgress("Loop 2 of 2:",0);      for (row=0; row < rows; row++) {        featuresData=features.getRowValues(row);        data=dataImage.getRowValues(row);        for (col=0; col < cols; col++) {          if (featuresData[col] != featuresNoData) {            featureID=(int)featuresData[col];            if (intersect[featureID - minFeatureID] == blnSelect) {              output.setValue(row,col,featureID);            } else {              output.setValue(row,col,0);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Loop 2 of 2:",progress);      }    } else     if (instructions.equals("within")) {      boolean[] within=new boolean[numFeatures + 1];      double[] dataFeature=new double[numFeatures + 1];      for (i=0; i <= numFeatures; i++) {        within[i]=true;        dataFeature[i]=-9999999;      }      double[] featuresData=null;      double[] data=null;      updateProgress("Loop 1 of 2:",0);      for (row=0; row < rows; row++) {        featuresData=features.getRowValues(row);        data=dataImage.getRowValues(row);        for (col=0; col < cols; col++) {          if (featuresData[col] != featuresNoData) {            featureID=(int)featuresData[col];            if (featureID != 0) {              if (data[col] != 0 && data[col] != dataNoData && dataFeature[featureID - minFeatureID] != -9999999) {                if (within[featureID - minFeatureID] && data[col] != dataFeature[featureID - minFeatureID]) {                  within[featureID - minFeatureID]=false;                }              } else               if (data[col] == 0) {                within[featureID - minFeatureID]=false;              } else {                dataFeature[featureID - minFeatureID]=data[col];              }            }          } else {            output.setValue(row,col,featuresNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Loop 1 of 2:",progress);      }      updateProgress("Loop 2 of 2:",0);      for (row=0; row < rows; row++) {        featuresData=features.getRowValues(row);        data=dataImage.getRowValues(row);        for (col=0; col < cols; col++) {          if (featuresData[col] != featuresNoData) {            featureID=(int)featuresData[col];            if (within[featureID - minFeatureID] == blnSelect) {              output.setValue(row,col,featureID);            } else {              output.setValue(row,col,0);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Loop 2 of 2:",progress);      }    } else     if (instructions.equals("distance")) {      if (distThreshold <= 0) {        showFeedback("The distance threshold has not been set to an appropriate value.");        return;      }      double z, z2, zMin;      double h=0;      int whichCell;      int x, y;      double infVal=9999999;      int[] dX=new int[]{-1,-1,0,1,1,1,0,-1};      int[] dY=new int[]{0,-1,-1,-1,0,1,1,1};      int[] Gx=new int[]{1,1,0,1,1,1,0,1};      int[] Gy=new int[]{0,1,1,1,0,1,1,1};      double gridRes=(features.getCellSizeX() + features.getCellSizeY()) / 2;      WhiteboxRaster Rx=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",featureHeader,WhiteboxRaster.DataType.FLOAT,0);      Rx.isTemporaryFile=true;      WhiteboxRaster Ry=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",featureHeader,WhiteboxRaster.DataType.FLOAT,0);      Ry.isTemporaryFile=true;      WhiteboxRaster bufferedData=new WhiteboxRaster(outputHeader.replace(".dep","_temp3.dep"),"rw",featureHeader,WhiteboxRaster.DataType.FLOAT,infVal);      bufferedData.isTemporaryFile=true;      double[] data;      updateProgress("Buffering features:",0);      for (row=0; row < rows; row++) {        data=dataImage.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != 0) {            bufferedData.setValue(row,col,0);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Buffering features:",progress);      }      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=bufferedData.getValue(row,col);          if (z != 0) {            zMin=infVal;            whichCell=-1;            for (i=0; i <= 3; i++) {              x=col + dX[i];              y=row + dY[i];              z2=bufferedData.getValue(y,x);              if (z2 != dataNoData) {switch (i) {case 0:                  h=2 * Rx.getValue(y,x) + 1;                break;case 1:              h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);            break;case 2:          h=2 * Ry.getValue(y,x) + 1;        break;case 3:      h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);    break;}z2+=h;if (z2 < zMin) {  zMin=z2;  whichCell=i;}}}if (zMin < z) {bufferedData.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Buffering features:",progress);}for (row=rows - 1; row >= 0; row--) {for (col=cols - 1; col >= 0; col--) {z=bufferedData.getValue(row,col);if (z != 0) {zMin=infVal;whichCell=-1;for (i=4; i <= 7; i++) {x=col + dX[i];y=row + dY[i];z2=bufferedData.getValue(y,x);if (z2 != dataNoData) {switch (i) {case 5:  h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;case 4:h=2 * Rx.getValue(y,x) + 1;break;case 6:h=2 * Ry.getValue(y,x) + 1;break;case 7:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {bufferedData.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * (rows - 1 - row) / (rows - 1));updateProgress("Buffering features:",progress);}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=bufferedData.getValue(row,col);if (Math.sqrt(z) * gridRes < distThreshold) {bufferedData.setValue(row,col,1);} else {bufferedData.setValue(row,col,0);}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Buffering features:",progress);}Rx.close();Ry.close();bufferedData.flush();boolean[] intersect=new boolean[numFeatures + 1];double[] featuresData=null;updateProgress("Loop 1 of 2:",0);for (row=0; row < rows; row++) {featuresData=features.getRowValues(row);data=bufferedData.getRowValues(row);for (col=0; col < cols; col++) {if (featuresData[col] != featuresNoData) {featureID=(int)featuresData[col];if (featureID != 0 && data[col] > 0 && data[col] != dataNoData) {intersect[featureID - minFeatureID]=true;}} else {output.setValue(row,col,featuresNoData);}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 1 of 2:",progress);}updateProgress("Loop 2 of 2:",0);for (row=0; row < rows; row++) {featuresData=features.getRowValues(row);data=bufferedData.getRowValues(row);for (col=0; col < cols; col++) {if (featuresData[col] != featuresNoData) {featureID=(int)featuresData[col];if (intersect[featureID - minFeatureID] == blnSelect) {output.setValue(row,col,featureID);} else {output.setValue(row,col,0);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 2 of 2:",progress);}bufferedData.close();} else if (instructions.equals("centroid")) {long[] totalColumns=new long[numFeatures + 1];long[] totalRows=new long[numFeatures + 1];long[] totalN=new long[numFeatures + 1];updateProgress("Loop 1 of 2:",0);double[] featuresData=null;for (row=0; row < rows; row++) {featuresData=features.getRowValues(row);for (col=0; col < cols; col++) {if (featuresData[col] > 0) {i=(int)featuresData[col] - minFeatureID;totalColumns[i]+=col;totalRows[i]+=row;totalN[i]++;}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 1 of 2:",progress);}double z;boolean[] intersect=new boolean[numFeatures + 1];double[] data=null;for (i=0; i <= numFeatures; i++) {if (totalN[i] > 0) {col=(int)(totalColumns[i] / totalN[i]);row=(int)(totalRows[i] / totalN[i]);z=dataImage.getValue(row,col);if (z != 0 && z != dataNoData) {intersect[i]=true;}}}updateProgress("Loop 2 of 2:",0);for (row=0; row < rows; row++) {featuresData=features.getRowValues(row);data=dataImage.getRowValues(row);for (col=0; col < cols; col++) {if (featuresData[col] != featuresNoData) {featureID=(int)featuresData[col];if (intersect[featureID - minFeatureID] == blnSelect) {output.setValue(row,col,featureID);} else {output.setValue(row,col,0);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 2 of 2:",progress);}} else {showFeedback("Instructions not recognized.");return;}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());features.close();dataImage.close();output.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public Boolean isDefaultIntraVmAffinity(){  return defaultIntraVmAffinity;}  }
class C{  public String toCode(Type declaringType,List<Variable> inputVars){  StringBuilder sb=new StringBuilder();  if (isStatic) {    sb.append(declaringType.getCanonicalName());  } else {    sb.append(inputVars.get(0).getName());  }  return sb.append(".").append(getName()).toString();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:37.605 -0500",hash_original_method="37D0CFFA6009C52C8BE86CC33940023B",hash_generated_method="4E14BD5B4577205A399E1A6905E22394") public synchronized void deleteObserver(Observer observer){  observers.remove(observer);}  }
class C{  public void renewReportThreadPool(){  if (mReportExecutorService == null || mReportExecutorService.isShutdown()) {    mReportExecutorService=Executors.newScheduledThreadPool(SpeedTestConst.THREAD_POOL_REPORT_SIZE);  }}  }
class C{  public static GramBooleanQuery translate(String regex,int gramLength) throws com.google.re2j.PatternSyntaxException {  GramBooleanQuery result=translateUnsimplified(regex,gramLength);  GramBooleanQuery dnf=GramBooleanQuery.toDNF(result);  GramBooleanQuery simplifiedDNF=GramBooleanQuery.simplifyDNF(dnf);  TranslatorUtils.escapeSpecialCharacters(simplifiedDNF);  TranslatorUtils.toLowerCase(simplifiedDNF);  return simplifiedDNF;}  }
class C{  public SortedEvictionPolicy(@Nullable Comparator<EvictableEntry<K,V>> comp){  this.comp=comp == null ? new DefaultHolderComparator<K,V>() : new HolderComparator<>(comp);  this.set=new GridConcurrentSkipListSetEx<>(this.comp);}  }
class C{  public void init() throws DBException {  _db.init();}  }
class C{  public void initializePackageContents(){  if (isInitialized)   return;  isInitialized=true;  setName(eNAME);  setNsPrefix(eNS_PREFIX);  setNsURI(eNS_URI);  N4JSPackage theN4JSPackage=(N4JSPackage)EPackage.Registry.INSTANCE.getEPackage(N4JSPackage.eNS_URI);  EcorePackage theEcorePackage=(EcorePackage)EPackage.Registry.INSTANCE.getEPackage(EcorePackage.eNS_URI);  TypesPackage theTypesPackage=(TypesPackage)EPackage.Registry.INSTANCE.getEPackage(TypesPackage.eNS_URI);  TypeRefsPackage theTypeRefsPackage=(TypeRefsPackage)EPackage.Registry.INSTANCE.getEPackage(TypeRefsPackage.eNS_URI);  script_IMEClass.getESuperTypes().add(theN4JSPackage.getScript());  symbolTableEntryOriginalEClass.getESuperTypes().add(this.getSymbolTableEntry());  symbolTableEntryIMOnlyEClass.getESuperTypes().add(this.getSymbolTableEntry());  symbolTableEntryInternalEClass.getESuperTypes().add(this.getSymbolTableEntry());  referencingElementExpression_IMEClass.getESuperTypes().add(this.getReferencingElement_IM());  referencingElementExpression_IMEClass.getESuperTypes().add(theN4JSPackage.getExpression());  identifierRef_IMEClass.getESuperTypes().add(theN4JSPackage.getIdentifierRef());  identifierRef_IMEClass.getESuperTypes().add(this.getReferencingElementExpression_IM());  parameterizedPropertyAccessExpression_IMEClass.getESuperTypes().add(theN4JSPackage.getParameterizedPropertyAccessExpression());  parameterizedPropertyAccessExpression_IMEClass.getESuperTypes().add(this.getReferencingElementExpression_IM());  parameterizedTypeRef_IMEClass.getESuperTypes().add(theTypeRefsPackage.getParameterizedTypeRef());  parameterizedTypeRef_IMEClass.getESuperTypes().add(this.getReferencingElement_IM());  parameterizedTypeRefStructural_IMEClass.getESuperTypes().add(this.getParameterizedTypeRef_IM());  parameterizedTypeRefStructural_IMEClass.getESuperTypes().add(theTypeRefsPackage.getParameterizedTypeRefStructural());  parameterizedTypeRefStructural_IMEClass.getESuperTypes().add(this.getReferencingElement_IM());  snippetEClass.getESuperTypes().add(theN4JSPackage.getExpression());  delegatingMemberEClass.getESuperTypes().add(theN4JSPackage.getN4MemberDeclaration());  delegatingGetterDeclarationEClass.getESuperTypes().add(theN4JSPackage.getN4GetterDeclaration());  delegatingGetterDeclarationEClass.getESuperTypes().add(this.getDelegatingMember());  delegatingSetterDeclarationEClass.getESuperTypes().add(theN4JSPackage.getN4SetterDeclaration());  delegatingSetterDeclarationEClass.getESuperTypes().add(this.getDelegatingMember());  delegatingMethodDeclarationEClass.getESuperTypes().add(theN4JSPackage.getN4MethodDeclaration());  delegatingMethodDeclarationEClass.getESuperTypes().add(this.getDelegatingMember());  stringLiteralForSTEEClass.getESuperTypes().add(theN4JSPackage.getStringLiteral());  initEClass(script_IMEClass,Script_IM.class,"Script_IM",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getScript_IM_SymbolTable(),this.getSymbolTable(),null,"symbolTable",null,0,1,Script_IM.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(symbolTableEClass,SymbolTable.class,"SymbolTable",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getSymbolTable_Entries(),this.getSymbolTableEntry(),null,"entries",null,0,-1,SymbolTable.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(symbolTableEntryEClass,SymbolTableEntry.class,"SymbolTableEntry",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getSymbolTableEntry_Name(),theEcorePackage.getEString(),"name",null,0,1,SymbolTableEntry.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getSymbolTableEntry_ElementsOfThisName(),theN4JSPackage.getNamedElement(),null,"elementsOfThisName",null,0,-1,SymbolTableEntry.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getSymbolTableEntry_ReferencingElements(),this.getReferencingElement_IM(),this.getReferencingElement_IM_RewiredTarget(),"referencingElements",null,0,-1,SymbolTableEntry.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(symbolTableEntryOriginalEClass,SymbolTableEntryOriginal.class,"SymbolTableEntryOriginal",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getSymbolTableEntryOriginal_OriginalTarget(),theTypesPackage.getIdentifiableElement(),null,"originalTarget",null,0,1,SymbolTableEntryOriginal.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getSymbolTableEntryOriginal_ImportSpecifier(),theN4JSPackage.getImportSpecifier(),null,"importSpecifier",null,0,1,SymbolTableEntryOriginal.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getSymbolTableEntryOriginal__ExportedName(),theEcorePackage.getEString(),"exportedName",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(symbolTableEntryIMOnlyEClass,SymbolTableEntryIMOnly.class,"SymbolTableEntryIMOnly",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(symbolTableEntryInternalEClass,SymbolTableEntryInternal.class,"SymbolTableEntryInternal",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(referencingElement_IMEClass,ReferencingElement_IM.class,"ReferencingElement_IM",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getReferencingElement_IM_RewiredTarget(),this.getSymbolTableEntry(),this.getSymbolTableEntry_ReferencingElements(),"rewiredTarget",null,0,1,ReferencingElement_IM.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getReferencingElement_IM__GetOriginalTargetOfRewiredTarget(),theTypesPackage.getIdentifiableElement(),"getOriginalTargetOfRewiredTarget",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(referencingElementExpression_IMEClass,ReferencingElementExpression_IM.class,"ReferencingElementExpression_IM",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(identifierRef_IMEClass,IdentifierRef_IM.class,"IdentifierRef_IM",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getIdentifierRef_IM__GetId_IM(),this.getSymbolTableEntry(),"getId_IM",0,1,!IS_UNIQUE,IS_ORDERED);  EOperation op=initEOperation(getIdentifierRef_IM__SetId_IM__SymbolTableEntry(),null,"setId_IM",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,this.getSymbolTableEntry(),"target",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getIdentifierRef_IM__GetId(),theTypesPackage.getIdentifiableElement(),"getId",0,1,!IS_UNIQUE,IS_ORDERED);  op=initEOperation(getIdentifierRef_IM__SetId__IdentifiableElement(),null,"setId",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theTypesPackage.getIdentifiableElement(),"ix",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(parameterizedPropertyAccessExpression_IMEClass,ParameterizedPropertyAccessExpression_IM.class,"ParameterizedPropertyAccessExpression_IM",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getParameterizedPropertyAccessExpression_IM_AnyPlusAccess(),theEcorePackage.getEBoolean(),"anyPlusAccess",null,0,1,ParameterizedPropertyAccessExpression_IM.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getParameterizedPropertyAccessExpression_IM_NameOfAnyPlusProperty(),theEcorePackage.getEString(),"nameOfAnyPlusProperty",null,0,1,ParameterizedPropertyAccessExpression_IM.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getParameterizedPropertyAccessExpression_IM__GetProperty_IM(),this.getSymbolTableEntry(),"getProperty_IM",0,1,!IS_UNIQUE,IS_ORDERED);  op=initEOperation(getParameterizedPropertyAccessExpression_IM__SetProperty_IM__SymbolTableEntry(),null,"setProperty_IM",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,this.getSymbolTableEntry(),"target",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getParameterizedPropertyAccessExpression_IM__GetPropertyName(),theEcorePackage.getEString(),"getPropertyName",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getParameterizedPropertyAccessExpression_IM__GetProperty(),theTypesPackage.getIdentifiableElement(),"getProperty",0,1,!IS_UNIQUE,IS_ORDERED);  op=initEOperation(getParameterizedPropertyAccessExpression_IM__SetProperty__IdentifiableElement(),null,"setProperty",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theTypesPackage.getIdentifiableElement(),"ix",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(parameterizedTypeRef_IMEClass,ParameterizedTypeRef_IM.class,"ParameterizedTypeRef_IM",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getParameterizedTypeRef_IM__GetDeclaredType_IM(),this.getSymbolTableEntry(),"getDeclaredType_IM",0,1,!IS_UNIQUE,IS_ORDERED);  op=initEOperation(getParameterizedTypeRef_IM__SetDeclaredType_IM__SymbolTableEntry(),null,"setDeclaredType_IM",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,this.getSymbolTableEntry(),"target",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getParameterizedTypeRef_IM__GetDeclaredType(),theTypesPackage.getType(),"getDeclaredType",0,1,!IS_UNIQUE,IS_ORDERED);  op=initEOperation(getParameterizedTypeRef_IM__SetDeclaredType__Type(),null,"setDeclaredType",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theTypesPackage.getType(),"ix",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(parameterizedTypeRefStructural_IMEClass,ParameterizedTypeRefStructural_IM.class,"ParameterizedTypeRefStructural_IM",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getParameterizedTypeRefStructural_IM__GetDeclaredType_IM(),this.getSymbolTableEntry(),"getDeclaredType_IM",0,1,!IS_UNIQUE,IS_ORDERED);  op=initEOperation(getParameterizedTypeRefStructural_IM__SetDeclaredType_IM__SymbolTableEntry(),null,"setDeclaredType_IM",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,this.getSymbolTableEntry(),"target",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getParameterizedTypeRefStructural_IM__GetDeclaredType(),theTypesPackage.getType(),"getDeclaredType",0,1,!IS_UNIQUE,IS_ORDERED);  op=initEOperation(getParameterizedTypeRefStructural_IM__SetDeclaredType__Type(),null,"setDeclaredType",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theTypesPackage.getType(),"ix",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(snippetEClass,Snippet.class,"Snippet",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getSnippet_Code(),theEcorePackage.getEString(),"code",null,0,1,Snippet.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(delegatingMemberEClass,DelegatingMember.class,"DelegatingMember",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getDelegatingMember_DelegationBaseType(),this.getSymbolTableEntryOriginal(),null,"delegationBaseType",null,0,1,DelegatingMember.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getDelegatingMember_DelegationSuperClassSteps(),theEcorePackage.getEInt(),"delegationSuperClassSteps",null,0,1,DelegatingMember.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getDelegatingMember_DelegationTarget(),this.getSymbolTableEntryOriginal(),null,"delegationTarget",null,0,1,DelegatingMember.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getDelegatingMember_DelegationTargetIsAbstract(),theEcorePackage.getEBoolean(),"delegationTargetIsAbstract",null,0,1,DelegatingMember.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(delegatingGetterDeclarationEClass,DelegatingGetterDeclaration.class,"DelegatingGetterDeclaration",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(delegatingSetterDeclarationEClass,DelegatingSetterDeclaration.class,"DelegatingSetterDeclaration",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(delegatingMethodDeclarationEClass,DelegatingMethodDeclaration.class,"DelegatingMethodDeclaration",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(stringLiteralForSTEEClass,StringLiteralForSTE.class,"StringLiteralForSTE",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getStringLiteralForSTE_Entry(),this.getSymbolTableEntry(),null,"entry",null,0,1,StringLiteralForSTE.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getStringLiteralForSTE_UseExportedName(),theEcorePackage.getEBoolean(),"useExportedName",null,0,1,StringLiteralForSTE.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getStringLiteralForSTE__GetValueAsString(),theEcorePackage.getEString(),"getValueAsString",0,1,!IS_UNIQUE,IS_ORDERED);  createResource(eNS_URI);}  }
class C{  public boolean batchLogin(java.sql.Timestamp loginDate){  String uid=Ini.getProperty(Ini.P_UID);  String pwd=Ini.getProperty(Ini.P_PWD);  KeyNamePair[] roles=getRoles(uid,pwd);  if (roles == null || roles.length == 0) {    log.severe("User/Password invalid: " + uid);    return false;  }  log.info("User: " + uid);  String role=Ini.getProperty(Ini.P_ROLE);  KeyNamePair rolePP=null;  for (int i=0; i < roles.length; i++) {    KeyNamePair pair=roles[i];    if (pair.getName().equalsIgnoreCase(role)) {      rolePP=pair;      break;    }  }  if (rolePP == null) {    log.severe("Role invalid: " + role);    for (int i=0; i < roles.length; i++)     log.info("Option: " + roles[i]);    return false;  }  log.info("Role: " + role);  String client=Ini.getProperty(Ini.P_CLIENT);  KeyNamePair[] clients=getClients(rolePP);  if (clients == null || clients.length == 0) {    log.severe("No Clients for Role: " + role);    return false;  }  KeyNamePair clientPP=null;  for (int i=0; i < clients.length; i++) {    KeyNamePair pair=clients[i];    if (pair.getName().equalsIgnoreCase(client)) {      clientPP=pair;      break;    }  }  if (clientPP == null) {    log.severe("Client invalid: " + client);    for (int i=0; i < clients.length; i++)     log.info("Option: " + clients[i]);    return false;  }  String org=Ini.getProperty(Ini.P_ORG);  KeyNamePair[] orgs=getOrgs(clientPP);  if (orgs == null || orgs.length == 0) {    log.severe("No Orgs for Client: " + client);    return false;  }  KeyNamePair orgPP=null;  for (int i=0; i < orgs.length; i++) {    KeyNamePair pair=orgs[i];    if (pair.getName().equalsIgnoreCase(org)) {      orgPP=pair;      break;    }  }  if (orgPP == null) {    log.severe("Org invalid: " + org);    for (int i=0; i < orgs.length; i++)     log.info("Option: " + orgs[i]);    return false;  }  String error=validateLogin(orgPP);  if (error != null && error.length() > 0)   return false;  String wh=Ini.getProperty(Ini.P_WAREHOUSE);  KeyNamePair[] whs=getWarehouses(orgPP);  if (whs == null || whs.length == 0) {    log.severe("No Warehouses for Org: " + org);    return false;  }  KeyNamePair whPP=null;  for (int i=0; i < whs.length; i++) {    KeyNamePair pair=whs[i];    if (pair.getName().equalsIgnoreCase(wh)) {      whPP=pair;      break;    }  }  if (whPP == null) {    log.severe("Warehouse invalid: " + wh);    for (int i=0; i < whs.length; i++)     log.info("Option: " + whs[i]);    return false;  }  String langName=Ini.getProperty(Ini.P_LANGUAGE);  Language language=Language.getLanguage(langName);  Language.setLoginLanguage(language);  Env.verifyLanguage(m_ctx,language);  Env.setContext(m_ctx,Env.LANGUAGE,language.getAD_Language());  Locale loc=language.getLocale();  Locale.setDefault(loc);  Msg.getMsg(m_ctx,"0");  String printerName=Ini.getProperty(Ini.P_PRINTER);  if (loginDate == null)   loginDate=new java.sql.Timestamp(System.currentTimeMillis());  loadPreferences(orgPP,whPP,loginDate,printerName);  log.info("complete");  return true;}  }
class C{  public boolean addAll(Collection<? extends E> c){  if (c == null)   throw new NullPointerException("c == null");  if (c == this)   throw new IllegalArgumentException("c == this");  boolean modified=false;  for (  E e : c)   if (add(e))   modified=true;  return modified;}  }
class C{  public Company(String name,Address address){  this.name=name;  this.address=address;}  }
class C{  final public static float[] greatCircle(float phi1,float lambda0,float phi,float lambda,int n,boolean include_last){  int end=include_last ? n + 1 : n;  end<<=1;  double cosphi=Math.cos(phi);  double cosphi1=Math.cos(phi1);  double sinphi1=Math.sin(phi1);  double ldiff=lambda - lambda0;  double p2diff=Math.sin(((phi - phi1) / 2));  double l2diff=Math.sin((ldiff) / 2);  double c=2.0f * Math.asin(Math.sqrt(p2diff * p2diff + cosphi1 * cosphi * l2diff* l2diff));  double Az=Math.atan2(cosphi * Math.sin(ldiff),(cosphi1 * Math.sin(phi) - sinphi1 * cosphi * Math.cos(ldiff)));  double cosAz=Math.cos(Az);  double sinAz=Math.sin(Az);  float[] points=new float[end];  points[0]=phi1;  points[1]=lambda0;  double inc=c / n;  c=inc;  for (int i=2; i < end; i+=2, c+=inc) {    double sinc=Math.sin(c);    double cosc=Math.cos(c);    points[i]=(float)Math.asin(sinphi1 * cosc + cosphi1 * sinc * cosAz);    points[i + 1]=(float)Math.atan2(sinc * sinAz,cosphi1 * cosc - sinphi1 * sinc * cosAz) + lambda0;  }  return points;}  }
class C{  private boolean isClosed(){  return out == null;}  }
class C{  @Override public void applyConfig(final ConfigSettings config){  Object o=config.getConfigParameter(ConfigurationKeys.PATH_PROGRAM_7ZIP);  if (o != null) {    controller.setEnable7Zip(true);    sevenZipPathField.setText((String)o);  } else {    controller.setEnable7Zip(false);    sevenZipPathField.setText("");  }}  }
class C{  public static char[] remove(char[] buffer,int offset,int length){  int len2=buffer.length - length;  char temp[]=new char[len2];  System.arraycopy(buffer,0,temp,0,offset);  System.arraycopy(buffer,offset + length,temp,offset,len2 - offset);  return temp;}  }
class C{  protected static void checkArguments(final AbstractSQLProvider provider,final DebuggerTemplateManager debuggerManager){  Preconditions.checkNotNull(provider,"IE00413: Provider argument can not be null");  Preconditions.checkNotNull(debuggerManager,"IE01227: Debugger final manager argument can final not be null");  Preconditions.checkArgument(debuggerManager.inSameDatabase(provider),"IE00415: Debugger manager is not part of the given database");}  }
class C{  private MirrorType(String name,DataPolicy dataPolicy){  this.name=name;  this.dataPolicy=dataPolicy;}  }
class C{  public OnePlayerArea(final int width,final int height){  super(width,height);  hide();  occupantRef=null;}  }
class C{  public DeleteRepositoryRequestBuilder(ElasticsearchClient client,DeleteRepositoryAction action){  super(client,action,new DeleteRepositoryRequest());}  }
class C{  public boolean saveFile(File file,NBTTagCompound data){  try {    File tempFile=new File(file.getParent(),file.getName() + "_tmp.dat");    CompressedStreamTools.writeCompressed(data,new FileOutputStream(tempFile));    if (file.exists()) {      file.delete();    }    tempFile.renameTo(file);    return true;  } catch (  Exception e) {    System.out.println("Failed to queueSave " + file.getName() + ".dat!");    e.printStackTrace();    return false;  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:15.141 -0500",hash_original_method="D97B4D8E5C3471916B8248342E55C9E3",hash_generated_method="490DC7CEB8477FD06E9F6667162C59A4") public void runFinalization(){  try {    FinalizerReference.finalizeAllEnqueued();  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();  }}  }
class C{  private static String attributeValuesString(Instance instance,Range attRange){  StringBuffer text=new StringBuffer();  if (attRange != null) {    boolean firstOutput=true;    attRange.setUpper(instance.numAttributes() - 1);    for (int i=0; i < instance.numAttributes(); i++) {      if (attRange.isInRange(i)) {        if (firstOutput) {          text.append("(");        } else {          text.append(",");        }        text.append(instance.toString(i));        firstOutput=false;      }    }    if (!firstOutput) {      text.append(")");    }  }  return text.toString();}  }
class C{  private static boolean excludesFile(File file){  return file.getName().matches(".*svn.*");}  }
class C{  public DragEntry dragSelectedEntry(){  try {    KeyStoreHistory history=getActiveKeyStoreHistory();    if (history == null) {      return null;    }    KeyStoreState currentState=history.getCurrentState();    KeyStore keyStore=currentState.getKeyStore();    String alias=getSelectedEntryAlias();    if (alias == null) {      return null;    }    if (KeyStoreUtil.isKeyEntry(alias,keyStore)) {      JOptionPane.showMessageDialog(frame,res.getString("KseFrame.NoDragKeyEntry.message"),KSE.getApplicationName(),JOptionPane.WARNING_MESSAGE);      return null;    }    if (KeyStoreUtil.isKeyPairEntry(alias,keyStore)) {      Password password=currentState.getEntryPassword(alias);      KeyStoreType type=KeyStoreType.resolveJce(keyStore.getType());      if (password == null && type.hasEntryPasswords()) {        JOptionPane.showMessageDialog(frame,res.getString("KseFrame.NoDragLockedKeyPairEntry.message"),KSE.getApplicationName(),JOptionPane.WARNING_MESSAGE);        return null;      }      PrivateKey privateKey=(PrivateKey)keyStore.getKey(alias,password.toCharArray());      Certificate[] certificateChain=keyStore.getCertificateChain(alias);      return new DragKeyPairEntry(alias,privateKey,password,certificateChain);    } else {      Certificate trustedCertificate=keyStore.getCertificate(alias);      return new DragTrustedCertificateEntry(alias,trustedCertificate);    }  } catch (  Exception ex) {    DError.displayError(frame,ex);    return null;  }}  }
class C{  public static Boolean checkAvailable(){  String state=Environment.getExternalStorageState();  if (Environment.MEDIA_MOUNTED.equals(state)) {    return true;  } else {    return false;  }}  }
class C{  @Transactional public void updateBillingSystemWithReceiptInfo(final ReceiptHeader receiptHeader,final BillingIntegrationService billingService,final InstrumentHeader bouncedInstrumentInfo) throws ApplicationRuntimeException {  LOGGER.info("$$$$$$ Update Billing system for Service Code :" + receiptHeader.getService().getCode() + (receiptHeader.getConsumerCode() != null ? " and consumer code: " + receiptHeader.getConsumerCode() : ""));  final Set<BillReceiptInfo> billReceipts=new HashSet<BillReceiptInfo>(0);  billReceipts.add(new BillReceiptInfoImpl(receiptHeader,chartOfAccountsHibernateDAO,persistenceService,bouncedInstrumentInfo));  if (updateBillingSystem(receiptHeader.getService(),billReceipts,billingService)) {    receiptHeader.setIsReconciled(true);    super.persist(receiptHeader);    updateCollectionIndexAndPushMail(receiptHeader);  }  LOGGER.info("$$$$$$ Billing system updated for Service Code :" + receiptHeader.getService().getCode() + (receiptHeader.getConsumerCode() != null ? " and consumer code: " + receiptHeader.getConsumerCode() : ""));}  }
class C{  public static void writeAvailableBitsWord(Object o,Word val){  Magic.setWordAtOffset(o,STATUS_OFFSET,val);}  }
class C{  NativeObject subObject(int offset){  return new NativeObject(offset + address);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.233 -0500",hash_original_method="774CA3D90C36917005A085F0E322036A",hash_generated_method="842D690B248E8ADCC5125F903224E558") public void drawPaint(Paint paint){  addTaint(paint.getTaint());}  }
class C{  @Override public void checkpoint(Result<Boolean> result){  if (!_journalStream.saveStart()) {    result.ok(true);    return;  }  TableWriterService readWrite=_table.getReadWrite();  int tailPid=_tailPid.get();  for (int pid=1; pid <= tailPid; pid++) {    Page page=_pages.get(pid);    if (page != null) {      page.write(_table,this,readWrite);    }  }  readWrite.fsync(new CheckpointResult(result));}  }
class C{  public void dispose(){  if (shadowMap != null) {    shadowMap.dispose();  }}  }
class C{  void ideSetupWorkspace() throws Exception {  if (workspaceExists()) {    project.getLogger().lifecycle("Skipping " + OomphIdePlugin.IDE_SETUP_WORKSPACE + " because it already exists, run "+ OomphIdePlugin.IDE_CLEAN+ " to force a rebuild.");  }  File workspaceDir=getWorkspaceDir();  FileMisc.cleanDir(workspaceDir);  workspaceToContent.forEach(null);  internalSetup(getIdeDir());}  }
class C{  public static void addEjbRef(WebXml webXml,EjbRef ref){  DescriptorElement ejbRefElement=webXml.getDescriptorType().getTagByName(WebXmlType.EJB_LOCAL_REF).create();  ejbRefElement.setAttribute("id",ref.getName().replace('/','_'));  ejbRefElement.addContent(webXml.getDescriptorType().getTagByName(WebXmlType.EJB_REF_NAME).create().setText(ref.getName()));  ejbRefElement.addContent(webXml.getDescriptorType().getTagByName(WebXmlType.EJB_REF_TYPE).create().setText(ref.getType()));  if (ref.isLocal()) {    ejbRefElement.addContent(webXml.getDescriptorType().getTagByName(WebXmlType.LOCAL_HOME).create().setText(ref.getEjbHomeInterface()));    ejbRefElement.addContent(webXml.getDescriptorType().getTagByName(WebXmlType.LOCAL).create().setText(ref.getEjbInterface()));  } else {    ejbRefElement.addContent(webXml.getDescriptorType().getTagByName(WebXmlType.HOME).create().setText(ref.getEjbHomeInterface()));    ejbRefElement.addContent(webXml.getDescriptorType().getTagByName(WebXmlType.REMOTE).create().setText(ref.getEjbInterface()));  }  if (ref.getEjbName() != null) {    ejbRefElement.addContent(webXml.getDescriptorType().getTagByName(WebXmlType.EJB_LINK).create().setText(ref.getEjbName()));  } else   if (ref.getJndiName() != null) {    for (    Descriptor d : webXml.getVendorDescriptors()) {      VendorWebAppDescriptor descr=(VendorWebAppDescriptor)d;      descr.addEjbReference(ref);    }  } else {    throw new IllegalStateException("Either ejbName or jndiName must be set.");  }  webXml.addTag(ejbRefElement);}  }
class C{  public Matrix(final double[][] data,final Set<Address.Flags> flags){  super(data.length,data[0].length,null);  this.addr=new DirectMatrixAddress(this.$,0,data.length,null,0,data[0].length,flags,true,data.length,data[0].length);  for (int row=0; row < data.length; row++) {    System.arraycopy(data[row],0,this.$,row * this.cols,this.cols);  }}  }
class C{  @Override @Inline public void processRoots(){  VM.assertions.fail("SanityRootTraceLocal.processRoots called.");}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:40.230 -0500",hash_original_method="480AEB5EE1C7676DB93788B189E32B71",hash_generated_method="F26DE7DE8F4A6B544C3DD8C910560523") private void lineUpScroll(){  Layout layout=getLayout();  if (mWebView != null && layout != null) {    if (mSingle) {      float maxScrollX=layout.getLineRight(0) - getWidth();      if (DebugFlags.WEB_TEXT_VIEW) {        Log.v(LOGTAG,"onTouchEvent x=" + mScrollX + " y="+ mScrollY+ " maxX="+ maxScrollX);      }      mWebView.scrollFocusedTextInputX(maxScrollX > 0 ? mScrollX / maxScrollX : 0);    } else {      mWebView.scrollFocusedTextInputY(mScrollY);    }  }}  }
class C{  public void removeAnimationFor(String property){  ArrayList<ObjectAnimator> removalList=(ArrayList<ObjectAnimator>)mAnimators.clone();  for (  ObjectAnimator currentAnim : removalList) {    if (property.equals(currentAnim.getPropertyName())) {      currentAnim.cancel();    }  }}  }
class C{  public MutableKeyBuffer(final int capacity){  nkeys=0;  keys=new byte[capacity][];}  }
class C{  public ReilEdge(final ReilBlock source,final ReilBlock target,final EdgeType type){  super(source,target);  m_type=Preconditions.checkNotNull(type,"Error: Type argument can not be null");  ReilBlock.link(source,target);}  }
class C{  public synchronized void removeFromCache(int pageId){  cache.remove(pageId);}  }
class C{  public VideoData(){  this(IoBuffer.allocate(0).flip());}  }
class C{  @Override public boolean areAllItemsEnabled(){  return adapter1.areAllItemsEnabled() && adapter2.areAllItemsEnabled();}  }
class C{  @Override public boolean contains(Object arg0){  return indexOf(arg0) != -1;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public boolean isAutoIncrement(int column) throws SQLException {  try {    debugCodeCall("isAutoIncrement",column);    checkColumnIndex(column);    return result.isAutoIncrement(--column);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static void removeTrayIcon(){  if (tray != null && trayIcon != null)   tray.remove(trayIcon);}  }
class C{  private static void addAbbreviation(String primitive,String abbreviation){  abbreviationMap.put(primitive,abbreviation);  reverseAbbreviationMap.put(abbreviation,primitive);}  }
class C{  protected void addToChannelsPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Endpoint_toChannels_feature"),getString("_UI_PropertyDescriptor_description","_UI_Endpoint_toChannels_feature","_UI_Endpoint_type"),EipPackage.Literals.ENDPOINT__TO_CHANNELS,true,false,true,null,null,null));}  }
class C{  public int compareTo(ReadableDuration other){  long thisMillis=this.getMillis();  long otherMillis=other.getMillis();  if (thisMillis < otherMillis) {    return -1;  }  if (thisMillis > otherMillis) {    return 1;  }  return 0;}  }
class C{  @Override public void write(DataOutput out) throws IOException {  if (USE_HADOOP_TEXT)   Text.writeString(out,term); else   out.writeUTF(term);  WritableUtils.writeVInt(out,splitno);  WritableUtils.writeVInt(out,flushno);}  }
class C{  public static double SSPNfitness(boolean useTrainingData,GEPIndividual ind){  double SSPN=SSPNrawFitness(useTrainingData,ind,0);  return (1000.0 * SSPN);}  }
class C{  public Vertex applyFRAGMENT(List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,Primitive format){  String text=null;  Vertex nil=network.createVertex(Primitive.NULL);  if (arguments.size() == 0) {    return nil;  } else   if (arguments.size() == 1) {    Vertex result=arguments.get(0).getTarget().applyQuotient(variables,network);    if (!(result.getData() instanceof String)) {      StringWriter writer=new StringWriter();      Vertex word=Language.getWordFollowing(result,nil,nil,network);      writer.write(word.getDataValue());      text=writer.toString();    } else {      text=(String)result.getData();    }  } else {    StringWriter writer=new StringWriter();    List<Vertex> words=new ArrayList<Vertex>();    for (    Relationship relationship : arguments) {      words.add(relationship.getTarget().applyQuotient(variables,network));    }    Vertex previousWord=nil;    for (int index=0; index < words.size(); index++) {      Vertex word=words.get(index);      Vertex nextWord=nil;      if (words.size() > (index + 1)) {        nextWord=words.get(index + 1);      }      word=Language.getWordFollowing(word,previousWord,nextWord,network);      writer.write(String.valueOf(word.getData()));      if ((index + 1) < words.size()) {        writer.write(" ");      }      previousWord=word;    }    text=writer.toString();  }  boolean caseSensitive=false;  if (format != null) {    if (format.equals(Primitive.UPPERCASE)) {      text=text.toUpperCase();      caseSensitive=true;    } else     if (format.equals(Primitive.LOWERCASE)) {      text=text.toLowerCase();      caseSensitive=true;    } else     if (format.equals(Primitive.FORMAL)) {      text=org.botlibre.tool.Utils.formal(text);      caseSensitive=true;    } else     if (format.equals(Primitive.PERSON)) {      text=org.botlibre.tool.Utils.person(text);    } else     if (format.equals(Primitive.PERSON2)) {      text=org.botlibre.tool.Utils.person2(text);    } else     if (format.equals(Primitive.GENDER)) {      text=org.botlibre.tool.Utils.gender(text);    } else     if (format.equals(Primitive.SENTENCE)) {      text=Utils.capitalize(text);      caseSensitive=true;    } else     if (format.equals(Primitive.EXPLODE)) {      text=org.botlibre.tool.Utils.explode(text);    } else     if (format.equals(Primitive.NORMALIZE)) {      text=org.botlibre.tool.Utils.normalize(text);    } else     if (format.equals(Primitive.DENORMALIZE)) {      text=org.botlibre.tool.Utils.denormalize(text);    }  }  Vertex fragment=network.createFragment(text);  if (caseSensitive) {    fragment.addRelationship(Primitive.TYPE,Primitive.CASESENSITVE);  }  return fragment;}  }
class C{  private final static void LevelCheckTemporal(ProofNode pn){  if ((pn == null) || (pn.getKind() != NonLeafProofKind)) {    return;  }  ;  NonLeafProofNode pnode=(NonLeafProofNode)pn;  for (int i=0; i < pnode.getSteps().length; i++) {    LevelNode node=pnode.getSteps()[i];    OpApplNode oanode=null;    TheoremNode tnode=null;    if (node.getKind() == TheoremKind) {      tnode=(TheoremNode)node;      if (tnode.theoremExprOrAssumeProve instanceof OpApplNode) {        oanode=(OpApplNode)tnode.theoremExprOrAssumeProve;      }    }    ;    if (oanode != null) {      UniqueString name=oanode.operator.getName();      if (((name == OP_take) || (name == OP_witness) || (name == OP_have)) && (oanode.getLevel() != ConstantLevel)) {        errors.addError(oanode.stn.getLocation(),"Non-constant TAKE, WITNESS, or HAVE " + "for temporal goal.");      } else       if (name == OP_pfcase) {        if (oanode.getLevel() != ConstantLevel) {          errors.addError(oanode.stn.getLocation(),"Non-constant CASE for temporal goal.");        }        ;        LevelCheckTemporal(tnode.getProof());      } else       if (name == OP_qed) {        LevelCheckTemporal(tnode.getProof());      }    }    ;  }}  }
class C{  public SignalMastLogicTableAction(String s){  super(s);}  }
class C{  public static double sqrt(double x){  return Math.sqrt(x);}  }
class C{  private boolean modifyIndexProps(String tmpIdxDirName){  LOG.info("New index installed. Updating index properties... index=" + tmpIdxDirName);  Properties p=new Properties();  Directory dir=null;  try {    dir=solrCore.getDirectoryFactory().get(solrCore.getDataDir(),DirContext.META_DATA,solrCore.getSolrConfig().indexConfig.lockType);    if (slowFileExists(dir,SnapPuller.INDEX_PROPERTIES)) {      final IndexInput input=dir.openInput(SnapPuller.INDEX_PROPERTIES,DirectoryFactory.IOCONTEXT_NO_CACHE);      final InputStream is=new PropertiesInputStream(input);      try {        p.load(new InputStreamReader(is,StandardCharsets.UTF_8));      } catch (      Exception e) {        LOG.error("Unable to load " + SnapPuller.INDEX_PROPERTIES,e);      } finally {        IOUtils.closeQuietly(is);      }    }    try {      dir.deleteFile(SnapPuller.INDEX_PROPERTIES);    } catch (    IOException e) {    }    final IndexOutput out=dir.createOutput(SnapPuller.INDEX_PROPERTIES,DirectoryFactory.IOCONTEXT_NO_CACHE);    p.put("index",tmpIdxDirName);    Writer os=null;    try {      os=new OutputStreamWriter(new PropertiesOutputStream(out),StandardCharsets.UTF_8);      p.store(os,SnapPuller.INDEX_PROPERTIES);      dir.sync(Collections.singleton(INDEX_PROPERTIES));    } catch (    Exception e) {      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unable to write " + SnapPuller.INDEX_PROPERTIES,e);    } finally {      IOUtils.closeQuietly(os);    }    return true;  } catch (  IOException e1) {    throw new RuntimeException(e1);  } finally {    if (dir != null) {      try {        solrCore.getDirectoryFactory().release(dir);      } catch (      IOException e) {        SolrException.log(LOG,"",e);      }    }  }}  }
class C{  public static boolean isDouble(FTypeRef typeRef){  return isBasicType(typeRef,FBasicTypeId.DOUBLE);}  }
class C{  public boolean intersectsSegment(Vec4 pa,Vec4 pb){  if (pa == null || pb == null) {    throw new IllegalArgumentException("Point Is Null");  }  if (this.contains(pa) || this.contains(pb))   return true;  if (pa.equals(pb))   return false;  for (  Plane p : this.getAllPlanes()) {    if (p.onSameSide(pa,pb) < 0)     return false;    if (p.clip(pa,pb) != null)     return true;  }  return false;}  }
class C{  @Override public void postProcess(ResultProducer rp) throws Exception {  super.postProcess(rp);  m_ResultListener.postProcess(this);}  }
class C{  public void clearMemoryCache(){  checkConfiguration();  configuration.memoryCache.clear();}  }
class C{  public static byte[] decodeHex(final String value){  if (value.length() % 2 != 0) {    throw new NumberFormatException("odd number of characters in hex string");  }  byte[] bytes=new byte[value.length() / 2];  for (int i=0; i < value.length(); i+=2) {    bytes[i / 2]=(byte)Integer.parseInt(value.substring(i,i + 2),16);  }  return bytes;}  }
class C{  public LexiconRelation(final IIndexManager indexManager,final String namespace,final Long timestamp,final Properties properties){  this(null,indexManager,namespace,timestamp,properties);}  }
class C{  private static void matchesTest() throws Exception {  Pattern p=Pattern.compile("ulb(c*)");  Matcher m=p.matcher("ulbcccccc");  if (!m.matches())   failCount++;  m.reset("zzzulbcccccc");  if (m.matches())   failCount++;  m.reset("ulbccccccdef");  if (m.matches())   failCount++;  p=Pattern.compile("a|ad");  m=p.matcher("ad");  if (!m.matches())   failCount++;  p=Pattern.compile(toSupplementaries("ulb(c*)"));  m=p.matcher(toSupplementaries("ulbcccccc"));  if (!m.matches())   failCount++;  m.reset(toSupplementaries("zzzulbcccccc"));  if (m.matches())   failCount++;  m.reset(toSupplementaries("ulbccccccdef"));  if (m.matches())   failCount++;  p=Pattern.compile(toSupplementaries("a|ad"));  m=p.matcher(toSupplementaries("ad"));  if (!m.matches())   failCount++;  report("Matches");}  }
class C{  protected void rescaleImage(int width,int height,int hint){  bgImage=getRTextAreaBase().createVolatileImage(width,height);  if (bgImage != null)   renderImage(width,height,hint);}  }
class C{  protected boolean isFieldSeparatorAtEnd(){  return fieldSeparatorAtEnd;}  }
class C{  public SynthGraphicsUtils(){}  }
class C{  private void testTableFunctionGeometry() throws SQLException {  deleteDb("spatial");  try (Connection conn=getConnection(URL)){    Statement stat=conn.createStatement();    stat.execute("CREATE ALIAS POINT_TABLE FOR \"" + TestSpatial.class.getName() + ".pointTable\"");    stat.execute("create table test as select * from point_table(1, 1)");    ResultSet columnMeta=conn.getMetaData().getColumns(null,null,"TEST","THE_GEOM");    assertTrue(columnMeta.next());    assertEquals("geometry",columnMeta.getString("TYPE_NAME").toLowerCase());    assertFalse(columnMeta.next());  }   deleteDb("spatial");}  }
class C{  public ECKey encrypt(KeyCrypter keyCrypter,KeyParameter aesKey) throws KeyCrypterException {  checkNotNull(keyCrypter);  final byte[] privKeyBytes=getPrivKeyBytes();  EncryptedData encryptedPrivateKey=keyCrypter.encrypt(privKeyBytes,aesKey);  ECKey result=ECKey.fromEncrypted(encryptedPrivateKey,keyCrypter,getPubKey());  result.setCreationTimeSeconds(creationTimeSeconds);  return result;}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(TraversalTest.class);}  }
class C{  public static void addObjectVisualizer(Object target,ObjectVisualizer visualizer){  visualizerMap.put(target,new WeakReference<>(visualizer));}  }
class C{  public SearchTransition(){  results.setEditable(false);  animator.setAcceleration(.2f);  animator.setDeceleration(.4f);  searchField.addActionListener(this);  instructions.setFont(instructions.getFont().deriveFont(15f));}  }
class C{  @Override public void actionPerformed(ActionEvent e){  FileDialog chooser=new FileDialog(StdDraw.frame,"Use a .png or .jpg extension",FileDialog.SAVE);  chooser.setVisible(true);  String filename=chooser.getFile();  if (filename != null) {    StdDraw.save(chooser.getDirectory() + File.separator + chooser.getFile());  }}  }
class C{  public T caseEnumerationType(EnumerationType object){  return null;}  }
class C{  public void createCostDetail(MTransaction transaction,IDocumentLine model){  MClient client=new MClient(transaction.getCtx(),transaction.getAD_Client_ID(),transaction.get_TrxName());  StringBuilder description=new StringBuilder();  if (!Util.isEmpty(model.getDescription(),true))   description.append(model.getDescription());  if (model != null) {    description.append(model.isSOTrx() ? "(|->)" : "(|<-)");  }  List<MAcctSchema> acctSchemas=new ArrayList(Arrays.asList(MAcctSchema.getClientAcctSchema(transaction.getCtx(),transaction.getAD_Client_ID(),transaction.get_TrxName())));  List<MCostElement> costElements=MCostElement.getCostElement(transaction.getCtx(),transaction.get_TrxName());  List<MCostType> costTypes=MCostType.get(transaction.getCtx(),transaction.get_TrxName());  for (  MAcctSchema accountSchema : acctSchemas) {    for (    MCostType costType : costTypes) {      if (!costType.isActive())       continue;      for (      MCostElement costElement : costElements) {        createCostDetail(accountSchema,costType,costElement,transaction,model,client.isCostImmediate());      }    }  }}  }
class C{  public Vec4 intersect(Vec4 pa,Vec4 pb){  if (pa == null || pb == null) {    String message=Logging.getMessage("nullValue.PointIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  try {    if (pa.equals(pb)) {      double d=this.distanceTo(pa);      if (d == 0)       return pa; else       return null;    }    Line l=Line.fromSegment(pa,pb);    double t=this.intersectDistance(l);    if (Double.isInfinite(t))     return Vec4.INFINITY;    if (Double.isNaN(t) || t < 0 || t > 1)     return null;    return l.getPointAt(t);  } catch (  IllegalArgumentException e) {    return null;  }}  }
class C{  public void addAll(int[] data){  int dataLen=data.length;  if (dataLen == 0) {    return;  }  int newcap=size + (int)(dataLen * 1.1) + 1;  ensureCapacity(newcap);  System.arraycopy(data,0,array,size,dataLen);  size+=dataLen;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getExtendedStateMachine_();}  }
class C{  public void sort(Comparator<? super T> comparator){synchronized (mLock) {    if (mOriginalValues != null) {      Collections.sort(mOriginalValues,comparator);    } else {      Collections.sort(mObjects,comparator);    }  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  @DSComment("not data related") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:55.351 -0500",hash_original_method="97539A44FE944982691962B490B5A049",hash_generated_method="CBFA8797FEE471D07D72810BCB736253") public SecretKeySpec(byte[] key,int offset,int len,String algorithm){  if (key == null) {    throw new IllegalArgumentException("key == null");  }  if (key.length == 0) {    throw new IllegalArgumentException("key.length == 0");  }  if (len < 0 || offset < 0) {    throw new ArrayIndexOutOfBoundsException("len < 0 || offset < 0");  }  if (key.length - offset < len) {    throw new IllegalArgumentException("key too short");  }  if (algorithm == null) {    throw new IllegalArgumentException("algorithm == null");  }  this.algorithm=algorithm;  this.key=new byte[len];  System.arraycopy(key,offset,this.key,0,len);}  }
class C{  public void add(String name,String value){  if (headerBuilder == null) {    headerBuilder=new Headers.Builder();  }  headerBuilder.add(name,value);}  }
class C{  public void testBug20687() throws Exception {  if (versionMeetsMinimum(5,0)) {    createTable("testBug20687","(field1 int)");    Connection poolingConn=null;    Properties props=new Properties();    props.setProperty("cachePrepStmts","true");    props.setProperty("useServerPrepStmts","true");    PreparedStatement pstmt1=null;    PreparedStatement pstmt2=null;    try {      poolingConn=getConnectionWithProps(props);      pstmt1=poolingConn.prepareStatement("SELECT field1 FROM testBug20687");      this.rs=pstmt1.executeQuery();      pstmt1.close();      pstmt2=poolingConn.prepareStatement("SELECT field1 FROM testBug20687");      this.rs=pstmt2.executeQuery();      assertTrue(pstmt1 == pstmt2);      pstmt2.close();    }  finally {      if (pstmt1 != null) {        pstmt1.close();      }      if (pstmt2 != null) {        pstmt2.close();      }      if (poolingConn != null) {        poolingConn.close();      }    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected String createInstanceFieldName(String name){  return String.format(FORMAT_INSTANCE_FIELD_NAME,StringUtils.startUpperCase(name));}  }
class C{  public Timestamp(String format){  this(new Date(),format);}  }
class C{  @Override public R visitVariable(VariableElement e,P p){  return scan(e.getEnclosedElements(),p);}  }
class C{  public int decrement(int offset){  return increment(-offset);}  }
class C{  public Projectron(KernelTrick k,double eta){  this(k,eta,true);}  }
class C{  @Override protected void processRememberedSets(){  if (modBuffer != null) {    logMessage(5,"clearing modBuffer");    while (!modBuffer.isEmpty()) {      ObjectReference src=modBuffer.pop();      HeaderByte.markAsUnlogged(src);    }  }}  }
class C{  public static int createAndLinkProgram(final int vertexShaderHandle,final int fragmentShaderHandle,final String[] attributes){  int programHandle=GLES20.glCreateProgram();  if (programHandle != 0) {    GLES20.glAttachShader(programHandle,vertexShaderHandle);    GLES20.glAttachShader(programHandle,fragmentShaderHandle);    if (attributes != null) {      final int size=attributes.length;      for (int i=0; i < size; i++) {        GLES20.glBindAttribLocation(programHandle,i,attributes[i]);      }    }    GLES20.glLinkProgram(programHandle);    final int[] linkStatus=new int[1];    GLES20.glGetProgramiv(programHandle,GLES20.GL_LINK_STATUS,linkStatus,0);    if (linkStatus[0] == 0) {      Log.e(TAG,"Error compiling program: " + GLES20.glGetProgramInfoLog(programHandle));      GLES20.glDeleteProgram(programHandle);      programHandle=0;    }  }  if (programHandle == 0) {    throw new RuntimeException("Error creating program.");  }  return programHandle;}  }
class C{  public static boolean isConnectedWifi(Context context){  NetworkInfo info=getNetworkInfo(context);  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_WIFI);}  }
class C{  private int combinedLength(byte[]... arrays){  int combinedLength=0;  for (  byte[] array : arrays) {    combinedLength+=array.length;  }  return combinedLength;}  }
class C{  public static void copy(InputStream in,File file){  try {    OutputStream out=new FileOutputStream(file);    byte[] buf=new byte[1024];    int len;    while ((len=in.read(buf)) > 0)     out.write(buf,0,len);    out.close();    in.close();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void addNode(String sName,int nCardinality,int nPosX,int nPosY) throws Exception {  if (getNode2(sName) >= 0) {    addNode(sName + "x",nCardinality);    return;  }  ArrayList<String> values=new ArrayList<String>(nCardinality);  for (int iValue=0; iValue < nCardinality; iValue++) {    values.add("Value" + (iValue + 1));  }  Attribute att=new Attribute(sName,values);  m_Instances.insertAttributeAt(att,m_Instances.numAttributes());  int nAtts=m_Instances.numAttributes();  ParentSet[] parentSets=new ParentSet[nAtts];  for (int iParentSet=0; iParentSet < nAtts - 1; iParentSet++) {    parentSets[iParentSet]=m_ParentSets[iParentSet];  }  parentSets[nAtts - 1]=new ParentSet();  m_ParentSets=parentSets;  Estimator[][] distributions=new Estimator[nAtts][];  for (int iNode=0; iNode < nAtts - 1; iNode++) {    distributions[iNode]=m_Distributions[iNode];  }  distributions[nAtts - 1]=new Estimator[1];  distributions[nAtts - 1][0]=new DiscreteEstimatorBayes(nCardinality,0.5);  m_Distributions=distributions;  m_nPositionX.add(nPosX);  m_nPositionY.add(nPosY);  m_nEvidence.add(-1);  double[] fMarginP=new double[nCardinality];  for (int iValue=0; iValue < nCardinality; iValue++) {    fMarginP[iValue]=1.0 / nCardinality;  }  m_fMarginP.add(fMarginP);  if (m_bNeedsUndoAction) {    addUndoAction(new AddNodeAction(sName,nCardinality,nPosX,nPosY));  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public boolean isDiscountSchema(){  return m_discountSchema || m_useVendorBreak;}  }
class C{  public synchronized boolean containsKey(CacheKey key){  Preconditions.checkNotNull(key);  if (!mMap.containsKey(key)) {    return false;  }  EncodedImage storedEncodedImage=mMap.get(key);synchronized (storedEncodedImage) {    if (!EncodedImage.isValid(storedEncodedImage)) {      mMap.remove(key);      FLog.w(TAG,"Found closed reference %d for key %s (%d)",System.identityHashCode(storedEncodedImage),key.toString(),System.identityHashCode(key));      return false;    }    return true;  }}  }
class C{  public void encrypt(byte[] buffer){  int nLen=buffer.length;  long lTemp;  for (int nI=0; nI < nLen; nI+=8) {    lTemp=BinConverter.byteArrayToLong(buffer,nI);    lTemp=encryptBlock(lTemp);    BinConverter.longToByteArray(lTemp,buffer,nI);  }  ;}  }
class C{  public void testGetPrivateKey() throws Exception {  byte[] privateKeyData={1,2,3,4,5};  PrivateKeyStub privateKey=new PrivateKeyStub("private","fff",privateKeyData);  PublicKeyStub publicKey=new PublicKeyStub("public","fff",null);  KeyPair kp=new KeyPair(publicKey,privateKey);  Signer s=new SignerStub("sss5");  assertNull(s.getPrivateKey());  s.setKeyPair(kp);  assertSame(privateKey,s.getPrivateKey());}  }
class C{  @Override public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event){  if (event.getEventType() == AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED) {    event.getText().clear();    int flags=DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_SHOW_YEAR | DateUtils.FORMAT_SHOW_WEEKDAY;    String dateString=DateUtils.formatDateTime(getContext(),mDateMillis,flags);    event.getText().add(dateString);    return true;  }  return super.dispatchPopulateAccessibilityEvent(event);}  }
class C{  protected static String makeEscapedCharString(char escape){  final String QT="\"";  final String BS="\\";  String result=QT + BS + escape+ QT;  return result;}  }
class C{  private void endFling(boolean scrollIntoSlots){synchronized (this) {    mRotator.forceFinished(true);  }  if (scrollIntoSlots)   scrollIntoSlots();}  }
class C{  public final float decodePageContentForImageSampling(final PdfObject pdfObject){  try {    parserOptions.setRenderDirectly(true);    parserOptions.imagesProcessedFully=true;    imageCount=0;    gs=new GraphicsState(0,0);    final byte[] b_data;    byte[][] pageContents=null;    if (pdfObject != null) {      pageContents=pdfObject.getKeyArray(PdfDictionary.Contents);      isDataValid=pdfObject.streamMayBeCorrupt();    }    if (pdfObject != null && pageContents == null) {      b_data=currentPdfFile.readStream(pdfObject,true,true,false,false,false,pdfObject.getCacheName(currentPdfFile.getObjectReader()));    } else     if (pageStream != null) {      b_data=pageStream;    } else {      b_data=currentPdfFile.getObjectReader().readPageIntoStream(pdfObject);    }    if (b_data != null && b_data.length > 0) {      getSamplingOnly=true;      decodeStreamIntoObjects(b_data,false);    }    cache.resetFonts();    return parserOptions.getSamplingUsed();  } catch (  final Error err) {    errorTracker.addPageFailureMessage("Problem decoding page " + err);    if (ExternalHandlers.throwMissingCIDError && err.getMessage() != null && err.getMessage().contains("kochi")) {      throw err;    }  }  return -1;}  }
class C{  public void startAnimation(){  resetAnimation();}  }
class C{  public static byte[] reverseBytes(byte[] bytes){  byte[] buf=new byte[bytes.length];  for (int i=0; i < bytes.length; i++)   buf[i]=bytes[bytes.length - 1 - i];  return buf;}  }
class C{  public final String extractPV(Position pos){  StringBuilder ret=new StringBuilder(100);  pos=new Position(pos);  boolean first=true;  TTEntry ent=probe(pos.historyHash());  UndoInfo ui=new UndoInfo();  ArrayList<Long> hashHistory=new ArrayList<Long>();  boolean repetition=false;  MoveGen moveGen=MoveGen.instance;  while (ent.type != TTEntry.T_EMPTY) {    String type="";    if (ent.type == TTEntry.T_LE) {      type="<";    } else     if (ent.type == TTEntry.T_GE) {      type=">";    }    Move m=new Move(0,0,0);    ent.getMove(m);    MoveGen.MoveList moves=moveGen.pseudoLegalMoves(pos);    MoveGen.removeIllegal(pos,moves);    boolean contains=false;    for (int mi=0; mi < moves.size; mi++)     if (moves.m[mi].equals(m)) {      contains=true;      break;    }    if (!contains)     break;    String moveStr=TextIO.moveToString(pos,m,false);    if (repetition)     break;    if (!first) {      ret.append(" ");    }    ret.append(type);    ret.append(moveStr);    pos.makeMove(m,ui);    if (hashHistory.contains(pos.zobristHash())) {      repetition=true;    }    hashHistory.add(pos.zobristHash());    ent=probe(pos.historyHash());    first=false;  }  return ret.toString();}  }
class C{  private WhoisCommand parseCommand(String command) throws WhoisException {  List<String> tokens=filterEmptyStrings(command.split("\\s"));  if (tokens.isEmpty()) {    throw new WhoisException(now,SC_BAD_REQUEST,"No WHOIS command specified.");  }  final String arg1=tokens.get(0);  if (arg1.equalsIgnoreCase(DOMAIN_LOOKUP_COMMAND)) {    if (tokens.size() != 2) {      throw new WhoisException(now,SC_BAD_REQUEST,String.format("Wrong number of arguments to '%s' command.",DOMAIN_LOOKUP_COMMAND));    }    try {      return new DomainLookupCommand(InternetDomainName.from(canonicalizeDomainName(tokens.get(1))));    } catch (    IllegalArgumentException iae) {      throw new WhoisException(now,SC_BAD_REQUEST,String.format("Could not parse argument to '%s' command",DOMAIN_LOOKUP_COMMAND));    }  }  if (arg1.equalsIgnoreCase(NAMESERVER_LOOKUP_COMMAND)) {    if (tokens.size() != 2) {      throw new WhoisException(now,SC_BAD_REQUEST,String.format("Wrong number of arguments to '%s' command.",NAMESERVER_LOOKUP_COMMAND));    }    try {      return new NameserverLookupByIpCommand(InetAddresses.forString(tokens.get(1)));    } catch (    IllegalArgumentException iae) {    }    try {      return new NameserverLookupByHostCommand(InternetDomainName.from(canonicalizeDomainName(tokens.get(1))));    } catch (    IllegalArgumentException iae) {    }    throw new WhoisException(now,SC_BAD_REQUEST,String.format("Could not parse argument to '%s' command",NAMESERVER_LOOKUP_COMMAND));  }  if (arg1.equalsIgnoreCase(REGISTRAR_LOOKUP_COMMAND)) {    if (tokens.size() == 1) {      throw new WhoisException(now,SC_BAD_REQUEST,String.format("Too few arguments to '%s' command.",REGISTRAR_LOOKUP_COMMAND));    }    return new RegistrarLookupCommand(Joiner.on(' ').join(tokens.subList(1,tokens.size())));  }  if (tokens.size() == 1) {    try {      return new NameserverLookupByIpCommand(InetAddresses.forString(arg1));    } catch (    IllegalArgumentException iae) {    }    try {      final InternetDomainName targetName=InternetDomainName.from(canonicalizeDomainName(arg1));      Optional<InternetDomainName> tld=findTldForName(targetName);      if (!tld.isPresent()) {        return new RegistrarLookupCommand(arg1);      }      if (targetName.parent().equals(tld.get())) {        return new DomainLookupCommand(targetName,tld.get());      }      return new NameserverLookupByHostCommand(targetName,tld.get());    } catch (    IllegalArgumentException e) {    }  }  return new RegistrarLookupCommand(Joiner.on(' ').join(tokens));}  }
class C{  public static boolean isWindows(){  setType();  return (type == WINDOWS);}  }
class C{  public OutlierResult run(Database database,Relation<?> relation){  WritableDoubleDataStore scores=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_STATIC);  DoubleMinMax minmax=new DoubleMinMax();  try (InputStream in=FileUtil.tryGzipInput(new FileInputStream(file));TokenizedReader reader=CSVReaderFormat.DEFAULT_FORMAT.makeReader()){    Tokenizer tokenizer=reader.getTokenizer();    CharSequence buf=reader.getBuffer();    Matcher mi=idpattern.matcher(buf), ms=scorepattern.matcher(buf);    reader.reset(in);    while (reader.nextLineExceptComments()) {      Integer id=null;      double score=Double.NaN;      for (; tokenizer.valid(); tokenizer.advance()) {        mi.region(tokenizer.getStart(),tokenizer.getEnd());        ms.region(tokenizer.getStart(),tokenizer.getEnd());        final boolean mif=mi.find();        final boolean msf=ms.find();        if (mif && msf) {          throw new AbortException("ID pattern and score pattern both match value: " + tokenizer.getSubstring());        }        if (mif) {          if (id != null) {            throw new AbortException("ID pattern matched twice: previous value " + id + " second value: "+ tokenizer.getSubstring());          }          id=Integer.parseInt(buf.subSequence(mi.end(),tokenizer.getEnd()).toString());        }        if (msf) {          if (!Double.isNaN(score)) {            throw new AbortException("Score pattern matched twice: previous value " + score + " second value: "+ tokenizer.getSubstring());          }          score=ParseUtil.parseDouble(buf,ms.end(),tokenizer.getEnd());        }      }      if (id != null && !Double.isNaN(score)) {        scores.putDouble(DBIDUtil.importInteger(id),score);        minmax.put(score);      } else       if (id == null && Double.isNaN(score)) {        LOG.warning("Line did not match either ID nor score nor comment: " + reader.getLineNumber());      } else {        throw new AbortException("Line matched only ID or only SCORE patterns: " + reader.getLineNumber());      }    }  } catch (  IOException e) {    throw new AbortException("Could not load outlier scores: " + e.getMessage() + " when loading "+ file,e);  }  OutlierScoreMeta meta;  if (inverted) {    meta=new InvertedOutlierScoreMeta(minmax.getMin(),minmax.getMax());  } else {    meta=new BasicOutlierScoreMeta(minmax.getMin(),minmax.getMax());  }  DoubleRelation scoresult=new MaterializedDoubleRelation("External Outlier","external-outlier",scores,relation.getDBIDs());  OutlierResult or=new OutlierResult(meta,scoresult);  if (scaling instanceof OutlierScalingFunction) {    ((OutlierScalingFunction)scaling).prepare(or);  }  DoubleMinMax mm=new DoubleMinMax();  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    double val=scoresult.doubleValue(iditer);    val=scaling.getScaled(val);    scores.putDouble(iditer,val);    mm.put(val);  }  meta=new BasicOutlierScoreMeta(mm.getMin(),mm.getMax());  or=new OutlierResult(meta,scoresult);  return or;}  }
class C{  public boolean isSealed(){  return sealBase != null;}  }
class C{  public MLOutput execute(String dmlScriptFilePath,String[] args,boolean parsePyDML) throws IOException, DMLException, ParseException {  return execute(dmlScriptFilePath,args,parsePyDML,null);}  }
class C{  public boolean forwardRaw(double[] rawllpts,int rawoff,float[] xcoords,float[] ycoords,boolean[] visible,int copyoff,int copylen){  Point2D temp=new Point2D.Float();  int end=copylen + copyoff;  for (int i=copyoff, j=rawoff; i < end; i++, j+=2) {    forward(rawllpts[j],rawllpts[j + 1],temp,true);    xcoords[i]=(float)temp.getX();    ycoords[i]=(float)temp.getY();    visible[i]=true;  }  return true;}  }
class C{  private static Object cloneArray(Object obj,RVMType type) throws OutOfMemoryError {  RVMArray ary=type.asArray();  int nelts=ObjectModel.getArrayLength(obj);  Object newObj=resolvedNewArray(nelts,ary);  System.arraycopy(obj,0,newObj,0,nelts);  return newObj;}  }
class C{  protected boolean meetsScreenAreaCriteria(DrawContext dc,KMLLod lod){  Extent extent=this.getCurrentData().getExtent();  if (extent == null)   return true;  double numPixels=extent.getProjectedArea(dc.getView());  if (numPixels != Double.POSITIVE_INFINITY)   numPixels=Math.sqrt(numPixels);  Double lodMinPixels=lod.getMinLodPixels();  Double lodMaxPixels=lod.getMaxLodPixels();  return (lodMinPixels == null || lodMinPixels <= 0d || lodMinPixels <= numPixels) && (lodMaxPixels == null || lodMaxPixels < 0d || lodMaxPixels > numPixels);}  }
class C{  public void externalEntityDecl(String name,String publicId,String systemId) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#externalEntityDecl: " + name + ", "+ publicId+ ", "+ systemId);  if (null != m_declHandler) {    m_declHandler.externalEntityDecl(name,publicId,systemId);  }}  }
class C{  public void compress(){  IoBuffer tmp=IoBuffer.allocate(0);  tmp.setAutoExpand(true);  DeflaterOutputStream deflater=new DeflaterOutputStream(tmp.asOutputStream(),new Deflater(Deflater.BEST_COMPRESSION));  byte[] tmpData=new byte[data.limit()];  data.position(0);  data.get(tmpData);  try {    deflater.write(tmpData);    deflater.finish();  } catch (  IOException e) {    tmp.free();    throw new RuntimeException("could not compress data",e);  } finally {    if (deflater != null) {      try {        deflater.close();      } catch (      IOException e1) {      }    }  }  data.free();  data=tmp;  data.flip();  prepareIO();}  }
class C{  void startSequenceDelay(){  int delay=500;  try {    delay=Integer.parseInt(mDelayField[mNextSequenceElement].getText());  } catch (  NumberFormatException e) {  }  mNextSequenceElement++;  restartTimer(delay);}  }
class C{  public void sendMessage(final byte[] content) throws RemoteException {  sendMessage2(content,SipService.DEFAULT_MIME_TYPE);}  }
class C{  public SendableLocationMessage.SendableLocationMessageBuilder longitude(double longitude){  this.longitude=longitude;  return this;}  }
class C{  public Registry bind(Class type,Converter converter) throws Exception {  if (type != null) {    cache.cache(type,converter);  }  return this;}  }
class C{  @Override public void performRequest(String request){  if (request.compareTo("Stop") == 0) {    stop();  } else {    throw new IllegalArgumentException(request + " not supported (TrainTestSplitMaker)");  }}  }
class C{  public void createServer(VM server){  createServer(server,0,false,0);}  }
class C{  private boolean isFieldValueDefault(Object fieldValue){  if (fieldValue == null) {    return true;  } else {    return fieldValue.equals(getJavaDefaultValueDefault());  }}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public Property secondOfDay(){  return new Property(this,getChronology().secondOfDay());}  }
class C{  public static Button createPushButton(Composite parent,String label,Image image,int fill){  Button button=new Button(parent,SWT.PUSH);  button.setFont(parent.getFont());  if (image != null) {    button.setImage(image);  }  if (label != null) {    button.setText(label);  }  GridData gd=new GridData(fill);  button.setLayoutData(gd);  SWTFactory.setButtonDimensionHint(button);  return button;}  }
class C{  public boolean containsNone(int... values){  for (  int value : values) {    if (this.contains(value)) {      return false;    }  }  return true;}  }
class C{  public void testFloatValueNegInfinity(){  String a="-123809648392384755735.63567887678287E+200";  BigDecimal aNumber=new BigDecimal(a);  float result=Float.NEGATIVE_INFINITY;  assertTrue("incorrect value",aNumber.floatValue() == result);}  }
class C{  public SootFieldRef makeFieldRef(SootClass declaringClass,String name,Type type,boolean isStatic){  return new AbstractSootFieldRef(declaringClass,name,type,isStatic);}  }
class C{  public static void i(String tag,String msg){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg);}  }
class C{  public void run(){  m_hasBeenReset=false;  try {    try {      transformNode(m_doc);    } catch (    Exception e) {      if (null != m_transformThread)       postExceptionFromThread(e); else       throw new RuntimeException(e.getMessage());    } finally {      if (m_inputContentHandler instanceof TransformerHandlerImpl) {        ((TransformerHandlerImpl)m_inputContentHandler).clearCoRoutine();      }    }  } catch (  Exception e) {    if (null != m_transformThread)     postExceptionFromThread(e); else     throw new RuntimeException(e.getMessage());  }}  }
class C{  public static float min(float a,float b){  return 0.0f;}  }
class C{  protected FXGNode createNode(String uri,String localName){  FXGNode node=null;  try {    Map<String,Class<? extends FXGNode>> elementNodes=getElementNodes(uri);    if (elementNodes != null) {      Class<? extends FXGNode> nodeClass=elementNodes.get(localName);      if (nodeClass != null) {        node=(FXGNode)nodeClass.newInstance();      } else       if (root != null) {        node=root.getDefinitionInstance(localName);      }    }  } catch (  Throwable t) {    throw new FXGException(startLine,startColumn,"ErrorScanningFXG",t);  }  if (node != null) {    assignNodeLocation(node);  }  return node;}  }
class C{  protected CommunicatingException(final IScope scope,final String message){  super(scope,message,true);}  }
class C{  protected Node deepExport(Node n,AbstractDocument d){  super.deepExport(n,d);  GenericElement ge=(GenericElement)n;  ge.nodeName=nodeName;  return n;}  }
class C{  public TemporalPoint(Point2D location,long t){  this.location=location;  time=t;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (RESPONSIBLETYPE_Role.equals(getResponsibleType()) && getAD_Role_ID() == 0 && getAD_Client_ID() > 0) {    log.saveError("Error",Msg.parseTranslation(getCtx(),"@RequiredEnter@ @AD_Role_ID@"));    return false;  }  if (!RESPONSIBLETYPE_Human.equals(getResponsibleType()) && getAD_User_ID() > 0)   setAD_User_ID(0);  if (!RESPONSIBLETYPE_Role.equals(getResponsibleType()) && getAD_Role_ID() > 0)   setAD_Role_ID(0);  return true;}  }
class C{  public long roundTripTime(long timeout,TimeUnit unit) throws InterruptedException {  if (latch.await(timeout,unit)) {    return received - sent;  } else {    return -2;  }}  }
class C{  protected void onSetNoExternalMessages(String channel,String sourceNick,String sourceLogin,String sourceHostname){}  }
class C{  public static int insertOrUpdate(@Nullable SQLiteDatabase sqlDb,String table,@Nullable String selection,String[] selectionArgs,@NonNull final ContentValues values,@Nullable final String[] excludeFieldsForUpdate){  if (sqlDb == null) {    return -1;  }  final long items=DatabaseUtils.queryNumEntries(sqlDb,table,selection,selectionArgs);  if (items == 0) {    final long row=sqlDb.insert(table,null,values);    if (row == -1) {      return -1;    }    return 1;  } else {    if (excludeFieldsForUpdate != null) {      for (      String excludeField : excludeFieldsForUpdate) {        values.remove(excludeField);      }    }    sqlDb.update(table,values,selection,selectionArgs);    return 0;  }}  }
class C{  protected void tellAboutQuest(){  final List<String> questTrigger=new LinkedList<String>(ConversationPhrases.QUEST_MESSAGES);  final List<String> additionalTrigger=concreteQuest.getAdditionalTriggerPhraseForQuest();  if (additionalTrigger != null) {    questTrigger.addAll(additionalTrigger);  }  concreteQuest.getNPC().add(ConversationStates.ATTENDING,questTrigger,new QuestNotStartedCondition(concreteQuest.getSlotName()),ConversationStates.QUEST_OFFERED,concreteQuest.respondToQuest(),null);}  }
class C{  public int execute(String sql,DropView drop) throws SQLException {  String alias=drop.getName().toString();  String[] aliasAndIndex=this.getIndexAndType(alias,sql.trim() + ";","view\\s+",";",null);  alias=aliasAndIndex[0];  String index=aliasAndIndex[1];  if (alias == null) {    alias=index;    index=null;  }  alias=Heading.findOriginal(sql.trim() + ";",alias,"view\\s+",";");  GetAliasesResponse aliases=client.admin().indices().prepareGetAliases(alias).get();  ImmutableOpenMap<String,List<AliasMetaData>> aliasMd=aliases.getAliases();  List<String> indices=new ArrayList<String>();  if (index != null) {    indices.add(index);  } else   for (  ObjectCursor<String> key : aliasMd.keys()) {    for (    AliasMetaData amd : aliasMd.get(key.value)) {      if (amd.alias().equals(alias))       indices.add(key.value);    }  }  IndicesAliasesResponse response=client.admin().indices().prepareAliases().removeAlias(indices.toArray(new String[indices.size()]),alias).get();  if (!response.isAcknowledged())   throw new SQLException("Elasticsearch failed to delete the specified alias");  return 0;}  }
class C{  public void overrideButton(String button,boolean override){  LOG.i("App","WARNING: Volume Button Default Behavior will be overridden.  The volume event will be fired!");  if (button.equals("volumeup")) {    webView.setButtonPlumbedToJs(KeyEvent.KEYCODE_VOLUME_UP,override);  } else   if (button.equals("volumedown")) {    webView.setButtonPlumbedToJs(KeyEvent.KEYCODE_VOLUME_DOWN,override);  }}  }
class C{  public void updatePoly(float latPoint,float lonPoint,int[] xpoints,int[] ypoints,int cMode,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkPoly.write(latPoint,lonPoint,xpoints,ypoints,cMode,properties,link.dos);}  }
class C{  public boolean isSetSwPortTuple(){  return this.swPortTuple != null;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:47.630 -0500",hash_original_method="4976F1F97DF8BBE1F3AC7D56299FEDE9",hash_generated_method="B7BD75FFB7A63D382828D0D142B70454") public InterruptedIOException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  @Override public int hashCode(){  int hash=1;  hash=hash * 31 + localName.hashCode();  hash=hash * 31 + this.nodeType.hashCode();  hash=hash * 31 + this.fields.hashCode();  hash=hash * 31 + this.childrenDOMNodes.hashCode();  return hash;}  }
class C{  public static Host.AsyncClient.start_image_sweep_call buildStartImageSweepMethodCall(StartImageSweepResponse response){  Host.AsyncClient.start_image_sweep_call call=mock(Host.AsyncClient.start_image_sweep_call.class);  try {    when(call.getResult()).thenReturn(response);  } catch (  Exception e) {    throw new RuntimeException("Failed to mock call.getResult");  }  return call;}  }
class C{  private static double mod(double y,double x){  double ret;  if (y >= 0) {    ret=y - x * (int)(y / x);  } else {    ret=y + x * ((int)(-y / x) + 1);  }  return ret;}  }
class C{  private Object extractBinaryParameter(String fieldName,Object obj) throws CacheException {  if (obj instanceof BinaryObject)   return ((BinaryObject)obj).field(fieldName);  throw new CacheException("Failed to read property value from non binary object [class=" + obj.getClass() + ", property="+ fieldName+ "]");}  }
class C{  @Override protected boolean hasFab(){  return false;}  }
class C{  protected static String quoteIntArray(int[] s){  return StringUtils.quoteJavaIntArray(s);}  }
class C{  public static void closeResultSet(ResultSet rs){  if (null != rs) {    try {      rs.close();    } catch (    SQLException ignore) {    }  }}  }
class C{  static void processSearchResults(final String logName,final LedgerDescriptor ld,final LogSegmentMetadata segment,final long transactionId,final ExecutorService executorService,final LedgerHandleCache handleCache,final List<LogRecordWithDLSN> searchResults,final int nWays,final Optional<LogRecordWithDLSN> prevFoundRecord,final Promise<Optional<LogRecordWithDLSN>> promise){  int found=-1;  for (int i=0; i < searchResults.size(); i++) {    LogRecordWithDLSN record=searchResults.get(i);    if (record.getTransactionId() >= transactionId) {      found=i;      break;    }  }  if (found == -1) {    promise.setValue(prevFoundRecord);    return;  }  LogRecordWithDLSN foundRecord=searchResults.get(found);  if (foundRecord.getDlsn().getSlotId() != 0L || found == 0 || foundRecord.getDlsn().getEntryId() == (searchResults.get(found - 1).getDlsn().getEntryId() + 1)) {    promise.setValue(Optional.of(foundRecord));    return;  }  List<Long> nextSearchBatch=getEntriesToSearch(transactionId,searchResults.get(found - 1),searchResults.get(found),nWays);  if (nextSearchBatch.isEmpty()) {    promise.setValue(prevFoundRecord);    return;  }  getLogRecordNotLessThanTxIdFromEntries(logName,ld,segment,transactionId,executorService,handleCache,nextSearchBatch,nWays,Optional.of(foundRecord),promise);}  }
class C{  @Override public boolean isBoundary(int offset){  CharacterIterator text=getText();  checkOffset(offset,text);  if (offset == text.getBeginIndex()) {    return true;  } else {    return following(offset - 1) == offset;  }}  }
class C{  public long position(){  return _position - (_readLength - _readOffset);}  }
class C{  public static Script updateScriptWithSignature(Script scriptSig,byte[] signature,int targetIndex,int sigsPrefixCount,int sigsSuffixCount){  ScriptBuilder builder=new ScriptBuilder();  List<ScriptChunk> inputChunks=scriptSig.getChunks();  int totalChunks=inputChunks.size();  boolean hasMissingSigs=inputChunks.get(totalChunks - sigsSuffixCount - 1).equalsOpCode(OP_0);  checkArgument(hasMissingSigs,"ScriptSig is already filled with signatures");  for (  ScriptChunk chunk : inputChunks.subList(0,sigsPrefixCount))   builder.addChunk(chunk);  int pos=0;  boolean inserted=false;  for (  ScriptChunk chunk : inputChunks.subList(sigsPrefixCount,totalChunks - sigsSuffixCount)) {    if (pos == targetIndex) {      inserted=true;      builder.data(signature);      pos++;    }    if (!chunk.equalsOpCode(OP_0)) {      builder.addChunk(chunk);      pos++;    }  }  while (pos < totalChunks - sigsPrefixCount - sigsSuffixCount) {    if (pos == targetIndex) {      inserted=true;      builder.data(signature);    } else {      builder.addChunk(new ScriptChunk(OP_0,null));    }    pos++;  }  for (  ScriptChunk chunk : inputChunks.subList(totalChunks - sigsSuffixCount,totalChunks))   builder.addChunk(chunk);  checkState(inserted);  return builder.build();}  }
class C{  public synchronized int write(final InputStream in) throws IOException {  int readCount=0;  int inBufferPos=this.count - this.filledBufferSum;  int n=in.read(this.currentBuffer,inBufferPos,this.currentBuffer.length - inBufferPos);  while (n != -1) {    readCount+=n;    inBufferPos+=n;    this.count+=n;    if (inBufferPos == this.currentBuffer.length) {      this.needNewBuffer(this.currentBuffer.length);      inBufferPos=0;    }    n=in.read(this.currentBuffer,inBufferPos,this.currentBuffer.length - inBufferPos);  }  return readCount;}  }
class C{  static void incrementKeepAliveCount(){synchronized (keepAliveLock) {    keepAliveCount++;    if (reaper == null) {      reaper=AccessController.doPrivileged(new NewThreadAction(new Reaper(),"Reaper",false));      reaper.start();    }    if (gcLatencyRequest == null) {      gcLatencyRequest=GC.requestLatency(gcInterval);    }  }}  }
class C{  public void close() throws IOException {  if (mInputStream != null) {    mInputStream.close();  } else {    throw new IOException("Can't close wave source - was not opened");  }  mInputStream=null;}  }
class C{  private void handleServerURLChange(String newServerURL){  this.coordinatorServerURL=newServerURL;  log.info("Server URL being set to " + newServerURL);}  }
class C{  public void rotatedLootChest(World world,Random rand,int x,int y,int z,int offsetX,int offsetY,int offsetZ,int rotation,int min,int max,int chance,int sequenceStart,ResourceLocation lootTable){  x-=width / 2;  z-=depth / 2;  if (rand.nextInt(chance) == 0)   return;switch (rotation) {case 0:    generateLootChest(world,rand,new BlockPos(x + offsetX,y + offsetY,z + offsetZ),min,max,getStateFromRotation(sequenceStart,rotation,BlockRegistry.WEEDWOOD_CHEST.getDefaultState(),EnumRotationSequence.CHEST),lootTable);  break;case 1:generateLootChest(world,rand,new BlockPos(x + offsetZ,y + offsetY,z + depth - offsetX - 1),min,max,getStateFromRotation(sequenceStart,rotation,BlockRegistry.WEEDWOOD_CHEST.getDefaultState(),EnumRotationSequence.CHEST),lootTable);break;case 2:generateLootChest(world,rand,new BlockPos(x + width - offsetX - 1,y + offsetY,z + depth - offsetZ - 1),min,max,getStateFromRotation(sequenceStart,rotation,BlockRegistry.WEEDWOOD_CHEST.getDefaultState(),EnumRotationSequence.CHEST),lootTable);break;case 3:generateLootChest(world,rand,new BlockPos(x + width - offsetZ - 1,y + offsetY,z + offsetX),min,max,getStateFromRotation(sequenceStart,rotation,BlockRegistry.WEEDWOOD_CHEST.getDefaultState(),EnumRotationSequence.CHEST),lootTable);break;}}  }
class C{  @Override public void onPause(){  super.onPause();  mFirebaseRef.removeAuthStateListener(mAuthStateListener);}  }
class C{  private void handleRelSetPickerChange(RelationSetDescriptor relationSet){  if (null != relationSet) {    selectRelations(buildRelations(relationSet));  }}  }
class C{  boolean useWriteCache(String name,IOContext context){  if (!blockCacheWriteEnabled) {    return false;  }  if (blockCacheFileTypes != null && !isCachableFile(name)) {    return false;  }switch (context.context) {case MERGE:{      return false;    }default :{    return true;  }}}  }
class C{  private static boolean refresh(@NotNull VirtualFile file) throws IOException {  Long loadedTimeStamp=file.getUserData(TIMESTAMP_KEY);  SoftReference<BufferedImage> imageRef=file.getUserData(BUFFERED_IMAGE_REF_KEY);  if (loadedTimeStamp == null || loadedTimeStamp.longValue() != file.getTimeStamp() || SoftReference.dereference(imageRef) == null) {    try {      final byte[] content=file.contentsToByteArray();      if (ICO_FORMAT.equalsIgnoreCase(file.getExtension())) {        try {          final BufferedImage image=ICO_IMAGE_PARSER.getBufferedImage(new ByteSourceArray(content),null);          file.putUserData(FORMAT_KEY,ICO_FORMAT);          file.putUserData(BUFFERED_IMAGE_REF_KEY,new SoftReference<BufferedImage>(image));          return true;        } catch (        ImageReadException ignore) {        }      }      InputStream inputStream=new ByteArrayInputStream(content,0,content.length);      ImageInputStream imageInputStream=ImageIO.createImageInputStream(inputStream);      try {        Iterator<ImageReader> imageReaders=ImageIO.getImageReaders(imageInputStream);        if (imageReaders.hasNext()) {          ImageReader imageReader=imageReaders.next();          try {            file.putUserData(FORMAT_KEY,imageReader.getFormatName());            ImageReadParam param=imageReader.getDefaultReadParam();            imageReader.setInput(imageInputStream,true,true);            int minIndex=imageReader.getMinIndex();            BufferedImage image=imageReader.read(minIndex,param);            file.putUserData(BUFFERED_IMAGE_REF_KEY,new SoftReference<BufferedImage>(image));            return true;          }  finally {            imageReader.dispose();          }        }      }  finally {        imageInputStream.close();      }    }  finally {      file.putUserData(TIMESTAMP_KEY,file.getTimeStamp());    }  }  return false;}  }
class C{  @Override public final String toString(){  StringBuilder cab=new StringBuilder(50 + getHopCount() * 30);  cab.append("RouteTracker[");  if (this.localAddress != null) {    cab.append(this.localAddress);    cab.append("->");  }  cab.append('{');  if (this.connected)   cab.append('c');  if (this.tunnelled == TunnelType.TUNNELLED)   cab.append('t');  if (this.layered == LayerType.LAYERED)   cab.append('l');  if (this.secure)   cab.append('s');  cab.append("}->");  if (this.proxyChain != null) {    for (int i=0; i < this.proxyChain.length; i++) {      cab.append(this.proxyChain[i]);      cab.append("->");    }  }  cab.append(this.targetHost);  cab.append(']');  return cab.toString();}  }
class C{  public static <W>StupidBackoffLm<W> readGoogleLmBinary(final String file,final WordIndexer<W> wordIndexer,final String sortedVocabFile){  GoogleLmReader.addToIndexer(wordIndexer,sortedVocabFile);  wordIndexer.trimAndLock();  @SuppressWarnings("unchecked") final NgramMap<LongRef> map=(NgramMap<LongRef>)IOUtils.readObjFileHard(file);  return new StupidBackoffLm<W>(map.getMaxNgramOrder(),wordIndexer,map,new ConfigOptions());}  }
class C{  public static List<String> parseProperty(String property,String propertyDelimiter){  List<String> parsedProperty=new ArrayList<String>();  if (property != null && !property.isEmpty()) {    StringTokenizer propertyEntries=new StringTokenizer(property,propertyDelimiter);    while (propertyEntries.hasMoreTokens()) {      String propertyEntry=propertyEntries.nextToken().trim();      if (propertyEntry != null && !propertyEntry.isEmpty()) {        parsedProperty.add(propertyEntry);      }    }  }  return parsedProperty;}  }
class C{  public static void init(){}  }
class C{  private void onRoomNamePreferenceChanged(){  if ((null == mRoom) || (null == mSession) || (null == mRoomNameEditTxt)) {    return;  }  String previousName=mRoom.getLiveState().name;  String newName=mRoomNameEditTxt.getText();  if (!TextUtils.equals(previousName,newName)) {    displayLoadingView();    Log.d(LOG_TAG,"##onRoomNamePreferenceChanged to " + newName);    mRoom.updateName(newName,mUpdateCallback);  }}  }
class C{  public StandardChartTheme(String name,boolean shadow){  ParamChecks.nullNotPermitted(name,"name");  this.name=name;  this.extraLargeFont=new Font("Tahoma",Font.BOLD,20);  this.largeFont=new Font("Tahoma",Font.BOLD,14);  this.regularFont=new Font("Tahoma",Font.PLAIN,12);  this.smallFont=new Font("Tahoma",Font.PLAIN,10);  this.titlePaint=Color.black;  this.subtitlePaint=Color.black;  this.legendBackgroundPaint=Color.white;  this.legendItemPaint=Color.darkGray;  this.chartBackgroundPaint=Color.white;  this.drawingSupplier=new DefaultDrawingSupplier();  this.plotBackgroundPaint=Color.lightGray;  this.plotOutlinePaint=Color.black;  this.labelLinkPaint=Color.black;  this.labelLinkStyle=PieLabelLinkStyle.CUBIC_CURVE;  this.axisOffset=new RectangleInsets(4,4,4,4);  this.domainGridlinePaint=Color.white;  this.rangeGridlinePaint=Color.white;  this.baselinePaint=Color.black;  this.crosshairPaint=Color.blue;  this.axisLabelPaint=Color.darkGray;  this.tickLabelPaint=Color.darkGray;  this.barPainter=new GradientBarPainter();  this.xyBarPainter=new GradientXYBarPainter();  this.shadowVisible=false;  this.shadowPaint=Color.gray;  this.itemLabelPaint=Color.black;  this.thermometerPaint=Color.white;  this.wallPaint=BarRenderer3D.DEFAULT_WALL_PAINT;  this.errorIndicatorPaint=Color.black;  this.shadowGenerator=shadow ? new DefaultShadowGenerator() : null;}  }
class C{  @Override public DPState compute(Rule rule,List<HGNode> tailNodes,int i,int j,SourcePath sourcePath,Sentence sentence,Accumulator acc){  if (rule != null && this.ownerID.equals(rule.getOwner())) {    acc.add(denseFeatureIndex,getValue(rule.getLHS()));  }  return null;}  }
class C{  protected ShortType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  protected void skipped(long nanos,AssumptionViolatedException e,Description description){}  }
class C{  public static <T>Throwable terminate(AtomicReferenceFieldUpdater<T,Throwable> field,T instance){  Throwable current=field.get(instance);  if (current != TERMINATED) {    current=field.getAndSet(instance,TERMINATED);  }  return current;}  }
class C{  public ImmutableStack<T> push(T t){  if (t == null) {    return this;  } else {    return new ImmutableStack<>(t,this);  }}  }
class C{  public boolean isTaskRoot(){  try {    return ActivityManagerNative.getDefault().getTaskForActivity(mToken,true) >= 0;  } catch (  RemoteException e) {    return false;  }}  }
class C{  @Override public Set filter(Set rawProteins){  return rawProteins;}  }
class C{  @POST @Path("/{id}/deactivate") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) public Response deactivateScheduledEvent(@PathParam("id") String id) throws DatabaseException {  ScheduledEvent scheduledEvent=queryResource(uri(id));  ArgValidator.checkEntity(scheduledEvent,uri(id),true);  URIQueryResultList resultList=new URIQueryResultList();  _dbClient.queryByConstraint(ContainmentConstraint.Factory.getScheduledEventOrderConstraint(uri(id)),resultList);  for (  URI uri : resultList) {    log.info("deleting order: {}",uri);    Order order=_dbClient.queryObject(Order.class,uri);    client.delete(order);  }  try {    log.info("Deleting a scheduledEvent {}:{}",scheduledEvent.getId(),ScheduleInfo.deserialize(org.apache.commons.codec.binary.Base64.decodeBase64(scheduledEvent.getScheduleInfo().getBytes(UTF_8))).toString());  } catch (  Exception e) {    log.error("Failed to parse scheduledEvent.");  }  client.delete(scheduledEvent);  return Response.ok().build();}  }
class C{  public String charge(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer C_Charge_ID=(Integer)value;  if (C_Charge_ID == null || C_Charge_ID.intValue() == 0)   return "";  String sql="SELECT ChargeAmt FROM C_Charge WHERE C_Charge_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,C_Charge_ID.intValue());    rs=pstmt.executeQuery();    if (rs.next()) {      mTab.setValue("PriceEntered",rs.getBigDecimal(1));    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    return e.getLocalizedMessage();  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return tax(ctx,WindowNo,mTab,mField,value);}  }
class C{  public synchronized int copyDirect(int pageId,OutputStream out) throws IOException {  byte[] buffer=new byte[pageSize];  if (pageId >= pageCount) {    return -1;  }  file.seek((long)pageId << pageSizeShift);  file.readFullyDirect(buffer,0,pageSize);  readCount++;  out.write(buffer,0,pageSize);  return pageId + 1;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public void execute() throws DataflowAnalysisException {  boolean change;  boolean debugWas=DEBUG;  if (DEBUG) {    reportAnalysis("Executing");  }  int timestamp=0;  boolean firstTime=true;  do {    change=false;    boolean sawBackEdge=false;    ++numIterations;    if (numIterations > MAX_ITERS && !DEBUG) {      DEBUG=true;      reportAnalysis("Too many iterations");      System.out.println(this.getClass().getName());      if (this.getClass() == UnconditionalValueDerefDataflow.class || this.getClass() == LiveLocalStoreDataflow.class) {        try {          ClassContext cc=Global.getAnalysisCache().getClassAnalysis(ClassContext.class,DescriptorFactory.createClassDescriptorFromDottedClassName(cfg.getMethodGen().getClassName()));          System.out.println("Forwards cfg");          CFGPrinter printer=new CFGPrinter(cfg);          printer.setIsForwards(true);          printer.print(System.out);          System.out.println("Backwards cfg");          printer=new CFGPrinter(cfg);          printer.setIsForwards(false);          printer.print(System.out);          cc.dumpSimpleDataflowInformation(cfg.getMethodGen().getMethod());        } catch (        CheckedAnalysisException e) {          e.printStackTrace(System.out);        }      }    }    if (DEBUG) {      System.out.println("----------------------------------------------------------------------");      System.out.println(this.getClass().getName() + " iteration: " + numIterations+ ", timestamp: "+ timestamp);      MethodGen mg=cfg.getMethodGen();      System.out.println(mg.getClassName() + "." + mg.getName()+ mg.getSignature());      System.out.println("----------------------------------------------------------------------");    }    if (numIterations >= MAX_ITERS + 9) {      throw new DataflowAnalysisException("Too many iterations (" + numIterations + ") in dataflow when analyzing "+ getFullyQualifiedMethodName());    }    analysis.startIteration();    if (DEBUG && firstTime && blockOrder instanceof ReverseDFSOrder) {      ReverseDFSOrder rBlockOrder=(ReverseDFSOrder)blockOrder;      System.out.println("Entry point is: " + logicalEntryBlock());      System.out.println("Basic block order: ");      Iterator<BasicBlock> i=blockOrder.blockIterator();      while (i.hasNext()) {        BasicBlock block=i.next();        debug(block,"rBlockOrder " + rBlockOrder.rdfs.getDiscoveryTime(block) + "\n");      }    }    Iterator<BasicBlock> i=blockOrder.blockIterator();    if (numIterations > 3 && numIterations % 2 == 0 && blockOrder instanceof ReverseDFSOrder) {      if (DEBUG) {        System.out.println("Trying program order");      }      TreeSet<BasicBlock> bb=new TreeSet<BasicBlock>(new BackwardProgramOrder());      Iterator<BasicBlock> j=blockOrder.blockIterator();      while (j.hasNext()) {        BasicBlock block=j.next();        bb.add(block);      }      if (DEBUG) {        for (        BasicBlock block : bb) {          debug(block,"\n");        }      }      i=bb.iterator();    }    if (DEBUG) {      dumpDataflow(analysis);    }    while (i.hasNext()) {      BasicBlock block=i.next();      Fact start=analysis.getStartFact(block);      assert start != null;      boolean needToRecompute=false;      Fact result=analysis.getResultFact(block);      assert result != null;      int originalResultTimestamp=analysis.getLastUpdateTimestamp(result);      if (block == logicalEntryBlock()) {        analysis.makeFactTop(start);        analysis.initEntryFact(start);        if (DEBUG) {          debug(block,"Init entry fact ==> " + analysis.factToString(start) + "\n");        }        needToRecompute=true;      } else {        int lastCalculated=analysis.getLastUpdateTimestamp(start);        Iterator<Edge> predEdgeIter=logicalPredecessorEdgeIterator(block);        int predCount=0;        int rawPredCount=0;        while (predEdgeIter.hasNext()) {          Edge edge=predEdgeIter.next();          rawPredCount++;          if (needToRecompute) {            if (firstTime && !sawBackEdge) {            } else {              continue;            }          }          BasicBlock logicalPred=isForwards ? edge.getSource() : edge.getTarget();          int direction=blockOrder.compare(block,logicalPred);          if (DEBUG) {            debug(block,"direction " + direction + " for "+ blockId(logicalPred)+ "\n");          }          if (direction < 0) {            sawBackEdge=true;          }          Fact predFact=analysis.getResultFact(logicalPred);          int predLastUpdated=analysis.getLastUpdateTimestamp(predFact);          if (!analysis.isTop(predFact)) {            predCount++;            if (predLastUpdated >= lastCalculated) {              needToRecompute=true;              if (DEBUG) {                debug(block,"\n Need to recompute. My timestamp = " + lastCalculated + ", pred timestamp = "+ predLastUpdated+ ",\n   pred fact = "+ predFact+ "\n");              }            }          }        }        if (predCount == 0) {          needToRecompute=true;        }        if (!needToRecompute) {          continue;        }        analysis.makeFactTop(start);        predEdgeIter=logicalPredecessorEdgeIterator(block);        while (predEdgeIter.hasNext()) {          Edge edge=predEdgeIter.next();          BasicBlock logicalPred=isForwards ? edge.getSource() : edge.getTarget();          Fact predFact=analysis.getResultFact(logicalPred);          Fact edgeFact=analysis.createFact();          analysis.copy(predFact,edgeFact);          analysis.edgeTransfer(edge,edgeFact);          if (DEBUG && !analysis.same(edgeFact,predFact)) {            debug(block,logicalPred,edge,"Edge transfer " + analysis.factToString(predFact) + " ==> "+ analysis.factToString(edgeFact));          }          if (DEBUG) {            if (analysis.isTop(start)) {              debug(block,logicalPred,edge,"\n  First pred is " + analysis.factToString(edgeFact) + "\n   last updated at "+ analysis.getLastUpdateTimestamp(predFact)+ "\n");            } else {              debug(block,logicalPred,edge,"\n  Meet " + analysis.factToString(start) + "\n   with "+ analysis.factToString(edgeFact)+ "\n   pred last updated at "+ analysis.getLastUpdateTimestamp(predFact)+ "\n");            }          }          if (analysis instanceof UnconditionalValueDerefAnalysis) {            ((UnconditionalValueDerefAnalysis)analysis).meetInto((UnconditionalValueDerefSet)edgeFact,edge,(UnconditionalValueDerefSet)start,rawPredCount == 1);          } else {            analysis.meetInto(edgeFact,edge,start);          }          analysis.setLastUpdateTimestamp(start,timestamp);          int pos=-1;          if (block.getFirstInstruction() != null) {            pos=block.getFirstInstruction().getPosition();          }          if (DEBUG) {            System.out.println(" [" + pos + "]==> "+ analysis.factToString(start)+ " @ "+ timestamp+ " \n");          }        }      }      if (DEBUG) {        debug(block,"start fact is " + analysis.factToString(start) + "\n");      }      boolean resultWasTop=analysis.isTop(result);      Fact origResult=null;      if (!resultWasTop) {        origResult=analysis.createFact();        analysis.copy(result,origResult);      }      analysis.transfer(block,null,start,result);      if (DEBUG && SystemProperties.getBoolean("dataflow.blockdebug")) {        debug(block,"Dumping flow values for block:\n");        Iterator<org.apache.bcel.generic.InstructionHandle> ii=block.instructionIterator();        while (ii.hasNext()) {          org.apache.bcel.generic.InstructionHandle handle=ii.next();          Fact tmpResult=analysis.createFact();          analysis.transfer(block,handle,start,tmpResult);          System.out.println("\t" + handle + " "+ analysis.factToString(tmpResult));        }      }      if (DEBUG) {        debug(block,"orig result is " + (origResult == null ? "TOP" : analysis.factToString(origResult)) + "\n");      }      boolean thisResultChanged=false;      if (resultWasTop) {        thisResultChanged=!analysis.isTop(result);      } else {        thisResultChanged=!analysis.same(result,origResult);      }      if (thisResultChanged) {        timestamp++;        if (DEBUG) {          debug(block,"result changed at timestamp " + timestamp + "\n");        }        if (DEBUG && !needToRecompute) {          System.out.println("I thought I didn't need to recompute");        }        change=true;        analysis.setLastUpdateTimestamp(result,timestamp);      } else {        analysis.setLastUpdateTimestamp(result,originalResultTimestamp);      }      if (DEBUG) {        debug(block,"result is " + analysis.factToString(result) + " @ timestamp "+ analysis.getLastUpdateTimestamp(result)+ "\n");      }    }    analysis.finishIteration();    if (!sawBackEdge) {      break;    }  } while (change);  if (DEBUG) {    System.out.println("-- Quiescence achieved-------------------------------------------------");    System.out.println(this.getClass().getName() + " iteration: " + numIterations+ ", timestamp: "+ timestamp);    MethodGen mg=cfg.getMethodGen();    System.out.println(mg.getClassName() + "." + mg.getName()+ mg.getSignature());    new RuntimeException("Quiescence achieved----------------------------------------------------------------").printStackTrace(System.out);  }  DEBUG=debugWas;}  }
class C{  public static boolean isHexChar(char ch){  return (ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F');}  }
class C{  public CompiledST lookupTemplate(String name){  if (name.charAt(0) != '/')   name="/" + name;  if (verbose)   System.out.println(getName() + ".lookupTemplate(" + name+ ")");  CompiledST code=rawGetTemplate(name);  if (code == NOT_FOUND_ST) {    if (verbose)     System.out.println(name + " previously seen as not found");    return null;  }  if (code == null)   code=load(name);  if (code == null)   code=lookupImportedTemplate(name);  if (code == null) {    if (verbose)     System.out.println(name + " recorded not found");    templates.put(name,NOT_FOUND_ST);  }  if (verbose)   if (code != null)   System.out.println(getName() + ".lookupTemplate(" + name+ ") found");  return code;}  }
class C{  private void playRecommendation(){  if (mRecommendationLoaded && mRecommendedSong != null) {    List<Song> tracks=Suggestor.getInstance().buildArtistRadio(mParent.getArtist());    PlaybackProxy.clearQueue();    PlaybackProxy.queueSong(mRecommendedSong,true);    for (    Song song : tracks) {      PlaybackProxy.queueSong(song,false);    }    PlaybackProxy.playAtIndex(0);    mParent.setFabShape(PlayPauseDrawable.SHAPE_PAUSE);    mParent.setFabShouldResume(true);    boldPlayingTrack(mRecommendedSong);    updatePlayingAlbum(mRecommendedSong.getAlbum());  }}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public boolean visit(SimpleName node){  return true;}  }
class C{  public Type basicGetType(){  return type;}  }
class C{  public void recover(){  if (!allowConnectionRecovery) {    return;  }  opened=false;  try {    closeConnection();  } catch (  Exception e) {  }  reconnect();}  }
class C{  public static void logOrderCreatedEvent(Cart orderCart,String orderRemoteId,Double orderTotalPrice,Shipping selectedShipping){  Map<String,String> eventPostOrder=new HitBuilders.EventBuilder().setCategory(POST_ORDER).setAction(POST_ORDER).setLabel(POST_ORDER).build();  sendEventToAppTrackers(eventPostOrder);  Map<String,String> event=new HitBuilders.TransactionBuilder().setTransactionId(orderRemoteId).setAffiliation(SettingsMy.getActualNonNullShop(null).getName()).setRevenue(orderTotalPrice).setTax(0.0).setShipping(selectedShipping.getPrice()).setCurrencyCode(orderCart.getCurrency()).build();  sendEventToAppTrackers(event);  Bundle parametersCheckout=new Bundle();  parametersCheckout.putString(AppEventsConstants.EVENT_PARAM_CONTENT_TYPE,"cart");  parametersCheckout.putString(AppEventsConstants.EVENT_PARAM_CONTENT_ID,orderRemoteId);  parametersCheckout.putInt(AppEventsConstants.EVENT_PARAM_NUM_ITEMS,orderCart.getItems().size());  parametersCheckout.putString(AppEventsConstants.EVENT_PARAM_CURRENCY,orderCart.getCurrency());  logFbEvent(AppEventsConstants.EVENT_NAME_INITIATED_CHECKOUT,orderTotalPrice,parametersCheckout);  Bundle parametersShip=new Bundle();  parametersShip.putString(AppEventsConstants.EVENT_PARAM_CONTENT_TYPE,"shipping");  parametersShip.putString(AppEventsConstants.EVENT_PARAM_CONTENT_ID,orderRemoteId);  parametersShip.putString(AppEventsConstants.EVENT_PARAM_CURRENCY,orderCart.getCurrency());  logFbEvent(AppEventsConstants.EVENT_NAME_PURCHASED,(double)selectedShipping.getPrice(),parametersShip);  for (int i=0; i < orderCart.getItems().size(); i++) {    CartProductItem item=orderCart.getItems().get(i);    Double price=item.getVariant().getPrice();    if (item.getVariant().getDiscountPrice() > 0) {      price=item.getVariant().getDiscountPrice();    }    Map<String,String> eventSingle=new HitBuilders.ItemBuilder().setTransactionId(orderRemoteId).setName(item.getVariant().getName()).setSku("Product id: " + item.getVariant().getRemoteId()).setCategory("Category id: " + item.getVariant().getCategory()).setPrice(price).setQuantity(item.getQuantity()).setCurrencyCode(orderCart.getCurrency()).build();    sendEventToAppTrackers(eventSingle);    Bundle parameters=new Bundle();    parameters.putString(AppEventsConstants.EVENT_PARAM_CONTENT_TYPE,PRODUCT);    parameters.putLong(AppEventsConstants.EVENT_PARAM_CONTENT_ID,item.getVariant().getRemoteId());    parameters.putInt(AppEventsConstants.EVENT_PARAM_NUM_ITEMS,item.getQuantity());    parameters.putString(AppEventsConstants.EVENT_PARAM_CURRENCY,orderCart.getCurrency());    logFbEvent(AppEventsConstants.EVENT_NAME_PURCHASED,price * item.getQuantity(),parameters);  }}  }
class C{  public T caseWildcard(Wildcard object){  return null;}  }
class C{  private JsonObject makeCachedResponse(HttpServerRequest req,String etagFromResources,JsonObject responseObject){  JsonObject result=responseObject;  if (log.isTraceEnabled()) {    log.trace("Header from request:  " + req.headers().get(IF_NONE_MATCH_HEADER));    log.trace("Header from response: " + etagFromResources);  }  if (etagFromResources != null) {    req.response().headers().add(ETAG_HEADER,etagFromResources);    String ifNoneMatch=req.headers().get(IF_NONE_MATCH_HEADER);    if (etagFromResources.equals(ifNoneMatch)) {      ResponseStatusCodeLogUtil.debug(req,StatusCode.NOT_MODIFIED,RecursiveExpansionRootHandler.class);      req.response().setStatusCode(StatusCode.NOT_MODIFIED.getStatusCode());      req.response().setStatusMessage(StatusCode.NOT_MODIFIED.getStatusMessage());      req.response().headers().add("Content-Length","0");      req.response().setChunked(false);      result=null;    } else {      ResponseStatusCodeLogUtil.debug(req,StatusCode.OK,RecursiveExpansionRootHandler.class);    }  } else {    ResponseStatusCodeLogUtil.debug(req,StatusCode.OK,RecursiveExpansionRootHandler.class);  }  return result;}  }
class C{  public boolean isFirstDownload(){  return mFirstDownloadRepeat && mRepeatDownload;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  boolean state;  doc=(Document)load("staff",false);  element=doc.getDocumentElement();  state=element.hasAttribute("");  assertFalse("elementhasattribute01",state);}  }
class C{  public boolean execute(IRequestProcessor requestProcessor,IEventSender eventSender,ICvsListenerRegistry listenerRegistry,IClientEnvironment clientEnvironment,IProgressViewer progressViewer) throws CommandException, AuthenticationException {  final ExpandedModules expandedModules=new ExpandedModules();  if (!expandModules(expandedModules,listenerRegistry,requestProcessor,clientEnvironment)) {    return false;  }  return checkout(expandedModules,requestProcessor,listenerRegistry,clientEnvironment);}  }
class C{  public boolean isOverTimeApplicable(){  Object oo=get_Value(COLUMNNAME_IsOverTimeApplicable);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public StrongTrustManager(Context context) throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {  mContext=context;  InputStream in=null;  mTrustStore=KeyStore.getInstance(TRUSTSTORE_TYPE);  in=mContext.getResources().openRawResource(R.raw.debiancacerts);  mTrustStore.load(in,TRUSTSTORE_PASSWORD.toCharArray());}  }
class C{  public ProtocolRequest(String url,RequestMethod requestMethod){  super(url,requestMethod);}  }
class C{  LineAttrs(String lineSpec){  this(lineSpec,1);}  }
class C{  public boolean hasNext(){  return index < desc.length();}  }
class C{  private JmrixConfigPane(ConnectionConfig original){  ConnectionConfigManager manager=InstanceManager.getDefault(ConnectionConfigManager.class);  ccCurrent=original;  setLayout(new BorderLayout());  this.setBorder(BorderFactory.createEmptyBorder(0,8,0,8));  manuBox.addItem(NONE_SELECTED);  manufactureNameList=manager.getConnectionManufacturers();  for (  String manuName : manufactureNameList) {    if (original != null && original.getManufacturer() != null && original.getManufacturer().equals(manuName)) {      manuBox.addItem(manuName);      manuBox.setSelectedItem(manuName);    } else {      manuBox.addItem(manuName);    }  }  manuBox.addActionListener(null);  classConnectionNameList=manager.getConnectionTypes((String)manuBox.getSelectedItem());  classConnectionList=new jmri.jmrix.ConnectionConfig[classConnectionNameList.length + 1];  modeBox.addItem(NONE_SELECTED);  if (manuBox.getSelectedIndex() != 0) {    modeBox.setEnabled(true);  } else {    modeBox.setSelectedIndex(0);    modeBox.setEnabled(false);  }  int n=1;  if (manuBox.getSelectedIndex() != 0) {    for (    String className : classConnectionNameList) {      try {        ConnectionConfig config;        if (original != null && original.getClass().getName().equals(className)) {          config=original;          log.debug("matched existing config object");          modeBox.addItem(config.name());          modeBox.setSelectedItem(config.name());          if (classConnectionNameList.length == 1) {            modeBox.setSelectedIndex(1);          }        } else {          Class<?> cl=Class.forName(className);          config=(ConnectionConfig)cl.newInstance();          modeBox.addItem(config.name());        }        classConnectionList[n++]=config;      } catch (      NullPointerException e) {        log.error("Attempt to load {} failed.",className,e);      }catch (      ClassNotFoundException|InstantiationException|IllegalAccessException e) {        log.debug("Attempt to load {} failed: {}.",className,e);      }    }    if ((modeBox.getSelectedIndex() == 0) && (p.getComboBoxLastSelection((String)manuBox.getSelectedItem()) != null)) {      modeBox.setSelectedItem(p.getComboBoxLastSelection((String)manuBox.getSelectedItem()));    }  }  modeBox.addActionListener(null);  JPanel manufacturerPanel=new JPanel();  manufacturerPanel.add(manuBox);  JPanel connectionPanel=new JPanel();  connectionPanel.add(modeBox);  JPanel initialPanel=new JPanel();  initialPanel.setLayout(new BoxLayout(initialPanel,BoxLayout.Y_AXIS));  initialPanel.add(new JTitledSeparator(Bundle.getMessage("SystemManufacturer")));  initialPanel.add(manufacturerPanel);  initialPanel.add(new JTitledSeparator(Bundle.getMessage("SystemConnection")));  initialPanel.add(connectionPanel);  add(initialPanel,BorderLayout.NORTH);  initialPanel.add(new JTitledSeparator(Bundle.getMessage("Settings")));  JScrollPane scroll=new JScrollPane(details);  scroll.setBorder(BorderFactory.createEmptyBorder());  add(scroll,BorderLayout.CENTER);  selection();}  }
class C{  public Loop findLoop(Set<TableSource> outerTables){  for (  Loop loop : loops) {    if (loop.indexOnly()) {      Set<TableSource> maybeOuterTables=null;      if (outerTables != null)       maybeOuterTables=new HashSet<>();      boolean allFound=true;      for (      ColumnExpression column : dependencies.getReferencedColumns()) {        if (outerTables != null) {          if (outerTables.contains(column.getTable()))           continue;        }        if (loop.indexColumns.containsKey(column)) {          if (maybeOuterTables != null)           maybeOuterTables.add((TableSource)column.getTable());        } else {          allFound=false;        }      }      if (allFound)       return loop;      if (maybeOuterTables != null)       outerTables.addAll(maybeOuterTables);    } else {      boolean allFound=true;      for (      ColumnSource referencedTable : dependencies.getReferencedTables()) {        if (outerTables != null) {          if (outerTables.contains(referencedTable))           continue;        }        if (!loop.loaders.containsKey(referencedTable)) {          allFound=false;          break;        }      }      if (allFound)       return loop;      if (outerTables != null)       outerTables.addAll(loop.loaders.keySet());    }  }  return null;}  }
class C{  public static int dip2px(Context context,float dipValue){  final float scale=context.getResources().getDisplayMetrics().density;  return (int)(dipValue * scale + 0.5f);}  }
class C{  @Override public MatchQueryBuilder boost(float boost){  this.boost=boost;  return this;}  }
class C{  public static SubscriptionMigrationException convertToApi(org.oscm.internal.types.exception.SubscriptionMigrationException oldEx){  org.oscm.internal.types.exception.beans.SubscriptionMigrationExceptionBean bean=(org.oscm.internal.types.exception.beans.SubscriptionMigrationExceptionBean)getFaultInfo(oldEx);  SubscriptionMigrationExceptionBean v13Bean=convertBeanToApi(bean,SubscriptionMigrationExceptionBean.class);  if (bean != null) {    SubscriptionMigrationException.Reason v13Reason=EnumConverter.convert(bean.getReason(),SubscriptionMigrationException.Reason.class);    v13Bean.setReason(v13Reason);  }  return newApiException(SubscriptionMigrationException.class,getExceptionMessage(oldEx),v13Bean,oldEx.getStackTrace());}  }
class C{  protected Gradient_Delegate(int colors[],float positions[]){  if (colors.length < 2) {    throw new IllegalArgumentException("needs >= 2 number of colors");  }  if (positions != null && colors.length != positions.length) {    throw new IllegalArgumentException("color and position arrays must be of equal length");  }  if (positions == null) {    float spacing=1.f / (colors.length - 1);    positions=new float[colors.length];    positions[0]=0.f;    positions[colors.length - 1]=1.f;    for (int i=1; i < colors.length - 1; i++) {      positions[i]=spacing * i;    }  }  mColors=colors;  mPositions=positions;}  }
class C{  public void modulo() throws IOException {  writeCode(MODULO);}  }
class C{  public V remove(K key){  return set(key,null);}  }
class C{  private Class writeArray(Class field,Object value,NodeMap node){  int size=Array.getLength(value);  if (length != null) {    node.put(length,String.valueOf(size));  }  return field.getComponentType();}  }
class C{  public StringBuffer insert(int index,float f){  return insert(index,Float.toString(f));}  }
class C{  public void test_CREATE_TX_READ_ONLY_02() throws Exception {  assertNotNull(m_mgr);  assertNotNull(m_mgr.getTransactionManager());  final IRemoteTx tx=m_mgr.getTransactionManager().createTx(RemoteTransactionManager.READ_COMMITTED);  try {  }  finally {    tx.commit();  }  assertFalse(tx.isActive());}  }
class C{  public static void sort(float[] array){  sort(0,array.length,array);}  }
class C{  void findClassesDerivingFrom(String super_name,Map<String,ClassReader> zipClasses,Map<String,ClassReader> inOutFound) throws LogAbortException {  ClassReader super_clazz=findClass(super_name,zipClasses,inOutFound);  for (  Entry<String,ClassReader> entry : zipClasses.entrySet()) {    String className=entry.getKey();    if (super_name.equals(className)) {      continue;    }    ClassReader classReader=entry.getValue();    ClassReader parent_cr=classReader;    while (parent_cr != null) {      String parent_name=internalToBinaryClassName(parent_cr.getSuperName());      if (parent_name == null) {        break;      } else       if (super_name.equals(parent_name)) {        inOutFound.put(className,classReader);        break;      }      parent_cr=zipClasses.get(parent_name);    }  }}  }
class C{  public int deleteLog(){  if (getKeepLogDays() < 1)   return 0;  String sql="DELETE AD_WorkflowProcessorLog " + "WHERE AD_WorkflowProcessor_ID=" + getAD_WorkflowProcessor_ID() + " AND (Created+"+ getKeepLogDays()+ ") < SysDate";  int no=DB.executeUpdate(sql,get_TrxName());  return no;}  }
class C{  protected Node export(Node n,AbstractDocument d){  super.export(n,d);  SVGOMElement e=(SVGOMElement)n;  e.prefix=prefix;  e.initializeAllLiveAttributes();  return n;}  }
class C{  void insertFirstPage(String docUrl){  mAllPageInfo.add(0,new PageParamInfo.PageInfo(1,docUrl));}  }
class C{  public void startOnInit(Result<I> result){  DeployFactory2<I> builder=builder();  if (builder == null) {    result.ok(null);    return;  }  if (!_lifecycle.toInit()) {    result.ok(get());    return;  }  _strategy.startOnInit(this,result);}  }
class C{  public JSONArray(Collection collection){  this.myArrayList=new ArrayList();  if (collection != null) {    Iterator iter=collection.iterator();    while (iter.hasNext()) {      this.myArrayList.add(JSONObject.wrap(iter.next()));    }  }}  }
class C{  public byte[] encode(byte[] bytes){  return encodeQuotedPrintable(PRINTABLE_CHARS,bytes);}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(VALUE).setRequired(true);}  }
class C{  int update(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws ShortBufferException {  return cipher.update(input,inputOffset,inputLen,output,outputOffset);}  }
class C{  @Override public void stop(){}  }
class C{  public boolean add(E e){  return offer(e);}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public SemDataParamsEditor(){}  }
class C{  public void iB2functionMessage(LocoNetMessage m){  int funcs=m.getElement(2);  localF9=(funcs & LnConstants.RE_IB2_F9_MASK) != 0;  localF10=(funcs & LnConstants.RE_IB2_F10_MASK) != 0;  localF11=(funcs & LnConstants.RE_IB2_F11_MASK) != 0;  localF12=(funcs & LnConstants.RE_IB2_F12_MASK) != 0;  notifySlotListeners();}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options) throws java.io.IOException {  if (source == null) {    throw new NullPointerException("Cannot decode null source array.");  }  if (off < 0 || off + len > source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and process %d bytes.",source.length,off,len));  }  if (len == 0) {    return new byte[0];  } else   if (len < 4) {    throw new IllegalArgumentException("Base64-encoded string must have at least four characters, but length specified was " + len);  }  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i;  byte sbiDecode;  for (i=off; i < off + len; i++) {    sbiDecode=DECODABET[source[i] & 0xFF];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=source[i];        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (source[i] == EQUALS_SIGN) {            break;          }        }      }    } else {      throw new java.io.IOException(String.format("Bad Base64 input character decimal %d in array position %d",((int)source[i]) & 0xFF,i));    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public ClientMessage createMessage(byte[] body){  ClientMessage message=createMessage();  if (body != null) {    message.writeBodyBufferBytes(body);  }  return message;}  }
class C{  @Override public void performAdditionalDomainTransferLogic(DomainResource domainResource,String clientId,DateTime asOfDate,int years,EppInput eppInput,HistoryEntry historyEntry) throws EppException {  FlagsTransferCommandExtension flags=eppInput.getSingleExtension(FlagsTransferCommandExtension.class);  if (flags == null) {    return;  }  messageToThrow="add:" + Joiner.on(',').join(flags.getAddFlags().getFlags()) + ";remove:"+ Joiner.on(',').join(flags.getRemoveFlags().getFlags());}  }
class C{  private void logHeaders(Map<String,List<String>> map){  if (map != null) {    for (    String field : map.keySet()) {      List<String> headers=map.get(field);      for (      String header : headers) {        log(field + ":" + header);      }    }  }}  }
class C{  private void filterCourseOfferingList(HttpServletRequest request,CrossListsModifyForm frm){  Collection existingOfferings=frm.getCourseOfferingIds();  Collection offerings=(Collection)request.getAttribute(CourseOffering.CRS_OFFERING_LIST_ATTR_NAME);  for (Iterator i=offerings.iterator(); i.hasNext(); ) {    CourseOffering co=(CourseOffering)i.next();    if ((!co.getInstructionalOffering().isNotOffered() && !co.getInstructionalOffering().getInstrOfferingConfigs().isEmpty()) || co.getInstructionalOffering().getCourseOfferings().size() > 1) {      i.remove();      continue;    }    for (Iterator j=existingOfferings.iterator(); j.hasNext(); ) {      String course=(String)j.next();      if (course.equals(co.getUniqueId().toString()))       i.remove();    }  }  request.setAttribute(CourseOffering.CRS_OFFERING_LIST_ATTR_NAME,offerings);}  }
class C{  public static void updateCounter(Context context,String counterGroup,String counterName,long newValue){  Counter counter=context.getCounter(counterGroup,counterName);  long oldValue=counter.getValue();  counter.increment(newValue - oldValue);}  }
class C{  public <U>SimpleReactStream<U> fromIteratorAsync(final Iterator<? extends Supplier<U>> actions){  return new SimpleReactStreamImpl<U>(this,StreamSupport.stream(Spliterators.spliteratorUnknownSize(actions,Spliterator.ORDERED),false).map(null));}  }
class C{  public MenuShortcut(int key,boolean useShiftModifier){  this.key=key;  this.usesShift=useShiftModifier;}  }
class C{  public int reverse(int x){  long out=0;  while (x != 0) {    out=out * 10 + x % 10;    x=x / 10;  }  if (out > Integer.MAX_VALUE || out < Integer.MIN_VALUE)   return 0;  return (int)out;}  }
class C{  public void write(byte[] buf,int offset,int length,boolean isEnd) throws IOException {  if (_stream != null)   _stream.write(buf,offset,length,isEnd);}  }
class C{  public void privateMethod(){}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  static <F>boolean foreignCollectionContains(IndexedCollection<F> foreignCollection,Query<F> query){  ResultSet<F> resultSet=foreignCollection.retrieve(query);  try {    return resultSet.isNotEmpty();  }  finally {    resultSet.close();  }}  }
class C{  protected boolean isQuietPeriod(){  return uptime() < quietPeriod;}  }
class C{  public static PrivateKey loadPrivateKeyFromKeyStore(KeyStore keyStore,InputStream keyStream,String storePass,String alias,String keyPass) throws IOException, GeneralSecurityException {  loadKeyStore(keyStore,keyStream,storePass);  return getPrivateKey(keyStore,alias,keyPass);}  }
class C{  @Override public void clear(){  if (mPanorama != null) {    mFileDownloaderManager.removeAll();    this.setPanorama(null);  }}  }
class C{  public <T>MappingIterator<T> readValues(JsonParser jp) throws IOException, JsonProcessingException {  DeserializationContext ctxt=_createDeserializationContext(jp,_config);  return new MappingIterator<T>(_valueType,jp,ctxt,_findRootDeserializer(_config,_valueType),false,_valueToUpdate);}  }
class C{  public static void ICONST_2(){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.ICONST_2();  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  public ComponentInfo(int resourceId,int rangeMax){  this.mResourceId=resourceId;  this.mRangeMax=rangeMax;}  }
class C{  public CopyOnWriteTextStore(TextStore modifiableTextStore){  Assert.isNotNull(modifiableTextStore);  fTextStore=new StringTextStore();  fModifiableTextStore=modifiableTextStore;}  }
class C{  private Collection<IgfsFile> write() throws Exception {  Collection<IgfsFile> res=new HashSet<>(FILES_CNT,1.0f);  ThreadLocalRandom8 rand=ThreadLocalRandom8.current();  for (int i=0; i < FILES_CNT; i++) {    IgfsPath path=new IgfsPath("/file-" + i);    igfs(0).create(path,false).close();    IgfsMetaManager meta=igfs(0).context().meta();    IgniteUuid fileId=meta.fileId(path);    int fileSize=rand.nextInt(MAX_FILE_SIZE);    int fullBlocks=fileSize / BLOCK_SIZE;    int remainderSize=fileSize % BLOCK_SIZE;    Collection<IgfsBlock> blocks=new ArrayList<>(fullBlocks + remainderSize > 0 ? 1 : 0);    for (int j=0; j < fullBlocks; j++)     blocks.add(new IgfsBlock(new IgfsBlockKey(fileId,null,true,j),BLOCK_SIZE));    if (remainderSize > 0)     blocks.add(new IgfsBlock(new IgfsBlockKey(fileId,null,true,fullBlocks),remainderSize));    IgfsFile file=new IgfsFile(path,fileSize,blocks);    for (    IgfsBlock block : blocks) {      IgfsOutputStream os=igfs(0).append(path,false);      os.write(chunk(block.length()));      os.close();    }    res.add(file);  }  return res;}  }
class C{  public static void removeNode(Node node){  node.getParentNode().removeChild(node);}  }
class C{  private Element checkElementAndConvert(ListIterator<Element> elementIterator){  Element element=elementIterator.next();  if (!(element instanceof Document)) {    Document root=new Document(element.ownerDocument().baseUri());    Element clone=element.clone();    root.appendChild(clone);    elementIterator.set(root);    return root;  }  return element;}  }
class C{  public FieldPosition(Format.Field attribute){  this(attribute,-1);}  }
class C{  public String numBoostingIterationsTipText(){  return "Set fixed number of iterations for LogitBoost. If >= 0, this sets the number of LogitBoost iterations " + "to perform. If < 0, the number is cross-validated or a stopping criterion on the training set is used " + "(depending on the value of useCrossValidation).";}  }
class C{  @Override public void handlePatch(Operation patch){  try {    State currentState=getState(patch);    State patchState=patch.getBody(State.class);    this.validatePatch(currentState,patchState);    this.applyPatch(currentState,patchState);    this.validateState(currentState);    patch.complete();    this.processPatch(currentState);  } catch (  Throwable e) {    ServiceUtils.logSevere(this,e);    if (!OperationUtils.isCompleted(patch)) {      patch.fail(e);    }  }}  }
class C{  public JsonObject add(String name,String value){  add(name,Json.value(value));  return this;}  }
class C{  public void close() throws IOException {  internalIn.close();}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.paint,stream);  SerialUtilities.writeStroke(this.domainGridlineStroke,stream);  SerialUtilities.writePaint(this.domainGridlinePaint,stream);  SerialUtilities.writeStroke(this.rangeGridlineStroke,stream);  SerialUtilities.writePaint(this.rangeGridlinePaint,stream);}  }
class C{  public boolean isVendor(){  return isSupplier() || isTechnologyProvider() || isReseller()|| isBroker();}  }
class C{  public static void performPut(Long lowerLimit,Long higerlimit){  assertNotNull(lowerLimit);  assertNotNull(higerlimit);  LocalRegion region=(LocalRegion)cache.getRegion(Region.SEPARATOR + regionName);  assertNotNull(region);  for (long i=lowerLimit.longValue(); i < higerlimit.longValue(); i++) {    region.put(new Long(i),new Long(i));  }}  }
class C{  public Builder days(Integer days){  this.days=days;  return this;}  }
class C{  public IgniteUuid sessionId(){  return sesId;}  }
class C{  public void disable(){  active=false;}  }
class C{  private static int type(final ClassWriter cw,final String desc){  String t;  int index=desc.charAt(0) == '(' ? desc.indexOf(')') + 1 : 0;switch (desc.charAt(index)) {case 'V':    return 0;case 'Z':case 'C':case 'B':case 'S':case 'I':  return INTEGER;case 'F':return FLOAT;case 'J':return LONG;case 'D':return DOUBLE;case 'L':t=desc.substring(index + 1,desc.length() - 1);return OBJECT | cw.addType(t);default :int data;int dims=index + 1;while (desc.charAt(dims) == '[') {++dims;}switch (desc.charAt(dims)) {case 'Z':data=BOOLEAN;break;case 'C':data=CHAR;break;case 'B':data=BYTE;break;case 'S':data=SHORT;break;case 'I':data=INTEGER;break;case 'F':data=FLOAT;break;case 'J':data=LONG;break;case 'D':data=DOUBLE;break;default :t=desc.substring(dims + 1,desc.length() - 1);data=OBJECT | cw.addType(t);}return (dims - index) << 28 | data;}}  }
class C{  public int connectSync(Context srcContext,Handler srcHandler,Handler dstHandler){  return connectSync(srcContext,srcHandler,new Messenger(dstHandler));}  }
class C{  private static void addRowDimConstraintString(DimConstraint dc,StringBuffer sb,boolean asAPI){  int gp=dc.getGrowPriority();  int firstComma=sb.length();  BoundSize size=dc.getSize();  if (size.isUnset() == false) {    if (asAPI) {      sb.append(".size(\"").append(getBS(size)).append("\")");    } else {      sb.append(',').append(getBS(size));    }  }  if (gp != 100) {    if (asAPI) {      sb.append(".growPrio(").append(gp).append("\")");    } else {      sb.append(",growprio ").append(gp);    }  }  Float gw=dc.getGrow();  if (gw != null) {    String g=gw != 100f ? floatToString(gw,asAPI) : "";    if (asAPI) {      if (g.length() == 0) {        sb.append(".grow()");      } else {        sb.append(".grow(\"").append(g).append("\")");      }    } else {      sb.append(",grow").append(g.length() > 0 ? (" " + g) : "");    }  }  int sp=dc.getShrinkPriority();  if (sp != 100) {    if (asAPI) {      sb.append(".shrinkPrio(").append(sp).append("\")");    } else {      sb.append(",shrinkprio ").append(sp);    }  }  Float sw=dc.getShrink();  if (sw != null && sw.intValue() != 100) {    String s=floatToString(sw,asAPI);    if (asAPI) {      sb.append(".shrink(\"").append(s).append("\")");    } else {      sb.append(",shrink ").append(s);    }  }  String eg=dc.getEndGroup();  if (eg != null) {    if (asAPI) {      sb.append(".endGroup(\"").append(eg).append("\")");    } else {      sb.append(",endgroup ").append(eg);    }  }  String sg=dc.getSizeGroup();  if (sg != null) {    if (asAPI) {      sb.append(".sizeGroup(\"").append(sg).append("\")");    } else {      sb.append(",sizegroup ").append(sg);    }  }  UnitValue al=dc.getAlign();  if (al != null) {    if (asAPI) {      sb.append(".align(\"").append(getUV(al)).append("\")");    } else {      String s=getUV(al);      String alKw=(s.equals("top") || s.equals("bottom") || s.equals("left")|| s.equals("label")|| s.equals("leading")|| s.equals("center")|| s.equals("trailing")|| s.equals("right")|| s.equals("baseline")) ? "" : "align ";      sb.append(',').append(alKw).append(s);    }  }  if (dc.isNoGrid()) {    if (asAPI) {      sb.append(".noGrid()");    } else {      sb.append(",nogrid");    }  }  if (dc.isFill()) {    if (asAPI) {      sb.append(".fill()");    } else {      sb.append(",fill");    }  }  if (asAPI == false) {    if (sb.length() > firstComma) {      sb.setCharAt(firstComma,'[');      sb.append(']');    } else {      sb.append("[]");    }  }}  }
class C{  private boolean jarResourcesHaveCommonParent(){  if (fJarResources.length == 0)   return true;  Object firstParent=fJarResources[0].getParent();  Assert.isNotNull(firstParent);  for (int i=1; i < fJarResources.length; i++) {    if (!firstParent.equals(fJarResources[i].getParent()))     return false;  }  return true;}  }
class C{  public DrawingEntry(){  super();  getCategories().remove(DocumentListEntry.CATEGORY);  getCategories().add(CATEGORY);}  }
class C{  public void createFile(String fileName){  FileWriter fstream;  BufferedWriter out=null;  try {    fstream=new FileWriter(fileName);    out=new BufferedWriter(fstream);    VOInfo info=getPropertiesInfo();    HashMap<String,List<VOPropertyDescription>> propertiesInfo=info.getVoPropertiesInfo();    Set<String> setOfVO=propertiesInfo.keySet();    out.write("package org.oscm.converter;\n");    out.write("import java.util.ArrayList;");    out.write("import java.util.List;");    out.write("public class VOConverter {\n");    for (    String voName : setOfVO) {      generateConverterMethodCode(out,voName,VERSION_UP,propertiesInfo,VO_PACKAGE_NAME,VO_PACKAGE_NAME_OLD);      generateConverterMethodCode(out,voName,VERSION_OLD,propertiesInfo,VO_PACKAGE_NAME_OLD,VO_PACKAGE_NAME);    }    HashSet<String> setOfVOList=info.getSetOfVOLists();    for (    String voName : setOfVOList) {      generateConverterMethodCodeForListOfVO(out,voName,VERSION_UP,VO_PACKAGE_NAME,VO_PACKAGE_NAME_OLD);      generateConverterMethodCodeForListOfVO(out,voName,VERSION_OLD,VO_PACKAGE_NAME_OLD,VO_PACKAGE_NAME);    }    out.write("}\n");  } catch (  IOException e) {    e.printStackTrace();  } finally {    close(out);  }}  }
class C{  public boolean isHidden(String file){  return Util.getImplementation().isHidden(file);}  }
class C{  protected void processPI() throws Exception {  XMLUtil.skipWhitespace(this.reader,null);  String target=XMLUtil.scanIdentifier(this.reader);  XMLUtil.skipWhitespace(this.reader,null);  Reader reader=new PIReader(this.reader);  if (!target.equalsIgnoreCase("xml")) {    this.builder.newProcessingInstruction(target,reader);  }  reader.close();}  }
class C{  public static boolean isInAmazon(){  boolean ret=true;  try {    getMetaData(CloudMetaDataType.zone);  } catch (  Exception e) {    ret=false;  }  return ret;}  }
class C{  JComboBox createHairComboBox(){  JComboBox cb=new JComboBox();  fillComboBox(cb);  cb.addActionListener(this);  return cb;}  }
class C{  protected void expandParentAndReceiver(){  FHTreeStateNode parent=(FHTreeStateNode)getParent();  if (parent != null)   parent.expandParentAndReceiver();  expand();}  }
class C{  private View fillFromTop(int nextTop){  mFirstPosition=Math.min(mFirstPosition,mItemCount - 1);  if (mFirstPosition < 0) {    mFirstPosition=0;  }  return fillDown(mFirstPosition,nextTop);}  }
class C{  public static TypeReference newTypeParameterBoundReference(int sort,int paramIndex,int boundIndex){  return new TypeReference((sort << 24) | (paramIndex << 16) | (boundIndex << 8));}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (domainID: ");  result.append(domainID);  result.append(')');  return result.toString();}  }
class C{  private static boolean isSorted(Comparable[] a){  return isSorted(a,0,a.length - 1);}  }
class C{  @Override public Object invoke(MethodInvocation invocation) throws Throwable {  if (DISABLED || !GUICE_COUNTER.isDisplayed()) {    return invocation.proceed();  }  final String requestName=getRequestName(invocation);  boolean systemError=false;  try {    GUICE_COUNTER.bindContextIncludingCpu(requestName);    return invocation.proceed();  } catch (  final Error e) {    systemError=true;    throw e;  } finally {    GUICE_COUNTER.addRequestForCurrentContext(systemError);  }}  }
class C{  public String startSetTipText(){  return "Set the start point for the search. This is specified as a comma " + "seperated list off attribute indexes starting at 1. It can include " + "ranges. Eg. 1,2,5-9,17.";}  }
class C{  public LazyFutureStream<Integer> from(final IntStream stream){  return fromStream(stream.boxed());}  }
class C{  public synchronized void removeInvalidComponent(JComponent component){  RepaintManager delegate=getDelegate(component);  if (delegate != null) {    delegate.removeInvalidComponent(component);    return;  }  if (invalidComponents != null) {    int index=invalidComponents.indexOf(component);    if (index != -1) {      invalidComponents.remove(index);    }  }}  }
class C{  public void showDialog(){  view.setCheckoutButEnableState(false);  view.showDialog();}  }
class C{  public ObjectFactory(){}  }
class C{  public ArrayList<Mapping> cloneFrame(){  if (stack[top] == null)   return null;  ArrayList<Mapping> clone=new ArrayList<Mapping>();  for (Mapping map=topOfFrame(); map != null; map=next()) {    clone.add(map);  }  return clone;}  }
class C{  public SayRequiredItemsFromCollectionAction(final String questname,final int index,final String message){  this.questname=checkNotNull(questname);  this.index=index;  this.message=checkNotNull(message);}  }
class C{  public static String create(List<String> pathSegments,String defaultHostport){  return create(join(pathSegments),defaultHostport);}  }
class C{  protected Map<String,String> loadSessionVariables(HttpServletRequest req) throws ServletException {  Map<String,String> datastoreMap=new HashMap<>();  String sessionId=getCookieValue(req,"bookshelfSessionId");  if (sessionId.equals("")) {    return datastoreMap;  }  Key key=keyFactory.newKey(sessionId);  Transaction transaction=datastore.newTransaction();  try {    Entity stateEntity=transaction.get(key);    StringBuilder logNames=new StringBuilder();    if (stateEntity != null) {      for (      String varName : stateEntity.names()) {        req.getSession().setAttribute(varName,stateEntity.getString(varName));        datastoreMap.put(varName,stateEntity.getString(varName));        logNames.append(varName + " ");      }    } else {    }  }  finally {    if (transaction.active()) {      transaction.rollback();    }  }  return datastoreMap;}  }
class C{  private void validatePattern(String template){  boolean quote=false;  int next, last=-1, count=0;  final int patternLength=template.length();  for (int i=0; i < patternLength; i++) {    next=(template.charAt(i));    if (next == '\'') {      if (count > 0) {        validatePatternCharacter((char)last);        count=0;      }      if (last == next) {        last=-1;      } else {        last=next;      }      quote=!quote;      continue;    }    if (!quote && (last == next || (next >= 'a' && next <= 'z') || (next >= 'A' && next <= 'Z'))) {      if (last == next) {        count++;      } else {        if (count > 0) {          validatePatternCharacter((char)last);        }        last=next;        count=1;      }    } else {      if (count > 0) {        validatePatternCharacter((char)last);        count=0;      }      last=-1;    }  }  if (count > 0) {    validatePatternCharacter((char)last);  }  if (quote) {    throw new IllegalArgumentException("Unterminated quote");  }}  }
class C{  private void compareBytes(byte[] expectedResult,byte[] actualResult){  if (expectedResult == null) {    assertNull(actualResult);    return;  }  assertNotNull(actualResult);  assertEquals("Size of the arrays are not equals: ",expectedResult.length,actualResult.length);  for (int i=0; i < expectedResult.length; i++) {    assertEquals("Bytes at index " + i + " differs: expected 0x"+ Utils.byteToHexString(expectedResult[i])+ " got 0x"+ Utils.byteToHexString(actualResult[i]),expectedResult[i],actualResult[i]);  }}  }
class C{  public boolean removeAll(Collection<?> c){  if (!(c instanceof JumboEnumSet))   return super.removeAll(c);  JumboEnumSet<?> es=(JumboEnumSet<?>)c;  if (es.elementType != elementType)   return false;  for (int i=0; i < elements.length; i++)   elements[i]&=~es.elements[i];  return recalculateSize();}  }
class C{  public AxisAngle4f normalize(){  float invLength=(float)(1.0 / Math.sqrt(x * x + y * y + z * z));  x*=invLength;  y*=invLength;  z*=invLength;  return this;}  }
class C{  public DownExpandAnimation(View view,int duration){  setDuration(duration);  mAnimatedView=view;  mViewLayoutParams=(LayoutParams)view.getLayoutParams();  mIsVisibleAfter=(view.getVisibility() == View.VISIBLE);  mMarginStart=mViewLayoutParams.bottomMargin;  mMarginEnd=(mMarginStart == 0 ? (0 - view.getHeight()) : 0);  view.setVisibility(View.VISIBLE);}  }
class C{  public static final float[] convertColor(Color color){  return color.getRGBComponents(null);}  }
class C{  public void clear(){  values.clear();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:26.758 -0500",hash_original_method="9555B3D0DB27D43CC0B0BA451DA1A9D5",hash_generated_method="25B7A8A174AB1484FCBADD07D4D57006") public PendingIntent rspReconnectIntent(Message response){  PendingIntent retVal=(PendingIntent)response.obj;  return retVal;}  }
class C{  public boolean isReceiveEmailNotification(){  return receiveEmailNotification;}  }
class C{  public boolean isBatteryLow(){  return ((mStatus & LOW_BATTERY_BIT) != 0);}  }
class C{  public void sumQuantities(Map<String,BOMNode> quantityPerNode){  if (root != null) {    root.sumQuantity(quantityPerNode);  }}  }
class C{  public boolean updateCall(NgnMediaType newMediaType){  if (super.mMediaType == newMediaType) {    return true;  }  boolean ret;  super.mMediaType=newMediaType;  return makeCall(super.getRemotePartyUri());}  }
class C{  public final boolean isPublic(){  return Modifier.isPublic(getModifiers());}  }
class C{  public static void main(String[] args) throws IOException, SAXException, ParserConfigurationException {  new QueryExample2().displayItems();}  }
class C{  @SafeVarargs public static <T>T[] join(IntFunction<T[]> arrayFunction,T[] arrayA,T... arrayB){  if ((arrayB == null) || (arrayB.length == 0)) {    return arrayA;  }  if ((arrayA == null) || (arrayA.length == 0)) {    return arrayB;  }  T[] array=arrayFunction.apply(arrayA.length + arrayB.length);  System.arraycopy(arrayA,0,array,0,arrayA.length);  System.arraycopy(arrayB,0,array,arrayA.length,arrayB.length);  return array;}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN}) public ExecutionWindowRestRep updateExecutionWindow(@PathParam("id") URI id,ExecutionWindowUpdateParam param){  ExecutionWindow executionWindow=getExecutionWindowById(id,true);  StorageOSUser user=getUserFromContext();  verifyAuthorizedInTenantOrg(uri(executionWindow.getTenant()),user);  validateParam(param,executionWindow,user.getTenantId());  updateObject(executionWindow,param);  executionWindowManager.updateExecutionWindow(executionWindow);  auditOpSuccess(OperationTypeEnum.UPDATE_EXECUTION_WINDOW,executionWindow.auditParameters());  executionWindow=executionWindowManager.getExecutionWindowById(executionWindow.getId());  return map(executionWindow);}  }
class C{  public String id(){  return nodeId;}  }
class C{  public static void w(String tag,String s){  if (LOG.WARN >= LOGLEVEL)   Log.w(tag,s);}  }
class C{  Vset check(Environment env,Context ctx,Vset vset,Hashtable exp){  checkLabel(env,ctx);  CheckContext newctx=new CheckContext(ctx,this);  ConditionVars cvars=cond.checkCondition(env,newctx,reach(env,vset),exp);  cond=convert(env,newctx,Type.tBoolean,cond);  Vset vsTrue=cvars.vsTrue.clearDeadEnd();  Vset vsFalse=cvars.vsFalse.clearDeadEnd();  vsTrue=ifTrue.check(env,newctx,vsTrue,exp);  if (ifFalse != null)   vsFalse=ifFalse.check(env,newctx,vsFalse,exp);  vset=vsTrue.join(vsFalse.join(newctx.vsBreak));  return ctx.removeAdditionalVars(vset);}  }
class C{  @Override public void assignResourceRequests(){  while (hasPendingRequest()) {    SamzaResourceRequest request=peekPendingRequest();    log.info("Handling request: " + request.getContainerID() + " "+ request.getRequestTimestampMs()+ " "+ request.getPreferredHost());    String preferredHost=request.getPreferredHost();    int containerID=request.getContainerID();    if (hasAllocatedResource(preferredHost)) {      log.info("Found a matched-container {} on the preferred host. Running on {}",containerID,preferredHost);      runStreamProcessor(request,preferredHost);      state.matchedResourceRequests.incrementAndGet();    } else {      log.info("Did not find any allocated resources on preferred host {} for running container id {}",preferredHost,containerID);      boolean expired=requestExpired(request);      boolean resourceAvailableOnAnyHost=hasAllocatedResource(ResourceRequestState.ANY_HOST);      if (expired && resourceAvailableOnAnyHost) {        log.info("Request expired. running on ANY_HOST");        runStreamProcessor(request,ResourceRequestState.ANY_HOST);      } else {        log.info("Either the request timestamp {} is greater than resource request timeout {}ms or we couldn't " + "find any free allocated resources in the buffer. Breaking out of loop.",request.getRequestTimestampMs(),requestTimeout);        break;      }    }  }}  }
class C{  private View findFocusableViewInMyBoundsY(final boolean topFocus,final int top,View preferredFocusable){  final int fadingEdgeLength=getVerticalFadingEdgeLength() / 2;  final int topWithoutFadingEdge=top + fadingEdgeLength;  final int bottomWithoutFadingEdge=top + getHeight() - fadingEdgeLength;  if ((preferredFocusable != null) && (preferredFocusable.getTop() < bottomWithoutFadingEdge) && (preferredFocusable.getBottom() > topWithoutFadingEdge)) {    return preferredFocusable;  }  return findFocusableViewInBoundsY(topFocus,topWithoutFadingEdge,bottomWithoutFadingEdge);}  }
class C{  public void addTileSensors(final int numTilesX,final int numTilesY,final int offset){  int tileWidth=parentWorld.getWidth() / numTilesX;  int tileHeight=parentWorld.getHeight() / numTilesY;  for (int i=0; i < numTilesX; i++) {    for (int j=0; j < numTilesY; j++) {      addSensor(new TileSensor(this,((i * tileWidth) + offset),((j * tileHeight) + offset),tileWidth,tileHeight));    }  }}  }
class C{  @Override public void activate(){  scriptHelper=getSlingScriptHelper();  resource=getResource();  SystemSettingsService systemSettingsService=scriptHelper.getService(SystemSettingsService.class);  if (systemSettingsService != null) {    blogName=systemSettingsService.getBlogName();    extensionlessUrls=systemSettingsService.getExtensionlessUrls();    temporaryDirectory=systemSettingsService.getTemporaryDirectory();  }}  }
class C{  public SWFShapeImpl(TagWriter writer,int glyphCount){  this(writer,false,false);  this.glyphCount=glyphCount;  bout=new ByteArrayOutputStream();  out=new OutStream(bout);  glyphByteArrays=new ArrayList();  fill1Index=1;  lineIndex=0;}  }
class C{  public static boolean isZeroWidth(double min,double max){  double width=max - min;  if (width == 0.0)   return true;  double maxAbs=Math.max(Math.abs(min),Math.abs(max));  double scaledInterval=width / maxAbs;  int level=DoubleBits.exponent(scaledInterval);  return level <= MIN_BINARY_EXPONENT;}  }
class C{  default Streamable<Streamable<T>> permutations(){  if (isEmpty()) {    return Streamable.empty();  } else {    final Streamable<T> tail=tail();    if (tail.isEmpty()) {      return Streamable.of(this);    } else {      final Streamable<Streamable<T>> zero=Streamable.empty();      return distinct().foldLeft(zero,null);    }  }}  }
class C{  private void handleRequest(ByteBuf request,ChannelHandlerContext context){  NettyConnection connection=getConnection(context.channel());  if (connection != null) {    connection.handleRequest(request);  }}  }
class C{  public List<NamedRelatedVirtualPoolRep> listByVirtualArray(URI varrayId){  VirtualPoolList response=client.get(VirtualPoolList.class,String.format(ID_URL_FORMAT,VARRAY_URL) + "/vpools",varrayId);  return defaultList(response.getVirtualPool());}  }
class C{  public TouchHandler(GraphicalView view,AbstractChart chart){  graphicalView=view;  zoomR=graphicalView.getZoomRectangle();  if (chart instanceof XYChart) {    mRenderer=((XYChart)chart).getRenderer();  } else {    mRenderer=((RoundChart)chart).getRenderer();  }  if (mRenderer.isPanEnabled()) {    mPan=new Pan(chart);  }  if (mRenderer.isZoomEnabled()) {    mPinchZoom=new Zoom(chart,true,1);  }}  }
class C{  private void checkForDuplicatePortName(String name,URI systemURI){  URIQueryResultList storagePortURIs=new URIQueryResultList();  _dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceStoragePortConstraint(systemURI),storagePortURIs);  Iterator<URI> storagePortIter=storagePortURIs.iterator();  while (storagePortIter.hasNext()) {    StoragePort port=_dbClient.queryObject(StoragePort.class,storagePortIter.next());    if (port != null && !port.getInactive() && port.getLabel().equalsIgnoreCase(name)) {      throw APIException.badRequests.duplicateLabel(name);    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void heapifyDown(Comparable<Object> cur){  final int stop=size >>> 1;  int twopos=0;  while (twopos < stop) {    int bestchild=(twopos << 1) + 1;    Comparable<Object> best=twoheap[bestchild];    final int right=bestchild + 1;    if (right < size && best.compareTo(twoheap[right]) < 0) {      bestchild=right;      best=twoheap[right];    }    if (cur.compareTo(best) >= 0) {      break;    }    twoheap[twopos]=best;    twopos=bestchild;  }  twoheap[twopos]=cur;}  }
class C{  public void transform(AffineTransform xform){  this.transform.concatenate(xform);  invalidateTransform();}  }
class C{  public UndirectedGraphNode cloneGraphB(UndirectedGraphNode node){  Map<Integer,UndirectedGraphNode> map=new HashMap<>();  return dfs(node,map);}  }
class C{  @SuppressWarnings("rawtypes") public XPathFilterParameterSpec(String xPath,Map namespaceMap){  if (xPath == null || namespaceMap == null) {    throw new NullPointerException();  }  this.xPath=xPath;  Map<?,?> copy=new HashMap<>((Map<?,?>)namespaceMap);  Iterator<? extends Map.Entry<?,?>> entries=copy.entrySet().iterator();  while (entries.hasNext()) {    Map.Entry<?,?> me=entries.next();    if (!(me.getKey() instanceof String) || !(me.getValue() instanceof String)) {      throw new ClassCastException("not a String");    }  }  @SuppressWarnings("unchecked") Map<String,String> temp=(Map<String,String>)copy;  nsMap=Collections.unmodifiableMap(temp);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Text textNode;  Text splitNode;  Node secondPart;  String value;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(2);  textNode=(Text)nameNode.getFirstChild();  splitNode=textNode.splitText(7);  secondPart=textNode.getNextSibling();  value=secondPart.getNodeValue();  assertEquals("textSplitTextOneAssert","Jones",value);}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  previewFormat=parameters.getPreviewFormat();  previewFormatString=parameters.get("preview-format");  Log.d(TAG,"Default preview format: " + previewFormat + '/'+ previewFormatString);  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  screenResolution=new Point(display.getWidth(),display.getHeight());  Log.d(TAG,"Screen resolution: " + screenResolution);  Point screenResolutionForCamera=new Point();  screenResolutionForCamera.x=screenResolution.x;  screenResolutionForCamera.y=screenResolution.y;  if (screenResolution.x < screenResolution.y) {    screenResolutionForCamera.x=screenResolution.y;    screenResolutionForCamera.y=screenResolution.x;  }  cameraResolution=getCameraResolution(parameters,screenResolutionForCamera);  Log.d(TAG,"Camera resolution: " + screenResolution);}  }
class C{  public static <T>Supplier<T> memoizeSupplier(final Supplier<T> s){  final Map<Object,T> lazy=new ConcurrentHashMap<>();  return null;}  }
class C{  public NoQueueServersAvailableException(Throwable cause){  super(cause);}  }
class C{  private static boolean isOctal(char c){  return ('0' <= c) && (c <= '7');}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public T vlink(String value){  return attr("vlink",value);}  }
class C{  public void acceptTerms(String requestId,String pin) throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.debug("Send response for request ".concat(requestId));  }  if (TextUtils.isEmpty(requestId)) {    throw new PayloadException("requestId should never be null or empty!");  }  sendSipMessage(mRcsSettings.getEndUserConfirmationRequestUri(),requestId,ACCEPT_RESPONSE,pin);}  }
class C{  public Rational divide(Rational secondRational){  BigInteger n=r[0].multiply(secondRational.getDenominator());  BigInteger d=r[1].multiply(secondRational.getNumerator());  return new Rational(n,d);}  }
class C{  private synchronized void waitForStart(){  while (!running) {    try {      wait();    } catch (    InterruptedException e) {    }  }}  }
class C{  public static void loadExceptionCode(String code) throws MessageTranslatorException {  try {    String newCode=getPropAsString(code + CODE_SUFFIX);    if (null != newCode) {      codes.put(code,newCode);    } else {      throw new Exception("null value for exception code " + code);    }  } catch (  Exception x) {    throw new MessageTranslatorException(x,"unable to load exception code for " + code);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:15.770 -0400",hash_original_method="9EE4178A3B2FA68701FDBB69893D1895",hash_generated_method="D3B494722F010F58D7C0A5115E2F613B") public boolean isRevocationEnabled(){  return revocationEnabled;}  }
class C{  public BlockPos toBlockPos(){  return supertile.getPos();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:07.014 -0500",hash_original_method="CEB9108623A7C7A0C2BFBDCA074B84FE",hash_generated_method="06613A41D34C3260B95490A35F010F07") protected void enterFullscreenForVideoLayer(int layerId,String url){  if (mWebView == null)   return;  Message message=Message.obtain(mWebView.mPrivateHandler,WebView.ENTER_FULLSCREEN_VIDEO,layerId,0);  message.obj=url;  message.sendToTarget();}  }
class C{  public static final double[] timesPlusEquals(final double[] v1,final double s1,final double[] v2){  assert (v1.length == v2.length) : ERR_VEC_DIMENSIONS;  for (int i=0; i < v1.length; i++) {    v1[i]=v1[i] * s1 + v2[i];  }  return v1;}  }
class C{  private void onUserNameRead(Client client,String name){  String[] strings=name.split(NEWLINE,2);  client.setUserName(strings[0].trim());  sendRemainingParts(client,strings);  client.setReader(new ClientReader(chatServer,new MessageReader(chatServer)));  client.writeStringMessage("Welcome " + client.getUserName() + "\n");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:36.393 -0500",hash_original_method="217F3325EF864A770B5752CB9A6C19DE",hash_generated_method="9DA24C2923A9FF7A002FB13B91D86C4B") public static boolean containsAnyUuid(ParcelUuid[] uuidA,ParcelUuid[] uuidB){  if (uuidA == null && uuidB == null)   return true;  return (((uuidA[0].getTaintInt() + uuidB[0].getTaintInt())) == 1);}  }
class C{  ASTNode findDeclaringNode(String bindingKey){  return null;}  }
class C{  @SuppressWarnings("deprecation") public CLImage2D createImage2D(CLMem.Usage usage,CLImageFormat format,long width,long height,long rowPitch,Buffer buffer,boolean copy){}  }
class C{  public static int checkArgumentInRange(int value,int lower,int upper,String valueName){  if (value < lower) {    throw new IllegalArgumentException(String.format(Locale.US,"%s is out of range of [%d, %d] (too low)",valueName,lower,upper));  } else   if (value > upper) {    throw new IllegalArgumentException(String.format(Locale.US,"%s is out of range of [%d, %d] (too high)",valueName,lower,upper));  }  return value;}  }
class C{  public synchronized void deleteFile(Reference<?> ref,String fileName){  if (ref != null) {    String f2=refMap.remove(ref);    if (f2 != null) {      if (SysProperties.CHECK) {        if (fileName != null && !f2.equals(fileName)) {          DbException.throwInternalError("f2:" + f2 + " f:"+ fileName);        }      }      fileName=f2;    }  }  if (fileName != null && FileUtils.exists(fileName)) {    try {      IOUtils.trace("TempFileDeleter.deleteFile",fileName,null);      FileUtils.tryDelete(fileName);    } catch (    Exception e) {    }  }}  }
class C{  public static Map<String,Object> quickCreateVirtualWithVariants(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();  String variantProductIdsBag=(String)context.get("variantProductIdsBag");  String productFeatureIdOne=(String)context.get("productFeatureIdOne");  String productFeatureIdTwo=(String)context.get("productFeatureIdTwo");  String productFeatureIdThree=(String)context.get("productFeatureIdThree");  Locale locale=(Locale)context.get("locale");  Map<String,Object> successResult=ServiceUtil.returnSuccess();  try {    String productId=(String)context.get("productId");    if (UtilValidate.isEmpty(productId)) {      productId=delegator.getNextSeqId("Product");      GenericValue product=delegator.makeValue("Product");      product.set("productId",productId);      product.set("isVirtual","Y");      product.set("isVariant","N");      product.set("productTypeId","FINISHED_GOOD");      product.set("introductionDate",nowTimestamp);      product.set("returnable","Y");      product.set("taxable","Y");      product.set("chargeShipping","Y");      product.set("autoCreateKeywords","Y");      product.set("includeInPromotions","Y");      product.create();    }    successResult.put("productId",productId);    Set<String> prelimVariantProductIds=FastSet.newInstance();    List<String> splitIds=Arrays.asList(variantProductIdsBag.split("[,\\p{Space}]"));    Debug.logInfo("Variants: bag=" + variantProductIdsBag,module);    Debug.logInfo("Variants: split=" + splitIds,module);    prelimVariantProductIds.addAll(splitIds);    Map<String,GenericValue> variantProductsById=FastMap.newInstance();    for (    String variantProductId : prelimVariantProductIds) {      if (UtilValidate.isEmpty(variantProductId)) {        continue;      }      GenericValue variantProduct=EntityQuery.use(delegator).from("Product").where("productId",variantProductId).queryOne();      if (variantProduct != null) {        variantProductsById.put(variantProductId,variantProduct);      } else {        List<GenericValue> goodIdentificationList=EntityQuery.use(delegator).from("GoodIdentification").where("idValue",variantProductId).queryList();        if (UtilValidate.isEmpty(goodIdentificationList)) {          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductVirtualVariantCreation",UtilMisc.toMap("variantProductId",variantProductId),locale));        }        if (goodIdentificationList.size() > 1) {          Debug.logWarning("Warning creating a virtual with variants: the ID [" + variantProductId + "] was not a productId and resulted in ["+ goodIdentificationList.size()+ "] GoodIdentification records: "+ goodIdentificationList,module);        }        for (        GenericValue goodIdentification : goodIdentificationList) {          GenericValue giProduct=goodIdentification.getRelatedOne("Product",false);          if (giProduct != null) {            variantProductsById.put(giProduct.getString("productId"),giProduct);          }        }      }    }    Set<String> featureProductIds=FastSet.newInstance();    featureProductIds.add(productId);    featureProductIds.addAll(variantProductsById.keySet());    Set<String> productFeatureIds=new HashSet<String>();    productFeatureIds.add(productFeatureIdOne);    productFeatureIds.add(productFeatureIdTwo);    productFeatureIds.add(productFeatureIdThree);    for (    String featureProductId : featureProductIds) {      for (      String productFeatureId : productFeatureIds) {        if (UtilValidate.isNotEmpty(productFeatureId)) {          GenericValue productFeatureAppl=delegator.makeValue("ProductFeatureAppl",UtilMisc.toMap("productId",featureProductId,"productFeatureId",productFeatureId,"productFeatureApplTypeId","STANDARD_FEATURE","fromDate",nowTimestamp));          productFeatureAppl.create();        }      }    }    for (    GenericValue variantProduct : variantProductsById.values()) {      variantProduct.set("isVirtual","N");      variantProduct.set("isVariant","Y");      variantProduct.set("introductionDate",nowTimestamp);      variantProduct.store();      GenericValue productAssoc=delegator.makeValue("ProductAssoc",UtilMisc.toMap("productId",productId,"productIdTo",variantProduct.get("productId"),"productAssocTypeId","PRODUCT_VARIANT","fromDate",nowTimestamp));      productAssoc.create();    }  } catch (  GenericEntityException e) {    String errMsg="Error creating new virtual product from variant products: " + e.toString();    Debug.logError(e,errMsg,module);    return ServiceUtil.returnError(errMsg);  }  return successResult;}  }
class C{  WrappedByteBuffer expandAt(int i,int expectedRemaining){  if ((i + expectedRemaining) <= _buf.limit()) {    return this;  } else {    if ((i + expectedRemaining) <= _buf.capacity()) {      _buf.limit(i + expectedRemaining);    } else {      int newCapacity=_buf.capacity() + ((expectedRemaining > INITIAL_CAPACITY) ? expectedRemaining : INITIAL_CAPACITY);      java.nio.ByteBuffer newBuffer=java.nio.ByteBuffer.allocate(newCapacity);      _buf.flip();      newBuffer.put(_buf);      _buf=newBuffer;    }  }  return this;}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  public static <E,X extends Exception>List<E> asList(Iteration<? extends E,X> iter) throws X {  List<E> result=new ArrayList<E>();  addAll(iter,result);  return result;}  }
class C{  private static void register(){  register("entity",null,null,Entity.class);  register("player",null,null,Player.class);  register("creature","ent",null,BossCreature.class);  register("creature",null,null,Creature.class);  register("sheep",null,null,Sheep.class);  register("baby_dragon",null,null,Pet.class);  register("purple_dragon",null,null,Pet.class);  register("cat",null,null,Pet.class);  register("pet",null,null,Pet.class);  register("npc",null,null,NPC.class);  register("plant_grower",null,null,PlantGrower.class);  register("walkblocker",null,null,WalkBlocker.class);  register("growing_entity_spawner","items/grower/carrot_grower",null,CarrotGrower.class);  register("growing_entity_spawner","items/grower/wood_grower",null,CarrotGrower.class);  register("growing_entity_spawner",null,null,GrainField.class);  register("useable_entity",null,null,StatefulEntity.class);  register("gold_source",null,null,StatefulEntity.class);  register("fish_source",null,null,StatefulEntity.class);  register("well_source",null,null,StatefulEntity.class);  register("area",null,null,InvisibleEntity.class);  register("block",null,null,Block.class);  register("food",null,null,SheepFood.class);  register("chest",null,null,Chest.class);  register("corpse",null,null,Corpse.class);  register("blood",null,null,Blood.class);  register("blackboard",null,null,Sign.class);  register("sign",null,null,Sign.class);  register("rented_sign",null,null,Sign.class);  register("shop_sign",null,null,Sign.class);  register("tradecentersign",null,null,Sign.class);  register("item",null,null,Item.class);  register("item","box",null,Box.class);  register("item","ring","emerald-ring",Ring.class);  register("item","ring",null,UseableRing.class);  register("item","drink",null,UseableItem.class);  register("item","flower",null,StackableItem.class);  register("item","food",null,UseableItem.class);  register("item","tool","foodmill",UseableItem.class);  register("item","tool","sugarmill",UseableItem.class);  register("item","tool","scrolleraser",UseableItem.class);  register("item","herb",null,StackableItem.class);  register("item","misc",null,StackableItem.class);  register("item","money",null,StackableItem.class);  register("item","missile",null,StackableItem.class);  register("item","ammunition",null,StackableItem.class);  register("item","container",null,StackableItem.class);  register("item","special",null,StackableItem.class);  register("item","special","mithril clasp",Item.class);  register("item","club","wizard_staff",UseableItem.class);  register("item","misc","seed",UseableItem.class);  register("item","misc","bulb",UseableItem.class);  register("item","resource",null,StackableItem.class);  register("item","scroll",null,UseableItem.class);  register("item","jewellery",null,StackableItem.class);  register("item","token",null,Item.class);  register("portal",null,null,Portal.class);  register("house_portal",null,null,HousePortal.class);  register("door",null,null,Door.class);  register("fire",null,null,Fire.class);  register("spell",null,null,Spell.class);  register("gate",null,null,Gate.class);  register("game_board",null,null,GameBoard.class);  register("wall",null,null,Wall.class);  register("weather_entity",null,null,InvisibleEntity.class);  register("looped_sound_source",null,null,LoopedSoundSource.class);}  }
class C{  private void remapShakeToReadPref(){  final boolean oldPrefOn=SharedPreferencesUtils.getBooleanPref(mSharedPreferences,mService.getResources(),R.string.pref_shake_to_read_key,R.bool.pref_shake_to_read_default);  if (oldPrefOn) {    final Editor editor=mSharedPreferences.edit();    editor.putString(mService.getString(R.string.pref_shake_to_read_threshold_key),mService.getString(R.string.pref_shake_to_read_threshold_conversion_default));    editor.putBoolean(mService.getString(R.string.pref_shake_to_read_key),false);    editor.apply();  }}  }
class C{  public int compareTo(Coord other){  if (this.y < other.y) {    return -1;  } else   if (this.y > other.y) {    return 1;  } else   if (this.x < other.x) {    return -1;  } else   if (this.x > other.x) {    return 1;  } else {    return 0;  }}  }
class C{  Image(int[] imageArray,int w,int h){  this(Display.impl.createImage(imageArray,w,h));}  }
class C{  public String toString(){  return new String(b,0,i_end);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  WebEnv.dump(request);  WebSessionCtx wsc=WebSessionCtx.get(request);  WWindowStatus ws=WWindowStatus.get(request);  if (wsc == null || ws == null) {    if (wsc == null)     WebUtil.createTimeoutPage(request,response,this,"No Context"); else     doGet(request,response);    return;  }  String p_cmd=WebUtil.getParameter(request,P_Command);  String column=WebUtil.getParameter(request,P_ChangedColumn);  log.info("Cmd=" + p_cmd + " - ChangedColumn="+ column);  if (column != null && column.length() > 0) {    updateFields(request,wsc,ws);  } else {    if (p_cmd.equals("Exit")) {      MSession cSession=MSession.get(wsc.ctx,false);      if (cSession != null)       cSession.logout();      WebUtil.createLoginPage(request,response,this,ws.ctx,"Exit");      return;    }    executeCommand(request,p_cmd,wsc,ws);  }  WebDoc doc=null;  if (ws.curTab.isSingleRow())   doc=getSR_Form(request.getRequestURI(),wsc,ws); else   doc=getMR_Form(request.getRequestURI(),wsc,ws);  log.fine("Fini");  WebUtil.createResponse(request,response,this,null,doc,false);  log.fine("Closed");}  }
class C{  public static VOEventDefinition toVOEventDefinition(Event event,LocalizerFacade facade){  VOEventDefinition result=new VOEventDefinition();  String eventDescription=facade.getText(event.getKey(),LocalizedObjectTypes.EVENT_DESC);  result.setEventDescription(eventDescription);  result.setEventId(event.getEventIdentifier());  result.setEventType(event.getEventType());  updateValueObject(result,event);  return result;}  }
class C{  public static int XToTileX(int x,int tileGridXOffset,int tileWidth){  x-=tileGridXOffset;  if (x < 0) {    x+=1 - tileWidth;  }  return x / tileWidth;}  }
class C{  private List<Quote> downloadUrl(String urlParam) throws IOException, XmlPullParserException {  InputStream is=null;  try {    URL url=new URL(urlParam);    HttpURLConnection conn=(HttpURLConnection)url.openConnection();    conn.setReadTimeout(10000);    conn.setConnectTimeout(15000);    conn.setRequestMethod("GET");    conn.setDoInput(true);    conn.connect();    int response=conn.getResponseCode();    Log.d("Quotes_Generator","The response is: " + response);    if (response == 200) {      is=conn.getInputStream();      return readXML(is);    }  }  finally {    if (is != null) {      is.close();    }  }  return null;}  }
class C{  protected ComputeState createComputeHost(ComputeDescription computeHostDescription) throws Throwable {  ComputeState computeState=new ComputeState();  computeState.id=UUID.randomUUID().toString();  computeState.name=computeHostDescription.name;  computeState.documentSelfLink=computeState.id;  computeState.descriptionLink=computeHostDescription.documentSelfLink;  computeState.resourcePoolLink=this.resourcePool.documentSelfLink;  computeState.adapterManagementReference=getAdapterManagementReference();  ComputeState returnState=TestUtils.doPost(this.host,computeState,ComputeState.class,UriUtils.buildUri(this.host,ComputeService.FACTORY_LINK));  return returnState;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void testProvidesChecksum(){  SeeedStudioRfidProtocol instance=new SeeedStudioRfidProtocol();  assertEquals(true,instance.providesChecksum());}  }
class C{  public static void main(String[] args){  System.out.println("\n i    m(i)");  System.out.println("-----------");  for (int i=1; i <= 10; i++) {    System.out.printf("%2d%8.2f\n",i,m(i));  }}  }
class C{  public TransformException(String message,Throwable cause){  super(message);  this.cause=cause;}  }
class C{  public static String toStringDefaultEncoding(byte[] buffer,int startPos,int length){  return new String(buffer,startPos,length);}  }
class C{  public void close(){  if (elementLayers != null) {    elementLayers.clear();    elementLayers=null;  }  inputSource=null;  curListener=null;}  }
class C{  public void stop(boolean waitCompletion){  if (closed.compareAndSet(false,true)) {    if (topUpdateThread != null)     topUpdateThread.interrupt();    if (top != null)     top.shutdown();    if (connMgr != null)     connMgr.stop(waitCompletion);    for (    GridClientDataConfiguration dataCfg : cfg.getDataConfigurations()) {      GridClientDataAffinity aff=dataCfg.getAffinity();      if (aff instanceof GridClientTopologyListener)       removeTopologyListener((GridClientTopologyListener)aff);    }    if (log.isLoggable(Level.INFO))     log.info("Client stopped [id=" + id + ", waitCompletion="+ waitCompletion+ ']');  }}  }
class C{  @Override public void invokeCommand(int argLength,String[] args,String command){  boolean raw=false;  if (ToastUtil.contains(args,"-raw"))   raw=true;  for (  String line : Environment.toLines())   if (raw)   System.out.println(line); else   Toast.log().info(line);}  }
class C{  void assign(Register r){  getRegister().allocateToRegister(r);}  }
class C{  public static Dog maxDog(Dog[] dogs){  Dog maxDog=dogs[0];  for (  Dog d : dogs) {    if (d.size > maxDog.size) {      maxDog=d;    }  }  return maxDog;}  }
class C{  protected int saveNew_getID(){  if (m_stage != null)   return m_stage.getCM_CStage_ID();  return 0;}  }
class C{  private final void throwException2(int index) throws IndexOutOfBoundsException {  throw new IndexOutOfBoundsException("Index " + index + ", not in range [0-"+ size+ "]");}  }
class C{  public CharSequence terminateToken(CharSequence text){  int i=text.length();  while (i > 0 && text.charAt(i - 1) == ' ') {    i--;  }  char c;  if (i > 0 && ((c=text.charAt(i - 1)) == ',' || c == ';')) {    return text;  } else {    String separator=mLastSeparator + " ";    if (text instanceof Spanned) {      SpannableString sp=new SpannableString(text + separator);      TextUtils.copySpansFrom((Spanned)text,0,text.length(),Object.class,sp,0);      return sp;    } else {      return text + separator;    }  }}  }
class C{  public IllegalArgumentException(String s){  super(s);}  }
class C{  public void updateProgress(ProgressEvent evt){  if (progressBar != null) {    int type=evt.getType();    if (type == ProgressEvent.START || type == ProgressEvent.UPDATE) {      progressBar.setVisible(true);      progressBar.setValue(evt.getPercentComplete());      setLabel(evt.getTaskDescription());    } else {      progressBar.setVisible(false);    }  }}  }
class C{  private void importLDAPSchemaLdifs() throws FileOperationFailedException, IOException, LDIFException, DirectoryOrFileNotFoundException {  createLDAPSchemaFiles();  File schemaFileDirectory=new File(getSchemaFilesDirectory());  if (!schemaFileDirectory.exists() || CollectionUtils.isEmpty(Arrays.asList(schemaFileDirectory.listFiles()))) {    throw new DirectoryOrFileNotFoundException("Directory",getSchemaFilesDirectory());  }  _inMemoryDSConfig.setSchema(Schema.getSchema(schemaFileDirectory.listFiles()));}  }
class C{  public T caseStringLiteral(StringLiteral object){  return null;}  }
class C{  public Class<?> loadClass(String name) throws ClassNotFoundException {  return getClassLoader().loadClass(name);}  }
class C{  public void addHeader(String name,Object value){  HeaderValueHolder header=HeaderValueHolder.getByName(this.headers,name);  if (header == null) {    header=new HeaderValueHolder();    this.headers.put(name,header);  }  if (value instanceof Collection) {    header.addValues((Collection)value);  } else   if (value.getClass().isArray()) {    header.addValueArray(value);  } else {    header.addValue(value);  }}  }
class C{  protected void sequence_ParameterizedTypeRefStructural_TStructMemberList(ISerializationContext context,ParameterizedTypeRefStructural semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public Pi(int digits){  this.digits=digits;}  }
class C{  private void shareImage(final Bitmap bitmap){  File image;  final File imagesDir=new File(this.getCacheDir().toString() + File.separator + "shared_image");  if (!imagesDir.exists()) {    imagesDir.mkdir();  } else {    deleteFilesInDir(imagesDir);  }  try {    image=File.createTempFile("img",".png",imagesDir);    FileOutputStream out=null;    try {      out=new FileOutputStream(image);      bitmap.compress(Bitmap.CompressFormat.PNG,100,out);    }  finally {      if (out != null) {        out.close();        final String authority=(this.getPackageName()).concat(".").concat(MediaView.class.getSimpleName());        final Uri contentUri=FileProvider.getUriForFile(this,authority,image);        if (contentUri != null) {          final Intent shareImageIntent=new Intent(Intent.ACTION_SEND);          shareImageIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);          shareImageIntent.putExtra(Intent.EXTRA_STREAM,contentUri);          shareImageIntent.setDataAndType(contentUri,getContentResolver().getType(contentUri));          startActivity(Intent.createChooser(shareImageIntent,getString(R.string.misc_img_share)));        } else {          Toast.makeText(this,getString(R.string.err_share_image),Toast.LENGTH_LONG).show();        }      }    }  } catch (  IOException|NullPointerException e) {    e.printStackTrace();    Toast.makeText(this,getString(R.string.err_share_image),Toast.LENGTH_LONG).show();  }}  }
class C{  private Image createOSXSizeGrip(){  ClassLoader cl=getClass().getClassLoader();  URL url=cl.getResource("org/fife/ui/autocomplete/osx_sizegrip.png");  if (url == null) {    File f=new File("../AutoComplete/src/org/fife/ui/autocomplete/osx_sizegrip.png");    if (f.isFile()) {      try {        url=f.toURI().toURL();      } catch (      MalformedURLException mue) {        mue.printStackTrace();        return null;      }    } else {      return null;    }  }  Image image=null;  try {    image=ImageIO.read(url);  } catch (  IOException ioe) {    ioe.printStackTrace();  }  return image;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:14.588 -0500",hash_original_method="5BB6CBCB4177EDC48B270A42A6989FB0",hash_generated_method="33DE32FBBCA6278A4F902767B055B176") private float handleReplacement(ReplacementSpan replacement,TextPaint wp,int start,int limit,boolean runIsRtl,Canvas c,float x,int top,int y,int bottom,FontMetricsInt fmi,boolean needWidth){  float ret=0;  int textStart=mStart + start;  int textLimit=mStart + limit;  if (needWidth || (c != null && runIsRtl)) {    int previousTop=0;    int previousAscent=0;    int previousDescent=0;    int previousBottom=0;    int previousLeading=0;    boolean needUpdateMetrics=(fmi != null);    if (needUpdateMetrics) {      previousTop=fmi.top;      previousAscent=fmi.ascent;      previousDescent=fmi.descent;      previousBottom=fmi.bottom;      previousLeading=fmi.leading;    }    ret=replacement.getSize(wp,mText,textStart,textLimit,fmi);    if (needUpdateMetrics) {      updateMetrics(fmi,previousTop,previousAscent,previousDescent,previousBottom,previousLeading);    }  }  if (c != null) {    if (runIsRtl) {      x-=ret;    }    replacement.draw(c,mText,textStart,textLimit,x,top,y,bottom,wp);  }  return runIsRtl ? -ret : ret;}  }
class C{  public void dispose(){  m_debugPerspectiveModel.removeListener(m_listener);  synchronizeDebugger(m_debugPerspectiveModel.getCurrentSelectedDebugger(),null);}  }
class C{  public boolean isWrapperFor(final Class<?> iface) throws SQLException {  return iface.isInstance(this);}  }
class C{  public static void closeSilently(Closeable closeable){  if (closeable == null) {    return;  }  try {    closeable.close();  } catch (  RuntimeException rethrown) {    throw rethrown;  }catch (  Exception ignored) {  }}  }
class C{  private Vector<Vector<Object>> queryBPartner(){  String sql="SELECT bp.Name,l.PriceActual,l.PriceList,l.QtyInvoiced," + "i.DateInvoiced,dt.PrintName || ' ' || i.DocumentNo As DocumentNo," + "o.Name,"+ "NULL, i.M_PriceList_ID"+ " FROM C_Invoice i"+ " INNER JOIN C_InvoiceLine l ON (i.C_Invoice_ID=l.C_Invoice_ID)"+ " INNER JOIN C_DocType dt ON (i.C_DocType_ID=dt.C_DocType_ID)"+ " INNER JOIN AD_Org o ON (i.AD_Org_ID=o.AD_Org_ID)"+ " INNER JOIN C_BPartner bp ON (i.C_BPartner_ID=bp.C_BPartner_ID) "+ "WHERE l.M_Product_ID=? "+ "ORDER BY i.DateInvoiced DESC";  Vector<Vector<Object>> data=fillTable(sql,m_M_Product_ID);  sql="SELECT Name from M_Product WHERE M_Product_ID=?";  fillLabel(sql,m_M_Product_ID);  return data;}  }
class C{  public boolean isInvoiceAvailable(){  return isPaymentTypeAvailable(getSelectedOrganization(),PaymentInfoType.INVOICE);}  }
class C{  public void testContainsRandom() throws Exception {  int iters=atLeast(50);  for (int i=0; i < iters; i++) {    Polygon polygon=nextPolygon();    Polygon2D impl=Polygon2D.create(polygon);    for (int j=0; j < 100; j++) {      Rectangle rectangle=GeoTestUtil.nextBoxNear(polygon);      if (impl.relate(rectangle.minLat,rectangle.maxLat,rectangle.minLon,rectangle.maxLon) == Relation.CELL_INSIDE_QUERY) {        for (int k=0; k < 500; k++) {          double point[]=GeoTestUtil.nextPointNear(rectangle);          double latitude=point[0];          double longitude=point[1];          if (latitude >= rectangle.minLat && latitude <= rectangle.maxLat && longitude >= rectangle.minLon && longitude <= rectangle.maxLon) {            assertTrue(impl.contains(latitude,longitude));          }        }        for (int k=0; k < 100; k++) {          double point[]=GeoTestUtil.nextPointNear(polygon);          double latitude=point[0];          double longitude=point[1];          if (latitude >= rectangle.minLat && latitude <= rectangle.maxLat && longitude >= rectangle.minLon && longitude <= rectangle.maxLon) {            assertTrue(impl.contains(latitude,longitude));          }        }      }    }  }}  }
class C{  public static void enumerateResources(VerificationHost host,boolean isMock,String resourcePoolLink,String computeHostLinkDescription,String computeHostLink,String testCase) throws Throwable {  enumerateResources(host,null,isMock ? EnumSet.of(TaskOption.IS_MOCK) : null,resourcePoolLink,computeHostLinkDescription,computeHostLink,testCase,null);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public String toString(){  return getDescriptor();}  }
class C{  public static String readResourceUtf8(String filename){  return resourceToString(getResource(filename));}  }
class C{  @Override public <T>T inject(Function<CoreComponent,T> injector){  final CoreComponent c=coreInjector.get();  if (c == null) {    throw new IllegalStateException("Injection attempted before instance has been fully initialize, use " + "LifeCycleRegistry#start(..) to register a hook instead");  }  return injector.apply(c);}  }
class C{  private boolean dynInit(DataStatusEvent dse,String title){  if (dse.CreatedBy == null)   return false;  MUser user=MUser.get(Env.getCtx(),dse.CreatedBy.intValue());  m_info.append(" ").append(Msg.translate(Env.getCtx(),"CreatedBy")).append(": ").append(user.getName()).append(" - ").append(m_dateTimeFormat.format(dse.Created)).append("\n");  if (!dse.Created.equals(dse.Updated) || !dse.CreatedBy.equals(dse.UpdatedBy)) {    if (!dse.CreatedBy.equals(dse.UpdatedBy))     user=MUser.get(Env.getCtx(),dse.UpdatedBy.intValue());    m_info.append(" ").append(Msg.translate(Env.getCtx(),"UpdatedBy")).append(": ").append(user.getName()).append(" - ").append(m_dateTimeFormat.format(dse.Updated)).append("\n");  }  if (dse.Info != null && dse.Info.length() > 0)   m_info.append("\n (").append(dse.Info).append(")");  if (dse.AD_Table_ID != 0) {    MTable table1=MTable.get(Env.getCtx(),dse.AD_Table_ID);    setTitle(title + " - " + table1.getName());  }  if (!MRole.PREFERENCETYPE_Client.equals(MRole.getDefault().getPreferenceType()))   return false;  int Record_ID=0;  if (dse.Record_ID instanceof Integer)   Record_ID=((Integer)dse.Record_ID).intValue(); else   log.info("dynInit - Invalid Record_ID=" + dse.Record_ID);  if (Record_ID == 0)   return false;  String sql="SELECT AD_Column_ID, Updated, UpdatedBy, OldValue, NewValue " + "FROM AD_ChangeLog " + "WHERE AD_Table_ID=? AND Record_ID=? "+ "ORDER BY Updated DESC";  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,dse.AD_Table_ID);    pstmt.setInt(2,Record_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      addLine(rs.getInt(1),rs.getTimestamp(2),rs.getInt(3),rs.getString(4),rs.getString(5));    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  Vector<String> columnNames=new Vector<String>();  columnNames.add(Msg.translate(Env.getCtx(),"Name"));  columnNames.add(Msg.translate(Env.getCtx(),"NewValue"));  columnNames.add(Msg.translate(Env.getCtx(),"OldValue"));  columnNames.add(Msg.translate(Env.getCtx(),"UpdatedBy"));  columnNames.add(Msg.translate(Env.getCtx(),"Updated"));  columnNames.add(Msg.translate(Env.getCtx(),"AD_Column_ID"));  Listhead listhead=new Listhead();  listhead.setSizable(true);  for (int i=0; i < columnNames.size(); i++) {    Listheader listheader=new Listheader(columnNames.get(i).replaceAll("[&]",""));    listhead.appendChild(listheader);  }  table.appendChild(listhead);  SimpleListModel model=new SimpleListModel(m_data);  table.setItemRenderer(model);  table.setModel(model);  return true;}  }
class C{  protected void textEmitChar(char c){  ensureCapacity();  text[textLen++]=c;}  }
class C{  public void decayStatistics(int decayCount){  if (!booted)   return;  if (Controller.options.LOGGING_LEVEL >= 1) {    printToLogWithTimePrefix("Decay Organizer Statistics: \n\t" + " Num of Decay events: " + decayCount + "\n");  }}  }
class C{  private Id<TransitStopFacility> createStopFacilityId(String stopFacilityIdStr){  return Id.create(stopFacilityIdStr,TransitStopFacility.class);}  }
class C{  Values(){  initializeTable(INITIAL_SIZE);  this.size=0;  this.tombstones=0;}  }
class C{  public SetJvmPropertyScriptCommand(Configuration configuration,String resourcePath,String propertyName,String propertyValue){  super(configuration,resourcePath);  this.propertyName=propertyName;  this.propertyValue=propertyValue;}  }
class C{  void paintLayeredHighlights(Graphics g,int p0,int p1,Shape viewBounds,JTextComponent editor,View view){  int start=getStartOffset();  int end=getEndOffset();  p0=Math.max(start,p0);  p1=Math.min(end,p1);  union(((LayeredHighlighter.LayerPainter)painter).paintLayer(g,p0,p1,viewBounds,editor,view));}  }
class C{  @Override public String toString(){  StringBuffer text=new StringBuffer();  text.append('{');  for (int i=0; i < m_Indices.length; i++) {    if (i > 0) {      text.append(",");    }    if (m_Dataset == null) {      text.append(m_Indices[i] + " 1");    } else {      if (m_Dataset.attribute(m_Indices[i]).isNominal() || m_Dataset.attribute(m_Indices[i]).isString()) {        text.append(m_Indices[i] + " " + Utils.quote(m_Dataset.attribute(m_Indices[i]).value(1)));      } else {        text.append(m_Indices[i] + " 1");      }    }  }  text.append('}');  if (m_Weight != 1.0) {    text.append(",{" + Utils.doubleToString(m_Weight,AbstractInstance.s_numericAfterDecimalPoint) + "}");  }  return text.toString();}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  public static String unwrap(String cipherText,String key){  byte[] dataToDecrypt=Base64.decodeBase64(cipherText.getBytes());  byte[] iv=new byte[16];  byte[] data=new byte[dataToDecrypt.length - 16];  System.arraycopy(dataToDecrypt,0,iv,0,16);  System.arraycopy(dataToDecrypt,16,data,0,dataToDecrypt.length - 16);  byte[] plainText=decrypt(data,key,iv);  return new String(plainText);}  }
class C{  private BlockMirror createMirror(Volume volume,URI vPoolURI,URI recommendedPoolURI,String volumeLabel,String repGroupName){  BlockMirror createdMirror=new BlockMirror();  createdMirror.setSource(new NamedURI(volume.getId(),volume.getLabel()));  createdMirror.setId(URIUtil.createId(BlockMirror.class));  URI cgUri=volume.getConsistencyGroup();  if (!NullColumnValueGetter.isNullURI(cgUri)) {    createdMirror.setConsistencyGroup(cgUri);  }  createdMirror.setLabel(volumeLabel);  createdMirror.setStorageController(volume.getStorageController());  createdMirror.setSystemType(volume.getSystemType());  createdMirror.setVirtualArray(volume.getVirtualArray());  createdMirror.setProtocol(new StringSet());  createdMirror.getProtocol().addAll(volume.getProtocol());  createdMirror.setCapacity(volume.getCapacity());  createdMirror.setProject(new NamedURI(volume.getProject().getURI(),createdMirror.getLabel()));  createdMirror.setTenant(new NamedURI(volume.getTenant().getURI(),createdMirror.getLabel()));  createdMirror.setPool(recommendedPoolURI);  createdMirror.setVirtualPool(vPoolURI);  createdMirror.setSyncState(SynchronizationState.UNKNOWN.toString());  createdMirror.setSyncType(BlockMirror.MIRROR_SYNC_TYPE);  createdMirror.setThinlyProvisioned(volume.getThinlyProvisioned());  createdMirror.setReplicationGroupInstance(repGroupName);  _dbClient.createObject(createdMirror);  addMirrorToVolume(volume,createdMirror);  return createdMirror;}  }
class C{  public final long readLong() throws IOException {  readFully(scratch,0,SizeOf.LONG);  return Memory.peekLong(scratch,0,ByteOrder.BIG_ENDIAN);}  }
class C{  public static Completion of(String value,String message){  return new SimpleCompletion(value,message);}  }
class C{  public void startActivityFromFragment(Fragment fragment,Intent intent,int requestCode){  if (requestCode == -1) {    super.startActivityForResult(intent,-1);    return;  }  if ((requestCode & 0xffff0000) != 0) {    throw new IllegalArgumentException("Can only use lower 16 bits for requestCode");  }  super.startActivityForResult(intent,((fragment.mIndex + 1) << 16) + (requestCode & 0xffff));}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.PROPERTY_ASSIGNMENT__DECLARED_NAME:    setDeclaredName((LiteralOrComputedPropertyName)null);  return;}super.eUnset(featureID);}  }
class C{  protected void nullValue(String fieldName,PersistentResource oldValue){  if (oldValue == null) {    return;  }  String inverseField=getInverseRelationField(fieldName);  if (!inverseField.isEmpty()) {    oldValue.checkFieldAwarePermissions(UpdatePermission.class,inverseField,null,getObject());  }  this.setValueChecked(fieldName,null);}  }
class C{  public static boolean isSupportedUpgradeToMetroPointVirtualPoolChange(Volume volume,VirtualPool currentVpool,VirtualPool newVpool,DbClient dbClient,StringBuffer notSuppReasonBuff){  s_logger.info(String.format("Checking isSupportedUpgradeToMetroPointVirtualPoolChange from [%s] to [%s]...",currentVpool.getLabel(),newVpool.getLabel()));  if (isSameVirtualPool(currentVpool,newVpool,notSuppReasonBuff)) {    return false;  }  if (VirtualPool.vPoolSpecifiesRPVPlex(currentVpool) && VirtualPool.vPoolSpecifiesMetroPoint(newVpool)) {    if (null != volume.getAssociatedVolumes() && !volume.getAssociatedVolumes().isEmpty() && volume.getAssociatedVolumes().size() > 1) {      String[] include=new String[]{TYPE,VARRAYS,REF_VPOOL,MIRROR_VPOOL,HIGH_AVAILABILITY,FAST_EXPANSION,ACLS,INACTIVE,HA_CONNECTED_TO_RP,JOURNAL_SIZE};      Map<String,Change> changes=analyzeChanges(currentVpool,newVpool,include,null,null);      if (!changes.isEmpty()) {        notSuppReasonBuff.append("These target virtual pool differences are invalid: ");        fillInNotSupportedReasons(changes,notSuppReasonBuff);        return false;      }      if (currentVpool.getProtectionVarraySettings() == null && currentVpool.getProtectionVarraySettings().isEmpty()) {        notSuppReasonBuff.append(String.format("Vpool [%s] does not specify protection",currentVpool.getLabel()));        return false;      }      if (newVpool.getProtectionVarraySettings() == null && newVpool.getProtectionVarraySettings().isEmpty()) {        notSuppReasonBuff.append(String.format("Vpool [%s] does not specify protection",newVpool.getLabel()));        return false;      }      if (currentVpool.getProtectionVarraySettings().size() > 1 || newVpool.getProtectionVarraySettings().size() > 1) {        notSuppReasonBuff.append("Multiple targets not supported for upgrade to MetroPoint (for now).");        return false;      } else {        for (        Map.Entry<String,String> entry : newVpool.getProtectionVarraySettings().entrySet()) {          if (currentVpool.getProtectionVarraySettings().containsKey(entry.getKey())) {            String newSettingsId=entry.getValue();            String currentSettingsId=currentVpool.getProtectionVarraySettings().get(entry.getKey());            VpoolProtectionVarraySettings currentProtectionVarraySetting=dbClient.queryObject(VpoolProtectionVarraySettings.class,URI.create(currentSettingsId));            VpoolProtectionVarraySettings newProtectionVarraySetting=dbClient.queryObject(VpoolProtectionVarraySettings.class,URI.create(newSettingsId));            String currentTargetVpool=NullColumnValueGetter.getStringValue(currentProtectionVarraySetting.getVirtualPool());            String currentTargetJournalVarray=NullColumnValueGetter.getStringValue(currentProtectionVarraySetting.getJournalVarray());            String currentTargetJournalVpool=NullColumnValueGetter.getStringValue(currentProtectionVarraySetting.getJournalVpool());            String newTargetVpool=NullColumnValueGetter.getStringValue(newProtectionVarraySetting.getVirtualPool());            String newTargetJournalVarray=NullColumnValueGetter.getStringValue(newProtectionVarraySetting.getJournalVarray());            String newTargetJournalVpool=NullColumnValueGetter.getStringValue(newProtectionVarraySetting.getJournalVpool());            if (!currentTargetVpool.equals(newTargetVpool)) {              notSuppReasonBuff.append("Target virtual pools do not match.");              return false;            }            if (!currentTargetJournalVarray.equals(newTargetJournalVarray)) {              notSuppReasonBuff.append("Target journal virtual arrays do not match.");              return false;            }            if (!currentTargetJournalVpool.equals(newTargetJournalVpool)) {              notSuppReasonBuff.append("Target journal virtual vpools do not match.");              return false;            }          } else {            notSuppReasonBuff.append("Target virtual arrays do not match.");            return false;          }        }        String currentJournalVarray=null;        String currentJournalVpool=null;        String newJournalVarray=null;        String newJournalVpool=null;        if (VirtualPool.isRPVPlexProtectHASide(currentVpool)) {          currentJournalVarray=NullColumnValueGetter.getStringValue(currentVpool.getStandbyJournalVarray());          currentJournalVpool=NullColumnValueGetter.getStringValue(currentVpool.getStandbyJournalVpool());          newJournalVarray=NullColumnValueGetter.getStringValue(newVpool.getStandbyJournalVarray());          newJournalVpool=NullColumnValueGetter.getStringValue(newVpool.getStandbyJournalVpool());        } else {          currentJournalVarray=NullColumnValueGetter.getStringValue(currentVpool.getJournalVarray());          currentJournalVpool=NullColumnValueGetter.getStringValue(currentVpool.getJournalVpool());          newJournalVarray=NullColumnValueGetter.getStringValue(newVpool.getJournalVarray());          newJournalVpool=NullColumnValueGetter.getStringValue(newVpool.getJournalVpool());        }        if (!currentJournalVarray.equals(newJournalVarray)) {          notSuppReasonBuff.append("Source journal virtual arrays do not match.");          return false;        }        if (!currentJournalVpool.equals(newJournalVpool)) {          notSuppReasonBuff.append("Source journal virtual pools do not match.");          return false;        }      }    } else {      notSuppReasonBuff.append("RP+VPLEX Local to MetroPoint change vpool unsupported for now.");      return false;    }  } else {    notSuppReasonBuff.append("Upgrade to Metropoint operation is not supported.");    return false;  }  s_logger.info("Upgrade to Metropoint operation is supported.");  return true;}  }
class C{  public BandPassBuilder passRipple(double rippleDb){  mPassRipple=rippleDb;  return this;}  }
class C{  public void checkNode(Node node) throws TransformerException {}  }
class C{  void release(DatasourceConnection dc){  if (dc != null) {    try {      dc.getConnection().commit();      dc.getConnection().setAutoCommit(true);      dc.getConnection().setTransactionIsolation(Connection.TRANSACTION_NONE);    } catch (    SQLException e) {    }    getManager().releaseConnection(ThreadLocalPageContext.get(),dc);  }}  }
class C{  @Override public QueryKey createQueryKeyForMapKey(){  return null;}  }
class C{  protected Label readLabel(int offset,Label[] labels){  if (labels[offset] == null) {    labels[offset]=new Label();  }  return labels[offset];}  }
class C{  public ToStringBuilder append(final short value){  style.append(buffer,null,value);  return this;}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public static boolean isMemberAlive(DistributedMember mem,GemFireCacheImpl cache){  return getMembershipSet(cache).contains(mem);}  }
class C{  public SpriteSheetDrawer spriteLoopNum(int loopNum){  mSpriteSheet.spriteLoopNum=loopNum;  return this;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.CONTINUE_STATEMENT__LABEL:    setLabel((LabelledStatement)null);  return;}super.eUnset(featureID);}  }
class C{  public Delimiter(String delimiter,boolean aloneOnLine){  this.delimiter=delimiter;  this.aloneOnLine=aloneOnLine;}  }
class C{  @Override protected void queueAffectedResources(Set<URI> allRemainingURIs,IResourceDescriptions oldState,CurrentDescriptions newState,Collection<Delta> changedDeltas,Collection<Delta> allDeltas,BuildData buildData,final IProgressMonitor monitor){  final Set<URI> affectedURIs=new HashSet<>(allRemainingURIs);  super.queueAffectedResources(allRemainingURIs,oldState,newState,changedDeltas,allDeltas,buildData,monitor);  affectedURIs.removeAll(allRemainingURIs);  for (  URI currAffURI : affectedURIs) {    final IResourceDescription resDesc=this.getResourceDescription(currAffURI);    if (!N4MF_MANIFEST.equals(currAffURI.lastSegment())) {      newState.register(new DefaultResourceDescriptionDelta(resDesc,new ResourceDescriptionWithoutModuleUserData(resDesc)));    }  }}  }
class C{  private String generateFieldInfoInputs(Class<?> cls){  java.lang.reflect.Field[] fields=cls.getDeclaredFields();  StringBuilder sb=new StringBuilder();  for (int i=0; i < fields.length; i++) {    java.lang.reflect.Field f=fields[i];    Class<?> c=ClassUtils.primitiveToWrapper(f.getType());    sb.append(f.getName()).append(FIELD_SEPARATOR).append(f.getName()).append(FIELD_SEPARATOR).append(c.getSimpleName().toUpperCase()).append(RECORD_SEPARATOR);  }  return sb.substring(0,sb.length() - 1);}  }
class C{  public MoreLikeThisQueryBuilder addUnlikeItem(Item... unlikeItems){  Collections.addAll(this.unlikeItems,unlikeItems);  return this;}  }
class C{  @Inline public void addToTreadmill(Address node,boolean nursery){  if (nursery)   allocNursery.add(node); else   toSpace.add(node);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:46.814 -0500",hash_original_method="00F8174F9E89D0C972FA6D3F19742382",hash_generated_method="8188008AC9C80E87937FE73DCA905200") @Override public int describeContents(){  return 0;}  }
class C{  private void addStandbyCopyLinkSettings(ConsistencyGroupCopyUID activeProdCopy,ConsistencyGroupCopyUID standbyProdCopy) throws FunctionalAPIActionFailedException_Exception, FunctionalAPIInternalError_Exception, FunctionalAPIValidationException_Exception {  logger.info("Preparing link settings between standby production copy and remote copy after Metropoint swap production copies.");  String activeCgCopyName=functionalAPI.getGroupCopyName(activeProdCopy);  String standbyCgCopyName=functionalAPI.getGroupCopyName(standbyProdCopy);  String cgName=functionalAPI.getGroupName(activeProdCopy.getGroupUID());  ConsistencyGroupSettings groupSettings=functionalAPI.getGroupSettings(activeProdCopy.getGroupUID());  ClusterUID activeClusterId=activeProdCopy.getGlobalCopyUID().getClusterUID();  ClusterUID standbyClusterId=standbyProdCopy.getGlobalCopyUID().getClusterUID();  for (  ConsistencyGroupCopySettings copySetting : groupSettings.getGroupCopiesSettings()) {    ClusterUID copyClusterId=copySetting.getCopyUID().getGlobalCopyUID().getClusterUID();    if (copyClusterId.getId() != activeClusterId.getId() && copyClusterId.getId() != standbyClusterId.getId()) {      String targetCopyName=functionalAPI.getGroupCopyName(copySetting.getCopyUID());      ConsistencyGroupLinkSettings linkSettings=findLinkSettings(groupSettings.getActiveLinksSettings(),activeProdCopy.getGlobalCopyUID(),copySetting.getCopyUID().getGlobalCopyUID(),activeCgCopyName,targetCopyName);      if (linkSettings != null) {        logger.info(String.format("Generate new link settings between %s and %s based on existing link settings between the current production copy %s and %s.",standbyCgCopyName,targetCopyName,activeCgCopyName,targetCopyName));        ConsistencyGroupLinkUID cgLinkUID=linkSettings.getGroupLinkUID();        GlobalCopyUID standbyCopyUid=standbyProdCopy.getGlobalCopyUID();        GlobalCopyUID remoteTargetCopyUid=copySetting.getCopyUID().getGlobalCopyUID();        cgLinkUID.setFirstCopy(standbyCopyUid);        cgLinkUID.setSecondCopy(remoteTargetCopyUid);        ConsistencyGroupLinkPolicy linkPolicy=linkSettings.getLinkPolicy();        logger.info(String.format("Creating new remote copy link settings between %s and %s, for consistency group %s.",standbyCgCopyName,targetCopyName,cgName));        linkPolicy.getProtectionPolicy().setReplicatingOverWAN(true);        functionalAPI.validateAddConsistencyGroupLink(cgLinkUID,linkPolicy);        functionalAPI.addConsistencyGroupLink(cgLinkUID,linkPolicy);        break;      }    }  }}  }
class C{  protected boolean wordMatches(String text){  if (text == null) {    return false;  }  if (match(text)) {    return true;  }  String[] words=getWords(text);  for (  String word : words) {    if (match(word)) {      return true;    }  }  return false;}  }
class C{  public MyRepositoryImpl(Context context){  this.cacheDir=context.getCacheDir();  this.myCloudData=new MyCloudData();  this.myLocalData=new MyLocalData();}  }
class C{  @Override public boolean othersDeletesAreVisible(int type){  debugCodeCall("othersDeletesAreVisible",type);  return false;}  }
class C{  public static void writeShort(byte[] memory,int index,short value){  memory[index + 0]=(byte)((value >> (8 * 1)) & 0xFF);  memory[index + 1]=(byte)(value & 0xFF);}  }
class C{  public static void copyFile(File in,File out) throws IOException {  FileInputStream fis=new FileInputStream(in);  FileOutputStream fos=new FileOutputStream(out);  try {    copyStream(fis,fos);  }  finally {    fis.close();    fos.close();  }}  }
class C{  public void putAll(Map<? extends K,? extends V> m){  expire();  m_justReset=false;  super.putAll(m);}  }
class C{  @Override public String toString(){  if (getUserObject() instanceof MovieSet) {    MovieSet movieSet=(MovieSet)getUserObject();    return movieSet.getTitle();  }  return super.toString();}  }
class C{  public Result runAlgorithms(Database database){  ResultHierarchy hier=database.getHierarchy();  if (LOG.isStatistics()) {    boolean first=true;    for (Iter<Result> it=hier.iterDescendants(database); it.valid(); it.advance()) {      if (!(it.get() instanceof Index)) {        continue;      }      if (first) {        LOG.statistics("Index statistics before running algorithms:");        first=false;      }      ((Index)it.get()).logStatistics();    }  }  stepresult=new BasicResult("Algorithm Step","algorithm-step");  for (  Algorithm algorithm : algorithms) {    Thread.currentThread().setName(algorithm.toString());    Duration duration=LOG.isStatistics() ? LOG.newDuration(algorithm.getClass().getName() + ".runtime").begin() : null;    Result res=algorithm.run(database);    if (duration != null) {      LOG.statistics(duration.end());    }    if (LOG.isStatistics()) {      boolean first=true;      for (Iter<Result> it=hier.iterDescendants(database); it.valid(); it.advance()) {        if (!(it.get() instanceof Index)) {          continue;        }        if (first) {          LOG.statistics("Index statistics after running algorithm " + algorithm.toString() + ":");          first=false;        }        ((Index)it.get()).logStatistics();      }    }    if (res != null) {      hier.add(database,res);    }  }  return stepresult;}  }
class C{  public static String makeLogTag(Class cls){  return makeLogTag(cls.getSimpleName());}  }
class C{  private boolean hasAccess(StorageOSUser storageOSUser,CatalogCategory category){  log.debug("check if " + storageOSUser.getName() + " has access for "+ category.getTitle());  return hasAccess(storageOSUser,category.getAcls());}  }
class C{  private void declareWorkbenchImage(Bundle ideBundle,String symbolicName,String path,boolean shared){  URL url=FileLocator.find(ideBundle,new Path(path),null);  ImageDescriptor desc=ImageDescriptor.createFromURL(url);  getWorkbenchConfigurer().declareImage(symbolicName,desc,shared);}  }
class C{  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {  s.defaultReadObject();  undoManager=new RUndoManager(this);  getDocument().addUndoableEditListener(undoManager);  lineHighlightManager=null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void decTempQueueSize(int delta){  this.stats.incInt(eventTmpQueueSizeId,-delta);}  }
class C{  public static void releaseTempSensorManager(){  if (tempSensorManager != null) {    tempSensorManager.stopSensor();  }  tempSensorManager=null;}  }
class C{  public static void readSkel(BufferedReader reader) throws IOException {  List<String> lines=new ArrayList<String>();  StringBuilder section=new StringBuilder();  String ln;  while ((ln=reader.readLine()) != null) {    if (ln.startsWith("---")) {      lines.add(section.toString());      section.setLength(0);    } else {      section.append(ln);      section.append(NL);    }  }  if (section.length() > 0)   lines.add(section.toString());  if (lines.size() != size) {    Out.error(ErrorMessages.WRONG_SKELETON);    throw new GeneratorException();  }  line=new String[size];  for (int i=0; i < size; i++)   line[i]=lines.get(i);}  }
class C{  private void initStaticResourcesProductionFilter(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Registering static resources production Filter");  FilterRegistration.Dynamic staticResourcesProductionFilter=servletContext.addFilter("staticResourcesProductionFilter",new StaticResourcesProductionFilter());  staticResourcesProductionFilter.addMappingForUrlPatterns(disps,true,"/");  staticResourcesProductionFilter.addMappingForUrlPatterns(disps,true,"/index.html");  staticResourcesProductionFilter.addMappingForUrlPatterns(disps,true,"/assets/*");  staticResourcesProductionFilter.addMappingForUrlPatterns(disps,true,"/scripts/*");  staticResourcesProductionFilter.setAsyncSupported(true);}  }
class C{  public <E extends GenericEvent>Event waitFor(@NonNull Class<? extends E>... eventClasses) throws InterruptedException {  return waitFor(Arrays.asList(eventClasses));}  }
class C{  public int sfntVersion(){  return this.sfntVersion;}  }
class C{  public Swagger2MarkupConfigBuilder withResponseOrdering(Comparator<String> responseOrdering){  Validate.notNull(responseOrdering,"%s must not be null","responseOrdering");  config.responseOrderBy=OrderBy.CUSTOM;  config.responseOrdering=responseOrdering;  return this;}  }
class C{  @Deprecated public int _(final int index){  return addr.op(index);}  }
class C{  @SafeVarargs public static <T>PromisesArray<T> ofPromises(Promise<T>... items){  ArrayList<Promise<T>> res=new ArrayList<>();  Collections.addAll(res,items);  final Promise[] promises=res.toArray(new Promise[res.size()]);  return new PromisesArray<>((PromiseFunc<Promise<T>[]>)null);}  }
class C{  public static String toString(URL url,Charset encoding) throws IOException {  InputStream inputStream=url.openStream();  try {    return toString(inputStream,encoding);  }  finally {    inputStream.close();  }}  }
class C{  public static List<Node> parseExpression(Context context,HashSet<String> configNamespaces,String text,int lineNumberOffset,boolean emitDocInfo){  return parse(context,configNamespaces,text,lineNumberOffset,emitDocInfo,true);}  }
class C{  private int handleSingleNalUnitPacket(Buffer input,Buffer output){  byte[] bufferData=(byte[])input.getData();  int bufferDataLength=bufferData.length;  byte[] data=new byte[bufferDataLength];  System.arraycopy(bufferData,0,data,0,bufferDataLength);  output.setData(data);  output.setLength(data.length);  output.setOffset(0);  output.setTimestamp(input.getTimestamp());  output.setSequenceNumber(input.getSequenceNumber());  output.setVideoOrientation(input.getVideoOrientation());  output.setFormat(input.getFormat());  output.setFlags(input.getFlags());  return BUFFER_PROCESSED_OK;}  }
class C{  private void addDoor(Player player,String input){  Block block=player.getEyeLocation().getBlock();  Material material=block.getType();  if (material != Material.SIGN_POST && material != Material.WALL_SIGN) {    Messages.BLOCK_NOT_SIGN.send(player);    return;  }  int seconds=Utils.getNumber(player,input);  if (seconds < 0) {    Messages.BAD_SECONDS.send(player);    return;  }  int signID=editedFile.createListLocation(player,block.getLocation(),"Doors");  editedFile.getConfig().set("Doors." + signID + ".Timer",seconds);  editedFile.saveFile();  Messages.CREATED_SIGN.send(player,signID,seconds);}  }
class C{  public boolean hasFragmentBuilder(){  return builders.get() != null;}  }
class C{  public void detach(){  valid=false;}  }
class C{  public long optLong(String key){  return optLong(key,0);}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public void writeShort(int s) throws IOException {  this.writeUShort(s);}  }
class C{  public void testServiceModeUnique(){  InstanceManager.setProgrammerManager(new DebugProgrammerManager());  Programmer p=InstanceManager.getDefault(jmri.ProgrammerManager.class).getGlobalProgrammer();  Assert.assertTrue("same service mode programmer",InstanceManager.getDefault(jmri.ProgrammerManager.class).getGlobalProgrammer() == p);}  }
class C{  public void removeAllHeaders(){  clientHeaderMap.clear();}  }
class C{  public void buscarProcedimientoAvanzadaExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  BusquedasHelper.buscarProcedimientoComunLogic(mappings,(BusquedaElementosForm)form,request,response);  setReturnActionFordward(request,mappings.findForward("form_busqueda_avanzada"));}  }
class C{  private void runStorageGroupSelectionProcess(Map<String,Set<String>> groupPaths,Set<String> returnedNativeGuids,String groupName){  _log.info("Running Storage Group selection process");  if (groupPaths.size() == 0) {    _log.info("Adding volumes to given group as its first time in loop");    groupPaths.put(groupName,returnedNativeGuids);    return;  }  Iterator<Entry<String,Set<String>>> groupPathItr=groupPaths.entrySet().iterator();  while (groupPathItr.hasNext()) {    Entry<String,Set<String>> entry=groupPathItr.next();    Set<String> diff=Sets.difference(returnedNativeGuids,entry.getValue());    _log.debug("diff between returned volumes {} against existing {}",Joiner.on("\t").join(returnedNativeGuids),Joiner.on("\t").join(entry.getValue()));    _log.info("Diff {}",Joiner.on("\t").join(diff));    if (returnedNativeGuids.size() == diff.size()) {      _log.debug("Adding volumes to given group {}",groupName);      groupPaths.put(groupName,returnedNativeGuids);    } else     if (returnedNativeGuids.size() >= entry.getValue().size()) {      _log.info("Removing Storage Group {} and adding {} from existing map",entry.getKey(),groupName);      groupPaths.remove(entry.getKey());      groupPaths.put(groupName,returnedNativeGuids);    }  }}  }
class C{  @Override public void onSuccess(DLSN value){  if (value.getLogSegmentSequenceNo() != currentLogSegmentSeqNo) {    LOG.error("Ledger Seq No: {}, Expected: {}",value.getLogSegmentSequenceNo(),currentLogSegmentSeqNo);    errorsFound.set(true);  }  if (verifyEntryId && value.getEntryId() != currentEntryId) {    LOG.error("EntryId: {}, Expected: {}",value.getEntryId(),currentEntryId);    errorsFound.set(true);  }  syncLatch.countDown();}  }
class C{  public ScrubberHorizontalDrawable(Resources res,int color,float lineWidthDp,Type type){  DisplayMetrics metrics=res.getDisplayMetrics();  mState=new ScrubberHorizontalConstantState(metrics,color,lineWidthDp,type);  float lineWidth=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,lineWidthDp,metrics);  mPaint=initPaint(color,lineWidth);}  }
class C{  public MLet(URL[] urls,ClassLoader parent,URLStreamHandlerFactory factory){  this(urls,parent,factory,true);}  }
class C{  private Axis(boolean autoscaled){  axisListeners=new HashSet<AxisListener>();  this.autoscaled=autoscaled;}  }
class C{  public boolean handleRequest(MessageContext msgct){  if (msgct instanceof SOAPMessageContext) {    SOAPMessageContext smsgct=(SOAPMessageContext)msgct;    try {      SOAPMessage msg=smsgct.getMessage();      SOAPEnvelope envelope=msg.getSOAPPart().getEnvelope();      SOAPHeader header=msg.getSOAPHeader();      if (header == null)       header=envelope.addHeader();      SOAPHeaderElement accessElement=header.addHeaderElement(envelope.createName("Access","ns0",JPLAG_TYPES_NS));      SOAPElement usernameelem=accessElement.addChildElement("username");      usernameelem.addTextNode(username);      SOAPElement passwordelem=accessElement.addChildElement("password");      passwordelem.addTextNode(password);      SOAPElement compatelem=accessElement.addChildElement("compatLevel");      compatelem.addTextNode(compatibilityLevel + "");    } catch (    SOAPException x) {      System.out.println("Unable to create access SOAP header!");      x.printStackTrace();    }  }  return true;}  }
class C{  public static void clear(){  ENUM_CACHE.clear();}  }
class C{  public LofsRunner(GraphSource graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params,null);}  }
class C{  public ObjectName preRegister(MBeanServer server,ObjectName name) throws Exception {  setMBeanServer(server);  if (name == null) {    name=new ObjectName(server.getDefaultDomain() + ":" + ServiceName.MLET);  }  this.mletObjectName=name;  return this.mletObjectName;}  }
class C{  public static void deleteFiles(File file){  if (file.isDirectory()) {    if (DatabaseController.isPreference(DatabaseController.TAG_FAVORITES,file.getName())) {      DatabaseController.handlePreference(DatabaseController.TAG_FAVORITES,file.getName(),null,false);    }    for (    File f : file.listFiles()) {      deleteFiles(f);    }  }  file.delete();}  }
class C{  private static int readHeaderFromStream(final InputStream is,final byte[] imageHeaderBytes) throws IOException {  Preconditions.checkNotNull(is);  Preconditions.checkNotNull(imageHeaderBytes);  Preconditions.checkArgument(imageHeaderBytes.length >= MAX_HEADER_LENGTH);  if (is.markSupported()) {    try {      is.mark(MAX_HEADER_LENGTH);      return ByteStreams.read(is,imageHeaderBytes,0,MAX_HEADER_LENGTH);    }  finally {      is.reset();    }  } else {    return ByteStreams.read(is,imageHeaderBytes,0,MAX_HEADER_LENGTH);  }}  }
class C{  protected void login(HttpSecurity http) throws Exception {  http.formLogin().successHandler(authenticationSuccessHandler).failureHandler(authenticationFailureHandler());}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  @Override public boolean isBusy(){  return false;}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  public final int chooseLastIndex(){  int minIndex=0;  double estimated, min=Double.MAX_VALUE;  if (!m_isLeaf) {    for (int i=0; i < m_sons.length; i++) {      if (son(i) != null) {        if (Utils.grOrEq(localModel().distribution().perBag(i),m_minNumObj)) {          estimated=son(i).getSizeOfBranch();          if (Utils.sm(estimated,min)) {            min=estimated;            minIndex=i;          }        }      }    }  }  return minIndex;}  }
class C{  public static boolean checkRegion(String region){  return getRegion().equalsIgnoreCase(region);}  }
class C{  void add(int v){  if (isTOP())   return;  if ((size < CAPACITY) && !contains(v)) {    if (size == 0) {      numbers=new int[CAPACITY];    }    numbers[size]=v;    size++;  }}  }
class C{  public boolean hasValue(int index){  index*=AssetManager.STYLE_NUM_ENTRIES;  final int[] data=mData;  final int type=data[index + AssetManager.STYLE_TYPE];  return type != TypedValue.TYPE_NULL;}  }
class C{  public MonthDateFormat(TimeZone zone){  this(zone,Locale.getDefault(),1,true,false);}  }
class C{  public static SpanQuery spanNearOrderedQuery(int slop,SpanQuery... subqueries){  return spanQuery(new SpanNearQuery(subqueries,slop,true));}  }
class C{  @Override public Transferable createTransferable(Drawing drawing,java.util.List<Figure> figures,double scaleFactor) throws IOException {  return new ImageTransferable(toImage(drawing,figures,scaleFactor,true));}  }
class C{  public void commit(byte[] buf,int bufOffset,int bufLen,int timeout) throws GondolaException, InterruptedException, TimeoutException {  if (bufLen + bufOffset > buffer.length) {    throw new IllegalStateException(String.format("Command buffer is not large enough. bytes=%d + offset=%d > capacity=%d",bufLen,bufOffset,buffer.length));  }  reset();  counter=commitCounter.incrementAndGet();  commitLatency.head(counter);  System.arraycopy(buf,bufOffset,buffer,0,bufLen);  size=bufLen;  cmember.addCommand(this);  long endTs=timeout < 0 ? Long.MAX_VALUE : gondola.getClock().now() + timeout;  lock.lock();  try {    while (status == Command.STATUS_NONE && gondola.getClock().now() < endTs) {      if (timeout < 0) {        updateCond.await();      } else {        updateCond.await(timeout,TimeUnit.MILLISECONDS);      }    }    if (size != bufLen) {      logger.error("This command object is being used by another thread");    }  }  finally {    lock.unlock();  }switch (status) {case Command.STATUS_NONE:    status=Command.STATUS_TIMEOUT;  throw new TimeoutException(String.format("Timeout (%d ms) for index %d size %d",timeout,index,bufLen));case Command.STATUS_NOT_LEADER:throw new GondolaException(GondolaException.Code.NOT_LEADER,leaderId == -1 ? "unknown" : gondola.getConfig().getAddressForMember(leaderId));case Command.STATUS_SLAVE_MODE:throw new GondolaException(GondolaException.Code.SLAVE_MODE,cmember.memberId);case Command.STATUS_ERROR:throw new IllegalStateException("Error committing index " + index + ": "+ errorMessage);case Command.STATUS_OK:if (commandTracing) {logger.info("[{}-{}] committed(term={} index={} size={}) status={}",gondola.getHostId(),cmember.memberId,term,index,size,status);}break;}commitLatency.tail(counter);}  }
class C{  public void removeJobCreator(JobCreator jobCreator){  mJobCreatorHolder.removeJobCreator(jobCreator);}  }
class C{  public void endActivity(){  this.activityState=ACTIVITY_EXITING;  super.finish();}  }
class C{  final long fullyRelease(Node node){  boolean failed=true;  try {    long savedState=getState();    if (release(savedState)) {      failed=false;      return savedState;    } else {      throw new IllegalMonitorStateException();    }  }  finally {    if (failed)     node.waitStatus=Node.CANCELLED;  }}  }
class C{  public void run(){  if (running) {    Out.error(ErrorMessages.ALREADY_RUNNING);    parent.generationFinished(false);  } else {    running=true;    setPriority(MIN_PRIORITY);    try {      if (!outputDir.equals("")) {        Options.setDir(outputDir);      }      Main.generate(new File(inputFile));      Out.statistics();      parent.generationFinished(true);    } catch (    GeneratorException e) {      Out.statistics();      parent.generationFinished(false);    } finally {      running=false;    }  }}  }
class C{  public boolean start(Runnable task,long timeout){  long expire;  if (timeout < 0 || timeout > MAX_EXPIRE)   expire=MAX_EXPIRE; else   expire=CurrentTime.getCurrentTimeActual() + timeout;  ClassLoader loader=Thread.currentThread().getContextClassLoader();  boolean isPriority=false;  boolean isQueue=false;  boolean isWake=true;  return scheduleImpl(task,loader,expire,isPriority,isQueue,isWake);}  }
class C{  public static Builder builder(){  return new Builder();}  }
class C{  public DoubleSummarySetOperations(final Mode summaryMode){  summaryMode_=summaryMode;}  }
class C{  public boolean isValid(){  return (min <= max);}  }
class C{  @Override public void respond(String response){  getUserHostmask().send().ctcpResponse(response);}  }
class C{  public boolean add(int x,int y){  if (this.map.size() >= this.size) {    throw new IllegalArgumentException("Exhausted the coordinate space");  }  String key=x + "," + y;  if (this.map.containsKey(key)) {    return false;  } else {    this.map.put(key,key);    return true;  }}  }
class C{  private static String genClassID(String fileExt,int regLevel){  boolean isClsIDExist=true;  String appendix, temClsID, temClsIDKey, temFileExt;  temFileExt=fileExt.trim();  if (temFileExt.charAt(0) == '.') {    temFileExt=temFileExt.substring(1);  }  int i=1;  while ((isClsIDExist) && (i < MAX_CLSID_NUMBER)) {    appendix=Integer.toString(i);    temClsID="class" + temFileExt + appendix;    if (temClsID != null) {      temClsIDKey=getClsIDKey(temClsID,regLevel);      if (temClsIDKey != null) {        isClsIDExist=isSubKeyExist(temClsIDKey,regLevel);        if (!isClsIDExist) {          return temClsID;        }      }    }    i++;  }  return null;}  }
class C{  public static SampleFragment newInstance(){  SampleFragment f=new SampleFragment();  return f;}  }
class C{  private ActionErrors comprobarDuplicados(GestionDescripcionBI descripcionService,HttpServletRequest request,ActionErrors errors,CampoTablaVO campoTablaVO,String guid){  if (errors == null) {    errors=new ActionErrors();  }  comprobarExistenciaRegistroByKey(request,errors,ArchivoModules.DESCRIPCION_MODULE,ArchivoTables.ADCAMPOTBL_TABLE,guid,Constants.LABEL_CAMPO_TABLA,Constants.ETIQUETA_GUID);  comprobarExistenciaRegistroByValue(request,errors,ArchivoModules.DESCRIPCION_MODULE,ArchivoTables.ADCAMPOTBL_TABLE,campoTablaVO.getId(),campoTablaVO.getNombre(),Constants.LABEL_CAMPO_TABLA,Constants.ETIQUETA_NOMBRE);  comprobarExistenciaRegistroByKey(request,errors,ArchivoModules.DESCRIPCION_MODULE,ArchivoTables.ADCAMPODATO_TABLE,guid,Constants.LABEL_CAMPO_DATO,Constants.ETIQUETA_GUID);  comprobarExistenciaRegistroByValue(request,errors,ArchivoModules.DESCRIPCION_MODULE,ArchivoTables.ADCAMPODATO_TABLE,campoTablaVO.getId(),campoTablaVO.getNombre(),Constants.LABEL_CAMPO_DATO,Constants.ETIQUETA_NOMBRE);  comprobarExistenciaEtiquetaXml(request,errors,campoTablaVO.getEtiquetaXml(),campoTablaVO.getId(),Constants.ETIQUETA_ETIQUETAXML,ArchivoTables.ADCAMPOTBL_TABLE);  comprobarExistenciaEtiquetaXml(request,errors,campoTablaVO.getEtiqXmlFila(),campoTablaVO.getId(),Constants.ETIQUETA_ETIQUETAXMLFILA,ArchivoTables.ADCAMPOTBL_TABLE);  return errors;}  }
class C{  public static void registerConfig(){  Config.registerSelf(ControlThread.class);  if (!Config.isInvalid()) {    int threads=Config.parms.getInt("nt");    if (threads <= 0) {      Config.logger.log(Level.WARNING,"Number of workers (nt={0}) must be at least 1",threads);    }    int runLength=Config.parms.getInt("rl");    if (runLength < 0) {      Config.logger.log(Level.WARNING,"Runlength (rl={0}) must be at least 1 (or 0 for off)",runLength);    }    final Class<? extends ControlThread> ctClazz=Config.parms.<ControlThread>getClazz("ct");    if (ctClazz != ControlThread.class) {      Config.registerAnother(ctClazz);    }  }  WorkerThread.registerConfig();  Statistics.registerConfig();  Command.registerConfig();}  }
class C{  public Matrix4x3d rotationYXZ(double angleY,double angleX,double angleZ){  double cosY=Math.cos(angleY);  double sinY=Math.sin(angleY);  double cosX=Math.cos(angleX);  double sinX=Math.sin(angleX);  double cosZ=Math.cos(angleZ);  double sinZ=Math.sin(angleZ);  double m_sinY=-sinY;  double m_sinX=-sinX;  double m_sinZ=-sinZ;  double nm00=cosY;  double nm02=m_sinY;  double nm20=sinY;  double nm22=cosY;  double nm10=nm20 * sinX;  double nm11=cosX;  double nm12=nm22 * sinX;  m20=nm20 * cosX;  m21=m_sinX;  m22=nm22 * cosX;  m00=nm00 * cosZ + nm10 * sinZ;  m01=nm11 * sinZ;  m02=nm02 * cosZ + nm12 * sinZ;  m10=nm00 * m_sinZ + nm10 * cosZ;  m11=nm11 * cosZ;  m12=nm02 * m_sinZ + nm12 * cosZ;  m30=0.0;  m31=0.0;  m32=0.0;  properties=0;  return this;}  }
class C{  private void maybeUpdateStats(){  if (lock.tryLock()) {    try {      if ((SystemClock.uptimeMillis() - mLastRestatTime) > RESTAT_INTERVAL_MS) {        updateStats();      }    }  finally {      lock.unlock();    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  return null;}  }
class C{  public void loginStart(final String username){  if (inactive)   return;  logs.add(saveLoginStart(username));  activeLogTimer();}  }
class C{  public synchronized void clear(){  cookies.clear();}  }
class C{  public IpInterfaceRestRep update(URI id,IpInterfaceUpdateParam input){  return client.put(IpInterfaceRestRep.class,input,getIdUrl(),id);}  }
class C{  public boolean containsKey(int key){  int hash=hash(key);  int i=indexFor(hash,table.length);  IntEntry<VALUE> e=table[i];  while (e != null) {    if (e.hash == hash && key == e.key)     return true;    e=e.next;  }  return false;}  }
class C{  public boolean equals(symbol_part other){  return other != null && super.equals(other) && the_symbol().equals(other.the_symbol());}  }
class C{  public GitlabSystemHook addSystemHook(String url) throws IOException {  String tailUrl=GitlabSystemHook.URL;  return dispatch().with("url",url).to(tailUrl,GitlabSystemHook.class);}  }
class C{  public void stop(String name){  entities.get(name).stop();}  }
class C{  public ChainTourGuide playInSequence(Sequence sequence){  setSequence(sequence);  next();  return this;}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (isFirstBatchDone()) {    push(instance);    return true;  } else {    bufferInput(instance);    return false;  }}  }
class C{  public final void warn(Object message,Throwable t){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_WARN)) {    log(SimpleLog.LOG_LEVEL_WARN,message,t);  }}  }
class C{  protected PrincipalUser validateAndGetOwner(HttpServletRequest req,String ownerName){  PrincipalUser remoteUser=getRemoteUser(req);  if (ownerName == null || ownerName.isEmpty()) {    return remoteUser;  } else   if (ownerName.equalsIgnoreCase(remoteUser.getUserName())) {    return remoteUser;  } else   if (remoteUser.isPrivileged()) {    PrincipalUser owner;    owner=userService.findUserByUsername(ownerName);    if (owner == null) {      throw new WebApplicationException(ownerName + ": User does not exist.",Status.NOT_FOUND);    } else {      return owner;    }  }  throw new WebApplicationException(Status.FORBIDDEN.getReasonPhrase(),Status.FORBIDDEN);}  }
class C{  protected TraceOption_Impl(){  super();}  }
class C{  protected static String decode(final String encodedValue,final String encoding){  return UriUtils.decode(encodedValue,encoding);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  @Override public String toString(){  String s="";  for (int i=0; i < intervals.length; i++) {    s+=intervals[i].toString() + "\n";  }  return s;}  }
class C{  protected UnicodeEscapeSequenceImpl(){  super();}  }
class C{  public void spoof(Spoofs toSpoof){  enqueued.addLast(toSpoof);}  }
class C{  public static TypeReference newSuperTypeReference(int itfIndex){  itfIndex&=0xFFFF;  return new TypeReference((CLASS_EXTENDS << 24) | (itfIndex << 8));}  }
class C{  public static void putbytes2Uint8s(char[] destUint8s,byte[] srcBytes,int destOffset,int srcOffset,int count){  for (int i=0; i < count; i++) {    destUint8s[destOffset + i]=convertByte2Uint8(srcBytes[srcOffset + i]);  }}  }
class C{  public static String validateCreditCardVV(String creditCardVV,String creditCardType){  if (creditCardVV == null || creditCardVV.length() == 0 || creditCardType == null || creditCardType.length() == 0)   return "";  int length=checkNumeric(creditCardVV).length();  if (creditCardType.equals(X_C_Payment.CREDITCARDTYPE_Amex)) {    if (length == 4) {      try {        Integer.parseInt(creditCardVV);        return "";      } catch (      NumberFormatException ex) {        s_log.fine("validateCreditCardVV - " + ex);      }    }    s_log.fine("validateCreditCardVV(4) CC=" + creditCardType + ", length="+ length);    return "CreditCardVVError";  }  if (creditCardType.equals(X_C_Payment.CREDITCARDTYPE_Visa) || creditCardType.equals(X_C_Payment.CREDITCARDTYPE_MasterCard)) {    if (length == 3) {      try {        Integer.parseInt(creditCardVV);        return "";      } catch (      NumberFormatException ex) {        s_log.fine("validateCreditCardVV - " + ex);      }    }    s_log.fine("validateCreditCardVV(3) CC=" + creditCardType + ", length="+ length);    return "CreditCardVVError";  }  return "";}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.firstBarPaint=SerialUtilities.readPaint(stream);  this.lastBarPaint=SerialUtilities.readPaint(stream);  this.positiveBarPaint=SerialUtilities.readPaint(stream);  this.negativeBarPaint=SerialUtilities.readPaint(stream);}  }
class C{  @Override public boolean loadDeferred(){  return true;}  }
class C{  public long elapsed(){  return MILLISECONDS.convert(System.nanoTime() - _startTimeNanos,NANOSECONDS);}  }
class C{  Map<VolumeInfo,VPlexStorageVolumeInfo> findStorageVolumes(List<VolumeInfo> volumeInfoList,List<VPlexClusterInfo> clusterInfoList) throws VPlexApiException {  Map<VolumeInfo,VPlexStorageVolumeInfo> storageVolumeInfoMap=new HashMap<VolumeInfo,VPlexStorageVolumeInfo>();  Iterator<VolumeInfo> volumeInfoIter=volumeInfoList.iterator();  while (volumeInfoIter.hasNext()) {    boolean volumeFound=false;    VolumeInfo volumeInfo=volumeInfoIter.next();    String storageSystemNativeGuid=volumeInfo.getStorageSystemNativeGuid();    String volumeWWN=volumeInfo.getVolumeWWN().toLowerCase();    s_logger.info("Volume WWN is {}",volumeWWN);    for (    VPlexClusterInfo clusterInfo : clusterInfoList) {      if (clusterInfo.containsStorageSystem(storageSystemNativeGuid)) {        s_logger.info("Found storage system {} in cluster {}",storageSystemNativeGuid,clusterInfo.getName());        VPlexStorageVolumeInfo storageVolumeInfo=clusterInfo.getStorageVolume(volumeInfo);        if (storageVolumeInfo == null) {          s_logger.info("Storage volume with WWN {} was not found in cluster {}",volumeWWN,clusterInfo.getName());          String volumeName=volumeInfo.getVolumeName();          storageVolumeInfo=clusterInfo.getStorageVolume(volumeInfo);          if (storageVolumeInfo != null) {            s_logger.warn("The claimed storage volume {} has WWN {}",volumeName,volumeWWN);          }          continue;        }        volumeFound=true;        s_logger.info("Found storage volume {}",storageVolumeInfo.toString());        storageVolumeInfo.setClusterId(clusterInfo.getName());        storageVolumeInfoMap.put(volumeInfo,storageVolumeInfo);        break;      }    }    if (!volumeFound) {      throw VPlexApiException.exceptions.couldNotFindStorageVolumeMatchingWWNOrITL(volumeWWN,storageSystemNativeGuid);    }  }  return storageVolumeInfoMap;}  }
class C{  protected static String quoteTime(java.sql.Time x){  if (x == null) {    return "null";  }  return "Time.valueOf(\"" + x.toString() + "\")";}  }
class C{  public final void testGetQ(){  DSAPrivateKeySpec dpks=new DSAPrivateKeySpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"),new BigInteger("4"));  assertEquals(3,dpks.getQ().intValue());}  }
class C{  private void updateImage(CompoundImageView v){  if (v == mSelectedThumbnail)   return;  if (null != mSelectedThumbnail) {    mSelectedThumbnail.setChecked(false);  }  mImage.setChecked(false);  mSelectedThumbnail=v;  mSelectedThumbnail.setChecked(true);switch (mSelectedThumbnail.getId()) {case R.id.thumbnail_1:    mImage.setImageResource(R.drawable.c1);  updateCode(getString(R.string.java_code_template,"R.drawable.c1"));break;case R.id.thumbnail_2:mImage.setImageResource(R.drawable.c2);updateCode(getString(R.string.java_code_template,"R.drawable.c2"));break;case R.id.thumbnail_no_image:mImage.setImageDrawable(null);updateCode(getString(R.string.java_code_template,"null"));break;case R.id.thumbnail_from_cloud:Toast.makeText(this,R.string.loading_remote_image,Toast.LENGTH_SHORT).show();Picasso.with(this).load("https://raw.githubusercontent.com/subinkrishna/CircularImageView/master/art/cat_original.jpg").noFade().placeholder(R.drawable.placeholder).resize(mCivSize,mCivSize).memoryPolicy(MemoryPolicy.NO_CACHE).centerCrop().into(mImage);updateCode(getString(R.string.picasso_code_template));break;}}  }
class C{  public Boolean isReversePolicy(){  return reversePolicy;}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  protected static void scale(double wheelSpeeds[],double scaleFactor){  for (int i=1; i < NUMBER_OF_MOTORS; i++) {    wheelSpeeds[i]=wheelSpeeds[i] * scaleFactor;  }}  }
class C{  public FuzzyConditionBuilder prefixLength(Integer prefixLength){  this.prefixLength=prefixLength;  return this;}  }
class C{  public ChannelUpdateHandler(ImplDiscordAPI api){  super(api,true,"CHANNEL_UPDATE");}  }
class C{  public boolean requiresTunnel(){  return address.sslSocketFactory != null && proxy.type() == Proxy.Type.HTTP;}  }
class C{  public void addStateHistoryEntry(double time,double allocatedMips,double requestedMips,boolean isActive){  HostStateHistoryEntry newState=new HostStateHistoryEntry(time,allocatedMips,requestedMips,isActive);  if (!getStateHistory().isEmpty()) {    HostStateHistoryEntry previousState=getStateHistory().get(getStateHistory().size() - 1);    if (previousState.getTime() == time) {      getStateHistory().set(getStateHistory().size() - 1,newState);      return;    }  }  getStateHistory().add(newState);}  }
class C{  public boolean willHit(IDanmakuItem runningItem){  if (runningItem.getWidth() + runningItem.getCurrX() > mContainerWidth) {    return true;  }  if (runningItem.getSpeedFactor() >= mFactor) {    return false;  }  float len1=runningItem.getCurrX() + runningItem.getWidth();  float t1=len1 / (runningItem.getSpeedFactor() * DanmakuItem.sBaseSpeed);  float len2=t1 * mFactor * DanmakuItem.sBaseSpeed;  if (len2 > len1) {    return true;  } else {    return false;  }}  }
class C{  private boolean containsClass(String elementClass,String selectorClass){  if ((elementClass == null) || (selectorClass == null)) {    return false;  }  elementClass=" " + elementClass + " ";  int dotIndex=selectorClass.indexOf('.');  while (dotIndex != -1) {    String curWord=selectorClass.substring(0,dotIndex);    if (elementClass.indexOf(" " + curWord + " ") == -1) {      return false;    }    selectorClass=selectorClass.substring(dotIndex + 1);    dotIndex=selectorClass.indexOf('.');  }  return (elementClass.indexOf(" " + selectorClass + " ") != -1);}  }
class C{  public int addScatterPlot(String name,Color color,double[][] XY){  return ((Plot3DCanvas)plotCanvas).addScatterPlot(name,color,XY);}  }
class C{  protected DeterministicKeyChain(DeterministicSeed seed){  this(seed,null);}  }
class C{  public Statement copyInline(Context ctx,boolean valNeeded){  FinallyStatement s=(FinallyStatement)clone();  if (tryTemp != null) {    s.tryTemp=tryTemp.copyInline(ctx);  }  if (init != null) {    s.init=init.copyInline(ctx,valNeeded);  }  if (body != null) {    s.body=body.copyInline(ctx,valNeeded);  }  if (finalbody != null) {    s.finalbody=finalbody.copyInline(ctx,valNeeded);  }  return s;}  }
class C{  public void init(Controller controller){  super.init(controller);  display=new Display2D(800,600,this);  display.attach(polyPortrayal,"Polys");  displayFrame=display.createFrame();  controller.registerFrame(displayFrame);  displayFrame.setVisible(true);  happinessChart=new TimeSeriesChartGenerator();  happinessChart.setTitle("Percent of Happy Persons in Simulation");  happinessChart.setRangeAxisLabel("Percent Happy");  happinessChart.setDomainAxisLabel("Opportunities to Move");  JFrame chartFrame=happinessChart.createFrame(this);  chartFrame.pack();  controller.registerFrame(chartFrame);  numMovesHisto=new HistogramGenerator();  numMovesHisto.setTitle("Number of Moves People Have Made");  numMovesHisto.setDomainAxisLabel("Number of Moves");  numMovesHisto.setRangeAxisLabel("%");  JFrame histoFrame=numMovesHisto.createFrame(this);  histoFrame.pack();  controller.registerFrame(histoFrame);}  }
class C{  private void makeTail(LinkedEntry<K,V> e){  e.prv.nxt=e.nxt;  e.nxt.prv=e.prv;  LinkedEntry<K,V> header=this.header;  LinkedEntry<K,V> oldTail=header.prv;  e.nxt=header;  e.prv=oldTail;  oldTail.nxt=header.prv=e;  modCount++;}  }
class C{  public double entropySecond(){  return entropySecond;}  }
class C{  private static boolean isSixBytesSequence(byte b){  return -4 <= b && b <= -3;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:11.970 -0500",hash_original_method="E57D4562AEDEAB80F792BC05E60E369F",hash_generated_method="D002B6E4C939C115DC173C4803445A35") public static double parseDouble(String s){  s=s.trim();  int length=s.length();  if (length == 0) {    throw invalidReal(s,true);  }  char last=s.charAt(length - 1);  if (last == 'y' || last == 'N') {    return parseName(s,true);  }  if (s.indexOf("0x") != -1 || s.indexOf("0X") != -1) {    return HexStringParser.parseDouble(s);  }  StringExponentPair info=initialParse(s,length,true);  if (info.infinity || info.zero) {    return info.specialValue();  }  double result=parseDblImpl(info.s,(int)info.e);  if (Double.doubleToRawLongBits(result) == 0xffffffffffffffffL) {    throw invalidReal(s,true);  }  return info.negative ? -result : result;}  }
class C{  public static String[] splitc(String src,char delimiter){  if (src.length() == 0) {    return new String[]{EMPTY};  }  char[] srcc=src.toCharArray();  int maxparts=srcc.length + 1;  int[] start=new int[maxparts];  int[] end=new int[maxparts];  int count=0;  start[0]=0;  int s=0, e;  if (srcc[0] == delimiter) {    end[0]=0;    count++;    s=CharUtil.findFirstDiff(srcc,1,delimiter);    if (s == -1) {      return new String[]{EMPTY,EMPTY};    }    start[1]=s;  }  while (true) {    e=CharUtil.findFirstEqual(srcc,s,delimiter);    if (e == -1) {      end[count]=srcc.length;      break;    }    end[count]=e;    count++;    s=CharUtil.findFirstDiff(srcc,e,delimiter);    if (s == -1) {      start[count]=end[count]=srcc.length;      break;    }    start[count]=s;  }  count++;  String[] result=new String[count];  for (int i=0; i < count; i++) {    result[i]=src.substring(start[i],end[i]);  }  return result;}  }
class C{  static void reportTimings(CommandSource sender){  Platform platform=SpongeImpl.getGame().getPlatform();  JsonObjectBuilder builder=JSONUtil.objectBuilder().add("version",platform.getImplementation().getVersion().orElse(platform.getMinecraftVersion().getName() + "-DEV")).add("maxplayers",SpongeImpl.getGame().getServer().getMaxPlayers()).add("start",TimingsManager.timingStart / 1000).add("end",System.currentTimeMillis() / 1000).add("sampletime",(System.currentTimeMillis() - TimingsManager.timingStart) / 1000);  if (!TimingsManager.privacy) {    builder.add("server",getServerName()).add("motd",Sponge.getServer().getMotd().toPlain()).add("online-mode",Sponge.getServer().getOnlineMode()).add("icon",SpongeImpl.getServer().getServerStatusResponse().getFavicon());  }  final Runtime runtime=Runtime.getRuntime();  RuntimeMXBean runtimeBean=ManagementFactory.getRuntimeMXBean();  builder.add("system",JSONUtil.objectBuilder().add("timingcost",getCost()).add("name",System.getProperty("os.name")).add("version",System.getProperty("os.version")).add("jvmversion",System.getProperty("java.version")).add("arch",System.getProperty("os.arch")).add("maxmem",runtime.maxMemory()).add("cpu",runtime.availableProcessors()).add("runtime",ManagementFactory.getRuntimeMXBean().getUptime()).add("flags",RUNTIME_FLAG_JOINER.join(runtimeBean.getInputArguments())).add("gc",JSONUtil.mapArrayToObject(ManagementFactory.getGarbageCollectorMXBeans(),null)));  Set<BlockType> blockTypeSet=Sets.newHashSet();  Set<EntityType> entityTypeSet=Sets.newHashSet();  int size=HISTORY.size();  TimingHistory[] history=new TimingHistory[size + 1];  int i=0;  for (  TimingHistory timingHistory : HISTORY) {    blockTypeSet.addAll(timingHistory.blockTypeSet);    entityTypeSet.addAll(timingHistory.entityTypeSet);    history[i++]=timingHistory;  }  history[i]=new TimingHistory();  blockTypeSet.addAll(history[i].blockTypeSet);  entityTypeSet.addAll(history[i].entityTypeSet);  JsonObjectBuilder handlersBuilder=JSONUtil.objectBuilder();  for (  TimingIdentifier.TimingGroup group : TimingIdentifier.GROUP_MAP.values()) {    for (    TimingHandler id : group.handlers) {      if (!id.timed && !id.isSpecial()) {        continue;      }      handlersBuilder.add(id.id,JSONUtil.arrayOf(group.id,id.name));    }  }  builder.add("idmap",JSONUtil.objectBuilder().add("groups",JSONUtil.mapArrayToObject(TimingIdentifier.GROUP_MAP.values(),null)).add("handlers",handlersBuilder).add("worlds",JSONUtil.mapArrayToObject(TimingHistory.worldMap.entrySet(),null)).add("tileentity",JSONUtil.mapArrayToObject(blockTypeSet,null)).add("entity",JSONUtil.mapArrayToObject(entityTypeSet,null)));  builder.add("plugins",JSONUtil.mapArrayToObject(SpongeImpl.getGame().getPluginManager().getPlugins(),null));  builder.add("config",JSONUtil.objectBuilder().add("sponge",serializeConfigNode(SpongeImpl.getGlobalConfig().getRootNode())));  new TimingsExport(sender,builder.build(),history).start();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Node cloneNode(boolean deep){  IIOMetadataNode newNode=new IIOMetadataNode(this.nodeName);  newNode.setUserObject(getUserObject());  if (deep) {    for (IIOMetadataNode child=firstChild; child != null; child=child.nextSibling) {      newNode.appendChild(child.cloneNode(true));    }  }  return newNode;}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.viewPager=this.findView(R.id.view_pager_vp);  this.tabLayout=this.findView(R.id.tab_layout_tl);}  }
class C{  public double measureTreeSize(){  return m_NumNodes;}  }
class C{  public SwedishLightStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:16.649 -0400",hash_original_method="F60E13505FCE1E961698F4203CCAFE54",hash_generated_method="A5305ECD0684874B33102094E29FF6FD") public void disconnectPan(BluetoothAdapter adapter,BluetoothDevice device){  disconnectFromRemoteOrVerifyConnectNap(adapter,device,true);}  }
class C{  private void loadTableInfo(boolean reload){  if (m_tableAccessLevel != null && m_tableName != null && !reload)   return;  m_tableAccessLevel=new HashMap<Integer,String>(300);  m_tableName=new HashMap<String,Integer>(300);  m_viewName=new HashSet<String>(300);  m_tableIdName=new HashMap<String,String>(300);  PreparedStatement pstmt=null;  ResultSet rs=null;  String sql="SELECT AD_Table_ID, AccessLevel, TableName, IsView, " + "(SELECT ColumnName FROM AD_COLUMN WHERE AD_COLUMN.AD_TABLE_ID = AD_TABLE.AD_TABLE_ID AND AD_COLUMN.COLUMNNAME = AD_TABLE.TABLENAME || '_ID') " + "FROM AD_Table WHERE IsActive='Y'";  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    rs=pstmt.executeQuery();    while (rs.next()) {      Integer ii=new Integer(rs.getInt(1));      m_tableAccessLevel.put(ii,rs.getString(2));      String tableName=rs.getString(3);      m_tableName.put(tableName,ii);      String isView=rs.getString(4);      if ("Y".equals(isView)) {        m_viewName.add(tableName.toUpperCase());      }      String idColumn=rs.getString(5);      if (idColumn != null && idColumn.trim().length() > 0) {        m_tableIdName.put(tableName.toUpperCase(),idColumn);      }    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);  }  log.fine("#" + m_tableAccessLevel.size());}  }
class C{  synchronized public void removeByName(String name){  T item=this.getByName(name);  this.nameMap.remove(name);  if (item == null)   return;  for (  Map.Entry<String,List<T>> entry : this.items.entrySet()) {    List<T> itemList=entry.getValue();    if (itemList == null)     continue;    if (itemList.contains(item))     itemList.remove(item);  }}  }
class C{  public static Class<?> loadClassWithout(ClassLoader loader,String className) throws ClassNotFoundException {  return javax.management.loading.DefaultLoaderRepository.loadClassWithout(loader,className);}  }
class C{  @SuppressWarnings("deprecation") public int overlayCuboidBlocks(final Region region,final BaseBlock block) throws MaxChangedBlocksException {  checkNotNull(block);  return this.overlayCuboidBlocks(region,new SingleBlockPattern(block));}  }
class C{  public static Byte valueOf(String string) throws NumberFormatException {  return valueOf(parseByte(string));}  }
class C{  protected String composeFilenameTacticalGraphic(SymbolCode code,String dir){  String scheme=code.getScheme();  String category=code.getCategory();  String functionId=code.getFunctionId();  char status=SymbologyConstants.STATUS_PRESENT.equalsIgnoreCase(code.getStatus()) ? 'p' : 'a';  if (functionId == null)   functionId="------";  StringBuilder sb=new StringBuilder();  sb.append(dir).append("/").append(scheme.toLowerCase()).append('-').append(category.toLowerCase()).append(status).append(functionId.toLowerCase()).append("-----").append(PATH_SUFFIX);  return sb.toString();}  }
class C{  public String finish(){  String result;  debug("pre: finish");  result=handleError(m_DatasetProvider,m_DatasetProvider.finish());  if (result != null)   result=handleError(m_StatisticsHandler,m_StatisticsHandler.finish());  if (result != null)   log(result);  for (  LogListener l : m_LogListeners) {    m_DatasetProvider.removeLogListener(l);    m_StatisticsHandler.removeLogListener(l);    m_Evaluator.removeLogListener(l);  }  m_Stopping=false;  m_Initializing=false;  m_Running=false;  notifyExecutionStageListeners(ExecutionStageEvent.Stage.FINISH);  debug("post: finish");  return result;}  }
class C{  public static void inlineFunctionNode(final INaviView view,final INaviFunctionNode node){  Preconditions.checkNotNull(view,"IE00119: View argument can not be null");  Preconditions.checkNotNull(node,"IE00120: Node argument can not be null");  Preconditions.checkArgument(view.isLoaded(),"IE00122: View must be loaded before it can be inlined");  Preconditions.checkArgument(view.getGraph().getNodes().contains(node),"IE00123: Code node does not belong to the view");  Preconditions.checkArgument(node.getFunction().isLoaded(),"IE00124: Function must be loaded before it can be inlined");  Preconditions.checkArgument(node.getFunction().getBasicBlockCount() != 0,"IE00125: Functions with 0 blocks can not be inlined");  GroupHelpers.expandParents(node);  final INaviGroupNode parentGroup=node.getParentGroup();  final List<INaviEdge> oldIncomingEdges=node.getIncomingEdges();  view.getContent().deleteNode(node);  final Triple<CCodeNode,List<CCodeNode>,ArrayList<CCodeNode>> nodes=CInliningHelper.insertNodes(view,node.getFunction(),parentGroup);  final INaviCodeNode entryNode=nodes.first();  final ArrayList<CCodeNode> returnNodes=nodes.third();  for (  final INaviEdge incomingEdge : oldIncomingEdges) {    final EdgeType edgeType=incomingEdge.getType();    view.getContent().createEdge(incomingEdge.getSource(),entryNode,edgeType);  }  final List<INaviViewNode> graphNodes=view.getGraph().getNodes();  for (  final INaviCodeNode newNode : returnNodes) {    newNode.setX(node.getX());    newNode.setY(node.getY());    for (    final INaviInstruction instruction : newNode.getInstructions()) {      final List<IReference> references=getCodeReferences(instruction);      for (      final IReference reference : references) {        final List<INaviViewNode> targetNodes=getTargetNode(reference,graphNodes);        for (        final INaviViewNode targetNode : targetNodes) {          view.getContent().createEdge(newNode,targetNode,EdgeType.JUMP_UNCONDITIONAL);        }      }    }  }}  }
class C{  @RequestMapping(value="/test/{id}",consumes="application/json",method=RequestMethod.PUT) public BasicCase update(@PathVariable("id") String id,@RequestBody BasicCase basicCase){  return null;}  }
class C{  public FluxConcatArray<T> concatAdditionalSourceLast(Publisher<? extends T> source){  int n=array.length;  @SuppressWarnings("unchecked") Publisher<? extends T>[] newArray=new Publisher[n + 1];  System.arraycopy(array,0,newArray,0,n);  newArray[n]=source;  return new FluxConcatArray<>(delayError,newArray);}  }
class C{  public static boolean isSameDay(Calendar cal1,Calendar cal2){  if (cal1 == null || cal2 == null) {    throw new IllegalArgumentException("The dates must not be null");  }  return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));}  }
class C{  public void addActionItem(ActionItem action){  actionList.add(action);}  }
class C{  public CSVReader(Reader reader,char separator,char quotechar,char escape,int line){  this(reader,separator,quotechar,escape,line,CSVParser.DEFAULT_STRICT_QUOTES);}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void addRule(R rule,boolean include){  if (rules == null) {    rules=new ArrayList<>();  }  if (include) {    includesCount++;  } else {    excludesCount++;  }  Rule<R> newRule=new Rule<>(rule,include);  if (rules.contains(newRule)) {    return;  }  rules.add(newRule);}  }
class C{  public PathElement(String property){  super();  if (property.indexOf("[") > -1) {    m_Name=property.replaceAll("\\[.*$","");    m_Index=Integer.parseInt(property.replaceAll(".*\\[","").replaceAll("\\].*",""));  } else {    m_Name=property;    m_Index=-1;  }}  }
class C{  @Subscribe public void onEvent(onStopTracking event){  Log.d(TAG,"Received StopTrackingEvent event");  stopTracking(RadioBeacon.SHUTDOWN_REASON_NORMAL);  mSession=RadioBeacon.SESSION_NOT_TRACKING;  releasePowerLock();}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public final E remove(int index){  throw new UnsupportedOperationException();}  }
class C{  public void updateStorageUnitStatus(StorageUnitEntity storageUnitEntity,String storageUnitStatus,String reason){  StorageUnitStatusEntity storageUnitStatusEntity=storageUnitStatusDaoHelper.getStorageUnitStatusEntity(storageUnitStatus);  updateStorageUnitStatus(storageUnitEntity,storageUnitStatusEntity,reason);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeinsertbeforenodeancestor.class,args);}  }
class C{  public Y ge(String value){  if (value == null || value.trim().length() == 0) {    return super.ge((Integer)null);  } else {    return super.ge(Integer.parseInt(value.trim()));  }}  }
class C{  public void writeFile(String directoryName) throws CannotCompileException, IOException {  DataOutputStream out=makeFileOutput(directoryName);  try {    toBytecode(out);  }  finally {    out.close();  }}  }
class C{  protected MouseDragGestureRecognizer(DragSource ds,Component c,int act){  this(ds,c,act,null);}  }
class C{  public long create(Answer answer){  return mDaoSession.getAnswerDao().insert(answer);}  }
class C{  public SearchSourceBuilder trackScores(boolean trackScores){  this.trackScores=trackScores;  return this;}  }
class C{  public MoreLikeThisQueryBuilder minDocFreq(int minDocFreq){  this.minDocFreq=minDocFreq;  return this;}  }
class C{  public SolrField(final String name,final String type) throws NullPointerException {  if (name == null) {    throw new NullPointerException("Cannot create a Solr field with a " + "null name.");  }  if (type == null) {    throw new NullPointerException("Cannot create a Solr field with a " + "null type.");  }  this.name=name;  this.type=type;}  }
class C{  public boolean isPause(){  return pause;}  }
class C{  public SequenceBO(KLVPacket.Header header,ByteProvider byteProvider,Map<Integer,MXFUID> localTagToUIDMap,IMFErrorLogger imfErrorLogger) throws IOException {  super(header);  long numBytesToRead=this.header.getVSize();  StructuralMetadata.populate(this,byteProvider,numBytesToRead,localTagToUIDMap);  if (this.instance_uid == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,Sequence.ERROR_DESCRIPTION_PREFIX + "instance_uid is null");  }  if (this.structural_components == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,Sequence.ERROR_DESCRIPTION_PREFIX + "structural_components is null");  } else {    for (    StrongRef strongRef : this.structural_components.getEntries()) {      structuralComponentInstanceUIDs.add(strongRef.getInstanceUID());    }  }  if (this.data_definition == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,Sequence.ERROR_DESCRIPTION_PREFIX + "data_definition is null");  }  if (this.duration == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,Sequence.ERROR_DESCRIPTION_PREFIX + "duration is null");  }}  }
class C{  protected void write(List<OFMessage> msglist){  if (channel == null || !isConnected())   return;  this.channel.write(msglist);}  }
class C{  public FXG2SWFTranscoder newInstance(){  return new FXG2SWFTranscoder();}  }
class C{  protected void addNumericTrainClass(double classValue,double weight){  if (classValue > m_MaxTarget) {    m_MaxTarget=classValue;  }  if (classValue < m_MinTarget) {    m_MinTarget=classValue;  }  if (m_TrainClassVals == null) {    m_TrainClassVals=new double[100];    m_TrainClassWeights=new double[100];  }  if (m_NumTrainClassVals == m_TrainClassVals.length) {    double[] temp=new double[m_TrainClassVals.length * 2];    System.arraycopy(m_TrainClassVals,0,temp,0,m_TrainClassVals.length);    m_TrainClassVals=temp;    temp=new double[m_TrainClassWeights.length * 2];    System.arraycopy(m_TrainClassWeights,0,temp,0,m_TrainClassWeights.length);    m_TrainClassWeights=temp;  }  m_TrainClassVals[m_NumTrainClassVals]=classValue;  m_TrainClassWeights[m_NumTrainClassVals]=weight;  m_NumTrainClassVals++;}  }
class C{  public static void shakeY(View v){  shakeY(v,10,1000,5.0f);}  }
class C{  public String dump(X509Ext extension) throws Asn1Exception, IOException {  try {    ASN1OctetString octetString=ASN1OctetString.getInstance(extension.getValue());    byte[] octets=octetString.getOctets();    return dump(octets);  } catch (  IOException ex) {    throw new Asn1Exception(res.getString("NoAsn1DumpObject.exception.message"),ex);  }}  }
class C{  public static synchronized void initializeJavaRosa(IPropertyManager mgr){  if (!isJavaRosaInitialized) {    PrototypeManager.registerPrototypes(SERIALIABLE_CLASSES);    new XFormsModule().registerModule();    isJavaRosaInitialized=true;  }  org.javarosa.core.services.PropertyManager.setPropertyManager(mgr);}  }
class C{  public VerletParticle3D(ReadonlyVec3D v){  this(v.x(),v.y(),v.z(),1);}  }
class C{  private void createContextMenu(){  contextMenu=new JPopupMenu();  contextMenu.add(actionManager.getNewNetworkAction());  JMenu newGaugeSubMenu=new JMenu("New Plot");  for (  Action action : actionManager.getPlotActions()) {    newGaugeSubMenu.add(action);  }  contextMenu.add(newGaugeSubMenu);  JMenu newWorldSubMenu=new JMenu("New World");  for (  Action action : actionManager.getNewWorldActions()) {    newWorldSubMenu.add(action);  }  contextMenu.add(newWorldSubMenu);  contextMenu.addSeparator();  contextMenu.add(actionManager.getNewDocViewerAction());  contextMenu.add(actionManager.getNewConsoleAction());}  }
class C{  public void recompose(StylesheetRoot root){  root.recomposeKeys(this);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int i=0;  int rows, cols;  double p1=0, p2=0, p3=0, p4=0;  int a;  int numCols;  int numRows;  int progress;  double halfPI=Math.PI / 2;  double outputVal;  double smallVal=-9999999;  double largeVal=9999999;  int row, col;  String modelType="sigmoidal";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      if (args[i].toLowerCase().contains("linear")) {        modelType="linear";      } else {        modelType="sigmoidal";      }    } else     if (i == 3) {      if (args[i].toLowerCase().equals("not specified")) {        p1=smallVal;      } else {        p1=Double.parseDouble(args[i]);      }    } else     if (i == 4) {      if (args[i].toLowerCase().equals("not specified")) {        p2=smallVal;      } else {        p2=Double.parseDouble(args[i]);      }    } else     if (i == 5) {      if (args[i].toLowerCase().equals("not specified")) {        p3=largeVal;      } else {        p3=Double.parseDouble(args[i]);      }    } else     if (i == 6) {      if (args[i].toLowerCase().equals("not specified")) {        p4=largeVal;      } else {        p4=Double.parseDouble(args[i]);      }    }  }  if (inputHeader == null || outputHeader == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if ((p1 == smallVal && p2 != smallVal) || (p1 != smallVal && p2 == smallVal) || (p3 == largeVal && p4 != largeVal)|| (p3 != largeVal && p4 == largeVal)) {    showFeedback("Sigmoid parameters not set properly");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setPreferredPalette("spectrum.pal");    double range1=p2 - p1;    double range2=p4 - p3;    double[] data=null;    if (modelType.equals("sigmoidal")) {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            if (data[col] <= p1) {              outputVal=0;            } else             if (data[col] > p1 && data[col] < p2) {              outputVal=1 - Math.cos(((data[col] - p1)) / range1 * halfPI) * Math.cos(((data[col] - p1)) / range1 * halfPI);            } else             if (data[col] >= p2 && data[col] <= p3) {              outputVal=1;            } else             if (data[col] > p3 && data[col] < p4) {              outputVal=(Math.cos((data[col] - p3) / range2 * halfPI) * Math.cos((data[col] - p3) / range2 * halfPI));            } else {              outputVal=0;            }            output.setValue(row,col,outputVal);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            if (data[col] <= p1) {              outputVal=0;            } else             if (data[col] > p1 && data[col] < p2) {              outputVal=(data[col] - p1) / range1;            } else             if (data[col] >= p2 && data[col] <= p3) {              outputVal=1;            } else             if (data[col] > p3 && data[col] < p4) {              outputVal=1 - (data[col] - p3) / range2;            } else {              outputVal=0;            }            output.setValue(row,col,outputVal);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    image.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public ApprovalDialog(Frame owner,boolean modal){  super(owner,modal);}  }
class C{  public Logo(File file,ImageType type) throws IOException {  super(file,type);}  }
class C{  public boolean fastForward(){  assert originalCount > 0;  assert countDown.get() >= 0;  return countDown.getAndSet(0) > 0;}  }
class C{  @SuppressWarnings("unused") public StreamingViewAsList(FlinkRunner runner,View.AsList<T> transform){}  }
class C{  private GridUriDeploymentJarVerifier(){}  }
class C{  public SearchSourceBuilder fetchSource(@Nullable FetchSourceContext fetchSourceContext){  this.fetchSourceContext=fetchSourceContext;  return this;}  }
class C{  public CommitReplyException(String s,Set exceptions){  super(s);  this.exceptions=exceptions;}  }
class C{  synchronized void openInformSocketIfNeeded() throws SocketException {  if (informSession == null) {    informSession=new SnmpSession(this);    if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {      SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,"openInformSocketIfNeeded","to send inform requests and receive inform responses");    }  }}  }
class C{  final public boolean isMinus(){  return false;}  }
class C{  public IconicsDrawable iconOffsetYPx(int iconOffsetY){  this.mIconOffsetY=iconOffsetY;  return this;}  }
class C{  @Override public String toString(){  return "ofmsg" + ":v=" + U8.f(this.getVersion()) + ";t="+ this.getType()+ ";l="+ this.getLengthU()+ ";x="+ U32.f(this.getXid());}  }
class C{  public void exportSymbols(String[] exportNames,Symbol[] symbols){  if (exportedSymbols == null) {    exportedSymbols=new ArrayList();  }  for (int i=0; i < exportNames.length && i < symbols.length; i++) {    exportedSymbols.add(new ExportedSymbol(symbols[i],exportNames[i]));  }}  }
class C{  public GPUImageCrosshatchFilter(){  this(0.03f,0.003f);}  }
class C{  public synchronized int lastIndexOf(Object elem,int index){  if (index >= elementCount) {    throw new IndexOutOfBoundsException(index + " >= " + elementCount);  }  if (elem == null) {    for (int i=index; i >= 0; i--)     if (elementData[i] == null)     return i;  } else {    for (int i=index; i >= 0; i--)     if (elem.equals(elementData[i]))     return i;  }  return -1;}  }
class C{  public PublicKey engineLookupAndResolvePublicKey(Element element,String baseURI,StorageResolver storage) throws KeyResolverException {  return null;}  }
class C{  public boolean openBluetooth(){  if (!isAvailable()) {    return false;  }  return mBluetoothAdapter.enable();}  }
class C{  public final TestSubscriber assertSubscribed(){  String prefix="";  if (done.getCount() != 0) {    prefix="Subscriber still running! ";  }  if (subscription.get() == null) {    fail(prefix,"Not subscribed!",errors);  }  return this;}  }
class C{  public static void fill(long[] a,long val){  for (int i=0, len=a.length; i < len; i++)   a[i]=val;}  }
class C{  public IndTestFisherZRecursive(ICovarianceMatrix corrMatrix,double alpha){  this.covMatrix=corrMatrix;  this._covMatrix=corrMatrix.getMatrix();  this.variables=Collections.unmodifiableList(corrMatrix.getVariables());  this.indexMap=indexMap(variables);  this.nameMap=mapNames(variables);  setAlpha(alpha);  this.recursivePartialCorrelation=new RecursivePartialCorrelation(variables,_covMatrix);}  }
class C{  public static String encodeBytes(byte[] source){  return encodeBytes(source,0,source.length,NO_OPTIONS);}  }
class C{  public void loadCompleted(){  playPauseButton.setVisibility(View.VISIBLE);  previousButton.setVisibility(View.VISIBLE);  nextButton.setVisibility(View.VISIBLE);  loadingBar.setVisibility(View.INVISIBLE);}  }
class C{  public static boolean containsBackRef(String to){  Matcher backRefMatcher=backRefPattern.matcher(to);  return backRefMatcher.find();}  }
class C{  public DateTime toDateTime(DateTimeZone zone){  zone=DateTimeUtils.getZone(zone);  if (getZone() == zone) {    return this;  }  return super.toDateTime(zone);}  }
class C{  public boolean isAssignableFrom(JClass cl){  return cl.isAssignableTo(_class);}  }
class C{  public static Map<String,Object> alwaysDeclineProcessor(DispatchContext dctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=ServiceUtil.returnSuccess();  BigDecimal processAmount=(BigDecimal)context.get("processAmount");  Debug.logInfo("Test Processor Declining Credit Card",module);  String refNum=UtilDateTime.nowAsString();  result.put("authResult",Boolean.FALSE);  result.put("processAmount",processAmount);  result.put("authRefNum",refNum);  result.put("authAltRefNum",refNum);  result.put("authFlag","D");  result.put("authMessage",UtilProperties.getMessage(resource,"AccountingPaymentTestProcessorDeclined",locale));  return result;}  }
class C{  @Override public void validate(final Cookie cookie,final CookieOrigin origin) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (origin == null) {    throw new IllegalArgumentException("Cookie origin may not be null");  }  if (cookie instanceof Cookie2) {    final Cookie2 cookie2=(Cookie2)cookie;    final int port=origin.getPort();    if (cookie2.isPortAttributeSpecified()) {      if (!portMatch(port,cookie2.getPorts())) {        throw new MalformedCookieException("Port attribute violates RFC 2965: " + "Request port not found in cookie's port list.");      }    }  }}  }
class C{  public DiffusionModel(Parameter diffusionRateParameter,Parameter biasParameter){  super(DIFFUSION_PROCESS);  this.diffusionRateParameter=diffusionRateParameter;  this.biasParameter=biasParameter;  addVariable(diffusionRateParameter);  addVariable(biasParameter);  diffusionRateParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));}  }
class C{  public static void registerEntity(EntityDefinition entityDef){  registerEntity(entityDef.getService(),entityDef);}  }
class C{  public boolean isAcceptDirectDeposit(){  Object oo=get_Value(COLUMNNAME_AcceptDirectDeposit);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String globalInfo(){  return "Merges two values of a nominal attribute into one value.";}  }
class C{  public StorageEntity createStorageEntity(String storageName,String storagePlatformCode,List<Attribute> attributes){  StoragePlatformEntity storagePlatformEntity=storagePlatformDao.getStoragePlatformByName(storagePlatformCode);  if (storagePlatformEntity == null) {    storagePlatformEntity=storagePlatformDaoTestHelper.createStoragePlatformEntity(storagePlatformCode);  }  return createStorageEntity(storageName,storagePlatformEntity,attributes);}  }
class C{  protected final void LONG_SHL(Instruction s,RegisterOperand def,RegisterOperand left,RegisterOperand right){  if (VM.VerifyAssertions)   VM._assert(VM.BuildFor32Addr);  Register defHigh=def.getRegister();  Register defLow=regpool.getSecondReg(defHigh);  Register leftHigh=left.getRegister();  Register leftLow=regpool.getSecondReg(leftHigh);  Register shift=right.getRegister();  Register t0=regpool.getInteger();  Register t31=regpool.getInteger();  EMIT(MIR_Binary.create(PPC_SUBFIC,I(t31),I(shift),IC(32)));  EMIT(MIR_Binary.create(PPC_SLW,I(defHigh),I(leftHigh),I(shift)));  EMIT(MIR_Binary.create(PPC_SRW,I(t0),I(leftLow),I(t31)));  EMIT(MIR_Binary.create(PPC_OR,I(defHigh),I(defHigh),I(t0)));  EMIT(MIR_Binary.create(PPC_ADDI,I(t31),I(shift),IC(-32)));  EMIT(MIR_Binary.create(PPC_SLW,I(t0),I(leftLow),I(t31)));  EMIT(MIR_Binary.create(PPC_OR,I(defHigh),I(defHigh),I(t0)));  EMIT(MIR_Binary.create(PPC_SLW,I(defLow),I(leftLow),I(shift)));}  }
class C{  public void revokeCertificate(X509Certificate certificate) throws Exception {  try (VMCAServerContext context=getServerContext()){    this.revokeCertificate(context,certificate);  } }  }
class C{  private void updateSize(final Dimension dim){  setMaximumSize(dim);  setMinimumSize(new Dimension(0,dim.height));  setPreferredSize(dim);  setSize(getWidth(),dim.height);  controller.setNeedsRefresh(true);  revalidate();}  }
class C{  public GatewayResponse sendRequest(GatewayRequest request) throws Exception {  String serverurl=request.getUrl();  GatewayResponse response=null;  InputStream in=null;  HttpURLConnection connection=null;  try {    URL u=new URL(serverurl);    connection=(HttpURLConnection)(u.openConnection());    connection.setDoOutput(true);    connection.setDoInput(true);    connection.setRequestMethod("POST");    connection.setConnectTimeout(timeout * 1000);    OutputStream out=connection.getOutputStream();    Writer wout=new OutputStreamWriter(out);    wout.write(request.toXml());    wout.flush();    wout.close();    in=connection.getInputStream();    response=new GatewayResponse(in,request);    return response;  } catch (  Exception e) {    Debug.logError(e,e.getMessage(),module);    throw e;  } finally {    if (in != null)     in.close();    if (connection != null)     connection.disconnect();  }}  }
class C{  public boolean isWrapperFor(Class<?> iface) throws SQLException {  checkClosed();  boolean isInstance=iface.isInstance(this);  if (isInstance) {    return true;  }  return (iface.getName().equals("com.mysql.jdbc.Connection") || iface.getName().equals("com.mysql.jdbc.ConnectionProperties"));}  }
class C{  public void processComment(Token<HtmlTokenType> commentToken){  String text=commentToken.text;  if (text.startsWith("<!--") && text.endsWith("-->")) {    text=text.substring("<!--".length(),text.lastIndexOf("--"));  }  commentToken=Token.instance(text,commentToken.type,commentToken.pos);  if (text.contains("--")) {    mq.addMessage(MessageType.INVALID_HTML_COMMENT,commentToken.pos);  }  char[] chars;  int n=text.length();  if (n <= charBuf.length) {    chars=charBuf;    text.getChars(0,n,chars,0);  } else {    chars=text.toCharArray();  }  builder.setTokenContext(commentToken,commentToken);  try {    builder.comment(chars,0,n);  } catch (  SAXException ex) {    throw new RuntimeException(ex);  }}  }
class C{  public boolean isAllowNonSerializable(){  return _isAllowNonSerializable;}  }
class C{  private void startReader(ConnectionTable connTable){  Assert.assertTrue(!this.isRunning);  stopped=false;  this.isRunning=true;  connTable.executeCommand(this);}  }
class C{  static String escape(String s){  String json=new JsonStringWriter().value(s).write();  return json.substring(1,json.length() - 1);}  }
class C{  public MediaSize(int x,int y,int units){  super(x,y,units);  if (x > y) {    throw new IllegalArgumentException("X dimension > Y dimension");  }  sizeVector.add(this);}  }
class C{  @Override protected void onStartUp(){  controller.startApp(this);}  }
class C{  public static String unescapeJavaScript(String str){  return unescapeJava(str);}  }
class C{  protected void StringExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  appendOp(2,OpCodes.OP_STRING);  Expr();  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);}  }
class C{  public void createSubUsageScenario03() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.daysToMillis(6.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO03_PERUNIT_DAY",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_DAY_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO03_PERUNIT_DAY",serviceDetails,basicSetup.getCustomerUser1(),role);  long usageEndTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.daysToMillis(5);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO03_PERUNIT_DAY",subDetails);}  }
class C{  public static IMultiPoint[] randomPoints(int n,int d){  IMultiPoint points[]=new IMultiPoint[n];  for (int i=0; i < n; i++) {    StringBuilder sb=new StringBuilder();    for (int j=0; j < d; j++) {      sb.append(rGen.nextDouble());      if (j < d - 1) {        sb.append(",");      }    }    points[i]=new Hyperpoint(sb.toString());  }  return points;}  }
class C{  public double num(){  return m_val;}  }
class C{  @Override public void didBeginDownload(String url,long startTime){}  }
class C{  @Override public void onCameraChange(CameraPosition cameraPosition){  WritableMap event=Arguments.createMap();  WritableMap data=Arguments.createMap();  data.putDouble("latitude",cameraPosition.target.latitude);  data.putDouble("longitude",cameraPosition.target.longitude);  data.putDouble("zoom",cameraPosition.zoom);  event.putString("event","didChangeCameraPosition");  event.putMap("data",data);  reactContext.getJSModule(RCTEventEmitter.class).receiveEvent(mapView.getId(),"topChange",event);}  }
class C{  public static Range<BigInteger> valueOfBigInteger(String str){  return Range.valueOf(str,null);}  }
class C{  public boolean removeChild(V orphan){  return removeVertex(orphan);}  }
class C{  public List<T> retriveKSmallestElements(){  @SuppressWarnings("unchecked") T[] array=(T[])new Object[kSmallestElements.size()];  for (int i=array.length - 1; i >= 0; i--) {    array[i]=kSmallestElements.poll().element;  }  return Arrays.asList(array);}  }
class C{  protected void validateWorkflowXmlLocation(String workflowXmlLocationString){  if (StringUtils.isBlank(workflowXmlLocationString)) {    throw new IllegalArgumentException("Workflow XML location must be specified.");  }}  }
class C{  public Matrix4(Matrix4 matrix){  this.set(matrix);}  }
class C{  @Override public byte[] appExecuteUnordered(byte[] command,MessageContext msgCtx){  iterations++;  try {    System.out.println("(" + id + ")[server] ("+ iterations+ " / "+ msgCtx.getConsensusId()+ ") Current value: "+ value);    ByteArrayOutputStream out=new ByteArrayOutputStream(4);    new DataOutputStream(out).writeInt(value);    return out.toByteArray();  } catch (  IOException ex) {    System.err.println("Never happens!");    return new byte[0];  }}  }
class C{  public void unblockAll(){  if (config.isUseNetworkEmulator()) {    networkEmulatorHandler.unblockAll();    LOGGER.info("Unblock all network from {}",address);  } else {    LOGGER.warn("Noop on 'unblockAll()' since network emulator is disabled");  }}  }
class C{  public void requestTopDownLeftRightResend(ImageConsumer ic){  if (proxies != null) {    ImageFilter imgf=(ImageFilter)proxies.get(ic);    if (imgf != null) {      imgf.resendTopDownLeftRight(src);    }  }}  }
class C{  public static void error(Object message){  ri.error(message);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void putBySubstitute(double d) throws Exception {  MyHeapElement head=get();  put(d);  if (head.distance == m_heap[1].distance) {    putKthNearest(head.distance);  } else   if (head.distance > m_heap[1].distance) {    m_KthNearest=null;    m_KthNearestSize=0;    initSize=10;  } else   if (head.distance < m_heap[1].distance) {    throw new Exception("The substituted element is greater than the " + "head element. put() should have been called " + "in place of putBySubstitute()");  }}  }
class C{  public boolean isEOM(){  return (flags & FLAG_EOM) != 0;}  }
class C{  @Override public void close() throws IOException {  super.close();  if (rs != null) {    rs.close();  }}  }
class C{  static List<TaskActivity> splitOnBounds(List<TaskActivity> activities,Date frameStartDate,Date frameEndDate){  Preconditions.checkArgument(frameEndDate.compareTo(frameStartDate) >= 0,String.format("Invalid frame: start=%s end=%s",frameStartDate,frameEndDate));  List<TaskActivity> result=Lists.newArrayList();  Deque<TaskActivity> queue=new LinkedList<>(activities);  while (!queue.isEmpty()) {    TaskActivity head=queue.pollFirst();    if (head.getStart().compareTo(frameStartDate) < 0 && head.getEnd().compareTo(frameStartDate) > 0) {      TaskActivity beforeViewport=new TaskActivityPart(head,head.getStart(),frameStartDate);      TaskActivity remaining=new TaskActivityPart(head,frameStartDate,head.getEnd());      result.add(beforeViewport);      queue.addFirst(remaining);      continue;    }    if (head.getStart().compareTo(frameEndDate) < 0 && head.getEnd().compareTo(frameEndDate) > 0) {      TaskActivity insideViewport=new TaskActivityPart(head,head.getStart(),frameEndDate);      TaskActivity remaining=new TaskActivityPart(head,frameEndDate,head.getEnd());      result.add(insideViewport);      queue.addFirst(remaining);      continue;    }    result.add(head);  }  return result;}  }
class C{  public static boolean isPackage(int accflags){  return (accflags & (PROTECTED | PUBLIC | PRIVATE)) == 0;}  }
class C{  public MockMessage(final int customField){  super(TYPE);  this.customField=customField;}  }
class C{  void clear(){  if (mViewTypeCount == 1) {    final ArrayList<View> scrap=mCurrentScrap;    final int scrapCount=scrap.size();    for (int i=0; i < scrapCount; i++) {      removeDetachedView(scrap.remove(scrapCount - 1 - i),false);    }  } else {    final int typeCount=mViewTypeCount;    for (int i=0; i < typeCount; i++) {      final ArrayList<View> scrap=mScrapViews[i];      final int scrapCount=scrap.size();      for (int j=0; j < scrapCount; j++) {        removeDetachedView(scrap.remove(scrapCount - 1 - j),false);      }    }  }  if (mTransientStateViews != null) {    mTransientStateViews.clear();  }}  }
class C{  public GsonBuilder addSerializationExclusionStrategy(ExclusionStrategy strategy){  excluder=excluder.withExclusionStrategy(strategy,true,false);  return this;}  }
class C{  protected void _finishToken() throws IOException, JsonParseException {  _tokenIncomplete=false;  int tb=_typeByte;  int type=((tb >> 5) & 0x7);  if (type == 1) {    _finishNumberToken(tb);    return;  }  if (type <= 3) {    _decodeShortAsciiValue(1 + (tb & 0x3F));    return;  }  if (type <= 5) {    _decodeShortUnicodeValue(2 + (tb & 0x3F));    return;  }  if (type == 7) {    tb&=0x1F;switch (tb >> 2) {case 0:      _decodeLongAscii();    return;case 1:  _decodeLongUnicode();return;case 2:_binaryValue=_read7BitBinaryWithLength();return;case 7:_finishRawBinary();return;}}_throwInternal();}  }
class C{  public PutIndexTemplateRequestBuilder addMapping(String type,Object... source){  request.mapping(type,source);  return this;}  }
class C{  public void respond(ResponseCode code,String payload,int contentFormat){  Response response=new Response(code);  response.setPayload(payload);  response.getOptions().setContentFormat(contentFormat);  respond(response);}  }
class C{  @Ignore @Test public void testIsReleaseAlreadyPersisted(){  final SignatureLibrary testLibrary=SignatureLibrary.PRINTS;  final String testVersion="1.0";  assertFalse(dao.isReleaseAlreadyPersisted(testLibrary,testVersion));  SignatureLibraryRelease sigLib1=new SignatureLibraryRelease(testLibrary,testVersion,createSignature());  dao.insert(sigLib1);  assertTrue(dao.isReleaseAlreadyPersisted(testLibrary,testVersion));}  }
class C{  public void sign(PrivateKey key,String algorithm) throws CRLException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException {  sign(key,algorithm,null);}  }
class C{  public static ErThrowable formThrowable(Throwable tw){  if (tw == null) {    return null;  }  ErThrowable ert=new ErThrowable();  ert.setDetailMessage(tw.getMessage());  StackTraceElement[] stackTraceElements=tw.getStackTrace();  ErStackTraceElement[] erStackTraceElements=new ErStackTraceElement[tw.getStackTrace().length];  for (int i=0; i < stackTraceElements.length; i++) {    erStackTraceElements[i]=ErStackTraceElement.fromStackTraceElement(stackTraceElements[i]);  }  ert.setStackTraceElements(erStackTraceElements);  return ert;}  }
class C{  public void addOfflineProject(final IProject project){  Check.notNull(project,"project");  log.debug(MessageFormat.format("Adding project {0} for offline repository",project.getName()));  waitForManagerStartup();  try {    project.setPersistentProperty(REPOSITORY_STATUS_KEY,REPOSITORY_STATUS_OFFLINE_VALUE);  } catch (  final CoreException e) {    log.error(MessageFormat.format("Could not set offline status for project {0}",project.getName()),e);  }synchronized (projectDataLock) {    ProjectRepositoryData projectData=projectDataMap.get(project);    if (projectData != null) {      log.error(MessageFormat.format("Project Manager already contains project {0} (when adding)",project.getName()));      CodeMarkerDispatch.dispatch(FINISH_PROJECT_ADDITION);      return;    }    projectData=new ProjectRepositoryData();    projectData.setStatus(ProjectRepositoryStatus.OFFLINE);    projectDataMap.put(project,projectData);  }  log.info(MessageFormat.format("Project {0} is now managed by TFS (but offline)",project.getName()));  CodeMarkerDispatch.dispatch(FINISH_PROJECT_ADDITION);}  }
class C{  @Override protected void doPrintHeader(){  if (m_Header.classAttribute().isNominal()) {    if (m_OutputDistribution) {      append("inst#" + m_Delimiter + "actual"+ m_Delimiter+ "predicted"+ m_Delimiter+ "error"+ m_Delimiter+ "distribution");      for (int i=1; i < m_Header.classAttribute().numValues(); i++) {        append(m_Delimiter);      }    } else {      append("inst#" + m_Delimiter + "actual"+ m_Delimiter+ "predicted"+ m_Delimiter+ "error"+ m_Delimiter+ "prediction");    }  } else {    append("inst#" + m_Delimiter + "actual"+ m_Delimiter+ "predicted"+ m_Delimiter+ "error");  }  if (m_Attributes != null) {    append(m_Delimiter);    boolean first=true;    for (int i=0; i < m_Header.numAttributes(); i++) {      if (i == m_Header.classIndex()) {        continue;      }      if (m_Attributes.isInRange(i)) {        if (!first) {          append(m_Delimiter);        }        append(m_Header.attribute(i).name());        first=false;      }    }  }  append("\n");}  }
class C{  protected void initializeWorld(){  this.world.setGravity(World.ZERO_GRAVITY);  SimulationBody body1=new SimulationBody(Color.CYAN);{    Convex c=Geometry.createSquare(1.0);    BodyFixture bf=new BodyFixture(c);    body1.addFixture(bf);  }  body1.setLinearVelocity(new Vector2(0.0,0.0));  body1.setAngularVelocity(0.0);  body1.setMass(MassType.NORMAL);  body1.setAutoSleepingEnabled(false);  world.addBody(body1);  controller=new SimulationBody(new Color(100,100,100,50));{    Convex c=Geometry.createSquare(1.0);    BodyFixture bf=new BodyFixture(c);    bf.setSensor(true);    controller.addFixture(bf);  }  controller.setAngularVelocity(0.0);  controller.setMass(MassType.INFINITE);  world.addBody(controller);  MotorJoint joint1=new MotorJoint(controller,body1);  joint1.setLinearTarget(new Vector2(0.5,0.5));  joint1.setAngularTarget(Math.PI * 0.25);  joint1.setCorrectionFactor(0.3);  joint1.setMaximumForce(1000.0);  joint1.setMaximumTorque(7.0);  joint1.setCollisionAllowed(false);  world.addJoint(joint1);}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="FE_FLOATING_POINT_EQUALITY",justification="OK to compare floating point") protected void notifyTargetIntensityChange(double intensity){  double oldValue=mCurrentIntensity;  mCurrentIntensity=intensity;  if (oldValue != intensity) {    firePropertyChange("TargetIntensity",Double.valueOf(oldValue),Double.valueOf(intensity));  }}  }
class C{  public void clear(){  throw new UnsupportedOperationException();}  }
class C{  @Override public JettySolrRunner createJetty(File solrHome,String dataDir,String shardList,String solrConfigOverride,String schemaOverride) throws Exception {  JettySolrRunner jetty=new JettySolrRunner(solrHome.getPath(),context,0,solrConfigOverride,schemaOverride,false,getExtraServlets(),sslConfig,getExtraRequestFilters());  jetty.setShards(shardList);  jetty.setDataDir(getDataDir(dataDir));  int proxyPort=getNextAvailablePort();  jetty.setProxyPort(proxyPort);  jetty.start();  SocketProxy proxy=new SocketProxy(proxyPort,jetty.getBaseUrl().toURI());  proxies.put(proxy.getUrl(),proxy);  return jetty;}  }
class C{  public boolean status(){  return true;}  }
class C{  public static int[] randomInts(int max,int count){  int[] vals=new int[count];  for (int i=0; i < count; i++)   vals[i]=SEEDED_RANDOM.nextInt(max);  return vals;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.N4_SETTER_DECLARATION;}  }
class C{  public static String randomAlphanumeric(final int count){  return random(count,true,true);}  }
class C{  public void updateBitmapShader(){  if (image == null)   return;  shader=new BitmapShader(image,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);  if (canvasSize != image.getWidth() || canvasSize != image.getHeight()) {    Matrix matrix=new Matrix();    float scale=(float)canvasSize / (float)image.getWidth();    matrix.setScale(scale,scale);    shader.setLocalMatrix(matrix);  }}  }
class C{  protected void sendFunctionGroup1(){  setSpeedSetting(this.speedSetting);  if (sendA2command) {    int locoAddr=address.getNumber();    if (address.isLongAddress()) {      locoAddr+=0xC000;    }    int data=0x00 | (f0 ? 0x10 : 0) | (f1 ? 0x01 : 0)| (f2 ? 0x02 : 0)| (f3 ? 0x04 : 0)| (f4 ? 0x08 : 0);    byte[] bl=NceBinaryCommand.nceLocoCmd(locoAddr,NceBinaryCommand.LOCO_CMD_FG1,(byte)data);    NceMessage m=NceMessage.createBinaryMessage(tc,bl);    tc.sendNceMessage(m,null);  } else {    byte[] result=jmri.NmraPacket.function0Through4Packet(address.getNumber(),address.isLongAddress(),getF0(),getF1(),getF2(),getF3(),getF4());    NceMessage m=NceMessage.sendPacketMessage(tc,result);    tc.sendNceMessage(m,null);  }}  }
class C{  public Y notin(List<X> values){  if (q.isEmpty() == false) {    q.add(" AND ");  }  q.add(getColumnName()).notin(getValues(values));  return criteria;}  }
class C{  public void arc(float a,float b,float c,float d,float start,float stop){  arc(a,b,c,d,start,stop,0);}  }
class C{  private static Uri createDirectoryAndSaveFile(Context context,InputStream inputStream,String fileName){  Bitmap imageToSave=BitmapFactory.decodeStream(inputStream);  if (imageToSave == null)   return null;  File directory=new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM) + "/ImageDir");  if (!directory.exists()) {    File newDirectory=new File(directory.getAbsolutePath());    newDirectory.mkdirs();  }  File file=new File(directory,getTemporaryFilename(fileName));  if (file.exists())   file.delete();  try (FileOutputStream outputStream=new FileOutputStream(file)){    imageToSave.compress(Bitmap.CompressFormat.JPEG,100,outputStream);    outputStream.flush();  } catch (  Exception e) {    return null;  }  String absolutePathToImage=file.getAbsolutePath();  ContentValues values=new ContentValues();  values.put(Images.Media.TITLE,fileName);  values.put(Images.Media.DESCRIPTION,fileName);  values.put(Images.Media.DATE_TAKEN,System.currentTimeMillis());  values.put(Images.ImageColumns.BUCKET_DISPLAY_NAME,file.getName().toLowerCase(Locale.US));  values.put("_data",absolutePathToImage);  ContentResolver cr=context.getContentResolver();  cr.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,values);  Log.d(TAG,"absolute path to image file is " + absolutePathToImage);  return Uri.parse(absolutePathToImage);}  }
class C{  public LdapUsers(){  _usersImpl=new LdapUsersImpl();}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  private void extract(Detail detail){  List<FieldDetail> fields=detail.getFields();  for (  FieldDetail entry : fields) {    Annotation[] list=entry.getAnnotations();    Field field=entry.getField();    for (    Annotation label : list) {      scan(field,label,list);    }  }}  }
class C{  private CalendarSerializer(){}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  Node entRef;  Node entElement;  Node createdNode;  Node appendedNode;  int nodeType;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entRef=genderNode.getFirstChild();  assertNotNull("entRefNotNull",entRef);  nodeType=(int)entRef.getNodeType();  if (equals(1,nodeType)) {    entRef=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",entRef);  }  entElement=entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);  createdNode=doc.createElement("text3");{    boolean success=false;    try {      appendedNode=entElement.appendChild(createdNode);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  protected void valueChanged(boolean oldValue,boolean newValue){}  }
class C{  public static void printArray(int[] array){  System.out.print("{" + array[0]);  for (int i=1; i < array.length; i++) {    System.out.print(", " + array[i]);  }  System.out.println("}");}  }
class C{  public SimpleResultsPage(Iterable<T> chunks){  this(chunks,!Iterables.isEmpty(chunks));}  }
class C{  protected DOMException createDOMException(short type,String key,Object[] args){  return element.createDOMException(type,key,args);}  }
class C{  public static void showIf(View view,boolean show){  view.setVisibility(show ? View.VISIBLE : View.GONE);}  }
class C{  public NTRUSigningKeyGenerationParameters(int N,int q,int d1,int d2,int d3,int B,int basisType,double beta,double normBound,double keyNormBound,boolean primeCheck,boolean sparse,int keyGenAlg,Digest hashAlg){  super(new SecureRandom(),N);  this.N=N;  this.q=q;  this.d1=d1;  this.d2=d2;  this.d3=d3;  this.B=B;  this.basisType=basisType;  this.beta=beta;  this.normBound=normBound;  this.keyNormBound=keyNormBound;  this.primeCheck=primeCheck;  this.sparse=sparse;  this.keyGenAlg=keyGenAlg;  this.hashAlg=hashAlg;  polyType=NTRUParameters.TERNARY_POLYNOMIAL_TYPE_PRODUCT;  init();}  }
class C{  public static <T>ImmutableList<SonarMethod<T>> findMethodsWithType(Class<?> clazz,Class<T> returnType,Class<?>... parameters){  Preconditions.checkNotNull(clazz,"Null class");  Preconditions.checkNotNull(returnType,"Null return type");  Preconditions.checkNotNull(returnType,"Null parameter array");  ImmutableList.Builder<SonarMethod<T>> builder=ImmutableList.builder();  if (returnType.isPrimitive()) {    returnType=Primitives.wrap(returnType);  }  methodLoop:   for (  Method method : clazz.getDeclaredMethods()) {    if (method.getParameterCount() != parameters.length)     continue;    Class<?>[] methodParameters=method.getParameterTypes();    for (int i=0; i < methodParameters.length; i++) {      Class<?> parameter=methodParameters[i];      Class<?> expectedParameter=Preconditions.checkNotNull(parameters[i],"Null parameter");      if (expectedParameter.isPrimitive()) {        expectedParameter=Primitives.wrap(expectedParameter);        parameters[i]=expectedParameter;      }      if (parameter.isPrimitive()) {        parameter=Primitives.wrap(parameter);      }      if (!expectedParameter.isAssignableFrom(parameter))       continue methodLoop;    }    Class<?> methodReturnType=method.getReturnType().isPrimitive() ? Primitives.wrap(method.getReturnType()) : method.getReturnType();    if (returnType.isAssignableFrom(methodReturnType)) {      builder.add(new SonarMethod<T>(method));    }  }  return builder.build();}  }
class C{  public void detach(){  m_iterator=null;  super.detach();}  }
class C{  public void addParent(int nParent,Instances _Instances){  if (m_nNrOfParents == m_nParents.length) {    int[] nParents=new int[2 * m_nParents.length];    for (int i=0; i < m_nNrOfParents; i++) {      nParents[i]=m_nParents[i];    }    m_nParents=nParents;  }  m_nParents[m_nNrOfParents]=nParent;  m_nNrOfParents++;  m_nCardinalityOfParents*=_Instances.attribute(nParent).numValues();}  }
class C{  public void destroy(){  ViewGroup parent=(ViewGroup)getParent();  if (parent != null) {    parent.removeView(this);  }  mRevealerSpring.destroy();}  }
class C{  public synchronized void removeTextListener(TextListener cl){  m_textListeners.remove(cl);}  }
class C{  public Object put(int key,Object value){  Entry[] table=this.table;  int bucket=Math.abs(key) % table.length;  for (Entry e=table[bucket]; e != null; e=e.next) {    if (e.key == key) {      Object old=e.value;      e.value=value;      return old;    }  }  if (this.count >= this.threshold) {    rehash();    table=this.table;    bucket=Math.abs(key) % table.length;  }  Entry e=new Entry();  e.key=key;  e.value=value;  e.next=table[bucket];  table[bucket]=e;  count++;  return null;}  }
class C{  public static String whitespace(int n){  if (n < WHITESPACE_BUFFER_LENGTH) {    return WHITESPACE_BUFFER.substring(0,n);  }  char[] buf=new char[n];  for (int i=0; i < n; i++) {    buf[i]=WHITESPACE_BUFFER.charAt(0);  }  return new String(buf);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public void updatePriors(Instance instance) throws Exception {  if (!instance.classIsMissing()) {    if (!m_ClassIsNominal) {      addNumericTrainClass(instance.classValue(),instance.weight());      m_ClassPriors[0]+=instance.classValue() * instance.weight();      m_ClassPriorsSum+=instance.weight();    } else {      m_ClassPriors[(int)instance.classValue()]+=instance.weight();      m_ClassPriorsSum+=instance.weight();    }  }}  }
class C{  private void createName(){  DataSortedTableModel model;  model=(DataSortedTableModel)m_TableData.getModel();  if ((model != null) && (model.getInstances() != null)) {    m_LabelName.setText("Relation: " + model.getInstances().relationName());  } else {    m_LabelName.setText("");  }}  }
class C{  @Override public String globalInfo(){  return "Uses the regular expressions stored in the file for determining " + "whether a word is a stopword (ignored if " + "pointing to a directory). One expression per line.\n"+ "More information on regular expressions:\n"+ "http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html";}  }
class C{  protected boolean logFoundJars(Vector v,String desc){  if ((null == v) || (v.size() < 1))   return false;  boolean errors=false;  logMsg("#---- BEGIN Listing XML-related jars in: " + desc + " ----");  for (int i=0; i < v.size(); i++) {    Hashtable subhash=(Hashtable)v.elementAt(i);    for (Enumeration keys=subhash.keys(); keys.hasMoreElements(); ) {      Object key=keys.nextElement();      String keyStr=(String)key;      try {        if (keyStr.startsWith(ERROR)) {          errors=true;        }        logMsg(keyStr + "=" + subhash.get(keyStr));      } catch (      Exception e) {        errors=true;        logMsg("Reading-" + key + "= threw: "+ e.toString());      }    }  }  logMsg("#----- END Listing XML-related jars in: " + desc + " -----");  return errors;}  }
class C{  public static void showOKButtonMessageBox(){  MESSAGE_OK_BUTTON.setVisible(true);}  }
class C{  public PrinterLocation(String location,Locale locale){  super(location,locale);}  }
class C{  public void shuffleFromTo(int from,int to){  if (size == 0) {    return;  }  checkRangeFromTo(from,to,size);  cern.jet.random.Uniform gen=new cern.jet.random.Uniform(new cern.jet.random.engine.DRand(new java.util.Date()));  float tmpElement;  float[] theElements=elements;  int random;  for (int i=from; i < to; i++) {    random=gen.nextIntFromTo(i,to);    tmpElement=theElements[random];    theElements[random]=theElements[i];    theElements[i]=tmpElement;  }}  }
class C{  public void close(){}  }
class C{  public ExceptionBuilder message(String message){  body.setMessage(message);  return this;}  }
class C{  @operator(value="correlation",can_be_const=true,type=IType.FLOAT,expected_content_type={IType.INT,IType.FLOAT},concept={IConcept.STATISTIC}) @doc(value="Returns the correlation of two data sequences",comment="",examples={}) public static Double opCorrelation(final IScope scope,final IContainer data1,final IContainer data2){  final double standardDev1=Stats.opStDev(scope,data1);  final double standardDev2=Stats.opStDev(scope,data2);  return Descriptive.correlation(from(scope,data1),standardDev1,from(scope,data2),standardDev2);}  }
class C{  public boolean isTimeoutMailSent(){  return timeoutMailSent;}  }
class C{  private int detectErrorCode(String errorMessage){  final String error=errorMessage != null ? errorMessage : null;  if (error == null) {    return 400;  }  if (error.equals(DAILY_TRANSACTION_LIMIT_EXCEEDED)) {    return 429;  } else   if (error.equals(INVALID_API_KEY)) {    return 401;  } else {    return 400;  }}  }
class C{  private void deleteInvoicePaySchedule(int C_Invoice_ID,String trxName){  String sql="DELETE C_InvoicePaySchedule WHERE C_Invoice_ID=" + C_Invoice_ID;  int no=DB.executeUpdate(sql,trxName);  log.fine("C_Invoice_ID=" + C_Invoice_ID + " - #"+ no);}  }
class C{  public CpcRunner(GraphSource graphWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  public SVGDescriptor toSVG(GraphicContext gc){  return toSVG(gc.getPaint());}  }
class C{  public int loadInstruction8(int addr){  return loadInstruction8(addr,AccessSource.CODE);}  }
class C{  public void waitTransformThread() throws SAXException {  Thread transformThread=this.getTransformThread();  if (null != transformThread) {    try {      ThreadControllerWrapper.waitThread(transformThread,this);      if (!this.hasTransformThreadErrorCatcher()) {        Exception e=this.getExceptionThrown();        if (null != e) {          e.printStackTrace();          throw new org.xml.sax.SAXException(e);        }      }      this.setTransformThread(null);    } catch (    InterruptedException ie) {    }  }}  }
class C{  public boolean drawImage(Image img,int dx1,int dy1,int dx2,int dy2,int sx1,int sy1,int sx2,int sy2,Color bgcolor,ImageObserver observer){  return g.drawImage(img,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,bgcolor,observer);}  }
class C{  private void alignAboveBaseline(GridBagConstraints cons,Rectangle r,int cellY,int cellHeight){  if (layoutInfo.hasBaseline(cons.tempY)) {    int maxY;    if (layoutInfo.hasConstantDescent(cons.tempY)) {      maxY=cellY + cellHeight - layoutInfo.maxDescent[cons.tempY];    } else {      maxY=cellY + layoutInfo.maxAscent[cons.tempY];    }    if (cons.isVerticallyResizable()) {      r.y=cellY + cons.insets.top;      r.height=maxY - r.y;    } else {      r.height=cons.minHeight + cons.ipady;      r.y=maxY - r.height;    }  } else {    centerVertically(cons,r,cellHeight);  }}  }
class C{  public static String generateSub(final ITranslationEnvironment environment,final long offset,final OperandSize size,final String operand1,final String operand2,final List<ReilInstruction> instructions) throws IllegalArgumentException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(size,"Error: Argument size can't be null");  Preconditions.checkNotNull(operand1,"Error: Argument operand1 can't be null");  Preconditions.checkNotNull(operand2,"Error: Argument operand2 can't be null");  final OperandSize resultSize=TranslationHelpers.getNextSize(size);  final String msbMask=String.valueOf(TranslationHelpers.getMsbMask(size));  final String shiftMsbLsb=String.valueOf(TranslationHelpers.getShiftMsbLsbMask(size));  final String carryMask=String.valueOf(getCarryMask(size));  final String shiftCarryLsb=String.valueOf(-size.getBitSize());  final String truncateMask=String.valueOf(TranslationHelpers.getAllBitsMask(size));  final String maskedOp1=environment.getNextVariableString();  final String maskedOp2=environment.getNextVariableString();  final String subResult=environment.getNextVariableString();  final String msbResult=environment.getNextVariableString();  final String msbSameBefore=environment.getNextVariableString();  final String msbHasChanged=environment.getNextVariableString();  final String tempOf=environment.getNextVariableString();  final String tempCf=environment.getNextVariableString();  final String truncatedResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createAnd(offset,size,operand1,size,msbMask,size,maskedOp1));  instructions.add(ReilHelpers.createAnd(offset + 1,size,operand2,size,msbMask,size,maskedOp2));  instructions.add(ReilHelpers.createSub(offset + 2,size,operand1,size,operand2,resultSize,subResult));  instructions.add(ReilHelpers.createAnd(offset + 3,resultSize,subResult,resultSize,msbMask,size,msbResult));  instructions.add(ReilHelpers.createBsh(offset + 4,size,msbResult,size,shiftMsbLsb,OperandSize.BYTE,SIGN_FLAG));  instructions.add(ReilHelpers.createXor(offset + 5,size,maskedOp1,size,maskedOp2,size,msbSameBefore));  instructions.add(ReilHelpers.createXor(offset + 6,size,maskedOp1,size,msbResult,size,msbHasChanged));  instructions.add(ReilHelpers.createAnd(offset + 7,size,msbSameBefore,size,msbHasChanged,size,tempOf));  instructions.add(ReilHelpers.createBsh(offset + 8,size,tempOf,size,shiftMsbLsb,OperandSize.BYTE,OVERFLOW_FLAG));  instructions.add(ReilHelpers.createAnd(offset + 9,resultSize,subResult,resultSize,carryMask,resultSize,tempCf));  instructions.add(ReilHelpers.createBsh(offset + 10,resultSize,tempCf,resultSize,shiftCarryLsb,OperandSize.BYTE,CARRY_FLAG));  instructions.add(ReilHelpers.createAnd(offset + 11,resultSize,subResult,resultSize,truncateMask,size,truncatedResult));  instructions.add(ReilHelpers.createBisz(offset + 12,size,truncatedResult,OperandSize.BYTE,ZERO_FLAG));  return truncatedResult;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node entRef;  Node entText;  Text splitNode;  doc=(Document)load("staff",true);  entRef=doc.createEntityReference("ent3");  assertNotNull("createdEntRefNotNull",entRef);  entText=entRef.getFirstChild();  assertNotNull("entTextNotNull",entText);{    boolean success=false;    try {      splitNode=((Text)entText).splitText(2);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public static void checkSharedFSFailoverReplaced(CoreContainer cc,CoreDescriptor desc){  ZkController zkController=cc.getZkController();  String thisCnn=zkController.getCoreNodeName(desc);  String thisBaseUrl=zkController.getBaseUrl();  log.debug("checkSharedFSFailoverReplaced running for coreNodeName={} baseUrl={}",thisCnn,thisBaseUrl);  Map<String,Slice> slicesMap=zkController.getClusterState().getSlicesMap(desc.getCloudDescriptor().getCollectionName());  if (slicesMap != null) {    for (    Slice slice : slicesMap.values()) {      for (      Replica replica : slice.getReplicas()) {        String cnn=replica.getName();        String baseUrl=replica.getStr(ZkStateReader.BASE_URL_PROP);        log.debug("compare against coreNodeName={} baseUrl={}",cnn,baseUrl);        if (thisCnn != null && thisCnn.equals(cnn) && !thisBaseUrl.equals(baseUrl)) {          if (cc.getCoreNames().contains(desc.getName())) {            cc.unload(desc.getName());          }          try {            FileUtils.deleteDirectory(desc.getInstanceDir().toFile());          } catch (          IOException e) {            SolrException.log(log,"Failed to delete instance dir for core:" + desc.getName() + " dir:"+ desc.getInstanceDir());          }          log.error("",new SolrException(ErrorCode.SERVER_ERROR,"Will not load SolrCore " + desc.getName() + " because it has been replaced due to failover."));          throw new SolrException(ErrorCode.SERVER_ERROR,"Will not load SolrCore " + desc.getName() + " because it has been replaced due to failover.");        }      }    }  }}  }
class C{  @Override public boolean isArmed(){  return other.isArmed();}  }
class C{  @SuppressWarnings("unused") public Owner owner(){  return owner;}  }
class C{  @Override public String toString(){  return "cudaExtent[" + "width=" + width + ","+ "height="+ height+ ","+ "depth="+ depth+ "]";}  }
class C{  private static <T>void initializeKnownPlugins(final T pluginInterface,final IPluginRegistry<IPlugin<T>> registry,final List<PluginConfigItem> xmlPluginOrder,final List<Pair<IPlugin<T>,PluginStatus>> validatedPlugins,final List<Pair<IPlugin<T>,Exception>> initializedPlugins,final Set<Long> processedPlugins){  for (  final PluginConfigItem pt : xmlPluginOrder) {    processedPlugins.add(pt.getGUID());    final IPlugin<T> plugin=findPlugin(validatedPlugins,pt.getGUID());    if (plugin != null) {      if (pt.isLoad()) {        initializePlugin(plugin,pluginInterface,registry,initializedPlugins);      } else {        registry.addDisabledPlugin(plugin,DisabledPluginReason.NotLoaded);      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.469 -0400",hash_original_method="5BFD5B4026C9A4D9AF170A3840BAB7CB",hash_generated_method="0D05602220E8516B679E14BEDF23478C") private boolean isSlavoGermanic(String value){  return value.indexOf('W') > -1 || value.indexOf('K') > -1 || value.indexOf("CZ") > -1 || value.indexOf("WITZ") > -1;}  }
class C{  private void addStringKeyIfMissing(DataMap config,String key,String value){  if (!config.containsKey(key)) {    config.putString(key,value);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public ActionEvent(UIComponent component){  super(component);}  }
class C{  public static AffineTransformation axisProjection(int dim,int ax1,int ax2){  AffineTransformation proj=AffineTransformation.reorderAxesTransformation(dim,new int[]{ax1,ax2});  double[] trans=new double[dim];  for (int i=0; i < dim; i++) {    trans[i]=-.5;  }  proj.addTranslation(trans);  proj.addAxisReflection(2);  proj.addScaling(SCALE);  return proj;}  }
class C{  public PotentialConsumer createPotentialConsumer(final Object baseObject,final String methodName,final Class<?>[] argDataTypes,final Object[] argValues){  Class<?> dataType=argDataTypes[0];  String description=getDescriptionString(baseObject,methodName,dataType);  return new PotentialConsumer(parentComponent,baseObject,methodName,argDataTypes,argValues,description);}  }
class C{  @Override protected void onPause(){  super.onPause();  Log.d(TAG,"onPause() - another activity is taking focus (this activity " + "is about to be \"paused\")");}  }
class C{  public void copyResult(Value toCopy,String calleeSig,int newArgNum,ValueBox newVB){  hotspots.add(newVB);  regexMap.put(newVB.getValue(),regexMap.get(toCopy));  nonterminals.put(newVB.getValue(),nonterminals.get(toCopy));  List<ValueBox> vbs=new LinkedList<ValueBox>();  vbs.add(newVB);  addSignatureToHotspotMap(calleeSig,new Hotspot(calleeSig,newArgNum,hotspots));}  }
class C{  private static void checkKeystoneProviderConnectivity(AuthnProvider authConfig,KeystoneRestClientFactory keystoneFactory){  String managerDn=authConfig.getManagerDN();  String password=authConfig.getManagerPassword();  StringSet uris=authConfig.getServerUrls();  String userName="";  String tenantName="";  try {    String[] managerdnArray=managerDn.split(",");    String firstEle=managerdnArray[0];    String secondEle=managerdnArray[1];    userName=firstEle.split("=")[1];    tenantName=secondEle.split("=")[1];  } catch (  Exception ex) {    throw APIException.badRequests.managerDNInvalid();  }  URI authUri=null;  for (  String uri : uris) {    authUri=URI.create(uri);    break;  }  KeystoneApiClient keystoneApi=(KeystoneApiClient)keystoneFactory.getRESTClient(authUri,userName,password);  keystoneApi.setTenantName(tenantName);  keystoneApi.authenticate_keystone();}  }
class C{  public boolean isSetVersion(){  return EncodingUtils.testBit(__isset_bitfield,__VERSION_ISSET_ID);}  }
class C{  public long readRawLittleEndian64() throws IOException {  final byte b1=readRawByte();  final byte b2=readRawByte();  final byte b3=readRawByte();  final byte b4=readRawByte();  final byte b5=readRawByte();  final byte b6=readRawByte();  final byte b7=readRawByte();  final byte b8=readRawByte();  return (((long)b1 & 0xff)) | (((long)b2 & 0xff) << 8) | (((long)b3 & 0xff) << 16)| (((long)b4 & 0xff) << 24)| (((long)b5 & 0xff) << 32)| (((long)b6 & 0xff) << 40)| (((long)b7 & 0xff) << 48)| (((long)b8 & 0xff) << 56);}  }
class C{  public boolean isFieldOnly(){  Object oo=get_Value(COLUMNNAME_IsFieldOnly);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public Object clone(){  NegativeBinomial copy=(NegativeBinomial)super.clone();  if (this.poisson != null)   copy.poisson=(Poisson)this.poisson.clone();  copy.poisson.setRandomGenerator(copy.getRandomGenerator());  if (this.gamma != null)   copy.gamma=(Gamma)this.gamma.clone();  copy.gamma.setRandomGenerator(copy.getRandomGenerator());  return copy;}  }
class C{  @Override public void removeVetoableChangeListener(String name,VetoableChangeListener vcl){  m_bcSupport.removeVetoableChangeListener(name,vcl);}  }
class C{  public static double logAdd(Collection<Double> doubles){  double max=max(doubles).getSecond();  if (max == Double.NEGATIVE_INFINITY)   return max;  double l=0;  for (  double d : doubles) {    if (d == Double.NEGATIVE_INFINITY)     continue;    l+=exp(d - max);  }  if (l > 0)   return max + log(l); else   return max;}  }
class C{  @SideEffectFree public InputSource(Reader characterStream){  setCharacterStream(characterStream);}  }
class C{  public ActionsToolBar(){  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.samples.svg.Labels");  setName(labels.getString(getID() + ".toolbar"));}  }
class C{  private static FlinkKafkaConsumer08<String> kafkaSource(BenchmarkConfig config){  return new FlinkKafkaConsumer08<>(config.kafkaTopic,new SimpleStringSchema(),config.getParameters().getProperties());}  }
class C{  public static boolean testRaySphere(double originX,double originY,double originZ,double dirX,double dirY,double dirZ,double centerX,double centerY,double centerZ,double radiusSquared){  double Lx=centerX - originX;  double Ly=centerY - originY;  double Lz=centerZ - originZ;  double tca=Lx * dirX + Ly * dirY + Lz * dirZ;  double d2=Lx * Lx + Ly * Ly + Lz * Lz - tca * tca;  if (d2 > radiusSquared)   return false;  double thc=Math.sqrt(radiusSquared - d2);  double t0=tca - thc;  double t1=tca + thc;  return t0 < t1 && t1 >= 0.0;}  }
class C{  public String maximumAttributeNamesTipText(){  return "The maximum number of attributes to include in transformed attribute names.";}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:07.564 -0500",hash_original_method="1714B1C8173E376D41E514F902D33E99",hash_generated_method="1BA84BE4467588AE2A03CD87E288D467") public ComponentName(String pkg,String cls){  if (pkg == null)   throw new NullPointerException("package name is null");  if (cls == null)   throw new NullPointerException("class name is null");  mPackage=pkg;  mClass=cls;}  }
class C{  public boolean isPassthrough(){  return isPassthrough;}  }
class C{  public void connectionClosed(ConnectionEvent ce){  PrintWriter externalLog=((FBManagedConnection)ce.getSource()).getLogWriter();  try {    ((FBManagedConnection)ce.getSource()).destroy();  } catch (  ResourceException e) {    if (externalLog != null)     externalLog.println("Exception closing unmanaged connection: " + e);  }}  }
class C{  protected void onFaviconReceived(Bitmap image){}  }
class C{  public VNXeCommandResult addLunsToLunGroup(String lunGroupId,List<String> luns){  LunGroupModifyParam param=new LunGroupModifyParam();  List<LunAddParam> lunAdds=new ArrayList<LunAddParam>();  for (  String lunId : luns) {    VNXeBase lun=new VNXeBase(lunId);    LunAddParam lunAdd=new LunAddParam();    lunAdd.setLun(lun);    lunAdds.add(lunAdd);  }  param.setLunAdd(lunAdds);  LunGroupRequests req=new LunGroupRequests(_khClient);  return req.modifyLunGroupSync(lunGroupId,param);}  }
class C{  public SessionEditorEdge(SessionEditorNode node1,Point mouseTrackPoint,int mode){  super(node1,mouseTrackPoint,DisplayEdge.DIRECTED);  this.sessionEdgeMode=mode;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void readNames(int base){  pos=base;  int nextra=readInt(2);  names=new String[nextra];  for (int i=0; i < nextra; i++) {    Range r=getIndexEntry(base,i);    names[i]=new String(data,r.getStart(),r.getLen());  }}  }
class C{  public static long copyLarge(Reader input,Writer output,char[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public AttCertIssuer(GeneralNames names){  obj=names;  choiceObj=obj.toASN1Primitive();}  }
class C{  public void swapValLeft(BiSortVal n){  int tmpv=n.value;  BiSortVal tmpl=n.left;  n.value=value;  n.left=left;  value=tmpv;  left=tmpl;}  }
class C{  public boolean isComplete(){  String ds=getDocStatus();  return DOCSTATUS_Completed.equals(ds) || DOCSTATUS_Closed.equals(ds) || DOCSTATUS_Reversed.equals(ds);}  }
class C{  public void stateChanged(ChangeEvent e){  Object source=e.getSource();  if (source instanceof AbstractButton == false)   return;  boolean checked=((JCheckBox)source).isSelected();  if (!checked && m_check.isSelected()) {    m_headerOnly=true;    m_check.setSelected(false);    m_table.getTableHeader().repaint();  }}  }
class C{  public ObjectFactory(){}  }
class C{  public static boolean isOn(String option){  if (args == null) {    return false;  } else {    int n=0;    option=option.toLowerCase(Locale.ENGLISH);    if (args.indexOf("all") != -1) {      return true;    } else     if ((n=args.indexOf("ssl")) != -1) {      if (args.indexOf("sslctx",n) == -1) {        if (!(option.equals("data") || option.equals("packet") || option.equals("plaintext"))) {          return true;        }      }    }    return (args.indexOf(option) != -1);  }}  }
class C{  public static ArrayList<ImageReference> collectAllImageRefs(ICompilationUnit cu) throws JavaModelException {  ArrayList<ImageReference> refs=new ArrayList<ImageReference>();  List<ISourceRange> javadocRanges=UmletPluginUtils.collectJavadocRanges(cu);  String source=cu.getBuffer().getContents();  for (  ISourceRange javadocRange : javadocRanges) {    collectImgRefsImpl(refs,source,javadocRange);  }  return refs;}  }
class C{  public void writeExif(InputStream jpegStream,OutputStream exifOutStream) throws IOException {  if (jpegStream == null || exifOutStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=getExifWriterStream(exifOutStream);  doExifStreamIO(jpegStream,s);  s.flush();}  }
class C{  public static String processAllowHeader(String allowSent){  StringBuffer allowToSend=new StringBuffer("");  StringTokenizer tokenizer=new StringTokenizer(allowSent,",");  while (tokenizer.hasMoreTokens()) {    String token=tokenizer.nextToken().trim().toUpperCase();    if (allowedMethods.contains(token)) {      allowToSend.append(token).append(",");    }  }  return allowToSend.toString();}  }
class C{  public void decreaseTimer(){  if (timer > 0) {    timer--;    timerChange=-1;  }}  }
class C{  public void queryEquals(String type,int index,String value,int page,int limit,int visibilityScope,CloudResponse<CloudObject[]> response){  try {    queryImpl(type,value,index,page,limit,visibilityScope,1,0,false,false,false,response);  } catch (  CloudException e) {    response.onError(e);  }}  }
class C{  public Builder addInClause(String fieldName,Collection<String> itemNames){  return addInClause(fieldName,itemNames,Occurance.MUST_OCCUR);}  }
class C{  public void writeTo(Writer out) throws IOException {  out.write(buf,0,count);}  }
class C{  static public Detector create() throws LangDetectException {  return createDetector();}  }
class C{  public void addTearDownService(final TearDownService tearDown){  tearDownServices.add(tearDown);}  }
class C{  private void offsetIfNeeded(CoordinatorLayout parent,LocalFloatingActionButton fab){  final Rect padding=fab.mShadowPadding;  if (padding != null && padding.centerX() > 0 && padding.centerY() > 0) {    final CoordinatorLayout.LayoutParams lp=(CoordinatorLayout.LayoutParams)fab.getLayoutParams();    int offsetTB=0, offsetLR=0;    if (fab.getRight() >= parent.getWidth() - lp.rightMargin) {      offsetLR=padding.right;    } else     if (fab.getLeft() <= lp.leftMargin) {      offsetLR=-padding.left;    }    if (fab.getBottom() >= parent.getBottom() - lp.bottomMargin) {      offsetTB=padding.bottom;    } else     if (fab.getTop() <= lp.topMargin) {      offsetTB=-padding.top;    }    fab.offsetTopAndBottom(offsetTB);    fab.offsetLeftAndRight(offsetLR);  }}  }
class C{  public static boolean isTrustedSite(URL url){  return NTLMAuthCallback.isTrustedSite(url);}  }
class C{  protected void addNewDocument(String name,int parentId,String fileExt,int sortOrder,InputStream inputStreamDocumentFile) throws Exception {  addNewDocument(name,parentId,fileExt,sortOrder,inputStreamDocumentFile,null);}  }
class C{  @Override protected void doOneIteration() throws Exception {  PreparedStatement pStmtStore=this.conn.prepareStatement("UPDATE perfLoadStore SET priKey = ?, fk1 = ?, fk2 = ?, dtField = ?, charField1 = ?, " + "charField2 = ?, charField3 = ?, charField4 = ?, intField1 = ?, intField2 = ?, intField3 = ?, intField4 = ?, doubleField1 = ?," + "doubleField2 = ?, doubleField3 = ?, doubleField4 = ? WHERE priKey=?");  PreparedStatement pStmtCheck=this.conn.prepareStatement("SELECT COUNT(*) FROM perfLoadStore WHERE priKey=?");  PreparedStatement pStmtLoad=null;  if (this.largeResults) {    pStmtLoad=this.conn.prepareStatement("SELECT priKey, fk1, fk2, dtField, charField1, charField2, charField3, charField4, intField1, " + "intField2, intField3, intField4, doubleField1, doubleField2, doubleField3, doubleField4 FROM perfLoadStore");  } else {    pStmtLoad=this.conn.prepareStatement("SELECT priKey, fk1, fk2, dtField, charField1, charField2, charField3, charField4, intField1, " + "intField2, intField3, intField4, doubleField1, doubleField2, doubleField3, doubleField4 FROM perfLoadStore WHERE priKey=?");  }  NumberFormat numFormatter=NumberFormat.getInstance();  numFormatter.setMaximumFractionDigits(4);  numFormatter.setMinimumFractionDigits(4);  int transactionCount=5000;  if (this.largeResults) {    transactionCount=50;  }  long begin=System.currentTimeMillis();  for (int i=0; i < transactionCount; i++) {    this.conn.setAutoCommit(false);    pStmtCheck.setInt(1,1);    this.rs=pStmtCheck.executeQuery();    while (this.rs.next()) {      this.rs.getInt(1);    }    this.rs.close();    if (!this.largeResults) {      pStmtLoad.setInt(1,1);    }    this.rs=pStmtLoad.executeQuery();    if (this.rs.next()) {      int key=this.rs.getInt(1);      if (!this.useColumnNames) {        pStmtStore.setInt(1,key);        pStmtStore.setInt(2,this.rs.getInt(2));        pStmtStore.setInt(3,this.rs.getInt(3));        pStmtStore.setTimestamp(4,this.rs.getTimestamp(4));        pStmtStore.setString(5,this.rs.getString(5));        pStmtStore.setString(6,this.rs.getString(7));        pStmtStore.setString(7,this.rs.getString(7));        pStmtStore.setString(8,this.rs.getString(8));        pStmtStore.setInt(9,this.rs.getInt(9));        pStmtStore.setInt(10,this.rs.getInt(10));        pStmtStore.setInt(11,this.rs.getInt(11));        pStmtStore.setInt(12,this.rs.getInt(12));        pStmtStore.setDouble(13,this.rs.getDouble(13));        pStmtStore.setDouble(14,this.rs.getDouble(14));        pStmtStore.setDouble(15,this.rs.getDouble(15));        pStmtStore.setDouble(16,this.rs.getDouble(16));        pStmtStore.setInt(17,key);      } else {        pStmtStore.setInt(1,key);        pStmtStore.setInt(2,this.rs.getInt("fk1"));        pStmtStore.setInt(3,this.rs.getInt("fk2"));        pStmtStore.setTimestamp(4,this.rs.getTimestamp("dtField"));        pStmtStore.setString(5,this.rs.getString("charField1"));        pStmtStore.setString(6,this.rs.getString("charField2"));        pStmtStore.setString(7,this.rs.getString("charField3"));        pStmtStore.setString(8,this.rs.getString("charField4"));        pStmtStore.setInt(9,this.rs.getInt("intField1"));        pStmtStore.setInt(10,this.rs.getInt("intField2"));        pStmtStore.setInt(11,this.rs.getInt("intField3"));        pStmtStore.setInt(12,this.rs.getInt("intField4"));        pStmtStore.setDouble(13,this.rs.getDouble("doubleField1"));        pStmtStore.setDouble(14,this.rs.getDouble("doubleField2"));        pStmtStore.setDouble(15,this.rs.getDouble("doubleField3"));        pStmtStore.setDouble(16,this.rs.getDouble("doubleField4"));        pStmtStore.setInt(17,key);      }      pStmtStore.executeUpdate();    }    this.rs.close();    this.conn.commit();    this.conn.setAutoCommit(true);  }  pStmtStore.close();  pStmtCheck.close();  pStmtLoad.close();  long end=System.currentTimeMillis();  long timeElapsed=(end - begin);  double timeElapsedSeconds=(double)timeElapsed / 1000;  double tps=transactionCount / timeElapsedSeconds;  if (this.takeMeasurements) {    addResult(tps);    System.out.print("1 [ " + numFormatter.format(getMeanValue()) + " ] ");  } else {    System.out.println("Warm-up: " + tps + " trans/sec");  }}  }
class C{  private void sendMessageToUI(String valuetosend,boolean clear){  Log.i("medtronicCGMService",valuetosend);  log.debug("send Message To UI -> " + valuetosend);  if (mClients != null && mClients.size() > 0) {    for (int i=mClients.size() - 1; i >= 0; i--) {      try {        Message mSend=null;        if (clear) {          mSend=Message.obtain(null,MedtronicConstants.MSG_MEDTRONIC_CGM_CLEAR_DISPLAY);          mClients.get(i).send(mSend);          continue;        }        mSend=Message.obtain(null,MedtronicConstants.MSG_MEDTRONIC_CGM_MESSAGE_RECEIVED);        Bundle b=new Bundle();        b.putString("data",valuetosend);        mSend.setData(b);        mClients.get(i).send(mSend);      } catch (      RemoteException e) {        mClients.remove(i);      }    }  } else {    displayMessage(valuetosend);  }}  }
class C{  public void endDocument() throws org.xml.sax.SAXException {  try {    if (null != getStylesheetRoot()) {      if (0 == m_stylesheetLevel)       getStylesheetRoot().recompose();    } else     throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_NO_STYLESHEETROOT,null));    XSLTElementProcessor elemProcessor=getCurrentProcessor();    if (null != elemProcessor)     elemProcessor.startNonText(this);    m_stylesheetLevel--;    popSpaceHandling();    m_parsingComplete=(m_stylesheetLevel < 0);  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  public void test_read_writeLong() throws IOException {  RandomAccessFile raf=new java.io.RandomAccessFile(fileName,"rw");  raf.writeLong(Long.MIN_VALUE);  raf.writeLong('T');  raf.writeLong(Long.MAX_VALUE);  raf.writeLong(Long.MIN_VALUE - 1);  raf.writeLong(Long.MAX_VALUE + 1);  raf.seek(0);  assertEquals("Test 1: Incorrect value written or read;",Long.MIN_VALUE,raf.readLong());  assertEquals("Test 2: Incorrect value written or read;",'T',raf.readLong());  assertEquals("Test 3: Incorrect value written or read;",Long.MAX_VALUE,raf.readLong());  assertEquals("Test 4: Incorrect value written or read;",0x7fffffffffffffffl,raf.readLong());  assertEquals("Test 5: Incorrect value written or read;",0x8000000000000000l,raf.readLong());  try {    raf.readLong();    fail("Test 6: EOFException expected.");  } catch (  EOFException e) {  }  raf.close();  try {    raf.writeLong('E');    fail("Test 7: IOException expected.");  } catch (  IOException e) {  }  try {    raf.readLong();    fail("Test 8: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  @Override public void execute(){  try {    IEntity partner=findPartner();    TradeState myState=TradeState.valueOf(event.get("user_trade_state"));    TradeState partnerState=TradeState.valueOf(event.get("partner_trade_state"));    TradingController.get().setState(entity,partner,myState,partnerState);  } catch (  RuntimeException e) {    logger.error("Failed to process trade state change. Event: " + event,e);  }}  }
class C{  public final Process exec(String... args) throws IOException {  checkState(cwd != DEV_NULL);  checkArgument(args.length > 0,"args");  return runtime.exec(args,env,cwd);}  }
class C{  public void clearStack(){  stackSize=0;}  }
class C{  @Override public void writeAttribute(String prefix,String namespaceURI,String localName,String value) throws XMLStreamException {  log.log(Level.FINE,"writeAttribute({0}, {1}, {2}, {3})",new Object[]{prefix,namespaceURI,localName,value});  int idx=localName.indexOf(':');  if (idx >= 0) {    prefix=localName.substring(0,idx);    localName=localName.substring(idx + 1);  }  if (namespaceURI != null && !namespaceURI.isEmpty()) {    prefix=def.getPrefixWithLinked(namespaceURI);  } else   if (prefix != null && !prefix.isEmpty()) {    namespaceURI=current.getContext().getNamespaceURI(prefix);    if (namespaceURI != null) {      prefix=def.getPrefixWithLinked(namespaceURI);    }  } else {    if (current.getContext().isDefaultNamespaceDefined()) {      prefix=def.getPrefix(current.getContext().getDefaultNamespace());    }  }  if (prefix != null && !prefix.isEmpty()) {    localName=new StringBuilder(prefix).append(":").append(localName).toString();  }  if (current.getElement() == null) {    throw new XMLStreamException(String.format("No elemento to add the attribute '%s'='%s' to",localName,value));  }  current.getElement().addAttribute(new WbXmlAttribute(localName,value));}  }
class C{  private void compute(MapReduceTaskData[] taskDatas,long containerSize,long idealStartTime){  long peakMemoryNeed=0;  long taskFinishTimeMax=0;  long taskDurationMax=0;  if (taskDatas == null || taskDatas.length == 0) {    return;  }  for (  MapReduceTaskData taskData : taskDatas) {    long taskMemory=taskData.getCounters().get(MapReduceCounterData.CounterName.PHYSICAL_MEMORY_BYTES) / FileUtils.ONE_MB;    long taskVM=taskData.getCounters().get(MapReduceCounterData.CounterName.VIRTUAL_MEMORY_BYTES) / FileUtils.ONE_MB;    long taskDuration=taskData.getFinishTimeMs() - taskData.getStartTimeMs();    long taskCost=(containerSize) * (taskDuration / Statistics.SECOND_IN_MS);    durations.add(taskDuration);    finishTimes.add(taskData.getFinishTimeMs());    long memoryRequiredForVM=(long)(taskVM / CLUSTER_MEMORY_FACTOR);    long biggerMemoryRequirement=memoryRequiredForVM > taskMemory ? memoryRequiredForVM : taskMemory;    peakMemoryNeed=biggerMemoryRequirement > peakMemoryNeed ? biggerMemoryRequirement : peakMemoryNeed;    if (taskFinishTimeMax < taskData.getFinishTimeMs()) {      taskFinishTimeMax=taskData.getFinishTimeMs();    }    if (taskDurationMax < taskDuration) {      taskDurationMax=taskDuration;    }    _resourceUsed+=taskCost;  }  _delay=taskFinishTimeMax - (idealStartTime + taskDurationMax);  if (_delay < 0) {    _delay=0;  }  long wastedMemory=containerSize - (long)(peakMemoryNeed * MEMORY_BUFFER);  if (wastedMemory > 0) {    for (    long duration : durations) {      _resourceWasted+=(wastedMemory) * (duration / Statistics.SECOND_IN_MS);    }  }}  }
class C{  public AbstractDCCppSerialConnectionConfig(){  super();}  }
class C{  public ProductImagesRecyclerAdapter(Context context,ProductImagesRecyclerInterface productImagesRecyclerInterface){  this.context=context;  this.productImagesRecyclerInterface=productImagesRecyclerInterface;  productImagesUrls=new ArrayList<>();}  }
class C{  @Override public int read() throws IOException {  if (mTmpBuf == null) {    mTmpBuf=new char[1];  }  if (read(mTmpBuf,0,1) < 1) {    return -1;  }  return mTmpBuf[0];}  }
class C{  @Override public boolean equals(Object object){  if (object == this)   return true;  if (!(object instanceof Point))   return false;  Point p=(Point)object;  return (p.x == this.x) && (p.y == this.y);}  }
class C{  @Override public String type(){  return type;}  }
class C{  @Override public ValidationResult validate(IResource resource,int kind,ValidationState state,IProgressMonitor monitor){  ValidationResult result=new ValidationResult();  IIDETypeScriptProject tsProject=(IIDETypeScriptProject)state.get(TYPESCRIPT_VALIDATOR_CONTEXT);  if (tsProject != null && TypeScriptResourceUtil.canConsumeTsserver(resource) && tsProject.isInScope(resource)) {    IReporter reporter=result.getReporter(monitor);    IIDETypeScriptFile tsFile=null;    boolean wasOpened=false;    try {      tsFile=tsProject.getOpenedFile(resource);      if (tsFile != null) {        wasOpened=true;      } else {        try {          tsFile=tsProject.openFile(resource,null);        } catch (        TypeScriptException e) {          Trace.trace(Trace.SEVERE,"Error while opening file for validation",e);        }      }      if (tsFile != null) {        TypeScriptValidationHelper.validate(tsFile,reporter,this);      }    }  finally {      if (!wasOpened && tsFile != null) {        try {          tsFile.close();        } catch (        TypeScriptException e) {          Trace.trace(Trace.SEVERE,"Error while closing file for validation",e);        }      }    }  }  return result;}  }
class C{  public static void fail(String message){  Class junitAssertionFailedError=null;  try {    ClassLoader cl=Thread.currentThread().getContextClassLoader();    junitAssertionFailedError=Class.forName(JUNIT_ASSERTIONFAILED_ERROR,true,cl);  } catch (  ClassNotFoundException ex) {  }  if (junitAssertionFailedError == null) {    throw new AssertionError("Failed assertion and no JUnit found in classpath: " + message);  }  Constructor ctor;  try {    ctor=junitAssertionFailedError.getConstructor(new Class[]{String.class});  } catch (  NoSuchMethodException e) {    throw new AssertionError("Failed to find JUnit method 'fail' method: " + e.getMessage());  }  try {    throw (AssertionError)ctor.newInstance(new Object[]{message});  } catch (  Exception e) {    throw new AssertionError("Failed to call ctor of '" + JUNIT_ASSERTIONFAILED_ERROR + "': "+ e.getMessage());  }}  }
class C{  protected void startActivityForResult(Intent intent,int code){  if (fragment == null) {    activity.startActivityForResult(intent,code);  } else {    fragment.startActivityForResult(intent,code);  }}  }
class C{  public Matrix L(){  final Matrix L=new Matrix(m,n);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      if (i > j) {        L.$[L.addr.op(i,j)]=LU.$[LU.addr.op(i,j)];      } else       if (i == j) {        L.$[L.addr.op(i,j)]=1.0;      }    }  }  return L;}  }
class C{  public JSONObject put(String key,Object value) throws JSONException {  if (key == null) {    throw new JSONException("Null key.");  }  if (value != null) {    testValidity(value);    this.myHashMap.put(key,value);  } else {    remove(key);  }  return this;}  }
class C{  @Override public boolean supportsDoubleValues(){  return SUPPORTS_DOUBLE_VALUES;}  }
class C{  public JSONArray put(int index,Map<?,?> value) throws JSONException {  this.put(index,new JSONObject(value));  return this;}  }
class C{  @Override public void readFrom(ChannelBuffer data,int length){  dataType=data.readInt();}  }
class C{  private boolean checkDependencies(Plugin plugin,Collection<Plugin> plugins){  if (RapidMiner.getVersion().compareTo(getNecessaryRapidMinerVersion()) < 0) {    LogService.getRoot().log(Level.WARNING,"com.rapidminer.tools.plugin.Plugin.registring_operators_error_rm_version",new Object[]{plugin.getName(),plugin.getNecessaryRapidMinerVersion(),RapidMiner.getVersion()});    return false;  }  Iterator<Dependency> i=pluginDependencies.iterator();  while (i.hasNext()) {    Dependency dependency=i.next();    if (!dependency.isFulfilled(plugins)) {      LogService.getRoot().log(Level.WARNING,"com.rapidminer.tools.plugin.Plugin.registring_operators_error_ext_missing",new Object[]{plugin.getName(),dependency.getPluginExtensionId(),dependency.getPluginVersion()});      return false;    }  }  return true;}  }
class C{  private void addHyperlinkToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,true);}  }
class C{  public boolean hasCurrentTopic(Thread thread){synchronized (this.topicsQueue) {    if (this.currentTopic == null)     return false;    return this.currentTopic.hasThread(thread);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected SlimException(final boolean talkback,final Throwable t,final ErrorType type,final String... args){  super(t != null ? t.toString() : args.length > 0 ? args[0] : "",t);  mTalkback=talkback;  mErrorType=type;  mErrorArguments=args.clone();}  }
class C{  public boolean isValidName(String name){  return accountValidator.isValidName(name);}  }
class C{  public ConcurrentWeakValueCache(final int queueCapacity){  this(queueCapacity,0.75f,16);}  }
class C{  public static void fill(boolean[] array,int start,int end,boolean value){  checkBounds(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public XYStepAreaRenderer(int type){  this(type,null,null);}  }
class C{  private void writeMetadata0(BinaryRawWriterEx writer,int typeId,BinaryType meta){  if (meta == null)   writer.writeBoolean(false); else {    writer.writeBoolean(true);    BinaryMetadata meta0=((BinaryTypeImpl)meta).metadata();    Map<String,Integer> fields=meta0.fieldsMap();    writer.writeInt(typeId);    writer.writeString(meta.typeName());    writer.writeString(meta.affinityKeyFieldName());    writer.writeMap(fields);    writer.writeBoolean(meta.isEnum());  }}  }
class C{  static void load(){}  }
class C{  public boolean isListSources(){  Object oo=get_Value(COLUMNNAME_ListSources);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Task<ComputeSystemRestRep> create(ComputeSystemCreate input){  return postTask(input,baseUrl);}  }
class C{  @SuppressWarnings("unchecked") public SortedSet<E> subSet(E start,E end){  return subSet(start,true,end,false);}  }
class C{  public static RefactoringStatus createErrorStatus(String msg,RefactoringStatusContext context){  return createStatus(ERROR,msg,context,null,RefactoringStatusEntry.NO_CODE,null);}  }
class C{  public DVector2D(double[][] v){  defaultCapacity2=defaultDefaultCapacity2;  if (v.length == 0) {    vector=new double[defaultCapacity1][defaultCapacity2];    sizes=new IVector(defaultCapacity1);  } else {    vector=v;    sizes=new IVector(v.length);    for (int i=0; i < v.length; ++i) {      sizes.set(i,v[i].length);      defaultCapacity2=Math.max(defaultCapacity2,v[i].length);    }    for (int i=0; i < v.length; ++i)     if (v[i].length == 0)     v[i]=new double[defaultCapacity2];  }}  }
class C{  public static HashValue murmurhash3_x64_128(byte[] key,int offset,int len,int seed){  long h1=seed & 0x00000000FFFFFFFFL;  long h2=seed & 0x00000000FFFFFFFFL;  final long c1=0x87c37b91114253d5L;  final long c2=0x4cf5ad432745937fL;  int roundedEnd=offset + (len & 0xFFFFFFF0);  for (int i=offset; i < roundedEnd; i+=16) {    long k1=getLongLittleEndian(key,i);    long k2=getLongLittleEndian(key,i + 8);    k1*=c1;    k1=Long.rotateLeft(k1,31);    k1*=c2;    h1^=k1;    h1=Long.rotateLeft(h1,27);    h1+=h2;    h1=h1 * 5 + 0x52dce729;    k2*=c2;    k2=Long.rotateLeft(k2,33);    k2*=c1;    h2^=k2;    h2=Long.rotateLeft(h2,31);    h2+=h1;    h2=h2 * 5 + 0x38495ab5;  }  long k1=0;  long k2=0;switch (len & 15) {case 15:    k2=(key[roundedEnd + 14] & 0xffL) << 48;case 14:  k2|=(key[roundedEnd + 13] & 0xffL) << 40;case 13:k2|=(key[roundedEnd + 12] & 0xffL) << 32;case 12:k2|=(key[roundedEnd + 11] & 0xffL) << 24;case 11:k2|=(key[roundedEnd + 10] & 0xffL) << 16;case 10:k2|=(key[roundedEnd + 9] & 0xffL) << 8;case 9:k2|=(key[roundedEnd + 8] & 0xffL);k2*=c2;k2=Long.rotateLeft(k2,33);k2*=c1;h2^=k2;case 8:k1=((long)key[roundedEnd + 7]) << 56;case 7:k1|=(key[roundedEnd + 6] & 0xffL) << 48;case 6:k1|=(key[roundedEnd + 5] & 0xffL) << 40;case 5:k1|=(key[roundedEnd + 4] & 0xffL) << 32;case 4:k1|=(key[roundedEnd + 3] & 0xffL) << 24;case 3:k1|=(key[roundedEnd + 2] & 0xffL) << 16;case 2:k1|=(key[roundedEnd + 1] & 0xffL) << 8;case 1:k1|=(key[roundedEnd] & 0xffL);k1*=c1;k1=Long.rotateLeft(k1,31);k1*=c2;h1^=k1;}h1^=len;h2^=len;h1+=h2;h2+=h1;h1=fmix64(h1);h2=fmix64(h2);h1+=h2;h2+=h1;return new HashValue(h1,h2);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean thumb=evalBool(stack.pop());  Person p=getPerson(stack);  if (p != null && p.hasImage()) {    return p.getImageURL(thumb);  } else   return null;}  }
class C{  public ResolveResult(Object robj,String rcomp){  resolvedObj=robj;  try {    remainingName=new CompositeName(rcomp);  } catch (  InvalidNameException e) {  }}  }
class C{  public synchronized void flush() throws IOException {  checkValid();  m_logger.log(m_priority,m_output.toString());  m_output.setLength(0);}  }
class C{  public void clearRecipes(){  shapedRecipes.clear();  shapelessRecipes.clear();  dynamicRecipes.clear();  furnaceRecipes.clear();  furnaceFuels.clear();}  }
class C{  public HttpWaitStrategy withBasicCredentials(String username,String password){  this.username=username;  this.password=password;  return this;}  }
class C{  public boolean offsetValid(){  return offsetValid;}  }
class C{  @Override protected void onReset(){  super.onReset();  onStopLoading();  if (mApps != null) {    onReleaseResources(mApps);    mApps=null;  }  if (mPackageObserver != null) {    getContext().unregisterReceiver(mPackageObserver);    mPackageObserver=null;  }}  }
class C{  protected boolean isLevelEnabled(final int logLevel){  return (logLevel >= currentLogLevel);}  }
class C{  @Deprecated public static boolean equals(Iterable<? extends Statement> model1,Iterable<? extends Statement> model2){  return isomorphic(model1,model2);}  }
class C{  public boolean isSetVersions(){  return this.versions != null;}  }
class C{  public static Integer appendTypeInstanceComment(final SQLProvider provider,final int moduleId,final int instanceId,final String commentText,final Integer userId) throws CouldntSaveDataException {  Preconditions.checkArgument(moduleId > 0,"Error: module id must be greater then zero");  Preconditions.checkArgument(instanceId >= 0,"instance id must be greater or equal to zero");  Preconditions.checkNotNull(commentText,"Error: comment text argument can not be null");  Preconditions.checkNotNull(userId,"Error: user id argument can not be null");  final CConnection connection=provider.getConnection();  final String function=" { ? = call append_type_instance_comment(?, ?, ?, ?) } ";  try {    final CallableStatement appendCommentFunction=connection.getConnection().prepareCall(function);    try {      appendCommentFunction.registerOutParameter(1,Types.INTEGER);      appendCommentFunction.setInt(2,moduleId);      appendCommentFunction.setInt(3,instanceId);      appendCommentFunction.setInt(4,userId);      appendCommentFunction.setString(5,commentText);      appendCommentFunction.execute();      final int commentId=appendCommentFunction.getInt(1);      if (appendCommentFunction.wasNull()) {        throw new CouldntSaveDataException("Error: Got an comment id of null from the database");      }      return commentId;    }  finally {      appendCommentFunction.close();    }  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  private void launchTransaction(int serviceId,TransactionBundle txnBundle,boolean noNetwork){  if (noNetwork) {    onNetworkUnavailable(serviceId,txnBundle.getTransactionType());    Log.w(TAG,"launchTransaction: no network error!");  } else {    Message msg=mServiceHandler.obtainMessage(EVENT_TRANSACTION_REQUEST);    msg.arg1=serviceId;    msg.obj=txnBundle;    if (LOCAL_LOGV)     Log.v(TAG,"launchTransaction: sending message " + msg);    mServiceHandler.sendMessage(msg);  }}  }
class C{  private void fireMessageEventRequestListeners(String from,String packetID,String methodName){  MessageEventRequestListener[] listeners=null;  Method method;synchronized (messageEventRequestListeners) {    listeners=new MessageEventRequestListener[messageEventRequestListeners.size()];    messageEventRequestListeners.toArray(listeners);  }  try {    method=MessageEventRequestListener.class.getDeclaredMethod(methodName,new Class[]{String.class,String.class,MessageEventManager.class});    for (int i=0; i < listeners.length; i++) {      method.invoke(listeners[i],new Object[]{from,packetID,this});    }  } catch (  NoSuchMethodException e) {    e.printStackTrace();  }catch (  InvocationTargetException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }}  }
class C{  public AbTabItemView(Context context,AttributeSet attrs){  super(context,attrs);  this.setOrientation(LinearLayout.HORIZONTAL);  this.mContext=context;  mTextView=new TextView(context);  mTextView.setGravity(Gravity.CENTER);  mTextView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));  mTextView.setFocusable(true);  mTextView.setPadding(10,0,10,0);  mTextView.setSingleLine();  this.addView(mTextView);}  }
class C{  public void testMultipleParameterTypesTwoDArray(){  doTest();}  }
class C{  @NoInline private void verror(String where,String msg){  dumpIR(this,"Verify: " + where + ": "+ method,true);  VM.sysWriteln("VERIFY: " + where + " "+ msg);  throw new OptimizingCompilerException("VERIFY: " + where,msg);}  }
class C{  public void addAttributeCertificates(X509Store store) throws CMSException {  try {    for (Iterator it=store.getMatches(null).iterator(); it.hasNext(); ) {      X509AttributeCertificate attrCert=(X509AttributeCertificate)it.next();      certs.add(new DERTaggedObject(false,2,AttributeCertificate.getInstance(ASN1Primitive.fromByteArray(attrCert.getEncoded()))));    }  } catch (  IllegalArgumentException e) {    throw new CMSException("error processing attribute certs",e);  }catch (  IOException e) {    throw new CMSException("error processing attribute certs",e);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.TRACE_STATE_EXITED__STATE:    return state != null;}return super.eIsSet(featureID);}  }
class C{  public String toString(boolean reverse,Hashtable oidSymbols){  StringBuffer buf=new StringBuffer();  Vector components=new Vector();  boolean first=true;  StringBuffer ava=null;  for (int i=0; i < ordering.size(); i++) {    if (((Boolean)added.elementAt(i)).booleanValue()) {      ava.append('+');      appendValue(ava,oidSymbols,(ASN1ObjectIdentifier)ordering.elementAt(i),(String)values.elementAt(i));    } else {      ava=new StringBuffer();      appendValue(ava,oidSymbols,(ASN1ObjectIdentifier)ordering.elementAt(i),(String)values.elementAt(i));      components.addElement(ava);    }  }  if (reverse) {    for (int i=components.size() - 1; i >= 0; i--) {      if (first) {        first=false;      } else {        buf.append(',');      }      buf.append(components.elementAt(i).toString());    }  } else {    for (int i=0; i < components.size(); i++) {      if (first) {        first=false;      } else {        buf.append(',');      }      buf.append(components.elementAt(i).toString());    }  }  return buf.toString();}  }
class C{  public SQLIndenter(IDocument document,SQLHeuristicScanner scanner){  assert (document != null);  assert (scanner != null);  this.document=document;  this.scanner=scanner;}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  public static boolean canAccessInfo(String infoWindowName){  boolean result=false;  int roleid=Env.getAD_Role_ID(Env.getCtx());  String sqlRolePermission="Select COUNT(AD_ROLE_ID) AS ROWCOUNT FROM AD_ROLE WHERE AD_ROLE_ID=" + roleid + " AND ALLOW_INFO_"+ infoWindowName+ "='Y'";  log.config(sqlRolePermission);  PreparedStatement prolestmt=null;  ResultSet rs=null;  try {    prolestmt=DB.prepareStatement(sqlRolePermission,null);    rs=prolestmt.executeQuery();    rs.next();    if (rs.getInt("ROWCOUNT") > 0) {      result=true;    } else {      return false;    }  } catch (  Exception e) {    log.log(Level.SEVERE,"(1)",e);  } finally {    DB.close(rs,prolestmt);  }  return result;}  }
class C{  public TestServerStarter(int port){  super(port);}  }
class C{  public static float clamp(float val,float min,float max){  return Math.max(min,Math.min(max,val));}  }
class C{  public <E extends Enum<E>>E optEnum(Class<E> clazz,int index){  return this.optEnum(clazz,index,null);}  }
class C{  @RequestProcessing(value="/settings/password",method=HTTPRequestMethod.POST) @Before(adviceClass={LoginCheck.class,CSRFCheck.class,UpdatePasswordValidation.class}) public void updatePassword(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  context.renderJSON();  final JSONObject requestJSONObject=(JSONObject)request.getAttribute(Keys.REQUEST);  final String password=requestJSONObject.optString(User.USER_PASSWORD);  final String newPassword=requestJSONObject.optString(User.USER_NEW_PASSWORD);  final JSONObject user=userQueryService.getCurrentUser(request);  if (!password.equals(user.optString(User.USER_PASSWORD))) {    context.renderMsg(langPropsService.get("invalidOldPwdLabel"));    return;  }  user.put(User.USER_PASSWORD,newPassword);  try {    userMgmtService.updatePassword(user);    context.renderTrueResult();  } catch (  final ServiceException e) {    final String msg=langPropsService.get("updateFailLabel") + " - " + e.getMessage();    LOGGER.log(Level.ERROR,msg,e);    context.renderMsg(msg);  }}  }
class C{  public MyString1(char[] chars){  this.chars=new char[chars.length];  for (int i=0; i < chars.length; i++) {    this.chars[i]=chars[i];  }}  }
