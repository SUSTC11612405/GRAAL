class C{  public static <T>Matcher<T> not(final Matcher<? super T> p){  return new Not<>(p);}  }
class C{  public String repository(){  return this.repository;}  }
class C{  public void testDeploymentFromFile() throws Exception {  checkTask("org.apache.ignite.spi.deployment.uri.tasks.GridUriDeploymentTestTask3");  checkTask("GridUriDeploymentTestWithNameTask3");}  }
class C{  public static void localizeEvent(DataService dm,long objKey) throws NonUniqueBusinessKeyException {  create(dm,objKey,LocalizedObjectTypes.EVENT_DESC);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static CreateUsers parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  CreateUsers object=new CreateUsers();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"createUsers".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (CreateUsers)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list2=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","instanceId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setInstanceId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","users").equals(reader.getName())) {      list2.add(org.oscm.xsd.User.Factory.parse(reader));      boolean loopDone2=false;      while (!loopDone2) {        while (!reader.isEndElement())         reader.next();        reader.next();        while (!reader.isStartElement() && !reader.isEndElement())         reader.next();        if (reader.isEndElement()) {          loopDone2=true;        } else {          if (new javax.xml.namespace.QName("","users").equals(reader.getName())) {            list2.add(org.oscm.xsd.User.Factory.parse(reader));          } else {            loopDone2=true;          }        }      }      object.setUsers((org.oscm.xsd.User[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(org.oscm.xsd.User.class,list2));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","requestingUser").equals(reader.getName())) {      object.setRequestingUser(org.oscm.xsd.User.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public <T extends ServiceDocument>Operation sendPutAndWait(String serviceUri,T parameters) throws Throwable {  Operation op=Operation.createPut(UriUtils.buildUri(hosts[0],serviceUri,null)).setBody(parameters);  return sendRequestAndWait(op,hosts[0]);}  }
class C{  protected FinalizablePhantomReference(T referent,FinalizableReferenceQueue queue){  super(referent,queue.queue);  queue.cleanUp();}  }
class C{  public static ContentValues values(ContentValues vals,Place place){  vals.put(PLACE_ID,place.getPlaceId().getId());  vals.put(GOOGLE_URL,place.getUrl());  String name=place.getName();  vals.put(NAME,name);  vals.put(NORMALISED_NAME,SQLite.normalise(name));  vals.put(ADDRESS,place.getFormattedAddress());  vals.put(VICINITY,place.getVicinity());  double lat=place.getLatitude();  vals.put(LATITUDE,lat != NEGATIVE_INFINITY ? lat : null);  double lng=place.getLongitude();  vals.put(LONGITUDE,lng != NEGATIVE_INFINITY ? lng : null);  vals.put(LONGITUDE_COS,lat != NEGATIVE_INFINITY ? Geos.cos(lat) : null);  vals.put(INTL_PHONE,place.getIntlPhoneNumber());  vals.put(LOCAL_PHONE,place.getFormattedPhoneNumber());  vals.put(URL,place.getWebsite());  int price=place.getPriceLevel();  vals.put(PRICE,price > 0 ? price : null);  vals.put(REFRESHED_ON,SQLite.datetime());  return vals;}  }
class C{  public void testEvictionActionSetLocalDestroyPass(){  Region exampleRegion=this.cache.getRegion("example-region");  RegionAttributes<Object,Object> attrs=exampleRegion.getAttributes();  EvictionAttributes evicAttrs=attrs.getEvictionAttributes();  assertEquals(EvictionAction.LOCAL_DESTROY,evicAttrs.getAction());}  }
class C{  public Iterator dirEdgeIterator(){  return dirEdges.iterator();}  }
class C{  public void clear(){  Arrays.fill(count,0);}  }
class C{  private void registerListeners(Module module){  if (module instanceof IAudioPacketListener) {    mAudioPacketBroadcaster.addListener(((IAudioPacketListener)module).getAudioPacketListener());  }  if (module instanceof ICallEventListener) {    mCallEventBroadcaster.addListener(((ICallEventListener)module).getCallEventListener());  }  if (module instanceof IChannelEventListener) {    mChannelEventBroadcaster.addListener(((IChannelEventListener)module).getChannelEventListener());  }  if (module instanceof IComplexBufferListener) {    mComplexBufferBroadcaster.addListener(((IComplexBufferListener)module).getComplexBufferListener());  }  if (module instanceof IDecoderStateEventListener) {    mDecoderStateEventBroadcaster.addListener(((IDecoderStateEventListener)module).getDecoderStateListener());  }  if (module instanceof IFrequencyChangeListener) {    mFrequencyChangeEventBroadcaster.addListener(((IFrequencyChangeListener)module).getFrequencyChangeListener());  }  if (module instanceof IMessageListener) {    mMessageBroadcaster.addListener(((IMessageListener)module).getMessageListener());  }  if (module instanceof IMetadataListener) {    mMetadataBroadcaster.addListener(((IMetadataListener)module).getMetadataListener());  }  if (module instanceof IFilteredRealBufferListener) {    mFilteredRealBufferBroadcaster.addListener(((IFilteredRealBufferListener)module).getFilteredRealBufferListener());  }  if (module instanceof ISquelchStateListener) {    mSquelchStateBroadcaster.addListener(((ISquelchStateListener)module).getSquelchStateListener());  }  if (module instanceof IUnFilteredRealBufferListener) {    mUnFilteredRealBufferBroadcaster.addListener(((IUnFilteredRealBufferListener)module).getUnFilteredRealBufferListener());  }}  }
class C{  public void testDaveSkeaCase() throws ParseException {  checkIntersection("LINESTRING ( 2089426.5233462777 1180182.3877339689, 2085646.6891757075 1195618.7333999649 )","LINESTRING ( 1889281.8148903656 1997547.0560044837, 2259977.3672235999 483675.17050843034 )",1,new Coordinate[]{new Coordinate(2087536.6062609926,1187900.560566967)},0);}  }
class C{  private void removeOldCertificateValues(){  final Element toRemove=xadesSignature.getCertificateValues();  if (toRemove != null) {    unsignedSignaturePropertiesDom.removeChild(toRemove);    xadesSignature.resetCertificateSource();  }}  }
class C{  public Attribute removeAttribute(String name){  for (int i=_attributes.size() - 1; i >= 0; i--) {    Attribute attr=_attributes.get(i);    if (attr.getName().equals(name)) {      _attributes.remove(i);      return attr;    }  }  return null;}  }
class C{  public static void saveZipFile(String zipFileName,File toBeZipped) throws IOException, FileNotFoundException {  try {    if (!zipFileName.endsWith(".zip")) {      zipFileName+=".zip";    }    File zipFile=new File(zipFileName);    if (!zipFile.getParentFile().exists()) {      zipFile.getParentFile().mkdirs();    }    FileOutputStream fos=new FileOutputStream(zipFile);    ZipOutputStream zoStream=new ZipOutputStream(fos);    writeZipEntry(toBeZipped,zoStream,toBeZipped.getParent().length() + 1);    zoStream.close();  } catch (  SecurityException se) {    logger.warning("Security Exception caught while creating " + zipFileName);  }}  }
class C{  public static TriplePattern asTriplePattern(RDFNode node){  if (node instanceof Resource && ((Resource)node).hasProperty(SP.predicate)) {    return new TriplePatternImpl(node.asNode(),(EnhGraph)((Resource)node).getModel());  } else {    return null;  }}  }
class C{  public void undo(){  for (int i=commands.length - 1; i >= 0; i--) {    commands[i].undo();  }}  }
class C{  public void releaseReadLock(){  if (ThreadLogUtil.ENABLED_TRACE) {    ThreadLogUtil.traceLock(RELEASE_TEXT + " read " + name,lock);  }  lock.readLock().unlock();  if (ThreadLogUtil.ENABLED_TRACE) {    ThreadLogUtil.traceLock(RELEASED_TEXT + " read " + name,lock);  }}  }
class C{  static void handle(Path dir,WatchService watcher){  try {    try {      Path file=dir.resolve("anyfile");      for (int i=0; i < 2000; i++) {        WatchKey key=dir.register(watcher,ENTRY_CREATE,ENTRY_DELETE);        Files.createFile(file);        Files.delete(file);        key.cancel();      }    }  finally {      watcher.close();    }  } catch (  Exception e) {    e.printStackTrace();    failed=true;  }}  }
class C{  public static String quote(String string){  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    try {      return quote(string,sw).toString();    } catch (    IOException ignored) {      return "";    }  }}  }
class C{  public String toString(){  return getClassDeclaration().toString();}  }
class C{  public N4MFWizardNewProjectCreationPage(final N4MFProjectInfo projectInfo){  super(N4MFWizardNewProjectCreationPage.class.getName());  this.projectInfo=projectInfo;  setTitle("N4JS Project");  setDescription("Create a new N4JS project.");}  }
class C{  public static String dumpClassHierarchy(){  return classes.keySet().toString();}  }
class C{  public static final void sort(int[] a,double[] b){  mergesort(a,b,0,a.length - 1);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildDressingRoom(zone);}  }
class C{  GzipAsynchOutputStream(File file,int pipeSize,int gzipSize) throws IOException {  super(makeOutputStream(file,gzipSize),pipeSize);}  }
class C{  public int depth(){  if (root != null)   return root.depth();  return 0;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  @Override public void tearDown(){  mMatrix=null;}  }
class C{  @Inject public EclipseExternalLibraryWorkspace(final ExternalLibraryPreferenceStore preferenceStore){  locations=newHashSet(preferenceStore.getLocations());  preferenceStore.addListener(this);}  }
class C{  private void initSeedList(Map<String,String> args){  String seedsArg=args.get(SEEDS);  String[] seedIPs=null;  if (seedsArg != null && !seedsArg.trim().isEmpty()) {    seedIPs=seedsArg.split(",",-1);  }  if (seedIPs != null) {    for (    String ip : seedIPs) {      seeds.add(ip);    }  }  List<Configuration> configs=getAllConfigZNodes();  if (hasRecoveryReinitFlag(configs)) {    seeds.addAll(getAllActiveNodes(configs));  } else {    seeds.addAll(getNonAutoBootOrOtherActiveNode(configs));  }}  }
class C{  public void testConnectorSecuritySettingsSSL_false(){  resetSecuritySystemProperties();  AuthenticationInfo authInfo=null;  try {    authInfo=SecurityHelper.loadAuthenticationInformation("test.security.properties",true,TUNGSTEN_APPLICATION_NAME.CONNECTOR);  } catch (  ConfigurationException e) {    assertFalse("Could not load authentication and securiy information",true);  }  assertFalse(authInfo.isConnectorUseSSL());  assertNull(authInfo.getKeystoreLocation());  assertNull(authInfo.getKeystorePassword());  assertNull(authInfo.getTruststoreLocation());  assertNull(authInfo.getTruststorePassword());  String systemProperty=null;  systemProperty=System.getProperty("javax.net.ssl.keyStore",null);  assertNull(systemProperty);  systemProperty=System.getProperty("javax.net.ssl.keyStorePassword",null);  assertNull(systemProperty);  systemProperty=System.getProperty("javax.net.ssl.trustStore",null);  assertNull(systemProperty);  systemProperty=System.getProperty("javax.net.ssl.trustStorePassword",null);  assertNull(systemProperty);}  }
class C{  protected AbstractEvaluator(String expr){  this.expr=expr;}  }
class C{  public void compact(WbXmlEncoder encoder){  List<WbXmlContent> newContents=new ArrayList<WbXmlContent>();  for (  WbXmlContent content : contents) {    if (content.isString() && encoder.getDefinition().locateTagPlugin(tag) == null) {      List<String> strings=encoder.getDefinition().compactExtension(content.getString());      for (      String string : strings) {        newContents.add(new WbXmlContent(string));      }    } else {      newContents.add(content);    }  }  contents=newContents;  compacted=true;}  }
class C{  public static Observable<Integer> hotStream(){  return Observable.create(null).subscribeOn(Schedulers.newThread());}  }
class C{  @Override public boolean loadedUnitsHaveActiveECM(){  return true;}  }
class C{  public void readDataFile(String content) throws DataFileException {  if (content == null || content.length() <= 0)   throw new IllegalStateException("Content is empty, can't read file");  ByteArrayInputStream bis=new ByteArrayInputStream(content.getBytes());  readDataFile(bis,null);}  }
class C{  private void assertEqualsAccessiblityEvent(AccessibilityEvent expectedEvent,AccessibilityEvent receivedEvent){  TestCase.assertEquals("addedCount has incorrect value",expectedEvent.getAddedCount(),receivedEvent.getAddedCount());  TestCase.assertEquals("beforeText has incorrect value",expectedEvent.getBeforeText(),receivedEvent.getBeforeText());  TestCase.assertEquals("checked has incorrect value",expectedEvent.isChecked(),receivedEvent.isChecked());  TestCase.assertEquals("className has incorrect value",expectedEvent.getClassName(),receivedEvent.getClassName());  TestCase.assertEquals("contentDescription has incorrect value",expectedEvent.getContentDescription(),receivedEvent.getContentDescription());  TestCase.assertEquals("currentItemIndex has incorrect value",expectedEvent.getCurrentItemIndex(),receivedEvent.getCurrentItemIndex());  TestCase.assertEquals("enabled has incorrect value",expectedEvent.isEnabled(),receivedEvent.isEnabled());  TestCase.assertEquals("eventType has incorrect value",expectedEvent.getEventType(),receivedEvent.getEventType());  TestCase.assertEquals("fromIndex has incorrect value",expectedEvent.getFromIndex(),receivedEvent.getFromIndex());  TestCase.assertEquals("fullScreen has incorrect value",expectedEvent.isFullScreen(),receivedEvent.isFullScreen());  TestCase.assertEquals("itemCount has incorrect value",expectedEvent.getItemCount(),receivedEvent.getItemCount());  assertEqualsNotificationAsParcelableData(expectedEvent,receivedEvent);  TestCase.assertEquals("password has incorrect value",expectedEvent.isPassword(),receivedEvent.isPassword());  TestCase.assertEquals("removedCount has incorrect value",expectedEvent.getRemovedCount(),receivedEvent.getRemovedCount());  assertEqualsText(expectedEvent,receivedEvent);}  }
class C{  private void logSource(ObjectReference src){  HeaderByte.markAsLogged(src);  modBuffer.push(src);}  }
class C{  public static boolean isValidJavaEncoding(String javaEncoding){  if (javaEncoding != null) {    int length=javaEncoding.length();    if (length > 0) {      for (int i=1; i < length; i++) {        char c=javaEncoding.charAt(i);        if ((c < 'A' || c > 'Z') && (c < 'a' || c > 'z') && (c < '0' || c > '9')&& c != '.' && c != '_' && c != '-') {          return false;        }      }      return true;    }  }  return false;}  }
class C{  public long toLong(){  BigDecimal _value=this.getValue();  return _value.longValue();}  }
class C{  private static Enum<?> valueOf(Class<?> type,String valueName){  for (  Object obj : type.getEnumConstants()) {    Enum<?> e=(Enum<?>)obj;    if (e.name().equals(valueName)) {      return e;    }  }  return null;}  }
class C{  public void createPaymentForSeller(long platformAdminKey,long sellerAdminKey,VOOrganization seller,UserRoleType userRole) throws Exception {  container.login(platformAdminKey,UserRoleType.PLATFORM_OPERATOR.name());  savePSPAccount(seller,"psp1",getPSP(0));  addAvailablePaymentTypes(seller,PaymentInfoType.INVOICE.name(),PaymentInfoType.CREDIT_CARD.name(),PaymentInfoType.DIRECT_DEBIT.name());  container.login(sellerAdminKey,userRole.name());  savePaymentConfigForSeller(seller);}  }
class C{  public static void i(String tag,String msg){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg);}  }
class C{  public boolean onKeyUp(int keyCode,KeyEvent event){  if (isShowing() && mDropDownList.getSelectedItemPosition() >= 0) {    boolean consumed=mDropDownList.onKeyUp(keyCode,event);    if (consumed) {switch (keyCode) {case KeyEvent.KEYCODE_ENTER:case KeyEvent.KEYCODE_DPAD_CENTER:        dismiss();      break;  }}return consumed;}return false;}  }
class C{  public final void sendTo(ByteBuffer out){  finishWriting();  if (out.remaining() < size()) {    throw new BufferOverflowException();  }  if (this.chunks != null) {    for (    ByteBuffer bb : this.chunks) {      int bytesToWrite=bb.remaining();      if (bytesToWrite > 0) {        out.put(bb);        this.size-=bytesToWrite;      }    }  }{    ByteBuffer bb=this.buffer;    int bytesToWrite=bb.remaining();    if (bytesToWrite > 0) {      out.put(bb);      this.size-=bytesToWrite;    }  }}  }
class C{  public static Document createDocument(){  return createDocument(false);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.420 -0500",hash_original_method="7228E76FDB53607D003E8E811CE36961",hash_generated_method="5750746718A1E8C6C2CA1F87F40A83F9") public static Bundle forPair(String key,String value){  Bundle b=new Bundle(1);  b.putString(key,value);  return b;}  }
class C{  public final static char[] toCharArray(byte[] barr) throws UnsupportedEncodingException {  return new String(barr,CharsetUtil.UTF_8).toCharArray();}  }
class C{  public static void logSearchPanelLoadDuration(boolean wasPrefetch,long durationMs){  if (wasPrefetch) {    RecordHistogram.recordMediumTimesHistogram("Search.ContextualSearchDurationPrefetched",durationMs,TimeUnit.MILLISECONDS);  } else {    RecordHistogram.recordMediumTimesHistogram("Search.ContextualSearchDurationNonPrefetched",durationMs,TimeUnit.MILLISECONDS);  }  int code=!wasPrefetch ? NOT_PREFETCHED : (durationMs == 0 ? PREFETCHED_FULLY_LOADED : PREFETCHED_PARIALLY_LOADED);  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchPrefetchSummary",code,PREFETCH_BOUNDARY);}  }
class C{  public void run(){  try {    socket=new DatagramSocket(port);    if (logger != null)     logger.info("creating socket @ port " + port);    if (listener != null) {      listener.serverStarted();    }    while (true) {switch (state) {case WAITING_FOR_CLIENTS:        if (logger != null)         logger.info("Server running, waiting for connections...");      socket.setSoTimeout(0);    while (connections.size() < numClients) {      receiveAndAddConnection();    }  setState(ServerState.SYNCHING);break;case SYNCHING:socket.setSoTimeout(receiveTimeOut);if (connections.size() > 0) {doHeartBeat();byte[] payload=getSyncPayload();Iterator<UDPConnection> iter=connections.values().iterator();long beginSynch=System.nanoTime();while (iter.hasNext()) {UDPConnection conn=iter.next();if (!conn.isAlive()) {  iter.remove();  if (logger != null)   logger.warning(conn + " disconnected");  if (listener != null)   listener.clientDisconnected(conn);}conn.send(socket,payload);}int returnCount=0;while (returnCount < numClients && returnCount < connections.size() + 1) {try {  DatagramPacket receivePacket=new DatagramPacket(receiveData,receiveData.length);  socket.receive(receivePacket);  InetAddress ip=receivePacket.getAddress();  int port=receivePacket.getPort();  String connID=UDPConnection.buildHash(ip,port);  UDPConnection conn=connections.get(connID);  if (conn != null) {    conn.update();    returnCount++;  } else {    conn=new UDPConnection(ip,port);    conn.send(socket,getSyncPayload());    connections.put(connID,conn);    if (logger != null)     logger.fine("re-adding connection: " + conn);  }  if (listener != null)   listener.clientUpdated(conn,receivePacket);} catch (SocketTimeoutException e) {  break;}}long endSynch=System.nanoTime();long delta=(endSynch - beginSynch) / 1000000;if (delta < frameDuration) {int sleep=frameDuration - (int)delta;if (logger != null) logger.finest("sleeping: " + sleep);Thread.sleep(sleep);}} else {if (logger != null) logger.info("all clients disconnected");setState(ServerState.WAITING_FOR_CLIENTS);}}}} catch (Exception e) {handleException(e);} finally {if (logger != null) logger.info("server shutting down...");if (socket != null) socket.close();}}  }
class C{  @Override public ImmutableCollection<V> values(){  return valueList;}  }
class C{  public MultiStateTextFileChange(final String name,final IFile file){  super(name);  Assert.isNotNull(file);  fFile=file;  setTextType("txt");}  }
class C{  public NondominatedPopulation(DominanceComparator comparator,DuplicateMode duplicateMode){  super();  this.comparator=comparator;  this.duplicateMode=duplicateMode;}  }
class C{  protected void logw(String s){  Log.w(mName,s);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:26.013 -0500",hash_original_method="60944505B5CDBC3DF1F09D504ABE26CA",hash_generated_method="53F886DD2DB1D0EAB6B0035C406A33A2") public static void closeQuietly(FileDescriptor fd){}  }
class C{  private String treeToString(){  StringBuffer text=new StringBuffer();  if (m_topOfTree == null) {    return "Tree/Rule has not been built yet!";  }  text.append("M5 " + ((m_useUnpruned) ? "unpruned " : "pruned ") + ((m_regressionTree) ? "regression " : "model ")+ "tree:\n");  if (m_smoothPredictions == true) {    text.append("(using smoothed linear models)\n");  }  text.append(m_topOfTree.treeToString(0));  text.append(m_topOfTree.printLeafModels());  text.append("\nNumber of Rules : " + m_topOfTree.numberOfLinearModels());  return text.toString();}  }
class C{  private List<Solution> normalize(Population population){  List<Solution> result=new ArrayList<Solution>();  double[] min=new double[problem.getNumberOfObjectives()];  double[] max=new double[problem.getNumberOfObjectives()];  Arrays.fill(min,Double.POSITIVE_INFINITY);  Arrays.fill(max,Double.NEGATIVE_INFINITY);  for (  Solution solution : population) {    for (int i=0; i < problem.getNumberOfObjectives(); i++) {      min[i]=Math.min(min[i],solution.getObjective(i));      max[i]=Math.max(max[i],solution.getObjective(i));    }  }  for (  Solution solution : population) {    Solution newSolution=solution.copy();    for (int i=0; i < problem.getNumberOfObjectives(); i++) {      newSolution.setObjective(i,(max[i] - (newSolution.getObjective(i) - min[i]) + offset) / (max[i] - min[i]));    }    result.add(newSolution);  }  return result;}  }
class C{  public PriorClassifier(){}  }
class C{  public void unmarshall(Map<String,Object> map){  String type=map.get(KEY_TYPE).toString();  if (type == null) {    throw new IllegalArgumentException("map does not contain a type");  }  if (!acceptable(type)) {    throw new AcmeProtocolException("wrong type: " + type);  }  data.clear();  data.putAll(map);  authorize();}  }
class C{  @Bean public FanoutExchange deadLetterExchange(){  return new FanoutExchange(amqpProperties.getDeadLetterExchange());}  }
class C{  public JSONObject put(String key,double value) throws JSONException {  this.put(key,new Double(value));  return this;}  }
class C{  public static <T,F>void postCompleteDelayError(Subscriber<? super T> actual,Queue<T> queue,AtomicLongFieldUpdater<F> field,F instance,BooleanSupplier isCancelled,Throwable error){  if (queue.isEmpty()) {    if (error == null) {      actual.onComplete();    } else {      actual.onError(error);    }    return;  }  if (postCompleteDrainDelayError(field.get(instance),actual,queue,field,instance,isCancelled,error)) {    return;  }  for (; ; ) {    long r=field.get(instance);    if ((r & COMPLETED_MASK) != 0L) {      return;    }    long u=r | COMPLETED_MASK;    if (field.compareAndSet(instance,r,u)) {      if (r != 0L) {        postCompleteDrainDelayError(u,actual,queue,field,instance,isCancelled,error);      }      return;    }  }}  }
class C{  public static DockerImageIdentifier parse(final String image) throws DockerFileException {  if (image == null || image.isEmpty()) {    throw new DockerFileException("Null and empty argument value is forbidden");  }  Matcher matcher=IMAGE_PATTERN.matcher(image);  if (!matcher.matches()) {    throw new DockerFileException("Provided image reference is invalid");  }  DockerImageIdentifier.DockerImageIdentifierBuilder identifierBuilder=DockerImageIdentifier.builder();  String workingCopyOfImage=image;  int index=workingCopyOfImage.lastIndexOf('@');  if (index != -1) {    String digest=workingCopyOfImage.substring(index + 1);    if (!digest.isEmpty()) {      workingCopyOfImage=workingCopyOfImage.substring(0,index);      identifierBuilder.setDigest(digest);    }  }  index=workingCopyOfImage.lastIndexOf(':');  if (index != -1) {    if (workingCopyOfImage.lastIndexOf('/') < index) {      String tag=workingCopyOfImage.substring(index + 1);      if (!tag.isEmpty()) {        workingCopyOfImage=workingCopyOfImage.substring(0,index);        identifierBuilder.setTag(tag);      }    }  }  index=workingCopyOfImage.indexOf('/');  String beforeSlash=index > -1 ? workingCopyOfImage.substring(0,index) : "";  if (!beforeSlash.isEmpty() && (beforeSlash.contains(".") || beforeSlash.contains(":") || "localhost".equals(beforeSlash))) {    identifierBuilder.setRegistry(beforeSlash).setRepository(workingCopyOfImage.substring(index + 1));  } else {    identifierBuilder.setRepository(workingCopyOfImage);  }  return identifierBuilder.build();}  }
class C{  private boolean connect(){  influxDB=InfluxDBFactory.connect("http://" + host + ":"+ port,user,password);  influxDB.enableBatch(BATCH_BUFFER_SIZE,BATCH_FLUSH_TIMER,TimeUnit.SECONDS);  boolean connected=ping();  if (connected && log.isInfoEnabled()) {    log.info("|-InfluxDB Service active and connected...");  } else   if (!connected && log.isWarnEnabled()) {    log.warn("|-InfluxDB Service was not able to connect! Check connection settings!");  }  return connected;}  }
class C{  public Base64OutputStream(OutputStream out,int flags){  this(out,flags,true);}  }
class C{  public void addOrderByRule(OrderByRule<?> rule){  orderByRules.add(rule);}  }
class C{  public JSpinner(SpinnerModel model){  if (model == null) {    throw new NullPointerException("model cannot be null");  }  this.model=model;  this.editor=createEditor(model);  setUIProperty("opaque",true);  updateUI();}  }
class C{  protected int handleProcessingInstruction(final char[] text,int pos,final int end){switch (text[++pos]) {case '%':    if ((pos=CLOSED_PERCENT.search(text,pos,end)) == -1)     pos=end; else     pos+=CLOSED_PERCENT.length();  break;case '?':if ((pos=CLOSED_PIC.search(text,pos,end)) == -1) pos=end; else pos+=CLOSED_PIC.length();break;case '[':if ((pos=CLOSED_SECTION.search(text,pos,end)) == -1) pos=end; else pos+=CLOSED_SECTION.length();break;default :while (pos < end && text[pos++] != '>') ;break;}return pos;}  }
class C{  public IssueMatcher endsWith(String expectedSuffix){  return addPropertyMatcher(StringPropertyMatcher.Mode.EndsWith,false,expectedSuffix);}  }
class C{  public Integer(int value){}  }
class C{  public ConnectTimeoutException(final String message){  super(message);}  }
class C{  public static String cropBetween(String in,char limit){  return cropBetween(in,String.valueOf(new char[]{limit}));}  }
class C{  public float distanceToCenter(float x,float y){  PointF c=getCenter();  float dist=0f;  float xDist=0f;  float yDist=0f;  if (x > c.x) {    xDist=x - c.x;  } else {    xDist=c.x - x;  }  if (y > c.y) {    yDist=y - c.y;  } else {    yDist=c.y - y;  }  dist=(float)Math.sqrt(Math.pow(xDist,2.0) + Math.pow(yDist,2.0));  return dist;}  }
class C{  private ManagedSystemInfo lookupManagedSystemInfo(ISource S) throws AdeException {  ManagedSystemInfo M=null;  final String MANAGED_QUERY=String.format("SELECT * FROM MANAGED_SYSTEMS WHERE SOURCE_INTERNAL_ID=%s",S.getSourceInternalId());  ResultSet R=null;  String osName;  int gmtOffset;  logger.trace(String.format("lookupManagedSystemInfo(%s) -->entry",S.getSourceId()));  try {    R=executeScrollInsensitiveQuery(MANAGED_QUERY);    if (R == null) {      final String msg=String.format("lookupManagedSystemInfo(%s) - unexpected null (ResultSet)",S.getSourceId());      logger.error(msg);      throw new AdeInternalException(msg);    }    if (ExtDataStoreUtils.nonemptyQueryResult(R)) {      try {        R.first();        gmtOffset=R.getInt("GMT_OFFSET");        osName=R.getString("OPERATING_SYSTEM");        M=new ManagedSystemInfo(gmtOffset,osName);      } catch (      Throwable t) {        final String msg=String.format("lookupManagedSystemInfo(%s) - (ResultSet) extract error",S.getSourceId());        logger.error(msg);        throw new AdeInternalException(msg,t);      }    }  } catch (  AdeException e) {    throw e;  }catch (  Throwable t) {    final String msg=String.format("lookupManagedSystemInfo(%s) caught unexpected throwable: %s",S.getSourceId(),t.getMessage());    logger.error(msg);    throw new AdeInternalException(msg,t);  } finally {    if (R != null) {      try {        R.close();      } catch (      SQLException ex) {        logger.error("Error encountered closing the ResultSet.",ex);      }    }  }  logger.trace(String.format("lookupManagedSystemInfo(%s) <--exit",S.getSourceId()));  return M;}  }
class C{  public PriceView(final String id,final Pair<BigDecimal,BigDecimal> pricePair,final String currencySymbol,final String appliedPromos,final boolean showCurrencySymbol,final boolean showSavings){  this(id,new ProductPriceModelImpl("",currencySymbol,BigDecimal.ONE,pricePair != null ? pricePair.getFirst() : null,pricePair != null ? pricePair.getSecond() : null),appliedPromos,showCurrencySymbol,showSavings,false,false,false);}  }
class C{  public static void sort(int[] list){  for (int i=0; i < list.length - 1; i++) {    int min=list[i];    int minIndex=i;    for (int j=i + 1; j < list.length; j++) {      if (list[j] < min) {        min=list[j];        minIndex=j;      }    }    if (minIndex != i) {      list[minIndex]=list[i];      list[i]=min;    }  }}  }
class C{  public void load(){  assert files == null;  files=new HashMap<String,VirtualFile>();  try {    File file=new File(path);    ZipFile zipFile=new ZipFile(file);    zipFileHolder=new ZipFileHolder(zipFile,path);    Enumeration e=zipFile.getEntries();    while (e.hasMoreElements()) {      ZipEntry ze=(ZipEntry)e.nextElement();      String name=ze.getName();      VirtualFile f=new VirtualZipFile(zipFileHolder,MimeMappings.getMimeType(name),path + "$" + name,name);      files.put(name,f);    }  } catch (  SwcException.UnknownZipFormat e) {    throw new SwcException.NotASwcFile(path);  }catch (  SwcException e) {    throw e;  }catch (  Exception e) {    if (Trace.error) {      e.printStackTrace();    }    throw new SwcException.FilesNotRead(e.getMessage());  }}  }
class C{  private void doAcquireInterruptibly(long arg) throws InterruptedException {  final Node node=addWaiter(Node.EXCLUSIVE);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return;      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public void skippedEntity(String name) throws SAXException {  m_handler.skippedEntity(name);}  }
class C{  public boolean equals(Object o){  if (!(o instanceof HttpsPath))   return false;  HttpsPath test=(HttpsPath)o;  if (!_host.equals(test._host))   return false; else   if (_port != test._port)   return false; else   if (_query != null && !_query.equals(test._query))   return false; else   if (_query == null && test._query != null)   return false; else   return true;}  }
class C{  public static <T>boolean someIntersect(final Collection<T> c1,final Collection<T> c2){  if (c1.isEmpty()) {    return false;  }  if (c2.isEmpty()) {    return false;  }  final Iterator<T> iter=c1.iterator();  while (iter.hasNext()) {    if (c2.contains(iter.next())) {      return true;    }  }  return false;}  }
class C{  public boolean isAllCurrencies(){  Object oo=get_Value(COLUMNNAME_IsAllCurrencies);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public DockerMachineSource(MachineSource machineSource) throws MachineException {  super();  if (!DOCKER_IMAGE_TYPE.equals(machineSource.getType())) {    throw new MachineException("Docker machine source can only be built with '" + DOCKER_IMAGE_TYPE + "' type");  }  setType(DOCKER_IMAGE_TYPE);  final DockerImageIdentifier dockerImageIdentifier;  try {    dockerImageIdentifier=DockerImageIdentifierParser.parse(machineSource.getLocation());  } catch (  DockerFileException e) {    throw new MachineException("Try to build a docker machine source with an invalid location/content. It is not in the expected format",e);  }  this.registry=dockerImageIdentifier.getRegistry();  this.repository=dockerImageIdentifier.getRepository();  this.tag=dockerImageIdentifier.getTag();  this.digest=dockerImageIdentifier.getDigest();}  }
class C{  public int exitValue(){  return process.exitValue();}  }
class C{  @Override public String toString(){  return toString(true,false);}  }
class C{  static public boolean startStandardReport(ProcessInfo pi,boolean IsDirectPrint){  pi.setPrintPreview(!IsDirectPrint);  return startStandardReport(pi);}  }
class C{  public void testReadWholeMessage() throws Exception {  TestAllTypes message=TestUtil.getAllSet();  byte[] rawBytes=message.toByteArray();  assertEquals(rawBytes.length,message.getSerializedSize());  TestAllTypes message2=TestAllTypes.parseFrom(rawBytes);  TestUtil.assertAllFieldsSet(message2);  for (int blockSize=1; blockSize < 256; blockSize*=2) {    message2=TestAllTypes.parseFrom(new SmallBlockInputStream(rawBytes,blockSize));    TestUtil.assertAllFieldsSet(message2);  }}  }
class C{  private static boolean extractBooleanFromString(final String name,final String value){  if ("true".equals(value)) {    return true;  }  if ("false".equals(value)) {    return false;  }  throw new IllegalArgumentException("Invalid '" + name + "' attribute value: '"+ value+ "' should be 'true' or 'false'");}  }
class C{  @Override public boolean supportsStoredProcedures(){  debugCodeCall("supportsStoredProcedures");  return false;}  }
class C{  public static void tagNode(final SQLProvider provider,final INaviViewNode node,final int tagId) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE01309: provider argument can not be null");  Preconditions.checkNotNull(node,"IE01663: node argument can not be null");  final CConnection connection=provider.getConnection();  untagNode(provider,node,tagId);  final String tagQuery=String.format("INSERT INTO %s " + "(node_id, tag_id) " + "VALUES (%d, %d)",CTableNames.TAGGED_NODES_TABLE,node.getId(),tagId);  try {    connection.executeUpdate(tagQuery,true);  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  @POST @Consumes(MediaType.APPLICATION_XML) @Produces(MediaType.APPLICATION_JSON) @RequiresRole(role=Role.ADMINISTRATOR) public void add(String relyingPartyXMLString) throws Exception {  try {    Document xmlDoc=parseToDocument(relyingPartyXMLString);    getIDMClient().importTenantConfiguration(tenant,xmlDoc);  } catch (  NoSuchTenantException e) {    log.debug("Failed to add a relying party for tenant '{}' due to missing tenant",tenant,e);    throw new NotFoundException(sm.getString("ec.404"),e);  }catch (  DTOMapperException|InvalidArgumentException e) {    log.debug("Failed to add a relying party for tenant '{}' due to a client side error",tenant,e);    throw new BadRequestException(sm.getString("res.relyingparty.create.failed",tenant),e);  }catch (  Exception e) {    log.error("Failed to add a relying party for tenant '{}' due to a server side error",tenant,e);    throw new InternalServerErrorException(sm.getString("ec.500"),e);  }}  }
class C{  public ConsulTopologyFraction(URL url){  url(url);}  }
class C{  public ContentPanePainter(Which state){  super();  this.state=state;  this.ctx=new PaintContext(CacheMode.NO_CACHING);}  }
class C{  public boolean hasSubscriberForEvent(Class<?> eventClass){  return eventBus.hasSubscriberForEvent(eventClass);}  }
class C{  public void complainAboutUnknownAttributes(String elementXpath,String... knownAttributes){  SortedMap<String,SortedSet<String>> problems=new TreeMap<>();  NodeList nodeList=getNodeList(elementXpath,false);  for (int i=0; i < nodeList.getLength(); ++i) {    Element element=(Element)nodeList.item(i);    Set<String> unknownAttributes=getUnknownAttributes(element,knownAttributes);    if (null != unknownAttributes) {      String elementName=element.getNodeName();      SortedSet<String> allUnknownAttributes=problems.get(elementName);      if (null == allUnknownAttributes) {        allUnknownAttributes=new TreeSet<>();        problems.put(elementName,allUnknownAttributes);      }      allUnknownAttributes.addAll(unknownAttributes);    }  }  if (problems.size() > 0) {    StringBuilder message=new StringBuilder();    for (    Map.Entry<String,SortedSet<String>> entry : problems.entrySet()) {      if (message.length() > 0) {        message.append(", ");      }      message.append('<');      message.append(entry.getKey());      for (      String attributeName : entry.getValue()) {        message.append(' ');        message.append(attributeName);        message.append("=\"...\"");      }      message.append('>');    }    message.insert(0,"Unknown attribute(s) on element(s): ");    String msg=message.toString();    SolrException.log(log,msg);    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,msg);  }}  }
class C{  public static DateIterable createDateIterable(RecurrenceIterable rit){  return new RecurrenceIterableWrapper(rit);}  }
class C{  public void validateBusinessObjectFormatDdl(String expectedCustomDdlName,String expectedDdl,BusinessObjectFormatDdl actualBusinessObjectFormatDdl){  validateBusinessObjectFormatDdl(AbstractServiceTest.NAMESPACE,AbstractServiceTest.BDEF_NAME,AbstractServiceTest.FORMAT_USAGE_CODE,FileTypeEntity.TXT_FILE_TYPE,AbstractServiceTest.FORMAT_VERSION,BusinessObjectDataDdlOutputFormatEnum.HIVE_13_DDL,AbstractServiceTest.TABLE_NAME,expectedCustomDdlName,expectedDdl,actualBusinessObjectFormatDdl);}  }
class C{  public Builder iconButton(@DrawableRes int... icon){  if (icon.length > 3) {    Log.e("TextColorButton","Impossible to set Icon Button value more than 3! Please Check it");    throw new IllegalArgumentException("Impossible to set Icon Button value more than 3! Please Check it");  }  if (icon.length > 0) {    if (icon[0] == 0) {      Log.e("Icon","Impossible to set Icon to 0! Please Check it");    } else {      mIconBtn1=icon[0];      isIconBtn1=true;    }  }  if (icon.length > 1) {    if (icon[1] == 0) {      Log.e("Icon","Impossible to set Icon to 0! Please Check it");    } else {      mIconBtn2=icon[1];      isIconBtn2=true;    }  }  if (icon.length > 2) {    if (icon[2] == 0) {      Log.e("Icon","Impossible to set Icon to 0! Please Check it");    } else {      mIconBtn3=icon[2];      isIconBtn3=true;    }  }  return this;}  }
class C{  public boolean isEmpty(){  return extOrdering.isEmpty();}  }
class C{  public void reset(EvolutionState state,int thread){  FloatVectorSpecies s=(FloatVectorSpecies)species;  MersenneTwisterFast random=state.random[thread];  for (int x=0; x < genome.length; x++) {    int type=s.mutationType(x);    if (type == FloatVectorSpecies.C_INTEGER_RESET_MUTATION || type == FloatVectorSpecies.C_INTEGER_RANDOM_WALK_MUTATION) {      int minGene=(int)Math.floor(s.minGene(x));      int maxGene=(int)Math.floor(s.maxGene(x));      genome[x]=randomValueFromClosedInterval(minGene,maxGene,random);    } else {      genome[x]=(float)(s.minGene(x) + random.nextDouble(true,true) * (s.maxGene(x) - s.minGene(x)));    }  }}  }
class C{  public JSONObject(){  this.map=new LinkedHashMap();}  }
class C{  public static boolean isXtremIOVersion402OrGreater(String version){  if (NullColumnValueGetter.isNotNullValue(version)) {    String xioVersion=version.replace(".","").substring(0,3);    return (Integer.valueOf(xioVersion) >= XIO_4_0_2_VERSION);  }  return false;}  }
class C{  public boolean isReplaceable(IBlockAccess world){  return getBlock(world).isReplaceable(world,xCoord,yCoord,zCoord);}  }
class C{  public TextAndStreamNoBuilder ignoreSpecification(){  return new TextAndStreamNoBuilder(builder);}  }
class C{  public String toString(){  if (null != this.getContract()) {    return this.getContract().getSymbol().toUpperCase();  }  return super.toString();}  }
class C{  public static boolean isVplexCgCreated(BlockConsistencyGroup cg,String vplexSystem,String clusterName,String cgName,boolean isDistributed){  boolean vplexCgCreated=false;  if (cg.getSystemConsistencyGroups() == null) {    return false;  }  StringSet clusterCgNames=cg.getSystemConsistencyGroups().get(vplexSystem);  if (clusterCgNames != null && !clusterCgNames.isEmpty()) {    if (isDistributed) {      String cluster1CgName=buildClusterCgName(CLUSTER_1,cgName);      String cluster2CgName=buildClusterCgName(CLUSTER_2,cgName);      vplexCgCreated=clusterCgNames.contains(cluster1CgName) || clusterCgNames.contains(cluster2CgName);    } else {      String clusterCgName=buildClusterCgName(clusterName,cgName);      vplexCgCreated=clusterCgNames.contains(clusterCgName);    }  }  return vplexCgCreated;}  }
class C{  protected AbstractXYItemLabelGenerator(String formatString,DateFormat xFormat,NumberFormat yFormat){  this(formatString,NumberFormat.getInstance(),yFormat);  this.xDateFormat=xFormat;}  }
class C{  public void addAnimator(Animator animator){  viewInputHandler.addAnimator(animator);}  }
class C{  public static <S extends HasFieldStateChangedHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    FieldStateChangedEvent event=new FieldStateChangedEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public void log(Level level,Throwable throwable,String msg){  innerLog(level,throwable,msg,UNKNOWN_ARG,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
class C{  private void parseOperation(final String query) throws MalformedQueryException {  if (useBigdataParser) {    new Bigdata2ASTSPARQLParser().parseOperation(query,baseURI);  } else {    QueryParserUtil.parseOperation(QueryLanguage.SPARQL,query,baseURI);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TSTRUCT_METHOD__DEFINED_MEMBER:    setDefinedMember((TStructMember)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public Differences compare(final Node controlNode,final Node testNode){  Differences differences=new Differences();  log("IN the compare(node, node) method");  Node parent=null;  XNode xControlNode=new XNode(controlNode,XMLUtil.generateXPath(controlNode,_ignoringWhitespace,_includeNodeValueInXPath,false));  XNode xTestNode=new XNode(testNode,XMLUtil.generateXPath(testNode,_ignoringWhitespace,_includeNodeValueInXPath,false));  xControlNode.setDepth(0);  xTestNode.setDepth(0);  NodeResult nodeResult=new NodeResult(xControlNode,xTestNode,differences);  if (testNode.getNodeType() == Node.DOCUMENT_NODE) {    log("Test Node is Document Node");    Element controlRoot=((Document)controlNode).getDocumentElement();    if (testNode.hasChildNodes()) {      if (!controlNode.hasChildNodes()) {        if (!_config.isCustomDifference()) {          differences.add("/" + testNode.getNodeName() + " is entirely new document");        } else {          Difference diff=new Difference(DifferenceConstants.NEW_DOCUMENT,null,xTestNode);          differences.add(diff);        }        return differences;      } else {        differences.add(compareChildNodes(xControlNode,xTestNode));      }    } else {      if (!_config.isCustomDifference()) {        differences.add("/" + testNode.getNodeName() + " is an empty document");      } else {        Difference diff=new Difference(DifferenceConstants.EMPTY_DOCUMENT,xControlNode,xTestNode);        differences.add(diff);      }      return differences;    }  } else {    nodeResult=compareSimilarNodes(xControlNode,xTestNode,new OrderedMap(OrderedMap.TYPE_UNSYNCHRONIZED_MOV));    differences.add(nodeResult);  }  return differences;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void defineDictionary(String name,Map<String,Object> mapping){  dictionaries.put(name,mapping);}  }
class C{  protected static GeoPoint parseKmlCoord(String input){  int end1=input.indexOf(',');  int end2=input.indexOf(',',end1 + 1);  try {    if (end2 == -1) {      double lon=Double.parseDouble(input.substring(0,end1));      double lat=Double.parseDouble(input.substring(end1 + 1,input.length()));      return new GeoPoint(lat,lon);    } else {      double lon=Double.parseDouble(input.substring(0,end1));      double lat=Double.parseDouble(input.substring(end1 + 1,end2));      double alt=Double.parseDouble(input.substring(end2 + 1,input.length()));      return new GeoPoint(lat,lon,alt);    }  } catch (  NumberFormatException e) {    return null;  }catch (  IndexOutOfBoundsException e) {    return null;  }}  }
class C{  private void adaptIcon(){  if (titleTextView != null) {    titleTextView.setCompoundDrawablesWithIntrinsicBounds(icon,null,null,null);  }  adaptTitleContainerVisibility();}  }
class C{  public int format(float val,byte[] buf,int off,int len){  float pos=Math.abs(val);  if (pos == 0.) {    return format("0.0",buf,off,len);  } else   if (Float.isNaN(val)) {    return format(NOT_A_NUMBER,buf,off,len);  } else   if (Float.isInfinite(val)) {    if (val > 0) {      return format("Infinity",buf,off,len);    } else {      return format("-Infinity",buf,off,len);    }  }  int power=(int)Math.floor(Math.log(pos) * ByteFormatter.I_LOG_10);  int shift=FLOAT_SHIFT_BASE - power;  float scale;  float scale2=1;  if (shift < FLOAT_SHIFT_LIMIT) {    scale=(float)ByteFormatter.NUMBER_BASE_POWERS[shift + ByteFormatter.ZERO_POW];  } else {    scale2=(float)ByteFormatter.NUMBER_BASE_POWERS[FLOAT_SHIFT_LIMIT + ByteFormatter.ZERO_POW];    scale=(float)ByteFormatter.NUMBER_BASE_POWERS[shift - FLOAT_SHIFT_LIMIT + ByteFormatter.ZERO_POW];  }  pos=pos * scale * scale2;  int bits=Float.floatToIntBits(pos);  int exp=((bits & FLOAT_EXPONENT_BIT_MASK) >> FLOAT_EXPONENT_EXCESS) + FLOAT_MIN_EXPONENT;  int numb=bits & FLOAT_VALUE_BIT_MASK;  if (exp > FLOAT_MIN_EXPONENT) {    numb|=FLOAT_EXPONENT_NORMALIZE_BIT;  } else {    exp++;  }  numb=numb << exp - FLOAT_EXPONENT_EXCESS;  int ndig=format(numb,this.tbuf1,0,ByteFormatter.TEMP_BUFFER_SIZE);  return combineReal(val,buf,off,len,this.tbuf1,ndig,shift);}  }
class C{  public boolean vetoGameCreation(Game game,G1Message g1Message){  boolean result=false;  if (game.isInState(Game.OBSERVING_STATE) && Raptor.getInstance().getPreferences().getBoolean(PreferenceKeys.BOARD_IGNORE_OBSERVED_GAMES_IF_PLAYING) && (!isBughouse(game) || (isBughouse(game) && !connector.getGameService().isManaging(g1Message.parterGameId)))) {    for (    Connector connector : ConnectorService.getInstance().getConnectors()) {      if (connector.isLoggedInUserPlayingAGame()) {        result=true;        break;      }    }  }  return result;}  }
class C{  public AccessStructure(String user,jplagWebService.server.Option usr_option,MimeMultipart inputZipFile) throws JPlagException {  this(user,usr_option);  saveZipFile(inputZipFile);}  }
class C{  static void fastRadixSort(ArrayList<byte[]> byteArrayList,int byteOffset){  if (byteArrayList.size() < 512) {    Collections.sort(byteArrayList,new ByteArrayComparator(byteOffset));  } else   if (byteArrayList.size() < 4096) {    ArrayList<byte[]>[] buckets=new ArrayList[256];    final int slotSize=Math.max(byteArrayList.size() >> 8,4);    ArrayList<byte[]> prefix=new ArrayList<byte[]>();    int len=byteArrayList.size();    for (int i=0; i < len; i++) {      byte[] val=byteArrayList.get(i);      if (byteOffset >= val.length) {        prefix.add(val);      } else {        int index=val[byteOffset] & 0xFF;        ArrayList<byte[]> slot=buckets[index];        if (slot == null) {          slot=new ArrayList<byte[]>(slotSize);          buckets[index]=slot;        }        slot.add(val);      }    }    byteArrayList.clear();    byteArrayList.addAll(prefix);    for (int i=0; i < buckets.length; i++) {      ArrayList<byte[]> slot=buckets[i];      if (slot != null) {        fastRadixSort(slot,byteOffset + 1);        byteArrayList.addAll(slot);      }    }  } else {    ArrayList<byte[]>[] buckets=new ArrayList[65536];    ArrayList<byte[]> prefix=new ArrayList<byte[]>();    int len=byteArrayList.size();    for (int i=0; i < len; i++) {      byte[] val=byteArrayList.get(i);      if (byteOffset + 1 >= val.length) {        prefix.add(val);      } else {        int index=(val[byteOffset] & 0xFF) << 8 | (val[byteOffset + 1] & 0xFF);        ArrayList<byte[]> slot=buckets[index];        if (slot == null) {          slot=new ArrayList<byte[]>();          buckets[index]=slot;        }        slot.add(val);      }    }    byteArrayList.clear();    Collections.sort(prefix,new ByteArrayComparator(byteOffset));    byteArrayList.addAll(prefix);    for (int i=0; i < buckets.length; i++) {      ArrayList<byte[]> slot=buckets[i];      if (slot != null) {        fastRadixSort(slot,byteOffset + 2);        byteArrayList.addAll(slot);      }    }  }}  }
class C{  public static OutputStream createTeedOutputStream(File file,OutputStream otherStream,boolean zip,boolean append,boolean terminate) throws IOException {  Diagnostic.developerLog("FileUtils.outputStream " + file.getAbsolutePath() + " "+ zip+ " "+ append);  OutputStream outStream=new FileOutputStream(file,append);  outStream=new TeeOutputStream(new BufferedOutputStreamFix(outStream,BUFFERED_STREAM_SIZE),otherStream);  if (zip) {    outStream=new GzipAsynchOutputStream(outStream,terminate);  }  return outStream;}  }
class C{  public BooleanFunction(IndexedParent[] parents){  if (parents == null) {    throw new NullPointerException();  }  for (  IndexedParent parent : parents) {    if (parent == null) {      throw new NullPointerException();    }  }  this.parents=parents;  int length=1;  for (int i=0; i < parents.length; i++) {    length*=2;  }  lookupTable=new boolean[length];}  }
class C{  public static StreamRoutePartitioner createRoutePartitioner(List<String> outputComponentIds,StreamDefinition streamDefinition,StreamPartition partition){  return new BasicStreamRoutePartitioner(outputComponentIds,streamDefinition,partition);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public Size2D arrange(Graphics2D g2,RectangleConstraint constraint){  RectangleConstraint cc=toContentConstraint(constraint);  LengthConstraintType w=cc.getWidthConstraintType();  LengthConstraintType h=cc.getHeightConstraintType();  Size2D contentSize=null;  if (w == LengthConstraintType.NONE) {    if (h == LengthConstraintType.NONE) {      contentSize=arrangeNN(g2);    } else     if (h == LengthConstraintType.RANGE) {      throw new RuntimeException("Not yet implemented.");    } else     if (h == LengthConstraintType.FIXED) {      throw new RuntimeException("Not yet implemented.");    }  } else   if (w == LengthConstraintType.RANGE) {    if (h == LengthConstraintType.NONE) {      contentSize=arrangeRN(g2,cc.getWidthRange());    } else     if (h == LengthConstraintType.RANGE) {      contentSize=arrangeRR(g2,cc.getWidthRange(),cc.getHeightRange());    } else     if (h == LengthConstraintType.FIXED) {      throw new RuntimeException("Not yet implemented.");    }  } else   if (w == LengthConstraintType.FIXED) {    if (h == LengthConstraintType.NONE) {      contentSize=arrangeFN(g2,cc.getWidth());    } else     if (h == LengthConstraintType.RANGE) {      throw new RuntimeException("Not yet implemented.");    } else     if (h == LengthConstraintType.FIXED) {      throw new RuntimeException("Not yet implemented.");    }  }  assert contentSize != null;  if (contentSize.width <= 0.0 || contentSize.height <= 0.0) {    return new Size2D(0.0,0.0);  } else {    return new Size2D(calculateTotalWidth(contentSize.getWidth()),calculateTotalHeight(contentSize.getHeight()));  }}  }
class C{  void connect(int sourcePort,Target<P> target,Edge edge){  if (edge == null)   throw new NullPointerException();  Consumer<P> input=target.vertex.invocation.getInputs().get(target.port);  invocation.setTarget(sourcePort,input);  edges.set(sourcePort,edge);}  }
class C{  public String convertSWFToHTML(InputStream in) throws Exception {  StringWriter out1=new StringWriter();  output=new PrintWriter(out1);  TagParser parser=new TagParser(this);  SWFReader reader=new SWFReader(parser,in);  reader.readFile();  in.close();  sizeCount=reader.size;  final String ret="<html>" + (headerstr.isEmpty() ? "<body>" : "<header>" + headerstr + "</header><body>") + out1.toString()+ "</body></html>";  return ret;}  }
class C{  public GridBagConstraints(){  gridx=RELATIVE;  gridy=RELATIVE;  gridwidth=1;  gridheight=1;  weightx=0;  weighty=0;  anchor=CENTER;  fill=NONE;  insets=new Insets(0,0,0,0);  ipadx=0;  ipady=0;}  }
class C{  public static final double[][] times(final double[][] m1,final double s1){  return timesEquals(copy(m1),s1);}  }
class C{  protected boolean isEndpointShuttingDown(DistributedMember id){  return giveUpOnMember(owner.getDM().getMembershipManager(),id);}  }
class C{  @Override public void addLifecycleListener(LifecycleListener listener){  this.lifecycle.addLifecycleListener(listener);}  }
class C{  public void addClickingListener(OnWheelClickedListener listener){  clickingListeners.add(listener);}  }
class C{  public InvalidFrequencyException(String message,long invalidFrequency,long validFrequency){  super(message);  mInvalidFrequency=invalidFrequency;  mValidFrequency=validFrequency;}  }
class C{  public NATURAL_INNER_JOIN NATURAL_INNER_JOIN(String tableToJoin){  return new NATURAL_INNER_JOIN(this,tableToJoin);}  }
class C{  public ExtractInterfaceDescriptor(String project,String description,String comment,Map arguments,int flags){  super(IJavaRefactorings.EXTRACT_INTERFACE,project,description,comment,arguments,flags);}  }
class C{  public static void filledEllipse(double x,double y,double semiMajorAxis,double semiMinorAxis){  if (!(semiMajorAxis >= 0))   throw new IllegalArgumentException("ellipse semimajor axis must be nonnegative");  if (!(semiMinorAxis >= 0))   throw new IllegalArgumentException("ellipse semiminor axis must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * semiMajorAxis);  double hs=factorY(2 * semiMinorAxis);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.fill(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public User discoverUserByProfileId(Long profileId){  User user;  user=Optional.of(twitter.userOperations().getUserProfile(profileId)).map(null).get();  user=getUser(user);  log.info(String.format("Discover user: %s",user.getScreenName()));  return user;}  }
class C{  public static <T>Set<T> unmodifiableSet(Set<? extends T> s){  return new UnmodifiableSet<>(s);}  }
class C{  private String permission(FileStatus status){  FsPermission perm=status.getPermission();  return "0" + perm.getUserAction().ordinal() + perm.getGroupAction().ordinal()+ perm.getOtherAction().ordinal();}  }
class C{  public boolean checkName(String name){  return (elementFromName(name) != null);}  }
class C{  public static Comparator<String> stringComparator(){  return STRING_COMPARATOR;}  }
class C{  public ConditionalTransferEntropyCalculatorViaCondMutualInfo(String condMiCalculatorClassName) throws InstantiationException, IllegalAccessException, ClassNotFoundException {  @SuppressWarnings("unchecked") Class<ConditionalMutualInfoCalculatorMultiVariate> condMiClass=(Class<ConditionalMutualInfoCalculatorMultiVariate>)Class.forName(condMiCalculatorClassName);  ConditionalMutualInfoCalculatorMultiVariate condMiCalc=condMiClass.newInstance();  construct(condMiCalc);}  }
class C{  void abortPull(){  stop=true;}  }
class C{  public static boolean isNumeric(String number){  if (null != number)   return number.matches("-?\\d+(\\.\\d+)?");  return false;}  }
class C{  @Override public int draw(){  if (!this.isDrawing) {    throw new IllegalStateException("Not tesselating!");  } else {    this.isDrawing=false;    int offs=0;    while (offs < vertexCount) {      int vtc=0;      if (drawMode == 7 && convertQuadsToTriangles) {        vtc=Math.min(vertexCount - offs,trivertsInBuffer);      } else {        vtc=Math.min(vertexCount - offs,nativeBufferSize >> 5);      }      TmtTessellator.intBuffer.clear();      TmtTessellator.intBuffer.put(this.rawBuffer,offs * 10,vtc * 10);      TmtTessellator.byteBuffer.position(0);      TmtTessellator.byteBuffer.limit(vtc * 40);      offs+=vtc;      if (TmtTessellator.useVBO) {        this.vboIndex=(this.vboIndex + 1) % TmtTessellator.vboCount;        ARBBufferObject.glBindBufferARB(ARBVertexBufferObject.GL_ARRAY_BUFFER_ARB,TmtTessellator.vertexBuffers.get(this.vboIndex));        ARBBufferObject.glBufferDataARB(ARBVertexBufferObject.GL_ARRAY_BUFFER_ARB,TmtTessellator.byteBuffer,ARBBufferObject.GL_STREAM_DRAW_ARB);      }      if (this.hasTexture) {        if (TmtTessellator.useVBO) {          GL11.glTexCoordPointer(4,GL11.GL_FLOAT,40,12L);        } else {          TmtTessellator.floatBuffer.position(3);          GL11.glTexCoordPointer(4,40,TmtTessellator.floatBuffer);        }        GL11.glEnableClientState(GL11.GL_TEXTURE_COORD_ARRAY);      }      if (this.hasBrightness) {        OpenGlHelper.setClientActiveTexture(OpenGlHelper.lightmapTexUnit);        if (TmtTessellator.useVBO) {          GL11.glTexCoordPointer(2,GL11.GL_SHORT,40,36L);        } else {          TmtTessellator.shortBuffer.position(18);          GL11.glTexCoordPointer(2,40,TmtTessellator.shortBuffer);        }        GL11.glEnableClientState(GL11.GL_TEXTURE_COORD_ARRAY);        OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);      }      if (this.hasColor) {        if (TmtTessellator.useVBO) {          GL11.glColorPointer(4,GL11.GL_UNSIGNED_BYTE,40,28L);        } else {          TmtTessellator.byteBuffer.position(28);          GL11.glColorPointer(4,true,40,TmtTessellator.byteBuffer);        }        GL11.glEnableClientState(GL11.GL_COLOR_ARRAY);      }      if (this.hasNormals) {        if (TmtTessellator.useVBO) {          GL11.glNormalPointer(GL11.GL_UNSIGNED_BYTE,40,32L);        } else {          TmtTessellator.byteBuffer.position(32);          GL11.glNormalPointer(40,TmtTessellator.byteBuffer);        }        GL11.glEnableClientState(GL11.GL_NORMAL_ARRAY);      }      if (TmtTessellator.useVBO) {        GL11.glVertexPointer(3,GL11.GL_FLOAT,40,0L);      } else {        TmtTessellator.floatBuffer.position(0);        GL11.glVertexPointer(3,40,TmtTessellator.floatBuffer);      }      GL11.glEnableClientState(GL11.GL_VERTEX_ARRAY);      if (this.drawMode == 7 && convertQuadsToTriangles) {        GL11.glDrawArrays(GL11.GL_TRIANGLES,0,vtc);      } else {        GL11.glDrawArrays(this.drawMode,0,vtc);      }      GL11.glDisableClientState(GL11.GL_VERTEX_ARRAY);      if (this.hasTexture) {        GL11.glDisableClientState(GL11.GL_TEXTURE_COORD_ARRAY);      }      if (this.hasBrightness) {        OpenGlHelper.setClientActiveTexture(OpenGlHelper.lightmapTexUnit);        GL11.glDisableClientState(GL11.GL_TEXTURE_COORD_ARRAY);        OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);      }      if (this.hasColor) {        GL11.glDisableClientState(GL11.GL_COLOR_ARRAY);      }      if (this.hasNormals) {        GL11.glDisableClientState(GL11.GL_NORMAL_ARRAY);      }    }    if (rawBufferSize > 0x20000 && rawBufferIndex < (rawBufferSize << 3)) {      rawBufferSize=0;      rawBuffer=null;    }    int var1=this.rawBufferIndex * 4;    this.reset();    return var1;  }}  }
class C{  public AccountHeaderBuilder withActivity(@NonNull Activity activity){  this.mActivity=activity;  return this;}  }
class C{  @Override public boolean equals(Object other){  if (other == null) {    return false;  } else   if (other.getClass() != this.getClass()) {    return false;  } else   if (((Peer)other).getNetwork() == null) {    return this.getNetwork() == null;  }  return ((Peer)other).getNetwork().equals(this.getNetwork());}  }
class C{  public void testVocabulary() throws IOException {  assertVocabulary(analyzer,getDataPath("frlighttestdata.zip"),"frlight.txt");}  }
class C{  public final int offsetToX(int line,int offset){  painter.currentLineTokens=null;  return _offsetToX(line,offset);}  }
class C{  public void reset(){  m_flushedStartDoc=false;  m_foundFirstElement=false;  m_outputStream=null;  clearParameters();  m_result=null;  m_resultContentHandler=null;  m_resultDeclHandler=null;  m_resultDTDHandler=null;  m_resultLexicalHandler=null;  m_serializer=null;  m_systemID=null;  m_URIResolver=null;  m_outputFormat=new OutputProperties(Method.XML);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Grammar(String grammarText) throws org.antlr.runtime.RecognitionException {  this(GRAMMAR_FROM_STRING_NAME,grammarText,null);}  }
class C{  public static int darker(int color,float factor){  int a=Color.alpha(color);  int r=Color.red(color);  int g=Color.green(color);  int b=Color.blue(color);  return Color.argb(a,Math.max((int)(r * factor),0),Math.max((int)(g * factor),0),Math.max((int)(b * factor),0));}  }
class C{  public static void showViewInNewWindow(final Window parent,final IViewContainer container,final INaviView[] views){  showViews(parent,container,views,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:41.469 -0500",hash_original_method="1CEB56F49B83563E5DD5C049B4907F1C",hash_generated_method="EA016316EFA6DA7F4832ED4A08DBEDBE") public static int encode(byte[] data,OutputStream out) throws IOException {  return encoder.encode(data,0,data.length,out);}  }
class C{  public static String toString(long n){  return IntegralToString.longToString(n);}  }
class C{  public SwitchPreference(Context context){  this(context,null);}  }
class C{  public DateTime(final Date date){  if (Cfg.DEBUG) {    Check.requires(date != null,"Null date");  }  final long millisecs=date.getTime();  this.date=new Date(millisecs);  ticks=millisecs * MILLISEC + TICSK_FROM_1601_TO_1970;}  }
class C{  public boolean isCollapsible(){  Object oo=get_Value(COLUMNNAME_IsCollapsible);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @SuppressWarnings("unchecked") public RequestConditionHolder(RequestCondition<?> requestCondition){  this.condition=(RequestCondition<Object>)requestCondition;}  }
class C{  protected String generateIdentityKey(){  if (mReuseInfo == null) {    return joinSizeInfoToKey(getIdentityUrl(),mRequestSize.x,mRequestSize.y);  } else {    return joinSizeTagToKey(getIdentityUrl(),mReuseInfo.getIdentitySize());  }}  }
class C{  private TcpUdpSshPingResourceStore(){  init();}  }
class C{  public RemoveFromCertificateChainAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("RemoveFromCertificateChainAction.statusbar"));  putValue(NAME,res.getString("RemoveFromCertificateChainAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("RemoveFromCertificateChainAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("RemoveFromCertificateChainAction.image")))));}  }
class C{  public static String formatTimeWithMillis(long time){  return formatTimeWithMillis(new Date(time));}  }
class C{  @Override public void onNewFrame(HeadTransform headTransform){  headTransform.getEulerAngles(mEulerAngles,0);  if (i % 100 == 0) {    Log.i(TAG,mEulerAngles[0] + " " + mEulerAngles[1]+ " "+ mEulerAngles[2]);  }  i++;  if (tracking) {    shift();    mQueue.addRequest(mEulerAngles[0],mEulerAngles[1]);  }}  }
class C{  private Path toPrimary(Path path){  return convertPath(path,getUri());}  }
class C{  public static boolean hasMavenNature(IProject project){  try {    if (NatureUtils.hasNature(project,MavenUtils.MAVEN2_NATURE_ID)) {      return true;    }    if (NatureUtils.hasNature(project,MavenUtils.OLD_MAVEN2_NATURE_ID)) {      return true;    }  } catch (  CoreException ce) {    Activator.getDefault().getLog().log(new Status(IStatus.ERROR,Activator.PLUGIN_ID,"Unable to examine natures on project " + project.getName(),ce));  }  return false;}  }
class C{  public void reset(){  mCursorStyle=CURSOR_STYLE_BLOCK;  mArgIndex=0;  mContinueSequence=false;  mEscapeState=ESC_NONE;  mInsertMode=false;  mTopMargin=mLeftMargin=0;  mBottomMargin=mRows;  mRightMargin=mColumns;  mAboutToAutoWrap=false;  mForeColor=TextStyle.COLOR_INDEX_FOREGROUND;  mBackColor=TextStyle.COLOR_INDEX_BACKGROUND;  setDefaultTabStops();  mUseLineDrawingG0=mUseLineDrawingG1=false;  mUseLineDrawingUsesG0=true;  mSavedStateMain.mSavedCursorRow=mSavedStateMain.mSavedCursorCol=mSavedStateMain.mSavedEffect=mSavedStateMain.mSavedDecFlags=0;  mSavedStateAlt.mSavedCursorRow=mSavedStateAlt.mSavedCursorCol=mSavedStateAlt.mSavedEffect=mSavedStateAlt.mSavedDecFlags=0;  mCurrentDecSetFlags=0;  setDecsetinternalBit(DECSET_BIT_AUTOWRAP,true);  setDecsetinternalBit(DECSET_BIT_SHOWING_CURSOR,true);  mSavedDecSetFlags=mSavedStateMain.mSavedDecFlags=mSavedStateAlt.mSavedDecFlags=mCurrentDecSetFlags;  mUtf8Index=mUtf8ToFollow=0;  mColors.reset();  mSession.onColorsChanged();}  }
class C{  public int numObjectsAtLocation(Double3D location){  if (location == null)   return 0;  Bag cell=getRawObjectsAtLocation(discretize(location));  if (cell == null)   return 0;  int count=0;  Object[] objs=cell.objs;  int numObjs=cell.numObjs;  for (int i=0; i < numObjs; i++) {    Object loc=getObjectLocation(objs[i]);    if (loc.equals(location))     count++;  }  return count;}  }
class C{  public static <T>T use(Class categoryClass,Closure<T> closure){  return THREAD_INFO.getInfo().use(categoryClass,closure);}  }
class C{  public Builder baseModelId(String baseModelId){  this.baseModelId=baseModelId;  return this;}  }
class C{  public static boolean removeDirectory(String pathToDir){  return deleteRecursive(new File(pathToDir));}  }
class C{  protected void afterShow(){}  }
class C{  public void warning(SAXParseException ex){  print("warning: " + print(ex));}  }
class C{  public void resizeInner(RectF newInner){  Matrix m=getRotMatrix();  Matrix m0=getInverseRotMatrix();  float[] outerCorners=CropMath.getCornersFromRect(outer);  m.mapPoints(outerCorners);  float[] oldInnerCorners=CropMath.getCornersFromRect(inner);  float[] newInnerCorners=CropMath.getCornersFromRect(newInner);  RectF ret=new RectF(newInner);  for (int i=0; i < newInnerCorners.length; i+=2) {    float[] c={newInnerCorners[i],newInnerCorners[i + 1]};    float[] c0=Arrays.copyOf(c,2);    m0.mapPoints(c0);    if (!CropMath.inclusiveContains(outer,c0[0],c0[1])) {      float[] outerSide=CropMath.closestSide(c,outerCorners);      float[] pathOfCorner={newInnerCorners[i],newInnerCorners[i + 1],oldInnerCorners[i],oldInnerCorners[i + 1]};      float[] p=GeometryMathUtils.lineIntersect(pathOfCorner,outerSide);      if (p == null) {        p=new float[2];        p[0]=oldInnerCorners[i];        p[1]=oldInnerCorners[i + 1];      }switch (i) {case 0:case 1:        ret.left=(p[0] > ret.left) ? p[0] : ret.left;      ret.top=(p[1] > ret.top) ? p[1] : ret.top;    break;case 2:case 3:  ret.right=(p[0] < ret.right) ? p[0] : ret.right;ret.top=(p[1] > ret.top) ? p[1] : ret.top;break;case 4:case 5:ret.right=(p[0] < ret.right) ? p[0] : ret.right;ret.bottom=(p[1] < ret.bottom) ? p[1] : ret.bottom;break;case 6:case 7:ret.left=(p[0] > ret.left) ? p[0] : ret.left;ret.bottom=(p[1] < ret.bottom) ? p[1] : ret.bottom;break;default :break;}}}float[] retCorners=CropMath.getCornersFromRect(ret);m0.mapPoints(retCorners);innerRotated=retCorners;reconstrain();}  }
class C{  public LongArraySpliterator(long[] array,int additionalCharacteristics){  this(array,0,array.length,additionalCharacteristics);}  }
class C{  public MessageBuilder appendString(String text,Formatting... format){  boolean blockPresent=false;  for (  Formatting formatting : format) {    if (formatting == Formatting.BLOCK) {      blockPresent=true;      continue;    }    builder.append(formatting.getTag());  }  if (blockPresent)   builder.append(Formatting.BLOCK.getTag());  builder.append(text);  if (blockPresent)   builder.append(Formatting.BLOCK.getTag());  for (int i=format.length - 1; i >= 0; i--) {    if (format[i] == Formatting.BLOCK)     continue;    builder.append(format[i].getTag());  }  return this;}  }
class C{  private boolean checkClassName(String className){  boolean include=true;  if (className.startsWith(rootPackage)) {    for (int i=0; i < exclusions.size(); i++) {      if (className.contains(exclusions.get(i))) {        Log.i(TAG,"Skipping Class " + className + ". Includes exclusion string: "+ exclusions.get(i)+ ".");        include=false;        break;      }    }  } else {    include=false;    Log.i(TAG,"Skipping Class " + className + ". Not in the root package: "+ rootPackage+ ".");  }  return include;}  }
class C{  @Override public String toString(){  StringBuilder builder=new StringBuilder().append(x).append(',').append(y);  if (buttons != BUTTON_NO || transitionState == TS_WHEEL) {    builder.append(" [");    if ((buttons & BUTTON_LEFT) != BUTTON_NO)     builder.append("left,");    if ((buttons & BUTTON_RIGHT) != BUTTON_NO)     builder.append("right,");    if ((buttons & BUTTON_MIDDLE) != BUTTON_NO)     builder.append("middle,");    if (transitionState == TS_WHEEL)     builder.append("delta ").append(delta).append(',');    return builder.deleteCharAt(builder.length() - 1).append(']').toString();  } else   return builder.toString();}  }
class C{  public List<IModelChange> compareTables(Database sourceModel,Table sourceTable,Database targetModel,Table targetTable){  ArrayList<IModelChange> changes=new ArrayList<IModelChange>();  if (platformInfo.isForeignKeysSupported()) {    for (int fkIdx=0; fkIdx < sourceTable.getForeignKeyCount(); fkIdx++) {      ForeignKey sourceFk=sourceTable.getForeignKey(fkIdx);      ForeignKey targetFk=findCorrespondingForeignKey(targetTable,sourceFk);      if (targetFk == null) {        if (log.isDebugEnabled()) {          log.debug(sourceFk + " needs to be removed from table " + sourceTable.getName());        }        changes.add(new RemoveForeignKeyChange(sourceTable,sourceFk));      }    }    for (int fkIdx=0; fkIdx < targetTable.getForeignKeyCount(); fkIdx++) {      ForeignKey targetFk=targetTable.getForeignKey(fkIdx);      ForeignKey sourceFk=findCorrespondingForeignKey(sourceTable,targetFk);      if (sourceFk == null) {        if (log.isDebugEnabled()) {          log.debug(targetFk + " needs to be created for table " + sourceTable.getName());        }        changes.add(new AddForeignKeyChange(targetTable,targetFk));      }    }  }  if (platformInfo.isIndicesSupported()) {    for (int indexIdx=0; indexIdx < sourceTable.getIndexCount(); indexIdx++) {      IIndex sourceIndex=sourceTable.getIndex(indexIdx);      IIndex targetIndex=findCorrespondingIndex(targetTable,sourceIndex);      if (targetIndex == null) {        if (log.isDebugEnabled()) {          log.debug("Index " + sourceIndex.getName() + " needs to be removed from table "+ sourceTable.getName());        }        changes.add(new RemoveIndexChange(sourceTable,sourceIndex));      }    }    for (int indexIdx=0; indexIdx < targetTable.getIndexCount(); indexIdx++) {      IIndex targetIndex=targetTable.getIndex(indexIdx);      IIndex sourceIndex=findCorrespondingIndex(sourceTable,targetIndex);      if (sourceIndex == null) {        if (log.isDebugEnabled()) {          log.debug("Index " + targetIndex.getName() + " needs to be created for table "+ sourceTable.getName());        }        changes.add(new AddIndexChange(targetTable,targetIndex));      }    }  }  HashMap<Column,TableChange> addColumnChanges=new HashMap<Column,TableChange>();  for (int columnIdx=0; columnIdx < targetTable.getColumnCount(); columnIdx++) {    Column targetColumn=targetTable.getColumn(columnIdx);    Column sourceColumn=sourceTable.findColumn(targetColumn.getName(),caseSensitive);    if (sourceColumn == null) {      log.debug("Column {} needs to be created for table {}",new Object[]{targetColumn.getName(),sourceTable.getName()});      AddColumnChange change=new AddColumnChange(sourceTable,targetColumn,columnIdx > 0 ? targetTable.getColumn(columnIdx - 1) : null,columnIdx < targetTable.getColumnCount() - 1 ? targetTable.getColumn(columnIdx + 1) : null);      changes.add(change);      addColumnChanges.put(targetColumn,change);    } else {      changes.addAll(compareColumns(sourceTable,sourceColumn,targetTable,targetColumn));    }  }  for (int columnIdx=targetTable.getColumnCount() - 1; columnIdx >= 0; columnIdx--) {    Column targetColumn=targetTable.getColumn(columnIdx);    AddColumnChange change=(AddColumnChange)addColumnChanges.get(targetColumn);    if (change == null) {      break;    } else {      change.setAtEnd(true);    }  }  Column[] sourcePK=sourceTable.getPrimaryKeyColumns();  Column[] targetPK=targetTable.getPrimaryKeyColumns();  if ((sourcePK.length == 0) && (targetPK.length > 0)) {    if (log.isDebugEnabled()) {      log.debug("A primary key needs to be added to the table " + sourceTable.getName());    }    changes.add(new AddPrimaryKeyChange(targetTable,targetPK));  } else   if ((targetPK.length == 0) && (sourcePK.length > 0)) {    if (log.isDebugEnabled()) {      log.debug("The primary key needs to be removed from the table " + sourceTable.getName());    }    changes.add(new RemovePrimaryKeyChange(sourceTable,sourcePK));  } else   if ((sourcePK.length > 0) && (targetPK.length > 0)) {    boolean changePK=false;    if (sourcePK.length != targetPK.length) {      changePK=true;    } else {      for (int pkColumnIdx=0; (pkColumnIdx < sourcePK.length) && !changePK; pkColumnIdx++) {        if ((caseSensitive && !sourcePK[pkColumnIdx].getName().equals(targetPK[pkColumnIdx].getName())) || (!caseSensitive && !sourcePK[pkColumnIdx].getName().equalsIgnoreCase(targetPK[pkColumnIdx].getName()))) {          changePK=true;        }      }    }    if (changePK) {      if (log.isDebugEnabled()) {        log.debug("The primary key of table " + sourceTable.getName() + " needs to be changed");      }      changes.add(new PrimaryKeyChange(sourceTable,sourcePK,targetPK));    }  }  for (int columnIdx=0; columnIdx < sourceTable.getColumnCount(); columnIdx++) {    Column sourceColumn=sourceTable.getColumn(columnIdx);    Column targetColumn=targetTable.findColumn(sourceColumn.getName(),caseSensitive);    if (targetColumn == null) {      if (log.isDebugEnabled()) {        log.debug("Column " + sourceColumn.getName() + " needs to be removed from table "+ sourceTable.getName());      }      changes.add(new RemoveColumnChange(sourceTable,sourceColumn));    }  }  return changes;}  }
class C{  @Override public void characters(char[] ch,int start,int length) throws SAXException {  try {    for (int j=0; j < length; j++) {      char c=ch[start + j];switch (c) {case '<':        writer.write("&lt;");      break;case '>':    writer.write("&gt;");  break;case '&':writer.write("&amp;");break;default :writer.write(c);}}} catch (IOException e) {throw (SAXException)new SAXException(e).initCause(e);}}  }
class C{  public void startApp(){  if (bFirst == false) {    System.out.println("Starting GPIO Demo");    try {      led1=GPIOManager.getPin(LED1_PIN_ID);      led2=GPIOManager.getPin(LED2_PIN_ID);      ledPort=GPIOManager.getPort(LED_PORT_ID);      button1=GPIOManager.getPin(BUTTON1_PIN_ID);      button2=GPIOManager.getPin(BUTTON2_PIN_ID);      button3=GPIOManager.getPin(BUTTON3_PIN_ID);    } catch (    Exception ex) {      ex.printStackTrace();      System.out.println("Get pin and port fail");      return;    }    try {      testCase=new BasicSyncTestCaseMIDP();    } catch (    Exception e) {      e.printStackTrace();      System.out.println(e.getMessage());      System.out.println(e.toString());    }    System.out.println("set listener for button 1,2,3");    try {      button1.setInputListener(button1Listener);      button2.setInputListener(button2Listener);      button3.setInputListener(button3Listener);    } catch (    Exception ex) {      ex.printStackTrace();    }    bFirst=true;  } else {    System.out.println("GPIO Demo is already started..");  }}  }
class C{  public T caseArrowFunction(ArrowFunction object){  return null;}  }
class C{  public TextContent(){  super(CONSTRUCT);}  }
class C{  boolean hasNStats(){  return mVersion >= N_HISTOGRAM_AND_SDF_TYPE_VERSION;}  }
class C{  static GeoPolygon generateGeoPolygon(final PlanetModel planetModel,final List<GeoPoint> filteredPointList,final List<GeoPolygon> holes,final GeoPoint testPoint,final boolean testPointInside){  final SidedPlane initialPlane=new SidedPlane(testPoint,filteredPointList.get(0),filteredPointList.get(1));  GeoCompositePolygon rval=new GeoCompositePolygon();  MutableBoolean seenConcave=new MutableBoolean();  if (buildPolygonShape(rval,seenConcave,planetModel,filteredPointList,new BitSet(),0,1,initialPlane,holes,testPoint) == false) {    if (testPointInside) {      rval=new GeoCompositePolygon();      seenConcave=new MutableBoolean();      buildPolygonShape(rval,seenConcave,planetModel,filteredPointList,new BitSet(),0,1,initialPlane,holes,null);      return rval;    }    rval=new GeoCompositePolygon();    seenConcave=new MutableBoolean();    buildPolygonShape(rval,seenConcave,planetModel,filteredPointList,new BitSet(),0,1,new SidedPlane(initialPlane),holes,null);    return rval;  } else {    if (!testPointInside) {      return rval;    }    rval=new GeoCompositePolygon();    seenConcave=new MutableBoolean();    buildPolygonShape(rval,seenConcave,planetModel,filteredPointList,new BitSet(),0,1,new SidedPlane(initialPlane),holes,null);    return rval;  }}  }
class C{  public ResumableHttpUploadTask(UrlConnectionFactory urlConnectionFactory,ResumableHttpFileUploader uploader,boolean resume){  this.urlConnectionFactory=urlConnectionFactory;  this.uploader=uploader;  this.resume=resume;}  }
class C{  public void onBuyMoreClicks(View view){  if (isSubscribed()) {    String requestId=PurchasingManager.initiatePurchaseRequest(getResources().getString(R.string.consumable_sku));    storeRequestId(requestId,NUM_CLICKS);  } else {    generateSubscribeDialog();  }}  }
class C{  public void testWriteLinesUTF8() throws IOException {  List<String> lines=Arrays.asList(EN_STRING,JA_STRING);  Files.write(tmpfile,lines);  List<String> actual=Files.readAllLines(tmpfile,UTF_8);  assertTrue(actual.equals(lines),"Unexpected lines");}  }
class C{  public long defaultMaxRequestLength(){  return defaultMaxRequestLength;}  }
class C{  @SuppressWarnings("unchecked") private static void mergeSort(Object[] in,Object[] out,int start,int end){  int len=end - start;  if (len <= SIMPLE_LENGTH) {    for (int i=start + 1; i < end; i++) {      net.sourceforge.retroweaver.harmony.runtime.java.lang.Comparable<Object> current=(net.sourceforge.retroweaver.harmony.runtime.java.lang.Comparable<Object>)out[i];      Object prev=out[i - 1];      if (current.compareTo(prev) < 0) {        int j=i;        do {          out[j--]=prev;        } while (j > start && current.compareTo(prev=out[j - 1]) < 0);        out[j]=current;      }    }    return;  }  int med=(end + start) >>> 1;  mergeSort(out,in,start,med);  mergeSort(out,in,med,end);  if (((net.sourceforge.retroweaver.harmony.runtime.java.lang.Comparable<Object>)in[med - 1]).compareTo(in[med]) <= 0) {    System.arraycopy(in,start,out,start,len);    return;  }  int r=med, i=start;  do {    net.sourceforge.retroweaver.harmony.runtime.java.lang.Comparable<Object> fromVal=(net.sourceforge.retroweaver.harmony.runtime.java.lang.Comparable<Object>)in[start];    net.sourceforge.retroweaver.harmony.runtime.java.lang.Comparable<Object> rVal=(net.sourceforge.retroweaver.harmony.runtime.java.lang.Comparable<Object>)in[r];    if (fromVal.compareTo(rVal) <= 0) {      int l_1=find(in,rVal,-1,start + 1,med - 1);      int toCopy=l_1 - start + 1;      System.arraycopy(in,start,out,i,toCopy);      i+=toCopy;      out[i++]=rVal;      r++;      start=l_1 + 1;    } else {      int r_1=find(in,fromVal,0,r + 1,end - 1);      int toCopy=r_1 - r + 1;      System.arraycopy(in,r,out,i,toCopy);      i+=toCopy;      out[i++]=fromVal;      start++;      r=r_1 + 1;    }  } while ((end - r) > 0 && (med - start) > 0);  if ((end - r) <= 0) {    System.arraycopy(in,start,out,i,med - start);  } else {    System.arraycopy(in,r,out,i,end - r);  }}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("void set(java.lang.Object,java.lang.Object)")) {    java_lang_reflect_Field_set(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Object get(java.lang.Object)")) {    java_lang_reflect_Field_get(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public List<FileInfo> indexFiles(){  return indexFiles;}  }
class C{  public GreaterThan(){  super(Boolean.class,Number.class,Number.class);}  }
class C{  private static HelpNode fromXml(InputSource source) throws ParserConfigurationException, SAXException, IOException {  SAXParserFactory factory=SAXParserFactory.newInstance();  SAXParser parser=factory.newSAXParser();  HelpReader reader=new HelpReader();  parser.parse(source,reader);  return reader.root;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>ConstantMap<K,V> of(Order<? super K> keyOrder,K firstKey,V firstValue,Object... others){  SparseMap<K,V> sparse=new SparseMap<K,V>(keyOrder);  sparse.put(firstKey,firstValue);  for (int i=0; i < others.length; i++)   sparse.put((K)others[i],(V)others[++i]);  return new ConstantMap<K,V>(sparse);}  }
class C{  public static boolean isVcfExtension(File f){  return f.getName().endsWith(VCF_SUFFIX) || f.getName().endsWith(VCF_SUFFIX + FileUtils.GZ_SUFFIX);}  }
class C{  public DefaultStateMachineContext(List<StateMachineContext<S,E>> childs,S state,E event,Map<String,Object> eventHeaders,ExtendedState extendedState,Map<S,S> historyStates){  this(childs,state,event,eventHeaders,extendedState,historyStates,null);}  }
class C{  protected void revalidate(){  valid=true;}  }
class C{  protected void extendExprGraph(LetExpression exprGraph,BlockContainer container,Set<OutputAnchor> outsideAnchors){  OutputAnchor anchor=this.getStartAnchor();  if (container == anchor.getContainer())   anchor.extendExprGraph(exprGraph,container,outsideAnchors); else   outsideAnchors.add(anchor);}  }
class C{  public void addStmtToEndOfMainLoop(Stmt stmt){  harnessMainBody.getUnits().insertBefore(stmt,inLoopStmt);}  }
class C{  @Nonnull public BugInstance addField(FieldAnnotation fieldAnnotation){  add(fieldAnnotation);  return this;}  }
class C{  private void onSensorDataStart(Attributes attributes){  sensorName=attributes.getValue(ATTRIBUTE_NAME);}  }
class C{  static <T,R1,R>AnyMValue<R> each2(final MonadicValue<? extends T> monadicValue,final Function<? super T,MonadicValue<R1>> value2,final BiFunction<? super T,? super R1,? extends R> yieldingFunction){  return AnyM.ofValue(For.iterable(monadicValue).iterable(null).yield2(yieldingFunction).unwrap());}  }
class C{  private void checkSelectable(){  boolean oldIsSelectable=isSelectable;  isSelectable=isSelectAllEnabled();  if (oldIsSelectable != isSelectable) {    fireEnablementChanged(SELECT_ALL);  }}  }
class C{  public PluginException(Throwable throwable){  super(throwable);}  }
class C{  public void startDocument() throws SAXException {}  }
class C{  @Override protected void onFinishInflate(){  super.onFinishInflate();  if (!isInEditMode()) {    inflateView();    configFonts();    configSeekbar();    configDragViewHelper();    selectFont(Config.getConfig().getFont());    mIsNightMode=Config.getConfig().isNightMode();    if (mIsNightMode) {      mDayButton.setSelected(false);      mNightButton.setSelected(true);    } else {      mDayButton.setSelected(true);      mNightButton.setSelected(false);    }  }}  }
class C{  public char[][] toArray(){  char[][] result=new char[max + 1][];  for (  Map.Entry<Character,String> entry : map.entrySet()) {    result[entry.getKey()]=entry.getValue().toCharArray();  }  return result;}  }
class C{  protected AbstractIntSpliterator(long est,int additionalCharacteristics){  this.est=est;  this.characteristics=((additionalCharacteristics & Spliterator.SIZED) != 0) ? additionalCharacteristics | Spliterator.SUBSIZED : additionalCharacteristics;}  }
class C{  public EqualsBuilder append(final short lhs,final short rhs){  if (isEquals == false) {    return this;  }  isEquals=(lhs == rhs);  return this;}  }
class C{  private boolean isShallowSampled(Coordinate p0,Coordinate p2,int i0,int i2,double distanceTol){  int inc=(i2 - i0) / NUM_PTS_TO_CHECK;  if (inc <= 0)   inc=1;  for (int i=i0; i < i2; i+=inc) {    if (!isShallow(p0,p2,inputLine[i],distanceTol))     return false;  }  return true;}  }
class C{  public static void link(final NaviNode sourceNode,final NaviNode targetNode){  sourceNode.m_children.add(targetNode);  targetNode.m_parents.add(sourceNode);}  }
class C{  public static XMLTree from(java.io.File file) throws IOException {  return from(file.toPath());}  }
class C{  public AnnotationsDirectoryItem(){  super(ALIGNMENT,-1);  classAnnotations=null;  fieldAnnotations=null;  methodAnnotations=null;  parameterAnnotations=null;}  }
class C{  public void appendCSSDefinition(StringBuilder buf){  buf.append("\n.");  buf.append(name);  buf.append('{');  for (  Pair<String,String> pair : statements) {    buf.append(pair.getFirst());    buf.append(':');    buf.append(pair.getSecond());    buf.append(";\n");  }  buf.append("}\n");}  }
class C{  public void rescheduleTask(int newInterval){  if (_synchronizationTask != null && newInterval >= MIN_INTERVAL_DELAY) {    _synchronizationTask.cancel(false);    _synchronizationTask=_dataCollectionExecutorService.scheduleAtFixedRate(new SynchronizationScheduler(),newInterval,newInterval,TimeUnit.SECONDS);    _log.debug("Synchronization task has been rescheduled with {}s interval.",newInterval);  } else {    throw APIException.internalServerErrors.rescheduleSynchronizationTaskError();  }}  }
class C{  public void resume(){  setProcessState(PROCESS_STATE_RUNNING);synchronized (breakpointLock) {    breakpointLock.notifyAll();  }  fireResumeEvent();}  }
class C{  public boolean hasAssignment(Assignment a){  return matrix.containsKey(a);}  }
class C{  public Attribute makeAttribute(String localName,String uri,String value,Type type){  return new Attribute(localName,uri,value,type);}  }
class C{  protected void deleteSessionVariables(String sessionId,String... varNames){  if (sessionId.equals("")) {    return;  }  Key key=keyFactory.newKey(sessionId);  Transaction transaction=datastore.newTransaction();  try {    Entity stateEntity=transaction.get(key);    Entity.Builder builder=Entity.builder(stateEntity);    StringBuilder delNames=new StringBuilder();    for (    String varName : varNames) {      delNames.append(varName + " ");      builder=builder.remove(varName);    }    datastore.update(builder.build());  } catch (  NullPointerException e) {  } finally {    if (transaction.active()) {      transaction.rollback();    }  }}  }
class C{  @Override public void onAdded(final StendhalRPZone zone){  super.onAdded(zone);  final String zoneName=zone.getID().getID();  if (zoneName.equals(PlayerDieer.DEFAULT_DEAD_AREA)) {    setVisibility(50);  }  setKeyedSlot("!visited",zoneName,Long.toString(System.currentTimeMillis()));  trade.cancelTrade();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void decodeHeader() throws IOException {  if (!headerDecoded) {    headerDecoded=true;    int m=getMarker();    if (m != 0xD8) {      throw new IOException("no SOI");    }    m=getMarker();    while (m != 0xC0 && m != 0xC1) {      processMarker(m);      m=getMarker();      while (m == MARKER_NONE) {        m=getMarker();      }    }    processSOF();  }}  }
class C{  @Override public void onUpgrade(Database db,int oldVersion,int newVersion){  for (int i=oldVersion; i < newVersion; i++) {    Log.i("greenDAO","Upgrading schema from version " + oldVersion + " to "+ newVersion+ " by migrating all tables data");    MigrationHelper.getInstance().migrate(db,UserDao.class);  }}  }
class C{  public static Optional<String> objectString(Model m){  return m.stream().map(null).findAny();}  }
class C{  public void resetInterpreter(Interpreter interpreter){  interpreter.ClearStacks();}  }
class C{  public Reader openStream(String publicID,String systemID) throws MalformedURLException, FileNotFoundException, IOException {  URL url=new URL(this.currentReader.systemId,systemID);  if (url.getRef() != null) {    String ref=url.getRef();    if (url.getFile().length() > 0) {      url=new URL(url.getProtocol(),url.getHost(),url.getPort(),url.getFile());      url=new URL("jar:" + url + '!'+ ref);    } else {      url=StdXMLReader.class.getResource(ref);    }  }  this.currentReader.publicId=publicID;  this.currentReader.systemId=url;  StringBuffer charsRead=new StringBuffer();  Reader reader=this.stream2reader(url.openStream(),charsRead);  if (charsRead.length() == 0) {    return reader;  }  String charsReadStr=charsRead.toString();  PushbackReader pbreader=new PushbackReader(reader,charsReadStr.length());  for (int i=charsReadStr.length() - 1; i >= 0; i--) {    pbreader.unread(charsReadStr.charAt(i));  }  return pbreader;}  }
class C{  @CanIgnoreReturnValue public Builder<C> add(Range<C> range){  if (range.isEmpty()) {    throw new IllegalArgumentException("range must not be empty, but was " + range);  } else   if (!rangeSet.complement().encloses(range)) {    for (    Range<C> currentRange : rangeSet.asRanges()) {      checkArgument(!currentRange.isConnected(range) || currentRange.intersection(range).isEmpty(),"Ranges may not overlap, but received %s and %s",currentRange,range);    }    throw new AssertionError("should have thrown an IAE above");  }  rangeSet.add(range);  return this;}  }
class C{  public FrameState duplicate(){  return duplicate(bci);}  }
class C{  @Override protected void drawNeedle(Graphics2D g2,Rectangle2D plotArea,Point2D rotate,double angle){  Arc2D shape=new Arc2D.Double(Arc2D.PIE);  double radius=plotArea.getHeight();  double halfX=plotArea.getWidth() / 2;  double diameter=2 * radius;  shape.setFrame(plotArea.getMinX() + halfX - radius,plotArea.getMinY() - radius,diameter,diameter);  radius=Math.toDegrees(Math.asin(halfX / radius));  shape.setAngleStart(270 - radius);  shape.setAngleExtent(2 * radius);  Area s=new Area(shape);  if ((rotate != null) && (angle != 0)) {    getTransform().setToRotation(angle,rotate.getX(),rotate.getY());    s.transform(getTransform());  }  defaultDisplay(g2,s);}  }
class C{  protected final void restoreState(){  logLikelihood=storedLogLikelihood;}  }
class C{  @Override public Size2D arrange(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  RectangleConstraint contentConstraint=container.toContentConstraint(constraint);  Size2D contentSize=null;  LengthConstraintType w=contentConstraint.getWidthConstraintType();  LengthConstraintType h=contentConstraint.getHeightConstraintType();  if (w == LengthConstraintType.NONE) {    if (h == LengthConstraintType.NONE) {      contentSize=arrangeNN(container,g2);    } else     if (h == LengthConstraintType.FIXED) {      throw new RuntimeException("Not implemented.");    } else     if (h == LengthConstraintType.RANGE) {      throw new RuntimeException("Not implemented.");    }  } else   if (w == LengthConstraintType.FIXED) {    if (h == LengthConstraintType.NONE) {      contentSize=arrangeFN(container,g2,constraint.getWidth());    } else     if (h == LengthConstraintType.FIXED) {      contentSize=arrangeFF(container,g2,constraint);    } else     if (h == LengthConstraintType.RANGE) {      contentSize=arrangeFR(container,g2,constraint);    }  } else   if (w == LengthConstraintType.RANGE) {    if (h == LengthConstraintType.NONE) {      throw new RuntimeException("Not implemented.");    } else     if (h == LengthConstraintType.FIXED) {      throw new RuntimeException("Not implemented.");    } else     if (h == LengthConstraintType.RANGE) {      contentSize=arrangeRR(container,constraint.getWidthRange(),constraint.getHeightRange(),g2);    }  }  assert contentSize != null;  return new Size2D(container.calculateTotalWidth(contentSize.getWidth()),container.calculateTotalHeight(contentSize.getHeight()));}  }
class C{  protected void buildInterface(Component component){  this.cardLayout=new CardLayout();  super.setLayout(this.cardLayout);  JPanel enabledPanel=new JPanel(new BorderLayout());  enabledPanel.add(component,BorderLayout.CENTER);  super.add(enabledPanel,HideShowPanel.DisplayState.SHOW.toString());  super.add(new JPanel(),HideShowPanel.DisplayState.HIDE.toString());}  }
class C{  private static State nextNormal(final State state,final ByteArrayOutputStream line,final int next){  final State result;switch (next) {case '\r':    result=State.R;  break;case '\"':result=State.QUOTED_STRING;break;default :result=state;line.write(next);break;}return result;}  }
class C{  public ConfigurationException withPartialValue(Object partialValue){  checkState(this.partialValue == null,"Can't clobber existing partial value %s with %s",this.partialValue,partialValue);  ConfigurationException result=new ConfigurationException(messages);  result.partialValue=partialValue;  return result;}  }
class C{  protected String[][] format(ObjectMatrix2D matrix){  String[][] strings=new String[matrix.rows()][matrix.columns()];  for (int row=matrix.rows(); --row >= 0; )   strings[row]=formatRow(matrix.viewRow(row));  return strings;}  }
class C{  protected void processClientGwtModuleXML() throws IOException {  File gwtModuleFile=new File(projectRoot,IDE_GWT_MODULE);  String gwtModuleContent=readFileContent(gwtModuleFile);  String inheritsString=GEN_START + String.format("<inherits name='%s' />%n",gwtModuleFQN) + GEN_END;  if (!gwtModuleContent.contains(IDE_GWT_ENTRY_TAG)) {    throw new IOException(String.format("File '%s' doesn't contain '%s'. Can't process file.",IDE_GWT_MODULE,IDE_GWT_ENTRY_TAG));  }  gwtModuleContent=gwtModuleContent.replace(IDE_GWT_ENTRY_TAG,inheritsString + IDE_GWT_ENTRY_TAG);  writeFileContent(gwtModuleContent,gwtModuleFile);}  }
class C{  public void addSessionEditor(SessionEditorIndirectRef editorRef){  SessionEditor editor=(SessionEditor)editorRef;  JInternalFrame frame=new TetradInternalFrame(null);  frame.getContentPane().add(editor);  framesMap.put(editor,frame);  editor.addPropertyChangeListener(this);  Dimension fullSize=desktopPane.getSize();  int smallSize=Math.min(fullSize.width - MARGIN,fullSize.height - MARGIN);  Dimension size=new Dimension(smallSize,smallSize);  setGoodBounds(frame,desktopPane,size);  desktopPane.add(frame);  try {    frame.setMaximum(true);  } catch (  Exception e) {    throw new RuntimeException("Problem setting frame to max: " + frame);  }  desktopPane.setLayer(frame,JLayeredPane.DEFAULT_LAYER);  frame.moveToFront();  frame.setTitle(editor.getName());  frame.setVisible(true);  setMainTitle(editor.getName());}  }
class C{  public String toString(){  String result="ND Conditional Estimator. " + m_Estimators.length + " sub-estimators:\n";  for (int i=0; i < m_Estimators.length; i++) {    result+="Sub-estimator " + i + ": "+ m_Estimators[i];  }  return result;}  }
class C{  private boolean isTrivialIntersection(Edge e0,int segIndex0,Edge e1,int segIndex1){  if (e0 == e1) {    if (li.getIntersectionNum() == 1) {      if (isAdjacentSegments(segIndex0,segIndex1))       return true;      if (e0.isClosed()) {        int maxSegIndex=e0.getNumPoints() - 1;        if ((segIndex0 == 0 && segIndex1 == maxSegIndex) || (segIndex1 == 0 && segIndex0 == maxSegIndex)) {          return true;        }      }    }  }  return false;}  }
class C{  private void updateAccessorText(){  accessorText.setText("");  StringBuilder builder=new StringBuilder();  for (  String path : paths) {    builder.append(" -> ");    builder.append(path);  }  accessorText.setText(builder.toString());}  }
class C{  @Override public boolean hasActiveECM(){  if (!game.getOptions().booleanOption("stratops_ecm") || !game.getBoard().inSpace()) {    return super.hasActiveECM();  }  return getECMRange() > Entity.NONE;}  }
class C{  public boolean isLocationEnabled(Context context){  checkNotNull(accessRequester,MSG_BLE_NOT_SUPPORTED);  return accessRequester.isLocationEnabled(context);}  }
class C{  public static Builder builder(){  return new Builder();}  }
class C{  public void println(){  newLine();}  }
class C{  public boolean isSetPacket(){  return this.packet != null;}  }
class C{  public static DelimitedVersion parse(String versionString){  if (versionString == null) {    return new DelimitedVersion(new long[0]);  }  String[] stringParts=versionString.split("[^0-9]+");  long[] parsedParts=new long[stringParts.length];  int index=0;  for (  String numericPart : stringParts) {    if (numericPart.isEmpty()) {      continue;    }    parsedParts[index]=Long.parseLong(numericPart);    index++;  }  index--;  while (index >= 0) {    if (parsedParts[index] > 0) {      break;    }    index--;  }  int length=index + 1;  long[] onlyParsedParts=new long[length];  System.arraycopy(parsedParts,0,onlyParsedParts,0,length);  return new DelimitedVersion(onlyParsedParts);}  }
class C{  public static int compareLong(long a,long b){  return a == b ? 0 : a < b ? -1 : 1;}  }
class C{  public static RxANRequest.DeleteRequestBuilder delete(String url){  return new RxANRequest.DeleteRequestBuilder(url);}  }
class C{  public boolean matchesNormalizedSimilar(final Expression other){  if (other != null) {    if (other.matcher == null) {      if (SimilarExprMatcher.isSimilar(getNormalized(),other.getNormalized(),0.1)) {        return true;      } else       if (SimilarExprMatcher.isSimilar(getMainWord(),other.getMainWord(),0.1)) {        return true;      }    }  }  return false;}  }
class C{  boolean hasData(SearchRow row){  return row.getValue(columns[0].getColumnId()) != null;}  }
class C{  public PlanetaryConditions(PlanetaryConditions other){  lightConditions=other.lightConditions;  weatherConditions=other.weatherConditions;  windStrength=other.windStrength;  windDirection=other.windDirection;  shiftWindDirection=other.shiftWindDirection;  shiftWindStrength=other.shiftWindStrength;  minWindStrength=other.minWindStrength;  maxWindStrength=other.maxWindStrength;  atmosphere=other.atmosphere;  temperature=other.temperature;  gravity=other.gravity;  emi=other.emi;  fog=other.fog;  terrainAffected=other.terrainAffected;  blowingSand=other.blowingSand;}  }
class C{  public void addNodes(DTMIterator iterator){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  if (null != iterator) {    int obj;    while (DTM.NULL != (obj=iterator.nextNode())) {      addElement(obj);    }  }}  }
class C{  @Nullable private KtFile parseFile(@NotNull FileObject file) throws IOException {  return parseText(StringUtilRt.convertLineSeparators(file.asText()),file);}  }
class C{  public Builder requireMaster(boolean requireMaster){  this.requireMaster=requireMaster;  return this;}  }
class C{  public boolean saveModel(FModel model,String filename){  IImportedModelProvider importedModels=null;  return saveModel(model,filename,importedModels);}  }
class C{  public static void syncAll() throws DroidModelException {}  }
class C{  public void addItemDeleteListener(ItemDeleteListener listener){  PacketListener delListener=new ItemDeleteTranslator(listener);  itemDeleteToListenerMap.put(listener,delListener);  EventContentFilter deleteItem=new EventContentFilter(EventElementType.items.toString(),"retract");  EventContentFilter purge=new EventContentFilter(EventElementType.purge.toString());  con.addPacketListener(delListener,new OrFilter(deleteItem,purge));}  }
class C{  public void paintMenuBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  protected void fireHexEditorEvent(int offset,int added,int removed){  HexEditorEvent e=null;  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == HexEditorListener.class) {      if (e == null) {        e=new HexEditorEvent(this,offset,added,removed);      }      ((HexEditorListener)listeners[i + 1]).hexBytesChanged(e);    }  }}  }
class C{  public final static String formatProtocolVersion(final ProtocolVersion version,LineFormatter formatter){  if (formatter == null)   formatter=BasicLineFormatter.DEFAULT;  return formatter.appendProtocolVersion(null,version).toString();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.COMMENT___INLINE_COMMENT_1:    return ((InternalEList<?>)getInlineComment_1()).basicRemove(otherEnd,msgs);case UmplePackage.COMMENT___MULTILINE_COMMENT_1:  return ((InternalEList<?>)getMultilineComment_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private AttributedString formatLine(final String line,final Color normalColor){  try {    TextAttributeSet normal=new TextAttributeSet();    normal.setAttribute(TextAttribute.FOREGROUND,normalColor);    AttributedStringBuilder builder=new AttributedStringBuilder();    formatter.format(line,normal,builder);    return builder.toAttributedString();  } catch (  final Exception e) {    Logger.getLogger(TextBoxFactory.class).error(e,e);    return null;  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tFull name of the kernel analysed.\n" + "\teg: weka.classifiers.functions.supportVector.RBFKernel\n" + "\t(default weka.classifiers.functions.supportVector.RBFKernel)","W",1,"-W"));  result.addAll(Collections.list(super.listOptions()));  if ((m_Kernel != null) && (m_Kernel instanceof OptionHandler)) {    result.addElement(new Option("","",0,"\nOptions specific to kernel " + m_Kernel.getClass().getName() + ":"));    result.addAll(Collections.list(((OptionHandler)m_Kernel).listOptions()));  }  return result.elements();}  }
class C{  public NeuronGroup(final Network network){  super(network);}  }
class C{  public CountProjectionExpression(Expression expression,boolean isDistinct){  this.distinct=isDistinct;  this.getChildren().add(expression);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public void measure(){  int size=10000;  test(size / 10);  int s;  long time=System.currentTimeMillis();  s=test(size);  time=System.currentTimeMillis() - time;  System.out.println((double)s / size + " bits/key in " + time + " ms");}  }
class C{  private void addMCBCs(Settings s){  if (!s.contains(NROF_MCBCS_S)) {    return;  }  int[] nrof=s.getCsvInts(NROF_MCBCS_S);  if (nrof[0] > 0) {    this.recvConditions=new ArrayList<Tuple<String,ArithmeticCondition>>();  }  if (nrof[1] > 0) {    this.sendConditions=new ArrayList<Tuple<String,ArithmeticCondition>>();  }  addConditions(s,MCBACR_S,MCBCVR_S,this.recvConditions,nrof[0]);  addConditions(s,MCBACS_S,MCBCVS_S,this.sendConditions,nrof[1]);}  }
class C{  private void runTask() throws InterruptedException, IOException, SerialException, ReplicatorException, SQLException {  boolean skipEvents=false;  vmrrMgr.registerExtractor();  int firstSequence=Integer.MAX_VALUE;  ArrayList<PlogTransaction> tranAtSameSCN=new ArrayList<PlogTransaction>();  long SCNAtSameSCN=0;  if (lastEvent != null) {    firstSequence=Integer.MAX_VALUE;    skipEvents=true;  } else   if (lastProcessedEventId != null) {    firstSequence=setInternalLastEventId(lastProcessedEventId);    if (logger.isDebugEnabled()) {      logger.debug(String.format("Starting from an existing event ID: lastProcessedEventId=%s firstSequence=%d",lastProcessedEventId,firstSequence));    }  } else {    if (logger.isDebugEnabled()) {      logger.debug("Restart position not set, searching for oldest available plog");    }  }  int retries=0;  while (firstSequence == Integer.MAX_VALUE) {    if (retries == 0) {      logger.info("Seeking oldest plog file to start extraction");    }    firstSequence=findOldestPlogSequence(plogDirectory);    if (Thread.currentThread().isInterrupted()) {      throw new InterruptedException();    }    if (firstSequence < Integer.MAX_VALUE) {      logger.info("Oldest plog found on disk: " + firstSequence);      break;    }    retries++;    Thread.sleep(sleepSizeInMilliseconds);    checkRedoReaderState(retries);  }  plogFilename=findMostRecentPlogFile(plogDirectory,firstSequence);  plogId=firstSequence;  while (!cancelled) {    int lastObsolePlog=getLastObsoletePlog();    if (lastReportedObsolePlogSeq != lastObsolePlog && lastObsolePlog > 0) {      vmrrMgr.reportLastObsoletePlog(lastObsolePlog);      lastReportedObsolePlogSeq=lastObsolePlog;    }    openFile(plogFilename);    readHeader();    int retryCount=0;    while (!cancelled) {      PlogLCR r1=null;      while (r1 == null) {        try {          r1=readRawLCR();          if (skipEvents) {            if (tungstenSchema.equalsIgnoreCase(r1.tableOwner) && SqlCommitSeqno.TABLE_NAME.equalsIgnoreCase(r1.tableName) && (r1.type == PlogLCR.ETYPE_LCR_DATA)&& (r1.subtype != PlogLCR.ESTYPE_LCR_DDL)) {              DBMSData dbmsData=PlogTransaction.convertLCRtoDBMSDataDML(r1);              if (dbmsData instanceof RowChangeData) {                RowChangeData data=(RowChangeData)dbmsData;                ArrayList<ColumnSpec> specs=data.getRowChanges().get(0).getColumnSpec();                ColumnSpec spec;                int i;                for (i=0; i < specs.size(); i++) {                  spec=specs.get(i);                  if (spec.getName().equalsIgnoreCase("EVENTID")) {                    break;                  }                }                if (i < specs.size()) {                  ColumnVal columnVal=data.getRowChanges().get(0).getColumnValues().get(0).get(i);                  if (columnVal.getValue() instanceof String) {                    String value=(String)columnVal.getValue();                    if (value.equals(lastEvent.getEventId())) {                      logger.info("Searching for " + lastEvent.getEventId() + " - Found : "+ r1);                      r1=null;                      skipEvents=false;                    } else {                      r1=null;                      continue;                    }                  } else {                    r1=null;                    continue;                  }                } else {                  r1=null;                  continue;                }              }            } else             if (r1.type == PlogLCR.ETYPE_CONTROL) {              break;            } else {              r1=null;              continue;            }          } else {            if (tungstenSchema != null) {              if (tungstenSchema.equalsIgnoreCase(r1.tableOwner) && "trep_commit_seqno".equalsIgnoreCase(r1.tableName)) {                if (logger.isDebugEnabled()) {                  logger.debug("Ignoring update to trep_commit_seqno: scn=" + r1.LCRid);                }                r1=null;                continue;              }            }          }        } catch (        java.io.EOFException e) {          if (currentlyInIFILE) {            throw new FileNotFoundException(currentIncludePlog.plogFilename + " ended prematurely, file is corrupted.");          }          if ((retryCount % 5) == 0) {            String latestPlogFilename=findMostRecentPlogFile(plogDirectory,plogId);            if (!plogFilename.equals(latestPlogFilename)) {              retryCount=0;              closeFile();              throwAwayAllLCRsInPlog(plogId);              setInternalLastEventId(lastProcessedEventId);              plogFilename=latestPlogFilename;              openFile(plogFilename);              readHeader();            }          }          checkRedoReaderState(retryCount);          retryCount++;          Thread.sleep(sleepSizeInMilliseconds);          if (logger.isDebugEnabled())           logger.debug("Wait for more data in plog.");        }      }      retryCount=0;      if (r1.type == PlogLCR.ETYPE_CONTROL && r1.subtype == PlogLCR.ESTYPE_HEADER) {        readControlHeader(r1);        logger.info("Plog dict cache: " + this.plogDictCacheEnabled);      }      if (r1.type == PlogLCR.ETYPE_CONTROL && r1.subtype == PlogLCR.ESTYPE_FOOTER && !currentlyInIFILE) {        break;      }      if (r1.type == PlogLCR.ETYPE_LCR_PLOG) {        if (r1.subtype == PlogLCR.ESTYPE_LCR_PLOG_IFILE) {          currentIncludePlog=r1.parseIncludePlogLCR(this);        } else         if (r1.subtype == PlogLCR.ESTYPE_LCR_PLOG_IFILE_STATS) {          plogStreamPaused=plogStream;          openFile(currentIncludePlog.plogFilename);          readHeader();          currentlyInIFILE=true;        }      }      if (r1.type == PlogLCR.ETYPE_CONTROL && r1.subtype == PlogLCR.ESTYPE_FOOTER && currentlyInIFILE) {        closeFile();        currentlyInIFILE=false;        plogStream=plogStreamPaused;      }      if (r1.SCN > SCNAtSameSCN && !tranAtSameSCN.isEmpty()) {        Collections.sort(tranAtSameSCN);        long oldestPlogId=minimalPlogIdInOpenTransactions();        for (        PlogTransaction t : tranAtSameSCN) {          if (!t.transactionIsDML) {            lastProcessedEventId=t.pushContentsToQueue(queue,minimalSCNInOpenTransactions(),transactionFragSize,oldestPlogId - 1);            openTransactions.remove(t.XID);            t.release();          }        }        for (        PlogTransaction t : tranAtSameSCN) {          if (t.transactionIsDML) {            lastProcessedEventId=t.pushContentsToQueue(queue,minimalSCNInOpenTransactions(),transactionFragSize,oldestPlogId - 1);            openTransactions.remove(t.XID);            t.release();          }        }        tranAtSameSCN.clear();      }      if (r1.XID != null) {        PlogTransaction t=openTransactions.get(r1.XID);        if (t == null) {          t=new PlogTransaction(cache,r1.XID,lcrBufferLimit);          openTransactions.put(r1.XID,t);        }        t.putLCR(r1);        if (t.isCommitted()) {          if (t.isEmpty()) {            openTransactions.remove(r1.XID);            t.release();          } else           if (t.commitSCN < restartEventCommitSCN) {            if (logger.isDebugEnabled()) {              logger.info(r1.XID + " committed at " + t.commitSCN+ ", before restart SCN "+ restartEventCommitSCN);            }            openTransactions.remove(r1.XID);            t.release();          } else           if (t.commitSCN == restartEventCommitSCN && t.XID.compareTo(restartEventXID) < 0) {            logger.info(r1.XID + " committed at " + t.commitSCN+ "= restart SCN "+ restartEventCommitSCN+ ", but it's before restart XID "+ restartEventXID);            openTransactions.remove(r1.XID);            t.release();          } else           if (t.commitSCN == restartEventCommitSCN && t.XID.equals(restartEventXID)) {            logger.info(">>>" + r1.XID + " committed at "+ t.commitSCN+ "= restart SCN "+ restartEventCommitSCN+ ", exactly restart XID "+ restartEventXID);            if (restartEventChangeSeq.equals("LAST")) {              logger.info(">>> was complete last time");              openTransactions.remove(r1.XID);              t.release();            } else {              t.setSkipSeq(Integer.parseInt(restartEventChangeSeq));              tranAtSameSCN.add(t);              SCNAtSameSCN=t.commitSCN;            }          } else {            if (logger.isDebugEnabled()) {              logger.debug("XID: " + t.XID);            }            t.setSkipSeq(0);            tranAtSameSCN.add(t);            SCNAtSameSCN=t.commitSCN;          }        }      }    }    closeFile();    plogFilename=null;    while (plogFilename == null && !cancelled) {      try {        plogFilename=findMostRecentPlogFile(plogDirectory,plogId + 1);      } catch (      FileNotFoundException e) {        logger.info("Waiting for next file to appear: " + e.getMessage());      }      Thread.sleep(sleepSizeInMilliseconds);    }    plogId++;  }}  }
class C{  public ImageSize scale(float scale){  return new ImageSize((int)(width * scale),(int)(height * scale));}  }
class C{  @Override public String toString(){  return map.toString();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public VOServiceDetails registerCompatibleServices(long supplierKey,VOService service,VOService... compatibleServices) throws Exception {  container.login(supplierKey,UserRoleType.SERVICE_MANAGER.name());  service=srvProvService.deactivateService(service);  srvProvService.setCompatibleServices(service,Arrays.asList(compatibleServices));  srvProvService.activateService(service);  return getServiceDetails(supplierKey,service);}  }
class C{  static public void qsort(int[] array,SortComparatorL comp){  qsort_h(array,0,array.length - 1,comp);}  }
class C{  public static void copyFile(File srcFile,File destFile,boolean preserveFileDate) throws IOException {  if (srcFile == null) {    throw new NullPointerException("Source must not be null");  } else   if (destFile == null) {    throw new NullPointerException("Destination must not be null");  } else   if (!srcFile.exists()) {    throw new FileNotFoundException("Source \'" + srcFile + "\' does not exist");  } else   if (srcFile.isDirectory()) {    throw new IOException("Source \'" + srcFile + "\' exists but is a directory");  } else   if (srcFile.getCanonicalPath().equals(destFile.getCanonicalPath())) {    throw new IOException("Source \'" + srcFile + "\' and destination \'"+ destFile+ "\' are the same");  } else {    File parentFile=destFile.getParentFile();    if (parentFile != null && !parentFile.mkdirs() && !parentFile.isDirectory()) {      throw new IOException("Destination \'" + parentFile + "\' directory cannot be created");    } else     if (destFile.exists() && !destFile.canWrite()) {      throw new IOException("Destination \'" + destFile + "\' exists but is read-only");    } else {      if (destFile.exists() && destFile.isDirectory()) {        throw new IOException("Destination \'" + destFile + "\' exists but is a directory");      } else {        FileInputStream fis=null;        FileOutputStream fos=null;        FileChannel input=null;        FileChannel output=null;        try {          fis=new FileInputStream(srcFile);          fos=new FileOutputStream(destFile);          input=fis.getChannel();          output=fos.getChannel();          long size=input.size();          long pos=0L;          for (long count=0L; pos < size; pos+=output.transferFrom(input,pos,count)) {            count=size - pos > 31457280L ? 31457280L : size - pos;          }        }  finally {          try {            if (output != null) {              output.close();            }            if (fos != null) {              fos.close();            }            if (input != null) {              input.close();            }            if (fis != null) {              fis.close();            }          } catch (          IOException var2) {          }        }        if (srcFile.length() != destFile.length()) {          throw new IOException("Failed to copy full contents from \'" + srcFile + "\' to \'"+ destFile+ "\'");        } else {          if (preserveFileDate) {            destFile.setLastModified(srcFile.lastModified());          }        }      }    }  }}  }
class C{  void checkRequiredChildren(Locator locator) throws SAXParseException {  ArrayList<Element> requiredChildren=this.requiredChilden;  if (requiredChildren != null) {    for (int i=requiredChildren.size() - 1; i >= 0; i--) {      Element child=requiredChildren.get(i);      if (!child.visited) {        throw new BadXmlException("Element named " + this + " is missing required"+ " child element named "+ child+ ".",locator);      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:15.201 -0400",hash_original_method="F456C830515CA57E64333B5502C7B0DC",hash_generated_method="F1EEBAD7F1E5D8AF2624926687B33B24") public ToneGenerator(int streamType,int volume){  native_setup(streamType,volume);}  }
class C{  public void initArray() throws IOException {  writeCode(INIT_ARRAY);}  }
class C{  @Override protected void initViews(View self,Bundle savedInstanceState){}  }
class C{  protected Signature(String algorithm){  this.algorithm=algorithm;}  }
class C{  @Override public byte[] serialize(){  byte[] payloadData=null;  if (payload != null) {    payload.setParent(this);    payloadData=payload.serialize();  }  int optionsLength=0;  if (this.options != null)   optionsLength=this.options.length / 4;  this.headerLength=(byte)(5 + optionsLength);  this.totalLength=(short)(this.headerLength * 4 + ((payloadData == null) ? 0 : payloadData.length));  byte[] data=new byte[this.totalLength];  ByteBuffer bb=ByteBuffer.wrap(data);  bb.put((byte)(((this.version & 0xf) << 4) | (this.headerLength & 0xf)));  bb.put(this.diffServ);  bb.putShort(this.totalLength);  bb.putShort(this.identification);  bb.putShort((short)(((this.flags & IPV4_FLAGS_MASK) << IPV4_FLAGS_SHIFT) | (this.fragmentOffset & IPV4_OFFSET_MASK)));  bb.put(this.ttl);  bb.put((byte)this.protocol.getIpProtocolNumber());  bb.putShort(this.checksum);  bb.putInt(this.sourceAddress.getInt());  bb.putInt(this.destinationAddress.getInt());  if (this.options != null)   bb.put(this.options);  if (payloadData != null)   bb.put(payloadData);  if (this.checksum == 0) {    bb.rewind();    int accumulation=0;    for (int i=0; i < this.headerLength * 2; ++i) {      accumulation+=0xffff & bb.getShort();    }    accumulation=((accumulation >> 16) & 0xffff) + (accumulation & 0xffff);    this.checksum=(short)(~accumulation & 0xffff);    bb.putShort(10,this.checksum);  }  return data;}  }
class C{  public void addTrainingInstanceFromMouseLocation(int mouseX,int mouseY,int classAttIndex,double classValue){  double x=convertFromPanelX(mouseX);  double y=convertFromPanelY(mouseY);  Instance newInstance=new DenseInstance(m_trainingData.numAttributes());  for (int i=0; i < newInstance.numAttributes(); i++) {    if (i == classAttIndex) {      newInstance.setValue(i,classValue);    } else     if (i == m_xAttribute) {      newInstance.setValue(i,x);    } else     if (i == m_yAttribute) {      newInstance.setValue(i,y);    } else {      newInstance.setMissing(i);    }  }  addTrainingInstance(newInstance);}  }
class C{  public CoapEndpoint(final int port,final NetworkConfig config){  this(new InetSocketAddress(port),config);}  }
class C{  public Attribute(String name,String nameFormat,String friendlyName){  ValidateUtil.validateNotEmpty(name,"Null attribute name");  this.name=name;  this.nameFormat=nameFormat;  this.friendlyName=friendlyName;}  }
class C{  public boolean isComplete(){  return isComplete_;}  }
class C{  private ResultPoint findCornerFromCenter(int centerX,int deltaX,int left,int right,int centerY,int deltaY,int top,int bottom,int maxWhiteRun) throws NotFoundException {  int[] lastRange=null;  for (int y=centerY, x=centerX; y < bottom && y >= top && x < right && x >= left; y+=deltaY, x+=deltaX) {    int[] range;    if (deltaX == 0) {      range=blackWhiteRange(y,maxWhiteRun,left,right,true);    } else {      range=blackWhiteRange(x,maxWhiteRun,top,bottom,false);    }    if (range == null) {      if (lastRange == null) {        throw NotFoundException.getNotFoundInstance();      }      if (deltaX == 0) {        int lastY=y - deltaY;        if (lastRange[0] < centerX) {          if (lastRange[1] > centerX) {            return new ResultPoint(deltaY > 0 ? lastRange[0] : lastRange[1],lastY);          }          return new ResultPoint(lastRange[0],lastY);        } else {          return new ResultPoint(lastRange[1],lastY);        }      } else {        int lastX=x - deltaX;        if (lastRange[0] < centerY) {          if (lastRange[1] > centerY) {            return new ResultPoint(lastX,deltaX < 0 ? lastRange[0] : lastRange[1]);          }          return new ResultPoint(lastX,lastRange[0]);        } else {          return new ResultPoint(lastX,lastRange[1]);        }      }    }    lastRange=range;  }  throw NotFoundException.getNotFoundInstance();}  }
class C{  public MultiSelectionSpinner(Context context,AttributeSet attrs){  super(context,attrs);  this.mContext=context;  simple_adapter=new ArrayAdapter<>(context,android.R.layout.simple_spinner_item);  super.setAdapter(simple_adapter);}  }
class C{  public List(ListModel model){  setUIID("List");  setModel(model);}  }
class C{  public static Validator<CharSequence> notEmpty(@NonNull final CharSequence errorMessage){  return new NotEmptyValidator(errorMessage);}  }
class C{  public static org.oscm.internal.vo.VOUser convertToUp(org.oscm.vo.VOUser oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOUser newVO=new org.oscm.internal.vo.VOUser();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setOrganizationId(oldVO.getOrganizationId());  newVO.setUserId(oldVO.getUserId());  newVO.setStatus(EnumConverter.convert(oldVO.getStatus(),org.oscm.internal.types.enumtypes.UserAccountStatus.class));  newVO.setOrganizationRoles(EnumConverter.convertSet(oldVO.getOrganizationRoles(),org.oscm.internal.types.enumtypes.OrganizationRoleType.class));  newVO.setUserRoles(EnumConverter.convertSet(oldVO.getUserRoles(),org.oscm.internal.types.enumtypes.UserRoleType.class));  return newVO;}  }
class C{  protected IJavaElement createHandle(AbstractMethodDeclaration method,IJavaElement parent){  if (!(parent instanceof IType))   return parent;  IType type=(IType)parent;  Argument[] arguments=method.arguments;  int argCount=arguments == null ? 0 : arguments.length;  if (type.isBinary()) {    ClassFileReader reader=classFileReader(type);    if (reader != null) {      boolean firstIsSynthetic=false;      if (reader.isMember() && method.isConstructor() && !Flags.isStatic(reader.getModifiers())) {        firstIsSynthetic=true;        argCount++;      }      char[][] argumentTypeNames=new char[argCount][];      for (int i=0; i < argCount; i++) {        char[] typeName=null;        if (i == 0 && firstIsSynthetic) {          typeName=type.getDeclaringType().getFullyQualifiedName().toCharArray();        } else         if (arguments != null) {          TypeReference typeRef=arguments[firstIsSynthetic ? i - 1 : i].type;          typeName=CharOperation.concatWith(typeRef.getTypeName(),'.');          for (int k=0, dim=typeRef.dimensions(); k < dim; k++)           typeName=CharOperation.concat(typeName,new char[]{'[',']'});        }        if (typeName == null) {          return null;        }        argumentTypeNames[i]=typeName;      }      IMethod binaryMethod=createBinaryMethodHandle(type,method.selector,argumentTypeNames);      if (binaryMethod == null) {        PossibleMatch similarMatch=this.currentPossibleMatch.getSimilarMatch();        while (similarMatch != null) {          type=((ClassFile)similarMatch.openable).getType();          binaryMethod=createBinaryMethodHandle(type,method.selector,argumentTypeNames);          if (binaryMethod != null) {            return binaryMethod;          }          similarMatch=similarMatch.getSimilarMatch();        }      }      return binaryMethod;    }    if (BasicSearchEngine.VERBOSE) {      System.out.println("Not able to createHandle for the method " + CharOperation.charToString(method.selector) + " May miss some results");    }    return null;  }  String[] parameterTypeSignatures=new String[argCount];  if (arguments != null) {    for (int i=0; i < argCount; i++) {      TypeReference typeRef=arguments[i].type;      char[] typeName=CharOperation.concatWith(typeRef.getParameterizedTypeName(),'.');      parameterTypeSignatures[i]=Signature.createTypeSignature(typeName,false);    }  }  return createMethodHandle(type,new String(method.selector),parameterTypeSignatures);}  }
class C{  @After public void tearDown() throws Exception {}  }
class C{  protected void train(Preprocessor preProcessor){  DocumentReaderAndWriter<CoreLabel> docReader=new ProcessorTools.PostprocessorDocumentReaderAndWriter(preProcessor);  ObjectBank<List<CoreLabel>> lines=classifier.makeObjectBankFromFile(flags.trainFile,docReader);  classifier.train(lines,docReader);  System.err.println("Finished training.");}  }
class C{  @Override protected boolean isValidFragment(String fragmentName){  return SettingsFragment.class.getName().equals(fragmentName);}  }
class C{  public Collection<? extends Collection<V>> values(){  return mMap.values();}  }
class C{  public double mean(){  return total / n;}  }
class C{  private void release(){  context.getRunningQuery().getAttributes().remove(sharedStateKey);}  }
class C{  public PredictiveInfoCalculatorGaussian() throws InstantiationException, IllegalAccessException, ClassNotFoundException {  super(MI_CALCULATOR_GAUSSIAN);}  }
class C{  public void keyPressed(KeyEvent e){}  }
class C{  public PeerSyncResult sync(){  if (ulog == null) {    return PeerSyncResult.failure();  }  MDCLoggingContext.setCore(core);  try {    log.info(msg() + "START replicas=" + replicas+ " nUpdates="+ nUpdates);    if (debug) {      if (startingVersions != null) {        log.debug(msg() + "startingVersions=" + startingVersions.size()+ " "+ startingVersions);      }    }    if (doFingerprint && alreadyInSync()) {      return PeerSyncResult.success();    }    for (    String replica : replicas) {      requestVersions(replica);    }    try (UpdateLog.RecentUpdates recentUpdates=ulog.getRecentUpdates()){      ourUpdates=recentUpdates.getVersions(nUpdates);    }     Collections.sort(ourUpdates,absComparator);    if (startingVersions != null) {      if (startingVersions.size() == 0) {        log.warn("no frame of reference to tell if we've missed updates");        return PeerSyncResult.failure();      }      Collections.sort(startingVersions,absComparator);      ourLowThreshold=percentile(startingVersions,0.8f);      ourHighThreshold=percentile(startingVersions,0.2f);      long smallestNewUpdate=Math.abs(ourUpdates.get(ourUpdates.size() - 1));      if (Math.abs(startingVersions.get(0)) < smallestNewUpdate) {        log.warn(msg() + "too many updates received since start - startingUpdates no longer overlaps with our currentUpdates");        return PeerSyncResult.failure();      }      List<Long> newList=new ArrayList<>(ourUpdates);      for (      Long ver : startingVersions) {        if (Math.abs(ver) < smallestNewUpdate) {          newList.add(ver);        }      }      ourUpdates=newList;      Collections.sort(ourUpdates,absComparator);    } else {      if (ourUpdates.size() > 0) {        ourLowThreshold=percentile(ourUpdates,0.8f);        ourHighThreshold=percentile(ourUpdates,0.2f);      } else {        log.info(msg() + "DONE.  We have no versions.  sync failed.");        for (; ; ) {          ShardResponse srsp=shardHandler.takeCompletedOrError();          if (srsp == null)           break;          if (srsp.getException() == null) {            List<Long> otherVersions=(List<Long>)srsp.getSolrResponse().getResponse().get("versions");            if (otherVersions != null && !otherVersions.isEmpty()) {              return PeerSyncResult.failure(true);            }          }        }        return PeerSyncResult.failure(false);      }    }    ourHighest=ourUpdates.get(0);    ourUpdateSet=new HashSet<>(ourUpdates);    requestedUpdateSet=new HashSet<>();    for (; ; ) {      ShardResponse srsp=shardHandler.takeCompletedOrError();      if (srsp == null)       break;      boolean success=handleResponse(srsp);      if (!success) {        log.info(msg() + "DONE. sync failed");        shardHandler.cancelAll();        return PeerSyncResult.failure();      }    }    boolean success=true;    for (    SyncShardRequest sreq : requests) {      if (sreq.doFingerprintComparison) {        success=compareFingerprint(sreq);        if (!success)         break;      }    }    log.info(msg() + "DONE. sync " + (success ? "succeeded" : "failed"));    return success ? PeerSyncResult.success() : PeerSyncResult.failure();  }  finally {    MDCLoggingContext.clear();  }}  }
class C{  public NativePooledByteBufferOutputStream(NativeMemoryChunkPool pool){  this(pool,pool.getMinBufferSize());}  }
class C{  public LibUsbException(final int errorCode){  super(String.format("USB error %d: %s",-errorCode,LibUsb.strError(errorCode)));  this.errorCode=errorCode;}  }
class C{  private static void modifyArith(BlockNode block){  List<InsnNode> list=block.getInstructions();  for (  InsnNode insn : list) {    if (insn.getType() == InsnType.ARITH) {      RegisterArg res=insn.getResult();      InsnArg arg=insn.getArg(0);      boolean replace=false;      if (res.equals(arg)) {        replace=true;      } else       if (arg.isRegister()) {        RegisterArg regArg=(RegisterArg)arg;        replace=res.equalRegisterAndType(regArg);      }      if (replace) {        insn.add(AFlag.ARITH_ONEARG);      }    }  }}  }
class C{  protected void updateNodeAndChildren(NodeRef node){  if (COUNT_TOTAL_OPERATIONS)   totalRateUpdateSingleCount+=1 + treeModel.getChildCount(node);  treeTraversalDelegate.updateNodeAndChildren(node);  likelihoodKnown=false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected boolean saveConfiguration(Object configuration){  try {    File confFile=DispatcherLogic.saveConfiguration(pageInstance.getDirectory(),configuration);    logger.info("Configuration saved to " + confFile.getAbsolutePath());    return true;  } catch (  Exception e) {    logger.error("Couldn't save configuration",e);    SessionMessages.addErrorMessage("error saving conf");    return false;  }}  }
class C{  @After public void afterBaseTest() throws SQLException {  assureProxy();  assureBlackList();}  }
class C{  public static byte[] createByteArray(int size,String data){  byte[] byteArray=new byte[size];  for (int i=0; i < size; i++) {    byteArray[i]=Byte.parseByte(data,2);  }  return byteArray;}  }
class C{  public static void subtract(int[] n1,int[] n2,int[] result,int[] sign){  int b=n1.length - 1;  int carry=0;  boolean smaller=(compareTo(n2,n1) < 0);  while (b >= 0) {    int s=n1[b] - n2[b];    if (!smaller) {      s=-s;    }    s+=carry;    if (s >= 0) {      result[b]=s;      carry=0;    } else {      carry=-1;      result[b]=s + 10;    }    b--;  }  if (!smaller) {    sign[0]=-1;  } else {    sign[0]=carry + 0;  }}  }
class C{  public TabbedPaneBottomTabState(){  super("Bottom");}  }
class C{  public void characters(char ch[],int start,int length){  if (titlePending) {    title.append(ch,start,length);  } else   if (descPending) {    desc.append(ch,start,length);  }}  }
class C{  public void addPlugInEventRepresentation(URI eventRepresentationRootURI,Class eventRepresentationClass,Serializable initializer){  addPlugInEventRepresentation(eventRepresentationRootURI,eventRepresentationClass.getName(),initializer);}  }
class C{  public static void updateNodes(PathDataNode[] target,PathDataNode[] source){  for (int i=0; i < source.length; i++) {    target[i].mType=source[i].mType;    for (int j=0; j < source[i].mParams.length; j++) {      target[i].mParams[j]=source[i].mParams[j];    }  }}  }
class C{  public boolean nextBoolean(){  clearCaches();  return Boolean.parseBoolean(next(boolPattern()));}  }
class C{  private void replace(Template name){  replace(name.toString());}  }
class C{  public void logInfo(String message){  getLog().log(new Status(IStatus.INFO,pluginId,message));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.096 -0500",hash_original_method="90AE32A316C2C8D81F960E0C17378875",hash_generated_method="FD6CEFEAFF4B3525D8AD491A42D7B3D0") public static boolean equals(char[] array1,char[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public void initializeWithNative(){  initialize(this);}  }
class C{  public AddGetterSetterOperation(final ITypeBinding type,final TypeDeclaration typeDeclaration,int insertPos,Document document,final IVariableBinding[] getters,final IVariableBinding[] setters,final IVariableBinding[] accessors,final CompilationUnit unit,final CodeGenerationSettings settings,final boolean apply,final boolean save){  this.typeDeclaration=typeDeclaration;  this.insertPos=insertPos;  this.document=document;  Assert.isNotNull(type);  Assert.isNotNull(unit);  Assert.isNotNull(settings);  fType=type;  fGetterFields=getters;  fSetterFields=setters;  fAccessorFields=accessors;  fASTRoot=unit;  fSettings=settings;  fSave=save;  fApply=apply;}  }
class C{  public TicTacToeMovementValidatorChain(){  validators.add(new GameIsActiveValidator());  validators.add(new PlayerIsParticipatingValidator());  validators.add(new PlayersTurnValidator());  validators.add(new PlayerIsPlayingRightTokenTypeValidator());  validators.add(new MovementSourceIsHomeValidator());  validators.add(new MovementTargetIsOnBoardValidator());  validators.add(new MovementTargetEmptyValidator());}  }
class C{  private void dropTempTable() throws SQLException {  executeStatement(QUERY_DROP_TEMP_TABLE);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void notifyRemoves(){  if (listeners.size() > 0) {    final List<IChangeRecord> removes;synchronized (this.removes) {      removes=materialize(this.removes);      this.removes.clear();    }    for (    IChangeRecord remove : removes) {      notify(remove);    }  } else {synchronized (this.removes) {      this.removes.clear();    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected List extractDiscoveryInformation(XRDS xrds,XriIdentifier identifier,Resolver xriResolver) throws DiscoveryException {  ArrayList endpoints=new ArrayList();  XRD xrd=xrds.getFinalXRD();  extractDiscoveryInformationOpenID(xriResolver,endpoints,xrd,identifier,DiscoveryInformation.OPENID2_OP,false);  extractDiscoveryInformationOpenID(xriResolver,endpoints,xrd,identifier,DiscoveryInformation.OPENID2,true);  extractDiscoveryInformationOpenID(xriResolver,endpoints,xrd,identifier,DiscoveryInformation.OPENID11,true);  extractDiscoveryInformationOpenID(xriResolver,endpoints,xrd,identifier,DiscoveryInformation.OPENID10,true);  if (endpoints.size() == 0)   _log.info("No OpenID service types found in the XRDS.");  return endpoints;}  }
class C{  public void windowLostFocus(WindowEvent e){  ((WindowFocusListener)a).windowLostFocus(e);  ((WindowFocusListener)b).windowLostFocus(e);}  }
class C{  private void sendClear(){  final ByteBuf data=Unpooled.buffer();  data.writeBoolean(true);  getCasing().sendData(getFace(),data,DATA_TYPE_CLEAR);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected Parameters(Bitmap hMapBitmap){  heightMapBitmap=hMapBitmap;}  }
class C{  public FileProcessController(final FileControllerParameters arguments,final int pid){  this(arguments,pid,Long.getLong(STATUS_TIMEOUT_PROPERTY,60 * 1000),TimeUnit.MILLISECONDS);}  }
class C{  protected int randomUidValidity(){  return Math.abs(RANDOM.nextInt());}  }
class C{  public ZDT2(){  this(30);}  }
class C{  public boolean isSetTimestamp(){  return EncodingUtils.testBit(__isset_bitfield,__TIMESTAMP_ISSET_ID);}  }
class C{  public void onFileCreated(Path file){}  }
class C{  public static boolean isNullOrEmpty(String s,boolean trim){  return s == null || (trim ? s.trim().length() == 0 : s.length() == 0);}  }
class C{  public void paint(Graphics g){  Graphics2D g2=(Graphics2D)g;  FontMetrics fm=getFontMetrics(DisplayNodeUtils.getFont());  int width=getPreferredSize().width;  int stringWidth=fm.stringWidth(getName());  int stringX=(width - stringWidth) / 2;  int stringY=fm.getAscent() + DisplayNodeUtils.getPixelGap();  g2.setColor(isSelected() ? DisplayNodeUtils.getNodeSelectedFillColor() : DisplayNodeUtils.getNodeFillColor());  g2.fill(getShape());  g2.setColor(isSelected() ? DisplayNodeUtils.getNodeSelectedEdgeColor() : DisplayNodeUtils.getNodeEdgeColor());  g2.draw(getShape());  g2.setColor(DisplayNodeUtils.getNodeTextColor());  g2.setFont(DisplayNodeUtils.getFont());  g2.drawString(getName(),stringX,stringY);}  }
class C{  private String createString(String f){  StringBuilder sb=new StringBuilder();  sb.append("addressMode=[" + cudaTextureAddressMode.stringFor(addressMode[0]) + ","+ cudaTextureAddressMode.stringFor(addressMode[1])+ ","+ cudaTextureAddressMode.stringFor(addressMode[2])+ "]"+ f);  sb.append("filterMode=" + cudaTextureFilterMode.stringFor(filterMode) + f);  sb.append("readMode=" + cudaTextureReadMode.stringFor(readMode) + f);  sb.append("sRGB=[" + sRGB + f);  sb.append("normalizedCoords=" + normalizedCoords + f);  sb.append("maxAnisotropy=" + maxAnisotropy + f);  sb.append("mipmapFilterMode=" + cudaTextureFilterMode.stringFor(mipmapFilterMode) + f);  sb.append("mipmapLevelBias=" + mipmapLevelBias + f);  sb.append("minMipmapLevelClamp=" + minMipmapLevelClamp + f);  sb.append("maxMipmapLevelClamp=" + maxMipmapLevelClamp + f);  return sb.toString();}  }
class C{  protected boolean isCompatible(Taxa taxa,List<Taxon> availableTaxa){  for (int i=0; i < taxa.getTaxonCount(); i++) {    Taxon taxon=taxa.getTaxon(i);    if (!availableTaxa.contains(taxon)) {      return false;    }  }  return true;}  }
class C{  private void markSavingBroken(String message,Throwable exception){  savingDisabled=true;  Log.e(TAG,"Saving broken - " + message,exception);}  }
class C{  void makeArray(String fieldName) throws Exception {  println("Making array for field: " + fieldName);  Field arrayField=targetClass.fieldByName(fieldName);  ArrayType arrayType=(ArrayType)arrayField.type();  println("Type for " + fieldName + " is "+ arrayType);  ArrayReference arrayReference=arrayType.newInstance(20);  println("Passed subtest: " + fieldName);}  }
class C{  public void testSize(){  storedQueue.clear();  assertTrue(storedQueue.isEmpty());  populatedQueue(SIZE,storedQueue);  assertEquals(SIZE,storedQueue.size());  for (int i=0; i < SIZE; ++i) {    Helper.pause(PwmRandom.getInstance().nextInt(1000));    assertEquals(SIZE - i,storedQueue.size());    storedQueue.remove();  }  for (int i=0; i < SIZE; ++i) {    assertEquals(i,storedQueue.size());    storedQueue.add(String.valueOf(i));  }}  }
class C{  public static List<Alert> findByStatus(EntityManager em,boolean enabled){  requireArgument(em != null,"Entity manager can not be null.");  TypedQuery<Alert> query=em.createNamedQuery("Alert.findByStatus",Alert.class);  query.setHint("javax.persistence.cache.storeMode","REFRESH");  try {    query.setParameter("enabled",enabled);    return query.getResultList();  } catch (  NoResultException ex) {    return new ArrayList<>(0);  }}  }
class C{  private void reportProblem(String string){  problemCount++;  System.out.println(string);}  }
class C{  public static boolean equals(long[] field1,long[] field2){  if (field1 == null || field1.length == 0) {    return field2 == null || field2.length == 0;  } else {    return Arrays.equals(field1,field2);  }}  }
class C{  public SymetricalMatrix(double w,double[] a){  super(a.length,new double[a.length * a.length]);  for (int i=0; i < a.length; ++i) {    int indexU=i * (columns + 1);    int indexL=indexU;    double factor=w * a[i];    data[indexU]=factor * a[i];    for (int j=i + 1; j < columns; ++j) {      ++indexU;      indexL+=columns;      data[indexU]=factor * a[j];      data[indexL]=data[indexU];    }  }}  }
class C{  public void addLayerConfigurationListener(LayerConfigurationListener lcl){  layerConfigListeners.add(lcl);}  }
class C{  @Override public void beginWindow(long windowId){  result=false;}  }
class C{  private static PsiType unaryNumericPromotion(PsiType type){  if (type == null) {    return null;  }  if (type.equalsToText("java.lang.Byte") || type.equalsToText("java.lang.Short") || type.equalsToText("java.lang.Character")|| type.equalsToText("java.lang.Integer")|| type.equals(PsiType.BYTE)|| type.equals(PsiType.SHORT)|| type.equals(PsiType.CHAR)) {    return PsiType.INT;  } else   if (type.equalsToText("java.lang.Long")) {    return PsiType.LONG;  } else   if (type.equalsToText("java.lang.Float")) {    return PsiType.FLOAT;  } else   if (type.equalsToText("java.lang.Double")) {    return PsiType.DOUBLE;  }  return type;}  }
class C{  public static List<String> newDirectoryStream(String path){  List<FilePath> list=FilePath.get(path).newDirectoryStream();  int len=list.size();  List<String> result=New.arrayList(len);  for (int i=0; i < len; i++) {    result.add(list.get(i).toString());  }  return result;}  }
class C{  public static void deleteDirectoryQuickly(File dir) throws IOException {  if (!dir.exists()) {    return;  }  final File to=new File(dir.getAbsolutePath() + System.currentTimeMillis());  dir.renameTo(to);  if (!dir.exists()) {    dir.mkdirs();  }  if (to.exists()) {    String deleteCmd="rm -r " + to;    Runtime runtime=Runtime.getRuntime();    try {      Process process=runtime.exec(deleteCmd);      process.waitFor();    } catch (    IOException e) {    }catch (    InterruptedException e) {      e.printStackTrace();    }  }  if (!to.exists()) {    return;  }  deleteDirectoryRecursively(to);  if (to.exists()) {    to.delete();  }}  }
class C{  public boolean isAllowed(){  return isAllowed;}  }
class C{  public static String bytesToHexString(byte[] bytes){  StringBuffer buf=new StringBuffer(bytes.length * 2);  for (  byte b : bytes) {    String s=Integer.toString(0xFF & b,16);    if (s.length() < 2)     buf.append('0');    buf.append(s);  }  return buf.toString();}  }
class C{  public void logCreate(long streamId,IgfsPath path,IgfsMode mode,boolean overwrite,int bufSize,int replication,long blockSize){  addEntry(new Entry(TYPE_OPEN_OUT,path.toString(),mode,streamId,bufSize,null,false,overwrite,replication,blockSize,null,null,null,null,null,null,null,null,null,null));}  }
class C{  static SimpleSet findPackageSet(ClasspathJar jar){  String zipFileName=jar.zipFilename;  SimpleSet packageSet=new SimpleSet(41);  packageSet.add("");  nextEntry:   for (Enumeration e=jar.zipFile.entries(); e.hasMoreElements(); ) {    String fileName=((ZipEntry)e.nextElement()).getName();    int last=fileName.lastIndexOf('/');    while (last > 0) {      String packageName=fileName.substring(0,last);      String[] splittedName=Util.splitOn('/',packageName,0,packageName.length());      for (      String s : splittedName) {        if (!org.eclipse.jdt.internal.core.util.Util.isValidFolderNameForPackage(s,"1.7","1.7")) {          continue nextEntry;        }      }      if (packageSet.addIfNotIncluded(packageName) == null)       continue nextEntry;      last=packageName.lastIndexOf('/');    }  }  return packageSet;}  }
class C{  public void actionPerformed(ActionEvent e){  JEditorPane editor=getEditor(e);  if (editor != null) {    int size=this.size;    if ((e != null) && (e.getSource() == editor)) {      String s=e.getActionCommand();      try {        size=Integer.parseInt(s,10);      } catch (      NumberFormatException nfe) {      }    }    if (size != 0) {      MutableAttributeSet attr=new SimpleAttributeSet();      StyleConstants.setFontSize(attr,size);      setCharacterAttributes(editor,attr,false);    } else {      UIManager.getLookAndFeel().provideErrorFeedback(editor);    }  }}  }
class C{  public void testWriteOffset(){  int len=200;  int dataLen=100;  byte[] srcData=getWData(dataLen);  byte[] data=new byte[dataLen];  int nOffset=10;  ByteFifoBuffer instance=new ByteFifoBuffer(len);  int result=instance.writeOffset(srcData,dataLen,nOffset);  int readCount=instance.readOffset(data,0,dataLen,nOffset);  assertEquals(result,readCount);  assertArrayEquals(srcData,data);  byte[] halfFilled=new byte[dataLen * 2];  System.arraycopy(srcData,0,halfFilled,dataLen,dataLen);  byte[] halfFilledRead=new byte[dataLen * 2];  instance.readOffset(halfFilledRead,dataLen,dataLen,nOffset);  assertArrayEquals(halfFilled,halfFilledRead);  instance=new ByteFifoBuffer(len);  instance.write(srcData,dataLen);  instance.write(srcData,dataLen / 2);  instance.read(data,dataLen);  instance.writeOffset(srcData,dataLen,50);  instance=new ByteFifoBuffer(61440);  instance.writeOffset(getWData(1384),1384,31832);}  }
class C{  public void marshal(final Object obj,final HierarchicalStreamWriter writer){  marshal(obj,writer,null);}  }
class C{  public void analyze3(CompilationUnit unit,TypeTable typeTable){}  }
class C{  @Override public void onCompletion(MediaPlayer mp){  mState=State.STOPPED;  mp.stop();  mp.reset();}  }
class C{  private Stroke createStroke(){  float factor=currentState.lineAttributes.width > 0 ? currentState.lineAttributes.width : 3;  float awt_dash[];  int awt_cap;  int awt_join;switch (currentState.lineAttributes.style) {case SWTGraphics.LINE_DASH:    awt_dash=new float[]{factor * 6,factor * 3};  break;case SWTGraphics.LINE_DASHDOT:awt_dash=new float[]{factor * 3,factor,factor,factor};break;case SWTGraphics.LINE_DASHDOTDOT:awt_dash=new float[]{factor * 3,factor,factor,factor,factor,factor};break;case SWTGraphics.LINE_DOT:awt_dash=new float[]{factor,factor};break;case SWTGraphics.LINE_CUSTOM:awt_dash=currentState.lineAttributes.dash;break;default :awt_dash=null;}switch (currentState.lineAttributes.cap) {case SWT.CAP_FLAT:awt_cap=BasicStroke.CAP_BUTT;break;case SWT.CAP_ROUND:awt_cap=BasicStroke.CAP_ROUND;break;case SWT.CAP_SQUARE:awt_cap=BasicStroke.CAP_SQUARE;break;default :awt_cap=BasicStroke.CAP_BUTT;}switch (currentState.lineAttributes.join) {case SWT.JOIN_BEVEL:awt_join=BasicStroke.JOIN_BEVEL;break;case SWT.JOIN_MITER:awt_join=BasicStroke.JOIN_MITER;break;case SWT.JOIN_ROUND:awt_join=BasicStroke.JOIN_ROUND;default :awt_join=BasicStroke.JOIN_MITER;}stroke=new BasicStroke(currentState.lineAttributes.width != 0 ? currentState.lineAttributes.width : 1,awt_cap,awt_join,currentState.lineAttributes.miterLimit,awt_dash,currentState.lineAttributes.dashOffset);return stroke;}  }
class C{  private static void printColumnHeaders(McfData mcfData){  System.out.println("Column Headers:");  for (  ColumnHeaders header : mcfData.getColumnHeaders()) {    System.out.println("Column Name: " + header.getName());    System.out.println("Column Type: " + header.getColumnType());    System.out.println("Column Data Type: " + header.getDataType());  }  System.out.println();}  }
class C{  @Override protected void doInitializeFilters(){  Vector<String> filters=GenericObjectEditor.getClassnames(ExperimentFileHandler.class.getName());  m_FileFilters=new ArrayList<>();  for (  String filter : filters) {    try {      ExperimentFileHandler handler=(ExperimentFileHandler)Utils.forName(ExperimentFileHandler.class,filter,new String[0]);      m_FileFilters.add(new ExtensionFileFilterWithClass(handler.getFormatExtensions(),handler.getFormatDescription() + " (" + ObjectUtils.flatten(handler.getFormatExtensions(),", ")+ ")",filter));    } catch (    Exception e) {      System.err.println("Failed to instantiate file filter: " + filter);      e.printStackTrace();    }  }}  }
class C{  private void addPath(){  String name=_pathName.getText();  if (name == null || name.trim().length() == 0) {    JOptionPane.showMessageDialog(this,Bundle.getMessage("TooltipPathName"),Bundle.getMessage("makePath"),JOptionPane.INFORMATION_MESSAGE);    return;  }  OPath otherPath=_block.getPathByName(name);  boolean sameName=false;  if (otherPath != null) {    _pathList.setSelectedValue(otherPath,true);    sameName=true;    if (!_pathChange) {      Portal p=otherPath.getFromPortal();      if (p != null && !p.isValidPath(otherPath)) {        p.addPath(otherPath);      }      p=otherPath.getToPortal();      if (p != null && !p.isValidPath(otherPath)) {        p.addPath(otherPath);      }      setPathLength(otherPath);      return;    }  }  OPath path=makeOPath(name,_pathGroup,true);  if (path == null) {    return;  }  if (otherPath == null) {    Iterator<Path> iter=_block.getPaths().iterator();    while (iter.hasNext()) {      OPath p=(OPath)iter.next();      if (pathsEqual(path,p)) {        otherPath=p;        break;      }    }  }  changePathNameInIcons(name,path);  if (otherPath != null) {    if (!sameName) {      int result=JOptionPane.showConfirmDialog(this,Bundle.getMessage("samePath",otherPath.getName(),name),Bundle.getMessage("makePath"),JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);      if (result == JOptionPane.YES_OPTION) {        changePathName();      }    }    _pathList.setSelectedValue(otherPath,true);  }  Portal toPortal=path.getToPortal();  Portal fromPortal=path.getFromPortal();  if (fromPortal != null && fromPortal.equals(toPortal)) {    int result=JOptionPane.showConfirmDialog(this,Bundle.getMessage("balloonTrack",name,fromPortal.getDescription()),Bundle.getMessage("makePath"),JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);    if (result == JOptionPane.NO_OPTION) {      fromPortal=null;    }  }  _pathChange=false;  if (sameName) {    OPath oldPath=_block.getPathByName(name);    oldPath.setToPortal(toPortal);    oldPath.setFromPortal(fromPortal);    setPathLength(oldPath);    oldPath.clearSettings();    Iterator<BeanSetting> it=path.getSettings().iterator();    while (it.hasNext()) {      oldPath.addSetting(it.next());    }    toPortal.addPath(oldPath);    if (fromPortal != null) {      fromPortal.addPath(oldPath);    }  } else {    _block.addPath(path);    setPathLength(path);  }  _pathList.setSelectedValue(path,true);  _pathListModel.dataChange();}  }
class C{  public static boolean isValid(int c){  return (c < 0x10000 && (CHARS[c] & MASK_VALID) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  @Override protected String doExportAggregated(List<EvaluationStatistics> stats){  String result;  List<String> classifiers;  List<String> relations;  List<Number> measurements;  FileWriter fwriter;  BufferedWriter bwriter;  int i;  result=null;  classifiers=EvaluationStatisticsUtils.commandLines(stats,true);  relations=EvaluationStatisticsUtils.relations(stats,true);  fwriter=null;  bwriter=null;  try {    fwriter=new FileWriter(m_File);    bwriter=new BufferedWriter(fwriter);    String tabularConfig="lllllllllllllllllllllllllllllllllllllllllllllllllll".substring(0,classifiers.size() + 1);    bwriter.write("% " + m_Measurement);    bwriter.newLine();    bwriter.write("\\begin{tabular}{" + tabularConfig + "}");    bwriter.newLine();    bwriter.write("\\hline");    bwriter.newLine();    bwriter.write(String.format("%12s ","Datasets"));    for (i=0; i < classifiers.size(); i++) {      String name=MLUtils.getShortMethodName(classifiers.get(i));      name=LatexUtils.escape(name);      bwriter.write(String.format("& [%d] %-6s",(i + 1),name));    }    bwriter.write("\\\\");    bwriter.newLine();    bwriter.write("\\hline");    bwriter.newLine();    bwriter.flush();    int ranks[][]=EvaluationStatisticsUtils.rankMatrix(stats,m_Measurement);    for (int d=0; d < relations.size(); d++) {      String relation=relations.get(d);      String name=MLUtils.getRelationName(relation);      name=LatexUtils.escape(name);      bwriter.write(String.format("%12s ",name));      for (i=0; i < classifiers.size(); i++) {        measurements=EvaluationStatisticsUtils.measurements(stats,classifiers.get(i),relation,m_Measurement);        if (measurements.size() > 0) {          if (measurements.size() > 1)           log("Found " + measurements.size() + " measurements for combination "+ classifiers.get(i)+ "/"+ relation);          String value=String.format("& %5.3f (%d) ",measurements.get(0),ranks[d][i]);          bwriter.write(value);        }      }      bwriter.write(" \\\\");      bwriter.newLine();      bwriter.flush();    }    bwriter.write("\\hline");    bwriter.newLine();    bwriter.write(String.format("%12s ","Avg.\\ Rank"));    for (i=0; i < classifiers.size(); i++) {      String value=String.format("& %5.3f      ",Utils.mean(A.toDoubleArray(MatrixUtils.getCol(ranks,i))));      bwriter.write(value);    }    bwriter.write(" \\\\");    bwriter.newLine();    bwriter.write("\\hline");    bwriter.newLine();    bwriter.write("\\end{tabular}");    bwriter.newLine();    bwriter.flush();    bwriter.newLine();    bwriter.write("%Index");    bwriter.write("\t");    bwriter.write("Classifier");    bwriter.newLine();    for (i=0; i < classifiers.size(); i++) {      bwriter.write("%[" + (i + 1) + "]");      bwriter.write("\t");      bwriter.write(classifiers.get(i));      bwriter.newLine();    }  } catch (  Exception e) {    result=handleException("Failed to export statistics to: " + m_File,e);  } finally {    FileUtils.closeQuietly(bwriter);    FileUtils.closeQuietly(fwriter);  }  return result;}  }
class C{  public static String format(final Calendar calendar,final String pattern,final TimeZone timeZone,final Locale locale){  final FastDateFormat df=FastDateFormat.getInstance(pattern,timeZone,locale);  return df.format(calendar);}  }
class C{  public void testReadAllLinesUTF8() throws IOException {  Files.write(tmpfile,encodeAsUTF8(EN_STRING + "\n" + JA_STRING));  List<String> lines=Files.readAllLines(tmpfile);  assertTrue(lines.size() == 2,"Read " + lines.size() + " lines instead of 2");  assertTrue(lines.get(0).equals(EN_STRING));  assertTrue(lines.get(1).equals(JA_STRING));  testReadAllLinesMalformedUTF8((byte)0xFF);  testReadAllLinesMalformedUTF8((byte)0xC0,(byte)0x80);  testReadAllLinesMalformedUTF8((byte)0xC2,(byte)0x00);}  }
class C{  public static Value binopRhs(Unit unit){  return binop(rhs(unit));}  }
class C{  public boolean supportsConversion(Class<?> targetType,Object valueToConvert){  boolean rVal=false;  if (valueToConvert instanceof Decimal) {    rVal=true;  }  return (rVal);}  }
class C{  private static int parseInt(String s){  try {    return Integer.parseInt(s);  } catch (  NumberFormatException ex) {    throw new AdminXmlException(LocalizedStrings.ManagedEntityConfigXmlParser_MALFORMED_INTEGER_0.toLocalizedString(s),ex);  }}  }
class C{  public void copyTo(final GPData gpd){}  }
class C{  public boolean isCollection(){  if ((fType == UNKNOWN || fType == ITERABLE) && (fChecked & COLLECTION) == 0 && isSubtypeOf("java.util.Collection"))   fType=COLLECTION;  fChecked|=COLLECTION;  return fType == COLLECTION;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (!Slice.class.isAssignableFrom(obj.getClass())) {    return false;  }  final Slice other=(Slice)obj;  if (this.length != other.length) {    return false;  }  final int offset1=this.offset;  final byte[] buffer1=this.buffer;  int i=offset1 + this.length;  final byte[] buffer2=other.buffer;  int j=other.offset + other.length;  while (i-- > offset1) {    if (buffer1[i] != buffer2[--j]) {      return false;    }  }  return true;}  }
class C{  static Label createContentLabel(String text){  Label label=new Label(text);  label.setMaxWidth(Double.MAX_VALUE);  label.setMaxHeight(Double.MAX_VALUE);  label.getStyleClass().add("content");  label.setWrapText(true);  label.setPrefWidth(360);  return label;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  fullyLock();  try {    s.defaultWriteObject();    for (Node<E> p=head.next; p != null; p=p.next)     s.writeObject(p.item);    s.writeObject(null);  }  finally {    fullyUnlock();  }}  }
class C{  public boolean canOffsetTiles(){  return canOffsetTiles;}  }
class C{  public Object readColumn(ResultSet resultSet) throws SQLException {  ResultSetMetaData metaData=resultSet.getMetaData();  int foundIdx=-1;  for (int idx=1; (foundIdx < 0) && (idx <= metaData.getColumnCount()); idx++) {    if (_columnName.equals(metaData.getColumnName(idx).toUpperCase())) {      foundIdx=idx;    }  }  if (foundIdx > 0) {switch (_jdbcType) {case Types.BIT:      return new Boolean(resultSet.getBoolean(foundIdx));case Types.INTEGER:    return new Integer(resultSet.getInt(foundIdx));case Types.TINYINT:  return new Short(resultSet.getShort(foundIdx));default :return resultSet.getString(foundIdx);}} else {return _defaultValue;}}  }
class C{  private OFMessageUtils(){}  }
class C{  private static void encodeVarLongForSize(long value,byte[] ret,int size){  int end=0;  if (size > 8) {    ret[0]=(byte)0xff;    end=1;    size-=8;  }  ret[end]=(byte)((0xff << (9 - size)) & 0xff);  int index=ret.length;  while (index-- > end) {    ret[index]|=(byte)((int)value & 0xff);    value>>>=8;  }}  }
class C{  protected boolean haveSharedCellsRaw(ObjectMatrix1D other){  if (other instanceof SelectedDenseObjectMatrix1D) {    SelectedDenseObjectMatrix1D otherMatrix=(SelectedDenseObjectMatrix1D)other;    return this.elements == otherMatrix.elements;  } else   if (other instanceof DenseObjectMatrix1D) {    DenseObjectMatrix1D otherMatrix=(DenseObjectMatrix1D)other;    return this.elements == otherMatrix.elements;  }  return false;}  }
class C{  public MLResults execute(Script script,ScriptExecutor scriptExecutor){  try {    executingScript=script;    Long time=new Long((new Date()).getTime());    if ((script.getName() == null) || (script.getName().equals(""))) {      script.setName(time.toString());    }    MLResults results=scriptExecutor.execute(script);    String history=MLContextUtil.createHistoryForScript(script,time);    scriptHistoryStrings.add(history);    scripts.put(script.getName(),script);    return results;  } catch (  RuntimeException e) {    throw new MLContextException("Exception when executing script",e);  }}  }
class C{  private void finalizeDestinationFile(State state) throws StopRequest {  syncDestination(state);  String tempFilename=state.mFilename;  String finalFilename=Helpers.generateSaveFileName(mService,mInfo.mFileName);  if (!state.mFilename.equals(finalFilename)) {    File startFile=new File(tempFilename);    File destFile=new File(finalFilename);    if (mInfo.mTotalBytes != -1 && mInfo.mCurrentBytes == mInfo.mTotalBytes) {      if (!startFile.renameTo(destFile)) {        throw new StopRequest(DownloaderService.STATUS_FILE_ERROR,"unable to finalize destination file");      }    } else {      throw new StopRequest(DownloaderService.STATUS_FILE_DELIVERED_INCORRECTLY,"file delivered with incorrect size. probably due to network not browser configured");    }  }}  }
class C{  private boolean scrollAndFocus(int directionY,int top,int bottom,int directionX,int left,int right){  boolean handled=true;  int height=getHeight();  int containerTop=getScrollY();  int containerBottom=containerTop + height;  boolean up=directionY == View.FOCUS_UP;  int width=getWidth();  int containerLeft=getScrollX();  int containerRight=containerLeft + width;  boolean leftwards=directionX == View.FOCUS_UP;  View newFocused=findFocusableViewInBounds(up,top,bottom,leftwards,left,right);  if (newFocused == null) {    newFocused=this;  }  if ((top >= containerTop && bottom <= containerBottom) || (left >= containerLeft && right <= containerRight)) {    handled=false;  } else {    int deltaY=up ? (top - containerTop) : (bottom - containerBottom);    int deltaX=leftwards ? (left - containerLeft) : (right - containerRight);    doScroll(deltaX,deltaY);  }  if (newFocused != findFocus() && newFocused.requestFocus(directionY)) {    mTwoDScrollViewMovedFocus=true;    mTwoDScrollViewMovedFocus=false;  }  return handled;}  }
class C{  public boolean replaceIn(final StrBuilder source,final int offset,final int length){  if (source == null) {    return false;  }  return substitute(source,offset,length);}  }
class C{  public Terrain(int terrainSize,float scale,float minY,float maxY,String heightMapFile,String textureFile,int textInc) throws Exception {  this.terrainSize=terrainSize;  gameItems=new GameItem[terrainSize * terrainSize];  BufferedImage heightMapImage=ImageIO.read(getClass().getResourceAsStream(heightMapFile));  verticesPerCol=heightMapImage.getWidth() - 1;  verticesPerRow=heightMapImage.getHeight() - 1;  heightMapMesh=new HeightMapMesh(minY,maxY,heightMapImage,textureFile,textInc);  boundingBoxes=new Rectangle2D.Float[terrainSize][terrainSize];  for (int row=0; row < terrainSize; row++) {    for (int col=0; col < terrainSize; col++) {      float xDisplacement=(col - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getXLength();      float zDisplacement=(row - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getZLength();      GameItem terrainBlock=new GameItem(heightMapMesh.getMesh());      terrainBlock.setScale(scale);      terrainBlock.setPosition(xDisplacement,0,zDisplacement);      gameItems[row * terrainSize + col]=terrainBlock;      boundingBoxes[row][col]=getBoundingBox(terrainBlock);    }  }}  }
class C{  @Override public void writeVertices(final OutputStream outputStream,final Iterator<Vertex> vertexIterator,final Direction direction) throws IOException {  throw Io.Exceptions.writerFormatIsForFullGraphSerializationOnly(this.getClass());}  }
class C{  @Deprecated public static DiscordRecords series2DiscordsDeprecated(double[] series,int discordsNumToReport,int windowSize,int paaSize,int alphabetSize,SlidingWindowMarkerAlgorithm markerAlgorithm,NumerosityReductionStrategy strategy,double nThreshold) throws Exception {  Date start=new Date();  NormalAlphabet normalA=new NormalAlphabet();  SAXRecords sax=sp.ts2saxViaWindow(series,windowSize,alphabetSize,normalA.getCuts(alphabetSize),strategy,nThreshold);  Date saxEnd=new Date();  LOGGER.debug("discretized in {}, words: {}, indexes: {}",SAXProcessor.timeToString(start.getTime(),saxEnd.getTime()),sax.getRecords().size(),sax.getIndexes().size());  HashMap<String,ArrayList<Integer>> hash=new HashMap<String,ArrayList<Integer>>();  for (  SAXRecord sr : sax.getRecords()) {    for (    Integer pos : sr.getIndexes()) {      String word=String.valueOf(sr.getPayload());      if (!(hash.containsKey(word))) {        hash.put(word,new ArrayList<Integer>());      }      hash.get(String.valueOf(word)).add(pos);    }  }  Date hashEnd=new Date();  LOGGER.debug("Hash filled in : {}",SAXProcessor.timeToString(saxEnd.getTime(),hashEnd.getTime()));  DiscordRecords discords=getDiscordsWithHash(series,windowSize,hash,discordsNumToReport,markerAlgorithm,nThreshold);  Date end=new Date();  LOGGER.info("{} discords found in {}",discords.getSize(),SAXProcessor.timeToString(start.getTime(),end.getTime()));  return discords;}  }
class C{  protected void applyValues(){  this.setValues();}  }
class C{  public void saveSettings(){  Settings.CUSTOM_CLIENT_SIZE=generalPanelClientSizeCheckbox.isSelected();  Settings.CUSTOM_CLIENT_SIZE_X=((SpinnerNumberModel)(generalPanelClientSizeXSpinner.getModel())).getNumber().intValue();  Settings.CUSTOM_CLIENT_SIZE_Y=((SpinnerNumberModel)(generalPanelClientSizeYSpinner.getModel())).getNumber().intValue();  Settings.LOAD_CHAT_HISTORY=generalPanelChatHistoryCheckbox.isSelected();  Settings.COMBAT_MENU=generalPanelCombatXPMenuCheckbox.isSelected();  Settings.SHOW_XPDROPS=generalPanelXPDropsCheckbox.isSelected();  Settings.SHOW_FATIGUEDROPS=generalPanelFatigueDropsCheckbox.isSelected();  Settings.FATIGUE_FIGURES=((SpinnerNumberModel)(generalPanelFatigueFigSpinner.getModel())).getNumber().intValue();  Settings.FATIGUE_ALERT=generalPanelFatigueAlertCheckbox.isSelected();  Settings.NAME_PATCH_TYPE=generalPanelNamePatchModeSlider.getValue();  Settings.HIDE_ROOFS=generalPanelRoofHidingCheckbox.isSelected();  Settings.COLORIZE=generalPanelColoredTextCheckbox.isSelected();  Settings.FOV=generalPanelFoVSlider.getValue();  Settings.SOFTWARE_CURSOR=generalPanelCustomCursorCheckbox.isSelected();  Settings.VIEW_DISTANCE=generalPanelViewDistanceSlider.getValue();  Settings.SHOW_STATUSDISPLAY=overlayPanelStatusDisplayCheckbox.isSelected();  Settings.SHOW_INVCOUNT=overlayPanelInvCountCheckbox.isSelected();  Settings.SHOW_ITEMINFO=overlayPanelItemNamesCheckbox.isSelected();  Settings.SHOW_PLAYERINFO=overlayPanelPlayerNamesCheckbox.isSelected();  Settings.SHOW_FRIENDINFO=overlayPanelFriendNamesCheckbox.isSelected();  Settings.SHOW_NPCINFO=overlayPanelNPCNamesCheckbox.isSelected();  Settings.SHOW_HITBOX=overlayPanelNPCHitboxCheckbox.isSelected();  Settings.SHOW_FOOD_HEAL_OVERLAY=overlayPanelFoodHealingCheckbox.isSelected();  Settings.SHOW_TIME_UNTIL_HP_REGEN=overlayPanelHPRegenTimerCheckbox.isSelected();  Settings.DEBUG=overlayPanelDebugModeCheckbox.isSelected();  Settings.PM_NOTIFICATIONS=notificationPanelPMNotifsCheckbox.isSelected();  Settings.TRADE_NOTIFICATIONS=notificationPanelTradeNotifsCheckbox.isSelected();  Settings.DUEL_NOTIFICATIONS=notificationPanelDuelNotifsCheckbox.isSelected();  Settings.LOGOUT_NOTIFICATIONS=notificationPanelLogoutNotifsCheckbox.isSelected();  Settings.LOW_HP_NOTIFICATIONS=notificationPanelLowHPNotifsCheckbox.isSelected();  Settings.LOW_HP_NOTIF_VALUE=((SpinnerNumberModel)(notificationPanelLowHPNotifsSpinner.getModel())).getNumber().intValue();  Settings.FATIGUE_NOTIFICATIONS=notificationPanelFatigueNotifsCheckbox.isSelected();  Settings.FATIGUE_NOTIF_VALUE=((SpinnerNumberModel)(notificationPanelFatigueNotifsSpinner.getModel())).getNumber().intValue();  Settings.NOTIFICATION_SOUNDS=notificationPanelNotifSoundsCheckbox.isSelected();  Settings.USE_SYSTEM_NOTIFICATIONS=notificationPanelUseSystemNotifsCheckbox.isSelected();  Settings.TRAY_NOTIFS=notificationPanelTrayPopupCheckbox.isSelected();  Settings.TRAY_NOTIFS_ALWAYS=notificationPanelTrayPopupAnyFocusButton.isSelected();  Settings.SOUND_NOTIFS_ALWAYS=notificationPanelNotifSoundAnyFocusButton.isSelected();  Settings.TWITCH_HIDE=streamingPanelTwitchChatCheckbox.isSelected();  Settings.TWITCH_CHANNEL=streamingPanelTwitchChannelNameTextField.getText();  Settings.TWITCH_OAUTH=streamingPanelTwitchOAuthTextField.getText();  Settings.TWITCH_USERNAME=streamingPanelTwitchUserTextField.getText();  Settings.SHOW_LOGINDETAILS=streamingPanelIPAtLoginCheckbox.isSelected();  Settings.SAVE_LOGININFO=streamingPanelSaveLoginCheckbox.isSelected();  Settings.Save();}  }
class C{  public double tdy(final double y1,final double y2){  double height=this.height;  if (Math.abs(y1 - y2) <= height / 2)   return y1 - y2;  double dy=_sty(y1,height) - _sty(y2,height);  if (dy * 2 > height)   return dy - height;  if (dy * 2 < -height)   return dy + height;  return dy;}  }
class C{  public ValidateMemoryReply(final int packetId,final int errorCode,final IAddress start,final IAddress end){  super(packetId,errorCode);  if (success()) {    Preconditions.checkNotNull(start,"IE01057: Start argument can not be null");    Preconditions.checkNotNull(end,"IE01077: End argument can not be null");  } else {    if (start != null) {      throw new IllegalArgumentException("IE01078: Start argument must be null");    }    if (end != null) {      throw new IllegalArgumentException("IE01079: End argument must be null");    }  }  memoryRangeStart=start;  memoryRangeEnd=end;}  }
class C{  public static String encode(byte[] binaryData){  if (binaryData == null) {    return null;  }  int lengthDataBits=binaryData.length * EIGHTBIT;  if (lengthDataBits == 0) {    return "";  }  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  int numberQuartet=fewerThan24bits != 0 ? numberTriplets + 1 : numberTriplets;  char encodedData[]=null;  encodedData=new char[numberQuartet * 4];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  for (int i=0; i < numberTriplets; i++) {    b1=binaryData[dataIndex++];    b2=binaryData[dataIndex++];    b3=binaryData[dataIndex++];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex++]=lookUpBase64Alphabet[b3 & 0x3f];  }  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex++]=PAD;    encodedData[encodedIndex++]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex++]=PAD;  }  return new String(encodedData);}  }
class C{  protected IRegion processHandlersOutBlocks(MethodNode mth,Set<TryCatchBlock> tcs){  Set<IBlock> allRegionBlocks=new HashSet<IBlock>();  RegionUtils.getAllRegionBlocks(mth.getRegion(),allRegionBlocks);  Set<IBlock> succBlocks=new HashSet<IBlock>();  for (  TryCatchBlock tc : tcs) {    for (    ExceptionHandler handler : tc.getHandlers()) {      IContainer region=handler.getHandlerRegion();      if (region != null) {        IBlock lastBlock=RegionUtils.getLastBlock(region);        if (lastBlock instanceof BlockNode) {          succBlocks.addAll(((BlockNode)lastBlock).getSuccessors());        }        RegionUtils.getAllRegionBlocks(region,allRegionBlocks);      }    }  }  succBlocks.removeAll(allRegionBlocks);  if (succBlocks.isEmpty()) {    return null;  }  Region excOutRegion=new Region(mth.getRegion());  for (  IBlock block : succBlocks) {    if (block instanceof BlockNode) {      excOutRegion.add(makeRegion((BlockNode)block,new RegionStack(mth)));    }  }  return excOutRegion;}  }
class C{  protected void delete(Object[] row,boolean commitIndex) throws SQLException {  String query=getQuery(row);  try {    Term term=new Term(LUCENE_FIELD_QUERY,query);    indexAccess.writer.deleteDocuments(term);    if (commitIndex) {      commitIndex();    }  } catch (  IOException e) {    throw convertException(e);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void rollback(){  checkClosed();  TXStateProxy tx=getTXState();  if (tx == null) {    throw new IllegalStateException(LocalizedStrings.TXManagerImpl_THREAD_DOES_NOT_HAVE_AN_ACTIVE_TRANSACTION.toLocalizedString());  }  tx.checkJTA(LocalizedStrings.TXManagerImpl_CAN_NOT_ROLLBACK_THIS_TRANSACTION_IS_ENLISTED_WITH_A_JTA_TRANSACTION_USE_THE_JTA_MANAGER_TO_PERFORM_THE_ROLLBACK.toLocalizedString());  final long opStart=CachePerfStats.getStatTime();  final long lifeTime=opStart - tx.getBeginTime();  setTXState(null);  tx.rollback();  saveTXStateForClientFailover(tx);  cleanup(tx.getTransactionId());  noteRollbackSuccess(opStart,lifeTime,tx);}  }
class C{  public MethodInfo[] findMethodsHere(String name){  return (isMissing ? null : getDetails().findMethodsHere(name));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:42.150 -0500",hash_original_method="0985A29138FED57B817275CA373E16BB",hash_generated_method="C8AE084F0A43B82FC7C2DB9FAC19AA61") public static String loggerNameToTag(String loggerName){  if (loggerName == null) {    return "null";  }  int length=loggerName.length();  if (length <= 23) {    return loggerName;  }  int lastPeriod=loggerName.lastIndexOf(".");  return length - (lastPeriod + 1) <= 23 ? loggerName.substring(lastPeriod + 1) : loggerName.substring(loggerName.length() - 23);}  }
class C{  @Override public DataHeaderViewHolder newViewHolder(ViewGroup viewGroup){  View dataHeaderView=LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.data_header,viewGroup,false);  return new DataHeaderViewHolder(dataHeaderView);}  }
class C{  @Override public boolean onItemUse(ItemStack par1ItemStack,EntityPlayer par2EntityPlayer,World par3World,int x,int y,int z,int par7,float par8,float par9,float par10){  Block block=par3World.getBlock(x,y,z);  int blockMetadata=par3World.getBlockMetadata(x,y,z);  if (block == DefenseTechBlocks.blockMachine) {    TileEntity tileEntity=par3World.getTileEntity(x,y,z);    if (tileEntity != null) {      if (tileEntity instanceof TileLauncherScreen) {        TileLauncherScreen missileLauncher=(TileLauncherScreen)tileEntity;        Pos3D savedCords=this.getLink(par1ItemStack);        if (!savedCords.equals(new Pos3D())) {          if (missileLauncher.getTarget() == null) {            missileLauncher.setTarget(new Pos3D());          }          missileLauncher.getTarget().xPos=(int)savedCords.xPos;          missileLauncher.getTarget().zPos=(int)savedCords.zPos;          if (par3World.isRemote) {            ArrayList data=new ArrayList();            data.add(2);            data.add((int)savedCords.xPos);            data.add((int)missileLauncher.getTarget().yPos);            data.add((int)savedCords.zPos);            Mekanism.packetHandler.sendToServer(new TileEntityMessage(Coord4D.get(missileLauncher),data));            par2EntityPlayer.addChatMessage(new ChatComponentText(Reference.CHAT_DESC + EnumColor.GREY + " "+ LangUtils.localize("message.radarGun.transfer")));          }        } else {          if (par3World.isRemote)           par2EntityPlayer.addChatMessage(new ChatComponentText(Reference.CHAT_DESC + EnumColor.GREY + " "+ LangUtils.localize("message.radarGun.noCoords")));        }      } else       if (tileEntity instanceof TileCruiseLauncher) {        TileCruiseLauncher missileLauncher=(TileCruiseLauncher)tileEntity;        Pos3D savedCords=this.getLink(par1ItemStack);        if (!savedCords.equals(new Pos3D())) {          if (missileLauncher.getTarget() == null) {            missileLauncher.setTarget(new Pos3D());          }          missileLauncher.setTarget(savedCords.clone());          if (par3World.isRemote) {            ArrayList data=new ArrayList();            data.add(2);            data.add((int)savedCords.xPos);            data.add((int)missileLauncher.getTarget().yPos);            data.add((int)savedCords.zPos);            Mekanism.packetHandler.sendToServer(new TileEntityMessage(Coord4D.get(missileLauncher),data));            par2EntityPlayer.addChatMessage(new ChatComponentText(Reference.CHAT_DESC + EnumColor.GREY + " "+ LangUtils.localize("message.radarGun.transfer")));          }        } else {          if (par3World.isRemote) {            par2EntityPlayer.addChatMessage(new ChatComponentText(Reference.CHAT_DESC + EnumColor.GREY + " "+ LangUtils.localize("message.radarGun.noCoords")));          }        }      }    }  }  return false;}  }
class C{  @Provides @Config("sshTimeout") public static Duration provideSshTimeout(){  return Duration.standardSeconds(30);}  }
class C{  public void ignoreGazetteer(String label){  this.ignore.add(label);}  }
class C{  public int read() throws IOException {  if (bufOff >= maxBuf) {    if (nextChunk() < 0) {      return -1;    }  }  return buf[bufOff++] & 0xff;}  }
class C{  public boolean addNode(Lop node){  if (nodes.contains(node))   return false;  nodes.add(node);  return true;}  }
class C{  public Matrix3d(){  this.m00=0.0;  this.m01=0.0;  this.m02=0.0;  this.m10=0.0;  this.m11=0.0;  this.m12=0.0;  this.m20=0.0;  this.m21=0.0;  this.m22=0.0;}  }
class C{  @SuppressWarnings("unchecked") public CacheLIRS(long maxMemory,int segmentCount,int stackMoveDistance){  setMaxMemory(maxMemory);  if (Integer.bitCount(segmentCount) != 1) {    throw new IllegalArgumentException("The segment count must be a power of 2, is " + segmentCount);  }  this.segmentCount=segmentCount;  this.segmentMask=segmentCount - 1;  this.stackMoveDistance=stackMoveDistance;  segments=new Segment[segmentCount];  clear();  this.segmentShift=32 - Integer.bitCount(segmentMask);}  }
class C{  private static void ArrayReadWrite() throws Throwable {  byte[] buf=new byte[512];  reset();  check(dis.available() == 1);  for (; ; ) {    int len=dis.read(buf,0,buf.length);    if (len < 0) {      break;    } else {      ios.write(buf,0,len);    }  }  check(dis.available() == 0);  ios.close();  check(Arrays.equals(data,baos.toByteArray()));}  }
class C{  public blockquote addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public void appendEntryBatch(byte[] buf,int offset,int len){  if (size + len + 2 > buffer.length) {    throw new IllegalStateException("There is not enough space for another command");  }  assert !isHeartbeat();  byteBuffer.putShort((short)len);  byteBuffer.put(buf,offset,len);  size+=len + 2;  byteBuffer.putShort(0,(short)size);  stats.appendEntryBatch();  if (messageTracing) {    tracingInfo=String.format("AE(cterm=%d pterm=%d index=%d ci=%d size=%d) batch",term,prevRid.term,prevRid.index + 1,commitIndex,size - overhead[TYPE_APPEND_ENTRY_REQ]);  }  numCommands++;}  }
class C{  public void testPosNegSameLength(){  String numA="283746278342837476784564875684767";  String numB="-293478573489347658763745839457637";  String res="-71412358434940908477702819237628";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public PlaneModel(){}  }
class C{  public void goTo(final Fragment fragment){  mFragmentManager.beginTransaction().addToBackStack(getName(fragment)).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN).replace(mDefaultContainer,fragment,getName(fragment)).commit();  mFragmentManager.executePendingTransactions();}  }
class C{  public XYShapeAnnotation(Shape shape,Stroke stroke,Paint outlinePaint,Paint fillPaint){  super();  ParamChecks.nullNotPermitted(shape,"shape");  this.shape=shape;  this.stroke=stroke;  this.outlinePaint=outlinePaint;  this.fillPaint=fillPaint;}  }
class C{  public static void downloadArtwork(Movie movie,MediaFileType type){switch (type) {case FANART:    downloadFanart(movie);  break;case POSTER:downloadPoster(movie);break;case EXTRAFANART:case EXTRATHUMB:case LOGO:case CLEARLOGO:case BANNER:case CLEARART:case THUMB:case DISCART:downloadExtraArtwork(movie,type);break;default :break;}}  }
class C{  private ByteLookupTable createByteLut(float scale[],float off[],int nBands,int nElems){  byte[][] lutData=new byte[scale.length][nElems];  for (int band=0; band < scale.length; band++) {    float bandScale=scale[band];    float bandOff=off[band];    byte[] bandLutData=lutData[band];    for (int i=0; i < nElems; i++) {      int val=(int)(i * bandScale + bandOff);      if ((val & 0xffffff00) != 0) {        if (val < 0) {          val=0;        } else {          val=255;        }      }      bandLutData[i]=(byte)val;    }  }  return new ByteLookupTable(0,lutData);}  }
class C{  public void processByte(byte in){  if (bufOff >= buf.length) {    throw new DataLengthException("attempt to process message too long for cipher");  }  buf[bufOff++]=in;}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  public SharedObject(Map<String,Object> data,String name,String path,boolean persistent,IPersistenceStore storage){  this(data,name,path,persistent);  setStore(storage);}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.SKILL_REF;}  }
class C{  protected void finalizeProjection(){  Projection projection=getProjection();  Cartesian cartesian=(projection instanceof Cartesian) ? (Cartesian)projection : null;  if (cartesian != null) {    double screenWidth=cartesian.getWidth();    cartesian.setLeftLimit(TimelineLayer.forwardProjectMillis(gameStartTime));    cartesian.setRightLimit(TimelineLayer.forwardProjectMillis(gameEndTime));    cartesian.setLimitAnchorPoint(new Point2D.Double(TimelineLayer.forwardProjectMillis(-gameStartTime),0));    float scale=(float)(magicScaleFactor * (double)TimelineLayer.forwardProjectMillis(gameEndTime - gameStartTime) / screenWidth);    zoomDelegate.fireZoom(ZoomEvent.ABSOLUTE,scale);    double nCenterLon=TimelineLayer.forwardProjectMillis(gameEndTime - gameStartTime) / 2f;    logger.fine("Telling the center delegate that the new center is 0, " + nCenterLon);    centerDelegate.fireCenter(0,nCenterLon);    double x=cartesian.getCenter().getX();    if (!MoreMath.approximately_equal(x,nCenterLon)) {      ((MapBean)((MapHandler)getBeanContext()).get(MapBean.class)).setCenter(0,nCenterLon);    }    repaint();  }}  }
class C{  private JProductAttEdit(java.awt.Frame parent,boolean modal){  super(parent,modal);}  }
class C{  final public int capacity(){  return keys.length;}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  public BulkDetailsResponse bulkDetails(List<String> packageNames) throws IOException {  Builder bulkDetailsRequestBuilder=BulkDetailsRequest.newBuilder();  bulkDetailsRequestBuilder.addAllDocid(packageNames);  ResponseWrapper responseWrapper=executePOSTRequest(BULKDETAILS_URL,bulkDetailsRequestBuilder.build().toByteArray(),"application/x-protobuf");  return responseWrapper.getPayload().getBulkDetailsResponse();}  }
class C{  void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  int attributeCount=0;  if (value != 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (value != 0) {    out.putShort(cw.newUTF8("ConstantValue"));    out.putInt(2).putShort(value);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(cw.newUTF8("Signature"));    out.putInt(2).putShort(signature);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  Item newConstItem(final Object cst){  if (cst instanceof Integer) {    int val=((Integer)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Byte) {    int val=((Byte)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Character) {    int val=((Character)cst).charValue();    return newInteger(val);  } else   if (cst instanceof Short) {    int val=((Short)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Boolean) {    int val=((Boolean)cst).booleanValue() ? 1 : 0;    return newInteger(val);  } else   if (cst instanceof Float) {    float val=((Float)cst).floatValue();    return newFloat(val);  } else   if (cst instanceof Long) {    long val=((Long)cst).longValue();    return newLong(val);  } else   if (cst instanceof Double) {    double val=((Double)cst).doubleValue();    return newDouble(val);  } else   if (cst instanceof String) {    return newString((String)cst);  } else   if (cst instanceof Type) {    Type t=(Type)cst;    int s=t.getSort();    if (s == Type.OBJECT) {      return newClassItem(t.getInternalName());    } else     if (s == Type.METHOD) {      return newMethodTypeItem(t.getDescriptor());    } else {      return newClassItem(t.getDescriptor());    }  } else   if (cst instanceof Handle) {    Handle h=(Handle)cst;    return newHandleItem(h.tag,h.owner,h.name,h.desc);  } else {    throw new IllegalArgumentException("value " + cst);  }}  }
class C{  @Override public synchronized void reset() throws IOException {  in.reset();}  }
class C{  public static boolean isNativeRegister(final ReilOperand operand){  Preconditions.checkNotNull(operand,"Operand argument can not be null");  return com.google.security.zynamics.reil.ReilHelpers.isNativeRegister(operand.getNative());}  }
class C{  public ErrorResponse(final TimeInstant timeStamp,final String message,final int status){  this.status=status;  this.error=getStatusReason(status);  this.message=message;  this.timeStamp=timeStamp;  final Level logLevel=this.status >= 500 ? Level.SEVERE : Level.INFO;  LOGGER.log(logLevel,this.toString());}  }
class C{  static ByteBuffer newByteBuffer(int capacity){  ByteBuffer newbb=ByteBuffer.allocate(capacity);  newbb.order(ByteOrder.LITTLE_ENDIAN);  return newbb;}  }
class C{  public static byte[] asUnsignedByteArray(BigInteger value){  byte[] bytes=value.toByteArray();  if (bytes[0] == 0) {    byte[] tmp=new byte[bytes.length - 1];    System.arraycopy(bytes,1,tmp,0,tmp.length);    return tmp;  }  return bytes;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ENTRY_OR_EXIT_ACTION___TYPE_1:    setType_1(TYPE_1_EDEFAULT);  return;case UmplePackage.ENTRY_OR_EXIT_ACTION___ANONYMOUS_ENTRY_OR_EXIT_ACTION_11:getAnonymous_entryOrExitAction_1_1().clear();return;case UmplePackage.ENTRY_OR_EXIT_ACTION___CODE_1:setCode_1(CODE_1_EDEFAULT);return;case UmplePackage.ENTRY_OR_EXIT_ACTION___ANONYMOUS_ENTRY_OR_EXIT_ACTION_21:getAnonymous_entryOrExitAction_2_1().clear();return;}super.eUnset(featureID);}  }
class C{  @Override public boolean equals(Object object){  if (object == null || !(object instanceof XStudentId))   return false;  return getStudentId().equals(((XStudentId)object).getStudentId());}  }
class C{  public void clear(){  size=0;  offset=0;  currentBufferIndex=-1;  currentBuffer=null;  buffersCount=0;}  }
class C{  public void writeFile() throws NotFoundException, IOException, CannotCompileException {  writeFile(".");}  }
class C{  void handleJavaFocusEvent(final FocusEvent e){  KeyboardFocusManagerPeer kfmPeer=LWKeyboardFocusManagerPeer.getInstance();  kfmPeer.setCurrentFocusOwner(e.getID() == FocusEvent.FOCUS_GAINED ? getTarget() : null);}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public EntityListIterator findListIteratorByCondition(Delegator delegator,ModelEntity modelEntity,EntityCondition whereEntityCondition,EntityCondition havingEntityCondition,Collection<String> fieldsToSelect,List<String> orderBy,EntityFindOptions findOptions) throws GenericEntityException {  return genericDAO.selectListIteratorByCondition(delegator,modelEntity,whereEntityCondition,havingEntityCondition,fieldsToSelect,orderBy,findOptions);}  }
class C{  private BigDecimal updateCosts(MAcctSchema as,boolean create){  if (create) {    StringBuffer sql=new StringBuffer("INSERT INTO M_Product_Costing " + "(M_Product_ID,C_AcctSchema_ID," + " AD_Client_ID,AD_Org_ID,IsActive,Created,CreatedBy,Updated,UpdatedBy,"+ " CurrentCostPrice,CostStandard,FutureCostPrice,"+ " CostStandardPOQty,CostStandardPOAmt,CostStandardCumQty,CostStandardCumAmt,"+ " CostAverage,CostAverageCumQty,CostAverageCumAmt,"+ " PriceLastPO,PriceLastInv, TotalInvQty,TotalInvAmt) "+ "VALUES (");    sql.append(m_M_Product_ID).append(",").append(as.getC_AcctSchema_ID()).append(",").append(m_AD_Client_ID).append(",").append(m_AD_Org_ID).append(",").append("'Y',SysDate,0,SysDate,0, 0,0,0,  0,0,0,0,  0,0,0,  0,0,  0,0)");    int no=DB.executeUpdate(sql.toString(),m_trxName);    if (no == 1)     log.fine("CostingCreated");  }  String costSource="PriceList-PO";  BigDecimal costs=getPriceList(as,true);  if (costs == null || costs.compareTo(Env.ZERO) == 0) {    costSource="PO Cost";    costs=getPOCost(as);  }  if (costs == null || costs.compareTo(Env.ZERO) == 0) {    costSource="PriceList";    costs=getPriceList(as,false);  }  if (costs == null || costs.compareTo(Env.ZERO) == 0) {    costSource="Not Found";    costs=new BigDecimal("1");  }  StringBuffer sql=new StringBuffer("UPDATE M_Product_Costing ");  sql.append("SET CurrentCostPrice=").append(costs).append(" WHERE M_Product_ID=").append(m_M_Product_ID).append(" AND C_AcctSchema_ID=").append(as.getC_AcctSchema_ID());  int no=DB.executeUpdate(sql.toString(),m_trxName);  if (no == 1)   log.fine(costSource + " - " + costs);  return costs;}  }
class C{  public boolean contains(final int pos){  final int index=pos - mStart;  return mInterval[index] != EMPTY;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.421 -0500",hash_original_method="B3778AA77CFEBEDD69DFA469D1B245AC",hash_generated_method="BA5AF8184EF8B605C9D0F1E30BA3B718") static public void assertEquals(int expected,int actual){  assertEquals(null,expected,actual);}  }
class C{  public boolean isVisible(ReviewDb db) throws OrmException {  return isVisible(db,null);}  }
class C{  @Override public void write(TextWriterStream out,String label,TextWriteable obj){  obj.writeToText(out,label);}  }
class C{  public final void skipUntil(final double when){  this.skipUntil=when;}  }
class C{  public BackgroundPainter(String image){  SpriteStore store=SpriteStore.get();  Sprite mother=store.getSprite(image);  int tileWidth=mother.getWidth() / 3;  int tileHeight=mother.getHeight() / 3;  images=new Sprite[9];  int i=0;  for (int y=0; y < 3 * tileHeight; y+=tileHeight) {    for (int x=0; x < 3 * tileWidth; x+=tileWidth) {      images[i]=store.getTile(mother,x,y,tileWidth,tileHeight);      i++;    }  }}  }
class C{  public void tableSwitch(final int[] keys,final TableSwitchGenerator generator,final boolean useTable){  for (int i=1; i < keys.length; ++i) {    if (keys[i] < keys[i - 1]) {      throw new IllegalArgumentException("keys must be sorted ascending");    }  }  Label def=newLabel();  Label end=newLabel();  if (keys.length > 0) {    int len=keys.length;    int min=keys[0];    int max=keys[len - 1];    int range=max - min + 1;    if (useTable) {      Label[] labels=new Label[range];      Arrays.fill(labels,def);      for (int i=0; i < len; ++i) {        labels[keys[i] - min]=newLabel();      }      mv.visitTableSwitchInsn(min,max,def,labels);      for (int i=0; i < range; ++i) {        Label label=labels[i];        if (label != def) {          mark(label);          generator.generateCase(i + min,end);        }      }    } else {      Label[] labels=new Label[len];      for (int i=0; i < len; ++i) {        labels[i]=newLabel();      }      mv.visitLookupSwitchInsn(def,keys,labels);      for (int i=0; i < len; ++i) {        mark(labels[i]);        generator.generateCase(keys[i],end);      }    }  }  mark(def);  generator.generateDefault();  mark(end);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  private void decode(byte[] data,int width,int height){  Size size=activity.getCameraManager().getPreviewSize();  byte[] rotatedData=new byte[data.length];  for (int y=0; y < size.height; y++) {    for (int x=0; x < size.width; x++)     rotatedData[x * size.height + size.height - y - 1]=data[x + y * size.width];  }  int tmp=size.width;  size.width=size.height;  size.height=tmp;  Result rawResult=null;  PlanarYUVLuminanceSource source=buildLuminanceSource(rotatedData,size.width,size.height);  if (source != null) {    BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));    try {      rawResult=multiFormatReader.decodeWithState(bitmap);    } catch (    ReaderException re) {    } finally {      multiFormatReader.reset();    }  }  Handler handler=activity.getHandler();  if (rawResult != null) {    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_succeeded,rawResult);      Bundle bundle=new Bundle();      bundleThumbnail(source,bundle);      message.setData(bundle);      message.sendToTarget();    }  } else {    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_failed);      message.sendToTarget();    }  }}  }
class C{  @Override public synchronized int deleteAll() throws Exception {  return db.delete(transformer.getTableName(),null,null);}  }
class C{  public Name replaceUnsafeNameChars(){  return Name.of(value().trim().replaceAll("\\s|[^\\w]","_").replaceAll("arn","Arn"));}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SWP");  translateAll(environment,instruction,"SWP",instructions);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=enumToVector(super.listOptions());  result.addElement(new Option("\tThe number of examples to generate (default " + defaultNumExamples() + ")","n",1,"-n <num>"));  return result.elements();}  }
class C{  public static JsonObject buildMetricsConfig(){  JsonObject metricsConfig=new JsonObject();  metricsConfig.put("address",Address.monitoringAddress());  return metricsConfig;}  }
class C{  public CAMatrix(int w,int h){  width=w;  height=h;  matrix=new int[w * h];  swap=new int[w * h];}  }
class C{  public static File definePath(final DigestURL url,final int depth,final Date date,final String ext,State state){  if (state == State.ANY)   throw new RuntimeException("definePath must be selected with INVENTORY or ARCHIVE state");  if (state == State.INVENTORY)   return inventory.definePath(url,depth,date,ext);  if (state == State.ARCHIVE)   return archive.definePath(url,depth,date,ext);  return null;}  }
class C{  public OsmAgentApp(){  Locale.setDefault(Locale.US);}  }
class C{  public void scrollList(String name) throws Throwable {  int i=0;  Dimension dimension=appiumDriver.manage().window().getSize();  int ht=dimension.height;  int width=dimension.width;  if (isAndroid()) {    while (!verifyElementIsDisplayedById(name)) {      appiumDriver.swipe((width / 2),(ht / 2),(width / 4),(ht / 4),500);    }  } else {    try {      if (appPath.contains(".ipa")) {        while (!(verifyElementIsDisplayedById(name))) {          appiumDriver.swipe((width / 2),(ht / 2),(width / 4),(ht / 4),500);          i++;          if (i > 20) {            throw new Exception();          }        }      }    } catch (    Throwable e) {      Reporter.log("Element not found by name:" + name);      throw e;    }  }}  }
class C{  public List<TreeNode> generateTrees(int n){  return genTrees(1,n);}  }
class C{  public static long copy(InputStream in,OutputStream out) throws IOException {  return copy(in,out,Long.MAX_VALUE);}  }
class C{  JavaClassInArray(String name){  super(uriFromString("mfm:///" + name.replace('.','/') + Kind.CLASS.extension),Kind.CLASS);  this.name=name;}  }
class C{  public static BufferedImage readRGBImageFromCMYK(InputStream in,ICC_Profile cmykProfile) throws IOException {  ImageInputStream inputStream=null;  ImageReader reader=ImageIO.getImageReadersByFormatName("JPEG").next();  inputStream=(in instanceof ImageInputStream) ? (ImageInputStream)in : ImageIO.createImageInputStream(in);  reader.setInput(inputStream);  Raster raster=reader.readRaster(0,null);  BufferedImage image=createRGBImageFromCMYK(raster,cmykProfile);  return image;}  }
class C{  private boolean isUnaryFunction(char tok){  if (UNARY_FUNCTIONS.indexOf(tok) == -1) {    return false;  }  return true;}  }
class C{  public static void showProgress(View view,View customProgressView){  pool.showProgress(view,customProgressView);}  }
class C{  private static SymmetricMatrix join(Matrix[] a){  int p=a[0].rows();  int n=p + a[1].rows();  double[][] newComponents=new double[n][n];  for (int i=0; i < p; i++) {    for (int j=0; j < p; j++)     newComponents[i][j]=a[0].components[i][j];    for (int j=p; j < n; j++)     newComponents[i][j]=newComponents[j][i]=-a[2].components[j - p][i];  }  for (int i=p; i < n; i++) {    for (int j=p; j < n; j++)     newComponents[i][j]=a[1].components[i - p][j - p];  }  return new SymmetricMatrix(newComponents);}  }
class C{  public UserProjectObject(){  super();}  }
class C{  @SuppressWarnings({"NullableProblems","unchecked"}) private void startUp(boolean initDfltPathModes) throws Exception {  startUpSecondary();  FileSystemConfiguration igfsCfg=new FileSystemConfiguration();  igfsCfg.setDataCacheName("partitioned");  igfsCfg.setMetaCacheName("replicated");  igfsCfg.setName("igfs");  igfsCfg.setBlockSize(512 * 1024);  igfsCfg.setInitializeDefaultPathModes(initDfltPathModes);  IgfsIpcEndpointConfiguration endpointCfg=new IgfsIpcEndpointConfiguration();  endpointCfg.setType(IgfsIpcEndpointType.TCP);  endpointCfg.setPort(10500);  igfsCfg.setIpcEndpointConfiguration(endpointCfg);  igfsCfg.setManagementPort(-1);  igfsCfg.setSecondaryFileSystem(new IgniteHadoopIgfsSecondaryFileSystem("igfs://igfs-secondary:igfs-grid-secondary@127.0.0.1:11500/","modules/core/src/test/config/hadoop/core-site-loopback-secondary.xml"));  CacheConfiguration cacheCfg=defaultCacheConfiguration();  cacheCfg.setName("partitioned");  cacheCfg.setCacheMode(PARTITIONED);  cacheCfg.setNearConfiguration(null);  cacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  cacheCfg.setAffinityMapper(new IgfsGroupDataBlocksKeyMapper(128));  cacheCfg.setBackups(0);  cacheCfg.setAtomicityMode(TRANSACTIONAL);  CacheConfiguration metaCacheCfg=defaultCacheConfiguration();  metaCacheCfg.setName("replicated");  metaCacheCfg.setCacheMode(REPLICATED);  metaCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  metaCacheCfg.setAtomicityMode(TRANSACTIONAL);  IgniteConfiguration cfg=new IgniteConfiguration();  cfg.setGridName("igfs-grid");  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();  discoSpi.setIpFinder(new TcpDiscoveryVmIpFinder(true));  cfg.setDiscoverySpi(discoSpi);  cfg.setCacheConfiguration(metaCacheCfg,cacheCfg);  cfg.setFileSystemConfiguration(igfsCfg);  cfg.setLocalHost("127.0.0.1");  G.start(cfg);  Configuration fsCfg=new Configuration();  fsCfg.addResource(U.resolveIgniteUrl("modules/core/src/test/config/hadoop/core-site-loopback.xml"));  fsCfg.setBoolean("fs.igfs.impl.disable.cache",true);  fs=(IgniteHadoopFileSystem)FileSystem.get(new URI("igfs://igfs:igfs-grid@/"),fsCfg);}  }
class C{  public Boolean isHttpFirmwareUpgrade(){  return httpFirmwareUpgrade;}  }
class C{  private SqlExceptionUtil(){}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static String[] splitComponents(String str){  List<String> l=new ArrayList<>();  int last=0;  int depth=0;  char[] chars=str.toCharArray();  for (int i=0; i < chars.length; i++) {switch (chars[i]) {case '(':      depth++;    break;case ')':  depth--;break;case ',':if (depth == 0) {String s=str.substring(last,i);l.add(s);last=i + 1;}break;default :}}String s=str.substring(last);if (s.length() != 0) {l.add(s);}String[] rc=new String[l.size()];l.toArray(rc);return rc;}  }
class C{  public int size(){  return n;}  }
class C{  public boolean checkError(){  flush();synchronized (lock) {    return mIoError;  }}  }
class C{  public PopupContextTreeMenu(){  super();}  }
class C{  public static int nextInt(){  wasAccessed=true;  return currentNumber++;}  }
class C{  public DatabaseConnection(Properties props) throws Exception {  super(props);}  }
class C{  public Object trapMethodcall(int identifier,Object[] args) throws Throwable {  try {    Method[] m=getReflectiveMethods();    return m[identifier].invoke(null,args);  } catch (  java.lang.reflect.InvocationTargetException e) {    throw e.getTargetException();  }catch (  java.lang.IllegalAccessException e) {    throw new CannotInvokeException(e);  }}  }
class C{  public boolean containsAny(TaxonList taxonList){  for (int i=0; i < taxonList.getTaxonCount(); i++) {    Taxon taxon=taxonList.getTaxon(i);    if (taxa.contains(taxon)) {      return true;    }  }  return false;}  }
class C{  private int readFirstStartRef() throws PdfException {  offset.setRefTableInvalid(false);  int pointer=-1;  int i=1019;  final StringBuilder startRef=new StringBuilder(10);  final int block=1024;  byte[] lastBytes=new byte[block];  long end;  final int[] EndOfFileMarker={37,37,69,79};  int valReached=3;  boolean EOFFound=false;  try {    end=eof;    final int bufSize=255;    while (true) {      final byte[] buffer=getBytes(end - bufSize,bufSize);      int offset=0;      for (int ii=bufSize - 1; ii > -1; ii--) {        if (!EOFFound) {          valReached=3;        }        if (buffer[ii] == EndOfFileMarker[valReached]) {          valReached--;          EOFFound=true;        } else {          EOFFound=false;        }        offset--;        if (valReached < 0) {          ii=-1;        }      }      if (valReached < 0) {        end-=offset;        break;      } else {        end-=bufSize;      }      if (end < 0) {        end=eof;        break;      }    }    int count=(int)(end - block);    if (count < 0) {      count=0;      final int size=(int)eof;      lastBytes=new byte[size];      i=size + 3;    }    lastBytes=getBytes(count,lastBytes.length);  } catch (  final Exception e) {    LogWriter.writeLog("Exception " + e + " reading last 1024 bytes");    throw new PdfException(e + " reading last 1024 bytes");  }  final int fileSize=lastBytes.length;  if (i > fileSize) {    i=fileSize - 5;  }  while (i > -1) {    if (((lastBytes[i] == 116 && lastBytes[i + 1] == 120) || (lastBytes[i] == 114 && lastBytes[i + 1] == 116)) && (lastBytes[i + 2] == 114) && (lastBytes[i + 3] == 101)&& (lastBytes[i + 4] == 102)) {      break;    }    i--;  }  if (i == -1) {    try {      closeFile();    } catch (    final IOException e1) {      LogWriter.writeLog("Exception " + e1 + " closing file");    }    throw new PdfException("No Startxref found in last 1024 bytes ");  }  i+=5;  while (i < 1024 && (lastBytes[i] == 10 || lastBytes[i] == 32 || lastBytes[i] == 13)) {    i++;  }  while ((i < 1024) && (lastBytes[i] != 10) && (lastBytes[i] != 32)&& (lastBytes[i] != 13)) {    startRef.append((char)lastBytes[i]);    i++;  }  if (startRef.length() > 0) {    pointer=Integer.parseInt(startRef.toString());  }  if (pointer == -1) {    LogWriter.writeLog("No Startref found in last 1024 bytes ");    try {      closeFile();    } catch (    final IOException e1) {      LogWriter.writeLog("Exception " + e1 + " closing file");    }    throw new PdfException("No Startref found in last 1024 bytes ");  }  return pointer;}  }
class C{  public String toString(){  return detail.toString();}  }
class C{  public Optional<Location> geocode(@NonNull String cityName){  log.debug("Entered Google API");  GeoApiContext context=new GeoApiContext().setApiKey(getApiKey());  GeocodingResult[] results=null;  try {    results=GeocodingApi.geocode(context,cityName).await();  } catch (  Exception e) {    log.error("Got exception from GeocodingApi: " + e);    e.printStackTrace();    return Optional.empty();  }  Location l=new Location("Google Geocoding API");  l.setLatitude(results[0].geometry.location.lat);  l.setLongitude(results[0].geometry.location.lng);  log.debug(String.format("Google API returned %s.",l));  return Optional.of(l);}  }
class C{  public AboutFrame(){  initComponents();  textArea.setText(Copyright.text());  textArea.setCaretPosition(0);}  }
class C{  public static boolean compareLoosely(String a,String b){  int ia, ib;  int matched;  int numNonDialableCharsInA=0;  int numNonDialableCharsInB=0;  if (a == null || b == null)   return a == b;  if (a.length() == 0 || b.length() == 0) {    return false;  }  ia=indexOfLastNetworkChar(a);  ib=indexOfLastNetworkChar(b);  matched=0;  while (ia >= 0 && ib >= 0) {    char ca, cb;    boolean skipCmp=false;    ca=a.charAt(ia);    if (!isDialable(ca)) {      ia--;      skipCmp=true;      numNonDialableCharsInA++;    }    cb=b.charAt(ib);    if (!isDialable(cb)) {      ib--;      skipCmp=true;      numNonDialableCharsInB++;    }    if (!skipCmp) {      if (cb != ca && ca != WILD && cb != WILD) {        break;      }      ia--;      ib--;      matched++;    }  }  if (matched < MIN_MATCH) {    int effectiveALen=a.length() - numNonDialableCharsInA;    int effectiveBLen=b.length() - numNonDialableCharsInB;    if (effectiveALen == effectiveBLen && effectiveALen == matched) {      return true;    }    return false;  }  if (matched >= MIN_MATCH && (ia < 0 || ib < 0)) {    return true;  }  if (matchIntlPrefix(a,ia + 1) && matchIntlPrefix(b,ib + 1)) {    return true;  }  if (matchTrunkPrefix(a,ia + 1) && matchIntlPrefixAndCC(b,ib + 1)) {    return true;  }  if (matchTrunkPrefix(b,ib + 1) && matchIntlPrefixAndCC(a,ia + 1)) {    return true;  }  return false;}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  public String addPreRestoreFromFullcopySteps(Workflow workflow,String waitFor,URI storageSystemURI,List<URI> fullCopies,String taskId){  if (fullCopies != null && !fullCopies.isEmpty()) {    List<Volume> sourceVolumes=checkIfDistributedVplexOrVmaxFullCopies(fullCopies);    if (!sourceVolumes.isEmpty()) {      Map<String,RecreateReplicationSetRequestParams> rsetParams=new HashMap<String,RecreateReplicationSetRequestParams>();      List<URI> volumeURIs=new ArrayList<URI>();      URI rpSystemId=sourceVolumes.get(0).getProtectionController();      ProtectionSystem rpSystem=_dbClient.queryObject(ProtectionSystem.class,rpSystemId);      for (      Volume vol : sourceVolumes) {        RecreateReplicationSetRequestParams rsetParam=getReplicationSettings(rpSystem,vol.getId());        rsetParams.put(RPHelper.getRPWWn(vol.getId(),_dbClient),rsetParam);        volumeURIs.add(vol.getId());      }      List<String> locks=new ArrayList<String>();      String lockName=ControllerLockingUtil.getConsistencyGroupStorageKey(_dbClient,sourceVolumes.get(0).getConsistencyGroup(),rpSystem.getId());      if (null != lockName) {        locks.add(lockName);        acquireWorkflowLockOrThrow(workflow,locks);      }      String stepId=workflow.createStepId();      Workflow.Method deleteRsetExecuteMethod=new Workflow.Method(METHOD_DELETE_RSET_STEP,rpSystem.getId(),volumeURIs);      Workflow.Method recreateRSetExecuteMethod=new Workflow.Method(METHOD_RECREATE_RSET_STEP,rpSystem.getId(),volumeURIs,rsetParams);      waitFor=workflow.createStep(STEP_PRE_VOLUME_RESTORE,"Pre volume restore from full copy, delete replication set step for RP",waitFor,rpSystem.getId(),rpSystem.getSystemType(),this.getClass(),deleteRsetExecuteMethod,recreateRSetExecuteMethod,stepId);      _log.info("Created workflow step to delete replication set for volumes");    }  }  return waitFor;}  }
class C{  public LinearEquations(Matrix a,Vector y) throws IllegalDimension {  this(a.components,y.components);}  }
class C{  public static byte[] clipImage(byte[] imageData,int width,int height) throws IOException {  Image image=new ImageIcon(imageData).getImage();  BufferedImage bufferedImage=new BufferedImage(image.getWidth(null),image.getHeight(null),BufferedImage.TYPE_INT_RGB);  Graphics graphics=bufferedImage.getGraphics();  graphics.drawImage(image,0,0,null);  int actualWidth=image.getWidth(null);  int actualHeight=image.getHeight(null);  width=(actualWidth < width) ? actualWidth : width;  height=(actualHeight < height) ? actualHeight : height;  int x=(actualWidth - width) / 2;  int y=(actualHeight - height) / 2;  bufferedImage=bufferedImage.getSubimage(x,y,width,height);  Iterator iter=ImageIO.getImageWritersByFormatName("JPG");  if (iter.hasNext()) {    ImageWriter writer=(ImageWriter)iter.next();    ImageWriteParam iwp=writer.getDefaultWriteParam();    iwp.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);    iwp.setCompressionQuality(0.75f);    ByteArrayOutputStream bos=new ByteArrayOutputStream();    MemoryCacheImageOutputStream mos=new MemoryCacheImageOutputStream(bos);    writer.setOutput(mos);    IIOImage iIOimage=new IIOImage(bufferedImage,null,null);    writer.write(null,iIOimage,iwp);    return bos.toByteArray();  }  return null;}  }
class C{  private void insertPiIfNodes(IR ir){  Enumeration<Instruction> e=ir.forwardInstrEnumerator();  while (e.hasMoreElements()) {    Instruction instr=e.nextElement();    if (IfCmp.conforms(instr) || InlineGuard.conforms(instr)) {      BasicBlock thisbb=instr.getBasicBlock();      if (thisbb.getNumberOfNormalOut() != 2) {        continue;      }      Enumeration<BasicBlock> outBB=thisbb.getNormalOut();      BasicBlock out1=outBB.nextElement();      BasicBlock new1=IRTools.makeBlockOnEdge(thisbb,out1,ir);      BasicBlock out2=outBB.nextElement();      BasicBlock new2=IRTools.makeBlockOnEdge(thisbb,out2,ir);      if (InlineGuard.conforms(instr))       continue;      RegisterOperand ifGuard=IfCmp.getGuardResult(instr);      if (VM.VerifyAssertions) {        VM._assert(ifGuard != null);      }      Operand a=IfCmp.getVal1(instr);      Operand b=IfCmp.getVal2(instr);      BasicBlock takenBlock=IfCmp.getTarget(instr).target.getBasicBlock();      boolean new1IsTaken=false;      if (takenBlock == new1) {        new1IsTaken=true;      }      if (a.isRegister() && !a.asRegister().getRegister().isPhysical() && (a.asRegister().getRegister().isInteger() || a.asRegister().getRegister().isAddress())) {        Instruction s=GuardedUnary.create(PI,(RegisterOperand)a.copy(),a.copy(),null);        RegisterOperand sGuard=(RegisterOperand)ifGuard.copy();        if (new1IsTaken) {          sGuard.setTaken();        } else {          sGuard.setNotTaken();        }        GuardedUnary.setGuard(s,sGuard);        new1.prependInstruction(s);        s=s.copyWithoutLinks();        sGuard=(RegisterOperand)ifGuard.copy();        if (new1IsTaken) {          sGuard.setNotTaken();        } else {          sGuard.setTaken();        }        GuardedUnary.setGuard(s,sGuard);        new2.prependInstruction(s);      }      if (b.isRegister() && !b.asRegister().getRegister().isPhysical() && (b.asRegister().getRegister().isInteger() || b.asRegister().getRegister().isAddress())) {        Instruction s=GuardedUnary.create(PI,(RegisterOperand)b.copy(),b.copy(),null);        RegisterOperand sGuard=(RegisterOperand)ifGuard.copy();        if (new1IsTaken) {          sGuard.setTaken();        } else {          sGuard.setNotTaken();        }        GuardedUnary.setGuard(s,sGuard);        new1.prependInstruction(s);        s=s.copyWithoutLinks();        sGuard=(RegisterOperand)ifGuard.copy();        if (new1IsTaken) {          sGuard.setNotTaken();        } else {          sGuard.setTaken();        }        GuardedUnary.setGuard(s,sGuard);        new2.prependInstruction(s);      }    }  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:46.151 -0500",hash_original_method="69FA3518C12F8613622C8FCCAB6F2AF7",hash_generated_method="402483C5CBEEB73E864556E7BE42590F") void handleAuthRequest(LoadListener loader){  if (loader.isSynchronous()) {    waitForRequestToComplete();synchronized (mLoaderQueue) {      mLoaderQueue.addFirst(loader);    }    processNextLoader();    waitForRequestToComplete();synchronized (mLoaderQueue) {      assert (mLoaderQueue.peek() == loader);      mLoaderQueue.poll();    }    loader.handleAuthResponse(mUsername,mPassword);    return;  }  boolean processNext=false;synchronized (mLoaderQueue) {    mLoaderQueue.offer(loader);    processNext=(mLoaderQueue.size() == 1);  }  if (processNext) {    processNextLoader();  }}  }
class C{  public static String[] splitArguments(String input){  char[] arr=input.toCharArray();  boolean quote=false;  List<String> args=new ArrayList<>();  StringBuilder arg=new StringBuilder();  for (int t=0; t < arr.length; t++) {    if (!quote) {      if (arr[t] == ' ') {        args.add(arg.toString());        arg=new StringBuilder();      } else       if (arr[t] == '\"' && arg.length() == 0) {        quote=true;      } else {        arg.append(arr[t]);      }    } else {      if (arr[t] == '\"' && (t == 0 || arr[t - 1] != '\\')) {        quote=false;        args.add(arg.toString());        arg=new StringBuilder();      } else       if (arr[t] != '\\' || t == arr.length - 1 || arr[t + 1] == '\"') {        arg.append(arr[t]);      }    }  }  if (arg.length() > 0)   args.add(arg.toString());  Iterator<String> it=args.iterator();  while (it.hasNext()) {    if (it.next().isEmpty())     it.remove();  }  return args.toArray(new String[args.size()]);}  }
class C{  public void updateButtonActionPerformed(){  if (!checkConsistency()) {    return;  }  setNodeParameters();  changedNode=true;  editMode=false;  curNode=null;  addButton.setVisible(true);  editButton.setVisible(true);  deleteButton.setVisible(true);  doneButton.setVisible(true);  updateButton.setVisible(false);  cancelButton.setVisible(false);  statusText2.setText(stdStatus2);  statusText3.setText(stdStatus3);  statusText1.setText(Bundle.getMessage("FeedBackUpdate") + " " + readNodeAddress());  errorInStatus1=true;}  }
class C{  private void configureKnownHosts(Connection c) throws IOException {  File knownHostFile=new File(knownHostPath);  if (knownHostFile.exists()) {    database.addHostkeys(knownHostFile);  }  final List<String> algorithms=myHost.getHostKeyAlgorithms();  c.setServerHostKeyAlgorithms(ArrayUtilRt.toStringArray(algorithms));}  }
class C{  public JnaDatabaseConnection(FbClientLibrary clientLibrary,IConnectionProperties connectionProperties) throws SQLException {  this(clientLibrary,connectionProperties,EncodingFactory.getPlatformDefault());}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:43.707 -0500",hash_original_method="BC145A1DE2472995676ED9A315FB0956",hash_generated_method="171409CD29A7B7D5AD18DD4C394534AC") private static boolean equalsHandlesNulls(Object a,Object b){  return (a == null) ? (b == null) : a.equals(b);}  }
class C{  public double assortativity(Graph graph){  double product=0;  double sum=0;  double squareSum=0;  for (  Edge e : graph.getEdges()) {    Vertex v_i=e.getVertices().getFirst();    Vertex v_j=e.getVertices().getSecond();    int k_i=v_i.getEdges().size();    int k_j=v_j.getEdges().size();    sum+=0.5 * (k_i + k_j);    squareSum+=0.5 * (Math.pow(k_i,2) + Math.pow(k_j,2));    product+=k_i * k_j;  }  double norm=1 / (double)graph.getEdges().size();  return ((norm * product) - Math.pow(norm * sum,2)) / ((norm * squareSum) - Math.pow(norm * sum,2));}  }
class C{  public CompilerOptions(){  this(null);}  }
class C{  public boolean canInsertItem(@Nonnull IInventory inv,@Nullable ItemStack stack,int slot){  final ItemStack expected=inv.getStackInSlot(slot);  if (expected != null) {    if (!checkSlot(inv,stack,slot))     return false;    if (expected.stackSize >= inv.getInventoryStackLimit())     return false;    final int estSize=expected.stackSize + stack.stackSize;    return estSize <= inv.getInventoryStackLimit();  }  return true;}  }
class C{  public void testStructure() throws Exception {  IgfsEntryInfo rootInfo=IgfsUtils.createDirectory(ROOT_ID);  assertEmpty(mgr.directoryListing(ROOT_ID));  assertEquals(rootInfo,mgr.info(ROOT_ID));  assertEquals(F.asMap(ROOT_ID,rootInfo),mgr.infos(Arrays.asList(ROOT_ID)));  IgfsEntryInfo a=mkdirsAndGetInfo("/a");  IgfsEntryInfo b=mkdirsAndGetInfo("/a/b");  IgfsEntryInfo k=mkdirsAndGetInfo("/a/b/k");  IgfsEntryInfo z=mkdirsAndGetInfo("/a/k");  IgfsEntryInfo f1=createFileAndGetInfo("/f1");  IgfsEntryInfo f2=createFileAndGetInfo("/a/f2");  IgfsEntryInfo f3=createFileAndGetInfo("/a/b/f3");  assertEquals(F.asMap("a",new IgfsListingEntry(a),"f1",new IgfsListingEntry(f1)),mgr.directoryListing(ROOT_ID));  assertEquals(F.asMap("b",new IgfsListingEntry(b),"f2",new IgfsListingEntry(f2),"k",new IgfsListingEntry(z)),mgr.directoryListing(a.id()));  assertEquals(F.asMap("f3",new IgfsListingEntry(f3),"k",new IgfsListingEntry(k)),mgr.directoryListing(b.id()));  for (  IgfsEntryInfo info : Arrays.asList(f1,f2,f3))   assertEmpty(mgr.directoryListing(info.id()));  for (  IgfsEntryInfo info : Arrays.asList(rootInfo,a,b,f1,f2,f3)) {    assertEquals(info,mgr.info(info.id()));    assertEquals(F.asMap(info.id(),info),mgr.infos(Arrays.asList(info.id())));  }  assertEquals(ROOT_ID,mgr.fileId(IgfsPath.ROOT));  assertEquals(a.id(),mgr.fileId(new IgfsPath("/a")));  assertEquals(b.id(),mgr.fileId(new IgfsPath("/a/b")));  assertEquals(f1.id(),mgr.fileId(new IgfsPath("/f1")));  assertEquals(f2.id(),mgr.fileId(new IgfsPath("/a/f2")));  assertEquals(f3.id(),mgr.fileId(new IgfsPath("/a/b/f3")));  assertNull(mgr.fileId(new IgfsPath("/f4")));  assertNull(mgr.fileId(new IgfsPath("/a/f5")));  assertNull(mgr.fileId(new IgfsPath("/a/b/f6")));  assertEquals(a.id(),mgr.fileId(ROOT_ID,"a"));  assertEquals(b.id(),mgr.fileId(a.id(),"b"));  assertEquals(f1.id(),mgr.fileId(ROOT_ID,"f1"));  assertEquals(f2.id(),mgr.fileId(a.id(),"f2"));  assertEquals(f3.id(),mgr.fileId(b.id(),"f3"));  assertNull(mgr.fileId(ROOT_ID,"f4"));  assertNull(mgr.fileId(a.id(),"f5"));  assertNull(mgr.fileId(b.id(),"f6"));  assertEquals(Arrays.asList(ROOT_ID),mgr.fileIds(IgfsPath.ROOT));  assertEquals(Arrays.asList(ROOT_ID,a.id()),mgr.fileIds(new IgfsPath("/a")));  assertEquals(Arrays.asList(ROOT_ID,a.id(),b.id()),mgr.fileIds(new IgfsPath("/a/b")));  assertEquals(Arrays.asList(ROOT_ID,f1.id()),mgr.fileIds(new IgfsPath("/f1")));  assertEquals(Arrays.asList(ROOT_ID,a.id(),f2.id()),mgr.fileIds(new IgfsPath("/a/f2")));  assertEquals(Arrays.asList(ROOT_ID,a.id(),b.id(),f3.id()),mgr.fileIds(new IgfsPath("/a/b/f3")));  assertEquals(Arrays.asList(ROOT_ID,null),mgr.fileIds(new IgfsPath("/f4")));  assertEquals(Arrays.asList(ROOT_ID,a.id(),null),mgr.fileIds(new IgfsPath("/a/f5")));  assertEquals(Arrays.asList(ROOT_ID,a.id(),b.id(),null),mgr.fileIds(new IgfsPath("/a/b/f6")));  assertEquals(Arrays.asList(ROOT_ID,null,null,null,null),mgr.fileIds(new IgfsPath("/f7/a/b/f6")));  expectsRenameFail("/b8","/b2");  expectsRenameFail("/a","/b/b8");  expectsRenameFail("/a/f2","/a/b/f3");  expectsRenameFail("/a/k","/a/b/");  mgr.delete(a.id(),"k",z.id());  mgr.delete(b.id(),"k",k.id());  System.out.println("/: " + mgr.directoryListing(ROOT_ID));  System.out.println("a: " + mgr.directoryListing(a.id()));  System.out.println("b: " + mgr.directoryListing(b.id()));  System.out.println("f3: " + mgr.directoryListing(f3.id()));  mgr.move(path("/a"),path("/a2"));  mgr.move(path("/a2/b"),path("/a2/b2"));  assertNotNull(mgr.info(b.id()));  mgr.move(path("/a2/b2/f3"),path("/a2/b2/f3-2"));  assertNotNull(mgr.info(b.id()));  mgr.move(path("/a2/b2/f3-2"),path("/a2/b2/f3"));  mgr.move(path("/a2/b2"),path("/a2/b"));  mgr.move(path("/a2"),path("/a"));  mgr.softDelete(path("/a/b/f3"),false,null);  assertEquals(F.asMap("a",new IgfsListingEntry(a),"f1",new IgfsListingEntry(f1)),mgr.directoryListing(ROOT_ID));  assertEquals(F.asMap("b",new IgfsListingEntry(b),"f2",new IgfsListingEntry(f2)),mgr.directoryListing(a.id()));  assertEmpty(mgr.directoryListing(b.id()));  mgr.softDelete(path("/a/b"),false,null);  assertEquals(F.asMap("a",new IgfsListingEntry(a),"f1",new IgfsListingEntry(f1)),mgr.directoryListing(ROOT_ID));  assertEquals(F.asMap("f2",new IgfsListingEntry(f2)),mgr.directoryListing(a.id()));  assertEmpty(mgr.directoryListing(b.id()));  mgr.softDelete(path("/a/f2"),false,null);  assertEquals(F.asMap("a",new IgfsListingEntry(a),"f1",new IgfsListingEntry(f1)),mgr.directoryListing(ROOT_ID));  assertEmpty(mgr.directoryListing(a.id()));  assertEmpty(mgr.directoryListing(b.id()));  mgr.softDelete(path("/f1"),false,null);  assertEquals(F.asMap("a",new IgfsListingEntry(a)),mgr.directoryListing(ROOT_ID));  assertEmpty(mgr.directoryListing(a.id()));  assertEmpty(mgr.directoryListing(b.id()));  mgr.softDelete(path("/a"),false,null);  assertEmpty(mgr.directoryListing(ROOT_ID));  assertEmpty(mgr.directoryListing(a.id()));  assertEmpty(mgr.directoryListing(b.id()));}  }
class C{  public boolean isWebCanUpdate(){  Object oo=get_Value(COLUMNNAME_IsWebCanUpdate);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void testGetColumnTypeName(){  try {    assertTrue("smallint".equalsIgnoreCase(rsmd.getColumnTypeName(1)));    assertTrue("varchar".equalsIgnoreCase(rsmd.getColumnTypeName(2)));    assertTrue("varchar".equalsIgnoreCase(rsmd.getColumnTypeName(3)));  } catch (  SQLException e) {    fail("SQLException is thrown: " + e.getMessage());  }  try {    rsmd.getColumnTypeName(0);    fail("SQLException is not thrown");  } catch (  SQLException e) {  }  try {    rsmd.getColumnTypeName(5);    fail("SQLException is not thrown");  } catch (  SQLException e) {  }}  }
class C{  private void expectedByte(int position,int count) throws UTFDataFormatException {  throw new UTFDataFormatException(Localizer.getMessage("jsp.error.xml.expectedByte",Integer.toString(position),Integer.toString(count)));}  }
class C{  public String randomAlphaMixedSpecial(int length){  return randomString(alphaMixedSpecial(),length);}  }
class C{  private Evaluator evaluatorFactory(Backend evaluator) throws HaskellException {switch (evaluator) {case GHCi:    return new GhciEvaluator();case Clash:  return new ClashEvaluator();default :return new GhciEvaluator();}}  }
class C{  private IV resolveToIvOrError(IValueExpression expression,String nameOfExpression){  Object resolved=expression.get(binding);  if (resolved == null) {    return null;  }  try {    return (IV)resolved;  } catch (  ClassCastException e) {    throw new RuntimeException(String.format(Locale.ROOT,"Expected %s (%s) to be bound to an IV but it wasn't.",nameOfExpression,expression));  }}  }
class C{  protected final void copyNS(final int nodeID,SerializationHandler handler,boolean inScope) throws SAXException {  if (m_namespaceDeclSetElements != null && m_namespaceDeclSetElements.size() == 1 && m_namespaceDeclSets != null && ((SuballocatedIntVector)m_namespaceDeclSets.elementAt(0)).size() == 1)   return;  SuballocatedIntVector nsContext=null;  int nextNSNode;  if (inScope) {    nsContext=findNamespaceContext(nodeID);    if (nsContext == null || nsContext.size() < 1)     return; else     nextNSNode=makeNodeIdentity(nsContext.elementAt(0));  } else   nextNSNode=getNextNamespaceNode2(nodeID);  int nsIndex=1;  while (nextNSNode != DTM.NULL) {    int eType=_exptype2(nextNSNode);    String nodeName=m_extendedTypes[eType].getLocalName();    int dataIndex=m_dataOrQName.elementAt(nextNSNode);    if (dataIndex < 0) {      dataIndex=-dataIndex;      dataIndex=m_data.elementAt(dataIndex + 1);    }    String nodeValue=(String)m_values.elementAt(dataIndex);    handler.namespaceAfterStartElement(nodeName,nodeValue);    if (inScope) {      if (nsIndex < nsContext.size()) {        nextNSNode=makeNodeIdentity(nsContext.elementAt(nsIndex));        nsIndex++;      } else       return;    } else     nextNSNode=getNextNamespaceNode2(nextNSNode);  }}  }
class C{  final boolean transferForSignal(Node node){  if (!compareAndSetWaitStatus(node,Node.CONDITION,0))   return false;  Node p=enq(node);  int ws=p.waitStatus;  if (ws > 0 || !compareAndSetWaitStatus(p,ws,Node.SIGNAL))   LockSupport.unpark(node.thread);  return true;}  }
class C{  public long roundTripTime() throws InterruptedException {  latch.await();  return received - sent;}  }
class C{  protected boolean readPollTimeout(){  try {    pollTimeoutTime=Integer.parseInt(pollTimeoutField.getText());  } catch (  Exception e) {    statusText1.setText(rb.getString("Error7"));    statusText1.setVisible(true);    pollTimeoutTime=0;    errorInStatus1=true;    resetNotes2();    return (false);  }  if (pollTimeoutTime <= 0) {    statusText1.setText(rb.getString("Error8"));    statusText1.setVisible(true);    pollTimeoutTime=0;    errorInStatus1=true;    resetNotes2();    return (false);  }  if (pollTimeoutTime > 10000) {    statusText1.setText(rb.getString("Error9"));    statusText1.setVisible(true);    pollTimeoutTime=0;    errorInStatus1=true;    resetNotes2();    return (false);  }  return true;}  }
class C{  public Domain findDomainByName(AppContext ctx,ProjectPK projectPk,String name) throws ScopeException {  ProjectDynamicContent content=getProjectContent(ctx,projectPk,true);  return content.findDomainByName(name);}  }
class C{  public SpanNotQuery(SpanQuery include,SpanQuery exclude,int dist){  this(include,exclude,dist,dist);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public DrawerBuilder withRootView(@NonNull ViewGroup rootView){  this.mRootView=rootView;  withTranslucentStatusBar(false);  return this;}  }
class C{  public static final ReadOnlyColorRGBA stringToColorRGBA(String str,ReadOnlyColorRGBA defaultColor){  if ((str == null) || str.isEmpty()) {    if (defaultColor == null) {      throw new NullPointerException();    }    return (defaultColor);  }  try {    float[] col=stringToFloatArray(str);    if (col.length < 3) {      return (defaultColor);    }    if (col.length == 3) {      return (new ColorRGBA(col[0],col[1],col[2],1));    } else {      return (new ColorRGBA(col[0],col[1],col[2],col[3]));    }  } catch (  Exception e) {    if (defaultColor == null) {      throw new IllegalArgumentException(e);    }    return (defaultColor);  }}  }
class C{  private void validateAttributes(Schema schema,Attributes attributes) throws SAXException {  Validator validator=createValidator(schema);  ContentHandler ch=validator.getContentHandler();  initHandler(ch);  ch.startElement(OWNER_NAME.getNamespaceUri(),OWNER_NAME.getLocalName(),OWNER_NAME.getLocalName(),attributes);  ch.endElement(OWNER_NAME.getNamespaceUri(),OWNER_NAME.getLocalName(),OWNER_NAME.getLocalName());  cleanupHandler(ch);  releaseValidator(schema,validator);}  }
class C{  public Name addAll(Name suffix) throws InvalidNameException {  return addAll(size(),suffix);}  }
class C{  protected Model typeModelToDocumentModel(String indexName,Model typeModel){  return Model.builder().id(getDocumentModelId(indexName,typeModel.getName())).properties(asList(Property.builder().name("_index").description("Index which this document is in").required(true).model(Primitive.STRING).build(),Property.builder().name("_type").description("Type of this document").required(true).model(Primitive.STRING).build(),Property.builder().name("_id").description("Unique identifier of this document within its index and type").required(true).model(Primitive.STRING).build(),Property.builder().name("_version").description("Version of the document").required(true).model(Primitive.LONG).build(),Property.builder().name("_found").description("Returns whether the document was found or not").required(true).model(Primitive.BOOLEAN).build(),Property.builder().name("_source").required(false).description("Contains the actual document when found").model(typeModel).build())).build();}  }
class C{  private void processDefiniteCandidateElement(PivotFacet pf,PivotFacetValue value){  for (int shard=pf.knownShards.nextSetBit(0); 0 <= shard; shard=pf.knownShards.nextSetBit(shard + 1)) {    if (!value.shardHasContributed(shard)) {      if (FacetParams.FACET_SORT_INDEX.equals(facetFieldSort) || numberOfValuesContributedByShardWasLimitedByFacetFieldLimit(shard)) {        pf.addRefinement(shard,value);      }    }  }}  }
class C{  public void testSetScaleRoundUp(){  String a="1231212478987482988429808779810457634781384756794987";  String b="123121247898748298842980877981045763478139";  int aScale=28;  int newScale=18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.setScale(newScale,BigDecimal.ROUND_UP);  assertTrue("incorrect scale",bNumber.scale() == newScale);  assertTrue("incorrect value",bNumber.unscaledValue().toString().equals(b));}  }
class C{  public LocalProcessController(final File directory,final String pidFilename) throws IOException {  this(readPid(directory,pidFilename));}  }
class C{  private static boolean extendsDiscoverableInjectionProvider(Class<?> clazz){  return DiscoverableInjectionProvider.class.isAssignableFrom(clazz);}  }
class C{  private static void xstaticSetRandomGenerator(RandomEngine randomGenerator){synchronized (shared) {    shared.setRandomGenerator(randomGenerator);  }}  }
class C{  private void updateStatus(){  String statusText;  if (!game.isTerminal(currState)) {    String toMove=(String)game.getPlayer(currState);    statusText="Next move: " + toMove;    statusBar.setForeground(toMove.equals("red") ? Color.RED : Color.YELLOW);  } else {    String winner=null;    for (int i=0; i < 2; i++)     if (game.getUtility(currState,game.getPlayers()[i]) == 1)     winner=game.getPlayers()[i];    if (winner != null)     statusText="Color " + winner + " has won. Congratulations!"; else     statusText="No winner :-(";    statusBar.setForeground(Color.WHITE);  }  if (searchMetrics != null)   statusText+="    " + searchMetrics;  statusBar.setText(statusText);}  }
class C{  public ReflectiveConfigGroup(final String name){  this(name,false);}  }
class C{  public WindowEvent(Window source,int id){  this(source,id,null,0,0);}  }
class C{  @Override public RegularDegreeEdgeRandomIterator resetForNode(int node,int numSamplesToGet,Random randomGen){  super.resetForNode(node);  this.numSamples=numSamplesToGet;  this.random=randomGen;  return this;}  }
class C{  public Zone(Geometry geometry){  this.geometry=geometry;  this.preGeometry=PreparedGeometryFactory.prepare(geometry);}  }
class C{  @SuppressWarnings("unchecked") protected Object convertToDate(Class type,Object value,String pattern){  DateFormat df=new SimpleDateFormat(pattern);  if (value instanceof String) {    try {      if (StringUtils.isEmpty(value.toString())) {        return null;      }      Date date=df.parse((String)value);      if (type.equals(Timestamp.class)) {        return new Timestamp(date.getTime());      }      return date;    } catch (    Exception pe) {      throw new ConversionException("Error converting String to Date");    }  }  throw new ConversionException("Could not convert " + value.getClass().getName() + " to "+ type.getName());}  }
class C{  protected void updateGOE(){  String type;  type=m_ComboBoxExperiment.getSelectedItem().toString();switch (type) {case TYPE_CROSSVALIDATION:case TYPE_SUPPLIEDTESTSET:case TYPE_TRAINTESTSPLIT:    if (m_GenericObjectEditor.getClassType() == IncrementalMultiLabelClassifier.class) {      m_LastIncrementalClassifier=(IncrementalMultiLabelClassifier)m_GenericObjectEditor.getValue();      m_GenericObjectEditor=new GenericObjectEditor(true);      m_GenericObjectEditor.setClassType(MultiLabelClassifier.class);      m_GenericObjectEditor.setValue(m_LastNonIncrementalClassifier);    }  break;case TYPE_BINCREMENTAL:case TYPE_PREQUENTIAL:if (m_GenericObjectEditor.getClassType() != IncrementalMultiLabelClassifier.class) {  m_LastNonIncrementalClassifier=(MultiLabelClassifier)m_GenericObjectEditor.getValue();  m_GenericObjectEditor=new GenericObjectEditor(true);  m_GenericObjectEditor.setClassType(IncrementalMultiLabelClassifier.class);  m_GenericObjectEditor.setValue(m_LastIncrementalClassifier);}break;default :throw new IllegalStateException("Unhandled evaluation type: " + type);}m_PanelGOE.removeAll();m_PanelGOE.add(m_GenericObjectEditor.getCustomPanel(),BorderLayout.CENTER);invalidate();revalidate();repaint();}  }
class C{  public void testSpecialCase1(){  byte aBytes[]={-1,-1,-1,-1};  byte bBytes[]={5,-4,-3,-2};  int aSign=-1;  int bSign=-1;  byte rBytes[]={-1,0,0,0,0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public RefactoringStatus validateDestination(IContainer destination){  Assert.isNotNull(destination,"container is null");  if (destination instanceof IWorkspaceRoot)   return RefactoringStatus.createFatalErrorStatus(RefactoringCoreMessages.MoveResourceProcessor_error_invalid_destination);  if (!destination.exists()) {    return RefactoringStatus.createFatalErrorStatus(RefactoringCoreMessages.MoveResourceProcessor_error_destination_not_exists);  }  IPath destinationPath=destination.getFullPath();  for (int i=0; i < fResourcesToMove.length; i++) {    IPath path=fResourcesToMove[i].getFullPath();    if (path.isPrefixOf(destinationPath) || path.equals(destinationPath)) {      return RefactoringStatus.createFatalErrorStatus(Messages.format(RefactoringCoreMessages.MoveResourceProcessor_destination_inside_moved,BasicElementLabels.getPathLabel(path,false)));    }    if (path.removeLastSegments(1).equals(destinationPath)) {      return RefactoringStatus.createFatalErrorStatus(Messages.format(RefactoringCoreMessages.MoveResourceProcessor_destination_same_as_moved,BasicElementLabels.getPathLabel(path,false)));    }  }  return new RefactoringStatus();}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("AcsAccessTokenDept[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_genPerms = ").append(m_genPerms);  buffer.append("]");  return buffer.toString();}  }
class C{  public HttpURL(final String original,final String charset) throws URIException {  protocolCharset=charset;  parseUriReference(original,false);  checkValid();}  }
class C{  @NoInline private Address allocSlowHot(int bytes,int align,int offset){  if (acquireRecyclableLines(bytes,align,offset))   return alloc(bytes,align,offset); else   return allocSlowInline(bytes,align,offset);}  }
class C{  protected static Cylinder computeVerticalBoundsFromSectorVertices(Globe globe,Sector sector,double minHeight,double maxHeight){  if (sector == null) {    String msg=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  LatLon centroid=sector.getCentroid();  Vec4 topCenterPoint=globe.computePointFromPosition(centroid.getLatitude(),centroid.getLongitude(),maxHeight);  Vec4 axis=globe.computeSurfaceNormalAtPoint(topCenterPoint);  Vec4 southwest=globe.computePointFromPosition(sector.getMinLatitude(),sector.getMinLongitude(),minHeight);  Vec4 southeast=globe.computePointFromPosition(sector.getMinLatitude(),sector.getMaxLongitude(),minHeight);  Vec4 northeast=globe.computePointFromPosition(sector.getMaxLatitude(),sector.getMaxLongitude(),minHeight);  Vec4 northwest=globe.computePointFromPosition(sector.getMaxLatitude(),sector.getMinLongitude(),minHeight);  double minProj=southwest.subtract3(topCenterPoint).dot3(axis);  minProj=Math.min(minProj,southeast.subtract3(topCenterPoint).dot3(axis));  minProj=Math.min(minProj,northeast.subtract3(topCenterPoint).dot3(axis));  minProj=Math.min(minProj,northwest.subtract3(topCenterPoint).dot3(axis));  Vec4 bottomCenterPoint=axis.multiply3(minProj).add3(topCenterPoint);  double radius=topCenterPoint.distanceTo3(southwest);  radius=Math.max(radius,topCenterPoint.distanceTo3(southeast));  radius=Math.max(radius,topCenterPoint.distanceTo3(northeast));  radius=Math.max(radius,topCenterPoint.distanceTo3(northwest));  if (radius == 0)   radius=1;  if (bottomCenterPoint.equals(topCenterPoint))   topCenterPoint=bottomCenterPoint.add3(new Vec4(1,0,0));  return new Cylinder(bottomCenterPoint,topCenterPoint,radius);}  }
class C{  public String nextTo(String delimiters) throws JSONException {  char c;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=this.next();    if (delimiters.indexOf(c) >= 0 || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  private static void parseCoreEntries(ProfilerSection section){  section.start("Parse");  for (  String clazz : coreClasses) {    try {      log.debug("Parsing Core Entry: " + clazz);      Class c=Class.forName(clazz);      Object object=c.newInstance();      coreObjects.add(object);      c.getDeclaredMethod("preinit").invoke(object);    } catch (    Throwable e) {      log.debug("Could not parse core entry: " + clazz);      log.debugException(e);    }  }  section.stop("Parse");}  }
class C{  private static double chiCell(double freq,double expected,boolean yates){  if (Utils.smOrEq(expected,0)) {    return 0;  }  double diff=Math.abs(freq - expected);  if (yates) {    diff-=0.5;    if (diff < 0) {      diff=0;    }  }  return (diff * diff / expected);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:13.119 -0500",hash_original_method="04F6EA99CF8E9997D9FE1719C2DB77FD",hash_generated_method="04F6EA99CF8E9997D9FE1719C2DB77FD") void fastProcessQueuedSslErrors(){  while (processNextLoader())   ;}  }
class C{  public SepsetMap adjSearch(){  int n=0;  SepsetMap sepset=new SepsetMap();  while (adjStep(graph,ind,knowledge,sepset,n) && getDepth() > n) {    n++;  }  return sepset;}  }
class C{  private void keysInOrder(Node x,Queue<Key> queue){  if (x == null)   return;  keysInOrder(x.left,queue);  queue.enqueue(x.key);  keysInOrder(x.right,queue);}  }
class C{  public final CC gap(String... args){switch (args.length) {default :    throw new IllegalArgumentException("Illegal argument count: " + args.length);case 4:  gapBottom(args[3]);case 3:gapTop(args[2]);case 2:gapRight(args[1]);case 1:gapLeft(args[0]);}return this;}  }
class C{  public RetryException(Throwable cause){  super(cause);}  }
class C{  public static boolean isTotal(Automaton a){  return isTotal(a,Character.MIN_CODE_POINT,Character.MAX_CODE_POINT);}  }
class C{  public void testIndexAndSearchTasks() throws Exception {  String algLines[]={"ResetSystemErase","CreateIndex","{ AddDoc } : 1000","ForceMerge(1)","CloseIndex","OpenReader","{ CountingSearchTest } : 200","CloseReader","[ CountingSearchTest > : 70","[ CountingSearchTest > : 9"};  CountingSearchTestTask.numSearches=0;  Benchmark benchmark=execBenchmark(algLines);  assertEquals("TestSearchTask was supposed to be called!",279,CountingSearchTestTask.numSearches);  assertTrue("Index does not exist?...!",DirectoryReader.indexExists(benchmark.getRunData().getDirectory()));  IndexWriter iw=new IndexWriter(benchmark.getRunData().getDirectory(),new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));  iw.close();  IndexReader ir=DirectoryReader.open(benchmark.getRunData().getDirectory());  assertEquals("1000 docs were added to the index, this is what we expect to find!",1000,ir.numDocs());  ir.close();}  }
class C{  public final void apply(@NotNull WindowInfoImpl info){  if (Comparing.equal(myInfo,info) || myProject == null || myProject.isDisposed()) {    return;  }  myInfo=info;  final ToolWindowAnchor anchor=myInfo.getAnchor();  if (info.isSliding()) {    myDivider.invalidate();    if (ToolWindowAnchor.TOP == anchor) {      add(myDivider,BorderLayout.SOUTH);    } else     if (ToolWindowAnchor.LEFT == anchor) {      add(myDivider,BorderLayout.EAST);    } else     if (ToolWindowAnchor.BOTTOM == anchor) {      add(myDivider,BorderLayout.NORTH);    } else     if (ToolWindowAnchor.RIGHT == anchor) {      add(myDivider,BorderLayout.WEST);    }    myDivider.setPreferredSize(new Dimension(0,0));  } else {    remove(myDivider);  }  validate();  repaint();  if (myInfo.isFloating() && myInfo.isVisible()) {    final FloatingDecorator floatingDecorator=(FloatingDecorator)SwingUtilities.getAncestorOfClass(FloatingDecorator.class,this);    if (floatingDecorator != null) {      floatingDecorator.apply(myInfo);    }  }  myToolWindow.getContentUI().setType(myInfo.getContentUiType());  setBorder(new InnerPanelBorder(myToolWindow));}  }
class C{  public void dump(Printer pw,String prefix){  crashInfo.dump(pw,prefix);  pw.println(prefix + "policy: " + policy);  if (durationMillis != -1) {    pw.println(prefix + "durationMillis: " + durationMillis);  }  if (numInstances != -1) {    pw.println(prefix + "numInstances: " + numInstances);  }  if (violationNumThisLoop != 0) {    pw.println(prefix + "violationNumThisLoop: " + violationNumThisLoop);  }  if (numAnimationsRunning != 0) {    pw.println(prefix + "numAnimationsRunning: " + numAnimationsRunning);  }  pw.println(prefix + "violationUptimeMillis: " + violationUptimeMillis);  if (broadcastIntentAction != null) {    pw.println(prefix + "broadcastIntentAction: " + broadcastIntentAction);  }  if (tags != null) {    int index=0;    for (    String tag : tags) {      pw.println(prefix + "tag[" + (index++)+ "]: "+ tag);    }  }}  }
class C{  public static List createList(Object[] array){  List list=new ArrayList();  if (array != null)   for (int i=0; i < array.length; i++)   list.add(array[i]);  return list;}  }
class C{  public PaletteRGBChooser(){}  }
class C{  public void onSaveInstanceState(Bundle outState){  outState.putBoolean("SlidingActivityHelper.open",mSlidingMenu.isMenuShowing());  outState.putBoolean("SlidingActivityHelper.secondary",mSlidingMenu.isSecondaryMenuShowing());}  }
class C{  public void onCreate(Bundle savedInstanceState){  mSlidingMenu=(SlidingMenu)LayoutInflater.from(mActivity).inflate(R.layout.slidingmenumain,null);}  }
class C{  public XTraceLoggerImpl(String agent,XTraceReporter reporter){  this.agent=agent;  this.reporter=reporter;}  }
class C{  @Deprecated public void expungeSearch(String guid,OnClientCallback<Integer> callback){  AsyncReflector.execute(mClient,callback,"expungeSearch",mAuthenticationToken,guid);}  }
class C{  public void drawContours(Mat img,Color color,int thickness){  Drawing.drawContours(img,contours,color,thickness);}  }
class C{  public static byte[] toBytes(long val){  byte[] b=new byte[8];  for (int i=7; i > 0; i--) {    b[i]=(byte)val;    val>>>=8;  }  b[0]=(byte)val;  return b;}  }
class C{  public void ashr(int size,Register dst,Register src,long shiftAmt){  int shift=clampShiftAmt(size,shiftAmt);  super.sbfm(size,dst,src,shift,size - 1);}  }
class C{  static AttrPause createFromString(final String str) throws BOSHException {  if (str == null) {    return null;  } else {    return new AttrPause(str);  }}  }
class C{  public static String toString(byte[] value){  return doToString(value,"UTF-8");}  }
class C{  @SuppressForbidden(reason="command line tool") public static void main(String args[]) throws Exception {  System.out.println("checking for jar hell...");  checkJarHell();  System.out.println("no jar hell found");}  }
class C{  public boolean isDrawValueAboveBarEnabled(){  return mDrawValueAboveBar;}  }
class C{  public static final int sign(short x){  return (x < 0) ? -1 : 1;}  }
class C{  public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){  Border border=getBorder();  String title=getTitle();  if ((title != null) && !title.isEmpty()) {    int edge=(border instanceof TitledBorder) ? 0 : EDGE_SPACING;    JLabel label=getLabel(c);    Dimension size=label.getPreferredSize();    Insets insets=getBorderInsets(border,c,new Insets(0,0,0,0));    int borderX=x + edge;    int borderY=y + edge;    int borderW=width - edge - edge;    int borderH=height - edge - edge;    int labelY=y;    int labelH=size.height;    int position=getPosition();switch (position) {case ABOVE_TOP:      insets.left=0;    insets.right=0;  borderY+=labelH - edge;borderH-=labelH - edge;break;case TOP:insets.top=edge + insets.top / 2 - labelH / 2;if (insets.top < edge) {borderY-=insets.top;borderH+=insets.top;} else {labelY+=insets.top;}break;case BELOW_TOP:labelY+=insets.top + edge;break;case ABOVE_BOTTOM:labelY+=height - labelH - insets.bottom- edge;break;case BOTTOM:labelY+=height - labelH;insets.bottom=edge + (insets.bottom - labelH) / 2;if (insets.bottom < edge) {borderH+=insets.bottom;} else {labelY-=insets.bottom;}break;case BELOW_BOTTOM:insets.left=0;insets.right=0;labelY+=height - labelH;borderH-=labelH - edge;break;}insets.left+=edge + TEXT_INSET_H;insets.right+=edge + TEXT_INSET_H;int labelX=x;int labelW=width - insets.left - insets.right;if (labelW > size.width) {labelW=size.width;}switch (getJustification(c)) {case LEFT:labelX+=insets.left;break;case RIGHT:labelX+=width - insets.right - labelW;break;case CENTER:labelX+=(width - labelW) / 2;break;}if (border != null) {if ((position != TOP) && (position != BOTTOM)) {border.paintBorder(c,g,borderX,borderY,borderW,borderH);} else {Graphics g2=g.create();if (g2 instanceof Graphics2D) {Graphics2D g2d=(Graphics2D)g2;Path2D path=new Path2D.Float();path.append(new Rectangle(borderX,borderY,borderW,labelY - borderY),false);path.append(new Rectangle(borderX,labelY,labelX - borderX - TEXT_SPACING,labelH),false);path.append(new Rectangle(labelX + labelW + TEXT_SPACING,labelY,borderX - labelX + borderW - labelW - TEXT_SPACING,labelH),false);path.append(new Rectangle(borderX,labelY + labelH,borderW,borderY - labelY + borderH - labelH),false);g2d.clip(path);}border.paintBorder(c,g2,borderX,borderY,borderW,borderH);g2.dispose();}}g.translate(labelX,labelY);label.setSize(labelW,labelH);label.paint(g);g.translate(-labelX,-labelY);} else if (border != null) {border.paintBorder(c,g,x,y,width,height);}}  }
class C{  protected SystemMemberCacheEventImpl(DistributedMember id,Operation op){  super(id);  this.op=op;}  }
class C{  public double norm2(){  return (new SingularValueDecomposition(this).norm2());}  }
class C{  public boolean isExemptPackage(Identifier id){  return env.isExemptPackage(id);}  }
class C{  public final void write(String s) throws IOException {  write(s,0,s.length());}  }
class C{  @SuppressWarnings("cast") public void propertyChange(PropertyChangeEvent evt){  String property=evt.getPropertyName();  if (evt.getSource() instanceof VSDControl) {    if (property.equals(VSDControl.PCIDMap.get(VSDControl.PropertyChangeID.OPTION_CHANGE))) {      Train selected_train=TrainManager.instance().getTrainByName((String)evt.getNewValue());      if (selected_train != null) {        selected_train.addPropertyChangeListener(this);      }    }    return;  }  if ((property.equals(VSDManagerFrame.PCIDMap.get(VSDManagerFrame.PropertyChangeID.MUTE))) || (property.equals(VSDecoderPane.PCIDMap.get(VSDecoderPane.PropertyChangeID.MUTE)))) {    log.debug("VSD: Mute change. value = " + evt.getNewValue());    Boolean b=(Boolean)evt.getNewValue();    this.mute(b.booleanValue());  } else   if ((property.equals(VSDManagerFrame.PCIDMap.get(VSDManagerFrame.PropertyChangeID.VOLUME_CHANGE))) || (property.equals(VSDecoderPane.PCIDMap.get(VSDecoderPane.PropertyChangeID.VOLUME_CHANGE)))) {    log.debug("VSD: Volume change. value = " + evt.getNewValue());    this.setMasterVolume((1.0f * (Integer)evt.getNewValue()) / 100.0f);  } else   if (property.equals(VSDecoderPane.PCIDMap.get(VSDecoderPane.PropertyChangeID.ADDRESS_CHANGE))) {    log.debug("Decoder set address = " + (LocoAddress)evt.getNewValue());    this.setAddress((LocoAddress)evt.getNewValue());    this.enable();  } else   if (property.equals(Train.TRAIN_LOCATION_CHANGED_PROPERTY)) {    PhysicalLocation p=getTrainPosition((Train)evt.getSource());    if (p != null) {      this.setPosition(getTrainPosition((Train)evt.getSource()));    } else {      log.debug("Train has null position");      this.setPosition(new PhysicalLocation());    }  } else   if (property.equals(Train.STATUS_CHANGED_PROPERTY)) {    String status=(String)evt.getNewValue();    log.debug("Train status changed: " + status);    log.debug("New Location: " + getTrainPosition((Train)evt.getSource()));    if ((status.startsWith(Train.BUILT)) || (status.startsWith(Train.PARTIAL_BUILT))) {      log.debug("Train built. status = " + status);      PhysicalLocation p=getTrainPosition((Train)evt.getSource());      if (p != null) {        this.setPosition(getTrainPosition((Train)evt.getSource()));      } else {        log.debug("Train has null position");        this.setPosition(new PhysicalLocation());      }    }  }}  }
class C{  private static void parseProperties(Properties p){  ProviderImpl impl=null;  String key=null;  String[] propertyNames=null;  for (Enumeration<?> e=p.propertyNames(); e.hasMoreElements(); ) {    String str=(String)e.nextElement();    int w=str.length();    if (str.startsWith(SyncFactory.ROWSET_SYNC_PROVIDER)) {      impl=new ProviderImpl();      impl.setIndex(providerImplIndex++);      if (w == (SyncFactory.ROWSET_SYNC_PROVIDER).length()) {        propertyNames=getPropertyNames(false);      } else {        propertyNames=getPropertyNames(true,str.substring(w - 1));      }      key=p.getProperty(propertyNames[0]);      impl.setClassname(key);      impl.setVendor(p.getProperty(propertyNames[1]));      impl.setVersion(p.getProperty(propertyNames[2]));      implementations.put(key,impl);    }  }}  }
class C{  public GridTuple4(@Nullable V1 val1,@Nullable V2 val2,@Nullable V3 val3,@Nullable V4 val4){  this.val1=val1;  this.val2=val2;  this.val3=val3;  this.val4=val4;}  }
class C{  private void resetCache(){synchronized (this) {    resourcesCache=null;    eventId++;  }  support.firePropertyChange(PROP_RESOURCES,null,null);}  }
class C{  public void unsetTriggerName(){  this.triggerName=null;}  }
class C{  private static int findSinkState(Automaton automaton){  int numStates=automaton.getNumStates();  Transition t=new Transition();  int foundState=-1;  for (int s=0; s < numStates; s++) {    if (automaton.isAccept(s)) {      int count=automaton.initTransition(s,t);      boolean isSinkState=false;      for (int i=0; i < count; i++) {        automaton.getNextTransition(t);        if (t.dest == s && t.min == 0 && t.max == 0xff) {          isSinkState=true;          break;        }      }      if (isSinkState) {        foundState=s;        break;      }    }  }  return foundState;}  }
class C{  public void doTask(String operationCode){switch (operationCode) {case Constants.Operation.DEVICE_LOCK:    enableHardLock();  break;case Constants.Operation.DEVICE_UNLOCK:disableHardLock();break;case Constants.Operation.ENABLE_ADMIN:startAdmin();break;case Constants.Operation.UPGRADE_FIRMWARE:upgradeFirmware(false);break;case Constants.Operation.REBOOT:rebootDevice();break;case Constants.Operation.EXECUTE_SHELL_COMMAND:if (command != null) {executeShellCommand(command);}break;case Constants.Operation.SILENT_INSTALL_APPLICATION:case Constants.Operation.SILENT_UPDATE_APPLICATION:if (appUri != null) {silentInstallApp(getApplicationContext(),appUri);}break;case Constants.Operation.SILENT_UNINSTALL_APPLICATION:if (appUri != null) {silentUninstallApp(getApplicationContext(),appUri);}break;case Constants.Operation.REMOVE_DEVICE_OWNER:SettingsManager.clearDeviceOwner();break;case Constants.Operation.DISALLOW_ADJUST_VOLUME:SettingsManager.restrict(DISALLOW_ADJUST_VOLUME,restrictionCode);break;case Constants.Operation.DISALLOW_ADD_USER:SettingsManager.restrict(DISALLOW_ADD_USER,restrictionCode);break;case Constants.Operation.DISALLOW_APPS_CONTROL:SettingsManager.restrict(DISALLOW_APPS_CONTROL,restrictionCode);break;case Constants.Operation.DISALLOW_CONFIG_BLUETOOTH:SettingsManager.restrict(DISALLOW_CONFIG_BLUETOOTH,restrictionCode);break;case Constants.Operation.DISALLOW_CONFIG_CELL_BROADCASTS:SettingsManager.restrict(DISALLOW_CONFIG_CELL_BROADCASTS,restrictionCode);break;case Constants.Operation.DISALLOW_CONFIG_CREDENTIALS:SettingsManager.restrict(DISALLOW_CONFIG_CREDENTIALS,restrictionCode);break;case Constants.Operation.DISALLOW_CONFIG_MOBILE_NETWORKS:SettingsManager.restrict(DISALLOW_CONFIG_MOBILE_NETWORKS,restrictionCode);break;case Constants.Operation.DISALLOW_CONFIG_TETHERING:SettingsManager.restrict(DISALLOW_CONFIG_TETHERING,restrictionCode);break;case Constants.Operation.DISALLOW_CONFIG_VPN:SettingsManager.restrict(DISALLOW_CONFIG_VPN,restrictionCode);break;case Constants.Operation.DISALLOW_CONFIG_WIFI:SettingsManager.restrict(DISALLOW_CONFIG_WIFI,restrictionCode);break;case Constants.Operation.DISALLOW_CREATE_WINDOWS:SettingsManager.restrict(DISALLOW_CREATE_WINDOWS,restrictionCode);break;case Constants.Operation.DISALLOW_CROSS_PROFILE_COPY_PASTE:SettingsManager.restrict(DISALLOW_CROSS_PROFILE_COPY_PASTE,restrictionCode);break;case Constants.Operation.DISALLOW_DEBUGGING_FEATURES:SettingsManager.restrict(DISALLOW_DEBUGGING_FEATURES,restrictionCode);break;case Constants.Operation.DISALLOW_FACTORY_RESET:SettingsManager.restrict(DISALLOW_FACTORY_RESET,restrictionCode);break;case Constants.Operation.DISALLOW_INSTALL_APPS:SettingsManager.restrict(DISALLOW_INSTALL_APPS,restrictionCode);break;case Constants.Operation.DISALLOW_INSTALL_UNKNOWN_SOURCES:SettingsManager.restrict(DISALLOW_INSTALL_UNKNOWN_SOURCES,restrictionCode);break;case Constants.Operation.DISALLOW_MODIFY_ACCOUNTS:SettingsManager.restrict(DISALLOW_MODIFY_ACCOUNTS,restrictionCode);break;case Constants.Operation.DISALLOW_MOUNT_PHYSICAL_MEDIA:SettingsManager.restrict(DISALLOW_MOUNT_PHYSICAL_MEDIA,restrictionCode);break;case Constants.Operation.DISALLOW_NETWORK_RESET:SettingsManager.restrict(DISALLOW_NETWORK_RESET,restrictionCode);break;case Constants.Operation.DISALLOW_OUTGOING_BEAM:SettingsManager.restrict(DISALLOW_OUTGOING_BEAM,restrictionCode);break;case Constants.Operation.DISALLOW_OUTGOING_CALLS:SettingsManager.restrict(DISALLOW_OUTGOING_CALLS,restrictionCode);break;case Constants.Operation.DISALLOW_REMOVE_USER:SettingsManager.restrict(DISALLOW_REMOVE_USER,restrictionCode);break;case Constants.Operation.DISALLOW_SAFE_BOOT:SettingsManager.restrict(DISALLOW_SAFE_BOOT,restrictionCode);break;case Constants.Operation.DISALLOW_SHARE_LOCATION:SettingsManager.restrict(DISALLOW_SHARE_LOCATION,restrictionCode);break;case Constants.Operation.DISALLOW_SMS:SettingsManager.restrict(DISALLOW_SMS,restrictionCode);break;case Constants.Operation.DISALLOW_UNINSTALL_APPS:SettingsManager.restrict(DISALLOW_UNINSTALL_APPS,restrictionCode);break;case Constants.Operation.DISALLOW_UNMUTE_MICROPHONE:SettingsManager.restrict(DISALLOW_UNMUTE_MICROPHONE,restrictionCode);break;case Constants.Operation.DISALLOW_USB_FILE_TRANSFER:SettingsManager.restrict(DISALLOW_USB_FILE_TRANSFER,restrictionCode);break;case Constants.Operation.ENSURE_VERIFY_APPS:SettingsManager.restrict(ENSURE_VERIFY_APPS,restrictionCode);break;case Constants.Operation.ALLOW_PARENT_PROFILE_APP_LINKING:SettingsManager.restrict(ALLOW_PARENT_PROFILE_APP_LINKING,restrictionCode);break;case Constants.Operation.AUTO_TIME:SettingsManager.setAutoTimeRequired(restrictionCode);break;case Constants.Operation.SET_SCREEN_CAPTURE_DISABLED:SettingsManager.setScreenCaptureDisabled(restrictionCode);break;case Constants.Operation.APP_RESTRICTION:if (command != null && (command.equals("true") || command.equals("false"))) {SettingsManager.setVisibilityOfApp(appUri,Boolean.parseBoolean(command));}break;case Constants.Operation.SET_STATUS_BAR_DISABLED:SettingsManager.setStatusBarDisabled(restrictionCode);break;case Constants.Operation.GET_FIRMWARE_UPGRADE_PACKAGE_STATUS:upgradeFirmware(true);break;case Constants.Operation.WIPE_DATA:try {Runtime.getRuntime().exec("sh");Runtime.getRuntime().exec("am broadcast -a android.intent.action.MASTER_CLEAR");} catch (IOException e) {Log.e("TAG","Shell command execution failed." + e);}break;case Constants.Operation.GET_FIRMWARE_UPGRADE_DOWNLOAD_PROGRESS:publishFirmwareDownloadProgress();break;case Constants.Operation.GET_FIRMWARE_BUILD_DATE:publishFirmwareBuildDate();break;case Constants.Operation.LOGCAT:getLogCat(command);break;default :Log.e(TAG,"Invalid operation code received");break;}}  }
class C{  public void draw(Canvas c){  super.draw(c);  paint.setAntiAlias(true);  paint.setColor(color_battery_background);  c.drawRect(0,0,c.getWidth(),c.getHeight(),paint);  int x=c.getWidth() / 2;  int y=c.getHeight() / 2 - (int)(30f * pixelDensity);  float _circleSize=(float)(c.getWidth() * circleSize);  int bgCircleColor=interpolateColor(color_background_decharge,color_background_charging,(float)lerp(_colorTransitionToCharged));  bgCircleColor=interpolateColor(bgCircleColor,color_background_critical,(float)lerp(_colorTransitionToCritical));  paint.setColor(bgCircleColor);  c.drawCircle(x,y,_circleSize,paint);  int fgCircleColor=interpolateColor(color_foreground_decharge,color_foreground_charging,(float)lerp(_colorTransitionToCharged));  fgCircleColor=interpolateColor(fgCircleColor,color_foreground_critical,(float)lerp(_colorTransitionToCritical));  paint.setColor(fgCircleColor);  c.drawCircle((float)(x + c.getWidth() * pos.getX()),(float)(y + c.getWidth() * pos.getY()),_circleSize * batteryPct,paint);  String label1="Battery " + Integer.toString(Math.round(batteryPct * 100)) + "%";  drawText(label1,"",x,(int)(y + circleSize * c.getWidth()),c);}  }
class C{  public void testGetSnippetFromElement(){  ProcessRemarkServiceImpl instance=new ProcessRemarkServiceImpl(null,null,null);  String rawHtml="<label> <span>Rechercher:</span> " + "<input type=\"text\" onkeyup=\"return CatchEnter(event);\" " + "class=\"text\" id=\"searchfield\" "+ "name=\"search&qudsqqqssqdsqdsqdo\" /></label>";  Document document=Jsoup.parse(rawHtml);  Element element=document.getElementsByTag("label").iterator().next();  String snippet=StringEscapeUtils.unescapeHtml4(instance.getSnippetFromElement(element));  String expectedSnippet="<label> <span>Rechercher:</span> " + "<input type=\"text\" onkeyup=\"return CatchEnter(event);\" " + "class=\"text\" id=\"searchfield\" "+ "name=\"search&amp;qudsqqqssqdsqdsqdo\" />[...]</label>";  assertEquals(expectedSnippet,snippet);  rawHtml="<label> <span>New Rechercher:</span> " + "<p title=\"some title here\" onkeyup=\"return CatchEnter(event);\" " + " id=\"searchfield\" class=\"myclass other-class1 other-class2\" > "+ "anything</p></label>";  document=Jsoup.parse(rawHtml);  element=document.getElementsByTag("label").iterator().next();  snippet=StringEscapeUtils.unescapeHtml4(instance.getSnippetFromElement(element));  expectedSnippet="<label> <span>New Rechercher:</span> " + "<p title=\"some title here\" onkeyup=\"return CatchEnter(event);\"" + " id=\"searchfield\" class=\"myclass other-class1 other-class2\">"+ "[...]</p>[...]</label>";  assertEquals(expectedSnippet,snippet);  rawHtml="<iframe align=\"left\" width=\"315px\" " + "scrolling=\"no\" height=\"160px\" frameborder=\"0\" " + "id=\"link-meteo\" src=\"http://www.anyUrl.com/module/onelocationsearch?ShowSearch=true&amp;StartDate=2012-06-01&amp;Days=2&amp;location=bruxelles&amp;url=http://meteo1.lavenir.net&amp;cssfile=http://lavenir.net/extra/weather/styles.css\">"+ "</iframe> ";  document=Jsoup.parse(rawHtml);  element=document.getElementsByTag("iframe").iterator().next();  snippet=StringEscapeUtils.unescapeHtml4(instance.getSnippetFromElement(element));  expectedSnippet=rawHtml.trim();  assertEquals(expectedSnippet,snippet);  rawHtml=" <center>  <script type=\"text/javascript\">    if (articledetail == false) initAdhese('IMU.SUPER.WIDE');     </script> " + "<script src=\"http://anyUrl.com/ad3/sl_ave_home_-IMU.SUPER.WIDE/lafr/rn92/pv1/brFirefox;Firefox17;Linux;screenundefined/in;prx;;gmbl;/?t=1381234838205\" type=\"text/javascript\"></script> " + " <div class=\"adhese_300x250\">  <script src=\"http://1.adhesecdn.be/pool/lib/68641.js?t=1371729603000\"></script> "+ "<script src=\"http://anyUrl.com/pagead/show_ads.js\" type=\"text/javascript\"></script>"+ "<ins style=\"display:inline-table;border:none;height:250px;margin:0;padding:0;position:relative;visibility:visible;width:300px\">"+ "<ins style=\"display:block;border:none;height:250px;margin:0;padding:0;position:relative;visibility:visible;width:300px\" id=\"aswift_1_anchor\">"+ "<iframe width=\"300\" scrolling=\"no\" height=\"250\" frameborder=\"0\" style=\"left:0;position:absolute;top:0;\" name=\"aswift_1\" id=\"aswift_1\" onload=\"var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){w.location.replace(h)}}\" allowtransparency=\"true\" hspace=\"0\" vspace=\"0\" marginheight=\"0\" marginwidth=\"0\"></iframe>"+ "</ins>"+ "</ins>"+ "</div> "+ "</center> ";  document=Jsoup.parse(rawHtml);  element=document.getElementsByTag("center").iterator().next();  snippet=StringEscapeUtils.unescapeHtml4(instance.getSnippetFromElement(element));  expectedSnippet="<center> <script type=\"text/javascript\"> if (articledetail == false) initAdhese('IMU.SUPER.WIDE'); </script> " + "<script src=\"http://anyUrl.com/ad3/sl_ave_home_-IMU.SUPER.WIDE/lafr/rn92/pv1/brFirefox;Firefox17;Linux;screenundefined/in;prx;;gmbl;/?t=1381234838205\" type=\"text/javascript\">[...]</script>" + "[...]</center>";  assertEquals(expectedSnippet,snippet);}  }
class C{  public static double logpoissonPDFm1(double x_plus_1,double lambda){  if (Double.isInfinite(lambda)) {    return Double.NEGATIVE_INFINITY;  }  if (x_plus_1 > 1) {    return rawLogProbability(x_plus_1 - 1,lambda);  }  if (lambda > Math.abs(x_plus_1 - 1) * MathUtil.LOG2 * Double.MAX_EXPONENT / 1e-14) {    return -lambda - GammaDistribution.logGamma(x_plus_1);  } else {    return rawLogProbability(x_plus_1,lambda) + Math.log(x_plus_1 / lambda);  }}  }
class C{  public static void main(String[] args){  System.out.println(AbMd5.MD5("2011123456").toLowerCase());}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  public void testScalePos(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=10;  int cScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  assertTrue("incorrect scale",aNumber.scale() == cScale);}  }
class C{  public boolean sendBroadcast(Intent intent){synchronized (mReceivers) {    final String action=intent.getAction();    final String type=intent.resolveTypeIfNeeded(MainApplication.getInstance().getContentResolver());    final Uri data=intent.getData();    final String scheme=intent.getScheme();    final Set<String> categories=intent.getCategories();    ArrayList<ReceiverRecord> entries=mActions.get(intent.getAction());    if (entries != null) {      ArrayList<ReceiverRecord> receivers=null;      for (int i=0; i < entries.size(); i++) {        ReceiverRecord receiver=entries.get(i);        if (receiver.broadcasting) {          continue;        }        int match=receiver.filter.match(action,type,scheme,data,categories,"LocalBroadcastManager");        if (match >= 0) {          if (receivers == null) {            receivers=new ArrayList<>();          }          receivers.add(receiver);          receiver.broadcasting=true;        }      }      if (receivers != null) {        for (int i=0; i < receivers.size(); i++) {          receivers.get(i).broadcasting=false;        }        mPendingBroadcasts.add(new BroadcastRecord(intent,receivers));        if (!mHandler.hasMessages(MSG_EXEC_PENDING_BROADCASTS)) {          mHandler.sendEmptyMessage(MSG_EXEC_PENDING_BROADCASTS);        }        return true;      }    }  }  return false;}  }
class C{  public ObjectMatrix1D like1D(int size){  return new SparseObjectMatrix1D(size);}  }
class C{  public void verifyingToken(){  setTokenInfo("Verifying login..");  verifyToken.setEnabled(false);}  }
class C{  public void run(){  List<ViewerFilter> filters=new ArrayList<ViewerFilter>();  filters.add(new ClosedProjectFilter());  filters.add(new FolderOnlyFilter());  ElementTreeSelectionDialog dialog=SWTFactory.createAllWorkspaceFileSelectionDialog(getShell(),"Folder Selection","Choose the folder to add to list",filters);  MultiStatus status=new MultiStatus(Plugin.PLUGIN_ID,IJavaDebugUIConstants.INTERNAL_ERROR,"One or more exceptions occurred while adding projects.",null);  if (dialog.open() == Window.OK) {    Object[] selections=dialog.getResult();    List<IFolder> additions=new ArrayList<IFolder>(selections.length);    for (int i=0; i < selections.length; i++) {      IFolder jp=(IFolder)selections[i];      additions.add(jp);    }    List<IRuntimeClasspathEntry> runtimeEntries=new ArrayList<IRuntimeClasspathEntry>(additions.size());    Iterator<IFolder> iter=additions.iterator();    while (iter.hasNext()) {      IFolder jp=(IFolder)iter.next();      runtimeEntries.add(JavaRuntime.newArchiveRuntimeClasspathEntry(jp));    }    IRuntimeClasspathEntry[] entries=(IRuntimeClasspathEntry[])runtimeEntries.toArray(new IRuntimeClasspathEntry[0]);    getViewer().addEntries(entries);  }  if (!status.isOK()) {    Plugin.statusDialog(status);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.194 -0400",hash_original_method="C0219AF1D095DA295F318D03FEFBBE5C",hash_generated_method="392D25654FB092B347D6206C9962370A") static boolean isTextXml(String mime){  return mime != null && (mime.equals("text/xml") || mime.equals("text/xml-external-parsed-entity") || mime.startsWith("text/") && mime.endsWith("+xml"));}  }
class C{  public void clear(){  m_keys.clear();  m_values.clear();}  }
class C{  public ApiClient addDefaultHeader(String key,String value){  defaultHeaderMap.put(key,value);  return this;}  }
class C{  public static void putString(Context context,String key,String value){  SharedPreferences mainPref=context.getSharedPreferences(context.getResources().getString(R.string.shared_pref_package),Context.MODE_PRIVATE);  Editor editor=mainPref.edit();  editor.putString(key,value);  editor.commit();}  }
class C{  void processAStore(Instruction s){  HeapOperand<?>[] A1=ssa.getHeapUses(s);  HeapOperand<?>[] A2=ssa.getHeapDefs(s);  if ((A1.length != 1) || (A2.length != 1)) {    throw new OptimizingCompilerException("IndexPropagation.processAStore: astore instruction defs or uses multiple heap variables?");  }  Operand array=AStore.getArray(s);  Operand index=AStore.getIndex(s);  addUpdateArrayDefEquation(A2[0].getHeapVariable(),A1[0].getHeapVariable(),array,index);}  }
class C{  public synchronized boolean isActive(){  return this.active;}  }
class C{  public synchronized void resetStats(String name){  List<XYDataItem> stats=getStats(name);  if (stats != null) {    stats.clear();  }}  }
class C{  private @Nullable BinarySerializer serializerForClass(Class cls){  BinarySerializer serializer=defaultSerializer();  if (serializer == null && canUseReflectiveSerializer(cls))   serializer=new BinaryReflectiveSerializer();  return serializer;}  }
class C{  public static URI buildBroadcastRequestUri(URI targetService,String selectorPath,String selectionKey){  URI u=UriUtils.buildUri(targetService,UriUtils.buildUriPath(selectorPath,ServiceUriPaths.SERVICE_URI_SUFFIX_FORWARDING));  u=UriUtils.extendUriWithQuery(u,FORWARDING_URI_PARAM_NAME_KEY,selectionKey,FORWARDING_URI_PARAM_NAME_PATH,targetService.getPath(),FORWARDING_URI_PARAM_NAME_TARGET,ForwardingTarget.ALL.toString());  return u;}  }
class C{  public void pushStaticVipRoute(boolean inBound,Route route,IPClient client,LBMember member,long pinSwitch){  List<NodePortTuple> path=route.getPath();  if (path.size() > 0) {    for (int i=0; i < path.size(); i+=2) {      long sw=path.get(i).getNodeId();      String swString=HexString.toHexString(path.get(i).getNodeId());      String entryName;      String matchString=null;      String actionString=null;      OFFlowMod fm=(OFFlowMod)floodlightProvider.getOFMessageFactory().getMessage(OFType.FLOW_MOD);      fm.setIdleTimeout((short)0);      fm.setHardTimeout((short)0);      fm.setBufferId(OFPacketOut.BUFFER_ID_NONE);      fm.setCommand((short)0);      fm.setFlags((short)0);      fm.setOutPort(OFPort.OFPP_NONE.getValue());      fm.setCookie((long)0);      fm.setPriority(Short.MAX_VALUE);      if (inBound) {        entryName="inbound-vip-" + member.vipId + "-client-"+ client.ipAddress+ "-port-"+ client.targetPort+ "-srcswitch-"+ path.get(0).getNodeId()+ "-sw-"+ sw;        matchString="nw_src=" + IPv4.fromIPv4Address(client.ipAddress) + ","+ "nw_proto="+ String.valueOf(client.nw_proto)+ ","+ "tp_src="+ String.valueOf(client.srcPort & 0xffff)+ ","+ "dl_type="+ LB_ETHER_TYPE+ ","+ "in_port="+ String.valueOf(path.get(i).getPortId());        if (sw == pinSwitch) {          actionString="set-dst-ip=" + IPv4.fromIPv4Address(member.address) + ","+ "set-dst-mac="+ member.macString+ ","+ "output="+ path.get(i + 1).getPortId();        } else {          actionString="output=" + path.get(i + 1).getPortId();        }      } else {        entryName="outbound-vip-" + member.vipId + "-client-"+ client.ipAddress+ "-port-"+ client.targetPort+ "-srcswitch-"+ path.get(0).getNodeId()+ "-sw-"+ sw;        matchString="nw_dst=" + IPv4.fromIPv4Address(client.ipAddress) + ","+ "nw_proto="+ String.valueOf(client.nw_proto)+ ","+ "tp_dst="+ String.valueOf(client.srcPort & 0xffff)+ ","+ "dl_type="+ LB_ETHER_TYPE+ ","+ "in_port="+ String.valueOf(path.get(i).getPortId());        if (sw == pinSwitch) {          actionString="set-src-ip=" + IPv4.fromIPv4Address(vips.get(member.vipId).address) + ","+ "set-src-mac="+ vips.get(member.vipId).proxyMac.toString()+ ","+ "output="+ path.get(i + 1).getPortId();        } else {          actionString="output=" + path.get(i + 1).getPortId();        }      }      parseActionString(fm,actionString,log);      fm.setPriority(U16.t(LB_PRIORITY));      OFMatch ofMatch=new OFMatch();      try {        ofMatch.fromString(matchString);      } catch (      IllegalArgumentException e) {        log.debug("ignoring flow entry {} on switch {} with illegal OFMatch() key: " + matchString,entryName,swString);      }      fm.setMatch(ofMatch);      sfp.addFlow(entryName,fm,swString);    }  }  return;}  }
class C{  @Override public boolean isStateless(FacesContext facesContext,String viewId) throws IllegalStateException {  if (facesContext.isPostback()) {    Object stateObject;    try {      stateObject=getState(facesContext,viewId);    } catch (    IOException ioe) {      throw new IllegalStateException("Cannot determine whether or not the request is stateless",ioe);    }    if (stateObject instanceof String && "stateless".equals(stateObject)) {      return true;    }    return false;  }  throw new IllegalStateException("Cannot determine whether or not the request is stateless");}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.EQUALITY_EXPRESSION__LHS:    setLhs((Expression)null);  return;case N4JSPackage.EQUALITY_EXPRESSION__OP:setOp(OP_EDEFAULT);return;case N4JSPackage.EQUALITY_EXPRESSION__RHS:setRhs((Expression)null);return;}super.eUnset(featureID);}  }
class C{  public Socket createTunnelServerSocket(String targethost,Socket socket) throws IOException {  SSLSocket s=(SSLSocket)getTunnelSSLSocketFactory(targethost).createSocket(socket,socket.getInetAddress().getHostAddress(),socket.getPort(),true);  s.setUseClientMode(false);  s.startHandshake();  return s;}  }
class C{  public static Element make(Node orig,String id){  Element el=orig.getOwnerDocument().createElementNS(Namespaces.HTML_NAMESPACE_URI,"span");  el.setAttributeNS(ID_ATTR.ns.uri,ID_ATTR.localName,id);  Nodes.setFilePositionFor(el,Nodes.getFilePositionFor(orig));  return el;}  }
class C{  public static long persianToJulian(long year,int month,int day){  return 365L * ((ceil(year - 474L,2820D) + 474L) - 1L) + ((long)Math.floor((682L * (ceil(year - 474L,2820D) + 474L) - 110L) / 2816D)) + (PersianCalendarConstants.PERSIAN_EPOCH - 1L) + 1029983L * ((long)Math.floor((year - 474L) / 2820D)) + (month < 7 ? 31 * month : 30 * month + 6) + day;}  }
class C{  public STSConfiguration(long clockTolerance){  Validate.isTrue(clockTolerance >= 0);  this.clockTolerance=clockTolerance;}  }
class C{  public Element store(Object o){  TrackSegment p=(TrackSegment)o;  Element element=new Element("tracksegment");  element.setAttribute("ident",p.getID());  if (p.getBlockName().length() > 0) {    element.setAttribute("blockname",p.getBlockName());  }  element.setAttribute("connect1name",p.getConnect1Name());  element.setAttribute("type1","" + p.getType1());  element.setAttribute("connect2name",p.getConnect2Name());  element.setAttribute("type2","" + p.getType2());  element.setAttribute("dashed","" + (p.getDashed() ? "yes" : "no"));  element.setAttribute("mainline","" + (p.getMainline() ? "yes" : "no"));  element.setAttribute("hidden","" + (p.getHidden() ? "yes" : "no"));  element.setAttribute("arc","" + (p.getArc() ? "yes" : "no"));  if (p.getArc()) {    element.setAttribute("flip","" + (p.getFlip() ? "yes" : "no"));    element.setAttribute("circle","" + (p.getCircle() ? "yes" : "no"));    if ((p.getCircle()) && (p.getAngle() != 0.0D)) {      element.setAttribute("angle","" + (p.getAngle()));      element.setAttribute("hideConLines","" + (p.hideConstructionLines() ? "yes" : "no"));    }  }  element.setAttribute("class",getClass().getName());  return element;}  }
class C{  public static org.oscm.vo.VOServiceFeedback convertToApi(org.oscm.internal.vo.VOServiceFeedback oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOServiceFeedback newVO=new org.oscm.vo.VOServiceFeedback();  newVO.setReviews(convertToApiVOServiceReview(oldVO.getReviews()));  newVO.setAverageRating(oldVO.getAverageRating());  newVO.setAllowedToWriteReview(oldVO.isAllowedToWriteReview());  newVO.setServiceKey(oldVO.getServiceKey());  return newVO;}  }
class C{  public void paintTreeCellBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public Handle(int tag,String owner,String name,String desc){  this.tag=tag;  this.owner=owner;  this.name=name;  this.desc=desc;}  }
class C{  public BERSequence(ASN1EncodableVector v){  super(v);}  }
class C{  protected double now(){  return System.currentTimeMillis();}  }
class C{  public void testEmptyPartitions(){  final List<IGroupMemberNode> nodes=new ArrayList<IGroupMemberNode>();  final GroupNodeVarBindingInfoMap bindingInfo=new GroupNodeVarBindingInfoMap(nodes,statisAnalysisForNodes(nodes),null);  final Set<IVariable<?>> external=new HashSet<IVariable<?>>();  final ASTJoinGroupPartitions partitions=new ASTJoinGroupPartitions(nodes,bindingInfo,external);  assertTrue(partitions.getPartitionList().size() == 1);  assertTrue(partitions.getPartitionList().get(0).nonOptionalNonMinusNodes.isEmpty());  assertTrue(partitions.extractNodeList(true).isEmpty());}  }
class C{  private static int checkTypeSignature(final String signature,int pos){switch (getChar(signature,pos)) {case 'Z':case 'C':case 'B':case 'S':case 'I':case 'F':case 'J':case 'D':    return pos + 1;default :  return checkFieldTypeSignature(signature,pos);}}  }
class C{  private synchronized void removeAndCloseAllSpanReceivers(){  SpanReceiver[] receivers=curReceivers;  curReceivers=new SpanReceiver[0];  for (  SpanReceiver receiver : receivers) {    try {      LOG.trace(toString() + ": closing receiver " + receiver.toString());      receiver.close();    } catch (    Throwable t) {      LOG.error(toString() + ": error closing " + receiver.toString(),t);    }  }}  }
class C{  public boolean isExtraCheckMethod(MethodReference ref){switch (this.initialSet) {case GETTERS:    return isGetter(ref);case ZEROARGMETHOD:  return isNoArgMethod(ref);case DEFAULTCONST:return isDefaultConstructor(ref);case STRINGCONST:return isStringConstructor(ref);default :break;}return false;}  }
class C{  public boolean atEnd(){  return buf == null && pos.getIndex() == text.length();}  }
class C{  @Override public String[] indices(){  return indices;}  }
class C{  public String toString(){  return getName();}  }
class C{  public void processLintResults(String lintFile,String lintFileSize){  RemoteFileFetcher lintFetcher=new RemoteFileFetcher(workspace,logger,lintFile,lintFileSize);  try {    String input=lintFetcher.getRemoteFile();    if (input != null && input.length() > 0) {      lintResults=new LintResults();      BufferedReader reader=new BufferedReader(new StringReader(input));      String lint;      while ((lint=reader.readLine()) != null) {        JSONObject json=JSONObject.fromObject(lint);        lintResults.add(new LintResult((String)json.get("name"),(String)json.get("code"),(String)json.get("severity"),(String)json.get("path"),(Integer)json.get("line"),(Integer)json.get("char"),(String)json.get("description")));      }    }  } catch (  JSONException e) {    e.printStackTrace(logger.getStream());  }catch (  InterruptedException e) {    e.printStackTrace(logger.getStream());  }catch (  IOException e) {    e.printStackTrace(logger.getStream());  }}  }
class C{  protected void process(final Context context,Iterator<IPathID> csvSorted){  QueryParameter query=FotoSql.queryDetail;  Cursor c=null;  try {    c=FotoSql.createCursorForQuery(context,query);    process(csvSorted,new DbItemIterator(c));  } catch (  Exception ex) {    Log.e(Global.LOG_CONTEXT,"FotoSql.execGetGeoRectangle(): error executing " + query,ex);  } finally {    if (c != null)     c.close();  }}  }
class C{  public RoundBrush(VolumetricSpace volume,float radius){  super(volume);  setSize(radius);}  }
class C{  public ObserveManager(){  endpoints=new ConcurrentHashMap<InetSocketAddress,ObservingEndpoint>();}  }
class C{  private int minChild(int i){  int loBound=d * i + 1, hiBound=d * i + d;  int min=loBound;  for (int cur=loBound; cur <= hiBound; cur++) {    if (cur < n && greater(min,cur))     min=cur;  }  return min;}  }
class C{  static private void copyTranslationItems(MPrintFormatItem[] fromItems,MPrintFormatItem[] toItems){  if (fromItems == null || toItems == null)   return;  int counter=0;  for (int i=0; i < fromItems.length; i++) {    int fromID=fromItems[i].getAD_PrintFormatItem_ID();    int toID=toItems[i].getAD_PrintFormatItem_ID();    StringBuffer sql=new StringBuffer("UPDATE AD_PrintFormatItem_Trl new ").append("SET (PrintName, PrintNameSuffix, IsTranslated) = ").append("(").append("SELECT PrintName, PrintNameSuffix, IsTranslated ").append("FROM AD_PrintFormatItem_Trl old ").append("WHERE old.AD_Language=new.AD_Language").append(" AND AD_PrintFormatItem_ID =").append(fromID).append(") ").append("WHERE  AD_PrintFormatItem_ID=").append(toID).append(" AND EXISTS (SELECT AD_PrintFormatItem_ID ").append(" FROM AD_PrintFormatItem_trl old").append(" WHERE old.AD_Language=new.AD_Language").append(" AND AD_PrintFormatItem_ID =").append(fromID).append(")");    int no=DB.executeUpdate(sql.toString(),null);    if (no == 0)     break;    counter+=no;  }  s_log.finest("#" + counter);}  }
class C{  private boolean isNumeric(int type){switch (type) {case java.sql.Types.NUMERIC:case java.sql.Types.DECIMAL:case java.sql.Types.BIT:case java.sql.Types.TINYINT:case java.sql.Types.SMALLINT:case java.sql.Types.INTEGER:case java.sql.Types.BIGINT:case java.sql.Types.REAL:case java.sql.Types.DOUBLE:case java.sql.Types.FLOAT:    return true;default :  return false;}}  }
class C{  public List<FileRecommendation> placeFileShare(VirtualArray vArray,VirtualPool vPool,VirtualPoolCapabilityValuesWrapper capabilities,Project project,Map<String,Object> optionalAttributes){  _log.debug("Schedule storage for {} resource(s) of size {}.",capabilities.getResourceCount(),capabilities.getSize());  List<StoragePool> candidatePools=_scheduler.getMatchingPools(vArray,vPool,capabilities,optionalAttributes);  if (CollectionUtils.isEmpty(candidatePools)) {    StringBuffer errorMessage=new StringBuffer();    if (optionalAttributes.get(AttributeMatcher.ERROR_MESSAGE) != null) {      errorMessage=(StringBuffer)optionalAttributes.get(AttributeMatcher.ERROR_MESSAGE);    }    throw APIException.badRequests.noStoragePools(vArray.getLabel(),vPool.getLabel(),errorMessage.toString());  }  List<VirtualNAS> invalidNasServers=new ArrayList<VirtualNAS>();  Map<VirtualNAS,List<StoragePool>> vNASPoolMap=getRecommendedVirtualNASBasedOnCandidatePools(vPool,vArray.getId(),candidatePools,project,invalidNasServers);  VirtualNAS currvNAS=null;  List<FileRecommendation> fileRecommendations=null;  if (!vNASPoolMap.isEmpty()) {    for (    Entry<VirtualNAS,List<StoragePool>> eachVNASEntry : vNASPoolMap.entrySet()) {      if (eachVNASEntry.getValue().isEmpty()) {        continue;      }      currvNAS=eachVNASEntry.getKey();      if (currvNAS != null) {        _log.info("Best vNAS selected: {}",currvNAS.getNasName());        List<StoragePool> recommendedPools=eachVNASEntry.getValue();        List<Recommendation> poolRecommendations=_scheduler.getRecommendationsForPools(vArray.getId().toString(),recommendedPools,capabilities);        if (poolRecommendations.isEmpty()) {          _log.info("Skipping vNAS {}, as pools are not having enough resources",currvNAS.getNasName());          continue;        }        fileRecommendations=getFileRecommendationsForVNAS(currvNAS,vArray.getId(),vPool,poolRecommendations);        if (!fileRecommendations.isEmpty()) {          _log.info("Selected vNAS {} for placement",currvNAS.getNasName());          break;        }      }    }  }  if (fileRecommendations == null || fileRecommendations.isEmpty()) {    _log.info("Placement on HADomain matching pools");    List<Recommendation> poolRecommendations=_scheduler.getRecommendationsForPools(vArray.getId().toString(),candidatePools,capabilities);    fileRecommendations=selectStorageHADomainMatchingVpool(vPool,vArray.getId(),poolRecommendations,invalidNasServers);  }  if (fileRecommendations == null || fileRecommendations.isEmpty()) {    _log.error("Could not find matching pools for virtual array {} & vpool {}",vArray.getId(),vPool.getId());  } else {    for (    FileRecommendation recommendation : fileRecommendations) {      FileRecommendation fileRecommendation=recommendation;      fileRecommendation.setFileType(FileType.FILE_SYSTEM_DATA);      StorageSystem system=_dbClient.queryObject(StorageSystem.class,recommendation.getSourceStorageSystem());      fileRecommendation.setDeviceType(system.getSystemType());    }  }  return fileRecommendations;}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof X500Name || obj instanceof ASN1Sequence)) {    return false;  }  ASN1Primitive derO=((ASN1Encodable)obj).toASN1Primitive();  if (this.toASN1Primitive().equals(derO)) {    return true;  }  try {    return style.areEqual(this,new X500Name(ASN1Sequence.getInstance(((ASN1Encodable)obj).toASN1Primitive())));  } catch (  Exception e) {    return false;  }}  }
class C{  public static void addValidator(IFDeployExternalValidator validator,String mode){  ValidatorRegistry.addValidator(validator,mode);}  }
class C{  void showStage(Stage stageToShow){  if (stageToShow.equals(mainStage) || stageToShow.equals(progressStage))   stageToShow.show(); else   if (!stageToShow.isShowing())   stageToShow.showAndWait();  stageToShow.centerOnScreen();}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Class defineClass0(java.lang.String,byte[],int,int,java.lang.security.ProtectionDomain)")) {    java_lang_ClassLoader_defineClass0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Class findBootstrapClass(java.lang.String)")) {    java_lang_ClassLoader_findBootstrapClass(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Class findLoadedClass(java.lang.String)")) {    java_lang_ClassLoader_findLoadedClass(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.ClassLoader getCallerClassLoader()")) {    java_lang_ClassLoader_getCallerClassLoader(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  @Override public boolean performFinish(){  CnAElementFactory.getInstance().reloadModelFromDatabase();  return true;}  }
class C{  public AddOp(final byte[] data,final RDFFormat format){  this.data=data;  this.format=format;}  }
class C{  public RosterEntryComboBox(Roster roster,String roadName,String roadNumber,String dccAddress,String mfg,String decoderMfgID,String decoderVersionID,String id){  this(roster,Roster.getDefault().getDefaultRosterGroup(),roadName,roadNumber,dccAddress,mfg,decoderMfgID,decoderVersionID,id);}  }
class C{  public static Player wrap(Object syncObj,Player player){  if (player != null)   return new ThreadSafePlayer(syncObj,player); else   return null;}  }
class C{  public static boolean checkArgs(String[] args){  if (args.length < 4) {    return false;  }  if (args[0].compareToIgnoreCase("-modeldir") != 0) {    return false;  }  if (!(args[2].compareToIgnoreCase("-inputfile") == 0 || args[2].compareToIgnoreCase("-inputdir") == 0)) {    return false;  }  return true;}  }
class C{  public double probConstraint(OP constraint,int x,int y,int[] z){  double p=0;  logfact[0]=0;  for (int i=1; i < logfact.length; i++) {    logfact[i]=log(i) + logfact[i - 1];  }  logfact[0]=0;  if (z.length > maxParents) {    int maxConditioningNodes=z.length;    maxParents=maxConditioningNodes;    int[] _nodeDimension=Arrays.copyOf(nodeDimension,nodeDimension.length);    Arrays.sort(_nodeDimension);    int g1=_nodeDimension[_nodeDimension.length - 1];    int g2=_nodeDimension[_nodeDimension.length - 2];    maxCells=maxParents * g1 * g2* maxCases;    parents=new int[maxNodes + 2][maxParents + 1];    countsTree=new int[maxCells + 1];    counts=new int[maxCells + 1];  }  int n=z[0];  parents[x][0]=n;  for (int i=1; i <= n; i++) {    parents[x][i]=z[i];  }  double lnMarginalLikelihood_X=scoreNode(x,1);  parents[y][0]=n;  for (int i=1; i <= n; i++) {    parents[y][i]=z[i];  }  double lnMarginalLikelihood_Y=scoreNode(y,2);  double lnMarginalLikelihood_X_Y=lnMarginalLikelihood_X + lnMarginalLikelihood_Y;  p=priorIndependent(x,y,z);  double lnPrior_X_Y=Math.log(p);  double score_X_Y=lnMarginalLikelihood_X_Y + lnPrior_X_Y;  numberOfNodes++;  int xy=numberOfNodes;  for (int casei=1; casei <= numberOfCases; casei++) {    int xValue=cases[casei][x];    int yValue=cases[casei][y];    cases[casei][xy]=(xValue - 1) * nodeDimension[y] + yValue;  }  nodeDimension[xy]=nodeDimension[x] * nodeDimension[y];  parents[xy][0]=n;  for (int i=1; i <= n; i++) {    parents[xy][i]=z[i];  }  double lnMarginalLikelihood_XY=scoreNode(xy,3);  numberOfNodes--;  double lnTermPrior_X_Y=Math.log(p) / numberOfScores;  double lnTermPrior_XY=Math.log(1 - Math.exp(lnTermPrior_X_Y));  double scoreAll=0;  for (int i=1; i <= numberOfScores; i++) {    scoreAll+=lnXpluslnY(lnTermPrior_X_Y + (scores[i][1] + scores[i][2]),lnTermPrior_XY + scores[i][3]);  }  double probInd=Math.exp(score_X_Y - scoreAll);  if (constraint == OP.independent) {    p=probInd;  } else {    p=1.0 - probInd;  }  return p;}  }
class C{  @DSSource({DSSourceKind.FILE}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.180 -0400",hash_original_method="EBF7D2B1C77EFA08A2773E012A2E12C0",hash_generated_method="DE2827FF9476EB651F2E94F06D9245AB") public static List<String> readLines(File file,String encoding) throws IOException {  return readLines(file,Charsets.toCharset(encoding));}  }
class C{  public static SAXParser newSAXParser(String schemaLanguage,URL schema) throws SAXException, ParserConfigurationException {  return newSAXParser(schemaLanguage,true,false,schema);}  }
class C{  @Override public void process(final DM dm,final ReplyProcessor21 rp){  final long startTime=getTimestamp();  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"PutReplyMessage process invoking reply processor with processorId: {}",this.processorId);  }  if (rp == null) {    if (logger.isTraceEnabled(LogMarker.DM)) {      logger.trace(LogMarker.DM,"PutReplyMessage processor not found");    }    return;  }  if (rp instanceof PutResponse) {    PutResponse processor=(PutResponse)rp;    processor.setResponse(this);  }  rp.process(this);  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"{} processed {}",rp,this);  }  dm.getStats().incReplyMessageTime(NanoTimer.getTime() - startTime);}  }
class C{  @Override public void onContentChanged(){  super.onContentChanged();  View emptyView=findViewById(com.android.internal.R.id.empty);  mList=(ExpandableListView)findViewById(com.android.internal.R.id.list);  if (mList == null) {    throw new RuntimeException("Your content must have a ExpandableListView whose id attribute is " + "'android.R.id.list'");  }  if (emptyView != null) {    mList.setEmptyView(emptyView);  }  mList.setOnChildClickListener(this);  mList.setOnGroupExpandListener(this);  mList.setOnGroupCollapseListener(this);  if (mFinishedStart) {    setListAdapter(mAdapter);  }  mFinishedStart=true;}  }
class C{  private void disposeServiceCollectors(){  if (logger.isLoggable(Level.FINER)) {    logger.finer("disposeServiceCollectors()");  }  for (  String type : _serviceCollectors.keySet()) {    ServiceCollector collector=_serviceCollectors.get(type);    if (collector != null) {      this.removeServiceListener(type,collector);      _serviceCollectors.remove(type,collector);    }  }}  }
class C{  public void dynInit(){  genForm.configureMiniTable(miniTable);  miniTable.getModel().addTableModelListener(this);  statusBar.setStatusDB(" ");  tabbedPane.addEventListener(Events.ON_SELECT,this);}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  void free(){  store.logUndo(this,data);  store.free(getPos());}  }
class C{  private void initButtonList(){  ControllerButton[] buttons=ControllerButton.values();  String[] str=new String[buttons.length];  for (int i=0; i < buttons.length; i++) {    ControllerButton button=buttons[i];    str[i]=button.name();  }  buttonList.setListData(str);}  }
class C{  public TechnicalServiceActiveException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public void ifPresent(Consumer<? super T> consumer){  if (value != null)   consumer.accept(value);}  }
class C{  public static boolean openQuestion(Shell parent,String title,String message){  return open(QUESTION,parent,title,message,SWT.NONE);}  }
class C{  public Delegate(final MonitoringHandler monitoringHandler,final HttpClient selfClient,final String name,final Pattern pattern,final Set<HttpMethod> methods,final List<JsonObject> requests){  this.monitoringHandler=monitoringHandler;  this.selfClient=selfClient;  this.name=name;  this.pattern=pattern;  this.methods=methods;  this.requests=requests;}  }
class C{  private static String parseEscapeSequence(String text,int startPos,int len,OdbcEscapeToken token){  assert validSubstring(text,startPos,len);  int startPos0=startPos + 1 + token.length();  int len0=len - 1 - token.length()- 1;switch (token.type()) {case SCALAR_FUNCTION:    return parseExpression(text,startPos0,len0);case GUID:{    String res=parseExpression(text,startPos0,len0,token.type(),GUID_PATTERN);    return "CAST(" + res + " AS UUID)";  }case DATE:return parseExpression(text,startPos0,len0,token.type(),DATE_PATTERN);case TIME:return parseExpression(text,startPos0,len0,token.type(),TIME_PATTERN);case TIMESTAMP:return parseExpression(text,startPos0,len0,token.type(),TIMESTAMP_PATTERN);case OUTER_JOIN:return parseExpression(text,startPos0,len0);case CALL:{String val=parseExpression(text,startPos0,len0);return "CALL " + val;}case ESCAPE:case ESCAPE_WO_TOKEN:return parseLikeEscCharacterExpression(text,startPos0,len0);default :throw new IgniteException("Unsupported escape sequence token [text=" + substring(text,startPos,len) + ", token="+ token.type().body()+ ']');}}  }
class C{  private static void vecswap(char x[],int a,int b,int n){  for (int i=0; i < n; i++, a++, b++)   swap(x,a,b);}  }
class C{  protected AbstractMatrix1D vStrides(int stride){  if (stride <= 0)   throw new IndexOutOfBoundsException("illegal stride: " + stride);  this.stride*=stride;  if (this.size != 0)   this.size=(this.size - 1) / stride + 1;  this.isNoView=false;  return this;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypeRefsPackage.PARAMETERIZED_TYPE_REF___GET_TYPING_STRATEGY:    return getTypingStrategy();case TypeRefsPackage.PARAMETERIZED_TYPE_REF___CONTAINS_WILDCARDS:  return containsWildcards();case TypeRefsPackage.PARAMETERIZED_TYPE_REF___GET_TYPE_REF_AS_STRING:return getTypeRefAsString();case TypeRefsPackage.PARAMETERIZED_TYPE_REF___IS_PARAMETERIZED:return isParameterized();case TypeRefsPackage.PARAMETERIZED_TYPE_REF___IS_GENERIC:return isGeneric();case TypeRefsPackage.PARAMETERIZED_TYPE_REF___IS_RAW:return isRaw();case TypeRefsPackage.PARAMETERIZED_TYPE_REF___CONTAINS_UNBOUND_TYPE_VARIABLES:return containsUnboundTypeVariables();case TypeRefsPackage.PARAMETERIZED_TYPE_REF___IS_USE_SITE_STRUCTURAL_TYPING:return isUseSiteStructuralTyping();case TypeRefsPackage.PARAMETERIZED_TYPE_REF___IS_DEF_SITE_STRUCTURAL_TYPING:return isDefSiteStructuralTyping();}return super.eInvoke(operationID,arguments);}  }
class C{  public void changeBufferData(BufferInfo bufferInfo,Buffer newData,int index,boolean resizeBuffer){  changeBufferData(bufferInfo,newData,index,newData.capacity(),resizeBuffer);}  }
class C{  public synchronized void onDestroy(){  cleanupService();  mHandler.getLooper().quit();}  }
class C{  private Analysis(){}  }
class C{  public void addLocalTempTableConstraint(Constraint constraint){  if (localTempTableConstraints == null) {    localTempTableConstraints=database.newStringMap();  }  String name=constraint.getName();  if (localTempTableConstraints.get(name) != null) {    throw DbException.get(ErrorCode.CONSTRAINT_ALREADY_EXISTS_1,constraint.getSQL());  }  localTempTableConstraints.put(name,constraint);}  }
class C{  protected BusinessObjectDataRestoreDto prepareToInitiateRestoreImpl(BusinessObjectDataKey businessObjectDataKey){  businessObjectDataHelper.validateBusinessObjectDataKey(businessObjectDataKey,true,true);  BusinessObjectDataEntity businessObjectDataEntity=businessObjectDataDaoHelper.getBusinessObjectDataEntity(businessObjectDataKey);  StorageUnitEntity glacierStorageUnitEntity=getGlacierStorageUnit(businessObjectDataEntity);  String glacierBucketName=storageHelper.getStorageAttributeValueByName(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_BUCKET_NAME),glacierStorageUnitEntity.getStorage(),true);  StorageUnitEntity originStorageUnitEntity=getOriginStorageUnit(glacierStorageUnitEntity);  String originBucketName=storageHelper.getStorageAttributeValueByName(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_BUCKET_NAME),originStorageUnitEntity.getStorage(),true);  Assert.isTrue(glacierStorageUnitEntity.getDirectoryPath().startsWith(originBucketName + "/"),String.format("Storage directory path \"%s\" for business object data in \"%s\" %s storage does not start with the origin S3 bucket name. " + "Origin S3 bucket name: {%s}, origin storage: {%s}, business object data: {%s}",glacierStorageUnitEntity.getDirectoryPath(),glacierStorageUnitEntity.getStorage().getName(),StoragePlatformEntity.GLACIER,originBucketName,originStorageUnitEntity.getStorage().getName(),businessObjectDataHelper.businessObjectDataEntityAltKeyToString(businessObjectDataEntity)));  String originS3KeyPrefix=StringUtils.removeStart(originBucketName + "/",glacierStorageUnitEntity.getDirectoryPath());  List<StorageFile> originStorageFiles=storageFileHelper.createStorageFilesFromEntities(originStorageUnitEntity.getStorageFiles());  Assert.isTrue(!CollectionUtils.isEmpty(originStorageFiles),String.format("Business object data has no storage files registered in \"%s\" origin storage. Business object data: {%s}",originStorageUnitEntity.getStorage().getName(),businessObjectDataHelper.businessObjectDataKeyToString(businessObjectDataKey)));  StorageUnitStatusEntity newStorageUnitStatusEntity=storageUnitStatusDaoHelper.getStorageUnitStatusEntity(StorageUnitStatusEntity.RESTORING);  String oldOriginStorageUnitStatus=originStorageUnitEntity.getStatus().getCode();  storageUnitDaoHelper.updateStorageUnitStatus(originStorageUnitEntity,newStorageUnitStatusEntity,StorageUnitStatusEntity.RESTORING);  BusinessObjectDataRestoreDto businessObjectDataRestoreDto=new BusinessObjectDataRestoreDto();  businessObjectDataRestoreDto.setBusinessObjectDataKey(businessObjectDataHelper.getBusinessObjectDataKey(businessObjectDataEntity));  businessObjectDataRestoreDto.setOriginStorageName(originStorageUnitEntity.getStorage().getName());  businessObjectDataRestoreDto.setOriginBucketName(originBucketName);  businessObjectDataRestoreDto.setOriginS3KeyPrefix(originS3KeyPrefix);  businessObjectDataRestoreDto.setOriginStorageFiles(originStorageFiles);  businessObjectDataRestoreDto.setNewOriginStorageUnitStatus(newStorageUnitStatusEntity.getCode());  businessObjectDataRestoreDto.setOldOriginStorageUnitStatus(oldOriginStorageUnitStatus);  businessObjectDataRestoreDto.setGlacierStorageName(glacierStorageUnitEntity.getStorage().getName());  businessObjectDataRestoreDto.setGlacierBucketName(glacierBucketName);  businessObjectDataRestoreDto.setGlacierS3KeyBasePrefix(originBucketName);  businessObjectDataRestoreDto.setGlacierS3KeyPrefix(glacierStorageUnitEntity.getDirectoryPath());  return businessObjectDataRestoreDto;}  }
class C{  public void read(byte[] buf) throws IOException {  bfdi.readFully(buf);}  }
class C{  public void searchDuplicates(){  Map<String,Movie> imdbDuplicates=new HashMap<>();  Map<Integer,Movie> tmdbDuplicates=new HashMap<>();  for (  Movie movie : movieList) {    movie.clearDuplicate();    if (StringUtils.isNotEmpty(movie.getImdbId())) {      if (imdbDuplicates.containsKey(movie.getImdbId())) {        movie.setDuplicate();        Movie movie2=imdbDuplicates.get(movie.getImdbId());        movie2.setDuplicate();      } else {        imdbDuplicates.put(movie.getImdbId(),movie);      }    }    if (movie.getTmdbId() > 0) {      if (tmdbDuplicates.containsKey(movie.getTmdbId())) {        movie.setDuplicate();        Movie movie2=tmdbDuplicates.get(movie.getTmdbId());        movie2.setDuplicate();      } else {        tmdbDuplicates.put(movie.getTmdbId(),movie);      }    }  }}  }
class C{  protected void addMessage(final IScope scope,final FIPAMessage message,final IAgent receiver) throws ProtocolErrorException, InvalidConversationException, ConversationFinishedException {  final Conversation msgConv=message.getConversation();  if (msgConv == null || msgConv != this) {    throw new InvalidConversationException(scope,"Conversation is invalid or not specified");  }  if (protocol.hasProtocol()) {    final boolean senderIsInitiator=message.getSender().equals(initiator);    ProtocolNode currentNode;    if (senderIsInitiator) {      if (message.getReceivers().contains(receiver)) {        if (protocolNodeParticipantMap.containsKey(receiver)) {          currentNode=protocolNodeParticipantMap.remove(receiver);          protocolNodeParticipantMap.put(receiver,protocol.getNode(scope,message,currentNode,message.getPerformative(),senderIsInitiator));        } else {          currentNode=protocol.getNode(scope,message,null,message.getPerformative(),senderIsInitiator);          if (currentNode != null) {            protocolNodeParticipantMap.put(receiver,currentNode);          }        }      } else {        throw new CommunicatingException(scope,"Receiver " + receiver.getName() + " is not in the available message's receivers.");      }    } else     if (participants.contains(message.getSender())) {      if (protocolNodeParticipantMap.containsKey(message.getSender())) {        currentNode=protocolNodeParticipantMap.remove(message.getSender());        protocolNodeParticipantMap.put(message.getSender(),protocol.getNode(scope,message,currentNode,message.getPerformative(),senderIsInitiator));      } else {        currentNode=protocol.getNode(scope,message,null,message.getPerformative(),senderIsInitiator);        if (currentNode != null) {          protocolNodeParticipantMap.put(message.getSender(),currentNode);        }      }    }  } else {    final boolean senderIsInitiator=message.getSender().equals(initiator);    FIPAMessage currentMessage;    if (senderIsInitiator) {      currentMessage=noProtocolNodeParticipantMap.get(receiver);      if (currentMessage != null && currentMessage.getPerformative() == FIPAConstants.Performatives.END_CONVERSATION) {        throw new ConversationFinishedException(scope,"Message received in conversation which has already ended." + message + this);      }      if (currentMessage != null) {        noProtocolNodeParticipantMap.remove(receiver);      }      noProtocolNodeParticipantMap.put(receiver,message);    } else     if (participants.contains(message.getSender())) {      currentMessage=noProtocolNodeParticipantMap.get(message.getSender());      if (currentMessage != null && currentMessage.getPerformative() == FIPAConstants.Performatives.END_CONVERSATION) {        throw new ConversationFinishedException(scope,"Message received in conversation which has already ended." + message + this);      }      if (currentMessage != null) {        noProtocolNodeParticipantMap.remove(message.getSender());      }      noProtocolNodeParticipantMap.put(message.getSender(),message);    }  }  messages.add(message);}  }
class C{  public static void createInstructions(final SQLProvider provider,final Iterable<INaviInstruction> instructions) throws SQLException {  Preconditions.checkNotNull(provider,"IE01550: Provider argument can not be null");  Preconditions.checkNotNull(instructions,"IE01554: Instruction argument can not be null");  final String query="INSERT INTO " + CTableNames.INSTRUCTIONS_TABLE + "(module_id, address, mnemonic, data, native, architecture, comment_id) "+ "VALUES(?, ?, ?, ?, ?, ?, ?)";  final PreparedStatement insertStatement=provider.getConnection().getConnection().prepareStatement(query);  final ArrayList<INaviInstruction> instructionsWithUnsavedComments=new ArrayList<INaviInstruction>();  final List<List<COperandTree>> operands=new ArrayList<List<COperandTree>>();  for (  final INaviInstruction instruction : instructions) {    final String mnemonic=instruction.getMnemonic();    final byte[] data=instruction.getData();    operands.add(instruction.getOperands());    final INaviModule module=instruction.getModule();    final IAddress address=instruction.getAddress();    final int moduleID=module.getConfiguration().getId();    final List<IComment> comments=instruction.getGlobalComment();    final Integer commentId=comments == null ? null : comments.size() == 0 ? null : Iterables.getLast(comments).getId();    if ((comments != null) && (comments.size() != 0) && (commentId == null)) {      instructionsWithUnsavedComments.add(instruction);    }    try {      insertStatement.setInt(1,moduleID);      insertStatement.setObject(2,address.toBigInteger(),Types.BIGINT);      insertStatement.setString(3,mnemonic);      insertStatement.setBytes(4,data);      insertStatement.setBoolean(5,false);      insertStatement.setObject(6,instruction.getArchitecture(),Types.OTHER);      if (commentId == null) {        insertStatement.setNull(7,Types.INTEGER);      } else {        insertStatement.setInt(7,commentId);      }      insertStatement.execute();    }  finally {      insertStatement.close();    }  }  for (  final INaviInstruction instruction : instructionsWithUnsavedComments) {    final ArrayList<IComment> instructionComments=new ArrayList<IComment>();    for (    final IComment comment : instruction.getGlobalComment()) {      try {        final Integer commentId=PostgreSQLInstructionFunctions.appendGlobalInstructionComment(provider,instruction,comment.getComment(),comment.getUser().getUserId());        final IComment newComment=new CComment(commentId,comment.getUser(),comment.getParent(),comment.getComment());        instructionComments.add(newComment);      } catch (      final CouldntSaveDataException exception) {        CUtilityFunctions.logException(exception);      }    }    instruction.initializeGlobalComment(instructionComments);  }  for (  final List<COperandTree> operand : operands) {    int position=0;    for (    final COperandTree operandTree : operand) {      createOperandTree(provider,operandTree,position);      position++;    }  }}  }
class C{  public synchronized void begin(E selectedObject){  this.active=true;  this.selectedObject=selectedObject;}  }
class C{  public OMRect(double lt1,double ln1,double lt2,double ln2,int lType){  this(lt1,ln1,lt2,ln2,lType,-1);}  }
class C{  public String globalInfo(){  return " Meta classifier that enhances the performance of a regression " + "base classifier. Each iteration fits a model to the residuals left " + "by the classifier on the previous iteration. Prediction is "+ "accomplished by adding the predictions of each classifier. "+ "Reducing the shrinkage (learning rate) parameter helps prevent "+ "overfitting and has a smoothing effect but increases the learning "+ "time.\n\n"+ "For more information see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  protected void write(DataOutputStream stream) throws Exception {}  }
class C{  private void startList(boolean isOrderedList,Attributes attributes){  boolean isIndentation=isIndentation(attributes);  ParagraphType newType=isIndentation && isOrderedList ? ParagraphType.INDENTATION_OL : isIndentation && !isOrderedList ? ParagraphType.INDENTATION_UL : isOrderedList ? ParagraphType.NUMBERING : ParagraphType.BULLET;  AccumulatedParagraphStyle currentStyle=mParagraphStyles.isEmpty() ? null : mParagraphStyles.peek();  if (currentStyle == null) {    AccumulatedParagraphStyle newStyle=new AccumulatedParagraphStyle(newType,1,1);    mParagraphStyles.push(newStyle);  } else   if (currentStyle.getType() == newType) {    currentStyle.setAbsoluteIndent(currentStyle.getAbsoluteIndent() + 1);    currentStyle.setRelativeIndent(currentStyle.getRelativeIndent() + 1);  } else {    AccumulatedParagraphStyle newStyle=new AccumulatedParagraphStyle(newType,currentStyle.getAbsoluteIndent() + 1,1);    mParagraphStyles.push(newStyle);  }}  }
class C{  public static String keyHash(Struct sct){  Key[] keys;  Arrays.sort(keys=CollectionUtil.keys(sct));  StringBuilder sb=new StringBuilder();  for (int i=0; i < keys.length; i++) {    sb.append(keys[i].getString()).append(';');  }  return Long.toString(HashUtil.create64BitHash(sb),Character.MAX_RADIX);}  }
class C{  private void createTriggerData(final boolean createTriggerProcessIds,final TriggerType triggerType) throws Exception {  PlatformUser triggerUser=supplierUser;  Organization triggerOrg=supplier;  TriggerDefinition td=TriggerDefinitions.createSuspendingTriggerDefinition(ds,triggerOrg,triggerType);  tp=TriggerProcesses.createPendingTriggerProcess(ds,triggerUser,td);  tp.addTriggerProcessParameter(TriggerProcessParameterName.USER,user);  triggerProcessData=new TriggerProcessMessageData(tp,new TriggerMessage());  if (createTriggerProcessIds) {    createTriggerIds(tp);  }}  }
class C{  public static void assertEquals(String message,String expected,String actual){  Assert.assertEquals(message,expected,actual);}  }
class C{  public double optimize(UnivariateFunction f,double tol){  return optimize(f,tol,f.getLowerBound(),f.getUpperBound());}  }
class C{  public void restoreMinimizedApplication(){  getImplementation().restoreMinimizedApplication();}  }
class C{  public void testEncryptDecryptGood3() throws Exception {  KeyCrypterOpenSSL encrypterDecrypter=new KeyCrypterOpenSSL();  int numberOfTests=100;  System.out.print("EncrypterDecrypterTest: Trying random UUIDs for plainText and passwords :");  for (int i=0; i < numberOfTests; i++) {    String plainText=UUID.randomUUID().toString();    String password=UUID.randomUUID().toString();    String cipherText=encrypterDecrypter.encrypt(plainText,password);    assertNotNull(cipherText);    String reconstructedPlainText=encrypterDecrypter.decrypt(cipherText,password);    assertEquals(plainText,reconstructedPlainText);    System.out.print('.');  }  System.out.println(" Done.");}  }
class C{  private int[] createEqualPartition(double[] ratio,int size,Attribute label){  List<ExampleIndex> examples=new ArrayList<ExampleIndex>(size);  Iterator<Example> reader=exampleSet.iterator();  int index=0;  while (reader.hasNext()) {    Example example=reader.next();    examples.add(new ExampleIndex(index++,example.getNominalValue(label)));  }  Collections.shuffle(examples,random);  Collections.sort(examples);  List<ExampleIndex> newExamples=new ArrayList<ExampleIndex>(size);  int start=0;  int numberOfPartitions=ratio.length;  while (newExamples.size() < size) {    for (int i=start; i < examples.size(); i+=numberOfPartitions) {      newExamples.add(examples.get(i));    }    start++;  }  int[] startNewP=new int[ratio.length + 1];  startNewP[0]=0;  double ratioSum=0;  for (int i=1; i < startNewP.length; i++) {    ratioSum+=ratio[i - 1];    startNewP[i]=(int)Math.round(newExamples.size() * ratioSum);  }  int[] part=new int[newExamples.size()];  int p=0;  int counter=0;  Iterator<ExampleIndex> n=newExamples.iterator();  while (n.hasNext()) {    if (counter >= startNewP[p + 1]) {      p++;    }    ExampleIndex exampleIndex=n.next();    part[exampleIndex.exampleIndex]=p;    counter++;  }  return part;}  }
class C{  public void finished(long chainLength){  currentState=chainLength;  if (loggers != null) {    for (    Logger logger : loggers) {      logger.log(currentState);      logger.stopLogging();    }  }  if (showOperatorAnalysis) {    showOperatorAnalysis(System.out);  }  if (operatorAnalysisFile != null) {    try {      PrintStream out=new PrintStream(new FileOutputStream(operatorAnalysisFile));      showOperatorAnalysis(out);      out.flush();      out.close();    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:18.776 -0500",hash_original_method="D8B8577219277F33EAE3DA6AB88F25AB",hash_generated_method="E8E2B6FBE224BAA7C30E7FAF5E2CD4A6") public int nextInt(){  int ret=0;  nextTok();  for (int i=tokStart; i < tokEnd; i++) {    char c=line.charAt(i);    if (c < '0' || c > '9') {      throw new ATParseEx();    }    ret*=10;    ret+=c - '0';  }  return ret;}  }
class C{  @RequestMapping(value="/users/{login:[_'.@a-z0-9-]+}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @Secured(AuthoritiesConstants.ADMIN) public ResponseEntity<Void> deleteUser(@PathVariable String login){  log.debug("REST request to delete User: {}",login);  userService.deleteUserInformation(login);  return ResponseEntity.ok().headers(HeaderUtil.createAlert("userManagement.deleted",login)).build();}  }
class C{  public void reset(){  pageHeader.reset();  headerArray.reset();  currentSegmentIndex=-1;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TYPE_VARIABLE__DECLARED_COVARIANT:    return declaredCovariant != DECLARED_COVARIANT_EDEFAULT;case TypesPackage.TYPE_VARIABLE__DECLARED_CONTRAVARIANT:  return declaredContravariant != DECLARED_CONTRAVARIANT_EDEFAULT;case TypesPackage.TYPE_VARIABLE__DECLARED_UPPER_BOUND:return declaredUpperBound != null;}return super.eIsSet(featureID);}  }
class C{  public FileObject write(ClassSymbol c) throws IOException {  String className=c.flatName().toString();  FileObject outFile=fileManager.getFileForOutput(StandardLocation.NATIVE_HEADER_OUTPUT,"",className.replaceAll("[.$]","_") + ".h",null);  Writer out=outFile.openWriter();  try {    write(out,c);    if (verbose)     log.printVerbose("wrote.file",outFile);    out.close();    out=null;  }  finally {    if (out != null) {      out.close();      outFile.delete();      outFile=null;    }  }  return outFile;}  }
class C{  public static long[] transformLongArray(Long[] source){  long[] destin=new long[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public void unpublishMedia(String participantId) throws RoomException {  log.debug("Request [UNPUBLISH_MEDIA] ({})",participantId);  Participant participant=getParticipant(participantId);  if (!participant.isStreaming()) {    throw new RoomException(Code.USER_NOT_STREAMING_ERROR_CODE,"Participant '" + participant.getName() + "' is not streaming media");  }  Room room=participant.getRoom();  participant.unpublishMedia();  room.cancelPublisher(participant);}  }
class C{  public void testAuditSite(){  System.out.println("auditSite");  String siteUrl="http://My.testUrl.org";  Set<Parameter> paramSet=null;  AuditServiceImpl instance=initialiseAuditService();  Audit auditCreateByAuditCommand=EasyMock.createMock(Audit.class);  AuditCommand mockAuditCommand=EasyMock.createMock(AuditCommand.class);  EasyMock.expect(mockAuditCommand.getAudit()).andReturn(auditCreateByAuditCommand).anyTimes();  EasyMock.replay(mockAuditCommand);  AuditCommandFactory mockAuditCommandFactory=EasyMock.createMock(AuditCommandFactory.class);  EasyMock.expect(mockAuditCommandFactory.create(siteUrl,paramSet,true)).andReturn(mockAuditCommand).anyTimes();  EasyMock.replay(mockAuditCommandFactory);  instance.setAuditCommandFactory(mockAuditCommandFactory);  AuditServiceThreadQueue mockAuditServiceThreadQueue=EasyMock.createMock(AuditServiceThreadQueue.class);  mockAuditServiceThreadQueue.add(instance);  EasyMock.expectLastCall().anyTimes();  mockAuditServiceThreadQueue.addSiteAudit(mockAuditCommand);  EasyMock.expectLastCall().anyTimes();  EasyMock.replay(mockAuditServiceThreadQueue);  instance.setAuditServiceThreadQueue(mockAuditServiceThreadQueue);  Audit result=instance.auditSite(siteUrl,paramSet);  assertEquals(auditCreateByAuditCommand,result);  EasyMock.verify(mockAuditServiceThreadQueue);  EasyMock.verify(mockAuditCommand);  EasyMock.verify(mockAuditCommandFactory);}  }
class C{  @Override public void dispose(){}  }
class C{  public Identifiability(BayesIm bayesIm){  this(bayesIm,Evidence.tautology(bayesIm));}  }
class C{  static void sort(short[] a,int left,int right,short[] work,int workBase,int workLen){  if (right - left > COUNTING_SORT_THRESHOLD_FOR_SHORT_OR_CHAR) {    int[] count=new int[NUM_SHORT_VALUES];    for (int i=left - 1; ++i <= right; count[a[i] - Short.MIN_VALUE]++)     ;    for (int i=NUM_SHORT_VALUES, k=right + 1; k > left; ) {      while (count[--i] == 0)       ;      short value=(short)(i + Short.MIN_VALUE);      int s=count[i];      do {        a[--k]=value;      } while (--s > 0);    }  } else {    doSort(a,left,right,work,workBase,workLen);  }}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  propertyChangeSupport.addPropertyChangeListener(listener);}  }
class C{  public DateTimeFormatterBuilder appendDecimal(DateTimeFieldType fieldType,int minDigits,int maxDigits){  if (fieldType == null) {    throw new IllegalArgumentException("Field type must not be null");  }  if (maxDigits < minDigits) {    maxDigits=minDigits;  }  if (minDigits < 0 || maxDigits <= 0) {    throw new IllegalArgumentException();  }  if (minDigits <= 1) {    return append0(new UnpaddedNumber(fieldType,maxDigits,false));  } else {    return append0(new PaddedNumber(fieldType,maxDigits,false,minDigits));  }}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    int selectedIndex;    Rectangle visible=new Rectangle();    target.computeVisibleRect(visible);    if (left) {      visible.x=Math.max(0,visible.x - visible.width);    } else {      visible.x+=visible.width;    }    selectedIndex=target.getCaretPosition();    if (selectedIndex != -1) {      if (left) {        selectedIndex=target.viewToModel(new Point(visible.x,visible.y));      } else {        selectedIndex=target.viewToModel(new Point(visible.x + visible.width - 1,visible.y + visible.height - 1));      }      Document doc=target.getDocument();      if ((selectedIndex != 0) && (selectedIndex > (doc.getLength() - 1))) {        selectedIndex=doc.getLength() - 1;      } else       if (selectedIndex < 0) {        selectedIndex=0;      }      if (select)       target.moveCaretPosition(selectedIndex); else       target.setCaretPosition(selectedIndex);    }  }}  }
class C{  private boolean isClosed(){  return buf == null;}  }
class C{  private static String readLinkImpl(long handle) throws IOException {  int size=MAXIMUM_REPARSE_DATA_BUFFER_SIZE;  NativeBuffer buffer=NativeBuffers.getNativeBuffer(size);  try {    try {      DeviceIoControlGetReparsePoint(handle,buffer.address(),size);    } catch (    WindowsException x) {      if (x.lastError() == ERROR_NOT_A_REPARSE_POINT)       throw new NotLinkException(null,null,x.errorString());      x.rethrowAsIOException((String)null);    }    final short OFFSETOF_REPARSETAG=0;    final short OFFSETOF_PATHOFFSET=8;    final short OFFSETOF_PATHLENGTH=10;    final short OFFSETOF_PATHBUFFER=16 + 4;    int tag=(int)unsafe.getLong(buffer.address() + OFFSETOF_REPARSETAG);    if (tag != IO_REPARSE_TAG_SYMLINK) {      throw new NotLinkException(null,null,"Reparse point is not a symbolic link");    }    short nameOffset=unsafe.getShort(buffer.address() + OFFSETOF_PATHOFFSET);    short nameLengthInBytes=unsafe.getShort(buffer.address() + OFFSETOF_PATHLENGTH);    if ((nameLengthInBytes % 2) != 0)     throw new FileSystemException(null,null,"Symbolic link corrupted");    char[] name=new char[nameLengthInBytes / 2];    unsafe.copyMemory(null,buffer.address() + OFFSETOF_PATHBUFFER + nameOffset,name,Unsafe.ARRAY_CHAR_BASE_OFFSET,nameLengthInBytes);    String target=stripPrefix(new String(name));    if (target.length() == 0) {      throw new IOException("Symbolic link target is invalid");    }    return target;  }  finally {    buffer.release();  }}  }
class C{  public void stateChanged(ChangeEvent e){  int index=tabbedPane.getSelectedIndex();  m_selectionActive=(index == 0);}  }
class C{  public static NumericJavaFXBidirectionaBinder<Float> bind(FloatProperty property){  requireNonNull(property,"property");  return new FloatJavaFXBidirectionalBinder(property);}  }
class C{  private boolean checkAccount() throws IOException, RcsAccountException {  AndroidFactory.setApplicationContext(mCtx,mRcsSettings);  mCurrentUserAccount=LauncherUtils.getCurrentUserAccount(mCtx);  mLastUserAccount=LauncherUtils.getLastUserAccount(mCtx);  boolean logActivated=sLogger.isActivated();  if (logActivated) {    sLogger.info("Last user account is " + mLastUserAccount);    sLogger.info("Current user account is " + mCurrentUserAccount);  }  if (mCurrentUserAccount == null) {    if (isFirstLaunch()) {      return false;    }    mCurrentUserAccount=mLastUserAccount;  }  if (isFirstLaunch()) {    setNewUserAccount(true);  } else   if (hasChangedAccount()) {    UserProfilePersistedStorageUtil.normalizeFileBackup(mCurrentUserAccount);    if (mLastUserAccount != null) {      if (logActivated) {        sLogger.info("Backup ".concat(mLastUserAccount));      }      UserProfilePersistedStorageUtil.tryToBackupAccount(mLastUserAccount);    }    LauncherUtils.resetRcsConfig(mCtx,mLocalContentResolver,mRcsSettings,mMessagingLog,mContactManager);    Configuration config=mCtx.getResources().getConfiguration();    mRcsSettings.setMobileNetworkCode(config.mnc);    mRcsSettings.setMobileCountryCode(config.mcc);    if (logActivated) {      sLogger.info("Restore ".concat(mCurrentUserAccount));    }    UserProfilePersistedStorageUtil.tryToRestoreAccount(mCurrentUserAccount);    IntentUtils.sendBroadcastEvent(mCtx,RcsService.ACTION_SERVICE_PROVISIONING_DATA_CHANGED);    mRcsSettings.setServiceActivationState(true);    setNewUserAccount(true);  } else {    setNewUserAccount(false);  }  Account account=mAccountUtility.getAccount(mRcsAccountUsername);  if (account == null) {    if (logActivated) {      sLogger.debug("The RCS account does not exist");    }    if (AccountChangedReceiver.isAccountResetByEndUser()) {      if (logActivated) {        sLogger.debug("It was manually destroyed by the user, we do not recreate it");      }      return false;    }  } else   if (hasChangedAccount()) {    if (logActivated) {      sLogger.debug("Deleting the old RCS account for " + mLastUserAccount);    }    mContactManager.deleteRCSEntries();    mAccountUtility.removeRcsAccount(null);  }  LauncherUtils.setLastUserAccount(mCtx,mCurrentUserAccount);  return true;}  }
class C{  public static ColumnSpec decode(String encodedColumnSpec){  return decode(encodedColumnSpec,LayoutMap.getRoot());}  }
class C{  void takeIndexWrapped(){  cycles++;  for (Node o=null, p=head; p != null; ) {    final Itr it=p.get();    final Node next=p.next;    if (it == null || it.takeIndexWrapped()) {      p.clear();      p.next=null;      if (o == null)       head=next; else       o.next=next;    } else {      o=p;    }    p=next;  }  if (head == null)   itrs=null;}  }
class C{  public IntentFilter(String action){  mPriority=0;  mActions=new ArrayList<String>();  addAction(action);}  }
class C{  public static Component findByName(String componentName){  if (verbose) {    log("findByName(" + componentName + ")");  }  Component c=findByName(Display.getInstance().getCurrent(),componentName);  if (c == null) {    waitFor(30);    return findByName(Display.getInstance().getCurrent(),componentName);  }  return c;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS12.class,args);}  }
class C{  public static void main(String[] args) throws Exception {  long start=System.nanoTime();  RepositoryManager repositoryManager=CeylonUtils.repoManager().systemRepo("../dist/dist/repo").outRepo("test/modules").logger(new LeakingLogger()).buildManager();  TypeChecker typeChecker=new TypeCheckerBuilder().statistics(true).verbose(false).addSrcDirectory(new File("test/main")).setRepositoryManager(repositoryManager).getTypeChecker();  typeChecker.process();  int errors=typeChecker.getErrors();  Tree.CompilationUnit compilationUnit=typeChecker.getPhasedUnitFromRelativePath("ceylon/language/Object.ceylon").getCompilationUnit();  if (compilationUnit == null) {    throw new RuntimeException("Failed to pass getCompilationUnitFromRelativePath for files in .src");  }  compilationUnit=typeChecker.getPhasedUnitFromRelativePath("capture/Capture.ceylon").getCompilationUnit();  if (compilationUnit == null) {    throw new RuntimeException("Failed to pass getCompilationUnitFromRelativePath for files in real src dir");  }  compilationUnit=typeChecker.getPhasedUnitFromRelativePath("com/redhat/sample/multisource/Boo.ceylon").getCompilationUnit();  Module module=compilationUnit.getUnit().getPackage().getModule();  if (!"com.redhat.sample.multisource".equals(module.getNameAsString())) {    throw new RuntimeException("Unable to extract module name");  }  if (!"0.2".equals(module.getVersion())) {    throw new RuntimeException("Unable to extract module version");  }  typeChecker=new TypeCheckerBuilder().verbose(false).addSrcDirectory(new File("test/main/capture")).setRepositoryManager(repositoryManager).getTypeChecker();  typeChecker.process();  errors+=typeChecker.getErrors();  compilationUnit=typeChecker.getPhasedUnitFromRelativePath("Capture.ceylon").getCompilationUnit();  if (compilationUnit == null) {    throw new RuntimeException("Failed to pass getCompilationUnitFromRelativePath for top level files (no package) in real src dir");  }  typeChecker=new TypeCheckerBuilder().verbose(false).addSrcDirectory(new File("test/moduledep1")).addSrcDirectory(new File("test/moduledep2")).addSrcDirectory(new File("test/moduletest")).setRepositoryManager(repositoryManager).getTypeChecker();  typeChecker.process();  errors+=typeChecker.getErrors();  ClosableVirtualFile latestZippedLanguageSourceFile=MainHelper.getLatestZippedLanguageSourceFile();  typeChecker=new TypeCheckerBuilder().verbose(false).addSrcDirectory(latestZippedLanguageSourceFile).setRepositoryManager(repositoryManager).getTypeChecker();  typeChecker.process();  errors+=typeChecker.getErrors();  latestZippedLanguageSourceFile.close();  System.out.println("Tests took " + ((System.nanoTime() - start) / 1000000) + " ms");  if (errors > 0) {    System.exit(1);  }}  }
class C{  protected static String toHitIsImpossible(IGame game,Entity ae,Targetable target,int arm){  String physicalImpossible=PhysicalAttackAction.toHitIsImpossible(game,ae,target);  if (physicalImpossible != null) {    return physicalImpossible;  }  IHex attHex=game.getBoard().getHex(ae.getPosition());  IHex targHex=game.getBoard().getHex(target.getPosition());  int attackerElevation=attHex.getLevel();  int attackerHeight=ae.relHeight() + attackerElevation;  if (ae.isHullDown()) {    attackerHeight--;  }  final int targetElevation=target.getElevation() + targHex.getLevel();  final int targetHeight=targetElevation + target.getHeight();  final int armLoc=(arm == PunchAttackAction.RIGHT) ? Mech.LOC_RARM : Mech.LOC_LARM;  if (((ae.getGrappled() != Entity.NONE) && (((ae.getGrappleSide() == Entity.GRAPPLE_LEFT) && (arm == Mech.LOC_LARM)))) || ((ae.getGrappleSide() == Entity.GRAPPLE_RIGHT) && (arm == Mech.LOC_RARM))) {    return "grappled with punching arm";  }  if ((ae instanceof Mech) && ((Mech)ae).hasExtendedRetractableBlade()) {    return "Extended retractable blade";  }  if (!(ae instanceof Mech)) {    return "Non-mechs can't punch";  }  if (ae.entityIsQuad()) {    return "Attacker is a quad";  }  if (ae.getArmsFlipped()) {    return "Arms are flipped to the rear. Can not punch.";  }  if (ae.isLocationBad(armLoc)) {    return "Arm missing";  }  if (ae.hasQuirk(OptionsConstants.QUIRK_NEG_NO_ARMS)) {    return "No/minimal arms";  }  if (!ae.hasWorkingSystem(Mech.ACTUATOR_SHOULDER,armLoc)) {    return "Shoulder destroyed";  }  if (ae.weaponFiredFrom(armLoc)) {    return "Weapons fired from arm this turn";  }  if (target.isAirborneVTOLorWIGE()) {    if (((targetElevation - attackerElevation) > 2) || ((targetElevation - attackerElevation) < 1)) {      return "Target elevation not in range";    }  } else   if ((attackerHeight < targetElevation) || (attackerHeight > targetHeight)) {    return "Target elevation not in range";  }  if (ae.hasActiveShield(armLoc)) {    return "Cannot punch with shield in active mode";  }  return null;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof XYSeries)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  XYSeries that=(XYSeries)obj;  if (this.maximumItemCount != that.maximumItemCount) {    return false;  }  if (this.autoSort != that.autoSort) {    return false;  }  if (this.allowDuplicateXValues != that.allowDuplicateXValues) {    return false;  }  if (!ObjectUtilities.equal(this.data,that.data)) {    return false;  }  return true;}  }
class C{  public void clearCQRouting(){  this.cqs=null;}  }
class C{  protected void sequence_PropertyNameValuePairSingleName(ISerializationContext context,PropertyNameValuePairSingleName semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  ZoneOffsetTransition(long epochSecond,ZoneOffset offsetBefore,ZoneOffset offsetAfter){  this.transition=LocalDateTime.ofEpochSecond(epochSecond,0,offsetBefore);  this.offsetBefore=offsetBefore;  this.offsetAfter=offsetAfter;}  }
class C{  public void destroyVirtualVolume(String virtualVolumeName) throws VPlexApiException {  s_logger.info("Request for virtual volume destroy on VPlex at {}",_baseURI);  _virtualVolumeMgr.destroyVirtualVolume(virtualVolumeName);}  }
class C{  public Doctype addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public DefaultListModel(Vector<T> items){  this.items=new ArrayList(items);}  }
class C{  public final void decreaseScheduledWriteMessages(){  throughputCalculationLock.lock();  try {    scheduledWriteMessages--;  }  finally {    throughputCalculationLock.unlock();  }}  }
class C{  public NormalBoundaryIntersectionGenerator(int numberOfObjectives,int divisionsOuter,int divisionsInner){  super();  this.numberOfObjectives=numberOfObjectives;  this.divisionsOuter=divisionsOuter;  this.divisionsInner=divisionsInner;}  }
class C{  @PostConstruct public void init() throws ConfigException, IOException {  if (!_isSkipInit) {    super.init();    initImpl();  }}  }
class C{  public void parseFragment(InputSource input,String context) throws IOException, SAXException {  lazyInit();  try {    treeBuilder.setFragmentContext(context.intern());    tokenize(input);  }  finally {    if (saxTreeBuilder != null) {      DocumentFragment fragment=saxTreeBuilder.getDocumentFragment();      new TreeParser(contentHandler,lexicalHandler).parse(fragment);    }  }}  }
class C{  public void append(final StringBuffer buffer,final String fieldName,final int value){  appendFieldStart(buffer,fieldName);  appendDetail(buffer,fieldName,value);  appendFieldEnd(buffer,fieldName);}  }
class C{  public boolean match(T value,boolean blacklist){  if (rules == null) {    return blacklist;  }  boolean include=blacklist;  if (include) {    include=processExcludes(value,true);    include=processIncludes(value,include);  } else {    include=processIncludes(value,false);    include=processExcludes(value,include);  }  return include;}  }
class C{  public Set<E> keySet(){  return entries.keySet();}  }
class C{  public void doFilter(HttpExchange t,Filter.Chain chain) throws IOException {  chain.doFilter(t);  HttpContext context=t.getHttpContext();  Headers rmap=t.getRequestHeaders();  String s=df.format(new Date());  s=s + " " + t.getRequestMethod()+ " "+ t.getRequestURI()+ " ";  s=s + " " + t.getResponseCode()+ " "+ t.getRemoteAddress();  ps.println(s);}  }
class C{  public CapabilityResponse(Set<String> capabilities){  super();  this.capabilities=capabilities;}  }
class C{  private boolean cmd_select(){  log.config("");  int M_Warehouse_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNoParent,"M_Warehouse_ID");  int C_DocType_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNoParent,"C_DocType_ID");  if (C_DocType_ID > 0) {    MDocType doctype=new MDocType(Env.getCtx(),C_DocType_ID,null);    String docbase=doctype.getDocBaseType();    if (docbase.equals(MDocType.DOCBASETYPE_MaterialReceipt) || docbase.equals(MDocType.DOCBASETYPE_MaterialPhysicalInventory))     M_Warehouse_ID=0;  }  int M_Locator_ID=0;  M_Locator_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNoParent,X_M_MovementLine.COLUMNNAME_M_Locator_ID,true);  String title="";  String sql="SELECT p.Name, w.Name, w.M_Warehouse_ID FROM M_Product p, M_Warehouse w " + "WHERE p.M_Product_ID=? AND w.M_Warehouse_ID" + (M_Locator_ID <= 0 ? "=?" : " IN (SELECT M_Warehouse_ID FROM M_Locator where M_Locator_ID=?)");  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_M_Product_ID);    pstmt.setInt(2,M_Locator_ID <= 0 ? M_Warehouse_ID : M_Locator_ID);    rs=pstmt.executeQuery();    if (rs.next()) {      title=": " + rs.getString(1) + " - "+ rs.getString(2);      M_Warehouse_ID=rs.getInt(3);    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  PAttributeInstance pai=new PAttributeInstance(this,title,M_Warehouse_ID,M_Locator_ID,m_M_Product_ID,m_C_BPartner_ID);  if (m_M_AttributeSetInstance_ID != pai.getM_AttributeSetInstance_ID() || !(m_M_AttributeSetInstance_ID == 0 && pai.getM_AttributeSetInstance_ID() == -1)) {    m_changed=true;    if (pai.getM_AttributeSetInstance_ID() != -1) {      m_M_AttributeSetInstance_ID=pai.getM_AttributeSetInstance_ID();      m_M_AttributeSetInstanceName=pai.getM_AttributeSetInstanceName();      m_M_Locator_ID=pai.getM_Locator_ID();    } else {      m_M_AttributeSetInstance_ID=0;      m_M_AttributeSetInstanceName="";    }  }  return m_changed;}  }
class C{  public static TypedRegion[] computePartitioning(Document document,String partitioning,int offset,int length,boolean includeZeroLengthPartitions) throws BadLocationException {  try {    return document.computePartitioning(partitioning,offset,length,includeZeroLengthPartitions);  } catch (  BadPartitioningException x) {    return new TypedRegion[0];  }}  }
class C{  public boolean isPatternEverChosen(){  return getBoolean(PATTERN_EVER_CHOSEN_KEY,false);}  }
class C{  public Minutes plus(Minutes minutes){  if (minutes == null) {    return this;  }  return plus(minutes.getValue());}  }
class C{  private int constrainY(JTextComponent target,int y,int vis){  if (y < 0) {    y=0;  } else   if (y + vis > target.getHeight()) {    y=Math.max(0,target.getHeight() - vis);  }  return y;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public AbstractReadWriteLockManager(){  this(false);}  }
class C{  public void addLong(int o,long x,long d){  if (force_defaults || x != d) {    addLong(x);    slot(o);  }}  }
class C{  public SFTPv3FileAttributes fstat(SFTPv3FileHandle handle) throws IOException {  checkHandleValidAndOpen(handle);  int req_id=generateNextRequestID();  TypesWriter tw=new TypesWriter();  tw.writeString(handle.fileHandle,0,handle.fileHandle.length);  if (debug != null) {    debug.println("Sending SSH_FXP_FSTAT...");    debug.flush();  }  sendMessage(Packet.SSH_FXP_FSTAT,req_id,tw.getBytes());  byte[] resp=receiveMessage(34000);  if (debug != null) {    debug.println("Got REPLY.");    debug.flush();  }  TypesReader tr=new TypesReader(resp);  int t=tr.readByte();  int rep_id=tr.readUINT32();  if (rep_id != req_id)   throw new IOException("The server sent an invalid id field.");  if (t == Packet.SSH_FXP_ATTRS) {    return readAttrs(tr);  }  if (t != Packet.SSH_FXP_STATUS)   throw new IOException("The SFTP server sent an unexpected packet type (" + t + ")");  int errorCode=tr.readUINT32();  throw new SFTPException(tr.readString(),errorCode);}  }
class C{  private static <T>T cast(Class<T> clazz,Object o){  if (!clazz.isInstance(o))   throw new IllegalArgumentException(o.toString());  return clazz.cast(o);}  }
class C{  public final void headTo(IMovingAgent agent){  headTo(agent.getLocation());}  }
class C{  @SuppressWarnings("unchecked") @Override public void prepare(){  LOGGER.debug("Entered into the prepare method");  if (getModelId() != null && !getModelId().isEmpty()) {    property=(PropertyImpl)getPersistenceService().findByNamedQuery(QUERY_PROPERTYIMPL_BYID,Long.valueOf(getModelId()));    LOGGER.debug("prepare: Property: " + property);  }  if (indexNumber != null && !"".equals(indexNumber)) {    basicProp=basicPropertyService.findByNamedQuery(PropertyTaxConstants.QUERY_BASICPROPERTY_BY_UPICNO,indexNumber);    LOGGER.debug("prepare: BasicProperty: " + basicProp);  }  List<PropertyMutationMaster> propMutationMstr=propertyMutationMasterDAO.getAllPropertyMutationMastersByType(PROP_STATUS_TYPE_DEACT);  addDropdownData("Reason",propMutationMstr);  setupWorkflowDetails();  setUserInfo();  LOGGER.debug("Exit from prepare method");}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TANNOTATION;}  }
class C{  public <T>T createDto(Class<T> dtoInterface){  return getDtoProvider(dtoInterface).newInstance();}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.legendLine=SerialUtilities.readShape(stream);}  }
class C{  public static boolean equals(boolean[] array1,boolean[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public final String toString(){  String out=null;  try {    ByteArrayOutputStream baos=new ByteArrayOutputStream();    BufferedOutputStream bos=new BufferedOutputStream(baos);    output(bos);    bos.flush();    if (getCodeSet() != null) {      out=baos.toString(getCodeSet());    } else {      out=baos.toString();    }    bos.close();    baos.close();  } catch (  IOException ioe) {  }  return (out);}  }
class C{  public static boolean isActive(DataObjectRestRep value){  return (value != null) && !Boolean.TRUE.equals(value.getInactive());}  }
class C{  public PutIndexTemplateRequest mapping(String type,String source){  mappings.put(type,source);  return this;}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public void testBug27400() throws Exception {  if (!serverSupportsStoredProcedures()) {    return;  }  createProcedure("testBug27400","(a INT, b VARCHAR(32)) BEGIN SELECT 1; END");  CallableStatement cStmt=null;  try {    cStmt=this.conn.prepareCall("{CALL /* SOME COMMENT */ testBug27400( /* does this work too? */ ?, ?)} # and a commented ? here too");    assertTrue(cStmt.toString().indexOf("/*") != -1);    cStmt.setInt(1,1);    cStmt.setString(2,"bleh");    cStmt.execute();  }  finally {    if (cStmt != null) {      cStmt.close();    }  }}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.ITERATION_STATEMENT__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public boolean isEmpty(){  return root.isEmpty();}  }
class C{  public static byte[] toByteArray(URI uri) throws IOException {  return IOUtils.toByteArray(uri.toURL());}  }
class C{  public void testGeo3DRelations() throws Exception {  int numDocs=atLeast(1000);  if (VERBOSE) {    System.out.println("TEST: " + numDocs + " docs");  }  GeoPoint[] docs=new GeoPoint[numDocs];  GeoPoint[] unquantizedDocs=new GeoPoint[numDocs];  for (int docID=0; docID < numDocs; docID++) {    unquantizedDocs[docID]=new GeoPoint(PlanetModel.WGS84,toRadians(GeoTestUtil.nextLatitude()),toRadians(GeoTestUtil.nextLongitude()));    docs[docID]=quantize(unquantizedDocs[docID]);    if (VERBOSE) {      System.out.println("  doc=" + docID + ": "+ docs[docID]+ "; unquantized: "+ unquantizedDocs[docID]);    }  }  int iters=atLeast(10);  int recurseDepth=RandomNumbers.randomIntBetween(random(),5,15);  iters=atLeast(50);  for (int iter=0; iter < iters; iter++) {    GeoShape shape=randomShape();    StringWriter sw=new StringWriter();    PrintWriter log=new PrintWriter(sw,true);    if (VERBOSE) {      log.println("TEST: iter=" + iter + " shape="+ shape);    }    XYZBounds bounds=new XYZBounds();    shape.getBounds(bounds);    Cell root=new Cell(null,encodeValueLenient(bounds.getMinimumX()),encodeValueLenient(bounds.getMaximumX()),encodeValueLenient(bounds.getMinimumY()),encodeValueLenient(bounds.getMaximumY()),encodeValueLenient(bounds.getMinimumZ()),encodeValueLenient(bounds.getMaximumZ()),0);    if (VERBOSE) {      log.println("  root cell: " + root);    }{      boolean fail=false;      for (int docID=0; docID < numDocs; docID++) {        if (root.contains(docs[docID]) == false) {          boolean expected=shape.isWithin(unquantizedDocs[docID]);          if (expected) {            log.println("    doc=" + docID + " is contained by shape but is outside the returned XYZBounds");            log.println("      unquantized=" + unquantizedDocs[docID]);            log.println("      quantized=" + docs[docID]);            fail=true;          }        }      }      if (fail) {        log.println("  shape=" + shape);        log.println("  bounds=" + bounds);        System.out.print(sw.toString());        fail("invalid bounds for shape=" + shape);      }    }    List<Cell> queue=new ArrayList<>();    queue.add(root);    Set<Integer> hits=new HashSet<>();    while (queue.size() > 0) {      Cell cell=queue.get(queue.size() - 1);      queue.remove(queue.size() - 1);      if (VERBOSE) {        log.println("  cycle: " + cell + " queue.size()="+ queue.size());      }      if (random().nextInt(10) == 7 || cell.splitCount > recurseDepth) {        if (VERBOSE) {          log.println("    leaf");        }        for (int docID=0; docID < numDocs; docID++) {          GeoPoint point=docs[docID];          GeoPoint mappedPoint=unquantizedDocs[docID];          boolean pointWithinShape=shape.isWithin(point);          boolean mappedPointWithinShape=shape.isWithin(mappedPoint);          if (cell.contains(point)) {            if (mappedPointWithinShape) {              if (VERBOSE) {                log.println("    check doc=" + docID + ": match!  Actual quantized point within: "+ pointWithinShape);              }              hits.add(docID);            } else {              if (VERBOSE) {                log.println("    check doc=" + docID + ": no match.  Quantized point within: "+ pointWithinShape);              }            }          }        }      } else {        GeoArea xyzSolid=GeoAreaFactory.makeGeoArea(PlanetModel.WGS84,Geo3DUtil.decodeValueFloor(cell.xMinEnc),Geo3DUtil.decodeValueCeil(cell.xMaxEnc),Geo3DUtil.decodeValueFloor(cell.yMinEnc),Geo3DUtil.decodeValueCeil(cell.yMaxEnc),Geo3DUtil.decodeValueFloor(cell.zMinEnc),Geo3DUtil.decodeValueCeil(cell.zMaxEnc));        if (VERBOSE) {          log.println("    minx=" + Geo3DUtil.decodeValueFloor(cell.xMinEnc) + " maxx="+ Geo3DUtil.decodeValueCeil(cell.xMaxEnc)+ " miny="+ Geo3DUtil.decodeValueFloor(cell.yMinEnc)+ " maxy="+ Geo3DUtil.decodeValueCeil(cell.yMaxEnc)+ " minz="+ Geo3DUtil.decodeValueFloor(cell.zMinEnc)+ " maxz="+ Geo3DUtil.decodeValueCeil(cell.zMaxEnc));        }switch (xyzSolid.getRelationship(shape)) {case GeoArea.CONTAINS:          if (VERBOSE) {            log.println("    GeoArea.CONTAINS: now addAll");          }        for (int docID=0; docID < numDocs; docID++) {          if (cell.contains(docs[docID])) {            if (VERBOSE) {              log.println("    addAll doc=" + docID);            }            hits.add(docID);          }        }      continue;case GeoArea.OVERLAPS:    if (VERBOSE) {      log.println("    GeoArea.OVERLAPS: keep splitting");    }  break;case GeoArea.WITHIN:if (VERBOSE) {  log.println("    GeoArea.WITHIN: keep splitting");}break;case GeoArea.DISJOINT:if (VERBOSE) {log.println("    GeoArea.DISJOINT: drop this cell");for (int docID=0; docID < numDocs; docID++) {if (cell.contains(docs[docID])) {  log.println("    skip doc=" + docID);}}}continue;default :assert false;}switch (random().nextInt(3)) {case 0:{int splitValue=RandomNumbers.randomIntBetween(random(),cell.xMinEnc,cell.xMaxEnc);if (VERBOSE) {log.println("    now split on x=" + splitValue);}Cell cell1=new Cell(cell,cell.xMinEnc,splitValue,cell.yMinEnc,cell.yMaxEnc,cell.zMinEnc,cell.zMaxEnc,cell.splitCount + 1);Cell cell2=new Cell(cell,splitValue,cell.xMaxEnc,cell.yMinEnc,cell.yMaxEnc,cell.zMinEnc,cell.zMaxEnc,cell.splitCount + 1);if (VERBOSE) {log.println("    split cell1: " + cell1);log.println("    split cell2: " + cell2);}queue.add(cell1);queue.add(cell2);}break;case 1:{int splitValue=RandomNumbers.randomIntBetween(random(),cell.yMinEnc,cell.yMaxEnc);if (VERBOSE) {log.println("    now split on y=" + splitValue);}Cell cell1=new Cell(cell,cell.xMinEnc,cell.xMaxEnc,cell.yMinEnc,splitValue,cell.zMinEnc,cell.zMaxEnc,cell.splitCount + 1);Cell cell2=new Cell(cell,cell.xMinEnc,cell.xMaxEnc,splitValue,cell.yMaxEnc,cell.zMinEnc,cell.zMaxEnc,cell.splitCount + 1);if (VERBOSE) {log.println("    split cell1: " + cell1);log.println("    split cell2: " + cell2);}queue.add(cell1);queue.add(cell2);}break;case 2:{int splitValue=RandomNumbers.randomIntBetween(random(),cell.zMinEnc,cell.zMaxEnc);if (VERBOSE) {log.println("    now split on z=" + splitValue);}Cell cell1=new Cell(cell,cell.xMinEnc,cell.xMaxEnc,cell.yMinEnc,cell.yMaxEnc,cell.zMinEnc,splitValue,cell.splitCount + 1);Cell cell2=new Cell(cell,cell.xMinEnc,cell.xMaxEnc,cell.yMinEnc,cell.yMaxEnc,splitValue,cell.zMaxEnc,cell.splitCount + 1);if (VERBOSE) {log.println("    split cell1: " + cell1);log.println("    split cell2: " + cell2);}queue.add(cell1);queue.add(cell2);}break;}}}if (VERBOSE) {log.println("  " + hits.size() + " hits");}boolean fail=false;for (int docID=0; docID < numDocs; docID++) {GeoPoint point=docs[docID];GeoPoint mappedPoint=unquantizedDocs[docID];boolean expected=shape.isWithin(mappedPoint);boolean actual=hits.contains(docID);if (actual != expected) {if (actual) {log.println("doc=" + docID + " should not have matched but did");} else {log.println("doc=" + docID + " should match but did not");}log.println("  point=" + point);log.println("  mappedPoint=" + mappedPoint);fail=true;}}if (fail) {System.out.print(sw.toString());fail("invalid hits for shape=" + shape);}}}  }
class C{  public static long parseDate(String dateString){  return HttpDateTime.parse(dateString);}  }
class C{  public boolean mouseClicked(MouseEvent e){  OMGraphicList list=getList();  if (list != null) {    OMGraphic graphic=list.getContains(e.getX(),e.getY());    if (graphic instanceof Pilot) {      Pilot mp=(Pilot)graphic;      mp.showPalette();      return true;    }  }  return false;}  }
class C{  public IoBuffer decodeHandshake(RTMP rtmp,IoBuffer in){  final int remaining=in.remaining();  if (rtmp.getMode() == RTMP.MODE_SERVER) {    if (rtmp.getState() == RTMP.STATE_CONNECT) {      if (remaining < HANDSHAKE_SIZE + 1) {        rtmp.bufferDecoding(HANDSHAKE_SIZE + 1);      } else {        final IoBuffer hs=IoBuffer.allocate(HANDSHAKE_SIZE);        in.get();        BufferUtils.put(hs,in,HANDSHAKE_SIZE);        hs.flip();        rtmp.setState(RTMP.STATE_HANDSHAKE);        return hs;      }    } else     if (rtmp.getState() == RTMP.STATE_HANDSHAKE) {      log.debug("Handshake reply");      if (remaining < HANDSHAKE_SIZE) {        log.debug("Handshake reply too small, buffering. remaining: {}",remaining);        rtmp.bufferDecoding(HANDSHAKE_SIZE);      } else {        in.skip(HANDSHAKE_SIZE);        rtmp.setState(RTMP.STATE_CONNECTED);        rtmp.continueDecoding();      }    }  } else {    if (rtmp.getState() == RTMP.STATE_CONNECT) {      final int size=(2 * HANDSHAKE_SIZE) + 1;      if (remaining < size) {        log.debug("Handshake init too small, buffering. remaining: {}",remaining);        rtmp.bufferDecoding(size);      } else {        final IoBuffer hs=IoBuffer.allocate(size);        BufferUtils.put(hs,in,size);        hs.flip();        rtmp.setState(RTMP.STATE_CONNECTED);        return hs;      }    }  }  return null;}  }
class C{  public void removeCmrRepositoryChangeListener(CmrRepositoryChangeListener repositoryChangeListener){  cmrRepositoryChangeListeners.remove(repositoryChangeListener);  for (  CmrRepositoryDefinition cmrRepositoryDefinition : cmrRepositoryDefinitions) {    cmrRepositoryDefinition.removeCmrRepositoryChangeListener(repositoryChangeListener);  }}  }
class C{  public boolean userHasPermission(String idUsuario,String permiso){  boolean hasPermission=false;  UsuarioVO usuario=getUsuario(idUsuario);  if (usuario != null) {    if (TipoUsuario.ADMINISTRADOR.equals(usuario.getTipo())) {      hasPermission=true;    } else {      List roles=getRolesUsuario(idUsuario);      if (roles != null) {        List permissions=new ArrayList();        for (int i=0; i < roles.size(); i++) {          RolVO rol=(RolVO)roles.get(i);          List permisos=getPermisosRol(rol.getId());          for (int j=0; (permisos != null) && (j < permisos.size()); j++)           permissions.add(String.valueOf(((PermisoVO)permisos.get(j)).getPerm()));        }        String[] permissionsArray=(String[])permissions.toArray(ArrayUtils.EMPTY_STRING_ARRAY);        Arrays.sort(permissionsArray);        hasPermission=(Arrays.binarySearch(permissionsArray,permiso) >= 0) || (Arrays.binarySearch(permissionsArray,AppPermissions.ADMINISTRACION_TOTAL_SISTEMA) >= 0);      }    }  }  return hasPermission;}  }
class C{  public static void info(String tag,String text){  try {    Log.i(tag,getFormattedLogLine() + text);  } catch (  OutOfMemoryError error) {    error.printStackTrace();  }catch (  Exception exception) {    exception.printStackTrace();  }}  }
class C{  protected void init(){  CPanel panel=new CPanel();  panel.setLayout(new MigLayout("fill"));  getContentPane().add(panel);  northPanel=new CPanel(new MigLayout("fill","","[50][50][]"));  panel.add(northPanel,"north");  northPanel.setBorder(new TitledBorder(Msg.getMsg(p_ctx,"Query")));  CLabel lvalue=new CLabel(Msg.translate(p_ctx,"Value"));  northPanel.add(lvalue," growy");  f_value=new PosTextField("",p_posPanel,p_pos.getOSK_KeyLayout_ID());  lvalue.setLabelFor(f_value);  northPanel.add(f_value,"h 30, w 200");  f_value.addActionListener(this);  CLabel lcontact=new CLabel(Msg.translate(p_ctx,"Contact"));  northPanel.add(lcontact," growy");  f_contact=new PosTextField("",p_posPanel,p_pos.getOSK_KeyLayout_ID());  lcontact.setLabelFor(f_contact);  northPanel.add(f_contact,"h 30, w 200");  f_contact.addActionListener(this);  CLabel lphone=new CLabel(Msg.translate(p_ctx,"Phone"));  northPanel.add(lphone," growy");  f_phone=new PosTextField("",p_posPanel,p_pos.getOSK_KeyLayout_ID());  lphone.setLabelFor(f_phone);  northPanel.add(f_phone,"h 30, w 200, wrap");  f_phone.addActionListener(this);  CLabel lname=new CLabel(Msg.translate(p_ctx,"Name"));  northPanel.add(lname," growy");  f_name=new PosTextField("",p_posPanel,p_pos.getOSK_KeyLayout_ID());  lname.setLabelFor(f_name);  northPanel.add(f_name,"h 30, w 200");  f_name.addActionListener(this);  CLabel lemail=new CLabel(Msg.translate(p_ctx,"Email"));  northPanel.add(lemail," growy");  f_email=new PosTextField("",p_posPanel,p_pos.getOSK_KeyLayout_ID());  lemail.setLabelFor(f_email);  northPanel.add(f_email,"h 30, w 200");  f_email.addActionListener(this);  CLabel lcity=new CLabel(Msg.translate(p_ctx,"City"));  northPanel.add(lcity," growy");  f_city=new CTextField(10);  lcity.setLabelFor(f_city);  northPanel.add(f_city,"h 30, w 200");  f_city.addActionListener(this);  f_refresh=createButtonAction("Refresh",KeyStroke.getKeyStroke(KeyEvent.VK_F5,0));  northPanel.add(f_refresh,"w 50!, h 50!, wrap, alignx trailing");  f_up=createButtonAction("Previous",KeyStroke.getKeyStroke(KeyEvent.VK_UP,0));  northPanel.add(f_up,"w 50!, h 50!, span, split 4");  f_down=createButtonAction("Next",KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,0));  northPanel.add(f_down,"w 50!, h 50!");  f_ok=createButtonAction("Ok",KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0));  northPanel.add(f_ok,"w 50!, h 50!");  f_cancel=createButtonAction("Cancel",KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0));  northPanel.add(f_cancel,"w 50!, h 50!");  m_table=new PosTable();  String sql=m_table.prepareTable(s_layout,s_sqlFrom,s_sqlWhere,false,"RV_BPartner") + " ORDER BY Value";  m_table.addMouseListener(this);  m_table.getSelectionModel().addListSelectionListener(this);  enableButtons();  centerScroll=new CScrollPane(m_table);  panel.add(centerScroll,"growx, growy");  m_table.growScrollbars();  panel.setPreferredSize(new Dimension(800,600));  f_value.requestFocus();}  }
class C{  private boolean updateDownloadFileWithStatus(DownloadFileInfo downloadFileInfo,int newStatus){synchronized (mModifyLock) {    int oldStatus=downloadFileInfo.getStatus();    downloadFileInfo.setStatus(newStatus);    boolean isSucceed=updateDownloadFileInternal(downloadFileInfo,false,Type.DOWNLOAD_STATUS);    if (!isSucceed) {      downloadFileInfo.setStatus(oldStatus);    } else {      return true;    }    return false;  }}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public static byte[] splitUint8To2bytes(char uint8){  if (uint8 < 0 || uint8 > 0xff) {    throw new RuntimeException("Out of Boundary");  }  String hexString=Integer.toHexString(uint8);  byte low;  byte high;  if (hexString.length() > 1) {    high=(byte)Integer.parseInt(hexString.substring(0,1),16);    low=(byte)Integer.parseInt(hexString.substring(1,2),16);  } else {    high=0;    low=(byte)Integer.parseInt(hexString.substring(0,1),16);  }  byte[] result=new byte[]{high,low};  return result;}  }
class C{  public static boolean hasParameter(String parameterName){  return parameterMap.containsKey(parameterName);}  }
class C{  private void renderAxes(Camera camera){  glPushMatrix();  glLoadIdentity();  float rotX=camera.getRotation().x;  float rotY=camera.getRotation().y;  float rotZ=0;  glRotatef(rotX,1.0f,0.0f,0.0f);  glRotatef(rotY,0.0f,1.0f,0.0f);  glRotatef(rotZ,0.0f,0.0f,1.0f);  glLineWidth(2.0f);  glBegin(GL_LINES);  glColor3f(1.0f,0.0f,0.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(1.0f,0.0f,0.0f);  glColor3f(0.0f,1.0f,0.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(0.0f,1.0f,0.0f);  glColor3f(1.0f,1.0f,1.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(0.0f,0.0f,1.0f);  glEnd();  glPopMatrix();}  }
class C{  public static void diff(final BOp o1,final BOp o2){  if (log.isDebugEnabled())   log.debug("Comparing: " + (o1 == null ? "null" : o1.toShortString()) + " with "+ (o2 == null ? "null" : o2.toShortString()));  if (o1 == o2)   return;  if (o1 == null && o2 != null) {    fail("Expecting null, but have " + o2);  }  if (o1 != null && o2 == null) {    fail("Expecting non-null, but have null: expected=" + o1);  }  if (!o1.getClass().equals(o2.getClass())) {    fail("Types differ: expecting " + o1.getClass() + ", but have "+ o2.getClass()+ " for "+ o1.toShortString()+ ", "+ o2.toShortString()+ "\n");  }  final int arity1=o1.arity();  final int arity2=o2.arity();  if (arity1 != arity2) {    fail("Arity differs: expecting " + arity1 + ", but have "+ arity2+ " for "+ o1.toShortString()+ ", "+ o2.toShortString()+ "\n");  }  for (int i=0; i < arity1; i++) {    final BOp c1=o1.get(i);    final BOp c2=o2.get(i);    diff(c1,c2);  }  for (  String name : o1.annotations().keySet()) {    final Object a1=o1.getProperty(name);    final Object a2=o2.getProperty(name);    if (log.isDebugEnabled())     log.debug("Comparing: " + o1.getClass().getSimpleName() + " @ \""+ name+ "\" having "+ (a1 == null ? "null" : (a1 instanceof BOp ? ((BOp)a1).toShortString() : a1.toString()))+ " with "+ (a2 == null ? "null" : (a2 instanceof BOp ? ((BOp)a2).toShortString() : a2.toString())));    if (a1 == a2)     continue;    if (a1 == null && a2 != null) {      fail("Not expecting annotation for " + name + " : expecting="+ o1+ ", actual="+ o2);    }    if (a2 == null) {      fail("Missing annotation @ \"" + name + "\" : expecting="+ o1+ ", actual="+ o2);    }    if (a1 instanceof BOp && a2 instanceof BOp) {      diff((BOp)a1,(BOp)a2);    } else {      final boolean tst;      if (a1.getClass().isArray()) {        tst=Arrays.equals((Object[])a1,(Object[])a2);      } else {        tst=a1.equals(a2);      }      if (!tst) {        fail("Annotations differ for " + name + "  : expecting="+ o1+ ", actual="+ o2);      }    }  }  final int n1=o1.annotations().size();  final int n2=o2.annotations().size();  if (n1 != n2) {    if (n1 > n2) {      final Set<String> expectedSet=new LinkedHashSet<String>(o1.annotations().keySet());      final Set<String> actualSet=new LinkedHashSet<String>(o2.annotations().keySet());      expectedSet.removeAll(actualSet);      fail("#of annotations differs: expecting " + o1 + ", actual="+ o2+ ", missing="+ expectedSet.toString());    } else {      final Set<String> expectedSet=new LinkedHashSet<String>(o1.annotations().keySet());      final Set<String> actualSet=new LinkedHashSet<String>(o2.annotations().keySet());      actualSet.removeAll(expectedSet);      fail("#of annotations differs: expecting=" + o1 + "\nactual="+ o2+ "\nmissing=\n"+ actualSet.toString());    }    fail("#of annotations differs: expecting " + o1 + ", actual="+ o2);  }  if (o1 instanceof IVariableOrConstant<?>) {    if (!o1.equals(o2)) {      fail("Expecting: " + o1 + ", actual="+ o2);    }  }  if (!o1.equals(o2)) {    fail("Failed to detect difference reported by equals(): expected=" + o1 + ", actual="+ o2);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void installUI(JComponent c){  splitPane=(JSplitPane)c;  dividerLocationIsSet=false;  dividerKeyboardResize=false;  keepHidden=false;  installDefaults();  installListeners();  installKeyboardActions();  setLastDragLocation(-1);}  }
class C{  @Override public String testDestination(Location destination,Track track){  String status=super.testDestination(destination,track);  if (!status.equals(Track.OKAY)) {    return status;  }  if (track == null) {    return status;  }  return track.checkSchedule(this);}  }
class C{  public Object nextValue() throws JSONException {  char c=this.nextClean();  String string;switch (c) {case '"':case '\'':    return this.nextString(c);case '{':  this.back();return new JSONObject(this);case '[':this.back();return new JSONArray(this);}StringBuilder sb=new StringBuilder();while (c >= ' ' && ",:]}/\\\"[{;=#".indexOf(c) < 0) {sb.append(c);c=this.next();}this.back();string=sb.toString().trim();if ("".equals(string)) {throw this.syntaxError("Missing value");}return JSONObject.stringToValue(string);}  }
class C{  protected void sequence_ObjectBindingPattern(ISerializationContext context,BindingPattern semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void defineFunctionPart(LinearFunctionPart lfp){  linearFunctionParts.add(lfp);  LinkedList<LinearFunctionPart> list=new LinkedList<LinearFunctionPart>();  LinearFunctionPart currentFuncPart=linearFunctionParts.poll();  while (linearFunctionParts.peek() != null) {    if (currentFuncPart.endCoord.getX() != linearFunctionParts.peek().startCoord.getX()) {      throw new RuntimeException("currentFuncPart.endCoord.getX()!=linearFunctionParts.peek().startCoord.getX()");    }    if (currentFuncPart.endCoord.getY() != linearFunctionParts.peek().startCoord.getY()) {    }    list.add(currentFuncPart);    currentFuncPart=linearFunctionParts.poll();  }  linearFunctionParts.add(currentFuncPart);  linearFunctionParts.addAll(list);}  }
class C{  public void dragFrame(JComponent f,int newX,int newY){  setBoundsForFrame(ghostPanel,newX,newY,ghostPanel.getWidth(),ghostPanel.getHeight());}  }
class C{  public void updateMethodParameter(Object param,int index){  params[index]=param;}  }
class C{  public static void consolidate(Properties ctx){  String sql="SELECT * FROM M_MatchPO po " + "WHERE EXISTS (SELECT 1 FROM M_MatchPO x " + "WHERE po.C_OrderLine_ID=x.C_OrderLine_ID AND po.Qty=x.Qty "+ "GROUP BY C_OrderLine_ID, Qty "+ "HAVING COUNT(*) = 2) "+ " AND AD_Client_ID=?"+ "ORDER BY C_OrderLine_ID, M_InOutLine_ID";  PreparedStatement pstmt=null;  ResultSet rs=null;  int success=0;  int errors=0;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,Env.getAD_Client_ID(ctx));    rs=pstmt.executeQuery();    while (rs.next()) {      MMatchPO po1=new MMatchPO(ctx,rs,null);      if (rs.next()) {        MMatchPO po2=new MMatchPO(ctx,rs,null);        if (po1.getM_InOutLine_ID() != 0 && po1.getC_InvoiceLine_ID() == 0 && po2.getM_InOutLine_ID() == 0 && po2.getC_InvoiceLine_ID() != 0) {          String s1="UPDATE M_MatchPO SET C_InvoiceLine_ID=" + po2.getC_InvoiceLine_ID() + " WHERE M_MatchPO_ID="+ po1.getM_MatchPO_ID();          int no1=DB.executeUpdate(s1,null);          if (no1 != 1) {            errors++;            s_log.warning("Not updated M_MatchPO_ID=" + po1.getM_MatchPO_ID());            continue;          }          String s2="DELETE FROM Fact_Acct WHERE AD_Table_ID=473 AND Record_ID=?";          int no2=DB.executeUpdate(s2,po2.getM_MatchPO_ID(),null);          String s3="DELETE FROM M_MatchPO WHERE M_MatchPO_ID=?";          int no3=DB.executeUpdate(s3,po2.getM_MatchPO_ID(),null);          if (no2 == 0 && no3 == 1)           success++; else {            s_log.warning("M_MatchPO_ID=" + po2.getM_MatchPO_ID() + " - Deleted="+ no2+ ", Acct="+ no3);            errors++;          }        }      }    }  } catch (  Exception e) {    s_log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (errors == 0 && success == 0)   ; else   s_log.info("Success #" + success + " - Error #"+ errors);}  }
class C{  private File createMultiBitRuntime() throws IOException {  File multiBitDirectory=FileHandler.createTempDirectory("multibit");  String multiBitDirectoryPath=multiBitDirectory.getAbsolutePath();  System.out.println("Building MultiBit runtime in : " + multiBitDirectory.getAbsolutePath());  File multibitProperties=new File(multiBitDirectoryPath + File.separator + "multibit.properties");  multibitProperties.createNewFile();  multibitProperties.deleteOnExit();  File multibitCheckpoints=new File(multiBitDirectoryPath + File.separator + "multibit.checkpoints");  FileHandler.copyFile(new File("./src/main/resources/multibit.checkpoints"),multibitCheckpoints);  multibitCheckpoints.deleteOnExit();  return multiBitDirectory;}  }
class C{  public String sensorEventId(String sensorId,String eventId){  return sensorId + "." + eventId;}  }
class C{  public CreatureProtectionArea(final int width,final int height,final boolean defaultBlocked){  super(width,height);  hide();  setResistance(0);  this.defaultBlocked=defaultBlocked;  entries=new LinkedList<Entry>();}  }
class C{  private void interpretLdm(final ReilInstruction instruction){  final Pair<Boolean,BigInteger> firstValue=loadLongValue(instruction.getFirstOperand());  if (firstValue.first()) {    final String target=instruction.getThirdOperand().getValue();    final int targetSize=instruction.getThirdOperand().getSize().getByteSize();    final BigInteger value=new BigInteger(String.valueOf(memory.load(firstValue.second().longValue(),targetSize)));    setRegister(target,value,instruction.getThirdOperand().getSize(),ReilRegisterStatus.DEFINED);  } else {    assert false;  }}  }
class C{  public CategorizedTextEditGroup(String name,TextEdit[] edits,GroupCategorySet groupCategories){  super(name,edits);  Assert.isNotNull(groupCategories);  fGroupCategories=groupCategories;}  }
class C{  public static Level stringToLevel(String level){  return Log.stringToLevel(level);}  }
class C{  public DefaultStatisticalCategoryDataset(){  this.data=new KeyedObjects2D();  this.minimumRangeValue=Double.NaN;  this.minimumRangeValueRow=-1;  this.minimumRangeValueColumn=-1;  this.maximumRangeValue=Double.NaN;  this.maximumRangeValueRow=-1;  this.maximumRangeValueColumn=-1;  this.minimumRangeValueIncStdDev=Double.NaN;  this.minimumRangeValueIncStdDevRow=-1;  this.minimumRangeValueIncStdDevColumn=-1;  this.maximumRangeValueIncStdDev=Double.NaN;  this.maximumRangeValueIncStdDevRow=-1;  this.maximumRangeValueIncStdDevColumn=-1;}  }
class C{  private boolean isNetworkAvailable(){  ConnectivityManager cm=(ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo activeNetworkInfo=cm.getActiveNetworkInfo();  return activeNetworkInfo != null && activeNetworkInfo.isConnected();}  }
class C{  public VersionedValue(VersionedValue other){  if (other.isSetValue()) {    this.value=org.apache.thrift.TBaseHelper.copyBinary(other.value);    ;  }  if (other.isSetVersion()) {    this.version=new VectorClock(other.version);  }}  }
class C{  public boolean isWriteable(){  return false;}  }
class C{  public CeylonRepoManagerBuilder proxy(Proxy proxy){  this.proxy=proxy;  return this;}  }
class C{  public long handlerCapacity(){  return m_vmasvc.handlerCapacity(m_nid);}  }
class C{  private void updateCycle(Cycle cycle){switch (cycle.getType()) {case PlanConstants.DATA:    cycleModel.updateDataCycle(cycle);  view.updateDataCycle(cycle);break;case PlanConstants.TALK:cycleModel.updateTalkCycle(cycle);view.updateTalkCycle(cycle);break;case PlanConstants.TEXT:cycleModel.updateTextCycle(cycle);view.updateTextCycle(cycle);break;}}  }
class C{  public CarrierPlanWriter(Collection<Carrier> carriers){  super();  this.carriers=carriers;}  }
class C{  public DefaultModelChooser(){}  }
class C{  @Override @Inline protected Address allocPages(int reservedPages,int requiredPages,boolean zeroed){  boolean newChunk=false;  lock();  Address rtn=cursor;  if (VM.VERIFY_ASSERTIONS) {    if (currentChunk.GT(cursor) || (Conversions.chunkAlign(cursor,true).NE(currentChunk) && Conversions.chunkAlign(cursor,true).NE(currentChunk.plus(VMLayoutConstants.BYTES_IN_CHUNK)))) {      logChunkFields("MonotonePageResource.allocPages:fail");    }    VM.assertions._assert(currentChunk.LE(cursor));    VM.assertions._assert(cursor.isZero() || Conversions.chunkAlign(cursor,true).EQ(currentChunk) || Conversions.chunkAlign(cursor,true).EQ(currentChunk.plus(VMLayoutConstants.BYTES_IN_CHUNK)));  }  if (metaDataPagesPerRegion != 0) {    Address regionStart=getRegionStart(cursor.plus(Conversions.pagesToBytes(requiredPages)));    Offset regionDelta=regionStart.diff(cursor);    if (regionDelta.sGE(Offset.zero())) {      requiredPages+=Conversions.bytesToPages(regionDelta) + metaDataPagesPerRegion;      rtn=regionStart.plus(Conversions.pagesToBytes(metaDataPagesPerRegion));    }  }  Extent bytes=Conversions.pagesToBytes(requiredPages);  Address tmp=cursor.plus(bytes);  if (!contiguous && tmp.GT(sentinel)) {    int requiredChunks=Space.requiredChunks(requiredPages);    currentChunk=space.growDiscontiguousSpace(requiredChunks);    cursor=currentChunk;    sentinel=cursor.plus(currentChunk.isZero() ? 0 : requiredChunks << VMLayoutConstants.LOG_BYTES_IN_CHUNK);    rtn=cursor;    tmp=cursor.plus(bytes);    newChunk=true;  }  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(rtn.GE(cursor) && rtn.LT(cursor.plus(bytes)));  if (tmp.GT(sentinel)) {    unlock();    return Address.zero();  } else {    Address old=cursor;    cursor=tmp;    if (contiguous && Conversions.chunkAlign(cursor,true).NE(currentChunk)) {      currentChunk=Conversions.chunkAlign(cursor,true);    }    commitPages(reservedPages,requiredPages);    space.growSpace(old,bytes,newChunk);    unlock();    HeapLayout.mmapper.ensureMapped(old,requiredPages);    if (zeroed) {      if (!zeroConcurrent) {        VM.memory.zero(zeroNT,old,bytes);      } else {        while (cursor.GT(zeroingCursor))         ;      }    }    VM.events.tracePageAcquired(space,rtn,requiredPages);    return rtn;  }}  }
class C{  public void layoutContainer(Container parent){  Insets insets=parent.getInsets();synchronized (parent.getTreeLock()) {    int n=parent.getComponentCount();    Dimension pd=parent.getSize();    int y=0;    for (int i=0; i < n; i++) {      Component c=parent.getComponent(i);      Dimension d=c.getPreferredSize();      y+=d.height + vgap;    }    y-=vgap;    if (anchor == TOP)     y=insets.top; else     if (anchor == CENTER)     y=(pd.height - y) / 2; else     y=pd.height - y - insets.bottom;    for (int i=0; i < n; i++) {      Component c=parent.getComponent(i);      Dimension d=c.getPreferredSize();      int x=insets.left;      int wid=d.width;      if (alignment == CENTER)       x=(pd.width - d.width) / 2; else       if (alignment == RIGHT)       x=pd.width - d.width - insets.right; else       if (alignment == BOTH)       wid=pd.width - insets.left - insets.right;      c.setBounds(x,y,wid,d.height);      y+=d.height + vgap;    }  }}  }
class C{  protected void sequence_LookAhead(ISerializationContext context,LookAhead semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public boolean isNotify(){  return this.notify;}  }
class C{  public Node(int id,double... position){  super();  this.id=id;  this.position=position;}  }
class C{  public static List<Audit> findByMessage(EntityManager em,String message){  requireArgument(em != null,"Entity manager cannot be null.");  requireArgument(message != null && !message.isEmpty(),"Message cannot be null or empty.");  TypedQuery<Audit> query=em.createNamedQuery("Audit.findByMessage",Audit.class);  try {    query.setParameter("message","%" + message + "%");    return query.getResultList();  } catch (  Exception ex) {    return new ArrayList<Audit>(0);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.GREATER_OP___GREATER_OP_1:    return getGreaterOp_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public int addPadding(byte[] in,int inOff){  int added=(in.length - inOff);  while (inOff < in.length) {    in[inOff]=(byte)0;    inOff++;  }  return added;}  }
class C{  public static void maximumTwoNominalAttributes(ExampleSet exampleSet,String task) throws OperatorException {  for (  Attribute attribute : exampleSet.getAttributes()) {    int valueType=attribute.getValueType();    boolean throwError=false;    if (!Ontology.ATTRIBUTE_VALUE_TYPE.isA(valueType,Ontology.NOMINAL)) {      throwError=true;    }    if (valueType == Ontology.NOMINAL) {      if (attribute.getMapping().size() > 2) {        throwError=true;      }    }    if (throwError) {      throw new UserError(null,114,task,attribute.getName());    }  }}  }
class C{  public final void testLetterOrNumberWithContextAndResourceIdParameters(){  assertNotNull(Validators.letterOrNumber(getContext(),android.R.string.cancel,Case.CASE_INSENSITIVE,true,new char[]{'-'}));}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SGraphPackage.VERTEX__PARENT_REGION:    setParentRegion((Region)null);  return;case SGraphPackage.VERTEX__INCOMING_TRANSITIONS:getIncomingTransitions().clear();return;case SGraphPackage.VERTEX__OUTGOING_TRANSITIONS:getOutgoingTransitions().clear();return;}super.eUnset(featureID);}  }
class C{  public static boolean viaEquals(final X500Name p1,final X500Name p2){  return p1.equals(p2);}  }
class C{  public long extensionCallbackInLongOutLong(int typ,long arg1){  enter();  try {    return PlatformCallbackUtils.extensionCallbackInLongOutLong(envPtr,typ,arg1);  }  finally {    leave();  }}  }
class C{  public static void updateStoragePoolCapacity(DbClient dbClient,VNXeApiClient vnxeApiClient,URI storagePoolUri,List<String> reservedCapacityVolumeIds){  StoragePool storagePool=dbClient.queryObject(StoragePool.class,storagePoolUri);  if (reservedCapacityVolumeIds != null && !reservedCapacityVolumeIds.isEmpty()) {    storagePool.removeReservedCapacityForVolumes(reservedCapacityVolumeIds);  }  String poolNativeId=storagePool.getNativeId();  VNXePool pool=vnxeApiClient.getPool(poolNativeId);  storagePool.setFreeCapacity(VNXeUtils.convertDoubleSizeToViPRLong(pool.getSizeFree()));  storagePool.setSubscribedCapacity(VNXeUtils.convertDoubleSizeToViPRLong(pool.getSizeSubscribed()));  dbClient.updateObject(storagePool);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(5);  newVector.addElement(new Option("\tThe full class name of the classifier.\n" + "\teg: weka.classifiers.bayes.NaiveBayes","W",1,"-W <class name>"));  newVector.addElement(new Option("\tThe index of the class for which IR statistics\n" + "\tare to be output. (default 1)","C",1,"-C <index>"));  newVector.addElement(new Option("\tThe index of an attribute to output in the\n" + "\tresults. This attribute should identify an\n" + "\tinstance in order to know which instances are\n"+ "\tin the test set of a cross validation. if 0\n"+ "\tno output (default 0).","I",1,"-I <index>"));  newVector.addElement(new Option("\tAdd target and prediction columns to the result\n" + "\tfor each fold.","P",0,"-P"));  newVector.addElement(new Option("\tSkips the determination of sizes (train/test/classifier)\n" + "\t(default: sizes are determined)","no-size",0,"-no-size"));  if ((m_Template != null) && (m_Template instanceof OptionHandler)) {    newVector.addElement(new Option("","",0,"\nOptions specific to classifier " + m_Template.getClass().getName() + ":"));    newVector.addAll(Collections.list(((OptionHandler)m_Template).listOptions()));  }  return newVector.elements();}  }
class C{  HalfPath(HalfPath path){  mIncluded=path.mIncluded;  mExcluded=path.mExcluded;  mHaplotypeA=path.mHaplotypeA.copy();  mHaplotypeB=path.mHaplotypeB.copy();  mVariantEndPosition=path.mVariantEndPosition;  mVariantIndex=path.mVariantIndex;  mIncludedVariantEndPosition=path.mIncludedVariantEndPosition;  mFinishedTypeA=path.mFinishedTypeA;  mFinishedTypeB=path.mFinishedTypeB;}  }
class C{  boolean isClockwise(List<double[]> points){  final double[] pa=points.get(a), pb=points.get(b), pc=points.get(c);  final double mX=(pa[0] + pb[0] + pc[0]) * MathUtil.ONE_THIRD;  final double mY=(pa[1] + pb[1] + pc[1]) * MathUtil.ONE_THIRD;  final double max=pa[0] - mX, may=pa[1] - mY;  final double abx=pb[0] - pa[0], aby=pb[1] - pa[1];  return (-abx * may + aby * max <= 0);}  }
class C{  public DataFilterCriterion.Builder<Select<Model>> or(){  return new DataFilterCriterion.Builder<Select<Model>>(this,DataFilterClause.DataFilterConjunction.OR);}  }
class C{  @Override public void addChild(FXGNode child){  if (child instanceof GradientEntryNode) {    if (entries == null) {      entries=new ArrayList<GradientEntryNode>(4);    } else     if (entries.size() >= GRADIENT_ENTRIES_MAX_INCLUSIVE) {      FXGLog.getLogger().log(FXGLogger.WARN,"InvalidGradientGlowFilterNumElements",null,getDocumentName(),startLine,startColumn);      return;    }    entries.add((GradientEntryNode)child);  } else {    super.addChild(child);  }}  }
class C{  private void updatePanel(){  if (drawing != null) {    colorButton.setBackground(drawing.get(CANVAS_FILL_COLOR));  }}  }
class C{  public void cancelQuit(){  if (appEventHandler.currentQuitResponse != this)   return;  appEventHandler.cancelQuit();}  }
class C{  public static boolean addFilesToExistingZip(File tempApk,ArrayList<File> classesFiles){  boolean success=false;  if (Cfg.getCompresionMathod() == 0) {    success=Zip.addFilesToExistingZipAapt(tempApk,classesFiles);  } else   if (Cfg.getCompresionMathod() == 1) {    try {      success=Zip.addFilesToExistingZipJ4Zip(tempApk,classesFiles);    } catch (    IOException e) {      e.printStackTrace();      success=Zip.addFilesToExistingZipAapt(tempApk,classesFiles);    }  } else   if (Cfg.getCompresionMathod() == 2) {    success=Zip.addFilesToExistingZipSevenZip(tempApk,classesFiles);  }  return success;}  }
class C{  @Override public float sloppyFreq(int distance){  return 1.0f / (distance + 1);}  }
class C{  public void visitClassType(String name){}  }
class C{  public static <A,B,C>DecomposableMatchBuilder0<Tuple3<A,B,C>> tuple3(MatchesExact<A> a,MatchesExact<B> b,MatchesExact<C> c){  List<Matcher<Object>> matchers=Lists.of(ArgumentMatchers.eq(a.t),ArgumentMatchers.eq(b.t),ArgumentMatchers.eq(c.t));  return new DecomposableMatchBuilder0<Tuple3<A,B,C>>(matchers,new Tuple3FieldExtractor<>());}  }
class C{  public static GroupCategorySet union(GroupCategorySet one,GroupCategorySet two){  Assert.isNotNull(one);  Assert.isNotNull(two);  if (one == two)   return one;  if (one == NONE)   return two;  if (two == NONE)   return one;  Set combined=new HashSet();  combined.addAll(one.asList());  combined.addAll(two.asList());  return new GroupCategorySet(combined);}  }
class C{  public static long[] preprocessMurmur(final BitVector bv,final long seed){  long h=seed, k;  long from=0;  final long length=bv.length();  final int wordLength=(int)(length / Long.SIZE);  final long state[]=new long[wordLength + 1];  int i=0;  state[i++]=h;  for (; length - from >= Long.SIZE; i++) {    k=bv.getLong(from,from+=Long.SIZE);    k*=M;    k^=k >>> R;    k*=M;    h^=k;    h*=M;    state[i]=h;  }  return state;}  }
class C{  public boolean isLoaded(){  return m_module.isLoaded();}  }
class C{  private static void validateOvf(OvfFile ovfFile) throws UnsupportedDiskControllerException, InvalidOvfException {  for (  OvfMetadata.VirtualDisk virtualDisk : ovfFile.getVirtualDisks()) {    Device diskDevice=virtualDisk.getDiskDevice();    Device diskController=diskDevice.getControllerDevice();    if (diskController.getDeviceType() != Device.DeviceType.SCSIController) {      throw new UnsupportedDiskControllerException(String.format("Unsupported disk controller: %s.",diskController.getName()));    }  }}  }
class C{  public static void printPLAFDefaults(){  System.out.println(UIManager.getLookAndFeel());  Object[] keys=UIManager.getLookAndFeelDefaults().keySet().toArray();  Arrays.sort(keys);  char lastStart=' ';  for (int i=0; i < keys.length; i++) {    StringBuffer sb=new StringBuffer();    sb.append(keys[i]).append(" = ").append(UIManager.get(keys[i]));    if (keys[i].toString().charAt(0) != lastStart) {      System.out.println();      lastStart=keys[i].toString().charAt(0);    }    System.out.println(sb);  }}  }
class C{  public void delete(){  Requester.Response response=api.getRequester().delete(Requester.DISCORD_API_PREFIX + "oauth2/applications/" + id);  if (!response.isOk()) {    throw new RuntimeException("Error deleting the application. Error: " + response.toString());  }}  }
class C{  @Override public void onCardboardTrigger(){  Log.i(TAG,"onCardboardTrigger");  mIsCardboardTriggered=true;}  }
class C{  public V peek(K key){  Entry<K,V> e=find(key);  return e == null ? null : e.value;}  }
class C{  private void notifyTagCloudBean(){  ui.findTagCloudBean().resetTagsForMarketplace();}  }
class C{  private static Set<String> compileQuery(final Cache cache,final String query) throws QueryInvalidException {  QCompiler compiler=new QCompiler();  Set<String> regionsInQuery=null;  try {    CompiledValue compiledQuery=compiler.compileQuery(query);    Set<String> regions=new HashSet<String>();    compiledQuery.getRegionsInQuery(regions,null);    regionsInQuery=Collections.unmodifiableSet(regions);    return regionsInQuery;  } catch (  QueryInvalidException qe) {    logger.error("{} Failed, Error {}",query,qe.getMessage(),qe);    throw qe;  }}  }
class C{  public static double rMAEmaxFitness(GEPIndividual ind){  return 1000.0;}  }
class C{  public void remove(N node){  if (!nodeLinks.containsKey(node)) {    return;  }  for (  N neighbor : nodeLinks.get(node)) {    nodeLinks.get(neighbor).remove(node);  }  nodeLinks.get(node).clear();  nodeLinks.remove(node);}  }
class C{  private static void copy(Reader in,Writer out) throws IOException {  try {    char[] buffer=new char[4096];    int bytesRead;    while ((bytesRead=in.read(buffer)) != -1) {      out.write(buffer,0,bytesRead);    }    out.flush();  }  finally {    try {      in.close();    } catch (    IOException ex) {    }    try {      out.close();    } catch (    IOException ex) {    }  }}  }
class C{  public void testGetF9(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF9();  assertEquals(expResult,result);}  }
class C{  public void ensureCapacity(int minCapacity){  modCount++;  int oldCapacity=elementData.length;  if (minCapacity > oldCapacity) {    Object oldData[]=elementData;    int newCapacity=(oldCapacity * 3) / 2 + 1;    if (newCapacity < minCapacity)     newCapacity=minCapacity;    elementData=(E[])new Object[newCapacity];    System.arraycopy(oldData,0,elementData,0,size);  }}  }
class C{  protected HashEntry<K,V> entryNext(final HashEntry<K,V> entry){  return entry.next;}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot,boolean isNeedResultMsg){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,isNeedResultMsg);}  }
class C{  public boolean hasTarget(){  try {    configStore.getTargetConfig();    return true;  } catch (  Exception ex) {    return false;  }}  }
class C{  private int generateViewType(WXComponent component){  long id;  try {    id=Integer.parseInt(component.getDomObject().getRef());    String type=component.getDomObject().getAttrs().getScope();    if (!TextUtils.isEmpty(type)) {      if (mRefToViewType == null) {        mRefToViewType=new ArrayMap<>();      }      if (!mRefToViewType.containsKey(type)) {        mRefToViewType.put(type,id);      }      id=mRefToViewType.get(type);    }  } catch (  RuntimeException e) {    WXLogUtils.eTag(TAG,e);    id=RecyclerView.NO_ID;    WXLogUtils.e(TAG,"getItemViewType: NO ID, this will crash the whole render system of WXListRecyclerView");  }  return (int)id;}  }
class C{  public void removeActiveLineRangeListener(ActiveLineRangeListener l){  listenerList.remove(ActiveLineRangeListener.class,l);}  }
class C{  @PUT public Response updateOrder(Order order){  producer.sendBody("direct:updateOrder",order);  return Response.ok().build();}  }
class C{  public CredentialException(){  super();}  }
class C{  final boolean isBitSet(K key,int bitIndex){  return key != null && keyAnalyzer.isBitSet(key,bitIndex);}  }
class C{  @SuppressWarnings("deprecation") private void initCropGridStyle(@NonNull TypedArray a){  int cropGridStrokeSize=a.getDimensionPixelSize(R.styleable.ucrop_UCropView_ucrop_grid_stroke_size,getResources().getDimensionPixelSize(R.dimen.ucrop_default_crop_grid_stoke_width));  int cropGridColor=a.getColor(R.styleable.ucrop_UCropView_ucrop_grid_color,getResources().getColor(R.color.ucrop_color_default_crop_grid));  mCropGridPaint.setStrokeWidth(cropGridStrokeSize);  mCropGridPaint.setColor(cropGridColor);  mCropGridRowCount=a.getInt(R.styleable.ucrop_UCropView_ucrop_grid_row_count,DEFAULT_CROP_GRID_ROW_COUNT);  mCropGridColumnCount=a.getInt(R.styleable.ucrop_UCropView_ucrop_grid_column_count,DEFAULT_CROP_GRID_COLUMN_COUNT);}  }
class C{  protected void assertResultSetMeta(ResultSet rs,int columnCount,String[] labels,int[] datatypes,int[] precision,int[] scale) throws SQLException {  ResultSetMetaData meta=rs.getMetaData();  int cc=meta.getColumnCount();  if (cc != columnCount) {    fail("result set contains " + cc + " columns not "+ columnCount);  }  for (int i=0; i < columnCount; i++) {    if (labels != null) {      String l=meta.getColumnLabel(i + 1);      if (!labels[i].equals(l)) {        fail("column label " + i + " is "+ l+ " not "+ labels[i]);      }    }    if (datatypes != null) {      int t=meta.getColumnType(i + 1);      if (datatypes[i] != t) {        fail("column datatype " + i + " is "+ t+ " not "+ datatypes[i]+ " (prec="+ meta.getPrecision(i + 1)+ " scale="+ meta.getScale(i + 1)+ ")");      }      String typeName=meta.getColumnTypeName(i + 1);      String className=meta.getColumnClassName(i + 1);switch (t) {case Types.INTEGER:        assertEquals("INTEGER",typeName);      assertEquals("java.lang.Integer",className);    break;case Types.VARCHAR:  assertEquals("VARCHAR",typeName);assertEquals("java.lang.String",className);break;case Types.SMALLINT:assertEquals("SMALLINT",typeName);assertEquals("java.lang.Short",className);break;case Types.TIMESTAMP:assertEquals("TIMESTAMP",typeName);assertEquals("java.sql.Timestamp",className);break;case Types.DECIMAL:assertEquals("DECIMAL",typeName);assertEquals("java.math.BigDecimal",className);break;default :}}if (precision != null) {int p=meta.getPrecision(i + 1);if (precision[i] != p) {fail("column precision " + i + " is "+ p+ " not "+ precision[i]);}}if (scale != null) {int s=meta.getScale(i + 1);if (scale[i] != s) {fail("column scale " + i + " is "+ s+ " not "+ scale[i]);}}}}  }
class C{  public int[][] cleanAbsoluteSources(int[][] sources,int destAgentRow,int destAgentColumn){  int[][] cleaned=new int[numSources][2];  int countOfSources=0;  for (int index=0; index < sources.length; index++) {    if ((sources[index][ROW_INDEX] != destAgentRow) && (sources[index][COLUMN_INDEX] != destAgentColumn)) {      if (countOfSources == numSources) {        countOfSources++;        break;      }      cleaned[countOfSources][ROW_INDEX]=sources[index][ROW_INDEX];      cleaned[countOfSources][COLUMN_INDEX]=sources[index][COLUMN_INDEX];      countOfSources++;    }  }  if (countOfSources < numSources) {    throw new RuntimeException("Too few sources in absolutes");  } else   if (countOfSources > numSources) {    throw new RuntimeException("Too many sources in absolutes");  }  return cleaned;}  }
class C{  public void testSplit2(){  SplittableRandom sr=new SplittableRandom(12345);  for (int reps=0; reps < REPS; ++reps) {    SplittableRandom sc=sr.split();    int i=0;    while (i < NCALLS && sr.nextLong() == sc.nextLong())     ++i;    assertTrue(i < NCALLS);  }}  }
class C{  @Override public void stop(){}  }
class C{  public DOM2Helper(){}  }
class C{  public static void trimAll(String[] strings){  for (int i=0; i < strings.length; i++) {    String string=strings[i];    if (string != null) {      strings[i]=string.trim();    }  }}  }
class C{  int appendSlot(int w0,int w1,int w2,int w3){{    final int slotsize=4;    int newoffset=(lastUsed + 1) * slotsize;    int chunkpos=newoffset >> lowbits;    int slotpos=(newoffset & lowmask);    if (chunkpos > chunks.size() - 1)     chunks.addElement(new int[chunkalloc]);    int[] chunk=chunks.elementAt(chunkpos);    chunk[slotpos]=w0;    chunk[slotpos + 1]=w1;    chunk[slotpos + 2]=w2;    chunk[slotpos + 3]=w3;    return ++lastUsed;  }}  }
class C{  public V pop() throws IndexOutOfBoundsException {  if (top == 0) {    throw new IndexOutOfBoundsException("Cannot pop operand off an empty stack.");  }  return values[--top + locals];}  }
class C{  private void resetNotes2(){  if (errorInStatus2) {    if (editMode) {      statusText1.setText(editStatus2);    } else {      statusText2.setText(stdStatus2);    }    errorInStatus2=false;  }}  }
class C{  private static boolean isContinuationChar(byte b){  return -128 <= b && b <= -65;}  }
class C{  private Class<?> nearestVisibleSuperclass(Class<?> c){  while (!visibility.isVisible(c)) {    c=c.getSuperclass();  }  return c;}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  public int[] readLine(){  int record[]=new int[MAX_LEN];  int checksum=0;  try {    while (((charIn=buffIn.read()) == 0xd) || (charIn == 0xa)) {    }    if (charIn != ':') {      if (log.isDebugEnabled()) {        log.debug("HexFile.readLine no colon at start of line " + lineNo);      }      return new int[]{-1};    }  } catch (  IOException e) {    JOptionPane.showMessageDialog(this,"I/O Error reading hex file!","Hex File",JOptionPane.ERROR_MESSAGE);    if (log.isDebugEnabled()) {      log.debug("I/O Error reading hex file!" + e.toString());    }  }  record[LEN]=rdHexByte();  checksum+=record[LEN];  record[ADDRH]=rdHexByte();  checksum+=record[ADDRH];  record[ADDRL]=rdHexByte();  checksum+=record[ADDRL];  record[TYPE]=rdHexByte();  checksum+=record[TYPE];  address=(address & 0xffff0000) + record[ADDRH] * 256 + record[ADDRL];  type=record[TYPE];  if (type != END) {    len=record[LEN];    for (int i=1; i <= len; i++) {      record[TYPE + i]=rdHexByte();      checksum+=record[TYPE + i];    }  }  int fileCheck=rdHexByte();  if (((checksum + fileCheck) & 0xff) != 0) {    log.error("HexFile.readLine bad checksum at line " + lineNo);  }  lineNo++;  return record;}  }
class C{  protected AccessRestriction fetchAccessRestriction(String qualifiedBinaryFileName){  if (this.accessRuleSet == null)   return null;  char[] qualifiedTypeName=qualifiedBinaryFileName.substring(0,qualifiedBinaryFileName.length() - SUFFIX_CLASS.length).toCharArray();  if (File.separatorChar == '\\') {    CharOperation.replace(qualifiedTypeName,File.separatorChar,'/');  }  return this.accessRuleSet.getViolatedRestriction(qualifiedTypeName);}  }
class C{  public ComponentBuilder appendLegacy(String text){  this.parts.addExtra(this.current);  this.current=TextComponent.fromLegacyText(text);  return this;}  }
class C{  private void isiDeleteSnapshots(IsilonApi isi,FileDeviceInputOutput args) throws IsilonException {  List<URI> snapURIList=_dbClient.queryByConstraint(ContainmentConstraint.Factory.getFileshareSnapshotConstraint(args.getFsId()));  for (  URI snapURI : snapURIList) {    Snapshot snap=_dbClient.queryObject(Snapshot.class,snapURI);    if (snap != null && (!snap.getInactive())) {      args.addSnapshot(snap);      isiDeleteSnapshot(isi,args);    }  }}  }
class C{  @Override protected void configureEnclosingScrollPane(){  super.configureEnclosingScrollPane();  if (System.getProperty("os.name").contains("Mac") == false) {    return;  }  Container p=getParent();  if (p instanceof JViewport) {    Container gp=p.getParent();    if (gp instanceof JScrollPane) {      JScrollPane scrollPane=(JScrollPane)gp;      JViewport viewport=scrollPane.getViewport();      if (viewport == null || viewport.getView() != this) {        return;      }      final Component renderer=new JTableHeader().getDefaultRenderer().getTableCellRendererComponent(null,"",false,false,-1,0);      JPanel panel=new JPanel(new BorderLayout());      panel.add(renderer,BorderLayout.CENTER);      scrollPane.setCorner(JScrollPane.UPPER_RIGHT_CORNER,panel);    }  }}  }
class C{  public Period(long startInstant,long endInstant,PeriodType type,Chronology chrono){  super(startInstant,endInstant,type,chrono);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:10.474 -0500",hash_original_method="4C34347B458F16A46FBA6214D1ED5964",hash_generated_method="A6CCBBAD1B4ECC995F624A6D656399FE") public static Metrics isBoring(CharSequence text,TextPaint paint,TextDirectionHeuristic textDir){  return isBoring(text,paint,textDir,null);}  }
class C{  public void fillRect(int x,int y,int width,int height){  mGraphics.fillRect(x,y,width,height);}  }
class C{  public void updateProgress(ProgressSource pi){synchronized (progressSourceList) {    if (progressSourceList.contains(pi) == false)     return;  }  if (progressListenerList.size() > 0) {    ArrayList<ProgressListener> listeners=new ArrayList<ProgressListener>();synchronized (progressListenerList) {      for (Iterator<ProgressListener> iter=progressListenerList.iterator(); iter.hasNext(); ) {        listeners.add(iter.next());      }    }    for (Iterator<ProgressListener> iter=listeners.iterator(); iter.hasNext(); ) {      ProgressListener pl=iter.next();      ProgressEvent pe=new ProgressEvent(pi,pi.getURL(),pi.getMethod(),pi.getContentType(),pi.getState(),pi.getProgress(),pi.getExpected());      pl.progressUpdate(pe);    }  }}  }
class C{  public static Map<String,Object> renderSubContentAsText(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> results=FastMap.newInstance();  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Map<String,Object> templateContext=UtilGenerics.checkMap(context.get("templateContext"));  String contentId=(String)context.get("contentId");  if (templateContext != null && UtilValidate.isEmpty(contentId)) {    contentId=(String)templateContext.get("contentId");  }  String mapKey=(String)context.get("mapKey");  if (templateContext != null && UtilValidate.isEmpty(mapKey)) {    mapKey=(String)templateContext.get("mapKey");  }  String mimeTypeId=(String)context.get("mimeTypeId");  if (templateContext != null && UtilValidate.isEmpty(mimeTypeId)) {    mimeTypeId=(String)templateContext.get("mimeTypeId");  }  Locale locale=(Locale)context.get("locale");  if (templateContext != null && locale == null) {    locale=(Locale)templateContext.get("locale");  }  GenericValue subContentDataResourceView=(GenericValue)context.get("subContentDataResourceView");  if (templateContext != null && subContentDataResourceView == null) {    subContentDataResourceView=(GenericValue)templateContext.get("subContentDataResourceView");  }  Writer out=(Writer)context.get("outWriter");  Writer outWriter=new StringWriter();  if (templateContext == null) {    templateContext=FastMap.newInstance();  }  try {    ContentWorker.renderSubContentAsText(dispatcher,delegator,contentId,outWriter,mapKey,templateContext,locale,mimeTypeId,true);    out.write(outWriter.toString());    results.put("textData",outWriter.toString());  } catch (  GeneralException e) {    Debug.logError(e,"Error rendering sub-content text",module);    return ServiceUtil.returnError(e.toString());  }catch (  IOException e) {    Debug.logError(e,"Error rendering sub-content text",module);    return ServiceUtil.returnError(e.toString());  }  return results;}  }
class C{  public static void writeTransitLines2Shape(String fileName,TransitSchedule schedule,Collection<Id> lines2write,Map<Id,SortedMap<String,String>> attributes){  PolylineFeatureFactory factory=null;  if (!(attributes == null) && (attributes.size() > 0)) {    for (    SortedMap<String,String> m : attributes.values()) {      factory=initLineFeatureType("transitLines",m);      break;    }  } else {    factory=initLineFeatureType("transitLines",null);  }  write(createRouteFeatures(schedule,lines2write,attributes,factory),fileName);}  }
class C{  @Override protected void handleArguments(Arguments arguments){}  }
class C{  public KernelRidgeRegression(double lambda,KernelTrick kernel){  setLambda(lambda);  setKernel(kernel);}  }
class C{  public static void w(Throwable thr){  log(LEVEL.WARN,null,null,thr);}  }
class C{  public long eventFilterCreate(long memPtr){  enter();  try {    return PlatformCallbackUtils.eventFilterCreate(envPtr,memPtr);  }  finally {    leave();  }}  }
class C{  public int lastIndexOf(double value){  return lastIndexOf(_pos,value);}  }
class C{  public ObjectFactory(){}  }
class C{  public boolean existeDocumento(String csv){  logger.info("Llamada a existeDocumento: csv=[{}]",csv);  return getAplicacionExternaConnectorDelegate().existeDocumento(csv);}  }
class C{  char[] DigestCalcHA1(String algorithm,String userName,String realm,String password,String nonce,String clientNonce) throws SaslException {  byte[] hash;  try {    MessageDigest md=MessageDigest.getInstance("MD5");    md.update(userName.getBytes("UTF-8"));    md.update(":".getBytes("UTF-8"));    md.update(realm.getBytes("UTF-8"));    md.update(":".getBytes("UTF-8"));    md.update(password.getBytes("UTF-8"));    hash=md.digest();    if ("md5-sess".equals(algorithm)) {      md.update(hash);      md.update(":".getBytes("UTF-8"));      md.update(nonce.getBytes("UTF-8"));      md.update(":".getBytes("UTF-8"));      md.update(clientNonce.getBytes("UTF-8"));      hash=md.digest();    }  } catch (  NoSuchAlgorithmException e) {    throw new SaslException("No provider found for MD5 hash",e);  }catch (  UnsupportedEncodingException e) {    throw new SaslException("UTF-8 encoding not supported by platform.",e);  }  return convertToHex(hash);}  }
class C{  private PrintStream initOutputFile(String classname){  try {    OutputStream out=new FileOutputStream(fileDir + File.separator + classname+ BEANINFO_SUFFIX);    BufferedOutputStream bout=new BufferedOutputStream(out);    return new PrintStream(out);  } catch (  IOException e) {  }  return null;}  }
class C{  public static Test suite(){  return (new TestSuite(OutputScriptStyleITCase.class));}  }
class C{  private TypeDeclaration loadNestedType(final String fqn,List<TypeParameter> typeParams){  try {    String[] path=fqn.split("\\.");    @SuppressWarnings("unchecked") Map<String,Object> typeMap=(Map<String,Object>)model.get(path[0]);    if (typeMap.get(KEY_METATYPE) instanceof TypeDeclaration == false) {      load(path[0],typeParams);    }    TypeDeclaration td=(TypeDeclaration)typeMap.get(KEY_METATYPE);    for (int i=1; i < path.length; i++) {      @SuppressWarnings("unchecked") Map<String,Object> subtypes=(Map<String,Object>)typeMap.get(KEY_INTERFACES);      Map<String,Object> childMap=null;      int type=0;      if (subtypes != null) {        childMap=(Map<String,Object>)subtypes.get(path[i]);        type=1;      }      if (childMap == null) {        subtypes=(Map<String,Object>)typeMap.get(KEY_CLASSES);        if (subtypes != null) {          childMap=(Map<String,Object>)subtypes.get(path[i]);          type=2;        }      }      Declaration member=td.getDirectMember(path[i],null,false);      TypeDeclaration child;      if (member instanceof Value && ((Value)member).getTypeDeclaration() instanceof Constructor)       child=((Value)member).getTypeDeclaration().getExtendedType().getDeclaration(); else       child=(TypeDeclaration)member;      if (child == null) {switch (type) {case 1:          child=loadInterface(path[i],childMap,td,typeParams);        break;case 2:      child=loadClass(path[i],childMap,td,typeParams);    break;}}td=child;}return td;} catch (RuntimeException x) {throw new RuntimeException("Failed to load inner type " + fqn + " in package "+ getQualifiedNameString(),x);}}  }
class C{  public void upgrade() throws IOException {  if (!DirectoryReader.indexExists(dir)) {    throw new IndexNotFoundException(dir.toString());  }  if (!deletePriorCommits) {    final Collection<IndexCommit> commits=DirectoryReader.listCommits(dir);    if (commits.size() > 1) {      throw new IllegalArgumentException("This tool was invoked to not delete prior commit points, but the following commits were found: " + commits);    }  }  iwc.setMergePolicy(new UpgradeIndexMergePolicy(iwc.getMergePolicy()));  iwc.setIndexDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());  try (final IndexWriter w=new IndexWriter(dir,iwc)){    InfoStream infoStream=iwc.getInfoStream();    if (infoStream.isEnabled(LOG_PREFIX)) {      infoStream.message(LOG_PREFIX,"Upgrading all pre-" + Version.LATEST + " segments of index directory '"+ dir+ "' to version "+ Version.LATEST+ "...");    }    w.forceMerge(1);    if (infoStream.isEnabled(LOG_PREFIX)) {      infoStream.message(LOG_PREFIX,"All segments upgraded to version " + Version.LATEST);      infoStream.message(LOG_PREFIX,"Enforcing commit to rewrite all index metadata...");    }    w.setLiveCommitData(w.getLiveCommitData());    assert w.hasUncommittedChanges();    w.commit();    if (infoStream.isEnabled(LOG_PREFIX)) {      infoStream.message(LOG_PREFIX,"Committed upgraded metadata to index.");    }  } }  }
class C{  Item newLong(final long value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(LONG).putLong(value);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  public Asn1Dump(IndentSequence indentSequence){  this.indentSequence=indentSequence;}  }
class C{  protected void UnaryExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  boolean isNeg=false;  if (m_tokenChar == '-') {    nextToken();    appendOp(2,OpCodes.OP_NEG);    isNeg=true;  }  UnionExpr();  if (isNeg)   m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);}  }
class C{  public void startElement(String namespaceURI,String localName,String qName,Attributes atts){  if (localName.equalsIgnoreCase("public") || (localName.equals("") && qName.equalsIgnoreCase("public"))) {    entityMap.put(atts.getValue("publicId"),atts.getValue("uri"));  }}  }
class C{  @Override public void clear(){  this._map.clear();}  }
class C{  public static CharSequence stripUnbalancedQuotes(CharSequence s){  int count=0;  for (int i=0; i < s.length(); i++) {    if (s.charAt(i) == '\"') {      count++;    }  }  if (0 == (count & 1)) {    return s;  }  return s.toString().replace("\"","");}  }
class C{  public int frameCount(){  return frameStack.size();}  }
class C{  public void e(String log,Throwable tr){  if (debug) {    String line=getFunctionName();    Log.e(tag,"{Thread:" + Thread.currentThread().getName() + "}"+ "["+ name+ line+ ":] "+ log+ "\n",tr);  }}  }
class C{  public static void removeFromGroup(final NaviNode node){  final INaviGroupNode group=node.getRawNode().getParentGroup();  if (group != null) {    group.removeElement(node.getRawNode());    if (group.getParentGroup() != null) {      group.getParentGroup().addElement(node.getRawNode());    }  }}  }
class C{  private static void insertionSort(ModifiableDoubleDBIDList data,int start,int end,DoubleDBIDListIter iter1,DoubleDBIDListIter iter2){  for (int i=start + 1; i < end; i++) {    for (int j=i; j > start; j--) {      if (iter1.seek(j - 1).doubleValue() < iter2.seek(j).doubleValue()) {        break;      }      data.swap(j,j - 1);    }  }}  }
class C{  public AdaptiveProcessingTimeLoadProbe(){}  }
class C{  protected void updateMenu(){  if (m_MenuBar == null)   return;  m_MenuItemFileOpen.setEnabled(true);  m_MenuItemFileSave.setEnabled((getCurrentFile() != null) && (getCurrentData() != null));  m_MenuItemFileSaveAs.setEnabled((getCurrentData() != null));  m_MenuItemFileClose.setEnabled(true);  m_MenuItemEditUndo.setEnabled(canUndo());  m_MenuItemEditData.setEnabled(getCurrentData() != null);}  }
class C{  private void triggerImageDatastoreSweeperService(final State current,final String dataStore,final boolean isImageDatastore){  Operation.CompletionHandler handler=null;  ImageDatastoreSweeperService.State request=new ImageDatastoreSweeperService.State();  request.datastore=dataStore;  request.parentLink=this.getSelfLink();  request.imageCreateWatermarkTime=current.imageWatermarkTime;  request.imageDeleteWatermarkTime=current.imageDeleteWatermarkTime;  request.hostPollIntervalMilliSeconds=current.queryPollDelay;  request.isImageDatastore=isImageDatastore;  request.documentExpirationTimeMicros=current.documentExpirationTimeMicros;  Operation operation=Operation.createPost(UriUtils.buildUri(getHost(),ImageDatastoreSweeperServiceFactory.SELF_LINK)).setContextId(ServiceUtils.getIDFromDocumentSelfLink(current.documentSelfLink)).setBody(request).setCompletion(handler);  this.sendRequest(operation);}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == TypedElement.class) {switch (derivedFeatureID) {case N4JSPackage.N4_FIELD_DECLARATION__DECLARED_TYPE_REF:      return N4JSPackage.TYPED_ELEMENT__DECLARED_TYPE_REF;case N4JSPackage.N4_FIELD_DECLARATION__BOGUS_TYPE_REF:    return N4JSPackage.TYPED_ELEMENT__BOGUS_TYPE_REF;default :  return -1;}}if (baseClass == ThisArgProvider.class) {switch (derivedFeatureID) {default :return -1;}}if (baseClass == PropertyNameOwner.class) {switch (derivedFeatureID) {case N4JSPackage.N4_FIELD_DECLARATION__DECLARED_NAME:return N4JSPackage.PROPERTY_NAME_OWNER__DECLARED_NAME;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  private FsPermission permission(IgfsFile file){  String perm=file.property(IgfsUtils.PROP_PERMISSION,null);  if (perm == null)   return FsPermission.getDefault();  try {    return new FsPermission((short)Integer.parseInt(perm,8));  } catch (  NumberFormatException ignore) {    return FsPermission.getDefault();  }}  }
class C{  public <T>void write(T obj,String name,Class<T> cls) throws XMLStreamException {  _xml.add(obj,name,cls);}  }
class C{  public static ExtendedPropertyMatch[] arrayFromExtendedPropertyQueryString(String extqQuery){  List<ExtendedPropertyMatch> result=new LinkedList<ExtendedPropertyMatch>();  int startPos=0;  Matcher m=EXT_PROP_QUERY_PATTERN.matcher(extqQuery);  while (startPos < extqQuery.length()) {    if (!m.find(startPos) || m.start() != startPos) {      throw new IllegalArgumentException("Invalid extended property query:" + extqQuery);    }    startPos=m.end();    String propName=m.group(1);    String propValue=m.group(2);    if (propValue.startsWith("\"") && propValue.endsWith("\"")) {      propValue=propValue.substring(1,propValue.length() - 1).replaceAll("\\\\(.)","$1");    }    result.add(new ExtendedPropertyMatch(propName,propValue));  }  return result.toArray(EMPTY_EXT_PROP_MATCH);}  }
class C{  public synchronized StringBuffer deleteCharAt(int location){  deleteCharAt0(location);  return this;}  }
class C{  public int calculateVisibleLayerMask(){  int ret=0;  for (int i=layers.length - 1; i >= 0; i--) {    if (layers[i].isVisible()) {      ret|=(0x00000001 << i);    }  }  return ret;}  }
class C{  public boolean isDisplayLegend(){  Object oo=get_Value(COLUMNNAME_IsDisplayLegend);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  DimStore(int id,String name){  this.id=id;  this.name=name;}  }
class C{  private void cmd_testDB(){  setBusy(true);  Exception e=m_cc.testDatabase(true);  if (e != null) {    JOptionPane.showMessageDialog(this,e,res.getString("ConnectionError") + ": " + m_cc.getConnectionURL(),JOptionPane.ERROR_MESSAGE);  }  setBusy(false);}  }
class C{  public static final GCodeFlavor tasteFlavor(Resources res,int resId) throws IOException, NotFoundException {  BufferedInputStream buffer=new BufferedInputStream(res.openRawResource(resId));  GCodeFlavor ret=tasteFlavor(buffer);  buffer.close();  return ret;}  }
class C{  protected boolean isShortClassName(){  return useShortClassName;}  }
class C{  public static int dataSize(String desc){  return dataSize(desc,true);}  }
class C{  public void compareResources(EnumerationDeletionContext aws,AWSEnumerationDeletionSubStage next){  if (aws.localInstanceIds == null || aws.localInstanceIds.size() == 0) {    logInfo("No local resources found. Nothing to delete.");  } else   if (aws.remoteInstanceIds == null || aws.remoteInstanceIds.size() == 0) {    logInfo("No resources discovered on the remote system. Everything (if existing) on the local system should be deleted.");    aws.instancesToBeDeleted.addAll(aws.localInstanceIds.values());    logFine("====Deleting compute state for instance Ids %s ====",aws.localInstanceIds.keySet().toString());  } else {    for (    String key : aws.localInstanceIds.keySet()) {      if (!aws.remoteInstanceIds.contains(key)) {        aws.instancesToBeDeleted.add(aws.localInstanceIds.get(key));        logFine("====Deleting compute state for instance Id %s ====",key);      }    }    logInfo("%d instances need to be deleted from the local system as they have been terminated on the remote endpoint.",aws.instancesToBeDeleted.size());  }  aws.subStage=next;  deleteResourcesInLocalSystem(aws);  return;}  }
class C{  public void emitop1w(int op,int od1,int od2){  if (od1 > 0xFF || od2 < -128 || od2 > 127) {    emitop(wide);    emitop(op);    emit2(od1);    emit2(od2);  } else {    emitop(op);    emit1(od1);    emit1(od2);  }  if (!alive)   return;switch (op) {case iinc:    break;default :  throw new AssertionError(mnem(op));}}  }
class C{  public void clearOutputs(){  outputVariables.clear();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.202 -0400",hash_original_method="E6D05E7A8E7A53A0497829DD15335921",hash_generated_method="F908A4CDEFE38FCEB9EC84DBE28F2C05") public LockableFileWriter(File file,boolean append,String lockDir) throws IOException {  this(file,Charset.defaultCharset(),append,lockDir);}  }
class C{  public static void restoreView(){  if (OSUtils.supportsTray() && ResourceManager.instance().isTrayIconAvailable()) {    boolean doHack=false;    if (!_visibleOnce)     doHack=true;    GUIMediator.setAppVisible(true);    if (ApplicationSettings.DISPLAY_TRAY_ICON.getValue())     GUIMediator.showTrayIcon(); else     GUIMediator.hideTrayIcon();    if (doHack)     restoreView();  }  getAppFrame().setState(Frame.NORMAL);}  }
class C{  public void createSubUsageScenario05() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") - DateTimeHandling.weeksToMillis(1.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO05_PERUNIT_WEEK",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO05_PERUNIT_WEEK",serviceDetails,basicSetup.getSecondCustomerUser1(),role);  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") + DateTimeHandling.weeksToMillis(2);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO05_PERUNIT_WEEK",subDetails);}  }
class C{  public void saveFileAs(){  int retVal;  ArffPanel panel;  panel=getCurrentPanel();  if (panel == null) {    System.out.println("nothing selected!");    return;  }  if (!getCurrentFilename().equals("")) {    try {      fileChooser.setSelectedFile(new File(getCurrentFilename()));    } catch (    Exception e) {    }  }  try {    fileChooser.setCapabilitiesFilter(Capabilities.forInstances(panel.getInstances()));  } catch (  Exception e) {    fileChooser.setCapabilitiesFilter(null);  }  retVal=fileChooser.showSaveDialog(this);  if (retVal != ConverterFileChooser.APPROVE_OPTION) {    return;  }  panel.setChanged(false);  setCurrentFilename(fileChooser.getSelectedFile().getAbsolutePath());  AbstractFileSaver saver=fileChooser.getSaver();  saver.setInstances(panel.getInstances());  try {    saver.writeBatch();    panel.setChanged(false);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public boolean isNearlyCollinearTo(DoubleVector v,double tolerance){  if (this.isNull() || v.isNull()) {    return true;  }  if ((v.x == 0 && x != 0) || (v.y == 0 && y != 0) || (v.z == 0 && z == 0)) {    return false;  }  double qx=x / v.x, qy=y / v.y, qz=z / v.z;  return Math.abs(qx - qy) < tolerance && Math.abs(qy - qz) < tolerance;}  }
class C{  public BrushedMetalFilter(int color,int radius,float amount,boolean monochrome,float shine){  this.color=color;  this.radius=radius;  this.amount=amount;  this.monochrome=monochrome;  this.shine=shine;}  }
class C{  public Key min(){  if (isEmpty())   return null;  return keys[0];}  }
class C{  private List<PermissionRule> access(String permissionName){  return access(permissionName,false);}  }
class C{  protected void computeStringWidths(FontMetrics fm){  if (widths == null && fm != null) {    int nLines=parsedData.length;    widths=new int[nLines];    for (int i=0; i < nLines; i++) {      widths[i]=fm.stringWidth(parsedData[i]);    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  NamedList<SolrDocumentList> buildMoreLikeThisNamed(Map<Object,SolrDocumentList> allMlt,Map<Object,ShardDoc> resultIds){  NamedList<SolrDocumentList> result=new NamedList<>();  TreeMap<Integer,Object> sortingMap=new TreeMap<>();  for (  Entry<Object,ShardDoc> next : resultIds.entrySet()) {    sortingMap.put(next.getValue().positionInResponse,next.getKey());  }  for (  Object key : sortingMap.values()) {    SolrDocumentList sdl=allMlt.get(key);    if (sdl == null) {      sdl=new SolrDocumentList();      sdl.setNumFound(0);      sdl.setStart(0);    }    result.add(key.toString(),sdl);  }  return result;}  }
class C{  public boolean containsTile(final MapTile aTile){  return mCachedTiles.containsKey(aTile.toString());}  }
class C{  public void addTarget(String target){  if (targets == null) {    targets=new HashSet<>();  }  targets.add(target);}  }
class C{  @LargeTest public void testThumbnailWithHeight() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "MPEG4_SP_176x144_30fps_256kbps_AACLC_44.1kHz_96kbps_s_1_17.3gp";  final int atTime=1000;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  final int outWidth=(mediaVideoItem.getWidth() / 2);  final int outHeight=10;  final Bitmap thumbNailBmp=mediaVideoItem.getThumbnail(outWidth,outHeight,atTime);  validateThumbnail(thumbNailBmp,outWidth,outHeight);}  }
class C{  private boolean focusCenter(){  return !showGuidelines();}  }
class C{  public EmptyRaba(){}  }
class C{  public synchronized Object pop() throws Exception {  if (m_Head == null) {    throw new Exception("Queue is empty");  }  Object retval=m_Head.contents();  m_Size--;  m_Head=m_Head.next();  return retval;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_INLINE_STATE_MACHINE_1__COMMENT_1:    return getComment_1();case UmplePackage.ANONYMOUS_INLINE_STATE_MACHINE_1__STATE_1:  return getState_1();case UmplePackage.ANONYMOUS_INLINE_STATE_MACHINE_1__TRACE_1:return getTrace_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean isShutdown(){  return shutdown.get();}  }
class C{  public void extractQueryAndEvaluate(final TupleResultBuilder builder,final HttpServletResponse resp,final OutputStream out,final String xslPath,final RepositoryConnection con,String queryText,final WorkbenchRequest req,final CookieHandler cookies) throws BadRequestException, RDF4JException {  final QueryLanguage queryLn=QueryLanguage.valueOf(req.getParameter("queryLn"));  Query query=QueryFactory.prepareQuery(con,queryLn,queryText);  boolean evaluateCookie=false;  int offset=req.getInt("offset");  int limit=req.getInt("limit_query");  boolean paged=limit > 0;  if (query instanceof GraphQuery || query instanceof TupleQuery) {    final int know_total=req.getInt("know_total");    evaluateCookie=know_total <= 0;    if (!evaluateCookie) {      cookies.addTotalResultCountCookie(req,resp,know_total);    }    if (paged) {      PagedQuery pagedQuery=new PagedQuery(queryText,queryLn,limit,offset);      if (pagedQuery.isPaged()) {        offset=pagedQuery.getOffset();        limit=pagedQuery.getLimit();      }      if (!evaluateCookie) {        query=QueryFactory.prepareQuery(con,queryLn,pagedQuery.toString());      }    }  }  if (req.isParameterPresent("infer")) {    final boolean infer=Boolean.parseBoolean(req.getParameter("infer"));    query.setIncludeInferred(infer);  }  this.evaluate(builder,out,xslPath,req,resp,cookies,query,evaluateCookie,paged,offset,limit);}  }
class C{  public String validateLogin(KeyNamePair org){  int AD_Client_ID=Env.getAD_Client_ID(m_ctx);  int AD_Org_ID=org.getKey();  int AD_Role_ID=Env.getAD_Role_ID(m_ctx);  int AD_User_ID=Env.getAD_User_ID(m_ctx);  String error=ModelValidationEngine.get().loginComplete(AD_Client_ID,AD_Org_ID,AD_Role_ID,AD_User_ID);  if (error != null && error.length() > 0) {    log.severe("Refused: " + error);    return error;  }  return null;}  }
class C{  public void clear(){  map.clear();}  }
class C{  public int map(int addr,int len,boolean read,boolean write,boolean exec) throws MemoryMapException {  return map(addr,len,read,write,exec,true);}  }
class C{  public LegacyFieldType(LegacyFieldType ref){  super(ref);  this.numericType=ref.numericType;  this.numericPrecisionStep=ref.numericPrecisionStep;}  }
class C{  public void disableDashedLine(){  mDashPathEffect=null;}  }
class C{  protected String encodeBody(){  StringBuffer s=new StringBuffer();  s.append(protocol);  if (parameters != null && !parameters.isEmpty())   s.append(SEMICOLON).append(parameters.encode());  return s.toString();}  }
class C{  public float[] toArray(){  return this.points;}  }
class C{  public String toString(){  return super.toString() + "{" + code_string()+ "}";}  }
class C{  public jMatrix arrayTimesEquals(jMatrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] * B.A[i][j];    }  }  return this;}  }
class C{  public static void checkHttpContentLengthError(final boolean forceCloseSocket,final List<ISpeedTestListener> listenerList,final HttpFrame httpFrame){  if (httpFrame.getContentLength() <= 0) {    if (!forceCloseSocket) {      for (int i=0; i < listenerList.size(); i++) {        listenerList.get(i).onDownloadError(SpeedTestError.INVALID_HTTP_RESPONSE,"Error content length " + "is inconsistent");      }    } else {      for (int i=0; i < listenerList.size(); i++) {        listenerList.get(i).onInterruption();      }    }  }}  }
class C{  public Files files(){  return new Files();}  }
class C{  public static String extractExceptionReason(Throwable t){  if (t == null) {    return Logging.getMessage("generic.Unknown");  }  StringBuilder sb=new StringBuilder();  String message=t.getMessage();  if (!WWUtil.isEmpty(message))   sb.append(message);  String messageClass=t.getClass().getName();  Throwable cause=t.getCause();  if (null != cause && cause != t) {    String causeMessage=cause.getMessage();    String causeClass=cause.getClass().getName();    if (!WWUtil.isEmpty(messageClass) && !WWUtil.isEmpty(causeClass) && !messageClass.equals(causeClass)) {      if (sb.length() != 0) {        sb.append(" : ");      }      sb.append(causeClass).append(" (").append(causeMessage).append(")");    }  }  if (sb.length() == 0) {    sb.append(messageClass);  }  return sb.toString();}  }
class C{  public int capacity(){  return _capacity;}  }
class C{  @Override public boolean dpllSatisfiable(Sentence s){  Set<Clause> clauses=ConvertToConjunctionOfClauses.convert(s).getClauses();  List<PropositionSymbol> symbols=getPropositionSymbolsInSentence(s);  return dpll(clauses,symbols,new Model());}  }
class C{  public SplittedExampleSet(ExampleSet exampleSet,double[] splitRatios,int samplingType,boolean useLocalRandomSeed,int seed) throws UserError {  this(exampleSet,new Partition(splitRatios,exampleSet.size(),createPartitionBuilder(exampleSet,samplingType,useLocalRandomSeed,seed,true)));}  }
class C{  @Override public void removeNode(final InstructionGraphNode node){  super.removeNode(node);}  }
class C{  public void assertAvailableChatSession(String errorMessage){  if (!isChatSessionAvailable()) {    throw new ServerApiMaxAllowedSessionLimitReachedException(errorMessage);  }}  }
class C{  public static int computeStringWidth(FontMetrics fm,String str){  return SwingUtilities2.stringWidth(null,fm,str);}  }
class C{  private void calculateD(double[] b){  int length=mExtremalIndices.size() - 1;  mD=new double[length];  for (int k=0; k < length; k++) {    mD[k]=b[k] * (mGrid.getCosineFrequencyGrid()[mExtremalIndices.get(k)] - mGrid.getCosineFrequencyGrid()[mExtremalIndices.get(length)]);  }}  }
class C{  void destroyVirtualVolume(String virtualVolumeName) throws VPlexApiException {  s_logger.info("Destroying virtual volume {}",virtualVolumeName);  VPlexVirtualVolumeInfo virtualVolumeInfo=null;  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  List<VPlexClusterInfo> clusterInfoList=discoveryMgr.getClusterInfoLite();  for (  VPlexClusterInfo clusterInfo : clusterInfoList) {    virtualVolumeInfo=discoveryMgr.findVirtualVolume(clusterInfo.getName(),virtualVolumeName,false);    if (virtualVolumeInfo != null) {      break;    }  }  if (virtualVolumeInfo != null) {    ClientResponse response=null;    try {      URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_DESTROY_VIRTUAL_VOLUME);      s_logger.info("Destroy virtual volume URI is {}",requestURI.toString());      Map<String,String> argsMap=new HashMap<String,String>();      argsMap.put(VPlexApiConstants.ARG_DASH_V,virtualVolumeInfo.getPath());      JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,true);      s_logger.info("Destroy POST data is {}",postDataObject.toString());      response=_vplexApiClient.post(requestURI,postDataObject.toString());      String responseStr=response.getEntity(String.class);      s_logger.info("Destroy virtual volume response is {}",responseStr);      if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {        if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {          s_logger.info("Destroying of resource is completing asynchronously");          _vplexApiClient.waitForCompletion(response);        } else {          String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);          throw VPlexApiException.exceptions.deleteVolumeFailureStatus(virtualVolumeName,String.valueOf(response.getStatus()),cause);        }      }      s_logger.info("Resource {} successfully destroyed.",virtualVolumeInfo.getPath());    } catch (    VPlexApiException vae) {      throw vae;    }catch (    Exception e) {      throw VPlexApiException.exceptions.failedDeleteVolume(virtualVolumeName,e);    } finally {      if (response != null) {        response.close();      }    }  }}  }
class C{  public void deleteConnection(Connection connection){  SQLiteDatabase db=getWritableDatabase();  db.delete(TABLE_CONNECTIONS,_ID + "=?",new String[]{String.valueOf(connection.persistenceId())});  db.close();}  }
class C{  protected void initializeWorld(){  SimulationBody floor=new SimulationBody();  floor.addFixture(Geometry.createRectangle(20,1));  floor.setMass(MassType.INFINITE);  this.world.addBody(floor);  SimulationBody triangle=new SimulationBody();  triangle.addFixture(Geometry.createTriangle(new Vector2(0.0,0.5),new Vector2(-0.5,-0.5),new Vector2(0.5,-0.5)));  triangle.translate(new Vector2(-1.0,2.0));  triangle.setLinearVelocity(new Vector2(5.0,0.0));  triangle.setMass(MassType.NORMAL);  world.addBody(triangle);  SimulationBody circle=new SimulationBody();  circle.addFixture(Geometry.createCircle(0.5));  circle.translate(new Vector2(2.0,2.0));  circle.applyForce(new Vector2(-100.0,0.0));  circle.setLinearDamping(0.05);  circle.setMass(MassType.NORMAL);  world.addBody(circle);  SimulationBody segment=new SimulationBody();  segment.addFixture(Geometry.createSegment(new Vector2(0.5,0.5),new Vector2(-0.5,-0.5)));  segment.translate(new Vector2(1.0,6.0));  segment.setMass(MassType.NORMAL);  world.addBody(segment);  SimulationBody square=new SimulationBody();  square.addFixture(Geometry.createSquare(1.0));  square.translate(new Vector2(0.0,2.0));  square.setLinearVelocity(new Vector2(-5.0,0.0));  square.setMass(MassType.NORMAL);  world.addBody(square);  SimulationBody decagon=new SimulationBody();  decagon.addFixture(Geometry.createUnitCirclePolygon(10,0.5));  decagon.translate(new Vector2(-2.5,2.0));  decagon.setAngularVelocity(Math.toRadians(-20.0));  decagon.setMass(MassType.NORMAL);  world.addBody(decagon);  SimulationBody capsule=new SimulationBody();  capsule.addFixture(Geometry.createCapsule(2,1));  capsule.translate(new Vector2(0.0,4.0));  capsule.setMass(MassType.NORMAL);  world.addBody(capsule);  SimulationBody isosceles=new SimulationBody();  isosceles.addFixture(Geometry.createIsoscelesTriangle(0.5,0.5));  isosceles.translate(new Vector2(2,3.5));  isosceles.setMass(MassType.NORMAL);  world.addBody(isosceles);  SimulationBody equilateral=new SimulationBody();  equilateral.addFixture(Geometry.createEquilateralTriangle(1));  equilateral.translate(new Vector2(3.5,4.5));  equilateral.setMass(MassType.NORMAL);  world.addBody(equilateral);  SimulationBody right=new SimulationBody();  right.addFixture(Geometry.createRightTriangle(1,0.5));  right.translate(new Vector2(4.0,3.0));  right.setMass(MassType.NORMAL);  world.addBody(right);}  }
class C{  public boolean hasActiveMASC(){  for (final Enumeration<MoveStep> i=getSteps(); i.hasMoreElements(); ) {    final MoveStep step=i.nextElement();    if (step.isUsingMASC()) {      return true;    }  }  return false;}  }
class C{  protected boolean executeDefaultAction(List<UITouch> touches,PLTouchEventType eventType){  int touchCount=touches.size();  if (touchCount == mNumberOfTouchesForReset) {    mIsValidForFov=false;    if (eventType == PLTouchEventType.PLTouchEventTypeBegan)     this.executeResetAction(touches);  } else   if (touchCount == 2) {    boolean isNotCancelable=true;    if (mListener != null)     isNotCancelable=mListener.onShouldBeginZooming(this);    if (isNotCancelable) {      if (!mIsValidForFov) {        mFovCounter=0;        mIsValidForFov=true;      }      if (eventType == PLTouchEventType.PLTouchEventTypeMoved)       this.calculateFov(touches); else       if (eventType == PLTouchEventType.PLTouchEventTypeBegan) {        mAuxiliarStartPoint.setValues(touches.get(0).locationInView(mGLSurfaceView));        mAuxiliarEndPoint.setValues(touches.get(1).locationInView(mGLSurfaceView));        if (mListener != null)         mListener.onDidBeginZooming(this,mAuxiliarStartPoint,mAuxiliarEndPoint);      }    }  } else   if (touchCount == 1) {    if (eventType == PLTouchEventType.PLTouchEventTypeMoved) {      if (mIsValidForFov || (mStartPoint.x == 0.0f && mEndPoint.y == 0.0f))       mStartPoint.setValues(this.getLocationOfFirstTouch(touches));    } else     if (eventType == PLTouchEventType.PLTouchEventTypeEnded && mStartPoint.x == 0.0f && mEndPoint.y == 0.0f)     mStartPoint.setValues(this.getLocationOfFirstTouch(touches));    mIsValidForFov=false;    return false;  }  return true;}  }
class C{  public static void main(String[] args) throws Exception {  int res=ToolRunner.run(new MetastoreReplicationJob(),args);  System.exit(res);}  }
class C{  void actionCommandImplNoRecurseComponent(Command cmd,ActionEvent ev){  if (cmd == null) {    return;  }  if (comboLock) {    if (cmd == menuBar.getCancelMenuItem()) {      actionCommand(cmd);      return;    }    return;  }  if (cmd != menuBar.getSelectCommand()) {    if (commandListener != null) {      commandListener.fireActionEvent(ev);      if (ev.isConsumed()) {        return;      }    }    actionCommand(cmd);  }}  }
class C{  public Map<String,Object> retrieveInternal(boolean loadedOnly){  Map<String,Object> model=new HashMap<String,Object>();  FloodlightModuleLoader floodlightModuleLoader=(FloodlightModuleLoader)getContext().getAttributes().get(FloodlightModuleLoader.class.getCanonicalName());  Set<String> loadedModules=new HashSet<String>();  for (  Object val : getContext().getAttributes().values()) {    if ((val instanceof IFloodlightModule) || (val instanceof IFloodlightService)) {      String serviceImpl=val.getClass().getCanonicalName();      loadedModules.add(serviceImpl);    }  }  for (  String moduleName : floodlightModuleLoader.getModuleNameMap().keySet()) {    Map<String,Object> moduleInfo=new HashMap<String,Object>();    IFloodlightModule module=floodlightModuleLoader.getModuleNameMap().get(moduleName);    Collection<Class<? extends IFloodlightService>> deps=module.getModuleDependencies();    if (deps == null)     deps=new HashSet<Class<? extends IFloodlightService>>();    Map<String,Object> depsMap=new HashMap<String,Object>();    for (    Class<? extends IFloodlightService> service : deps) {      Object serviceImpl=getContext().getAttributes().get(service.getCanonicalName());      if (serviceImpl != null)       depsMap.put(service.getCanonicalName(),serviceImpl.getClass().getCanonicalName()); else       depsMap.put(service.getCanonicalName(),"<unresolved>");    }    moduleInfo.put("depends",depsMap);    Collection<Class<? extends IFloodlightService>> provides=module.getModuleServices();    if (provides == null)     provides=new HashSet<Class<? extends IFloodlightService>>();    Map<String,Object> providesMap=new HashMap<String,Object>();    for (    Class<? extends IFloodlightService> service : provides) {      providesMap.put(service.getCanonicalName(),module.getServiceImpls().get(service).getClass().getCanonicalName());    }    moduleInfo.put("provides",providesMap);    moduleInfo.put("loaded",false);    if (loadedModules.contains(module.getClass().getCanonicalName())) {      moduleInfo.put("loaded",true);    } else {      for (      Class<? extends IFloodlightService> service : provides) {        String modString=module.getServiceImpls().get(service).getClass().getCanonicalName();        if (loadedModules.contains(modString))         moduleInfo.put("loaded",true);      }    }    if ((Boolean)moduleInfo.get("loaded") || !loadedOnly)     model.put(moduleName,moduleInfo);  }  return model;}  }
class C{  public LinkRef addLinkRef(final String key,final String link,final String title){  final String lowerCase=key.toLowerCase();  final LinkRef linkRef;  if (this.linkRefs.containsKey(lowerCase)) {    linkRef=new LinkRef(this.linkRefs.get(lowerCase).seqNumber,link,title);  } else {    linkRef=new LinkRef(this.linkRefs.size() + 1,link,title);  }  this.linkRefs.put(lowerCase,linkRef);  return linkRef;}  }
class C{  public static boolean contains(long[] array,long valueToFind){  return indexOf(array,valueToFind) != INDEX_NOT_FOUND;}  }
class C{  public static void readFromFileChannelWithEofException(FileChannel channel,long channelPosition,byte[] dest,int destOffset,int length) throws IOException {  int read=readFromFileChannel(channel,channelPosition,dest,destOffset,length);  if (read < 0) {    throw new EOFException("read past EOF. pos [" + channelPosition + "] length: ["+ length+ "] end: ["+ channel.size()+ "]");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.077 -0500",hash_original_method="5ED9C031E5D9227A40A639080CADBFC4",hash_generated_method="22BF3ECCFE3C34E0208F4D8D850AF163") public Schema schema(){  return theSchema;}  }
class C{  public TerminalSize withRelativeRows(int delta){  if (delta == 0) {    return this;  }  return withRows(rows + delta);}  }
class C{  public void testStatisticsTracking() throws Exception {  HttpResponseCache cache=HttpResponseCache.install(cacheDir,10 * 1024 * 1024);  server.enqueue(new MockResponse().addHeader("Cache-Control: max-age=60").setBody("A"));  server.play();  URLConnection c1=server.getUrl("/").openConnection();  assertEquals('A',c1.getInputStream().read());  assertEquals(1,cache.getRequestCount());  assertEquals(1,cache.getNetworkCount());  assertEquals(0,cache.getHitCount());  URLConnection c2=server.getUrl("/").openConnection();  assertEquals('A',c2.getInputStream().read());  URLConnection c3=server.getUrl("/").openConnection();  assertEquals('A',c3.getInputStream().read());  assertEquals(3,cache.getRequestCount());  assertEquals(1,cache.getNetworkCount());  assertEquals(2,cache.getHitCount());}  }
class C{  private void addSmallIcon(RemoteViews notificationView){  notificationView.setInt(R.id.simple_sound_cloud_notification_icon,"setBackgroundResource",mNotificationConfig.getNotificationIconBackground());  notificationView.setImageViewResource(R.id.simple_sound_cloud_notification_icon,mNotificationConfig.getNotificationIcon());}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  private void addDockingCell(int[] dockInsets,int side,CompWrap cw){  int r, c, spanx=1, spany=1;switch (side) {case 0:case 2:    r=side == 0 ? dockInsets[0]++ : dockInsets[2]--;  c=dockInsets[1];spanx=dockInsets[3] - dockInsets[1] + 1;colIndexes.add(dockInsets[3]);break;case 1:case 3:c=side == 1 ? dockInsets[1]++ : dockInsets[3]--;r=dockInsets[0];spany=dockInsets[2] - dockInsets[0] + 1;rowIndexes.add(dockInsets[2]);break;default :throw new IllegalArgumentException("Internal error 123.");}rowIndexes.add(r);colIndexes.add(c);grid.put((r << 16) + c,new Cell(cw,spanx,spany,spanx > 1));}  }
class C{  private void addConsoleAppenderIfNeeded(@Nullable Level logLevel,@Nullable IgniteClosure<Boolean,Logger> implInitC){  if (inited) {    if (implInitC != null)     impl=implInitC.apply(false);    return;  }synchronized (mux) {    if (inited) {      if (implInitC != null)       impl=implInitC.apply(false);      return;    }    if (implInitC != null)     impl=implInitC.apply(true);    boolean quiet=Boolean.valueOf(System.getProperty(IGNITE_QUIET,"true"));    boolean consoleAppenderFound=false;    Category rootCategory=null;    ConsoleAppender errAppender=null;    for (Category l=impl; l != null; ) {      if (!consoleAppenderFound) {        for (Enumeration appenders=l.getAllAppenders(); appenders.hasMoreElements(); ) {          Appender appender=(Appender)appenders.nextElement();          if (appender instanceof ConsoleAppender) {            if ("CONSOLE_ERR".equals(appender.getName())) {              errAppender=(ConsoleAppender)appender;              continue;            }            consoleAppenderFound=true;            break;          }        }      }      if (l.getParent() == null) {        rootCategory=l;        break;      } else       l=l.getParent();    }    if (consoleAppenderFound && quiet)     quiet=false;    if (!consoleAppenderFound && !quiet && Boolean.valueOf(System.getProperty(IGNITE_CONSOLE_APPENDER,"true"))) {      assert rootCategory != null;      if (errAppender != null) {        rootCategory.addAppender(createConsoleAppender(Level.INFO));        if (errAppender.getThreshold() == Level.ERROR)         errAppender.setThreshold(Level.WARN);      } else       rootCategory.addAppender(createConsoleAppender(Level.OFF));      if (logLevel != null)       impl.setLevel(logLevel);    }    quiet0=quiet;    inited=true;  }}  }
class C{  public static List<List<String>> chunkFiles(@NotNull VirtualFile root,@NotNull Collection<VirtualFile> files){  return chunkRelativePaths(toRelativeFiles(root,files));}  }
class C{  public static float mod2pi(float x){  float factor=x / MathUtil.TWO_PI;  float result=MathUtil.TWO_PI * (factor - abs_floor(factor));  if (result < 0.0) {    result=MathUtil.TWO_PI + result;  }  return result;}  }
class C{  protected RTAMouseListener createMouseListener(){  return new RTextAreaMutableCaretEvent(this);}  }
class C{  public static String installPackageFromURL(URL packageURL,PrintStream... progress) throws Exception {  useCacheOrOnlineRepository();  String packageName=PACKAGE_MANAGER.installPackageFromURL(packageURL,progress);  Package installed=PACKAGE_MANAGER.getInstalledPackageInfo(packageName);  Object specialInstallMessage=installed.getPackageMetaDataElement("MessageToDisplayOnInstallation");  if (specialInstallMessage != null && specialInstallMessage.toString().length() > 0) {    String message="**** Special installation message ****\n" + specialInstallMessage.toString() + "\n**** Special installation message ****";    for (    PrintStream p : progress) {      p.println(message);    }  }  boolean loadIt=checkForMissingClasses(installed,progress);  if (loadIt) {    File packageRoot=new File(PACKAGE_MANAGER.getPackageHome() + File.separator + installed.getName());    loadIt=checkForMissingFiles(installed,packageRoot,progress);    if (loadIt) {      loadPackageDirectory(packageRoot,false,null,false);    }  }  return packageName;}  }
class C{  protected void processCloudletResume(int cloudletId,int userId,int vmId,int containerId,boolean ack){  double eventTime=getVmAllocationPolicy().getHost(vmId,userId).getContainerVm(vmId,userId).getContainer(containerId,userId).getContainerCloudletScheduler().cloudletResume(cloudletId);  boolean status=false;  if (eventTime > 0.0) {    status=true;    if (eventTime > CloudSim.clock()) {      schedule(getId(),eventTime,CloudSimTags.VM_DATACENTER_EVENT);    }  }  if (ack) {    int[] data=new int[3];    data[0]=getId();    data[1]=cloudletId;    if (status) {      data[2]=CloudSimTags.TRUE;    } else {      data[2]=CloudSimTags.FALSE;    }    sendNow(userId,CloudSimTags.CLOUDLET_RESUME_ACK,data);  }}  }
class C{  public JavaRDD<Polygon> rePartition(Integer partitions){  return this.rawPolygonRDD.repartition(partitions);}  }
class C{  public int length(){  return length;}  }
class C{  private void updateTargetsInExportMask(StorageSystem storage,Volume volume,Map<Volume,Map<String,List<String>>> volumeToInitiatorTargetMapFromAttachResponse,List<Initiator> fcInitiatorList,ExportMask exportMask) throws Exception {  log.debug("START - updateTargetsInExportMask");  Map<URI,List<URI>> mapFilteredInitiatorURIVsTargetURIList=new HashMap<URI,List<URI>>();  Map<String,URI> initiatorsWWNVsURI=getWWNvsURIFCInitiatorsMap(fcInitiatorList);  URI varrayURI=volume.getVirtualArray();  Map<String,URI> mapVarrayTaggedPortWWNVsURI=getVarrayTaggedStoragePortWWNs(storage,varrayURI);  Set<String> varrayTaggedPortWWNs=mapVarrayTaggedPortWWNVsURI.keySet();  URI vpoolURI=volume.getVirtualPool();  VirtualPool vpool=dbClient.queryObject(VirtualPool.class,vpoolURI);  int pathsPerInitiator=vpool.getPathsPerInitiator();  Set<Volume> volumeKeysSet=volumeToInitiatorTargetMapFromAttachResponse.keySet();  for (  Volume volumeRes : volumeKeysSet) {    log.info(String.format("Processing attach response for the volume with URI %s and name %s",volumeRes.getId(),volumeRes.getLabel()));    Map<String,List<String>> initiatorTargetMap=volumeToInitiatorTargetMapFromAttachResponse.get(volumeRes);    Set<String> initiatorKeysSet=initiatorTargetMap.keySet();    for (    String initiatorKey : initiatorKeysSet) {      List<String> filteredTargetList=filterTargetsFromResponse(varrayTaggedPortWWNs,initiatorTargetMap,initiatorKey);      log.info(String.format("For initiator %s accessible storage ports are %s ",initiatorKey,filteredTargetList.toString()));      List<String> tmpTargetList=null;      if (!isVplex(volumeRes)) {        tmpTargetList=checkPathsPerInitiator(pathsPerInitiator,filteredTargetList);        if (null == tmpTargetList) {          throw new Exception(String.format("Paths per initiator criteria is not met for the initiator : %s " + " Target counts is: %s Expected paths per initiator is: %s",initiatorKey,String.valueOf(filteredTargetList.size()),String.valueOf(pathsPerInitiator)));        }      } else {        tmpTargetList=filteredTargetList;      }      populateInitiatorTargetURIMap(mapFilteredInitiatorURIVsTargetURIList,initiatorsWWNVsURI,mapVarrayTaggedPortWWNVsURI,initiatorKey,tmpTargetList);    }  }  List<URI> storagePortListFromMask=StringSetUtil.stringSetToUriList(exportMask.getStoragePorts());  for (  URI removeUri : storagePortListFromMask) {    exportMask.removeTarget(removeUri);  }  exportMask.setStoragePorts(null);  Set<URI> initiatorURIKeys=mapFilteredInitiatorURIVsTargetURIList.keySet();  for (  URI initiatorURI : initiatorURIKeys) {    List<URI> storagePortURIList=mapFilteredInitiatorURIVsTargetURIList.get(initiatorURI);    for (    URI portURI : storagePortURIList) {      exportMask.addTarget(portURI);    }  }  log.debug("END - updateTargetsInExportMask");}  }
class C{  public static void printToFile(String filename,String message,boolean append){  printToFile(new File(filename),message,append);}  }
class C{  public Plane(float width,float height,int segmentsW,int segmentsH,Axis upAxis,boolean createTextureCoordinates,boolean createVertexColorBuffer,int numTextureTiles,boolean createVBOs){  super();  mWidth=width;  mHeight=height;  mSegmentsW=segmentsW;  mSegmentsH=segmentsH;  mUpAxis=upAxis;  mCreateTextureCoords=createTextureCoordinates;  mCreateVertexColorBuffer=createVertexColorBuffer;  mNumTextureTiles=numTextureTiles;  init(createVBOs);}  }
class C{  @DSSink({DSSinkKind.LOG}) @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:35.398 -0500",hash_original_method="0FA200A9B65429375731C8E52EE8CDC0",hash_generated_method="07F34EE4496765EAD403180F4AE8BD23") public void log(Level logLevel,String msg){  if (!internalIsLoggable(logLevel)) {    return;  }  dalvikLogHandler.publish(this,androidTag,logLevel,msg);}  }
class C{  public MapElementState findMapElementState(MapElementState.Type type,String name){  for (int i=0; i < mapElementStateList.size(); ++i) {    MapElementState state=mapElementStateList.get(i);    if (state.mapElementType == type) {      if (name == null) {        return (state);      } else       if (state.name.equals(name)) {        return (state);      }    }  }  return (null);}  }
class C{  public void countDown(){  sync.releaseShared(1);}  }
class C{  public XYBubbleRenderer(int scaleType){  super();  if (scaleType < 0 || scaleType > 2) {    throw new IllegalArgumentException("Invalid 'scaleType'.");  }  this.scaleType=scaleType;  setBaseLegendShape(new Ellipse2D.Double(-4.0,-4.0,8.0,8.0));}  }
class C{  public static ComponentUI createUI(JComponent x){  return new SynthSplitPaneUI();}  }
class C{  protected JsonToken _handleInvalidNumberStart(int ch,boolean negative) throws IOException, JsonParseException {  if (ch == 'I') {    if (_inputPtr >= _inputEnd) {      if (!loadMore()) {        _reportInvalidEOFInValue();      }    }    ch=_inputBuffer[_inputPtr++];    if (ch == 'N') {      String match=negative ? "-INF" : "+INF";      _matchToken(match,3);      if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {        return resetAsNaN(match,negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);      }      _reportError("Non-standard token '" + match + "': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");    } else     if (ch == 'n') {      String match=negative ? "-Infinity" : "+Infinity";      _matchToken(match,3);      if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {        return resetAsNaN(match,negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);      }      _reportError("Non-standard token '" + match + "': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");    }  }  reportUnexpectedNumberChar(ch,"expected digit (0-9) to follow minus sign, for valid numeric value");  return null;}  }
class C{  public void removeAtCommitStop(Value v){  if (removeLobMap != null) {    removeLobMap.remove(v.toString());  }}  }
class C{  public static float convert(String stringValue){  if (Strings.isNullOrEmpty(stringValue) || TypeUtils.MISSING_INDICATORS.contains(stringValue)) {    return MISSING_VALUE;  }  Matcher matcher=COMMA_PATTERN.matcher(stringValue);  return Float.parseFloat(matcher.replaceAll(""));}  }
class C{  public void writeToPacketNBT(NBTTagCompound cmp){}  }
class C{  private static BigDecimal computeSeconds(Duration d){  return d.getSeconds().add(new BigDecimal(d.getDays().multiply(BigInteger.valueOf(24)).add(d.getHours()).multiply(BigInteger.valueOf(60)).add(d.getMinutes()).multiply(BigInteger.valueOf(60))));}  }
class C{  public FIXValue addField(int tag){  FIXField field=fields[count++];  field.setTag(tag);  return field.getValue();}  }
class C{  public static <K>void addToDoubleInMap(Map<K,Object> theMap,K key,Double value){  Double curValue=(Double)theMap.get(key);  if (curValue != null) {    theMap.put(key,curValue + value);  } else {    theMap.put(key,value);  }}  }
class C{  public boolean isBookmarkingEnabled(){  return iconArea.isBookmarkingEnabled();}  }
class C{  public static GetNumberOfEntities parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  GetNumberOfEntities object=new GetNumberOfEntities();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"getNumberOfEntities".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (GetNumberOfEntities)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","entityType").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setEntityType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @Override public int compareTo(IntArrayWrapper other){  for (int i=0; i < data.length; i++) {    if (data[i] > other.data[i]) {      return 1;    } else     if (data[i] < other.data[i]) {      return -1;    }  }  return 0;}  }
class C{  public MonthDateFormat(Locale locale,int chars){  this(TimeZone.getDefault(),locale,chars,true,false);}  }
class C{  public TransactionInput addInput(TransactionInput input){  unCache();  input.setParent(this);  inputs.add(input);  adjustLength(inputs.size(),input.length);  return input;}  }
class C{  public static double asinh(double a){  boolean negative=false;  if (a < 0) {    negative=true;    a=-a;  }  double absAsinh;  if (a > 0.167) {    absAsinh=FastMath.log(FastMath.sqrt(a * a + 1) + a);  } else {    final double a2=a * a;    if (a > 0.097) {      absAsinh=a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);    } else     if (a > 0.036) {      absAsinh=a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);    } else     if (a > 0.0036) {      absAsinh=a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);    } else {      absAsinh=a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);    }  }  return negative ? -absAsinh : absAsinh;}  }
class C{  protected void paintMatchedBracket(Graphics g){  RSyntaxTextArea rsta=(RSyntaxTextArea)textArea;  if (rsta.isBracketMatchingEnabled()) {    Rectangle match=rsta.match;    if (match != null) {      if (rsta.getAnimateBracketMatching()) {        g.setColor(rsta.getMatchedBracketBGColor());        g.fillRoundRect(match.x,match.y,match.width,match.height - 1,5,5);        g.setColor(rsta.getMatchedBracketBorderColor());        g.drawRoundRect(match.x,match.y,match.width,match.height - 1,5,5);      } else {        g.setColor(rsta.getMatchedBracketBGColor());        g.fillRect(match.x,match.y,match.width,match.height - 1);        g.setColor(rsta.getMatchedBracketBorderColor());        g.drawRect(match.x,match.y,match.width,match.height - 1);      }    }  }}  }
class C{  public void addAttribute(String name,String type,String value){  names.add(name);  types.add(type);  values.add(value);}  }
class C{  @Override public byte[] asBytes(int rowNumber){  return ByteBuffer.allocate(4).putInt(getInt(rowNumber)).array();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'SISTER_CACHE' ("+ "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "'RESULT' TEXT,"+ "'PAGE' INTEGER,"+ "'TIME' INTEGER);");}  }
class C{  @Override public void updateRef(int columnIndex,Ref x) throws SQLException {  throw unsupported("ref");}  }
class C{  public Vset checkValue(Environment env,Context ctx,Vset vset,Hashtable exp){  if (ctx.field.isStatic()) {    env.error(where,"undef.var",opNames[op]);    type=Type.tError;    return vset;  }  if (field == null) {    field=ctx.getLocalField(idThis);    field.readcount++;  }  if (field.scopeNumber < ctx.frameNumber) {    implementation=ctx.makeReference(env,field);  }  if (!vset.testVar(field.number)) {    env.error(where,"access.inst.before.super",opNames[op]);  }  if (field == null) {    type=ctx.field.getClassDeclaration().getType();  } else {    type=field.getType();  }  return vset;}  }
class C{  @Override public void beginTransaction() throws IOException {  if (inTransaction)   throw new IllegalStateException("You can't start a transaction twice. this: " + this);  inTransaction=true;  lastTransactionInsertId=committedNextRowId - 1;  hardWriteMode=false;  File f=getRollBackFile();  rollBackOut=new BufferedOutputStream(rollBackFileOut=new FileOutputStream(f,true));  writeRollBackHeader(committedNextRowId);}  }
class C{  private void writeRawBytesInternal(final ByteBuffer value) throws IOException {  int length=value.remaining();  if (limit - position >= length) {    value.get(buffer,position,length);    position+=length;    totalBytesWritten+=length;  } else {    final int bytesWritten=limit - position;    value.get(buffer,position,bytesWritten);    length-=bytesWritten;    position=limit;    totalBytesWritten+=bytesWritten;    refreshBuffer();    while (length > limit) {      value.get(buffer,0,limit);      output.write(buffer,0,limit);      length-=limit;      totalBytesWritten+=limit;    }    value.get(buffer,0,length);    position=length;    totalBytesWritten+=length;  }}  }
class C{  public CourtesyHistogram(final int binSize,final int nofBins){  super();  this.binSize=binSize;  this.nofBins=nofBins;  reset(0);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ServiceCall<Void> deleteClassifier(String classifierId){  Validator.isTrue((classifierId != null) && !classifierId.isEmpty(),"classifierId cannot be null or empty");  RequestBuilder requestBuilder=RequestBuilder.delete(String.format(PATH_CLASSIFIER,classifierId));  requestBuilder.query(VERSION,versionDate);  return createServiceCall(requestBuilder.build(),ResponseConverterUtils.getVoid());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private Automaton naiveLev1(String s){  Automaton a=Automata.makeString(s);  a=Operations.union(a,insertionsOf(s));  a=MinimizationOperations.minimize(a,DEFAULT_MAX_DETERMINIZED_STATES);  a=Operations.union(a,deletionsOf(s));  a=MinimizationOperations.minimize(a,DEFAULT_MAX_DETERMINIZED_STATES);  a=Operations.union(a,substitutionsOf(s));  a=MinimizationOperations.minimize(a,DEFAULT_MAX_DETERMINIZED_STATES);  return a;}  }
class C{  public void error(String format,Object arg1,Object arg2){  formatAndLog(Log.ERROR,format,arg1,arg2);}  }
class C{  public TurnCandidateHarvester(TransportAddress turnServer){  this(turnServer,(LongTermCredential)null);}  }
class C{  boolean isSingleInterpolationLiteral(){  return dynamicValue != null && dynamicValue.size() == 1 && dynamicValue.get(0) instanceof Interpolation;}  }
class C{  public static void handleCrashesOnThisThread(){  Thread.currentThread().setUncaughtExceptionHandler(null);}  }
class C{  public boolean contains(final int x,final int leftRadius,final int rightRadius){  if (this == EMPTY_INTERVAL)   throw new IllegalArgumentException();  return x >= left - leftRadius && x <= right + rightRadius;}  }
class C{  public static float svgOtherCoordinateToObjectBoundingBox(String s,String attr,Context ctx){  return svgToObjectBoundingBox(s,attr,OTHER_LENGTH,ctx);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeappendchilddocfragment.class,args);}  }
class C{  private Node firstOfMode(boolean isData){  for (Node p=head; p != null; p=succ(p)) {    if (!p.isMatched())     return (p.isData == isData) ? p : null;  }  return null;}  }
class C{  public void logSdkEvent(String eventName,Double valueToSum,Bundle parameters){  logEvent(eventName,valueToSum,parameters,true);}  }
