class C{  public static boolean checkRootPermission(){  return execCommand("echo root",true,false).result == 0;}  }
class C{  private String createNewReview(TaskData taskData,AppraisePluginReviewClient client) throws CoreException {  boolean canRequestReview=client.canRequestReview(taskData);  if (!canRequestReview) {    throw new CoreException(Status.CANCEL_STATUS);  }  String taskId=null;  try {    Review review=buildReviewFromTaskData(taskData);    review.setTimestamp(System.currentTimeMillis() / 1000);    String reviewCommitHash=getReviewCommitHash(taskData);    taskId=client.writeReview(reviewCommitHash,review);    if (taskId == null) {      throw new CoreException(Status.CANCEL_STATUS);    }  } catch (  GitClientException e) {    throw new CoreException(new Status(IStatus.ERROR,AppraiseConnectorPlugin.PLUGIN_ID,"Failed to write review",e));  }  return taskId;}  }
class C{  public TokenizerChain(CharFilterFactory[] charFilters,TokenizerFactory tokenizer,TokenFilterFactory[] filters){  charFilters=null == charFilters ? EMPTY_CHAR_FITLERS : charFilters;  filters=null == filters ? EMPTY_TOKEN_FITLERS : filters;  if (null == tokenizer) {    throw new NullPointerException("TokenizerFactory must not be null");  }  this.charFilters=charFilters;  this.tokenizer=tokenizer;  this.filters=filters;}  }
class C{  public void playStream(Stream stream){  if (player.isPlaying()) {    player.stop();  }  player.reset();  try {    state=State.PREPARING;    List<String> keys=Arrays.asList(getResources().getStringArray(R.array.api_keys));    String key=keys.get((new Random()).nextInt(keys.size()));    player.setDataSource(this,Uri.parse(String.format("%s?client_id=%s",stream.getUrl(),key)));    player.setLooping(true);    player.setVolume(MAX_VOLUME,MAX_VOLUME);    currentStream=stream;  } catch (  Exception e) {    Log.e(TAG,"playStream: ",e);  }  player.prepareAsync();}  }
class C{  public Config(Properties props){  this.props=props;  if (Boolean.valueOf(props.getProperty("print.props",DEFAULT_PRINT_PROPS)).booleanValue()) {    printProps();  }}  }
class C{  public void finish() throws Exception {}  }
class C{  public String preserveOrderTipText(){  return "If enabled, no randomization is occurring and the order in the data is preserved.";}  }
class C{  public boolean include(Column col,String name){  return true;}  }
class C{  protected void addSubScopesPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ExecutionScope_subScopes_feature"),getString("_UI_PropertyDescriptor_description","_UI_ExecutionScope_subScopes_feature","_UI_ExecutionScope_type"),SexecPackage.Literals.EXECUTION_SCOPE__SUB_SCOPES,true,false,true,null,null,null));}  }
class C{  public static Double toDouble(String str) throws PageException {  return new Double(toDoubleValue(str));}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isForInfOnly(){  return forInfOnly;}  }
class C{  protected RelNode convertColumnList(SqlInsert call,RelNode sourceRel){  RelDataType sourceRowType=sourceRel.getRowType();  final RexNode sourceRef=rexBuilder.makeRangeReference(sourceRowType,0,false);  final List<String> targetColumnNames=new ArrayList<>();  final List<RexNode> columnExprs=new ArrayList<>();  collectInsertTargets(call,sourceRef,targetColumnNames,columnExprs);  final RelOptTable targetTable=getTargetTable(call);  final RelDataType targetRowType=targetTable.getRowType();  final List<RelDataTypeField> targetFields=targetRowType.getFieldList();  final List<RexNode> sourceExps=new ArrayList<>(Collections.<RexNode>nCopies(targetFields.size(),null));  final List<String> fieldNames=new ArrayList<>(Collections.<String>nCopies(targetFields.size(),null));  for (  Pair<String,RexNode> p : Pair.zip(targetColumnNames,columnExprs)) {    RelDataTypeField field=catalogReader.field(targetRowType,p.left);    assert field != null : "column " + p.left + " not found";    sourceExps.set(field.getIndex(),p.right);  }  for (int i=0; i < targetFields.size(); ++i) {    final RelDataTypeField field=targetFields.get(i);    final String fieldName=field.getName();    fieldNames.set(i,fieldName);    if (sourceExps.get(i) != null) {      if (defaultValueFactory.isGeneratedAlways(targetTable,i)) {        throw RESOURCE.insertIntoAlwaysGenerated(fieldName).ex();      }      continue;    }    sourceExps.set(i,defaultValueFactory.newColumnDefaultValue(targetTable,i));    sourceExps.set(i,castNullLiteralIfNeeded(sourceExps.get(i),field.getType()));  }  return RelOptUtil.createProject(sourceRel,sourceExps,fieldNames,true);}  }
class C{  public void rollbackDeleteCG(URI cgURI,String deleteStepId,String stepId){  try {    WorkflowStepCompleter.stepExecuting(stepId);    log.info("Updated workflow step to executing");    Object rbDataObj=workflowService.loadStepData(deleteStepId);    if (rbDataObj == null) {      log.info("CG was not deleted, nothing to do.");      WorkflowStepCompleter.stepSucceded(stepId);      return;    }    VPlexDeleteCGRollbackData rbData=(VPlexDeleteCGRollbackData)rbDataObj;    URI vplexSystemURI=rbData.getVplexSystemURI();    StorageSystem vplexSystem=getDataObject(StorageSystem.class,vplexSystemURI,dbClient);    VPlexApiClient client=getVPlexAPIClient(vplexApiFactory,vplexSystem,dbClient);    log.info("Got VPlex API client for VPlex system {}",vplexSystemURI);    String cgName=rbData.getCgName();    String clusterName=rbData.getClusterName();    client.createConsistencyGroup(cgName,clusterName,rbData.getIsDistributed().booleanValue());    log.info("Recreated CG {} on system {}",cgName,vplexSystemURI);    BlockConsistencyGroup cg=getDataObject(BlockConsistencyGroup.class,cgURI,dbClient);    cg.addSystemConsistencyGroup(vplexSystemURI.toString(),BlockConsistencyGroupUtils.buildClusterCgName(clusterName,cgName));    dbClient.persistObject(cg);    log.info("Updated consistency group in database");    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  VPlexApiException vae) {    log.error("Exception rolling back VPLEX consistency group deletion: " + vae.getMessage(),vae);    WorkflowStepCompleter.stepFailed(stepId,vae);  }catch (  Exception ex) {    log.error("Exception rolling back VPLEX consistency group deletion: " + ex.getMessage(),ex);    String opName=ResourceOperationTypeEnum.DELETE_CONSISTENCY_GROUP.getName();    ServiceError serviceError=VPlexApiException.errors.rollbackDeleteCGFailed(opName,ex);    WorkflowStepCompleter.stepFailed(stepId,serviceError);  }}  }
class C{  public Change(int line0,int line1,int deleted,int inserted,@Nullable Change old){  this.line0=line0;  this.line1=line1;  this.inserted=inserted;  this.deleted=deleted;  link=old;}  }
class C{  void write(ByteCodeWriter out) throws IOException {  out.write(ConstantPool.CP_NAME_AND_TYPE);  out.writeShort(_nameIndex);  out.writeShort(_descriptorIndex);}  }
class C{  public static void hideToast(){  if (null != toast) {    toast.cancel();  }}  }
class C{  private void hideConversationScope(){  conversationContext.setParameterName("conversationID");}  }
class C{  public static boolean flipCoin(final double propability){  return rand.nextDouble() <= propability;}  }
class C{  protected void handleDefaultSelection(SelectionEvent event){  fireApplyEditorValue();  deactivate();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:26.720 -0500",hash_original_method="9AC5D8EF15BD7837ACD785C0772615A1",hash_generated_method="822B8590C95F1D5952E9B876AE6B37EF") public final void checkAccess(){}  }
class C{  public static AuditDto transformToDto(Audit audit){  if (audit == null) {    throw new WebApplicationException("Null entity object cannot be converted to Dto object.",Status.INTERNAL_SERVER_ERROR);  }  AuditDto auditDto=new AuditDto();  try {    BeanUtils.copyProperties(auditDto,audit);    auditDto.setEntityId(audit.getEntity());  } catch (  Exception ex) {    throw new WebApplicationException("DTO transformation failed.",Status.INTERNAL_SERVER_ERROR);  }  return auditDto;}  }
class C{  static int[] calculateSerial(int[][] sizes,ResizeConstraint[] resConstr,Float[] defPushWeights,int startSizeType,int bounds){  float[] lengths=new float[sizes.length];  float usedLength=0.0f;  for (int i=0; i < sizes.length; i++) {    if (sizes[i] != null) {      float len=sizes[i][startSizeType] != NOT_SET ? sizes[i][startSizeType] : 0;      int newSizeBounded=getBrokenBoundary(len,sizes[i][MIN],sizes[i][MAX]);      if (newSizeBounded != NOT_SET)       len=newSizeBounded;      usedLength+=len;      lengths[i]=len;    }  }  int useLengthI=Math.round(usedLength);  if (useLengthI != bounds && resConstr != null) {    boolean isGrow=useLengthI < bounds;    TreeSet<Integer> prioList=new TreeSet<Integer>();    for (int i=0; i < sizes.length; i++) {      ResizeConstraint resC=(ResizeConstraint)getIndexSafe(resConstr,i);      if (resC != null)       prioList.add(isGrow ? resC.growPrio : resC.shrinkPrio);    }    Integer[] prioIntegers=prioList.toArray(new Integer[prioList.size()]);    for (int force=0; force <= ((isGrow && defPushWeights != null) ? 1 : 0); force++) {      for (int pr=prioIntegers.length - 1; pr >= 0; pr--) {        int curPrio=prioIntegers[pr];        float totWeight=0f;        Float[] resizeWeight=new Float[sizes.length];        for (int i=0; i < sizes.length; i++) {          if (sizes[i] == null)           continue;          ResizeConstraint resC=(ResizeConstraint)getIndexSafe(resConstr,i);          if (resC != null) {            int prio=isGrow ? resC.growPrio : resC.shrinkPrio;            if (curPrio == prio) {              if (isGrow) {                resizeWeight[i]=(force == 0 || resC.grow != null) ? resC.grow : (defPushWeights[i < defPushWeights.length ? i : defPushWeights.length - 1]);              } else {                resizeWeight[i]=resC.shrink;              }              if (resizeWeight[i] != null)               totWeight+=resizeWeight[i];            }          }        }        if (totWeight > 0f) {          boolean hit;          do {            float toChange=bounds - usedLength;            hit=false;            float changedWeight=0f;            for (int i=0; i < sizes.length && totWeight > 0.0001f; i++) {              Float weight=resizeWeight[i];              if (weight != null) {                float sizeDelta=toChange * weight / totWeight;                float newSize=lengths[i] + sizeDelta;                if (sizes[i] != null) {                  int newSizeBounded=getBrokenBoundary(newSize,sizes[i][MIN],sizes[i][MAX]);                  if (newSizeBounded != NOT_SET) {                    resizeWeight[i]=null;                    hit=true;                    changedWeight+=weight;                    newSize=newSizeBounded;                    sizeDelta=newSize - lengths[i];                  }                }                lengths[i]=newSize;                usedLength+=sizeDelta;              }            }            totWeight-=changedWeight;          } while (hit);        }      }    }  }  return roundSizes(lengths);}  }
class C{  public void updateUI(){  setUI((ToolBarUI)UIManager.getUI(this));  if (getLayout() == null) {    setLayout(new DefaultToolBarLayout(getOrientation()));  }  invalidate();}  }
class C{  public void comment(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (ch == null || start < 0 || length >= (ch.length - start) || length < 0)   return;  append(m_doc.createComment(new String(ch,start,length)));}  }
class C{  private void addAllChildren(List<ParseTreeNode> children){  children.forEach(null);}  }
class C{  @DSSink({DSSinkKind.SYNCHRONIZATION_DATA}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.546 -0500",hash_original_method="69DA3E1B323882B9D4B744C6E35751A3",hash_generated_method="60004DC4003AFFE42822995754840E35") public Message sendMessageSynchronously(int what,int arg1){  Message msg=Message.obtain();  msg.what=what;  msg.arg1=arg1;  Message resultMsg=sendMessageSynchronously(msg);  return resultMsg;}  }
class C{  @Override public void onChangedRemoved(final RPObject object,final RPObject changes){  if (isUser(object)) {    if (changes.has("adminlevel")) {      adminlevel=0;    }    if (changes.has("name")) {      name=null;    }    if (changes.has("sheep")) {      sheepID=0;    }    if (changes.hasMap("features")) {      processFeaturesRemoved(changes.getMap("features"));    }  }}  }
class C{  public File createCsvSwitchListFile(String name){  return createFile(getDefaultCsvSwitchListName(name),false);}  }
class C{  private char insert(char p,char[] key,int start,char val){  int len=strlen(key,start);  if (p == 0) {    p=freenode++;    eq[p]=val;    length++;    hi[p]=0;    if (len > 0) {      sc[p]=0xFFFF;      lo[p]=(char)kv.alloc(len + 1);      strcpy(kv.getArray(),lo[p],key,start);    } else {      sc[p]=0;      lo[p]=0;    }    return p;  }  if (sc[p] == 0xFFFF) {    char pp=freenode++;    lo[pp]=lo[p];    eq[pp]=eq[p];    lo[p]=0;    if (len > 0) {      sc[p]=kv.get(lo[pp]);      eq[p]=pp;      lo[pp]++;      if (kv.get(lo[pp]) == 0) {        lo[pp]=0;        sc[pp]=0;        hi[pp]=0;      } else {        sc[pp]=0xFFFF;      }    } else {      sc[pp]=0xFFFF;      hi[p]=pp;      sc[p]=0;      eq[p]=val;      length++;      return p;    }  }  char s=key[start];  if (s < sc[p]) {    lo[p]=insert(lo[p],key,start,val);  } else   if (s == sc[p]) {    if (s != 0) {      eq[p]=insert(eq[p],key,start + 1,val);    } else {      eq[p]=val;    }  } else {    hi[p]=insert(hi[p],key,start,val);  }  return p;}  }
class C{  private void unregisterDelegate(String delegateName){  if (LOG.isTraceEnabled()) {    LOG.trace("unregisterDelegate: {}",delegateName);  }  delegateMap.remove(delegateName);}  }
class C{  public void testBug28256() throws Exception {  try {    this.conn.setReadOnly(true);    this.stmt.execute("(SELECT 1) UNION (SELECT 2)");    this.conn.prepareStatement("(SELECT 1) UNION (SELECT 2)").execute();    if (versionMeetsMinimum(4,1)) {      ((com.mysql.jdbc.Connection)this.conn).serverPrepareStatement("(SELECT 1) UNION (SELECT 2)").execute();    }  }  finally {    this.conn.setReadOnly(false);  }}  }
class C{  public void testPessimisticOffheap() throws Exception {  testTransaction(cacheOffheap,PESSIMISTIC,KEY_1,wrap(1));}  }
class C{  public static Text valueOf(long l,int radix){  TextBuilder tb=new TextBuilder();  return tb.append(l,radix).toText();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void updateActions(final INaviAddressSpace addressSpace){  m_loadAddressSpaceAction.setEnabled(!addressSpace.isLoaded());}  }
class C{  static void parseInterface(String line,BufferedReader reader,PhysicalNode data){  String addressKey="ip address";  String descriptionKey="description";  String switchportKey="switchport";  String switchportVlanKey="vlan";  String subInterfaceDelimeter=".";  String bitBucket="Null";  line=SubParser.after(line,INTERFACE_KEY);  if (line.startsWith(bitBucket)) {    return;  }  if (!SubParser.isPhysicalPort(line)) {    parseVirtualInterface(line,reader,data);    return;  }  Port p;  if (line.contains(subInterfaceDelimeter)) {    int pos=line.indexOf(subInterfaceDelimeter);    String interfaceText=line.substring(0,pos);    line=line.substring(pos + subInterfaceDelimeter.length());    pos=SubParser.locate(line,null);    line=line.substring(0,pos);    p=data.getPort(new Port(data,interfaceText,Mac.MissingMac));    Integer subInterface=Integer.valueOf(line);    p.addSubInterface(subInterface);  } else {    p=data.getPort(new Port(data,line,Mac.MissingMac));  }  if (p == null) {    System.out.println();  }  try {    while ((line=reader.readLine()) != null && !line.startsWith(SECTION_SEPARATOR)) {      line=line.trim();      if (line.startsWith(addressKey)) {        String ip=SubParser.getFirstWord(SubParser.after(line,addressKey));      } else       if (line.startsWith(descriptionKey)) {        String description=SubParser.after(line,descriptionKey);        p.setDescription(description);      } else       if (line.startsWith(switchportKey)) {        if (line.contains(switchportVlanKey)) {          String vlans=SubParser.getLastWord(line);          SubParser.parseNumericList(vlans).forEach(null);        }      }    }  } catch (  IOException ex) {    Logger.getLogger(CiscoRCParse.class.getName()).log(Level.SEVERE,null,ex);  }}  }
class C{  public static byte[] expand(byte[] field,int newSize,boolean keepData){  if (field == null || field.length < newSize) {    byte[] newArray=new byte[newSize];    if (keepData && field != null) {      System.arraycopy(field,0,newArray,0,field.length);    }    return newArray;  }  return field;}  }
class C{  public AWTException(String msg){  super(msg);}  }
class C{  public void displayDialog(String msg){  MaterialDialog.Builder madb=new MaterialDialog.Builder(mContext);  madb.title(R.string.error);  madb.icon(mContext.getResources().getDrawable(R.drawable.ic_warning_grey600_24dp));  madb.content(msg);  madb.positiveColor(R.color.theme_primary);  madb.positiveText(R.string.ok);  madb.show();}  }
class C{  @Override public void run(int connId,String[] args){  int dice=2;  int sides=6;  try {    if (args.length > 1) {      int d=args[1].indexOf('d');      dice=Integer.parseInt(args[1].substring(0,d));      sides=Integer.parseInt(args[1].substring(d + 1));    }  } catch (  NumberFormatException ex) {    server.sendServerChat(connId,"/roll: error parsing arguments.");    return;  }catch (  StringIndexOutOfBoundsException ex) {    server.sendServerChat(connId,"/roll: error parsing arguments.");    return;  }  roll(connId,dice,sides);}  }
class C{  public GOST3410Parameters generateParameters(){  BigInteger[] pq=new BigInteger[2];  BigInteger q=null, p=null, a=null;  int x0, c;  long x0L, cL;  if (typeproc == 1) {    x0=init_random.nextInt();    c=init_random.nextInt();switch (size) {case 512:      procedure_A(x0,c,pq,512);    break;case 1024:  procedure_B(x0,c,pq);break;default :throw new IllegalArgumentException("Ooops! key size 512 or 1024 bit.");}p=pq[0];q=pq[1];a=procedure_C(p,q);return new GOST3410Parameters(p,q,a,new GOST3410ValidationParameters(x0,c));} else {x0L=init_random.nextLong();cL=init_random.nextLong();switch (size) {case 512:procedure_Aa(x0L,cL,pq,512);break;case 1024:procedure_Bb(x0L,cL,pq);break;default :throw new IllegalStateException("Ooops! key size 512 or 1024 bit.");}p=pq[0];q=pq[1];a=procedure_C(p,q);return new GOST3410Parameters(p,q,a,new GOST3410ValidationParameters(x0L,cL));}}  }
class C{  private QuitAction(){  super("Quit",new ImageIcon(CMain.class.getResource("data/cancel.png")));}  }
class C{  public void writeU16At(int val,int where){  check(val,16);  if (where > pos - 2)   throw new IllegalArgumentException("cannot write past " + "end of data");  array[where++]=(byte)((val >>> 8) & 0xFF);  array[where++]=(byte)(val & 0xFF);}  }
class C{  public void test_getBitsFromByteArray_zeroLength(){  assertEquals(0,BytesUtil.getBits(new byte[0],0,0));}  }
class C{  public static void mruAddByEntityName(String entityName,GenericEntity pk,Map<String,LifoSet<Object>> lookupCaches){  String cacheEntityName=entityName;  LifoSet<Object> lkupCache=lookupCaches.get(cacheEntityName);  if (lkupCache == null) {    lkupCache=new LifoSet<Object>();    lookupCaches.put(cacheEntityName,lkupCache);  }  lkupCache.add(pk.getPrimaryKey());  if (Debug.infoOn())   Debug.logInfo("in mruAddByEntityName, entityName:" + entityName + " lifoSet.size()"+ lkupCache.size(),module);}  }
class C{  public DDFRecord readRecord(){  if (poRecord == null) {    poRecord=new DDFRecord(this);  }  if (poRecord.read()) {    return poRecord;  } else {    return null;  }}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  super.reset(mapping,request);}  }
class C{  public static int dehexchar(char c){  if (c >= '0' && c <= '9') {    return c - '0';  }  if (c >= 'A' && c <= 'F') {    return c - ('A' - 10);  }  if (c >= 'a' && c <= 'f') {    return c - ('a' - 10);  }  return -1;}  }
class C{  @Override public ExprCfg parse(){  return new ExprCfgTop(parseInterpolate(),_string);}  }
class C{  public CppLine(double x1,double y1,double x2,double y2,double length,double angle){  this.x1=x1;  this.y1=y1;  this.x2=x2;  this.y2=y2;  this.length=length;  this.angle=angle;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.261 -0400",hash_original_method="0A1C1768846EB684D4983B5FA0FE432E",hash_generated_method="133FB815D550EF807B30CBCE8CF1C7B5") private V doPut(K kkey,V value,boolean onlyIfAbsent){  Comparable<? super K> key=comparable(kkey);  for (; ; ) {    Node<K,V> b=findPredecessor(key);    Node<K,V> n=b.next;    for (; ; ) {      if (n != null) {        Node<K,V> f=n.next;        if (n != b.next)         break;        Object v=n.value;        if (v == null) {          n.helpDelete(b,f);          break;        }        if (v == n || b.value == null)         break;        int c=key.compareTo(n.key);        if (c > 0) {          b=n;          n=f;          continue;        }        if (c == 0) {          if (onlyIfAbsent || n.casValue(v,value))           return (V)v; else           break;        }      }      Node<K,V> z=new Node<K,V>(kkey,value,n);      if (!b.casNext(n,z))       break;      int level=randomLevel();      if (level > 0)       insertIndex(z,level);      return null;    }  }}  }
class C{  public static boolean isImported(JCCompilationUnit compilationUnit,TypeSymbol type){  for (  JCImport i : compilationUnit.getImports()) {    if (i.isStatic()) {      continue;    }    if (i.qualid.type.tsym == type) {      return true;    }  }  return false;}  }
class C{  public static <A,B,C,D,T>T provideSingleton(Class<T> desiredObjectClass,A a,B b,C c,D d){  return providerHelper(desiredObjectClass,createProvider(getFactory(desiredObjectClass),a,b,c,d));}  }
class C{  public void end(String namespace,String name) throws Exception {}  }
class C{  public byte[] substr(final byte[] key,final int start,final int end){  checkIsInMulti();  client.substr(key,start,end);  return client.getBinaryBulkReply();}  }
class C{  public Executor withProgressListener(ProgressListener listener){  progress.addProgressListener(listener);  return this;}  }
class C{  public void insertRow(Value[] row) throws SQLException {  StatementBuilder buff=new StatementBuilder("INSERT INTO ");  appendTableName(buff);  buff.append('(');  appendColumnList(buff,false);  buff.append(")VALUES(");  buff.resetCount();  for (int i=0; i < columnCount; i++) {    buff.appendExceptFirst(",");    Value v=row[i];    if (v == null) {      buff.append("DEFAULT");    } else {      buff.append('?');    }  }  buff.append(')');  PreparedStatement prep=conn.prepareStatement(buff.toString());  for (int i=0, j=0; i < columnCount; i++) {    Value v=row[i];    if (v != null) {      v.set(prep,j++ + 1);    }  }  int count=prep.executeUpdate();  if (count != 1) {    throw DbException.get(ErrorCode.NO_DATA_AVAILABLE);  }}  }
class C{  public void testNullCallBack() throws IOException {  String reqdata="Request Data";  Request request=Request.newBuilder().setStrData(reqdata).build();  socket.withNoResponse(true);  FakeCallback callback=callRpc(request,null);  verifyRequestToSocket(request);  assertTrue(callback.invoked);  assertNull(callback.response);  assertNull(callBlockingRpc(request,null));  verifyRequestToSocket(request);  callback=callAsyncRpc(request,null);  verifyRequestToSocket(request);  assertTrue(callback.invoked);  assertNull(callback.response);}  }
class C{  public static Builder builder(){  return new Builder(new ReconfigureResponse());}  }
class C{  private Object executeBetween(PageContext pc,SQL sql,Query qr,ZExpression expression,int row) throws PageException {  Object left=executeExp(pc,sql,qr,expression.getOperand(0),row);  Object right1=executeExp(pc,sql,qr,expression.getOperand(1),row);  Object right2=executeExp(pc,sql,qr,expression.getOperand(2),row);  return ((Operator.compare(left,right1) <= 0) && (Operator.compare(left,right2) >= 0)) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public void addUndoPoint(){  ((ArffTableModel)getModel()).addUndoPoint();}  }
class C{  public ChunkedHashStore(final TransformationStrategy<? super T> transform) throws IOException {  this(transform,null,null);}  }
class C{  public static void load(String relPath,boolean cleanCache) throws ServletException {  int iLastPathSep=relPath.lastIndexOf("/");  String domain=relPath.substring(iLastPathSep + 1);  File dir=new File(CONFIG_DIR + File.separator + "domains"+ (iLastPathSep < 0 ? "" : File.separator + relPath.substring(0,iLastPathSep)));  File file=new File(dir.getAbsolutePath() + File.separator + domain);  String path=file.getAbsolutePath();  ConfigData configData=_configs.get(domain);  if (configData == null) {    new ConfigData();  } else {    if (configData.otherDomains != null) {      for (      String otherDomain : configData.otherDomains) {        _configs.remove(otherDomain);      }    }  }  configData.lock.writeLock().lock();  try {    configData.clean();    if (cleanCache) {      CacheStructure cache=configData.cache;      cache.rsrcs.clear();      cache.stateFullRsrcs.clear();      cache.rsrcsList.clear();    }    configData.dirPath=dir.getPath();    loadOtherDomains(path,File.separator + "other-domains.txt",configData);    loadContentFirstPatterns(path,File.separator + "content-first.txt",configData);    loadDeferPatterns(path,File.separator + "defer.txt",configData);    loadStateFullPatterns(path,File.separator + "state-full.txt",configData);    loadStateLessPatterns(path,File.separator + "state-less.txt",configData);    loadNoInlinePatterns(path,File.separator + "no-inline.txt",configData);    loadProperties(path,File.separator + "properties.txt",configData);    configData.domain=domain;    _configs.put(domain,configData);    if (configData.otherDomains != null) {      for (      String otherDomain : configData.otherDomains) {        _configs.put(otherDomain,configData);      }    }  }  finally {    configData.lock.writeLock().unlock();  }}  }
class C{  public boolean intersect(Rectangle rect){  GeneralPath intersectionScratchPath=createPathFromPool();  try {    Shape result=ShapeUtil.intersection(rect,this,intersectionScratchPath);    if (result != null) {      this.setPath(intersectionScratchPath,null);      return true;    }    reset();    return false;  }  finally {    recycle(intersectionScratchPath);  }}  }
class C{  protected AbstractBalloon(String text){  if (text == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.setText(text);}  }
class C{  public <S>T manyToOne(T destination,final S source,final MappingType mtDestination,final MappingType mtSource){  try {    return this.<T,S>getJMapper(relationalManyToOneMapper,source).getDestination(destination,source,mtDestination,mtSource);  } catch (  Exception e) {    return logAndReturnNull(e);  }}  }
class C{  public String queryType(){  return qryType;}  }
class C{  public List<NamedRelatedResourceRep> listVolumes(URI id){  NamedVolumesList response=getVolumeByApplication(id);  return defaultList(response.getVolumes());}  }
class C{  public static int compute7(int y){  y^=y << 6;  y^=y >>> 21;  y^=(y << 7);  return y;}  }
class C{  void writeFrame(byte[] bytes,int offset,int length) throws IOException {synchronized (spdyWriter) {    spdyWriter.out.write(bytes,offset,length);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  return Boolean.valueOf(mf != null && mf.isTV());}  }
class C{  private void jbInit() throws Exception {  panel.setLayout(panelLayout);  getContentPane().add(panel);  textPane.setPreferredSize(new Dimension(350,300));  textPane.setReadWrite(false);  textPane.setMargin(new Insets(2,2,2,2));  panel.add(textPane,BorderLayout.CENTER);  this.getContentPane().add(confirmPanel,BorderLayout.SOUTH);  confirmPanel.addActionListener(this);  pack();  confirmPanel.getOKButton().requestFocusInWindow();}  }
class C{  public VirtualInvokeExpr newVirtualInvokeExpr(Local base,SootMethodRef method,Value arg){  return new JVirtualInvokeExpr(base,method,Arrays.asList(new Value[]{arg}));}  }
class C{  public FactoryConfigurationError(String msg){  super(msg);  this.exception=null;}  }
class C{  public void reset(){  if (_refs != null) {    _refs.clear();    _refCount=0;  }  _classRefs.clear();  _typeRefs=null;  _offset=0;  _isPacket=false;  _isUnshared=false;}  }
class C{  @Override protected TurnCandidateHarvest createHarvest(HostCandidate hostCandidate){  return new TurnCandidateHarvest(this,hostCandidate);}  }
class C{  public int size(){  return addrs.size();}  }
class C{  public void notifyMovement(final ActiveEntity entity,final int oldX,final int oldY,final int newX,final int newY){  Rectangle2D oeArea;  Rectangle2D neArea;  boolean oldIn;  boolean newIn;  oeArea=entity.getArea(oldX,oldY);  neArea=entity.getArea(newX,newY);  for (  final MovementListener l : movementListeners) {    Rectangle2D area=l.getArea();    oldIn=area.intersects(oeArea);    newIn=area.intersects(neArea);    if (!oldIn && newIn) {      l.onEntered(entity,this,newX,newY);    }    if (oldIn && newIn) {      l.onMoved(entity,this,oldX,oldY,newX,newY);    }    if (oldIn && !newIn) {      l.onExited(entity,this,oldX,oldY);    }  }}  }
class C{  @Override public EnterFromDateToToDateActivity.TimeObject add(long time,int val){  Calendar c=Calendar.getInstance();  c.setTimeInMillis(time);  c.add(Calendar.MONTH,val);  return timeObjectFromCalendar(c);}  }
class C{  public TLongIterator(TLongHash hash){  super(hash);  _hash=hash;}  }
class C{  @GridifySetToValue(gridName="GridifySetToValueTarget",threshold=2,splitSize=2) @Override public long findMaximumInIterator(Iterator<Long> input){  assert input != null;  assert input.hasNext();  System.out.println(">>>");  System.out.println("Find maximum in iterator: " + input);  System.out.println(">>>");  long maximum=input.next();  while (input.hasNext()) {    Long val=input.next();    if (val > maximum)     maximum=val;  }  return maximum;}  }
class C{  public Trap newTrap(SootClass exception,Unit beginStmt,Unit endStmt,Unit handlerStmt){  return new JTrap(exception,beginStmt,endStmt,handlerStmt);}  }
class C{  @Override public int hashCode(){  int hash=((time.toSecondOfDay() + (timeEndOfDay ? 1 : 0)) << 15) + (month.ordinal() << 11) + ((dom + 32) << 5)+ ((dow == null ? 7 : dow.ordinal()) << 2)+ (timeDefinition.ordinal());  return hash ^ standardOffset.hashCode() ^ offsetBefore.hashCode()^ offsetAfter.hashCode();}  }
class C{  public Vec4[] clip(Vec4 pa,Vec4 pb){  if (pa == null || pb == null) {    throw new IllegalArgumentException("Point Is Null");  }  if (pa.equals(pb))   return null;  Line line=Line.fromSegment(pa,pb);  double ldotv=this.n.dot3(line.getDirection());  if (ldotv == 0) {    double ldots=this.n.dot4(line.getOrigin());    if (ldots == 0)     return new Vec4[]{pa,pb}; else     return null;  }  double t=-this.n.dot4(line.getOrigin()) / ldotv;  if (t < 0 || t > 1)   return null;  Vec4 p=line.getPointAt(t);  if (ldotv > 0)   return new Vec4[]{p,pb}; else   return new Vec4[]{pa,p};}  }
class C{  public Map attributes(){  return attributes;}  }
class C{  public void onMainActivityStart(){  try {    TraceEvent.begin("GoogleServicesManager.onMainActivityStart");    boolean accountsChanged=SigninHelper.checkAndClearAccountsChangedPref(mContext);    mSigninHelper.validateAccountSettings(accountsChanged);  }  finally {    TraceEvent.end("GoogleServicesManager.onMainActivityStart");  }}  }
class C{  private void writeObject(final java.io.ObjectOutputStream out) throws IOException {  out.writeInt(level.intValue());}  }
class C{  public void visitTryCatchBlock(Label start,Label end,Label handler,String type){  if (mv != null) {    mv.visitTryCatchBlock(start,end,handler,type);  }}  }
class C{  public boolean controlRunTrain(int idx){  if (log.isDebugEnabled()) {    log.debug("controlRunTrain= " + idx + " runMode= "+ _runMode+ " - warrant= "+ getDisplayName());  }  boolean ret=true;  int oldIndex=-MODE_MANUAL;  if (_engineer == null) {switch (idx) {case HALT:case RESUME:case RETRY:      ret=false;    break;case ABORT:  if (_runMode == Warrant.MODE_LEARN) {    firePropertyChange("abortLearn",Integer.valueOf(-MODE_LEARN),Integer.valueOf(_idxCurrentOrder));  } else {    stopWarrant(true);  }break;}} else {synchronized (_engineer) {oldIndex=_engineer.getRunState();switch (idx) {case HALT:_engineer.setHalt(true);break;case RESUME:_engineer.setHalt(false);restart();ret=moveIntoNextBlock(MID);break;case RETRY:BlockOrder bo=getBlockOrderAt(_idxCurrentOrder + 1);ret=false;if (bo != null) {OBlock b=bo.getBlock();if (b.allocate(this) == null && (b.getState() & OBlock.OCCUPIED) != 0) {_idxCurrentOrder++;if (b.equals(_stoppingBlock)) {_stoppingBlock.removePropertyChangeListener(this);_stoppingBlock=null;}bo.setPath(this);restart();goingActive(b);ret=true;}}break;case ABORT:stopWarrant(true);break;}}}if (ret) {firePropertyChange("controlChange",Integer.valueOf(oldIndex),Integer.valueOf(idx));}return ret;}  }
class C{  public List(A head,List<A> tail){  this.tail=tail;  this.head=head;}  }
class C{  public static String toString(List<HostAddress> addrs){  String str="";  for (int i=0; i < addrs.size(); i++) {    if (addrs.get(i).type != null) {      str+="address=(host=" + addrs.get(i).host + ")(port="+ addrs.get(i).port+ ")(type="+ addrs.get(i).type+ ")";    } else {      boolean isIPv6=addrs.get(i).host != null && addrs.get(i).host.contains(":");      String host=(isIPv6) ? ("[" + addrs.get(i).host + "]") : addrs.get(i).host;      str+=host + ":" + addrs.get(i).port;    }    if (i < addrs.size() - 1) {      str+=",";    }  }  return str;}  }
class C{  ByteVector put12(final int b,final int s){  int length=this.length;  if (length + 3 > data.length) {    enlarge(3);  }  byte[] data=this.data;  data[length++]=(byte)b;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  public void addCustomParseFilter(ParseFilter filter){  validateParameterNonNull(filter,"filter");  this.customParseFilters.add(filter);}  }
class C{  MutableBigInteger(int[] val){  value=val;  intLen=val.length;}  }
class C{  private static LIRInstruction first(List<LIRInstruction> seq){  return seq.get(0);}  }
class C{  public NonDominatedSortingSelection(int popSize){  this.popSize=popSize;}  }
class C{  private void addToInputEvent(Method inputEvent,Method outputEvent){  if (inputEvent == null || outputEvent == null)   return;  if (!eventBlocks.containsKey(inputEvent))   eventBlocks.put(inputEvent,new ArrayList<Method>());  if (eventBlocks.get(inputEvent).contains(outputEvent))   return;  eventBlocks.get(inputEvent).add(outputEvent);}  }
class C{  public boolean hasSubscriptionManagerRole(){  return getUserRoles().contains(UserRoleType.SUBSCRIPTION_MANAGER);}  }
class C{  private static void removeTextNodes(final INaviView view,final ImmutableList<INaviViewNode> nodes){  final Set<INaviViewNode> toDelete=new HashSet<INaviViewNode>();  for (  final INaviViewNode node : nodes) {    for (    final INaviViewNode parent : node.getParents()) {      if (parent instanceof INaviTextNode) {        toDelete.add(parent);      }    }  }  view.getContent().deleteNodes(toDelete);}  }
class C{  public void open() throws IOException, EOFException {  reader=new BufferedReader(new FileReader(filename));  if (firstLineNames) {    String str=reader.readLine();    if (str == null) {      throw new EOFException();    }    columnName=str.split(delimiter);    for (int i=0; i < columnName.length; ++i) {      columnName[i]=columnName[i].trim();    }  }}  }
class C{  public static void divRow(Matrix A,int i,double c){  divRow(A,i,0,A.cols(),c);}  }
class C{  public synchronized void trigger(boolean isRising){  if (!enabled)   return;  if (isRising)   risingTime=System.currentTimeMillis(); else   fallingTime=System.currentTimeMillis();  if (isRising && triggerRising || !isRising && triggerFalling) {    if (func != null)     func.apply(interrupts.indexOf(this),funcParam);    notifyAll();  }}  }
class C{  public void toEPLOptions(StringWriter writer,EPStatementFormatter formatter,boolean includeFrom){  String delimiter="";  if (includeFrom) {    formatter.beginFrom(writer);    writer.write("from");  }  if ((outerJoinQualifiers == null) || (outerJoinQualifiers.size() == 0)) {    boolean first=true;    for (    Stream stream : streams) {      writer.write(delimiter);      formatter.beginFromStream(writer,first);      first=false;      stream.toEPL(writer,formatter);      delimiter=",";    }  } else {    if (outerJoinQualifiers.size() != (streams.size() - 1)) {      throw new IllegalArgumentException("Number of outer join qualifiers must be one less then the number of streams.");    }    boolean first=true;    for (int i=0; i < streams.size(); i++) {      Stream stream=streams.get(i);      formatter.beginFromStream(writer,first);      first=false;      stream.toEPL(writer,formatter);      if (i > 0) {        OuterJoinQualifier qualCond=outerJoinQualifiers.get(i - 1);        if (qualCond.getLeft() != null) {          writer.write(" on ");          qualCond.getLeft().toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);          writer.write(" = ");          qualCond.getRight().toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);          if (qualCond.getAdditionalProperties().size() > 0) {            for (            PropertyValueExpressionPair pair : qualCond.getAdditionalProperties()) {              writer.write(" and ");              pair.getLeft().toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);              writer.write(" = ");              pair.getRight().toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);            }          }        }      }      if (i < streams.size() - 1) {        OuterJoinQualifier qualType=outerJoinQualifiers.get(i);        writer.write(" ");        writer.write(qualType.getType().getText());        writer.write(" outer join");      }    }  }}  }
class C{  public static boolean sameLanguage(Automaton a1,Automaton a2){  if (a1 == a2) {    return true;  }  return subsetOf(a2,a1) && subsetOf(a1,a2);}  }
class C{  @Inject PageParserImpl(DocumentProvider documentProvider,EntryParser entryParser){  this.documentProvider=checkNotNull(documentProvider);  this.entryParser=checkNotNull(entryParser);}  }
class C{  public void assertEqual(long expected,long actual){  TestUtils.assertEqual(expected,actual);}  }
class C{  public DateTimeFormatterBuilder appendTimeZoneOffset(String zeroOffsetPrintText,String zeroOffsetParseText,boolean showSeparators,int minFields,int maxFields){  return append0(new TimeZoneOffset(zeroOffsetPrintText,zeroOffsetParseText,showSeparators,minFields,maxFields));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.io.File f=getFile(stack);  if (SageConstants.LITE)   return null;  if (stack.getUIMgr() == null)   return Boolean.FALSE;  try {    stack.getUIMgr().getModuleGroup().importXML(f,stack.getUIMgr());    if (stack.getUIMgr().getBoolean("save_stv_after_import",true)) {      String fname=stack.getUIMgr().getModuleGroup().defaultModule.description();      if (fname.toLowerCase().endsWith(".stv")) {        fname=fname.substring(0,fname.lastIndexOf('.')) + ".xml";      }      int i=1;      String basefname=fname;      int lastDot=basefname.lastIndexOf('.');      if (lastDot != -1) {        basefname=basefname.substring(0,lastDot);        int lastDash=basefname.lastIndexOf('-');        if (lastDash != -1) {          try {            int lastNum=Integer.parseInt(basefname.substring(lastDash + 1));            i=lastNum;            basefname=basefname.substring(0,lastDash);          } catch (          NumberFormatException e) {          }        }      }      while (new java.io.File(fname).isFile()) {        fname=basefname + "-" + i+ ".xml";        i++;      }      try {        stack.getUIMgr().getModuleGroup().defaultModule.saveXML(new java.io.File(fname),null);      } catch (      tv.sage.SageException e) {        e.printStackTrace();        return "There was an error saving the file: " + e;      }      try {        stack.getUIMgr().freshStartup(new java.io.File(fname));      } catch (      Throwable e) {        e.printStackTrace();        return "There was an error reloading the saved file: " + e;      }    }  } catch (  Throwable e) {    e.printStackTrace();    return "There was an error loading the file of: " + e;  }  return Boolean.TRUE;}  }
class C{  public static BufferedImage createPattern(String pattern,Color lineColor){  return createPattern(pattern,defaultDimension,defaultScale,lineColor,defaultBackColor);}  }
class C{  public void unbox(final Type type){  Type t=NUMBER_TYPE;  Method sig=null;switch (type.getSort()) {case Type.VOID:    return;case Type.CHAR:  t=CHARACTER_TYPE;sig=CHAR_VALUE;break;case Type.BOOLEAN:t=BOOLEAN_TYPE;sig=BOOLEAN_VALUE;break;case Type.DOUBLE:sig=DOUBLE_VALUE;break;case Type.FLOAT:sig=FLOAT_VALUE;break;case Type.LONG:sig=LONG_VALUE;break;case Type.INT:case Type.SHORT:case Type.BYTE:sig=INT_VALUE;}if (sig == null) {checkCast(type);} else {checkCast(t);invokeVirtual(t,sig);}}  }
class C{  public AtomicTypePanel(final Component parent,final TypeManager typeManager){  this(parent,typeManager,null);}  }
class C{  public static void shuffle(double[] a,int lo,int hi){  if (a == null)   throw new NullPointerException("argument array is null");  if (lo < 0 || lo > hi || hi >= a.length) {    throw new IndexOutOfBoundsException("Illegal subarray range");  }  for (int i=lo; i <= hi; i++) {    int r=i + uniform(hi - i + 1);    double temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  public float drawLine(Token token,Graphics2D g,float x,float y){  float nextX=x;  while (token != null && token.isPaintable() && nextX < clipEnd) {    nextX=token.paint(g,nextX,y,host,this,clipStart);    token=token.getNextToken();  }  if (host.getEOLMarkersVisible()) {    g.setColor(host.getForegroundForTokenType(Token.WHITESPACE));    g.setFont(host.getFontForTokenType(Token.WHITESPACE));    g.drawString("\u00B6",nextX,y);  }  return nextX;}  }
class C{  private StringBuilder appendTaxonName(Taxon taxon,StringBuilder builder){  String name=taxon.getName();  if (name.contains("\"")) {    name=name.replace("\"","\\\"");  }  return builder.append("\"name\": \"").append(name).append("\"");}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"AND");  translateAll(environment,instruction,"AND",instructions);}  }
class C{  public final void init(ManagerFactoryParameters spec) throws InvalidAlgorithmParameterException {  spiImpl.engineInit(spec);}  }
class C{  private boolean parseAbbreviatedAbsoluteLocationPath(PsiBuilder builder){  if (builder.getTokenType() == XPathTokenTypes.ANY_PATH) {    if (!parseLocationPath(builder,true)) {      builder.error("location path expected");    }    return true;  }  return false;}  }
class C{  private void init(){  mResizeDrawableDiagonal=AbImageUtil.bitmapToDrawable(AbFileUtil.getBitmapFromSrc("image/crop_big.png"));  mResizeDrawableDiagonal2=AbImageUtil.bitmapToDrawable(AbFileUtil.getBitmapFromSrc("image/crop_small.png"));}  }
class C{  public char charAt(int pos){  return c[pos];}  }
class C{  public void testAbstractBean() throws Exception {  ObjectMapper m=new ObjectMapper();  AbstractBean[] input=new AbstractBean[]{new StringBean("xyz")};  String serial=m.writeValueAsString(input);  try {    m.readValue(serial,AbstractBean[].class);    fail("Should have failed");  } catch (  JsonMappingException e) {    verifyException(e,"can not construct");  }  m=new ObjectMapper();  m.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);  serial=m.writeValueAsString(input);  AbstractBean[] beans=m.readValue(serial,AbstractBean[].class);  assertEquals(1,beans.length);  assertEquals(StringBean.class,beans[0].getClass());  assertEquals("xyz",((StringBean)beans[0]).name);}  }
class C{  public static double dot(double[] vec1,double[] vec2){  int n=vec1.length;  double res=0.0;  for (int i=0; i < n; ++i) {    res+=vec1[i] * vec2[i];  }  return (res);}  }
class C{  public boolean isLocal(int dlsSerialNumber){  return this.lockGrantorSerialNumber == dlsSerialNumber && this.dm.getId().equals(this.lockGrantorMember);}  }
class C{  public boolean doesEntityNotTriggerPressurePlate(){  return true;}  }
class C{  public void exit(int status){  return;}  }
class C{  public final Double2D multiply(double val){  return new Double2D(x * val,y * val);}  }
class C{  public void pinVisiblePanels(){  if (layout == Layout.FULL) {    getTabbedFull().pinVisibleTabs();  } else {    getTabbedSelect().pinVisibleTabs();    getTabbedWork().pinVisibleTabs();    getTabbedStatus().pinVisibleTabs();  }}  }
class C{  @Override public boolean performFinish(){  projectName=newProjectWizardPage.getProjectName();  useGWT=newProjectWizardPage.useGWT();  gwtSdkContainerPath=newProjectWizardPage.getGWTSdkContainerPath();  packageName=newProjectWizardPage.getPackage();  locationURI=newProjectWizardPage.getCreationLocationURI();  isGenerateEmptyProject=newProjectWizardPage.isGenerateEmptyProject();  buildAnt=newProjectWizardPage.getBuildAnt();  buildMaven=newProjectWizardPage.getBuildMaven();  DebugUITools.getLaunchGroups();  boolean finished=super.performFinish();  if (finished) {  }  return finished;}  }
class C{  private VirtualMachineConfigSpec buildVirtualMachineConfigSpec(String datastoreName) throws InvalidPropertyFaultMsg, FinderException, RuntimeFaultFaultMsg {  String displayName=this.state.name;  VirtualMachineConfigSpec spec=new VirtualMachineConfigSpec();  spec.setName(displayName);  spec.setNumCPUs((int)this.state.description.cpuCount);  spec.setGuestId(VirtualMachineGuestOsIdentifier.OTHER_GUEST_64.value());  spec.setMemoryMB(toMb(this.state.description.totalMemoryBytes));  VirtualMachineFileInfo files=new VirtualMachineFileInfo();  String path=String.format("[%s] %s/%s.vmx",datastoreName,displayName,displayName);  files.setVmPathName(path);  spec.setFiles(files);  for (  NetworkInterfaceStateWithNetwork ni : this.nics) {    VirtualDevice nic=createNic(ni.network.name);    addDeviceToVm(spec,nic);  }  VirtualDevice scsi=createScsiController();  addDeviceToVm(spec,scsi);  return spec;}  }
class C{  public static <A>CompletableFutureTValue<A> fromAnyM(final AnyMValue<A> anyM){  return of(anyM.map(null));}  }
class C{  public void testDetectLanguageFr(){  LOGGER.debug("detectLanguage fr");  LanguageDetector instance=LanguageDetector.getInstance();  Document doc;  try {    doc=Jsoup.parse(new File(PATH + "fr.wikipedia.org-wiki-Accessibilite_du_web_20140701.html"),UTF_8);    assertEquals("fr",instance.detectLanguage(doc.text()).getDetectedLanguage());    assertEquals("fr",instance.detectLanguage(doc.text().toLowerCase()).getDetectedLanguage());    assertEquals("fr",instance.detectLanguage(doc.text().toUpperCase()).getDetectedLanguage());    LOGGER.debug("detection ended");  } catch (  IOException ex) {    LOGGER.error(ex);  }catch (  NullPointerException npe) {    LOGGER.error("error while fetching page " + npe);  }}  }
class C{  private AffinityTopologyVersion topologyVersion(){  return cctx.affinity().affinityTopologyVersion();}  }
class C{  protected void persistClaimsList(ImmutableMap<String,String> labelsToKeys){  ClaimsListSingleton singleton=new ClaimsListSingleton();  Key<ClaimsListRevision> revision=ClaimsListRevision.createKey(singleton);  singleton.setActiveRevision(revision);  ofy().saveWithoutBackup().entity(singleton).now();  if (!labelsToKeys.isEmpty()) {    ofy().saveWithoutBackup().entity(createTestClaimsListShard(clock.nowUtc(),labelsToKeys,revision)).now();  }}  }
class C{  public InputVenueMessageContent.InputVenueMessageContentBuilder address(String address){  this.address=address;  return this;}  }
class C{  public Iterable<Long> lengthAll(final byte[] key) throws IOException {  return new BlobLengths(key);}  }
class C{  public boolean isAfterLast() throws SQLException {  return crsInternal.isAfterLast();}  }
class C{  private static String toCanonicalName(String className){  className=StringUtils.deleteWhitespace(className);  if (className == null) {    throw new NullArgumentException("className");  } else   if (className.endsWith("[]")) {    StringBuilder classNameBuffer=new StringBuilder();    while (className.endsWith("[]")) {      className=className.substring(0,className.length() - 2);      classNameBuffer.append("[");    }    String abbreviation=ClassUtils.abbreviationMap.get(className);    if (abbreviation != null) {      classNameBuffer.append(abbreviation);    } else {      classNameBuffer.append("L").append(className).append(";");    }    className=classNameBuffer.toString();  }  return className;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public FlowLayout(int align){  this(align,5,5);}  }
class C{  public static void serialize(GPathResult node,Writer w){  serialize(asString(node),w);}  }
class C{  @Override protected AdminResponse createResponse(DistributionManager dm){  return RemoveHealthListenerResponse.create(dm,this.getSender(),this.id);}  }
class C{  private boolean isSelectionSelected(Object source){  boolean retValue=false;  if (source instanceof Checkbox)   retValue=((Checkbox)source).isChecked(); else   if (source instanceof Radio)   retValue=((Radio)source).isChecked(); else   log.log(Level.SEVERE,"Not valid - " + source);  return retValue;}  }
class C{  public GoogleTurnSSLCandidateHarvester(TransportAddress turnServer,String shortTermCredentialUsername,String password){  super(turnServer,shortTermCredentialUsername,password);}  }
class C{  protected Instances makeTestDataset(int seed,int numInstances,int numAttr,AttrTypes attrTypes,int numClasses,int classType,int classIndex) throws Exception {  TestInstances dataset=new TestInstances();  dataset.setSeed(seed);  dataset.setNumInstances(numInstances);  dataset.setNumNominal(attrTypes.nominal ? numAttr : 0);  dataset.setNumNumeric(attrTypes.numeric ? numAttr : 0);  dataset.setNumString(attrTypes.string ? numAttr : 0);  dataset.setNumDate(attrTypes.date ? numAttr : 0);  dataset.setNumRelational(attrTypes.relational ? numAttr : 0);  dataset.setNumClasses(numClasses);  dataset.setClassType(classType);  dataset.setClassIndex(classIndex);  return process(dataset.generate());}  }
class C{  private void showFtu(){  Menu menu=mToolbar.getMenu();  View view=menu.findItem(R.id.media_route_menu_item).getActionView();  if (view != null && view instanceof MediaRouteButton) {    IntroductoryOverlay overlay=new IntroductoryOverlay.Builder(this,mMediaRouteMenuItem).setTitleText(R.string.touch_to_cast).setSingleTime().build();    overlay.show();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatadeletedatabegining.class,args);}  }
class C{  public static String hashMapToString(HashMap<?,?> map,int dp){  StringBuilder sb=new StringBuilder();  for (  Object k : map.keySet()) {    sb.append(Utils.padRight(k.toString(),31));    Object obj=map.get(k);    if (obj instanceof Double) {      sb.append(Utils.doubleToString((Double)obj,5,dp));    } else     if (obj instanceof double[]) {      sb.append(A.toString((double[])obj,dp));    } else     if (obj instanceof int[]) {      sb.append(A.toString((int[])obj,dp + 2));    } else     if (obj instanceof String) {      String s=(String)obj;      if (s.contains("\n"))       sb.append("\n");      sb.append(obj);      if (s.contains("\n"))       sb.append("\n");    } else {    }    sb.append('\n');  }  return sb.toString();}  }
class C{  static void compileArrayStoreBarrier(Assembler asm){  BaselineCompilerImpl.genParameterRegisterLoad(asm,3);  asm.generateJTOCcall(Entrypoints.aastoreMethod.getOffset());}  }
class C{  protected void addField(DDFField ddf){  String fName=ddf.getFieldDefn().getName().trim().intern();  if (Debug.debugging("asrp")) {    Debug.output("GeneralASRPFile.addField(" + fName + ")");  }  Object f=fields.get(fName);  if (f == null) {    fields.put(fName,ddf);  } else {    if (f instanceof List) {      ((List)f).add(ddf);    } else {      Vector subList=new Vector();      subList.add(f);      subList.add(ddf);      fields.put(fName,subList);    }  }}  }
class C{  public UnhandledException(Throwable cause){  super(cause);}  }
class C{  void showStatus(final String msg){  RapidMinerGUI.getMainFrame().getStatusBar().setSpecialText(msg);}  }
class C{  protected String expandFormat(String pszSrc){  StringBuffer szDest=new StringBuffer();  int iSrc=0;  int nRepeat=0;  while (iSrc < pszSrc.length()) {    if ((iSrc == 0 || pszSrc.charAt(iSrc - 1) == ',') && pszSrc.charAt(iSrc) == '(') {      String pszContents=extractSubstring(pszSrc + iSrc);      String pszExpandedContents=expandFormat(pszContents);      szDest.append(pszExpandedContents);      iSrc=iSrc + pszContents.length() + 2;    } else     if ((iSrc == 0 || pszSrc.charAt(iSrc - 1) == ',') && Character.isDigit(pszSrc.charAt(iSrc))) {      int orig_iSrc=iSrc;      for (; Character.isDigit(pszSrc.charAt(iSrc)); iSrc++) {      }      String nRepeatString=pszSrc.substring(orig_iSrc,iSrc);      nRepeat=Integer.parseInt(nRepeatString);      String pszContents=extractSubstring(pszSrc.substring(iSrc));      String pszExpandedContents=expandFormat(pszContents);      for (int i=0; i < nRepeat; i++) {        szDest.append(pszExpandedContents);        if (i < nRepeat - 1) {          szDest.append(",");        }      }      if (iSrc == '(') {        iSrc+=pszContents.length() + 2;      } else {        iSrc+=pszContents.length();      }    } else {      szDest.append(pszSrc.charAt(iSrc++));    }  }  return szDest.toString();}  }
class C{  private String d(){  return d(1);}  }
class C{  public T caseEventSpec(EventSpec object){  return null;}  }
class C{  public KeyCrypterScrypt(ScryptParameters scryptParameters){  this.scryptParameters=checkNotNull(scryptParameters);  if (scryptParameters.getSalt() == null || scryptParameters.getSalt().toByteArray() == null || scryptParameters.getSalt().toByteArray().length == 0) {    log.warn("You are using a ScryptParameters with no salt. Your encryption may be vulnerable to a dictionary attack.");  }}  }
class C{  @Override public boolean supportsBooleanValues(){  return SUPPORTS_BOOLEAN_VALUES;}  }
class C{  public ConversionException(final String message,final Throwable cause){  super(message);  this.cause=cause;}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public void forceNSDecl(String uri){  forcedDeclTable.put(uri,Boolean.TRUE);}  }
class C{  public void testWritable(){  SpellCheckedMetadata result=null;  SpellCheckedMetadata meta=new SpellCheckedMetadata();  result=writeRead(meta);  assertEquals(0,result.size());  meta.add("name-one","value-1.1");  result=writeRead(meta);  meta.add("Contenttype","text/html");  assertEquals(1,result.size());  assertEquals(1,result.getValues("name-one").length);  assertEquals("value-1.1",result.get("name-one"));  meta.add("name-two","value-2.1");  meta.add("name-two","value-2.2");  result=writeRead(meta);  assertEquals(3,result.size());  assertEquals(1,result.getValues("name-one").length);  assertEquals("value-1.1",result.getValues("name-one")[0]);  assertEquals(2,result.getValues("name-two").length);  assertEquals("value-2.1",result.getValues("name-two")[0]);  assertEquals("value-2.2",result.getValues("name-two")[1]);  assertEquals("text/html",result.get(Metadata.CONTENT_TYPE));}  }
class C{  public static boolean isOutlier(int index,ArrayList<Double> values){  if (values.size() <= 1) {    return true;  }  if (index == 0) {    return isRightOutlier(index,values);  } else   if (index == values.size() - 1) {    return isLeftOutlier(index,values);  } else {    return isRightOutlier(index,values) || isLeftOutlier(index,values);  }}  }
class C{  protected NumExpr_Impl(){  super();}  }
class C{  public short[][] production_table(){  return _production_table;}  }
class C{  public static <I>Parser<I,I> satisfy(Predicate<I> test){  return null;}  }
class C{  public int compare(Object o1,Object o2){  String s1=o1.toString();  if (s1 == null)   s1="";  String s2=o2.toString();  if (s2 == null)   s2="";  return s1.compareTo(s2);}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.add(new Option("\tSkip identical instances (distances equal to zero).\n","S",1,"-S"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  private void testPreRegisterBusinessObjectData(HashMap<String,String> attributes,boolean useSsl) throws IOException, JAXBException, URISyntaxException {  dataBridgeWebClient.regServerAccessParamsDto.setUseSsl(useSsl);  UploaderInputManifestDto manifest=getUploaderInputManifestDto();  manifest.setAttributes(attributes);  String storageName="testStorage";  Boolean createNewVersion=false;  BusinessObjectData businessObjectData=dataBridgeWebClient.preRegisterBusinessObjectData(manifest,storageName,createNewVersion);  assertNotNull("businessObjectData",businessObjectData);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DatatypePackage.TYPE__NAME:    return getName();case DatatypePackage.TYPE__NAMESPACE:  return getNamespace();case DatatypePackage.TYPE__VERSION:return getVersion();case DatatypePackage.TYPE__REFERENCES:return getReferences();case DatatypePackage.TYPE__DESCRIPTION:return getDescription();case DatatypePackage.TYPE__DISPLAYNAME:return getDisplayname();case DatatypePackage.TYPE__CATEGORY:return getCategory();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Task<BlockConsistencyGroupRestRep> resynchronizeSnapshot(URI consistencyGroupId,URI snapshotId){  final String url=getIdUrl() + "/protection/snapshots/{fcid}/resynchronize";  return postTask(url,consistencyGroupId,snapshotId);}  }
class C{  public void testDoConfigureSetsConfigurationVersion() throws Exception {  configuration.setProperty(WebLogicPropertySet.CONFIGURATION_VERSION,CONFIGURATION_VERSION);  configuration.doConfigure(container);  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(CONFIGURATION_VERSION,"//weblogic:configuration-version",config);}  }
class C{  private void skipWhitespace(){  matcher.usePattern(WHITESPACE);  if (matcher.lookingAt()) {    matcher.region(matcher.end(),matcher.regionEnd());  }}  }
class C{  protected boolean[] runBasicTest(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int missingLevel,boolean predictorMissing,int numTrain,Vector<String> accepts){  boolean[] result=new boolean[2];  Instances train=null;  Clusterer clusterer=null;  try {    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,multiInstance);    if (nominalPredictor && !multiInstance) {      train.deleteAttributeAt(0);    }    if (missingLevel > 0) {      addMissing(train,missingLevel,predictorMissing);    }    clusterer=AbstractClusterer.makeCopies(getClusterer(),1)[0];  } catch (  Exception ex) {    ex.printStackTrace();    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    clusterer.buildClusterer(train);    println("yes");    result[0]=true;  } catch (  Exception ex) {    boolean acceptable=false;    String msg=ex.getMessage().toLowerCase();    for (int i=0; i < accepts.size(); i++) {      if (msg.indexOf(accepts.elementAt(i)) >= 0) {        acceptable=true;      }    }    println("no" + (acceptable ? " (OK error message)" : ""));    result[1]=acceptable;    if (m_Debug) {      println("\n=== Full Report ===");      print("Problem during training");      println(": " + ex.getMessage() + "\n");      if (!acceptable) {        if (accepts.size() > 0) {          print("Error message doesn't mention ");          for (int i=0; i < accepts.size(); i++) {            if (i != 0) {              print(" or ");            }            print('"' + accepts.elementAt(i) + '"');          }        }        println("here is the dataset:\n");        println("=== Train Dataset ===\n" + train.toString() + "\n");      }    }  }  return result;}  }
class C{  public static long multiply(int p,int q){  long result=0;  if (q != 0) {    long q1=q & 0x00000000ffffffffL;    while (p != 0) {      byte b=(byte)(p & 0x01);      if (b == 1) {        result^=q1;      }      p>>>=1;      q1<<=1;    }  }  return result;}  }
class C{  private void loadInstantUploadVideoPath(){  SharedPreferences appPrefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());  mUploadVideoPath=appPrefs.getString("instant_video_upload_path",getString(R.string.instant_upload_path));  mPrefInstantVideoUploadPath.setSummary(mUploadVideoPath);}  }
class C{  protected void initCDATA(){}  }
class C{  protected String[] split(final String line){  final String[] cols=line.split("[,\t]");  return cols;}  }
class C{  private void addInlineDiffs(Delta<String> delta){  List<String> orig=(List<String>)delta.getOriginal().getLines();  List<String> rev=(List<String>)delta.getRevised().getLines();  LinkedList<String> origList=new LinkedList<String>();  for (  Character character : join(orig,"\n").toCharArray()) {    origList.add(character.toString());  }  LinkedList<String> revList=new LinkedList<String>();  for (  Character character : join(rev,"\n").toCharArray()) {    revList.add(character.toString());  }  List<Delta<String>> inlineDeltas=DiffUtils.diff(origList,revList).getDeltas();  if (inlineDeltas.size() < 3) {    Collections.reverse(inlineDeltas);    for (    Delta<String> inlineDelta : inlineDeltas) {      Chunk<String> inlineOrig=inlineDelta.getOriginal();      Chunk<String> inlineRev=inlineDelta.getRevised();      if (inlineDelta.getClass().equals(DeleteDelta.class)) {        origList=wrapInTag(origList,inlineOrig.getPosition(),inlineOrig.getPosition() + inlineOrig.size() + 1,this.InlineOldTag,this.InlineOldCssClass);      } else       if (inlineDelta.getClass().equals(InsertDelta.class)) {        revList=wrapInTag(revList,inlineRev.getPosition(),inlineRev.getPosition() + inlineRev.size() + 1,this.InlineNewTag,this.InlineNewCssClass);      } else       if (inlineDelta.getClass().equals(ChangeDelta.class)) {        origList=wrapInTag(origList,inlineOrig.getPosition(),inlineOrig.getPosition() + inlineOrig.size() + 1,this.InlineOldTag,this.InlineOldCssClass);        revList=wrapInTag(revList,inlineRev.getPosition(),inlineRev.getPosition() + inlineRev.size() + 1,this.InlineNewTag,this.InlineNewCssClass);      }    }    StringBuilder origResult=new StringBuilder(), revResult=new StringBuilder();    for (    String character : origList) {      origResult.append(character);    }    for (    String character : revList) {      revResult.append(character);    }    delta.getOriginal().setLines(Arrays.asList(origResult.toString().split("\n")));    delta.getRevised().setLines(Arrays.asList(revResult.toString().split("\n")));  }}  }
class C{  public synchronized void append(String key,byte[] bytes){  RawByteAllocator alloc=findRawByteAllocator(key);  long newObjectBytes=alloc.memoryLength + bytes.length;  long newCacheBytes=this.currentMemoryBytes + bytes.length;  if (newObjectBytes <= maxObjectBytes && newCacheBytes <= maxCacheBytes) {    alloc.buffers.add(bytes);    alloc.memoryLength+=bytes.length;    currentMemoryBytes+=bytes.length;  } else {    if (alloc.storageLength == 0) {      alloc.cacheFile=new File(cacheDir,key);    }    try {      FileOutputStream output=outputStreamCache.get(key);      if (output == null) {        output=new FileOutputStream(alloc.cacheFile);        outputStreamCache.put(key,output);        FileChannel channel=output.getChannel();        channel.position(alloc.storageLength);      }      output.write(bytes);    } catch (    IOException e) {      throw new RuntimeException(String.format("Unable to append bytes to storage: key=%s file=%s buffer length=%d",key,alloc.cacheFile.getAbsolutePath(),bytes.length));    }    alloc.storageLength+=bytes.length;    currentStorageBytes+=bytes.length;  }}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    BufferedInputStream fis=null;    try {      fis=new BufferedInputStream(new FileInputStream(file));      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  private void processSuccessResponse(StunResponseEvent ev){  Response response=ev.getResponse();  Request request=ev.getRequest();  CandidatePair checkedPair=(CandidatePair)ev.getTransactionID().getApplicationData();  TransportAddress mappedAddress=null;  if (!response.containsAttribute(Attribute.XOR_MAPPED_ADDRESS)) {    logger.fine("Received a success response with no " + "XOR_MAPPED_ADDRESS attribute.");    logger.info("Pair failed (no XOR-MAPPED-ADDRESS): " + checkedPair.toShortString() + ". Local ufrag"+ parentAgent.getLocalUfrag());    checkedPair.setStateFailed();    return;  }  XorMappedAddressAttribute mappedAddressAttr=(XorMappedAddressAttribute)response.getAttribute(Attribute.XOR_MAPPED_ADDRESS);  mappedAddress=mappedAddressAttr.getAddress(response.getTransactionID());  if (checkedPair.getLocalCandidate().getTransport() == Transport.TCP) {    mappedAddress=new TransportAddress(mappedAddress.getAddress(),mappedAddress.getPort(),Transport.TCP);  }  LocalCandidate validLocalCandidate=null;  validLocalCandidate=parentAgent.findLocalCandidate(mappedAddress);  RemoteCandidate validRemoteCandidate=checkedPair.getRemoteCandidate();  if (validLocalCandidate == null) {    long priority=0;    PriorityAttribute prioAttr=(PriorityAttribute)request.getAttribute(Attribute.PRIORITY);    priority=prioAttr.getPriority();    LocalCandidate peerReflexiveCandidate=new PeerReflexiveCandidate(mappedAddress,checkedPair.getParentComponent(),checkedPair.getLocalCandidate(),priority);    peerReflexiveCandidate.setBase(checkedPair.getLocalCandidate());    checkedPair.getParentComponent().addLocalCandidate(peerReflexiveCandidate);    validLocalCandidate=peerReflexiveCandidate;    if (checkedPair.getParentComponent().getSelectedPair() == null) {      logger.info("Receive a peer-reflexive candidate: " + peerReflexiveCandidate.getTransportAddress() + ". Local ufrag "+ parentAgent.getLocalUfrag());    }  }  CandidatePair existingPair=parentAgent.findCandidatePair(validLocalCandidate.getTransportAddress(),validRemoteCandidate.getTransportAddress());  CandidatePair validPair=(existingPair == null) ? parentAgent.createCandidatePair(validLocalCandidate,validRemoteCandidate) : existingPair;synchronized (checkedPair) {    if (checkedPair.getParentComponent().getSelectedPair() == null)     logger.info("Pair succeeded: " + checkedPair.toShortString() + ". Local ufrag "+ parentAgent.getLocalUfrag());    checkedPair.setStateSucceeded();  }  if (!validPair.isValid()) {    if (validPair.getParentComponent().getSelectedPair() == null)     logger.info("Pair validated: " + validPair.toShortString() + ". Local ufrag "+ parentAgent.getLocalUfrag());    parentAgent.validatePair(validPair);  }  IceMediaStream parentStream=checkedPair.getParentComponent().getParentStream();synchronized (this) {    Vector<CandidatePair> parentCheckList=new Vector<>(parentStream.getCheckList());    for (    CandidatePair pair : parentCheckList) {      if (pair.getState() == CandidatePairState.FROZEN && checkedPair.getFoundation().equals(pair.getFoundation())) {        pair.setStateWaiting();      }    }  }  List<IceMediaStream> allOtherStreams=parentAgent.getStreams();  allOtherStreams.remove(parentStream);  for (  IceMediaStream stream : allOtherStreams) {    CheckList checkList=stream.getCheckList();    boolean wasFrozen=checkList.isFrozen();synchronized (checkList) {      for (      CandidatePair pair : checkList) {        if (parentStream.validListContainsFoundation(pair.getFoundation()) && pair.getState() == CandidatePairState.FROZEN) {          pair.setStateWaiting();        }      }    }    if (checkList.isFrozen())     checkList.computeInitialCheckListPairStates();    if (wasFrozen) {      logger.info("Start checks for checkList of stream " + stream.getName() + " that was frozen");      startChecks(checkList);    }  }  if (validPair.getParentComponent().getSelectedPair() == null) {    logger.info("IsControlling: " + parentAgent.isControlling() + " USE-CANDIDATE:"+ (request.containsAttribute(Attribute.USE_CANDIDATE) || checkedPair.useCandidateSent())+ ". Local ufrag "+ parentAgent.getLocalUfrag());  }  if (parentAgent.isControlling() && request.containsAttribute(Attribute.USE_CANDIDATE)) {    if (validPair.getParentComponent().getSelectedPair() == null) {      logger.info("Nomination confirmed for pair: " + validPair.toShortString() + ". Loal ufrag "+ parentAgent.getLocalUfrag());      parentAgent.nominationConfirmed(validPair);    } else {      logger.fine("Keep alive for pair: " + validPair.toShortString());    }  } else   if (!parentAgent.isControlling() && checkedPair.useCandidateReceived() && !checkedPair.isNominated()) {    if (checkedPair.getParentComponent().getSelectedPair() == null) {      logger.info("Nomination confirmed for pair: " + validPair.toShortString());      parentAgent.nominationConfirmed(checkedPair);    } else {      logger.fine("Keep alive for pair: " + validPair.toShortString());    }  }  if (checkedPair == checkedPair.getParentComponent().getSelectedPair())   checkedPair.setConsentFreshness();}  }
class C{  public FatalPeerException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:46.022 -0500",hash_original_method="85E3B4FCCAFED594AE8716A3280C8E01",hash_generated_method="5102FE82D016AAF05DE0178E966BD666") private void possExpand(int bits){  if ((mPos + bits) < mEnd)   return;  byte[] newBuf=new byte[(mPos + bits) >>> 2];  System.arraycopy(mBuf,0,newBuf,0,mEnd >>> 3);  mBuf=newBuf;}  }
class C{  static public Sequence<IString> tokenize(String str){  String[] strings;  if (str.trim().isEmpty())   strings=new String[0]; else   strings=str.trim().split("\\s+");  IString[] istrs=toIStringArray(strings);  return new ArraySequence<IString>(true,istrs);}  }
class C{  public static FlowDelegate onCreate(NonConfigurationInstance nonConfigurationInstance,Intent intent,Bundle savedInstanceState,StateParceler parceler,History defaultHistory,Flow.Dispatcher dispatcher){  checkArgument(parceler != null,"parceler may not be null");  final Flow flow;  if (nonConfigurationInstance != null) {    flow=nonConfigurationInstance.flow;  } else {    History savedHistory=null;    if (savedInstanceState != null && savedInstanceState.containsKey(HISTORY_KEY)) {      savedHistory=History.from(savedInstanceState.getParcelable(HISTORY_KEY),parceler);    }    flow=new Flow(selectHistory(intent,savedHistory,defaultHistory,parceler));  }  flow.setDispatcher(dispatcher);  return new FlowDelegate(flow,dispatcher,parceler);}  }
class C{  public void copyIntoArray(int fromStart,int[] to,int toStart,int len){  System.arraycopy(objs,fromStart,to,toStart,len);}  }
class C{  public Implementation(){  super();  plugin=this;}  }
class C{  public static String sha256Hash(byte[] data) throws NoSuchAlgorithmException {  return sha256Hash(data,data.length);}  }
class C{  public void removeParticleEffect(){  if (currentParticleEffect == null) {    return;  }  currentParticleEffect.clear();  currentParticleEffect=null;}  }
class C{  @SuppressWarnings("unchecked") public T put(T value){  int x=value.getX();  int z=value.getZ();  int index=getIndex(x,z);  XZAddressable bucket=this.buckets[index];  while (bucket != null) {    if (bucket.getX() == x && bucket.getZ() == z) {      this.buckets[index]=value;      return (T)bucket;    }    index=getNextIndex(index);    bucket=this.buckets[index];  }  this.buckets[index]=value;  ++this.size;  if (this.size > this.loadThreshold) {    grow();  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:30.532 -0500",hash_original_method="9A2E566018459C8A4F9FE2F49DBB98B8",hash_generated_method="8E840BFE7E6405298EC13CA3DE52B347") @android.view.RemotableViewMethod public void smoothScrollByOffset(int offset){  super.smoothScrollByOffset(offset);}  }
class C{  @SuppressWarnings("unchecked") public ArrayList<Map<String,Object>> sort(ArrayList<Map<String,Object>> rows){  TreeMap<T,ArrayList<Map<String,Object>>> sorted=new TreeMap<T,ArrayList<Map<String,Object>>>();  for (int i=0; i < rows.size(); i++) {    Map<String,Object> row=rows.get(i);    if (row.containsKey(columnName)) {      T value=(T)row.get(columnName);      ArrayList<Map<String,Object>> list;      if (sorted.containsKey(value)) {        list=sorted.get(value);      } else {        list=new ArrayList<Map<String,Object>>();        sorted.put(value,list);      }      list.add(row);    }  }  ArrayList<Map<String,Object>> result=new ArrayList<Map<String,Object>>();  for (  Map.Entry<T,ArrayList<Map<String,Object>>> entry : sorted.entrySet()) {    result.addAll(entry.getValue());  }  return result;}  }
class C{  public static void initialize(final CDatabaseConfiguration configuration) throws CouldntLoadDriverException, CouldntConnectException, SQLException {  checkDriver(configuration);  final String url=POSTGRES_DRIVER + "//" + configuration.getHost()+ "/"+ POSTGRES_DEFAULT_DB;  Connection connection=null;  try {    connection=DriverManager.getConnection(url,configuration.getUser(),configuration.getPassword());  } catch (  final SQLException exception) {    CUtilityFunctions.logException(exception);    throw new CouldntConnectException(exception,exception.getErrorCode(),exception.getSQLState());  }  final String statement="CREATE DATABASE \"" + configuration.getName() + "\"";  final PreparedStatement preparedStatement=connection.prepareStatement(statement);  try {    preparedStatement.execute();  }  finally {    preparedStatement.close();    connection.close();  }}  }
class C{  public CoverageCharVdt(String a,String v){  attribute=a.toLowerCase().intern();  value=v.intern();}  }
class C{  public void removeAudioFileType(String type){  audioFileTypes.remove(type);  firePropertyChange(AUDIO_FILE_TYPE,null,audioFileTypes);}  }
class C{  public void fireGenerateEvent(int eventType,String name,Attributes atts){}  }
class C{  public static boolean isShortKeyId(String keyId){  return isValidKeyId(keyId) && keyId.length() == HEX_SHORT_KEY_ID_LENGTH;}  }
class C{  public void removeSegmentOccurrence(byte segmentMarker,int occurrence){  final List segmentList=(List)_segmentDataMap.get(new Byte(segmentMarker));  final List segmentOffsetList=(List)_segmentOffsetDataMap.get(new Byte(segmentMarker));  segmentList.remove(occurrence);  segmentOffsetList.remove(occurrence);}  }
class C{  @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:04.913 -0500",hash_original_method="FDD307626797CF03D3088020E6279DC1",hash_generated_method="EC28F09966AA2D56B5EA24D3CC58965D") @DSVerified @DSSpec(DSCat.IO) public int read() throws IOException {  if (_noConversionRequired)   return super.read();  return __read();}  }
class C{  final int internalNextInt(int origin,int bound){  int r=mix32(nextSeed());  if (origin < bound) {    int n=bound - origin, m=n - 1;    if ((n & m) == 0)     r=(r & m) + origin; else     if (n > 0) {      for (int u=r >>> 1; u + m - (r=u % n) < 0; u=mix32(nextSeed()) >>> 1)       ;      r+=origin;    } else {      while (r < origin || r >= bound)       r=mix32(nextSeed());    }  }  return r;}  }
class C{  public final double dot(MutableDouble2D other){  return other.x * x + other.y * y;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  m_matchers=MBankStatementMatcher.getMatchers(getCtx(),get_TrxName());}  }
class C{  private RopeByteString(ByteString left,ByteString right){  this.left=left;  this.right=right;  leftLength=left.size();  totalLength=leftLength + right.size();  treeDepth=Math.max(left.getTreeDepth(),right.getTreeDepth()) + 1;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static String toString(JSONObject jo) throws JSONException {  StringBuffer sb=new StringBuffer();  int i;  JSONArray ja;  String key;  Iterator keys;  int length;  Object object;  String tagName;  String value;  tagName=jo.optString("tagName");  if (tagName == null) {    return XML.escape(jo.toString());  }  XML.noSpace(tagName);  tagName=XML.escape(tagName);  sb.append('<');  sb.append(tagName);  keys=jo.keys();  while (keys.hasNext()) {    key=keys.next().toString();    if (!"tagName".equals(key) && !"childNodes".equals(key)) {      XML.noSpace(key);      value=jo.optString(key);      if (value != null) {        sb.append(' ');        sb.append(XML.escape(key));        sb.append('=');        sb.append('"');        sb.append(XML.escape(value));        sb.append('"');      }    }  }  ja=jo.optJSONArray("childNodes");  if (ja == null) {    sb.append('/');    sb.append('>');  } else {    sb.append('>');    length=ja.length();    for (i=0; i < length; i+=1) {      object=ja.get(i);      if (object != null) {        if (object instanceof String) {          sb.append(XML.escape(object.toString()));        } else         if (object instanceof JSONObject) {          sb.append(toString((JSONObject)object));        } else         if (object instanceof JSONArray) {          sb.append(toString((JSONArray)object));        } else {          sb.append(object.toString());        }      }    }    sb.append('<');    sb.append('/');    sb.append(tagName);    sb.append('>');  }  return sb.toString();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static IndexType createNonUnique(){  return createNonUnique(false,false);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public GlassFish3xStandaloneLocalConfigurationCapability(){  this.propertySupportMap.put(DatasourcePropertySet.DATASOURCE,Boolean.TRUE);  this.propertySupportMap.put(DatasourcePropertySet.TRANSACTION_SUPPORT,Boolean.TRUE);  this.propertySupportMap.put(ResourcePropertySet.RESOURCE,Boolean.TRUE);  this.propertySupportMap.put(GlassFishPropertySet.DEBUGGER_PORT,Boolean.TRUE);  this.propertySupportMap.put(GlassFishPropertySet.OSGI_SHELL_PORT,Boolean.TRUE);}  }
class C{  public PLVector3(){  super();  x=y=z=0.0f;}  }
class C{  public void testConstrStringWithoutExpPos1(){  String a="732546982374982347892379283571094797.287346782359284756";  int aScale=18;  BigInteger bA=new BigInteger("732546982374982347892379283571094797287346782359284756");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  public void login(String username,String password) throws IOException {  String requestUrl=RESOURCE + "/login";  Credentials creds=new Credentials();  creds.setPassword(password);  creds.setUsername(username);  ArgusResponse response=getClient().executeHttpRequest(ArgusHttpClient.RequestType.POST,requestUrl,creds);  assertValidResponse(response,requestUrl);}  }
class C{  public static void copy(URL from,OutputStream to) throws IOException {  asByteSource(from).copyTo(to);}  }
class C{  protected S_AssignmentImpl(){  super();}  }
class C{  public Builder gradient(Gradient val){  gradient=val;  return this;}  }
class C{  public void init(boolean forEncryption,CipherParameters params){  if (params instanceof KeyParameter) {    workingKey=((KeyParameter)params).getKey();    setKey(workingKey);    return;  }  throw new IllegalArgumentException("invalid parameter passed to RC4 init - " + params.getClass().getName());}  }
class C{  public void addCharacters(String str) throws IOException {  charsAddedBetweenTags_=true;  writer_.write(str);}  }
class C{  public final CC push(Float weightX,Float weightY){  return pushX(weightX).pushY(weightY);}  }
class C{  public static TermRangeQuery newStringRange(String field,String lowerTerm,String upperTerm,boolean includeLower,boolean includeUpper){  BytesRef lower=lowerTerm == null ? null : new BytesRef(lowerTerm);  BytesRef upper=upperTerm == null ? null : new BytesRef(upperTerm);  return new TermRangeQuery(field,lower,upper,includeLower,includeUpper);}  }
class C{  public static double mostToxicRow(LogicCircuit lc){  Double min_growth=1.0;  for (  Gate g : lc.get_output_gates()) {    if (!g.get_toxicity().isEmpty()) {      if (Collections.min(g.get_toxicity()) < min_growth) {        min_growth=Collections.min(g.get_toxicity());      }    }  }  return min_growth;}  }
class C{  public MemoryExampleTable(List<Attribute> attributes,DataRowReader i,boolean permute){  this(attributes);  readExamples(i,permute);}  }
class C{  public UnixTerminal(InputStream terminalInput,OutputStream terminalOutput,Charset terminalCharset) throws IOException {  this(terminalInput,terminalOutput,terminalCharset,CtrlCBehaviour.CTRL_C_KILLS_APPLICATION);}  }
class C{  private boolean ruleInScale(Rule rule,double currentScaleDenominator){  boolean inScale=true;  if (rule.getMinScaleDenominator() > 0 && currentScaleDenominator < rule.getMinScaleDenominator()) {    inScale=false;  }  if (rule.getMaxScaleDenominator() < Double.POSITIVE_INFINITY && currentScaleDenominator > rule.getMaxScaleDenominator()) {    inScale=false;  }  return inScale;}  }
class C{  public Transform(double radians,double scaleX,double scaleY,double translateX,double translateY){  super(scaleX * Math.cos(radians),scaleY * Math.cos(radians),Math.sin(radians),-Math.sin(radians),translateX,translateY);}  }
class C{  public float[] array(float[] array){  if (array == null || array.length != count) {    array=new float[count];  }  System.arraycopy(data,0,array,0,count);  return array;}  }
class C{  protected void notifyUpdate(String key,Map<String,Object> value){  if (value.size() == 1) {    Map.Entry<String,Object> entry=value.entrySet().iterator().next();    notifyUpdate(entry.getKey(),entry.getValue());    return;  }  for (  ISharedObjectListener listener : listeners) {    listener.onSharedObjectUpdate(this,key,value);  }}  }
class C{  public ApproximationSetCollector(){  this(null,null);}  }
class C{  public final synchronized void printLine(String format){  String s=String.format(Locale.US,format,new Object[]{});  addLine(s);}  }
class C{  @Override public void write(String str){  write(str.toCharArray());}  }
class C{  public void recordVariable(String typeDesc,String varName,int varNo,SymbolTable tbl) throws CompileError {  char c;  int dim=0;  while ((c=typeDesc.charAt(dim)) == '[')   ++dim;  int type=MemberResolver.descToType(c);  String cname=null;  if (type == CLASS) {    if (dim == 0)     cname=typeDesc.substring(1,typeDesc.length() - 1); else     cname=typeDesc.substring(dim + 1,typeDesc.length() - 1);  }  Declarator decl=new Declarator(type,cname,dim,varNo,new Symbol(varName));  tbl.append(varName,decl);}  }
class C{  private static void notifyListeners(final DistributedMember member,final boolean client,final EventType typeOfEvent){  startMonitoring();  ThreadPoolExecutor queuedExecutor=executor;  if (queuedExecutor == null) {    return;  }  final ClientMembershipEvent event=new InternalClientMembershipEvent(member,client);  if (forceSynchronous) {    doNotifyClientMembershipListener(member,client,event,typeOfEvent);  } else {    try {      queuedExecutor.execute(null);    } catch (    RejectedExecutionException e) {    }  }}  }
class C{  public static int toRealPosition(int position,int count){  position=position - 1;  if (position < 0) {    position+=count;  } else {    position=position % count;  }  return position;}  }
class C{  public DynamicLayout(CharSequence base,TextPaint paint,int width,Alignment align,float spacingmult,float spacingadd,boolean includepad){  this(base,base,paint,width,align,spacingmult,spacingadd,includepad);}  }
class C{  @Override public void put(Mean other){  if (other instanceof MeanVariance) {    final double nwsum=other.n + this.n;    final double delta=other.m1 - this.m1;    final double rval=delta * other.n / nwsum;    this.m1=(this.n * this.m1 + other.n * other.m1) / nwsum;    this.m2+=((MeanVariance)other).m2 + delta * this.n * rval;    this.n=nwsum;  } else {    throw new AbortException("I cannot combine Mean and MeanVariance to a MeanVariance.");  }}  }
class C{  private void addEndpoints(Geometry geom){  if (geom instanceof LineString) {    addEndpoints(geom.getCoordinates());  } else   if (geom instanceof GeometryCollection) {    GeometryCollection gc=(GeometryCollection)geom;    for (int i=0; i < gc.getNumGeometries(); i++) {      addEndpoints(gc.getGeometryN(i));    }  }}  }
class C{  boolean willForward(Integer row){  return nodeForwarding.containsKey(row);}  }
class C{  public static String submitJar(Config config,String localJar){  throw new UnsupportedOperationException("submitJar unsupported");}  }
class C{  public static Vinci base(Context context){  if (Base_singleton == null) {synchronized (Vinci.class) {      if (Base_singleton == null) {        Base_singleton=new Vinci(context);      }    }  }  return Base_singleton;}  }
class C{  public void createSubUsageScenario03() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.weeksToMillis(0.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO03_PERUNIT_WEEK",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO03_PERUNIT_WEEK",serviceDetails,basicSetup.getSecondCustomerUser1(),role);  long usageEndTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.weeksToMillis(2.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO03_PERUNIT_WEEK",subDetails);}  }
class C{  public void clearDatabase() throws SQLException {  Database db=new Database(App.getInstance().getApplicationContext());  db.onUpgrade(db.getWritableDatabase(),0,1);  db.close();}  }
class C{  public void paintTreeCellBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public String toStringSummary(){  return new ResultMatrixPlainText(this).toStringSummary();}  }
class C{  public static int nullSafeHashCode(double[] array){  if (array == null) {    return 0;  }  int hash=INITIAL_HASH;  int arraySize=array.length;  for (int i=0; i < arraySize; i++) {    hash=MULTIPLIER * hash + hashCode(array[i]);  }  return hash;}  }
class C{  protected void sequence_CatchBlock(ISerializationContext context,CatchBlock semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.CATCH_BLOCK__CATCH_VARIABLE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.CATCH_BLOCK__CATCH_VARIABLE));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.ABSTRACT_CATCH_BLOCK__BLOCK) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.ABSTRACT_CATCH_BLOCK__BLOCK));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getCatchBlockAccess().getCatchVariableCatchVariableParserRuleCall_3_0(),semanticObject.getCatchVariable());  feeder.accept(grammarAccess.getCatchBlockAccess().getBlockBlockParserRuleCall_5_0(),semanticObject.getBlock());  feeder.finish();}  }
class C{  public QueryEvaluationException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public SQLTransactionRollbackException(){}  }
class C{  public String displayModelInOldFormatTipText(){  return "Use old format for model output. The old format is " + "better when there are many class values. The new format " + "is better when there are fewer classes and many attributes.";}  }
class C{  @DSSource({DSSourceKind.FILE}) @DSComment("Activity on IO class") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:45.204 -0500",hash_original_method="9CBC8BBFD7044A0BC3A194777FBBD2CA",hash_generated_method="C43FAE37877C94D1A4278A353B3DC98F") public int read() throws IOException {  return (read(scratch,0,1) != -1) ? scratch[0] & 0xff : -1;}  }
class C{  public LessOp_ createLessOp_(){  LessOp_Impl lessOp_=new LessOp_Impl();  return lessOp_;}  }
class C{  public Session open() throws Exception {  return open(true);}  }
class C{  public TitleEntity(Shape area,Title title,String toolTipText){  this(area,title,toolTipText,null);}  }
class C{  public void checkInlinable(ConfigData configData){  if (origData == null) {    isInlinable=false;    return;  }  if (configData.isStateFull(url)) {    isInlinable=false;    return;  }  if (isInIEComment) {    isInlinable=false;    return;  }  byte[] bytes=origData;  if (bytes == null) {    isInlinable=false;    return;  }  for (int i=0; i < bytes.length - 7; i++) {    if (bytes[i] == '@' && (bytes[i + 1] == 'i' || bytes[i + 1] == 'I') && (bytes[i + 2] == 'm' || bytes[i + 2] == 'M') && (bytes[i + 3] == 'p' || bytes[i + 3] == 'P') && (bytes[i + 4] == 'o' || bytes[i + 4] == 'O') && (bytes[i + 5] == 'r' || bytes[i + 5] == 'R') && (bytes[i + 6] == 't' || bytes[i + 6] == 'T')) {      isInlinable=false;      return;    }    if (bytes[i] == '@' && (bytes[i + 1] == 'f' || bytes[i + 1] == 'F') && (bytes[i + 2] == 'o' || bytes[i + 2] == 'O') && (bytes[i + 3] == 'n' || bytes[i + 3] == 'N') && (bytes[i + 4] == 't' || bytes[i + 4] == 'T') && (bytes[i + 5] == '-') && (bytes[i + 6] == 'f' || bytes[i + 6] == 'F') && (bytes[i + 7] == 'a' || bytes[i + 7] == 'A') && (bytes[i + 8] == 'c' || bytes[i + 8] == 'C') && (bytes[i + 9] == 'e' || bytes[i + 9] == 'E')) {      isInlinable=false;      return;    }  }  isInlinable=true;}  }
class C{  protected void sequence_ExpressionStatement(ISerializationContext context,ExpressionStatement semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.EXPRESSION_STATEMENT__EXPRESSION) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.EXPRESSION_STATEMENT__EXPRESSION));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getExpressionStatementAccess().getExpressionExpressionParserRuleCall_0_0(),semanticObject.getExpression());  feeder.finish();}  }
class C{  public boolean isTreeTab(){  return m_vo.HasTree;}  }
class C{  public static int countLine(File file) throws IOException {  int count=0;  try (FileChannel fc=new RandomAccessFile(file,"r").getChannel()){    MappedByteBuffer buffer=fc.map(FileChannel.MapMode.READ_ONLY,0,fc.size());    byte prevChar=NEW_LINE;    while (buffer.hasRemaining()) {      byte currentChar=buffer.get();      if (currentChar == CARRIAGE_RETURN) {        currentChar=NEW_LINE;      }      if (currentChar == NEW_LINE && prevChar != NEW_LINE) {        count++;      }      prevChar=currentChar;    }    if (prevChar != NEW_LINE) {      count++;    }  }   return count;}  }
class C{  private PanelMenu(){  this.setText(Bundle.getMessage("MenuPanels"));  JMenu newPanel=new JMenu(Bundle.getMessage("MenuItemNew"));  newPanel.add(new jmri.jmrit.display.panelEditor.PanelEditorAction(Bundle.getMessage("PanelEditor")));  newPanel.add(new jmri.jmrit.display.controlPanelEditor.ControlPanelEditorAction(Bundle.getMessage("ControlPanelEditor")));  newPanel.add(new jmri.jmrit.display.layoutEditor.LayoutEditorAction(Bundle.getMessage("LayoutEditor")));  add(newPanel);  add(new jmri.configurexml.LoadXmlUserAction(Bundle.getMessage("MenuItemLoad")));  add(new jmri.configurexml.StoreXmlUserAction(Bundle.getMessage("MenuItemStore")));  add(new jmri.jmrit.revhistory.swing.FileHistoryAction(Bundle.getMessage("MenuItemShowHistory")));  add(new JSeparator());  panelsSubMenu=new JMenu(Bundle.getMessage("MenuShowPanel"));  noPanelsItem=new JMenuItem(Bundle.getMessage("MenuItemNoPanels"));  noPanelsItem.setEnabled(false);  panelsSubMenu.add(noPanelsItem);  add(panelsSubMenu);  add(new JSeparator());  add(new jmri.jmrit.jython.RunJythonScript(Bundle.getMessage("MenuItemScript")));  add(new jmri.jmrit.automat.monitor.AutomatTableAction(Bundle.getMessage("MenuItemMonitor")));  add(new jmri.jmrit.jython.JythonWindow(Bundle.getMessage("MenuItemScriptLog")));  add(new jmri.jmrit.jython.InputWindowAction(Bundle.getMessage("MenuItemScriptInput")));}  }
class C{  public void write(Writer writer) throws Exception {  writer.write(toString());  writer.flush();}  }
class C{  public static TransactionEntry makeTransactionEntry(String type,String date,String shares,String price,String commission,String currency,String notes){  TransactionEntry entry=new TransactionEntry();  TransactionData data=new TransactionData();  if (type.equals(""))   type="Buy";  data.setType(type);  if (!date.equals(""))   data.setDate(DateTime.parseDateTime(date + "T00:00:00.000Z"));  if (!shares.equals(""))   data.setShares(Double.valueOf(shares).doubleValue());  if (!price.equals("")) {    Price p=new Price();    p.addMoney(new Money(Double.valueOf(price).doubleValue(),currency));    data.setPrice(p);  }  if (!commission.equals("")) {    Commission c=new Commission();    c.addMoney(new Money(Double.valueOf(commission).doubleValue(),currency));    data.setCommission(c);  }  if (!notes.equals(""))   data.setNotes(notes);  entry.setTransactionData(data);  return entry;}  }
class C{  public TreeRTGQuercusRobur(){  super();  this.logBlock=Blocks.LOG.getDefaultState();  this.leavesBlock=Blocks.LEAVES.getDefaultState();  this.trunkSize=4;  this.crownSize=8;}  }
class C{  public static final CButton createResetButton(boolean withText){  if (withText)   return createResetButton(Msg.getMsg(Env.getCtx(),A_RESET));  return createResetButton(null);}  }
class C{  public NoAuthenticationProvider() throws GuacamoleException {  environment=new LocalEnvironment();}  }
class C{  public static String tryGetHalfWidthText(final char ch){  if (sHalfWidthMap.containsKey(ch)) {    return sHalfWidthMap.get(ch);  } else {    return null;  }}  }
class C{  private void doNormalCommandLineList(List<String> commandLineList,List<String> jointOptions,Path classpath){  commandLineList.add("--classpath");  commandLineList.add(classpath.toString());  if (jointCompilation) {    commandLineList.add("-j");    commandLineList.addAll(jointOptions);  }  if (destDir != null) {    commandLineList.add("-d");    commandLineList.add(destDir.getPath());  }  if (encoding != null) {    commandLineList.add("--encoding");    commandLineList.add(encoding);  }  if (stacktrace) {    commandLineList.add("-e");  }  if (parameters) {    commandLineList.add("--parameters");  }  if (useIndy) {    commandLineList.add("--indy");  }  if (scriptBaseClass != null) {    commandLineList.add("-b");    commandLineList.add(scriptBaseClass);  }  if (configscript != null) {    commandLineList.add("--configscript");    commandLineList.add(configscript);  }}  }
class C{  public static <E>SortedSet<E> constrainedSortedSet(SortedSet<E> sortedSet,Constraint<? super E> constraint){  return new ConstrainedSortedSet<E>(sortedSet,constraint);}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public void tellVersion(Actor player){}  }
class C{  public static final short BuildShortBE(byte bytevec[],boolean MSBFirst){  return BuildShortBE(bytevec,0);}  }
class C{  public void testGetAttribute(){  char expectedId1=20;  char expectedId2=21;  char actualId1;  char actualId2;  unknownAttributesAttribute.addAttributeID(expectedId1);  unknownAttributesAttribute.addAttributeID(expectedId2);  actualId1=unknownAttributesAttribute.getAttribute(0);  actualId2=unknownAttributesAttribute.getAttribute(1);  assertEquals("getAttribute() return value mismatch",expectedId1,actualId1);  assertEquals("getAttribute() return value mismatch",expectedId2,actualId2);}  }
class C{  public void write(Object obj,String localName,String uri) throws XMLStreamException {  _xml.add(obj,localName,uri);}  }
class C{  @Interruptible private static boolean isPrefix(String a,byte[] b){  int aLen=a.length();  if (aLen > b.length) {    return false;  }  for (int i=0; i < aLen; i++) {    if (a.charAt(i) != ((char)b[i])) {      return false;    }  }  return true;}  }
class C{  public Object internalRemove(Object key){  return context.remove(key);}  }
class C{  public QueryTask sendQueryAndWait(QueryTask query) throws Throwable {  return ServiceHostUtils.sendQueryAndWait(hosts[0],"test-host",query);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  boolean flag;  int row, col, rN, cN, r, c, count;  double xCoord, yCoord;  int progress;  int i, a;  boolean patternMatch;  double value, z, zN;  int[] neighbours=new int[8];  int FID=0;  int[] rowVals=new int[2];  int[] colVals=new int[2];  int traceDirection=0;  int previousTraceDirection=0;  double currentHalfRow=0, currentHalfCol=0;  double[] inputValueData=new double[4];  long numPoints;  int minLineLength=2;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int[][] elements={{6,7,0,4,3,2},{7,0,1,3,5},{0,1,2,4,5,6},{1,2,3,5,7},{2,3,4,6,7,0},{3,4,5,7,1},{4,5,6,0,1,2},{5,6,7,1,3},{0,1,2,3,4,5,6,7},{0,1,2,3,4,5,6,7}};  double[][] vals={{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{1,1,1,1,1,1,1,1},{0,0,0,0,0,0,0,0}};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  minLineLength=Integer.parseInt(args[2]);  if (minLineLength < 2) {    minLineLength=2;  }  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster input=new WhiteboxRaster(inputFile,"r");    int rows=input.getNumberRows();    int cols=input.getNumberColumns();    double rowsD=(double)rows;    double colsD=(double)cols;    double noData=input.getNoDataValue();    double gridResX=input.getCellSizeX();    double gridResY=input.getCellSizeY();    double east=input.getEast() - gridResX / 2.0;    double west=input.getWest() + gridResX / 2.0;    double EWRange=east - west;    double north=input.getNorth() - gridResY / 2.0;    double south=input.getSouth() + gridResY / 2.0;    double NSRange=north - south;    String tempHeader1=inputFile.replace(".dep","_temp1.dep");    WhiteboxRaster temp1=new WhiteboxRaster(tempHeader1,"rw",inputFile,WhiteboxRaster.DataType.INTEGER,0);    temp1.isTemporaryFile=true;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=input.getValue(row,col);        if (z > 0 && z != noData) {          for (i=0; i < 8; i++) {            z=input.getValue(row + dY[i],col + dX[i]);            if (z == 1) {              neighbours[i]=1;            } else {              neighbours[i]=0;            }          }          value=1;          for (a=8; a < elements.length; a++) {            patternMatch=true;            for (i=0; i < elements[a].length; i++) {              if (neighbours[elements[a][i]] != vals[a][i]) {                patternMatch=false;                break;              }            }            if (patternMatch) {              value=0;            }          }          temp1.setValue(row,col,value);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100.0 * row / (rows - 1));      updateProgress("Loop 1 of 4:",progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=temp1.getValue(row,col);        if (z == 1) {          for (i=0; i < 8; i++) {            z=temp1.getValue(row + dY[i],col + dX[i]);            if (z == 1) {              neighbours[i]=1;            } else {              neighbours[i]=0;            }          }          value=1;          for (a=0; a < 8; a++) {            patternMatch=true;            for (i=0; i < elements[a].length; i++) {              if (neighbours[elements[a][i]] != vals[a][i]) {                patternMatch=false;                break;              }            }            if (patternMatch) {              value=0;            }          }          temp1.setValue(row,col,value);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100.0 * row / (rows - 1));      updateProgress("Loop 2 of 4:",progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=temp1.getValue(row,col);        if (z > 0 && z != noData) {          count=0;          for (i=0; i < 8; i++) {            rN=row + dY[i];            cN=col + dX[i];            zN=temp1.getValue(rN,cN);            if (zN > 0 && zN != noData) {              count++;            }          }          temp1.setValue(row,col,count);        } else {          temp1.setValue(row,col,0);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100.0 * row / (rows - 1));      updateProgress("Loop 3 of 4:",progress);    }    ShapeFile output=new ShapeFile(outputFile,ShapeType.POLYLINE);    DBFField fields[]=new DBFField[2];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("VALUE");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(2);    String DBFName=output.getDatabaseFile();    DBFWriter writer=new DBFWriter(new File(DBFName));    writer.setFields(fields);    int[] parts={0};    boolean pointAdded=false;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=temp1.getValue(row,col);        if (z == 1) {          PointsList points=new PointsList();          value=1;          r=row;          c=col;          flag=true;          previousTraceDirection=-1;          traceDirection=0;          do {            xCoord=west + (c / colsD) * EWRange;            yCoord=north - (r / rowsD) * NSRange;            pointAdded=false;            if (traceDirection != previousTraceDirection) {              points.addPoint(xCoord,yCoord);              previousTraceDirection=traceDirection;              pointAdded=true;            }            temp1.setValue(r,c,0);            traceDirection=-1;            value=-1;            for (i=0; i < 8; i++) {              rN=r + dY[i];              cN=c + dX[i];              zN=temp1.getValue(rN,cN);              if (zN > 0 && zN != noData) {                traceDirection=i;                value=zN;                break;              }            }            if (value == 2) {              r+=dY[traceDirection];              c+=dX[traceDirection];            } else             if (value >= 0) {              r+=dY[traceDirection];              c+=dX[traceDirection];              if (!pointAdded) {                xCoord=west + (c / colsD) * EWRange;                yCoord=north - (r / rowsD) * NSRange;                points.addPoint(xCoord,yCoord);              }              if (value == 1) {                temp1.setValue(r,c,0);              } else {                temp1.setValue(r,c,value - 1);              }              flag=false;            } else {              flag=false;            }          } while (flag);          if (points.size() >= minLineLength) {            PolyLine poly=new PolyLine(parts,points.getPointsArray());            output.addRecord(poly);            Object[] rowData=new Object[2];            rowData[0]=new Double(FID);            rowData[1]=new Double(z);            writer.addRecord(rowData);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100.0 * row / (rows - 1));      updateProgress("Loop 4 of 4:",progress);    }    temp1.close();    input.close();    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void traverseResolverTreeAndGetStartAndEndKey(SegmentProperties segmentProperties,AbsoluteTableIdentifier tableIdentifier,FilterResolverIntf filterResolver,List<IndexKey> listOfStartEndKeys) throws QueryExecutionException {  IndexKey searchStartKey=null;  IndexKey searchEndKey=null;  long[] startKey=new long[segmentProperties.getDimensionKeyGenerator().getDimCount()];  long[] endKey=new long[segmentProperties.getDimensionKeyGenerator().getDimCount()];  List<byte[]> listOfStartKeyByteArray=new ArrayList<byte[]>(segmentProperties.getNumberOfNoDictionaryDimension());  List<byte[]> listOfEndKeyByteArray=new ArrayList<byte[]>(segmentProperties.getNumberOfNoDictionaryDimension());  SortedMap<Integer,byte[]> setOfStartKeyByteArray=new TreeMap<Integer,byte[]>();  SortedMap<Integer,byte[]> setOfEndKeyByteArray=new TreeMap<Integer,byte[]>();  SortedMap<Integer,byte[]> defaultStartValues=new TreeMap<Integer,byte[]>();  SortedMap<Integer,byte[]> defaultEndValues=new TreeMap<Integer,byte[]>();  traverseResolverTreeAndPopulateStartAndEndKeys(filterResolver,tableIdentifier,segmentProperties,startKey,setOfStartKeyByteArray,endKey,setOfEndKeyByteArray);  fillDefaultStartValue(defaultStartValues,segmentProperties);  fillDefaultEndValue(defaultEndValues,segmentProperties);  fillNullValuesStartIndexWithDefaultKeys(setOfStartKeyByteArray,segmentProperties);  fillNullValuesEndIndexWithDefaultKeys(setOfEndKeyByteArray,segmentProperties);  pruneStartAndEndKeys(setOfStartKeyByteArray,listOfStartKeyByteArray);  pruneStartAndEndKeys(setOfEndKeyByteArray,listOfEndKeyByteArray);  searchStartKey=FilterUtil.createIndexKeyFromResolvedFilterVal(startKey,segmentProperties.getDimensionKeyGenerator(),FilterUtil.getKeyWithIndexesAndValues(listOfStartKeyByteArray));  searchEndKey=FilterUtil.createIndexKeyFromResolvedFilterVal(endKey,segmentProperties.getDimensionKeyGenerator(),FilterUtil.getKeyWithIndexesAndValues(listOfEndKeyByteArray));  listOfStartEndKeys.add(searchStartKey);  listOfStartEndKeys.add(searchEndKey);}  }
class C{  public GoogleBaseQuery(URL feedUrl){  super(feedUrl);}  }
class C{  public boolean isUsePriors(){  return usePriors;}  }
class C{  static public void put(Throwable exception){  put((String)null,exception);}  }
class C{  public String lambdaTipText(){  return "The regularization constant. (default = 0.0001)";}  }
class C{  private void present(){  glUseProgram(quadProgram);  glBindVertexArray(vao);  glBindTexture(GL_TEXTURE_2D,raytraceTexture);  glBindSampler(0,this.sampler);  glDrawArrays(GL_TRIANGLES,0,6);  glBindSampler(0,0);  glBindTexture(GL_TEXTURE_2D,0);  glBindVertexArray(0);  glUseProgram(0);}  }
class C{  @Override public IGangliaMetadataMessage resolve(final IGangliaMetadataMessage decl){  return decl;}  }
class C{  public static void init(Context context){  if (context == null)   throw new NullPointerException("The passed context is null, have you checked its validity?");  OneSheeldSdk.context=context;  isInit=true;  boolean oldDebuggingLogStatus=isDebuggingEnabled;  isDebuggingEnabled=false;  getManager().disconnectAll();  getManager().cancelConnecting();  getManager().cancelScanning();  getManager().removeAllCallbacks();  getManager().init();  isDebuggingEnabled=oldDebuggingLogStatus;  Log.i("OneSheeld Android SDK v" + versionName + " has initialized.");}  }
class C{  public static boolean isCurrentUserInRole(String authority){  SecurityContext securityContext=SecurityContextHolder.getContext();  Authentication authentication=securityContext.getAuthentication();  if (authentication != null) {    if (authentication.getPrincipal() instanceof UserDetails) {      UserDetails springSecurityUser=(UserDetails)authentication.getPrincipal();      return springSecurityUser.getAuthorities().contains(new SimpleGrantedAuthority(authority));    }  }  return false;}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  super.onMeasure(widthMeasureSpec,heightMeasureSpec);  int measureWidth=MeasureSpec.makeMeasureSpec(getMeasuredWidth() - getPaddingLeft() - getPaddingRight(),MeasureSpec.EXACTLY);  int measureHeight=MeasureSpec.makeMeasureSpec(getMeasuredHeight() - getPaddingTop() - getPaddingBottom(),MeasureSpec.EXACTLY);  if (mContainer != null) {    mContainer.measure(measureWidth,measureHeight);  }}  }
class C{  public synchronized void flush(){  if (readOnly) {    return;  }  if (pageStore != null) {    pageStore.flushLog();  }  if (mvStore != null) {    try {      mvStore.flush();    } catch (    RuntimeException e) {      backgroundException=DbException.convert(e);      throw e;    }  }}  }
class C{  private void initialize(){  mTxtAddress=(TextView)mRootView.findViewById(R.id.txt_sms_address);  mTxtDate=(TextView)mRootView.findViewById(R.id.txt_sms_date);}  }
class C{  public Contribution(NondominatedPopulation referenceSet){  this(referenceSet,(EpsilonBoxDominanceComparator)null);}  }
class C{  public static DiscreteVariableType serializableInstance(){  return DiscreteVariableType.NOMINAL;}  }
class C{  private boolean isHalfClosed(){  return mIsHalfClosed;}  }
class C{  public boolean isValid(){  return Math.abs(lat().radians()) <= S2.M_PI_2 && Math.abs(lng().radians()) <= S2.M_PI;}  }
class C{  public static <T>T doPrivileged(PrivilegedAction<T> action,AccessControlContext context){  T result=action.run();  keepalive(context);  return result;}  }
class C{  private void backupIcons(BackupDataOutput data) throws IOException {  if (!initializeIconCache()) {    dataChanged();    if (DEBUG)     Log.d(TAG,"Launcher is not initialized, delaying icon backup");    return;  }  final ContentResolver cr=mContext.getContentResolver();  final int dpi=mContext.getResources().getDisplayMetrics().densityDpi;  final UserHandleCompat myUserHandle=UserHandleCompat.myUserHandle();  int backupUpIconCount=0;  String where="(" + Favorites.ITEM_TYPE + "="+ Favorites.ITEM_TYPE_APPLICATION+ " OR "+ Favorites.ITEM_TYPE+ "="+ Favorites.ITEM_TYPE_SHORTCUT+ ") AND "+ getUserSelectionArg();  Cursor cursor=cr.query(Favorites.CONTENT_URI,FAVORITE_PROJECTION,where,null,null);  try {    cursor.moveToPosition(-1);    while (cursor.moveToNext()) {      final long id=cursor.getLong(ID_INDEX);      final String intentDescription=cursor.getString(INTENT_INDEX);      try {        Intent intent=Intent.parseUri(intentDescription,0);        ComponentName cn=intent.getComponent();        Key key=null;        String backupKey=null;        if (cn != null) {          key=getKey(Key.ICON,cn.flattenToShortString());          backupKey=keyToBackupKey(key);        } else {          Log.w(TAG,"empty intent on application favorite: " + id);        }        if (mExistingKeys.contains(backupKey)) {          if (DEBUG)           Log.d(TAG,"already saved icon " + backupKey);          mKeys.add(key);        } else         if (backupKey != null) {          if (DEBUG)           Log.d(TAG,"I can count this high: " + backupUpIconCount);          if (backupUpIconCount < MAX_ICONS_PER_PASS) {            if (DEBUG)             Log.d(TAG,"saving icon " + backupKey);            Bitmap icon=mIconCache.getIcon(intent,myUserHandle);            if (icon != null && !mIconCache.isDefaultIcon(icon,myUserHandle)) {              writeRowToBackup(key,packIcon(dpi,icon),data);              mKeys.add(key);              backupUpIconCount++;            }          } else {            if (VERBOSE)             Log.v(TAG,"deferring icon backup " + backupKey);            dataChanged();          }        }      } catch (      URISyntaxException e) {        Log.e(TAG,"invalid URI on application favorite: " + id);      }catch (      IOException e) {        Log.e(TAG,"unable to save application icon for favorite: " + id);      }    }  }  finally {    cursor.close();  }}  }
class C{  public static SafeHtmlMint fromPolicyFactory(PolicyFactory f){  return new SafeHtmlMint(f);}  }
class C{  public MLContext(JavaSparkContext sc) throws DMLRuntimeException {  initializeSpark(sc.sc(),false,false);}  }
class C{  public PrincipalId updateGroupDetail(String tenantName,String groupName,GroupDetail detail) throws Exception {  return getService().updateGroupDetail(tenantName,groupName,detail,this.getServiceContext());}  }
class C{  public void append(char c[],int off,int len) throws IOException {  append(new String(c,off,len));}  }
class C{  synchronized void uncheck(){  if (!checked)   return;  checked=false;  int size=parents.size();  for (int x=0; x < size; x++)   ((ParameterDatabase)(parents.elementAt(x))).uncheck();}  }
class C{  private Object executeLT(PageContext pc,SQL sql,Query qr,ZExpression expression,int row) throws PageException {  return (executeCompare(pc,sql,qr,expression,row) < 0) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public void testDecomposed() throws Exception {  TokenStream stream=whitespaceMockTokenizer("\u0049\u0307STANBUL \u0049\u0307ZM\u0049\u0307R ISPARTA");  TurkishLowerCaseFilter filter=new TurkishLowerCaseFilter(stream);  assertTokenStreamContents(filter,new String[]{"istanbul","izmir","\u0131sparta"});}  }
class C{  @ObjectiveCName("sendAudioWithPeer:withName:withDuration:withDescriptor:") public void sendAudio(@NotNull Peer peer,@NotNull String fileName,int duration,@NotNull String descriptor){  modules.getMessagesModule().sendAudio(peer,fileName,duration,descriptor);}  }
class C{  protected int engineGetBlockSize(){  return core.getBlockSize();}  }
class C{  public void close(){  continuous.close();  discrete.close();}  }
class C{  SensorSelectionModel(final VisionWorld visionWorld){  if (visionWorld == null) {    throw new IllegalArgumentException("visionWorld must not be null");  }  this.visionWorld=visionWorld;  selection=new HashSet<Sensor>();  listenerList=new EventListenerList();}  }
class C{  protected boolean matchFoundInZip(Part part) throws MessagingException, IOException {  ZipInputStream zis=new ZipInputStream(part.getInputStream());  try {    while (true) {      ZipEntry zipEntry=zis.getNextEntry();      if (zipEntry == null) {        break;      }      String fileName=zipEntry.getName();      if (matchFound(fileName)) {        if (isDebug) {          log("matched " + part.getFileName() + "("+ fileName+ ")");        }        return true;      }    }    return false;  }  finally {    zis.close();  }}  }
class C{  protected final void parseArgs(String[] args) throws AdeException {  final Options options=new Options();  OptionBuilder.withArgName(OPTION_DUMP_PARSE_REPORT);  OptionBuilder.isRequired(false);  OptionBuilder.withDescription("Specify this option to generate parse report");  options.addOption(OptionBuilder.create(OPTION_DUMP_PARSE_REPORT));  final CommandLine line=super.parseArgs(options,args);  if (line.hasOption(OPTION_DUMP_PARSE_REPORT)) {    getAdeExtProperties().setParseReportRequested(true);  }}  }
class C{  public void addObjectsToLocation(final Bag objs,final int x,final int y,final int z){  if (objs == null)   return;  Bag[] fieldxy=field[x][y];  if (fieldxy[z] == null)   buildBag(fieldxy,z);  fieldxy[z].addAll(objs);}  }
class C{  public static String abbreviate(String str,FontMetrics fm,int width){  int lastblank=0, nchars=0, cumx=0;  while (cumx < width && nchars < str.length()) {    if (Character.isWhitespace(str.charAt(nchars))) {      lastblank=nchars;    }    cumx+=fm.charWidth(str.charAt(nchars));    nchars++;  }  if (nchars < str.length() && lastblank > 0) {    nchars=lastblank;  }  return (nchars > 0 ? str.substring(0,nchars) : str);}  }
class C{  private void createSceneSSBO(){  this.ssbo=glCreateBuffers();  ByteBuffer ssboData=BufferUtils.createByteBuffer(4 * (4 + 4 + 4) * boxes.length / 2);  FloatBuffer fv=ssboData.asFloatBuffer();  for (int i=0; i < boxes.length; i+=2) {    Vector3f min=boxes[i];    Vector3f max=boxes[i + 1];    fv.put(min.x).put(min.y).put(min.z).put(0.0f);    fv.put(max.x).put(max.y).put(max.z).put(0.0f);  }  glNamedBufferData(this.ssbo,ssboData,GL_STATIC_DRAW);}  }
class C{  public void renameSpec(Spec spec,final String newName,final IProgressMonitor aMonitor){  this.lifecycleManager.sendEvent(new SpecRenameEvent(spec,newName));  specStorage.remove(spec.getName());  IProject project=ResourceHelper.projectRename(spec.getProject(),newName,aMonitor);  spec=new Spec(project);  spec.setLastModified();  addSpec(spec);}  }
class C{  public void dontAllowNull(){  setIsNullAllowed(false);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void updateWeatherStates(){  boolean changed=temperature.update();  changed|=rain.update();  changed|=fog.update();  changed|=thunder.update();  if (changed) {    updateZones();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isMoreSpecific(MemberDefinition best,MemberDefinition other) throws ClassNotFound {  Type bestType=best.getClassDeclaration().getType();  Type otherType=other.getClassDeclaration().getType();  boolean result=isMoreSpecific(bestType,otherType) && isApplicable(other,best.getType().getArgumentTypes());  return result;}  }
class C{  public static IgfsException newIgfsException(Class<? extends IgfsException> cls,String msg,Throwable cause){  try {    Constructor<? extends IgfsException> ctor=cls.getConstructor(String.class,Throwable.class);    return ctor.newInstance(msg,cause);  } catch (  ReflectiveOperationException e) {    throw new IgniteException("Failed to create IGFS exception: " + cls.getName(),e);  }}  }
class C{  @Nullable private void handlePopAnim(SupportFragment preFragment,SupportFragment from,SupportFragment to){  if (preFragment != null) {    View view=preFragment.getView();    handlePopAnim(from,view,to);  }}  }
class C{  public TDoubleObjectIterator(TDoubleObjectHashMap<V> map){  super(map);  _map=map;}  }
class C{  public String[] validBaudRates(){  return new String[]{"9,600 bps"};}  }
class C{  public @Test final void testCreationNegative2(){  thrown.expect(IllegalArgumentException.class);  new User("",TEST_PASSWORD);}  }
class C{  public static File findModule(String root,String extension){  File r=new File(root);  if (r.exists() && r.isDirectory()) {    r=new File(r,"ceylon");    if (r.exists() && r.isDirectory()) {      r=new File(r,"language");    }    if (r.exists() && r.isDirectory()) {      File which=null;      for (      File s : r.listFiles()) {        if (which == null || s.lastModified() > which.lastModified()) {          which=s;        }      }      if (which != null) {        for (        File s : which.listFiles()) {          if (s.getName().equals("ceylon.language-" + which.getName() + "."+ extension)) {            return s;          }        }      }    }  }  return null;}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double minVal=Double.MAX_VALUE;  double maxVal=-Double.MAX_VALUE;  int progress=0;  double z=0;  int row, col;  int rows=0;  int cols=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    image.isReflectedAtEdges=true;    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    minVal=image.getMinimumValue();    maxVal=image.getMaximumValue();    double range=maxVal - minVal;    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          z=(data[col] - minVal) / range * 100;          outputFile.setValue(row,col,z);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2",progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    image.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void splice(QuadEdge a,QuadEdge b){  QuadEdge alpha=a.oNext().rot();  QuadEdge beta=b.oNext().rot();  QuadEdge t1=b.oNext();  QuadEdge t2=a.oNext();  QuadEdge t3=beta.oNext();  QuadEdge t4=alpha.oNext();  a.setNext(t1);  b.setNext(t2);  alpha.setNext(t3);  beta.setNext(t4);}  }
class C{  void initOrResetVelocityTracker(){  if (mVelocityTracker == null) {    mVelocityTracker=VelocityTracker.obtain();  } else {    mVelocityTracker.clear();  }}  }
class C{  public boolean contains(Node node){  int low=0;  int high=nodes.size() - 1;  while (low <= high) {    int mid=(low + high) >>> 1;    Node midVal=nodes.get(mid);    if (midVal.ID < node.ID) {      low=mid + 1;    } else     if (midVal.ID > node.ID) {      high=mid - 1;    } else {      return true;    }  }  return false;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  String s1=m_arg0.execute(xctxt).str();  String s2=m_arg1.execute(xctxt).str();  if (s1.length() == 0 && s2.length() == 0)   return XBoolean.S_TRUE;  int index=s1.indexOf(s2);  return (index > -1) ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (fv != null) {    return fv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  static void photo(long id,long restaurantId,Place place) throws IOException {  String url=RestaurantPhotos.url(place,res().getDimensionPixelSize(R.dimen.restaurant_photo_width),res().getDimensionPixelSize(R.dimen.restaurant_photo_height));  String etag=photo(id,restaurantId,url);  if (id > 0 && !TextUtils.isEmpty(etag)) {    ContentValues vals=new ContentValues(1);    vals.put(RestaurantPhotos.ETAG,etag);    cr().update(ContentUris.withAppendedId(RestaurantPhotos.CONTENT_URI,id),vals,null,null);  }}  }
class C{  private Object writeReplace(){  return new UnmodifiableList<E>(list);}  }
class C{  public TimeParser(String dateString){  scanner=new TimeScanner(dateString);  spec=new TimeSpec(dateString);}  }
class C{  public PriorityHeader createPriorityHeader(String priority) throws ParseException {  if (priority == null)   throw new NullPointerException("bad priority arg");  Priority p=new Priority();  p.setPriority(priority);  return p;}  }
class C{  protected FetchRequest(ParameterList params){  _parameters=params;}  }
class C{  public Class<K> keyType(){  return keyType;}  }
class C{  protected void initGlobalToolbar(){  if (Toolbar.isGlobalToolbar()) {    setToolbar(new Toolbar());  }}  }
class C{  public long writeStream(InputStream source) throws IOException {  if (source == null)   return 0;  int len;  int length=_writeBuffer.length;  long outputLength=0;  if (length <= _writeLength) {    int tmplen=_writeLength;    _writeLength=0;    _source.write(_writeBuffer,0,tmplen,false);    _position+=tmplen;    _isFlushRequired=true;    outputLength+=tmplen;  }  while ((len=source.read(_writeBuffer,_writeLength,length - _writeLength)) >= 0) {    _writeLength+=len;    outputLength+=len;    if (length <= _writeLength) {      int tmplen=_writeLength;      _writeLength=0;      _source.write(_writeBuffer,0,tmplen,false);      _position+=tmplen;      _isFlushRequired=true;    }  }  if (_isFlushOnNewline || _implicitFlush)   flush();  return outputLength;}  }
class C{  public boolean parse(String line){  if (line.startsWith(IDENTIFIER) && line.contains(REQUEST_TAKE_BACK)) {    if (LOG.isDebugEnabled()) {      LOG.debug("Processing takeback offer.");    }    TakebackMessage message=new TakebackMessage();    RaptorStringTokenizer tok=new RaptorStringTokenizer(line," ",true);    tok.nextToken();    message.gameId=tok.nextToken();    message.gameId=message.gameId.substring(0,message.gameId.length() - 1);    tok.nextToken();    tok.nextToken();    tok.nextToken();    tok.nextToken();    tok.nextToken();    message.halfMovesRequested=Integer.parseInt(tok.nextToken());    gameToTakebackMessages.put(message.gameId,message);    System.err.println("Taleback offered.");    return false;  } else   if (line.startsWith(IDENTIFIER) && line.contains(ACCEPTED_TAKE_BACK) || line.startsWith(YOU_ACCEPTED_TAKE_BACK)) {    if (LOG.isDebugEnabled()) {      LOG.debug("Processing accepted takeback.");    }    RaptorStringTokenizer tok=new RaptorStringTokenizer(line," ",true);    tok.nextToken();    String gameId=tok.nextToken();    gameId=gameId.substring(0,gameId.length() - 1);    TakebackMessage message=getTakebackMessage(gameId);    if (message != null) {      message.wasAccepted=true;    } else {      LOG.debug("Received a takback accepted for a takeback message that was never received.");      message=new TakebackMessage();      message.wasAccepted=true;      message.gameId=gameId;      gameToTakebackMessages.put(message.gameId,message);    }    if (LOG.isDebugEnabled())     LOG.debug("Takeback accepted.");    return true;  }  return false;}  }
class C{  public boolean isSetDeleteResponse(){  return this.deleteResponse != null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.730 -0400",hash_original_method="9BC06F7377A0DB1FDB0822C77016180F",hash_generated_method="FB48DC1C3391AF406BD5DE4EBC9D775D") protected EmptyFileFilter(){}  }
class C{  public CryptoException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  private static boolean isSubstitutable(XSType _base,XSType derived){  if (_base.isComplexType()) {    XSComplexType base=_base.asComplexType();    for (; base != derived; derived=derived.getBaseType()) {      if (base.isSubstitutionProhibited(derived.getDerivationMethod()))       return false;    }    return true;  } else {    return true;  }}  }
class C{  public int start(){  return matcher.start();}  }
class C{  @Override protected void visit(final Object obj){  set[0]=(ITuple<?>)obj;}  }
class C{  public boolean removeFromReplicationGroup(URI storage,URI consistencyGroup,String repGroupName,List<URI> addVolumesList,String opId) throws ControllerException {  TaskCompleter taskCompleter=new BlockConsistencyGroupUpdateCompleter(consistencyGroup,opId);  try {    List<String> lockKeys=new ArrayList<>();    lockKeys.add(ControllerLockingUtil.getReplicationGroupStorageKey(_dbClient,repGroupName,storage));    WorkflowService workflowService=_blockDeviceController.getWorkflowService();    workflowService.acquireWorkflowStepLocks(opId,lockKeys,LockTimeoutValue.get(LockType.ARRAY_CG));    StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storage);    _blockDeviceController.getDevice(storageSystem.getSystemType()).doRemoveFromReplicationGroup(storageSystem,consistencyGroup,repGroupName,addVolumesList,taskCompleter);  } catch (  Exception e) {    ServiceError serviceError=DeviceControllerException.errors.jobFailed(e);    taskCompleter.error(_dbClient,serviceError);    WorkflowStepCompleter.stepFailed(opId,serviceError);    return false;  }  return true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @NotNull default B append(@NotNull CharSequence cs) throws BufferOverflowException {  return append(cs,0,cs.length());}  }
class C{  public static String join(List<?> list,String delim){  return join((Collection<?>)list,delim);}  }
class C{  public PaletteListCellRenderer(){  super();  setOpaque(true);  setBorder(getNoFocusBorder());  setName("List.cellRenderer");}  }
class C{  @Override public void addWarning(String message){  ast.printMessage(Diagnostic.Kind.WARNING,message,this,null,false);}  }
class C{  public void addAccessibleSelection(int i){  List.this.select(i);}  }
class C{  public static void assertColumnTypes(ResultSet rs,int[] expectedTypes) throws SQLException {  ResultSetMetaData rsmd=rs.getMetaData();  int actualCols=rsmd.getColumnCount();  assertEquals("Unexpected column count:",expectedTypes.length,rsmd.getColumnCount());  for (int i=0; i < actualCols; i++) {    assertEquals("Column types do not match for column " + (i + 1),expectedTypes[i],rsmd.getColumnType(i + 1));  }}  }
class C{  public PipelineConfigurationJson savePipeline(String pipelineName,PipelineConfigurationJson pipeline,String rev,String description) throws ApiException {  Object postBody=pipeline;  byte[] postBinaryBody=null;  if (pipelineName == null) {    throw new ApiException(400,"Missing the required parameter 'pipelineName' when calling savePipeline");  }  if (pipeline == null) {    throw new ApiException(400,"Missing the required parameter 'pipeline' when calling savePipeline");  }  String path="/v1/pipeline/{pipelineName}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pipelineName" + "\\}",apiClient.escapeString(pipelineName.toString()));  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,Object> formParams=new HashMap<String,Object>();  queryParams.addAll(apiClient.parameterToPairs("","rev",rev));  queryParams.addAll(apiClient.parameterToPairs("","description",description));  final String[] accepts={"application/json"};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={"application/json"};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  String[] authNames=new String[]{"basic"};  TypeRef returnType=new TypeRef<PipelineConfigurationJson>(){  };  return apiClient.invokeAPI(path,"POST",queryParams,postBody,postBinaryBody,headerParams,formParams,accept,contentType,authNames,returnType);}  }
class C{  @SuppressLint("LongLogTag") private void refreshRoomMembersList(final String aSearchedPattern,boolean aIsRefreshForced){  if (null != mAdapter) {    mProgressView.setVisibility(View.VISIBLE);    mAdapter.setSearchedPattern(aSearchedPattern,mSearchListener,aIsRefreshForced);  } else {    Log.w(LOG_TAG,"## refreshRoomMembersList(): search failure - adapter not initialized");  }  processEditionMode();}  }
class C{  public static List<List<Object>> parsePrimaryKeys(String pkList,Index primaryKey){  final List<IndexColumn> keyColumns=primaryKey.getKeyColumns();  final int columnCount=keyColumns.size();  List<List<Object>> results=new ArrayList<>();  String[] allPKs=pkList.split(";");  for (  String pk : allPKs) {    String[] encodedColumns=pk.split(",");    if (encodedColumns.length != columnCount) {      throw new KeyColumnMismatchException("Column count mismatch");    }    boolean colNameSpecified=false;    Object[] decodedColumns=new Object[columnCount];    for (int i=0; i < columnCount; ++i) {      IndexColumn keyColumn=keyColumns.get(i);      String[] pair=encodedColumns[i].split("=");      final int pos;      final String value;      if (pair.length == 1) {        pos=i;        value=pair[0];        if (colNameSpecified) {          throw new KeyColumnMismatchException("Can not mix values with key/values");        }      } else       if (pair.length == 2) {        pos=positionInIndex(primaryKey,pair[0]);        value=pair[1];        if (i > 0 && !colNameSpecified) {          throw new KeyColumnMismatchException("Can not mix values with key/values");        }        colNameSpecified=true;      } else {        throw new KeyColumnMismatchException("Malformed column=value pair");      }      decodedColumns[pos]=decodeValue(keyColumn,value);    }    results.add(Arrays.asList(decodedColumns));  }  return results;}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals(org.compiere.model.GridField.PROPERTY))   setValue(evt.getNewValue());}  }
class C{  public static void dismissKeyboard(Activity activity){  InputMethodManager imm=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);  View currentFocus=activity.getCurrentFocus();  if (currentFocus != null) {    imm.hideSoftInputFromWindow(currentFocus.getWindowToken(),0);  }}  }
class C{  @Override public void reset(){  resetState();  updateNAC(null);  updateSite(null);  updateSystem(null);}  }
class C{  public boolean isSameIgnoresHash(AuthTime old){  return client.equals(old.client) && server.equals(old.server) && ctime == old.ctime && cusec == old.cusec;}  }
class C{  public void removeTableModelListener(TableModelListener l){  if (getModel() != null)   ((ArffTableModel)getModel()).removeTableModelListener(l);}  }
class C{  @Override public boolean hasOverlappingRendering(){  return false;}  }
class C{  public static boolean isIndependentPooledStouffer(List<IndependenceTest> independenceTests,Node x,Node y,List<Node> condSet){  double alpha=independenceTests.get(0).getAlpha();  double ts=0.0;  for (  IndependenceTest independenceTest : independenceTests) {    List<Node> localCondSet=new ArrayList<>();    for (    Node node : condSet) {      localCondSet.add(independenceTest.getVariable(node.getName()));    }    independenceTest.isIndependent(independenceTest.getVariable(x.getName()),independenceTest.getVariable(y.getName()),localCondSet);    ts+=ProbUtils.normalQuantile(independenceTest.getPValue()) / Math.sqrt(independenceTests.size());  }  double p=2.0 * (1.0 - RandomUtil.getInstance().normalCdf(0,1,Math.abs(ts)));  return (p > alpha);}  }
class C{  public void warmupMovementModel(double time){  if (time <= 0) {    return;  }  while (SimClock.getTime() < -updateInterval) {    moveHosts(updateInterval);    simClock.advance(updateInterval);  }  double finalStep=-SimClock.getTime();  moveHosts(finalStep);  simClock.setTime(0);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4mfPackage.INIT_MODULES__INIT_MODULES:    return getInitModules();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public AlchemyLanguage(){  super();}  }
class C{  public MultiConfirmDialog(Window owner,String i18nKey,int mode,Object... i18nArgs){  super(owner,i18nKey,mode,false,i18nArgs);}  }
class C{  private static void saveAttributes(AnnotationAttributes source,RestorableSupport restorableSupport,RestorableSupport.StateObject context){  if (source == null || restorableSupport == null)   throw new IllegalArgumentException();  if (source.frameShape != null)   restorableSupport.addStateValueAsString(context,"frameShape",source.frameShape);  restorableSupport.addStateValueAsBoolean(context,"highlighted",source.isHighlighted);  if (source.highlightScale >= 0)   restorableSupport.addStateValueAsDouble(context,"highlightScale",source.highlightScale);  if (source.size != null) {    RestorableSupport.StateObject sizeStateObj=restorableSupport.addStateObject(context,"size");    if (sizeStateObj != null) {      restorableSupport.addStateValueAsDouble(sizeStateObj,"width",source.size.getWidth());      restorableSupport.addStateValueAsDouble(sizeStateObj,"height",source.size.getHeight());    }  }  if (source.scale >= 0)   restorableSupport.addStateValueAsDouble(context,"scale",source.scale);  if (source.opacity >= 0)   restorableSupport.addStateValueAsDouble(context,"opacity",source.opacity);  if (source.leader != null)   restorableSupport.addStateValueAsString(context,"leader",source.leader);  if (source.leaderGapWidth >= 0)   restorableSupport.addStateValueAsInteger(context,"leaderGapWidth",source.leaderGapWidth);  if (source.cornerRadius >= 0)   restorableSupport.addStateValueAsInteger(context,"cornerRadius",source.cornerRadius);  if (source.adjustWidthToText != null)   restorableSupport.addStateValueAsString(context,"adjustWidthToText",source.adjustWidthToText);  if (source.drawOffset != null) {    RestorableSupport.StateObject drawOffsetStateObj=restorableSupport.addStateObject(context,"drawOffset");    if (drawOffsetStateObj != null) {      restorableSupport.addStateValueAsDouble(drawOffsetStateObj,"x",source.drawOffset.getX());      restorableSupport.addStateValueAsDouble(drawOffsetStateObj,"y",source.drawOffset.getY());    }  }  if (source.insets != null) {    RestorableSupport.StateObject insetsStateObj=restorableSupport.addStateObject(context,"insets");    if (insetsStateObj != null) {      restorableSupport.addStateValueAsInteger(insetsStateObj,"top",source.insets.top);      restorableSupport.addStateValueAsInteger(insetsStateObj,"left",source.insets.left);      restorableSupport.addStateValueAsInteger(insetsStateObj,"bottom",source.insets.bottom);      restorableSupport.addStateValueAsInteger(insetsStateObj,"right",source.insets.right);    }  }  if (source.borderWidth >= 0)   restorableSupport.addStateValueAsDouble(context,"borderWidth",source.borderWidth);  if (source.borderStippleFactor >= 0)   restorableSupport.addStateValueAsInteger(context,"borderStippleFactor",source.borderStippleFactor);  if (source.borderStipplePattern != (short)0x0000)   restorableSupport.addStateValueAsInteger(context,"borderStipplePattern",source.borderStipplePattern);  if (source.antiAliasHint >= 0)   restorableSupport.addStateValueAsInteger(context,"antiAliasHint",source.antiAliasHint);  restorableSupport.addStateValueAsBoolean(context,"visible",source.isVisible);  if (source.font != null) {    RestorableSupport.StateObject fontStateObj=restorableSupport.addStateObject(context,"font");    if (fontStateObj != null) {      restorableSupport.addStateValueAsString(fontStateObj,"name",source.font.getName());      restorableSupport.addStateValueAsInteger(fontStateObj,"style",source.font.getStyle());      restorableSupport.addStateValueAsInteger(fontStateObj,"size",source.font.getSize());    }  }  if (source.textAlign != null)   restorableSupport.addStateValueAsString(context,"textAlign",source.textAlign);  if (source.textColor != null) {    String encodedColor=RestorableSupport.encodeColor(source.textColor);    if (encodedColor != null)     restorableSupport.addStateValueAsString(context,"textColor",encodedColor);  }  if (source.backgroundColor != null) {    String encodedColor=RestorableSupport.encodeColor(source.backgroundColor);    if (encodedColor != null)     restorableSupport.addStateValueAsString(context,"backgroundColor",encodedColor);  }  if (source.borderColor != null) {    String encodedColor=RestorableSupport.encodeColor(source.borderColor);    if (encodedColor != null)     restorableSupport.addStateValueAsString(context,"borderColor",encodedColor);  }  if (source.getPath() != null)   restorableSupport.addStateValueAsString(context,"imagePath",source.getPath(),true);  if (source.imageScale >= 0)   restorableSupport.addStateValueAsDouble(context,"imageScale",source.imageScale);  if (source.imageOffset != null) {    RestorableSupport.StateObject imageOffsetStateObj=restorableSupport.addStateObject(context,"imageOffset");    if (imageOffsetStateObj != null) {      restorableSupport.addStateValueAsDouble(imageOffsetStateObj,"x",source.imageOffset.getX());      restorableSupport.addStateValueAsDouble(imageOffsetStateObj,"y",source.imageOffset.getY());    }  }  if (source.imageOpacity >= 0)   restorableSupport.addStateValueAsDouble(context,"imageOpacity",source.imageOpacity);  if (source.imageRepeat != null)   restorableSupport.addStateValueAsString(context,"imageRepeat",source.imageRepeat);  if (source.distanceMinScale >= 0)   restorableSupport.addStateValueAsDouble(context,"distanceMinScale",source.distanceMinScale);  if (source.distanceMaxScale >= 0)   restorableSupport.addStateValueAsDouble(context,"distanceMaxScale",source.distanceMaxScale);  if (source.distanceMinOpacity >= 0)   restorableSupport.addStateValueAsDouble(context,"distanceMinOpacity",source.distanceMinOpacity);  if (source.effect != null)   restorableSupport.addStateValueAsString(context,"effect",source.effect);}  }
class C{  public XCardDocument(File file) throws SAXException, IOException {  this(XmlUtils.toDocument(file));}  }
class C{  private static String determineWindowsLibrary(final String library,final String osName,final String osArch){  String resourceName;  String platform;  String fileExtension="dll";switch (osArch) {case "i386":case "x86":    platform="windows-x32";  break;case "amd64":case "x86_64":platform="windows-x64";break;default :throw new UnsupportedOperationException("Platform " + osName + ":"+ osArch+ " not supported");}resourceName="/" + platform + "/"+ library+ "."+ fileExtension;return resourceName;}  }
class C{  public Matrix4f invertOrtho(){  return invertOrtho(this);}  }
class C{  private void enchantRandomly(Random rand,ItemStack itemStack,int itemEnchantability,int modStr){  int remainStr=(modStr + 1) / 2;  List<?> enchantments=EnchantmentHelper.buildEnchantmentList(rand,itemStack,itemEnchantability);  if (enchantments != null) {    Iterator<?> iter=enchantments.iterator();    while (iter.hasNext() && remainStr > 0) {      remainStr--;      EnchantmentData eData=(EnchantmentData)iter.next();      itemStack.addEnchantment(eData.enchantmentobj,eData.enchantmentLevel);    }  }}  }
class C{  public boolean canScrollDown(){  return mScroll > mMinScroll;}  }
class C{  public ReaderComponent(String name){  super(name);  world=ReaderWorld.createReaderWorld();  init();}  }
class C{  public void zoomIn(){  if (sourceImage == null)   return;  Rectangle rect=getClientArea();  int w=rect.width, h=rect.height;  double dx=((double)w) / 2;  double dy=((double)h) / 2;  centerZoom(dx,dy,ZOOMIN_RATE,transform);}  }
class C{  void removePendingTransaction(String txCoordinatorLink){  boolean toggleTransactionPending=false;synchronized (this.context) {    if (this.context.txCoordinatorLinks == null) {      return;    }    this.context.txCoordinatorLinks.remove(txCoordinatorLink);    toggleTransactionPending=this.context.txCoordinatorLinks.isEmpty();  }  if (toggleTransactionPending) {    toggleOption(ServiceOption.TRANSACTION_PENDING,false);  }}  }
class C{  private long downloadToFile(String downloadUrl,File file,long maxSize,long minSize){  if (file.exists() && file.length() > 0)   return file.length();  if (checkCancelRequested())   return 0;  long byteWritten=0;  boolean error=false;  InputStream is=null;  try (FileOutputStream fos=new FileOutputStream(file)){    if (checkCancelRequested())     throw new InterruptedIOException("Download was cancelled.");    URL url=new URL(downloadUrl);    URLConnection connection=Controller.getInstance().openConnection(url);    connection.setConnectTimeout((int)(Utils.SECOND * 2));    connection.setReadTimeout((int)Utils.SECOND);    try {      long length=Long.parseLong(connection.getHeaderField("Content-Length"));      if (length <= 0) {        byteWritten=length;        Log.w(TAG,"Content-Length equals 0 or is negative: " + length);      } else       if (length < minSize) {        error=true;        byteWritten=-length;        Log.i(TAG,String.format("Not starting download of %s, the size (%s bytes) is less then the minimum " + "filesize of %s bytes.",downloadUrl,length,minSize));      } else       if (length > maxSize) {        error=true;        byteWritten=-length;        Log.i(TAG,String.format("Not starting download of %s, the size (%s bytes) exceeds the " + "maximum " + "filesize of %s bytes.",downloadUrl,length,maxSize));      }    } catch (    Exception e) {      Log.w(TAG,"Couldn't read Content-Length from url: " + downloadUrl);    }    if (byteWritten == 0) {      if (!file.exists() && !file.createNewFile())       Log.i(TAG,"File could not be created: " + file.getAbsolutePath());      is=connection.getInputStream();      int size=(int)Utils.KB * 8;      byte[] buf=new byte[size];      int byteRead;      int count=0;      while (((byteRead=is.read(buf)) != -1)) {        if (count++ % 20 == 0 && checkCancelRequested())         throw new InterruptedIOException("Download was cancelled.");        fos.write(buf,0,byteRead);        byteWritten+=byteRead;        if (byteWritten > maxSize) {          throw new InterruptedIOException(String.format("Download interrupted, the size of %s bytes exceeds maximum filesize.",byteWritten));        }      }    }  } catch (  Exception e) {    Log.e(TAG,"Download not finished properly. Exception: " + e.getMessage(),e);    error=true;    byteWritten=-file.length();  } finally {    if (is != null) {      try {        is.close();      } catch (      IOException ignored) {      }    }  }  if (error)   Log.w(TAG,String.format("Stopped download from url '%s'. Downloaded %d bytes",downloadUrl,byteWritten)); else   Log.i(TAG,String.format("Download from '%s' finished. Downloaded %d bytes",downloadUrl,byteWritten));  if (error && file.exists())   if (!file.delete())   Log.w(TAG,"File could not be deleted: " + file.getAbsolutePath());  return byteWritten;}  }
class C{  protected Character isWFXMLChar(String chardata){  Character refInvalidChar;  if (chardata == null || (chardata.length() == 0)) {    return null;  }  char[] dataarray=chardata.toCharArray();  int datalength=dataarray.length;  if (fIsXMLVersion11) {    int i=0;    while (i < datalength) {      if (XML11Char.isXML11Invalid(dataarray[i++])) {        char ch=dataarray[i - 1];        if (XMLChar.isHighSurrogate(ch) && i < datalength) {          char ch2=dataarray[i++];          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {            continue;          }        }        refInvalidChar=new Character(ch);        return refInvalidChar;      }    }  } else {    int i=0;    while (i < datalength) {      if (XMLChar.isInvalid(dataarray[i++])) {        char ch=dataarray[i - 1];        if (XMLChar.isHighSurrogate(ch) && i < datalength) {          char ch2=dataarray[i++];          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {            continue;          }        }        refInvalidChar=new Character(ch);        return refInvalidChar;      }    }  }  return null;}  }
class C{  public boolean uninstallCounters(){  return debugCounterService.removeCounterHierarchy(COUNTER_MODULE,dpidAndConnIdString);}  }
class C{  public void addFilter(Filter filter){  int size=filters.size();  if (size == 0 || filter.type == FilterType.SHOW || filters.get(size - 1).type != FilterType.SHOW) {    filters.add(filter);  } else {    for (int i=0; i < size; i++) {      if (filters.get(i).type == FilterType.SHOW) {        filters.add(i,filter);        break;      }    }  }}  }
class C{  public static String toJavaName(String classname){  return classname.replace('/','.');}  }
class C{  public static String timestampToHumanDateAndTime(long timestamp){  return m_dateAndTime.get().format(new Date(timestamp));}  }
class C{  AddressAttribute(char attributeType){  super(attributeType);}  }
class C{  public boolean isCovering(){  return covering.size() > 0;}  }
class C{  public ListModelTable(Collection collection){  super(collection);  m_noColumns=0;  for (  Object row : getInnerList()) {    if (row instanceof List) {      m_noColumns=Math.max(m_noColumns,((List)row).size());    } else {      throw new IllegalArgumentException("The collection must contain list of objects");    }  }}  }
class C{  boolean deleteRow(@NotNull ResultSetRow row){  if (row.getState() == ResultSetRow.STATE_ADDED) {    cleanupRow(row);    return true;  } else {    row.setState(ResultSetRow.STATE_REMOVED);    changesCount++;    return false;  }}  }
class C{  public int open(){  Shell shell=getShell();  if (shell == null || shell.isDisposed()) {    shell=null;    create();    shell=getShell();  }  adjustBounds();  constrainShellSize();  setTabOrder((Composite)getContents());  listenToDeactivate=false;  listenToParentDeactivate=false;  if (takeFocusOnOpen) {    shell.open();    getFocusControl().setFocus();  } else {    shell.setVisible(true);  }  return OK;}  }
class C{  @Override public void init(Context context){  super.init(context);  String s;  s=context.getResolvedEntityAttribute(ACCEPT_LINE_REGEX);  if (s != null) {    acceptLineRegex=Pattern.compile(s);  }  s=context.getResolvedEntityAttribute(SKIP_LINE_REGEX);  if (s != null) {    skipLineRegex=Pattern.compile(s);  }  url=context.getResolvedEntityAttribute(URL);  if (url == null)   throw new DataImportHandlerException(DataImportHandlerException.SEVERE,"'" + URL + "' is a required attribute");}  }
class C{  void removeHelper(RightThreadedBinaryNode<T> target,RightThreadedBinaryNode<T> parent){  RightThreadedBinaryNode<T> lnode=target.getLeftSon();  RightThreadedBinaryNode<T> rnode=target.getRightSon();  if (lnode == null && rnode == null) {    if (parent == null) {      root=null;      return;    }    if (parent.getLeftSon() == target) {      parent.left=null;    } else {      parent.right=null;    }    return;  }  if (lnode != null && rnode == null) {    if (parent == null) {      setRoot(lnode);      return;    }    if (parent.getLeftSon() == target) {      parent.left=lnode;    } else {      parent.right=lnode;    }    return;  }  if (rnode != null && lnode == null) {    if (parent == null) {      root=rnode;      return;    }    if (parent.getLeftSon() == target) {      parent.left=rnode;    } else {      parent.right=rnode;    }    return;  }  RightThreadedBinaryNode<T> minNode=rnode;  RightThreadedBinaryNode<T> rparent=null;  while (minNode.getLeftSon() != null) {    rparent=minNode;    minNode=minNode.getLeftSon();  }  if (rparent == null) {    target.value=minNode.value;    target.right=minNode.right;    return;  }  T minValue=(T)minNode.getValue();  removeHelper(minNode,rparent);  target.value=minValue;}  }
class C{  private void addSpiDependency(GridTestNode node){  node.addAttribute(IgniteNodeAttributes.ATTR_SPI_CLASS,JobStealingCollisionSpi.class.getName());}  }
class C{  public ContentFilter createContentFilter(){  ContentFilterImpl contentFilter=new ContentFilterImpl();  return contentFilter;}  }
class C{  public static boolean checkParenthesis(String str){  boolean result=true;  if (str != null) {    int open=0;    int closed=0;    int i=0;    while ((i=str.indexOf('(',i)) >= 0) {      i++;      open++;    }    i=0;    while ((i=str.indexOf(')',i)) >= 0) {      i++;      closed++;    }    result=open == closed;  }  return result;}  }
class C{  public static void f(String tag,String msg){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg);}  }
class C{  public void logDebug(String message){  logDebug(message,null);}  }
class C{  public void mouseWheelMoved(MouseWheelEvent e){  if (getFirstLine() + e.getUnitsToScroll() > 0) {    if (getFirstLine() + getVisibleLines() + e.getUnitsToScroll() <= getLineCount()) {      setFirstLine(getFirstLine() + e.getUnitsToScroll());    } else {      setFirstLine(getLineCount() - getVisibleLines());    }  } else {    setFirstLine(0);  }}  }
class C{  public RoundBorder shadowSpread(int shadowSpread,boolean mm){  this.shadowMM=mm;  this.shadowSpread=shadowSpread;  return this;}  }
class C{  public List<FCEndpoint> showFcnsDatabase(Integer vsanId) throws NetworkDeviceControllerException {  Map<Integer,String> vsanToWwns=getVsanWwns(vsanId);  List<FCEndpoint> connections=new ArrayList<FCEndpoint>();  SSHPrompt[] prompts={SSHPrompt.MDS_POUND,SSHPrompt.MDS_GREATER_THAN};  StringBuilder buf=new StringBuilder();  String cmd=MDSDialogProperties.getString("MDSDialog.showFcnsDatabase.cmd");  if (vsanId != null) {    cmd=cmd + MDSDialogProperties.getString("MDSDialog.showFcnsDatabase.vsan.cmd") + vsanId.toString()+ "\n";  } else {    cmd=cmd + "\n";  }  SSHPrompt prompt=sendWaitFor(cmd,defaultTimeout,prompts,buf);  String[] lines=getLines(buf);  String[] regex={MDSDialogProperties.getString("MDSDialog.showFcnsDatabase.VSAN.match"),MDSDialogProperties.getString("MDSDialog.showFcnsDatabase.portwwn.match"),MDSDialogProperties.getString("MDSDialog.showFcnsDatabase.nodewwn.match"),MDSDialogProperties.getString("MDSDialog.showFcnsDatabase.fabricportwwn.match"),MDSDialogProperties.getString("MDSDialog.showFcnsDatabase.ConnectedInterface.match"),MDSDialogProperties.getString("MDSDialog.showFcnsDatabase.SwitchName.match"),MDSDialogProperties.getString("MDSDialog.showFcnsDatabase.deviceAlias.match")};  String[] groups=new String[10];  FCEndpoint conn=null;  for (  String line : lines) {    int index=match(line,regex,groups,Pattern.CASE_INSENSITIVE);switch (index) {case 0:      conn=new FCEndpoint();    conn.setFabricId(groups[0]);  conn.setFcid(groups[1]);String fabricWwn=vsanToWwns.get(new Integer(groups[0]));if (fabricWwn != null) {conn.setFabricWwn(fabricWwn);}connections.add(conn);break;case 1:conn.setRemotePortName(groups[0]);break;case 2:conn.setRemoteNodeName(groups[0]);break;case 3:conn.setSwitchPortName(groups[0]);break;case 4:conn.setSwitchInterface(groups[0]);break;case 5:conn.setSwitchName(groups[0]);break;case 6:conn.setRemotePortAlias(groups[0]);}}return connections;}  }
class C{  public T caseNumExpr_(NumExpr_ object){  return null;}  }
class C{  public static void recomputeCovarianceMatrices(Relation<? extends NumberVector> relation,WritableDataStore<double[]> probClusterIGivenX,List<? extends EMClusterModel<?>> models){  for (  EMClusterModel<?> m : models) {    m.beginEStep();  }  double[] wsum=new double[models.size()];  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    double[] clusterProbabilities=probClusterIGivenX.get(iditer);    NumberVector instance=relation.get(iditer);    int i=0;    for (    EMClusterModel<?> m : models) {      final double prior=clusterProbabilities[i];      if (prior > 0.) {        m.updateE(instance,prior);      }      wsum[i]+=prior;      ++i;    }  }  int i=0;  for (  EMClusterModel<?> m : models) {    m.finalizeEStep();    m.setWeight(wsum[i] / relation.size());    i++;  }}  }
class C{  public double[][] similarityMatrix(){  return m_hat;}  }
class C{  private void updateVolumeHLU(StorageSystem system,Collection<URI> initiatorURIs,Map<URI,Integer> volumeMap){  boolean findHLU=false;  for (  Entry<URI,Integer> volumeMapEntry : volumeMap.entrySet()) {    if (volumeMapEntry.getValue() == -1) {      findHLU=true;      break;    }  }  if (findHLU) {    BlockStorageDevice device=getDevice();    Map<URI,List<Integer>> initiatorToHLUsMap=device.doFindHostHLUs(system,initiatorURIs);    Iterator<Entry<URI,List<Integer>>> initiatorToHLUsItr=initiatorToHLUsMap.entrySet().iterator();    Set<Integer> usedHLUs=new HashSet<Integer>();    while (initiatorToHLUsItr.hasNext()) {      Entry<URI,List<Integer>> initiatorHLUs=initiatorToHLUsItr.next();      usedHLUs.addAll(initiatorHLUs.getValue());    }    int nextHLU=1;    for (    Entry<URI,Integer> volumeMapEntry : volumeMap.entrySet()) {      while (usedHLUs.contains(nextHLU)) {        nextHLU++;      }      if (nextHLU < MAX_HLU) {        _log.debug("Updating HLU of Volume {} from {} to " + nextHLU,volumeMapEntry.getKey(),volumeMapEntry.getValue());        volumeMap.put(volumeMapEntry.getKey(),nextHLU);        nextHLU++;      } else {        DeviceControllerException.errors.volumeReachedMaxExports(volumeMapEntry.getKey().toString(),nextHLU,new Throwable());      }    }  }}  }
class C{  @Override public Object clone(){  return new BinominalAttribute(this);}  }
class C{  public URI relativize(URI uri){  if (isOpaque() || uri.isOpaque()) {    return uri;  }  if (getScheme() == null || uri.getScheme() == null || getScheme().equals(uri.getScheme()) == false) {    return uri;  }  String thisAuthority=null;  String thatAuthority=null;  String thisPath=null;  String thatPath=null;  if ((thisAuthority=getAuthority()) == null || (thatAuthority=uri.getAuthority()) == null || thisAuthority.equals(thatAuthority) == false) {    return uri;  }  if ((thisPath=getPath()) == null || (thatPath=uri.getPath()) == null || thatPath.startsWith(thisPath + PATH_SEPARATOR) == false) {    return uri;  }  try {    return new URI(null,null,thatPath.substring(thisPath.length() + 1),uri.getQuery(),uri.getFragment());  } catch (  URISyntaxException e) {    throw new IllegalArgumentException(e.getMessage());  }}  }
class C{  public void ensureCapacity(int minCapacity){  this.elements.ensureCapacity(minCapacity);}  }
class C{  public void writeMLE(XMLWriter writer,MarginalLikelihoodEstimationOptions options){  if (options.performMLE) {    writer.writeComment("Define marginal likelihood estimator (PS/SS) settings");    List<Attribute> attributes=new ArrayList<Attribute>();    attributes.add(new Attribute.Default<Integer>(MarginalLikelihoodEstimator.CHAIN_LENGTH,options.mleChainLength));    attributes.add(new Attribute.Default<Integer>(MarginalLikelihoodEstimator.PATH_STEPS,options.pathSteps));    attributes.add(new Attribute.Default<String>(MarginalLikelihoodEstimator.PATH_SCHEME,options.pathScheme));    if (!options.pathScheme.equals(MarginalLikelihoodEstimator.LINEAR)) {      attributes.add(new Attribute.Default<Double>(MarginalLikelihoodEstimator.ALPHA,options.schemeParameter));    }    if (options.printOperatorAnalysis) {      attributes.add(new Attribute.Default<Boolean>(MarginalLikelihoodEstimator.PRINT_OPERATOR_ANALYSIS,true));    }    writer.writeOpenTag(MarginalLikelihoodEstimator.MARGINAL_LIKELIHOOD_ESTIMATOR,attributes);    writer.writeOpenTag("samplers");    writer.writeIDref("mcmc","mcmc");    writer.writeCloseTag("samplers");    attributes=new ArrayList<Attribute>();    attributes.add(new Attribute.Default<String>(XMLParser.ID,"pathLikelihood"));    writer.writeOpenTag(PathLikelihood.PATH_LIKELIHOOD,attributes);    writer.writeOpenTag(PathLikelihood.SOURCE);    writer.writeIDref(CompoundLikelihoodParser.POSTERIOR,CompoundLikelihoodParser.POSTERIOR);    writer.writeCloseTag(PathLikelihood.SOURCE);    writer.writeOpenTag(PathLikelihood.DESTINATION);    writer.writeIDref(CompoundLikelihoodParser.PRIOR,CompoundLikelihoodParser.PRIOR);    writer.writeCloseTag(PathLikelihood.DESTINATION);    writer.writeCloseTag(PathLikelihood.PATH_LIKELIHOOD);    attributes=new ArrayList<Attribute>();    attributes.add(new Attribute.Default<String>(XMLParser.ID,"MLELog"));    attributes.add(new Attribute.Default<Integer>("logEvery",options.mleLogEvery));    attributes.add(new Attribute.Default<String>("fileName",options.mleFileName));    writer.writeOpenTag("log",attributes);    writer.writeIDref("pathLikelihood","pathLikelihood");    writer.writeCloseTag("log");    writer.writeCloseTag(MarginalLikelihoodEstimator.MARGINAL_LIKELIHOOD_ESTIMATOR);    writer.writeComment("Path sampling estimator from collected samples");    attributes=new ArrayList<Attribute>();    attributes.add(new Attribute.Default<String>("fileName",options.mleFileName));    attributes.add(new Attribute.Default<String>("resultsFileName",options.mleResultFileName));    writer.writeOpenTag(PathSamplingAnalysis.PATH_SAMPLING_ANALYSIS,attributes);    writer.writeTag("likelihoodColumn",new Attribute.Default<String>("name","pathLikelihood.delta"),true);    writer.writeTag("thetaColumn",new Attribute.Default<String>("name","pathLikelihood.theta"),true);    writer.writeCloseTag(PathSamplingAnalysis.PATH_SAMPLING_ANALYSIS);    writer.writeComment("Stepping-stone sampling estimator from collected samples");    attributes=new ArrayList<Attribute>();    attributes.add(new Attribute.Default<String>("fileName",options.mleFileName));    attributes.add(new Attribute.Default<String>("resultsFileName",options.mleResultFileName));    writer.writeOpenTag(SteppingStoneSamplingAnalysis.STEPPING_STONE_SAMPLING_ANALYSIS,attributes);    writer.writeTag("likelihoodColumn",new Attribute.Default<String>("name","pathLikelihood.delta"),true);    writer.writeTag("thetaColumn",new Attribute.Default<String>("name","pathLikelihood.theta"),true);    writer.writeCloseTag(SteppingStoneSamplingAnalysis.STEPPING_STONE_SAMPLING_ANALYSIS);  } else   if (options.performMLEGSS) {    if (options.choiceTreeWorkingPrior.equals("Product of exponential distributions")) {      if (DEBUG) {        System.err.println("productOfExponentials selected: " + options.choiceTreeWorkingPrior);      }      List<Attribute> attributes=new ArrayList<Attribute>();      attributes.add(new Attribute.Default<String>(XMLParser.ID,"exponentials"));      attributes.add(new Attribute.Default<String>("fileName",beautiOptions.logFileName));      attributes.add(new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10)));      attributes.add(new Attribute.Default<String>("parameterColumn","coalescentEventsStatistic"));      attributes.add(new Attribute.Default<String>("dimension","" + (beautiOptions.taxonList.getTaxonCount() - 1)));      writer.writeOpenTag(TreeWorkingPriorParsers.PRODUCT_OF_EXPONENTIALS_POSTERIOR_MEANS_LOESS,attributes);      writer.writeIDref(TreeModel.TREE_MODEL,TreeModel.TREE_MODEL);      writer.writeCloseTag(TreeWorkingPriorParsers.PRODUCT_OF_EXPONENTIALS_POSTERIOR_MEANS_LOESS);    } else {      if (DEBUG) {        System.err.println("matching coalescent model selected: " + options.choiceTreeWorkingPrior);        System.err.println(beautiOptions.getPartitionTreePriors().get(0).getNodeHeightPrior());      }      TreePriorType nodeHeightPrior=beautiOptions.getPartitionTreePriors().get(0).getNodeHeightPrior();switch (nodeHeightPrior) {case CONSTANT:        writer.writeComment("A working prior for the constant population size model.");      writer.writeOpenTag(ConstantPopulationModelParser.CONSTANT_POPULATION_MODEL,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + "constantReference"),new Attribute.Default<String>("units",Units.Utils.getDefaultUnitName(beautiOptions.units))});    writer.writeOpenTag(ConstantPopulationModelParser.POPULATION_SIZE);  writeParameter("constantReference.popSize","constant.popSize",beautiOptions.logFileName,(int)(options.mleChainLength * 0.10),writer);writer.writeCloseTag(ConstantPopulationModelParser.POPULATION_SIZE);writer.writeCloseTag(ConstantPopulationModelParser.CONSTANT_POPULATION_MODEL);writer.writeComment("A working prior for the coalescent.");writer.writeOpenTag(CoalescentLikelihoodParser.COALESCENT_LIKELIHOOD,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + "coalescentReference")});writer.writeOpenTag(CoalescentLikelihoodParser.MODEL);writer.writeIDref(ConstantPopulationModelParser.CONSTANT_POPULATION_MODEL,beautiOptions.getPartitionTreePriors().get(0).getPrefix() + "constantReference");writer.writeCloseTag(CoalescentLikelihoodParser.MODEL);writer.writeOpenTag(CoalescentLikelihoodParser.POPULATION_TREE);writer.writeIDref(TreeModel.TREE_MODEL,modelPrefix + TreeModel.TREE_MODEL);writer.writeCloseTag(CoalescentLikelihoodParser.POPULATION_TREE);writer.writeCloseTag(CoalescentLikelihoodParser.COALESCENT_LIKELIHOOD);break;case EXPONENTIAL:writer.writeComment("A working prior for the exponential growth model.");writer.writeOpenTag(ExponentialGrowthModelParser.EXPONENTIAL_GROWTH_MODEL,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + "exponentialReference"),new Attribute.Default<String>("units",Units.Utils.getDefaultUnitName(beautiOptions.units))});writer.writeOpenTag(ExponentialGrowthModelParser.POPULATION_SIZE);writeParameter("exponentialReference.popSize","exponential.popSize",beautiOptions.logFileName,(int)(options.mleChainLength * 0.10),writer);writer.writeCloseTag(ExponentialGrowthModelParser.POPULATION_SIZE);writer.writeOpenTag(ExponentialGrowthModelParser.GROWTH_RATE);writeParameter("exponentialReference.growthRate","exponential.growthRate",beautiOptions.logFileName,(int)(options.mleChainLength * 0.10),writer);writer.writeCloseTag(ExponentialGrowthModelParser.GROWTH_RATE);writer.writeCloseTag(ExponentialGrowthModelParser.EXPONENTIAL_GROWTH_MODEL);writer.writeComment("A working prior for the coalescent.");writer.writeOpenTag(CoalescentLikelihoodParser.COALESCENT_LIKELIHOOD,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + "coalescentReference")});writer.writeOpenTag(CoalescentLikelihoodParser.MODEL);writer.writeIDref(ExponentialGrowthModelParser.EXPONENTIAL_GROWTH_MODEL,beautiOptions.getPartitionTreePriors().get(0).getPrefix() + "constantReference");writer.writeCloseTag(CoalescentLikelihoodParser.MODEL);writer.writeOpenTag(CoalescentLikelihoodParser.POPULATION_TREE);writer.writeIDref(TreeModel.TREE_MODEL,modelPrefix + TreeModel.TREE_MODEL);writer.writeCloseTag(CoalescentLikelihoodParser.POPULATION_TREE);writer.writeCloseTag(CoalescentLikelihoodParser.COALESCENT_LIKELIHOOD);break;case LOGISTIC:writer.writeComment("A working prior for the logistic growth model.");writer.writeOpenTag(LogisticGrowthModelParser.LOGISTIC_GROWTH_MODEL,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + "logisticReference"),new Attribute.Default<String>("units",Units.Utils.getDefaultUnitName(beautiOptions.units))});writer.writeOpenTag(LogisticGrowthModelParser.POPULATION_SIZE);writeParameter("logisticReference.popSize","logistic.popSize",beautiOptions.logFileName,(int)(options.mleChainLength * 0.10),writer);writer.writeCloseTag(LogisticGrowthModelParser.POPULATION_SIZE);writer.writeOpenTag(LogisticGrowthModelParser.GROWTH_RATE);writeParameter("logisticReference.growthRate","logistic.growthRate",beautiOptions.logFileName,(int)(options.mleChainLength * 0.10),writer);writer.writeCloseTag(LogisticGrowthModelParser.GROWTH_RATE);writer.writeOpenTag(LogisticGrowthModelParser.TIME_50);writeParameter("logisticReference.t50","logistic.t50",beautiOptions.logFileName,(int)(options.mleChainLength * 0.10),writer);writer.writeCloseTag(LogisticGrowthModelParser.TIME_50);writer.writeCloseTag(LogisticGrowthModelParser.LOGISTIC_GROWTH_MODEL);writer.writeComment("A working prior for the coalescent.");writer.writeOpenTag(CoalescentLikelihoodParser.COALESCENT_LIKELIHOOD,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + "coalescentReference")});writer.writeOpenTag(CoalescentLikelihoodParser.MODEL);writer.writeIDref(LogisticGrowthModelParser.LOGISTIC_GROWTH_MODEL,beautiOptions.getPartitionTreePriors().get(0).getPrefix() + "constantReference");writer.writeCloseTag(CoalescentLikelihoodParser.MODEL);writer.writeOpenTag(CoalescentLikelihoodParser.POPULATION_TREE);writer.writeIDref(TreeModel.TREE_MODEL,modelPrefix + TreeModel.TREE_MODEL);writer.writeCloseTag(CoalescentLikelihoodParser.POPULATION_TREE);writer.writeCloseTag(CoalescentLikelihoodParser.COALESCENT_LIKELIHOOD);break;case EXPANSION:writer.writeComment("A working prior for the expansion growth model.");writer.writeOpenTag(ExpansionModelParser.EXPANSION_MODEL,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + "expansionReference"),new Attribute.Default<String>("units",Units.Utils.getDefaultUnitName(beautiOptions.units))});writer.writeOpenTag(ExpansionModelParser.POPULATION_SIZE);writeParameter("expansionReference.popSize","expansion.popSize",beautiOptions.logFileName,(int)(options.mleChainLength * 0.10),writer);writer.writeCloseTag(ExpansionModelParser.POPULATION_SIZE);writer.writeOpenTag(ExpansionModelParser.GROWTH_RATE);writeParameter("expansionReference.growthRate","expansion.growthRate",beautiOptions.logFileName,(int)(options.mleChainLength * 0.10),writer);writer.writeCloseTag(ExpansionModelParser.GROWTH_RATE);writer.writeOpenTag(ExpansionModelParser.ANCESTRAL_POPULATION_PROPORTION);writeParameter("expansionReference.ancestralProportion","expansion.ancestralProportion",beautiOptions.logFileName,(int)(options.mleChainLength * 0.10),writer);writer.writeCloseTag(ExpansionModelParser.ANCESTRAL_POPULATION_PROPORTION);writer.writeCloseTag(ExpansionModelParser.EXPANSION_MODEL);writer.writeComment("A working prior for the coalescent.");writer.writeOpenTag(CoalescentLikelihoodParser.COALESCENT_LIKELIHOOD,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + "coalescentReference")});writer.writeOpenTag(CoalescentLikelihoodParser.MODEL);writer.writeIDref(ExpansionModelParser.EXPANSION_MODEL,beautiOptions.getPartitionTreePriors().get(0).getPrefix() + "constantReference");writer.writeCloseTag(CoalescentLikelihoodParser.MODEL);writer.writeOpenTag(CoalescentLikelihoodParser.POPULATION_TREE);writer.writeIDref(TreeModel.TREE_MODEL,modelPrefix + TreeModel.TREE_MODEL);writer.writeCloseTag(CoalescentLikelihoodParser.POPULATION_TREE);writer.writeCloseTag(CoalescentLikelihoodParser.COALESCENT_LIKELIHOOD);break;default :}}writer.writeComment("Define marginal likelihood estimator (GSS) settings");List<Attribute> attributes=new ArrayList<Attribute>();attributes.add(new Attribute.Default<Integer>(MarginalLikelihoodEstimator.CHAIN_LENGTH,options.mleChainLength));attributes.add(new Attribute.Default<Integer>(MarginalLikelihoodEstimator.PATH_STEPS,options.pathSteps));attributes.add(new Attribute.Default<String>(MarginalLikelihoodEstimator.PATH_SCHEME,options.pathScheme));if (!options.pathScheme.equals(MarginalLikelihoodEstimator.LINEAR)) {attributes.add(new Attribute.Default<Double>(MarginalLikelihoodEstimator.ALPHA,options.schemeParameter));}if (options.printOperatorAnalysis) {attributes.add(new Attribute.Default<Boolean>(MarginalLikelihoodEstimator.PRINT_OPERATOR_ANALYSIS,true));}writer.writeOpenTag(MarginalLikelihoodEstimator.MARGINAL_LIKELIHOOD_ESTIMATOR,attributes);writer.writeOpenTag("samplers");writer.writeIDref("mcmc","mcmc");writer.writeCloseTag("samplers");attributes=new ArrayList<Attribute>();attributes.add(new Attribute.Default<String>(XMLParser.ID,"pathLikelihood"));writer.writeOpenTag(PathLikelihood.PATH_LIKELIHOOD,attributes);writer.writeOpenTag(PathLikelihood.SOURCE);writer.writeIDref(CompoundLikelihoodParser.POSTERIOR,CompoundLikelihoodParser.POSTERIOR);writer.writeCloseTag(PathLikelihood.SOURCE);writer.writeOpenTag(PathLikelihood.DESTINATION);writer.writeOpenTag(CompoundLikelihoodParser.WORKING_PRIOR);for (PartitionSubstitutionModel model : beautiOptions.getPartitionSubstitutionModels()) {int codonPartitionCount=model.getCodonPartitionCount();switch (model.getDataType().getType()) {case DataType.NUCLEOTIDES:switch (model.getNucSubstitutionModel()) {case JC:if (codonPartitionCount > 1) {writeRelativeRates(writer,model,codonPartitionCount);}break;case HKY:if (codonPartitionCount > 1 && model.isUnlinkedSubstitutionModel()) {for (int i=1; i <= codonPartitionCount; i++) {writer.writeOpenTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn",model.getPrefix(i) + "kappa"),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,model.getPrefix(i) + "kappa");writer.writeCloseTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR);}} else {writer.writeOpenTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn",model.getPrefix() + "kappa"),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,model.getPrefix() + "kappa");writer.writeCloseTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR);}if (codonPartitionCount > 1) {writeRelativeRates(writer,model,codonPartitionCount);}break;case TN93:if (codonPartitionCount > 1 && model.isUnlinkedSubstitutionModel()) {for (int i=1; i <= codonPartitionCount; i++) {writer.writeOpenTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn",model.getPrefix(i) + "kappa1"),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,model.getPrefix(i) + "kappa1");writer.writeCloseTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR);writer.writeOpenTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn",model.getPrefix(i) + "kappa2"),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,model.getPrefix(i) + "kappa2");writer.writeCloseTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR);}} else {writer.writeOpenTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn",model.getPrefix() + "kappa1"),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,model.getPrefix() + "kappa1");writer.writeCloseTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR);writer.writeOpenTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn",model.getPrefix() + "kappa2"),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,model.getPrefix() + "kappa2");writer.writeCloseTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR);}if (codonPartitionCount > 1) {writeRelativeRates(writer,model,codonPartitionCount);}break;case GTR:if (codonPartitionCount > 1 && model.isUnlinkedSubstitutionModel()) {for (int i=1; i <= codonPartitionCount; i++) {for (String rateName : PartitionSubstitutionModel.GTR_RATE_NAMES) {writer.writeOpenTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn",model.getPrefix(i) + rateName),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,model.getPrefix(i) + rateName);writer.writeCloseTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR);}}} else {for (String rateName : PartitionSubstitutionModel.GTR_RATE_NAMES) {writer.writeOpenTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn",model.getPrefix() + rateName),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,model.getPrefix() + rateName);writer.writeCloseTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR);}}if (codonPartitionCount > 1) {writeRelativeRates(writer,model,codonPartitionCount);}break;}if (model.getFrequencyPolicy() == FrequencyPolicyType.ESTIMATED) {if (codonPartitionCount > 1 && model.isUnlinkedSubstitutionModel() && model.isUnlinkedFrequencyModel()) {for (int i=1; i <= codonPartitionCount; i++) {writer.writeOpenTag(WorkingPriorParsers.LOGIT_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn",model.getPrefix(i) + "frequencies"),new Attribute.Default<Integer>("dimension",4),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,model.getPrefix(i) + "frequencies");writer.writeCloseTag(WorkingPriorParsers.LOGIT_TRANSFORMED_NORMAL_REFERENCE_PRIOR);}} else {writer.writeOpenTag(WorkingPriorParsers.LOGIT_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn",model.getPrefix() + "frequencies"),new Attribute.Default<Integer>("dimension",4),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,model.getPrefix() + "frequencies");writer.writeCloseTag(WorkingPriorParsers.LOGIT_TRANSFORMED_NORMAL_REFERENCE_PRIOR);}}break;case DataType.AMINO_ACIDS:case DataType.TWO_STATES:case DataType.COVARION:case DataType.GENERAL:case DataType.CONTINUOUS:case DataType.MICRO_SAT:default :throw new IllegalArgumentException("Unknown data type");}if (model.isGammaHetero()) {if (codonPartitionCount > 1 && model.isUnlinkedHeterogeneityModel()) {for (int i=1; i <= codonPartitionCount; i++) {writer.writeOpenTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn",model.getPrefix(i) + "alpha"),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,model.getPrefix(i) + "alpha");writer.writeCloseTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR);}} else {writer.writeOpenTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn",model.getPrefix() + "alpha"),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,model.getPrefix() + "alpha");writer.writeCloseTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR);}}if (model.isInvarHetero()) {if (codonPartitionCount > 1 && model.isUnlinkedHeterogeneityModel()) {for (int i=1; i <= codonPartitionCount; i++) {writer.writeOpenTag(WorkingPriorParsers.LOGIT_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn",model.getPrefix(i) + "pInv"),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,model.getPrefix(i) + "pInv");writer.writeCloseTag(WorkingPriorParsers.LOGIT_TRANSFORMED_NORMAL_REFERENCE_PRIOR);}} else {writer.writeOpenTag(WorkingPriorParsers.LOGIT_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn",model.getPrefix() + "pInv"),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,model.getPrefix() + "pInv");writer.writeCloseTag(WorkingPriorParsers.LOGIT_TRANSFORMED_NORMAL_REFERENCE_PRIOR);}}}for (PartitionClockModel model : beautiOptions.getPartitionClockModels()) {switch (model.getClockType()) {case STRICT_CLOCK:writer.writeOpenTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn",model.getPrefix() + "clock.rate"),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,model.getPrefix() + "clock.rate");writer.writeCloseTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR);writer.writeIDref(StrictClockBranchRatesParser.STRICT_CLOCK_BRANCH_RATES,model.getPrefix() + BranchRateModel.BRANCH_RATES);break;case UNCORRELATED:if (model.isContinuousQuantile()) {writer.writeIDref(ContinuousBranchRatesParser.CONTINUOUS_BRANCH_RATES,model.getPrefix() + BranchRateModel.BRANCH_RATES);} else {writer.writeIDref(DiscretizedBranchRatesParser.DISCRETIZED_BRANCH_RATES,model.getPrefix() + BranchRateModel.BRANCH_RATES);}switch (model.getClockDistributionType()) {case GAMMA:writer.writeOpenTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn",model.getPrefix() + ClockType.UCGD_MEAN),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,model.getPrefix() + ClockType.UCGD_MEAN);writer.writeCloseTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR);writer.writeOpenTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn",model.getPrefix() + ClockType.UCGD_SHAPE),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,model.getPrefix() + ClockType.UCGD_SHAPE);writer.writeCloseTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR);break;case LOGNORMAL:if (model.getClockRateParameter().isMeanInRealSpace()) {writer.writeOpenTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn",model.getPrefix() + ClockType.UCLD_MEAN),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,model.getPrefix() + ClockType.UCLD_MEAN);writer.writeCloseTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR);writer.writeOpenTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn",model.getPrefix() + ClockType.UCLD_STDEV),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,model.getPrefix() + ClockType.UCLD_STDEV);writer.writeCloseTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR);} else {writer.writeOpenTag(WorkingPriorParsers.NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn",model.getPrefix() + ClockType.UCLD_MEAN),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,model.getPrefix() + ClockType.UCLD_MEAN);writer.writeCloseTag(WorkingPriorParsers.NORMAL_REFERENCE_PRIOR);writer.writeOpenTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn",model.getPrefix() + ClockType.UCLD_STDEV),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,model.getPrefix() + ClockType.UCLD_STDEV);writer.writeCloseTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR);}break;case EXPONENTIAL:writer.writeOpenTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn",model.getPrefix() + ClockType.UCED_MEAN),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,model.getPrefix() + ClockType.UCED_MEAN);writer.writeCloseTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR);break;}break;default :throw new IllegalArgumentException("Unknown clock model");}}for (PartitionTreePrior model : beautiOptions.getPartitionTreePriors()) {TreePriorType nodeHeightPrior=model.getNodeHeightPrior();TreePriorParameterizationType parameterization=model.getParameterization();if (DEBUG) {System.err.println("nodeHeightPrior: " + nodeHeightPrior);}switch (nodeHeightPrior) {case CONSTANT:writer.writeOpenTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn","constant.popSize"),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,"constant.popSize");writer.writeCloseTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR);break;case EXPONENTIAL:writer.writeOpenTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn","exponential.popSize"),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,"exponential.popSize");writer.writeCloseTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR);if (parameterization == TreePriorParameterizationType.GROWTH_RATE) {writer.writeOpenTag(WorkingPriorParsers.NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn","exponential.growthRate"),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,"exponential.growthRate");writer.writeCloseTag(WorkingPriorParsers.NORMAL_REFERENCE_PRIOR);} else {writer.writeOpenTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn","exponential.doublingTime"),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,"exponential.doublingTime");writer.writeCloseTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR);}break;case LOGISTIC:writer.writeOpenTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn","logistic.popSize"),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,"logistic.popSize");writer.writeCloseTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR);if (parameterization == TreePriorParameterizationType.GROWTH_RATE) {writer.writeOpenTag(WorkingPriorParsers.NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn","logistic.growthRate"),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,"logistic.growthRate");writer.writeCloseTag(WorkingPriorParsers.NORMAL_REFERENCE_PRIOR);} else {writer.writeOpenTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn","logistic.doublingTime"),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,"logistic.doublingTime");writer.writeCloseTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR);}writer.writeOpenTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn","logistic.t50"),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,"logistic.t50");writer.writeCloseTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR);break;case EXPANSION:writer.writeOpenTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn","expansion.popSize"),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,"expansion.popSize");writer.writeCloseTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR);if (parameterization == TreePriorParameterizationType.GROWTH_RATE) {writer.writeOpenTag(WorkingPriorParsers.NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn","expansion.growthRate"),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,"expansion.growthRate");writer.writeCloseTag(WorkingPriorParsers.NORMAL_REFERENCE_PRIOR);} else {writer.writeOpenTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn","expansion.doublingTime"),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,"expansion.doublingTime");writer.writeCloseTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR);}writer.writeOpenTag(WorkingPriorParsers.LOGIT_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn","expansion.ancestralProportion"),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,"expansion.ancestralProportion");writer.writeCloseTag(WorkingPriorParsers.LOGIT_TRANSFORMED_NORMAL_REFERENCE_PRIOR);break;case GMRF_SKYRIDE:writer.writeOpenTag(WorkingPriorParsers.NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn","skyride.logPopSize"),new Attribute.Default<Integer>("dimension",beautiOptions.taxonList.getTaxonCount() - 1),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,"skyride.logPopSize");writer.writeCloseTag(WorkingPriorParsers.NORMAL_REFERENCE_PRIOR);writer.writeOpenTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn","skyride.precision"),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,"skyride.precision");writer.writeCloseTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR);break;case SKYGRID:writer.writeOpenTag(WorkingPriorParsers.NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn","skygrid.logPopSize"),new Attribute.Default<Integer>("dimension",model.getSkyGridCount()),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,"skygrid.logPopSize");writer.writeCloseTag(WorkingPriorParsers.NORMAL_REFERENCE_PRIOR);writer.writeOpenTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR,new Attribute[]{new Attribute.Default<String>("fileName",beautiOptions.logFileName),new Attribute.Default<String>("parameterColumn","skygrid.precision"),new Attribute.Default<String>("burnin","" + (int)(beautiOptions.chainLength * 0.10))});writer.writeIDref(ParameterParser.PARAMETER,"skygrid.precision");writer.writeCloseTag(WorkingPriorParsers.LOG_TRANSFORMED_NORMAL_REFERENCE_PRIOR);break;}}if (options.choiceTreeWorkingPrior.equals("Product of exponential distributions")) {writer.writeIDref("productOfExponentialsPosteriorMeansLoess","exponentials");} else {writer.writeIDref(CoalescentLikelihoodParser.COALESCENT_LIKELIHOOD,"coalescentReference");}writer.writeCloseTag(CompoundLikelihoodParser.WORKING_PRIOR);writer.writeCloseTag(PathLikelihood.DESTINATION);writer.writeCloseTag(PathLikelihood.PATH_LIKELIHOOD);attributes=new ArrayList<Attribute>();attributes.add(new Attribute.Default<String>(XMLParser.ID,"MLELog"));attributes.add(new Attribute.Default<Integer>("logEvery",options.mleLogEvery));attributes.add(new Attribute.Default<String>("fileName",options.mleFileName));writer.writeOpenTag("log",attributes);writer.writeIDref("pathLikelihood","pathLikelihood");writer.writeCloseTag("log");writer.writeCloseTag(MarginalLikelihoodEstimator.MARGINAL_LIKELIHOOD_ESTIMATOR);writer.writeComment("Generalized stepping-stone sampling estimator from collected samples");attributes=new ArrayList<Attribute>();attributes.add(new Attribute.Default<String>("fileName",options.mleFileName));attributes.add(new Attribute.Default<String>("resultsFileName",options.mleResultFileName));writer.writeOpenTag(GeneralizedSteppingStoneSamplingAnalysis.GENERALIZED_STEPPING_STONE_SAMPLING_ANALYSIS,attributes);writer.writeTag("sourceColumn",new Attribute.Default<String>("name","pathLikelihood.source"),true);writer.writeTag("destinationColumn",new Attribute.Default<String>("name","pathLikelihood.destination"),true);writer.writeTag("thetaColumn",new Attribute.Default<String>("name","pathLikelihood.theta"),true);writer.writeCloseTag(GeneralizedSteppingStoneSamplingAnalysis.GENERALIZED_STEPPING_STONE_SAMPLING_ANALYSIS);}}  }
class C{  public cudaIpcMemHandle(){}  }
class C{  public SortedArrayList(){  comparator=null;}  }
class C{  protected void updateView(View view){  try {    mStatusText=(TextView)view.findViewById(R.id.seekBarPrefValue);    mStatusText.setText(String.valueOf(mCurrentValue));    mStatusText.setMinimumWidth(30);    mSeekBar.setProgress(mCurrentValue - mMinValue);  } catch (  Exception e) {    Log.e(TAG,"Error updating seek bar preference",e);  }}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  JSONObject jo=new JSONObject();  JSONTokener x=new JSONTokener(string);  while (x.more()) {    String name=Cookie.unescape(x.nextTo('='));    x.next('=');    jo.put(name,Cookie.unescape(x.nextTo(';')));    x.next();  }  return jo;}  }
class C{  public ItemCollectionRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  protected Expression neg(int opPos) throws TransformerException {  return compileUnary(new Neg(),opPos);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.N4_TYPE_DEFINITION__DEFINED_TYPE:    if (resolve)     return getDefinedType();  return basicGetDefinedType();}return super.eGet(featureID,resolve,coreType);}  }
class C{  static void appendBytes(String content,Mode mode,BitArray bits,String encoding) throws WriterException {switch (mode) {case NUMERIC:    appendNumericBytes(content,bits);  break;case ALPHANUMERIC:appendAlphanumericBytes(content,bits);break;case BYTE:append8BitBytes(content,bits,encoding);break;case KANJI:appendKanjiBytes(content,bits);break;default :throw new WriterException("Invalid mode: " + mode);}}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.635 -0500",hash_original_method="A905F7DF70B1EDD8621789C3C3A6CD84",hash_generated_method="B003E144846289E0AEB6814A85C77E68") public CopyOnWriteArraySet(Collection<? extends E> c){  al=new CopyOnWriteArrayList<E>();  al.addAllAbsent(c);}  }
class C{  private static void TestMultipleFD() throws Exception {  RandomAccessFile raf=null;  FileOutputStream fos=null;  FileInputStream fis=null;  FileChannel fc=null;  FileLock fileLock=null;  File test1=new File("test1");  try {    raf=new RandomAccessFile(test1,"rw");    fos=new FileOutputStream(raf.getFD());    fis=new FileInputStream(raf.getFD());    fc=raf.getChannel();    fileLock=fc.lock();    raf.setLength(0L);    fos.flush();    fos.write("TEST".getBytes());  }  finally {    if (fileLock != null)     fileLock.release();    if (fis != null)     fis.close();    if (fos != null)     fos.close();    if (raf != null)     raf.close();    test1.delete();  }  File test2=new File("test2");  try {    raf=new RandomAccessFile(test2,"rw");    fos=new FileOutputStream(raf.getFD());    fis=new FileInputStream(raf.getFD());    fc=raf.getChannel();    fileLock=fc.lock();    raf.setLength(0L);    fos.flush();    fos.write("TEST".getBytes());  }  finally {    if (fileLock != null)     fileLock.release();    if (raf != null)     raf.close();    if (fos != null)     fos.close();    if (fis != null)     fis.close();    test2.delete();  }  File test3=new File("test3");  try {    raf=new RandomAccessFile(test3,"rw");    fos=new FileOutputStream(raf.getFD());    fis=new FileInputStream(raf.getFD());    fc=raf.getChannel();    fileLock=fc.lock();    raf.setLength(0L);    fos.flush();    fos.write("TEST".getBytes());  }  finally {    if (fileLock != null)     fileLock.release();    if (fos != null)     fos.close();    if (raf != null)     raf.close();    if (fis != null)     fis.close();    test3.delete();  }}  }
class C{  protected PrettyPrinter _defaultPrettyPrinter(){  return new DefaultPrettyPrinter();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof DefaultKeyedValue)) {    return false;  }  DefaultKeyedValue that=(DefaultKeyedValue)obj;  if (!this.key.equals(that.key)) {    return false;  }  if (this.value != null ? !this.value.equals(that.value) : that.value != null) {    return false;  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:59.837 -0500",hash_original_method="0268276F0AF2F185A8A983DF4EA54EFF",hash_generated_method="B6B9664ACA374B7893607D0B90FFC14C") public boolean hasFromTag(){  return hasParameter(ParameterNames.FROM_TAG);}  }
class C{  public static <A>EvalTValue<A> fromAnyM(final AnyMValue<A> anyM){  return of(anyM.map(null));}  }
class C{  public int deleteById(DatabaseConnection databaseConnection,ID id,ObjectCache objectCache) throws SQLException {  try {    Object[] args=new Object[]{convertIdToFieldObject(id)};    int rowC=databaseConnection.delete(statement,args,argFieldTypes);    logger.debug("delete data with statement '{}' and {} args, changed {} rows",statement,args.length,rowC);    if (args.length > 0) {      logger.trace("delete arguments: {}",(Object)args);    }    if (rowC > 0 && objectCache != null) {      objectCache.remove(clazz,id);    }    return rowC;  } catch (  SQLException e) {    throw SqlExceptionUtil.create("Unable to run deleteById stmt on id " + id + ": "+ statement,e);  }}  }
class C{  private Entry(T elem,double priority){  mNext=mPrev=this;  mElem=elem;  mPriority=priority;}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    return new FileInputStream(entry.getCleanFile(index));  }}  }
class C{  public AccountHeaderBuilder withSelectionListEnabled(boolean selectionListEnabled){  this.mSelectionListEnabled=selectionListEnabled;  return this;}  }
class C{  private Round(Context context,int number,int priorErrors,int priorWarnings,Log.DeferredDiagnosticHandler deferredDiagnosticHandler){  this.context=context;  this.number=number;  compiler=JavaCompiler.instance(context);  if (compiler instanceof LanguageCompiler) {    ((LanguageCompiler)compiler).setAddModuleTrees(false);  }  log=Log.instance(context);  log.nerrors=priorErrors;  log.nwarnings=priorWarnings;  if (number == 1) {    Assert.checkNonNull(deferredDiagnosticHandler);    this.deferredDiagnosticHandler=deferredDiagnosticHandler;  } else {    this.deferredDiagnosticHandler=new Log.DeferredDiagnosticHandler(log);  }  JavacProcessingEnvironment.this.context=context;  topLevelClasses=List.nil();  packageInfoFiles=List.nil();}  }
class C{  public Equals(){  super(Boolean.class,Number.class,Number.class);}  }
class C{  public static String encode(User user){  StringBuilder out=new StringBuilder();  out.append(user.id).append(FIELD_SEPARATOR);  out.append(user.isEnabled()).append(FIELD_SEPARATOR);  out.append(Base64.encodeBase64String(user.name.getBytes())).append(FIELD_SEPARATOR);  out.append(user.getContext().getAuthenticationMethod().getType().getUniqueIdentifier()).append(FIELD_SEPARATOR);  out.append(user.authenticationCredentials.encode(FIELD_SEPARATOR));  if (log.isDebugEnabled())   log.debug("Encoded user: " + out.toString());  return out.toString();}  }
class C{  private long nextPowerOf2(long val){  long po2=1;  while (po2 < val) {    po2*=2;  }  return (po2);}  }
class C{  public StereoOptionSceneController(){  String stereo=System.getProperty(AVKey.STEREO_MODE);  if ("redblue".equalsIgnoreCase(stereo))   this.setStereoMode(AVKey.STEREO_MODE_RED_BLUE); else   if ("device".equalsIgnoreCase(stereo))   this.setStereoMode(AVKey.STEREO_MODE_DEVICE);}  }
class C{  synchronized public ICommitRecord findNext(final long timestamp){  if (timestamp == ITx.UNISOLATED) {    throw new IllegalArgumentException("Can not specify 'UNISOLATED' as timestamp");  }  if (timestamp == ITx.READ_COMMITTED) {    throw new IllegalArgumentException("Can not specify 'READ_COMMITTED' as timestamp");  }  final long index=findIndexOf(Math.abs(timestamp)) + 1;  if (index == nentries) {    return null;  }  return valueAtIndex(index);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:28.161 -0500",hash_original_method="5BF2BF9E6EAB3A672A6E4C279ED476B8",hash_generated_method="3C20053C0BADAEBF831FEE2F33201756") public void expand(){  try {    final IStatusBarService svc=getService();    if (svc != null) {      svc.expand();    }  } catch (  RemoteException ex) {    throw new RuntimeException(ex);  }}  }
class C{  public void fireNodeRemoved(SessionNode node){  SessionEvent event=new SessionEvent(this.source,node,SessionEvent.NODE_REMOVED);  fireSessionEvent(event);}  }
class C{  protected static void enableJndiMock() throws NamingException {  if (!NamingManager.hasInitialContextFactoryBuilder()) {    NamingManager.setInitialContextFactoryBuilder(new TestNamingContextFactoryBuilder());  }}  }
class C{  @Override public String prettyPrintIdentifier(){  Metric metric=value.getMetric();  if (metric != null && metric.getOid() != null) {    String id=PrettyPrintConstant.IDENTIFIER_TAG + PrettyPrintConstant.OPEN_IDENT + metric.getOid()+ PrettyPrintConstant.CLOSE_IDENT;    Space parent=value.getParent();    while (parent.getParent() != null) {      id=PrettyPrintConstant.IDENTIFIER_TAG + PrettyPrintConstant.OPEN_IDENT + parent.getRelation().getOid()+ PrettyPrintConstant.CLOSE_IDENT+ "."+ id;      parent=parent.getParent();    }    return id;  } else {    return null;  }}  }
class C{  public void executeQuery(){  KeyNamePair docTypeKNPair=cmbDocType.getSelectedItem().toKeyNamePair();  executeQuery(docTypeKNPair,form.getMiniTable());  form.getMiniTable().repaint();  form.invalidate();}  }
class C{  public void removeListener(final ISPARQLUpdateListener l){  if (isReadOnly())   throw new UnsupportedOperationException();  if (l == null)   throw new IllegalArgumentException();  listeners.remove(l);}  }
class C{  protected void debugCodeAssign(String className,int newType,int newId,String value){  if (trace.isDebugEnabled()) {    trace.debugCode(className + " " + PREFIX[newType]+ newId+ " = "+ getTraceObjectName()+ "."+ value+ ";");  }}  }
class C{  public static ArrayBasedEscaperMap create(Map<Character,String> replacements){  return new ArrayBasedEscaperMap(createReplacementArray(replacements));}  }
class C{  public void onWatched(EntityPlayerMP player){}  }
class C{  private static byte[] min(byte[] ip1,byte[] ip2){  for (int i=0; i < ip1.length; i++) {    if ((ip1[i] & 0xFFFF) < (ip2[i] & 0xFFFF)) {      return ip1;    }  }  return ip2;}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + mean+ ")";}  }
class C{  Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    int length=this.length();    writer.write('[');    if (length == 1) {      JSONObject.writeValue(writer,this.myArrayList.get(0),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      for (int i=0; i < length; i+=1) {        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        JSONObject.indent(writer,newindent);        JSONObject.writeValue(writer,this.myArrayList.get(i),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      JSONObject.indent(writer,indent);    }    writer.write(']');    return writer;  } catch (  IOException e) {    throw new JSONException(e);  }}  }
class C{  public int color(Context ctx,@AttrRes int colorStyle,@ColorRes int colorDefaultRes){  int color=color(ctx);  if (color == 0) {    return UIUtils.getThemeColorFromAttrOrRes(ctx,colorStyle,colorDefaultRes);  } else {    return color;  }}  }
class C{  void checkDestroyed(){  throwIfDestroyed(isDestroyed());}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:14.459 -0500",hash_original_method="355F47F7AE472993E3A2C68F4F83F8CB",hash_generated_method="7DAE11C94B3B5FFEA81184E8A7CC2D91") @Override public void send(HandshakeIODataStream out){  if (exchange_keys.length != 0) {    if (!isRSA || isTLS) {      out.writeUint16(exchange_keys.length);    }    out.write(exchange_keys);  }}  }
class C{  @Override public <K>Eval<Map<K,List<T>>> groupBy(final Function<? super T,? extends K> classifier){  return Eval.later(null);}  }
class C{  @Deprecated public static <N,E>ImmutableNetwork<N,E> copyOf(ImmutableNetwork<N,E> graph){  return checkNotNull(graph);}  }
class C{  @Override public void execute(){  if (event.has("expire")) {    GroupPanelController.get().expireInvite(event.get("leader"));  } else {    GroupPanelController.get().receiveInvite(event.get("leader"));  }}  }
class C{  public PolynomialGF2mSmallM modSquareMatrix(PolynomialGF2mSmallM[] matrix){  int length=matrix.length;  int[] resultCoeff=new int[length];  int[] thisSquare=new int[length];  for (int i=0; i < coefficients.length; i++) {    thisSquare[i]=field.mult(coefficients[i],coefficients[i]);  }  for (int i=0; i < length; i++) {    for (int j=0; j < length; j++) {      if (i >= matrix[j].coefficients.length) {        continue;      }      int scalarTerm=field.mult(matrix[j].coefficients[i],thisSquare[j]);      resultCoeff[i]=field.add(resultCoeff[i],scalarTerm);    }  }  return new PolynomialGF2mSmallM(field,resultCoeff);}  }
class C{  public Builder enableHomeAsUp(boolean enabled){  this.enableHomeAsUp=enabled;  return this;}  }
class C{  public static void w(String tag,String msg,Object... args){  if (sLevel > LEVEL_WARNING) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.w(tag,msg);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.470 -0500",hash_original_method="C177E80799F9F51057A5F361D4C5571B",hash_generated_method="BA62DAC4F150FFE24970E26679C6A589") public long replace(ContentValues values){  return insertInternal(values,true);}  }
class C{  public void ignoreRecursion(final boolean ignoreRecursion){  this.ignoreRecursion=ignoreRecursion;}  }
class C{  private boolean updateRatios(){  if (!MEASURETYPE_Ratio.equals(getMeasureType()))   return false;  return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected boolean doDoneAction(){  _parent.reset();  _parent._currentIconMap=_iconMap;  if (!_parent.isUpdate()) {    ItemPalette.removeIconMap(_type,_family);    if (!ItemPalette.addFamily(_parent._paletteFrame,_type,_family,_iconMap)) {      return false;    } else {      _parent.updateFamiliesPanel();      _parent.setFamily(_family);    }  }  return true;}  }
class C{  public int index(){  return currentBufferIndex;}  }
class C{  @Inline @Entrypoint public static void booleanFieldWrite(Object ref,boolean value,Offset offset,int locationMetadata){  if (NEEDS_BOOLEAN_GC_WRITE_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    Selected.Mutator.get().booleanWrite(src,src.toAddress().plus(offset),value,offset.toWord(),Word.fromIntZeroExtend(locationMetadata),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  @Override public String toString(){  return "[SSLServerSocketImpl]";}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public PlatformDotNetCacheStore(){  nativeFactory=null;}  }
class C{  public static void translate(MapWidget v,int x,int y,Location location){  MapCalibrationData calibration=v.getConfig().getGpsConfig().getCalibration();  if (calibration == null) {    Log.w("GeoUtils","Can't translate. No calibration data!");  }  calibration.translate(x,y,location);}  }
class C{  public Set<String> keys(){  Set<String> keys=new HashSet<String>();  keys.addAll(pmap.keySet());  return keys;}  }
class C{  public double distanceSquared(double x,double y,double z){  double xd=this.x - x;  double yd=this.y - y;  double zd=this.z - z;  return xd * xd + yd * yd + zd * zd;}  }
class C{  public boolean isConnected(){  return (m_Connection != null);}  }
class C{  public boolean hasSortingRules(){  return !requestScope.getSorting().isDefaultInstance();}  }
class C{  public static boolean shouldUpdateStyle(PropertyChangeEvent event){  String eName=event.getPropertyName();  if ("name" == eName) {    return true;  } else   if ("componentOrientation" == eName) {    return true;  } else   if ("ancestor" == eName && event.getNewValue() != null) {    LookAndFeel laf=UIManager.getLookAndFeel();    return (laf instanceof SynthLookAndFeel && ((SynthLookAndFeel)laf).shouldUpdateStyleOnAncestorChanged());  } else   if ("SeaGlass.Overrides" == eName) {    return true;  } else   if ("SeaGlass.Overrides.InheritDefaults" == eName) {    return true;  } else   if ("JComponent.sizeVariant" == eName) {    return true;  } else   if (eName != null && (eName.startsWith("JButton.") || eName.startsWith("JTextField."))) {    return true;  }  return false;}  }
class C{  public void removePanListener(PanListener listener){  if (mPan != null) {    mPan.removePanListener(listener);  }}  }
class C{  public TObjectDoubleHashMapDecorator(TObjectDoubleHashMap<V> map){  super();  this._map=map;}  }
class C{  protected static void incrementValue(FloatMatrix value,FloatMatrix step,final float gamma,final float lambda){  value.addi(value.mul(-gamma * lambda).addi(step));}  }
class C{  private void convertInstance(Instance instance){  if (!m_needToTransform) {    push(instance);    return;  }  double[] vals=new double[outputFormatPeek().numAttributes()];  int attSoFar=0;  for (int j=0; j < getInputFormat().numAttributes(); j++) {    Attribute att=getInputFormat().attribute(j);    if (!att.isNominal() || (j == getInputFormat().classIndex()) || !m_Columns.isInRange(j)) {      vals[attSoFar]=instance.value(j);      attSoFar++;    } else {      if ((att.numValues() <= 2) && (!m_TransformAll)) {        vals[attSoFar]=instance.value(j);        attSoFar++;      } else {        if (instance.isMissing(j)) {          for (int k=0; k < att.numValues(); k++) {            vals[attSoFar + k]=instance.value(j);          }        } else {          for (int k=0; k < att.numValues(); k++) {            if (k == (int)instance.value(j)) {              vals[attSoFar + k]=1;            } else {              vals[attSoFar + k]=0;            }          }        }        attSoFar+=att.numValues();      }    }  }  Instance inst=null;  if (instance instanceof SparseInstance) {    inst=new SparseInstance(instance.weight(),vals);  } else {    inst=new DenseInstance(instance.weight(),vals);  }  inst.setDataset(getOutputFormat());  copyValues(inst,false,instance.dataset(),getOutputFormat());  inst.setDataset(getOutputFormat());  push(inst);}  }
class C{  public static String hex(ByteBuffer bytes){  return hex(bytes,0,bytes.position());}  }
class C{  public void memberJoined(InternalDistributedMember id){}  }
class C{  public static String createName(){  return createName(GENSYM_PREFIX);}  }
class C{  public SocketCommandServer(int defaultPort,int defaultBacklog,boolean triesEphemeralPort){  if (defaultPort < 0)   defaultPort=0;  this.defaultPort=defaultPort;  this.defaultBacklog=defaultBacklog;  this.triesEphemeralPort=triesEphemeralPort;}  }
class C{  public static CFGBuilder create(@Nonnull MethodDescriptor descriptor,@Nonnull MethodGen methodGen){  return new BetterCFGBuilder2(descriptor,methodGen);}  }
class C{  public void valueOf(final Type type){  if (type.getSort() == Type.OBJECT || type.getSort() == Type.ARRAY) {    return;  }  if (type == Type.VOID_TYPE) {    push((String)null);  } else {    Type boxed=getBoxedType(type);    invokeStatic(boxed,new Method("valueOf",boxed,new Type[]{type}));  }}  }
class C{  public DoubleProperty yShiftProperty(){  return this.mapArea.getView().translateYProperty();}  }
class C{  public static void listenForRequests(boolean isFullOp){  ServerSocket s=null;  try {    if (isFullOp) {      SSLServerSocketFactory sslSrvFact=(SSLServerSocketFactory)SSLServerSocketFactory.getDefault();      s=(SSLServerSocket)sslSrvFact.createServerSocket(ServerConfig.getPort());    } else {      s=new ServerSocket(ServerConfig.getPort());      System.out.println("Listening for connections on port " + ServerConfig.getPort() + "...");    }    Logging.log("Listening for connections on port " + ServerConfig.getPort() + "...");    while (true) {      Socket c=s.accept();      Logging.log("Server accepted new connection.");      RequestHandler th;      if (isFullOp) {        th=new RequestHandler((SSLSocket)c);      } else {        th=new RequestHandler(c);      }      th.start();    }  } catch (  IOException e) {    Logging.error("hello: " + e.getMessage());  }}  }
class C{  public static boolean isBinaryVersionCompatible(int consumerMajor,int consumerMinor,int major,int minor){  return consumerMajor == major;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:29.719 -0500",hash_original_method="51142E64B42932805E0B604E9F91CFAD",hash_generated_method="C303AAB7EA511965A225079A754DF7E1") public CipherParameters generateDerivedParameters(int keySize,int ivSize){  keySize=keySize / 8;  ivSize=ivSize / 8;  byte[] dKey=generateDerivedKey(keySize + ivSize);  return new ParametersWithIV(new KeyParameter(dKey,0,keySize),dKey,keySize,ivSize);}  }
class C{  public static void decimate(double[] y,int decrate,double[] ydecimated){  int n=Math.min(ydecimated.length,y.length / decrate);  for (int i=0; i < n; i++)   ydecimated[i]=y[i * decrate];}  }
class C{  public boolean showDialog(){  setVisible(true);  return continueQueue;}  }
class C{  public GraphBuilder<N> expectedNodeCount(int expectedNodeCount){  checkArgument(expectedNodeCount >= 0,"The expected number of nodes can't be negative: %s",expectedNodeCount);  this.expectedNodeCount=Optional.of(expectedNodeCount);  return this;}  }
class C{  public final void testRemoveAllHelperTexts(){  CharSequence helperText1="helperText1";  CharSequence helperText2="helperText2";  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addHelperText(helperText1);  passwordEditText.addHelperText(helperText2);  passwordEditText.removeAllHelperTexts();  assertTrue(passwordEditText.getHelperTexts().isEmpty());}  }
class C{  public static String saveChartAsPNG(JFreeChart chart,int width,int height,HttpSession session) throws IOException {  return ServletUtilities.saveChartAsPNG(chart,width,height,null,session);}  }
class C{  void resume(){  imageLoader.resume();}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  public void schemaUrlChanged(String url){  dataObject.getAttributes().put(Constants.JSON_EXAMPLE_SCHEMA_REF_ATTRIBUTE,Collections.singletonList(url));}  }
class C{  public static void exportContent(DialogueSystem system,String file,String tag){  Document doc=XMLUtils.newXMLDocument();  Set<String> parameterIds=new HashSet<String>(system.getState().getParameterIds());  Set<String> otherVarsIds=new HashSet<String>(system.getState().getChanceNodeIds());  otherVarsIds.removeAll(parameterIds);  Set<String> variables=(tag.equals("parameters")) ? parameterIds : otherVarsIds;  Node paramXML=system.getState().generateXML(doc,variables);  doc.renameNode(paramXML,null,tag);  doc.appendChild(paramXML);  XMLUtils.writeXMLDocument(doc,file);}  }
class C{  private byte readAndCheckByte() throws IOException, EOFException {  int b1=in.read();  if (-1 == b1) {    throw new EOFException();  }  return (byte)b1;}  }
class C{  private static void protectPassword(String field){  String passwordFieldName=field + ".value";  String confirmFieldName=field + ".confirm";  if (Validation.hasError(passwordFieldName) || Validation.hasError(confirmFieldName)) {    params.remove(passwordFieldName);    params.remove(confirmFieldName);  } else {    protectField(passwordFieldName);    protectField(confirmFieldName);  }}  }
class C{  @SuppressWarnings("unchecked") private void updateTaskbarProgress(@Nullable Double progress){  if (taskBarRelatedPointer == null || taskBarList == null) {    return;  }  threadPoolExecutor.execute(null);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public boolean isExpired(){  return expired;}  }
class C{  public void addTokenOffset(TLAToken tok,int offset){  Vector lastLine=(Vector)tokens.elementAt(tokens.size() - 1);  int newCol=offset;  if (lastLine.size() > 0) {    TLAToken lastTok=(TLAToken)lastLine.elementAt(lastLine.size() - 1);    newCol=newCol + lastTok.column + lastTok.string.length();  }  ;  tok.column=newCol;  lastLine.addElement(tok);}  }
class C{  public double distanceSq(final MutableInt2D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  return (dx * dx + dy * dy);}  }
class C{  public boolean verify(String challenge) throws SpkacException {  if (!challenge.equals(getChallenge())) {    return false;  }  return verify();}  }
class C{  private RealConnection findHealthyConnection(int connectTimeout,int readTimeout,int writeTimeout,boolean connectionRetryEnabled,boolean doExtensiveHealthChecks) throws IOException, RouteException {  while (true) {    RealConnection candidate=findConnection(connectTimeout,readTimeout,writeTimeout,connectionRetryEnabled);synchronized (connectionPool) {      if (candidate.successCount == 0) {        return candidate;      }    }    if (candidate.isHealthy(doExtensiveHealthChecks)) {      return candidate;    }    connectionFailed(new IOException());  }}  }
class C{  public static int indexOfAny(String str,String[] searchStrs){  if ((str == null) || (searchStrs == null)) {    return -1;  }  int sz=searchStrs.length;  int ret=Integer.MAX_VALUE;  int tmp=0;  for (int i=0; i < sz; i++) {    tmp=str.indexOf(searchStrs[i]);    if (tmp == -1) {      continue;    }    if (tmp < ret) {      ret=tmp;    }  }  return (ret == Integer.MAX_VALUE) ? -1 : ret;}  }
class C{  public ResultSetRow next() throws SQLException {  nextRecord();  if (this.nextRow == null && !this.streamerClosed && !this.moreResultsExisted) {    this.io.closeStreamer(this);    this.streamerClosed=true;  }  if (this.nextRow != null) {    if (this.index != Integer.MAX_VALUE) {      this.index++;    }  }  return this.nextRow;}  }
class C{  public T longClicked(Object handler,String method){  Common common=new Common().forward(handler,method,true,ON_CLICK_SIG);  return longClicked(common);}  }
class C{  public MethodData(DerValue encoding) throws Asn1Exception, IOException {  DerValue der;  if (encoding.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  der=encoding.getData().getDerValue();  if ((der.getTag() & 0x1F) == 0x00) {    BigInteger bint=der.getData().getBigInteger();    methodType=bint.intValue();  } else   throw new Asn1Exception(Krb5.ASN1_BAD_ID);  if (encoding.getData().available() > 0) {    der=encoding.getData().getDerValue();    if ((der.getTag() & 0x1F) == 0x01) {      methodData=der.getData().getOctetString();    } else     throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  if (encoding.getData().available() > 0)   throw new Asn1Exception(Krb5.ASN1_BAD_ID);}  }
class C{  protected static double sunEclipticLongitude(double M0){  double E=eccentricAnomaly(M0);  double v=2 * Math.atan(Math.sqrt((1 + ECCENTRICITY) / (1 - ECCENTRICITY)) * Math.tan(E / 2.0));  double ret=v + omega_bar_g;  ret=adjustWithin2PI(ret);  return ret;}  }
class C{  public final boolean isReadFinished(){  return dataSourceStream.isEndOfStream();}  }
class C{  @Override public WeightVector train(final SLProblem sp,SLParameters params) throws Exception {  WeightVector wv=null;  if (params.TOTAL_NUMBER_FEATURE > 0) {    wv=new WeightVector(params.TOTAL_NUMBER_FEATURE + 1);    wv.setExtendable(false);  } else {    wv=new WeightVector(8192);    wv.setExtendable(true);  }  return train(sp,params,wv);}  }
class C{  public MarkupBuilder(IndentPrinter out){  this.out=out;}  }
class C{  public ExportKeyPairAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("ExportKeyPairAction.statusbar"));  putValue(NAME,res.getString("ExportKeyPairAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("ExportKeyPairAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("ExportKeyPairAction.image")))));}  }
class C{  public DCryptoStrength(JDialog parent,Dialog.ModalityType modality) throws CryptoException {  super(parent,res.getString("DCryptoStrength.Title"),modality);  initComponents();}  }
class C{  public void estimateActivities(String filename,double radius){  int lineCounter=0;  int lineMultiplier=1;  try {    Scanner input=new Scanner(new BufferedReader(new FileReader(new File(filename))));    input.nextLine();    while (input.hasNextLine()) {      if (lineCounter == lineMultiplier) {        log.info("Number of activities processed: " + lineCounter);        lineMultiplier*=2;      }      String[] line=input.nextLine().split(",");      if (line.length == 5) {        double x=Double.parseDouble(line[1]);        double y=Double.parseDouble(line[2]);        int position=line[3].indexOf("H");        int hour=Integer.parseInt(line[3].substring(position - 2,position));        Collection<MyGridCell> cells=grid.getDisk(x,y,radius);        float value=((float)1) / ((float)cells.size());        for (        MyGridCell cell : cells) {          cell.addToTotalCount(value);          cell.addToHourCount(hour,value);        }        lineCounter++;      }    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }  log.info("Number of activities processed: " + lineCounter + " (Completed)");}  }
class C{  @Deprecated public boolean isExceptionDetailEnabled(){  return true;}  }
class C{  public MariaDbClientPreparedStatement clone() throws CloneNotSupportedException {  MariaDbClientPreparedStatement clone=(MariaDbClientPreparedStatement)super.clone();  clone.sqlQuery=sqlQuery;  clone.prepareResult=prepareResult;  clone.parameters=new ParameterHolder[prepareResult.getParamCount()];  clone.resultSetMetaData=resultSetMetaData;  clone.parameterMetaData=parameterMetaData;  return clone;}  }
class C{  public void testXorMappedAddressXoring_v6(){  XorMappedAddressAttribute addressAttribute=new XorMappedAddressAttribute();  TransportAddress testAddress=new TransportAddress("2001:660:4701:1001:202:8aff:febe:130b",12120,Transport.UDP);  addressAttribute.setAddress(testAddress);  TransportAddress xorredAddr=addressAttribute.applyXor(new byte[]{(byte)0x20,(byte)0x01,(byte)0x06,(byte)0x60,(byte)0x47,(byte)0x01,(byte)0x10,(byte)0x01,(byte)0x02,(byte)0x02,(byte)0x8a,(byte)0xff,(byte)0xfe,(byte)0xbe,(byte)0x13,(byte)0x0b});  assertTrue("Xorring the address with itself didn't return 00000...",Arrays.equals(xorredAddr.getAddressBytes(),new byte[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));  assertTrue("Port was not xorred",testAddress.getPort() != xorredAddr.getPort());  addressAttribute.setAddress(testAddress);  xorredAddr=addressAttribute.applyXor(new byte[]{21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36});  xorredAddr=addressAttribute.applyXor(xorredAddr.getAddressBytes());  assertTrue("Xorring the original with the xor-ed didn't return the code..",Arrays.equals(xorredAddr.getAddressBytes(),new byte[]{21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36}));  assertTrue("Port was not xorred",testAddress.getPort() != 0xFFFF);  addressAttribute.setAddress(testAddress);  xorredAddr=addressAttribute.applyXor(new byte[]{21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36});  addressAttribute.setAddress(xorredAddr);  xorredAddr=addressAttribute.applyXor(new byte[]{21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36});  assertEquals("Double xorring didn't give the original ...",testAddress,xorredAddr);}  }
class C{  public MD5InputStream(InputStream in){  super(in);  md5=new MD5();}  }
class C{  public JettyRuntimeConfigurationCapability(){  this.propertySupportMap.put(ServletPropertySet.PORT,Boolean.TRUE);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public PutIndexTemplateRequestBuilder addAlias(Alias alias){  request.alias(alias);  return this;}  }
class C{  public MP4Config(String path) throws IOException, FileNotFoundException {  StsdBox stsdBox;  mp4Parser=new MP4Parser(path);  try {    mp4Parser.parse();  } catch (  IOException ignore) {  }  stsdBox=mp4Parser.getStsdBox();  mPPS=stsdBox.getB64PPS();  mSPS=stsdBox.getB64SPS();  mProfilLevel=stsdBox.getProfileLevel();  mp4Parser.close();}  }
class C{  @SuppressWarnings("unchecked") static ConfProxyUtil createUtilInstance(final String className) throws Exception {  Class<ConfProxyUtil> utilClass=(Class<ConfProxyUtil>)Class.forName(className);  return utilClass.newInstance();}  }
class C{  public List<Integer> duplicates(int[] A,int[] B){  List<Integer> res=new ArrayList<Integer>();  if (A == null || B == null || A.length == 0 || B.length == 0)   return res;  int i=0;  int j=0;  while (i < A.length && j < B.length) {    if (A[i] < B[j]) {      i++;    } else     if (A[i] > B[j]) {      j++;    } else {      res.add(A[i]);      i++;      j++;    }  }  return res;}  }
class C{  private void deleteStatus() throws IOException {  final File statusFile=new File(workingDir,statusName);  if (statusFile.exists() && !statusFile.delete()) {    throw new IOException("Could not delete status file (" + statusFile.getAbsolutePath() + ")!");  }}  }
class C{  public void downloadSeasonPoster(TvShow show,int season){  String seasonPosterUrl=show.getSeasonPosterUrl(season);  TvShowSeason tvShowSeason=null;  for (  TvShowSeason s : show.getSeasons()) {    if (s.getSeason() == season) {      tvShowSeason=s;      break;    }  }  String filename="";  if (season > 0) {    filename=String.format(show.getPath() + File.separator + "season%02d-poster."+ FilenameUtils.getExtension(seasonPosterUrl),season);  } else {    filename=show.getPath() + File.separator + "season-specials-poster."+ FilenameUtils.getExtension(seasonPosterUrl);  }  SeasonPosterImageFetcher task=new SeasonPosterImageFetcher(show,filename,tvShowSeason,seasonPosterUrl);  TmmTaskManager.getInstance().addImageDownloadTask(task);}  }
class C{  public Builder fetchField(){  this.isField=true;  return this;}  }
class C{  public String[] validOption2(){  return new String[]{""};}  }
class C{  public Doctype addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  private boolean isStandalone(){  return JavaCore.getPlugin() == null;}  }
class C{  @Nullable public PyType exclude(@Nullable PyType type,@NotNull TypeEvalContext context){  final List<PyType> members=new ArrayList<PyType>();  for (  PyType m : getMembers()) {    if (type == null) {      if (m != null) {        members.add(m);      }    } else {      if (!PyTypeChecker.match(type,m,context)) {        members.add(m);      }    }  }  return union(members);}  }
class C{  protected static ValueTrackerElement transformLiterals(final ReilInstruction instruction,final ValueTrackerElement incomingState,final IElementGenerator generator){  final ReilOperand firstOperand=instruction.getFirstOperand();  final ReilOperand secondOperand=instruction.getSecondOperand();  final String thirdOperand=instruction.getThirdOperand().getValue();  final Register resultAloc=new Register(thirdOperand);  final IValueElement alocValue=generator.generate(getAtomicType(firstOperand),getAtomicType(secondOperand));  assert alocValue instanceof Literal : "The combination of two literals was not a literal";  return incomingState.update(instruction,resultAloc,alocValue);}  }
class C{  public void applyLocalizedPattern(String template){  pattern=convertPattern(template,formatData.getLocalPatternChars(),PATTERN_CHARS,true);}  }
class C{  public LinearTransform(DataSet dataSet,double A,double B){  this(A,B);  fit(dataSet);}  }
class C{  public Y le(String value){  if (value == null || value.trim().length() == 0) {    return super.le((Long)null);  } else {    return super.le(Long.parseLong(value.trim()));  }}  }
class C{  private List<Byte> toList(byte[] bytes){  List<Byte> result=new ArrayList<Byte>();  for (  byte b : bytes) {    result.add(b);  }  return result;}  }
class C{  @Override public Handle findHandle(Point p){  validateHandles();  for (  Handle handle : new ReversedList<Handle>(getSecondaryHandles())) {    if (handle.contains(p)) {      return handle;    }  }  for (  Handle handle : new ReversedList<Handle>(getSelectionHandles())) {    if (handle.contains(p)) {      return handle;    }  }  return null;}  }
class C{  public ResourceFilter recursive(){  return addKind(Kind.INHERITABLE);}  }
class C{  void close(LocalRegion region){  try {    getDiskStore().close(region,this,false);  }  finally {    statsClose(region);  }}  }
class C{  public static boolean writeFile(String filePath,String content,boolean append){  if (TextUtils.isEmpty(content)) {    return false;  }  FileWriter fileWriter=null;  try {    makeDirs(filePath);    fileWriter=new FileWriter(filePath,append);    fileWriter.write(content);    fileWriter.close();    return true;  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (fileWriter != null) {      try {        fileWriter.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }}  }
class C{  public void testBug22613() throws Exception {  createTable("bug22613","( s set('a','bc','def','ghij') default NULL, t enum('a', 'ab', 'cdef'), s2 SET('1','2','3','4','1585','ONE','TWO','Y','N','THREE'))");  checkMetadataForBug22613(this.conn);  if (versionMeetsMinimum(5,0)) {    Connection infoSchemConn=null;    try {      Properties props=new Properties();      props.setProperty("useInformationSchema","true");      infoSchemConn=getConnectionWithProps(props);      checkMetadataForBug22613(infoSchemConn);    }  finally {      if (infoSchemConn != null) {        infoSchemConn.close();      }    }  }}  }
class C{  public void finishMoveRightAnim(){  if (!mExpandFlag) {    return;  }  ObjectAnimator imageAAnimator=null;  PropertyValuesHolder imageA_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageE.getIndexLable()]);  PropertyValuesHolder imageA_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageE.getIndexLable()]);  if (imageA.getIndexLable() % 5 == 3) {    PropertyValuesHolder imageA_scale_x=PropertyValuesHolder.ofFloat("scaleX",1);    PropertyValuesHolder imageA_scale_y=PropertyValuesHolder.ofFloat("scaleY",1);    imageAAnimator=ObjectAnimator.ofPropertyValuesHolder(imageA,imageA_translate_x,imageA_translate_y,imageA_scale_x,imageA_scale_y);  } else   if (imageA.getIndexLable() % 5 == 2) {    PropertyValuesHolder imageA_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue);    PropertyValuesHolder imageA_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue);    imageAAnimator=ObjectAnimator.ofPropertyValuesHolder(imageA,imageA_translate_x,imageA_translate_y,imageA_scale_x,imageA_scale_y);  } else {    imageAAnimator=ObjectAnimator.ofPropertyValuesHolder(imageA,imageA_translate_x,imageA_translate_y);  }  ObjectAnimator imageBAnimator=null;  PropertyValuesHolder imageB_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageA.getIndexLable()]);  PropertyValuesHolder imageB_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageA.getIndexLable()]);  if (imageB.getIndexLable() % 5 == 3) {    PropertyValuesHolder imageB_scale_x=PropertyValuesHolder.ofFloat("scaleX",1);    PropertyValuesHolder imageB_scale_y=PropertyValuesHolder.ofFloat("scaleY",1);    imageBAnimator=ObjectAnimator.ofPropertyValuesHolder(imageB,imageB_translate_x,imageB_translate_y,imageB_scale_x,imageB_scale_y);  } else   if (imageB.getIndexLable() % 5 == 2) {    PropertyValuesHolder imageB_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue);    PropertyValuesHolder imageB_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue);    imageBAnimator=ObjectAnimator.ofPropertyValuesHolder(imageB,imageB_translate_x,imageB_translate_y,imageB_scale_x,imageB_scale_y);  } else {    imageBAnimator=ObjectAnimator.ofPropertyValuesHolder(imageB,imageB_translate_x,imageB_translate_y);  }  ObjectAnimator imageCAnimator=null;  PropertyValuesHolder imageC_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageB.getIndexLable()]);  PropertyValuesHolder imageC_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageB.getIndexLable()]);  if (imageC.getIndexLable() % 5 == 3) {    PropertyValuesHolder imageC_scale_x=PropertyValuesHolder.ofFloat("scaleX",1);    PropertyValuesHolder imageC_scale_y=PropertyValuesHolder.ofFloat("scaleY",1);    imageCAnimator=ObjectAnimator.ofPropertyValuesHolder(imageC,imageC_translate_x,imageC_translate_y,imageC_scale_x,imageC_scale_y);  } else   if (imageC.getIndexLable() % 5 == 2) {    PropertyValuesHolder imageC_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue);    PropertyValuesHolder imageC_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue);    imageCAnimator=ObjectAnimator.ofPropertyValuesHolder(imageC,imageC_translate_x,imageC_translate_y,imageC_scale_x,imageC_scale_y);  } else {    imageCAnimator=ObjectAnimator.ofPropertyValuesHolder(imageC,imageC_translate_x,imageC_translate_y);  }  ObjectAnimator imageDAnimator=null;  PropertyValuesHolder imageD_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageC.getIndexLable()]);  PropertyValuesHolder imageD_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageC.getIndexLable()]);  if (imageD.getIndexLable() % 5 == 3) {    PropertyValuesHolder imageD_scale_x=PropertyValuesHolder.ofFloat("scaleX",1);    PropertyValuesHolder imageD_scale_y=PropertyValuesHolder.ofFloat("scaleY",1);    imageDAnimator=ObjectAnimator.ofPropertyValuesHolder(imageD,imageD_translate_x,imageD_translate_y,imageD_scale_x,imageD_scale_y);  } else   if (imageD.getIndexLable() % 5 == 2) {    PropertyValuesHolder imageD_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue);    PropertyValuesHolder imageD_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue);    imageDAnimator=ObjectAnimator.ofPropertyValuesHolder(imageD,imageD_translate_x,imageD_translate_y,imageD_scale_x,imageD_scale_y);  } else {    imageDAnimator=ObjectAnimator.ofPropertyValuesHolder(imageD,imageD_translate_x,imageD_translate_y);  }  ObjectAnimator imageEAnimator=null;  PropertyValuesHolder imageE_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageD.getIndexLable()]);  PropertyValuesHolder imageE_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageD.getIndexLable()]);  if (imageE.getIndexLable() % 5 == 3) {    PropertyValuesHolder imageE_scale_x=PropertyValuesHolder.ofFloat("scaleX",1);    PropertyValuesHolder imageE_scale_y=PropertyValuesHolder.ofFloat("scaleY",1);    imageEAnimator=ObjectAnimator.ofPropertyValuesHolder(imageE,imageE_translate_x,imageE_translate_y,imageE_scale_x,imageE_scale_y);  } else   if (imageE.getIndexLable() % 5 == 2) {    PropertyValuesHolder imageE_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue);    PropertyValuesHolder imageE_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue);    imageEAnimator=ObjectAnimator.ofPropertyValuesHolder(imageE,imageE_translate_x,imageE_translate_y,imageE_scale_x,imageE_scale_y);  } else {    imageEAnimator=ObjectAnimator.ofPropertyValuesHolder(imageE,imageE_translate_x,imageE_translate_y);  }  setRightIndex();  AnimatorSet set=new AnimatorSet();  set.playTogether(imageAAnimator,imageBAnimator,imageCAnimator,imageDAnimator,imageEAnimator);  set.setDuration(mDuration);  set.start();}  }
class C{  public void testPosNegFirstShorter(){  String numA="293478573489347658763745839457637";  String numB="-2837462783428374767845648748973847593874837948575684767";  String res="-2837462783428374767845615168483972194300564226167553532";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public Months negated(){  return Months.months(FieldUtils.safeNegate(getValue()));}  }
class C{  public String createQuota(String path,Long... thresholds) throws IsilonException {  IsilonSmartQuota quota;  if (thresholds != null && thresholds.length > 0) {    quota=constructIsilonSmartQuotaObjectWithThreshold(path,"directory",null,false,false,thresholds);    quota.setContainer(true);  } else {    quota=new IsilonSmartQuota(path);  }  sLogger.debug("IsilonApi createQuota {} - start",path);  String quotaId=create(_baseUrl.resolve(URI_QUOTAS),"quota",quota);  sLogger.debug("IsilonApi createQuota {} - complete",path);  return quotaId;}  }
class C{  private void validateTableMetaData_allSystemTables(String tableNamePattern) throws Exception {  Set<String> expectedTables=new HashSet<>(Arrays.asList("RDB$FIELDS","RDB$GENERATORS","RDB$ROLES","RDB$DATABASE","RDB$TRIGGERS"));  Map<TableMetaData,Object> rules=getDefaultValueValidationRules();  rules.put(TableMetaData.TABLE_TYPE,SYSTEM_TABLE);  try (ResultSet tables=dbmd.getTables(null,null,tableNamePattern,new String[]{SYSTEM_TABLE})){    while (tables.next()) {      String tableName=tables.getString(TableMetaData.TABLE_NAME.name());      assertTrue("TABLE_NAME is not allowed to be null or empty",tableName != null && tableName.length() > 0);      expectedTables.remove(tableName);      if (!(tableName.startsWith("RDB$") || tableName.startsWith("MON$") || tableName.startsWith("SEC$"))) {        fail("Only expect tablenames starting with RDB$ or MON$, retrieved " + tableName);      }      validateRowValues(tables,rules);    }    assertTrue("getTables() did not return some expected tables: " + expectedTables,expectedTables.isEmpty());  } }  }
class C{  public CompoundVariation(){  super();  operators=new ArrayList<Variation>();}  }
class C{  public boolean isClear(){  return this.opType == OP_TYPE_CLEAR;}  }
class C{  public Driver() throws SQLException {}  }
class C{  public void afterLast() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public static String sign(String signingString,PrivateKey privateKey) throws InvalidKeyException, SignatureException {  byte[] bytes=signingString.getBytes(StandardCharsets.UTF_8);  Signature sig;  try {    sig=Signature.getInstance(SHA256_WITH_RSA);  } catch (  NoSuchAlgorithmException e) {    throw new IllegalArgumentException("An error occurred while getting the signature algorithm",e);  }  sig.initSign(privateKey);  sig.update(bytes);  return Hex.encodeHexString(sig.sign());}  }
class C{  public void testRecognizeOpenInternet() throws Exception {  Response testIResponse1=MessageFactory.create3489BindingResponse(discovererAddress,responseServerAddress,responseServerAddress);  Response testIResponse2=MessageFactory.create3489BindingResponse(discovererAddress,responseServerAddress,responseServerAddress);  responseServer.addMessage(testIResponse1);  responseServer.addMessage(testIResponse2);  StunDiscoveryReport expectedReturn=new StunDiscoveryReport();  expectedReturn.setNatType(StunDiscoveryReport.OPEN_INTERNET);  expectedReturn.setPublicAddress(discovererAddress);  StunDiscoveryReport actualReturn=stunAddressDiscoverer.determineAddress();  assertEquals("The StunAddressDiscoverer failed for a no-udp environment.",expectedReturn,actualReturn);}  }
class C{  protected boolean changed(MapPropertySource mp1,MapPropertySource mp2){  if (mp1 == mp2)   return false;  if (mp1 == null && mp2 != null || mp1 != null && mp2 == null)   return true;  Map<String,Object> s1=mp1.getSource();  Map<String,Object> s2=mp2.getSource();  return s1 == null ? s2 != null : !s1.equals(s2);}  }
class C{  private void createAnnotatedMap(HashMap<Class<? extends Annotation>,Set<Class<?>>> annotatedMap,Set<Class<?>> annotatedSet){  if (annotatedSet != null && !annotatedSet.isEmpty()) {    Iterator<Class<?>> iterator=annotatedSet.iterator();    WebConfiguration webConfig=WebConfiguration.getInstance();    boolean annotationScanPackagesSet=webConfig.isSet(AnnotationScanPackages);    String[] annotationScanPackages=null;    if (annotationScanPackagesSet) {      annotationScanPackages=webConfig.getOptionValue(AnnotationScanPackages).split("\\s+");    }    while (iterator.hasNext()) {      try {        Class<?> clazz=iterator.next();        Annotation[] annotations=clazz.getAnnotations();        for (        Annotation annotation : annotations) {          Class<? extends Annotation> annoType=annotation.annotationType();          if (FACES_ANNOTATION_TYPE.contains(annoType)) {            Set<Class<?>> classes=annotatedMap.get(annoType);            if (classes == null) {              classes=new HashSet<>();              annotatedMap.put(annoType,classes);            }            if (annotationScanPackagesSet) {              if (matchesAnnotationScanPackages(clazz,annotationScanPackages)) {                classes.add(clazz);              }            } else {              classes.add(clazz);            }          }        }      } catch (      NoClassDefFoundError ncdfe) {      }    }  }}  }
class C{  public static final CButton createExportButton(String text){  AppsAction aa=new AppsAction(A_EXPORT,null,text);  CButton button=(CButton)aa.getButton();  button.setMargin(s_insets);  return button;}  }
class C{  public void removeListener(mxIEventListener listener){  eventSource.removeListener(listener);}  }
class C{  @Nullable private InputStream sendResourceRequest(String name){  assert !Thread.holdsLock(mux);  long endTime=computeEndTime(p2pTimeout);  Collection<UUID> nodeListCp;  Map<UUID,IgniteUuid> nodeLdrMapCp;synchronized (mux) {    if (missedRsrcs != null && missedRsrcs.contains(name))     return null;    nodeListCp=singleNode ? nodeList : new LinkedList<>(nodeList);    nodeLdrMapCp=singleNode ? nodeLdrMap : new HashMap<>(nodeLdrMap);  }  for (  UUID nodeId : nodeListCp) {    if (nodeId.equals(ctx.discovery().localNode().id()))     continue;    IgniteUuid ldrId=nodeLdrMapCp.get(nodeId);    ClusterNode node=ctx.discovery().node(nodeId);    if (node == null) {      if (log.isDebugEnabled())       log.debug("Found inactive node in class loader (will skip): " + nodeId);      continue;    }    try {      GridDeploymentResponse res=comm.sendResourceRequest(name,ldrId,node,endTime);      if (res == null) {        U.warn(log,"Failed to get resource from node (is node alive?) [nodeId=" + node.id() + ", clsLdrId="+ ldrId+ ", resName="+ name+ ", parentClsLdr="+ getParent()+ ']');      } else       if (!res.success()) {synchronized (mux) {          if (missedRsrcs != null)           missedRsrcs.add(name);        }        if (!quiet) {          if (log.isInfoEnabled())           log.info("Failed to get resource from node [nodeId=" + node.id() + ", clsLdrId="+ ldrId+ ", resName="+ name+ ", parentClsLdr="+ getParent()+ ", msg="+ res.errorMessage()+ ']');        } else         if (log.isDebugEnabled())         log.debug("Failed to get resource from node [nodeId=" + node.id() + ", clsLdrId="+ ldrId+ ", resName="+ name+ ", parentClsLdr="+ getParent()+ ", msg="+ res.errorMessage()+ ']');        return null;      } else {        return new ByteArrayInputStream(res.byteSource().internalArray(),0,res.byteSource().size());      }    } catch (    IgniteCheckedException e) {      if (Thread.currentThread().isInterrupted()) {        if (!quiet)         U.error(log,"Failed to get resource probably due to task/job cancellation: " + name,e); else         if (log.isDebugEnabled())         log.debug("Failed to get resource probably due to task/job cancellation: " + name);      } else {        if (!quiet)         U.warn(log,"Failed to get resource from node (is node alive?) [nodeId=" + node.id() + ", clsLdrId="+ ldrId+ ", resName="+ name+ ", parentClsLdr="+ getParent()+ ", err="+ e+ ']'); else         if (log.isDebugEnabled())         log.debug("Failed to get resource from node (is node alive?) [nodeId=" + node.id() + ", clsLdrId="+ ldrId+ ", resName="+ name+ ", parentClsLdr="+ getParent()+ ", err="+ e+ ']');      }    }  }  return null;}  }
class C{  public Future<Pipeline> shutdownAfterSequenceNumber(long seqno) throws InterruptedException, ReplicatorException {  ArrayList<Future<ReplDBMSHeader>> taskShutdownFutures=new ArrayList<Future<ReplDBMSHeader>>();  for (int i=0; i < stages.size(); i++) {    taskShutdownFutures.add(stages.get(i).watchForProcessedSequenceNumber(seqno,true));  }  return scheduleWait("Offline at sequence number: " + seqno,taskShutdownFutures);}  }
class C{  public void testAddCertificate1() throws Exception {  Identity i=new IdentityStub("iii");  PublicKeyStub pk1=new PublicKeyStub("kkk","fff",new byte[]{1,2,3,4,5});  i.setPublicKey(pk1);  CertificateStub c1=new CertificateStub("fff",null,null,pk1);  i.addCertificate(c1);  assertSame(c1,i.certificates()[0]);  try {    i.addCertificate(new CertificateStub("ccc",null,null,new PublicKeyStub("k2","fff",new byte[]{6,7,8,9,0})));    fail("KeyManagementException should be thrown");  } catch (  KeyManagementException ok) {  }}  }
class C{  public static Collection<MAsset> forASI(Properties ctx,int M_Product_ID,int M_ASI_ID){  ArrayList<Object> params=new ArrayList<Object>();  String whereClause=COLUMNNAME_M_AttributeSetInstance_ID + "=?";  params.add(M_ASI_ID);  if (M_Product_ID > 0) {    whereClause+=" AND " + COLUMNNAME_M_Product_ID + "=?";    params.add(M_Product_ID);  }  return new Query(ctx,MAsset.Table_Name,whereClause,null).setParameters(params).list();}  }
class C{  public static void main(String[] argv){  try {    if (argv.length == 0) {      System.out.println("Please specify a set of instances.");      return;    }    int current=Integer.parseInt(argv[0]);    int max=current;    for (int i=1; i < argv.length; i++) {      current=Integer.parseInt(argv[i]);      if (current > max) {        max=current;      }    }    DiscreteEstimator newEst=new DiscreteEstimator(max + 1,true);    for (int i=0; i < argv.length; i++) {      current=Integer.parseInt(argv[i]);      System.out.println(newEst);      System.out.println("Prediction for " + current + " = "+ newEst.getProbability(current));      newEst.addValue(current,1);    }    DiscreteEstimator.testAggregation();  } catch (  Exception e) {    System.out.println(e.getMessage());  }}  }
class C{  private static int[] normalForm(int[] a){  int d=computeDegree(a);  if (d == -1) {    return new int[1];  }  if (a.length == d + 1) {    return IntUtils.clone(a);  }  int[] result=new int[d + 1];  System.arraycopy(a,0,result,0,d + 1);  return result;}  }
class C{  private synchronized void recordShow(IConnection conn,String broadcastid,String streamName,Long flvRecordingMetaDataId,boolean isScreenData,Boolean isInterview) throws Exception {  try {    log.debug("Recording show for: " + conn.getScope().getContextPath());    log.debug("Name of CLient and Stream to be recorded: " + broadcastid);    log.debug("Scope " + conn);    log.debug("Scope " + conn.getScope());    ClientBroadcastStream stream=(ClientBroadcastStream)scopeApplicationAdapter.getBroadcastStream(conn.getScope(),broadcastid);    if (stream == null) {      log.debug("Unable to get stream: " + streamName);      return;    }    if (isScreenData) {      StreamVideoListener streamScreenListener=new StreamVideoListener(streamName,conn.getScope(),flvRecordingMetaDataId,isScreenData,isInterview,flvRecordingMetaDataDao);      streamListeners.put(flvRecordingMetaDataId,streamScreenListener);      stream.addStreamListener(streamScreenListener);    } else {      log.debug("### stream " + stream);      log.debug("### streamName " + streamName);      log.debug("### conn.getScope() " + conn.getScope());      log.debug("### flvRecordingMetaDataId " + flvRecordingMetaDataId);      log.debug("### isScreenData " + isScreenData);      log.debug("### isInterview " + isInterview);      StreamAudioListener streamAudioListener=new StreamAudioListener(streamName,conn.getScope(),flvRecordingMetaDataId,isScreenData,isInterview,flvRecordingMetaDeltaDao,flvRecordingMetaDataDao);      streamListeners.put(flvRecordingMetaDataId,streamAudioListener);      stream.addStreamListener(streamAudioListener);    }  } catch (  Exception e) {    log.error("Error while saving stream: " + streamName,e);  }}  }
class C{  public void delete(RoutingContext ctx){  final String id=ctx.request().getParam("id");  moduleManager.delete(id,null);}  }
class C{  public void testSpans3(){  final JPanel panel=new JPanel(new GridBagLayout());  final JButton button=new JButton();  button.setPreferredSize(new Dimension(50,10));  final JTextField field1=new JTextField();  field1.setPreferredSize(new Dimension(110,10));  GridBagConverter converter=new GridBagConverter();  converter.addComponent(button,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  converter.addComponent(field1,new GridConstraints(0,1,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  applyConversionResults(panel,converter);  final Dimension preferredSize=panel.getPreferredSize();  assertEquals(160,preferredSize.width);  panel.setSize(new Dimension(500,100));  panel.doLayout();  assertEquals(50,button.getWidth());  assertEquals(450,field1.getWidth());}  }
class C{  public boolean isIPAddressInUse(String vcenter,String datacenter,String cluster,String vlan,String ipAddress) throws Exception {  logger.debug("vcenter: " + vcenter + "  datacenter: "+ datacenter+ "  cluster: "+ cluster+ "  vlan: "+ vlan+ "  ipAddress: "+ ipAddress);  if (vcenter == null) {    throw new Exception("vCenter not defined");  }  if (datacenter == null) {    throw new Exception("datacenter not defined");  }  if (cluster == null) {    throw new Exception("cluster not defined");  }  if (vlan == null) {    throw new Exception("vlan not defined");  }  if (ipAddress == null) {    throw new Exception("ipaddress not defined");  }  boolean inUse=true;  String query1="SELECT TKEY from VLAN WHERE NAME = ? AND CLUSTER_TKEY = ?";  String query2="SELECT IN_USE FROM IPPOOL WHERE IP_ADDRESS = ? AND VLAN_TKEY = ?";  try (Connection con=getDatasource().getConnection()){    int cluster_tkey=getClusterTKey(con,vcenter,datacenter,cluster);    if (cluster_tkey == -1) {      logger.error("Failed to validate IP address. Unknown cluster " + cluster);      String message=Messages.get(locale,"error_db_validate_ip_unknown_cluster",cluster);      throw new Exception(message);    }    logger.debug("retrieved tkey " + cluster_tkey + " for cluster "+ cluster);    int vlan_tkey=-1;    try (PreparedStatement stmt=con.prepareStatement(query1)){      stmt.setString(1,vlan);      stmt.setInt(2,cluster_tkey);      ResultSet rs=stmt.executeQuery();      while (rs.next()) {        vlan_tkey=rs.getInt("TKEY");      }    }     if (vlan_tkey == -1) {      logger.error("Failed to validate IP address. Unknown VLAN " + vlan);      String message=Messages.get(locale,"error_db_validate_ip_unknown_vlan",vlan);      throw new Exception(message);    }    logger.debug("retrieved tkey " + vlan_tkey + " for VLAN "+ vlan);    boolean foundEntry=false;    try (PreparedStatement stmt=con.prepareStatement(query2)){      stmt.setString(1,ipAddress);      stmt.setInt(2,vlan_tkey);      ResultSet rs=stmt.executeQuery();      while (rs.next()) {        inUse=rs.getBoolean("IN_USE");        foundEntry=true;      }    }     if (!foundEntry) {      logger.error("Failed to validate IP address " + ipAddress + ". Not found in VLAN "+ vlan);      String message=Messages.get(locale,"error_db_validate_ip_not_found",new Object[]{ipAddress,vlan});      throw new Exception(message);    }  }   logger.debug("In-Use-Status of IP address: " + ipAddress + " is "+ inUse);  return inUse;}  }
class C{  public static void main(String[] args){  weka.core.logging.Logger.log(weka.core.logging.Logger.Level.INFO,"Logging started");  try {    for (int i=0; i < args.length; i++) {      if (args[i].equals("-offline")) {        m_offline=true;        String[] temp=new String[args.length - 1];        if (i > 0) {          System.arraycopy(args,0,temp,0,i);        }        System.arraycopy(args,i + 1,temp,i,args.length - (i + 1));        args=temp;      }    }    establishCacheIfNeeded(System.out);    checkForNewPackages(System.out);    if (args.length == 0 || args[0].equalsIgnoreCase("-h") || args[0].equalsIgnoreCase("-help")) {      printUsage();      return;    }    if (args[0].equals("-package-info")) {      if (args.length < 3) {        printUsage();        return;      }      if (args[1].equals("archive")) {        printPackageArchiveInfo(args[2]);      } else       if (args[1].equals("installed")) {        printInstalledPackageInfo(args[2]);      } else       if (args[1].equals("repository")) {        String version="Latest";        if (args.length == 4) {          version=args[3];        }        try {          printRepositoryPackageInfo(args[2],version);        } catch (        Exception ex) {          System.out.println("[WekaPackageManager] Nothing known about package " + args[2] + " at the repository!");        }      } else {        System.err.println("[WekaPackageManager] Unknown argument " + args[2]);        printUsage();        return;      }    } else     if (args[0].equals("-install-package")) {      String targetLowerCase=args[1].toLowerCase();      if (targetLowerCase.startsWith("http://") || targetLowerCase.startsWith("https://")) {        URL packageURL=new URL(args[1]);        installPackageFromURL(packageURL,System.out);      } else       if (targetLowerCase.endsWith(".zip")) {        installPackageFromArchive(args[1],System.out);      } else {        String version="Latest";        if (args.length == 3) {          version=args[2];        }        installPackageFromRepository(args[1],version,false);      }    } else     if (args[0].equals("-uninstall-package")) {      if (args.length < 2) {        printUsage();        return;      }      boolean force=false;      if (args.length == 3) {        if (args[2].equals("-force")) {          force=true;        }      }      removeInstalledPackage(args[1],force,System.out);      return;    } else     if (args[0].equals("-list-packages")) {      if (args.length < 2) {        printUsage();        return;      }      listPackages(args[1]);    } else     if (args[0].equals("-toggle-load-status")) {      if (args.length == 1) {        printUsage();        return;      }      List<String> toToggle=new ArrayList<String>();      for (int i=1; i < args.length; i++) {        toToggle.add(args[i].trim());      }      if (toToggle.size() >= 1) {        toggleLoadStatus(toToggle);      }    } else     if (args[0].equals("-refresh-cache")) {      refreshCache(System.out);    } else {      System.err.println("Unknown option: " + args[0]);      printUsage();    }    System.exit(0);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public static OptionBuilder hasOptionalArgs(){  OptionBuilder.numberOfArgs=Option.UNLIMITED_VALUES;  OptionBuilder.optionalArg=true;  return instance;}  }
class C{  private ArrayList<ReferenceContainer<WordReference>> selectContainers(final byte[] hash,final byte[] limitHash,final int maxContainerCount,final int maxReferenceCount,final int maxtime) throws IOException {  final ArrayList<ReferenceContainer<WordReference>> containers=selectContainers(hash,limitHash,maxContainerCount,maxReferenceCount,maxtime,false);  return containers;}  }
class C{  @Override public Statement createStatement(int resultSetType,int resultSetConcurrency,int resultSetHoldability) throws SQLException {  try {    int id=getNextId(TraceObject.STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("Statement",TraceObject.STATEMENT,id,"createStatement(" + resultSetType + ", "+ resultSetConcurrency+ ", "+ resultSetHoldability+ ")");    }    checkTypeConcurrency(resultSetType,resultSetConcurrency);    checkHoldability(resultSetHoldability);    checkClosed();    return new JdbcStatement(this,id,resultSetType,resultSetConcurrency,false);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public boolean isSignificant(){  int totalSamples=0;  int activeBuckets=0;  for (int i=0; i < buckets.length; i++) {    totalSamples+=numSamples[i];    if (numSamples[i] > 0) {      activeBuckets++;    }  }  return activeBuckets >= numSignificantBuckets || totalSamples >= numSignificantSamples;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:15.510 -0500",hash_original_method="B96EF178F3ED1A0DFACDA94649407E5C",hash_generated_method="388BFD43642BF851D61AF8A45943A910") public void close(){}  }
class C{  public Airborne(String sidc){  super(sidc,1);}  }
class C{  public static boolean isServerError(int status){  return (status >= 500 && status < 600);}  }
class C{  public static void write32bit(int value,byte[] code,int index){  code[index]=(byte)(value >>> 24);  code[index + 1]=(byte)(value >>> 16);  code[index + 2]=(byte)(value >>> 8);  code[index + 3]=(byte)value;}  }
class C{  public DateTimeFormatterBuilder appendDayOfWeekShortText(){  return appendShortText(DateTimeFieldType.dayOfWeek());}  }
class C{  protected void beginDrawing(DrawContext dc){  GL2 gl=dc.getGL().getGL2();  int attrMask=GL2.GL_CURRENT_BIT | GL2.GL_COLOR_BUFFER_BIT;  gl.glPushAttrib(attrMask);  if (!dc.isPickingMode()) {    dc.beginStandardLighting();    gl.glEnable(GL.GL_BLEND);    OGLUtil.applyBlending(gl,false);    gl.glEnable(GL2.GL_NORMALIZE);  }  gl.glMatrixMode(GL2.GL_MODELVIEW);  Matrix matrix=dc.getGlobe().computeSurfaceOrientationAtPosition(this.position);  matrix=dc.getView().getModelviewMatrix().multiply(matrix);  double[] matrixArray=new double[16];  matrix.toArray(matrixArray,0,false);  gl.glLoadMatrixd(matrixArray,0);}  }
class C{  public static Long toLong(long l){  return Long.valueOf(l);}  }
class C{  private Bitmap drawableToBitmap(Drawable drawable){  if (drawable instanceof BitmapDrawable) {    return ((BitmapDrawable)drawable).getBitmap();  }  int width=drawable.getIntrinsicWidth();  width=width > 0 ? width : 1;  int height=drawable.getIntrinsicHeight();  height=height > 0 ? height : 1;  Bitmap bitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(bitmap);  drawable.setBounds(0,0,canvas.getWidth(),canvas.getHeight());  drawable.draw(canvas);  return bitmap;}  }
class C{  private String testConfigurationFile(String fileName){  File file=new File(fileName);  final String portStr=System.getProperty("rmi.port","12424");  final int port=Integer.parseInt(portStr);  return testConfiguration(file,port + testPort++);}  }
class C{  private void paintXPBackground(Graphics g,JComponent c){  if (spinner != null && !spinner.isEnabled())   __Icon9Factory__.getInstance().getSpinnerDisableBg().draw((Graphics2D)g,0,0,c.getWidth(),c.getHeight()); else   __Icon9Factory__.getInstance().getSpinnerBg().draw((Graphics2D)g,0,0,c.getWidth(),c.getHeight());}  }
class C{  public static boolean isToplevelAnonymousClass(Scope s){  if (s instanceof Class) {    Class td=(Class)s;    return td.isAnonymous() && td.isToplevel();  } else {    return false;  }}  }
class C{  public static String matchObj(String path,Object input,Object expected) throws Exception {  return matchObj(path,input,expected,DEFAULT_DELTA);}  }
class C{  public void newMessage(Message m){  if (isWarmup()) {    addWarmupID(m.getId());    return;  }  this.creationInfos.put(m.getId(),new InfoTuple(getSimTime(),m.getFrom().getLocation().clone(),m.getTo().getLocation().clone()));}  }
class C{  protected StateRootImpl(){  super();}  }
class C{  public void insert(final AbstractInsnNode location,final AbstractInsnNode insn){  ++size;  AbstractInsnNode next=location.next;  if (next == null) {    last=insn;  } else {    next.prev=insn;  }  location.next=insn;  insn.next=next;  insn.prev=location;  cache=null;  insn.index=0;}  }
class C{  public RGBImage(int[] rgb,int width,int height){  super(null);  this.width=width;  this.height=height;  this.rgb=rgb;}  }
class C{  public UnManagedSMBFileShare(){}  }
class C{  public GPUImageFilterGroup(){  this(null);}  }
class C{  public Ed25519GroupElement negate(){  if (this.coordinateSystem != CoordinateSystem.P3) {    throw new UnsupportedOperationException();  }  return Ed25519Group.ZERO_P3.subtract(this.toCached()).toP3();}  }
class C{  public boolean createHostPort(final String xivSystem,final String hostName,final String hostPort,final String hostPortType) throws Exception {  boolean isAvailable=findAvailability(MessageFormat.format(HOST_PORT_INSTANCE_URL,xivSystem,hostPortType,hostName,hostPort));  if (isAvailable) {    _log.info("HostPort {} already exist on XIV {}. Skipping creation!",hostPort,xivSystem);  } else {    final String body=MessageFormat.format(HOST_PORT_CREATE_BODY,hostName,hostPort,hostPortType);    ResponseValidator failureStatus=executePOSTRequest(xivSystem,MessageFormat.format(HOST_PORT_URL,xivSystem),body);    if (failureStatus.isFailed()) {      throw XIVRestException.exceptions.hostPortCreationFailure(xivSystem,hostName,hostPort,failureStatus.toString());    }  }  return isAvailable;}  }
class C{  public Object put(Object key,Object value){  Object k=maskNull(key);  Object[] tab=table;  int len=tab.length;  int i=hash(k,len);  Object item;  while ((item=tab[i]) != null) {    if (item == k) {      Object oldValue=tab[i + 1];      tab[i + 1]=value;      return oldValue;    }    i=nextKeyIndex(i,len);  }  modCount++;  tab[i]=k;  tab[i + 1]=value;  if (++size >= threshold)   resize(len);  return null;}  }
class C{  public void testUpperCaseFilter() throws IOException {  Analyzer a=new UpperCaseWhitespaceAnalyzer();  assertAnalyzesTo(a,"AbaCaDabA",new String[]{"ABACADABA"});  assertAnalyzesTo(a,"\ud801\udc3e\ud801\udc3e\ud801\udc3e\ud801\udc3e",new String[]{"\ud801\udc16\ud801\udc16\ud801\udc16\ud801\udc16"});  assertAnalyzesTo(a,"AbaCa\ud801\udc3eDabA",new String[]{"ABACA\ud801\udc16DABA"});  assertAnalyzesTo(a,"AbaC\uD801AdaBa",new String[]{"ABAC\uD801ADABA"});  assertAnalyzesTo(a,"AbaC\uDC16AdaBa",new String[]{"ABAC\uDC16ADABA"});  a.close();}  }
class C{  public void testCase4(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=1;  int bSign=-1;  byte rBytes[]={11,22,33,44,55,66,77,11,22,33};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(1,result.signum());}  }
class C{  public void uninstallUI(JComponent c){  uninstallComponents();  optionPane.setLayout(null);  uninstallKeyboardActions();  uninstallListeners();  uninstallDefaults();  optionPane=null;}  }
class C{  @Override public int hashCode(){  return nickname().hashCode();}  }
class C{  public List<byte[]> hmget(final byte[] key,final byte[]... fields){  checkIsInMulti();  client.hmget(key,fields);  return client.getBinaryMultiBulkReply();}  }
class C{  private synchronized void removeTLCStatusSource(Model model){  String name=model.getLaunchConfiguration().getFile().getName();  this.sources.remove(name);  this.providers.remove(name);  printStats();}  }
class C{  public ChoiceStateData(StateHolder<S,E> state,Guard<S,E> guard){  Assert.notNull(state,"Holder must be set");  this.state=state;  this.guard=guard;}  }
class C{  public void draw(Canvas c,Rect bounds){  mCirclePaint.setColor(mBackgroundColor);  mCirclePaint.setAlpha(mAlpha);  c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mArcPaint.setColor(mColors[mColorIndex]);  mArcPaint.setAlpha(mAlpha);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mArcPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);}  }
class C{  public boolean writeMyRasterToFile(String filename,String filetype){  log.info("Writing raster image to " + filename);  boolean b=false;  File f1=new File(filename);  try {    b=ImageIO.write(this.bufferedImage,filetype,f1);  } catch (  IOException e1) {    e1.printStackTrace();  }  if (b) {    log.info("   ... file written sucessfully.");  } else   log.warn("   ... file was unsucessfully written.");  return b;}  }
class C{  public void show(boolean animate){  show(animate,fadeIn);}  }
class C{  public Object convert(Class type,Object value){  if (value == null)   return null;  if (value instanceof Date)   return value;  return DateUtils.getDate(value.toString());}  }
class C{  public void addFooterView(View view,boolean reverse){  if (null == view) {    throw new IllegalArgumentException("the view to add must not be null!");  }  final FixedViewInfo info=new FixedViewInfo();  info.view=view;  info.viewType=BASE_FOOTER_VIEW_TYPE + mFooterViewInfos.size();  mFooterViewInfos.add(info);  if (reverse) {    for (int i=0; i < mFooterViewInfos.size(); i++) {      FixedViewInfo fixedViewInfo=mFooterViewInfos.get(i);      fixedViewInfo.viewType=BASE_FOOTER_VIEW_TYPE + mFooterViewInfos.size() - i - 1;    }  }  notifyDataSetChanged();}  }
class C{  @Override public void onUserSelected(User user){  mUserManager.switchUser(user);  Intent intent=new Intent(getApplicationContext(),MainActivity.class);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  startActivity(intent);  setResult(Activity.RESULT_OK);  finish();}  }
class C{  private void pushRun(int runBase,int runLen){  this.runBase[stackSize]=runBase;  this.runLen[stackSize]=runLen;  stackSize++;}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public void updateAllTableRows(int columnId){  ((ObdItemTableModel)tblPids.getPvModel()).updateAllRows(columnId);}  }
class C{  private TransportNetwork buildNetworkFromManifest(String networkId){  String manifestFileName=GTFSCache.cleanId(networkId) + ".json";  File manifestFile=new File(cacheDir,manifestFileName);  if (!manifestFile.exists() && sourceBucket != null) {    LOG.info("Manifest file not found locally, downloading from S3");    s3.getObject(new GetObjectRequest(sourceBucket,manifestFileName),manifestFile);  }  BundleManifest manifest;  try {    manifest=JsonUtilities.objectMapper.readValue(manifestFile,BundleManifest.class);  } catch (  IOException e) {    LOG.error("Error reading manifest",e);    return null;  }  TransportNetwork network=new TransportNetwork();  network.streetLayer=new StreetLayer(new TNBuilderConfig());  network.streetLayer.loadFromOsm(osmCache.get(manifest.osmId));  network.streetLayer.parentNetwork=network;  network.streetLayer.indexStreets();  network.transitLayer=new TransitLayer();  manifest.gtfsIds.stream().map(null).forEach(null);  network.transitLayer.parentNetwork=network;  network.streetLayer.associateStops(network.transitLayer);  network.rebuildTransientIndexes();  return network;}  }
class C{  public T caseEntryEvent(EntryEvent object){  return null;}  }
class C{  @Deprecated public boolean allowThreadSuspension(boolean b){  return true;}  }
class C{  public String toString(){  return image;}  }
class C{  @Override @SuppressWarnings("unchecked") public synchronized <T>T[] toArray(T[] contents){  if (elementCount > contents.length) {    throw new RuntimeException("Collection.toArray(T[]) requires an array of the same size as the collection to be passed as a parameter. ");  }  System.arraycopy(elementData,0,contents,0,elementCount);  if (elementCount < contents.length) {    contents[elementCount]=null;  }  return contents;}  }
class C{  @Override public String globalInfo(){  return "Outputs the received results in arff format to " + "a Writer. All results must be received before the instances can be " + "written out.";}  }
class C{  public void clear(){  int max=bits.length;  for (int i=0; i < max; i++) {    bits[i]=0;  }}  }
class C{  public boolean isEncodeDefaults(){  return encodeDefaults;}  }
class C{  static void initPlanCalcScore(MatsimConfigType matsim4urbansimConfigPart1,Config config){  log.info("Setting PlanCalcScore to config...");  String activityType_0=matsim4urbansimConfigPart1.getActivityType0();  String activityType_1=matsim4urbansimConfigPart1.getActivityType1();  ActivityParams homeActivity=new ActivityParams(activityType_0);  homeActivity.setTypicalDuration(matsim4urbansimConfigPart1.getHomeActivityTypicalDuration().intValue());  ActivityParams workActivity=new ActivityParams(activityType_1);  workActivity.setTypicalDuration(matsim4urbansimConfigPart1.getWorkActivityTypicalDuration().intValue());  workActivity.setOpeningTime(matsim4urbansimConfigPart1.getWorkActivityOpeningTime().intValue());  workActivity.setLatestStartTime(matsim4urbansimConfigPart1.getWorkActivityLatestStartTime().intValue());  config.planCalcScore().addActivityParams(homeActivity);  config.planCalcScore().addActivityParams(workActivity);  config.planCalcScore().setBrainExpBeta(1.);  log.info("...done!");}  }
class C{  public void addEllipse(float latPoint,float lonPoint,float majorAxisSpan,float minorAxisSpan,int units,float rotationAngle,LinkProperties properties) throws IOException {  LinkEllipse.write(latPoint,lonPoint,majorAxisSpan,minorAxisSpan,units,rotationAngle,properties,link.dos);}  }
class C{  public void startDocument() throws SAXException {}  }
class C{  public static boolean waitForCondition(GridAbsPredicate cond,long timeout) throws IgniteInterruptedCheckedException {  long curTime=U.currentTimeMillis();  long endTime=curTime + timeout;  if (endTime < 0)   endTime=Long.MAX_VALUE;  while (curTime < endTime) {    if (cond.apply())     return true;    U.sleep(DFLT_BUSYWAIT_SLEEP_INTERVAL);    curTime=U.currentTimeMillis();  }  return false;}  }
class C{  public AztecDetectorResult detect() throws NotFoundException {  Point pCenter=getMatrixCenter();  Point[] bullEyeCornerPoints=getBullEyeCornerPoints(pCenter);  extractParameters(bullEyeCornerPoints);  ResultPoint[] corners=getMatrixCornerPoints(bullEyeCornerPoints);  BitMatrix bits=sampleGrid(image,corners[shift % 4],corners[(shift + 3) % 4],corners[(shift + 2) % 4],corners[(shift + 1) % 4]);  return new AztecDetectorResult(bits,corners,compact,nbDataBlocks,nbLayers);}  }
class C{  public void removeSupportedOptions(Set<String> unmatchedProcessorOptions){  unmatchedProcessorOptions.removeAll(supportedOptionNames);}  }
class C{  public static <T>Number count(T[] self,@ClosureParams(FirstParam.Component.class) Closure closure){  return count((Iterable)Arrays.asList(self),closure);}  }
class C{  public head addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @After public void tearDown(){  if (this.system != null) {    this.system.disconnect();  }  this.system=null;}  }
class C{  public BatchDestroyOperation(EntryEventImpl event){  super(event);}  }
class C{  public BusquedaDetalleVO estaSignaturaEntregada(String signatura){  Collection detallesPrestamos=null;  boolean encontrado=false;  BusquedaDetalleVO resultado=null;  if (signatura != null && signatura.trim().length() > 0) {    detallesPrestamos=this.getUnidadesEntregadasLikeSignatura(signatura,DBUtils.CONTIENE_LIKE);    if (detallesPrestamos != null) {      Iterator it=detallesPrestamos.iterator();      while (!encontrado && it.hasNext()) {        BusquedaDetalleVO infoDetallePrestamo=(BusquedaDetalleVO)it.next();        if (infoDetallePrestamo.getSignaturaudoc().equalsIgnoreCase(signatura)) {          encontrado=true;          resultado=infoDetallePrestamo;        }      }    }  }  return resultado;}  }
class C{  public static String of(String classname){  if (classname.equals("void"))   return "V"; else   if (classname.equals("int"))   return "I"; else   if (classname.equals("byte"))   return "B"; else   if (classname.equals("long"))   return "J"; else   if (classname.equals("double"))   return "D"; else   if (classname.equals("float"))   return "F"; else   if (classname.equals("char"))   return "C"; else   if (classname.equals("short"))   return "S"; else   if (classname.equals("boolean"))   return "Z"; else   return "L" + toJvmName(classname) + ";";}  }
class C{  public void stop(){  ThreadUtils.assertOnUiThread();  Log.d(TAG,"Disabling sync");  InvalidationController.get(mContext).stop();  mProfileSyncService.requestStop();  if (AndroidSyncSettings.isMasterSyncEnabled(mContext)) {    AndroidSyncSettings.disableChromeSync(mContext);  }}  }
class C{  @Override public String toString(){  return String.format("%s, bitSize=%d bits, %d members, id=%d",name,bitSize,members.size(),id);}  }
class C{  public static <U,I,F>Function<U,Predicate<I>> withFeatures(FeatureData<I,F,?> featureData){  Set<I> itemsWithFeatures=featureData.getItemsWithFeatures().collect(Collectors.toSet());  return null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Map<String,String> toMap(){  return npv;}  }
class C{  public void sendSipCancel(SipDialogPath dialog) throws PayloadException, NetworkException {  try {    if (dialog.getInvite().getStackTransaction() instanceof ServerTransaction) {      return;    }    SipRequest cancel=SipMessageFactory.createCancel(dialog);    SessionAuthenticationAgent agent=dialog.getAuthenticationAgent();    if (agent != null) {      agent.setProxyAuthorizationHeader(cancel);    }    ClientTransaction transaction=createNewTransaction(cancel);    if (sLogger.isActivated()) {      sLogger.debug(">>> Send SIP CANCEL");    }    if (mSipTraceEnabled) {      System.out.println(">>> " + cancel.getStackMessage().toString());      System.out.println(TRACE_SEPARATOR);    }    transaction.sendRequest();  } catch (  ParseException e) {    throw new PayloadException("Unable to instantiate SIP transaction!",e);  }catch (  SipException e) {    throw new NetworkException("Can't send SIP message!",e);  }}  }
class C{  public void test_query_join_2shards_nothingBoundOnAccessPath() throws Exception {  final Var<?> x=Var.var("x");  final Var<?> y=Var.var("y");  final int startId=1;  final int joinId=2;  final int predId=3;  final int sliceId=4;  final StartOp startOp=new StartOp(new BOp[]{},NV.asMap(new NV[]{new NV(Predicate.Annotations.BOP_ID,startId),new NV(SliceOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER)}));  final Predicate<E> predOp=new Predicate<E>(new IVariableOrConstant[]{x,y},NV.asMap(new NV[]{new NV(Predicate.Annotations.RELATION_NAME,new String[]{namespace}),new NV(Predicate.Annotations.BOP_ID,predId),new NV(Annotations.TIMESTAMP,ITx.READ_COMMITTED),new NV(Predicate.Annotations.REMOTE_ACCESS_PATH,false)}));  final PipelineJoin<E> joinOp=new PipelineJoin<E>(new BOp[]{startOp},new NV(Predicate.Annotations.BOP_ID,joinId),new NV(PipelineJoin.Annotations.PREDICATE,predOp),new NV(Predicate.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.SHARDED));  final PipelineOp query=new SliceOp(new BOp[]{joinOp},NV.asMap(new NV[]{new NV(Predicate.Annotations.BOP_ID,sliceId),new NV(SliceOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER),new NV(PipelineOp.Annotations.SHARED_STATE,true),new NV(PipelineOp.Annotations.REORDER_SOLUTIONS,false),new NV(QueryEngine.Annotations.CHUNK_HANDLER,FederationChunkHandler.TEST_INSTANCE)}));  final IBindingSet[] expected=new IBindingSet[]{new ListBindingSet(new IVariable[]{x,y},new IConstant[]{new Constant<String>("John"),new Constant<String>("Mary")}),new ListBindingSet(new IVariable[]{x,y},new IConstant[]{new Constant<String>("Leon"),new Constant<String>("Paul")}),new ListBindingSet(new IVariable[]{x,y},new IConstant[]{new Constant<String>("Mary"),new Constant<String>("John")}),new ListBindingSet(new IVariable[]{x,y},new IConstant[]{new Constant<String>("Mary"),new Constant<String>("Paul")}),new ListBindingSet(new IVariable[]{x,y},new IConstant[]{new Constant<String>("Paul"),new Constant<String>("Leon")})};  final UUID queryId=UUID.randomUUID();  final IRunningQuery runningQuery=queryEngine.eval(queryId,query,new ListBindingSet());  AbstractQueryEngineTestCase.assertSameSolutionsAnyOrder(expected,runningQuery);  runningQuery.get();  final Map<Integer,BOpStats> statsMap=runningQuery.getStats();{    assertNotNull(statsMap);    assertEquals(3,statsMap.size());    if (log.isInfoEnabled())     log.info(statsMap.toString());  }{    final BOpStats stats=statsMap.get(startId);    assertNotNull(stats);    if (log.isInfoEnabled())     log.info("start: " + stats.toString());    assertEquals(1L,stats.chunksIn.get());    assertEquals(1L,stats.unitsIn.get());    assertEquals(1L,stats.unitsOut.get());    assertEquals(1L,stats.chunksOut.get());  }{    final BOpStats stats=statsMap.get(joinId);    assertNotNull(stats);    if (log.isInfoEnabled())     log.info("join : " + stats.toString());    assertEquals(2L,stats.chunksIn.get());    assertEquals(2L,stats.unitsIn.get());    assertEquals(5L,stats.unitsOut.get());    assertEquals(2L,stats.chunksOut.get());  }{    final BOpStats stats=statsMap.get(sliceId);    assertNotNull(stats);    if (log.isInfoEnabled())     log.info("slice: " + stats.toString());    assertEquals(2L,stats.chunksIn.get());    assertEquals(5L,stats.unitsIn.get());    assertEquals(5L,stats.unitsOut.get());    assertEquals(2L,stats.chunksOut.get());  }}  }
class C{  public static double[] toDoubleArray(char[] array){  double[] result=new double[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(double)array[i];  }  return result;}  }
class C{  public static void openAppDetail(String packageName,Context context){  Intent intent=new Intent();  final int apiLevel=Build.VERSION.SDK_INT;  if (apiLevel >= 9) {    intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);    Uri uri=Uri.fromParts("package",packageName,null);    intent.setData(uri);  } else {    final String appPkgName=(apiLevel == 8 ? "pkg" : "com.android.settings.ApplicationPkgName");    intent.setAction(Intent.ACTION_VIEW);    intent.setClassName("com.android.settings","com.android.settings.InstalledAppDetails");    intent.putExtra(appPkgName,packageName);  }  context.startActivity(intent);}  }
class C{  public ServiceCall<Void> deleteRecognitionJob(String id){  Validator.notNull(id,"id cannot be null");  Request request=RequestBuilder.delete(String.format(PATH_RECOGNITION,id)).build();  return createServiceCall(request,ResponseConverterUtils.getVoid());}  }
class C{  @DELETE @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{snapshot_id}/metadata/{key}") @CheckPermission(roles={Role.SYSTEM_MONITOR,Role.TENANT_ADMIN},acls={ACL.ANY}) public CinderSnapshotMetadata deleteSnapshotMetadataItem(@PathParam("tenant_id") String openstackTenantId,@PathParam("snapshot_id") String snapshotId,@PathParam("key") String key,@Context HttpHeaders header,@HeaderParam("X-Cinder-V1-Call") String isV1Call){  BlockSnapshot snap=findSnapshot(snapshotId,openstackTenantId);  if (snap == null) {    throw APIException.badRequests.parameterIsNotValid(snapshotId);  }  StringMap extensions=snap.getExtensions();  StringMap newExtensions=new StringMap();  String internalKey="METADATA_" + key;  if (extensions != null) {    if (extensions.containsKey(internalKey)) {      extensions.remove(internalKey);      _log.debug("Removing the key {}: ",internalKey);      snap.setExtensions(extensions);      _dbClient.updateObject(snap);      BlockSnapshot snapRag=findSnapshot(snapshotId,openstackTenantId);      return getSnapshotMetadataDetail(snapRag);    } else {      _log.info("Invalid metadata key ={} ",key);      throw APIException.badRequests.parameterIsNotValid(key);    }  }  return getSnapshotMetadataDetail(snap);}  }
class C{  public void copy(int sx,int sy,int sw,int sh,int dx,int dy,int dw,int dh){  g.copy(sx,sy,sw,sh,dx,dy,dw,dh);}  }
class C{  private void keepAliveSession(long index,long timestamp,long commandSequence,long eventIndex,ServerSessionContext session,CompletableFuture<Void> future,ThreadContext context){  if (!log.isOpen()) {    context.executor().execute(null);    return;  }  if (!session.state().active()) {    context.executor().execute(null);    return;  }  executor.tick(index,timestamp);  executor.init(index,Instant.ofEpochMilli(timestamp),ServerStateMachineContext.Type.COMMAND);  session.clearResults(commandSequence).resendEvents(eventIndex);  long lastCompleted=calculateLastCompleted(index);  executor.commit();  context.executor().execute(null);}  }
class C{  @SuppressWarnings("unchecked") public ChunkedOrderedStriterator(final int chunkSize,final Iterator<E> src){  this((I)new ChunkedWrappedIterator<E>(src,chunkSize,null,null));}  }
class C{  public final void testContainsLetter(){  assertNotNull(Constraints.containsLetter());}  }
class C{  public static void tab(String tab){  Formatting.tab=tab;  Formatting.nltab=nl + tab;}  }
class C{  private Map<MemberType,Integer> computeSearchLimits(int limit,MemberType memberType){  Map<MemberType,Integer> memberTypeToLimit=new HashMap<MemberType,Integer>();  int limitPerPrincipalType=limit;  if (memberType == MemberType.ALL) {    limitPerPrincipalType=limit < 0 ? -1 : limit / (MemberType.values().length - 1);    int solutionUserLimit=limitPerPrincipalType < 0 ? -1 : limitPerPrincipalType + (limit % (MemberType.values().length - 1));    memberTypeToLimit.put(MemberType.USER,limitPerPrincipalType);    memberTypeToLimit.put(MemberType.GROUP,limitPerPrincipalType);    memberTypeToLimit.put(MemberType.SOLUTIONUSER,solutionUserLimit);  } else {    memberTypeToLimit.put(memberType,limit);  }  return memberTypeToLimit;}  }
class C{  @SuppressWarnings("unchecked") public static <T extends IFawe>T imp(){  return INSTANCE != null ? (T)INSTANCE.IMP : null;}  }
class C{  @Override public IList<IAgent> selectAgent(final int x,final int y){  return null;}  }
class C{  public static ObjectAnimator ofFloat(Object target,String propertyName,float... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setFloatValues(values);  return anim;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Node psNode;  String psName;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(1);  psNode=nameNode.getPreviousSibling();  psName=psNode.getNodeName();  if (equals("#text",psName)) {    psNode=psNode.getPreviousSibling();    psName=psNode.getNodeName();  }  assertEquals("nodeName","employeeId",psName);}  }
class C{  String internalsprintf(final int s) throws IllegalArgumentException {  final String s2;switch (conversionCharacter) {case 'd':case 'i':    if (optionalh) {      s2=printDFormat((short)s);    } else     if (optionall) {      s2=printDFormat((long)s);    } else {      s2=printDFormat(s);    }  break;case 'x':case 'X':if (optionalh) {  s2=printXFormat((short)s);} else if (optionall) {  s2=printXFormat((long)s);} else {  s2=printXFormat(s);}break;case 'o':if (optionalh) {s2=printOFormat((short)s);} else if (optionall) {s2=printOFormat((long)s);} else {s2=printOFormat(s);}break;case 'c':case 'C':s2=printCFormat((char)s);break;default :throw new IllegalArgumentException("Cannot format a int with a format using a " + conversionCharacter + " conversion character.");}return s2;}  }
class C{  public void moveWest(double amount){  if (!isBlocked()) {    setX(getX() - (float)amount);  }}  }
class C{  public void update(long value,long timestamp){  rescaleIfNeeded();  lockForRegularUsage();  try {    final double priority=weight(timestamp - startTime) / random.nextDouble();    final long newCount=count.incrementAndGet();    if (newCount <= reservoirSize) {      values.put(priority,value);    } else {      Double first=values.firstKey();      if (first < priority) {        if (values.putIfAbsent(priority,value) == null) {          while (values.remove(first) == null) {            first=values.firstKey();          }        }      }    }  }  finally {    unlockForRegularUsage();  }}  }
class C{  public final boolean isXMLParserValidating(){  return ((Boolean)SpriteTranscoder.this.hints.get(KEY_XML_PARSER_VALIDATING)).booleanValue();}  }
class C{  public static float atan2(float fY,float fX){  return (float)Math.atan2(fY,fX);}  }
class C{  public Notify(IServiceCall call){  super(Type.SERVICE_CALL);  this.call=call;}  }
class C{  public void handleError(Source source,int line,int column,String msg) throws LexerException {  errors++;  print(source.getName() + ":" + line+ ":"+ column+ ": error: "+ msg);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_METHOD_BODY_1__PRECONDITION_1:    return ((InternalEList<?>)getPrecondition_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void resolveTypeStructure(Environment env){}  }
class C{  public void connect(ConnectionListener onConnected){  this.catchDisconnection=true;  channelListeners=new HashMap<>();  connectionListener=onConnected;  performHandshake();}  }
class C{  public void testComputeClasspathForSimpleProject() throws CoreException {  addAndCreateSourceEntry(javaProjectA,SRC_DIR_NAME,null);  List<File> actualCp=getListOfFiles(GWTCompileRunner.computeClasspath(javaProjectA));  List<File> expectedCp=new ArrayList<File>();  expectedCp.add(getFile(javaProjectA.getProject(),SRC_DIR_NAME));  expectedCp.add(getOutputOfProject(javaProjectA));  assertEquals(expectedCp,actualCp);}  }
class C{  public int edgeIndex(TriangulationPoint p1,TriangulationPoint p2){  if (points[0] == p1) {    if (points[1] == p2) {      return 2;    } else     if (points[2] == p2) {      return 1;    }  } else   if (points[1] == p1) {    if (points[2] == p2) {      return 0;    } else     if (points[0] == p2) {      return 2;    }  } else   if (points[2] == p1) {    if (points[0] == p2) {      return 1;    } else     if (points[1] == p2) {      return 0;    }  }  return -1;}  }
class C{  @Override public void onDestroyView(){  super.onDestroyView();  if (mDialog != null) {    mViewDestroyed=true;    mDialog.dismiss();    mDialog=null;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static boolean isMetaTracker(CharSequence text,Object what){  return what == CAP || what == ALT || what == SYM || what == SELECTING;}  }
class C{  public ImagePortrayal3D(Image image){  this(image,true,false);}  }
class C{  public void onServicesDiscovered(BluetoothGatt gatt,int status){}  }
class C{  public SQLTimeoutException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public List<String> asStringList(String separator){  List<String> stringList=new LinkedList<>();  if (htmlList != null) {    for (    String input : htmlList) {      if (extractorsMap == null || extractorsMap.isEmpty()) {        stringList.add(input);      } else {        StringBuffer stringBuffer=new StringBuffer();        for (        Map.Entry<String,List<Extractor>> one : extractorsMap.entrySet()) {          String name=one.getKey();          List<Extractor> extractors=one.getValue();          String result=html;          for (          Extractor extractor : extractors) {            result=extractor.extract(result);          }          result=filterBefore(result);          result=filter(name,result);          result=filterAfter(result);          stringBuffer.append(result).append(separator);        }        int length=stringBuffer.length();        stringBuffer.delete(length - separator.length(),length);        stringList.add(stringBuffer.toString());      }    }  } else {    String result=asMap().toString();    stringList.add(result);  }  return stringList;}  }
class C{  public DateMidnight roundHalfEvenCopy(){  return iInstant.withMillis(iField.roundHalfEven(iInstant.getMillis()));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:02.240 -0500",hash_original_method="0A63E049EA1E17346730D259CF4DA78F",hash_generated_method="3923F6F8F48610B9EE0B46389A341951") public static void scrollTo(TextView widget,Layout layout,int x,int y){  final int horizontalPadding=widget.getTotalPaddingLeft() + widget.getTotalPaddingRight();  final int availableWidth=widget.getWidth() - horizontalPadding;  final int top=layout.getLineForVertical(y);  Alignment a=layout.getParagraphAlignment(top);  boolean ltr=layout.getParagraphDirection(top) > 0;  int left, right;  if (widget.getHorizontallyScrolling()) {    final int verticalPadding=widget.getTotalPaddingTop() + widget.getTotalPaddingBottom();    final int bottom=layout.getLineForVertical(y + widget.getHeight() - verticalPadding);    left=Integer.MAX_VALUE;    right=0;    for (int i=top; i <= bottom; i++) {      left=(int)Math.min(left,layout.getLineLeft(i));      right=(int)Math.max(right,layout.getLineRight(i));    }  } else {    left=0;    right=availableWidth;  }  final int actualWidth=right - left;  if (actualWidth < availableWidth) {    if (a == Alignment.ALIGN_CENTER) {      x=left - ((availableWidth - actualWidth) / 2);    } else     if ((ltr && (a == Alignment.ALIGN_OPPOSITE)) || (a == Alignment.ALIGN_RIGHT)) {      x=left - (availableWidth - actualWidth);    } else {      x=left;    }  } else {    x=Math.min(x,right - availableWidth);    x=Math.max(x,left);  }  widget.scrollTo(x,y);}  }
class C{  protected void switchNurseryZeroingApproach(Space nurserySpace){  if (Options.nurseryZeroing.getConcurrent()) {    if (Options.nurseryZeroing.getAdaptive() && (VM.collection.getActiveThreads() >= VM.collection.getDefaultThreads())) {      nurserySpace.skipConcurrentZeroing();    } else {      nurserySpace.triggerConcurrentZeroing();    }  }}  }
class C{  public static boolean isInSharedWithMeAndValid(File driveFile){  return isInSharedWithMe(driveFile) && !driveFile.getLabels().getTrashed();}  }
class C{  public static Angle axisAngle(Vec4 v1,Vec4 v2,Vec4[] result){  if (v1 == null || v2 == null) {    throw new IllegalArgumentException("Vec4 Is Null");  }  if (result == null) {    throw new IllegalArgumentException("Array Is Null");  }  Vec4 u1=v1.normalize3();  Vec4 u0=v2.normalize3();  Angle angle=Angle.fromRadians(Math.acos(u0.x * u1.x + u0.y * u1.y + u0.z * u1.z));  double A=(u0.y * u1.z) - (u0.z * u1.y);  double B=(u0.z * u1.x) - (u0.x * u1.z);  double C=(u0.x * u1.y) - (u0.y * u1.x);  double L=Math.sqrt(A * A + B * B + C * C);  result[0]=new Vec4(A / L,B / L,C / L);  return angle;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node entRef;  Node createdNode;  Node appendedNode;  doc=(Document)load("staff",true);  entRef=doc.createEntityReference("ent4");  assertNotNull("createdEntRefNotNull",entRef);  createdNode=doc.createElement("text3");{    boolean success=false;    try {      appendedNode=entRef.appendChild(createdNode);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  private void matchID() throws ParserException, IOException {  match(StreamTokenizer.TT_WORD);}  }
class C{  public final void update(Result<I> result){  _strategy.update(this,result);}  }
class C{  public void attrAdded(Attr node,String newv){  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  @Override protected void update(){  if (hasData())   m_PanelMatrix.setInstances(getData());}  }
class C{  public static byte[] loadFile(File file) throws IOException {  ByteArrayOutputStream bytes=new ByteArrayOutputStream();  FileInputStream fis=null;  int length=0;  byte[] buffer=new byte[Settings.BUFFER_SIZE];  try {    fis=new FileInputStream(file);    while ((length=fis.read(buffer)) != -1) {      bytes.write(buffer,0,length);    }    return bytes.toByteArray();  }  finally {    if (fis != null) {      fis.close();    }  }}  }
class C{  public KMLStyleUrl(String namespaceURI){  super(namespaceURI);}  }
class C{  public boolean isStarting(){  return starting;}  }
class C{  @AndroidOnly("The RI doesn't throw the IllegalStateException.") public void test_wrap_ByteBuffer_ByteBuffer_04(){  String host="new host";  int port=8080;  ByteBuffer bbs=ByteBuffer.allocate(10);  ByteBuffer bbd=ByteBuffer.allocate(10);  SSLEngine sse=getEngine(host,port);  try {    sse.wrap(bbs,bbd);    fail("IllegalStateException wasn't thrown");  } catch (  IllegalStateException iobe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalStateException");  }}  }
class C{  private void eliminateBackfillStates(int baseState){  if (statesToBackfill.contains(new Integer(baseState))) {    statesToBackfill.removeElement(new Integer(baseState));    short[] state=tempStateTable.elementAt(baseState);    for (int i=0; i < numCategories; i++) {      if (state[i] != 0) {        eliminateBackfillStates(state[i]);      }    }  }}  }
class C{  public int nextInt(int least,int bound){  if (least >= bound) {    throw new IllegalArgumentException();  }  return nextInt(bound - least) + least;}  }
class C{  static int GetGrayscale(int r,int g,int b){  return (int)((30 * r + 59 * g + 11 * g) / 100);}  }
class C{  public static DateTimeFormatter hourMinuteSecondFraction(){  return Constants.hmsf;}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;}  }
class C{  @ObjectiveCName("changeTextSizeWithValue:") public void changeTextSize(int val){  modules.getSettingsModule().changeTextSize(val);}  }
class C{  public String report(){  StringBuffer sb=new StringBuffer();  String indent="";  if (pubs.hasSamples() && subs.hasSamples()) {    sb.append(String.format("%s Pub/Sub stats: %s\n",name,this));    indent+=" ";  }  if (pubs.hasSamples()) {    String maybeTitle="";    if (!subs.hasSamples()) {      maybeTitle=name + " ";    }    sb.append(String.format("%s%sPub stats: %s\n",indent,maybeTitle,pubs));    if (pubs.samples.size() > 1) {      for (      Sample stat : pubs.samples) {        sb.append(String.format("%s [%d] %s (%d msgs)\n",indent,pubs.samples.indexOf(stat) + 1,stat,stat.jobMsgCnt));      }      sb.append(String.format("%s %s\n",indent,pubs.statistics()));    }  }  if (subs.hasSamples()) {    String maybeTitle="";    sb.append(String.format("%s%sSub stats: %s\n",indent,maybeTitle,subs));    if (subs.samples.size() > 1) {      for (      Sample stat : subs.samples) {        sb.append(String.format("%s [%d] %s (%d msgs)\n",indent,subs.samples.indexOf(stat) + 1,stat,stat.jobMsgCnt));      }      sb.append(String.format("%s %s\n",indent,subs.statistics()));    }  }  return sb.toString();}  }
class C{  public static int dayFromDateValue(long x){  return (int)(x & 31);}  }
class C{  public int size(){  return cards.size();}  }
class C{  @SuppressWarnings({"ForLoopThatDoesntUseLoopVariable"}) public boolean startGroup(){  for (boolean first=true; myDiff == 0 && myChangeGroupStartIndex < myChanges.size(); myChangeGroupStartIndex++, first=false) {    TextChangeImpl change=myChanges.get(myChangeGroupStartIndex);    myDiff=change.getDiff();    if (first) {      myDiff+=myFirstChangeShift;    }    if (myDiff == 0) {      copy(myData,change.getStart() + (first ? myFirstChangeShift : 0),change.getText());    } else {      myDataStartOffset=change.getStart();      if (first) {        myDataStartOffset+=myFirstChangeShift;      }      break;    }  }  return myDiff != 0;}  }
class C{  public DialogTextNodeComment(final Window owner,final INaviTextNode textNode){  super(owner,"Text Node Comments",ModalityType.APPLICATION_MODAL);  Preconditions.checkNotNull(owner,"IE02711: owner argument can not be null");  Preconditions.checkNotNull(textNode,"IE02712: textNode argument can not be null");  new CDialogEscaper(this);  setLayout(new BorderLayout());  m_commentsPanel=new TextNodeCommentsPanel(textNode);  createGui();}  }
class C{  protected GraphicsNode createRasterImageNode(BridgeContext ctx,Element e,Filter img,ParsedURL purl){  Rectangle2D bounds=getImageBounds(ctx,e);  if ((bounds.getWidth() == 0) || (bounds.getHeight() == 0)) {    ShapeNode sn=new ShapeNode();    sn.setShape(bounds);    return sn;  }  if (BrokenLinkProvider.hasBrokenLinkProperty(img)) {    Object o=img.getProperty(BrokenLinkProvider.BROKEN_LINK_PROPERTY);    String msg="unknown";    if (o instanceof String)     msg=(String)o;    SVGDocument doc=ctx.getUserAgent().getBrokenLinkDocument(e,purl.toString(),msg);    return createSVGImageNode(ctx,e,doc);  }  RasterImageNode node=new RasterImageNode();  node.setImage(img);  Rectangle2D imgBounds=img.getBounds2D();  float[] vb=new float[4];  vb[0]=0;  vb[1]=0;  vb[2]=(float)imgBounds.getWidth();  vb[3]=(float)imgBounds.getHeight();  initializeViewport(ctx,e,node,vb,bounds);  return node;}  }
class C{  public boolean increasingTriplet(int[] nums){  int n1=Integer.MAX_VALUE;  int n2=Integer.MAX_VALUE;  for (  int n : nums) {    if (n <= n1) {      n1=n;    } else     if (n <= n2) {      n2=n;    } else {      return true;    }  }  return false;}  }
class C{  public void addAnchoredRule(AnchoredRule rule){  inputRules.add(rule);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.168 -0500",hash_original_method="E680E4717FCBA329FAA87BAD42E56CAC",hash_generated_method="E680E4717FCBA329FAA87BAD42E56CAC") void notifyError(){  if (mNativeLoader != 0) {    String description=getErrorDescription();    if (description == null)     description="";    nativeError(getErrorID(),description,url());    clearNativeLoader();  }}  }
class C{  AttributeIterator(Compiler compiler,int opPos,int analysis) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis);}  }
class C{  public MilStd2525UnitsFormat(String lengthUnits,String areaUnits){  this(lengthUnits,areaUnits,true);}  }
class C{  public void writeJarFromContent(final String className,final String content,final OutputStream outStream) throws IOException {  JarOutputStream jarOutputStream=new JarOutputStream(outStream);  String formattedName=className;  if (!formattedName.endsWith(".class")) {    formattedName=formattedName.concat(".class");  }  if (className.contains("/")) {    JarEntry entry=new JarEntry(className.substring(0,className.lastIndexOf('/')));    entry.setTime(System.currentTimeMillis());    jarOutputStream.putNextEntry(entry);  }  JarEntry entry=new JarEntry(formattedName);  entry.setTime(System.currentTimeMillis());  jarOutputStream.putNextEntry(entry);  jarOutputStream.write(compileClass(className,content));  jarOutputStream.closeEntry();  jarOutputStream.close();}  }
class C{  private boolean onTap(float rawX,float rawY){  OcrGraphic graphic=mGraphicOverlay.getGraphicAtLocation(rawX,rawY);  TextBlock text=null;  if (graphic != null) {    text=graphic.getTextBlock();    if (text != null && text.getValue() != null) {      Log.d(TAG,"text data is being spoken! " + text.getValue());      tts.speak(text.getValue(),TextToSpeech.QUEUE_ADD,null,"DEFAULT");    } else {      Log.d(TAG,"text data is null");    }  } else {    Log.d(TAG,"no text detected");  }  return text != null;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double slope;  double z, z2;  int c, i;  int progress;  int[] dY={-1,0,1,1,1,0,-1,-1};  int[] dX={1,1,1,0,-1,-1,-1,0};  int row, col, x, y;  double dist;  double minSlope=0;  double minZChange=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    DEM.isReflectedAtEdges=true;    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    double gridResX=DEM.getCellSizeX();    double gridResY=DEM.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          minSlope=99999999;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            dist=gridLengths[c];            z2=DEM.getValue(y,x);            if (z2 != noData) {              slope=(z - z2) / dist;              if (slope >= 0 && slope < minSlope) {                minSlope=slope;                minZChange=z - z2;              }            }          }          if (minSlope < 99999999) {            output.setValue(row,col,minZChange);          } else {            output.setValue(row,col,0);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean reset(){  boolean wasReset=false;  if (super.reset()) {    resetToStream();    wasReset=true;  }  return wasReset;}  }
class C{  public void deleteImageSharing(String sharingId) throws RemoteException {  if (TextUtils.isEmpty(sharingId)) {    throw new ServerApiIllegalArgumentException("sharingId must not be null or empty!");  }  mRichcallService.tryToDeleteImageSharing(sharingId);}  }
class C{  @TargetApi(21) public void onEpisodeSelected(int tvshowId,int episodeId){  selectedEpisodeId=episodeId;  TVShowEpisodeDetailsFragment fragment=TVShowEpisodeDetailsFragment.newInstance(tvshowId,episodeId);  FragmentTransaction fragTrans=getSupportFragmentManager().beginTransaction();  if (Utils.isLollipopOrLater()) {    fragment.setEnterTransition(TransitionInflater.from(this).inflateTransition(R.transition.media_details));    fragment.setReturnTransition(null);  } else {    fragTrans.setCustomAnimations(R.anim.fragment_details_enter,0,R.anim.fragment_list_popenter,0);  }  fragTrans.replace(R.id.fragment_container,fragment).addToBackStack(null).commit();  setupActionBar(selectedTVShowTitle);}  }
class C{  public void log(String t){  TestUtils.log(t);}  }
class C{  private static void renderClearHiddenParamsJavaScript(FacesContext ctx,ResponseWriter writer,Map formParams,String formTarget,String formName) throws IOException {  writer.write("\n");  writer.startElement(SCRIPT_ELEMENT,null);  writer.writeAttribute(SCRIPT_TYPE,"text/javascript",null);  writer.write("\n<!--");  writer.write("\nfunction ");  String functionName=(CLEAR_HIDDEN_FIELD_FN_NAME + "_" + formName.replace(UINamingContainer.getSeparatorChar(ctx),'_'));  writer.write(functionName);  writer.write("(curFormName) {");  writer.write("\n  var curForm = document.forms[curFormName];");  if (formParams != null) {    Iterator entries=formParams.entrySet().iterator();    while (entries.hasNext()) {      Map.Entry entry=(Map.Entry)entries.next();      if (Boolean.TRUE.equals(entry.getValue())) {        writer.write("\n curForm.elements['");        writer.write((String)entry.getKey());        writer.write("'].value = null;");      }    }  }  if (formTarget != null && formTarget.length() > 0) {    writer.write("\n  curForm.target=");    writer.write("'");    writer.write(formTarget);    writer.write("';");  }  writer.write("\n}");  writer.write("\n//-->\n");  writer.endElement(SCRIPT_ELEMENT);  writer.write("\n");}  }
class C{  @Override public void handleMouseDragged(ChartCanvas canvas,MouseEvent e){  if (this.startPoint == null) {    canvas.clearLiveHandler();    return;  }  boolean hZoom, vZoom;  Plot p=canvas.getChart().getPlot();  if (!(p instanceof Zoomable)) {    return;  }  Zoomable z=(Zoomable)p;  if (z.getOrientation().isHorizontal()) {    hZoom=z.isRangeZoomable();    vZoom=z.isDomainZoomable();  } else {    hZoom=z.isDomainZoomable();    vZoom=z.isRangeZoomable();  }  Rectangle2D dataArea=canvas.findDataArea(this.startPoint);  double x=this.startPoint.getX();  double y=this.startPoint.getY();  double w=0;  double h=0;  if (hZoom && vZoom) {    double xmax=Math.min(e.getX(),dataArea.getMaxX());    double ymax=Math.min(e.getY(),dataArea.getMaxY());    w=xmax - this.startPoint.getX();    h=ymax - this.startPoint.getY();  } else   if (hZoom) {    double xmax=Math.min(e.getX(),dataArea.getMaxX());    y=dataArea.getMinY();    w=xmax - this.startPoint.getX();    h=dataArea.getHeight();  } else   if (vZoom) {    double ymax=Math.min(e.getY(),dataArea.getMaxY());    x=dataArea.getMinX();    w=dataArea.getWidth();    h=ymax - this.startPoint.getY();  }  viewer.showZoomRectangle(x,y,w,h);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodevalue04.class,args);}  }
class C{  @Override public IBinder onBind(Intent intent){  if (AccountManager.ACTION_AUTHENTICATOR_INTENT.equals(intent.getAction())) {    return mAuthenticator.getIBinder();  }  if (sLogger.isActivated()) {    sLogger.error("Bound with unknown intent: ".concat(intent.toString()));  }  return null;}  }
class C{  public static void clickView(InstrumentationTestCase test,View v){  int[] xy=new int[2];  v.getLocationOnScreen(xy);  final int viewWidth=v.getWidth();  final int viewHeight=v.getHeight();  final float x=xy[0] + (viewWidth / 2.0f);  float y=xy[1] + (viewHeight / 2.0f);  Instrumentation inst=test.getInstrumentation();  long downTime=SystemClock.uptimeMillis();  long eventTime=SystemClock.uptimeMillis();  MotionEvent event=MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_DOWN,x,y,0);  inst.sendPointerSync(event);  inst.waitForIdleSync();  eventTime=SystemClock.uptimeMillis();  final int touchSlop=ViewConfiguration.get(v.getContext()).getScaledTouchSlop();  event=MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_MOVE,x + (touchSlop / 2.0f),y + (touchSlop / 2.0f),0);  inst.sendPointerSync(event);  inst.waitForIdleSync();  eventTime=SystemClock.uptimeMillis();  event=MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_UP,x,y,0);  inst.sendPointerSync(event);  inst.waitForIdleSync();  try {    Thread.sleep(1000);  } catch (  InterruptedException e) {    e.printStackTrace();  }}  }
class C{  public void useDialogForExpirationDateEntry(Activity activity,boolean useDialog){  mExpirationDateDialog=ExpirationDateDialog.create(activity,this);  mUseExpirationDateDialog=useDialog;  setShowKeyboardOnFocus(!mUseExpirationDateDialog);  setCursorVisible(!mUseExpirationDateDialog);}  }
class C{  public static void writeDocument(Document document,String encoding,OutputStream out,Writer writer,boolean omitXMLDeclaration) throws IOException, XMLException {  if (writer == null) {    writer=new OutputStreamWriter(out,encoding);  }  transformer.setOutputProperty(OutputKeys.ENCODING,encoding);  transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,omitXMLDeclaration ? "yes" : "no");  Source source=new DOMSource(document);  Result result=new StreamResult(writer);  try {    transformer.transform(source,result);  } catch (  TransformerException e) {    e.printStackTrace();    throw new XMLException("writeDocument failed",e);  }  writer.flush();}  }
class C{  public void doFilter(final ServletRequest request,final ServletResponse response,final FilterChain chain) throws IOException, ServletException {  UrlRewriter urlRewriter=getUrlRewriter(request,response,chain);  final HttpServletRequest hsRequest=(HttpServletRequest)request;  final HttpServletResponse hsResponse=(HttpServletResponse)response;  UrlRewriteWrappedResponse urlRewriteWrappedResponse=new UrlRewriteWrappedResponse(hsResponse,hsRequest,urlRewriter);  if (statusEnabled && statusServerNameMatcher.isMatch(request.getServerName())) {    String uri=hsRequest.getRequestURI();    if (log.isDebugEnabled()) {      log.debug("checking for status path on " + uri);    }    String contextPath=hsRequest.getContextPath();    if (uri != null && uri.startsWith(contextPath + statusPath)) {      showStatus(hsRequest,urlRewriteWrappedResponse);      return;    }  }  boolean requestRewritten=false;  if (urlRewriter != null) {    requestRewritten=urlRewriter.processRequest(hsRequest,urlRewriteWrappedResponse,chain);  } else {    if (log.isDebugEnabled()) {      log.debug("urlRewriter engine not loaded ignoring request (could be a conf file problem)");    }  }  if (!requestRewritten) {    chain.doFilter(hsRequest,urlRewriteWrappedResponse);  }}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  public void clear(){  map.clear();}  }
class C{  @Override public Object copy(){  PrecomputedKernelMatrixKernel newK=new PrecomputedKernelMatrixKernel();  newK.setKernelMatrix(m_KernelMatrix);  newK.setKernelMatrixFile(m_KernelMatrixFile);  newK.m_Counter=m_Counter;  return newK;}  }
class C{  public void replaceBytes(int offset,int len,byte[] bytes){  model.replaceBytes(offset,len,bytes);}  }
class C{  void close(){  trace.debug("log close");  if (pageOut != null) {    pageOut.close();    pageOut=null;  }  writeBuffer=null;}  }
class C{  public static void logError(ILog log,Throwable exception,String message){  log(log,IStatus.ERROR,IStatus.OK,message,exception);}  }
class C{  private boolean onCheckCanLoadMore(){  return mLoadMoreEnabled && !canChildScrollDown() && mHasFooterView&& mLoadMoreTriggerOffset > 0;}  }
class C{  public void printWrapped(PrintWriter pw,int width,String text){  printWrapped(pw,width,0,text);}  }
class C{  public RegisterOperand makeTemp(TypeReference type){  return new RegisterOperand(getReg(type),type);}  }
class C{  public QueueListNode(T payload){  this.payload=payload;}  }
class C{  static public Map<URI,List<Initiator>> makeHostInitiatorsMap(Collection<Initiator> initiators){  Map<URI,List<Initiator>> hostInitiatorsMap=new HashMap<URI,List<Initiator>>();  for (  Initiator initiator : initiators) {    URI host=initiator.getHost();    if (NullColumnValueGetter.isNullURI(host)) {      host=StoragePortsAssigner.unknown_host_uri;    }    if (hostInitiatorsMap.containsKey(host) == false) {      hostInitiatorsMap.put(host,new ArrayList<Initiator>());    }    hostInitiatorsMap.get(host).add(initiator);  }  return hostInitiatorsMap;}  }
class C{  public void verifyValidity(OCSPResp response,X509Certificate subject,X509Certificate issuer,Date atDate) throws Exception {  log.debug("verifyValidity(subject: {}, issuer: {}, atDate: {})",new Object[]{subject.getSubjectX500Principal().getName(),issuer.getSubjectX500Principal().getName(),atDate});  SingleResp singleResp=verifyResponseValidityCached(response,subject,issuer);  verifyValidityAt(atDate,singleResp);}  }
class C{  public void addServiceName(String name){  if (name != null) {    this.serviceNameSet.add(name);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element addrNode;  Attr addrAttr;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("address");  addrNode=(Element)elementList.item(3);  addrAttr=addrNode.getAttributeNode("xmlns");{    boolean success=false;    try {      addrAttr.setPrefix("xxx");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  @Override public void serviceAdded(ServiceEvent event){  mJmdns.requestServiceInfo(event.getType(),event.getName(),1);}  }
class C{  private boolean unclusteredPartial1(int v1,int v2,int v3,int v4){  if (this.scoreTestMode) {    return tetradTest.oneFactorTest(v1,v2,v3,v4);  } else {    return tetradTest.tetradScore3(v1,v2,v3,v4);  }}  }
class C{  public void clear(){  count=0;}  }
class C{  private void lockScreen(){  if (mScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_SENSOR) {    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2)     setRequestedOrientation(14); else     setRequestedOrientation(getScreenOrientation());    mScreenOrientationLock=getScreenOrientation();  }  showInfo("locked",1000);  mTime.setEnabled(false);  mSeekbar.setEnabled(false);  mLength.setEnabled(false);  mSize.setEnabled(false);  mEdit.setEnabled(false);  hideOverlay(true);  mLockBackButton=true;  mLock.setBackgroundResource(R.drawable.video_lockbtn_locked);}  }
class C{  void addBodyDeclarations(List<? extends Tree> bodyDeclarations,BracesOrNot braces,FirstDeclarationsOrNot first0){  if (bodyDeclarations.isEmpty()) {    if (braces.isYes()) {      builder.space();      tokenBreakTrailingComment("{",plusTwo);      builder.blankLineWanted(BlankLineWanted.NO);      builder.open(ZERO);      token("}",plusTwo);      builder.close();    }  } else {    if (braces.isYes()) {      builder.space();      tokenBreakTrailingComment("{",plusTwo);      builder.open(ZERO);    }    builder.open(plusTwo);    boolean first=first0.isYes();    boolean lastOneGotBlankLineBefore=false;    PeekingIterator<Tree> it=Iterators.<Tree>peekingIterator(bodyDeclarations.iterator());    while (it.hasNext()) {      Tree bodyDeclaration=it.next();      dropEmptyDeclarations();      builder.forcedBreak();      boolean thisOneGetsBlankLineBefore=bodyDeclaration.getKind() != VARIABLE || hasJavaDoc(bodyDeclaration);      if (first) {        builder.blankLineWanted(PRESERVE);      } else       if (!first && (thisOneGetsBlankLineBefore || lastOneGotBlankLineBefore)) {        builder.blankLineWanted(YES);      }      markForPartialFormat();      if (bodyDeclaration.getKind() == VARIABLE) {        visitVariables(variableFragments(it,bodyDeclaration),DeclarationKind.FIELD,fieldAnnotationDirection(((VariableTree)bodyDeclaration).getModifiers()));      } else {        scan(bodyDeclaration,null);      }      first=false;      lastOneGotBlankLineBefore=thisOneGetsBlankLineBefore;    }    dropEmptyDeclarations();    builder.forcedBreak();    builder.close();    builder.forcedBreak();    markForPartialFormat();    if (braces.isYes()) {      builder.blankLineWanted(BlankLineWanted.NO);      token("}",plusTwo);      builder.close();    }  }}  }
class C{  public void testCreateStandaloneConfigurationWithDeployables(){  ConfigurationElement configElement=new ConfigurationElement();  configElement.setType(ConfigurationType.STANDALONE.getType());  configElement.setHome("somewhere");  DeployableElement warElement=new DeployableElement();  warElement.setType(DeployableType.WAR.getType());  warElement.setFile("some/war/file");  configElement.addConfiguredDeployable(warElement);  DeployableElement earElement=new DeployableElement();  earElement.setType(DeployableType.EAR.getType());  earElement.setFile("some/ear/file");  configElement.addConfiguredDeployable(earElement);  configElement.setClass(StandaloneLocalConfigurationStub.class);  LocalConfiguration configuration=(LocalConfiguration)configElement.createConfiguration("someContainerId",ContainerType.INSTALLED);  assertEquals(2,configuration.getDeployables().size());  assertEquals("some/war/file",((WAR)configuration.getDeployables().get(0)).getFile());  assertEquals("some/ear/file",((EAR)configuration.getDeployables().get(1)).getFile());}  }
class C{  public static void printDeck(Card[] cards){  for (int i=0; i < cards.length; i++) {    System.out.println(cards[i]);  }}  }
class C{  public CertificateParsingException(String message){  super(message);}  }
class C{  final public void disable_tracing(){}  }
class C{  public void update(){  for (int i=0, n=networkListeners.size(); i < n; i++) {    networkListeners.get(i).setUpdateComplete(false);  }  for (int i=0, n=updateManager.getActionList().size(); i < n; i++) {    updateManager.getActionList().get(i).invoke();  }  if (fireUpdates) {    fireSynapsesUpdated(synapseList);    fireNeuronsUpdated(neuronList);    for (int i=0, n=groupList.size(); i < n; i++) {      fireGroupUpdated(groupList.get(i));    }  }  clearInputs();  updateTime();  setUpdateCompleted(true);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:40.317 -0500",hash_original_method="DC0208EAD79A0BCADD603C831599A0E0",hash_generated_method="DC0208EAD79A0BCADD603C831599A0E0") void updateCachedTextfield(){  mWebView.updateCachedTextfield(getText().toString());}  }
class C{  public final static boolean isHexDigit(char c){  return (c >= '0' && c <= '9') || ((c >= 'a') && (c <= 'f')) || ((c >= 'A') && (c <= 'F'));}  }
class C{  private boolean resourceIsProject(IResource resource){  if (resource == null) {    return false;  }  IProject proj=resource.getProject();  boolean out=(proj == resource);  return out;}  }
class C{  public int compareTo(Entry that){  if (that == null) {    String msg=Logging.getMessage("nullValue.EntryIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  return this.lastUsed < that.lastUsed ? -1 : this.lastUsed == that.lastUsed ? 0 : 1;}  }
class C{  public void init(){  LOG.d(TAG,"init()");  this.onPause(false);  this.onDestroy();  pluginMap.clear();  this.startupPlugins();}  }
class C{  private LayoutManager createLayout(){  return new TitlePaneLayout();}  }
class C{  public static void samCat(boolean inputIsGzipped,OutputStream destination,boolean deleteIntermediate,File... inputFiles) throws IOException {  final byte[] buff=new byte[FileUtils.BUFFERED_STREAM_SIZE];  final OneShotTimer timer=new OneShotTimer("samCat");  for (int i=0; i < inputFiles.length; i++) {    final long t0=System.nanoTime();    boolean dropHeader=i > 0;    boolean scanNewLine=false;    final File current=inputFiles[i];    final long length=current.length();    if (length > 0) {      try (InputStream input=inputIsGzipped ? FileUtils.createGzipInputStream(current,false) : FileUtils.createFileInputStream(current,false)){        int len;        while ((len=input.read(buff)) > 0) {          int currentPos=0;          if (dropHeader) {            for (; currentPos < len; currentPos++) {              final char c=(char)buff[currentPos];              if (scanNewLine && c == '\n') {                scanNewLine=false;              } else               if (!scanNewLine) {                if (c == '@') {                  scanNewLine=true;                } else {                  dropHeader=false;                  break;                }              }            }          }          assert dropHeader == (len == currentPos);          destination.write(buff,currentPos,len - currentPos);        }      }     }    devLogSamConcat(t0,length,current.getAbsolutePath());    if (deleteIntermediate) {      if (!current.delete()) {        Diagnostic.developerLog("cannot delete " + current.getPath());      }    }  }  timer.stopLog();}  }
class C{  public VoltageScorer(Hypergraph<V,E> g,Function<? super E,? extends Number> edge_weights,Collection<V> sources,Collection<V> sinks){  super(g,edge_weights);  Map<V,Double> unit_voltages=new HashMap<V,Double>();  for (  V v : sources)   unit_voltages.put(v,new Double(1.0));  this.source_voltages=unit_voltages;  this.sinks=sinks;  initialize();}  }
class C{  public Entry createEntry(){  EntryImpl entry=new EntryImpl();  return entry;}  }
class C{  public TopicConnectionFactory lookupTopicConnectionFactory(String name) throws JMSException, NamingException {  return lookupTopicConnectionFactoryFromJNDI(name == null ? Config.parms.getString("cf") : name);}  }
class C{  protected boolean checkExpiration(Token tokenObj,boolean updateLastAccess){  if (!tokenObj.getInactive()) {    long timeNow=getCurrentTimeInMins();    long timeLastAccess=tokenObj.getLastAccessTime();    long timeIdleTimeExpiry=timeLastAccess + (_maxLifeValuesHolder.getMaxTokenIdleTimeInMins()) + (_maxLifeValuesHolder.getTokenIdleTimeGraceInMins());    if (timeIdleTimeExpiry > timeNow && tokenObj.getExpirationTime() > timeNow) {      if (updateLastAccess) {        long nextLastAccessUpdate=timeLastAccess + (_maxLifeValuesHolder.getTokenIdleTimeGraceInMins());        if (nextLastAccessUpdate <= timeNow) {          tokenObj.setLastAccessTime(timeNow);          try {            _dbClient.persistObject(tokenObj);          } catch (          DatabaseException ex) {            _log.error("failed updating last access time for token {}",tokenObj.getId());          }        }      }      return true;    }    _log.debug("token expired: {}, now {}, lastAccess {}, idle expiry {}, expiry {}",new String[]{tokenObj.getId().toString(),"" + timeNow,"" + tokenObj.getLastAccessTime(),"" + timeIdleTimeExpiry,"" + tokenObj.getExpirationTime()});  }  try {    deleteTokenInternal(tokenObj);  } catch (  DatabaseException ex) {    _log.error("exception deleting token {}",tokenObj.getId(),ex);  }  return false;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public boolean isEmployee(){  Object oo=get_Value(COLUMNNAME_IsEmployee);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void addMacro(String name,String value) throws LexerException {  cpp.addMacro(name,value);}  }
class C{  public BigDecimal readF2Dot14(int index){  throw new UnsupportedOperationException();}  }
class C{  public void updateMarcaBloqueo(String udocID,int marca){  StringBuffer qual=new StringBuffer(DBUtils.WHERE).append(DBUtils.generateEQTokenField(ID_FIELD,udocID));  Map colToUpdate=Collections.singletonMap(MARCAS_BLOQUEO_FIELD,String.valueOf(marca));  updateFields(qual.toString(),colToUpdate,TABLE_NAME);}  }
class C{  private void sanityCheckAssertNumerics(){  assertNumerics("Null?",null,null);  assertNumerics("large a",new Double(2.3005390038169265E9),new Double(2.300539003816927E9));  assertNumerics("large b",new Double(1.2722582464444444E9),new Double(1.2722582464444442E9));  assertNumerics("small",new Double(2.3005390038169265E-9),new Double(2.300539003816927E-9));  assertNumerics("large a negative",new Double(-2.3005390038169265E9),new Double(-2.300539003816927E9));  assertNumerics("large b negative",new Double(-1.2722582464444444E9),new Double(-1.2722582464444442E9));  assertNumerics("small negative",new Double(-2.3005390038169265E-9),new Double(-2.300539003816927E-9));  assertNumerics("high long",Long.MAX_VALUE,Long.MAX_VALUE);  assertNumerics("high int",Integer.MAX_VALUE,Integer.MAX_VALUE);  assertNumerics("low long",Long.MIN_VALUE,Long.MIN_VALUE);  assertNumerics("low int",Integer.MIN_VALUE,Integer.MIN_VALUE);  for (  Object num : new Object[]{new Date(42),42,42L,42.0F}) {    try {      assertNumerics("non-null",null,num);      throw new RuntimeException("did not get assertion failure when expected was null");    } catch (    AssertionError e) {    }    try {      assertNumerics("non-null",num,null);      throw new RuntimeException("did not get assertion failure when actual was null");    } catch (    AssertionError e) {    }  }  try {    assertNumerics("non-number","foo",42);    throw new RuntimeException("did not get assertion failure when expected was non-number");  } catch (  AssertionError e) {  }  try {    assertNumerics("non-number",42,"foo");    throw new RuntimeException("did not get assertion failure when actual was non-number");  } catch (  AssertionError e) {  }  try {    assertNumerics("diff",new Double(2.3005390038169265E9),new Double(2.267272520100462E9));    throw new RuntimeException("did not get assertion failure when args are big & too diff");  } catch (  AssertionError e) {  }  try {    assertNumerics("diff",new Double(2.3005390038169265E-9),new Double(2.267272520100462E-9));    throw new RuntimeException("did not get assertion failure when args are small & too diff");  } catch (  AssertionError e) {  }  try {    assertNumerics("diff long",Long.MAX_VALUE,Long.MAX_VALUE - 1);    throw new RuntimeException("did not get assertion failure when args are diff longs");  } catch (  AssertionError e) {  }  try {    assertNumerics("diff int",Integer.MAX_VALUE,Integer.MAX_VALUE - 1);    throw new RuntimeException("did not get assertion failure when args are diff ints");  } catch (  AssertionError e) {  }  try {    assertNumerics("diff date",new Date(42),new Date(43));    throw new RuntimeException("did not get assertion failure when args are diff dates");  } catch (  AssertionError e) {  }}  }
class C{  public void updateLong(int columnIndex,long x) throws SQLException {  checkUpdatable();  getField(columnIndex).setLong(x);}  }
class C{  public void clearValores(){  valores.clear();}  }
class C{  protected void processFile(String fileName,String systemId) throws ValidationException, ParserConfigurationException, SAXException, IOException, SchedulerException, ClassNotFoundException, ParseException, XPathException {  prepForProcessing();  log.info("Parsing XML file: " + fileName + " with systemId: "+ systemId);  InputSource is=new InputSource(getInputStream(fileName));  is.setSystemId(systemId);  process(is);  maybeThrowValidationException();}  }
class C{  public PackagingUnit(LoadUnit lu,UnitType qty){  Assert.notNull(lu);  Assert.notNull(qty);  assignInitialValues(lu);  this.quantity=qty;  this.product=lu.getProduct();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:42.923 -0500",hash_original_method="4D1AAFD088944D073F1D6AEA9907E5AD",hash_generated_method="7B46C8F09C7254045F5048910CD6EB03") static IndexOutOfBoundsException throwIndexOutOfBoundsException(int index,int size){  throw new IndexOutOfBoundsException("Invalid index " + index + ", size is "+ size);}  }
class C{  public Task uploadAndAttachIso(String vmId,String inputFileName) throws IOException {  String path=String.format("%s/%s/attach_iso",getBasePath(),vmId);  HttpResponse response=this.restClient.upload(path,inputFileName,ImmutableMap.<String,String>of());  this.restClient.checkResponse(response,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(response);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public UploadObject(int id){  this.id=id;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_derivedAttribute_2_();}  }
class C{  private void updateProperties(String svcId) throws Exception {  PropertyInfoExt diffProperties=new PropertyInfoExt(targetPropInfo.getDiffProperties(localTargetPropInfo));  PropertyInfoExt override_properties=new PropertyInfoExt(localRepository.getOverrideProperties().getAllProperties());  log.info("Step3a: Updating User Changed properties file: {}",override_properties);  PropertyInfoExt updatedUserChangedProps=combineProps(override_properties,diffProperties);  if (diffProperties.hasRebootProperty()) {    if (!getRebootLock(svcId)) {      retrySleep();    } else     if (!isQuorumMaintained()) {      releaseRebootLock(svcId);      retrySleep();    } else {      log.info("Step3a: Reboot property found.");      localRepository.setOverrideProperties(updatedUserChangedProps);      log.info("Step3a: Updating properties: {}",updatedUserChangedProps);      reboot();    }  } else   if (diffProperties.hasReconfigProperty() || !diffProperties.getNotifierTags().isEmpty()) {    log.info("Step3a: Reconfig property found or notifiers specified.");    String targetVersion=targetPropInfo.getProperty(PropertyInfoExt.CONFIG_VERSION);    updatedUserChangedProps.addProperty(PropertyInfoExt.CONFIG_VERSION,localConfigVersion);    localRepository.setOverrideProperties(updatedUserChangedProps);    log.info("Step3a: Updating properties without updating the config version: {}",updatedUserChangedProps);    if (diffProperties.hasReconfigAttributeWithoutNotifiers()) {      localRepository.reconfig();    } else     if (diffProperties.hasReconfigProperty()) {      reconfigProperties(diffProperties);    }    notifyPropertyChanges(diffProperties);    log.info("Step3a: Updating the config version to {}",targetVersion);    updatedUserChangedProps.addProperty(PropertyInfoExt.CONFIG_VERSION,targetVersion);    localRepository.setOverrideProperties(updatedUserChangedProps);  } else {    log.info("Step3a: No reboot property found.");    localRepository.setOverrideProperties(updatedUserChangedProps);    log.info("Step3a: Updating properties: {}",updatedUserChangedProps);  }}  }
class C{  private long retrieveRowCount(Database conn,Table table,long fromPk,long tillPk) throws SQLException {  long count=-1;  String countOn="*";  String where="";  Key pk=table.getPrimaryKey();  if (pk != null) {    if (pk.getColumns().size() == 1) {      String pkName=pk.getColumns().get(0).getName();      countOn=pkName;      if (fromPk >= 0 && tillPk >= 0) {        where=String.format("WHERE %s >= %d AND %s < %d",pkName,fromPk,pkName,tillPk);      }    } else     if (pk.getColumns().size() > 1 && fromPk >= 0 && tillPk >= 0) {      return -1;    }  }  String query=String.format("SELECT COUNT(%s) FROM %s %s",countOn,table.getName(),where);  Statement st=null;  ResultSet rs=null;  try {    st=conn.createStatement();    rs=st.executeQuery(query);    if (rs.next()) {      count=rs.getLong(1);    }  }  finally {    if (rs != null) {      try {        rs.close();      } catch (      SQLException e) {      }    }    if (st != null) {      try {        st.close();      } catch (      SQLException e) {      }    }  }  return count;}  }
class C{  public void insert(final AbstractInsnNode location,final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  AbstractInsnNode ifirst=insns.first;  AbstractInsnNode ilast=insns.last;  AbstractInsnNode next=location.next;  if (next == null) {    last=ilast;  } else {    next.prev=ilast;  }  location.next=ifirst;  ilast.next=next;  ifirst.prev=location;  cache=null;  insns.removeAll(false);}  }
class C{  public static void encodeFileToFile(String infile,String outfile){  String encoded=Base64.encodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(encoded.getBytes("US-ASCII"));  } catch (  java.io.IOException ex) {    ex.printStackTrace();  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public static MemberExistsResult fieldExists(String fieldName,JavacNode node){  node=upToTypeNode(node);  if (node != null && node.get() instanceof JCClassDecl) {    for (    JCTree def : ((JCClassDecl)node.get()).defs) {      if (def instanceof JCVariableDecl) {        if (((JCVariableDecl)def).name.contentEquals(fieldName)) {          return getGeneratedBy(def) == null ? MemberExistsResult.EXISTS_BY_USER : MemberExistsResult.EXISTS_BY_LOMBOK;        }      }    }  }  return MemberExistsResult.NOT_EXISTS;}  }
class C{  public ResponseHeaders combine(ResponseHeaders network) throws IOException {  RawHeaders result=new RawHeaders();  result.setStatusLine(headers.getStatusLine());  for (int i=0; i < headers.length(); i++) {    String fieldName=headers.getFieldName(i);    String value=headers.getValue(i);    if ("Warning".equals(fieldName) && value.startsWith("1")) {      continue;    }    if (!isEndToEnd(fieldName) || network.headers.get(fieldName) == null) {      result.add(fieldName,value);    }  }  for (int i=0; i < network.headers.length(); i++) {    String fieldName=network.headers.getFieldName(i);    if (isEndToEnd(fieldName)) {      result.add(fieldName,network.headers.getValue(i));    }  }  return new ResponseHeaders(uri,result);}  }
class C{  public String createRandomFile(String location){  Random randomGenerator=new Random();  SimpleDateFormat dateFormat=new SimpleDateFormat("yyyyMMddHHmmssS");  Date date=new Date();  final String filePath=location + dateFormat.format(date) + randomGenerator.nextInt(10);  Log.i(TAG,">>>>>>>>>>>>>>>>createRandomFile  Location= " + location + "\t FilePath = "+ filePath);  return filePath;}  }
class C{  public void bootstrapNetwork(Network network){  Vertex classification=network.createVertex(Primitive.CLASSIFICATION);  Vertex relation=network.createVertex(Primitive.RELATIONSHIP);  Vertex compoundRelation=network.createVertex(Primitive.COMPOUND_RELATIONSHIP);  Vertex concept=network.createVertex(Primitive.CONCEPT);  Vertex tangible=network.createVertex(Primitive.TANGIBLE);  Vertex intangible=network.createVertex(Primitive.INTANGIBLE);  Vertex anything=network.createVertex(Primitive.ANYTHING);  Vertex nothing=network.createVertex(Primitive.NOTHING);  Vertex everything=network.createVertex(Primitive.EVERYTHING);  Vertex thing=network.createVertex(Primitive.THING);  Vertex action=network.createVertex(Primitive.ACTION);  Vertex description=network.createVertex(Primitive.DESCRIPTION);  Vertex yes=network.createVertex(Primitive.TRUE);  Vertex no=network.createVertex(Primitive.FALSE);  Vertex unknown=network.createVertex(Primitive.UNKNOWN);  Vertex self=network.createVertex(Primitive.SELF);  Vertex url=network.createVertex(Primitive.URL);  Vertex specialization=network.createVertex(Primitive.SPECIALIZATION);  Vertex instantiation=network.createVertex(Primitive.INSTANTIATION);  self.addRelationship(Primitive.BIRTH,network.createTimestamp());  intangible.addRelationship(specialization,thing);  tangible.addRelationship(specialization,thing);  concept.addRelationship(specialization,intangible);  classification.addRelationship(specialization,concept);  relation.addRelationship(specialization,concept);  compoundRelation.addRelationship(specialization,relation);  thing.addRelationship(specialization,anything);  everything.addRelationship(specialization,anything);  self.addRelationship(instantiation,thing);  yes.addRelationship(instantiation,concept);  no.addRelationship(instantiation,concept);  unknown.addRelationship(instantiation,concept);  relation.addRelationship(instantiation,classification);  compoundRelation.addRelationship(instantiation,classification);  url.addRelationship(instantiation,classification);  anything.addRelationship(instantiation,concept);  thing.addRelationship(instantiation,classification);  action.addRelationship(instantiation,classification);  description.addRelationship(instantiation,classification);  intangible.addRelationship(instantiation,classification);  tangible.addRelationship(instantiation,classification);  concept.addRelationship(instantiation,classification);  nothing.addRelationship(instantiation,concept);  everything.addRelationship(instantiation,concept);  specialization.addRelationship(instantiation,relation);  instantiation.addRelationship(instantiation,relation);}  }
class C{  void computeScroll(){  if (!overScroller.computeScrollOffset()) {    isScrollingFast=false;    return;  }  int distanceX=overScroller.getCurrX() - view.getScrollX();  int distanceY=overScroller.getCurrY() - view.getScrollY();  int dX=(int)calculateDx(distanceX);  int dY=(int)calculateDy(distanceY);  boolean stopScrolling=dX == 0 && dY == 0;  if (stopScrolling) {    isScrollingFast=false;  }  view.scrollBy(dX,dY);}  }
class C{  public SVGWriter(){}  }
class C{  private void throwSingleValuedException() throws IOException {  throw new IOException("Single-value attribute " + oid + " ("+ getName()+ ")"+ " has multiple values.");}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.FUNCTION__ACTION:    return action != null;case GamlPackage.FUNCTION__PARAMETERS:  return parameters != null;case GamlPackage.FUNCTION__ARGS:return args != null;case GamlPackage.FUNCTION__TYPE:return type != null;}return super.eIsSet(featureID);}  }
class C{  public Car(org.jdom2.Element e){  super(e);  loaded=true;  org.jdom2.Attribute a;  if ((a=e.getAttribute(Xml.PASSENGER)) != null) {    _passenger=a.getValue().equals(Xml.TRUE);  }  if ((a=e.getAttribute(Xml.HAZARDOUS)) != null) {    _hazardous=a.getValue().equals(Xml.TRUE);  }  if ((a=e.getAttribute(Xml.CABOOSE)) != null) {    _caboose=a.getValue().equals(Xml.TRUE);  }  if ((a=e.getAttribute(Xml.FRED)) != null) {    _fred=a.getValue().equals(Xml.TRUE);  }  if ((a=e.getAttribute(Xml.UTILITY)) != null) {    _utility=a.getValue().equals(Xml.TRUE);  }  if ((a=e.getAttribute(Xml.KERNEL)) != null) {    Kernel k=CarManager.instance().getKernelByName(a.getValue());    if (k != null) {      setKernel(k);      if ((a=e.getAttribute(Xml.LEAD_KERNEL)) != null && a.getValue().equals(Xml.TRUE)) {        _kernel.setLead(this);      }    } else {      log.error("Kernel " + a.getValue() + " does not exist");    }  }  if ((a=e.getAttribute(Xml.LOAD)) != null) {    _loadName=a.getValue();  }  if ((a=e.getAttribute(Xml.LOAD_FROM_STAGING)) != null && a.getValue().equals(Xml.TRUE)) {    setLoadGeneratedFromStaging(true);  }  if ((a=e.getAttribute(Xml.WAIT)) != null) {    try {      _wait=Integer.parseInt(a.getValue());    } catch (    NumberFormatException nfe) {      log.error("Wait count ({}) for car ({}) isn't a valid number!",a.getValue(),toString());    }  }  if ((a=e.getAttribute(Xml.PICKUP_SCHEDULE_ID)) != null) {    _pickupScheduleId=a.getValue();  }  if ((a=e.getAttribute(Xml.SCHEDULE_ID)) != null) {    _scheduleId=a.getValue();  }  if ((a=e.getAttribute(Xml.NEXT_LOAD)) != null) {    _nextLoadName=a.getValue();  }  if ((a=e.getAttribute(Xml.NEXT_WAIT)) != null) {    try {      _nextWait=Integer.parseInt(a.getValue());    } catch (    NumberFormatException nfe) {      log.error("Next wait count ({}) for car ({}) isn't a valid number!",a.getValue(),toString());    }  }  if ((a=e.getAttribute(Xml.NEXT_PICKUP_SCHEDULE_ID)) != null) {    _nextPickupScheduleId=a.getValue();  }  if ((a=e.getAttribute(Xml.NEXT_DEST_ID)) != null) {    setFinalDestination(LocationManager.instance().getLocationById(a.getValue()));  }  if (getFinalDestination() != null && (a=e.getAttribute(Xml.NEXT_DEST_TRACK_ID)) != null) {    setFinalDestinationTrack(getFinalDestination().getTrackById(a.getValue()));  }  if ((a=e.getAttribute(Xml.PREVIOUS_NEXT_DEST_ID)) != null) {    setPreviousFinalDestination(LocationManager.instance().getLocationById(a.getValue()));  }  if (getPreviousFinalDestination() != null && (a=e.getAttribute(Xml.PREVIOUS_NEXT_DEST_TRACK_ID)) != null) {    setPreviousFinalDestinationTrack(getPreviousFinalDestination().getTrackById(a.getValue()));  }  if ((a=e.getAttribute(Xml.PREVIOUS_SCHEDULE_ID)) != null) {    setPreviousScheduleId(a.getValue());  }  if ((a=e.getAttribute(Xml.RWE_DEST_ID)) != null) {    _rweDestination=LocationManager.instance().getLocationById(a.getValue());  }  if (_rweDestination != null && (a=e.getAttribute(Xml.RWE_DEST_TRACK_ID)) != null) {    _rweDestTrack=_rweDestination.getTrackById(a.getValue());  }  if ((a=e.getAttribute(Xml.RWE_LOAD)) != null) {    _rweLoadName=a.getValue();  }  addPropertyChangeListeners();}  }
class C{  public void cross(){  cross(ANIMATION_DURATION_MS);}  }
class C{  public LoginDialog(final Frame owner,final StendhalClient client){  super(owner,true);  this.client=client;  initializeComponent();  WindowUtils.closeOnEscape(this);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:45.754 -0500",hash_original_method="1C9916E491D93B6DAF758D3D738C6EEB",hash_generated_method="15A1411ACDA23E1A918918FF0CDDBE57") public boolean isStreaming(){  return false;}  }
class C{  @Override protected void copyRow(final Key key,final Value value,final Context context) throws IOException, InterruptedException {  compositeKey.setGroup(childTableName);  compositeKey.setKey(key);  compositeVal.setKey(key);  compositeVal.setValue(value);  context.write(compositeKey,compositeVal);}  }
class C{  public static boolean hasTranslucentNavigationBar(Context context){  @SuppressLint("InlinedApi") @SuppressWarnings("UnnecessaryFullyQualifiedName") Boolean translucentNav=ThemeUtil.getBooleanValue(context,android.R.attr.windowTranslucentNavigation);  return translucentNav != null && translucentNav;}  }
class C{  protected boolean isSignificantlyBetter(double newUtility,double utility){  return false;}  }
class C{  public void init(){  setInit(true);}  }
class C{  public static String normalizeMimeType(String type){  if (type == null) {    return null;  }  type=type.trim().toLowerCase(Locale.US);  final int semicolonIndex=type.indexOf(';');  if (semicolonIndex != -1) {    type=type.substring(0,semicolonIndex);  }  return type;}  }
class C{  public void initialize(Map conf,TopologyContext context){}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:52.617 -0400",hash_original_method="EEAFA1105ED04DD7E614744D210BB1BA",hash_generated_method="B81DD5AB449E12F988064BBF1FA0C514") @Override public CharSequence convertToString(Cursor cursor){  if (cursor == null) {    return null;  }  String query=getColumnString(cursor,SearchManager.SUGGEST_COLUMN_QUERY);  if (query != null) {    return query;  }  if (mSearchable.shouldRewriteQueryFromData()) {    String data=getColumnString(cursor,SearchManager.SUGGEST_COLUMN_INTENT_DATA);    if (data != null) {      return data;    }  }  if (mSearchable.shouldRewriteQueryFromText()) {    String text1=getColumnString(cursor,SearchManager.SUGGEST_COLUMN_TEXT_1);    if (text1 != null) {      return text1;    }  }  return null;}  }
class C{  public void addFloat(int o,float x,double d){  if (force_defaults || x != d) {    addFloat(x);    slot(o);  }}  }
class C{  protected boolean updateReplacementString(Document document,char trigger,int offset,ImportRewrite impRewrite) throws CoreException, BadLocationException {  if (impRewrite != null && fFullyQualifiedTypeName != null) {    String replacementString=getReplacementString();    String qualifiedType=fFullyQualifiedTypeName;    if (qualifiedType.indexOf('.') != -1 && replacementString.startsWith(qualifiedType) && !replacementString.endsWith(String.valueOf(';'))) {      List<AbstractTypeDeclaration> types=fInvocationContext.getCompilationUnit().types();      if (types.size() > 0 && types.get(0).getStartPosition() <= offset) {        setReplacementString(impRewrite.addImport(getReplacementString()));        return true;      }    }  }  return false;}  }
class C{  @Override public void prepare(String changedSelector){  AgentAppFrame.SelectionState selState=frame.getSelection();  NQueensBoard board=null;switch (selState.getIndex(NQueensFrame.ENV_SEL)) {case 0:    board=new NQueensBoard(4);  break;case 1:board=new NQueensBoard(8);break;case 2:board=new NQueensBoard(16);break;case 3:board=new NQueensBoard(32);break;}env=new NQueensEnvironment(board);if (selState.getIndex(NQueensFrame.PROBLEM_SEL) == 1) for (int i=0; i < board.getSize(); i++) board.addQueenAt(new XYLocation(i,0));boardDirty=false;agent=null;frame.getEnvView().setEnvironment(env);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public static String joinOnPipe(Map<String,String> toJoin){  return joinOnDelimiter(toJoin,PIPE);}  }
class C{  public boolean printDialog() throws HeadlessException {  if (GraphicsEnvironment.isHeadless()) {    throw new HeadlessException();  }  if (attributes == null) {    attributes=new HashPrintRequestAttributeSet();  }  attributes.add(new Copies(getCopies()));  attributes.add(new JobName(getJobName(),null));  boolean doPrint=false;  DialogTypeSelection dts=(DialogTypeSelection)attributes.get(DialogTypeSelection.class);  if (dts == DialogTypeSelection.NATIVE) {    attributes.remove(DialogTypeSelection.class);    doPrint=printDialog(attributes);    attributes.add(DialogTypeSelection.NATIVE);  } else {    doPrint=printDialog(attributes);  }  if (doPrint) {    JobName jobName=(JobName)attributes.get(JobName.class);    if (jobName != null) {      setJobName(jobName.getValue());    }    Copies copies=(Copies)attributes.get(Copies.class);    if (copies != null) {      setCopies(copies.getValue());    }    Destination dest=(Destination)attributes.get(Destination.class);    if (dest != null) {      try {        mDestType=RasterPrinterJob.FILE;        mDestination=(new File(dest.getURI())).getPath();      } catch (      Exception e) {        mDestination="out.ps";      }    } else {      mDestType=RasterPrinterJob.PRINTER;      PrintService pServ=getPrintService();      if (pServ != null) {        mDestination=pServ.getName();        if (isMac) {          PrintServiceAttributeSet psaSet=pServ.getAttributes();          if (psaSet != null) {            mDestination=psaSet.get(PrinterName.class).toString();          }        }      }    }  }  return doPrint;}  }
class C{  public static ByteArrayOutputStream encode(String plaintext) throws IOException, MessagingException {  ByteArrayOutputStream out=new ByteArrayOutputStream();  byte[] in=plaintext.getBytes();  ByteArrayOutputStream inStream=new ByteArrayOutputStream();  inStream.write(in,0,in.length);  if ((in.length % 3) == 1) {    inStream.write(0);    inStream.write(0);  } else   if ((in.length % 3) == 2) {    inStream.write(0);  }  inStream.writeTo(MimeUtility.encode(out,"base64"));  return out;}  }
class C{  private void savePanelState(SparseArray<Parcelable> icicles){  PanelFeatureState[] panels=mPanels;  if (panels == null) {    return;  }  for (int curFeatureId=panels.length - 1; curFeatureId >= 0; curFeatureId--) {    if (panels[curFeatureId] != null) {      icicles.put(curFeatureId,panels[curFeatureId].onSaveInstanceState());    }  }}  }
class C{  @Override public void restoreEntity(BackupDataInputStream data){  if (!restoreSuccessful) {    return;  }  int dataSize=data.size();  if (mBuffer.length < dataSize) {    mBuffer=new byte[dataSize];  }  try {    int bytesRead=data.read(mBuffer,0,dataSize);    if (DEBUG)     Log.d(TAG,"read " + bytesRead + " of "+ dataSize+ " available");    String backupKey=data.getKey();    if (JOURNAL_KEY.equals(backupKey)) {      if (VERBOSE)       Log.v(TAG,"Journal entry restored");      if (!mKeys.isEmpty()) {        Log.wtf(TAG,keyToBackupKey(mKeys.get(0)) + " received after " + JOURNAL_KEY);        restoreSuccessful=false;        return;      }      Journal journal=new Journal();      MessageNano.mergeFrom(journal,readCheckedBytes(mBuffer,dataSize));      applyJournal(journal);      restoreSuccessful=isBackupCompatible(journal);      return;    }    if (!mExistingKeys.isEmpty() && !mExistingKeys.contains(backupKey)) {      if (DEBUG)       Log.e(TAG,"Ignoring key not present in the backup state " + backupKey);      return;    }    Key key=backupKeyToKey(backupKey);    mKeys.add(key);switch (key.type) {case Key.FAVORITE:      restoreFavorite(key,mBuffer,dataSize);    break;case Key.SCREEN:  restoreScreen(key,mBuffer,dataSize);break;case Key.ICON:restoreIcon(key,mBuffer,dataSize);break;case Key.WIDGET:restoreWidget(key,mBuffer,dataSize);break;default :Log.w(TAG,"unknown restore entity type: " + key.type);mKeys.remove(key);break;}} catch (IOException e) {Log.w(TAG,"ignoring unparsable backup entry",e);}}  }
class C{  public static void availableStoragePortsJson(String id){  List<StoragePortInfo> items=Lists.newArrayList();  CachedResources<StorageSystemRestRep> storageSystems=StorageSystemUtils.createCache();  Map<URI,String> networks=NetworkUtils.getNetworkNames();  List<StoragePortRestRep> storagePorts=StoragePortUtils.getStoragePortsAssignableToVirtualArray(uri(id));  for (  StoragePortRestRep storagePort : storagePorts) {    StoragePortInfo item=new StoragePortInfo(storagePort,storageSystems.get(storagePort.getStorageDevice()));    item.network=networks.get(id(storagePort.getNetwork()));    items.add(item);  }  renderJSON(DataTablesSupport.createJSON(items,params));}  }
class C{  public static boolean await(Condition cond,long time,TimeUnit unit) throws IgniteInterruptedCheckedException {  try {    return cond.await(time,unit);  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();    throw new IgniteInterruptedCheckedException(e);  }}  }
class C{  public static void main(String[] args){  TestRelativeLinks tester=new TestRelativeLinks();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public void fillWithColor(View view,FakerColorComponent component){  validateNotNullableView(view);  validateNotNullableFakerComponent(component);  view.setBackgroundColor(component.randomColor());}  }
class C{  private void runTasks(){  ClassLoader systemClassLoader=ClassLoader.getSystemClassLoader();  ThreadPoolBase pool=_pool;  Thread thread=this;  Outbox outbox=outbox();  boolean isWake=false;  setName(_name);  while (!_isClose) {    RunnableItem taskItem=pool.poll(isWake);    isWake=false;    if (taskItem != null) {      try {        _launcher.onChildIdleEnd();        outbox.open();        do {          thread.setContextClassLoader(taskItem.getClassLoader());          taskItem.getTask().run();          outbox.flushAndExecuteAll();        } while ((taskItem=pool.poll(false)) != null);      } catch (      Throwable e) {        log.log(Level.WARNING,e.toString(),e);      } finally {        try {          outbox.close();        } catch (        Throwable e) {          e.printStackTrace();        }        _launcher.onChildIdleBegin();        thread.setContextClassLoader(systemClassLoader);        if (!thread.getName().equals(_name)) {          setName(_name);        }      }    } else     if (_launcher.isIdleExpire()) {      return;    } else     if (park()) {      isWake=true;    } else {      return;    }  }}  }
class C{  private static Element appendTextElement(Node parent,String namespaceURI,String localName,String text){  Element child=appendElement(parent,namespaceURI,localName);  child.addChild(Element.TEXT,text);  return child;}  }
class C{  @Override public void pool(){  this.allowLearning=null;}  }
class C{  public void insertUserDisplayenInTextEditor(String text){  if (null != text) {    if (TextUtils.isEmpty(mEditText.getText())) {      mEditText.append(sanitizeDisplayname(text) + ": ");    } else {      mEditText.getText().insert(mEditText.getSelectionStart(),sanitizeDisplayname(text) + " ");    }  }}  }
class C{  public static void main(String[] args){  runFilter(new ClassBalancer(),args);}  }
class C{  public JEditorCurrency(){}  }
class C{  public Wallet(NetworkParameters params,KeyCrypter keyCrypter){  this(params);  this.keyCrypter=checkNotNull(keyCrypter);  MultiBitWalletExtension multibitWalletExtension=new MultiBitWalletExtension();  extensions.put(multibitWalletExtension.getWalletExtensionID(),multibitWalletExtension);  setVersion(MultiBitWalletVersion.PROTOBUF_ENCRYPTED);}  }
class C{  public void sample(Integer iteration){  sampled=iteration;}  }
class C{  void shutdown(){  if (shutdownHandler != null) {    shutdownHandler.shutdown();  }}  }
class C{  private void rebootDevice(){  Log.i(TAG,"Reboot request initiated by admin.");  try {    Thread.sleep(5000);    PowerManager powerManager=(PowerManager)getSystemService(Context.POWER_SERVICE);    powerManager.reboot(null);  } catch (  InterruptedException e) {    Log.e(TAG,"Reboot initiating thread interrupted." + e);  }}  }
class C{  @org.junit.Test public void verifyGetBigDecimalResponse() throws Exception {  Map<String,String> queryParams=new HashMap<String,String>();  String str=client.invokeAPI("/mockResponses/primitiveBigDecimalResponse","GET",queryParams,null,new HashMap<String,String>(),null,"application/json",null,new String[0]);  assertEquals(str,String.valueOf(ExampleBuilder.SAMPLE_DECIMAL_PROPERTY_VALUE));}  }
class C{  protected Transform(){}  }
class C{  public PhoneNumber(String value){  this();  setValue(value);}  }
class C{  public final void testMaxLengthWithContextAndResourceIdParameters(){  assertNotNull(Validators.maxLength(getContext(),android.R.string.cancel,1));}  }
class C{  public Comms(EventHandler parent,String host,int port) throws StreamCorruptedException, IOException, UnknownHostException {  this.parent=parent;  this.isServer=false;  this.host=host;  this.port=port;  parent.debug("Creating client");  networkThread=new SocketThread();  new Thread(networkThread).start();  waitForThreadInit(2000);  if (networkThread.thrownUnknownHostException != null) {    throw networkThread.thrownUnknownHostException;  }  if (networkThread.thrownStreamCorruptedException != null) {    throw networkThread.thrownStreamCorruptedException;  }  if (networkThread.thrownIOException != null) {    throw networkThread.thrownIOException;  }}  }
class C{  public final Scanner scanner(){  return scanner;}  }
class C{  public HttpMethodClient(final int connectionTimeout,final int socketTimeout,final int requestTimeout){  final RequestConfig config=RequestConfig.custom().setConnectTimeout(connectionTimeout).setConnectionRequestTimeout(connectionTimeout).setSocketTimeout(socketTimeout).setRedirectsEnabled(false).build();  this.httpClient=HttpAsyncClients.custom().setDefaultRequestConfig(config).setMaxConnPerRoute(MAX_CONNECTIONS_PER_ROUTE).setMaxConnTotal(MAX_CONNECTIONS).build();  this.httpClient.start();  this.requestTimeout=requestTimeout;}  }
class C{  public static double metersToDegreesLatitude(double meters){  return meters / EARTH_CIRCUMFERENCE_METERS * 360;}  }
class C{  public void testAllConnectedBrokerNetwork() throws Exception {  bridgeBrokers("BrokerA","BrokerB");  bridgeBrokers("BrokerB","BrokerA");  bridgeBrokers("BrokerB","BrokerC");  bridgeBrokers("BrokerC","BrokerB");  bridgeBrokers("BrokerA","BrokerC");  bridgeBrokers("BrokerC","BrokerA");  startAllBrokers();  Destination dest=createDestination("TEST.FOO",true);  MessageConsumer clientA=createConsumer("BrokerA",dest);  MessageConsumer clientB=createConsumer("BrokerB",dest);  MessageConsumer clientC=createConsumer("BrokerC",dest);  Thread.sleep(2000);  sendMessages("BrokerA",dest,MESSAGE_COUNT);  sendMessages("BrokerB",dest,MESSAGE_COUNT);  sendMessages("BrokerC",dest,MESSAGE_COUNT);  MessageIdList msgsA=getConsumerMessages("BrokerA",clientA);  MessageIdList msgsB=getConsumerMessages("BrokerB",clientB);  MessageIdList msgsC=getConsumerMessages("BrokerC",clientC);  msgsA.waitForMessagesToArrive(MESSAGE_COUNT * 3);  msgsB.waitForMessagesToArrive(MESSAGE_COUNT * 3);  msgsC.waitForMessagesToArrive(MESSAGE_COUNT * 3);  assertEquals(MESSAGE_COUNT * 3,msgsA.getMessageCount());  assertEquals(MESSAGE_COUNT * 3,msgsB.getMessageCount());  assertEquals(MESSAGE_COUNT * 3,msgsC.getMessageCount());}  }
class C{  private void checkShutdownAccess(){  SecurityManager security=System.getSecurityManager();  if (security != null) {    security.checkPermission(shutdownPerm);    final ReentrantLock mainLock=this.mainLock;    mainLock.lock();    try {      for (      Worker w : workers)       security.checkAccess(w.thread);    }  finally {      mainLock.unlock();    }  }}  }
class C{  @Deprecated public void addDatasource(String name,String sourceName,double percentile){  sources.put(name,new VDef(name,sourceName,new Variable.PERCENTILE(percentile)));}  }
class C{  public static void addSingleCrystallization(String input,String output,float xp){  if (!OreDictionary.getOres(output).isEmpty())   for (  ItemStack stack : OreDictionary.getOres(input))   addSingleCrystallization(stack,OreDictionary.getOres(output).get(0),xp);}  }
class C{  public static void write(char[] data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public void startMessagingApp(Activity context){  if (messenger.isLoggedIn()) {    startMessagingActivity(context);  } else {    startAuthActivity(context);  }}  }
class C{  public Reference(String className,RefAddr addr){  this.className=className;  addrs=new Vector<>();  addrs.addElement(addr);}  }
class C{  public void put(String id,String str){  tab.put(id,str);  if (str.endsWith(".dtd")) {    int i=str.lastIndexOf(File.separator);    if (i >= 0) {      tab.put(str.substring(i + 1,str.length() - 4),str);    }  }}  }
class C{  public KDTreeDecorator(DrawingCanvas inner,ElementCanvas<IMultiPoint> canvas,IRetrieveKDTree m){  super(inner);  this.canvas=canvas;  this.model=m;}  }
class C{  public XMLOptions() throws Exception {  m_XMLDocument=new XMLDocument();  m_XMLDocument.setRootNode(ROOT_NODE);  m_XMLDocument.setDocType(DOCTYPE);  setValidating(true);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:10.437 -0500",hash_original_method="C4EA5DCF4A3C62F4A8277EC33D71D823",hash_generated_method="881CA721F8739CA30DE597C7F8A1024A") WebHistoryItem(byte[] data){  mUrl=null;  mFlattenedData=data;synchronized (WebHistoryItem.class) {    mId=sNextId++;  }}  }
class C{  public static int[] bestSubsequence(String completion,String token){  int bestScore=-1;  int[] bestSequence=EMPTY_SEQUENCE;  for (  int[] s1 : findSequences(completion,token)) {    int score=scoreSubsequence(s1);    if (score > bestScore) {      bestScore=score;      bestSequence=s1;    }  }  return bestSequence;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:54.302 -0400",hash_original_method="4D77A4D18E5F8068BB808BBC9D02F043",hash_generated_method="ECB4C35609396350B0902950CCC50B79") public void addFileSuffix(String fileSuffix){  mFileSuffixList.add(fileSuffix);}  }
class C{  public void onActivityCreated(@Nullable Bundle savedInstanceState){}  }
class C{  public static double[] randomDoubleArray(int len,Random r){  final double[] ret=new double[len];  for (int i=0; i < len; i++) {    ret[i]=r.nextDouble();  }  return ret;}  }
class C{  default void licenceCheck(){}  }
class C{  public static boolean isProxyType(Class<?> type){  String name=type.getName();  if (name.startsWith("net.sf.cglib.proxy.") || name.startsWith("org.hibernate.proxy.")) {    return true;  }  return false;}  }
class C{  public AWTFontFamily(GVTFontFace fontFace,Font font){  this.fontFace=fontFace;  this.font=font;}  }
class C{  public long length() throws SerialException {  isValid();  return len;}  }
class C{  public double interceptStdErr(){  return Math.sqrt(svar0);}  }
class C{  private OracleCollection createCollection(String collectionName,CollectionDescriptor options) throws OracleException {  return createCollection(collectionName,options,COLLECTION_CREATION_MODE);}  }
class C{  @Override protected boolean isInAlphabet(final byte octet){  return octet >= 0 && octet < decodeTable.length && decodeTable[octet] != -1;}  }
class C{  protected void onMeasureChild(View child,int position,int widthMeasureSpec,int heightMeasureSpec){  child.measure(widthMeasureSpec,heightMeasureSpec);}  }
class C{  public boolean contains(byte shieldId){  return shieldsIds.contains(shieldId);}  }
class C{  protected void sequence_BlockMinusBraces(ISerializationContext context,Block semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public boolean isHeartbeatActive(){  return _serverBartender.isUp();}  }
class C{  public ToStringBuilder append(String fieldName,byte value){  style.append(buffer,fieldName,value);  return this;}  }
class C{  @SuppressWarnings("unchecked") FullArray(Class<L> linearArrayType,L real,L imag,int[] dimensions){  _dimensions=dimensions;  _numberOfElements=ArrayUtils.getNumberOfElements(_dimensions);  _real=linearArrayType.cast(real);  _imag=linearArrayType.cast(imag);  _baseComponentType=linearArrayType.getComponentType();  _linearArrayType=linearArrayType;  _outputArrayType=(Class<T>)ArrayUtils.getArrayClass(_baseComponentType,dimensions.length);}  }
class C{  public static void register(){  CommandCenter.register(FACE,new FaceAction());}  }
class C{  public static String changeReturnType(String classname,String desc){  int i=desc.indexOf(')');  if (i < 0)   return desc; else {    StringBuffer newdesc=new StringBuffer();    newdesc.append(desc.substring(0,i + 1));    newdesc.append('L');    newdesc.append(classname.replace('.','/'));    newdesc.append(';');    return newdesc.toString();  }}  }
class C{  @Inline public static boolean needsCheckArgs(ReflectionBase invoker){  return !bytecodeReflection && !cacheInvokerInJavaLangReflect;}  }
class C{  public static void callEMCRefresh(SmisCommandHelper helper,StorageSystem storage){  try {    _log.info("Refreshing storagesystem: {}",storage.getId());    helper.callRefreshSystem(storage,null);  } catch (  Exception e) {    _log.error("Exception callEMCRefresh",e);  }}  }
class C{  public boolean isRequired(){  if (parameter.isConfigurable()) {    return false;  }  return parameterDefinition.isMandatory();}  }
class C{  public ConnectionConfig(jmri.jmrix.NetworkPortAdapter p){  super(p);}  }
class C{  public static PrivKey load(byte[] keyBytes,final String password) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException, InvalidParameterSpecException {  boolean isEncrypted=false;  String dekAlgName="";  byte[] ivBytes=null;  if (((keyBytes[0] == (byte)'-' && keyBytes[1] == (byte)'-' && keyBytes[2] == (byte)'-')) || ((keyBytes[3] == (byte)'-' && keyBytes[4] == (byte)'-' && keyBytes[5] == (byte)'-'))) {    String privKeyPEM=new String(keyBytes);    String[] dekInfo;    Scanner scanner=new Scanner(privKeyPEM);    StringBuilder keyString;    boolean isBase64Encoded;    try {      keyString=new StringBuilder();      String ivString="";      isBase64Encoded=false;      while (scanner.hasNextLine()) {        String line=scanner.nextLine();        if (line.matches(BEGIN_PRIVATE_KEY_REGEX))         isBase64Encoded=true; else         if (line.matches(END_PRIVATE_KEY_REGEX))         break; else         if (line.startsWith("Proc-Type: 4,ENCRYPTED"))         isEncrypted=true; else         if (line.startsWith("DEK-Info:")) {          dekInfo=line.substring(10).split(",");          dekAlgName=dekInfo[0];          ivString=dekInfo[1];          ivBytes=CryptoUtil.hexToBytes(ivString);        } else         keyString.append(line.trim());      }    }  finally {      scanner.close();    }    if (isBase64Encoded)     keyBytes=CryptoUtil.base64Decode(keyString.toString());  }  if (isEncrypted) {    if (password == null || password.isEmpty())     throw new SecurityException("Encrypted private key requires a password.");    IvParameterSpec ivSpec=new IvParameterSpec(ivBytes);    String[] dekAlgParts=dekAlgName.split("-");    String alg=dekAlgParts[0];    int keyBits=dekAlgParts.length > 1 ? Integer.parseInt(dekAlgParts[1]) : 128;    if (true) {      byte[] salt=ivBytes;      if (salt.length > 8) {        salt=new byte[8];        System.arraycopy(ivBytes,0,salt,0,8);      }      byte[] pw=BouncyCastleUtils.PKCS5PasswordToBytes(password.toCharArray());      byte[] sKey=generateDerivedKey(keyBits / 8,pw,salt);      SecretKeySpec keySpec=new SecretKeySpec(sKey,alg);      Cipher cipher=Cipher.getInstance("AES/CBC/PKCS5Padding");      cipher.init(Cipher.DECRYPT_MODE,keySpec,ivSpec);      keyBytes=cipher.doFinal(keyBytes);    }  }  return new PrivKey(keyBytes);}  }
class C{  @Override public boolean supportsOpenStatementsAcrossRollback(){  debugCodeCall("supportsOpenStatementsAcrossRollback");  return true;}  }
class C{  public String encodeBody(){  return optionTag;}  }
class C{  public static String toPropertyName(String httpHeader){  httpHeader=httpHeader.replace('-','$');  return "http_" + httpHeader.toLowerCase();}  }
class C{  public Outline(){}  }
class C{  public TechnicalServiceNotAliveException(){  super();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:31.759 -0500",hash_original_method="3D77B6F49E03B0770D03717F27BECD0E",hash_generated_method="3D77B6F49E03B0770D03717F27BECD0E") void calculateValue(float fraction){  mAnimatedValue=mKeyframeSet.getValue(fraction);}  }
class C{  public void clearRect(int x,int y,int width,int height){  g.clearRect(x,y,width,height);}  }
class C{  public boolean init(){  log.config("");  MClient client=MClient.get(Env.getCtx());  String ASPFilter="";  if (client.isUseASP())   ASPFilter="   AND (   p.AD_Process_Para_ID IN ( " + "              SELECT pp.AD_Process_Para_ID " + "                FROM ASP_Process_Para pp, ASP_Process p, ASP_Level l, ASP_ClientLevel cl "+ "               WHERE p.ASP_Level_ID = l.ASP_Level_ID "+ "                 AND cl.AD_Client_ID = " + client.getAD_Client_ID() + "                 AND cl.ASP_Level_ID = l.ASP_Level_ID "+ "                 AND pp.ASP_Process_ID = p.ASP_Process_ID "+ "                 AND pp.IsActive = 'Y' "+ "                 AND p.IsActive = 'Y' "+ "                 AND l.IsActive = 'Y' "+ "                 AND cl.IsActive = 'Y' "+ "                 AND pp.ASP_Status = 'S') "+ "        OR p.AD_Process_Para_ID IN ( "+ "              SELECT AD_Process_Para_ID "+ "                FROM ASP_ClientException ce "+ "               WHERE ce.AD_Client_ID = "+ client.getAD_Client_ID()+ "                 AND ce.IsActive = 'Y' "+ "                 AND ce.AD_Process_Para_ID IS NOT NULL "+ "                 AND ce.AD_Tab_ID IS NULL "+ "                 AND ce.AD_Field_ID IS NULL "+ "                 AND ce.ASP_Status = 'S') "+ "       ) "+ "   AND p.AD_Process_Para_ID NOT IN ( "+ "          SELECT AD_Process_Para_ID "+ "            FROM ASP_ClientException ce "+ "           WHERE ce.AD_Client_ID = "+ client.getAD_Client_ID()+ "             AND ce.IsActive = 'Y' "+ "             AND ce.AD_Process_Para_ID IS NOT NULL "+ "             AND ce.AD_Tab_ID IS NULL "+ "             AND ce.AD_Field_ID IS NULL "+ "             AND ce.ASP_Status = 'H')";  String sql=null;  if (Env.isBaseLanguage(Env.getCtx(),"AD_Process_Para"))   sql="SELECT p.Name, p.Description, p.Help, " + "p.AD_Reference_ID, p.AD_Process_Para_ID, " + "p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, "+ "p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, "+ "p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode, "+ "p.ReadOnlyLogic, p.DisplayLogic "+ "FROM AD_Process_Para p"+ " LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) "+ "WHERE p.AD_Process_ID=?"+ " AND p.IsActive='Y' " + ASPFilter + " ORDER BY SeqNo"; else   sql="SELECT t.Name, t.Description, t.Help, " + "p.AD_Reference_ID, p.AD_Process_Para_ID, " + "p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, "+ "p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, "+ "p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode, "+ "p.ReadOnlyLogic, p.DisplayLogic "+ "FROM AD_Process_Para p"+ " INNER JOIN AD_Process_Para_Trl t ON (p.AD_Process_Para_ID=t.AD_Process_Para_ID)"+ " LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) "+ "WHERE p.AD_Process_ID=?"+ " AND t.AD_Language='" + Env.getAD_Language(Env.getCtx()) + "'"+ " AND p.IsActive='Y' "+ ASPFilter+ " ORDER BY SeqNo";  boolean hasFields=false;  Rows rows=new Rows();  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_processInfo.getAD_Process_ID());    ResultSet rs=pstmt.executeQuery();    int field=0;    Row row=null;    while (rs.next()) {      hasFields=true;      field++;      if (field % 2 == 0 && mode == BROWSER_MODE) {        row=createField(rs,rows,row);      } else {        row=createField(rs,rows,null);      }    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  if (m_mFields.size() != m_mFields2.size() || m_mFields.size() != m_wEditors.size() || m_mFields2.size() != m_wEditors2.size())   log.log(Level.SEVERE,"View & Model vector size is different");  if (hasFields) {    centerPanel.appendChild(rows);    dynamicDisplay();  } else   dispose();  return hasFields;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:15.607 -0500",hash_original_method="BCFC763048FB40D22AF5E3F4AE92979E",hash_generated_method="A6B30A4741083A789C035F2D9F29B245") public static boolean isSupported(String name){  return protocolsByName.containsKey(name);}  }
class C{  public Ed25519GroupElement add(final Ed25519GroupElement g){  if (this.coordinateSystem != CoordinateSystem.P3) {    throw new UnsupportedOperationException();  }  if (g.coordinateSystem != CoordinateSystem.CACHED) {    throw new IllegalArgumentException();  }  final Ed25519FieldElement YPlusX;  final Ed25519FieldElement YMinusX;  final Ed25519FieldElement ZSquare;  final Ed25519FieldElement A;  final Ed25519FieldElement B;  final Ed25519FieldElement C;  final Ed25519FieldElement D;  YPlusX=this.Y.add(this.X);  YMinusX=this.Y.subtract(this.X);  A=YPlusX.multiply(g.X);  B=YMinusX.multiply(g.Y);  C=g.T.multiply(this.T);  ZSquare=this.Z.multiply(g.Z);  D=ZSquare.add(ZSquare);  return p1xp1(A.subtract(B),A.add(B),D.add(C),D.subtract(C));}  }
class C{  protected boolean isSplitable(JobContext context,Path filename){  return false;}  }
class C{  private int countToken(String token,String target){  int tokenIndex=0;  int count=0;  while (tokenIndex != -1) {    tokenIndex=target.indexOf(token,tokenIndex);    if (tokenIndex > -1) {      tokenIndex++;      count++;    }  }  return count;}  }
class C{  public static void shutdown(final Context context,boolean confirm){  mReboot=false;  mRebootSafeMode=false;  shutdownInner(context,confirm);}  }
class C{  public void load(ArrayList<String> lines){  boolean[][] loaded=new boolean[_size][_size];  for (int j=0; j < _size; j++) {    String l=lines.get(j);    for (int k=0; k < _size; k++) {      _cells[j][k].resetBeenAlive();      if (l.charAt(k) == '.') {        _cells[j][k].setAlive(false);        loaded[j][k]=false;      } else {        _cells[j][k].setAlive(true);        loaded[j][k]=true;      }    }  }  displayIteration(loaded);}  }
class C{  public boolean process(){  return this.process;}  }
class C{  public void computeUtlimateDependencies(CompiledValue cv,Set set){  Set dependencySet=this.getDependencySet(cv,true);  if (dependencySet != Collections.EMPTY_SET) {    Iterator iter=dependencySet.iterator();    RuntimeIterator rIter;    while (iter.hasNext()) {      rIter=(RuntimeIterator)iter.next();      Set indRuntimeIterators=(Set)this.itrDefToIndpndtRuntimeItrMap.get(rIter.getCmpIteratorDefn());      if (indRuntimeIterators != null) {        set.addAll(indRuntimeIterators);      }    }  }}  }
class C{  public static org.oscm.vo.VOServiceOperationParameter convertToApi(org.oscm.internal.vo.VOServiceOperationParameter oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOServiceOperationParameter newVO=new org.oscm.vo.VOServiceOperationParameter();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setParameterId(oldVO.getParameterId());  newVO.setParameterName(oldVO.getParameterName());  newVO.setParameterValue(oldVO.getParameterValue());  newVO.setMandatory(oldVO.isMandatory());  newVO.setType(EnumConverter.convert(oldVO.getType(),OperationParameterType.class));  return newVO;}  }
class C{  protected void release() throws IOException {}  }
class C{  public boolean intersects(R1Interval y){  if (lo() <= y.lo()) {    return y.lo() <= hi() && y.lo() <= y.hi();  } else {    return lo() <= y.hi() && lo() <= hi();  }}  }
class C{  public void closeDriver(){  if (camera != null) {    FlashlightManager.disableFlashlight();    camera.release();    camera=null;  }}  }
class C{  protected WebDriver createWebDriverWithTimeout(){  long time=0;  while (time < getTimeout()) {    try {      driver=createNativeDriver();      return driver;    } catch (    WebDriverException ex) {      if (ex.getMessage().contains("SocketException") || ex.getMessage().contains("Failed to connect to binary FirefoxBinary") || ex.getMessage().contains("Unable to bind to locking port 7054 within 45000 ms")) {        try {          Thread.sleep(1000);        } catch (        InterruptedException e) {        }        time++;      } else {        throw new RuntimeException(ex);      }    }  }  throw new RuntimeException("Got customexception when creating webDriver with socket timeout 1 minute");}  }
class C{  private void emit2(int od){  if (!alive)   return;  if (cp + 2 > code.length) {    emit1(od >> 8);    emit1(od);  } else {    code[cp++]=(byte)(od >> 8);    code[cp++]=(byte)od;  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private static String constructSetChildrenErrorMessage(ViewGroup viewToManage,ViewGroupManager viewManager,ReadableArray childrenTags){  ViewAtIndex[] viewsToAdd=new ViewAtIndex[childrenTags.size()];  for (int i=0; i < childrenTags.size(); i++) {    viewsToAdd[i]=new ViewAtIndex(childrenTags.getInt(i),i);  }  return constructManageChildrenErrorMessage(viewToManage,viewManager,null,viewsToAdd,null);}  }
class C{  public final void popExpressionState(){  m_currentNodes.quickPop(1);  m_currentExpressionNodes.quickPop(1);  m_prefixResolvers.pop();}  }
class C{  public VerbTag(String name){  super(name);}  }
class C{  public CombinedXYChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer,CombinedXYChart.XYCombinedChartDef[] chartDefinitions,XYChart[] charts){  super(dataset,renderer);  this.chartDefinitions=chartDefinitions;  this.mCharts=charts;}  }
class C{  public boolean canChangeContents(){  return true;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (pluginHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    pluginHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public int process(Buffer input,Buffer output){  if (input == null || output == null) {    return BUFFER_PROCESSED_FAILED;  }  extractNalUnitHeader(input);  if (mNalUnitHeader.isFragmentationUnit()) {    return handleFragmentationUnitPacket(input,output);  } else   if (mNalUnitHeader.isAggregationPacket()) {    return handleAggregationPacket(input,output);  } else {    return handleSingleNalUnitPacket(input,output);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col;  double x, y;  int i;  int progress=0;  WhiteboxRaster.DataType dataType=WhiteboxRaster.DataType.FLOAT;  String whatToAssign=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      if (args[i].toLowerCase().contains("col")) {        whatToAssign="column";      } else       if (args[i].toLowerCase().contains("row")) {        whatToAssign="row";      } else       if (args[i].toLowerCase().contains("x")) {        whatToAssign="x";      } else       if (args[i].toLowerCase().contains("y")) {        whatToAssign="y";      } else {        showFeedback("Could not determine what variable to assign to grid cells.");        return;      }    } else     if (i == 3) {      if (args[i].toLowerCase().contains("double")) {        dataType=WhiteboxRaster.DataType.DOUBLE;      } else       if (args[i].toLowerCase().contains("float")) {        dataType=WhiteboxRaster.DataType.FLOAT;      } else       if (args[i].toLowerCase().contains("int")) {        dataType=WhiteboxRaster.DataType.INTEGER;      }    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,dataType,-32768);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    if (whatToAssign.equals("column")) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          output.setValue(row,col,col);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else     if (whatToAssign.equals("row")) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          output.setValue(row,col,row);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else     if (whatToAssign.equals("x")) {      double halfCellSize=image.getCellSizeX() / 2;      double west=image.getWest();      double east=image.getEast();      if (west > east) {        west=west - halfCellSize;        east=east + halfCellSize;      } else {        west=west + halfCellSize;        east=east - halfCellSize;      }      double range=east - west;      double colsLessOne=(double)cols - 1;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          x=west + col / colsLessOne * range;          output.setValue(row,col,x);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else     if (whatToAssign.equals("y")) {      double halfCellSize=image.getCellSizeY() / 2;      double north=image.getNorth();      double south=image.getSouth();      if (north > south) {        north=north - halfCellSize;        south=south + halfCellSize;      } else {        north=north + halfCellSize;        south=south - halfCellSize;      }      double range=north - south;      double rowsLessOne=(double)rows - 1;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          y=north - row / rowsLessOne * range;          output.setValue(row,col,y);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static double rho(ExampleSet eSet,Attribute a,Attribute b) throws OperatorException {  return rho(eSet,a,b,0.0);}  }
class C{  @SuppressWarnings("unchecked") private <T>T allowStaticAccessToMember(T member,boolean staticOnly){  if (member == null)   return null;  if (!staticOnly)   return member;  boolean isStatic;  if (member instanceof Variable) {    Variable v=(Variable)member;    isStatic=Modifier.isStatic(v.getModifiers());  } else   if (member instanceof List) {    List<MethodNode> list=(List<MethodNode>)member;    if (list.size() == 1) {      return (T)Collections.singletonList(allowStaticAccessToMember(list.get(0),staticOnly));    }    return (T)Collections.emptyList();  } else {    MethodNode mn=(MethodNode)member;    isStatic=mn.isStatic();  }  if (staticOnly && !isStatic)   return null;  return member;}  }
class C{  public void saveReferences(Collection<ExpressionObject<?>> references){  for (  ExpressionObject<?> ref : references) {    if (ref.isInternalDynamic()) {      ref.setDynamic(false);      if (ref instanceof Dimension) {        ref=DAOFactory.getDAOFactory().getDAO(Dimension.class).create(universe.getContext(),(Dimension)ref);      } else       if (ref instanceof Metric) {        ref=DAOFactory.getDAOFactory().getDAO(Metric.class).create(universe.getContext(),(Metric)ref);      }    }  }}  }
class C{  public double maxX(){  return Math.max(p0.x,p1.x);}  }
class C{  public static ProvisionNamespaceTransaction createProvisionNamespaceTransaction(){  return new ProvisionNamespaceTransaction(TimeInstant.ZERO,Utils.generateRandomAccount(),Utils.generateRandomAccount(),Amount.fromNem(50_000),new NamespaceIdPart("bar"),new NamespaceId("foo"));}  }
class C{  public static void callbackRegistration(String method,String modname){  String[] splitName=method.split("\\.");  String methodName=splitName[splitName.length - 1];  String className=method.substring(0,method.length() - methodName.length() - 1);  APIInstanceProvider providerinst=InternalAPI.getAPIProviderInstance(modname);  if (providerinst == null) {    LoggerUtils.error(String.format("Could not initialize API provider instance for %s",modname));    return;  }  LoggerUtils.info(String.format("Trying to call (reflection) %s %s",className,methodName));  try {    Class reflectClass=Class.forName(className);    Method reflectMethod=reflectClass.getDeclaredMethod(methodName,APIInstanceProvider.class);    reflectMethod.invoke(null,providerinst);    LoggerUtils.info(String.format("API provided to %s",modname));  } catch (  ClassNotFoundException e) {    LoggerUtils.error(String.format("Could not find class %s",className));  }catch (  NoSuchMethodException e) {    LoggerUtils.error(String.format("Could not find method %s",methodName));  }catch (  Exception e) {    LoggerUtils.error(String.format("Exception while calling the method %s.%s",className,methodName));    e.printStackTrace();  }}  }
class C{  @SuppressWarnings("rawtypes") public static Object autoVivifyListOrMap(Object property){  String str=property.toString();  boolean isList=("add".equals(str) || str.startsWith("insert@"));  if (!isList && !"java.lang.String".equals(property.getClass().getName())) {    Integer index=UtilMisc.toIntegerObject(property);    isList=(index != null);  }  if (isList) {    return new LinkedList();  } else {    return new HashMap();  }}  }
class C{  @Override public void run(){  response.setContentType(PLAIN_TEXT_UTF_8);  try {    Registry registry=Registry.get(tld);    String resultMsg;    if (registry.getReservedLists().isEmpty() && isNullOrEmpty(registry.getDriveFolderId())) {      resultMsg="No reserved lists configured";      logger.infofmt("No reserved terms to export for TLD %s",tld);    } else {      checkNotNull(registry.getDriveFolderId(),"No drive folder associated with this TLD");      resultMsg=driveConnection.createOrUpdateFile(RESERVED_TERMS_FILENAME,EXPORT_MIME_TYPE,registry.getDriveFolderId(),exportReservedTerms(registry).getBytes(UTF_8));      logger.infofmt("Exporting reserved terms succeeded for TLD %s, response was: %s",tld,resultMsg);    }    response.setStatus(SC_OK);    response.setPayload(resultMsg);  } catch (  Throwable e) {    response.setStatus(SC_INTERNAL_SERVER_ERROR);    response.setPayload(e.getMessage());    throw new RuntimeException(String.format("Exception occurred while exporting reserved terms for TLD %s.",tld),e);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:44.474 -0500",hash_original_method="D48176638CA08E926D8083B62CC7EB27",hash_generated_method="F8A2DBAD4957C2E8530D4BBC1D7A1A43") public boolean exists(){  return true;}  }
class C{  private void addEmptyLine(Paragraph paragraph,int number){  for (int i=0; i < number; i++) {    paragraph.add(new Paragraph(" "));  }}  }
class C{  private boolean doCharacterAVM(int position) throws SolverTimeoutException {  checkpointVar(DistanceEstimator.getDistance(cnstr));  boolean done=false;  boolean hasImproved=false;  while (!done) {    if (isFinished()) {      throw new SolverTimeoutException();    }    done=true;    String origString=strVar.getConcreteValue();    char oldChar=origString.charAt(position);    char[] characters=origString.toCharArray();    char replacement=oldChar;    replacement=nextChar(replacement,1);    characters[position]=replacement;    String newString=new String(characters);    strVar.setConcreteValue(newString);    double newDist=DistanceEstimator.getDistance(cnstr);    log.debug("Probing increment " + position + ": "+ newString+ ": "+ newDist+ " replacement = "+ (int)replacement);    if (distImpr(newDist)) {      checkpointVar(newDist);      if (newDist == 0.0)       return true;      done=false;      hasImproved=true;      iterateCharacterAVM(position,2);    } else {      replacement=nextChar(replacement,-2);      characters[position]=replacement;      newString=new String(characters);      strVar.setConcreteValue(newString);      newDist=DistanceEstimator.getDistance(cnstr);      log.debug("Probing decrement " + position + ": "+ newString+ ": "+ newDist+ " replacement = "+ (int)replacement);      if (distImpr(newDist)) {        checkpointVar(newDist);        if (newDist == 0.0)         return true;        done=false;        hasImproved=true;        iterateCharacterAVM(position,-2);      } else {        replacement=(char)(oldChar + 32);        characters[position]=replacement;        newString=new String(characters);        strVar.setConcreteValue(newString);        newDist=DistanceEstimator.getDistance(cnstr);        log.debug("Probing increment [32] " + position + ": "+ newString+ ": "+ newDist+ " replacement = "+ (int)replacement);        if (distImpr(newDist)) {          checkpointVar(newDist);          done=false;          hasImproved=true;          break;        } else {          replacement=(char)(oldChar + 32);          characters[position]=replacement;          newString=new String(characters);          strVar.setConcreteValue(newString);          newDist=DistanceEstimator.getDistance(cnstr);          log.debug("Probing increment [32] " + position + ": "+ newString+ ": "+ newDist+ " replacement = "+ (int)replacement);          if (distImpr(newDist)) {            checkpointVar(newDist);            done=false;            hasImproved=true;          } else {            restoreVar();          }        }        if (done)         log.debug("Search finished " + position + ": "+ newString+ ": "+ newDist); else         log.debug("Going for another iteration at position " + position);      }    }  }  return hasImproved;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Inject public DefaultMailService(SystemConfiguration config){  super(config);  requireArgument(config != null,"Configuration cannot be null.");  _config=config;}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processRequest(request,response);}  }
class C{  private String addEnableImageAccessForCreateReplicaStep(Workflow workflow,ProtectionSystem rpSystem,Class<? extends DataObject> clazz,List<URI> copyList,String bookmarkName,Set<String> volumeWWNs,String waitFor) throws InternalException {  String stepId=workflow.createStepId();  Workflow.Method enableImageAccessExecuteMethod=new Workflow.Method(METHOD_ENABLE_IMAGE_ACCESS_CREATE_REPLICA_STEP,rpSystem.getId(),clazz,copyList,bookmarkName,volumeWWNs);  Workflow.Method enableImageAccessExecutionRollbackMethod=new Workflow.Method(METHOD_DISABLE_IMAGE_ACCESS_CREATE_REPLICA_STEP,rpSystem.getId(),clazz,copyList,volumeWWNs);  workflow.createStep(STEP_ENABLE_IMAGE_ACCESS,String.format("Enable image access for bookmark %s",bookmarkName),waitFor,rpSystem.getId(),rpSystem.getSystemType(),this.getClass(),enableImageAccessExecuteMethod,enableImageAccessExecutionRollbackMethod,stepId);  _log.info(String.format("Added enable image access for bookmark %s step [%s] in workflow",bookmarkName,stepId));  return STEP_ENABLE_IMAGE_ACCESS;}  }
class C{  public void expandTree(){  _bugTree.getTreeHelper().expandTree(3);}  }
class C{  public TouchHandlerOld(GraphicalView view,AbstractChart chart){  graphicalView=view;  zoomR=graphicalView.getZoomRectangle();  if (chart instanceof XYChart) {    mRenderer=((XYChart)chart).getRenderer();  } else {    mRenderer=((RoundChart)chart).getRenderer();  }  if (mRenderer.isPanEnabled()) {    mPan=new Pan(chart);  }}  }
class C{  public long optLong(int index,long defaultValue){  try {    return this.getLong(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static void releaseSystemSensorManager(){  if (systemSensorManager != null) {    systemSensorManager.stopSensor();  }  systemSensorManager=null;}  }
class C{  public void merge(final WroModel importedModel){  Validate.notNull(importedModel,"imported model cannot be null!");  LOG.debug("merging importedModel: {}",importedModel);  for (  final String groupName : new WroModelInspector(importedModel).getGroupNames()) {    if (new WroModelInspector(this).getGroupNames().contains(groupName)) {      throw new WroRuntimeException("Duplicate group name detected: " + groupName);    }    final Group importedGroup=new WroModelInspector(importedModel).getGroupByName(groupName);    addGroup(importedGroup);  }}  }
class C{  public void deleteMax(){  if (isEmpty())   throw new NoSuchElementException("called deleteMax() with empty symbol table");  root=deleteMax(root);  assert check();}  }
class C{  public void visitAnnotation(@DottedClassName String annotationClass,Map<String,ElementValue> map,boolean runtimeVisible){  if (DEBUG) {    System.out.println("Annotation: " + annotationClass);    for (    Map.Entry<String,ElementValue> e : map.entrySet()) {      System.out.println("    " + e.getKey());      System.out.println(" -> " + e.getValue());    }  }}  }
class C{  private void updateUiAfterResponse(String feature,String state,String featureMetadata,String ruleMetadata,boolean cached){  featureButton.setText(feature + " is " + (state == Toggle.ENABLED ? "enabled" : "disabled"));  featureButton.setEnabled(state == Toggle.ENABLED);  featureMetadataTextView.setText("Feature Metadata: " + ruleMetadata);  ruleMetadataTextView.setText("Rule Metadata: " + ruleMetadata);  cachedTextView.setText("Cached: " + cached);}  }
class C{  public MultiMineServer(){  partiallyMinedBlocksListByDimension=Maps.<Integer,List<PartiallyMinedBlock>>newHashMap();  instance=this;  blockRegenQueue=new BlockRegenQueue(30,new BlockAgeComparator());  blacklistedBlocksAndTools=Maps.<String,Boolean>newHashMap();  final Set<Entry<String,Property>> setblocks=MultiMine.instance().config.getCategory("bannedblocks").entrySet();  for (  Entry<String,Property> entry : setblocks) {    blacklistedBlocksAndTools.put(entry.getKey(),entry.getValue().getBoolean(false));  }  final Set<Entry<String,Property>> setitems=MultiMine.instance().config.getCategory("banneditems").entrySet();  for (  Entry<String,Property> entry : setitems) {    blacklistedBlocksAndTools.put(entry.getKey(),entry.getValue().getBoolean(false));  }  MinecraftForge.EVENT_BUS.register(this);}  }
class C{  void startHttpServer() throws IOException {  httpServer=com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(0),0);  HttpContext ctx=httpServer.createContext("/test/",new MyHandler());  httpServer.start();}  }
class C{  public KeyStroke(Character character,boolean ctrlDown,boolean altDown){  this(KeyType.Character,character,ctrlDown,altDown,false);}  }
class C{  public Element parseXML(InputStream input) throws Exception {  Document document=getParser().parse(input);  return document.getDocumentElement();}  }
class C{  public strong addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public String nextToken() throws JSONException {  char c;  char q;  StringBuffer sb=new StringBuffer();  do {    c=next();  } while (Character.isWhitespace(c));  if (c == '"' || c == '\'') {    q=c;    for (; ; ) {      c=next();      if (c < ' ') {        throw syntaxError("Unterminated string.");      }      if (c == q) {        return sb.toString();      }      sb.append(c);    }  }  for (; ; ) {    if (c == 0 || Character.isWhitespace(c)) {      return sb.toString();    }    sb.append(c);    c=next();  }}  }
class C{  private KNNHeap linearScan(Relation<? extends O> relation,DBIDIter iter,final O obj,KNNHeap heap){  double max=Double.POSITIVE_INFINITY;  while (iter.valid()) {    final double dist=SQUARED.distance(obj,relation.get(iter));    if (dist <= max) {      max=heap.insert(dist,iter);    }    iter.advance();  }  return heap;}  }
class C{  @Override protected boolean isBalanced(){  return totalLength >= minLengthByDepth[treeDepth];}  }
class C{  public <T extends DataObject>T findById(URI id){  if (id == null) {    throw DatabaseException.fatals.nullIdProvided();  }  Class<T> modelClass=getModelClass(id);  if (modelClass != null) {    return of(modelClass).findById(id);  } else {    return null;  }}  }
class C{  public void createAsyncScenario04() throws Exception {  freePeriodBasicScenario("test_04","Test02Customer","test04CustomerOrg",7,TestPriceModel.EXAMPLE_RATA_WEEK_PARAM,false,false,null);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public String apply(MediaElement shaper) throws RoomException {  return apply(shaper,null);}  }
class C{  public Iterator(String s){  desc=s;  index=curPos=0;  param=false;}  }
class C{  public void send(Message message){  Transport smtp=null;  try {    smtp=_session.getTransport("smtp");    smtp.connect();    smtp.send(message,_to);    log.fine(this + " sent mail to " + _to[0]);  } catch (  RuntimeException e) {    throw e;  }catch (  Exception e) {    throw new RuntimeException(e);  } finally {    try {      if (smtp != null)       smtp.close();    } catch (    Exception e) {      log.log(Level.FINER,e.toString(),e);    }  }}  }
class C{  public <V>HashMap<String,V> newStringMap(){  return dbSettings.databaseToUpper ? new HashMap<String,V>() : new CaseInsensitiveMap<V>();}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,DM dm,int size){  Assert.assertTrue(recipient != null,"SizeReplyMessage NULL reply message");  SizeReplyMessage m=new SizeReplyMessage(processorId,size);  m.setRecipient(recipient);  dm.putOutgoing(m);}  }
class C{  public boolean compete(NamespaceSpecification other){  if ("".equals(other.wildcard)) {    return covers(other.ns);  }  String[] otherParts=split(other.ns,other.wildcard);  if (otherParts.length == 1) {    return covers(other.ns);  }  if ("".equals(wildcard)) {    return other.covers(ns);  }  String[] parts=split(ns,wildcard);  if (parts.length == 1) {    return other.covers(ns);  }  return matchPrefix(parts[0],otherParts[0]) && matchPrefix(parts[parts.length - 1],otherParts[otherParts.length - 1]);}  }
class C{  public void addFirst(RTLStatement statement){  if (statement != null) {    sequence.addFirst(statement);  }}  }
class C{  @Override public BufferedImage JPEG2000ToRGBImage(final byte[] data,int w,int h,final int pX,final int pY,final int d) throws PdfException {  byte[] index=this.getIndexedMap();  if (cs.getNumComponents() == 3 || index != null) {    return super.JPEG2000ToRGBImage(data,w,h,pX,pY,d);  } else {    return JPEG2000ToImage(data,pX,pY);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void apply(Example e){  if (this.applicable(e)) {    if (rejectionSampling) {      coveredWeight++;      if ((int)e.getLabel() == this.prediction) {        positiveWeight++;      }    } else {      coveredWeight+=e.getWeight();      if ((int)e.getLabel() == this.prediction) {        positiveWeight+=e.getWeight();      }    }  }}  }
class C{  private CellIdentityLte(Parcel in){  mMcc=in.readInt();  mMnc=in.readInt();  mCi=in.readInt();  mPci=in.readInt();  mTac=in.readInt();  if (DBG)   log("CellIdentityLte(Parcel): " + toString());}  }
class C{  public void testConstructorSetsPropertyDefaults() throws Exception {  assertEquals(configuration.getPropertyValue(WebLogicPropertySet.ADMIN_USER),"weblogic");  assertEquals(configuration.getPropertyValue(WebLogicPropertySet.ADMIN_PWD),"weblogic");  assertEquals(configuration.getPropertyValue(WebLogicPropertySet.SERVER),"server");  assertEquals(configuration.getPropertyValue(WebLogicPropertySet.CONFIGURATION_VERSION),"10.0.1.0");  assertEquals(configuration.getPropertyValue(WebLogicPropertySet.DOMAIN_VERSION),"10.0.1.0");}  }
class C{  public CActionSelectSameParentFunction(final ZyGraph graph,final INaviFunction function){  super("Select nodes from the same function");  m_graph=Preconditions.checkNotNull(graph,"IE00936: Graph argument can't be null");  m_function=Preconditions.checkNotNull(function,"IE00937: Function argument can't be null");}  }
class C{  protected static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  public static void forceDelete(File file) throws IOException {  if (file.isDirectory()) {    deleteDirectory(file);  } else {    boolean filePresent=file.exists();    if (!file.delete()) {      if (!filePresent) {        throw new FileNotFoundException("File does not exist: " + file);      }      String message="Unable to delete file: " + file;      throw new IOException(message);    }  }}  }
class C{  static BufferedImage gaussianBlur(BufferedImage src,BufferedImage dst,int radius){  int width=src.getWidth();  int height=src.getHeight();  if (dst == null || dst.getWidth() != width || dst.getHeight() != height || src.getType() != dst.getType()) {    dst=createColorModelCompatibleImage(src);  }  float[] kernel=createGaussianKernel(radius);  if (src.getType() == BufferedImage.TYPE_INT_ARGB) {    int[] srcPixels=new int[width * height];    int[] dstPixels=new int[width * height];    getPixels(src,0,0,width,height,srcPixels);    blur(srcPixels,dstPixels,width,height,kernel,radius);    blur(dstPixels,srcPixels,height,width,kernel,radius);    setPixels(dst,0,0,width,height,srcPixels);  } else   if (src.getType() == BufferedImage.TYPE_BYTE_GRAY) {    byte[] srcPixels=new byte[width * height];    byte[] dstPixels=new byte[width * height];    getPixels(src,0,0,width,height,srcPixels);    blur(srcPixels,dstPixels,width,height,kernel,radius);    blur(dstPixels,srcPixels,height,width,kernel,radius);    setPixels(dst,0,0,width,height,srcPixels);  } else {    throw new IllegalArgumentException("EffectUtils.gaussianBlur() src image is not a supported type, type=[" + src.getType() + "]");  }  return dst;}  }
class C{  private void close0() throws IOException {  if (LOG.isDebugEnabled())   LOG.debug("File system closed [uri=" + uri + ", endpoint="+ uriAuthority+ ']');  if (rmtClient == null)   return;  super.close();  rmtClient.close(false);  if (clientLog.isLogEnabled())   clientLog.close();  if (factory != null)   factory.stop();  uri=null;  rmtClient=null;}  }
class C{  public static char[] toCharArray(Reader input) throws IOException {  CharArrayWriter sw=new CharArrayWriter();  copy(input,sw);  return sw.toCharArray();}  }
class C{  public static Number findMaximumStackedRangeValue(CategoryDataset dataset){  ParamChecks.nullNotPermitted(dataset,"dataset");  Number result=null;  boolean hasValidData=false;  double maximum=0.0;  int categoryCount=dataset.getColumnCount();  for (int item=0; item < categoryCount; item++) {    double total=0.0;    int seriesCount=dataset.getRowCount();    for (int series=0; series < seriesCount; series++) {      Number number=dataset.getValue(series,item);      if (number != null) {        hasValidData=true;        double value=number.doubleValue();        if (value > 0.0) {          total=total + value;        }      }    }    maximum=Math.max(maximum,total);  }  if (hasValidData) {    result=new Double(maximum);  }  return result;}  }
class C{  @Override public boolean isCritical(){  return false;}  }
class C{  private void handleMultiChoiceEvents(final Event event){switch (event.type) {case SWT.Dispose:    if (this.popup != null && !this.popup.isDisposed()) {      this.popup.dispose();    }  final Shell shell=getShell();shell.removeListener(SWT.Deactivate,this.listener);final Display display=getDisplay();display.removeFilter(SWT.FocusIn,this.filter);this.popup=null;this.arrow=null;break;case SWT.Move:changeVisibilityOfPopupWindow(false);break;case SWT.Resize:if (isDropped()) {changeVisibilityOfPopupWindow(false);}break;}}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>ImmutableSetMultimap<K,V> of(){  return (ImmutableSetMultimap<K,V>)EmptyImmutableSetMultimap.INSTANCE;}  }
class C{  private void addChildView(View viewToAdd){  addView(viewToAdd,CONTENT_INDEX,new FrameLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT,mGravity));}  }
class C{  protected static OPTICSXi.SteepAreaResult findSteepAreaResult(ClusterOrder co){  for (Hierarchy.Iter<Result> r=co.getHierarchy().iterChildren(co); r.valid(); r.advance()) {    if (OPTICSXi.SteepAreaResult.class.isInstance(r.get())) {      return (OPTICSXi.SteepAreaResult)r.get();    }  }  return null;}  }
class C{  public Constraints(Anchor anchor,@NonNls String relativeToActionId){  myAnchor=anchor;  myRelativeToActionId=relativeToActionId;}  }
class C{  private void fireActionPerformed(){  ActionEvent e=null;  ActionListener[] listeners=listenerList.getListeners(ActionListener.class);  for (int i=0; i < listeners.length; i++) {    if (e == null)     e=new ActionEvent(this,ActionEvent.ACTION_PERFORMED,"actionPerformed");    listeners[i].actionPerformed(e);  }}  }
class C{  public _QueryOptions(final String[] flagStrings){  super(flagStrings);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case VALUE:    return isSetValue();case VERSION:  return isSetVersion();}throw new IllegalStateException();}  }
class C{  public void destroy() throws Exception {}  }
class C{  @Override public Action execute(Percept percept){  kb.makePerceptSentence((AgentPercept)percept,t);  kb.tellTemporalPhysicsSentences(t);  AgentPosition current=kb.askCurrentPosition(t);  Set<Room> safe=kb.askSafeRooms(t);  if (kb.askGlitter(t)) {    Set<Room> goals=new LinkedHashSet<Room>();    goals.add(new Room(1,1));    plan.add(new Grab());    plan.addAll(planRoute(current,goals,safe));    plan.add(new Climb());  }  Set<Room> unvisited=kb.askUnvisitedRooms(t);  if (plan.isEmpty()) {    plan.addAll(planRoute(current,SetOps.intersection(unvisited,safe),safe));  }  if (plan.isEmpty() && kb.askHaveArrow(t)) {    Set<Room> possibleWumpus=kb.askPossibleWumpusRooms(t);    plan.addAll(planShot(current,possibleWumpus,safe));  }  if (plan.isEmpty()) {    Set<Room> notUnsafe=kb.askNotUnsafeRooms(t);    plan.addAll(planRoute(current,SetOps.intersection(unvisited,notUnsafe),safe));  }  if (plan.isEmpty()) {    Set<Room> start=new LinkedHashSet<Room>();    start.add(new Room(1,1));    plan.addAll(planRoute(current,start,safe));    plan.add(new Climb());  }  Action action=plan.remove();  kb.makeActionSentence(action,t);  t=t + 1;  return action;}  }
class C{  protected void pushGlobalVars(int contextNode) throws TransformerException {  XPathContext xctxt=m_xcontext;  VariableStack vs=xctxt.getVarStack();  StylesheetRoot sr=getStylesheet();  Vector vars=sr.getVariablesAndParamsComposed();  int i=vars.size();  vs.link(i);  while (--i >= 0) {    ElemVariable v=(ElemVariable)vars.elementAt(i);    XObject xobj=new XUnresolvedVariable(v,contextNode,this,vs.getStackFrame(),0,true);    if (null == vs.elementAt(i))     vs.setGlobalVariable(i,xobj);  }}  }
class C{  private void outputFullLines() throws IOException {  for (; ; ) {    int leftLen=leftBuf.indexOf("\n");    if (leftLen < 0) {      return;    }    int rightLen=rightBuf.indexOf("\n");    if (rightLen < 0) {      return;    }    if (leftLen != 0) {      out.write(leftBuf.substring(0,leftLen));    }    if (rightLen != 0) {      writeSpaces(out,leftWidth - leftLen);      out.write(rightBuf.substring(0,rightLen));    }    out.write('\n');    leftBuf.delete(0,leftLen + 1);    rightBuf.delete(0,rightLen + 1);  }}  }
class C{  public int size(){  return mostUsedValues.size();}  }
class C{  public static Scale quartiles(){  return scale(4);}  }
class C{  public void stopListening(ListenKey listener) throws IOException {  if (!(listener instanceof SocketListenKey)) {    throw new IllegalArgumentException("Invalid listener");  }synchronized (listener) {    ServerSocket ss=((SocketListenKey)listener).socket();    if (ss.isClosed()) {      throw new IllegalArgumentException("Invalid listener");    }    ss.close();  }}  }
class C{  private boolean toNextState(LifecycleState newState){  LifecycleState state;synchronized (this) {    state=_state;    if (newState.ordinal() <= state.ordinal()) {      return false;    }    _state=newState;    _lastChangeTime=CurrentTime.currentTime();  }  if (_log != null && _log.isLoggable(_lowLevel)) {    _log.log(_lowLevel,newState + " " + _name);  }  notifyListeners(state,newState);  return true;}  }
class C{  protected int lengthOfByteStream(AbstractMRMessage m){  return 5;}  }
class C{  public synchronized V remove(Object key){  int hash=getHash(key);  return getSegment(hash).remove(key,hash);}  }
class C{  @Override public synchronized Object[] toArray(){  Object[] result=new Object[elementCount];  System.arraycopy(elementData,0,result,0,elementCount);  return result;}  }
class C{  public RichDocumentUndoManager(IRichDocument document){  super();  Assert.isNotNull(document);  fDocument=document;  fHistory=OperationHistoryFactory.getOperationHistory();  fUndoContext=new ObjectUndoContext(fDocument);  fConnected=new ArrayList<Object>();  fDocumentUndoListeners=new ListenerList();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.EXPORT_DECLARATION__EXPORTED_ELEMENT:    return getExportedElement();case N4JSPackage.EXPORT_DECLARATION__DEFAULT_EXPORTED_EXPRESSION:  return getDefaultExportedExpression();case N4JSPackage.EXPORT_DECLARATION__NAMED_EXPORTS:return getNamedExports();case N4JSPackage.EXPORT_DECLARATION__WILDCARD_EXPORT:return isWildcardExport();case N4JSPackage.EXPORT_DECLARATION__DEFAULT_EXPORT:return isDefaultExport();case N4JSPackage.EXPORT_DECLARATION__REEXPORTED_FROM:if (resolve) return getReexportedFrom();return basicGetReexportedFrom();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private static int compositeReferenceSize(int flags){  int result=6;  if ((flags & CompositeGlyph.FLAG_ARG_1_AND_2_ARE_WORDS) != 0) {    result+=2;  }  if ((flags & CompositeGlyph.FLAG_WE_HAVE_A_SCALE) != 0) {    result+=2;  } else   if ((flags & CompositeGlyph.FLAG_WE_HAVE_AN_X_AND_Y_SCALE) != 0) {    result+=4;  } else   if ((flags & CompositeGlyph.FLAG_WE_HAVE_A_TWO_BY_TWO) != 0) {    result+=8;  }  return result;}  }
class C{  public CActionSortModulesByName(final CModuleContainerNode node){  super("By Name");  m_node=node;}  }
class C{  public String centerDataTipText(){  return "Center (rather than standardize) the data. PCA will " + "be computed from the covariance (rather than correlation) " + "matrix";}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.CASE_CLAUSE__EXPRESSION:    return expression != null;}return super.eIsSet(featureID);}  }
class C{  public Rect(ReadonlyVec2D p1,ReadonlyVec2D p2){  Vec2D tl=Vec2D.min(p1,p2);  Vec2D br=Vec2D.max(p1,p2);  x=tl.x;  y=tl.y;  width=br.x - x;  height=br.y - y;}  }
class C{  public ResourceTraversal(IResource[] resources,int depth,int flags){  if (resources == null)   throw new NullPointerException();  this.resources=resources;  this.depth=depth;  this.flags=flags;}  }
class C{  @Inline @Override public final void extentWrite(ObjectReference ref,Extent target,Word offset,Word location,int mode){  Magic.setExtentAtOffset(ref.toObject(),offset.toOffset(),target,location.toInt());}  }
class C{  private void onShutdown(){  if (autoSaveEnabled) {    try {      Files.deleteIfExists(autoSavedProcessPropertiesPath);      Files.deleteIfExists(autoSavedProcessPath);    } catch (    IOException e) {      LogService.getRoot().log(Level.INFO,"com.rapidminer.gui.autosave.AutoSave.deletion_failed",e);    }  }}  }
class C{  @Override public BreakCondition onClockTick() throws EmulationException {  if (context.cycleIncrement > 1) {    context.cycleIncrement--;    return null;  }  try {    statement.reset();    ((FrStatement)statement).getNextStatement(platform.memory,platform.cpuState.pc);    statement.setInstruction(FrInstructionSet.instructionMap[((FrStatement)statement).data[0]]);    ((FrStatement)statement).decodeOperands(platform.cpuState.pc,platform.memory);    logIfRequested(logger);    statement.getInstruction().getSimulationCode().simulate(statement,context);    int cycleListenerNumber=0;    while (cycleListenerNumber < cycleCounterListeners.size()) {      CycleCounterListener cycleCounterListener=cycleCounterListeners.get(cycleListenerNumber);      if (cycleCounterListener.onCycleCountChange(totalCycles,context.cycleIncrement)) {        cycleListenerNumber++;      } else {        cycleCounterListeners.remove(cycleCounterListener);      }    }    totalCycles+=context.cycleIncrement;    if (context.nextPc != null) {      if (context.delaySlotDone) {        platform.cpuState.pc=context.nextPc;        context.nextPc=null;        if (context.nextReturnAddress != null) {          platform.cpuState.setReg(FrCPUState.RP,context.nextReturnAddress);          context.nextReturnAddress=null;        }      } else {        context.delaySlotDone=true;      }    } else {      if (platform.interruptController.hasPendingRequests()) {        FrInterruptRequest interruptRequest=(FrInterruptRequest)platform.interruptController.getNextRequest();        if (interruptRequest != null) {          if (platform.cpuState.accepts(interruptRequest)) {            if (logger != null) {              DisassemblyLogger printer2=logger;              if (printer2 != null) {                if (printer2.isIncludeInterruptMarks()) {                  printer2.println(platform.getMasterClock().getFormatedTotalElapsedTimeMs() + " ------------------------- Accepting " + interruptRequest);                }                printer2.indent();              }            }            platform.interruptController.removeEdgeTriggeredRequest(interruptRequest);            ((FrInterruptController)platform.interruptController).processInterrupt(interruptRequest.getInterruptNumber(),platform.cpuState.pc,context);            ((FrCPUState)platform.cpuState).setILM(interruptRequest.getICR(),false);          }        }      }    }    if (breakConditionsPresent) {      BreakCondition breakCondition=processConditions();      if (breakCondition != null) {        return breakCondition;      }    }    if (sleepIntervalMs != 0) {      sleep();    }  } catch (  Exception e) {    e.printStackTrace();    System.err.println(e.getMessage());    System.err.println(platform.cpuState);    try {      statement.formatOperandsAndComment(context,false,outputOptions);      System.err.println("Offending instruction : " + statement);    } catch (    Exception e1) {      System.err.println("Cannot disassemble offending instruction :" + statement.getFormattedBinaryStatement());    }    System.err.println("(on or before PC=0x" + Format.asHex(platform.cpuState.pc,8) + ")");    throw new EmulationException(e);  }  return null;}  }
class C{  protected boolean afterDelete(boolean success){  if (!success)   return success;  if (getS_ResourceAssignment_ID() != 0) {    MResourceAssignment ra=new MResourceAssignment(getCtx(),getS_ResourceAssignment_ID(),get_TrxName());    ra.delete(true);  }  return updateHeaderTax();}  }
class C{  @EventHandler(ignoreCancelled=true) public void onEntityDamageByEntity(EntityDamageByEntityEvent event){  if (event.getDamager() instanceof Player && !canInteract((Player)event.getDamager())) {    event.setCancelled(true);  }}  }
class C{  public ResolvedFunction(final MemoryModule memoryModule,final Address address){  assert address != null;  assert memoryModule != null;  this.address=address;  this.function=null;  this.memoryModule=memoryModule;}  }
class C{  public TLongObjectHashMap(int initialCapacity,float loadFactor,TLongHashingStrategy strategy){  super(initialCapacity,loadFactor);  _hashingStrategy=strategy;}  }
class C{  protected EventSpecImpl(){  super();}  }
class C{  public void addAll(final List<T> values){  checkWidget();  if (values == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  if (this.elements == null) {    this.elements=new ArrayList<T>();  }  this.elements.addAll(values);  refresh();}  }
class C{  public void deleteExport(String id) throws IsilonException {  delete(_baseUrl.resolve(URI_NFS_EXPORTS),id,"export");}  }
class C{  public int readPid(final long timeout,final TimeUnit unit) throws IOException, InterruptedException, TimeoutException {  IllegalArgumentException iae=null;  IOException ioe=null;  int pid=0;  final long timeoutMillis=unit.toMillis(timeout);  final StopWatch stopWatch=new StopWatch(true);  while (pid <= 0) {    try {      pid=readPid();    } catch (    IllegalArgumentException e) {      iae=e;    }catch (    IOException e) {      ioe=e;    }    if (stopWatch.elapsedTimeMillis() > timeoutMillis) {      if (iae != null) {        throw new TimeoutException(iae.getMessage());      }      if (ioe != null) {        throw new TimeoutException(ioe.getMessage());      }    } else {      try {        Thread.sleep(SLEEP_INTERVAL_MILLIS);      } catch (      InterruptedException e) {        Thread.currentThread().interrupt();        if (iae != null) {          throw new InterruptedException(iae.getMessage());        }        if (ioe != null) {          throw new InterruptedException(ioe.getMessage());        }        throw e;      }    }  }  return pid;}  }
class C{  public void computeVertexSnaps(Collection edges){  for (Iterator i0=edges.iterator(); i0.hasNext(); ) {    NodedSegmentString edge0=(NodedSegmentString)i0.next();    for (Iterator i1=edges.iterator(); i1.hasNext(); ) {      NodedSegmentString edge1=(NodedSegmentString)i1.next();      computeVertexSnaps(edge0,edge1);    }  }}  }
class C{  boolean isDecoderSelected(){  return !dTree.isSelectionEmpty();}  }
class C{  public InputVariables(List<VariableData> inputVariables,Project project,LocalSearchScope scope){  myProject=project;  myScope=scope;  myInputVariables=new ArrayList<VariableData>(inputVariables);}  }
class C{  public YammerMetricsAssembler(PrintStream out,long period,TimeUnit timeunit){  reporter=new ConsoleReporter(out);  try {    reporter.start(period,timeunit);  } catch (  RuntimeException e) {    e.printStackTrace();    throw e;  }}  }
class C{  public static boolean isGregorianLeapYear(int year){  boolean isLeap=false;  if (year % 4 == 0) {    isLeap=true;  }  if (year % 100 == 0) {    isLeap=false;  }  if (year % 400 == 0) {    isLeap=true;  }  return isLeap;}  }
class C{  public static void registerNormalizationMethod(NormalizationMethod newMethod){  METHODS.add(newMethod);  NORMALIZATION_METHODS=new String[METHODS.size()];  int i=0;  for (  NormalizationMethod method : METHODS) {    NORMALIZATION_METHODS[i]=method.getName();    i++;  }}  }
class C{  @Override public int hashCode(){  return this.name.hashCode();}  }
class C{  public Hyperpoint(IMultiPoint pt){  int d=this.dimensionality=pt.dimensionality();  values=new double[d];  for (int i=1; i <= d; i++) {    values[i - 1]=pt.getCoordinate(i);  }}  }
class C{  @Override public Set<String> locationNames(){  Set<String> locations=new HashSet<String>();  Set<StringBuilder> l=this.name2ids.keySet();  for (  StringBuilder s : l) {    locations.add(s.toString());  }  return locations;}  }
class C{  @Override public TPS apply(final IIndex ndx){  return atomicRead(ndx,schema,primaryKey,fromTime,toTime,0L,filter);}  }
class C{  public void test_SelectGroupBy() throws SQLException {  String selectQuery="SELECT rating, SUM(snum) AS sum FROM " + DatabaseCreator.CUSTOMERS_TABLE + " GROUP BY rating";  ResultSet result=statement.executeQuery(selectQuery);  HashMap<Integer,Integer> values=new HashMap<Integer,Integer>();  values.put(100,3006);  values.put(200,2005);  values.put(300,2009);  while (result.next()) {    int rating=result.getInt("rating");    int sum=result.getInt("sum");    assertTrue("Wrong value of rating field",values.containsKey(rating));    assertEquals("Wrong value of sum field",values.get(rating),new Integer(sum));    assertEquals(new Integer(sum),values.remove(rating));  }  result.close();  assertTrue("Result set has wrong size",values.isEmpty());}  }
class C{  public static TreePath pathTillClass(final TreePath path){  return pathTillOfKind(path,classTreeKinds());}  }
class C{  public Property yearOfCentury(){  return new Property(this,getChronology().yearOfCentury());}  }
class C{  public LedgerAllocatorDelegator(LedgerAllocator allocator,boolean ownAllocator) throws IOException {  this.allocator=allocator;  this.ownAllocator=ownAllocator;  if (this.ownAllocator) {    this.allocator.start();  }}  }
class C{  @SuppressWarnings("static-access") public int run(String[] args) throws Exception {  Options options=new Options();  options.addOption(OptionBuilder.withLongOpt("config-files").withDescription("Comma separated list of paths to configuration files").hasArg().withArgName("PATH").create());  options.addOption(OptionBuilder.withLongOpt("step").withDescription("Run a specific step").hasArg().withArgName("ST").create());  options.addOption(OptionBuilder.withLongOpt("override-input").withDescription("Input override for step").hasArg().withArgName("OI").create());  options.addOption(OptionBuilder.withLongOpt("table-list").withDescription("File containing a list of tables to copy").hasArg().withArgName("PATH").create());  CommandLineParser parser=new BasicParser();  CommandLine cl=null;  try {    cl=parser.parse(options,args);  } catch (  ParseException e) {    System.err.println("Encountered exception while parsing using GnuParser:\n" + e.getMessage());    printUsage(USAGE_COMMAND_STR,options,System.out);    System.out.println();    ToolRunner.printGenericCommandUsage(System.err);    return 1;  }  String configPaths=null;  if (cl.hasOption("config-files")) {    configPaths=cl.getOptionValue("config-files");    LOG.info("configPaths=" + configPaths);    Configuration conf=new Configuration();    if (configPaths != null) {      for (      String configPath : configPaths.split(",")) {        conf.addResource(new Path(configPath));      }    }    mergeConfiguration(conf,this.getConf());  } else {    LOG.warn("Configuration files not specified. Running unit test?");  }  if (this.getConf().getBoolean(MRJobConfig.MAP_SPECULATIVE,true)) {    throw new ConfigurationException(String.format("Speculative execution must be disabled " + "for mappers! Please set %s appropriately.",MRJobConfig.MAP_SPECULATIVE));  }  if (this.getConf().getBoolean(MRJobConfig.REDUCE_SPECULATIVE,true)) {    throw new ConfigurationException(String.format("Speculative execution must be disabled " + "for reducers! Please set %s appropriately.",MRJobConfig.REDUCE_SPECULATIVE));  }  Optional<Path> localTableListFile=Optional.empty();  if (cl.hasOption("table-list")) {    localTableListFile=Optional.of(new Path(cl.getOptionValue("table-list")));  }  int step=-1;  if (cl.hasOption("step")) {    step=Integer.valueOf(cl.getOptionValue("step"));  }  String finalOutput=this.getConf().get(ConfigurationKeys.BATCH_JOB_OUTPUT_DIR);  if (finalOutput == null) {    System.err.println(ConfigurationKeys.BATCH_JOB_OUTPUT_DIR + " is required in configuration file.");    return 1;  }  Path outputParent=new Path(finalOutput);  Path step1Out=new Path(outputParent,"step1output");  Path step2Out=new Path(outputParent,"step2output");  Path step3Out=new Path(outputParent,"step3output");  Calendar calendar=Calendar.getInstance(TimeZone.getTimeZone("UTC"));  String jobStartTime=String.format("%tY-%<tm-%<tdT%<tH_%<tM_%<tS",calendar);  velocityContext.put("job_start_time",jobStartTime);  velocityContext.put("step1_output_directory",step1Out.toString());  velocityContext.put("step2_output_directory",step2Out.toString());  velocityContext.put("step3_output_directory",step3Out.toString());  Optional<Path> tableListFileOnHdfs=Optional.empty();  if (localTableListFile.isPresent()) {    Path tableFilePath=localTableListFile.get();    Path tmpDir=createTempDirectory(getConf());    tableListFileOnHdfs=Optional.of(new Path(tmpDir,tableFilePath.getName()));    LOG.info(String.format("Copying %s to temporary directory %s",tableFilePath,tableListFileOnHdfs.get()));    copyFile(localTableListFile.get(),tableListFileOnHdfs.get());    LOG.info(String.format("Copied %s to temporary directory %s",tableFilePath,tableListFileOnHdfs.get()));  } else {    LOG.info("List of tables to copy is not specified. Copying all tables instead.");  }  if (step == -1) {    LOG.info("Deleting " + step1Out);    FsUtils.deleteDirectory(getConf(),step1Out);    LOG.info("Deleting " + step2Out);    FsUtils.deleteDirectory(getConf(),step2Out);    LOG.info("Deleting " + step3Out);    FsUtils.deleteDirectory(getConf(),step3Out);    if (runMetastoreCompareJob(tableListFileOnHdfs,step1Out) != 0) {      return -1;    }    if (runHdfsCopyJob(step1Out,step2Out) != 0) {      return -1;    }    if (runCommitChangeJob(step1Out,step3Out) != 0) {      return -1;    }    return 0;  } else {switch (step) {case 1:      LOG.info("Deleting " + step1Out);    FsUtils.deleteDirectory(this.getConf(),step1Out);  return this.runMetastoreCompareJob(tableListFileOnHdfs,step1Out);case 2:LOG.info("Deleting " + step2Out);FsUtils.deleteDirectory(getConf(),step2Out);if (cl.hasOption("override-input")) {step1Out=new Path(cl.getOptionValue("override-input"));}return this.runHdfsCopyJob(new Path(step1Out,"part*"),step2Out);case 3:LOG.info("Deleting " + step3Out);FsUtils.deleteDirectory(this.getConf(),step3Out);if (cl.hasOption("override-input")) {step2Out=new Path(cl.getOptionValue("override-input"));}return this.runCommitChangeJob(new Path(step2Out,"part*"),step3Out);default :LOG.error("Invalid step specified: " + step);return 1;}}}  }
class C{  @FlashException public static void removeStoragePools(String virtualArrayId,@As(",") String[] ids){  if ((ids != null) && (ids.length > 0)) {    VirtualArrayRestRep virtualArray=getVirtualArray(virtualArrayId);    updateStoragePools(uris(ids),removeVirtualArray(virtualArray));  }  storagePools(virtualArrayId);}  }
class C{  private void createJournal(MJournalBatch mjb){  int noPeriods=0;  if (noOfPeriods == 0 || noOfPeriods > 12)   noPeriods=12; else   noPeriods=noOfPeriods;  StringBuffer sql=new StringBuffer("SELECT * FROM I_Budget   WHERE I_IsImported='N' ").append(clientCheck).append(docCheck);  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql.toString(),null);    rs=pstmt.executeQuery();    if (rs.next()) {      getPeriods(noPeriods);      if (noPeriods > m_periods.size())       noPeriods=m_periods.size();      for (int i=0; i < noPeriods; i++) {        MJournal journal=new MJournal(getCtx(),0,get_TrxName());        journal.setGL_JournalBatch_ID(mjb.getGL_JournalBatch_ID());        DateFormat df=new SimpleDateFormat("yyyy-MM");        String formattedDate=df.format(m_periods.get(i).getStartDate());        journal.setDocumentNo(glDocNo + "-" + formattedDate);        journal.setDescription(batchDesc);        journal.setDateAcct((dates.get(i)));        journal.setDateDoc((dates.get(i)));        journal.setC_Period_ID(m_periods.get(i).getC_Period_ID());        journal.setClientOrg(journal.getGL_JournalBatch().getAD_Client_ID(),journal.getGL_JournalBatch().getAD_Org_ID());        journal.setPostingType(X_GL_JournalBatch.POSTINGTYPE_Budget);        journal.setGL_Category_ID(gl_Category_ID);        journal.setC_Currency_ID(c_Currency_ID);        journal.setC_DocType_ID(c_DocType_ID);        journal.setCurrencyRate(BigDecimal.ONE);        journal.setC_ConversionType_ID(c_ConType_ID);        journal.setGL_Budget_ID(rs.getInt("GL_Budget_ID"));        ;        journal.setC_AcctSchema_ID(rs.getInt("C_AcctSchema_ID"));        boolean lineCreated=createJournalLine(journal,i);        if (!lineCreated && noPeriods < m_periods.size())         noPeriods++;      }    }  } catch (  SQLException e) {    log.log(Level.SEVERE,"",e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }}  }
class C{  public boolean invalidateIt(){  log.info("invalidateIt - " + toString());  setDocAction(DOCACTION_Prepare);  return true;}  }
class C{  public SnackbarWrapper appendMessage(@StringRes int message,@ColorRes int color){  return appendMessage(context.getString(message),ContextCompat.getColor(context,color));}  }
class C{  public void clearEntryReadVersion(){  serReadVer=null;}  }
class C{  public DeviceAutomator pressDPadUp(){  mDevice.pressDPadUp();  return this;}  }
class C{  public static void resetApiUrl(){  API_URL=DEF_API_URL;}  }
class C{  public void startDragAction(DragGestureEvent dge,DragSourceListener dsl){  dragSource.startDrag(dge,getCursor(DragSource.DefaultMoveDrop),new DefaultTransferableObject(SinkGraphic.getSharedInstance()),dsl);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void scanFraction(int pos){  skipIllegalUnderscores();  if ('0' <= reader.ch && reader.ch <= '9') {    scanDigits(pos,10);  }  int sp1=reader.sp;  if (reader.ch == 'e' || reader.ch == 'E') {    reader.putChar(true);    skipIllegalUnderscores();    if (reader.ch == '+' || reader.ch == '-') {      reader.putChar(true);    }    skipIllegalUnderscores();    if ('0' <= reader.ch && reader.ch <= '9') {      scanDigits(pos,10);      return;    }    lexError(pos,"malformed.fp.lit");    reader.sp=sp1;  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case MappingPackage.INFO_MODEL_PROPERTY_SOURCE__PROPERTY:    setProperty((FunctionblockProperty)null);  return;}super.eUnset(featureID);}  }
class C{  private void validateJMSResources(){  if (queue == null || qFactory == null) {    SaaSSystemException sse=new SaaSSystemException("JMS resources are not initialized!");    logger.logError(Log4jLogger.SYSTEM_LOG,sse,LogMessageIdentifier.ERROR_JMS_RESOURCE_NOT_INITIALIZED);    throw sse;  }}  }
class C{  @Override public void putAll(Map<? extends K,? extends V> map){  putAllImpl(map);}  }
class C{  protected void checkPauseAndWait(){  pauseLock.lock();  try {    while (paused && !stopped) {      pausedCondition.await();    }  } catch (  InterruptedException e) {  } finally {    pauseLock.unlock();  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public List<BucketRecommendation> placeBucket(VirtualArray vArray,VirtualPool vPool,VirtualPoolCapabilityValuesWrapper capabilities,Map<String,Object> attributeMap){  _log.debug("Schedule storage for {} resource(s) of size {}.",capabilities.getResourceCount(),capabilities.getSize());  List<StoragePool> candidatePools=_scheduler.getMatchingPools(vArray,vPool,capabilities,attributeMap);  List<Recommendation> poolRecommendations=_scheduler.getRecommendationsForPools(vArray.getId().toString(),candidatePools,capabilities);  List<BucketRecommendation> recommendations=selectMatchingStoragePool(vPool,poolRecommendations);  if (recommendations.isEmpty()) {    _log.error("Could not find matching pools for virtual array {} & vpool {}",vArray.getId(),vPool.getId());  }  return recommendations;}  }
class C{  public String generateChallan(final ReceiptHeader receipt,final boolean flag){  final List<BillReceiptInfo> receiptList=new ArrayList<BillReceiptInfo>(0);  receiptList.add(new BillReceiptInfoImpl(receipt,egovCommon,new ReceiptHeader(),chartOfAccountsHibernateDAO,persistenceService));  final String templateName=CollectionConstants.CHALLAN_TEMPLATE_NAME;  final Map<String,Object> reportParams=new HashMap<String,Object>(0);  reportParams.put("EGOV_COMMON",egovCommon);  final ReportRequest reportInput=new ReportRequest(templateName,receiptList,reportParams);  reportInput.setPrintDialogOnOpenReport(flag);  return reportViewerUtil.addReportToTempCache(collectionsUtil.createReport(reportInput));}  }
class C{  public static void doArrayStore(Instruction s,IR ir,Operator op,int logwidth){  if (LOWER_ARRAY_ACCESS) {    Operand value=AStore.getClearValue(s);    Operand array=AStore.getClearArray(s);    Operand index=AStore.getClearIndex(s);    Operand offset;    LocationOperand loc=AStore.getClearLocation(s);    if (index instanceof IntConstantOperand) {      offset=AC(Address.fromIntZeroExtend(((IntConstantOperand)index).value << logwidth));    } else {      if (logwidth != 0) {        offset=insertBinary(s,ir,INT_SHL,TypeReference.Int,index,IC(logwidth));        offset=InsertUnary(s,ir,INT_2ADDRZerExt,TypeReference.Offset,offset.copy());      } else {        offset=InsertUnary(s,ir,INT_2ADDRZerExt,TypeReference.Offset,index);      }    }    Store.mutate(s,op,value,array,offset,loc,AStore.getClearGuard(s));  }}  }
