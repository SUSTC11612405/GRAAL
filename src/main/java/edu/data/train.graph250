class C{  public Vector3i mul(Vector3i v,Vector3i dest){  dest.x=x * v.x;  dest.y=y * v.y;  dest.z=z * v.z;  return dest;}  }
class C{  public TagAttachExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public static File lookingFileFromPath(IPath path){  if (path == null) {    throw new IllegalStateException("path shouldn't be null");  }  if (path.toFile().exists()) {    return path.toFile();  }  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();  IResource resourceInRuntimeWorkspace=root.findMember(path);  if (resourceInRuntimeWorkspace == null) {    return path.toFile();  }  File file=new File(resourceInRuntimeWorkspace.getLocationURI());  if (file.exists()) {    return file;  }  return path.toFile();}  }
class C{  public static String propertiesToString(Properties props){  if (props == null) {    return null;  }  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();  try {    props.store(outputStream,"");    return outputStream.toString("ISO-8859-1");  } catch (  IOException e) {    SaaSSystemException se=new SaaSSystemException("Storing properties failed!",e);    LOGGER.logError(Log4jLogger.SYSTEM_LOG,se,LogMessageIdentifier.ERROR_STORE_PROPERTIES_FAILED);    throw se;  }}  }
class C{  public static int run(Model queryModel,Model newTriples,Map<Resource,List<CommandWrapper>> class2Query,Map<Resource,List<CommandWrapper>> class2Constructor,SPINExplanations explanations,List<SPINStatistics> statistics,boolean singlePass,Property rulePredicate,SPINRuleComparator comparator,ProgressMonitor monitor){  for (  SPINInferencesOptimizer optimizer : optimizers) {    class2Query=optimizer.optimize(class2Query);  }  List<CommandWrapper> rulesList=new ArrayList<CommandWrapper>();  Map<CommandWrapper,Resource> rule2Class=new HashMap<CommandWrapper,Resource>();  for (  Resource cls : class2Query.keySet()) {    List<CommandWrapper> queryWrappers=class2Query.get(cls);    for (    CommandWrapper queryWrapper : queryWrappers) {      rulesList.add(queryWrapper);      rule2Class.put(queryWrapper,cls);    }  }  if (comparator != null) {    Collections.sort(rulesList,comparator);  }  if (rulePredicate.getModel() == null) {    rulePredicate=queryModel.getProperty(rulePredicate.getURI());  }  int iteration=1;  boolean changed;  do {    Set<Statement> newRules=new HashSet<Statement>();    changed=false;    for (    CommandWrapper arqWrapper : rulesList) {      if (arqWrapper.getStatement() != null) {        Property predicate=arqWrapper.getStatement().getPredicate();        Integer maxIterationCount=JenaUtil.getIntegerProperty(predicate,SPIN.rulePropertyMaxIterationCount);        if (maxIterationCount != null) {          if (iteration > maxIterationCount) {            continue;          }        }      }      Resource cls=rule2Class.get(arqWrapper);      if (monitor != null) {        if (monitor.isCanceled()) {          return iteration - 1;        }        StringBuffer sb=new StringBuffer("TopSPIN iteration ");        sb.append(iteration);        sb.append(" at ");        sb.append(SPINLabels.get().getLabel(cls));        sb.append(", rule ");        sb.append(arqWrapper.getLabel() != null ? arqWrapper.getLabel() : arqWrapper.getText());        monitor.subTask(sb.toString());      }      StringBuffer sb=new StringBuffer();      sb.append("Inferred by ");      sb.append(SPINLabels.get().getLabel(rulePredicate));      sb.append(" at class ");      sb.append(SPINLabels.get().getLabel(cls));      sb.append(":\n\n" + arqWrapper.getText());      String explanationText=sb.toString();      boolean thisUnbound=arqWrapper.isThisUnbound();      changed|=runCommandOnClass(arqWrapper,arqWrapper.getLabel(),queryModel,newTriples,cls,true,class2Constructor,statistics,explanations,explanationText,newRules,thisUnbound,monitor);      if (!SPINUtil.isRootClass(cls) && !thisUnbound) {        Set<Resource> subClasses=JenaUtil.getAllSubClasses(cls);        for (        Resource subClass : subClasses) {          changed|=runCommandOnClass(arqWrapper,arqWrapper.getLabel(),queryModel,newTriples,subClass,true,class2Constructor,statistics,explanations,explanationText,newRules,thisUnbound,monitor);        }      }    }    iteration++;    if (!newRules.isEmpty() && !singlePass) {      for (      Statement s : newRules) {        SPINQueryFinder.add(class2Query,queryModel.asStatement(s.asTriple()),queryModel,true,false);      }    }  } while (!singlePass && changed);  return iteration - 1;}  }
class C{  Local(){}  }
class C{  public GraphicsNodeMouseEvent(GraphicsNode source,int id,long when,int modifiers,int lockState,int button,float x,float y,int clientX,int clientY,int screenX,int screenY,int clickCount,GraphicsNode relatedNode){  super(source,id,when,modifiers,lockState);  this.button=button;  this.x=x;  this.y=y;  this.clientX=clientX;  this.clientY=clientY;  this.screenX=screenX;  this.screenY=screenY;  this.clickCount=clickCount;  this.relatedNode=relatedNode;}  }
class C{  public static FrameBlock convertToFrameBlock(String[][] data){  if (data == null || data.length == 0)   return new FrameBlock();  ValueType[] schema=UtilFunctions.nCopies(data[0].length,ValueType.STRING);  return convertToFrameBlock(data,schema);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void requestFocus(){  m_text.requestFocus();}  }
class C{  public SimpleProperties(Object o,boolean includeSuperclasses,boolean includeGetClass){  this(o,includeSuperclasses,includeGetClass,true);}  }
class C{  public static Rectangle2D toAwtRectangle(final Rectangle rect){  final Rectangle2D rect2d=new Rectangle2D.Double();  rect2d.setRect(rect.x,rect.y,rect.width,rect.height);  return rect2d;}  }
class C{  @Inline public static boolean tryCompareAndSwap(Object base,Offset offset,Object testValue,Object newValue){  if (Barriers.NEEDS_OBJECT_PUTFIELD_BARRIER || Barriers.NEEDS_OBJECT_GETFIELD_BARRIER) {    return Barriers.objectTryCompareAndSwap(base,offset,testValue,newValue);  } else {    if (VM.BuildForIA32) {      return Magic.attemptObject(base,offset,testValue,newValue);    } else {      Object oldValue;      do {        oldValue=Magic.prepareObject(base,offset);        if (oldValue != testValue)         return false;      } while (!Magic.attemptObject(base,offset,oldValue,newValue));      return true;    }  }}  }
class C{  public synchronized void engineLoad(InputStream stream,char[] password) throws IOException, NoSuchAlgorithmException, CertificateException {  DataInputStream dis;  CertificateFactory cf=null;  ByteArrayInputStream bais=null;  byte[] encoded=null;  if (stream == null)   return;  counter=0;  DerValue val=new DerValue(stream);  DerInputStream s=val.toDerInputStream();  int version=s.getInteger();  if (version != VERSION_3) {    throw new IOException("PKCS12 keystore not in version 3 format");  }  entries.clear();  byte[] authSafeData;  ContentInfo authSafe=new ContentInfo(s);  ObjectIdentifier contentType=authSafe.getContentType();  if (contentType.equals((Object)ContentInfo.DATA_OID)) {    authSafeData=authSafe.getData();  } else {    throw new IOException("public key protected PKCS12 not supported");  }  DerInputStream as=new DerInputStream(authSafeData);  DerValue[] safeContentsArray=as.getSequence(2);  int count=safeContentsArray.length;  privateKeyCount=0;  secretKeyCount=0;  certificateCount=0;  for (int i=0; i < count; i++) {    byte[] safeContentsData;    ContentInfo safeContents;    DerInputStream sci;    byte[] eAlgId=null;    sci=new DerInputStream(safeContentsArray[i].toByteArray());    safeContents=new ContentInfo(sci);    contentType=safeContents.getContentType();    safeContentsData=null;    if (contentType.equals((Object)ContentInfo.DATA_OID)) {      if (debug != null) {        debug.println("Loading PKCS#7 data content-type");      }      safeContentsData=safeContents.getData();    } else     if (contentType.equals((Object)ContentInfo.ENCRYPTED_DATA_OID)) {      if (password == null) {        if (debug != null) {          debug.println("Warning: skipping PKCS#7 encryptedData" + " content-type - no password was supplied");        }        continue;      }      if (debug != null) {        debug.println("Loading PKCS#7 encryptedData content-type");      }      DerInputStream edi=safeContents.getContent().toDerInputStream();      int edVersion=edi.getInteger();      DerValue[] seq=edi.getSequence(2);      ObjectIdentifier edContentType=seq[0].getOID();      eAlgId=seq[1].toByteArray();      if (!seq[2].isContextSpecific((byte)0)) {        throw new IOException("encrypted content not present!");      }      byte newTag=DerValue.tag_OctetString;      if (seq[2].isConstructed())       newTag|=0x20;      seq[2].resetTag(newTag);      safeContentsData=seq[2].getOctetString();      DerInputStream in=seq[1].toDerInputStream();      ObjectIdentifier algOid=in.getOID();      AlgorithmParameters algParams=parseAlgParameters(algOid,in);      while (true) {        try {          SecretKey skey=getPBEKey(password);          Cipher cipher=Cipher.getInstance(algOid.toString());          cipher.init(Cipher.DECRYPT_MODE,skey,algParams);          safeContentsData=cipher.doFinal(safeContentsData);          break;        } catch (        Exception e) {          if (password.length == 0) {            password=new char[1];            continue;          }          throw new IOException("keystore password was incorrect",new UnrecoverableKeyException("failed to decrypt safe contents entry: " + e));        }      }    } else {      throw new IOException("public key protected PKCS12" + " not supported");    }    DerInputStream sc=new DerInputStream(safeContentsData);    loadSafeContents(sc,password);  }  if (password != null && s.available() > 0) {    MacData macData=new MacData(s);    try {      String algName=macData.getDigestAlgName().toUpperCase(Locale.ENGLISH);      algName=algName.replace("-","");      Mac m=Mac.getInstance("HmacPBE" + algName);      PBEParameterSpec params=new PBEParameterSpec(macData.getSalt(),macData.getIterations());      SecretKey key=getPBEKey(password);      m.init(key,params);      m.update(authSafeData);      byte[] macResult=m.doFinal();      if (debug != null) {        debug.println("Checking keystore integrity " + "(MAC algorithm: " + m.getAlgorithm() + ")");      }      if (!MessageDigest.isEqual(macData.getDigest(),macResult)) {        throw new UnrecoverableKeyException("Failed PKCS12" + " integrity checking");      }    } catch (    Exception e) {      throw new IOException("Integrity check failed: " + e,e);    }  }  PrivateKeyEntry[] list=keyList.toArray(new PrivateKeyEntry[keyList.size()]);  for (int m=0; m < list.length; m++) {    PrivateKeyEntry entry=list[m];    if (entry.keyId != null) {      ArrayList<X509Certificate> chain=new ArrayList<X509Certificate>();      X509Certificate cert=findMatchedCertificate(entry);      mainloop:       while (cert != null) {        if (!chain.isEmpty()) {          for (          X509Certificate chainCert : chain) {            if (cert.equals(chainCert)) {              if (debug != null) {                debug.println("Loop detected in " + "certificate chain. Skip adding " + "repeated cert to chain. Subject: "+ cert.getSubjectX500Principal().toString());              }              break mainloop;            }          }        }        chain.add(cert);        X500Principal issuerDN=cert.getIssuerX500Principal();        if (issuerDN.equals(cert.getSubjectX500Principal())) {          break;        }        cert=certsMap.get(issuerDN);      }      if (chain.size() > 0)       entry.chain=chain.toArray(new Certificate[chain.size()]);    }  }  if (debug != null) {    if (privateKeyCount > 0) {      debug.println("Loaded " + privateKeyCount + " protected private key(s)");    }    if (secretKeyCount > 0) {      debug.println("Loaded " + secretKeyCount + " protected secret key(s)");    }    if (certificateCount > 0) {      debug.println("Loaded " + certificateCount + " certificate(s)");    }  }  certEntries.clear();  certsMap.clear();  keyList.clear();}  }
class C{  private void processReg(RegisterSpec spec){  int reg=spec.getNextReg();  if (reg > regCount) {    regCount=reg;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  Blob(byte[] data,ExceptionInterceptor exceptionInterceptor){  setBinaryData(data);  this.exceptionInterceptor=exceptionInterceptor;}  }
class C{  public static String readFileToString(File file,Charset encoding) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.toString(in,Charsets.toCharset(encoding));  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public boolean copyTo(String todteddir){  return copyTo(getFrameList(),todteddir);}  }
class C{  public ItemHit txId(String value){  setString(TRANSACTION_ID,value);  return this;}  }
class C{  public InterruptedIOException(String detailMessage){  super(detailMessage);}  }
class C{  public void add(Role role) throws IllegalArgumentException {  if (role == null) {    String excMsg="Invalid parameter";    throw new IllegalArgumentException(excMsg);  }  super.add(role);}  }
class C{  public TLongObjectHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);  _hashingStrategy=this;}  }
class C{  @Field(33) public short uiVal(){  return this.io.getShortField(this,33);}  }
class C{  public long skip(long n) throws IOException {  if (n < 0) {    throw new IllegalArgumentException("negative skip length");  }  ensureOpen();  int max=(int)Math.min(n,Integer.MAX_VALUE);  int total=0;  while (total < max) {    int len=max - total;    if (len > b.length) {      len=b.length;    }    len=read(b,0,len);    if (len == -1) {      reachEOF=true;      break;    }    total+=len;  }  return total;}  }
class C{  protected void realClose(boolean calledExplicitly,boolean closeOpenResults) throws SQLException {  MySQLConnection locallyScopedConn=this.connection;  if (locallyScopedConn == null || this.isClosed) {    return;  }  if (!locallyScopedConn.getDontTrackOpenResources()) {    locallyScopedConn.unregisterStatement(this);  }  if (this.useUsageAdvisor) {    if (!calledExplicitly) {      String message=Messages.getString("Statement.63") + Messages.getString("Statement.64");      this.eventSink.consumeEvent(new ProfilerEvent(ProfilerEvent.TYPE_WARN,"",this.currentCatalog,this.connectionId,this.getId(),-1,System.currentTimeMillis(),0,Constants.MILLIS_I18N,null,this.pointOfOrigin,message));    }  }  if (closeOpenResults) {    closeOpenResults=!(this.holdResultsOpenOverClose || this.connection.getDontTrackOpenResources());  }  if (closeOpenResults) {    if (this.results != null) {      try {        this.results.close();      } catch (      Exception ex) {      }    }    if (this.generatedKeysResults != null) {      try {        this.generatedKeysResults.close();      } catch (      Exception ex) {      }    }    closeAllOpenResults();  }  this.isClosed=true;  this.results=null;  this.generatedKeysResults=null;  this.connection=null;  this.warningChain=null;  this.openResults=null;  this.batchedGeneratedKeys=null;  this.localInfileInputStream=null;  this.pingTarget=null;}  }
class C{  public List<T> findByProject(ProjectRestRep project,ResourceFilter<T> filter){  return findByProject(ResourceUtils.id(project),filter);}  }
class C{  public Slf4jSpyLogDelegator(){}  }
class C{  public synchronized void add(String property){  String[] values=tokenize(property);  if (m_Root.value == null) {    m_Root.value=values[0];  }  buildBranch(m_Root,values,1);}  }
class C{  public void clean(int size){  if (fifo.size() > size) {    while (size > 0) {      fifo.removeElementAt(0);      nbObjects--;      size--;    }  }}  }
class C{  public HashCodeBuilder append(final double value){  return append(Double.doubleToLongBits(value));}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  public ASN1InputStream(byte[] input,boolean lazyEvaluate){  this(new ByteArrayInputStream(input),input.length,lazyEvaluate);}  }
class C{  @Override public void onSaveInstanceState(Bundle outState){  super.onSaveInstanceState(outState);  outState.putBoolean(ARG_CLOSEABLE,mCloseable);  outState.putInt(ARG_SCROLL_ORIENTATION,mScrollOrientation);}  }
class C{  public boolean equals(Object o){  if (o instanceof Phrase) {    Phrase other=(Phrase)o;    if (this.size() != other.size())     return false;    for (int i=0; i < size(); i++) {      if (this.getWordID(i) != other.getWordID(i))       return false;    }    return true;  } else {    return false;  }}  }
class C{  private void tryRippleEnter(){  if (mExitingRipplesCount >= MAX_RIPPLES) {    return;  }  if (mRipple == null) {    final float x;    final float y;    if (mHasPending) {      mHasPending=false;      x=mPendingX;      y=mPendingY;    } else {      x=mHotspotBounds.exactCenterX();      y=mHotspotBounds.exactCenterY();    }    mRipple=new Ripple(this,mHotspotBounds,x,y);  }  final int color=mColor.getColorForState(getState(),Color.TRANSPARENT);  mRipple.setup(mMaxRadius,color,mDensity);  mRipple.enter();}  }
class C{  public void findAllLocal(String sql,Object[] args,Result<Iterable<Cursor>> result){  QueryBuilderKraken builder=QueryParserKraken.parse(this,sql);  QueryKraken query=builder.build();  TableKraken table=query.table();  TableKelp tableKelp=table.getTableKelp();  RowCursor cursor=tableKelp.cursor();  query.fillKey(cursor,args);  query.findAllLocal(result,args);}  }
class C{  public MLetContent(URL url,Map<String,String> attributes,List<String> types,List<String> values){  this.documentURL=url;  this.attributes=Collections.unmodifiableMap(attributes);  this.types=Collections.unmodifiableList(types);  this.values=Collections.unmodifiableList(values);  String att=getParameter("codebase");  if (att != null) {    if (!att.endsWith("/")) {      att+="/";    }    try {      baseURL=new URL(documentURL,att);    } catch (    MalformedURLException e) {    }  }  if (baseURL == null) {    String file=documentURL.getFile();    int i=file.lastIndexOf('/');    if (i >= 0 && i < file.length() - 1) {      try {        baseURL=new URL(documentURL,file.substring(0,i + 1));      } catch (      MalformedURLException e) {      }    }  }  if (baseURL == null)   baseURL=documentURL;}  }
class C{  public static IntInterval zeroTo(int count){  return IntInterval.zeroToBy(count,1);}  }
class C{  public static byte[] trimZeroes(byte[] b){  int i=0;  while ((i < b.length - 1) && (b[i] == 0)) {    i++;  }  if (i == 0) {    return b;  }  byte[] t=new byte[b.length - i];  System.arraycopy(b,i,t,0,t.length);  return t;}  }
class C{  public long prevSetBit(long index){  assert index >= 0 && index < numBits : "index=" + index + " numBits="+ numBits;  int i=(int)(index >> 6);  final int subIndex=(int)(index & 0x3f);  long word=(bits[i] << (63 - subIndex));  if (word != 0) {    return (i << 6) + subIndex - Long.numberOfLeadingZeros(word);  }  while (--i >= 0) {    word=bits[i];    if (word != 0) {      return (i << 6) + 63 - Long.numberOfLeadingZeros(word);    }  }  return -1;}  }
class C{  public void stop(){  Log.d(TAG,"Stopping monitoring compass accuracy");  started=false;  hasReading=false;  sensorManager.unregisterListener(this);}  }
class C{  public String minWordFrequencyTipText(){  return "Ignore any words that don't occur at least " + "min frequency times in the training data. If periodic " + "pruning is turned on, then the dictionary is pruned "+ "according to this value";}  }
class C{  public void ancestorResized(HierarchyEvent e){}  }
class C{  public boolean isSingleRow(){  Object oo=get_Value(COLUMNNAME_IsSingleRow);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public CopyOnWriteHashSet<T> copyAndRemoveAll(Collection<?> entries){  CopyOnWriteHashMap<T,Boolean> updated=this.map.copyAndRemoveAll(entries);  if (updated == map) {    return this;  } else {    return new CopyOnWriteHashSet<>(updated);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void keyTyped(char c,int key){  if (currentPageLeft != null)   currentPageLeft.keyTyped(c,key);  if (currentPageRight != null)   currentPageRight.keyTyped(c,key);}  }
class C{  public static MirrorsFragment newInstance(String title,String link,String episode,String season,String imgUri,int numSeasons,int numEpisodes,int rating){  final MirrorsFragment fragment=new MirrorsFragment();  final Bundle args=new Bundle();  args.putString(ARG_TITLE,title);  args.putString(ARG_LINK,link);  args.putString(ARG_EPISODE,episode);  args.putString(ARG_SEASON,season);  args.putString(ARG_IMAGE_URI,imgUri);  args.putInt(ARG_NUM_SEASONS,numSeasons);  args.putInt(ARG_NUM_EPISODES,numEpisodes);  args.putInt(ARG_RATING,rating);  fragment.setArguments(args);  return fragment;}  }
class C{  protected SimpleBNode(String id){  this();  setID(id);}  }
class C{  public final void deleteTables(EXT_TABLES_SQL[] tables) throws AdeException {  if (tables == null) {    return;  }  for (int i=0; i < tables.length; i++) {    Ade.getAde().getDataStore().user().executeDml("delete from " + tables[i].name());  }}  }
class C{  public void testUnsizedLongsCountSeq(){  LongAdder counter=new LongAdder();  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=100;  r.longs().limit(size).forEach(null);  assertEquals(counter.sum(),size);}  }
class C{  private Type(final int sort,final char[] buf,final int off,final int len){  this.sort=sort;  this.buf=buf;  this.off=off;  this.len=len;}  }
class C{  public Hamsi512(){  super();}  }
class C{  public static EnhancedTextField createSearchTextField(){  return new EnhancedTextField(BUNDLE.getString("tmm.searchfield"),null);}  }
class C{  public static float[] join(float[]... arrays){  if (arrays.length == 0) {    return EMPTY_FLOATS;  }  if (arrays.length == 1) {    return arrays[0];  }  if (arrays.length == 2) {    return join(arrays[0],arrays[1]);  }  float[] notNull=null;  int finalSize=0;  int nullArrays=0;  FloatArrayList list=new FloatArrayList(arrays.length * 10);  for (  float[] array : arrays) {    if ((array == null) || (array.length == 0)) {      nullArrays++;    } else {      notNull=array;      finalSize+=array.length;      list.addElements(list.size(),array);    }  }  if (nullArrays == arrays.length) {    return EMPTY_FLOATS;  }  if (nullArrays == (arrays.length - 1)) {    return notNull;  }  return list.toArray(new float[list.size()]);}  }
class C{  @Bean @ConditionalOnMissingBean public EventBus eventBus(){  return new AsyncEventBus(executor);}  }
class C{  protected Node deepCopyInto(Node n){  super.deepCopyInto(n);  SVGOMToBeImplementedElement ae=(SVGOMToBeImplementedElement)n;  ae.localName=localName;  return n;}  }
class C{  public JoinQuery(JavaSparkContext sc,PolygonRDD objectRDD,PolygonRDD polygonRDDUnpartitioned){  if (objectRDD.gridPolygonRDD == null) {    throw new NullPointerException("Need to do spatial partitioning first, gridedSRDD is null");  }  this.polygonRDD=polygonRDDUnpartitioned;  this.polygonRDD.rawPolygonRDD=polygonRDDUnpartitioned.rawPolygonRDD;  this.polygonRDD.SpatialPartition(objectRDD.grids);  this.sc=sc;}  }
class C{  public final DoubleGrid3D multiply(double byThisMuch){  if (byThisMuch == 1.0)   return this;  double[][] fieldx=null;  double[] fieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++)       fieldxy[z]*=byThisMuch;    }  }  return this;}  }
class C{  public final boolean hasTypeParameters(){  return !hasSignatures() && hasTypeArguments();}  }
class C{  public final void removeCallbacksAndMessages(Object token){  mExec.removeCallbacksAndMessages(token);}  }
class C{  public S_Do createS_Do(){  S_DoImpl s_Do=new S_DoImpl();  return s_Do;}  }
class C{  public void layoutContainer(Container parent){  Rectangle b=parent.getBounds();  Insets i=rootPane.getInsets();  JLayeredPane layeredPane=rootPane.getLayeredPane();  Component glassPane=rootPane.getGlassPane();  Container contentPane=rootPane.getContentPane();  JMenuBar menuBar=rootPane.getJMenuBar();  int contentY=0;  int w=b.width - i.right - i.left;  int h=b.height - i.top - i.bottom;  if (layeredPane != null) {    layeredPane.setBounds(i.left,i.top,w,h);  }  if (glassPane != null) {    glassPane.setBounds(i.left,i.top,w,h);  }  if (menuBar != null && menuBar.isVisible()) {    Dimension mbd=menuBar.getPreferredSize();    menuBar.setBounds(0,0,w,mbd.height);    contentY+=mbd.height;  }  if (contentPane != null) {    contentPane.setBounds(0,contentY,w,h - contentY);  }}  }
class C{  public CryptoProvider(){  super("Crypto",1.0,"HARMONY (SHA1 digest; SecureRandom; SHA1withDSA signature)");  final String MD_NAME="org.apache.harmony.security.provider.crypto.SHA1_MessageDigestImpl";  final String SR_NAME="org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl";  final String SIGN_NAME="org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl";  final String SIGN_ALIAS="SHA1withDSA";  final String KEYF_NAME="org.apache.harmony.security.provider.crypto.DSAKeyFactoryImpl";  put("MessageDigest.SHA-1",MD_NAME);  put("MessageDigest.SHA-1 ImplementedIn","Software");  put("Alg.Alias.MessageDigest.SHA1","SHA-1");  put("Alg.Alias.MessageDigest.SHA","SHA-1");  put("SecureRandom.SHA1PRNG",SR_NAME);  put("SecureRandom.SHA1PRNG ImplementedIn","Software");  put("Signature.SHA1withDSA",SIGN_NAME);  put("Signature.SHA1withDSA ImplementedIn","Software");  put("Alg.Alias.Signature.SHAwithDSA",SIGN_ALIAS);  put("Alg.Alias.Signature.DSAwithSHA1",SIGN_ALIAS);  put("Alg.Alias.Signature.SHA1/DSA",SIGN_ALIAS);  put("Alg.Alias.Signature.SHA/DSA",SIGN_ALIAS);  put("Alg.Alias.Signature.SHA-1/DSA",SIGN_ALIAS);  put("Alg.Alias.Signature.DSA",SIGN_ALIAS);  put("Alg.Alias.Signature.DSS",SIGN_ALIAS);  put("Alg.Alias.Signature.OID.1.2.840.10040.4.3",SIGN_ALIAS);  put("Alg.Alias.Signature.1.2.840.10040.4.3",SIGN_ALIAS);  put("Alg.Alias.Signature.1.3.14.3.2.13",SIGN_ALIAS);  put("Alg.Alias.Signature.1.3.14.3.2.27",SIGN_ALIAS);  put("KeyFactory.DSA",KEYF_NAME);  put("KeyFactory.DSA ImplementedIn","Software");  put("Alg.Alias.KeyFactory.1.3.14.3.2.12","DSA");  put("Alg.Alias.KeyFactory.1.2.840.10040.4.1","DSA");}  }
class C{  protected void start(UserTransaction userTransaction){}  }
class C{  public void configureManagers(){  jmri.InstanceManager.setProgrammerManager(getProgrammerManager());  powerManager=new jmri.jmrix.zimo.Mx1PowerManager(this);  jmri.InstanceManager.store(powerManager,jmri.PowerManager.class);  throttleManager=new jmri.jmrix.zimo.Mx1ThrottleManager(this);  InstanceManager.setThrottleManager(throttleManager);  if (getProtocol() == Mx1Packetizer.BINARY) {    turnoutManager=new Mx1TurnoutManager(getMx1TrafficController(),getSystemPrefix());    InstanceManager.setTurnoutManager(turnoutManager);  }}  }
class C{  @Override public DriverTask detachVolumeClone(List<VolumeClone> list){  return cloneHelper.detachVolumeClone(list);}  }
class C{  private void doOperation(Account account,String remotePath){  mCurrentSyncOperation=mPendingOperations.get(account,remotePath);  if (mCurrentSyncOperation != null) {    RemoteOperationResult result=null;    try {      if (mCurrentAccount == null || !mCurrentAccount.equals(account)) {        mCurrentAccount=account;        mStorageManager=new FileDataStorageManager(account,mService.getContentResolver());      }      OwnCloudAccount ocAccount=new OwnCloudAccount(account,mService);      mOwnCloudClient=OwnCloudClientManagerFactory.getDefaultSingleton().getClientFor(ocAccount,mService);      result=mCurrentSyncOperation.execute(mOwnCloudClient,mStorageManager);    } catch (    AccountsException e) {      Log_OC.e(TAG,"Error while trying to get authorization",e);    }catch (    IOException e) {      Log_OC.e(TAG,"Error while trying to get authorization",e);    } finally {      mPendingOperations.removePayload(account,remotePath);      mService.dispatchResultToOperationListeners(mCurrentSyncOperation,result);      sendBroadcastFinishedSyncFolder(account,remotePath,result.isSuccess());    }  }}  }
class C{  public static long reverseBytes(long lng){  long b7=lng >>> 56;  long b6=(lng >>> 40) & 0xFF00L;  long b5=(lng >>> 24) & 0xFF0000L;  long b4=(lng >>> 8) & 0xFF000000L;  long b3=(lng & 0xFF000000L) << 8;  long b2=(lng & 0xFF0000L) << 24;  long b1=(lng & 0xFF00L) << 40;  long b0=lng << 56;  return (b0 | b1 | b2| b3| b4| b5| b6| b7);}  }
class C{  public Switch(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);  mTextPaint=new TextPaint(Paint.ANTI_ALIAS_FLAG);  Resources res=getResources();  mTextPaint.density=res.getDisplayMetrics().density;  mTextPaint.setCompatibilityScaling(res.getCompatibilityInfo().applicationScale);  TypedArray a=context.obtainStyledAttributes(attrs,com.android.internal.R.styleable.Switch,defStyle,0);  mThumbDrawable=a.getDrawable(com.android.internal.R.styleable.Switch_thumb);  mTrackDrawable=a.getDrawable(com.android.internal.R.styleable.Switch_track);  mTextOn=a.getText(com.android.internal.R.styleable.Switch_textOn);  mTextOff=a.getText(com.android.internal.R.styleable.Switch_textOff);  mThumbTextPadding=a.getDimensionPixelSize(com.android.internal.R.styleable.Switch_thumbTextPadding,0);  mSwitchMinWidth=a.getDimensionPixelSize(com.android.internal.R.styleable.Switch_switchMinWidth,0);  mSwitchPadding=a.getDimensionPixelSize(com.android.internal.R.styleable.Switch_switchPadding,0);  int appearance=a.getResourceId(com.android.internal.R.styleable.Switch_switchTextAppearance,0);  if (appearance != 0) {    setSwitchTextAppearance(context,appearance);  }  a.recycle();  ViewConfiguration config=ViewConfiguration.get(context);  mTouchSlop=config.getScaledTouchSlop();  mMinFlingVelocity=config.getScaledMinimumFlingVelocity();  refreshDrawableState();  setChecked(isChecked());}  }
class C{  private Number[] createVertices(int count){  Number[] v=new Number[count];  for (int i=0; i < count; i++) {    v[i]=new Integer(i);    graph.addVertex(v[i]);  }  return v;}  }
class C{  public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName) throws SAXException {  if (dtdHandler != null) {    dtdHandler.unparsedEntityDecl(name,publicId,systemId,notationName);  }}  }
class C{  private synchronized void stopRelayLogs(){  if (relayLogTask == null || relayLogTask.isFinished())   return;  logger.info("Cancelling relay log thread");  relayLogTask.cancel();  relayLogThread.interrupt();  try {    relayLogThread.join(2000);  } catch (  InterruptedException e) {    logger.warn("Interrupted while waiting for relay log task to complete");  }  if (relayLogTask.isFinished()) {    relayLogTask=null;    relayLogThread=null;    relayLogQueue=null;  } else   logger.warn("Unable to cancel relay log thread");}  }
class C{  public ConfusionMatrix(ConfusionMatrix<T> other){  this();  this.add(other);}  }
class C{  private void serviceInfoToProperties(Provider.Service s){  super.put(s.type + "." + s.algorithm,s.className);  if (s.aliases != null) {    for (Iterator<String> i=s.aliases.iterator(); i.hasNext(); ) {      super.put("Alg.Alias." + s.type + "."+ i.next(),s.algorithm);    }  }  if (s.attributes != null) {    for (    Map.Entry<String,String> entry : s.attributes.entrySet()) {      super.put(s.type + "." + s.algorithm+ " "+ entry.getKey(),entry.getValue());    }  }  if (providerNumber != -1) {    Services.setNeedRefresh();  }}  }
class C{  protected boolean isFailFastExpected(){  return true;}  }
class C{  public Bundle buildBundle(){  Bundle bundle=new Bundle();  Icepick.saveInstanceState(this,bundle);  return bundle;}  }
class C{  private void connectRemote() throws Exception {  m_replication=new MReplication(getCtx(),getRecord_ID(),get_TrxName());  String AppsHost=m_replication.getHostAddress();  int AppsPort=m_replication.getHostPort();  CConnection connection=new CConnection(AppsHost);  connection.setAppsPort(AppsPort);  log.info(AppsHost + ":" + AppsPort);  try {    Server server=connection.getServer();    if (server == null)     throw new Exception("NoServer");    m_serverRemote=server;  } catch (  Exception ex) {    log.log(Level.SEVERE,"connectRemote",ex);    throw new Exception(ex);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.664 -0500",hash_original_method="CEB91EBD9D583AC6C7E366C7B6D0F858",hash_generated_method="18582F0D2D575DF2975D49893451B19C") public boolean handlePrack(SIPRequest prackRequest){  if (!this.isServer()) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Dropping Prack -- not a server Dialog");    return false;  }  SIPServerTransaction sipServerTransaction=(SIPServerTransaction)this.getFirstTransaction();  SIPResponse sipResponse=sipServerTransaction.getReliableProvisionalResponse();  if (sipResponse == null) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Dropping Prack -- ReliableResponse not found");    return false;  }  RAck rack=(RAck)prackRequest.getHeader(RAckHeader.NAME);  if (rack == null) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Dropping Prack -- rack header not found");    return false;  }  CSeq cseq=(CSeq)sipResponse.getCSeq();  if (!rack.getMethod().equals(cseq.getMethod())) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Dropping Prack -- CSeq Header does not match PRACK");    return false;  }  if (rack.getCSeqNumberLong() != cseq.getSeqNumber()) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Dropping Prack -- CSeq Header does not match PRACK");    return false;  }  RSeq rseq=(RSeq)sipResponse.getHeader(RSeqHeader.NAME);  if (rack.getRSequenceNumber() != rseq.getSeqNumber()) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Dropping Prack -- RSeq Header does not match PRACK");    return false;  }  return sipServerTransaction.prackRecieved();}  }
class C{  static RuntimeException convert(Exception e){  return new RuntimeException(e.toString(),e);}  }
class C{  public static boolean populateContract(com.ib.client.ContractDetails contractDetails,Contract transientContract) throws ParseException {  boolean changed=false;  if (CoreUtils.nullSafeComparator(transientContract.getSymbol(),contractDetails.m_summary.m_localSymbol) != 0 && SECType.STOCK.equals(transientContract.getSecType())) {    return changed;  }  if (CoreUtils.nullSafeComparator(transientContract.getSymbol(),contractDetails.m_summary.m_symbol) == 0) {    if (CoreUtils.nullSafeComparator(transientContract.getLocalSymbol(),contractDetails.m_summary.m_localSymbol) != 0) {      transientContract.setLocalSymbol(contractDetails.m_summary.m_localSymbol);      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getIdContractIB(),contractDetails.m_summary.m_conId) != 0) {      transientContract.setIdContractIB(contractDetails.m_summary.m_conId);      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getPrimaryExchange(),contractDetails.m_summary.m_primaryExch) != 0) {      transientContract.setPrimaryExchange(contractDetails.m_summary.m_primaryExch);      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getExchange(),contractDetails.m_summary.m_exchange) != 0) {      transientContract.setExchange(contractDetails.m_summary.m_exchange);      changed=true;    }    if (null != contractDetails.m_summary.m_expiry) {      ZonedDateTime expiryDateTime=TradingCalendar.getZonedDateTimeFromDateString(contractDetails.m_summary.m_expiry,"yyyyMMdd",TradingCalendar.MKT_TIMEZONE);      if (CoreUtils.nullSafeComparator(transientContract.getExpiry(),expiryDateTime) != 0) {        transientContract.setExpiry(expiryDateTime);        changed=true;      }    }    if (CoreUtils.nullSafeComparator(transientContract.getSecIdType(),contractDetails.m_summary.m_secIdType) != 0) {      transientContract.setSecIdType(contractDetails.m_summary.m_secIdType);      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getLongName(),contractDetails.m_longName) != 0) {      transientContract.setLongName(contractDetails.m_longName);      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getCurrency(),contractDetails.m_summary.m_currency) != 0) {      transientContract.setCurrency(contractDetails.m_summary.m_currency);      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getCategory(),contractDetails.m_category) != 0) {      transientContract.setCategory(contractDetails.m_category);      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getIndustry(),contractDetails.m_industry) != 0) {      transientContract.setIndustry(contractDetails.m_industry);      changed=true;    }    Money minTick=new Money(contractDetails.m_minTick);    if (CoreUtils.nullSafeComparator(minTick,new Money(Double.MAX_VALUE)) != 0 && CoreUtils.nullSafeComparator(transientContract.getMinTick(),minTick.getBigDecimalValue()) != 0) {      transientContract.setMinTick(minTick.getBigDecimalValue());      changed=true;    }    Money priceMagnifier=new Money(contractDetails.m_priceMagnifier);    if (CoreUtils.nullSafeComparator(priceMagnifier,new Money(Double.MAX_VALUE)) != 0 && CoreUtils.nullSafeComparator(transientContract.getPriceMagnifier(),priceMagnifier.getBigDecimalValue()) != 0) {      transientContract.setPriceMagnifier(priceMagnifier.getBigDecimalValue());      changed=true;    }    Money multiplier=new Money(contractDetails.m_summary.m_multiplier);    if (CoreUtils.nullSafeComparator(multiplier,new Money(Double.MAX_VALUE)) != 0 && CoreUtils.nullSafeComparator(transientContract.getPriceMultiplier(),multiplier.getBigDecimalValue()) != 0) {      transientContract.setPriceMultiplier(multiplier.getBigDecimalValue());      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getSubCategory(),contractDetails.m_subcategory) != 0) {      transientContract.setSubCategory(contractDetails.m_subcategory);      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getTradingClass(),contractDetails.m_summary.m_tradingClass) != 0) {      transientContract.setTradingClass(contractDetails.m_summary.m_tradingClass);      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getComboLegDescription(),contractDetails.m_summary.m_comboLegsDescrip) != 0) {      transientContract.setComboLegDescription(contractDetails.m_summary.m_comboLegsDescrip);      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getContractMonth(),contractDetails.m_contractMonth) != 0) {      transientContract.setContractMonth(contractDetails.m_contractMonth);      changed=true;    }    Money evMultiplier=new Money(contractDetails.m_evMultiplier);    if (CoreUtils.nullSafeComparator(evMultiplier,new Money(Double.MAX_VALUE)) != 0 && CoreUtils.nullSafeComparator(transientContract.getEvMultiplier(),evMultiplier.getBigDecimalValue()) != 0) {      transientContract.setEvMultiplier(evMultiplier.getBigDecimalValue());      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getEvRule(),contractDetails.m_evRule) != 0) {      transientContract.setEvRule(contractDetails.m_evRule);      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getIncludeExpired(),new Boolean(contractDetails.m_summary.m_includeExpired)) != 0) {      transientContract.setIncludeExpired(new Boolean(contractDetails.m_summary.m_includeExpired));      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getLiquidHours(),contractDetails.m_liquidHours) != 0) {      transientContract.setLiquidHours(contractDetails.m_liquidHours);      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getMarketName(),contractDetails.m_marketName) != 0) {      transientContract.setMarketName(contractDetails.m_marketName);      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getOrderTypes(),contractDetails.m_orderTypes) != 0) {      String orderTypes="MKT";      if (contractDetails.m_orderTypes.contains("STP")) {        orderTypes=orderTypes + ",STP";        changed=true;      }      if (contractDetails.m_orderTypes.contains("STPLMT")) {        orderTypes=orderTypes + ",STPLMT";        changed=true;      }      if (contractDetails.m_orderTypes.contains("LMT")) {        orderTypes=orderTypes + ",LMT";        changed=true;      }      transientContract.setOrderTypes(orderTypes);    }    if (CoreUtils.nullSafeComparator(transientContract.getSecId(),contractDetails.m_summary.m_secId) != 0) {      transientContract.setSecId(contractDetails.m_summary.m_secId);      changed=true;    }    Money strike=new Money(contractDetails.m_summary.m_strike);    if (CoreUtils.nullSafeComparator(strike,new Money(Double.MAX_VALUE)) != 0 && CoreUtils.nullSafeComparator(transientContract.getStrike(),strike.getBigDecimalValue()) != 0) {      transientContract.setStrike(strike.getBigDecimalValue());      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getTimeZoneId(),contractDetails.m_timeZoneId) != 0) {      transientContract.setTimeZoneId(contractDetails.m_timeZoneId);      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getTradingHours(),contractDetails.m_tradingHours) != 0) {      transientContract.setTradingHours(contractDetails.m_tradingHours);      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getUnderConId(),new Integer(contractDetails.m_underConId)) != 0) {      transientContract.setUnderConId(new Integer(contractDetails.m_underConId));      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getValidExchanges(),contractDetails.m_validExchanges) != 0) {      transientContract.setValidExchanges(contractDetails.m_validExchanges);      changed=true;    }    if (CoreUtils.nullSafeComparator(transientContract.getOptionType(),contractDetails.m_summary.m_right) != 0) {      transientContract.setOptionType(contractDetails.m_summary.m_right);      changed=true;    }  }  return changed;}  }
class C{  public static void convertActivityToTranslucentBeforeL(Activity activity){  try {    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method method=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz);    method.setAccessible(true);    method.invoke(activity,new Object[]{null});  } catch (  Throwable t) {  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected void engineSetPadding(String paddingScheme) throws NoSuchPaddingException {  core.setPadding(paddingScheme);}  }
class C{  public WampClientBuilder withRealm(String realm){  this.realm=realm;  return this;}  }
class C{  protected Iterator<K> createKeySetIterator(){  if (size() == 0) {    return EmptyIterator.<K>emptyIterator();  }  return new KeySetIterator<K>(this);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapreturnlastitem.class,args);}  }
class C{  private static boolean isProxy(Class<?> clazz){  Class<?> parent=clazz.getSuperclass();  if (parent != null) {    return clazz.getName().contains("$$") && clazz.getName().startsWith(parent.getName());  }  return false;}  }
class C{  public Boolean isPublishAuto(){  PublishAuto publishAuto=getExtension(PublishAuto.class);  return publishAuto == null ? null : publishAuto.getValue();}  }
class C{  public byte[] toByteArray(){  byte[] b=output.toByteArray();  ByteArray.write16bit(numOfEntries,b,0);  return b;}  }
class C{  private char[] allocate(int size){  return new char[size];}  }
class C{  public Reader asReader(){  return new StrBuilderReader();}  }
class C{  public ColladaInputStream(InputStream sourceStream,URI uri) throws IOException {  if (sourceStream == null) {    String message=Logging.getMessage("nullValue.InputStreamIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.inputStream=sourceStream;  this.uri=uri;}  }
class C{  public void addAll(OVector v){  expandFor(size + v.size - 1,null);  System.arraycopy(v.vector,0,vector,size - v.size,v.size);}  }
class C{  private static boolean match(Instance x,int indices[],int values[]){  for (int j=0; j < indices.length; j++) {    int v=(int)Math.round(x.value(indices[j]));    if (v != values[j]) {      return false;    }  }  return true;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void testCase7(){  byte aBytes[]={1,100,56,7,98,-1,39,-128,127,5,6,7,8,9};  byte bBytes[]={15,48,-29,7,98,-1,39,-128};  int aSign=1;  int bSign=1;  byte rBytes[]={23,115,11,78,35,-11};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static void checkMatrix(double[][] expected,double[][] actual,double resolution){  for (int r=0; r < expected.length; r++) {    for (int c=0; c < expected[r].length; c++) {      assertEquals(expected[r][c],actual[r][c],resolution);    }  }}  }
class C{  public CSettingsDialog(final Window parent){  super(parent,"Settings",ModalityType.APPLICATION_MODAL);  setLayout(new BorderLayout(5,5));  new CDialogEscaper(this);  m_pane.add("General",new CGeneralSettingsPanel());  m_pane.add("Colors",new CColorSettingsPanel());  add(m_pane);  add(new CPanelTwoButtons(new InternalListener(),"OK","Cancel"),BorderLayout.SOUTH);  setSize(600,400);}  }
class C{  public Matrix4x3d shadow(double lightX,double lightY,double lightZ,double lightW,double a,double b,double c,double d){  return shadow(lightX,lightY,lightZ,lightW,a,b,c,d,this);}  }
class C{  private void resetNotes2(){  if (errorInStatus2) {    if (editMode) {      statusText1.setText(editStatus2);    } else {      statusText2.setText(stdStatus2);    }    errorInStatus2=false;  }}  }
class C{  public static XMLGregorianCalendar parseCalendar(String s){  return dtFactory.newXMLGregorianCalendar(s);}  }
class C{  protected void maybeParse(){  throw new LazyParseException("checkParse() should never be called on a Block.  Instead use checkParseHeader() and checkParseTransactions()");}  }
class C{  private static void formatNames(Iterable<List<String>> names){  if (names != null) {    for (    List<String> list : names) {      String name=list.get(0);      String[] components=new String[5];      int start=0;      int end;      int componentIndex=0;      while (componentIndex < components.length - 1 && (end=name.indexOf(';',start)) >= 0) {        components[componentIndex]=name.substring(start,end);        componentIndex++;        start=end + 1;      }      components[componentIndex]=name.substring(start);      StringBuilder newName=new StringBuilder(100);      maybeAppendComponent(components,3,newName);      maybeAppendComponent(components,1,newName);      maybeAppendComponent(components,2,newName);      maybeAppendComponent(components,0,newName);      maybeAppendComponent(components,4,newName);      list.set(0,newName.toString().trim());    }  }}  }
class C{  public void testFreqDescend(){  m_Filter=getFilter();  ((ClassOrder)m_Filter).setClassOrder(ClassOrder.FREQ_DESCEND);  Instances result=useFilter();  performTests(result);}  }
class C{  public void downloadFile(URL exportUrl,String filepath) throws IOException, MalformedURLException, ServiceException, DocumentListException {  if (exportUrl == null || filepath == null) {    throw new DocumentListException("null passed in for required parameters");  }  MediaContent mc=new MediaContent();  mc.setUri(exportUrl.toString());  MediaSource ms=service.getMedia(mc);  InputStream inStream=null;  FileOutputStream outStream=null;  try {    inStream=ms.getInputStream();    outStream=new FileOutputStream(filepath);    int c;    while ((c=inStream.read()) != -1) {      outStream.write(c);    }  }  finally {    if (inStream != null) {      inStream.close();    }    if (outStream != null) {      outStream.flush();      outStream.close();    }  }}  }
class C{  void log(String msg){  System.err.println(msg);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof XYSeriesCollection)) {    return false;  }  XYSeriesCollection that=(XYSeriesCollection)obj;  if (!this.intervalDelegate.equals(that.intervalDelegate)) {    return false;  }  return ObjectUtilities.equal(this.data,that.data);}  }
class C{  public PrintStream toPrintStream(){  return toPrintStream(StandardCharsets.UTF_8);}  }
class C{  public boolean hasToTag(){  return hasParameter(ParameterNames.TO_TAG);}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_StateB:    return stateVector[0] == State.main_region_StateB;case main_region_StateA:  return stateVector[0] == State.main_region_StateA;default :return false;}}  }
class C{  public void addFocusGroup(String group,TupleSet tset){  checkGroupExists(group);  m_focus.put(group,tset);}  }
class C{  @Override public void actionPerformed(ActionEvent event){  String command=event.getActionCommand();  if (command.equals("PaletteChoice")) {    attemptPaletteSelection();  } else   if (command.equals("invertPalette")) {    this.invertPalette=this.invertPaletteCheckBox.isSelected();  } else   if (command.equals("stepPalette")) {    this.stepPalette=this.stepPaletteCheckBox.isSelected();  } else {    super.actionPerformed(event);  }}  }
class C{  private void parseWildCards(){  if (fPattern.startsWith("*"))   fHasLeadingStar=true;  if (fPattern.endsWith("*")) {    if (fLength > 1 && fPattern.charAt(fLength - 2) != '\\') {      fHasTrailingStar=true;    }  }  Vector<String> temp=new Vector<String>();  int pos=0;  StringBuffer buf=new StringBuffer();  while (pos < fLength) {    char c=fPattern.charAt(pos++);switch (c) {case '\\':      if (pos >= fLength) {        buf.append(c);      } else {        char next=fPattern.charAt(pos++);        if (next == '*' || next == '?' || next == '\\') {          buf.append(next);        } else {          buf.append(c);          buf.append(next);        }      }    break;case '*':  if (buf.length() > 0) {    temp.addElement(buf.toString());    fBound+=buf.length();    buf.setLength(0);  }break;case '?':buf.append(fSingleWildCard);break;default :buf.append(c);}}if (buf.length() > 0) {temp.addElement(buf.toString());fBound+=buf.length();}fSegments=new String[temp.size()];temp.copyInto(fSegments);}  }
class C{  public static void waitForProcessOutput(Process self,OutputStream output,OutputStream error){  Thread tout=consumeProcessOutputStream(self,output);  Thread terr=consumeProcessErrorStream(self,error);  try {    tout.join();  } catch (  InterruptedException ignore) {  }  try {    terr.join();  } catch (  InterruptedException ignore) {  }  try {    self.waitFor();  } catch (  InterruptedException ignore) {  }  closeStreams(self);}  }
class C{  public void shutdown() throws Exception {  (new Thread(this,"CheckRegisterInLog")).start();}  }
class C{  public static GitHubServerConfig prepareGitHubPlugin(){  final StringCredentialsImpl cred=new StringCredentialsImpl(CredentialsScope.GLOBAL,null,"description",Secret.fromString(GH_TOKEN));  SystemCredentialsProvider.getInstance().getCredentials().add(cred);  final GitHubPluginConfig gitHubPluginConfig=GitHubPlugin.configuration();  final List<GitHubServerConfig> gitHubServerConfigs=new ArrayList<>();  final GitHubServerConfig gitHubServerConfig=new GitHubServerConfig(cred.getId());  gitHubServerConfig.setManageHooks(false);  gitHubServerConfig.setClientCacheSize(0);  gitHubServerConfigs.add(gitHubServerConfig);  gitHubPluginConfig.setConfigs(gitHubServerConfigs);  return gitHubServerConfig;}  }
class C{  public void copyStateFrom(RegionIterator ri){  if (this.region != ri.region) {    throw new InternalError("region mismatch");  }  this.curIndex=ri.curIndex;  this.numXbands=ri.numXbands;}  }
class C{  protected String computeRemoteDomain() throws MessagingException {  StringBuilder domainBuffer=new StringBuilder();  String[] headers=null;  if (getRemoteReceivedHeaderIndex() > -1)   headers=getMessageIn().getHeader(RFC2822Headers.RECEIVED);  boolean hasHeaders=(null != headers && headers.length > 0);  if (hasHeaders) {    final String headerTokens=" \n\r";    for (int headerIndex=headers.length > getRemoteReceivedHeaderIndex() ? getRemoteReceivedHeaderIndex() : headers.length - 1; headerIndex >= 0 && domainBuffer.length() == 0; headerIndex--) {      StringTokenizer tokenizer=new StringTokenizer(headers[headerIndex],headerTokens);      boolean inFrom=false;      while (!inFrom && tokenizer.hasMoreTokens())       inFrom=tokenizer.nextToken().equals("from");      while (inFrom && tokenizer.hasMoreTokens()) {        String token=tokenizer.nextToken();        inFrom=(!getRFC2822RECEIVEDHeaderFields().contains(token));        if (inFrom) {          domainBuffer.append(token);          domainBuffer.append(' ');        }      }    }  }  if (domainBuffer.length() == 0) {    try {      domainBuffer.append(getDNSServer().getLocalHost().getCanonicalHostName());    } catch (    UnknownHostException ue) {      domainBuffer.append("[127.0.0.1]");    }  }  return domainBuffer.toString().trim();}  }
class C{  public void resetCircleColors(){  mCircleColors=new ArrayList<Integer>();}  }
class C{  private static void printUsageAndExit(){  System.out.println("Usage: java GmailSettingsClient" + " --username <username> --password <password> \n --domain <domain>\n" + " --setting <setting> [--disable]\n"+ " [--get --destination_user <destination_user>] \n"+ "[--delete --destination_user <destination_user> --delegationEmailId "+ "<delegationEmailId>]");  System.out.println();  System.out.println("A simple application that demonstrates how to get, \n" + "change or delete Gmail settings in a Google Apps email account.\n" + "Authenticates using the provided admin login credentials, then retrieves\n"+ "or modifies the settings of the specified account.");  System.out.println();  System.out.println("Specify username and destination_user as just the name,\n" + "not the email address.  For example, to change settings for\n" + "joe@example.com use these options:  --username joe --password\n"+ "your_password --domain example.com");  System.out.println();  System.out.println("**To add/update settings...");  System.out.println("Select which setting to change with the setting flag.\n" + "For example, to change the POP3 settings, use --setting pop\n" + "(allowed values are filter, sendas, label, forwarding, pop, imap,\n"+ "vacation, signature, general, language, webclip, delegation.)");  System.out.println();  System.out.println("By default the selected setting will be enabled, \n" + "but with the --disable flag it will be disabled.");  System.out.println();  System.out.println("**To retrieve settings...");  System.out.println("To retrieve settings, use the --get option and\n" + "mandatorily specify a single --destination_user.\n" + "For example, to get the signature settings, use\n"+ "--get --settings signature --destination_user joe\n"+ "(allowed values are label, sendas, forwarding, pop, imap, vacation,\n"+ "signature, and delegation).");  System.out.println();  System.out.println("**To remove settings...");  System.out.println("To remove settings, use the --delete option.\n" + "Deleting a setting is currently possible only for email delegation: use\n" + "--setting delegation. Supply --destination_user and --delegationEmailId\n");  System.out.println();  System.exit(1);}  }
class C{  public static final Builder builder(){  return new Builder();}  }
class C{  public void go() throws FileNotFoundException, IOException {  LatLonPoint ul=new LatLonPoint.Double(maxlat,minlon);  LatLonPoint lr=new LatLonPoint.Double(minlat,maxlon);  ServerMapTileFactory tileServer=new ServerMapTileFactory();  TilePathBuilder serverPathBuilder=new TilePathBuilder(source);  TilePathBuilder localPathBuilder=new TilePathBuilder(target);  ZoomLevelInfo zoomInfo=new ZoomLevelInfo();  for (int z=fromZoom; z <= toZoom; z++) {    int[] uv=getTileBoundsForProjection(ul,lr,z);    int startX=uv[1];    int endX=uv[3];    int startY=uv[0];    int endY=uv[2];    if (verbose) {      System.out.println("fetching tiles for zoom level " + z + " between "+ startY+ ", "+ startX+ " and "+ endY+ ", "+ endX);    }    zoomInfo.setZoomLevel(z);    int maxDim=zoomInfo.getEdgeTileCount();    for (int x=startX; x <= endX && x <= maxDim - 1; x++) {      for (int y=startY; y <= endY && y <= maxDim - 1; y++) {        String serverImagePath=serverPathBuilder.buildTilePath(x,y,z,".png");        String localFilePath=localPathBuilder.buildTilePath(x,y,z,".png");        if (fill) {          File localFile=new File(localFilePath);          if (localFile.exists()) {            if (extraVerbose) {              System.out.println("--- skipping " + localFilePath + ", aready got it");            }            continue;          }        }        if (extraVerbose) {          System.out.println("<<< fetching " + serverImagePath);        }        tileServer.getImageBytes(serverImagePath,localFilePath);      }    }  }}  }
class C{  public static ErStackTraceElement fromExtendedStackTraceElement(ExtendedStackTraceElement element){  ErStackTraceElement erl=new ErStackTraceElement();  erl.setDeclaringClass(element.getClassName());  erl.setFileName(element.getFileName());  erl.setMethodName(element.getMethodName());  erl.setLineNumber(element.getLineNumber());  return erl;}  }
class C{  public void checkStateErrors(MediaPlayerStateErrors stateErrors){  assertTrue(!stateErrors.errorInPreparedStateAfterStop);  assertTrue(!stateErrors.errorInPreparedState);  assertTrue(!stateErrors.errorInStartedState);  assertTrue(!stateErrors.errorInStartedStateAfterPause);  assertTrue(!stateErrors.errorInPausedState);  assertTrue(!stateErrors.errorInStoppedState);  assertTrue(!stateErrors.errorInPlaybackCompletedState);  assertTrue(stateErrors.errorInInitializedState);  assertTrue(stateErrors.errorInErrorState);  assertTrue(stateErrors.errorInIdleStateAfterReset);  assertTrue(stateErrors.errorInIdleState);}  }
class C{  public Page replaceAll(final PageFactory factory,final PageAnimatorFactory pageAnimatorFactory){  checkNotNull(factory,"factory == null");  checkNotNull(pageAnimatorFactory,"inPageAnimatorFactory == null");  while (size() > 0) {    Page popped=pop();    unmountPage(popped,false);    destroyPage(popped);  }  return goTo(factory,pageAnimatorFactory);}  }
class C{  SegmentDescriptor copyTo(Buffer buffer){  this.buffer=buffer.writeLong(id).writeLong(version).writeLong(index).writeUnsignedInt(maxSegmentSize).writeInt(maxEntries).writeLong(updated).writeBoolean(locked).skip(23).flush();  return this;}  }
class C{  public void delete() throws IOException {  close();  deleteContents(directory);}  }
class C{  public static void picture(double x,double y,String s,double w,double h,double degrees){  Image image=getImage(s);  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(w);  double hs=factorY(h);  if (ws < 0 || hs < 0)   throw new IllegalArgumentException("image " + s + " is corrupt");  if (ws <= 1 && hs <= 1)   pixel(x,y);  offscreen.rotate(Math.toRadians(-degrees),xs,ys);  offscreen.drawImage(image,(int)Math.round(xs - ws / 2.0),(int)Math.round(ys - hs / 2.0),(int)Math.round(ws),(int)Math.round(hs),null);  offscreen.rotate(Math.toRadians(+degrees),xs,ys);  draw();}  }
class C{  public int compareTo(Object o){  if (o == null || !(o instanceof DistributionObject))   return -1;  DistributionObject d=(DistributionObject)o;  if (getSequenceNumber() != null && d.getSequenceNumber() != null)   return getSequenceNumber().compareTo(d.getSequenceNumber());  if (getPrefGroup() instanceof Comparable && d.getPrefGroup() instanceof Comparable)   return ((Comparable)getPrefGroup()).compareTo(d.getPrefGroup());  return getPrefGroup().toString().compareTo(d.getPrefGroup().toString());}  }
class C{  public void test_buildOrder9() throws Exception {  final BTree btree=getProblem1();  doBuildAndDiscardCache(btree,9);  final IndexSegmentStore segStore=new IndexSegmentStore(outFile);  assertEquals("#nodes",1,segStore.getCheckpoint().nnodes);  assertEquals("#leaves",2,segStore.getCheckpoint().nleaves);  assertEquals("#entries",10,segStore.getCheckpoint().nentries);  assertEquals("height",1,segStore.getCheckpoint().height);  assertNotSame(segStore.getCheckpoint().addrRoot,segStore.getCheckpoint().addrFirstLeaf);  assertNotSame(segStore.getCheckpoint().addrFirstLeaf,segStore.getCheckpoint().addrLastLeaf);  final IndexSegment seg=segStore.loadIndexSegment();  try {    assertEquals(9,seg.getBranchingFactor());    assertEquals(1,seg.getHeight());    assertEquals(2,seg.getLeafCount());    assertEquals(1,seg.getNodeCount());    assertEquals(10,seg.getEntryCount());    final ImmutableLeaf firstLeaf=seg.readLeaf(segStore.getCheckpoint().addrFirstLeaf);    assertEquals("priorAddr",0L,firstLeaf.getPriorAddr());    assertEquals("nextAddr",segStore.getCheckpoint().addrLastLeaf,firstLeaf.getNextAddr());    final ImmutableLeaf lastLeaf=seg.readLeaf(segStore.getCheckpoint().addrLastLeaf);    assertEquals("priorAddr",segStore.getCheckpoint().addrFirstLeaf,lastLeaf.getPriorAddr());    assertEquals("nextAddr",0L,lastLeaf.getNextAddr());{      final ImmutableLeafCursor itr=seg.newLeafCursor(SeekEnum.First);      assertNull(itr.prior());    }{      final ImmutableLeafCursor itr=seg.newLeafCursor(SeekEnum.Last);      assertNull(itr.next());    }    dumpIndexSegment(seg);{      final Node A=(Node)seg.getRoot();      final Leaf a=(Leaf)A.getChild(0);      final Leaf b=(Leaf)A.getChild(1);      assertKeys(new int[]{6},A);      assertEntryCounts(new int[]{5,5},A);      assertKeys(new int[]{1,2,3,4,5},a);      assertKeys(new int[]{6,7,8,9,10},b);    }    assertSameBTree(btree,seg);  }  finally {    seg.close();  }}  }
class C{  public Register acquire(Type type){  if (freePool.isEmpty()) {    Register tmp=Register.createTemporary(nextIndex++,type);    Trace.trace(Item.COMPILER,"Acquire new temporary, %s",tmp);    return tmp;  }  Register result=freePool.remove(freePool.size() - 1);  Trace.trace(Item.COMPILER,"Acquire temporary, %s",result);  result.setUsed();  result.setType(type);  return result;}  }
class C{  @SuppressWarnings("unchecked") public static <T extends Node>void findNodes(List<Node> nodes,Class<T> cls,List<T> results){  for (  Node n : nodes) {    if (n instanceof ContainerNode) {      findNodes(((ContainerNode)n).getNodes(),cls,results);    }    if (cls == n.getClass()) {      results.add((T)n);    }  }}  }
class C{  protected void applyValues(){  if (setValues()) {    preferences.setIsDirty(true);  }}  }
class C{  @SuppressWarnings("unchecked") public void componentAdded(final WorkspaceComponent workspaceComponent){  addDesktopComponent(workspaceComponent);}  }
class C{  private void stopIndeterminate(){  animation.cancel();  ViewHelper.setX(progressView,0);  runAnimation=false;}  }
class C{  public LocalVariableTypeAttribute(ConstPool cp){  super(cp,tag,new byte[2]);  ByteArray.write16bit(0,info,0);}  }
class C{  public final void testNotEmptyWithContextAndResourceIdParameters(){  assertNotNull(Validators.notEmpty(getContext(),android.R.string.cancel));}  }
class C{  public static void fill(boolean[] a,boolean val){  fill(a,0,a.length,val);}  }
class C{  public void testCustomizeTypeOf() throws Exception {  testCustomizeTypeOf("object",new Foo("object"));  testCustomizeTypeOf("blabla",new Foo("blabla"));}  }
class C{  public static void decodeToString(byte[] from,int location,int precision,int scale,AkibanAppender appender){  final int intCount=precision - scale;  final int intFull=intCount / DECIMAL_DIGIT_PER;  final int intPartial=intCount % DECIMAL_DIGIT_PER;  final int fracFull=scale / DECIMAL_DIGIT_PER;  final int fracPartial=scale % DECIMAL_DIGIT_PER;  int curOff=location;  final int mask=(from[curOff] & 0x80) != 0 ? 0 : -1;  from[curOff]^=0x80;  if (mask != 0)   appender.append('-');  boolean hadOutput=false;  if (intPartial != 0) {    int count=DECIMAL_BYTE_DIGITS[intPartial];    int x=unpackIntegerByWidth(count,from,curOff) ^ mask;    curOff+=count;    if (x != 0) {      hadOutput=true;      appender.append(x);    }  }  for (int i=0; i < intFull; ++i) {    int x=unpackIntegerByWidth(DECIMAL_TYPE_SIZE,from,curOff) ^ mask;    curOff+=DECIMAL_TYPE_SIZE;    if (hadOutput) {      appender.append(String.format("%09d",x));    } else     if (x != 0) {      hadOutput=true;      appender.append(x);    }  }  if (fracFull + fracPartial > 0) {    if (hadOutput) {      appender.append('.');    } else {      appender.append("0.");    }  } else   if (!hadOutput)   appender.append('0');  for (int i=0; i < fracFull; ++i) {    int x=unpackIntegerByWidth(DECIMAL_TYPE_SIZE,from,curOff) ^ mask;    curOff+=DECIMAL_TYPE_SIZE;    appender.append(String.format("%09d",x));  }  if (fracPartial != 0) {    int count=DECIMAL_BYTE_DIGITS[fracPartial];    int x=unpackIntegerByWidth(count,from,curOff) ^ mask;    int width=scale - (fracFull * DECIMAL_DIGIT_PER);    appender.append(String.format("%0" + width + "d",x));  }  from[location]^=0x80;}  }
class C{  public static void fill(double[] array,int start,int end,double value){  checkBounds(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  private SavedState(){  superState=null;}  }
class C{  public void testCount() throws SQLException, Exception {  TestFCCount countTest=new TestFCCount();  int inputCount=10;  assertFalse(countTest.functionCalled);  DatabaseCreator.fillTestTable2(conn,inputCount);  db.create_function("testCount",0,countTest);}  }
class C{  boolean isToolBarButton(JComponent c){  return (c.getParent() instanceof JToolBar);}  }
class C{  public static Date rollMockClockMillis(long millis){  if (mockTime == null)   throw new IllegalStateException("You need to use setMockClock() first.");  mockTime=new Date(mockTime.getTime() + millis);  return mockTime;}  }
class C{  private static ValueSource buildSourceTree(IndexSchema schema,String expression,int sourceType){  int expressionType=getSourceType(expression);  if (sourceType != FIELD_TYPE && expressionType != FIELD_TYPE && expressionType != FILTER_TYPE && expressionType != sourceType) {    return null;  }switch (expressionType) {case NUMBER_TYPE:    return buildNumericSource(schema,expression);case DATE_TYPE:  return buildDateSource(schema,expression);case STRING_TYPE:return buildStringSource(schema,expression);case FIELD_TYPE:return buildFieldSource(schema,expression,sourceType);case FILTER_TYPE:return buildFilterSource(schema,expression.substring(expression.indexOf('(') + 1,expression.lastIndexOf(')')),sourceType);default :throw new SolrException(ErrorCode.BAD_REQUEST,expression + " is not a valid operation.");}}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {  try {    write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));  } catch (  org.apache.thrift.TException te) {    throw new java.io.IOException(te);  }}  }
class C{  private boolean containsNullValue(){  IntEntry<VALUE> tab[]=table;  for (int i=0; i < tab.length; i++)   for (IntEntry<VALUE> e=tab[i]; e != null; e=e.next)   if (e.value == null)   return true;  return false;}  }
class C{  private int[] flushFieldNums() throws IOException {  SortedSet<Integer> fieldNums=new TreeSet<>();  for (  DocData dd : pendingDocs) {    for (    FieldData fd : dd.fields) {      fieldNums.add(fd.fieldNum);    }  }  final int numDistinctFields=fieldNums.size();  assert numDistinctFields > 0;  final int bitsRequired=PackedInts.bitsRequired(fieldNums.last());  final int token=(Math.min(numDistinctFields - 1,0x07) << 5) | bitsRequired;  vectorsStream.writeByte((byte)token);  if (numDistinctFields - 1 >= 0x07) {    vectorsStream.writeVInt(numDistinctFields - 1 - 0x07);  }  final PackedInts.Writer writer=PackedInts.getWriterNoHeader(vectorsStream,PackedInts.Format.PACKED,fieldNums.size(),bitsRequired,1);  for (  Integer fieldNum : fieldNums) {    writer.add(fieldNum);  }  writer.finish();  int[] fns=new int[fieldNums.size()];  int i=0;  for (  Integer key : fieldNums) {    fns[i++]=key;  }  return fns;}  }
class C{  private void contextualShape(char[] text,int start,int count,int contextIndex){  char maxDigit=(char)0x0039;  char minDigit=(char)0x0030;  int currIndex;  if (((1 << contextIndex) & fRanges) == 0) {    currIndex=INDEX_EUROPEAN;  } else {    currIndex=contextIndex;  }  for (int ind=start; ind < start + count; ind++) {    if (minDigit <= text[ind] && text[ind] <= maxDigit) {      if (currIndex != INDEX_ETHIOPIC || text[ind] != '0') {        text[ind]=(char)(digitsLowRanges[currIndex] + text[ind]);      }    } else {      if (isCharStrong(text[ind])) {        int index=getCharIndex(text[ind]);        if (currIndex != index) {          if (((1 << index) & fRanges) != 0) {            currIndex=index;          } else {            currIndex=INDEX_EUROPEAN;          }        }      }    }  }}  }
class C{  private void previousWindow(Calendar startTime){  if (isDaily()) {    startTime.add(Calendar.DAY_OF_MONTH,-1);  } else   if (isWeekly()) {    startTime.add(Calendar.WEEK_OF_MONTH,-1);  } else   if (isMonthly()) {    int month=startTime.get(Calendar.MONTH);    adjustDayOfMonth(startTime,month + -1);  }}  }
class C{  private boolean checkForSingleTrain(Car car,Car clone){  boolean trainServicesCar=false;  Train testTrain=null;  if (_train != null) {    trainServicesCar=_train.services(_buildReport,clone);  }  if (trainServicesCar) {    testTrain=_train;  }  if (car.getTrack().getTrackType().equals(Track.STAGING) && _train != null && !trainServicesCar) {    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("RouterTrainCanNotStaging"),new Object[]{_train.getName(),car.toString(),car.getLocationName(),clone.getDestinationName(),clone.getDestinationTrackName()}));    if (!_train.getServiceStatus().equals(Train.NONE)) {      addLine(_buildReport,SEVEN,_train.getServiceStatus());    }  } else   if (!trainServicesCar) {    testTrain=TrainManager.instance().getTrainForCar(clone,_train,_buildReport);  }  if (testTrain != null && _train != null && !trainServicesCar && _train.isServiceAllCarsWithFinalDestinationsEnabled()) {    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("RouterOptionToCarry"),new Object[]{testTrain.getName(),car.toString(),clone.getDestinationName(),clone.getDestinationTrackName()}));    testTrain=null;  }  if (testTrain != null) {    return routeUsingOneTrain(testTrain,car,clone);  }  return false;}  }
class C{  @Inline private static boolean testAndClearMark(ObjectReference object){  Word oldValue;  do {    oldValue=VM.objectModel.prepareAvailableBits(object);    Word markBit=oldValue.and(GC_MARK_BIT_MASK);    if (markBit.isZero())     return false;  } while (!VM.objectModel.attemptAvailableBits(object,oldValue,oldValue.and(GC_MARK_BIT_MASK.not())));  return true;}  }
class C{  public final double[] toArray3(double[] array,int offset){  if (array == null) {    throw new IllegalArgumentException("Array Is Null");  }  return toDoubleArray(array,offset,3);}  }
class C{  @SuppressWarnings("unchecked") public SymmetricalWordAlignment alignmentGrid(){  SymmetricalWordAlignment alignment=new SymmetricalWordAlignment((Sequence<IString>)this.source,(Sequence<IString>)this.translation);  for (Featurizable<TK,FV> f=this.featurizable; f != null; f=f.prior) {    int srcPosition=f.sourcePosition;    int tgtPosition=f.targetPosition;    int tgtLength=f.targetPhrase.size();    PhraseAlignment al=f.rule.abstractRule.alignment;    if (al == null) {      throw new RuntimeException("Alignments are not enabled. Cannot extract alignments from translation.");    }    for (int i=0; i < tgtLength; ++i) {      int[] sIndices=al.t2s(i);      if (sIndices != null) {        final int tgtIndex=tgtPosition + i;        for (        int srcOffset : sIndices) {          int srcIndex=srcPosition + srcOffset;          alignment.addAlign(srcIndex,tgtIndex);        }      }    }  }  return alignment;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:07.043 -0500",hash_original_method="7060C98AD2B6D1D27FBDA877BC7BC75F",hash_generated_method="E65E412DD98B751A0E58E3FCF93C6D6A") private void nativeSplitContent(int content){  addTaint(content);}  }
class C{  public void rectValueToPixelHorizontal(RectF r){  mMatrixValueToPx.mapRect(r);  mViewPortHandler.getMatrixTouch().mapRect(r);  mMatrixOffset.mapRect(r);}  }
class C{  public void unLinkTreePriors(PartitionTreeModel selectedTreeModel){  for (  PartitionTreeModel model : getPartitionTreeModels()) {    PartitionTreePrior prior=model.getPartitionTreePrior();    if (model == selectedTreeModel) {      prior.setName(model.getName());    } else {      PartitionTreePrior ptp=new PartitionTreePrior(this,model.getName(),prior);      model.setPartitionTreePrior(ptp);    }  }  clearDataPartitionCaches();}  }
class C{  public static void onError(Context context,String error){  init(context);  startLogService(MessageUtils.ERROR_DATA,getErrorJSONObject(error));}  }
class C{  public boolean isNow(){  return now;}  }
class C{  public ASTList sublist(int nth){  ASTList list=this;  while (nth-- > 0)   list=list.right;  return list;}  }
class C{  public void testBlockComment() throws IOException {  final InputStream stream=this.getStream(R.raw.block_comment);  List<String> commands=SqlParser.parse(stream);  assertEquals(1,commands.size());  assertEquals(sql1,commands.get(0));}  }
class C{  private void gotoSplashActivity(){  Intent intent=new Intent();  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  intent.setClass(this,SplashActivity.class);  intent.setAction(SplashActivity.ACTION_UNCHECK_LOCK);  startActivity(intent);  finish();}  }
class C{  void parse(final ConversationParser parser){  Expression prevWord=null;  for (String ws; (ws=parser.readNextWord()) != null; ) {    if (ws.equals("and")) {      if (prevWord != null) {        prevWord.setBreakFlag();      }    } else {      final PunctuationParser punct=new PunctuationParser(ws);      final String precedingPunct=punct.getPrecedingPunctuation();      String text=punct.getText();      if ((precedingPunct.length() > 0) && text.matches("[0-9.,]+")) {        text=ws;      }      if (precedingPunct.contains(",")) {        if (prevWord != null) {          prevWord.setBreakFlag();        }      }      final Expression word=new Expression(text);      expressions.add(word);      if (punct.getTrailingPunctuation().contains(",")) {        word.setBreakFlag();      }      prevWord=word;    }  }}  }
class C{  public void addImmutableType(final Class<?> type,final boolean isReferenceable){  immutableTypes.add(type);  if (!isReferenceable) {    unreferenceableTypes.add(type);  } else {    unreferenceableTypes.remove(type);  }}  }
class C{  public boolean removeRecord(Record r,int section){  if (sections[section] != null && sections[section].remove(r)) {    header.decCount(section);    return true;  } else   return false;}  }
class C{  static public int countRangesThatCollideZone(List<Bounds> ranges,List<Bounds> zoneRanges){  int overallEOAA=0;  Collections.sort(zoneRanges);  for (  Bounds extractedBounds : ranges) {    for (    Bounds expectedBounds : zoneRanges) {      if (expectedBounds.start >= extractedBounds.end) {        break;      }      if (extractedBounds.overlaps(expectedBounds)) {        overallEOAA++;        break;      }    }  }  return overallEOAA;}  }
class C{  public TrackView(){  try {    car=ImageIO.read(TrackView.class.getResource("images/beetle_red.gif"));    track=ImageIO.read(TrackView.class.getResource("images/track.jpg"));  } catch (  Exception e) {    System.out.println("Problem loading track/car images: " + e);  }  carPosition=new Point(START_POS.x,START_POS.y);  carW=car.getWidth();  carH=car.getHeight();  carWHalf=carW / 2;  carHHalf=carH / 2;  trackW=track.getWidth();  trackH=track.getHeight();}  }
class C{  public static void msgLong(final Context c,final String msg){  if (c != null && msg != null) {    Toast.makeText(c,msg.trim(),Toast.LENGTH_LONG).show();  }}  }
class C{  @Override protected void mouseClicked(int par1,int par2,int par3) throws IOException {  super.mouseClicked(par1,par2,par3);  nameBox.mouseClicked(par1,par2,par3);}  }
class C{  private void printStatusMessages(AbstractTestSuiteChromosome<? extends ExecutableChromosome> suite,int coveredGoals,double fitness){  if (coveredGoals > maxCoveredGoals) {    logger.info("(Output Goals) Best individual covers " + coveredGoals + "/"+ totalGoals+ " output goals");    maxCoveredGoals=coveredGoals;    logger.info("Fitness: " + fitness + ", size: "+ suite.size()+ ", length: "+ suite.totalLengthOfTestCases());  }  if (fitness < bestFitness) {    logger.info("(Fitness) Best individual covers " + coveredGoals + "/"+ totalGoals+ " output goals");    bestFitness=fitness;    logger.info("Fitness: " + fitness + ", size: "+ suite.size()+ ", length: "+ suite.totalLengthOfTestCases());  }}  }
class C{  public float expansion_factor(){  return soot.PhaseOptions.getFloat(options,"expansion-factor");}  }
class C{  public void hideShoppingCartDetailView(View view){  shoppingCartRenderer.hideDetailView();}  }
class C{  public void registerOreDict(){  OreDictionary.registerOre("universalCable",new ItemStack(MekanismItems.PartTransmitter,8,0));  OreDictionary.registerOre("battery",MekanismItems.EnergyTablet.getUnchargedItem());  OreDictionary.registerOre("pulpWood",MekanismItems.Sawdust);  OreDictionary.registerOre("dustWood",MekanismItems.Sawdust);  OreDictionary.registerOre("blockSalt",MekanismBlocks.SaltBlock);  OreDictionary.registerOre("alloyBasic",new ItemStack(Items.redstone));  OreDictionary.registerOre("alloyAdvanced",new ItemStack(MekanismItems.EnrichedAlloy));  OreDictionary.registerOre("alloyElite",new ItemStack(MekanismItems.ReinforcedAlloy));  OreDictionary.registerOre("alloyUltimate",new ItemStack(MekanismItems.AtomicAlloy));  OreDictionary.registerOre("itemSalt",MekanismItems.Salt);  OreDictionary.registerOre("dustSalt",MekanismItems.Salt);  OreDictionary.registerOre("dustDiamond",new ItemStack(MekanismItems.OtherDust,1,0));  OreDictionary.registerOre("dustSteel",new ItemStack(MekanismItems.OtherDust,1,1));  OreDictionary.registerOre("dustLead",new ItemStack(MekanismItems.OtherDust,1,2));  OreDictionary.registerOre("dustSulfur",new ItemStack(MekanismItems.OtherDust,1,3));  OreDictionary.registerOre("dustLithium",new ItemStack(MekanismItems.OtherDust,1,4));  OreDictionary.registerOre("dustRefinedObsidian",new ItemStack(MekanismItems.OtherDust,1,5));  OreDictionary.registerOre("dustObsidian",new ItemStack(MekanismItems.OtherDust,1,6));  OreDictionary.registerOre("ingotRefinedObsidian",new ItemStack(MekanismItems.Ingot,1,0));  OreDictionary.registerOre("ingotOsmium",new ItemStack(MekanismItems.Ingot,1,1));  OreDictionary.registerOre("ingotBronze",new ItemStack(MekanismItems.Ingot,1,2));  OreDictionary.registerOre("ingotRefinedGlowstone",new ItemStack(MekanismItems.Ingot,1,3));  OreDictionary.registerOre("ingotSteel",new ItemStack(MekanismItems.Ingot,1,4));  OreDictionary.registerOre("ingotCopper",new ItemStack(MekanismItems.Ingot,1,5));  OreDictionary.registerOre("ingotTin",new ItemStack(MekanismItems.Ingot,1,6));  OreDictionary.registerOre("blockOsmium",new ItemStack(MekanismBlocks.BasicBlock,1,0));  OreDictionary.registerOre("blockBronze",new ItemStack(MekanismBlocks.BasicBlock,1,1));  OreDictionary.registerOre("blockRefinedObsidian",new ItemStack(MekanismBlocks.BasicBlock,1,2));  OreDictionary.registerOre("blockCharcoal",new ItemStack(MekanismBlocks.BasicBlock,1,3));  OreDictionary.registerOre("blockRefinedGlowstone",new ItemStack(MekanismBlocks.BasicBlock,1,4));  OreDictionary.registerOre("blockSteel",new ItemStack(MekanismBlocks.BasicBlock,1,5));  OreDictionary.registerOre("blockCopper",new ItemStack(MekanismBlocks.BasicBlock,1,12));  OreDictionary.registerOre("blockTin",new ItemStack(MekanismBlocks.BasicBlock,1,13));  for (  Resource resource : Resource.values()) {    OreDictionary.registerOre("dust" + resource.getName(),new ItemStack(MekanismItems.Dust,1,resource.ordinal()));    OreDictionary.registerOre("dustDirty" + resource.getName(),new ItemStack(MekanismItems.DirtyDust,1,resource.ordinal()));    OreDictionary.registerOre("clump" + resource.getName(),new ItemStack(MekanismItems.Clump,1,resource.ordinal()));    OreDictionary.registerOre("shard" + resource.getName(),new ItemStack(MekanismItems.Shard,1,resource.ordinal()));    OreDictionary.registerOre("crystal" + resource.getName(),new ItemStack(MekanismItems.Crystal,1,resource.ordinal()));  }  OreDictionary.registerOre("oreOsmium",new ItemStack(MekanismBlocks.OreBlock,1,0));  OreDictionary.registerOre("oreCopper",new ItemStack(MekanismBlocks.OreBlock,1,1));  OreDictionary.registerOre("oreTin",new ItemStack(MekanismBlocks.OreBlock,1,2));  if (general.controlCircuitOreDict) {    OreDictionary.registerOre("circuitBasic",new ItemStack(MekanismItems.ControlCircuit,1,0));    OreDictionary.registerOre("circuitAdvanced",new ItemStack(MekanismItems.ControlCircuit,1,1));    OreDictionary.registerOre("circuitElite",new ItemStack(MekanismItems.ControlCircuit,1,2));    OreDictionary.registerOre("circuitUltimate",new ItemStack(MekanismItems.ControlCircuit,1,3));  }  OreDictionary.registerOre("itemCompressedCarbon",new ItemStack(MekanismItems.CompressedCarbon));  OreDictionary.registerOre("itemEnrichedAlloy",new ItemStack(MekanismItems.EnrichedAlloy));  OreDictionary.registerOre("itemBioFuel",new ItemStack(MekanismItems.BioFuel));}  }
class C{  @Override public final String toString(){  StringBuilder sb=new StringBuilder(64);switch (_type) {case TYPE_ROOT:    sb.append("/");  break;case TYPE_ARRAY:sb.append('[');sb.append(getCurrentIndex());sb.append(']');break;case TYPE_OBJECT:sb.append('{');if (_currentName != null) {sb.append('"');CharTypes.appendQuoted(sb,_currentName);sb.append('"');} else {sb.append('?');}sb.append('}');break;}return sb.toString();}  }
class C{  public void cardSelected(Button b){  if (sco == null)   return;  if (b == select) {    if (firstPass) {      top.handle(new Event(Event.EType.CARD).setInteger(0));    } else {      int[] cards=new int[openedCards.size()];      for (int i=0; i < openedCards.size(); i++) {        CardInfo ci=openedCards.get(i);        if (!isAcceptable(ci.cs.c,ci.parent))         return;        cards[i]=ci.cs.c.id;      }      if (sco.getPickType() == PickType.SELECT_WITH_ALL && openedCards.size() == 0 && !select.getText().toString().endsWith("!")) {        top.handle(new Event(Event.EType.CARD).setInteger(1).setObject(new EventObject(new int[]{-1})));      } else       if ((sco.getPickType() == PickType.PLAY_IN_ORDER || sco.getPickType() == PickType.PLAY) && openedCards.size() == 0 && !select.getText().toString().endsWith("!")) {        top.handle(new Event(Event.EType.CARD).setInteger(1).setObject(new EventObject(new int[]{-1})));      } else {        top.handle(new Event(Event.EType.CARD).setInteger(openedCards.size()).setObject(new EventObject(cards)));      }    }  } else   if (b == pass) {    if (!sco.isPassable())     return;    if (firstPass) {      firstPass=false;      resetButtons();    } else {      firstPass=true;      passButtons();    }    return;  } else   return;  for (  CardInfo ci : openedCards) {    CardState cs=ci.cs;    cs.opened=false;    cs.order=-1;    cs.indicator=sco.getPickType().indicator();    ci.parent.updateState(ci.pos,cs);  }  openedCards.clear();  sco=null;  pass.setVisibility(INVISIBLE);  select.setVisibility(INVISIBLE);  firstPass=false;  resetButtons();}  }
class C{  public static void assertNotEmpty(BufferedImage image){  assertNotEmpty("",image);}  }
class C{  public boolean isDiscFile(){  String name=getFilename().toLowerCase();  return (name.matches("(video_ts|vts_\\d\\d_\\d)\\.(vob|bup|ifo)") || name.matches("(index\\.bdmv|movieobject\\.bdmv|\\d{5}\\.m2ts)"));}  }
class C{  public boolean isSetStoreName(){  return this.storeName != null;}  }
class C{  protected RelFieldTrimmer newFieldTrimmer(){  final RelBuilder relBuilder=RelFactories.LOGICAL_BUILDER.create(cluster,null);  return new RelFieldTrimmer(validator,relBuilder);}  }
class C{  public void addLinkedPosition(ITrackedNodePosition position,boolean isFirst,String groupID){  getLinkedProposalModel().getPositionGroup(groupID,true).addPosition(position,isFirst);}  }
class C{  @SuppressWarnings("unused") public void createES_Descriptor(MP4DataStream bitstream) throws IOException {  int ES_ID=(int)bitstream.readBytes(2);  int flags=(int)bitstream.readBytes(1);  boolean streamDependenceFlag=(flags & (1 << 7)) != 0;  boolean urlFlag=(flags & (1 << 6)) != 0;  boolean ocrFlag=(flags & (1 << 5)) != 0;  readed+=3;  if (streamDependenceFlag) {    bitstream.skipBytes(2);    readed+=2;  }  if (urlFlag) {    int str_size=(int)bitstream.readBytes(1);    bitstream.readString(str_size);    readed+=str_size + 1;  }  if (ocrFlag) {    bitstream.skipBytes(2);    readed+=2;  }  while (readed < size) {    MP4Descriptor descriptor=createDescriptor(bitstream);    children.addElement(descriptor);    readed+=descriptor.getReaded();  }}  }
class C{  public static void loadModule(final Window parent,final INaviModule module){  Preconditions.checkNotNull(parent,"IE01197: Parent argument can not be null");  Preconditions.checkNotNull(module,"IE01278: Module argument can not be null");  loadModuleThreaded(parent,module,null);}  }
class C{  private static String escapeXML(String s){  if (s == null) {    return null;  }  final int length=s.length();  StringBuffer b=new StringBuffer();  for (int i=0; i < length; i++) {    char c=s.charAt(i);switch (c) {case '&':      b.append("&amp;");    break;case '<':  b.append("&lt;");break;case '>':b.append("&gt;");break;default :b.append(c);break;}}return b.toString();}  }
class C{  @Override public void closeWriter(KMZWriter writer){}  }
class C{  public ImmutableTypeToInstanceMap<B> build(){  return new ImmutableTypeToInstanceMap<B>(mapBuilder.build());}  }
class C{  public TblColRef decideSourceData(DataModelDesc model,TblColRef col) throws IOException {  if (model.isFactTable(col.getTable())) {    TblColRef pkCol=model.findPKByFK(col,"inner");    if (pkCol != null)     col=pkCol;  }  return col;}  }
class C{  protected AbstractRed(CachableRed src,Rectangle bounds,ColorModel cm,SampleModel sm,Map props){  init(src,bounds,cm,sm,(src == null) ? 0 : src.getTileGridXOffset(),(src == null) ? 0 : src.getTileGridYOffset(),props);}  }
class C{  public int maxSubArraySum(int[] A){  if (A == null || A.length == 0)   return 0;  int curMax=A[0];  int max=A[0];  for (int i=1; i < A.length; i++) {    curMax=Math.max(curMax + A[i],A[i]);    max=Math.max(curMax,max);  }  return max;}  }
class C{  public LegendItem(String label,String description,String toolTipText,String urlText,Shape line,Stroke lineStroke,Paint linePaint){  this(label,description,toolTipText,urlText,false,UNUSED_SHAPE,false,Color.black,false,Color.black,UNUSED_STROKE,true,line,lineStroke,linePaint);}  }
class C{  String errorHook(String msg,int level){  if (globals == null)   return msg;  final LuaThread r=globals.running;  if (r.errorfunc == null)   return globals.debuglib != null ? msg + "\n" + globals.debuglib.traceback(level) : msg;  final LuaValue e=r.errorfunc;  r.errorfunc=null;  try {    return e.call(LuaValue.valueOf(msg)).tojstring();  } catch (  Throwable t) {    return "error in error handling";  } finally {    r.errorfunc=e;  }}  }
class C{  public pre addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public void repaint(Rectangle r){}  }
class C{  public final AC grow(){  return grow(1f,curIx);}  }
class C{  public static TypeInstanceDialog instantiateEditTypeInstanceDialog(final JFrame owner,final TypeManager typeManager,final TypeInstance instance){  final TypeInstanceDialog dialog=new TypeInstanceDialog(owner,"Edit type instance",new TypeListModel(typeManager.getTypes(),new TypeListModel.PrototypesFilter()),instance,instance.getSection(),instance.getAddress().getOffset());  dialog.types.setEnabled(false);  dialog.sectionOffset.setEnabled(false);  return dialog;}  }
class C{  public void end(String namespace,String name) throws Exception {  NavigationCaseBean ncb=null;  try {    ncb=(NavigationCaseBean)digester.pop();  } catch (  Exception e) {    throw new IllegalStateException("Popped object is not a " + CLASS_NAME + " instance");  }  NavigationRuleBean nrb=(NavigationRuleBean)digester.peek();  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[NavigationCaseRule]{" + digester.getMatch() + "} New Case");  }  nrb.addNavigationCase(ncb);}  }
class C{  @Override public Value createClob(Reader reader,long maxLength){  return ValueLobDb.createTempClob(reader,maxLength,handler);}  }
class C{  public boolean search(V v){  int h=hashMethod.hash(v);  LinkedList<V> list=(LinkedList<V>)table[h];  if (list == null) {    return false;  }  return list.contains(v);}  }
class C{  public void addSourceCode(String name,String code){  if (debug) {    debugnl(String.format("... adding code '%s' ",name));  }  newSourceCode(name,code);  this.sources.put(name,new SourceCode(name,code));}  }
class C{  public static void main(String[] args){  runJavadoc(new AllJavadoc(),args);}  }
class C{  public boolean isAdjacentToEntryBlock(BasicBlock insBlock){  if (insBlock.isEntryBlock())   return true;  Set<BasicBlock> parents=getParents(insBlock);  for (  BasicBlock parent : parents)   if (parent.isEntryBlock())   return true;  return false;}  }
class C{  public boolean shouldPrerender(){  if (!DeviceClassManager.enablePrerendering())   return false;  migrateNetworkPredictionPreferences();  return PrefServiceBridge.getInstance().canPredictNetworkActions();}  }
class C{  public String windowSizeTipText(){  return "Gets the maximum number of instances allowed in the training " + "pool. The addition of new instances above this value will result " + "in old instances being removed. A value of 0 signifies no limit "+ "to the number of training instances.";}  }
class C{  @POST @Consumes("application/json") @ApiOperation(value="Add a stock item",notes="Add a valid stock item") public void addStock(@ApiParam(value="Stock object",required=true) Stock stock) throws DuplicateSymbolException {  String symbol=stock.getSymbol();  if (stockQuotes.containsKey(symbol)) {    throw new DuplicateSymbolException("Symbol " + symbol + " already exists");  }  stockQuotes.put(symbol,stock);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double SMALL_NUM=0.0001d;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  SMALL_NUM=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    updateProgress("Initializing: ",-1);    int row_n, col_n;    int row, col;    double z_n;    long k=0;    GridCell gc=null;    double z;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    int progress=0;    int oldProgress;    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int rowsLessOne=rows - 1;    int cols=image.getNumberColumns();    int numCells=0;    String preferredPalette=image.getPreferredPalette();    double noData=image.getNoDataValue();    double[][] output=new double[rows][cols];    double[][] input=new double[rows + 2][cols + 2];    for (row=0; row < rows + 2; row++) {      input[row][0]=noData;      input[row][cols + 1]=noData;    }    for (col=0; col < cols + 2; col++) {      input[0][col]=noData;      input[rows + 1][col]=noData;    }    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        output[row][col]=-999;        input[row + 1][col + 1]=data[col];      }    }    image.close();    updateProgress("Loop 1: ",-1);    int numCellsTotal=rows * cols;    int numSolvedCells=0;    PriorityQueue<GridCell> queue=new PriorityQueue<>((2 * rows + 2 * cols) * 2);    oldProgress=-1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=input[row + 1][col + 1];        if (z != noData) {          numCells++;          for (int i=0; i < 8; i++) {            row_n=row + Dy[i];            col_n=col + Dx[i];            z_n=input[row_n + 1][col_n + 1];            if (z_n == noData) {              gc=new GridCell(row,col,z);              queue.add(gc);              output[row][col]=z;              numCellsTotal++;              break;            }          }        } else {          numSolvedCells++;          output[row][col]=noData;        }      }      progress=(int)(100f * row / rowsLessOne);      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;        if (myHost.isRequestForOperationCancelSet()) {          myHost.showFeedback("Operation cancelled");          return;        }      }    }    updateProgress("Loop 2: ",0);    oldProgress=(int)(100f * numSolvedCells / numCellsTotal);    do {      gc=queue.poll();      row=gc.row;      col=gc.col;      z=gc.z;      for (int i=0; i < 8; i++) {        row_n=row + Dy[i];        col_n=col + Dx[i];        z_n=input[row_n + 1][col_n + 1];        if ((z_n != noData) && (output[row_n][col_n] == -999)) {          if (z_n <= z) {            z_n=z + SMALL_NUM;          }          output[row_n][col_n]=z_n;          numSolvedCells++;          gc=new GridCell(row_n,col_n,z_n);          queue.add(gc);        }      }      progress=(int)(100f * numSolvedCells / numCellsTotal);      if ((progress - oldProgress) == 1) {        updateProgress(progress);        oldProgress=progress;        if (myHost.isRequestForOperationCancelSet()) {          myHost.showFeedback("Operation cancelled");          return;        }      }    } while (queue.isEmpty() == false);    updateProgress("Saving Data: ",0);    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.DOUBLE,-999);    outputFile.setPreferredPalette(preferredPalette);    oldProgress=-1;    for (row=0; row < rows; row++) {      outputFile.setRowValues(row,output[row]);      progress=(int)(100f * row / rowsLessOne);      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;        if (myHost.isRequestForOperationCancelSet()) {          myHost.showFeedback("Operation cancelled");          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void testCase8(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=-1;  int bSign=1;  byte rBytes[]={-12,-23,-34,-45,-56,-67,-78,-12,-23,-33};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(-1,result.signum());}  }
class C{  public static Map<String,Object> createPaymentFromPreference(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  String orderPaymentPreferenceId=(String)context.get("orderPaymentPreferenceId");  String paymentRefNum=(String)context.get("paymentRefNum");  String paymentFromId=(String)context.get("paymentFromId");  String comments=(String)context.get("comments");  Timestamp eventDate=(Timestamp)context.get("eventDate");  Locale locale=(Locale)context.get("locale");  if (UtilValidate.isEmpty(eventDate)) {    eventDate=UtilDateTime.nowTimestamp();  }  try {    GenericValue orderPaymentPreference=EntityQuery.use(delegator).from("OrderPaymentPreference").where("orderPaymentPreferenceId",orderPaymentPreferenceId).queryOne();    if (orderPaymentPreference == null) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderOrderPaymentCannotBeCreated",UtilMisc.toMap("orderPaymentPreferenceId","orderPaymentPreferenceId"),locale));    }    GenericValue orderHeader=orderPaymentPreference.getRelatedOne("OrderHeader",false);    if (orderHeader == null) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderOrderPaymentCannotBeCreatedWithRelatedOrderHeader",locale));    }    GenericValue productStore=orderHeader.getRelatedOne("ProductStore",false);    if (productStore == null) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderOrderPaymentCannotBeCreatedWithRelatedProductStore",locale));    }    if (paymentFromId == null) {      OrderReadHelper orh=new OrderReadHelper(orderHeader);      GenericValue billToParty=orh.getBillToParty();      if (billToParty != null) {        paymentFromId=billToParty.getString("partyId");      } else {        paymentFromId="_NA_";      }    }    String payToPartyId=productStore.getString("payToPartyId");    if (payToPartyId == null) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderOrderPaymentCannotBeCreatedPayToPartyIdNotSet",locale));    }    Map<String,Object> paymentParams=new HashMap<String,Object>();    BigDecimal maxAmount=orderPaymentPreference.getBigDecimal("maxAmount");    paymentParams.put("paymentTypeId","CUSTOMER_PAYMENT");    paymentParams.put("paymentMethodTypeId",orderPaymentPreference.getString("paymentMethodTypeId"));    paymentParams.put("paymentPreferenceId",orderPaymentPreference.getString("orderPaymentPreferenceId"));    paymentParams.put("amount",maxAmount);    paymentParams.put("statusId","PMNT_RECEIVED");    paymentParams.put("effectiveDate",eventDate);    paymentParams.put("partyIdFrom",paymentFromId);    paymentParams.put("currencyUomId",productStore.getString("defaultCurrencyUomId"));    paymentParams.put("partyIdTo",payToPartyId);    if (paymentRefNum != null) {      paymentParams.put("paymentRefNum",paymentRefNum);    }    if (comments != null) {      paymentParams.put("comments",comments);    }    paymentParams.put("userLogin",userLogin);    return dispatcher.runSync("createPayment",paymentParams);  } catch (  GenericEntityException ex) {    Debug.logError(ex,"Unable to create payment using payment preference.",module);    return (ServiceUtil.returnError(ex.getMessage()));  }catch (  GenericServiceException ex) {    Debug.logError(ex,"Unable to create payment using payment preference.",module);    return (ServiceUtil.returnError(ex.getMessage()));  }}  }
class C{  public static boolean isAllowed(User user,Resource resource,Operation operation) throws IllegalStateException {  if (isAnonymousNotAllowed() && user.isAnonymous()) {    return false;  }  if (user.isSiteManager()) {    return true;  }  if (resource instanceof GlobalResource) {    return isGlobalResourceAllowed(user,(GlobalResource)resource,operation);  } else {    Project project=resource.getProject();    if (project == null) {      throw new IllegalStateException("A project resource lost its project");    }    return isProjectResourceAllowed(user,project,resource,operation);  }}  }
class C{  public IndexedDropController(IndexedPanel dropTarget){  super(dropTarget);  if (!(dropTarget instanceof HorizontalPanel) && !(dropTarget instanceof VerticalPanel)) {    throw new IllegalArgumentException(dropTarget.getClass().getName() + " is not currently supported by this controller");  }  this.dropTarget=dropTarget;}  }
class C{  protected void waitForMessagesToBeDelivered(){  long maxWaitTime=60000;  long waitTime=maxWaitTime;  long start=(maxWaitTime <= 0) ? 0 : System.currentTimeMillis();synchronized (lock) {    while (messages.size() < data.length && waitTime >= 0) {      try {        lock.wait(200);      } catch (      InterruptedException e) {        e.printStackTrace();      }      waitTime=maxWaitTime - (System.currentTimeMillis() - start);    }  }}  }
class C{  public Response createResponse(int statusCode,Request request,ContentTypeHeader contentType,Object content) throws ParseException {  if (request == null || content == null || contentType == null)   throw new NullPointerException("null parameters");  SIPRequest sipRequest=(SIPRequest)request;  SIPResponse sipResponse=sipRequest.createResponse(statusCode);  sipResponse.setContent(content,contentType);  if (server != null) {    sipResponse.setHeader(server);  }  return sipResponse;}  }
class C{  public boolean containsKey(String key){  manageReload();  return key != null && myMap.containsKey(key) && myMap.get(key).iterator().next() != null;}  }
class C{  public Searcher() throws IOException {  searcher=new IndexSearcher(DirectoryReader.open(FSDirectory.open(Paths.get(INDEX_DIR))));  parser=new QueryParser(CONTENT_FIELD,new StandardAnalyzer());}  }
class C{  @Override protected boolean removeEldestEntry(Entry<K,V> eldest){  return size() > MAXIMUM_SIZE;}  }
class C{  public CstEnumRef(CstNat nat){  super(new CstType(nat.getFieldType()),nat);  fieldRef=null;}  }
class C{  public void retainNode(String id){synchronized (retainedNodes) {    Node current=getCurrentNode();    if (current != null) {      retainedNodes.put(id,current);    }  }}  }
class C{  public RangeQueryBuilder lte(float to){  this.to=to;  this.includeUpper=true;  return this;}  }
class C{  private void onJoined(){  if (null != sRoomPreviewData) {    HashMap<String,Object> params=new HashMap<>();    params.put(VectorRoomActivity.EXTRA_MATRIX_ID,mSession.getMyUserId());    params.put(VectorRoomActivity.EXTRA_ROOM_ID,sRoomPreviewData.getRoomId());    if (null != sRoomPreviewData.getEventId()) {      params.put(VectorRoomActivity.EXTRA_EVENT_ID,sRoomPreviewData.getEventId());    }    Intent intent=new Intent(VectorRoomActivity.this,VectorHomeActivity.class);    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);    intent.putExtra(VectorHomeActivity.EXTRA_JUMP_TO_ROOM_PARAMS,params);    VectorRoomActivity.this.startActivity(intent);    sRoomPreviewData=null;  }}  }
class C{  private static void loadDirectionNumbers() throws IOException {  BufferedReader reader=null;  try {    reader=new BufferedReader(new InputStreamReader(Sobol.class.getResourceAsStream(DIRECTIONS_RESOURCE)));    List<int[]> directions=new ArrayList<int[]>();    String line=reader.readLine();    while ((line=reader.readLine()) != null) {      StringTokenizer tokenizer=new StringTokenizer(line);      tokenizer.nextToken();      int s=Integer.parseInt(tokenizer.nextToken());      int[] d=new int[s + 1];      d[0]=Integer.parseInt(tokenizer.nextToken());      for (int i=1; i <= s; i++) {        d[i]=Integer.parseInt(tokenizer.nextToken());      }      directions.add(d);    }    Sobol.DIRECTIONS=directions.toArray(new int[0][0]);  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  public KrbApRep(byte[] message,Credentials tgtCreds,KrbApReq outgoingReq) throws KrbException, IOException {  this(message,tgtCreds);  authenticate(outgoingReq);}  }
class C{  public static double deserializeDouble(byte[] buffer,MutableInt offset){  int offsetInt=offset.intValue();  long val=(((long)buffer[0 + offsetInt]) & 0xFFL) << 56 | ((((long)buffer[1 + offsetInt]) & 0xFFL) << 48) | ((((long)buffer[2 + offsetInt]) & 0xFFL) << 40) | ((((long)buffer[3 + offsetInt]) & 0xFFL) << 32) | ((((long)buffer[4 + offsetInt]) & 0xFFL) << 24) | ((((long)buffer[5 + offsetInt]) & 0xFFL) << 16) | ((((long)buffer[6 + offsetInt]) & 0xFFL) << 8) | (((long)buffer[7 + offsetInt]) & 0xFFL);  offset.add(Type.DOUBLE.getByteSize());  return Double.longBitsToDouble(val);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MPPOrderNode[");  sb.append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  public void add(IConditionChecker checker) throws CoreException {  Object old=fCheckers.put(checker.getClass(),checker);  if (old != null) {    fCheckers.put(checker.getClass(),old);    throw new CoreException(new Status(IStatus.ERROR,RefactoringCorePlugin.getPluginId(),IRefactoringCoreStatusCodes.CHECKER_ALREADY_EXISTS_IN_CONTEXT,Messages.format(RefactoringCoreMessages.CheckConditionContext_error_checker_exists,checker.getClass().toString()),null));  }}  }
class C{  @Override public void draw(Graphics2D g){  if (getEditor().getTool().supportsHandleInteraction()) {    drawDiamond(g,(Color)getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_FILL_COLOR),(Color)getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_STROKE_COLOR));  } else {    drawDiamond(g,(Color)getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_FILL_COLOR_DISABLED),(Color)getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_STROKE_COLOR_DISABLED));  }}  }
class C{  public String connect(String login,String password,String selectedHost,Prompter prompter){  checkNotConnected();  fileUtils.checkNotInFileExplorer();  String finalPassword=password;  if (password.isEmpty()) {    finalPassword=prompter.promptPassword("Enter password:");  }  Map<String,Object> loginInfo=new HashMap<>();  loginInfo.put("login",login);  loginInfo.put("password",finalPassword);  if (selectedHost.isEmpty()) {    finalHost=defaultHost;  } else {    finalHost=selectedHost;  }  log.log(Level.INFO,MessageFormat.format("Connecting to {0}...",finalHost));  try {    String urlToCall=finalHost + urlLoader.connect;    restUtils.connect(urlToCall,loginInfo).get("body");    applicationUtils.setCurrentApplication(null);    String response=null;    response=restUtils.sendGetCommand(finalHost + urlLoader.getCloudUnitInstance,null).get("body");    String cloudunitInstance=JsonConverter.getCloudUnitInstance(response);    currentInstanceName=cloudunitInstance != null ? cloudunitInstance : "";  } catch (  ManagerResponseException e) {    statusCommand.setExitStatut(1);    return ANSIConstants.ANSI_RED + e.getMessage() + ANSIConstants.ANSI_RESET;  }  map.put("login",login);  map.put("password",finalPassword);  statusCommand.setExitStatut(0);  return "Connection established";}  }
class C{  public IntrospectorTestCase(String name){  super(name);}  }
class C{  public void missingPCData(String systemID,int lineNr,String parentElementName) throws XMLValidationException {  XMLUtil.errorMissingPCData(systemID,lineNr,parentElementName);}  }
class C{  public boolean hasSteps(){  return hasRepeatingExtension(Step.class);}  }
class C{  public SourceMapper(IPath sourcePath,String rootPath,Map options,String encoding,JavaModelManager manager){  this.manager=manager;  this.areRootPathsComputed=false;  this.options=options;  this.encoding=encoding;  this.defaultEncoding="UTF-8";  if (rootPath != null) {    this.rootPaths=new ArrayList();    this.rootPaths.add(rootPath);  }  this.sourcePath=sourcePath;  this.sourceRanges=new HashMap();  this.parametersRanges=new HashMap();  this.parameterNames=new HashMap();  this.importsTable=new HashMap();  this.importsCounterTable=new HashMap();}  }
class C{  @SuppressWarnings("unchecked") private void checkJar(ModContainer mod){  Manifest manifest=null;  try {    manifest=new JarFile(mod.jar).getManifest();  } catch (  IOException e) {  }  if (manifest == null)   return;  Attributes attr=manifest.getMainAttributes();  if (attr == null)   return;  String tweakClassName=attr.getValue("TweakClass");  if (tweakClassName != null && tweakClassName.length() > 0 && !Meddle.blacklistedTweaks.contains(tweakClassName)) {    LOGGER.info("[Meddle] Found tweak class in " + mod.jar.getName() + " ("+ tweakClassName+ ")");    Class<? extends ITweaker> tweakClass=null;    try {      tweakClass=(Class<? extends ITweaker>)Class.forName(tweakClassName,false,Launch.classLoader);    } catch (    Exception e) {    }    if (tweakClass != null) {      mod.tweakClass=tweakClass;      mod.meta=tweakClass.getAnnotation(MeddleMod.class);      mod.id=mod.meta != null ? mod.meta.id() : mod.jar.getName();      loadedModsList.put(mod.id,mod);    } else     Meddle.LOGGER.error("[Meddle] Couldn't load tweak class " + tweakClassName);    return;  }  String transformerClassName=attr.getValue("TransformerClass");  if (transformerClassName != null && transformerClassName.length() > 0) {    LOGGER.info("[Meddle] Found transformer class in " + mod.jar.getName() + " ("+ transformerClassName+ ")");    Class<? extends IClassTransformer> transformerClass=null;    try {      transformerClass=(Class<? extends IClassTransformer>)Class.forName(transformerClassName,false,Launch.classLoader);    } catch (    Exception e) {    }    if (transformerClass != null) {      mod.transformerClass=transformerClassName;      mod.meta=transformerClass.getAnnotation(MeddleMod.class);      mod.id=mod.meta != null ? mod.meta.id() : mod.jar.getName();      loadedModsList.put(mod.id,mod);    } else     Meddle.LOGGER.error("[Meddle] Couldn't load transformer class " + tweakClassName);    return;  }}  }
class C{  @Override public void log(final int priority,final String tag,final String message){  final Marker marker=MarkerFactory.getMarker(tag);switch (priority) {case AxolotlLogger.VERBOSE:case AxolotlLogger.DEBUG:    LOGGER.debug(marker,message);  break;case AxolotlLogger.INFO:LOGGER.info(marker,message);break;case AxolotlLogger.WARN:LOGGER.warn(marker,message);break;case AxolotlLogger.ERROR:LOGGER.error(marker,message);break;case AxolotlLogger.ASSERT:LOGGER.trace(marker,message);break;default :LOGGER.error(marker,"## Unknown Loglevel Message: ##" + message);}}  }
class C{  @Override public void onUIRefreshPrepare(PtrFrameLayout frame){}  }
class C{  @Override public void process(K tuple){  out.emit(tuple);}  }
class C{  public static boolean isOssBuild(){  boolean isOssBuild=false;  String buildType=System.getProperty("buildType");  if (StringUtils.isNotBlank(buildType) && buildType.equalsIgnoreCase("oss")) {    isOssBuild=true;  }  return isOssBuild;}  }
class C{  public static String makeXmlSafe(String text){  if (StringUtil.isNullOrEmpty(text))   return "";  text=text.replace(ESC_AMPERSAND,"&");  text=text.replace("\"",ESC_QUOTE);  text=text.replace("&",ESC_AMPERSAND);  text=text.replace("'",ESC_APOSTROPHE);  text=text.replace("<",ESC_LESS_THAN);  text=text.replace(">",ESC_GREATER_THAN);  text=text.replace("\u0000"," ");  return text;}  }
class C{  protected void propertyChange(PropertyChangeEvent e){  String name=e.getPropertyName();  if (name.equals(RSyntaxTextArea.SYNTAX_SCHEME_PROPERTY)) {    modelChanged();  } else {    super.propertyChange(e);  }}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("CfgLdapConfig[");  buffer.append("m_engine = ").append(m_engine);  buffer.append(", m_server = ").append(m_server);  buffer.append(", m_port = ").append(m_port);  buffer.append(", m_user = ").append(m_user);  buffer.append(", m_pwd = ").append(m_pwd);  buffer.append(", m_root = ").append(m_root);  buffer.append(", m_useOSAuth = ").append(m_useOSAuth);  buffer.append("]");  return buffer.toString();}  }
class C{  public static BufferedImage toCompatibleImage(BufferedImage image){  if (image.getColorModel().equals(getGraphicsConfiguration().getColorModel())) {    return image;  }  BufferedImage compatibleImage=getGraphicsConfiguration().createCompatibleImage(image.getWidth(),image.getHeight(),image.getTransparency());  Graphics g=compatibleImage.getGraphics();  g.drawImage(image,0,0,null);  g.dispose();  return compatibleImage;}  }
class C{  public void addChildToEvent(final EventChild node){  assertCorrectThread();  if (!isCurrentEvent()) {    new IllegalStateException("Not in an event, but trying to add child:" + node + " current is:"+ m_current).printStackTrace(System.out);    startEvent("???");  }  addToCurrent(node);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void testCreate_3args_4(){  System.out.println("create ScenarioAuditCommand");  String scenarioName="";  String scenario="";  Set<Parameter> paramSet=null;  AuditCommand result=this.auditCommandFactory.create(scenarioName,scenario,paramSet);  assertTrue(result instanceof ScenarioAuditCommandImpl);  EasyMock.verify(mockAuditDataService);  EasyMock.verify(mockAudit);}  }
class C{  public int imageRowToMatrixRow(int imrow){  int r=(imrow - offset) / step;  return r < 0 ? 0 : (r < nlines ? r : nlines - 1);}  }
class C{  public DefaultRequest tcpConnectTime(Integer value){  setInteger(TCP_CONNECT_TIME,value);  return this;}  }
class C{  private static long lf_S(long x,int s){  return (x >>> s) | (x << (64 - s));}  }
class C{  public static Object parse(String value,Class<? extends Object> type){  if (canSelfConvert("parse",type)) {    return selfConvert("parse",value,type);  }  if (converterRegisteredFor(type)) {    return converterForType(type).parse(value,type);  }  if (canSelfConvert("valueOf",type)) {    return selfConvert("valueOf",value,type);  }  throw new UnsupportedOperationException("No converter registered for: " + type.getName());}  }
class C{  protected void deactivateWindow(ExecutionWindow window){  lock.lock();  try {    if (activeWindows.containsKey(window.getId())) {      LOG.info("Deactivate window: " + window.getLabel());      activeWindows.remove(window.getId());    }  }  finally {    lock.unlock();  }}  }
class C{  public static BaseBot login(String token){  BaseBot bot=null;  ClientBuilder builder=new ClientBuilder();  builder.withToken(token);  try {    IDiscordClient client=builder.login();    bot=new BaseBot(client);  } catch (  DiscordException e) {    System.err.println("Error occurred while logging in!");    e.printStackTrace();  }  return bot;}  }
class C{  @Deprecated public static void liftingFromBottom(View view,float baseRotation,float fromY,int duration,int startDelay){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,fromY);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).setStartDelay(startDelay).rotationX(0).translationY(0).start();}  }
class C{  @RequestMapping(value="/files",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @Transactional @JsonView(DataFile.Scalar.class) public ResponseEntity<DataFile> create(@RequestParam("file") MultipartFile file) throws URISyntaxException, IOException {  log.debug("REST request to create file");  if (file.isEmpty()) {    throw new RuntimeException("empty file");  }  DataFile dataFile=new DataFile();  dataFile.setPath(file.getOriginalFilename());  dataFile.setContentType(file.getContentType());  dataFile.setSize(file.getSize());  dataFile=dataFileRepository.save(dataFile);  DataFileBytes fileBytes=new DataFileBytes();  fileBytes.setDataFile(dataFile);  fileBytes.setContentType(file.getContentType());  fileBytes.setSize(file.getSize());  fileBytes.setOriginalFilename(file.getOriginalFilename());  fileBytes.setBytes(file.getBytes());  fileBytes=dataFileBytesRepository.save(fileBytes);  return new ResponseEntity<>(dataFile,HttpStatus.OK);}  }
class C{  public static IgfsLogger logger(String endpoint,String igfsName,String dir,int batchSize){  if (endpoint == null)   endpoint="";  logLock.readLock().lock();  try {    IgfsLogger log=loggers.get(endpoint);    if (log == null) {      log=new IgfsLogger(endpoint,igfsName,dir,batchSize);      IgfsLogger log0=loggers.putIfAbsent(endpoint,log);      if (log0 != null)       log=log0;    }    log.useCnt.incrementAndGet();    return log;  }  finally {    logLock.readLock().unlock();  }}  }
class C{  @Override public void onCreateTable(CreateTableEvent event) throws MetaException {  try {    Set<ReadEntity> readEntities=new HashSet<>();    Set<WriteEntity> writeEntities=new HashSet<>();    writeEntities.add(new WriteEntity(new Table(event.getTable()),WriteType.INSERT));    run(readEntities,writeEntities,HiveOperation.THRIFT_CREATE_TABLE);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  static void checkSignedShort(final int value,final String msg){  if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {    throw new IllegalArgumentException(msg + " (must be a signed short): " + value);  }}  }
class C{  @Override public void handleStart(Operation start){  ServiceUtils.logInfo(this,"Starting service %s",getSelfLink());  State startState=start.getBody(State.class);  InitializationUtils.initialize(startState);  validateState(startState);  if (TaskState.TaskStage.CREATED == startState.taskState.stage) {    startState.taskState.stage=TaskState.TaskStage.STARTED;  }  if (startState.documentExpirationTimeMicros <= 0) {    startState.documentExpirationTimeMicros=ServiceUtils.computeExpirationTime(ServiceUtils.DEFAULT_DOC_EXPIRATION_TIME_MICROS);  }  start.setBody(startState).complete();  try {    if (ControlFlags.isOperationProcessingDisabled(startState.controlFlags)) {      ServiceUtils.logInfo(this,"Skipping start operation processing (disabled)");    } else     if (TaskState.TaskStage.STARTED == startState.taskState.stage) {      TaskUtils.sendSelfPatch(this,buildPatch(startState.taskState.stage,null));    }  } catch (  Throwable t) {    failTask(t);  }}  }
class C{  public boolean isParityCorrect(byte[][] shards,int firstByte,int byteCount,byte[] tempBuffer){  checkBuffersAndSizes(shards,firstByte,byteCount);  if (tempBuffer.length < firstByte + byteCount) {    throw new IllegalArgumentException("tempBuffer is not big enough");  }  byte[][] toCheck=new byte[parityShardCount][];  System.arraycopy(shards,dataShardCount,toCheck,0,parityShardCount);  return codingLoop.checkSomeShards(parityRows,shards,dataShardCount,toCheck,parityShardCount,firstByte,byteCount,tempBuffer);}  }
class C{  public Map<String,String> executeQueryWithKeyValuPairs(QueryParameters qps,DBConnectionWrapper conn,String keyColumn,String valueColumn,boolean normalizeKey) throws SQLException {  PreparedStatement pstmt=null;  Statement stmt=null;  ResultSet rs=null;  String actualSql=null;  try {    if (sqlManager == null)     logger.severe("No sqlManager specified");    if (qps == null)     logger.severe("No QPS specified");    String sqlText=qps.getSqlText();    Sql sql=null;    if (sqlText == null || sqlText.isEmpty())     sql=sqlManager.getSql(qps.getSql());    if (sql != null && sql.getQueryClass() != null)     sqlText=DynamicQueryFactory.getQuery(sql.getQueryClass(),conn,false);    if (sqlText == null && sql != null)     sqlText=sql.getSqlText(conn.getVersion());    if (sql != null && sql.getParamCount() > 0) {      if (!sql.isReplace()) {        actualSql=sqlText;        for (int i=1; i <= sql.getParamCount(); i++) {          actualSql=actualSql.replace("&p_" + i,"?");        }        pstmt=conn.getConnection().prepareStatement(actualSql);        pstmt.setQueryTimeout(this.frameworkContext.getQueryTimeout());        conn.setCurrentStatement(pstmt);        for (int i=1; i <= sql.getParamCount(); i++) {          pstmt.setString(i,qps.getSqlParams().get("p_" + i));        }        rs=pstmt.executeQuery();      } else {        actualSql=sqlText;        for (int i=1; i <= sql.getParamCount(); i++) {          actualSql=actualSql.replace("&p_" + i,escapeSingleQuote(sql.getSqlParameter(i - 1),qps.getSqlParams().get("p_" + i)));        }        stmt=conn.getConnection().createStatement();        stmt.setQueryTimeout(this.frameworkContext.getQueryTimeout());        conn.setCurrentStatement(stmt);        rs=stmt.executeQuery(actualSql);      }    } else {      actualSql=sqlText;      stmt=conn.getConnection().createStatement();      stmt.setQueryTimeout(this.frameworkContext.getQueryTimeout());      conn.setCurrentStatement(stmt);      rs=stmt.executeQuery(actualSql);    }    Map<String,String> metrics=new HashMap<String,String>();    if (keyColumn != null && !keyColumn.isEmpty() && valueColumn != null && !valueColumn.isEmpty()) {      while (rs != null && rs.next()) {        String key=rs.getString(keyColumn.toLowerCase());        if (normalizeKey)         key=key.toUpperCase();        metrics.put(key,rs.getString(valueColumn.toLowerCase()));      }    } else {      if (rs != null) {        java.sql.ResultSetMetaData meta=rs.getMetaData();        int cnt=meta.getColumnCount();        if (rs.next()) {          for (int i=1; i <= cnt; i++)           metrics.put(meta.getColumnLabel(i).toLowerCase(),rs.getString(i));        }      }    }    return metrics;  } catch (  SQLException sqlEx) {    logger.info("Failed to execute " + actualSql);    throw sqlEx;  } finally {    DBUtils.close(rs);    DBUtils.close(stmt);    DBUtils.close(pstmt);    conn.setCurrentStatement(null);  }}  }
class C{  private DiscoveryInformation verifyDiscovered1(AuthSuccess authResp,DiscoveryInformation discovered) throws DiscoveryException {  if (authResp == null || authResp.isVersion2() || authResp.getIdentity() == null) {    if (DEBUG)     _log.error("Invalid authentication response: " + "cannot verify v1 discovered information");    return null;  }  String assertId=authResp.getIdentity();  if (discovered != null && !discovered.isVersion2() && discovered.getClaimedIdentifier() != null) {    if (DEBUG)     _log.debug("Verifying discovered information " + "for OpenID1 assertion about ClaimedID: " + discovered.getClaimedIdentifier().getIdentifier());    String discoveredId=discovered.hasDelegateIdentifier() ? discovered.getDelegateIdentifier() : discovered.getClaimedIdentifier().getIdentifier();    if (assertId.equals(discoveredId))     return discovered;  }  _log.info("Proceeding with stateless mode / bare response verification...");  DiscoveryInformation firstServiceMatch=null;  if (DEBUG)   _log.debug("Performing discovery on the ClaimedID in the assertion: " + assertId);  List discoveries=_discovery.discover(assertId);  Iterator iter=discoveries.iterator();  while (iter.hasNext()) {    DiscoveryInformation service=(DiscoveryInformation)iter.next();    if (service.isVersion2() || !service.hasClaimedIdentifier() || service.hasDelegateIdentifier()|| !assertId.equals(service.getClaimedIdentifier().getIdentifier()))     continue;    if (DEBUG)     _log.debug("Found matching service: " + service);    if (firstServiceMatch == null)     firstServiceMatch=service;    Association assoc=_associations.load(service.getOPEndpoint().toString(),authResp.getHandle());    if (assoc != null) {      if (DEBUG)       _log.debug("Found existing association for  " + service + " Not looking for another service endpoint.");      return service;    }  }  if (firstServiceMatch == null)   _log.error("No service element found to match " + "the identifier in the assertion.");  return firstServiceMatch;}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  @Override public List<String> alarmTriggers(){  return TRIGGER_LIST;}  }
class C{  public static List<SearchResult> search(final NaviNode node,final String searchString,final boolean regEx,final boolean caseSensitive){  return CElementSearcher.search(node,node.getRealizer().getNodeContent(),searchString,regEx,caseSensitive);}  }
class C{  private List<URI> prepareRecommendedVolumes(final String task,final TaskList taskList,final Project project,final VirtualArray varray,final VirtualPool vpool,final Integer volumeCount,final List<Recommendation> recommendations,final BlockConsistencyGroup consistencyGroup,final String volumeLabel,final String size){  List<URI> volumeURIs=new ArrayList<URI>();  try {    Iterator<Recommendation> recommendationsIter=recommendations.iterator();    while (recommendationsIter.hasNext()) {      SRDFRecommendation recommendation=(SRDFRecommendation)recommendationsIter.next();      for (      SRDFRecommendation.Target target : recommendation.getVirtualArrayTargetMap().values()) {        if (target != null && SRDFScheduler.rdfGroupHasSwappedVolumes(_dbClient,project.getId(),target.getSourceRAGroup())) {          RemoteDirectorGroup rdg=_dbClient.queryObject(RemoteDirectorGroup.class,target.getSourceRAGroup());          throw BadRequestException.badRequests.cannotAddVolumesToSwappedReplicationGroup(rdg.getLabel());        }      }      StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,recommendation.getSourceStorageSystem());      for (int i=0; i < volumeCount; i++) {        String newVolumeLabel=generateDefaultVolumeLabel(volumeLabel,i,volumeCount);        Volume srcVolume=StorageScheduler.getPrecreatedVolume(_dbClient,taskList,newVolumeLabel);        boolean volumePrecreated=false;        if (srcVolume != null) {          volumePrecreated=true;        }        if (recommendation.getVpoolChangeVolume() == null) {          srcVolume=prepareVolume(srcVolume,project,varray,vpool,size,recommendation,newVolumeLabel,consistencyGroup,task,false,Volume.PersonalityTypes.SOURCE,null,null,null);          volumeURIs.add(srcVolume.getId());          if (!volumePrecreated) {            taskList.getTaskList().add(toTask(srcVolume,task));          }        } else {          srcVolume=_dbClient.queryObject(Volume.class,recommendation.getVpoolChangeVolume());          Operation op=_dbClient.createTaskOpStatus(Volume.class,srcVolume.getId(),task,ResourceOperationTypeEnum.CREATE_BLOCK_VOLUME);          volumeURIs.add(srcVolume.getId());          taskList.getTaskList().add(toTask(srcVolume,task,op));        }        if (newVolumeLabel.contains("-source")) {          newVolumeLabel=newVolumeLabel.replaceAll("-source","");        }        Map<URI,VpoolRemoteCopyProtectionSettings> settingMap=VirtualPool.getRemoteProtectionSettings(vpool,_dbClient);        for (        VirtualArray protectionVirtualArray : SRDFScheduler.getTargetVirtualArraysForVirtualPool(project,vpool,_dbClient,_permissionsHelper)) {          VpoolRemoteCopyProtectionSettings settings=settingMap.get(protectionVirtualArray.getId());          volumeURIs.addAll(prepareTargetVolumes(project,vpool,recommendation,new StringBuilder(newVolumeLabel),protectionVirtualArray,settings,srcVolume,task,taskList,size));        }      }    }  } catch (  InternalException e) {    _log.error("Rolling back the created CGs if any.");    throw e;  }catch (  BadRequestException e) {    _log.info("Bad request exception: " + e.getMessage());    throw e;  }catch (  Exception e) {    _log.error("Rolling back the created CGs if any.");    throw APIException.badRequests.srdfInternalError(e);  }  return volumeURIs;}  }
class C{  public boolean writePersistentBytes(String key,byte[] value){  try {    if (checkService()) {      return sService.writePersistentBytes(key,value);    }  } catch (  RemoteException e) {  }  return false;}  }
class C{  public boolean unlinkEntry(User user,Entry entry,boolean isAdmin,Errors errors){  if (entry == null) {    Errors.add(errors,errorMessages.errorEntryIsNull());    return false;  }  if (user == null) {    Errors.add(errors,errorMessages.errorUserIsNull());    return false;  }  if (!canUserModifyEntry(user,entry,isAdmin)) {    Errors.add(errors,errorMessages.errorUserIsNotEntitledToModifyThisEntry());    return false;  }  if (!entry.isQuotation() && !entry.isSource()) {    Errors.add(errors,errorMessages.errorUserOnlyQuotationsAndSourcesMayBeUnlinked());    return false;  }  final Entry parent=getEntryById(entry.getParentId());  if (parent == null) {    return true;  }  reparentChildren(entry,parent);  removeEntryFromParent(entry,parent,true);  entry.setFirstChildId(null);  entry.setLastChildId(null);  for (  Object objectChild : getEntriesByParentId(entry.getId())) {    Entry child=(Entry)objectChild;    child.setParentId(parent.getId());  }  return true;}  }
class C{  public void resize(int maxSize){  if (maxSize <= 0) {    throw new IllegalArgumentException("maxSize <= 0");  }synchronized (this) {    this.maxSize=maxSize;  }  trimToSize(maxSize);}  }
class C{  public static String[] stripAll(String[] strs,String delimiter){  if ((strs == null) || (strs.length == 0)) {    return strs;  }  int sz=strs.length;  String[] newArr=new String[sz];  for (int i=0; i < sz; i++) {    newArr[i]=strip(strs[i],delimiter);  }  return newArr;}  }
class C{  public void clearHasBeenWritten(int cv){  mValues.remove(cv);}  }
class C{  public void initInternalFields(){  Instances inst=m_data;  m_classIndex=m_classAttrib.getSelectedIndex();  m_selectedAttribs=m_attribList.getSelectedIndices();  double minC=0, maxC=0;  double currentPercent=Double.parseDouble(m_resamplePercent.getText());  if (currentPercent <= 100) {    if (currentPercent != m_previousPercent) {      m_clearOSIPlottedCells=true;    }    inst=new Instances(m_data,0,m_data.numInstances());    inst.randomize(new Random(Integer.parseInt(m_rseed.getText())));    inst=new Instances(inst,0,(int)Math.round(currentPercent / 100D * inst.numInstances()));    m_previousPercent=currentPercent;  }  m_points=new int[inst.numInstances()][m_selectedAttribs.length];  m_pointColors=new int[inst.numInstances()];  m_missing=new boolean[inst.numInstances()][m_selectedAttribs.length + 1];  m_type=new int[2];  jitterVals=new int[inst.numInstances()][2];  if (!(inst.attribute(m_classIndex).isNumeric())) {    for (int i=m_colorList.size(); i < inst.attribute(m_classIndex).numValues() + 1; i++) {      Color pc=m_defaultColors[i % 10];      int ija=i / 10;      ija*=2;      for (int j=0; j < ija; j++) {        pc=pc.darker();      }      m_colorList.add(pc);    }    for (int i=0; i < inst.numInstances(); i++) {      if (inst.instance(i).isMissing(m_classIndex)) {        m_pointColors[i]=m_defaultColors.length - 1;      } else {        m_pointColors[i]=(int)inst.instance(i).value(m_classIndex);      }      jitterVals[i][0]=rnd.nextInt(m_jitter.getValue() + 1) - m_jitter.getValue() / 2;      jitterVals[i][1]=rnd.nextInt(m_jitter.getValue() + 1) - m_jitter.getValue() / 2;    }  } else {    for (int i=0; i < inst.numInstances(); i++) {      if (!(inst.instance(i).isMissing(m_classIndex))) {        minC=maxC=inst.instance(i).value(m_classIndex);        break;      }    }    for (int i=1; i < inst.numInstances(); i++) {      if (!(inst.instance(i).isMissing(m_classIndex))) {        if (minC > inst.instance(i).value(m_classIndex)) {          minC=inst.instance(i).value(m_classIndex);        }        if (maxC < inst.instance(i).value(m_classIndex)) {          maxC=inst.instance(i).value(m_classIndex);        }      }    }    for (int i=0; i < inst.numInstances(); i++) {      double r=(inst.instance(i).value(m_classIndex) - minC) / (maxC - minC);      r=(r * 240) + 15;      m_pointColors[i]=(int)r;      jitterVals[i][0]=rnd.nextInt(m_jitter.getValue() + 1) - m_jitter.getValue() / 2;      jitterVals[i][1]=rnd.nextInt(m_jitter.getValue() + 1) - m_jitter.getValue() / 2;    }  }  double min[]=new double[m_selectedAttribs.length], max=0;  double ratio[]=new double[m_selectedAttribs.length];  double cellSize=m_plotSize.getValue(), temp1=0, temp2=0;  for (int j=0; j < m_selectedAttribs.length; j++) {    int i;    for (i=0; i < inst.numInstances(); i++) {      min[j]=max=0;      if (!(inst.instance(i).isMissing(m_selectedAttribs[j]))) {        min[j]=max=inst.instance(i).value(m_selectedAttribs[j]);        break;      }    }    for (; i < inst.numInstances(); i++) {      if (!(inst.instance(i).isMissing(m_selectedAttribs[j]))) {        if (inst.instance(i).value(m_selectedAttribs[j]) < min[j]) {          min[j]=inst.instance(i).value(m_selectedAttribs[j]);        }        if (inst.instance(i).value(m_selectedAttribs[j]) > max) {          max=inst.instance(i).value(m_selectedAttribs[j]);        }      }    }    ratio[j]=cellSize / (max - min[j]);  }  boolean classIndexProcessed=false;  for (int j=0; j < m_selectedAttribs.length; j++) {    if (inst.attribute(m_selectedAttribs[j]).isNominal() || inst.attribute(m_selectedAttribs[j]).isString()) {      temp1=cellSize / inst.attribute(m_selectedAttribs[j]).numValues();      temp2=temp1 / 2;      for (int i=0; i < inst.numInstances(); i++) {        m_points[i][j]=(int)Math.round(temp2 + temp1 * inst.instance(i).value(m_selectedAttribs[j]));        if (inst.instance(i).isMissing(m_selectedAttribs[j])) {          m_missing[i][j]=true;          if (m_selectedAttribs[j] == m_classIndex) {            m_missing[i][m_missing[0].length - 1]=true;            classIndexProcessed=true;          }        }      }    } else {      for (int i=0; i < inst.numInstances(); i++) {        m_points[i][j]=(int)Math.round((inst.instance(i).value(m_selectedAttribs[j]) - min[j]) * ratio[j]);        if (inst.instance(i).isMissing(m_selectedAttribs[j])) {          m_missing[i][j]=true;          if (m_selectedAttribs[j] == m_classIndex) {            m_missing[i][m_missing[0].length - 1]=true;            classIndexProcessed=true;          }        }      }    }  }  if (inst.attribute(m_classIndex).isNominal() || inst.attribute(m_classIndex).isString()) {    m_type[0]=1;    m_type[1]=inst.attribute(m_classIndex).numValues();  } else {    m_type[0]=m_type[1]=0;  }  if (classIndexProcessed == false) {    for (int i=0; i < inst.numInstances(); i++) {      if (inst.instance(i).isMissing(m_classIndex)) {        m_missing[i][m_missing[0].length - 1]=true;      }    }  }  m_cp.setColours(m_colorList);}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("ClassLoaderClassesTarg");  targetClass=bpe.location().declaringType();  if (findClass("int[]")) {    println("int[] found");  } else {    failure("failed - int[] not found");  }  Field arrayField=targetClass.fieldByName("intArray");  ArrayType arrayType=(ArrayType)arrayField.type();  println("Type for intArray is " + arrayType);  listenUntilVMDisconnect();  if (!testFailed) {    println("ClassLoaderClassesTest: passed");  } else {    throw new Exception("ClassLoaderClassesTest: failed");  }}  }
class C{  public static String readFromFile(String filePath) throws IOException {  return readFromFile(new File(filePath));}  }
class C{  private void doServiceCallWithConstant() throws Exception {  final BigdataURI serviceURI=ServiceCallUtility.getConstantServiceURI(serviceRef);  if (serviceURI == null)   throw new AssertionError();  final ServiceCall<? extends Object> serviceCall=resolveService(serviceURI);  try {    final ICloseableIterator<IBindingSet[]> sitr=context.getSource();    while (sitr.hasNext()) {      final IBindingSet[] chunk=sitr.next();      final ServiceCallChunk serviceCallChunk=new ServiceCallChunk(serviceURI,serviceCall,chunk);      final FutureTask<Void> ft=new FutureTask<Void>(new ServiceCallTask(serviceCallChunk));      context.getExecutorService().execute(ft);      try {        ft.get(timeout,TimeUnit.MILLISECONDS);      } catch (      TimeoutException ex) {        if (!silent)         throw ex;      } finally {        ft.cancel(true);      }    }    context.getSink().flush();    return;  }  finally {    context.getSource().close();    context.getSink().close();  }}  }
class C{  public final int max(){  int max=Integer.MIN_VALUE;  int[][] fieldx=null;  int[] fieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++)       if (max < fieldxy[z])       max=fieldxy[z];    }  }  return max;}  }
class C{  public void connect(boolean cleanSession1) throws Exception {  logToFile("connect [cleanSession:" + cleanSession1 + "]");  if (cleanSession1) {    subscribedTopics.clear();  }  MqttConnectOptions opts=new MqttConnectOptions();  opts.setCleanSession(cleanSession1);  client.connect(opts);}  }
class C{  @Override public void clear(){  this._map.clear();}  }
class C{  private boolean isQueryRoot(AST ast){  return ast != null && HqlParser.QUERY == ast.getType();}  }
class C{  public final void transpose(){  double temp;  temp=this.m10;  this.m10=this.m01;  this.m01=temp;  temp=this.m20;  this.m20=this.m02;  this.m02=temp;  temp=this.m21;  this.m21=this.m12;  this.m12=temp;}  }
class C{  public CropImage(Context context,CropImageView imageView,Handler handler){  mContext=context;  mImageView=imageView;  mImageView.setCropImage(this);  mHandler=handler;  FILE_LOCAL=new File(AbFileUtil.getImageDownloadDir(context));  if (!FILE_LOCAL.exists()) {    FILE_LOCAL.mkdirs();  }}  }
class C{  private void release(WNode h){  if (h != null) {    WNode q;    Thread w;    U.compareAndSwapInt(h,WSTATUS,WAITING,0);    if ((q=h.next) == null || q.status == CANCELLED) {      for (WNode t=wtail; t != null && t != h; t=t.prev)       if (t.status <= 0)       q=t;    }    if (q != null && (w=q.thread) != null)     U.unpark(w);  }}  }
class C{  private static int determineConsecutiveBinaryCount(CharSequence msg,byte[] bytes,int startpos) throws WriterException {  int len=msg.length();  int idx=startpos;  while (idx < len) {    char ch=msg.charAt(idx);    int numericCount=0;    while (numericCount < 13 && isDigit(ch)) {      numericCount++;      int i=idx + numericCount;      if (i >= len) {        break;      }      ch=msg.charAt(i);    }    if (numericCount >= 13) {      return idx - startpos;    }    int textCount=0;    while (textCount < 5 && isText(ch)) {      textCount++;      int i=idx + textCount;      if (i >= len) {        break;      }      ch=msg.charAt(i);    }    if (textCount >= 5) {      return idx - startpos;    }    ch=msg.charAt(idx);    if (bytes[idx] == 63 && ch != '?') {      throw new WriterException("Non-encodable character detected: " + ch + " (Unicode: "+ (int)ch+ ')');    }    idx++;  }  return idx - startpos;}  }
class C{  public LevensteinDistance(){}  }
class C{  public void hide(){  getViewSite().getPage().hideView(TLCErrorView.this);}  }
class C{  public boolean remove(INode n){  for (int i=0; i < stack.size(); i++) {    if (stack.elementAt(i).equals(n)) {      stack.remove(i);      return true;    }  }  return false;}  }
class C{  private void initializePermutations(){  permutationCache=new int[2 * flagConfig.windowradius() + 1][PermutationUtils.getPermutationLength(flagConfig.vectortype(),flagConfig.dimension())];  for (int i=0; i < 2 * flagConfig.windowradius() + 1; ++i) {    permutationCache[i]=PermutationUtils.getShiftPermutation(flagConfig.vectortype(),flagConfig.dimension(),i - flagConfig.windowradius());  }}  }
class C{  public void appendToDoc(String text,Font f,Color fg,Color bg){  appendToDoc(text,f,fg,bg,false);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public String asString(){  final StringBuffer buffer=new StringBuffer(256);  buffer.append(fHeader);  if (fProject != null && !"".equals(fProject)) {    buffer.append(LINE_DELIMITER);    buffer.append(Messages.format(RefactoringCoreMessages.JavaRefactoringDescriptorComment_original_project,BasicElementLabels.getResourceName(fProject)));  }  for (final Iterator<String> iterator=fSettings.iterator(); iterator.hasNext(); ) {    final String setting=iterator.next();    buffer.append(LINE_DELIMITER);    buffer.append(Messages.format(RefactoringCoreMessages.JavaRefactoringDescriptor_inferred_setting_pattern,setting));  }  return buffer.toString();}  }
class C{  protected boolean isValidFragment(final String fragmentName){  return PreferenceFragment.class.getName().equals(fragmentName) || GAPreferenceFragment.class.getName().equals(fragmentName) || GeneralPreferenceFragment.class.getName().equals(fragmentName)|| SPVPreferenceFragment.class.getName().equals(fragmentName)|| NetworkPreferenceFragment.class.getName().equals(fragmentName)|| TwoFactorPreferenceFragment.class.getName().equals(fragmentName);}  }
class C{  public void removeAtCommit(Value v){  if (SysProperties.CHECK && !v.isLinkedToTable()) {    DbException.throwInternalError();  }  if (removeLobMap == null) {    removeLobMap=New.hashMap();    removeLobMap.put(v.toString(),v);  }}  }
class C{  public Textifier visitTypeAnnotation(final int typeRef,final TypePath typePath,final String desc,final boolean visible){  buf.setLength(0);  buf.append(tab).append('@');  appendDescriptor(FIELD_DESCRIPTOR,desc);  buf.append('(');  text.add(buf.toString());  Textifier t=createTextifier();  text.add(t.getText());  buf.setLength(0);  buf.append(") : ");  appendTypeReference(typeRef);  buf.append(", ").append(typePath);  buf.append(visible ? "\n" : " // invisible\n");  text.add(buf.toString());  return t;}  }
class C{  void spill(SpillLocationManager spillManager,RegisterAllocatorState regAllocState){  spillInterval=spillManager.findOrCreateSpillLocation(this);  regAllocState.setSpill(reg,spillInterval.getOffset());  regAllocState.clearOneToOne(reg);  if (LinearScan.VERBOSE_DEBUG) {    System.out.println("Assigned " + reg + " to location "+ spillInterval.getOffset());  }}  }
class C{  void check(KerberosTime packetTimestamp,Integer packetUsec,Integer packetSeqNumber,HostAddress packetSAddress,HostAddress packetRAddress,SeqNumber seqNumber,HostAddress sAddress,HostAddress rAddress,boolean timestampRequired,boolean seqNumberRequired,PrincipalName packetPrincipal) throws KrbApErrException {  if (!Krb5.AP_EMPTY_ADDRESSES_ALLOWED || sAddress != null) {    if (packetSAddress == null || sAddress == null || !packetSAddress.equals(sAddress)) {      if (DEBUG && packetSAddress == null) {        System.out.println("packetSAddress is null");      }      if (DEBUG && sAddress == null) {        System.out.println("sAddress is null");      }      throw new KrbApErrException(Krb5.KRB_AP_ERR_BADADDR);    }  }  if (!Krb5.AP_EMPTY_ADDRESSES_ALLOWED || rAddress != null) {    if (packetRAddress == null || rAddress == null || !packetRAddress.equals(rAddress))     throw new KrbApErrException(Krb5.KRB_AP_ERR_BADADDR);  }  if (packetTimestamp != null) {    if (packetUsec != null) {      packetTimestamp=packetTimestamp.withMicroSeconds(packetUsec.intValue());    }    if (!packetTimestamp.inClockSkew()) {      throw new KrbApErrException(Krb5.KRB_AP_ERR_SKEW);    }  } else {    if (timestampRequired) {      throw new KrbApErrException(Krb5.KRB_AP_ERR_SKEW);    }  }  if (seqNumber == null && seqNumberRequired == true)   throw new KrbApErrException(Krb5.API_INVALID_ARG);  if (packetSeqNumber != null && seqNumber != null) {    if (packetSeqNumber.intValue() != seqNumber.current())     throw new KrbApErrException(Krb5.KRB_AP_ERR_BADORDER);    seqNumber.step();  } else {    if (seqNumberRequired) {      throw new KrbApErrException(Krb5.KRB_AP_ERR_BADORDER);    }  }  if (packetTimestamp == null && packetSeqNumber == null)   throw new KrbApErrException(Krb5.KRB_AP_ERR_MODIFIED);}  }
class C{  public static void zeroShift(double[] y,int shift){  if (Math.abs(shift) >= y.length)   Arrays.fill(y,0.0f); else   if (shift > 0) {    for (int i=y.length - 1; i >= shift; i--)     y[i]=y[i - shift];    for (int i=0; i < shift; i++)     y[i]=0.0f;  } else   if (shift < 0) {    for (int i=0; i < y.length + shift; i++)     y[i]=y[i - shift];    for (int i=y.length + shift; i < y.length; i++)     y[i]=0.0f;  }}  }
class C{  public BalancedTree(Comparator<? super K> c){  this.comparator=c;}  }
class C{  @Override public void markEndOfStream() throws IOException {  FutureUtils.result(getLedgerWriter(DistributedLogConstants.MAX_TXID,true).markEndOfStream());  closeAndComplete();}  }
class C{  public static Optional<Boolean> checksumsMatch(Configuration conf,Path srcFile,Path destFile) throws IOException {  FileSystem srcFs=srcFile.getFileSystem(conf);  FileChecksum srcChecksum=srcFs.getFileChecksum(srcFile);  FileSystem destFs=destFile.getFileSystem(conf);  FileChecksum destChecksum=destFs.getFileChecksum(destFile);  if (srcChecksum == null || destChecksum == null) {    return Optional.empty();  } else {    return Optional.of(Boolean.valueOf(srcChecksum.equals(destChecksum)));  }}  }
class C{  public void loadUtilities(){  FMLCommonHandler.instance().bus().register(Mekanism.worldTickHandler);}  }
class C{  public Builder(){  localeBuilder=new InternalLocaleBuilder();}  }
class C{  protected BigdataStatement roundTrip(Object s,Object p,Object o){  return roundTrip((Resource)convert(s),(URI)convert(p),convert(o));}  }
class C{  public static BoxDataSet serializableInstance(){  return new BoxDataSet(new ShortDataBox(4,4),null);}  }
class C{  protected SVGOMAltGlyphElement(){}  }
class C{  public static Text createText(Composite parent,int style,int hspan){  Text t=new Text(parent,style);  t.setFont(parent.getFont());  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=hspan;  t.setLayoutData(gd);  return t;}  }
class C{  @Interruptible public static void initForBootImageWriter(String classPath,String[] bootCompilerArgs){  if (VM.VerifyAssertions)   VM._assert(!VM.runningVM);  if (VM.VerifyAssertions)   VM._assert(!VM.runningTool);  writingBootImage=true;  init(classPath,bootCompilerArgs);}  }
class C{  @Override @ResponseBody public ResponseEntity<Void> downloadArtifactByDownloadId(@PathVariable("downloadId") final String downloadId){  try {    final ValueWrapper cacheWrapper=cache.get(downloadId);    if (cacheWrapper == null) {      LOGGER.warn("Download Id {} could not be found",downloadId);      return new ResponseEntity<>(HttpStatus.NOT_FOUND);    }    final DownloadArtifactCache artifactCache=(DownloadArtifactCache)cacheWrapper.get();    DbArtifact artifact=null;    if (DownloadType.BY_SHA1.equals(artifactCache.getDownloadType())) {      artifact=artifactRepository.getArtifactBySha1(artifactCache.getId());    } else {      LOGGER.warn("Download Type {} not supported",artifactCache.getDownloadType());    }    if (artifact == null) {      LOGGER.warn("Artifact with cached id {} and download type {} could not be found.",artifactCache.getId(),artifactCache.getDownloadType());      return new ResponseEntity<>(HttpStatus.NOT_FOUND);    }    try {      IOUtils.copy(artifact.getFileInputStream(),requestResponseContextHolder.getHttpServletResponse().getOutputStream());    } catch (    final IOException e) {      LOGGER.error("Cannot copy streams",e);      return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();    }  }  finally {    cache.evict(downloadId);  }  return ResponseEntity.ok().build();}  }
class C{  public void drawPalette(int[] colors,int selectedColor,String[] colorContentDescriptions){  if (colors == null) {    return;  }  this.removeAllViews();  int tableElements=0;  int rowElements=0;  int rowNumber=0;  TableRow row=createTableRow();  for (  int color : colors) {    View colorSwatch=createColorSwatch(color,selectedColor);    setSwatchDescription(rowNumber,tableElements,rowElements,color == selectedColor,colorSwatch,colorContentDescriptions);    addSwatchToRow(row,colorSwatch,rowNumber);    tableElements++;    rowElements++;    if (rowElements == mNumColumns) {      addView(row);      row=createTableRow();      rowElements=0;      rowNumber++;    }  }  if (rowElements > 0) {    while (rowElements != mNumColumns) {      addSwatchToRow(row,createBlankSpace(),rowNumber);      rowElements++;    }    addView(row);  }}  }
class C{  public Collection<T2<String,Long>> evts(){  return evts;}  }
class C{  public static void registerNewColumnWidth(Class<?> controllerClass,String columnName,int width){  if (width > 0) {    int hash=getColumnHash(controllerClass,columnName);    columnSizeCache.put(hash,width);  }}  }
class C{  public static void main(String[] args){  doMain(args);}  }
class C{  public static long reverseBytes(long v){  v=((v >>> 8) & 0x00FF00FF00FF00FFL) | ((v & 0x00FF00FF00FF00FFL) << 8);  v=((v >>> 16) & 0x0000FFFF0000FFFFL) | ((v & 0x0000FFFF0000FFFFL) << 16);  return ((v >>> 32)) | ((v) << 32);}  }
class C{  protected void processCDATA() throws Exception {  if (!XMLUtil.checkLiteral(this.reader,"CDATA[")) {    XMLUtil.errorExpectedInput(reader.getSystemID(),reader.getLineNr(),"<![[CDATA[");  }  this.validator.PCDataAdded(this.reader.getSystemID(),this.reader.getLineNr());  Reader reader=new CDATAReader(this.reader);  this.builder.addPCData(reader,this.reader.getSystemID(),this.reader.getLineNr());  reader.close();}  }
class C{  private void createBillingResultAndSubscription(Organization cust,String periodStartTime,String periodEndTime,String resultXML,Organization sup,Marketplace mp,Product p) throws Exception {  Subscription sub=Subscriptions.createSubscription(dm,cust.getOrganizationId(),p);  sub.setMarketplace(mp);  dm.flush();  BillingResult billingResult=new BillingResult();  billingResult.setCreationTime(1282816800000L);  billingResult.setOrganizationTKey(cust.getKey());  billingResult.setPeriodStartTime(createTimestamp(periodStartTime));  billingResult.setPeriodEndTime(createTimestamp(periodEndTime));  billingResult.setResultXML(resultXML);  billingResult.setNetAmount(BigDecimal.ZERO);  billingResult.setGrossAmount(BigDecimal.ZERO);  billingResult.setCurrency(SupportedCurrencies.findOrCreate(dm,"EUR"));  billingResult.setChargingOrgKey(sup.getKey());  billingResult.setSubscriptionKey(Long.valueOf(sub.getKey()));  dm.persist(billingResult);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == CharacterClassElement.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == CharacterClassAtom.class) {switch (baseFeatureID) {case RegularExpressionPackage.CHARACTER_CLASS_ATOM__CHARACTER:    return RegularExpressionPackage.CONTROL_LETTER_ESCAPE_SEQUENCE__CHARACTER;default :  return -1;}}if (baseClass == EscapedCharacterClassAtom.class) {switch (baseFeatureID) {default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public void connectPort(MrcPortController p){  istream=p.getInputStream();  ostream=p.getOutputStream();  if (controller != null) {    log.warn("connectPort: connect called while connected");  }  controller=p;}  }
class C{  private static float distance(float eventX,float startX,float eventY,float startY){  float dx=eventX - startX;  float dy=eventY - startY;  return (float)Math.sqrt(dx * dx + dy * dy);}  }
class C{  public boolean onTouchEvent(MotionEvent event){  if (mCancelable && mShowing && mWindow.shouldCloseOnTouch(mContext,event)) {    cancel();    return true;  }  return false;}  }
class C{  public static <T extends Throwable>T readStackTrace(T throwable,StreamInput in) throws IOException {  final int stackTraceElements=in.readVInt();  StackTraceElement[] stackTrace=new StackTraceElement[stackTraceElements];  for (int i=0; i < stackTraceElements; i++) {    final String declaringClasss=in.readString();    final String fileName=in.readOptionalString();    final String methodName=in.readString();    final int lineNumber=in.readVInt();    stackTrace[i]=new StackTraceElement(declaringClasss,methodName,fileName,lineNumber);  }  throwable.setStackTrace(stackTrace);  int numSuppressed=in.readVInt();  for (int i=0; i < numSuppressed; i++) {    throwable.addSuppressed(in.readThrowable());  }  return throwable;}  }
class C{  public String replace(String input){  int lastAppendPos=0;  Matcher matcher=pattern.matcher(input);  StringBuilder sb=new StringBuilder();  while (matcher.find()) {    sb.append(input,lastAppendPos,matcher.start());    sb.append(getReplacement(matcher));    lastAppendPos=matcher.end();  }  sb.append(input,lastAppendPos,input.length());  return sb.toString();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public synchronized boolean rowInserted() throws SQLException {  throw SQLError.createSQLFeatureNotSupportedException();}  }
class C{  private void stepInput(final Port port){  final Pipe receivingPipe=getCasing().getReceivingPipe(getFace(),port);  if (!receivingPipe.isReading()) {    receivingPipe.beginRead();  }  if (receivingPipe.canTransfer()) {    setRedstoneOutput(receivingPipe.read());    receivingPipe.beginRead();  }}  }
class C{  @AfterBatch public void afterBatch(){  long requestSequence=_requestSequence;  if (!_isFsync) {    return;  }  _isFsync=false;  try {    _storeFsync.fsync();  } catch (  Throwable e) {    e.printStackTrace();  } finally {    _tailSequence=requestSequence;  }}  }
class C{  public static void writeBufferedImage(BufferedImage image,String format,OutputStream outputStream,boolean encodeAlpha) throws IOException {  ImageEncoder imageEncoder=ImageEncoderFactory.newInstance(format,encodeAlpha);  imageEncoder.encode(image,outputStream);}  }
class C{  private JBBPCompiledBlock(final String source,final JBBPNamedFieldInfo[] namedFields,final JBBPIntegerValueEvaluator[] arraySizeEvaluators,final byte[] compiledData,final boolean hasVarFields,final JBBPFieldTypeParameterContainer[] customTypeFields){  this.source=source;  this.namedFieldData=namedFields;  this.hasVarFields=hasVarFields;  this.compiledArray=compiledData;  this.arraySizeEvaluators=arraySizeEvaluators;  this.customTypeFields=customTypeFields;}  }
class C{  public void initialize(){  this.statementLifecycleSvc=null;  this.engineURI=null;  this.schedulingService=null;  this.eventAdapterService=null;  this.engineImportService=null;  this.engineSettingsService=null;  this.databaseConfigService=null;  this.filterService=null;  this.timerService=null;  this.dispatchService=null;  this.viewService=null;  this.streamFactoryService=null;  this.plugInViews=null;  this.statementLockFactory=null;  this.engineLevelExtensionServicesContext=null;  this.engineEnvContext=null;  this.statementContextFactory=null;  this.plugInPatternObjects=null;  this.namedWindowMgmtService=null;  this.valueAddEventService=null;  this.metricsReportingService=null;  this.statementEventTypeRef=null;  this.threadingService=null;  this.expressionResultCacheSharable=null;}  }
class C{  private static void checkSlash(int depth,boolean create,String ans,String ask,String slash) throws Exception {  check(ans,ask + slash);  checkNames(depth,create,ans.endsWith(File.separator) ? ans : ans + File.separator,ask + slash);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DomPackage.LITERAL__VALUE:    setValue((String)newValue);  return;case DomPackage.LITERAL__NAME:setName((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doPost(request,response);}  }
class C{  public int pixelFor(int rgb){  return rgb;}  }
class C{  public ZipEntry(ZipEntry e){  name=e.name;  time=e.time;  crc=e.crc;  size=e.size;  csize=e.csize;  method=e.method;  flag=e.flag;  extra=e.extra;  comment=e.comment;}  }
class C{  public static boolean isHighAvailability(VirtualArrayRestRep varray){  return isHighAvailability(stringId(varray));}  }
class C{  protected Query finishQuery(BooleanQuery.Builder in,boolean allTermsRequired){  return in.build();}  }
class C{  private static void addParams(Integer archiveId,long archivePId,String archiveName,long fdrqrypid,int permisos,boolean isBookAdmin,Element parent){  Element node=parent.addElement(XML_PARAMS_TEXT);  node.addElement(XML_ARCHIVEPID_TEXT).addText(Long.toString(archivePId));  node.addElement(XML_ARCHIVEID_TEXT).addText(archiveId.toString());  node.addElement(XML_ARCHIVENAME_TEXT).add(DocumentHelper.createCDATA(archiveName));  node.addElement(XML_FDRQRYPID_TEXT).addText(Long.toString(fdrqrypid));  node.addElement(XML_PERMISOS_TEXT).addText(Integer.toString(permisos));  if (isBookAdmin) {    node.addElement(XML_BOOKADM_TEXT).addText(Integer.toString(1));  } else {    node.addElement(XML_BOOKADM_TEXT).addText(Integer.toString(0));  }}  }
class C{  public void testPruning(){  final int GROUP_1_COUNT=50;  final String GROUP_1_QUERY="group1 ";  final String GROUP_1_LINE2="line2 ";  writeEntries(GROUP_1_COUNT,GROUP_1_QUERY,GROUP_1_LINE2);  checkOpenCursorCount(GROUP_1_COUNT);  writeDelay();  final int GROUP_2_COUNT=200;  final String GROUP_2_QUERY="group2 ";  final String GROUP_2_LINE2="line2 ";  writeEntries(GROUP_2_COUNT,GROUP_2_QUERY,GROUP_2_LINE2);  checkOpenCursorCount(GROUP_1_COUNT + GROUP_2_COUNT);  final int GROUP_3_COUNT=10;  final String GROUP_3_QUERY="group3 ";  final String GROUP_3_LINE2="line2 ";  writeEntries(GROUP_3_COUNT,GROUP_3_QUERY,GROUP_3_LINE2);  checkOpenCursorCount(GROUP_1_COUNT + GROUP_2_COUNT);  int group1NewCount=GROUP_1_COUNT - GROUP_3_COUNT;  checkResultCounts(GROUP_1_QUERY,group1NewCount,group1NewCount,null,null);  checkResultCounts(GROUP_2_QUERY,GROUP_2_COUNT,GROUP_2_COUNT,null,null);  checkResultCounts(GROUP_3_QUERY,GROUP_3_COUNT,GROUP_3_COUNT,null,null);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:13.122 -0500",hash_original_method="C17562BADC30EBD8B8536D75F1BFCDF6",hash_generated_method="102FDA96883B8E136769EFD50368B807") private synchronized boolean processNextLoader(){  LoadListener loader=mLoaderQueue.peek();  if (loader != null) {    if (loader.cancelled()) {      mLoaderQueue.remove(loader);      return true;    }    SslError error=loader.sslError();    if (DebugFlags.SSL_ERROR_HANDLER) {      assert error != null;    }    if (checkSslPrefTable(loader,error)) {      mLoaderQueue.remove(loader);      return true;    }    CallbackProxy proxy=loader.getFrame().getCallbackProxy();    proxy.onReceivedSslError(new SslErrorHandlerImpl(this,loader),error);  }  return false;}  }
class C{  private Object saveBehaviorsState(FacesContext context){  Object state=null;  if (null != behaviors && behaviors.size() > 0) {    boolean stateWritten=false;    Object[] attachedBehaviors=new Object[behaviors.size()];    int i=0;    for (    List<ClientBehavior> eventBehaviors : behaviors.values()) {      Object[] attachedEventBehaviors=new Object[eventBehaviors.size()];      for (int j=0; j < attachedEventBehaviors.length; j++) {        attachedEventBehaviors[j]=((initialStateMarked()) ? saveBehavior(context,eventBehaviors.get(j)) : saveAttachedState(context,eventBehaviors.get(j)));        if (!stateWritten) {          stateWritten=(attachedEventBehaviors[j] != null);        }      }      attachedBehaviors[i++]=attachedEventBehaviors;    }    if (stateWritten) {      state=new Object[]{behaviors.keySet().toArray(new String[behaviors.size()]),attachedBehaviors};    }  }  return state;}  }
class C{  private BitMatrix sampleGrid(BitMatrix image,ResultPoint topLeft,ResultPoint bottomLeft,ResultPoint bottomRight,ResultPoint topRight) throws NotFoundException {  int dimension;  if (compact) {    dimension=4 * nbLayers + 11;  } else {    if (nbLayers <= 4) {      dimension=4 * nbLayers + 15;    } else {      dimension=4 * nbLayers + 2 * ((nbLayers - 4) / 8 + 1) + 15;    }  }  GridSampler sampler=GridSampler.getInstance();  return sampler.sampleGrid(image,dimension,dimension,0.5f,0.5f,dimension - 0.5f,0.5f,dimension - 0.5f,dimension - 0.5f,0.5f,dimension - 0.5f,topLeft.getX(),topLeft.getY(),topRight.getX(),topRight.getY(),bottomRight.getX(),bottomRight.getY(),bottomLeft.getX(),bottomLeft.getY());}  }
class C{  public static String restoreSoftApBSSID(String BSSID){  String pollutedBitStr=BSSID.substring(1,2);  Integer pollutedBitInt=0;  pollutedBitInt=Integer.parseInt(pollutedBitStr,16);  Integer cleanBitInt=pollutedBitInt | 0x02;  String cleanBitStr=Integer.toHexString(cleanBitInt);  return BSSID.substring(0,1) + cleanBitStr + BSSID.substring(2);}  }
class C{  @Override protected void doAction(){  BufferEntry bufferEntry=Buffer.interrogate();  if (bufferEntry != null) {    boolean success=pasteEntry(bufferEntry);    if (success) {      kseFrame.updateControls(true);    }  }}  }
class C{  private void printStorageCmrVersionWarn(IStorageData storageData){  if (null == storageData.getCmrVersion()) {    log.warn("The storage " + storageData + " does not define the CMR version. The storage might be unstable on the CMR version "+ cmrVersion+ ".");  } else   if (!Objects.equals(storageData.getCmrVersion(),cmrVersion)) {    log.warn("The storage " + storageData + " has different CMR version ("+ storageData.getCmrVersion()+ ") than the current CMR version("+ cmrVersion+ "). The storage might be unstable.");  }}  }
class C{  public int put(Object value){  value=makePoolValue(value);  Integer index=indices.get(value);  if (index == null) {    index=pp;    indices.put(value,index);    pool=ArrayUtils.ensureCapacity(pool,pp);    pool[pp++]=value;    if (value instanceof Long || value instanceof Double) {      pool=ArrayUtils.ensureCapacity(pool,pp);      pool[pp++]=null;    }  }  return index.intValue();}  }
class C{  public void close() throws IOException {  if (!this.closed) {    this.closed=true;    this.out.flush();  }}  }
class C{  private void cleanupMapIfNeeded(){  final int numberOfMsgKept=m_msgRepToMsgStatsMap.size();  if (numberOfMsgKept > m_numberOfParseErrorToRunCleanup) {    writeToLog();    final List<MessageStats> statsArray=new ArrayList<MessageStats>(m_msgRepToMsgStatsMap.values());    Collections.sort(statsArray);    for (    MessageStats stats : statsArray) {      final String msgRep=stats.getMessageRepresentation();      m_msgRepToMsgStatsMap.remove(msgRep);      if (m_msgRepToMsgStatsMap.size() <= m_numberOfParseErrorToKeepMax) {        break;      }    }  }}  }
class C{  public IndexShardState recovering(String reason,RecoveryState.Type type,RestoreSource restoreSource) throws IndexShardStartedException {  return recovering(reason,new RecoveryState(shardId,shardRouting.primary(),type,restoreSource,localNode));}  }
class C{  public void play(Context context,Uri uri,boolean looping,int stream){  Command cmd=new Command();  cmd.requestTime=SystemClock.uptimeMillis();  cmd.code=PLAY;  cmd.context=context;  cmd.uri=uri;  cmd.looping=looping;  cmd.stream=stream;synchronized (mCmdQueue) {    enqueueLocked(cmd);    mState=PLAY;  }}  }
class C{  public ListMultimap(){  this(new LinkedHashMap<K,List<V>>());}  }
class C{  public StackedXYAreaRenderer2(){  this(null,null);}  }
class C{  public Region createRegion(){  RegionImpl region=new RegionImpl();  return region;}  }
class C{  private static boolean isTwoBytesSequence(byte b){  return -64 <= b && b <= -33;}  }
class C{  private static boolean merge(final ClassWriter cw,int t,final int[] types,final int index){  int u=types[index];  if (u == t) {    return false;  }  if ((t & ~DIM) == NULL) {    if (u == NULL) {      return false;    }    t=NULL;  }  if (u == 0) {    types[index]=t;    return true;  }  int v;  if ((u & BASE_KIND) == OBJECT || (u & DIM) != 0) {    if (t == NULL) {      return false;    } else     if ((t & (DIM | BASE_KIND)) == (u & (DIM | BASE_KIND))) {      if ((u & BASE_KIND) == OBJECT) {        v=(t & DIM) | OBJECT | cw.getMergedType(t & BASE_VALUE,u & BASE_VALUE);      } else {        int vdim=ELEMENT_OF + (u & DIM);        v=vdim | OBJECT | cw.addType("java/lang/Object");      }    } else     if ((t & BASE_KIND) == OBJECT || (t & DIM) != 0) {      int tdim=(((t & DIM) == 0 || (t & BASE_KIND) == OBJECT) ? 0 : ELEMENT_OF) + (t & DIM);      int udim=(((u & DIM) == 0 || (u & BASE_KIND) == OBJECT) ? 0 : ELEMENT_OF) + (u & DIM);      v=Math.min(tdim,udim) | OBJECT | cw.addType("java/lang/Object");    } else {      v=TOP;    }  } else   if (u == NULL) {    v=(t & BASE_KIND) == OBJECT || (t & DIM) != 0 ? t : TOP;  } else {    v=TOP;  }  if (u != v) {    types[index]=v;    return true;  }  return false;}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=CameraManager.get().buildLuminanceSource(rotatedData,width,height);  BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));  try {    rawResult=multiFormatReader.decodeWithState(bitmap);  } catch (  ReaderException re) {  } finally {    multiFormatReader.reset();  }  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode (" + (end - start) + " ms):\n"+ rawResult.toString());    Message message=Message.obtain(activity.getHandler(),R.id.decode_succeeded,rawResult);    Bundle bundle=new Bundle();    bundle.putParcelable(DecodeThread.BARCODE_BITMAP,source.renderCroppedGreyscaleBitmap());    message.setData(bundle);    message.sendToTarget();  } else {    Message message=Message.obtain(activity.getHandler(),R.id.decode_failed);    message.sendToTarget();  }}  }
class C{  public PrivateKeyEncryptedException(String message,Throwable causeThrowable){  super(message,causeThrowable);}  }
class C{  public void sort(final Comparator<String> comp){  java.util.Collections.sort(this.ordered,new EntryComparator<VALUE>(comp));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public GetCharacterCreationDateCommand(String charname){  this.charname=charname;}  }
class C{  public RadialGradient(){}  }
class C{  public BoundedFifoBuffer(int size){  if (size <= 0) {    throw new IllegalArgumentException("The size must be greater than 0");  }  elements=new Object[size];  maxElements=elements.length;}  }
class C{  protected TimeEventSpecImpl(){  super();}  }
class C{  public Output(boolean storeAnnouncementsInMemory){  errors=false;  store=storeAnnouncementsInMemory;}  }
class C{  public static String encodeFromFile(String filename) throws java.io.IOException {  String encodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4),40)];    int length=0;    int numBytes=0;    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  @AfterClass() public static void endClass() throws SQLException {  if (testSingleHost) {    TimeZone.setDefault(previousTimeZone);    Locale.setDefault(previousFormatLocale);  }}  }
class C{  @Override public int size(){  return this.table.size();}  }
class C{  public String print(String tab){  if (content instanceof RegExp) {    return tab + "type = " + type+ Out.NL+ tab+ "content :"+ Out.NL+ ((RegExp)content).print(tab + "  ");  } else   return tab + "type = " + type+ Out.NL+ tab+ "content :"+ Out.NL+ tab+ "  "+ content;}  }
class C{  private void handleError(PresenceError error){  if (sLogger.isActivated()) {    sLogger.info("Subscribe has failed: " + error.getErrorCode() + ", reason="+ error.getMessage());  }  mContactManager.updateCapabilitiesTimeLastRequest(mContact);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:16.153 -0500",hash_original_method="95AFA75D0998C104C226840186514FC9",hash_generated_method="A4C2EED943B41B751F9ED084A5D45341") private RunnableScheduledFuture finishPoll(RunnableScheduledFuture f){  int s=--size;  RunnableScheduledFuture x=queue[s];  queue[s]=null;  if (s != 0)   siftDown(0,x);  setIndex(f,-1);  return f;}  }
class C{  @Dev public SetQuestToFutureRandomTimeStampAction(final String questname,@Dev(defaultValue="1") final int index,final int minDelay,final int maxDelay){  this.questname=checkNotNull(questname);  this.index=index;  this.min_delay=minDelay;  this.max_delay=maxDelay;}  }
class C{  public LogCursorManager() throws ReplicatorException {  nextTimeoutCheck=lastTimeoutCheck + timeoutMillis;}  }
class C{  public void configureManagers(){  powerManager=new jmri.jmrix.marklin.MarklinPowerManager(getTrafficController());  jmri.InstanceManager.store(powerManager,jmri.PowerManager.class);  turnoutManager=new jmri.jmrix.marklin.MarklinTurnoutManager(this);  jmri.InstanceManager.setTurnoutManager(turnoutManager);  throttleManager=new jmri.jmrix.marklin.MarklinThrottleManager(this);  jmri.InstanceManager.setThrottleManager(throttleManager);  sensorManager=new jmri.jmrix.marklin.MarklinSensorManager(this);  jmri.InstanceManager.setSensorManager(sensorManager);}  }
class C{  @Override public void destroy() throws Exception {  if (this.cacheManager != null) {    this.cacheManager.stop();  }}  }
class C{  public FastAdapterBottomSheetDialog<Item> withTitle(String title){  setTitle(title);  return this;}  }
class C{  public void addElement(RSSSequenceElement el){  list.add(el);}  }
class C{  public static long generate(long crc,String value){  if (value == null) {    return crc;  }  int len=value.length();  for (int i=0; i < len; i++) {    char ch=value.charAt(i);    if (ch > 0xff) {      crc=next(crc,(ch >> 8));    }    crc=next(crc,ch);  }  return crc;}  }
class C{  @Override public long position(Clob clobPattern,long start) throws SQLException {  throw unsupported("LOB search");}  }
class C{  public static int hash(long value){  return (int)(value ^ (value >> 32));}  }
class C{  private int[] doIntersection(int[] c2){  int[] result=new int[chars.length + c2.length];  int i=0;  int j=0;  int oldI;  int oldJ;  int index=0;  while (i < chars.length && j < c2.length) {    if (i < chars.length && i % 2 == 0) {      while (j < c2.length && c2[j] < chars[i]) {        ++j;      }      if (j < c2.length && j % 2 == 0 && c2[j] == chars[i]) {        ++j;      }    }    oldI=i;    while (j % 2 == 1 && i < chars.length && chars[i] <= c2[j]) {      ++i;    }    for (int k=oldI; k < i; k++) {      result[index++]=chars[k];    }    oldJ=j;    while (i % 2 == 1 && j < c2.length && c2[j] <= chars[i]) {      ++j;    }    for (int k=oldJ; k < j; k++) {      result[index++]=c2[k];    }    if (j < c2.length && j % 2 == 0) {      while (i < chars.length && chars[i] < c2[j]) {        ++i;      }      if (i < chars.length && i % 2 == 0 && c2[j] == chars[i]) {        ++i;      }    }  }  if (result.length > index) {    int[] tmpbuf=new int[index];    System.arraycopy(result,0,tmpbuf,0,index);    return tmpbuf;  }  return result;}  }
class C{  private Primality(){}  }
class C{  public PropertyVetoException(String mess,PropertyChangeEvent evt){  super(mess);  this.evt=evt;}  }
class C{  public int length(){  int idx=actualArrayLength - 1;  while (idx >= 0 && bits[idx] == 0) {    --idx;  }  actualArrayLength=idx + 1;  if (idx == -1) {    return 0;  }  int i=ELM_SIZE - 1;  long val=bits[idx];  while ((val & (TWO_N_ARRAY[i])) == 0 && i > 0) {    i--;  }  return (idx << OFFSET) + i + 1;}  }
class C{  public static Color flashColor(){  return info().flashColor;}  }
class C{  protected void filterByTenant(List<OrderRestRep> orders){  Iterator<OrderRestRep> iter=orders.iterator();  while (iter.hasNext()) {    if (!StringUtils.equals(tenantId,iter.next().getTenant().getId().toString())) {      iter.remove();    }  }}  }
class C{  private static synchronized Date parseDateString(String textRepresentation) throws ParseException {  try {    return sdfDefault.parse(textRepresentation);  } catch (  ParseException ex) {    return sdfGnuStep.parse(textRepresentation);  }}  }
class C{  public AlertDialog show(){  mDialog=super.show();  return mDialog;}  }
class C{  private void checkForAdempiere(){  s_isEnvironmentAdempiere=false;  Enumeration<Object> e=System.getProperties().keys();  while (e.hasMoreElements()) {    String key=(String)e.nextElement();    if (key.toUpperCase().startsWith("ADEMPIERE_")) {      s_isEnvironmentAdempiere=true;    }  }  Map<String,String> env=System.getenv();  for (  String envName : env.keySet()) {    if (envName.toUpperCase().startsWith("ADEMPIERE_"))     s_isEnvironmentAdempiere=true;  }}  }
class C{  @Override protected void buildActions(final List<String> list){  list.add(ActionType.INSPECT.getRepresentation());  super.buildActions(list);}  }
class C{  public XObject execute(XPathContext xctxt,boolean destructiveOK) throws javax.xml.transform.TransformerException {  org.apache.xml.utils.PrefixResolver xprefixResolver=xctxt.getNamespaceContext();  XObject result;  if (m_fixUpWasCalled) {    if (m_isGlobal)     result=xctxt.getVarStack().getGlobalVariable(xctxt,m_index,destructiveOK); else     result=xctxt.getVarStack().getLocalVariable(xctxt,m_index,destructiveOK);  } else {    result=xctxt.getVarStack().getVariableOrParam(xctxt,m_qname);  }  if (null == result) {    warn(xctxt,XPATHErrorResources.WG_ILLEGAL_VARIABLE_REFERENCE,new Object[]{m_qname.getLocalPart()});    result=new XNodeSet(xctxt.getDTMManager());  }  return result;}  }
class C{  protected void clearEditInfo() throws Exception {  int i;  FolderTokenExtFld fld=null;  for (i=0; i < count(); i++) {    fld=get(i);    fld.clearEditInfo();  }}  }
class C{  public Collection<OperationDeclaration> operations(){  return operationsMap.values();}  }
class C{  public boolean containsPrefix(final CharSequence prefix){  return containsPrefix(prefix,0,prefix.length());}  }
class C{  public String toString(){  return "[BurlapRemote " + this.url + "]";}  }
class C{  public char nextClean() throws JSONException {  for (; ; ) {    char c=this.next();    if (c == 0 || c > ' ') {      return c;    }  }}  }
class C{  protected boolean isMouseOverBorder(){  return false;}  }
class C{  public ImmutableArray<K> remove(int index){  int len=array.length - 1;  @SuppressWarnings("unchecked") K[] array=(K[])new Object[len];  DataUtils.copyExcept(this.array,array,this.array.length,index);  return new ImmutableArray<K>(array);}  }
class C{  public boolean empty(){  return text.length() == 0 && links.size() == 0 && templates.size() == 0 && tags.size() == 0 && mathSpans.size() == 0;}  }
class C{  private void findSessionId(byte[] b,int off,int len){  String sessionStart=new String(b,off,len);  int traceStartIdx=sessionStart.indexOf(START_TEXT);  int sessionIdStart=-1;  int sessionIdEnd=-1;  if (traceStartIdx >= 0) {    sessionIdStart=traceStartIdx + START_TEXT.length();    if (sessionIdStart < sessionStart.length()) {      sessionIdEnd=sessionStart.indexOf(' ',sessionIdStart);    }  }  if (sessionIdStart >= 0 && sessionIdEnd > sessionIdStart && sessionIdEnd < sessionStart.length()) {    try {      int sessionId=Integer.parseInt(sessionStart.substring(sessionIdStart,sessionIdEnd));      traceSessions.put(sessionName,sessionId);    } catch (    NumberFormatException ex) {    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void handleActionBaz(String param1,String param2){  throw new UnsupportedOperationException("Not yet implemented");}  }
class C{  public String nextString(char quote) throws JSONException {  char c;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=this.next();switch (c) {case 0:case '\n':case '\r':      throw this.syntaxError("Unterminated string");case '\\':    c=this.next();switch (c) {case 'b':    sb.append('\b');  break;case 't':sb.append('\t');break;case 'n':sb.append('\n');break;case 'f':sb.append('\f');break;case 'r':sb.append('\r');break;case 'u':try {sb.append((char)Integer.parseInt(this.next(4),16));} catch (NumberFormatException e) {throw this.syntaxError("Illegal escape.",e);}break;case '"':case '\'':case '\\':case '/':sb.append(c);break;default :throw this.syntaxError("Illegal escape.");}break;default :if (c == quote) {return sb.toString();}sb.append(c);}}}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 190) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:53.589 -0500",hash_original_method="B4323D2F9A07343D2462A4D59ED08046",hash_generated_method="3B2E7C0A64E67E03198E98AAACE24392") private boolean isRoamIndForHomeSystem(String roamInd){  String homeRoamIndicators=SystemProperties.get("ro.cdma.homesystem");  if (!TextUtils.isEmpty(homeRoamIndicators)) {    for (    String homeRoamInd : homeRoamIndicators.split(",")) {      if (homeRoamInd.equals(roamInd)) {        return true;      }    }    return false;  }  return false;}  }
class C{  protected String doIt() throws AdempiereSystemError {  log.info("doIt - Open C_Order_ID=" + p_C_Order_ID);  if (p_C_Order_ID == 0)   return "";  MOrder order=new MOrder(getCtx(),p_C_Order_ID,get_TrxName());  String msg=order.reopenIt();  if (msg.length() != 0) {    throw new AdempiereSystemError(msg);  }  return order.save() ? "@OK@" : "@Error@";}  }
class C{  void cleanup(){}  }
class C{  public Vector2 mul(Vector2 v){  float x=vals[POS_X] + vals[COL1_X] * v.x + vals[COL2_X] * v.y;  float y=vals[POS_Y] + vals[COL1_Y] * v.x + vals[COL2_Y] * v.y;  v.x=x;  v.y=y;  return v;}  }
class C{  public void testModeratelyComplexTemplating() throws Exception {  HtmlPage page=getPage("/faces/facelets/templateDecoration2.xhtml");  String text=page.asText();  assertTrue(text.contains("Inserted from client1 Default"));}  }
class C{  public void schedule(String poolName,String serviceName,Map<String,? extends Object> context,long startTime,int frequency,int interval,int count,long endTime) throws JobManagerException {  schedule(null,null,serviceName,context,startTime,frequency,interval,count,endTime,-1);}  }
class C{  protected void initComponentDefaults(UIDefaults table){  super.initComponentDefaults(table);  Color c=table.getColor("TextField.background");  table.put("ComboBox.background",c);  table.put("ComboBox.listBackground",c);  Class lf=com.jgoodies.looks.plastic.PlasticLookAndFeel.class;  table.put("Tree.openIcon",makeIcon(lf,"icons/TreeOpen.gif"));  table.put("Tree.closedIcon",makeIcon(lf,"icons/TreeClosed.gif"));  table.put("Tree.leafIcon",makeIcon(lf,"icons/TreeLeaf.gif"));}  }
class C{  public TaskResourceRep unexportFileSystem(URI fsId,String protocol,String securityType,String permissions,String rootUserMapping,String subDirectory){  String unexportPath=String.format(UNEXPORTS,fsId,protocol,securityType,permissions,rootUserMapping);  WebResource rRoot=createRequest(unexportPath);  if (StringUtils.isNotEmpty(subDirectory)) {    rRoot=rRoot.queryParam(SUB_DIRECTORY_QUERY_KEY,subDirectory);  }  TaskResourceRep resp=null;  try {    resp=addSignature(rRoot).delete(TaskResourceRep.class);  } catch (  UniformInterfaceException e) {    _log.warn("could not unexport",e);  }  return resp;}  }
class C{  private static int determineConsecutiveDigitCount(CharSequence msg,int startpos){  int count=0;  int len=msg.length();  int idx=startpos;  if (idx < len) {    char ch=msg.charAt(idx);    while (isDigit(ch) && idx < len) {      count++;      idx++;      if (idx < len) {        ch=msg.charAt(idx);      }    }  }  return count;}  }
class C{  private static void parseAttributeOrTextContent(String stringValue,Field field,Type valueType,List<Type> context,Object destination,GenericXml genericXml,Map<String,Object> destinationMap,String name){  if (field != null || genericXml != null || destinationMap != null) {    valueType=field == null ? valueType : field.getGenericType();    Object value=parseValue(valueType,context,stringValue);    setValue(value,field,destination,genericXml,destinationMap,name);  }}  }
class C{  @Override public void addWithPackedColor(final ITextureRegion pTextureRegion,final float pX1,final float pY1,final float pX2,final float pY2,final float pColorABGRPackedInt){  final float[] bufferData=this.getBufferData();  final int bufferDataOffset=this.mBufferDataOffset;  final float x1=pX1;  final float y1=pY1;  final float x2=pX2;  final float y2=pY2;  final float u=pTextureRegion.getU();  final float v=pTextureRegion.getV();  final float u2=pTextureRegion.getU2();  final float v2=pTextureRegion.getV2();  if (pTextureRegion.isRotated()) {    bufferData[bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X]=x1;    bufferData[bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y]=y1;    bufferData[bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX]=pColorABGRPackedInt;    bufferData[bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U]=u;    bufferData[bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V]=v;    bufferData[bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X]=x1;    bufferData[bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y]=y2;    bufferData[bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX]=pColorABGRPackedInt;    bufferData[bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U]=u2;    bufferData[bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V]=v;    bufferData[bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X]=x2;    bufferData[bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y]=y1;    bufferData[bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX]=pColorABGRPackedInt;    bufferData[bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U]=u;    bufferData[bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V]=v2;    bufferData[bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X]=x2;    bufferData[bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y]=y1;    bufferData[bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX]=pColorABGRPackedInt;    bufferData[bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U]=u;    bufferData[bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V]=v2;    bufferData[bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X]=x1;    bufferData[bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y]=y2;    bufferData[bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX]=pColorABGRPackedInt;    bufferData[bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U]=u2;    bufferData[bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V]=v;    bufferData[bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X]=x2;    bufferData[bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y]=y2;    bufferData[bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX]=pColorABGRPackedInt;    bufferData[bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U]=u2;    bufferData[bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V]=v2;  } else {    bufferData[bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X]=x1;    bufferData[bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y]=y1;    bufferData[bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX]=pColorABGRPackedInt;    bufferData[bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U]=u;    bufferData[bufferDataOffset + 0 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V]=v2;    bufferData[bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X]=x1;    bufferData[bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y]=y2;    bufferData[bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX]=pColorABGRPackedInt;    bufferData[bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U]=u;    bufferData[bufferDataOffset + 1 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V]=v;    bufferData[bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X]=x2;    bufferData[bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y]=y1;    bufferData[bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX]=pColorABGRPackedInt;    bufferData[bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U]=u2;    bufferData[bufferDataOffset + 2 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V]=v2;    bufferData[bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X]=x2;    bufferData[bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y]=y1;    bufferData[bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX]=pColorABGRPackedInt;    bufferData[bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U]=u2;    bufferData[bufferDataOffset + 3 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V]=v2;    bufferData[bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X]=x1;    bufferData[bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y]=y2;    bufferData[bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX]=pColorABGRPackedInt;    bufferData[bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U]=u;    bufferData[bufferDataOffset + 4 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V]=v;    bufferData[bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_X]=x2;    bufferData[bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.VERTEX_INDEX_Y]=y2;    bufferData[bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.COLOR_INDEX]=pColorABGRPackedInt;    bufferData[bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_U]=u2;    bufferData[bufferDataOffset + 5 * SpriteBatch.VERTEX_SIZE + SpriteBatch.TEXTURECOORDINATES_INDEX_V]=v;  }  this.mBufferDataOffset+=SpriteBatch.SPRITE_SIZE;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public RatPoly pop(){  RatPoly top=polys.head;  polys=polys.tail;  size--;  return top;}  }
class C{  public HTMLFrameHyperlinkEvent(Object source,EventType type,URL targetURL,String desc,Element sourceElement,String targetFrame){  super(source,type,targetURL,desc,sourceElement);  this.targetFrame=targetFrame;}  }
class C{  protected void showDialog(Bundle state){  final Dialog dialog=mDialog=createDialog();  if (state != null) {    dialog.onRestoreInstanceState(state);  }  if (needInputMethod()) {    requestInputMethod(dialog);  }  dialog.setOnDismissListener(this);  dialog.show();}  }
class C{  public boolean isHasTree(){  Object oo=get_Value(COLUMNNAME_HasTree);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Model last(Context context){  ContentResolverValues values=asContentResolverValue(context);  CPOrmCursor<Model> cursor=queryAsCursor(context);  if (cursor == null)   return null;  try {    if (cursor.moveToLast()) {      return cursor.inflate();    } else     return null;  }  finally {    cursor.close();  }}  }
class C{  public void testMixed() throws Exception {  String str=merge(single(FILE_1_1),wildcard(DIR_2),single(MISSING_FILE),wildcard(MISSING_DIR));  Collection<File> res=parse(str);  assert res.size() == 3;  assert res.contains(FILE_1_1);  assert res.contains(FILE_2_1);  assert res.contains(FILE_2_2);}  }
class C{  protected QuickAdapter(Context context,MultiItemTypeSupport<T> multiItemTypeSupport,List<T> data){  super(context,multiItemTypeSupport,data);}  }
class C{  public final int bytesConsumed(){  return bytesConsumed;}  }
class C{  public String substring(int start,int count){  return String.valueOf(text,start,count);}  }
class C{  public boolean onStartCode(int startCodeValue,int bytesAlreadyPassed){  if (isFilling) {    if (sequenceExtensionPosition == 0 && startCodeValue == START_EXTENSION) {      sequenceExtensionPosition=length;    } else {      length-=bytesAlreadyPassed;      isFilling=false;      return true;    }  } else   if (startCodeValue == START_SEQUENCE_HEADER) {    isFilling=true;  }  return false;}  }
class C{  public static final void drawPolygon(GL2 gl,Vector2[] vs,boolean points){  gl.glBegin(GL.GL_LINE_LOOP);  for (int i=0; i < vs.length; i++) {    Vector2 v=vs[i];    gl.glVertex2d(v.x,v.y);  }  gl.glEnd();  if (points) {    gl.glBegin(GL.GL_POINTS);    for (int i=0; i < vs.length; i++) {      Vector2 v=vs[i];      gl.glVertex2d(v.x,v.y);    }    gl.glEnd();  }}  }
class C{  public void displayCallInProgressNotification(MXSession session,Room room,String callId){  if (null != callId) {    Notification notification=NotificationUtils.buildPendingCallNotification(getApplicationContext(),room.getName(session.getCredentials().userId),room.getRoomId(),session.getCredentials().userId,callId);    startForeground(NOTIF_ID_FOREGROUND_SERVICE,notification);    mForegroundServiceIdentifier=FOREGROUND_NOTIF_ID_PENDING_CALL;    mCallIdInProgress=callId;  }}  }
class C{  public void removeRepositoryConnectionInterceptor(RepositoryConnectionInterceptor interceptor){  conInterceptors.remove(interceptor);}  }
class C{  public static byte[] encodeByte(final byte[] binaryData){  return Base64.encodeBase64(binaryData,false);}  }
class C{  void forAllAction(NodeRepresentation nodeRep){  Decomposition decomp=nodeRep.decomposition;  hasChanged=true;  if (decomp.definedOp != null) {    assumpDefinitions.add(decomp.definedOp);  }  QuantifierDecomposition qdc=decomposeQuantifier(nodeRep,true);  this.goalRep=qdc.body;  for (int i=0; i < qdc.news.size(); i++) {    this.assumeReps.add(qdc.news.elementAt(i));  }  raiseWindow();}  }
class C{  public void emitUnpack(){  println("\";");  nl();  println("  private static int [] zzUnpack" + name + "() {");  println("    int [] result = new int[" + numEntries + "];");  println("    int offset = 0;");  for (int i=0; i < chunks; i++) {    println("    offset = zzUnpack" + name + "("+ constName()+ "_PACKED_"+ i+ ", offset, result);");  }  println("    return result;");  println("  }");  nl();  println("  private static int zzUnpack" + name + "(String packed, int offset, int [] result) {");  println("    int i = 0;  /* index in packed string  */");  println("    int j = offset;  /* index in unpacked array */");  println("    int l = packed.length();");  println("    while (i < l) {");  println("      int high = packed.charAt(i++) << 16;");  println("      result[j++] = high | packed.charAt(i++);");  println("    }");  println("    return j;");  println("  }");}  }
class C{  public void resolve(BlockScope blockScope){  if ((this.bits & ASTNode.IsAnonymousType) == 0) {    Binding existing=blockScope.getType(this.name);    if (existing instanceof ReferenceBinding && existing != this.binding && existing.isValidBinding()) {      ReferenceBinding existingType=(ReferenceBinding)existing;      if (existingType instanceof TypeVariableBinding) {        blockScope.problemReporter().typeHiding(this,(TypeVariableBinding)existingType);        Scope outerScope=blockScope.parent;        checkOuterScope:         while (outerScope != null) {          Binding existing2=outerScope.getType(this.name);          if (existing2 instanceof TypeVariableBinding && existing2.isValidBinding()) {            TypeVariableBinding tvb=(TypeVariableBinding)existingType;            Binding declaringElement=tvb.declaringElement;            if (declaringElement instanceof ReferenceBinding && CharOperation.equals(((ReferenceBinding)declaringElement).sourceName(),this.name)) {              blockScope.problemReporter().typeCollidesWithEnclosingType(this);              break checkOuterScope;            }          } else           if (existing2 instanceof ReferenceBinding && existing2.isValidBinding() && outerScope.isDefinedInType((ReferenceBinding)existing2)) {            blockScope.problemReporter().typeCollidesWithEnclosingType(this);            break checkOuterScope;          } else           if (existing2 == null) {            break checkOuterScope;          }          outerScope=outerScope.parent;        }      } else       if (existingType instanceof LocalTypeBinding && ((LocalTypeBinding)existingType).scope.methodScope() == blockScope.methodScope()) {        blockScope.problemReporter().duplicateNestedType(this);      } else       if (blockScope.isDefinedInType(existingType)) {        blockScope.problemReporter().typeCollidesWithEnclosingType(this);      } else       if (blockScope.isDefinedInSameUnit(existingType)) {        blockScope.problemReporter().typeHiding(this,existingType);      }    }    blockScope.addLocalType(this);  }  if (this.binding != null) {    blockScope.referenceCompilationUnit().record((LocalTypeBinding)this.binding);    resolve();    updateMaxFieldCount();  }}  }
class C{  public void paintFileChooserBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public void removeRcsAccount(String excludeUsername){  for (  Account account : mAccountManager.getAccountsByType(ACCOUNT_MANAGER_TYPE)) {    if (!account.name.equals(excludeUsername)) {      mAccountManager.removeAccount(account,null,null);    }  }}  }
class C{  public BasicAuthentication(boolean isProxy,URL url,String realm,String auth){  super(isProxy ? PROXY_AUTHENTICATION : SERVER_AUTHENTICATION,AuthScheme.BASIC,url,realm);  this.auth="Basic " + auth;}  }
class C{  public static int copy(final InputStream input,final OutputStream output) throws IOException {  long count=IOUtils.copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  public static boolean rsaCheckContent(String content,String sign,String publicKey,String charset) throws CommonsException {  try {    PublicKey pubKey=getPublicKeyFromX509(SignatureConstant.SIGN_TYPE_RSA,new ByteArrayInputStream(publicKey.getBytes()));    java.security.Signature signature=java.security.Signature.getInstance(SignatureConstant.SIGN_ALGORITHMS);    signature.initVerify(pubKey);    if (StringUtils.isEmpty(charset)) {      signature.update(content.getBytes());    } else {      signature.update(content.getBytes(charset));    }    return signature.verify(Base64.decodeBase64(sign.getBytes()));  } catch (  Exception e) {    throw new CommonsException(ErrorType.SYS0004);  }}  }
class C{  private JCExpression expressionInvoke(VarSymbol rcvr){  JCExpression qualifier=(rcvr != null) ? makeReceiver(rcvr) : tree.getQualifierExpression();  JCFieldAccess select=make.Select(qualifier,tree.sym.name);  select.sym=tree.sym;  select.type=tree.sym.erasure(types);  JCExpression apply=make.Apply(List.<JCExpression>nil(),select,convertArgs(tree.sym,args.toList(),tree.varargsElement)).setType(tree.sym.erasure(types).getReturnType());  apply=transTypes.coerce(apply,localContext.generatedRefSig().getReturnType());  setVarargsIfNeeded(apply,tree.varargsElement);  return apply;}  }
class C{  ExprNode(int kind,TreeNode stn){  super(kind,stn);}  }
class C{  public GeoConcavePolygon(final PlanetModel planetModel,final List<GeoPoint> pointList,final List<GeoPolygon> holes,final BitSet internalEdgeFlags,final boolean returnEdgeInternal){  super(planetModel);  this.points=pointList;  this.holes=holes;  this.isInternalEdges=internalEdgeFlags;  done(returnEdgeInternal);}  }
class C{  public static boolean lazyGaussianElimination(Modulo3System system,final int var2Eq[][],final int c[],final int[] variable,final long[] solution){  final int numEquations=c.length;  if (numEquations == 0)   return true;  final int numVars=var2Eq.length;  assert solution.length == numVars;  final boolean buildSystem=system == null;  if (buildSystem) {    system=new Modulo3System(numVars);    for (int i=0; i < c.length; i++)     system.add(new Modulo3Equation(c[i],numVars));  }  final int weight[]=new int[numVars];  final int[] priority=new int[numEquations];  for (  final int v : variable) {    final int[] eq=var2Eq[v];    if (eq.length == 0)     continue;    int currEq=eq[0];    int currCoeff=1;    int j=0;    for (int i=1; i < eq.length; i++) {      if (eq[i] != currEq) {        assert eq[i] > currEq;        currCoeff=currCoeff % 3;        if (currCoeff != 0) {          if (buildSystem)           system.equations.get(currEq).add(v,currCoeff);          weight[v]++;          priority[currEq]++;          eq[j++]=currEq;        }        currEq=eq[i];        currCoeff=1;      } else       currCoeff++;    }    if (currCoeff != 3) {      if (buildSystem)       system.equations.get(currEq).add(v,currCoeff);      weight[v]++;      priority[currEq]++;      eq[j++]=currEq;    }    if (j != eq.length)     var2Eq[v]=Arrays.copyOf(var2Eq[v],j);  }  if (DEBUG) {    System.err.println();    System.err.println("===== Going to solve... ======");    System.err.println();    System.err.println(system);  }  final IntArrayList variables;{    final int[] u=new int[variable.length];    final int[] count=new int[3 * numEquations + 1];    for (int i=variable.length; i-- != 0; )     count[weight[variable[i]]]++;    for (int i=1; i < count.length; i++)     count[i]+=count[i - 1];    for (int i=variable.length; i-- != 0; )     u[--count[weight[variable[i]]]]=variable[i];    variables=IntArrayList.wrap(u);  }  final IntArrayList equationList=new IntArrayList();  for (int i=priority.length; i-- != 0; )   if (priority[i] <= 1)   equationList.add(i);  ArrayList<Modulo3Equation> dense=new ArrayList<Modulo3Equation>();  ArrayList<Modulo3Equation> solved=new ArrayList<Modulo3Equation>();  IntArrayList pivots=new IntArrayList();  final ArrayList<Modulo3Equation> equations=system.equations;  final long[] normalized=new long[equations.get(0).bits.length];  final long[] idleNormalized=new long[normalized.length];  Arrays.fill(idleNormalized,0x5555555555555555L);  int numActive=0;  for (int remaining=equations.size(); remaining != 0; ) {    if (equationList.isEmpty()) {      int var;      do       var=variables.popInt(); while (weight[var] == 0);      numActive++;      idleNormalized[var / 32]^=1L << (var % 32) * 2;      if (DEBUG)       System.err.println("Making variable " + var + " of weight "+ weight[var]+ " active ("+ remaining+ " equations to go)");      for (      final int equationIndex : var2Eq[var])       if (--priority[equationIndex] == 1)       equationList.push(equationIndex);    } else {      remaining--;      final int first=equationList.popInt();      final Modulo3Equation equation=equations.get(first);      if (DEBUG)       System.err.println("Looking at equation " + first + " of priority "+ priority[first]+ " : "+ equation);      if (priority[first] == 0) {        if (equation.isUnsolvable())         return false;        if (equation.isIdentity())         continue;        dense.add(equation);      } else       if (priority[first] == 1) {        equation.normalized(normalized);        int wordIndex=0;        while ((normalized[wordIndex] & idleNormalized[wordIndex]) == 0)         wordIndex++;        final int pivot=wordIndex * 32 + Long.numberOfTrailingZeros(normalized[wordIndex] & idleNormalized[wordIndex]) / 2;        if (DEBUG)         System.err.println("Adding to solved variables x_" + pivot + " by equation "+ equation);        pivots.add(pivot);        solved.add(equation);        weight[pivot]=0;        for (        final int equationIndex : var2Eq[pivot]) {          if (equationIndex == first)           continue;          if (--priority[equationIndex] == 1)           equationList.add(equationIndex);          if (DEBUG)           System.err.print("Replacing equation (" + equationIndex + ") "+ equations.get(equationIndex)+ " with ");          equations.get(equationIndex).eliminate(pivot,equation);          if (DEBUG)           System.err.println(equations.get(equationIndex));        }      }    }  }  LOGGER.debug("Active variables: " + numActive + " ("+ Util.format(numActive * 100 / numVars)+ "%)");  if (DEBUG) {    System.err.println("Dense equations: " + dense);    System.err.println("Solved equations: " + solved);    System.err.println("Pivots: " + pivots);  }  Modulo3System denseSystem=new Modulo3System(numVars,dense);  LongArrayBitVector solutions=LongArrayBitVector.ofLength(numVars * 2);  if (!denseSystem.gaussianElimination(solutions))   return false;  final long[] solutionBits=solutions.bits();  final LongBigList solutionList=solutions.asLongBigList(2);  if (DEBUG)   System.err.println("Solution (dense): " + solutionList);  for (int i=solved.size(); i-- != 0; ) {    final Modulo3Equation equation=solved.get(i);    final int pivot=pivots.getInt(i);    assert solutionList.getLong(pivot) == 0 : pivot;    final int pivotCoefficient=(int)equation.list.getLong(pivot);    int sum=(equation.c - Modulo3Equation.scalarProduct(equation.bits,solutionBits)) % 3;    if (sum < 0)     sum+=3;    assert pivotCoefficient != -1;    solutionList.set(pivot,sum == 0 ? 0 : pivotCoefficient == sum ? 1 : 2);  }  if (DEBUG)   System.err.println("Solution (all): " + solutionList);  assert system.check(solutions);  for (int i=0; i < solution.length; i++)   solution[i]=solutionList.getLong(i);  return true;}  }
class C{  public Plot area(String label,List<? extends Number> x,List<? extends Number> y){  return area(label,x,y,null);}  }
class C{  @Override public boolean lock(){  try {    lockPath=zk.create(this.lockTypeFolder + CarbonCommonConstants.FILE_SEPARATOR + lockName,null,Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL_SEQUENTIAL);    List<String> nodes=zk.getChildren(this.lockTypeFolder,null);    Collections.sort(nodes);    if (lockPath.endsWith(nodes.get(0))) {      return true;    } else {      zk.delete(lockPath,-1);      return false;    }  } catch (  KeeperException|InterruptedException e) {    LOGGER.error(e,e.getMessage());    return false;  }}  }
class C{  private String createDigestHeader(final String uname,final String digest) throws AuthenticationException {  LOG.trace("enter DigestScheme.createDigestHeader(String, Map, " + "String)");  final String uri=getParameter("uri");  final String realm=getParameter("realm");  final String nonce=getParameter("nonce");  final String opaque=getParameter("opaque");  final String response=digest;  final String algorithm=getParameter("algorithm");  final List params=new ArrayList(20);  params.add(new NameValuePair("username",uname));  params.add(new NameValuePair("realm",realm));  params.add(new NameValuePair("nonce",nonce));  params.add(new NameValuePair("uri",uri));  params.add(new NameValuePair("response",response));  if (qopVariant != QOP_MISSING) {    params.add(new NameValuePair("qop",getQopVariantString()));    params.add(new NameValuePair("nc",NC));    params.add(new NameValuePair("cnonce",cnonce));  }  if (algorithm != null) {    params.add(new NameValuePair("algorithm",algorithm));  }  if (opaque != null) {    params.add(new NameValuePair("opaque",opaque));  }  final StringBuffer buffer=new StringBuffer();  for (int i=0; i < params.size(); i++) {    final NameValuePair param=(NameValuePair)params.get(i);    if (i > 0) {      buffer.append(", ");    }    final boolean noQuotes="nc".equals(param.getName()) || "qop".equals(param.getName());    formatter.setAlwaysUseQuotes(!noQuotes);    formatter.format(buffer,param);  }  return buffer.toString();}  }
class C{  public Matrix arrayLeftDivide(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=B.A[i][j] / A[i][j];    }  }  return X;}  }
class C{  public NotUpdatable(){  this(NOT_UPDATEABLE_MESSAGE);}  }
class C{  public String handleGetMessage(String key,Object[] subs){  return this.handleGetMessage(Locale.getDefault(),key,subs);}  }
class C{  public static SubRegionResponse create(DistributionManager dm,InternalDistributedMember recipient,Region r){  SubRegionResponse m=new SubRegionResponse();  m.setRecipient(recipient);  Set subregions=r.subregions(false);  List subNames=new ArrayList();  List userAttrs=new ArrayList();  Iterator it=subregions.iterator();  while (it.hasNext()) {    Region reg=(Region)it.next();    subNames.add(reg.getName());    userAttrs.add(CacheDisplay.getCachedObjectDisplay(reg.getUserAttribute(),GemFireVM.LIGHTWEIGHT_CACHE_VALUE));  }  String[] temp=new String[0];  m.subRegionNames=(String[])subNames.toArray(temp);  m.userAttributes=(String[])userAttrs.toArray(temp);  return m;}  }
class C{  protected void addLine(PrintWriter file,String string){  log.debug(string);  if (file != null) {    file.println(string);  }}  }
class C{  public NamedIcon(URL pUrl,String pName){  this(pUrl.toString(),pName);}  }
class C{  @Override public boolean hasInstance(Scriptable value){  if (value instanceof Wrapper && !(value instanceof NativeJavaClass)) {    Object instance=((Wrapper)value).unwrap();    return getClassObject().isInstance(instance);  }  return false;}  }
class C{  public static String summarizeStrings(String first,String second){  if (first == null && second == null) {    return "";  }  if (first == null) {    return second;  }  if (second == null) {    return first;  }  if ("".equals(first.trim()) && "".equals(second.trim())) {    return "";  }  if ("".equals(first.trim())) {    return "*";  }  if ("".equals(second.trim())) {    return "*";  }  final Word[] one=prepareString(first);  final ArrayList<Word> summary=summarizeStrings(one,second);  final StringBuilder printBuffer=new StringBuilder();  for (int i=0; i < summary.size(); i++) {    final Word currWord=summary.get(i);    if (currWord.ws) {      printBuffer.append(' ');    }    printBuffer.append(currWord.getStr());  }  return printBuffer.toString();}  }
class C{  public MapRoute(int type,List<MapNode> stops){  assert stops.size() > 0 : "Route needs stops";  this.type=type;  this.stops=stops;  this.index=0;  this.comingBack=false;}  }
class C{  public <Result,Progress>Promise<Result,Progress> anyOf(Collection<Promise<Result,Progress>> promises){  return new AnyOfPromise<>(this,promises);}  }
class C{  private static char decodeHexNibble(final char c){  if ('0' <= c && c <= '9') {    return (char)(c - '0');  } else   if ('a' <= c && c <= 'f') {    return (char)(c - 'a' + 10);  } else   if ('A' <= c && c <= 'F') {    return (char)(c - 'A' + 10);  } else {    return Character.MAX_VALUE;  }}  }
class C{  public void addExternalHandler(final Object newHandler,final int type){switch (type) {case Options.AdditionalHandler:    additionalHandler=(AdditonalHandler)newHandler;  break;case Options.USE_XFA_IN_LEGACY_MODE:alwaysUseXFA=((Boolean)newHandler);break;case Options.USE_XFA:useXFA=((Boolean)newHandler);break;case Options.PluginHandler:customPluginHandle=newHandler;break;case Options.MultiPageUpdate:customSwingHandle=newHandler;break;case Options.ErrorTracker:customErrorTracker=(ErrorTracker)newHandler;break;case Options.ExpressionEngine:userExpressionEngine=(ExpressionEngine)newHandler;break;case Options.FormFactory:userFormFactory=((FormFactory)newHandler);break;case Options.GUIContainer:swingGUI=newHandler;break;case Options.ImageHandler:customImageHandler=(ImageHandler)newHandler;break;case Options.ColorHandler:customColorHandler=(ColorHandler)newHandler;break;case Options.GlyphTracker:customGlyphTracker=(GlyphTracker)newHandler;break;case Options.ShapeTracker:customShapeTracker=(ShapeTracker)newHandler;break;case Options.CustomFormPrint:customFormPrint=(CustomFormPrint)newHandler;break;case Options.JPedalActionHandler:jpedalActionHandlers=(Map)newHandler;break;case Options.CustomMessageOutput:customMessageHandler=(CustomMessageHandler)newHandler;break;case Options.RenderChangeListener:customRenderChangeListener=(RenderChangeListener)newHandler;break;case Options.CustomPrintHintingHandler:customPrintHintingHandler=(CustomPrintHintingHandler)newHandler;break;case Options.CustomOutput:customDVR=(DynamicVectorRenderer)newHandler;break;default :if (additionalHandler != null) {additionalHandler.addExternalHandler(newHandler,type);} else {throw new IllegalArgumentException("Unknown type=" + type);}}}  }
class C{  private static boolean areCompatible(Object[] objs,Class[] types){  if (objs.length != types.length)   return false;  for (int i=0, size=objs.length; i < size; i++) {    Object o=objs[i];    if (o != null && !types[i].isInstance(o))     return false;  }  return true;}  }
class C{  public void renderParticles(GraphicsContext g,Point2D viewportOrigin){  particles.forEach(null);}  }
class C{  protected void addReferenceProperties(DeserializationConfig config,BasicBeanDescription beanDesc,BeanDeserializerBuilder builder) throws JsonMappingException {  Map<String,AnnotatedMember> refs=beanDesc.findBackReferenceProperties();  if (refs != null) {    for (    Map.Entry<String,AnnotatedMember> en : refs.entrySet()) {      String name=en.getKey();      AnnotatedMember m=en.getValue();      if (m instanceof AnnotatedMethod) {        builder.addBackReferenceProperty(name,constructSettableProperty(config,beanDesc,m.getName(),(AnnotatedMethod)m));      } else {        builder.addBackReferenceProperty(name,constructSettableProperty(config,beanDesc,m.getName(),(AnnotatedField)m));      }    }  }}  }
class C{  public static void show(Activity activity,@Nullable Feed feed,boolean finishAfterClose){  AddNewFeedDialogFragment dialogFragment=new AddNewFeedDialogFragment();  Bundle bundle=new Bundle();  bundle.putBoolean(ARG_FINISH_AFTER_CLOSE,finishAfterClose);  if (feed != null) {    bundle.putString(ARG_URL,feed.getUrl());    if (feed.getId() >= 0) {      bundle.putLong(ARG_FEED_ID,feed.getId());      bundle.putLong(ARG_FOLDER_ID,feed.getFolderId());    }  }  dialogFragment.setArguments(bundle);  dialogFragment.show(activity.getFragmentManager(),"newfeed");}  }
class C{  public void applicationDidEnterBackground(){}  }
class C{  public Object clone() throws CloneNotSupportedException {  AxesWalker clone=(AxesWalker)super.clone();  return clone;}  }
class C{  @Override public Object execute(ExecutionEvent event) throws ExecutionException {  IWorkbenchWindow window=HandlerUtil.getActiveWorkbenchWindow(event);  IWorkbenchPage activePage=window.getActivePage();  ISelection selection=HandlerUtil.getActiveSite(event).getSelectionProvider().getSelection();  if (selection instanceof TextSelection) {    TextSelection textSelection=(TextSelection)selection;    IEditorPart editor=activePage.getActiveEditor();    IProject project=DroidsafePluginUtilities.getProcessedDroidsafeProjectForEditor(editor);    if (project != null) {      JsonElement projectCallHierarchy=CallHierarchy.getProjectCalleeHierarchy(project);      if (projectCallHierarchy != null) {        ITypeRoot typeRoot=JavaUI.getEditorInputTypeRoot(editor.getEditorInput());        try {          int offset=textSelection.getOffset();          IJavaElement[] elements=typeRoot.codeSelect(offset,textSelection.getLength());          if (elements != null && elements.length == 1 && elements[0] instanceof IMethod) {            IJavaElement enclosingElement=typeRoot.getElementAt(offset);            IMethod method=(IMethod)elements[0];            int line=textSelection.getStartLine() + 1;            String className=getEnclosingClassName(method);            String pkgName=typeRoot.getParent().getElementName();            String srcClassName=pkgName + "." + typeRoot.getElementName().replace(".java","");            boolean showCallees=method.isResolved() && enclosingElement instanceof IMethod;            if (showCallees) {              Collection<JsonElement> targets=CalleeHierarchy.findCallTargets(projectCallHierarchy,method,className,srcClassName,line);              if (targets.isEmpty())               CallHierarchyViewPart.openView(null); else {                CalleeHierarchy cg=new CalleeHierarchy(project,targets,method);                CallHierarchyViewPart.openView(cg);              }            } else {              Map<String,Map<String,Set<JsonElement>>> callerMap=CallerHierarchy.getCallerMap(project);              if (callerMap != null && !callerMap.isEmpty()) {                SourceMethodNode methodNode=CallerHierarchy.findSourceMethodNodeWithCallers(callerMap,method,className,srcClassName,line);                if (methodNode == null)                 CallHierarchyViewPart.openView(null); else {                  CallerHierarchy cg=new CallerHierarchy(project,methodNode,method);                  CallHierarchyViewPart.openView(cg);                }              }            }          }        } catch (        JavaModelException e) {          e.printStackTrace();        }      }    }  }  return null;}  }
class C{  private void updateActiveProviders(StorageSystemViewObject scannedStorageSystemViewObj,StorageSystem storageSystemInDb,Map<URI,List<String>> providersToUpdate) throws IOException {  Set<String> allProviders=scannedStorageSystemViewObj.getProviders();  if (allProviders == null || allProviders.isEmpty()) {    _logger.info("Scanned system {} does not have any storage provider",scannedStorageSystemViewObj.SERIAL_NUMBER);    injectReachableStatusInSystem(storageSystemInDb,null,NullColumnValueGetter.getNullURI(),false);    return;  } else   if (!allProviders.contains(storageSystemInDb.getActiveProviderURI().toString())) {    _logger.info("Existing active provider{} of StorageSystem {} is not active now",storageSystemInDb.getActiveProviderURI(),storageSystemInDb.getNativeGuid());    Iterator<String> iterator=allProviders.iterator();    if (iterator.hasNext()) {      String newProviderURI=iterator.next();      injectReachableStatusInSystem(storageSystemInDb,allProviders,URI.create(newProviderURI),true);      StorageProvider newProvider=_dbClient.queryObject(StorageProvider.class,URI.create(newProviderURI));      setActiveProviderDetailsInSystem(newProvider,storageSystemInDb,providersToUpdate);    } else {      injectReachableStatusInSystem(storageSystemInDb,null,NullColumnValueGetter.getNullURI(),false);    }  } else {    StringSet dbSystemAllProviders=storageSystemInDb.getProviders();    if (null != dbSystemAllProviders && !dbSystemAllProviders.isEmpty()) {      storageSystemInDb.getProviders().addAll(allProviders);    } else {      StringSet scannedProviders=new StringSet(allProviders);      storageSystemInDb.setProviders(scannedProviders);    }    _logger.info("Added passive provider information in StorageSyetem instance {}",storageSystemInDb.getId());    for (    String providerStr : allProviders) {      StorageProvider provider=_dbClient.queryObject(StorageProvider.class,URI.create(providerStr));      updateStorageSystemsInProvider(provider,providersToUpdate,storageSystemInDb);      if (provider.getId().equals(storageSystemInDb.getActiveProviderURI())) {        if (!StringUtils.equals(provider.getIPAddress(),storageSystemInDb.getSmisProviderIP())) {          storageSystemInDb.setSmisProviderIP(provider.getIPAddress());        }        if (provider.getPortNumber() != storageSystemInDb.getSmisPortNumber()) {          storageSystemInDb.setSmisPortNumber(provider.getPortNumber());        }        if (!StringUtils.equals(provider.getUserName(),storageSystemInDb.getSmisUserName())) {          storageSystemInDb.setSmisUserName(provider.getUserName());        }        if (!StringUtils.equals(provider.getPassword(),storageSystemInDb.getSmisPassword())) {          storageSystemInDb.setSmisPassword(provider.getPassword());        }        if (provider.getUseSSL() != storageSystemInDb.getSmisUseSSL()) {          storageSystemInDb.setSmisUseSSL(provider.getUseSSL());        }      }    }  }}  }
class C{  @Override protected void close(){  if (client != null)   client.close(getName());}  }
class C{  public static boolean isInvalidUserPassError(Exception e){  return isErrorCode(e,1017);}  }
class C{  protected String defaultClassifierString(){  return "weka.classifiers.rules.ZeroR";}  }
class C{  private VectorValueSource makeMV(List<ValueSource> sources,List<ValueSource> orig) throws SyntaxError {  ValueSource vs1=sources.get(0);  ValueSource vs2=sources.get(1);  if (vs1 instanceof MultiValueSource || vs2 instanceof MultiValueSource) {    throw new SyntaxError("geodist - invalid parameters:" + orig);  }  return new VectorValueSource(sources);}  }
class C{  @Override public boolean imageHasBeenScaled(){  return true;}  }
class C{  public Matrix3f m22(float m22){  this.m22=m22;  return this;}  }
class C{  private Cursor makeSubjectCursor(CharSequence stream,CharSequence subject) throws SQLException {  if (subject == null) {    subject="";  }  if (stream == null) {    stream="";  }  AndroidDatabaseResults results=(AndroidDatabaseResults)app.getDao(Message.class).queryRaw("SELECT DISTINCT " + Message.SUBJECT_FIELD + ", 1 AS _id FROM messages JOIN streams ON streams."+ Stream.ID_FIELD+ " = messages."+ Message.STREAM_FIELD+ " WHERE "+ Message.SUBJECT_FIELD+ " LIKE ? ESCAPE '\\' AND "+ Stream.NAME_FIELD+ " = ? ORDER BY "+ Message.SUBJECT_FIELD+ " COLLATE NOCASE",DatabaseHelper.likeEscape(subject.toString()) + "%",stream.toString()).closeableIterator().getRawResults();  return results.getRawCursor();}  }
class C{  public boolean initSenSegmenter(String modelDir){  System.out.println("Initilize JVnSenSegmenter ...");  vnSenSegmenter=new JVnSenSegmenter();  if (!vnSenSegmenter.init(modelDir)) {    System.out.println("Error while initilizing JVnSenSegmenter");    vnSenSegmenter=null;    return false;  }  return true;}  }
class C{  @Override public void componentOpened(){  loadGui();}  }
class C{  public DocumentCharacterIterator(Document document,int first) throws BadLocationException {  this(document,first,document.getLength());}  }
class C{  private static void computeSupport(Plane plane,List<Vector3> points,double minimumDistance){  supportingPoints=new LinkedList<>();  notSupportingPoints=new LinkedList<>();  for (  Vector3 point : points) {    double distanceToPlane=plane.distanceTo(point);    if (FastMath.abs(distanceToPlane) <= minimumDistance) {      supportingPoints.addLast(point);    } else {      notSupportingPoints.add(point);    }  }}  }
class C{  private void removeHighlights(){  if (textArea != null) {    RSyntaxTextAreaHighlighter h=(RSyntaxTextAreaHighlighter)textArea.getHighlighter();    for (int i=0; i < tags.size(); i++) {      h.removeMarkOccurrencesHighlight(tags.get(i));    }  }  tags.clear();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:04.234 -0400",hash_original_method="96E0AC5804194D530DB7DCB9495790C3",hash_generated_method="604E4270A624CA2F8559E733C052C8C5") protected PrivateKey engineGeneratePrivate(KeySpec keySpec) throws InvalidKeySpecException {  if (keySpec != null) {    if (keySpec instanceof DSAPrivateKeySpec) {      return new DSAPrivateKeyImpl((DSAPrivateKeySpec)keySpec);    }    if (keySpec instanceof PKCS8EncodedKeySpec) {      return new DSAPrivateKeyImpl((PKCS8EncodedKeySpec)keySpec);    }  }  throw new InvalidKeySpecException("'keySpec' is neither DSAPrivateKeySpec nor PKCS8EncodedKeySpec");}  }
class C{  static final void quickSelectAndRebuild(final Memory mem,final int preambleLongs,final int lgNomLongs,final int lgArrLongs,int curCount){  int arrLongs=1 << lgArrLongs;  long[] tmpArr=new long[arrLongs];  int preBytes=preambleLongs << 3;  mem.getLongArray(preBytes,tmpArr,0,arrLongs);  int pivot=(1 << lgNomLongs) + 1;  long newThetaLong=selectExcludingZeros(tmpArr,curCount,pivot);  mem.putLong(THETA_LONG,newThetaLong);  long[] tgtArr=new long[arrLongs];  int newCurCount=HashOperations.hashArrayInsert(tmpArr,tgtArr,lgArrLongs,newThetaLong);  mem.putInt(RETAINED_ENTRIES_INT,newCurCount);  mem.putLongArray(preBytes,tgtArr,0,arrLongs);}  }
class C{  private void drawQuantity(final Graphics2D g2d,final int x,final int y,final int width,int height){  if (isContained()) {    DrawingHelper.drawAlignedSprite(g2d,quantitySprite,HorizontalAlignment.RIGHT,VerticalAlignment.TOP,x,y,width,height);  } else {    DrawingHelper.drawAlignedSprite(g2d,quantitySprite,HorizontalAlignment.CENTER,VerticalAlignment.TOP,x,y,width,height);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return ((Agent)stack.pop()).getSubCategory();}  }
class C{  public final int indexOf(java.lang.CharSequence csq){  return indexOf(csq,0);}  }
class C{  public boolean writeNonDefaultDataObject(Object object,String fileName){  try {    ISerializer serializer=null;    try {      serializer=serializerQueue.take();    } catch (    InterruptedException e1) {      Thread.interrupted();    }    if (null == serializer) {      log.error("Serializer instance could not be obtained.");      return false;    }    Path path=writingFolderPath.resolve(fileName);    if (Files.exists(path)) {      try {        Files.delete(path);      } catch (      IOException e) {        log.error("Exception thrown trying to delete file from disk",e);        return false;      }    }    try (OutputStream outputStream=Files.newOutputStream(path,StandardOpenOption.CREATE_NEW)){      Output output=new Output(outputStream);      serializer.serialize(object,output);    } catch (    SerializationException e) {      log.error("Serialization for the object " + object + " failed. Data will be skipped.",e);      return false;    } finally {      serializerQueue.add(serializer);    }    return true;  } catch (  Throwable throwable) {    log.error("Exception occurred while attempting to write data to disk",throwable);    return false;  }}  }
class C{  public JNumberDialog(java.awt.Frame parent,boolean modal){  super(parent,modal);  init();}  }
class C{  public BigInteger abs(){  return (signum >= 0 ? this : this.negate());}  }
class C{  public void testCopyToNonExistingPath(){  String random=UUID.randomUUID().toString();  assertFalse("Subdirectory " + random + " already exists",this.fileHandler.isDirectory("target/" + random));  this.fileHandler.createFile("target/random.txt");  this.fileHandler.copyFile("target/random.txt","target/" + random + "/random.txt",new FilterChain(),"UTF-8");  assertTrue("Subdirectory " + random + " does not exist after copy",this.fileHandler.isDirectory("target/" + random));  assertTrue("File in subdirectory " + random + " missing after copy",this.fileHandler.exists("target/" + random + "/random.txt"));}  }
class C{  public void paintComboBoxBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  if (context.getComponent().getComponentOrientation().isLeftToRight()) {    paintBackground(context,g,x,y,w,h,null);  } else {    AffineTransform transform=new AffineTransform();    transform.translate(x,y);    transform.scale(-1,1);    transform.translate(-w,0);    paintBackground(context,g,0,0,w,h,transform);  }}  }
class C{  public void resetNewSearchRequired(){  isNewSearchRequired=false;}  }
class C{  @Timed @ExceptionMetered @GET @Path("{clientId}") public Response findClientById(@Auth AutomationClient automationClient,@PathParam("clientId") LongParam clientId){  logger.info("Automation ({}) - Looking up an ID {}",automationClient.getName(),clientId);  Client client=clientDAO.getClientById(clientId.get()).orElseThrow(null);  ImmutableList<Group> groups=ImmutableList.copyOf(aclDAO.getGroupsFor(client));  return Response.ok().entity(ClientDetailResponse.fromClient(client,groups,ImmutableList.of())).build();}  }
class C{  public void onStartRandomClicked1(final View view){  this.startInterpolatedAnim(1f);}  }
class C{  public CountryServiceImpl(final GenericDAO<Country,Long> genericDao){  super(genericDao);}  }
class C{  public static Builder newBuilderForMediaId(String mediaId){  return new Builder(mediaId);}  }
class C{  public void writeCommentForActiveTask(ReviewComment comment){  ITask activeTask=TasksUi.getTaskActivityManager().getActiveTask();  if (activeTask == null) {    return;  }  if (!AppraiseTaskMapper.APPRAISE_REVIEW_TASK_KIND.equals(activeTask.getTaskKind())) {    return;  }  TaskRepository taskRepository=TasksUi.getRepositoryManager().getRepository(AppraiseConnectorPlugin.CONNECTOR_KIND,activeTask.getRepositoryUrl());  try {    AppraisePluginReviewClient client=new AppraisePluginReviewClient(taskRepository);    client.writeComment(activeTask.getTaskId(),comment);  } catch (  GitClientException e) {    AppraiseUiPlugin.logError("Error writing comment for " + activeTask.getTaskId(),e);  }}  }
class C{  @Override public boolean markSupported(){  return true;}  }
class C{  public static InteriorIntersectionFinder createAnyIntersectionFinder(LineIntersector li){  return new InteriorIntersectionFinder(li);}  }
class C{  public static int[][] rotateMatrixBy90DegreesRight(int[][] a){  int rows=a.length, columns=a[0].length;  int[][] rotatedMatrix=new int[columns][rows];  for (int i=0; --rows >= 0 && i < a.length; i++) {    for (int j=0; j < a[0].length; j++) {      rotatedMatrix[j][rows]=a[i][j];    }  }  return rotatedMatrix;}  }
class C{  private String fixCaseCompositedLanguages(String language){  String[] parts=language.split("_");  if (parts.length == 1) {    language=parts[0];  } else {    language=parts[0] + "_" + parts[1].toUpperCase();  }  return language;}  }
class C{  public boolean calculateTaxTotal(){  log.fine("");  DB.executeUpdateEx("DELETE C_InvoiceTax WHERE C_Invoice_ID=" + getC_Invoice_ID(),get_TrxName());  m_taxes=null;  BigDecimal totalLines=Env.ZERO;  ArrayList<Integer> taxList=new ArrayList<Integer>();  MInvoiceLine[] lines=getLines(false);  for (int i=0; i < lines.length; i++) {    MInvoiceLine line=lines[i];    if (!taxList.contains(line.getC_Tax_ID())) {      MInvoiceTax iTax=MInvoiceTax.get(line,getPrecision(),false,get_TrxName());      if (iTax != null) {        iTax.setIsTaxIncluded(isTaxIncluded());        if (!iTax.calculateTaxFromLines())         return false;        iTax.saveEx();        taxList.add(line.getC_Tax_ID());      }    }    totalLines=totalLines.add(line.getLineNetAmt());  }  BigDecimal grandTotal=totalLines;  MInvoiceTax[] taxes=getTaxes(true);  for (int i=0; i < taxes.length; i++) {    MInvoiceTax iTax=taxes[i];    MTax tax=iTax.getTax();    if (tax.isSummary()) {      MTax[] cTaxes=tax.getChildTaxes(false);      for (int j=0; j < cTaxes.length; j++) {        MTax cTax=cTaxes[j];        BigDecimal taxAmt=cTax.calculateTax(iTax.getTaxBaseAmt(),isTaxIncluded(),getPrecision());        MInvoiceTax newITax=new MInvoiceTax(getCtx(),0,get_TrxName());        newITax.setClientOrg(this);        newITax.setC_Invoice_ID(getC_Invoice_ID());        newITax.setC_Tax_ID(cTax.getC_Tax_ID());        newITax.setPrecision(getPrecision());        newITax.setIsTaxIncluded(isTaxIncluded());        newITax.setTaxBaseAmt(iTax.getTaxBaseAmt());        newITax.setTaxAmt(taxAmt);        newITax.saveEx(get_TrxName());        if (!isTaxIncluded())         grandTotal=grandTotal.add(taxAmt);      }      iTax.deleteEx(true,get_TrxName());    } else {      if (!isTaxIncluded())       grandTotal=grandTotal.add(iTax.getTaxAmt());    }  }  setTotalLines(totalLines);  setGrandTotal(grandTotal);  return true;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    double east=0, west=0, north=0, south=0;    if (inputFile.toLowerCase().endsWith(".dep")) {      WhiteboxRaster input=new WhiteboxRaster(inputFile,"r");      double gridResX=input.getCellSizeX();      double gridResY=input.getCellSizeY();      east=input.getEast();      west=input.getWest();      north=input.getNorth();      south=input.getSouth();      input.close();    } else     if (inputFile.toLowerCase().endsWith(".shp")) {      ShapeFile input=new ShapeFile(inputFile);      east=input.getxMax();      west=input.getxMin();      north=input.getyMax();      south=input.getyMin();    } else {      showFeedback("There was a problem reading the input file.");      return;    }    DBFField fields[]=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    ShapeFile output=new ShapeFile(outputFile,ShapeType.POLYGON,fields);    if (inputFile.toLowerCase().endsWith(".shp")) {      output.setProjectionStringFromOtherShapefile(new ShapeFile(inputFile));    }    int[] parts={0};    PointsList points=new PointsList();    points.addPoint(west,north);    points.addPoint(east,north);    points.addPoint(east,south);    points.addPoint(west,south);    points.addPoint(west,north);    Polygon poly=new Polygon(parts,points.getPointsArray());    Object[] rowData=new Object[1];    rowData[0]=new Double(1);    output.addRecord(poly,rowData);    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void testTimedPollLast() throws InterruptedException {  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(SIZE - i - 1,q.pollLast(SHORT_DELAY_MS,MILLISECONDS));  }  assertNull(q.pollLast(SHORT_DELAY_MS,MILLISECONDS));}  }
class C{  public int size(){  expungeStaleEntries();  return reverseMap.size();}  }
class C{  public void testCompleteExceptionally(){  testCompleteExceptionally(mainPool());}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String referenceHistoFile=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  referenceHistoFile=args[1];  outputHeader=args[2];  if ((inputHeader == null) || (outputHeader == null) || (referenceHistoFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    float progress=0;    int numCells=0;    int i=0;    WhiteboxRasterInfo inputFile=new WhiteboxRasterInfo(inputHeader);    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    int numBins=50000;    double minValue=inputFile.getMinimumValue();    double maxValue=inputFile.getMaximumValue();    double binSize=(maxValue - minValue) / numBins;    long[] histogram=new long[numBins];    int binNum;    int numBinsLessOne=numBins - 1;    double[] data;    updateProgress("Loop 1 of 3: ",0);    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          numCells++;          binNum=(int)((z - minValue) / binSize);          if (binNum > numBinsLessOne) {            binNum=numBinsLessOne;          }          histogram[binNum]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 3: ",(int)progress);    }    updateProgress("Loop 2 of 3: ",0);    double[] cdf=new double[numBins];    cdf[0]=histogram[0];    for (i=1; i < numBins; i++) {      cdf[i]=cdf[i - 1] + histogram[i];    }    histogram=null;    for (i=0; i < numBins; i++) {      cdf[i]=cdf[i] / numCells;    }    String line;    String[] str;    String[] delimiters={"\t"," ",",",":",";"};    int delimiterNum=0;    File file=new File(referenceHistoFile);    RandomAccessFile raf=null;    raf=new RandomAccessFile(file,"r");    int numLines=0;    while ((line=raf.readLine()) != null) {      if (!line.trim().equals("")) {        numLines++;      }    }    double[][] referenceCDF=new double[numLines][2];    raf.seek(0);    i=0;    while ((line=raf.readLine()) != null) {      str=line.split(delimiters[delimiterNum]);      while (str.length < 2) {        delimiterNum++;        if (delimiterNum == delimiters.length) {          showFeedback("the histogram file does not appear to be properly formated.\n" + "It must be delimited using a tab, space, comma, colon, or semicolon.");          return;        }        str=line.split(delimiters[delimiterNum]);      }      referenceCDF[i][0]=Double.parseDouble(str[0]);      referenceCDF[i][1]=Double.parseDouble(str[1]);      i++;    }    raf.close();    for (i=1; i < numLines; i++) {      referenceCDF[i][1]+=referenceCDF[i - 1][1];    }    double totalFrequency=referenceCDF[numLines - 1][1];    for (i=0; i < numLines; i++) {      referenceCDF[i][1]=referenceCDF[i][1] / totalFrequency;    }    int[] startingVals=new int[11];    double pVal=0;    for (i=0; i < numLines; i++) {      pVal=referenceCDF[i][1];      if (pVal < 0.1) {        startingVals[1]=i;      }      if (pVal < 0.2) {        startingVals[2]=i;      }      if (pVal < 0.3) {        startingVals[3]=i;      }      if (pVal < 0.4) {        startingVals[4]=i;      }      if (pVal < 0.5) {        startingVals[5]=i;      }      if (pVal < 0.6) {        startingVals[6]=i;      }      if (pVal < 0.7) {        startingVals[7]=i;      }      if (pVal < 0.8) {        startingVals[8]=i;      }      if (pVal < 0.9) {        startingVals[9]=i;      }      if (pVal <= 1) {        startingVals[10]=i;      }    }    updateProgress("Loop 3 of 3: ",0);    int j=0;    double xVal=0;    double x1, x2, p1, p2;    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          binNum=(int)((z - minValue) / binSize);          if (binNum > numBinsLessOne) {            binNum=numBinsLessOne;          }          pVal=cdf[binNum];          j=(int)(Math.floor(pVal * 10));          for (i=startingVals[j]; i < numLines; i++) {            if (referenceCDF[i][1] > pVal) {              if (i > 0) {                x1=referenceCDF[i - 1][0];                x2=referenceCDF[i][0];                p1=referenceCDF[i - 1][1];                p2=referenceCDF[i][1];                if (p1 != p2) {                  xVal=x1 + ((x2 - x1) * ((pVal - p1) / (p2 - p1)));                } else {                  xVal=x1;                }              } else {                xVal=referenceCDF[i][0];              }              break;            }          }          outputFile.setValue(row,col,xVal);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 3 of 3: ",(int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void reclaim(AttributeSet a){  if (SwingUtilities.isEventDispatchThread()) {    attributesPool.size();  }}  }
class C{  public void createLoop(Vector2[] vertices){  Vec2[] v=new Vec2[vertices.length];  for (int i=0; i < vertices.length; i++) {    v[i]=new Vec2(vertices[i].x,vertices[i].y);  }  shape.createLoop(v,v.length);  isLooped=true;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.431 -0500",hash_original_method="EBA76BEAE03DA80AC45DCE1E9705412D",hash_generated_method="A3AD8FF6792AD963A43CF5A198CECCD1") public SIPTransaction findCancelTransaction(SIPRequest cancelRequest,boolean isServer){  if (stackLogger.isLoggingEnabled()) {    stackLogger.logDebug("findCancelTransaction request= \n" + cancelRequest + "\nfindCancelRequest isServer="+ isServer);  }  if (isServer) {    Iterator<SIPServerTransaction> li=this.serverTransactionTable.values().iterator();    while (li.hasNext()) {      SIPTransaction transaction=(SIPTransaction)li.next();      SIPServerTransaction sipServerTransaction=(SIPServerTransaction)transaction;      if (sipServerTransaction.doesCancelMatchTransaction(cancelRequest))       return sipServerTransaction;    }  } else {    Iterator<SIPClientTransaction> li=this.clientTransactionTable.values().iterator();    while (li.hasNext()) {      SIPTransaction transaction=(SIPTransaction)li.next();      SIPClientTransaction sipClientTransaction=(SIPClientTransaction)transaction;      if (sipClientTransaction.doesCancelMatchTransaction(cancelRequest))       return sipClientTransaction;    }  }  if (stackLogger.isLoggingEnabled())   stackLogger.logDebug("Could not find transaction for cancel request");  return null;}  }
class C{  protected AbstractHashedMap(int initialCapacity,float loadFactor){  super();  if (initialCapacity < 1) {    throw new IllegalArgumentException("Initial capacity must be greater than 0");  }  if (loadFactor <= 0.0f || Float.isNaN(loadFactor)) {    throw new IllegalArgumentException("Load factor must be greater than 0");  }  this.loadFactor=loadFactor;  initialCapacity=calculateNewCapacity(initialCapacity);  this.threshold=calculateThreshold(initialCapacity,loadFactor);  this.data=new HashEntry[initialCapacity];  init();}  }
class C{  @Override public boolean matches(SolrDocument doc){  Object v=doc.getFieldValue(this.key.getSolrFieldName());  if (v == null)   return false;  return this.value.equals(AbstractSolrConnector.CATCHALL_TERM) || v.toString().matches(this.value);}  }
class C{  private static int streamtoword(byte data[],int offp[]){  int i;  int word=0;  int off=offp[0];  for (i=0; i < 4; i++) {    word=(word << 8) | (data[off] & 0xff);    off=(off + 1) % data.length;  }  offp[0]=off;  return word;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  private XSDatatype loadXSDatatypeFromSimpleType(Element xsdSimpleType){  Element xsdRestriction=xsdSimpleType.element(XSD_RESTRICTION);  if (xsdRestriction != null) {    String base=xsdRestriction.attributeValue("base");    if (base != null) {      XSDatatype baseType=getTypeByName(base);      if (baseType == null) {        onSchemaError("Invalid base type: " + base + " when trying to build restriction: "+ xsdRestriction);      } else {        return deriveSimpleType(baseType,xsdRestriction);      }    } else {      Element xsdSubType=xsdSimpleType.element(XSD_SIMPLETYPE);      if (xsdSubType == null) {        String msg="The simpleType element: " + xsdSimpleType + " must contain a base attribute or simpleType"+ " element";        onSchemaError(msg);      } else {        return loadXSDatatypeFromSimpleType(xsdSubType);      }    }  } else {    onSchemaError("No <restriction>. Could not create XSDatatype for" + " simpleType: " + xsdSimpleType);  }  return null;}  }
class C{  public ModifiedOWLQN(double lambda){  setLambda(lambda);}  }
class C{  public void printTable(HardcopyWriter w,int colWidth[]){  int[] columnSize=new int[4];  int charPerLine=w.getCharactersPerLine();  int tableLineWidth=0;  int totalColWidth=0;  for (int j=0; j < 4; j++) {    totalColWidth+=colWidth[j];  }  float ratio=((float)charPerLine) / ((float)totalColWidth);  for (int j=0; j < 4; j++) {    columnSize[j]=((int)(colWidth[j] * ratio)) - 1;    tableLineWidth+=(columnSize[j] + 1);  }  w.write(w.getCurrentLineNumber(),0,w.getCurrentLineNumber(),tableLineWidth);  String[] columnStrings=new String[4];  for (int i=0; i < 4; i++) {    columnStrings[i]=this.getColumnName(i);  }  w.setFontStyle(Font.BOLD);  printColumns(w,columnStrings,columnSize);  w.setFontStyle(0);  w.write(w.getCurrentLineNumber(),0,w.getCurrentLineNumber(),tableLineWidth);  String[] spaces=new String[4];  for (int k=0; k < 4; k++) {    spaces[k]="";    for (int i=0; i < columnSize[k]; i++) {      spaces[k]=spaces[k] + " ";    }  }  for (int i=0; i < this.getRowCount(); i++) {    for (int j=0; j < 4; j++) {      if (this.getValueAt(i,j) == null) {        columnStrings[j]=spaces[j];      } else {        columnStrings[j]=(String)this.getValueAt(i,j);      }    }    printColumns(w,columnStrings,columnSize);    w.write(w.getCurrentLineNumber(),0,w.getCurrentLineNumber(),tableLineWidth);  }  w.close();}  }
class C{  void add(Permission p){  permissions.addElement(p);}  }
class C{  @Override public void endDocument() throws IOException {  if (writer instanceof FastStringWriter) {    FastStringWriter fastStringWriter=(FastStringWriter)writer;    String result=fastStringWriter.getBuffer().toString();    fastStringWriter.reset();    writer=origWriter;    writer.write(result);  }  writer.flush();}  }
class C{  public final void mul(Matrix4f m1){  float m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33;  m00=this.m00 * m1.m00 + this.m01 * m1.m10 + this.m02 * m1.m20 + this.m03 * m1.m30;  m01=this.m00 * m1.m01 + this.m01 * m1.m11 + this.m02 * m1.m21 + this.m03 * m1.m31;  m02=this.m00 * m1.m02 + this.m01 * m1.m12 + this.m02 * m1.m22 + this.m03 * m1.m32;  m03=this.m00 * m1.m03 + this.m01 * m1.m13 + this.m02 * m1.m23 + this.m03 * m1.m33;  m10=this.m10 * m1.m00 + this.m11 * m1.m10 + this.m12 * m1.m20 + this.m13 * m1.m30;  m11=this.m10 * m1.m01 + this.m11 * m1.m11 + this.m12 * m1.m21 + this.m13 * m1.m31;  m12=this.m10 * m1.m02 + this.m11 * m1.m12 + this.m12 * m1.m22 + this.m13 * m1.m32;  m13=this.m10 * m1.m03 + this.m11 * m1.m13 + this.m12 * m1.m23 + this.m13 * m1.m33;  m20=this.m20 * m1.m00 + this.m21 * m1.m10 + this.m22 * m1.m20 + this.m23 * m1.m30;  m21=this.m20 * m1.m01 + this.m21 * m1.m11 + this.m22 * m1.m21 + this.m23 * m1.m31;  m22=this.m20 * m1.m02 + this.m21 * m1.m12 + this.m22 * m1.m22 + this.m23 * m1.m32;  m23=this.m20 * m1.m03 + this.m21 * m1.m13 + this.m22 * m1.m23 + this.m23 * m1.m33;  m30=this.m30 * m1.m00 + this.m31 * m1.m10 + this.m32 * m1.m20 + this.m33 * m1.m30;  m31=this.m30 * m1.m01 + this.m31 * m1.m11 + this.m32 * m1.m21 + this.m33 * m1.m31;  m32=this.m30 * m1.m02 + this.m31 * m1.m12 + this.m32 * m1.m22 + this.m33 * m1.m32;  m33=this.m30 * m1.m03 + this.m31 * m1.m13 + this.m32 * m1.m23 + this.m33 * m1.m33;  this.m00=m00;  this.m01=m01;  this.m02=m02;  this.m03=m03;  this.m10=m10;  this.m11=m11;  this.m12=m12;  this.m13=m13;  this.m20=m20;  this.m21=m21;  this.m22=m22;  this.m23=m23;  this.m30=m30;  this.m31=m31;  this.m32=m32;  this.m33=m33;}  }
class C{  @Override public void clear(){  size=0;  for (int i=0; i < elementData.length; i++) {    elementData[i]=null;  }  modCount++;}  }
class C{  public void writeStyleAttr(String value) throws IOException {  writeAttr(STYLE,value);}  }
class C{  protected final void addState(State state){  mSmHandler.addState(state,null);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static void checkParameterizationMethod(FrameworkMethod frameworkMethod) throws Exception {  final Method method=frameworkMethod.getMethod();  if (method.getParameterTypes().length != 0) {    throw new Exception(complainingThat(method,"must take no arguments"));  }  final int modifiers=frameworkMethod.getMethod().getModifiers();  if (!Modifier.isPublic(modifiers)) {    throw new Exception(complainingThat(method,"must be public"));  }  if (!Modifier.isStatic(modifiers)) {    throw new Exception(complainingThat(method,"must be static"));  }  final Type genericRet=method.getGenericReturnType();  final String mustReturnCorrectly="must return Collection of " + Parameterization.class;  if (!(genericRet instanceof ParameterizedType)) {    throw new Exception(complainingThat(method,mustReturnCorrectly));  }  final ParameterizedType ret=(ParameterizedType)genericRet;  if (!(ret.getRawType() instanceof Class) && Collection.class.isAssignableFrom((Class)ret.getRawType())) {    throw new Exception(complainingThat(method,mustReturnCorrectly));  }  if (ret.getActualTypeArguments().length != 1) {    throw new Exception(complainingThat(method,mustReturnCorrectly + "; raw Collection is not allowed"));  }  if (!ret.getActualTypeArguments()[0].equals(Parameterization.class)) {    throw new Exception(complainingThat(method,mustReturnCorrectly));  }}  }
class C{  public boolean hasProperty(String name){  return this.properties.stream().filter(null).findFirst().isPresent();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:55.735 -0500",hash_original_method="969C0CF9A75C29D747322906DB447799",hash_generated_method="C13FD116C755D51CFFF3A380AAAFC6FE") public String encodeBody(){  return this.getLanguageTag();}  }
class C{  ByteString readByteString() throws IOException {  int firstByte=readByte();  boolean huffmanDecode=(firstByte & 0x80) == 0x80;  int length=readInt(firstByte,PREFIX_7_BITS);  if (huffmanDecode) {    return ByteString.of(Huffman.get().decode(source.readByteArray(length)));  } else {    return source.readByteString(length);  }}  }
class C{  public void error(String msg,Throwable t){  log(Log.ERROR,msg,t);}  }
class C{  public static SchedulingServiceSPI newService(TimeSourceService timeSourceService){  return new SchedulingServiceImpl(timeSourceService);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:12.821 -0500",hash_original_method="8F53D2F7ECBB6A0E31E2DA5BDF5FFE63",hash_generated_method="8B09722F8726EB6D38E4B56998AB0953") public RequestHandle(RequestQueue requestQueue,String url,WebAddress uri,String method,Map<String,String> headers,InputStream bodyProvider,int bodyLength,Request request,Connection conn){  this(requestQueue,url,uri,method,headers,bodyProvider,bodyLength,request);  mConnection=conn;}  }
class C{  public X509Certificate generate(PrivateKey key) throws CertificateEncodingException, IllegalStateException, NoSuchAlgorithmException, SignatureException, InvalidKeyException {  return generate(key,(SecureRandom)null);}  }
class C{  private static BufferedImage makeTestImage200x200(){  return new BufferedImageBuilder(200,200).build();}  }
class C{  private void doReleaseShared(){  for (; ; ) {    Node h=head;    if (h != null && h != tail) {      int ws=h.waitStatus;      if (ws == Node.SIGNAL) {        if (!compareAndSetWaitStatus(h,Node.SIGNAL,0))         continue;        unparkSuccessor(h);      } else       if (ws == 0 && !compareAndSetWaitStatus(h,0,Node.PROPAGATE))       continue;    }    if (h == head)     break;  }}  }
class C{  synchronized void yieldThread(ThreadQueue queue){  isCurrent=false;  setQueue(queue);  queue.add(this);  Trace.trace(Item.SCHED_DETAIL,"%s: yieldThread to %s %d",getName(),queue.getName(),queue.size());  model.wakeScheduler();  waitTillCurrent();  Trace.trace(Item.SCHED_DETAIL,"%s: resuming",getName());}  }
class C{  public void put(String key,String value){  setString(key,value);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:49.199 -0500",hash_original_method="24150471411E1AC7EC2E370FB5C4066A",hash_generated_method="BD6A75EB9045216B853F7E74C02E25EB") public void suggestDesiredDimensions(int minimumWidth,int minimumHeight){  try {    sGlobals.mService.setDimensionHints(minimumWidth,minimumHeight);  } catch (  RemoteException e) {  }}  }
class C{  public static AztecCode encode(byte[] data){  return encode(data,DEFAULT_EC_PERCENT,DEFAULT_AZTEC_LAYERS);}  }
class C{  public MlBayesImObs(BayesPm bayesPm,int initializationMethod) throws IllegalArgumentException {  if (bayesPm == null) {    throw new NullPointerException("BayesPm must not be null.");  }  this.bayesPm=new BayesPm(bayesPm);  Graph graph=bayesPm.getDag();  this.nodes=graph.getNodes().toArray(new Node[graph.getNodes().size()]);  initialize(null,initializationMethod);}  }
class C{  @Override public UpdateResponse deleteByQuery(String query) throws SolrServerException, IOException {  if (!this.writeEnabled)   return _dummyOKResponse;  UpdateResponse ur=null;  for (  SolrClient s : this.shards.server4read())   ur=s.deleteByQuery(query);  return ur;}  }
class C{  public TermsLookupQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  public ShellMinimumSizeEnforcer(final Shell shell,final int minimumWidth,final int minimumHeight){  this.shell=shell;  this.minimumWidth=minimumWidth;  this.minimumHeight=minimumHeight;  currentLocation=shell.getLocation();  if ((FORCE_LEGACY_BEHAVIOR || !attemptSetMinimumSize()) && !WindowSystem.isCurrentWindowSystem(WindowSystem.X_WINDOW_SYSTEM)) {    final MinSizeListener listener=new MinSizeListener();    shell.addControlListener(listener);  }}  }
class C{  public void preLoadImages(String[] urls){  int len=urls.length;  for (int i=0; i < len; i++) {    ImageLoadRequest request=new ImageLoadRequest(urls[i]);    final ImageTask imageTask=createImageTask(request);    imageTask.setIsPreLoad();    addImageTask(imageTask,null);  }}  }
class C{  public static List<AppEngineArtifactDeploymentSource> createArtifactDeploymentSources(@NotNull final Project project){  List<AppEngineArtifactDeploymentSource> sources=Lists.newArrayList();  AppEngineProjectService projectService=AppEngineProjectService.getInstance();  AppEngineAssetProvider assetProvider=AppEngineAssetProvider.getInstance();  for (  Module module : ModuleManager.getInstance(project).getModules()) {    XmlFile appEngineWebXml=assetProvider.loadAppEngineStandardWebXml(project,Collections.singletonList(module));    final AppEngineEnvironment environment=projectService.getModuleAppEngineEnvironment(appEngineWebXml);    boolean isFlexCompat=projectService.isFlexCompat(appEngineWebXml);    boolean isStandardModule=environment.isStandard() || isFlexCompat;    Collection<Artifact> artifacts=ArtifactUtil.getArtifactsContainingModuleOutput(module);    for (    Artifact artifact : artifacts) {      if ((isStandardModule && projectService.isAppEngineStandardArtifactType(artifact)) || (!isFlexCompat && environment.isFlexible() && projectService.isAppEngineFlexArtifactType(artifact))) {        sources.add(createArtifactDeploymentSource(project,artifact,environment));      }    }  }  return sources;}  }
class C{  CDFTsr16(int dataOffset,int dataStride,int transformOffset){  m=4;  N=16;  xoffset=dataOffset;  xstride=dataStride;  Xoffset=transformOffset;  n0=xoffset;  n1=n0 + xstride;  n2=n1 + xstride;  n3=n2 + xstride;  n4=n3 + xstride;  n5=n4 + xstride;  n6=n5 + xstride;  n7=n6 + xstride;  n8=n7 + xstride;  n9=n8 + xstride;  n10=n9 + xstride;  n11=n10 + xstride;  n12=n11 + xstride;  n13=n12 + xstride;  n14=n13 + xstride;  n15=n14 + xstride;  m0=Xoffset;  m1=m0 + 1;  m2=m1 + 1;  m3=m2 + 1;  m4=m3 + 1;  m5=m4 + 1;  m6=m5 + 1;  m7=m6 + 1;  m8=m7 + 1;  m9=m8 + 1;  m10=m9 + 1;  m11=m10 + 1;  m12=m11 + 1;  m13=m12 + 1;  m14=m13 + 1;  m15=m14 + 1;}  }
class C{  public void testSetScaleGreater(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=18;  int newScale=28;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.setScale(newScale);  assertTrue("incorrect scale",bNumber.scale() == newScale);  assertEquals("incorrect value",0,bNumber.compareTo(aNumber));}  }
class C{  private boolean shouldBeAutoAccepted() throws PayloadException {  return FileTransferUtils.getHttpFTInfo(getDialogPath().getInvite(),mRcsSettings) != null || mRcsSettings.isChatAutoAccepted();}  }
class C{  private void jsGetVersionInfo(final CallbackContext callback){  final Context context=cordova.getActivity();  final Map<String,Object> data=new HashMap<String,Object>();  data.put("currentWebVersion",pluginInternalPrefs.getCurrentReleaseVersionName());  data.put("readyToInstallWebVersion",pluginInternalPrefs.getReadyForInstallationReleaseVersionName());  data.put("previousWebVersion",pluginInternalPrefs.getPreviousReleaseVersionName());  data.put("appVersion",VersionHelper.applicationVersionName(context));  data.put("buildVersion",VersionHelper.applicationVersionCode(context));  final PluginResult pluginResult=PluginResultHelper.createPluginResult(null,data,null);  callback.sendPluginResult(pluginResult);}  }
class C{  public byte[] generateKek(PrivateKey privateKey) throws NoSuchAlgorithmException, InvalidKeySpecException, InvalidKeyException {  PublicKey vlPublic=this.getValueLinkPublicKey();  KeyAgreement ka=KeyAgreement.getInstance("DH");  ka.init(privateKey);  ka.doPhase(vlPublic,true);  byte[] secretKey=ka.generateSecret();  if (debug) {    Debug.logInfo("Secret Key : " + StringUtil.toHexString(secretKey) + " / "+ secretKey.length,module);  }  MessageDigest md=MessageDigest.getInstance("SHA1");  byte[] digest=md.digest(secretKey);  byte[] des2=getByteRange(digest,0,16);  byte[] first8=getByteRange(des2,0,8);  byte[] kek=copyBytes(des2,first8,0);  if (debug) {    Debug.logInfo("Generated KEK : " + StringUtil.toHexString(kek) + " / "+ kek.length,module);  }  return kek;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public ListBuffer<A> appendArray(A[] xs){  for (int i=0; i < xs.length; i++) {    append(xs[i]);  }  return this;}  }
class C{  public XmlHandler cleanAnnotatedClass(){  try {    return cleanAnnotatedClass(false,FilesManager.annotatedClasses());  } catch (  Exception e) {    JmapperLog.ERROR(e);  }  return this;}  }
class C{  public JCalValue(JsonValue... values){  this.values=Arrays.asList(values);}  }
class C{  private SynapseGroupDialog(final NetworkPanel np,NeuronGroup src,NeuronGroup tar){  networkPanel=np;  this.sourceNeuronGroup=src;  this.targetNeuronGroup=tar;  isCreationDialog=true;  init();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  public FractalTable(){}  }
class C{  public boolean isSmeAckNotRequested(){  return isSmeAckNotRequested(registeredDelivery);}  }
class C{  public SVGPath relativeQuadTo(double[] c1xy,double[] xy){  append(PATH_QUAD_TO_RELATIVE,c1xy[0],c1xy[1],xy[0],xy[1]);  return this;}  }
class C{  public String toString(){  return String.format("element %s",name);}  }
class C{  private double toHeight(IXMLElement elem,String str) throws IOException {  return toLength(elem,str,viewportStack.peek().heightPercentFactor);}  }
class C{  @Override public String stopwordsTipText(){  return "The file containing the regular expressions.";}  }
class C{  private void addName(String cname){  if (len == names.length) {    final int nl=(len << 1) + 1;    names=Arrays.copyOf(names,nl);    clazzes=Arrays.copyOf(clazzes,nl);  }  names[len++]=cname;}  }
class C{  protected void onEntranceTransitionStart(){}  }
class C{  public GWTOpenEditorActionGroup(IViewPart part){  site=part.getSite();  openAction=new GWTOpenAction(site);  openAction.setActionDefinitionId(IJavaEditorActionDefinitionIds.OPEN_EDITOR);  initialize(site.getSelectionProvider());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateattributeNS06.class,args);}  }
class C{  public int defineTemporaryVariable(org.codehaus.groovy.ast.Variable var,boolean store){  return defineTemporaryVariable(var.getName(),var.getType(),store);}  }
class C{  public static void writeOutSilent(Expression value,BytecodeContext bc,int mode) throws TransformerException {  Position start=value.getStart();  Position end=value.getEnd();  value.setStart(null);  value.setEnd(null);  value.writeOut(bc,mode);  value.setStart(start);  value.setEnd(end);}  }
class C{  private void addModuleListener(final INaviFunctionNode node){  final INaviModule module=node.getFunction().getModule();  if (!m_cachedModuleListeners.containsKey(module)) {    m_cachedModuleListeners.put(module,0);    module.addListener(m_internalModuleListener);  }  m_cachedModuleListeners.put(module,m_cachedModuleListeners.get(module) + 1);}  }
class C{  public void caretUpdate(CaretEvent e){  int dot=e.getDot();  int mark=e.getMark();  if (caretPos != dot) {    firePropertyChange(ACCESSIBLE_CARET_PROPERTY,new Integer(caretPos),new Integer(dot));    caretPos=dot;    try {      oldLocationOnScreen=getLocationOnScreen();    } catch (    IllegalComponentStateException iae) {    }  }  if (mark != dot) {    firePropertyChange(ACCESSIBLE_SELECTION_PROPERTY,null,getSelectedText());  }}  }
class C{  public static DetalleEstadoBean obtenerEstado(String idNotificacion,String idEntidad) throws ServicioWebExcepcion {  NotificacionesDatos bd=new NotificacionesDatos();  bd.setNotiId(idNotificacion);  try {    bd.load(idEntidad);  } catch (  Exception e) {    logger.debug("Se ha producido un error " + e);    return null;  }  ConectorNotificacion conector=NotificacionesConfig.getConector(bd.getSistemaId(),idEntidad);  if (conector == null)   return null;  DetalleEstadoBean estado=conector.obtenerEstado(bd,idEntidad);  return estado;}  }
class C{  public SubqueryExpression(EPStatementObjectModel model){  this.model=model;}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double z;  int i, c;  int d, x2, y2;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    byte numNeighbouringStreamCells=0;    double currentValue=0;    double currentOrder=0;    double maxStreamOrder=noData;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            currentOrder=1;            output.setValue(y,x,currentOrder);            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  currentValue=output.getValue(y,x);                  if (currentValue > currentOrder) {                    flag=false;                    break;                  }                  if (currentValue == currentOrder) {                    numNeighbouringStreamCells=0;                    for (d=0; d < 8; d++) {                      x2=x + dX[d];                      y2=y + dY[d];                      if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[d] && output.getValue(y2,x2) == currentOrder) {                        numNeighbouringStreamCells++;                      }                    }                    if (numNeighbouringStreamCells >= 2) {                      currentOrder++;                      if (currentOrder > maxStreamOrder) {                        maxStreamOrder=currentOrder;                      }                    } else {                      flag=false;                      break;                    }                  }                  if (currentValue < currentOrder) {                    output.setValue(y,x,currentOrder);                  }                }              } else {                if (streams.getValue(y,x) > 0) {                  output.setValue(y,x,output.getValue(y,x) + 1);                }                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public FloatMemberValue(float f,ConstPool cp){  super('F',cp);  setValue(f);}  }
class C{  public static void sort(short[] a){  doSort(a,0,a.length - 1);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private boolean isUsersAccountClosed(RequestAndResponse requestAndResponse){  stashRequestUser(requestAndResponse);  return requestAndResponse.userIsAccountClosed;}  }
class C{  public static String convertToHTMLContent(String content){  content=replace(content,'&',"&amp;");  content=replace(content,'"',"&quot;");  content=replace(content,'<',"&lt;");  return replace(content,'>',"&gt;");}  }
class C{  public static String normalizeSystemName(String systemName){  if (!validSystemNameFormat(systemName,systemName.charAt(1))) {    return "";  }  int bitNum=Integer.valueOf(systemName.substring(2)).intValue();  if ((bitNum <= 0) || ((systemName.charAt(1) == 'S') && bitNum > 1000) || (bitNum > 8000)) {    log.error("node address field out of range in system name - " + systemName);    return "";  }  String nName="";  nName=systemName.substring(0,2) + bitNum;  return nName;}  }
class C{  @Deprecated public static int occurrencesOf(String string,int value){  return StringIterate.occurrencesOfCodePoint(string,value);}  }
class C{  public final boolean isMimeTypeEqual(DataFlavor dataFlavor){  return isMimeTypeEqual(dataFlavor.mimeType);}  }
class C{  public boolean isValid(){  return GLES20.glIsBuffer(mVertexBufferInfo.bufferHandle);}  }
class C{  public static <K,V>MutableMap<K,V> selectMapOnValue(Map<K,V> map,Predicate<? super V> predicate){  MutableMap<K,V> resultMap=UnifiedMap.newMap();  Procedure2<K,V> mapTransferProcedure=new MapPutProcedure<>(resultMap);  Procedure2<K,V> procedure=null;  MapIterate.forEachKeyValue(map,procedure);  return resultMap;}  }
class C{  public boolean isWriteLocked(){  return rwl.isWriteLocked();}  }
class C{  public void notifyChangedSlot(LocoNetSlot s){  if (s.getSlot() != LnConstants.FC_SLOT) {    return;  }  if (log.isDebugEnabled()) {    log.debug("slot update " + s);  }  days.setText("" + s.getFcDays());  hours.setText("" + s.getFcHours());  minutes.setText("" + s.getFcMinutes());  rate.setText("" + s.getFcRate());  frac_mins.setText("" + s.getFcFracMins());}  }
class C{  public static Vector3 round(Vector3 o){  return new Vector3(Math.round(o.x),Math.round(o.y),Math.round(o.z));}  }
class C{  public DifferentialEvolution(int dim){  this(dim,5 * dim);}  }
class C{  public boolean removeElement(Object obj){  int index=indexOf(obj);  boolean rv=delegate.removeElement(obj);  if (index >= 0) {    fireIntervalRemoved(this,index,index);  }  return rv;}  }
class C{  private static String createLibPrefix(){  OSType osType=calculateOS();switch (osType) {case APPLE:case LINUX:case SUN:    return "lib";case WINDOWS:  return "";}return "";}  }
class C{  public void generateHTML(String viewId,String device,Document view,OutputStream out){  try {    StringWriter buff=new StringWriter();    ViewParser viewParser=new ViewParser(viewId,device,false,mustIndent(),true);    viewParser.generateHTMLHostPage(view,buff);    String result=buff.toString();    String outCharset=getOutputCharset();    if (outCharset == null || outCharset.length() == 0) {      throw new DeclarativeUITransformerException("Outputcharset is undefined. Check your web.xml file to ensure that DevModeInitializerListener is correctly configured.");    }    StreamUtils.write(new ByteArrayInputStream(result.getBytes(outCharset)),out,false);  } catch (  Exception e) {    log.error(e.getMessage(),e);    throw new RuntimeException(e);  }}  }
class C{  public void grantAdmin(Collection<String> jids) throws XMPPException {  changeAffiliationByOwner(jids,"admin");}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  protected void clearOutEvents(){}  }
class C{  public static void resetCalendar(){  CACHED_CALENDAR.remove();  zoneOffsetMillis=Calendar.getInstance().get(Calendar.ZONE_OFFSET);}  }
class C{  public boolean isDebuggingFiner(){  return logger.isLoggable(Level.FINER);}  }
class C{  private String createExplicitHashKey(final String partitionKey){  BigInteger hashKey=BigInteger.ZERO;  this.md5.reset();  byte[] pkDigest=this.md5.digest(partitionKey.getBytes(StandardCharsets.UTF_8));  for (int i=0; i < this.md5.getDigestLength(); i++) {    BigInteger p=new BigInteger(Byte.toString(pkDigest[i]));    p.shiftLeft((16 - i - 1) * 8);    hashKey=hashKey.add(p);  }  return hashKey.toString(10);}  }
class C{  public static UpdateTicker.SynchronizedTicker syncTicker(){  return instance.syncTicker;}  }
class C{  @Override public void write(final byte[] b,final int off,final int len){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void generateClientHaQueue(CacheServer bridge) throws SAXException {  AttributesImpl atts=new AttributesImpl();  ClientSubscriptionConfigImpl csc=(ClientSubscriptionConfigImpl)bridge.getClientSubscriptionConfig();  try {    atts.addAttribute("","",CLIENT_SUBSCRIPTION_EVICTION_POLICY,"",csc.getEvictionPolicy());    atts.addAttribute("","",CLIENT_SUBSCRIPTION_CAPACITY,"",String.valueOf(csc.getCapacity()));    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_5) >= 0) {      String dsVal=csc.getDiskStoreName();      if (dsVal != null) {        atts.addAttribute("","",DISK_STORE_NAME,"",dsVal);      }    }    if (csc.getDiskStoreName() == null && csc.hasOverflowDirectory()) {      atts.addAttribute("","",OVERFLOW_DIRECTORY,"",csc.getOverflowDirectory());    }    handler.startElement("",CLIENT_SUBSCRIPTION,CLIENT_SUBSCRIPTION,atts);    handler.endElement("",CLIENT_SUBSCRIPTION,CLIENT_SUBSCRIPTION);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public FunctionException(Throwable cause){  super(cause);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.EXECUTION_STATE__STATE_VECTOR:    setStateVector((StateVector)null);  return;case SexecPackage.EXECUTION_STATE__SUB_SCOPES:getSubScopes().clear();return;case SexecPackage.EXECUTION_STATE__SUPER_SCOPE:setSuperScope((ExecutionScope)null);return;case SexecPackage.EXECUTION_STATE__ENTER_SEQUENCES:getEnterSequences().clear();return;case SexecPackage.EXECUTION_STATE__EXIT_SEQUENCE:setExitSequence((Sequence)null);return;case SexecPackage.EXECUTION_STATE__INIT_SEQUENCE:setInitSequence((Sequence)null);return;case SexecPackage.EXECUTION_STATE__LEAF:setLeaf(LEAF_EDEFAULT);return;case SexecPackage.EXECUTION_STATE__ENTRY_ACTION:setEntryAction((Step)null);return;case SexecPackage.EXECUTION_STATE__EXIT_ACTION:setExitAction((Step)null);return;}super.eUnset(featureID);}  }
class C{  public NumberTextField(String label,double initialValue){  this(label,initialValue,0,0);}  }
class C{  public int available() throws IOException {  ensureOpen();  if (entryEOF) {    return 0;  } else {    return 1;  }}  }
class C{  @Override public void addSequence(final double[] datum){  for (int i=0; i < datum.length; i++) {    add(datum[i]);  }}  }
class C{  public Counts(){  this(Float.MIN_VALUE);}  }
class C{  public static double alongTrackDistanceDeg(double lat1,double lon1,double lat2,double lon2,double latQ,double lonQ,double dist1Q,double ctd){  return alongTrackDistanceRad(MathUtil.deg2rad(lat1),MathUtil.deg2rad(lon1),MathUtil.deg2rad(lat2),MathUtil.deg2rad(lon2),MathUtil.deg2rad(latQ),MathUtil.deg2rad(lonQ),dist1Q,ctd);}  }
class C{  public JSONArray(){  values=new ArrayList<JSONValue>();}  }
class C{  public static String propertyNameToMethodName(String propertyName){  char ch=propertyName.charAt(0);  if (Character.isLowerCase(ch))   propertyName=Character.toUpperCase(ch) + propertyName.substring(1);  return propertyName;}  }
class C{  public final boolean isConvertibleTo(ClassInfo type){  ClassDetail that=type.getDetails();  if (this == that) {    return true;  }  if (superClass != null && superClass.isConvertibleTo(type)) {    return true;  }  for (  ClassInfo c : interfaces) {    if (c.isConvertibleTo(type)) {      return true;    }  }  return false;}  }
class C{  public Builder(Frequency frequency){  this.frequency=frequency;  bySecond=new ArrayList<Integer>(0);  byMinute=new ArrayList<Integer>(0);  byHour=new ArrayList<Integer>(0);  byDay=new ArrayList<ByDay>(0);  byMonthDay=new ArrayList<Integer>(0);  byYearDay=new ArrayList<Integer>(0);  byWeekNo=new ArrayList<Integer>(0);  byMonth=new ArrayList<Integer>(0);  bySetPos=new ArrayList<Integer>(0);  xrules=new ListMultimap<String,String>(0);}  }
class C{  public UserEntry updateUser(String username,UserEntry userEntry) throws AppsForYourDomainException, ServiceException, IOException {  LOGGER.log(Level.INFO,"Updating user '" + username + "'.");  URL updateUrl=new URL(domainUrlBase + "user/" + SERVICE_VERSION+ "/"+ username);  return userService.update(updateUrl,userEntry);}  }
class C{  public _BuildStatus(){  super();}  }
class C{  public String escapeQuote(String quoteDelimiter){  return m_QuoteEscape + quoteDelimiter;}  }
class C{  public void testExclude() throws IOException {  CharArraySet exclusionSet=new CharArraySet(asSet("abbandonata"),false);  Analyzer a=new ItalianAnalyzer(ItalianAnalyzer.getDefaultStopSet(),exclusionSet);  checkOneTerm(a,"abbandonata","abbandonata");  checkOneTerm(a,"abbandonati","abbandonat");  a.close();}  }
class C{  void copyFrom(Triangle o){  this.a=o.a;  this.b=o.b;  this.c=o.c;  this.r2=o.r2;  this.m[0]=o.m[0];  this.m[1]=o.m[1];}  }
class C{  Chat(ChatManager chatManager,String participant,String threadID){  this.chatManager=chatManager;  this.participant=participant;  this.threadID=threadID;}  }
class C{  public BaseDeltaRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options,final String token){  super(requestUrl,client,options);  mToken=token;}  }
class C{  public final List checkPatientsAssess(Village v){  List up=new List();  for (Enumeration e=assess.elements(); e.hasMoreElements(); ) {    Patient p=(Patient)e.nextElement();    p.timeLeft-=1;    if (p.timeLeft == 0) {      if (v.staysHere()) {        assess.delete(p);        inside.add(p);        p.timeLeft=10;        p.time+=10;      } else {        freePersonnel++;        assess.delete(p);        up.add(p);      }    }  }  return up;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeStroke(this.stroke,stream);  SerialUtilities.writePaint(this.outlinePaint,stream);  SerialUtilities.writePaint(this.fillPaint,stream);}  }
class C{  public CollectionProperties(Object o){  if (o == null)   throw new NullPointerException(); else   if (o instanceof Indexed)   buildCollectionProperties((Indexed)o); else   if (o instanceof List)   buildCollectionProperties((List)o); else   if (o instanceof Map)   buildCollectionProperties((Map)o); else   if (o instanceof Collection)   buildCollectionProperties((Collection)o); else   if (o.getClass().isArray())   buildCollectionPropertiesForArray(o); else   throw new IllegalArgumentException("Invalid type for collection properties: " + o);  object=o;}  }
class C{  public DB_PostgreSQL(){}  }
class C{  public String toString(String title){  StringBuffer text=new StringBuffer();  char[] IDChars={'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};  int IDWidth;  boolean fractional=false;  double maxval=0;  for (int i=0; i < size(); i++) {    for (int j=0; j < size(); j++) {      double current=get(i,j);      if (current < 0) {        current*=-10;      }      if (current > maxval) {        maxval=current;      }      double fract=current - Math.rint(current);      if (!fractional && ((Math.log(fract) / Math.log(10)) >= -2)) {        fractional=true;      }    }  }  IDWidth=1 + Math.max((int)(Math.log(maxval) / Math.log(10) + (fractional ? 3 : 0)),(int)(Math.log(size()) / Math.log(IDChars.length)));  text.append(title).append("\n");  for (int i=0; i < size(); i++) {    if (fractional) {      text.append(" ").append(num2ShortID(i,IDChars,IDWidth - 3)).append("   ");    } else {      text.append(" ").append(num2ShortID(i,IDChars,IDWidth));    }  }  text.append("     actual class\n");  for (int i=0; i < size(); i++) {    for (int j=0; j < size(); j++) {      text.append(" ").append(Utils.doubleToString(get(i,j),IDWidth,(fractional ? 2 : 0)));    }    text.append(" | ").append(num2ShortID(i,IDChars,IDWidth)).append(" = ").append(m_ClassNames[i]).append("\n");  }  return text.toString();}  }
class C{  private void printText(Graphics2D g2d,String text,Rectangle2D rect,Font font,int imgWidth){  int tx;  if (rect.getWidth() < imgWidth) {    tx=(int)((imgWidth - rect.getWidth()) / 2);  } else   if (table.getComponentOrientation().isLeftToRight()) {    tx=0;  } else {    tx=-(int)(Math.ceil(rect.getWidth()) - imgWidth);  }  int ty=(int)Math.ceil(Math.abs(rect.getY()));  g2d.setColor(Color.BLACK);  g2d.setFont(font);  g2d.drawString(text,tx,ty);}  }
class C{  public static boolean isBlank(Object[] list){  return list == null || list.length == 0;}  }
class C{  public DotGraph createSubGraph(String label){  DotGraph subgraph=new DotGraph(label);  subgraph.isSubGraph=true;  this.drawElements.add(subgraph);  return subgraph;}  }
class C{  public static void fadeOut(final JDialog dialog){  fadeOut(dialog,5,0.05f);}  }
class C{  public void encodeCell(mxICell cell,Node node,boolean includeChildren){  node.appendChild(encode(cell));  if (includeChildren) {    int childCount=cell.getChildCount();    for (int i=0; i < childCount; i++) {      encodeCell(cell.getChildAt(i),node,includeChildren);    }  }}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public static boolean available(int port){  if (port < MIN_PORT_NUMBER || port > MAX_PORT_NUMBER) {    throw new IllegalArgumentException("Invalid start port: " + port);  }  ServerSocket ss=null;  DatagramSocket ds=null;  try {    ss=new ServerSocket(port);    ss.setReuseAddress(true);    ds=new DatagramSocket(port);    ds.setReuseAddress(true);    return true;  } catch (  IOException e) {  } finally {    if (ds != null) {      ds.close();    }    if (ss != null) {      try {        ss.close();      } catch (      IOException e) {      }    }  }  return false;}  }
class C{  public void sort(){  java.util.Arrays.sort(objs,0,numObjs);}  }
class C{  private void activateWifiCatalog(final String absoluteFile){  final ListPreference lf=(ListPreference)findPreference(org.openbmap.Preferences.KEY_CATALOG_FILE);  final String[] filenameArray=absoluteFile.split("\\/");  final String file=filenameArray[filenameArray.length - 1];  final CharSequence[] values=lf.getEntryValues();  for (int i=0; i < values.length; i++) {    if (file.equals(values[i].toString())) {      lf.setValueIndex(i);    }  }}  }
class C{  public int rechargerSlotCount(){  return 0;}  }
class C{  public Vector2(Vector2 v){  set(v);}  }
class C{  public Builder(TweetUi tweetUi){  if (tweetUi == null) {    throw new IllegalArgumentException("TweetUi instance must not be null");  }  this.tweetUi=tweetUi;}  }
class C{  static void invalidateCurrentContext(){  if (currentContext != null) {    currentContext.invalidateContext();    currentContext=null;  }  D3DRenderQueue rq=D3DRenderQueue.getInstance();  rq.ensureCapacity(4);  rq.getBuffer().putInt(INVALIDATE_CONTEXT);  rq.flushNow();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (size: ");  result.append(size);  result.append(", offset: ");  result.append(offset);  result.append(')');  return result.toString();}  }
class C{  public static void processMessageToMatchSession(HttpMessage message,HttpSession session){  processMessageToMatchSession(message,message.getRequestHeader().getHttpCookies(),session);}  }
class C{  public void pack(){  try {    if (isIcon()) {      setIcon(false);    } else     if (isMaximum()) {      setMaximum(false);    }  } catch (  PropertyVetoException e) {    return;  }  setSize(getPreferredSize());  validate();}  }
class C{  public void testStatementGetTime(Connection connection) throws SQLException {  try (Statement statement=connection.createStatement()){    try (ResultSet resultSet=statement.executeQuery(sql)){      Assert.assertTrue(resultSet.next());      Assert.assertEquals("00:00:00","" + resultSet.getTime(2));      Assert.assertTrue(resultSet.next());      Assert.assertEquals("00:00:00","" + resultSet.getTime(2));      Assert.assertTrue(resultSet.next());      Assert.assertNull(resultSet.getTime(2));      Assert.assertFalse(resultSet.next());    }   } }  }
class C{  @Override protected boolean isHostOverUtilized(PowerHost host){  PowerHostUtilizationHistory _host=(PowerHostUtilizationHistory)host;  double[] utilizationHistory=_host.getUtilizationHistory();  int length=10;  if (utilizationHistory.length < length) {    return getFallbackVmAllocationPolicy().isHostOverUtilized(host);  }  double[] utilizationHistoryReversed=new double[length];  for (int i=0; i < length; i++) {    utilizationHistoryReversed[i]=utilizationHistory[length - i - 1];  }  double[] estimates=null;  try {    estimates=getParameterEstimates(utilizationHistoryReversed);  } catch (  IllegalArgumentException e) {    return getFallbackVmAllocationPolicy().isHostOverUtilized(host);  }  double migrationIntervals=Math.ceil(getMaximumVmMigrationTime(_host) / getSchedulingInterval());  double predictedUtilization=estimates[0] + estimates[1] * (length + migrationIntervals);  predictedUtilization*=getSafetyParameter();  addHistoryEntry(host,predictedUtilization);  return predictedUtilization >= 1;}  }
class C{  public NotificationChain basicSetRequiredRuntimeLibraries(RequiredRuntimeLibraries newRequiredRuntimeLibraries,NotificationChain msgs){  RequiredRuntimeLibraries oldRequiredRuntimeLibraries=requiredRuntimeLibraries;  requiredRuntimeLibraries=newRequiredRuntimeLibraries;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4mfPackage.PROJECT_DESCRIPTION__REQUIRED_RUNTIME_LIBRARIES,oldRequiredRuntimeLibraries,newRequiredRuntimeLibraries);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public boolean enableImageAccessStepRollback(URI rpSystemId,Map<URI,Integer> snapshots,boolean setSnapshotsInactive,String stepId) throws ControllerException {  try {    WorkflowStepCompleter.stepExecuting(stepId);    boolean setSnapshotSyncActive=false;    disableImageForSnapshots(rpSystemId,new ArrayList<URI>(snapshots.keySet()),setSnapshotsInactive,setSnapshotSyncActive,stepId);    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  Exception e) {    return stepFailed(stepId,e,"enableImageAccessStepRollback");  }  return true;}  }
class C{  public synchronized TypeMember insertMemberAfter(final TypeMember existingMember,final BaseType memberType,final String memberName) throws CouldntSaveDataException {  Preconditions.checkNotNull(existingMember,"Error: existing member can not be null.");switch (existingMember.getParentType().getCategory()) {case STRUCT:    return createStructureMember(existingMember.getParentType(),memberType,memberName,existingMember.getBitSize() + existingMember.getBitOffset().get());case UNION:  return createUnionMember(existingMember.getParentType(),memberType,memberName);case FUNCTION_PROTOTYPE:return createFunctionPrototypeMember(existingMember.getParentType(),memberType,memberName,existingMember.getArgumentIndex().get() + 1);default :throw new IllegalStateException("Error: cannot insert member into non-compound type.");}}  }
class C{  static private void handleSid(final SidIV<?> sid,final Collection<IV<?,?>> ids){  final ISPO spo=sid.getInlineValue();  handleIV(spo.s(),ids);  handleIV(spo.p(),ids);  handleIV(spo.o(),ids);  if (spo.c() != null) {    handleIV(spo.c(),ids);  }}  }
class C{  private void markTransportsMovement(final Collection<Unit> arrived,final Map<Unit,Unit> transporting,final Route route){  if (transporting == null) {    return;  }  final GameData data=m_bridge.getData();  final CompositeMatch<Unit> paratroopNAirTransports=new CompositeMatchOr<>();  paratroopNAirTransports.add(Matches.UnitIsAirTransport);  paratroopNAirTransports.add(Matches.UnitIsAirTransportable);  final boolean paratroopsLanding=Match.someMatch(arrived,paratroopNAirTransports) && MoveValidator.allLandUnitsAreBeingParatroopered(arrived,route,m_player);  final Map<Unit,Collection<Unit>> dependentAirTransportableUnits=MoveValidator.getDependents(Match.getMatches(arrived,Matches.UnitCanTransport),data);  if (m_newDependents != null) {    for (    final Entry<Unit,Collection<Unit>> entry : m_newDependents.entrySet()) {      Collection<Unit> dependents=dependentAirTransportableUnits.get(entry.getKey());      if (dependents != null) {        dependents.addAll(entry.getValue());      } else {        dependents=entry.getValue();      }      dependentAirTransportableUnits.put(entry.getKey(),dependents);    }  }  if (!paratroopsLanding && !dependentAirTransportableUnits.isEmpty()) {    final Collection<Unit> airTransports=Match.getMatches(arrived,Matches.UnitIsAirTransport);    airTransports.addAll(dependentAirTransportableUnits.keySet());    MovePanel.clearDependents(airTransports);  }  if (route.isLoad() || paratroopsLanding) {    final Iterator<Unit> units=transporting.keySet().iterator();    while (units.hasNext()) {      final Unit load=units.next();      final Unit transport=transporting.get(load);      if (!TransportTracker.transporting(transport).contains(load)) {        final Change change=TransportTracker.loadTransportChange((TripleAUnit)transport,load);        m_currentMove.addChange(change);        m_currentMove.load(transport);        m_bridge.addChange(change);      }    }    if (transporting.isEmpty()) {      for (      final Unit airTransport : dependentAirTransportableUnits.keySet()) {        for (        final Unit unit : dependentAirTransportableUnits.get(airTransport)) {          final Change change=TransportTracker.loadTransportChange((TripleAUnit)airTransport,unit);          m_currentMove.addChange(change);          m_currentMove.load(airTransport);          m_bridge.addChange(change);        }      }    }  }  if (route.isUnload() || paratroopsLanding) {    final Set<Unit> units=new HashSet<>();    units.addAll(transporting.values());    units.addAll(transporting.keySet());    if (transporting.isEmpty()) {      units.addAll(dependentAirTransportableUnits.keySet());      for (      final Unit airTransport : dependentAirTransportableUnits.keySet()) {        units.addAll(dependentAirTransportableUnits.get(airTransport));      }    }    final BattleTracker tracker=getBattleTracker();    final boolean pendingBattles=tracker.getPendingBattle(route.getStart(),false,BattleType.NORMAL) != null;    final Iterator<Unit> iter=units.iterator();    while (iter.hasNext()) {      final Unit unit=iter.next();      if (Matches.UnitIsAir.match(unit)) {        continue;      }      final Unit transportedBy=((TripleAUnit)unit).getTransportedBy();      if (paratroopsLanding && transportedBy != null && Matches.UnitIsAirTransport.match(transportedBy) && GameStepPropertiesHelper.isCombatMove(data,false) && Matches.territoryHasNonSubmergedEnemyUnits(m_player,data).match(route.getEnd())) {        continue;      }      final Change change1=TransportTracker.unloadTransportChange((TripleAUnit)unit,m_currentMove.getRoute().getEnd(),m_player,pendingBattles);      m_currentMove.addChange(change1);      m_currentMove.unload(unit);      m_bridge.addChange(change1);      final Change change2=ChangeFactory.markNoMovementChange(Collections.singleton(unit));      m_currentMove.addChange(change2);      m_bridge.addChange(change2);    }  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (op: ");  result.append(op);  result.append(')');  return result.toString();}  }
class C{  @SuppressWarnings("unchecked") public synchronized <T>T[] toArray(T[] a){  if (a.length < elementCount)   return (T[])Arrays.copyOf(elementData,elementCount,a.getClass());  System.arraycopy(elementData,0,a,0,elementCount);  if (a.length > elementCount)   a[elementCount]=null;  return a;}  }
class C{  public InputStream toInputStream(){  return new ByteArrayInputStream(this.buf,0,this.count);}  }
class C{  public boolean isStrict(){  return true;}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute("processtype") @Valid ProcessType processType,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    com.wipro.ats.bdre.md.dao.jpa.ProcessType jpaProcessType=new com.wipro.ats.bdre.md.dao.jpa.ProcessType();    jpaProcessType.setProcessTypeId(processType.getProcessTypeId());    jpaProcessType.setParentProcessTypeId(processType.getParentProcessTypeId());    jpaProcessType.setProcessTypeName(processType.getProcessTypeName());    processTypeDAO.insert(jpaProcessType);    restWrapper=new RestWrapper(processType,RestWrapper.OK);    LOGGER.info("Record with ID :" + processType.getProcessTypeId() + " inserted in ProcessType by User:"+ principal.getName()+ processType);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public ByteArrayOutputStream(){  this(1024);}  }
class C{  public static void closeResources(Object... resources){  if (resources != null) {    for (int i=0; i < resources.length; i++) {      closeResource(resources[i]);    }  }}  }
class C{  private byte[] b(int... a){  byte[] ret=new byte[a.length];  for (int i=0; i < a.length; i++)   ret[i]=(byte)a[i];  return ret;}  }
class C{  public boolean hasJots(){  return hasRepeatingExtension(Jot.class);}  }
class C{  private void initializeUserStoreAndCheckVersion() throws Exception {  int i=0;  String version=com.evernote.edam.userstore.Constants.EDAM_VERSION_MAJOR + "." + com.evernote.edam.userstore.Constants.EDAM_VERSION_MINOR;  for (  String url : mBootstrapServerUrls) {    i++;    try {      EvernoteUserStoreClient userStoreClient=mEvernoteSession.getEvernoteClientFactory().getUserStoreClient(getUserStoreUrl(url),null);      if (!userStoreClient.checkVersion(EvernoteUtil.generateUserAgentString(mEvernoteSession.getApplicationContext()),com.evernote.edam.userstore.Constants.EDAM_VERSION_MAJOR,com.evernote.edam.userstore.Constants.EDAM_VERSION_MINOR)) {        throw new ClientUnsupportedException(version);      }      mBootstrapServerUsed=url;      return;    } catch (    ClientUnsupportedException cue) {      Log.e(LOGTAG,"Invalid Version",cue);      throw cue;    }catch (    Exception e) {      if (i < mBootstrapServerUrls.size()) {        Log.e(LOGTAG,"Error contacting bootstrap server=" + url,e);      } else {        throw e;      }    }  }}  }
class C{  private void renderTexture(Texture texture,double centerX,double centerY){  TextureCoords tc=texture.getImageTexCoords();  float tx1=tc.left();  float ty1=tc.top();  float tx2=tc.right();  float ty2=tc.bottom();  float halfWidth=quarterValue(texture.getWidth());  float halfHeight=quarterValue(texture.getHeight());  GL2 gl=scene.gl;  texture.bind(gl);  texture.enable(gl);  Color foreground=scene.getForegroundColor();  gl.glColor4f(foreground.getRed() / 255f,foreground.getGreen() / 255f,foreground.getBlue() / 255f,foreground.getAlpha() / 255f);  gl.glPushMatrix();  float[] translate=GLScene.P((float)centerX,(float)centerY);  gl.glTranslatef(translate[0],translate[1],translate[2]);  gl.glBegin(GL2.GL_QUADS);  gl.glTexCoord2f(tx1,ty1);  GLScene.V(gl,-halfWidth,halfHeight);  gl.glTexCoord2f(tx2,ty1);  GLScene.V(gl,halfWidth,halfHeight);  gl.glTexCoord2f(tx2,ty2);  GLScene.V(gl,halfWidth,-halfHeight);  gl.glTexCoord2f(tx1,ty2);  GLScene.V(gl,-halfWidth,-halfHeight);  gl.glEnd();  gl.glPopMatrix();  texture.disable(gl);}  }
class C{  public void notifySelection(Context context,String original,int index){  final Intent intent=new Intent();  if (context == null || mNotificationTargetClassName == null) {    return;  }  if (mSuggestions == null || index < 0 || index >= mSuggestions.length) {    Log.w(TAG,"Unable to notify the suggestion as the index is out of range index=" + index + " length="+ mSuggestions.length);    return;  }  if (mNotificationTargetPackageName != null) {    intent.setClassName(mNotificationTargetPackageName,mNotificationTargetClassName);    intent.setAction(SuggestionSpan.ACTION_SUGGESTION_PICKED);    intent.putExtra(SuggestionSpan.SUGGESTION_SPAN_PICKED_BEFORE,original);    intent.putExtra(SuggestionSpan.SUGGESTION_SPAN_PICKED_AFTER,mSuggestions[index]);    intent.putExtra(SuggestionSpan.SUGGESTION_SPAN_PICKED_HASHCODE,hashCode());    context.sendBroadcast(intent);  } else {    InputMethodManager imm=InputMethodManager.peekInstance();    if (imm != null) {      imm.notifySuggestionPicked(this,original,index);    }  }}  }
class C{  public Intent execute(Context context){  String[] titles=new String[]{"2007","2008"};  List<double[]> values=new ArrayList<double[]>();  values.add(new double[]{5230,7300,9240,10540,7900,9200,12030,11200,9500,10500,11600,13500});  values.add(new double[]{14230,12300,14240,15244,15900,19200,22030,21200,19500,15500,12600,14000});  int[] colors=new int[]{Color.CYAN,Color.BLUE};  XYMultipleSeriesRenderer renderer=buildBarRenderer(colors);  renderer.setOrientation(Orientation.VERTICAL);  setChartSettings(renderer,"Monthly sales in the last 2 years","Month","Units sold",0.5,12.5,0,24000,Color.GRAY,Color.LTGRAY);  renderer.setXLabels(1);  renderer.setYLabels(10);  renderer.addXTextLabel(1,"Jan");  renderer.addXTextLabel(3,"Mar");  renderer.addXTextLabel(5,"May");  renderer.addXTextLabel(7,"Jul");  renderer.addXTextLabel(10,"Oct");  renderer.addXTextLabel(12,"Dec");  int length=renderer.getSeriesRendererCount();  for (int i=0; i < length; i++) {    XYSeriesRenderer seriesRenderer=(XYSeriesRenderer)renderer.getSeriesRendererAt(i);    seriesRenderer.setDisplayChartValues(true);  }  return ChartFactory.getBarChartIntent(context,buildBarDataset(titles,values),renderer,Type.DEFAULT);}  }
class C{  public static ValueTime fromMillis(long ms){  return fromNanos(DateTimeUtils.nanosFromDate(ms));}  }
class C{  public boolean isEnabledForContext(int contextId){  return true;}  }
class C{  public static Cert load(File file) throws IOException, CertificateException {  return load(file.toURI().toURL());}  }
class C{  public GMLWriter(){}  }
class C{  public static boolean cancelAll(int src,Predicate p){  SimEvent ev=null;  int previousSize=future.size();  Iterator<SimEvent> iter=future.iterator();  while (iter.hasNext()) {    ev=iter.next();    if (ev.getSource() == src && p.match(ev)) {      iter.remove();    }  }  return previousSize < future.size();}  }
class C{  @Override public String toString(){  if (filterConfig == null) {    return ("SessionCachingFilter()");  }  StringBuilder sb=new StringBuilder("SessionCachingFilter(");  sb.append(filterConfig);  sb.append(")");  return (sb.toString());}  }
class C{  public boolean sameSize(FloatMatrix a){  return rows == a.rows && columns == a.columns;}  }
class C{  public XMLScanner(String s) throws XMLException {  context=DOCUMENT_START_CONTEXT;  try {    reader=new StringNormalizingReader(s);    current=nextChar();  } catch (  IOException e) {    throw new XMLException(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:14.450 -0500",hash_original_method="2A1C263B6B48827DF8BFBCAAE8358B4D",hash_generated_method="AA91954FE5C4B6E408DC40FCFD74CE28") public void onExceededDatabaseQuota(String url,String databaseIdentifier,long currentQuota,long estimatedSize,long totalUsedQuota,WebStorage.QuotaUpdater quotaUpdater){  if (mWebChromeClient == null) {    quotaUpdater.updateQuota(currentQuota);    return;  }  Message exceededQuota=obtainMessage(EXCEEDED_DATABASE_QUOTA);  HashMap<String,Object> map=new HashMap();  map.put("databaseIdentifier",databaseIdentifier);  map.put("url",url);  map.put("currentQuota",currentQuota);  map.put("estimatedSize",estimatedSize);  map.put("totalUsedQuota",totalUsedQuota);  map.put("quotaUpdater",quotaUpdater);  exceededQuota.obj=map;  sendMessage(exceededQuota);}  }
class C{  public String validate(){  StringBuilder sb=new StringBuilder();  if (group == null)   sb.append("group is required. ");  if (host == null)   sb.append("host is required. ");  if (sql == null)   sb.append("sql is required. ");  return sb.toString();}  }
class C{  public static List<ContainerCloudlet> createContainerCloudletList(int brokerId,int numberOfCloudlets) throws FileNotFoundException {  String inputFolderName=ContainerCloudSimExample1.class.getClassLoader().getResource("workload/planetlab").getPath();  ArrayList<ContainerCloudlet> cloudletList=new ArrayList<ContainerCloudlet>();  long fileSize=300L;  long outputSize=300L;  UtilizationModelNull utilizationModelNull=new UtilizationModelNull();  java.io.File inputFolder1=new java.io.File(inputFolderName);  java.io.File[] files1=inputFolder1.listFiles();  int createdCloudlets=0;  for (  java.io.File aFiles1 : files1) {    java.io.File inputFolder=new java.io.File(aFiles1.toString());    java.io.File[] files=inputFolder.listFiles();    for (int i=0; i < files.length; ++i) {      if (createdCloudlets < numberOfCloudlets) {        ContainerCloudlet cloudlet=null;        try {          cloudlet=new ContainerCloudlet(IDs.pollId(ContainerCloudlet.class),ConstantsExamples.CLOUDLET_LENGTH,1,fileSize,outputSize,new UtilizationModelPlanetLabInMemoryExtended(files[i].getAbsolutePath(),300.0D),utilizationModelNull,utilizationModelNull);        } catch (        Exception var13) {          var13.printStackTrace();          System.exit(0);        }        cloudlet.setUserId(brokerId);        cloudletList.add(cloudlet);        createdCloudlets+=1;      } else {        return cloudletList;      }    }  }  return cloudletList;}  }
class C{  public static String toHexString(byte b[]){  int pos=0;  char[] c=new char[b.length * 2];  for (int i=0; i < b.length; i++) {    c[pos++]=toHex[(b[i] >> 4) & 0x0F];    c[pos++]=toHex[b[i] & 0x0f];  }  return new String(c);}  }
class C{  static void verifyClaimsPeriodNotEnded(Registry registry,DateTime now) throws ClaimsPeriodEndedException {  if (isAtOrAfter(now,registry.getClaimsPeriodEnd())) {    throw new ClaimsPeriodEndedException(registry.getTldStr());  }}  }
class C{  public static boolean isDrmConvertNeeded(String mimetype){  return MIMETYPE_DRM_MESSAGE.equals(mimetype);}  }
class C{  public static boolean hasIceCreamSandwich(){  return Build.VERSION.SDK_INT >= VERSION_CODES.ICE_CREAM_SANDWICH;}  }
class C{  public static DiscordRecords series2BruteForceDiscords(double[] series,Integer windowSize,int discordCollectionSize,SlidingWindowMarkerAlgorithm marker,double nThreshold) throws Exception {  DiscordRecords discords=new DiscordRecords();  VisitRegistry globalTrackVisitRegistry=new VisitRegistry(series.length);  globalTrackVisitRegistry.markVisited(series.length - windowSize,series.length);  int discordCounter=0;  while (discords.getSize() < discordCollectionSize) {    LOGGER.debug("currently known discords: {} out of {}",discords.getSize(),discordCollectionSize);    Date start=new Date();    DiscordRecord bestDiscord=findBestDiscordBruteForce(series,windowSize,globalTrackVisitRegistry,nThreshold);    bestDiscord.setPayload("#" + discordCounter);    Date end=new Date();    if (bestDiscord.getNNDistance() == 0.0D || bestDiscord.getPosition() == -1) {      LOGGER.debug("breaking the outer search loop, discords found: {} last seen discord: {}" + discords.getSize(),bestDiscord);      break;    }    bestDiscord.setInfo("position " + bestDiscord.getPosition() + ", NN distance "+ bestDiscord.getNNDistance()+ ", elapsed time: "+ SAXProcessor.timeToString(start.getTime(),end.getTime())+ ", "+ bestDiscord.getInfo());    LOGGER.debug("{}",bestDiscord.getInfo());    discords.add(bestDiscord);    marker.markVisited(globalTrackVisitRegistry,bestDiscord.getPosition(),windowSize);    discordCounter++;  }  return discords;}  }
class C{  public void paint(Graphics2D g){  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  origAlpha=1.0f;  Composite origComposite=g.getComposite();  if (origComposite instanceof AlphaComposite) {    AlphaComposite origAlphaComposite=(AlphaComposite)origComposite;    if (origAlphaComposite.getRule() == AlphaComposite.SRC_OVER) {      origAlpha=origAlphaComposite.getAlpha();    }  }  AffineTransform trans_0=g.getTransform();  paintRootGraphicsNode_0(g);  g.setTransform(trans_0);}  }
class C{  public void chainFlap(AdvancedModelRenderer[] boxes,float speed,float degree,double rootOffset,float swing,float swingAmount){  float offset=this.calculateChainOffset(rootOffset,boxes);  for (int index=0; index < boxes.length; index++) {    boxes[index].rotateAngleZ+=this.calculateChainRotation(speed,degree,swing,swingAmount,offset,index);  }}  }
class C{  private static boolean hasValueNode(Element node){  for (int i=0; i < node.getChildCount(); i++) {    if (node.isText(i))     continue;    Element child=node.getElement(i);    if (child.getName().equalsIgnoreCase(NODE_VALUE))     return true;  }  return false;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  private static float flooredMod(float a,float n){  return a < 0 ? (a % n + n) % n : a % n;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationfeaturexmlversion2.class,args);}  }
class C{  public PegasosK(double regularization,int iterations,KernelTrick kernel,CacheMode cacheMode){  super(kernel,cacheMode);  setRegularization(regularization);  setIterations(iterations);}  }
class C{  public static boolean isTSFile(Object fileObject){  return INSTANCE.isTSFile(fileObject);}  }
class C{  private static void d_uarvar(double[] a,double[] c,int m,int n,CM_COV_Object cbuff,CM cm,int rl,int ru) throws DMLRuntimeException {  for (int i=rl, aix=rl * n, cix=rl * 5; i < ru; i++, aix+=n, cix+=5) {    cbuff.reset();    var(a,aix,n,cbuff,cm);    c[cix]=cbuff.getRequiredResult(AggregateOperationTypes.VARIANCE);    c[cix + 1]=cbuff.mean._sum;    c[cix + 2]=cbuff.w;    c[cix + 3]=cbuff.m2._correction;    c[cix + 4]=cbuff.mean._correction;  }}  }
class C{  private void loadTrl(){  if (Env.isBaseLanguage(getCtx(),"AD_Workflow") || get_ID() == 0)   return;  String sql="SELECT Name, Description, Help FROM AD_Workflow_Trl WHERE AD_Workflow_ID=? AND AD_Language=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,get_ID());    pstmt.setString(2,Env.getAD_Language(getCtx()));    rs=pstmt.executeQuery();    if (rs.next()) {      m_name_trl=rs.getString(1);      m_description_trl=rs.getString(2);      m_help_trl=rs.getString(3);      m_translated=true;    }  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  log.fine("Translated=" + m_translated);}  }
class C{  protected void generateTimePatternGrids(HttpServletRequest request,PreferencesForm frm,PreferenceGroup pg,int minutes,DurationModel dmod,DatePattern dpat,Set tpat,String op,boolean timeVertical,boolean editable,Vector leadInstructors) throws Exception {  Vector timePrefs=null;  List tps=null;  if (op.equals("init")) {    Set tp=pg.effectivePreferences(TimePref.class,leadInstructors,!editable);    if (tp.size() > 0) {      timePrefs=new Vector(tp);      Collections.sort(timePrefs);      tps=new Vector();      for (Enumeration e=timePrefs.elements(); e.hasMoreElements(); ) {        TimePref timePref=(TimePref)e.nextElement();        if (timePref.getTimePatternModel().hasNotAvailablePreference())         frm.setHasNotAvailable(true);        tps.add(timePref.getTimePattern() == null ? "-1" : timePref.getTimePattern().getUniqueId().toString());      }    } else     if (tpat.size() > 0 && editable) {      Vector x=new Vector(tpat);      Collections.sort(x);      tps=new Vector();      for (Enumeration e=x.elements(); e.hasMoreElements(); ) {        TimePattern pat=(TimePattern)e.nextElement();        tps.add(pat.getUniqueId().toString());      }    }    frm.setTimePatterns(tps);  } else {    tps=frm.getTimePatterns();  }  Assignment assignment=null;  if (pg instanceof Class_) {    if (sessionContext.hasPermission(Right.ClassAssignments)) {      ClassAssignmentDetails ca=ClassAssignmentDetails.createClassAssignmentDetails(sessionContext,courseTimetablingSolverService.getSolver(),pg.getUniqueId(),true);      if (ca != null) {        String assignmentTable=SuggestionsAction.getAssignmentTable(sessionContext,courseTimetablingSolverService.getSolver(),ca,false,null,true);        if (assignmentTable != null)         request.setAttribute("Suggestions.assignmentInfo",assignmentTable);      } else {        ClassAssignmentProxy cap=classAssignmentService.getAssignment();        if (cap != null) {          assignment=cap.getAssignment((Class_)pg);          if (assignment != null && assignment.getUniqueId() != null) {            ca=ClassAssignmentDetails.createClassAssignmentDetailsFromAssignment(sessionContext,assignment.getUniqueId(),true);            if (ca != null) {              String assignmentTable=SuggestionsAction.getAssignmentTable(sessionContext,courseTimetablingSolverService.getSolver(),ca,false,null,true);              if (assignmentTable != null)               request.setAttribute("Suggestions.assignmentInfo",assignmentTable);            }          }        }      }    }  }  if (tps == null || tps.isEmpty()) {    request.setAttribute(TIME_PATTERN_GRID_ATTR,MSG.errorTimePatternNotSelected());  } else {    int idx=0;    int deletedTimePatternIdx=-1;    if ("timePattern".equals(request.getParameter("deleteType"))) {      try {        deletedTimePatternIdx=Integer.parseInt(request.getParameter("deleteId"));      } catch (      Exception e) {      }    }    for (Iterator i=tps.iterator(); i.hasNext(); idx++) {      String tp=(String)i.next();      TimePatternDAO timePatternDao=new TimePatternDAO();      TimePattern timePattern=(tp.equals("-1") ? null : timePatternDao.get(new Long(tp)));      RequiredTimeTable rtt=(timePattern == null ? TimePattern.getDefaultRequiredTimeTable() : timePattern.getRequiredTimeTable(assignment == null ? null : assignment.getTimeLocation(),sessionContext.hasPermission(pg,Right.CanUseHardTimePrefs)));      rtt.getModel().setDefaultSelection(sessionContext.getUser().getProperty(UserProperty.GridSize));      rtt.setName("p" + idx);      String reloadCause=request.getParameter("reloadCause");      if (reloadCause != null && reloadCause.equals("timePattern"))       request.setAttribute(HASH_ATTR,HASH_TIME_PREF);      if ((reloadCause == null || !reloadCause.equals("timePattern")) && !op.equals("init")) {        if (deletedTimePatternIdx >= 0 && idx >= deletedTimePatternIdx) {          rtt.setName("p" + (idx + 1));          rtt.update(request);          rtt.setName("p" + idx);        } else         rtt.update(request);      }      if (timePrefs != null && timePrefs.size() > 0 && op.equals("init")) {        rtt.getModel().setPreferences(((TimePref)timePrefs.elementAt(idx)).getPreference());      }      String name=null;      if (timePattern != null && !rtt.getModel().isExactTime()) {        if (dpat.getType() != null && dpat.getType() == DatePattern.sTypePatternSet) {          boolean allPatterns=true;          String matching="";          for (          DatePattern dch : dpat.findChildren()) {            if (dmod.isValidCombination(minutes,dch,timePattern)) {              matching+=(matching.isEmpty() ? "" : ", ") + dch.getName();            } else {              allPatterns=false;            }          }          if (matching.isEmpty())           name=timePattern.getName() + " <font color=\\'red\\'>" + MSG.warnNoMatchingDatePattern()+ "</font>"; else           if (!allPatterns)           name=timePattern.getName() + " (" + matching+ ")";        } else {          if (!dmod.isValidCombination(minutes,dpat,timePattern))           name=timePattern.getName() + " <font color=\\'red\\'>" + MSG.warnNoMatchingDatePattern()+ "</font>";        }      }      request.setAttribute(TIME_PATTERN_GRID_ATTR + "_" + idx,rtt.print(editable,timeVertical,editable,false,name));    }  }}  }
class C{  @HLEFunction(nid=0xCEADEB47,version=150,checkInsideInterrupt=true,checkDispatchThreadEnabled=true) public int sceKernelDelayThread(int micros){  hleKernelDelayThread(micros,false);  return 0;}  }
class C{  @DSComment("callback will be invoked") @DSSpec(DSCat.CALLBACK_INVOKE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:44.895 -0500",hash_original_method="FCDAC37DCBE00C8E72E2289D698E0B3F",hash_generated_method="BB4CEAAC9B3708D7274C54F7C0920423") public void notifyChanged(){synchronized (mObservers) {    for (int i=mObservers.size() - 1; i >= 0; i--) {      mObservers.get(i).onChanged();    }  }}  }
class C{  private static void convertActivityToTranslucentAfterL(Activity activity){  try {    Method getActivityOptions=Activity.class.getDeclaredMethod("getActivityOptions");    getActivityOptions.setAccessible(true);    Object options=getActivityOptions.invoke(activity);    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method convertToTranslucent=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz,ActivityOptions.class);    convertToTranslucent.setAccessible(true);    convertToTranslucent.invoke(activity,null,options);  } catch (  Throwable t) {  }}  }
class C{  public static boolean createRemoteTextFile(EvoSuiteURL url,String text){  if (url == null) {    return false;  }  return VirtualNetwork.getInstance().addRemoteTextFile(url.getUrl(),text);}  }
class C{  @Deprecated private boolean hasWiredHeadset(){  return audioManager.isWiredHeadsetOn();}  }
class C{  void takeIndexWrapped(){  cycles++;  for (Node o=null, p=head; p != null; ) {    final Itr it=p.get();    final Node next=p.next;    if (it == null || it.takeIndexWrapped()) {      p.clear();      p.next=null;      if (o == null)       head=next; else       o.next=next;    } else {      o=p;    }    p=next;  }  if (head == null)   itrs=null;}  }
class C{  private int createFrameBufferObject(){  this.fbo=glGenFramebuffers();  glBindFramebuffer(GL_FRAMEBUFFER,fbo);  glFramebufferTexture2D(GL_FRAMEBUFFER,GL_COLOR_ATTACHMENT0,GL_TEXTURE_2D,this.tex,0);  int fboStatus=glCheckFramebufferStatus(GL_FRAMEBUFFER);  if (fboStatus != GL_FRAMEBUFFER_COMPLETE) {    throw new AssertionError("Could not create FBO: " + fboStatus);  }  glBindFramebuffer(GL_FRAMEBUFFER,0);  return fbo;}  }
class C{  public List<?> searchEntriesForUserByQuotation(String userId,String query,int startPosition,int maxResults){  return db.searchEntriesForUserHelper(userId,"quotation",query,startPosition,maxResults);}  }
class C{  public void addEdge(final Object from,final Object to,final Object info){  addEdge(new Edge(from,to,info));}  }
class C{  public String toString(){  return "k=" + this.k + ", w="+ Long.toString(weight())+ ", l="+ Integer.toString(level())+ ", size="+ values.size();}  }
class C{  public static boolean isPermissionGranted(@NonNull Fragment context,@NonNull String permission){  return ActivityCompat.checkSelfPermission(context.getContext(),permission) == PackageManager.PERMISSION_GRANTED;}  }
class C{  public Rule removeRule(int index){  if (index >= numRules || index < 0)   return null;  Rule myrule=rules[index];  if (index < numRules - 1)   System.arraycopy(rules,index + 1,rules,index,numRules - (index + 1));  numRules--;  return myrule;}  }
class C{  @Override protected void uninstallViewListeners(View p){  super.uninstallViewListeners(p);  p.removePropertyChangeListener(viewListener);}  }
class C{  public static AS_PathEntity translateAStarPathtoPathEntity(ArrayList<AStarNode> input){  AS_PathPoint[] points=new AS_PathPoint[input.size()];  AStarNode reading;  int i=0;  int size=input.size();  while (size > 0) {    reading=input.get(size - 1);    points[i]=new AS_PathPoint(reading.x,reading.y,reading.z);    points[i].setIndex(i);    points[i].setTotalPathDistance(i);    points[i].setDistanceToNext(1F);    points[i].setDistanceToTarget(size);    if (i > 0) {      points[i].setPrevious(points[i - 1]);    }    input.remove(size - 1);    size--;    i++;  }  return new AS_PathEntity(points);}  }
class C{  public static final boolean givesCheck(Position pos,Move m){  boolean wtm=pos.whiteMove;  int oKingSq=pos.getKingSq(!wtm);  int oKing=wtm ? Piece.BKING : Piece.WKING;  int p=Piece.makeWhite(m.promoteTo == Piece.EMPTY ? pos.getPiece(m.from) : m.promoteTo);  int d1=BitBoard.getDirection(m.to,oKingSq);switch (d1) {case 8:case -8:case 1:case -1:    if ((p == Piece.WQUEEN) || (p == Piece.WROOK))     if ((d1 != 0) && (MoveGen.nextPiece(pos,m.to,d1) == oKing))     return true;  break;case 9:case 7:case -9:case -7:if ((p == Piece.WQUEEN) || (p == Piece.WBISHOP)) {  if ((d1 != 0) && (MoveGen.nextPiece(pos,m.to,d1) == oKing))   return true;} else if (p == Piece.WPAWN) {  if (((d1 > 0) == wtm) && (pos.getPiece(m.to + d1) == oKing))   return true;}break;default :if (d1 != 0) {if (p == Piece.WKNIGHT) return true;}}int d2=BitBoard.getDirection(m.from,oKingSq);if ((d2 != 0) && (d2 != d1) && (MoveGen.nextPiece(pos,m.from,d2) == oKing)) {int p2=MoveGen.nextPieceSafe(pos,m.from,-d2);switch (d2) {case 8:case -8:case 1:case -1:if ((p2 == (wtm ? Piece.WQUEEN : Piece.BQUEEN)) || (p2 == (wtm ? Piece.WROOK : Piece.BROOK))) return true;break;case 9:case 7:case -9:case -7:if ((p2 == (wtm ? Piece.WQUEEN : Piece.BQUEEN)) || (p2 == (wtm ? Piece.WBISHOP : Piece.BBISHOP))) return true;break;}}if ((m.promoteTo != Piece.EMPTY) && (d1 != 0) && (d1 == d2)) {switch (d1) {case 8:case -8:case 1:case -1:if ((p == Piece.WQUEEN) || (p == Piece.WROOK)) if ((d1 != 0) && (MoveGen.nextPiece(pos,m.from,d1) == oKing)) return true;break;case 9:case 7:case -9:case -7:if ((p == Piece.WQUEEN) || (p == Piece.WBISHOP)) {if ((d1 != 0) && (MoveGen.nextPiece(pos,m.from,d1) == oKing)) return true;}break;}}if (p == Piece.WKING) {if (m.to - m.from == 2) {if (MoveGen.nextPieceSafe(pos,m.from,-1) == oKing) return true;if (MoveGen.nextPieceSafe(pos,m.from + 1,wtm ? 8 : -8) == oKing) return true;} else if (m.to - m.from == -2) {if (MoveGen.nextPieceSafe(pos,m.from,1) == oKing) return true;if (MoveGen.nextPieceSafe(pos,m.from - 1,wtm ? 8 : -8) == oKing) return true;}} else if (p == Piece.WPAWN) {if (pos.getPiece(m.to) == Piece.EMPTY) {int dx=Position.getX(m.to) - Position.getX(m.from);if (dx != 0) {int epSq=m.from + dx;int d3=BitBoard.getDirection(epSq,oKingSq);switch (d3) {case 9:case 7:case -9:case -7:if (MoveGen.nextPiece(pos,epSq,d3) == oKing) {int p2=MoveGen.nextPieceSafe(pos,epSq,-d3);if ((p2 == (wtm ? Piece.WQUEEN : Piece.BQUEEN)) || (p2 == (wtm ? Piece.WBISHOP : Piece.BBISHOP))) return true;}break;case 1:if (MoveGen.nextPiece(pos,Math.max(epSq,m.from),d3) == oKing) {int p2=MoveGen.nextPieceSafe(pos,Math.min(epSq,m.from),-d3);if ((p2 == (wtm ? Piece.WQUEEN : Piece.BQUEEN)) || (p2 == (wtm ? Piece.WROOK : Piece.BROOK))) return true;}break;case -1:if (MoveGen.nextPiece(pos,Math.min(epSq,m.from),d3) == oKing) {int p2=MoveGen.nextPieceSafe(pos,Math.max(epSq,m.from),-d3);if ((p2 == (wtm ? Piece.WQUEEN : Piece.BQUEEN)) || (p2 == (wtm ? Piece.WROOK : Piece.BROOK))) return true;}break;}}}}return false;}  }
class C{  @Deprecated public BitmapDrawable(java.io.InputStream is){  this(new BitmapState(BitmapFactory.decodeStream(is)),null);  if (mBitmap == null) {    android.util.Log.w("BitmapDrawable","BitmapDrawable cannot decode " + is);  }}  }
class C{  public PathImpl remove(String scheme){  SchemeRoot oldRoot=getUpdateMap().remove(scheme);  return oldRoot != null ? oldRoot.getRoot() : null;}  }
class C{  public void appendQuotedChars(StringBuffer toAddTo){  appendQuoted(chars,toAddTo);}  }
class C{  private void containerBrowse(){  Shell shell=new Shell(Display.getDefault());  SaveAsDialog saveas=new SaveAsDialog(shell);  if (saveas.open() == SaveAsDialog.OK) {    IPath result=saveas.getResult();    file.setText(result.toOSString());  }}  }
class C{  public ProcedureFJTask(ProcedureFJTaskRunner<T,BT> newFJTaskRunner,ProcedureFactory<BT> newProcedureFactory,List<T> list,int index,int sectionSize,boolean isLast){  this.taskRunner=newFJTaskRunner;  this.procedureFactory=newProcedureFactory;  this.list=list;  this.start=index * sectionSize;  this.end=isLast ? this.list.size() : this.start + sectionSize;}  }
class C{  public AtomicFile(File baseName){  mBaseName=baseName;  mBackupName=new File(baseName.getPath() + ".bak");}  }
class C{  private void assignNORGates(LogicCircuit lc,ArrayList<ArrayList<Gate>> repr_assignment,int[] rbs_asn){  for (int i=0; i < lc.get_logic_gates().size(); ++i) {    lc.get_logic_gates().get(i).Name=repr_assignment.get(i).get(rbs_asn[i]).Name;  }}  }
class C{  public boolean isOnCluster(){  return m_onCluster;}  }
class C{  public String convertBinaryLogicalOperatorToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  private JSONArray readArray() throws JSONException {  JSONArray result=new JSONArray();  boolean hasTrailingSeparator=false;  while (true) {switch (nextCleanInternal()) {case -1:      throw syntaxError("Unterminated array");case ']':    if (hasTrailingSeparator) {      result.put(null);    }  return result;case ',':case ';':result.put(null);hasTrailingSeparator=true;continue;default :pos--;}result.put(nextValue());switch (nextCleanInternal()) {case ']':return result;case ',':case ';':hasTrailingSeparator=true;continue;default :throw syntaxError("Unterminated array");}}}  }
class C{  CreateOscOutMessageAction(){  super("Create OSC out message");  putValue(Action.LONG_DESCRIPTION,"Create a new OSC out message");}  }
class C{  public void testBug16634180() throws Exception {  if (Util.isJdbc4()) {    return;  }  createTable("testBug16634180","(pk integer primary key, val integer)","InnoDB");  this.stmt.executeUpdate("insert into testBug16634180 values(0,0)");  Connection c1=null;  Connection c2=null;  try {    c1=getConnectionWithProps(new Properties());    c1.setAutoCommit(false);    Statement s1=c1.createStatement();    s1.executeUpdate("update testBug16634180 set val=val+1 where pk=0");    c2=getConnectionWithProps(new Properties());    c2.setAutoCommit(false);    Statement s2=c2.createStatement();    try {      s2.executeUpdate("update testBug16634180 set val=val+1 where pk=0");      fail("ER_LOCK_WAIT_TIMEOUT should be thrown.");    } catch (    MySQLTransientException ex) {      assertEquals(MysqlErrorNumbers.ER_LOCK_WAIT_TIMEOUT,ex.getErrorCode());      assertEquals(SQLError.SQL_STATE_ROLLBACK_SERIALIZATION_FAILURE,ex.getSQLState());      assertEquals("Lock wait timeout exceeded; try restarting transaction",ex.getMessage());    }  }  finally {    if (c1 != null) {      c1.close();    }    if (c2 != null) {      c2.close();    }  }}  }
class C{  public void closeForWrites(){  super.closeForWrites();  releaseWriteCache();}  }
class C{  public static Size fromFraction(double widthFraction,double heightFraction){  return new Size(EXPLICIT_DIMENSION,widthFraction,AVKey.FRACTION,EXPLICIT_DIMENSION,heightFraction,AVKey.FRACTION);}  }
class C{  protected void tearDown() throws Exception {  stunStack.removeSocket(localAddress);  localSock.close();  dummyServerSocket.close();  msgFixture.tearDown();  msgFixture=null;  super.tearDown();}  }
class C{  public TechnicalServiceNotAliveException(Reason reason,Object[] params,Throwable t){  super(reason.toString(),t,params);  setMessageKey(getMessageKey() + "." + reason);}  }
class C{  public Vector(double x,double y,double z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  protected SVGOMFETileElement(){}  }
class C{  private static Element createBindNode(Element modelElement,Element node,Hashtable bindings,Hashtable<String,String> problemList,Hashtable<String,String> problemListItems){  Element bindNode=modelElement.createElement(NAMESPACE_XFORMS,null);  bindNode.setName(NODE_BIND);  String parentName=((Element)node.getParent()).getName();  String binding=node.getName();  if (bindings.containsKey(binding)) {    String oldBinding=binding;    binding=parentName + "_" + binding;    if (sharedRestrictions != null) {      List<String> bindingList=sharedRestrictions.get(oldBinding);      if (bindingList == null) {        bindingList=new ArrayList<String>();        sharedRestrictions.put(oldBinding,bindingList);      }      bindingList.add(binding);    }    problemListItems.put(binding,parentName);  } else {    if (!(parentName.equalsIgnoreCase("obs") || parentName.equalsIgnoreCase("patient") || parentName.equalsIgnoreCase("encounter")|| parentName.equalsIgnoreCase("problem_list")|| parentName.equalsIgnoreCase("orders"))) {    }  }  bindNode.setAttribute(null,ATTRIBUTE_ID,binding);  String name=node.getName();  String nodeset=getNodesetAttValue(node);  if (parentName.equalsIgnoreCase(NODE_PROBLEM_LIST)) {    problemList.put(name,name);    nodeset=getNodePath(node);  }  if (problemList.containsKey(parentName)) {    if (problemListItems.contains(name)) {      List<String> repeats=repeatSharedKids.get(name);      if (repeats == null) {        repeats=new ArrayList<String>();        repeatSharedKids.put(name,repeats);      }      repeats.add(problemListItems.get(name));    }    problemListItems.put(name,parentName);  }  bindNode.setAttribute(null,ATTRIBUTE_NODESET,nodeset);  if (!((Element)((Element)node.getParent()).getParent()).getName().equals(NODE_PROBLEM_LIST))   modelElement.addChild(Element.ELEMENT,bindNode);  bindings.put(binding,bindNode);  if (nodesets != null)   nodesets.put(binding,nodeset);  return bindNode;}  }
class C{  public static GeoTimeSerie fillnext(GeoTimeSerie gts){  GeoTimeSerie filled=gts.clone();  if (!isBucketized(filled)) {    return filled;  }  sort(filled,true);  int nticks=filled.values;  if (0 != nticks) {    long lasttick=filled.ticks[0];    filled.setSizeHint(1 + (int)((lasttick - (filled.lastbucket - filled.bucketcount * filled.bucketspan)) / filled.bucketspan));  }  int idx=0;  int bucketidx=0;  long bucketts=filled.lastbucket - bucketidx * filled.bucketspan;  Object prevValue=null;  long prevLocation=GeoTimeSerie.NO_LOCATION;  long prevElevation=GeoTimeSerie.NO_ELEVATION;  long bucketoffset=filled.lastbucket % filled.bucketspan;  while (bucketidx < filled.bucketcount) {    while (idx < nticks && bucketoffset != (filled.ticks[idx] % filled.bucketspan)) {      idx++;    }    if (idx >= nticks) {      break;    }    while (bucketidx >= 0 && filled.ticks[idx] < bucketts) {      if (null != prevValue) {        setValue(filled,bucketts,prevLocation,prevElevation,prevValue,false);      }      bucketidx++;      bucketts=filled.lastbucket - bucketidx * filled.bucketspan;    }    bucketidx++;    bucketts=filled.lastbucket - bucketidx * filled.bucketspan;    prevValue=valueAtIndex(filled,idx);    prevLocation=null != filled.locations ? filled.locations[idx] : GeoTimeSerie.NO_LOCATION;    prevElevation=null != filled.elevations ? filled.elevations[idx] : GeoTimeSerie.NO_ELEVATION;    idx++;  }  while (bucketidx < filled.bucketcount) {    if (null != prevValue) {      setValue(filled,bucketts,prevLocation,prevElevation,prevValue,false);    }    bucketidx++;    bucketts=filled.lastbucket - bucketidx * filled.bucketspan;  }  return filled;}  }
class C{  public static String toAsciiString(byte[] buffer,int startPos,int length){  char[] charArray=new char[length];  int readpoint=startPos;  for (int i=0; i < length; i++) {    charArray[i]=(char)buffer[readpoint];    readpoint++;  }  return new String(charArray);}  }
class C{  public int count_examples(){  return train_size;}  }
class C{  public static void triangulate(DTSweepContext tcx){  tcx.createAdvancingFront();  sweep(tcx);  if (tcx.getTriangulationMode() == TriangulationMode.POLYGON) {    finalizationPolygon(tcx);  } else {    finalizationConvexHull(tcx);  }  tcx.done();}  }
class C{  public T alt(String value){  return attr("alt",value);}  }
class C{  public SourceRange csp(JCTree tree){  if (tree == null)   return null;  tree.accept(this);  if (result != null) {    positions.put(tree,result);  }  return result;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getR_StatusCategory_ID() == 0) {    MStatusCategory sc=MStatusCategory.getDefault(getCtx());    if (sc != null && sc.getR_StatusCategory_ID() != 0)     setR_StatusCategory_ID(sc.getR_StatusCategory_ID());  }  return true;}  }
class C{  public static double bitor(double left,double right){  return (int)left | (int)right;}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {  try {    write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));  } catch (  org.apache.thrift.TException te) {    throw new java.io.IOException(te);  }}  }
class C{  public void pointerPress(float x,float y,String componentName){  TestUtils.pointerPress(x,y,componentName);}  }
class C{  public void applyProperties(Object o){  applyProperties(o,false);}  }
class C{  public static void load(String file) throws IOException {  Properties props=new Properties();  InputStream is=new FileInputStream(file);  props.load(is);  is.close();  for (final Enumeration<?> e=props.keys(); e.hasMoreElements(); ) {    final String key=(String)e.nextElement();    System.setProperty(key,props.getProperty(key));  }}  }
class C{  private void loadCommandedButton(){  if (cart.getCartBook().isCommanded(book)) {    commander.setText(R.string.remove);  } else {    commander.setText(R.string.commander);  }}  }
class C{  public void testSchemasIgnoredWithFile() throws ReplicatorException, InterruptedException {  ReplicateFilter rf=new ReplicateFilter();  rf.setTungstenSchema("tungsten_foo");  rf.setFilePrefix("filter/testSchemasIgnoredWithFile");  filterHelper.setFilter(rf);  verifyStmtIgnore(filterHelper,0,"bar","create database foo");  verifyStmtIgnore(filterHelper,1,"foo","drop database bar");  verifyStmtIgnore(filterHelper,2,"foo","delete from bar2.test where id=2");  verifyStmtIgnore(filterHelper,3,"foo","insert into foobar1.x1 values(1,2,3)");  verifyStmtIgnore(filterHelper,4,"foo","update test_tab set age=32 where id=1");  verifyStmtAccept(filterHelper,5,"foo","insert into test.tab values(52,1)");  filterHelper.done();}  }
class C{  static void validate(CertPath cpOriginal,List<X509Certificate> reversedCertList,List<PKIXCertPathChecker> certPathCheckers) throws CertPathValidatorException {  int cpSize=reversedCertList.size();  if (debug != null) {    debug.println("--------------------------------------------------" + "------------");    debug.println("Executing PKIX certification path validation " + "algorithm.");  }  for (int i=0; i < cpSize; i++) {    X509Certificate currCert=reversedCertList.get(i);    if (debug != null) {      debug.println("Checking cert" + (i + 1) + " - Subject: "+ currCert.getSubjectX500Principal());    }    Set<String> unresCritExts=currCert.getCriticalExtensionOIDs();    if (unresCritExts == null) {      unresCritExts=Collections.<String>emptySet();    }    if (debug != null && !unresCritExts.isEmpty()) {      StringJoiner joiner=new StringJoiner(", ","{","}");      for (      String oid : unresCritExts) {        joiner.add(oid);      }      debug.println("Set of critical extensions: " + joiner.toString());    }    for (int j=0; j < certPathCheckers.size(); j++) {      PKIXCertPathChecker currChecker=certPathCheckers.get(j);      if (debug != null) {        debug.println("-Using checker" + (j + 1) + " ... ["+ currChecker.getClass().getName()+ "]");      }      if (i == 0)       currChecker.init(false);      try {        currChecker.check(currCert,unresCritExts);        if (debug != null) {          debug.println("-checker" + (j + 1) + " validation succeeded");        }      } catch (      CertPathValidatorException cpve) {        throw new CertPathValidatorException(cpve.getMessage(),cpve.getCause(),cpOriginal,cpSize - (i + 1),cpve.getReason());      }    }    if (!unresCritExts.isEmpty()) {      throw new CertPathValidatorException("unrecognized " + "critical extension(s)",null,cpOriginal,cpSize - (i + 1),PKIXReason.UNRECOGNIZED_CRIT_EXT);    }    if (debug != null)     debug.println("\ncert" + (i + 1) + " validation succeeded.\n");  }  if (debug != null) {    debug.println("Cert path validation succeeded. (PKIX validation " + "algorithm)");    debug.println("-------------------------------------------------" + "-------------");  }}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy,int duration){  mMode=SCROLL_MODE;  mScrollerX.startScroll(startX,dx,duration);  mScrollerY.startScroll(startY,dy,duration);}  }
class C{  public void close() throws java.io.IOException {  return;}  }
class C{  public int hashCode(){  if (init_with_ip || wildcard) {    return this.getName().hashCode();  }  try {    getCanonName();  } catch (  UnknownHostException uhe) {  }  if (invalid || cname == null)   return this.getName().hashCode(); else   return this.cname.hashCode();}  }
class C{  private List<PatternReference> readPatternsFromMongo(){  final DBCollection collection=mongo.getDB().getCollection(patternCollection);  final List<PatternReference> patterns=new ArrayList<>((int)collection.count());  final DBCursor cursor=collection.find();  while (cursor.hasNext()) {    final DBObject o=cursor.next();    final BasicDBList list=(BasicDBList)o.get("words");    final List<Word> tokens=list.stream().map(null).filter(null).collect(Collectors.toList());    final PatternReference pattern=new PatternReference(o.get("_id").toString(),tokens);    pattern.setSourceType(((BasicDBObject)o.get("source")).getString("type"));    pattern.setTargetType(((BasicDBObject)o.get("target")).getString("type"));    patterns.add(pattern);  }  return patterns;}  }
class C{  public final void testDomainNameWithContextAndResourceIdParameters(){  assertNotNull(Validators.domainName(getContext(),android.R.string.cancel));}  }
class C{  private static void addExcludedNames(Set<Name> result,Wildcard wc1,Wildcard wc2){  for (  Name name : wc1.getExcludedNames()) {    if (!wc2.contains(name))     result.add(name);  }}  }
class C{  public void print(int i){  writer.print(i);}  }
class C{  public static synchronized JMXConnectorServer startRemoteConnectorServer(String portStr,Properties props){  final int port;  try {    port=Integer.parseInt(portStr);  } catch (  NumberFormatException x) {    throw new AgentConfigurationError(INVALID_JMXREMOTE_PORT,x,portStr);  }  if (port < 0) {    throw new AgentConfigurationError(INVALID_JMXREMOTE_PORT,portStr);  }  int rmiPort=0;  String rmiPortStr=props.getProperty(PropertyNames.RMI_PORT);  try {    if (rmiPortStr != null) {      rmiPort=Integer.parseInt(rmiPortStr);    }  } catch (  NumberFormatException x) {    throw new AgentConfigurationError(INVALID_JMXREMOTE_RMI_PORT,x,rmiPortStr);  }  if (rmiPort < 0) {    throw new AgentConfigurationError(INVALID_JMXREMOTE_RMI_PORT,rmiPortStr);  }  final String useAuthenticationStr=props.getProperty(PropertyNames.USE_AUTHENTICATION,DefaultValues.USE_AUTHENTICATION);  final boolean useAuthentication=Boolean.valueOf(useAuthenticationStr).booleanValue();  final String useSslStr=props.getProperty(PropertyNames.USE_SSL,DefaultValues.USE_SSL);  final boolean useSsl=Boolean.valueOf(useSslStr).booleanValue();  final String useRegistrySslStr=props.getProperty(PropertyNames.USE_REGISTRY_SSL,DefaultValues.USE_REGISTRY_SSL);  final boolean useRegistrySsl=Boolean.valueOf(useRegistrySslStr).booleanValue();  final String enabledCipherSuites=props.getProperty(PropertyNames.SSL_ENABLED_CIPHER_SUITES);  String enabledCipherSuitesList[]=null;  if (enabledCipherSuites != null) {    StringTokenizer st=new StringTokenizer(enabledCipherSuites,",");    int tokens=st.countTokens();    enabledCipherSuitesList=new String[tokens];    for (int i=0; i < tokens; i++) {      enabledCipherSuitesList[i]=st.nextToken();    }  }  final String enabledProtocols=props.getProperty(PropertyNames.SSL_ENABLED_PROTOCOLS);  String enabledProtocolsList[]=null;  if (enabledProtocols != null) {    StringTokenizer st=new StringTokenizer(enabledProtocols,",");    int tokens=st.countTokens();    enabledProtocolsList=new String[tokens];    for (int i=0; i < tokens; i++) {      enabledProtocolsList[i]=st.nextToken();    }  }  final String sslNeedClientAuthStr=props.getProperty(PropertyNames.SSL_NEED_CLIENT_AUTH,DefaultValues.SSL_NEED_CLIENT_AUTH);  final boolean sslNeedClientAuth=Boolean.valueOf(sslNeedClientAuthStr).booleanValue();  final String sslConfigFileName=props.getProperty(PropertyNames.SSL_CONFIG_FILE_NAME);  String loginConfigName=null;  String passwordFileName=null;  String accessFileName=null;  if (useAuthentication) {    loginConfigName=props.getProperty(PropertyNames.LOGIN_CONFIG_NAME);    if (loginConfigName == null) {      passwordFileName=props.getProperty(PropertyNames.PASSWORD_FILE_NAME,getDefaultFileName(DefaultValues.PASSWORD_FILE_NAME));      checkPasswordFile(passwordFileName);    }    accessFileName=props.getProperty(PropertyNames.ACCESS_FILE_NAME,getDefaultFileName(DefaultValues.ACCESS_FILE_NAME));    checkAccessFile(accessFileName);  }  final String bindAddress=props.getProperty(PropertyNames.HOST);  if (log.debugOn()) {    log.debug("startRemoteConnectorServer",Agent.getText("jmxremote.ConnectorBootstrap.starting") + "\n\t" + PropertyNames.PORT+ "="+ port+ (bindAddress == null ? "" : "\n\t" + PropertyNames.HOST + "="+ bindAddress)+ "\n\t"+ PropertyNames.RMI_PORT+ "="+ rmiPort+ "\n\t"+ PropertyNames.USE_SSL+ "="+ useSsl+ "\n\t"+ PropertyNames.USE_REGISTRY_SSL+ "="+ useRegistrySsl+ "\n\t"+ PropertyNames.SSL_CONFIG_FILE_NAME+ "="+ sslConfigFileName+ "\n\t"+ PropertyNames.SSL_ENABLED_CIPHER_SUITES+ "="+ enabledCipherSuites+ "\n\t"+ PropertyNames.SSL_ENABLED_PROTOCOLS+ "="+ enabledProtocols+ "\n\t"+ PropertyNames.SSL_NEED_CLIENT_AUTH+ "="+ sslNeedClientAuth+ "\n\t"+ PropertyNames.USE_AUTHENTICATION+ "="+ useAuthentication+ (useAuthentication ? (loginConfigName == null ? ("\n\t" + PropertyNames.PASSWORD_FILE_NAME + "="+ passwordFileName) : ("\n\t" + PropertyNames.LOGIN_CONFIG_NAME + "="+ loginConfigName)) : "\n\t" + Agent.getText("jmxremote.ConnectorBootstrap.noAuthentication"))+ (useAuthentication ? ("\n\t" + PropertyNames.ACCESS_FILE_NAME + "="+ accessFileName) : "")+ "");  }  final MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();  JMXConnectorServer cs=null;  JMXServiceURL url=null;  try {    final JMXConnectorServerData data=exportMBeanServer(mbs,port,rmiPort,useSsl,useRegistrySsl,sslConfigFileName,enabledCipherSuitesList,enabledProtocolsList,sslNeedClientAuth,useAuthentication,loginConfigName,passwordFileName,accessFileName,bindAddress);    cs=data.jmxConnectorServer;    url=data.jmxRemoteURL;    log.config("startRemoteConnectorServer",Agent.getText("jmxremote.ConnectorBootstrap.ready",url.toString()));  } catch (  Exception e) {    throw new AgentConfigurationError(AGENT_EXCEPTION,e,e.toString());  }  try {    Map<String,String> properties=new HashMap<>();    properties.put("remoteAddress",url.toString());    properties.put("authenticate",useAuthenticationStr);    properties.put("ssl",useSslStr);    properties.put("sslRegistry",useRegistrySslStr);    properties.put("sslNeedClientAuth",sslNeedClientAuthStr);    ConnectorAddressLink.exportRemote(properties);  } catch (  Exception e) {    log.debug("startRemoteConnectorServer",e);  }  return cs;}  }
class C{  static boolean isRunningInsideMatlab(){  boolean available;  try {    Class<?> matlabClass=Class.forName("com.mathworks.jmi.Matlab");    Method isAvailableMethod=matlabClass.getMethod("isMatlabAvailable");    available=(Boolean)isAvailableMethod.invoke(null);  } catch (  Throwable t) {    available=false;  }  return available;}  }
class C{  public String IDIndexTipText(){  return "The position (starting from 1) where the attribute will be inserted " + "(first and last are valid indices).";}  }
class C{  private Type inferFunctionRefTypeArg(Tree.StaticMemberOrTypeExpression smte,List<TypeParameter> typeParams,TypedReference param,Declaration pd,Reference arg,List<Parameter> apl,List<Parameter> ppl,TypeParameter tp,boolean findingUpperBounds){  List<Type> list=new ArrayList<Type>();  for (int i=0; i < apl.size() && i < ppl.size(); i++) {    Parameter ap=apl.get(i);    Parameter pp=ppl.get(i);    Type type=param.getTypedParameter(pp).getFullType();    Type template=arg.getTypedParameter(ap).getFullType();    Type it=inferTypeArg(tp,template,type,findingUpperBounds,smte);    if (!(isTypeUnknown(it) || involvesTypeParams(pd,it))) {      addToUnionOrIntersection(findingUpperBounds,list,it);    }  }  return unionOrIntersection(findingUpperBounds,list);}  }
class C{  public T execute(final Callable<T> testcase,ExecutorService executor,long timeout,boolean timeout_based_on_cpu) throws TimeoutException, InterruptedException, ExecutionException {  if (!bean.isCurrentThreadCpuTimeSupported() && timeout_based_on_cpu) {    timeout_based_on_cpu=false;    logger.warn("Requested to use timeout_based_on_cpu, but it is not supported by the JVM/OS");  }  if (!timeout_based_on_cpu) {    return executeWithTimeout(testcase,executor,timeout);  } else {    return executeWithCpuBasedTimeout(testcase,executor,timeout);  }}  }
class C{  private VerificationResult verifySignature(AuthSuccess authResp,DiscoveryInformation discovered,VerificationResult result) throws AssociationException, MessageException, DiscoveryException {  if (discovered == null || authResp == null) {    _log.error("Can't verify signature: " + "null assertion or discovered information.");    result.setStatusMsg("Can't verify signature: " + "null assertion or discovered information.");    return result;  }  Identifier claimedId=discovered.isVersion2() ? _discovery.parseIdentifier(authResp.getClaimed()) : discovered.getClaimedIdentifier();  String handle=authResp.getHandle();  URL op=discovered.getOPEndpoint();  Association assoc=_associations.load(op.toString(),handle);  if (assoc != null) {    _log.info("Found association: " + assoc.getHandle() + " verifying signature locally...");    String text=authResp.getSignedText();    String signature=authResp.getSignature();    if (assoc.verifySignature(text,signature)) {      result.setVerifiedId(claimedId);      if (DEBUG)       _log.debug("Local signature verification succeeded.");    } else {      result.setStatusMsg("Local signature verification failed");      if (DEBUG)       _log.debug("Local signature verification failed.");    }  } else {    _log.info("No association found, " + "contacting the OP for direct verification...");    VerifyRequest vrfy=VerifyRequest.createVerifyRequest(authResp);    ParameterList responseParams=new ParameterList();    int respCode=call(op.toString(),vrfy,responseParams);    if (HttpStatus.SC_OK == respCode) {      VerifyResponse vrfyResp=VerifyResponse.createVerifyResponse(responseParams);      vrfyResp.validate();      if (vrfyResp.isSignatureVerified()) {        String invalidateHandle=vrfyResp.getInvalidateHandle();        if (invalidateHandle != null)         _associations.remove(op.toString(),invalidateHandle);        result.setVerifiedId(claimedId);        if (DEBUG)         _log.debug("Direct signature verification succeeded " + "with OP: " + op);      } else {        if (DEBUG)         _log.debug("Direct signature verification failed " + "with OP: " + op);        result.setStatusMsg("Direct signature verification failed.");      }    } else {      DirectError err=DirectError.createDirectError(responseParams);      if (DEBUG)       _log.debug("Error verifying signature with the OP: " + op + " error message: "+ err.keyValueFormEncoding());      result.setStatusMsg("Error verifying signature with the OP: " + err.getErrorMsg());    }  }  Identifier verifiedID=result.getVerifiedId();  if (verifiedID != null)   _log.info("Verification succeeded for: " + verifiedID); else   _log.error("Verification failed for: " + authResp.getClaimed() + " reason: "+ result.getStatusMsg());  return result;}  }
class C{  public TFloatArrayList(){  this(DEFAULT_CAPACITY);}  }
class C{  public static void xmlEncode(String s,StringBuilder sb,boolean isEncodeSpecialChar){  if (s == null || s.length() == 0) {    return;  }  char c;  int i;  int len=s.length();  String t;  for (i=0; i < len; i+=1) {    c=s.charAt(i);    if (c == '&') {      sb.append("&amp;");    } else     if (c == '<') {      sb.append("&lt;");    } else     if (c == '>') {      sb.append("&gt;");    } else     if (c == '\'') {      sb.append("&apos;");    } else     if (c == '\"') {      sb.append("&quot;");    } else {      if ((c < ' ') && (isEncodeSpecialChar)) {        t="000" + Integer.toHexString(c);        sb.append("\\u");        sb.append(t.substring(t.length() - 4));      } else {        sb.append(c);      }    }  }}  }
class C{  public void addOIDCClient(String tenantName,OIDCClient oidcClient) throws Exception {  getService().addOIDCClient(tenantName,oidcClient,this.getServiceContext());}  }
class C{  public static int mapContainsKey(Map<?,?> m,Object o1){  if (o1 != null)   TestCluster.getInstance().addCastClassForContainer(o1.getClass());  return collectionContains(m.keySet(),o1);}  }
class C{  public static Map<String,Object> returnError(List<? extends Object> errorMessageList){  return returnProblem(ModelService.RESPOND_ERROR,null,errorMessageList,null,null);}  }
class C{  public static List<Object[]> transformTypedResultListToArrayList(List listOfObjects){  final List<Object[]> rezList=new ArrayList<Object[]>(listOfObjects.size());  for (  Object obj : listOfObjects) {    rezList.add(toObjectArray(obj));  }  return rezList;}  }
class C{  public static SendableDocumentMessageBuilder builder(){  return new SendableDocumentMessageBuilder();}  }
class C{  public void play(){  if (mUri == null) {    throw new IllegalStateException("Uri cannot be null. Call init() before calling this method");  }  if (mMediaPlayer == null) {    throw new IllegalStateException("Call init() before calling this method");  }  if (mMediaPlayer.isPlaying()) {    return;  }  mProgressUpdateHandler.postDelayed(mUpdateProgress,AUDIO_PROGRESS_UPDATE_TIME);  setViewsVisibility();  mMediaPlayer.start();  setPausable();}  }
class C{  public static Component build(int componentID,IceMediaStream mediaStream){  return new Component(componentID,mediaStream);}  }
class C{  public static ObjectAnimator nopeAnimation(View view,int delta){  PropertyValuesHolder pvhTranslateX=PropertyValuesHolder.ofKeyframe(View.TRANSLATION_X,Keyframe.ofFloat(0f,0),Keyframe.ofFloat(.10f,-delta),Keyframe.ofFloat(.26f,delta),Keyframe.ofFloat(.42f,-delta),Keyframe.ofFloat(.58f,delta),Keyframe.ofFloat(.74f,-delta),Keyframe.ofFloat(.90f,delta),Keyframe.ofFloat(1f,0f));  return ObjectAnimator.ofPropertyValuesHolder(view,pvhTranslateX).setDuration(500);}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  public void testLoad() throws Exception {  System.out.println("load");  final File file=File.createTempFile("testconf",".xml");  final ScanDirConfig instance=new ScanDirConfig(file.getAbsolutePath());  final ScanManagerConfig bean=new ScanManagerConfig("testLoad");  final DirectoryScannerConfig dir=new DirectoryScannerConfig("tmp");  dir.setRootDirectory(file.getParent());  bean.putScan(dir);  XmlConfigUtils.write(bean,new FileOutputStream(file),false);  instance.load();  assertEquals(bean,instance.getConfiguration());  bean.removeScan(dir.getName());  XmlConfigUtils.write(bean,new FileOutputStream(file),false);  assertNotSame(bean,instance.getConfiguration());  instance.load();  assertEquals(bean,instance.getConfiguration());}  }
class C{  public boolean isInviteFriendsSupported(){  return false;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  String[] imageFiles;  int numImages=0;  double noData=-32768;  int progress=0;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    String returnedHeader="";    for (i=0; i < numImages; i++) {      if (numImages > 1) {        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      GeoTiff gt=new GeoTiff(imageFiles[i]);      gt.read();      int compressionType=gt.getCompressionType();      if (compressionType != 1) {        showFeedback("GeoTiff import does not currently support compressed files.");        return;      }      boolean hasNoDataValue=gt.hasNoDataTag();      double nodata;      if (hasNoDataValue) {        nodata=gt.getNoData();      } else {        nodata=-32768;      }      int nRows=gt.getNumberRows();      int nCols=gt.getNumberColumns();      int dot=imageFiles[i].lastIndexOf(".");      String tiffExtension=imageFiles[i].substring(dot + 1);      whiteboxHeaderFile=imageFiles[i].replace(tiffExtension,"dep");      if (i == 0) {        returnedHeader=whiteboxHeaderFile;      }      whiteboxDataFile=imageFiles[i].replace(tiffExtension,"tas");      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxDataFile)).delete();      ByteOrder byteOrder=gt.getByteOrder();      WhiteboxRasterBase.DataScale myDataScale=WhiteboxRasterBase.DataScale.CONTINUOUS;      if (gt.getPhotometricInterpretation() == 2) {        myDataScale=WhiteboxRasterBase.DataScale.RGB;      }      final WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,gt.getNorth(),gt.getSouth(),gt.getEast(),gt.getWest(),nRows,nCols,myDataScale,WhiteboxRasterBase.DataType.FLOAT,nodata,nodata);      wbr.setByteOrder(byteOrder.toString());      double z;      int oldProgress=-1;      for (int row=0; row < nRows; row++) {        for (int col=0; col < nCols; col++) {          z=gt.getValue(row,col);          if (!hasNoDataValue && (z == -32768 || z == -Float.MAX_VALUE)) {            nodata=z;            hasNoDataValue=true;            wbr.setNoDataValue(nodata);          }          wbr.setValue(row,col,z);        }        progress=(int)(100f * row / (nRows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress("Importing GeoTiff file...",progress);        }      }      wbr.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      wbr.addMetadataEntry("Created on " + new Date());      String[] metaData=gt.showInfo();      for (int a=0; a < metaData.length; a++) {        wbr.addMetadataEntry(metaData[a]);      }      wbr.close();      gt.close();    }    if (!returnedHeader.isEmpty()) {      returnData(returnedHeader);    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public synchronized List<IComment> appendComment(final TypeInstance instance,final String commentText) throws CouldntSaveDataException, CouldntLoadDataException {  return backend.appendComment(instance,commentText);}  }
class C{  public Context(Context ctx,ClassDefinition c){  this(ctx,(MemberDefinition)null);}  }
class C{  public static void start(Application application){  start(application,new Settings());}  }
class C{  public SampleModel createCompatibleSampleModel(int w,int h){  int[] bOffs={2,1,0};  return new PixelInterleavedSampleModel(DataBuffer.TYPE_BYTE,w,h,3,w * 3,bOffs);}  }
class C{  public void onEvent(CqEvent aCqEvent){  if (true) {    throw new IllegalStateException(LocalizedStrings.CqListenerImpl_NOT_YET_SUPPORTED.toLocalizedString());  }}  }
class C{  private void appendDropBoxProcessHeaders(ProcessRecord process,String processName,StringBuilder sb){  if (process == null) {    sb.append("Process: ").append(processName).append("\n");    return;  }synchronized (this) {    sb.append("Process: ").append(processName).append("\n");    int flags=process.info.flags;    IPackageManager pm=AppGlobals.getPackageManager();    sb.append("Flags: 0x").append(Integer.toString(flags,16)).append("\n");    for (    String pkg : process.pkgList) {      sb.append("Package: ").append(pkg);      try {        PackageInfo pi=pm.getPackageInfo(pkg,0,UserHandle.getCallingUserId());        if (pi != null) {          sb.append(" v").append(pi.versionCode);          if (pi.versionName != null) {            sb.append(" (").append(pi.versionName).append(")");          }        }      } catch (      RemoteException e) {        Slog.e(TAG,"Error getting package info: " + pkg,e);      }      sb.append("\n");    }  }}  }
class C{  @Deprecated public <T>T readObject(byte[] data,Class<T> clazz){  return readDocument(data,clazz).get();}  }
class C{  public void decode(final ActiveMQBuffer buffer){  name=buffer.readString();  factoryClassName=buffer.readString();  int num=buffer.readInt();  if (params == null) {    if (num > 0) {      params=new HashMap<>();    }  } else {    params.clear();  }  for (int i=0; i < num; i++) {    String key=buffer.readString();    byte type=buffer.readByte();    Object val;switch (type) {case TYPE_BOOLEAN:{        val=buffer.readBoolean();        break;      }case TYPE_INT:{      val=buffer.readInt();      break;    }case TYPE_LONG:{    val=buffer.readLong();    break;  }case TYPE_STRING:{  val=buffer.readString();  break;}default :{throw ActiveMQClientMessageBundle.BUNDLE.invalidType(type);}}params.put(key,val);}}  }
class C{  public static <L>void bindEventsToMethod(final Object target,final String methodName,final Object eventSource,final Class<L> listenerType,final String... eventTypes){  final L listener=listenerType.cast(Proxy.newProxyInstance(target.getClass().getClassLoader(),new Class[]{listenerType},new EventBindingInvocationHandler(target,methodName,eventTypes)));  addEventListener(eventSource,listenerType,listener);}  }
class C{  public static TestSuite suite(){  return new TestSuite(ArrayConverterTestCase.class);}  }
class C{  protected static void invokeAndWait(Runnable r){  if (SwingUtilities.isEventDispatchThread()) {    r.run();  } else {    try {      SwingUtilities.invokeAndWait(r);    } catch (    InterruptedException ex) {      ex.printStackTrace();    }catch (    InvocationTargetException ex) {      ex.printStackTrace();    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static TraceList createTrace(final AbstractSQLProvider provider,final INaviProject project,final String name,final String description) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE00573: Provider argument can not be null");  Preconditions.checkNotNull(project,"IE00574: Project argument can not be null");  Preconditions.checkNotNull(name,"IE00575: Name argument can not be null");  Preconditions.checkNotNull(description,"IE02194: Description argument can not be null");  return createTrace(provider,CTableNames.PROJECT_TRACES_TABLE,"project_id",CTableNames.PROJECTS_TABLE,project.getConfiguration().getId(),name,description);}  }
class C{  @Override public void after(final DerivationState state,final int level,int tailNodeIndex){}  }
class C{  public void propertyChange(PropertyChangeEvent e){  super.propertyChange(e);  String propertyName=e.getPropertyName();  if (propertyName == null) {    return;  }  if (propertyName.equals("windowDecorationStyle")) {    JRootPane root=(JRootPane)e.getSource();    int style=root.getWindowDecorationStyle();    uninstallClientDecorations(root);    Container parent=root.getParent();    if (parent != null && (parent instanceof JFrame || parent instanceof JDialog) && style != JRootPane.NONE) {      installClientDecorations(root);    }  } else   if (propertyName.equals("ancestor")) {    uninstallWindowListeners(root);    installWindowListeners(root,root.getParent());  } else   if (propertyName.equals(UNIFIED_TOOLBAR_LOOK)) {    updateTextured();  }}  }
class C{  public void reset(){  currentByteArrayIndex=0;}  }
class C{  public void stopObservingFontPrefs(){  mFontSizePrefs.removeObserver(mFontSizeObserver);}  }
class C{  public static void gc(Env env){  Plan.handleUserCollectionRequest();}  }
class C{  public void beginAccept2(WebRequest theRequest){  theRequest.addHeader("Accept","text/plain; q=0.5, text/html, text/x-dvi; q=0.8, text/x-c");}  }
class C{  public void testLineNoLink() throws Exception {  Assert.assertNull("File with no lines should not work",new PyTracebackParser().findLinkInTrace("File \"foo/bar.py\""));  Assert.assertNull("No file name provided, but link found",new PyTracebackParser().findLinkInTrace("line 42 failed"));}  }
class C{  public void restartServiceByNodeName(String nodeName,String name){  UriBuilder builder=client.uriBuilder(CONTROL_RESTART_URL);  addQueryParam(builder,NODE_NAME_PARAM,nodeName);  addQueryParam(builder,NAME_PARAM,name);  client.postURI(String.class,builder.build());}  }
class C{  protected SelectUniversal createExistsStatement() throws SQLScopeException, ScopeException {  Scope outerScope=new Scope(this.getScope());  SelectUniversal inner=new SelectUniversal(this,outerScope);  inner.select(ExpressionMaker.CONSTANT(1));  IPiece[] pieces=new IPiece[]{new SubSelectPiece(inner)};  OperatorPiece exists=new OperatorPiece(Operators.EXISTS,pieces);  this.getStatement().getConditionalPieces().add(new WherePiece(exists));  return inner;}  }
class C{  private void layoutComponents(){  JMenu file=new JMenu(localization.getString("menu.file"));  file.add(new JMenuItem(saveAction));  file.addSeparator();  file.add(new JMenuItem(exitAction));  JMenuBar menu=new JMenuBar();  menu.add(file);  setJMenuBar(menu);  JTextArea textArea=new JTextArea(results);  textArea.setWrapStyleWord(true);  getContentPane().setLayout(new BorderLayout());  getContentPane().add(new JScrollPane(textArea),BorderLayout.CENTER);}  }
class C{  public void onDrawerClosed(View view){  super.onDrawerClosed(view);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:07.490 -0500",hash_original_method="2B7677CA7551A1CB975DB188DC4C64F4",hash_generated_method="0ABE137D752E72CFDE12717489F303EF") public Mesh create(){  mRS.validate();  int[] vtx=new int[mVertexTypeCount];  int[] idx=new int[mIndexTypes.size()];  int[] prim=new int[mIndexTypes.size()];  Allocation[] vertexBuffers=new Allocation[mVertexTypeCount];  Allocation[] indexBuffers=new Allocation[mIndexTypes.size()];  Primitive[] primitives=new Primitive[mIndexTypes.size()];  for (int ct=0; ct < mVertexTypeCount; ct++) {    Allocation alloc=null;    Entry entry=mVertexTypes[ct];    if (entry.t != null) {      alloc=Allocation.createTyped(mRS,entry.t,mUsage);    } else     if (entry.e != null) {      alloc=Allocation.createSized(mRS,entry.e,entry.size,mUsage);    }    vertexBuffers[ct]=alloc;    vtx[ct]=alloc.getID();  }  for (int ct=0; ct < mIndexTypes.size(); ct++) {    Allocation alloc=null;    Entry entry=(Entry)mIndexTypes.elementAt(ct);    if (entry.t != null) {      alloc=Allocation.createTyped(mRS,entry.t,mUsage);    } else     if (entry.e != null) {      alloc=Allocation.createSized(mRS,entry.e,entry.size,mUsage);    }    int allocID=(alloc == null) ? 0 : alloc.getID();    indexBuffers[ct]=alloc;    primitives[ct]=entry.prim;    idx[ct]=allocID;    prim[ct]=entry.prim.mID;  }  int id=mRS.nMeshCreate(vtx,idx,prim);  Mesh newMesh=new Mesh(id,mRS);  newMesh.mVertexBuffers=vertexBuffers;  newMesh.mIndexBuffers=indexBuffers;  newMesh.mPrimitives=primitives;  return newMesh;}  }
class C{  public SparseLongArray(){  this(10);}  }
class C{  public RetrievalMethod itemRetrievalMethod(int i) throws XMLSecurityException {  Element e=XMLUtils.selectDsNode(this.constructionElement.getFirstChild(),Constants._TAG_RETRIEVALMETHOD,i);  if (e != null) {    return new RetrievalMethod(e,this.baseURI);  }  return null;}  }
class C{  protected DataSubscriber<Object> verifyGetAndSubscribe(Supplier<DataSource<Object>> dataSourceSupplier,DataSource<Object> underlyingDataSource,boolean expectMoreInteractions){  mInOrder.verify(dataSourceSupplier).get();  ArgumentCaptor<DataSubscriber> captor=ArgumentCaptor.forClass(DataSubscriber.class);  mInOrder.verify(underlyingDataSource).subscribe(captor.capture(),any(Executor.class));  if (!expectMoreInteractions) {    verifyNoMoreInteractionsAll();  }  return captor.getValue();}  }
class C{  @Override public boolean supportsKnowledge(){  return false;}  }
class C{  public void mapPathsToMetadata(Object value){  if (value == null) {    return;  } else   if (Draft2SchemaHelper.isFileFromValue(value)) {    String path=Draft2FileValueHelper.getPath(value);    String originalPath=Draft2FileValueHelper.getOriginalPath(value);    logger.debug("Putting metadata for file {}",path);    if (!pathToMetadata.containsKey(path)) {      pathToMetadata.put(path,Draft2FileValueHelper.getMetadata(value));      if (originalPath != null) {        pathToMetadata.put(originalPath,Draft2FileValueHelper.getMetadata(value));      }    }    List<Map<String,Object>> secondaryFiles=Draft2FileValueHelper.getSecondaryFiles(value);    if (secondaryFiles != null) {      for (      Object subvalue : secondaryFiles) {        String subpath=Draft2FileValueHelper.getPath(subvalue);        String suboriginalPath=Draft2FileValueHelper.getOriginalPath(subvalue);        if (!pathToMetadata.containsKey(subpath)) {          pathToMetadata.put(subpath,Draft2FileValueHelper.getMetadata(subvalue));          if (suboriginalPath != null) {            pathToMetadata.put(suboriginalPath,Draft2FileValueHelper.getMetadata(subvalue));          }        }      }    }  } else   if (value instanceof List<?>) {    for (    Object subvalue : ((List<?>)value)) {      mapPathsToMetadata(subvalue);    }  } else   if (value instanceof Map<?,?>) {    for (    Object subvalue : ((Map<?,?>)value).values()) {      mapPathsToMetadata(subvalue);    }  }}  }
class C{  public void testInvokeAny6() throws Throwable {  ExecutorService e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    List<Callable<String>> l=new ArrayList<Callable<String>>();    l.add(new StringTask());    l.add(new StringTask());    String result=e.invokeAny(l);    assertSame(TEST_STRING,result);  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  public static void delete(String relativeUrl,AsyncHttpResponseHandler handler){  client.delete(getAbsoluteApiUrl(relativeUrl),handler);  TLog.log(TAG,"DELETE " + relativeUrl);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:17.726 -0400",hash_original_method="7C8019D6604584E009EB0124C639B76A",hash_generated_method="29905B04AC538F168D8CAD6D1310CB3D") public void put(E e){  xfer(e,true,ASYNC,0);}  }
class C{  public TextEditor(CharSequence text){  this.text=new StringBuffer(text.toString());}  }
class C{  public BlazeGraphEdit(final Action action,final BlazeGraphAtom atom){  this(action,atom,0l);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void test2() throws Exception {  VendorData supplierData=setupNewSupplier("2013-01-01 08:00:00",new BigDecimal(2.0D));  VOMarketplace marketplace=supplierData.getMarketplace(0);  setDateFactory("2013-07-10 20:00:00");  setCutOffDay(supplierData.getAdminKey(),1);  CustomerData customer=registerCustomer(supplierData);  VOServiceDetails service=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"srv1");  updateMarketplaceRevenueShare(10.0D,marketplace.getMarketplaceId());  VOSubscriptionDetails subscr=subscribe(customer.getAdminUser(),"srv1_subscr1",service,"2013-08-01 12:00:00","ADMIN");  VOServiceDetails upgrService=createAndRegisterCompatibleService(supplierData,TestPriceModel.EXAMPLE_PRORATA_MONTH_ROLES,service,"srv1" + "_upgr");  upgrade(customer.getAdminUser(),subscr,upgrService,"2013-08-08 15:00:00");  resetCutOffDay(supplierData.getAdminKey());  cacheTestData("test2",new TestData(supplierData));}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.680 -0400",hash_original_method="819423AAC8700E3137A36825F0D63A1E",hash_generated_method="E9C6596C20B426756B32B95C67633D8E") @Override public int read(char[] chr,int st,int len) throws IOException {  try {    beforeRead(len);    int n=in.read(chr,st,len);    afterRead(n);    return n;  } catch (  IOException e) {    handleIOException(e);    return -1;  }}  }
class C{  public static float[][] randomInit(int rows,int cols,Random random){  float[][] output=new float[rows][cols];  for (int i=0; i < rows; ++i) {    for (int j=0; j < cols; ++j) {      output[i][j]=(2 * random.nextFloat()) - 1;    }  }  return output;}  }
class C{  public int acquire(){  return doAcquire(range.first,range.second);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void initialize(double x,double y,double z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:51.868 -0500",hash_original_method="ED4471B18A05C7C9B2609597C03313FB",hash_generated_method="0383447E8C2335734E5731CE956BDF1C") private static void applyUidSecurityPolicy(Arguments args,Credentials peer) throws ZygoteSecurityException {  int peerUid=peer.getUid();  if (peerUid == 0) {  } else   if (peerUid == Process.SYSTEM_UID) {    String factoryTest=SystemProperties.get("ro.factorytest");    boolean uidRestricted;    uidRestricted=!(factoryTest.equals("1") || factoryTest.equals("2"));    if (uidRestricted && args.uidSpecified && (args.uid < Process.SYSTEM_UID)) {      throw new ZygoteSecurityException("System UID may not launch process with UID < " + Process.SYSTEM_UID);    }  } else {    if (args.uidSpecified || args.gidSpecified || args.gids != null) {      throw new ZygoteSecurityException("App UIDs may not specify uid's or gid's");    }  }  if (!args.uidSpecified) {    args.uid=peer.getUid();    args.uidSpecified=true;  }  if (!args.gidSpecified) {    args.gid=peer.getGid();    args.gidSpecified=true;  }}  }
class C{  public float update(float dtMs){  float dt=dtMs / mTimeTo90PercentMs;  float dts=dt * mSpringStiffness;  if (dts > 1.0f || dts < 0.0f) {    stop();    return mValue;  }  float delta=(mTarget - mValue);  float force=delta - 2.0f * mVelocity;  mVelocity+=force * dts;  mValue+=mVelocity * dts;  if (!isActive()) {    stop();  }  return mValue;}  }
class C{  public final void testConjunctiveWithCharSequenceParameter(){  assertNotNull(Validators.conjunctive("foo",Validators.notEmpty("foo"),Validators.minLength("foo",1)));}  }
class C{  @ProbeBuilder public TestProbeBuilder probeConfiguration(TestProbeBuilder probe){  probe.setHeader(Constants.IMPORT_PACKAGE,"*,org.apache.ignite.osgi.activators;resolution:=\"optional\"");  return probe;}  }
class C{  public void push(final float value){  int bits=Float.floatToIntBits(value);  if (bits == 0L || bits == 0x3f800000 || bits == 0x40000000) {    mv.visitInsn(Opcodes.FCONST_0 + (int)value);  } else {    mv.visitLdcInsn(new Float(value));  }}  }
class C{  protected InferredType mergeLubTypeWithEqualities(final TypeVariable target,final AnnotatedTypeMirror lub,final ConstraintMap constraintMap,final AnnotatedTypeFactory typeFactory){  final Equalities equalities=constraintMap.getConstraints(target).equalities;  final Set<? extends AnnotationMirror> tops=typeFactory.getQualifierHierarchy().getTopAnnotations();  if (!equalities.types.isEmpty()) {    final Entry<AnnotatedTypeMirror,Set<AnnotationMirror>> eqEntry=equalities.types.entrySet().iterator().next();    final AnnotatedTypeMirror equalityType=eqEntry.getKey();    final Set<AnnotationMirror> equalityAnnos=eqEntry.getValue();    boolean failed=false;    for (    final AnnotationMirror top : tops) {      if (!equalityAnnos.contains(top)) {        final AnnotationMirror lubAnno=lub.getAnnotationInHierarchy(top);        if (lubAnno == null) {          if (lub.getKind() == TypeKind.TYPEVAR && equalityType.getUnderlyingType().equals(lub.getUnderlyingType())) {            equalityAnnos.add(top);          } else {            failed=true;          }        } else {          equalityType.replaceAnnotation(lubAnno);          equalityAnnos.add(top);        }      }    }    if (!failed) {      return new InferredType(equalityType);    }  }  return new InferredType(lub);}  }
class C{  public PatternOrExpr add(PatternExpr expr){  this.getChildren().add(expr);  return this;}  }
class C{  public boolean removeCoinsReceivedEventListener(WalletCoinsReceivedEventListener listener){  return ListenerRegistration.removeFromList(listener,coinsReceivedListeners);}  }
class C{  public boolean exists(File file){  return file.exists();}  }
class C{  public PdxFieldDoesNotExistException(String message){  super(message);}  }
class C{  private IgniteSystemProperties(){}  }
class C{  boolean checkIfParametersAreModified(Subscription subscription,Subscription dbSubscription,Product dbSourceProduct,Product dbTargetProduct,List<VOParameter> voTargetParameters,boolean upgrade) throws SubscriptionMigrationException, ServiceChangedException, ConcurrentModificationException, ValidationException {  boolean result=false;  verifyIfParameterConcurrentlyChanged(dbTargetProduct,voTargetParameters,upgrade);  Map<String,Parameter> dbTargetParameterMap=new HashMap<>();  if (dbTargetProduct.getParameterSet() != null) {    for (    Parameter dbTargetParameter : dbTargetProduct.getParameterSet().getParameters()) {      dbTargetParameterMap.put(dbTargetParameter.getParameterDefinition().getParameterId(),dbTargetParameter);    }  }  Map<String,Parameter> dbSubscriptionParameterMap=new HashMap<>();  if (dbSubscription.getParameterSet() != null) {    for (    Parameter dbSubParameter : dbSubscription.getParameterSet().getParameters()) {      dbSubscriptionParameterMap.put(dbSubParameter.getParameterDefinition().getParameterId(),dbSubParameter);    }  }  for (  VOParameter voTargetParameter : voTargetParameters) {    String dbParameterId=voTargetParameter.getParameterDefinition().getParameterId();    if (dbSubscriptionParameterMap.containsKey(dbParameterId)) {      Parameter dbTargetParameter=dbTargetParameterMap.get(dbParameterId);      Parameter dbSubscriptionParameter=dbSubscriptionParameterMap.get(dbParameterId);      if (!upgrade && voTargetParameter.getParameterDefinition().getModificationType().equals(ParameterModificationType.ONE_TIME)) {        if (!compareParameterValue(dbTargetParameter,dbSubscriptionParameter)) {          throw new ValidationException(ValidationException.ReasonEnum.ONE_TIME_PARAMETER_NOT_ALLOWED,null,new Object[]{dbTargetParameter.getParameterDefinition().getParameterId()});        }      }      if (upgrade && !isParameterUpOrDowngradeValid(dbTargetParameter,voTargetParameter)) {        String sourceProductId=dbSourceProduct.getTemplateOrSelf().getProductId();        String targetProductId=dbTargetProduct.getTemplateOrSelf().getProductId();        SubscriptionMigrationException e=new SubscriptionMigrationException("Incompatible parameter found",Reason.INCOMPATIBLE_PARAMETER,new Object[]{subscription.getSubscriptionId(),sourceProductId,targetProductId,voTargetParameter.getParameterDefinition().getParameterId()});        LOG.logWarn(Log4jLogger.SYSTEM_LOG | Log4jLogger.AUDIT_LOG,e,LogMessageIdentifier.WARN_NOT_CONFIGURABLE_PARAMETER_OF_SUBSCRIPTION_MODIFIED,dataManager.getCurrentUser().getUserId(),dbParameterId,Long.toString(dbSourceProduct.getKey()));        throw e;      }      if (dbTargetParameter.isValueSet()) {        if (!dbTargetParameter.getValue().equals(voTargetParameter.getValue())) {          result=true;        }      } else {        if (voTargetParameter.getValue() != null && voTargetParameter.getValue().trim().length() > 0) {          result=true;        }      }    }  }  return result;}  }
class C{  private void deleteOldProfile() throws Exception {  getLogger().info("Deleting old profile.",this.getClass().getName());  wsContainer.runManageProfileCommand("-delete","-profileName",getPropertyValue(WebSpherePropertySet.PROFILE));  getLogger().debug("Deleting profile folder " + getHome(),this.getClass().getName());  getFileHandler().delete(getHome());  if (getFileHandler().isDirectory(getHome())) {    throw new CargoException("Directory " + getHome() + " cannot be deleted");  }  wsContainer.runManageProfileCommand("-validateAndUpdateRegistry");}  }
class C{  public GF2mVector(GF2mField field,int[] vector){  this.field=field;  length=vector.length;  for (int i=vector.length - 1; i >= 0; i--) {    if (!field.isElementOfThisField(vector[i])) {      throw new ArithmeticException("Element array is not specified over the given finite field.");    }  }  this.vector=IntUtils.clone(vector);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:28.746 -0500",hash_original_method="61F749C53ECEF8AEA7C45AB0E864D889",hash_generated_method="97E54B5514BAD5F6FE975E62C7DE9C0E") protected void onSaveRingtone(Uri ringtoneUri){  persistString(ringtoneUri != null ? ringtoneUri.toString() : "");}  }
class C{  public void remove(int i){  if ((i >= array.length) || (i < 0))   throw new ArrayIndexOutOfBoundsException("invalid index:" + i + ";the array length is "+ array.length);  NSObject[] newArray=new NSObject[array.length - 1];  System.arraycopy(array,0,newArray,0,i);  System.arraycopy(array,i + 1,newArray,i,array.length - i - 1);  array=newArray;}  }
class C{  public static Spannable createSpannableFromTextWithTemplate(String text,CharSequence innerTemplate){  SpannableString result=new SpannableString(text);  if (innerTemplate instanceof Spanned) {    int index=text.indexOf(innerTemplate.toString());    if (index >= 0) {      copySpans(result,(Spanned)innerTemplate,index);    }  }  return result;}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/continuous-copies/update-rpo") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep updateFileSystemReplicationRPO(@PathParam("id") URI id,FileReplicationParam param) throws InternalException {  _log.info("Update file system replication RPO request received. Filesystem: {}",id.toString());  FileShare fs=queryResource(id);  ArgValidator.checkFieldUriType(id,FileShare.class,"id");  ArgValidator.checkEntity(fs,id,isIdEmbeddedInURL(id));  ArgValidator.checkFieldNotNull(param.getCopies().get(0).getReplicationSettingParam(),"replication_settings");  VirtualPool vpool=_dbClient.queryObject(VirtualPool.class,fs.getVirtualPool());  validateProtectionSettings(vpool,param);  StringBuffer notSuppReasonBuff=new StringBuffer();  if (!FileSystemReplicationUtils.doBasicMirrorValidation(fs,vpool,notSuppReasonBuff)) {    throw APIException.badRequests.unableToPerformMirrorOperation(ProtectionOp.UPDATE_RPO.toString(),fs.getId(),notSuppReasonBuff.toString());  }  String task=UUID.randomUUID().toString();  StorageSystem device=_dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());  FileReplicationController controller=getController(FileReplicationController.class,device.getSystemType());  Operation op=_dbClient.createTaskOpStatus(FileShare.class,fs.getId(),task,ResourceOperationTypeEnum.UPDATE_FILE_SYSTEM_REPLICATION_RPO);  op.setDescription("Update filesystem replication RPO");  controller.updateFileSystemReplicationRPO(device.getId(),fs.getId(),param,task);  return toTask(fs,task,op);}  }
class C{  public static NurbsSurface createRevolvedSurface(Axis3D a,NurbsCurve curve,double theta){  int narcs=4;  if (theta <= MathUtils.HALF_PI) {    narcs=1;  } else   if (theta <= MathUtils.PI) {    narcs=2;  } else   if (theta <= MathUtils.THREE_HALVES_PI) {    narcs=3;  }  int j=3 + 2 * (narcs - 1);  final double dtheta=theta / narcs;  final float[] uKnot=new float[j + 3];  for (int i=0; i < 3; i++) {    uKnot[j + i]=1;  }switch (narcs) {case 2:    uKnot[3]=0.5f;  uKnot[4]=0.5f;break;case 3:uKnot[3]=uKnot[4]=MathUtils.THIRD;uKnot[5]=uKnot[6]=2 * MathUtils.THIRD;break;case 4:uKnot[3]=0.25f;uKnot[4]=0.25f;uKnot[5]=0.5f;uKnot[6]=0.5f;uKnot[7]=0.75f;uKnot[8]=0.75f;break;}double angle=0;final double[] cos=new double[narcs + 1];final double[] sin=new double[narcs + 1];for (int i=0; i <= narcs; i++) {cos[i]=Math.cos(angle);sin[i]=Math.sin(angle);angle+=dtheta;}Vec4D[] pj=curve.getControlPoints();Vec3D P0=new Vec3D();final Vec3D P2=new Vec3D();final Vec3D O=new Vec3D();final Vec3D T2=new Vec3D();final Vec3D T0=new Vec3D();final Vec3D tmp=new Vec3D();final Vec3D X=new Vec3D();final Vec3D Y=new Vec3D();final Vec4D[][] pij=new Vec4D[2 * narcs + 1][pj.length];final double wm=Math.cos(dtheta / 2);for (j=0; j < pj.length; j++) {pointToLine3D(a.origin,a.dir,pj[j].to3D(),O);X.set(pj[j].to3D().subSelf(O));final double r=X.magnitude();if (r == 0) {X.set(O);}X.normalize();a.dir.crossInto(X,Y);pij[0][j]=new Vec4D(pj[j]);P0=pj[j].to3D();T0.set(Y);int index=0;for (int i=1; i <= narcs; i++) {tmp.set(X).scaleSelf((float)(r * cos[i]));P2.set(O).addSelf(tmp);tmp.set(Y).scaleSelf((float)(r * sin[i]));P2.addSelf(tmp);pij[index + 2][j]=new Vec4D(P2,pj[j].w);tmp.set(Y).scaleSelf((float)cos[i]);T2.set(X).scaleSelf((float)-sin[i]).addSelf(tmp);lineIntersect3D(P0,T0,P2,T2,tmp,tmp);pij[index + 1][j]=new Vec4D(tmp,(float)(wm * pj[j].w));index+=2;if (i < narcs) {P0.set(P2);T0.set(T2);}}}ControlNet cnet=new ControlNet(pij);return new BasicNurbsSurface(cnet,uKnot,curve.getKnots(),2,curve.getDegree());}  }
class C{  protected void computeSubdivisions(DrawContext dc,ShapeData shapeData){  int minDivisions=0;  int maxDivisions=6;  if (shapeData.getExtent() != null) {    for (int divisions=minDivisions; divisions <= maxDivisions; divisions++) {      this.subdivisions=divisions;      if (this.sufficientDetail(dc,divisions,shapeData))       break;    }  }}  }
class C{  private void removeNonConfigurableParameters(List<VOTriggerProcessParameter> triggerParameters){  for (  VOTriggerProcessParameter triggerParameter : triggerParameters) {    List<VOParameter> parameters=((VOService)triggerParameter.getValue()).getParameters();    for (Iterator<VOParameter> it=parameters.iterator(); it.hasNext(); ) {      VOParameter parameter=it.next();      if (!parameter.isConfigurable()) {        it.remove();      }    }  }}  }
class C{  public boolean intersection(IPoint p){  if (start.equals(p)) {    return true;  }  if (end.equals(p)) {    return true;  }  if (FloatingPoint.same(start.x,end.x)) {    return (FloatingPoint.same(p.getX(),start.x) && FloatingPoint.lesserEquals(p.getY(),start.y) && FloatingPoint.greaterEquals(p.getY(),end.y));  }  double yIntercept=start.y - m * start.x;  boolean onInfiniteLine=(FloatingPoint.value(p.getY() - yIntercept - m * p.getX()) == 0.0);  if (!onInfiniteLine) {    return false;  }  if (sign == 1) {    if (p.getX() > start.getX())     return false;    if (p.getX() < end.getX())     return false;  } else {    if (p.getX() < start.getX())     return false;    if (p.getX() > end.getX())     return false;  }  return true;}  }
class C{  public void testEncodev6() throws Exception {  byte[] expectedReturn=msgFixture.mappedAddressv6;  addressAttribute.setAddress(new TransportAddress(MsgFixture.ADDRESS_ATTRIBUTE_ADDRESS_V6,MsgFixture.ADDRESS_ATTRIBUTE_PORT,Transport.UDP));  byte[] actualReturn=addressAttribute.encode();  assertTrue("An AddressAttribute did not properly encode an IPv6 addr.",Arrays.equals(expectedReturn,actualReturn));}  }
class C{  private void showInfoFile(String title,String file,String icon){  HelpOverviewDialog infoDialog=new HelpOverviewDialog(getFrame(),title,file,TDA.createImageIcon(icon).getImage());  infoDialog.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);  infoDialog.pack();  infoDialog.setLocationRelativeTo(getFrame());  infoDialog.setVisible(true);}  }
class C{  public void startDocumentInternal() throws org.xml.sax.SAXException {  if (m_needToCallStartDocument) {    super.startDocumentInternal();    m_needToCallStartDocument=false;    if (m_inEntityRef)     return;    m_needToOutputDocTypeDecl=true;    m_startNewLine=false;    final String version=getXMLVersion();    if (getOmitXMLDeclaration() == false) {      String encoding=Encodings.getMimeEncoding(getEncoding());      String standalone;      if (m_standaloneWasSpecified) {        standalone=" standalone=\"" + getStandalone() + "\"";      } else {        standalone="";      }      try {        final java.io.Writer writer=m_writer;        writer.write("<?xml version=\"");        writer.write(version);        writer.write("\" encoding=\"");        writer.write(encoding);        writer.write('\"');        writer.write(standalone);        writer.write("?>");        if (m_doIndent) {          if (m_standaloneWasSpecified || getDoctypePublic() != null || getDoctypeSystem() != null) {            writer.write(m_lineSep,0,m_lineSepLen);          }        }      } catch (      IOException e) {        throw new SAXException(e);      }    }  }}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  protected void rehash(){  Entry[] oldTable=table;  int oldCapacity=oldTable.length;  if (oldCapacity >= MAXIMUM_CAPACITY) {    threshold=Integer.MAX_VALUE;    return;  }  int newCapacity=oldCapacity << 1;  int mask=newCapacity - 1;  threshold=(int)(newCapacity * loadFactor);  Entry[] newTable=new Entry[newCapacity];  for (int i=0; i < oldCapacity; i++) {    Entry e=oldTable[i];    if (e != null) {      int idx=e.hash & mask;      Entry next=e.next;      if (next == null)       newTable[idx]=e; else {        Entry lastRun=e;        int lastIdx=idx;        for (Entry last=next; last != null; last=last.next) {          int k=last.hash & mask;          if (k != lastIdx) {            lastIdx=k;            lastRun=last;          }        }        newTable[lastIdx]=lastRun;        for (Entry p=e; p != lastRun; p=p.next) {          int k=p.hash & mask;          newTable[k]=new Entry(p.hash,p.key,p.value,newTable[k]);        }      }    }  }  table=newTable;  recordModification(newTable);}  }
class C{  public int addEgress(StreetSegment streetSegment,LegMode mode,int endVertexStopIndex){  if (egress == null) {    egress=new ArrayList<>();  }  ModeStopIndex modeStopIndex=new ModeStopIndex(mode,endVertexStopIndex);  int egressIndex;  if (!egressIndexes.containsKey(modeStopIndex)) {    egress.add(streetSegment);    egressIndex=(egress.size() - 1);    egressIndexes.put(modeStopIndex,egressIndex);  } else {    egressIndex=egressIndexes.get(modeStopIndex);  }  return egressIndex;}  }
class C{  public void propertyChange(PropertyChangeEvent e){}  }
class C{  private Retry processResponseHeaders() throws IOException {  Proxy selectedProxy=httpEngine.connection != null ? httpEngine.connection.getRoute().getProxy() : client.getProxy();  final int responseCode=getResponseCode();switch (responseCode) {case HTTP_PROXY_AUTH:    if (selectedProxy.type() != Proxy.Type.HTTP) {      throw new ProtocolException("Received HTTP_PROXY_AUTH (407) code while not using proxy");    }case HTTP_UNAUTHORIZED:  boolean credentialsFound=HttpAuthenticator.processAuthHeader(client.getAuthenticator(),getResponseCode(),httpEngine.getResponseHeaders().getHeaders(),rawRequestHeaders,selectedProxy,url);return credentialsFound ? Retry.SAME_CONNECTION : Retry.NONE;case HTTP_MULT_CHOICE:case HTTP_MOVED_PERM:case HTTP_MOVED_TEMP:case HTTP_SEE_OTHER:case HTTP_TEMP_REDIRECT:if (!getInstanceFollowRedirects()) {return Retry.NONE;}if (++redirectionCount > MAX_REDIRECTS) {throw new ProtocolException("Too many redirects: " + redirectionCount);}if (responseCode == HTTP_TEMP_REDIRECT && !method.equals("GET") && !method.equals("HEAD")) {return Retry.NONE;}String location=getHeaderField("Location");if (location == null) {return Retry.NONE;}URL previousUrl=url;url=new URL(previousUrl,location);if (!url.getProtocol().equals("https") && !url.getProtocol().equals("http")) {return Retry.NONE;}boolean sameProtocol=previousUrl.getProtocol().equals(url.getProtocol());if (!sameProtocol && !client.getFollowProtocolRedirects()) {return Retry.NONE;}boolean sameHost=previousUrl.getHost().equals(url.getHost());boolean samePort=getEffectivePort(previousUrl) == getEffectivePort(url);if (sameHost && samePort && sameProtocol) {return Retry.SAME_CONNECTION;} else {return Retry.DIFFERENT_CONNECTION;}default :return Retry.NONE;}}  }
class C{  public void dispose(){  if (rootItemProvider != null)   rootItemProvider.dispose();  if (defRootItemProvider != null)   defRootItemProvider.dispose();  if (statechartRootItemProvider != null)   statechartRootItemProvider.dispose();  if (stateRootItemProvider != null)   stateRootItemProvider.dispose();  if (transitionRootItemProvider != null)   transitionRootItemProvider.dispose();  if (statechartSpecificationItemProvider != null)   statechartSpecificationItemProvider.dispose();  if (stateSpecificationItemProvider != null)   stateSpecificationItemProvider.dispose();  if (transitionSpecificationItemProvider != null)   transitionSpecificationItemProvider.dispose();  if (statechartScopeItemProvider != null)   statechartScopeItemProvider.dispose();  if (interfaceScopeItemProvider != null)   interfaceScopeItemProvider.dispose();  if (internalScopeItemProvider != null)   internalScopeItemProvider.dispose();  if (importScopeItemProvider != null)   importScopeItemProvider.dispose();  if (eventDefinitionItemProvider != null)   eventDefinitionItemProvider.dispose();  if (variableDefinitionItemProvider != null)   variableDefinitionItemProvider.dispose();  if (operationDefinitionItemProvider != null)   operationDefinitionItemProvider.dispose();  if (typeAliasDefinitionItemProvider != null)   typeAliasDefinitionItemProvider.dispose();  if (localReactionItemProvider != null)   localReactionItemProvider.dispose();  if (transitionReactionItemProvider != null)   transitionReactionItemProvider.dispose();  if (guardItemProvider != null)   guardItemProvider.dispose();  if (entryPointSpecItemProvider != null)   entryPointSpecItemProvider.dispose();  if (exitPointSpecItemProvider != null)   exitPointSpecItemProvider.dispose();  if (eventSpecItemProvider != null)   eventSpecItemProvider.dispose();  if (regularEventSpecItemProvider != null)   regularEventSpecItemProvider.dispose();  if (timeEventSpecItemProvider != null)   timeEventSpecItemProvider.dispose();  if (builtinEventSpecItemProvider != null)   builtinEventSpecItemProvider.dispose();  if (entryEventItemProvider != null)   entryEventItemProvider.dispose();  if (exitEventItemProvider != null)   exitEventItemProvider.dispose();  if (alwaysEventItemProvider != null)   alwaysEventItemProvider.dispose();  if (simpleScopeItemProvider != null)   simpleScopeItemProvider.dispose();  if (reactionTriggerItemProvider != null)   reactionTriggerItemProvider.dispose();  if (defaultTriggerItemProvider != null)   defaultTriggerItemProvider.dispose();  if (reactionEffectItemProvider != null)   reactionEffectItemProvider.dispose();  if (eventRaisingExpressionItemProvider != null)   eventRaisingExpressionItemProvider.dispose();  if (eventValueReferenceExpressionItemProvider != null)   eventValueReferenceExpressionItemProvider.dispose();  if (activeStateReferenceExpressionItemProvider != null)   activeStateReferenceExpressionItemProvider.dispose();}  }
class C{  public boolean dump_answer(){  return soot.PhaseOptions.getBoolean(options,"dump-answer");}  }
class C{  @Override public void deleteMetadata() throws IOException {  checkClosedOrInError("createOrUpdateMetadata");  createOrUpdateMetadata(null);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'FORUM' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'FID' TEXT,"+ "'NAME' TEXT,"+ "'LOGO' TEXT,"+ "'DESCRIPTION' TEXT,"+ "'BACK_IMG' TEXT,"+ "'FORUM_ID' TEXT,"+ "'CATEGORY_NAME' TEXT,"+ "'WEIGHT' INTEGER);");}  }
class C{  public boolean isHtml(){  Object oo=get_Value(COLUMNNAME_IsHtml);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Map<String,String> parse(final char[] charArray,char separator){  if (charArray == null) {    return new HashMap<>();  }  return parse(charArray,0,charArray.length,separator);}  }
class C{  @Procedure @PerformsWrites @Description("apoc.refactor.categorize(sourceKey, type, outgoing, label, targetKey, copiedKeys, batchSize) turn each unique propertyKey into a category node and connect to it") public void categorize(@Name("sourceKey") String sourceKey,@Name("type") String relationshipType,@Name("outgoing") Boolean outgoing,@Name("label") String label,@Name("targetKey") String targetKey,@Name("copiedKeys") List<String> copiedKeys,@Name("batchSize") long batchSize) throws ExecutionException {  if (sourceKey == null)   throw new IllegalArgumentException("Invalid (null) sourceKey");  if (targetKey == null)   throw new IllegalArgumentException("Invalid (null) targetKey");  copiedKeys.remove(targetKey);  List<Node> batch=null;  List<Future<Void>> futures=new ArrayList<>();  try (Transaction tx=dbAPI.beginTx()){    for (    Node node : dbAPI.getAllNodes()) {      if (batch == null) {        batch=new ArrayList<>((int)batchSize);      }      batch.add(node);      if (batch.size() == batchSize) {        futures.add(categorizeNodes(batch,sourceKey,relationshipType,outgoing,label,targetKey,copiedKeys));        batch=null;      }    }    if (batch != null) {      futures.add(categorizeNodes(batch,sourceKey,relationshipType,outgoing,label,targetKey,copiedKeys));    }    for (    Future<Void> future : futures) {      Pools.force(future);    }    tx.success();  } }  }
class C{  @Override public Uri insert(Uri uri,ContentValues values){  SQLiteDatabase db=mOpenHelper.getWritableDatabase();  int length=uri.getPathSegments().size();  if (length < 1) {    throw new IllegalArgumentException("Unknown Uri");  }  long rowID=-1;  String base=uri.getPathSegments().get(0);  Uri newUri=null;  if (base.equals(sSuggestions)) {    if (length == 1) {      rowID=db.insert(sSuggestions,NULL_COLUMN,values);      if (rowID > 0) {        newUri=Uri.withAppendedPath(mSuggestionsUri,String.valueOf(rowID));      }    }  }  if (rowID < 0) {    throw new IllegalArgumentException("Unknown Uri");  }  getContext().getContentResolver().notifyChange(newUri,null);  return newUri;}  }
class C{  public final void toggleSelected(){  setSelected(!isSelected());}  }
class C{  private void readCode(final MethodVisitor mv,final Context context,int u){  byte[] b=this.b;  char[] c=context.buffer;  int maxStack=readUnsignedShort(u);  int maxLocals=readUnsignedShort(u + 2);  int codeLength=readInt(u + 4);  u+=8;  int codeStart=u;  int codeEnd=u + codeLength;  Label[] labels=context.labels=new Label[codeLength + 2];  readLabel(codeLength + 1,labels);  while (u < codeEnd) {    int offset=u - codeStart;    int opcode=b[u] & 0xFF;switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:case ClassWriter.IMPLVAR_INSN:      u+=1;    break;case ClassWriter.LABEL_INSN:  readLabel(offset + readShort(u + 1),labels);u+=3;break;case ClassWriter.LABELW_INSN:readLabel(offset + readInt(u + 1),labels);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {u+=6;} else {u+=4;}break;case ClassWriter.TABL_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 8) - readInt(u + 4) + 1; i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=4;}u+=12;break;case ClassWriter.LOOK_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 4); i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=8;}u+=8;break;case ClassWriter.VAR_INSN:case ClassWriter.SBYTE_INSN:case ClassWriter.LDC_INSN:u+=2;break;case ClassWriter.SHORT_INSN:case ClassWriter.LDCW_INSN:case ClassWriter.FIELDORMETH_INSN:case ClassWriter.TYPE_INSN:case ClassWriter.IINC_INSN:u+=3;break;case ClassWriter.ITFMETH_INSN:case ClassWriter.INDYMETH_INSN:u+=5;break;default :u+=4;break;}}for (int i=readUnsignedShort(u); i > 0; --i) {Label start=readLabel(readUnsignedShort(u + 2),labels);Label end=readLabel(readUnsignedShort(u + 4),labels);Label handler=readLabel(readUnsignedShort(u + 6),labels);String type=readUTF8(items[readUnsignedShort(u + 8)],c);mv.visitTryCatchBlock(start,end,handler,type);u+=8;}u+=2;int[] tanns=null;int[] itanns=null;int tann=0;int itann=0;int ntoff=-1;int nitoff=-1;int varTable=0;int varTypeTable=0;boolean zip=true;boolean unzip=(context.flags & EXPAND_FRAMES) != 0;int stackMap=0;int stackMapSize=0;int frameCount=0;Context frame=null;Attribute attributes=null;for (int i=readUnsignedShort(u); i > 0; --i) {String attrName=readUTF8(u + 2,c);if ("LocalVariableTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {varTable=u + 8;for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}label+=readUnsignedShort(v + 12);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}v+=10;}}} else if ("LocalVariableTypeTable".equals(attrName)) {varTypeTable=u + 8;} else if ("LineNumberTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}Label l=labels[label];while (l.line > 0) {if (l.next == null) {l.next=new Label();}l=l.next;}l.line=readUnsignedShort(v + 12);v+=4;}}} else if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {tanns=readTypeAnnotations(mv,context,u + 8,true);ntoff=tanns.length == 0 || readByte(tanns[0]) < 0x43 ? -1 : readUnsignedShort(tanns[0] + 1);} else if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {itanns=readTypeAnnotations(mv,context,u + 8,false);nitoff=itanns.length == 0 || readByte(itanns[0]) < 0x43 ? -1 : readUnsignedShort(itanns[0] + 1);} else if (FRAMES && "StackMapTable".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else if (FRAMES && "StackMap".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {zip=false;stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else {for (int j=0; j < context.attrs.length; ++j) {if (context.attrs[j].type.equals(attrName)) {Attribute attr=context.attrs[j].read(this,u + 8,readInt(u + 4),c,codeStart - 8,labels);if (attr != null) {attr.next=attributes;attributes=attr;}}}}u+=6 + readInt(u + 4);}u+=2;if (FRAMES && stackMap != 0) {frame=context;frame.offset=-1;frame.mode=0;frame.localCount=0;frame.localDiff=0;frame.stackCount=0;frame.local=new Object[maxLocals];frame.stack=new Object[maxStack];if (unzip) {getImplicitFrame(context);}for (int i=stackMap; i < stackMap + stackMapSize - 2; ++i) {if (b[i] == 8) {int v=readUnsignedShort(i + 1);if (v >= 0 && v < codeLength) {if ((b[codeStart + v] & 0xFF) == Opcodes.NEW) {readLabel(v,labels);}}}}}u=codeStart;while (u < codeEnd) {int offset=u - codeStart;Label l=labels[offset];if (l != null) {Label next=l.next;l.next=null;mv.visitLabel(l);if ((context.flags & SKIP_DEBUG) == 0 && l.line > 0) {mv.visitLineNumber(l.line,l);while (next != null) {mv.visitLineNumber(next.line,l);next=next.next;}}}while (FRAMES && frame != null && (frame.offset == offset || frame.offset == -1)) {if (frame.offset != -1) {if (!zip || unzip) {mv.visitFrame(Opcodes.F_NEW,frame.localCount,frame.local,frame.stackCount,frame.stack);} else {mv.visitFrame(frame.mode,frame.localDiff,frame.local,frame.stackCount,frame.stack);}}if (frameCount > 0) {stackMap=readFrame(stackMap,zip,unzip,frame);--frameCount;} else {frame=null;}}int opcode=b[u] & 0xFF;switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:mv.visitInsn(opcode);u+=1;break;case ClassWriter.IMPLVAR_INSN:if (opcode > Opcodes.ISTORE) {opcode-=59;mv.visitVarInsn(Opcodes.ISTORE + (opcode >> 2),opcode & 0x3);} else {opcode-=26;mv.visitVarInsn(Opcodes.ILOAD + (opcode >> 2),opcode & 0x3);}u+=1;break;case ClassWriter.LABEL_INSN:mv.visitJumpInsn(opcode,labels[offset + readShort(u + 1)]);u+=3;break;case ClassWriter.LABELW_INSN:mv.visitJumpInsn(opcode - 33,labels[offset + readInt(u + 1)]);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {mv.visitIincInsn(readUnsignedShort(u + 2),readShort(u + 4));u+=6;} else {mv.visitVarInsn(opcode,readUnsignedShort(u + 2));u+=4;}break;case ClassWriter.TABL_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int min=readInt(u + 4);int max=readInt(u + 8);Label[] table=new Label[max - min + 1];u+=12;for (int i=0; i < table.length; ++i) {table[i]=labels[offset + readInt(u)];u+=4;}mv.visitTableSwitchInsn(min,max,labels[label],table);break;}case ClassWriter.LOOK_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int len=readInt(u + 4);int[] keys=new int[len];Label[] values=new Label[len];u+=8;for (int i=0; i < len; ++i) {keys[i]=readInt(u);values[i]=labels[offset + readInt(u + 4)];u+=8;}mv.visitLookupSwitchInsn(labels[label],keys,values);break;}case ClassWriter.VAR_INSN:mv.visitVarInsn(opcode,b[u + 1] & 0xFF);u+=2;break;case ClassWriter.SBYTE_INSN:mv.visitIntInsn(opcode,b[u + 1]);u+=2;break;case ClassWriter.SHORT_INSN:mv.visitIntInsn(opcode,readShort(u + 1));u+=3;break;case ClassWriter.LDC_INSN:mv.visitLdcInsn(readConst(b[u + 1] & 0xFF,c));u+=2;break;case ClassWriter.LDCW_INSN:mv.visitLdcInsn(readConst(readUnsignedShort(u + 1),c));u+=3;break;case ClassWriter.FIELDORMETH_INSN:case ClassWriter.ITFMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];boolean itf=b[cpIndex - 1] == ClassWriter.IMETH;String iowner=readClass(cpIndex,c);cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);if (opcode < Opcodes.INVOKEVIRTUAL) {mv.visitFieldInsn(opcode,iowner,iname,idesc);} else {mv.visitMethodInsn(opcode,iowner,iname,idesc,itf);}if (opcode == Opcodes.INVOKEINTERFACE) {u+=5;} else {u+=3;}break;}case ClassWriter.INDYMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];int bsmIndex=context.bootstrapMethods[readUnsignedShort(cpIndex)];Handle bsm=(Handle)readConst(readUnsignedShort(bsmIndex),c);int bsmArgCount=readUnsignedShort(bsmIndex + 2);Object[] bsmArgs=new Object[bsmArgCount];bsmIndex+=4;for (int i=0; i < bsmArgCount; i++) {bsmArgs[i]=readConst(readUnsignedShort(bsmIndex),c);bsmIndex+=2;}cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);mv.visitInvokeDynamicInsn(iname,idesc,bsm,bsmArgs);u+=5;break;}case ClassWriter.TYPE_INSN:mv.visitTypeInsn(opcode,readClass(u + 1,c));u+=3;break;case ClassWriter.IINC_INSN:mv.visitIincInsn(b[u + 1] & 0xFF,b[u + 2]);u+=3;break;default :mv.visitMultiANewArrayInsn(readClass(u + 1,c),b[u + 3] & 0xFF);u+=4;break;}while (tanns != null && tann < tanns.length && ntoff <= offset) {if (ntoff == offset) {int v=readAnnotationTarget(context,tanns[tann]);readAnnotationValues(v + 2,c,true,mv.visitInsnAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));}ntoff=++tann >= tanns.length || readByte(tanns[tann]) < 0x43 ? -1 : readUnsignedShort(tanns[tann] + 1);}while (itanns != null && itann < itanns.length && nitoff <= offset) {if (nitoff == offset) {int v=readAnnotationTarget(context,itanns[itann]);readAnnotationValues(v + 2,c,true,mv.visitInsnAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));}nitoff=++itann >= itanns.length || readByte(itanns[itann]) < 0x43 ? -1 : readUnsignedShort(itanns[itann] + 1);}}if (labels[codeLength] != null) {mv.visitLabel(labels[codeLength]);}if ((context.flags & SKIP_DEBUG) == 0 && varTable != 0) {int[] typeTable=null;if (varTypeTable != 0) {u=varTypeTable + 2;typeTable=new int[readUnsignedShort(varTypeTable) * 3];for (int i=typeTable.length; i > 0; ) {typeTable[--i]=u + 6;typeTable[--i]=readUnsignedShort(u + 8);typeTable[--i]=readUnsignedShort(u);u+=10;}}u=varTable + 2;for (int i=readUnsignedShort(varTable); i > 0; --i) {int start=readUnsignedShort(u);int length=readUnsignedShort(u + 2);int index=readUnsignedShort(u + 8);String vsignature=null;if (typeTable != null) {for (int j=0; j < typeTable.length; j+=3) {if (typeTable[j] == start && typeTable[j + 1] == index) {vsignature=readUTF8(typeTable[j + 2],c);break;}}}mv.visitLocalVariable(readUTF8(u + 4,c),readUTF8(u + 6,c),vsignature,labels[start],labels[start + length],index);u+=10;}}if (tanns != null) {for (int i=0; i < tanns.length; ++i) {if ((readByte(tanns[i]) >> 1) == (0x40 >> 1)) {int v=readAnnotationTarget(context,tanns[i]);v=readAnnotationValues(v + 2,c,true,mv.visitLocalVariableAnnotation(context.typeRef,context.typePath,context.start,context.end,context.index,readUTF8(v,c),true));}}}if (itanns != null) {for (int i=0; i < itanns.length; ++i) {if ((readByte(itanns[i]) >> 1) == (0x40 >> 1)) {int v=readAnnotationTarget(context,itanns[i]);v=readAnnotationValues(v + 2,c,true,mv.visitLocalVariableAnnotation(context.typeRef,context.typePath,context.start,context.end,context.index,readUTF8(v,c),false));}}}while (attributes != null) {Attribute attr=attributes.next;attributes.next=null;mv.visitAttribute(attributes);attributes=attr;}mv.visitMaxs(maxStack,maxLocals);}  }
class C{  public boolean hasProtocol(){  return getProtocol() != null;}  }
class C{  public void calculateLogLikelihoods(double[] partials,double[] frequencies,double[] outLogLikelihoods){  int v=0;  for (int k=0; k < patternCount; k++) {    double sum=frequencies[0] * partials[v];    v++;    sum+=frequencies[1] * partials[v];    v++;    sum+=frequencies[2] * partials[v];    v++;    sum+=frequencies[3] * partials[v];    v++;    outLogLikelihoods[k]=Math.log(sum) + getLogScalingFactor(k);  }}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN,Role.RESTRICTED_SECURITY_ADMIN,Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN},blockProxies=true) @Path("/{uuid}/pause") public Response pauseStandby(@PathParam("uuid") String uuid){  SiteIdListParam param=new SiteIdListParam();  param.getIds().add(uuid);  return pause(param);}  }
class C{  @Override public void fireDataChangedUpdateLater(DisplayHint displayHint){  if (fireDataChangedTimerTask != null) {    fireDataChangedTimerTask.setFireDataChanged(true);  }}  }
class C{  @Override public String toString(){  if (iToString == null) {    final StringBuilder buf=new StringBuilder(4);    if (isNegated()) {      buf.append('^');    }    buf.append(start);    if (start != end) {      buf.append('-');      buf.append(end);    }    iToString=buf.toString();  }  return iToString;}  }
class C{  @Override public Message makeBloomFilter(byte[] payloadBytes) throws ProtocolException {  return new BloomFilter(params,payloadBytes);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static String delimit(String s,char c){  int i=s.indexOf(c);  while (i != -1) {    if (i == 0 || s.charAt(i - 1) != '\\') {      s=s.substring(0,i) + '\\' + s.substring(i);      i=s.indexOf(c,i + 2);    } else {      i=s.indexOf(c,i + 1);    }  }  return s;}  }
class C{  public void testChoiceEmptyIconErrorHandling(){  String xml="";  xml+=createStartMissionXml("start","Name");  xml+=createStartChoiceMomentXml("start",0.5,"Example ChoiceMoment Description","choice_2");  xml+=createChoiceXml("fire","Example Choice Description 1","start",true,false,"test_icon");  xml+=createChoiceXml("choice_2","Example Choice Description 2","start",false,false,"");  xml+=createEndChoiceMomentXml();  xml+=createEndChoiceMomentXml();  xml+=createEndMissionXml();  Utils.logDebug(TAG,xml);  InputStream momentInputStream=new ByteArrayInputStream(xml.getBytes());  mMission=new Mission(mMissionData);  boolean didMissionParseFail=false;  try {    mMission.readMoments(momentInputStream);  } catch (  MissionParseException e) {    e.printStackTrace();    didMissionParseFail=true;  }  Assert.assertEquals(true,didMissionParseFail);}  }
class C{  public void removeSelectionListener(final SelectionListener listener){  checkWidget();  this.listeners.remove(listener);}  }
class C{  @Override public void readFields(DataInput in) throws IOException {  this.initialCapacity=in.readInt();  this.value.readFields(in);  this.meta.readFields(in);}  }
class C{  private void parseXDMS(Node node){  String revokeTimer=null;  String xcapRootURI=null;  String xcapAuthenticationUsername=null;  String xcapAuthenticationSecret=null;  Node childnode=node.getFirstChild();  if (childnode != null) {    do {      if (revokeTimer == null) {        if ((revokeTimer=getValueByParamName("RevokeTimer",childnode,TYPE_INT)) != null) {          mRcsSettings.writeLong(RcsSettingsData.REVOKE_TIMEOUT,Long.parseLong(revokeTimer) * SECONDS_TO_MILLISECONDS_CONVERSION_RATE);          continue;        }      }      if (xcapRootURI == null) {        if ((xcapRootURI=getValueByParamName("XCAPRootURI",childnode,TYPE_TXT)) != null) {          mRcsSettings.setXdmServer("".equals(xcapRootURI) ? null : Uri.parse(xcapRootURI));          continue;        }      }      if (xcapAuthenticationUsername == null) {        if ((xcapAuthenticationUsername=getValueByParamName("XCAPAuthenticationUserName",childnode,TYPE_TXT)) != null) {          mRcsSettings.setXdmLogin("".equals(xcapAuthenticationUsername) ? null : xcapAuthenticationUsername);          continue;        }      }      if (xcapAuthenticationSecret == null) {        if ((xcapAuthenticationSecret=getValueByParamName("XCAPAuthenticationSecret",childnode,TYPE_TXT)) != null) {          mRcsSettings.setXdmPassword("".equals(xcapAuthenticationSecret) ? null : xcapAuthenticationSecret);        }      }    } while ((childnode=childnode.getNextSibling()) != null);  }}  }
class C{  @Override public int hashCode(){  return this.getClass().hashCode() - id.hashCode() + cases.hashCode();}  }
class C{  public MapBinaryHeap(Collection<T> c){  this();  addAll(c);}  }
class C{  public WrappedSocket(Socket socket,InputStream in,OutputStream out) throws IOException {  super((java.net.SocketImpl)null);  this.socket=socket;  this.in=in;  this.out=out;}  }
class C{  public JSONArray(JSONTokener x) throws JSONException {  this();  if (x.nextClean() != '[') {    throw x.syntaxError("A JSONArray text must start with '['");  }  if (x.nextClean() != ']') {    x.back();    for (; ; ) {      if (x.nextClean() == ',') {        x.back();        this.myArrayList.add(JSONObject.NULL);      } else {        x.back();        this.myArrayList.add(x.nextValue());      }switch (x.nextClean()) {case ';':case ',':        if (x.nextClean() == ']') {          return;        }      x.back();    break;case ']':  return;default :throw x.syntaxError("Expected a ',' or ']'");}}}}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean canAcceptVariables(){  return true;}  }
class C{  private boolean shouldBeEscaped(char c){  return c < ' ' || (c >= '\u0080' && c < '\u00a0') || (c >= '\u2000' && c < '\u2100');}  }
class C{  public void reassignCustomerPaymentTypes(VOOrganization customerOrg) throws ObjectNotFoundException, OperationNotPermittedException, OperationPendingException {  VOOrganizationPaymentConfiguration paymentConfig=newVOOrganizationPaymentConfiguration(customerOrg,newVOPaymentTypeSet("INVOICE"));  List<VOOrganizationPaymentConfiguration> paymentConfigList=Arrays.asList(new VOOrganizationPaymentConfiguration[]{paymentConfig});  accountService.savePaymentConfiguration(getDefaultPaymentConfig(),paymentConfigList,getDefaultServicePaymentConfig(),null);}  }
class C{  @SuppressWarnings("unused") private void sendMessage(String[] recipients,String sender,ClassPathResource resource,String bodyText,String subject,String attachmentName) throws MessagingException {  MimeMessage message=((JavaMailSenderImpl)mailSender).createMimeMessage();  MimeMessageHelper helper=new MimeMessageHelper(message,true);  helper.setTo(recipients);  helper.setText(bodyText);  helper.setSubject(subject);  helper.addAttachment(attachmentName,resource);  ((JavaMailSenderImpl)mailSender).send(message);}  }
class C{  public BuildAuthorizationRequestContextAction(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:07.003 -0500",hash_original_method="8F6A3F44BB46AEBAF13827E865603705",hash_generated_method="0ADE5E0E0E49CB1BE755BDCB2536318D") protected boolean jsConfirm(String url,String message){  return mCallbackProxy.onJsConfirm(url,message);}  }
class C{  protected void writeColumnNames(ResultSet rs) throws SQLException {  writeNext(resultService.getColumnNames(rs));}  }
class C{  public static int toIntValue(char c){  return c;}  }
class C{  public List<String> all(String localName){  List<String> childrenText=new ArrayList<String>();  for (  Element child : children()) {    if (localName.equals(child.getLocalName()) && namespace.equals(child.getNamespaceURI())) {      String text=child.getTextContent();      if (text.length() > 0) {        childrenText.add(child.getTextContent());      }    }  }  return childrenText;}  }
class C{  public static String encodeMD5(File f){  if (!f.isFile()) {    return null;  }  MessageDigest digest=null;  byte buffer[]=new byte[1024];  int len;  try {    digest=MessageDigest.getInstance("MD5");    FileInputStream in=new FileInputStream(f);    while ((len=in.read(buffer,0,1024)) != -1) {      digest.update(buffer,0,len);    }    in.close();  } catch (  Exception e) {    e.printStackTrace();    return null;  }  BigInteger bigInt=new BigInteger(1,digest.digest());  return bigInt.toString(16);}  }
class C{  private synchronized void switchMapType(final MapType newMapType){  assert !locked;  final T[] oldKeys=keys;  final int[] oldValues=values;  mapType=newMapType;  allocate(getCapacity(num,true));  numCollisions=0;  if (newMapType == MapType.SORTED_LIST) {    final List<FullEntry> entries=new ArrayList<FullEntry>(num);    for (int i=0; i < oldKeys.length; i++)     if (oldKeys[i] != null)     entries.add(new FullEntry(oldKeys[i],oldValues[i]));    Collections.sort(entries);    for (int i=0; i < num; i++) {      keys[i]=entries.get(i).key;      values[i]=entries.get(i).value;    }  } else   if (mapType == MapType.HASH_TABLE) {    num=0;    for (int i=0; i < oldKeys.length; i++) {      if (oldKeys[i] != null)       put(oldKeys[i],oldValues[i]);    }  }}  }
class C{  @SuppressWarnings({"ConstantConditions"}) public final void changeVariable(Node from,Node to){  if (!(from instanceof DiscreteVariable && to instanceof DiscreteVariable)) {    throw new IllegalArgumentException("Only discrete variables supported.");  }  DiscreteVariable _from=(DiscreteVariable)from;  DiscreteVariable _to=(DiscreteVariable)to;  int col=variables.indexOf(_from);  List<String> oldCategories=_from.getCategories();  List<String> newCategories=_to.getCategories();  int[] indexArray=new int[oldCategories.size()];  for (int i=0; i < oldCategories.size(); i++) {    indexArray[i]=newCategories.indexOf(oldCategories.get(i));  }  for (int i=0; i < getNumRows(); i++) {    if (dataBox.get(i,col) == null) {      break;    }    int value=getInt(i,col);    int newIndex=0;    try {      newIndex=indexArray[value];    } catch (    Exception e) {      e.printStackTrace();    }    if (newIndex == -1) {      dataBox.set(i,col,null);    } else {      setInt(i,col,newIndex);    }  }  variables.set(col,_to);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  private String checkOneDependency(ModuleDescriptor md,ModuleInterface req,HashMap<String,ModuleDescriptor> modlist){  ModuleInterface seenversion=null;  for (  String runningmodule : modlist.keySet()) {    ModuleDescriptor rm=modlist.get(runningmodule);    ModuleInterface[] provides=rm.getProvides();    if (provides != null) {      for (      ModuleInterface pi : provides) {        logger.debug("Checking dependency of " + md.getId() + ": "+ req.getId()+ " "+ req.getVersion()+ " against "+ pi.getId()+ " "+ pi.getVersion());        if (req.getId().equals(pi.getId())) {          if (seenversion == null || pi.compare(req) > 0) {            seenversion=pi;          }          if (pi.isCompatible(req)) {            logger.debug("Dependency OK");            return "";          }        }      }    }  }  if (seenversion == null) {    return "Missing dependency: " + md.getId() + " requires "+ req.getId()+ ": "+ req.getVersion();  } else {    return "Incompatible version for " + req.getId() + ". "+ "Need "+ req.getVersion()+ ". have "+ seenversion.getVersion();  }}  }
class C{  private void updateParams(){  double b;  double zeta;  double err;  boolean cond;  int ntarg;  double zetadiff;  int ozeta;  double pstable;  double pavg;  double ee;  double bdiff;  int ob;  int zcount;  boolean bcheck;  double pnzero;  double pnone;  double eezero;  double eeone;  if (meanIET > (double)timescale) {    System.out.printf("meanIET %f > %d timescale\n",meanIET,timescale);    return;  }  if (meanIET == 0) {    System.out.printf("Mean IET == 0\n");    return;  }  System.out.printf("prophetfindparams(%d,%f,%f);\n",timescale,ptavg,meanIET);  b=1e-5;  zeta=.9;  err=0.005;  zetadiff=.1;  ozeta=0;  cond=false;  ntarg=(int)Math.ceil((double)timescale / (double)meanIET);  while (cond == false) {    pstable=(1 - zeta) / (Math.exp(b * meanIET) - zeta);    pavg=(1 / (b * meanIET)) * (1 - zeta * (1 - pstable)) * (1 - Math.exp(-b * meanIET));    if (Double.isNaN(pavg)) {      pavg=1;    }    if (pavg > ptavg) {      if (ozeta == 2) {        zetadiff=zetadiff / 2.0;      }      ozeta=1;      zeta=zeta + zetadiff;      if (zeta >= 1) {        zeta=1 - zetadiff;        zetadiff=zetadiff / 2.0;        ozeta=0;      }    } else {      if (pavg < ptavg * (1 - err)) {        if (ozeta == 1) {          zetadiff=zetadiff / 2.0;        }        ozeta=2;        zeta=zeta - zetadiff;        if (zeta <= 0) {          zeta=0 + zetadiff;          zetadiff=zetadiff / 2.0;          ozeta=0;        }      } else {        cond=true;      }    }    ee=1;    bdiff=.1;    ob=0;    zcount=0;    bcheck=false;    while (bcheck == false) {      pstable=(1 - zeta) / (Math.exp(b * meanIET) - zeta);      pnzero=Math.exp(-b * meanIET) * (1 - zeta) * ((1 - Math.pow(zeta * Math.exp(-b * meanIET),ntarg - 1)) / (1 - zeta * Math.exp(-b * meanIET)));      pnone=Math.pow(zeta * Math.exp(-b * meanIET),ntarg) + pnzero;      eezero=Math.abs(pnzero - pstable);      eeone=Math.abs(pnone - pstable);      ee=Math.max(eezero,eeone);      if (ee > err) {        if (ob == 2) {          bdiff=bdiff / 2.0;        }        ob=1;        b=b + bdiff;      } else {        if (ee < (err * (1 - err))) {          if (ob == 1) {            bdiff=bdiff / 2.0;          }          ob=2;          b=b - bdiff;          if (b <= 0) {            b=0 + bdiff;            bdiff=bdiff / 1.5;            ob=0;          }        } else {          bcheck=true;        }      }      zcount=zcount + 1;      if (zcount > 100) {        bcheck=true;        ozeta=0;      }    }  }  gamma=Math.exp(-b);  pinit=1 - zeta;}  }
class C{  public void sendEmptyChunk() throws NetworkException {  if (sLogger.isActivated()) {    sLogger.info("Send an empty chunk");  }  String newTransactionId=generateTransactionId();  String newMsgId=generateTransactionId();  addMsrpTransactionInfo(newTransactionId,newMsgId,null,TypeMsrpChunk.EmptyChunk);  sendEmptyMsrpSendRequest(newTransactionId,mTo,mFrom,newMsgId);}  }
class C{  public Statement likeStartsWith(String keyword){  return like(keyword + '%');}  }
class C{  public boolean showMathTagContent(){  return showMathTagContent;}  }
class C{  public boolean attempt(int old,int val){  return SimulatedMemory.exchangeInt(this,old,val);}  }
class C{  private void receiveAsync(){  if (mDisposed.get())   return;  mReceiver.receiveAsync(this);}  }
class C{  @Override public void peg(Calendar calendar){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:13:48.159 -0400",hash_original_method="7738994C396E70C7EFEEA7D2AA2F1AD1",hash_generated_method="986210729B777C7EC530D049B23297BC") public int read(InputStream in) throws IOException {  readId(in,"RIFF");  int numBytes=readInt(in) - 36;  readId(in,"WAVE");  readId(in,"fmt ");  if (16 != readInt(in))   throw new IOException("fmt chunk length not 16");  mFormat=readShort(in);  mNumChannels=readShort(in);  mSampleRate=readInt(in);  int byteRate=readInt(in);  short blockAlign=readShort(in);  mBitsPerSample=readShort(in);  if (byteRate != mNumChannels * mSampleRate * mBitsPerSample / 8) {    throw new IOException("fmt.ByteRate field inconsistent");  }  if (blockAlign != mNumChannels * mBitsPerSample / 8) {    throw new IOException("fmt.BlockAlign field inconsistent");  }  readId(in,"data");  mNumBytes=readInt(in);  return HEADER_LENGTH;}  }
class C{  private void write(RandomAccessFile inout) throws IOException {  inout.write(fixedLength(pane.tfName.getText().getBytes(),NAME));  inout.write(fixedLength(pane.tfStreet.getText().getBytes(),STREET));  inout.write(fixedLength(pane.tfCity.getText().getBytes(),CITY));  inout.write(fixedLength(pane.tfState.getText().getBytes(),STATE));  inout.write(fixedLength(pane.tfZip.getText().getBytes(),ZIP));  System.out.println("Address #" + count + " saved!");}  }
class C{  public void addUniqueAttribute(final String elementName,final String attrName){  if ((elementName != null) && (attrName != null)) {    _uniqueElementAttrMap.put(elementName,attrName);  }}  }
class C{  protected void sendMessage(ServerMessage message,ServerConsumer consumer,int deliveryCount) throws Exception {  if (isManagementConsumer(consumer)) {    sendPubRelMessage(message);  } else {    int qos=decideQoS(message,consumer);    if (qos == 0) {      sendServerMessage((int)message.getMessageID(),(ServerMessageImpl)message,deliveryCount,qos);      session.getServerSession().acknowledge(consumer.getID(),message.getMessageID());    } else {      int mqttid=outboundStore.generateMqttId(message.getMessageID(),consumer.getID());      outboundStore.publish(mqttid,message.getMessageID(),consumer.getID());      sendServerMessage(mqttid,(ServerMessageImpl)message,deliveryCount,qos);    }  }}  }
class C{  public Interaction reCoordinate(int x,int y){  return new Interaction(x,y,this.sender,this.blockLocation,frameLocation,rightHanded);}  }
class C{  @Override public String execute(){  return INPUT;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected List<E> executeQuery(IIndexQuery indexQuery,Comparator<? super E> comparator,boolean useForkJoin){  return this.executeQuery(indexQuery,null,comparator,-1,useForkJoin);}  }
class C{  Map<String,String> mergeReleaseConfigurations(List<Release> releases){  Map<String,String> result=Maps.newHashMap();  for (  Release release : Lists.reverse(releases)) {    result.putAll(gson.fromJson(release.getConfigurations(),configurationTypeReference));  }  return result;}  }
class C{  protected ReverbType(String name,int earlyReflectionDelay,float earlyReflectionIntensity,int lateReflectionDelay,float lateReflectionIntensity,int decayTime){  this.name=name;  this.earlyReflectionDelay=earlyReflectionDelay;  this.earlyReflectionIntensity=earlyReflectionIntensity;  this.lateReflectionDelay=lateReflectionDelay;  this.lateReflectionIntensity=lateReflectionIntensity;  this.decayTime=decayTime;}  }
class C{  public void deleteReview(Long reviewKey) throws OperationNotPermittedException, ObjectNotFoundException {  ArgumentValidator.notNull("reviewKey",reviewKey);  ProductReview review=dm.getReference(ProductReview.class,reviewKey.longValue());  deleteReviewInt(review,false,null);}  }
class C{  public NBTTagCompound writeToNBT(NBTTagCompound nbt){  nbt.setString("gem",this.gemType.name);  nbt.setInteger("type",this.combatType.ordinal());  return nbt;}  }
class C{  @Override public String toString(){  return new String(buf,0,count);}  }
class C{  public void computeNearest(IMultiPoint tdp){  target=tdp;  nearest=tree.nearest(tdp);}  }
class C{  @Override public boolean stopCellEditing(){  for (int i=0; i < editors.length; ++i) {    if (!editors[i].stopCellEditing()) {      return false;    }  }  return super.stopCellEditing();}  }
class C{  public static void addParametersToWriterInput(PrintWriter writer,Map<?,?> parameterMap){  if (parameterMap == null) {    return;  }  Set<?> keySet=parameterMap.keySet();  if (keySet != null) {    Iterator<?> parameterNames=keySet.iterator();    while (parameterNames.hasNext()) {      String paramName=(String)parameterNames.next();      Object object=parameterMap.get(paramName);      String[] output=(String[])object;      writer.printf("%s=%s&",paramName,output[0]);    }  }}  }
class C{  public Analyzer withReferencePoint(double... referencePoint){  this.referencePoint=referencePoint;  return this;}  }
class C{  public IntTable(int c){  table=new Entry[c];}  }
class C{  public static String dumps(Object value){  StringBuilder builder=new StringBuilder();  if (value == null) {    builder.append("null");    return builder.toString();  }  if (value instanceof String) {    builder.append('\"');    builder.append(escape((String)value));    builder.append('\"');    return builder.toString();  }  if (value instanceof Double) {    if (((Double)value).isInfinite() || ((Double)value).isNaN())     builder.append("null"); else     builder.append(value.toString());    return builder.toString();  }  if (value instanceof Float) {    if (((Float)value).isInfinite() || ((Float)value).isNaN())     builder.append("null"); else     builder.append(value.toString());    return builder.toString();  }  if (value instanceof Number) {    builder.append(value.toString());    return builder.toString();  }  if (value instanceof Boolean) {    builder.append(value.toString());    return builder.toString();  }  if (value instanceof Map<?,?>) {    builder.append(dumpsMap((Map<?,?>)value));    return builder.toString();  }  if (value instanceof Collection<?>) {    builder.append(dumpsList((Collection<?>)value));    return builder.toString();  }  if (value instanceof Iterable<?>) {    if (value instanceof dict<?>) {      builder.append(dumpsMap(((dict<?>)value).toHashMap()));    } else {      builder.append(dumpsList((Iterable<?>)value));    }    return builder.toString();  }  if (value instanceof byte[]) {    builder.append(dumpsList((byte[])value));    return builder.toString();  }  if (value instanceof short[]) {    builder.append(dumpsList((short[])value));    return builder.toString();  }  if (value instanceof int[]) {    builder.append(dumpsList((int[])value));    return builder.toString();  }  if (value instanceof long[]) {    builder.append(dumpsList((long[])value));    return builder.toString();  }  if (value instanceof float[]) {    builder.append(dumpsList((float[])value));    return builder.toString();  }  if (value instanceof double[]) {    builder.append(dumpsList((double[])value));    return builder.toString();  }  if (value instanceof boolean[]) {    builder.append(dumpsList((boolean[])value));    return builder.toString();  }  if (value instanceof char[]) {    builder.append(dumpsList((char[])value));    return builder.toString();  }  if (value instanceof Object[]) {    builder.append(dumpsList((Object[])value));    return builder.toString();  }  builder.append(value.toString());  return builder.toString();}  }
class C{  public static double max(Array array) throws PageException {  if (array.getDimension() > 1)   throw new ExpressionException("can only get max value from 1 dimensional arrays");  if (array.size() == 0)   return 0;  double rtn=_toDoubleValue(array,1);  int len=array.size();  try {    for (int i=2; i <= len; i++) {      double v=_toDoubleValue(array,i);      if (rtn < v)       rtn=v;    }  } catch (  PageException e) {    throw new ExpressionException("exception while execute array operation: " + e.getMessage());  }  return rtn;}  }
class C{  public static Ignite start(String springCfgPath) throws IgniteException {  try {    return IgnitionEx.start(springCfgPath);  } catch (  IgniteCheckedException e) {    throw U.convertException(e);  }}  }
class C{  protected void startLongTimer(){  restartTimer(LONG_TIMEOUT);}  }
class C{  public static FunctionScoreQueryBuilder functionScoreQuery(){  return new FunctionScoreQueryBuilder();}  }
class C{  public boolean isRange(int start,int end,boolean value){  if (end < start) {    throw new IllegalArgumentException();  }  if (end == start) {    return true;  }  end--;  int firstInt=start >> 5;  int lastInt=end >> 5;  for (int i=firstInt; i <= lastInt; i++) {    int firstBit=i > firstInt ? 0 : start & 0x1F;    int lastBit=i < lastInt ? 31 : end & 0x1F;    int mask;    if (firstBit == 0 && lastBit == 31) {      mask=-1;    } else {      mask=0;      for (int j=firstBit; j <= lastBit; j++) {        mask|=1 << j;      }    }    if ((bits[i] & mask) != (value ? mask : 0)) {      return false;    }  }  return true;}  }
class C{  public boolean hasSender(){  return sender != null;}  }
class C{  public static Result update() throws GitAPIException {  String currentVersion=null;  Exception exception=null;  try {    boolean useUpdateCheck=play.Configuration.root().getBoolean("application.update.check.use");    if (useUpdateCheck) {      currentVersion=Config.getCurrentVersion();      YobiUpdate.refreshVersionToUpdate();    }  } catch (  Exception e) {    exception=e;  }  return ok(update.render("title.siteSetting",currentVersion,YobiUpdate.versionToUpdate,exception));}  }
class C{  public void pasteSubsession(List sessionElements,Point point){  SessionWrapper sessionWrapper=(SessionWrapper)getGraph();  sessionWrapper.pasteSubsession(sessionElements,point);  deselectAll();  for (  Object sessionElement : sessionElements) {    if (sessionElement instanceof GraphNode) {      Node modelNode=(Node)sessionElement;      selectNode(modelNode);    }  }  selectConnectingEdges();}  }
class C{  public static boolean isFTLIdentifierPart(final char c){  return isFTLIdentifierStart(c) || (c >= '0' && c <= '9');}  }
class C{  public TermsByQueryRequest orderBy(Ordering ordering){  this.ordering=ordering;  return this;}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  algId.encode(tmp);  out.write(tmp.toByteArray());}  }
class C{  boolean pageScroll(int direction){  int nextPage=-1;  boolean down=false;  if (direction == FOCUS_UP) {    nextPage=Math.max(0,mSelectedPosition - getChildCount() - 1);  } else   if (direction == FOCUS_DOWN) {    nextPage=Math.min(mItemCount - 1,mSelectedPosition + getChildCount() - 1);    down=true;  }  if (nextPage >= 0) {    int position=lookForSelectablePosition(nextPage,down);    if (position >= 0) {      mLayoutMode=LAYOUT_SPECIFIC;      mSpecificLeft=getPaddingLeft() + getHorizontalFadingEdgeLength();      if (down && position > mItemCount - getChildCount()) {        mLayoutMode=LAYOUT_FORCE_RIGHT;      }      if (!down && position < getChildCount()) {        mLayoutMode=LAYOUT_FORCE_LEFT;      }      setSelectionInt(position);      invokeOnItemScrollListener();      if (!awakenScrollBars()) {        invalidate();      }      return true;    }  }  return false;}  }
class C{  public static void playerError(Player player,String err,boolean dumpStack){  if (!Game.ignoreAllPlayerErrors) {    if (Game.ignoreSomePlayerErrors) {      if (Game.ignoreList.contains(player.getPlayerName())) {        return;      }    }    log(player.getPlayerName() + ":ERROR: " + err);    if (dumpStack) {      Thread.dumpStack();    }  }}  }
class C{  public static double var(double[] a,int lo,int hi){  int length=hi - lo + 1;  if (lo < 0 || hi >= a.length || lo > hi)   throw new IndexOutOfBoundsException("Subarray indices out of bounds");  if (length == 0)   return Double.NaN;  double avg=mean(a,lo,hi);  double sum=0.0;  for (int i=lo; i <= hi; i++) {    sum+=(a[i] - avg) * (a[i] - avg);  }  return sum / (length - 1);}  }
class C{  public FileImportError[] importFile(String SID,String externalUserId,Long externalFileId,String externalType,Long room_id,boolean isOwner,String path,Long parentFolderId,String fileSystemName) throws AxisFault {  return this.geFileServiceProxy().importFile(SID,externalUserId,externalFileId,externalType,room_id,isOwner,path,parentFolderId,fileSystemName);}  }
class C{  public AuthnProviderRestRep update(URI id,AuthnUpdateParam input){  return client.put(AuthnProviderRestRep.class,input,getIdUrl(),id);}  }
class C{  private void initCachingHttpHeadersFilter(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Registering Caching HTTP Headers Filter");  FilterRegistration.Dynamic cachingHttpHeadersFilter=servletContext.addFilter("cachingHttpHeadersFilter",new CachingHttpHeadersFilter(env));  cachingHttpHeadersFilter.addMappingForUrlPatterns(disps,true,"/dist/assets/*");  cachingHttpHeadersFilter.addMappingForUrlPatterns(disps,true,"/dist/scripts/*");  cachingHttpHeadersFilter.setAsyncSupported(true);}  }
class C{  public HasDeployableSupportValidator(DeployableType deployableType){  this.deployableType=deployableType;}  }
class C{  public Iterator iterator(){  return Collections.EMPTY_LIST.iterator();}  }
class C{  @Override protected T doSwitch(int classifierID,EObject theEObject){switch (classifierID) {case N4JSPackage.NAMED_ELEMENT:{      NamedElement namedElement=(NamedElement)theEObject;      T result=caseNamedElement(namedElement);      if (result == null)       result=defaultCase(theEObject);      return result;    }case N4JSPackage.SCRIPT:{    Script script=(Script)theEObject;    T result=caseScript(script);    if (result == null)     result=caseVariableEnvironmentElement(script);    if (result == null)     result=caseAnnotableElement(script);    if (result == null)     result=defaultCase(theEObject);    return result;  }case N4JSPackage.SCRIPT_ELEMENT:{  ScriptElement scriptElement=(ScriptElement)theEObject;  T result=caseScriptElement(scriptElement);  if (result == null)   result=defaultCase(theEObject);  return result;}case N4JSPackage.EXPORT_DECLARATION:{ExportDeclaration exportDeclaration=(ExportDeclaration)theEObject;T result=caseExportDeclaration(exportDeclaration);if (result == null) result=caseAnnotableScriptElement(exportDeclaration);if (result == null) result=caseAnnotableElement(exportDeclaration);if (result == null) result=caseScriptElement(exportDeclaration);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.EXPORT_SPECIFIER:{ExportSpecifier exportSpecifier=(ExportSpecifier)theEObject;T result=caseExportSpecifier(exportSpecifier);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.EXPORTABLE_ELEMENT:{ExportableElement exportableElement=(ExportableElement)theEObject;T result=caseExportableElement(exportableElement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.IMPORT_DECLARATION:{ImportDeclaration importDeclaration=(ImportDeclaration)theEObject;T result=caseImportDeclaration(importDeclaration);if (result == null) result=caseAnnotableScriptElement(importDeclaration);if (result == null) result=caseAnnotableElement(importDeclaration);if (result == null) result=caseScriptElement(importDeclaration);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.IMPORT_SPECIFIER:{ImportSpecifier importSpecifier=(ImportSpecifier)theEObject;T result=caseImportSpecifier(importSpecifier);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.NAMED_IMPORT_SPECIFIER:{NamedImportSpecifier namedImportSpecifier=(NamedImportSpecifier)theEObject;T result=caseNamedImportSpecifier(namedImportSpecifier);if (result == null) result=caseImportSpecifier(namedImportSpecifier);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.DEFAULT_IMPORT_SPECIFIER:{DefaultImportSpecifier defaultImportSpecifier=(DefaultImportSpecifier)theEObject;T result=caseDefaultImportSpecifier(defaultImportSpecifier);if (result == null) result=caseNamedImportSpecifier(defaultImportSpecifier);if (result == null) result=caseImportSpecifier(defaultImportSpecifier);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.NAMESPACE_IMPORT_SPECIFIER:{NamespaceImportSpecifier namespaceImportSpecifier=(NamespaceImportSpecifier)theEObject;T result=caseNamespaceImportSpecifier(namespaceImportSpecifier);if (result == null) result=caseImportSpecifier(namespaceImportSpecifier);if (result == null) result=caseTypeDefiningElement(namespaceImportSpecifier);if (result == null) result=caseTypableElement(namespaceImportSpecifier);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.TYPE_PROVIDING_ELEMENT:{TypeProvidingElement typeProvidingElement=(TypeProvidingElement)theEObject;T result=caseTypeProvidingElement(typeProvidingElement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.TYPED_ELEMENT:{TypedElement typedElement=(TypedElement)theEObject;T result=caseTypedElement(typedElement);if (result == null) result=caseTypeProvidingElement(typedElement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.VARIABLE_ENVIRONMENT_ELEMENT:{VariableEnvironmentElement variableEnvironmentElement=(VariableEnvironmentElement)theEObject;T result=caseVariableEnvironmentElement(variableEnvironmentElement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.THIS_TARGET:{ThisTarget thisTarget=(ThisTarget)theEObject;T result=caseThisTarget(thisTarget);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.THIS_ARG_PROVIDER:{ThisArgProvider thisArgProvider=(ThisArgProvider)theEObject;T result=caseThisArgProvider(thisArgProvider);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.VARIABLE:{Variable variable=(Variable)theEObject;T result=caseVariable(variable);if (result == null) result=caseTypedElement(variable);if (result == null) result=caseIdentifiableElement(variable);if (result == null) result=caseNamedElement(variable);if (result == null) result=caseTypeProvidingElement(variable);if (result == null) result=caseTypableElement(variable);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.ANNOTABLE_ELEMENT:{AnnotableElement annotableElement=(AnnotableElement)theEObject;T result=caseAnnotableElement(annotableElement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.ANNOTABLE_SCRIPT_ELEMENT:{AnnotableScriptElement annotableScriptElement=(AnnotableScriptElement)theEObject;T result=caseAnnotableScriptElement(annotableScriptElement);if (result == null) result=caseAnnotableElement(annotableScriptElement);if (result == null) result=caseScriptElement(annotableScriptElement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.ANNOTABLE_EXPRESSION:{AnnotableExpression annotableExpression=(AnnotableExpression)theEObject;T result=caseAnnotableExpression(annotableExpression);if (result == null) result=caseAnnotableElement(annotableExpression);if (result == null) result=caseExpression(annotableExpression);if (result == null) result=caseTypableElement(annotableExpression);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.ABSTRACT_ANNOTATION_LIST:{AbstractAnnotationList abstractAnnotationList=(AbstractAnnotationList)theEObject;T result=caseAbstractAnnotationList(abstractAnnotationList);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.ANNOTATION_LIST:{AnnotationList annotationList=(AnnotationList)theEObject;T result=caseAnnotationList(annotationList);if (result == null) result=caseAbstractAnnotationList(annotationList);if (result == null) result=caseStatement(annotationList);if (result == null) result=caseExportableElement(annotationList);if (result == null) result=caseScriptElement(annotationList);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.EXPRESSION_ANNOTATION_LIST:{ExpressionAnnotationList expressionAnnotationList=(ExpressionAnnotationList)theEObject;T result=caseExpressionAnnotationList(expressionAnnotationList);if (result == null) result=caseAbstractAnnotationList(expressionAnnotationList);if (result == null) result=caseExpression(expressionAnnotationList);if (result == null) result=caseTypableElement(expressionAnnotationList);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.ANNOTATION:{Annotation annotation=(Annotation)theEObject;T result=caseAnnotation(annotation);if (result == null) result=caseNamedElement(annotation);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.ANNOTATION_ARGUMENT:{AnnotationArgument annotationArgument=(AnnotationArgument)theEObject;T result=caseAnnotationArgument(annotationArgument);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.LITERAL_ANNOTATION_ARGUMENT:{LiteralAnnotationArgument literalAnnotationArgument=(LiteralAnnotationArgument)theEObject;T result=caseLiteralAnnotationArgument(literalAnnotationArgument);if (result == null) result=caseAnnotationArgument(literalAnnotationArgument);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.TYPE_REF_ANNOTATION_ARGUMENT:{TypeRefAnnotationArgument typeRefAnnotationArgument=(TypeRefAnnotationArgument)theEObject;T result=caseTypeRefAnnotationArgument(typeRefAnnotationArgument);if (result == null) result=caseAnnotationArgument(typeRefAnnotationArgument);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR:{FunctionOrFieldAccessor functionOrFieldAccessor=(FunctionOrFieldAccessor)theEObject;T result=caseFunctionOrFieldAccessor(functionOrFieldAccessor);if (result == null) result=caseAnnotableElement(functionOrFieldAccessor);if (result == null) result=caseVariableEnvironmentElement(functionOrFieldAccessor);if (result == null) result=caseThisArgProvider(functionOrFieldAccessor);if (result == null) result=caseTypableElement(functionOrFieldAccessor);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.FUNCTION_DEFINITION:{FunctionDefinition functionDefinition=(FunctionDefinition)theEObject;T result=caseFunctionDefinition(functionDefinition);if (result == null) result=caseFunctionOrFieldAccessor(functionDefinition);if (result == null) result=caseTypeDefiningElement(functionDefinition);if (result == null) result=caseAnnotableElement(functionDefinition);if (result == null) result=caseVariableEnvironmentElement(functionDefinition);if (result == null) result=caseThisArgProvider(functionDefinition);if (result == null) result=caseTypableElement(functionDefinition);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.FIELD_ACCESSOR:{FieldAccessor fieldAccessor=(FieldAccessor)theEObject;T result=caseFieldAccessor(fieldAccessor);if (result == null) result=caseFunctionOrFieldAccessor(fieldAccessor);if (result == null) result=caseTypeProvidingElement(fieldAccessor);if (result == null) result=casePropertyNameOwner(fieldAccessor);if (result == null) result=caseAnnotableElement(fieldAccessor);if (result == null) result=caseVariableEnvironmentElement(fieldAccessor);if (result == null) result=caseThisArgProvider(fieldAccessor);if (result == null) result=caseTypableElement(fieldAccessor);if (result == null) result=caseNamedElement(fieldAccessor);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.FUNCTION_DECLARATION:{FunctionDeclaration functionDeclaration=(FunctionDeclaration)theEObject;T result=caseFunctionDeclaration(functionDeclaration);if (result == null) result=caseAnnotableScriptElement(functionDeclaration);if (result == null) result=caseModifiableElement(functionDeclaration);if (result == null) result=caseStatement(functionDeclaration);if (result == null) result=caseFunctionDefinition(functionDeclaration);if (result == null) result=caseGenericDeclaration(functionDeclaration);if (result == null) result=caseExportableElement(functionDeclaration);if (result == null) result=caseNamedElement(functionDeclaration);if (result == null) result=caseScriptElement(functionDeclaration);if (result == null) result=caseFunctionOrFieldAccessor(functionDeclaration);if (result == null) result=caseTypeDefiningElement(functionDeclaration);if (result == null) result=caseAnnotableElement(functionDeclaration);if (result == null) result=caseVariableEnvironmentElement(functionDeclaration);if (result == null) result=caseThisArgProvider(functionDeclaration);if (result == null) result=caseTypableElement(functionDeclaration);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.FUNCTION_EXPRESSION:{FunctionExpression functionExpression=(FunctionExpression)theEObject;T result=caseFunctionExpression(functionExpression);if (result == null) result=caseFunctionDefinition(functionExpression);if (result == null) result=caseAnnotableExpression(functionExpression);if (result == null) result=caseGenericDeclaration(functionExpression);if (result == null) result=caseNamedElement(functionExpression);if (result == null) result=caseFunctionOrFieldAccessor(functionExpression);if (result == null) result=caseTypeDefiningElement(functionExpression);if (result == null) result=caseExpression(functionExpression);if (result == null) result=caseAnnotableElement(functionExpression);if (result == null) result=caseVariableEnvironmentElement(functionExpression);if (result == null) result=caseThisArgProvider(functionExpression);if (result == null) result=caseTypableElement(functionExpression);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.ARROW_FUNCTION:{ArrowFunction arrowFunction=(ArrowFunction)theEObject;T result=caseArrowFunction(arrowFunction);if (result == null) result=caseFunctionExpression(arrowFunction);if (result == null) result=caseFunctionDefinition(arrowFunction);if (result == null) result=caseAnnotableExpression(arrowFunction);if (result == null) result=caseGenericDeclaration(arrowFunction);if (result == null) result=caseNamedElement(arrowFunction);if (result == null) result=caseFunctionOrFieldAccessor(arrowFunction);if (result == null) result=caseTypeDefiningElement(arrowFunction);if (result == null) result=caseExpression(arrowFunction);if (result == null) result=caseAnnotableElement(arrowFunction);if (result == null) result=caseVariableEnvironmentElement(arrowFunction);if (result == null) result=caseThisArgProvider(arrowFunction);if (result == null) result=caseTypableElement(arrowFunction);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.LOCAL_ARGUMENTS_VARIABLE:{LocalArgumentsVariable localArgumentsVariable=(LocalArgumentsVariable)theEObject;T result=caseLocalArgumentsVariable(localArgumentsVariable);if (result == null) result=caseVariable(localArgumentsVariable);if (result == null) result=caseTypedElement(localArgumentsVariable);if (result == null) result=caseIdentifiableElement(localArgumentsVariable);if (result == null) result=caseNamedElement(localArgumentsVariable);if (result == null) result=caseTypeProvidingElement(localArgumentsVariable);if (result == null) result=caseTypableElement(localArgumentsVariable);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.FORMAL_PARAMETER:{FormalParameter formalParameter=(FormalParameter)theEObject;T result=caseFormalParameter(formalParameter);if (result == null) result=caseAnnotableElement(formalParameter);if (result == null) result=caseVariable(formalParameter);if (result == null) result=caseTypedElement(formalParameter);if (result == null) result=caseIdentifiableElement(formalParameter);if (result == null) result=caseNamedElement(formalParameter);if (result == null) result=caseTypeProvidingElement(formalParameter);if (result == null) result=caseTypableElement(formalParameter);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.BLOCK:{Block block=(Block)theEObject;T result=caseBlock(block);if (result == null) result=caseStatement(block);if (result == null) result=caseVariableEnvironmentElement(block);if (result == null) result=caseScriptElement(block);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.STATEMENT:{Statement statement=(Statement)theEObject;T result=caseStatement(statement);if (result == null) result=caseScriptElement(statement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.VARIABLE_DECLARATION_CONTAINER:{VariableDeclarationContainer variableDeclarationContainer=(VariableDeclarationContainer)theEObject;T result=caseVariableDeclarationContainer(variableDeclarationContainer);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.VARIABLE_STATEMENT:{VariableStatement variableStatement=(VariableStatement)theEObject;T result=caseVariableStatement(variableStatement);if (result == null) result=caseStatement(variableStatement);if (result == null) result=caseVariableDeclarationContainer(variableStatement);if (result == null) result=caseScriptElement(variableStatement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.EXPORTED_VARIABLE_STATEMENT:{ExportedVariableStatement exportedVariableStatement=(ExportedVariableStatement)theEObject;T result=caseExportedVariableStatement(exportedVariableStatement);if (result == null) result=caseVariableStatement(exportedVariableStatement);if (result == null) result=caseExportableElement(exportedVariableStatement);if (result == null) result=caseAnnotableScriptElement(exportedVariableStatement);if (result == null) result=caseModifiableElement(exportedVariableStatement);if (result == null) result=caseStatement(exportedVariableStatement);if (result == null) result=caseVariableDeclarationContainer(exportedVariableStatement);if (result == null) result=caseAnnotableElement(exportedVariableStatement);if (result == null) result=caseScriptElement(exportedVariableStatement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.VARIABLE_DECLARATION_OR_BINDING:{VariableDeclarationOrBinding variableDeclarationOrBinding=(VariableDeclarationOrBinding)theEObject;T result=caseVariableDeclarationOrBinding(variableDeclarationOrBinding);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.VARIABLE_BINDING:{VariableBinding variableBinding=(VariableBinding)theEObject;T result=caseVariableBinding(variableBinding);if (result == null) result=caseVariableDeclarationOrBinding(variableBinding);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.EXPORTED_VARIABLE_BINDING:{ExportedVariableBinding exportedVariableBinding=(ExportedVariableBinding)theEObject;T result=caseExportedVariableBinding(exportedVariableBinding);if (result == null) result=caseVariableBinding(exportedVariableBinding);if (result == null) result=caseVariableDeclarationOrBinding(exportedVariableBinding);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.VARIABLE_DECLARATION:{VariableDeclaration variableDeclaration=(VariableDeclaration)theEObject;T result=caseVariableDeclaration(variableDeclaration);if (result == null) result=caseVariableDeclarationOrBinding(variableDeclaration);if (result == null) result=caseAnnotableElement(variableDeclaration);if (result == null) result=caseVariable(variableDeclaration);if (result == null) result=caseTypedElement(variableDeclaration);if (result == null) result=caseIdentifiableElement(variableDeclaration);if (result == null) result=caseNamedElement(variableDeclaration);if (result == null) result=caseTypeProvidingElement(variableDeclaration);if (result == null) result=caseTypableElement(variableDeclaration);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.EXPORTED_VARIABLE_DECLARATION:{ExportedVariableDeclaration exportedVariableDeclaration=(ExportedVariableDeclaration)theEObject;T result=caseExportedVariableDeclaration(exportedVariableDeclaration);if (result == null) result=caseVariableDeclaration(exportedVariableDeclaration);if (result == null) result=caseVariableDeclarationOrBinding(exportedVariableDeclaration);if (result == null) result=caseAnnotableElement(exportedVariableDeclaration);if (result == null) result=caseVariable(exportedVariableDeclaration);if (result == null) result=caseTypedElement(exportedVariableDeclaration);if (result == null) result=caseIdentifiableElement(exportedVariableDeclaration);if (result == null) result=caseNamedElement(exportedVariableDeclaration);if (result == null) result=caseTypeProvidingElement(exportedVariableDeclaration);if (result == null) result=caseTypableElement(exportedVariableDeclaration);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.EMPTY_STATEMENT:{EmptyStatement emptyStatement=(EmptyStatement)theEObject;T result=caseEmptyStatement(emptyStatement);if (result == null) result=caseStatement(emptyStatement);if (result == null) result=caseScriptElement(emptyStatement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.EXPRESSION_STATEMENT:{ExpressionStatement expressionStatement=(ExpressionStatement)theEObject;T result=caseExpressionStatement(expressionStatement);if (result == null) result=caseStatement(expressionStatement);if (result == null) result=caseScriptElement(expressionStatement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.IF_STATEMENT:{IfStatement ifStatement=(IfStatement)theEObject;T result=caseIfStatement(ifStatement);if (result == null) result=caseStatement(ifStatement);if (result == null) result=caseScriptElement(ifStatement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.ITERATION_STATEMENT:{IterationStatement iterationStatement=(IterationStatement)theEObject;T result=caseIterationStatement(iterationStatement);if (result == null) result=caseStatement(iterationStatement);if (result == null) result=caseScriptElement(iterationStatement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.DO_STATEMENT:{DoStatement doStatement=(DoStatement)theEObject;T result=caseDoStatement(doStatement);if (result == null) result=caseIterationStatement(doStatement);if (result == null) result=caseStatement(doStatement);if (result == null) result=caseScriptElement(doStatement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.WHILE_STATEMENT:{WhileStatement whileStatement=(WhileStatement)theEObject;T result=caseWhileStatement(whileStatement);if (result == null) result=caseIterationStatement(whileStatement);if (result == null) result=caseStatement(whileStatement);if (result == null) result=caseScriptElement(whileStatement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.FOR_STATEMENT:{ForStatement forStatement=(ForStatement)theEObject;T result=caseForStatement(forStatement);if (result == null) result=caseVariableDeclarationContainer(forStatement);if (result == null) result=caseIterationStatement(forStatement);if (result == null) result=caseVariableEnvironmentElement(forStatement);if (result == null) result=caseStatement(forStatement);if (result == null) result=caseScriptElement(forStatement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.CONTINUE_STATEMENT:{ContinueStatement continueStatement=(ContinueStatement)theEObject;T result=caseContinueStatement(continueStatement);if (result == null) result=caseStatement(continueStatement);if (result == null) result=caseScriptElement(continueStatement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.BREAK_STATEMENT:{BreakStatement breakStatement=(BreakStatement)theEObject;T result=caseBreakStatement(breakStatement);if (result == null) result=caseStatement(breakStatement);if (result == null) result=caseScriptElement(breakStatement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.RETURN_STATEMENT:{ReturnStatement returnStatement=(ReturnStatement)theEObject;T result=caseReturnStatement(returnStatement);if (result == null) result=caseStatement(returnStatement);if (result == null) result=caseScriptElement(returnStatement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.WITH_STATEMENT:{WithStatement withStatement=(WithStatement)theEObject;T result=caseWithStatement(withStatement);if (result == null) result=caseStatement(withStatement);if (result == null) result=caseVariableEnvironmentElement(withStatement);if (result == null) result=caseScriptElement(withStatement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.SWITCH_STATEMENT:{SwitchStatement switchStatement=(SwitchStatement)theEObject;T result=caseSwitchStatement(switchStatement);if (result == null) result=caseStatement(switchStatement);if (result == null) result=caseVariableEnvironmentElement(switchStatement);if (result == null) result=caseScriptElement(switchStatement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.ABSTRACT_CASE_CLAUSE:{AbstractCaseClause abstractCaseClause=(AbstractCaseClause)theEObject;T result=caseAbstractCaseClause(abstractCaseClause);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.CASE_CLAUSE:{CaseClause caseClause=(CaseClause)theEObject;T result=caseCaseClause(caseClause);if (result == null) result=caseAbstractCaseClause(caseClause);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.DEFAULT_CLAUSE:{DefaultClause defaultClause=(DefaultClause)theEObject;T result=caseDefaultClause(defaultClause);if (result == null) result=caseAbstractCaseClause(defaultClause);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.LABELLED_STATEMENT:{LabelledStatement labelledStatement=(LabelledStatement)theEObject;T result=caseLabelledStatement(labelledStatement);if (result == null) result=caseStatement(labelledStatement);if (result == null) result=caseNamedElement(labelledStatement);if (result == null) result=caseScriptElement(labelledStatement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.THROW_STATEMENT:{ThrowStatement throwStatement=(ThrowStatement)theEObject;T result=caseThrowStatement(throwStatement);if (result == null) result=caseStatement(throwStatement);if (result == null) result=caseScriptElement(throwStatement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.TRY_STATEMENT:{TryStatement tryStatement=(TryStatement)theEObject;T result=caseTryStatement(tryStatement);if (result == null) result=caseStatement(tryStatement);if (result == null) result=caseScriptElement(tryStatement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.ABSTRACT_CATCH_BLOCK:{AbstractCatchBlock abstractCatchBlock=(AbstractCatchBlock)theEObject;T result=caseAbstractCatchBlock(abstractCatchBlock);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.CATCH_BLOCK:{CatchBlock catchBlock=(CatchBlock)theEObject;T result=caseCatchBlock(catchBlock);if (result == null) result=caseAbstractCatchBlock(catchBlock);if (result == null) result=caseVariableEnvironmentElement(catchBlock);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.CATCH_VARIABLE:{CatchVariable catchVariable=(CatchVariable)theEObject;T result=caseCatchVariable(catchVariable);if (result == null) result=caseVariable(catchVariable);if (result == null) result=caseTypedElement(catchVariable);if (result == null) result=caseIdentifiableElement(catchVariable);if (result == null) result=caseNamedElement(catchVariable);if (result == null) result=caseTypeProvidingElement(catchVariable);if (result == null) result=caseTypableElement(catchVariable);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.FINALLY_BLOCK:{FinallyBlock finallyBlock=(FinallyBlock)theEObject;T result=caseFinallyBlock(finallyBlock);if (result == null) result=caseAbstractCatchBlock(finallyBlock);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.DEBUGGER_STATEMENT:{DebuggerStatement debuggerStatement=(DebuggerStatement)theEObject;T result=caseDebuggerStatement(debuggerStatement);if (result == null) result=caseStatement(debuggerStatement);if (result == null) result=caseScriptElement(debuggerStatement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.PRIMARY_EXPRESSION:{PrimaryExpression primaryExpression=(PrimaryExpression)theEObject;T result=casePrimaryExpression(primaryExpression);if (result == null) result=caseExpression(primaryExpression);if (result == null) result=caseTypableElement(primaryExpression);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.PAREN_EXPRESSION:{ParenExpression parenExpression=(ParenExpression)theEObject;T result=caseParenExpression(parenExpression);if (result == null) result=casePrimaryExpression(parenExpression);if (result == null) result=caseExpression(parenExpression);if (result == null) result=caseTypableElement(parenExpression);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.IDENTIFIER_REF:{IdentifierRef identifierRef=(IdentifierRef)theEObject;T result=caseIdentifierRef(identifierRef);if (result == null) result=casePrimaryExpression(identifierRef);if (result == null) result=caseStrictModeRelevant(identifierRef);if (result == null) result=caseExpression(identifierRef);if (result == null) result=caseTypableElement(identifierRef);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.STRICT_MODE_RELEVANT:{StrictModeRelevant strictModeRelevant=(StrictModeRelevant)theEObject;T result=caseStrictModeRelevant(strictModeRelevant);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.SUPER_LITERAL:{SuperLiteral superLiteral=(SuperLiteral)theEObject;T result=caseSuperLiteral(superLiteral);if (result == null) result=casePrimaryExpression(superLiteral);if (result == null) result=caseExpression(superLiteral);if (result == null) result=caseTypableElement(superLiteral);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.THIS_LITERAL:{ThisLiteral thisLiteral=(ThisLiteral)theEObject;T result=caseThisLiteral(thisLiteral);if (result == null) result=casePrimaryExpression(thisLiteral);if (result == null) result=caseStrictModeRelevant(thisLiteral);if (result == null) result=caseExpression(thisLiteral);if (result == null) result=caseTypableElement(thisLiteral);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.ARRAY_LITERAL:{ArrayLiteral arrayLiteral=(ArrayLiteral)theEObject;T result=caseArrayLiteral(arrayLiteral);if (result == null) result=casePrimaryExpression(arrayLiteral);if (result == null) result=caseExpression(arrayLiteral);if (result == null) result=caseTypableElement(arrayLiteral);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.ARRAY_ELEMENT:{ArrayElement arrayElement=(ArrayElement)theEObject;T result=caseArrayElement(arrayElement);if (result == null) result=caseTypableElement(arrayElement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.ARRAY_PADDING:{ArrayPadding arrayPadding=(ArrayPadding)theEObject;T result=caseArrayPadding(arrayPadding);if (result == null) result=caseArrayElement(arrayPadding);if (result == null) result=caseTypableElement(arrayPadding);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.OBJECT_LITERAL:{ObjectLiteral objectLiteral=(ObjectLiteral)theEObject;T result=caseObjectLiteral(objectLiteral);if (result == null) result=casePrimaryExpression(objectLiteral);if (result == null) result=caseThisTarget(objectLiteral);if (result == null) result=caseTypeDefiningElement(objectLiteral);if (result == null) result=caseExpression(objectLiteral);if (result == null) result=caseTypableElement(objectLiteral);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.PROPERTY_ASSIGNMENT:{PropertyAssignment propertyAssignment=(PropertyAssignment)theEObject;T result=casePropertyAssignment(propertyAssignment);if (result == null) result=caseAnnotableElement(propertyAssignment);if (result == null) result=caseVariableEnvironmentElement(propertyAssignment);if (result == null) result=casePropertyNameOwner(propertyAssignment);if (result == null) result=caseTypableElement(propertyAssignment);if (result == null) result=caseNamedElement(propertyAssignment);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.PROPERTY_NAME_OWNER:{PropertyNameOwner propertyNameOwner=(PropertyNameOwner)theEObject;T result=casePropertyNameOwner(propertyNameOwner);if (result == null) result=caseNamedElement(propertyNameOwner);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.LITERAL_OR_COMPUTED_PROPERTY_NAME:{LiteralOrComputedPropertyName literalOrComputedPropertyName=(LiteralOrComputedPropertyName)theEObject;T result=caseLiteralOrComputedPropertyName(literalOrComputedPropertyName);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.ANNOTABLE_PROPERTY_ASSIGNMENT:{AnnotablePropertyAssignment annotablePropertyAssignment=(AnnotablePropertyAssignment)theEObject;T result=caseAnnotablePropertyAssignment(annotablePropertyAssignment);if (result == null) result=casePropertyAssignment(annotablePropertyAssignment);if (result == null) result=caseAnnotableElement(annotablePropertyAssignment);if (result == null) result=caseVariableEnvironmentElement(annotablePropertyAssignment);if (result == null) result=casePropertyNameOwner(annotablePropertyAssignment);if (result == null) result=caseTypableElement(annotablePropertyAssignment);if (result == null) result=caseNamedElement(annotablePropertyAssignment);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.PROPERTY_ASSIGNMENT_ANNOTATION_LIST:{PropertyAssignmentAnnotationList propertyAssignmentAnnotationList=(PropertyAssignmentAnnotationList)theEObject;T result=casePropertyAssignmentAnnotationList(propertyAssignmentAnnotationList);if (result == null) result=caseAbstractAnnotationList(propertyAssignmentAnnotationList);if (result == null) result=casePropertyAssignment(propertyAssignmentAnnotationList);if (result == null) result=caseAnnotableElement(propertyAssignmentAnnotationList);if (result == null) result=caseVariableEnvironmentElement(propertyAssignmentAnnotationList);if (result == null) result=casePropertyNameOwner(propertyAssignmentAnnotationList);if (result == null) result=caseTypableElement(propertyAssignmentAnnotationList);if (result == null) result=caseNamedElement(propertyAssignmentAnnotationList);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.PROPERTY_NAME_VALUE_PAIR:{PropertyNameValuePair propertyNameValuePair=(PropertyNameValuePair)theEObject;T result=casePropertyNameValuePair(propertyNameValuePair);if (result == null) result=caseAnnotablePropertyAssignment(propertyNameValuePair);if (result == null) result=caseTypedElement(propertyNameValuePair);if (result == null) result=casePropertyAssignment(propertyNameValuePair);if (result == null) result=caseTypeProvidingElement(propertyNameValuePair);if (result == null) result=caseAnnotableElement(propertyNameValuePair);if (result == null) result=caseVariableEnvironmentElement(propertyNameValuePair);if (result == null) result=casePropertyNameOwner(propertyNameValuePair);if (result == null) result=caseTypableElement(propertyNameValuePair);if (result == null) result=caseNamedElement(propertyNameValuePair);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.PROPERTY_NAME_VALUE_PAIR_SINGLE_NAME:{PropertyNameValuePairSingleName propertyNameValuePairSingleName=(PropertyNameValuePairSingleName)theEObject;T result=casePropertyNameValuePairSingleName(propertyNameValuePairSingleName);if (result == null) result=casePropertyNameValuePair(propertyNameValuePairSingleName);if (result == null) result=caseAnnotablePropertyAssignment(propertyNameValuePairSingleName);if (result == null) result=caseTypedElement(propertyNameValuePairSingleName);if (result == null) result=casePropertyAssignment(propertyNameValuePairSingleName);if (result == null) result=caseTypeProvidingElement(propertyNameValuePairSingleName);if (result == null) result=caseAnnotableElement(propertyNameValuePairSingleName);if (result == null) result=caseVariableEnvironmentElement(propertyNameValuePairSingleName);if (result == null) result=casePropertyNameOwner(propertyNameValuePairSingleName);if (result == null) result=caseTypableElement(propertyNameValuePairSingleName);if (result == null) result=caseNamedElement(propertyNameValuePairSingleName);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.PROPERTY_METHOD_DECLARATION:{PropertyMethodDeclaration propertyMethodDeclaration=(PropertyMethodDeclaration)theEObject;T result=casePropertyMethodDeclaration(propertyMethodDeclaration);if (result == null) result=caseAnnotablePropertyAssignment(propertyMethodDeclaration);if (result == null) result=caseMethodDeclaration(propertyMethodDeclaration);if (result == null) result=casePropertyAssignment(propertyMethodDeclaration);if (result == null) result=caseFunctionDefinition(propertyMethodDeclaration);if (result == null) result=caseGenericDeclaration(propertyMethodDeclaration);if (result == null) result=caseTypedElement(propertyMethodDeclaration);if (result == null) result=casePropertyNameOwner(propertyMethodDeclaration);if (result == null) result=caseFunctionOrFieldAccessor(propertyMethodDeclaration);if (result == null) result=caseTypeDefiningElement(propertyMethodDeclaration);if (result == null) result=caseTypeProvidingElement(propertyMethodDeclaration);if (result == null) result=caseAnnotableElement(propertyMethodDeclaration);if (result == null) result=caseVariableEnvironmentElement(propertyMethodDeclaration);if (result == null) result=caseNamedElement(propertyMethodDeclaration);if (result == null) result=caseTypableElement(propertyMethodDeclaration);if (result == null) result=caseThisArgProvider(propertyMethodDeclaration);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.GETTER_DECLARATION:{GetterDeclaration getterDeclaration=(GetterDeclaration)theEObject;T result=caseGetterDeclaration(getterDeclaration);if (result == null) result=caseFieldAccessor(getterDeclaration);if (result == null) result=caseTypedElement(getterDeclaration);if (result == null) result=caseFunctionOrFieldAccessor(getterDeclaration);if (result == null) result=caseTypeProvidingElement(getterDeclaration);if (result == null) result=casePropertyNameOwner(getterDeclaration);if (result == null) result=caseAnnotableElement(getterDeclaration);if (result == null) result=caseVariableEnvironmentElement(getterDeclaration);if (result == null) result=caseThisArgProvider(getterDeclaration);if (result == null) result=caseTypableElement(getterDeclaration);if (result == null) result=caseNamedElement(getterDeclaration);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.SETTER_DECLARATION:{SetterDeclaration setterDeclaration=(SetterDeclaration)theEObject;T result=caseSetterDeclaration(setterDeclaration);if (result == null) result=caseFieldAccessor(setterDeclaration);if (result == null) result=caseFunctionOrFieldAccessor(setterDeclaration);if (result == null) result=caseTypeProvidingElement(setterDeclaration);if (result == null) result=casePropertyNameOwner(setterDeclaration);if (result == null) result=caseAnnotableElement(setterDeclaration);if (result == null) result=caseVariableEnvironmentElement(setterDeclaration);if (result == null) result=caseThisArgProvider(setterDeclaration);if (result == null) result=caseTypableElement(setterDeclaration);if (result == null) result=caseNamedElement(setterDeclaration);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.PROPERTY_GETTER_DECLARATION:{PropertyGetterDeclaration propertyGetterDeclaration=(PropertyGetterDeclaration)theEObject;T result=casePropertyGetterDeclaration(propertyGetterDeclaration);if (result == null) result=caseGetterDeclaration(propertyGetterDeclaration);if (result == null) result=caseAnnotablePropertyAssignment(propertyGetterDeclaration);if (result == null) result=caseFieldAccessor(propertyGetterDeclaration);if (result == null) result=caseTypedElement(propertyGetterDeclaration);if (result == null) result=casePropertyAssignment(propertyGetterDeclaration);if (result == null) result=caseFunctionOrFieldAccessor(propertyGetterDeclaration);if (result == null) result=caseTypeProvidingElement(propertyGetterDeclaration);if (result == null) result=casePropertyNameOwner(propertyGetterDeclaration);if (result == null) result=caseAnnotableElement(propertyGetterDeclaration);if (result == null) result=caseVariableEnvironmentElement(propertyGetterDeclaration);if (result == null) result=caseThisArgProvider(propertyGetterDeclaration);if (result == null) result=caseTypableElement(propertyGetterDeclaration);if (result == null) result=caseNamedElement(propertyGetterDeclaration);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.PROPERTY_SETTER_DECLARATION:{PropertySetterDeclaration propertySetterDeclaration=(PropertySetterDeclaration)theEObject;T result=casePropertySetterDeclaration(propertySetterDeclaration);if (result == null) result=caseSetterDeclaration(propertySetterDeclaration);if (result == null) result=caseAnnotablePropertyAssignment(propertySetterDeclaration);if (result == null) result=caseFieldAccessor(propertySetterDeclaration);if (result == null) result=casePropertyAssignment(propertySetterDeclaration);if (result == null) result=caseFunctionOrFieldAccessor(propertySetterDeclaration);if (result == null) result=caseTypeProvidingElement(propertySetterDeclaration);if (result == null) result=casePropertyNameOwner(propertySetterDeclaration);if (result == null) result=caseAnnotableElement(propertySetterDeclaration);if (result == null) result=caseVariableEnvironmentElement(propertySetterDeclaration);if (result == null) result=caseThisArgProvider(propertySetterDeclaration);if (result == null) result=caseTypableElement(propertySetterDeclaration);if (result == null) result=caseNamedElement(propertySetterDeclaration);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.EXPRESSION:{Expression expression=(Expression)theEObject;T result=caseExpression(expression);if (result == null) result=caseTypableElement(expression);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.NEW_TARGET:{NewTarget newTarget=(NewTarget)theEObject;T result=caseNewTarget(newTarget);if (result == null) result=caseExpression(newTarget);if (result == null) result=caseTypableElement(newTarget);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.NEW_EXPRESSION:{NewExpression newExpression=(NewExpression)theEObject;T result=caseNewExpression(newExpression);if (result == null) result=caseExpression(newExpression);if (result == null) result=caseParameterizedAccess(newExpression);if (result == null) result=caseTypableElement(newExpression);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.PARAMETERIZED_ACCESS:{ParameterizedAccess parameterizedAccess=(ParameterizedAccess)theEObject;T result=caseParameterizedAccess(parameterizedAccess);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.PARAMETERIZED_CALL_EXPRESSION:{ParameterizedCallExpression parameterizedCallExpression=(ParameterizedCallExpression)theEObject;T result=caseParameterizedCallExpression(parameterizedCallExpression);if (result == null) result=caseExpression(parameterizedCallExpression);if (result == null) result=caseParameterizedAccess(parameterizedCallExpression);if (result == null) result=caseTypableElement(parameterizedCallExpression);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.ARGUMENT:{Argument argument=(Argument)theEObject;T result=caseArgument(argument);if (result == null) result=caseTypableElement(argument);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.INDEXED_ACCESS_EXPRESSION:{IndexedAccessExpression indexedAccessExpression=(IndexedAccessExpression)theEObject;T result=caseIndexedAccessExpression(indexedAccessExpression);if (result == null) result=caseExpression(indexedAccessExpression);if (result == null) result=caseTypableElement(indexedAccessExpression);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.TAGGED_TEMPLATE_STRING:{TaggedTemplateString taggedTemplateString=(TaggedTemplateString)theEObject;T result=caseTaggedTemplateString(taggedTemplateString);if (result == null) result=caseExpression(taggedTemplateString);if (result == null) result=caseTypableElement(taggedTemplateString);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION:{ParameterizedPropertyAccessExpression parameterizedPropertyAccessExpression=(ParameterizedPropertyAccessExpression)theEObject;T result=caseParameterizedPropertyAccessExpression(parameterizedPropertyAccessExpression);if (result == null) result=caseExpression(parameterizedPropertyAccessExpression);if (result == null) result=caseParameterizedAccess(parameterizedPropertyAccessExpression);if (result == null) result=caseTypableElement(parameterizedPropertyAccessExpression);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.AWAIT_EXPRESSION:{AwaitExpression awaitExpression=(AwaitExpression)theEObject;T result=caseAwaitExpression(awaitExpression);if (result == null) result=caseExpression(awaitExpression);if (result == null) result=caseTypableElement(awaitExpression);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.PROMISIFY_EXPRESSION:{PromisifyExpression promisifyExpression=(PromisifyExpression)theEObject;T result=casePromisifyExpression(promisifyExpression);if (result == null) result=caseExpression(promisifyExpression);if (result == null) result=caseTypableElement(promisifyExpression);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.YIELD_EXPRESSION:{YieldExpression yieldExpression=(YieldExpression)theEObject;T result=caseYieldExpression(yieldExpression);if (result == null) result=caseExpression(yieldExpression);if (result == null) result=caseTypableElement(yieldExpression);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.LITERAL:{Literal literal=(Literal)theEObject;T result=caseLiteral(literal);if (result == null) result=casePrimaryExpression(literal);if (result == null) result=caseExpression(literal);if (result == null) result=caseTypableElement(literal);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.NULL_LITERAL:{NullLiteral nullLiteral=(NullLiteral)theEObject;T result=caseNullLiteral(nullLiteral);if (result == null) result=caseLiteral(nullLiteral);if (result == null) result=casePrimaryExpression(nullLiteral);if (result == null) result=caseExpression(nullLiteral);if (result == null) result=caseTypableElement(nullLiteral);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.BOOLEAN_LITERAL:{BooleanLiteral booleanLiteral=(BooleanLiteral)theEObject;T result=caseBooleanLiteral(booleanLiteral);if (result == null) result=caseLiteral(booleanLiteral);if (result == null) result=casePrimaryExpression(booleanLiteral);if (result == null) result=caseExpression(booleanLiteral);if (result == null) result=caseTypableElement(booleanLiteral);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.STRING_LITERAL:{StringLiteral stringLiteral=(StringLiteral)theEObject;T result=caseStringLiteral(stringLiteral);if (result == null) result=caseLiteral(stringLiteral);if (result == null) result=casePrimaryExpression(stringLiteral);if (result == null) result=caseExpression(stringLiteral);if (result == null) result=caseTypableElement(stringLiteral);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.TEMPLATE_LITERAL:{TemplateLiteral templateLiteral=(TemplateLiteral)theEObject;T result=caseTemplateLiteral(templateLiteral);if (result == null) result=casePrimaryExpression(templateLiteral);if (result == null) result=caseExpression(templateLiteral);if (result == null) result=caseTypableElement(templateLiteral);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.TEMPLATE_SEGMENT:{TemplateSegment templateSegment=(TemplateSegment)theEObject;T result=caseTemplateSegment(templateSegment);if (result == null) result=caseLiteral(templateSegment);if (result == null) result=casePrimaryExpression(templateSegment);if (result == null) result=caseExpression(templateSegment);if (result == null) result=caseTypableElement(templateSegment);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.NUMERIC_LITERAL:{NumericLiteral numericLiteral=(NumericLiteral)theEObject;T result=caseNumericLiteral(numericLiteral);if (result == null) result=caseLiteral(numericLiteral);if (result == null) result=casePrimaryExpression(numericLiteral);if (result == null) result=caseExpression(numericLiteral);if (result == null) result=caseTypableElement(numericLiteral);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.DOUBLE_LITERAL:{DoubleLiteral doubleLiteral=(DoubleLiteral)theEObject;T result=caseDoubleLiteral(doubleLiteral);if (result == null) result=caseNumericLiteral(doubleLiteral);if (result == null) result=caseLiteral(doubleLiteral);if (result == null) result=casePrimaryExpression(doubleLiteral);if (result == null) result=caseExpression(doubleLiteral);if (result == null) result=caseTypableElement(doubleLiteral);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.ABSTRACT_INT_LITERAL:{AbstractIntLiteral abstractIntLiteral=(AbstractIntLiteral)theEObject;T result=caseAbstractIntLiteral(abstractIntLiteral);if (result == null) result=caseNumericLiteral(abstractIntLiteral);if (result == null) result=caseLiteral(abstractIntLiteral);if (result == null) result=casePrimaryExpression(abstractIntLiteral);if (result == null) result=caseExpression(abstractIntLiteral);if (result == null) result=caseTypableElement(abstractIntLiteral);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.INT_LITERAL:{IntLiteral intLiteral=(IntLiteral)theEObject;T result=caseIntLiteral(intLiteral);if (result == null) result=caseAbstractIntLiteral(intLiteral);if (result == null) result=caseNumericLiteral(intLiteral);if (result == null) result=caseLiteral(intLiteral);if (result == null) result=casePrimaryExpression(intLiteral);if (result == null) result=caseExpression(intLiteral);if (result == null) result=caseTypableElement(intLiteral);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.BINARY_INT_LITERAL:{BinaryIntLiteral binaryIntLiteral=(BinaryIntLiteral)theEObject;T result=caseBinaryIntLiteral(binaryIntLiteral);if (result == null) result=caseAbstractIntLiteral(binaryIntLiteral);if (result == null) result=caseNumericLiteral(binaryIntLiteral);if (result == null) result=caseLiteral(binaryIntLiteral);if (result == null) result=casePrimaryExpression(binaryIntLiteral);if (result == null) result=caseExpression(binaryIntLiteral);if (result == null) result=caseTypableElement(binaryIntLiteral);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.OCTAL_INT_LITERAL:{OctalIntLiteral octalIntLiteral=(OctalIntLiteral)theEObject;T result=caseOctalIntLiteral(octalIntLiteral);if (result == null) result=caseAbstractIntLiteral(octalIntLiteral);if (result == null) result=caseNumericLiteral(octalIntLiteral);if (result == null) result=caseLiteral(octalIntLiteral);if (result == null) result=casePrimaryExpression(octalIntLiteral);if (result == null) result=caseExpression(octalIntLiteral);if (result == null) result=caseTypableElement(octalIntLiteral);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.LEGACY_OCTAL_INT_LITERAL:{LegacyOctalIntLiteral legacyOctalIntLiteral=(LegacyOctalIntLiteral)theEObject;T result=caseLegacyOctalIntLiteral(legacyOctalIntLiteral);if (result == null) result=caseAbstractIntLiteral(legacyOctalIntLiteral);if (result == null) result=caseNumericLiteral(legacyOctalIntLiteral);if (result == null) result=caseLiteral(legacyOctalIntLiteral);if (result == null) result=casePrimaryExpression(legacyOctalIntLiteral);if (result == null) result=caseExpression(legacyOctalIntLiteral);if (result == null) result=caseTypableElement(legacyOctalIntLiteral);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.HEX_INT_LITERAL:{HexIntLiteral hexIntLiteral=(HexIntLiteral)theEObject;T result=caseHexIntLiteral(hexIntLiteral);if (result == null) result=caseAbstractIntLiteral(hexIntLiteral);if (result == null) result=caseNumericLiteral(hexIntLiteral);if (result == null) result=caseLiteral(hexIntLiteral);if (result == null) result=casePrimaryExpression(hexIntLiteral);if (result == null) result=caseExpression(hexIntLiteral);if (result == null) result=caseTypableElement(hexIntLiteral);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.SCIENTIFIC_INT_LITERAL:{ScientificIntLiteral scientificIntLiteral=(ScientificIntLiteral)theEObject;T result=caseScientificIntLiteral(scientificIntLiteral);if (result == null) result=caseAbstractIntLiteral(scientificIntLiteral);if (result == null) result=caseNumericLiteral(scientificIntLiteral);if (result == null) result=caseLiteral(scientificIntLiteral);if (result == null) result=casePrimaryExpression(scientificIntLiteral);if (result == null) result=caseExpression(scientificIntLiteral);if (result == null) result=caseTypableElement(scientificIntLiteral);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.REGULAR_EXPRESSION_LITERAL:{RegularExpressionLiteral regularExpressionLiteral=(RegularExpressionLiteral)theEObject;T result=caseRegularExpressionLiteral(regularExpressionLiteral);if (result == null) result=caseLiteral(regularExpressionLiteral);if (result == null) result=casePrimaryExpression(regularExpressionLiteral);if (result == null) result=caseExpression(regularExpressionLiteral);if (result == null) result=caseTypableElement(regularExpressionLiteral);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.POSTFIX_EXPRESSION:{PostfixExpression postfixExpression=(PostfixExpression)theEObject;T result=casePostfixExpression(postfixExpression);if (result == null) result=caseExpression(postfixExpression);if (result == null) result=caseTypableElement(postfixExpression);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.UNARY_EXPRESSION:{UnaryExpression unaryExpression=(UnaryExpression)theEObject;T result=caseUnaryExpression(unaryExpression);if (result == null) result=caseExpression(unaryExpression);if (result == null) result=caseTypableElement(unaryExpression);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.CAST_EXPRESSION:{CastExpression castExpression=(CastExpression)theEObject;T result=caseCastExpression(castExpression);if (result == null) result=caseExpression(castExpression);if (result == null) result=caseTypableElement(castExpression);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.MULTIPLICATIVE_EXPRESSION:{MultiplicativeExpression multiplicativeExpression=(MultiplicativeExpression)theEObject;T result=caseMultiplicativeExpression(multiplicativeExpression);if (result == null) result=caseExpression(multiplicativeExpression);if (result == null) result=caseTypableElement(multiplicativeExpression);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.ADDITIVE_EXPRESSION:{AdditiveExpression additiveExpression=(AdditiveExpression)theEObject;T result=caseAdditiveExpression(additiveExpression);if (result == null) result=caseExpression(additiveExpression);if (result == null) result=caseTypableElement(additiveExpression);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.SHIFT_EXPRESSION:{ShiftExpression shiftExpression=(ShiftExpression)theEObject;T result=caseShiftExpression(shiftExpression);if (result == null) result=caseExpression(shiftExpression);if (result == null) result=caseTypableElement(shiftExpression);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.RELATIONAL_EXPRESSION:{RelationalExpression relationalExpression=(RelationalExpression)theEObject;T result=caseRelationalExpression(relationalExpression);if (result == null) result=caseExpression(relationalExpression);if (result == null) result=caseTypableElement(relationalExpression);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.EQUALITY_EXPRESSION:{EqualityExpression equalityExpression=(EqualityExpression)theEObject;T result=caseEqualityExpression(equalityExpression);if (result == null) result=caseExpression(equalityExpression);if (result == null) result=caseTypableElement(equalityExpression);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.BINARY_BITWISE_EXPRESSION:{BinaryBitwiseExpression binaryBitwiseExpression=(BinaryBitwiseExpression)theEObject;T result=caseBinaryBitwiseExpression(binaryBitwiseExpression);if (result == null) result=caseExpression(binaryBitwiseExpression);if (result == null) result=caseTypableElement(binaryBitwiseExpression);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.BINARY_LOGICAL_EXPRESSION:{BinaryLogicalExpression binaryLogicalExpression=(BinaryLogicalExpression)theEObject;T result=caseBinaryLogicalExpression(binaryLogicalExpression);if (result == null) result=caseExpression(binaryLogicalExpression);if (result == null) result=caseTypableElement(binaryLogicalExpression);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.CONDITIONAL_EXPRESSION:{ConditionalExpression conditionalExpression=(ConditionalExpression)theEObject;T result=caseConditionalExpression(conditionalExpression);if (result == null) result=caseExpression(conditionalExpression);if (result == null) result=caseTypableElement(conditionalExpression);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.ASSIGNMENT_EXPRESSION:{AssignmentExpression assignmentExpression=(AssignmentExpression)theEObject;T result=caseAssignmentExpression(assignmentExpression);if (result == null) result=caseExpression(assignmentExpression);if (result == null) result=caseTypableElement(assignmentExpression);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.COMMA_EXPRESSION:{CommaExpression commaExpression=(CommaExpression)theEObject;T result=caseCommaExpression(commaExpression);if (result == null) result=caseExpression(commaExpression);if (result == null) result=caseTypableElement(commaExpression);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.TYPE_DEFINING_ELEMENT:{TypeDefiningElement typeDefiningElement=(TypeDefiningElement)theEObject;T result=caseTypeDefiningElement(typeDefiningElement);if (result == null) result=caseTypableElement(typeDefiningElement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.GENERIC_DECLARATION:{GenericDeclaration genericDeclaration=(GenericDeclaration)theEObject;T result=caseGenericDeclaration(genericDeclaration);if (result == null) result=caseTypeDefiningElement(genericDeclaration);if (result == null) result=caseTypableElement(genericDeclaration);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.N4_TYPE_DEFINITION:{N4TypeDefinition n4TypeDefinition=(N4TypeDefinition)theEObject;T result=caseN4TypeDefinition(n4TypeDefinition);if (result == null) result=caseAnnotableElement(n4TypeDefinition);if (result == null) result=caseTypeDefiningElement(n4TypeDefinition);if (result == null) result=caseTypableElement(n4TypeDefinition);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.N4_TYPE_DECLARATION:{N4TypeDeclaration n4TypeDeclaration=(N4TypeDeclaration)theEObject;T result=caseN4TypeDeclaration(n4TypeDeclaration);if (result == null) result=caseN4TypeDefinition(n4TypeDeclaration);if (result == null) result=caseAnnotableScriptElement(n4TypeDeclaration);if (result == null) result=caseModifiableElement(n4TypeDeclaration);if (result == null) result=caseExportableElement(n4TypeDeclaration);if (result == null) result=caseNamedElement(n4TypeDeclaration);if (result == null) result=caseAnnotableElement(n4TypeDeclaration);if (result == null) result=caseTypeDefiningElement(n4TypeDeclaration);if (result == null) result=caseScriptElement(n4TypeDeclaration);if (result == null) result=caseTypableElement(n4TypeDeclaration);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.N4_CLASSIFIER_DECLARATION:{N4ClassifierDeclaration n4ClassifierDeclaration=(N4ClassifierDeclaration)theEObject;T result=caseN4ClassifierDeclaration(n4ClassifierDeclaration);if (result == null) result=caseN4TypeDeclaration(n4ClassifierDeclaration);if (result == null) result=caseN4ClassifierDefinition(n4ClassifierDeclaration);if (result == null) result=caseGenericDeclaration(n4ClassifierDeclaration);if (result == null) result=caseThisTarget(n4ClassifierDeclaration);if (result == null) result=caseN4TypeDefinition(n4ClassifierDeclaration);if (result == null) result=caseAnnotableScriptElement(n4ClassifierDeclaration);if (result == null) result=caseModifiableElement(n4ClassifierDeclaration);if (result == null) result=caseExportableElement(n4ClassifierDeclaration);if (result == null) result=caseNamedElement(n4ClassifierDeclaration);if (result == null) result=caseAnnotableElement(n4ClassifierDeclaration);if (result == null) result=caseTypeDefiningElement(n4ClassifierDeclaration);if (result == null) result=caseScriptElement(n4ClassifierDeclaration);if (result == null) result=caseTypableElement(n4ClassifierDeclaration);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.N4_CLASSIFIER_DEFINITION:{N4ClassifierDefinition n4ClassifierDefinition=(N4ClassifierDefinition)theEObject;T result=caseN4ClassifierDefinition(n4ClassifierDefinition);if (result == null) result=caseN4TypeDefinition(n4ClassifierDefinition);if (result == null) result=caseAnnotableElement(n4ClassifierDefinition);if (result == null) result=caseTypeDefiningElement(n4ClassifierDefinition);if (result == null) result=caseTypableElement(n4ClassifierDefinition);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.N4_CLASS_DEFINITION:{N4ClassDefinition n4ClassDefinition=(N4ClassDefinition)theEObject;T result=caseN4ClassDefinition(n4ClassDefinition);if (result == null) result=caseN4ClassifierDefinition(n4ClassDefinition);if (result == null) result=caseThisTarget(n4ClassDefinition);if (result == null) result=caseN4TypeDefinition(n4ClassDefinition);if (result == null) result=caseAnnotableElement(n4ClassDefinition);if (result == null) result=caseTypeDefiningElement(n4ClassDefinition);if (result == null) result=caseTypableElement(n4ClassDefinition);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.N4_CLASS_DECLARATION:{N4ClassDeclaration n4ClassDeclaration=(N4ClassDeclaration)theEObject;T result=caseN4ClassDeclaration(n4ClassDeclaration);if (result == null) result=caseN4ClassDefinition(n4ClassDeclaration);if (result == null) result=caseN4ClassifierDeclaration(n4ClassDeclaration);if (result == null) result=caseN4ClassifierDefinition(n4ClassDeclaration);if (result == null) result=caseThisTarget(n4ClassDeclaration);if (result == null) result=caseN4TypeDeclaration(n4ClassDeclaration);if (result == null) result=caseGenericDeclaration(n4ClassDeclaration);if (result == null) result=caseN4TypeDefinition(n4ClassDeclaration);if (result == null) result=caseAnnotableScriptElement(n4ClassDeclaration);if (result == null) result=caseModifiableElement(n4ClassDeclaration);if (result == null) result=caseExportableElement(n4ClassDeclaration);if (result == null) result=caseNamedElement(n4ClassDeclaration);if (result == null) result=caseAnnotableElement(n4ClassDeclaration);if (result == null) result=caseTypeDefiningElement(n4ClassDeclaration);if (result == null) result=caseScriptElement(n4ClassDeclaration);if (result == null) result=caseTypableElement(n4ClassDeclaration);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.N4_CLASS_EXPRESSION:{N4ClassExpression n4ClassExpression=(N4ClassExpression)theEObject;T result=caseN4ClassExpression(n4ClassExpression);if (result == null) result=caseN4ClassDefinition(n4ClassExpression);if (result == null) result=casePrimaryExpression(n4ClassExpression);if (result == null) result=caseAnnotableExpression(n4ClassExpression);if (result == null) result=caseNamedElement(n4ClassExpression);if (result == null) result=caseN4ClassifierDefinition(n4ClassExpression);if (result == null) result=caseThisTarget(n4ClassExpression);if (result == null) result=caseExpression(n4ClassExpression);if (result == null) result=caseN4TypeDefinition(n4ClassExpression);if (result == null) result=caseAnnotableElement(n4ClassExpression);if (result == null) result=caseTypeDefiningElement(n4ClassExpression);if (result == null) result=caseTypableElement(n4ClassExpression);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.N4_INTERFACE_DECLARATION:{N4InterfaceDeclaration n4InterfaceDeclaration=(N4InterfaceDeclaration)theEObject;T result=caseN4InterfaceDeclaration(n4InterfaceDeclaration);if (result == null) result=caseN4ClassifierDeclaration(n4InterfaceDeclaration);if (result == null) result=caseN4TypeDeclaration(n4InterfaceDeclaration);if (result == null) result=caseN4ClassifierDefinition(n4InterfaceDeclaration);if (result == null) result=caseGenericDeclaration(n4InterfaceDeclaration);if (result == null) result=caseThisTarget(n4InterfaceDeclaration);if (result == null) result=caseN4TypeDefinition(n4InterfaceDeclaration);if (result == null) result=caseAnnotableScriptElement(n4InterfaceDeclaration);if (result == null) result=caseModifiableElement(n4InterfaceDeclaration);if (result == null) result=caseExportableElement(n4InterfaceDeclaration);if (result == null) result=caseNamedElement(n4InterfaceDeclaration);if (result == null) result=caseAnnotableElement(n4InterfaceDeclaration);if (result == null) result=caseTypeDefiningElement(n4InterfaceDeclaration);if (result == null) result=caseScriptElement(n4InterfaceDeclaration);if (result == null) result=caseTypableElement(n4InterfaceDeclaration);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.N4_ENUM_DECLARATION:{N4EnumDeclaration n4EnumDeclaration=(N4EnumDeclaration)theEObject;T result=caseN4EnumDeclaration(n4EnumDeclaration);if (result == null) result=caseN4TypeDeclaration(n4EnumDeclaration);if (result == null) result=caseN4TypeDefinition(n4EnumDeclaration);if (result == null) result=caseAnnotableScriptElement(n4EnumDeclaration);if (result == null) result=caseModifiableElement(n4EnumDeclaration);if (result == null) result=caseExportableElement(n4EnumDeclaration);if (result == null) result=caseNamedElement(n4EnumDeclaration);if (result == null) result=caseAnnotableElement(n4EnumDeclaration);if (result == null) result=caseTypeDefiningElement(n4EnumDeclaration);if (result == null) result=caseScriptElement(n4EnumDeclaration);if (result == null) result=caseTypableElement(n4EnumDeclaration);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.N4_ENUM_LITERAL:{N4EnumLiteral n4EnumLiteral=(N4EnumLiteral)theEObject;T result=caseN4EnumLiteral(n4EnumLiteral);if (result == null) result=caseNamedElement(n4EnumLiteral);if (result == null) result=caseTypableElement(n4EnumLiteral);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.MODIFIABLE_ELEMENT:{ModifiableElement modifiableElement=(ModifiableElement)theEObject;T result=caseModifiableElement(modifiableElement);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.N4_MEMBER_DECLARATION:{N4MemberDeclaration n4MemberDeclaration=(N4MemberDeclaration)theEObject;T result=caseN4MemberDeclaration(n4MemberDeclaration);if (result == null) result=caseAnnotableElement(n4MemberDeclaration);if (result == null) result=caseModifiableElement(n4MemberDeclaration);if (result == null) result=caseTypeProvidingElement(n4MemberDeclaration);if (result == null) result=caseTypableElement(n4MemberDeclaration);if (result == null) result=caseNamedElement(n4MemberDeclaration);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.ANNOTABLE_N4_MEMBER_DECLARATION:{AnnotableN4MemberDeclaration annotableN4MemberDeclaration=(AnnotableN4MemberDeclaration)theEObject;T result=caseAnnotableN4MemberDeclaration(annotableN4MemberDeclaration);if (result == null) result=caseN4MemberDeclaration(annotableN4MemberDeclaration);if (result == null) result=caseAnnotableElement(annotableN4MemberDeclaration);if (result == null) result=caseModifiableElement(annotableN4MemberDeclaration);if (result == null) result=caseTypeProvidingElement(annotableN4MemberDeclaration);if (result == null) result=caseTypableElement(annotableN4MemberDeclaration);if (result == null) result=caseNamedElement(annotableN4MemberDeclaration);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.N4_MEMBER_ANNOTATION_LIST:{N4MemberAnnotationList n4MemberAnnotationList=(N4MemberAnnotationList)theEObject;T result=caseN4MemberAnnotationList(n4MemberAnnotationList);if (result == null) result=caseAbstractAnnotationList(n4MemberAnnotationList);if (result == null) result=caseN4MemberDeclaration(n4MemberAnnotationList);if (result == null) result=caseAnnotableElement(n4MemberAnnotationList);if (result == null) result=caseModifiableElement(n4MemberAnnotationList);if (result == null) result=caseTypeProvidingElement(n4MemberAnnotationList);if (result == null) result=caseTypableElement(n4MemberAnnotationList);if (result == null) result=caseNamedElement(n4MemberAnnotationList);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.N4_FIELD_DECLARATION:{N4FieldDeclaration n4FieldDeclaration=(N4FieldDeclaration)theEObject;T result=caseN4FieldDeclaration(n4FieldDeclaration);if (result == null) result=caseAnnotableN4MemberDeclaration(n4FieldDeclaration);if (result == null) result=caseTypedElement(n4FieldDeclaration);if (result == null) result=caseThisArgProvider(n4FieldDeclaration);if (result == null) result=casePropertyNameOwner(n4FieldDeclaration);if (result == null) result=caseN4MemberDeclaration(n4FieldDeclaration);if (result == null) result=caseAnnotableElement(n4FieldDeclaration);if (result == null) result=caseModifiableElement(n4FieldDeclaration);if (result == null) result=caseTypeProvidingElement(n4FieldDeclaration);if (result == null) result=caseTypableElement(n4FieldDeclaration);if (result == null) result=caseNamedElement(n4FieldDeclaration);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.METHOD_DECLARATION:{MethodDeclaration methodDeclaration=(MethodDeclaration)theEObject;T result=caseMethodDeclaration(methodDeclaration);if (result == null) result=caseFunctionDefinition(methodDeclaration);if (result == null) result=caseGenericDeclaration(methodDeclaration);if (result == null) result=caseTypedElement(methodDeclaration);if (result == null) result=casePropertyNameOwner(methodDeclaration);if (result == null) result=caseFunctionOrFieldAccessor(methodDeclaration);if (result == null) result=caseTypeDefiningElement(methodDeclaration);if (result == null) result=caseTypeProvidingElement(methodDeclaration);if (result == null) result=caseNamedElement(methodDeclaration);if (result == null) result=caseAnnotableElement(methodDeclaration);if (result == null) result=caseVariableEnvironmentElement(methodDeclaration);if (result == null) result=caseThisArgProvider(methodDeclaration);if (result == null) result=caseTypableElement(methodDeclaration);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.N4_METHOD_DECLARATION:{N4MethodDeclaration n4MethodDeclaration=(N4MethodDeclaration)theEObject;T result=caseN4MethodDeclaration(n4MethodDeclaration);if (result == null) result=caseAnnotableN4MemberDeclaration(n4MethodDeclaration);if (result == null) result=caseMethodDeclaration(n4MethodDeclaration);if (result == null) result=caseN4MemberDeclaration(n4MethodDeclaration);if (result == null) result=caseFunctionDefinition(n4MethodDeclaration);if (result == null) result=caseGenericDeclaration(n4MethodDeclaration);if (result == null) result=caseTypedElement(n4MethodDeclaration);if (result == null) result=casePropertyNameOwner(n4MethodDeclaration);if (result == null) result=caseModifiableElement(n4MethodDeclaration);if (result == null) result=caseTypeProvidingElement(n4MethodDeclaration);if (result == null) result=caseNamedElement(n4MethodDeclaration);if (result == null) result=caseFunctionOrFieldAccessor(n4MethodDeclaration);if (result == null) result=caseTypeDefiningElement(n4MethodDeclaration);if (result == null) result=caseAnnotableElement(n4MethodDeclaration);if (result == null) result=caseTypableElement(n4MethodDeclaration);if (result == null) result=caseVariableEnvironmentElement(n4MethodDeclaration);if (result == null) result=caseThisArgProvider(n4MethodDeclaration);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.N4_FIELD_ACCESSOR:{N4FieldAccessor n4FieldAccessor=(N4FieldAccessor)theEObject;T result=caseN4FieldAccessor(n4FieldAccessor);if (result == null) result=caseAnnotableN4MemberDeclaration(n4FieldAccessor);if (result == null) result=caseFieldAccessor(n4FieldAccessor);if (result == null) result=caseN4MemberDeclaration(n4FieldAccessor);if (result == null) result=caseFunctionOrFieldAccessor(n4FieldAccessor);if (result == null) result=casePropertyNameOwner(n4FieldAccessor);if (result == null) result=caseAnnotableElement(n4FieldAccessor);if (result == null) result=caseModifiableElement(n4FieldAccessor);if (result == null) result=caseTypeProvidingElement(n4FieldAccessor);if (result == null) result=caseTypableElement(n4FieldAccessor);if (result == null) result=caseNamedElement(n4FieldAccessor);if (result == null) result=caseVariableEnvironmentElement(n4FieldAccessor);if (result == null) result=caseThisArgProvider(n4FieldAccessor);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.N4_GETTER_DECLARATION:{N4GetterDeclaration n4GetterDeclaration=(N4GetterDeclaration)theEObject;T result=caseN4GetterDeclaration(n4GetterDeclaration);if (result == null) result=caseGetterDeclaration(n4GetterDeclaration);if (result == null) result=caseN4FieldAccessor(n4GetterDeclaration);if (result == null) result=caseFieldAccessor(n4GetterDeclaration);if (result == null) result=caseTypedElement(n4GetterDeclaration);if (result == null) result=caseAnnotableN4MemberDeclaration(n4GetterDeclaration);if (result == null) result=caseFunctionOrFieldAccessor(n4GetterDeclaration);if (result == null) result=casePropertyNameOwner(n4GetterDeclaration);if (result == null) result=caseN4MemberDeclaration(n4GetterDeclaration);if (result == null) result=caseAnnotableElement(n4GetterDeclaration);if (result == null) result=caseVariableEnvironmentElement(n4GetterDeclaration);if (result == null) result=caseThisArgProvider(n4GetterDeclaration);if (result == null) result=caseTypableElement(n4GetterDeclaration);if (result == null) result=caseTypeProvidingElement(n4GetterDeclaration);if (result == null) result=caseNamedElement(n4GetterDeclaration);if (result == null) result=caseModifiableElement(n4GetterDeclaration);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.N4_SETTER_DECLARATION:{N4SetterDeclaration n4SetterDeclaration=(N4SetterDeclaration)theEObject;T result=caseN4SetterDeclaration(n4SetterDeclaration);if (result == null) result=caseSetterDeclaration(n4SetterDeclaration);if (result == null) result=caseN4FieldAccessor(n4SetterDeclaration);if (result == null) result=caseFieldAccessor(n4SetterDeclaration);if (result == null) result=caseAnnotableN4MemberDeclaration(n4SetterDeclaration);if (result == null) result=caseFunctionOrFieldAccessor(n4SetterDeclaration);if (result == null) result=casePropertyNameOwner(n4SetterDeclaration);if (result == null) result=caseN4MemberDeclaration(n4SetterDeclaration);if (result == null) result=caseAnnotableElement(n4SetterDeclaration);if (result == null) result=caseVariableEnvironmentElement(n4SetterDeclaration);if (result == null) result=caseThisArgProvider(n4SetterDeclaration);if (result == null) result=caseTypableElement(n4SetterDeclaration);if (result == null) result=caseTypeProvidingElement(n4SetterDeclaration);if (result == null) result=caseNamedElement(n4SetterDeclaration);if (result == null) result=caseModifiableElement(n4SetterDeclaration);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.BINDING_PATTERN:{BindingPattern bindingPattern=(BindingPattern)theEObject;T result=caseBindingPattern(bindingPattern);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.OBJECT_BINDING_PATTERN:{ObjectBindingPattern objectBindingPattern=(ObjectBindingPattern)theEObject;T result=caseObjectBindingPattern(objectBindingPattern);if (result == null) result=caseBindingPattern(objectBindingPattern);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.ARRAY_BINDING_PATTERN:{ArrayBindingPattern arrayBindingPattern=(ArrayBindingPattern)theEObject;T result=caseArrayBindingPattern(arrayBindingPattern);if (result == null) result=caseBindingPattern(arrayBindingPattern);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.BINDING_PROPERTY:{BindingProperty bindingProperty=(BindingProperty)theEObject;T result=caseBindingProperty(bindingProperty);if (result == null) result=casePropertyNameOwner(bindingProperty);if (result == null) result=caseNamedElement(bindingProperty);if (result == null) result=defaultCase(theEObject);return result;}case N4JSPackage.BINDING_ELEMENT:{BindingElement bindingElement=(BindingElement)theEObject;T result=caseBindingElement(bindingElement);if (result == null) result=defaultCase(theEObject);return result;}default :return defaultCase(theEObject);}}  }
class C{  private void addDemandDetails(ArrearsInfo arrearsInfo,Ptdemand ptDemand) throws ParseException {  Module module=moduleDao.getModuleByName(PropertyTaxConstants.PTMODULENAME);  Installment installment=installmentDao.getInsatllmentByModuleForGivenDate(module,getInstallmentDate());  EgDemandDetails demandDetails;  if (arrearsInfo.getGeneralTax() != null && arrearsInfo.getGeneralTax().compareTo(BigDecimal.ZERO) == 1) {    EgDemandReason demandReason=demandGenericDao.getEgDemandReasonByCodeInstallmentModule(DEMANDRSN_CODE_GENERAL_TAX,installment,module,null);    demandDetails=propertyService.createDemandDetails(arrearsInfo.getGeneralTax(),null,demandReason,installment);    ptDemand.getEgDemandDetails().add(demandDetails);  }  if (arrearsInfo.getVacantLandTax() != null && arrearsInfo.getVacantLandTax().compareTo(BigDecimal.ZERO) == 1) {    EgDemandReason demandReason=demandGenericDao.getEgDemandReasonByCodeInstallmentModule(DEMANDRSN_CODE_VACANT_TAX,installment,module,null);    demandDetails=propertyService.createDemandDetails(arrearsInfo.getVacantLandTax(),null,demandReason,installment);    ptDemand.getEgDemandDetails().add(demandDetails);  }  if (arrearsInfo.getLibraryCess() != null && arrearsInfo.getLibraryCess().compareTo(BigDecimal.ZERO) == 1) {    EgDemandReason demandReason=demandGenericDao.getEgDemandReasonByCodeInstallmentModule(DEMANDRSN_CODE_LIBRARY_CESS,installment,module,null);    demandDetails=propertyService.createDemandDetails(arrearsInfo.getLibraryCess(),null,demandReason,installment);    ptDemand.getEgDemandDetails().add(demandDetails);  }  if (arrearsInfo.getEducationCess() != null && arrearsInfo.getEducationCess().compareTo(BigDecimal.ZERO) == 1) {    EgDemandReason demandReason=demandGenericDao.getEgDemandReasonByCodeInstallmentModule(DEMANDRSN_CODE_EDUCATIONAL_CESS,installment,module,null);    demandDetails=propertyService.createDemandDetails(arrearsInfo.getEducationCess(),null,demandReason,installment);    ptDemand.getEgDemandDetails().add(demandDetails);  }  if (arrearsInfo.getUnauthorizedPenalty() != null && arrearsInfo.getUnauthorizedPenalty().compareTo(BigDecimal.ZERO) == 1) {    EgDemandReason demandReason=demandGenericDao.getEgDemandReasonByCodeInstallmentModule(DEMANDRSN_CODE_UNAUTHORIZED_PENALTY,installment,module,null);    demandDetails=propertyService.createDemandDetails(arrearsInfo.getUnauthorizedPenalty(),null,demandReason,installment);    ptDemand.getEgDemandDetails().add(demandDetails);  }  if (arrearsInfo.getLatePaymentPenalty() != null && arrearsInfo.getLatePaymentPenalty().compareTo(BigDecimal.ZERO) == 1) {    EgDemandReason demandReason=demandGenericDao.getEgDemandReasonByCodeInstallmentModule(DEMANDRSN_CODE_PENALTY_FINES,installment,module,null);    demandDetails=propertyService.createDemandDetails(arrearsInfo.getLatePaymentPenalty(),null,demandReason,installment);    ptDemand.getEgDemandDetails().add(demandDetails);  }}  }
class C{  public static CGlobalProgressManager instance(){  return m_instance;}  }
class C{  public boolean visitStringLiteral(ExpressionOwner owner,XString str){  return true;}  }
class C{  public static String generatePassword(){  return RandomStringUtils.randomAlphanumeric(DEF_COUNT);}  }
class C{  @Override public void readFromNBTForItem(NBTTagCompound nbt){  super.readFromNBTForItem(nbt);  readCheeseFromNBT(nbt);}  }
class C{  public IgniteUuid taskSessionId(){  return sesId;}  }
class C{  @Override public final boolean cancellationRequested(){  cancellationWasRequested=true;  return false;}  }
class C{  private String makeAbsoluteCWD(String fileName){  List<String> candidates=makeAbsoluteCwdCandidates(fileName);  return candidates.get(0);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static final boolean validateGroupID(Integer iGroupId){  if ((iGroupId < LnDplxGrpInfoImplConstants.DPLX_MIN_ID) || (iGroupId > LnDplxGrpInfoImplConstants.DPLX_MAX_ID)) {    return false;  } else {    return true;  }}  }
class C{  final ElemContext pop(){  return this.m_prev;}  }
class C{  public Vehicle(String[] arr){  this.arr=arr;}  }
class C{  public void dispose(){  m_tableModel.dispose();}  }
class C{  public <A extends Annotation>ClassVisitor registerHandler(Class<A> annotationType,AnnotationHandler<A,? extends AnnotatedElement> handler){  handlers.put(annotationType,handler);  return this;}  }
class C{  public SyntaxError(SequenceDiagramDataProvider provider,String msg){  super(provider,msg);}  }
class C{  public void add(Object element){  if (size == elements.length)   ensureCapacity(size + 1);  elements[size++]=element;}  }
class C{  protected static char[] encodeHex(final byte[] data){  final int l=data.length;  final char[] out=new char[l << 1];  for (int i=0, j=0; i < l; i++) {    out[j++]=DIGITS_LOWER[(0xF0 & data[i]) >>> 4];    out[j++]=DIGITS_LOWER[0x0F & data[i]];  }  return out;}  }
class C{  public float distanceTo(AnimatableValue other){  AnimatableMotionPointValue o=(AnimatableMotionPointValue)other;  float dx=x - o.x;  float dy=y - o.y;  return (float)Math.sqrt(dx * dx + dy * dy);}  }
class C{  public static int toInt(byte[] bytes,int start){  return toInt(bytes[start],bytes[start + 1],bytes[start + 2],bytes[start + 3]);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MetaImage mi=MetaImage.getMetaImage(getString(stack),stack.getUIComponent());  if (!mi.isNull(mi)) {    MetaImage.clearFromCache(mi.getSource());  }  return null;}  }
class C{  protected final void removeNode(PurityNode n){  Iterator it=edges.get(n).iterator();  while (it.hasNext()) {    PurityEdge e=(PurityEdge)it.next();    backEdges.remove(e.getTarget(),e);  }  it=backEdges.get(n).iterator();  while (it.hasNext()) {    PurityEdge e=(PurityEdge)it.next();    edges.remove(e.getSource(),e);  }  it=backLocals.get(n).iterator();  while (it.hasNext()) {    Local l=(Local)it.next();    locals.remove(l,n);  }  ret.remove(n);  edges.remove(n);  backEdges.remove(n);  backLocals.remove(n);  nodes.remove(n);  paramNodes.remove(n);  globEscape.remove(n);  mutated.remove(n);}  }
class C{  public ClockPane(int hour,int minute,int second){  this.hour=hour;  this.minute=minute;  this.second=second;  paintClock();}  }
class C{  public void postProcess(){  if (foreignColumnName != null) {    foreignAutoRefresh=true;  }  if (foreignAutoRefresh && maxForeignAutoRefreshLevel == DatabaseField.NO_MAX_FOREIGN_AUTO_REFRESH_LEVEL_SPECIFIED) {    maxForeignAutoRefreshLevel=DatabaseField.DEFAULT_MAX_FOREIGN_AUTO_REFRESH_LEVEL;  }}  }
class C{  private void emitDataFrame(boolean outFinished) throws IOException {  long toWrite;synchronized (FramedStream.this) {    writeTimeout.enter();    try {      while (bytesLeftInWriteWindow <= 0 && !finished && !closed && errorCode == null) {        waitForIo();      }    }  finally {      writeTimeout.exitAndThrowIfTimedOut();    }    checkOutNotClosed();    toWrite=Math.min(bytesLeftInWriteWindow,sendBuffer.size());    bytesLeftInWriteWindow-=toWrite;  }  writeTimeout.enter();  try {    connection.writeData(id,outFinished && toWrite == sendBuffer.size(),sendBuffer,toWrite);  }  finally {    writeTimeout.exitAndThrowIfTimedOut();  }}  }
class C{  public static ImageSource uri(Uri uri){  if (uri == null) {    throw new NullPointerException("Uri must not be null");  }  return new ImageSource(uri);}  }
class C{  public void paintComponent(Graphics g){  Color oldBackground=((Graphics2D)g).getBackground();  ((Graphics2D)g).setBackground(Color.WHITE);  g.clearRect(0,0,getSize().width,getSize().height);  ((Graphics2D)g).setBackground(oldBackground);  g.setClip(3,7,getWidth() - 6,getHeight() - 10);  m_tree.draw(g);  g.setClip(0,0,getWidth(),getHeight());}  }
class C{  private void initialize(){  int numCompiledMethods=CompiledMethods.numCompiledMethods();  map=new int[numCompiledMethods + (numCompiledMethods >>> 2)];  counts=new double[256];  cmids=new int[256];  nextIndex=1;  totalCountsTaken=0;}  }
class C{  public void trimToSize(){  elements=cern.colt.Arrays.trimToCapacity(elements,size());}  }
class C{  private void updateDeviceDataMapInExportMask(ExportMask exportMask,HostStorageDomain hsd,StorageSystem storage,StringSetMap deviceDataMapEntries){  List<String> storagePorts=Arrays.asList(hsd.getPortID());  StringSet hsdTargetPortValues=new StringSet();  List<String> storagePortURIs=getStoragePortURIs(storagePorts,storage);  hsdTargetPortValues.addAll(storagePortURIs);  deviceDataMapEntries.put(hsd.getObjectID(),hsdTargetPortValues);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementretrievetagname.class,args);}  }
class C{  public NotificationChain basicSetOwner(Composite newOwner,NotificationChain msgs){  msgs=eBasicSetContainer((InternalEObject)newOwner,DomPackage.COMPOSED_CONTENT__OWNER,msgs);  return msgs;}  }
class C{  public static void main(String[] argv){  try {    int seed=42;    if (argv.length > 0) {      seed=Integer.parseInt(argv[0]);    }    KKConditionalEstimator newEst=new KKConditionalEstimator(0.1);    Random r=new Random(seed);    int numPoints=50;    if (argv.length > 2) {      numPoints=Integer.parseInt(argv[2]);    }    for (int i=0; i < numPoints; i++) {      int x=Math.abs(r.nextInt() % 100);      int y=Math.abs(r.nextInt() % 100);      System.out.println("# " + x + "  "+ y);      newEst.addValue(x,y,1);    }    int cond;    if (argv.length > 1) {      cond=Integer.parseInt(argv[1]);    } else {      cond=Math.abs(r.nextInt() % 100);    }    System.out.println("## Conditional = " + cond);    Estimator result=newEst.getEstimator(cond);    for (int i=0; i <= 100; i+=5) {      System.out.println(" " + i + "  "+ result.getProbability(i));    }  } catch (  Exception e) {    System.out.println(e.getMessage());  }}  }
class C{  public ObjectWriter(String filename){  try {    fos=new FileOutputStream(filename,false);    os=new ObjectOutputStream(fos);  } catch (  java.io.IOException e) {    System.out.println("Error creating ObjectWriter: ");    e.printStackTrace();  }}  }
class C{  public static void makeItemInvalidRecyclingOutput(Object stack){  invalidRecyclingOutput.add(ApiUtils.convertToValidRecipeInput(stack));}  }
class C{  public ReadResponse Read(ReadRequest req) throws ServiceFaultException, ServiceResultException {  return (ReadResponse)channel.serviceRequest(req);}  }
class C{  public EventBean await(){  if (!earlier.isCompleted) {    long spinStartTime=factory.getTimeSourceService().getTimeMillis();    while (!earlier.isCompleted) {      Thread.yield();      long spinDelta=factory.getTimeSourceService().getTimeMillis() - spinStartTime;      if (spinDelta > msecTimeout) {        log.info("Spin wait timeout exceeded in insert-into dispatch at " + msecTimeout + "ms for "+ factory.getName()+ ", consider disabling insert-into between-statement latching for better performance");        break;      }    }  }  return payload;}  }
class C{  void editPressed(){  String suName=fixedSystemName.getText();  String sName=InstanceManager.lightManagerInstance().normalizeSystemName(suName);  if (sName.equals("")) {    status1.setText(Bundle.getMessage("LightError3"));    status2.setText(Bundle.getMessage("LightError6"));    status2.setVisible(true);    addFrame.pack();    addFrame.setVisible(true);    return;  }  Light g=InstanceManager.lightManagerInstance().getBySystemName(sName);  if (g == null) {    String altName=InstanceManager.lightManagerInstance().convertSystemNameToAlternate(sName);    if (!altName.equals("")) {      g=InstanceManager.lightManagerInstance().getBySystemName(altName);      if (g != null) {        sName=altName;      }    }    if (g == null) {      status1.setText(Bundle.getMessage("LightError7"));      status2.setText(Bundle.getMessage("LightError6"));      status2.setVisible(true);      addFrame.pack();      addFrame.setVisible(true);      return;    }  }  curLight=g;  fixedSystemName.setText(sName);  fixedSystemName.setVisible(true);  prefixBox.setVisible(false);  systemNameLabel.setVisible(true);  systemLabel.setVisible(false);  panel1a.setVisible(false);  addRangeBox.setVisible(false);  curLight.deactivateLight();  inEditMode=true;  userName.setText(g.getUserName());  clearLightControls();  controlList=curLight.getLightControlList();  if (g.isIntensityVariable()) {    fieldMinIntensity.setText(oneDigit.format(g.getMinIntensity() * 100) + "  ");    fieldMaxIntensity.setText(oneDigit.format(g.getMaxIntensity() * 100) + "  ");    if (g.isTransitionAvailable()) {      fieldTransitionTime.setText(oneDotTwoDigit.format(g.getTransitionTime()) + "    ");    }  }  setupVariableDisplay(g.isIntensityVariable(),g.isTransitionAvailable());  update.setVisible(true);  create.setVisible(false);  status1.setText(Bundle.getMessage("LightUpdateInst"));  status2.setText("");  status2.setVisible(false);  addFrame.pack();  addFrame.setVisible(true);  lightControlTableModel.fireTableDataChanged();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildSnakePit(zone);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Scheduler.getInstance().getMyEncoderNames();}  }
class C{  public boolean isRequestLocation(){  return this.request_location;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  return new Long(a == null ? 0 : a.getDuration());}  }
class C{  public PriceModelException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  protected IPhotoViewAttacher onCreatePhotoViewAttacher(PhotoView photoView){  mAttacher=new PhotoViewAttacherEx(photoView);  return mAttacher;}  }
class C{  private void read(char symbol) throws ParseException {  expect(symbol);  index++;}  }
class C{  private int indexOfAnyBut(final char[] c,final int n,final int from,final int bloomFilter){  final int m=length();  if (n == 0)   return from < m ? from : -1;  final char[] a=array;  int i=(from < 0 ? 0 : from) - 1, k;  while (++i < m) {    if ((bloomFilter & (1 << (a[i] & 0x1F))) != 0) {      k=n;      while (k-- != 0)       if (a[i] == c[k])       break;      if (k == -1)       return i;    } else     return i;  }  return -1;}  }
class C{  public Throwable exception(){  return _exception;}  }
class C{  private static void activateChunkEntities(EntityPlayer player,Chunk chunk){  for (int i=0; i < chunk.getEntityLists().length; ++i) {    for (    Object o : chunk.getEntityLists()[i]) {      Entity entity=(Entity)o;      SpongeConfig<?> config=((IMixinWorldServer)entity.worldObj).getActiveConfig();      EntityType type=((org.spongepowered.api.entity.Entity)entity).getType();      if (config == null || type == EntityTypes.UNKNOWN) {        continue;      }      long currentTick=entity.worldObj.getWorldInfo().getWorldTotalTime();      if (currentTick > ((IModData_Activation)entity).getActivatedTick()) {        if (((IModData_Activation)entity).getDefaultActivationState()) {          ((IModData_Activation)entity).setActivatedTick(currentTick);          continue;        }        IModData_Activation spongeEntity=(IModData_Activation)entity;        if (spongeEntity.requiresActivationCacheRefresh()) {          ActivationRange.initializeEntityActivationState(entity);          spongeEntity.requiresActivationCacheRefresh(false);        }        byte activationType=((IModData_Activation)entity).getActivationType();        int bbActivationRange=((IModData_Activation)entity).getActivationRange();        if (activationType == 5) {          growBb(miscBB,player.getEntityBoundingBox(),bbActivationRange,256,bbActivationRange);        } else         if (activationType == 4) {          growBb(ambientBB,player.getEntityBoundingBox(),bbActivationRange,256,bbActivationRange);        } else         if (activationType == 3) {          growBb(aquaticBB,player.getEntityBoundingBox(),bbActivationRange,256,bbActivationRange);        } else         if (activationType == 2) {          growBb(creatureBB,player.getEntityBoundingBox(),bbActivationRange,256,bbActivationRange);        } else {          growBb(monsterBB,player.getEntityBoundingBox(),bbActivationRange,256,bbActivationRange);        }switch (((IModData_Activation)entity).getActivationType()) {case 1:          if (monsterBB.intersectsWith(entity.getEntityBoundingBox())) {            ((IModData_Activation)entity).setActivatedTick(currentTick);          }        break;case 2:      if (creatureBB.intersectsWith(entity.getEntityBoundingBox())) {        ((IModData_Activation)entity).setActivatedTick(currentTick);      }    break;case 3:  if (aquaticBB.intersectsWith(entity.getEntityBoundingBox())) {    ((IModData_Activation)entity).setActivatedTick(currentTick);  }break;case 4:if (ambientBB.intersectsWith(entity.getEntityBoundingBox())) {((IModData_Activation)entity).setActivatedTick(currentTick);}break;case 5:default :if (miscBB.intersectsWith(entity.getEntityBoundingBox())) {((IModData_Activation)entity).setActivatedTick(currentTick);}}}}}}  }
class C{  protected int wkday() throws ParseException {  dbg_enter("wkday");  try {    String tok=lexer.ttoken();    String id=tok.toLowerCase();    if (TokenNames.MON.equalsIgnoreCase(id))     return Calendar.MONDAY; else     if (TokenNames.TUE.equalsIgnoreCase(id))     return Calendar.TUESDAY; else     if (TokenNames.WED.equalsIgnoreCase(id))     return Calendar.WEDNESDAY; else     if (TokenNames.THU.equalsIgnoreCase(id))     return Calendar.THURSDAY; else     if (TokenNames.FRI.equalsIgnoreCase(id))     return Calendar.FRIDAY; else     if (TokenNames.SAT.equalsIgnoreCase(id))     return Calendar.SATURDAY; else     if (TokenNames.SUN.equalsIgnoreCase(id))     return Calendar.SUNDAY; else     throw createParseException("bad wkday");  }  finally {    dbg_leave("wkday");  }}  }
class C{  public WeakNodeIdentity(final String name){  this(name,name);}  }
class C{  public static SipRequest createInvite(SipDialogPath dialog,String[] featureTags,String[] acceptTags,String content,ContentTypeHeader contentType) throws PayloadException {  try {    URI requestURI=SipUtils.ADDR_FACTORY.createURI(dialog.getTarget());    CallIdHeader callIdHeader=SipUtils.HEADER_FACTORY.createCallIdHeader(dialog.getCallId());    CSeqHeader cseqHeader=SipUtils.HEADER_FACTORY.createCSeqHeader(dialog.getCseq(),Request.INVITE);    Address fromAddress=SipUtils.ADDR_FACTORY.createAddress(dialog.getLocalParty());    FromHeader fromHeader=SipUtils.HEADER_FACTORY.createFromHeader(fromAddress,dialog.getLocalTag());    Address toAddress=SipUtils.ADDR_FACTORY.createAddress(dialog.getRemoteParty());    ToHeader toHeader=SipUtils.HEADER_FACTORY.createToHeader(toAddress,null);    List<ViaHeader> viaHeaders=dialog.getSipStack().getViaHeaders();    if (viaHeaders != null && !viaHeaders.isEmpty()) {      ViaHeader viaHeader=viaHeaders.get(0);      viaHeader.setParameter(new NameValue("keep",null,true));    }    Request invite=SipUtils.MSG_FACTORY.createRequest(requestURI,Request.INVITE,callIdHeader,cseqHeader,fromHeader,toHeader,viaHeaders,SipUtils.buildMaxForwardsHeader());    invite.addHeader(dialog.getSipStack().getContact());    SipUtils.setFeatureTags(invite,featureTags,acceptTags);    SipUtils.buildAllowHeader(invite);    Vector<String> route=dialog.getRoute();    for (int i=0; i < route.size(); i++) {      Header routeHeader=SipUtils.HEADER_FACTORY.createHeader(RouteHeader.NAME,route.elementAt(i));      invite.addHeader(routeHeader);    }    setPPreferedIdentityHeader(invite);    invite.addHeader(SipUtils.buildUserAgentHeader());    if (dialog.getSessionExpireTime() >= SessionTimerManager.MIN_EXPIRE_PERIOD) {      Header supportedHeader=SipUtils.HEADER_FACTORY.createHeader(SupportedHeader.NAME,"timer");      invite.addHeader(supportedHeader);      Header sessionExpiresHeader=SipUtils.HEADER_FACTORY.createHeader(SipUtils.HEADER_SESSION_EXPIRES,"" + dialog.getSessionExpireTime());      invite.addHeader(sessionExpiresHeader);    }    invite.setContent(content,contentType);    invite.setContentLength(SipUtils.HEADER_FACTORY.createContentLengthHeader(content.getBytes(UTF8).length));    ViaHeader viaHeader=(ViaHeader)invite.getHeader(ViaHeader.NAME);    viaHeader.setRPort();    return new SipRequest(invite);  } catch (  ParseException|InvalidArgumentException e) {    throw new PayloadException("Can't create SIP message with content : " + content,e);  }}  }
class C{  public Object preProcessExtension(Object any){  return any;}  }
class C{  public SearchControls(int scope,long countlim,int timelim,String[] attrs,boolean retobj,boolean deref){  searchScope=scope;  timeLimit=timelim;  derefLink=deref;  returnObj=retobj;  countLimit=countlim;  attributesToReturn=attrs;}  }
class C{  private BonjourEvent newBonjourEvent(BonjourEvent.Type type,ServiceEvent event){  ServiceInfo info=event.getInfo();  BonjourService.Builder serviceBuilder=new BonjourService.Builder(event.getName(),event.getType());  Enumeration<String> keys=info.getPropertyNames();  while (keys.hasMoreElements()) {    String key=keys.nextElement();    serviceBuilder.addTxtRecord(key,info.getPropertyString(key));  }  InetAddress[] addresses=info.getInetAddresses();  for (  InetAddress address : addresses) {    if (address == null)     continue;    serviceBuilder.addAddress(address);  }  serviceBuilder.setPort(info.getPort());  return new BonjourEvent(type,serviceBuilder.build());}  }
class C{  public static boolean isAcquired(int flags){  assert isPooled(flags);  return (flags & FLAG_ACQUIRED) != 0;}  }
class C{  public boolean wasClicked(int code){  MouseButton mb=this.buttons.get(code);  if (mb == null) {    return false;  }  return mb.wasClicked();}  }
class C{  public ThriftCall(int seqId,Class<?> serviceType,String method,TBase<?,?> thriftArgs){  this(seqId,serviceType,method,toList(thriftArgs));}  }
class C{  private FlowSizeSpec calcRowsOrColsSizes(boolean isHor,int containerSize){  ArrayList<LinkedDimGroup>[] groupsLists=isHor ? colGroupLists : rowGroupLists;  Float[] defPush=isHor ? pushXs : pushYs;  if (containerSize <= 0)   containerSize=isHor ? container.getWidth() : container.getHeight();  BoundSize cSz=isHor ? lc.getWidth() : lc.getHeight();  if (!cSz.isUnset())   containerSize=cSz.constrain(containerSize,getParentSize(container,isHor),container);  DimConstraint[] primDCs=(isHor ? colConstr : rowConstr).getConstaints();  TreeSet<Integer> primIndexes=isHor ? colIndexes : rowIndexes;  int[][] rowColBoundSizes=new int[primIndexes.size()][];  HashMap<String,int[]> sizeGroupMap=new HashMap<String,int[]>(4);  DimConstraint[] allDCs=new DimConstraint[primIndexes.size()];  Iterator<Integer> primIt=primIndexes.iterator();  for (int r=0; r < rowColBoundSizes.length; r++) {    int cellIx=primIt.next();    int[] rowColSizes=new int[3];    if (cellIx >= -MAX_GRID && cellIx <= MAX_GRID) {      allDCs[r]=primDCs[cellIx >= primDCs.length ? primDCs.length - 1 : cellIx];    } else {      allDCs[r]=DOCK_DIM_CONSTRAINT;    }    ArrayList<LinkedDimGroup> groups=groupsLists[r];    int[] groupSizes=new int[]{getTotalGroupsSizeParallel(groups,LayoutUtil.MIN,false),getTotalGroupsSizeParallel(groups,LayoutUtil.PREF,false),LayoutUtil.INF};    correctMinMax(groupSizes);    BoundSize dimSize=allDCs[r].getSize();    for (int sType=LayoutUtil.MIN; sType <= LayoutUtil.MAX; sType++) {      int rowColSize=groupSizes[sType];      UnitValue uv=dimSize.getSize(sType);      if (uv != null) {        int unit=uv.getUnit();        if (unit == UnitValue.PREF_SIZE) {          rowColSize=groupSizes[LayoutUtil.PREF];        } else         if (unit == UnitValue.MIN_SIZE) {          rowColSize=groupSizes[LayoutUtil.MIN];        } else         if (unit == UnitValue.MAX_SIZE) {          rowColSize=groupSizes[LayoutUtil.MAX];        } else {          rowColSize=uv.getPixels(containerSize,container,null);        }      } else       if (cellIx >= -MAX_GRID && cellIx <= MAX_GRID && rowColSize == 0) {        rowColSize=LayoutUtil.isDesignTime(container) ? LayoutUtil.getDesignTimeEmptySize() : 0;      }      rowColSizes[sType]=rowColSize;    }    correctMinMax(rowColSizes);    addToSizeGroup(sizeGroupMap,allDCs[r].getSizeGroup(),rowColSizes);    rowColBoundSizes[r]=rowColSizes;  }  if (sizeGroupMap.size() > 0) {    for (int r=0; r < rowColBoundSizes.length; r++) {      if (allDCs[r].getSizeGroup() != null)       rowColBoundSizes[r]=sizeGroupMap.get(allDCs[r].getSizeGroup());    }  }  ResizeConstraint[] resConstrs=getRowResizeConstraints(allDCs);  boolean[] fillInPushGaps=new boolean[allDCs.length + 1];  int[][] gapSizes=getRowGaps(allDCs,containerSize,isHor,fillInPushGaps);  FlowSizeSpec fss=mergeSizesGapsAndResConstrs(resConstrs,fillInPushGaps,rowColBoundSizes,gapSizes);  adjustMinPrefForSpanningComps(allDCs,defPush,fss,groupsLists);  return fss;}  }
class C{  public int numNodes(){  return m_Tree.numNodes();}  }
class C{  public RCMDoubleMatrix2D(double[][] values){  this(values.length,values.length == 0 ? 0 : values[0].length);  assign(values);}  }
class C{  public static void grantPermsOnTable(int perms,String tblName) throws Exception {  String userGranted=DbConnectionConfig.getUserGranted();  DbGrantStatement stmt=null;  stmt=new DbGrantStatement();  try {    stmt.create(perms,tblName,userGranted);    stmt.execute();    stmt.release();  } catch (  Exception ex) {    DbGrantStatement.ensureRelease(stmt,ex);    throw ex;  }}  }
class C{  @Override public boolean hasActiveECM(){  if (!game.getOptions().booleanOption("stratops_ecm") || !game.getBoard().inSpace()) {    return super.hasActiveECM();  }  return getECMRange() >= 0;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  SeriesInfo si=getSeriesInfo(stack);  return si == null ? "" : si.getCategory();}  }
class C{  public void actionPerformed(ActionEvent e){  if (searchField.getFindPopupMenu() != null) {    Component src=JXSearchFieldAddon.SEARCH_FIELD_SOURCE.equals(UIManager.getString("SearchField.popupSource")) ? searchField : (Component)e.getSource();    Rectangle r=SwingUtilities.getLocalBounds(src);    int popupWidth=searchField.getFindPopupMenu().getPreferredSize().width;    int x=searchField.isVistaLayoutStyle() || usingSeperatePopupButton() ? r.x + r.width - popupWidth : r.x;    searchField.getFindPopupMenu().show(src,x,r.y + r.height);  }}  }
class C{  public static void writeBytes(final OutputStream output,final byte[] data,final int offset,final int len) throws IOException {  writeVarInt32(output,len);  output.write(data,offset,len);}  }
class C{  public void reply(RequestContext context,Object obj,String method,Object result){  reply(context,obj.getClass().getName() + "." + method,result == null ? "" : "" + result);}  }
class C{  @SuppressWarnings("unchecked") public static void findGinModules(File rootFolder) throws IOException {  Reflections reflection=new Reflections(getConfigurationBuilder());  Set<Class<?>> classes=reflection.getTypesAnnotatedWith(ExtensionGinModule.class);  for (  Class clazz : classes) {    EXTENSIONS_FQN.add(clazz.getCanonicalName());    System.out.println(String.format("New Gin Module Found: %s",clazz.getCanonicalName()));  }  System.out.println(String.format("Found: %d Gin Modules",EXTENSIONS_FQN.size()));}  }
class C{  public void actionPerformed(ActionEvent e){  SessionEditorIndirectRef sessionEditorRef=DesktopController.getInstance().getFrontmostSessionEditor();  SessionEditor sessionEditor=(SessionEditor)sessionEditorRef;  SessionEditorWorkbench workbench=sessionEditor.getSessionWorkbench();  SessionWrapper sessionWrapper=workbench.getSessionWrapper();  TetradMetadata metadata=new TetradMetadata();  File file=EditorUtils.getSaveFile(sessionEditor.getName(),"tet",JOptionUtils.centeringComp(),true,"Save Session As...");  if (file == null) {    this.saved=false;    return;  }  if ((DesktopController.getInstance().existsSessionByName(file.getName()) && !(sessionWrapper.getName().equals(file.getName())))) {    this.saved=false;    JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),"Another session by that name is currently open. Please " + "\nclose that session first.");    return;  }  sessionWrapper.setName(file.getName());  sessionEditor.setName(file.getName());  try {    FileOutputStream out=new FileOutputStream(file);    ObjectOutputStream objOut=new ObjectOutputStream(out);    objOut.writeObject(metadata);    objOut.writeObject(sessionWrapper);    out.close();    FileInputStream in=new FileInputStream(file);    ObjectInputStream objIn=new ObjectInputStream(in);    objIn.readObject();    sessionWrapper.setSessionChanged(false);    sessionWrapper.setNewSession(false);    this.saved=true;  } catch (  Exception e2) {    this.saved=false;    e2.printStackTrace();    JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),"An error occurred while attempting to save the session.");  }  DesktopController.getInstance().putMetadata(sessionWrapper,metadata);  sessionEditor.firePropertyChange("name",null,file.getName());}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  protected final Object clone() throws CloneNotSupportedException {  throw new CloneNotSupportedException();}  }
class C{  public DesktopInternalFrame(final WorkspaceComponent workspaceComponent){  init();  this.workspaceComponent=workspaceComponent;}  }
class C{  private void renderAnimations(){  Keyframe kf0, kf1, kf2, kf3;  float midwayPoint=0.2f;  int duration=500;  kf0=Keyframe.ofFloat(0f,1);  kf1=Keyframe.ofFloat(midwayPoint,mTransitionMidRadiusMultiplier);  kf2=Keyframe.ofFloat(1f,mTransitionEndRadiusMultiplier);  PropertyValuesHolder radiusDisappear=PropertyValuesHolder.ofKeyframe("animationRadiusMultiplier",kf0,kf1,kf2);  kf0=Keyframe.ofFloat(0f,1f);  kf1=Keyframe.ofFloat(1f,0f);  PropertyValuesHolder fadeOut=PropertyValuesHolder.ofKeyframe("alpha",kf0,kf1);  mDisappearAnimator=ObjectAnimator.ofPropertyValuesHolder(this,radiusDisappear,fadeOut).setDuration(duration);  mDisappearAnimator.addUpdateListener(mInvalidateUpdateListener);  float delayMultiplier=0.25f;  float transitionDurationMultiplier=1f;  float totalDurationMultiplier=transitionDurationMultiplier + delayMultiplier;  int totalDuration=(int)(duration * totalDurationMultiplier);  float delayPoint=(delayMultiplier * duration) / totalDuration;  midwayPoint=1 - (midwayPoint * (1 - delayPoint));  kf0=Keyframe.ofFloat(0f,mTransitionEndRadiusMultiplier);  kf1=Keyframe.ofFloat(delayPoint,mTransitionEndRadiusMultiplier);  kf2=Keyframe.ofFloat(midwayPoint,mTransitionMidRadiusMultiplier);  kf3=Keyframe.ofFloat(1f,1);  PropertyValuesHolder radiusReappear=PropertyValuesHolder.ofKeyframe("animationRadiusMultiplier",kf0,kf1,kf2,kf3);  kf0=Keyframe.ofFloat(0f,0f);  kf1=Keyframe.ofFloat(delayPoint,0f);  kf2=Keyframe.ofFloat(1f,1f);  PropertyValuesHolder fadeIn=PropertyValuesHolder.ofKeyframe("alpha",kf0,kf1,kf2);  mReappearAnimator=ObjectAnimator.ofPropertyValuesHolder(this,radiusReappear,fadeIn).setDuration(totalDuration);  mReappearAnimator.addUpdateListener(mInvalidateUpdateListener);}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.SDISPLAY;}  }
class C{  @Override public void write(byte[] buffer,int offset,int length) throws IOException {  while ((mByteToSkip > 0 || mByteToCopy > 0 || mState != STATE_JPEG_DATA) && length > 0) {    if (mByteToSkip > 0) {      int byteToProcess=length > mByteToSkip ? mByteToSkip : length;      length-=byteToProcess;      mByteToSkip-=byteToProcess;      offset+=byteToProcess;    }    if (mByteToCopy > 0) {      int byteToProcess=length > mByteToCopy ? mByteToCopy : length;      out.write(buffer,offset,byteToProcess);      length-=byteToProcess;      mByteToCopy-=byteToProcess;      offset+=byteToProcess;    }    if (length == 0) {      return;    }switch (mState) {case STATE_SOI:      int byteRead=requestByteToBuffer(2,buffer,offset,length);    offset+=byteRead;  length-=byteRead;if (mBuffer.position() < 2) {  return;}mBuffer.rewind();if (mBuffer.getShort() != JpegHeader.SOI) {throw new IOException("Not a valid jpeg image, cannot write exif");}out.write(mBuffer.array(),0,2);mState=STATE_FRAME_HEADER;mBuffer.rewind();writeExifData();break;case STATE_FRAME_HEADER:byteRead=requestByteToBuffer(4,buffer,offset,length);offset+=byteRead;length-=byteRead;if (mBuffer.position() == 2) {short tag=mBuffer.getShort();if (tag == JpegHeader.EOI) {out.write(mBuffer.array(),0,2);mBuffer.rewind();}}if (mBuffer.position() < 4) {return;}mBuffer.rewind();short marker=mBuffer.getShort();if (marker == JpegHeader.APP1) {mByteToSkip=(mBuffer.getShort() & 0x0000ffff) - 2;mState=STATE_JPEG_DATA;} else if (!JpegHeader.isSofMarker(marker)) {out.write(mBuffer.array(),0,4);mByteToCopy=(mBuffer.getShort() & 0x0000ffff) - 2;} else {out.write(mBuffer.array(),0,4);mState=STATE_JPEG_DATA;}mBuffer.rewind();}}if (length > 0) {out.write(buffer,offset,length);}}  }
class C{  public OFVendorDataType lookupVendorDataType(int vendorDataType){  return dataTypeMap.get(Long.valueOf(vendorDataType));}  }
class C{  private void displayVideoThumbnail(final View view,boolean display){  final VideoView videoView=(VideoView)view.findViewById(R.id.media_slider_videoview);  final ImageView thumbView=(ImageView)view.findViewById(R.id.media_slider_video_thumbnail);  final ImageView playView=(ImageView)view.findViewById(R.id.media_slider_video_playView);  videoView.setVisibility(display ? View.GONE : View.VISIBLE);  thumbView.setVisibility(display ? View.VISIBLE : View.GONE);  playView.setVisibility(display ? View.VISIBLE : View.GONE);}  }
class C{  public static GT_Tool_Item constructWrenchItem(String aUnlocalized,String aEnglish,int aMaxDamage,int aEntityDamage,int aDisChargedGTID){  try {    return (GT_Tool_Item)Class.forName("gregtechmod.api.items.GT_Wrench_Item").getConstructors()[0].newInstance(aUnlocalized,aEnglish,aMaxDamage,aEntityDamage,aDisChargedGTID);  } catch (  Throwable e) {  }  return new gregtech.api.items.GT_Tool_Item(aUnlocalized,aEnglish,"Doesn't work as intended, this is a Bug",aMaxDamage,aEntityDamage,false);}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  private void push(final int type){  if (outputStack == null) {    outputStack=new int[10];  }  int n=outputStack.length;  if (outputStackTop >= n) {    int[] t=new int[Math.max(outputStackTop + 1,2 * n)];    System.arraycopy(outputStack,0,t,0,n);    outputStack=t;  }  outputStack[outputStackTop++]=type;  int top=owner.inputStackTop + outputStackTop;  if (top > owner.outputStackMax) {    owner.outputStackMax=top;  }}  }
class C{  private void loadProperties(InputStream stream){  Properties prop=new Properties();  try {    prop.load(stream);  } catch (  IOException e) {    System.out.println(e);  }  Object tempName=prop.get("name");  if (tempName != null) {    name=tempName.toString();  }  Object colorString=null;  colorString=prop.get("primary1");  if (colorString != null) {    primary1=parseColor(colorString.toString());  }  colorString=prop.get("primary2");  if (colorString != null) {    primary2=parseColor(colorString.toString());  }  colorString=prop.get("primary3");  if (colorString != null) {    primary3=parseColor(colorString.toString());  }  colorString=prop.get("secondary1");  if (colorString != null) {    secondary1=parseColor(colorString.toString());  }  colorString=prop.get("secondary2");  if (colorString != null) {    secondary2=parseColor(colorString.toString());  }  colorString=prop.get("secondary3");  if (colorString != null) {    secondary3=parseColor(colorString.toString());  }  colorString=prop.get("black");  if (colorString != null) {    black=parseColor(colorString.toString());  }  colorString=prop.get("white");  if (colorString != null) {    white=parseColor(colorString.toString());  }}  }
class C{  public Rfc822Token(String name,String address,String comment){  mName=name;  mAddress=address;  mComment=comment;}  }
class C{  public Matrix4x3d translation(Vector3fc offset){  return translation(offset.x(),offset.y(),offset.z());}  }
class C{  @Override public int read() throws IOException {  if (finished) {    return (outputIndex == outputLength) ? -1 : outputBuffer[outputIndex++] & 0xFF;  }  if (outputIndex < outputLength) {    return outputBuffer[outputIndex++] & 0xFF;  }  outputIndex=0;  outputLength=0;  while (outputLength == 0) {    int outputSize=cipher.getOutputSize(inputBuffer.length);    if ((outputBuffer == null) || (outputBuffer.length < outputSize)) {      this.outputBuffer=new byte[outputSize];    }    int byteCount=in.read(inputBuffer);    if (byteCount == -1) {      try {        outputLength=cipher.doFinal(outputBuffer,0);      } catch (      Exception e) {        throw new IOException("Error while finalizing cipher",e);      }      finished=true;      break;    }    try {      outputLength=cipher.update(inputBuffer,0,byteCount,outputBuffer,0);    } catch (    ShortBufferException e) {      throw new AssertionError(e);    }  }  return read();}  }
class C{  @Override protected JsonParser _createJsonParser(Reader r,IOContext ctxt) throws IOException, JsonParseException {  if (_cfgDelegateToTextual) {    return super._createJsonParser(r,ctxt);  }  throw new UnsupportedOperationException("Can not create generator for non-byte-based target");}  }
class C{  private void updatePressed(boolean p){  this.pressed=p && isEnabled();  if (shouldActLikeButton()) {    comboBox.repaint();  }}  }
class C{  public void receiveSipRtpSessionInvitation(GenericSipRtpSession session){  ContactId remote=session.getRemoteContact();  MultimediaStreamingSessionImpl multimediaStreaming=new MultimediaStreamingSessionImpl(session.getSessionID(),mMultimediaStreamingSessionEventBroadcaster,mSipService,this,Direction.INCOMING,remote,session.getServiceId(),State.INVITED);  session.addListener(multimediaStreaming);  addMultimediaStreaming(multimediaStreaming);}  }
class C{  private boolean mutationDelete(){  if (test.isEmpty()) {    return false;  }  boolean changed=false;  int lastMutableStatement=getLastMutatableStatement();  double pl=1d / (lastMutableStatement + 1);  TestFactory testFactory=TestFactory.getInstance();  for (int num=lastMutableStatement; num >= 0; num--) {    if (num >= test.size()) {      continue;    }    if (Randomness.nextDouble() <= pl) {      changed|=deleteStatement(testFactory,num);      if (changed) {        assert ConstraintVerifier.verifyTest(test);      }    }  }  if (changed) {    assert ConstraintVerifier.verifyTest(test);  }  return changed;}  }
class C{  public static Object toSDKObject(Object o) throws WarpScriptException {  if (o instanceof String || o instanceof Long || o instanceof Double|| o instanceof Boolean) {    return o;  } else   if (o instanceof GeoTimeSerie) {    GeoTimeSerie inGTS=(GeoTimeSerie)o;    WarpScriptJavaFunctionGTS gts=new WarpScriptJavaFunctionGTS();    Metadata metadata=inGTS.getMetadata();    gts.gtsClass=inGTS.getName();    gts.gtsLabels=Collections.unmodifiableMap(metadata.getLabels());    gts.gtsAttributes=Collections.unmodifiableMap(metadata.getAttributes());    if (GTSHelper.isBucketized(inGTS)) {      gts.bucketized=true;      gts.bucketcount=GTSHelper.getBucketCount(inGTS);      gts.bucketspan=GTSHelper.getBucketSpan(inGTS);      gts.lastbucket=GTSHelper.getLastBucket(inGTS);    } else {      gts.bucketized=false;    }    if (0 == GTSHelper.nvalues(inGTS)) {      return gts;    }    gts.ticks=GTSHelper.getTicks(inGTS);    if (inGTS.hasLocations()) {      long[] locations=GTSHelper.getOriginalLocations(inGTS);      gts.latitudes=new float[locations.length];      gts.longitudes=new float[locations.length];      for (int i=0; i < locations.length; i++) {        if (GeoTimeSerie.NO_LOCATION != locations[i]) {          double[] latlon=GeoXPLib.fromGeoXPPoint(locations[i]);          gts.latitudes[i]=(float)latlon[0];          gts.longitudes[i]=(float)latlon[1];        } else {          gts.latitudes[i]=Float.NaN;          gts.longitudes[i]=Float.NaN;        }      }    } else {      gts.latitudes=null;      gts.longitudes=null;    }    if (inGTS.hasElevations()) {      gts.elevations=GTSHelper.getElevations(inGTS);    } else {      gts.elevations=null;    }switch (inGTS.getType()) {case BOOLEAN:      gts.booleanValues=GTSHelper.booleanValues(inGTS);    break;case DOUBLE:  gts.doubleValues=GTSHelper.doubleValues(inGTS);break;case LONG:gts.longValues=GTSHelper.longValues(inGTS);break;case STRING:gts.stringValues=GTSHelper.stringValues(inGTS);break;default :}return gts;} else if (o instanceof List) {List<Object> newlist=new ArrayList<Object>(((List)o).size());for (Object in : (List)o) {if (!(in instanceof List) && !(in instanceof Map)) {Object out=toSDKObject(in);newlist.add(out);} else {throw new WarpScriptException("Invalid nested complex type.");}}return newlist;} else if (o instanceof Map) {Map<Object,Object> newmap=new HashMap<Object,Object>(((Map)o).size());for (Entry<Object,Object> entry : ((Map<Object,Object>)o).entrySet()) {Object key=entry.getKey();Object value=entry.getValue();if (!(key instanceof List) && !(key instanceof Map) && !(value instanceof List)&& !(value instanceof Map)) {newmap.put(toSDKObject(key),toSDKObject(value));} else {throw new WarpScriptException("Invalid nested complex type.");}}return newmap;} else {throw new WarpScriptException("Unsupported type " + o.getClass());}}  }
class C{  public int byteSize(){  return this.byteSize;}  }
