class C{  @Override public synchronized boolean containsAll(Collection<?> collection){  return super.containsAll(collection);}  }
class C{  public static AlertDialog create(final Context context){  if (SDK_INT >= ICE_CREAM_SANDWICH)   return new LightAlertDialog(context,THEME_HOLO_LIGHT); else   return new LightAlertDialog(context);}  }
class C{  public CTSDJLDAPv3PersistentSearchBuilder withSearchFilter(Filter searchFilter){  Reject.ifNull(searchFilter);  this.searchFilter=searchFilter;  return this;}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.processingInstruction(target,data);}  }
class C{  void init(TransformerFactoryImpl processor){  m_stylesheetProcessor=processor;  m_processors.push(m_schema.getElementProcessor());  this.pushNewNamespaceSupport();}  }
class C{  @Override public void run(){  isRunning.set(true);  latch.countDown();  if (logger.isTraceEnabled()) {    logger.trace(getName() + " starting.");  }  boolean needClosing=false;  while (!closeInitiated) {    byte[] buffer;    try {      buffer=sendQueue.take();    } catch (    InterruptedException ie) {      break;    }    try {      send(buffer);    } catch (    IOException e) {      setSessionError(e);      needClosing=true;    }  }  isRunning.set(false);  if (needClosing) {    close();  }  if (logger.isTraceEnabled()) {    logger.trace(getName() + " stopped.");  }}  }
class C{  public static <T>JComboBox<T> createComboBox(){  JComboBox<T> combo=new JComboBox<>();  if (isMacOS()) {    combo.setOpaque(false);  }  combo.setKeySelectionManager(new ComboKeySelectionManager(combo));  return combo;}  }
class C{  public static UnbindRequest copyOfUnbindRequest(final UnbindRequest request){  return new UnbindRequestImpl(request);}  }
class C{  public boolean canWriteProgressive(){  return canWriteProgressive;}  }
class C{  public boolean hasExceededMaxSessions(){  return monitoringOperations.getActiveSessions() >= serviceConfig.getMaxSessions();}  }
class C{  public void update(T obj) throws NotFoundException, ServerException {  SyncResultHandler<Token> handler=new SyncResultHandler<Token>();  Token token=adapter.toToken(obj);  try {    read(token.getTokenId());    taskExecutor.execute(token.getTokenId(),taskFactory.update(token,handler));    handler.getResults();  } catch (  ServerException e) {    throw e;  }catch (  NotFoundException e) {    throw e;  }catch (  DataLayerException e) {    if (debug.warningEnabled()) {      debug.warning("Unable to create token corresponding",e);    }    throw new ServerException("Could not create token in token data store: " + e.getMessage());  }}  }
class C{  void popNamespaceSupport(){  m_nsSupportStack.pop();}  }
class C{  public void addUsers(Set users) throws AMException, SSOException {  SSOTokenManager.getInstance().validateToken(super.token);  dsServices.modifyMemberShip(super.token,users,super.entryDN,GROUP,ADD_MEMBER);}  }
class C{  public void showEdgeShadow(boolean left,boolean top,boolean right,boolean bottom){  if (SDK_LOLLIPOP) {  } else {    ((OptRoundRectDrawableWithShadow)getBackground()).showEdgeShadow(left,top,right,bottom);  }}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  FSUtils.debug.message("Entered FSRegistrationInitiationServlet Init");  metaManager=FSUtils.getIDFFMetaManager();}  }
class C{  public StatusImpl(String xmlString) throws SAML2Exception {  Document xmlDocument=XMLUtils.toDOMDocument(xmlString,SAML2SDKUtils.debug);  if (xmlDocument == null) {    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("errorObtainingElement"));  }  parseElement(xmlDocument.getDocumentElement());}  }
class C{  boolean doesOccur(QName refName){  return m_refs.contains(refName);}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  try {    logger.info("shootme: got an ACK! Sending  a BYE");    logger.info("Dialog State = " + dialog.getState());    Dialog dialog=requestEvent.getDialog();    SipProvider provider=(SipProvider)requestEvent.getSource();    Request byeRequest=dialog.createRequest(Request.BYE);    ClientTransaction ct=provider.getNewClientTransaction(byeRequest);    dialog.sendRequest(ct);  } catch (  Exception ex) {    ex.printStackTrace();    TestHarness.fail(ex.getMessage());  }}  }
class C{  public void fatal(Object message){  log(Level.SEVERE,String.valueOf(message),null);}  }
class C{  public java.lang.String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {  StringBuffer xml=new StringBuffer(3000);  String NS="";  String appendNS="";  String libNS="";  String libAppendNS="";  String uriXSI="";  if (declareNS) {    NS=sc.assertionDeclareStr;    if (minorVersion == IFSConstants.FF_12_POST_ASSERTION_MINOR_VERSION || minorVersion == IFSConstants.FF_12_ART_ASSERTION_MINOR_VERSION) {      libNS=IFSConstants.LIB_12_NAMESPACE_STRING;    } else {      libNS=IFSConstants.LIB_NAMESPACE_STRING;    }    uriXSI=IFSConstants.XSI_NAMESPACE_STRING;  }  if (includeNS) {    appendNS=SAMLConstants.ASSERTION_PREFIX;    libAppendNS=IFSConstants.LIB_PREFIX;  }  String dateStr=null;  if (getIssueInstant() != null) {    dateStr=DateUtils.toUTCDateFormat(getIssueInstant());  }  xml.append(IFSConstants.LEFT_ANGLE).append(appendNS).append(IFSConstants.ASSERTION).append(IFSConstants.SPACE).append(NS).append(IFSConstants.SPACE).append(uriXSI).append(IFSConstants.SPACE).append(libNS).append(IFSConstants.SPACE);  if (minorVersion == IFSConstants.FF_11_ASSERTION_MINOR_VERSION && id != null && !(id.length() == 0)) {    xml.append(IFSConstants.SPACE).append(IFSConstants.ID).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(id).append(IFSConstants.QUOTE).append(IFSConstants.SPACE);  }  xml.append(IFSConstants.MAJOR_VERSION).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(getMajorVersion()).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.MINOR_VERSION).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(minorVersion).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.ASSERTION_ID).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(getAssertionID()).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.ISSUER).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(getIssuer()).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.ISSUE_INSTANT).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(dateStr).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.IN_RESPONSE_TO).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(inResponseTo).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.XSI_TYPE).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(libAppendNS).append(IFSConstants.ASSERTION_TYPE).append(IFSConstants.QUOTE).append(IFSConstants.RIGHT_ANGLE).append(sc.NL);  if (getConditions() != null) {    xml.append(getConditions().toString(includeNS,false));  }  if (getAdvice() != null) {    xml.append(getAdvice().toString(includeNS,false));  }  Iterator i=getStatement().iterator();  while (i.hasNext()) {    Statement st=(Statement)i.next();    if (st instanceof FSAuthenticationStatement) {      xml.append(((FSAuthenticationStatement)st).toXMLString(includeNS,false));    } else     if (st instanceof AttributeStatement) {      xml.append(((AttributeStatement)st).toString(includeNS,false));    }  }  if (signed) {    if (signatureString != null) {      xml.append(signatureString);    } else     if (signature != null) {      signatureString=XMLUtils.print(signature);      xml.append(signatureString);    }  }  xml.append(IFSConstants.START_END_ELEMENT).append(appendNS).append(IFSConstants.ASSERTION).append(IFSConstants.RIGHT_ANGLE).append(IFSConstants.NL);  return xml.toString();}  }
class C{  private static void recycleLightWeightPopup(LightWeightPopup popup){synchronized (LightWeightPopup.class) {    List<LightWeightPopup> lightPopupCache=getLightWeightPopupCache();    if (lightPopupCache.size() < MAX_CACHE_SIZE) {      lightPopupCache.add(popup);    }  }}  }
class C{  public boolean isIdentity(){  if ((eSubjects != null) && !eSubjects.isEmpty()) {    for (    EntitlementSubject e : eSubjects) {      if (e.isIdentity()) {        return true;      }    }  }  return false;}  }
class C{  @Inject public MailService(MailServerLoader mailServerLoader){  this.mailServerLoader=mailServerLoader;}  }
class C{  public static Function<Headers,Pair<String,String>,NeverThrowsException> httpBasicExtractor(){  return HttpBasicExtractor.INSTANCE;}  }
class C{  public static void validate(int[] oid){  if (oid == null) {    throw new IllegalArgumentException("oid == null");  }  if (oid.length < 2) {    throw new IllegalArgumentException("OID MUST have at least 2 subidentifiers");  }  if (oid[0] > 2) {    throw new IllegalArgumentException("Valid values for first subidentifier are 0, 1 and 2");  } else   if (oid[0] != 2 && oid[1] > 39) {    throw new IllegalArgumentException("If the first subidentifier has 0 or 1 value the " + "second subidentifier value MUST be less than 40");  }  for (  int anOid : oid) {    if (anOid < 0) {      throw new IllegalArgumentException("Subidentifier MUST have positive value");    }  }}  }
class C{  @Override public boolean isSmapSuppressed(){  return isSmapSuppressed;}  }
class C{  public boolean checkLicenseAcceptance(){  if (!accepted) {    debug.log("License not yet accepted.");    user.tell(MSG_LICENSE_HEADER);    try {      licensePresenter.presentLicenses(accepted);      accepted=true;      debug.log("License agreement accepted by user.");    } catch (    MissingLicenseException ex) {      debug.log("License file not found: " + ex.getLicenseName());      user.tell(MSG_ERROR_NO_LICENSE_FILE);      throw ex;    }catch (    LicenseRejectedException ex) {      accepted=false;      debug.log("User rejected license: " + ex.getRejectedLicense().getFilename());    }  } else {    debug.log("License already accepted by the user");  }  return accepted;}  }
class C{  @Override public void refresh(){  TraceAngleRestriction snap_angle=i_board.get_routing_board().brd_rules.get_trace_snap_angle();  if (snap_angle.is_limit_45())   snap_angle_45_button.setSelected(true); else   snap_angle_none_button.setSelected(true);  if (i_board.itera_settings.is_stitch_route())   stitch_button.setSelected(true); else   dynamic_button.setSelected(true);  if (i_board.itera_settings.get_manual_rule_selection()) {    manual_button.setSelected(true);    manual_rule_window.setVisible(true);  } else {    automatic_button.setSelected(true);  }  shove_check.setSelected(i_board.itera_settings.is_push_enabled());  drag_component_check.setSelected(i_board.itera_settings.get_drag_components_enabled());  via_snap_to_smd_center_check.setSelected(i_board.itera_settings.is_via_snap_to_smd_center());  ignore_conduction_check.setSelected(i_board.get_routing_board().brd_rules.get_ignore_conduction());  hilight_routing_obstacle_check.setSelected(i_board.itera_settings.is_hilight_routing_obstacle());  neckdown_check.setSelected(i_board.itera_settings.is_automatic_neckdown());  BrdOutline outline=i_board.get_routing_board().get_outline();  if (outline != null) {    outline_keepout_check.setSelected(outline.keepout_outside_outline_generated());  }  double edge_to_turn_dist=i_board.get_routing_board().brd_rules.get_pin_edge_to_turn_dist();  edge_to_turn_dist=i_board.coordinate_transform.board_to_user(edge_to_turn_dist);  edge_to_turn_dist_field.setValue(edge_to_turn_dist);  restrict_pin_exit_directions_check.setSelected(edge_to_turn_dist > 0);  int min_move_slider_value=i_board.itera_settings.trace_pullt_min_move / c_accuracy_scale_factor;  min_move_slider_value=Math.min(min_move_slider_value,c_accuracy_max_slider_value);  pullt_min_move_slider.setValue(min_move_slider_value);  manual_rule_window.refresh();}  }
class C{  public void onToggleTorch(View v){  if (mWZCameraView == null)   return;  WZCamera activeCamera=mWZCameraView.getCamera();  activeCamera.setTorchOn(mBtnTorch.toggleState());}  }
class C{  private XPathFactory loadFromServicesFile(String uri,String resourceName,InputStream in){  if (debug)   debugPrintln("Reading " + resourceName);  BufferedReader rd;  try {    rd=new BufferedReader(new InputStreamReader(in,"UTF-8"),DEFAULT_LINE_LENGTH);  } catch (  java.io.UnsupportedEncodingException e) {    rd=new BufferedReader(new InputStreamReader(in),DEFAULT_LINE_LENGTH);  }  String factoryClassName;  XPathFactory resultFactory=null;  while (true) {    try {      factoryClassName=rd.readLine();    } catch (    IOException x) {      break;    }    if (factoryClassName != null) {      int hashIndex=factoryClassName.indexOf('#');      if (hashIndex != -1) {        factoryClassName=factoryClassName.substring(0,hashIndex);      }      factoryClassName=factoryClassName.trim();      if (factoryClassName.length() == 0) {        continue;      }      try {        XPathFactory foundFactory=createInstance(factoryClassName);        if (foundFactory.isObjectModelSupported(uri)) {          resultFactory=foundFactory;          break;        }      } catch (      Exception ignored) {      }    } else {      break;    }  }  IoUtils.closeQuietly(rd);  return resultFactory;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemns01.class,args);}  }
class C{  ProductVersion(String version,String revision){  this.version=new ComparableVersion(version);  this.revision=revision;}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.ModifyElement createModifyElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.ModifyElementImpl();}  }
class C{  public void paintProgressBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  protected synchronized void enqueueKeyEvents(long after,Component untilFocused){  if (untilFocused == null) {    return;  }  if (focusLog.isLoggable(PlatformLogger.Level.FINER)) {    focusLog.finer("Enqueue at {0} for {1}",after,untilFocused);  }  int insertionIndex=0, i=typeAheadMarkers.size();  ListIterator<TypeAheadMarker> iter=typeAheadMarkers.listIterator(i);  for (; i > 0; i--) {    TypeAheadMarker marker=iter.previous();    if (marker.after <= after) {      insertionIndex=i;      break;    }  }  typeAheadMarkers.add(insertionIndex,new TypeAheadMarker(after,untilFocused));}  }
class C{  public void testEngineGenerateCertPathLjava_io_InputStream_Ljava_lang_String02(){  CertificateFactorySpi certFactorySpi=new extCertificateFactorySpi();  ByteArrayInputStream bais=new ByteArrayInputStream(new byte[0]);  DataInputStream dis=new DataInputStream(bais);  try {    certFactorySpi.engineGenerateCertPath(dis,"encoding");    fail("UnsupportedOperationException expected");  } catch (  UnsupportedOperationException e) {  }catch (  CertificateException e) {    fail("Unexpected CertificateException " + e.getMessage());  }}  }
class C{  @Override public void enqueueCall(Callback<DirectionsResponse> callback){  getCall().enqueue(callback);}  }
class C{  @Override public boolean isShow(HttpServletRequest request) throws PortalException {  return true;}  }
class C{  public void loadArgs(){  loadArgs(0,argumentTypes.length);}  }
class C{  public void visitEnd(){  if (av != null) {    av.visitEnd();  }}  }
class C{  public Builder addFormDataPart(String name,String value){  return addPart(Part.createFormData(name,value));}  }
class C{  public Builder structuralObjectClassOID(final String nameOrOID){  this.structuralObjectClassOID=nameOrOID;  return this;}  }
class C{  public static void registerSynchronizationProvider(SynchronizationProvider<SynchronizationProviderCfg> provider){  directoryServer.synchronizationProviders.add(provider);  provider.completeSynchronizationProvider();}  }
class C{  public ChannelMessage[] execute(){  int pkgCnt=buffer.countPackages();  ChannelMessage[] result=new ChannelMessage[pkgCnt];  for (int i=0; i < pkgCnt; i++) {    ChannelMessage data=buffer.extractPackage(true);    result[i]=data;  }  return result;}  }
class C{  public static BooleanArgument displayEquivalentCommandArgument() throws ArgumentException {  return BooleanArgument.builder(OPTION_LONG_DISPLAY_EQUIVALENT).description(INFO_DESCRIPTION_DISPLAY_EQUIVALENT.get()).buildArgument();}  }
class C{  public boolean isMember(SSOToken token) throws SSOException {  return (SSOTokenManager.getInstance().isValidToken(token));}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.MsgProviderElement createMsgProviderElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.MsgProviderElementImpl();}  }
class C{  public void uninstallUI(JComponent c){  uninstallListeners();  uninstallDefaults();  uninstallKeyboardActions();  cellWidth=cellHeight=-1;  cellHeights=null;  listWidth=listHeight=-1;  list.remove(rendererPane);  rendererPane=null;  list=null;}  }
class C{  public UnsavedChangesDialog.Result checkUnsavedChanges(){  return UnsavedChangesDialog.Result.DO_NOT_SAVE;}  }
class C{  public byte[] generateSignature(@NonNull byte[] content){  try {    Mac mac=Mac.getInstance(HASH_ALGORITHM);    mac.init(secretKeySpec);    return mac.doFinal(content);  } catch (  NoSuchAlgorithmException|InvalidKeyException e) {    throw new IllegalStateException(e);  }}  }
class C{  protected void resetMarksAtZero(){  if (marks != null && getGapStart() == 0) {    int g1=getGapEnd();    for (int counter=0, maxCounter=marks.size(); counter < maxCounter; counter++) {      MarkData mark=marks.elementAt(counter);      if (mark.index <= g1) {        mark.index=0;      } else {        break;      }    }  }}  }
class C{  static PolicyDecision mergePolicyDecisions(ServiceType serviceType,PolicyDecision pd1,PolicyDecision pd2){  Map actionDecisions1=pd1.getActionDecisions();  Set actions=new HashSet();  actions.addAll(actionDecisions1.keySet());  Iterator iter=actions.iterator();  while (iter.hasNext()) {    String action=(String)iter.next();    ActionDecision ad1=(ActionDecision)actionDecisions1.get(action);    pd2.addActionDecision(ad1,serviceType);  }  Map mergedReponseAttrsMap=new HashMap();  PolicyUtils.appendMapToMap(pd1.getResponseAttributes(),mergedReponseAttrsMap);  PolicyUtils.appendMapToMap(pd2.getResponseAttributes(),mergedReponseAttrsMap);  pd2.setResponseAttributes(mergedReponseAttrsMap);  return pd2;}  }
class C{  public boolean isDynamic(){  return myCRIF.isDynamic();}  }
class C{  public Set searchPeopleContainers(String wildcard,Map avPairs,int level) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(PEOPLE_CONTAINER),getSearchFilter(AMObject.PEOPLE_CONTAINER),wildcard,avPairs,level);}  }
class C{  public final MappedByteBuffer force(){  checkIsMapped();  if (mapMode == MapMode.READ_WRITE) {    try {      Libcore.os.msync(block.toLong(),block.getSize(),MS_SYNC);    } catch (    ErrnoException errnoException) {      throw new AssertionError(errnoException);    }  }  return this;}  }
class C{  @Inject UmaProviderSettingsFactory(OAuth2ProviderSettingsFactory oAuth2ProviderSettingsFactory,UmaTokenStoreFactory tokenStoreFactory,JacksonRepresentationFactory jacksonRepresentationFactory){  this.oAuth2ProviderSettingsFactory=oAuth2ProviderSettingsFactory;  this.tokenStoreFactory=tokenStoreFactory;  this.jacksonRepresentationFactory=jacksonRepresentationFactory;}  }
class C{  public boolean isRectangular(){  int size=curves.size();  if (size == 0) {    return true;  }  if (size > 3) {    return false;  }  Curve c1=(Curve)curves.get(1);  Curve c2=(Curve)curves.get(2);  if (c1.getOrder() != 1 || c2.getOrder() != 1) {    return false;  }  if (c1.getXTop() != c1.getXBot() || c2.getXTop() != c2.getXBot()) {    return false;  }  if (c1.getYTop() != c2.getYTop() || c1.getYBot() != c2.getYBot()) {    return false;  }  return true;}  }
class C{  private static void printLabelAndValues(LocalizableMessage msg,ArrayList<String> values){  String label=String.valueOf(msg);  if (values == null || values.isEmpty()) {    out.print(label);    out.println(":");  } else {    for (    String value : values) {      out.print(label);      out.print(":  ");      out.println(value);    }  }}  }
class C{  public static GSSAPISASLBindRequest newGSSAPISASLBindRequest(final String authenticationID,final byte[] password){  return new GSSAPISASLBindRequestImpl(authenticationID,password);}  }
class C{  private static void updatePublicKeyCertificate(ServerDescriptor desc,ConnectionWrapper connWrapper) throws LdapException {  String dn="ds-cfg-key-id=ads-certificate,cn=ads-truststore";  Connection conn=connWrapper.getConnection();  for (int i=0; i < 2; ++i) {    try {      SearchRequest request=newSearchRequest(dn,BASE_OBJECT,"(objectclass=ds-cfg-instance-key)","ds-cfg-public-key-certificate;binary");      SearchResultEntry certEntry=conn.searchSingleEntry(request);      final Attribute certAttr=certEntry.getAttribute("ds-cfg-public-key-certificate;binary");      if (null != certAttr) {        desc.serverProperties.put(ServerProperty.INSTANCE_PUBLIC_KEY_CERTIFICATE,certAttr.firstValue().toByteArray());      }      break;    } catch (    LdapException e) {      if (0 != i || e.getResult().getResultCode() != ResultCode.NO_SUCH_OBJECT) {        throw e;      }      AddRequest request=newAddRequest(dn).addAttribute("objectclass","top","ds-cfg-self-signed-cert-request");      conn.add(request);    }  }}  }
class C{  public Vector multiply(float m){  x*=m;  y*=m;  z*=m;  return this;}  }
class C{  public String toXMLString() throws FSMsgException {  return this.toXMLString(true,true);}  }
class C{  public static String printAnySimpleType(String val){  if (theConverter == null)   initConverter();  return theConverter.printAnySimpleType(val);}  }
class C{  public static int main(final String[] args,final OutputStream outStream,final OutputStream errStream){  return new MakeLDIF().makeLDIFMain(args,false,false,outStream,errStream);}  }
class C{  boolean inOpenRange(K key,K least,K fence){  if (key == null)   throw new NullPointerException();  return ((least == null || compare(key,least) >= 0) && (fence == null || compare(key,fence) <= 0));}  }
class C{  public INTF_REPOS(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testAddress;  NamedNodeMap attributes;  doc=(Document)load("staff",false);  addressList=doc.getElementsByTagName("address");  testAddress=addressList.item(0);  attributes=testAddress.getAttributes();  assertSize("elementRetrieveAllAttributesAssert",2,attributes);}  }
class C{  @Override public boolean isTimeValid(){  if (conditions == null) {    return true;  } else {    return conditions.checkDateValidity(currentTimeMillis());  }}  }
class C{  BigInteger copy(){  prepareJavaRepresentation();  int[] copyDigits=new int[numberLength];  System.arraycopy(digits,0,copyDigits,0,numberLength);  return new BigInteger(sign,numberLength,copyDigits);}  }
class C{  protected void flushCache() throws IOException {  if (this.cachePosition > 0) {    this.out.writeLine(Integer.toHexString(this.cachePosition));    this.out.write(this.cache,0,this.cachePosition);    this.out.writeLine("");    this.cachePosition=0;  }}  }
class C{  @Descriptor("Update the system with the provided update file.") public void update(CommandSession session,@Descriptor(USER_PASS_DESC) @MetaVar(USER_PASS_METAVAR) @Parameter(names={"-u","--user"},absentValue=USER_PASS_DEFAULT) final String userPass,@Descriptor(IDM_URL_DESC) @MetaVar(IDM_URL_METAVAR) @Parameter(names={"--url"},absentValue=IDM_URL_DEFAULT) final String idmUrl,@Descriptor(IDM_PORT_DESC) @MetaVar(IDM_PORT_METAVAR) @Parameter(names={"-P","--port"},absentValue="") final String idmPort,@Descriptor("Automatically accepts the product license (if present). " + "Defaults to 'false' to preview update.") @Parameter(names={"--acceptLicense"},presentValue="true",absentValue="false") final boolean acceptLicense,@Descriptor("Skip repo update preview. " + "Should only be used if you have already obtained a copy of repo update scripts.") @Parameter(names={"--skipRepoUpdatePreview"},presentValue="true",absentValue="false") final boolean skipRepoUpdatePreview,@Descriptor("Timeout value to wait for jobs to finish. " + "Defaults to -1 to exit immediately if jobs are running.") @MetaVar("TIME") @Parameter(names={"--maxJobsFinishWaitTimeMs"},absentValue="-1") final long maxJobsFinishWaitTimeMs,@Descriptor("Timeout value to wait for update process to complete. Defaults to 30000 ms.") @MetaVar("TIME") @Parameter(names={"--maxUpdateWaitTimeMs"},absentValue="30000") final long maxUpdateWaitTimeMs,@Descriptor("Log file path. (optional) Defaults to logs/update.log") @MetaVar("LOG_FILE") @Parameter(names={"-l","--log"},absentValue="logs/update.log") final String logFilePath,@Descriptor("Log only to the log file.") @Parameter(names={"-Q","--quiet"},presentValue="true",absentValue="false") final boolean quietMode,@Descriptor("Filename of the Update archive within bin/update.") final String archive) throws ResourceException {  try (final HttpRemoteJsonResource resource=new HttpRemoteJsonResource(getUrl(idmUrl),getPort(idmPort),getUsername(userPass),getPassword(userPass))){    UpdateCommandConfig config=new UpdateCommandConfig().setUpdateArchive(archive).setLogFilePath(logFilePath).setQuietMode(quietMode).setAcceptedLicense(acceptLicense).setSkipRepoUpdatePreview(skipRepoUpdatePreview).setMaxJobsFinishWaitTimeMs(maxJobsFinishWaitTimeMs).setMaxUpdateWaitTimeMs(maxUpdateWaitTimeMs);    UpdateCommand updateCommand=new UpdateCommand(session,resource,config);    if (config.isQuietMode() && !updateCommand.fetchRepoUpdates(new RootContext()).asList().isEmpty()) {      System.err.println("Quiet mode not supported. " + "Quiet mode may only be used when archives do not contain repository updates. ");      return;    }    updateCommand.execute(new RootContext());  } catch (  Exception e) {    failAndExit(session,OPERATION_FAILED,e.getMessage());  }}  }
class C{  public static List<Attribute> createAsList(AttributeType attributeType,String name,String valueString){  return newArrayList(create(attributeType,name,valueString));}  }
class C{  public XmlDomWriter(boolean canonical){  fCanonical=canonical;}  }
class C{  public synchronized void parse(Reader in) throws IOException {  this.in=in;  this.ln=1;  seenHtml=false;  seenHead=false;  seenBody=false;  crCount=lfCount=crlfCount=0;  try {    ch=readCh();    text=new char[1024];    str=new char[128];    parseContent();    while (stack != null) {      endTag(true);    }    in.close();  } catch (  IOException e) {    errorContext();    error("ioexception");    throw e;  }catch (  Exception e) {    errorContext();    error("exception",e.getClass().getName(),e.getMessage());    e.printStackTrace();  }catch (  ThreadDeath e) {    errorContext();    error("terminated");    e.printStackTrace();    throw e;  } finally {    for (; stack != null; stack=stack.next) {      handleEndTag(stack.tag);    }    text=null;    str=null;  }}  }
class C{  public void deleteServers(Set servers) throws AMConsoleException {  if (servers.contains(SystemProperties.getServerInstanceName())) {    throw new AMConsoleException(getLocalizedString("exception.cannot.delete.this.server.instance"));  }  String serverName=null;  try {    if ((servers != null) && !servers.isEmpty()) {      SSOToken token=getUserSSOToken();      for (Iterator i=servers.iterator(); i.hasNext(); ) {        serverName=(String)i.next();        String[] param={serverName};        logEvent("ATTEMPT_DELETE_SERVER",param);        ServerConfiguration.deleteServerInstance(token,serverName);        logEvent("SUCCEED_DELETE_SERVER",param);      }    }  } catch (  SMSException e) {    String[] params={serverName,e.getMessage()};    logEvent("SMS_EXCEPTION_DELETE_SERVER",params);    throw new AMConsoleException(getErrorString(e));  }catch (  SSOException e) {    String[] params={serverName,e.getMessage()};    logEvent("SSO_EXCEPTION_DELETE_SERVER",params);    throw new AMConsoleException(getErrorString(e));  }}  }
class C{  protected StackFrame newFrame(final Frame<?> src,AbstractInsnNode ain){  return new StackFrame(src,ain);}  }
class C{  private void swap_position(int p_1,int p_2){  BrdViaInfo via_1=(BrdViaInfo)this.list_model.get(p_1);  BrdViaInfo via_2=(BrdViaInfo)this.list_model.get(p_2);  if (via_1 == null || via_2 == null) {    return;  }  this.list_model.set(p_1,via_2);  this.list_model.set(p_2,via_1);  this.via_rule.swap(via_1,via_2);}  }
class C{  public JobPriority(int value){  super(value,1,100);}  }
class C{  public static UnitValue createPercentValue(float value){  return new UnitValue(PERCENT,value);}  }
class C{  public boolean delete(Long ruleActionID){  if (ruleActionID == null) {    throw new IllegalArgumentException("primary key null.");  }  return database.delete(DATABASE_TABLE,KEY_RULEACTIONID + "=" + ruleActionID,null) > 0;}  }
class C{  public Number parse(String text,ParsePosition status){  int start=status.index;  int furthest=start;  double bestNumber=Double.NaN;  double tempNumber=0.0;  for (int i=0; i < choiceFormats.length; ++i) {    String tempString=choiceFormats[i];    if (text.regionMatches(start,tempString,0,tempString.length())) {      status.index=start + tempString.length();      tempNumber=choiceLimits[i];      if (status.index > furthest) {        furthest=status.index;        bestNumber=tempNumber;        if (furthest == text.length())         break;      }    }  }  status.index=furthest;  if (status.index == start) {    status.errorIndex=furthest;  }  return new Double(bestNumber);}  }
class C{  protected void time(Calendar calendar) throws ParseException {  try {    String s=lexer.number();    int hour=Integer.parseInt(s);    calendar.set(Calendar.HOUR_OF_DAY,hour);    lexer.match(':');    s=lexer.number();    int min=Integer.parseInt(s);    calendar.set(Calendar.MINUTE,min);    lexer.match(':');    s=lexer.number();    int sec=Integer.parseInt(s);    calendar.set(Calendar.SECOND,sec);  } catch (  Exception ex) {    throw createParseException("error processing time ");  }}  }
class C{  static public void assertEquals(String message,char expected,char actual){  assertEquals(message,new Character(expected),new Character(actual));}  }
class C{  public AbortedChangelogCursorException(LocalizableMessage message,Throwable cause){  super(message,cause);}  }
class C{  protected void uninstallPreviewPanel(){  if (this.previewPanel != null) {    this.previewPanel.removeMouseListener(getHandler());    this.previewPanelHolder.remove(this.previewPanel);  }  this.chooser.remove(this.previewPanelHolder);}  }
class C{  public static AsymmetricKeyParameter createKey(PrivateKeyInfo keyInfo) throws IOException {  AlgorithmIdentifier algId=keyInfo.getPrivateKeyAlgorithm();  if (algId.getAlgorithm().equals(PKCSObjectIdentifiers.rsaEncryption)) {    RSAPrivateKey keyStructure=RSAPrivateKey.getInstance(keyInfo.parsePrivateKey());    return new RSAPrivateCrtKeyParameters(keyStructure.getModulus(),keyStructure.getPublicExponent(),keyStructure.getPrivateExponent(),keyStructure.getPrime1(),keyStructure.getPrime2(),keyStructure.getExponent1(),keyStructure.getExponent2(),keyStructure.getCoefficient());  } else   if (algId.getAlgorithm().equals(PKCSObjectIdentifiers.dhKeyAgreement)) {    DHParameter params=DHParameter.getInstance(algId.getParameters());    ASN1Integer derX=(ASN1Integer)keyInfo.parsePrivateKey();    BigInteger lVal=params.getL();    int l=lVal == null ? 0 : lVal.intValue();    DHParameters dhParams=new DHParameters(params.getP(),params.getG(),null,l);    return new DHPrivateKeyParameters(derX.getValue(),dhParams);  } else   if (algId.getAlgorithm().equals(X9ObjectIdentifiers.id_dsa)) {    ASN1Integer derX=(ASN1Integer)keyInfo.parsePrivateKey();    ASN1Encodable de=algId.getParameters();    DSAParameters parameters=null;    if (de != null) {      DSAParameter params=DSAParameter.getInstance(de.toASN1Primitive());      parameters=new DSAParameters(params.getP(),params.getQ(),params.getG());    }    return new DSAPrivateKeyParameters(derX.getValue(),parameters);  } else   if (algId.getAlgorithm().equals(X9ObjectIdentifiers.id_ecPublicKey)) {    X962Parameters params=new X962Parameters((ASN1Primitive)algId.getParameters());    X9ECParameters x9;    if (params.isNamedCurve()) {      ASN1ObjectIdentifier oid=ASN1ObjectIdentifier.getInstance(params.getParameters());      x9=X962NamedCurves.getByOID(oid);      if (x9 == null) {        x9=SECNamedCurves.getByOID(oid);        if (x9 == null) {          x9=NISTNamedCurves.getByOID(oid);        }      }    } else {      x9=X9ECParameters.getInstance(params.getParameters());    }    ECPrivateKey ec=ECPrivateKey.getInstance(keyInfo.parsePrivateKey());    BigInteger d=ec.getKey();    ECDomainParameters dParams=new ECDomainParameters(x9.getCurve(),x9.getG(),x9.getN(),x9.getH(),x9.getSeed());    return new ECPrivateKeyParameters(d,dParams);  } else {    throw new RuntimeException("algorithm identifier in key not recognised");  }}  }
class C{  public static boolean unloadWorld(String name,boolean save){  return server.unloadWorld(name,save);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentcreateelement.class,args);}  }
class C{  public void testDisconnect_BeforeConnect() throws IOException {  assertFalse(this.channel1.isConnected());  assertEquals(this.channel1,this.channel1.disconnect());  assertFalse(this.channel1.isConnected());}  }
class C{  public void process(XMLParser parser,String name,Vector elems,Hashtable atts,String Pcdata) throws XMLException {  if (DSConfigMgr.debugger.messageEnabled()) {    DSConfigMgr.debugger.message("in Server.process()");  }  if (name.equals(DSConfigMgr.SERVER)) {    serverID=(String)atts.get(DSConfigMgr.NAME);    serverName=(String)atts.get(DSConfigMgr.HOST);    String connTypeStr=(String)atts.get(DSConfigMgr.AUTH_TYPE);    String serverPortStr=(String)atts.get(DSConfigMgr.PORT);    if (connTypeStr == null) {      connTypeStr=DSConfigMgr.VAL_STYPE_SIMPLE;    }    if (connTypeStr.equalsIgnoreCase(DSConfigMgr.VAL_STYPE_SSL)) {      connType=Type.CONN_SSL;    } else {      connType=Type.CONN_SIMPLE;    }    try {      serverPort=Integer.parseInt(serverPortStr);    } catch (    NumberFormatException ex) {      serverPort=389;    }  } else {    throw new XMLException(DSConfigMgr.getString(IUMSConstants.DSCFG_DIRSERVER_NODE_EXPECTED));  }}  }
class C{  private boolean checkLogMessageExist(String fileName,String patternToSearch) throws IOException {  BufferedReader br=new BufferedReader(new FileReader(debugDirectory + File.separator + fileName));  String sCurrentLine;  while ((sCurrentLine=br.readLine()) != null) {    if (sCurrentLine.contains(patternToSearch)) {      return true;    }  }  return false;}  }
class C{  public void removeStaticGroup(AMStaticGroup group) throws AMException, SSOException {  removeStaticGroup(group.getDN());}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  EntityReference entRef;  Element entElement;  NamedNodeMap attrList;  Attr attrNode;  int nodeType;  Attr removedAttr;  Node appendedChild;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  entRef=doc.createEntityReference("ent4");  assertNotNull("createdEntRefNotNull",entRef);  appendedChild=gender.appendChild(entRef);  entElement=(Element)entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);  attrList=entElement.getAttributes();  attrNode=(Attr)attrList.getNamedItem("domestic");  assertNotNull("attrNodeNotNull",attrNode);{    boolean success=false;    try {      removedAttr=entElement.removeAttributeNode(attrNode);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  private boolean hasTriggerMisfired(Trigger trigger){  long now=System.currentTimeMillis();  Date nextFireTime=trigger.getNextFireTime();  if (nextFireTime.getTime() <= (now - misfireThreshold)) {    return true;  }  return false;}  }
class C{  public SerialRef(Ref ref) throws SerialException, SQLException {  if (ref == null) {    throw new SQLException("Cannot instantiate a SerialRef object " + "with a null Ref object");  }  reference=ref;  object=ref;  if (ref.getBaseTypeName() == null) {    throw new SQLException("Cannot instantiate a SerialRef object " + "that returns a null base type name");  } else {    baseTypeName=ref.getBaseTypeName();  }}  }
class C{  protected void insureRowContinuity(){  if (selectionMode == TreeSelectionModel.CONTIGUOUS_TREE_SELECTION && selection != null && rowMapper != null) {    DefaultListSelectionModel lModel=listSelectionModel;    int min=lModel.getMinSelectionIndex();    if (min != -1) {      for (int counter=min, maxCounter=lModel.getMaxSelectionIndex(); counter <= maxCounter; counter++) {        if (!lModel.isSelectedIndex(counter)) {          if (counter == min) {            clearSelection();          } else {            TreePath[] newSel=new TreePath[counter - min];            int selectionIndex[]=rowMapper.getRowsForPaths(selection);            for (int i=0; i < selectionIndex.length; i++) {              if (selectionIndex[i] < counter) {                newSel[selectionIndex[i] - min]=selection[i];              }            }            setSelectionPaths(newSel);            break;          }        }      }    }  } else   if (selectionMode == TreeSelectionModel.SINGLE_TREE_SELECTION && selection != null && selection.length > 1) {    setSelectionPath(selection[0]);  }}  }
class C{  protected final boolean isListState(){  return stateTextTypes.charAt(state) == 'L';}  }
class C{  public CSeqHeader createCSeqHeader(int sequenceNumber,String method) throws ParseException, InvalidArgumentException {  return this.createCSeqHeader((long)sequenceNumber,method);}  }
class C{  public void removeNotify(ComponentPeer peer){  if (nativePeer != null)   ((DropTargetPeer)nativePeer).removeDropTarget(this);  componentPeer=nativePeer=null;synchronized (this) {    if (isDraggingInside) {      dragExit(new DropTargetEvent(getDropTargetContext()));    }  }}  }
class C{  public void testServerDialogStates(){  try {    ClientTransaction inviteTransaction=null;    Request invite=createRiInviteRequest(null,null,null);    try {      eventCollector.collectRequestEvent(tiSipProvider);      inviteTransaction=riSipProvider.getNewClientTransaction(invite);      inviteTransaction.sendRequest();    } catch (    TooManyListenersException exc) {      throw new TiUnexpectedError("Failed to register a listener with the TI",exc);    }catch (    SipException exc) {      throw new TckInternalError("Failed to send initial invite request",exc);    }    waitForMessage();    RequestEvent inviteReqEvt=eventCollector.extractCollectedRequestEvent();    if (inviteReqEvt == null || inviteReqEvt.getRequest() == null)     throw new TiUnexpectedError("The TI did not dispatch the initial invite request");    ServerTransaction tran=null;    try {      tran=tiSipProvider.getNewServerTransaction(inviteReqEvt.getRequest());    } catch (    Exception ex) {      throw new TiUnexpectedError("The TI failed to create a Server transaction for an incoming request");    }    Dialog dialog=tran.getDialog();    assertNull("A dialog passed into the " + dialog.getState() + " state before sending any response!",dialog.getState());    try {      eventCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException e) {      throw new TckInternalError("Failed to register a SipListener with the RI.",e);    }    Response ringing=null;    try {      ringing=tiMessageFactory.createResponse(Response.RINGING,inviteReqEvt.getRequest());      ((ToHeader)ringing.getHeader(ToHeader.NAME)).setTag(Integer.toString(hashCode()));      ringing.setHeader(createTiContact());      tran.sendResponse(ringing);    } catch (    Exception e) {      throw new TiUnexpectedError("Failed to create and send a RINGING response",e);    }    waitForMessage();    ResponseEvent ringingRespEvt=eventCollector.extractCollectedResponseEvent();    if (ringingRespEvt == null || ringingRespEvt.getResponse() == null)     throw new TiUnexpectedError("The TI did not send the RINGING response.");    assertEquals("The Dialog did not pass into the early state after sending a RINGING response",DialogState.EARLY,dialog.getState());    SipEventCollector tteCollector=new SipEventCollector();    try {      eventCollector.collectResponseEvent(riSipProvider);      tteCollector.collectTransactionTermiatedEvent(tiSipProvider);    } catch (    TooManyListenersException e) {      throw new TckInternalError("Failed to register a SipListener with the RI.",e);    }    Response ok=null;    try {      ok=tiMessageFactory.createResponse(Response.OK,inviteReqEvt.getRequest());      ((ToHeader)ok.getHeader(ToHeader.NAME)).setTag(Integer.toString(hashCode()));      ContactHeader contact=createTiContact();      ok.addHeader(contact);      tran.sendResponse(ok);    } catch (    Exception e) {      throw new TiUnexpectedError("Failed to create and send an OK response",e);    }    waitForMessage();    ResponseEvent okRespEvt=eventCollector.extractCollectedResponseEvent();    if (okRespEvt == null || okRespEvt.getResponse() == null)     throw new TiUnexpectedError("The TI did not send an OK response.");    ClientTransaction ct=okRespEvt.getClientTransaction();    Dialog clientDialog=ct.getDialog();    assertNotNull(clientDialog);    Request ackReq=clientDialog.createAck(((CSeqHeader)okRespEvt.getResponse().getHeader(CSeqHeader.NAME)).getSeqNumber());    ;    clientDialog.sendAck(ackReq);    waitForMessage();    assertEquals("The Dialog did not pass into the CONFIRMED state upon reception of an OK response",DialogState.CONFIRMED,dialog.getState());    waitForTimeout();    TransactionTerminatedEvent tte=tteCollector.extractCollectedTransactionTerminatedEvent();    assertNotNull(tte);    assertTrue(tte.isServerTransaction());    assertEquals(tran,tte.getServerTransaction());    try {      eventCollector.collectRequestEvent(tiSipProvider);    } catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with the TI",ex);    }    try {      Dialog d=inviteTransaction.getDialog();      Request bye=d.createRequest(Request.BYE);      ct=riSipProvider.getNewClientTransaction(bye);      d.sendRequest(ct);    } catch (    Exception e) {      throw new TckInternalError("Failed to create and send a BYE request using a dialog.",e);    }    waitForMessage();    RequestEvent byeEvt=eventCollector.extractCollectedRequestEvent();    if (byeEvt == null || byeEvt.getRequest() == null)     throw new TiUnexpectedError("The TI did not dispatch a BYE request");    ServerTransaction byeTran=null;    byeTran=(ServerTransaction)byeEvt.getServerTransaction();    try {      eventCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException e) {      throw new TckInternalError("Failed to register a SipListener with the RI.",e);    }    try {      ok=tiMessageFactory.createResponse(Response.OK,byeEvt.getRequest());      ok.addHeader(createTiContact());      byeTran.sendResponse(ok);    } catch (    Exception e) {      throw new TiUnexpectedError("Failed to create and send an OK response",e);    }    waitForMessage();    ResponseEvent byeOkRespEvt=eventCollector.extractCollectedResponseEvent();    if (byeOkRespEvt == null || byeOkRespEvt.getResponse() == null)     throw new TiUnexpectedError("The TI did not send an OK response to a bye request.");    assertTrue("The dialog did not pass into a final (COMPLETED or TERMINATED) state after recieving a BYE.",DialogState.COMPLETED.equals(dialog.getState()) || DialogState.TERMINATED.equals(dialog.getState()));  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  SSOTokenImpl(Session session){  this.session=session;  ldapConnect=false;}  }
class C{  private static String H(String data){  try {    MessageDigest digest=MessageDigest.getInstance("MD5");    return toHexString(digest.digest(data.getBytes()));  } catch (  NoSuchAlgorithmException ex) {    throw new RuntimeException("Failed to instantiate an MD5 algorithm",ex);  }}  }
class C{  public static String hexEncode(final String value){  return encode(value,4,16);}  }
class C{  public void flip(int x,int y){  int offset=y * rowSize + (x / 32);  bits[offset]^=1 << (x & 0x1f);}  }
class C{  public static void fill(float[] array,float value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  PolicyModel model=(PolicyModel)getModel();  String cacheID=(String)getPageSessionAttribute(ProfileViewBeanBase.PG_SESSION_POLICY_CACHE_ID);  try {    CachedPolicy cachedPolicy=model.getCachedPolicy(cacheID);    String policyName=cachedPolicy.getTrackPolicyName();    String curRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);    try {      cacheID=model.cachePolicy(curRealm,policyName);      setPageSessionAttribute(PolicyOpViewBeanBase.PG_SESSION_POLICY_CACHE_ID,cacheID);    } catch (    AMConsoleException e) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    }    forwardTo();  } catch (  AMConsoleException e) {    debug.warning("PolicyReferralEditViewBean.handleButton2Request",e);    redirectToStartURL();  }}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public void removeUserInfo(){  this.userInfo=null;}  }
class C{  protected void fireTreeStructureChanged(Object source,Object[] path,int[] childIndices,Object[] children){  Object[] listeners=listenerList.getListenerList();  TreeModelEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeModelListener.class) {      if (e == null)       e=new TreeModelEvent(source,path,childIndices,children);      ((TreeModelListener)listeners[i + 1]).treeStructureChanged(e);    }  }}  }
class C{  private static String toUnsignedString0(int val,int shift){  int mag=Integer.SIZE - Integer.numberOfLeadingZeros(val);  int chars=Math.max(((mag + (shift - 1)) / shift),1);  char[] buf=new char[chars];  formatUnsignedInt(val,shift,buf,0,chars);  return new String(buf,true);}  }
class C{  public String encodedPassword(){  if (password.isEmpty())   return "";  int passwordStart=url.indexOf(':',scheme.length() + 3) + 1;  int passwordEnd=url.indexOf('@');  return url.substring(passwordStart,passwordEnd);}  }
class C{  public static Rectangle computeIntersection(int x,int y,int width,int height,Rectangle dest){  int x1=(x > dest.x) ? x : dest.x;  int x2=((x + width) < (dest.x + dest.width)) ? (x + width) : (dest.x + dest.width);  int y1=(y > dest.y) ? y : dest.y;  int y2=((y + height) < (dest.y + dest.height) ? (y + height) : (dest.y + dest.height));  dest.x=x1;  dest.y=y1;  dest.width=x2 - x1;  dest.height=y2 - y1;  if (dest.width < 0 || dest.height < 0) {    dest.x=dest.y=dest.width=dest.height=0;  }  return dest;}  }
class C{  protected int convertRowToY(int row){  if (row >= getRowCount(0) || row < 0) {    return -1;  }  Rectangle bounds=getCellBounds(list,row,row);  return bounds.y;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.AuthorizationDecisionStatementElement createAuthorizationDecisionStatementElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AuthorizationDecisionStatementElementImpl();}  }
class C{  public SMDiscoveryServiceModelImpl(HttpServletRequest req,String serviceName,Map map) throws AMConsoleException {  super(req,serviceName,map);}  }
class C{  private void newClientWithChangefromServer2() throws Exception {  debugInfo("Starting newClientWithChangefromServer2");  ServerState state=newServerState(firstCSNServer2);  newClientWithChanges(state,firstCSNServer1);  debugInfo("Ending newClientWithChangefromServer2");}  }
class C{  @Override public Call<DirectionsResponse> cloneCall(){  return getCall().clone();}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("ProxiedAuthorizationV1Control(authorizationDN=\"");  buffer.append(rawAuthorizationDN);  buffer.append("\")");}  }
class C{  public ReplicationServerConnectThread(ReplicationServer server){  super("Replication server RS(" + server.getServerId() + ") connector thread");  this.server=server;}  }
class C{  public IntIteratorSpliterator(PrimitiveIterator.OfInt iterator,long size,int characteristics){  this.it=iterator;  this.est=size;  this.characteristics=(characteristics & Spliterator.CONCURRENT) == 0 ? characteristics | Spliterator.SIZED | Spliterator.SUBSIZED : characteristics;}  }
class C{  void parseContent() throws IOException {  Thread curThread=Thread.currentThread();  for (; ; ) {    if (curThread.isInterrupted()) {      curThread.interrupt();      break;    }    int c=ch;    currentBlockStartPos=currentPosition;    if (recent == dtd.script) {      parseScript();      last=makeTag(dtd.getElement("comment"),true);      String str=new String(getChars(0)).trim();      int minLength=START_COMMENT.length() + END_COMMENT.length();      if (str.startsWith(START_COMMENT) && str.endsWith(END_COMMENT) && str.length() >= (minLength)) {        str=str.substring(START_COMMENT.length(),str.length() - END_COMMENT.length());      }      handleComment(str.toCharArray());      endTag(false);      lastBlockStartPos=currentPosition;      continue;    } else {switch (c) {case '<':        parseTag();      lastBlockStartPos=currentPosition;    continue;case '/':  ch=readCh();if ((stack != null) && stack.net) {  endTag(false);  continue;} else if (textpos == 0) {  if (!legalElementContext(dtd.pcdata)) {    error("unexpected.pcdata");  }  if (last.breaksFlow()) {    space=false;  }}break;case -1:return;case '&':if (textpos == 0) {if (!legalElementContext(dtd.pcdata)) {error("unexpected.pcdata");}if (last.breaksFlow()) {space=false;}}char data[]=parseEntityReference();if (textpos + data.length + 1 > text.length) {char newtext[]=new char[Math.max(textpos + data.length + 128,text.length * 2)];System.arraycopy(text,0,newtext,0,text.length);text=newtext;}if (space) {space=false;text[textpos++]=' ';}System.arraycopy(data,0,text,textpos,data.length);textpos+=data.length;ignoreSpace=false;continue;case '\n':ln++;lfCount++;ch=readCh();if ((stack != null) && stack.pre) {break;}if (textpos == 0) {lastBlockStartPos=currentPosition;}if (!ignoreSpace) {space=true;}continue;case '\r':ln++;c='\n';if ((ch=readCh()) == '\n') {ch=readCh();crlfCount++;} else {crCount++;}if ((stack != null) && stack.pre) {break;}if (textpos == 0) {lastBlockStartPos=currentPosition;}if (!ignoreSpace) {space=true;}continue;case '\t':case ' ':ch=readCh();if ((stack != null) && stack.pre) {break;}if (textpos == 0) {lastBlockStartPos=currentPosition;}if (!ignoreSpace) {space=true;}continue;default :if (textpos == 0) {if (!legalElementContext(dtd.pcdata)) {error("unexpected.pcdata");}if (last.breaksFlow()) {space=false;}}ch=readCh();break;}}if (textpos + 2 > text.length) {char newtext[]=new char[text.length + 128];System.arraycopy(text,0,newtext,0,text.length);text=newtext;}if (space) {if (textpos == 0) {lastBlockStartPos--;}text[textpos++]=' ';space=false;}text[textpos++]=(char)c;ignoreSpace=false;}}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public int doStartTag() throws JspException {  reset();  ViewBean vb=getParentViewBean();  java.util.Locale locale;  if (vb instanceof AuthViewBeanBase) {    AuthViewBeanBase ab=(AuthViewBeanBase)vb;    locale=ab.getRequestLocale();  } else {    locale=java.util.Locale.getDefault();  }  String rbName=(String)getValue("BundleName");  String resKey=(String)getValue("ResourceKey");  String resValue;  ResourceBundle rb=AMResourceBundleCache.getInstance().getResBundle(rbName,locale);  try {    resValue=rb.getString(resKey);  } catch (  MissingResourceException ex) {    resValue=resKey;  }  writeOutput(resValue);  return SKIP_BODY;}  }
class C{  private Document createSafeDocument() throws ServletException {  final DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();  try {    dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);  } catch (  ParserConfigurationException e) {    if (logFeatureWarnings.compareAndSet(false,true)) {      Logger.getLogger(PKG_NAME).log(Level.SEVERE,"DocumentBuilderFactory cannot be configured securely");    }  }  dbf.setXIncludeAware(false);  dbf.setNamespaceAware(true);  dbf.setValidating(true);  safeSetFeature(dbf,"http://apache.org/xml/features/disallow-doctype-decl",true);  safeSetFeature(dbf,"http://xml.org/sax/features/external-general-entities",false);  safeSetFeature(dbf,"http://xml.org/sax/features/external-parameter-entities",false);  dbf.setExpandEntityReferences(false);  final DocumentBuilder db;  try {    db=dbf.newDocumentBuilder();  } catch (  ParserConfigurationException e) {    throw new ServletException(e.getMessage());  }  db.setEntityResolver(new SafeEntityResolver());  return db.newDocument();}  }
class C{  private void repaintPath(TreePath path){  if (path != null) {    Rectangle bounds=getPathBounds(tree,path);    if (bounds != null) {      tree.repaint(bounds.x,bounds.y,bounds.width,bounds.height);    }  }}  }
class C{  void dispose(){  try {    saslServer.dispose();  } catch (  final SaslException e) {    logger.traceException(e);  }}  }
class C{  public static Map<String,File> filesInDirectory(String dir,Pattern regex){  return filesInDirectory(dir,regex,false);}  }
class C{  public static String downloadString(String url,int readTimeout,int connectionTimeout) throws MalformedURLException {  return downloadString(new URL(url),null,readTimeout,connectionTimeout,"utf-8");}  }
class C{  @Override public void clear(){  data.clear();  notifyDataSetChanged();}  }
class C{  public UNKNOWN(){  this("");}  }
class C{  public NeedInfoException(){  super(403,UmaConstants.NEED_INFO_ERROR_CODE,"Additional information is required to determine whether the client is authorized to access " + "the requested resource.");}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public NSSet(boolean ordered,NSObject... objects){  this.ordered=ordered;  if (!ordered)   set=new LinkedHashSet<NSObject>(); else   set=new TreeSet<NSObject>();  set.addAll(Arrays.asList(objects));}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  getFQDN();}  }
class C{  public void update(Graphics g){  paint(g);}  }
class C{  public static boolean isXML11Space(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_SPACE) != 0);}  }
class C{  protected void processChars(char[] chars,int offset,int length){}  }
class C{  public void testNotSpecialCase(){  byte aBytes[]={-1,-1,-1,-1};  int aSign=1;  byte rBytes[]={-1,0,0,0,0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.not();  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public Array readArray() throws SQLException {  return (Array)getNextAttribute();}  }
class C{  private TemplateLine parseTemplateLine(String line,String lowerLine,int lineNumber,Branch branch,Template template,Map<String,Tag> tags,List<LocalizableMessage> warnings) throws InitializationException, MakeLDIFException {  int colonPos=lowerLine.indexOf(':');  if (colonPos < 0) {    if (branch == null) {      LocalizableMessage message=ERR_MAKELDIF_NO_COLON_IN_TEMPLATE_LINE.get(lineNumber,template.getName());      throw new MakeLDIFException(message);    } else {      LocalizableMessage message=ERR_MAKELDIF_NO_COLON_IN_BRANCH_EXTRA_LINE.get(lineNumber,branch.getBranchDN());      throw new MakeLDIFException(message);    }  } else   if (colonPos == 0) {    if (branch == null) {      LocalizableMessage message=ERR_MAKELDIF_NO_ATTR_IN_TEMPLATE_LINE.get(lineNumber,template.getName());      throw new MakeLDIFException(message);    } else {      LocalizableMessage message=ERR_MAKELDIF_NO_ATTR_IN_BRANCH_EXTRA_LINE.get(lineNumber,branch.getBranchDN());      throw new MakeLDIFException(message);    }  }  AttributeType attributeType=DirectoryServer.getSchema().getAttributeType(lowerLine.substring(0,colonPos));  int length=line.length();  int pos=colonPos + 1;  boolean valueIsURL=false;  boolean valueIsBase64=false;  if (pos < length) {    if (lowerLine.charAt(pos) == '<') {      valueIsURL=true;      pos++;    } else     if (lowerLine.charAt(pos) == ':') {      valueIsBase64=true;      pos++;    }  }  while (pos < length && lowerLine.charAt(pos) == ' ') {    pos++;  }  if (pos >= length) {    if (branch == null) {      LocalizableMessage message=WARN_MAKELDIF_NO_VALUE_IN_TEMPLATE_LINE.get(lineNumber,template.getName());      warnings.add(message);    } else {      LocalizableMessage message=WARN_MAKELDIF_NO_VALUE_IN_BRANCH_EXTRA_LINE.get(lineNumber,branch.getBranchDN());      warnings.add(message);    }  }  final int PARSING_STATIC_TEXT=0;  final int PARSING_REPLACEMENT_TAG=1;  final int PARSING_ATTRIBUTE_TAG=2;  final int PARSING_ESCAPED_CHAR=3;  int phase=PARSING_STATIC_TEXT;  int previousPhase=PARSING_STATIC_TEXT;  ArrayList<Tag> tagList=new ArrayList<>();  StringBuilder buffer=new StringBuilder();  for (; pos < length; pos++) {    char c=line.charAt(pos);switch (phase) {case PARSING_STATIC_TEXT:switch (c) {case '\\':        phase=PARSING_ESCAPED_CHAR;      previousPhase=PARSING_STATIC_TEXT;    break;case '<':  if (buffer.length() > 0) {    StaticTextTag t=new StaticTextTag();    String[] args=new String[]{buffer.toString()};    t.initializeForBranch(this,branch,args,lineNumber,warnings);    tagList.add(t);    buffer=new StringBuilder();  }phase=PARSING_REPLACEMENT_TAG;break;case '{':if (buffer.length() > 0) {StaticTextTag t=new StaticTextTag();String[] args=new String[]{buffer.toString()};t.initializeForBranch(this,branch,args,lineNumber,warnings);tagList.add(t);buffer=new StringBuilder();}phase=PARSING_ATTRIBUTE_TAG;break;default :buffer.append(c);}break;case PARSING_REPLACEMENT_TAG:switch (c) {case '\\':phase=PARSING_ESCAPED_CHAR;previousPhase=PARSING_REPLACEMENT_TAG;break;case '>':Tag t=parseReplacementTag(buffer.toString(),branch,template,lineNumber,tags,warnings);tagList.add(t);buffer=new StringBuilder();phase=PARSING_STATIC_TEXT;break;default :buffer.append(c);break;}break;case PARSING_ATTRIBUTE_TAG:switch (c) {case '\\':phase=PARSING_ESCAPED_CHAR;previousPhase=PARSING_ATTRIBUTE_TAG;break;case '}':Tag t=parseAttributeTag(buffer.toString(),branch,template,lineNumber,warnings);tagList.add(t);buffer=new StringBuilder();phase=PARSING_STATIC_TEXT;break;default :buffer.append(c);break;}break;case PARSING_ESCAPED_CHAR:buffer.append(c);phase=previousPhase;break;}}if (phase == PARSING_STATIC_TEXT) {if (buffer.length() > 0) {StaticTextTag t=new StaticTextTag();String[] args=new String[]{buffer.toString()};t.initializeForBranch(this,branch,args,lineNumber,warnings);tagList.add(t);}} else {LocalizableMessage message=ERR_MAKELDIF_INCOMPLETE_TAG.get(lineNumber);throw new InitializationException(message);}Tag[] tagArray=new Tag[tagList.size()];tagList.toArray(tagArray);return new TemplateLine(attributeType,lineNumber,tagArray,valueIsURL,valueIsBase64);}  }
class C{  private ServiceTypeManager() throws SSOException {  token=getSSOToken();}  }
class C{  public PathHeader createPathHeader(Address address){  if (address == null)   throw new NullPointerException("null address!");  Path path=new Path();  path.setAddress(address);  return path;}  }
class C{  public final static String formatProtocolVersion(final ProtocolVersion version,LineFormatter formatter){  if (formatter == null)   formatter=BasicLineFormatter.DEFAULT;  return formatter.appendProtocolVersion(null,version).toString();}  }
class C{  public final boolean isLoaded(){  checkIsMapped();  long address=block.toLong();  long size=block.getSize();  if (size == 0) {    return true;  }  try {    int pageSize=(int)Libcore.os.sysconf(_SC_PAGE_SIZE);    int pageOffset=(int)(address % pageSize);    address-=pageOffset;    size+=pageOffset;    int pageCount=(int)((size + pageSize - 1) / pageSize);    byte[] vector=new byte[pageCount];    Libcore.os.mincore(address,size,vector);    for (int i=0; i < vector.length; ++i) {      if ((vector[i] & 1) != 1) {        return false;      }    }    return true;  } catch (  ErrnoException errnoException) {    return false;  }}  }
class C{  public static String unescapeUtf8(String v){  try {    byte[] stringBytes=v.getBytes("UTF-8");    byte[] decodedBytes=new byte[stringBytes.length];    int pos=0;    for (int i=0; i < stringBytes.length; i++) {      if (stringBytes[i] == '\\' && i + 2 < stringBytes.length && StaticUtils.isHexDigit(stringBytes[i + 1]) && StaticUtils.isHexDigit(stringBytes[i + 2])) {        decodedBytes[pos++]=convertHexEncodedUtf8To16BitChars(stringBytes,i);        i+=2;      } else {        decodedBytes[pos++]=stringBytes[i];      }    }    return new String(decodedBytes,0,pos,"UTF-8");  } catch (  UnsupportedEncodingException unexpected) {    throw new RuntimeException("UTF-8 encoding not supported",unexpected);  }}  }
class C{  public static void modifyI18NKeyInSubSchema(String serviceName,String subSchema,String schemaType,String i18NKeyValue) throws UpgradeException {  String classMethod="UpgradeUtils:modifyI18NKeyInSubSchema : ";  try {    ServiceSchema ss=getServiceSchema(serviceName,subSchema,schemaType);    ss.setI18Nkey(i18NKeyValue);  } catch (  SSOException ssoe) {    debug.error(classMethod + "Invalid SSOToken");    throw new UpgradeException("Invalid SSOToken");  }catch (  SMSException sme) {    debug.error(classMethod + "Error setting i18N key : " + serviceName,sme);    throw new UpgradeException("Error setting i18NKey Value");  }}  }
class C{  public final void destroy(){  int ngroupsSnapshot;  ThreadGroup[] groupsSnapshot;synchronized (this) {    checkAccess();    if (destroyed || (nthreads > 0)) {      throw new IllegalThreadStateException();    }    ngroupsSnapshot=ngroups;    if (groups != null) {      groupsSnapshot=Arrays.copyOf(groups,ngroupsSnapshot);    } else {      groupsSnapshot=null;    }    if (parent != null) {      destroyed=true;      ngroups=0;      groups=null;      nthreads=0;      threads=null;    }  }  for (int i=0; i < ngroupsSnapshot; i+=1) {    groupsSnapshot[i].destroy();  }  if (parent != null) {    parent.remove(this);  }}  }
class C{  public boolean hasListeners(String propertyName){  return this.map.hasListeners(propertyName);}  }
class C{  public boolean isDestroyed(){  return destroyed;}  }
class C{  public boolean isCompatibleRaster(Raster raster){  SampleModel sm=raster.getSampleModel();  SinglePixelPackedSampleModel spsm;  if (sm instanceof SinglePixelPackedSampleModel) {    spsm=(SinglePixelPackedSampleModel)sm;  } else {    return false;  }  if (spsm.getNumBands() != getNumComponents()) {    return false;  }  int[] bitMasks=spsm.getBitMasks();  for (int i=0; i < numComponents; i++) {    if (bitMasks[i] != maskArray[i]) {      return false;    }  }  return (raster.getTransferType() == transferType);}  }
class C{  public Set searchStaticGroups(String wildcard,Map avPairs,int level) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),getSearchFilter(AMObject.GROUP),wildcard,avPairs,level);}  }
class C{  public String toString(final boolean deep){  final StringBuffer buf=new StringBuffer();  if (deep) {    buf.append(getPriviligeId());    buf.append(",");  }  buf.append(getNumber());  buf.append(" : ");  buf.append(getFullName());  if (deep && this.childs.size() > 0) {    buf.append(this.childs.toString());  }  return buf.toString();}  }
class C{  @DataProvider(name="passwordPolicyResponseControl") public Object[][] createPasswordPolicyResponseControlData(){  return new Object[][]{{true,-1},{false,-1},{true,0},{false,0}};}  }
class C{  public int availablePermits(){  return sync.getPermits();}  }
class C{  protected void deiconifyFrame(JInternalFrame f){  if (!f.isMaximum()) {    BasicLookAndFeel.playSound(frame,"InternalFrame.restoreUpSound");  }  getDesktopManager().deiconifyFrame(f);}  }
class C{  private CipherKeyEntry importCipherKeyEntry(final String keyIDString,final String transformation,final SecretKey secretKey,final int secretKeyLengthBits,final int ivLengthBits,final boolean isCompromised) throws CryptoManagerException {  Reject.ifNull(keyIDString,transformation,secretKey);  Reject.ifFalse(0 <= ivLengthBits);  final KeyEntryID keyID=new KeyEntryID(keyIDString);  CipherKeyEntry keyEntry=getCipherKeyEntryOrNull(keyID);  if (null != keyEntry) {    if (!keyEntry.getType().equals(transformation) || keyEntry.getKeyLengthBits() != secretKeyLengthBits || keyEntry.getIVLengthBits() != ivLengthBits) {      throw new CryptoManagerException(ERR_CRYPTOMGR_IMPORT_KEY_ENTRY_FIELD_MISMATCH.get(keyIDString));    }    if (isCompromised && !keyEntry.isCompromised()) {      keyEntry.setIsCompromised();    }    return keyEntry;  }  keyEntry=new CipherKeyEntry(keyID,transformation,secretKey,secretKeyLengthBits,ivLengthBits,isCompromised);  byte[] iv=null;  if (0 < ivLengthBits) {    iv=new byte[ivLengthBits / Byte.SIZE];    secureRandom.nextBytes(iv);  }  getCipher(keyEntry,Cipher.DECRYPT_MODE,iv);  cipherKeyEntryLock.lock();  try {    cipherKeyEntryCache.put(keyEntry.getKeyID(),keyEntry);    mostRecentCipherKeys.put(getKeyFullSpec(transformation,secretKeyLengthBits),keyEntry);  }  finally {    cipherKeyEntryLock.unlock();  }  return keyEntry;}  }
class C{  private static String addComplianceModeFilters(String originalFilter,int objectType,boolean ignoreComplianceFilter){  try {    String modifiedFilter=originalFilter;    if (!ignoreComplianceFilter && ComplianceServicesImpl.isComplianceUserDeletionEnabled()) {      StringBuilder sb=new StringBuilder();switch (objectType) {case AMObject.USER:        sb.append("(&").append(originalFilter);      sb.append("(!(inetuserstatus=deleted)))");    modifiedFilter=sb.toString();  break;case AMObject.ORGANIZATION:sb.append("(&").append(originalFilter);sb.append("(!(inetdomainstatus=deleted)))");modifiedFilter=sb.toString();break;case AMObject.STATIC_GROUP:case AMObject.DYNAMIC_GROUP:case AMObject.ASSIGNABLE_DYNAMIC_GROUP:case AMObject.GROUP:sb.append("(&").append(originalFilter);sb.append("(!(inetgroupstatus=deleted)))");modifiedFilter=sb.toString();break;}if (debug.messageEnabled()) {debug.message("SearchFilterManager." + "" + "addComplainceModeFilters() - objectType = " + objectType + ", Original Filter = "+ originalFilter+ ", Modified Filter = "+ modifiedFilter);}return modifiedFilter;}} catch (AMException ae) {if (debug.warningEnabled()) {debug.warning("SearchFilterManager." + "addComplianceModeFilters() Unable to determine if " + "\"User Compliance deletion mode\" is enabled or "+ "disabled. Exception : ",ae);}}return originalFilter;}  }
class C{  public Condition createCondition(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.CONDITION);  if (obj == null) {    return new ConditionImpl();  } else {    return (Condition)obj;  }}  }
class C{  private Object writeReplace(){  return new Ser(Ser.MONTH_DAY_TYPE,this);}  }
class C{  public static <T>List<T> nCopies(final int length,T object){  return new CopiesList<T>(length,object);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.replaceData(0,50,"2600");  childData=child.getData();  assertEquals("characterdataReplaceDataExceedsLengthOfDataAssert","2600",childData);}  }
class C{  public boolean implies(Permission permission){  if (!(permission instanceof FilePermission))   return false;  FilePermission fp=(FilePermission)permission;  int desired=fp.getMask();  int effective=0;  int needed=desired;synchronized (this) {    int len=perms.size();    for (int i=0; i < len; i++) {      FilePermission x=(FilePermission)perms.get(i);      if (((needed & x.getMask()) != 0) && x.impliesIgnoreMask(fp)) {        effective|=x.getMask();        if ((effective & desired) == desired)         return true;        needed=(desired ^ effective);      }    }  }  return false;}  }
class C{  public LogConfigurationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public SIPHeader parse() throws ParseException {  SupportedList supportedList=new SupportedList();  if (debug)   dbg_enter("SupportedParser.parse");  try {    Token token;    headerName(TokenTypes.SUPPORTED);    this.lexer.SPorHT();    Supported supported=new Supported();    supported.setHeaderName(SIPHeaderNames.SUPPORTED);    if (lexer.lookAhead(0) != '\n') {      this.lexer.match(TokenTypes.ID);      token=lexer.getNextToken();      supported.setOptionTag(token.getTokenValue());      this.lexer.SPorHT();    }    supportedList.add(supported);    while (lexer.lookAhead(0) == ',') {      this.lexer.match(',');      this.lexer.SPorHT();      supported=new Supported();      this.lexer.match(TokenTypes.ID);      token=lexer.getNextToken();      supported.setOptionTag(token.getTokenValue());      this.lexer.SPorHT();      supportedList.add(supported);    }  }  finally {    if (debug)     dbg_leave("SupportedParser.parse");  }  return supportedList;}  }
class C{  void refreshFinish(int width,int height){  mWXSDKInstance.onRefreshSuccess(width,height);}  }
class C{  public void addParent(Permission perm,boolean value){  perm.getChildren().put(getName(),value);  perm.recalculatePermissibles();}  }
class C{  public final void testPSSParameterSpec0202(){  try {    new PSSParameterSpec(null,"MGF1",MGF1ParameterSpec.SHA1,20,1);    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  public Entry readEntry() throws IOException, LDIFException {  return readEntry(importConfig.validateSchema());}  }
class C{  public boolean isRequired(){  return required;}  }
class C{  public BoringLayout(LayoutContext layoutContext,CharSequence source,TextPaint paint,int outerwidth,Alignment align,float spacingmult,float spacingadd,Metrics metrics,boolean includepad){  super(layoutContext,source,paint,outerwidth,align,spacingmult,spacingadd);  mEllipsizedWidth=outerwidth;  mEllipsizedStart=0;  mEllipsizedCount=0;  init(layoutContext,source,paint,outerwidth,align,spacingmult,spacingadd,metrics,includepad,true);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap notations;  Notation notation;  String nullNS=null;  doc=(Document)load("staffNS",false);  docType=doc.getDoctype();  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  notation=(Notation)notations.getNamedItemNS(nullNS,"notation1");  assertNull("notationNull",notation);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.ExtensionType createExtensionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.ExtensionTypeImpl();}  }
class C{  public boolean isBase64(){  return isBase64;}  }
class C{  @Override public long end() throws IOException {  if (compressionStream == null) {    compressionStream=new GZIPOutputStream(fakeOutputStream,true);  }  compressionStream.finish();  compressionStream.close();  return ((OutputFilter)buffer).end();}  }
class C{  @Override public List<IndexCreatedEvent> readAll(){  BoundStatement bs=new BoundStatement(readAllStmt);  return (marshalAll(getSession().execute(bs)));}  }
class C{  public TaskClientException(OpenDsException cause){  super(cause);}  }
class C{  @SuppressWarnings("unused") static <T>Promise<T> blockingPromise(Class<T> cls,final Duration duration){  return new BlockingPromise<>(duration);}  }
class C{  public void subscribe(final Observable<M> observable,final boolean pullToRefresh){  if (isViewAttached()) {    getView().showLoading(pullToRefresh);  }  unsubscribe();  subscriber=new RxSubscriber(pullToRefresh);  observable.subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(subscriber);}  }
class C{  public CaptureHandler(final Handler delegate,final MessageCapture capture,final Set<CapturePoint> points){  this.delegate=delegate;  this.capture=capture;  this.points=checkNotNull(points);}  }
class C{  public AndroidGeocoder(Context context,Locale locale){  this.context=context;  this.locale=locale;}  }
class C{  @BeforeTest(groups={"cli"}) public void suiteSetup() throws CLIException {  Map<String,Object> env=new HashMap<String,Object>();  env.put(CLIConstants.SYS_PROPERTY_COMMAND_NAME,"amadm");  env.put(CLIConstants.SYS_PROPERTY_DEFINITION_FILES,"com.sun.identity.cli.AccessManager");  env.put(CLIConstants.SYS_PROPERTY_OUTPUT_WRITER,outputWriter);  cmdManager=new CommandManager(env);}  }
class C{  public Set searchGroupContainers(String wildcard,Map avPairs,int level) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP_CONTAINER),getSearchFilter(AMObject.GROUP_CONTAINER),wildcard,avPairs,level);}  }
class C{  public String addListener(ServiceListener listener){  try {    validateSCM();    return (scm.addListener(token,listener));  } catch (  Exception e) {    SMSEntry.debug.error("ServiceConfigManager:addListener exception" + " Service Name: " + serviceName,e);  }  return (null);}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  Document doc=getDocument();  Element map=getElement();  int lineIndex=map.getElementIndex(pos);  if (lineIndex < 0) {    return lineToRect(a,0);  }  Rectangle lineArea=lineToRect(a,lineIndex);  tabBase=lineArea.x;  Element line=map.getElement(lineIndex);  int p0=line.getStartOffset();  Segment s=SegmentCache.getSharedSegment();  doc.getText(p0,pos - p0,s);  int xOffs=Utilities.getTabbedTextWidth(s,metrics,tabBase,this,p0);  SegmentCache.releaseSharedSegment(s);  lineArea.x+=xOffs;  lineArea.width=1;  lineArea.height=metrics.getHeight();  return lineArea;}  }
class C{  protected void adjustChildIndexs(int index,int amount){  for (int counter=index, maxCounter=getChildCount(); counter < maxCounter; counter++) {    ((FHTreeStateNode)getChildAt(counter)).childIndex+=amount;  }}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  inviteReceived=true;  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme: got an Invite sending Trying");    Response response=messageFactory.createResponse(Response.TRYING,request);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);    }    dialog=st.getDialog();    st.sendResponse(response);    Response okResponse=messageFactory.createResponse(PRACK_CODE,request);    ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    this.toTag="4321";    toHeader.setTag(toTag);    this.inviteTid=st;    this.inviteRequest=request;    logger.info("sending reliable provisional response.");    RequireHeader requireHeader=headerFactory.createRequireHeader("100rel");    okResponse.addHeader(requireHeader);    dialog.sendReliableProvisionalResponse(okResponse);  } catch (  Exception ex) {    ex.printStackTrace();    TestHarness.fail(ex.getMessage());  }}  }
class C{  public TestHttpClient(){  this(HttpClientBuilder.create());}  }
class C{  public void rebind_context(org.omg.CosNaming.NameComponent[] n,org.omg.CosNaming.NamingContext nc) throws org.omg.CosNaming.NamingContextPackage.NotFound, org.omg.CosNaming.NamingContextPackage.CannotProceed, org.omg.CosNaming.NamingContextPackage.InvalidName {  org.omg.CORBA.portable.InputStream $in=null;  try {    org.omg.CORBA.portable.OutputStream $out=_request("rebind_context",true);    org.omg.CosNaming.NameHelper.write($out,n);    org.omg.CosNaming.NamingContextHelper.write($out,nc);    $in=_invoke($out);    return;  } catch (  org.omg.CORBA.portable.ApplicationException $ex) {    $in=$ex.getInputStream();    String _id=$ex.getId();    if (_id.equals("IDL:omg.org/CosNaming/NamingContext/NotFound:1.0"))     throw org.omg.CosNaming.NamingContextPackage.NotFoundHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0"))     throw org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0"))     throw org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.read($in); else     throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException $rm) {    rebind_context(n,nc);  } finally {    _releaseReply($in);  }}  }
class C{  public UnknownObjectException(String s){  super(s);}  }
class C{  public void makeImmutable(){  if (isMutable) {    isMutable=false;  }}  }
class C{  public DefaultTableColumnModel(){  super();  tableColumns=new Vector<TableColumn>();  setSelectionModel(createSelectionModel());  setColumnMargin(1);  invalidateWidthCache();  setColumnSelectionAllowed(false);}  }
class C{  @Override protected void destroyInternal() throws LifecycleException {  for (  Realm realm : realms) {    if (realm instanceof Lifecycle) {      ((Lifecycle)realm).destroy();    }  }  super.destroyInternal();}  }
class C{  public UnsavedChangesDialog.Result checkUnsavedChanges(){  UnsavedChangesDialog.Result result;  if (vlvIndexPanel.isVisible()) {    result=vlvIndexPanel.checkUnsavedChanges();  } else   if (standardIndexPanel.isVisible()) {    result=standardIndexPanel.checkUnsavedChanges();  } else {    result=UnsavedChangesDialog.Result.DO_NOT_SAVE;  }  return result;}  }
class C{  void unbind(){}  }
class C{  public static IntroFragment newInstance(String title,int titleColor,String description,int descriptionColor,int resourceId,int resourceIdType){  Bundle args=new Bundle();  args.putString(TITLE,title);  args.putInt(TITLE_COLOR,titleColor);  args.putString(DESCRIPTION,description);  args.putInt(DESCRIPTION_COLOR,descriptionColor);  args.putInt(RESOURCE_ID_TYPE,resourceIdType);  args.putInt(resourceIdType == RESOURCE_TYPE_LAYOUT ? LAYOUT_ID : DRAWABLE_ID,resourceId);  IntroFragment fragment=new IntroFragment();  fragment.setArguments(args);  return fragment;}  }
class C{  public boolean match(String rawdata) throws MimeTypeParseException {  if (rawdata == null)   return false;  return match(new MimeType(rawdata));}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  Signature sig;  try {    sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(Base64.decode(signature))) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");  }  return false;}  }
class C{  private boolean containsFault(SOAPMessage msg){  try {    SOAPPart sp=msg.getSOAPPart();    SOAPEnvelope se=sp.getEnvelope();    SOAPBody sb=se.getBody();    return (sb.hasFault());  } catch (  Exception e) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("Error in containFault!");    }    return false;  }}  }
class C{  public <M extends Configuration>void deregisterAddListener(OptionalRelationDefinition<?,M> d,ConfigurationAddListener<M> listener){  validateRelationDefinition(d);  DN baseDN=DNBuilder.create(path,d).parent();  deregisterAddListener(baseDN,listener);}  }
class C{  public ConversationFactory withTimeout(int timeoutSeconds){  return withConversationCanceller(new InactivityConversationCanceller(plugin,timeoutSeconds));}  }
class C{  @Override public void toString(StringBuilder buffer,int indent){  StringBuilder indentBuf=new StringBuilder(indent);  for (int i=0; i < indent; i++) {    indentBuf.append(' ');  }  buffer.append(indentBuf).append("Bind Request").append(EOL);  buffer.append(indentBuf).append("  Protocol Version:  ").append(protocolVersion).append(EOL);  buffer.append(indentBuf).append("  DN:  ");  if (dn != null) {    buffer.append(dn);  }  buffer.append(EOL);  if (authenticationType == AuthenticationType.SIMPLE) {    buffer.append(indentBuf).append("  Simple Password:  ").append(simplePassword).append(EOL);  } else {    buffer.append(indentBuf).append("  SASL Mechanism:  ").append(saslMechanism).append(EOL);    if (saslCredentials != null) {      buffer.append(indentBuf).append("  SASL Credentials:").append(EOL);      buffer.append(saslCredentials.toHexPlusAsciiString(indent + 4));    }  }}  }
class C{  private void updateEnablingState(){  boolean enableSSL=cbEnableSSL.isSelected();  boolean enableStartTLS=cbEnableStartTLS.isSelected();  boolean useSSL=enableSSL || enableStartTLS;  if (useSSL && !rbUseSelfSignedCertificate.isSelected() && !rbUseExistingCertificate.isSelected()) {    rbUseSelfSignedCertificate.setSelected(true);  }  if (useSSL && rbUseExistingCertificate.isSelected() && !rbJKS.isSelected()&& !rbJCEKS.isSelected()&& !rbPKCS11.isSelected()&& !rbPKCS12.isSelected()) {    rbJKS.setSelected(true);  }  tfPort.setEnabled(enableSSL);  rbUseSelfSignedCertificate.setEnabled(useSSL);  rbUseExistingCertificate.setEnabled(useSSL);  lKeystoreType.setEnabled(rbUseExistingCertificate.isSelected() && useSSL);  rbJKS.setEnabled(rbUseExistingCertificate.isSelected() && useSSL);  rbJCEKS.setEnabled(rbUseExistingCertificate.isSelected() && useSSL);  rbPKCS11.setEnabled(rbUseExistingCertificate.isSelected() && useSSL);  rbPKCS12.setEnabled(rbUseExistingCertificate.isSelected() && useSSL);  lKeystorePath.setEnabled(rbUseExistingCertificate.isSelected() && useSSL);  tfKeystorePath.setEnabled(rbUseExistingCertificate.isSelected() && useSSL);  browseButton.setEnabled(rbUseExistingCertificate.isSelected() && useSSL);  lKeystorePwd.setEnabled(rbUseExistingCertificate.isSelected() && useSSL);  tfKeystorePwd.setEnabled(rbUseExistingCertificate.isSelected() && useSSL);  lKeystorePath.setVisible(!rbPKCS11.isSelected());  tfKeystorePath.setVisible(!rbPKCS11.isSelected());  browseButton.setVisible(!rbPKCS11.isSelected());}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  backTrail();  forwardToRealmView(event);}  }
class C{  public void addChangingListener(OnWheelChangedListener listener){  changingListeners.add(listener);}  }
class C{  public void runTest() throws Throwable {  Document doc;  String value="#$%&'()@";  Element element;  doc=(Document)load("staffNS",true);  element=doc.createElementNS("http://www.w3.org/DOM/Test/L2","dom:elem");{    boolean success=false;    try {      element.setPrefix(value);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  public void testClearBitZero(){  byte aBytes[]={0};  int aSign=0;  int number=0;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public SdpFactoryException(String msg){  super(msg);}  }
class C{  public com.sun.identity.liberty.ws.meta.jaxb.ExtensionElement createExtensionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.meta.jaxb.impl.ExtensionElementImpl();}  }
class C{  public boolean isSpecialUser(String dn){  boolean isSpecialUser=false;  String nDN=DNUtils.normalizeDN(dn);  if ((nDN != null) && (specialUser != null)) {    StringTokenizer st=new StringTokenizer(specialUser,"|");    while (st.hasMoreTokens()) {      String specialAdminDN=st.nextToken();      if (specialAdminDN != null) {        String normSpecialAdmin=DNUtils.normalizeDN(specialAdminDN);        if (debug.messageEnabled()) {          debug.message("normalized special dn is :" + normSpecialAdmin);        }        if (nDN.equals(normSpecialAdmin)) {          isSpecialUser=true;          break;        }      }    }  }  if (debug.messageEnabled()) {    debug.message("is Special User :" + isSpecialUser);  }  return isSpecialUser;}  }
class C{  public boolean encryptAssertion(){  return encryptAssertion;}  }
class C{  void handleEOD(EncoderContext context,StringBuilder buffer){  int unwritten=(buffer.length() / 3) * 2;  int rest=buffer.length() % 3;  int curCodewordCount=context.getCodewordCount() + unwritten;  context.updateSymbolInfo(curCodewordCount);  int available=context.getSymbolInfo().getDataCapacity() - curCodewordCount;  if (rest == 2) {    buffer.append('\0');    while (buffer.length() >= 3) {      writeNextTriplet(context,buffer);    }    if (context.hasMoreCharacters()) {      context.writeCodeword(HighLevelEncoder.C40_UNLATCH);    }  } else   if (available == 1 && rest == 1) {    while (buffer.length() >= 3) {      writeNextTriplet(context,buffer);    }    if (context.hasMoreCharacters()) {      context.writeCodeword(HighLevelEncoder.C40_UNLATCH);    }    context.pos--;  } else   if (rest == 0) {    while (buffer.length() >= 3) {      writeNextTriplet(context,buffer);    }    if (available > 0 || context.hasMoreCharacters()) {      context.writeCodeword(HighLevelEncoder.C40_UNLATCH);    }  } else {    throw new IllegalStateException("Unexpected case. Please report!");  }  context.signalEncoderChange(HighLevelEncoder.ASCII_ENCODATION);}  }
class C{  public static List<String> readAllLines(Path path,Charset cs) throws IOException {  try (BufferedReader reader=newBufferedReader(path,cs)){    List<String> result=new ArrayList<>();    for (; ; ) {      String line=reader.readLine();      if (line == null)       break;      result.add(line);    }    return result;  } }  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  if (documentHandler != null)   documentHandler.ignorableWhitespace(ch,start,length);}  }
class C{  public final void writeUTF(String str) throws IOException {  writeUTF(str,this);}  }
class C{  public boolean isHorizontal(){  return (orientation & HORIZ_BIT) != 0;}  }
class C{  int compare(NodeCompareElem n1,NodeCompareElem n2,int kIndex,XPathContext support) throws TransformerException {  int result=0;  NodeSortKey k=(NodeSortKey)m_keys.elementAt(kIndex);  if (k.m_treatAsNumbers) {    double n1Num, n2Num;    if (kIndex == 0) {      n1Num=((Double)n1.m_key1Value).doubleValue();      n2Num=((Double)n2.m_key1Value).doubleValue();    } else     if (kIndex == 1) {      n1Num=((Double)n1.m_key2Value).doubleValue();      n2Num=((Double)n2.m_key2Value).doubleValue();    } else {      XObject r1=k.m_selectPat.execute(m_execContext,n1.m_node,k.m_namespaceContext);      XObject r2=k.m_selectPat.execute(m_execContext,n2.m_node,k.m_namespaceContext);      n1Num=r1.num();      n2Num=r2.num();    }    if ((n1Num == n2Num) && ((kIndex + 1) < m_keys.size())) {      result=compare(n1,n2,kIndex + 1,support);    } else {      double diff;      if (Double.isNaN(n1Num)) {        if (Double.isNaN(n2Num))         diff=0.0; else         diff=-1;      } else       if (Double.isNaN(n2Num))       diff=1; else       diff=n1Num - n2Num;      result=(int)((diff < 0.0) ? (k.m_descending ? 1 : -1) : (diff > 0.0) ? (k.m_descending ? -1 : 1) : 0);    }  } else {    CollationKey n1String, n2String;    if (kIndex == 0) {      n1String=(CollationKey)n1.m_key1Value;      n2String=(CollationKey)n2.m_key1Value;    } else     if (kIndex == 1) {      n1String=(CollationKey)n1.m_key2Value;      n2String=(CollationKey)n2.m_key2Value;    } else {      XObject r1=k.m_selectPat.execute(m_execContext,n1.m_node,k.m_namespaceContext);      XObject r2=k.m_selectPat.execute(m_execContext,n2.m_node,k.m_namespaceContext);      n1String=k.m_col.getCollationKey(r1.str());      n2String=k.m_col.getCollationKey(r2.str());    }    result=n1String.compareTo(n2String);    if (k.m_caseOrderUpper) {      String tempN1=n1String.getSourceString().toLowerCase();      String tempN2=n2String.getSourceString().toLowerCase();      if (tempN1.equals(tempN2)) {        result=result == 0 ? 0 : -result;      }    }    if (k.m_descending) {      result=-result;    }  }  if (0 == result) {    if ((kIndex + 1) < m_keys.size()) {      result=compare(n1,n2,kIndex + 1,support);    }  }  if (0 == result) {    DTM dtm=support.getDTM(n1.m_node);    result=dtm.isNodeAfter(n1.m_node,n2.m_node) ? -1 : 1;  }  return result;}  }
class C{  public double board_to_dsn(double p_val){  return p_val / scale_factor;}  }
class C{  public static boolean checkNormalize(MessageBytes uriMB){  CharChunk uriCC=uriMB.getCharChunk();  char[] c=uriCC.getChars();  int start=uriCC.getStart();  int end=uriCC.getEnd();  int pos=0;  for (pos=start; pos < end; pos++) {    if (c[pos] == '\\') {      return false;    }    if (c[pos] == 0) {      return false;    }  }  for (pos=start; pos < (end - 1); pos++) {    if (c[pos] == '/') {      if (c[pos + 1] == '/') {        return false;      }    }  }  if (((end - start) >= 2) && (c[end - 1] == '.')) {    if ((c[end - 2] == '/') || ((c[end - 2] == '.') && (c[end - 3] == '/'))) {      return false;    }  }  if (uriCC.indexOf("/./",0,3,0) >= 0) {    return false;  }  if (uriCC.indexOf("/../",0,4,0) >= 0) {    return false;  }  return true;}  }
class C{  public void testPosPosFirstShorter(){  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  int aSign=1;  int bSign=1;  byte rBytes[]={0,-128,9,56,100,-2,-3,-3,-3,95,15,-9,39,58,-69,87,87,-17,-73};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static Tailer create(File file,TailerListener listener,long delayMillis,boolean end,boolean reOpen){  return create(file,listener,delayMillis,end,reOpen,DEFAULT_BUFSIZE);}  }
class C{  public LDIFChangeRecordWriter(final List<String> ldifLines){  super(ldifLines);}  }
class C{  public static String colon(String self,String colon){  return COLON.matcher(self).replaceAll(colon);}  }
class C{  public String toString(){  return Boolean.toString(get());}  }
class C{  public void process(String name,Vector elems,Hashtable atts,String pcdata){  str=pcdata;}  }
class C{  private static void sendNotifications(Set<Subscription> subscribers,DN dn,int event){  if (CollectionUtils.isEmpty(subscribers)) {    return;  }  for (  Subscription no : subscribers) {    try {      no.notifyEvent(dn,event);    } catch (    Exception e) {      debug.error("SMSEvent notification: Unable to send notification: ",e);    }  }}  }
class C{  public String toXMLString() throws ParseException, FSMsgException {  return toXMLString(true,false);}  }
class C{  public JRadioButtonMenuItem(Icon icon,boolean selected){  this(null,icon,selected);}  }
class C{  public static void executeRandomModifiableVariableModification(WorkflowTrace workflow,ConnectionEnd connectionEnd,String pattern){  Field f=null;  ModifiableVariableHolder holder=null;  while (f == null) {    holder=getRandomModifiableVariableHolder(workflow,connectionEnd);    Field randomField=holder.getRandomModifiableVariableField();    if (pattern == null || randomField.getName().toLowerCase().contains(pattern)) {      f=randomField;    }  }  LOGGER.debug("Executing random variable modification on field {} in {}",f,holder);  executeModifiableVariableModification(holder,f);}  }
class C{  public void write(String str,int off,int len){synchronized (lock) {    int newcount=count + len;    if (newcount > buf.length) {      buf=Arrays.copyOf(buf,Math.max(buf.length << 1,newcount));    }    str.getChars(off,off + len,buf,count);    count=newcount;  }}  }
class C{  void delete() throws ChangelogException {  exclusiveLock.lock();  try {    final boolean isDeleted=logfile.delete();    if (!isDeleted) {      throw new ChangelogException(ERR_CHANGELOG_UNABLE_TO_DELETE_LOG_FILE.get(getPath()));    }  }  finally {    exclusiveLock.unlock();  }}  }
class C{  public PrefixFileFilter(String prefix){  this(prefix,IOCase.SENSITIVE);}  }
class C{  private void processInboundRename(final PreParseAddOperation addOperation){  final List<RawAttribute> inAttrs=new LinkedList<>(addOperation.getRawAttributes());  final ListIterator<RawAttribute> iterator=inAttrs.listIterator();  while (iterator.hasNext()) {    final RawAttribute rawAttr=iterator.next();    final String fromName=toLowerCase(rawAttr.getAttributeType().trim());    final String toName=attributesToRename.get(fromName);    if (toName != null) {      if (logger.isTraceEnabled()) {        logger.trace("AttributeCleanupPlugin renaming '%s' to '%s'",rawAttr.getAttributeType(),toName);      }      rawAttr.setAttributeType(toName);    }  }  addOperation.setRawAttributes(inAttrs);}  }
class C{  public GSERParser skipSP() throws GSERException {  skip(GSER_SP);  return this;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.SubjectStatementAbstractType createSubjectStatementAbstractType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.SubjectStatementAbstractTypeImpl();}  }
class C{  @Override public Foo createFoo(long fooId){  return fooPersistence.create(fooId);}  }
class C{  public int hashCode(){  int code=0;  Object[] tbl=attributes;  for (int i=1; i < tbl.length; i+=2) {    code^=tbl[i].hashCode();  }  return code;}  }
class C{  public LoginConfiguration indexValue(String indexValue){switch (indexType) {case COMPOSITE:{      httpRequest=new RestAuthHttpRequestWrapper(httpRequest);      ((RestAuthHttpRequestWrapper)httpRequest).addParameter(AuthClientUtils.COMPOSITE_ADVICE,indexValue);    }}this.indexValue=indexValue;return this;}  }
class C{  public String post(String url,String json,Map<String,String> headers,final int expectedStatusCode){  return post(url,json,headers,Collections.<String,String>emptyMap(),expectedStatusCode);}  }
class C{  private JsonValue createJsonMessage(String key,Object message){  JsonValue result=new JsonValue(new LinkedHashMap<String,Object>(1));  try {    result.put(key,message);    return result;  } catch (  final Exception e) {    throw new JsonValueException(result);  }}  }
class C{  public static void main(String[] args){  try {    ProgressDialog dlg=new ProgressDialog(new JFrame());    dlg.pack();    dlg.setVisible(true);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public AuthStatus validateRequest(MessageInfo messageInfo,Subject clientSubject) throws AuthException {  return serverAuthModule.validateRequest(messageInfo,clientSubject,null);}  }
class C{  public InvalidDataTypeException(String msg){  super(msg);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodehaschildnodes.class,args);}  }
class C{  @Override public TagResult generateValue(TemplateEntry templateEntry,TemplateValue templateValue){  int selectedWeight=random.nextInt(cumulativeWeight) + 1;  for (int i=0; i < valueWeights.length; i++) {    if (selectedWeight <= valueWeights[i]) {      templateValue.getValue().append(valueStrings[i]);      break;    }  }  return TagResult.SUCCESS_RESULT;}  }
class C{  public boolean hasString(){  return true;}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.DigestMethodElement createDigestMethodElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.DigestMethodElementImpl();}  }
class C{  public void reset(){  for (int i=0; i < mAnimators.size(); i++) {    mAnimators.get(mAnimators.keyAt(i)).cancel();  }  mAnimators.clear();  mFirstAnimatedPosition=-1;  mLastAnimatedPosition=-1;  mAnimationStartMillis=-1;  mShouldAnimate=true;}  }
class C{  private int next(int index){  return (index + 2) & mask;}  }
class C{  public void start(){synchronized (startStopLock) {    if (!shutdown) {      return;    }    shutdown=false;    this.rcvWindow=getMaxRcvWindow();    connectAsDataServer();  }}  }
class C{  public ServerContextBuilder withConfigurationBootstrapped() throws InitializationException {  final ConfigurationHandler configHandler=ConfigurationHandler.bootstrapConfiguration(serverContext);  final ServerManagementContext serverManagementContext=new ServerManagementContext(configHandler);  when(serverContext.getServerManagementContext()).thenReturn(serverManagementContext);  when(serverContext.getRootConfig()).thenReturn(serverManagementContext.getRootConfiguration());  return this;}  }
class C{  protected int processChar(){  return 0;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  IOutput outputWriter=getOutputWriter();  try {    String[] params={realm,serviceName};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_GET_REALM_SERVICE_ATTR_VALUES",params);    OrganizationConfigManager ocm=new OrganizationConfigManager(adminSSOToken,realm);    Map attributeValues=ocm.getAttributes(serviceName);    if ((attributeValues != null) && !attributeValues.isEmpty()) {      outputWriter.printlnMessage(FormatUtils.printAttributeValues(getResourceString("get-attr-values-of-realm-result"),attributeValues));    } else {      outputWriter.printlnMessage(MessageFormat.format(getResourceString("get-attr-values-of-realm-no-values"),(Object[])params));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_GET_REALM_SERVICE_ATTR_VALUES",params);  } catch (  SMSException e) {    String[] args={realm,e.getMessage()};    debugError("RealmAttributeValues.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_REALM_SERVICE_ATTR_VALUES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public synchronized BukkitTask runTaskLater(Plugin plugin,long delay) throws IllegalArgumentException, IllegalStateException {  checkState();  return setupId(Bukkit.getScheduler().runTaskLater(plugin,(Runnable)this,delay));}  }
class C{  private void serveIncomingConnections() throws IOException, DirectoryException {  int selectorState=selector.select();  for (Iterator<SelectionKey> iterator=selector.selectedKeys().iterator(); iterator.hasNext(); ) {    SelectionKey key=iterator.next();    iterator.remove();    if (key.isAcceptable()) {      ServerSocketChannel serverChannel=(ServerSocketChannel)key.channel();      SocketChannel clientChannel=serverChannel.accept();      if (clientChannel != null) {        acceptConnection(clientChannel);      }    }    if (selectorState == 0 && enabled && !shutdownRequested && logger.isTraceEnabled()) {      logger.trace("Selector.select() returned 0. " + "Selected Keys: %d, Interest Ops: %d, Ready Ops: %d ",selector.selectedKeys().size(),key.interestOps(),key.readyOps());    }  }}  }
class C{  public NSNumber(long l){  doubleValue=longValue=l;  type=INTEGER;}  }
class C{  @Override public void storeChildren(PrintWriter aWriter,int indent,Object aChannel,StoreDescription parentDesc) throws Exception {  if (aChannel instanceof Channel) {    Channel channel=(Channel)aChannel;    if (channel instanceof ManagedChannel) {      ManagedChannel managedChannel=(ManagedChannel)channel;      MembershipService service=managedChannel.getMembershipService();      if (service != null) {        storeElement(aWriter,indent,service);      }      ChannelSender sender=managedChannel.getChannelSender();      if (sender != null) {        storeElement(aWriter,indent,sender);      }      ChannelReceiver receiver=managedChannel.getChannelReceiver();      if (receiver != null) {        storeElement(aWriter,indent,receiver);      }      Iterator<ChannelInterceptor> interceptors=managedChannel.getInterceptors();      while (interceptors.hasNext()) {        ChannelInterceptor interceptor=interceptors.next();        storeElement(aWriter,indent,interceptor);      }    }  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.ReferenceType createReferenceType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.ReferenceTypeImpl();}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy,int duration){  mMode=SCROLL_MODE;  mFinished=false;  mDuration=duration;  mStartTime=AnimationUtils.currentAnimationTimeMillis();  mStartX=startX;  mStartY=startY;  mFinalX=startX + dx;  mFinalY=startY + dy;  mDeltaX=dx;  mDeltaY=dy;  mDurationReciprocal=1.0f / (float)mDuration;}  }
class C{  public void createServer(String name) throws AMConsoleException {  SSOToken ssoToken=getUserSSOToken();  String[] param={name};  logEvent("ATTEMPT_CREATE_SERVER",param);  try {    String svrConfigXML=ServerConfiguration.getServerConfigXML(ssoToken,SystemProperties.getServerInstanceName());    ServerConfiguration.createServerInstance(ssoToken,name,Collections.EMPTY_MAP,svrConfigXML);    logEvent("SUCCEED_CREATE_SERVER",param);  } catch (  UnknownPropertyNameException e) {  }catch (  SSOException e) {    String[] params={name,e.getMessage()};    logEvent("SSO_EXCEPTION_CREATE_SERVER",params);    throw new AMConsoleException(getErrorString(e));  }catch (  ConfigurationException e) {    String[] params={name,e.getMessage()};    logEvent("CONFIGURATION_EXCEPTION_CREATE_SERVER",params);    throw new AMConsoleException(getErrorString(e));  }catch (  SMSException e) {    String[] params={name,e.getMessage()};    logEvent("SMS_EXCEPTION_CREATE_SITE",params);    throw new AMConsoleException(getErrorString(e));  }catch (  IOException e) {    String[] params={name,e.getMessage()};    logEvent("IO_EXCEPTION_CREATE_SERVER",params);    throw new AMConsoleException(getErrorString(e));  }}  }
class C{  public String toURLEncodedQueryString() throws FSMsgException {  StringBuffer urlEncodedAuthnReq=new StringBuffer(300);  if ((authnContextClassRefList != null) && (!authnContextClassRefList.isEmpty())) {    if ((authnContextStatementRefList != null) && (!authnContextStatementRefList.isEmpty())) {      throw new FSMsgException("ExclusiveEntries",null);    }    StringBuffer strEncodedString=new StringBuffer(100);    Iterator j=authnContextClassRefList.iterator();    strEncodedString.append((String)j.next());    while (j.hasNext()) {      strEncodedString.append(" ").append((String)j.next());    }    urlEncodedAuthnReq.append("AuthnContextClassRef=").append(URLEncDec.encode(strEncodedString.toString())).append(IFSConstants.AMPERSAND);  }  if ((authnContextStatementRefList != null) && (!authnContextStatementRefList.isEmpty())) {    StringBuffer strEncodedString=new StringBuffer(100);    Iterator j=authnContextStatementRefList.iterator();    strEncodedString.append((String)j.next());    while (j.hasNext()) {      strEncodedString.append(" ").append((String)j.next());    }    urlEncodedAuthnReq.append("AuthnContextClassRef=").append(URLEncDec.encode(strEncodedString.toString())).append(IFSConstants.AMPERSAND);  }  if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {    if (authnContextComparison != null) {      urlEncodedAuthnReq.append("AuthnContextComparison=").append(URLEncDec.encode(authnContextComparison)).append(IFSConstants.AMPERSAND);    }  }  return urlEncodedAuthnReq.toString();}  }
class C{  public void preferenceChanged(boolean width,boolean height){  if (axis == X_AXIS) {    if (width) {      majorValid=false;    }    if (height) {      minorValid=false;    }  } else {    if (width) {      minorValid=false;    }    if (height) {      majorValid=false;    }  }  childSizeValid=false;}  }
class C{  public SignatureVisitor visitSuperclass(){  return this;}  }
class C{  private void enableSASL(){  saslActiveProvider=saslPendingProvider;  saslChannel.redirect(saslPendingProvider);  saslPendingProvider=null;}  }
class C{  public boolean beginStaticTextExceptionDisplay(ChildDisplayEvent event){  return true;}  }
class C{  protected DiscoveryContext(Service service,ApiaryConfig apiaryConfig){  this.service=Preconditions.checkNotNull(service);  this.apiaryConfig=Preconditions.checkNotNull(apiaryConfig);}  }
class C{  public boolean beginHiddenValueBoxDisplay(ChildDisplayEvent event){  return (curCallback instanceof HiddenValueCallback);}  }
class C{  @Modified void modified(ComponentContext context) throws Exception {  configuration=getConfiguration(context);  updateScriptHandler(configuration);  logger.info("OpenIDM Policy Service component is updateScriptHandler.");}  }
class C{  public com.sun.identity.liberty.ws.authnsvc.jaxb.StatusElement createStatusElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.authnsvc.jaxb.impl.StatusElementImpl();}  }
class C{  public AccessibleRelationSet(){  relations=null;}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public boolean isRefreshIconDisplayed(){  return displayRefreshIcon;}  }
class C{  public void insert_wchar(char value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_wchar",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    $self.insert_wchar(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  @Override public String[] keys() throws IOException {  File file=directory();  if (file == null) {    return (new String[0]);  }  String files[]=file.list();  if ((files == null) || (files.length < 1)) {    return (new String[0]);  }  ArrayList<String> list=new ArrayList<>();  int n=FILE_EXT.length();  for (int i=0; i < files.length; i++) {    if (files[i].endsWith(FILE_EXT)) {      list.add(files[i].substring(0,files[i].length() - n));    }  }  return list.toArray(new String[list.size()]);}  }
class C{  private static void swap(Object[] arr,int i,int j){  Object tmp=arr[i];  arr[i]=arr[j];  arr[j]=tmp;}  }
class C{  public static void removeByField2(boolean field2){  getPersistence().removeByField2(field2);}  }
class C{  public void initializeIdentityMappers() throws ConfigException, InitializationException {  RootCfg rootConfiguration=serverContext.getRootConfig();  rootConfiguration.addIdentityMapperAddListener(this);  rootConfiguration.addIdentityMapperDeleteListener(this);  for (  String mapperName : rootConfiguration.listIdentityMappers()) {    IdentityMapperCfg mapperConfiguration=rootConfiguration.getIdentityMapper(mapperName);    mapperConfiguration.addChangeListener(this);    if (mapperConfiguration.isEnabled()) {      String className=mapperConfiguration.getJavaClass();      try {        IdentityMapper mapper=loadMapper(className,mapperConfiguration,true);        identityMappers.put(mapperConfiguration.dn(),mapper);        DirectoryServer.registerIdentityMapper(mapperConfiguration.dn(),mapper);      } catch (      InitializationException ie) {        logger.error(ie.getMessageObject());        continue;      }    }  }  DN mapperDN=DirectoryServer.getProxiedAuthorizationIdentityMapperDN();  if (mapperDN == null) {    logger.error(ERR_CONFIG_IDMAPPER_NO_PROXY_MAPPER_DN);  } else   if (!identityMappers.containsKey(mapperDN)) {    logger.error(ERR_CONFIG_IDMAPPER_INVALID_PROXY_MAPPER_DN,mapperDN);  }}  }
class C{  public boolean isQuiet(){  return quietArg.isPresent();}  }
class C{  public RpcChannel(byte[] rpcId,Channel channel,RpcCallback callback){  this.channel=channel;  this.callback=callback;  this.rpcId=rpcId;  channel.addChannelListener(this);}  }
class C{  private static boolean isSecureLDAPUrl(LDAPURL url){  return !LDAPURL.DEFAULT_SCHEME.equalsIgnoreCase(url.getScheme());}  }
class C{  boolean validateDefaults(Map<String,Set<String>> attributeSet) throws SMSException {  return validateAttributes(null,attributeSet,false,null,true);}  }
class C{  public Object clone() throws CloneNotSupportedException {  NodeSequence clone=(NodeSequence)super.clone();  if (null != m_iter)   clone.m_iter=(DTMIterator)m_iter.clone();  if (m_cache != null) {    m_cache.increaseUseCount();  }  return clone;}  }
class C{  public synchronized void flush() throws IOException {  flushBuffer();  out.flush();}  }
class C{  public boolean after(Timestamp ts){  return compareTo(ts) > 0;}  }
class C{  void _setTextFromModel(){  Document doc=getDocument();  try {    isSettingAttributes=true;    if (doc instanceof AbstractDocument) {      ((AbstractDocument)doc).readLock();    }    JTextComponent text=getTextComponent();    if (text != null) {      text.setText(getRepresentedText());      resetBorder();      Container host=getContainer();      if (host != null) {        preferenceChanged(this,true,true);        host.repaint();      }    }  }  finally {    isSettingAttributes=false;    if (doc instanceof AbstractDocument) {      ((AbstractDocument)doc).readUnlock();    }  }}  }
class C{  private void skip(int numSymbols){  index+=numSymbols;}  }
class C{  public static boolean isRegisteredFont(String fontName){  return fontRegisterProvider.isRegisteredFont(fontName);}  }
class C{  public MessageBytes addValue(byte b[],int startN,int len){  MimeHeaderField mhf=createHeader();  mhf.getName().setBytes(b,startN,len);  return mhf.getValue();}  }
class C{  public NoRouteToHostException(){}  }
class C{  public int[] lookupPixel(int[] src,int[] dst){  if (dst == null) {    dst=new int[src.length];  }  if (numComponents == 1) {    for (int i=0; i < src.length; i++) {      int s=src[i] - offset;      if (s < 0) {        throw new ArrayIndexOutOfBoundsException("src[" + i + "]-offset is "+ "less than zero");      }      dst[i]=(int)data[0][s];    }  } else {    for (int i=0; i < src.length; i++) {      int s=src[i] - offset;      if (s < 0) {        throw new ArrayIndexOutOfBoundsException("src[" + i + "]-offset is "+ "less than zero");      }      dst[i]=(int)data[i][s];    }  }  return dst;}  }
class C{  private void destroy(){  checkSchema=true;  isBootstrapped=false;  isRunning=false;  lockdownMode=true;  rejectUnauthenticatedRequests=true;  shuttingDown=true;  configFile=null;  configurationHandler=null;  coreConfigManager=null;  compressedSchema=null;  cryptoManager=null;  entryCache=null;  environmentConfig=null;  schemaDN=null;  shutdownHook=null;  workQueue=null;  if (baseDnRegistry != null) {    baseDnRegistry.clear();    baseDnRegistry=null;  }  if (backends != null) {    backends.clear();    backends=null;  }  if (schemaHandler != null) {    schemaHandler.destroy();    schemaHandler=null;  }}  }
class C{  public long length() throws IOException {  try {    return Libcore.os.fstat(fd).st_size;  } catch (  ErrnoException errnoException) {    throw errnoException.rethrowAsIOException();  }}  }
class C{  public JKNamespace(final String url,final String prefix){  logger.info(String.format("create Namespace with url(%s) and Prefix(%s) ",url,prefix));  this.url=url;  this.prefix=prefix;}  }
class C{  private void appendErrorLine(String msg){  msg=filterForBugID4988885(msg + "<br>");  msg=Utilities.applyFont(msg,ColorAndFontConstants.progressFont);  appendHtml(msg);}  }
class C{  public void debugMessage(String message,Exception e){  debug.message(message,e);}  }
class C{  public void rehandshake() throws IOException {  if (netInBuffer.position() > 0 && netInBuffer.position() < netInBuffer.limit())   throw new IOException(sm.getString("channel.nio.ssl.netInputNotEmpty"));  if (netOutBuffer.position() > 0 && netOutBuffer.position() < netOutBuffer.limit())   throw new IOException(sm.getString("channel.nio.ssl.netOutputNotEmpty"));  if (!getBufHandler().isReadBufferEmpty())   throw new IOException(sm.getString("channel.nio.ssl.appInputNotEmpty"));  if (!getBufHandler().isWriteBufferEmpty())   throw new IOException(sm.getString("channel.nio.ssl.appOutputNotEmpty"));  netOutBuffer.position(0);  netOutBuffer.limit(0);  netInBuffer.position(0);  netInBuffer.limit(0);  getBufHandler().reset();  handshakeComplete=false;  sslEngine.beginHandshake();  handshakeStatus=sslEngine.getHandshakeStatus();  boolean handshaking=true;  try {    while (handshaking) {      int hsStatus=handshakeInternal(false);switch (hsStatus) {case -1:        throw new EOFException(sm.getString("channel.nio.ssl.eofDuringHandshake"));case 0:      handshaking=false;    break;default :}}} catch (IOException x) {throw x;}catch (Exception cx) {IOException x=new IOException(cx);throw x;}}  }
class C{  private SchemaConstants(){}  }
class C{  public FactoryConfigurationError(){  super();  this.exception=null;}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  validateIDPEntryList(idpEntryList);  StringBuffer xmlString=new StringBuffer(150);  xmlString.append(SAML2Constants.START_TAG);  if (includeNSPrefix) {    xmlString.append(SAML2Constants.PROTOCOL_PREFIX);  }  xmlString.append(SAML2Constants.IDPLIST).append(SAML2Constants.SPACE);  if (declareNS) {    xmlString.append(SAML2Constants.PROTOCOL_DECLARE_STR);  }  xmlString.append(SAML2Constants.END_TAG).append(SAML2Constants.NEWLINE);  if ((idpEntryList == null) || (idpEntryList.isEmpty())) {    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("noIDPEntry"));  }  Iterator i=idpEntryList.iterator();  while (i.hasNext()) {    IDPEntry idpEntry=(IDPEntry)i.next();    if (idpEntry != null) {      String idpEntryStr=idpEntry.toXMLString(includeNSPrefix,declareNS);      xmlString.append(idpEntryStr).append(SAML2Constants.NEWLINE);    }  }  if (getComplete != null) {    xmlString.append(getComplete.toXMLString(includeNSPrefix,declareNS)).append(SAML2Constants.NEWLINE);  }  xmlString.append(SAML2Constants.SAML2_END_TAG).append(SAML2Constants.IDPLIST).append(SAML2Constants.END_TAG);  return xmlString.toString();}  }
class C{  public JsonObject build(){  jsonObject.put(key,list);  return jsonObject;}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.RemoveEntryType createRemoveEntryType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.RemoveEntryTypeImpl();}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  if (callAttrs)   m_test.getExpression().callVisitors(m_test,visitor);  super.callChildVisitors(visitor,callAttrs);}  }
class C{  public AMSearchResults searchPeopleContainers(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(PEOPLE_CONTAINER),getSearchFilter(AMObject.PEOPLE_CONTAINER),wildcard,avPairs,searchControl);}  }
class C{  public DERSet(ASN1Encodable[] a){  super(a,true);}  }
class C{  protected void addDependenciesInCustomRequestScope(R requestContext){  addRequestContextInCustomRequestScope(requestContext);}  }
class C{  public boolean isQuietMode(){  return quietMode;}  }
class C{  private static XMPPathSegment parseIndexSegment(PathPosition pos) throws XMPException {  XMPPathSegment segment;  pos.stepEnd++;  if ('0' <= pos.path.charAt(pos.stepEnd) && pos.path.charAt(pos.stepEnd) <= '9') {    while (pos.stepEnd < pos.path.length() && '0' <= pos.path.charAt(pos.stepEnd) && pos.path.charAt(pos.stepEnd) <= '9') {      pos.stepEnd++;    }    segment=new XMPPathSegment(null,XMPPath.ARRAY_INDEX_STEP);  } else {    while (pos.stepEnd < pos.path.length() && pos.path.charAt(pos.stepEnd) != ']' && pos.path.charAt(pos.stepEnd) != '=') {      pos.stepEnd++;    }    if (pos.stepEnd >= pos.path.length()) {      throw new XMPException("Missing ']' or '=' for array index",XMPError.BADXPATH);    }    if (pos.path.charAt(pos.stepEnd) == ']') {      if (!"[last()".equals(pos.path.substring(pos.stepBegin,pos.stepEnd))) {        throw new XMPException("Invalid non-numeric array index",XMPError.BADXPATH);      }      segment=new XMPPathSegment(null,XMPPath.ARRAY_LAST_STEP);    } else {      pos.nameStart=pos.stepBegin + 1;      pos.nameEnd=pos.stepEnd;      pos.stepEnd++;      char quote=pos.path.charAt(pos.stepEnd);      if (quote != '\'' && quote != '"') {        throw new XMPException("Invalid quote in array selector",XMPError.BADXPATH);      }      pos.stepEnd++;      while (pos.stepEnd < pos.path.length()) {        if (pos.path.charAt(pos.stepEnd) == quote) {          if (pos.stepEnd + 1 >= pos.path.length() || pos.path.charAt(pos.stepEnd + 1) != quote) {            break;          }          pos.stepEnd++;        }        pos.stepEnd++;      }      if (pos.stepEnd >= pos.path.length()) {        throw new XMPException("No terminating quote for array selector",XMPError.BADXPATH);      }      pos.stepEnd++;      segment=new XMPPathSegment(null,XMPPath.FIELD_SELECTOR_STEP);    }  }  if (pos.stepEnd >= pos.path.length() || pos.path.charAt(pos.stepEnd) != ']') {    throw new XMPException("Missing ']' for array index",XMPError.BADXPATH);  }  pos.stepEnd++;  segment.setName(pos.path.substring(pos.stepBegin,pos.stepEnd));  return segment;}  }
class C{  public Builder removeAllNames(){  this.names.clear();  return this;}  }
class C{  public boolean append_bold(String p_string){  return append(p_string,"bold");}  }
class C{  public void logMessage(SIPMessage message,String from,String to,String status,boolean sender){  logMessage(message,from,to,status,sender,System.currentTimeMillis());}  }
class C{  private void serviceInfoToProperties(Provider.Service s){  super.put(s.type + "." + s.algorithm,s.className);  if (s.aliases != null) {    for (Iterator<String> i=s.aliases.iterator(); i.hasNext(); ) {      super.put("Alg.Alias." + s.type + "."+ i.next(),s.algorithm);    }  }  if (s.attributes != null) {    for (    Map.Entry<String,String> entry : s.attributes.entrySet()) {      super.put(s.type + "." + s.algorithm+ " "+ entry.getKey(),entry.getValue());    }  }  if (providerNumber != -1) {    Services.setNeedRefresh();  }}  }
class C{  public JobService card(JobState state,Handler<AsyncResult<Long>> handler){  delegate.card(state,handler);  return this;}  }
class C{  protected void paintChild(Graphics g,Rectangle alloc,int index){  View child=getView(index);  child.paint(g,alloc);}  }
class C{  public AMSearchResults searchAssignableDynamicGroups(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),getSearchFilter(AMObject.ASSIGNABLE_DYNAMIC_GROUP),wildcard,avPairs,searchControl);}  }
class C{  void clear(){  clearInMemory();  save();}  }
class C{  public final void testGetEncryptedData04(){  boolean performed=false;  for (int i=0; i < EncryptedPrivateKeyInfoData.algName0.length; i++) {    try {      EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(EncryptedPrivateKeyInfoData.algName0[i][0],EncryptedPrivateKeyInfoData.encryptedData);      byte[] ecd1=epki.getEncryptedData();      byte[] ecd2=epki.getEncryptedData();      assertNotSame(EncryptedPrivateKeyInfoData.encryptedData,ecd1);      assertNotSame(EncryptedPrivateKeyInfoData.encryptedData,ecd2);      assertNotSame(ecd1,ecd2);      performed=true;    } catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  protected void uninstallListeners(){  list.removeFocusListener(focusListener);  list.removeMouseListener(mouseInputListener);  list.removeMouseMotionListener(mouseInputListener);  list.removePropertyChangeListener(propertyChangeListener);  list.removeKeyListener(getHandler());  ListModel model=list.getModel();  if (model != null) {    model.removeListDataListener(listDataListener);  }  ListSelectionModel selectionModel=list.getSelectionModel();  if (selectionModel != null) {    selectionModel.removeListSelectionListener(listSelectionListener);  }  focusListener=null;  mouseInputListener=null;  listSelectionListener=null;  listDataListener=null;  propertyChangeListener=null;  handler=null;}  }
class C{  public URI(URI p_other){  initialize(p_other);}  }
class C{  public void uninstallBundle(Bundle bundle) throws UpdateException {  try {    bundle.uninstall();  } catch (  BundleException e) {    throw new UpdateException("Cannot uninstall bundle " + bundle.toString(),e);  }}  }
class C{  public boolean isCompatibleWith(Extension required){  if (extensionName == null)   return false;  if (!extensionName.equals(required.getExtensionName()))   return false;  if (required.getSpecificationVersion() != null) {    if (!isNewer(specificationVersion,required.getSpecificationVersion()))     return false;  }  if (required.getImplementationVendorId() != null) {    if (implementationVendorId == null)     return false;    if (!implementationVendorId.equals(required.getImplementationVendorId()))     return false;  }  if (required.getImplementationVersion() != null) {    if (!isNewer(implementationVersion,required.getImplementationVersion()))     return false;  }  return true;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Text textNode;  Text splitNode;  String value;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(2);  textNode=(Text)nameNode.getFirstChild();  splitNode=textNode.splitText(6);  value=splitNode.getNodeValue();  assertEquals("textSplitTextThreeAssert"," Jones",value);}  }
class C{  public void handleTblButtonGroupDeleteRequest(RequestInvocationEvent event) throws ModelControlException {  CCActionTable table=(CCActionTable)getChild(TBL_SEARCH_GROUP);  table.restoreStateData();  Integer[] selected=tblGroupModel.getSelectedRows();  Set names=new HashSet(selected.length * 2);  SerializedField szCache=(SerializedField)getChild(SZ_CACHE);  Map mapCache=(Map)szCache.getSerializedObj();  List cache=(List)mapCache.get(CACHE_AGENT_GROUPS);  for (int i=0; i < selected.length; i++) {    names.add((String)cache.get(selected[i].intValue()));  }  try {    AgentsModel model=(AgentsModel)getModel();    String curRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);    model.deleteAgentGroups(curRealm,names);    if (selected.length == 1) {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information",model.getLocalizedString("agent.groups.message.deleted"));    } else {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information",model.getLocalizedString("agent.groups.message.deleted.pural"));    }  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  public void layoutContainer(Container target){synchronized (target.getTreeLock()) {    Insets insets=target.getInsets();    int maxwidth=target.width - (insets.left + insets.right + hgap * 2);    int nmembers=target.getComponentCount();    int x=0, y=insets.top + vgap;    int rowh=0, start=0;    boolean ltr=target.getComponentOrientation().isLeftToRight();    boolean useBaseline=getAlignOnBaseline();    int[] ascent=null;    int[] descent=null;    if (useBaseline) {      ascent=new int[nmembers];      descent=new int[nmembers];    }    for (int i=0; i < nmembers; i++) {      Component m=target.getComponent(i);      if (m.isVisible()) {        Dimension d=m.getPreferredSize();        m.setSize(d.width,d.height);        if (useBaseline) {          int baseline=m.getBaseline(d.width,d.height);          if (baseline >= 0) {            ascent[i]=baseline;            descent[i]=d.height - baseline;          } else {            ascent[i]=-1;          }        }        if ((x == 0) || ((x + d.width) <= maxwidth)) {          if (x > 0) {            x+=hgap;          }          x+=d.width;          rowh=Math.max(rowh,d.height);        } else {          rowh=moveComponents(target,insets.left + hgap,y,maxwidth - x,rowh,start,i,ltr,useBaseline,ascent,descent);          x=d.width;          y+=vgap + rowh;          rowh=d.height;          start=i;        }      }    }    moveComponents(target,insets.left + hgap,y,maxwidth - x,rowh,start,nmembers,ltr,useBaseline,ascent,descent);  }}  }
class C{  public void testBoundedGenericMethods(){  assertLenghtOne(clazz.getTypeParameters());}  }
class C{  @Override public int hashCode(){  ImmutableList<A> l=this;  int h=1;  while (l.tail != null) {    h=h * 31 + (l.head == null ? 0 : l.head.hashCode());    l=l.tail;  }  return h;}  }
class C{  public static boolean validate(String str,String regEx,Debug tmpDebug){  debug=tmpDebug;  if (str == null || str.length() == 0) {    debug.message("Source string is null or empty");    return false;  }  char[] value=str.toCharArray();  int count=value.length;  Set hSet=new HashSet();  StringTokenizer st=new StringTokenizer(regEx,SEPERATOR);  while (st.hasMoreTokens()) {    hSet.add(st.nextToken());  }  Iterator itr=hSet.iterator();  while (itr.hasNext()) {    String obj=(String)itr.next();    if (process(value,obj,0,count) > -1) {      debug.message("detected invalid chars ...");      return false;    }  }  return true;}  }
class C{  public int adjustEnd(int bytesConsumed){  if (_type == TYPE_ROOT) {    return _endOffset;  }  int newOffset=_endOffset - bytesConsumed;  _endOffset=newOffset;  for (ProtobufReadContext ctxt=_parent; ctxt != null; ctxt=ctxt.getParent()) {    ctxt._adjustEnd(bytesConsumed);  }  return newOffset;}  }
class C{  private void adjustSizeOfMoovHeader(Mp4BoxHeader moovHeader,ByteBuffer moovBuffer,int sizeAdjustment,Mp4BoxHeader udtaHeader,Mp4BoxHeader metaHeader) throws IOException {  moovHeader.setLength(moovHeader.getLength() + sizeAdjustment);  if (udtaHeader != null) {    udtaHeader.setLength(udtaHeader.getLength() + sizeAdjustment);    moovBuffer.position((int)(udtaHeader.getFilePos() - moovHeader.getFilePos() - Mp4BoxHeader.HEADER_LENGTH));    moovBuffer.put(udtaHeader.getHeaderData());  }  if (metaHeader != null) {    metaHeader.setLength(metaHeader.getLength() + sizeAdjustment);    moovBuffer.position((int)(metaHeader.getFilePos() - moovHeader.getFilePos() - Mp4BoxHeader.HEADER_LENGTH));    moovBuffer.put(metaHeader.getHeaderData());  }}  }
class C{  public void printSet(Set set){  printSet(set,0);}  }
class C{  @Override protected void writeValue(ASN1Writer writer) throws IOException {  writer.writeStartSequence(ASN1.UNIVERSAL_OCTET_STRING_TYPE);  writer.writeStartSequence();  writer.writeInteger(beforeCount);  writer.writeInteger(afterCount);  if (targetType == TYPE_TARGET_BYOFFSET) {    writer.writeStartSequence(TYPE_TARGET_BYOFFSET);    writer.writeInteger(offset);    writer.writeInteger(contentCount);    writer.writeEndSequence();  } else {    writer.writeOctetString(TYPE_TARGET_GREATERTHANOREQUAL,greaterThanOrEqual);  }  if (contextID != null) {    writer.writeOctetString(contextID);  }  writer.writeEndSequence();  writer.writeEndSequence();}  }
class C{  public void removeMethod(String method){  if (method == null)   return;  int n=-1;  for (int i=0; i < methods.length; i++) {    if (methods[i].equals(method)) {      n=i;      break;    }  }  if (n >= 0) {    int j=0;    String results[]=new String[methods.length - 1];    for (int i=0; i < methods.length; i++) {      if (i != n)       results[j++]=methods[i];    }    methods=results;  }}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.nist.gov";  String qualifiedName="emp:qual?name";  Document doc;  NodeList elementList;  Node testAddr;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("employee");  testAddr=elementList.item(0);{    boolean success=false;    try {      ((Element)testAddr).setAttributeNS(namespaceURI,qualifiedName,"newValue");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  public int readUnsignedByte() throws IOException, EOFException {  return in.read();}  }
class C{  private void initiateMonitor(){  if (DEBUG.messageEnabled()) {    DEBUG.message("Initialising monitor to listen for policy path index modifications.");  }  scheduler.schedule(monitorTask,INIT_DELAY,DELAY_UNIT);}  }
class C{  public void increment(){  counter.getAndIncrement();}  }
class C{  @Override public void close() throws NamingException {  if (!checkWritable()) {    return;  }  env.clear();}  }
class C{  @Override public int hashCode(){  int result=version + rounds + wordSize;  if (iv == null) {    return result;  }  for (  byte element : iv) {    result+=element & 0xFF;  }  return result;}  }
class C{  protected void clearAttributes(){  ArrayList<String> list=new ArrayList<>();  Iterator<String> iter=attributes.keySet().iterator();  while (iter.hasNext()) {    list.add(iter.next());  }  Iterator<String> keys=list.iterator();  while (keys.hasNext()) {    String key=keys.next();    removeAttribute(key);  }}  }
class C{  public static Provider isSupport(String algorithm,String service){  try {    Provider[] provs=Security.getProviders(service.concat(".").concat(algorithm));    if (provs == null) {      return null;    }    return (provs.length == 0 ? null : provs[0]);  } catch (  Exception e) {    return null;  }}  }
class C{  @SuppressWarnings("unused") private static Object callFunctionalObject(Object functionalObject,Class<?> callerClass,Object[] args) throws Throwable {  return callFunctionalObject(new InvocationState(),functionalObject,callerClass,args);}  }
class C{  public void change_placement_side(){  BrdLayerStructure layer_structure=r_brd.layer_structure;  BrdLibrary board_library=r_brd.brd_library;  boolean placement_side_changable=true;  for (  BrdItem curr_item : item_list) {    if (curr_item instanceof BrdAbitVia) {      if (board_library.get_mirrored_via_padstack(((BrdAbitVia)curr_item).get_padstack()) == null) {        placement_side_changable=false;        break;      }    } else     if (curr_item.first_layer() == curr_item.last_layer()) {      int new_layer_no=i_brd.get_layer_count() - curr_item.first_layer() - 1;      if (!layer_structure.is_signal(new_layer_no)) {        placement_side_changable=false;        break;      }    }  }  if (!placement_side_changable) {    i_brd.screen_messages.set_status_message(resources.getString("cannot_change_placement_side"));    return;  }  board.BrdComponents components=r_brd.brd_components;  for (  BrdComponent curr_component : component_list) {    components.change_side(curr_component.id_no,current_position);  }  clearance_violations=new LinkedList<BrdItemViolation>();  for (  BrdItem curr_item : item_list) {    curr_item.change_placement_side(current_position);    clearance_violations.addAll(curr_item.clearance_violations());  }  for (  IteraNetItems curr_net_items : net_items_list) {    i_brd.update_ratsnest(curr_net_items.net_no,curr_net_items.items);  }  actlog_start_scope(LogfileScope.CHANGE_PLACEMENT_SIDE);  i_brd.repaint();}  }
class C{  public void windowIconified(WindowEvent e){}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  Node textNode;  String prefix;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("emp:employeeId");  testEmployee=elementList.item(0);  assertNotNull("empEmployeeNotNull",testEmployee);  textNode=testEmployee.getFirstChild();  prefix=textNode.getPrefix();  assertNull("textNodePrefix",prefix);}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  int p0=getStartOffset();  int p1=getEndOffset();  if ((pos >= p0) && (pos <= p1)) {    Rectangle r=a.getBounds();    if (pos == p1) {      r.x+=r.width;    }    r.width=0;    return r;  }  throw new BadLocationException(pos + " not in range " + p0+ ","+ p1,pos);}  }
class C{  public MaterialBarcodeScannerBuilder withCameraFacing(int cameraFacing){  mFacing=cameraFacing;  return this;}  }
class C{  public SerializedField(View parent,Model model,String name,Serializable value){  super(parent,model,name,name,null);  setValue(value,false);}  }
class C{  public SQLDataException(Throwable cause){  super(cause);}  }
class C{  public void process(String name,Vector elems,Hashtable atts,String pcdata){  _name=name;  _elems=elems;  _atts=atts;  _pcdata=pcdata;}  }
class C{  public ReferralEditViewBean(){  super("ReferralEdit",DEFAULT_DISPLAY_URL);}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s1_linear_with_only_annotated_tags();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  private static byte[] exposeByteArrayInputStreamBytes(ByteArrayInputStream bais){  byte[] buffer;synchronized (bais) {    byte[] buf;    int pos;    try {      buf=(byte[])BAIS_BUF.get(bais);      pos=BAIS_POS.getInt(bais);    } catch (    IllegalAccessException iae) {      throw new AssertionError(iae);    }    int available=bais.available();    if (pos == 0 && buf.length == available) {      buffer=buf;    } else {      buffer=new byte[available];      System.arraycopy(buf,pos,buffer,0,available);    }    bais.skip(available);  }  return buffer;}  }
class C{  private OpenSSLSignature(String algorithm,EngineType engineType) throws NoSuchAlgorithmException {  super(algorithm);  if ("RSA-MD2".equals(algorithm)) {    throw new NoSuchAlgorithmException(algorithm);  }  this.engineType=engineType;  this.evpAlgorithm=algorithm;}  }
class C{  private static <T>void legacyMergeSort(T[] a,Comparator<? super T> c){  T[] aux=a.clone();  if (c == null)   mergeSort(aux,a,0,a.length,0); else   mergeSort(aux,a,0,a.length,0,c);}  }
class C{  public void addListDataListener(ListDataListener l){  listenerList.add(ListDataListener.class,l);}  }
class C{  @Override public String toString(){  return x + "," + y+ ","+ z;}  }
class C{  public org.omg.DynamicAny.DynAny copy(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("copy",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    return $self.copy();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public GUID(final int[] value){  setGUID(value);}  }
class C{  protected void updateDNValue(){  String value=name.getText().trim();  if (value.length() > 0) {    dn.setText("o" + "=" + value + ","+ parentNode.getDN());  } else {    dn.setText("," + parentNode.getDN());  }}  }
class C{  private void examineIncompleteOperation(CompareOperation compareOperation){  assertTrue(compareOperation.getProcessingStartTime() > 0);  assertTrue(compareOperation.getProcessingStopTime() > 0);  assertTrue(compareOperation.getProcessingTime() >= 0);  assertTrue(compareOperation.getErrorMessage().length() > 0);  ensurePostReponseHasRun();}  }
class C{  public RecycleViewDivider(Context context,int resId){  mDivider=ContextCompat.getDrawable(context,resId);}  }
class C{  protected void installComponents(){  if (scrollableTabLayoutEnabled()) {    if (tabScroller == null) {      tabScroller=new ScrollableTabSupport(tabPane.getTabPlacement());      tabPane.add(tabScroller.viewport);    }  }  installTabContainer();}  }
class C{  void addUnstarted(){synchronized (this) {    if (destroyed) {      throw new IllegalThreadStateException();    }    nUnstartedThreads++;  }}  }
class C{  @Override public void performTask(TokenStorageAdapter adapter) throws DataLayerException {  Token previous=adapter.read(token.getTokenId());  Token updated;  if (previous == null) {    updated=adapter.create(token);  } else {    updated=adapter.update(previous,token);  }  handler.processResults(updated);}  }
class C{  private synchronized ResourceBundle findResourceBundle(String name,boolean useCallersClassLoader){  if (name == null) {    return null;  }  Locale currentLocale=Locale.getDefault();  final LoggerBundle lb=loggerBundle;  if (lb.userBundle != null && name.equals(lb.resourceBundleName)) {    return lb.userBundle;  } else   if (catalog != null && currentLocale.equals(catalogLocale) && name.equals(catalogName)) {    return catalog;  }  if (name.equals(SYSTEM_LOGGER_RB_NAME)) {    catalog=findSystemResourceBundle(currentLocale);    catalogName=name;    catalogLocale=currentLocale;    return catalog;  }  ClassLoader cl=Thread.currentThread().getContextClassLoader();  if (cl == null) {    cl=ClassLoader.getSystemClassLoader();  }  try {    catalog=ResourceBundle.getBundle(name,currentLocale,cl);    catalogName=name;    catalogLocale=currentLocale;    return catalog;  } catch (  MissingResourceException ex) {  }  if (useCallersClassLoader) {    ClassLoader callersClassLoader=getCallersClassLoader();    if (callersClassLoader == null || callersClassLoader == cl) {      return null;    }    try {      catalog=ResourceBundle.getBundle(name,currentLocale,callersClassLoader);      catalogName=name;      catalogLocale=currentLocale;      return catalog;    } catch (    MissingResourceException ex) {      return null;    }  } else {    return null;  }}  }
class C{  public FrameBodyTIT3(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public static String toString(final Iterable<?> iterable){  if (iterable instanceof Collection) {    return iterable.toString();  } else {    final StringBuilder builder=new StringBuilder();    boolean firstValue=true;    builder.append('[');    for (    final Object value : iterable) {      if (!firstValue) {        builder.append(", ");      }      builder.append(value);      firstValue=false;    }    builder.append(']');    return builder.toString();  }}  }
class C{  public ResolveResult(Object robj,Name rname){  resolvedObj=robj;  setRemainingName(rname);}  }
class C{  @DataProvider(name="createAttributes") public Object[][] createAttributes(){  return new Object[][]{{1,Attributes.empty(cnType),cnType,"cn",noOptions,noValues},{2,Attributes.empty("cn"),cnType,"cn",noOptions,noValues},{3,Attributes.empty("CN"),cnType,"CN",noOptions,noValues},{4,Attributes.empty(cnType,"CN"),cnType,"CN",noOptions,noValues},{5,Attributes.empty(Attributes.empty(cnType,"CN")),cnType,"CN",noOptions,noValues},{6,Attributes.empty(Attributes.create(cnType,"CN","john doe")),cnType,"CN",noOptions,noValues},{7,Attributes.create(cnType,cnValue),cnType,"cn",noOptions,new String[]{cnValue.toString()}},{8,Attributes.create(cnType,"JOHN DOE"),cnType,"cn",noOptions,new String[]{cnValue.toString()}},{9,Attributes.create("cn","JOHN DOE"),cnType,"cn",noOptions,new String[]{cnValue.toString()}},{10,Attributes.create("CN","JOHN DOE"),cnType,"CN",noOptions,new String[]{cnValue.toString()}},{11,Attributes.create(cnType,"CN",cnValue),cnType,"CN",noOptions,new String[]{cnValue.toString()}},{12,Attributes.create(cnType,"CN","JOHN DOE"),cnType,"CN",noOptions,new String[]{cnValue.toString()}},{13,createAttribute(cnType,"cn",noOptions,noValues),cnType,"cn",noOptions,noValues},{14,createAttribute(cnType,"cn",oneOption,noValues),cnType,"cn",oneOption,noValues},{15,createAttribute(cnType,"cn",twoOptions,noValues),cnType,"cn",twoOptions,noValues},{16,createAttribute(cnType,"cn",threeOptions,noValues),cnType,"cn",threeOptions,noValues},{17,createAttribute(cnType,"cn",noOptions,oneValue),cnType,"cn",noOptions,oneValue},{18,createAttribute(cnType,"cn",oneOption,oneValue),cnType,"cn",oneOption,oneValue},{19,createAttribute(cnType,"cn",twoOptions,oneValue),cnType,"cn",twoOptions,oneValue},{20,createAttribute(cnType,"cn",threeOptions,oneValue),cnType,"cn",threeOptions,oneValue},{21,createAttribute(cnType,"cn",noOptions,twoValues),cnType,"cn",noOptions,twoValues},{22,createAttribute(cnType,"cn",oneOption,twoValues),cnType,"cn",oneOption,twoValues},{23,createAttribute(cnType,"cn",twoOptions,twoValues),cnType,"cn",twoOptions,twoValues},{24,createAttribute(cnType,"cn",threeOptions,twoValues),cnType,"cn",threeOptions,twoValues},{25,createAttribute(cnType,"cn",noOptions,threeValues),cnType,"cn",noOptions,threeValues},{26,createAttribute(cnType,"cn",oneOption,threeValues),cnType,"cn",oneOption,threeValues},{27,createAttribute(cnType,"cn",twoOptions,threeValues),cnType,"cn",twoOptions,threeValues},{28,createAttribute(cnType,"cn",threeOptions,threeValues),cnType,"cn",threeOptions,threeValues},{29,new AttributeBuilder(cnType).toAttribute(),cnType,"cn",noOptions,noValues},{30,new AttributeBuilder("cn").toAttribute(),cnType,"cn",noOptions,noValues},{31,new AttributeBuilder("CN").toAttribute(),cnType,"CN",noOptions,noValues},{32,new AttributeBuilder(cnType,"cn").toAttribute(),cnType,"cn",noOptions,noValues},{33,new AttributeBuilder(cnType,"CN").toAttribute(),cnType,"CN",noOptions,noValues},{34,new AttributeBuilder(createAttribute(cnType,"CN",threeOptions,threeValues)).toAttribute(),cnType,"CN",threeOptions,threeValues},{35,new AttributeBuilder(createAttribute(cnType,"CN",threeOptions,threeValues)).toAttribute(),cnType,"CN",threeOptions,threeValues},{36,new AttributeBuilder(createAttribute(cnType,"CN",threeOptions,threeValues).getAttributeDescription()).toAttribute(),cnType,"CN",threeOptions,noValues}};}  }
class C{  public boolean isLeftToRight(){  return textLine.isDirectionLTR();}  }
class C{  public StatusCode createStatusCode(String value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.STATUS_CODE,value);  if (obj == null) {    return new StatusCodeImpl(value);  } else {    return (StatusCode)obj;  }}  }
class C{  public void invokePostSynchronizationModifyPlugins(PostSynchronizationModifyOperation modifyOperation){  for (  DirectoryServerPlugin p : postSynchronizationModifyPlugins) {    try {      p.doPostSynchronization(modifyOperation);    } catch (    Exception e) {      logException(modifyOperation,p,e,ERR_PLUGIN_POST_SYNCHRONIZATION_PLUGIN_EXCEPTION);    }  }}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  protected boolean hasAlert(){  return (alert[0] != 0);}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return new XNumber(left.num() % right.num());}  }
class C{  public AccountNotFoundException(){  super();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node entRef;  Node entText;  Text splitNode;  doc=(Document)load("staff",true);  entRef=doc.createEntityReference("ent3");  assertNotNull("createdEntRefNotNull",entRef);  entText=entRef.getFirstChild();  assertNotNull("entTextNotNull",entText);{    boolean success=false;    try {      splitNode=((Text)entText).splitText(2);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public MyCertificate(String type,byte[] encoding){  super(type);  this.encoding=encoding;}  }
class C{  private static Locale createConstant(String lang,String country){  BaseLocale base=BaseLocale.createInstance(lang,country);  return getInstance(base,null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeelementnodevalue.class,args);}  }
class C{  protected void finalize(){  this.stopStack();}  }
class C{  private Map sendCallback(){  try {    CallbackHandler callbackHandler=getCallbackHandler();    if (callbackHandler == null) {      throw new AuthLoginException(amAuthApplication,"NoCallbackHandler",null);    }    Callback[] callbacks=new Callback[2];    callbacks[0]=new NameCallback(bundle.getString("appname"));    callbacks[1]=new PasswordCallback(bundle.getString("secret"),true);    debug.message("Callback is.. : {}",callbacks);    callbackHandler.handle(callbacks);    Map<String,String> map=new HashMap<>();    for (    Callback cb : callbacks) {      if (cb instanceof PasswordCallback) {        char[] pass=((PasswordCallback)cb).getPassword();        if (pass != null) {          map.put("secret",new String(pass));        }      } else       if (cb instanceof NameCallback) {        String username=((NameCallback)cb).getName();        if (username != null) {          map.put("uid",username);        }      }    }    return map;  } catch (  Exception e) {    debug.error("sendCallback: {}",e.getMessage());    debug.message("Stack trace: ",e);  }  return null;}  }
class C{  public PolicySelectTypeViewBean(){  super("PolicySelectType");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  createPageTitleModel();  createPropertyModel();  registerChildren();}  }
class C{  public EasyDisplayMod(final Context context){  this.context=context;  WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  display=wm.getDefaultDisplay();}  }
class C{  public void editFavorite(){  EditFavoriteDialog dialogFragment=(EditFavoriteDialog)getFragmentManager().findFragmentByTag(EDIT_FAVORITE);  if (null == dialogFragment) {    return;  }  Dialog dialog=dialogFragment.getDialog();  if (null == dialog) {    return;  }  EditText nameEditText=(EditText)dialog.findViewById(R.id.dlg_edit_station_name_text);  EditText frequencyEditText=(EditText)dialog.findViewById(R.id.dlg_edit_station_freq_text);  if ((null == nameEditText) || (null == frequencyEditText)) {    return;  }  String newName=nameEditText.getText().toString().trim();  String newStationFreqStr=frequencyEditText.getText().toString().trim();  if (0 != newName.length()) {    mDlgStationName=newName;  }  float newStationFreq=0;  try {    newStationFreq=Float.parseFloat(newStationFreqStr);  } catch (  NumberFormatException e) {    e.printStackTrace();  }  int newStation=FmRadioUtils.computeStation(newStationFreq);  if (FmRadioUtils.isValidStation(newStation)) {    if (FmRadioStation.isStationExist(mContext,newStation,FmRadioStation.STATION_TYPE_FAVORITE) && (newStation != mDlgStationFreq)) {      FmRadioStation.deleteStationInDb(mContext,newStation,FmRadioStation.STATION_TYPE_FAVORITE);    } else     if (FmRadioStation.isStationExist(mContext,newStation,FmRadioStation.STATION_TYPE_SEARCHED)) {      FmRadioStation.deleteStationInDb(mContext,newStation,FmRadioStation.STATION_TYPE_SEARCHED);    }    FmRadioStation.updateStationToDb(mContext,mDlgStationName,mDlgStationFreq,newStation,FmRadioStation.STATION_TYPE_FAVORITE);    mAdapter.notifyDataSetChanged();  } else {    Toast.makeText(getApplicationContext(),R.string.toast_invalid_frequency,Toast.LENGTH_SHORT).show();  }}  }
class C{  public boolean inside_circle(PlaPointFloat p_1,PlaPointFloat p_2,PlaPointFloat p_3){  PlaPointFloat center=p_1.circle_center(p_2,p_3);  double radius_square=center.distance_square(p_1);  return (distance_square(center) < radius_square - 1);}  }
class C{  @Override public boolean hasSubOrdinates(){  return hasSubOrdinates;}  }
class C{  @Override public void write(String str){  write(str.toCharArray());}  }
class C{  public Assertion createAssertion(Object token,List attributes) throws SAMLException {  if (assertionVersion.equals(SAMLConstants.ASSERTION_VERSION_1_0)) {    return createAssertion(token,attributes,SAMLConstants.DEPRECATED_CONFIRMATION_METHOD_ARTIFACT,0);  } else   if (assertionVersion.equals(SAMLConstants.ASSERTION_VERSION_1_1)) {    return createAssertion(token,attributes,SAMLConstants.CONFIRMATION_METHOD_ARTIFACT,1);  } else {    throw new SAMLException(SAMLUtils.bundle.getString("assertionVersionNotSupport"));  }}  }
class C{  public static Entry addEntry(String... lines) throws Exception {  final Entry entry=makeEntry(lines);  AddOperation addOperation=getRootConnection().processAdd(entry);  assertEquals(addOperation.getResultCode(),ResultCode.SUCCESS,addOperation.getErrorMessage().toString());  final Entry e=DirectoryServer.getEntry(entry.getName());  assertNotNull(e);  return e;}  }
class C{  public static void removeByField2(boolean field2){  getPersistence().removeByField2(field2);}  }
class C{  public void testSubsnotify2(){  this.subscriber.sendSubscribe(5065);}  }
class C{  public final int pop(){  m_firstFree--;  int n=m_map[m_firstFree];  m_map[m_firstFree]=DTM.NULL;  return n;}  }
class C{  public boolean isObsolete(){  return obsolete;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeinsertbeforenewchilddiffdocument.class,args);}  }
class C{  PrivilegedSetTccl(final ClassLoader cl){  this.classLoader=cl;}  }
class C{  public Set<String> subEntries(SSOToken token,String dn,String filter,int numOfEntries,boolean sortResults,boolean ascendingOrder) throws SMSException, SSOException {  try {    Object[] objs={token.getTokenID().toString(),dn,filter,new Integer(numOfEntries),Boolean.valueOf(sortResults),Boolean.valueOf(ascendingOrder)};    return ((Set<String>)client.send(client.encodeMessage("subEntries",objs),sessionCookies.getLBCookie(token.getTokenID().toString()),null));  } catch (  SSOException ssoe) {    throw ssoe;  }catch (  SMSException smse) {    throw smse;  }catch (  Exception re) {    debug.error("SMSJAXRPCObject:subEntries -- Exception:",re);    throw (new SMSException(re,"sms-JAXRPC-subentry-cannot-search"));  }}  }
class C{  public static boolean checkContentCanBePulledDown(PtrFrameLayout frame,View content,View header){  return !canChildScrollUp(content);}  }
class C{  void positionCursorAtInitialLocation(){  JFormattedTextField ftf=getFormattedTextField();  if (ftf != null) {    ftf.setCaretPosition(getInitialVisualPosition());  }}  }
class C{  public final double distance(){  return to_float().distance();}  }
class C{  public EncryptedAssertion createEncryptedAssertion(Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ENCRYPTED_ASSERTION,elem);  if (obj == null) {    return new EncryptedAssertionImpl(elem);  } else {    return (EncryptedAssertion)obj;  }}  }
class C{  public SoftReferenceEntryCache(){  super();  dnMap=new ConcurrentHashMap<>();  idMap=new ConcurrentHashMap<>();  setExcludeFilters(new HashSet<SearchFilter>());  setIncludeFilters(new HashSet<SearchFilter>());  referenceQueue=new ReferenceQueue<>();}  }
class C{  protected void postCommandLine(){  state=returnCode != 0 ? State.FINISHED_WITH_ERROR : State.FINISHED_SUCCESSFULLY;}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  public void test_equals(){  String name1="CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US";  String name2="cn=duke,ou=javasoft,o=sun microsystems,c=us";  String name3="CN=Alex Astapchuk, OU=SSG, O=Intel ZAO, C=RU";  X500Principal xpr1=new X500Principal(name1);  X500Principal xpr2=new X500Principal(name2);  X500Principal xpr3=new X500Principal(name3);  try {    assertTrue("False returned",xpr1.equals(xpr2));    assertFalse("True returned",xpr1.equals(xpr3));  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }}  }
class C{  public static boolean appendLinesToFile(String filePath,String[] linesToAppend){  return appendLinesToFile(filePath,linesToAppend,false);}  }
class C{  private AuthenticationModuleBuilder processModuleConfiguration(JsonValue moduleConfig) throws AuthenticationException {  if (moduleConfig.isDefined(AUTH_MODULE_CONFIG_ENABLED) && !moduleConfig.get(AUTH_MODULE_CONFIG_ENABLED).asBoolean()) {    return null;  }  moduleConfig.remove(AUTH_MODULE_CONFIG_ENABLED);  AsyncServerAuthModule module;  if (moduleConfig.isDefined(AUTH_MODULE_NAME_KEY)) {    module=moduleConfig.get(AUTH_MODULE_NAME_KEY).as(enumConstant(IDMAuthModule.class)).newInstance(toAuthenticatorFromProperties);  } else   if (moduleConfig.isDefined(AUTH_MODULE_CLASS_NAME_KEY)) {    module=constructAuthModuleByClassName(moduleConfig.get(AUTH_MODULE_CLASS_NAME_KEY).asString());  } else {    logger.warn("Unable to create auth module from config " + moduleConfig.toString());    throw new AuthenticationException("Auth module config lacks 'name' and 'className' attribute");  }  JsonValue moduleProperties=moduleConfig.get(AUTH_MODULE_PROPERTIES_KEY);  if (moduleProperties.isDefined("privateKeyPassword")) {    moduleProperties.put("privateKeyPassword",JettyPropertyUtil.decryptOrDeobfuscate(moduleProperties.get("privateKeyPassword").asString()));  }  if (moduleProperties.isDefined("keystorePassword")) {    moduleProperties.put("keystorePassword",JettyPropertyUtil.decryptOrDeobfuscate(moduleProperties.get("keystorePassword").asString()));  }  return configureModule(new IDMAuthModuleWrapper(module,connectionFactory,cryptoService,scriptRegistry)).withSettings(moduleProperties.asMap());}  }
class C{  @NonNull public static Animator createCircularReveal(@NonNull View rootView,@IdRes int startViewId,@NonNull Interpolator interpolator){  final View startView=rootView.findViewById(startViewId);  return createCircularReveal(startView,rootView,interpolator);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode04.class,args);}  }
class C{  private void tagWithArguments(TemplateTag tag,String... arguments) throws DecodeException {  tagWithArguments(tag,templateWithAnyAttribute(),arguments);}  }
class C{  public synchronized void removeHost(String name){  name=renameWildcardHost(name);  MappedHost host=exactFind(hosts,name);  if (host == null || host.isAlias()) {    return;  }  MappedHost[] newHosts=hosts.clone();  int j=0;  for (int i=0; i < newHosts.length; i++) {    if (newHosts[i].getRealHost() != host) {      newHosts[j++]=newHosts[i];    }  }  hosts=Arrays.copyOf(newHosts,j);}  }
class C{  public int enumerate(Thread[] threads){  return enumerate(threads,true);}  }
class C{  public DATA_CONVERSION(){  this("");}  }
class C{  public HTTPStatsProbe(HTTPStatistics statTracker){  this.statTracker=statTracker;}  }
class C{  protected String nativeElementTypeName(Field field){  return "item";}  }
class C{  private static BindRule createBindRule(BindRule bindrule,String remainingBindruleStr) throws AciException {  Pattern remainingBindrulePattern=Pattern.compile(remainingBindruleRegex);  Matcher remainingBindruleMatcher=remainingBindrulePattern.matcher(remainingBindruleStr);  if (remainingBindruleMatcher.find()) {    String remainingOperand=remainingBindruleMatcher.group(remainingOperandPos);    String remainingBindrule=remainingBindruleMatcher.group(remainingBindrulePos);    EnumBooleanTypes operand=EnumBooleanTypes.createBindruleOperand(remainingOperand);    if (operand == null || (operand != EnumBooleanTypes.AND_BOOLEAN_TYPE && operand != EnumBooleanTypes.OR_BOOLEAN_TYPE)) {      LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_BIND_RULE_BOOLEAN_OPERATOR.get(remainingOperand);      throw new AciException(message);    }    StringBuilder ruleExpr=new StringBuilder(remainingBindrule);    boolean negate=determineNegation(ruleExpr);    remainingBindrule=ruleExpr.toString();    BindRule bindrule_2=BindRule.decode(remainingBindrule);    bindrule_2.setNegate(negate);    return new BindRule(bindrule,bindrule_2,operand);  }  throw new AciException(WARN_ACI_SYNTAX_INVALID_BIND_RULE_SYNTAX.get(remainingBindruleStr));}  }
class C{  private Object jmxGet(String dn,String attributeName,MBeanServerConnection mbsc) throws Exception {  String jmxName=JMXMBean.getJmxName(DN.valueOf(dn));  ObjectName name=ObjectName.getInstance(jmxName);  try {    Attribute status=(Attribute)mbsc.getAttribute(name,attributeName);    if (status != null) {      return status.getValue();    }    return null;  } catch (  AttributeNotFoundException anfe) {    return null;  }}  }
class C{  public URIField uriField() throws ParseException {  try {    this.lexer.match('u');    this.lexer.SPorHT();    this.lexer.match('=');    this.lexer.SPorHT();    URIField uriField=new URIField();    String rest=lexer.getRest().trim();    uriField.setURI(rest);    return uriField;  } catch (  Exception e) {    throw lexer.createParseException();  }}  }
class C{  static int updateSchemaFile(final File templateFile,final File destination,final String[] attributes,final String[] objectClasses) throws IOException, IllegalStateException {  int changeCount=0;  final Entry templateSchemaEntry=readFirstEntryFromTemplate(templateFile);  final Entry destinationSchemaEntry=readFirstEntryFromTemplate(destination);  if (attributes != null) {    for (    final String att : attributes) {      final ByteString attributeType=getSchemaElement(templateSchemaEntry,"attributeTypes",att);      destinationSchemaEntry.getAttribute("attributeTypes").add(attributeType);      changeCount++;      logger.debug(LocalizableMessage.raw("Added %s",attributeType));    }  }  if (objectClasses != null) {    for (    final String oc : objectClasses) {      final ByteString objectClass=getSchemaElement(templateSchemaEntry,"objectClasses",oc);      destinationSchemaEntry.getAttribute("objectClasses").add(objectClass);      changeCount++;      logger.trace("Added %s",objectClass);    }  }  File copy=File.createTempFile("copySchema",".tmp",destination.getParentFile());  try (final FileOutputStream fos=new FileOutputStream(copy);LDIFEntryWriter destinationWriter=new LDIFEntryWriter(fos)){    destinationWriter.setWrapColumn(79);    writeFileHeaderComments(templateFile,destinationWriter);    destinationWriter.writeEntry(destinationSchemaEntry);  }   try {    rename(copy,destination);  } catch (  IOException e) {    logger.error(LocalizableMessage.raw(e.getMessage()));    deleteRecursively(copy);    throw e;  }  return changeCount;}  }
class C{  @BeforeMethod public void beforeMethod() throws Exception {  TestCaseUtils.initializeTestBackend(true);  TestCaseUtils.addEntries("dn: cn=Samba Admin,o=test","objectClass: top","objectClass: person","userPassword: password","sn: Admin","cn: Samba Admin","ds-privilege-name: password-reset");  TestCaseUtils.addEntries("dn: cn=Samba Admin NP,o=test","objectClass: top","objectClass: person","userPassword: password","sn: Admin NP","cn: Samba Admin NP");  ModifyRequest modifyRequest=Requests.newModifyRequest("o=test").addModification(ADD,"aci","(target=\"ldap:///uid=*,o=test\")(targetattr=\"*\")" + "(version 3.0; acl \"Samba admin\"; allow (all) " + "userdn=\"ldap:///cn=samba admin,o=test\";)");  ModifyOperation modOp=getRootConnection().processModify(modifyRequest);  assertEquals(modOp.getResultCode(),ResultCode.SUCCESS);}  }
class C{  public boolean checkDateValidity(long someTime){  if (_notBefore == null) {    if (_notOnOrAfter == null) {      return true;    } else {      if (someTime < _notOnOrAfter.getTime()) {        return true;      }    }  } else   if (_notOnOrAfter == null) {    if (someTime >= _notBefore.getTime()) {      return true;    }  } else   if ((someTime >= _notBefore.getTime()) && (someTime < _notOnOrAfter.getTime())) {    return true;  }  return false;}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  ElemAttributeSet eat=new ElemAttributeSet();  eat.setLocaterInfo(handler.getLocator());  try {    eat.setPrefixes(handler.getNamespaceSupport());  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }  eat.setDOMBackPointer(handler.getOriginatingNode());  setPropertiesFromAttributes(handler,rawName,attributes,eat);  handler.getStylesheet().setAttributeSet(eat);  ElemTemplateElement parent=handler.getElemTemplateElement();  parent.appendChild(eat);  handler.pushElemTemplateElement(eat);}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  @Override public void close(){  flush();}  }
class C{  public void configChanged(ConfigurationActionEvent e){  if (debug.messageEnabled()) {    debug.message("SOAPBindingService: configChanged");  }  setValues();}  }
class C{  public WSFederationException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
class C{  public void reset(){  npoints=0;  bounds=null;}  }
class C{  protected int estimateNameValuePairLen(final NameValuePair nvp){  if (nvp == null)   return 0;  int result=nvp.getName().length();  final String value=nvp.getValue();  if (value != null) {    result+=3 + value.length();  }  return result;}  }
class C{  private void internalSetOrientation(Orientation orientation){switch (orientation) {case HORIZONTAL:    this.mBounds=new RectF(0.0f,0.0f,100.0f,0.0f);  break;case VERTICAL:this.mBounds=new RectF(0.0f,100.0f,0.0f,0.0f);break;}}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {}  }
class C{  public void testNewDocument(){  Document d;  try {    d=dbf.newDocumentBuilder().newDocument();  } catch (  Exception e) {    throw new RuntimeException("Unexpected exception",e);  }  assertNotNull(d);  assertNull(d.getDoctype());  assertNull(d.getDocumentElement());  assertNull(d.getNamespaceURI());}  }
class C{  public boolean isEqualNode(Node arg){  if (arg == this) {    return true;  }  if (arg.getNodeType() != getNodeType()) {    return false;  }  if (getNodeName() == null) {    if (arg.getNodeName() != null) {      return false;    }  } else   if (!getNodeName().equals(arg.getNodeName())) {    return false;  }  if (getLocalName() == null) {    if (arg.getLocalName() != null) {      return false;    }  } else   if (!getLocalName().equals(arg.getLocalName())) {    return false;  }  if (getNamespaceURI() == null) {    if (arg.getNamespaceURI() != null) {      return false;    }  } else   if (!getNamespaceURI().equals(arg.getNamespaceURI())) {    return false;  }  if (getPrefix() == null) {    if (arg.getPrefix() != null) {      return false;    }  } else   if (!getPrefix().equals(arg.getPrefix())) {    return false;  }  if (getNodeValue() == null) {    if (arg.getNodeValue() != null) {      return false;    }  } else   if (!getNodeValue().equals(arg.getNodeValue())) {    return false;  }  return true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getAttributeNodeNS02.class,args);}  }
class C{  public BufferUnderflowException(){}  }
class C{  protected boolean scrollLineStart(TextView widget,Spannable buffer){  final int minScrollX=getScrollBoundsLeft(widget);  int scrollX=widget.getScrollX();  if (scrollX > minScrollX) {    widget.scrollTo(minScrollX,widget.getScrollY());    return true;  }  return false;}  }
class C{  @Override public long dynamicQueryCount(DynamicQuery dynamicQuery){  return fooPersistence.countWithDynamicQuery(dynamicQuery);}  }
class C{  @Override public void initializeForBranch(TemplateFile templateFile,Branch branch,String[] arguments,int lineNumber,List<LocalizableMessage> warnings) throws InitializationException {  initializeInternal(templateFile,arguments,lineNumber);}  }
class C{  public OperationWrapper(W operation){  this.operation=operation;}  }
class C{  public void readByteArray(byte[] arr,int offset) throws InvalidDataTypeException {  if (arr == null) {    throw new NullPointerException("Byte array is null");  }  if (offset < 0) {    throw new IllegalArgumentException("negativer offset into an array offset:" + offset);  }  if (offset >= arr.length) {    if (minLength == 0) {      value=(long)0;      return;    } else {      throw new InvalidDataTypeException("Offset to byte array is out of bounds: offset = " + offset + ", array.length = "+ arr.length);    }  }  long lvalue=0;  for (int i=offset; i < arr.length; i++) {    lvalue<<=8;    lvalue+=(arr[i] & 0xff);  }  value=lvalue;}  }
class C{  public HashPrintJobAttributeSet(PrintJobAttributeSet attributes){  super(attributes,PrintJobAttribute.class);}  }
class C{  TemplateEntry(final Branch branch){  dn=branch.getBranchDN();  template=null;  parentDN=null;}  }
class C{  public byte[] reverse(byte[] blob) throws TokenStrategyFailedException {  Reject.ifTrue(blob == null);  if (!isTokenValidForCompression(blob)) {    return blob;  }  return performUpdate(blob,replacement.inverseBidiMap());}  }
class C{  @Override public String toString(){  return "Packet [code=" + type.getTypeCode() + ",id="+ (id & 0xFF)+ "]";}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  childData=child.getData();  assertEquals("characterdataGetDataAssert","Margaret Martin",childData);}  }
class C{  public ECPResponse createECPResponse(String value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ECP_RESPONSE,value);  if (obj == null) {    return new ECPResponseImpl(value);  } else {    return (ECPResponse)obj;  }}  }
class C{  public ConnectionFieldParser(String connectionField){  this.lexer=new Lexer("charLexer",connectionField);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.secext.SecurityTokenReferenceType createSecurityTokenReferenceType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.secext.impl.SecurityTokenReferenceTypeImpl();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.SignatureTokenElement createSignatureTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.SignatureTokenElementImpl();}  }
class C{  @Override public void run(){  lastException=null;  boolean connCreated=false;  try (ConnectionWrapper conn=createConnectionWrapper()){    connCreated=true;    serverDescriptor=ServerDescriptor.createStandalone(conn,filter);    serverDescriptor.setAdsProperties(serverProperties);    serverDescriptor.updateAdsPropertiesWithServerProperties();  } catch (  AuthorizationException e) {    logger.warn(LocalizableMessage.raw("Permissions error reading server: " + lastLdapHostPort,e));    Type type=isAdministratorDn() ? TopologyCacheException.Type.NO_PERMISSIONS : TopologyCacheException.Type.NOT_GLOBAL_ADMINISTRATOR;    lastException=new TopologyCacheException(type,e,trustManager,lastLdapHostPort);  }catch (  AuthenticationException e) {    logger.warn(LocalizableMessage.raw("Authentication exception: " + lastLdapHostPort,e));    Type type=isAdministratorDn() ? TopologyCacheException.Type.GENERIC_READING_SERVER : TopologyCacheException.Type.NOT_GLOBAL_ADMINISTRATOR;    lastException=new TopologyCacheException(type,e,trustManager,lastLdapHostPort);  }catch (  LdapException e) {    logger.warn(LocalizableMessage.raw("LdapException error reading server: " + lastLdapHostPort,e));    Type type=connCreated ? TopologyCacheException.Type.GENERIC_READING_SERVER : TopologyCacheException.Type.GENERIC_CREATING_CONNECTION;    lastException=new TopologyCacheException(type,e,trustManager,lastLdapHostPort);  }catch (  Throwable t) {    if (!isInterrupted) {      logger.warn(LocalizableMessage.raw("Generic error reading server: " + lastLdapHostPort,t));      logger.warn(LocalizableMessage.raw("server Properties: " + serverProperties));      lastException=new TopologyCacheException(TopologyCacheException.Type.BUG,t);    }  } finally {    isOver=true;  }}  }
class C{  private ArrayList<Category> createCategories(){  ArrayList<Category> categories=new ArrayList<>();  LocalizableMessage[][] labels;  if (isWindows()) {    labels=new LocalizableMessage[][]{{INFO_CTRL_PANEL_CATEGORY_DIRECTORY_DATA.get(),INFO_CTRL_PANEL_ACTION_MANAGE_ENTRIES.get(),INFO_CTRL_PANEL_ACTION_NEW_BASEDN.get(),INFO_CTRL_PANEL_ACTION_IMPORT_LDIF.get(),INFO_CTRL_PANEL_ACTION_EXPORT_LDIF.get(),INFO_CTRL_PANEL_ACTION_BACKUP.get(),INFO_CTRL_PANEL_ACTION_RESTORE.get()},{INFO_CTRL_PANEL_CATEGORY_SCHEMA.get(),INFO_CTRL_PANEL_ACTION_MANAGE_SCHEMA.get()},{INFO_CTRL_PANEL_CATEGORY_INDEXES.get(),INFO_CTRL_PANEL_ACTION_MANAGE_INDEXES.get(),INFO_CTRL_PANEL_ACTION_VERIFY_INDEXES.get(),INFO_CTRL_PANEL_ACTION_REBUILD_INDEXES.get()},{INFO_CTRL_PANEL_CATEGORY_MONITORING.get(),INFO_CTRL_PANEL_BROWSE_GENERAL_MONITORING.get(),INFO_CTRL_PANEL_CONNECTION_HANDLER_MONITORING.get(),INFO_CTRL_PANEL_MANAGE_TASKS.get()},{INFO_CTRL_PANEL_CATEGORY_RUNTIME_OPTIONS.get(),INFO_CTRL_PANEL_ACTION_JAVA_SETTINGS.get(),INFO_CTRL_PANEL_ACTION_WINDOWS_SERVICE.get()}};  } else {    labels=new LocalizableMessage[][]{{INFO_CTRL_PANEL_CATEGORY_DIRECTORY_DATA.get(),INFO_CTRL_PANEL_ACTION_MANAGE_ENTRIES.get(),INFO_CTRL_PANEL_ACTION_NEW_BASEDN.get(),INFO_CTRL_PANEL_ACTION_IMPORT_LDIF.get(),INFO_CTRL_PANEL_ACTION_EXPORT_LDIF.get(),INFO_CTRL_PANEL_ACTION_BACKUP.get(),INFO_CTRL_PANEL_ACTION_RESTORE.get()},{INFO_CTRL_PANEL_CATEGORY_SCHEMA.get(),INFO_CTRL_PANEL_ACTION_MANAGE_SCHEMA.get()},{INFO_CTRL_PANEL_CATEGORY_INDEXES.get(),INFO_CTRL_PANEL_ACTION_MANAGE_INDEXES.get(),INFO_CTRL_PANEL_ACTION_VERIFY_INDEXES.get(),INFO_CTRL_PANEL_ACTION_REBUILD_INDEXES.get()},{INFO_CTRL_PANEL_CATEGORY_MONITORING.get(),INFO_CTRL_PANEL_BROWSE_GENERAL_MONITORING.get(),INFO_CTRL_PANEL_CONNECTION_HANDLER_MONITORING.get(),INFO_CTRL_PANEL_MANAGE_TASKS.get()},{INFO_CTRL_PANEL_CATEGORY_RUNTIME_OPTIONS.get(),INFO_CTRL_PANEL_ACTION_JAVA_SETTINGS.get()}};  }  ArrayList<Class<? extends StatusGenericPanel>> classes=new ArrayList<>();  classes.add(BrowseEntriesPanel.class);  classes.add(NewBaseDNPanel.class);  classes.add(ImportLDIFPanel.class);  classes.add(ExportLDIFPanel.class);  classes.add(BackupPanel.class);  classes.add(RestorePanel.class);  classes.add(BrowseSchemaPanel.class);  classes.add(BrowseIndexPanel.class);  classes.add(VerifyIndexPanel.class);  classes.add(RebuildIndexPanel.class);  classes.add(BrowseGeneralMonitoringPanel.class);  classes.add(ConnectionHandlerMonitoringPanel.class);  classes.add(ManageTasksPanel.class);  classes.add(JavaPropertiesPanel.class);  if (isWindows()) {    classes.add(WindowsServicePanel.class);  }  int classIndex=0;  for (  LocalizableMessage[] label : labels) {    Category category=new Category();    category.setName(label[0]);    for (int j=1; j < label.length; j++) {      Action action=new Action();      action.setName(label[j]);      action.setAssociatedPanel(classes.get(classIndex));      classIndex++;      category.getActions().add(action);    }    categories.add(category);  }  return categories;}  }
class C{  SessionMonitoringStore(ExecutorService executorService,SessionMonitoringTimingStoreFactory sessionMonitoringTimingStoreFactory,ConcurrentHashMap<SessionMonitorType,SessionMonitoringTimingStore> refreshStore,ConcurrentHashMap<SessionMonitorType,SessionMonitoringTimingStore> propertyStore,ConcurrentHashMap<SessionMonitorType,SessionMonitoringTimingStore> destroyStore,ConcurrentHashMap<SessionMonitorType,SessionMonitoringTimingStore> logoutStore){  this.executorService=executorService;  this.sessionMonitoringTimingStoreFactory=sessionMonitoringTimingStoreFactory;  this.refreshStore=refreshStore;  this.propertyStore=propertyStore;  this.destroyStore=destroyStore;  this.logoutStore=logoutStore;}  }
class C{  public void registerInterface(Class<? extends PluginLoader> loader) throws IllegalArgumentException {  PluginLoader instance;  if (PluginLoader.class.isAssignableFrom(loader)) {    Constructor<? extends PluginLoader> constructor;    try {      constructor=loader.getConstructor(Server.class);      instance=constructor.newInstance(server);    } catch (    NoSuchMethodException ex) {      String className=loader.getName();      throw new IllegalArgumentException(String.format("Class %s does not have a public %s(Server) constructor",className,className),ex);    }catch (    Exception ex) {      throw new IllegalArgumentException(String.format("Unexpected exception %s while attempting to construct a new instance of %s",ex.getClass().getName(),loader.getName()),ex);    }  } else {    throw new IllegalArgumentException(String.format("Class %s does not implement interface PluginLoader",loader.getName()));  }  Pattern[] patterns=instance.getPluginFileFilters();synchronized (this) {    for (    Pattern pattern : patterns) {      fileAssociations.put(pattern,instance);    }  }}  }
class C{  private byte convertV3ToV4Flags(byte v3Flag){  byte v4Flag=(byte)0;  if ((v3Flag & ID3v23Frame.StatusFlags.MASK_FILE_ALTER_PRESERVATION) != 0) {    v4Flag|=(byte)MASK_FILE_ALTER_PRESERVATION;  }  if ((v3Flag & ID3v23Frame.StatusFlags.MASK_TAG_ALTER_PRESERVATION) != 0) {    v4Flag|=(byte)MASK_TAG_ALTER_PRESERVATION;  }  return v4Flag;}  }
class C{  public OpenDJProvider(){  this((KeyStoreParameters)null);}  }
class C{  @Override public void messageDataReceived(ClusterMessage cmsg){  if (cmsg instanceof SessionMessage) {    SessionMessage msg=(SessionMessage)cmsg;switch (msg.getEventType()) {case SessionMessage.EVT_GET_ALL_SESSIONS:case SessionMessage.EVT_SESSION_CREATED:case SessionMessage.EVT_SESSION_EXPIRED:case SessionMessage.EVT_SESSION_ACCESSED:case SessionMessage.EVT_SESSION_DELTA:case SessionMessage.EVT_CHANGE_SESSION_ID:synchronized (receivedMessageQueue) {        if (receiverQueue) {          receivedMessageQueue.add(msg);          return;        }      }    break;default :  break;}messageReceived(msg,msg.getAddress() != null ? (Member)msg.getAddress() : null);}}  }
class C{  public void write(byte[] b,int off,int len) throws IOException {  if (def.finished()) {    throw new IOException("write beyond end of stream");  }  if ((off | len | (off + len)| (b.length - (off + len))) < 0) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }  if (!def.finished()) {    def.setInput(b,off,len);    while (!def.needsInput()) {      deflate();    }  }}  }
class C{  @Override public String toString(){  return this.getClass().getName() + '(' + getName()+ ':'+ getTypeInternal()+ ')';}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!AMSetupServlet.isCurrentConfigurationValid()) {    return;  }  ConfigFedMonitoring cm=new ConfigFedMonitoring();  cm.configureFedMonitoring();}  }
class C{  public Builder requiredAttributes(final String... nameOrOIDs){  return requiredAttributes(Arrays.asList(nameOrOIDs));}  }
class C{  public long roundTripTime() throws InterruptedException {  latch.await();  return received - sent;}  }
class C{  public static void marshal(Object jaxbObject,Writer xml){  _marshal(jaxbObject,xml);}  }
class C{  public TreeModelEvent(Object source,Object[] path,int[] childIndices,Object[] children){  this(source,new TreePath(path),childIndices,children);}  }
class C{  public PooledSoftReference(final SoftReference<T> reference){  super(null);  this.reference=reference;}  }
class C{  public BlowfishPasswordStorageSchemeTestCase(){  super("cn=Blowfish,cn=Password Storage Schemes,cn=config");}  }
class C{  public Segment(){  this(null,0,0);}  }
class C{  public final void lazySet(boolean newValue){  int v=newValue ? 1 : 0;  unsafe.putOrderedInt(this,valueOffset,v);}  }
class C{  @Override public Modification toModification() throws LDAPException {  return new Modification(modificationType,attribute.toAttribute());}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    serverTransaction=sipProvider.getNewServerTransaction(request);    dialog=(DialogExt)sipProvider.getNewDialog(serverTransaction);    dialog.disableSequenceNumberValidation();  } catch (  Exception e) {    e.printStackTrace();  }  for (int q=0; q < volume; q++) {    sentResponses++;    try {      Response okResponse=messageFactory.createResponse(180,request);      okResponse.addHeader(headerFactory.createHeader("Number",q + ""));      FromHeader from=(FromHeader)okResponse.getHeader(FromHeader.NAME);      from.removeParameter("tag");      Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");      ContactHeader contactHeader=headerFactory.createContactHeader(address);      ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);      toHeader.setTag("4321");      FromHeader fromHeader=(FromHeader)okResponse.getHeader(FromHeader.NAME);      fromHeader.setTag("12345");      okResponse.addHeader(contactHeader);      serverTransaction.sendResponse(okResponse);    } catch (    Exception ex) {      ex.printStackTrace();    }    if (q % 100 == 0)     System.out.println("Send " + q);  }  try {    Response okResponse=messageFactory.createResponse(200,request);    FromHeader from=(FromHeader)okResponse.getHeader(FromHeader.NAME);    from.removeParameter("tag");    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    FromHeader fromHeader=(FromHeader)okResponse.getHeader(FromHeader.NAME);    fromHeader.setTag("12345");    okResponse.addHeader(contactHeader);    serverTransaction.sendResponse(okResponse);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  protected void tearDown(){}  }
class C{  public static java.util.Date parseDate(String strDate,String pattern){  try {    SimpleDateFormat parser=new SimpleDateFormat(pattern,Locale.US);    return parser.parse(strDate);  } catch (  ParseException e) {    throw new JKException(e);  }}  }
class C{  public String createMemoryRealm(String parent) throws Exception {  MemoryRealm realm=new MemoryRealm();  ObjectName pname=new ObjectName(parent);  Container container=getParentContainerFromParent(pname);  container.setRealm(realm);  ObjectName oname=realm.getObjectName();  if (oname != null) {    return (oname.toString());  } else {    return null;  }}  }
class C{  public Response createResponse(int statusCode,Request request) throws ParseException {  if (request == null)   throw new NullPointerException("null parameters");  SIPRequest sipRequest=(SIPRequest)request;  SIPResponse sipResponse=sipRequest.createResponse(statusCode);  sipResponse.removeContent();  sipResponse.removeHeader(ContentTypeHeader.NAME);  if (server != null) {    sipResponse.setHeader(server);  }  return sipResponse;}  }
class C{  public void testHashCode(){  byte[] key=new byte[]{1,2,3,4,5};  String algorithm="Algorithm";  SecretKeySpec ks1=new SecretKeySpec(key,algorithm);  SecretKeySpec ks2=new SecretKeySpec(key,algorithm);  assertTrue("Equal objects should have the same hash codes.",ks1.hashCode() == ks2.hashCode());}  }
class C{  public WriterToASCI(OutputStream os){  m_os=os;}  }
class C{  static public void orthogonal(String p_s,RoutingBoard p_board){  Iterator<BrdItem> it=p_board.get_items().iterator();  while (it.hasNext()) {    BrdItem curr_ob=it.next();    if (curr_ob instanceof BrdTracep) {      BrdTracep curr_trace=(BrdTracep)curr_ob;      if (!curr_trace.polyline().is_orthogonal()) {        System.out.print(p_s);        System.out.println(": trace not orthogonal");        break;      }    }  }}  }
class C{  public final void testGetAlgParameters01() throws IOException {  boolean performed=false;  for (int i=0; i < EncryptedPrivateKeyInfoData.algName0.length; i++) {    try {      EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(EncryptedPrivateKeyInfoData.getValidEncryptedPrivateKeyInfoEncoding(EncryptedPrivateKeyInfoData.algName0[i][0]));      AlgorithmParameters apar=epki.getAlgParameters();      if (apar == null) {        continue;      }      assertTrue(Arrays.equals(EncryptedPrivateKeyInfoData.getParametersEncoding(EncryptedPrivateKeyInfoData.algName0[i][0]),apar.getEncoded()));      performed=true;    } catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  public void updateButtons(WizardStep step){  GuiApplication application=getApplication();  previousButton.setVisible(application.canGoBack(step));  if (application.canFinish(step)) {    finishButton.setVisible(true);    nextButton.setVisible(false);  } else {    finishButton.setVisible(false);    nextButton.setVisible(application.canGoForward(step));  }  quitButton.setVisible(!step.isProgressStep() && !step.isFinishedStep());  closeButton.setVisible(step.isProgressStep() || step.isFinishedStep());  closeButton.setEnabled(application.getCurrentProgressStep().isLast());  nextButton.setEnabled(!step.isLicenseStep() || LicenseFile.getApproval());}  }
class C{  public StringBuilder deleteCharAt(int index){  deleteCharAt0(index);  return this;}  }
class C{  static boolean isChild(ByteSequence parent,ByteSequence child){  if (child.length() <= parent.length() || child.byteAt(parent.length()) != NORMALIZED_RDN_SEPARATOR || !child.startsWith(parent)) {    return false;  }  boolean childSeparatorDetected=false;  for (int i=parent.length(); i < child.length(); i++) {    if (child.byteAt(i) == NORMALIZED_RDN_SEPARATOR) {      if (childSeparatorDetected) {        return false;      }      childSeparatorDetected=true;    }  }  return childSeparatorDetected;}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof PageAttributes)) {    return false;  }  PageAttributes rhs=(PageAttributes)obj;  return (color == rhs.color && media == rhs.media && orientationRequested == rhs.orientationRequested && origin == rhs.origin && printQuality == rhs.printQuality && printerResolution[0] == rhs.printerResolution[0] && printerResolution[1] == rhs.printerResolution[1] && printerResolution[2] == rhs.printerResolution[2]);}  }
class C{  public Collection<Token> query(final TokenFilter tokenFilter) throws CoreTokenException {  debug("Query: queued with Filter: {0}",tokenFilter);  ResultHandler<Collection<Token>,CoreTokenException> handler=handlerFactory.getQueryHandler();  dispatcher.query(tokenFilter,handler);  try {    Collection<Token> tokens=handler.getResults();    for (    Token token : tokens) {      reverseBlobStrategy(token);    }    debug("Query: returned {0} Tokens with Filter: {1}",tokens.size(),tokenFilter);    return tokens;  } catch (  CoreTokenException e) {    throw new QueryFailedException(tokenFilter,e);  }}  }
class C{  public boolean isVorbisSetupHeader(byte[] headerData){  String vorbis=Utils.getString(headerData,VorbisHeader.FIELD_CAPTURE_PATTERN_POS,VorbisHeader.FIELD_CAPTURE_PATTERN_LENGTH,"ISO-8859-1");  return !(headerData[VorbisHeader.FIELD_PACKET_TYPE_POS] != VorbisPacketType.SETUP_HEADER.getType() || !vorbis.equals(VorbisHeader.CAPTURE_PATTERN));}  }
class C{  protected void error(String err,String arg1,String arg2,String arg3){  handleError(ln,err + " " + arg1+ " "+ arg2+ " "+ arg3);}  }
class C{  public static DeleteRequest newDeleteRequest(final DN dn){  return Requests.newDeleteRequest(dn).addControl(TransactionIdControl.newControl(AuditRequestContext.createSubTransactionIdValue()));}  }
class C{  private boolean matchCerts(CodeSource that,boolean strict){  boolean match;  if (certs == null && signers == null) {    if (strict) {      return (that.certs == null && that.signers == null);    } else {      return true;    }  } else   if (signers != null && that.signers != null) {    if (strict && signers.length != that.signers.length) {      return false;    }    for (int i=0; i < signers.length; i++) {      match=false;      for (int j=0; j < that.signers.length; j++) {        if (signers[i].equals(that.signers[j])) {          match=true;          break;        }      }      if (!match)       return false;    }    return true;  } else   if (certs != null && that.certs != null) {    if (strict && certs.length != that.certs.length) {      return false;    }    for (int i=0; i < certs.length; i++) {      match=false;      for (int j=0; j < that.certs.length; j++) {        if (certs[i].equals(that.certs[j])) {          match=true;          break;        }      }      if (!match)       return false;    }    return true;  }  return false;}  }
class C{  public void adjust(ServerState state){  for (  CSN csn : state) {    adjust(csn);  }}  }
class C{  public HOTPService(AMIdentityRepository amIdentityRepo,String userName,HOTPParams hotpParams){  this.amIdentityRepo=amIdentityRepo;  this.userName=userName;  this.gatewaySMSImplClass=hotpParams.getGatewaySMSImplClass();  this.codeValidityDuration=hotpParams.getCodeValidityDuration();  this.codeLength=hotpParams.getCodeLength();  this.codeDelivery=hotpParams.getCodeDelivery();  this.telephoneAttribute=hotpParams.getTelephoneLdapAttributeName();  this.carrierAttribute=hotpParams.getCarrierLdapAttributeName();  this.emailAttribute=hotpParams.getEmailLdapAttributeName();  this.currentConfig=hotpParams.getConfig();  this.messageSubject=hotpParams.getMessageSubject();  this.messageContent=hotpParams.getMessageContent();  this.fromAddressAttributeName=hotpParams.getFromAddressAttributeName();  this.userSearchAttributes=hotpParams.getUserSearchAttributes();  try {    secureRandom=SecureRandom.getInstance("SHA1PRNG");  } catch (  NoSuchAlgorithmException ex) {    DEBUG.error("HOTP.HOTP() : HOTP : Initialization Failed",ex);    secureRandom=null;  }}  }
class C{  public boolean isEmpty(){  if (hmap == null) {    return true;  }  return hmap.isEmpty();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.StatusMessageElement createStatusMessageElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.StatusMessageElementImpl(value);}  }
class C{  protected void viewChange(final Member[] view){}  }
class C{  public Link(String text,PdfLinkAnnotation linkAnnotation){  super(text);  this.linkAnnotation=linkAnnotation;  setRole(PdfName.Link);}  }
class C{  public static String composeLangSelector(String arrayName,String langName){  return arrayName + "[?xml:lang=\"" + Utils.normalizeLangValue(langName)+ "\"]";}  }
class C{  private Node<K,V> findPredecessor(Object key,Comparator<? super K> cmp){  if (key == null)   throw new NullPointerException();  for (; ; ) {    for (Index<K,V> q=head, r=q.right, d; ; ) {      if (r != null) {        Node<K,V> n=r.node;        K k=n.key;        if (n.value == null) {          if (!q.unlink(r))           break;          r=q.right;          continue;        }        if (cpr(cmp,key,k) > 0) {          q=r;          r=r.right;          continue;        }      }      if ((d=q.down) == null)       return q.node;      q=d;      r=d.right;    }  }}  }
class C{  public SQLTimeoutException(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);}  }
class C{  @Override public void enqueueCall(Callback<DirectionsResponse> callback){  getCall().enqueue(callback);}  }
class C{  static void loadActionMap(LazyActionMap map){  map.put(new Actions(Actions.PRESS));  map.put(new Actions(Actions.RELEASE));}  }
class C{  public AccountNotFoundException(String msg){  super(msg);}  }
class C{  public PlaSegmentFloat segment_projection_2(PlaSegmentFloat p_line_segment){  if (p_line_segment.point_a.scalar_product(p_line_segment.point_b,point_b) <= 0) {    return null;  }  if (p_line_segment.point_b.scalar_product(p_line_segment.point_a,point_a) <= 0) {    return null;  }  PlaPointFloat projected_a;  if (p_line_segment.point_a.scalar_product(p_line_segment.point_b,point_a) < 0) {    PlaSegmentFloat curr_perpendicular_line=new PlaSegmentFloat(p_line_segment.point_a,p_line_segment.point_b.rotate_90_deg(1,p_line_segment.point_a));    projected_a=curr_perpendicular_line.intersection(this);    if (projected_a == null || Math.abs(projected_a.v_x) >= PlaLimits.CRIT_INT || Math.abs(projected_a.v_y) >= PlaLimits.CRIT_INT) {      return null;    }  } else {    projected_a=point_a;  }  PlaPointFloat projected_b;  if (p_line_segment.point_b.scalar_product(p_line_segment.point_a,point_b) < 0) {    PlaSegmentFloat curr_perpendicular_line=new PlaSegmentFloat(p_line_segment.point_b,p_line_segment.point_a.rotate_90_deg(1,p_line_segment.point_b));    projected_b=curr_perpendicular_line.intersection(this);    if (projected_b == null || Math.abs(projected_b.v_x) >= PlaLimits.CRIT_INT || Math.abs(projected_b.v_y) >= PlaLimits.CRIT_INT) {      return null;    }  } else {    projected_b=point_b;  }  return new PlaSegmentFloat(projected_a,projected_b);}  }
class C{  public void writeExif(InputStream jpegStream,String exifOutFileName) throws FileNotFoundException, IOException {  if (jpegStream == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=null;  try {    s=getExifWriterStream(exifOutFileName);    doExifStreamIO(jpegStream,s);    s.flush();  } catch (  IOException e) {    closeSilently(s);    throw e;  }  s.close();}  }
class C{  public SIPHeader parse() throws ParseException {  PathList pathList=new PathList();  if (debug)   dbg_enter("PathParser.parse");  try {    this.lexer.match(TokenTypes.PATH);    this.lexer.SPorHT();    this.lexer.match(':');    this.lexer.SPorHT();    while (true) {      Path path=new Path();      super.parse(path);      pathList.add(path);      this.lexer.SPorHT();      char la=lexer.lookAhead(0);      if (la == ',') {        this.lexer.match(',');        this.lexer.SPorHT();      } else       if (la == '\n')       break; else       throw createParseException("unexpected char");    }    return pathList;  }  finally {    if (debug)     dbg_leave("PathParser.parse");  }}  }
class C{  public void login(Subject subject) throws AuthLoginException {  login(null,null,null,null,subject);}  }
class C{  private boolean handleCallbacksInternally(HttpServletRequest request,HttpServletResponse response,Callback[] callbacks) throws RestAuthException {  for (  Callback callback : callbacks) {    RestAuthCallbackHandler restAuthCallbackHandler=restAuthCallbackHandlerFactory.getRestAuthCallbackHandler(callback.getClass());    if (!restAuthCallbackHandler.updateCallbackFromRequest(request,response,callback)) {      return false;    }  }  return true;}  }
class C{  public static int locToBlock(double loc){  return NumberConversions.floor(loc);}  }
class C{  @Override public String toString(){  if (filterConfig == null)   return ("TimingFilter()");  StringBuilder sb=new StringBuilder("TimingFilter(");  sb.append(filterConfig);  sb.append(")");  return (sb.toString());}  }
class C{  public ConfigException(LocalizableMessage message,Throwable cause){  super(message,cause);}  }
class C{  public static Map<String,File> filesInDirectory(String dir,String regex,boolean recursively){  return filesInDirectory(new File(dir),regex,recursively);}  }
class C{  public static String generateAssertionHandle(){  if (random == null) {    return null;  }  byte bytes[]=new byte[SAMLConstants.ID_LENGTH];  random.nextBytes(bytes);  String id=null;  try {    id=SystemConfigurationUtil.getServerID(SAMLServiceManager.getServerProtocol(),SAMLServiceManager.getServerHost(),Integer.parseInt(SAMLServiceManager.getServerPort()),SAMLServiceManager.getServerURI());  } catch (  Exception ex) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("SAMLUtil:generateAssertionHandle: " + "exception obtain serverID:",ex);    }  }  if (id != null) {    byte idBytes[]=stringToByteArray(id);    if (idBytes.length < bytes.length) {      for (int i=1; i <= idBytes.length; i++) {        bytes[bytes.length - i]=idBytes[idBytes.length - i];      }    }  }  return byteArrayToString(bytes);}  }
class C{  @KnownFailure("Fixed in DonutBurger, boundary checks missing") public void test_unwrap_02() throws SSLException {  String host="new host";  int port=8080;  ByteBuffer[] bbA={ByteBuffer.allocate(100),ByteBuffer.allocate(10),ByteBuffer.allocate(100)};  ByteBuffer bb=ByteBuffer.allocate(10);  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.unwrap(bb,bbA,-1,3);    fail("IndexOutOfBoundsException wasn't thrown");  } catch (  IndexOutOfBoundsException iobe) {  }  try {    sse.unwrap(bb,bbA,0,-3);    fail("IndexOutOfBoundsException wasn't thrown");  } catch (  IndexOutOfBoundsException iobe) {  }  try {    sse.unwrap(bb,bbA,bbA.length + 1,bbA.length);    fail("IndexOutOfBoundsException wasn't thrown");  } catch (  IndexOutOfBoundsException iobe) {  }  try {    sse.unwrap(bb,bbA,0,bbA.length + 1);    fail("IndexOutOfBoundsException wasn't thrown");  } catch (  IndexOutOfBoundsException iobe) {  }}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  m_resultContentHandler.ignorableWhitespace(ch,start,length);}  }
class C{  public static String toAlphabetNumber(int number,char[] alphabet){  if (number < 1) {    throw new IllegalArgumentException("The parameter must be a positive integer");  }  int cardinality=alphabet.length;  number--;  int bytes=1;  int start=0;  int symbols=cardinality;  while (number >= symbols + start) {    bytes++;    start+=symbols;    symbols*=cardinality;  }  int c=number - start;  char[] value=new char[bytes];  while (bytes > 0) {    value[--bytes]=alphabet[c % cardinality];    c/=cardinality;  }  return new String(value);}  }
class C{  public Polypoint revert_corners(){  int corner_count=point_alist.size();  int from_idx=corner_count - 1;  ArrayList<PlaPointInt> reverse_corner_arr=new ArrayList<PlaPointInt>(corner_count);  for (int index=0; index < corner_count; ++index)   reverse_corner_arr.add(point_alist.get(from_idx--));  return new Polypoint(reverse_corner_arr);}  }
class C{  private static void test_directGetResourceAsStream(Configuration config) throws Exception {  test_directGetResourceAsStream(config,"test/Resource1.txt","Muffins are tasty!\n");}  }
class C{  void deleteEntry(WriteableTransaction txn,Entry entry) throws StorageRuntimeException {  Set<String> labeledURIs=entry.getReferralURLs();  if (labeledURIs != null) {    delete(txn,entry.getName());  }}  }
class C{  @KnownFailure("Wildcard operator does not seem wo work correctly.") public void test_getColumnsSpecific() throws SQLException {  String[] tablesName={DatabaseCreator.TEST_TABLE1,DatabaseCreator.TEST_TABLE3};  String[] fields={"id","field1","field2","field3","fkey"};  String[] nullable={"YES","NO",""};  int[] nullableInt={DatabaseMetaData.columnNoNulls,DatabaseMetaData.columnNullable,DatabaseMetaData.columnNullableUnknown};  Arrays.sort(tablesName);  Arrays.sort(fields);  Arrays.sort(nullableInt);  Arrays.sort(nullable);  int countSingle=0;  int countAll1=0;  int countAll2=0;  try {    ResultSet rs=meta.getColumns(null,null,DatabaseCreator.TEST_TABLE1,"%");    while (rs.next()) {      assertTrue("Invalid table name",Arrays.binarySearch(tablesName,rs.getString("TABLE_NAME")) > -1);      assertTrue("Invalid field name",Arrays.binarySearch(fields,rs.getString("COLUMN_NAME")) > -1);      assertTrue("Invalid nullable value",Arrays.binarySearch(nullable,rs.getString("IS_NULLABLE")) > -1);      assertTrue("Invalid nullable code",Arrays.binarySearch(nullableInt,rs.getInt("NULLABLE")) > -1);      countSingle++;    }    assertEquals("Not all results are found",5,countSingle);    rs.close();  } catch (  SQLException e) {    fail("Unexpected exception: " + e.getMessage());  }  try {    ResultSet rs=meta.getColumns(null,null,"%" + DatabaseCreator.CREATE_TABLE1.substring(0,3) + "%","%");    while (rs.next()) {      assertTrue("Wrong table name",Arrays.binarySearch(tablesName,rs.getString("TABLE_NAME")) > -1);      countAll1++;    }    assertEquals("Not all results are found",6,countAll1);    rs.close();  } catch (  SQLException e) {    fail("Unexpected exception: " + e.getMessage());  }  try {    ResultSet rs=meta.getColumns(null,null,"%TEST_%","%");    while (rs.next()) {      assertTrue("Wrong table name",Arrays.binarySearch(tablesName,rs.getString("TABLE_NAME")) > -1);      countAll2++;    }    assertEquals("Not all results are found",6,countAll2);    rs.close();  } catch (  SQLException e) {    fail("Unexpected exception: " + e.getMessage());  }  conn.close();  try {    meta.getColumns(null,null,DatabaseCreator.TEST_TABLE1,"%");    fail("SQLException not thrown");  } catch (  SQLException e) {  }}  }
class C{  public ModifyDNOperation processModifyDN(ModifyDNChangeRecordEntry modifyDNRecord){  return processModifyDN(modifyDNRecord.getDN(),modifyDNRecord.getNewRDN(),modifyDNRecord.deleteOldRDN(),modifyDNRecord.getNewSuperiorDN());}  }
class C{  static void updateBase64(JTextComponent base64,byte[] bytes){  if (bytes.length < MAX_BASE64_TO_DISPLAY) {    BinaryValue value=BinaryValue.createBase64(bytes);    base64.setText(value.getBase64());  } else {    base64.setText(INFO_CTRL_PANEL_SPECIFY_CONTENTS_IN_BASE64.get().toString());  }}  }
class C{  public Entry duplicate(boolean processVirtual){  Map<ObjectClass,String> objectClassesCopy=new HashMap<>(objectClasses);  Map<AttributeType,List<Attribute>> userAttrsCopy=new HashMap<>(userAttributes.size());  deepCopy(userAttributes,userAttrsCopy,false,false,false,true,false);  Map<AttributeType,List<Attribute>> operationalAttrsCopy=new HashMap<>(operationalAttributes.size());  deepCopy(operationalAttributes,operationalAttrsCopy,false,false,false,true,false);  for (  AttributeType t : suppressedAttributes.keySet()) {    List<Attribute> attrList=suppressedAttributes.get(t);    if (t.isOperational()) {      operationalAttrsCopy.put(t,attrList);    } else {      userAttrsCopy.put(t,attrList);    }  }  Entry e=new Entry(dn,objectClassesCopy,userAttrsCopy,operationalAttrsCopy);  if (processVirtual) {    e.processVirtualAttributes();  }  return e;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  if (serialVersionOnStream < 1) {    setAlignment(this.align);  }  serialVersionOnStream=currentSerialVersion;}  }
class C{  private static void checkUpdate() throws Exception {  Cache cache=Cache.getCache(getApplicationName(),CacheType.Persistent);  Document dom=cache.xml("update.url",null).expire(Cache.ONE_WEEK).retry(0).get();  final Map<String,String> update=streamElements(dom.getFirstChild()).collect(toMap(null,null));  int latestRev=Integer.parseInt(update.get("revision"));  int currentRev=getApplicationRevisionNumber();  if (latestRev > currentRev && currentRev > 0) {    SwingUtilities.invokeLater(null);  }}  }
class C{  private int doEndOfFile() throws EOFException {  eof=true;  if (throwEofException) {    throw new EOFException();  }  return -1;}  }
class C{  public static void removeAuthContext(SessionID sid){  com.iplanet.dpro.session.service.InternalSession is=AuthD.getSession(sid);  if (is != null) {    is.clearAuthContext();  }}  }
class C{  public static DsnRuleLayer read_layer_rule_scope(JflexScanner p_scanner){  try {    Collection<String> layer_names=new LinkedList<String>();    Collection<DsnRule> rule_list=new LinkedList<DsnRule>();    for (; ; ) {      p_scanner.yybegin(DsnFileScanner.LAYER_NAME);      Object next_token=p_scanner.next_token();      if (next_token == DsnKeyword.OPEN_BRACKET) {        break;      }      if (!(next_token instanceof String)) {        System.out.println("Rule.read_layer_rule_scope: string expected");        return null;      }      layer_names.add((String)next_token);    }    for (; ; ) {      Object next_token=p_scanner.next_token();      if (next_token == DsnKeyword.CLOSED_BRACKET) {        break;      }      if (next_token != DsnKeyword.RULE) {        System.out.println("Rule.read_layer_rule_scope: rule expected");        return null;      }      rule_list.addAll(read_scope(p_scanner));    }    return new DsnRuleLayer(layer_names,rule_list);  } catch (  java.io.IOException e) {    System.out.println("Rule.read_layer_rule_scope: IO error scanning file");    return null;  }}  }
class C{  public boolean equals(Object o){  if (o == this) {    return true;  }  if (o instanceof TabSet) {    TabSet ts=(TabSet)o;    int count=getTabCount();    if (ts.getTabCount() != count) {      return false;    }    for (int i=0; i < count; i++) {      TabStop ts1=getTab(i);      TabStop ts2=ts.getTab(i);      if ((ts1 == null && ts2 != null) || (ts1 != null && !getTab(i).equals(ts.getTab(i)))) {        return false;      }    }    return true;  }  return false;}  }
class C{  public LdapName(List<Rdn> rdns){  this.rdns=new ArrayList<>(rdns.size());  for (int i=0; i < rdns.size(); i++) {    Object obj=rdns.get(i);    if (!(obj instanceof Rdn)) {      throw new IllegalArgumentException("Entry:" + obj + "  not a valid type;list entries must be of type Rdn");    }    this.rdns.add((Rdn)obj);  }}  }
class C{  public int read() throws IOException {  int len=read(rbuf,0,1);  if (len <= 0)   return -1;  return (rbuf[0] & 0xFF);}  }
class C{  public static char[] toCharArray(InputStream is) throws IOException {  return toCharArray(is,Charset.defaultCharset());}  }
class C{  public boolean isAfter(YearMonth other){  return compareTo(other) > 0;}  }
class C{  public MBeanNotificationInfo(String[] notifTypes,String name,String description,Descriptor descriptor){  super(name,description,descriptor);  this.types=(notifTypes != null && notifTypes.length > 0) ? notifTypes.clone() : NO_TYPES;  this.arrayGettersSafe=MBeanInfo.arrayGettersSafe(this.getClass(),MBeanNotificationInfo.class);}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.ActionType createActionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.ActionTypeImpl();}  }
class C{  public final boolean check_item_move(BrdItem p_item,PlaVectorInt p_vector,Collection<BrdItem> p_ignore_items){  int net_count=p_item.net_nos.size();  if (net_count > 1) {    System.err.println(classname + "check_item_move: net_count > 1");    return false;  }  int contact_count=0;  contact_count=p_item.get_all_contacts().size();  if (p_item instanceof BrdTracep && contact_count > 0)   return false;  if (p_ignore_items != null)   p_ignore_items.add(p_item);  for (int index=0; index < p_item.tile_shape_count(); ++index) {    ShapeTile moved_shape=(ShapeTile)p_item.tile_shape_get(index).translate_by(p_vector);    if (!moved_shape.is_contained_in(bounding_box))     return false;    Set<BrdItem> obstacles=overlapping_items_with_clearance(moved_shape,p_item.shape_layer(index),p_item.net_nos,p_item.clearance_idx());    for (    BrdItem curr_item : obstacles) {      if (p_ignore_items != null) {        if (!p_ignore_items.contains(curr_item)) {          if (curr_item.is_obstacle(p_item))           return false;        }      } else       if (curr_item != p_item) {        if (curr_item.is_obstacle(p_item))         return false;      }    }  }  return true;}  }
class C{  public void removeVetoableChangeListener(String name,VetoableChangeListener vcl){  vcSupport.removeVetoableChangeListener(name,vcl);}  }
class C{  public boolean is_via_snap_to_smd_center(){  return via_snap_to_smd_center;}  }
class C{  @ApiOperation(value="get the index status",notes=" ",response=IndexCreatedEvent.class) @ApiModelRequest(model=IndexCreatedEvent.class,required=true,modelName="IndexCreatedEvent") public IndexCreatedEvent read(Request request,Response response){  String id=request.getHeader(Constants.Url.INDEX_STATUS,"No index status id provided.");  IndexCreatedEvent status=indexes.status(UUID.fromString(id));  HyperExpress.bind(Constants.Url.TABLE,status.getIndex().getTableName()).bind(Constants.Url.DATABASE,status.getIndex().getDatabaseName()).bind(Constants.Url.INDEX,status.getIndex().getName()).bind(Constants.Url.INDEX_STATUS,status.getUuid().toString());  return status;}  }
class C{  private void createTokenOperationsTable(SnmpMib myMib,TableCtsTokenOperationsTable table,List<TokenEntry> tokenEntries) throws SnmpStatusException {  CtsPersistenceOperationsMonitor ctsPersistenceOperationsMonitor=InjectorHolder.getInstance(CtsPersistenceOperationsMonitor.class);  for (  TokenEntry te : tokenEntries) {    final CtsTokenOperationsEntry entry=new CtsTokenOperationsEntryImpl(myMib,debug,ctsPersistenceOperationsMonitor);    entry.TokenTableIndex=te.TokenTableIndex;    table.addEntry(entry);  }}  }
class C{  void resetToPreferredSizes(int availableSize){  int[] testSizes=getPreferredSizes();  int totalSize=0;  for (int counter=0; counter < 3; counter++) {    if (testSizes[counter] != -1) {      totalSize+=testSizes[counter];    }  }  if (totalSize > availableSize) {    testSizes=getMinimumSizes();    totalSize=0;    for (int counter=0; counter < 3; counter++) {      if (testSizes[counter] != -1) {        totalSize+=testSizes[counter];      }    }  }  setSizes(testSizes);  distributeSpace(availableSize - totalSize,false);}  }
class C{  private void putResize(long key,V value){  if (key == 0) {    zeroValue=value;    hasZeroValue=true;    return;  }  int index1=(int)(key & mask);  long key1=keyTable[index1];  if (key1 == EMPTY) {    keyTable[index1]=key;    valueTable[index1]=value;    if (size++ >= threshold)     resize(capacity << 1);    return;  }  int index2=hash2(key);  long key2=keyTable[index2];  if (key2 == EMPTY) {    keyTable[index2]=key;    valueTable[index2]=value;    if (size++ >= threshold)     resize(capacity << 1);    return;  }  int index3=hash3(key);  long key3=keyTable[index3];  if (key3 == EMPTY) {    keyTable[index3]=key;    valueTable[index3]=value;    if (size++ >= threshold)     resize(capacity << 1);    return;  }  push(key,value,index1,key1,index2,key2,index3,key3);}  }
class C{  private String modifyEntry(String entry,MsgContactElement mse){  StringBuffer sb=new StringBuffer(200);  DSTString dstString=mse.getNick();  if (dstString != null) {    sb.append("Nick").append("=").append(dstString.getValue()).append("|");  }  dstString=mse.getLComment();  if (dstString != null) {    sb.append("LComment").append("=").append(dstString.getValue()).append("|");  }  dstString=mse.getMsgProvider();  if (dstString != null) {    sb.append("MsgProvider").append("=").append(dstString.getValue()).append("|");  }  dstString=mse.getMsgAccount();  if (dstString != null) {    sb.append("MsgAccount").append("=").append(dstString.getValue()).append("|");  }  dstString=mse.getMsgSubaccount();  if (dstString != null) {    sb.append("MsgSubAccount").append("=").append(dstString.getValue()).append("|");  }  DSTURI dstURI=(DSTURI)mse.getMsgType().get(0);  if (dstURI != null) {    sb.append("MsgType").append("=").append(dstURI.getValue()).append("|");  }  dstURI=(DSTURI)mse.getMsgMethod().get(0);  if (dstURI != null) {    sb.append("MsgMethod").append("=").append(dstURI.getValue()).append("|");  }  dstURI=(DSTURI)mse.getMsgTechnology().get(0);  if (dstURI != null) {    sb.append("MsgTechnology").append("=").append(dstURI.getValue());  }  String id=mse.getId();  if (id != null) {    sb.append("id").append("=").append(id);  }  return sb.toString();}  }
class C{  public void testGetCommonPropertyType02(){  BeanNameELResolver resolver=createBeanNameELResolver();  Object result=resolver.getCommonPropertyType(null,new Object());  Assert.assertNull(result);}  }
class C{  @Override public boolean equals(Object x){  return this == x || x instanceof MethodType && equals((MethodType)x);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String schemaType=getStringOptionValue(IArgument.SCHEMA_TYPE);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String subSchemaName=getStringOptionValue(IArgument.SUBSCHEMA_NAME);  String attributeName=getStringOptionValue(IArgument.ATTRIBUTE_NAME);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  List choiceValues=rc.getOption(IArgument.CHOICE_VALUES);  boolean toAdd=isOptionSet(ARGUMENT_ADD);  if ((datafile == null) && (choiceValues == null)) {    throw new CLIException(getResourceString("missing-choicevalues"),ExitCodes.INCORRECT_OPTION,rc.getSubCommand().getName());  }  Map attributeValues=AttributeValues.parse(getCommandManager(),datafile,choiceValues);  ServiceSchema ss=getServiceSchema();  IOutput outputWriter=getOutputWriter();  String[] params={serviceName,schemaType,subSchemaName,attributeName};  if (toAdd) {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_ADD_ATTRIBUTE_SCHEMA_CHOICE_VALUES",params);  } else {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SET_ATTRIBUTE_SCHEMA_CHOICE_VALUES",params);  }  try {    AttributeSchema attrSchema=ss.getAttributeSchema(attributeName);    if (attrSchema == null) {      String[] args={serviceName,schemaType,subSchemaName,attributeName,"attribute schema does not exist"};      attributeSchemaNoExist(attributeName,(toAdd) ? "FAILED_ADD_ATTRIBUTE_SCHEMA_CHOICE_VALUES" : "FAILED_SET_ATTRIBUTE_SCHEMA_CHOICE_VALUES",args);    }    if (toAdd) {      addChoiceValues(attrSchema,attributeValues);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_ADD_ATTRIBUTE_SCHEMA_CHOICE_VALUES",params);    } else {      setChoiceValues(attrSchema,attributeValues);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_SET_ATTRIBUTE_SCHEMA_CHOICE_VALUES",params);    }    outputWriter.printlnMessage(MessageFormat.format(getResourceString("attribute-schema-set-choice-value-succeed"),(Object[])params));  } catch (  SSOException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeName,e.getMessage()};    debugError("SetAttributeSchemaChoiceValues.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,(toAdd) ? "FAILED_ADD_ATTRIBUTE_SCHEMA_CHOICE_VALUES" : "FAILED_SET_ATTRIBUTE_SCHEMA_CHOICE_VALUES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeName,e.getMessage()};    debugError("SetAttributeSchemaChoiceValues.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,(toAdd) ? "FAILED_ADD_ATTRIBUTE_SCHEMA_CHOICE_VALUES" : "FAILED_SET_ATTRIBUTE_SCHEMA_CHOICE_VALUES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr newAttribute;  String name;  Attr setAttr;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(2);  newAttribute=doc.createAttribute("street");  setAttr=testEmployee.setAttributeNode(newAttribute);  name=testEmployee.getAttribute("street");  assertEquals("elementReplaceExistingAttributeAssert","",name);}  }
class C{  public void addSeparator(){  ensurePopupMenuCreated();  popupMenu.addSeparator();}  }
class C{  public Pattern pattern(){  return parentPattern;}  }
class C{  private void migrateInternal(int operationType,InstFinderInteractionsRunner iFinderRunner,InstallState installState,InstallLogger migrateLog) throws InstallException {  InteractionsRunner iRunner=new InteractionsRunner(getRunInfo(),null);  iRunner.setStateAccess(installState.getStateAccess());  executeInteractionsAndTasks(iRunner,migrateLog);  updateStateInformation(iFinderRunner,iRunner,migrateLog);}  }
class C{  private void tryScrollBackToTopAbortRefresh(){  tryScrollBackToTop();}  }
class C{  private boolean needsRenaming(String name){  return name.contains(shellPkg);}  }
class C{  public AuthSchemeCondition(){  this(PrivilegeManager.debug,new EntitlementCoreWrapper(),TimeService.SYSTEM);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public static List<Foo> findByUuid_C(java.lang.String uuid,long companyId){  return getPersistence().findByUuid_C(uuid,companyId);}  }
class C{  @Override public void handle(Callback[] callbacks) throws UnsupportedCallbackException {  if (saslMechanism == null) {    LocalizableMessage message=ERR_LDAPAUTH_NONSASL_CALLBACK_INVOCATION.get(getBacktrace());    throw new UnsupportedCallbackException(callbacks[0],message.toString());  } else   if (saslMechanism.equals(SASL_MECHANISM_GSSAPI)) {    for (    Callback cb : callbacks) {      if (cb instanceof NameCallback) {        ((NameCallback)cb).setName(gssapiAuthID);      } else       if (cb instanceof PasswordCallback) {        if (gssapiAuthPW == null) {          System.out.print(INFO_LDAPAUTH_PASSWORD_PROMPT.get(gssapiAuthID));          try {            gssapiAuthPW=ConsoleApplication.readPassword();          } catch (          ClientException e) {            throw new UnsupportedCallbackException(cb,e.getLocalizedMessage());          }        }        ((PasswordCallback)cb).setPassword(gssapiAuthPW);      } else {        LocalizableMessage message=ERR_LDAPAUTH_UNEXPECTED_GSSAPI_CALLBACK.get(cb);        throw new UnsupportedCallbackException(cb,message.toString());      }    }  } else {    LocalizableMessage message=ERR_LDAPAUTH_UNEXPECTED_CALLBACK_INVOCATION.get(saslMechanism,getBacktrace());    throw new UnsupportedCallbackException(callbacks[0],message.toString());  }}  }
class C{  public void push(final long value){  if (value == 0L || value == 1L) {    mv.visitInsn(Opcodes.LCONST_0 + (int)value);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  private RebuildConfig initializeRebuildIndexConfiguration(final DN rebuildBaseDN){  final RebuildConfig config=new RebuildConfig();  config.setBaseDN(rebuildBaseDN);  for (  final String s : indexList.getValues()) {    config.addRebuildIndex(s);  }  if (rebuildAll.isPresent()) {    config.setRebuildMode(RebuildMode.ALL);  } else   if (rebuildDegraded.isPresent()) {    config.setRebuildMode(RebuildMode.DEGRADED);  } else {    if (clearDegradedState.isPresent()) {      config.isClearDegradedState(true);    }    config.setRebuildMode(RebuildMode.USER_DEFINED);  }  config.setTmpDirectory(tmpDirectory.getValue());  return config;}  }
class C{  private NameValue phone_context() throws ParseException {  lexer.match('=');  char la=lexer.lookAhead(0);  Object value;  if (la == '+') {    lexer.consume(1);    value="+" + base_phone_number();  } else   if (Lexer.isAlphaDigit(la)) {    Token t=lexer.match(Lexer.ID);    value=t.getTokenValue();  } else {    throw new ParseException("Invalid phone-context:" + la,-1);  }  return new NameValue("phone-context",value,false);}  }
class C{  public synchronized void runTask(HeadTaskRunnable toRun){  this.task=toRun;  this.notify();}  }
class C{  public void login(IndexType indexType,String indexName,String[] params) throws AuthLoginException {  login(indexType,indexName,params,null,null,null);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.nist.gov";  String localName="district";  String qualifiedName="emp:district";  Document doc;  NodeList elementList;  Element testAddr;  String attrValue;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  attrValue=testAddr.getAttributeNS(namespaceURI,localName);  assertEquals("attrValue","DISTRICT",attrValue);}  }
class C{  @Override public void write(ASN1Writer stream) throws IOException {  stream.writeOctetString(OP_TYPE_DELETE_REQUEST,dn);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public CrestQuery(String queryIdPattern){  this(queryIdPattern,null,null);}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  doGet(request,response);}  }
class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB) public static void pickImage(Context context,Fragment fragment,int requestCode){  try {    fragment.startActivityForResult(getImagePicker(),requestCode);  } catch (  ActivityNotFoundException e) {    showImagePickerError(context);  }}  }
class C{  boolean isNavigatable(int offset){  if (!getAllowsInvalid()) {    return (offset < getMaxLength() && !isLiteral(offset));  }  return true;}  }
class C{  public void init(boolean forWrapping,CipherParameters param){  this.forWrapping=forWrapping;  this.engine=new CBCBlockCipher(new DESedeEngine());  SecureRandom sr;  if (param instanceof ParametersWithRandom) {    ParametersWithRandom pr=(ParametersWithRandom)param;    param=pr.getParameters();    sr=pr.getRandom();  } else {    sr=new SecureRandom();  }  if (param instanceof KeyParameter) {    this.param=(KeyParameter)param;    if (this.forWrapping) {      this.iv=new byte[8];      sr.nextBytes(iv);      this.paramPlusIV=new ParametersWithIV(this.param,this.iv);    }  } else   if (param instanceof ParametersWithIV) {    this.paramPlusIV=(ParametersWithIV)param;    this.iv=this.paramPlusIV.getIV();    this.param=(KeyParameter)this.paramPlusIV.getParameters();    if (this.forWrapping) {      if ((this.iv == null) || (this.iv.length != 8)) {        throw new IllegalArgumentException("IV is not 8 octets");      }    } else {      throw new IllegalArgumentException("You should not supply an IV for unwrapping");    }  }}  }
class C{  public static List<Attribute> createAsList(AttributeType attributeType,String valueString){  return newArrayList(create(attributeType,valueString));}  }
class C{  public void mousePressed(MouseEvent e){  if (SwingUtilities.isRightMouseButton(e) || (!getSupportsAbsolutePositioning() && SwingUtilities.isMiddleMouseButton(e)))   return;  if (!scrollbar.isEnabled())   return;  if (!scrollbar.hasFocus() && scrollbar.isRequestFocusEnabled()) {    scrollbar.requestFocus();  }  useCachedValue=true;  scrollbar.setValueIsAdjusting(true);  currentMouseX=e.getX();  currentMouseY=e.getY();  if (getThumbBounds().contains(currentMouseX,currentMouseY)) {switch (scrollbar.getOrientation()) {case JScrollBar.VERTICAL:      offset=currentMouseY - getThumbBounds().y;    break;case JScrollBar.HORIZONTAL:  offset=currentMouseX - getThumbBounds().x;break;}isDragging=true;return;} else if (getSupportsAbsolutePositioning() && SwingUtilities.isMiddleMouseButton(e)) {switch (scrollbar.getOrientation()) {case JScrollBar.VERTICAL:offset=getThumbBounds().height / 2;break;case JScrollBar.HORIZONTAL:offset=getThumbBounds().width / 2;break;}isDragging=true;setValueFrom(e);return;}isDragging=false;Dimension sbSize=scrollbar.getSize();direction=+1;switch (scrollbar.getOrientation()) {case JScrollBar.VERTICAL:if (getThumbBounds().isEmpty()) {int scrollbarCenter=sbSize.height / 2;direction=(currentMouseY < scrollbarCenter) ? -1 : +1;} else {int thumbY=getThumbBounds().y;direction=(currentMouseY < thumbY) ? -1 : +1;}break;case JScrollBar.HORIZONTAL:if (getThumbBounds().isEmpty()) {int scrollbarCenter=sbSize.width / 2;direction=(currentMouseX < scrollbarCenter) ? -1 : +1;} else {int thumbX=getThumbBounds().x;direction=(currentMouseX < thumbX) ? -1 : +1;}if (!scrollbar.getComponentOrientation().isLeftToRight()) {direction=-direction;}break;}scrollByBlock(direction);scrollTimer.stop();scrollListener.setDirection(direction);scrollListener.setScrollByBlock(true);startScrollTimerIfNecessary();}  }
class C{  public void start(Context context,Fragment fragment){  start(context,fragment,REQUEST_CROP);}  }
class C{  public Rectangle clone(){  return new Rectangle(x,y,width,height);}  }
class C{  public final int addAndGet(int delta){  return unsafe.getAndAddInt(this,valueOffset,delta) + delta;}  }
class C{  static void createFile(File path,InputStream is) throws IOException {  try (FileOutputStream out=new FileOutputStream(path);BufferedOutputStream dest=new BufferedOutputStream(out)){    byte[] data=new byte[BUFFER_SIZE];    int count;    while ((count=is.read(data,0,BUFFER_SIZE)) != -1) {      dest.write(data,0,count);    }  } }  }
class C{  public void testMac07() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  try {    Mac.getInstance(null,defaultProvider);    fail("NullPointerException or NoSuchAlgorithmException should be thrown when algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      Mac.getInstance(invalidValues[i],defaultProvider);      fail("NoSuchAlgorithmException must be thrown when algorithm is not available: ".concat(invalidValues[i]));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public RedirectException(String msg,Throwable t){  super(msg,t);}  }
class C{  public String toString(){  return getName();}  }
class C{  public boolean isUnsubscribed(int restartableId){  Subscription subscription=restartableSubscriptions.get(restartableId);  return subscription == null || subscription.isUnsubscribed();}  }
class C{  private void checkManuallyTrusted(final X509Certificate[] chain,final Exception exception) throws CertificateException {  app.println();  app.println(INFO_LDAP_CONN_PROMPT_SECURITY_SERVER_CERTIFICATE.get());  app.println();  for (  final X509Certificate element : chain) {    app.println(INFO_LDAP_CONN_SECURITY_SERVER_CERTIFICATE_USER_DN.get(element.getSubjectDN().toString()));    app.println(INFO_LDAP_CONN_SECURITY_SERVER_CERTIFICATE_VALIDITY.get(element.getNotBefore().toString(),element.getNotAfter().toString()));    app.println(INFO_LDAP_CONN_SECURITY_SERVER_CERTIFICATE_ISSUER.get(element.getIssuerDN().toString()));    app.println();    app.println();  }  app.println();  app.println(INFO_LDAP_CONN_PROMPT_SECURITY_TRUST_OPTION.get());  app.println();  final Map<String,TrustOption> menuOptions=new HashMap<>();  for (  final TrustOption t : TrustOption.values()) {    menuOptions.put(t.getChoice().toString(),t);    final LocalizableMessageBuilder builder=new LocalizableMessageBuilder();    builder.append(t.getChoice());    builder.append(") ");    builder.append(t.getMenuMessage());    app.println(builder.toMessage(),2);  }  final TrustOption defaultTrustMethod=TrustOption.SESSION;  final LocalizableMessage promptMsg=INFO_MENU_PROMPT_SINGLE.get();  while (true) {    app.println();    String choice;    try {      choice=app.readInput(promptMsg,defaultTrustMethod.getChoice().toString());    } catch (    final ClientException e) {      throw new CertificateException(exception);    } finally {      app.println();    }    final TrustOption option=menuOptions.get(choice.trim());    if (option == null) {      app.println(ERR_MENU_BAD_CHOICE_SINGLE.get());      app.println();      continue;    }switch (option) {case UNTRUSTED:      if (exception instanceof CertificateException) {        throw (CertificateException)exception;      }    throw new CertificateException(exception);case CERTIFICATE_DETAILS:  for (  final X509Certificate aChain : chain) {    app.println();    app.println(INFO_LDAP_CONN_SECURITY_SERVER_CERTIFICATE.get(aChain.toString()));    app.println();  }break;default :acceptCertificate(chain,option == TrustOption.PERMANENT);return;}}}  }
class C{  public static Vector send(URL url,RequestSet set) throws SendRequestException {  return send(url,null,set,null);}  }
class C{  public Issuer createIssuer(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ISSUER);  if (obj == null) {    return new IssuerImpl();  } else {    return (Issuer)obj;  }}  }
class C{  public URI(String p_scheme,String p_schemeSpecificPart) throws MalformedURIException {  if (p_scheme == null || p_scheme.trim().length() == 0) {    throw new MalformedURIException("Cannot construct URI with null/empty scheme!");  }  if (p_schemeSpecificPart == null || p_schemeSpecificPart.trim().length() == 0) {    throw new MalformedURIException("Cannot construct URI with null/empty scheme-specific part!");  }  setScheme(p_scheme);  setPath(p_schemeSpecificPart);}  }
class C{  public int max_value(int p_i,int p_layer){  int i=Math.max(p_i,0);  i=Math.min(i,class_count - 1);  int layer=Math.max(p_layer,0);  layer=Math.min(layer,layer_structure.size() - 1);  return clearance_rows[i].max_value[layer];}  }
class C{  public org.w3c.dom.Element signXML(org.w3c.dom.Document doc,java.lang.String certAlias,java.lang.String algorithm,java.util.List ids) throws XMLSignatureException {  return sp.signXML(doc,certAlias,algorithm,ids);}  }
class C{  public WrongTransaction(String reason){  super(WrongTransactionHelper.id() + "  " + reason);}  }
class C{  public void warning(String msg,Throwable t){  getDebugServiceInstance().warning(msg,t);}  }
class C{  public static int mainSearch(String[] args,boolean initializeServer,OutputStream outStream,OutputStream errStream){  PrintStream out=NullOutputStream.wrapOrNullStream(outStream);  PrintStream err=NullOutputStream.wrapOrNullStream(errStream);  JDKLogging.disableLogging();  LinkedHashSet<String> scopeStrings=new LinkedHashSet<>(4);  scopeStrings.add(SCOPE_STRING_BASE);  scopeStrings.add(SCOPE_STRING_ONE);  scopeStrings.add(SCOPE_STRING_SUB);  scopeStrings.add(SCOPE_STRING_SUBORDINATE);  BooleanArgument dontWrap;  BooleanArgument overwriteExisting;  BooleanArgument showUsage;  StringArgument filterFile;  IntegerArgument sizeLimit;  IntegerArgument timeLimit;  MultiChoiceArgument<String> scopeString;  StringArgument baseDNString;  StringArgument configFile;  StringArgument ldifFile;  StringArgument outputFile;  LocalizableMessage toolDescription=INFO_LDIFSEARCH_TOOL_DESCRIPTION.get();  ArgumentParser argParser=new ArgumentParser(CLASS_NAME,toolDescription,false,true,0,0,"[filter] [attributes ...]");  argParser.setShortToolDescription(REF_SHORT_DESC_LDIFSEARCH.get());  argParser.setVersionHandler(new DirectoryServerVersionHandler());  try {    ldifFile=StringArgument.builder("ldifFile").shortIdentifier('l').description(INFO_LDIFSEARCH_DESCRIPTION_LDIF_FILE.get()).multiValued().valuePlaceholder(INFO_LDIFFILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    baseDNString=StringArgument.builder(OPTION_LONG_BASEDN).shortIdentifier(OPTION_SHORT_BASEDN).description(INFO_LDIFSEARCH_DESCRIPTION_BASEDN.get()).multiValued().defaultValue("").valuePlaceholder(INFO_BASEDN_PLACEHOLDER.get()).buildAndAddToParser(argParser);    scopeString=MultiChoiceArgument.<String>builder("searchScope").shortIdentifier('s').description(INFO_LDIFSEARCH_DESCRIPTION_SCOPE.get()).allowedValues(scopeStrings).defaultValue(SCOPE_STRING_SUB).valuePlaceholder(INFO_SCOPE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    configFile=StringArgument.builder("configFile").shortIdentifier('c').description(INFO_DESCRIPTION_CONFIG_FILE.get()).hidden().valuePlaceholder(INFO_CONFIGFILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    filterFile=StringArgument.builder("filterFile").shortIdentifier('f').description(INFO_LDIFSEARCH_DESCRIPTION_FILTER_FILE.get()).valuePlaceholder(INFO_FILTER_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    outputFile=StringArgument.builder("outputFile").shortIdentifier('o').description(INFO_LDIFSEARCH_DESCRIPTION_OUTPUT_FILE.get()).valuePlaceholder(INFO_OUTPUT_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    overwriteExisting=BooleanArgument.builder("overwriteExisting").shortIdentifier('O').description(INFO_LDIFSEARCH_DESCRIPTION_OVERWRITE_EXISTING.get()).buildAndAddToParser(argParser);    dontWrap=BooleanArgument.builder("dontWrap").shortIdentifier('T').description(INFO_LDIFSEARCH_DESCRIPTION_DONT_WRAP.get()).buildAndAddToParser(argParser);    sizeLimit=IntegerArgument.builder("sizeLimit").shortIdentifier('z').description(INFO_LDIFSEARCH_DESCRIPTION_SIZE_LIMIT.get()).lowerBound(0).defaultValue(0).valuePlaceholder(INFO_SIZE_LIMIT_PLACEHOLDER.get()).buildAndAddToParser(argParser);    timeLimit=IntegerArgument.builder("timeLimit").shortIdentifier('t').description(INFO_LDIFSEARCH_DESCRIPTION_TIME_LIMIT.get()).lowerBound(0).defaultValue(0).valuePlaceholder(INFO_TIME_LIMIT_PLACEHOLDER.get()).buildAndAddToParser(argParser);    showUsage=showUsageArgument();    argParser.addArgument(showUsage);    argParser.setUsageArgument(showUsage);  } catch (  ArgumentException ae) {    printWrappedText(err,ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage()));    return 1;  }  try {    argParser.parseArguments(args);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(err,ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));    return CLIENT_SIDE_PARAM_ERROR;  }  if (argParser.usageOrVersionDisplayed()) {    return 0;  }  try {    BuildVersion.checkVersionMismatch();  } catch (  InitializationException e) {    printWrappedText(err,e.getMessage());    return 1;  }  boolean allUserAttrs=false;  boolean allOperationalAttrs=false;  boolean includeObjectclassAttrs=true;  final LinkedList<String> attributeNames=new LinkedList<>();  LinkedList<String> objectClassNames=new LinkedList<>();  LinkedList<String> filterStrings=new LinkedList<>();  if (filterFile.isPresent()) {    BufferedReader in=null;    try {      String fileNameValue=filterFile.getValue();      in=new BufferedReader(new FileReader(fileNameValue));      String line=null;      while ((line=in.readLine()) != null) {        if (line.trim().equals("")) {          continue;        }        filterStrings.add(line);      }    } catch (    Exception e) {      printWrappedText(err,e.getMessage());      return 1;    } finally {      close(in);    }    ArrayList<String> trailingArguments=argParser.getTrailingArguments();    if (trailingArguments != null && !trailingArguments.isEmpty()) {      for (      String attributeName : trailingArguments) {        String lowerName=toLowerCase(attributeName);        if (lowerName.equals("*")) {          allUserAttrs=true;        } else         if (lowerName.equals("+")) {          allOperationalAttrs=true;        } else         if (lowerName.startsWith("@")) {          objectClassNames.add(lowerName.substring(1));        } else {          attributeNames.add(lowerName);        }      }    }  } else {    ArrayList<String> trailingArguments=argParser.getTrailingArguments();    if (trailingArguments == null || trailingArguments.isEmpty()) {      argParser.displayMessageAndUsageReference(err,ERR_LDIFSEARCH_NO_FILTER.get());      return 1;    }    Iterator<String> iterator=trailingArguments.iterator();    filterStrings=newLinkedList(iterator.next());    while (iterator.hasNext()) {      String lowerName=toLowerCase(iterator.next());      if (lowerName.equals("*")) {        allUserAttrs=true;      } else       if (lowerName.equals("+")) {        allOperationalAttrs=true;      } else       if (lowerName.startsWith("@")) {        objectClassNames.add(lowerName.substring(1));      } else {        attributeNames.add(lowerName);      }    }  }  if (attributeNames.isEmpty() && objectClassNames.isEmpty() && !allOperationalAttrs) {    allUserAttrs=true;  }  if (!allUserAttrs) {    if (allOperationalAttrs && objectClassNames.isEmpty() && attributeNames.isEmpty()) {      includeObjectclassAttrs=false;    }    if (!attributeNames.isEmpty() && objectClassNames.isEmpty() && !attributeNames.contains("objectclass")) {      includeObjectclassAttrs=false;    }  }  DirectoryServer directoryServer=DirectoryServer.getInstance();  boolean checkSchema=configFile.isPresent();  if (initializeServer) {    DirectoryServer.bootstrapClient();    if (checkSchema) {      try {        DirectoryServer.initializeJMX();      } catch (      Exception e) {        printWrappedText(err,ERR_LDIFSEARCH_CANNOT_INITIALIZE_JMX.get(configFile.getValue(),e.getMessage()));        return 1;      }      try {        directoryServer.initializeConfiguration(configFile.getValue());      } catch (      Exception e) {        printWrappedText(err,ERR_LDIFSEARCH_CANNOT_INITIALIZE_CONFIG.get(configFile.getValue(),e.getMessage()));        return 1;      }      try {        directoryServer.initializeSchema();      } catch (      Exception e) {        printWrappedText(err,ERR_LDIFSEARCH_CANNOT_INITIALIZE_SCHEMA.get(configFile.getValue(),e.getMessage()));        return 1;      }    }  }  SearchScope searchScope;  if (scopeString.isPresent()) {    String scopeStr=toLowerCase(scopeString.getValue());    if (scopeStr.equals(SCOPE_STRING_BASE)) {      searchScope=SearchScope.BASE_OBJECT;    } else     if (scopeStr.equals(SCOPE_STRING_ONE)) {      searchScope=SearchScope.SINGLE_LEVEL;    } else     if (scopeStr.equals(SCOPE_STRING_SUBORDINATE)) {      searchScope=SearchScope.SUBORDINATES;    } else {      searchScope=SearchScope.WHOLE_SUBTREE;    }  } else {    searchScope=SearchScope.WHOLE_SUBTREE;  }  LinkedList<SearchFilter> searchFilters=new LinkedList<>();  for (  String filterString : filterStrings) {    try {      searchFilters.add(SearchFilter.createFilterFromString(filterString));    } catch (    Exception e) {      printWrappedText(err,ERR_LDIFSEARCH_CANNOT_PARSE_FILTER.get(filterString,e.getMessage()));      return 1;    }  }  LinkedHashSet<AttributeType> userAttributeTypes=new LinkedHashSet<>();  LinkedHashSet<AttributeType> operationalAttributeTypes=new LinkedHashSet<>();  for (  String attributeName : attributeNames) {    AttributeType t=DirectoryServer.getSchema().getAttributeType(attributeName);    if (t.isOperational()) {      operationalAttributeTypes.add(t);    } else {      userAttributeTypes.add(t);    }  }  for (  String objectClassName : objectClassNames) {    ObjectClass c=DirectoryServer.getSchema().getObjectClass(objectClassName);    for (    AttributeType t : c.getRequiredAttributes()) {      if (t.isOperational()) {        operationalAttributeTypes.add(t);      } else {        userAttributeTypes.add(t);      }    }    for (    AttributeType t : c.getOptionalAttributes()) {      if (t.isOperational()) {        operationalAttributeTypes.add(t);      } else {        userAttributeTypes.add(t);      }    }  }  LinkedList<DN> baseDNs=new LinkedList<>();  if (baseDNString.isPresent()) {    for (    String dnString : baseDNString.getValues()) {      try {        baseDNs.add(DN.valueOf(dnString));      } catch (      Exception e) {        printWrappedText(err,ERR_LDIFSEARCH_CANNOT_PARSE_BASE_DN.get(dnString,e.getMessage()));        return 1;      }    }  } else {    baseDNs.add(DN.rootDN());  }  long timeLimitMillis;  try {    if (timeLimit.isPresent()) {      timeLimitMillis=1000L * timeLimit.getIntValue();    } else {      timeLimitMillis=0;    }  } catch (  Exception e) {    printWrappedText(err,ERR_LDIFSEARCH_CANNOT_PARSE_TIME_LIMIT.get(e));    return 1;  }  int sizeLimitValue;  try {    if (sizeLimit.isPresent()) {      sizeLimitValue=sizeLimit.getIntValue();    } else {      sizeLimitValue=0;    }  } catch (  Exception e) {    printWrappedText(err,ERR_LDIFSEARCH_CANNOT_PARSE_SIZE_LIMIT.get(e));    return 1;  }  LDIFImportConfig importConfig;  if (ldifFile.isPresent()) {    importConfig=new LDIFImportConfig(ldifFile.getValues());  } else {    importConfig=new LDIFImportConfig(System.in);  }  LDIFExportConfig exportConfig;  if (outputFile.isPresent()) {    if (overwriteExisting.isPresent()) {      exportConfig=new LDIFExportConfig(outputFile.getValue(),ExistingFileBehavior.OVERWRITE);    } else {      exportConfig=new LDIFExportConfig(outputFile.getValue(),ExistingFileBehavior.APPEND);    }  } else {    exportConfig=new LDIFExportConfig(out);  }  exportConfig.setIncludeObjectClasses(includeObjectclassAttrs);  if (dontWrap.isPresent()) {    exportConfig.setWrapColumn(0);  } else {    exportConfig.setWrapColumn(75);  }  LDIFReader reader;  LDIFWriter writer;  try {    reader=new LDIFReader(importConfig);  } catch (  Exception e) {    printWrappedText(err,ERR_LDIFSEARCH_CANNOT_CREATE_READER.get(e));    return 1;  }  try {    writer=new LDIFWriter(exportConfig);  } catch (  Exception e) {    close(reader);    printWrappedText(err,ERR_LDIFSEARCH_CANNOT_CREATE_WRITER.get(e));    return 1;  }  long startTime=System.currentTimeMillis();  long stopTime=startTime + timeLimitMillis;  long matchCount=0;  int resultCode=LDAPResultCode.SUCCESS;  while (true) {    if (timeLimitMillis > 0 && System.currentTimeMillis() > stopTime) {      resultCode=LDAPResultCode.TIME_LIMIT_EXCEEDED;      LocalizableMessage message=WARN_LDIFSEARCH_TIME_LIMIT_EXCEEDED.get();      err.println(message);      break;    }    try {      Entry entry=reader.readEntry(checkSchema);      if (entry == null) {        break;      }      boolean matchesBaseAndScope=false;      for (      DN baseDN : baseDNs) {        if (entry.matchesBaseAndScope(baseDN,searchScope)) {          matchesBaseAndScope=true;          break;        }      }      if (!matchesBaseAndScope) {        continue;      }      boolean matchesFilter=false;      for (      SearchFilter filter : searchFilters) {        if (filter.matchesEntry(entry)) {          matchesFilter=true;          break;        }      }      if (!matchesFilter) {        continue;      }      if (!allUserAttrs) {        Iterator<AttributeType> iterator=entry.getUserAttributes().keySet().iterator();        while (iterator.hasNext()) {          if (!userAttributeTypes.contains(iterator.next())) {            iterator.remove();          }        }      }      if (!allOperationalAttrs) {        Iterator<AttributeType> iterator=entry.getOperationalAttributes().keySet().iterator();        while (iterator.hasNext()) {          if (!operationalAttributeTypes.contains(iterator.next())) {            iterator.remove();          }        }      }      writer.writeEntry(entry);      writer.flush();      matchCount++;      if (sizeLimitValue > 0 && matchCount >= sizeLimitValue) {        resultCode=LDAPResultCode.SIZE_LIMIT_EXCEEDED;        LocalizableMessage message=WARN_LDIFSEARCH_SIZE_LIMIT_EXCEEDED.get();        err.println(message);        break;      }    } catch (    LDIFException le) {      if (le.canContinueReading()) {        LocalizableMessage message=ERR_LDIFSEARCH_CANNOT_READ_ENTRY_RECOVERABLE.get(le.getMessage());        err.println(message);      } else {        LocalizableMessage message=ERR_LDIFSEARCH_CANNOT_READ_ENTRY_FATAL.get(le.getMessage());        err.println(message);        resultCode=LDAPResultCode.CLIENT_SIDE_LOCAL_ERROR;        break;      }    }catch (    Exception e) {      err.println(ERR_LDIFSEARCH_ERROR_DURING_PROCESSING.get(e));      resultCode=LDAPResultCode.CLIENT_SIDE_LOCAL_ERROR;      break;    }  }  close(reader,writer);  return resultCode;}  }
class C{  public TextEncodedStringNullTerminated(String identifier,AbstractTagFrameBody frameBody,String value){  super(identifier,frameBody,value);}  }
class C{  public void output(SessionDescription sd,OutputStream out) throws IOException {  if (out instanceof ObjectOutputStream) {    ObjectOutputStream output=(ObjectOutputStream)out;    if (sd != null)     output.writeObject(sd); else     throw new IOException("The parameter is null");  } else   throw new IOException("The output stream has to be an instance of ObjectOutputStream");}  }
class C{  public PdfEncryption(byte[] userPassword,byte[] ownerPassword,int permissions,int encryptionType,byte[] documentId){  super(new PdfDictionary());  this.documentId=documentId;  int revision=setCryptoMode(encryptionType);switch (revision) {case STANDARD_ENCRYPTION_40:    StandardHandlerUsingStandard40 handlerStd40=new StandardHandlerUsingStandard40(this.getPdfObject(),userPassword,ownerPassword,permissions,encryptMetadata,embeddedFilesOnly,documentId);  this.permissions=handlerStd40.getPermissions();securityHandler=handlerStd40;break;case STANDARD_ENCRYPTION_128:StandardHandlerUsingStandard128 handlerStd128=new StandardHandlerUsingStandard128(this.getPdfObject(),userPassword,ownerPassword,permissions,encryptMetadata,embeddedFilesOnly,documentId);this.permissions=handlerStd128.getPermissions();securityHandler=handlerStd128;break;case AES_128:StandardHandlerUsingAes128 handlerAes128=new StandardHandlerUsingAes128(this.getPdfObject(),userPassword,ownerPassword,permissions,encryptMetadata,embeddedFilesOnly,documentId);this.permissions=handlerAes128.getPermissions();securityHandler=handlerAes128;break;case AES_256:StandardHandlerUsingAes256 handlerAes256=new StandardHandlerUsingAes256(this.getPdfObject(),userPassword,ownerPassword,permissions,encryptMetadata,embeddedFilesOnly);this.permissions=handlerAes256.getPermissions();securityHandler=handlerAes256;break;}}  }
class C{  public static MenuSelectionManager defaultManager(){synchronized (MENU_SELECTION_MANAGER_KEY) {    AppContext context=AppContext.getAppContext();    MenuSelectionManager msm=(MenuSelectionManager)context.get(MENU_SELECTION_MANAGER_KEY);    if (msm == null) {      msm=new MenuSelectionManager();      context.put(MENU_SELECTION_MANAGER_KEY,msm);      Object o=context.get(SwingUtilities2.MENU_SELECTION_MANAGER_LISTENER_KEY);      if (o != null && o instanceof ChangeListener) {        msm.addChangeListener((ChangeListener)o);      }    }    return msm;  }}  }
class C{  private void calculateSpanWidthBorders(int totalSpace){  if (spanWidthBorders == null || spanWidthBorders.length != mSpanCount + 1 || spanWidthBorders[spanWidthBorders.length - 1] != totalSpace) {    spanWidthBorders=new int[mSpanCount + 1];  }  spanWidthBorders[0]=0;  sizePerSpan=totalSpace / mSpanCount;  int sizePerSpanRemainder=totalSpace % mSpanCount;  int consumedPixels=0;  int additionalSize=0;  for (int i=1; i <= mSpanCount; i++) {    int itemSize=sizePerSpan;    additionalSize+=sizePerSpanRemainder;    if (additionalSize > 0 && (mSpanCount - additionalSize) < sizePerSpanRemainder) {      itemSize+=1;      additionalSize-=mSpanCount;    }    consumedPixels+=itemSize;    spanWidthBorders[i]=consumedPixels;  }}  }
class C{  public void testToStringPos(){  String a="123809648392384754573567356745735.63567890295784902768787678287E-500";  BigDecimal aNumber=new BigDecimal(a);  String result="1.2380964839238475457356735674573563567890295784902768787678287E-468";  assertTrue("incorrect value",aNumber.toString().equals(result));}  }
class C{  public static void downloadFile(final String fileUrl,final String localFile) throws IOException {  final URL url=new URL(fileUrl);  final HttpURLConnection connection=(HttpURLConnection)url.openConnection();  final byte[] data=JKIOUtil.readStream(connection.getInputStream());  JKIOUtil.writeBytesToFile(data,localFile);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.UsernameTokenElement createUsernameTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.UsernameTokenElementImpl();}  }
class C{  private StringBuilder updateBodyText(StringBuilder bodyText){  String in=bodyText.toString();  String out;  try {    out=IntrospectionUtils.replaceProperties(in,null,source);  } catch (  Exception e) {    return bodyText;  }  if (out == in) {    return bodyText;  } else {    return new StringBuilder(out);  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.AuthorizationDecisionQueryElement createAuthorizationDecisionQueryElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.AuthorizationDecisionQueryElementImpl();}  }
class C{  public void assignServices(Map serviceNamesAndAttr) throws AMException, SSOException {  assignServices(serviceNamesAndAttr,true);}  }
class C{  public static byte[] bigIntegerToNullPaddedByteArray(BigInteger input,int outputSizeInBytes){  if (input == null) {    throw new IllegalArgumentException("'input' must not be null.");  }  byte[] output=new byte[outputSizeInBytes];  int numByteBlocks=input.bitLength() / 8;  int remainingBits;  if (numByteBlocks < output.length) {    remainingBits=input.bitLength() % 8;  } else {    remainingBits=0;    numByteBlocks=output.length;  }  int i;  for (i=0; i < numByteBlocks; i++) {    output[output.length - 1 - i]=input.shiftRight(i * 8).byteValue();  }  if (remainingBits > 0) {    output[output.length - 1 - i]=input.shiftRight(i * 8).byteValue();  }  return output;}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof NSNumber))   return false;  NSNumber n=(NSNumber)obj;  return type == n.type && longValue == n.longValue && doubleValue == n.doubleValue && boolValue == n.boolValue;}  }
class C{  public BerInputStream(InputStream in) throws IOException {  this(in,BUF_INCREASE_SIZE);}  }
class C{  public java.lang.String toString(){  String xml=this.toString(true,false);  return xml;}  }
class C{  @Override public void removeNotificationListener(NotificationListener listener) throws ListenerNotFoundException {synchronized (entries) {    Iterator<BaseNotificationBroadcasterEntry> items=entries.iterator();    while (items.hasNext()) {      BaseNotificationBroadcasterEntry item=items.next();      if (item.listener == listener)       items.remove();    }  }}  }
class C{  public static void stop(Context context){  Intent intent=new Intent(context,DebugPortService.class);  context.stopService(intent);}  }
class C{  public static int mainCLI(String... args){  return mainCLI(args,System.out,System.err,System.in);}  }
class C{  void initializeDefaults(UIDefaults d){  addColor(d,"text",0,0,0,255);  addColor(d,"control",214,217,223,255);  addColor(d,"nimbusBase",51,98,140,255);  addColor(d,"nimbusBlueGrey","nimbusBase",0.032459438f,-0.52518797f,0.19607842f,0);  addColor(d,"nimbusOrange",191,98,4,255);  addColor(d,"nimbusGreen",176,179,50,255);  addColor(d,"nimbusRed",169,46,34,255);  addColor(d,"nimbusBorder","nimbusBlueGrey",0.0f,-0.017358616f,-0.11372548f,0);  addColor(d,"nimbusSelection","nimbusBase",-0.010750473f,-0.04875779f,-0.007843137f,0);  addColor(d,"nimbusInfoBlue",47,92,180,255);  addColor(d,"nimbusAlertYellow",255,220,35,255);  addColor(d,"nimbusFocus",115,164,209,255);  addColor(d,"nimbusSelectedText",255,255,255,255);  addColor(d,"nimbusSelectionBackground",57,105,138,255);  addColor(d,"nimbusDisabledText",142,143,145,255);  addColor(d,"nimbusLightBackground",255,255,255,255);  addColor(d,"infoText","text",0.0f,0.0f,0.0f,0);  addColor(d,"info",242,242,189,255);  addColor(d,"menuText","text",0.0f,0.0f,0.0f,0);  addColor(d,"menu","nimbusBase",0.021348298f,-0.6150531f,0.39999998f,0);  addColor(d,"scrollbar","nimbusBlueGrey",-0.006944418f,-0.07296763f,0.09019607f,0);  addColor(d,"controlText","text",0.0f,0.0f,0.0f,0);  addColor(d,"controlHighlight","nimbusBlueGrey",0.0f,-0.07333623f,0.20392156f,0);  addColor(d,"controlLHighlight","nimbusBlueGrey",0.0f,-0.098526314f,0.2352941f,0);  addColor(d,"controlShadow","nimbusBlueGrey",-0.0027777553f,-0.0212406f,0.13333333f,0);  addColor(d,"controlDkShadow","nimbusBlueGrey",-0.0027777553f,-0.0018306673f,-0.02352941f,0);  addColor(d,"textHighlight","nimbusSelectionBackground",0.0f,0.0f,0.0f,0);  addColor(d,"textHighlightText","nimbusSelectedText",0.0f,0.0f,0.0f,0);  addColor(d,"textInactiveText","nimbusDisabledText",0.0f,0.0f,0.0f,0);  addColor(d,"desktop","nimbusBase",-0.009207249f,-0.13984653f,-0.07450983f,0);  addColor(d,"activeCaption","nimbusBlueGrey",0.0f,-0.049920253f,0.031372547f,0);  addColor(d,"inactiveCaption","nimbusBlueGrey",-0.00505054f,-0.055526316f,0.039215684f,0);  d.put("defaultFont",new FontUIResource(defaultFont));  d.put("InternalFrame.titleFont",new DerivedFont("defaultFont",1.0f,true,null));  addColor(d,"textForeground","text",0.0f,0.0f,0.0f,0);  addColor(d,"textBackground","nimbusSelectionBackground",0.0f,0.0f,0.0f,0);  addColor(d,"background","control",0.0f,0.0f,0.0f,0);  d.put("TitledBorder.position","ABOVE_TOP");  d.put("FileView.fullRowSelection",Boolean.TRUE);  d.put("ArrowButton.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("ArrowButton.size",new Integer(16));  d.put("ArrowButton[Disabled].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ArrowButtonPainter",ArrowButtonPainter.FOREGROUND_DISABLED,new Insets(0,0,0,0),new Dimension(10,10),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("ArrowButton[Enabled].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ArrowButtonPainter",ArrowButtonPainter.FOREGROUND_ENABLED,new Insets(0,0,0,0),new Dimension(10,10),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Button.contentMargins",new InsetsUIResource(6,14,6,14));  d.put("Button.defaultButtonFollowsFocus",Boolean.FALSE);  d.put("Button[Default].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ButtonPainter",ButtonPainter.BACKGROUND_DEFAULT,new Insets(7,7,7,7),new Dimension(104,33),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("Button[Default+Focused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ButtonPainter",ButtonPainter.BACKGROUND_DEFAULT_FOCUSED,new Insets(7,7,7,7),new Dimension(104,33),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("Button[Default+MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ButtonPainter",ButtonPainter.BACKGROUND_MOUSEOVER_DEFAULT,new Insets(7,7,7,7),new Dimension(104,33),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("Button[Default+Focused+MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ButtonPainter",ButtonPainter.BACKGROUND_MOUSEOVER_DEFAULT_FOCUSED,new Insets(7,7,7,7),new Dimension(104,33),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  addColor(d,"Button[Default+Pressed].textForeground","nimbusSelectedText",0.0f,0.0f,0.0f,0);  d.put("Button[Default+Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ButtonPainter",ButtonPainter.BACKGROUND_PRESSED_DEFAULT,new Insets(7,7,7,7),new Dimension(104,33),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("Button[Default+Focused+Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ButtonPainter",ButtonPainter.BACKGROUND_PRESSED_DEFAULT_FOCUSED,new Insets(7,7,7,7),new Dimension(104,33),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  addColor(d,"Button[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  d.put("Button[Disabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ButtonPainter",ButtonPainter.BACKGROUND_DISABLED,new Insets(7,7,7,7),new Dimension(104,33),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("Button[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ButtonPainter",ButtonPainter.BACKGROUND_ENABLED,new Insets(7,7,7,7),new Dimension(104,33),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("Button[Focused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ButtonPainter",ButtonPainter.BACKGROUND_FOCUSED,new Insets(7,7,7,7),new Dimension(104,33),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("Button[MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ButtonPainter",ButtonPainter.BACKGROUND_MOUSEOVER,new Insets(7,7,7,7),new Dimension(104,33),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("Button[Focused+MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ButtonPainter",ButtonPainter.BACKGROUND_MOUSEOVER_FOCUSED,new Insets(7,7,7,7),new Dimension(104,33),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("Button[Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ButtonPainter",ButtonPainter.BACKGROUND_PRESSED,new Insets(7,7,7,7),new Dimension(104,33),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("Button[Focused+Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ButtonPainter",ButtonPainter.BACKGROUND_PRESSED_FOCUSED,new Insets(7,7,7,7),new Dimension(104,33),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ToggleButton.contentMargins",new InsetsUIResource(6,14,6,14));  addColor(d,"ToggleButton[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  d.put("ToggleButton[Disabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToggleButtonPainter",ToggleButtonPainter.BACKGROUND_DISABLED,new Insets(7,7,7,7),new Dimension(104,33),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ToggleButton[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToggleButtonPainter",ToggleButtonPainter.BACKGROUND_ENABLED,new Insets(7,7,7,7),new Dimension(104,33),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ToggleButton[Focused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToggleButtonPainter",ToggleButtonPainter.BACKGROUND_FOCUSED,new Insets(7,7,7,7),new Dimension(104,33),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ToggleButton[MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToggleButtonPainter",ToggleButtonPainter.BACKGROUND_MOUSEOVER,new Insets(7,7,7,7),new Dimension(104,33),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ToggleButton[Focused+MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToggleButtonPainter",ToggleButtonPainter.BACKGROUND_MOUSEOVER_FOCUSED,new Insets(7,7,7,7),new Dimension(104,33),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ToggleButton[Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToggleButtonPainter",ToggleButtonPainter.BACKGROUND_PRESSED,new Insets(7,7,7,7),new Dimension(104,33),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ToggleButton[Focused+Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToggleButtonPainter",ToggleButtonPainter.BACKGROUND_PRESSED_FOCUSED,new Insets(7,7,7,7),new Dimension(104,33),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ToggleButton[Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToggleButtonPainter",ToggleButtonPainter.BACKGROUND_SELECTED,new Insets(7,7,7,7),new Dimension(72,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ToggleButton[Focused+Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToggleButtonPainter",ToggleButtonPainter.BACKGROUND_SELECTED_FOCUSED,new Insets(7,7,7,7),new Dimension(72,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ToggleButton[Pressed+Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToggleButtonPainter",ToggleButtonPainter.BACKGROUND_PRESSED_SELECTED,new Insets(7,7,7,7),new Dimension(72,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ToggleButton[Focused+Pressed+Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToggleButtonPainter",ToggleButtonPainter.BACKGROUND_PRESSED_SELECTED_FOCUSED,new Insets(7,7,7,7),new Dimension(72,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ToggleButton[MouseOver+Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToggleButtonPainter",ToggleButtonPainter.BACKGROUND_MOUSEOVER_SELECTED,new Insets(7,7,7,7),new Dimension(72,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ToggleButton[Focused+MouseOver+Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToggleButtonPainter",ToggleButtonPainter.BACKGROUND_MOUSEOVER_SELECTED_FOCUSED,new Insets(7,7,7,7),new Dimension(72,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  addColor(d,"ToggleButton[Disabled+Selected].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  d.put("ToggleButton[Disabled+Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToggleButtonPainter",ToggleButtonPainter.BACKGROUND_DISABLED_SELECTED,new Insets(7,7,7,7),new Dimension(72,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("RadioButton.contentMargins",new InsetsUIResource(0,0,0,0));  addColor(d,"RadioButton[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  d.put("RadioButton[Disabled].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.RadioButtonPainter",RadioButtonPainter.ICON_DISABLED,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("RadioButton[Enabled].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.RadioButtonPainter",RadioButtonPainter.ICON_ENABLED,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("RadioButton[Focused].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.RadioButtonPainter",RadioButtonPainter.ICON_FOCUSED,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("RadioButton[MouseOver].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.RadioButtonPainter",RadioButtonPainter.ICON_MOUSEOVER,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("RadioButton[Focused+MouseOver].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.RadioButtonPainter",RadioButtonPainter.ICON_MOUSEOVER_FOCUSED,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("RadioButton[Pressed].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.RadioButtonPainter",RadioButtonPainter.ICON_PRESSED,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("RadioButton[Focused+Pressed].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.RadioButtonPainter",RadioButtonPainter.ICON_PRESSED_FOCUSED,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("RadioButton[Selected].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.RadioButtonPainter",RadioButtonPainter.ICON_SELECTED,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("RadioButton[Focused+Selected].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.RadioButtonPainter",RadioButtonPainter.ICON_SELECTED_FOCUSED,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("RadioButton[Pressed+Selected].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.RadioButtonPainter",RadioButtonPainter.ICON_PRESSED_SELECTED,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("RadioButton[Focused+Pressed+Selected].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.RadioButtonPainter",RadioButtonPainter.ICON_PRESSED_SELECTED_FOCUSED,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("RadioButton[MouseOver+Selected].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.RadioButtonPainter",RadioButtonPainter.ICON_MOUSEOVER_SELECTED,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("RadioButton[Focused+MouseOver+Selected].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.RadioButtonPainter",RadioButtonPainter.ICON_MOUSEOVER_SELECTED_FOCUSED,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("RadioButton[Disabled+Selected].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.RadioButtonPainter",RadioButtonPainter.ICON_DISABLED_SELECTED,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("RadioButton.icon",new NimbusIcon("RadioButton","iconPainter",18,18));  d.put("CheckBox.contentMargins",new InsetsUIResource(0,0,0,0));  addColor(d,"CheckBox[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  d.put("CheckBox[Disabled].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.CheckBoxPainter",CheckBoxPainter.ICON_DISABLED,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("CheckBox[Enabled].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.CheckBoxPainter",CheckBoxPainter.ICON_ENABLED,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("CheckBox[Focused].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.CheckBoxPainter",CheckBoxPainter.ICON_FOCUSED,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("CheckBox[MouseOver].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.CheckBoxPainter",CheckBoxPainter.ICON_MOUSEOVER,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("CheckBox[Focused+MouseOver].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.CheckBoxPainter",CheckBoxPainter.ICON_MOUSEOVER_FOCUSED,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("CheckBox[Pressed].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.CheckBoxPainter",CheckBoxPainter.ICON_PRESSED,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("CheckBox[Focused+Pressed].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.CheckBoxPainter",CheckBoxPainter.ICON_PRESSED_FOCUSED,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("CheckBox[Selected].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.CheckBoxPainter",CheckBoxPainter.ICON_SELECTED,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("CheckBox[Focused+Selected].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.CheckBoxPainter",CheckBoxPainter.ICON_SELECTED_FOCUSED,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("CheckBox[Pressed+Selected].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.CheckBoxPainter",CheckBoxPainter.ICON_PRESSED_SELECTED,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("CheckBox[Focused+Pressed+Selected].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.CheckBoxPainter",CheckBoxPainter.ICON_PRESSED_SELECTED_FOCUSED,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("CheckBox[MouseOver+Selected].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.CheckBoxPainter",CheckBoxPainter.ICON_MOUSEOVER_SELECTED,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("CheckBox[Focused+MouseOver+Selected].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.CheckBoxPainter",CheckBoxPainter.ICON_MOUSEOVER_SELECTED_FOCUSED,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("CheckBox[Disabled+Selected].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.CheckBoxPainter",CheckBoxPainter.ICON_DISABLED_SELECTED,new Insets(5,5,5,5),new Dimension(18,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("CheckBox.icon",new NimbusIcon("CheckBox","iconPainter",18,18));  d.put("ColorChooser.contentMargins",new InsetsUIResource(5,0,0,0));  addColor(d,"ColorChooser.swatchesDefaultRecentColor",255,255,255,255);  d.put("ColorChooser:\"ColorChooser.previewPanelHolder\".contentMargins",new InsetsUIResource(0,5,10,5));  d.put("ColorChooser:\"ColorChooser.previewPanelHolder\":\"OptionPane.label\".contentMargins",new InsetsUIResource(0,10,10,10));  d.put("ComboBox.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("ComboBox.States","Enabled,MouseOver,Pressed,Selected,Disabled,Focused,Editable");  d.put("ComboBox.Editable",new ComboBoxEditableState());  d.put("ComboBox.forceOpaque",Boolean.TRUE);  d.put("ComboBox.buttonWhenNotEditable",Boolean.TRUE);  d.put("ComboBox.rendererUseListColors",Boolean.FALSE);  d.put("ComboBox.pressedWhenPopupVisible",Boolean.TRUE);  d.put("ComboBox.squareButton",Boolean.FALSE);  d.put("ComboBox.popupInsets",new InsetsUIResource(-2,2,0,2));  d.put("ComboBox.padding",new InsetsUIResource(3,3,3,3));  d.put("ComboBox[Disabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ComboBoxPainter",ComboBoxPainter.BACKGROUND_DISABLED,new Insets(8,9,8,19),new Dimension(83,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ComboBox[Disabled+Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ComboBoxPainter",ComboBoxPainter.BACKGROUND_DISABLED_PRESSED,new Insets(8,9,8,19),new Dimension(83,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ComboBox[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ComboBoxPainter",ComboBoxPainter.BACKGROUND_ENABLED,new Insets(8,9,8,19),new Dimension(83,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ComboBox[Focused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ComboBoxPainter",ComboBoxPainter.BACKGROUND_FOCUSED,new Insets(8,9,8,19),new Dimension(83,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ComboBox[Focused+MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ComboBoxPainter",ComboBoxPainter.BACKGROUND_MOUSEOVER_FOCUSED,new Insets(8,9,8,19),new Dimension(83,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ComboBox[MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ComboBoxPainter",ComboBoxPainter.BACKGROUND_MOUSEOVER,new Insets(8,9,8,19),new Dimension(83,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ComboBox[Focused+Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ComboBoxPainter",ComboBoxPainter.BACKGROUND_PRESSED_FOCUSED,new Insets(8,9,8,19),new Dimension(83,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ComboBox[Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ComboBoxPainter",ComboBoxPainter.BACKGROUND_PRESSED,new Insets(8,9,8,19),new Dimension(83,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ComboBox[Enabled+Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ComboBoxPainter",ComboBoxPainter.BACKGROUND_ENABLED_SELECTED,new Insets(8,9,8,19),new Dimension(83,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ComboBox[Disabled+Editable].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ComboBoxPainter",ComboBoxPainter.BACKGROUND_DISABLED_EDITABLE,new Insets(6,5,6,17),new Dimension(79,21),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ComboBox[Editable+Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ComboBoxPainter",ComboBoxPainter.BACKGROUND_ENABLED_EDITABLE,new Insets(6,5,6,17),new Dimension(79,21),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ComboBox[Editable+Focused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ComboBoxPainter",ComboBoxPainter.BACKGROUND_FOCUSED_EDITABLE,new Insets(5,5,5,5),new Dimension(142,27),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ComboBox[Editable+MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ComboBoxPainter",ComboBoxPainter.BACKGROUND_MOUSEOVER_EDITABLE,new Insets(4,5,5,17),new Dimension(79,21),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ComboBox[Editable+Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ComboBoxPainter",ComboBoxPainter.BACKGROUND_PRESSED_EDITABLE,new Insets(4,5,5,17),new Dimension(79,21),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ComboBox:\"ComboBox.textField\".contentMargins",new InsetsUIResource(0,6,0,3));  addColor(d,"ComboBox:\"ComboBox.textField\"[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  d.put("ComboBox:\"ComboBox.textField\"[Disabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ComboBoxTextFieldPainter",ComboBoxTextFieldPainter.BACKGROUND_DISABLED,new Insets(5,3,3,1),new Dimension(64,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ComboBox:\"ComboBox.textField\"[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ComboBoxTextFieldPainter",ComboBoxTextFieldPainter.BACKGROUND_ENABLED,new Insets(5,3,3,1),new Dimension(64,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  addColor(d,"ComboBox:\"ComboBox.textField\"[Selected].textForeground","nimbusSelectedText",0.0f,0.0f,0.0f,0);  d.put("ComboBox:\"ComboBox.textField\"[Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ComboBoxTextFieldPainter",ComboBoxTextFieldPainter.BACKGROUND_SELECTED,new Insets(5,3,3,1),new Dimension(64,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ComboBox:\"ComboBox.arrowButton\".contentMargins",new InsetsUIResource(0,0,0,0));  d.put("ComboBox:\"ComboBox.arrowButton\".States","Enabled,MouseOver,Pressed,Disabled,Editable");  d.put("ComboBox:\"ComboBox.arrowButton\".Editable",new ComboBoxArrowButtonEditableState());  d.put("ComboBox:\"ComboBox.arrowButton\".size",new Integer(19));  d.put("ComboBox:\"ComboBox.arrowButton\"[Disabled+Editable].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ComboBoxArrowButtonPainter",ComboBoxArrowButtonPainter.BACKGROUND_DISABLED_EDITABLE,new Insets(8,1,8,8),new Dimension(20,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ComboBox:\"ComboBox.arrowButton\"[Editable+Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ComboBoxArrowButtonPainter",ComboBoxArrowButtonPainter.BACKGROUND_ENABLED_EDITABLE,new Insets(8,1,8,8),new Dimension(20,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ComboBox:\"ComboBox.arrowButton\"[Editable+MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ComboBoxArrowButtonPainter",ComboBoxArrowButtonPainter.BACKGROUND_MOUSEOVER_EDITABLE,new Insets(8,1,8,8),new Dimension(20,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ComboBox:\"ComboBox.arrowButton\"[Editable+Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ComboBoxArrowButtonPainter",ComboBoxArrowButtonPainter.BACKGROUND_PRESSED_EDITABLE,new Insets(8,1,8,8),new Dimension(20,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ComboBox:\"ComboBox.arrowButton\"[Editable+Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ComboBoxArrowButtonPainter",ComboBoxArrowButtonPainter.BACKGROUND_SELECTED_EDITABLE,new Insets(8,1,8,8),new Dimension(20,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ComboBox:\"ComboBox.arrowButton\"[Enabled].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ComboBoxArrowButtonPainter",ComboBoxArrowButtonPainter.FOREGROUND_ENABLED,new Insets(6,9,6,10),new Dimension(24,19),true,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ComboBox:\"ComboBox.arrowButton\"[MouseOver].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ComboBoxArrowButtonPainter",ComboBoxArrowButtonPainter.FOREGROUND_MOUSEOVER,new Insets(6,9,6,10),new Dimension(24,19),true,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ComboBox:\"ComboBox.arrowButton\"[Disabled].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ComboBoxArrowButtonPainter",ComboBoxArrowButtonPainter.FOREGROUND_DISABLED,new Insets(6,9,6,10),new Dimension(24,19),true,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ComboBox:\"ComboBox.arrowButton\"[Pressed].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ComboBoxArrowButtonPainter",ComboBoxArrowButtonPainter.FOREGROUND_PRESSED,new Insets(6,9,6,10),new Dimension(24,19),true,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ComboBox:\"ComboBox.arrowButton\"[Selected].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ComboBoxArrowButtonPainter",ComboBoxArrowButtonPainter.FOREGROUND_SELECTED,new Insets(6,9,6,10),new Dimension(24,19),true,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ComboBox:\"ComboBox.listRenderer\".contentMargins",new InsetsUIResource(2,4,2,4));  d.put("ComboBox:\"ComboBox.listRenderer\".opaque",Boolean.TRUE);  addColor(d,"ComboBox:\"ComboBox.listRenderer\".background","nimbusLightBackground",0.0f,0.0f,0.0f,0);  addColor(d,"ComboBox:\"ComboBox.listRenderer\"[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  addColor(d,"ComboBox:\"ComboBox.listRenderer\"[Selected].textForeground","nimbusSelectedText",0.0f,0.0f,0.0f,0);  addColor(d,"ComboBox:\"ComboBox.listRenderer\"[Selected].background","nimbusSelectionBackground",0.0f,0.0f,0.0f,0);  d.put("ComboBox:\"ComboBox.renderer\".contentMargins",new InsetsUIResource(2,4,2,4));  addColor(d,"ComboBox:\"ComboBox.renderer\"[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  addColor(d,"ComboBox:\"ComboBox.renderer\"[Selected].textForeground","nimbusSelectedText",0.0f,0.0f,0.0f,0);  addColor(d,"ComboBox:\"ComboBox.renderer\"[Selected].background","nimbusSelectionBackground",0.0f,0.0f,0.0f,0);  d.put("\"ComboBox.scrollPane\".contentMargins",new InsetsUIResource(0,0,0,0));  d.put("FileChooser.contentMargins",new InsetsUIResource(10,10,10,10));  d.put("FileChooser.opaque",Boolean.TRUE);  d.put("FileChooser.usesSingleFilePane",Boolean.TRUE);  d.put("FileChooser[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.FileChooserPainter",FileChooserPainter.BACKGROUND_ENABLED,new Insets(0,0,0,0),new Dimension(100,30),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  d.put("FileChooser[Enabled].fileIconPainter",new LazyPainter("javax.swing.plaf.nimbus.FileChooserPainter",FileChooserPainter.FILEICON_ENABLED,new Insets(5,5,5,5),new Dimension(16,16),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("FileChooser.fileIcon",new NimbusIcon("FileChooser","fileIconPainter",16,16));  d.put("FileChooser[Enabled].directoryIconPainter",new LazyPainter("javax.swing.plaf.nimbus.FileChooserPainter",FileChooserPainter.DIRECTORYICON_ENABLED,new Insets(5,5,5,5),new Dimension(16,16),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("FileChooser.directoryIcon",new NimbusIcon("FileChooser","directoryIconPainter",16,16));  d.put("FileChooser[Enabled].upFolderIconPainter",new LazyPainter("javax.swing.plaf.nimbus.FileChooserPainter",FileChooserPainter.UPFOLDERICON_ENABLED,new Insets(5,5,5,5),new Dimension(16,16),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("FileChooser.upFolderIcon",new NimbusIcon("FileChooser","upFolderIconPainter",16,16));  d.put("FileChooser[Enabled].newFolderIconPainter",new LazyPainter("javax.swing.plaf.nimbus.FileChooserPainter",FileChooserPainter.NEWFOLDERICON_ENABLED,new Insets(5,5,5,5),new Dimension(16,16),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("FileChooser.newFolderIcon",new NimbusIcon("FileChooser","newFolderIconPainter",16,16));  d.put("FileChooser[Enabled].hardDriveIconPainter",new LazyPainter("javax.swing.plaf.nimbus.FileChooserPainter",FileChooserPainter.HARDDRIVEICON_ENABLED,new Insets(5,5,5,5),new Dimension(16,16),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("FileChooser.hardDriveIcon",new NimbusIcon("FileChooser","hardDriveIconPainter",16,16));  d.put("FileChooser[Enabled].floppyDriveIconPainter",new LazyPainter("javax.swing.plaf.nimbus.FileChooserPainter",FileChooserPainter.FLOPPYDRIVEICON_ENABLED,new Insets(5,5,5,5),new Dimension(16,16),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("FileChooser.floppyDriveIcon",new NimbusIcon("FileChooser","floppyDriveIconPainter",16,16));  d.put("FileChooser[Enabled].homeFolderIconPainter",new LazyPainter("javax.swing.plaf.nimbus.FileChooserPainter",FileChooserPainter.HOMEFOLDERICON_ENABLED,new Insets(5,5,5,5),new Dimension(16,16),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("FileChooser.homeFolderIcon",new NimbusIcon("FileChooser","homeFolderIconPainter",16,16));  d.put("FileChooser[Enabled].detailsViewIconPainter",new LazyPainter("javax.swing.plaf.nimbus.FileChooserPainter",FileChooserPainter.DETAILSVIEWICON_ENABLED,new Insets(5,5,5,5),new Dimension(16,16),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("FileChooser.detailsViewIcon",new NimbusIcon("FileChooser","detailsViewIconPainter",16,16));  d.put("FileChooser[Enabled].listViewIconPainter",new LazyPainter("javax.swing.plaf.nimbus.FileChooserPainter",FileChooserPainter.LISTVIEWICON_ENABLED,new Insets(5,5,5,5),new Dimension(16,16),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("FileChooser.listViewIcon",new NimbusIcon("FileChooser","listViewIconPainter",16,16));  d.put("InternalFrameTitlePane.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("InternalFrameTitlePane.maxFrameIconSize",new DimensionUIResource(18,18));  d.put("InternalFrame.contentMargins",new InsetsUIResource(1,6,6,6));  d.put("InternalFrame.States","Enabled,WindowFocused");  d.put("InternalFrame.WindowFocused",new InternalFrameWindowFocusedState());  d.put("InternalFrame[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFramePainter",InternalFramePainter.BACKGROUND_ENABLED,new Insets(25,6,6,6),new Dimension(25,36),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame[Enabled+WindowFocused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFramePainter",InternalFramePainter.BACKGROUND_ENABLED_WINDOWFOCUSED,new Insets(25,6,6,6),new Dimension(25,36),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane.contentMargins",new InsetsUIResource(3,0,3,0));  d.put("InternalFrame:InternalFrameTitlePane.States","Enabled,WindowFocused");  d.put("InternalFrame:InternalFrameTitlePane.WindowFocused",new InternalFrameTitlePaneWindowFocusedState());  d.put("InternalFrame:InternalFrameTitlePane.titleAlignment","CENTER");  addColor(d,"InternalFrame:InternalFrameTitlePane[Enabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.menuButton\".contentMargins",new InsetsUIResource(0,0,0,0));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.menuButton\".States","Enabled,MouseOver,Pressed,Disabled,Focused,Selected,WindowNotFocused");  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.menuButton\".WindowNotFocused",new InternalFrameTitlePaneMenuButtonWindowNotFocusedState());  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.menuButton\".test","am InternalFrameTitlePane.menuButton");  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.menuButton\"[Enabled].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneMenuButtonPainter",InternalFrameTitlePaneMenuButtonPainter.ICON_ENABLED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.menuButton\"[Disabled].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneMenuButtonPainter",InternalFrameTitlePaneMenuButtonPainter.ICON_DISABLED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.menuButton\"[MouseOver].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneMenuButtonPainter",InternalFrameTitlePaneMenuButtonPainter.ICON_MOUSEOVER,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.menuButton\"[Pressed].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneMenuButtonPainter",InternalFrameTitlePaneMenuButtonPainter.ICON_PRESSED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.menuButton\"[Enabled+WindowNotFocused].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneMenuButtonPainter",InternalFrameTitlePaneMenuButtonPainter.ICON_ENABLED_WINDOWNOTFOCUSED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.menuButton\"[MouseOver+WindowNotFocused].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneMenuButtonPainter",InternalFrameTitlePaneMenuButtonPainter.ICON_MOUSEOVER_WINDOWNOTFOCUSED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.menuButton\"[Pressed+WindowNotFocused].iconPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneMenuButtonPainter",InternalFrameTitlePaneMenuButtonPainter.ICON_PRESSED_WINDOWNOTFOCUSED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.menuButton\".icon",new NimbusIcon("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.menuButton\"","iconPainter",19,18));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.iconifyButton\".contentMargins",new InsetsUIResource(9,9,9,9));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.iconifyButton\".States","Enabled,MouseOver,Pressed,Disabled,Focused,Selected,WindowNotFocused");  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.iconifyButton\".WindowNotFocused",new InternalFrameTitlePaneIconifyButtonWindowNotFocusedState());  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.iconifyButton\"[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneIconifyButtonPainter",InternalFrameTitlePaneIconifyButtonPainter.BACKGROUND_ENABLED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.iconifyButton\"[Disabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneIconifyButtonPainter",InternalFrameTitlePaneIconifyButtonPainter.BACKGROUND_DISABLED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.iconifyButton\"[MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneIconifyButtonPainter",InternalFrameTitlePaneIconifyButtonPainter.BACKGROUND_MOUSEOVER,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.iconifyButton\"[Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneIconifyButtonPainter",InternalFrameTitlePaneIconifyButtonPainter.BACKGROUND_PRESSED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.iconifyButton\"[Enabled+WindowNotFocused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneIconifyButtonPainter",InternalFrameTitlePaneIconifyButtonPainter.BACKGROUND_ENABLED_WINDOWNOTFOCUSED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.iconifyButton\"[MouseOver+WindowNotFocused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneIconifyButtonPainter",InternalFrameTitlePaneIconifyButtonPainter.BACKGROUND_MOUSEOVER_WINDOWNOTFOCUSED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.iconifyButton\"[Pressed+WindowNotFocused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneIconifyButtonPainter",InternalFrameTitlePaneIconifyButtonPainter.BACKGROUND_PRESSED_WINDOWNOTFOCUSED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.maximizeButton\".contentMargins",new InsetsUIResource(9,9,9,9));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.maximizeButton\".States","Enabled,MouseOver,Pressed,Disabled,Focused,Selected,WindowNotFocused,WindowMaximized");  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.maximizeButton\".WindowNotFocused",new InternalFrameTitlePaneMaximizeButtonWindowNotFocusedState());  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.maximizeButton\".WindowMaximized",new InternalFrameTitlePaneMaximizeButtonWindowMaximizedState());  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.maximizeButton\"[Disabled+WindowMaximized].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneMaximizeButtonPainter",InternalFrameTitlePaneMaximizeButtonPainter.BACKGROUND_DISABLED_WINDOWMAXIMIZED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.maximizeButton\"[Enabled+WindowMaximized].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneMaximizeButtonPainter",InternalFrameTitlePaneMaximizeButtonPainter.BACKGROUND_ENABLED_WINDOWMAXIMIZED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.maximizeButton\"[MouseOver+WindowMaximized].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneMaximizeButtonPainter",InternalFrameTitlePaneMaximizeButtonPainter.BACKGROUND_MOUSEOVER_WINDOWMAXIMIZED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.maximizeButton\"[Pressed+WindowMaximized].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneMaximizeButtonPainter",InternalFrameTitlePaneMaximizeButtonPainter.BACKGROUND_PRESSED_WINDOWMAXIMIZED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.maximizeButton\"[Enabled+WindowMaximized+WindowNotFocused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneMaximizeButtonPainter",InternalFrameTitlePaneMaximizeButtonPainter.BACKGROUND_ENABLED_WINDOWNOTFOCUSED_WINDOWMAXIMIZED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.maximizeButton\"[MouseOver+WindowMaximized+WindowNotFocused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneMaximizeButtonPainter",InternalFrameTitlePaneMaximizeButtonPainter.BACKGROUND_MOUSEOVER_WINDOWNOTFOCUSED_WINDOWMAXIMIZED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.maximizeButton\"[Pressed+WindowMaximized+WindowNotFocused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneMaximizeButtonPainter",InternalFrameTitlePaneMaximizeButtonPainter.BACKGROUND_PRESSED_WINDOWNOTFOCUSED_WINDOWMAXIMIZED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.maximizeButton\"[Disabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneMaximizeButtonPainter",InternalFrameTitlePaneMaximizeButtonPainter.BACKGROUND_DISABLED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.maximizeButton\"[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneMaximizeButtonPainter",InternalFrameTitlePaneMaximizeButtonPainter.BACKGROUND_ENABLED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.maximizeButton\"[MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneMaximizeButtonPainter",InternalFrameTitlePaneMaximizeButtonPainter.BACKGROUND_MOUSEOVER,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.maximizeButton\"[Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneMaximizeButtonPainter",InternalFrameTitlePaneMaximizeButtonPainter.BACKGROUND_PRESSED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.maximizeButton\"[Enabled+WindowNotFocused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneMaximizeButtonPainter",InternalFrameTitlePaneMaximizeButtonPainter.BACKGROUND_ENABLED_WINDOWNOTFOCUSED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.maximizeButton\"[MouseOver+WindowNotFocused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneMaximizeButtonPainter",InternalFrameTitlePaneMaximizeButtonPainter.BACKGROUND_MOUSEOVER_WINDOWNOTFOCUSED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.maximizeButton\"[Pressed+WindowNotFocused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneMaximizeButtonPainter",InternalFrameTitlePaneMaximizeButtonPainter.BACKGROUND_PRESSED_WINDOWNOTFOCUSED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.closeButton\".contentMargins",new InsetsUIResource(9,9,9,9));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.closeButton\".States","Enabled,MouseOver,Pressed,Disabled,Focused,Selected,WindowNotFocused");  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.closeButton\".WindowNotFocused",new InternalFrameTitlePaneCloseButtonWindowNotFocusedState());  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.closeButton\"[Disabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneCloseButtonPainter",InternalFrameTitlePaneCloseButtonPainter.BACKGROUND_DISABLED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.closeButton\"[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneCloseButtonPainter",InternalFrameTitlePaneCloseButtonPainter.BACKGROUND_ENABLED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.closeButton\"[MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneCloseButtonPainter",InternalFrameTitlePaneCloseButtonPainter.BACKGROUND_MOUSEOVER,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.closeButton\"[Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneCloseButtonPainter",InternalFrameTitlePaneCloseButtonPainter.BACKGROUND_PRESSED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.closeButton\"[Enabled+WindowNotFocused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneCloseButtonPainter",InternalFrameTitlePaneCloseButtonPainter.BACKGROUND_ENABLED_WINDOWNOTFOCUSED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.closeButton\"[MouseOver+WindowNotFocused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneCloseButtonPainter",InternalFrameTitlePaneCloseButtonPainter.BACKGROUND_MOUSEOVER_WINDOWNOTFOCUSED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.closeButton\"[Pressed+WindowNotFocused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.InternalFrameTitlePaneCloseButtonPainter",InternalFrameTitlePaneCloseButtonPainter.BACKGROUND_PRESSED_WINDOWNOTFOCUSED,new Insets(0,0,0,0),new Dimension(19,18),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("DesktopIcon.contentMargins",new InsetsUIResource(4,6,5,4));  d.put("DesktopIcon[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.DesktopIconPainter",DesktopIconPainter.BACKGROUND_ENABLED,new Insets(5,5,5,5),new Dimension(28,26),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("DesktopPane.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("DesktopPane.opaque",Boolean.TRUE);  d.put("DesktopPane[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.DesktopPanePainter",DesktopPanePainter.BACKGROUND_ENABLED,new Insets(0,0,0,0),new Dimension(300,232),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("Label.contentMargins",new InsetsUIResource(0,0,0,0));  addColor(d,"Label[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  d.put("List.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("List.opaque",Boolean.TRUE);  addColor(d,"List.background","nimbusLightBackground",0.0f,0.0f,0.0f,0);  d.put("List.rendererUseListColors",Boolean.TRUE);  d.put("List.rendererUseUIBorder",Boolean.TRUE);  d.put("List.cellNoFocusBorder",new BorderUIResource(BorderFactory.createEmptyBorder(2,5,2,5)));  d.put("List.focusCellHighlightBorder",new BorderUIResource(new PainterBorder("Tree:TreeCell[Enabled+Focused].backgroundPainter",new Insets(2,5,2,5))));  addColor(d,"List.dropLineColor","nimbusFocus",0.0f,0.0f,0.0f,0);  addColor(d,"List[Selected].textForeground","nimbusLightBackground",0.0f,0.0f,0.0f,0);  addColor(d,"List[Selected].textBackground","nimbusSelectionBackground",0.0f,0.0f,0.0f,0);  addColor(d,"List[Disabled+Selected].textBackground","nimbusSelectionBackground",0.0f,0.0f,0.0f,0);  addColor(d,"List[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  d.put("List:\"List.cellRenderer\".contentMargins",new InsetsUIResource(0,0,0,0));  d.put("List:\"List.cellRenderer\".opaque",Boolean.TRUE);  addColor(d,"List:\"List.cellRenderer\"[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  addColor(d,"List:\"List.cellRenderer\"[Disabled].background","nimbusSelectionBackground",0.0f,0.0f,0.0f,0);  d.put("MenuBar.contentMargins",new InsetsUIResource(2,6,2,6));  d.put("MenuBar[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.MenuBarPainter",MenuBarPainter.BACKGROUND_ENABLED,new Insets(1,0,0,0),new Dimension(18,22),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("MenuBar[Enabled].borderPainter",new LazyPainter("javax.swing.plaf.nimbus.MenuBarPainter",MenuBarPainter.BORDER_ENABLED,new Insets(0,0,1,0),new Dimension(30,30),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("MenuBar:Menu.contentMargins",new InsetsUIResource(1,4,2,4));  addColor(d,"MenuBar:Menu[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  addColor(d,"MenuBar:Menu[Enabled].textForeground",35,35,36,255);  addColor(d,"MenuBar:Menu[Selected].textForeground",255,255,255,255);  d.put("MenuBar:Menu[Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.MenuBarMenuPainter",MenuBarMenuPainter.BACKGROUND_SELECTED,new Insets(0,0,0,0),new Dimension(100,30),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  d.put("MenuBar:Menu:MenuItemAccelerator.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("MenuItem.contentMargins",new InsetsUIResource(1,12,2,13));  d.put("MenuItem.textIconGap",new Integer(5));  addColor(d,"MenuItem[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  addColor(d,"MenuItem[Enabled].textForeground",35,35,36,255);  addColor(d,"MenuItem[MouseOver].textForeground",255,255,255,255);  d.put("MenuItem[MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.MenuItemPainter",MenuItemPainter.BACKGROUND_MOUSEOVER,new Insets(0,0,0,0),new Dimension(100,3),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  d.put("MenuItem:MenuItemAccelerator.contentMargins",new InsetsUIResource(0,0,0,0));  addColor(d,"MenuItem:MenuItemAccelerator[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  addColor(d,"MenuItem:MenuItemAccelerator[MouseOver].textForeground",255,255,255,255);  d.put("RadioButtonMenuItem.contentMargins",new InsetsUIResource(1,12,2,13));  d.put("RadioButtonMenuItem.textIconGap",new Integer(5));  addColor(d,"RadioButtonMenuItem[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  addColor(d,"RadioButtonMenuItem[Enabled].textForeground",35,35,36,255);  addColor(d,"RadioButtonMenuItem[MouseOver].textForeground",255,255,255,255);  d.put("RadioButtonMenuItem[MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.RadioButtonMenuItemPainter",RadioButtonMenuItemPainter.BACKGROUND_MOUSEOVER,new Insets(0,0,0,0),new Dimension(100,3),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  addColor(d,"RadioButtonMenuItem[MouseOver+Selected].textForeground",255,255,255,255);  d.put("RadioButtonMenuItem[MouseOver+Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.RadioButtonMenuItemPainter",RadioButtonMenuItemPainter.BACKGROUND_SELECTED_MOUSEOVER,new Insets(0,0,0,0),new Dimension(100,3),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  d.put("RadioButtonMenuItem[Disabled+Selected].checkIconPainter",new LazyPainter("javax.swing.plaf.nimbus.RadioButtonMenuItemPainter",RadioButtonMenuItemPainter.CHECKICON_DISABLED_SELECTED,new Insets(5,5,5,5),new Dimension(9,10),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("RadioButtonMenuItem[Enabled+Selected].checkIconPainter",new LazyPainter("javax.swing.plaf.nimbus.RadioButtonMenuItemPainter",RadioButtonMenuItemPainter.CHECKICON_ENABLED_SELECTED,new Insets(5,5,5,5),new Dimension(9,10),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("RadioButtonMenuItem[MouseOver+Selected].checkIconPainter",new LazyPainter("javax.swing.plaf.nimbus.RadioButtonMenuItemPainter",RadioButtonMenuItemPainter.CHECKICON_SELECTED_MOUSEOVER,new Insets(5,5,5,5),new Dimension(9,10),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("RadioButtonMenuItem.checkIcon",new NimbusIcon("RadioButtonMenuItem","checkIconPainter",9,10));  d.put("RadioButtonMenuItem:MenuItemAccelerator.contentMargins",new InsetsUIResource(0,0,0,0));  addColor(d,"RadioButtonMenuItem:MenuItemAccelerator[MouseOver].textForeground",255,255,255,255);  d.put("CheckBoxMenuItem.contentMargins",new InsetsUIResource(1,12,2,13));  d.put("CheckBoxMenuItem.textIconGap",new Integer(5));  addColor(d,"CheckBoxMenuItem[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  addColor(d,"CheckBoxMenuItem[Enabled].textForeground",35,35,36,255);  addColor(d,"CheckBoxMenuItem[MouseOver].textForeground",255,255,255,255);  d.put("CheckBoxMenuItem[MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.CheckBoxMenuItemPainter",CheckBoxMenuItemPainter.BACKGROUND_MOUSEOVER,new Insets(0,0,0,0),new Dimension(100,3),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  addColor(d,"CheckBoxMenuItem[MouseOver+Selected].textForeground",255,255,255,255);  d.put("CheckBoxMenuItem[MouseOver+Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.CheckBoxMenuItemPainter",CheckBoxMenuItemPainter.BACKGROUND_SELECTED_MOUSEOVER,new Insets(0,0,0,0),new Dimension(100,3),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  d.put("CheckBoxMenuItem[Disabled+Selected].checkIconPainter",new LazyPainter("javax.swing.plaf.nimbus.CheckBoxMenuItemPainter",CheckBoxMenuItemPainter.CHECKICON_DISABLED_SELECTED,new Insets(5,5,5,5),new Dimension(9,10),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("CheckBoxMenuItem[Enabled+Selected].checkIconPainter",new LazyPainter("javax.swing.plaf.nimbus.CheckBoxMenuItemPainter",CheckBoxMenuItemPainter.CHECKICON_ENABLED_SELECTED,new Insets(5,5,5,5),new Dimension(9,10),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("CheckBoxMenuItem[MouseOver+Selected].checkIconPainter",new LazyPainter("javax.swing.plaf.nimbus.CheckBoxMenuItemPainter",CheckBoxMenuItemPainter.CHECKICON_SELECTED_MOUSEOVER,new Insets(5,5,5,5),new Dimension(9,10),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("CheckBoxMenuItem.checkIcon",new NimbusIcon("CheckBoxMenuItem","checkIconPainter",9,10));  d.put("CheckBoxMenuItem:MenuItemAccelerator.contentMargins",new InsetsUIResource(0,0,0,0));  addColor(d,"CheckBoxMenuItem:MenuItemAccelerator[MouseOver].textForeground",255,255,255,255);  d.put("Menu.contentMargins",new InsetsUIResource(1,12,2,5));  d.put("Menu.textIconGap",new Integer(5));  addColor(d,"Menu[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  addColor(d,"Menu[Enabled].textForeground",35,35,36,255);  addColor(d,"Menu[Enabled+Selected].textForeground",255,255,255,255);  d.put("Menu[Enabled+Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.MenuPainter",MenuPainter.BACKGROUND_ENABLED_SELECTED,new Insets(0,0,0,0),new Dimension(100,30),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  d.put("Menu[Disabled].arrowIconPainter",new LazyPainter("javax.swing.plaf.nimbus.MenuPainter",MenuPainter.ARROWICON_DISABLED,new Insets(5,5,5,5),new Dimension(9,10),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Menu[Enabled].arrowIconPainter",new LazyPainter("javax.swing.plaf.nimbus.MenuPainter",MenuPainter.ARROWICON_ENABLED,new Insets(5,5,5,5),new Dimension(9,10),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Menu[Enabled+Selected].arrowIconPainter",new LazyPainter("javax.swing.plaf.nimbus.MenuPainter",MenuPainter.ARROWICON_ENABLED_SELECTED,new Insets(1,1,1,1),new Dimension(9,10),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Menu.arrowIcon",new NimbusIcon("Menu","arrowIconPainter",9,10));  d.put("Menu:MenuItemAccelerator.contentMargins",new InsetsUIResource(0,0,0,0));  addColor(d,"Menu:MenuItemAccelerator[MouseOver].textForeground",255,255,255,255);  d.put("PopupMenu.contentMargins",new InsetsUIResource(6,1,6,1));  d.put("PopupMenu.opaque",Boolean.TRUE);  d.put("PopupMenu.consumeEventOnClose",Boolean.TRUE);  d.put("PopupMenu[Disabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.PopupMenuPainter",PopupMenuPainter.BACKGROUND_DISABLED,new Insets(9,0,11,0),new Dimension(220,313),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  d.put("PopupMenu[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.PopupMenuPainter",PopupMenuPainter.BACKGROUND_ENABLED,new Insets(11,2,11,2),new Dimension(220,313),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  d.put("PopupMenuSeparator.contentMargins",new InsetsUIResource(1,0,2,0));  d.put("PopupMenuSeparator[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.PopupMenuSeparatorPainter",PopupMenuSeparatorPainter.BACKGROUND_ENABLED,new Insets(1,1,1,1),new Dimension(3,3),true,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  d.put("OptionPane.contentMargins",new InsetsUIResource(15,15,15,15));  d.put("OptionPane.opaque",Boolean.TRUE);  d.put("OptionPane.buttonOrientation",new Integer(4));  d.put("OptionPane.messageAnchor",new Integer(17));  d.put("OptionPane.separatorPadding",new Integer(0));  d.put("OptionPane.sameSizeButtons",Boolean.FALSE);  d.put("OptionPane:\"OptionPane.separator\".contentMargins",new InsetsUIResource(1,0,0,0));  d.put("OptionPane:\"OptionPane.messageArea\".contentMargins",new InsetsUIResource(0,0,10,0));  d.put("OptionPane:\"OptionPane.messageArea\":\"OptionPane.label\".contentMargins",new InsetsUIResource(0,10,10,10));  d.put("OptionPane:\"OptionPane.messageArea\":\"OptionPane.label\"[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.OptionPaneMessageAreaOptionPaneLabelPainter",OptionPaneMessageAreaOptionPaneLabelPainter.BACKGROUND_ENABLED,new Insets(5,5,5,5),new Dimension(100,30),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  d.put("OptionPane[Enabled].errorIconPainter",new LazyPainter("javax.swing.plaf.nimbus.OptionPanePainter",OptionPanePainter.ERRORICON_ENABLED,new Insets(0,0,0,0),new Dimension(48,48),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("OptionPane.errorIcon",new NimbusIcon("OptionPane","errorIconPainter",48,48));  d.put("OptionPane[Enabled].informationIconPainter",new LazyPainter("javax.swing.plaf.nimbus.OptionPanePainter",OptionPanePainter.INFORMATIONICON_ENABLED,new Insets(0,0,0,0),new Dimension(48,48),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("OptionPane.informationIcon",new NimbusIcon("OptionPane","informationIconPainter",48,48));  d.put("OptionPane[Enabled].questionIconPainter",new LazyPainter("javax.swing.plaf.nimbus.OptionPanePainter",OptionPanePainter.QUESTIONICON_ENABLED,new Insets(0,0,0,0),new Dimension(48,48),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("OptionPane.questionIcon",new NimbusIcon("OptionPane","questionIconPainter",48,48));  d.put("OptionPane[Enabled].warningIconPainter",new LazyPainter("javax.swing.plaf.nimbus.OptionPanePainter",OptionPanePainter.WARNINGICON_ENABLED,new Insets(0,0,0,0),new Dimension(48,48),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("OptionPane.warningIcon",new NimbusIcon("OptionPane","warningIconPainter",48,48));  d.put("Panel.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("Panel.opaque",Boolean.TRUE);  d.put("ProgressBar.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("ProgressBar.States","Enabled,Disabled,Indeterminate,Finished");  d.put("ProgressBar.Indeterminate",new ProgressBarIndeterminateState());  d.put("ProgressBar.Finished",new ProgressBarFinishedState());  d.put("ProgressBar.tileWhenIndeterminate",Boolean.TRUE);  d.put("ProgressBar.tileWidth",new Integer(27));  d.put("ProgressBar.paintOutsideClip",Boolean.TRUE);  d.put("ProgressBar.rotateText",Boolean.TRUE);  d.put("ProgressBar.vertictalSize",new DimensionUIResource(19,150));  d.put("ProgressBar.horizontalSize",new DimensionUIResource(150,19));  d.put("ProgressBar.cycleTime",new Integer(250));  d.put("ProgressBar[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ProgressBarPainter",ProgressBarPainter.BACKGROUND_ENABLED,new Insets(5,5,5,5),new Dimension(29,19),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  addColor(d,"ProgressBar[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  d.put("ProgressBar[Disabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ProgressBarPainter",ProgressBarPainter.BACKGROUND_DISABLED,new Insets(5,5,5,5),new Dimension(29,19),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("ProgressBar[Enabled].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ProgressBarPainter",ProgressBarPainter.FOREGROUND_ENABLED,new Insets(5,5,5,5),new Dimension(27,19),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ProgressBar[Enabled+Finished].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ProgressBarPainter",ProgressBarPainter.FOREGROUND_ENABLED_FINISHED,new Insets(5,5,5,5),new Dimension(27,19),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ProgressBar[Enabled+Indeterminate].progressPadding",new Integer(3));  d.put("ProgressBar[Enabled+Indeterminate].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ProgressBarPainter",ProgressBarPainter.FOREGROUND_ENABLED_INDETERMINATE,new Insets(5,5,5,5),new Dimension(30,13),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ProgressBar[Disabled].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ProgressBarPainter",ProgressBarPainter.FOREGROUND_DISABLED,new Insets(5,5,5,5),new Dimension(27,19),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ProgressBar[Disabled+Finished].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ProgressBarPainter",ProgressBarPainter.FOREGROUND_DISABLED_FINISHED,new Insets(5,5,5,5),new Dimension(27,19),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ProgressBar[Disabled+Indeterminate].progressPadding",new Integer(3));  d.put("ProgressBar[Disabled+Indeterminate].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ProgressBarPainter",ProgressBarPainter.FOREGROUND_DISABLED_INDETERMINATE,new Insets(5,5,5,5),new Dimension(30,13),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("Separator.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("Separator[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SeparatorPainter",SeparatorPainter.BACKGROUND_ENABLED,new Insets(0,40,0,40),new Dimension(100,3),true,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("ScrollBar.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("ScrollBar.opaque",Boolean.TRUE);  d.put("ScrollBar.incrementButtonGap",new Integer(-8));  d.put("ScrollBar.decrementButtonGap",new Integer(-8));  d.put("ScrollBar.thumbHeight",new Integer(15));  d.put("ScrollBar.minimumThumbSize",new DimensionUIResource(29,29));  d.put("ScrollBar.maximumThumbSize",new DimensionUIResource(1000,1000));  d.put("ScrollBar:\"ScrollBar.button\".contentMargins",new InsetsUIResource(0,0,0,0));  d.put("ScrollBar:\"ScrollBar.button\".size",new Integer(25));  d.put("ScrollBar:\"ScrollBar.button\"[Enabled].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ScrollBarButtonPainter",ScrollBarButtonPainter.FOREGROUND_ENABLED,new Insets(1,1,1,1),new Dimension(25,15),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("ScrollBar:\"ScrollBar.button\"[Disabled].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ScrollBarButtonPainter",ScrollBarButtonPainter.FOREGROUND_DISABLED,new Insets(1,1,1,1),new Dimension(25,15),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("ScrollBar:\"ScrollBar.button\"[MouseOver].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ScrollBarButtonPainter",ScrollBarButtonPainter.FOREGROUND_MOUSEOVER,new Insets(1,1,1,1),new Dimension(25,15),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("ScrollBar:\"ScrollBar.button\"[Pressed].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ScrollBarButtonPainter",ScrollBarButtonPainter.FOREGROUND_PRESSED,new Insets(1,1,1,1),new Dimension(25,15),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("ScrollBar:ScrollBarThumb.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("ScrollBar:ScrollBarThumb[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ScrollBarThumbPainter",ScrollBarThumbPainter.BACKGROUND_ENABLED,new Insets(0,15,0,15),new Dimension(38,15),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ScrollBar:ScrollBarThumb[MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ScrollBarThumbPainter",ScrollBarThumbPainter.BACKGROUND_MOUSEOVER,new Insets(0,15,0,15),new Dimension(38,15),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ScrollBar:ScrollBarThumb[Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ScrollBarThumbPainter",ScrollBarThumbPainter.BACKGROUND_PRESSED,new Insets(0,15,0,15),new Dimension(38,15),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ScrollBar:ScrollBarTrack.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("ScrollBar:ScrollBarTrack[Disabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ScrollBarTrackPainter",ScrollBarTrackPainter.BACKGROUND_DISABLED,new Insets(5,5,5,5),new Dimension(18,15),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("ScrollBar:ScrollBarTrack[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ScrollBarTrackPainter",ScrollBarTrackPainter.BACKGROUND_ENABLED,new Insets(5,10,5,9),new Dimension(34,15),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("ScrollPane.contentMargins",new InsetsUIResource(3,3,3,3));  d.put("ScrollPane.useChildTextComponentFocus",Boolean.TRUE);  d.put("ScrollPane[Enabled+Focused].borderPainter",new LazyPainter("javax.swing.plaf.nimbus.ScrollPanePainter",ScrollPanePainter.BORDER_ENABLED_FOCUSED,new Insets(5,5,5,5),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("ScrollPane[Enabled].borderPainter",new LazyPainter("javax.swing.plaf.nimbus.ScrollPanePainter",ScrollPanePainter.BORDER_ENABLED,new Insets(5,5,5,5),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("Viewport.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("Viewport.opaque",Boolean.TRUE);  d.put("Slider.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("Slider.States","Enabled,MouseOver,Pressed,Disabled,Focused,Selected,ArrowShape");  d.put("Slider.ArrowShape",new SliderArrowShapeState());  d.put("Slider.thumbWidth",new Integer(17));  d.put("Slider.thumbHeight",new Integer(17));  d.put("Slider.trackBorder",new Integer(0));  d.put("Slider.paintValue",Boolean.FALSE);  addColor(d,"Slider.tickColor",35,40,48,255);  d.put("Slider:SliderThumb.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("Slider:SliderThumb.States","Enabled,MouseOver,Pressed,Disabled,Focused,Selected,ArrowShape");  d.put("Slider:SliderThumb.ArrowShape",new SliderThumbArrowShapeState());  d.put("Slider:SliderThumb[Disabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SliderThumbPainter",SliderThumbPainter.BACKGROUND_DISABLED,new Insets(5,5,5,5),new Dimension(17,17),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Slider:SliderThumb[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SliderThumbPainter",SliderThumbPainter.BACKGROUND_ENABLED,new Insets(5,5,5,5),new Dimension(17,17),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Slider:SliderThumb[Focused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SliderThumbPainter",SliderThumbPainter.BACKGROUND_FOCUSED,new Insets(5,5,5,5),new Dimension(17,17),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Slider:SliderThumb[Focused+MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SliderThumbPainter",SliderThumbPainter.BACKGROUND_FOCUSED_MOUSEOVER,new Insets(5,5,5,5),new Dimension(17,17),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Slider:SliderThumb[Focused+Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SliderThumbPainter",SliderThumbPainter.BACKGROUND_FOCUSED_PRESSED,new Insets(5,5,5,5),new Dimension(17,17),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Slider:SliderThumb[MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SliderThumbPainter",SliderThumbPainter.BACKGROUND_MOUSEOVER,new Insets(5,5,5,5),new Dimension(17,17),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Slider:SliderThumb[Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SliderThumbPainter",SliderThumbPainter.BACKGROUND_PRESSED,new Insets(5,5,5,5),new Dimension(17,17),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Slider:SliderThumb[ArrowShape+Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SliderThumbPainter",SliderThumbPainter.BACKGROUND_ENABLED_ARROWSHAPE,new Insets(5,5,5,5),new Dimension(17,17),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Slider:SliderThumb[ArrowShape+Disabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SliderThumbPainter",SliderThumbPainter.BACKGROUND_DISABLED_ARROWSHAPE,new Insets(5,5,5,5),new Dimension(17,17),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Slider:SliderThumb[ArrowShape+MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SliderThumbPainter",SliderThumbPainter.BACKGROUND_MOUSEOVER_ARROWSHAPE,new Insets(5,5,5,5),new Dimension(17,17),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Slider:SliderThumb[ArrowShape+Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SliderThumbPainter",SliderThumbPainter.BACKGROUND_PRESSED_ARROWSHAPE,new Insets(5,5,5,5),new Dimension(17,17),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Slider:SliderThumb[ArrowShape+Focused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SliderThumbPainter",SliderThumbPainter.BACKGROUND_FOCUSED_ARROWSHAPE,new Insets(5,5,5,5),new Dimension(17,17),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Slider:SliderThumb[ArrowShape+Focused+MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SliderThumbPainter",SliderThumbPainter.BACKGROUND_FOCUSED_MOUSEOVER_ARROWSHAPE,new Insets(5,5,5,5),new Dimension(17,17),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Slider:SliderThumb[ArrowShape+Focused+Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SliderThumbPainter",SliderThumbPainter.BACKGROUND_FOCUSED_PRESSED_ARROWSHAPE,new Insets(5,5,5,5),new Dimension(17,17),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Slider:SliderTrack.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("Slider:SliderTrack.States","Enabled,MouseOver,Pressed,Disabled,Focused,Selected,ArrowShape");  d.put("Slider:SliderTrack.ArrowShape",new SliderTrackArrowShapeState());  d.put("Slider:SliderTrack[Disabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SliderTrackPainter",SliderTrackPainter.BACKGROUND_DISABLED,new Insets(6,5,6,5),new Dimension(23,17),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,2.0));  d.put("Slider:SliderTrack[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SliderTrackPainter",SliderTrackPainter.BACKGROUND_ENABLED,new Insets(6,5,6,5),new Dimension(23,17),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("Spinner:\"Spinner.editor\".contentMargins",new InsetsUIResource(0,0,0,0));  d.put("Spinner:Panel:\"Spinner.formattedTextField\".contentMargins",new InsetsUIResource(6,6,5,6));  addColor(d,"Spinner:Panel:\"Spinner.formattedTextField\"[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  d.put("Spinner:Panel:\"Spinner.formattedTextField\"[Disabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerPanelSpinnerFormattedTextFieldPainter",SpinnerPanelSpinnerFormattedTextFieldPainter.BACKGROUND_DISABLED,new Insets(5,3,3,1),new Dimension(64,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("Spinner:Panel:\"Spinner.formattedTextField\"[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerPanelSpinnerFormattedTextFieldPainter",SpinnerPanelSpinnerFormattedTextFieldPainter.BACKGROUND_ENABLED,new Insets(5,3,3,1),new Dimension(64,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("Spinner:Panel:\"Spinner.formattedTextField\"[Focused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerPanelSpinnerFormattedTextFieldPainter",SpinnerPanelSpinnerFormattedTextFieldPainter.BACKGROUND_FOCUSED,new Insets(5,3,3,1),new Dimension(64,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  addColor(d,"Spinner:Panel:\"Spinner.formattedTextField\"[Selected].textForeground","nimbusSelectedText",0.0f,0.0f,0.0f,0);  d.put("Spinner:Panel:\"Spinner.formattedTextField\"[Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerPanelSpinnerFormattedTextFieldPainter",SpinnerPanelSpinnerFormattedTextFieldPainter.BACKGROUND_SELECTED,new Insets(5,3,3,1),new Dimension(64,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  addColor(d,"Spinner:Panel:\"Spinner.formattedTextField\"[Focused+Selected].textForeground","nimbusSelectedText",0.0f,0.0f,0.0f,0);  d.put("Spinner:Panel:\"Spinner.formattedTextField\"[Focused+Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerPanelSpinnerFormattedTextFieldPainter",SpinnerPanelSpinnerFormattedTextFieldPainter.BACKGROUND_SELECTED_FOCUSED,new Insets(5,3,3,1),new Dimension(64,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("Spinner:\"Spinner.previousButton\".contentMargins",new InsetsUIResource(0,0,0,0));  d.put("Spinner:\"Spinner.previousButton\".size",new Integer(20));  d.put("Spinner:\"Spinner.previousButton\"[Disabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerPreviousButtonPainter",SpinnerPreviousButtonPainter.BACKGROUND_DISABLED,new Insets(0,1,6,7),new Dimension(20,12),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner:\"Spinner.previousButton\"[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerPreviousButtonPainter",SpinnerPreviousButtonPainter.BACKGROUND_ENABLED,new Insets(0,1,6,7),new Dimension(20,12),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner:\"Spinner.previousButton\"[Focused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerPreviousButtonPainter",SpinnerPreviousButtonPainter.BACKGROUND_FOCUSED,new Insets(0,1,6,7),new Dimension(20,12),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner:\"Spinner.previousButton\"[Focused+MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerPreviousButtonPainter",SpinnerPreviousButtonPainter.BACKGROUND_MOUSEOVER_FOCUSED,new Insets(3,1,6,7),new Dimension(20,12),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner:\"Spinner.previousButton\"[Focused+Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerPreviousButtonPainter",SpinnerPreviousButtonPainter.BACKGROUND_PRESSED_FOCUSED,new Insets(0,1,6,7),new Dimension(20,12),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner:\"Spinner.previousButton\"[MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerPreviousButtonPainter",SpinnerPreviousButtonPainter.BACKGROUND_MOUSEOVER,new Insets(0,1,6,7),new Dimension(20,12),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner:\"Spinner.previousButton\"[Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerPreviousButtonPainter",SpinnerPreviousButtonPainter.BACKGROUND_PRESSED,new Insets(0,1,6,7),new Dimension(20,12),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner:\"Spinner.previousButton\"[Disabled].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerPreviousButtonPainter",SpinnerPreviousButtonPainter.FOREGROUND_DISABLED,new Insets(3,6,5,9),new Dimension(20,12),true,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner:\"Spinner.previousButton\"[Enabled].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerPreviousButtonPainter",SpinnerPreviousButtonPainter.FOREGROUND_ENABLED,new Insets(3,6,5,9),new Dimension(20,12),true,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner:\"Spinner.previousButton\"[Focused].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerPreviousButtonPainter",SpinnerPreviousButtonPainter.FOREGROUND_FOCUSED,new Insets(3,6,5,9),new Dimension(20,12),true,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner:\"Spinner.previousButton\"[Focused+MouseOver].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerPreviousButtonPainter",SpinnerPreviousButtonPainter.FOREGROUND_MOUSEOVER_FOCUSED,new Insets(3,6,5,9),new Dimension(20,12),true,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner:\"Spinner.previousButton\"[Focused+Pressed].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerPreviousButtonPainter",SpinnerPreviousButtonPainter.FOREGROUND_PRESSED_FOCUSED,new Insets(3,6,5,9),new Dimension(20,12),true,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner:\"Spinner.previousButton\"[MouseOver].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerPreviousButtonPainter",SpinnerPreviousButtonPainter.FOREGROUND_MOUSEOVER,new Insets(3,6,5,9),new Dimension(20,12),true,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner:\"Spinner.previousButton\"[Pressed].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerPreviousButtonPainter",SpinnerPreviousButtonPainter.FOREGROUND_PRESSED,new Insets(3,6,5,9),new Dimension(20,12),true,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner:\"Spinner.nextButton\".contentMargins",new InsetsUIResource(0,0,0,0));  d.put("Spinner:\"Spinner.nextButton\".size",new Integer(20));  d.put("Spinner:\"Spinner.nextButton\"[Disabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerNextButtonPainter",SpinnerNextButtonPainter.BACKGROUND_DISABLED,new Insets(7,1,1,7),new Dimension(20,12),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner:\"Spinner.nextButton\"[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerNextButtonPainter",SpinnerNextButtonPainter.BACKGROUND_ENABLED,new Insets(7,1,1,7),new Dimension(20,12),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner:\"Spinner.nextButton\"[Focused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerNextButtonPainter",SpinnerNextButtonPainter.BACKGROUND_FOCUSED,new Insets(7,1,1,7),new Dimension(20,12),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner:\"Spinner.nextButton\"[Focused+MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerNextButtonPainter",SpinnerNextButtonPainter.BACKGROUND_MOUSEOVER_FOCUSED,new Insets(7,1,1,7),new Dimension(20,12),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner:\"Spinner.nextButton\"[Focused+Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerNextButtonPainter",SpinnerNextButtonPainter.BACKGROUND_PRESSED_FOCUSED,new Insets(7,1,1,7),new Dimension(20,12),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner:\"Spinner.nextButton\"[MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerNextButtonPainter",SpinnerNextButtonPainter.BACKGROUND_MOUSEOVER,new Insets(7,1,1,7),new Dimension(20,12),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner:\"Spinner.nextButton\"[Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerNextButtonPainter",SpinnerNextButtonPainter.BACKGROUND_PRESSED,new Insets(7,1,1,7),new Dimension(20,12),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner:\"Spinner.nextButton\"[Disabled].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerNextButtonPainter",SpinnerNextButtonPainter.FOREGROUND_DISABLED,new Insets(5,6,3,9),new Dimension(20,12),true,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner:\"Spinner.nextButton\"[Enabled].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerNextButtonPainter",SpinnerNextButtonPainter.FOREGROUND_ENABLED,new Insets(5,6,3,9),new Dimension(20,12),true,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner:\"Spinner.nextButton\"[Focused].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerNextButtonPainter",SpinnerNextButtonPainter.FOREGROUND_FOCUSED,new Insets(3,6,3,9),new Dimension(20,12),true,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner:\"Spinner.nextButton\"[Focused+MouseOver].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerNextButtonPainter",SpinnerNextButtonPainter.FOREGROUND_MOUSEOVER_FOCUSED,new Insets(3,6,3,9),new Dimension(20,12),true,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner:\"Spinner.nextButton\"[Focused+Pressed].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerNextButtonPainter",SpinnerNextButtonPainter.FOREGROUND_PRESSED_FOCUSED,new Insets(5,6,3,9),new Dimension(20,12),true,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner:\"Spinner.nextButton\"[MouseOver].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerNextButtonPainter",SpinnerNextButtonPainter.FOREGROUND_MOUSEOVER,new Insets(5,6,3,9),new Dimension(20,12),true,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Spinner:\"Spinner.nextButton\"[Pressed].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SpinnerNextButtonPainter",SpinnerNextButtonPainter.FOREGROUND_PRESSED,new Insets(5,6,3,9),new Dimension(20,12),true,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("SplitPane.contentMargins",new InsetsUIResource(1,1,1,1));  d.put("SplitPane.States","Enabled,MouseOver,Pressed,Disabled,Focused,Selected,Vertical");  d.put("SplitPane.Vertical",new SplitPaneVerticalState());  d.put("SplitPane.size",new Integer(10));  d.put("SplitPane.dividerSize",new Integer(10));  d.put("SplitPane.centerOneTouchButtons",Boolean.TRUE);  d.put("SplitPane.oneTouchButtonOffset",new Integer(30));  d.put("SplitPane.oneTouchExpandable",Boolean.FALSE);  d.put("SplitPane.continuousLayout",Boolean.TRUE);  d.put("SplitPane:SplitPaneDivider.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("SplitPane:SplitPaneDivider.States","Enabled,MouseOver,Pressed,Disabled,Focused,Selected,Vertical");  d.put("SplitPane:SplitPaneDivider.Vertical",new SplitPaneDividerVerticalState());  d.put("SplitPane:SplitPaneDivider[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SplitPaneDividerPainter",SplitPaneDividerPainter.BACKGROUND_ENABLED,new Insets(3,0,3,0),new Dimension(68,10),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("SplitPane:SplitPaneDivider[Focused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SplitPaneDividerPainter",SplitPaneDividerPainter.BACKGROUND_FOCUSED,new Insets(3,0,3,0),new Dimension(68,10),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("SplitPane:SplitPaneDivider[Enabled].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SplitPaneDividerPainter",SplitPaneDividerPainter.FOREGROUND_ENABLED,new Insets(0,24,0,24),new Dimension(68,10),true,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("SplitPane:SplitPaneDivider[Enabled+Vertical].foregroundPainter",new LazyPainter("javax.swing.plaf.nimbus.SplitPaneDividerPainter",SplitPaneDividerPainter.FOREGROUND_ENABLED_VERTICAL,new Insets(5,0,5,0),new Dimension(10,38),true,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("TabbedPane.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("TabbedPane.tabAreaStatesMatchSelectedTab",Boolean.TRUE);  d.put("TabbedPane.nudgeSelectedLabel",Boolean.FALSE);  d.put("TabbedPane.tabRunOverlay",new Integer(2));  d.put("TabbedPane.tabOverlap",new Integer(-1));  d.put("TabbedPane.extendTabsToBase",Boolean.TRUE);  d.put("TabbedPane.useBasicArrows",Boolean.TRUE);  addColor(d,"TabbedPane.shadow","nimbusDisabledText",0.0f,0.0f,0.0f,0);  addColor(d,"TabbedPane.darkShadow","text",0.0f,0.0f,0.0f,0);  addColor(d,"TabbedPane.highlight","nimbusLightBackground",0.0f,0.0f,0.0f,0);  d.put("TabbedPane:TabbedPaneTab.contentMargins",new InsetsUIResource(2,8,3,8));  d.put("TabbedPane:TabbedPaneTab[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TabbedPaneTabPainter",TabbedPaneTabPainter.BACKGROUND_ENABLED,new Insets(7,7,1,7),new Dimension(44,20),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("TabbedPane:TabbedPaneTab[Enabled+MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TabbedPaneTabPainter",TabbedPaneTabPainter.BACKGROUND_ENABLED_MOUSEOVER,new Insets(7,7,1,7),new Dimension(44,20),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("TabbedPane:TabbedPaneTab[Enabled+Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TabbedPaneTabPainter",TabbedPaneTabPainter.BACKGROUND_ENABLED_PRESSED,new Insets(7,6,1,7),new Dimension(44,20),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  addColor(d,"TabbedPane:TabbedPaneTab[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  d.put("TabbedPane:TabbedPaneTab[Disabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TabbedPaneTabPainter",TabbedPaneTabPainter.BACKGROUND_DISABLED,new Insets(6,7,1,7),new Dimension(44,20),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("TabbedPane:TabbedPaneTab[Disabled+Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TabbedPaneTabPainter",TabbedPaneTabPainter.BACKGROUND_SELECTED_DISABLED,new Insets(7,7,0,7),new Dimension(44,20),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("TabbedPane:TabbedPaneTab[Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TabbedPaneTabPainter",TabbedPaneTabPainter.BACKGROUND_SELECTED,new Insets(7,7,0,7),new Dimension(44,20),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("TabbedPane:TabbedPaneTab[MouseOver+Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TabbedPaneTabPainter",TabbedPaneTabPainter.BACKGROUND_SELECTED_MOUSEOVER,new Insets(7,9,0,9),new Dimension(44,20),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  addColor(d,"TabbedPane:TabbedPaneTab[Pressed+Selected].textForeground",255,255,255,255);  d.put("TabbedPane:TabbedPaneTab[Pressed+Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TabbedPaneTabPainter",TabbedPaneTabPainter.BACKGROUND_SELECTED_PRESSED,new Insets(7,9,0,9),new Dimension(44,20),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("TabbedPane:TabbedPaneTab[Focused+Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TabbedPaneTabPainter",TabbedPaneTabPainter.BACKGROUND_SELECTED_FOCUSED,new Insets(7,7,3,7),new Dimension(44,20),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("TabbedPane:TabbedPaneTab[Focused+MouseOver+Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TabbedPaneTabPainter",TabbedPaneTabPainter.BACKGROUND_SELECTED_MOUSEOVER_FOCUSED,new Insets(7,9,3,9),new Dimension(44,20),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  addColor(d,"TabbedPane:TabbedPaneTab[Focused+Pressed+Selected].textForeground",255,255,255,255);  d.put("TabbedPane:TabbedPaneTab[Focused+Pressed+Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TabbedPaneTabPainter",TabbedPaneTabPainter.BACKGROUND_SELECTED_PRESSED_FOCUSED,new Insets(7,9,3,9),new Dimension(44,20),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("TabbedPane:TabbedPaneTabArea.contentMargins",new InsetsUIResource(3,10,4,10));  d.put("TabbedPane:TabbedPaneTabArea[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TabbedPaneTabAreaPainter",TabbedPaneTabAreaPainter.BACKGROUND_ENABLED,new Insets(0,5,6,5),new Dimension(5,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("TabbedPane:TabbedPaneTabArea[Disabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TabbedPaneTabAreaPainter",TabbedPaneTabAreaPainter.BACKGROUND_DISABLED,new Insets(0,5,6,5),new Dimension(5,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("TabbedPane:TabbedPaneTabArea[Enabled+MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TabbedPaneTabAreaPainter",TabbedPaneTabAreaPainter.BACKGROUND_ENABLED_MOUSEOVER,new Insets(0,5,6,5),new Dimension(5,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("TabbedPane:TabbedPaneTabArea[Enabled+Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TabbedPaneTabAreaPainter",TabbedPaneTabAreaPainter.BACKGROUND_ENABLED_PRESSED,new Insets(0,5,6,5),new Dimension(5,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("TabbedPane:TabbedPaneContent.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("Table.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("Table.opaque",Boolean.TRUE);  addColor(d,"Table.textForeground",35,35,36,255);  addColor(d,"Table.background","nimbusLightBackground",0.0f,0.0f,0.0f,0);  d.put("Table.showGrid",Boolean.FALSE);  d.put("Table.intercellSpacing",new DimensionUIResource(0,0));  addColor(d,"Table.alternateRowColor","nimbusLightBackground",0.0f,0.0f,-0.05098039f,0,false);  d.put("Table.rendererUseTableColors",Boolean.TRUE);  d.put("Table.rendererUseUIBorder",Boolean.TRUE);  d.put("Table.cellNoFocusBorder",new BorderUIResource(BorderFactory.createEmptyBorder(2,5,2,5)));  d.put("Table.focusCellHighlightBorder",new BorderUIResource(new PainterBorder("Tree:TreeCell[Enabled+Focused].backgroundPainter",new Insets(2,5,2,5))));  addColor(d,"Table.dropLineColor","nimbusFocus",0.0f,0.0f,0.0f,0);  addColor(d,"Table.dropLineShortColor","nimbusOrange",0.0f,0.0f,0.0f,0);  addColor(d,"Table[Enabled+Selected].textForeground","nimbusLightBackground",0.0f,0.0f,0.0f,0,false);  addColor(d,"Table[Enabled+Selected].textBackground","nimbusSelectionBackground",0.0f,0.0f,0.0f,0,false);  addColor(d,"Table[Disabled+Selected].textBackground","nimbusSelectionBackground",0.0f,0.0f,0.0f,0,false);  d.put("Table:\"Table.cellRenderer\".contentMargins",new InsetsUIResource(0,0,0,0));  d.put("Table:\"Table.cellRenderer\".opaque",Boolean.TRUE);  addColor(d,"Table:\"Table.cellRenderer\".background","nimbusLightBackground",0.0f,0.0f,0.0f,0,false);  d.put("TableHeader.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("TableHeader.opaque",Boolean.TRUE);  d.put("TableHeader.rightAlignSortArrow",Boolean.TRUE);  d.put("TableHeader[Enabled].ascendingSortIconPainter",new LazyPainter("javax.swing.plaf.nimbus.TableHeaderPainter",TableHeaderPainter.ASCENDINGSORTICON_ENABLED,new Insets(0,0,0,2),new Dimension(7,7),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Table.ascendingSortIcon",new NimbusIcon("TableHeader","ascendingSortIconPainter",7,7));  d.put("TableHeader[Enabled].descendingSortIconPainter",new LazyPainter("javax.swing.plaf.nimbus.TableHeaderPainter",TableHeaderPainter.DESCENDINGSORTICON_ENABLED,new Insets(0,0,0,0),new Dimension(7,7),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Table.descendingSortIcon",new NimbusIcon("TableHeader","descendingSortIconPainter",7,7));  d.put("TableHeader:\"TableHeader.renderer\".contentMargins",new InsetsUIResource(2,5,4,5));  d.put("TableHeader:\"TableHeader.renderer\".opaque",Boolean.TRUE);  d.put("TableHeader:\"TableHeader.renderer\".States","Enabled,MouseOver,Pressed,Disabled,Focused,Selected,Sorted");  d.put("TableHeader:\"TableHeader.renderer\".Sorted",new TableHeaderRendererSortedState());  d.put("TableHeader:\"TableHeader.renderer\"[Disabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TableHeaderRendererPainter",TableHeaderRendererPainter.BACKGROUND_DISABLED,new Insets(5,5,5,5),new Dimension(22,20),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("TableHeader:\"TableHeader.renderer\"[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TableHeaderRendererPainter",TableHeaderRendererPainter.BACKGROUND_ENABLED,new Insets(5,5,5,5),new Dimension(22,20),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("TableHeader:\"TableHeader.renderer\"[Enabled+Focused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TableHeaderRendererPainter",TableHeaderRendererPainter.BACKGROUND_ENABLED_FOCUSED,new Insets(5,5,5,5),new Dimension(22,20),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("TableHeader:\"TableHeader.renderer\"[MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TableHeaderRendererPainter",TableHeaderRendererPainter.BACKGROUND_MOUSEOVER,new Insets(5,5,5,5),new Dimension(22,20),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("TableHeader:\"TableHeader.renderer\"[Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TableHeaderRendererPainter",TableHeaderRendererPainter.BACKGROUND_PRESSED,new Insets(5,5,5,5),new Dimension(22,20),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("TableHeader:\"TableHeader.renderer\"[Enabled+Sorted].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TableHeaderRendererPainter",TableHeaderRendererPainter.BACKGROUND_ENABLED_SORTED,new Insets(5,5,5,5),new Dimension(22,20),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("TableHeader:\"TableHeader.renderer\"[Enabled+Focused+Sorted].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TableHeaderRendererPainter",TableHeaderRendererPainter.BACKGROUND_ENABLED_FOCUSED_SORTED,new Insets(5,5,5,5),new Dimension(22,20),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("TableHeader:\"TableHeader.renderer\"[Disabled+Sorted].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TableHeaderRendererPainter",TableHeaderRendererPainter.BACKGROUND_DISABLED_SORTED,new Insets(5,5,5,5),new Dimension(22,20),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("\"Table.editor\".contentMargins",new InsetsUIResource(3,5,3,5));  d.put("\"Table.editor\".opaque",Boolean.TRUE);  addColor(d,"\"Table.editor\".background","nimbusLightBackground",0.0f,0.0f,0.0f,0);  addColor(d,"\"Table.editor\"[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  d.put("\"Table.editor\"[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TableEditorPainter",TableEditorPainter.BACKGROUND_ENABLED,new Insets(5,5,5,5),new Dimension(100,30),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("\"Table.editor\"[Enabled+Focused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TableEditorPainter",TableEditorPainter.BACKGROUND_ENABLED_FOCUSED,new Insets(5,5,5,5),new Dimension(100,30),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  addColor(d,"\"Table.editor\"[Selected].textForeground","nimbusSelectedText",0.0f,0.0f,0.0f,0);  d.put("\"Tree.cellEditor\".contentMargins",new InsetsUIResource(2,5,2,5));  d.put("\"Tree.cellEditor\".opaque",Boolean.TRUE);  addColor(d,"\"Tree.cellEditor\".background","nimbusLightBackground",0.0f,0.0f,0.0f,0);  addColor(d,"\"Tree.cellEditor\"[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  d.put("\"Tree.cellEditor\"[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TreeCellEditorPainter",TreeCellEditorPainter.BACKGROUND_ENABLED,new Insets(5,5,5,5),new Dimension(100,30),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("\"Tree.cellEditor\"[Enabled+Focused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TreeCellEditorPainter",TreeCellEditorPainter.BACKGROUND_ENABLED_FOCUSED,new Insets(5,5,5,5),new Dimension(100,30),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  addColor(d,"\"Tree.cellEditor\"[Selected].textForeground","nimbusSelectedText",0.0f,0.0f,0.0f,0);  d.put("TextField.contentMargins",new InsetsUIResource(6,6,6,6));  addColor(d,"TextField.background","nimbusLightBackground",0.0f,0.0f,0.0f,0);  addColor(d,"TextField[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  d.put("TextField[Disabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TextFieldPainter",TextFieldPainter.BACKGROUND_DISABLED,new Insets(5,5,5,5),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("TextField[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TextFieldPainter",TextFieldPainter.BACKGROUND_ENABLED,new Insets(5,5,5,5),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  addColor(d,"TextField[Selected].textForeground","nimbusSelectedText",0.0f,0.0f,0.0f,0);  d.put("TextField[Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TextFieldPainter",TextFieldPainter.BACKGROUND_SELECTED,new Insets(5,5,5,5),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  addColor(d,"TextField[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  d.put("TextField[Disabled].borderPainter",new LazyPainter("javax.swing.plaf.nimbus.TextFieldPainter",TextFieldPainter.BORDER_DISABLED,new Insets(5,3,3,3),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("TextField[Focused].borderPainter",new LazyPainter("javax.swing.plaf.nimbus.TextFieldPainter",TextFieldPainter.BORDER_FOCUSED,new Insets(5,5,5,5),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("TextField[Enabled].borderPainter",new LazyPainter("javax.swing.plaf.nimbus.TextFieldPainter",TextFieldPainter.BORDER_ENABLED,new Insets(5,5,5,5),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("FormattedTextField.contentMargins",new InsetsUIResource(6,6,6,6));  addColor(d,"FormattedTextField[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  d.put("FormattedTextField[Disabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.FormattedTextFieldPainter",FormattedTextFieldPainter.BACKGROUND_DISABLED,new Insets(5,5,5,5),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("FormattedTextField[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.FormattedTextFieldPainter",FormattedTextFieldPainter.BACKGROUND_ENABLED,new Insets(5,5,5,5),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  addColor(d,"FormattedTextField[Selected].textForeground","nimbusSelectedText",0.0f,0.0f,0.0f,0);  d.put("FormattedTextField[Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.FormattedTextFieldPainter",FormattedTextFieldPainter.BACKGROUND_SELECTED,new Insets(5,5,5,5),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  addColor(d,"FormattedTextField[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  d.put("FormattedTextField[Disabled].borderPainter",new LazyPainter("javax.swing.plaf.nimbus.FormattedTextFieldPainter",FormattedTextFieldPainter.BORDER_DISABLED,new Insets(5,3,3,3),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("FormattedTextField[Focused].borderPainter",new LazyPainter("javax.swing.plaf.nimbus.FormattedTextFieldPainter",FormattedTextFieldPainter.BORDER_FOCUSED,new Insets(5,5,5,5),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("FormattedTextField[Enabled].borderPainter",new LazyPainter("javax.swing.plaf.nimbus.FormattedTextFieldPainter",FormattedTextFieldPainter.BORDER_ENABLED,new Insets(5,5,5,5),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("PasswordField.contentMargins",new InsetsUIResource(6,6,6,6));  addColor(d,"PasswordField[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  d.put("PasswordField[Disabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.PasswordFieldPainter",PasswordFieldPainter.BACKGROUND_DISABLED,new Insets(5,5,5,5),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("PasswordField[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.PasswordFieldPainter",PasswordFieldPainter.BACKGROUND_ENABLED,new Insets(5,5,5,5),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  addColor(d,"PasswordField[Selected].textForeground","nimbusSelectedText",0.0f,0.0f,0.0f,0);  d.put("PasswordField[Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.PasswordFieldPainter",PasswordFieldPainter.BACKGROUND_SELECTED,new Insets(5,5,5,5),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  addColor(d,"PasswordField[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  d.put("PasswordField[Disabled].borderPainter",new LazyPainter("javax.swing.plaf.nimbus.PasswordFieldPainter",PasswordFieldPainter.BORDER_DISABLED,new Insets(5,3,3,3),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("PasswordField[Focused].borderPainter",new LazyPainter("javax.swing.plaf.nimbus.PasswordFieldPainter",PasswordFieldPainter.BORDER_FOCUSED,new Insets(5,5,5,5),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("PasswordField[Enabled].borderPainter",new LazyPainter("javax.swing.plaf.nimbus.PasswordFieldPainter",PasswordFieldPainter.BORDER_ENABLED,new Insets(5,5,5,5),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("TextArea.contentMargins",new InsetsUIResource(6,6,6,6));  d.put("TextArea.States","Enabled,MouseOver,Pressed,Selected,Disabled,Focused,NotInScrollPane");  d.put("TextArea.NotInScrollPane",new TextAreaNotInScrollPaneState());  addColor(d,"TextArea[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  d.put("TextArea[Disabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TextAreaPainter",TextAreaPainter.BACKGROUND_DISABLED,new Insets(5,5,5,5),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  d.put("TextArea[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TextAreaPainter",TextAreaPainter.BACKGROUND_ENABLED,new Insets(5,5,5,5),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  addColor(d,"TextArea[Disabled+NotInScrollPane].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  d.put("TextArea[Disabled+NotInScrollPane].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TextAreaPainter",TextAreaPainter.BACKGROUND_DISABLED_NOTINSCROLLPANE,new Insets(5,5,5,5),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  d.put("TextArea[Enabled+NotInScrollPane].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TextAreaPainter",TextAreaPainter.BACKGROUND_ENABLED_NOTINSCROLLPANE,new Insets(5,5,5,5),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  addColor(d,"TextArea[Selected].textForeground","nimbusSelectedText",0.0f,0.0f,0.0f,0);  d.put("TextArea[Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TextAreaPainter",TextAreaPainter.BACKGROUND_SELECTED,new Insets(5,5,5,5),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  addColor(d,"TextArea[Disabled+NotInScrollPane].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  d.put("TextArea[Disabled+NotInScrollPane].borderPainter",new LazyPainter("javax.swing.plaf.nimbus.TextAreaPainter",TextAreaPainter.BORDER_DISABLED_NOTINSCROLLPANE,new Insets(5,3,3,3),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("TextArea[Focused+NotInScrollPane].borderPainter",new LazyPainter("javax.swing.plaf.nimbus.TextAreaPainter",TextAreaPainter.BORDER_FOCUSED_NOTINSCROLLPANE,new Insets(5,5,5,5),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("TextArea[Enabled+NotInScrollPane].borderPainter",new LazyPainter("javax.swing.plaf.nimbus.TextAreaPainter",TextAreaPainter.BORDER_ENABLED_NOTINSCROLLPANE,new Insets(5,5,5,5),new Dimension(122,24),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY));  d.put("TextPane.contentMargins",new InsetsUIResource(4,6,4,6));  d.put("TextPane.opaque",Boolean.TRUE);  addColor(d,"TextPane[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  d.put("TextPane[Disabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TextPanePainter",TextPanePainter.BACKGROUND_DISABLED,new Insets(5,5,5,5),new Dimension(100,30),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  d.put("TextPane[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TextPanePainter",TextPanePainter.BACKGROUND_ENABLED,new Insets(5,5,5,5),new Dimension(100,30),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  addColor(d,"TextPane[Selected].textForeground","nimbusSelectedText",0.0f,0.0f,0.0f,0);  d.put("TextPane[Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TextPanePainter",TextPanePainter.BACKGROUND_SELECTED,new Insets(5,5,5,5),new Dimension(100,30),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  d.put("EditorPane.contentMargins",new InsetsUIResource(4,6,4,6));  d.put("EditorPane.opaque",Boolean.TRUE);  addColor(d,"EditorPane[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  d.put("EditorPane[Disabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.EditorPanePainter",EditorPanePainter.BACKGROUND_DISABLED,new Insets(5,5,5,5),new Dimension(100,30),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  d.put("EditorPane[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.EditorPanePainter",EditorPanePainter.BACKGROUND_ENABLED,new Insets(5,5,5,5),new Dimension(100,30),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  addColor(d,"EditorPane[Selected].textForeground","nimbusSelectedText",0.0f,0.0f,0.0f,0);  d.put("EditorPane[Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.EditorPanePainter",EditorPanePainter.BACKGROUND_SELECTED,new Insets(5,5,5,5),new Dimension(100,30),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  d.put("ToolBar.contentMargins",new InsetsUIResource(2,2,2,2));  d.put("ToolBar.opaque",Boolean.TRUE);  d.put("ToolBar.States","North,East,West,South");  d.put("ToolBar.North",new ToolBarNorthState());  d.put("ToolBar.East",new ToolBarEastState());  d.put("ToolBar.West",new ToolBarWestState());  d.put("ToolBar.South",new ToolBarSouthState());  d.put("ToolBar[North].borderPainter",new LazyPainter("javax.swing.plaf.nimbus.ToolBarPainter",ToolBarPainter.BORDER_NORTH,new Insets(0,0,1,0),new Dimension(30,30),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  d.put("ToolBar[South].borderPainter",new LazyPainter("javax.swing.plaf.nimbus.ToolBarPainter",ToolBarPainter.BORDER_SOUTH,new Insets(1,0,0,0),new Dimension(30,30),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  d.put("ToolBar[East].borderPainter",new LazyPainter("javax.swing.plaf.nimbus.ToolBarPainter",ToolBarPainter.BORDER_EAST,new Insets(1,0,0,0),new Dimension(30,30),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  d.put("ToolBar[West].borderPainter",new LazyPainter("javax.swing.plaf.nimbus.ToolBarPainter",ToolBarPainter.BORDER_WEST,new Insets(0,0,1,0),new Dimension(30,30),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  d.put("ToolBar[Enabled].handleIconPainter",new LazyPainter("javax.swing.plaf.nimbus.ToolBarPainter",ToolBarPainter.HANDLEICON_ENABLED,new Insets(5,5,5,5),new Dimension(11,38),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,2.0,Double.POSITIVE_INFINITY));  d.put("ToolBar.handleIcon",new NimbusIcon("ToolBar","handleIconPainter",11,38));  d.put("ToolBar:Button.contentMargins",new InsetsUIResource(4,4,4,4));  d.put("ToolBar:Button[Focused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToolBarButtonPainter",ToolBarButtonPainter.BACKGROUND_FOCUSED,new Insets(5,5,5,5),new Dimension(104,33),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,2.0,Double.POSITIVE_INFINITY));  d.put("ToolBar:Button[MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToolBarButtonPainter",ToolBarButtonPainter.BACKGROUND_MOUSEOVER,new Insets(5,5,5,5),new Dimension(104,33),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,2.0,Double.POSITIVE_INFINITY));  d.put("ToolBar:Button[Focused+MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToolBarButtonPainter",ToolBarButtonPainter.BACKGROUND_MOUSEOVER_FOCUSED,new Insets(5,5,5,5),new Dimension(104,33),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,2.0,Double.POSITIVE_INFINITY));  d.put("ToolBar:Button[Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToolBarButtonPainter",ToolBarButtonPainter.BACKGROUND_PRESSED,new Insets(5,5,5,5),new Dimension(104,33),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,2.0,Double.POSITIVE_INFINITY));  d.put("ToolBar:Button[Focused+Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToolBarButtonPainter",ToolBarButtonPainter.BACKGROUND_PRESSED_FOCUSED,new Insets(5,5,5,5),new Dimension(104,33),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,2.0,Double.POSITIVE_INFINITY));  d.put("ToolBar:ToggleButton.contentMargins",new InsetsUIResource(4,4,4,4));  d.put("ToolBar:ToggleButton[Focused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToolBarToggleButtonPainter",ToolBarToggleButtonPainter.BACKGROUND_FOCUSED,new Insets(5,5,5,5),new Dimension(104,34),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,2.0,Double.POSITIVE_INFINITY));  d.put("ToolBar:ToggleButton[MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToolBarToggleButtonPainter",ToolBarToggleButtonPainter.BACKGROUND_MOUSEOVER,new Insets(5,5,5,5),new Dimension(104,34),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,2.0,Double.POSITIVE_INFINITY));  d.put("ToolBar:ToggleButton[Focused+MouseOver].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToolBarToggleButtonPainter",ToolBarToggleButtonPainter.BACKGROUND_MOUSEOVER_FOCUSED,new Insets(5,5,5,5),new Dimension(104,34),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,2.0,Double.POSITIVE_INFINITY));  d.put("ToolBar:ToggleButton[Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToolBarToggleButtonPainter",ToolBarToggleButtonPainter.BACKGROUND_PRESSED,new Insets(5,5,5,5),new Dimension(72,25),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,2.0,Double.POSITIVE_INFINITY));  d.put("ToolBar:ToggleButton[Focused+Pressed].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToolBarToggleButtonPainter",ToolBarToggleButtonPainter.BACKGROUND_PRESSED_FOCUSED,new Insets(5,5,5,5),new Dimension(72,25),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,2.0,Double.POSITIVE_INFINITY));  d.put("ToolBar:ToggleButton[Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToolBarToggleButtonPainter",ToolBarToggleButtonPainter.BACKGROUND_SELECTED,new Insets(5,5,5,5),new Dimension(72,25),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,2.0,Double.POSITIVE_INFINITY));  d.put("ToolBar:ToggleButton[Focused+Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToolBarToggleButtonPainter",ToolBarToggleButtonPainter.BACKGROUND_SELECTED_FOCUSED,new Insets(5,5,5,5),new Dimension(72,25),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,2.0,Double.POSITIVE_INFINITY));  d.put("ToolBar:ToggleButton[Pressed+Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToolBarToggleButtonPainter",ToolBarToggleButtonPainter.BACKGROUND_PRESSED_SELECTED,new Insets(5,5,5,5),new Dimension(72,25),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,2.0,Double.POSITIVE_INFINITY));  d.put("ToolBar:ToggleButton[Focused+Pressed+Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToolBarToggleButtonPainter",ToolBarToggleButtonPainter.BACKGROUND_PRESSED_SELECTED_FOCUSED,new Insets(5,5,5,5),new Dimension(72,25),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,2.0,Double.POSITIVE_INFINITY));  d.put("ToolBar:ToggleButton[MouseOver+Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToolBarToggleButtonPainter",ToolBarToggleButtonPainter.BACKGROUND_MOUSEOVER_SELECTED,new Insets(5,5,5,5),new Dimension(72,25),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,2.0,Double.POSITIVE_INFINITY));  d.put("ToolBar:ToggleButton[Focused+MouseOver+Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToolBarToggleButtonPainter",ToolBarToggleButtonPainter.BACKGROUND_MOUSEOVER_SELECTED_FOCUSED,new Insets(5,5,5,5),new Dimension(72,25),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,2.0,Double.POSITIVE_INFINITY));  addColor(d,"ToolBar:ToggleButton[Disabled+Selected].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  d.put("ToolBar:ToggleButton[Disabled+Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToolBarToggleButtonPainter",ToolBarToggleButtonPainter.BACKGROUND_DISABLED_SELECTED,new Insets(5,5,5,5),new Dimension(72,25),false,AbstractRegionPainter.PaintContext.CacheMode.NINE_SQUARE_SCALE,2.0,Double.POSITIVE_INFINITY));  d.put("ToolBarSeparator.contentMargins",new InsetsUIResource(2,0,3,0));  addColor(d,"ToolBarSeparator.textForeground","nimbusBorder",0.0f,0.0f,0.0f,0);  d.put("ToolTip.contentMargins",new InsetsUIResource(4,4,4,4));  d.put("ToolTip[Enabled].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.ToolTipPainter",ToolTipPainter.BACKGROUND_ENABLED,new Insets(1,1,1,1),new Dimension(10,10),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  d.put("Tree.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("Tree.opaque",Boolean.TRUE);  addColor(d,"Tree.textForeground","text",0.0f,0.0f,0.0f,0,false);  addColor(d,"Tree.textBackground","nimbusLightBackground",0.0f,0.0f,0.0f,0,false);  addColor(d,"Tree.background","nimbusLightBackground",0.0f,0.0f,0.0f,0);  d.put("Tree.rendererFillBackground",Boolean.FALSE);  d.put("Tree.leftChildIndent",new Integer(12));  d.put("Tree.rightChildIndent",new Integer(4));  d.put("Tree.drawHorizontalLines",Boolean.FALSE);  d.put("Tree.drawVerticalLines",Boolean.FALSE);  d.put("Tree.showRootHandles",Boolean.FALSE);  d.put("Tree.rendererUseTreeColors",Boolean.TRUE);  d.put("Tree.repaintWholeRow",Boolean.TRUE);  d.put("Tree.rowHeight",new Integer(0));  d.put("Tree.rendererMargins",new InsetsUIResource(2,0,1,5));  addColor(d,"Tree.selectionForeground","nimbusSelectedText",0.0f,0.0f,0.0f,0,false);  addColor(d,"Tree.selectionBackground","nimbusSelectionBackground",0.0f,0.0f,0.0f,0,false);  addColor(d,"Tree.dropLineColor","nimbusFocus",0.0f,0.0f,0.0f,0);  d.put("Tree:TreeCell.contentMargins",new InsetsUIResource(0,0,0,0));  addColor(d,"Tree:TreeCell[Enabled].background","nimbusLightBackground",0.0f,0.0f,0.0f,0);  addColor(d,"Tree:TreeCell[Enabled+Focused].background","nimbusLightBackground",0.0f,0.0f,0.0f,0);  d.put("Tree:TreeCell[Enabled+Focused].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TreeCellPainter",TreeCellPainter.BACKGROUND_ENABLED_FOCUSED,new Insets(5,5,5,5),new Dimension(100,30),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  addColor(d,"Tree:TreeCell[Enabled+Selected].textForeground",255,255,255,255);  d.put("Tree:TreeCell[Enabled+Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TreeCellPainter",TreeCellPainter.BACKGROUND_ENABLED_SELECTED,new Insets(5,5,5,5),new Dimension(100,30),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  addColor(d,"Tree:TreeCell[Focused+Selected].textForeground",255,255,255,255);  d.put("Tree:TreeCell[Focused+Selected].backgroundPainter",new LazyPainter("javax.swing.plaf.nimbus.TreeCellPainter",TreeCellPainter.BACKGROUND_SELECTED_FOCUSED,new Insets(5,5,5,5),new Dimension(100,30),false,AbstractRegionPainter.PaintContext.CacheMode.NO_CACHING,1.0,1.0));  d.put("Tree:\"Tree.cellRenderer\".contentMargins",new InsetsUIResource(0,0,0,0));  addColor(d,"Tree:\"Tree.cellRenderer\"[Disabled].textForeground","nimbusDisabledText",0.0f,0.0f,0.0f,0);  d.put("Tree[Enabled].leafIconPainter",new LazyPainter("javax.swing.plaf.nimbus.TreePainter",TreePainter.LEAFICON_ENABLED,new Insets(5,5,5,5),new Dimension(16,16),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Tree.leafIcon",new NimbusIcon("Tree","leafIconPainter",16,16));  d.put("Tree[Enabled].closedIconPainter",new LazyPainter("javax.swing.plaf.nimbus.TreePainter",TreePainter.CLOSEDICON_ENABLED,new Insets(5,5,5,5),new Dimension(16,16),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Tree.closedIcon",new NimbusIcon("Tree","closedIconPainter",16,16));  d.put("Tree[Enabled].openIconPainter",new LazyPainter("javax.swing.plaf.nimbus.TreePainter",TreePainter.OPENICON_ENABLED,new Insets(5,5,5,5),new Dimension(16,16),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Tree.openIcon",new NimbusIcon("Tree","openIconPainter",16,16));  d.put("Tree[Enabled].collapsedIconPainter",new LazyPainter("javax.swing.plaf.nimbus.TreePainter",TreePainter.COLLAPSEDICON_ENABLED,new Insets(5,5,5,5),new Dimension(18,7),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Tree[Enabled+Selected].collapsedIconPainter",new LazyPainter("javax.swing.plaf.nimbus.TreePainter",TreePainter.COLLAPSEDICON_ENABLED_SELECTED,new Insets(5,5,5,5),new Dimension(18,7),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Tree.collapsedIcon",new NimbusIcon("Tree","collapsedIconPainter",18,7));  d.put("Tree[Enabled].expandedIconPainter",new LazyPainter("javax.swing.plaf.nimbus.TreePainter",TreePainter.EXPANDEDICON_ENABLED,new Insets(5,5,5,5),new Dimension(18,7),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Tree[Enabled+Selected].expandedIconPainter",new LazyPainter("javax.swing.plaf.nimbus.TreePainter",TreePainter.EXPANDEDICON_ENABLED_SELECTED,new Insets(5,5,5,5),new Dimension(18,7),false,AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES,1.0,1.0));  d.put("Tree.expandedIcon",new NimbusIcon("Tree","expandedIconPainter",18,7));  d.put("RootPane.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("RootPane.opaque",Boolean.TRUE);  addColor(d,"RootPane.background","control",0.0f,0.0f,0.0f,0);}  }
class C{  @Override protected void onResume(){  super.onResume();  if (mWZBroadcast != null) {    mPermissionsGranted=true;    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {      mPermissionsGranted=(mRequiredPermissions.length > 0 ? WowzaGoCoder.hasPermissions(this,mRequiredPermissions) : true);      if (!mPermissionsGranted)       ActivityCompat.requestPermissions(this,mRequiredPermissions,PERMISSIONS_REQUEST_CODE);    }    if (mPermissionsGranted) {      ConfigPrefs.updateConfigFromPrefs(PreferenceManager.getDefaultSharedPreferences(this),mWZBroadcastConfig);    }  }}  }
class C{  @Override public long dynamicQueryCount(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){  return _fooLocalService.dynamicQueryCount(dynamicQuery);}  }
class C{  public void testAbsNegative(){  byte aBytes[]={1,2,3,4,5,6,7};  int aSign=-1;  byte rBytes[]={1,2,3,4,5,6,7};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.abs();  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void save() throws SSOException, SMSException {  if (readOnly) {    if (debug.warningEnabled()) {      debug.warning("SMSEntry: Attempted to save an entry that " + "is marked as read-only: " + dn);    }    throw (new SMSException(SMSException.STATUS_NO_PERMISSION,"sms-INSUFFICIENT_ACCESS_RIGHTS"));  }  save(ssoToken);}  }
class C{  public static String removeExtension(String fileName){  final String separator=System.getProperty("file.separator");  String filename;  final int lastSeparatorIndex=fileName.lastIndexOf(separator);  if (lastSeparatorIndex == -1) {    filename=fileName;  } else {    filename=fileName.substring(lastSeparatorIndex + 1);  }  final int extensionIndex=filename.lastIndexOf(".");  if (extensionIndex == -1) {    return filename;  }  fileName=fileName.substring(0,lastSeparatorIndex);  return fileName + File.separator + filename.substring(0,extensionIndex);}  }
class C{  public void putNextEntry(ZipEntry e) throws IOException {  ensureOpen();  if (current != null) {    closeEntry();  }  if (e.xdostime == -1) {    e.setTime(System.currentTimeMillis());  }  if (e.method == -1) {    e.method=method;  }  e.flag=0;switch (e.method) {case DEFLATED:    if (e.size == -1 || e.csize == -1 || e.crc == -1)     e.flag=8;  break;case STORED:if (e.size == -1) {  e.size=e.csize;} else if (e.csize == -1) {  e.csize=e.size;} else if (e.size != e.csize) {  throw new ZipException("STORED entry where compressed != uncompressed size");}if (e.size == -1 || e.crc == -1) {throw new ZipException("STORED entry missing size, compressed size, or crc-32");}break;default :throw new ZipException("unsupported compression method");}if (!names.add(e.name)) {throw new ZipException("duplicate entry: " + e.name);}if (zc.isUTF8()) e.flag|=EFS;current=new XEntry(e,written);xentries.add(current);writeLOC(current);}  }
class C{  public static void replaceEditText(EditText view,String newText){  int start=Math.min(view.getSelectionStart(),view.getSelectionEnd());  int end=Math.max(view.getSelectionStart(),view.getSelectionEnd());  int diff=end - start;  String strContents=view.getText().toString();  StringBuilder sb=new StringBuilder(strContents.length() + newText.length() - diff);  sb.append(strContents.substring(0,start));  sb.append(newText);  sb.append(strContents.substring(end,strContents.length()));  view.setText(sb.toString());}  }
class C{  @Override public void end(String namespace,String name) throws Exception {  digester.pop();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.ScopingElement createScopingElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.ScopingElementImpl();}  }
class C{  public com.sun.identity.saml2.jaxb.entityconfig.XACMLPDPConfigElement createXACMLPDPConfigElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.entityconfig.impl.XACMLPDPConfigElementImpl();}  }
class C{  @Override public int read() throws IOException {  if (closed) {    throw new FileItemStream.ItemSkippedException();  }  if (available() == 0 && makeAvailable() == 0) {    return -1;  }  ++total;  int b=buffer[head++];  if (b >= 0) {    return b;  }  return b + BYTE_POSITIVE_OFFSET;}  }
class C{  final void longAccumulate(long x,LongBinaryOperator fn,boolean wasUncontended){  int h;  if ((h=getProbe()) == 0) {    ThreadLocalRandom.current();    h=getProbe();    wasUncontended=true;  }  boolean collide=false;  for (; ; ) {    Cell[] as;    Cell a;    int n;    long v;    if ((as=cells) != null && (n=as.length) > 0) {      if ((a=as[(n - 1) & h]) == null) {        if (cellsBusy == 0) {          Cell r=new Cell(x);          if (cellsBusy == 0 && casCellsBusy()) {            boolean created=false;            try {              Cell[] rs;              int m, j;              if ((rs=cells) != null && (m=rs.length) > 0 && rs[j=(m - 1) & h] == null) {                rs[j]=r;                created=true;              }            }  finally {              cellsBusy=0;            }            if (created)             break;            continue;          }        }        collide=false;      } else       if (!wasUncontended)       wasUncontended=true; else       if (a.cas(v=a.value,((fn == null) ? v + x : fn.applyAsLong(v,x))))       break; else       if (n >= NCPU || cells != as)       collide=false; else       if (!collide)       collide=true; else       if (cellsBusy == 0 && casCellsBusy()) {        try {          if (cells == as) {            Cell[] rs=new Cell[n << 1];            for (int i=0; i < n; ++i)             rs[i]=as[i];            cells=rs;          }        }  finally {          cellsBusy=0;        }        collide=false;        continue;      }      h=advanceProbe(h);    } else     if (cellsBusy == 0 && cells == as && casCellsBusy()) {      boolean init=false;      try {        if (cells == as) {          Cell[] rs=new Cell[2];          rs[h & 1]=new Cell(x);          cells=rs;          init=true;        }      }  finally {        cellsBusy=0;      }      if (init)       break;    } else     if (casBase(v=base,((fn == null) ? v + x : fn.applyAsLong(v,x))))     break;  }}  }
class C{  public synchronized void stop(){  TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"stop","stopping the timer");  if (isActive == true) {    for (    Object[] obj : timerTable.values()) {      TimerAlarmClock alarmClock=(TimerAlarmClock)obj[ALARM_CLOCK_INDEX];      if (alarmClock != null) {        alarmClock.cancel();      }    }    timer.cancel();    isActive=false;    TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"stop","timer stopped");  } else {    TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"stop","the timer is already deactivated");  }}  }
class C{  public AtomicInteger(int initialValue){  value=initialValue;}  }
class C{  public static int loadShader(int shaderType,String source){  int shader=GLES20.glCreateShader(shaderType);  checkGlError("glCreateShader type=" + shaderType);  GLES20.glShaderSource(shader,source);  GLES20.glCompileShader(shader);  int[] compiled=new int[1];  GLES20.glGetShaderiv(shader,GLES20.GL_COMPILE_STATUS,compiled,0);  if (compiled[0] == 0) {    Log.e(TAG,"Could not compile shader " + shaderType + ":");    Log.e(TAG," " + GLES20.glGetShaderInfoLog(shader));    GLES20.glDeleteShader(shader);    shader=0;  }  return shader;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node child;  String childName;  java.util.List result=new java.util.ArrayList();  java.util.List expectedResult=new java.util.ArrayList();  expectedResult.add("employee");  expectedResult.add("employeeId");  expectedResult.add("name");  expectedResult.add("position");  expectedResult.add("salary");  expectedResult.add("gender");  expectedResult.add("address");  expectedResult.add("emp:employee");  expectedResult.add("emp:employeeId");  expectedResult.add("emp:position");  expectedResult.add("emp:salary");  expectedResult.add("emp:gender");  expectedResult.add("emp:address");  expectedResult.add("address");  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","*");  for (int indexN10076=0; indexN10076 < elementList.getLength(); indexN10076++) {    child=(Node)elementList.item(indexN10076);    childName=child.getNodeName();    result.add(childName);  }  assertEquals("nodeNames",expectedResult,result);}  }
class C{  public static IOFileFilter notFileFilter(IOFileFilter filter){  return new NotFileFilter(filter);}  }
class C{  protected boolean lineStart(TextView widget,Spannable buffer){  return false;}  }
class C{  public void clear(){  currentStatus.clear();}  }
class C{  public static boolean isWellFormedAddress(String p_address){  if (p_address == null) {    return false;  }  String address=p_address.trim();  int addrLength=address.length();  if (addrLength == 0 || addrLength > 255) {    return false;  }  if (address.startsWith(".") || address.startsWith("-")) {    return false;  }  int index=address.lastIndexOf('.');  if (address.endsWith(".")) {    index=address.substring(0,index).lastIndexOf('.');  }  if (index + 1 < addrLength && isDigit(p_address.charAt(index + 1))) {    char testChar;    int numDots=0;    for (int i=0; i < addrLength; i++) {      testChar=address.charAt(i);      if (testChar == '.') {        if (!isDigit(address.charAt(i - 1)) || (i + 1 < addrLength && !isDigit(address.charAt(i + 1)))) {          return false;        }        numDots++;      } else       if (!isDigit(testChar)) {        return false;      }    }    if (numDots != 3) {      return false;    }  } else {    char testChar;    for (int i=0; i < addrLength; i++) {      testChar=address.charAt(i);      if (testChar == '.') {        if (!isAlphanum(address.charAt(i - 1))) {          return false;        }        if (i + 1 < addrLength && !isAlphanum(address.charAt(i + 1))) {          return false;        }      } else       if (!isAlphanum(testChar) && testChar != '-') {        return false;      }    }  }  return true;}  }
class C{  public String asDN(){  return realmDN;}  }
class C{  public boolean equals(Object other){  if (other == this) {    return true;  }  if (other instanceof TabStop) {    TabStop o=(TabStop)other;    return ((alignment == o.alignment) && (leader == o.leader) && (position == o.position));  }  return false;}  }
class C{  public String toString(){  return (String)value;}  }
class C{  public void dirtyCache(String dn,int eventType,boolean cosType,boolean aciChange,Set attrNames){  IdCacheBlock cb;  String originalDN=dn;  dn=DNUtils.normalizeDN(dn);  String cachedID=getCacheId(dn);switch (eventType) {case IdRepoListener.OBJECT_ADDED:    cb=getFromCache(dn);  if (cb != null) {    cb.setExists(true);  }if (cosType) {  removeCachedAttributes(cachedID,attrNames);}break;case IdRepoListener.OBJECT_REMOVED:cb=(IdCacheBlock)idRepoCache.remove(cachedID);if (cb != null) {cb.clear();}if (cosType) {removeCachedAttributes(cachedID,attrNames);}break;case IdRepoListener.OBJECT_RENAMED:cb=(IdCacheBlock)idRepoCache.remove(cachedID);if (cb != null) {cb.clear();}if (cosType) {removeCachedAttributes(cachedID,attrNames);}break;case IdRepoListener.OBJECT_CHANGED:cb=getFromCache(dn);if (cb != null) {cb.clear();}if (cosType) {removeCachedAttributes(cachedID,attrNames);} else if (aciChange) {clearCachedEntries(cachedID);}break;}if (DEBUG.messageEnabled()) {DEBUG.message("IdRemoteCachedServicesImpl.dirtyCache(): Cache " + "dirtied because of Event Notification. Parameters - " + "eventType: " + eventType + ", cosType: "+ cosType+ ", aciChange: "+ aciChange+ ", fullDN: "+ originalDN+ "; rfcDN ="+ dn+ "; cachedID="+ cachedID);}}  }
class C{  public static void shutdownFakeServer() throws DirectoryException {  DirectoryServer.getInstance().getServerContext().getSchemaHandler().updateSchema(schemaBeforeStartingFakeServer);}  }
class C{  public DocumentFragment createDocumentFragment(){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public void testSkip() throws Exception {  byte[] data=new byte[]{-127,-100,-50,-10,-1,0,1,10,50,127};  TestInputStream tis=new TestInputStream(data);  CipherInputStream cis=new CipherInputStream(tis,new NullCipher());  int expected=data.length;  byte[] result=new byte[expected];  int skipped=(int)cis.skip(2);  int ind=skipped;  int got=skipped + cis.read(result,0,1);  while (true) {    for (int j=0; j < got - ind; j++) {      if (result[j] != data[ind + j]) {        fail("read(byte[] b, int off, int len) " + "returned incorrect data: Expected " + data[ind + j] + ", got: "+ result[j]);      }    }    if (got == expected) {      break;    } else     if (got > expected) {      fail("The data returned by " + "read(byte[] b, int off, int len) " + "is larger than expected.");    } else {      ind=got;      got+=cis.read(result,0,1);    }  }  if ((got=cis.read(result,0,1)) != -1) {    fail("read() should return -1 at the end of the stream. " + "Output is: " + got + ".");  }}  }
class C{  public AnnotationVisitor visitParameterAnnotation(int parameter,String desc,boolean visible){  if (mv != null) {    return mv.visitParameterAnnotation(parameter,desc,visible);  }  return null;}  }
class C{  private int addExpansion(int anOrder,String expandChars){  if (expandTable == null) {    expandTable=new Vector<>(INITIALTABLESIZE);  }  int offset=(anOrder == RBCollationTables.UNMAPPED) ? 0 : 1;  int[] valueList=new int[expandChars.length() + offset];  if (offset == 1) {    valueList[0]=anOrder;  }  int j=offset;  for (int i=0; i < expandChars.length(); i++) {    char ch0=expandChars.charAt(i);    char ch1;    int ch;    if (Character.isHighSurrogate(ch0)) {      if (++i == expandChars.length() || !Character.isLowSurrogate(ch1=expandChars.charAt(i))) {        break;      }      ch=Character.toCodePoint(ch0,ch1);    } else {      ch=ch0;    }    int mapValue=getCharOrder(ch);    if (mapValue != RBCollationTables.UNMAPPED) {      valueList[j++]=mapValue;    } else {      valueList[j++]=CHARINDEX + ch;    }  }  if (j < valueList.length) {    int[] tmpBuf=new int[j];    while (--j >= 0) {      tmpBuf[j]=valueList[j];    }    valueList=tmpBuf;  }  int tableIndex=RBCollationTables.EXPANDCHARINDEX + expandTable.size();  expandTable.addElement(valueList);  return tableIndex;}  }
class C{  public <T extends IElement>Cell add(BlockElement<T> element){  childElements.add(element);  return this;}  }
class C{  public void removeCertificate(String alias) throws KeyStoreException, IllegalArgumentException {  ensureValid(alias,CERT_ALIAS_MSG);  if (!aliasInUse(alias)) {    LocalizableMessage msg=ERR_CERTMGR_ALIAS_CAN_NOT_DELETE.get(alias);    throw new IllegalArgumentException(msg.toString());  }  keyStore=null;  Platform.deleteAlias(getKeyStore(),keyStorePath,alias,password);}  }
class C{  static void checkInternalName(final String name,final int start,final int end,final String msg){  int max=end == -1 ? name.length() : end;  try {    int begin=start;    int slash;    do {      slash=name.indexOf('/',begin + 1);      if (slash == -1 || slash > max) {        slash=max;      }      checkIdentifier(name,begin,slash,null);      begin=slash + 1;    } while (slash != max);  } catch (  IllegalArgumentException unused) {    throw new IllegalArgumentException("Invalid " + msg + " (must be a fully qualified class name in internal form): "+ name);  }}  }
class C{  @After public void afterTest(){}  }
class C{  public boolean containedIn(Oid[] oids){  for (int i=0; i < oids.length; i++) {    if (oids[i].equals(this))     return (true);  }  return (false);}  }
class C{  void save(SSOToken token) throws SSOException, SMSException {  if (backendProxyEnabled) {    if (isAllowed(token,normalizedDN,modifyActionSet)) {      if (adminSSOToken == null) {        adminSSOToken=(SSOToken)AccessController.doPrivileged(com.sun.identity.security.AdminTokenAction.getInstance());      }      token=adminSSOToken;    }  } else {    getDelegationPermission(token,normalizedDN,modifyActionSet);  }  if (newEntry && attrSet != null) {    smsObject.create(token,dn,attrSet);    SMSNotificationManager.getInstance().localObjectChanged(dn,SMSObjectListener.ADD);  } else   if (modSet != null) {    smsObject.modify(token,dn,(ModificationItem[])(modSet.toArray(new ModificationItem[modSet.size()])));    SMSNotificationManager.getInstance().localObjectChanged(dn,SMSObjectListener.MODIFY);  } else {  }  newEntry=false;}  }
class C{  public Matcher next(){  int matcherIndex=-1;  int charIndex=Integer.MAX_VALUE;  for (int n=0; n < matchers.length; n++) {    if (matchers[n] != null) {      int start=matchers[n].start();      if (start < charIndex) {        charIndex=start;        matcherIndex=n;      }    }  }  if (matcherIndex == -1) {    throw new NoSuchElementException();  }  Matcher next=matchers[matcherIndex];  matchers[matcherIndex]=(discard ? null : patterns[matcherIndex].matcher(input));  if (matchers[matcherIndex] != null && (charIndex == input.length() - 1 || !matchers[matcherIndex].find(charIndex + 1))) {    matchers[matcherIndex]=null;  }  return next;}  }
class C{  public <M extends Configuration>void registerAddListener(OptionalRelationDefinition<?,M> d,ConfigurationAddListener<M> listener) throws ConfigException {  registerAddListener(d,new ServerManagedObjectAddListenerAdaptor<M>(listener));}  }
class C{  public boolean is_active(){  return active;}  }
class C{  public TaggedInputStream(InputStream proxy){  super(proxy);}  }
class C{  public Rectangle decreaseHeight(float extra){  this.height-=extra;  return this;}  }
class C{  public boolean isInverted(){  return ((getData() & 0x4) != 0);}  }
class C{  public Observable<Void> initializePersistenceObservable(){  io.vertx.rx.java.ObservableFuture<Void> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  initializePersistence(resultHandler.toHandler());  return resultHandler;}  }
class C{  public PredicateNotMetException(String msg){  super(msg);}  }
class C{  public void checkPermissionToDestroySession(final Session requester,final SessionID sessionId) throws SessionException {  if (!hasPermissionToDestroySession(requester,sessionId)) {    throw new SessionException(SessionBundle.rbName,"noPrivilege",null);  }}  }
class C{  public Value constructingNewInst(SClassDef classDef,List<Value> argList,LineCol lineCol) throws SyntaxException {  out:   for (  SConstructorDef con : classDef.constructors()) {    List<SParameter> params=con.getParameters();    if (argList.size() == params.size()) {      for (int i=0; i < argList.size(); ++i) {        Value v=argList.get(i);        SParameter param=params.get(i);        if (!param.type().isAssignableFrom(v.type())) {          if (!(param.type() instanceof PrimitiveTypeDef) && v.type() instanceof PrimitiveTypeDef) {            v=boxPrimitive(v,LineCol.SYNTHETIC);            if (!param.type().isAssignableFrom(v.type())) {              continue out;            }          } else           continue out;        }      }      Ins.New aNew=new Ins.New(con,lineCol);      argList=castArgsForMethodInvoke(argList,con.getParameters(),lineCol);      aNew.args().addAll(argList);      return aNew;    }  }  return new Ins.InvokeDynamic(getConstructBootstrapMethod(),"_init_",argList,classDef,Dynamic.INVOKE_STATIC,lineCol);}  }
class C{  static <T>ReplayPromise<Void> allReplay(final Duration timeout,final List<Promise<T>> promises){  return allReplay(timeout,System.currentTimeMillis(),promises.toArray(new Promise[promises.size()]));}  }
class C{  public Builder names(final Collection<String> names){  this.names.addAll(names);  return this;}  }
class C{  public void test_transferFrom_couldDelete() throws Exception {  writeDataToFile(fileOfReadOnlyFileChannel);  writeDataToFile(fileOfWriteOnlyFileChannel);  writeOnlyFileChannel.transferFrom(readOnlyFileChannel,0,2);  readOnlyFileChannel.close();  writeOnlyFileChannel.close();  boolean rDel=fileOfReadOnlyFileChannel.delete();  boolean wDel=fileOfWriteOnlyFileChannel.delete();  assertTrue("File " + readOnlyFileChannel + " exists",rDel);  assertTrue("File " + writeOnlyFileChannel + " exists",wDel);}  }
class C{  public void run(){  boolean periodic=isPeriodic();  if (!canRunInCurrentRunState(periodic))   cancel(false); else   if (!periodic)   ScheduledFutureTask.super.run(); else   if (ScheduledFutureTask.super.runAndReset()) {    setNextRunTime();    reExecutePeriodic(outerTask);  }}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  @Override public AsyncContext startAsync(ServletRequest servletRequest,ServletResponse servletResponse) throws IllegalStateException {  return request.startAsync(servletRequest,servletResponse);}  }
class C{  private void makeRoom(){  if (size <= MAX_SIZE) {    return;  }  indexFiles();  int removals=size - MAX_SIZE;  Iterator<File> i=accessOrder.values().iterator();  do {    delete(i.next());    i.remove();  } while (--removals > 0);}  }
class C{  public void onNetConnected(NetUtils.NetType type){}  }
class C{  public NSDate(String textRepresentation) throws ParseException {  date=parseDateString(textRepresentation);}  }
class C{  public static boolean isUrlUsable(String url){  if (AppUtils.isEmpty(url)) {    return false;  }  URL urlTemp=null;  HttpURLConnection connt=null;  try {    urlTemp=new URL(url);    connt=(HttpURLConnection)urlTemp.openConnection();    connt.setRequestMethod("HEAD");    int returnCode=connt.getResponseCode();    if (returnCode == HttpURLConnection.HTTP_OK) {      return true;    }  } catch (  Exception e) {    return false;  } finally {    connt.disconnect();  }  return false;}  }
class C{  public int length(){  return values.size();}  }
class C{  private static void checkCanReadConfig(ConnectionWrapper conn) throws IOException {  SearchRequest request=newSearchRequest("cn=config",BASE_OBJECT,"objectclass=*",NO_ATTRIBUTES);  conn.getConnection().searchSingleEntry(request);}  }
class C{  public boolean startCellEditing(EventObject anEvent){  return true;}  }
class C{  public SubCommandHandlerMenuCallback(SubCommandHandler handler){  this.handler=handler;}  }
class C{  private boolean mustAdd(Syntax syntax){  String f=filter.getText().trim();  return f.length() == 0 || (FILTER_NAME.equals(filterAttribute.getSelectedItem()) && mustAdd(f,syntax.getOID(),syntax.getName()));}  }
class C{  public Builder withSecret(String secret){  config.setSecret(secret);  return this;}  }
class C{  public NSArray(NSObject... a){  array=a;}  }
class C{  public void send(PushMessage message,String realm) throws PushNotificationException {  PushNotificationDelegate delegate=getDelegateForRealm(realm);  if (delegate == null) {    throw new PushNotificationException("No delegate for supplied realm. Check service exists and init has " + "been called.");  }  delegate.send(message);}  }
class C{  @Override public void save(Session session) throws IOException {  File file=file(session.getIdInternal());  if (file == null) {    return;  }  if (manager.getContext().getLogger().isDebugEnabled()) {    manager.getContext().getLogger().debug(sm.getString(getStoreName() + ".saving",session.getIdInternal(),file.getAbsolutePath()));  }  try (FileOutputStream fos=new FileOutputStream(file.getAbsolutePath());ObjectOutputStream oos=new ObjectOutputStream(new BufferedOutputStream(fos))){    ((StandardSession)session).writeObjectData(oos);  } }  }
class C{  public void clearArguments(){  args.clear();  obfuscatedArgs.clear();}  }
class C{  public SQLWarning(Throwable cause){  super(cause);  DriverManager.println("SQLWarning");}  }
class C{  private static void displayPropertyHeader(ConsoleApplication app,PropertyDefinition<?> pd){  app.println();  app.println();  app.println(INFO_EDITOR_HEADING_CONFIGURE_PROPERTY.get(pd.getName()));  app.println();  app.println(pd.getSynopsis(),4);  if (pd.getDescription() != null) {    app.println();    app.println(pd.getDescription(),4);  }}  }
class C{  @Override public void run(){  long maintainTime=0;  while (sendfileRunning) {    while (sendfileRunning && paused) {      try {        Thread.sleep(1000);      } catch (      InterruptedException e) {      }    }    while (sendfileRunning && sendfileCount < 1 && addS.size() < 1) {      maintainTime=0;      try {synchronized (this) {          this.wait();        }      } catch (      InterruptedException e) {      }    }    if (!sendfileRunning) {      break;    }    try {      if (addS.size() > 0) {synchronized (this) {          for (int i=(addS.size() - 1); i >= 0; i--) {            SendfileData data=addS.get(i);            int rv=Poll.add(sendfilePollset,data.socket,Poll.APR_POLLOUT);            if (rv == Status.APR_SUCCESS) {              sendfileData.put(Long.valueOf(data.socket),data);              sendfileCount++;            } else {              getLog().warn(sm.getString("endpoint.sendfile.addfail",Integer.valueOf(rv),Error.strerror(rv)));              closeSocket(data.socket);            }          }          addS.clear();        }      }      maintainTime+=pollTime;      int rv=Poll.poll(sendfilePollset,pollTime,desc,false);      if (rv > 0) {        for (int n=0; n < rv; n++) {          SendfileData state=sendfileData.get(Long.valueOf(desc[n * 2 + 1]));          if (((desc[n * 2] & Poll.APR_POLLHUP) == Poll.APR_POLLHUP) || ((desc[n * 2] & Poll.APR_POLLERR) == Poll.APR_POLLERR)) {            remove(state);            closeSocket(state.socket);            continue;          }          long nw=Socket.sendfilen(state.socket,state.fd,state.pos,state.length,0);          if (nw < 0) {            remove(state);            closeSocket(state.socket);            continue;          }          state.pos+=nw;          state.length-=nw;          if (state.length == 0) {            remove(state);            if (state.keepAlive) {              Pool.destroy(state.fdpool);              Socket.timeoutSet(state.socket,getSoTimeout() * 1000);              getPoller().add(state.socket,getKeepAliveTimeout(),Poll.APR_POLLIN);            } else {              closeSocket(state.socket);            }          }        }      } else       if (rv < 0) {        int errn=-rv;        if ((errn != Status.TIMEUP) && (errn != Status.EINTR)) {          if (errn > Status.APR_OS_START_USERERR) {            errn-=Status.APR_OS_START_USERERR;          }          getLog().error(sm.getString("endpoint.apr.pollError",Integer.valueOf(errn),Error.strerror(errn)));synchronized (this) {            destroy();            init();          }          continue;        }      }      if (getSoTimeout() > 0 && maintainTime > 1000000L && sendfileRunning) {        rv=Poll.maintain(sendfilePollset,desc,false);        maintainTime=0;        if (rv > 0) {          for (int n=0; n < rv; n++) {            SendfileData state=sendfileData.get(Long.valueOf(desc[n]));            remove(state);            closeSocket(state.socket);          }        }      }    } catch (    Throwable t) {      ExceptionUtils.handleThrowable(t);      getLog().error(sm.getString("endpoint.poll.error"),t);    }  }synchronized (this) {    this.notifyAll();  }}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  public void valueChanged(TreeSelectionEvent event){  getHandler().valueChanged(event);}  }
class C{  @Parameters({"logtest-logname","logwrite-number-of-records"}) @Test(groups={"api-adminread"},dependsOnMethods={"writeAdminLogRecord"}) public void readAdminLogRecord(String rLogName,String rNumRecs) throws AMLogException {  SSOToken adminToken=getAdminSSOToken();  int numRecs=0;  if ((rNumRecs != null) && (rNumRecs.length() > 0)) {    try {      numRecs=Integer.parseInt(rNumRecs);    } catch (    NumberFormatException nfe) {      numRecs=1;    }  }  readAllRecords(rLogName,adminToken,numRecs);  readLogQuery(rLogName,adminToken,numRecs);}  }
class C{  public static void display(Collection<BrdItem> p_item_list,BoardFrame p_board_frame,PlaCoordTransform p_coordinate_transform,Point p_location){  WindowObjectInfo new_instance=new WindowObjectInfo(p_board_frame,p_coordinate_transform);  new_instance.setTitle(new_instance.resources.getString("title"));  Integer pin_count=0;  Integer via_count=0;  Integer trace_count=0;  double cumulative_trace_length=0;  for (  PrintableInfo curr_object : p_item_list) {    curr_object.print_info(new_instance,p_board_frame.get_locale());    if (curr_object instanceof BrdAbitPin) {      ++pin_count;    } else     if (curr_object instanceof BrdAbitVia) {      ++via_count;    } else     if (curr_object instanceof BrdTracep) {      ++trace_count;      cumulative_trace_length+=((BrdTracep)curr_object).get_length();    }  }  new_instance.append_bold(new_instance.resources.getString("summary") + " ");  java.text.NumberFormat number_format=java.text.NumberFormat.getInstance(p_board_frame.get_locale());  if (pin_count > 0) {    new_instance.append(number_format.format(pin_count));    if (pin_count == 1) {      new_instance.append(" " + new_instance.resources.getString("pin"));    } else {      new_instance.append(" " + new_instance.resources.getString("pins"));    }    if (via_count + trace_count > 0) {      new_instance.append(", ");    }  }  if (via_count > 0) {    new_instance.append(number_format.format(via_count));    if (via_count == 1) {      new_instance.append(" " + new_instance.resources.getString("via"));    } else {      new_instance.append(" " + new_instance.resources.getString("vias"));    }    if (trace_count > 0) {      new_instance.append(", ");    }  }  if (trace_count > 0) {    new_instance.append(number_format.format(trace_count));    if (trace_count == 1) {      new_instance.append(" " + new_instance.resources.getString("trace") + " ");    } else {      new_instance.append(" " + new_instance.resources.getString("traces") + " ");    }    new_instance.append(cumulative_trace_length);  }  new_instance.pack();  java.awt.Dimension size=new_instance.getSize();  if (size.getHeight() > MAX_WINDOW_HEIGHT) {    new_instance.setPreferredSize(new Dimension((int)size.getWidth() + SCROLLBAR_ADD,MAX_WINDOW_HEIGHT));    new_instance.pack();  }  new_instance.setLocation(p_location);  new_instance.setVisible(true);}  }
class C{  @Override protected Token assertTokens(SoapMessage message){  AssertionInfoMap aim=message.get(AssertionInfoMap.class);  Collection<AssertionInfo> ais=aim.getAssertionInfo(AMSTSConstants.AM_SESSION_TOKEN_ASSERTION_QNAME);  Token token=null;  for (  AssertionInfo ai : ais) {    token=(Token)ai.getAssertion();    ai.setAsserted(true);  }  ais=aim.getAssertionInfo(SP12Constants.SUPPORTING_TOKENS);  for (  AssertionInfo ai : ais) {    ai.setAsserted(true);  }  if (isTLSInUse(message)) {    ais=aim.getAssertionInfo(SP12Constants.SIGNED_SUPPORTING_TOKENS);    for (    AssertionInfo ai : ais) {      ai.setAsserted(true);    }    ais=aim.getAssertionInfo(SP12Constants.TRANSPORT_TOKEN);    for (    AssertionInfo ai : ais) {      ai.setAsserted(true);    }  }  return token;}  }
class C{  boolean hasMoreInput(){  return current.cursor < current.stream.length;}  }
class C{  @Override public Object clone(){  PrivilegeCondition theClone=null;  try {    theClone=(PrivilegeCondition)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  theClone.state=state;  return theClone;}  }
class C{  public boolean visitVariableRef(ExpressionOwner owner,Variable var){  m_isAbs=false;  return true;}  }
class C{  private int sampleLine(ResultPoint p1,ResultPoint p2,int size){  int result=0;  float d=distance(p1,p2);  float moduleSize=d / size;  float px=p1.getX();  float py=p1.getY();  float dx=moduleSize * (p2.getX() - p1.getX()) / d;  float dy=moduleSize * (p2.getY() - p1.getY()) / d;  for (int i=0; i < size; i++) {    if (image.get(MathUtils.round(px + i * dx),MathUtils.round(py + i * dy))) {      result|=1 << (size - i - 1);    }  }  return result;}  }
class C{  public FSPostLoginException(String msg){  super(msg);}  }
class C{  private void createPreExternalInitializationSubCommand() throws ArgumentException {  preExternalInitializationSubCmd=new SubCommand(this,PRE_EXTERNAL_INITIALIZATION_SUBCMD_NAME,INFO_DESCRIPTION_SUBCMD_PRE_EXTERNAL_INITIALIZATION.get(POST_EXTERNAL_INITIALIZATION_SUBCMD_NAME));  BooleanArgument externalInitializationLocalOnlyArg=BooleanArgument.builder("local-only").shortIdentifier('l').description(LocalizableMessage.EMPTY).hidden().buildArgument();  Argument[] argsToAdd={secureArgsList.getHostNameArg(),secureArgsList.getPortArg(),externalInitializationLocalOnlyArg};  for (  Argument arg : argsToAdd) {    preExternalInitializationSubCmd.addArgument(arg);  }}  }
class C{  @Override public int hashCode(){  int hashCode=dn.hashCode();  for (  ObjectClass oc : objectClasses.keySet()) {    hashCode+=oc.hashCode();  }  hashCode+=hashCode(userAttributes.values());  hashCode+=hashCode(operationalAttributes.values());  return hashCode;}  }
class C{  public void removeUsers(Set users) throws UnsupportedOperationException {  throw new UnsupportedOperationException();}  }
class C{  void removeEQ(Object o){  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] array=queue;    for (int i=0, n=size; i < n; i++) {      if (o == array[i]) {        removeAt(i);        break;      }    }  }  finally {    lock.unlock();  }}  }
class C{  public double distanceSquared(Vector o){  return NumberConversions.square(x - o.x) + NumberConversions.square(y - o.y) + NumberConversions.square(z - o.z);}  }
class C{  public PresenceTag(){  percentage=100;}  }
class C{  @Override public Promise<Void,AuthenticationException> cleanSubject(MessageInfoContext messageInfo,Subject subject){  return newResultPromise(null);}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthButtonUI();}  }
class C{  protected PooledConnection borrowConnection(long now,PooledConnection con,String username,String password) throws SQLException {  boolean setToNull=false;  try {    con.lock();    if (con.isReleased()) {      return null;    }    boolean forceReconnect=con.shouldForceReconnect(username,password) || con.isMaxAgeExpired();    if (!con.isDiscarded() && !con.isInitialized()) {      forceReconnect=true;    }    if (!forceReconnect) {      if ((!con.isDiscarded()) && con.validate(PooledConnection.VALIDATE_BORROW)) {        con.setTimestamp(now);        if (getPoolProperties().isLogAbandoned()) {          con.setStackTrace(getThreadDump());        }        if (!busy.offer(con)) {          log.debug("Connection doesn't fit into busy array, connection will not be traceable.");        }        return con;      }    }    try {      con.reconnect();      int validationMode=getPoolProperties().isTestOnConnect() || getPoolProperties().getInitSQL() != null ? PooledConnection.VALIDATE_INIT : PooledConnection.VALIDATE_BORROW;      if (con.validate(validationMode)) {        con.setTimestamp(now);        if (getPoolProperties().isLogAbandoned()) {          con.setStackTrace(getThreadDump());        }        if (!busy.offer(con)) {          log.debug("Connection doesn't fit into busy array, connection will not be traceable.");        }        return con;      } else {        throw new SQLException("Failed to validate a newly established connection.");      }    } catch (    Exception x) {      release(con);      setToNull=true;      if (x instanceof SQLException) {        throw (SQLException)x;      } else {        SQLException ex=new SQLException(x.getMessage());        ex.initCause(x);        throw ex;      }    }  }  finally {    con.unlock();    if (setToNull) {      con=null;    }  }}  }
class C{  public int read() throws IOException {  return (read(scratch,0,1) != -1) ? scratch[0] & 0xff : -1;}  }
class C{  public void removeUsers(Set users) throws AMException, SSOException {  SSOTokenManager.getInstance().validateToken(super.token);  dsServices.modifyMemberShip(super.token,users,super.entryDN,ASSIGNABLE_DYNAMIC_GROUP,REMOVE_MEMBER);}  }
class C{  Mark skipUntilETag(String tag){  Mark ret=skipUntil("</" + tag);  if (ret != null) {    skipSpaces();    if (nextChar() != '>')     ret=null;  }  return ret;}  }
class C{  public boolean isAccountLocked(AMIdentity amIdentity){  boolean isLocked=false;  if (!memoryLocking) {    try {      if (lockoutAttrName != null && lockoutAttrValue != null) {        Set attrValueSet=amIdentity.getAttribute(lockoutAttrName);        if ((attrValueSet != null) && (!attrValueSet.isEmpty())) {          Iterator i=attrValueSet.iterator();          String attrValue=(String)i.next();          isLocked=attrValue.equals(lockoutAttrValue);        }      }      if (!isLocked) {        Set attrValueSet=amIdentity.getAttribute(USER_STATUS_ATTR);        if ((attrValueSet != null) && (!attrValueSet.isEmpty())) {          Iterator i=attrValueSet.iterator();          String attrValue=(String)i.next();          isLocked=attrValue.equals(USER_INACTIVE);        }      }    } catch (    Exception e) {      debug.error("Error inactivating user account",e);    }  }  if (debug.messageEnabled()) {    if (isLocked) {      debug.message("Account is locked");    } else {      debug.message("Account is unlocked");    }  }  return isLocked;}  }
class C{  public static Attribute subtract(Attribute a1,Attribute a2,Collection<ByteString> missingValues){  AttributeBuilder builder=new AttributeBuilder(a1);  for (  ByteString av : a2) {    if (!builder.remove(av) && missingValues != null) {      missingValues.add(av);    }  }  return builder.toAttribute();}  }
class C{  public KeySelectorException(String message){  super(message);}  }
class C{  public Location(final World world,final double x,final double y,final double z){  this(world,x,y,z,0,0);}  }
class C{  public boolean isCachedMemory(){  return false;}  }
class C{  private void modifyIndexOnline(final ConnectionWrapper connWrapper) throws Exception {  final BackendCfgClient backend=connWrapper.getRootConfiguration().getBackend(backendName);  modifyBackendIndexOnline((PluggableBackendCfgClient)backend);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setNamedItemNS03.class,args);}  }
class C{  private void encryptBlock(byte[] src,int srcIndex,byte[] dst,int dstIndex){  int xl=BytesTo32bits(src,srcIndex);  int xr=BytesTo32bits(src,srcIndex + 4);  xl^=P[0];  for (int i=1; i < ROUNDS; i+=2) {    xr^=F(xl) ^ P[i];    xl^=F(xr) ^ P[i + 1];  }  xr^=P[ROUNDS + 1];  Bits32ToBytes(xr,dst,dstIndex);  Bits32ToBytes(xl,dst,dstIndex + 4);}  }
class C{  public void handleMessage(@NotNull IUser user,@NotNull TLMessage message){  try {    handleMessageInternal(user,message.getMessage());  } catch (  RpcException e) {    BotLogger.severe(LOGTAG,e);  }}  }
class C{  private ResourceType findOrCreateResourceType(final Map<String,Boolean> actions,Collection<String> resources,final Context context,CreateRequest request) throws EntitlementException {  final Subject callingSubject=contextHelper.getSubject(context);  final String realm=contextHelper.getRealm(context);  final Set<QueryFilter<SmsAttribute>> actionFilters=transformSet(actions.entrySet(),new ActionsToQuery());  final Set<QueryFilter<SmsAttribute>> patternFilters=transformSet(resources,new ResourcesToQuery());  final Set<ResourceType> resourceTypes=resourceTypeService.getResourceTypes(QueryFilter.and(QueryFilter.and(actionFilters),QueryFilter.and(patternFilters)),callingSubject,realm);  if (!resourceTypes.isEmpty()) {    return resourceTypes.iterator().next();  }  final String resourceTypeName=generateResourceTypeName(request);  final ResourceType resourceType=ResourceType.builder().setName(resourceTypeName).setActions(actions).setPatterns(resources).setDescription("Generated resource type").generateUUID().build();  return resourceTypeService.saveResourceType(callingSubject,realm,resourceType);}  }
class C{  public void updateUI(){  setUI((ButtonUI)UIManager.getUI(this));}  }
class C{  public void showNoAntennaDialog(){  NoAntennaDialog newFragment=NoAntennaDialog.newInstance();  newFragment.show(mFragmentManager,TAG_NO_ANTENNA);  mFragmentManager.executePendingTransactions();}  }
class C{  public static Foo remove(long fooId) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().remove(fooId);}  }
class C{  private synchronized void unlinkStyleSheet(StyleSheet ss,int index){  if (resolvedStyles.size() > 0) {    Enumeration<ResolvedStyle> values=resolvedStyles.elements();    while (values.hasMoreElements()) {      ResolvedStyle rule=values.nextElement();      rule.removeExtendedStyleAt(index);    }  }}  }
class C{  @DataProvider(name="mergeAttributes") public Object[][] mergeAttributes(){  return new Object[][]{{1,Attributes.create("cn","one","two","three"),Attributes.create("cn","one","two","three"),Attributes.create("cn","one","two","three"),Attributes.create("cn","one","two","three")},{2,Attributes.empty("cn"),Attributes.create("cn","one","two","three"),Attributes.create("cn","one","two","three"),Attributes.empty("cn")},{3,Attributes.create("cn","one","two","three"),Attributes.empty("cn"),Attributes.create("cn","one","two","three"),Attributes.empty("cn")},{4,Attributes.create("cn","one","two","three"),Attributes.create("cn","two","three","four"),Attributes.create("cn","one","two","three","four"),Attributes.create("cn","two","three")},{5,Attributes.create("cn","one","two","three"),Attributes.create("cn","four","five","six"),Attributes.create("cn","one","two","three","four","five","six"),Attributes.empty("cn")}};}  }
class C{  public Conditions createConditions(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.CONDITIONS,xml);  if (obj == null) {    return new ConditionsImpl(xml);  } else {    return (Conditions)obj;  }}  }
class C{  public QName(String localName,boolean validate){  if (localName == null)   throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_NULL,null));  if (validate) {    if (!XML11Char.isXML11ValidNCName(localName)) {      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_INVALID,null));    }  }  _namespaceURI=null;  _localName=localName;  m_hashCode=toString().hashCode();}  }
class C{  ContentModelState(Object content,ContentModelState next,long value){  this.model=(ContentModel)content;  this.next=next;  this.value=value;}  }
class C{  public void test_setDoubleLjava_lang_ObjectID(){  double[] x={0};  boolean thrown=false;  try {    Array.setDouble(x,0,1);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,Array.getDouble(x,0),0.0);  try {    Array.setDouble(new Object(),0,9);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    Array.setDouble(x,4,9);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    Array.setDouble(null,0,0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  public static void forwardRequest(HttpServletRequest request,HttpServletResponse response,String url){  FSUtils.debug.message("FSUtils.forwardRequest: called");  String newUrl=null;  try {    SessionProvider sessionProvider=SessionManager.getProvider();    Object token=sessionProvider.getSession(request);    if ((token != null) && (sessionProvider.isValid(token))) {      newUrl=sessionProvider.rewriteURL(token,url);    }  } catch (  Exception se) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSUtils.forwardReqeust: couldn't rewrite url: " + se.getMessage());    }    newUrl=null;  }  if (newUrl == null) {    newUrl=url;  }  try {    String sourceHost=request.getServerName();    int sourcePort=request.getServerPort();    FSUtils.debug.message("FSUtils.forwardRequest: " + "SourceHost=" + sourceHost + " SourcePort="+ sourcePort);    URL target=new URL(newUrl);    String targetHost=target.getHost();    int targetPort=target.getPort();    FSUtils.debug.message("FSUtils.forwardRequest: targetHost=" + targetHost + " targetPort="+ targetPort);    boolean isWebSphere=false;    String container=SystemConfigurationUtil.getProperty(Constants.IDENTITY_WEB_CONTAINER);    if (container != null && (container.indexOf("IBM") != -1)) {      isWebSphere=true;    }    int index=newUrl.indexOf(deploymentURI + "/");    if (!(sourceHost.equals(targetHost)) || !(sourcePort == targetPort) || !(index > 0)|| isWebSphere) {      FSUtils.debug.message("FSUtils.forwardRequest: Source and " + "Target are not on the same container." + "Redirecting to target");      response.sendRedirect(newUrl);      return;    } else {      String resource=newUrl.substring(index + deploymentURI.length());      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSUtils.forwardRequest: Forwarding to :" + resource);      }      RequestDispatcher dispatcher=request.getRequestDispatcher(resource);      try {        dispatcher.forward(request,response);      } catch (      Exception e) {        FSUtils.debug.error("FSUtils.forwardRequest: Exception " + "occured while trying to forward to resource:" + resource,e);      }    }  } catch (  Exception ex) {    FSUtils.debug.error("FSUtils.forwardRequest: Exception occured",ex);  }}  }
class C{  public void organizationConfigChanged(String serviceName,String version,String orgName,String groupName,String serviceComponent,int type){}  }
class C{  public FrameBodyTSOT(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public static void registerConnectionHandler(ConnectionHandler<? extends ConnectionHandlerCfg> handler){synchronized (directoryServer.connectionHandlers) {    directoryServer.connectionHandlers.add(handler);    ConnectionHandlerMonitor monitor=new ConnectionHandlerMonitor(handler);    monitor.initializeMonitorProvider(null);    handler.setConnectionHandlerMonitor(monitor);    registerMonitorProvider(monitor);  }}  }
class C{  private boolean handleAutoRename(final File sourceFile,final File destFile) throws IOException {  int counter=1;  File newDestFile;  while (true) {    String newFileName=FileUtils.getFileNameWithoutExtension(destFile.getName(),false) + "(" + counter+ ")."+ FileUtils.getFileExtension(destFile.getName(),false);    newDestFile=new File(destFile.getParent(),newFileName);    if (!newDestFile.exists()) {      return (FileUtils.copyFromSourceToDestFile(sourceFile,newDestFile,true,configuration));    } else {      counter++;    }  }}  }
class C{  public TransformerFactoryConfigurationError(){  super();  this.exception=null;}  }
class C{  public void createParentTreeEntryForPage(PdfPage page){  getParentTreeHandler().createParentTreeEntryForPage(page);}  }
class C{  public Location add(double x,double y,double z){  this.x+=x;  this.y+=y;  this.z+=z;  return this;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodedocumentnodevalue.class,args);}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfBoolean makeIndirect(PdfDocument document,PdfIndirectReference reference){  return (PdfBoolean)super.makeIndirect(document,reference);}  }
class C{  protected boolean isFatalAlert(){  return (alert[0] == 2);}  }
class C{  public final void popQuick(){  m_firstFree--;  m_map[m_firstFree]=DTM.NULL;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.MsgMethodElement createMsgMethodElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.MsgMethodElementImpl();}  }
class C{  public HierarchyEvent(Component source,int id,Component changed,Container changedParent){  super(source,id);  this.changed=changed;  this.changedParent=changedParent;}  }
class C{  @Override void toXML(StringBuilder xml,int level){  indent(xml,level);  xml.append("<array>");  xml.append(NSObject.NEWLINE);  for (  NSObject o : set) {    o.toXML(xml,level + 1);    xml.append(NSObject.NEWLINE);  }  indent(xml,level);  xml.append("</array>");}  }
class C{  public int board_layer_count(){  return shapes.length;}  }
class C{  public JKPrivilige(final int priviligeId,final String name,final JKPrivilige parent){  this(priviligeId,name,parent,parent == null ? 0 : parent.getChilds().size() + 1);}  }
class C{  private void createLayout(){  GridBagConstraints gbc=new GridBagConstraints();  gbc.anchor=GridBagConstraints.WEST;  gbc.gridx=0;  gbc.gridy=0;  gbc.weightx=0.0;  gbc.gridwidth=1;  gbc.fill=GridBagConstraints.NONE;  dnLabel=Utilities.createPrimaryLabel(INFO_CTRL_PANEL_BASE_DN_LABEL.get());  add(dnLabel,gbc);  gbc.insets.left=10;  gbc.gridx=1;  dn=Utilities.createLongTextField();  gbc.weightx=1.0;  gbc.fill=GridBagConstraints.HORIZONTAL;  add(dn,gbc);  addBottomGlue(gbc);}  }
class C{  private DN retrieveParentDNForDelete(final DN entryDN) throws DirectoryException {  final DN parentDN=entryDN.parent();  if (parentDN == null) {    throw new DirectoryException(ResultCode.NO_SUCH_OBJECT,ERR_CONFIG_FILE_DELETE_NO_PARENT_DN.get(entryDN));  }  if (!backend.contains(parentDN)) {    throw new DirectoryException(ResultCode.NO_SUCH_OBJECT,ERR_CONFIG_FILE_DELETE_NO_PARENT.get(entryDN),getMatchedDN(parentDN),null);  }  return parentDN;}  }
class C{  public boolean shouldSelectCell(EventObject anEvent){  return delegate.shouldSelectCell(anEvent);}  }
class C{  private EntryIDSet evaluateLogicalAndFilter(SearchFilter andFilter){  ArrayList<SearchFilter> fastComps=new ArrayList<>();  ArrayList<SearchFilter> otherComps=new ArrayList<>();  HashMap<AttributeType,ArrayList<SearchFilter>> rangeComps=new HashMap<>();  for (  SearchFilter filter : andFilter.getFilterComponents()) {    FilterType filterType=filter.getFilterType();    if (filterType == FilterType.GREATER_OR_EQUAL || filterType == FilterType.LESS_OR_EQUAL) {      ArrayList<SearchFilter> rangeList;      rangeList=rangeComps.get(filter.getAttributeType());      if (rangeList == null) {        rangeList=new ArrayList<>();        rangeComps.put(filter.getAttributeType(),rangeList);      }      rangeList.add(filter);    } else     if (filterType == FilterType.EQUALITY || filterType == FilterType.PRESENT || filterType == FilterType.APPROXIMATE_MATCH) {      fastComps.add(filter);    } else {      otherComps.add(filter);    }  }  EntryIDSet results=newUndefinedSet();  results=applyFiltersUntilThreshold(results,fastComps);  results=applyFiltersUntilThreshold(results,otherComps);  if (isBelowFilterThreshold(results) || rangeComps.isEmpty()) {    return results;  }  ArrayList<SearchFilter> remainComps=new ArrayList<>();  for (  Map.Entry<AttributeType,ArrayList<SearchFilter>> rangeEntry : rangeComps.entrySet()) {    ArrayList<SearchFilter> rangeList=rangeEntry.getValue();    if (rangeList.size() == 2) {      SearchFilter filter1=rangeList.get(0);      SearchFilter filter2=rangeList.get(1);      AttributeIndex attributeIndex=entryContainer.getAttributeIndex(rangeEntry.getKey());      if (attributeIndex == null) {        if (monitor.isFilterUseEnabled()) {          monitor.updateStats(SearchFilter.createANDFilter(rangeList),INFO_INDEX_FILTER_INDEX_TYPE_DISABLED.get("ordering",rangeEntry.getKey().getNameOrOID()));        }        continue;      }      final IndexQueryFactoryImpl indexQueryFactory=new IndexQueryFactoryImpl(txn,attributeIndex);      EntryIDSet set=attributeIndex.evaluateBoundedRange(indexQueryFactory,filter1,filter2,buffer,monitor);      if (monitor.isFilterUseEnabled() && set.isDefined()) {        monitor.updateStats(SearchFilter.createANDFilter(rangeList),set.size());      }      results.retainAll(set);      if (isBelowFilterThreshold(results)) {        return results;      }    } else {      remainComps.addAll(rangeList);    }  }  return applyFiltersUntilThreshold(results,remainComps);}  }
class C{  private static void addAttribute(MutableAttributeSet to,Object key,Object value){  Object attr=to.getAttribute(key);  if (attr == null || attr == SimpleAttributeSet.EMPTY) {    to.addAttribute(key,value);  } else {    if (attr instanceof MutableAttributeSet && value instanceof AttributeSet) {      ((MutableAttributeSet)attr).addAttributes((AttributeSet)value);    }  }}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String idName=getStringOptionValue(ARGUMENT_ID_NAME);  String type=getStringOptionValue(ARGUMENT_ID_TYPE);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  IdType idType=convert2IdType(type);  String[] params={realm,type,idName,serviceName};  try {    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);    Set set=amir.getAllowedIdOperations(idType);    if (!set.contains(IdOperation.SERVICE)) {      throw new CLIException(MessageFormat.format(getResourceString("realm-does-not-support-service"),(Object[])params),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_IDREPO_GET_SERVICE_ATTRIBUTES",params);    AMIdentity amid=new AMIdentity(adminSSOToken,idName,idType,realm,null);    Map values=amid.getServiceAttributes(serviceName);    if ((values != null) && !values.isEmpty()) {      String msg=getResourceString("idrepo-service-attribute-result");      String[] arg={"",""};      for (Iterator i=values.keySet().iterator(); i.hasNext(); ) {        String attrName=(String)i.next();        Set attrValues=(Set)values.get(attrName);        arg[0]=attrName;        arg[1]=tokenize(attrValues);        outputWriter.printlnMessage(MessageFormat.format(msg,(Object[])arg));      }    } else {      outputWriter.printlnMessage(getResourceString("idrepo-no-service-attributes"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_IDREPO_GET_SERVICE_ATTRIBUTES",params);  } catch (  IdRepoException e) {    String[] args={realm,type,idName,serviceName,e.getMessage()};    debugError("GetServiceAttributes.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_GET_SERVICE_ATTRIBUTES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,type,idName,serviceName,e.getMessage()};    debugError("GetServiceAttributes.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_GET_SERVICE_ATTRIBUTES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  private boolean isJwtValid(SignedJwt jwt,ClientRegistration clientRegistration){  final SigningHandler signingHandler=signingManager.newHmacSigningHandler(clientRegistration.getClientSecret().getBytes(Charset.forName("UTF-8")));  return jwt == null || !jwt.verify(signingHandler);}  }
class C{  public void clearAccessibleSelection(){  int childCount=getAccessibleChildrenCount();  for (int i=0; i < childCount; i++) {    removeAccessibleSelection(i);  }}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  UrlCollectDao.createTable(db,ifNotExists);  CustomerDao.createTable(db,ifNotExists);  OrderDao.createTable(db,ifNotExists);}  }
class C{  public boolean is_diagonal_left(){  return dir_x == -dir_y;}  }
class C{  private void createPressImageView(View v,int x,int y){  mWindowLayoutParams=new WindowManager.LayoutParams();  mWindowLayoutParams.gravity=Gravity.TOP | Gravity.LEFT;  mWindowLayoutParams.x=x - mPoint2ItemLeft + mOffset2Left;  mWindowLayoutParams.y=y - mPoint2ItemTop + mOffset2Top - mStatusHeight;  mWindowLayoutParams.alpha=0.5f;  mWindowLayoutParams.width=WindowManager.LayoutParams.WRAP_CONTENT;  mWindowLayoutParams.height=WindowManager.LayoutParams.WRAP_CONTENT;  mWindowLayoutParams.flags=WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;  mDragImageView=new ImageView(getContext());  v.setDrawingCacheEnabled(true);  Bitmap bitmap=Bitmap.createBitmap(v.getDrawingCache());  mDragImageView.setImageBitmap(bitmap);  v.destroyDrawingCache();  mWindowManager.addView(mDragImageView,mWindowLayoutParams);}  }
class C{  void deleteAssertion(String assertionID,String artifact){  ArtEntry artEntry=null;  if (artifact != null) {    artEntry=(ArtEntry)artEntryMap.remove(artifact);    String[] data={SAMLUtils.bundle.getString("assertionArtifactRemoved"),artifact};    LogUtils.access(java.util.logging.Level.FINE,LogUtils.ASSERTION_ARTIFACT_REMOVED,data);  }  if (assertionID != null) {    Entry entry=null;    entry=(Entry)idEntryMap.remove(assertionID);    if (entry != null) {      String[] data={SAMLUtils.bundle.getString("assertionRemoved"),assertionID};      LogUtils.access(java.util.logging.Level.FINE,LogUtils.ASSERTION_REMOVED,data);      if (artifact == null) {        String artString=entry.getArtifactString();        if (artString != null) {synchronized (artEntryMap) {            artEntryMap.remove(artString);          }          String[] data2={SAMLUtils.bundle.getString("assertionArtifactRemoved"),artifact};          LogUtils.access(java.util.logging.Level.FINE,LogUtils.ASSERTION_ARTIFACT_REMOVED,data2);        }      }    }  } else {    if ((artEntry != null) && SAMLServiceManager.getRemoveAssertion()) {synchronized (idEntryMap) {        idEntryMap.remove(artEntry.getAssertionID());      }    }  }}  }
class C{  public InvalidPropertiesFormatException(Throwable cause){  super(cause == null ? null : cause.toString());  this.initCause(cause);}  }
class C{  public boolean isAllowCreate(){  if (allowCreate == null) {    return false;  }  return allowCreate.booleanValue();}  }
class C{  public void updateAffiliateProfile(String realm,String entityName,Map values,Set members) throws AMConsoleException {  String[] params={realm,entityName,"IDFF","Affiliate"};  logEvent("ATTEMPT_MODIFY_AFFILIATE_ENTITY_DESCRIPTOR",params);  try {    IDFFMetaManager idffManager=getIDFFMetaManager();    EntityDescriptorElement entityDescriptor=idffManager.getEntityDescriptor(realm,entityName);    AffiliationDescriptorType aDesc=entityDescriptor.getAffiliationDescriptor();    aDesc.setAffiliationOwnerID((String)AMAdminUtils.getValue((Set)values.get(ATTR_AFFILIATE_OWNER_ID)));    aDesc.getAffiliateMember().clear();    Iterator it=members.iterator();    while (it.hasNext()) {      String newMember=(String)it.next();      aDesc.getAffiliateMember().add(newMember);    }    entityDescriptor.setAffiliationDescriptor(aDesc);    idffManager.setEntityDescriptor(realm,entityDescriptor);    logEvent("SUCCEED_MODIFY_AFFILIATE_ENTITY_DESCRIPTOR",params);  } catch (  IDFFMetaException e) {    String strError=getErrorString(e);    String[] paramsEx={realm,entityName,"IDFF","Affiliate",strError};    logEvent("FEDERATION_EXCEPTION_MODIFY_AFFILIATE_ENTITY_DESCRIPTOR",paramsEx);    throw new AMConsoleException(strError);  }}  }
class C{  public RadiusRequestContext(ClientConfig clientConfig,DatagramChannel channel,InetSocketAddress source){  this.channel=channel;  this.source=source;  this.clientConfig=clientConfig;}  }
class C{  public static PdfTargetDictionary createChildTarget(String namedDestination,String annotationIdentifier){  return new PdfTargetDictionary(PdfName.C).put(PdfName.P,new PdfString(namedDestination)).put(PdfName.A,new PdfString(annotationIdentifier));}  }
class C{  private void updateRangesFields(){  fRanges=(mask & ~(1 << 31));  fContextual=((mask & (1 << 31)) != 0);  if (fContextual) {    fRanges=(mask & ~(1 << 31));    fDefaultContextIndex=key;  } else {    fRanges=mask;    fSingleRangeIndex=key;  }}  }
class C{  public static NSObject parse(InputStream in) throws ParseException, IOException {  byte[] buf=PropertyListParser.readAll(in);  in.close();  return parse(buf);}  }
class C{  private void expandTo(int wordIndex){  int wordsRequired=wordIndex + 1;  if (wordsInUse < wordsRequired) {    ensureCapacity(wordsRequired);    wordsInUse=wordsRequired;  }}  }
class C{  public static void addNotificationHandler(String service,NotificationHandler handler) throws AlreadyRegisteredException {  if (notificationHandlers.containsKey(service)) {    throw new AlreadyRegisteredException(PLLBundle.getString("alreadyRegistered") + service);  }  notificationHandlers.put(service,handler);}  }
class C{  private String resolvePathPrefix(){  String fullExecutablePath=this.getClass().getResource("").getPath();  String rootPath=Paths.get(".").toUri().normalize().getPath();  String extractedPath=fullExecutablePath.replace(rootPath,"");  int extractionEndIndex=extractedPath.indexOf("build/");  if (extractionEndIndex <= 0) {    return "";  }  return extractedPath.substring(0,extractionEndIndex);}  }
class C{  public String toXMLString() throws XACMLException {  return toXMLString(true,false);}  }
class C{  public void explicitOp(Context context,JsonValue sourceObject,JsonValue targetObject,Situation situation,ReconAction action,String reconId) throws SynchronizationException {  for (  String linkQualifier : getLinkQualifiers(sourceObject,null,false,context,null)) {    ExplicitSyncOperation linkOp=new ExplicitSyncOperation(this,context);    linkOp.setLinkQualifier(linkQualifier);    linkOp.init(sourceObject,targetObject,situation,action,reconId);    linkOp.sync();  }}  }
class C{  public void vetoableChange(PropertyChangeEvent event) throws PropertyVetoException {  getListener().vetoableChange(event);}  }
class C{  public SAMLException(String s){  super(s);}  }
class C{  protected void resetLocation(){  rec.offset=undoLocation;}  }
class C{  public void testGcdSecondZero(){  byte aBytes[]={15,24,123,57,-15,24,123,57,-15,24,123,57};  byte bBytes[]={0};  int aSign=1;  int bSign=1;  byte rBytes[]={15,24,123,57,-15,24,123,57,-15,24,123,57};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.gcd(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public boolean isNeighbor(Triangle triangle){  int count=0;  for (  Pnt vertex : this)   if (!triangle.contains(vertex))   count++;  return count == 1;}  }
class C{  public String toString(){  if (xmlString == null) {    StringBuffer sb=new StringBuffer();    sb.append("<").append(WSSE).append(":").append(BINARY_SECURITY_TOKEN).append(" ").append(XML_NS).append(":").append(WSSE).append("=\"").append(wsseNS).append("\" ").append(XML_NS).append(":").append(WSU).append("=\"").append(wsuNS).append("\" ").append(WSU).append(":").append(ID).append("=\"").append(id).append("\" ").append(VALUE_TYPE).append("=\"");    if (SOAPBindingConstants.WSF_11_VERSION.equals(wsfVersion)) {      sb.append(WSSEConstants.NS_X509).append("#").append(valueType.getLocalPart()).append("\" ").append(ENCODING_TYPE).append("=\"").append(WSSEConstants.NS_SMS).append("#").append(encodingType.getLocalPart()).append("\">\n");    } else {      sb.append(WSSE).append(":").append(valueType.getLocalPart()).append("\" ").append(ENCODING_TYPE).append("=\"").append(WSSE).append(":").append(encodingType.getLocalPart()).append("\">\n");    }    sb.append(value.toString()).append("\n").append("</").append(WSSE).append(":").append(BINARY_SECURITY_TOKEN).append(">\n");    xmlString=sb.toString();  }  return xmlString;}  }
class C{  public boolean newrow(String rowdata[]){  if (rowdata != null) {    if (maxrows > 0 && nrows >= maxrows) {      atmaxrows=true;      return true;    }    rows.addElement(rowdata);    nrows++;  }  return false;}  }
class C{  public void handleRemoveEntryButtonRequest(RequestInvocationEvent event) throws ModelControlException {  CCActionTable table=(CCActionTable)getChild(AUTH_ENTRY_TABLE);  table.restoreStateData();  Integer[] selected=entryTableModel.getSelectedRows();  acModel=(AuthConfigurationModel)getModel();  acModel.removeAuthEntries(selected);  String xml=acModel.getXMLValue(getRealmName(),getConfigName());  setPageSessionAttribute(ENTRY_LIST,xml);  cacheValues();  tablePopulated=false;  forwardTo();}  }
class C{  public static LocalizableMessage secondsToTimeString(long numSeconds){  if (numSeconds < 60) {    return INFO_TIME_IN_SECONDS.get(numSeconds);  } else   if (numSeconds < 3600) {    long m=numSeconds / 60;    long s=numSeconds % 60;    return INFO_TIME_IN_MINUTES_SECONDS.get(m,s);  } else   if (numSeconds < 86400) {    long h=numSeconds / 3600;    long m=(numSeconds % 3600) / 60;    long s=numSeconds % 3600 % 60;    return INFO_TIME_IN_HOURS_MINUTES_SECONDS.get(h,m,s);  } else {    long d=numSeconds / 86400;    long h=(numSeconds % 86400) / 3600;    long m=(numSeconds % 86400 % 3600) / 60;    long s=numSeconds % 86400 % 3600% 60;    return INFO_TIME_IN_DAYS_HOURS_MINUTES_SECONDS.get(d,h,m,s);  }}  }
class C{  public Exception(String string){  super(string);}  }
class C{  private boolean validateURLPattern(String urlPattern){  if (urlPattern == null)   return false;  if (urlPattern.indexOf('\n') >= 0 || urlPattern.indexOf('\r') >= 0) {    return false;  }  if (urlPattern.equals("")) {    return true;  }  if (urlPattern.startsWith("*.")) {    if (urlPattern.indexOf('/') < 0) {      checkUnusualURLPattern(urlPattern);      return true;    } else     return false;  }  if ((urlPattern.startsWith("/")) && (urlPattern.indexOf("*.") < 0)) {    checkUnusualURLPattern(urlPattern);    return true;  } else   return false;}  }
class C{  public void append(byte[] bytes){  append(bytes,0,bytes.length);}  }
class C{  protected void validateIsNotWebsocketUpgradeHttpResponse(IHttpResponse response){  String upgradeHeader=response.getHeaderFirst(HttpHeaders.UPGRADE);  assertNull(upgradeHeader);  String websocketAcceptHeader=response.getHeaderFirst(HttpHeadersExtra.SEC_WEBSOCKET_ACCEPT);  assertNull(websocketAcceptHeader);}  }
class C{  static int drawComposedText(View view,AttributeSet attr,Graphics g,int x,int y,int p0,int p1) throws BadLocationException {  Graphics2D g2d=(Graphics2D)g;  AttributedString as=(AttributedString)attr.getAttribute(StyleConstants.ComposedTextAttribute);  as.addAttribute(TextAttribute.FONT,g.getFont());  if (p0 >= p1)   return x;  AttributedCharacterIterator aci=as.getIterator(null,p0,p1);  return x + (int)SwingUtilities2.drawString(getJComponent(view),g2d,aci,x,y);}  }
class C{  public Header nextHeader() throws NoSuchElementException {  final int current=this.currentIndex;  if (current < 0) {    throw new NoSuchElementException("Iteration already finished.");  }  this.currentIndex=findNext(current);  return this.allHeaders[current];}  }
class C{  public void animateOut(){  animate(OUT);}  }
class C{  public HopImpl(String hostName,int portNumber,String trans){  host=hostName;  if (host.indexOf(":") >= 0)   if (host.indexOf("[") < 0)   host="[" + host + "]";  port=portNumber;  transport=trans;}  }
class C{  public URI toURI() throws URISyntaxException {  return new URI(toExternalForm());}  }
class C{  public void printStackTrace(PrintStream ps){  ps.println(fetchStackTrace());}  }
class C{  public void error(SAXParseException e) throws SAXException {}  }
class C{  protected void fireActionPerformed(ActionEvent event){  Object[] listeners=listenerList.getListenerList();  ActionEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ActionListener.class) {      if (e == null) {        String actionCommand=event.getActionCommand();        if (actionCommand == null) {          actionCommand=getActionCommand();        }        e=new ActionEvent(AbstractButton.this,ActionEvent.ACTION_PERFORMED,actionCommand,event.getWhen(),event.getModifiers());      }      ((ActionListener)listeners[i + 1]).actionPerformed(e);    }  }}  }
class C{  private static void checkNotNull(Object v){  if (v == null)   throw new NullPointerException();}  }
class C{  public Builder url(String url){  if (url == null)   throw new IllegalArgumentException("url == null");  if (url.regionMatches(true,0,"ws:",0,3)) {    url="http:" + url.substring(3);  } else   if (url.regionMatches(true,0,"wss:",0,4)) {    url="https:" + url.substring(4);  }  HttpUrl parsed=HttpUrl.parse(url);  if (parsed == null)   throw new IllegalArgumentException("unexpected url: " + url);  return url(parsed);}  }
class C{  public DefaultTreeModel(TreeNode root,boolean asksAllowsChildren){  super();  this.root=root;  this.asksAllowsChildren=asksAllowsChildren;}  }
class C{  public int hashCode(){  if (myhash == -1) {    myhash=timestamp.hashCode() + signerCertPath.hashCode();  }  return myhash;}  }
class C{  @Override public boolean valueIsAcceptable(final String valueString,final LocalizableMessageBuilder invalidReason){  for (  final V allowedValue : allowedValues) {    if (allowedValue.toString().equalsIgnoreCase(valueString)) {      return true;    }  }  invalidReason.append(ERR_MCARG_VALUE_NOT_ALLOWED.get(longIdentifier,valueString));  return false;}  }
class C{  private static void debugPrintln(String msg){  if (DEBUG) {    System.err.println("JAXP: " + msg);  }}  }
class C{  @Override public boolean append(freert.planar.PlaShape p_shape,java.util.Locale p_locale){  PrintableShape transformed_shape=coordinate_transform.board_to_user(p_shape,p_locale);  if (transformed_shape == null)   return false;  return append(transformed_shape.toString());}  }
class C{  public void enableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glEnableVertexAttribArray(location);}  }
class C{  public void readConfiguration() throws IOException, SecurityException {  checkPermission();  String cname=System.getProperty("java.util.logging.config.class");  if (cname != null) {    try {      try {        Class<?> clz=ClassLoader.getSystemClassLoader().loadClass(cname);        clz.newInstance();        return;      } catch (      ClassNotFoundException ex) {        Class<?> clz=Thread.currentThread().getContextClassLoader().loadClass(cname);        clz.newInstance();        return;      }    } catch (    Exception ex) {      System.err.println("Logging configuration class \"" + cname + "\" failed");      System.err.println("" + ex);    }  }  String fname=System.getProperty("java.util.logging.config.file");  if (fname == null) {    fname=System.getProperty("java.home");    if (fname == null) {      throw new Error("Can't find java.home ??");    }    File f=new File(fname,"lib");    f=new File(f,"logging.properties");    fname=f.getCanonicalPath();  }  try (final InputStream in=new FileInputStream(fname)){    final BufferedInputStream bin=new BufferedInputStream(in);    readConfiguration(bin);  } }  }
class C{  @Override public void newLine() throws IOException {  write(System.lineSeparator());}  }
class C{  public static List<String> matchAll(String self,String pattern) throws Exception {  return matchAll(self,pattern,-1);}  }
class C{  public void requestSecondsUntilAuthenticationFailureUnlock(){  operations.add(PasswordPolicyStateOperationType.GET_SECONDS_UNTIL_AUTHENTICATION_FAILURE_UNLOCK);}  }
class C{  public BackgroundTaskThread(BackgroundTask<T> backgroundTask){  this.backgroundTask=backgroundTask;}  }
class C{  protected IntHashtable readKerning(int unitsPerEm) throws java.io.IOException {  int table_location[];  table_location=tables.get("kern");  IntHashtable kerning=new IntHashtable();  if (table_location == null) {    return kerning;  }  raf.seek(table_location[0] + 2);  int nTables=raf.readUnsignedShort();  int checkpoint=table_location[0] + 4;  int length=0;  for (int k=0; k < nTables; k++) {    checkpoint+=length;    raf.seek(checkpoint);    raf.skipBytes(2);    length=raf.readUnsignedShort();    int coverage=raf.readUnsignedShort();    if ((coverage & 0xfff7) == 0x0001) {      int nPairs=raf.readUnsignedShort();      raf.skipBytes(6);      for (int j=0; j < nPairs; ++j) {        int pair=raf.readInt();        int value=raf.readShort() * TrueTypeFont.UNITS_NORMALIZATION / unitsPerEm;        kerning.put(pair,value);      }    }  }  return kerning;}  }
class C{  public EncryptedID encrypt(Key recipientPublicKey,String dataEncAlgorithm,int dataEncStrength,String recipientEntityID) throws SAML2Exception {  Element el=EncManager.getEncInstance().encrypt(toXMLString(true,true),recipientPublicKey,dataEncAlgorithm,dataEncStrength,recipientEntityID,"EncryptedID");  return AssertionFactory.getInstance().createEncryptedID(el);}  }
class C{  public static RequirementsBuilder newEmptyObject(){  return new RequirementsBuilder(BuilderType.EMPTY_OBJECT,null);}  }
class C{  public void add(int index,E element){  rangeCheckForAdd(index);  ensureCapacityInternal(size + 1);  System.arraycopy(elementData,index,elementData,index + 1,size - index);  elementData[index]=element;  size++;}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws SAXException {  flushStartDoc();  m_resultContentHandler.startPrefixMapping(prefix,uri);}  }
class C{  public String encode(){  return encode(new StringBuilder()).toString();}  }
class C{  public void toChars(){  if (!charC.isNull()) {    type=T_CHARS;    return;  }  toString();  type=T_CHARS;  char cc[]=strValue.toCharArray();  charC.setChars(cc,0,cc.length);}  }
class C{  public static String toGreekAlphabetNumber(int number,boolean upperCase){  return upperCase ? toGreekAlphabetNumberUpperCase(number) : toGreekAlphabetNumberLowerCase(number);}  }
class C{  protected void verifyAndLinkGroupToRole(SSOToken token,Guid[] membersGuid,String groupDN) throws AMException {  DN dn=DN.valueOf(groupDN);  String roleName=getRoleFromGroupDN(dn);  if (roleName != null) {    String orgDN=dn.parent().parent().toString();    String roleDN=NamingAttributeManager.getNamingAttribute(AMObject.ROLE) + "=" + roleName+ ","+ orgDN;    if (debug.messageEnabled()) {      debug.message("Compliance.verifyAndLinkGroupToRole" + " Linking group: " + groupDN + " to role :"+ roleDN);    }    try {      ManagedRole role=(ManagedRole)UMSObject.getObject(token,new Guid(roleDN));      role.addMembers(membersGuid);    } catch (    EntryNotFoundException ex) {      debug.error("Compliance.verifyAndLinkGroupToRole: Admin " + "groups are missing");    }catch (    UMSException ue) {      debug.error("Compliance.verifyAndLinkGroupToRole():",ue);      Object args[]={roleDN};      throw new AMException(AMSDKBundle.getString("972",args),"771",args);    }  }}  }
class C{  public int isAllowed(AuthorizationDecisionQuery authZQuery,String destID){  if (authZQuery == null) {    SAMLUtils.debug.error("AssertionManager.isAllowed: null input.");    return AuthorizationDecisionStatement.DecisionType.INDETERMINATE;  }  Assertion assertion=null;  try {    assertion=getAuthorizationDecisionAssertion(authZQuery,destID,false);  } catch (  SAMLException e) {    SAMLUtils.debug.error("AssertionManager.isAllowed: exception thrown" + " when trying to get an assertion from authZQuery. ",e);    return AuthorizationDecisionStatement.DecisionType.INDETERMINATE;  }  if (assertion == null) {    return AuthorizationDecisionStatement.DecisionType.INDETERMINATE;  }  Set statements=assertion.getStatement();  if ((statements != null) && (!statements.isEmpty())) {    Iterator iter=statements.iterator();    while (iter.hasNext()) {      Statement statement=(Statement)iter.next();      if (statement.getStatementType() == Statement.AUTHORIZATION_DECISION_STATEMENT) {        return ((AuthorizationDecisionStatement)statement).getDecision();      }    }    SAMLUtils.debug.error("AssertionManager.isAllowed: no " + "authZstatement in assertion.");    return AuthorizationDecisionStatement.DecisionType.INDETERMINATE;  } else {    SAMLUtils.debug.error("AssertionManager.isAllowed: no statements in" + " assertion.");    return AuthorizationDecisionStatement.DecisionType.INDETERMINATE;  }}  }
class C{  public AsfExtHeaderReader(final List<Class<? extends ChunkReader>> toRegister,final boolean readChunkOnce){  super(toRegister,readChunkOnce);}  }
class C{  public static boolean isXML11NameStart(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NAME_START) != 0) || (0x10000 <= c && c < 0xF0000);}  }
class C{  public void clear(){  if (relations != null) {    relations.removeAllElements();  }}  }
class C{  void calculateColumnRequirements(int axis){  for (  SizeRequirements req : columnRequirements) {    req.minimum=0;    req.preferred=0;    req.maximum=Integer.MAX_VALUE;  }  Container host=getContainer();  if (host != null) {    if (host instanceof JTextComponent) {      skipComments=!((JTextComponent)host).isEditable();    } else {      skipComments=true;    }  }  boolean hasMultiColumn=false;  int nrows=getRowCount();  for (int i=0; i < nrows; i++) {    RowView row=getRow(i);    int col=0;    int ncells=row.getViewCount();    for (int cell=0; cell < ncells; cell++) {      View cv=row.getView(cell);      if (skipComments && !(cv instanceof CellView)) {        continue;      }      for (; row.isFilled(col); col++)       ;      int rowSpan=getRowsOccupied(cv);      int colSpan=getColumnsOccupied(cv);      if (colSpan == 1) {        checkSingleColumnCell(axis,col,cv);      } else {        hasMultiColumn=true;        col+=colSpan - 1;      }      col++;    }  }  if (hasMultiColumn) {    for (int i=0; i < nrows; i++) {      RowView row=getRow(i);      int col=0;      int ncells=row.getViewCount();      for (int cell=0; cell < ncells; cell++) {        View cv=row.getView(cell);        if (skipComments && !(cv instanceof CellView)) {          continue;        }        for (; row.isFilled(col); col++)         ;        int colSpan=getColumnsOccupied(cv);        if (colSpan > 1) {          checkMultiColumnCell(axis,col,colSpan,cv);          col+=colSpan - 1;        }        col++;      }    }  }}  }
class C{  public void actionPerformed(ActionEvent e){  start.actionPerformed(e);  end.actionPerformed(e);}  }
class C{  protected int parsePageNumber(String uri){  if (uri == null || uri.length() == 0)   return -1;  final URI parsed;  try {    parsed=new URI(uri);  } catch (  URISyntaxException e) {    return -1;  }  final String param=UrlUtils.getParam(parsed,PARAM_PAGE);  if (param == null || param.length() == 0)   return -1;  try {    return Integer.parseInt(param);  } catch (  NumberFormatException nfe) {    return -1;  }}  }
class C{  public int countTokens(){  int count=0;  int currpos=currentPosition;  while (currpos < maxPosition) {    int start=currpos;    while ((currpos < maxPosition) && Character.isLetterOrDigit(str.charAt(currpos))) {      currpos++;    }    if ((start == currpos) && (Character.isLetterOrDigit(str.charAt(currpos)) == false)) {      currpos++;    }    count++;  }  return count;}  }
class C{  protected IdentifiedException(LocalizableMessage message,Throwable cause){  super(message,cause);}  }
class C{  public void testInvalidColorFormatType(){  try {    mRichTextView.colorSpan(0,5,null,Color.BLUE);    fail();  } catch (  IllegalArgumentException iae) {  }}  }
class C{  public void saveStore(Store store,Handler<AsyncResult<Void>> resultHandler){  delegate.saveStore(store,resultHandler);}  }
class C{  public MemoryUserRule(){}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public synchronized void shutdown(){  if (!destroyed) {    destroyed=true;    SSL.freeBIO(networkBIO);    SSL.freeSSL(ssl);    ssl=networkBIO=0;    isInboundDone=isOutboundDone=engineClosed=true;  }}  }
class C{  protected String paramString(){  String reorderingAllowedString=(reorderingAllowed ? "true" : "false");  String resizingAllowedString=(resizingAllowed ? "true" : "false");  String updateTableInRealTimeString=(updateTableInRealTime ? "true" : "false");  return super.paramString() + ",draggedDistance=" + draggedDistance+ ",reorderingAllowed="+ reorderingAllowedString+ ",resizingAllowed="+ resizingAllowedString+ ",updateTableInRealTime="+ updateTableInRealTimeString;}  }
class C{  public void testConstructor_II() throws Exception {  mySSLServerSocket ssl=new mySSLServerSocket(0,1);  int[] port_invalid={-1,Integer.MIN_VALUE,Integer.MAX_VALUE};  for (int i=0; i < port_invalid.length; i++) {    try {      new mySSLServerSocket(port_invalid[i],1);      fail("IllegalArgumentException should be thrown");    } catch (    IllegalArgumentException expected) {    }  }  try {    new mySSLServerSocket(ssl.getLocalPort(),1);    fail("IOException should be thrown");  } catch (  IOException expected) {  }}  }
class C{  public InvalidConfigurationException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public FormatFlagsConversionMismatchException(String f,char c){  if (f == null)   throw new NullPointerException();  this.f=f;  this.c=c;}  }
class C{  public void handleButtonDownloadCertRequest(RequestInvocationEvent event) throws ModelControlException {  RequestContext reqContext=event.getRequestContext();  HttpServletResponse resp=reqContext.getResponse();  String cert=(String)psModel.getValue("PubKey");  ServletOutputStream op=null;  try {    int length=0;    op=resp.getOutputStream();    resp.setContentType("application/octet-stream");    resp.setContentLength(cert.length());    resp.setHeader("Content-Disposition","attachment; filename=\"" + "OpenSSOCert.txt" + "\"");    int BUFSIZE=cert.length();    byte[] bbuf=new byte[BUFSIZE];    InputStream is=new ByteArrayInputStream(cert.getBytes());    DataInputStream in=new DataInputStream(is);    while ((in != null) && ((length=in.read(bbuf)) != -1)) {      op.write(bbuf,0,length);    }    in.close();    op.flush();  } catch (  IOException ex) {    debug.error("ConfigureGoogleAppsCompleteViewBean.uploadCert",ex);    setInlineAlertMessage(CCAlert.TYPE_ERROR,"configure.google.apps.complete.certificate.download.error",ex.getMessage());  } finally {    if (op != null) {      try {        op.close();      } catch (      IOException ex) {        debug.error("ConfigureGoogleAppsCompleteViewBean.uploadCert",ex);        setInlineAlertMessage(CCAlert.TYPE_ERROR,"configure.google.apps.complete.certificate.download.error",ex.getMessage());      }    }  }}  }
class C{  public StringVector(int blocksize){  m_blocksize=blocksize;  m_mapSize=blocksize;  m_map=new String[blocksize];}  }
class C{  void addFilter(InputFilter filter){  if (filter == null) {    throw new NullPointerException(sm.getString("iib.filter.npe"));  }  InputFilter[] newFilterLibrary=new InputFilter[filterLibrary.length + 1];  for (int i=0; i < filterLibrary.length; i++) {    newFilterLibrary[i]=filterLibrary[i];  }  newFilterLibrary[filterLibrary.length]=filter;  filterLibrary=newFilterLibrary;  activeFilters=new InputFilter[filterLibrary.length];}  }
class C{  public void test_ConstructorLjava_io_FileI() throws IOException {  zfile.close();  File file=new File(tempFileName);  ZipFile zip=new ZipFile(file,ZipFile.OPEN_DELETE | ZipFile.OPEN_READ);  zip.close();  assertTrue("Zip should not exist",!file.exists());  file=new File(tempFileName);  file.delete();  try {    zip=new ZipFile(file,ZipFile.OPEN_READ);    fail("IOException expected");  } catch (  IOException ee) {  }  file=new File(tempFileName);  try {    zip=new ZipFile(file,-1);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException ee) {  }}  }
class C{  public static String toOctalString(long v){  return IntegralToString.longToOctalString(v);}  }
class C{  public Set createUsers(Map usersMap,Set serviceNames) throws AMException, SSOException {  Set usersSet=new HashSet();  Set objectClasses=null;  if ((serviceNames != null) && (!serviceNames.isEmpty())) {    objectClasses=AMServiceUtils.getServiceObjectClasses(token,serviceNames);  }  Iterator iter=usersMap.keySet().iterator();  while (iter.hasNext()) {    String userName=(String)iter.next();    String userDN=AMNamingAttrManager.getNamingAttr(USER) + "=" + userName+ ","+ entryDN;    AMUserImpl user=new AMUserImpl(super.token,userDN);    Map userMap=(Map)usersMap.get(userName);    user.setAttributes(userMap);    if (objectClasses != null && objectClasses.size() > 0) {      Set existingOC=(Set)userMap.get("objectclass");      if (existingOC != null && !existingOC.isEmpty())       objectClasses=AMCommonUtils.combineOCs(objectClasses,existingOC);      user.setAttribute("objectclass",objectClasses);    }    user.create();    usersSet.add(user);  }  return usersSet;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatainsertdatanomodificationallowederrEE.class,args);}  }
class C{  public EventObject(Object source){  if (source == null)   throw new IllegalArgumentException("null source");  this.source=source;}  }
class C{  public void validate(ClientRegistration clientRegistration,Set<String> requestedResponseTypes,OAuth2ProviderSettings providerSettings,OAuth2Request request) throws InvalidRequestException, UnsupportedResponseTypeException, ServerException {  if (requestedResponseTypes == null || requestedResponseTypes.isEmpty()) {    throw new UnsupportedResponseTypeException("Response type is not supported.");  }  final UrlLocation urlLocation=Utils.getRequiredUrlLocation(requestedResponseTypes,clientRegistration);  final Map<String,ResponseTypeHandler> allowedResponseTypes=providerSettings.getAllowedResponseTypes();  if (allowedResponseTypes == null || allowedResponseTypes.isEmpty()) {    throw new InvalidRequestException("Invalid Response Type.",urlLocation);  }  if (!allowedResponseTypes.keySet().containsAll(requestedResponseTypes)) {    throw new UnsupportedResponseTypeException("Response type is not supported.",urlLocation);  }  final Set<String> clientAllowedResponseTypes=clientRegistration.getAllowedResponseTypes();  boolean cleared=false;  for (  String clientAllowedResponseType : clientAllowedResponseTypes) {    if (Utils.splitResponseType(clientAllowedResponseType).containsAll(requestedResponseTypes) && Utils.splitResponseType(clientAllowedResponseType).size() == requestedResponseTypes.size()) {      cleared=true;      break;    }  }  if (!cleared) {    throw new UnsupportedResponseTypeException("Client does not support this response type.",urlLocation);  }  validateForOAuth2(clientRegistration,requestedResponseTypes);  Set<String> requestedScopes=Utils.splitScope(request.<String>getParameter(SCOPE));  if (Utils.isOpenIdConnectClient(clientRegistration) && requestedScopes.contains(OPENID)) {    validateOpenidResponseTypes(clientRegistration,requestedResponseTypes);  }}  }
class C{  public static Event35Log.Builder newBuilder(Event35Log.Builder other){  return new Event35Log.Builder(other);}  }
class C{  public static ArgumentException missingSeparatorInPropertyModification(String arg){  LocalizableMessage msg=ERR_DSCFG_ERROR_NO_SEPARATOR_IN_PROPERTY_MOD.get(arg);  return new ArgumentException(msg);}  }
class C{  public void trackPendingDialogCall(FacebookDialog.PendingCall pendingCall){  if (pendingFacebookDialogCallId != null) {    Log.i("Facebook","Tracking new app call while one is still pending; canceling pending call.");    cancelPendingAppCall(null);  }  if (pendingCall != null) {    pendingFacebookDialogCallId=pendingCall.getCallId();    pendingFacebookDialogCallStore.trackPendingCall(pendingCall);  }}  }
class C{  private long overflowFree(long delay){  Delayed head=(Delayed)super.getQueue().peek();  if (head != null) {    long headDelay=head.getDelay(NANOSECONDS);    if (headDelay < 0 && (delay - headDelay < 0))     delay=Long.MAX_VALUE + headDelay;  }  return delay;}  }
class C{  private boolean continueLine(String line){  int slashCount=0;  int index=line.length() - 1;  while ((index >= 0) && (line.charAt(index--) == '\\')) {    slashCount++;  }  return (slashCount % 2 == 1);}  }
class C{  public void removeObsoletePreviews(ArrayList<Object> list){  Utilities.assertWorkerThread();  LongSparseArray<HashSet<String>> validPackages=new LongSparseArray<>();  for (  Object obj : list) {    final UserHandleCompat user;    final String pkg;    if (obj instanceof ResolveInfo) {      user=UserHandleCompat.myUserHandle();      pkg=((ResolveInfo)obj).activityInfo.packageName;    } else {      LauncherAppWidgetProviderInfo info=(LauncherAppWidgetProviderInfo)obj;      user=mManager.getUser(info);      pkg=info.provider.getPackageName();    }    final long userId=mUserManager.getSerialNumberForUser(user);    HashSet<String> packages=validPackages.get(userId);    if (packages == null) {      packages=new HashSet<>();      validPackages.put(userId,packages);    }    packages.add(pkg);  }  LongSparseArray<HashSet<String>> packagesToDelete=new LongSparseArray<>();  Cursor c=null;  try {    c=mDb.getReadableDatabase().query(CacheDb.TABLE_NAME,new String[]{CacheDb.COLUMN_USER,CacheDb.COLUMN_PACKAGE,CacheDb.COLUMN_LAST_UPDATED,CacheDb.COLUMN_VERSION},null,null,null,null,null);    while (c.moveToNext()) {      long userId=c.getLong(0);      String pkg=c.getString(1);      long lastUpdated=c.getLong(2);      long version=c.getLong(3);      HashSet<String> packages=validPackages.get(userId);      if (packages != null && packages.contains(pkg)) {        long[] versions=getPackageVersion(pkg);        if (versions[0] == version && versions[1] == lastUpdated) {          continue;        }      }      packages=packagesToDelete.get(userId);      if (packages == null) {        packages=new HashSet<>();        packagesToDelete.put(userId,packages);      }      packages.add(pkg);    }    for (int i=0; i < packagesToDelete.size(); i++) {      long userId=packagesToDelete.keyAt(i);      UserHandleCompat user=mUserManager.getUserForSerialNumber(userId);      for (      String pkg : packagesToDelete.valueAt(i)) {        removePackage(pkg,user,userId);      }    }  } catch (  SQLException e) {    Log.e(TAG,"Error updatating widget previews",e);  } finally {    if (c != null) {      c.close();    }  }}  }
class C{  public boolean equals(Object object){  return super.equals(object) && object instanceof CopiesSupported;}  }
class C{  public static SearchFilter createEqualityFilter(AttributeType attributeType,ByteString assertionValue){  return new SearchFilter(FilterType.EQUALITY,null,null,attributeType,null,assertionValue,null,null,null,null,false);}  }
class C{  protected void initializeRequestContext(RequestContext requestContext){  super.initializeRequestContext(requestContext);  ViewBeanManager viewBeanManager=new ViewBeanManager(requestContext,PACKAGE_NAME);  ((RequestContextImpl)requestContext).setViewBeanManager(viewBeanManager);}  }
class C{  protected MediaTray(int value){  super(value);}  }
class C{  TemplateEntry nextEntry(){  if (!hasNext()) {    throw new NoSuchElementException();  }  final TemplateEntry entry=nextEntry;  nextEntry=null;  return entry;}  }
class C{  public boolean isRightClick(){  return click.isRightClick();}  }
class C{  public Node item(int i){  if (getLength() == 0 || i >= m_avts.size())   return null; else   return new Attribute(((AVT)m_avts.get(i)),ElemLiteralResult.this);}  }
class C{  public PolicyEvaluationException(Throwable nestedException){  super(nestedException);  reqId="-1";}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  public LegacyServer(String svr){  StringTokenizer st=new StringTokenizer(svr,"|");  String name=st.nextToken();  String id=st.nextToken();  sites=new HashSet();  while (st.hasMoreTokens()) {    sites.add(st.nextToken());  }}  }
class C{  Builder reencodeForUri(){  for (int i=0, size=encodedPathSegments.size(); i < size; i++) {    String pathSegment=encodedPathSegments.get(i);    encodedPathSegments.set(i,canonicalize(pathSegment,PATH_SEGMENT_ENCODE_SET_URI,true,false,true));  }  if (encodedQueryNamesAndValues != null) {    for (int i=0, size=encodedQueryNamesAndValues.size(); i < size; i++) {      String component=encodedQueryNamesAndValues.get(i);      if (component != null) {        encodedQueryNamesAndValues.set(i,canonicalize(component,QUERY_COMPONENT_ENCODE_SET_URI,true,true,true));      }    }  }  if (encodedFragment != null) {    encodedFragment=canonicalize(encodedFragment,FRAGMENT_ENCODE_SET_URI,true,false,false);  }  return this;}  }
class C{  public void toString(StringBuilder buffer){  buffer.append("ConfigChangeResult(result=");  buffer.append(resultCode);  buffer.append(", adminActionRequired=");  buffer.append(adminActionRequired);  buffer.append(", messages={");  Utils.joinAsString(buffer,",",messages);  buffer.append("})");}  }
class C{  public AdministrationDataSync(InternalClientConnection internalConnection){  this.internalConnection=internalConnection;}  }
class C{  public char previous(){  if (pos > 0) {    pos--;    return chars[pos];  } else {    pos=0;    return DONE;  }}  }
class C{  public void addUniqueAttribute(String qName,String value,int flags) throws SAXException {}  }
class C{  public void addPropertyChangeListener(String propertyName,PropertyChangeListener listener){  if (listener == null || propertyName == null) {    return;  }  listener=this.map.extract(listener);  if (listener != null) {    this.map.add(propertyName,listener);  }}  }
class C{  public static FontProgram createFont(byte[] ttc,int ttcIndex,boolean cached) throws java.io.IOException {  String fontKey=null;  if (cached) {    fontKey=Integer.toString(ArrayUtil.hashCode(ttc)) + Integer.toString(ttcIndex);    FontProgram fontFound=FontCache.getFont(fontKey);    if (fontFound != null) {      return fontFound;    }  }  FontProgram fontBuilt=new TrueTypeFont(ttc,ttcIndex);  return cached ? FontCache.saveFont(fontBuilt,fontKey) : fontBuilt;}  }
class C{  private void remove(Thread t){synchronized (this) {    if (destroyed) {      return;    }    for (int i=0; i < nthreads; i++) {      if (threads[i] == t) {        System.arraycopy(threads,i + 1,threads,i,--nthreads - i);        threads[nthreads]=null;        break;      }    }  }}  }
class C{  public XPathFactoryConfigurationException(String message){  super(message);}  }
class C{  @Override protected void activate() throws SQLException {  setClosedInternal(false);  if (getConnectionInternal() != null) {    getConnectionInternal().addTrace(this);  }  super.activate();}  }
class C{  public void testInducedFinalization() throws Exception {  AtomicBoolean finalized1=new AtomicBoolean();  AtomicBoolean finalized2=new AtomicBoolean();  createFinalizableObject(finalized1);  createFinalizableObject(finalized2);  FinalizationTester.induceFinalization();  if (!finalized1.get() || !finalized2.get()) {    fail("not yet finalized: " + finalized1.get() + " "+ finalized2.get());  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList emList;  Node emNode;  Node textNode;  NodeList textList;  int length;  doc=(Document)load("hc_staff",false);  emList=doc.getElementsByTagName("em");  emNode=emList.item(2);  textNode=emNode.getFirstChild();  textList=textNode.getChildNodes();  length=(int)textList.getLength();  assertEquals("length",0,length);}  }
class C{  public GrizzlyLDAPConnectionFactory(final String host,final int port,final Options options){  this.transport=DEFAULT_TRANSPORT.acquireIfNull(options.get(GRIZZLY_TRANSPORT));  this.host=host;  this.port=port;  this.options=options;  this.clientFilter=new LDAPClientFilter(options.get(LDAP_DECODE_OPTIONS),0);  this.defaultFilterChain=buildFilterChain(this.transport.get().getProcessor(),clientFilter);}  }
class C{  private void disconnectAndRemove(ConnectionRecord cr){  connectionTable.remove(makeKeyFromRecord(cr));  cr.conn.close();}  }
class C{  public static boolean isDeprecated(int mod){  return (mod & ACC_DEPRECATED) != 0;}  }
class C{  public static boolean isXML11ValidLiteral(int c){  return ((c < 0x10000 && ((XML11CHARS[c] & MASK_XML11_VALID) != 0 && (XML11CHARS[c] & MASK_XML11_CONTROL) == 0)) || (0x10000 <= c && c <= 0x10FFFF));}  }
class C{  public boolean isPluginEnabled(String name){  Plugin plugin=getPlugin(name);  return isPluginEnabled(plugin);}  }
class C{  private static void checkName(String zoneId){  int n=zoneId.length();  if (n < 2) {    throw new DateTimeException("Invalid ID for region-based ZoneId, invalid format: " + zoneId);  }  for (int i=0; i < n; i++) {    char c=zoneId.charAt(i);    if (c >= 'a' && c <= 'z')     continue;    if (c >= 'A' && c <= 'Z')     continue;    if (c == '/' && i != 0)     continue;    if (c >= '0' && c <= '9' && i != 0)     continue;    if (c == '~' && i != 0)     continue;    if (c == '.' && i != 0)     continue;    if (c == '_' && i != 0)     continue;    if (c == '+' && i != 0)     continue;    if (c == '-' && i != 0)     continue;    throw new DateTimeException("Invalid ID for region-based ZoneId, invalid format: " + zoneId);  }}  }
class C{  public BarcodeQRCode(String content){  this(content,null);}  }
class C{  public UninstallerArgumentParser(String mainClassName,LocalizableMessage toolDescription,boolean longArgumentsCaseSensitive){  super(mainClassName,toolDescription,longArgumentsCaseSensitive);  setShortToolDescription(REF_SHORT_DESC_UNINSTALL.get());  setVersionHandler(new DirectoryServerVersionHandler());}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  if (isFinishing()) {    clean();  }}  }
class C{  public static boolean persistAMCookie(Hashtable reqDataHash){  String globalPersistCookieString=SystemProperties.get(Constants.PERSIST_AM_COOKIE);  boolean globalPersist=Boolean.valueOf(globalPersistCookieString).booleanValue();  if (globalPersist) {    if (utilDebug.messageEnabled()) {      utilDebug.message("AuthUtils.persistAMCookie(): Set globally ");    }    return true;  }  boolean persistCookie=false;  String persistCookieString=(String)reqDataHash.get(Constants.PERSIST_AM_COOKIE);  String allowRequestPersistString=SystemProperties.get(Constants.ALLOW_PERSIST_AM_COOKIE);  boolean allowRequestPersist=Boolean.valueOf(allowRequestPersistString).booleanValue();  if (allowRequestPersist && (persistCookieString != null)) {    persistCookie=(Boolean.valueOf(persistCookieString)).booleanValue();  }  if (utilDebug.messageEnabled()) {    utilDebug.message("AuthUtils.persistAMCookie(): " + persistCookie);  }  return persistCookie;}  }
class C{  public static <R,A,B>Future<R> chain(A input,Function<A,Future<B>> operation1,Function<B,Future<R>> operation2){  Future<R> future=Future.future();  operation1.apply(input).setHandler(null);  return future;}  }
class C{  public void endElement(String name) throws SAXException {}  }
class C{  HeartbeatMsg(byte[] in) throws DataFormatException {  if (in.length != 1 || in[0] != MSG_TYPE_HEARTBEAT) {    throw new DataFormatException("Input is not a valid Heartbeat Message.");  }}  }
class C{  public ConfigManagerException(String s){  super(s);}  }
class C{  public void push(boolean val){  this.push(new BaseTypeWrapper(val));}  }
class C{  private synchronized void write(String msg){  try {    if (debugFile == null || (debugDirectory != null && !debugDirectory.equals(SystemPropertiesManager.get(IDPDiscoveryConstants.DEBUG_DIR)))) {      initService();      FileOutputStream fos=new FileOutputStream(debugDirectory + File.separator + debugName,true);      debugFile=new PrintWriter(new BufferedWriter(new OutputStreamWriter(fos,"UTF8")),true);      debugFile.println("******************************************************");    }    debugFile.println(msg);  } catch (  IOException e) {    System.err.println(msg);    debugLevel=Debug.OFF;  }}  }
class C{  public static List<Object> evaluate(List<Object> list,Bindings bindings) throws ExpressionException {  List<Object> evaluatedList=new ArrayList<>();  for (  Object object : list) {    evaluatedList.add(evaluate(object,bindings));  }  return evaluatedList;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childSubstring;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      childSubstring=child.substringData(10,-3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  private void createLayout(){  GridBagConstraints gbc=new GridBagConstraints();  CardLayout cardLayout=new CardLayout();  mainPanel=new JPanel(cardLayout);  mainPanel.setOpaque(false);  noEntryPanel.setMessage(INFO_CTRL_PANEL_NO_SCHEMA_ITEM_SELECTED_LABEL.get());  mainPanel.add(noEntryPanel,NOTHING_SELECTED);  StatusGenericPanel[] panelsWithScroll={standardObjectClassPanel,configurationObjectClassPanel,standardAttributePanel,configurationAttributePanel,matchingRulePanel,attributeSyntaxPanel};  StatusGenericPanel[] panelsWithNoScroll={customObjectClassPanel,customAttributePanel};  for (  StatusGenericPanel panel : panelsWithScroll) {    mainPanel.add(Utilities.createBorderLessScrollBar(panel),panel.getTitle().toString());  }  for (  StatusGenericPanel panel : panelsWithNoScroll) {    mainPanel.add(panel,panel.getTitle().toString());  }  cardLayout.show(mainPanel,NOTHING_SELECTED);  gbc.gridx=0;  gbc.gridy=0;  gbc.weightx=1.0;  gbc.weighty=1.0;  gbc.fill=GridBagConstraints.BOTH;  add(mainPanel,gbc);}  }
class C{  public static boolean isScreenW(int widthDp){  DisplayMetrics displayMetrics=Resources.getSystem().getDisplayMetrics();  float screenWidth=displayMetrics.widthPixels / displayMetrics.density;  return screenWidth >= widthDp;}  }
class C{  public void onUsers(@NotNull List<TLAbsUser> users){  if ((this.temporalUsers.size() + users.size()) > MAXTEMPORALUSERS) {    this.temporalUsers.clear();  }  users.stream().forEach(null);  users.forEach(null);}  }
class C{  private int mulsub(int[] q,int[] a,int x,int len,int offset){  long xLong=x & LONG_MASK;  long carry=0;  offset+=len;  for (int j=len - 1; j >= 0; j--) {    long product=(a[j] & LONG_MASK) * xLong + carry;    long difference=q[offset] - product;    q[offset--]=(int)difference;    carry=(product >>> 32) + (((difference & LONG_MASK) > (((~(int)product) & LONG_MASK))) ? 1 : 0);  }  return (int)carry;}  }
class C{  @Override public void onReceive(Context context,Intent intent){  super.onReceive(context,intent);  String action=intent.getAction();  if ((action != null) && action.startsWith(BUZZPIA_ACTION)) {    String command=action.substring(BUZZPIA_ACTION.length());    Bundle versionExtra=new Bundle();    versionExtra.putInt(EXTRA_VERSION,1);    if ("GET_VERSION".equals(command)) {      setResultExtras(versionExtra);      return;    }    int appWidgetId=intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);    if (appWidgetId == AppWidgetManager.INVALID_APPWIDGET_ID) {      return;    } else {      versionExtra.putInt(AppWidgetManager.EXTRA_APPWIDGET_ID,appWidgetId);    }    setResultExtras(versionExtra);    Uri configFileUri=intent.getData();    if (configFileUri == null) {      return;    }    String filePath=configFileUri.getPath();    if (filePath == null) {      return;    }    if ("GET_CONFIG_DATA".equals(command)) {      try {        BackupUtil.createBackup(new FileOutputStream(filePath),appWidgetId,context);        setResultCode(RESULT_SUCCESS);      } catch (      Exception e) {        Debug.log(e);        setResultCode(RESULT_FAIL);      }    } else     if ("SET_CONFIG_DATA".equals(command)) {      setResultCode(BackupUtil.importBackup(filePath,context,appWidgetId) ? RESULT_CONFIG_COMPLETE : RESULT_CONFIG_NEEDED);    }    return;  }  updateAllWidgets(context,true);}  }
class C{  @Override public void write(ASN1Writer stream) throws IOException {  stream.writeStartSequence(OP_TYPE_ADD_REQUEST);  stream.writeOctetString(dn);  stream.writeStartSequence();  for (  RawAttribute attr : attributes) {    attr.write(stream);  }  stream.writeEndSequence();  stream.writeEndSequence();}  }
class C{  private void validateSourceAndDestinationServersOptions(LocalizableMessageBuilder buf){  if (hostNameSourceArg.getValue().equalsIgnoreCase(hostNameDestinationArg.getValue()) && !isInteractive() && portSourceArg.getValue().equals(portDestinationArg.getValue())) {    LocalizableMessage message=ERR_SOURCE_DESTINATION_INITIALIZE_SAME_SERVER_PORT.get(hostNameSourceArg.getValue(),portSourceArg.getValue());    addMessage(buf,message);  }}  }
class C{  public void apply(ViewPropertyAnimator animator,float currValue,float endValue,float velocity){  apply(animator,currValue,endValue,velocity,Math.abs(endValue - currValue));}  }
class C{  @RequestMapping(value="/bars",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Bar> updateBar(@RequestBody Bar bar) throws URISyntaxException {  log.debug("REST request to update Bar : {}",bar);  if (bar.getId() == null) {    return createBar(bar);  }  Bar result=barRepository.save(bar);  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert("bar",bar.getId().toString())).body(result);}  }
class C{  public StatusMessageImpl(String value){  this.messageValue=value;}  }
class C{  public int size(){  return m_firstFree;}  }
class C{  public boolean isPropertySetSettable(SSOToken caller,Collection<String> properties){  for (  String property : properties) {    try {      SessionUtils.checkPermissionToSetProperty(caller,property,null);    } catch (    SessionException e) {      return false;    }  }  return true;}  }
class C{  Object processCDATA(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  if (getSupportsAVT()) {    try {      AVT avt=new AVT(handler,uri,name,rawName,value,owner);      return avt;    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }  } else {    return value;  }}  }
class C{  public ParameterBlock(Vector<Object> sources,Vector<Object> parameters){  setSources(sources);  setParameters(parameters);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateprocessinginstruction.class,args);}  }
class C{  public void onProviderEnabled(String provider){}  }
class C{  public Object parseObject(String text,ParsePosition status){  return parse(text);}  }
class C{  public InactivityConversationCanceller(Plugin plugin,int timeoutSeconds){  this.plugin=plugin;  this.timeoutSeconds=timeoutSeconds;}  }
class C{  @Override public void sendSearchEntry(SearchOperation searchOperation,SearchResultEntry searchEntry) throws DirectoryException {  ((InternalSearchOperation)searchOperation).addSearchEntry(searchEntry);}  }
class C{  UserDNTypeURL(EnumUserDNType dnType,LDAPURL url){  this.url=url;  this.dnType=dnType;}  }
class C{  public void paintSeparatorBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  @Override public void focusLost(FocusEvent e){  if (isPopupVisible(comboBox)) {    setPopupVisible(comboBox,false);  }}  }
class C{  @Inject public OathDevicesDao(@Named(FACTORY_NAME) AuthenticatorDeviceServiceFactory<AuthenticatorOathService> serviceFactory){  super(serviceFactory);}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.X509DataType.X509CRL createX509DataTypeX509CRL(byte[] value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.X509DataTypeImpl.X509CRLImpl(value);}  }
class C{  public boolean check_change_net(BrdItem p_item,int p_new_net_no){  NetNosList net_no_arr=new NetNosList(p_new_net_no);  for (int index=0; index < p_item.tile_shape_count(); ++index) {    ShapeTile curr_shape=p_item.tile_shape_get(index);    Set<BrdItem> obstacles=overlapping_items_with_clearance(curr_shape,p_item.shape_layer(index),net_no_arr,p_item.clearance_idx());    for (    BrdItem curr_ob : obstacles) {      if (curr_ob != p_item)       continue;      if (curr_ob.contains_net(p_new_net_no))       continue;      return false;    }  }  return true;}  }
class C{  public boolean equals(Object other){  if (!(other instanceof RouteList))   return false;  RouteList that=(RouteList)other;  if (this.size() != that.size())   return false;  ListIterator<Route> it=this.listIterator();  ListIterator<Route> it1=that.listIterator();  while (it.hasNext()) {    Route route=(Route)it.next();    Route route1=(Route)it1.next();    if (!route.equals(route1))     return false;  }  return true;}  }
class C{  public boolean validate(String addr){  String namePart;  String domainPart;  StringTokenizer tok;  int endindex=addr.indexOf('@');  if (endindex == -1) {    return false;  }  namePart=addr.substring(0,endindex);  domainPart=addr.substring(endindex + 1,addr.length());  tok=new StringTokenizer(namePart,".");  while (tok.hasMoreTokens()) {    if (!isValidLocalPart(tok.nextToken())) {      return false;    }  }  DomainValidator validator=new DomainValidator();  if (!validator.validate(domainPart)) {    return false;  }  return true;}  }
class C{  public OffsetDateTime plusDays(long days){  return with(dateTime.plusDays(days),offset);}  }
class C{  public int padCount(byte[] in) throws InvalidCipherTextException {  int count=in.length - 1;  while (count > 0 && in[count] == 0) {    count--;  }  if (in[count] != (byte)0x80) {    throw new InvalidCipherTextException("pad block corrupted");  }  return in.length - count;}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  java.util.Vector vnames=sroot.getComposeState().getVariableNames();  if (null != m_test)   m_test.fixupVariables(vnames,sroot.getComposeState().getGlobalsSize());}  }
class C{  public boolean contains(int index){  return index >= getFirst() && index <= getLast();}  }
class C{  private void injectContent(Inject injectContent) throws IOException, MojoExecutionException {  Map<Pattern,File> contents=getContentsMap(injectContent.getContents());  File tmpFile=ioFactory.createTemporaryFile(injectContent.getDestinationFile());  BufferedReader reader=null;  BufferedWriter writer=null;  try {    reader=ioFactory.newReader(injectContent.getDestinationFile());    writer=ioFactory.newWriter(tmpFile);    String line;    while ((line=reader.readLine()) != null) {      File content=doesLineMatchId(contents,line);      if (content != null) {        ioFactory.writeContent(writer,content,getContentConverter(injectContent));      } else {        ioFactory.writeLine(writer,line);      }    }  }  finally {    if (reader != null) {      reader.close();    }    if (writer != null) {      writer.flush();      writer.close();    }  }  ioFactory.moveTo(tmpFile,injectContent.getDestinationFile());}  }
class C{  public int line_count(){  int result=0;  for (  ShapeSegments curr_shape : shapes) {    result+=curr_shape.border_line_count();  }  return result;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node oldChild;  Node newChild;  Node replacedNode;  int length;  String childName;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  length=(int)childList.getLength();  oldChild=childList.item(1);  newChild=doc.createElement("newChild");  replacedNode=employeeNode.replaceChild(newChild,oldChild);  childName=replacedNode.getNodeName();  if (equals(6,length)) {    assertEquals("nowhitespace","name",childName);  } else {    assertEquals("whitespace","employeeId",childName);  }}  }
class C{  @AfterClass public void enableLogging(){  TestCaseUtils.setDefaultLogLevel(Level.INFO);}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfArray copyTo(PdfDocument document,boolean allowDuplicating){  return (PdfArray)super.copyTo(document,allowDuplicating);}  }
class C{  public boolean hasName(final String name){  for (  final String n : names) {    if (n.equalsIgnoreCase(name)) {      return true;    }  }  return false;}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  public LDAPAttribute(String attributeType,List<String> values){  this.attributeType=attributeType;  if (values == null) {    this.values=new ArrayList<>(0);  } else {    this.values=new ArrayList<>(values.size());    for (    String value : values) {      this.values.add(ByteString.valueOfUtf8(value));    }  }}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.ls.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new LSDocumentBuilderFactory(JAXPDOMTestDocumentBuilderFactory.getConfiguration1());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  public AddressFactoryImpl(){}  }
class C{  public ClearPasswordStorageScheme(){  super();}  }
class C{  private void debugInfo(String tn,String s){  logger.trace("** TEST %s ** %s",tn,s);}  }
class C{  public boolean drawImage(Image img,int x,int y,int width,int height,Color bgcolor,ImageObserver observer){  DebugGraphicsInfo info=info();  if (debugLog()) {    info.log(toShortString() + " Drawing image: " + img+ " at: "+ new Rectangle(x,y,width,height)+ ", bgcolor: "+ bgcolor);  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawImage(img,x,y,width,height,bgcolor,observer);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    int i, count=(info.flashCount * 2) - 1;    ImageProducer oldProducer=img.getSource();    ImageProducer newProducer=new FilteredImageSource(oldProducer,new DebugGraphicsFilter(info.flashColor));    Image newImage=Toolkit.getDefaultToolkit().createImage(newProducer);    DebugGraphicsObserver imageObserver=new DebugGraphicsObserver();    Image imageToDraw;    for (i=0; i < count; i++) {      imageToDraw=(i % 2) == 0 ? newImage : img;      loadImage(imageToDraw);      graphics.drawImage(imageToDraw,x,y,width,height,bgcolor,imageObserver);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }  }  return graphics.drawImage(img,x,y,width,height,bgcolor,observer);}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  boolean persistValue(int id){  int bit=1 << id;  return (persistValue & bit) != 0;}  }
class C{  public void invokePostSynchronizationModifyDNPlugins(PostSynchronizationModifyDNOperation modifyDNOperation){  for (  DirectoryServerPlugin p : postSynchronizationModifyDNPlugins) {    try {      p.doPostSynchronization(modifyDNOperation);    } catch (    Exception e) {      logException(modifyDNOperation,p,e,ERR_PLUGIN_POST_SYNCHRONIZATION_PLUGIN_EXCEPTION);    }  }}  }
class C{  public String lookupPrefix(String uri){  String foundPrefix=null;  Enumeration prefixes=m_namespaces.keys();  while (prefixes.hasMoreElements()) {    String prefix=(String)prefixes.nextElement();    String uri2=lookupNamespace(prefix);    if (uri2 != null && uri2.equals(uri)) {      foundPrefix=prefix;      break;    }  }  return foundPrefix;}  }
class C{  public boolean contains(AccessibleState state){  if (states == null) {    return false;  } else {    return states.contains(state);  }}  }
class C{  public void remove(MutableTreeNode aChild){  if (aChild == null) {    throw new IllegalArgumentException("argument is null");  }  if (!isNodeChild(aChild)) {    throw new IllegalArgumentException("argument is not a child");  }  remove(getIndex(aChild));}  }
class C{  public void addExportedOrganizationNames(Set names) throws SMSException, SSOException {}  }
class C{  public static boolean createServerInstance(SSOToken ssoToken,String instanceName,String instanceId,Set values,String serverConfigXML) throws SMSException, SSOException, ConfigurationException, UnknownPropertyNameException {  boolean created=false;  if (!instanceName.equals(DEFAULT_SERVER_CONFIG)) {    validateProperty(ssoToken,values);  }  ServiceConfig sc=getRootServerConfigWithRetry(ssoToken);  if (sc != null) {    if (!instanceName.equals(DEFAULT_SERVER_CONFIG)) {      try {        new URL(instanceName);      } catch (      MalformedURLException ex) {        String[] param={instanceName};        throw new ConfigurationException("invalid.server.name",param);      }    }    Map serverValues=new HashMap(4);    Set setServerId=new HashSet(2);    setServerId.add(instanceId);    serverValues.put(ATTR_SERVER_ID,setServerId);    if (values.isEmpty()) {      values=new HashSet(2);    }    values.add(Constants.PROPERTY_NAME_LB_COOKIE_VALUE + "=" + instanceId);    Set setServerConfigXML=new HashSet(2);    setServerConfigXML.add(serverConfigXML);    serverValues.put(ATTR_SERVER_CONFIG_XML,setServerConfigXML);    serverValues.put(ATTR_SERVER_CONFIG,values);    if (!instanceName.equals(DEFAULT_SERVER_CONFIG)) {      setProtocolHostPortURI(serverValues,instanceName);    }    sc.addSubConfig(instanceName,SUBSCHEMA_SERVER,0,serverValues);    created=true;  }  if (created && !instanceName.equals(DEFAULT_SERVER_CONFIG)) {    updateOrganizationAlias(ssoToken,instanceName,true);  }  return created;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.IPAddressElement createIPAddressElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.IPAddressElementImpl();}  }
class C{  public LDAPAttribute(String attributeType,String value){  this.attributeType=attributeType;  values=newArrayList(ByteString.valueOfUtf8(value));}  }
class C{  public LDAPReader(Socket socket) throws IOException {  this.socket=socket;  this.debugInputStream=new RecordingInputStream(socket.getInputStream());  this.asn1Reader=ASN1.getReader(debugInputStream);}  }
class C{  public LoginTCPPortAttribute(byte[] octets){  super(octets);  port=OctetUtils.toIntVal(octets);}  }
class C{  @Override protected final void flush() throws IOException {  if (!responseFinished) {    if (ajpFlush) {      socketWrapper.write(true,flushMessageArray,0,flushMessageArray.length);    }    socketWrapper.flush(true);  }}  }
class C{  public PlainView(Element elem){  super(elem);}  }
class C{  @Override public void cacheResult(List<Foo> foos){  for (  Foo foo : foos) {    if (entityCache.getResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,foo.getPrimaryKey()) == null) {      cacheResult(foo);    } else {      foo.resetOriginalValues();    }  }}  }
class C{  private final static boolean isThaiPreVowel(int ch){  return (ch >= 0x0e40) && (ch <= 0x0e44);}  }
class C{  public void removeCollection(SecurityCollection collection){  if (collection == null)   return;  int n=-1;  for (int i=0; i < collections.length; i++) {    if (collections[i].equals(collection)) {      n=i;      break;    }  }  if (n >= 0) {    int j=0;    SecurityCollection results[]=new SecurityCollection[collections.length - 1];    for (int i=0; i < collections.length; i++) {      if (i != n)       results[j++]=collections[i];    }    collections=results;  }}  }
class C{  public static String determineOS(){  if ((OS_ARCH.toLowerCase().indexOf(X86) >= 0) || (OS_ARCH.toLowerCase().indexOf(X64) >= 0)) {    if (OS_NAME.toLowerCase().indexOf(WINDOWS) >= 0) {      return WINDOWS;    } else {      if (OS_NAME.toLowerCase().indexOf(SUNOS) >= 0) {        return X86SOLARIS;      } else {        return LINUX;      }    }  } else {    if (OS_NAME.toLowerCase().indexOf(AIX) >= 0) {      return AIX;    } else {      return SOLARIS;    }  }}  }
class C{  public void writeControl(final Control control) throws IOException {  writer.writeStartSequence();{    writer.writeOctetString(control.getOID());    if (control.isCritical()) {      writer.writeBoolean(control.isCritical());    }    if (control.getValue() != null) {      writer.writeOctetString(control.getValue());    }  }  writer.writeEndSequence();}  }
class C{  public void addMember(PersistentObject member) throws UMSException {  DN userDN=DN.valueOf(member.getGuid().getDn());  LDAPUrl memberUrl=getUrl();  DN memberDN=memberUrl.getName();  if (!userDN.isInScopeOf(memberDN,SearchScope.WHOLE_SUBTREE)) {    String args[]=new String[2];    args[0]=userDN.toString();    args[1]=memberUrl.toString();    throw new UMSException(i18n.getString(IUMSConstants.USER_NOT_IN_GROUP_SCOPE,args));  } else   if ((userDN.size() - memberDN.size()) > 1 && SearchScope.SINGLE_LEVEL.equals(memberUrl.getScope())) {    String args[]=new String[2];    args[0]=userDN.toString();    args[1]=memberUrl.toString();    throw new UMSException(i18n.getString(IUMSConstants.USER_NOT_IN_GROUP_SCOPE,args));  }  member.modify(new Attr(MEMBER_ATTR_NAME,this.getDN()),ModificationType.ADD);  member.save();}  }
class C{  public final void testPSSParameterSpec0101(){  AlgorithmParameterSpec aps=new PSSParameterSpec(20);  assertTrue(aps instanceof PSSParameterSpec);}  }
class C{  public static long hash64(final byte[] data,int length){  return hash64(data,length,0xe17a1465);}  }
class C{  private BigDecimal convertIntToBigDecimal(int quoteParam){  BigDecimal quoteParamBigDecimal=new BigDecimal(quoteParam).divide(new BigDecimal(100),new MathContext(8,RoundingMode.HALF_DOWN));  return quoteParamBigDecimal;}  }
class C{  public int hashCode(){  return p.hashCode();}  }
class C{  public void truncate(long length) throws SerialException {  isValid();  if (length > len) {    throw new SerialException("Length more than what can be truncated");  } else   if ((int)length == 0) {    buf=new byte[0];    len=length;  } else {    len=length;    buf=this.getBytes(1,(int)len);  }}  }
class C{  @Override public List<Foo> findByUuid_C(String uuid,long companyId){  return findByUuid_C(uuid,companyId,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);}  }
class C{  public HMACParameterSpec(int outputLength){  this.outputLength=outputLength;}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.restartServer();  isMemberOfType=DirectoryServer.getSchema().getAttributeType("ismemberof");}  }
class C{  EntitlementCondition migrateEnvironmentCondition(String conditionClassName,PolicyCondition condition,MigrationReport migrationReport){  return environmentConditionsUpgradeMap.get(conditionClassName).migrate(condition,migrationReport);}  }
class C{  public LineBreakMeasurer(AttributedCharacterIterator text,FontRenderContext frc){  this(text,BreakIterator.getLineInstance(),frc);}  }
class C{  @Override public void addLocaleEncodingMappingParameter(String locale,String encoding){  getCharsetMapper().addCharsetMappingFromDeploymentDescriptor(locale,encoding);}  }
class C{  public MarshalException(String s,Exception ex){  super(s,ex);}  }
class C{  @Override public void finish() throws IOException {  if (out == null) {    throw new IOException("Stream is closed");  }  if (cDir == null) {    return;  }  if (entries.isEmpty()) {    throw new ZipException("No entries");  }  if (currentEntry != null) {    closeEntry();  }  int cdirSize=cDir.size();  writeLong(cDir,ENDSIG);  writeShort(cDir,0);  writeShort(cDir,0);  writeShort(cDir,entries.size());  writeShort(cDir,entries.size());  writeLong(cDir,cdirSize);  writeLong(cDir,offset);  writeShort(cDir,commentBytes.length);  if (commentBytes.length > 0) {    cDir.write(commentBytes);  }  cDir.writeTo(out);  cDir=null;}  }
class C{  protected void add_corner_for_snap_angle(){  if (r_brd.brd_rules.is_trace_snap_none())   return;  PlaPointInt first_corner=corner_list.getFirst();  PlaPointInt last_corner=corner_list.getLast();  PlaPointInt add_corner=null;  if (r_brd.brd_rules.is_trace_snap_45()) {    add_corner=last_corner.fortyfive_degree_corner(first_corner,true);  }  if (add_corner != null) {    corner_list.add(add_corner);  }}  }
class C{  public EmptyFrameException(String msg){  super(msg);}  }
class C{  @Override public synchronized void start(int svc) throws ChannelException {  setupDefaultStack();  if (optionCheck)   checkOptionFlags();  super.start(svc);  if (hbthread == null && heartbeat) {    hbthread=new HeartbeatThread(this,heartbeatSleeptime);    hbthread.start();  }}  }
class C{  public void doPostLogin(HttpServletRequest request,HttpServletResponse response){  String metaAlias=request.getParameter(IFSConstants.META_ALIAS);  String sso=request.getParameter(IFSConstants.SSOKEY);  String lrURL=request.getParameter(IFSConstants.LRURL);  String showFederatePage=request.getParameter(IFSConstants.FEDERATEKEY);  String returnURL=null;  if (metaAlias == null) {    metaAlias=FSServiceUtils.getMetaAlias(request);    String rqst=(new StringBuffer()).append(request.getRequestURL().toString()).append(IFSConstants.QUESTION_MARK).append(request.getQueryString()).toString();    lrURL=getValueFromURL(rqst,IFSConstants.LRURL);    sso=getValueFromURL(rqst,IFSConstants.SSOKEY);    FSSessionManager sessMgr=FSSessionManager.getInstance(metaAlias);    String relayStateURL=sessMgr.getRelayState(lrURL);    if (relayStateURL != null) {      sessMgr.removeRelayState(lrURL);      lrURL=relayStateURL;    }  }  try {    setMetaInfo(metaAlias,request);  } catch (  FSPostLoginException fsexp) {    sendResponse(request,response,errorPage);  }  if (lrURL == null || lrURL.length() <= 0) {    lrURL=LibertyManager.getHomeURL(realm,entityID,providerRole);  }  if ((sso != null && sso.length() > 0 && sso.equalsIgnoreCase(IFSConstants.SSOVALUE)) || isIDP) {    try {      Set cotSet=LibertyManager.getListOfCOTs(realm,entityID,providerRole);      if (cotSet != null && !cotSet.isEmpty()) {        if (cotSet.size() <= 1) {          String cotSelected=(String)cotSet.iterator().next();          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSPostLogin::doPostLogin " + "single cot present is " + cotSelected);          }          returnURL=doConsentToIntro(metaAlias,lrURL,cotSelected);        } else {          returnURL=new StringBuffer().append(consentPage).append(IFSConstants.QUESTION_MARK).append(IFSConstants.META_ALIAS).append(IFSConstants.EQUAL_TO).append(metaAlias).append(IFSConstants.AMPERSAND).append(IFSConstants.LRURL).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(lrURL)).toString();        }      } else {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSPostLogin::doPostLogin: No " + "COTS configured. redirecting to lrurl " + lrURL);        }        returnURL=lrURL;      }    } catch (    FSPostLoginException fsexp) {      sendResponse(request,response,errorPage);    }  } else   if (showFederatePage != null && !showFederatePage.equalsIgnoreCase(IFSConstants.FEDERATEVALUE)) {    String providerID=LibertyManager.getEntityID(metaAlias);    String univId=LibertyManager.getUser(request);    if (univId == null) {      String gotoUrl=new StringBuffer().append(request.getRequestURL()).append(IFSConstants.QUESTION_MARK).append(IFSConstants.AMPERSAND).append(request.getQueryString()).toString();      String preLoginURL=LibertyManager.getLoginURL(request);      sendResponse(request,response,preLoginURL + "&goto=" + URLEncDec.encode(gotoUrl));      return;    }    Set providerSet=LibertyManager.getProvidersToFederate(realm,providerID,providerRole,univId);    if (providerSet != null && providerSet.size() != 0 && federationPage != null) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSPostLogin::doPostLogin: Found " + "provider(s) to federated with " + providerSet);      }      returnURL=new StringBuffer().append(federationPage).append(IFSConstants.QUESTION_MARK).append(IFSConstants.META_ALIAS).append(IFSConstants.EQUAL_TO).append(metaAlias).append(IFSConstants.AMPERSAND).append(IFSConstants.LRURL).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(lrURL)).toString();    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSPostLogin::doPostLogin: No " + "provider(s) to federated with or " + "federationPage null. Redirecting to LRURL "+ lrURL);      }      returnURL=lrURL;    }  } else {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSPostLogin::doPostLogin. No cotkey or " + "Federatekey found");    }    returnURL=lrURL;  }  setTokenListenerAndSessionInfo(request,metaAlias);  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSPostLogin::doPostLogin return url " + returnURL);  }  sendResponse(request,response,returnURL);}  }
class C{  public void insert_via_obstacle(PlaArea p_area,int p_layer,int p_clearance_class,ItemFixState p_fixed_state){  if (p_area == null) {    System.out.println("BasicBoard.insert_via_obstacle: p_area is null");    return;  }  BrdAreaObstacleVia obs=new BrdAreaObstacleVia(p_area,p_layer,PlaVectorInt.ZERO,0,false,p_clearance_class,0,0,null,p_fixed_state,this);  insert_item(obs);}  }
class C{  @Override public void addRuleInstances(Digester digester){  digester.addObjectCreate(prefix + "Host","org.apache.catalina.core.StandardHost","className");  digester.addSetProperties(prefix + "Host");  digester.addRule(prefix + "Host",new CopyParentClassLoaderRule());  digester.addRule(prefix + "Host",new LifecycleListenerRule("org.apache.catalina.startup.HostConfig","hostConfigClass"));  digester.addSetNext(prefix + "Host","addChild","org.apache.catalina.Container");  digester.addCallMethod(prefix + "Host/Alias","addAlias",0);  digester.addObjectCreate(prefix + "Host/Cluster",null,"className");  digester.addSetProperties(prefix + "Host/Cluster");  digester.addSetNext(prefix + "Host/Cluster","setCluster","org.apache.catalina.Cluster");  digester.addObjectCreate(prefix + "Host/Listener",null,"className");  digester.addSetProperties(prefix + "Host/Listener");  digester.addSetNext(prefix + "Host/Listener","addLifecycleListener","org.apache.catalina.LifecycleListener");  digester.addRuleSet(new RealmRuleSet(prefix + "Host/"));  digester.addObjectCreate(prefix + "Host/Valve",null,"className");  digester.addSetProperties(prefix + "Host/Valve");  digester.addSetNext(prefix + "Host/Valve","addValve","org.apache.catalina.Valve");}  }
class C{  public UnmarshalException(String message,Throwable exception){  this(message,null,exception);}  }
class C{  public static void removeProperties(XMPMeta xmp,String schemaNS,String propName,boolean doAllProperties,boolean includeAliases) throws XMPException {  XMPUtilsImpl.removeProperties(xmp,schemaNS,propName,doAllProperties,includeAliases);}  }
class C{  private Attr findAttribute(String name){  name=name.toLowerCase();  Attr attr=null;  if (_attrs != null) {    int size=_attrs.size();    for (int i=0; i < size; i++) {      Attr attr1=(Attr)_attrs.get(i);      if (attr1.getName().equals(name)) {        attr=attr1;        break;      }    }  }  return attr;}  }
class C{  public V remove(Object key){  Object k=maskNull(key);  int h=hash(k);  Entry<K,V>[] tab=getTable();  int i=indexFor(h,tab.length);  Entry<K,V> prev=tab[i];  Entry<K,V> e=prev;  while (e != null) {    Entry<K,V> next=e.next;    if (h == e.hash && eq(k,e.get())) {      modCount++;      size--;      if (prev == e)       tab[i]=next; else       prev.next=next;      return e.value;    }    prev=e;    e=next;  }  return null;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    zzEndRead+=zzFinalHighSurrogate;    zzFinalHighSurrogate=0;    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {    char newBuffer[]=new char[zzBuffer.length * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;    zzEndRead+=zzFinalHighSurrogate;    zzFinalHighSurrogate=0;  }  int requested=zzBuffer.length - zzEndRead;  int numRead=zzReader.read(zzBuffer,zzEndRead,requested);  if (numRead == 0) {    throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");  }  if (numRead > 0) {    zzEndRead+=numRead;    if (numRead == requested) {      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {        --zzEndRead;        zzFinalHighSurrogate=1;      }    }    return false;  }  return true;}  }
class C{  private static BindResponseProtocolOp readBindResponse(ASN1Reader reader) throws LDAPException {  try {    reader.readStartSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  int resultCode;  try {    resultCode=(int)reader.readInteger();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_RESULT_CODE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  DN matchedDN;  try {    String dnString=reader.readOctetStringAsString();    if (dnString.length() == 0) {      matchedDN=null;    } else {      matchedDN=DN.valueOf(dnString);    }  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_MATCHED_DN.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  LocalizableMessage errorMessage;  try {    errorMessage=LocalizableMessage.raw(reader.readOctetStringAsString());    if (errorMessage.length() == 0) {      errorMessage=null;    }  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_ERROR_MESSAGE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  ArrayList<String> referralURLs=null;  ByteString serverSASLCredentials=null;  try {    if (reader.hasNextElement() && reader.peekType() == TYPE_REFERRAL_SEQUENCE) {      try {        reader.readStartSequence();        referralURLs=new ArrayList<>();        do {          referralURLs.add(reader.readOctetStringAsString());        } while (reader.hasNextElement());        reader.readEndSequence();      } catch (      Exception e) {        logger.traceException(e);        LocalizableMessage message=ERR_LDAP_RESULT_DECODE_REFERRALS.get(e);        throw new LDAPException(PROTOCOL_ERROR,message,e);      }    }    if (reader.hasNextElement() && reader.peekType() == TYPE_SERVER_SASL_CREDENTIALS) {      try {        serverSASLCredentials=reader.readOctetString();      } catch (      Exception e) {        logger.traceException(e);        LocalizableMessage message=ERR_LDAP_BIND_RESULT_DECODE_SERVER_SASL_CREDENTIALS.get(e);        throw new LDAPException(PROTOCOL_ERROR,message,e);      }    }  } catch (  IOException e) {    logger.traceException(e);  }  try {    reader.readEndSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  return new BindResponseProtocolOp(resultCode,errorMessage,matchedDN,referralURLs,serverSASLCredentials);}  }
class C{  private DN searchServerEntry(){  String ldapPort=getAttr("cn=LDAP Connection Handler,cn=Connection Handlers,cn=config",LDAP_PORT);  String ldapsPort=getAttr("cn=LDAPS Connection Handler,cn=Connection Handlers,cn=config",LDAP_PORT);  boolean ldapsPortEnable=false;  String val=getAttr("cn=LDAPS Connection Handler,cn=Connection Handlers,cn=config","ds-cfg-enabled");  if (val != null) {    ldapsPortEnable="true".equalsIgnoreCase(val);  }  if (ldapPort == null && ldapsPort == null) {    return null;  }  String hostName;  try {    hostName=InetAddress.getLocalHost().getCanonicalHostName();  } catch (  Throwable t) {    return null;  }  SearchRequest request=newSearchRequest(DN.valueOf("cn=Servers,cn=admin data"),SearchScope.SINGLE_LEVEL);  InternalSearchOperation op=internalConnection.processSearch(request);  if (op.getResultCode() == ResultCode.SUCCESS) {    Entry entry=findSameHostAndPort(op.getSearchEntries(),hostName,ldapPort,ldapsPortEnable,ldapsPort);    if (entry != null) {      return entry.getName();    }  }  return null;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) static int compareComparables(Class<?> kc,Object k,Object x){  return (x == null || x.getClass() != kc ? 0 : ((Comparable)k).compareTo(x));}  }
class C{  private void readParameterAnnotations(final MethodVisitor mv,final Context context,int v,final boolean visible){  int i;  int n=b[v++] & 0xFF;  int synthetics=Type.getArgumentTypes(context.desc).length - n;  AnnotationVisitor av;  for (i=0; i < synthetics; ++i) {    av=mv.visitParameterAnnotation(i,"Ljava/lang/Synthetic;",false);    if (av != null) {      av.visitEnd();    }  }  char[] c=context.buffer;  for (; i < n + synthetics; ++i) {    int j=readUnsignedShort(v);    v+=2;    for (; j > 0; --j) {      av=mv.visitParameterAnnotation(i,readUTF8(v,c),visible);      v=readAnnotationValues(v + 2,c,true,av);    }  }}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.PGPDataType createPGPDataType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.PGPDataTypeImpl();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node createdNode;  Node lchild;  String childName;  Node appendedChild;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  createdNode=doc.createElement("br");  appendedChild=employeeNode.appendChild(createdNode);  lchild=employeeNode.getLastChild();  childName=lchild.getNodeName();  assertEqualsAutoCase("element","nodeName","br",childName);}  }
class C{  private void exportContainer(ReadableTransaction txn,EntryContainer entryContainer) throws StorageRuntimeException, IOException, LDIFException {  ID2Entry id2entry=entryContainer.getID2Entry();  try (final Cursor<ByteString,ByteString> cursor=txn.openCursor(id2entry.getName())){    while (cursor.next()) {      if (exportConfig.isCancelled()) {        break;      }      ByteString key=cursor.getKey();      EntryID entryID=null;      try {        entryID=new EntryID(key);      } catch (      Exception e) {        if (logger.isTraceEnabled()) {          logger.traceException(e);          logger.trace("Malformed id2entry ID %s.%n",StaticUtils.bytesToHex(key));        }        skippedCount++;        continue;      }      if (entryID.longValue() == 0) {        continue;      }      ByteString value=cursor.getValue();      Entry entry=null;      try {        entry=id2entry.entryFromDatabase(value,entryContainer.getRootContainer().getCompressedSchema());      } catch (      Exception e) {        if (logger.isTraceEnabled()) {          logger.traceException(e);          logger.trace("Malformed id2entry record for ID %d:%n%s%n",entryID,StaticUtils.bytesToHex(value));        }        skippedCount++;        continue;      }      if (entry.toLDIF(exportConfig)) {        exportedCount++;      } else {        skippedCount++;      }    }  } }  }
class C{  public static double distance(Point point1,Point point2) throws TurfException {  return distance(point1,point2,TurfConstants.UNIT_DEFAULT);}  }
class C{  private boolean containsMapping(Object key,Object value){  if (key == null) {    HashMapEntry<K,V> e=entryForNullKey;    return e != null && Objects.equal(value,e.value);  }  int hash=secondaryHash(key);  HashMapEntry<K,V>[] tab=table;  int index=hash & (tab.length - 1);  for (HashMapEntry<K,V> e=tab[index]; e != null; e=e.next) {    if (e.hash == hash && key.equals(e.key)) {      return Objects.equal(value,e.value);    }  }  return false;}  }
class C{  public void testCase6(){  byte aBytes[]={1,2,3,4,5,6,7};  byte bBytes[]={3,4,5,6,7,8,9};  byte rBytes[]={2,2,2,2,2,2,2};  int aSign=-1;  int bSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  @Override public void addUserRuleItem(String item){  final Set<String> stringSet=sharedPreferences.getStringSet(KEY_USER_RULES,new HashSet<String>());  stringSet.add(item);  SharedPreferences.Editor editor=sharedPreferences.edit();  editor.remove(KEY_USER_RULES);  editor.putStringSet(KEY_USER_RULES,stringSet);  editor.commit();}  }
class C{  public static int copy(InputStream input,OutputStream output) throws IOException {  byte[] buffer=new byte[DEFAULT_BUFFER_SIZE];  int count=0;  int n=0;  while (-1 != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  private boolean handleTouchEvent(MotionEvent ev){  DeviceProfile grid=mLauncher.getDeviceProfile();  int x=(int)ev.getX();  int y=(int)ev.getY();switch (ev.getAction()) {case MotionEvent.ACTION_DOWN:    if (!mContentBounds.isEmpty()) {      Rect tmpRect=new Rect(mContentBounds);      tmpRect.inset(-grid.allAppsIconSizePx / 2,0);      if (ev.getX() < tmpRect.left || ev.getX() > tmpRect.right) {        mBoundsCheckLastTouchDownPos.set(x,y);        return true;      }    } else {      if (ev.getX() < getPaddingLeft() || ev.getX() > (getWidth() - getPaddingRight())) {        mBoundsCheckLastTouchDownPos.set(x,y);        return true;      }    }  break;case MotionEvent.ACTION_UP:if (mBoundsCheckLastTouchDownPos.x > -1) {  ViewConfiguration viewConfig=ViewConfiguration.get(getContext());  float dx=ev.getX() - mBoundsCheckLastTouchDownPos.x;  float dy=ev.getY() - mBoundsCheckLastTouchDownPos.y;  float distance=(float)Math.hypot(dx,dy);  if (distance < viewConfig.getScaledTouchSlop()) {    Launcher launcher=(Launcher)getContext();    launcher.showWorkspace(true);    return true;  }}case MotionEvent.ACTION_CANCEL:mBoundsCheckLastTouchDownPos.set(-1,-1);break;}return false;}  }
class C{  public CertBlacklist(String pubkeyBlacklistPath,String serialBlacklistPath){  serialBlacklist=readSerialBlackList(serialBlacklistPath);  pubkeyBlacklist=readPublicKeyBlackList(pubkeyBlacklistPath);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.AltIDElement createAltIDElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.AltIDElementImpl();}  }
class C{  public static String readStream(InputStream is,String encoding) throws IOException {  StringBuilder content=new StringBuilder();  String line;  BufferedReader br=null;  try {    br=new BufferedReader(new InputStreamReader(is,encoding));    while ((line=br.readLine()) != null) {      content.append(line).append('\n');    }  }  finally {    closeIfNotNull(br);  }  return content.toString();}  }
class C{  public PluginResult.PreParse invokePreParseComparePlugins(PreParseCompareOperation compareOperation) throws CanceledOperationException {  PluginResult.PreParse result=null;  for (  DirectoryServerPlugin p : preParseComparePlugins) {    if (isInternalOperation(compareOperation,p)) {      continue;    }    try {      result=p.doPreParse(compareOperation);    } catch (    CanceledOperationException coe) {      throw coe;    }catch (    Exception e) {      return handlePreParseException(e,compareOperation,p);    }    if (result == null) {      return handlePreParseResult(compareOperation,p);    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.PreParse.continueOperationProcessing();  }  return result;}  }
class C{  void removeAdminRoleAci(boolean recursive) throws AMException, SSOException {  String orgDN=getOrganizationDN();  AMOrganizationImpl org=new AMOrganizationImpl(token,orgDN);  Set aciSet=org.getAttribute("aci");  Set newAciSet=new HashSet();  Iterator iter=aciSet.iterator();  DN thisDN=DN.valueOf(entryDN);  while (iter.hasNext()) {    String aci=(String)iter.next();    int index=aci.indexOf("version 3.0;");    if (index == -1) {      newAciSet.add(aci);      continue;    }    index=aci.indexOf("roledn",index);    if (index == -1) {      newAciSet.add(aci);      continue;    }    index=aci.indexOf("ldap:///",index);    if (index == -1) {      newAciSet.add(aci);      continue;    }    int index2=aci.lastIndexOf("\"");    DN roleDN=DN.valueOf(aci.substring(index + 8,index2));    String roleName=LDAPUtils.rdnValueFromDn(roleDN);    String tmpdn=roleName.replace('_',',');    DN tmpDN=DN.valueOf(tmpdn);    if (!tmpDN.isRootDN()) {      if (!tmpDN.equals(thisDN)) {        if (tmpDN.isInScopeOf(thisDN,SearchScope.SUBORDINATES)) {          if (!recursive) {            newAciSet.add(aci);          }        } else {          newAciSet.add(aci);        }      }    } else {      newAciSet.add(aci);    }  }  org.setAttribute("aci",newAciSet);  org.store();}  }
class C{  public FurnaceRecipe(ItemStack result,MaterialData source,float experience){  this(result,source.getItemType(),source.getData(),experience);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  String value;  doc=(Document)load("staff",false);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("domestic");  value=domesticAttr.getNodeValue();  assertEquals("attrEffectiveValueAssert","Yes",value);}  }
class C{  public void delete(Index index){  logger.debug("Deleting index: " + index.toString());  indexesRepo.delete(index);}  }
class C{  @Override public Writer append(CharSequence value){  builder.append(value);  return this;}  }
class C{  public MultipartStream(InputStream input,byte[] boundary,int bufSize,ProgressNotifier pNotifier){  if (boundary == null) {    throw new IllegalArgumentException("boundary may not be null");  }  this.boundaryLength=boundary.length + BOUNDARY_PREFIX.length;  if (bufSize < this.boundaryLength + 1) {    throw new IllegalArgumentException("The buffer size specified for the MultipartStream is too small");  }  this.input=input;  this.bufSize=Math.max(bufSize,boundaryLength * 2);  this.buffer=new byte[this.bufSize];  this.notifier=pNotifier;  this.boundary=new byte[this.boundaryLength];  this.boundaryTable=new int[this.boundaryLength + 1];  this.keepRegion=this.boundary.length;  System.arraycopy(BOUNDARY_PREFIX,0,this.boundary,0,BOUNDARY_PREFIX.length);  System.arraycopy(boundary,0,this.boundary,BOUNDARY_PREFIX.length,boundary.length);  computeBoundaryTable();  head=0;  tail=0;}  }
class C{  private void readObject(final java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  initialize();  HeadIndex<K,V> h=head;  Node<K,V> basepred=h.node;  ArrayList<Index<K,V>> preds=new ArrayList<Index<K,V>>();  for (int i=0; i <= h.level; ++i)   preds.add(null);  Index<K,V> q=h;  for (int i=h.level; i > 0; --i) {    preds.set(i,q);    q=q.down;  }  for (; ; ) {    Object k=s.readObject();    if (k == null)     break;    Object v=s.readObject();    if (v == null)     throw new NullPointerException();    K key=(K)k;    V val=(V)v;    int j=randomLevel();    if (j > h.level)     j=h.level + 1;    Node<K,V> z=new Node<K,V>(key,val,null);    basepred.next=z;    basepred=z;    if (j > 0) {      Index<K,V> idx=null;      for (int i=1; i <= j; ++i) {        idx=new Index<K,V>(z,idx,null);        if (i > h.level)         h=new HeadIndex<K,V>(h.node,h,idx,i);        if (i < preds.size()) {          preds.get(i).right=idx;          preds.set(i,idx);        } else         preds.add(idx);      }    }  }  head=h;}  }
class C{  public static boolean isValid(int c){  return (c < 0x10000 && (CHARS[c] & MASK_VALID) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  public static NodeList selectNodeList(Node doc,String str,NamespaceContext nsctx) throws XPathException {  XPathFactory xpf=xpathFactoryCache.getInstanceForCurrentThread();  XPath xpath=xpf.newXPath();  xpath.setNamespaceContext(nsctx);  XPathExpression expr=xpath.compile(str);  return (NodeList)expr.evaluate(doc,XPathConstants.NODESET);}  }
class C{  private void verifyAbort(LoginModule... modules) throws LoginException {  for (  LoginModule module : modules) {    verify(module).abort();  }}  }
class C{  private void broadcastConfigChange(){  for (  ReplicationServerDomain domain : getReplicationServerDomains()) {    domain.sendTopoInfoToAll();  }}  }
class C{  static String urlDecode(String s) throws DirectoryException {  if (s == null) {    return "";  }  byte[] stringBytes=getBytes(s);  int length=stringBytes.length;  byte[] decodedBytes=new byte[length];  int pos=0;  for (int i=0; i < length; i++) {    if (stringBytes[i] == '%') {      if (i + 2 > length) {        LocalizableMessage message=ERR_LDAPURL_PERCENT_TOO_CLOSE_TO_END.get(s,i);        throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);      }      byte b;switch (stringBytes[++i]) {case '0':        b=(byte)0x00;      break;case '1':    b=(byte)0x10;  break;case '2':b=(byte)0x20;break;case '3':b=(byte)0x30;break;case '4':b=(byte)0x40;break;case '5':b=(byte)0x50;break;case '6':b=(byte)0x60;break;case '7':b=(byte)0x70;break;case '8':b=(byte)0x80;break;case '9':b=(byte)0x90;break;case 'a':case 'A':b=(byte)0xA0;break;case 'b':case 'B':b=(byte)0xB0;break;case 'c':case 'C':b=(byte)0xC0;break;case 'd':case 'D':b=(byte)0xD0;break;case 'e':case 'E':b=(byte)0xE0;break;case 'f':case 'F':b=(byte)0xF0;break;default :LocalizableMessage message=ERR_LDAPURL_INVALID_HEX_BYTE.get(s,i);throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}switch (stringBytes[++i]) {case '0':break;case '1':b|=0x01;break;case '2':b|=0x02;break;case '3':b|=0x03;break;case '4':b|=0x04;break;case '5':b|=0x05;break;case '6':b|=0x06;break;case '7':b|=0x07;break;case '8':b|=0x08;break;case '9':b|=0x09;break;case 'a':case 'A':b|=0x0A;break;case 'b':case 'B':b|=0x0B;break;case 'c':case 'C':b|=0x0C;break;case 'd':case 'D':b|=0x0D;break;case 'e':case 'E':b|=0x0E;break;case 'f':case 'F':b|=0x0F;break;default :LocalizableMessage message=ERR_LDAPURL_INVALID_HEX_BYTE.get(s,i);throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}decodedBytes[pos++]=b;} else {decodedBytes[pos++]=stringBytes[i];}}try {return new String(decodedBytes,0,pos,"UTF-8");} catch (Exception e) {logger.traceException(e);LocalizableMessage message=ERR_LDAPURL_CANNOT_CREATE_UTF8_STRING.get(getExceptionMessage(e));throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}}  }
class C{  public void connect(){  mClient.connect();}  }
class C{  public UnmarshalException(Throwable exception){  this(null,null,exception);}  }
class C{  private boolean reposition_via(BrdAbitVia p_via,PlaPointInt p_to_location,int p_trace_half_width_1,int p_trace_layer_1,int p_trace_cl_class_1,PlaPointInt p_connect_location,int p_trace_half_width_2,int p_trace_layer_2,int p_trace_cl_class_2){  PlaPointInt from_location=p_via.center_get();  if (from_location.equals(p_to_location)) {    if (r_board.debug(Mdbg.OPTIMIZE,Ldbg.SPC_C))     System.out.println("OptViaAlgo.reposition_via: from_location equal p_to_location");    return false;  }  PlaVectorInt delta=p_to_location.difference_by(from_location);  if (r_board.brd_rules.is_trace_snap_none() && delta.distance() <= 1.5) {    return false;  }  NetNosList net_no_arr=p_via.net_nos;  double ok_length=r_board.check_trace(from_location,p_to_location,p_trace_layer_1,net_no_arr,p_trace_half_width_1,p_trace_cl_class_1,false);  if (ok_length < Integer.MAX_VALUE)   return false;  ok_length=r_board.check_trace(p_to_location,p_connect_location,p_trace_layer_2,net_no_arr,p_trace_half_width_2,p_trace_cl_class_2,false);  if (ok_length < Integer.MAX_VALUE)   return false;  if (!r_board.move_drill_algo.check(p_via,delta,0,0,null,null))   return false;  return true;}  }
class C{  private void buildOneVarOp(MethodVisitor methodVisitor,CodeInfo info,Ins.OneVarOp oneVarOp){  buildValueAccess(methodVisitor,info,oneVarOp.value(),true);  methodVisitor.visitInsn(oneVarOp.op());  if (oneVarOp.op() == Ins.OneVarOp.Dneg || oneVarOp.op() == Ins.OneVarOp.Lneg) {    info.pop(1);    info.push(CodeInfo.Size._2);  } else {    info.pop(1);    info.push(CodeInfo.Size._1);  }}  }
class C{  private boolean doAcquireNanos(int arg,long nanosTimeout) throws InterruptedException {  if (nanosTimeout <= 0L)   return false;  final long deadline=System.nanoTime() + nanosTimeout;  final Node node=addWaiter(Node.EXCLUSIVE);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return true;      }      nanosTimeout=deadline - System.nanoTime();      if (nanosTimeout <= 0L)       return false;      if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);      if (Thread.interrupted())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public InvalidSeq(){  super();}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  XPathContext xctxt=transformer.getXPathContext();  xctxt.pushRTFContext();  transformer.executeChildTemplates(this,true);  xctxt.popRTFContext();}  }
class C{  public Object send(String functionName,Object params[],String lbcookie,String cookies) throws Exception {  return (send(encodeMessage(functionName,params),lbcookie,cookies));}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme: got an Invite sending Trying");    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      logger.info("null server tx -- getting a new one");      st=sipProvider.getNewServerTransaction(request);    }    logger.info("getNewServerTransaction : " + st);    String txId=((ViaHeader)request.getHeader(ViaHeader.NAME)).getBranch();    this.serverTxTable.put(txId,st);    Response response=messageFactory.createResponse(Response.TRYING,request);    ListeningPoint lp=sipProvider.getListeningPoint(transport);    int myPort=lp.getPort();    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    int timeToSleep=(int)(Math.random() * 1000);    Thread.sleep(timeToSleep);    st.sendResponse(response);    Response ringingResponse=messageFactory.createResponse(Response.RINGING,request);    ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ToHeader toHeader=(ToHeader)ringingResponse.getHeader(ToHeader.NAME);    String toTag;    if (((ToHeader)ringingResponse.getHeader(ToHeader.NAME)).getTag() == null) {      toTag=new Integer(new Random().nextInt()).toString();      toHeader.setTag(toTag);    } else {      toTag=((ToHeader)ringingResponse.getHeader(ToHeader.NAME)).getTag();    }    if (sendRinging) {      ringingResponse.addHeader(contactHeader);      st.sendResponse(ringingResponse);    }    Dialog dialog=st.getDialog();    dialog.setApplicationData(st);    this.inviteSeen=true;    this.sendInviteOK(requestEvent,st,toTag);  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  private void processSDKNotification(){  try {    if (debug.messageEnabled()) {      debug.message("processSDKNotification name=" + configName);    }    ((AMConfiguration)Configuration.getConfiguration()).processListenerEvent(configName);  } catch (  Exception e) {    debug.error("processSDKNotification",e);  }}  }
class C{  private int doRegister(int registrations){  long adjust=((long)registrations << PARTIES_SHIFT) | registrations;  final Phaser parent=this.parent;  int phase;  for (; ; ) {    long s=(parent == null) ? state : reconcileState();    int counts=(int)s;    int parties=counts >>> PARTIES_SHIFT;    int unarrived=counts & UNARRIVED_MASK;    if (registrations > MAX_PARTIES - parties)     throw new IllegalStateException(badRegister(s));    phase=(int)(s >>> PHASE_SHIFT);    if (phase < 0)     break;    if (counts != EMPTY) {      if (parent == null || reconcileState() == s) {        if (unarrived == 0)         root.internalAwaitAdvance(phase,null); else         if (UNSAFE.compareAndSwapLong(this,stateOffset,s,s + adjust))         break;      }    } else     if (parent == null) {      long next=((long)phase << PHASE_SHIFT) | adjust;      if (UNSAFE.compareAndSwapLong(this,stateOffset,s,next))       break;    } else {synchronized (this) {        if (state == s) {          phase=parent.doRegister(1);          if (phase < 0)           break;          while (!UNSAFE.compareAndSwapLong(this,stateOffset,s,((long)phase << PHASE_SHIFT) | adjust)) {            s=state;            phase=(int)(root.state >>> PHASE_SHIFT);          }          break;        }      }    }  }  return phase;}  }
class C{  final ElemContext pop(){  return this.m_prev;}  }
class C{  public CoinTile(int stageZone,float xPos,float yPos,float coinBounceVelocity,Image[] coinSprites,Group parent,Image... sprites){  super(BLOCK_COLLISION_DATA,xPos,yPos,0,coinBounceVelocity,sprites);  this.hitCoins=coinSprites;  coinView=new ImageView();  this.parent=parent;  this.parent.getChildren().add(coinView);  coinView.setTranslateX(xPos);  cYPos=yPos;  zone=stageZone;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.utility.AttributedURI createAttributedURI() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.utility.impl.AttributedURIImpl();}  }
class C{  public AuthenticateToRealmCondition(){  this(PrivilegeManager.debug,new EntitlementCoreWrapper());}  }
class C{  public java.lang.String toString(boolean includeNS,boolean declareNS){  StringBuffer xml=new StringBuffer(3000);  String secprefix="";  String secNS="";  String secNSString="";  if (includeNS) {    secprefix=WSSEConstants.TAG_SEC + ":";  }  if (declareNS) {    secNS=WSSEConstants.NS_SEC;    secNSString=" " + WSSEConstants.TAG_XMLNS + ":"+ WSSEConstants.TAG_SEC+ "="+ "\""+ secNS+ "\"";  }  xml.append("<").append(secprefix).append(WSSEConstants.TAG_PROXYSUBJECT).append(secNSString).append(">");  if (getNameIdentifier() != null) {    xml.append(getNameIdentifier().toString(includeNS,declareNS));  }  if (getSubjectConfirmation() != null) {    xml.append(getSubjectConfirmation().toString(includeNS,declareNS));  }  xml.append("</").append(secprefix).append(WSSEConstants.TAG_PROXYSUBJECT).append(">");  return xml.toString();}  }
class C{  public void testNotations(){  assertNotNull("This implementation does not parse notations",png);}  }
