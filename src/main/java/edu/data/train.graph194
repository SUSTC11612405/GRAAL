class C{  public void tunnelTarget(boolean secure,HttpParams params) throws IOException {  if (params == null) {    throw new IllegalArgumentException("Parameters must not be null.");  }  if ((this.tracker == null) || !this.tracker.isConnected()) {    throw new IllegalStateException("Connection not open.");  }  if (this.tracker.isTunnelled()) {    throw new IllegalStateException("Connection is already tunnelled.");  }  this.connection.update(null,tracker.getTargetHost(),secure,params);  this.tracker.tunnelTarget(secure);}  }
class C{  public void repetitionChanged(SessionEvent event){}  }
class C{  private byte[] read(FSDataInputStream channel,int size){  byte[] byteBffer=new byte[size];  try {    channel.readFully(byteBffer);  } catch (  Exception e) {    LOGGER.error(e,e.getMessage());  }  return byteBffer;}  }
class C{  public static boolean isKeyboardVisible(Activity activity){  Rect r=new Rect();  View activityRoot=getActivityRoot(activity);  int visibleThreshold=Math.round(UIUtil.convertDpToPx(activity,KEYBOARD_VISIBLE_THRESHOLD_DP));  activityRoot.getWindowVisibleDisplayFrame(r);  int heightDiff=activityRoot.getRootView().getHeight() - r.height();  return heightDiff > visibleThreshold;}  }
class C{  public static TimeInterpolator createInterpolator(@IntRange(from=0,to=10) final int interpolatorType){switch (interpolatorType) {case ACCELERATE_DECELERATE_INTERPOLATOR:    return new AccelerateDecelerateInterpolator();case ACCELERATE_INTERPOLATOR:  return new AccelerateInterpolator();case ANTICIPATE_INTERPOLATOR:return new AnticipateInterpolator();case ANTICIPATE_OVERSHOOT_INTERPOLATOR:return new AnticipateOvershootInterpolator();case BOUNCE_INTERPOLATOR:return new BounceInterpolator();case DECELERATE_INTERPOLATOR:return new DecelerateInterpolator();case FAST_OUT_LINEAR_IN_INTERPOLATOR:return new FastOutLinearInInterpolator();case FAST_OUT_SLOW_IN_INTERPOLATOR:return new FastOutSlowInInterpolator();case LINEAR_INTERPOLATOR:return new LinearInterpolator();case LINEAR_OUT_SLOW_IN_INTERPOLATOR:return new LinearOutSlowInInterpolator();case OVERSHOOT_INTERPOLATOR:return new OvershootInterpolator();default :return new LinearInterpolator();}}  }
class C{  @Override public void removeAllElements(){  super.removeAllElements();  m_lookup.clear();  if (m_lookupDirect != null)   m_lookupDirect.clear();}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  public void debug(Throwable t,String s){  if (isEnabled(TraceSystem.DEBUG)) {    traceWriter.write(TraceSystem.DEBUG,module,s,t);  }}  }
class C{  private static int hexCharToInt(char c){  int lower=c | 32;  if (lower >= '0' && lower <= '9')   return lower - '0';  if (lower >= 'a' && lower <= 'f')   return 10 + lower - 'a';  throw new InvalidParameterValueException("Invalid HEX digit: " + c);}  }
class C{  public void resetToPreferredSizes(JSplitPane jc){  if (splitPane != null) {    layoutManager.resetToPreferredSizes();    splitPane.revalidate();    splitPane.repaint();  }}  }
class C{  public void readValue(@Nullable CacheObject val){  this.val.value(this.val.op(),val,false,true);}  }
class C{  private void checkExportability(){  if ((exportPINTextField.getText() == null) || (exportPINTextField.getText().length() < 5) || (fileLocTextField.getText() == null)|| fileLocTextField.getText().length() == 0) {    exportButton.setEnabled(false);    pinToClipboardCheckbox.setEnabled(false);  } else {    exportButton.setEnabled(true);    pinToClipboardCheckbox.setEnabled(true);  }}  }
class C{  public static void notifierUpdate(){  for (int i=0; i < notifiers.length; i++) {    NotifierJNI.NotifierJNIHandlerFunction rnbl=notifiers[i];    long millis=notifierTriggerTimes[i];    if (rnbl != null && millis > 0) {      new Thread(null).start();    }  }}  }
class C{  public NodesInfoRequest plugins(boolean plugins){  this.plugins=plugins;  return this;}  }
class C{  public InputStream toInputStream(){  return new ByteArrayInputStream(m_bytes,m_offset,m_length);}  }
class C{  public void dragOver(DragSourceDragEvent dsde){  System.out.println("[Source] dragOver");  changeCursor(dsde.getDragSourceContext(),dsde.getUserAction() & dsde.getDropAction());  dropAction=dsde.getUserAction() & dsde.getDropAction();  System.out.println("dropAction = " + dropAction);}  }
class C{  public static boolean isWindowOpaque(Window window){  if (window == null) {    throw new NullPointerException("The window argument should not be null.");  }  return window.isOpaque();}  }
class C{  void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException {  this.attributeValue=new byte[length];  System.arraycopy(attributeValue,offset,this.attributeValue,0,length);}  }
class C{  private void doorSubCommand(Player player,String[] args){switch (args[1].toLowerCase()) {case "add":    if (!isFileNull(player)) {      addDoor(player,args[2]);    }  break;case "timer":if (!isFileNull(player)) {  timer(player,args);}break;case "view":if (!isFileNull(player)) {viewFile(player,args[2]);}break;case "delete":if (!isFileNull(player)) {deleteDoor(player,args[2]);}break;case "edge":if (!isFileNull(player)) {doorEdge(player,args[2],args[3]);}break;}}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.N4_GETTER_DECLARATION__OWNER:    return basicSetOwner(null,msgs);case N4JSPackage.N4_GETTER_DECLARATION__ANNOTATION_LIST:  return basicSetAnnotationList(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean isFull(){  return count == (MAX_SIZE - 1);}  }
class C{  public static void gracefullyDisposeOf(final Disposable disposable){  try {    if (disposable != null) {      disposable.dispose();    }  } catch (  final Throwable exception) {    Gdx.app.error("WARN","Unable to dispose: " + disposable + ". Ignored.",exception);  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.CLASS_CONTENT___COMMENT_1:    getComment_1().clear();  getComment_1().addAll((Collection<? extends Comment_>)newValue);return;case UmplePackage.CLASS_CONTENT___CLASS_DEFINITION_1:getClassDefinition_1().clear();getClassDefinition_1().addAll((Collection<? extends ClassDefinition_>)newValue);return;case UmplePackage.CLASS_CONTENT___TRACE_1:getTrace_1().clear();getTrace_1().addAll((Collection<? extends Trace_>)newValue);return;case UmplePackage.CLASS_CONTENT___POSITION_1:getPosition_1().clear();getPosition_1().addAll((Collection<? extends Position_>)newValue);return;case UmplePackage.CLASS_CONTENT___DISPLAY_COLOR_1:getDisplayColor_1().clear();getDisplayColor_1().addAll((Collection<? extends DisplayColor_>)newValue);return;case UmplePackage.CLASS_CONTENT___ABSTRACT_1:getAbstract_1().clear();getAbstract_1().addAll((Collection<? extends Abstract_>)newValue);return;case UmplePackage.CLASS_CONTENT___INVARIANT_1:getInvariant_1().clear();getInvariant_1().addAll((Collection<? extends Invariant_>)newValue);return;case UmplePackage.CLASS_CONTENT___SOFTWARE_PATTERN_1:getSoftwarePattern_1().clear();getSoftwarePattern_1().addAll((Collection<? extends SoftwarePattern_>)newValue);return;case UmplePackage.CLASS_CONTENT___DEPEND_1:getDepend_1().clear();getDepend_1().addAll((Collection<? extends Depend_>)newValue);return;case UmplePackage.CLASS_CONTENT___SYMMETRIC_REFLEXIVE_ASSOCIATION_1:getSymmetricReflexiveAssociation_1().clear();getSymmetricReflexiveAssociation_1().addAll((Collection<? extends SymmetricReflexiveAssociation_>)newValue);return;case UmplePackage.CLASS_CONTENT___ATTRIBUTE_1:getAttribute_1().clear();getAttribute_1().addAll((Collection<? extends Attribute_>)newValue);return;case UmplePackage.CLASS_CONTENT___STATE_MACHINE_1:getStateMachine_1().clear();getStateMachine_1().addAll((Collection<? extends StateMachine_>)newValue);return;case UmplePackage.CLASS_CONTENT___INLINE_ASSOCIATION_1:getInlineAssociation_1().clear();getInlineAssociation_1().addAll((Collection<? extends InlineAssociation_>)newValue);return;case UmplePackage.CLASS_CONTENT___CONCRETE_METHOD_DECLARATION_1:getConcreteMethodDeclaration_1().clear();getConcreteMethodDeclaration_1().addAll((Collection<? extends ConcreteMethodDeclaration_>)newValue);return;case UmplePackage.CLASS_CONTENT___CONSTANT_DECLARATION_1:getConstantDeclaration_1().clear();getConstantDeclaration_1().addAll((Collection<? extends ConstantDeclaration_>)newValue);return;case UmplePackage.CLASS_CONTENT___EXTRA_CODE_1:getExtraCode_1().clear();getExtraCode_1().addAll((Collection<? extends ExtraCode_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static Notification plain(String title,String message,boolean clear){  return show(title,message,MessageType.PLAIN,clear ? 3000 : 0);}  }
class C{  final protected void fireDirtyEvent(){  assertNotReadOnly();  final IDirtyListener l=this.listener;  if (l == null)   return;  if (Thread.interrupted()) {    throw new RuntimeException(new InterruptedException());  }  l.dirtyEvent(this);}  }
class C{  public int hashCode(){  return 236548278 + getBase().hashCode() * 7;}  }
class C{  public String toString(){  return getClass().getName() + "[position:" + position()+ " limit: "+ limit()+ " capacity:"+ capacity()+ "]";}  }
class C{  private Document marshallJaxbElement(Object jaxbElement) throws ParserException {  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();  dbf.setNamespaceAware(true);  Document result=null;  try {    result=dbf.newDocumentBuilder().newDocument();    jaxbContext.createMarshaller().marshal(jaxbElement,result);  } catch (  JAXBException jaxbException) {    log.debug(PROCESS_RST_ERROR,jaxbException);    throw new ParserException(PROCESS_RST_ERROR,jaxbException);  }catch (  ParserConfigurationException pce) {    log.debug(PROCESS_RST_ERROR,pce);    throw new ParserException(PROCESS_RST_ERROR,pce);  }  return result;}  }
class C{  public static PeriodFormatter alternate(){  if (cAlternate == null) {    cAlternate=new PeriodFormatterBuilder().appendLiteral("P").printZeroAlways().minimumPrintedDigits(4).appendYears().minimumPrintedDigits(2).appendMonths().appendDays().appendSeparatorIfFieldsAfter("T").appendHours().appendMinutes().appendSecondsWithOptionalMillis().toFormatter();  }  return cAlternate;}  }
class C{  private ODGFigure createEnhancedGeometryEllipseFigure(Rectangle2D.Double bounds,Map<AttributeKey,Object> a) throws IOException {  ODGEllipseFigure figure=new ODGEllipseFigure();  figure.setBounds(bounds);  figure.setAttributes(a);  return figure;}  }
class C{  @Override public void loadGray(Raster raster) throws IOException {  int stripHeight=Math.min(STRIP_ROWS,rasterLength);  int stripWidth=rasterWidth * samplesPerPixel;  int stripSize=stripWidth * stripHeight * bytesPerSample;  int numStrips=(int)Math.ceil((double)rasterLength / stripHeight);  if (stripSize > Integer.MAX_VALUE) {    throw new IllegalArgumentException("Cannot load PDS file with strip size > " + Integer.MAX_VALUE + ".");  }  if ((minimum == null) || (maximum == null)) {    computeMinMaxFromStrip(dataType,numStrips,stripSize,stripWidth,stripHeight);  }  loadFromStrip(dataType,numStrips,stripSize,stripWidth,stripHeight,raster,true);  minimum=new double[]{0};  maximum=new double[]{255};}  }
class C{  public boolean isFeedbackMessage(){  return (this.getElement(0) == XNetConstants.ACC_INFO_RESPONSE);}  }
class C{  public void saveField(DateTimeFieldType fieldType,String text,Locale locale){  saveField(new SavedField(fieldType.getField(iChrono),text,locale));}  }
class C{  public final void signalAll(){  if (!isHeldExclusively())   throw new IllegalMonitorStateException();  Node first=firstWaiter;  if (first != null)   doSignalAll(first);}  }
class C{  public boolean isImportOfExistingVM(){  String rc=settings.getParameters().get(TS_IMPORT_EXISTING_VM);  return rc != null && rc.toLowerCase().equals("true");}  }
class C{  public AuthenticationToken removeAuthenticationToken(String host,String realm){  return this.authenticationTokens.remove(host.concat(realm));}  }
class C{  public SnapshotsStatusRequest(String repository,String[] snapshots){  this.repository=repository;  this.snapshots=snapshots;}  }
class C{  public static String normalizeRequestUri(HttpServletRequest httpRequest){  String retVal=httpRequest.getRequestURI();  String contextPath=httpRequest.getContextPath();  if (retVal.startsWith(contextPath)) {    retVal=retVal.substring(contextPath.length());  }  String servletPath=httpRequest.getServletPath();  if (retVal.startsWith(servletPath)) {    retVal=retVal.substring(servletPath.length());  }  return retVal;}  }
class C{  public List<JCVariableDecl> translateVarDefs(List<JCVariableDecl> trees){  for (List<JCVariableDecl> l=trees; l.nonEmpty(); l=l.tail)   l.head=translate(l.head);  return trees;}  }
class C{  public static String[] readStrings(String filename){  return new In(filename).readAllStrings();}  }
class C{  public Analyzer saveReferenceSet(File file) throws IOException {  PopulationIO.writeObjectives(file,getReferenceSet());  return this;}  }
class C{  private static void initMediaTypes(){  XML_MEDIA_TYPES.add(APPLICATION_XML);  XML_MEDIA_TYPES.addAll(MEDIA_TYPE_REGISTRY.getAliases(APPLICATION_XML));  TEXT_MEDIA_TYPES.add(TEXT_PLAIN);  TEXT_MEDIA_TYPES.addAll(MEDIA_TYPE_REGISTRY.getAliases(TEXT_PLAIN));  MediaType gzipMediaType=MediaType.parse("application/gzip");  GZ_MEDIA_TYPES.add(gzipMediaType);  GZ_MEDIA_TYPES.addAll(MEDIA_TYPE_REGISTRY.getAliases(gzipMediaType));}  }
class C{  public synchronized boolean isValid(){  return mRefCount > 0;}  }
class C{  @Override public boolean checkTelegram(char[] buffer){  return (buffer.length >= java.lang.Math.max(getHeaderLength() + getFooterLength(),getParamInt(FLD_ID_LEN,buffer)));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.248 -0500",hash_original_method="6DA29D8692407706B9B05391AF333993",hash_generated_method="56F038CB529152D185A2CBDA69DBA81D") public RecordRouteHeader createRecordRouteHeader(Address address){  if (address == null)   throw new NullPointerException("Null argument!");  RecordRoute recordRoute=new RecordRoute();  recordRoute.setAddress(address);  return recordRoute;}  }
class C{  public static String buildFileiconUrl(String msgId,String mimeType){  StringBuilder iconName=new StringBuilder("thumbnail_");  iconName.append(msgId);  String extension=MimeManager.getInstance().getExtensionFromMimeType(mimeType);  if (extension != null) {    iconName.append(".");    iconName.append(extension);    return iconName.toString();  }  throw new IllegalArgumentException("Invalid mime type for image");}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  java.util.Vector vnames=cstate.getVariableNames();  if (null != m_matchPattern)   m_matchPattern.fixupVariables(vnames,sroot.getComposeState().getGlobalsSize());  cstate.resetStackFrameSize();  m_inArgsSize=0;}  }
class C{  Entry(Object key,V value,ReferenceQueue<Object> queue,int hash,Entry<K,V> next){  super(key,queue);  this.value=value;  this.hash=hash;  this.next=next;}  }
class C{  private static String findJarServiceProviderName(String factoryId){  SecuritySupport ss=SecuritySupport.getInstance();  String serviceId=SERVICES_PATH + factoryId;  InputStream is=null;  ClassLoader cl=findClassLoader();  is=ss.getResourceAsStream(cl,serviceId);  if (is == null) {    ClassLoader current=ObjectFactory.class.getClassLoader();    if (cl != current) {      cl=current;      is=ss.getResourceAsStream(cl,serviceId);    }  }  if (is == null) {    return null;  }  debugPrintln("found jar resource=" + serviceId + " using ClassLoader: "+ cl);  BufferedReader rd;  try {    rd=new BufferedReader(new InputStreamReader(is,"UTF-8"));  } catch (  java.io.UnsupportedEncodingException e) {    rd=new BufferedReader(new InputStreamReader(is));  }  String factoryClassName=null;  try {    factoryClassName=rd.readLine();  } catch (  IOException x) {    return null;  } finally {    try {      rd.close();    } catch (    IOException exc) {    }  }  if (factoryClassName != null && !"".equals(factoryClassName)) {    debugPrintln("found in resource, value=" + factoryClassName);    return factoryClassName;  }  return null;}  }
class C{  public void visitSource(String source,String debug){  if (cv != null) {    cv.visitSource(source,debug);  }}  }
class C{  private void streamPosition(int pos){  in.position(pos);}  }
class C{  private AstNode propertyAccess(int tt,AstNode pn) throws IOException {  if (pn == null)   codeBug();  int memberTypeFlags=0, lineno=ts.lineno, dotPos=ts.tokenBeg;  consumeToken();  if (tt == Token.DOTDOT) {    mustHaveXML();    memberTypeFlags=Node.DESCENDANTS_FLAG;  }  if (!compilerEnv.isXmlAvailable()) {    mustMatchToken(Token.NAME,"msg.no.name.after.dot");    Name name=createNameNode(true,Token.GETPROP);    PropertyGet pg=new PropertyGet(pn,name,dotPos);    pg.setLineno(lineno);    return pg;  }  AstNode ref=null;  int token=nextToken();switch (token) {case Token.THROW:    saveNameTokenData(ts.tokenBeg,"throw",ts.lineno);  ref=propertyName(-1,"throw",memberTypeFlags);break;case Token.NAME:ref=propertyName(-1,ts.getString(),memberTypeFlags);break;case Token.MUL:saveNameTokenData(ts.tokenBeg,"*",ts.lineno);ref=propertyName(-1,"*",memberTypeFlags);break;case Token.XMLATTR:ref=attributeAccess();break;default :if (compilerEnv.isReservedKeywordAsIdentifier()) {String name=Token.keywordToName(token);if (name != null) {saveNameTokenData(ts.tokenBeg,name,ts.lineno);ref=propertyName(-1,name,memberTypeFlags);break;}}reportError("msg.no.name.after.dot");return makeErrorNode();}boolean xml=ref instanceof XmlRef;InfixExpression result=xml ? new XmlMemberGet() : new PropertyGet();if (xml && tt == Token.DOT) result.setType(Token.DOT);int pos=pn.getPosition();result.setPosition(pos);result.setLength(getNodeEnd(ref) - pos);result.setOperatorPosition(dotPos - pos);result.setLineno(lineno);result.setLeft(pn);result.setRight(ref);return result;}  }
class C{  @Override final public boolean isOptional(){  return false;}  }
class C{  private static double macheps(){  if (vm_epsilon >= 1.0) {    while (1.0 + vm_epsilon / 2.0 != 1.0) {      vm_epsilon/=2.0;    }  }  return vm_epsilon;}  }
class C{  @SuppressWarnings("all") protected boolean writeObjectType(Output out,Object obj){  if (obj instanceof ObjectMap) {    out.writeObject((Map)obj,this);  } else   if (obj instanceof Map) {    out.writeMap((Map)obj,this);  } else   if (obj instanceof RecordSet) {    out.writeRecordSet((RecordSet)obj,this);  } else {    out.writeObject(obj,this);  }  return true;}  }
class C{  private void doPrint(PrintStream writer,List<String> args){  String rootPath=mAppContext.getApplicationInfo().dataDir + "/shared_prefs";  String offsetPrefix=args.isEmpty() ? "" : args.get(0);  String keyPrefix=(args.size() > 1) ? args.get(1) : "";  printRecursive(writer,rootPath,"",offsetPrefix,keyPrefix);}  }
class C{  public static void mapColumns(IndexColumn[] indexColumns,Table table){  for (  IndexColumn col : indexColumns) {    col.column=table.getColumn(col.columnName);  }}  }
class C{  @Override public void mapChanged(ColorMap cMap){  cMap.getColorTable(lutSize,table);  colorTable.setImage(colorTableImage);  needsRender.set(true);}  }
class C{  public void requestPreviewFrame(Handler handler,int message){  if (camera != null && previewing) {    previewCallback.setHandler(handler,message);    if (useOneShotPreviewCallback) {      camera.setOneShotPreviewCallback(previewCallback);    } else {      camera.setPreviewCallback(previewCallback);    }  }}  }
class C{  public String userMessage(){switch (type) {case CONVERGE:    return "converges after " + steps.size() + " steps";case CYCLE:  return "cycles between " + steps.size() + " steps";case DIVERGE:return "diverges after " + steps.size() + " steps";default :throw Unhandled.enumException(type);}}  }
class C{  public final boolean isPackagePrivate(){  return !isPrivate() && !isPublic() && !isProtected();}  }
class C{  public boolean isSetNodeStore(){  return this.nodeStore != null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public int read(byte bytes[],int off,int length) throws IOException {  if (binaryMode)   return super.read(bytes,off,length);  int c;  int offStart=off;  while (--length >= 0) {    c=read();    if (c == -1)     break;    bytes[off++]=(byte)c;  }  return (off > offStart) ? off - offStart : -1;}  }
class C{  public void zoom(Point2D zoomPt,double zoomFactor){  double zoomScale=getViewport().getScale() * zoomFactor;  viewport.zoom(zoomPt,zoomScale);}  }
class C{  @Override public Address clientAddress(){  return clientAddress;}  }
class C{  private boolean checkRow(Cursor c,int colQuery,int colDisp1,int colDisp2,String matchDisplay1,String matchDisplay2){  String query=c.getString(colQuery);  String display1=c.getString(colDisp1);  String display2=(colDisp2 >= 0) ? c.getString(colDisp2) : null;  assertEquals(query,display1);  boolean result=true;  if (matchDisplay1 != null) {    result=result && (display1 != null) && display1.startsWith(matchDisplay1);  }  if (matchDisplay2 != null) {    result=result && (display2 != null) && display2.startsWith(matchDisplay2);  }  return result;}  }
class C{  private static void sqlQuery(){  IgniteCache<AffinityKey<Long>,Person> cache=Ignition.ignite().cache(PERSON_CACHE);  String sql="salary > ? and salary <= ?";  print("People with salaries between 0 and 1000 (queried with SQL query): ",cache.query(new SqlQuery<AffinityKey<Long>,Person>(Person.class,sql).setArgs(0,1000)).getAll());  print("People with salaries between 1000 and 2000 (queried with SQL query): ",cache.query(new SqlQuery<AffinityKey<Long>,Person>(Person.class,sql).setArgs(1000,2000)).getAll());}  }
class C{  @Override public boolean isArmed(){  boolean b=shouldActLikeButton() || (pressedWhenPopupVisible && comboBox.isPopupVisible());  return b ? isPressed() : super.isArmed();}  }
class C{  @SuppressWarnings("unchecked") private static void handleMethodNode(CallGraph callGraph,ClassNode cn,MethodNode mn,int depth){  handlePublicMethodNode(callGraph,cn,mn);  if (!ExceptionTransformationClassAdapter.methodExceptionMap.containsKey(cn.name))   ExceptionTransformationClassAdapter.methodExceptionMap.put(cn.name,new LinkedHashMap<>());  String methodNameDesc=mn.name + mn.desc;  Set<Type> exceptionTypes=new LinkedHashSet<>();  if (mn.exceptions != null) {    for (    String exceptionName : ((List<String>)mn.exceptions)) {      exceptionTypes.add(Type.getType(exceptionName));    }  }  ExceptionTransformationClassAdapter.methodExceptionMap.get(cn.name).put(methodNameDesc,exceptionTypes);  InsnList instructions=mn.instructions;  Iterator<AbstractInsnNode> iterator=instructions.iterator();  while (iterator.hasNext()) {    AbstractInsnNode insn=iterator.next();    if (insn instanceof MethodInsnNode) {      handleMethodInsnNode(callGraph,cn,mn,(MethodInsnNode)insn,depth + 1);    }  }}  }
class C{  public void resetStacks(final float[] values){  Arrays.fill(stack,0);  Arrays.fill(stackType,0);  stkPtr=0;  stkTypePtr=0;  for (  final float value : values) {    if (debug) {      System.out.println("Added to stack " + value + " count="+ values.length);    }    push(value,PS_REAL);  }}  }
class C{  public void clear(){  _nullValue=NULL;  for (int i=0; i < _values.length; i++) {    _keys[i]=null;    _flags[i]=0;    _values[i]=0;  }  _size=0;}  }
class C{  public void testComputeLocationWhenJBossHarPackaging() throws Exception {  Deployable deployableElement=new Deployable();  deployableElement.setGroupId("projectGroupId");  deployableElement.setArtifactId("projectArtifactId");  deployableElement.setType("har");  this.mockLog.expects(never()).method("warn");  String location=deployableElement.computeLocation(createDefaultProject("jboss-har",null));  assertTrue(location,location.endsWith("projectFinalName.har"));}  }
class C{  public Master(InputStream in,Name origin,long ttl){  if (origin != null && !origin.isAbsolute()) {    throw new RelativeNameException(origin);  }  st=new Tokenizer(in);  this.origin=origin;  defaultTTL=ttl;}  }
class C{  private String generateAuthorizationHeader(String method,String requestUri,String body) throws InvalidArgumentException {  digest.updateNonceParameters();  UserProfile profile=ImsModule.getImsUserProfile();  String user=profile.getXdmServerLogin();  String password=profile.getXdmServerPassword();  String response=digest.calculateResponse(user,password,method,requestUri,digest.buildNonceCounter(),body);  StringBuilder auth=new StringBuilder("Authorization: Digest username=\"").append(user).append("\",realm=\"").append(digest.getRealm()).append("\",nonce=\"").append(digest.getNonce()).append("\",uri=\"").append(requestUri).append("\"");  String opaque=digest.getOpaque();  if (opaque != null) {    auth.append(",opaque=\"").append(opaque).append("\"");  }  String qop=digest.getQop();  if ((qop != null) && qop.startsWith("auth")) {    auth.append(",qop=\"").append(qop).append("\",nc=").append(digest.buildNonceCounter()).append(",cnonce=\"").append(digest.getCnonce()).append("\",response=\"").append(response).append("\"");  }  return auth.toString();}  }
class C{  public static void stringToGsm8BitUnpackedField(String s,byte dest[],int offset,int length){  int outByteIndex=offset;  SparseIntArray charToLanguageTable=sCharsToGsmTables[0];  SparseIntArray charToShiftTable=sCharsToShiftTables[0];  for (int i=0, sz=s.length(); i < sz && (outByteIndex - offset) < length; i++) {    char c=s.charAt(i);    int v=charToLanguageTable.get(c,-1);    if (v == -1) {      v=charToShiftTable.get(c,-1);      if (v == -1) {        v=charToLanguageTable.get(' ',' ');      } else {        if (!(outByteIndex + 1 - offset < length)) {          break;        }        dest[outByteIndex++]=GSM_EXTENDED_ESCAPE;      }    }    dest[outByteIndex++]=(byte)v;  }  while ((outByteIndex - offset) < length) {    dest[outByteIndex++]=(byte)0xff;  }}  }
class C{  public void zoneCommit(Integer vsanId) throws NetworkDeviceControllerException {  if (!inConfigMode) {    throw NetworkDeviceControllerException.exceptions.mdsDeviceNotInConfigMode();  }  if (lastPrompt != SSHPrompt.MDS_CONFIG) {    throw NetworkDeviceControllerException.exceptions.mdsUnexpectedLastPrompt(lastPrompt.toString(),SSHPrompt.MDS_CONFIG.toString());  }  SSHPrompt[] prompts={SSHPrompt.MDS_CONFIG};  StringBuilder buf=new StringBuilder();  String payload=MessageFormat.format(MDSDialogProperties.getString("MDSDialog.zoneCommit.zonecommitvsan.cmd"),vsanId.toString());  lastPrompt=sendWaitFor(payload,defaultTimeout,prompts,buf);  inSession=false;}  }
class C{  public final AlertDialog shareText(CharSequence text){  return shareText(text,"TEXT_TYPE");}  }
class C{  public void resolve(BlockScope scope){}  }
class C{  public static void writeStaticField(Class<?> klass,String fieldName,Object value) throws NoSuchFieldException, IllegalFieldValue {  writeAvailableField(klass,null,fieldName,value);}  }
class C{  public void startCastControllerActivity(Context context,Bundle mediaWrapper,int position,boolean shouldStart,JSONObject customData){  Intent intent=new Intent(context,VideoCastControllerActivity.class);  intent.putExtra(EXTRA_MEDIA,mediaWrapper);  intent.putExtra(EXTRA_START_POINT,position);  intent.putExtra(EXTRA_SHOULD_START,shouldStart);  if (null != customData) {    intent.putExtra(EXTRA_CUSTOM_DATA,customData.toString());  }  context.startActivity(intent);}  }
class C{  public final void removeMessages(int what){  mExec.removeMessages(what);}  }
class C{  public Base64OutputStream(OutputStream outputStream){  this(outputStream,76);}  }
class C{  private int drain(byte[] b,int off,int len){  int remaining=Math.min(len,byteBuffer.remaining());  byteBuffer.get(b,off,remaining);  return remaining;}  }
class C{  public void addAlternateName(AlternateName alternateName){  if (alternateName != null) {    if (alternateName.getName() != null && alternateName.getName().length() > MAX_ALTERNATENAME_SIZE) {      logger.warn("alternate name " + alternateName.getName() + " is too long");    } else {      alternateName.setGisFeature(this);      Set<AlternateName> currentAlternateNames=getAlternateNames();      if (currentAlternateNames == null) {        currentAlternateNames=new HashSet<AlternateName>();      }      currentAlternateNames.add(alternateName);      this.setAlternateNames(currentAlternateNames);    }  }}  }
class C{  public void updateCircle(float latPoint,float lonPoint,int w,int h,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkCircle.write(latPoint,lonPoint,w,h,properties,link.dos);}  }
class C{  public boolean channelNumberEquals(char channelNumber){  return (this.channelNumber == channelNumber);}  }
class C{  public Process exec(String prog,String[] envp,File directory) throws java.io.IOException {  if (prog == null) {    throw new NullPointerException();  }  if (prog.length() == 0) {    throw new IllegalArgumentException();  }  if (envp != null) {    if (envp.length != 0) {      for (int i=0; i < envp.length; i++) {        if (envp[i] == null) {          throw new NullPointerException("An element of envp shouldn't be empty.");        }      }    } else {      envp=null;    }  }  StringTokenizer st=new StringTokenizer(prog);  String[] progArray=new String[st.countTokens()];  int i=0;  while (st.hasMoreTokens()) {    progArray[i++]=st.nextToken();  }  return exec(progArray,envp,directory);}  }
class C{  public DateMidnight(Chronology chronology){  super(chronology);}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  @Override public void onInsertComplete(int taskId,Object cookie,long insertRowId){  if (taskId == AppConstants.QueryTokens.INSERT_WALLPOST && insertRowId != -1) {    Logger.i(TAG,"Successfully inserted at row no. " + insertRowId);  }}  }
class C{  public String toString(){  return " cols=" + imgInfo.cols + " bpc="+ imgInfo.bitDepth+ " size="+ scanline.length;}  }
class C{  public boolean isTeamingSupported(){  return teamingSupported;}  }
class C{  public DisconnectedLogDestination(LogDestination destination){  this.application=destination.getApplication();  this.root=destination.isRoot();  this.context=destination.isContext();  this.name=destination.getName();  this.index=destination.getIndex();  this.targetClass=destination.getTargetClass();  this.conversionPattern=destination.getConversionPattern();  this.file=destination.getFile();  this.logType=destination.getLogType();  this.size=destination.getSize();  this.lastModified=destination.getLastModified();  this.level=destination.getLevel();  this.validLevels=destination.getValidLevels();  this.encoding=destination.getEncoding();}  }
class C{  public final void sendMessage(int what,int arg1){  SmHandler smh=mSmHandler;  if (smh == null)   return;  smh.sendMessage(obtainMessage(what,arg1));}  }
class C{  public static String toRealPath(String fileName){  return FilePath.get(fileName).toRealPath().toString();}  }
class C{  public String constructTSDBMetricName(){  StringBuilder sb=new StringBuilder(getScope());  if (_namespace != null && !_namespace.isEmpty()) {    sb.append(getNamespace());  }  return sb.toString();}  }
class C{  @Inject public RemoveFromIndexPresenter(RemoveFromIndexView view,EventBus eventBus,GitServiceClient service,GitOutputPartPresenter console,GitLocalizationConstant constant,AppContext appContext,SelectionAgent selectionAgent,NotificationManager notificationManager,EditorAgent editorAgent,ProjectExplorerPresenter projectExplorer){  this.view=view;  this.eventBus=eventBus;  this.console=console;  this.projectExplorer=projectExplorer;  this.view.setDelegate(this);  this.service=service;  this.constant=constant;  this.appContext=appContext;  this.selectionAgent=selectionAgent;  this.notificationManager=notificationManager;  this.editorAgent=editorAgent;}  }
class C{  @Override public Object clone(){  try {    CellConstraints c=(CellConstraints)super.clone();    c.insets=(Insets)insets.clone();    return c;  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  public static Border createDashedBorder(int thickness){  return createCSSBorder(TYPE_DASHED,thickness);}  }
class C{  public final TestSubscriber assertNotComplete(){  String prefix="";  boolean passed=true;  if (done.getCount() != 0) {    prefix="Subscriber still running! ";  }  long c=completions;  if (c == 1) {    fail(prefix,"Completed!",errors);    fail("completed");    passed=false;  } else   if (c > 1) {    fail(prefix,"Multiple completions: " + c,errors);    fail("multiple completions");    passed=false;  }  pass("not complete",passed);  return this;}  }
class C{  public Random(){}  }
class C{  @Override public int isNullable(int columnIndex){  return ResultSetMetaData.columnNullableUnknown;}  }
class C{  protected void startup(final int callsBeforeExceptionIsThrown,final Exception whatToThrow) throws Exception {  mockStore();  configuration=PowerMock.createStrictMock(HGConfiguration.class);  EasyMock.expect(configuration.getHandleFactory()).andReturn((HGHandleFactory)Class.forName(HGHANDLEFACTORY_IMPLEMENTATION_CLASS_NAME).newInstance());  EasyMock.expect(configuration.isTransactional()).andReturn(true).times(callsBeforeExceptionIsThrown);  EasyMock.expect(configuration.isTransactional()).andThrow(whatToThrow);  replay();  storage.startup(store,configuration);}  }
class C{  public static ToHitData toHit(IGame game,int attackerId,Targetable target,int arm){  final Entity ae=game.getEntity(attackerId);  int targetId=Entity.NONE;  Entity te=null;  if ((ae == null) || (target == null)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Attacker or target not valid");  }  if (target.getTargetType() == Targetable.TYPE_ENTITY) {    te=(Entity)target;    targetId=target.getTargetId();  }  final int armLoc=(arm == BrushOffAttackAction.RIGHT) ? Mech.LOC_RARM : Mech.LOC_LARM;  ToHitData toHit;  if (!(ae instanceof Mech)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Only mechs can brush off swarming infantry or iNarc Pods");  }  if ((arm != BrushOffAttackAction.RIGHT) && (arm != BrushOffAttackAction.LEFT)) {    throw new IllegalArgumentException("Arm must be LEFT or RIGHT");  }  if (((targetId != ae.getSwarmAttackerId()) || (te == null) || !(te instanceof Infantry)) && (target.getTargetType() != Targetable.TYPE_INARC_POD)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Can only brush off swarming infantry or iNarc Pods");  }  if (ae.entityIsQuad()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Attacker is a quad");  }  if (ae.getArmsFlipped()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Arms are flipped to the rear. Can not punch.");  }  if (ae.isLocationBad(armLoc)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Arm missing");  }  if (ae.hasQuirk(OptionsConstants.QUIRK_NEG_NO_ARMS)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"No/minimal arms");  }  if (!ae.hasWorkingSystem(Mech.ACTUATOR_SHOULDER,armLoc)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Shoulder destroyed");  }  if (ae.weaponFiredFrom(armLoc)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Weapons fired from arm this turn");  }  if ((te != null) && te.isMakingDfa()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is making a DFA attack");  }  if (ae.isProne()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Attacker is prone");  }  if ((target.getTargetType() == Targetable.TYPE_BUILDING) || (target.getTargetType() == Targetable.TYPE_BLDG_IGNITE) || (target.getTargetType() == Targetable.TYPE_FUEL_TANK)|| (target.getTargetType() == Targetable.TYPE_FUEL_TANK_IGNITE)|| (target.getTargetType() == Targetable.TYPE_HEX_CLEAR)|| (target.getTargetType() == Targetable.TYPE_HEX_IGNITE)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Invalid attack");  }  toHit=new ToHitData(ae.getCrew().getPiloting(),"base PSR");  toHit.addModifier(4,"brush off swarming infantry");  if (!ae.hasWorkingSystem(Mech.ACTUATOR_UPPER_ARM,armLoc)) {    toHit.addModifier(2,"Upper arm actuator destroyed");  }  if (!ae.hasWorkingSystem(Mech.ACTUATOR_LOWER_ARM,armLoc)) {    toHit.addModifier(2,"Lower arm actuator missing or destroyed");  }  if (ae.hasFunctionalArmAES(armLoc)) {    toHit.addModifier(-1,"AES modifer");  }  final boolean hasClaws=((Mech)ae).hasClaw(armLoc);  final boolean hasLowerArmActuator=ae.hasSystem(Mech.ACTUATOR_LOWER_ARM,armLoc);  final boolean hasHandActuator=ae.hasSystem(Mech.ACTUATOR_HAND,armLoc);  if (!hasClaws && !hasHandActuator && hasLowerArmActuator) {    toHit.addModifier(1,"Hand actuator missing");  } else   if (hasHandActuator && !hasClaws && !ae.hasWorkingSystem(Mech.ACTUATOR_HAND,armLoc)) {    toHit.addModifier(1,"Hand actuator destroyed");  } else   if (hasClaws) {    toHit.addModifier(1,"Using Claws");  }  if (((Mech)ae).getCockpitType() == Mech.COCKPIT_TORSO_MOUNTED) {    int sensorHits=ae.getBadCriticals(CriticalSlot.TYPE_SYSTEM,Mech.SYSTEM_SENSORS,Mech.LOC_HEAD);    int sensorHits2=ae.getBadCriticals(CriticalSlot.TYPE_SYSTEM,Mech.SYSTEM_SENSORS,Mech.LOC_CT);    if ((sensorHits + sensorHits2) == 3) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Sensors Completely Destroyed for Torso-Mounted Cockpit");    } else     if (sensorHits == 2) {      toHit.addModifier(4,"Head Sensors Destroyed for Torso-Mounted Cockpit");    }  }  Compute.modifyPhysicalBTHForAdvantages(ae,te,toHit,game);  if (te != null) {    for (    Mounted mount : te.getMisc()) {      EquipmentType equip=mount.getType();      if (equip.hasFlag(MiscType.F_MAGNET_CLAW)) {        toHit.addModifier(1,"defender has magnetic claws");        break;      }    }  }  return toHit;}  }
class C{  public DrawerBuilder withHasStableIds(boolean hasStableIds){  this.mHasStableIds=hasStableIds;  if (mAdapter != null) {    mAdapter.setHasStableIds(hasStableIds);  }  return this;}  }
class C{  public static long sumFirstIntegers(final long i){  return ((i - 1L) * i) >> 1;}  }
class C{  public LongIteratorSpliterator(java8.util.PrimitiveIterator.OfLong iterator,long size,int characteristics){  this.it=iterator;  this.est=size;  this.characteristics=(characteristics & Spliterator.CONCURRENT) == 0 ? characteristics | Spliterator.SIZED | Spliterator.SUBSIZED : characteristics;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.550 -0400",hash_original_method="64379275E477684BC8BE083C929F3957",hash_generated_method="870C99CBACE0EF64545C61597D41ABD6") public Tailer(File file,TailerListener listener,long delayMillis,boolean end,int bufSize){  this(file,listener,delayMillis,end,false,bufSize);}  }
class C{  public long optLong(String key,long defaultValue){  try {    return getLong(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  private static void removeJavaStuff(Document document){  document.setDocumentPartitioner(IJavaScriptPartitions.JAVA_PARTITIONING,null);}  }
class C{  private String requestServer(String target,String method,JSONObject params) throws IOException {  StringBuffer result=new StringBuffer();  String targetURL=url + "index.php/apps/notes/api/v0.2/" + target;  HttpURLConnection con=(HttpURLConnection)new URL(targetURL).openConnection();  con.setRequestMethod(method);  con.setRequestProperty("Authorization","Basic " + new String(Base64.encode((username + ":" + password).getBytes(),Base64.NO_WRAP)));  con.setConnectTimeout(10 * 1000);  Log.d(getClass().getSimpleName(),method + " " + targetURL);  if (params != null) {    Log.d(getClass().getSimpleName(),"Params: " + params);    con.setFixedLengthStreamingMode(params.toString().getBytes().length);    con.setRequestProperty("Content-Type",application_json);    con.setDoOutput(true);    OutputStream os=con.getOutputStream();    os.write(params.toString().getBytes());    os.flush();    os.close();  }  BufferedReader rd=new BufferedReader(new InputStreamReader(con.getInputStream()));  String line;  while ((line=rd.readLine()) != null) {    result.append(line);  }  return result.toString();}  }
class C{  public void addRow(Expression[] expr){  list.add(expr);}  }
class C{  public Resource updateAlternateIdentifierForRegistry(Resource resource){  Eml eml=resource.getEml();  if (eml != null) {    List<String> currentIds=eml.getAlternateIdentifiers();    if (currentIds != null) {      List<String> ids=new ArrayList<String>();      for (      String id : currentIds) {        ids.add(id.toLowerCase());      }      if (resource.isRegistered()) {        UUID key=resource.getKey();        if (key != null && !ids.contains(key.toString().toLowerCase())) {          currentIds.add(key.toString());          saveEml(resource);          if (cfg.debug()) {            log.info("GBIF Registry UUID added to Resource's list of alternate identifiers");          }        }      }    }  } else {    resource.setEml(new Eml());  }  return resource;}  }
class C{  public Shape createScrollButtonTogetherDecrease(int x,int y,int w,int h){  path.reset();  path.moveTo(x + w,y);  path.lineTo(x + w,y + h);  path.lineTo(x,y + h);  addScrollGapPath(x,y,w,h,false);  path.closePath();  return path;}  }
class C{  protected int index(int rank){  return offset + offsets[zero + rank * stride];}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public void send(final byte[] theBytes,final NetAddress theNetAddress){  if (_myNetAddress.isvalid()) {    send(theBytes,theNetAddress.inetaddress(),theNetAddress.port());  }}  }
class C{  private int evictToRecoverBytes(int bytesToRecover){  int entriesToEvict=0;  if (bytesToRecover > 0) {    for (int j=dynamicTable.length - 1; j >= nextHeaderIndex && bytesToRecover > 0; j--) {      bytesToRecover-=dynamicTable[j].hpackSize;      dynamicTableByteCount-=dynamicTable[j].hpackSize;      headerCount--;      entriesToEvict++;    }    System.arraycopy(dynamicTable,nextHeaderIndex + 1,dynamicTable,nextHeaderIndex + 1 + entriesToEvict,headerCount);    nextHeaderIndex+=entriesToEvict;  }  return entriesToEvict;}  }
class C{  public static boolean isTranslucentStatusBar(Context context){  Window w=unwrap(context).getWindow();  WindowManager.LayoutParams lp=w.getAttributes();  int flags=lp.flags;  if ((flags & WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION) == WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION) {    return true;  }  return false;}  }
class C{  String encodePasswordRecoveryLink(PlatformUser pUser,long timeStamp,String marketplaceId) throws UnsupportedEncodingException {  StringBuffer url=new StringBuffer();  String[] urlParam=new String[3];  urlParam[0]=pUser.getUserId();  urlParam[1]=Long.toString(timeStamp);  urlParam[2]=(marketplaceId == null) ? "" : marketplaceId;  url.append(configs.getBaseURL());  removeTrailingSlashes(url);  if (!isPureCustomer) {    url.append("/public/changePassword.jsf?").append(tokenString);  } else {    url.append("/marketplace/changePassword.jsf?").append((marketplaceId != null) ? "mId=" + marketplaceId + "&" : "").append(tokenString);  }  url.append(generateToken(urlParam));  url.append(tailString);  return url.toString();}  }
class C{  public static void startChatServiceMain(){  final Intent intent=new Intent(sStaticContext,ChatService.class);  intent.setAction(AppConstants.ACTION_DISCONNECT_CHAT);  sStaticContext.startService(intent);}  }
class C{  public void assignPersistenceId(long id){  persistenceId=id;}  }
class C{  public Value value(){  return value;}  }
class C{  public Commitment commit(byte[] message){  if (message.length > byteLength / 2) {    throw new DataLengthException("Message to be committed to too large for digest.");  }  byte[] w=new byte[byteLength - message.length];  random.nextBytes(w);  return new Commitment(w,calculateCommitment(w,message));}  }
class C{  @Override protected void buildSprites(final Map<Object,Sprite> map,final Sprite tiles,final int width,final int height){  this.width=width;  this.height=height;  super.buildSprites(map,tiles,width,height);}  }
class C{  public static synchronized void init(){  if (detector == null) {    detector=new ThreadDeadlockDetector();  }}  }
class C{  public void addRectangle(float lt1,float ln1,float lt2,float ln2,int lType,LinkProperties properties) throws IOException {  LinkRectangle.write(lt1,ln1,lt2,ln2,lType,properties,link.dos);}  }
class C{  public static ReuseResult loadReuse(Uri uri,Context context,Bitmap dest) throws ImageLoadException {  return loadBitmapReuse(new UriSource(uri,context),dest);}  }
class C{  private void sendError(String message){  DebugLog.e(message);  PutDataMapRequest data=PutDataMapRequest.createWithAutoAppendedId("/error");  data.getDataMap().putString("error_message",message);  syncDataItem(data);}  }
class C{  public CF2(){  this(10);}  }
class C{  public static void assertUpdateTolerantErrors(String assertionMsgPrefix,UpdateResponse response,ExpectedErr... expectedErrs){  @SuppressWarnings("unchecked") List<SimpleOrderedMap<String>> errors=(List<SimpleOrderedMap<String>>)response.getResponseHeader().get("errors");  assertNotNull(assertionMsgPrefix + ": Null errors: " + response.toString(),errors);  assertEquals(assertionMsgPrefix + ": Num error ids: " + errors.toString(),expectedErrs.length,errors.size());  for (  SimpleOrderedMap<String> err : errors) {    String assertErrPre=assertionMsgPrefix + ": " + err.toString();    String id=err.get("id");    assertNotNull(assertErrPre + " ... null id",id);    String type=err.get("type");    assertNotNull(assertErrPre + " ... null type",type);    String message=err.get("message");    assertNotNull(assertErrPre + " ... null message",message);    boolean found=false;    for (    ExpectedErr expected : expectedErrs) {      if (expected.type.equals(type) && expected.id.equals(id) && (null == expected.msgSubStr || message.contains(expected.msgSubStr))) {        found=true;        break;      }    }    assertTrue(assertErrPre + " ... unexpected err in: " + response.toString(),found);  }}  }
class C{  public static void launch(YouTubeVideo youTubeVideo,Context context){  if (youTubeVideo != null) {    if (useOfficialYouTubePlayer(context)) {      launchOfficialYouTubePlayer(youTubeVideo.getId(),context);    } else {      launchCustomYouTubePlayer(youTubeVideo,context);    }  }}  }
class C{  public LUDecomposition(DenseMatrix A){  LU=A.vals;  m=A.m;  n=A.n;  piv=new int[m];  for (int i=0; i < m; i++)   piv[i]=i;  pivsign=1;  double[] LUrowi;  double[] LUcolj=new double[m];  for (int j=0; j < n; j++) {    for (int i=0; i < m; i++)     LUcolj[i]=LU[i][j];    for (int i=0; i < m; i++) {      LUrowi=LU[i];      int kmax=Math.min(i,j);      double s=0.0;      for (int k=0; k < kmax; k++)       s+=LUrowi[k] * LUcolj[k];      LUrowi[j]=LUcolj[i]-=s;    }    int p=j;    for (int i=j + 1; i < m; i++) {      if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p]))       p=i;    }    if (p != j) {      for (int k=0; k < n; k++) {        double t=LU[p][k];        LU[p][k]=LU[j][k];        LU[j][k]=t;      }      int k=piv[p];      piv[p]=piv[j];      piv[j]=k;      pivsign=-pivsign;    }    if (j < m & LU[j][j] != 0.0) {      for (int i=j + 1; i < m; i++)       LU[i][j]/=LU[j][j];    }  }}  }
class C{  private void deliverBacklog(){  Iterator<StoredMessage> backlog=service.messageStore.getAllArrivedMessages(clientHandle);  while (backlog.hasNext()) {    StoredMessage msgArrived=backlog.next();    Bundle resultBundle=messageToBundle(msgArrived.getMessageId(),msgArrived.getTopic(),msgArrived.getMessage());    resultBundle.putString(MqttServiceConstants.CALLBACK_ACTION,MqttServiceConstants.MESSAGE_ARRIVED_ACTION);    service.callbackToActivity(clientHandle,Status.OK,resultBundle);  }}  }
class C{  void encodeAtom() throws IOException {  byte a, b, c;switch (atomLen) {case 0:    return;case 1:  a=atom[0];encodeBuf[0]=pem_array[((a >>> 2) & 0x3F)];encodeBuf[1]=pem_array[((a << 4) & 0x30)];encodeBuf[2]=encodeBuf[3]='=';break;case 2:a=atom[0];b=atom[1];encodeBuf[0]=pem_array[((a >>> 2) & 0x3F)];encodeBuf[1]=pem_array[(((a << 4) & 0x30) | ((b >>> 4) & 0x0F))];encodeBuf[2]=pem_array[((b << 2) & 0x3C)];encodeBuf[3]='=';break;default :a=atom[0];b=atom[1];c=atom[2];encodeBuf[0]=pem_array[((a >>> 2) & 0x3F)];encodeBuf[1]=pem_array[(((a << 4) & 0x30) | ((b >>> 4) & 0x0F))];encodeBuf[2]=pem_array[(((b << 2) & 0x3C) | ((c >>> 6) & 0x03))];encodeBuf[3]=pem_array[c & 0x3F];}if (lineLen == 64) {out.println();lineLen=0;}out.write(encodeBuf);lineLen+=4;atomLen=0;}  }
class C{  public void run(){switch (type) {case OPEN_FILE:    try {      debugGui.dim.compileScript(fileName,text);    } catch (    RuntimeException ex) {      MessageDialogWrapper.showMessageDialog(debugGui,ex.getMessage(),"Error Compiling " + fileName,JOptionPane.ERROR_MESSAGE);    }  break;case LOAD_FILE:try {  debugGui.dim.evalScript(fileName,text);} catch (RuntimeException ex) {  MessageDialogWrapper.showMessageDialog(debugGui,ex.getMessage(),"Run error for " + fileName,JOptionPane.ERROR_MESSAGE);}break;case UPDATE_SOURCE_TEXT:{String fileName=sourceInfo.url();if (!debugGui.updateFileWindow(sourceInfo) && !fileName.equals("<stdin>")) {debugGui.createFileWindow(sourceInfo,-1);}}break;case ENTER_INTERRUPT:debugGui.enterInterruptImpl(lastFrame,threadTitle,alertMessage);break;default :throw new IllegalArgumentException(String.valueOf(type));}}  }
class C{  public static double registersToDouble(byte[] bytes){  return Double.longBitsToDouble(((((long)(bytes[0] & 0xff) << 56) | ((long)(bytes[1] & 0xff) << 48) | ((long)(bytes[2] & 0xff) << 40)| ((long)(bytes[3] & 0xff) << 32)| ((long)(bytes[4] & 0xff) << 24)| ((long)(bytes[5] & 0xff) << 16)| ((long)(bytes[6] & 0xff) << 8)| ((long)(bytes[7] & 0xff)))));}  }
class C{  public static Instances removeInstanceId(Instances data,boolean multilabel) throws Exception {  Instances filteredData;  int classIndex=data.classIndex();  if (data.attribute(Constants.ID_FEATURE_NAME) != null) {    int instanceIdOffset=data.attribute(Constants.ID_FEATURE_NAME).index();    Remove remove=new Remove();    remove.setAttributeIndices(Integer.toString(instanceIdOffset + 1));    remove.setInvertSelection(false);    remove.setInputFormat(data);    filteredData=Filter.useFilter(data,remove);  } else {    filteredData=new Instances(data);  }  if (multilabel) {    filteredData.setClassIndex(classIndex);  }  return filteredData;}  }
class C{  public Matrix3d m12(double m12){  this.m12=m12;  return this;}  }
class C{  public String mapInvokeDynamicMethodName(String name,String desc){  return name;}  }
class C{  protected void doFloodBDDP(long pinSwitch,OFPacketIn pi,FloodlightContext cntx){  TopologyInstance ti=getCurrentInstance(false);  Set<Long> switches=ti.getSwitchesInOpenflowDomain(pinSwitch);  if (switches == null) {    switches=new HashSet<Long>();    switches.add(pinSwitch);  }  for (  long sid : switches) {    IOFSwitch sw=floodlightProvider.getSwitch(sid);    if (sw == null)     continue;    Collection<Short> enabledPorts=sw.getEnabledPortNumbers();    if (enabledPorts == null)     continue;    Set<Short> ports=new HashSet<Short>();    ports.addAll(enabledPorts);    Set<Short> portsKnownToTopo=ti.getPortsWithLinks(sid);    if (portsKnownToTopo != null) {      for (      short p : portsKnownToTopo) {        NodePortTuple npt=new NodePortTuple(sid,p);        if (ti.isBroadcastDomainPort(npt) == false) {          ports.remove(p);        }      }    }    Set<Short> portsToEliminate=getPortsToEliminateForBDDP(sid);    if (portsToEliminate != null) {      ports.removeAll(portsToEliminate);    }    if (pinSwitch == sid) {      ports.remove(pi.getInPort());    }    doMultiActionPacketOut(pi.getPacketData(),sw,ports,cntx);  }}  }
class C{  public ArrayLongCompressed(long[] longs,int offset,int length){  long mask=0x0;  for (int i=0; i < length; i++) {    mask|=longs[offset + i];  }  int leadingClearBits=0;  int trailingClearBits=0;  while (((mask & (1 << (BIT_LENGTH - leadingClearBits - 1))) == 0) && (leadingClearBits < BIT_LENGTH)) {    leadingClearBits++;  }  while (((mask & (1 << trailingClearBits)) == 0) && (trailingClearBits < (BIT_LENGTH - leadingClearBits))) {    trailingClearBits++;  }  init(length,BIT_LENGTH - leadingClearBits - trailingClearBits,trailingClearBits);  for (int i=0; i < length; i++) {    set(i,longs[offset + i]);  }}  }
class C{  private static Bitmap rotateBitmap(Bitmap b,int degrees){  if (LogUtils.isActive) {    Log.d(LOGTAG,"Rotate bitmap degrees: " + degrees);  }  Matrix m=new Matrix();  m.setRotate(degrees,(float)b.getWidth() / 2,(float)b.getHeight() / 2);  try {    Bitmap b2=Bitmap.createBitmap(b,0,0,b.getWidth(),b.getHeight(),m,true);    if (b != b2) {      b.recycle();      b=b2;    }    return b;  } catch (  OutOfMemoryError ex) {    if (LogUtils.isActive) {      Log.w(LOGTAG,"OutOfMemoryError: cannot rotate image");    }    System.gc();    return b;  }}  }
class C{  @AwaitsFix(bugUrl="https://issues.apache.org/jira/browse/LUCENE-5575") public void testRandomStrings() throws Exception {  checkRandomData(random(),a,10000 * RANDOM_MULTIPLIER);}  }
class C{  public void startDownload(final String hostname,final String uri){  startDownload(hostname,SpeedTestConst.HTTP_DEFAULT_PORT,uri);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:49.766 -0400",hash_original_method="0C44DD211AEDE4F8875A759BF8E8E48B",hash_generated_method="BC517FA24EACE7A695FB011A5D82F875") private boolean isCollapsed(){  return mTabSpinner != null && mTabSpinner.getParent() == this;}  }
class C{  public static ReferenceTextBuilder createDiploid(){  return new ReferenceTextBuilder(ReferenceGenome.REFERENCE_DEFAULT_DIPLOID);}  }
class C{  @Override public int score(ODataRequestContext requestContext,QueryResult data){  if (data.getType() == QueryResult.ResultType.NOTHING || data.getType() != QueryResult.ResultType.EXCEPTION) {    return DEFAULT_SCORE;  }  if (data.getData() instanceof ODataBatchException) {    return MAXIMUM_FORMAT_SCORE;  }  List<MediaType> accept=requestContext.getRequest().getAccept();  int batchAcceptScore=scoreByMediaType(accept,MediaType.MULTIPART);  int contentTypeScore=scoreByContentType(requestContext,MULTIPART);  int resultScore=max(batchAcceptScore,contentTypeScore);  return resultScore > 0 ? (resultScore + ERROR_EXTRA_SCORE) : DEFAULT_SCORE;}  }
class C{  private void loadFile(String filename,AbstractFileLoader... loaders){  ArffSortedTableModel model;  this.m_Filename=filename;  createTitle();  if (filename.equals("")) {    model=null;  } else {    model=new ArffSortedTableModel(filename,loaders);    model.setShowAttributeIndex(getShowAttributeIndex());  }  m_TableArff.setModel(model);  setChanged(false);  createName();}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public static void clearGrantor(long grantorVersion,DLockService service,int dlsSerialNumber,InternalDistributedSystem sys,boolean withLocks){  basicOp(grantorVersion,service,dlsSerialNumber,sys,null,withLocks ? CLEAR_WITH_LOCKS_OP : CLEAR_OP);}  }
class C{  private void playBowl(Game g){  g.playGame();  if (g.homeScore > g.awayScore) {    g.homeTeam.semiFinalWL="BW";    g.awayTeam.semiFinalWL="BL";    g.homeTeam.totalBowls++;    g.awayTeam.totalBowlLosses++;    newsStories.get(14).add(g.homeTeam.name + " wins the " + g.gameName+ "!>"+ g.homeTeam.strRep()+ " defeats "+ g.awayTeam.strRep()+ " in the "+ g.gameName+ ", winning "+ g.homeScore+ " to "+ g.awayScore+ ".");  } else {    g.homeTeam.semiFinalWL="BL";    g.awayTeam.semiFinalWL="BW";    g.homeTeam.totalBowlLosses++;    g.awayTeam.totalBowls++;    newsStories.get(14).add(g.awayTeam.name + " wins the " + g.gameName+ "!>"+ g.awayTeam.strRep()+ " defeats "+ g.homeTeam.strRep()+ " in the "+ g.gameName+ ", winning "+ g.awayScore+ " to "+ g.homeScore+ ".");  }}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  private boolean cmd_saveOrder(int C_Order_ID){  log.config("C_Order_ID=" + C_Order_ID);  MOrder order=new MOrder(Env.getCtx(),C_Order_ID,null);  if (order.get_ID() == 0) {    log.log(Level.SEVERE,"Not found - C_Order_ID=" + C_Order_ID);    return false;  }  m_qty=(BigDecimal)productQty.getValue();  log.fine("printing product config tree");  printTree(this.m_RadioButtonTreeCellRenderer.root);  while (pruneProductConfig())   ;  int M_Product_ID=-1;  boolean replaceResult=replaceProductConfigBOMwithProductFromChoices();  log.fine("replaceResult: " + replaceResult);  if (replaceResult) {    log.fine("After replacement product config tree");    printTree(this.m_RadioButtonTreeCellRenderer.root);    M_Product_ID=findProductInstance();  }  log.fine("M_Product_ID: " + M_Product_ID);  if (M_Product_ID < 0 || !replaceResult) {    log.fine("No product instance found for the configuration chosen");    String warningMsg="No product instance found for the configuration chosen, create one?";    String warningTitle="Warning";    int response=JOptionPane.showConfirmDialog(null,warningMsg,warningTitle,JOptionPane.YES_NO_OPTION);    if (response == JOptionPane.YES_OPTION) {      log.fine("create product instance");    }  }  MOrderLine ol=new MOrderLine(order);  ol.setM_Product_ID(m_product.get_ID(),true);  ol.setQty(m_qty);  ol.setPrice();  ol.setTax();  if (ol.save())   log.fine("order line saved"); else   log.log(Level.SEVERE,"Line not saved");  int lineCount=0;  log.config("#" + lineCount);  return true;}  }
class C{  public LabelNode rangeLabel(final LabelNode l){  return rangeTable.get(l);}  }
class C{  public static void clear(Editable e){  e.clear();  e.removeSpan(ACTIVE);  e.removeSpan(CAPPED);  e.removeSpan(INHIBIT_REPLACEMENT);  e.removeSpan(LAST_TYPED);  QwertyKeyListener.Replaced[] repl=e.getSpans(0,e.length(),QwertyKeyListener.Replaced.class);  final int count=repl.length;  for (int i=0; i < count; i++) {    e.removeSpan(repl[i]);  }}  }
class C{  public boolean isExtensionEnabled(){  return extensionEnabled;}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + n+ ","+ p+ ")";}  }
class C{  public PseudoRandom prng(){  return prng;}  }
class C{  public void testParseCustomProperty(){  String toBeParsed="com.ibm.ssl.rootCertValidDays%1234#" + "   com.ibm.websphere.security.krb.canonical_host%false";  List<List<String>> parsedProperty=ComplexPropertyUtils.parseProperty(toBeParsed,"#","%");  assertEquals(2,parsedProperty.size());  assertEquals(2,parsedProperty.get(0).size());  assertEquals(2,parsedProperty.get(1).size());  assertEquals("com.ibm.ssl.rootCertValidDays",parsedProperty.get(0).get(0));  assertEquals("1234",parsedProperty.get(0).get(1));  assertEquals("com.ibm.websphere.security.krb.canonical_host",parsedProperty.get(1).get(0));  assertEquals("false",parsedProperty.get(1).get(1));}  }
class C{  public boolean isFeedbackBroadcastMessage(){  return ((this.getElement(0) & 0xF0) == XNetConstants.BC_FEEDBACK);}  }
class C{  private static void reverseRange(Object[] a,int lo,int hi){  hi--;  while (lo < hi) {    Object t=a[lo];    a[lo++]=a[hi];    a[hi--]=t;  }}  }
class C{  public void addDataset(ValueDataset dataset){  addDataset(dataset,null);}  }
class C{  private void sendByteBufferData(boolean compression,char[] arr) throws SQLException {  try (Connection connection=setConnection("&useCompression=" + compression)){    Statement stmt=connection.createStatement();    stmt.execute("TRUNCATE BufferTest");    PreparedStatement preparedStatement=connection.prepareStatement("INSERT INTO BufferTest VALUES (?)");    preparedStatement.setString(1,new String(arr));    preparedStatement.execute();    checkResult(arr);  } }  }
class C{  public static BufferedImage createColorModelCompatibleImage(BufferedImage image){  ColorModel cm=image.getColorModel();  return new BufferedImage(cm,cm.createCompatibleWritableRaster(image.getWidth(),image.getHeight()),cm.isAlphaPremultiplied(),null);}  }
class C{  public static boolean isAbsolute(String fileName){  return FilePath.get(fileName).isAbsolute();}  }
class C{  private BaseRect findFirstCollision(BaseRect[] rects,final int numRects,final float curX,final float curY,final float dirX,final float dirY,final float distance,final float radius){  final float MAX_STEP=2.0f;  final float MIN_STEP=0.001f;  float radiusSq=radius * radius;  int faceHit=HIT_FACE_NONE;  int faceToAdjust=HIT_FACE_NONE;  float xadj=0.0f;  float yadj=0.0f;  float traveled=0.0f;  while (traveled < distance) {    if (distance - traveled > MAX_STEP) {      traveled+=MAX_STEP;    } else     if (distance - traveled < MIN_STEP) {      break;    } else {      traveled=distance;    }    float circleXWorld=curX + dirX * traveled;    float circleYWorld=curY + dirY * traveled;    for (int i=0; i < numRects; i++) {      BaseRect rect=rects[i];      float rectXWorld=rect.getXPosition();      float rectYWorld=rect.getYPosition();      float rectXScaleHalf=rect.getXScale() / 2.0f;      float rectYScaleHalf=rect.getYScale() / 2.0f;      float circleX=Math.abs(circleXWorld - rectXWorld);      float circleY=Math.abs(circleYWorld - rectYWorld);      if (circleX > rectXScaleHalf + radius || circleY > rectYScaleHalf + radius) {        continue;      }      if (circleX <= rectXScaleHalf) {        faceToAdjust=faceHit=HIT_FACE_HORIZONTAL;      } else       if (circleY <= rectYScaleHalf) {        faceToAdjust=faceHit=HIT_FACE_VERTICAL;      } else {        float xdist=circleX - rectXScaleHalf;        float ydist=circleY - rectYScaleHalf;        if (xdist * xdist + ydist * ydist > radiusSq) {          continue;        }        float dirXSign=Math.signum(dirX);        float dirYSign=Math.signum(dirY);        float cornerXSign=Math.signum(rectXWorld - circleXWorld);        float cornerYSign=Math.signum(rectYWorld - circleYWorld);        String msg;        if (dirXSign == cornerXSign && dirYSign == cornerYSign) {          faceHit=HIT_FACE_SHARPCORNER;          msg="sharp";          if (DEBUG_COLLISIONS) {            mDebugSlowMotionFrames=240;          }        } else         if (dirXSign == cornerXSign) {          faceHit=HIT_FACE_VERTICAL;          msg="vert";        } else         if (dirYSign == cornerYSign) {          faceHit=HIT_FACE_HORIZONTAL;          msg="horiz";        } else {          Log.w(TAG,"COL: impossible corner hit");          faceHit=HIT_FACE_SHARPCORNER;          msg="???";        }        if (DEBUG_COLLISIONS) {          Log.d(TAG,"COL: " + msg + "-corner hit xd="+ xdist+ " yd="+ ydist+ " dir="+ dirXSign+ ","+ dirYSign+ " cor="+ cornerXSign+ ","+ cornerYSign);        }        if (xdist < ydist) {          faceToAdjust=HIT_FACE_HORIZONTAL;        } else {          faceToAdjust=HIT_FACE_VERTICAL;        }      }      if (DEBUG_COLLISIONS) {        String msg="?";        if (faceHit == HIT_FACE_SHARPCORNER) {          msg="corner";        } else         if (faceHit == HIT_FACE_HORIZONTAL) {          msg="horiz";        } else         if (faceHit == HIT_FACE_VERTICAL) {          msg="vert";        }        Log.d(TAG,"COL: " + msg + " hit "+ rect.getClass().getSimpleName()+ " cx="+ circleXWorld+ " cy="+ circleYWorld+ " rx="+ rectXWorld+ " ry="+ rectYWorld+ " rxh="+ rectXScaleHalf+ " ryh="+ rectYScaleHalf);      }      float hitXAdj, hitYAdj;      if (faceToAdjust == HIT_FACE_HORIZONTAL) {        hitXAdj=0.0f;        hitYAdj=rectYScaleHalf + radius - circleY;        if (GameSurfaceRenderer.EXTRA_CHECK && hitYAdj < 0.0f) {          Log.e(TAG,"HEY: horiz was neg");        }        if (circleYWorld < rectYWorld) {          hitYAdj=-hitYAdj;        }      } else       if (faceToAdjust == HIT_FACE_VERTICAL) {        hitXAdj=rectXScaleHalf + radius - circleX;        hitYAdj=0.0f;        if (GameSurfaceRenderer.EXTRA_CHECK && hitXAdj < 0.0f) {          Log.e(TAG,"HEY: vert was neg");        }        if (circleXWorld < rectXWorld) {          hitXAdj=-hitXAdj;        }      } else {        Log.w(TAG,"GLITCH: unexpected faceToAdjust " + faceToAdjust);        hitXAdj=hitYAdj=0.0f;      }      if (DEBUG_COLLISIONS) {        Log.d(TAG,"COL:  r=" + radius + " trav="+ traveled+ " xadj="+ hitXAdj+ " yadj="+ hitYAdj);      }      mHitFace=faceHit;      mHitDistanceTraveled=traveled;      mHitXAdj=hitXAdj;      mHitYAdj=hitYAdj;      return rect;    }  }  return null;}  }
class C{  public MyHashMap(int initialCapacity){  this(initialCapacity,DEFAULT_MAX_LOAD_FACTOR);}  }
class C{  public DefaultMapEntry(final KeyValue<? extends K,? extends V> pair){  super(pair.getKey(),pair.getValue());}  }
class C{  public static Transaction[] createFakeTx(NetworkParameters params,Coin value,Address to,Address from){  Transaction t=new Transaction(params);  TransactionOutput outputToMe=new TransactionOutput(params,t,value,to);  t.addOutput(outputToMe);  TransactionOutput change=new TransactionOutput(params,t,valueOf(1,11),new ECKey().toAddress(params));  t.addOutput(change);  Transaction feederTx=new Transaction(params);  TransactionOutput feederOut=new TransactionOutput(params,feederTx,value,from);  feederTx.addOutput(feederOut);  Transaction prevTx=new Transaction(params);  TransactionOutput prevOut=new TransactionOutput(params,prevTx,value,to);  prevTx.addOutput(prevOut);  prevTx.addInput(feederOut);  t.addInput(prevOut);  return new Transaction[]{roundTripTransaction(params,prevTx),roundTripTransaction(params,t)};}  }
class C{  public void createAsyncScenario01() throws Exception {  long supplierKey=basicSetup.getSupplierAdminKey();  long customerAdminKey=basicSetup.getCustomerAdminKey();  VOUser customerAdmin=basicSetup.getCustomerAdmin();  BillingIntegrationTestBase.setDateFactoryInstance("2013-05-01 12:00:00");  setCutOffDay(supplierKey,1);  VOServiceDetails service=serviceSetup.createPublishAndActivateMarketableService(supplierKey,"test_01",TestService.EXAMPLE_ASYNC,TestPriceModel.EXAMPLE_PERUNIT_MONTH_ROLES_PARS,technicalServiceAsync,supplierMarketplace);  login("2013-06-01 07:00:00",customerAdminKey,ROLE_ORGANIZATION_ADMIN);  VORoleDefinition role=VOServiceFactory.getRole(service,"USER");  VOSubscriptionDetails subscription=subscrSetup.subscribeToService("test_01",service,customerAdmin,role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-06-01 08:00:00"));  subscrSetup.abortAsyncSubscription(supplierKey,subscription.getSubscriptionId(),basicSetup.getCustomerOrgID());  BillingIntegrationTestBase.addToCache(subscription);  resetCutOffDay(supplierKey);}  }
class C{  public void processingInstruction(String target,String data) throws org.xml.sax.SAXException {  append(m_doc.createProcessingInstruction(target,data));}  }
class C{  private NceMessage makeAIUPoll4ByteReply(int aiuNo){  NceMessage m=new NceMessage(2);  m.setBinary(true);  m.setReplyLen(4);  m.setElement(0,NceBinaryCommand.READ_AUI4_CMD);  m.setElement(1,aiuNo);  m.setTimeout(pollTimeout);  return m;}  }
class C{  public static void zoomNode(final ZyGraph graph,final List<NaviNode> nodes){  checkArguments(graph);  ZoomFunctions.zoomToNodes(graph,nodes);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private Object readJSON() throws JSONException {switch (read(3)) {case zipObject:    return readObject();case zipArrayString:  return readArray(true);case zipArrayValue:return readArray(false);case zipEmptyObject:return new JSONObject();case zipEmptyArray:return new JSONArray();case zipTrue:return Boolean.TRUE;case zipFalse:return Boolean.FALSE;default :return JSONObject.NULL;}}  }
class C{  @Override public void write(int b) throws IOException {switch (b) {case '\r':    this.out.write('\r');  this.out.write('\n');this.startOfLine=true;this.statusLast=LAST_WAS_CR;break;case '\n':if (this.statusLast != LAST_WAS_CR) {this.out.write('\r');this.out.write('\n');this.startOfLine=true;}this.statusLast=LAST_WAS_LF;break;default :this.out.write(b);this.startOfLine=false;this.statusLast=LAST_WAS_OTHER;break;}}  }
class C{  private void computeOffsetPoints(Coordinate p0,Coordinate p1,double offsetDistance,List offsetPts){  double dx=p1.x - p0.x;  double dy=p1.y - p0.y;  double len=Math.sqrt(dx * dx + dy * dy);  double ux=offsetDistance * dx / len;  double uy=offsetDistance * dy / len;  double midX=(p1.x + p0.x) / 2;  double midY=(p1.y + p0.y) / 2;  if (doLeft) {    Coordinate offsetLeft=new Coordinate(midX - uy,midY + ux);    offsetPts.add(offsetLeft);  }  if (doRight) {    Coordinate offsetRight=new Coordinate(midX + uy,midY - ux);    offsetPts.add(offsetRight);  }}  }
class C{  public void add(final String word){  if (word == null)   return;  this.detector.append(" " + word);}  }
class C{  public void paintValue(java.awt.Graphics gfx,java.awt.Rectangle box){  FontMetrics fm=gfx.getFontMetrics();  int vpad=(box.height - fm.getHeight()) / 2;  File f=(File)getValue();  String val="No file";  if (f != null) {    val=f.getName();  }  gfx.drawString(val,2,fm.getHeight() + vpad);}  }
class C{  public static double median(double[] x){  if (x == null || x.length == 0) {    throw new IllegalArgumentException();  }  int[] indices=new int[x.length];  HeapSort.sort(x,indices);  return median(x,indices);}  }
class C{  public void clearSelection(){  this.mask=new boolean[mask.length];  recalculateTableIndices();}  }
class C{  protected boolean handleDirectory(File directory,String[] contentNames) throws SecurityException {  if (directory.getName().equalsIgnoreCase("RPF")) {    boolean foundRPFDir=false;    for (    String childName : contentNames) {      if (childName.equalsIgnoreCase("A.TOC")) {        foundRPFDir=true;        break;      }    }    if (foundRPFDir) {      addDataPath(directory.getAbsolutePath());      return true;    }  }  return super.handleDirectory(directory,contentNames);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","fjcc");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  public DistributedLogNamespaceBuilder perLogStatsLogger(StatsLogger statsLogger){  this._perLogStatsLogger=statsLogger;  return this;}  }
class C{  public PowerModelLinear(double maxPower,double staticPowerPercent){  setMaxPower(maxPower);  setStaticPower(staticPowerPercent * maxPower);  setConstant((maxPower - getStaticPower()) / 100);}  }
class C{  protected Annotation(){  this(null,false,null);}  }
class C{  public boolean handleDirectory(File directory){  if (DEBUG) {    logger.fine("skipping: " + directory.getAbsolutePath());  }  return true;}  }
class C{  private void saveDataSerializer(DataSerializer ds){  lock.lock();  try {    if (!this.compactInProgress && this.dsIds.contains(ds.getId())) {      return;    }    final byte[] classNameBytes=classToBytes(ds.getClass());    ByteBuffer bb=getIFWriteBuffer(1 + 4 + classNameBytes.length+ 1);    bb.put(IFREC_DATA_SERIALIZER_ID);    bb.putInt(classNameBytes.length);    bb.put(classNameBytes);    bb.put(END_OF_RECORD_ID);    writeIFRecord(bb);  } catch (  IOException ex) {    throw new DiskAccessException(LocalizedStrings.DiskInitFile_FAILED_SAVING_DATA_SERIALIZER_TO_DISK_BECAUSE_0.toLocalizedString(ex),this.parent);  } finally {    lock.unlock();  }}  }
class C{  public String escapeString(String str){  try {    return URLEncoder.encode(str,"utf8").replaceAll("\\+","%20");  } catch (  UnsupportedEncodingException e) {    return str;  }}  }
class C{  public CSVReader(Reader reader,int line,CSVParser csvParser){  this(reader,line,csvParser,DEFAULT_KEEP_CR,DEFAULT_VERIFY_READER);}  }
class C{  public ManagedResource cleanupRegionResources(String regionPath){  ManagedResource cleaned=null;synchronized (this.managedRegionResourcesMap) {    Set<Entry<String,SystemMemberRegionJmxImpl>> entries=managedRegionResourcesMap.entrySet();    for (Iterator<Entry<String,SystemMemberRegionJmxImpl>> it=entries.iterator(); it.hasNext(); ) {      Entry<String,SystemMemberRegionJmxImpl> entry=it.next();      SystemMemberRegionJmxImpl managedResource=entry.getValue();      ObjectName objName=managedResource.getObjectName();      String pathProp=objName.getKeyProperty("path");      if (pathProp != null && pathProp.equals(regionPath)) {        cleaned=managedResource;        it.remove();        break;      }    }  }  return cleaned;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FileResult[");  buffer.append("logicalFileName = ").append(logicalFileName);  buffer.append(", physicalFileName = ").append(physicalFileName);  buffer.append("]");  return buffer.toString();}  }
class C{  public static void printTopicWords(File modelFile,File targetFile,int nWords) throws IOException {  boolean newLineAfterEachWord=false;  ParallelTopicModel model;  try {    model=ParallelTopicModel.read(modelFile);  } catch (  Exception e) {    throw new IOException(e);  }  model.printTopWords(targetFile,nWords,newLineAfterEachWord);}  }
class C{  private static double[][] createBwMatrix(TopologicalGraph graph,boolean directed){  int nodes=graph.getNumberOfNodes();  double[][] mtx=new double[nodes][nodes];  for (int i=0; i < nodes; i++) {    for (int j=0; j < nodes; j++) {      mtx[i][j]=0.0;    }  }  Iterator<TopologicalLink> iter=graph.getLinkIterator();  while (iter.hasNext()) {    TopologicalLink edge=iter.next();    mtx[edge.getSrcNodeID()][edge.getDestNodeID()]=edge.getLinkBw();    if (!directed) {      mtx[edge.getDestNodeID()][edge.getSrcNodeID()]=edge.getLinkBw();    }  }  return mtx;}  }
class C{  public void testCreateDeployableWhenDeployableIsNotADependency() throws Exception {  Deployable deployableElement=createCustomDeployableElement();  try {    deployableElement.createDeployable("whateverId",createDefaultProject("war",new HashSet<Artifact>()));    fail("An exception should have been thrown");  } catch (  MojoExecutionException expected) {    assertEquals("Artifact [customGroupId:customArtifactId:customType] is not a " + "dependency of the project.",expected.getMessage());  }}  }
class C{  private void openExperiment(){  int returnVal=m_FileChooser.showOpenDialog(this);  if (returnVal != JFileChooser.APPROVE_OPTION) {    return;  }  File expFile=m_FileChooser.getSelectedFile();  if (m_FileChooser.getFileFilter() == m_ExpFilter) {    if (!expFile.getName().toLowerCase().endsWith(Experiment.FILE_EXTENSION))     expFile=new File(expFile.getParent(),expFile.getName() + Experiment.FILE_EXTENSION);  } else   if (m_FileChooser.getFileFilter() == m_KOMLFilter) {    if (!expFile.getName().toLowerCase().endsWith(KOML.FILE_EXTENSION))     expFile=new File(expFile.getParent(),expFile.getName() + KOML.FILE_EXTENSION);  } else   if (m_FileChooser.getFileFilter() == m_XMLFilter) {    if (!expFile.getName().toLowerCase().endsWith(".xml"))     expFile=new File(expFile.getParent(),expFile.getName() + ".xml");  }  try {    Experiment exp=Experiment.read(expFile.getAbsolutePath());    if (!setExperiment(exp)) {      if (m_modePanel != null)       m_modePanel.switchToAdvanced(exp);    }    System.err.println("Opened experiment:\n" + exp);  } catch (  Exception ex) {    ex.printStackTrace();    JOptionPane.showMessageDialog(this,"Couldn't open experiment file:\n" + expFile + "\nReason:\n"+ ex.getMessage(),"Open Experiment",JOptionPane.ERROR_MESSAGE);  }}  }
class C{  public byte[] responseBody(){  return mResponseBody;}  }
class C{  public void delete(@Nonnull Integer id) throws HibernateException {  EntityManager em=getEntityManager();  try {    begin();    T_ENTITY entity=em.find(entityClass,id);    if (entity != null) {      LOG.debug("deleting entity " + entity.toString());      em.remove(entity);    }    commit();  } catch (  Exception e) {    rollback();    e.printStackTrace();    throw new RuntimeException(e);  } finally {    cleanup();  }}  }
class C{  @Override public boolean onPreferenceChange(Preference preference,Object newValue){  String tz;  final Activity activity=getActivity();  if (preference == mUseHomeTZ) {    if ((Boolean)newValue) {      tz=mTimeZoneId;    } else {      tz=CalendarCache.TIMEZONE_TYPE_AUTO;    }    Utils.setTimeZone(activity,tz);    return true;  } else   if (preference == mHideDeclined) {    mHideDeclined.setChecked((Boolean)newValue);    Intent intent=new Intent(Utils.getWidgetScheduledUpdateAction(activity));    intent.setDataAndType(CalendarContract.CONTENT_URI,Utils.APPWIDGET_DATA_TYPE);    activity.sendBroadcast(intent);    return true;  } else   if (preference == mWeekStart) {    mWeekStart.setValue((String)newValue);    mWeekStart.setSummary(mWeekStart.getEntry());  } else   if (preference == mDefaultReminder) {    mDefaultReminder.setValue((String)newValue);    mDefaultReminder.setSummary(mDefaultReminder.getEntry());  } else   if (preference == mSnoozeDelay) {    mSnoozeDelay.setValue((String)newValue);    mSnoozeDelay.setSummary(mSnoozeDelay.getEntry());  } else   if (preference == mRingtone) {    if (newValue instanceof String) {      Utils.setRingTonePreference(activity,(String)newValue);      String ringtone=getRingtoneTitleFromUri(activity,(String)newValue);      mRingtone.setSummary(ringtone == null ? "" : ringtone);    }    return true;  } else   if (preference == mVibrate) {    mVibrate.setChecked((Boolean)newValue);    return true;  } else {    return true;  }  return false;}  }
class C{  protected boolean containsKey(String k){  return settings.containsKey(k);}  }
class C{  public boolean isNegative(){  return years < 0 || months < 0 || days < 0;}  }
class C{  public List<Double> results(){  return Collections.unmodifiableList(lapped);}  }
class C{  static MediaType createAudioType(String subtype){  return create(AUDIO_TYPE,subtype);}  }
class C{  protected void analyzePixels(){  int len=pixels.length;  int nPix=len / 3;  indexedPixels=new byte[nPix];  NeuQuant nq=new NeuQuant(pixels,len,sample);  colorTab=nq.process();  for (int i=0; i < colorTab.length; i+=3) {    byte temp=colorTab[i];    colorTab[i]=colorTab[i + 2];    colorTab[i + 2]=temp;    usedEntry[i / 3]=false;  }  int k=0;  for (int i=0; i < nPix; i++) {    int index=nq.map(pixels[k++] & 0xff,pixels[k++] & 0xff,pixels[k++] & 0xff);    usedEntry[index]=true;    indexedPixels[i]=(byte)index;  }  pixels=null;  colorDepth=8;  palSize=7;  if (transparent != null) {    transIndex=findClosest(transparent);  }}  }
class C{  public void export(ByteBuffer buf){  buf.putInt(seqId);  if (info.isRowBlockEnabled())   buf.putInt(nRows);  export(primaryKey,buf);  for (  ByteArray cb : cellBlocks) {    export(cb,buf);  }}  }
class C{  public InlineQueryResultGif.InlineQueryResultGifBuilder caption(String caption){  this.caption=caption;  return this;}  }
class C{  public void addComponent(final Object constraints,final Component cmp){  layout.addLayoutComponent(constraints,cmp,this);  insertComponentAt(Integer.MAX_VALUE,null,cmp);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.736 -0500",hash_original_method="894CB5A5FAD7AFC5CD5A3389B3F77AB4",hash_generated_method="35638E214210D780397781FC12C13372") public java.util.List<HDR> subList(int index1,int index2){  return this.hlist.subList(index1,index2);}  }
class C{  public static Double bytesToDouble(byte[] bytes){  return stringToDouble(bytesToString(bytes));}  }
class C{  @Override public Long put(V key,Long value){  return wrapValue(_map.put(unwrapKey(key),unwrapValue(value)));}  }
class C{  public static boolean millerRabinPrimeTest(final int n){  final int nMinus1=n - 1;  final int s=Integer.numberOfTrailingZeros(nMinus1);  final int r=nMinus1 >> s;  int t=1;  if (n >= 2047) {    t=2;  }  if (n >= 1373653) {    t=3;  }  if (n >= 25326001) {    t=4;  }  BigInteger br=BigInteger.valueOf(r);  BigInteger bn=BigInteger.valueOf(n);  for (int i=0; i < t; i++) {    BigInteger a=BigInteger.valueOf(PRIMES[i]);    BigInteger bPow=a.modPow(br,bn);    int y=bPow.intValue();    if ((1 != y) && (y != nMinus1)) {      int j=1;      while ((j <= s - 1) && (nMinus1 != y)) {        long square=((long)y) * y;        y=(int)(square % n);        if (1 == y) {          return false;        }        j++;      }      if (nMinus1 != y) {        return false;      }    }  }  return true;}  }
class C{  public String toString(int delCount){  StringBuilder s=new StringBuilder();  s.append(name).append('(').append(version == null ? "?" : version).append(')').append(':');  char cfs=getUseCompoundFile() ? 'c' : 'C';  s.append(cfs);  s.append(maxDoc);  if (delCount != 0) {    s.append('/').append(delCount);  }  if (indexSort != null) {    s.append(":[indexSort=");    s.append(indexSort);    s.append(']');  }  return s.toString();}  }
class C{  @Override @Pure public boolean equals(@Nullable Object obj){  if (this == obj)   return true;  if (!(obj instanceof Locale))   return false;  BaseLocale otherBase=((Locale)obj).baseLocale;  if (!baseLocale.equals(otherBase)) {    return false;  }  if (localeExtensions == null) {    return ((Locale)obj).localeExtensions == null;  }  return localeExtensions.equals(((Locale)obj).localeExtensions);}  }
class C{  protected void updateHeaderAndList(){  calculateProfiles();  buildProfiles();  if (mSelectionListShown) {    buildDrawerSelectionList();  }}  }
class C{  private static DateFormat utc(DateFormat df){  df.setTimeZone(TimeZone.getTimeZone("UTC"));  return df;}  }
class C{  public Vector3f add(Vector3f vec,Vector3f result){  result.x=x + vec.x;  result.y=y + vec.y;  result.z=z + vec.z;  return result;}  }
class C{  protected void dispatchKeyEvent(KeyEvent evt){  currentKeyEventTarget=lastHit;  GraphicsNode target=currentKeyEventTarget == null ? root : currentKeyEventTarget;  processKeyEvent(new GraphicsNodeKeyEvent(target,evt.getID(),evt.getWhen(),evt.getModifiers(),getCurrentLockState(),evt.getKeyCode(),evt.getKeyChar(),0));}  }
class C{  public void testCopy() throws IOException {  InfoStreamListener stream=new InfoStreamListener("copy");  Path dir=wrap(createTempDir(),stream);  Files.createFile(dir.resolve("foobar"));  Files.copy(dir.resolve("foobar"),dir.resolve("baz"));  assertTrue(stream.sawMessage());  try {    Files.copy(dir.resolve("nonexistent"),dir.resolve("something"));    fail("didn't get expected exception");  } catch (  IOException expected) {  }}  }
class C{  public static void splitFilePath(String sourcePath,List<String> partitionsFiles,String separator){  if (StringUtils.isNotEmpty(sourcePath)) {    String[] files=sourcePath.split(separator);    for (    String file : files) {      partitionsFiles.add(file);    }  }}  }
class C{  public JSONObject optJSONObject(String key){  Object object=this.opt(key);  return object instanceof JSONObject ? (JSONObject)object : null;}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  private String toStringImpl(){  StringBuilder result=new StringBuilder(128);  result.append('@');  result.append(type.getName());  result.append('(');  boolean firstMember=true;  for (  Map.Entry<String,Object> e : memberValues.entrySet()) {    if (firstMember)     firstMember=false; else     result.append(", ");    result.append(e.getKey());    result.append('=');    result.append(memberValueToString(e.getValue()));  }  result.append(')');  return result.toString();}  }
class C{  protected void growNewFruit(){  if (!hasPickableFruit) {    LOGGER.debug("Growing " + growingItemName);    final StendhalRPWorld world=SingletonRepository.getRPWorld();    final StendhalRPZone zone=world.getZone(getID().getZoneID());    final Item grownItem=SingletonRepository.getEntityManager().getItem(growingItemName);    grownItem.setPlantGrower(this);    grownItem.setPosition(getX(),getY());    zone.add(grownItem,false);    hasPickableFruit=true;  }}  }
class C{  public static SumProjectionExpression sum(Expression expression){  return new SumProjectionExpression(expression,false);}  }
class C{  public GetIndexedScriptRequest id(String id){  this.id=id;  return this;}  }
class C{  public double floatValue(final IScope scope){  return scope.getSimulation().getStartingDate().until(this,ChronoUnit.SECONDS);}  }
class C{  public static Container encloseMiddle(Component... cmps){  return Container.encloseIn(new FlowLayout(Component.LEFT,Component.CENTER),cmps);}  }
class C{  public static boolean isAtomicUpdate(final AddUpdateCommand cmd){  SolrInputDocument sdoc=cmd.getSolrInputDocument();  for (  SolrInputField sif : sdoc.values()) {    if (sif.getValue() instanceof Map) {      return true;    }  }  return false;}  }
class C{  protected void childJustRemovedHook(Object child,BCSChild bcsc){}  }
class C{  private void createArrays(AnnotationSpecs spec,ObjectCreator<T> itemCreator){  if (spec.isNullable()) {    addValidType(null);  } else {    addInvalidType(null);  }  if (spec.getSizeMax() >= 0) {    int maxSize=Utils.roundDown(spec.getSizeMax(),spec.getSizeMultiple());    if (maxSize >= spec.getSizeMin()) {      addValidType(createValidArrayOfSize(maxSize,itemCreator));    }    int minSize=Utils.roundUp(spec.getSizeMin(),spec.getSizeMultiple());    if (minSize <= spec.getSizeMax()) {      addValidType(createValidArrayOfSize(minSize,itemCreator));    }    int middle=(int)((spec.getSizeMax() + spec.getSizeMin()) / 2L);    if (itemCreator.hasInvalidNext()) {      addInvalidType(createInvalidArrayOfSize(maxSize,itemCreator));      addInvalidType(createInvalidArrayOfSize(minSize,itemCreator));      if (spec.getSizeMultiple() == 1) {        addInvalidType(createInvalidArrayOfSize(middle,itemCreator));      }    }    if (spec.getSizeMultiple() == 1) {      addValidType(createValidArrayOfSize(middle,itemCreator));    }    addInvalidType(createValidArrayOfSize(maxSize + 1,itemCreator));    if (minSize > 0) {      addInvalidType(createValidArrayOfSize(minSize - 1,itemCreator));    }  }}  }
class C{  public boolean isReadOnly(){  return m_ReadOnly;}  }
class C{  public void loadColor(int color,String item){  String javascript=" javascript:document.getElementById('" + item + "').setAttribute('fill','"+ Utils.convertHexColorString(color)+ "');";  getWebView().loadUrl(javascript);}  }
class C{  static int makeTag(final int fieldNumber,final int wireType){  return (fieldNumber << TAG_TYPE_BITS) | wireType;}  }
class C{  private void writeToc(ByteBuffer dataFileBuffer,TocType tocType,int entryCount,int firstEntryOffset){  dataFileBuffer.putInt(tocType.identifier);  dataFileBuffer.putInt(entryCount);  dataFileBuffer.putLong(firstEntryOffset);}  }
class C{  public void insertBefore(final AbstractInsnNode location,final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  AbstractInsnNode ifirst=insns.first;  AbstractInsnNode ilast=insns.last;  AbstractInsnNode prev=location.prev;  if (prev == null) {    first=ifirst;  } else {    prev.next=ifirst;  }  location.prev=ilast;  ilast.next=location;  ifirst.prev=prev;  cache=null;  insns.removeAll(false);}  }
class C{  private synchronized void logThrowable(final Level level,final String message,final Throwable t){  if (t != null) {    log("\r\n[" + System.currentTimeMillis() + "]\t"+ message);    log("\r\n" + t);    log("\r\n");    for (    StackTraceElement st : t.getStackTrace()) {      log("\t" + st.toString() + "\r\n");    }    Throwable c=t.getCause();    if (c != null) {      log("Caused by:\t" + c + "\r\n");      for (      StackTraceElement st : c.getStackTrace()) {        log("\t" + st.toString() + "\r\n");      }    }    log("\r\n");    this.flush();  }}  }
class C{  public PrintWriter format(Locale l,String format,Object... args){  try {synchronized (lock) {      ensureOpen();      if ((formatter == null) || (formatter.locale() != l))       formatter=new Formatter(this,l);      formatter.format(l,format,args);      if (autoFlush)       out.flush();    }  } catch (  InterruptedIOException x) {    Thread.currentThread().interrupt();  }catch (  IOException x) {    trouble=true;  }  return this;}  }
class C{  @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:07:29.150 -0500",hash_original_method="08559147F9D27369068888CD58E1DEEA",hash_generated_method="0D4ED54206A2427810FBE423FEB86F58") @DSSpec(DSCat.IO) @Override public int read(byte[] buffer,int offset,int byteCount) throws IOException {  checkClosed();  Arrays.checkOffsetAndCount(buffer.length,offset,byteCount);  if (inf.finished() || currentEntry == null) {    return -1;  }  if (currentEntry.compressionMethod == ZipEntry.STORED) {    int csize=(int)currentEntry.size;    if (inRead >= csize) {      return -1;    }    if (lastRead >= len) {      lastRead=0;      if ((len=in.read(buf)) == -1) {        eof=true;        return -1;      }      entryIn+=len;    }    int toRead=byteCount > (len - lastRead) ? len - lastRead : byteCount;    if ((csize - inRead) < toRead) {      toRead=csize - inRead;    }    System.arraycopy(buf,lastRead,buffer,offset,toRead);    lastRead+=toRead;    inRead+=toRead;    crc.update(buffer,offset,toRead);    return toRead;  }  if (inf.needsInput()) {    fill();    if (len > 0) {      entryIn+=len;    }  }  int read;  try {    read=inf.inflate(buffer,offset,byteCount);  } catch (  DataFormatException e) {    throw new ZipException(e.getMessage());  }  if (read == 0 && inf.finished()) {    return -1;  }  crc.update(buffer,offset,read);  return read;}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public boolean isIdentity(){  for (int i=0, k=0; i < 3; i++) {    for (int j=0; j < 3; j++, k++) {      if (mValues[k] != ((i == j) ? 1 : 0)) {        return false;      }    }  }  return true;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if ((ui != null) && (getUIClassID().equals(uiClassID))) {    ui.installUI(this);  }}  }
class C{  public ColorAnimate(int colorStart,int colorEnd){  mColorStart=colorStart;  mColorEnd=colorEnd;  mColorCurrent=mColorStart;  setMask(ANIMATE_ALL);}  }
class C{  private HttpEntityEnclosingRequestBase addEntityToRequestBase(HttpEntityEnclosingRequestBase requestBase,HttpEntity entity){  if (entity != null) {    requestBase.setEntity(entity);  }  return requestBase;}  }
class C{  public void union(int left,int top,int right,int bottom){  if ((left < right) && (top < bottom)) {    if ((this.left < this.right) && (this.top < this.bottom)) {      if (this.left > left)       this.left=left;      if (this.top > top)       this.top=top;      if (this.right < right)       this.right=right;      if (this.bottom < bottom)       this.bottom=bottom;    } else {      this.left=left;      this.top=top;      this.right=right;      this.bottom=bottom;    }  }}  }
class C{  public void prepareCommit(Session session,String transactionName){  Transaction t=session.getTransaction();  t.setName(transactionName);  t.prepare();  store.commit();}  }
class C{  public void unbind(String name) throws RemoteException, NotBoundException, AccessException {  checkAccess("Registry.unbind");synchronized (bindings) {    Remote obj=bindings.get(name);    if (obj == null)     throw new NotBoundException(name);    bindings.remove(name);  }}  }
class C{  public void doGenericSparkle(TileEntity tileEntity,INodeChecker checker){}  }
class C{  public GifDrawable(@NonNull AssetManager assets,@NonNull String assetName) throws IOException {  this(assets.openFd(assetName));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private boolean canBeNarrowingPrimitiveConversion(TypeMirror type){  TypeMirror unboxedType=TypesUtils.isBoxedPrimitive(type) ? types.unboxedType(type) : type;  TypeKind unboxedKind=unboxedType.getKind();  return unboxedKind == TypeKind.BYTE || unboxedKind == TypeKind.SHORT || unboxedKind == TypeKind.CHAR;}  }
class C{  public boolean onOptionsItemSelected(MenuItem item){  return false;}  }
class C{  public static String toString(InputStream input,Charset encoding) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw,encoding);  return sw.toString();}  }
class C{  public GroupImpl(String groupName){  this.group=groupName;}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            outputFile.setValue(row,col,Math.pow(z1,z2));          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            outputFile.setValue(row,col,Math.pow(z1,constant2));          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            outputFile.setValue(row,col,Math.pow(constant1,z2));          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.String[] getMetaInfoEntryNames()")) {    java_util_jar_JarFile_getMetaInfoEntryNames(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  private static void initLookAndFeel(){  for (  final LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {    if ("Nimbus".equals(info.getName())) {      try {        UIManager.setLookAndFeel(info.getClassName());        break;      } catch (      final Exception e) {        throw new RuntimeException(e);      }    }  }}  }
class C{  protected static InternalEventPropDescriptor makeFieldDesc(Field field,String name){  return new InternalEventPropDescriptor(name,field,EventPropertyType.SIMPLE);}  }
class C{  public void initializeLogging(){  LogWrapper logWrapper=new LogWrapper();  Log.setLogNode(logWrapper);  Log.i(TAG,"Ready");}  }
class C{  public VignetteEffect(float scale){  if (scale < 0.0f)   scale=0.0f;  if (scale > 1.0f)   scale=1.0f;  this.mScale=scale;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public Pair<OperandSize,String> generate(final ITranslationEnvironment environment,final long offset,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  Preconditions.checkArgument(offset >= 0,"Error: Argument offset can't be less than 0");  final String negatedParity=environment.getNextVariableString();  instructions.add(ReilHelpers.createBisz(offset,OperandSize.BYTE,Helpers.PARITY_FLAG,OperandSize.BYTE,negatedParity));  return new Pair<OperandSize,String>(OperandSize.BYTE,negatedParity);}  }
class C{  @Override public void cancelThrottleRequest(int address,boolean isLong,ThrottleListener l){  super.cancelThrottleRequest(address,isLong,l);  if (waitingForNotification.containsKey(address)) {    waitingForNotification.get(address).interrupt();    waitingForNotification.remove(address);  }}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  super.onActivityResult(requestCode,resultCode,data);  if (resultCode == SegmentScanActivity.RESULT_OK) {    Bundle result=data.getBundleExtra(SegmentScanActivity.EXTRAS_SCAN_RESULTS);switch (requestCode) {case BLINK_OCR_REQUEST_CODE:      String totalAmount=result.getString(NAME_TOTAL_AMOUNT);    String taxAmount=result.getString(NAME_TAX);  String iban=result.getString(NAME_IBAN);Toast.makeText(this,"To IBAN: " + iban + " we will pay total "+ totalAmount+ ", tax: "+ taxAmount,Toast.LENGTH_LONG).show();break;case BLINK_OCR_VIN_REQUEST_CODE:String vin=result.getString(NAME_VIN);Toast.makeText(this,"Vehicle identification number is: " + vin,Toast.LENGTH_LONG).show();break;case BLINK_OCR_MOBILE_COUPON_REQUEST_CODE:String mobileCouponCode=result.getString(NAME_MOBILE_COUPON);Toast.makeText(this,"Mobile coupon code is: " + mobileCouponCode,Toast.LENGTH_LONG).show();break;}}}  }
class C{  public void enableTlsExtensions(SSLSocket socket,String uriHost){}  }
class C{  private void writeObject(JSONObject jsonobject) throws JSONException {  boolean first=true;  Iterator keys=jsonobject.keys();  while (keys.hasNext()) {    if (probe) {      log("\n");    }    Object key=keys.next();    if (key instanceof String) {      if (first) {        first=false;        write(zipObject,3);      } else {        one();      }      writeName((String)key);      Object value=jsonobject.get((String)key);      if (value instanceof String) {        zero();        writeString((String)value);      } else {        one();        writeValue(value);      }    }  }  if (first) {    write(zipEmptyObject,3);  } else {    zero();  }}  }
class C{  public void appendShort(int s){  if (_length + 2 > _capacity)   ensureCapacity(_length + 2);  replaceShort(_length,s);  _length+=2;}  }
class C{  @Snippet public static void arraycopyPredictedExactIntrinsic(Object src,int srcPos,Object dest,int destPos,int length,@ConstantParameter JavaKind elementKind,@ConstantParameter SnippetCounter counter,@ConstantParameter SnippetCounter copiedCounter){  Object nonNullSrc=GraalDirectives.guardingNonNull(src);  Object nonNullDest=GraalDirectives.guardingNonNull(dest);  KlassPointer srcHub=loadHub(nonNullSrc);  KlassPointer destHub=loadHub(nonNullDest);  if (probability(SLOW_PATH_PROBABILITY,srcHub != destHub)) {    DeoptimizeNode.deopt(DeoptimizationAction.None,DeoptimizationReason.RuntimeConstraint);  }  checkLimits(nonNullSrc,srcPos,nonNullDest,destPos,length);  counter.inc();  copiedCounter.add(length);  ArrayCopyCallNode.arraycopy(nonNullSrc,srcPos,nonNullDest,destPos,length,elementKind);  if (length == 0) {    zeroLengthDynamicCounter.inc();  } else {    nonZeroLengthDynamicCounter.inc();    nonZeroLengthDynamicCopiedCounter.add(length);  }}  }
class C{  public boolean processIt(String processAction){  m_processMsg=null;  DocumentEngine engine=new DocumentEngine(this,getDocStatus());  return engine.processIt(processAction,getDocAction());}  }
class C{  public static FetchSysCfgResponse create(DistributionManager dm,InternalDistributedMember recipient){  FetchSysCfgResponse m=new FetchSysCfgResponse();  m.setRecipient(recipient);  Config conf=dm.getSystem().getConfig();  if (conf instanceof RuntimeDistributionConfigImpl) {    m.sc=((RuntimeDistributionConfigImpl)conf).takeSnapshot();  }  return m;}  }
class C{  public void removeBeanContextMembershipListener(BeanContextMembershipListener bcml){  if (bcml == null)   throw new NullPointerException("listener");synchronized (bcmListeners) {    if (!bcmListeners.contains(bcml))     return; else     bcmListeners.remove(bcml);  }}  }
class C{  private void checkMD5(File file){  log.info("To check {}",file.getAbsolutePath());  try {    String generatedMD5=Files.hash(file,Hashing.md5()).toString();    String md5Filename=file.getAbsolutePath() + BackupConstants.MD5_SUFFIX;    File md5File=new File(md5Filename);    if (!md5File.exists()) {      String errMsg=String.format("The MD5 file %s not exist",md5Filename);      throw new RuntimeException(errMsg);    }    List<String> lines=Files.readLines(md5File,Charset.defaultCharset());    if (lines.size() != 1) {      String errMsg=String.format("Invalid md5 file %s: more than 1 line",md5Filename);      throw new RuntimeException(errMsg);    }    String[] tokens=lines.get(0).split("\\t");    if (tokens.length != 3) {      String errMsg=String.format("Invalid md5 file %s : only 3 fields allowed in a line",md5Filename);      throw new RuntimeException(errMsg);    }    if (!generatedMD5.equals(tokens[0])) {      String errMsg=String.format("%s: MD5 doesn't match ",md5Filename);      throw new RuntimeException(errMsg);    }  } catch (  IOException e) {    String errMsg=String.format("Failed to check MD5 of %s: %s ",file.getAbsolutePath(),e.getMessage());    throw new RuntimeException(errMsg);  }}  }
class C{  public static void testValidity(Object o) throws JSONException {  if (o != null) {    if (o instanceof Double) {      if (((Double)o).isInfinite() || ((Double)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    } else     if (o instanceof Float) {      if (((Float)o).isInfinite() || ((Float)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    }  }}  }
class C{  protected static void build_parser() throws internal_error {  if (opt_do_debug || print_progress)   System.err.println("  Computing non-terminal nullability...");  non_terminal.compute_nullability();  nullability_end=System.currentTimeMillis();  if (opt_do_debug || print_progress)   System.err.println("  Computing first sets...");  non_terminal.compute_first_sets();  first_end=System.currentTimeMillis();  if (opt_do_debug || print_progress)   System.err.println("  Building state machine...");  start_state=lalr_state.build_machine(emit.start_production);  machine_end=System.currentTimeMillis();  if (opt_do_debug || print_progress)   System.err.println("  Filling in tables...");  action_table=new parse_action_table();  reduce_table=new parse_reduce_table();  for (Enumeration st=lalr_state.all(); st.hasMoreElements(); ) {    ((lalr_state)st.nextElement()).build_table_entries(action_table,reduce_table);  }  table_end=System.currentTimeMillis();  if (opt_do_debug || print_progress)   System.err.println("  Checking for non-reduced productions...");  action_table.check_reductions();  reduce_check_end=System.currentTimeMillis();  if (emit.num_conflicts > expect_conflicts) {    System.err.println("*** More conflicts encountered than expected " + "-- parser generation aborted");    lexer.error_count++;    build_end=System.currentTimeMillis();    if (opt_dump_grammar)     dump_grammar();    if (opt_dump_states)     dump_machine();    if (!no_summary)     emit_summary(false);    System.exit(100);  }}  }
class C{  public Enumeration<String> engineAliases(){  return Collections.enumeration(entries.keySet());}  }
class C{  public boolean checkError(){  OutputStream delegate=out;  if (delegate == null) {    return ioError;  }  flush();  return ioError || delegate.checkError();}  }
class C{  public boolean isPentanomial(){  return isPentanomial;}  }
class C{  public static List<Position> asPositionList(Globe globe,Vec4... points){  List<Position> positions=new ArrayList<Position>(points.length);  for (  Vec4 point : points) {    positions.add(globe.computePositionFromPoint(point));  }  return positions;}  }
class C{  public Name findName(int[] quads,int qlen){  int hash=calcHash(quads,qlen);  int ix=(hash & _mainHashMask);  int val=_mainHash[ix];  if ((((val >> 8) ^ hash) << 8) == 0) {    Name name=_mainNames[ix];    if (name == null || name.equals(quads,qlen)) {      return name;    }  } else   if (val == 0) {    return null;  }  val&=0xFF;  if (val > 0) {    val-=1;    Bucket bucket=_collList[val];    if (bucket != null) {      return bucket.find(hash,quads,qlen);    }  }  return null;}  }
class C{  public boolean isPublicSharing(){  return mPublicSharing;}  }
class C{  public BigInteger asBigInteger(){  return BigInteger.valueOf(this.getValue());}  }
class C{  public Future<SyncReply> sendRequest(int xid,SyncMessage request) throws RemoteStoreException {  ensureConnected();  RemoteSyncFuture future=new RemoteSyncFuture(xid,connectionGeneration);  futureMap.put(Integer.valueOf(xid),future);  if (futureMap.size() > MAX_PENDING_REQUESTS) {synchronized (futureNotify) {      while (futureMap.size() > MAX_PENDING_REQUESTS) {        try {          futureNotify.wait();        } catch (        InterruptedException e) {          throw new RemoteStoreException("Could not send request",e);        }      }    }  }  channel.write(request);  return future;}  }
class C{  private Map<String,String> convertMapFromModel(CSVRow row){  return row.getColumns().entrySet().stream().collect(toMap(null,null));}  }
class C{  public boolean isResolvable(){  return resolvable;}  }
class C{  public void testCreateLoggerWhenLogElementSpecified() throws Exception {  File logFile=File.createTempFile("cargo-test-" + getClass().getName(),".log");  logFile.deleteOnExit();  this.mojo.setContainerElement(new Container());  this.mojo.getContainerElement().setLog(logFile);  Logger logger=this.mojo.createLogger();  assertEquals(FileLogger.class.getName(),logger.getClass().getName());}  }
class C{  public static TranslationResult translateOperand(final ITranslationEnvironment environment,final long offset,final IOperandTree operand,final boolean loadOperand) throws InternalTranslationException, IllegalArgumentException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(operand,"Error: Argument operand can't be null");  return loadOperand(environment,offset,operand.getRootNode(),null,OperandSize.sizeStringToValue(operand.getRootNode().getValue()),loadOperand);}  }
class C{  public production reduce_with(){  return _reduce_with;}  }
class C{  public synchronized final Map<K,V> snapshot(){  return new LinkedHashMap<>(map);}  }
class C{  public static void selectionSort(int[] arr){  if (arr.length < 2) {    return;  }  int minIndex=0;  int minVal=0;  for (int j=0; j < (arr.length - 1); j++) {    printArray(arr);    minIndex=j;    minVal=arr[j];    for (int k=j + 1; k < arr.length; k++) {      if (arr[k] < minVal) {        minVal=arr[k];        minIndex=k;      }    }    swap(arr,j,minIndex);  }}  }
class C{  public static double[][] iFDctTransform(double[][] ablk){  double[][] blk=new double[8][8];  for (int i=0; i < 8; i++) {    for (int j=0; j < 8; j++) {      blk[i][j]=ablk[i][j];    }  }  for (int j=0; j <= 7; j++) {    double[] tmp=new double[16];    tmp[0]=blk[0][j] * C4 + blk[2][j] * C2;    tmp[1]=blk[4][j] * C4 + blk[6][j] * C6;    tmp[2]=blk[0][j] * C4 + blk[2][j] * C6;    tmp[3]=-blk[4][j] * C4 - blk[6][j] * C2;    tmp[4]=blk[0][j] * C4 - blk[2][j] * C6;    tmp[5]=-blk[4][j] * C4 + blk[6][j] * C2;    tmp[6]=blk[0][j] * C4 - blk[2][j] * C2;    tmp[7]=blk[4][j] * C4 - blk[6][j] * C6;    tmp[8]=blk[1][j] * C7 - blk[3][j] * C5;    tmp[9]=blk[5][j] * C3 - blk[7][j] * C1;    tmp[10]=blk[1][j] * C5 - blk[3][j] * C1;    tmp[11]=blk[5][j] * C7 + blk[7][j] * C3;    tmp[12]=blk[1][j] * C3 - blk[3][j] * C7;    tmp[13]=-blk[5][j] * C1 - blk[7][j] * C5;    tmp[14]=blk[1][j] * C1 + blk[3][j] * C3;    tmp[15]=blk[5][j] * C5 + blk[7][j] * C7;    tmp[0]=0.5 * (tmp[0] + tmp[1]);    tmp[1]=0.5 * (tmp[2] + tmp[3]);    tmp[2]=0.5 * (tmp[4] + tmp[5]);    tmp[3]=0.5 * (tmp[6] + tmp[7]);    tmp[4]=0.5 * (tmp[8] + tmp[9]);    tmp[5]=0.5 * (tmp[10] + tmp[11]);    tmp[6]=0.5 * (tmp[12] + tmp[13]);    tmp[7]=0.5 * (tmp[14] + tmp[15]);    blk[0][j]=tmp[0] + tmp[7];    blk[1][j]=tmp[1] + tmp[6];    blk[2][j]=tmp[2] + tmp[5];    blk[3][j]=tmp[3] + tmp[4];    blk[4][j]=tmp[3] - tmp[4];    blk[5][j]=tmp[2] - tmp[5];    blk[6][j]=tmp[1] - tmp[6];    blk[7][j]=tmp[0] - tmp[7];  }  for (int i=0; i <= 7; i++) {    double[] tmp=new double[16];    tmp[0]=blk[i][0] * C4 + blk[i][2] * C2;    tmp[1]=blk[i][4] * C4 + blk[i][6] * C6;    tmp[2]=blk[i][0] * C4 + blk[i][2] * C6;    tmp[3]=-blk[i][4] * C4 - blk[i][6] * C2;    tmp[4]=blk[i][0] * C4 - blk[i][2] * C6;    tmp[5]=-blk[i][4] * C4 + blk[i][6] * C2;    tmp[6]=blk[i][0] * C4 - blk[i][2] * C2;    tmp[7]=blk[i][4] * C4 - blk[i][6] * C6;    tmp[8]=blk[i][1] * C7 - blk[i][3] * C5;    tmp[9]=blk[i][5] * C3 - blk[i][7] * C1;    tmp[10]=blk[i][1] * C5 - blk[i][3] * C1;    tmp[11]=blk[i][5] * C7 + blk[i][7] * C3;    tmp[12]=blk[i][1] * C3 - blk[i][3] * C7;    tmp[13]=-blk[i][5] * C1 - blk[i][7] * C5;    tmp[14]=blk[i][1] * C1 + blk[i][3] * C3;    tmp[15]=blk[i][5] * C5 + blk[i][7] * C7;    tmp[0]=0.5 * (tmp[0] + tmp[1]);    tmp[1]=0.5 * (tmp[2] + tmp[3]);    tmp[2]=0.5 * (tmp[4] + tmp[5]);    tmp[3]=0.5 * (tmp[6] + tmp[7]);    tmp[4]=0.5 * (tmp[8] + tmp[9]);    tmp[5]=0.5 * (tmp[10] + tmp[11]);    tmp[6]=0.5 * (tmp[12] + tmp[13]);    tmp[7]=0.5 * (tmp[14] + tmp[15]);    blk[i][0]=tmp[0] + tmp[7];    blk[i][1]=tmp[1] + tmp[6];    blk[i][2]=tmp[2] + tmp[5];    blk[i][3]=tmp[3] + tmp[4];    blk[i][4]=tmp[3] - tmp[4];    blk[i][5]=tmp[2] - tmp[5];    blk[i][6]=tmp[1] - tmp[6];    blk[i][7]=tmp[0] - tmp[7];  }  return blk;}  }
class C{  private static byte[] computeDigest(File file) throws IOException {  InputStream is=null;  try {    is=new FileInputStream(file);    return DigestUtils.md5(is);  }  finally {    if (is != null) {      is.close();    }  }}  }
class C{  protected AbstractMatrix3D vColumnFlip(){  if (columns > 0) {    columnZero+=(columns - 1) * columnStride;    columnStride=-columnStride;    this.isNoView=false;  }  return this;}  }
class C{  public static void initUrbanSimZoneWriter(Config config){  UrbanSimParameterConfigModuleV3 module=(UrbanSimParameterConfigModuleV3)config.getModule(UrbanSimParameterConfigModuleV3.GROUP_NAME);  try {    log.info("Initializing UrbanSimParcelCSVWriter ...");    parcelWriter=IOUtils.getBufferedWriter(module.getMATSim4OpusTemp() + FILE_NAME);    log.info("Writing data into " + module.getMATSim4OpusTemp() + FILE_NAME+ " ...");    parcelWriter.write(InternalConstants.PARCEL_ID + "," + ACCESSIBILITY_BY_FREESPEED+ ","+ ACCESSIBILITY_BY_CAR+ ","+ ACCESSIBILITY_BY_BIKE+ ","+ ACCESSIBILITY_BY_WALK+ ","+ ACCESSIBILITY_BY_PT);    parcelWriter.newLine();    log.info("... done!");  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  @SuppressWarnings("unchecked") public void writeByte(byte x) throws SQLException {  attribs.add(Byte.valueOf(x));}  }
class C{  private static String extractZoneFromZoneUri(String zoneUri){  if (zoneUri != null) {    String[] bits=zoneUri.split("/");    zoneUri=bits[bits.length - 1];  }  return zoneUri;}  }
class C{  public static Integer inleinPort() throws IOException {  Path p=Paths.get(inleinHome(),"port");  if (!p.toFile().exists()) {    return null;  }  byte[] stringPort=Files.readAllBytes(p);  return Integer.parseInt(new String(stringPort));}  }
class C{  public boolean okToSend(){  return true;}  }
class C{  public static void tql2(int n,double[] d,double[] e,double[][] V){  for (int i=1; i < n; i++) {    e[i - 1]=e[i];  }  e[n - 1]=0.0;  double f=0.0;  double tst1=0.0;  double eps=Math.pow(2.0,-52.0);  for (int l=0; l < n; l++) {    tst1=Math.max(tst1,Math.abs(d[l]) + Math.abs(e[l]));    int m=l;    while (m < n) {      if (Math.abs(e[m]) <= eps * tst1) {        break;      }      m++;    }    if (m > l) {      int iter=0;      do {        iter=iter + 1;        double g=d[l];        double p=(d[l + 1] - g) / (2.0 * e[l]);        double r=hypot(p,1.0);        if (p < 0) {          r=-r;        }        d[l]=e[l] / (p + r);        d[l + 1]=e[l] * (p + r);        double dl1=d[l + 1];        double h=g - d[l];        for (int i=l + 2; i < n; i++) {          d[i]-=h;        }        f=f + h;        p=d[m];        double c=1.0;        double c2=c;        double c3=c;        double el1=e[l + 1];        double s=0.0;        double s2=0.0;        for (int i=m - 1; i >= l; i--) {          c3=c2;          c2=c;          s2=s;          g=c * e[i];          h=c * p;          r=hypot(p,e[i]);          e[i + 1]=s * r;          s=e[i] / r;          c=p / r;          p=c * d[i] - s * g;          d[i + 1]=h + s * (c * g + s * d[i]);          for (int k=0; k < n; k++) {            h=V[k][i + 1];            V[k][i + 1]=s * V[k][i] + c * h;            V[k][i]=c * V[k][i] - s * h;          }        }        p=-s * s2 * c3* el1* e[l] / dl1;        e[l]=s * p;        d[l]=c * p;      } while (Math.abs(e[l]) > eps * tst1);    }    d[l]=d[l] + f;    e[l]=0.0;  }  for (int i=0; i < n - 1; i++) {    int k=i;    double p=d[i];    for (int j=i + 1; j < n; j++) {      if (d[j] < p) {        k=j;        p=d[j];      }    }    if (k != i) {      d[k]=d[i];      d[i]=p;      for (int j=0; j < n; j++) {        p=V[j][i];        V[j][i]=V[j][k];        V[j][k]=p;      }    }  }}  }
class C{  public final void writeBoolean(boolean val) throws IOException {  out.write(val ? 1 : 0);  written++;}  }
class C{  @Override public void expandBy(final double distance){  expandBy(distance,distance,distance);}  }
class C{  public InitializeFontGUI(){  initialize();}  }
class C{  private void findPivots(int k){  int numIterations=4;  int randomRow=(int)(Math.random() * matrixFastmap.getDimension());  int pivot1=0;  int pivot2=randomRow;  for (int i=0; i < numIterations; i++) {    pivot1=matrixFastmap.getMaximumDistance(pivot2,currentDimension,X);    pivot2=matrixFastmap.getMaximumDistance(pivot1,currentDimension,X);  }  PA[1][k - 1]=pivot2;  PA[0][k - 1]=pivot1;}  }
class C{  public static boolean isSimpleValueType(Class<?> clazz){  return BeanUtils.isSimpleValueType(clazz);}  }
class C{  public Task<ExportGroupRestRep> update(URI id,ExportUpdateParam input){  return putTask(input,getIdUrl(),id);}  }
class C{  public static boolean isConnectedMobile(Context context){  NetworkInfo info=getNetworkInfo(context);  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_MOBILE);}  }
class C{  protected void calcYValueSum(List<? extends DataSet<?>> dataSets){  mYValueSum=0;  if (dataSets == null)   return;  for (int i=0; i < dataSets.size(); i++) {    mYValueSum+=Math.abs(dataSets.get(i).getYValueSum());  }}  }
class C{  public synchronized BaseType createPointerType(final BaseType baseType) throws CouldntSaveDataException {  Preconditions.checkNotNull(baseType,"IE02781: Base type can not be null.");  if (baseType.pointedToBy() != null) {    return baseType.pointedToBy();  } else {    final String newTypeName=BaseType.getPointerTypeName(baseType,baseType.getPointerLevel() + 1);    final BaseType newType=instantiateType(newTypeName,getDefaultPointerSize(),false,baseType,BaseTypeCategory.POINTER);    notifyTypeAdded(newType);    return newType;  }}  }
class C{  @Override public void shutdown(){}  }
class C{  public String[] segments(){  String[] segmentCopy=new String[segments.length];  System.arraycopy(segments,0,segmentCopy,0,segments.length);  return segmentCopy;}  }
class C{  public SET(){  set=new TreeSet<Key>();}  }
class C{  public void clearCoordinates(){  this.hasCoordinates=false;  this.latitude=0.0f;  this.longitude=0.0f;}  }
class C{  public void testBug7026() throws Exception {  if (!serverSupportsStoredProcedures()) {    return;  }  createProcedure("testBug7026","(x int, out y int)\nBEGIN\nSELECT 1;end\n");  this.rs=this.conn.getMetaData().getProcedures(this.conn.getCatalog(),null,"testBug7026");  assertTrue(this.rs.next());  assertTrue("testBug7026".equals(this.rs.getString(3)));  assertTrue(!this.rs.next());  this.rs=this.conn.getMetaData().getProcedures("abfgerfg",null,"testBug7026");  assertTrue(!this.rs.next());  this.rs=this.conn.getMetaData().getProcedures(null,null,"testBug7026");  assertTrue(this.rs.next());  assertTrue("testBug7026".equals(this.rs.getString(3)));  assertTrue(!this.rs.next());}  }
class C{  public XYZMap(float loadFactor,int capacity){  if (loadFactor > 1.0) {    throw new IllegalArgumentException("You really dont want to be using a " + loadFactor + " load loadFactor with this hash table!");  }  this.loadFactor=loadFactor;  int tCapacity=1;  while (tCapacity < capacity) {    tCapacity<<=1;  }  this.buckets=new XYZAddressable[tCapacity];  this.refreshFields();}  }
class C{  public IPAddressName(String name) throws IOException {  if (name == null || name.length() == 0) {    throw new IOException("IPAddress cannot be null or empty");  }  if (name.charAt(name.length() - 1) == '/') {    throw new IOException("Invalid IPAddress: " + name);  }  if (name.indexOf(':') >= 0) {    parseIPv6(name);    isIPv4=false;  } else   if (name.indexOf('.') >= 0) {    parseIPv4(name);    isIPv4=true;  } else {    throw new IOException("Invalid IPAddress: " + name);  }}  }
class C{  public static boolean terminate(ThreadPool pool,long timeout,TimeUnit timeUnit){  if (pool != null) {    pool.shutdown();    try {      if (pool.awaitTermination(timeout,timeUnit)) {        return true;      }    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();    }    pool.shutdownNow();  }  return false;}  }
class C{  private List<AccessPoint> constructAccessPoints(){  ArrayList<AccessPoint> accessPoints=new ArrayList<AccessPoint>();  Multimap<String,AccessPoint> apMap=new Multimap<String,AccessPoint>();  final List<WifiConfiguration> configs=mWifiManager.getConfiguredNetworks();  if (configs != null) {    for (    WifiConfiguration config : configs) {      AccessPoint accessPoint=new AccessPoint(getActivity(),config);      accessPoint.update(mLastInfo,mLastState);      accessPoints.add(accessPoint);      apMap.put(accessPoint.ssid,accessPoint);    }  }  final List<ScanResult> results=mWifiManager.getScanResults();  if (results != null) {    for (    ScanResult result : results) {      if (result.SSID == null || result.SSID.length() == 0) {        continue;      }      if (!mIbssSupported && result.capabilities.contains("[IBSS]")) {        continue;      }      boolean found=false;      for (      AccessPoint accessPoint : apMap.getAll(result.SSID)) {        if (accessPoint.update(result))         found=true;      }      if (!found) {        AccessPoint accessPoint=new AccessPoint(getActivity(),result);        accessPoints.add(accessPoint);        apMap.put(accessPoint.ssid,accessPoint);      }    }  }  Collections.sort(accessPoints);  return accessPoints;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == TypeProvidingElement.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == TypedElement.class) {switch (derivedFeatureID) {case N4JSPackage.FORMAL_PARAMETER__DECLARED_TYPE_REF:    return N4JSPackage.TYPED_ELEMENT__DECLARED_TYPE_REF;case N4JSPackage.FORMAL_PARAMETER__BOGUS_TYPE_REF:  return N4JSPackage.TYPED_ELEMENT__BOGUS_TYPE_REF;default :return -1;}}if (baseClass == TypableElement.class) {switch (derivedFeatureID) {default :return -1;}}if (baseClass == IdentifiableElement.class) {switch (derivedFeatureID) {case N4JSPackage.FORMAL_PARAMETER__NAME:return TypesPackage.IDENTIFIABLE_ELEMENT__NAME;default :return -1;}}if (baseClass == NamedElement.class) {switch (derivedFeatureID) {default :return -1;}}if (baseClass == Variable.class) {switch (derivedFeatureID) {default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public static void terminate(){  final ToolboxLifecycleParticipant[] participants=getRegisteredTools();  Assert.isNotNull(participants);  for (int i=0; i < participants.length; i++) {    participants[i].terminate();  }}  }
class C{  public void stop() throws AdminException {  long timeout=30;  CacheServer[] servers=getCacheServers();  for (int i=0; i < servers.length; i++) {    servers[i].stop();  }  for (int i=0; i < servers.length; i++) {    try {      if (!servers[i].waitToStop(timeout * 1000)) {        throw new AdminException(LocalizedStrings.AdminDistributedSystemImpl_0_DID_NOT_STOP_AFTER_1_SECONDS.toLocalizedString(new Object[]{servers[i],Long.valueOf(timeout)}));      }    } catch (    InterruptedException ex) {      Thread.currentThread().interrupt();      throw new AdminException(LocalizedStrings.AdminDistributedSystemImpl_INTERRUPTED_WHILE_WAITING_FOR_0_TO_STOP.toLocalizedString(servers[i]),ex);    }  }  DistributionLocator[] locs=getDistributionLocators();  for (int i=0; i < locs.length; i++) {    locs[i].stop();  }  for (int i=0; i < locs.length; i++) {    try {      if (!locs[i].waitToStop(timeout * 1000)) {        throw new AdminException(LocalizedStrings.AdminDistributedSystemImpl_0_DID_NOT_STOP_AFTER_1_SECONDS.toLocalizedString(new Object[]{locs[i],Long.valueOf(timeout)}));      }    } catch (    InterruptedException ex) {      Thread.currentThread().interrupt();      throw new AdminException(LocalizedStrings.AdminDistributedSystemImpl_INTERRUPTED_WHILE_WAITING_FOR_0_TO_STOP.toLocalizedString(locs[i]),ex);    }  }}  }
class C{  public OverpassFilterQuery rel(){  applySeparator();  builder.append("rel");  return this;}  }
class C{  private boolean checkEquals(Object obj) throws Exception {  if (obj == null)   return false;  if (obj instanceof Proxy) {    InvocationHandler ih=Proxy.getInvocationHandler(obj);    if (ih instanceof AnnotationImpl) {      AnnotationImpl other=(AnnotationImpl)ih;      return annotation.equals(other.annotation);    }  }  Class otherAnnotationType=(Class)JDK_ANNOTATION_TYPE_METHOD.invoke(obj,(Object[])null);  if (getAnnotationType().equals(otherAnnotationType) == false)   return false;  Method[] methods=annotationType.getDeclaredMethods();  for (int i=0; i < methods.length; ++i) {    String name=methods[i].getName();    MemberValue mv=annotation.getMemberValue(name);    Object value=null;    Object otherValue=null;    try {      if (mv != null)       value=mv.getValue(classLoader,pool,methods[i]);      if (value == null)       value=getDefault(name,methods[i]);      otherValue=methods[i].invoke(obj,(Object[])null);    } catch (    RuntimeException e) {      throw e;    }catch (    Exception e) {      throw new RuntimeException("Error retrieving value " + name + " for annotation "+ annotation.getTypeName(),e);    }    if (value == null && otherValue != null)     return false;    if (value != null && value.equals(otherValue) == false)     return false;  }  return true;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.N4_FIELD_ACCESSOR__BODY:    return basicSetBody(null,msgs);case N4JSPackage.N4_FIELD_ACCESSOR__LOK:  return basicSet_lok(null,msgs);case N4JSPackage.N4_FIELD_ACCESSOR__DECLARED_NAME:return basicSetDeclaredName(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static boolean looksLikeBluetoothAddress(String s){  return Pattern.matches("^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$",s);}  }
class C{  private void restoreWidget(Key key,byte[] buffer,int dataSize) throws IOException {  if (VERBOSE)   Log.v(TAG,"unpacking widget " + key.id);  if (DEBUG)   Log.d(TAG,"read (" + buffer.length + "): "+ Base64.encodeToString(buffer,0,dataSize,Base64.NO_WRAP));  Widget widget=unpackProto(new Widget(),buffer,dataSize);  if (DEBUG)   Log.d(TAG,"unpacked " + widget.provider);  if (widget.icon.data != null) {    Bitmap icon=BitmapFactory.decodeByteArray(widget.icon.data,0,widget.icon.data.length);    if (icon == null) {      Log.w(TAG,"failed to unpack widget icon for " + key.name);    } else {      mIconCache.preloadIcon(ComponentName.unflattenFromString(widget.provider),icon,widget.icon.dpi,widget.label,mUserSerial,mIdp);    }  }  widgetSizes.add(widget.provider + "#" + 1+ ","+ 1);}  }
class C{  void materialize(){  if (cachefill < 0) {    return;  }  double min=Double.MAX_VALUE, max=Double.MIN_VALUE;  for (int i=0; i < cachefill; i++) {    min=Math.min(min,cachec[i]);    max=Math.max(max,cachec[i]);  }  LinearScale scale=new LinearScale(min,max);  min=scale.getMin();  max=scale.getMax();  this.base=min;  this.max=max;  this.binsize=(max - min) / this.destsize;  this.data=new long[this.destsize << 1];  size=destsize;  final int end=cachefill;  cachefill=-1;  for (int i=0; i < end; i++) {    increment(cachec[i],cachev[i]);  }  cachec=null;  cachev=null;}  }
class C{  private void mergeCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] <= runLen[n] + runLen[n + 1]) {      if (runLen[n - 1] < runLen[n + 1])       n--;      mergeAt(n);    } else     if (runLen[n] <= runLen[n + 1]) {      mergeAt(n);    } else {      break;    }  }}  }
class C{  public void closeMenu(){  if (currentMenu != null) {    deselectButton(currentMenu.getOpenButton());    currentMenu.remove();    currentMenu=null;  }}  }
class C{  protected void pack(){  Component component=getComponent();  if (component instanceof Window) {    ((Window)component).pack();  }}  }
class C{  public Stock(JSONObject jsonQuote) throws JSONException {  this.isRemoveMode=false;  this.name=jsonQuote.has(JsonXmlConstants.J_NAME) ? jsonQuote.getString(JsonXmlConstants.J_NAME) : "";  this.symbol=jsonQuote.has(JsonXmlConstants.J_SYMBOL_SMALL) ? jsonQuote.getString(JsonXmlConstants.J_SYMBOL_SMALL) : "";  if (this.symbol.isEmpty()) {    this.symbol=jsonQuote.has(JsonXmlConstants.J_SYMBOL_BIG) ? jsonQuote.getString(JsonXmlConstants.J_SYMBOL_BIG) : "";  }  this.price=jsonQuote.has(JsonXmlConstants.J_LAST_TRADE_PRICE) ? jsonQuote.getString(JsonXmlConstants.J_LAST_TRADE_PRICE) : UNKNOWN;  this.lastUpdate=jsonQuote.has(JsonXmlConstants.J_LAST_TRADE_TIME) ? jsonQuote.getString(JsonXmlConstants.J_LAST_TRADE_TIME) : "";  this.priceChangeNumber=jsonQuote.has(JsonXmlConstants.J_CHANGE_NUMBER) ? jsonQuote.getString(JsonXmlConstants.J_CHANGE_NUMBER) : "";  this.priceChangePercent=jsonQuote.has(JsonXmlConstants.J_CHANGE_PERCENT) ? jsonQuote.getString(JsonXmlConstants.J_CHANGE_PERCENT) : "";  this.stockExchange=jsonQuote.has(JsonXmlConstants.J_STOCK_EXCHANGE) ? jsonQuote.getString(JsonXmlConstants.J_STOCK_EXCHANGE) : "";  this.volume=jsonQuote.has(JsonXmlConstants.J_VOLUME) ? jsonQuote.getString(JsonXmlConstants.J_VOLUME) : "";  this.open=jsonQuote.has(JsonXmlConstants.J_OPEN) ? jsonQuote.getString(JsonXmlConstants.J_OPEN) : "";  this.prevClose=jsonQuote.has(JsonXmlConstants.J_PREV_CLOSE) ? jsonQuote.getString(JsonXmlConstants.J_PREV_CLOSE) : "";  this.hight=jsonQuote.has(JsonXmlConstants.J_HIGTH) ? jsonQuote.getString(JsonXmlConstants.J_HIGTH) : "";  this.low=jsonQuote.has(JsonXmlConstants.J_LOW) ? jsonQuote.getString(JsonXmlConstants.J_LOW) : "";  this.eps=jsonQuote.has(JsonXmlConstants.J_EPS) ? jsonQuote.getString(JsonXmlConstants.J_EPS) : "";  this.lastTrade=jsonQuote.has(JsonXmlConstants.J_LAST_TRADE_TIME) ? jsonQuote.getString(JsonXmlConstants.J_LAST_TRADE_TIME) : "";  this.stockExchange=jsonQuote.has(JsonXmlConstants.J_STOCK_EXCHANGE) ? jsonQuote.getString(JsonXmlConstants.J_STOCK_EXCHANGE) : "";  this.name=this.name.equals("null") || this.name.equals("Null") ? UNKNOWN : this.name;  this.eps=this.eps.equals("null") || this.eps.equals("Null") ? UNKNOWN : this.eps;  this.prevClose=this.prevClose.equals("null") || this.eps.equals("Null") ? UNKNOWN : this.prevClose;  this.hight=this.hight.equals("null") || this.hight.equals("Null") ? UNKNOWN : this.hight;  this.low=this.low.equals("null") || this.low.equals("Null") ? UNKNOWN : this.low;  this.lastTrade=this.lastTrade.equals("null") || this.lastTrade.equals("Null") ? UNKNOWN : this.lastTrade;  this.stockExchange=this.stockExchange.equals("null") || this.stockExchange.equals("Null") ? UNKNOWN : this.stockExchange;  this.open=this.open.equals("null") || this.open.equals("Null") ? UNKNOWN : this.open;}  }
class C{  @Deprecated public Experiment(String xmlString) throws IOException, XMLException {  super(xmlString);}  }
class C{  public void writeTo(final OutputStream out) throws IOException {  for (  final Block block : blocks) {    out.write(block.data,0,block.limit);  }}  }
class C{  public Mat dht2(){  DenseDoubleMatrix2D dm=new DenseDoubleMatrix2D(getArray());  dm.dht2();  return new Mat(dm.toArray());}  }
class C{  public void run(){  long start=System.currentTimeMillis();  int no=0;  dataSql=getSQL();  detail.setRowCount(0);  try {    m_pstmt=getStatement(dataSql);    log.fine("Start query - " + (System.currentTimeMillis() - start) + "ms");    m_rs=m_pstmt.executeQuery();    log.fine("End query - " + (System.currentTimeMillis() - start) + "ms");    while (m_rs.next()) {      if (this.isInterrupted()) {        log.finer("Interrupted");        close();        return;      }      no++;      int row=detail.getRowCount();      detail.setRowCount(row + 1);      int colOffset=1;      int columnDisplayIndex=0;      int column=0;      for (      MBrowseField field : browserFields) {        Object value=null;        if (field.isKey() && !field.getAD_View_Column().getColumnSQL().equals("'Row' AS \"Row\""))         value=new IDColumn(m_rs.getInt(column + colOffset)); else         if (field.isKey() && !field.getAD_View_Column().getColumnSQL().equals("'Row' AS \"Row\""))         value=new IDColumn(no); else         if (DisplayType.TableDir == field.getAD_Reference_ID() || DisplayType.Table == field.getAD_Reference_ID() || DisplayType.Integer == field.getAD_Reference_ID() || DisplayType.PAttribute == field.getAD_Reference_ID() || DisplayType.Account == field.getAD_Reference_ID()) {          Integer id=m_rs.getInt(column + colOffset);          value=id != 0 ? id : null;        } else         if (DisplayType.isNumeric(field.getAD_Reference_ID()))         value=m_rs.getBigDecimal(column + colOffset); else         if (DisplayType.isDate(field.getAD_Reference_ID()))         value=m_rs.getTimestamp(column + colOffset); else         if (DisplayType.YesNo == field.getAD_Reference_ID()) {          value=m_rs.getString(column + colOffset);          if (value != null)           value=value.equals("Y");        } else         value=m_rs.getObject(column + colOffset);        GridField gridField=MBrowseField.createGridFieldVO(field,getWindowNo());        gridField.setValue(value,true);        detail.setValueAt(row,columnDisplayIndex,gridField);        if (field.isDisplayed())         columnDisplayIndex++;        column++;      }    }  } catch (  SQLException e) {    log.log(Level.SEVERE,dataSql,e);  }  close();  log.fine("#" + no + " - "+ (System.currentTimeMillis() - start)+ "ms");  if (detail.isShowTotals())   detail.addTotals();  detail.autoSize();  m_frame.setCursor(Cursor.getDefaultCursor());  setStatusLine(Integer.toString(no) + " " + Msg.getMsg(Env.getCtx(),"SearchRows_EnterQuery"),false);  setStatusDB(Integer.toString(no));  if (no == 0)   log.fine(dataSql); else {    detail.getSelectionModel().setSelectionInterval(0,0);    detail.requestFocus();  }  isAllSelected=isSelectedByDefault();  selectedRows();}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public SolrXMLCoresLocator(String originalXML,ConfigSolrXmlOld cfg){  this.solrXmlTemplate=buildTemplate(originalXML);  this.cfg=cfg;}  }
class C{  private static void weakHashLength32WithSeeds(byte[] bytes,int offset,long seedA,long seedB,long[] output){  long part1=load64(bytes,offset);  long part2=load64(bytes,offset + 8);  long part3=load64(bytes,offset + 16);  long part4=load64(bytes,offset + 24);  seedA+=part1;  seedB=rotateRight(seedB + seedA + part4,21);  long c=seedA;  seedA+=part2;  seedA+=part3;  seedB+=rotateRight(seedA,44);  output[0]=seedA + part4;  output[1]=seedB + c;}  }
class C{  public JdbcConnection createConnection(boolean columnList){  throw DbException.getUnsupportedException("TODO");}  }
class C{  public static void main(String[] args) throws Exception {  String tmpStr;  String filename;  DataSource source;  Instances data;  int classIndex;  Capabilities cap;  Iterator<Capability> iter;  if (args.length == 0) {    System.out.println("\nUsage: " + Capabilities.class.getName() + " -file <dataset> [-c <class index>]\n");    return;  }  tmpStr=Utils.getOption("file",args);  if (tmpStr.length() == 0) {    throw new Exception("No file provided with option '-file'!");  } else {    filename=tmpStr;  }  tmpStr=Utils.getOption("c",args);  if (tmpStr.length() != 0) {    if (tmpStr.equals("first")) {      classIndex=0;    } else     if (tmpStr.equals("last")) {      classIndex=-2;    } else {      classIndex=Integer.parseInt(tmpStr) - 1;    }  } else {    classIndex=-3;  }  source=new DataSource(filename);  if (classIndex == -3) {    data=source.getDataSet();  } else   if (classIndex == -2) {    data=source.getDataSet(source.getStructure().numAttributes() - 1);  } else {    data=source.getDataSet(classIndex);  }  cap=forInstances(data);  System.out.println("File: " + filename);  System.out.println("Class index: " + ((data.classIndex() == -1) ? "not set" : "" + (data.classIndex() + 1)));  System.out.println("Capabilities:");  iter=cap.capabilities();  while (iter.hasNext()) {    System.out.println("- " + iter.next());  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MMovementLineMA[");  sb.append("M_MovementLine_ID=").append(getM_MovementLine_ID()).append(",M_AttributeSetInstance_ID=").append(getM_AttributeSetInstance_ID()).append(", Qty=").append(getMovementQty()).append("]");  return sb.toString();}  }
class C{  public StrBuilder append(double value){  return append(String.valueOf(value));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.668 -0500",hash_original_method="75B14133CB489027D77A424630AF754B",hash_generated_method="35F35D443F4F1C8CEBFB68A43EE62BD6") public static Typeface createFromFile(File path){  return new Typeface(nativeCreateFromFile(path.getAbsolutePath()));}  }
class C{  public IndependenceTest indTestSubset(List vars){  throw new UnsupportedOperationException();}  }
class C{  public Builder forceIcons(){  forceIcons=true;  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public GraphicsNode firstChild(){  GraphicsNode result=getFirstChild(currentNode);  if (result != null) {    currentNode=result;  }  return result;}  }
class C{  public static int hash32(final String text,int from,int length){  return hash32(text.substring(from,from + length));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:47.311 -0400",hash_original_method="1F20C74E5FA90998EED1F262145E5A78",hash_generated_method="2A7FB06129B3C34770FC909CCF3E0658") protected Package definePackage(String packageName,Manifest manifest,URL url) throws IllegalArgumentException {  Attributes mainAttributes=manifest.getMainAttributes();  String dirName=packageName.replace('.','/') + "/";  Attributes packageAttributes=manifest.getAttributes(dirName);  boolean noEntry=false;  if (packageAttributes == null) {    noEntry=true;    packageAttributes=mainAttributes;  }  String specificationTitle=packageAttributes.getValue(Attributes.Name.SPECIFICATION_TITLE);  if (specificationTitle == null && !noEntry) {    specificationTitle=mainAttributes.getValue(Attributes.Name.SPECIFICATION_TITLE);  }  String specificationVersion=packageAttributes.getValue(Attributes.Name.SPECIFICATION_VERSION);  if (specificationVersion == null && !noEntry) {    specificationVersion=mainAttributes.getValue(Attributes.Name.SPECIFICATION_VERSION);  }  String specificationVendor=packageAttributes.getValue(Attributes.Name.SPECIFICATION_VENDOR);  if (specificationVendor == null && !noEntry) {    specificationVendor=mainAttributes.getValue(Attributes.Name.SPECIFICATION_VENDOR);  }  String implementationTitle=packageAttributes.getValue(Attributes.Name.IMPLEMENTATION_TITLE);  if (implementationTitle == null && !noEntry) {    implementationTitle=mainAttributes.getValue(Attributes.Name.IMPLEMENTATION_TITLE);  }  String implementationVersion=packageAttributes.getValue(Attributes.Name.IMPLEMENTATION_VERSION);  if (implementationVersion == null && !noEntry) {    implementationVersion=mainAttributes.getValue(Attributes.Name.IMPLEMENTATION_VERSION);  }  String implementationVendor=packageAttributes.getValue(Attributes.Name.IMPLEMENTATION_VENDOR);  if (implementationVendor == null && !noEntry) {    implementationVendor=mainAttributes.getValue(Attributes.Name.IMPLEMENTATION_VENDOR);  }  return definePackage(packageName,specificationTitle,specificationVersion,specificationVendor,implementationTitle,implementationVersion,implementationVendor,isSealed(manifest,dirName) ? url : null);}  }
class C{  private List<MonitoredThread> readAndDML(OperatorCreator readPlan,OperatorCreator dmlPlan){  List<MonitoredThread> threads=ConcurrentTestBuilderImpl.create().add("Scan",readPlan).sync("a",Stage.POST_BEGIN).sync("b",Stage.PRE_SCAN).mark(Stage.PRE_BEGIN,Stage.PRE_SCAN).add("DML",dmlPlan).sync("a",Stage.PRE_BEGIN).sync("b",Stage.FINISH).mark(Stage.PRE_BEGIN,Stage.POST_COMMIT).build(this);  ThreadHelper.runAndCheck(threads);  new TimeMarkerComparison(threads).verify("Scan:PRE_BEGIN","DML:PRE_BEGIN","DML:POST_COMMIT","Scan:PRE_SCAN");  return threads;}  }
class C{  private void importSPEntity(Element entity) throws Exception {  if (entity == null) {    throw new IllegalArgumentException("Null Service Provider entity");  }  NodeList spList=entity.getElementsByTagNameNS(SAMLNames.NS_NAME_SAML_METADATA,SAMLNames.SPSSODESCRIPTOR);  if (spList.getLength() == 0) {    throw new IDMException("SAML medadata error: EntityDescriptor " + "does not have an idp or sp data!");  }  Element spssoEle=(Element)spList.item(0);  String rpID=entity.getAttribute(SAMLNames.ENTID);  RelyingParty rp=null;  try {    rp=parseSPOrganization(entity);    if (rp == null) {      rp=new RelyingParty(rpID);      rp.setUrl(rpID);    }    boolean authnReqSigned=spssoEle.getAttribute(SAMLNames.AUTHNREQUESTSIGNED).equals(SAMLNames.TRUE) ? true : false;    rp.setAuthnRequestsSigned(authnReqSigned);    validateRequiredProtocol(spssoEle);    parseSPKeyDescriptor(spssoEle,rp);    parseAssertionConsumerService(spssoEle,rp);    parseSingleLogoutService(spssoEle,rp);  } catch (  Exception e) {    throw new IDMException("Service provider metadata parsing error. ",e);  }  try {    RelyingParty oldRP=this.idmClient.getRelyingPartyByUrl(this.tenantName,rp.getUrl());    if (oldRP != null) {      this.idmClient.deleteRelyingParty(this.tenantName,oldRP.getName());    }    oldRP=this.idmClient.getRelyingParty(this.tenantName,rp.getName());    if (oldRP != null) {      this.idmClient.deleteRelyingParty(this.tenantName,oldRP.getName());    }  } catch (  Exception e) {    throw new IDMException("Failed to remove existing service provider registration. ",e);  }  try {    this.idmClient.addRelyingParty(this.tenantName,rp);  } catch (  Exception e) {    RelyingParty createdRP=this.idmClient.getRelyingPartyByUrl(this.tenantName,rp.getUrl());    if (createdRP != null) {      this.idmClient.deleteRelyingParty(this.tenantName,createdRP.getName());    }    throw e;  }}  }
class C{  public String[] validBaudRates(){  return new String[]{"57,600","115,200","230,400","250,000","333,333","460,800","500,000"};}  }
class C{  public ASTFlattener(){  this.fBuffer=new StringBuffer();}  }
class C{  private int freeDeferrals(final long blockAddr,final long lastReleaseTime){  int totalFreed=0;  DataInputStream strBuf=null;  final Lock lock=m_allocationLock.writeLock();  lock.lock();  try {    assertOpen();    strBuf=new DataInputStream(getInputStream(blockAddr));    int nxtAddr=strBuf.readInt();    while (nxtAddr != 0) {      if (nxtAddr > 0) {        final int bloblen=strBuf.readInt();        assert bloblen > 0;        immediateFree(makeAddr(-nxtAddr,bloblen));      } else {        immediateFree(makeAddr(nxtAddr,1));      }      totalFreed++;      nxtAddr=strBuf.readInt();    }    immediateFree(blockAddr);    m_lastDeferredReleaseTime=lastReleaseTime;    if (log.isTraceEnabled())     log.trace("Updated m_lastDeferredReleaseTime=" + m_lastDeferredReleaseTime);  } catch (  IOException e) {    throw new RuntimeException("Problem freeing deferrals",e);  } finally {    lock.unlock();    if (strBuf != null) {      try {        strBuf.close();      } catch (      IOException e) {        log.error(e,e);      }    }  }  return totalFreed;}  }
class C{  public void accept(SocketAddress remoteAddress,int timeout) throws IOException {  socketImpl.accept(remoteAddress,timeout);}  }
class C{  final public int capacity(){  return keys.capacity();}  }
class C{  public void visitParameter(String name,int access){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    mv.visitParameter(name,access);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ModelPackage.MODEL_REFERENCE__VERSION:    return VERSION_EDEFAULT == null ? version != null : !VERSION_EDEFAULT.equals(version);case ModelPackage.MODEL_REFERENCE__IMPORTED_NAMESPACE:  return IMPORTED_NAMESPACE_EDEFAULT == null ? importedNamespace != null : !IMPORTED_NAMESPACE_EDEFAULT.equals(importedNamespace);}return super.eIsSet(featureID);}  }
class C{  protected int findMatchingOpenBracket(IDocument document,int line,int end,int closingBracketIncrease) throws BadLocationException {  int start=document.getLineOffset(line);  int brackcount=getBracketCount(document,start,end,false) - closingBracketIncrease;  while (brackcount < 0) {    line--;    if (line < 0) {      return -1;    }    start=document.getLineOffset(line);    end=start + document.getLineLength(line) - 1;    brackcount+=getBracketCount(document,start,end,false);  }  return line;}  }
class C{  public boolean isMediaTraceActivated(){  return readBoolean(RcsSettingsData.MEDIA_TRACE_ACTIVATED);}  }
class C{  public final void testIsEnabled(){  CharSequence[] entries=new CharSequence[]{"entry1","entry2"};  ProxySpinnerAdapter proxySpinnerAdapter=createAdapter(entries);  assertFalse(proxySpinnerAdapter.isEnabled(0));  assertTrue(proxySpinnerAdapter.isEnabled(1));  assertTrue(proxySpinnerAdapter.isEnabled(2));}  }
class C{  public Iterator<String> findAttributes(){  Set<String> attrs;  if (attributes == null)   attrs=Collections.emptySet(); else   attrs=attributes.keySet();  return attrs.iterator();}  }
class C{  @Override public void register(String store,String key,KeyInformation information,BaseTransaction tx) throws BackendException {  if (mode == Mode.CLOUD) {    CloudSolrClient client=(CloudSolrClient)solrClient;    try {      createCollectionIfNotExists(client,configuration,store);    } catch (    IOException e) {      throw new PermanentBackendException(e);    }catch (    SolrServerException e) {      throw new PermanentBackendException(e);    }catch (    InterruptedException e) {      throw new PermanentBackendException(e);    }catch (    KeeperException e) {      throw new PermanentBackendException(e);    }  }}  }
class C{  public static int putByte(byte[] bytes,int offset,byte b){  bytes[offset]=b;  return offset + 1;}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);}  }
class C{  private String createProtectedHeader(){  StringBuilder header=new StringBuilder();  header.append("{\"alg\":\"").append(PROTECTED_HEADER_ALG).append("\",");  header.append("\"enc\":\"").append(PROTECTED_HEADER_ENC).append("\",");  header.append("\"kid\":\"").append(publicKeyResponse.getKeyId()).append("\"}");  return header.toString();}  }
class C{  protected void writeFiles(){  for (  ESEInterface eseInterface : eseInterfaces) {    eseInterface.write();  }}  }
class C{  public void testPosPosFirstShorter(){  String numA="293478573489347658763745839457637";  String numB="2837462783428374767845648748973847593874837948575684767";  String res="2837462783428374767845615168483972194300564226167553530";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.159 -0500",hash_original_method="70760D1E35F31209F549560E00AD3199",hash_generated_method="E3D2C99D518F19A180633059B3BB5FD0") public void rotateX(float deg){  addTaint(deg);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void addGetTimeNanos(long duration){  getTimeNanos.addAndGet(duration);  if (delegate != null)   delegate.addGetTimeNanos(duration);}  }
class C{  protected void invalidateSavepoints(){synchronized (getSynchronizationObject()) {    for (    FBSavepoint savepoint : savepoints) {      savepoint.invalidate();    }    savepoints.clear();  }}  }
class C{  public void lowerBound(byte[] key) throws IOException {  lowerBound(key,0,key.length);}  }
class C{  public int num_states(){  return _num_states;}  }
class C{  public int size(){  return index.size();}  }
class C{  public static <K,V>Map<K,V> requireKeys(Map<K,V> map,K requiredKeyA,K requiredKeyB,K requiredKeyC){  requireKeys(map,requiredKeyA);  requireKeys(map,requiredKeyB);  requireKeys(map,requiredKeyC);  return map;}  }
class C{  @RequestMapping(method=RequestMethod.POST) @ApiOperation(value="create a parametrized Query",notes="Prepare the specified parametrized query and assign the corresponding ID for lookup",response=void.class) @ApiResponses({@ApiResponse(code=201,message="Successfully created."),@ApiResponse(code=401,message="Invalid Username or Password."),@ApiResponse(code=403,message="Insufficient privileges for operation."),@ApiResponse(code=409,message="QueryId already assigned to other query."),@ApiResponse(code=500,message="GemFire throws an error or exception.")}) @PreAuthorize("@securityService.authorize('DATA', 'READ')") public ResponseEntity<?> create(@RequestParam("id") final String queryId,@RequestParam(value="q",required=false) String oqlInUrl,@RequestBody(required=false) final String oqlInBody){  final String oqlStatement=validateQuery(oqlInUrl,oqlInBody);  logger.debug("Creating a named, parametrized Query ({}) with ID ({})...",oqlStatement,queryId);  final String existingOql=createNamedQuery(PARAMETERIZED_QUERIES_REGION,queryId,oqlStatement);  final HttpHeaders headers=new HttpHeaders();  headers.setLocation(toUri("queries",queryId));  if (existingOql != null) {    headers.setContentType(MediaType.APPLICATION_JSON);    return new ResponseEntity<String>(JSONUtils.formulateJsonForExistingQuery(queryId,existingOql),headers,HttpStatus.CONFLICT);  } else {    return new ResponseEntity<String>(headers,HttpStatus.CREATED);  }}  }
class C{  private int calcHeuristic(State state){  if (destinationSplit == null)   return 0;  VertexStore.Vertex vertex=streetLayer.vertexStore.getCursor(state.vertex);  int deltaLatFixed=destinationSplit.fixedLat - vertex.getFixedLat();  int deltaLonFixed=destinationSplit.fixedLon - vertex.getFixedLon();  double millimetersX=millimetersPerDegreeLonFixed * deltaLonFixed;  double millimetersY=MM_PER_DEGREE_LAT_FIXED * deltaLatFixed;  double distanceMillimeters=FastMath.sqrt(millimetersX * millimetersX + millimetersY * millimetersY);  double estimate=distanceMillimeters;  if (dominanceVariable != State.RoutingVariable.DISTANCE_MILLIMETERS) {    estimate*=maxSpeedSecondsPerMillimeter;  }  if (dominanceVariable == State.RoutingVariable.WEIGHT && streetMode == StreetMode.WALK) {    estimate*=EdgeStore.WALK_RELUCTANCE_FACTOR;  }  return (int)estimate;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:19.729 -0500",hash_original_method="A40BE330B9742EEEBB8728870BF9ED45",hash_generated_method="26D45FD24D1E6041BE7858FA9F49897E") public void restartInput(View view){  checkFocus();synchronized (mH) {    if (mServedView != view && (mServedView == null || !mServedView.checkInputConnectionProxy(view))) {      return;    }    mServedConnecting=true;  }  startInputInner();}  }
class C{  public static void gluPerspective(GL10 gl,double fovy,double aspect,double zNear,double zFar){  double top=zNear * Math.tan(fovy * (Math.PI / 360.0));  double bottom=-top;  double left=bottom * aspect;  double right=top * aspect;  gl.glFrustumf((float)left,(float)right,(float)bottom,(float)top,(float)zNear,(float)zFar);}  }
class C{  public void expunged(MailboxSession session,Map<MessageUid,MessageMetaData> uids,Mailbox mailbox){  listener.event(eventFactory.expunged(session,uids,mailbox));}  }
class C{  public GVTBuilder(){}  }
class C{  public Vec optimize(double eps,int iterationLimit,Function f,List<Vec> initalPoints){  if (initalPoints.isEmpty())   throw new ArithmeticException("Empty Initial list. Can not determin dimension of problem");  Vec init=initalPoints.get(0);  int N=initalPoints.get(0).length();  List<ProbailityMatch<Vec>> simplex=new ArrayList<ProbailityMatch<Vec>>(N);  for (  Vec vars : initalPoints)   simplex.add(new ProbailityMatch<Vec>(f.f(vars),vars.clone()));  Random rand=new Random(initalPoints.hashCode());  while (simplex.size() < N + 1) {    DenseVector newSimplex=new DenseVector(N);    for (int i=0; i < newSimplex.length(); i++)     if (init.get(i) != 0)     newSimplex.set(i,init.get(i) * rand.nextGaussian()); else     newSimplex.set(i,rand.nextGaussian());    simplex.add(new ProbailityMatch<Vec>(f.f(newSimplex),newSimplex));  }  Collections.sort(simplex);  while (simplex.size() > N + 1)   simplex.remove(simplex.size() - 1);  Vec x0=new DenseVector(N);  Vec xr=new DenseVector(N);  Vec xec=new DenseVector(N);  Vec tmp=new DenseVector(N);  final int lastIndex=simplex.size() - 1;  for (int iterationCount=0; iterationCount < iterationLimit; iterationCount++) {    if (Math.abs(simplex.get(lastIndex).getProbability() - simplex.get(0).getProbability()) < eps)     break;    x0.zeroOut();    for (    ProbailityMatch<Vec> pm : simplex)     x0.mutableAdd(pm.getMatch());    x0.mutableDivide(simplex.size());    x0.copyTo(xr);    x0.copyTo(tmp);    tmp.mutableSubtract(simplex.get(lastIndex).getMatch());    xr.mutableAdd(reflection,tmp);    double fxr=f.f(xr);    if (simplex.get(0).getProbability() <= fxr && fxr < simplex.get(lastIndex - 1).getProbability()) {      insertIntoSimplex(simplex,xr,fxr);      continue;    }    if (fxr < simplex.get(0).getProbability()) {      x0.copyTo(xec);      xec.mutableAdd(expansion,tmp);      double fxec=f.f(xec);      if (fxec < fxr)       insertIntoSimplex(simplex,xec,fxec); else       insertIntoSimplex(simplex,xr,fxr);      continue;    }    x0.copyTo(xec);    xec.mutableAdd(contraction,tmp);    double fxec=f.f(xec);    if (fxec < simplex.get(lastIndex).getProbability()) {      insertIntoSimplex(simplex,xec,fxec);      continue;    }    Vec xBest=simplex.get(0).getMatch();    for (int i=1; i < simplex.size(); i++) {      ProbailityMatch<Vec> pm=simplex.get(i);      Vec xi=pm.getMatch();      xi.mutableSubtract(xBest);      xi.mutableMultiply(shrink);      xi.mutableAdd(xBest);      pm.setProbability(f.f(xi));    }    Collections.sort(simplex);  }  return simplex.get(0).getMatch();}  }
class C{  public boolean nextHost(){  return nextElement(RDE_HOST_URI,"host");}  }
class C{  void addEdge(SparseEdge e){  edges.add(e);  neighbours.add(e.getOpposite(this));}  }
class C{  @Override public void process(K tuple){  Distinct.this.process(tuple);}  }
class C{  private void handleMessage(final String payload){  Timber.d("<--" + payload);  JsonObject data=null;  try {    data=new JsonParser().parse(payload).getAsJsonObject();  } catch (  Exception e) {    if (mCallback != null) {      mCallback.onException(e);    }  }  if (data != null) {    if (data.has(Protocol.Field.MESSAGE)) {      final String message=data.get(Protocol.Field.MESSAGE).getAsString();      if (message.equals(Protocol.Message.CONNECTED)) {        if (data.has(Protocol.Field.SESSION)) {          mSessionID=data.get(Protocol.Field.SESSION).getAsString();        }        initSession();      } else       if (message.equals(Protocol.Message.FAILED)) {        if (data.has(Protocol.Field.VERSION)) {          final String desiredVersion=data.get(Protocol.Field.VERSION).getAsString();          if (isVersionSupported(desiredVersion)) {            mDdpVersion=desiredVersion;            openConnection(true);          } else {            throw new RuntimeException("Protocol version not supported: " + desiredVersion);          }        }      } else       if (message.equals(Protocol.Message.PING)) {        final String id;        if (data.has(Protocol.Field.ID)) {          id=data.get(Protocol.Field.ID).getAsString();        } else {          id=null;        }        sendPong(id);      } else       if (message.equals(Protocol.Message.ADDED) || message.equals(Protocol.Message.ADDED_BEFORE)) {        final String documentID;        if (data.has(Protocol.Field.ID)) {          documentID=data.get(Protocol.Field.ID).getAsString();        } else {          documentID=null;        }        final String collectionName;        if (data.has(Protocol.Field.COLLECTION)) {          collectionName=data.get(Protocol.Field.COLLECTION).getAsString();        } else {          collectionName=null;        }        final String newValuesJson;        if (data.has(Protocol.Field.FIELDS)) {          newValuesJson=data.get(Protocol.Field.FIELDS).toString();        } else {          newValuesJson=null;        }        if (mCallback != null) {          mCallback.onDataAdded(collectionName,documentID,newValuesJson);        }      } else       if (message.equals(Protocol.Message.CHANGED)) {        final String documentID;        if (data.has(Protocol.Field.ID)) {          documentID=data.get(Protocol.Field.ID).getAsString();        } else {          documentID=null;        }        final String collectionName;        if (data.has(Protocol.Field.COLLECTION)) {          collectionName=data.get(Protocol.Field.COLLECTION).getAsString();        } else {          collectionName=null;        }        final String updatedValuesJson;        if (data.has(Protocol.Field.FIELDS)) {          updatedValuesJson=data.get(Protocol.Field.FIELDS).toString();        } else {          updatedValuesJson=null;        }        final String removedValuesJson;        if (data.has(Protocol.Field.CLEARED)) {          removedValuesJson=data.get(Protocol.Field.CLEARED).toString();        } else {          removedValuesJson=null;        }        if (mCallback != null) {          mCallback.onDataChanged(collectionName,documentID,updatedValuesJson,removedValuesJson);        }      } else       if (message.equals(Protocol.Message.REMOVED)) {        final String documentID;        if (data.has(Protocol.Field.ID)) {          documentID=data.get(Protocol.Field.ID).getAsString();        } else {          documentID=null;        }        final String collectionName;        if (data.has(Protocol.Field.COLLECTION)) {          collectionName=data.get(Protocol.Field.COLLECTION).getAsString();        } else {          collectionName=null;        }        if (mCallback != null) {          mCallback.onDataRemoved(collectionName,documentID);        }      } else       if (message.equals(Protocol.Message.RESULT)) {        if (data.has(Protocol.Field.RESULT)) {          JsonElement resultData=data.get(Protocol.Field.RESULT);          if (resultData.isJsonObject()) {            JsonObject result=resultData.getAsJsonObject();            if (isLoginResult(result)) {              final String loginToken=result.get(Protocol.Field.TOKEN).getAsString();              saveLoginToken(loginToken);              mLoggedInUserId=result.get(Protocol.Field.ID).getAsString();            }          }        }        final String id;        if (data.has(Protocol.Field.ID)) {          id=data.get(Protocol.Field.ID).getAsString();        } else {          id=null;        }        final Listener listener=mListeners.get(id);        if (listener instanceof ResultListener) {          mListeners.remove(id);          final String result;          if (data.has(Protocol.Field.RESULT)) {            result=data.get(Protocol.Field.RESULT).toString();          } else {            result=null;          }          if (data.has(Protocol.Field.ERROR)) {            final Protocol.Error error=Protocol.Error.fromJson(data.get(Protocol.Field.ERROR).getAsJsonObject());            if (listener != null) {              ((ResultListener)listener).onError(new MeteorException(error));            }          } else {            if (listener != null) {              ((ResultListener)listener).onSuccess(result);            }          }        }      } else       if (message.equals(Protocol.Message.READY)) {        if (data.has(Protocol.Field.SUBS)) {          Iterator<JsonElement> elements=data.get(Protocol.Field.SUBS).getAsJsonArray().iterator();          String subscriptionId;          while (elements.hasNext()) {            subscriptionId=elements.next().getAsString();            final Listener listener=mListeners.get(subscriptionId);            if (listener instanceof ResultListener) {              mListeners.remove(subscriptionId);              if (listener != null) {                ((ResultListener)listener).onSuccess("");              }            }          }        }      } else       if (message.equals(Protocol.Message.NOSUB)) {        final String subscriptionId;        if (data.has(Protocol.Field.ID)) {          subscriptionId=data.get(Protocol.Field.ID).getAsString();        } else {          subscriptionId=null;        }        final Listener listener=mListeners.get(subscriptionId);        if (listener instanceof ResultListener) {          mListeners.remove(subscriptionId);          if (data.has(Protocol.Field.ERROR)) {            final Protocol.Error error=Protocol.Error.fromJson(data.get(Protocol.Field.ERROR).getAsJsonObject());            if (listener != null) {              ((ResultListener)listener).onError(new MeteorException(error));            }          } else {            if (listener != null) {              ((ResultListener)listener).onError(new MeteorException(new UnknownFormatConversionException(data.toString())));            }          }        } else         if (listener instanceof UnsubscribeListener) {          mListeners.remove(subscriptionId);          if (listener != null) {            ((UnsubscribeListener)listener).onSuccess();          }        }      }    }  }}  }
class C{  @POST @Path("/{id}/deactivate") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) public Response deactivateCatalogCategory(@PathParam("id") URI id) throws DatabaseException {  CatalogCategory catalogCategory=queryResource(id);  ArgValidator.checkEntity(catalogCategory,id,true);  catalogCategoryManager.deleteCatalogCategory(catalogCategory);  auditOpSuccess(OperationTypeEnum.DELETE_CATALOG_CATEGORY,catalogCategory.auditParameters());  return Response.ok().build();}  }
class C{  public static void showDialog(Context ctx,String message,String positiveBtnLabel,String negativeBtnLabel,DialogInterface.OnClickListener dialogClickListener){  if (dialogClickListener == null) {    throw new NullPointerException("Action listener cannot be null");  }  AlertDialog.Builder builder=new AlertDialog.Builder(ctx);  builder.setMessage(message).setPositiveButton(positiveBtnLabel,dialogClickListener).setNegativeButton(negativeBtnLabel,dialogClickListener).show();}  }
class C{  public boolean canCache(){  return url.getFile().indexOf('?') < 0;}  }
class C{  private void linkBlocks(BasicBlock srcBlock,BasicBlock dstBlock){  Instruction src=srcBlock.getExit();  Instruction dst=dstBlock.getEntry();  if (dst != null) {    linkInstructions(src,dst);  }}  }
class C{  public Format(String pFormatString){  String formatVars[]=pFormatString.split("/");  mId=Integer.parseInt(formatVars[0]);}  }
class C{  private void layoutComponents(){  setLayout(new GridBagLayout());  setBorder(new CompoundBorder(new TitledBorder(DISPLAY_NAME),new EmptyBorder(6,6,6,6)));  setToolTipText(DESCRIPTION);  GridBagConstraints c=new GridBagConstraints();  c.anchor=GridBagConstraints.WEST;  c.fill=GridBagConstraints.HORIZONTAL;  c.gridheight=1;  c.gridwidth=GridBagConstraints.RELATIVE;  c.insets=LABEL_INSETS;  c.gridx=0;  c.gridy=0;  c.weightx=0.33f;  c.weighty=0;  add(new JLabel("Rows"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  add(rows,c);  c.insets=LABEL_INSETS;  c.gridx=0;  c.gridy++;  c.weightx=0.33f;  add(new JLabel("Columns"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  add(columns,c);  c.insets=LABEL_INSETS;  c.gridx=0;  c.gridy++;  c.weightx=0.33f;  add(new JLabel("Receptive field height"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  add(receptiveFieldHeight,c);  c.insets=LABEL_INSETS;  c.gridx=0;  c.gridy++;  c.weightx=0.33f;  add(new JLabel("Receptive field width"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  add(receptiveFieldWidth,c);  c.insets=LABEL_INSETS;  c.gridx=0;  c.gridy++;  c.weightx=0.33f;  add(new JLabel("Effective size"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  add(effectiveSize,c);  c.anchor=GridBagConstraints.NORTHWEST;  c.fill=GridBagConstraints.BOTH;  c.gridwidth=GridBagConstraints.REMAINDER;  c.insets=EMPTY_INSETS;  c.gridx=0;  c.gridy++;  c.weightx=1.0f;  c.weighty=1.0f;  add(Box.createGlue(),c);}  }
class C{  public Incident(){  super();  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());}  }
class C{  protected final void drawArrowHead(Graphics2D g,int x,int y,int sgn){  g.setStroke(Strokes.getStroke(StrokeType.SOLID,1));  int size=diagram().arrowSize;switch (headType) {case CLOSED:    Polygon p=new Polygon(new int[]{x,x + sgn * size,x + sgn * size,x},new int[]{y,y - size,y + size,y},4);  g.fillPolygon(p);break;case OPEN:g.drawLine(x,y,x + sgn * size,y - size);g.drawLine(x,y,x + sgn * size,y + size);break;case ROUNDED:int left=sgn == -1 ? x - 2 * size : x;int top=y - size;g.fillArc(left,top,size * 2,size * 2,90,sgn * 180);}}  }
class C{  public static void deleteDirectory(String directory){  log.info("Removing " + directory + " directory");  File tempDir=new File(directory);  deleteDirectory(tempDir);  log.info("Finished removing directory");}  }
class C{  public GridCacheConcurrentMapImpl(GridCacheContext ctx,GridCacheMapEntryFactory factory,int initialCapacity){  this(ctx,factory,initialCapacity,DFLT_LOAD_FACTOR,DFLT_CONCUR_LEVEL);}  }
class C{  public StoredItemStack addStackToPlayer(StoredItemStack add,EntityPlayer player,boolean enderChest,ActionType action){  return add;}  }
class C{  public SubscriptionStillActiveException(){  super();}  }
class C{  public static Map<String,Object> updateBinaryFile(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=null;  try {    result=updateBinaryFileMethod(dctx,context);  } catch (  GenericServiceException e) {    return ServiceUtil.returnError(e.getMessage());  }  return result;}  }
class C{  protected int hash(Object o){  int h=o == null ? 0 : o.hashCode();  h+=(h << 15) ^ 0xffffcd7d;  h^=(h >>> 10);  h+=(h << 3);  h^=(h >>> 6);  h+=(h << 2) + (h << 14);  return h ^ (h >>> 16);}  }
class C{  public void add(V k){  add(k,k);}  }
class C{  @Deprecated public static void handleAverages(IOContainer evalOutput,List<AverageVector> averageVectors) throws OperatorException {  handleAverages(evalOutput,averageVectors,true);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public final boolean isAcknowledged(){  return acknowledged;}  }
class C{  @NotNull @ObjectiveCName("requestIntegrationTokenCommandWithGid:") public Command<String> requestIntegrationToken(int gid){  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.764 -0400",hash_original_method="9637A33C3A7BEA20E1ACB7D7F032CE22",hash_generated_method="127DA13A1025AB82345E9940FF0E625C") public PrefixFileFilter(String prefix,IOCase caseSensitivity){  if (prefix == null) {    throw new IllegalArgumentException("The prefix must not be null");  }  this.prefixes=new String[]{prefix};  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public boolean forEach(TIntProcedure procedure){  byte[] states=_states;  int[] set=_set;  for (int i=set.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(set[i])) {      return false;    }  }  return true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public String render(String combinedName) throws GeneralException, IOException, SAXException, ParserConfigurationException {  String resourceName=ScreenFactory.getResourceNameFromCombined(combinedName);  String screenName=ScreenFactory.getScreenNameFromCombined(combinedName);  this.render(resourceName,screenName);  return "";}  }
class C{  @Override public void onItemClick(AdapterView<?> group,View view,int position,long id){  MessageListAdapter adapter=(MessageListAdapter)group.getAdapter();  Intent intent=new Intent(group.getContext(),MessageActivity.class);  intent.putExtra(Extra.MESSAGE,adapter.getItem(position).getText().toString());  group.getContext().startActivity(intent);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  final public void addKiller(int ply,Move m){  if (ply >= ktList.length)   return;  int move=(short)(m.from + (m.to << 6) + (m.promoteTo << 12));  KTEntry ent=ktList[ply];  if (move != ent.move0) {    ent.move1=ent.move0;    ent.move0=move;  }}  }
class C{  public OrderEventImpl(final String eventId,final CustomerOrder customerOrder,final CustomerOrderDelivery customerOrderDelivery){  this(null,eventId,customerOrder,customerOrderDelivery,null);}  }
class C{  public BasicTreeLayout(Tree tree,int x,int y){  this(tree,new Offset((double)x,(double)y,AVKey.PIXELS,AVKey.INSET_PIXELS));}  }
class C{  @Inline static void compilePutfieldBarrierExtentImm(Assembler asm,Offset fieldOffset,int locationMetadata,BaselineCompilerImpl compiler){  putfieldStoreBarrierHelper(asm,compiler,fieldOffset,locationMetadata,Entrypoints.extentFieldWriteBarrierMethod);}  }
class C{  public ColorRange addHueRange(float min,float max){  if (max >= min) {    addHueRange(new FloatRange(min,max));  } else {    addHueRange(new FloatRange(min,1));    addHueRange(new FloatRange(0,max));  }  return this;}  }
class C{  public DialSurfaceView(Context context){  this(context,null);}  }
class C{  private Object canonicalize(Object input) throws JSONException {  if (input instanceof JSONArray) {    JSONArray array=(JSONArray)input;    List<Object> result=new ArrayList<Object>();    for (int i=0; i < array.length(); i++) {      result.add(canonicalize(array.opt(i)));    }    return result;  } else   if (input instanceof JSONObject) {    JSONObject object=(JSONObject)input;    Map<String,Object> result=new HashMap<String,Object>();    for (Iterator<?> i=object.keys(); i.hasNext(); ) {      String key=(String)i.next();      result.put(key,canonicalize(object.get(key)));    }    return result;  } else   if (input == null || input.equals(JSONObject.NULL)) {    return JSONObject.NULL;  } else {    return input;  }}  }
class C{  public static RunProcessResponseDocument runProcess(CompiereService m_cs,RunProcessDocument req){  RunProcessResponseDocument res=RunProcessResponseDocument.Factory.newInstance();  RunProcessResponse r=res.addNewRunProcessResponse();  RunProcess rp=req.getRunProcess();  int AD_Process_ID=rp.getADProcessID();  int m_record_id=rp.getADRecordID();  MProcess process=MProcess.get(m_cs.getM_ctx(),AD_Process_ID);  if (process == null) {    r.setError("Process not found");    r.setIsError(true);    return res;  }  String docAction=rp.getDocAction();  if (docAction != null && docAction.length() > 0) {    if (process.getAD_Workflow_ID() > 0) {      MWorkflow wf=MWorkflow.get(m_cs.getM_ctx(),process.getAD_Workflow_ID());      if (wf.getWorkflowType().equals(MWorkflow.WORKFLOWTYPE_DocumentProcess)) {        MTable table=MTable.get(m_cs.getM_ctx(),wf.getAD_Table_ID());        if (table != null) {          PO po=table.getPO(m_record_id,null);          if (po != null) {            po.set_ValueOfColumn("DocAction",docAction);            po.save();          }        }      }    }  }  MPInstance pInstance=null;  try {    pInstance=fillParameter(m_cs,rp.getParamValues(),process);  } catch (  Exception ex) {    r.setError(ex.getMessage());    r.setIsError(true);    return res;  }  if (m_record_id > 0) {    pInstance.setRecord_ID(m_record_id);    pInstance.save();  }  ProcessInfo pi=new ProcessInfo(process.getName(),process.getAD_Process_ID());  pi.setAD_User_ID(Env.getAD_User_ID(m_cs.getM_ctx()));  pi.setAD_Client_ID(Env.getAD_Client_ID(m_cs.getM_ctx()));  pi.setAD_PInstance_ID(pInstance.getAD_PInstance_ID());  if (m_record_id > 0)   pi.setRecord_ID(m_record_id);  boolean processOK=false;  boolean jasperreport=(process != null && process.getClassname() != null && process.getClassname().indexOf("net.sf.compilo.report.ReportStarter") >= 0);  if (jasperreport) {    processOK=true;  }  if (process.isWorkflow()) {    try {      int AD_Workflow_ID=process.getAD_Workflow_ID();      MWorkflow wf=MWorkflow.get(Env.getCtx(),AD_Workflow_ID);      MWFProcess wfProcess=wf.startWait(pi);      if (wfProcess != null) {        r.setSummary(pi.getSummary());        r.setLogInfo(pi.getLogInfo(true));        r.setIsError(false);        return res;      }    } catch (    Exception ex) {      r.setError(ex.getMessage());      r.setLogInfo(pi.getLogInfo(true));      r.setIsError(true);      return res;    }  }  if (process.isJavaProcess() && !jasperreport) {    Trx trx=Trx.get(Trx.createTrxName("WebPrc"),true);    try {      processOK=process.processIt(pi,trx);      trx.commit();      trx.close();    } catch (    Throwable t) {      trx.rollback();      trx.close();    }    if (!processOK || pi.isError()) {      r.setSummary(pi.getSummary());      r.setLogInfo(pi.getLogInfo(true));      r.setIsError(true);      processOK=false;    } else {      r.setSummary(pi.getSummary());      r.setLogInfo(pi.getLogInfo(true));      r.setIsError(false);    }  }  if ((process.isReport() || jasperreport)) {    r.setIsReport(true);{      ReportEngine re=null;      if (!jasperreport)       re=start(pi);      if (re == null && !jasperreport) {      } else {        try {          boolean ok=false;          File file;          String file_type="pdf";          if (!jasperreport) {            MPrintFormat pf=re.getPrintFormat();            if (pf.isTableBased()) {              CharArrayWriter wr=new CharArrayWriter();              ok=ReportEngineEx.createEXCEL_HTML_wr(re,m_cs.getM_ctx(),wr,false,re.getPrintFormat().getLanguage());              file_type="xls";              String data=wr.toString();              if (data != null)               r.setData(data.getBytes());              r.setReportFormat(file_type);            } else {              byte dat[]=re.createPDFData();              file_type="pdf";              r.setData(dat);              r.setReportFormat(file_type);            }            ok=true;          } else {            JasperPrint jp=getJasperReportPrint(m_cs.getM_ctx(),pi);            ByteArrayOutputStream wr=new ByteArrayOutputStream();            net.sf.jasperreports.engine.JasperExportManager.exportReportToPdfStream(jp,wr);            file_type="pdf";            r.setData(wr.toByteArray());            r.setReportFormat(file_type);            ok=true;          }          if (ok) {            m_cs.getM_ctx().put("AD_PInstance_ID=" + pInstance.getAD_PInstance_ID(),"ok");          } else {            r.setError("Cannot create report");            r.setLogInfo(pi.getLogInfo(true));            r.setIsError(true);            return res;          }        } catch (        Exception e) {          r.setError("Cannot create report:" + e.getMessage());          r.setLogInfo(pi.getLogInfo(true));          r.setIsError(true);          return res;        }      }    }  }  return res;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (type_1: ");  result.append(type_1);  result.append(')');  return result.toString();}  }
class C{  public void childrenRemoved(BeanContextMembershipEvent bcme){  Iterator<?> it=bcme.iterator();  while (it.hasNext()) {    findAndUndo(it.next());  }}  }
class C{  @Override public synchronized void close() throws IOException {  try {    if (syncTask != null) {      syncTask.cancel();    }    sync();    unmapFile();  }  finally {    super.close();  }}  }
class C{  void mouseDraggedInTrack(final MouseEvent e){  moveToMouse(e);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.694 -0400",hash_original_method="18E79F17CEA62402EC9F3F15F922D012",hash_generated_method="2110618DC289DF015C8D619F05079A61") public SuffixFileFilter(String suffix,IOCase caseSensitivity){  if (suffix == null) {    throw new IllegalArgumentException("The suffix must not be null");  }  this.suffixes=new String[]{suffix};  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public boolean hasAttributes(){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return false;}  }
class C{  public EventRaiser(Entity entity){  this.entity=entity;}  }
class C{  public static String normalizeRegionName(final String regionName){  if (regionName == null || regionName.length() == 0) {    return EMPTY_VALUE;  }  char[] resultName=new char[regionName.length() + 1];  boolean changed=false;  boolean isPrevCharSlash=false;  int startIndex;  if (regionName.charAt(0) != '/') {    changed=true;    startIndex=0;  } else {    isPrevCharSlash=true;    startIndex=1;  }  resultName[0]='/';  int resultLength=1;  for (int index=startIndex; index < regionName.length(); ++index) {    char currChar=regionName.charAt(index);    if (currChar == '/') {      if (isPrevCharSlash) {        changed=true;        continue;      }      isPrevCharSlash=true;    } else {      isPrevCharSlash=false;    }    resultName[resultLength++]=currChar;  }  if (resultName[resultLength - 1] == '/') {    --resultLength;    changed=true;  }  if (changed) {    return new String(resultName,0,resultLength);  } else {    return regionName;  }}  }
class C{  public void testEmpty() throws Exception {  ByteTranslationStateMachine bsm=new ByteTranslationStateMachine();  bsm.init();  for (int i=0; i < 256; i++) {    ByteState state=bsm.add((byte)i);    assertEquals("null state machine always accepts",ByteState.ACCEPTED,state);  }}  }
class C{  public static boolean isAbstract(int flags){  return (flags & ABSTRACT) != 0;}  }
class C{  public RootNode clone(){  RootNode cloneN=new RootNode(null,null,this.level,leftHash,rightHash);  if (this.left != null)   cloneN.left=this.left.clone(cloneN);  if (this.right != null)   cloneN.right=this.right.clone(cloneN);  return cloneN;}  }
class C{  static double f(double x){  return x * Math.sin(x) - 5 * x - Math.cos(x);}  }
class C{  public String sql_select(String vendorName,String catalogName,String schemaName,String tableName,String condition){  ArrayList<String> columnNames=null;  ArrayList<String> aliasNames=null;  ArrayList<String> conditions=null;  ArrayList<String> sortColumns=null;  if (condition != null && condition.length() > 0) {    conditions=new ArrayList<String>();    conditions.add(condition);  }  return sql_select(vendorName,catalogName,schemaName,tableName,null,columnNames,aliasNames,conditions,sortColumns,false);}  }
class C{  public File nextFile(){  final StringBuffer sb=new StringBuffer();  final FieldPosition position=new FieldPosition(NumberFormat.INTEGER_FIELD);  sb.append(m_baseFile);  final StringBuffer result=m_decimalFormat.format(m_rotation,sb,position);  m_rotation+=1;  if (m_rotation >= m_maxRotations) {    m_rotation=0;  }  return new File(result.toString());}  }
class C{  private void terminate(){  System.exit(1);}  }
class C{  public static TimeInForce newInstance(){  final TimeInForce returnInstance=new TimeInForce();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  protected void scanSomeTag(boolean allowCDATA,String defaultNamespace,Properties namespaces) throws Exception {  String str=XMLUtil.read(this.reader,'&');  char ch=str.charAt(0);  if (ch == '&') {    XMLUtil.errorUnexpectedEntity(reader.getSystemID(),reader.getLineNr(),str);  }switch (ch) {case '?':    this.processPI();  break;case '!':this.processSpecialTag(allowCDATA);break;default :this.reader.unread(ch);this.processElement(defaultNamespace,namespaces);}}  }
class C{  private static void verifyIdToken(String idTokenString){  logTokenAudience(idTokenString);  try {    GoogleIdToken idToken=verifier.verify(idTokenString);    if (idToken == null) {      Log.w(TAG,"ID Token Verification Failed, check the README for instructions.");      return;    }    GoogleIdToken.Payload payload=idToken.getPayload();    Log.d(TAG,"IdToken:" + payload.toPrettyString());    Log.d(TAG,"IdToken:Email:" + payload.getEmail());    Log.d(TAG,"IdToken:EmailVerified:" + payload.getEmailVerified());  } catch (  GeneralSecurityException e) {    Log.e(TAG,"verifyIdToken:GeneralSecurityException",e);  }catch (  IOException e) {    Log.e(TAG,"verifyIdToken:IOException",e);  }}  }
class C{  protected void resetAttribute(SVGItem item){}  }
class C{  public static String numberToString(Number number) throws JSONException {  if (number == null) {    throw new JSONException("Number must be non-null");  }  double doubleValue=number.doubleValue();  JSON.checkDouble(doubleValue);  if (number.equals(NEGATIVE_ZERO)) {    return "-0";  }  long longValue=number.longValue();  if (doubleValue == (double)longValue) {    return Long.toString(longValue);  }  return number.toString();}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  public void addDependency(String swcLocation1,String swcLocation2){  if (swcLocation1 == null || swcLocation2 == null)   throw new NullPointerException();  String head=swcLocation1;  String tail=swcLocation2;  if (!head.equals(tail) && dependencies.containsKey(head) && dependencies.containsKey(tail)&& !dependencies.dependencyExists(head,tail)) {    dependencies.addDependency(head,tail);  }}  }
class C{  private void rotateLeft(Node<K,V> root){  Node<K,V> left=root.left;  Node<K,V> pivot=root.right;  Node<K,V> pivotLeft=pivot.left;  Node<K,V> pivotRight=pivot.right;  root.right=pivotLeft;  if (pivotLeft != null) {    pivotLeft.parent=root;  }  replaceInParent(root,pivot);  pivot.left=root;  root.parent=pivot;  root.height=Math.max(left != null ? left.height : 0,pivotLeft != null ? pivotLeft.height : 0) + 1;  pivot.height=Math.max(root.height,pivotRight != null ? pivotRight.height : 0) + 1;}  }
class C{  public static boolean isLinkedFile(IProject project,String name) throws CoreException {  final IFile file=project.getFile(new Path(new Path(name).lastSegment()));  return file.isLinked(IResource.CHECK_ANCESTORS);}  }
class C{  public static Typeface droidRobot(Context context){  sDroidRobot=getFontFromRes(R.raw.droid_robot_jp2,context);  return sDroidRobot;}  }
class C{  public KeyHandler(RootHandler rootHandler,ItemHandler itemHandler){  this.rootHandler=rootHandler;  this.itemHandler=itemHandler;  this.currentText=new StringBuffer();}  }
class C{  public void insert(String namespace,String set,Key key,List<Bin> bins,int ttl){  this.client.put(this.insertPolicy,key,bins.toArray(new Bin[0]));}  }
class C{  public T add(T e){  T oldE=null;  while (!buffer.offerLast(e)) {    oldE=buffer.poll();  }  return oldE;}  }
class C{  public Node appendChild(Node newChild) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public ByteArrayOutputStream(){  buf=new byte[32];}  }
class C{  public QuicklookProduct(fr.gael.dhus.database.object.Product product){  super(product);}  }
class C{  protected void initializeTraversalContext(ColladaTraversalContext tc){  tc.initialize();}  }
class C{  public boolean put(@Nullable K k,@Nullable V v,long timeBucket){  if (isKeyContainsMultiValue) {    Slice keySlice=streamCodec.toByteArray(k);    int bucketId=getBucketId(k);    Slice valueSlice=store.getSync(bucketId,keySlice);    List<V> listOb;    if (valueSlice == null || valueSlice.length == 0) {      listOb=new ArrayList<>();    } else {      listOb=(List<V>)streamCodec.fromByteArray(valueSlice);    }    listOb.add(v);    return insertInStore(bucketId,timeBucket,keySlice,streamCodec.toByteArray(listOb));  }  return insertInStore(getBucketId(k),timeBucket,streamCodec.toByteArray(k),streamCodec.toByteArray(v));}  }
class C{  public static double eccentricAnomaly(double M){  double delta;  double E=M;  while (true) {    delta=E - (ECCENTRICITY * Math.sin(E)) - M;    if (Math.abs(delta) <= 1E-10)     break;    E-=(delta / (1.0 - (ECCENTRICITY * Math.cos(E))));  }  return E;}  }
class C{  public VeriniceQuery(String query,int limit){  this.query=query == null ? EMPTY_QUERY : escapeQuery(query);  if (limit == 0) {    this.limit=MAX_LIMIT;  } else {    this.limit=(limit >= 0) ? limit : DEFAULT_LIMIT;  }}  }
class C{  private void renameLoggingConfiguration(int index){  if (index < 0 || index >= lstLoggingConfigurations.getModel().getSize())   return;  String logConfig=(String)lstLoggingConfigurations.getModel().getElementAt(index);  String newLogConfig=JOptionPane.showInputDialog(Localization.Main.getText("gui.logging.rename.msg",logConfig),logConfig);  if ("default".equalsIgnoreCase(newLogConfig))   return;  if (Helper.isNotNullOrEmpty(newLogConfig) && !newLogConfig.equals(logConfig)) {    File configFile=new File(ConfigurationManager.getConfigurationDirectory(),Constants.LOGFILE_FOLDER + File.separator + ConfigurationManager.LOGGING_PREFIX+ logConfig+ ConfigurationManager.LOGGING_PREFIX);    if (configFile.exists()) {      configFile.renameTo(new File(ConfigurationManager.getConfigurationDirectory(),Constants.LOGFILE_FOLDER + File.separator + ConfigurationManager.LOGGING_PREFIX+ newLogConfig+ ConfigurationManager.LOGGING_PREFIX));      loadLoggingConfigurations();    }  }}  }
class C{  public void removeItemByValue(String value){  Iterator<Map.Entry<String,String>> iterator=mItemMap.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,String> entry=iterator.next();    if (entry.getValue().equals(value)) {      iterator.remove();      mAdapter.remove(entry.getKey());      mAdapter.notifyDataSetChanged();    }  }}  }
class C{  @Override public boolean disconnect(){  boolean disconnectedTrue=false;synchronized (this) {    if (disconnected) {      return false;    }    disconnected=true;    disconnectedTrue=true;  }  try {    listening=false;    joinProcessor.shutDown();    boolean removeListener=this.alertLevel != Alert.OFF;    if (this.isConnected() || (this.membersMap.size() > 0)) {      RemoteApplicationVM[] apps=(RemoteApplicationVM[])listApplications(disconnectedTrue);      for (int i=0; i < apps.length; i++) {        try {          apps[i].disconnect(removeListener);        } catch (        RuntimeException ignore) {        }      }      try {        DM dm=system.getDistributionManager();synchronized (this.myMembershipListenerLock) {          if (this.myMembershipListener != null) {            dm.removeMembershipListener(this.myMembershipListener);          }        }        if (dm instanceof DistributionManager) {          ((DistributionManager)dm).setAgent(null);        }      } catch (      IllegalArgumentException ignore) {      }catch (      DistributedSystemDisconnectedException de) {      }      if (system != null && DistributionManager.isDedicatedAdminVM && system.isConnected()) {        system.disconnect();      }      this.system=null;      this.connected=false;    }    daemon.shutDown();    if (snapshotDispatcher != null) {      snapshotDispatcher.shutDown();    }  }  finally {    removeAgent(this);  }  return true;}  }
class C{  public Matrix4f m00(float m00){  this.m00=m00;  properties&=~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);  return this;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MProjectPhase[");  sb.append(get_ID()).append("-").append(getSeqNo()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  public CharSequence loadDescription(PackageManager pm){  if (nonLocalizedDescription != null) {    return nonLocalizedDescription;  }  if (descriptionRes != 0) {    CharSequence label=pm.getText(packageName,descriptionRes,null);    if (label != null) {      return label;    }  }  return null;}  }
class C{  public static int nextGeometric(double p,RandomEngine randomGenerator){  double u=randomGenerator.raw();  return (int)(Math.log(u) / Math.log(1.0 - p));}  }
class C{  public final void walkGraph(Hashtable semNodesTable){  Integer uid=new Integer(myUID);  if (semNodesTable.get(uid) != null)   return;  semNodesTable.put(new Integer(myUID),this);}  }
class C{  public static void clearRequestId(){  MDC.remove(REQUEST_KEY);  MDC.remove(REQUEST_ID_KEY);}  }
class C{  @Override public Enumeration<String> enumerateRequests(){  Vector<String> newVector=new Vector<String>(0);  if (m_evaluateThread != null) {    newVector.addElement("Stop");  }  return newVector.elements();}  }
class C{  public void service(Mail mail) throws MessagingException {  if (mail.getAttribute(MAIL_ATTRIBUTE_NAME) != null) {    return;  }  MimeMessage mimeMessage=mail.getMessage();  if (mimeMessage == null) {    log("Null MimeMessage. Will send to ghost");    logMailInfo(mail);    mail.setState(Mail.GHOST);    return;  }  Socket socket=getClamdSocket();  BufferedReader reader=null;  PrintWriter writer=null;  Socket streamSocket=null;  BufferedOutputStream bos=null;  try {    reader=new BufferedReader(new InputStreamReader(socket.getInputStream(),"ASCII"));    writer=new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket.getOutputStream())),true);    writer.println("STREAM");    writer.flush();    int streamPort=getStreamPortFromAnswer(reader.readLine());    streamSocket=new Socket(socket.getInetAddress(),streamPort);    bos=new BufferedOutputStream(streamSocket.getOutputStream(),getStreamBufferSize());    mimeMessage.writeTo(bos);    bos.flush();    bos.close();    streamSocket.close();    String answer;    boolean virusFound=false;    String logMessage="";    for (; ; ) {      answer=reader.readLine();      if (answer != null) {        answer=answer.trim();        if (answer.substring(answer.length() - FOUND_STRING.length()).equals(FOUND_STRING)) {          virusFound=true;          logMessage=answer + " (by CLAMD on " + socket.getInetAddress()+ ")";          log(logMessage);        }      } else {        break;      }    }    reader.close();    writer.close();    if (virusFound) {      String errorMessage=mail.getErrorMessage();      if (errorMessage == null) {        errorMessage="";      } else {        errorMessage+="\r\n";      }      StringBuilder sb=new StringBuilder(errorMessage);      sb.append(logMessage).append("\r\n");      logMailInfo(mail);      logMessageInfo(mimeMessage);      mail.setAttribute(MAIL_ATTRIBUTE_NAME,"true");      mail.setErrorMessage(sb.toString());      mimeMessage.setHeader(HEADER_NAME,"true");    } else {      if (isDebug()) {        log("OK (by CLAMD on " + socket.getInetAddress() + ")");      }      mail.setAttribute(MAIL_ATTRIBUTE_NAME,"false");      mimeMessage.setHeader(HEADER_NAME,"false");    }    try {      saveChanges(mimeMessage);    } catch (    Exception ex) {      log("Exception caught while saving changes (header) to the MimeMessage. Ignoring ...",ex);    }  } catch (  Exception ex) {    log("Exception caught calling CLAMD on " + socket.getInetAddress() + ": "+ ex.getMessage(),ex);    throw new MessagingException("Exception caught",ex);  } finally {    shutdownReader(reader);    shutdownWriter(writer);    shutdownStream(bos);    shutdownSocket(streamSocket);    shutdownSocket(socket);  }}  }
class C{  public static void main(String[] args) throws IgniteException {  Ignition.start("examples/config/example-ignite.xml");}  }
class C{  private Uri id2Uri(final long id){  return Uri.parse(WEAR_URI_PREFIX + Constants.UART.CONFIGURATIONS + "/"+ id);}  }
class C{  void recoverEnd(){  sessionStates=New.hashMap();}  }
class C{  public void addCard(Card card){  final String tag=card.getTag();  if (!mVisibleCards.containsKey(tag) && !mHiddenCards.containsKey(tag)) {    final View view=card.getView();    view.setTag(tag);    mHiddenCards.put(tag,card);  }}  }
class C{  void close(long timeout,TimeUnit timeUnit){  disable();  try {    if (!reentrantLock.tryLock(timeout,timeUnit)) {      log.warn("Could not gracefully close the subscription connection " + subscriptionId + " within "+ timeout+ " "+ timeUnit+ ", forcing close of connection");    }  } catch (  InterruptedException e) {    throw new IllegalStateException(e);  } finally {    if (reentrantLock.isLocked() && reentrantLock.isHeldByCurrentThread()) {      reentrantLock.unlock();    }  }  closeConnection();  unsubscribe();}  }
class C{  private TripPattern reroutePattern(TripPattern originalTripPattern){  TripPattern pattern=originalTripPattern.clone();  pattern.stops=new int[newPatternLength];  pattern.pickups=new PickDropType[newPatternLength];  pattern.dropoffs=new PickDropType[newPatternLength];  pattern.wheelchairAccessible=new BitSet(newPatternLength);  for (int ss=0, ts=0; ts < newPatternLength; ss++, ts++) {    if (ss == insertBeginIndex) {      for (int ns=0; ns < intNewStops.size(); ns++) {        pattern.stops[ts]=intNewStops.get(ns);        pattern.pickups[ts]=PickDropType.SCHEDULED;        pattern.dropoffs[ts]=PickDropType.SCHEDULED;        pattern.wheelchairAccessible.set(ts,true);        ts++;      }      ss=insertEndIndex;      if (ts == newPatternLength)       break;    }    pattern.stops[ts]=originalTripPattern.stops[ss];    pattern.pickups[ts]=originalTripPattern.pickups[ss];    pattern.dropoffs[ts]=originalTripPattern.dropoffs[ss];    pattern.wheelchairAccessible.set(ts,originalTripPattern.wheelchairAccessible.get(ss));  }  LOG.debug("Old stop sequence: {}",originalTripPattern.stops);  LOG.debug("New stop sequence: {}",pattern.stops);  LOG.info("Old stop IDs: {}",Arrays.stream(originalTripPattern.stops).mapToObj(null).collect(Collectors.toList()));  LOG.info("New stop IDs: {}",Arrays.stream(pattern.stops).mapToObj(null).collect(Collectors.toList()));  return pattern;}  }
class C{  private void doCommonReturnToHive(){  AbstractMovingAgent entrance=hive.getEntrance();  doStepReturning(entrance.getLocation());  if (entrance.isInSphere(this)) {    setState(State.unloadQueue);  }}  }
class C{  @Override public void initialize(UimaContext context) throws ResourceInitializationException {  super.initialize(context);  logger=getContext().getLogger();  try {    tagger=getMeCabJNI();  } catch (  IOException e) {    throw new ResourceInitializationException(e);  }  if (tagger == null) {    throw new ResourceInitializationException();  }}  }
class C{  public void destroy(){  Log.d(DEBUGTAG,"Closing tile database");  mDatabase.close();}  }
class C{  public static String ipBytesToStr(byte[] ip){  try {    return InetAddress.getByAddress(null,ip).getHostAddress();  } catch (  UnknownHostException e) {    throw new IllegalArgumentException("Unexpected IP address: " + Arrays.toString(ip));  }}  }
class C{  public static String dropWhile(GString self,@ClosureParams(value=FromString.class,conflictResolutionStrategy=PickFirstResolver.class,options={"String","Character"}) Closure condition){  return dropWhile(self.toString(),condition);}  }
class C{  public static String transformAllLineSeparators(String text){  Pattern crlf=Pattern.compile("(\r\n|\r|\n|\n\r)");  Matcher m=crlf.matcher(text);  if (m.find()) {    text=m.replaceAll("\n");  }  return text;}  }
class C{  public FoldAnimation(View view){  this.view=view;  numOfFolds=1;  orientation=FoldLayout.Orientation.HORIZONTAL;  anchorFactor=0f;  interpolator=new AccelerateDecelerateInterpolator();  duration=DURATION_LONG;  listener=null;}  }
class C{  public boolean isSorted(){  return tfileMeta.isSorted();}  }
class C{  private void internalSetModifiers(int modifiers,int consideredFlags,TextEditGroup editGroup){  int newModifiers=modifiers & consideredFlags;  ITrackedNodePosition trackedFallback=null;  List<ITrackedNodePosition> trackedNodes=new ArrayList<ITrackedNodePosition>();  List<ASTNode> originalList=fModifierRewrite.getOriginalList();  for (int i=0; i < originalList.size(); i++) {    ASTNode curr=(ASTNode)originalList.get(i);    if (curr instanceof Modifier) {      int flag=((Modifier)curr).getKeyword().toFlagValue();      if ((consideredFlags & flag) != 0) {        if ((newModifiers & flag) == 0) {          fModifierRewrite.remove(curr,editGroup);          if (trackedFallback == null)           trackedFallback=fModifierRewrite.getASTRewrite().track(curr);        }        newModifiers&=~flag;      }    }  }  IExtendedModifier lastAnnotation=null;  List<ASTNode> extendedList=fModifierRewrite.getRewrittenList();  for (int i=0; i < extendedList.size(); i++) {    IExtendedModifier curr=(IExtendedModifier)extendedList.get(i);    if (curr.isAnnotation())     lastAnnotation=curr;  }  List<Modifier> newNodes=ASTNodeFactory.newModifiers(fAst,newModifiers);  for (int i=0; i < newNodes.size(); i++) {    Modifier curr=newNodes.get(i);    if ((curr.getKeyword().toFlagValue() & VISIBILITY_MODIFIERS) != 0) {      if (lastAnnotation != null)       fModifierRewrite.insertAfter(curr,(ASTNode)lastAnnotation,editGroup); else       fModifierRewrite.insertFirst(curr,editGroup);    } else {      fModifierRewrite.insertLast(curr,editGroup);    }    trackedNodes.add(fModifierRewrite.getASTRewrite().track(curr));  }}  }
class C{  public void testNegativeRangeQuery(){  assertQ("Collated RangeQ: ",req("fl","id","q","sort_ar:[\u062F TO \u0698]","sort","id asc"),"//*[@numFound='0']");}  }
class C{  public final String toString(){  return this.image;}  }
class C{  public RandomSplit(RandomFactory rnd){  super();  this.random=rnd.getSingleThreadedRandom();}  }
class C{  public List<RelatedResourceRep> listByStorageSystem(URI storageSystemId){  UnManagedVolumeList response=client.get(UnManagedVolumeList.class,PathConstants.UNMANAGED_VOLUME_BY_STORAGE_SYSTEM_URL,storageSystemId);  return ResourceUtils.defaultList(response.getUnManagedVolumes());}  }
class C{  public static String buildGroupChatSDP(String ipAddress,int localPort,String protocol,String acceptTypes,String wrapperTypes,String setup,String path,String direction){  return buildSDP(ipAddress,localPort,protocol,acceptTypes,wrapperTypes,null,null,null,setup,path,direction,null,0);}  }
class C{  private File writePrivateKeyFile(String url,File keyDirectory) throws GitException {  final File keyFile=new File(keyDirectory,"identity");  try (FileOutputStream fos=new FileOutputStream(keyFile)){    byte[] sshKey=sshKeyProvider.getPrivateKey(url);    fos.write(sshKey);  } catch (  IOException|ServerException exception) {    String errorMessage="Can't store ssh key. ".concat(exception.getMessage());    LOG.error(errorMessage,exception);    throw new GitException(errorMessage,exception);  }  Set<PosixFilePermission> permissions=EnumSet.of(OWNER_READ,OWNER_WRITE);  try {    java.nio.file.Files.setPosixFilePermissions(keyFile.toPath(),permissions);  } catch (  IOException exception) {    throw new GitException(exception.getMessage(),exception);  }  return keyFile;}  }
class C{  public Value eval(Env env,Value... values){  return unMarshall(invoke(env,values));}  }
class C{  public static void sort(Comparable[] array){  Comparable temp;  int j, n=array.length;  for (j=n / 2; j > 0; j--) {    adjust(array,j,n);  }  for (j=n - 1; j > 0; j--) {    temp=array[0];    array[0]=array[j];    array[j]=temp;    adjust(array,1,j);  }}  }
class C{  public static boolean isString(String str){  return null != stringHashTable.get(str);}  }
class C{  public static void main(String[] argv){  new TestRunner().init(argv);}  }
class C{  final boolean destroyActivityLocked(ActivityRecord r,boolean removeFromApp,boolean oomAdj,String reason){  if (DEBUG_SWITCH || DEBUG_CLEANUP)   Slog.v(TAG,"Removing activity from " + reason + ": token="+ r+ ", app="+ (r.app != null ? r.app.processName : "(null)"));  EventLog.writeEvent(EventLogTags.AM_DESTROY_ACTIVITY,r.userId,System.identityHashCode(r),r.task.taskId,r.shortComponentName,reason);  boolean removedFromHistory=false;  cleanUpActivityLocked(r,false,false);  final boolean hadApp=r.app != null;  if (hadApp) {    if (removeFromApp) {      int idx=r.app.activities.indexOf(r);      if (idx >= 0) {        r.app.activities.remove(idx);      }      if (mService.mHeavyWeightProcess == r.app && r.app.activities.size() <= 0) {        mService.mHeavyWeightProcess=null;        mService.mHandler.sendEmptyMessage(ActivityManagerService.CANCEL_HEAVY_NOTIFICATION_MSG);      }      if (r.app.activities.size() == 0) {        mService.updateOomAdjLocked();      }    }    boolean skipDestroy=false;    try {      if (DEBUG_SWITCH)       Slog.i(TAG,"Destroying: " + r);      r.app.thread.scheduleDestroyActivity(r.appToken,r.finishing,r.configChangeFlags);    } catch (    Exception e) {      if (r.finishing) {        removeActivityFromHistoryLocked(r);        removedFromHistory=true;        skipDestroy=true;      }    }    r.nowVisible=false;    if (r.finishing && !skipDestroy) {      if (DEBUG_STATES)       Slog.v(TAG,"Moving to DESTROYING: " + r + " (destroy requested)");      r.state=ActivityState.DESTROYING;      Message msg=mHandler.obtainMessage(DESTROY_TIMEOUT_MSG);      msg.obj=r;      mHandler.sendMessageDelayed(msg,DESTROY_TIMEOUT);    } else {      if (DEBUG_STATES)       Slog.v(TAG,"Moving to DESTROYED: " + r + " (destroy skipped)");      r.state=ActivityState.DESTROYED;      if (DEBUG_APP)       Slog.v(TAG,"Clearing app during destroy for activity " + r);      r.app=null;    }  } else {    if (r.finishing) {      removeActivityFromHistoryLocked(r);      removedFromHistory=true;    } else {      if (DEBUG_STATES)       Slog.v(TAG,"Moving to DESTROYED: " + r + " (no app)");      r.state=ActivityState.DESTROYED;      if (DEBUG_APP)       Slog.v(TAG,"Clearing app during destroy for activity " + r);      r.app=null;    }  }  r.configChangeFlags=0;  if (!mLRUActivities.remove(r) && hadApp) {    Slog.w(TAG,"Activity " + r + " being finished, but not in LRU list");  }  return removedFromHistory;}  }
class C{  public ServiceAlreadyStartedException(String servicePath,ProcessingStage stage){  super("Service already started: " + servicePath + " stage: "+ stage);}  }
class C{  public static void pojos(PojoDescriptor pojo,String outFolder,String pkg,boolean constructor,boolean includeKeys,ConfirmCallable askOverwrite) throws IOException {  File pkgFolder=new File(outFolder,pkg.replace('.',File.separatorChar));  generateCode(pojo,true,pkg,pkgFolder,constructor,false,askOverwrite);  generateCode(pojo,false,pkg,pkgFolder,constructor,includeKeys,askOverwrite);}  }
class C{  private StorageHADomain checkStorageAdapterExistsInDB(CIMInstance adapterInstance,StorageSystem device) throws IOException {  StorageHADomain adapter=null;  String adapterNativeGuid=NativeGUIDGenerator.generateNativeGuid(device,adapterInstance.getPropertyValue(EMCADAPTERNAME).toString(),NativeGUIDGenerator.ADAPTER);  @SuppressWarnings("deprecation") List<URI> adapterURIs=_dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStorageHADomainByNativeGuidConstraint(adapterNativeGuid));  if (!adapterURIs.isEmpty()) {    adapter=_dbClient.queryObject(StorageHADomain.class,adapterURIs.get(0));  }  return adapter;}  }
class C{  public boolean parseCommand(String command,List list){  boolean done=false;  boolean success=false;  int space=-1;  do {    space=command.indexOf(' ');    if (space < 0) {      done=true;      list.add(command);      break;    }    String str=command.substring(0,space);    list.add(str);    command=command.substring(space + 1,command.length());    success=true;  } while (!done);  return success;}  }
class C{  private void addRuleToSwitchMapping(int ruleId,String dpid){  if (!ruleId2Dpid.containsKey(ruleId)) {    ruleId2Dpid.put(ruleId,new HashSet<String>());  }  ruleId2Dpid.get(ruleId).add(dpid);}  }
class C{  @Beta public static <K,V>ImmutableSortedMap<K,V> copyOf(Iterable<? extends Entry<? extends K,? extends V>> entries){  @SuppressWarnings("unchecked") Ordering<K> naturalOrder=(Ordering<K>)NATURAL_ORDER;  return copyOf(entries,naturalOrder);}  }
class C{  void start(){  ctx.io().addMessageListener(TOPIC_CLASSLOAD,peerLsnr);  if (log.isDebugEnabled())   log.debug("Started deployment communication.");}  }
class C{  public static Entry createPost(BloggerService myService,String title,String content,String authorName,String userName,Boolean isDraft) throws ServiceException, IOException {  Entry myEntry=new Entry();  myEntry.setTitle(new PlainTextConstruct(title));  myEntry.setContent(new PlainTextConstruct(content));  Person author=new Person(authorName,null,userName);  myEntry.getAuthors().add(author);  myEntry.setDraft(isDraft);  URL postUrl=new URL(feedUri + POSTS_FEED_URI_SUFFIX);  return myService.insert(postUrl,myEntry);}  }
class C{  private void dispatch(SipRequest request,long timestamp) throws PayloadException, NetworkException {  boolean logActivated=sLogger.isActivated();  if (logActivated) {    sLogger.debug("Receive " + request.getMethod() + " request");  }  String localIpAddress=mImsModule.getCurrentNetworkInterface().getNetworkAccess().getIpAddress();  ImsNetworkInterface imsNetIntf=mImsModule.getCurrentNetworkInterface();  SipURI requestURI;  try {    requestURI=SipUtils.ADDR_FACTORY.createSipURI(request.getRequestURI());  } catch (  ParseException e) {    if (logActivated) {      sLogger.error("Unable to parse request URI " + request.getRequestURI(),e);    }    sendFinalResponse(request,Response.BAD_REQUEST);    return;  }  boolean isMatchingRegistered=localIpAddress.equals(requestURI.getHost());  if ((!isMatchingRegistered) && imsNetIntf.isBehindNat()) {    String natPublicIpAddress=imsNetIntf.getNatPublicAddress();    int natPublicUdpPort=imsNetIntf.getNatPublicPort();    isMatchingRegistered=(natPublicUdpPort != -1) && (natPublicIpAddress != null) && natPublicIpAddress.equals(requestURI.getHost())&& (natPublicUdpPort == requestURI.getPort());  }  if (!isMatchingRegistered) {    if (logActivated) {      sLogger.debug("Request-URI address and port do not match with registered contact: reject the request");    }    sendFinalResponse(request,Response.NOT_FOUND);    return;  }  String instanceId=SipUtils.getInstanceID(request);  if ((instanceId != null) && !instanceId.contains(mImsModule.getSipManager().getSipStack().getInstanceId())) {    if (logActivated) {      sLogger.debug("SIP instance ID doesn't match: reject the request");    }    sendFinalResponse(request,Response.BUSY_HERE);    return;  }  String publicGruu=SipUtils.getPublicGruu(request);  if ((publicGruu != null) && !publicGruu.contains(mImsModule.getSipManager().getSipStack().getPublicGruu())) {    if (logActivated) {      sLogger.debug("SIP public-gruu doesn't match: reject the request");    }    sendFinalResponse(request,Response.BUSY_HERE);    return;  }  ImsServiceSession session=getImsServiceSession(request.getCallId());  if (session != null) {    ContactHeader contactHeader=(ContactHeader)request.getHeader(ContactHeader.NAME);    if (contactHeader != null) {      String remoteInstanceId=contactHeader.getParameter(SipUtils.SIP_INSTANCE_PARAM);      session.getDialogPath().setRemoteSipInstance(remoteInstanceId);    }  }  if (request.getMethod().equals(Request.OPTIONS)) {    mImsModule.getCapabilityService().onCapabilityRequestReceived(request);  } else   if (request.getMethod().equals(Request.INVITE)) {    if (session != null) {      session.receiveReInvite(request);      return;    }    send100Trying(request);    String sdp=request.getSdpContent();    if (sdp == null) {      if (logActivated) {        sLogger.debug("No SDP found: automatically reject");      }      sendFinalResponse(request,Response.SESSION_NOT_ACCEPTABLE);      return;    }    sdp=sdp.toLowerCase();    if (isTagPresent(sdp,"msrp") && SipUtils.isFeatureTagPresent(request,FeatureTags.FEATURE_3GPP_VIDEO_SHARE) && (SipUtils.isFeatureTagPresent(request,FeatureTags.FEATURE_3GPP_IMAGE_SHARE) || SipUtils.isFeatureTagPresent(request,FeatureTags.FEATURE_3GPP_IMAGE_SHARE_RCS2))) {      if (mRcsSettings.isImageSharingSupported()) {        if (logActivated) {          sLogger.debug("Image content sharing transfer invitation");        }        mImsModule.getRichcallService().onImageSharingInvitationReceived(request,timestamp);      } else {        if (logActivated) {          sLogger.debug("Image share service not supported: automatically reject");        }        sendFinalResponse(request,Response.DECLINE);      }    } else     if (isTagPresent(sdp,"msrp") && SipUtils.isFeatureTagPresent(request,FeatureTags.FEATURE_OMA_IM) && isTagPresent(sdp,"file-selector")) {      if (mRcsSettings.isFileTransferSupported()) {        if (logActivated) {          sLogger.debug("File transfer invitation");        }        mImsModule.getInstantMessagingService().onMsrpFileTransferInvitationReceived(request,timestamp);      } else {        if (logActivated) {          sLogger.debug("File transfer service not supported: automatically reject");        }        sendFinalResponse(request,Response.DECLINE);      }    } else     if (isTagPresent(sdp,"msrp") && SipUtils.isFeatureTagPresent(request,FeatureTags.FEATURE_OMA_IM)) {      if (!mRcsSettings.isImSessionSupported()) {        if (logActivated) {          sLogger.debug("IM service not supported: automatically reject");        }        sendFinalResponse(request,Response.DECLINE);        return;      }      if (ChatUtils.isFileTransferOverHttp(request)) {        FileTransferHttpInfoDocument ftHttpInfo=FileTransferUtils.getHttpFTInfo(request,mRcsSettings);        if (ftHttpInfo != null) {          if (SipUtils.getReferredByHeader(request) != null) {            if (logActivated) {              sLogger.debug("Single S&F file transfer over HTTP invitation");            }            mImsModule.getInstantMessagingService().onStoreAndForwardOneToOneHttpFileTranferInvitationReceived(request,ftHttpInfo,timestamp);          } else {            if (logActivated) {              sLogger.debug("Single file transfer over HTTP invitation");            }            mImsModule.getInstantMessagingService().onOneToOneHttpFileTranferInvitationReceived(request,ftHttpInfo,timestamp);          }        } else {          if (logActivated) {            sLogger.debug("Malformed xml for FToHTTP: automatically reject");          }          sendFinalResponse(request,Response.SESSION_NOT_ACCEPTABLE);        }      } else {        String contentType=request.getContentType();        SipUtils.assertContentIsNotNull(contentType,request);        if (SipUtils.getAssertedIdentity(request).contains(StoreAndForwardManager.SERVICE_URI) && (!contentType.contains("multipart"))) {          if (logActivated) {            sLogger.debug("Store & Forward push notifications");          }          mImsModule.getInstantMessagingService().onStoredAndForwardPushNotificationReceived(request,timestamp);        } else         if (ChatUtils.isGroupChatInvitation(request)) {          if (logActivated) {            sLogger.debug("Ad-hoc group chat session invitation");          }          mImsModule.getInstantMessagingService().onAdHocGroupChatSessionReceived(request,timestamp);        } else         if (SipUtils.getReferredByHeader(request) != null) {          if (logActivated) {            sLogger.debug("Store & Forward push messages session");          }          mImsModule.getInstantMessagingService().onStoreAndForwardPushMessagesReceived(request,timestamp);        } else {          if (logActivated) {            sLogger.debug("1-1 chat session invitation");          }          mImsModule.getInstantMessagingService().onOne2OneChatSessionReceived(request,timestamp);        }      }    } else     if (isTagPresent(sdp,"rtp") && SipUtils.isFeatureTagPresent(request,FeatureTags.FEATURE_3GPP_VIDEO_SHARE)) {      if (mRcsSettings.isVideoSharingSupported()) {        if (logActivated) {          sLogger.debug("Video content sharing streaming invitation");        }        mImsModule.getRichcallService().onVideoSharingInvitationReceived(request,timestamp);      } else {        if (logActivated) {          sLogger.debug("Video share service not supported: automatically reject");        }        sendFinalResponse(request,Response.DECLINE);      }    } else     if (isTagPresent(sdp,"msrp") && SipUtils.isFeatureTagPresent(request,FeatureTags.FEATURE_3GPP_VIDEO_SHARE) && SipUtils.isFeatureTagPresent(request,FeatureTags.FEATURE_RCSE_GEOLOCATION_PUSH)) {      if (mRcsSettings.isGeoLocationPushSupported()) {        if (logActivated) {          sLogger.debug("Geoloc content sharing transfer invitation");        }        mImsModule.getRichcallService().onGeolocSharingInvitationReceived(request,timestamp);      } else {        if (logActivated) {          sLogger.debug("Geoloc share service not supported: automatically reject");        }        sendFinalResponse(request,Response.DECLINE);      }    } else     if (SipUtils.isFeatureTagPresent(request,FeatureTags.FEATURE_RCSE_IP_VOICE_CALL) && SipUtils.isFeatureTagPresent(request,FeatureTags.FEATURE_3GPP_IP_VOICE_CALL)) {      if (logActivated) {        sLogger.debug("IP Voice call service not supported: automatically reject");      }      sendFinalResponse(request,Response.DECLINE);    } else     if (SipUtils.isFeatureTagPresent(request,FeatureTags.FEATURE_RCSE_IP_VOICE_CALL) && SipUtils.isFeatureTagPresent(request,FeatureTags.FEATURE_3GPP_IP_VOICE_CALL) && SipUtils.isFeatureTagPresent(request,FeatureTags.FEATURE_RCSE_IP_VIDEO_CALL)) {      if (logActivated) {        sLogger.debug("IP video call service not supported: automatically reject");      }      sendFinalResponse(request,Response.DECLINE);    } else {      Intent intent=mIntentMgr.isSipRequestResolved(request);      if (intent != null) {        if (isTagPresent(sdp,"msrp")) {          if (logActivated) {            sLogger.debug("Generic SIP session invitation with MSRP media");          }          mImsModule.getSipService().onMsrpSessionInvitationReceived(intent,request,timestamp);        } else         if (isTagPresent(sdp,"rtp")) {          if (logActivated) {            sLogger.debug("Generic SIP session invitation with RTP media");          }          mImsModule.getSipService().onRtpSessionInvitationReceived(intent,request,timestamp);        } else {          if (logActivated) {            sLogger.debug("Media not supported for a generic SIP session");          }          sendFinalResponse(request,Response.SESSION_NOT_ACCEPTABLE);        }      } else {        if (logActivated) {          sLogger.debug("Unknown IMS service: automatically reject");        }        sendFinalResponse(request,Response.FORBIDDEN,"Unsupported Extension");      }    }  } else   if (request.getMethod().equals(Request.MESSAGE)) {    if (ChatUtils.isImdnService(request)) {      mImsModule.getInstantMessagingService().onMessageDeliveryStatusReceived(request);    } else     if (TermsConditionsService.isTermsRequest(request)) {      mImsModule.getTermsConditionsService().onMessageReceived(request);    } else {      Intent intent=mIntentMgr.isSipRequestResolved(request);      if (intent != null) {        mImsModule.getSipService().onInstantMessageReceived(intent,request);      } else {        if (logActivated) {          sLogger.debug("Unknown IMS service: automatically reject");        }        sendFinalResponse(request,Response.FORBIDDEN);      }    }  } else   if (request.getMethod().equals(Request.NOTIFY)) {    dispatchNotify(request,timestamp);  } else   if (request.getMethod().equals(Request.BYE)) {    if (session != null) {      session.receiveBye(request);    }    if (logActivated) {      sLogger.info("Send 200 OK");    }    mImsModule.getSipManager().sendSipResponse(SipMessageFactory.createResponse(request,Response.OK));  } else   if (request.getMethod().equals(Request.CANCEL)) {    if (session != null) {      session.receiveCancel(request);    }    if (logActivated) {      sLogger.info("Send 200 OK");    }    mImsModule.getSipManager().sendSipResponse(SipMessageFactory.createResponse(request,Response.OK));  } else   if (request.getMethod().equals(Request.UPDATE)) {    if (session != null) {      session.receiveUpdate(request);    }  } else {    if (logActivated) {      sLogger.debug("Unknown request " + request.getMethod());    }    sendFinalResponse(request,Response.FORBIDDEN);  }}  }
class C{  public FacetResult runDrillDown() throws IOException {  index();  return drillDown();}  }
class C{  public void deleteSelection(ArrayList<Integer> nodes){  for (int i=0; i < nodes.size(); i++) {    for (int j=i + 1; j < nodes.size(); j++) {      if (nodes.get(i) > nodes.get(j)) {        int h=nodes.get(i);        nodes.set(i,nodes.get(j));        nodes.set(j,h);      }    }  }  if (m_bNeedsUndoAction) {    addUndoAction(new DeleteSelectionAction(nodes));  }  boolean bNeedsUndoAction=m_bNeedsUndoAction;  m_bNeedsUndoAction=false;  try {    for (int iNode=nodes.size() - 1; iNode >= 0; iNode--) {      deleteNode(nodes.get(iNode));    }  } catch (  Exception e) {    e.printStackTrace();  }  m_bNeedsUndoAction=bNeedsUndoAction;}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  @Override public void deleteById(final String id) throws IOException {  if (this.solr0 != null)   this.solr0.deleteById(id);  if (this.solr1 != null)   this.solr1.deleteById(id);}  }
class C{  protected FunctionTypeExpressionImpl(){  super();}  }
class C{  private static synchronized void recordConcreteType(RVMMethod m,RVMField f,TypeReference t){  if (!f.isPrivate()) {    return;  }  FieldDatabase.FieldDatabaseEntry entry=db.findOrCreateEntry(f);  FieldDatabase.FieldWriterInfo info=entry.findMethodInfo(m);  info.setAnalyzed();  if (info.isBottom()) {    return;  }  TypeReference oldType=info.concreteType;  if (oldType == null) {    info.concreteType=t;  } else   if (oldType != t) {    info.setBottom();  }}  }
class C{  public static final String nameForDaemon(final CassandraDaemonTask daemon){  return nameForDaemon(daemon.getName());}  }
class C{  public static String sortAndGetState(){  if (_state.length() == 0) {    return _state;  }  String[] states=_state.split("\\n");  List<String> list=new ArrayList();  for (int counter=0; counter < states.length; ++counter) {    list.add(states[counter]);  }  Collections.sort(list);  Iterator<String> iterator=list.iterator();  String value="";  while (iterator.hasNext()) {    value+=iterator.next() + "\n";  }  _state="";  return value;}  }
class C{  private void secondWalk(TreeNode v,double m,int level,double levelStart){  double levelChangeSign=getLevelChangeSign();  boolean levelChangeOnYAxis=isLevelChangeInYAxis();  double levelSize=getSizeOfLevel(level);  double x=getPrelim(v) + m;  double y;  AlignmentInLevel alignment=configuration.getAlignmentInLevel();  if (alignment == AlignmentInLevel.Center) {    y=levelStart + levelChangeSign * (levelSize / 2);  } else   if (alignment == AlignmentInLevel.TowardsRoot) {    y=levelStart + levelChangeSign * (getNodeThickness(v) / 2);  } else {    y=levelStart + levelSize - levelChangeSign * (getNodeThickness(v) / 2);  }  if (!levelChangeOnYAxis) {    double t=x;    x=y;    y=t;  }  positions.put(v,new NormalizedPosition(x,y));  updateBounds(v,x,y);  if (!tree.isLeaf(v)) {    double nextLevelStart=levelStart + (levelSize + configuration.getGapBetweenLevels(level + 1)) * levelChangeSign;    for (    TreeNode w : tree.getChildren(v)) {      secondWalk(w,m + getMod(v),level + 1,nextLevelStart);    }  }}  }
class C{  private void consume(){  consumer.subscribe(topics);  while (running.get()) {    try {      ConsumerRecords records=consumer.poll(pollIntervalMs);      if (records == null) {        continue;      }      Iterator<ConsumerRecord<String,String>> iterator=records.iterator();      while (iterator.hasNext()) {        sendMessage(iterator.next());      }    } catch (    Exception ex) {      String error="Error consuming messages from kafka";      logger.error(error,ex);      bus.send(ConfigConstants.CONSUMER_ERROR_TOPIC,getErrorString(error,ex.getMessage()));    }  }}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  public Iterator nodeIterator(){  return iterator();}  }
class C{  public char valueAt(int index){  return mValues[index];}  }
class C{  public static void main(String[] args){  if (args.length > 0) {    for (int x=0; x < args.length; x++) {      WebMacro converter=new WebMacro();      converter.convert(args[x]);    }  } else {    usage();  }}  }
class C{  @Deprecated public void revokeLongSession(final OnClientCallback<Void> callback) throws EDAMUserException, EDAMSystemException, TException {  AsyncReflector.execute(mClient,callback,"revokeLongSession",mAuthenticationToken);}  }
class C{  public SnmpOpaque(byte[] v){  super(v);}  }
class C{  public void defaultFormat(){  m_FormatText.setText(DEFAULT_FORMAT);  formatChanged();}  }
class C{  public RangeCategorySeries(String title){  super(title);}  }
class C{  public Object clone(){  try {    Percent other=(Percent)super.clone();    return other;  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  public boolean stopVoiceRecognition(BluetoothDevice device){  if (DBG)   log("stopVoiceRecognition()");  if (mService != null && isEnabled() && isValidDevice(device)) {    try {      return mService.stopVoiceRecognition(device);    } catch (    RemoteException e) {      Log.e(TAG,Log.getStackTraceString(new Throwable()));    }  }  if (mService == null)   Log.w(TAG,"Proxy not attached to service");  return false;}  }
class C{  public org.smpte_ra.schemas.st2067_2_2016.DigestMethodType buildDigestMethodType(String algorithm){  org.smpte_ra.schemas.st2067_2_2016.DigestMethodType digestMethodType=new org.smpte_ra.schemas.st2067_2_2016.DigestMethodType();  digestMethodType.setAlgorithm(algorithm);  return digestMethodType;}  }
class C{  public static String truncatedURL(final DigestURL url){  String u=url.toNormalform(true);  final int i=u.indexOf('?');  if (i > 0)   u=u.substring(0,i + 1);  return u;}  }
class C{  private Node statementHelper(Node statementLabel) throws IOException, ParserException {  Node pn=null;  int tt;  tt=peekToken();switch (tt) {case Token.IF:{      consumeToken();      decompiler.addToken(Token.IF);      int lineno=ts.getLineno();      Node cond=condition();      decompiler.addEOL(Token.LC);      Node ifTrue=statement();      Node ifFalse=null;      if (matchToken(Token.ELSE)) {        decompiler.addToken(Token.RC);        decompiler.addToken(Token.ELSE);        decompiler.addEOL(Token.LC);        ifFalse=statement();      }      decompiler.addEOL(Token.RC);      pn=nf.createIf(cond,ifTrue,ifFalse,lineno);      return pn;    }case Token.SWITCH:{    consumeToken();    decompiler.addToken(Token.SWITCH);    int lineno=ts.getLineno();    mustMatchToken(Token.LP,"msg.no.paren.switch");    decompiler.addToken(Token.LP);    pn=enterSwitch(expr(false),lineno);    try {      mustMatchToken(Token.RP,"msg.no.paren.after.switch");      decompiler.addToken(Token.RP);      mustMatchToken(Token.LC,"msg.no.brace.switch");      decompiler.addEOL(Token.LC);      boolean hasDefault=false;      switchLoop:       for (; ; ) {        tt=nextToken();        Node caseExpression;switch (tt) {case Token.RC:          break switchLoop;case Token.CASE:        decompiler.addToken(Token.CASE);      caseExpression=expr(false);    mustMatchToken(Token.COLON,"msg.no.colon.case");  decompiler.addEOL(Token.COLON);break;case Token.DEFAULT:if (hasDefault) {reportError("msg.double.switch.default");}decompiler.addToken(Token.DEFAULT);hasDefault=true;caseExpression=null;mustMatchToken(Token.COLON,"msg.no.colon.case");decompiler.addEOL(Token.COLON);break;default :reportError("msg.bad.switch");break switchLoop;}Node block=nf.createLeaf(Token.BLOCK);while ((tt=peekToken()) != Token.RC && tt != Token.CASE && tt != Token.DEFAULT && tt != Token.EOF) {nf.addChildToBack(block,statement());}nf.addSwitchCase(pn,caseExpression,block);}decompiler.addEOL(Token.RC);nf.closeSwitch(pn);}  finally {exitSwitch();}return pn;}case Token.WHILE:{consumeToken();decompiler.addToken(Token.WHILE);Node loop=enterLoop(statementLabel);try {Node cond=condition();decompiler.addEOL(Token.LC);Node body=statement();decompiler.addEOL(Token.RC);pn=nf.createWhile(loop,cond,body);}  finally {exitLoop();}return pn;}case Token.DO:{consumeToken();decompiler.addToken(Token.DO);decompiler.addEOL(Token.LC);Node loop=enterLoop(statementLabel);try {Node body=statement();decompiler.addToken(Token.RC);mustMatchToken(Token.WHILE,"msg.no.while.do");decompiler.addToken(Token.WHILE);Node cond=condition();pn=nf.createDoWhile(loop,body,cond);}  finally {exitLoop();}matchToken(Token.SEMI);decompiler.addEOL(Token.SEMI);return pn;}case Token.FOR:{consumeToken();boolean isForEach=false;decompiler.addToken(Token.FOR);Node loop=enterLoop(statementLabel);try {Node init;Node cond;Node incr=null;Node body;if (matchToken(Token.NAME)) {decompiler.addName(ts.getString());if (ts.getString().equals("each")) {isForEach=true;} else {reportError("msg.no.paren.for");}}mustMatchToken(Token.LP,"msg.no.paren.for");decompiler.addToken(Token.LP);tt=peekToken();if (tt == Token.SEMI) {init=nf.createLeaf(Token.EMPTY);} else {if (tt == Token.VAR) {consumeToken();init=variables(Token.FOR);} else {init=expr(true);}}if (matchToken(Token.IN)) {decompiler.addToken(Token.IN);cond=expr(false);} else {mustMatchToken(Token.SEMI,"msg.no.semi.for");decompiler.addToken(Token.SEMI);if (peekToken() == Token.SEMI) {cond=nf.createLeaf(Token.EMPTY);} else {cond=expr(false);}mustMatchToken(Token.SEMI,"msg.no.semi.for.cond");decompiler.addToken(Token.SEMI);if (peekToken() == Token.RP) {incr=nf.createLeaf(Token.EMPTY);} else {incr=expr(false);}}mustMatchToken(Token.RP,"msg.no.paren.for.ctrl");decompiler.addToken(Token.RP);decompiler.addEOL(Token.LC);body=statement();decompiler.addEOL(Token.RC);if (incr == null) {pn=nf.createForIn(loop,init,cond,body,isForEach);} else {pn=nf.createFor(loop,init,cond,incr,body);}}  finally {exitLoop();}return pn;}case Token.TRY:{consumeToken();int lineno=ts.getLineno();Node tryblock;Node catchblocks=null;Node finallyblock=null;decompiler.addToken(Token.TRY);decompiler.addEOL(Token.LC);tryblock=statement();decompiler.addEOL(Token.RC);catchblocks=nf.createLeaf(Token.BLOCK);boolean sawDefaultCatch=false;int peek=peekToken();if (peek == Token.CATCH) {while (matchToken(Token.CATCH)) {if (sawDefaultCatch) {reportError("msg.catch.unreachable");}decompiler.addToken(Token.CATCH);mustMatchToken(Token.LP,"msg.no.paren.catch");decompiler.addToken(Token.LP);mustMatchToken(Token.NAME,"msg.bad.catchcond");String varName=ts.getString();decompiler.addName(varName);Node catchCond=null;if (matchToken(Token.IF)) {decompiler.addToken(Token.IF);catchCond=expr(false);} else {sawDefaultCatch=true;}mustMatchToken(Token.RP,"msg.bad.catchcond");decompiler.addToken(Token.RP);mustMatchToken(Token.LC,"msg.no.brace.catchblock");decompiler.addEOL(Token.LC);nf.addChildToBack(catchblocks,nf.createCatch(varName,catchCond,statements(),ts.getLineno()));mustMatchToken(Token.RC,"msg.no.brace.after.body");decompiler.addEOL(Token.RC);}} else if (peek != Token.FINALLY) {mustMatchToken(Token.FINALLY,"msg.try.no.catchfinally");}if (matchToken(Token.FINALLY)) {decompiler.addToken(Token.FINALLY);decompiler.addEOL(Token.LC);finallyblock=statement();decompiler.addEOL(Token.RC);}pn=nf.createTryCatchFinally(tryblock,catchblocks,finallyblock,lineno);return pn;}case Token.THROW:{consumeToken();if (peekTokenOrEOL() == Token.EOL) {reportError("msg.bad.throw.eol");}int lineno=ts.getLineno();decompiler.addToken(Token.THROW);pn=nf.createThrow(expr(false),lineno);break;}case Token.BREAK:{consumeToken();int lineno=ts.getLineno();decompiler.addToken(Token.BREAK);Node breakStatement=matchJumpLabelName();if (breakStatement == null) {if (loopAndSwitchSet == null || loopAndSwitchSet.size() == 0) {reportError("msg.bad.break");return null;}breakStatement=(Node)loopAndSwitchSet.peek();}pn=nf.createBreak(breakStatement,lineno);break;}case Token.CONTINUE:{consumeToken();int lineno=ts.getLineno();decompiler.addToken(Token.CONTINUE);Node loop;Node label=matchJumpLabelName();if (label == null) {if (loopSet == null || loopSet.size() == 0) {reportError("msg.continue.outside");return null;}loop=(Node)loopSet.peek();} else {loop=nf.getLabelLoop(label);if (loop == null) {reportError("msg.continue.nonloop");return null;}}pn=nf.createContinue(loop,lineno);break;}case Token.WITH:{consumeToken();decompiler.addToken(Token.WITH);int lineno=ts.getLineno();mustMatchToken(Token.LP,"msg.no.paren.with");decompiler.addToken(Token.LP);Node obj=expr(false);mustMatchToken(Token.RP,"msg.no.paren.after.with");decompiler.addToken(Token.RP);decompiler.addEOL(Token.LC);++nestingOfWith;Node body;try {body=statement();}  finally {--nestingOfWith;}decompiler.addEOL(Token.RC);pn=nf.createWith(obj,body,lineno);return pn;}case Token.CONST:case Token.VAR:{consumeToken();pn=variables(tt);break;}case Token.RETURN:{if (!insideFunction()) {reportError("msg.bad.return");}consumeToken();decompiler.addToken(Token.RETURN);int lineno=ts.getLineno();Node retExpr;tt=peekTokenOrEOL();switch (tt) {case Token.SEMI:case Token.RC:case Token.EOF:case Token.EOL:case Token.ERROR:retExpr=null;break;default :retExpr=expr(false);hasReturnValue=true;}pn=nf.createReturn(retExpr,lineno);if (retExpr == null) {if (functionEndFlags == Node.END_RETURNS_VALUE) addStrictWarning("msg.return.inconsistent","");functionEndFlags|=Node.END_RETURNS;} else {if (functionEndFlags == Node.END_RETURNS) addStrictWarning("msg.return.inconsistent","");functionEndFlags|=Node.END_RETURNS_VALUE;}break;}case Token.LC:consumeToken();if (statementLabel != null) {decompiler.addToken(Token.LC);}pn=statements();mustMatchToken(Token.RC,"msg.no.brace.block");if (statementLabel != null) {decompiler.addEOL(Token.RC);}return pn;case Token.ERROR:case Token.SEMI:consumeToken();pn=nf.createLeaf(Token.EMPTY);return pn;case Token.FUNCTION:{consumeToken();pn=function(FunctionNode.FUNCTION_EXPRESSION_STATEMENT);return pn;}case Token.DEFAULT:consumeToken();mustHaveXML();decompiler.addToken(Token.DEFAULT);int nsLine=ts.getLineno();if (!(matchToken(Token.NAME) && ts.getString().equals("xml"))) {reportError("msg.bad.namespace");}decompiler.addName(" xml");if (!(matchToken(Token.NAME) && ts.getString().equals("namespace"))) {reportError("msg.bad.namespace");}decompiler.addName(" namespace");if (!matchToken(Token.ASSIGN)) {reportError("msg.bad.namespace");}decompiler.addToken(Token.ASSIGN);Node expr=expr(false);pn=nf.createDefaultNamespace(expr,nsLine);break;case Token.NAME:{int lineno=ts.getLineno();String name=ts.getString();setCheckForLabel();pn=expr(false);if (pn.getType() != Token.LABEL) {pn=nf.createExprStatement(pn,lineno);} else {if (peekToken() != Token.COLON) Kit.codeBug();consumeToken();decompiler.addName(name);decompiler.addEOL(Token.COLON);if (labelSet == null) {labelSet=new Hashtable();} else if (labelSet.containsKey(name)) {reportError("msg.dup.label");}boolean firstLabel;if (statementLabel == null) {firstLabel=true;statementLabel=pn;} else {firstLabel=false;}labelSet.put(name,statementLabel);try {pn=statementHelper(statementLabel);}  finally {labelSet.remove(name);}if (firstLabel) {pn=nf.createLabeledStatement(statementLabel,pn);}return pn;}break;}default :{int lineno=ts.getLineno();pn=expr(false);pn=nf.createExprStatement(pn,lineno);break;}}int ttFlagged=peekFlaggedToken();switch (ttFlagged & CLEAR_TI_MASK) {case Token.SEMI:consumeToken();break;case Token.ERROR:case Token.EOF:case Token.RC:break;default :if ((ttFlagged & TI_AFTER_EOL) == 0) {reportError("msg.no.semi.stmt");}break;}decompiler.addEOL(Token.SEMI);return pn;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testSingleSchemaNodeProcessing() throws Exception {  DevNullCounter oper=new DevNullCounter();  oper.setRollingwindowcount(5);  oper.setup(null);  oper.beginWindow(0);  long numtuples=1000000;  Object o=new Object();  for (long i=0; i < numtuples; i++) {    oper.data.process(o);  }  oper.endWindow();  LOG.info(String.format("\n*******************************************************\nnumtuples(%d)",numtuples));}  }
class C{  private void created(){  int n=count();  for (int i=0; i < n; i++) {    data.setRowIndex(i);    created.setSelected(false);  }}  }
class C{  private void finalizeSuperBlockStarts(){  if (GenerateStackMap) {    for (int i=0; i < itsExceptionTableTop; i++) {      ExceptionTableEntry ete=itsExceptionTable[i];      short handlerPC=(short)getLabelPC(ete.itsHandlerLabel);      addSuperBlockStart(handlerPC);    }    Arrays.sort(itsSuperBlockStarts,0,itsSuperBlockStartsTop);    int prev=itsSuperBlockStarts[0];    int copyTo=1;    for (int i=1; i < itsSuperBlockStartsTop; i++) {      int curr=itsSuperBlockStarts[i];      if (prev != curr) {        if (copyTo != i) {          itsSuperBlockStarts[copyTo]=curr;        }        copyTo++;        prev=curr;      }    }    itsSuperBlockStartsTop=copyTo;    if (itsSuperBlockStarts[copyTo - 1] == itsCodeBufferTop) {      itsSuperBlockStartsTop--;    }  }}  }
class C{  public int propagator(){  String s=soot.PhaseOptions.getString(options,"propagator");  if (s.equalsIgnoreCase("auto"))   return propagator_auto;  if (s.equalsIgnoreCase("iter"))   return propagator_iter;  if (s.equalsIgnoreCase("worklist"))   return propagator_worklist;  if (s.equalsIgnoreCase("alias"))   return propagator_alias;  if (s.equalsIgnoreCase("bdd"))   return propagator_bdd;  if (s.equalsIgnoreCase("incbdd"))   return propagator_incbdd;  throw new RuntimeException("Invalid value " + s + " of phase option propagator");}  }
class C{  public SummonScroll(final String name,final String clazz,final String subclass,final Map<String,String> attributes){  super(name,clazz,subclass,attributes);}  }
class C{  public boolean epsilonEquals(Matrix3d m1,double epsilon){  double diff;  diff=m00 - m1.m00;  if ((diff < 0 ? -diff : diff) > epsilon) {    return false;  }  diff=m01 - m1.m01;  if ((diff < 0 ? -diff : diff) > epsilon) {    return false;  }  diff=m02 - m1.m02;  if ((diff < 0 ? -diff : diff) > epsilon) {    return false;  }  diff=m10 - m1.m10;  if ((diff < 0 ? -diff : diff) > epsilon) {    return false;  }  diff=m11 - m1.m11;  if ((diff < 0 ? -diff : diff) > epsilon) {    return false;  }  diff=m12 - m1.m12;  if ((diff < 0 ? -diff : diff) > epsilon) {    return false;  }  diff=m20 - m1.m20;  if ((diff < 0 ? -diff : diff) > epsilon) {    return false;  }  diff=m21 - m1.m21;  if ((diff < 0 ? -diff : diff) > epsilon) {    return false;  }  diff=m22 - m1.m22;  if ((diff < 0 ? -diff : diff) > epsilon) {    return false;  }  return true;}  }
class C{  void requireInvalidation(){  this.invalidationRequired=true;  LOGGER.trace("Set invalidation required");}  }
class C{  private static Version[] buildVersions(){  return new Version[]{new Version(1,10,10,8,8,new ECBlocks(5,new ECB(1,3))),new Version(2,12,12,10,10,new ECBlocks(7,new ECB(1,5))),new Version(3,14,14,12,12,new ECBlocks(10,new ECB(1,8))),new Version(4,16,16,14,14,new ECBlocks(12,new ECB(1,12))),new Version(5,18,18,16,16,new ECBlocks(14,new ECB(1,18))),new Version(6,20,20,18,18,new ECBlocks(18,new ECB(1,22))),new Version(7,22,22,20,20,new ECBlocks(20,new ECB(1,30))),new Version(8,24,24,22,22,new ECBlocks(24,new ECB(1,36))),new Version(9,26,26,24,24,new ECBlocks(28,new ECB(1,44))),new Version(10,32,32,14,14,new ECBlocks(36,new ECB(1,62))),new Version(11,36,36,16,16,new ECBlocks(42,new ECB(1,86))),new Version(12,40,40,18,18,new ECBlocks(48,new ECB(1,114))),new Version(13,44,44,20,20,new ECBlocks(56,new ECB(1,144))),new Version(14,48,48,22,22,new ECBlocks(68,new ECB(1,174))),new Version(15,52,52,24,24,new ECBlocks(42,new ECB(2,102))),new Version(16,64,64,14,14,new ECBlocks(56,new ECB(2,140))),new Version(17,72,72,16,16,new ECBlocks(36,new ECB(4,92))),new Version(18,80,80,18,18,new ECBlocks(48,new ECB(4,114))),new Version(19,88,88,20,20,new ECBlocks(56,new ECB(4,144))),new Version(20,96,96,22,22,new ECBlocks(68,new ECB(4,174))),new Version(21,104,104,24,24,new ECBlocks(56,new ECB(6,136))),new Version(22,120,120,18,18,new ECBlocks(68,new ECB(6,175))),new Version(23,132,132,20,20,new ECBlocks(62,new ECB(8,163))),new Version(24,144,144,22,22,new ECBlocks(62,new ECB(8,156),new ECB(2,155))),new Version(25,8,18,6,16,new ECBlocks(7,new ECB(1,5))),new Version(26,8,32,6,14,new ECBlocks(11,new ECB(1,10))),new Version(27,12,26,10,24,new ECBlocks(14,new ECB(1,16))),new Version(28,12,36,10,16,new ECBlocks(18,new ECB(1,22))),new Version(29,16,36,14,16,new ECBlocks(24,new ECB(1,32))),new Version(30,16,48,14,22,new ECBlocks(28,new ECB(1,49)))};}  }
class C{  public void registerQName(QName qName,Source source){  Source old=qNameTable.get(qName);  if (old == null) {    qNameTable.put(new QName(qName),source);  } else   if (!old.getName().equals(source.getName())) {    assert false : qName + " defined in " + old+ " and "+ source.getName();  }}  }
class C{  public boolean addOMGraphic(OMGraphic omg){  return super.add(omg);}  }
class C{  private String fieldsString(boolean detailed){  String fieldsString="";  Set<String> fieldStrings=new HashSet<String>();  if (this.invalidated) {    fieldsString+="\"" + INVALIDATED + "\"";  } else {    int cumStrLen=0;    for (    SootField sootField : getFieldsToDisplay(this.getSootClass())) {      Set<VAModel> vaModels=this.getFieldVAModels(sootField);      String fieldString="";      if (vaModels == null) {        fieldString+=INVALIDATED;      } else       if (vaModels.size() >= 0 && vaModels.size() < 100) {        if (vaModels.size() > 1)         fieldString+="[";        Set<String> objectModelStrings=new HashSet<String>();        for (        VAModel vaModel : vaModels) {          if (vaModel != null) {            String str="";            if (this == vaModel) {              str="\"itself\"";              objectModelStrings.add(str);            } else {              if (detailed) {                str=vaModel.toStringDetailed();              } else {                str=vaModel.toStringSimple();              }              objectModelStrings.add(str);            }          }        }        fieldString+=StringUtils.join(objectModelStrings.toArray(),", ");        if (vaModels.size() > 1)         fieldString+="]";      } else {        fieldString+="\"too many values\"";      }      int length=fieldString.length();      cumStrLen+=length;      if (length > 0 && cumStrLen < 1000) {        fieldStrings.add("\"" + sootField.getName() + "\":"+ fieldString);      }    }    fieldsString+=StringUtils.join(fieldStrings.toArray(),", ");  }  return fieldsString;}  }
class C{  public void createPictScenario05_1() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-01-29 10:00:00"));  String supplierAdminId="Pict05_1_Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict05_1_SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  setCutOffDay(supplierAdmin.getKey(),2);  String customerAdminId="Pict05_1_Customer";  VOOrganization customer=orgSetup.registerCustomer("Pict05_1_CustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplierMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.createMarketingPermission(basicSetup.getSupplierAdminKey(),supplier.getOrganizationId(),technicalServiceAsync);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT_TEST_05_1",TestService.EXAMPLE2_ASYNC,TestPriceModel.EXAMPLE_PICT05_1_UNIT_WEEK,technicalServiceAsync,supplierMarketplace);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_05_1",serviceDetails,customerAdmin,role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-01-30 10:00:00"));  subDetails=subscrSetup.completeAsyncSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,subDetails);  VOServiceDetails proRataService=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT05_1_RATA_WEEK_SERVICE",TestService.EXAMPLE2_ASYNC,TestPriceModel.EXAMPLE_PICT05_1_RATA_WEEK,technicalServiceAsync,supplierMarketplace);  serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),serviceDetails,proRataService);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-01-30 11:00:00"));  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,proRataService);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-01 10:00:00"));  upgradedSubDetails=subscrSetup.completeAsyncUpgradeSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,upgradedSubDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-01 10:3" + "0:00"));  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails upgradedSubDetailsOld=upgradedSubDetails;  upgradedSubDetails.setSubscriptionId("PICT_TEST_05_1" + "_SubID2");  upgradedSubDetails=subscrSetup.modifySubscription(upgradedSubDetails,null);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-01 11:00:00"));  upgradedSubDetails=subscrSetup.completeAsyncModifySubscription(basicSetup.getSupplierAdminKey(),customerAdmin,upgradedSubDetailsOld);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long userterminateTime=DateTimeHandling.calculateMillis("2013-02-03 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userterminateTime);  subscrSetup.unsubscribeToService(upgradedSubDetails.getSubscriptionId());  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_05_1",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_05_1",upgradedSubDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_05_1",customer);}  }
class C{  void initOrResetVelocityTracker(){  if (mVelocityTracker == null) {    mVelocityTracker=VelocityTracker.obtain();  } else {    mVelocityTracker.clear();  }}  }
class C{  protected void sendFunctionGroup2(){  tc.sendMarklinMessage(MarklinMessage.setLocoFunction(getCANAddress(),5,(f5 ? 0x01 : 0x00)),this);  tc.sendMarklinMessage(MarklinMessage.setLocoFunction(getCANAddress(),6,(f6 ? 0x01 : 0x00)),this);  tc.sendMarklinMessage(MarklinMessage.setLocoFunction(getCANAddress(),7,(f7 ? 0x01 : 0x00)),this);  tc.sendMarklinMessage(MarklinMessage.setLocoFunction(getCANAddress(),8,(f8 ? 0x01 : 0x00)),this);}  }
class C{  public CVParameter(String param) throws Exception {  String[] parts=param.split(" ");  if (parts.length < 4 || parts.length > 5) {    throw new Exception("CVParameter " + param + ": four or five components expected!");  }  try {    Double.parseDouble(parts[0]);    throw new Exception("CVParameter " + param + ": Character parameter identifier expected");  } catch (  NumberFormatException n) {    m_ParamChar=parts[0];  }  try {    m_Lower=Double.parseDouble(parts[1]);  } catch (  NumberFormatException n) {    throw new Exception("CVParameter " + param + ": Numeric lower bound expected");  }  if (parts[2].equals("A")) {    m_Upper=m_Lower - 1;  } else   if (parts[2].equals("I")) {    m_Upper=m_Lower - 2;  } else {    try {      m_Upper=Double.parseDouble(parts[2]);      if (m_Upper < m_Lower) {        throw new Exception("CVParameter " + param + ": Upper bound is less than lower bound");      }    } catch (    NumberFormatException n) {      throw new Exception("CVParameter " + param + ": Upper bound must be numeric, or 'A' or 'N'");    }  }  try {    m_Steps=Double.parseDouble(parts[3]);  } catch (  NumberFormatException n) {    throw new Exception("CVParameter " + param + ": Numeric number of steps expected");  }  if (parts.length == 5 && parts[4].equals("R")) {    m_RoundParam=true;  }}  }
class C{  private static DefaultTestCase buildTestCase0() throws NoSuchMethodException, SecurityException, ClassNotFoundException {  TestCaseBuilder builder=new TestCaseBuilder();  Class<?> triangleClass=TestGenerationContext.getInstance().getClassLoaderForSUT().loadClass(Properties.TARGET_CLASS);  Constructor<?> ctor=triangleClass.getConstructor();  builder.appendConstructor(ctor);  return builder.getDefaultTestCase();}  }
class C{  @SuppressWarnings("fallthrough") public Point2D inverseTransform(Point2D ptSrc,Point2D ptDst) throws NoninvertibleTransformException {  if (ptDst == null) {    if (ptSrc instanceof Point2D.Double) {      ptDst=new Point2D.Double();    } else {      ptDst=new Point2D.Float();    }  }  double x=ptSrc.getX();  double y=ptSrc.getY();switch (state) {default :    stateError();case (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):  x-=m02;y-=m12;case (APPLY_SHEAR | APPLY_SCALE):double det=m00 * m11 - m01 * m10;if (Math.abs(det) <= Double.MIN_VALUE) {throw new NoninvertibleTransformException("Determinant is " + det);}ptDst.setLocation((x * m11 - y * m01) / det,(y * m00 - x * m10) / det);return ptDst;case (APPLY_SHEAR | APPLY_TRANSLATE):x-=m02;y-=m12;case (APPLY_SHEAR):if (m01 == 0.0 || m10 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}ptDst.setLocation(y / m10,x / m01);return ptDst;case (APPLY_SCALE | APPLY_TRANSLATE):x-=m02;y-=m12;case (APPLY_SCALE):if (m00 == 0.0 || m11 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}ptDst.setLocation(x / m00,y / m11);return ptDst;case (APPLY_TRANSLATE):ptDst.setLocation(x - m02,y - m12);return ptDst;case (APPLY_IDENTITY):ptDst.setLocation(x,y);return ptDst;}}  }
class C{  private void addAttributeLine(Rows rows,MAttribute attribute,boolean product,boolean readOnly){  log.fine(attribute + ", Product=" + product+ ", R/O="+ readOnly);  m_row++;  Label label=new Label(attribute.getName());  if (product)   label.setStyle("font-weight: bold");  if (attribute.getDescription() != null)   label.setTooltiptext(attribute.getDescription());  Row row=rows.newRow();  row.appendChild(label.rightAlign());  MAttributeInstance instance=attribute.getMAttributeInstance(m_M_AttributeSetInstance_ID);  if (MAttribute.ATTRIBUTEVALUETYPE_List.equals(attribute.getAttributeValueType())) {    MAttributeValue[] values=attribute.getMAttributeValues();    Listbox editor=new Listbox();    editor.setMold("select");    for (    MAttributeValue value : values) {      ListItem item=new ListItem(value != null ? value.getName() : "",value);      editor.appendChild(item);    }    boolean found=false;    if (instance != null) {      for (int i=0; i < values.length; i++) {        if (values[i] != null && values[i].getM_AttributeValue_ID() == instance.getM_AttributeValue_ID()) {          editor.setSelectedIndex(i);          found=true;          break;        }      }      if (found)       log.fine("Attribute=" + attribute.getName() + " #"+ values.length+ " - found: "+ instance); else       log.warning("Attribute=" + attribute.getName() + " #"+ values.length+ " - NOT found: "+ instance);    } else     log.fine("Attribute=" + attribute.getName() + " #"+ values.length+ " no instance");    row.appendChild(editor);    if (readOnly)     editor.setEnabled(false); else     m_editors.add(editor);  } else   if (MAttribute.ATTRIBUTEVALUETYPE_Number.equals(attribute.getAttributeValueType())) {    NumberBox editor=new NumberBox(false);    if (instance != null)     editor.setValue(instance.getValueNumber()); else     editor.setValue(Env.ZERO);    row.appendChild(editor);    if (readOnly)     editor.setEnabled(false); else     m_editors.add(editor);  } else {    Textbox editor=new Textbox();    if (instance != null)     editor.setText(instance.getValue());    row.appendChild(editor);    if (readOnly)     editor.setEnabled(false); else     m_editors.add(editor);  }}  }
class C{  private int hash(GraphicsConfiguration config,int w,int h,Object... args){  int hash;  hash=(config != null ? config.hashCode() : 0);  hash=31 * hash + w;  hash=31 * hash + h;  hash=31 * hash + Arrays.deepHashCode(args);  return hash;}  }
class C{  public static JSONObject currentUser(final HttpServletRequest request){  final HttpSession session=request.getSession(false);  if (null != session) {    return (JSONObject)session.getAttribute(User.USER);  }  return null;}  }
class C{  public boolean isCheckable(){  return getBooleanProperty(BOOLEAN_PROPERTY_CHECKABLE);}  }
class C{  public void incMessagesFailedQueued(){  this._stats.incInt(_messagesFailedQueuedId,1);}  }
class C{  public void copyHeader(InputStream in,OutputStream out) throws IOException {  BufferedInputStream is=new BufferedInputStream(in);  byte[] buf=new byte[64 * 1024];  int bytesRead;  while ((bytesRead=is.read(buf)) != -1) {    out.write(buf,0,bytesRead);  }}  }
class C{  public boolean containsAttribute(char attributeType){  return attributes.containsKey(attributeType);}  }
class C{  public FunctionCall(String uri,ValueExpr... args){  setURI(uri);  addArgs(args);}  }
class C{  public Statement desc(){  statement.append(" DESC");  return this;}  }
class C{  public static String decodeFlippedVarString(byte[] bytes,int offset){  int len=(int)decodeFlippedVarLong(bytes,offset);  offset+=sizeOfVarLong(len);  return PtBytes.toString(flipAllBitsInPlace(bytes,offset,len),offset,len);}  }
class C{  protected InternalDistributedMember waitForPrimaryMember(long timeout){synchronized (this) {    StopWatch timer=new StopWatch(true);    long warnTime=getDistributionManager().getConfig().getAckWaitThreshold() * 1000L;    boolean loggedWarning=false;    try {      for (; ; ) {        this.getAdvisee().getCancelCriterion().checkCancelInProgress(null);        final GemFireCacheImpl cache=(GemFireCacheImpl)getBucket().getCache();        if (cache != null && cache.isCacheAtShutdownAll()) {          throw new CacheClosedException("Cache is shutting down");        }        if (getBucketRedundancy() == -1) {          return null;        }        getProxyBucketRegion().getPartitionedRegion().checkReadiness();        if (isClosed()) {          break;        }        long elapsed=timer.elapsedTimeMillis();        long timeLeft=timeout - elapsed;        if (timeLeft <= 0) {          break;        }        if (getBucketRedundancy() == -1 || isClosed()) {          break;        }        InternalDistributedMember primary=basicGetPrimaryMember();        if (primary != null) {          return primary;        }        if (logger.isDebugEnabled()) {          logger.debug("Waiting for bucket {}. Time left :{} ms",this,timeLeft);        }        if (!loggedWarning) {          long timeUntilWarning=warnTime - elapsed;          if (timeUntilWarning <= 0) {            logger.warn(LocalizedMessage.create(LocalizedStrings.BucketAdvisor_WAITING_FOR_PRIMARY,new Object[]{warnTime / 1000L,this,this.adviseInitialized()}));            loggedWarning=true;          } else {            timeLeft=timeLeft > timeUntilWarning ? timeUntilWarning : timeLeft;          }        }        this.wait(timeLeft);      }    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();    } finally {      if (loggedWarning) {        logger.info(LocalizedMessage.create(LocalizedStrings.BucketAdvisor_WAITING_FOR_PRIMARY_DONE));      }    }    return null;  }}  }
class C{  public LSHSuperBit(final int stages,final int buckets,final int dimensions){  super(stages,buckets);  int code_length=stages * buckets / 2;  int superbit=computeSuperBit(stages,buckets,dimensions);  this.sb=new SuperBit(dimensions,superbit,code_length / superbit);}  }
class C{  @Deprecated protected static String startupInfo(String name){  setStartupInfo(name);  return Log4JUtil.startupInfo(name);}  }
class C{  static Object createObject(String factoryId,String fallbackClassName) throws ConfigurationError {  return createObject(factoryId,null,fallbackClassName);}  }
class C{  public static boolean methodAllowed(HttpMethod method){  return methodAllowed(method.getName());}  }
class C{  private void showVisualization(SimilarityMatrixVisualizer factory,VisualizationTask task){  VisualizationPlot plot=new VisualizationPlot();  Visualization vis=factory.makeVisualization(task,plot,1.0,1.0,null);  plot.getRoot().appendChild(vis.getLayer());  plot.getRoot().setAttribute(SVGConstants.SVG_WIDTH_ATTRIBUTE,"20cm");  plot.getRoot().setAttribute(SVGConstants.SVG_HEIGHT_ATTRIBUTE,"20cm");  plot.getRoot().setAttribute(SVGConstants.SVG_VIEW_BOX_ATTRIBUTE,"0 0 1 1");  plot.updateStyleElement();  (new SimpleSVGViewer()).setPlot(plot);}  }
class C{  public static void ignoreException(String pattern){  if (SolrException.ignorePatterns == null)   SolrException.ignorePatterns=new HashSet<>();  SolrException.ignorePatterns.add(pattern);}  }
class C{  public static <T extends IChained<T>>void remove(T element){  T previous=element.getPrevious();  T next=element.getNext();  if (previous != null) {    previous.setNext(next);  }  if (next != null) {    next.setPrevious(previous);  }  element.setPrevious(null);  element.setNext(null);}  }
class C{  public NotificationChain basicSetBlock(Block newBlock,NotificationChain msgs){  Block oldBlock=block;  block=newBlock;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.ABSTRACT_CATCH_BLOCK__BLOCK,oldBlock,newBlock);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public boolean isAddExtensionsWanted(){  return addExtensionsWanted;}  }
class C{  public static JobBuilder newJob(Class<? extends Job> jobClass){  JobBuilder b=new JobBuilder();  b.ofType(jobClass);  return b;}  }
class C{  public boolean isDefault(){  return (type == radio);}  }
class C{  public void lockTrade(){  trade.lockItemOffer();}  }
class C{  public synchronized boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof Map))   return false;  Map<?,?> t=(Map<?,?>)o;  if (t.size() != size())   return false;  try {    Iterator<Map.Entry<K,V>> i=entrySet().iterator();    while (i.hasNext()) {      Map.Entry<K,V> e=i.next();      K key=e.getKey();      V value=e.getValue();      if (value == null) {        if (!(t.get(key) == null && t.containsKey(key)))         return false;      } else {        if (!value.equals(t.get(key)))         return false;      }    }  } catch (  ClassCastException unused) {    return false;  }catch (  NullPointerException unused) {    return false;  }  return true;}  }
class C{  public int size(){  return _all.size();}  }
class C{  public int numParameters(){  return 1;}  }
class C{  public static void sort(int[][] m){  for (int i=0; i < m.length; i++) {    int maxCol0=m[i][0];    int maxCol1=m[i][1];    int maxIndex=i;    for (int j=i + 1; j < m.length; j++) {      if (maxCol1 < m[j][1]) {        maxCol1=m[j][1];        maxCol0=m[j][0];        maxIndex=j;      }    }    if (i != maxIndex) {      m[maxIndex][1]=m[i][1];      m[maxIndex][0]=m[i][0];      m[i][1]=maxCol1;      m[i][0]=maxCol0;    }  }}  }
class C{  public boolean userCanViewDir(int connectedUserId,int dirId,String entidad) throws Exception {  boolean can=false;  int dirMgrId=Defs.NULL_ID;  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    if (dirId == Defs.NULL_ID || dirId == Defs.ROOT_DIR_ID)     dirMgrId=0; else     dirMgrId=this.getDirMgrId(dirId,entidad);    can=hasUserAuth(connectedUserId,USER_ACTION_ID_VIEW,dirMgrId,Defs.NULL_ID,Defs.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  synchronized void orderlyCloseChannel(SelectionKey key) throws IOException {  SocketChannel ch=(SocketChannel)key.channel();  System.out.println("SERVER: orderlyCloseChannel chan[" + ch + "]");  ch.socket().shutdownOutput();  key.attach(this);  clist.add(key);}  }
class C{  public static List<Audit> findByEntity(EntityManager em,JPAEntity entity,BigInteger limit){  requireArgument(em != null,"Entity manager cannot be null.");  requireArgument(entity != null,"Entity cannot be null.");  TypedQuery<Audit> query=em.createNamedQuery("Audit.findByJPAEntity",Audit.class);  if (limit != null) {    query.setMaxResults(limit.intValue());  }  try {    query.setParameter("jpaEntity",entity);    return query.getResultList();  } catch (  NoResultException ex) {    return new ArrayList<Audit>(0);  }}  }
class C{  public SplittableRandom(long seed){  this(seed,GOLDEN_GAMMA);}  }
class C{  public LegendItem(String label,Paint paint){  this(label,null,null,null,new Rectangle2D.Double(-4.0,-4.0,8.0,8.0),paint);}  }
class C{  private EmrCluster createEmrClusterFromRequest(String clusterId,String namespaceCd,String clusterDefinitionName,String clusterName,String clusterStatus,Boolean emrClusterCreated,Boolean dryRun,EmrClusterDefinition emrClusterDefinition){  EmrCluster emrCluster=new EmrCluster();  emrCluster.setId(clusterId);  emrCluster.setNamespace(namespaceCd);  emrCluster.setEmrClusterDefinitionName(clusterDefinitionName);  emrCluster.setEmrClusterName(clusterName);  emrCluster.setStatus(clusterStatus);  emrCluster.setDryRun(dryRun);  emrCluster.setEmrClusterCreated(emrClusterCreated);  emrCluster.setEmrClusterDefinition(emrClusterDefinition);  return emrCluster;}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=AbImageUtil.scaleImg(tempBitmap,desiredWidth,desiredHeight);    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  public boolean isGenericURI(){  return (m_host != null);}  }
class C{  public void testClassMemberDependencies() throws Exception {  checkMembers("CLASS_FIELD_DEPENDS_ON_CLASS_FIELD_FOO");  Assert.assertThat("Class member dependencies failed",getErrorMemberNames(),Matchers.containsInAnyOrder("CLASS_FIELD_FOO"));}  }
class C{  public boolean isMaxValueSet(){  return mMaxValue != -MathHelper.NULL_VALUE;}  }
class C{  public static boolean isValidPxPromotionStrict(String san){  if (san.length() == 3) {    return FILES.indexOf(san.charAt(0)) != -1 && FILES.indexOf(san.charAt(1)) != -1 && PROMOTIONS.indexOf(san.charAt(2)) != -1;  } else {    return false;  }}  }
class C{  public final RenderBuffer putDouble(double x){  unsafe.putDouble(curAddress,x);  curAddress+=SIZEOF_DOUBLE;  return this;}  }
class C{  private void fireDeleteBreakpoints(@NotNull final List<Breakpoint> breakpointsToDelete){  for (  Breakpoint breakpoint : breakpointsToDelete) {    getModel().markForDelete(breakpoint.getId());    process.getBreakpointHandler().deleteBreakpoint(breakpoint);  }  getModel().fireTableDataChanged();}  }
class C{  public DailyTenorEURLibor(final int settlementDays){  this(settlementDays,new Handle<YieldTermStructure>());}  }
class C{  private static Pair<String,String> preIndexedLSL(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){  final String address=environment.getNextVariableString();  final String tmpVar1=environment.getNextVariableString();  final String tmpVar2=environment.getNextVariableString();  final String index=environment.getNextVariableString();  long baseOffset=offset;  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,dw,immediateNodeValue,qw,tmpVar1));  instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar1,dw,dWordBitMask,dw,index));  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar2));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar2,dw,dWordBitMask,dw,address));  instructions.add(ReilHelpers.createStr(baseOffset++,dw,address,dw,registerNodeValue1));  return new Pair<String,String>(address,registerNodeValue1);}  }
class C{  public final ITypeBinding resolveTypeBinding(){  return this.ast.getBindingResolver().resolveExpressionType(this);}  }
class C{  boolean ancestorIsOk(ElemTemplateElement child){  while (child.getParentElem() != null && !(child.getParentElem() instanceof ElemExsltFunction)) {    ElemTemplateElement parent=child.getParentElem();    if (parent instanceof ElemExsltFuncResult || parent instanceof ElemVariable || parent instanceof ElemParam|| parent instanceof ElemMessage)     return true;    child=parent;  }  return false;}  }
class C{  private char[] eFormatDigits(double x,char eChar){  char[] ca1, ca2, ca3;  String sx, sxOut;  int i, j, k, p;  int n1In, n2In;  int expon=0;  int ePos, rPos, eSize;  boolean minusSign=false;  if (x > 0.0)   sx=Double.toString(x); else   if (x < 0.0) {    sx=Double.toString(-x);    minusSign=true;  } else {    sx=Double.toString(x);    if (sx.charAt(0) == '-') {      minusSign=true;      sx=sx.substring(1);    }  }  ePos=sx.indexOf('E');  if (ePos == -1)   ePos=sx.indexOf('e');  rPos=sx.indexOf('.');  if (rPos != -1)   n1In=rPos; else   if (ePos != -1)   n1In=ePos; else   n1In=sx.length();  if (rPos != -1) {    if (ePos != -1)     n2In=ePos - rPos - 1; else     n2In=sx.length() - rPos - 1;  } else   n2In=0;  if (ePos != -1) {    int ie=ePos + 1;    expon=0;    if (sx.charAt(ie) == '-') {      for (++ie; ie < sx.length(); ie++)       if (sx.charAt(ie) != '0')       break;      if (ie < sx.length())       expon=-Integer.parseInt(sx.substring(ie));    } else {      if (sx.charAt(ie) == '+')       ++ie;      for (; ie < sx.length(); ie++)       if (sx.charAt(ie) != '0')       break;      if (ie < sx.length())       expon=Integer.parseInt(sx.substring(ie));    }  }  if (rPos != -1)   expon+=rPos - 1;  if (precisionSet)   p=precision; else   p=defaultDigits - 1;  if (rPos != -1 && ePos != -1)   ca1=(sx.substring(0,rPos) + sx.substring(rPos + 1,ePos)).toCharArray(); else   if (rPos != -1)   ca1=(sx.substring(0,rPos) + sx.substring(rPos + 1)).toCharArray(); else   if (ePos != -1)   ca1=sx.substring(0,ePos).toCharArray(); else   ca1=sx.toCharArray();  boolean carry=false;  int i0=0;  if (ca1[0] != '0')   i0=0; else   for (i0=0; i0 < ca1.length; i0++)   if (ca1[i0] != '0')   break;  if (i0 + p < ca1.length - 1) {    carry=checkForCarry(ca1,i0 + p + 1);    if (carry)     carry=startSymbolicCarry(ca1,i0 + p,i0);    if (carry) {      ca2=new char[i0 + p + 1];      ca2[i0]='1';      for (j=0; j < i0; j++)       ca2[j]='0';      for (i=i0, j=i0 + 1; j < p + 1; i++, j++)       ca2[j]=ca1[i];      expon++;      ca1=ca2;    }  }  if (Math.abs(expon) < 100 && !optionalL)   eSize=4; else   eSize=5;  if (alternateForm || !precisionSet || precision != 0)   ca2=new char[2 + p + eSize]; else   ca2=new char[1 + eSize];  if (ca1[0] != '0') {    ca2[0]=ca1[0];    j=1;  } else {    for (j=1; j < (ePos == -1 ? ca1.length : ePos); j++)     if (ca1[j] != '0')     break;    if ((ePos != -1 && j < ePos) || (ePos == -1 && j < ca1.length)) {      ca2[0]=ca1[j];      expon-=j;      j++;    } else {      ca2[0]='0';      j=2;    }  }  if (alternateForm || !precisionSet || precision != 0) {    ca2[1]='.';    i=2;  } else   i=1;  for (k=0; k < p && j < ca1.length; j++, i++, k++)   ca2[i]=ca1[j];  for (; i < ca2.length - eSize; i++)   ca2[i]='0';  ca2[i++]=eChar;  if (expon < 0)   ca2[i++]='-'; else   ca2[i++]='+';  expon=Math.abs(expon);  if (expon >= 100) {switch (expon / 100) {case 1:      ca2[i]='1';    break;case 2:  ca2[i]='2';break;case 3:ca2[i]='3';break;case 4:ca2[i]='4';break;case 5:ca2[i]='5';break;case 6:ca2[i]='6';break;case 7:ca2[i]='7';break;case 8:ca2[i]='8';break;case 9:ca2[i]='9';break;}i++;}switch ((expon % 100) / 10) {case 0:ca2[i]='0';break;case 1:ca2[i]='1';break;case 2:ca2[i]='2';break;case 3:ca2[i]='3';break;case 4:ca2[i]='4';break;case 5:ca2[i]='5';break;case 6:ca2[i]='6';break;case 7:ca2[i]='7';break;case 8:ca2[i]='8';break;case 9:ca2[i]='9';break;}i++;switch (expon % 10) {case 0:ca2[i]='0';break;case 1:ca2[i]='1';break;case 2:ca2[i]='2';break;case 3:ca2[i]='3';break;case 4:ca2[i]='4';break;case 5:ca2[i]='5';break;case 6:ca2[i]='6';break;case 7:ca2[i]='7';break;case 8:ca2[i]='8';break;case 9:ca2[i]='9';break;}int nZeros=0;if (!leftJustify && leadingZeros) {int xThousands=0;if (thousands) {int xlead=0;if (ca2[0] == '+' || ca2[0] == '-' || ca2[0] == ' ') xlead=1;int xdp=xlead;for (; xdp < ca2.length; xdp++) if (ca2[xdp] == '.') break;xThousands=(xdp - xlead) / 3;}if (fieldWidthSet) nZeros=fieldWidth - ca2.length;if ((!minusSign && (leadingSign || leadingSpace)) || minusSign) nZeros--;nZeros-=xThousands;if (nZeros < 0) nZeros=0;}j=0;if ((!minusSign && (leadingSign || leadingSpace)) || minusSign) {ca3=new char[ca2.length + nZeros + 1];j++;} else ca3=new char[ca2.length + nZeros];if (!minusSign) {if (leadingSign) ca3[0]='+';if (leadingSpace) ca3[0]=' ';} else ca3[0]='-';for (k=0; k < nZeros; j++, k++) ca3[j]='0';for (i=0; i < ca2.length && j < ca3.length; i++, j++) ca3[j]=ca2[i];int lead=0;if (ca3[0] == '+' || ca3[0] == '-' || ca3[0] == ' ') lead=1;int dp=lead;for (; dp < ca3.length; dp++) if (ca3[dp] == '.') break;int nThousands=dp / 3;if (dp < ca3.length) ca3[dp]=dfs.getDecimalSeparator();char[] ca4=ca3;if (thousands && nThousands > 0) {ca4=new char[ca3.length + nThousands + lead];ca4[0]=ca3[0];for (i=lead, k=lead; i < dp; i++) {if (i > 0 && (dp - i) % 3 == 0) {ca4[k]=dfs.getGroupingSeparator();ca4[k + 1]=ca3[i];k+=2;} else {ca4[k]=ca3[i];k++;}}for (; i < ca3.length; i++, k++) ca4[k]=ca3[i];}return ca4;}  }
class C{  public void error(String msg,Object[] args) throws javax.xml.transform.TransformerException {  java.lang.String fmsg=org.apache.xalan.res.XSLMessages.createXPATHMessage(msg,args);  throw new javax.xml.transform.TransformerException(fmsg);}  }
class C{  public static void write(float lat_1,float lon_1,int x1,int y1,int x2,int y2,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.LINE_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_LINE);  dos.writeByte(RENDERTYPE_OFFSET);  dos.writeFloat(lat_1);  dos.writeFloat(lon_1);  dos.writeInt(x1);  dos.writeInt(y1);  dos.writeInt(x2);  dos.writeInt(y2);  properties.write(dos);}  }
class C{  public SparseDoubleArray(){  this(10);}  }
class C{  public void testQtz259LW() throws Exception {  CronScheduleBuilder schedBuilder=CronScheduleBuilder.cronSchedule("0 0 0 LW * ? *");  Trigger trigger=TriggerBuilder.newTrigger().withIdentity("test").withSchedule(schedBuilder).build();  int i=0;  Date pdate=trigger.getFireTimeAfter(new Date());  while (++i < 26) {    Date date=trigger.getFireTimeAfter(pdate);    System.out.println("fireTime: " + date + ", previousFireTime: "+ pdate);    assertFalse("Next fire time is the same as previous fire time!",pdate.equals(date));    pdate=date;  }}  }
class C{  public SingletonIterator(E value){  this.value=new AtomicReference<E>(value);}  }
class C{  @Override public void paintComponent(Graphics g){  super.paintComponent(g);  if (m_image != null) {    double lz=m_imageZoom / 100.0;    ((Graphics2D)g).scale(lz,lz);    int plotWidth=m_image.getWidth();    int plotHeight=m_image.getHeight();    int ourWidth=getWidth();    int ourHeight=getHeight();    int x=0, y=0;    if (plotWidth < ourWidth) {      x=(ourWidth - plotWidth) / 2;    }    if (plotHeight < ourHeight) {      y=(ourHeight - plotHeight) / 2;    }    g.drawImage(m_image,x,y,this);    setPreferredSize(new Dimension(plotWidth,plotHeight));    revalidate();  }}  }
class C{  @Override public Range findDomainBounds(XYDataset dataset){  if (dataset == null) {    return null;  }  if (this.centerBarAtStartValue) {    return findDomainBoundsWithOffset((IntervalXYDataset)dataset);  } else {    return super.findDomainBounds(dataset);  }}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x41E73E95,version=271) public int sceUsbCamPollReadVideoFrameEnd(){  if (jpegBuffer == null || jpegBuffer.isNull()) {    return SceKernelErrors.ERROR_USBCAM_NO_READ_ON_VIDEO_FRAME;  }  if (currentVideoFrameCount <= lastVideoFrameCount) {    if (log.isDebugEnabled()) {      log.debug(String.format("sceUsbCamPollReadVideoFrameEnd not frame end (%d - %d)",currentVideoFrameCount,lastVideoFrameCount));    }    return SceKernelErrors.ERROR_USBCAM_NO_VIDEO_FRAME_AVAILABLE;  }  return writeCurrentVideoImage(jpegBuffer,jpegBufferSize);}  }
class C{  public Zipper<A> replaceNext(A a) throws NoSuchElementException {  return new Zipper<>(front,back.tail().plus(a),position);}  }
class C{  public static <T>Iterator<T> reverseListIterator(ListIterator<T> i){  return new ReverseListIterator<T>(i);}  }
class C{  public CompareToBuilder append(final boolean lhs,final boolean rhs){  if (comparison != 0) {    return this;  }  if (lhs == rhs) {    return this;  }  if (lhs == false) {    comparison=-1;  } else {    comparison=+1;  }  return this;}  }
class C{  public static String buildRandomSort(final Collection<String> fieldNames){  ArrayList<String> shuffledNames=new ArrayList<>(fieldNames);  Collections.replaceAll(shuffledNames,"id","score");  Collections.shuffle(shuffledNames,random());  final StringBuilder result=new StringBuilder();  final int numClauses=TestUtil.nextInt(random(),2,5);  for (int i=0; i < numClauses; i++) {    String field=shuffledNames.get(i);    if ((!"score".equals(field) && !field.contains("bcd")) && (0 == TestUtil.nextInt(random(),0,7))) {      if (field.contains("float") || field.contains("double") || field.contains("int")|| field.contains("long")) {        field="abs(" + field + ")";      } else {        field="if(exists(" + field + "),47,83)";      }    }    result.append(field).append(random().nextBoolean() ? " asc, " : " desc, ");  }  result.append("id").append(random().nextBoolean() ? " asc" : " desc");  return result.toString();}  }
class C{  public static URI replaceQuery(URI uri,String query) throws URISyntaxException {  String schemeSpecificPart=uri.getRawSchemeSpecificPart();  int questionMark=schemeSpecificPart.lastIndexOf("?");  if (questionMark < schemeSpecificPart.lastIndexOf(")")) {    questionMark=-1;  }  if (questionMark > 0) {    schemeSpecificPart=schemeSpecificPart.substring(0,questionMark);  }  if (query != null && query.length() > 0) {    schemeSpecificPart+="?" + query;  }  return new URI(uri.getScheme(),schemeSpecificPart,uri.getFragment());}  }
class C{  public static String extractFullStackTrace(Throwable e){  StringWriter stringWriter=new StringWriter();  PrintWriter printWriter=new PrintWriter(stringWriter);  e.printStackTrace(printWriter);  return stringWriter.toString();}  }
class C{  @Benchmark public PrimitiveTypeDescriptor originalMethod(RawStringHolder holder){  return PrimitiveTypeDescriptor.fromRaw(holder.value);}  }
class C{  @Override public CloseableReference<Bitmap> decodeFromEncodedImage(EncodedImage encodedImage,Bitmap.Config bitmapConfig){  final BitmapFactory.Options options=getDecodeOptionsForStream(encodedImage,bitmapConfig);  boolean retryOnFail=options.inPreferredConfig != Bitmap.Config.ARGB_8888;  try {    return decodeStaticImageFromStream(encodedImage.getInputStream(),options);  } catch (  RuntimeException re) {    if (retryOnFail) {      return decodeFromEncodedImage(encodedImage,Bitmap.Config.ARGB_8888);    }    throw re;  }}  }
class C{  @RequestProcessing(value="/notifications/following-user",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,LoginCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showFollowingUserNotifications(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final JSONObject currentUser=userQueryService.getCurrentUser(request);  if (null == currentUser) {    response.sendError(HttpServletResponse.SC_FORBIDDEN);    return;  }  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get("skinDirName"));  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("/home/notifications/following-user.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  final String userId=currentUser.optString(Keys.OBJECT_ID);  String pageNumStr=request.getParameter("p");  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {    pageNumStr="1";  }  final int pageNum=Integer.valueOf(pageNumStr);  final int pageSize=Symphonys.getInt("followingUserNotificationsCnt");  final int windowSize=Symphonys.getInt("followingUserNotificationsWindowSize");  final JSONObject result=notificationQueryService.getFollowingUserNotifications(userId,pageNum,pageSize);  @SuppressWarnings("unchecked") final List<JSONObject> followingUserNotifications=(List<JSONObject>)result.get(Keys.RESULTS);  dataModel.put(Common.FOLLOWING_USER_NOTIFICATIONS,followingUserNotifications);  fillNotificationCount(userId,dataModel);  notificationMgmtService.makeRead(followingUserNotifications);  final int recordCnt=result.getInt(Pagination.PAGINATION_RECORD_COUNT);  final int pageCount=(int)Math.ceil((double)recordCnt / (double)pageSize);  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);  if (!pageNums.isEmpty()) {    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));  }  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.551 -0500",hash_original_method="DA20B42A9F145510C718334C692F5A76",hash_generated_method="E54D1418147C98C1F7126621FA4FD25B") public boolean isAlive(){  return !toExit;}  }
class C{  public static void testSix(){  for (int i=0; i < 3; i++) {    Bridge.desactivate();    LogManager manager=new LogManager(){    };    Logger logger1=manager.getLogger(Logger.GLOBAL_LOGGER_NAME);    Logger logger1b=manager.getLogger(Logger.GLOBAL_LOGGER_NAME);    assertNull(logger1);    assertNull(logger1b);    Logger global=new Bridge.CustomLogger(Logger.GLOBAL_LOGGER_NAME);    manager.addLogger(global);    Logger logger2=manager.getLogger(Logger.GLOBAL_LOGGER_NAME);    Logger logger2b=manager.getLogger(Logger.GLOBAL_LOGGER_NAME);    assertNotNull(logger2);    assertNotNull(logger2b);    assertEquals(logger2,global);    assertEquals(logger2b,global);    assertNull(manager.getLogger(""));    assertNull(manager.getLogger(""));    for (int j=0; j < 3; j++) {      Bridge.changeContext();      Logger expected=(System.getSecurityManager() == null ? global : null);      Logger logger3=manager.getLogger(Logger.GLOBAL_LOGGER_NAME);      Logger logger3b=manager.getLogger(Logger.GLOBAL_LOGGER_NAME);      assertEquals(expected,logger3);      assertEquals(expected,logger3b);      Logger global2=new Bridge.CustomLogger(Logger.GLOBAL_LOGGER_NAME);      manager.addLogger(global2);      Logger logger4=manager.getLogger(Logger.GLOBAL_LOGGER_NAME);      Logger logger4b=manager.getLogger(Logger.GLOBAL_LOGGER_NAME);      assertNotNull(logger4);      assertNotNull(logger4b);      expected=(System.getSecurityManager() == null ? global : global2);      ;      assertEquals(logger4,expected);      assertEquals(logger4b,expected);      Logger logger5=manager.getLogger("");      Logger logger5b=manager.getLogger("");      Logger expectedRoot=null;      assertEquals(logger5,expectedRoot);      assertEquals(logger5b,expectedRoot);    }  }}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public String executeTask(int AD_Task_ID){  MTask task=new MTask(Env.getCtx(),AD_Task_ID,null);  return task.execute();}  }
class C{  private void graph(){  nextToken("expected 'digraph'");  if (m_st.sval.equalsIgnoreCase("digraph")) {  } else {    System.out.println("expected 'digraph'");  }  nextToken("expected a Graph Name");  if (m_st.sval != null) {  } else {    System.out.println("expected a Graph Name");  }  nextToken("expected '{'");  if (m_st.ttype == '{') {    stmtList();  } else {    System.out.println("expected '{'");  }}  }
class C{  protected OMNode createOMElement() throws OMException {  OMElement node;  String elementName=parser.getLocalName();  if (lastNode == null) {    node=constructNode(null,elementName,true);    setSOAPEnvelope(node);  } else   if (lastNode.isComplete()) {    OMContainer parent=lastNode.getParent();    if (parent == document) {      lastNode=null;      node=constructNode(null,elementName,true);      setSOAPEnvelope(node);    } else {      node=constructNode((OMElement)parent,elementName,false);      ((OMNodeEx)lastNode).setNextOMSibling(node);      ((OMNodeEx)node).setPreviousOMSibling(lastNode);    }  } else {    OMContainerEx e=(OMContainerEx)lastNode;    node=constructNode((OMElement)lastNode,elementName,false);    e.setFirstChild(node);  }  if (isDebugEnabled) {    log.debug("Build the OMElement " + node.getLocalName() + " by the StaxSOAPModelBuilder");  }  return node;}  }
class C{  public JSONObject(Object bean){  this();  this.populateMap(bean);}  }
class C{  private Pair<PlotItem,VisualizationTask> key(PlotItem item,VisualizationTask task){  return new Pair<>(item,task);}  }
class C{  private void testUDM(HttpServletRequest req,UserDefinedMetrics udm,String db) throws Exception {  if (db == null || db.isEmpty())   throw new Exception("please provide valid database for test");  String[] dbs=db.split("\\|");  if (dbs == null || dbs.length < 2)   throw new Exception("please provide valid database for test");  DBInstanceInfo dbinfo=this.frameworkContext.getDbInfoManager().findDB(dbs[0],dbs[1]);  if (dbinfo == null)   throw new Exception("please provide valid database for test");  HashSet<String> metricsNameSet=new HashSet<String>();  for (  Metric m : udm.getMetrics()) {    metricsNameSet.add(m.getSourceName());  }  DBConnectionWrapper connWrapper=null;  Statement stmt=null;  ResultSet rs=null;  try {    String sql=udm.getSql();    MetricsGroup mg=udm.getMetricsGroup();    String udmType=udm.getUdmType();    String nameCol=udm.getNameCol();    String valCol=udm.getValueCol();    String keyCol=udm.getKeyCol();    boolean isBuiltin=false;    if (!"SQL".equals(udm.getSource())) {      sql=this.frameworkContext.getSqlTextForMetricsGroup(udm.getSource());      mg=this.frameworkContext.getMetricsDef().getGroupByName(udm.getSource());      if (mg != null) {        if (mg.getKeyColumn() != null)         udmType="key"; else         if (mg.isMultipleMetricsPerRow())         udmType="column"; else         udmType="row";        nameCol=mg.getMetricNameColumn();        valCol=mg.getMetricValueColumn();        keyCol=mg.getKeyColumn();      }      isBuiltin=true;    }    if (sql == null || sql.isEmpty()) {      throw new Exception("please provide valid SQL");    }    connWrapper=WebAppUtil.getDBConnection(req,this.frameworkContext,dbinfo);    if (connWrapper == null) {      throw new Exception("failed to connect to target db (" + dbinfo + ")");    }    stmt=connWrapper.getConnection().createStatement();    rs=stmt.executeQuery(sql);    if (rs != null) {      ResultSetMetaData meta=rs.getMetaData();      int cols=meta.getColumnCount();      Map<String,Integer> colMap=new HashMap<String,Integer>(cols);      for (int i=1; i <= cols; i++)       colMap.put(meta.getColumnName(i).toUpperCase(),meta.getColumnType(i));      if ("row".equals(udmType)) {        if (!colMap.containsKey(udm.getNameCol().toUpperCase()))         throw new Exception("Failed to find name column from SQL result: " + udm.getNameCol() + ", returned: "+ colMap);        if (!colMap.containsKey(udm.getValueCol().toUpperCase()))         throw new Exception("Failed to find value column from SQL result: " + udm.getValueCol() + ", returned: "+ colMap);      } else {        if ("key".equals(udmType)) {          if (!colMap.containsKey(keyCol.toUpperCase()))           throw new Exception("Failed to find key column from SQL result: " + udm.getKeyCol());        }        for (        Metric m : udm.getMetrics()) {          if (!colMap.containsKey(m.getSourceName().toUpperCase()))           throw new Exception("Failed to find metric column from SQL result: " + m.getSourceName());        }      }    } else {      throw new Exception("Failed to test SQL.");    }    while (rs != null && rs.next()) {      if ("row".equals(udmType)) {        String name=rs.getString(nameCol);        if (!metricsNameSet.contains(name))         continue;        String val=rs.getString(valCol);        try {          BigDecimal d=new BigDecimal(val == null ? "0" : val);        } catch (        Exception ex) {          throw new Exception("Expect numeric value for metric from SQL result, got " + val);        }      } else {        for (        Metric m : udm.getMetrics()) {          String val=rs.getString(m.getSourceName());          try {            BigDecimal d=new BigDecimal(val == null ? "0" : val);          } catch (          Exception ex) {            throw new Exception("Expect numeric value metric value from SQL result for column " + m.getShortName() + ", got "+ val);          }        }      }    }  }  finally {    DBUtils.close(rs);    DBUtils.close(stmt);    WebAppUtil.closeDBConnection(req,connWrapper,true,false);  }}  }
class C{  public byte[] sign(byte[] hash){  ECDSASigner signer=new ECDSASigner(new HMacDSAKCalculator(new SHA256Digest()));  signer.init(true,new ECPrivateKeyParameters(priv,domain));  BigInteger[] signature=signer.generateSignature(hash);  ByteArrayOutputStream baos=new ByteArrayOutputStream();  try {    DERSequenceGenerator seq=new DERSequenceGenerator(baos);    seq.addObject(new ASN1Integer(signature[0]));    seq.addObject(new ASN1Integer(toCanonicalS(signature[1])));    seq.close();    return baos.toByteArray();  } catch (  IOException e) {  }  return null;}  }
class C{  public UpdateExport(){  super();}  }
class C{  @Override public void clearSelection(){  selectedPhotos.clear();}  }
class C{  protected boolean testPort(String protocol,String server,int port,String file){  System.out.println("testPort[" + protocol + ","+ server+ ", "+ port+ ", "+ file+ "]");  URL url=null;  try {    url=new URL(protocol,server,port,file);  } catch (  MalformedURLException ex) {    log.severe("No URL for Protocol=" + protocol + ", Server="+ server+ ": "+ ex.getMessage());    return false;  }  try {    URLConnection c=url.openConnection();    Object o=c.getContent();    if (o == null)     log.warning("In use=" + url); else     log.warning("In Use=" + url);  } catch (  Exception ex) {    log.fine("Not used=" + url);    return false;  }  return true;}  }
class C{  @Override public void updateClob(int columnIndex,Clob x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateClob(" + columnIndex + ", x);");    }    checkClosed();    Value v;    if (x == null) {      v=ValueNull.INSTANCE;    } else {      v=conn.createClob(x.getCharacterStream(),-1);    }    update(columnIndex,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    int length=this.length();    writer.write('[');    if (length == 1) {      JSONObject.writeValue(writer,this.myArrayList.get(0),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      for (int i=0; i < length; i+=1) {        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        JSONObject.indent(writer,newindent);        JSONObject.writeValue(writer,this.myArrayList.get(i),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      JSONObject.indent(writer,indent);    }    writer.write(']');    return writer;  } catch (  IOException e) {    throw new JSONException(e);  }}  }
class C{  public static void branchWithCommit(GitRepository repository,String name,String file){  GitScenarios.branchWithCommit(repository,name,file,"branch content",true);}  }
class C{  public static boolean isNumbersOrPunctuation(String token){  int len=token.length();  for (int i=0; i < len; ++i) {    char c=token.charAt(i);    if (!(Character.isDigit(c) || Characters.isPunctuation(c))) {      return false;    }  }  return true;}  }
class C{  protected boolean canShowBalloon(KMLAbstractFeature feature){  BalloonController balloonController=this.getBalloonController();  return balloonController != null && balloonController.canShowBalloon(feature);}  }
class C{  public void testBug68916() throws Exception {  createProcedure("testBug68916_proc","() BEGIN SELECT 1; SELECT 2; SELECT 3; END");  createTable("testBug68916_tbl","(fld1 INT NOT NULL AUTO_INCREMENT, fld2 INT, PRIMARY KEY(fld1))");  subTestBug68916ForStandardConnection();  subTestBug68916ForHoldResultsOpenOverStatementClose();  subTestBug68916ForDontTrackOpenResources();  subTestBug68916ForAllowMultiQueries();  subTestBug68916ForConcurrency();}  }
class C{  public void testContractions() throws IOException {  Analyzer a=new ItalianAnalyzer();  assertAnalyzesTo(a,"dell'Italia",new String[]{"ital"});  assertAnalyzesTo(a,"l'Italiano",new String[]{"italian"});  a.close();}  }
class C{  public Query until(final String until){  setUntil(until);  return this;}  }
class C{  static String operatorName(ExpressionTree expression){  JCTree.Tag tag=((JCTree)expression).getTag();  if (tag == JCTree.Tag.ASSIGN) {    return "=";  }  boolean assignOp=expression instanceof CompoundAssignmentTree;  if (assignOp) {    tag=tag.noAssignOp();  }  String name=new Pretty(null,true).operatorName(tag);  return assignOp ? name + "=" : name;}  }
class C{  public void transactionErrorEvent(SIPTransactionErrorEvent transactionErrorEvent){  SIPTransaction transaction=(SIPTransaction)transactionErrorEvent.getSource();  if (transactionErrorEvent.getErrorID() == SIPTransactionErrorEvent.TRANSPORT_ERROR) {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logDebug("TransportError occured on " + transaction);    }    Object errorObject=transactionErrorEvent.getSource();    Timeout timeout=Timeout.TRANSACTION;    TimeoutEvent ev=null;    if (errorObject instanceof SIPServerTransaction) {      ev=new TimeoutEvent(this,(ServerTransaction)errorObject,timeout);    } else {      SIPClientTransaction clientTx=(SIPClientTransaction)errorObject;      Hop hop=clientTx.getNextHop();      if (sipStack.getRouter() instanceof RouterExt) {        ((RouterExt)sipStack.getRouter()).transactionTimeout(hop);      }      ev=new TimeoutEvent(this,(ClientTransaction)errorObject,timeout);    }    this.handleEvent(ev,(SIPTransaction)errorObject);  } else   if (transactionErrorEvent.getErrorID() == SIPTransactionErrorEvent.TIMEOUT_ERROR) {    Object errorObject=transactionErrorEvent.getSource();    Timeout timeout=Timeout.TRANSACTION;    TimeoutEvent ev=null;    if (errorObject instanceof SIPServerTransaction) {      ev=new TimeoutEvent(this,(ServerTransaction)errorObject,timeout);    } else {      SIPClientTransaction clientTx=(SIPClientTransaction)errorObject;      Hop hop=clientTx.getNextHop();      if (sipStack.getRouter() instanceof RouterExt) {        ((RouterExt)sipStack.getRouter()).transactionTimeout(hop);      }      ev=new TimeoutEvent(this,(ClientTransaction)errorObject,timeout);    }    this.handleEvent(ev,(SIPTransaction)errorObject);  } else   if (transactionErrorEvent.getErrorID() == SIPTransactionErrorEvent.TIMEOUT_RETRANSMIT) {    Object errorObject=transactionErrorEvent.getSource();    Transaction tx=(Transaction)errorObject;    if (tx.getDialog() != null)     InternalErrorHandler.handleException("Unexpected event !",this.sipStack.getStackLogger());    Timeout timeout=Timeout.RETRANSMIT;    TimeoutEvent ev=null;    if (errorObject instanceof SIPServerTransaction) {      ev=new TimeoutEvent(this,(ServerTransaction)errorObject,timeout);    } else {      ev=new TimeoutEvent(this,(ClientTransaction)errorObject,timeout);    }    this.handleEvent(ev,(SIPTransaction)errorObject);  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();}throw new IllegalStateException();}  }
class C{  public synchronized void addDatabaseObject(Session session,DbObject obj){  int id=obj.getId();  if (id > 0 && !starting) {    checkWritingAllowed();  }  HashMap<String,DbObject> map=getMap(obj.getType());  if (obj.getType() == DbObject.USER) {    User user=(User)obj;    if (user.isAdmin() && systemUser.getName().equals(SYSTEM_USER_NAME)) {      systemUser.rename(user.getName());    }  }  String name=obj.getName();  if (SysProperties.CHECK && map.get(name) != null) {    DbException.throwInternalError("object already exists");  }  lockMeta(session);  addMeta(session,obj);  map.put(name,obj);}  }
class C{  private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){  try {    PackageManager pm=context.getPackageManager();    List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);    if (handlers == null || handlers.size() == 0) {      return false;    }    for (    ResolveInfo resolveInfo : handlers) {      IntentFilter filter=resolveInfo.filter;      if (filter == null)       continue;      if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;      if (resolveInfo.activityInfo == null)       continue;      return true;    }  } catch (  RuntimeException e) {    Log.e(TAG,"Runtime exception while getting specialized handlers");  }  return false;}  }
class C{  public static void resetThreadsBeginN_FFT(){  THREADS_BEGIN_N_1D_FFT_2THREADS=8192;  THREADS_BEGIN_N_1D_FFT_4THREADS=65536;}  }
class C{  static String convertToCurl(boolean isGet,JSONObject jsonObject,String url,HeaderPair... headers){  StringBuilder sb=new StringBuilder();  sb.append("curl ");  if (isGet) {    sb.append("-X GET ");  } else {    sb.append("-X POST ");  }  if (headers != null) {    for (int index=0; index < headers.length; ++index) {      if (IsUnixOS) {        sb.append("-H '");      } else {        sb.append("-H \"");      }      sb.append(headers[index].getName());      sb.append(": ");      sb.append(headers[index].getValue());      if (IsUnixOS) {        sb.append("' ");      } else {        sb.append("\" ");      }    }  }  if (jsonObject != null) {    if (IsUnixOS) {      sb.append("-d '");    } else {      sb.append("-d \"");    }    sb.append(jsonObject.toString());    if (IsUnixOS) {      sb.append("' ");    } else {      sb.append("\" ");    }  }  sb.append(url.replace("https","http"));  return sb.toString();}  }
class C{  public boolean isExported(){  EObject _eContainer=this.eContainer();  return (_eContainer instanceof ExportDeclaration);}  }
class C{  public DrawerBuilder withTranslucentStatusBar(boolean translucentStatusBar){  this.mTranslucentStatusBar=translucentStatusBar;  if (!translucentStatusBar) {    this.mTranslucentStatusBarProgrammatically=false;  }  return this;}  }
class C{  public static void clearMarkers(OtrosJTextWithRulerScrollPane<? extends JTextComponent> wrapTextComponent){  wrapTextComponent.getMarkerModel().clear();}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public void invalidate(){  valid=false;}  }
class C{  public String toString(){  String name=getLocalName();  if (name == null) {    return "*";  }  return name;}  }
class C{  public void displayNotification(String code){  String notification=null;  try {    JSONObject inputData=new JSONObject(code);    if (inputData.get(resources.getString(R.string.intent_extra_notification)).toString() != null && !inputData.get(resources.getString(R.string.intent_extra_notification)).toString().isEmpty()) {      notification=inputData.get(resources.getString(R.string.intent_extra_notification)).toString();    }    resultBuilder.build(code);    if (notification != null) {      Intent intent=new Intent(context,AlertActivity.class);      intent.putExtra(resources.getString(R.string.intent_extra_message),notification);      intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);      context.startActivity(intent);    }  } catch (  JSONException e) {    Log.e(TAG,"Invalid JSON format." + e);  }}  }
class C{  public Tasks<VolumeRestRep> resynchronizeFullCopy(URI copyId){  return postTasks(getIdUrl() + "/resynchronize",copyId);}  }
class C{  public void filledSquare(double x,double y,double r){  if (r < 0)   throw new IllegalArgumentException("square side length can't be negative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * r);  double hs=factorY(2 * r);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.fill(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public void test_rangeQuery_staticPartitions_unbounded_emptyIndex_2partitions() throws IOException {  final String name="testIndex";  final IndexMetadata metadata=new IndexMetadata(name,UUID.randomUUID());  fed.registerIndex(metadata,new byte[][]{new byte[]{},new byte[]{5}},new UUID[]{dataService0.getServiceUUID(),dataService1.getServiceUUID()});  final IIndex ndx=fed.getIndex(name,ITx.UNISOLATED);{    final PartitionedTupleIterator itr=(PartitionedTupleIterator)ndx.rangeIterator(null,null);    assertEquals("nvisited",0,itr.getVisitedCount());    assertEquals("npartitions",0,itr.getPartitionCount());    assertFalse("hasNext",itr.hasNext());    assertEquals("nvisited",0,itr.getVisitedCount());    assertEquals("npartitions",2,itr.getPartitionCount());  }}  }
class C{  protected void processAllocateResponse(GenericResponse response) throws SQLException {synchronized (getSynchronizationObject()) {    setHandle(response.getObjectHandle());    setAllRowsFetched(false);    switchState(StatementState.ALLOCATED);    setType(StatementType.NONE);  }}  }
class C{  public Float evaluate(float fraction,Number startValue,Number endValue){  float startFloat=startValue.floatValue();  return startFloat + fraction * (endValue.floatValue() - startFloat);}  }
class C{  public void testBug68098() throws Exception {  String[] testStepDescription=new String[]{"MySQL MetaData","I__S MetaData"};  Connection connUseIS=getConnectionWithProps("useInformationSchema=true");  Connection[] testConnections=new Connection[]{this.conn,connUseIS};  String[] expectedIndexesOrder=new String[]{"index_1","index_1","index_3","PRIMARY","index_2","index_2","index_4"};  this.stmt.execute("DROP TABLE IF EXISTS testBug68098");  createTable("testBug68098","(column_1 INT NOT NULL, column_2 INT NOT NULL, column_3 INT NOT NULL, PRIMARY KEY (column_1))");  this.stmt.execute("CREATE INDEX index_4 ON testBug68098 (column_2)");  this.stmt.execute("CREATE UNIQUE INDEX index_3 ON testBug68098 (column_3)");  this.stmt.execute("CREATE INDEX index_2 ON testBug68098 (column_2, column_1)");  this.stmt.execute("CREATE UNIQUE INDEX index_1 ON testBug68098 (column_3, column_2)");  for (int i=0; i < testStepDescription.length; i++) {    DatabaseMetaData testDbMetaData=testConnections[i].getMetaData();    this.rs=testDbMetaData.getIndexInfo(null,null,"testBug68098",false,false);    int ind=0;    while (this.rs.next()) {      assertEquals(testStepDescription[i] + ", sort order is wrong",expectedIndexesOrder[ind++],this.rs.getString("INDEX_NAME"));    }    this.rs.close();  }  connUseIS.close();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.CONCRETE_METHOD_DECLARATION___TYPE_1:    return TYPE_1_EDEFAULT == null ? type_1 != null : !TYPE_1_EDEFAULT.equals(type_1);case UmplePackage.CONCRETE_METHOD_DECLARATION___METHOD_DECLARATOR_1:  return methodDeclarator_1 != null && !methodDeclarator_1.isEmpty();case UmplePackage.CONCRETE_METHOD_DECLARATION___ANONYMOUS_CONCRETE_METHOD_DECLARATION_11:return anonymous_concreteMethodDeclaration_1_1 != null && !anonymous_concreteMethodDeclaration_1_1.isEmpty();case UmplePackage.CONCRETE_METHOD_DECLARATION___METHOD_BODY_1:return methodBody_1 != null && !methodBody_1.isEmpty();case UmplePackage.CONCRETE_METHOD_DECLARATION___ANONYMOUS_CONCRETE_METHOD_DECLARATION_21:return anonymous_concreteMethodDeclaration_2_1 != null && !anonymous_concreteMethodDeclaration_2_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @Inline @Uninterruptible public static void scanBootImage(TraceLocal trace){  Address mapStart=BootRecord.the_boot_record.bootImageRMapStart;  Address mapEnd=BootRecord.the_boot_record.bootImageRMapEnd;  Address imageStart=BootRecord.the_boot_record.bootImageDataStart;  CollectorContext collector=RVMThread.getCurrentThread().getCollectorContext();  int stride=collector.parallelWorkerCount() << LOG_CHUNK_BYTES;  int start=collector.parallelWorkerOrdinal() << LOG_CHUNK_BYTES;  Address cursor=mapStart.plus(start);  roots=0;  refs=0;  while (cursor.LT(mapEnd)) {    processChunk(cursor,imageStart,mapStart,mapEnd,trace);    cursor=cursor.plus(stride);  }  if (DEBUG) {    Log.write("<boot image");    Log.write(" roots: ");    Log.write(roots);    Log.write(" refs: ");    Log.write(refs);    Log.write(">");  }}  }
class C{  private boolean isFrameObject(String outputName){  Data data=getData(outputName);  return (data instanceof FrameObject);}  }
class C{  public void advanceSeasonWinStreaks(){  yearStartLongestWinStreak=longestWinStreak;  for (  Team t : teamList) {    t.yearStartWinStreak=t.winStreak;  }}  }
class C{  @GuardedBy("mLock") private void updateFileCacheSizeLimit(){  boolean isAvailableSpaceLowerThanHighLimit=mStatFsHelper.testLowDiskSpace(StatFsHelper.StorageType.INTERNAL,mDefaultCacheSizeLimit - mCacheStats.getSize());  if (isAvailableSpaceLowerThanHighLimit) {    mCacheSizeLimit=mLowDiskSpaceCacheSizeLimit;  } else {    mCacheSizeLimit=mDefaultCacheSizeLimit;  }}  }
class C{  @Override void removeHiddenForms(final int startPage,final int endPage){  FormObject formObject;  Object comp;  for (int page=startPage; page < endPage; page++) {    if (formsOrdered[page] != null) {      for (      final FormObject o : formsOrdered[page]) {        if (o != null) {          formObject=o;          comp=formObject.getGUIComponent();          if (comp != null) {            panel.remove((Component)comp);          }        }      }    }  }}  }
class C{  void handleRealm(ParsedDirective pd){  m_realms.add(pd.getValue());}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public int[] readIntArray(final int items,final JBBPByteOrder byteOrder) throws IOException {  int pos=0;  if (items < 0) {    int[] buffer=new int[INITIAL_ARRAY_BUFFER_SIZE];    while (hasAvailableData()) {      final long next=readInt(byteOrder);      if (buffer.length == pos) {        final int[] newbuffer=new int[buffer.length << 1];        System.arraycopy(buffer,0,newbuffer,0,buffer.length);        buffer=newbuffer;      }      buffer[pos++]=(int)next;    }    if (buffer.length == pos) {      return buffer;    }    final int[] result=new int[pos];    System.arraycopy(buffer,0,result,0,pos);    return result;  } else {    final int[] buffer=new int[items];    for (int i=0; i < items; i++) {      buffer[i]=readInt(byteOrder);    }    return buffer;  }}  }
class C{  public static Bitmap loadOrientedBitmapWithBackouts(Context context,Uri sourceUri,int sampleSize){  Bitmap bitmap=loadBitmapWithBackouts(context,sourceUri,sampleSize);  if (bitmap == null) {    return null;  }  int orientation=getMetadataOrientation(context,sourceUri);  bitmap=orientBitmap(bitmap,orientation);  return bitmap;}  }
class C{  public void characters(org.w3c.dom.Node node) throws org.xml.sax.SAXException {  if (m_state != null) {    m_state.setCurrentNode(node);  }  String data=node.getNodeValue();  if (data != null) {    this.characters(data);  }}  }
class C{  public sun.net.ftp.FtpClient useKerberos() throws sun.net.ftp.FtpProtocolException, IOException {  return this;}  }
class C{  @Override public boolean execute(String sql) throws SQLException {  try {    debugCodeCall("execute",sql);    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void killProcess(){  try {    Runtime.getRuntime().removeShutdownHook(processKillHook);  } catch (  Exception e) {  }  if (process != null) {    try {      process.getOutputStream().close();      process.getInputStream().close();      process.getErrorStream().close();    } catch (    Exception t) {      logger.error("Failed to close process stream: " + t.toString());    }    process.destroy();  }  process=null;  if (clientRunningOnThread != null && clientRunningOnThread.isAlive()) {    clientRunningOnThread.interrupt();  }  clientRunningOnThread=null;  if (output_printer != null && output_printer.isAlive())   output_printer.interrupt();  output_printer=null;  if (error_printer != null && error_printer.isAlive())   error_printer.interrupt();  error_printer=null;  if (message_handler != null && message_handler.isAlive()) {    message_handler.interrupt();  }  message_handler=null;}  }
class C{  Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    final int length=this.length();    Iterator<String> keys=this.keys();    writer.write('{');    if (length == 1) {      Object key=keys.next();      writer.write(quote(key.toString()));      writer.write(':');      if (indentFactor > 0) {        writer.write(' ');      }      writeValue(writer,this.map.get(key),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      while (keys.hasNext()) {        Object key=keys.next();        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        indent(writer,newindent);        writer.write(quote(key.toString()));        writer.write(':');        if (indentFactor > 0) {          writer.write(' ');        }        writeValue(writer,this.map.get(key),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      indent(writer,indent);    }    writer.write('}');    return writer;  } catch (  IOException exception) {    throw new JSONException(exception);  }}  }
class C{  public AttributeToggler(DrawingEditor editor,AttributeKey<T> key,T value1,T value2){  this(editor,key,value1,value2,null);}  }
class C{  private ILaunchConfiguration turnOnOrOffSuperDevMode(ILaunchConfiguration config,boolean isGwtSuperDevModeEnabled) throws CoreException {  ILaunchConfigurationWorkingCopy workingCopy=config.getWorkingCopy();  GWTLaunchConfigurationWorkingCopy.setSuperDevModeEnabled(workingCopy,isGwtSuperDevModeEnabled);  SuperDevModeArgumentProcessor sdmArgsProcessor=new SuperDevModeArgumentProcessor();  LaunchConfigurationProcessorUtilities.updateViaProcessor(sdmArgsProcessor,workingCopy);  workingCopy.doSave();  return workingCopy;}  }
class C{  public <B>Source<B> asWithoutShrinking(Function<T,B> conversion){  return new Source<>(prngToValue.andThen(conversion),noShrink(),defaultAsString());}  }
class C{  private void insertPatternInTable(StepPattern pattern,ElemTemplate template){  String target=pattern.getTargetString();  if (null != target) {    String pstring=template.getMatch().getPatternString();    TemplateSubPatternAssociation association=new TemplateSubPatternAssociation(template,pattern,pstring);    boolean isWildCard=association.isWild();    TemplateSubPatternAssociation head=isWildCard ? m_wildCardPatterns : getHead(target);    if (null == head) {      if (isWildCard)       m_wildCardPatterns=association; else       putHead(target,association);    } else {      insertAssociationIntoList(head,association,false);    }  }}  }
class C{  private void notifyRegistrationToApi(){  if (mCapabilityApi != null) {    mCapabilityApi.notifyRegistration();  }  if (mChatApi != null) {    mChatApi.notifyRegistration();  }  if (mContactApi != null) {    mContactApi.notifyRegistration();  }  if (mFtApi != null) {    mFtApi.notifyRegistration();  }  if (mVshApi != null) {    mVshApi.notifyRegistration();  }  if (mIshApi != null) {    mIshApi.notifyRegistration();  }  if (mGshApi != null) {    mGshApi.notifyRegistration();  }  if (mMmSessionApi != null) {    mMmSessionApi.notifyRegistration();  }}  }
class C{  public InvokeSynchronizerException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public ST(String template){  this(STGroup.defaultGroup,template);}  }
class C{  public static String meterToString(OFInstructionMeter inst,Logger log){  return Long.toString(inst.getMeterId());}  }
class C{  @Override public void resolve(AbsoluteTableIdentifier absoluteTableIdentifier){}  }
class C{  public boolean moveObject(final Object obj,final int fromX,final int fromY,final int fromZ,final int toX,final int toY,final int toZ){  boolean result=removeObjectAtLocation(obj,fromX,fromY,fromZ);  addObjectToLocation(obj,toX,toY,toZ);  return result;}  }
class C{  public void testBehaviorNonPersian() throws Exception {  Analyzer a=new PersianAnalyzer();  assertAnalyzesTo(a,"English test.",new String[]{"english","test"});  a.close();}  }
class C{  public void dispatchAsComment(org.xml.sax.ext.LexicalHandler lh) throws org.xml.sax.SAXException {}  }
class C{  @Override public void initializeForMeasureCompilation(){  counter1=0;  counter2=0;}  }
class C{  public InstrumentHeader validateAndConstructChequeDDInstrument(final PaymentInfoChequeDD paytInfoChequeDD){  String invalidChequeDDPaytMsg="";  if (paytInfoChequeDD.getInstrumentAmount() == null || paytInfoChequeDD.getInstrumentAmount().compareTo(BigDecimal.ZERO) <= 0)   invalidChequeDDPaytMsg+="Invalid cheque/DD Instrument Amount[" + paytInfoChequeDD.getInstrumentAmount() + "] \n";  if (paytInfoChequeDD.getInstrumentNumber() == null || CollectionConstants.BLANK.equals(paytInfoChequeDD.getInstrumentNumber()) || !MoneyUtils.isInteger(paytInfoChequeDD.getInstrumentNumber()) || paytInfoChequeDD.getInstrumentNumber().length() != 6)   invalidChequeDDPaytMsg+="Invalid Cheque/DD Instrument Number[" + paytInfoChequeDD.getInstrumentNumber() + "]. \n";  if (paytInfoChequeDD.getInstrumentDate() == null)   invalidChequeDDPaytMsg+="Missing Cheque/DD Transaction Date \n";  if (new Date().compareTo(paytInfoChequeDD.getInstrumentDate()) == -1)   invalidChequeDDPaytMsg+="Cheque/DD Transaction Date[" + paytInfoChequeDD.getInstrumentDate() + "] cannot be a future date \n";  Bank bank=null;  if (paytInfoChequeDD.getBankId() != null) {    bank=bankDAO.findById(paytInfoChequeDD.getBankId().intValue(),false);    if (bank == null)     invalidChequeDDPaytMsg+="No bank present for bank id [" + paytInfoChequeDD.getBankId() + "] \n";  }  if (!CollectionConstants.BLANK.equals(invalidChequeDDPaytMsg))   throw new ApplicationRuntimeException(invalidChequeDDPaytMsg);  final InstrumentHeader instrHeaderChequeDD=new InstrumentHeader();  instrHeaderChequeDD.setIsPayCheque(CollectionConstants.ZERO_INT);  instrHeaderChequeDD.setInstrumentAmount(paytInfoChequeDD.getInstrumentAmount());  instrHeaderChequeDD.setInstrumentType(financialsUtil.getInstrumentTypeByType(paytInfoChequeDD.getInstrumentType().toString()));  instrHeaderChequeDD.setInstrumentNumber(String.valueOf(paytInfoChequeDD.getInstrumentNumber()));  instrHeaderChequeDD.setBankBranchName(paytInfoChequeDD.getBranchName());  instrHeaderChequeDD.setInstrumentDate(paytInfoChequeDD.getInstrumentDate());  instrHeaderChequeDD.setBankId(bank);  return instrHeaderChequeDD;}  }
class C{  ProblemBuilder(){  super();}  }
class C{  private void reorderList(ListNode head){  if (head == null || head.next == null)   return;  ListNode mid=head;  ListNode tail=head;  while (tail != null && tail.next != null) {    mid=mid.next;    tail=tail.next.next;  }  ListNode cur=mid.next;  mid.next=null;  while (cur != null) {    ListNode temp=cur.next;    cur.next=mid.next;    mid.next=cur;    cur=temp;  }  ListNode left=head;  ListNode right=mid.next;  while (right != null) {    mid.next=right.next;    right.next=left.next;    left.next=right;    left=right.next;    right=mid.next;  }}  }
class C{  private void onFirstLaunch(){  Utils.registerReferralValuesInAnalytics();  MixpanelAnalytics.getInstance().onFirstLaunch();  SharedPreferenceHelper.set(R.string.pref_first_launch,false);}  }
class C{  @SuppressWarnings("deprecation") public void startHardwareClock(Date now){  if (DEBUG_SHOW_PUBLIC_CALLS && log.isDebugEnabled()) {    log.debug("startHardwareClock: " + now);  }  if (!internalClock.getInternalMaster() && internalClock.getMasterName().equals(getHardwareClockName())) {  }  issueClockSet(now.getHours(),now.getMinutes(),now.getSeconds());  issueClockStart();}  }
class C{  void balance(Label lbl,int depth){  for (Instruction inst=lbl; inst != null; inst=inst.next) {    depth+=inst.balance();    if (depth < 0) {      throw new CompilerError("stack under flow: " + inst.toString() + " = "+ depth);    }    if (depth > maxdepth) {      maxdepth=depth;    }switch (inst.opc) {case opc_label:      lbl=(Label)inst;    if (inst.pc == REACHED) {      if (lbl.depth != depth) {        throw new CompilerError("stack depth error " + depth + "/"+ lbl.depth+ ": "+ inst.toString());      }      return;    }  lbl.pc=REACHED;lbl.depth=depth;break;case opc_ifeq:case opc_ifne:case opc_ifgt:case opc_ifge:case opc_iflt:case opc_ifle:case opc_if_icmpeq:case opc_if_icmpne:case opc_if_icmpgt:case opc_if_icmpge:case opc_if_icmplt:case opc_if_icmple:case opc_if_acmpeq:case opc_if_acmpne:case opc_ifnull:case opc_ifnonnull:balance((Label)inst.value,depth);break;case opc_goto:balance((Label)inst.value,depth);return;case opc_jsr:balance((Label)inst.value,depth + 1);break;case opc_ret:case opc_return:case opc_ireturn:case opc_lreturn:case opc_freturn:case opc_dreturn:case opc_areturn:case opc_athrow:return;case opc_iload:case opc_fload:case opc_aload:case opc_istore:case opc_fstore:case opc_astore:{int v=((inst.value instanceof Number) ? ((Number)inst.value).intValue() : ((LocalVariable)inst.value).slot) + 1;if (v > maxvar) maxvar=v;break;}case opc_lload:case opc_dload:case opc_lstore:case opc_dstore:{int v=((inst.value instanceof Number) ? ((Number)inst.value).intValue() : ((LocalVariable)inst.value).slot) + 2;if (v > maxvar) maxvar=v;break;}case opc_iinc:{int v=((int[])inst.value)[0] + 1;if (v > maxvar) maxvar=v + 1;break;}case opc_tableswitch:case opc_lookupswitch:{SwitchData sw=(SwitchData)inst.value;balance(sw.defaultLabel,depth);for (Enumeration<Label> e=sw.tab.elements(); e.hasMoreElements(); ) {balance(e.nextElement(),depth);}return;}case opc_try:{TryData td=(TryData)inst.value;for (Enumeration<CatchData> e=td.catches.elements(); e.hasMoreElements(); ) {CatchData cd=e.nextElement();balance(cd.getLabel(),depth + 1);}break;}}}}  }
class C{  public static String formatObj2Json2Byte2Hex(Object obj){  String json=JacksonUtil.writeValueAsString(obj);  return formatJson2Byte2Hex(json);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:39.199 -0500",hash_original_method="D3AE998E3454F9C657DFB347B01A5D33",hash_generated_method="981860DE70F16540F0E330413D24ECFA") public void close(){  mBindArgs=null;  if (nHandle == 0 || !mDatabase.isOpen()) {    return;  }  releaseReference();}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof X509Name || obj instanceof ASN1Sequence)) {    return false;  }  ASN1Primitive derO=((ASN1Encodable)obj).toASN1Primitive();  if (this.toASN1Primitive().equals(derO)) {    return true;  }  X509Name other;  try {    other=X509Name.getInstance(obj);  } catch (  IllegalArgumentException e) {    return false;  }  int orderingSize=ordering.size();  if (orderingSize != other.ordering.size()) {    return false;  }  boolean[] indexes=new boolean[orderingSize];  int start, end, delta;  if (ordering.elementAt(0).equals(other.ordering.elementAt(0))) {    start=0;    end=orderingSize;    delta=1;  } else {    start=orderingSize - 1;    end=-1;    delta=-1;  }  for (int i=start; i != end; i+=delta) {    boolean found=false;    ASN1ObjectIdentifier oid=(ASN1ObjectIdentifier)ordering.elementAt(i);    String value=(String)values.elementAt(i);    for (int j=0; j < orderingSize; j++) {      if (indexes[j]) {        continue;      }      ASN1ObjectIdentifier oOid=(ASN1ObjectIdentifier)other.ordering.elementAt(j);      if (oid.equals(oOid)) {        String oValue=(String)other.values.elementAt(j);        if (equivalentStrings(value,oValue)) {          indexes[j]=true;          found=true;          break;        }      }    }    if (!found) {      return false;    }  }  return true;}  }
class C{  public void paintDesktopPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public XMLApiResult doDeleteShare(StorageSystem system,StorageHADomain moverOrVdm,String shareName,String mountPoint,boolean deleteMount,FileDeviceInputOutput args){  _log.info("CommApi: delete share {}",shareName);  XMLApiResult result=new XMLApiResult();  result.setCommandSuccess();  Map<String,Object> reqAttributeMap=new ConcurrentHashMap<String,Object>();  try {    updateAttributes(reqAttributeMap,system);    if (null == moverOrVdm) {      result.setCommandFailed();      result.setMessage("Export failed:  data mover or VDM not found.");      return result;    }    String moverOrVdmName=moverOrVdm.getAdapterName();    String isVdm="false";    String moverOrVdmId=moverOrVdm.getName();    reqAttributeMap.put(VNXFileConstants.MOVER_ID,moverOrVdmId);    reqAttributeMap.put(VNXFileConstants.ISVDM,isVdm);    if (moverOrVdm.getVirtual() != null && moverOrVdm.getVirtual() == true) {      isVdm="true";    }    _log.info("Using Mover {} to Delete share {}",moverOrVdmId + ":" + moverOrVdmName,shareName);    updateAttributes(reqAttributeMap,system);    reqAttributeMap.put(VNXFileConstants.MOVER_ID,moverOrVdmId);    reqAttributeMap.put(VNXFileConstants.DATAMOVER_NAME,moverOrVdmName);    reqAttributeMap.put(VNXFileConstants.ISVDM,isVdm);    _provExecutor.setKeyMap(reqAttributeMap);    _provExecutor.execute((Namespace)_provNamespaces.getNsList().get(PROV_CIFS_SERVERS));    List<VNXCifsServer> cifsServers=(List<VNXCifsServer>)_provExecutor.getKeyMap().get(VNXFileConstants.CIFS_SERVERS);    for (    VNXCifsServer cifsServer : cifsServers) {      _log.info("CIFServer:" + cifsServer.toString());    }    if (cifsServers == null || cifsServers.isEmpty()) {      _log.info("No CIFS Servers retrieved for mover {} with id {}",moverOrVdmName,moverOrVdmId);    }    String netBios=null;    if (cifsServers != null && !cifsServers.isEmpty() && moverOrVdm.getVirtual()) {      netBios=cifsServers.get(0).getName();    }    sshApi.setConnParams(system.getIpAddress(),system.getUsername(),system.getPassword());    String data=sshApi.formatDeleteShareCmd(moverOrVdmName,shareName,netBios);    _log.info("doDeleteShare command {}",data);    result=sshApi.executeSshRetry(VNXFileSshApi.SERVER_EXPORT_CMD,data);    FileShare fileShare=null;    if (!args.getFileOperation()) {      Snapshot snapshot=_dbClient.queryObject(Snapshot.class,args.getSnapshotId());      fileShare=_dbClient.queryObject(FileShare.class,snapshot.getParent().getURI());    } else {      fileShare=_dbClient.queryObject(FileShare.class,args.getFileObjId());    }    if (result.isCommandSuccess() && getVNXFSDependencies(fileShare,false) <= 1) {      data=sshApi.formatUnMountCmd(moverOrVdmName,mountPoint,"CIFS");      _log.info("Unmount filesystem command {}",data);      result=sshApi.executeSshRetry(VNXFileSshApi.SERVER_UNMOUNT_CMD,data);    }    sshApi.clearConnParams();  } catch (  Exception e) {    throw new VNXException("Failure",e);  }  return result;}  }
class C{  public synchronized static void stopHAServices(){  if (qrmThread != null) {    qrmThread.shutdown();    qrmThread=null;    dispatchedMessagesMap.clear();    dispatchedMessagesMap=null;  }}  }
class C{  public IdentityStmt newIdentityStmt(Value local,Value identityRef){  return new JIdentityStmt(local,identityRef);}  }
class C{  public boolean targetCharacterExists(){  return accountName != null;}  }
class C{  boolean descendsFrom(ClassFile cf){  return descendsFrom(cf.toString());}  }
class C{  @Override public Range findDomainBounds(XYDataset dataset){  return findDomainBounds(dataset,true);}  }
class C{  public Offset(double latPoint,double lonPoint,float[] xPoints,float[] yPoints,int cMode){  super(latPoint,lonPoint,xPoints,yPoints,cMode);  setIsPolygon(false);}  }
class C{  public static String prefix(Iterator stringIter,String prefix){  StringBuilder sb=new StringBuilder();  while (stringIter.hasNext()) {    sb.append(prefix);    sb.append((String)stringIter.next());  }  return sb.toString();}  }
class C{  private static void removeIndexTree(final IFileStore store,final IProgressMonitor monitor,final String task) throws CoreException {  try {    monitor.beginTask(task,16);    final IFileInfo info=store.fetchInfo(EFS.NONE,new SubProgressMonitor(monitor,1,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL));    if (info.isDirectory()) {      if (info.getName().equalsIgnoreCase(RefactoringHistoryService.NAME_HISTORY_FOLDER))       return;      final IFileStore[] stores=store.childStores(EFS.NONE,new SubProgressMonitor(monitor,1,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL));      final IProgressMonitor subMonitor=new SubProgressMonitor(monitor,1,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL);      try {        subMonitor.beginTask(RefactoringCoreMessages.RefactoringHistoryService_updating_history,stores.length);        for (int index=0; index < stores.length; index++) {          final IFileInfo current=stores[index].fetchInfo(EFS.NONE,new SubProgressMonitor(subMonitor,1,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL));          if (current.isDirectory()) {            final char[] characters=stores[index].getName().toCharArray();            for (int offset=0; offset < characters.length; offset++) {              if (Character.isDigit(characters[offset]))               return; else               continue;            }          }        }      }  finally {        subMonitor.done();      }    }    final IFileStore parent=store.getParent();    store.delete(0,new SubProgressMonitor(monitor,1,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL));    removeIndexTree(parent,new SubProgressMonitor(monitor,12,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL),task);  }  finally {    monitor.done();  }}  }
class C{  private void copyDirectory(File sourceDir,File targetDir,boolean overwrite){  try {    for (    File file : sourceDir.listFiles()) {      if (file.isDirectory()) {        File newDir=new File(targetDir.getPath() + "/" + file.getName());        if (newDir.mkdir() || overwrite == true) {          copyDirectory(file,newDir,overwrite);        } else {          log("ERROR: unable to create directory: " + newDir);        }      } else {        File targetFile=new File(targetDir.getPath() + "/" + file.getName());        try {          if (targetFile.exists()) {            targetFile.delete();          }          FileInputStream inputStream=new FileInputStream(file);          FileOutputStream outputStream=new FileOutputStream(targetFile);          FileChannel inputChannel=inputStream.getChannel();          FileChannel outputChannel=outputStream.getChannel();          outputChannel.transferFrom(inputChannel,0,inputChannel.size());          inputStream.close();          outputStream.close();        } catch (        Exception e) {          log("ERROR: unable to copy file to script directory: " + targetFile);          e.printStackTrace();        }      }    }  } catch (  Exception e) {    log("ERROR: copying working directory failed: " + e.getMessage() + " source: "+ sourceDir+ " target: "+ targetDir);    e.printStackTrace();  }}  }
class C{  public double doubleValue(){  return numericValue().doubleValue();}  }
class C{  public static void addEmojis(Context context,Spannable text,int emojiSize,int emojiAlignment,int textSize,boolean useSystemDefault){  addEmojis(context,text,emojiSize,emojiAlignment,textSize,0,-1,useSystemDefault);}  }
class C{  private boolean isValidChannel(int channel){  return (1 <= channel && channel <= 20);}  }
class C{  protected void informObservers_before(Statement s){  ExecutionTracer.disable();  try {    for (    ExecutionObserver observer : observers) {      observer.beforeStatement(s,scope);    }  }  finally {    ExecutionTracer.enable();  }}  }
class C{  public <R>CompletableFuture<Stream<R>> matchFromStreamAsync(final Executor executor,final Stream<T> s){  return CompletableFuture.supplyAsync(null,executor);}  }
class C{  public ChiSquareTest.Result calcChiSquare(int[] testIndices){  this.getCellTable().addToTable(getDataSet(),testIndices);  int[] firstVar=new int[]{0};  int[] secondVar=new int[]{1};  int[] bothVars=new int[]{0,1};  double xSquare=0.0;  int df=0;  int[] condDims=new int[testIndices.length - 2];  System.arraycopy(selectFromArray(getDims(),testIndices),2,condDims,0,condDims.length);  int[] coords=new int[testIndices.length];  int numRows=this.getCellTable().getNumValues(0);  int numCols=this.getCellTable().getNumValues(1);  boolean[] attestedRows=new boolean[numRows];  boolean[] attestedCols=new boolean[numCols];  CombinationIterator combinationIterator=new CombinationIterator(condDims);  while (combinationIterator.hasNext()) {    int[] combination=(int[])combinationIterator.next();    System.arraycopy(combination,0,coords,2,combination.length);    Arrays.fill(attestedRows,true);    Arrays.fill(attestedCols,true);    long total=this.getCellTable().calcMargin(coords,bothVars);    if (total == 0) {      continue;    }    for (int i=0; i < numRows; i++) {      for (int j=0; j < numCols; j++) {        coords[0]=i;        coords[1]=j;        long sumRow=this.getCellTable().calcMargin(coords,secondVar);        long sumCol=this.getCellTable().calcMargin(coords,firstVar);        long observed=(int)this.getCellTable().getValue(coords);        boolean skip=false;        if (sumRow == 0) {          attestedRows[i]=false;          skip=true;        }        if (sumCol == 0) {          attestedCols[j]=false;          skip=true;        }        if (skip) {          continue;        }        double expected=(double)(sumCol * sumRow) / (double)total;        xSquare+=Math.pow(observed - expected,2.0) / expected;      }    }    int numAttestedRows=0;    int numAttestedCols=0;    for (    boolean attestedRow : attestedRows) {      if (attestedRow) {        numAttestedRows++;      }    }    for (    boolean attestedCol : attestedCols) {      if (attestedCol) {        numAttestedCols++;      }    }    df+=(numAttestedRows - 1) * (numAttestedCols - 1);  }  if (df == 0) {    double pValue=1.0;    boolean indep=false;    return new ChiSquareTest.Result(xSquare,pValue,df,indep);  }  double pValue=1.0 - ProbUtils.chisqCdf(xSquare,df);  boolean indep=(pValue > this.getAlpha());  return new ChiSquareTest.Result(xSquare,pValue,df,indep);}  }
class C{  public void testMerge() throws Exception {  Ui ui=control.createMock(Ui.class);  Injector.INSTANCE=new Injector(fileSystem,cmd,ui);  File mergedCodebaseLocation=new File("merged_codebase_7");  expect(fileSystem.getTemporaryDirectory("merged_codebase_")).andReturn(mergedCodebaseLocation);  File origRoot=new File("orig");  expect(orig.path()).andReturn(origRoot).anyTimes();  File destRoot=new File("dest");  expect(dest.path()).andReturn(destRoot).anyTimes();  File modRoot=new File("mod");  expect(mod.path()).andReturn(modRoot).anyTimes();  File origFile=new File("orig/foo");  expect(orig.getFile("foo")).andReturn(origFile);  expect(fileSystem.exists(origFile)).andReturn(true);  File destFile=new File("dest/foo");  expect(fileSystem.findFiles(destRoot)).andReturn(ImmutableSet.of(destFile));  expect(dest.getFile("foo")).andReturn(destFile);  expect(fileSystem.exists(destFile)).andReturn(true);  File modFile=new File("mod/foo");  expect(fileSystem.findFiles(modRoot)).andReturn(ImmutableSet.of(modFile));  expect(mod.getFile("foo")).andReturn(modFile);  expect(fileSystem.exists(modFile)).andReturn(true);  File mergedFile=new File("merged_codebase_7/foo");  fileSystem.makeDirsForFile(mergedFile);  fileSystem.copyFile(destFile,mergedFile);  List<String> mergeArgs=ImmutableList.of(mergedFile.getAbsolutePath(),origFile.getAbsolutePath(),modFile.getAbsolutePath());  expect(cmd.runCommand("merge",mergeArgs,mergedCodebaseLocation.getAbsolutePath())).andReturn("");  ui.message("Merged codebase generated at: %s",mergedCodebaseLocation.getAbsolutePath());  ui.message("%d files merged successfully. No merge conflicts.",1);  control.replay();  CodebaseMerger merger=new CodebaseMerger(ui,fileSystem,cmd,null,orig,mod,dest);  merger.merge();  control.verify();  assertThat(merger.getMergedFiles()).contains(mergedFile.getAbsolutePath());  assertThat(merger.getFailedToMergeFiles()).isEmpty();}  }
class C{  public Message newMessage(Pdu.Type type){  Optional<String> structName=typeFactory.getStructNameForId(type.id());  if (!structName.isPresent()) {    throw new TypeException("No type definition for id " + type.id());  }  return new Message(typeFactory,structName.get());}  }
class C{  public ParseException generateParseException(){  jj_expentries.clear();  boolean[] la1tokens=new boolean[95];  if (jj_kind >= 0) {    la1tokens[jj_kind]=true;    jj_kind=-1;  }  for (int i=0; i < 34; i++) {    if (jj_la1[i] == jj_gen) {      for (int j=0; j < 32; j++) {        if ((jj_la1_0[i] & (1 << j)) != 0) {          la1tokens[j]=true;        }        if ((jj_la1_1[i] & (1 << j)) != 0) {          la1tokens[32 + j]=true;        }        if ((jj_la1_2[i] & (1 << j)) != 0) {          la1tokens[64 + j]=true;        }      }    }  }  for (int i=0; i < 95; i++) {    if (la1tokens[i]) {      jj_expentry=new int[1];      jj_expentry[0]=i;      jj_expentries.add(jj_expentry);    }  }  jj_endpos=0;  jj_rescan_token();  jj_add_error_token(0,0);  int[][] exptokseq=new int[jj_expentries.size()][];  for (int i=0; i < jj_expentries.size(); i++) {    exptokseq[i]=(int[])jj_expentries.get(i);  }  return new ParseException(token,exptokseq,tokenImage);}  }
class C{  private boolean allStringConstants(Value v){  if (v instanceof StringConstant)   return true;  if (!PTABridge.v().isPointer(v))   return false;  for (  IAllocNode node : PTABridge.v().getPTSetIns(v)) {    if (!(node.getNewExpr() instanceof StringConstant)) {      return false;    }  }  return true;}  }
class C{  private void verifyChecksum(Throwable priorException,PointWriter writer) throws IOException {  if (writer instanceof OfflinePointWriter) {    String tempFileName=((OfflinePointWriter)writer).name;    try (ChecksumIndexInput in=tempDir.openChecksumInput(tempFileName,IOContext.READONCE)){      CodecUtil.checkFooter(in,priorException);    }   } else {    IOUtils.reThrow(priorException);  }}  }
class C{  public JavaElementImageDescriptor(ImageDescriptor baseImage,int flags){  super(baseImage.getImage());  fBaseImage=baseImage;  Assert.isNotNull(fBaseImage);  fFlags=flags;  Assert.isTrue(fFlags >= 0);}  }
class C{  @Override public void renderAxisLabels(Canvas c){  if (!mYAxis.isEnabled() || !mYAxis.isDrawLabelsEnabled())   return;  float[] positions=new float[mYAxis.mEntryCount * 2];  for (int i=0; i < positions.length; i+=2) {    positions[i]=mYAxis.mEntries[i / 2];  }  mTrans.pointValuesToPixel(positions);  mAxisLabelPaint.setTypeface(mYAxis.getTypeface());  mAxisLabelPaint.setTextSize(mYAxis.getTextSize());  mAxisLabelPaint.setColor(mYAxis.getTextColor());  mAxisLabelPaint.setTextAlign(Align.CENTER);  float baseYOffset=Utils.convertDpToPixel(2.5f);  float textHeight=Utils.calcTextHeight(mAxisLabelPaint,"Q");  AxisDependency dependency=mYAxis.getAxisDependency();  YAxisLabelPosition labelPosition=mYAxis.getLabelPosition();  float yPos=0f;  if (dependency == AxisDependency.LEFT) {    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {      yPos=mViewPortHandler.contentTop() - baseYOffset;    } else {      yPos=mViewPortHandler.contentTop() - baseYOffset;    }  } else {    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {      yPos=mViewPortHandler.contentBottom() + textHeight + baseYOffset;    } else {      yPos=mViewPortHandler.contentBottom() + textHeight + baseYOffset;    }  }  drawYLabels(c,yPos,positions,mYAxis.getYOffset());}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.ANNOTATION__PROPERTIES:    getProperties().clear();  getProperties().addAll((Collection<? extends Property>)newValue);return;case TypesPackage.ANNOTATION__TARGETS:getTargets().clear();getTargets().addAll((Collection<? extends EObject>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public String build(){  if (cachedBuildResult != null) {    return cachedBuildResult;  }  StringBuilder str=new StringBuilder();  str.append(type);  str.append('/');  str.append(subType);  if (parameters != null) {    for (    Entry<String,String> entry : parameters.entrySet()) {      String value=entry.getValue();      str.append("; ");      str.append(entry.getKey());      str.append("=");      str.append(!matchesToken(value) ? quoteString(value) : value);    }  }  cachedBuildResult=str.toString();  return cachedBuildResult;}  }
class C{  public void addAttribute(@NonNls final String name,final int value){  addAttributeImpl(name,Integer.toString(value));}  }
class C{  public static Boolean useGA(Context context){  return false;}  }
class C{  public MatrixF(String fname) throws FileNotFoundException, IOException {  super(fname);}  }
class C{  public void disable(Application application){  if (application != null && application instanceof FoamApp) {    FoamMain foamMain=((FoamApp)application).getFoamMain();    if (foamMain != null) {      foamMain.stop();    }  }}  }
class C{  public static String toStringReplaceNull(Object obj,String replacement){  String string=String.valueOf(obj);  return string == null || string.equals("null") ? replacement : string;}  }
class C{  public HaltParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_HALTED_SUCCESS);}  }
class C{  public void start(){  super.start();  createGrids();  Bot b;  double x, y;  x=random.nextDouble() * xMax;  y=random.nextDouble() * yMax;  b=new Bot(x,y,Color.red);  b.cap=0.65;  fieldEnvironment.setObjectLocation(b,new Double2D(x,y));  schedule.scheduleRepeating(b);  x=random.nextDouble() * xMax;  y=random.nextDouble() * yMax;  b=new Bot(x,y,Color.blue);  b.cap=0.5;  fieldEnvironment.setObjectLocation(b,new Double2D(x,y));  schedule.scheduleRepeating(b);  x=random.nextDouble() * xMax;  y=random.nextDouble() * yMax;  b=new Bot(x,y,Color.blue);  b.cap=0.5;  fieldEnvironment.setObjectLocation(b,new Double2D(x,y));  schedule.scheduleRepeating(b);  x=random.nextDouble() * xMax;  y=random.nextDouble() * yMax;  b=new Bot(x,y,Color.blue);  b.cap=0.5;  fieldEnvironment.setObjectLocation(b,new Double2D(x,y));  schedule.scheduleRepeating(b);  Ball ba;  x=random.nextDouble() * xMax;  y=random.nextDouble() * yMax;  ba=new Ball(x,y);  fieldEnvironment.setObjectLocation(ba,new Double2D(x,y));  schedule.scheduleRepeating(ba);}  }
class C{  protected static float dpToPixel(Context context,float dp){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  return dp * (metrics.densityDpi / 160f);}  }
class C{  public DataSourceFixture(String id,String connectionType,TransactionSupport transactionSupport,String driverClass,String url,String jndiLocation,String username,String password,String driverProperties){  super();  this.id=id;  this.connectionType=connectionType;  this.transactionSupport=transactionSupport;  this.driverClass=driverClass;  this.url=url;  this.jndiLocation=jndiLocation;  this.username=username;  this.password=password;  this.driverProperties=driverProperties;}  }
class C{  public static double[] normalizeMax(double[] histogram){  double[] result=new double[histogram.length];  double max=0d;  for (int i=0; i < histogram.length; i++) {    max=Math.max(max,histogram[i]);  }  for (int i=0; i < histogram.length; i++) {    result[i]=((double)histogram[i]) / max;  }  return result;}  }
class C{  public static AuthenticationInfo loadFromJSON(String json) throws JsonParseException, JsonMappingException, IOException {  ObjectMapper mapper=new ObjectMapper();  AuthenticationInfo securityInfo=mapper.readValue(json,AuthenticationInfo.class);  return securityInfo;}  }
class C{  protected void updateComboBoxesLoadChange(){  if (autoTrackCheckBox.isSelected()) {    updateLocationTrackComboBox();  }  if (autoDestinationTrackCheckBox.isSelected()) {    updateDestinationTrackComboBox();  }  if (autoFinalDestTrackCheckBox.isSelected()) {    updateFinalDestination();  }}  }
class C{  public static IgniteBiTuple<Collection<Map<String,Object>>,Map<String,Object>> parseFile(File file) throws IgniteCheckedException {  assert file != null;  assert file.exists();  assert file.isFile();  BufferedReader br=null;  int lineCnt=1;  try {    br=new BufferedReader(new InputStreamReader(new FileInputStream(file),"UTF-8"));    String section=null;    Collection<Map<String,Object>> hosts=new LinkedList<>();    Map<String,Object> dflts=null;    Map<String,Object> props=null;    for (String line; (line=br.readLine()) != null; lineCnt++) {      String l=line.trim();      if (l.isEmpty() || l.startsWith("#") || l.startsWith(";"))       continue;      if (l.startsWith("[") && l.endsWith("]")) {        Map<String,Object> dfltsTmp=processSection(section,hosts,dflts,props);        if (dfltsTmp != null)         dflts=dfltsTmp;        props=new HashMap<>();        section=l.substring(1,l.length() - 1);      } else       if (l.contains("=")) {        if (section == null)         throw new IgniteCheckedException("Ignite ini format doesn't support unnamed section.");        String key=l.substring(0,l.indexOf('='));        String val=line.substring(line.indexOf('=') + 1);switch (key) {case HOST:case UNAME:case PASSWD:case IGNITE_HOME:case CFG:case SCRIPT:          props.put(key,val);        break;case PORT:case NODES:      props.put(key,Integer.valueOf(val));    break;case KEY:  props.put(KEY,new File(val));break;}} else throw new IgniteCheckedException("Failed to parse INI file (line " + lineCnt + ").");}Map<String,Object> dfltsTmp=processSection(section,hosts,dflts,props);if (dfltsTmp != null) dflts=dfltsTmp;return F.t(hosts,dflts);} catch (IOException|NumberFormatException e) {throw new IgniteCheckedException("Failed to parse INI file (line " + lineCnt + ").",e);} finally {U.closeQuiet(br);}}  }
class C{  public synchronized BookKeeperClientBuilder dlConfig(DistributedLogConfiguration dlConfig){  this.dlConfig=dlConfig;  return this;}  }
class C{  public ActionEvent(Object source,Type type,int keyEvent){  this.source=source;  this.keyEvent=keyEvent;  this.trigger=type;}  }
class C{  public void finish() throws IOException {  long cdOffset=written;  final List<JBZipEntry> entries=myFile.getEntries();  for (int i=0, entriesSize=entries.size(); i < entriesSize; i++) {    writeCentralFileHeader(entries.get(i));  }  long cdLength=written - cdOffset;  writeCentralDirectoryEnd(cdLength,cdOffset);  flushBuffer();}  }
class C{  public Temporary(int firstIndex){  nextIndex=firstIndex;}  }
class C{  public void runAfterPermissionsCheck(int requestCode,String[] permissions,int[] grantResults){  if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {    Log.i(TAG,"User granted permission");  } else {    Log.i(TAG,"User denied permission");  }}  }
class C{  public static Matrix fromCovarianceOfVertices(Iterable<? extends Vec4> points){  if (points == null) {    throw new IllegalArgumentException("Iterable Is Null");  }  Vec4 mean=Vec4.computeAveragePoint(points);  if (mean == null)   return null;  int count=0;  double c11=0d;  double c22=0d;  double c33=0d;  double c12=0d;  double c13=0d;  double c23=0d;  for (  Vec4 vec : points) {    if (vec == null)     continue;    count++;    c11+=(vec.x - mean.x) * (vec.x - mean.x);    c22+=(vec.y - mean.y) * (vec.y - mean.y);    c33+=(vec.z - mean.z) * (vec.z - mean.z);    c12+=(vec.x - mean.x) * (vec.y - mean.y);    c13+=(vec.x - mean.x) * (vec.z - mean.z);    c23+=(vec.y - mean.y) * (vec.z - mean.z);  }  if (count == 0)   return null;  return new Matrix(c11 / (double)count,c12 / (double)count,c13 / (double)count,0d,c12 / (double)count,c22 / (double)count,c23 / (double)count,0d,c13 / (double)count,c23 / (double)count,c33 / (double)count,0d,0d,0d,0d,0d);}  }
class C{  public Path removeLastSegments(int count){  if (count == 0)   return this;  if (count >= segments.length) {    return new Path(device,NO_SEGMENTS,separators & (HAS_LEADING | IS_UNC));  }  checkArgument(count > 0);  int newSize=segments.length - count;  String[] newSegments=new String[newSize];  System.arraycopy(this.segments,0,newSegments,0,newSize);  return new Path(device,newSegments,separators & (HAS_LEADING | IS_UNC));}  }
class C{  public ShxOutputStream(OutputStream os){  BufferedOutputStream bos=new BufferedOutputStream(os);  _leos=new LittleEndianOutputStream(bos);}  }
class C{  public boolean retainEntries(TDoubleIntProcedure procedure){  boolean modified=false;  byte[] states=_states;  double[] keys=_set;  int[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      removeAt(i);      modified=true;    }  }  return modified;}  }
class C{  public synchronized void cancelRequest(long rid){  this.apiBroker.send(new ApiBroker.CancelRequest(rid));}  }
class C{  public void query(Envelope searchEnv,ItemVisitor visitor){  root.visit(searchEnv,visitor);}  }
class C{  public static IPRange parse(String range){  String[] ips=range.split("-");  Preconditions.checkArgument(ips.length == 2,"IP range string must be fomarted as [minIP-maxIP],error argument:" + range);  return new IPRange(IP.parseFromString(ips[0]),IP.parseFromString(ips[1]));}  }
class C{  @Override public PermissionCollection newPermissionCollection(){  return new AdminPermissionCollection();}  }
class C{  DOMSignatureMethod(AlgorithmParameterSpec params) throws InvalidAlgorithmParameterException {  if (params != null && !(params instanceof SignatureMethodParameterSpec)) {    throw new InvalidAlgorithmParameterException("params must be of type SignatureMethodParameterSpec");  }  checkParams((SignatureMethodParameterSpec)params);  this.params=(SignatureMethodParameterSpec)params;}  }
class C{  @SuppressWarnings("deprecation") public static MonthDay fromDateFields(Date date){  if (date == null) {    throw new IllegalArgumentException("The date must not be null");  }  return new MonthDay(date.getMonth() + 1,date.getDate());}  }
class C{  public TFloatIntHashMap(TFloatHashingStrategy strategy){  super(strategy);}  }
class C{  public void addPerson(Id person){  if (rule.getsSeatOnEnter(person,vehicle,sittingPersons.size(),standingPersons.size())) {    addSitting(person);  } else {    addStanding(person);  }}  }
class C{  boolean checkForExpiration(){  boolean expired=false;  if (this.leaseId > -1 && this.leaseExpireTime < Long.MAX_VALUE) {    long currentTime=getCurrentTime();    if (currentTime > this.leaseExpireTime) {      if (logger.isTraceEnabled(LogMarker.DLS)) {        logger.trace(LogMarker.DLS,"[checkForExpiration] Expiring token at {}: {}",currentTime,this);      }      noteExpiredLease();      basicReleaseLock();      expired=true;    }  }  return expired;}  }
class C{  public final void testReadbyteArrayintint05() throws IOException {  assertEquals(0,MY_MESSAGE_LEN % CHUNK_SIZE);  for (int ii=0; ii < algorithmName.length; ii++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[ii]);      InputStream is=new ByteArrayInputStream(myMessage);      DigestInputStream dis=new DigestInputStream(is,md);      byte[] bArray=new byte[MY_MESSAGE_LEN];      dis.on(false);      for (int i=0; i < MY_MESSAGE_LEN / CHUNK_SIZE; i++) {        dis.read(bArray,i * CHUNK_SIZE,CHUNK_SIZE);      }      assertTrue(Arrays.equals(dis.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[ii] + "_NU")));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {  ois.defaultReadObject();  try {    resBundle=JdbcRowSetResourceBundle.getJdbcRowSetResourceBundle();  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }}  }
class C{  public void hasBody(boolean hasBody){}  }
class C{  public int findLastCompletelyVisibleItemPosition(){  final View child=findOneVisibleChild(layoutManager.getChildCount() - 1,-1,true,false);  return child == null ? RecyclerView.NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  public static boolean isIsatapAddress(Inet6Address ip){  if (isTeredoAddress(ip)) {    return false;  }  byte[] bytes=ip.getAddress();  if ((bytes[8] | (byte)0x03) != (byte)0x03) {    return false;  }  return (bytes[9] == (byte)0x00) && (bytes[10] == (byte)0x5e) && (bytes[11] == (byte)0xfe);}  }
class C{  public ToStringBuilder append(final String fieldName,final long[] array){  style.append(buffer,fieldName,array,null);  return this;}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public VfsStreamOld(OutputStream os){  init(null,os);}  }
class C{  public long index(){  return leaderIndex;}  }
class C{  public boolean closeIt(){  log.info("closeIt - " + toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_CLOSE);  if (m_processMsg != null)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_CLOSE);  if (m_processMsg != null)   return false;  return true;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public NestedListsI32x2(NestedListsI32x2 other){  if (other.isSetIntegerlist()) {    List<List<Integer>> __this__integerlist=new ArrayList<List<Integer>>(other.integerlist.size());    for (    List<Integer> other_element : other.integerlist) {      List<Integer> __this__integerlist_copy=new ArrayList<Integer>(other_element);      __this__integerlist.add(__this__integerlist_copy);    }    this.integerlist=__this__integerlist;  }}  }
class C{  public void dispose(){  m_debugPerspectiveModel.removeListener(m_listener);  synchronizeDebugger(m_debugPerspectiveModel.getCurrentSelectedDebugger(),null);}  }
class C{  public static RegExpExpression regexp(String property,String regExExpression,String escape){  return new RegExpExpression(getPropExpr(property),new ConstantExpression(regExExpression),new ConstantExpression(escape));}  }
class C{  private boolean copyFilesFromCurrentReleaseToNewRelease(){  boolean result=true;  final File currentWwwFolder=new File(currentReleaseFS.getWwwFolder());  final File newWwwFolder=new File(newReleaseFS.getWwwFolder());  try {    if (newWwwFolder.exists()) {      FilesUtility.delete(newWwwFolder);    }    FilesUtility.copy(currentWwwFolder,newWwwFolder);  } catch (  Exception e) {    e.printStackTrace();    result=false;  }  return result;}  }
class C{  public HashMap queryMemory(){  int memoryClass=mActivityManager.getMemoryClass();  int largeMemoryClass=mActivityManager.getLargeMemoryClass();  ActivityManager.MemoryInfo memoryInfo=new ActivityManager.MemoryInfo();  mActivityManager.getMemoryInfo(memoryInfo);  long availMem=memoryInfo.availMem / BYTES_IN_MEGABYTE;  long totalMem=memoryInfo.totalMem / BYTES_IN_MEGABYTE;  long threshold=memoryInfo.threshold / BYTES_IN_MEGABYTE;  boolean lowMemory=memoryInfo.lowMemory;  ActivityManager.RunningAppProcessInfo info=new ActivityManager.RunningAppProcessInfo();  ActivityManager.getMyMemoryState(info);  int appPID=Process.myPid();  long timestamp=SystemClock.elapsedRealtime();  long totalPrivateDirty=0L;  long totalSharedDirty=0L;  long totalPSS=0L;  long nativePSS=0L;  long dalvikPSS=0L;  long otherPSS=0L;  if (appPID != 0) {    int pids[]=new int[1];    pids[0]=appPID;    Debug.MemoryInfo[] memoryInfoArray=mActivityManager.getProcessMemoryInfo(pids);    totalPrivateDirty=memoryInfoArray[0].getTotalPrivateDirty() / BYTES_IN_KILOBYTE;    totalSharedDirty=memoryInfoArray[0].getTotalSharedDirty() / BYTES_IN_KILOBYTE;    totalPSS=memoryInfoArray[0].getTotalPss() / BYTES_IN_KILOBYTE;    nativePSS=memoryInfoArray[0].nativePss / BYTES_IN_KILOBYTE;    dalvikPSS=memoryInfoArray[0].dalvikPss / BYTES_IN_KILOBYTE;    otherPSS=memoryInfoArray[0].otherPss / BYTES_IN_KILOBYTE;  }  HashMap outputData=new HashMap();  outputData.put(KEY_TIMESTAMP,new Long(timestamp));  outputData.put(KEY_MEMORY_AVAILABLE,new Long(availMem));  outputData.put(KEY_TOTAL_MEMORY,new Long(totalMem));  outputData.put(KEY_TOTAL_PSS,new Long(totalPSS));  outputData.put(KEY_LAST_TRIM_LEVEL,new Integer(info.lastTrimLevel));  outputData.put(KEY_TOTAL_PRIVATE_DIRTY,new Long(totalPrivateDirty));  outputData.put(KEY_TOTAL_SHARED_DIRTY,new Long(totalSharedDirty));  outputData.put(KEY_MEMORY_CLASS,new Long(memoryClass));  outputData.put(KEY_LARGE_MEMORY_CLASS,new Long(largeMemoryClass));  outputData.put(KEY_NATIVE_PSS,new Long(nativePSS));  outputData.put(KEY_DALVIK_PSS,new Long(dalvikPSS));  outputData.put(KEY_OTHER_PSS,new Long(otherPSS));  outputData.put(KEY_THRESHOLD,new Long(threshold));  outputData.put(KEY_LOW_MEMORY,new Boolean(lowMemory));  Log.d(TAG,String.format("timestamp=%d, availMem=%d, totalMem=%d, totalPSS=%d, " + "lastTrimLevel=%d, largeMemoryClass=%d, nativePSS=%d, dalvikPSS=%d, otherPSS=%d," + "threshold=%d, lowMemory=%s",timestamp,availMem,totalMem,totalPSS,info.lastTrimLevel,largeMemoryClass,nativePSS,dalvikPSS,otherPSS,threshold,lowMemory));  return outputData;}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(NOT_BEFORE)) {    notBefore=null;  } else   if (name.equalsIgnoreCase(NOT_AFTER)) {    notAfter=null;  } else {    throw new IOException("Attribute name not recognized by " + "CertAttrSet: CertificateValidity.");  }}  }
class C{  public static long readUInt(ByteBuffer buffer){  int i=buffer.getInt();  return i & 0xffffffffL;}  }
class C{  public void accept(final MethodVisitor mv){  mv.visitTryCatchBlock(start.getLabel(),end.getLabel(),handler == null ? null : handler.getLabel(),type);  int n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (int i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(mv.visitTryCatchAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (int i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(mv.visitTryCatchAnnotation(an.typeRef,an.typePath,an.desc,false));  }}  }
class C{  public WhereBuilder and(String columnName,String op,Object value){  appendCondition(whereItems.size() == 0 ? null : "AND",columnName,op,value);  return this;}  }
class C{  public boolean isBorderOpaque(){  return !roundedCorners;}  }
class C{  private void updatePollPointer(){  curSerialNodeIndex++;  if (curSerialNodeIndex >= getNumNodes()) {    curSerialNodeIndex=0;  }}  }
class C{  private boolean backupSolr(final String backupDirectory){  StringBuilder request=new StringBuilder();  request.append(cfgManager.getServerConfiguration().getUrl());  request.append("/solr/dhus/replication?");  request.append("command=backup&location=").append(backupDirectory);  request.append("&name=").append(BACKUP_INDEX_NAME);  try {    URL url=new URL(request.toString());    HttpURLConnection con=(HttpURLConnection)url.openConnection();    InputStream input=con.getInputStream();    StringBuilder response=new StringBuilder();    byte[] buff=new byte[1024];    int length;    while ((length=input.read(buff)) != -1) {      response.append(new String(buff,0,length));    }    input.close();    con.disconnect();    logger.debug(response.toString());  } catch (  IOException e) {    return Boolean.FALSE;  }  return Boolean.TRUE;}  }
class C{  public static Instance calcCentroidPivot(int start,int end,int[] instList,Instances insts){  double[] attrVals=new double[insts.numAttributes()];  Instance temp;  for (int i=start; i <= end; i++) {    temp=insts.instance(instList[i]);    for (int j=0; j < temp.numValues(); j++) {      attrVals[j]+=temp.valueSparse(j);    }  }  for (int j=0, numInsts=end - start + 1; j < attrVals.length; j++) {    attrVals[j]/=numInsts;  }  temp=new DenseInstance(1.0,attrVals);  return temp;}  }
class C{  public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws org.xml.sax.SAXException {  throw new StopParseException();}  }
class C{  public CountingOutputStream(OutputStream out){  super(checkNotNull(out));}  }
class C{  @Override public int compareTo(final Metric o){  for (int i=0; i < name.length; i++) {    if (i > o.name.length) {      return 1;    }    final int d=name[i].toString().compareTo(o.name[i].toString());    if (d != 0) {      return d;    }  }  return 0;}  }
class C{  private static String dblString(BigDecimal decimalValue,int precision,int availableSpace){  BigDecimal decimal=decimalValue;  if (precision >= 0) {    decimal=decimalValue.setScale(precision,RoundingMode.HALF_UP);  }  double absInput=Math.abs(decimalValue.doubleValue());  if (absInput > 0d && absInput < MAX_DECIMAL_VALUE_TO_USE_PLAIN_STRING) {    String value=decimal.toPlainString();    if (value.length() < availableSpace) {      return value;    }  }  String value=decimalValue.toString();  while (value.length() > availableSpace) {    decimal=decimalValue.setScale(decimal.scale() - 1,BigDecimal.ROUND_HALF_UP);    value=decimal.toString();  }  return value;}  }
class C{  private void testMeh(){  mSavedMehResponse=new Gson().fromJson(AssetUtil.loadJSONFromAsset(this,"4-23-2015.json"),MehResponse.class);  Timber.d(mSavedMehResponse.toString());  bindDeal(mSavedMehResponse.getDeal(),true);}  }
class C{  public E peekFirst(){  if (size == 0)   return null;  return getFirst();}  }
class C{  public boolean isNull(){  return isNull;}  }
class C{  private void makeSpace(int startIndex,int count){  for (int i=sizeMap.size() - 1; i >= startIndex; i--) {    sizeMap.put(i + count,sizeMap.get(i));  }  for (int i=startIndex; i < startIndex + count; i++) {    sizeMap.remove(i);  }}  }
class C{  public void append(int key,boolean value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  mKeys=GrowingArrayUtils.append(mKeys,mSize,key);  mValues=GrowingArrayUtils.append(mValues,mSize,value);  mSize++;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static boolean isOnlyAttack(IGame game,Entity attacker,String attackType,Entity target){  for (Enumeration<EntityAction> actions=game.getActions(); actions.hasMoreElements(); ) {    EntityAction ea=actions.nextElement();    if (ea instanceof WeaponAttackAction) {      WeaponAttackAction waa=(WeaponAttackAction)ea;      Entity waaAE=waa.getEntity(game);      if (waaAE == null) {        continue;      }      if (waaAE.equals(attacker)) {        if (!waaAE.getEquipment(waa.getWeaponId()).getType().getInternalName().equals(attackType)) {          return false;        }      }      Targetable waaTarget=waa.getTarget(game);      EquipmentType weapType=waaAE.getEquipment(waa.getWeaponId()).getType();      if (weapType.getInternalName().equals(attackType) && (waaTarget != null) && waaTarget.equals(target)) {        if (!waaAE.equals(attacker)) {          return false;        }      }    }  }  return true;}  }
class C{  public void notify_app_updated(String package_name){  InstalledApp app=InstalledApp.find_app(package_name);  if (app == null) {    return;  }  final int pos=_installed_apps.indexOf(app);  if (pos != -1) {    _installed_apps.remove(pos);    _installed_apps.add(pos,app);    notifyItemChanged(pos);  }  if (app.is_update_available() && !app.has_notified()) {    app.set_has_notified(true);    app.save();  }}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  @Override protected int sizeOf(String key,BitmapDrawable value){  final int bitmapSize=getBitmapSize(value) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  @Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){  if (requestCode == REQUEST_CAMERA) {    Log.i(TAG,"Received response for Camera permission request.");    if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {      Log.i(TAG,"CAMERA permission has now been granted. Showing preview.");      Snackbar.make(mLayout,R.string.permision_available_camera,Snackbar.LENGTH_SHORT).show();    } else {      Log.i(TAG,"CAMERA permission was NOT granted.");      Snackbar.make(mLayout,R.string.permissions_not_granted,Snackbar.LENGTH_SHORT).show();    }  } else   if (requestCode == REQUEST_CONTACTS) {    Log.i(TAG,"Received response for contact permissions request.");    if (PermissionUtil.verifyPermissions(grantResults)) {      Snackbar.make(mLayout,R.string.permision_available_contacts,Snackbar.LENGTH_SHORT).show();    } else {      Log.i(TAG,"Contacts permissions were NOT granted.");      Snackbar.make(mLayout,R.string.permissions_not_granted,Snackbar.LENGTH_SHORT).show();    }  } else {    super.onRequestPermissionsResult(requestCode,permissions,grantResults);  }}  }
class C{  public static boolean isConnected(){  NetworkInfo info=getNetworkInfos();  if (info == null || !info.isConnected()) {    return false;  }  return true;}  }
class C{  private static void runFromArgs(String[] args){  String runDirectory=args[0];  String outputDir=runDirectory + "analysis/";  new File(outputDir).mkdir();  int lastIteration=Integer.parseInt(args[1]);  TtRunBraessAnalysisAfterSimulation analyzer=new TtRunBraessAnalysisAfterSimulation(runDirectory,lastIteration,outputDir);  analyzer.calculateLastItResults();  analyzer.writeResults();  analyzer.writeOnRoutes();  analyzer.writeRouteStarts();}  }
class C{  public void startHttpsServer() throws IOException, NoSuchAlgorithmException {  httpsServer=com.sun.net.httpserver.HttpsServer.create(new InetSocketAddress(0),0);  httpsServer.createContext("/",new MyHandler());  httpsServer.setHttpsConfigurator(new HttpsConfigurator(SSLContext.getDefault()));  httpsServer.start();}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  private static void generateJavaScriptLogAlertCloseWindow(Writer writer,String message) throws IOException {  writer.write("<script language=\"javascript\">alert(\"" + message + "\");");  writer.write("window.close();");  writer.write("</script>");}  }
class C{  public static double staticNextDouble(double mean,double standardDeviation){synchronized (shared) {    return shared.nextDouble(mean,standardDeviation);  }}  }
class C{  public static CCReuseGrid action(int times){  return new CCReuseGrid(times);}  }
class C{  public AppEngineStandardStage(@NotNull CloudSdkAppEngineHelper helper,@NotNull LoggingHandler loggingHandler,@NotNull Path deploymentArtifactPath){  this.helper=helper;  this.loggingHandler=loggingHandler;  this.deploymentArtifactPath=deploymentArtifactPath;}  }
class C{  protected void replaceURI(final String paramText,final Object uri){  replace(paramText,QueryStringBuilder.uriQuote(uri.toString()));}  }
class C{  public boolean onTouchEvent(MotionEvent event){  try {    int pointerCount=multiTouchSupported ? (Integer)m_getPointerCount.invoke(event) : 1;    if (getMode() == MODE_NOTHING && !handleSingleTouchEvents && pointerCount == 1)     return false;    int action=event.getAction();    int histLen=event.getHistorySize() / pointerCount;    for (int histIdx=0; histIdx <= histLen; histIdx++) {      boolean processingHist=histIdx < histLen;      if (!multiTouchSupported || pointerCount == 1) {        xVals[0]=processingHist ? event.getHistoricalX(histIdx) : event.getX();        yVals[0]=processingHist ? event.getHistoricalY(histIdx) : event.getY();        pressureVals[0]=processingHist ? event.getHistoricalPressure(histIdx) : event.getPressure();      } else {        int numPointers=Math.min(pointerCount,MAX_TOUCH_POINTS);        for (int ptrIdx=0; ptrIdx < numPointers; ptrIdx++) {          int ptrId=(Integer)m_getPointerId.invoke(event,ptrIdx);          pointerIds[ptrIdx]=ptrId;          xVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalX.invoke(event,ptrIdx,histIdx) : m_getX.invoke(event,ptrIdx));          yVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalY.invoke(event,ptrIdx,histIdx) : m_getY.invoke(event,ptrIdx));          pressureVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalPressure.invoke(event,ptrIdx,histIdx) : m_getPressure.invoke(event,ptrIdx));        }      }      decodeTouchEvent(pointerCount,xVals,yVals,pressureVals,pointerIds,processingHist ? MotionEvent.ACTION_MOVE : action,processingHist ? true : action != MotionEvent.ACTION_UP && (action & ((1 << ACTION_POINTER_INDEX_SHIFT) - 1)) != ACTION_POINTER_UP && action != MotionEvent.ACTION_CANCEL,processingHist ? event.getHistoricalEventTime(histIdx) : event.getEventTime());    }    return true;  } catch (  Exception e) {    Log.e(TAG,"onTouchEvent() failed",e);    return false;  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,(double)Math.floor(z1));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  public InlineQueryResultPhoto.InlineQueryResultPhotoBuilder photoHeight(int photoHeight){  this.photo_height=photoHeight;  return this;}  }
class C{  protected void openVisibleField(XhtmlBuffer xb){  xb.openElement("div");  String cssClass="form-group";  if (mode.isView(insertable,updatable)) {    cssClass+=" readonly";  } else {    cssClass+=" readwrite";  }  if (errors.size() > 0) {    cssClass+=" has-error";  }  if (hasRequiredFields()) {    cssClass+=" required";  }  xb.addAttribute("class",cssClass);  labelToXhtml(xb);  xb.openElement("div");  xb.addAttribute("class",INPUT_CONTAINER_CSS_CLASS + " " + fieldCssClass);}  }
class C{  private void addSpan(CacheSpan span){  TreeSet<CacheSpan> spansForKey=cachedSpans.get(span.key);  if (spansForKey == null) {    spansForKey=new TreeSet<CacheSpan>();    cachedSpans.put(span.key,spansForKey);  }  spansForKey.add(span);  totalSpace+=span.length;  notifySpanAdded(span);}  }
class C{  protected void buildLeavesMiddleOut(BallNode node) throws Exception {  if (node.m_Left != null && node.m_Right != null) {    buildLeavesMiddleOut(node.m_Left);    buildLeavesMiddleOut(node.m_Right);  } else   if (node.m_Left != null || node.m_Right != null) {    throw new Exception("Invalid leaf assignment. Please check code");  } else {    BallNode n2=buildTreeMiddleOut(node.m_Start,node.m_End);    if (n2.m_Left != null && n2.m_Right != null) {      node.m_Left=n2.m_Left;      node.m_Right=n2.m_Right;      buildLeavesMiddleOut(node);    } else     if (n2.m_Left != null || n2.m_Right != null) {      throw new Exception("Invalid leaf assignment. Please check code");    }  }}  }
class C{  private static int decode4to3(final byte[] source,final int srcOffset,final byte[] destination,final int destOffset,final int options){  if (source == null) {    throw new NullPointerException("Source array was null.");  }  if (destination == null) {    throw new NullPointerException("Destination array was null.");  }  if (srcOffset < 0 || srcOffset + 3 >= source.length) {    throw new IllegalArgumentException("Source array with length " + source.length + " cannot have offset of "+ srcOffset+ " and still process four bytes.");  }  if (destOffset < 0 || destOffset + 2 >= destination.length) {    throw new IllegalArgumentException("Destination array with length " + destination.length + " cannot have offset of ");  }  final byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    final int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    final int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    final int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    return new FileInputStream(entry.getCleanFile(index));  }}  }
class C{  @Override public boolean hasNestedTasks(Task container){  MutableTreeTableNode treeNode=myTask2treeNode.get(container);  if (treeNode != null) {    if (treeNode.children().hasMoreElements()) {      return true;    }  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributenomodificationallowederr.class,args);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.BINARY_BITWISE_EXPRESSION__LHS:    return basicSetLhs(null,msgs);case N4JSPackage.BINARY_BITWISE_EXPRESSION__RHS:  return basicSetRhs(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public JdbcExecutionRequest createDefaultUpdateJdbcExecutionRequest(){  JdbcConnection jdbcConnection=createDefaultJdbcConnection();  List<JdbcStatement> jdbcStatements=createDefaultUpdateJdbcStatements();  JdbcExecutionRequest jdbcExecutionRequest=createJdbcExecutionRequest(jdbcConnection,jdbcStatements);  return jdbcExecutionRequest;}  }
class C{  @ObjectiveCName("isImageAutoDownloadEnabled") public boolean isImageAutoDownloadEnabled(){  return modules.getSettingsModule().isImageAutoDownloadEnabled();}  }
class C{  public Element store(Object o){  Element blocks=new Element("blocks");  setStoreElementClass(blocks);  BlockManager tm=(BlockManager)o;  if (tm != null) {    java.util.Iterator<String> iter=tm.getSystemNameList().iterator();    if (!iter.hasNext()) {      return null;    }    blocks.addContent(new Element("defaultspeed").addContent(tm.getDefaultSpeed()));    while (iter.hasNext()) {      try {        String sname=iter.next();        if (sname == null) {          log.error("System name null during store");        } else {          Block b=tm.getBySystemName(sname);          if (b == null) {            log.error("Null block during store - sname = " + sname);          } else {            Element elem=new Element("block").setAttribute("systemName",sname);            elem.addContent(new Element("systemName").addContent(sname));            String uname=b.getUserName();            if ((uname != null) && (!uname.equals(""))) {              elem.addContent(new Element("userName").addContent(b.getUserName()));            }            if (log.isDebugEnabled()) {              log.debug("initial store Block " + sname);            }            blocks.addContent(elem);          }        }      } catch (      Exception e) {        log.error(e.toString());      }    }    iter=tm.getSystemNameList().iterator();    while (iter.hasNext()) {      String sname=iter.next();      if (sname == null) {        log.error("System name null during store skipped for this block");      } else {        Block b=tm.getBySystemName(sname);        if (b == null) {          log.error("Null Block during store - second store skipped for this block - " + sname);        } else {          String uname=b.getUserName();          if (uname == null) {            uname="";          }          Element elem=new Element("block").setAttribute("systemName",sname);          elem.addContent(new Element("systemName").addContent(sname));          if (log.isDebugEnabled()) {            log.debug("second store Block " + sname + ":"+ uname);          }          elem.setAttribute("length",Float.toString(b.getLengthMm()));          elem.setAttribute("curve",Integer.toString(b.getCurvature()));          storeCommon(b,elem);          if ((!b.getBlockSpeed().equals("")) && !b.getBlockSpeed().contains("Global")) {            elem.addContent(new Element("speed").addContent(b.getBlockSpeed()));          }          String perm="no";          if (b.getPermissiveWorking()) {            perm="yes";          }          elem.addContent(new Element("permissive").addContent(perm));          if (b.getNamedSensor() != null) {            elem.addContent(new Element("occupancysensor").addContent(b.getNamedSensor().getName()));          }          if (b.getDeniedBlocks().size() > 0) {            Element denied=new Element("deniedBlocks");            for (            String deniedBlock : b.getDeniedBlocks()) {              denied.addContent(new Element("block").addContent(deniedBlock));            }            elem.addContent(denied);          }          Reporter r=b.getReporter();          if (r != null) {            Element re=new Element("reporter");            re.setAttribute("systemName",r.getSystemName());            re.setAttribute("useCurrent",b.isReportingCurrent() ? "yes" : "no");            elem.addContent(re);          }          if (tm.isSavedPathInfo()) {            List<Path> paths=b.getPaths();            for (int i=0; i < paths.size(); i++) {              addPath(elem,paths.get(i));            }          }          blocks.addContent(elem);        }      }    }  }  return blocks;}  }
class C{  public static TimeSeriesData serializableInstance(){  List<String> varNames=new ArrayList<>();  varNames.add("X");  varNames.add("Y");  return new TimeSeriesData(new TetradMatrix(2,2),varNames);}  }
class C{  @Override public void shrinkToMaxSize(final int maxsize){  if (this.map.size() <= maxsize)   return;  int minScore=getMinScore();  while (this.map.size() > maxsize) {    minScore++;    shrinkToMinScore(minScore);  }}  }
class C{  boolean skipObject() throws IOException {  int ch=read();  int len;switch (ch) {case 0x00:case 0x01:case 0x02:case 0x03:case 0x04:case 0x05:case 0x06:case 0x07:case 0x08:case 0x09:case 0x0a:case 0x0b:case 0x0c:case 0x0d:case 0x0e:case 0x0f:case 0x10:case 0x11:case 0x12:case 0x13:case 0x14:case 0x15:case 0x16:case 0x17:case 0x18:case 0x19:case 0x1a:case 0x1b:case 0x1c:case 0x1d:case 0x1e:case 0x1f:    skip(ch - 0x00);  return true;case 0x20:case 0x21:case 0x22:case 0x23:case 0x24:case 0x25:case 0x26:case 0x27:case 0x28:case 0x29:case 0x2a:case 0x2b:case 0x2c:case 0x2d:case 0x2e:case 0x2f:skip(ch - 0x20);return true;case 0x30:case 0x31:case 0x32:case 0x33:len=256 * (ch - 0x30) + read();skip(len);return true;case 0x34:case 0x35:case 0x36:case 0x37:len=256 * (ch - 0x34) + read();skip(len);return true;case 0x3c:case 0x3d:case 0x3e:case 0x3f:skip(2);return true;case 0x41:len=readShort();skip(len);return skipObject();case 0x42:len=readShort();skip(len);return true;case 0x43:scanObjectDef();return skipObject();case 0x44:skip(8);return true;case 0x45:throw new IllegalStateException("Invalid Hessian bytecode 'E'");case 0x46:return true;case 0x47:skipObject();skipObject();return true;case 0x48:{skipMap();return true;}case 0x49:skip(4);return true;case 0x4a:skip(8);return true;case 0x4b:skip(4);return true;case 0x4c:skip(8);return true;case 0x4d:{skipObject();skipMap();return true;}case 0x4e:return true;case 0x4f:{int type=scanInt();String[] def=_classDefs.get(type);len=def.length - 1;for (int i=0; i < len; i++) {skipObject();}return true;}case 0x50:skipObject();skipObject();return true;case 0x51:skipObject();return true;case 0x52:len=readShort();skip(len);return skipObject();case 0x53:len=readShort();skip(len);return true;case 0x54:return true;case 0x55:readType();while (skipObject()) {}return true;case 0x56:readType();len=scanInt();for (int i=0; i < len; i++) {skipObject();}return true;case 0x57:while (skipObject()) {}return true;case 0x58:len=scanInt();for (int i=0; i < len; i++) {skipObject();}return true;case 0x59:skip(4);return true;case 0x5a:return false;case 0x5b:case 0x5c:return true;case 0x5d:skip(1);return true;case 0x5e:skip(2);return true;case 0x5f:return skipObject();case 0x60:case 0x61:case 0x62:case 0x63:case 0x64:case 0x65:case 0x66:case 0x67:case 0x68:case 0x69:case 0x6a:case 0x6b:case 0x6c:case 0x6d:case 0x6e:case 0x6f:{int type=ch - 0x60;String[] def=_classDefs.get(type);len=def.length - 1;for (int i=0; i < len; i++) {skipObject();}return true;}case 0x70:case 0x71:case 0x72:case 0x73:case 0x74:case 0x75:case 0x76:case 0x77:skipObject();len=ch - 0x70;for (int i=0; i < len; i++) {skipObject();}return true;case 0x78:case 0x79:case 0x7a:case 0x7b:case 0x7c:case 0x7d:case 0x7e:case 0x7f:len=ch - 0x78;for (int i=0; i < len; i++) {skipObject();}return true;case 0x80:case 0x81:case 0x82:case 0x83:case 0x84:case 0x85:case 0x86:case 0x87:case 0x88:case 0x89:case 0x8a:case 0x8b:case 0x8c:case 0x8d:case 0x8e:case 0x8f:case 0x90:case 0x91:case 0x92:case 0x93:case 0x94:case 0x95:case 0x96:case 0x97:case 0x98:case 0x99:case 0x9a:case 0x9b:case 0x9c:case 0x9d:case 0x9e:case 0x9f:case 0xa0:case 0xa1:case 0xa2:case 0xa3:case 0xa4:case 0xa5:case 0xa6:case 0xa7:case 0xa8:case 0xa9:case 0xaa:case 0xab:case 0xac:case 0xad:case 0xae:case 0xaf:case 0xb0:case 0xb1:case 0xb2:case 0xb3:case 0xb4:case 0xb5:case 0xb6:case 0xb7:case 0xb8:case 0xb9:case 0xba:case 0xbb:case 0xbc:case 0xbd:case 0xbe:case 0xbf:return true;case 0xc0:case 0xc1:case 0xc2:case 0xc3:case 0xc4:case 0xc5:case 0xc6:case 0xc7:case 0xc8:case 0xc9:case 0xca:case 0xcb:case 0xcc:case 0xcd:case 0xce:case 0xcf:skip(1);return true;case 0xd0:case 0xd1:case 0xd2:case 0xd3:case 0xd4:case 0xd5:case 0xd6:case 0xd7:skip(2);return true;case 0xd8:case 0xd9:case 0xda:case 0xdb:case 0xdc:case 0xdd:case 0xde:case 0xdf:case 0xe0:case 0xe1:case 0xe2:case 0xe3:case 0xe4:case 0xe5:case 0xe6:case 0xe7:case 0xe8:case 0xe9:case 0xea:case 0xeb:case 0xec:case 0xed:case 0xee:case 0xef:return true;case 0xf0:case 0xf1:case 0xf2:case 0xf3:case 0xf4:case 0xf5:case 0xf6:case 0xf7:case 0xf8:case 0xf9:case 0xfa:case 0xfb:case 0xfc:case 0xfd:case 0xfe:case 0xff:skip(1);return true;default :throw new UnsupportedOperationException("0x" + Integer.toHexString(ch));}}  }
class C{  public void waitUntilLocked(Object keys[]){  final boolean isDebugEnabled=logger.isDebugEnabled();  final String title="BucketRegion.waitUntilLocked:";  while (true) {    LockObject foundLock=searchAndLock(keys);    if (foundLock != null) {synchronized (foundLock) {        try {          while (!foundLock.isRemoved()) {            this.partitionedRegion.checkReadiness();            foundLock.wait(1000);            checkForPrimary();          }        } catch (        InterruptedException e) {          if (isDebugEnabled) {            logger.debug("{} interrupted while waiting for {}",title,foundLock,e.getMessage());          }        }        if (isDebugEnabled) {          long waitTime=System.currentTimeMillis() - foundLock.lockedTimeStamp;          logger.debug("{} waited {} ms to lock",title,waitTime,foundLock);        }      }    } else {      break;    }  }}  }
class C{  public void addHeader(String name,String value){  if (this.headers == null) {    this.headers=new ArrayList<HeaderItem>();  }  this.headers.add(new HeaderItem(name,value));}  }
class C{  private void createShader(){  if (mWidth == 0)   return;  if (mBitmapCover == null) {    mBitmapCover=Bitmap.createBitmap(mWidth,mHeight,Bitmap.Config.ARGB_8888);    mBitmapCover.eraseColor(mCoverColor);  }  mCoverScale=((float)mWidth) / (float)mBitmapCover.getWidth();  mBitmapCover=Bitmap.createScaledBitmap(mBitmapCover,(int)(mBitmapCover.getWidth() * mCoverScale),(int)(mBitmapCover.getHeight() * mCoverScale),true);  mBitmapShader=new BitmapShader(mBitmapCover,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);  mCoverPaint=new Paint();  mCoverPaint.setAntiAlias(true);  mCoverPaint.setShader(mBitmapShader);}  }
class C{  @Nullable private IgniteFileSystem startSecondary() throws Exception {  IgniteConfiguration cfg=getConfiguration("grid-secondary",getSecondaryIgfsConfiguration());  cfg.setLocalHost("127.0.0.1");  cfg.setPeerClassLoadingEnabled(false);  Ignite secG=G.start(cfg);  return secG.fileSystem("igfs-secondary");}  }
class C{  public static void error(final String message){  errorLogger.accept(message);}  }
class C{  private void startAuthenticatedSession(HttpServletRequest request,HttpServletResponse response,String oneTimeToken) throws IOException, GeneralSecurityException, AuthenticationException, ServletException {  String sessionToken=exchangeForSessionToken(oneTimeToken);  response.addCookie(newSessionTokenCookie(request,sessionToken));  StringBuffer url=request.getRequestURL();  String queryString=request.getQueryString();  if (queryString != null) {    queryString=queryString.replaceFirst("token=[^&]*&?","");    if (queryString.length() > 0) {      url.append("?").append(queryString);    }  }  response.sendRedirect(response.encodeRedirectURL(url.toString()));}  }
class C{  public static Preferences systemNodeForPackage(Class<?> c){  if (systemNodes != null) {    if (!systemNodes.containsKey(c.getPackage())) {      systemNodes.put(c.getPackage(),new PreferencesUtil(false));    }    return systemNodes.get(c.getPackage());  }  try {    return Preferences.systemNodeForPackage(c);  } catch (  Throwable t) {    if (systemNodes == null) {      systemNodes=new HashMap<Package,Preferences>();    }    return systemNodeForPackage(c);  }}  }
class C{  public BayesIm maximization(double tolerance){  TetradLogger.getInstance().log("details","FactoredBayesStructuralEM.maximization()");  this.tolerance=tolerance;  return iterate();}  }
class C{  protected void changeButtonEnablement(){  IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();  if (buttonRemove != null) {    buttonRemove.setEnabled(!selection.isEmpty());  }  if (buttonEdit != null) {    buttonEdit.setEnabled(selection.size() == 1);  }  if (buttonExplore != null) {    buttonExplore.setEnabled(view.getTrace() != null && !view.getTrace().isTraceEmpty() && tableViewer.getCheckedElements().length > 0);  }}  }
class C{  @Override public String toString(){  if (!isFailed()) {    return groundings.toString();  } else {    return "failed";  }}  }
class C{  private Date lastModificationDate(Note note){  Date latest=new Date(0L);  Date tempCreated, tempStarted, tempFinished;  for (  Paragraph paragraph : note.getParagraphs()) {    tempCreated=paragraph.getDateCreated();    tempStarted=paragraph.getDateStarted();    tempFinished=paragraph.getDateFinished();    if (tempCreated != null && tempCreated.after(latest)) {      latest=tempCreated;    }    if (tempStarted != null && tempStarted.after(latest)) {      latest=tempStarted;    }    if (tempFinished != null && tempFinished.after(latest)) {      latest=tempFinished;    }  }  return latest;}  }
class C{  public boolean worksInBatchModeOnly(){  return getSharedLocalInspectionTool() == null;}  }
class C{  public boolean test(){  if (!isConnected()) {    onError(OneSheeldError.DEVICE_NOT_CONNECTED);    return false;  } else   if (isUpdatingFirmware()) {    onError(OneSheeldError.FIRMWARE_UPDATE_IN_PROGRESS);    return false;  } else   if (hasFirmwareTestStarted || hasLibraryTestStarted) {    Log.i("Device " + this.name + ": device is in the middle of another test.");    return false;  }  Log.i("Device " + this.name + ": Testing the device, both firmware and library.");  String currentMillis=String.valueOf(System.currentTimeMillis());  byte[] bytes=currentMillis.getBytes(Charset.forName("US-ASCII"));  int correctAnswer=0;  for (  byte byteValue : bytes) {    correctAnswer+=(byteValue & 0xFF);  }  correctTestingChallengeAnswer=(byte)(correctAnswer % 256);  hasFirmwareTestStarted=true;  hasLibraryTestStarted=true;  ShieldFrame testingFrame=new ShieldFrame(CONFIGURATION_SHIELD_ID,LIBRARY_TESTING_CHALLENGE_REQUEST);  testingFrame.addArgument("Are you ok?");  testingFrame.addArgument(bytes);synchronized (sendingDataLock) {    sysex(BOARD_TESTING,bytes);    sendShieldFrame(testingFrame);  }  initFirmwareTestingTimeOut();  initLibraryTestingTimeOut();  return true;}  }
class C{  protected void createBox(PhysicsWorld world,FixtureDef fixtureDef,float x,float y,float width,float height){  createBox(world,fixtureDef,x,y,width,height,0);}  }
class C{  public void search(String titleSearchString) throws IOException, ServiceException {  TableQuery query=new TableQuery(tablesFeedUrl);  query.setTitleQuery(titleSearchString);  TableFeed feed=service.query(query,TableFeed.class);  out.println("Results for [" + titleSearchString + "]");  for (  TableEntry entry : feed.getEntries()) {    printAndCacheEntry(entry);  }}  }
class C{  private char peekChar(boolean skipComments){  skipWhitespace(skipComments);  if (pos == data.length) {    throw unexpected("unexpected end of file");  }  return data[pos];}  }
class C{  private int convertBinaryFloatToInt(byte[] data){  if (data == null || data.length != 4)   return 0x0;  int value;  if ((0x80 & data[0]) == 0x80) {    value=((0x7f & data[0]) << 24 | (0xff & data[1]) << 16 | (0xff & data[2]) << 8 | (0xff & data[3]));  } else {    value=~(((0xff & data[0]) << 24 | (0xff & data[1]) << 16 | (0xff & data[2]) << 8 | (0xff & data[3])));  }  return value;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList childNodes;  ProcessingInstruction piNode;  String data;  doc=(Document)load("staff",false);  childNodes=doc.getChildNodes();  piNode=(ProcessingInstruction)childNodes.item(0);  data=piNode.getData();  assertEquals("processinginstructionGetTargetAssert","PIDATA",data);}  }
class C{  public void addAnimation(int id,Animation... animations){  if (mAnimations.get(id) == null) {    mAnimations.put(id,new ArrayList<Animation>(animations.length));    if (id != Animation.FULL_PAGE) {      mAnimatedViews.add(id);    }  }  ArrayList<Animation> anims=mAnimations.get(id);  Collections.addAll(anims,animations);}  }
class C{  public void stopSpinning(){  isSpinning=false;  mProgress=0.0f;  mTargetProgress=0.0f;  invalidate();}  }
class C{  public static boolean checkPassword(String bcryptString,char[] password){  if (bcryptString.length() != 60) {    throw new DataLengthException("Bcrypt String length: " + bcryptString.length() + ", 60 required.");  }  if (bcryptString.charAt(0) != '$' || bcryptString.charAt(3) != '$' || bcryptString.charAt(6) != '$') {    throw new IllegalArgumentException("Invalid Bcrypt String format.");  }  if (!bcryptString.substring(1,3).equals(version)) {    throw new IllegalArgumentException("Wrong Bcrypt version, 2a expected.");  }  int cost=0;  try {    cost=Integer.parseInt(bcryptString.substring(4,6));  } catch (  NumberFormatException nfe) {    throw new IllegalArgumentException("Invalid cost factor:" + bcryptString.substring(4,6));  }  if (cost < 4 || cost > 31) {    throw new IllegalArgumentException("Invalid cost factor: " + cost + ", 4 < cost < 31 expected.");  }  if (password == null) {    throw new IllegalArgumentException("Missing password.");  }  byte[] salt=decodeSaltString(bcryptString.substring(bcryptString.lastIndexOf('$') + 1,bcryptString.length() - 31));  String newBcryptString=generate(password,salt,cost);  return bcryptString.equals(newBcryptString);}  }
class C{  public LocalSaveGameCommand(Server server){  super(server,"localsave","Saves the game to a file on the client.  Usage: /localsave [filename]");}  }
class C{  public String resourceLink(){  return this.resourceReference.getPath();}  }
class C{  public AllDefsEnum(IR ir,Instruction instr){  this.instr=instr;  instructionOperands=instr.getDefs();  if (instr.operator().getNumberOfImplicitDefs() > 0) {    implicitDefs=GenericPhysicalDefUse.enumerate(instr.operator().implicitDefs,ir);  } else {    implicitDefs=null;  }  if (ir.inSSAForm() && (instr.operator() != PHI)) {    heapOperands=ir.HIRInfo.dictionary.getHeapDefs(instr);  } else {    heapOperands=null;  }}  }
class C{  public void test_noCycles_001(){  final int CAPACITY=5;  final TxDag dag=new TxDag(CAPACITY);  final String tx0="tx0";  final String tx1="tx1";  final String tx2="tx2";  final String tx3="tx3";  final String tx4="tx4";  dag.addEdge(tx0,tx1);  dag.addEdge(tx1,tx2);  dag.addEdge(tx3,tx2);  dag.addEdge(tx4,tx1);  dag.addEdge(tx4,tx3);  assertSameEdges(new Edge[]{new Edge(tx0,tx1,false),new Edge(tx1,tx2,false),new Edge(tx3,tx2,false),new Edge(tx4,tx1,false),new Edge(tx4,tx3,false)},dag.getEdges(false));}  }
class C{  public void dial(String phoneNumber){  impl.dial(phoneNumber);}  }
class C{  public void testBasic() throws IOException {  Set<String> fileExtensions=new HashSet<>();  fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_EXTENSION);  fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_INDEX_EXTENSION);  MockDirectoryWrapper primaryDir=new MockDirectoryWrapper(random(),new RAMDirectory());  primaryDir.setCheckIndexOnClose(false);  MockDirectoryWrapper secondaryDir=new MockDirectoryWrapper(random(),new RAMDirectory());  secondaryDir.setCheckIndexOnClose(false);  FileSwitchDirectory fsd=new FileSwitchDirectory(fileExtensions,primaryDir,secondaryDir,true);  IndexWriter writer=new IndexWriter(fsd,new IndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy(false)).setCodec(TestUtil.getDefaultCodec()).setUseCompoundFile(false));  TestIndexWriterReader.createIndexNoClose(true,"ram",writer);  IndexReader reader=DirectoryReader.open(writer);  assertEquals(100,reader.maxDoc());  writer.commit();  String[] files=primaryDir.listAll();  assertTrue(files.length > 0);  for (int x=0; x < files.length; x++) {    String ext=FileSwitchDirectory.getExtension(files[x]);    assertTrue(fileExtensions.contains(ext));  }  files=secondaryDir.listAll();  assertTrue(files.length > 0);  for (int x=0; x < files.length; x++) {    String ext=FileSwitchDirectory.getExtension(files[x]);    assertFalse(fileExtensions.contains(ext));  }  reader.close();  writer.close();  files=fsd.listAll();  for (int i=0; i < files.length; i++) {    assertNotNull(files[i]);  }  fsd.close();}  }
class C{  private void saveName(){  try {    m_project.getConfiguration().setName(m_stdEditPanel.getNameString());  } catch (  final CouldntSaveDataException e) {    CUtilityFunctions.logException(e);    final String innerMessage="E00171: " + "Could not save project name";    final String innerDescription=CUtilityFunctions.createDescription(String.format("The new name of the project '%s' could not be saved.",m_project.getConfiguration().getName()),new String[]{"There was a problem with the database connection."},new String[]{"The project keeps its old name."});    NaviErrorDialog.show(SwingUtilities.getWindowAncestor(CProjectNodeComponent.this),innerMessage,innerDescription,e);  }}  }
class C{  public boolean invalidateIt(){  log.info(toString());  return true;}  }
class C{  public boolean saveXliff(final String lng,File f){  return this.saveAsXliff(lng,f,mainTransLists);}  }
class C{  private LockObject searchAndLock(Object keys[]){  final boolean isDebugEnabled=logger.isDebugEnabled();  LockObject foundLock=null;synchronized (allKeysMap) {    for (int i=0; i < keys.length; i++) {      if (allKeysMap.containsKey(keys[i])) {        foundLock=(LockObject)allKeysMap.get(keys[i]);        if (isDebugEnabled) {          logger.debug("LockKeys: found key: {}:{}",keys[i],foundLock.lockedTimeStamp);        }        foundLock.waiting();        break;      }    }    if (foundLock == null) {      for (int i=0; i < keys.length; i++) {        LockObject lockValue=new LockObject(keys[i],isDebugEnabled ? System.currentTimeMillis() : 0);        allKeysMap.put(keys[i],lockValue);        if (isDebugEnabled) {          logger.debug("LockKeys: add key: {}:{}",keys[i],lockValue.lockedTimeStamp);        }      }    }  }  return foundLock;}  }
class C{  @Override public void run(){  amIActive=true;  String streamsLinkIDHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsLinkIDHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((streamsLinkIDHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streamID=new WhiteboxRaster(streamsLinkIDHeader,"r");    int rows=streamID.getNumberRows();    int cols=streamID.getNumberColumns();    double noData=streamID.getNoDataValue();    double gridResX=streamID.getCellSizeX();    double gridResY=streamID.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    double maxLinkID=streamID.getMaximumValue();    double[] linkLengths=new double[(int)maxLinkID + 1];    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsLinkIDHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    byte numNeighbouringStreamCells=0;    double currentID=0;    double linkLength=0;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streamID.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streamID.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            linkLength=0;            currentID=streamID.getValue(y,x);            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                linkLength+=gridLengths[c];                x+=dX[c];                y+=dY[c];                if (streamID.getValue(y,x) != currentID) {                  linkLengths[(int)(currentID)]=linkLength;                  currentID=streamID.getValue(y,x);                  if (currentID != noData) {                    linkLength=0;                    if (linkLengths[(int)currentID] > 0) {                      flag=false;                    }                  } else {                    flag=false;                  }                }              } else {                linkLengths[(int)currentID]=linkLength;                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streamID.getValue(row,col) > 0) {          currentID=streamID.getValue(row,col);          output.setValue(row,col,linkLengths[(int)currentID]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streamID.close();    output.close();    returnData(outputHeader);    String retData="Stream Link Length Output\n";    for (i=1; i <= maxLinkID; i++) {      retData=retData + i + "\t"+ linkLengths[i]+ "\n";    }    returnData(retData);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static short computeSeedHash(long seed){  long[] seedArr={seed};  short seedHash=(short)((hash(seedArr,0L)[0]) & 0xFFFFL);  if (seedHash == 0) {    throw new SketchesArgumentException("The given seed: " + seed + " produced a seedHash of zero. "+ "You must choose a different seed.");  }  return seedHash;}  }
class C{  public long nextLong(long n){  if (n <= 0) {    throw new IllegalArgumentException("n must be positive");  }  long offset=0;  while (n >= Integer.MAX_VALUE) {    int bits=next(2);    long half=n >>> 1;    long nextn=((bits & 2) == 0) ? half : n - half;    if ((bits & 1) == 0) {      offset+=n - nextn;    }    n=nextn;  }  return offset + nextInt((int)n);}  }
class C{  public static String generateNativeGuid(StorageSystem device){  return String.format("%s+%s",_deviceTypeMap.get(device.getSystemType()),device.getSerialNumber());}  }
class C{  public ListenerList(int mode){  if (mode != EQUALITY && mode != IDENTITY)   throw new IllegalArgumentException();  this.identity=mode == IDENTITY;}  }
class C{  public static Instances remove(Instances D,int indices[],boolean inv) throws Exception {  Remove remove=new Remove();  remove.setAttributeIndicesArray(indices);  remove.setInvertSelection(inv);  remove.setInputFormat(D);  return Filter.useFilter(D,remove);}  }
class C{  public void repaint(long tm,int x,int y,int width,int height){  readyToPaint.set(true);  Component p=getParent();  if (p instanceof MapBean) {    ((MapBean)p).setBufferDirty(true);    if (Debug.debugging("basic")) {      Debug.output(getName() + "|Layer: repaint(tm=" + tm+ ", x="+ x+ ", y="+ y+ ", width="+ width+ ", height="+ height+ ")");    }    ((MapBean)p).repaint(this);  } else   if (p != null) {    p.repaint(tm,x,y,width,height);  } else {    super.repaint(tm,x,y,width,height);  }}  }
class C{  public void extendRows(Assignment assign){  Map<Assignment,Double> newTable=new HashMap<Assignment,Double>();  for (  Assignment row : table.keySet()) {    newTable.put(new Assignment(row,assign),table.get(row));  }  table=newTable;}  }
class C{  protected N4JSValueConverterWithValueException newN4JSValueConverterException(char c,INode node,String value){  if (c == '"')   return new N4JSValueConverterWithValueException(IssueCodes.getMessageForVCO_STRING_DOUBLE_QUOTE(),IssueCodes.VCO_STRING_DOUBLE_QUOTE,node,value,null); else   return new N4JSValueConverterWithValueException(IssueCodes.getMessageForVCO_STRING_QUOTE(),IssueCodes.VCO_STRING_QUOTE,node,value,null);}  }
class C{  public void testHashGeneraton(){  checkHash("",-1484017934);  checkHash("1",-80388575);  checkHash("a",-873690096);  checkHash("Hadoop\u3092\u6bba\u3059",-695300527);  checkHash("key1",-2067461682);  checkHash(true,1669973725);  checkHash(false,-1900934144);  checkHash(3,386050343);  checkHash(1000000000,-547312286);  checkHash(0x7fffffff,473949739);  checkHash(0xffffffff,-1399925094);  checkHash(0x7fffffffffffffffL,201097861);  checkHash(0xffffffffffffffffL,-1484017934);  checkHash(1.4e-45f,1262722378);  checkHash(3.4028235e+38f,1313755354);  checkHash(4.9e-324,1262722378);  checkHash(1.7976931348623157e+308,-783615357);  checkHash(UUID.fromString("4d180911-21c9-48f2-a1e6-7bc1daf588a0"),-440525148);  checkUUID("224ea4cd-f449-4dcb-869a-5317c63bd619",806670090);  checkUUID("fdc9ec54-ff53-4fdb-8239-5a3ac1fb31bd",-354375826);  checkUUID("0f9c9b94-02ae-45a6-9d5c-a066dbdf2636",-1312538272);  checkUUID("d8f1f916-4357-4cfe-a7df-49d4721690bf",-482944041);  checkUUID("d67eb652-4e76-47fb-ad4e-cd902d9b868a",-449444069);  checkUUID("c77ffeae-78a1-4ee6-a0fd-8d197a794412",-168980875);  checkUUID("35de9f21-3c9b-4f4a-a7d5-3e2c6cb01564",-383915637);}  }
class C{  @Override public void addRange(int start,int end){  bitmap.add(start,end);}  }
class C{  void writeHeaders(List<Header> headerBlock) throws IOException {  for (int i=0, size=headerBlock.size(); i < size; i++) {    ByteString name=headerBlock.get(i).name.toAsciiLowercase();    Integer staticIndex=NAME_TO_FIRST_INDEX.get(name);    if (staticIndex != null) {      writeInt(staticIndex + 1,PREFIX_4_BITS,0);      writeByteString(headerBlock.get(i).value);    } else {      out.writeByte(0x00);      writeByteString(name);      writeByteString(headerBlock.get(i).value);    }  }}  }
class C{  public void release(){}  }
class C{  public CoordinateDMS toDMS(){  throw new UnsupportedOperationException();}  }
class C{  public BESplitPaneDivider(BasicSplitPaneUI ui){  super(ui);  oneTouchSize=DefaultLookup.getInt(ui.getSplitPane(),ui,"SplitPane.oneTouchButtonSize",ONE_TOUCH_SIZE);}  }
class C{  protected void initBuffers(){  m_ValueBuffer=new double[m_Data.numAttributes()];  m_IndicesBuffer=new int[m_Data.numAttributes()];  m_stringAttIndices=new ArrayList<Integer>();  if (m_Data.checkForStringAttributes()) {    for (int i=0; i < m_Data.numAttributes(); i++) {      if (m_Data.attribute(i).isString()) {        m_stringAttIndices.add(i);      }    }  }}  }
class C{  @Override public boolean isValidEntity(Entity entity,IGame game,boolean useValidNonInfantryCheck){  final boolean oldDone=entity.done;  entity.done=false;  final boolean result=super.isValidEntity(entity,game,useValidNonInfantryCheck);  entity.done=oldDone;  return result;}  }
class C{  @Override protected void preInsert(RdKNNEntry entry){  KNNHeap knns_o=DBIDUtil.newHeap(settings.k_max);  preInsert(entry,getRootEntry(),knns_o);}  }
class C{  public boolean isThursday(){  return thursday;}  }
class C{  public static void write(char[] c,int len){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(len <= c.length);  for (int i=0; i < len; i++) {    add(c[i]);  }}  }
class C{  @Override public void buildCircuits(){  logger=Logger.getLogger(getThreadDependentLoggername());  logger.info("Building circuits by breadth first search");  set_logic_circuits(new ArrayList<LogicCircuit>());  LogicCircuit lc=get_unassigned_lc();  LogicCircuitUtil.sortGatesByStage(lc);  for (  Gate g : lc.get_output_gates()) {    Evaluate.refreshGateAttributes(g,get_gate_library());  }  ArrayList<ArrayList<String>> curr_asns=new ArrayList<ArrayList<String>>();  curr_asns.add(new ArrayList<String>());  for (int gi=0; gi < get_unassigned_lc().get_logic_gates().size(); gi++) {    ArrayList<ArrayList<String>> next_asns=new ArrayList<ArrayList<String>>();    for (    ArrayList<String> curr_asn : curr_asns) {      for (int i=0; i < curr_asn.size(); ++i) {        Gate g=lc.get_logic_gates().get(i);        g.Name=curr_asn.get(i);        Evaluate.refreshGateAttributes(g,get_gate_library());        g.set_unvisited(true);        Evaluate.simulateRPU(g,get_gate_library(),get_options());        Evaluate.evaluateGate(g,get_options());      }      Gate gc=lc.get_logic_gates().get(gi);      for (      Gate libgate : get_gate_library().get_GATES_BY_TYPE().get(gc.Type).values()) {        gc.Name="null";        Evaluate.refreshGateAttributes(gc,get_gate_library());        if (!currentlyAssignedGroup(lc,libgate.Group)) {          gc.Name=libgate.Name;          Evaluate.refreshGateAttributes(gc,get_gate_library());          gc.set_unvisited(true);          Evaluate.simulateRPU(gc,get_gate_library(),get_options());          Evaluate.evaluateGate(gc,get_options());          if (get_options().is_check_roadblocking()) {            if (get_roadblock().numberRoadblocking(lc,get_gate_library()) > 0) {              continue;            }          }          if (get_options().is_toxicity()) {            gc.set_toxtable(get_gate_library().get_GATES_BY_NAME().get(gc.Name).get_toxtable());            Toxicity.evaluateGateToxicity(gc);            if (Toxicity.mostToxicRow(gc) < get_options().get_toxicity_threshold()) {              continue;            }          }          if (get_options().is_noise_margin()) {            if (!gc.get_scores().is_noise_margin_contract()) {              continue;            }          }          if (gc.get_scores().get_onoff_ratio() < get_options().get_gate_onoff_threshold()) {          }          ArrayList<String> pass_asn=new ArrayList<String>(curr_asn);          pass_asn.add(gc.Name);          next_asns.add(new ArrayList<String>(pass_asn));        }      }    }    curr_asns.clear();    curr_asns=next_asns;    Integer[] gate_indexes_assigned=new Integer[gi + 1];    for (int i=0; i < (gi + 1); ++i) {      gate_indexes_assigned[i]=(i + 1);    }    logger.info("Assignments for gates " + Arrays.toString(gate_indexes_assigned) + ": "+ curr_asns.size());  }  logger.info("\nScoring all assignments...");  for (  ArrayList<String> assignment : curr_asns) {    LogicCircuit temp_deep_copy=new LogicCircuit(lc);    lc=temp_deep_copy;    LogicCircuitUtil.sortGatesByStage(lc);    for (int i=0; i < assignment.size(); ++i) {      String gate_name=assignment.get(i);      Gate g=lc.get_logic_gates().get(i);      g.Name=gate_name;    }    Evaluate.evaluateCircuit(lc,get_gate_library(),get_options());    Toxicity.evaluateCircuitToxicity(lc,get_gate_library());    LogicCircuitUtil.sortGatesByIndex(lc);    get_logic_circuits().add(lc);  }}  }
class C{  public EditableOMText(){  createGraphic(null);}  }
class C{  public PDFRenderer(PDFPage page,Canvas g,RectF imgbounds,RectF clip,int bgColor){  super();  this.page=page;  this.g=g;  this.imageinfo=new ImageInfo((int)imgbounds.width(),(int)imgbounds.height(),clip,bgColor);  g.translate(imgbounds.left,imgbounds.top);  this.cmdCnt=0;}  }
class C{  private void handleProjection(Object t){  try {    Object p=getProjectedObject(t);    if (remainder.isConnected()) {      Object r=getRemainderObject(t);      remainder.emit(r);      remainderTuples++;    }    projected.emit(p);    projectedTuples++;  } catch (  IllegalAccessException e) {    error.emit(t);    errorTuples++;  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:49.902 -0500",hash_original_method="433F66024AB5F11DDEF8BAC7248248B0",hash_generated_method="909BCDEC255E3C10659E5129D1CB9A5B") public String toString(){  StringBuffer toString=new StringBuffer().append("Thread Name: ").append(thread.getName()).append(", Alive: ").append(thread.isAlive());  return toString.toString();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ATTRIBUTE___SIMPLE_ATTRIBUTE_1:    getSimpleAttribute_1().clear();  return;case UmplePackage.ATTRIBUTE___AUTOUNIQUE_ATTRIBUTE_1:getAutouniqueAttribute_1().clear();return;case UmplePackage.ATTRIBUTE___DERIVED_ATTRIBUTE_1:getDerivedAttribute_1().clear();return;case UmplePackage.ATTRIBUTE___COMPLEX_ATTRIBUTE_1:getComplexAttribute_1().clear();return;}super.eUnset(featureID);}  }
class C{  public WindowDimensions(Rectangle rec,Insets ins,boolean isClient){  if (rec == null) {    throw new IllegalArgumentException("Client bounds can't be null");  }  isClientSizeSet=isClient;  this.loc=rec.getLocation();  this.size=rec.getSize();  setInsets(ins);}  }
class C{  protected Field(String name,IndexableFieldType type){  if (name == null) {    throw new IllegalArgumentException("name must not be null");  }  this.name=name;  if (type == null) {    throw new IllegalArgumentException("type must not be null");  }  this.type=type;}  }
class C{  public SampledCounterConfig(int intervalSecs,int historySize,boolean isResetOnSample,long initialValue){  super(initialValue);  if (intervalSecs < 1) {    throw new IllegalArgumentException("Interval (" + intervalSecs + ") must be greater than or equal to 1");  }  if (historySize < 1) {    throw new IllegalArgumentException("History size (" + historySize + ") must be greater than or equal to 1");  }  this.intervalSecs=intervalSecs;  this.historySize=historySize;  this.isReset=isResetOnSample;}  }
class C{  private HashMap<String,List<StorageHADomain>> discoverNasServers(StorageSystem system,VNXeApiClient client,Map<String,URI> nasServerIdMap,StringSet arraySupportedProtocols) throws VNXeException {  HashMap<String,List<StorageHADomain>> allNasServers=new HashMap<String,List<StorageHADomain>>();  List<StorageHADomain> newNasServers=new ArrayList<StorageHADomain>();  List<StorageHADomain> existingNasServers=new ArrayList<StorageHADomain>();  boolean isNFSSupported=false;  boolean isCIFSSupported=false;  boolean isBothSupported=false;  _logger.info("Start NasServer discovery for storage system {}",system.getId());  List<VNXeNasServer> nasServers=client.getNasServers();  List<VNXeCifsServer> cifsServers=client.getCifsServers();  List<VNXeNfsServer> nfsServers=client.getNfsServers();  for (  VNXeNasServer nasServer : nasServers) {    StorageHADomain haDomain=null;    if (null == nasServer) {      _logger.debug("Null data mover in list of port groups.");      continue;    }    if (nasServer.getMode() == VNXeNasServer.NasServerModeEnum.DESTINATION) {      _logger.debug("Found a replication destination NasServer");      continue;    }    if (nasServer.getIsSystem()) {      continue;    }    StringSet protocols=new StringSet();    URIQueryResultList results=new URIQueryResultList();    String adapterNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,nasServer.getName(),NativeGUIDGenerator.ADAPTER);    _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStorageHADomainByNativeGuidConstraint(adapterNativeGuid),results);    if (results.iterator().hasNext()) {      StorageHADomain tmpDomain=_dbClient.queryObject(StorageHADomain.class,results.iterator().next());      if (tmpDomain.getStorageDeviceURI().equals(system.getId())) {        haDomain=tmpDomain;        _logger.debug("Found duplicate {} ",nasServer.getName());      }    }    if (cifsServers != null && !cifsServers.isEmpty()) {      for (      VNXeCifsServer cifsServer : cifsServers) {        if (cifsServer.getNasServer().getId().equals(nasServer.getId())) {          protocols.add(StorageProtocol.File.CIFS.name());          isCIFSSupported=true;          break;        }      }    }    if (nfsServers != null && !nfsServers.isEmpty()) {      for (      VNXeNfsServer nfsServer : nfsServers) {        if (nfsServer.getNasServer().getId().equals(nasServer.getId())) {          protocols.add(StorageProtocol.File.NFS.name());          isNFSSupported=true;          break;        }      }    }    if (protocols.size() == 2) {      isBothSupported=true;    }    if (haDomain == null) {      haDomain=new StorageHADomain();      haDomain.setId(URIUtil.createId(StorageHADomain.class));      haDomain.setNativeGuid(adapterNativeGuid);      haDomain.setStorageDeviceURI(system.getId());      haDomain.setAdapterName(nasServer.getName());      haDomain.setName(nasServer.getName());      haDomain.setSerialNumber(nasServer.getId());      haDomain.setFileSharingProtocols(protocols);      newNasServers.add(haDomain);    } else {      haDomain.setFileSharingProtocols(protocols);      existingNasServers.add(haDomain);    }    nasServerIdMap.put(nasServer.getId(),haDomain.getId());  }  if (isBothSupported) {    arraySupportedProtocols.add(StorageProtocol.File.NFS.name());    arraySupportedProtocols.add(StorageProtocol.File.CIFS.name());  } else   if (isNFSSupported && isCIFSSupported) {    arraySupportedProtocols.add(StorageProtocol.File.NFS_OR_CIFS.name());  } else   if (isNFSSupported) {    arraySupportedProtocols.add(StorageProtocol.File.NFS.name());  } else   if (isCIFSSupported) {    arraySupportedProtocols.add(StorageProtocol.File.CIFS.name());  }  _logger.info("NasServer discovery for storage system {} complete.",system.getId());  for (  StorageHADomain newDomain : newNasServers) {    _logger.info("New NasServer : {} : {}",newDomain.getNativeGuid(),newDomain.getId());  }  for (  StorageHADomain domain : existingNasServers) {    _logger.info("Existing NasServer : {} : {}",domain.getNativeGuid(),domain.getId());  }  allNasServers.put(NEW,newNasServers);  allNasServers.put(EXISTING,existingNasServers);  return allNasServers;}  }
class C{  public ICUNormalizer2FilterFactory(Map<String,String> args){  super(args);  String name=get(args,"name","nfkc_cf");  String mode=get(args,"mode",Arrays.asList("compose","decompose"),"compose");  Normalizer2 normalizer=Normalizer2.getInstance(null,name,"compose".equals(mode) ? Normalizer2.Mode.COMPOSE : Normalizer2.Mode.DECOMPOSE);  String filter=get(args,"filter");  if (filter != null) {    UnicodeSet set=new UnicodeSet(filter);    if (!set.isEmpty()) {      set.freeze();      normalizer=new FilteredNormalizer2(normalizer,set);    }  }  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }  this.normalizer=normalizer;}  }
class C{  public static ServerLocator createServerLocatorWithoutHA(final DiscoveryGroupConfiguration groupConfiguration){  return new ServerLocatorImpl(false,groupConfiguration);}  }
class C{  public void killTarget(Object target,int tweenType){  for (int i=0, n=objects.size(); i < n; i++) {    BaseTween<?> obj=objects.get(i);    obj.killTarget(target,tweenType);  }}  }
class C{  public TimerWorker(){  total=new AtomicLong();  callsNumber=new AtomicLong();  minimum=new AtomicLong();  maximum=new AtomicLong();}  }
class C{  public <T>T putLru(final Object key,T value,Integer size){  if (mLruCache != null) {    mLruCache.putWrap(key,value,size);  }  return value;}  }
class C{  public JSONArray optJSONArray(String key){  Object o=this.opt(key);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  public static void updateRestoredClone(Volume volume,VolumeClone deviceClone,DbClient dbClient,boolean updateDb){  volume.setReplicaState(deviceClone.getReplicationState().name());  if (updateDb) {    dbClient.updateObject(volume);  }}  }
class C{  public TestSubscriber(Subscriber<? super Payload> actual,Long initialRequest,Long maxAwait){  this.actual=actual;  this.initialRequest=initialRequest;  this.values=new ArrayList<>();  this.errors=new ArrayList<Throwable>();  this.done=new CountDownLatch(1);  this.maxAwait=maxAwait;}  }
class C{  public void drawArc(int x,int y,int width,int height,int startAngle,int arcAngle){  mGraphics.drawArc(x,y,width,height,startAngle,arcAngle);}  }
class C{  public void onDataConnectionStateChanged(int state,int networkType){}  }
class C{  private boolean ruleR10(Node a,Node c,Graph graph){  List<Node> intoCArrows=graph.getNodesInTo(c,Endpoint.ARROW);  for (  Node b : intoCArrows) {    if (b == a) {      continue;    }    if (!(graph.getEndpoint(c,b) == Endpoint.TAIL)) {      continue;    }    for (    Node d : intoCArrows) {      if (d == a || d == b) {        continue;      }      if (!(graph.getEndpoint(d,c) == Endpoint.TAIL)) {        continue;      }      List<List<Node>> ucPdPsToB=getUcPdPaths(a,b,graph);      List<List<Node>> ucPdPsToD=getUcPdPaths(a,d,graph);      for (      List<Node> u1 : ucPdPsToB) {        Node m=u1.get(1);        for (        List<Node> u2 : ucPdPsToD) {          Node n=u2.get(1);          if (m.equals(n)) {            continue;          }          if (graph.isAdjacentTo(m,n)) {            continue;          }          logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("R10",graph.getEdge(c,a)));          graph.setEndpoint(c,a,Endpoint.TAIL);          changeFlag=true;          return true;        }      }    }  }  return false;}  }
class C{  public void defualtTest(){  Capacity c=new Capacity();  TestCase.assertEquals(Capacity.DEFAULT_BODY_COUNT,c.getBodyCount());  TestCase.assertEquals(Capacity.DEFAULT_JOINT_COUNT,c.getJointCount());  TestCase.assertEquals(Capacity.DEFAULT_LISTENER_COUNT,c.getListenerCount());}  }
class C{  public PriorityQueue(Collection<? extends E> c){  if (c instanceof PriorityQueue) {    getFromPriorityQueue((PriorityQueue<? extends E>)c);  } else   if (c instanceof SortedSet) {    getFromSortedSet((SortedSet<? extends E>)c);  } else {    initSize(c);    addAll(c);  }}  }
class C{  public double[] distributionForInstance(Instance instance) throws Exception {  return m_Classifier.distributionForInstance(instance);}  }
class C{  public static void checkSQLRestriction(DatasourceConnection dc,SQL sql) throws PageException {  Array sqlparts=ListUtil.listToArrayRemoveEmpty(SQLUtil.removeLiterals(sql.getSQLString())," \t" + System.getProperty("line.separator"));  DataSource ds=dc.getDatasource();  if (!ds.hasAllow(DataSource.ALLOW_ALTER))   checkSQLRestriction(dc,"alter",sqlparts,sql);  if (!ds.hasAllow(DataSource.ALLOW_CREATE))   checkSQLRestriction(dc,"create",sqlparts,sql);  if (!ds.hasAllow(DataSource.ALLOW_DELETE))   checkSQLRestriction(dc,"delete",sqlparts,sql);  if (!ds.hasAllow(DataSource.ALLOW_DROP))   checkSQLRestriction(dc,"drop",sqlparts,sql);  if (!ds.hasAllow(DataSource.ALLOW_GRANT))   checkSQLRestriction(dc,"grant",sqlparts,sql);  if (!ds.hasAllow(DataSource.ALLOW_INSERT))   checkSQLRestriction(dc,"insert",sqlparts,sql);  if (!ds.hasAllow(DataSource.ALLOW_REVOKE))   checkSQLRestriction(dc,"revoke",sqlparts,sql);  if (!ds.hasAllow(DataSource.ALLOW_SELECT))   checkSQLRestriction(dc,"select",sqlparts,sql);  if (!ds.hasAllow(DataSource.ALLOW_UPDATE))   checkSQLRestriction(dc,"update",sqlparts,sql);}  }
class C{  public void attrRemoved(Attr node,String oldv){  if (!mutate) {    value=null;  }}  }
class C{  private void sharePicture(WXShareContent content,WXMediaMessage msg,SendMessageToWX.Req req){  WXImageObject wxImageObject=new WXImageObject();  msg.mediaObject=wxImageObject;  req.transaction=buildTransaction("image");  req.message=msg;  req.scene=content.getScene();  shareAsync(content.getImage_url(),req,false);}  }
class C{  public static void updateRpSystemsConnectivity(Collection<URI> storageSystemUris,DbClient dbClient){  if (storageSystemUris.isEmpty()) {    return;  }  List<URI> connectedRPSystems=getConnectedRPSystems(storageSystemUris,dbClient);  List<ProtectionSystem> rpSystems=dbClient.queryObject(ProtectionSystem.class,connectedRPSystems);  for (  ProtectionSystem rpSystem : rpSystems) {    updateRpSystemConnectivity(rpSystem,dbClient);  }}  }
class C{  protected void reportException(String methodCall,SQLException exception,String sql){  log.exceptionOccured(this,methodCall,exception,sql,-1L);}  }
class C{  @SuppressWarnings("unchecked") public static <V extends NumberVector,T extends NumberVector>Relation<V> relationUglyVectorCast(Relation<T> database){  return (Relation<V>)database;}  }
class C{  public void changedUpdate(DocumentEvent e){}  }
class C{  public ExtractMethodRefactoring(CompilationUnit astRoot,int selectionStart,int selectionLength){  this((ICompilationUnit)astRoot.getTypeRoot(),selectionStart,selectionLength);  fRoot=astRoot;}  }
class C{  public GameObject(GameObject gameObject,int id){  super(gameObject,id);  this.sceneGraph=gameObject.sceneGraph;  this.name=gameObject.name + "_copy";  this.active=gameObject.active;  if (tags != null) {    Array<String> newTags=new Array<String>();    for (    String t : gameObject.tags) {      newTags.add(t);    }    this.tags=newTags;  }  this.components=new Array<Component>();  for (  Component c : gameObject.components) {    this.components.add(c.clone(this));  }  setParent(gameObject.parent);}  }
class C{  private void handleHtmlNewNotebookForm(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String title=servletText.pageTitleNewNotebook();  if (addTitle(requestAndResponse,title)) {    return;  }  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,title,false);  pageWrapper.addHeader();  final boolean userIsSignedIn=isUserSignedIn(requestAndResponse);  if (!userIsSignedIn && !allowSaveIfNotSignedIn) {    requestAndResponse.print(servletText.errorRequiresSignIn(allowSaveIfNotSignedIn));  } else   if (userIsSignedIn && isUsersAccountClosed(requestAndResponse)) {    requestAndResponse.print(servletText.errorAccountIsClosed());  } else {    if (!userIsSignedIn) {      requestAndResponse.print(servletText.sentenceAllowSaveIfNotSignedIn());    }    requestAndResponse.print("<script type=\"text/javascript\">\n" + "function saveNote() {\n" + "  if(document.getElementById(\"note\").value.trim() == \"\") {\n"+ "    setResponseErrorMessage(errorBlankNote(), \"createResponse\");\n"+ "  } else {\n"+ "    document.getElementById(\"putNote\").submit();\n"+ "  }\n"+ "}\n"+ "</script>");    requestAndResponse.print("<form action=\"/makeNotebook\" id=\"putNote\" method=\"POST\">" + "<table class=\"nopadding\"><tr><td colspan=\"2\">" + "<input type=\"text\" id=\"note\" name=\"note\" placeholder=\"" + servletText.labelYourNotebookTitle() + "\" autofocus>"+ "</td></tr>"+ "<tr><td>"+ "<input type=\"checkbox\" name=\"isPublic\" id=\"isPublic\"><label for=\"isPublic\">"+ servletText.labelAnyoneCanReadThis()+ "</label>"+ "<input type=\"hidden\" name=\"csrft\" value=\""+ getCsrft(requestAndResponse)+ "\">"+ "</td></tr>"+ "<tr><td><div id=\"createResponse\"></div></td>"+ "<td><button id=\"save\" class=\"specialbutton\" onclick=\"saveNote(); return false;\">"+ servletText.buttonSave()+ "</button></td></tr></table></form>");  }  pageWrapper.addFooter();}  }
class C{  public static long zigZagEncode(long l){  return (l >> 63) ^ (l << 1);}  }
class C{  public void log(Level level,String msg){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msg);  doLog(lr);}  }
class C{  private Token<HtmlTokenType> collapseSubsequent(Token<HtmlTokenType> token) throws ParseException {  Token<HtmlTokenType> collapsed=token;  for (Token<HtmlTokenType> next; (next=peekToken(0)) != null && next.type == token.type; readToken()) {    collapsed=join(collapsed,next);  }  return collapsed;}  }
class C{  final public TermNode p(){  return (TermNode)get(1);}  }
class C{  @Override public void apply(HGNode node,int nodeIndex){  extract(node.bestHyperedge.getRule(),node.i);}  }
class C{  public static Scale percentiles(){  return scale(100);}  }
class C{  public SplitCasesParamsEditor(){}  }
class C{  public void testNotOne(){  byte rBytes[]={-2};  BigInteger aNumber=BigInteger.ONE;  BigInteger result=aNumber.not();  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public static boolean isTradingDay(ZonedDateTime date){  if (isHoliday(date)) {    return false;  }  if (null != NONTRADINGDAYS) {    for (    int hol : NONTRADINGDAYS) {      if (hol == date.getDayOfWeek().getValue()) {        return false;      }    }  }  return true;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.LESS_OP___LESS_OP_1:    setLessOp_1(LESS_OP_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public Coord position(int posX,int posY){  double longitude=coord(1.0 * posX / dimension.getWidth(),bbox.getSouthWest().getLongitude(),bbox.getNorthEast().getLongitude());  double latitude=coord(1.0 * posY / dimension.getHeight(),bbox.getSouthWest().getLatitude(),bbox.getNorthEast().getLatitude());  return new Coord(latitude,longitude,bbox.getSouthWest().isProjected());}  }
class C{  public NodeList applyTo(String xpathSpec,Document doc){  return new NodeList(XPathCache.getXPath(xpathSpec).applyTo(doc),false);}  }
class C{  private static SpeechletResponse buildSpeechletResponse(String output){  String title="Package Tracker";  SimpleCard card=new SimpleCard();  card.setTitle(title);  card.setContent(output);  PlainTextOutputSpeech speech=new PlainTextOutputSpeech();  speech.setText(output);  SpeechletResponse response=new SpeechletResponse();  response.setShouldEndSession(false);  response.setOutputSpeech(speech);  response.setCard(card);  return response;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XObject expr1=m_left.execute(xctxt);  if (!expr1.bool()) {    XObject expr2=m_right.execute(xctxt);    return expr2.bool() ? XBoolean.S_TRUE : XBoolean.S_FALSE;  } else   return XBoolean.S_TRUE;}  }
class C{  @SuppressWarnings("rawtypes") public static AbstractLiteralIV createInlineIV(final BigInteger value){  if (value.compareTo(MAX_UNSIGNED_LONG_AS_BIGINT) >= 0) {    return new XSDIntegerIV(value);  }  return createInlineIV(value.longValue());}  }
class C{  public boolean isValid(int playerId,Entity entity,IGame game){  return (playerId == this.playerId) && isValidEntity(entity,game);}  }
class C{  private void givenTwoResaleOrganizationsOneUnpublishedProduct() throws Exception {  createSupplierProductAndSubscriptions(true);  createBrokerProductAndSubscriptions(true);  createBrokerProductAndUnpublish(true);  createResellerProductAndSubscriptions(true);  createResellerProductAndUnpublish(true);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.SEXPERIMENT__NAME:    return getName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public WrapElement(String wrapString,Element e){  this(wrapString,null,e);}  }
class C{  public void toArray(Object[] values){  if (values.length < size)   throw new IllegalArgumentException("values too small");  if (this.isNoView)   System.arraycopy(this.elements,0,values,0,this.elements.length); else   super.toArray(values);}  }
class C{  public boolean isAddressWatched(Address address){  Script script=ScriptBuilder.createOutputScript(address);  return isWatchedScript(script);}  }
class C{  public void insertLast(ASTNode node,TextEditGroup editGroup){  if (node == null) {    throw new IllegalArgumentException();  }  internalInsertAt(node,-1,true,editGroup);}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  private boolean sameType(Object flowSet){  return (flowSet instanceof ArraySparseSet);}  }
class C{  private void markTryBlocks(ExceptionHandlerMap exceptions){  int[] tryStartPC=exceptions.getStartPC();  int[] tryEndPC=exceptions.getEndPC();  int tryLength=tryStartPC.length;  int tryBlockNum=0;  for (int i=0; i < tryLength; i++) {    for (int j=tryStartPC[i]; j < tryEndPC[i]; j++) {      if (byteToBlockMap[j] != BasicBlock.NOTBLOCK) {        if (tryBlockNum != byteToBlockMap[j]) {          tryBlockNum=byteToBlockMap[j];          basicBlocks[tryBlockNum].setState(BasicBlock.TRYBLOCK);        }      }    }  }}  }
class C{  public static Future<JDialog> inspect(Tree t,Parser parser){  List<String> ruleNames=parser != null ? Arrays.asList(parser.getRuleNames()) : null;  return inspect(t,ruleNames);}  }
class C{  public void addRecurrenceDates(RecurrenceDates recurrenceDates){  addProperty(recurrenceDates);}  }
class C{  public List<ConflictImportDTO> organizeImports(IJavaProject project,String fqn) throws CoreException, BadLocationException {  ICompilationUnit compilationUnit=prepareCompilationUnit(project,fqn);  return createOrganizeImportOperation(compilationUnit,null);}  }
class C{  @SuppressWarnings({"cast","unchecked"}) @ApiMethod(httpMethod="GET") public final List<Offer> listOffers(final User user){  return ofy().load().type(Offer.class).list();}  }
class C{  public SAMLRedirectURLExceptionBean(ApplicationExceptionBean sup,ReasonEnum reason){  super(sup);  setReason(reason);}  }
class C{  protected void tearDown(){  try {    ds.close();    sds.close();  } catch (  Exception e) {  }}  }
class C{  @SuppressWarnings("deprecation") private void handleScreenOff(){  mSpeechController.setScreenIsOn(false);  mMenuManager.dismissAll();  final SpannableStringBuilder builder=new SpannableStringBuilder(mContext.getString(R.string.value_screen_off));  if (isIdle()) {    appendRingerStateAnnouncement(builder);  }  mShakeDetector.pausePolling();  if (mRingerMode == AudioManager.RINGER_MODE_NORMAL) {    final int soundId;    final float volume;    final float musicVolume=getStreamVolume(AudioManager.STREAM_MUSIC);    if ((musicVolume > 0) && (mAudioManager.isWiredHeadsetOn() || mAudioManager.isBluetoothA2dpOn())) {      final float ringVolume=getStreamVolume(AudioManager.STREAM_RING);      soundId=R.raw.volume_beep;      volume=Math.min(1.0f,(ringVolume / musicVolume));    } else {      soundId=R.raw.volume_beep;      volume=1.0f;    }    mFeedbackController.playAuditory(soundId,1.0f,volume);  }  mSpeechController.speak(builder,SpeechController.QUEUE_MODE_INTERRUPT,FeedbackItem.FLAG_NO_HISTORY,null);}  }
class C{  @Override protected void onPostExecute(Void notUsed){  super.onPostExecute(notUsed);  statusText.setText(String.format(Locale.US,"%,d places, %,d highways and %,d countries created",this.numPlacesCreated,this.numHighwaysCreated,this.numCountriesCreated));  getWorldWindow().requestRedraw();}  }
class C{  public FitWidthImageView(Context paramContext){  super(paramContext);}  }
class C{  public CsvReader(BufferedReader reader){  this.reader=new BufferedReader(reader);}  }
class C{  @Override public void onServiceDisconnected(AbstractProviderConnection connection){  Log.w(TAG,"Provider disconnected, rebinding before it's too late");  connection.bindService();}  }
class C{  public static LocalTime fromCalendarFields(Calendar calendar){  if (calendar == null) {    throw new IllegalArgumentException("The calendar must not be null");  }  return new LocalTime(calendar.get(Calendar.HOUR_OF_DAY),calendar.get(Calendar.MINUTE),calendar.get(Calendar.SECOND),calendar.get(Calendar.MILLISECOND));}  }
class C{  @Override public Boolean visitPrimitive_Primitive(final AnnotatedPrimitiveType type1,final AnnotatedPrimitiveType type2,final VisitHistory visited){  return arePrimeAnnosEqual(type1,type2);}  }
class C{  protected void deleteLink(Link link,String reason){  if (link == null)   return;  List<Link> linkList=new ArrayList<Link>();  linkList.add(link);  deleteLinks(linkList,reason);}  }
class C{  public void push(ClassNode type){  stack.add(type);}  }
class C{  public static double[] kolmogorovSmirnov(DataSet dataSet,ContinuousVariable variable){  int n=dataSet.getNumRows();  int columnIndex=dataSet.getColumn(variable);  Normal idealDistribution=getNormal(dataSet,variable);  double ks[]=new double[6];  for (int i=1; i < 6; i++) {    ks[i]=estimateKSCriticalValue(i,n);  }  double[] _data=dataSet.getDoubleData().getColumn(columnIndex).toArray();  List<Double> _leaveOutMissing=new ArrayList<>();  for (int i=0; i < _data.length; i++) {    if (!Double.isNaN(_data[i])) {      _leaveOutMissing.add(_data[i]);    }  }  double[] data=new double[_leaveOutMissing.size()];  for (int i=0; i < _leaveOutMissing.size(); i++)   data[i]=_leaveOutMissing.get(i);  Arrays.sort(data);  double d=0.0;  for (int i=1; i <= n; i++) {    double x=data[i - 1];    double idealValue=idealDistribution.cdf(x);    double difference=Math.abs(idealValue - ((double)i / n));    if (difference > d) {      d=difference;    }  }  ks[0]=d;  return ks;}  }
class C{  protected void drawSimpleEdge(RenderContext<V,E> rc,Layout<V,E> layout,E e){  int[] coords=new int[4];  boolean[] loop=new boolean[1];  Shape edgeShape=prepareFinalEdgeShape(rc,layout,e,coords,loop);  int x1=coords[0];  int y1=coords[1];  int x2=coords[2];  int y2=coords[3];  boolean isLoop=loop[0];  GraphicsDecorator g=rc.getGraphicsContext();  Graph<V,E> graph=layout.getGraph();  boolean edgeHit=true;  boolean arrowHit=true;  Rectangle deviceRectangle=null;  JComponent vv=rc.getScreenDevice();  if (vv != null) {    Dimension d=vv.getSize();    deviceRectangle=new Rectangle(0,0,d.width,d.height);  }  MutableTransformer vt=rc.getMultiLayerTransformer().getTransformer(Layer.VIEW);  if (vt instanceof LensTransformer) {    vt=((LensTransformer)vt).getDelegate();  }  edgeHit=vt.transform(edgeShape).intersects(deviceRectangle);  if (edgeHit == true) {    Paint oldPaint=g.getPaint();    Paint fill_paint=rc.getEdgeFillPaintTransformer().apply(e);    if (fill_paint != null) {      g.setPaint(fill_paint);      g.fill(edgeShape);    }    Paint draw_paint=rc.getEdgeDrawPaintTransformer().apply(e);    if (draw_paint != null) {      g.setPaint(draw_paint);      g.draw(edgeShape);    }    float scalex=(float)g.getTransform().getScaleX();    float scaley=(float)g.getTransform().getScaleY();    if (scalex < .3 || scaley < .3)     return;    if (rc.getEdgeArrowPredicate().apply(Context.<Graph<V,E>,E>getInstance(graph,e))) {      Stroke new_stroke=rc.getEdgeArrowStrokeTransformer().apply(e);      Stroke old_stroke=g.getStroke();      if (new_stroke != null)       g.setStroke(new_stroke);      Shape destVertexShape=rc.getVertexShapeTransformer().apply(graph.getEndpoints(e).getSecond());      AffineTransform xf=AffineTransform.getTranslateInstance(x2,y2);      destVertexShape=xf.createTransformedShape(destVertexShape);      arrowHit=rc.getMultiLayerTransformer().getTransformer(Layer.VIEW).transform(destVertexShape).intersects(deviceRectangle);      if (arrowHit) {        AffineTransform at=edgeArrowRenderingSupport.getArrowTransform(rc,edgeShape,destVertexShape);        if (at == null)         return;        Shape arrow=rc.getEdgeArrowTransformer().apply(Context.<Graph<V,E>,E>getInstance(graph,e));        arrow=at.createTransformedShape(arrow);        g.setPaint(rc.getArrowFillPaintTransformer().apply(e));        g.fill(arrow);        g.setPaint(rc.getArrowDrawPaintTransformer().apply(e));        g.draw(arrow);      }      if (graph.getEdgeType(e) == EdgeType.UNDIRECTED) {        Shape vertexShape=rc.getVertexShapeTransformer().apply(graph.getEndpoints(e).getFirst());        xf=AffineTransform.getTranslateInstance(x1,y1);        vertexShape=xf.createTransformedShape(vertexShape);        arrowHit=rc.getMultiLayerTransformer().getTransformer(Layer.VIEW).transform(vertexShape).intersects(deviceRectangle);        if (arrowHit) {          AffineTransform at=edgeArrowRenderingSupport.getReverseArrowTransform(rc,edgeShape,vertexShape,!isLoop);          if (at == null)           return;          Shape arrow=rc.getEdgeArrowTransformer().apply(Context.<Graph<V,E>,E>getInstance(graph,e));          arrow=at.createTransformedShape(arrow);          g.setPaint(rc.getArrowFillPaintTransformer().apply(e));          g.fill(arrow);          g.setPaint(rc.getArrowDrawPaintTransformer().apply(e));          g.draw(arrow);        }      }      if (new_stroke != null)       g.setStroke(old_stroke);    }    g.setPaint(oldPaint);  }}  }
class C{  public GPUImageDilationFilter(int radius){  this(getVertexShader(radius),getFragmentShader(radius));}  }
class C{  public Telephone(){  super(TELEPHONE_REGEX,4,false,1.0);}  }
class C{  public static String keyStrokeToText(KeyStroke keyStroke){  String mod=KeyEvent.getKeyModifiersText(keyStroke.getModifiers());  String key=KeyEvent.getKeyText(keyStroke.getKeyCode());  if (mod.isEmpty()) {    return key;  }  return mod + "+" + key;}  }
class C{  public boolean isComplete(){  return _isComplete;}  }
class C{  @SuppressLint("NewApi") public LongHashSet(LongHashSet map){  m_mask=map.m_mask;  m_fillFactor=map.m_fillFactor;  m_threshold=map.m_threshold;  m_size=map.m_size;  m_hasFreeKey=map.m_hasFreeKey;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {    m_data=Arrays.copyOf(map.m_data,map.m_data.length);  } else {    m_data=new long[map.m_data.length];    System.arraycopy(map.m_data,0,m_data,0,m_data.length);  }}  }
class C{  public MeasurementDistribution(double actualValue,double pValue){  this.actualValue=actualValue;  this.pValue=pValue;}  }
class C{  public StreamAcl build(){  readRoles=(readRoles != null) ? unmodifiableList(readRoles) : null;  writeRoles=(writeRoles != null) ? unmodifiableList(writeRoles) : null;  deleteRoles=(deleteRoles != null) ? unmodifiableList(deleteRoles) : null;  metaReadRoles=(metaReadRoles != null) ? unmodifiableList(metaReadRoles) : null;  metaWriteRoles=(metaWriteRoles != null) ? unmodifiableList(metaWriteRoles) : null;  return new StreamAcl(this);}  }
class C{  public DataInputStream(java.io.InputStream in){  super(in);}  }
class C{  public void mergeWithExistingNoCoref(Annotation existingAnnotation,Collection<? extends Annotation> annotations){  for (  Annotation a : annotations) {    addMergeToHistory(existingAnnotation,a);  }  remove(annotations);}  }
class C{  public boolean equals(Object x){  if (x == this)   return true;  if (!(x instanceof BigInteger))   return false;  BigInteger xInt=(BigInteger)x;  if (xInt.signum != signum)   return false;  int[] m=mag;  int len=m.length;  int[] xm=xInt.mag;  if (len != xm.length)   return false;  for (int i=0; i < len; i++)   if (xm[i] != m[i])   return false;  return true;}  }
class C{  public VelocityContext(){  this(null,null);}  }
class C{  private boolean createSCSIInitiatorsAndStoragePorts(StorageSystem storageSystem,String protectionDomainName,DiscoveredDataObject.CompatibilityStatus compatibilityStatus,String installationId,List<ScaleIOScsiInitiator> allSCSIInitiators,List<ScaleIOSDC> allSDCs,List<StoragePort> ports) throws IOException {  boolean hasSCSIInitiators=false;  if (allSDCs != null && allSCSIInitiators != null && !allSCSIInitiators.isEmpty()) {    List<String> initiatorsToAddToNetwork=new ArrayList<>();    String networkId=String.format("%s-IP",installationId);    Network networkForSCSIInitiators=createIPNetworkForSCSIInitiators(networkId);    for (    ScaleIOScsiInitiator scsiInit : allSCSIInitiators) {      String id=scsiInit.getId();      String iqn=scsiInit.getIqn();      Initiator initiator=createSCSIInitiator(iqn,id);      if (!networkForSCSIInitiators.hasEndpoint(initiator.getInitiatorPort())) {        initiatorsToAddToNetwork.add(initiator.getInitiatorPort());      }      hasSCSIInitiators=true;    }    if (!initiatorsToAddToNetwork.isEmpty()) {      networkForSCSIInitiators.addEndpoints(initiatorsToAddToNetwork,true);      _dbClient.updateAndReindexObject(networkForSCSIInitiators);    }    List<StoragePort> iSCSIPorts=createSCSIStoragePorts(storageSystem,protectionDomainName,compatibilityStatus,networkForSCSIInitiators,allSDCs);    ports.addAll(iSCSIPorts);  }  return hasSCSIInitiators;}  }
class C{  @POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @RequiresRole(role=Role.ADMINISTRATOR) public TenantDTO create(TenantDTO tenantDTO){  Validate.notNull(tenantDTO.getCredentials(),sm.getString("valid.not.null","tenant credentials"));  Validate.notEmpty(tenantDTO.getCredentials().getCertificates(),sm.getString("valid.not.empty","trusted certificates"));  Validate.notNull(tenantDTO.getCredentials().getPrivateKey(),sm.getString("valid.not.null","signing certificate"));  try {    Tenant tenantToCreate=TenantMapper.getTenant(tenantDTO);    PrincipalId adminId=PrincipalUtil.fromName(tenantDTO.getUsername());    getIDMClient().addTenant(tenantToCreate,adminId.getName(),tenantDTO.getPassword().toCharArray());    try {      List<CertificateDTO> signatureCerts=tenantDTO.getCredentials().getCertificates();      PrivateKeyDTO tenantPrivateKey=tenantDTO.getCredentials().getPrivateKey();      getIDMClient().setTenantCredentials(tenantDTO.getName(),CertificateMapper.getCertificates(signatureCerts),tenantPrivateKey.getPrivateKey());    } catch (    Exception e) {      try {        getIDMClient().deleteTenant(tenantDTO.getName());      } catch (      Exception e1) {        log.error("Failed to delete tenant '{}' after failed creation due to a server side error",tenantDTO.getName(),e1);        throw new InternalServerErrorException(sm.getString("ec.500"),e1);      }      throw e;    }    return TenantMapper.getTenantDTO(getIDMClient().getTenant(tenantDTO.getName()));  } catch (  DuplicateTenantException|DTOMapperException|InvalidArgumentException e) {    log.warn("Failed to create tenant '{}' due to a client side error",tenantDTO.getName(),e);    throw new BadRequestException(sm.getString("res.ten.create.failed",tenantDTO.getName()),e);  }catch (  Exception e) {    log.error("Failed to create tenant '{}' due to a server side error",tenantDTO.getName(),e);    throw new InternalServerErrorException(sm.getString("ec.500"),e);  }}  }
class C{  public IdentityHashMap(int maxSize){  if (maxSize < 0) {    throw new IllegalArgumentException("maxSize < 0: " + maxSize);  }  size=0;  threshold=getThreshold(maxSize);  elementData=newElementArray(computeElementArraySize());}  }
class C{  @Override public TermJobInfo execute(String[] params){  try {    TermJobInfo termJobInfo=new TermJobInfo();    CommandLine commandLine=getCommandLine(params,PARAMS_STRUCTURE);    String pid=commandLine.getOptionValue("process-id");    LOGGER.debug("processId is " + pid);    termJobInfo.setProcessId(Integer.parseInt(pid));    jobDAO.termJob(termJobInfo.getProcessId());    ProcessInfo processInfo=new ProcessInfo();    com.wipro.ats.bdre.md.dao.jpa.Process process=new com.wipro.ats.bdre.md.dao.jpa.Process();    process.setProcessId(Integer.parseInt(pid));    process=processDAO.get(Integer.parseInt(pid));    processInfo.setProcessName(process.getProcessName());    DateFormat dateFormat=new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");    Date date=new Date();    String termMessage=" --processId=" + termJobInfo.getProcessId() + "  --stage=parent"+ "  --status=fail"+ "  --processName="+ process.getProcessName()+ "  --endTs="+ (dateFormat.format(date)).toString();    try {      BasicConfigurator.configure();      StatusNotification statusNotification=new StatusNotification(termMessage,MDConfig.getProperty("status-notification.term-queue"));      LOGGER.info(statusNotification.toString());    } catch (    Exception e) {      LOGGER.error("Error occurred while notifying job status",e);    }    return termJobInfo;  } catch (  Exception e) {    LOGGER.error("Error occurred",e);    throw new MetadataException(e);  }}  }
class C{  public boolean isNamespaceAware(){  return true;}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public static Throwable sanitize(Throwable t){  if (!Boolean.getBoolean("groovy.full.stacktrace")) {    StackTraceElement[] trace=t.getStackTrace();    List<StackTraceElement> newTrace=new ArrayList<StackTraceElement>();    for (    StackTraceElement stackTraceElement : trace) {      if (isApplicationClass(stackTraceElement.getClassName())) {        newTrace.add(stackTraceElement);      }    }    STACK_LOG.log(Level.WARNING,"Sanitizing stacktrace:",t);    StackTraceElement[] clean=new StackTraceElement[newTrace.size()];    newTrace.toArray(clean);    t.setStackTrace(clean);  }  return t;}  }
class C{  protected void addAttribute(Element parent,Attribute att){  Element node;  Element child;  Element property;  Element label;  String tmpStr;  Enumeration<?> enm;  int i;  node=m_Document.createElement(TAG_ATTRIBUTE);  parent.appendChild(node);  node.setAttribute(ATT_NAME,validContent(att.name()));switch (att.type()) {case Attribute.NUMERIC:    node.setAttribute(ATT_TYPE,VAL_NUMERIC);  break;case Attribute.DATE:node.setAttribute(ATT_TYPE,VAL_DATE);break;case Attribute.NOMINAL:node.setAttribute(ATT_TYPE,VAL_NOMINAL);break;case Attribute.STRING:node.setAttribute(ATT_TYPE,VAL_STRING);break;case Attribute.RELATIONAL:node.setAttribute(ATT_TYPE,VAL_RELATIONAL);break;default :node.setAttribute(ATT_TYPE,"???");}if (att.isNominal()) {child=m_Document.createElement(TAG_LABELS);node.appendChild(child);enm=att.enumerateValues();while (enm.hasMoreElements()) {tmpStr=enm.nextElement().toString();label=m_Document.createElement(TAG_LABEL);child.appendChild(label);label.appendChild(m_Document.createTextNode(validContent(tmpStr)));}}if (att.isDate()) {node.setAttribute(ATT_FORMAT,validContent(att.getDateFormat()));}if (m_Instances.classIndex() > -1) {if (att == m_Instances.classAttribute()) {node.setAttribute(ATT_CLASS,VAL_YES);}}if ((att.getMetadata() != null) && (att.getMetadata().size() > 0)) {child=m_Document.createElement(TAG_METADATA);node.appendChild(child);enm=att.getMetadata().propertyNames();while (enm.hasMoreElements()) {tmpStr=enm.nextElement().toString();property=m_Document.createElement(TAG_PROPERTY);child.appendChild(property);property.setAttribute(ATT_NAME,validContent(tmpStr));property.appendChild(m_Document.createTextNode(validContent(att.getMetadata().getProperty(tmpStr,""))));}}if (att.isRelationValued()) {child=m_Document.createElement(TAG_ATTRIBUTES);node.appendChild(child);for (i=0; i < att.relation().numAttributes(); i++) {addAttribute(child,att.relation().attribute(i));}}}  }
class C{  void popSpaceHandling(){  m_spacePreserveStack.pop();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  long timeout=getLong(stack);  java.util.ArrayList servers=new java.util.ArrayList();  if (Sage.DBG)   System.out.println("Sending out discovery packets to find SageTVPlaceshifter/Extender Servers...");  java.net.DatagramSocket sock=null;  try {    try {      sock=new java.net.DatagramSocket(8271);    } catch (    java.net.BindException be2) {      sock=new java.net.DatagramSocket();    }    java.net.DatagramPacket pack=new java.net.DatagramPacket(new byte[512],512);    byte[] data=pack.getData();    data[0]='S';    data[1]='T';    data[2]='V';    data[3]=1;    if (Sage.EMBEDDED)     data[4]=99;    pack.setLength(32);    sock.setBroadcast(true);    pack.setAddress(java.net.InetAddress.getByName("255.255.255.255"));    pack.setPort(31100);    sock.send(pack);    long startTime=System.currentTimeMillis();    do {      int currTimeout=(int)Math.max(1,(startTime + timeout) - System.currentTimeMillis());      sock.setSoTimeout(currTimeout);      sock.receive(pack);      if (pack.getLength() >= 4) {        if (Sage.DBG)         System.out.println("Discovery packet received:" + pack);        if (data[0] == 'S' && data[1] == 'T' && data[2] == 'V' && (data[3] == 2 || (data[3] == 3 && Sage.EMBEDDED))) {          String had=pack.getAddress().getHostAddress();          if (!IOUtils.isLocalhostAddress(pack.getAddress()) && (!Sage.EMBEDDED || !pack.getAddress().getHostAddress().equals(LinuxUtils.getIPAddress()))) {            StringBuffer si=new StringBuffer();            String theName=Sage.EMBEDDED ? null : pack.getAddress().getHostName();            if (Sage.EMBEDDED) {              try {                jcifs.netbios.NbtAddress[] netadds=jcifs.netbios.NbtAddress.getAllByAddress(had);                for (int i=0; i < netadds.length; i++) {                  if (!netadds[i].isGroupAddress()) {                    theName=netadds[i].getHostName();                    break;                  }                }              } catch (              java.net.UnknownHostException uhe) {                System.out.println("Error in netbios naming discovery:" + uhe);              }            }            si.append(theName == null ? had : theName);            si.append(";");            si.append(had);            if (data[3] == 3) {              si.append(":" + SageTV.DEFAULT_SAGETV_PORT);            }{            }            if (Sage.DBG)             System.out.println("Added server info:" + si);            servers.add(si.toString());          }        }      }    } while (true);  } catch (  Exception e) {  } finally {    if (sock != null) {      try {        sock.close();      } catch (      Exception e) {      }      sock=null;    }  }  return servers.toArray(Pooler.EMPTY_STRING_ARRAY);}  }
class C{  private static int bytes_to_short(byte[] buffer,int offset){  int fByte=(0x000000FF & ((int)buffer[offset]));  int sByte=(0x000000FF & ((int)buffer[offset + 1]));  return ((fByte << 8 | sByte)) & 0xFFFF;}  }
class C{  public void testLearnIntermediate() throws Exception {  KeyStore.PrivateKeyEntry pke=TestKeyStore.getServer().getPrivateKey("RSA","RSA");  X509Certificate[] chain3=(X509Certificate[])pke.getCertificateChain();  X509Certificate root=chain3[2];  X509Certificate intermediate=chain3[1];  X509Certificate server=chain3[0];  X509Certificate[] chain2=new X509Certificate[]{server,intermediate};  X509Certificate[] chain1=new X509Certificate[]{server};  assertValid(chain3,trustManager(root));  assertValid(chain2,trustManager(root));  assertInvalid(chain1,trustManager(root));  assertValid(chain3,trustManager(intermediate));  assertValid(chain2,trustManager(intermediate));  assertValid(chain1,trustManager(intermediate));  assertValid(chain3,trustManager(server));  assertValid(chain2,trustManager(server));  assertValid(chain1,trustManager(server));  X509TrustManager tm=trustManager(root);  assertInvalid(chain1,tm);  assertValid(chain2,tm);  assertValid(chain1,tm);}  }
class C{  public JSONObject increment(String key) throws JSONException {  Object value=this.opt(key);  if (value == null) {    this.put(key,1);  } else   if (value instanceof BigInteger) {    this.put(key,((BigInteger)value).add(BigInteger.ONE));  } else   if (value instanceof BigDecimal) {    this.put(key,((BigDecimal)value).add(BigDecimal.ONE));  } else   if (value instanceof Integer) {    this.put(key,(Integer)value + 1);  } else   if (value instanceof Long) {    this.put(key,(Long)value + 1);  } else   if (value instanceof Double) {    this.put(key,(Double)value + 1);  } else   if (value instanceof Float) {    this.put(key,(Float)value + 1);  } else {    throw new JSONException("Unable to increment [" + quote(key) + "].");  }  return this;}  }
class C{  private History(){}  }
class C{  @Override protected void initListeners(){  this.mainRv.addOnScrollListener(this.getRecyclerViewOnScrollListener());  this.mainAdapter.setOnItemClickListener(null);}  }
class C{  public void appendBits(int value,int numBits){  if (numBits < 0 || numBits > 32) {    throw new IllegalArgumentException("Num bits must be between 0 and 32");  }  ensureCapacity(size + numBits);  for (int numBitsLeft=numBits; numBitsLeft > 0; numBitsLeft--) {    appendBit(((value >> (numBitsLeft - 1)) & 0x01) == 1);  }}  }
class C{  public int numAnnotations(){  return ByteArray.readU16bit(info,0);}  }
class C{  private void hideInfo(int delay){  mHandler.sendEmptyMessageDelayed(FADE_OUT_INFO,delay);}  }
class C{  public synchronized void freeInstance(DTMIterator obj){  m_freeStack.add(obj);}  }
class C{  public static void deleteNotes(Context context,String host,String hash) throws IOException, JSONException, AuthenticatorException {  NoteDataSource dataSource=NoteDataSource.getInstance(context);  List<Note> deletedNotes=dataSource.getNotes(DatabaseContract.NoteEntry.NOTE_STATUS.deleted);  for (  Note note : deletedNotes) {    deleteNote(host,hash,note);    dataSource.deleteNote(note);  }}  }
class C{  public void addEdge(final EdgeType edge){  Preconditions.checkNotNull(edge,"Edge argument can not be null");  m_edges.add(edge);  updateNodeToEdgeMapping(edge);}  }
class C{  public Collection<GraphNode> computeNodes(){  return collapser.computeNodes();}  }
class C{  public Engine createEngine(){  return new Engine(invoke(embeddedCreateEngine),core);}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof BitVector) {    if (this == obj) {      return true;    }    BitVector set=(BitVector)obj;    int n=bits.length;    if (n != set.bits.length)     return false;    for (int i=n; i-- > 0; ) {      if (bits[i] != set.bits[i]) {        return false;      }    }    return true;  }  return false;}  }
class C{  private int tailingNonNewline(char[] cbuf,int off,int len){  for (int cnt=0; cnt < len; cnt++) {    final int pos=off + (len - 1) - cnt;    if (cbuf[pos] == UNIX_NEWLINE) {      return cnt;    }    if (cbuf[pos] == CARRIAGE_RETURN) {      return cnt;    }  }  return len;}  }
class C{  private CaseStruct findExactMatch(FacesContext ctx,String viewId,String fromAction,String outcome,String toFlowDocumentId,Map<String,Set<NavigationCase>> navMap){  Set<NavigationCase> caseSet=navMap.get(viewId);  if (caseSet == null) {    return null;  }  CaseStruct result=determineViewFromActionOutcome(ctx,caseSet,fromAction,outcome,toFlowDocumentId);  if (null != result) {    FlowHandler flowHandler=ctx.getApplication().getFlowHandler();    if (null != flowHandler) {      result.currentFlow=flowHandler.getCurrentFlow(ctx);      result.newFlow=result.currentFlow;    }  }  return result;}  }
class C{  public static void save(Bitmap src,String fileName) throws ImageSaveException {  saveJpeg(src,fileName,JPEG_QUALITY);}  }
class C{  private ReliableSpoolFileEventReader(File spoolDirectory,String completedSuffix,String ignorePattern,String targetPattern,String targetYoungestFileName,String trackerDirPath,boolean annotateFileName,String fileNameHeader,boolean annotateBaseName,String baseNameHeader,String deserializerType,Context deserializerContext,String deletePolicy,String inputCharset,DecodeErrorPolicy decodeErrorPolicy,ConsumeOrder consumeOrder,String targetFilename) throws IOException {  Preconditions.checkNotNull(spoolDirectory);  Preconditions.checkNotNull(completedSuffix);  Preconditions.checkNotNull(ignorePattern);  Preconditions.checkNotNull(targetPattern);  Preconditions.checkNotNull(targetYoungestFileName);  Preconditions.checkNotNull(targetFilename);  Preconditions.checkNotNull(trackerDirPath);  Preconditions.checkNotNull(deserializerType);  Preconditions.checkNotNull(deserializerContext);  Preconditions.checkNotNull(deletePolicy);  Preconditions.checkNotNull(inputCharset);  if (!deletePolicy.equalsIgnoreCase(DeletePolicy.NEVER.name()) && !deletePolicy.equalsIgnoreCase(DeletePolicy.IMMEDIATE.name())) {    throw new IllegalArgumentException("Delete policies other than " + "NEVER and IMMEDIATE are not yet supported");  }  if (logger.isDebugEnabled()) {    logger.debug("Initializing {} with directory={}, metaDir={}, " + "deserializer={}",new Object[]{ReliableSpoolFileEventReader.class.getSimpleName(),spoolDirectory,trackerDirPath,deserializerType});  }  Preconditions.checkState(spoolDirectory.exists(),"Directory does not exist: " + spoolDirectory.getAbsolutePath());  Preconditions.checkState(spoolDirectory.isDirectory(),"Path is not a directory: " + spoolDirectory.getAbsolutePath());  try {    File canary=File.createTempFile("flume-spooldir-perm-check-",".canary",spoolDirectory);    Files.write("testing flume file permissions\n",canary,Charsets.UTF_8);    List<String> lines=Files.readLines(canary,Charsets.UTF_8);    Preconditions.checkState(!lines.isEmpty(),"Empty canary file %s",canary);    if (!canary.delete()) {      throw new IOException("Unable to delete canary file " + canary);    }    logger.debug("Successfully created and deleted canary file: {}",canary);  } catch (  IOException e) {    throw new FlumeException("Unable to read and modify files" + " in the spooling directory: " + spoolDirectory,e);  }  this.spoolDirectory=spoolDirectory;  this.completedSuffix=completedSuffix;  this.deserializerType=deserializerType;  this.deserializerContext=deserializerContext;  this.annotateFileName=annotateFileName;  this.fileNameHeader=fileNameHeader;  this.annotateBaseName=annotateBaseName;  this.baseNameHeader=baseNameHeader;  this.ignorePattern=Pattern.compile(ignorePattern);  this.targetPattern=Pattern.compile(targetPattern);  this.targetYoungestFileName=targetYoungestFileName;  this.targetFilename=targetFilename;  this.deletePolicy=deletePolicy;  this.inputCharset=Charset.forName(inputCharset);  this.decodeErrorPolicy=Preconditions.checkNotNull(decodeErrorPolicy);  this.consumeOrder=Preconditions.checkNotNull(consumeOrder);  logger.info("target youngest file name is : " + this.targetYoungestFileName);  File trackerDirectory=new File(trackerDirPath);  if (!trackerDirectory.isAbsolute()) {    trackerDirectory=new File(spoolDirectory,trackerDirPath);  }  if (!trackerDirectory.exists()) {    if (!trackerDirectory.mkdir()) {      throw new IOException("Unable to mkdir nonexistent meta directory " + trackerDirectory);    }  }  if (!trackerDirectory.isDirectory()) {    throw new IOException("Specified meta directory is not a directory" + trackerDirectory);  }  this.metaFile=new File(trackerDirectory,metaFileName);}  }
class C{  private IsEquivalent(final T[] lhs){  this.lhs=Arrays.asList(lhs);}  }
class C{  @SuppressWarnings("unchecked") public void writeTimestamp(java.sql.Timestamp x) throws SQLException {  attribs.add(x);}  }
class C{  private String parseString(String info){  String retValue=info;  if (m_maxLength > 0 && retValue.length() > m_maxLength)   retValue=retValue.substring(0,m_maxLength);  StringBuffer out=new StringBuffer(retValue.length());  for (int i=0; i < retValue.length(); i++) {    char c=retValue.charAt(i);    if (c == '\'')     out.append("''"); else     if (c == '\\')     out.append("\\\\"); else     out.append(c);  }  return out.toString();}  }
class C{  void load(final InputStream in) throws IOException {  final Encoder codec=new Encoder();  String s;  final BufferedReader r=new BufferedReader(new InputStreamReader(in,"UTF-8"));  clear();  while ((s=r.readLine()) != null) {    add(Profile.decode(codec.decode(s)));  }}  }
class C{  public static boolean contains(char[] self,Object value){  for (  char next : self) {    if (DefaultTypeTransformation.compareEqual(value,next))     return true;  }  return false;}  }
class C{  void handleRequest(ByteBuf buffer){  long requestId=buffer.readLong();  try {    Object request=readRequest(buffer);    HandlerHolder handler=handlers.get(request.getClass());    if (handler != null) {      handler.context.executor().execute(null);    } else {      handleRequestFailure(requestId,new SerializationException("unknown message type: " + request.getClass()),this.context);    }  } catch (  SerializationException e) {    handleRequestFailure(requestId,e,this.context);  } finally {    buffer.release();  }}  }
class C{  public void init(VariableScope el,Parameter[] parameters){  if (!clear)   throw new GroovyBugError("CompileStack#init called without calling clear before");  clear=false;  pushVariableScope(el);  defineMethodVariables(parameters,el.isInStaticContext());  this.className=BytecodeHelper.getTypeDescription(controller.getClassNode());}  }
class C{  public X509CRLHolder(InputStream crlStream) throws IOException {  this(parseStream(crlStream));}  }
class C{  private MForecastLine importForecast(X_I_Forecast ifl){  MForecastLine fl=new MForecastLine(getCtx(),ifl.getM_ForecastLine_ID(),get_TrxName());  MForecast f=(MForecast)ifl.getM_Forecast();  if (fl == null || fl.get_ID() <= 0) {    fl=new MForecastLine(Env.getCtx(),0,get_TrxName());    fl.setAD_Org_ID(ifl.getAD_Org_ID());    fl.setM_Forecast_ID(ifl.getM_Forecast_ID());    fl.setM_Product_ID(ifl.getM_Product_ID());    fl.setM_Warehouse_ID(ifl.getM_Warehouse_ID());  }  fl.setQty(ifl.getQty());  fl.setIsActive(true);  fl.setSalesRep_ID(ifl.getSalesRep_ID());  fl.setDatePromised(ifl.getDatePromised());  fl.setPP_Period_ID(MPPPeriod.findByCalendar(getCtx(),ifl.getDatePromised(),f.getPP_Calendar_ID(),get_TrxName()).get_ID());  fl.saveEx();  isImported=true;  return fl;}  }
class C{  public void testNegPosFirstShorter(){  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  int aSign=-1;  int bSign=1;  byte rBytes[]={0,-128,9,56,100,0,0,1,1,90,1,-32,0,10,-126,21,82,-31,-95};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append(getSeqNo()).append(": ").append(getRegistrationAttribute()).append("=").append(getName());  return sb.toString();}  }
class C{  public String[][] parse(InputStream r) throws IOException {  return parse(new InputStreamReader(r));}  }
class C{  private void logMandatoryWarning(DiagnosticPosition pos,String msg,Object... args){  if (enforceMandatory)   log.mandatoryWarning(lintCategory,pos,msg,args); else   log.warning(lintCategory,pos,msg,args);}  }
class C{  public String toString(){  return getClass().getName() + "[dropPoint=" + getDropPoint()+ ","+ "index="+ index+ ","+ "bias="+ bias+ "]";}  }
class C{  public R reduce(R r1,R r2){  return r1;}  }
class C{  public static Button createCheckButton(Composite parent,String label,Image image,boolean checked,int hspan){  Button button=new Button(parent,SWT.CHECK);  button.setFont(parent.getFont());  button.setSelection(checked);  if (image != null) {    button.setImage(image);  }  if (label != null) {    button.setText(label);  }  GridData gd=new GridData();  gd.horizontalSpan=hspan;  button.setLayoutData(gd);  setButtonDimensionHint(button);  return button;}  }
class C{  public static <T>void addToRequestQueue(Request<T> req,String tag){  req.setTag(TextUtils.isEmpty(tag) ? TAG : tag);  getRequestQueue().add(req);}  }
class C{  public void clearObserveRelations(){  for (  ObserveRelation relation : observeRelations) {    relation.cancel();  }}  }
class C{  public S_Global createS_Global(){  S_GlobalImpl s_Global=new S_GlobalImpl();  return s_Global;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void store(double value){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public void insertInOrder(int value){  for (int i=0; i < m_firstFree; i++) {    if (value < m_map[i]) {      insertElementAt(value,i);      return;    }  }  addElement(value);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:02.914 -0500",hash_original_method="D3E525F6B574030796E656911FFC55CD",hash_generated_method="118C65E13828C54F00900E8E296208A9") public void removeDuration(){  super.removeParameter(DURATION);}  }
class C{  public synchronized void lockWhen(int desiredState) throws InterruptedException {  while (state != desiredState) {    wait();  }  lock();}  }
class C{  private void generateChart(Stack<String> stack,int numberOfSegments){  String[] categories=new String[numberOfSegments];  double von=0.0;  double incr=24.0 / numberOfSegments;  for (int i=0; i < categories.length; i++) {    categories[i]=Double.toString(von).substring(0,2);    von=von + incr;  }  double[] values=new double[numberOfSegments];  int counter2=0;  int size=stack.size();  for (int i=0; i < size; i++) {    int time=Integer.parseInt(stack.pop().substring(0,2));    values[time]=values[time] + 1.0;    counter2++;  }  double totalValue=0;  for (int i=0; i < values.length; i++) {    totalValue=totalValue + values[i];  }  BarChart chart=new BarChart("Departure Time Distribution LKW 10%","departure time [h]","number of vehicles",categories);  chart.addSeries("departure time",values);  chart.saveAsPng("C:/Documents and Settings/bvitins/Desktop/Chart.png",800,600);}  }
class C{  public void scrollToTop(){  if (mScrollbar.isThumbDetached()) {    mScrollbar.reattachThumbToScroll();  }  scrollToPosition(0);  if (mElevationController != null) {    mElevationController.reset();  }}  }
