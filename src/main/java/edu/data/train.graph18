class C{  public void swap(){  mv.visitInsn(Opcodes.SWAP);}  }
class C{  public <R>MapStream<K,R> mapValue(Function<? super V,? extends R> mapper){  return new MapStream<>(inner.map(null));}  }
class C{  public void paintComponent(Graphics g){  super.paintComponent(g);  Rectangle raOuter=getBounds();  Rectangle raInner=getParent().getBounds();  g.setColor(Color.red);  g.drawRect(-raOuter.x + 12,-raOuter.y + 12,raInner.width - 24,raInner.height - 24);}  }
class C{  protected boolean shouldSelect(Transaction tx){  if (tx != null) {    return isSelectable(tx);  }  return true;}  }
class C{  public Transit createNewTransit(String systemName,String userName){  if ((systemName == null) || (systemName.length() < 1)) {    return null;  }  String sysName=systemName;  if ((sysName.length() < 2) || (!sysName.substring(0,2).equals("IZ"))) {    sysName="IZ" + sysName;  }  Transit z;  if (userName != null && !userName.equals("")) {    z=getByUserName(userName);    if (z != null) {      return null;    }  }  String sName=sysName.toUpperCase().trim();  z=getBySystemName(sysName);  if (z == null) {    z=getBySystemName(sName);  }  if (z != null) {    return null;  }  z=new Transit(sName,userName);  register(z);  return z;}  }
class C{  public void start() throws IllegalStateTransitionException {  assertStateTransitionsAllowed();  if (state != AdapterState.OPENED) {    throw new IllegalStateTransitionException("Cannot start from the " + state + " state");  }  state=AdapterState.STARTED;}  }
class C{  public void closeDriver(){  if (camera != null) {    FlashlightManager.disableFlashlight();    camera.release();    camera=null;  }}  }
class C{  public JavaParser(ParserConfiguration configuration){  commentsInserter=new CommentsInserter(configuration);}  }
class C{  public static Object[] generateExampleForArrayProperty(ArrayProperty value,Map<String,Model> definitions,MarkupDocBuilder markupDocBuilder,Map<String,Integer> refStack){  Property property=value.getItems();  if (property.getExample() != null) {    return new Object[]{property.getExample()};  } else   if (property instanceof ArrayProperty) {    return new Object[]{generateExampleForArrayProperty((ArrayProperty)property,definitions,markupDocBuilder,refStack)};  } else   if (property instanceof RefProperty) {    return new Object[]{generateExampleForRefModel(true,((RefProperty)property).getSimpleRef(),definitions,markupDocBuilder,refStack)};  } else {    return new Object[]{PropertyUtils.generateExample(property,markupDocBuilder)};  }}  }
class C{  public static Mapping<UUID> uuid(Constraint... constraints){  return new FieldMapping(InputMode.SINGLE,mkSimpleConverter(null),new MappingMeta("uuid",UUID.class)).constraint(checking(null,"error.uuid",true)).constraint(constraints);}  }
class C{  static TransferDFragment newInstance(){  TransferDFragment f=new TransferDFragment();  return f;}  }
class C{  public static JSONObject GetForJson(String uriStr,String deviceBssid,HeaderPair... headers){  return MeshCommunicationUtils.HttpGet(uriStr,deviceBssid,headers);}  }
class C{  public static BufferedInputStream createGzipInputStream(File file,boolean async) throws IOException {  final InputStream inStream;  if (async) {    inStream=new GzipAsynchInputStream(file);  } else {    inStream=GzipUtils.createGzipInputStream(new BufferedInputStream(new FileInputStream(file)));  }  return new BufferedInputStream(inStream);}  }
class C{  private void updateTask(Protos.TaskStatus status){  if (!exists(status.getTaskId())) {    LOGGER.warn("Could not find task in cluster state.");    return;  }  try {    Protos.TaskInfo taskInfo=getTask(status.getTaskId());    LOGGER.debug("Updating task status for executor: " + status.getExecutorId().getValue() + " ["+ status.getTaskId().getValue()+ ", "+ status.getTimestamp()+ ", "+ status.getState()+ "]");    update(status);    if (taskInError(status)) {      LOGGER.error("Task in error state. Removing state for executor: " + status.getExecutorId().getValue() + ", due to: "+ status.getState());      removeTask(taskInfo);    }  } catch (  IllegalStateException|IllegalArgumentException e) {    LOGGER.error("Unable to write executor state to zookeeper",e);  }}  }
class C{  @Override public boolean read(GlowChunk chunk) throws IOException {  int x=chunk.getX(), z=chunk.getZ();  RegionFile region=cache.getRegionFile(x,z);  int regionX=x & REGION_SIZE - 1;  int regionZ=z & REGION_SIZE - 1;  if (!region.hasChunk(regionX,regionZ)) {    return false;  }  DataInputStream in=region.getChunkDataInputStream(regionX,regionZ);  CompoundTag levelTag;  try (NBTInputStream nbt=new NBTInputStream(in,false)){    CompoundTag root=nbt.readCompound();    levelTag=root.getCompound("Level");  }   List<CompoundTag> sectionList=levelTag.getCompoundList("Sections");  ChunkSection[] sections=new ChunkSection[16];  for (  CompoundTag sectionTag : sectionList) {    int y=sectionTag.getByte("Y");    byte[] rawTypes=sectionTag.getByteArray("Blocks");    NibbleArray extTypes=sectionTag.containsKey("Add") ? new NibbleArray(sectionTag.getByteArray("Add")) : null;    NibbleArray data=new NibbleArray(sectionTag.getByteArray("Data"));    NibbleArray blockLight=new NibbleArray(sectionTag.getByteArray("BlockLight"));    NibbleArray skyLight=new NibbleArray(sectionTag.getByteArray("SkyLight"));    char[] types=new char[rawTypes.length];    for (int i=0; i < rawTypes.length; i++) {      types[i]=(char)((extTypes == null ? 0 : extTypes.get(i)) << 12 | (rawTypes[i] & 0xff) << 4 | data.get(i));    }    sections[y]=new ChunkSection(types,skyLight,blockLight);  }  chunk.initializeSections(sections);  chunk.setPopulated(levelTag.getBool("TerrainPopulated"));  if (levelTag.isByteArray("Biomes")) {    chunk.setBiomes(levelTag.getByteArray("Biomes"));  }  if (levelTag.isIntArray("HeightMap")) {    chunk.setHeightMap(levelTag.getIntArray("HeightMap"));  } else {    chunk.automaticHeightMap();  }  if (levelTag.isList("Entities",TagType.COMPOUND)) {    for (    CompoundTag entityTag : levelTag.getCompoundList("Entities")) {      try {        EntityStorage.loadEntity(chunk.getWorld(),entityTag);      } catch (      Exception e) {        String id=entityTag.isString("id") ? entityTag.getString("id") : "<missing>";        if (e.getMessage() != null && e.getMessage().startsWith("Unknown entity type to load:")) {          GlowServer.logger.warning("Unknown entity in " + chunk + ": "+ id);        } else {          GlowServer.logger.log(Level.WARNING,"Error loading entity in " + chunk + ": "+ id,e);        }      }    }  }  List<CompoundTag> storedTileEntities=levelTag.getCompoundList("TileEntities");  for (  CompoundTag tileEntityTag : storedTileEntities) {    int tx=tileEntityTag.getInt("x");    int ty=tileEntityTag.getInt("y");    int tz=tileEntityTag.getInt("z");    TileEntity tileEntity=chunk.getEntity(tx & 0xf,ty,tz & 0xf);    if (tileEntity != null) {      try {        tileEntity.loadNbt(tileEntityTag);      } catch (      Exception ex) {        String id=tileEntityTag.isString("id") ? tileEntityTag.getString("id") : "<missing>";        GlowServer.logger.log(Level.SEVERE,"Error loading tile entity at " + tileEntity.getBlock() + ": "+ id,ex);      }    } else {      String id=tileEntityTag.isString("id") ? tileEntityTag.getString("id") : "<missing>";      GlowServer.logger.warning("Unknown tile entity at " + chunk.getWorld().getName() + ","+ tx+ ","+ ty+ ","+ tz+ ": "+ id);    }  }  if (levelTag.isList("TileTicks",TagType.COMPOUND)) {    List<CompoundTag> tileTicks=levelTag.getCompoundList("TileTicks");    for (    CompoundTag tileTick : tileTicks) {      int tileX=tileTick.getInt("x");      int tileY=tileTick.getInt("y");      int tileZ=tileTick.getInt("z");      String id=tileTick.getString("i");      if (id.startsWith("minecraft:")) {        id=id.replace("minecraft:","");        if (id.startsWith("flowing_")) {          id=id.replace("flowing_","");        } else         if (id.equals("water") || id.equals("lava")) {          id="stationary_" + id;        }      }      Material material=Material.getMaterial(id.toUpperCase());      GlowBlock block=chunk.getBlock(tileX,tileY,tileZ);      if (material != block.getType()) {        continue;      }      BlockType type=ItemTable.instance().getBlock(material);      if (type == null) {        continue;      }      block.getWorld().requestPulse(block);    }  }  return true;}  }
class C{  void recomposeTemplates(ElemTemplate template){  m_templateList.setTemplate(template);}  }
class C{  private void onExit(){  Env.JOBS.cancelJobs();  saveSettings();  Env.EXT_MOD_MANAGER.destroyStartedExtMods();  Env.JOBS.closeJobs();}  }
class C{  @Thunk int compareTitles(String titleA,String titleB){  boolean aStartsWithLetter=(titleA.length() > 0) && Character.isLetterOrDigit(titleA.codePointAt(0));  boolean bStartsWithLetter=(titleB.length() > 0) && Character.isLetterOrDigit(titleB.codePointAt(0));  if (aStartsWithLetter && !bStartsWithLetter) {    return -1;  } else   if (!aStartsWithLetter && bStartsWithLetter) {    return 1;  }  return mCollator.compare(titleA,titleB);}  }
class C{  protected ConnectionImpl(){}  }
class C{  public final String elementAt(int i){  return m_map[i];}  }
class C{  public byte[] doFinal() throws InvalidCipherTextException {  byte[] out=cipher.processBlock(buf,0,bufOff);  reset();  return out;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public ECHO256(){  super();}  }
class C{  @NotNull public static Query<PsiReference> search(@NotNull final SearchParameters parameters){  final Query<PsiReference> result=INSTANCE.createQuery(parameters);  if (parameters.isSharedOptimizer) {    return uniqueResults(result);  }  final SearchRequestCollector requests=parameters.getOptimizer();  final PsiElement element=parameters.getElementToSearch();  return uniqueResults(new MergeQuery<PsiReference>(result,new SearchRequestQuery(PsiUtilCore.getProjectInReadAction(element),requests)));}  }
class C{  void host(){  HostDialog hd;  hd=new HostDialog(frame);  hd.setVisible(true);  if ((hd.playerName == null) || (hd.serverPass == null) || (hd.port == 0)) {    return;  }  boolean foundValid=false;  char[] nameChars=hd.playerName.toCharArray();  for (int loop=0; !foundValid && (loop < nameChars.length); loop++) {    if (!Character.isWhitespace(nameChars[loop])) {      foundValid=true;    }  }  if (!foundValid) {    JOptionPane.showMessageDialog(frame,Messages.getString("MegaMek.PlayerNameAlert.message"),Messages.getString("MegaMek.PlayerNameAlert.title"),JOptionPane.ERROR_MESSAGE);    return;  }  d6();  try {    server=new Server(hd.serverPass,hd.port,hd.register,hd.register ? hd.metaserver : "");  } catch (  IOException ex) {    System.err.println("could not create server socket on port " + hd.port);    StringBuffer error=new StringBuffer();    error.append("Error: could not start server at localhost").append(":").append(hd.port).append(" (").append(ex.getMessage()).append(").");    JOptionPane.showMessageDialog(frame,error.toString(),Messages.getString("MegaMek.HostGameAlert.title"),JOptionPane.ERROR_MESSAGE);    return;  }  client=new Client(hd.playerName,"localhost",hd.port);  ClientGUI gui=new ClientGUI(client,controller);  controller.clientgui=gui;  frame.setCursor(new Cursor(Cursor.WAIT_CURSOR));  gui.initialize();  frame.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));  if (!client.connect()) {    StringBuffer error=new StringBuffer();    error.append("Error: could not connect to server at localhost").append(":").append(hd.port).append(".");    JOptionPane.showMessageDialog(frame,error.toString(),Messages.getString("MegaMek.HostGameAlert.title"),JOptionPane.ERROR_MESSAGE);    frame.setVisible(false);    client.die();  }  launch(gui.getFrame());  optdlg=null;}  }
class C{  public Timing(String tag){  this.TAG=tag;}  }
class C{  public void addError(Throwable error){  errors.add(error);}  }
class C{  public static void check(){  if (Boolean.parseBoolean(System.getProperty(JVM_BYPASS))) {    Loggers.getLogger(JVMCheck.class).warn("bypassing jvm version check for version [{}], this can result in data corruption!",fullVersion());  } else   if ("Oracle Corporation".equals(Constants.JVM_VENDOR)) {    HotspotBug bug=JVM_BROKEN_HOTSPOT_VERSIONS.get(Constants.JVM_VERSION);    if (bug != null) {      if (bug.workAround != null && ManagementFactory.getRuntimeMXBean().getInputArguments().contains(bug.workAround)) {        Loggers.getLogger(JVMCheck.class).warn(bug.getWarningMessage());      } else {        throw new RuntimeException(bug.getErrorMessage());      }    }  } else   if ("IBM Corporation".equals(Constants.JVM_VENDOR)) {    float version=Float.POSITIVE_INFINITY;    try {      version=Float.parseFloat(Constants.JVM_VERSION);    } catch (    NumberFormatException ignored) {    }    if (version < 2.8f) {      StringBuilder sb=new StringBuilder();      sb.append("IBM J9 runtimes < 2.8 suffer from several bugs which can cause data corruption.");      sb.append(System.lineSeparator());      sb.append("Your version: " + fullVersion());      sb.append(System.lineSeparator());      sb.append("Please upgrade the JVM to a recent IBM JDK");      throw new RuntimeException(sb.toString());    }  }}  }
class C{  @Override public CommandLine parse(Options options,String[] arguments,boolean stopAtNonOption) throws ParseException {  return this.commandLineParser.parse(options,arguments,stopAtNonOption);}  }
class C{  protected void rename(String name){  m_name=name;  if (m_editFlag == FolderEditFlag.NONE)   m_editFlag=FolderEditFlag.UPDATE;}  }
class C{  public Key engineGetKey(String alias,char[] password) throws NoSuchAlgorithmException, UnrecoverableKeyException {  Key key=null;  Object entry=entries.get(alias.toLowerCase(Locale.ENGLISH));  if (!((entry instanceof PrivateKeyEntry) || (entry instanceof SecretKeyEntry))) {    return null;  }  KeyProtector keyProtector=new KeyProtector(password);  if (entry instanceof PrivateKeyEntry) {    byte[] encrBytes=((PrivateKeyEntry)entry).protectedKey;    EncryptedPrivateKeyInfo encrInfo;    try {      encrInfo=new EncryptedPrivateKeyInfo(encrBytes);    } catch (    IOException ioe) {      throw new UnrecoverableKeyException("Private key not stored " + "as PKCS #8 " + "EncryptedPrivateKeyInfo");    }    key=keyProtector.recover(encrInfo);  } else {    key=keyProtector.unseal(((SecretKeyEntry)entry).sealedKey);  }  return key;}  }
class C{  private long calculateUpdateTime(CalendarAppWidgetModel model,long now,String timeZone){  long minUpdateTime=getNextMidnightTimeMillis(timeZone);  for (  EventInfo event : model.mEventInfos) {    final long start;    final long end;    start=event.start;    end=event.end;    if (now < start) {      minUpdateTime=Math.min(minUpdateTime,start);    } else     if (now < end) {      minUpdateTime=Math.min(minUpdateTime,end);    }  }  return minUpdateTime;}  }
class C{  public static String formatParams(ArrayList<? extends ParameterInterface> parameters){  if (parameters.size() == 0) {    return "";  }  StatementBuilder buff=new StatementBuilder();  int i=0;  boolean params=false;  for (  ParameterInterface p : parameters) {    if (p.isValueSet()) {      if (!params) {        buff.append(" {");        params=true;      }      buff.appendExceptFirst(", ");      Value v=p.getParamValue();      buff.append(++i).append(": ").append(v.getTraceSQL());    }  }  if (params) {    buff.append('}');  }  return buff.toString();}  }
class C{  public PaymentGatewayBluePay20POST(){  BP_AccountID=AppConfig.getInstance().getProperty("payment.BluePay20POST.accountID");  this.BP_SecretKey=AppConfig.getInstance().getProperty("payment.BluePay20POST.secretKey");  BP_TestMode=AppConfig.getInstance().getBoolean("payment.testmode");  ENDPOINTADDRESS=AppConfig.getInstance().getProperty("payment.BluePay20POST.URL");}  }
class C{  public void displayError(String message){  try {    SVGAbstractTranscoder.this.handler.error(new TranscoderException(message));  } catch (  TranscoderException ex) {    throw new RuntimeException(ex.getMessage());  }}  }
class C{  void doInsideScores(){  grammar.logarithmMode();  lexicon.logarithmMode();  for (int diff=1; diff <= length; diff++) {    for (int start=0; start < (length - diff + 1); start++) {      int end=start + diff;      for (int pparentState=0; pparentState < numStates; pparentState++) {        BinaryRule[] parentRules=grammar.splitRulesWithP(pparentState);        for (int i=0; i < parentRules.length; i++) {          BinaryRule r=parentRules[i];          int leftState=r.leftChildState;          int parentState=r.parentState;          int narrowR=narrowRExtent[start][leftState];          boolean iPossibleL=(narrowR < end);          if (!iPossibleL) {            continue;          }          int narrowL=narrowLExtent[end][r.rightChildState];          boolean iPossibleR=(narrowL >= narrowR);          if (!iPossibleR) {            continue;          }          int min1=narrowR;          int min2=wideLExtent[end][r.rightChildState];          int min=(min1 > min2 ? min1 : min2);          if (min > narrowL) {            continue;          }          int max1=wideRExtent[start][leftState];          int max2=narrowL;          int max=(max1 < max2 ? max1 : max2);          if (min > max) {            continue;          }          double pS=r.getScore(0,0,0);          double oldIScore=iScore[start][end][parentState];          double bestIScore=oldIScore;          boolean foundBetter;          for (int split=min; split <= max; split++) {            double lS=iScore[start][split][leftState];            if (Double.isInfinite(lS)) {              continue;            }            double rS=iScore[split][end][r.rightChildState];            if (Double.isInfinite(rS)) {              continue;            }            touchedRules++;            double tot=pS + lS + rS;            if (tot > bestIScore) {              bestIScore=tot;            }          }          foundBetter=bestIScore > oldIScore;          if (foundBetter) {            iScore[start][end][parentState]=bestIScore;            if (Double.isInfinite(oldIScore)) {              if (start > narrowLExtent[end][parentState]) {                narrowLExtent[end][parentState]=start;                wideLExtent[end][parentState]=start;              } else {                if (start < wideLExtent[end][parentState]) {                  wideLExtent[end][parentState]=start;                }              }              if (end < narrowRExtent[start][parentState]) {                narrowRExtent[start][parentState]=end;                wideRExtent[start][parentState]=end;              } else {                if (end > wideRExtent[start][parentState]) {                  wideRExtent[start][parentState]=end;                }              }            }          }        }      }      for (int pState=0; pState < numStates; pState++) {        UnaryRule[] unaries=grammar.getClosedViterbiUnaryRulesByParent(pState);        double cur=iScore[start][end][pState];        double best=cur;        for (int r=0; r < unaries.length; r++) {          UnaryRule ur=unaries[r];          int cState=ur.childState;          if (pState == cState)           continue;          double pS=ur.getScore(0,0);          double iS=iScore[start][end][cState];          if (Double.isInfinite(iS)) {            continue;          }          double tot=iS + pS;          touchedRules++;          if (tot > best) {            best=tot;          }        }        if (best > cur) {          iScore[start][end][pState]=best;          if (cur == Double.NEGATIVE_INFINITY) {            if (start > narrowLExtent[end][pState]) {              narrowLExtent[end][pState]=start;              wideLExtent[end][pState]=start;            } else {              if (start < wideLExtent[end][pState]) {                wideLExtent[end][pState]=start;              }            }            if (end < narrowRExtent[start][pState]) {              narrowRExtent[start][pState]=end;              wideRExtent[start][pState]=end;            } else {              if (end > wideRExtent[start][pState]) {                wideRExtent[start][pState]=end;              }            }          }        }      }    }  }}  }
class C{  @Deprecated public static WorkflowAnnotations lookupProcessAnnotations(ExecutionUnit process){  return AnnotationProcessXMLFilter.lookupProcessAnnotations(process);}  }
class C{  public static void enableSync(Context context){  PreferencesUtils.setBoolean(context,R.string.drive_sync_key,true);  disableSyncForAll(context);  ContentResolver.setMasterSyncAutomatically(true);  String googleAccount=PreferencesUtils.getString(context,R.string.google_account_key,PreferencesUtils.GOOGLE_ACCOUNT_DEFAULT);  enableSyncForAccount(new Account(googleAccount,Constants.ACCOUNT_TYPE));}  }
class C{  public SwitchPortTuple(SwitchPortTuple other){  __isset_bitfield=other.__isset_bitfield;  this.dpid=other.dpid;  this.port=other.port;}  }
class C{  public void testNextInt(){  int f=ThreadLocalRandom.current().nextInt();  int i=0;  while (i < NCALLS && ThreadLocalRandom.current().nextInt() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  public boolean isTargetTooClose(Pos3D target){  if (new Pos3D(this.xCoord,0,this.zCoord).distance(new Pos3D(target.xPos,0,target.zPos)) < 10) {    return true;  }  return false;}  }
class C{  private String _hexString(byte[] bytes){  StringBuilder result=new StringBuilder(2 * bytes.length);  for (int i=0; i < bytes.length; i++) {    int b=bytes[i] & 0xFF;    result.append(_nibbleToHex[b / 16]);    result.append(_nibbleToHex[b % 16]);  }  return result.toString();}  }
class C{  static int decodeMax(byte[] b,int dimension){  int offset=b.length / 2 + dimension * BYTES;  return NumericUtils.sortableBytesToInt(b,offset);}  }
class C{  final public void disable_tracing(){}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();}  }
class C{  public DefaultSailChangedEvent(Sail sail){  this.sail=sail;}  }
class C{  public DeleteRequest refresh(boolean refresh){  this.refresh=refresh;  return this;}  }
class C{  public static void storeStoreBarrier(){  if (VM.VerifyAssertions && VM.runningVM) {    VM._assert(VM.NOT_REACHED);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public MBankStatement(MBankAccount account){  this(account,false);}  }
class C{  public boolean isButtonEnabled(){  boolean operationsAvaliable=false;  boolean dateAvaliable=false;  List<AuditLogOperation> operations=model.getAvailableOperations();  if (operations != null && operations.size() > 0) {    for (int i=0; i < operations.size(); i++) {      if (operations.get(i).isSelected() == true) {        operationsAvaliable=true;        break;      }    }  }  if (model.getFromDate() == null || model.getToDate() == null) {    dateAvaliable=false;  } else {    dateAvaliable=!model.getFromDate().after(model.getToDate());  }  return operationsAvaliable && dateAvaliable;}  }
class C{  private String nodeName(int idx){  return NODE_PREFIX + idx;}  }
class C{  public double distanceSq(final Int2D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  return (dx * dx + dy * dy);}  }
class C{  public boolean visit(Initializer node){  return true;}  }
class C{  public <T>void putEnv(String key,T value){  String ekey=this.expandString(key);  FlexibleMapAccessor<T> fma=FlexibleMapAccessor.getInstance(ekey);  this.putEnv(fma,value);}  }
class C{  @Override public void compactNodeNumbering(){}  }
class C{  public static AuditLog convertToAuditLog(RecordableAuditLog auditlog){  AuditLog dbAuditLog=new AuditLog();  dbAuditLog.setTimeInMillis(auditlog.getTimestamp());  dbAuditLog.setProductId(auditlog.getProductId());  dbAuditLog.setTenantId(auditlog.getTenantId());  dbAuditLog.setUserId(auditlog.getUserId());  dbAuditLog.setServiceType(auditlog.getServiceType());  dbAuditLog.setAuditType(auditlog.getAuditType());  dbAuditLog.setDescription(auditlog.getDescription());  dbAuditLog.setOperationalStatus(auditlog.getOperationalStatus());  dbAuditLog.setAuditlogId(auditlog.getAuditlogId());  return dbAuditLog;}  }
class C{  public void goOneBack(){  mFragmentManager.popBackStackImmediate();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:37.871 -0500",hash_original_method="9121421793EC5D37F14A312213FF0274",hash_generated_method="0E38B803B5F7EA7FC3B7A952B8C48B78") public String toString(){  return this.encode();}  }
class C{  public boolean equals(Object obj){  if (obj instanceof Language) {    Language cmp=(Language)obj;    if (cmp.getAD_Language().equals(m_AD_Language))     return true;  }  return false;}  }
class C{  public void addTopologyListener(GridClientTopologyListener lsnr){  topLsnrs.add(lsnr);}  }
class C{  public MoveResourcesProcessor(IResource[] resourcesToMove){  if (resourcesToMove == null) {    throw new IllegalArgumentException("resources must not be null");  }  fResourcesToMove=resourcesToMove;  fDestination=null;  fUpdateReferences=true;}  }
class C{  private boolean isValidPackingPlan(PackingPlan plan){  for (  PackingPlan.ContainerPlan containerPlan : plan.getContainers()) {    for (    PackingPlan.InstancePlan instancePlan : containerPlan.getInstances()) {      if (instancePlan.getResource().getRam() < MIN_RAM_PER_INSTANCE) {        LOG.severe(String.format("Require at least %dMB ram. Given on %d MB",MIN_RAM_PER_INSTANCE / Constants.MB,instancePlan.getResource().getRam() / Constants.MB));        return false;      }    }  }  return true;}  }
class C{  @DSSink({DSSinkKind.CONTENT}) @DSComment("Insert an image and create a thumbnail") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:57.510 -0500",hash_original_method="7EDFE27F4065D73B827ECCB92823E704",hash_generated_method="F4811B325135D139327C3CD84EF94612") public static final String insertImage(ContentResolver cr,String imagePath,String name,String description) throws FileNotFoundException {  FileInputStream stream=new FileInputStream(imagePath);  try {    Bitmap bm=BitmapFactory.decodeFile(imagePath);    String ret=insertImage(cr,bm,name,description);    bm.recycle();    return ret;  }  finally {    try {      stream.close();    } catch (    IOException e) {    }  }}  }
class C{  public void testUpdate8() throws SQLException {  statement.executeUpdate("UPDATE " + DatabaseCreator.SIMPLE_TABLE3 + " SET speed = (SELECT MAX(speed) FROM "+ DatabaseCreator.SIMPLE_TABLE1+ ") WHERE id = (SELECT id FROM "+ DatabaseCreator.SIMPLE_TABLE1+ " WHERE speed = (SELECT MAX(speed) FROM "+ DatabaseCreator.SIMPLE_TABLE1+ "))");  ResultSet r=statement.executeQuery("SELECT id FROM " + DatabaseCreator.SIMPLE_TABLE3 + " WHERE speed = (SELECT MAX(speed) FROM "+ DatabaseCreator.SIMPLE_TABLE1+ ");");  r.next();  assertEquals("Incorrect id updated",1,r.getInt(1));  r.close();}  }
class C{  public String rewriteAllLinks(final String html,final String requestHost){  Document document=Jsoup.parse(html);  Elements links=document.select("a[href]");  Elements metas=document.select("meta[content]");  updateAttribute(links,"href",requestHost);  updateAttribute(metas,"content",requestHost);  return document.toString();}  }
class C{  public static final void unInit(){  if (isInit) {synchronized (Snowdream.class) {      Snowdream.mContext=null;      isInit=false;    }  } else {    Log.w("The FrameWork has not been initialized.");  }}  }
class C{  public Boolean isServicePackageInfoSupported(){  return servicePackageInfoSupported;}  }
class C{  public void removeNoCollisions(PhysicalObject2D c1,PhysicalObject2D c2){  PhysicalObjectPair pair=new PhysicalObjectPair(c1,c2);  noCollisions.remove(pair);}  }
class C{  public static int clamp(int v,int min,int max){  return v < min ? min : v > max ? max : v;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static boolean isRpVplexVolume(UnManagedVolume unManagedVolume){  return isVplexVolume(unManagedVolume) && checkUnManagedResourceIsRecoverPointEnabled(unManagedVolume);}  }
class C{  public Boolean isDegraded(){  return degraded;}  }
class C{  public QueueNode next(){  return m_Next;}  }
class C{  public static void unsupportSASLMechanism(String name){  mechanismsPreferences.remove(name);}  }
class C{  public static double nextUp(double d){  if (d == Double.POSITIVE_INFINITY)   return d; else {    d+=0.0d;    return Double.longBitsToDouble(Double.doubleToRawLongBits(d) + ((d >= 0.0d) ? +1L : -1L));  }}  }
class C{  public void start(){  Thread thread=new Thread(this);  if (m_pi != null)   thread.setName(m_pi.getTitle() + "-" + m_pi.getAD_PInstance_ID());  thread.start();}  }
class C{  public void updateRow(Object[] oldRow,Object[] newRow) throws IOException {  if (!enforcing()) {    return;  }  if (!anyUpdates(oldRow,newRow)) {    return;  }  initialize();  SharedState ss=_table.getDatabase().getFKEnforcerSharedState();  if (ss.isUpdating()) {    for (    Joiner joiner : _secondaryJoiners) {      if (anyUpdates(joiner,oldRow,newRow)) {        requirePrimaryValues(joiner,newRow);      }    }  }  ss.pushUpdate();  try {    for (    Joiner joiner : _primaryJoinersChkUp) {      if (anyUpdates(joiner,oldRow,newRow)) {        requireNoSecondaryValues(joiner,oldRow);      }    }    for (    Joiner joiner : _primaryJoinersDoUp) {      if (anyUpdates(joiner,oldRow,newRow)) {        updateSecondaryValues(joiner,oldRow,newRow);      }    }  }  finally {    ss.popUpdate();  }}  }
class C{  public static Map<String,MiDPersonGroupData> createMiDPersonGroups(){  MiDPersonGroupData students=new MiDPersonGroupData(6,17);  students.setLegsPerPersonAndDay(2.81);  setPercentages(students);  EgapPopulationUtilsV2.personGroupData.put(HashGenerator.generateAgeGroupHash(6,17),students);  MiDPersonGroupData adults=new MiDPersonGroupData(18,65);  students.setLegsPerPersonAndDay(3.44);  setPercentages(adults);  EgapPopulationUtilsV2.personGroupData.put(HashGenerator.generateAgeGroupHash(18,65),adults);  MiDPersonGroupData pensioners=new MiDPersonGroupData(66,100);  pensioners.setLegsPerPersonAndDay(2.29);  setPercentages(pensioners);  EgapPopulationUtilsV2.personGroupData.put(HashGenerator.generateAgeGroupHash(66,100),pensioners);  return EgapPopulationUtilsV2.personGroupData;}  }
class C{  protected int _columnOffset(int absRank){  return columnOffsets[absRank];}  }
class C{  protected void prepareRaml() throws MojoExecutionException, MojoFailureException, IOException {  ClassLoaderUtils.addLocationsToClassLoader(project);  List<String> targetPacks=ClassLoaderUtils.loadPackages(project);  if (dependencyPackagesList != null && !dependencyPackagesList.isEmpty()) {    targetPacks.addAll(dependencyPackagesList);  }  ClassPath classPath=ClassPath.from(Thread.currentThread().getContextClassLoader());  for (  String pack : targetPacks) {    scanPack(pack,classPath);  }  for (  ClassPath.ResourceInfo resourceInfo : classPath.getResources()) {    if (resourceInfo.getResourceName().endsWith(documentationSuffix)) {      try {        documents.add(new ApiDocumentMetadata(resourceInfo,documentationSuffix));        this.getLog().info("Adding Documentation File " + resourceInfo.getResourceName());      } catch (      Throwable ex) {        this.getLog().warn("Skipping Resource: Unable to load" + resourceInfo.getResourceName(),ex);      }    }  }  ClassLoaderUtils.restoreOriginalClassLoader();}  }
class C{  public boolean doWindowDeActivated(){  if (m_aspects.isDirty()) {    setStatusBarMessage("Please Save or Refresh as changed are pending",BasePanel.WARNING);    return false;  }  return true;}  }
class C{  public static void deleteTag(final JFrame parent,final ITagManager tagManager,final ITreeNode<CTag> tag){  if (CMessageBox.showYesNoQuestion(parent,String.format("Do you really want to convert delete the node tag '%s'?",tag.getObject().getName())) == JOptionPane.YES_OPTION) {    try {      tagManager.deleteTag(tag);    } catch (    final CouldntDeleteException e) {      CUtilityFunctions.logException(e);      final String innerMessage="E00124: " + "Could not delete tag";      final String innerDescription=CUtilityFunctions.createDescription(String.format("The tag '%s' could not be deleted.",tag.getObject().getName()),new String[]{"There was a problem with the database connection."},new String[]{"The tag still exists."});      NaviErrorDialog.show(parent,innerMessage,innerDescription,e);    }  }}  }
class C{  public synchronized void dispose(){  events.clear();  unregisterSupplier.get();  latch=null;}  }
class C{  private void entryDestructionInSynchPersistTypeForIOExceptionCase(Region region) throws Exception {  region.create("key1","value1");  ((LocalRegion)region).getDiskRegion().testHook_getChild().testClose();  try {    region.destroy("key1");    fail("Should have encountered DiskAccessException");  } catch (  DiskAccessException dae) {  }  ((LocalRegion)region).getDiskStore().waitForClose();  assertTrue(cache.isClosed());  region=null;}  }
class C{  private RemoveStupidOverrides(){}  }
class C{  protected void forwardToLoginPage(String relativePath,boolean save,HttpServletRequest request,HttpServletResponse response,FilterChain chain) throws IOException, ServletException {  String actualLoginPage=getActualLoginPage(request,loginPage,authSettings);  String redirectUrl=request.getContextPath() + actualLoginPage;  if (authSettings.isServiceProvider()) {    if (save) {      saveForwardUrl(relativePath,request);    }    storeRelayStateInSession(relativePath,request);    try {      AuthenticationHandler ah=new AuthenticationHandler(request,response,authSettings);      ah.handleAuthentication(false,request.getSession());      return;    } catch (    SAML2AuthnRequestException e) {    }  }  if (!isLoginPage(relativePath,actualLoginPage)) {    logger.logDebug("Forward to login page");    if (save) {      saveForwardUrl(relativePath,request);    }    try {      if (BesServletRequestReader.isMarketplaceLogin(request)) {        JSFUtils.sendRedirect(response,redirectUrl);      } else {        forward(actualLoginPage,request,response);      }    } catch (    ServletException e) {      JSFUtils.sendRedirect(response,redirectUrl);    }    return;  }  chain.doFilter(request,response);}  }
class C{  public void writeSortTempFile(Object[][] records) throws CarbonSortKeyAndGroupByException {  int recordCount=0;  Object[][] tempRecords;  while (recordCount < records.length) {    if (records.length - recordCount < recordPerLeaf) {      recordPerLeaf=records.length - recordCount;    }    tempRecords=new Object[recordPerLeaf][];    System.arraycopy(records,recordCount,tempRecords,0,recordPerLeaf);    recordCount+=recordPerLeaf;    this.writer.writeSortTempFile(tempRecords);  }}  }
class C{  public boolean requiresClat(int netType,NetworkStateTracker tracker){  LinkProperties lp=tracker.getLinkProperties();  Slog.d(TAG,"requiresClat: netType=" + netType + ", hasIPv4Address="+ lp.hasIPv4Address());  return netType == TYPE_MOBILE && !lp.hasIPv4Address();}  }
class C{  static void checkOpcode(final int opcode,final int type){  if (opcode < 0 || opcode > 199 || TYPE[opcode] != type) {    throw new IllegalArgumentException("Invalid opcode: " + opcode);  }}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  static String encodeEntities(String source){  StringBuffer buffer=new StringBuffer();  String encoded;  for (int index=0; index < source.length(); index++) {    char ch=source.charAt(index);    if ((encoded=encodeEntity(ch)) != null) {      buffer.append(encoded);    } else {      buffer.append(ch);    }  }  return buffer.toString();}  }
class C{  public int countProcess(long groupId,String keywords){  String[] names=null;  boolean andOperator=false;  if (Validator.isNotNull(keywords)) {    names=CustomSQLUtil.keywords(keywords);  } else {    andOperator=true;  }  return _countProcess(groupId,andOperator,names);}  }
class C{  public DelegatingInvocableHandler(List<InvocableHandlerMethod> handlers,Object bean){  this.handlers=new ArrayList<InvocableHandlerMethod>(handlers);  this.bean=bean;}  }
class C{  public static Collection<Display> all(){  return enums.all();}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  private void updateMenuState(){  m_appendAnd.setEnabled(m_criteriumNode.allowAppend(CAndCriterium.class));  m_appendOr.setEnabled(m_criteriumNode.allowAppend(COrCriterium.class));  m_appendNot.setEnabled(m_criteriumNode.allowAppend(CNotCriterium.class));  m_insertAnd.setEnabled(m_criteriumNode.allowInsert(CAndCriterium.class));  m_insertOr.setEnabled(m_criteriumNode.allowInsert(COrCriterium.class));  m_insertNot.setEnabled(m_criteriumNode.allowInsert(CNotCriterium.class));  m_conditionSubmenu.setEnabled(m_criteriumNode.allowAppend(CConditionCriterium.class));  m_remove.setEnabled(!m_criteriumNode.isRoot());  m_removeAll.setEnabled(m_criteriumNode.getChildCount() != 0);}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  public void stop(){  isRotating=false;  mPlayPauseDrawable.setPlaying(isRotating);  postInvalidate();}  }
class C{  @Override public void onTurnReached(int currentTurn){  QueryCanonicalCharacterNamesCommand checkcommand=DBCommandQueue.get().getOneResult(QueryCanonicalCharacterNamesCommand.class,handle);  if (checkcommand == null) {    TurnNotifier.get().notifyInTurns(0,new TurnListenerDecorator(this));    return;  }  Player player=checkcommand.getPlayer();  Collection<String> queriedNames=checkcommand.getQueriedNames();  String who=queriedNames.iterator().next();  Collection<String> validNames=checkcommand.getValidNames();  if (validNames.isEmpty()) {    player.sendPrivateText(NotificationType.ERROR,"Sorry, " + who + " could not be found.");    return;  }  who=validNames.iterator().next();  final Player buddy=SingletonRepository.getRuleProcessor().getPlayer(who);  if (player.addBuddy(who,(buddy != null) && !buddy.isGhost())) {    new GameEvent(player.getName(),"buddy","add",who).raise();    player.sendPrivateText(who + " was added to your buddy list.");  } else {    player.sendPrivateText(who + " was already on your buddy list.");  }  new BuddyCleanup(player).cleanup();}  }
class C{  public ConfProxyProperties(final String name) throws ConfigurationException {  this.instance=name;  String confDir=SystemProperties.getConfigurationProxyConfPath();  File configFile=Paths.get(confDir,instance,CONF_INI).toFile();  if (!configFile.exists()) {    throw new ConfigurationException("'" + CONF_INI + "' does not exist.");  }  try {    config=new HierarchicalINIConfiguration(configFile);  } catch (  ConfigurationException e) {    log.error("Failed to load '{}': {}",configFile,e.getMessage());    throw e;  }}  }
class C{  public StackedBarChart(final String title,final String xAxisLabel,final String yAxisLabel,final String[] categories){  super(title,xAxisLabel,yAxisLabel);  this.dataset=new DefaultCategoryDataset();  this.chart=createChart(title,xAxisLabel,yAxisLabel,this.dataset);  this.plot=this.chart.getCategoryPlot();  this.categories=categories.clone();  addDefaultFormatting();  final CategoryAxis axis1=this.plot.getDomainAxis();  axis1.setCategoryMargin(0.20);  BarRenderer renderer=(BarRenderer)this.plot.getRenderer();  renderer.setItemMargin(0.10);}  }
class C{  private void initProgressBar(){  mMax=100;  mProgress=0;  mSecondaryProgress=0;  mIndeterminate=false;  mOnlyIndeterminate=false;  mDuration=4000;  mBehavior=AlphaAnimation.RESTART;  mMinWidth=24;  mMaxWidth=48;  mMinHeight=24;  mMaxHeight=48;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isLocalVdcId(String shortVdcId){  return StringUtils.isBlank(shortVdcId) || StringUtils.equals(shortVdcId,VdcUtil.getLocalShortVdcId());}  }
class C{  public final double doOperation(){  int[] allocations=new int[allocationParameter.getDimension()];  int[] occupancy=new int[N];  int K=0;  for (int i=0; i < allocations.length; i++) {    allocations[i]=(int)allocationParameter.getParameterValue(i);    occupancy[allocations[i]]+=1;    if (occupancy[allocations[i]] == 1) {      K++;    }  }  double hastings=0.0;  int element=MathUtils.nextInt(N);  int elementAssignment=allocations[element];  int elementClusterSize=occupancy[elementAssignment];  int target=MathUtils.nextInt(N);  while (element == target) {    target=MathUtils.nextInt(N);  }  int targetAssignment=allocations[target];  int targetClusterSize=occupancy[targetAssignment];  if (elementAssignment != targetAssignment) {    allocations[element]=targetAssignment;    allocationParameter.setParameterValue(element,targetAssignment);    if (elementClusterSize > 1) {      hastings=Math.log(elementClusterSize - 1) - Math.log(targetClusterSize);    }    if (DEBUG) {      System.err.println("Move element " + element + " from cluster "+ elementAssignment+ " to cluster "+ targetAssignment);    }  } else {    int clusterIndex=0;    int targetIndex=MathUtils.nextInt(N - K);    int newCluster=0;    for (int i=0; i < N; i++) {      if (occupancy[i] == 0) {        if (clusterIndex == targetIndex) {          newCluster=i;        }        clusterIndex++;      }    }    while (occupancy[newCluster] > 0) {      newCluster++;    }    allocations[element]=newCluster;    allocationParameter.setParameterValue(element,newCluster);    if (DEBUG) {      System.err.println("Move element " + element + " from cluster "+ elementAssignment+ " to new cluster "+ newCluster);    }  }  return hastings;}  }
class C{  protected boolean draggingOver(Component dragged,int x,int y){  return dropTarget;}  }
class C{  public static <K,V>boolean putMapNotNullKey(Map<K,V> map,K key,V value){  if (map == null || key == null) {    return false;  }  map.put(key,value);  return true;}  }
class C{  void checkTimeout(){  if (!requestPending)   return;synchronized (this) {    if (!requestPending)     return;    long now=System.nanoTime();    if (now - this.roleSubmitTimeNs > roleTimeoutNs) {      switchManagerCounters.roleReplyTimeout.increment();      setSwitchRole(pendingRole,RoleRecvStatus.NO_REPLY);    }  }}  }
class C{  public String address(){  return hostAddress;}  }
class C{  public float floatValue(){  return 0.0f;}  }
class C{  @Override public void updateTimestamp(int columnIndex,Timestamp x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateTimestamp(" + columnIndex + ", x);");    }    update(columnIndex,x == null ? (Value)ValueNull.INSTANCE : ValueTimestamp.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public ToStringBuilder append(final String fieldName,final Object[] array,final boolean fullDetail){  style.append(buffer,fieldName,array,Boolean.valueOf(fullDetail));  return this;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Gender lookupGender(String text){  return lookup(exactGender,startsWithGender,endsWithGender,text,Gender.UNKNOWN);}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,Object returnValue,ReplySender dm){  Assert.assertTrue(recipient != null,"Sending a ReplyMessage to ALL");  ReplyMessage m=new ReplyMessage();  m.processorId=processorId;  if (returnValue != null) {    m.returnValue=returnValue;    m.returnValueIsException=false;  }  m.setRecipient(recipient);  dm.putOutgoing(m);}  }
class C{  public void createInfoDialog(String message,int code){  MessageDialog.openInformation(null,"Information",message);}  }
class C{  private CodeAttribute(ConstPool cp,CodeAttribute src,Map classnames) throws BadBytecode {  super(cp,tag);  maxStack=src.getMaxStack();  maxLocals=src.getMaxLocals();  exceptions=src.getExceptionTable().copy(cp,classnames);  attributes=new ArrayList();  List src_attr=src.getAttributes();  int num=src_attr.size();  for (int i=0; i < num; ++i) {    AttributeInfo ai=(AttributeInfo)src_attr.get(i);    attributes.add(ai.copy(cp,classnames));  }  info=src.copyCode(cp,classnames,exceptions,this);}  }
class C{  protected int[] dummyColorInscribedDataCircleFromYuvImage(ImageProxy img,int subsample){  logWrapper("RUNNING DUMMY dummyColorInscribedDataCircleFromYuvImage");  int w=img.getWidth() / subsample;  int h=img.getHeight() / subsample;  int r=inscribedCircleRadius(w,h);  int len=r * r * 4;  int[] colors=new int[len];  for (int i=0; i < len; i++) {    int x=i % (2 * r);    int y=i / (2 * r);    colors[i]=(255 << 24) | ((x & 255) << 16) | ((y & 255) << 8);  }  return colors;}  }
class C{  @Override public String toStringNoWeight(int afterDecimalPoint){  StringBuffer text=new StringBuffer();  text.append('{');  for (int i=0; i < m_Indices.length; i++) {    if (i > 0) {      text.append(",");    }    if (isMissingSparse(i)) {      text.append(m_Indices[i] + " ?");    } else {      if (m_Dataset == null) {        text.append(m_Indices[i] + " " + Utils.doubleToString(m_AttValues[i],afterDecimalPoint));      } else {        if (m_Dataset.attribute(m_Indices[i]).isNominal() || m_Dataset.attribute(m_Indices[i]).isString() || m_Dataset.attribute(m_Indices[i]).isDate()) {          try {            text.append(m_Indices[i] + " " + Utils.quote(stringValue(m_Indices[i])));          } catch (          Exception e) {            e.printStackTrace();            System.err.println(new Instances(m_Dataset,0));            System.err.println("Att:" + m_Indices[i] + " Val:"+ valueSparse(i));            throw new Error("This should never happen!");          }        } else         if (m_Dataset.attribute(m_Indices[i]).isRelationValued()) {          try {            text.append(m_Indices[i] + " " + Utils.quote(m_Dataset.attribute(m_Indices[i]).relation((int)valueSparse(i)).stringWithoutHeader()));          } catch (          Exception e) {            e.printStackTrace();            System.err.println(new Instances(m_Dataset,0));            System.err.println("Att:" + m_Indices[i] + " Val:"+ valueSparse(i));            throw new Error("This should never happen!");          }        } else {          text.append(m_Indices[i] + " " + Utils.doubleToString(m_AttValues[i],afterDecimalPoint));        }      }    }  }  text.append('}');  return text.toString();}  }
class C{  public void testGetInt24(){  byte[] bytes={12,0,0,1,-1,-1,-1,0,0,0,0,0,-128,-1,-1,127};  MySQLPacket array=new MySQLPacket(bytes.length - MySQLPacket.HEADER_LENGTH,bytes,(byte)1);  assertEquals(-1,array.getInt24());  assertEquals(0,array.getInt24());  assertEquals(-0x800000,array.getInt24());  assertEquals(0x7fffff,array.getInt24());}  }
class C{  public final boolean isErrorEnabled(){  return isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR);}  }
class C{  public LabelEx(Image i){  setIcon(i);}  }
class C{  public static void d(String tag,String message){  if (DEBUG_ON) {    Log.d(tag,message);  }}  }
class C{  public static int[][] scanChunk(World world,int offsetX,int offsetZ,int radius,int blocksPerPixel){  blocksPerPixel=Math.max(blocksPerPixel,1);  int[][] ret=new int[(radius * 2) / blocksPerPixel][(radius * 2) / blocksPerPixel];  Chunk chunk=world.getChunkFromBlockCoords(offsetX,offsetZ);  IChunkProvider provider=world.getChunkProvider();  if (oreList.isEmpty()) {    String[] strings=OreDictionary.getOreNames();    for (    String str : strings) {      if (str.contains("ore"))       oreList.add(OreDictionary.getOreID(str));    }  }  for (int z=-radius; z < radius; z+=blocksPerPixel) {    for (int x=-radius; x < radius; x+=blocksPerPixel) {      int oreCount=0, otherCount=0;      for (int y=world.getHeight(); y > 0; y--) {        for (int deltaY=0; deltaY < blocksPerPixel; deltaY++) {          for (int deltaZ=0; deltaZ < blocksPerPixel; deltaZ++) {            if (world.isAirBlock(x + offsetX,y,z + offsetZ))             continue;            boolean exists=false;            out:             for (            int i : oreList) {              ArrayList<ItemStack> itemlist=OreDictionary.getOres(i);              for (              ItemStack item : itemlist) {                if (item.getItem() == Item.getItemFromBlock(world.getBlock(x + offsetX,y,z + offsetZ))) {                  exists=true;                  break out;                }              }            }            if (exists)             oreCount++; else             otherCount++;          }        }      }      oreCount/=Math.pow(blocksPerPixel,2);      otherCount/=Math.pow(blocksPerPixel,2);      if (Thread.interrupted())       return null;      ret[(x + radius) / blocksPerPixel][(z + radius) / blocksPerPixel]=(int)((oreCount / (float)Math.max(otherCount,1)) * 0xFFFF);    }  }  return ret;}  }
class C{  public TraceNodeExecuted createTraceNodeExecuted(){  TraceNodeExecutedImpl traceNodeExecuted=new TraceNodeExecutedImpl();  return traceNodeExecuted;}  }
class C{  public static int computeRawVarint64Size(final long value){  if ((value & (0xffffffffffffffffL << 7)) == 0)   return 1;  if ((value & (0xffffffffffffffffL << 14)) == 0)   return 2;  if ((value & (0xffffffffffffffffL << 21)) == 0)   return 3;  if ((value & (0xffffffffffffffffL << 28)) == 0)   return 4;  if ((value & (0xffffffffffffffffL << 35)) == 0)   return 5;  if ((value & (0xffffffffffffffffL << 42)) == 0)   return 6;  if ((value & (0xffffffffffffffffL << 49)) == 0)   return 7;  if ((value & (0xffffffffffffffffL << 56)) == 0)   return 8;  if ((value & (0xffffffffffffffffL << 63)) == 0)   return 9;  return 10;}  }
class C{  public BurlapProtocolException(String message,Throwable rootCause){  super(message,rootCause);}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public static double weightedCoefficient(double[] x,double[] y,double[] weights){  final int xdim=x.length;  final int ydim=y.length;  if (xdim != ydim) {    throw new IllegalArgumentException("Invalid arguments: arrays differ in length.");  }  if (xdim != weights.length) {    throw new IllegalArgumentException("Dimensionality doesn't agree to weights.");  }  double sumXX=0., sumYY=0., sumXY=0., sumWe=weights[0];  double meanX=x[0], meanY=y[0];  for (int i=1; i < xdim; ++i) {    final double xv=x[i], yv=y[i], w=weights[i];    final double deltaX=xv - meanX;    final double deltaY=yv - meanY;    sumWe+=w;    meanX+=deltaX * w / sumWe;    meanY+=deltaY * w / sumWe;    final double neltaX=xv - meanX;    final double neltaY=yv - meanY;    sumXX+=w * deltaX * neltaX;    sumYY+=w * deltaY * neltaY;    sumXY+=w * deltaX * neltaY;  }  if (!(sumXX > 0. && sumYY > 0.)) {    return (sumXX == sumYY) ? 1. : 0.;  }  return sumXY / Math.sqrt(sumXX * sumYY);}  }
class C{  public void ret(final int local){  mv.visitVarInsn(Opcodes.RET,local);}  }
class C{  public <K>T delete(String url,Class<K> type,Object handler,String callback){  AjaxCallback<K> cb=new AjaxCallback<K>();  cb.weakHandler(handler,callback);  return delete(url,type,cb);}  }
class C{  public Address __rmul__(final Object rhs){  return new Address(m_value.multiply(getBigInteger(rhs)));}  }
class C{  private Socket connect(String host,String portString) throws IOException {  int port=0;  Socket sock=null;  boolean DEBUG=Debug.debugging("netmap");  try {    port=Integer.parseInt(portString,10);  } catch (  NumberFormatException e) {    if (DEBUG)     Debug.output("Illegal name " + host + ":"+ portString);    throw new IOException("Illegal port: " + portString);  }  if (DEBUG)   Debug.output("Connecting to server " + host + ":"+ port);  try {    sock=new Socket(host,port);  } catch (  IOException e) {    if (sock != null)     sock.close();    if (DEBUG) {      Debug.output("Can't connect to " + host + ":"+ port+ "\n   "+ e);    }    throw e;  }  return sock;}  }
class C{  final public SyntaxTreeNode Lambda() throws ParseException {  SyntaxTreeNode tn;  Token t;  bpa("Lambda");  t=jj_consume_token(LAMBDA);  addHeir(new SyntaxTreeNode(mn,t));  expecting="Identifier";  tn=Identifier();  addHeir(tn);  expecting="`,' or `:'";  label_48:   while (true) {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case COMMA:      ;    break;default :  jj_la1[128]=jj_gen;break label_48;}t=jj_consume_token(COMMA);addHeir(new SyntaxTreeNode(mn,t));expecting="Identifier";tn=Identifier();addHeir(tn);expecting="`,' or `:'";}t=jj_consume_token(COLON);addHeir(new SyntaxTreeNode(mn,t));expecting="Expression";tn=Expression();addHeir(tn);SyntaxTreeNode sn[]=getLastHeirs();epa();{if (true) return new SyntaxTreeNode(mn,N_Lambda,sn);}throw new Error("Missing return statement in function");}  }
class C{  public static void main(String[] args){  int count=0;  double sum=0.0;  while (!StdIn.isEmpty()) {    double value=StdIn.readDouble();    sum+=value;    count++;  }  double average=sum / count;  StdOut.println("Average is " + average);}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public final E remove(int index){  throw new UnsupportedOperationException();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.367 -0500",hash_original_method="B186F7F0BF353B1A746862E337C50A69",hash_generated_method="7727160CCA8A9EE39BE8CC36CB939BC2") public void pushContext(){  int max=contexts.length;  contexts[contextPos].declsOK=false;  contextPos++;  if (contextPos >= max) {    Context newContexts[]=new Context[max * 2];    System.arraycopy(contexts,0,newContexts,0,max);    max*=2;    contexts=newContexts;  }  currentContext=contexts[contextPos];  if (currentContext == null) {    contexts[contextPos]=currentContext=new Context();  }  if (contextPos > 0) {    currentContext.setParent(contexts[contextPos - 1]);  }}  }
class C{  public void incrementFor(T key){  Integer value=counter.get(key);  if (value == null) {    counter.put(key,1);  } else {    counter.put(key,value + 1);  }  total++;}  }
class C{  public LnSv2MessageContents(LocoNetMessage m) throws java.lang.IllegalArgumentException {  log.debug("interpreting a LocoNet message - may be an SV2 message");  if (!isSupportedSv2Message(m)) {    log.debug("interpreting a LocoNet message is NOT an SV2 message");    throw new java.lang.IllegalArgumentException("LocoNet message is not an SV2 message");  }  src=m.getElement(SV2_SRC_ELEMENT_INDEX);  int svx1=m.getElement(SV2_SVX1_ELEMENT_INDEX);  int svx2=m.getElement(SV2_SVX2_ELEMENT_INDEX);  sv_cmd=m.getElement(SV2_SV_CMD_ELEMENT_INDEX);  dst_l=m.getElement(SV2_SV_DST_L_ELEMENT_INDEX) + (((svx1 & SV2_SV_DST_L_DSTLX7_CHECK_MASK) == SV2_SV_DST_L_DSTLX7_CHECK_MASK) ? 0x80 : 0);  dst_h=m.getElement(SV2_SV_DST_H_ELEMENT_INDEX) + (((svx1 & SV2_SV_DST_H_DSTHX7_CHECK_MASK) == SV2_SV_DST_H_DSTHX7_CHECK_MASK) ? 0x80 : 0);  dst=dst_l + (256 * dst_h);  sv_adrl=m.getElement(SV2_SV_ADRL_ELEMENT_INDEX) + (((svx1 & SV2_SV_ADRL_SVADRL7_CHECK_MASK) == SV2_SV_ADRL_SVADRL7_CHECK_MASK) ? 0x80 : 0);  sv_adrh=m.getElement(SV2_SV_ADRH_ELEMENT_INDEX) + (((svx1 & SV2_SV_ADRH_SVADRH7_CHECK_MASK) == SV2_SV_ADRH_SVADRH7_CHECK_MASK) ? 0x80 : 0);  sv_adr=sv_adrl + (256 * sv_adrh);  d1=m.getElement(SV2_SVD1_ELEMENT_INDEX) + (((svx2 & SV2_SV_D1_D1X7_CHECK_MASK) == SV2_SV_D1_D1X7_CHECK_MASK) ? 0x80 : 0);  d2=m.getElement(SV2_SVD2_ELEMENT_INDEX) + (((svx2 & SV2_SV_D2_D2X7_CHECK_MASK) == SV2_SV_D2_D2X7_CHECK_MASK) ? 0x80 : 0);  d3=m.getElement(SV2_SVD3_ELEMENT_INDEX) + (((svx2 & SV2_SV_D3_D3X7_CHECK_MASK) == SV2_SV_D3_D3X7_CHECK_MASK) ? 0x80 : 0);  d4=m.getElement(SV2_SVD4_ELEMENT_INDEX) + (((svx2 & SV2_SV_D4_D4X7_CHECK_MASK) == SV2_SV_D4_D4X7_CHECK_MASK) ? 0x80 : 0);  return;}  }
class C{  public SoftValueHashMap(int initialCapacity){  hash=new HashMap(initialCapacity);}  }
class C{  public FilteredWarmEmissionHandler(final double simulationEndTime,final int noOfTimeBins){  this(simulationEndTime,noOfTimeBins,null,null,null,null);  LOGGER.info("No filtering is used, result will include all links, persons from all user groups..");}  }
class C{  private int readFrameType(final Object[] frame,final int index,int v,final char[] buf,final Label[] labels){  int type=b[v++] & 0xFF;switch (type) {case 0:    frame[index]=Opcodes.TOP;  break;case 1:frame[index]=Opcodes.INTEGER;break;case 2:frame[index]=Opcodes.FLOAT;break;case 3:frame[index]=Opcodes.DOUBLE;break;case 4:frame[index]=Opcodes.LONG;break;case 5:frame[index]=Opcodes.NULL;break;case 6:frame[index]=Opcodes.UNINITIALIZED_THIS;break;case 7:frame[index]=readClass(v,buf);v+=2;break;default :frame[index]=readLabel(readUnsignedShort(v),labels);v+=2;}return v;}  }
class C{  public void updateTask(){  if (toDistance - theMaid.getActiveModeClass().getDistanceSqToStartFollow() > 1.0) {    theMaid.getLookHelper().setLookPositionWithEntity(theOwner,10F,theMaid.getVerticalFaceSpeed());  }  if (theMaid.isSitting()) {    return;  }  if (!theMaid.isInWater()) {    theMaid.setSprinting(toDistance > sprintDist);    if (--field_48310_h > 0) {      return;    }  }  field_48310_h=10;  PathEntity entity=theMaid.getNavigator().getPathToEntityLiving(theOwner);  theMaid.getNavigator().setPath(entity,moveSpeed);}  }
class C{  private void gobble(Iterator iter){  if (eatTheRest) {    while (iter.hasNext()) {      tokens.add(iter.next());    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static boolean dateBeforeInclusive(final Date date1,final Date date2){  return !date1.after(date2);}  }
class C{  public boolean hasSize(){  return hasExtension(Size.class);}  }
class C{  public LineIterator(final Reader reader) throws IllegalArgumentException {  if (reader == null) {    throw new IllegalArgumentException("Reader must not be null");  }  if (reader instanceof BufferedReader) {    bufferedReader=(BufferedReader)reader;  } else {    bufferedReader=new BufferedReader(reader);  }}  }
class C{  public CassandraConfig build(){  return create(version,cpus,memoryMb,diskMb,diskType,replaceIp,heap,location,jmxPort,publishDiscoveryInfo,application);}  }
class C{  @Override public void onMessageReceived(String from,Bundle data){  String message=data.getString("message");  Log.d(TAG,"From: " + from);  Log.d(TAG,"Message: " + message);  sendNotification(message);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public boolean isWhiteOnTop(){  return isWhiteOnTop;}  }
class C{  private void endFling(boolean scrollIntoSlots){synchronized (this) {    mRotator.forceFinished(true);  }  if (scrollIntoSlots)   scrollIntoSlots();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Bitmap toBitmap(int width,int height,int edge,int numSample,int color){  final Bitmap bitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  final Canvas canvas=new Canvas(bitmap);  canvas.translate(edge,edge);  final Paint paint=new Paint();  paint.setAntiAlias(BITMAP_RENDERING_ANTIALIAS);  paint.setDither(BITMAP_RENDERING_DITHER);  paint.setColor(color);  paint.setStyle(Paint.Style.STROKE);  paint.setStrokeJoin(Paint.Join.ROUND);  paint.setStrokeCap(Paint.Cap.ROUND);  paint.setStrokeWidth(BITMAP_RENDERING_WIDTH);  final ArrayList<GestureStroke> strokes=mStrokes;  final int count=strokes.size();  for (int i=0; i < count; i++) {    Path path=strokes.get(i).toPath(width - 2 * edge,height - 2 * edge,numSample);    canvas.drawPath(path,paint);  }  return bitmap;}  }
class C{  private char replaceEntity() throws XMLStreamException {  if ((_state == STATE_COMMENT) || (_state == STATE_PI) || (_state == STATE_CDATA))   return '&';  int start=_index;  _data[_index++]='&';  while (true) {    if (_readIndex >= _readCount)     reloadBuffer();    char c=_data[_index++]=_readBuffer[_readIndex++];    if (c == ';')     break;    if (c <= ' ')     throw new XMLStreamException("';' expected",_location);  }  while (start + _entities.getMaxLength() >= _data.length) {    increaseDataBuffer();  }  int length=_entities.replaceEntity(_data,start,_index - start);  _index=start + length;  if (_readIndex >= _readCount)   reloadBuffer();  char c=_readBuffer[_readIndex++];  return (c == '&') ? (c=replaceEntity()) : c;}  }
class C{  @Util private static void removeResponseCookie(String name){  response.setCookie(name,"",null,"/",0,true,true);}  }
class C{  public CryptoProvider(){  super("Crypto",1.0,"HARMONY (SHA1 digest; SecureRandom; SHA1withDSA signature)");  final String MD_NAME="org.apache.harmony.security.provider.crypto.SHA1_MessageDigestImpl";  final String SR_NAME="org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl";  final String SIGN_NAME="org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl";  final String SIGN_ALIAS="SHA1withDSA";  final String KEYF_NAME="org.apache.harmony.security.provider.crypto.DSAKeyFactoryImpl";  put("MessageDigest.SHA-1",MD_NAME);  put("MessageDigest.SHA-1 ImplementedIn","Software");  put("Alg.Alias.MessageDigest.SHA1","SHA-1");  put("Alg.Alias.MessageDigest.SHA","SHA-1");  put("SecureRandom.SHA1PRNG",SR_NAME);  put("SecureRandom.SHA1PRNG ImplementedIn","Software");  put("Signature.SHA1withDSA",SIGN_NAME);  put("Signature.SHA1withDSA ImplementedIn","Software");  put("Alg.Alias.Signature.SHAwithDSA",SIGN_ALIAS);  put("Alg.Alias.Signature.DSAwithSHA1",SIGN_ALIAS);  put("Alg.Alias.Signature.SHA1/DSA",SIGN_ALIAS);  put("Alg.Alias.Signature.SHA/DSA",SIGN_ALIAS);  put("Alg.Alias.Signature.SHA-1/DSA",SIGN_ALIAS);  put("Alg.Alias.Signature.DSA",SIGN_ALIAS);  put("Alg.Alias.Signature.DSS",SIGN_ALIAS);  put("Alg.Alias.Signature.OID.1.2.840.10040.4.3",SIGN_ALIAS);  put("Alg.Alias.Signature.1.2.840.10040.4.3",SIGN_ALIAS);  put("Alg.Alias.Signature.1.3.14.3.2.13",SIGN_ALIAS);  put("Alg.Alias.Signature.1.3.14.3.2.27",SIGN_ALIAS);  put("KeyFactory.DSA",KEYF_NAME);  put("KeyFactory.DSA ImplementedIn","Software");  put("Alg.Alias.KeyFactory.1.3.14.3.2.12","DSA");  put("Alg.Alias.KeyFactory.1.2.840.10040.4.1","DSA");}  }
class C{  public ReplDBMSEvent filter(ReplDBMSEvent event) throws ReplicatorException, InterruptedException {  ArrayList<DBMSData> data=event.getData();  if (data == null)   return event;  for (Iterator<DBMSData> iterator=data.iterator(); iterator.hasNext(); ) {    DBMSData dataElem=iterator.next();    if (dataElem instanceof RowChangeData) {      RowChangeData rdata=(RowChangeData)dataElem;      for (Iterator<OneRowChange> iterator2=rdata.getRowChanges().iterator(); iterator2.hasNext(); ) {        OneRowChange orc=iterator2.next();        if (filterEvent(orc.getSchemaName(),orc.getTableName())) {          if (logger.isDebugEnabled())           logger.debug("Filtering event");          iterator2.remove();        }      }      if (rdata.getRowChanges().isEmpty()) {        iterator.remove();      }    } else     if (dataElem instanceof StatementData) {      StatementData sdata=(StatementData)dataElem;      String schema=null;      String table=null;      Object parsingMetadata=sdata.getParsingMetadata();      if (parsingMetadata == null) {        String query=sdata.getQuery();        parsingMetadata=parser.match(query);        sdata.setParsingMetadata(parsingMetadata);      }      if (parsingMetadata != null && parsingMetadata instanceof SqlOperation) {        SqlOperation parsed=(SqlOperation)parsingMetadata;        schema=parsed.getSchema();        table=parsed.getName();        if (logger.isDebugEnabled())         logger.debug("Parsing found schema = " + schema + " / table = "+ table);      }      if (schema == null)       schema=sdata.getDefaultSchema();      if (schema == null) {        final String query=sdata.getQuery();        logger.warn("Ignoring query : No schema found for this query from event " + event.getSeqno() + (query != null ? " (" + query.substring(0,Math.min(query.length(),200)) + "...)" : ""));        continue;      }      if (filterEvent(schema,table)) {        if (logger.isDebugEnabled())         logger.debug("Filtering event");        iterator.remove();      }    }  }  if (event.getFragno() == 0 && event.getLastFrag() && data.isEmpty()) {    return null;  }  return event;}  }
class C{  private DoubleConstant parseDoubleConstant(int index) throws IOException {  long bits=readLong();  double value=Double.longBitsToDouble(bits);  return new DoubleConstant(_class.getConstantPool(),index,value);}  }
class C{  public static IgniteCheckedException unwrapQueryException(Throwable err){  assert err != null;  Throwable parent=err;  Throwable child=parent.getCause();  while (true) {    if (child == null || child == parent)     break;    if (child instanceof IgniteException || child instanceof IgniteCheckedException || child instanceof CacheException) {      parent=child;      child=parent.getCause();      continue;    }    break;  }  if (parent.getMessage() == null)   return new IgniteCheckedException("Query execution failed due to exception: " + parent.getClass().getName(),err);  return new IgniteCheckedException(parent.getMessage(),err);}  }
class C{  public static boolean isUnreserved(char a){  return isAlphaNumeric(a) || a == '-' || a == '.' || a == '_' || a == '~';}  }
class C{  public static void main(String[] args){  new ConvertDialog();}  }
class C{  public static boolean isWellFormedAddress(String p_address){  if (p_address == null) {    return false;  }  String address=p_address.trim();  int addrLength=address.length();  if (addrLength == 0 || addrLength > 255) {    return false;  }  if (address.startsWith(".") || address.startsWith("-")) {    return false;  }  int index=address.lastIndexOf('.');  if (address.endsWith(".")) {    index=address.substring(0,index).lastIndexOf('.');  }  if (index + 1 < addrLength && isDigit(p_address.charAt(index + 1))) {    char testChar;    int numDots=0;    for (int i=0; i < addrLength; i++) {      testChar=address.charAt(i);      if (testChar == '.') {        if (!isDigit(address.charAt(i - 1)) || (i + 1 < addrLength && !isDigit(address.charAt(i + 1)))) {          return false;        }        numDots++;      } else       if (!isDigit(testChar)) {        return false;      }    }    if (numDots != 3) {      return false;    }  } else {    char testChar;    for (int i=0; i < addrLength; i++) {      testChar=address.charAt(i);      if (testChar == '.') {        if (!isAlphanum(address.charAt(i - 1))) {          return false;        }        if (i + 1 < addrLength && !isAlphanum(address.charAt(i + 1))) {          return false;        }      } else       if (!isAlphanum(testChar) && testChar != '-') {        return false;      }    }  }  return true;}  }
class C{  private void closeAll(List nodeList,CleanTimeValues cleanTimeValues){  TagPos firstTagPos=getOpenTags(cleanTimeValues).findFirstTagPos();  for (  TagPos pos : getOpenTags(cleanTimeValues).list) {    if (Thread.currentThread().isInterrupted()) {      handleInterruption();      return;    }    properties.fireHtmlError(true,(TagNode)nodeList.get(pos.position),ErrorType.UnclosedTag);  }  if (firstTagPos != null) {    closeSnippet(nodeList,firstTagPos,null,cleanTimeValues);  }}  }
class C{  public Vineyard(){  super();}  }
class C{  public static ErThrowableInformation fromThrowableInformation(ThrowableInformation tw){  ErThrowableInformation ert=new ErThrowableInformation();  ert.setThrowable(ErThrowable.formThrowable(tw.getThrowable()));  ert.setRep(tw.getThrowableStrRep());  try {    Field field=tw.getClass().getDeclaredField("category");    field.setAccessible(true);    ert.setCategory(ErCategory.fromCategory((Category)field.get(tw)));  } catch (  NoSuchFieldException e) {    logger.error(e.getMessage(),e);  }catch (  IllegalAccessException e) {    logger.error(e.getMessage(),e);  }  return ert;}  }
class C{  private void cleanupCustomizations(){  if (!m_source.isObjectExists("AD_ChangeLog",m_source.getTables()))   return;  if (!m_source.isObjectExists("AD_Table",m_source.getTables()))   return;  if (!m_source.isObjectExists("AD_Column",m_source.getTables()))   return;  if (!m_source.isObjectExists("AD_Reference",m_source.getTables()))   return;  resetDBObjects(null);  m_objectType=s_logger.localizeMessage("customization");  m_objectTypes=s_logger.localizeMessage("customizations");  m_counterUpd=new Integer(0);  m_totalUpd=new Integer(0);  s_logger.log(Level.CONFIG,"");  s_logger.log(Level.CONFIG,"cleanupCustomizations",new Object[]{m_objectTypes,m_direction});  String vendor=m_target.getVendor();  String catalog=m_target.getCatalog();  String schema=m_target.getSchema();  Savepoint sp=m_target.setSavepoint("reapply customizations");  Statement stmtLoadCustomizations=m_target.setStatement();  ResultSet rsLoadCustomizations=m_target.executeQuery(stmtLoadCustomizations,s_dbEngine.sqlAD_getCustomizationChangeLogs(vendor,catalog,schema));  while (m_target.getResultSetNext(rsLoadCustomizations)) {    String tableName=m_target.getResultSetString(rsLoadCustomizations,"TABLENAME");    int recordID=m_target.getResultSetInt(rsLoadCustomizations,"RECORDID");    String columnName=m_target.getResultSetString(rsLoadCustomizations,"COLUMNNAME");    String newValue=m_target.getResultSetString(rsLoadCustomizations,"NEWVALUE");    String displayType=m_target.getResultSetString(rsLoadCustomizations,"DISPLAYTYPE");    if (newValue == null || newValue.length() == 0 || newValue.equalsIgnoreCase("NULL")) {      newValue=null;    } else     if (displayType.equalsIgnoreCase("YES-NO")) {      if (newValue.equalsIgnoreCase("true"))       newValue="Y"; else       newValue="N";    }    int dataType=0;    DBObject table=m_source.getObjectByName(tableName,m_source.getTables());    String checkVendor=m_source.getVendor();    if (table == null) {      table=m_target.getObjectByName(tableName,m_target.getTables());      checkVendor=m_target.getVendor();      if (table != null && table.getCustomizationLevel() == s_parameters.CUSTOMNONE)       table=null;    }    if (table != null) {      HashMap<Integer,DBObjectDefinition> columns=table.getContents();      for (Iterator<Integer> it=columns.keySet().iterator(); it.hasNext(); ) {        int key=it.next();        DBObject_Table_Column column=(DBObject_Table_Column)columns.get(key);        if (column.getName().equalsIgnoreCase(columnName)) {          dataType=s_dbEngine.getDataTypeID(checkVendor,column.getType());          break;        }      }    }    if (dataType != 0) {      ArrayList<String> columnNames=new ArrayList<String>();      columnNames.add(columnName);      ArrayList<String> whereColumnNames=new ArrayList<String>();      String whereColumnName=new StringBuffer(tableName).append("_ID").toString();      if (tableName.equalsIgnoreCase("AD_Ref_Table"))       whereColumnName="AD_Reference_ID";      whereColumnNames.add(whereColumnName);      PreparedStatementWrapper stmtReapplyCustomization=m_target.setPreparedStatement(s_dbEngine.sql_updatePreparedStatement(vendor,catalog,schema,tableName,columnNames,whereColumnNames));      if (dataType >= s_dbEngine.DATETYPE_START && dataType <= s_dbEngine.TIMESTAMPTYPE_END) {        if (newValue != null)         m_target.setPreparedStatementTimestamp(stmtReapplyCustomization,1,java.sql.Timestamp.valueOf(newValue)); else         m_target.setPreparedStatementNull(stmtReapplyCustomization,1,java.sql.Types.TIMESTAMP);      } else       if (dataType < s_dbEngine.CHARTYPE_START) {        if (newValue != null)         m_target.setPreparedStatementBigDecimal(stmtReapplyCustomization,1,new BigDecimal(newValue)); else         m_target.setPreparedStatementNull(stmtReapplyCustomization,1,java.sql.Types.NUMERIC);      } else {        if (newValue != null)         m_target.setPreparedStatementString(stmtReapplyCustomization,1,newValue); else         m_target.setPreparedStatementNull(stmtReapplyCustomization,1,java.sql.Types.VARCHAR);      }      m_target.setPreparedStatementInt(stmtReapplyCustomization,2,recordID);      Integer sqlResult=m_target.executeUpdate(stmtReapplyCustomization,false);      if (sqlResult != null) {        logUpdateDetail(sqlResult,null);        m_counterUpd=new Integer(m_counterUpd.intValue() + 1);      }      m_target.releasePreparedStatement(stmtReapplyCustomization);    }    m_totalUpd=new Integer(m_totalUpd.intValue() + 1);  }  m_target.releaseResultSet(rsLoadCustomizations);  m_target.releaseStatement(stmtLoadCustomizations);  m_target.releaseSavepoint(sp);  logResults();}  }
class C{  public boolean hasEndDate(){  return hasExtension(EndDate.class);}  }
class C{  public void processSequences() throws IOException {  processSequences(true,true);}  }
class C{  private static final boolean subPartMatchNS(String p,String t){  return (p == t) || ((null != p) && ((p.length() > 0) ? ((t == WILD) || p.equals(t)) : null == t));}  }
class C{  public Socks4Message(int cmd){  super(cmd,null,0);  this.user=null;  msgLength=2;  msgBytes=new byte[2];  msgBytes[0]=(byte)0;  msgBytes[1]=(byte)command;}  }
class C{  public UrlEncodedFormWriter(){}  }
class C{  protected void traverseDelta(IJavaElementDelta delta,IPackageFragmentRoot root,IJavaProject project){  boolean processChildren=true;  Openable element=(Openable)delta.getElement();switch (element.getElementType()) {case IJavaElement.JAVA_PROJECT:    project=(IJavaProject)element;  break;case IJavaElement.PACKAGE_FRAGMENT_ROOT:root=(IPackageFragmentRoot)element;break;case IJavaElement.COMPILATION_UNIT:CompilationUnit cu=(CompilationUnit)element;if (cu.isWorkingCopy() && !cu.isPrimary()) {return;}case IJavaElement.CLASS_FILE:processChildren=false;break;}switch (delta.getKind()) {case IJavaElementDelta.ADDED:elementAdded(element);break;case IJavaElementDelta.REMOVED:elementRemoved(element);break;case IJavaElementDelta.CHANGED:if ((delta.getFlags() & IJavaElementDelta.F_CONTENT) != 0) {elementChanged(element);}break;}if (processChildren) {IJavaElementDelta[] children=delta.getAffectedChildren();for (int i=0; i < children.length; i++) {IJavaElementDelta childDelta=children[i];traverseDelta(childDelta,root,project);}}}  }
class C{  public boolean isFavorite(String word){  QueryBuilder queryBuilder=new QueryBuilder(Result.class);  queryBuilder=queryBuilder.whereEquals("query ",word);  return !mLiteOrm.query(queryBuilder).isEmpty();}  }
class C{  public String sslKeyStoreKeyPassword(){  return reader.getString(SSL_KEY_STORE_KEY_PASSWORD,null);}  }
class C{  public Transfer writeBytes(byte[] buff,int off,int len) throws IOException {  out.write(buff,off,len);  return this;}  }
class C{  public void update(String roadName,String roadNumber,String dccAddress,String mfg,String decoderMfgID,String decoderVersionID,String id){  update(this._group,roadName,roadNumber,dccAddress,mfg,decoderMfgID,decoderVersionID,id);}  }
class C{  public OnSetClause addAssignment(Expression expression){  assignments.add(new Assignment(expression));  return this;}  }
class C{  public boolean isVariadic(){  return variadic;}  }
class C{  public void e(Object str){  if (debug) {    if (logLevel <= Log.ERROR) {      String name=getFunctionName();      if (name != null) {        Log.e(tag,name + "\n" + str+ "\n------------------------------------------------------------------------------");      } else {        Log.e(tag,str.toString());      }    }  }}  }
class C{  public Master(String filename,Name origin) throws IOException {  this(new File(filename),origin,-1);}  }
class C{  public boolean add(final short[] a){  int i=d, l=a.length;  long bits[]=this.bits;  boolean alreadySet=true;  while (i-- != 0)   alreadySet&=set(bits,hash(a,l,i));  if (!alreadySet)   size++;  return !alreadySet;}  }
class C{  public void updateDataPointColors(Dataset data){  for (int i=0; i < data.getNumPoints(); i++) {    DataPointColored point=(DataPointColored)data.getPoint(i);    updateColorOfPoint(point);  }}  }
class C{  public synchronized int numChildren(){  if (m_Current.children == null) {    return 0;  }  return m_Current.children.size();}  }
class C{  public static int readUnsignedMediumInt(IoBuffer in){  byte[] bytes=new byte[3];  in.get(bytes);  int val=0;  val+=(bytes[0] & 0xFF) * 256 * 256;  val+=(bytes[1] & 0xFF) * 256;  val+=(bytes[2] & 0xFF);  return val;}  }
class C{  public static void preinstall(File userSettingsDir) throws InstallFailedException {  if (!preinstalled.compareAndSet(false,true))   return;  try {    CommonUtils.setUserSettingsDir(userSettingsDir);    LibrarySettings.resetLibraryFoldersIfPortable();  } catch (  Exception e) {    throw new InstallFailedException("Settings Directory Failure",e);  }}  }
class C{  public static ValidationExceptionBeanE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ValidationExceptionBeanE object=new ValidationExceptionBeanE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","ValidationExceptionBean").equals(reader.getName())) {          object.setValidationExceptionBean(ValidationExceptionBean.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static LocatorStatusResponse statusLocator(int port,InetAddress bindAddress) throws IOException {  final int timeout=Integer.MAX_VALUE;  try {    TcpClient client=new TcpClient(new DistributionConfigImpl(new Properties()));    return (LocatorStatusResponse)client.requestToServer(bindAddress,port,new LocatorStatusRequest(),timeout,true);  } catch (  ClassNotFoundException e) {    throw new RuntimeException(e);  }}  }
class C{  private void visitSyscall(HLEModuleFunction func,boolean fastSyscall){  maxStackSize=SYSCALL_MAX_STACK_SIZE;  if (!fastSyscall) {    mv.visitMethodInsn(Opcodes.INVOKESTATIC,runtimeContextInternalName,"preSyscall","()V");  }  Label afterSyscallLabel=new Label();  if (func.checkInsideInterrupt()) {    mv.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(IntrManager.class),"getInstance","()" + Type.getDescriptor(IntrManager.class));    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,Type.getInternalName(IntrManager.class),"isInsideInterrupt","()Z");    Label notInsideInterrupt=new Label();    mv.visitJumpInsn(Opcodes.IFEQ,notInsideInterrupt);    loadModuleLoggger(func);    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,Type.getInternalName(Logger.class),"isDebugEnabled","()Z");    Label notDebug=new Label();    mv.visitJumpInsn(Opcodes.IFEQ,notDebug);    loadModuleLoggger(func);    mv.visitLdcInsn(String.format("%s returning errorCode 0x%08X (ERROR_KERNEL_CANNOT_BE_CALLED_FROM_INTERRUPT)",func.getFunctionName(),SceKernelErrors.ERROR_KERNEL_CANNOT_BE_CALLED_FROM_INTERRUPT));    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,Type.getInternalName(Logger.class),"debug","(" + Type.getDescriptor(Object.class) + ")V");    mv.visitLabel(notDebug);    storeRegister(_v0,SceKernelErrors.ERROR_KERNEL_CANNOT_BE_CALLED_FROM_INTERRUPT);    mv.visitJumpInsn(Opcodes.GOTO,afterSyscallLabel);    mv.visitLabel(notInsideInterrupt);  }  if (func.checkDispatchThreadEnabled()) {    loadModule("ThreadManForUser");    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,Type.getInternalName(ThreadManForUser.class),"isDispatchThreadEnabled","()Z");    Label returnError=new Label();    mv.visitJumpInsn(Opcodes.IFEQ,returnError);    mv.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(Interrupts.class),"isInterruptsEnabled","()Z");    Label noError=new Label();    mv.visitJumpInsn(Opcodes.IFNE,noError);    mv.visitLabel(returnError);    loadModuleLoggger(func);    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,Type.getInternalName(Logger.class),"isDebugEnabled","()Z");    Label notDebug=new Label();    mv.visitJumpInsn(Opcodes.IFEQ,notDebug);    loadModuleLoggger(func);    mv.visitLdcInsn(String.format("%s returning errorCode 0x%08X (ERROR_KERNEL_WAIT_CAN_NOT_WAIT)",func.getFunctionName(),SceKernelErrors.ERROR_KERNEL_WAIT_CAN_NOT_WAIT));    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,Type.getInternalName(Logger.class),"debug","(" + Type.getDescriptor(Object.class) + ")V");    mv.visitLabel(notDebug);    storeRegister(_v0,SceKernelErrors.ERROR_KERNEL_WAIT_CAN_NOT_WAIT);    mv.visitJumpInsn(Opcodes.GOTO,afterSyscallLabel);    mv.visitLabel(noError);  }  logSyscallStart(func);  if (func.hasStackUsage()) {    loadMemory();    loadRegister(_sp);    loadImm(func.getStackUsage());    mv.visitInsn(Opcodes.ISUB);    loadImm(0);    loadImm(func.getStackUsage());    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,memoryInternalName,"memset","(IBI)V");  }  CompilerParameterReader parameterReader=new CompilerParameterReader(this);  loadModule(func.getModuleName());  parameterReader.incrementCurrentStackSize();  Label tryStart=new Label();  Label tryEnd=new Label();  Label catchSceKernelErrorException=new Label();  mv.visitTryCatchBlock(tryStart,tryEnd,catchSceKernelErrorException,Type.getInternalName(SceKernelErrorException.class));  Class<?>[] parameterTypes=func.getHLEModuleMethod().getParameterTypes();  Class<?> returnType=func.getHLEModuleMethod().getReturnType();  StringBuilder methodDescriptor=new StringBuilder();  methodDescriptor.append("(");  Annotation[][] paramsAnotations=func.getHLEModuleMethod().getParameterAnnotations();  int paramIndex=0;  for (  Class<?> parameterType : parameterTypes) {    methodDescriptor.append(Type.getDescriptor(parameterType));    loadParameter(parameterReader,func,parameterType,paramsAnotations[paramIndex],afterSyscallLabel,catchSceKernelErrorException);    paramIndex++;  }  methodDescriptor.append(")");  methodDescriptor.append(Type.getDescriptor(returnType));  mv.visitLabel(tryStart);  mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,Type.getInternalName(func.getHLEModuleMethod().getDeclaringClass()),func.getFunctionName(),methodDescriptor.toString());  storeReturnValue(func,returnType);  if (parameterReader.hasErrorPointer()) {    mv.visitVarInsn(Opcodes.ALOAD,LOCAL_ERROR_POINTER);    loadImm(0);    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,Type.getInternalName(TErrorPointer32.class),"setValue","(I)V");  }  loadRegister(_v0);  logSyscallEnd(func,false,-1);  mv.visitInsn(Opcodes.POP);  mv.visitLabel(tryEnd);  mv.visitJumpInsn(Opcodes.GOTO,afterSyscallLabel);  mv.visitLabel(catchSceKernelErrorException);  mv.visitFieldInsn(Opcodes.GETFIELD,Type.getInternalName(SceKernelErrorException.class),"errorCode","I");  logSyscallEnd(func,true,-1);  if (parameterReader.hasErrorPointer()) {    mv.visitVarInsn(Opcodes.ALOAD,LOCAL_ERROR_POINTER);    mv.visitInsn(Opcodes.SWAP);    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,Type.getInternalName(TErrorPointer32.class),"setValue","(I)V");    storeRegister(_v0,0);  } else {    storeRegister(_v0);  }  CodeInstruction previousInstruction=codeBlock.getCodeInstruction(codeInstruction.getAddress() - 4);  if (previousInstruction != null && previousInstruction.getInsn() == Instructions.JR) {    int jumpRegister=(previousInstruction.getOpcode() >> 21) & 0x1F;    loadRegister(jumpRegister);  }  mv.visitLabel(afterSyscallLabel);  if (fastSyscall) {    mv.visitMethodInsn(Opcodes.INVOKESTATIC,runtimeContextInternalName,"postSyscallFast","()V");  } else {    mv.visitMethodInsn(Opcodes.INVOKESTATIC,runtimeContextInternalName,"postSyscall","()V");  }}  }
class C{  public void show(){  for (int i=0; i < values.length; i++) {    for (int j=0; j < values[0].length; j++)     System.out.printf("%9.4f ",values[i][j]);    System.out.println();  }}  }
class C{  public void stop(){  try {    stopAsync();    log.info("Awaiting PeerGroup shutdown ...");    executor.awaitTermination(Long.MAX_VALUE,TimeUnit.SECONDS);  } catch (  InterruptedException e) {    throw new RuntimeException(e);  }}  }
class C{  public Marker createMarker(BridgeContext ctx,Element markerElement,Element paintedElement){  GVTBuilder builder=ctx.getGVTBuilder();  CompositeGraphicsNode markerContentNode=new CompositeGraphicsNode();  boolean hasChildren=false;  for (Node n=markerElement.getFirstChild(); n != null; n=n.getNextSibling()) {    if (n.getNodeType() != Node.ELEMENT_NODE) {      continue;    }    Element child=(Element)n;    GraphicsNode markerNode=builder.build(ctx,child);    if (markerNode == null) {      continue;    }    hasChildren=true;    markerContentNode.getChildren().add(markerNode);  }  if (!hasChildren) {    return null;  }  String s;  UnitProcessor.Context uctx=UnitProcessor.createContext(ctx,paintedElement);  float markerWidth=3;  s=markerElement.getAttributeNS(null,SVG_MARKER_WIDTH_ATTRIBUTE);  if (s.length() != 0) {    markerWidth=UnitProcessor.svgHorizontalLengthToUserSpace(s,SVG_MARKER_WIDTH_ATTRIBUTE,uctx);  }  if (markerWidth == 0) {    return null;  }  float markerHeight=3;  s=markerElement.getAttributeNS(null,SVG_MARKER_HEIGHT_ATTRIBUTE);  if (s.length() != 0) {    markerHeight=UnitProcessor.svgVerticalLengthToUserSpace(s,SVG_MARKER_HEIGHT_ATTRIBUTE,uctx);  }  if (markerHeight == 0) {    return null;  }  double orient;  s=markerElement.getAttributeNS(null,SVG_ORIENT_ATTRIBUTE);  if (s.length() == 0) {    orient=0;  } else   if (SVG_AUTO_VALUE.equals(s)) {    orient=Double.NaN;  } else {    try {      orient=SVGUtilities.convertSVGNumber(s);    } catch (    NumberFormatException nfEx) {      throw new BridgeException(ctx,markerElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_ORIENT_ATTRIBUTE,s});    }  }  Value val=CSSUtilities.getComputedStyle(paintedElement,SVGCSSEngine.STROKE_WIDTH_INDEX);  float strokeWidth=val.getFloatValue();  short unitsType;  s=markerElement.getAttributeNS(null,SVG_MARKER_UNITS_ATTRIBUTE);  if (s.length() == 0) {    unitsType=SVGUtilities.STROKE_WIDTH;  } else {    unitsType=SVGUtilities.parseMarkerCoordinateSystem(markerElement,SVG_MARKER_UNITS_ATTRIBUTE,s,ctx);  }  AffineTransform markerTxf;  if (unitsType == SVGUtilities.STROKE_WIDTH) {    markerTxf=new AffineTransform();    markerTxf.scale(strokeWidth,strokeWidth);  } else {    markerTxf=new AffineTransform();  }  AffineTransform preserveAspectRatioTransform=ViewBox.getPreserveAspectRatioTransform(markerElement,markerWidth,markerHeight,ctx);  if (preserveAspectRatioTransform == null) {    return null;  } else {    markerTxf.concatenate(preserveAspectRatioTransform);  }  markerContentNode.setTransform(markerTxf);  if (CSSUtilities.convertOverflow(markerElement)) {    Rectangle2D markerClip;    float[] offsets=CSSUtilities.convertClip(markerElement);    if (offsets == null) {      markerClip=new Rectangle2D.Float(0,0,strokeWidth * markerWidth,strokeWidth * markerHeight);    } else {      markerClip=new Rectangle2D.Float(offsets[3],offsets[0],strokeWidth * markerWidth - offsets[1] - offsets[3],strokeWidth * markerHeight - offsets[2] - offsets[0]);    }    CompositeGraphicsNode comp=new CompositeGraphicsNode();    comp.getChildren().add(markerContentNode);    Filter clipSrc=comp.getGraphicsNodeRable(true);    comp.setClip(new ClipRable8Bit(clipSrc,markerClip));    markerContentNode=comp;  }  float refX=0;  s=markerElement.getAttributeNS(null,SVG_REF_X_ATTRIBUTE);  if (s.length() != 0) {    refX=UnitProcessor.svgHorizontalCoordinateToUserSpace(s,SVG_REF_X_ATTRIBUTE,uctx);  }  float refY=0;  s=markerElement.getAttributeNS(null,SVG_REF_Y_ATTRIBUTE);  if (s.length() != 0) {    refY=UnitProcessor.svgVerticalCoordinateToUserSpace(s,SVG_REF_Y_ATTRIBUTE,uctx);  }  float[] ref={refX,refY};  markerTxf.transform(ref,0,ref,0,1);  Marker marker=new Marker(markerContentNode,new Point2D.Float(ref[0],ref[1]),orient);  return marker;}  }
class C{  private void prepareTrackForDisplay(Track track,Map<String,Object> resultMap){  TripStatistics tripStatitics=track.getTripStatistics();  String icon=track.getIcon();  String category=icon != null && !icon.equals("") ? null : track.getCategory();  resultMap.put(IS_RECORDING_FIELD,track.getId() == recordingTrackId);  resultMap.put(IS_PAUSED_FIELD,recordingTrackPaused);  resultMap.put(ICON_ID_FIELD,TrackIconUtils.getIconDrawable(icon));  resultMap.put(ICON_CONTENT_DESCRIPTION_ID_FIELD,R.string.image_track);  resultMap.put(NAME_FIELD,track.getName());  resultMap.put(SHARED_OWNER_FIELD,track.getSharedOwner());  resultMap.put(TOTAL_TIME_FIELD,StringUtils.formatElapsedTime(tripStatitics.getTotalTime()));  resultMap.put(TOTAL_DISTANCE_FIELD,StringUtils.formatDistance(this,tripStatitics.getTotalDistance(),metricUnits));  resultMap.put(MARKER_COUNT_FIELD,myTracksProviderUtils.getWaypointCount(track.getId()));  resultMap.put(START_TIME_FIELD,tripStatitics.getStartTime());  resultMap.put(CATEGORY_FIELD,category);  resultMap.put(DESCRIPTION_FIELD,track.getDescription());  resultMap.put(PHOTO_URL_FIELD,null);  resultMap.put(TRACK_ID_FIELD,track.getId());  resultMap.put(MARKER_ID_FIELD,null);}  }
class C{  public void putShort(short x){  bb.putShort(space-=2,x);}  }
class C{  void commit(Transaction t,long maxLogId){  if (store.isClosed()) {    return;  }synchronized (undoLog) {    t.setStatus(Transaction.STATUS_COMMITTING);    for (long logId=0; logId < maxLogId; logId++) {      Long undoKey=getOperationId(t.getId(),logId);      Object[] op=undoLog.get(undoKey);      if (op == null) {        undoKey=undoLog.ceilingKey(undoKey);        if (undoKey == null || getTransactionId(undoKey) != t.getId()) {          break;        }        logId=getLogId(undoKey) - 1;        continue;      }      int mapId=(Integer)op[0];      MVMap<Object,VersionedValue> map=openMap(mapId);      if (map == null) {      } else {        Object key=op[1];        VersionedValue value=map.get(key);        if (value == null) {        } else         if (value.value == null) {          map.remove(key);        } else {          VersionedValue v2=new VersionedValue();          v2.value=value.value;          map.put(key,v2);        }      }      undoLog.remove(undoKey);    }  }  endTransaction(t);}  }
class C{  public static PrincipalUserDto transformToDto(PrincipalUser user){  if (user == null) {    throw new WebApplicationException("Null entity object cannot be converted to Dto object.",Status.INTERNAL_SERVER_ERROR);  }  PrincipalUserDto result=createDtoObject(PrincipalUserDto.class,user);  for (  Dashboard dashboard : user.getOwnedDashboards()) {    result.addOwnedDashboardId(dashboard.getId());  }  return result;}  }
class C{  @Override public boolean execute(String sql) throws SQLException {  try {    debugCodeCall("execute",sql);    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  void markActivityUsed(int activityIndex,String webappId){  int elementIndex=findActivityElement(activityIndex);  if (elementIndex == -1) {    Log.e(TAG,"Failed to find WebappActivity entry: " + activityIndex + ", "+ webappId);    return;  }  ActivityEntry updatedEntry=new ActivityEntry(activityIndex,webappId);  mActivityList.remove(elementIndex);  mActivityList.add(updatedEntry);  storeActivityList();}  }
class C{  public T headers(String value){  return attr("headers",value);}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public NullChange(){  this(RefactoringCoreMessages.NullChange_name);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String methName=getString(stack);  sage.jep.function.PostfixMathCommandI compMeth=null;  if (methName != null)   compMeth=(sage.jep.function.PostfixMathCommandI)Catbert.getAPI().get(methName);  Comparable criteria=(Comparable)stack.pop();  Object dataObj=stack.pop();  if (dataObj == null)   return null;  Object[] currData;  if (dataObj instanceof java.util.Collection)   currData=((java.util.Collection)dataObj).toArray(); else   if (dataObj instanceof java.util.Map)   currData=((java.util.Map)dataObj).keySet().toArray(); else   currData=(Object[])dataObj;  java.text.Collator collie=java.text.Collator.getInstance(Sage.userLocale);  collie.setStrength(java.text.Collator.PRIMARY);  boolean specialChannelCompare=(methName != null) && methName.indexOf("ChannelNumber") != -1;  java.util.Comparator chanCompare=null;  if (specialChannelCompare) {    chanCompare=(stack.getUIMgrSafe() == null) ? EPG.channelNumSorter : stack.getUIMgrSafe().channelNumSorter;  }  for (int i=0; i < currData.length; i++) {    Object testRes;    if (compMeth != null) {      stack.push(currData[i]);      compMeth.setCurNumberOfParameters(1);      compMeth.run(stack);      testRes=stack.pop();    } else     testRes=currData[i];    if (specialChannelCompare) {      try {        if (chanCompare.compare(criteria,testRes) <= 0)         return currData[i];      } catch (      Exception e) {        if (criteria instanceof String && testRes instanceof String) {          if (collie.compare(criteria,testRes) <= 0)           return currData[i];        } else         if (criteria.compareTo(testRes) <= 0)         return currData[i];      }    } else {      if (criteria instanceof String && testRes instanceof String) {        if (collie.compare(criteria,testRes) <= 0)         return currData[i];      } else       if (criteria.compareTo(testRes) <= 0)       return currData[i];    }  }  if (currData.length > 0)   return currData[currData.length - 1]; else   return null;}  }
class C{  @POST @Path("") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public ScheduledEventRestRep createEvent(ScheduledEventCreateParam createParam){  StorageOSUser user=getUserFromContext();  URI tenantId=createParam.getOrderCreateParam().getTenantId();  if (tenantId != null) {    verifyAuthorizedInTenantOrg(tenantId,user);  } else {    tenantId=uri(user.getTenantId());  }  ArgValidator.checkFieldNotNull(createParam.getOrderCreateParam().getCatalogService(),"catalogService");  CatalogService catalogService=catalogServiceManager.getCatalogServiceById(createParam.getOrderCreateParam().getCatalogService());  if (catalogService == null) {    throw APIException.badRequests.orderServiceNotFound(asString(createParam.getOrderCreateParam().getCatalogService()));  }  validateParam(createParam.getScheduleInfo());  validOrderParam(createParam.getScheduleInfo(),createParam.getOrderCreateParam().getParameters());  validateAutomaticExpirationNumber(createParam.getOrderCreateParam().getAdditionalScheduleInfo());  ScheduledEvent newObject=null;  try {    newObject=createScheduledEvent(user,tenantId,createParam,catalogService);  } catch (  APIException ex) {    log.error(ex.getMessage(),ex);    throw ex;  }catch (  Exception e) {    log.error(e.getMessage(),e);  }  return map(newObject);}  }
class C{  private void addCSSClasses(SVGPlot svgp){  if (!svgp.getCSSClassManager().contains(KMEANSBORDER)) {    final StyleLibrary style=context.getStyleLibrary();    CSSClass cls=new CSSClass(this,KMEANSBORDER);    cls=new CSSClass(this,KMEANSBORDER);    cls.setStatement(SVGConstants.CSS_STROKE_PROPERTY,SVGConstants.CSS_BLACK_VALUE);    cls.setStatement(SVGConstants.CSS_STROKE_WIDTH_PROPERTY,style.getLineWidth(StyleLibrary.PLOT) * .5);    cls.setStatement(SVGConstants.CSS_FILL_PROPERTY,SVGConstants.CSS_NONE_VALUE);    cls.setStatement(SVGConstants.CSS_STROKE_LINECAP_PROPERTY,SVGConstants.CSS_ROUND_VALUE);    cls.setStatement(SVGConstants.CSS_STROKE_LINEJOIN_PROPERTY,SVGConstants.CSS_ROUND_VALUE);    svgp.addCSSClassOrLogError(cls);  }}  }
class C{  public static void main(String[] args) throws Exception {  UpdateSigner signer=new UpdateSigner();  for (  String filename : args) {    String signature=signer.sign(filename);    System.out.println("file-signature." + new File(filename).getName() + "="+ signature);  }}  }
class C{  public static double ACCmaxFitness(GEPIndividual ind){  return (1000.0);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public ConcurrentCache(){  concurrentMap=new ConcurrentHashMap<K,Future<V>>();}  }
class C{  public void translate(int x,int y){  mGraphics.translate(x,y);}  }
class C{  public void beforeInsert(int index,short element){  if (index > size || index < 0)   throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ size);  ensureCapacity(size + 1);  System.arraycopy(elements,index,elements,index + 1,size - index);  elements[index]=element;  size++;}  }
class C{  public static <S extends HasCellOutHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    CellOutEvent event=new CellOutEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  private int scanByte(int bitnum,int bytenum,int toscan,byte[] map){  int count=0, mask;  if (VM.TraceStkMaps) {    VM.sysWrite(" scanByte- inputs  bitnum = ",bitnum);    VM.sysWrite("  bytenum = ",bytenum);    VM.sysWriteln(" toscan = ",toscan);    VM.sysWriteln("     stackmap byte = ",map[bytenum]);  }  mask=(1 << (BITS_PER_MAP_ELEMENT - bitnum));  while (toscan > 0) {    if ((mask & map[bytenum]) == 0) {      mask=mask >>> 1;      count++;      toscan--;    } else {      if (VM.TraceStkMaps) {        VM.sysWriteln(" scanByte- return bit number = ",bitnum + count);      }      return bitnum + count;    }  }  return 0;}  }
class C{  protected int nextInAttributeValue() throws IOException, XMLException {  if (current == -1) {    return LexicalUnits.EOF;  }  if (current == '&') {    return readReference();  } else {    loop:     for (; ; ) {switch (current) {case '&':case '<':case -1:        break loop;case '"':case '\'':      if (current == attrDelimiter) {        break loop;      }  }  nextChar();}switch (current) {case -1:  break;case '<':throw createXMLException("invalid.character");case '&':return LexicalUnits.ATTRIBUTE_FRAGMENT;case '\'':case '"':nextChar();if (inDTD) {context=ATTLIST_CONTEXT;} else {context=START_TAG_CONTEXT;}}return LexicalUnits.LAST_ATTRIBUTE_FRAGMENT;}}  }
class C{  public static AllocationId cancelRelocation(AllocationId allocationId){  assert allocationId.getRelocationId() != null;  return new AllocationId(allocationId.getId(),null);}  }
class C{  public UnweightedGraph(List<Edge> edges,int numberOfVertices){  super(edges,numberOfVertices);}  }
class C{  public void childrenRemoved(BeanContextMembershipEvent bcme){  Iterator<Object> it=bcme.iterator();  Object someObj;  while (it.hasNext()) {    someObj=it.next();    if (someObj instanceof Tool) {      logger.fine("ToolPanel removing tool Object");      remove(((Tool)someObj).getKey());    }  }}  }
class C{  public Rectangle2D reserved(Rectangle2D area,RectangleEdge edge){  Rectangle2D result=null;  if (edge == RectangleEdge.TOP) {    result=new Rectangle2D.Double(area.getX(),area.getY(),area.getWidth(),this.top);  } else   if (edge == RectangleEdge.BOTTOM) {    result=new Rectangle2D.Double(area.getX(),area.getMaxY() - this.top,area.getWidth(),this.bottom);  } else   if (edge == RectangleEdge.LEFT) {    result=new Rectangle2D.Double(area.getX(),area.getY(),this.left,area.getHeight());  } else   if (edge == RectangleEdge.RIGHT) {    result=new Rectangle2D.Double(area.getMaxX() - this.right,area.getY(),this.right,area.getHeight());  }  return result;}  }
class C{  public boolean isRepeatUpload(){  return mRepeatUpload;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public static boolean isAllOrientationsEqual(Coordinate[] pts){  int[] orient=new int[3];  orient[0]=RobustDeterminant.orientationIndex(pts[0],pts[1],pts[2]);  orient[1]=RobustDeterminant.orientationIndex(pts[1],pts[2],pts[0]);  orient[2]=RobustDeterminant.orientationIndex(pts[2],pts[0],pts[1]);  return orient[0] == orient[1] && orient[0] == orient[2];}  }
class C{  protected String makeGenericURLCachePath(URL url,String contentType){  String host=WWIO.replaceIllegalFileNameCharacters(url.getHost());  String path=WWIO.replaceIllegalFileNameCharacters(url.getPath());  String filename=path;  if (!WWUtil.isEmpty(url.getQuery())) {    String query=this.removePrivateQueryParameters(url.getQuery());    query=WWIO.replaceIllegalFileNameCharacters(query);    if (!WWUtil.isEmpty(query)) {      filename=path + "_" + query;    }  }  String hashString=String.valueOf(Math.abs(filename.hashCode()));  if (hashString.length() > 4)   hashString=hashString.substring(0,4);  StringBuilder sb=new StringBuilder();  sb.append(host);  sb.append(File.separator);  sb.append(hashString);  sb.append(File.separator);  sb.append(filename);  String suffix=this.makeSuffix(filename,contentType);  if (suffix != null)   sb.append(suffix);  return sb.toString();}  }
class C{  public PutIndexedScriptRequest scriptLang(String scriptLang){  this.scriptLang=scriptLang;  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public DimensionMismatchException(int wrong,int expected){  this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,wrong,expected);}  }
class C{  public String Field_Clear(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value,Object oldValue){  Object A_Depreciation_ID=value;  try {    String SQL="SELECT DepreciationType " + "FROM A_Depreciation " + "WHERE A_Depreciation_ID="+ A_Depreciation_ID;    PreparedStatement pstmt=DB.prepareStatement(SQL,null);    ResultSet rs=pstmt.executeQuery();    if (rs.next()) {      String depType=rs.getString("DepreciationType");      if ("TAB".equals(depType) || "MAN".equals(depType)) {        Env.setContext(ctx,WindowNo,"A_DEPRECIATION_MANUAL_PERIOD","");        mTab.setValue("A_Depreciation_Manual_Period",null);        mTab.setValue("A_Depreciation_Manual_Amount",null);        mTab.setValue("A_Depreciation_Table_Header_ID",null);      }      if (rs.getString("DepreciationType") == "TAB") {        mTab.setValue("A_Depreciation_Manual_Amount",null);      }      if (rs.getString("DepreciationType") == "MAN") {        mTab.setValue("A_Depreciation_Table_Header_ID",null);      }    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.info("PeriodType " + e);    return e.getLocalizedMessage();  }  return "";}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  setHeader();  return success;}  }
class C{  static public final float random(float start,float end){  return start + random.nextFloat() * (end - start);}  }
class C{  public int[][] lookup(char[] chars,int off,int len) throws IOException {  TreeMap<Integer,int[]> result=new TreeMap<>();  boolean found=false;  final FST.BytesReader fstReader=fst.getBytesReader();  FST.Arc<Long> arc=new FST.Arc<>();  int end=off + len;  for (int startOffset=off; startOffset < end; startOffset++) {    arc=fst.getFirstArc(arc);    int output=0;    int remaining=end - startOffset;    for (int i=0; i < remaining; i++) {      int ch=chars[startOffset + i];      if (fst.findTargetArc(ch,arc,arc,i == 0,fstReader) == null) {        break;      }      output+=arc.output.intValue();      if (arc.isFinal()) {        final int finalOutput=output + arc.nextFinalOutput.intValue();        result.put(startOffset - off,segmentations[finalOutput]);        found=true;      }    }  }  return found ? toIndexArray(result) : EMPTY_RESULT;}  }
class C{  private synchronized void updateMinMaxReqRspMs(int val){  if (_minReqRspMs == 0 || _maxReqRspMs == 0) {    _minReqRspMs=_minReqRspMs == 0 ? val : _minReqRspMs;    _maxReqRspMs=_maxReqRspMs == 0 ? val : _maxReqRspMs;  } else   if (val < _minReqRspMs) {    _minReqRspMs=val;  } else   if (val > _maxReqRspMs) {    _maxReqRspMs=val;  }}  }
class C{  public void onMessage(String string) throws IOException {  log.debug("Received from client: {}",string);  try {    this.onMessage(this.connection.getObjectMapper().readTree(string));  } catch (  JsonProcessingException pe) {    log.warn("Exception processing \"{}\"\n{}",string,pe.getMessage());    this.sendErrorMessage(500,Bundle.getMessage(this.connection.getLocale(),"ErrorProcessingJSON",pe.getLocalizedMessage()));  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DomPackage.STRUCTURED_TEXT__ROOT_ELEMENT:    setRootElement((EObject)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public boolean sameRecipient(Uri uri,Context context){  int size=mRecipients.size();  if (size > 1) {    return false;  }  if (uri == null) {    return size == 0;  }  ContactList incomingRecipient=null;  if (uri.getPathSegments().size() >= 2) {    Conversation otherConv=get(context,uri,false);    if (otherConv == null) {      return false;    }    incomingRecipient=otherConv.mRecipients;  } else {    String recipient=getRecipients(uri);    incomingRecipient=ContactList.getByNumbers(recipient,false,false);  }  if (DEBUG)   Log.v(TAG,"sameRecipient incomingRecipient: " + incomingRecipient + " mRecipients: "+ mRecipients);  return mRecipients.equals(incomingRecipient);}  }
class C{  public void put(String key,int value){  if (key != null) {    urlParams.put(key,String.valueOf(value));  }}  }
class C{  public static IDownloaderService CreateProxy(Messenger msg){  return new Proxy(msg);}  }
class C{  public Cursor query(SQLiteDatabase db,String[] projectionIn,String selection,String[] selectionArgs,String groupBy,String having,String sortOrder){  return query(db,projectionIn,selection,selectionArgs,groupBy,having,sortOrder,null);}  }
class C{  public TreeNode(){  this(1,null,null);}  }
class C{  public static void addToolTipDescription(JComponent component,String description){  SettingsTabs.tooltipDescriptions.put(component,description);}  }
class C{  public boolean isWrapperType(){  return WRAPPER_TYPES.contains(rawClass);}  }
class C{  private void report(Throwable e){  DebugPrinter.print(e);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @SuppressWarnings("deprecation") public void testBug21438() throws Exception {  createTable("testBug21438","(t_id int(10), test_date timestamp NOT NULL,primary key t_pk (t_id));");  assertEquals(1,this.stmt.executeUpdate("insert into testBug21438 values (1,NOW());"));  if (this.versionMeetsMinimum(4,1)) {    this.pstmt=((com.mysql.jdbc.Connection)this.conn).serverPrepareStatement("UPDATE testBug21438 SET test_date=ADDDATE(?,INTERVAL 1 YEAR) WHERE t_id=1;");    Timestamp ts=new Timestamp(System.currentTimeMillis());    ts.setNanos(999999999);    this.pstmt.setTimestamp(1,ts);    assertEquals(1,this.pstmt.executeUpdate());    Timestamp future=(Timestamp)getSingleIndexedValueWithQuery(1,"SELECT test_date FROM testBug21438");    assertEquals(future.getYear() - ts.getYear(),1);  }}  }
class C{  public static void main(String[] args){  Gui gui=new Gui();  gui.startGui(new Migrate());}  }
class C{  public static String toString(boolean[] array){  if (array == null) {    return NULL;  }  StringBuilder sb=new StringBuilder();  for (int i=0; i < array.length; i++) {    if (i != 0) {      sb.append(',');    }    sb.append(array[i]);  }  return sb.toString();}  }
class C{  protected Element writeBooleanToXML(Element parent,boolean o,String name) throws Exception {  Element node;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  node=addElement(parent,name,Boolean.TYPE.getName(),true);  node.appendChild(node.getOwnerDocument().createTextNode(new Boolean(o).toString()));  return node;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name_1: ");  result.append(name_1);  result.append(')');  return result.toString();}  }
class C{  public static byte[] encodeInteger(final BigInteger bigInt){  if (bigInt == null) {    throw new NullPointerException("encodeInteger called with null parameter");  }  return encodeBase64(toIntegerBytes(bigInt),false);}  }
class C{  @Override public final Uri insert(final Uri uri,final ContentValues values){  Log.d(TAG,"Uri " + uri.toString());switch (uriMatcher.match(uri)) {case Schema.URI_CODE_CELLS:    return insertCellMeasurement(uri,values);case Schema.URI_CODE_WIFIS:  return insertWifiMeasurement(uri,values);case Schema.URI_CODE_POSITIONS:return insertPosition(uri,values);case Schema.URI_CODE_LOGS:return insertLog(uri,values);case Schema.URI_CODE_SESSIONS:return insertSession(uri,values);default :throw new IllegalArgumentException("Unknown URI: " + uri);}}  }
class C{  public void recoverWork(){  if (DEBUG) {    CLog.d(LOG_TAG,"work_status: recoverWork %s",this);  }  mExitTasksEarly=false;  setPause(false);  Iterator<Entry<String,LoadImageTask>> it=(Iterator<Entry<String,LoadImageTask>>)mLoadWorkList.entrySet().iterator();  while (it.hasNext()) {    Entry<String,LoadImageTask> item=it.next();    LoadImageTask task=item.getValue();    task.restart();    mImageTaskExecutor.execute(task);  }}  }
class C{  public void clear(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    for (    TenantQueue q : qs.values()) {      q.clear();    }  }  finally {    lock.unlock();  }}  }
class C{  public T caseAnonymous_numExpr_2_(Anonymous_numExpr_2_ object){  return null;}  }
class C{  public static String normalizePath(String path){  Objects.requireNonNull(path,"path must not be null");  return path.isEmpty() || path.equals("/*") ? "" : ensureNotEndingSlash(ensureStartingSlash(path));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:30.262 -0500",hash_original_method="B81137E6BD6C07F65D7774D0D377E124",hash_generated_method="0BE63B09E527B1405383654C0D2144C9") public static long lowestOneBit(long v){  return v & -v;}  }
class C{  public Ping(){  super();}  }
class C{  public static long toLong(byte[] bytes,int start){  return toLong(bytes[start],bytes[start + 1],bytes[start + 2],bytes[start + 3],bytes[start + 4],bytes[start + 5],bytes[start + 6],bytes[start + 7]);}  }
class C{  public static boolean isDetached(Object entity){  Preconditions.checkNotNullArgument(entity,"entity is null");  if (entity instanceof BaseGenericIdEntity && BaseEntityInternalAccess.isDetached((BaseGenericIdEntity)entity)) {    return true;  }  return false;}  }
class C{  public int read(final int numBits){  int bits=0;  for (int i=numBits - 1; i >= 0; i--) {    if (currentBitIndex < 0) {      readCurrentByte();    }    boolean bit=(currentByte >> currentBitIndex & 1) != 0;    if (bit) {      bits|=(1 << i);    }    --currentBitIndex;  }  return bits;}  }
class C{  public double normalDistance(final Vector v){  return Math.sqrt(normalDistanceSquared(v));}  }
class C{  public List<NamespaceVO> findNamespaces(String appId,Env env,String clusterName){  List<NamespaceDTO> namespaces=namespaceAPI.findNamespaceByCluster(appId,env,clusterName);  if (namespaces == null || namespaces.size() == 0) {    throw new BadRequestException("namespaces not exist");  }  List<NamespaceVO> namespaceVOs=new LinkedList<>();  for (  NamespaceDTO namespace : namespaces) {    NamespaceVO namespaceVO=null;    try {      namespaceVO=parseNamespace(appId,env,clusterName,namespace);      namespaceVOs.add(namespaceVO);    } catch (    Exception e) {      logger.error("parse namespace error. app id:{}, env:{}, clusterName:{}, namespace:{}",appId,env,clusterName,namespace.getNamespaceName(),e);      throw e;    }  }  return namespaceVOs;}  }
class C{  public boolean isAvailable(){  return available;}  }
class C{  public static void testReportEmpty(final String headerMessage,final SpeedTestReport report,final boolean isRepeat){  Assert.assertEquals(headerMessage + "progress incorrect",report.getProgressPercent(),0,0);  Assert.assertNotEquals(headerMessage + "time incorrect",report.getReportTime(),0);  if (!isRepeat) {    Assert.assertEquals(headerMessage + "request num incorrect",report.getRequestNum(),1);  }  Assert.assertEquals(headerMessage + "start time incorrect",report.getStartTime(),0);  Assert.assertEquals(headerMessage + "temporary packet size incorrect",report.getTemporaryPacketSize(),0);  Assert.assertEquals(headerMessage + "total packet size incorrect",report.getTotalPacketSize(),0);  Assert.assertEquals(headerMessage + "transfer rate bps incorrect",report.getTransferRateBit().intValue(),0);  Assert.assertEquals(headerMessage + "transfer rate ops incorrect",report.getTransferRateOctet().intValue(),0);}  }
class C{  public void drawSeries(Canvas canvas,Paint paint,float[] points,int[] colors,SimpleSeriesRenderer seriesRenderer,float yAxisValue,int seriesIndex,int startIndex){  XYSeriesRenderer renderer=(XYSeriesRenderer)seriesRenderer;  paint.setColor(renderer.getColor());  if (renderer.isFillPoints()) {    paint.setStyle(Style.FILL);  } else {    paint.setStyle(Style.STROKE);  }  int length=points.length;switch (renderer.getPointStyle()) {case X:    for (int i=0; i < length; i+=2) {      drawX(canvas,paint,points[i],points[i + 1]);    }  break;case CIRCLE:for (int i=0; i < length; i+=2) {  if (colors != null && colors[i / 2] != 0) {    paint.setColor(colors[i / 2]);  }  drawCircle(canvas,paint,points[i],points[i + 1]);  paint.setColor(renderer.getColor());}break;case TRIANGLE:float[] path=new float[6];for (int i=0; i < length; i+=2) {drawTriangle(canvas,paint,path,points[i],points[i + 1]);}break;case SQUARE:for (int i=0; i < length; i+=2) {drawSquare(canvas,paint,points[i],points[i + 1]);}break;case DIAMOND:path=new float[8];for (int i=0; i < length; i+=2) {drawDiamond(canvas,paint,path,points[i],points[i + 1]);}break;case POINT:canvas.drawPoints(points,paint);break;}}  }
class C{  public void show(){  if (comboBox instanceof CComboBox && !((CComboBox)comboBox).displayPopup())   return;  if (comboBox instanceof CField && !((CField)comboBox).displayPopup())   return;  super.show();}  }
class C{  public CubeDesc reloadCubeDescLocal(String name) throws IOException {  CubeDesc ndesc=loadCubeDesc(CubeDesc.concatResourcePath(name),false);  cubeDescMap.putLocal(ndesc.getName(),ndesc);  Cuboid.reloadCache(name);  CubeManager cubeManager=CubeManager.getInstance(config);  for (  CubeInstance cube : cubeManager.getCubesByDesc(name)) {    if (cube.getStatus() == RealizationStatusEnum.DESCBROKEN) {      cubeManager.reloadCubeLocal(cube.getName());    }  }  return ndesc;}  }
class C{  @Override public void addMatch(Hmmer2HmmPfamSearchRecord methodMatches,Map<String,RawProtein<TigrFamHmmer2RawMatch>> rawResults) throws IOException {  for (  String sequenceId : methodMatches.getSequenceMatches().keySet()) {    Hmmer2HmmPfamSequenceMatch sequenceMatch=methodMatches.getSequenceMatches().get(sequenceId);    for (    Hmmer2HmmPfamDomainMatch domainMatch : sequenceMatch.getDomainMatches()) {      final RawProtein<TigrFamHmmer2RawMatch> rawProtein;      if (rawResults.keySet().contains(methodMatches.getSequenceId())) {        rawProtein=rawResults.get(methodMatches.getSequenceId());      } else {        rawProtein=new RawProtein<TigrFamHmmer2RawMatch>(methodMatches.getSequenceId());        rawResults.put(methodMatches.getSequenceId(),rawProtein);      }      rawProtein.addMatch(new TigrFamHmmer2RawMatch(methodMatches.getSequenceId(),sequenceMatch.getModelAccession(),SignatureLibrary.TIGRFAM,signatureLibraryRelease,domainMatch.getSeqFrom(),domainMatch.getSeqTo(),sequenceMatch.getEValue(),sequenceMatch.getSequenceScore(),domainMatch.getHmmFrom(),domainMatch.getHmmTo(),domainMatch.getHmmBounds(),domainMatch.getEValue(),domainMatch.getScore()));    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-05 00:22:07.166 -0400",hash_original_method="BDF3AD667A71B37AE55F3E2E0F794D61",hash_generated_method="B0634B256FEDF3B0793C38EB1552F5F9") public static int interfaceModifiers(){  return PUBLIC | PROTECTED | PRIVATE| ABSTRACT| STATIC| STRICT;}  }
class C{  @Override public String toString(){  return "CUDA_ARRAY3D_DESCRIPTOR[" + "Width=" + Width + ","+ "Height="+ Height+ ","+ "CUarray_format_Format="+ Format+ ","+ "NumChannels="+ NumChannels+ "]";}  }
class C{  public static URL resolveLocation(String location) throws MalformedURLException {  return resolveLocation(location,null);}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer();  result.append("{\n");  for (Enumeration e=all(); e.hasMoreElements(); ) {    result.append("  " + (lalr_item)e.nextElement() + "\n");  }  result.append("}");  return result.toString();}  }
class C{  public nobr addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static Rectangle calculateInnerArea(JComponent c,Rectangle r){  if (c == null) {    return null;  }  Rectangle rect=r;  Insets insets=c.getInsets();  if (rect == null) {    rect=new Rectangle();  }  rect.x=insets.left;  rect.y=insets.top;  rect.width=c.getWidth() - insets.left - insets.right;  rect.height=c.getHeight() - insets.top - insets.bottom;  return rect;}  }
class C{  public OFNetmaskSetVendorData(byte tableIndex,int netMask){  super(BSN_SET_IP_MASK_ENTRY,tableIndex,netMask);}  }
class C{  public long session(){  return session;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-01-27 09:54:40.366 -0500",hash_original_method="B1F6BB5033A022FAFBEA87494F8412EB",hash_generated_method="F555FC379CC33F661BA067D214FC3E04") public long keyAt(int index){  if (mGarbage) {    gc();  }  return mKeys[index];}  }
class C{  private static String caller(){  try {    StackTraceElement[] stack=Thread.currentThread().getStackTrace();    for (    StackTraceElement elem : stack) {      String c=elem.getClassName();      if (c.startsWith(sAppPackage) && !c.equals(Log.class.getName())) {        return "[" + elem.getClassName().replace(sAppPackage,"") + "@"+ elem.getMethodName()+ ":"+ elem.getLineNumber()+ "] ";      }    }  } catch (  Exception e) {  }  return "";}  }
class C{  public DefaultActivityModel(Object owner,String title,String note,boolean isIndeterminate){  this(owner,title,note,0,100,isIndeterminate);}  }
class C{  private LazyQueryContainer createContainer(){  final Map<String,Object> queryConfig=prepareQueryConfigFilters();  final BeanQueryFactory<CustomTargetBeanQuery> targetQF=new BeanQueryFactory<>(CustomTargetBeanQuery.class);  targetQF.setQueryConfiguration(queryConfig);  final LazyQueryContainer targetTableContainer=new LazyQueryContainer(new LazyQueryDefinition(true,SPUIDefinitions.PAGE_SIZE,SPUILabelDefinitions.VAR_CONT_ID_NAME),targetQF);  targetTableContainer.getQueryView().getQueryDefinition().setMaxNestedPropertyDepth(PROPERTY_DEPT);  return targetTableContainer;}  }
class C{  public AnimationBuilder scaleY(float... scaleY){  return property("scaleY",scaleY);}  }
class C{  public static void main(String[] args){  TestMultiInheritence tester=new TestMultiInheritence();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  @Override public Object clone(){  EgdmCollectedReceipt clone=null;  try {    clone=(EgdmCollectedReceipt)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError(e.toString());  }  clone.setId(null);  clone.setEgdemandDetail(null);  return clone;}  }
class C{  public boolean isWantClientAuth(){  return wantClientAuth;}  }
class C{  public XmlHandler addGlobal(Class<?> aClass,Global global){  try {    xml.addGlobal(aClass,global);    xml.write();  } catch (  Exception e) {    JmapperLog.ERROR(e);  }  return this;}  }
class C{  public static <T>T checkNotNull(T reference,@Nullable Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public DefaultSignedAttributeTableGenerator(){  table=new Hashtable();}  }
class C{  public static boolean isIntegerDatatype(IRI datatype){  return datatype.equals(XMLSchema.INTEGER) || datatype.equals(XMLSchema.LONG) || datatype.equals(XMLSchema.INT)|| datatype.equals(XMLSchema.SHORT)|| datatype.equals(XMLSchema.BYTE)|| datatype.equals(XMLSchema.NON_POSITIVE_INTEGER)|| datatype.equals(XMLSchema.NEGATIVE_INTEGER)|| datatype.equals(XMLSchema.NON_NEGATIVE_INTEGER)|| datatype.equals(XMLSchema.POSITIVE_INTEGER)|| datatype.equals(XMLSchema.UNSIGNED_LONG)|| datatype.equals(XMLSchema.UNSIGNED_INT)|| datatype.equals(XMLSchema.UNSIGNED_SHORT)|| datatype.equals(XMLSchema.UNSIGNED_BYTE);}  }
class C{  @SuppressLint("HandlerLeak") public void handleState(AttachmentTask photoTask,int state){switch (state) {case TASK_COMPLETE:    if (photoTask.isCacheEnabled()) {      if (photoTask != null && photoTask.getImage() != null) {        mPhotoCache.put(photoTask.getMessage().getKeyString(),photoTask.getImage());      }    }  Message completeMessage=mHandler.obtainMessage(state,photoTask);completeMessage.sendToTarget();break;case DOWNLOAD_COMPLETE:if (photoTask.getPhotoView() != null && photoTask.getContentType() != null && photoTask.getContentType().contains("image")) {mDecodeThreadPool.execute(photoTask.getPhotoDecodeRunnable());} else {mHandler.obtainMessage(TASK_COMPLETE,photoTask).sendToTarget();}default :mHandler.obtainMessage(state,photoTask).sendToTarget();break;}}  }
class C{  public static short obtain(){  return (short)uigen.obtain();}  }
class C{  public void putShardRoutingState(final String index,final ShardRoutingState shardRoutingState) throws JsonGenerationException, JsonMappingException, IOException {  this.discoveryService.putShardRoutingState(index,shardRoutingState);}  }
class C{  public DHParameters generateParameters(){  BigInteger[] safePrimes=DHParametersHelper.generateSafePrimes(size,certainty,random);  BigInteger p=safePrimes[0];  BigInteger q=safePrimes[1];  BigInteger g=DHParametersHelper.selectGenerator(p,q,random);  return new DHParameters(p,g,q,TWO,null);}  }
class C{  public String diffNormalized(final Sentence other){  final SentenceBuilder ret=new SentenceBuilder();  final Iterator<Expression> it1=expressions.iterator();  final Iterator<Expression> it2=other.expressions.iterator();  while (true) {    final Expression e1=nextValid(it1);    final Expression e2=nextValid(it2);    if ((e1 == null) && (e2 == null)) {      break;    } else     if ((e1 != null) && (e2 != null)) {      if (!e1.matchesNormalized(e2)) {        ret.append("-[" + e1.getNormalized() + "]");        ret.append("+[" + e2.getNormalized() + "]");      }    } else     if (e1 != null) {      ret.append("-[" + e1.getNormalized() + "]");    } else {      ret.append("+[" + e2.getNormalized() + "]");    }  }  return ret.toString();}  }
class C{  public InputStream openStreamRaw() throws IOException {  return data.openStreamRaw(userAgent,null);}  }
class C{  public static <T>void ensureCapacityWithEmptyObject(ArrayList<T> arrayList,int capacity,Class<T> clazz){  if (arrayList == null) {    arrayList=new ArrayList<T>();  }  int delta=capacity - arrayList.size();  if (delta <= 0) {    return;  }  arrayList.ensureCapacity(capacity);  try {    for (; delta > 0; delta--) {      arrayList.add(clazz.newInstance());    }  } catch (  InstantiationException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }}  }
class C{  public static void dftProduct(double[] Xr,double[] Xi,double[] Yr,double[] Yi,double sign){  if (Xr.length != Yr.length || Xi.length != Yi.length || Xr.length != Xi.length)   throw new IllegalArgumentException("Transform array lengths are not equal");  double tmp;  for (int i=0; i < Xr.length; i++) {    tmp=Xr[i] * Yr[i] - sign * Xi[i] * Yi[i];    Yi[i]=Xr[i] * Yi[i] + sign * Xi[i] * Yr[i];    Yr[i]=tmp;  }}  }
class C{  private void addToSuspendedInTransactionList(long subKey){  if (sessionCtx == null || sessionCtx.getContextData() == null || sessionCtx.getContextData().get(SUSPENDED_SUBSCRIPTIONS_IN_TRANSACTION) == null) {    return;  }  List<Long> list=new ArrayList<Long>();  if (sessionCtx.getContextData().get(SUSPENDED_SUBSCRIPTIONS_IN_TRANSACTION) instanceof List<?> && ((List<?>)sessionCtx.getContextData().get(SUSPENDED_SUBSCRIPTIONS_IN_TRANSACTION)).size() > 0) {    list=ParameterizedTypes.list((List<?>)sessionCtx.getContextData().get(SUSPENDED_SUBSCRIPTIONS_IN_TRANSACTION),Long.class);  }  list.add(new Long(subKey));  sessionCtx.getContextData().put(SUSPENDED_SUBSCRIPTIONS_IN_TRANSACTION,list);}  }
class C{  @Override protected Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public static JavaClassAndMethod visitSuperClassMethods(JavaClassAndMethod method,JavaClassAndMethodChooser chooser) throws ClassNotFoundException {  return findMethod(method.getJavaClass().getSuperClasses(),method.getMethod().getName(),method.getMethod().getSignature(),chooser);}  }
class C{  public static ClientTombstoneMessage gc(LocalRegion region,Set<Object> removedKeys,EventID eventId){  return new ClientTombstoneMessage(TOperation.GC_PR,region,removedKeys,eventId);}  }
class C{  public boolean isValid(){  return valid;}  }
class C{  public HarvestProcess urlExists(final String hash) throws IOException {  LoadTimeURL md=this.index.fulltext().getDefaultConnector().getLoadTimeURL(hash);  if (md != null && md.date >= 0)   return HarvestProcess.LOADED;  HarvestProcess hp=this.crawlQueues.exists(ASCII.getBytes(hash));  if (hp != null)   return hp;  return null;}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  public Object unwrap(Class iface) throws SQLException {  return iface;}  }
class C{  @NonNull public DividerAdapterBuilder leadingView(@NonNull ViewFactory viewFactory){  mLeadingItem=new Item(viewFactory,false);  return this;}  }
class C{  private void updateInfo(){  connectAddress=brokerAddressValue.getText();  willTopic=willTopicValue.getText();  willMessage=willMessageValue.getText();  clientId=clientIdValue.getText();  willQos=Integer.parseInt(willQosDrop.getText());  willRetain=willRetainCheckBox.getSelection();  username=usernameValue.getText();  password=passwordValue.getText();  try {    connectPort=Integer.parseInt(brokerPortValue.getText());  } catch (  NumberFormatException e) {  }  try {    keepAlive=Short.parseShort(keepAliveValue.getText());  } catch (  NumberFormatException e) {  }}  }
class C{  public FilterServletOutputStream(final OutputStream stream){  this.stream=stream;}  }
class C{  MenuItemImpl(MenuBuilder menu,int group,int id,int categoryOrder,int ordering,CharSequence title,int showAsAction){  mMenu=menu;  mId=id;  mGroup=group;  mCategoryOrder=categoryOrder;  mOrdering=ordering;  mTitle=title;  mShowAsAction=showAsAction;}  }
class C{  public static Message decodeMessage(byte[] data) throws IOException {  JavaType type=Mapper.getTypeFactory().constructParametricType(Message.class,JsonNode.class,JsonNode.class);  Message<JsonNode,JsonNode> m=Mapper.readValue(data,type);switch (m.fixedHeader().messageType()) {case CONNECT:    MqttConnectVariableHeader cv=Mapper.treeToValue(m.variableHeader(),MqttConnectVariableHeader.class);  MqttConnectPayload cp=Mapper.treeToValue(m.payload(),MqttConnectPayload.class);return new Message<>(m.fixedHeader(),m.additionalHeader(),cv,cp);case CONNACK:MqttConnAckVariableHeader cav=Mapper.treeToValue(m.variableHeader(),MqttConnAckVariableHeader.class);return new Message<>(m.fixedHeader(),m.additionalHeader(),cav,null);case SUBSCRIBE:MqttPacketIdVariableHeader sv=Mapper.treeToValue(m.variableHeader(),MqttPacketIdVariableHeader.class);MqttSubscribePayloadGranted sp=Mapper.treeToValue(m.payload(),MqttSubscribePayloadGranted.class);return new Message<>(m.fixedHeader(),m.additionalHeader(),sv,sp);case SUBACK:MqttPacketIdVariableHeader sav=Mapper.treeToValue(m.variableHeader(),MqttPacketIdVariableHeader.class);MqttSubAckPayload sap=Mapper.treeToValue(m.payload(),MqttSubAckPayload.class);return new Message<>(m.fixedHeader(),m.additionalHeader(),sav,sap);case UNSUBSCRIBE:MqttPacketIdVariableHeader uv=Mapper.treeToValue(m.variableHeader(),MqttPacketIdVariableHeader.class);MqttUnsubscribePayload up=Mapper.treeToValue(m.payload(),MqttUnsubscribePayload.class);return new Message<>(m.fixedHeader(),m.additionalHeader(),uv,up);case PUBLISH:MqttPublishVariableHeader pv=Mapper.treeToValue(m.variableHeader(),MqttPublishVariableHeader.class);MqttPublishPayload pp=Mapper.treeToValue(m.payload(),MqttPublishPayload.class);return new Message<>(m.fixedHeader(),m.additionalHeader(),pv,pp);case UNSUBACK:case PUBACK:case PUBREC:case PUBREL:case PUBCOMP:MqttPacketIdVariableHeader iv=Mapper.treeToValue(m.variableHeader(),MqttPacketIdVariableHeader.class);return new Message<>(m.fixedHeader(),m.additionalHeader(),iv,null);case PINGREQ:case PINGRESP:case DISCONNECT:return m;default :return null;}}  }
class C{  public static final LocoNetMessage createSetUr92GroupNamePacket(String sGroupName) throws jmri.jmrix.loconet.LocoNetException {  int gr_msb1=0;  int gr_msb2=0;  int i;  if (validateGroupName(sGroupName) == false) {    throw new jmri.jmrix.loconet.LocoNetException("Invalid Duplex Group Name - must be exactly 8 characters");  }  LocoNetMessage m=new LocoNetMessage(LnConstants.RE_DPLX_OP_LEN);  gr_msb1+=(Character.valueOf(sGroupName.charAt(0)) > LnConstants.RE_DPLX_7BITS_MAX) ? LnConstants.RE_DPLX_MSB1_BIT : 0;  gr_msb1+=(Character.valueOf(sGroupName.charAt(1)) > LnConstants.RE_DPLX_7BITS_MAX) ? LnConstants.RE_DPLX_MSB2_BIT : 0;  gr_msb1+=(Character.valueOf(sGroupName.charAt(2)) > LnConstants.RE_DPLX_7BITS_MAX) ? LnConstants.RE_DPLX_MSB3_BIT : 0;  gr_msb1+=(Character.valueOf(sGroupName.charAt(3)) > LnConstants.RE_DPLX_7BITS_MAX) ? LnConstants.RE_DPLX_MSB4_BIT : 0;  gr_msb2+=(Character.valueOf(sGroupName.charAt(4)) > LnConstants.RE_DPLX_7BITS_MAX) ? LnConstants.RE_DPLX_MSB1_BIT : 0;  gr_msb2+=(Character.valueOf(sGroupName.charAt(5)) > LnConstants.RE_DPLX_7BITS_MAX) ? LnConstants.RE_DPLX_MSB2_BIT : 0;  gr_msb2+=(Character.valueOf(sGroupName.charAt(6)) > LnConstants.RE_DPLX_7BITS_MAX) ? LnConstants.RE_DPLX_MSB3_BIT : 0;  gr_msb2+=(Character.valueOf(sGroupName.charAt(7)) > LnConstants.RE_DPLX_7BITS_MAX) ? LnConstants.RE_DPLX_MSB4_BIT : 0;  i=0;  m.setElement(i++,LnConstants.OPC_PEER_XFER);  m.setElement(i++,LnConstants.RE_DPLX_OP_LEN);  m.setElement(i++,LnConstants.RE_DPLX_GP_NAME_TYPE);  m.setElement(i++,LnConstants.RE_DPLX_OP_TYPE_WRITE);  m.setElement(i++,gr_msb1);  m.setElement(i++,Character.valueOf(sGroupName.charAt(0)) & LnConstants.RE_DPLX_MAX_NOT_OPC);  m.setElement(i++,Character.valueOf(sGroupName.charAt(1)) & LnConstants.RE_DPLX_MAX_NOT_OPC);  m.setElement(i++,Character.valueOf(sGroupName.charAt(2)) & LnConstants.RE_DPLX_MAX_NOT_OPC);  m.setElement(i++,Character.valueOf(sGroupName.charAt(3)) & LnConstants.RE_DPLX_MAX_NOT_OPC);  m.setElement(i++,gr_msb2);  m.setElement(i++,Character.valueOf(sGroupName.charAt(4)) & LnConstants.RE_DPLX_MAX_NOT_OPC);  m.setElement(i++,Character.valueOf(sGroupName.charAt(5)) & LnConstants.RE_DPLX_MAX_NOT_OPC);  m.setElement(i++,Character.valueOf(sGroupName.charAt(6)) & LnConstants.RE_DPLX_MAX_NOT_OPC);  m.setElement(i++,Character.valueOf(sGroupName.charAt(7)) & LnConstants.RE_DPLX_MAX_NOT_OPC);  for (; i < (LnConstants.RE_DPLX_OP_LEN - 1); i++) {    m.setElement(i,0);  }  return m;}  }
class C{  private void removePhisThatDominateAllDefs(BitVector needsPhi,IR ir,BitVector defs){  for (int i=0; i < needsPhi.length(); i++) {    if (!needsPhi.get(i)) {      continue;    }    if (ir.HIRInfo.dominatorTree.dominates(i,defs)) {      needsPhi.clear(i);    }  }}  }
class C{  public void addAttribute(AttributedCharacterIterator.Attribute attribute,Object value,int start,int end){  if (attribute == null) {    throw new NullPointerException("attribute == null");  }  if (start < 0 || end > text.length() || start >= end) {    throw new IllegalArgumentException();  }  if (value == null) {    return;  }  List<Range> ranges=attributeMap.get(attribute);  if (ranges == null) {    ranges=new ArrayList<Range>(1);    ranges.add(new Range(start,end,value));    attributeMap.put(attribute,ranges);    return;  }  ListIterator<Range> it=ranges.listIterator();  while (it.hasNext()) {    Range range=it.next();    if (end <= range.start) {      it.previous();      break;    } else     if (start < range.end || (start == range.end && value.equals(range.value))) {      Range r1=null, r3;      it.remove();      r1=new Range(range.start,start,range.value);      r3=new Range(end,range.end,range.value);      while (end > range.end && it.hasNext()) {        range=it.next();        if (end <= range.end) {          if (end > range.start || (end == range.start && value.equals(range.value))) {            it.remove();            r3=new Range(end,range.end,range.value);            break;          }        } else {          it.remove();        }      }      if (value.equals(r1.value)) {        if (value.equals(r3.value)) {          it.add(new Range(r1.start < start ? r1.start : start,r3.end > end ? r3.end : end,r1.value));        } else {          it.add(new Range(r1.start < start ? r1.start : start,end,r1.value));          if (r3.start < r3.end) {            it.add(r3);          }        }      } else {        if (value.equals(r3.value)) {          if (r1.start < r1.end) {            it.add(r1);          }          it.add(new Range(start,r3.end > end ? r3.end : end,r3.value));        } else {          if (r1.start < r1.end) {            it.add(r1);          }          it.add(new Range(start,end,value));          if (r3.start < r3.end) {            it.add(r3);          }        }      }      return;    }  }  it.add(new Range(start,end,value));}  }
class C{  public MarkdownDialog(Dialog owner,ModalityType modality){  super(owner,modality);}  }
class C{  private String toLoggableString(){  String string=canceled ? "canceled call" : "call";  HttpUrl redactedUrl=originalRequest.url().resolve("/...");  return string + " to " + redactedUrl;}  }
class C{  public static String toString(InputStream input,Charset encoding) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw,encoding);  return sw.toString();}  }
class C{  public static String format(final List<? extends NameValuePair> parameters,final String charset){  final StringBuilder result=new StringBuilder();  for (  final NameValuePair parameter : parameters) {    final String encodedName=encodeFormFields(parameter.getName(),charset);    final String encodedValue=encodeFormFields(parameter.getValue(),charset);    if (result.length() > 0) {      result.append(PARAMETER_SEPARATOR);    }    result.append(encodedName);    if (encodedValue != null) {      result.append(NAME_VALUE_SEPARATOR);      result.append(encodedValue);    }  }  return result.toString();}  }
class C{  public boolean greaterThanOrEqualTo(final IntegerMap<T> map){  for (  final T key : map.keySet()) {    if (!(this.getInt(key) >= map.getInt(key))) {      return false;    }  }  return true;}  }
class C{  private void removeSubtitleCallBack(){  if (subtitleDisplayHandler != null) {    subtitleDisplayHandler.removeCallbacks(subtitleProcessesor);    subtitleDisplayHandler=null;    hideClosedCaptioning();    srt=null;    srtList=null;  }  if (subtitleFetchHandler != null) {    subtitleFetchHandler.removeCallbacks(subtitleFetchProcessesor);    subtitleFetchHandler=null;  }}  }
class C{  public static void sendErrorResponse(HttpServletResponse response,QName faultCode,String faultString,String faultActor,String faultDetail) throws IOException {  String soapMessageXml=SoapFault.createFaultXml(faultCode,faultString,faultActor,faultDetail);  String encoding=MimeUtils.UTF8;  byte[] messageBytes=soapMessageXml.getBytes(encoding);  response.setStatus(HttpServletResponse.SC_OK);  response.setContentType(MimeTypes.TEXT_XML);  response.setContentLength(messageBytes.length);  response.setHeader("SOAPAction","");  response.setCharacterEncoding(encoding);  response.getOutputStream().write(messageBytes);}  }
class C{  public static int calcUTF16toUTF8Length(final CharSequence s,final int offset,final int len){  final int end=offset + len;  int res=0;  for (int i=offset; i < end; i++) {    final int code=(int)s.charAt(i);    if (code < 0x80)     res++; else     if (code < 0x800) {      res+=2;    } else     if (code < 0xD800 || code > 0xDFFF) {      res+=3;    } else {      if (code < 0xDC00 && (i < end - 1)) {        int utf32=(int)s.charAt(i + 1);        if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) {          i++;          res+=4;          continue;        }      }      res+=3;    }  }  return res;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.164 -0500",hash_original_method="E4A046EBA329CB34ADB8348C19056859",hash_generated_method="BA8A5F1F03DB979CE61190FBA9296E46") public static void sort(Object[] array){  ComparableTimSort.sort(array);}  }
class C{  private void selectQuery(){  final SelectQueryItemDialog queryDefinitionDialog=new SelectQueryItemDialog(getShell(),server,workItemClient.getProjects().getProjects(),selectedQueryDefinition,QueryItemType.QUERY_DEFINITION);  if (queryDefinitionDialog.open() == IDialogConstants.OK_ID) {    selectedQueryDefinition=(QueryDefinition)queryDefinitionDialog.getSelectedQueryItem();    final StoredQuery storedQuery=workItemClient.getStoredQuery(selectedQueryDefinition.getID());    savedQueryText.setText(storedQuery.getName());    setFindEnablement();  }}  }
class C{  @Override public boolean canBeRefined(){  if ((literals[literals.length - 1].getIndex() == allLiterals.length - 1)) {    return false;  } else {    return true;  }}  }
class C{  @Override public Optional<ThrowingConsumer<Context>> selectOther(final RequestMessage requestMessage) throws OpProcessorException {  if (requestMessage.getOp().equals(Tokens.OPS_CLOSE)) {    if (!requestMessage.optionalArgs(Tokens.ARGS_SESSION).isPresent()) {      final String msg=String.format("A message with an [%s] op code requires a [%s] argument",Tokens.OPS_CLOSE,Tokens.ARGS_SESSION);      throw new OpProcessorException(msg,ResponseMessage.build(requestMessage).code(ResponseStatusCode.REQUEST_ERROR_INVALID_REQUEST_ARGUMENTS).statusMessage(msg).create());    }    return Optional.of(null);  } else {    return Optional.empty();  }}  }
class C{  @Override public synchronized void disconnectionNotification(String eventName,Object source){  super.disconnectionNotification(eventName,source);  if (m_listenee == null) {    m_dataProvider=false;    m_trainingProvider=false;    m_testProvider=false;  }}  }
class C{  protected static void succeed(){  System.exit(0);}  }
class C{  @Override public void onWebsocketPong(WebSocket conn,Framedata f){}  }
class C{  public T put(String name,T plugin){  if (plugin == null)   return null;  PluginHolder<T> old=put(name,new PluginHolder<T>(null,plugin));  return old == null ? null : old.get();}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  List<PropertyChangeListener> l=Arrays.asList(listenerList.getListeners(PropertyChangeListener.class));  if (!l.contains(listener)) {    listenerList.add(PropertyChangeListener.class,listener);  }}  }
class C{  public OptionSet addETag(byte[] etag){  if (etag == null)   throw new IllegalArgumentException("ETag option must not be null");  getETags().add(etag);  return this;}  }
class C{  public void removeFoundTextArea(final int[] rectArea,final int page){  if (rectArea == null || areas == null) {    return;  }  final Integer p=page;  final int[][] localAreas=this.areas.get(p);  if (localAreas != null) {    final int size=localAreas.length;    for (int i=0; i < size; i++) {      if (localAreas[i] != null && (contains(rectArea[0],rectArea[1],localAreas[i]) || (localAreas[i][0] == rectArea[0] && localAreas[i][1] == rectArea[1] && localAreas[i][2] == rectArea[2] && localAreas[i][3] == rectArea[3]))) {        localAreas[i]=null;        i=size;      }    }    this.areas.put(p,localAreas);    hasHighlightAreasUpdated=true;  }}  }
class C{  private void populateDiffs(TaskRepository repository,List<DiffEntry> diffs,TaskData taskData){  int diffCount=1;  for (  DiffEntry diffEntry : diffs) {    TaskAttribute diffAttribute=taskData.getRoot().createAttribute(AppraiseReviewTaskSchema.PREFIX_DIFF + diffCount);    diffAttribute.getMetaData().setType(AppraiseReviewTaskSchema.TYPE_DIFF);    TaskAttribute diffNewPathAttribute=diffAttribute.createAttribute(AppraiseReviewTaskSchema.DIFF_NEWPATH);    setAttributeValue(diffNewPathAttribute,diffEntry.getNewPath());    TaskAttribute diffOldPathAttribute=diffAttribute.createAttribute(AppraiseReviewTaskSchema.DIFF_OLDPATH);    setAttributeValue(diffOldPathAttribute,diffEntry.getNewPath());    TaskAttribute diffTypeAttribute=diffAttribute.createAttribute(AppraiseReviewTaskSchema.DIFF_TYPE);    setAttributeValue(diffTypeAttribute,diffEntry.getChangeType().name());    TaskAttribute diffTextAttribute=diffAttribute.createAttribute(AppraiseReviewTaskSchema.DIFF_TEXT);    ByteArrayOutputStream diffOutputStream=new ByteArrayOutputStream();    try (DiffFormatter formatter=new DiffFormatter(diffOutputStream)){      formatter.setRepository(AppraisePluginUtils.getGitRepoForRepository(repository));      try {        formatter.format(diffEntry);        String diffText=new String(diffOutputStream.toByteArray(),"UTF-8");        setAttributeValue(diffTextAttribute,diffText);      } catch (      IOException e) {        AppraiseConnectorPlugin.logWarning("Failed to load a diff for " + taskData.getTaskId(),e);      }    }     diffCount++;  }}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("AcsAccessTokenGroups[");  for (int i=0; i < m_al.size(); i++) {    buffer.append(" [group").append(i + 1);    buffer.append(" = ").append((m_al.get(i)).toString());    buffer.append("] ").append(m_al);  }  buffer.append("]");  return buffer.toString();}  }
class C{  public static synchronized void register(PurchaseObserver observer){  sPurchaseObserver=observer;}  }
class C{  public boolean shouldBuild(){  if (hasBuildChanges) {    if (operationCanceled)     return Policy.buildOnCancel;    return true;  }  return false;}  }
class C{  public boolean equalWithoutMorpheme(DecompoundedWord aOtherSplit){  return toStringWithoutMorpheme().equals(aOtherSplit.toStringWithoutMorpheme());}  }
class C{  private static TeamInfo randomTeam(ArrayList<TeamInfo> list){  int index=random.nextInt(list.size());  TeamInfo team=list.get(index);  long currTime=System.currentTimeMillis();  if ((team.getEndTimeInMillis() < currTime) || team.numMembers() == 0) {    System.out.println("\nteam " + team + " is too old; replacing.");    System.out.println("start time: " + team.getStartTimeInMillis() + ", end time: "+ team.getEndTimeInMillis()+ ", current time:"+ currTime);    removeTeam(index);    return (addLiveTeam());  } else {    return team;  }}  }
class C{  @LargeTest public void testVideoLessThanAudio() throws Exception {  final String videoItemFileName1=INPUT_FILE_PATH + "MPEG4_SP_720x480_30fps_280kbps_AACLC_48kHz_96kbps_s_0_21.mp4";  final String audioTrackFilename=INPUT_FILE_PATH + "AACLC_48KHz_256Kbps_s_1_17.3gp";  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFileName1,renderingMode);  mVideoEditor.addMediaItem(mediaVideoItem1);  final AudioTrack audioTrack=mVideoEditorHelper.createAudio(mVideoEditor,"audioTrackId",audioTrackFilename);  mVideoEditor.addAudioTrack(audioTrack);  assertEquals("Storyboard = mediaItem Duration",mediaVideoItem1.getDuration(),mVideoEditor.getDuration());  assertTrue("Audio Duration > mediaItem Duration",(audioTrack.getDuration() > mediaVideoItem1.getDuration() ? true : false));}  }
class C{  public final int numObjectsAtLocation(final Object location){  final Bag b=(Bag)(objectHash.get(location));  if (b == null)   return 0;  assert sim.util.LocationLog.it(this,location);  return b.numObjs;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TYPE_CONSTRAINT__VALUE:    setValue(VALUE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public ObjectPermissionModel(){}  }
class C{  public static Future<JDialog> inspect(Tree t,List<String> ruleNames){  TreeViewer viewer=new TreeViewer(ruleNames,t);  return viewer.open();}  }
class C{  public static InputDocument parse(String fileName,LangDescriptor language) throws Exception {  String content=load(fileName,language.indentSize);  return parse(fileName,content,language);}  }
class C{  public void addTexture(ATexture texture) throws TextureException {  if (mTextureList.indexOf(texture) > -1)   return;  if (mTextureList.size() + 1 > mMaxTextures) {    throw new TextureException("Maximum number of textures for this material has been reached. Maximum number of textures is " + mMaxTextures + ".");  }  mTextureList.add(texture);  TextureManager.getInstance().addTexture(texture);  texture.registerMaterial(this);  mIsDirty=true;}  }
class C{  public PlatformException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  private void handleDoubleClickEvent(final Event event){  for (int i=0; i < this.items.size(); i++) {    final LauncherItem item=this.items.get(i);    if (item.label != null && item.label.equals(event.widget)) {      if (this.selection != i) {        changeColor(this.selection,false);        this.selection=i;        changeColor(this.selection,true);      }      startAnimation(i,event);      return;    }  }}  }
class C{  public boolean isNumericKeyActions(){  return numericKeyActions;}  }
class C{  public void addGeoJSONGeometryToLayer(GeoJSONObject object,RenderableLayer layer){  if (object == null) {    String message=Logging.getMessage("nullValue.ObjectIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (layer == null) {    String message=Logging.getMessage("nullValue.LayerIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (object.isGeometry())   this.addRenderableForGeometry(object.asGeometry(),layer,null); else   if (object.isFeature())   this.addRenderableForFeature(object.asFeature(),layer); else   if (object.isFeatureCollection())   this.addRenderableForFeatureCollection(object.asFeatureCollection(),layer); else   this.handleUnrecognizedObject(object);}  }
class C{  @Override public void onFocusChange(View v,boolean hasFocus){  if (hasFocus) {    this.setClearDrawableVisible(this.getText().length() > 0);  } else {    this.setClearDrawableVisible(false);  }  if (this.mOnFocusChangeListener != null) {    this.mOnFocusChangeListener.onFocusChange(v,hasFocus);  }}  }
class C{  private void processCompletionStagePublishAndComplete(Operation op){  if (hasOption(ServiceOption.INSTRUMENTATION)) {    updatePerOperationStats(op);  }  if (op.getAction() == Action.GET && !isIndexed()) {    op.linkState(null);    getHost().run(null);    return;  }  publish(op);  if (op.isFromReplication() && !op.isSynchronizeOwner()) {    op.setBodyNoCloning(null);  }  op.complete();}  }
class C{  private void executeQuery(){  log.info("");  int AD_Client_ID=Env.getAD_Client_ID(Env.getCtx());  String sql="";  KeyNamePair docTypeKNPair=(KeyNamePair)cmbDocType.getSelectedItem();  if (docTypeKNPair.getKey() == MRMA.Table_ID) {    sql=getRMASql();  } else {    sql=getOrderSQL();  }  log.fine(sql);  int row=0;  miniTable.setRowCount(row);  try {    PreparedStatement pstmt=DB.prepareStatement(sql.toString(),null);    pstmt.setInt(1,AD_Client_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      miniTable.setRowCount(row + 1);      miniTable.setValueAt(new IDColumn(rs.getInt(1)),row,0);      miniTable.setValueAt(rs.getString(2),row,1);      miniTable.setValueAt(rs.getString(3),row,2);      miniTable.setValueAt(rs.getString(4),row,3);      miniTable.setValueAt(rs.getString(5),row,4);      miniTable.setValueAt(rs.getTimestamp(6),row,5);      miniTable.setValueAt(rs.getBigDecimal(7),row,6);      row++;    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql.toString(),e);  }  miniTable.autoSize();}  }
class C{  public QueryDebuggerEventSettingsReply(final int packetId,final int errorCode){  super(packetId,errorCode);}  }
class C{  public VPlexStorageViewInfo addVirtualVolumesToStorageView(String viewName,String clusterName,Map<String,Integer> virtualVolumeMap) throws VPlexApiException {  s_logger.info("Request to add virtual volumes to storage view on VPlex at {}",_baseURI);  return _exportMgr.addVirtualVolumesToStorageView(viewName,clusterName,virtualVolumeMap);}  }
class C{  public boolean insert(long element){  if (size < maxSize) {    add(element);    return false;  } else   if (element > heap[1]) {    heap[1]=element;    updateTop();    return true;  } else {    return false;  }}  }
class C{  public static boolean isImageType(String mime){  return mime.toLowerCase(Locale.getDefault()).startsWith("image/");}  }
class C{  @Override public void preProcess(ResultProducer rp) throws Exception {  super.preProcess(rp);  if (m_ResultListener == null) {    throw new Exception("No ResultListener set");  }  m_ResultListener.preProcess(this);}  }
class C{  public Adapter createEObjectAdapter(){  return null;}  }
class C{  public boolean isExcluded(String fileName,List<File> excludedSources){  if (excludedSources == null) {    return false;  }  for (  File excludedDir : excludedSources) {    String normalizedFileName=DelphiUtils.normalizeFileName(fileName.toLowerCase());    String excludedDirNormalizedPath=DelphiUtils.normalizeFileName(excludedDir.getAbsolutePath().toLowerCase());    if (normalizedFileName.startsWith(excludedDirNormalizedPath)) {      return true;    }  }  return false;}  }
class C{  public static List<GTSWrapper> chunk(GTSDecoder decoder,long clipfrom,long clipto,long tsboundary,long chunkwidth,String chunklabel,String fileprefix,long maxsize,long maxgts,float lwmratio) throws WarpScriptException, IOException {  Map<Long,GTSEncoder> encoders=new LinkedHashMap<Long,GTSEncoder>();  if (decoder.getLabels().containsKey(chunklabel)) {    throw new WarpScriptException(chunklabel + " is already a label of the GTS to chunk.");  }  long totalsize=0L;  boolean spilled=false;  long boundary=tsboundary % chunkwidth;  while (decoder.next()) {    if (decoder.getTimestamp() < clipfrom || decoder.getTimestamp() > clipto) {      continue;    }    long chunk=chunkwidth * (decoder.getTimestamp() / chunkwidth) + boundary + (boundary >= decoder.getTimestamp() % chunkwidth ? 0 : chunkwidth);    GTSEncoder encoder=encoders.get(chunk);    if (null == encoder) {      encoder=new GTSEncoder(0L);      encoder.setMetadata(decoder.getMetadata());      encoder.getMetadata().putToLabels(chunklabel,Long.toString(chunk));      encoders.put(chunk,encoder);    }    int encsize=encoder.size();    encoder.addValue(decoder.getTimestamp(),decoder.getLocation(),decoder.getElevation(),decoder.getValue());    totalsize+=encoder.size() - encsize;    if (totalsize > maxsize || encoders.size() > maxgts) {      int ngts=encoders.size();      int emptyenc=0;      while (ngts > lwmratio * maxgts || totalsize > lwmratio * maxsize) {        for (        long chunkid : encoders.keySet()) {          GTSEncoder enc=encoders.get(chunkid);          if (0 == enc.size()) {            emptyenc++;            continue;          }          FileOutputStream out=new FileOutputStream(fileprefix + "-" + Long.toString(chunkid),true);          out.write(enc.getBytes());          spilled=true;          out.close();          totalsize-=enc.size();          enc.flush();          emptyenc++;          if (totalsize <= lwmratio * maxsize && (ngts < maxgts || (ngts - emptyenc) <= lwmratio * maxgts)) {            break;          }        }        if (ngts > maxgts) {          List<Long> toremove=new ArrayList<Long>();          for (          long chunkid : encoders.keySet()) {            GTSEncoder enc=encoders.get(chunkid);            if (0 == enc.size()) {              toremove.add(chunkid);              ngts--;            }            if (ngts <= lwmratio * maxgts) {              break;            }          }          for (          long chunkid : toremove) {            encoders.remove(chunkid);          }        }      }    }  }  long lastchunk=chunkwidth * (clipto / chunkwidth) + boundary + (boundary >= clipto % chunkwidth ? 0 : chunkwidth);  long firstchunk=chunkwidth * (clipfrom / chunkwidth) + boundary + (boundary >= clipfrom % chunkwidth ? 0 : chunkwidth);  if (spilled) {    for (long chunkid=firstchunk; chunkid <= lastchunk; chunkid+=chunkwidth) {      GTSEncoder encoder=encoders.get(chunkid);      if (null == encoder) {        File chunkfile=new File(fileprefix + "-" + Long.toString(chunkid));        chunkfile.createNewFile();        continue;      }      if (0 == encoder.size()) {        continue;      }      FileOutputStream out=new FileOutputStream(fileprefix + "-" + Long.toString(chunkid),true);      out.write(encoder.getBytes());      out.close();    }  }  if (spilled) {    return null;  } else {    List<GTSWrapper> result=new ArrayList<GTSWrapper>();    for (long chunkid=firstchunk; chunkid <= lastchunk; chunkid+=chunkwidth) {      GTSWrapper wrapper=new GTSWrapper();      GTSEncoder encoder=encoders.get(chunkid);      wrapper.setMetadata(new Metadata(decoder.getMetadata()));      wrapper.getMetadata().putToLabels(chunklabel,Long.toString(chunkid));      wrapper.setBase(0L);      wrapper.setBucketcount(1L);      wrapper.setBucketspan(chunkwidth);      wrapper.setLastbucket(chunkid);      if (null != encoder) {        wrapper.setCount(encoder.getCount());        wrapper.setEncoded(encoder.getBytes());      }      result.add(wrapper);    }    return result;  }}  }
class C{  public DTMAxisIterator reset(){  _sp=_oldsp;  return resetPosition();}  }
class C{  public static int bitsPerElement(long minimum,long maximum){  int bits;  if (1 + maximum - minimum > 0) {    bits=(int)Math.round(Math.ceil(cern.jet.math.Arithmetic.log(2,1 + maximum - minimum)));  } else {    bits=64;  }  return bits;}  }
class C{  public static double millisecondPerYear(){  return 3.15569E10;}  }
class C{  private void updateCellHeights(){  if (textArea != null) {    cellHeight=textArea.getLineHeight();    ascent=textArea.getMaxAscent();  } else {    cellHeight=20;    ascent=5;  }  repaint();}  }
class C{  public DateTime toDateTime(LocalTime time){  return toDateTime(time,null);}  }
class C{  private String titleOf(SearchResultMediator rp){  int total=rp.totalResults();  String title=rp.getTitle();  if (title.length() > 40) {    title=title.substring(0,39) + "...";  }  return title + " (" + total+ " "+ I18n.tr("results")+ ")";}  }
class C{  private static int unsignedKeyChange(String uname,String server){  ClientUser user=users.get(uname);  if (!user.isAllowsUnsignedChanges()) {    System.out.println("user " + uname + " doesn't allow unsigned key changes");    return ConsistencyErr.DISALLOWED_OP_ERR;  }  String newKeyData=user.getKeyData() + changeCtr;  user.setKeyData(newKeyData);  ClientMessaging.sendULNChangeReqProto(user,server);  AbstractMessage serverMsg=ClientMessaging.receiveRegistrationRespProto();  if (serverMsg == null) {    return ServerErr.MALFORMED_SERVER_MSG_ERR;  } else   if (serverMsg instanceof ServerResp) {    return getServerErr((ServerResp)serverMsg);  } else {    changeCtr++;    return ConsistencyErr.CHECK_PASSED;  }}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 1) {    System.out.println("Usage: java Exercise_12_12 file");    System.exit(1);  }  File file=new File(args[0]);  if (!file.exists()) {    System.out.println("File " + args[0] + " does not exist");    System.exit(2);  }  ArrayList<String> list=new ArrayList<>();  String string1="";  String string2="";  try (Scanner input=new Scanner(file)){    string1=input.nextLine();    while (input.hasNext()) {      string2=input.nextLine();      if (string2.length() > 0 && string2.charAt(string2.length() - 1) == '{') {        list.add(string1.concat(" {"));        string1=input.nextLine();      } else {        list.add(string1);        string1=string2;      }    }    list.add(string1);  }   try (PrintWriter output=new PrintWriter(file)){    for (int i=0; i < list.size(); i++) {      output.println(list.get(i));    }  } }  }
class C{  private void checkConfidentiality(AuthenticationPlugin plugin) throws SQLException {  if (plugin.requiresConfidentiality() && !isSSLEstablished()) {    throw SQLError.createSQLException(Messages.getString("Connection.AuthenticationPluginRequiresSSL",new Object[]{plugin.getProtocolPluginName()}),getExceptionInterceptor());  }}  }
class C{  public DExportPrivateKeyPkcs8(JFrame parent,String entryAlias,PasswordQualityConfig passwordQualityConfig){  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  this.entryAlias=entryAlias;  this.passwordQualityConfig=passwordQualityConfig;  initComponents();}  }
class C{  protected void finalize() throws Throwable {  try {    if (this.key != null) {      java.util.Arrays.fill(this.key,(byte)0x00);      this.key=null;    }  }  finally {    super.finalize();  }}  }
class C{  private static <T>int gallopRight(T key,T[] a,int base,int len,int hint,Comparator<? super T> c){  assert len > 0 && hint >= 0 && hint < len;  int ofs=1;  int lastOfs=0;  if (c.compare(key,a[base + hint]) < 0) {    int maxOfs=hint + 1;    while (ofs < maxOfs && c.compare(key,a[base + hint - ofs]) < 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  } else {    int maxOfs=len - hint;    while (ofs < maxOfs && c.compare(key,a[base + hint + ofs]) >= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  }  assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (c.compare(key,a[base + m]) < 0)     ofs=m; else     lastOfs=m + 1;  }  assert lastOfs == ofs;  return ofs;}  }
class C{  public int hashCode(){  return m_hashCode;}  }
class C{  public void firePropertyChange(PropertyChangeEvent event){  String propertyName=event.getPropertyName();  Object oldValue=event.getOldValue();  Object newValue=event.getNewValue();  if (newValue != null && oldValue != null && newValue.equals(oldValue)) {    return;  }  notifyEachListener:   for (  PropertyChangeListener p : listeners) {    while (p instanceof PropertyChangeListenerProxy) {      PropertyChangeListenerProxy proxy=(PropertyChangeListenerProxy)p;      if (!Objects.equal(proxy.getPropertyName(),propertyName)) {        continue notifyEachListener;      }      p=(PropertyChangeListener)proxy.getListener();    }    p.propertyChange(event);  }}  }
class C{  public void halve(){  for (int i=0; i < coeffs.length; i++) {    coeffs[i]=coeffs[i].multiply(ONE_HALF);  }}  }
class C{  public static List<Person> loadPersonData(Properties props) throws Exception {  String pathname=props.getProperty("persondata.path");  List<Person> persons=new ArrayList<>();  Path path=new File(pathname).toPath();  try (BufferedReader br=Files.newBufferedReader(path)){    int lineno=0;    String line;    while ((line=br.readLine()) != null) {      lineno++;      Object[] fields=parseLine(line,lineno,pathname);      if (fields == null)       continue;      persons.add(new Person((Integer)fields[0],(String)fields[1],(String)fields[2]));    }  }   return persons;}  }
class C{  private void blockCopyLinesDown(int srcInternal,int len){  if (len == 0)   return;  int totalRows=mTotalRows;  int start=len - 1;  TerminalRow lineToBeOverWritten=mLines[(srcInternal + start + 1) % totalRows];  for (int i=start; i >= 0; --i)   mLines[(srcInternal + i + 1) % totalRows]=mLines[(srcInternal + i) % totalRows];  mLines[(srcInternal) % totalRows]=lineToBeOverWritten;}  }
class C{  private static CalendarEntry createSubscription(CalendarService service) throws IOException, ServiceException {  System.out.println("Subscribing to the Google Doodles calendar");  CalendarEntry calendar=new CalendarEntry();  calendar.setId(DOODLES_CALENDAR_ID);  return service.insert(allcalendarsFeedUrl,calendar);}  }
class C{  public String toString(){  return String.valueOf(get());}  }
class C{  @Deprecated @SuppressWarnings("UnusedDeclaration") public static void authenticate(AuthCallback callback,String phoneNumber){  final DigitsAuthConfig.Builder digitsAuthConfigBuilder=new DigitsAuthConfig.Builder().withAuthCallBack(callback).withThemeResId(ThemeUtils.DEFAULT_THEME).withPhoneNumber(phoneNumber);  authenticate(digitsAuthConfigBuilder.build());}  }
class C{  @Override public String serialize(final boolean includingBuiltIn){  final StringBuilder sb=new StringBuilder(populationSets.size() * 10);  sb.append('[');  for (int i=0; i < populationSets.size(); i++) {    if (i != 0) {      sb.append(',');    }    sb.append(StringUtils.toGaml(populationSets.get(i),includingBuiltIn));  }  sb.append(']');  return sb.toString();}  }
class C{  boolean put(boolean isRoot,Vector names,Object value){  return put(isRoot,names,names.size(),value);}  }
class C{  private void startReturn(){  insideReturn=true;}  }
class C{  @Override public void checkConsistency(){  super.checkConsistency();  boolean hasOpeningAndClosingTime=false;  boolean hasOpeningTimeAndLatePenalty=false;  for (  ActivityParams actType : this.getActivityParams()) {    if (actType.isScoringThisActivityAtAll()) {      if ((actType.getOpeningTime() != Time.UNDEFINED_TIME) && (actType.getClosingTime() != Time.UNDEFINED_TIME)) {        hasOpeningAndClosingTime=true;      }      if ((actType.getOpeningTime() != Time.UNDEFINED_TIME) && (getLateArrival_utils_hr() < -0.001)) {        hasOpeningTimeAndLatePenalty=true;      }      if (actType.getOpeningTime() == 0. && actType.getClosingTime() > 24. * 3600 - 1) {        log.error("it looks like you have an activity type with opening time set to 0:00 and closing " + "time set to 24:00. This is most probably not the same as not setting them at all.  " + "In particular, activities which extend past midnight may not accumulate scores.");      }    }  }  if (!hasOpeningAndClosingTime && !hasOpeningTimeAndLatePenalty) {    log.info("NO OPENING OR CLOSING TIMES DEFINED!\n\n\n" + "There is no activity type that has an opening *and* closing time (or opening time and late penalty) defined.\n" + "This usually means that the activity chains can be shifted by an arbitrary\n"+ "number of hours without having an effect on the score of the plans, and thus\n"+ "resulting in wrong results / traffic patterns.\n"+ "If you are using MATSim without time adaptation, you can ignore this warning.\n\n\n");  }  if (this.getMarginalUtlOfWaiting_utils_hr() != 0.0) {    log.warn("marginal utl of wait set to: " + this.getMarginalUtlOfWaiting_utils_hr() + ". Setting this different from zero is "+ "discouraged. The parameter was also abused for pt routing; if you did that, consider setting the new "+ "parameter waitingPt instead.");  }}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  @Override public void drawRight(){  drawFrame(backgroundFrameRight);  drawPhotoCube(texCubeRight);  drawReticle(.1f);  drawTextGraphics(textImage);}  }
class C{  @Override protected int callSpeak(String text,float volume,int utteranceId){  Bundle params=new Bundle();  if (volume != 1.0) {    params.putFloat(TextToSpeech.Engine.KEY_PARAM_VOLUME,volume);  }  return mTextToSpeech.speak(text,TextToSpeech.QUEUE_FLUSH,params,Integer.toString(utteranceId));}  }
class C{  public static float computeDiscardScale(float amount,float range,boolean fromClick){  if (Math.abs(amount) < 1.0f)   return 1.0f;  float t=amount / range;  float endScale=fromClick ? DISCARD_END_SCALE_CLICK : DISCARD_END_SCALE_SWIPE;  return MathUtils.interpolate(1.0f,endScale,Math.abs(t));}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public static void dataChanged(Context context,long throttleMs){  SharedPreferences prefs=Utilities.getPrefs(context);  long now=System.currentTimeMillis();  long lastTime=prefs.getLong(KEY_LAST_NOTIFIED_TIME,0);  if (now < lastTime || now >= (lastTime + throttleMs)) {    BackupManager.dataChanged(context.getPackageName());    prefs.edit().putLong(KEY_LAST_NOTIFIED_TIME,now).apply();  }}  }
class C{  public static int charAt(String source,int offset16){  char single=source.charAt(offset16);  if (single < LEAD_SURROGATE_MIN_VALUE) {    return single;  }  return _charAt(source,offset16,single);}  }
class C{  private void processOnline(){  log.config("");  if (!checkMandatory())   return;  boolean approved=false;  String info="";  ValueNamePair vp=(ValueNamePair)paymentCombo.getSelectedItem();  String PaymentRule=vp.getValue();  if (PaymentRule.equals(X_C_Order.PAYMENTRULE_CreditCard)) {    vp=(ValueNamePair)kTypeCombo.getSelectedItem();    String CCType=vp.getValue();    m_mPayment.setCreditCard(MPayment.TRXTYPE_Sales,CCType,kNumberField.getText(),"",kExpField.getText());    m_mPayment.setA_Name(kNameField.getText());    m_mPayment.setAmount(m_C_Currency_ID,m_Amount);    m_mPayment.setPaymentProcessor();    m_mPayment.setC_BPartner_ID(m_C_BPartner_ID);    int C_Invoice_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNo,"C_Invoice_ID");    int C_Order_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNo,"C_Order_ID");    if (C_Invoice_ID == 0 && m_DocStatus.equals("CO"))     C_Invoice_ID=getInvoiceID(C_Order_ID,null);    if (C_Invoice_ID != 0)     m_mPayment.setC_Invoice_ID(C_Invoice_ID); else     if (C_Order_ID != 0)     m_mPayment.setC_Order_ID(C_Order_ID);    m_mPayment.setDateTrx(m_DateAcct);    m_mPayment.setAmount(m_C_Currency_ID,m_Amount);    if (!m_mPayment.save()) {      ADialog.error(m_WindowNo,this,"PaymentError","PaymentNotCreated");    } else {      approved=m_mPayment.processOnline();      info=m_mPayment.getR_RespMsg() + " (" + m_mPayment.getR_AuthCode()+ ") ID="+ m_mPayment.getR_PnRef();      m_mPayment.saveEx();      if (approved) {        boolean ok=m_mPayment.processIt(DocAction.ACTION_Complete);        m_mPayment.saveEx();        if (ok)         ADialog.info(m_WindowNo,this,"PaymentProcessed",info + "\n" + m_mPayment.getDocumentNo()); else         ADialog.error(m_WindowNo,this,"PaymentError","PaymentNotCreated");        saveChanges();        dispose();      } else {        ADialog.error(m_WindowNo,this,"PaymentNotProcessed",info);      }    }  } else   ADialog.error(m_WindowNo,this,"PaymentNoProcessor");}  }
class C{  private BigInteger oddModPow(BigInteger y,BigInteger z){  if (y.equals(ONE))   return this;  if (signum == 0)   return ZERO;  int[] base=mag.clone();  int[] exp=y.mag;  int[] mod=z.mag;  int modLen=mod.length;  if ((modLen & 1) != 0) {    int[] x=new int[modLen + 1];    System.arraycopy(mod,0,x,1,modLen);    mod=x;    modLen++;  }  int wbits=0;  int ebits=bitLength(exp,exp.length);  if ((ebits != 17) || (exp[0] != 65537)) {    while (ebits > bnExpModThreshTable[wbits]) {      wbits++;    }  }  int tblmask=1 << wbits;  int[][] table=new int[tblmask][];  for (int i=0; i < tblmask; i++)   table[i]=new int[modLen];  long n0=(mod[modLen - 1] & LONG_MASK) + ((mod[modLen - 2] & LONG_MASK) << 32);  long inv=-MutableBigInteger.inverseMod64(n0);  int[] a=leftShift(base,base.length,modLen << 5);  MutableBigInteger q=new MutableBigInteger(), a2=new MutableBigInteger(a), b2=new MutableBigInteger(mod);  b2.normalize();  MutableBigInteger r=a2.divide(b2,q);  table[0]=r.toIntArray();  if (table[0].length < modLen) {    int offset=modLen - table[0].length;    int[] t2=new int[modLen];    System.arraycopy(table[0],0,t2,offset,table[0].length);    table[0]=t2;  }  int[] b=montgomerySquare(table[0],mod,modLen,inv,null);  int[] t=Arrays.copyOf(b,modLen);  for (int i=1; i < tblmask; i++) {    table[i]=montgomeryMultiply(t,table[i - 1],mod,modLen,inv,null);  }  int bitpos=1 << ((ebits - 1) & (32 - 1));  int buf=0;  int elen=exp.length;  int eIndex=0;  for (int i=0; i <= wbits; i++) {    buf=(buf << 1) | (((exp[eIndex] & bitpos) != 0) ? 1 : 0);    bitpos>>>=1;    if (bitpos == 0) {      eIndex++;      bitpos=1 << (32 - 1);      elen--;    }  }  int multpos=ebits;  ebits--;  boolean isone=true;  multpos=ebits - wbits;  while ((buf & 1) == 0) {    buf>>>=1;    multpos++;  }  int[] mult=table[buf >>> 1];  buf=0;  if (multpos == ebits)   isone=false;  while (true) {    ebits--;    buf<<=1;    if (elen != 0) {      buf|=((exp[eIndex] & bitpos) != 0) ? 1 : 0;      bitpos>>>=1;      if (bitpos == 0) {        eIndex++;        bitpos=1 << (32 - 1);        elen--;      }    }    if ((buf & tblmask) != 0) {      multpos=ebits - wbits;      while ((buf & 1) == 0) {        buf>>>=1;        multpos++;      }      mult=table[buf >>> 1];      buf=0;    }    if (ebits == multpos) {      if (isone) {        b=mult.clone();        isone=false;      } else {        t=b;        a=montgomeryMultiply(t,mult,mod,modLen,inv,a);        t=a;        a=b;        b=t;      }    }    if (ebits == 0)     break;    if (!isone) {      t=b;      a=montgomerySquare(t,mod,modLen,inv,a);      t=a;      a=b;      b=t;    }  }  int[] t2=new int[2 * modLen];  System.arraycopy(b,0,t2,modLen,modLen);  b=montReduce(t2,mod,modLen,(int)inv);  t2=Arrays.copyOf(b,modLen);  return new BigInteger(1,t2);}  }
class C{  public XRTreeFrag(int root,XPathContext xctxt,ExpressionNode parent){  super(null);  exprSetParent(parent);  initDTM(root,xctxt);}  }
class C{  BinarySearchTreeNode<E> remove(BinarySearchTreeNode<E> node,E comparable){  while (node != null) {    int diff=comparable.compareTo(node.comparable);    if (diff < 0) {      node=node.left;    } else     if (diff > 0) {      node=node.right;    } else {      if (node.comparable.equals(comparable)) {        this.removeNode(node);        return node;      } else {        return null;      }    }  }  return null;}  }
class C{  public CommunicationException(){  super();}  }
class C{  public static double scalb(final double d,final int n){  if ((n > -1023) && (n < 1024)) {    return d * Double.longBitsToDouble(((long)(n + 1023)) << 52);  }  if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {    return d;  }  if (n < -2098) {    return (d > 0) ? 0.0 : -0.0;  }  if (n > 2097) {    return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;  }  final long bits=Double.doubleToRawLongBits(d);  final long sign=bits & 0x8000000000000000L;  int exponent=((int)(bits >>> 52)) & 0x7ff;  long mantissa=bits & 0x000fffffffffffffL;  int scaledExponent=exponent + n;  if (n < 0) {    if (scaledExponent > 0) {      return Double.longBitsToDouble(sign | (((long)scaledExponent) << 52) | mantissa);    } else     if (scaledExponent > -53) {      mantissa|=1L << 52;      final long mostSignificantLostBit=mantissa & (1L << (-scaledExponent));      mantissa>>>=1 - scaledExponent;      if (mostSignificantLostBit != 0) {        mantissa++;      }      return Double.longBitsToDouble(sign | mantissa);    } else {      return (sign == 0L) ? 0.0 : -0.0;    }  } else {    if (exponent == 0) {      while ((mantissa >>> 52) != 1) {        mantissa<<=1;        --scaledExponent;      }      ++scaledExponent;      mantissa&=0x000fffffffffffffL;      if (scaledExponent < 2047) {        return Double.longBitsToDouble(sign | (((long)scaledExponent) << 52) | mantissa);      } else {        return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;      }    } else     if (scaledExponent < 2047) {      return Double.longBitsToDouble(sign | (((long)scaledExponent) << 52) | mantissa);    } else {      return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;    }  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(8);  newVector.addElement(new Option("\tSet confidence threshold for pruning.\n" + "\t(default 0.25)","C",1,"-C <pruning confidence>"));  newVector.addElement(new Option("\tSet minimum number of objects per leaf.\n" + "\t(default 2)","M",1,"-M <minimum number of objects>"));  newVector.addElement(new Option("\tUse reduced error pruning.","R",0,"-R"));  newVector.addElement(new Option("\tSet number of folds for reduced error\n" + "\tpruning. One fold is used as pruning set.\n" + "\t(default 3)","N",1,"-N <number of folds>"));  newVector.addElement(new Option("\tUse binary splits only.","B",0,"-B"));  newVector.addElement(new Option("\tGenerate unpruned decision list.","U",0,"-U"));  newVector.addElement(new Option("\tDo not use MDL correction for info gain on numeric attributes.","J",0,"-J"));  newVector.addElement(new Option("\tSeed for random data shuffling (default 1).","Q",1,"-Q <seed>"));  newVector.addElement(new Option("\tDo not make split point actual value.","-doNotMakeSplitPointActualValue",0,"-doNotMakeSplitPointActualValue"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public void testFilterSubscriber_passesPatientsToActivity(){  mController.loadSearchResults();  TypedCursorFetchedEvent event=TypedCursorFetchedEventFactory.createEvent(Patient.class,getFakeAppPatientCursor());  mFakeCrudEventBus.post(event);  verify(mMockUi).setPatients(any(TypedCursor.class));}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (newRecord || is_ValueChanged("Keyword"))   setKeyword(getKeyword());  if (getKeyword().equals("?")) {    log.saveError("FillMandatory",Msg.getElement(getCtx(),"Keyword"));    return false;  }  return true;}  }
class C{  @Override public void addKarma(final double karmaToAdd){  this.karma+=karmaToAdd;  put("karma",this.karma);  new GameEvent(this.getName(),"added karma",Integer.toString((int)karmaToAdd),Integer.toString((int)karma)).raise();}  }
class C{  @Override public void configure(final HttpSecurity http) throws Exception {  http.sessionManagement().sessionCreationPolicy(NEVER).and().formLogin().disable().logout().disable().authorizeRequests().antMatchers(HttpMethod.OPTIONS).permitAll().antMatchers("/").access("#oauth2.hasUidScopeAndAnyRealm('/employees', '/services')").antMatchers("/api/**").access("#oauth2.hasUidScopeAndAnyRealm('/employees', '/services')").antMatchers("/s3/**").access("#oauth2.hasUidScopeAndAnyRealm('/employees', '/services')").antMatchers("/webjars/**").permitAll().antMatchers("/swagger-resources").permitAll().antMatchers("/api-docs").permitAll();}  }
class C{  ContractChecker(ExecutableSequence s,List<ObjectContract> contracts){  this.s=s;  this.contracts=contracts;}  }
class C{  public CEdgeLabelEnterState(final CStateFactory<NodeType,EdgeType> factory,final AbstractZyGraph<NodeType,EdgeType> graph,final EdgeLabel label){  m_factory=Preconditions.checkNotNull(factory,"Error: factory argument can not be null");  m_graph=Preconditions.checkNotNull(graph,"Error: graph argument can not be null");  m_label=Preconditions.checkNotNull(label,"Error: label argument can not be null");}  }
class C{  synchronized public static JMenu makeWarrantMenu(boolean edit){  if (jmri.InstanceManager.getDefault(OBlockManager.class).getSystemNameList().size() > 1) {    _edit=edit;    _warrantMenu=new JMenu(Bundle.getMessage("MenuWarrant"));    updateWarrantMenu();    return _warrantMenu;  }  return null;}  }
class C{  private void saveDescendantState(){  FacesContext context=getFacesContext();  if (getChildCount() > 0) {    for (    UIComponent kid : getChildren()) {      if (kid instanceof UIColumn) {        saveDescendantState(kid,context);      }    }  }}  }
class C{  protected void paintBackground(Graphics g){  super.paintBackground(g);  if (!isUseParentPaint()) {    JTextComponent editor=this.getComponent();    BETextFieldUI.paintBg(g,0,0,editor.getWidth(),editor.getHeight(),editor.isEnabled(),bg);  }}  }
class C{  public int idHighCodeAsValueFromSystemName(String systemName){  int dCode=-1;  if (!iCodes.reset(systemName).matches() || !validSystemNameFormat(systemName,iCodes.group(2).charAt(0))) {  } else {    if (iCodes.groupCount() == 5) {      try {        dCode=Integer.parseInt(iCodes.group(3),16);      } catch (      Exception e) {        log.error("illegal character in high id system name: " + systemName);        return -1;      }    }  }  return dCode;}  }
class C{  public byte[] generatePrivateKeyPairBytes(KeyPair keyPair){  byte[] privateKeyBytes=null;  try {    privateKeyBytes=privateKey.getEncoded();  } catch (  Exception e) {    LOG.error("Error converting private Key to bytes",e);  }  return privateKeyBytes;}  }
class C{  static PageFreeList create(PageStore store,int pageId){  return new PageFreeList(store,pageId);}  }
class C{  public EventSecurityExpressionRoot(Authentication authentication,Message<?> message){  super(authentication);  this.message=message;}  }
class C{  public static <T>T splitEachLine(URL self,String regex,@ClosureParams(value=FromString.class,options={"List<String>","String[]"},conflictResolutionStrategy=PickFirstResolver.class) Closure<T> closure) throws IOException {  return IOGroovyMethods.splitEachLine(newReader(self),regex,closure);}  }
class C{  public void accept(AmqpSession txnSession,boolean settle) throws Exception {  if (receiver == null) {    throw new IllegalStateException("Can't accept non-received message.");  }  receiver.accept(delivery,txnSession,settle);}  }
class C{  private synchronized long commitAndSave(){  if (closed) {    return currentVersion;  }  if (fileStore == null) {    throw DataUtils.newIllegalStateException(DataUtils.ERROR_WRITING_FAILED,"This is an in-memory store");  }  if (currentStoreVersion >= 0) {    return currentVersion;  }  if (!hasUnsavedChanges()) {    return currentVersion;  }  if (fileStore.isReadOnly()) {    throw DataUtils.newIllegalStateException(DataUtils.ERROR_WRITING_FAILED,"This store is read-only");  }  try {    currentStoreVersion=currentVersion;    currentStoreThread=Thread.currentThread();    return storeNow();  }  finally {    currentStoreVersion=-1;    currentStoreThread=null;  }}  }
class C{  public void chainFlap(MowzieModelRenderer[] boxes,float speed,float degree,double rootOffset,float f,float f1){  int numberOfSegments=boxes.length;  float offset=(float)((rootOffset * Math.PI) / (2 * numberOfSegments));  for (int i=0; i < numberOfSegments; i++)   boxes[i].rotateAngleZ+=MathHelper.cos(f * speed + offset * i) * f1 * degree;}  }
class C{  public int discardBodyData(){  return readBodyData(null);}  }
class C{  @Override public Request<Workspace> withName(String name){  for (  Map.Entry<String,Workspace> entry : workspaces.entrySet()) {    if (name.equals(entry.getKey())) {      return new DummyRequest<Workspace>(entry.getValue());    }  }  return new DummyRequest<>(null);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void moveFile(File srcFile,File destFile) throws IOException {  if (srcFile == null) {    throw new NullPointerException("Source must not be null");  }  if (destFile == null) {    throw new NullPointerException("Destination must not be null");  }  if (!srcFile.exists()) {    throw new FileNotFoundException("Source '" + srcFile + "' does not exist");  }  if (srcFile.isDirectory()) {    throw new IOException("Source '" + srcFile + "' is a directory");  }  if (destFile.exists()) {    throw new FileExistsException("Destination '" + destFile + "' already exists");  }  if (destFile.isDirectory()) {    throw new IOException("Destination '" + destFile + "' is a directory");  }  boolean rename=srcFile.renameTo(destFile);  if (!rename) {    copyFile(srcFile,destFile);    if (!srcFile.delete()) {      FileUtils.deleteQuietly(destFile);      throw new IOException("Failed to delete original file '" + srcFile + "' after copy to '"+ destFile+ "'");    }  }}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMAnimateColorElement(prefix,(AbstractDocument)doc);}  }
class C{  public static GeometryFactory extractFactory(Collection geoms){  if (geoms.isEmpty())   return null;  return ((Geometry)geoms.iterator().next()).getFactory();}  }
class C{  public boolean isShiftPressed(){  return shiftPressed;}  }
class C{  public void removeHost(String hostPortPair) throws SQLException {  removeHost(hostPortPair,false);}  }
class C{  public Node(final CharSequence s,final int offset,final int length,final boolean isWord,final int numNodes){  path=new char[length];  MutableString.getChars(s,offset,offset + length,path,0);  this.isWord=isWord;  this.numNodes=numNodes;}  }
class C{  protected void intrinsifyAbortIntrinsics(){  intrinsics.put("@_gfortran_abort",LLVMAbortFactory.getInstance());  intrinsics.put("@abort",LLVMAbortFactory.getInstance());  intrinsics.put("@exit",LLVMExitFactory.getInstance());  intrinsics.put("@signal",LLVMSignalFactory.getInstance());}  }
class C{  protected void connectionFailed(Channel failedChannel,IOException cause){  failureCause=IOExceptionSupport.create(cause);  channel=failedChannel;  connected.set(false);  handshakeFuture.setFailure(cause);}  }
class C{  public Scroll(TimeValue keepAlive){  this.keepAlive=keepAlive;}  }
class C{  public VNXeCommandJob deleteShareForSnapshot(String shareId){  _url=URL_SHARE + shareId;  if (getShare(shareId) != null) {    unsetQueryParameters();    return deleteRequestAsync(null);  } else {    throw VNXeException.exceptions.vnxeCommandFailed("The shareId is not found: " + shareId);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_commentgetcomment.class,args);}  }
class C{  public SearchObject(String imageUrl,String keyword,String link){  this.imageUrl=imageUrl;  this.keyword=keyword;  this.link=link;}  }
class C{  public RepairContext(final List<String> nodes,final List<String> keySpaces,final List<String> columnFamilies){  this.nodes=(nodes == null) ? Collections.emptyList() : nodes;  this.keySpaces=(keySpaces == null) ? Collections.emptyList() : keySpaces;  this.columnFamilies=(columnFamilies == null) ? Collections.emptyList() : columnFamilies;}  }
class C{  public FileTimeDisplay(boolean showTimeForOldDaysThisYear,boolean showTimeForOldDays){  mShowTimeForOldDaysThisYear=showTimeForOldDaysThisYear;  mShowTimeForOldDays=showTimeForOldDays;}  }
class C{  public static void save(String filename){  File file=new File(filename);  String suffix=filename.substring(filename.lastIndexOf('.') + 1);  if (suffix.toLowerCase().equals("png")) {    try {      ImageIO.write(onscreenImage,suffix,file);    } catch (    IOException e) {      e.printStackTrace();    }  } else   if (suffix.toLowerCase().equals("jpg")) {    WritableRaster raster=onscreenImage.getRaster();    WritableRaster newRaster;    newRaster=raster.createWritableChild(0,0,width,height,0,0,new int[]{0,1,2});    DirectColorModel cm=(DirectColorModel)onscreenImage.getColorModel();    DirectColorModel newCM=new DirectColorModel(cm.getPixelSize(),cm.getRedMask(),cm.getGreenMask(),cm.getBlueMask());    BufferedImage rgbBuffer=new BufferedImage(newCM,newRaster,false,null);    try {      ImageIO.write(rgbBuffer,suffix,file);    } catch (    IOException e) {      e.printStackTrace();    }  } else {    System.out.println("Invalid image file type: " + suffix);  }}  }
class C{  private void unionTermGroups(ArrayList<FixedBitSet> bb){  int incr;  for (int i=0; i < bb.size() - 1; i+=incr) {    incr=1;    int j=i + 1;    while (j < bb.size()) {      if (bb.get(i).intersects(bb.get(j))) {        bb.get(i).or(bb.get(j));        bb.remove(j);        incr=0;      } else {        ++j;      }    }  }}  }
class C{  public Object convert(final Object value,final Class<?> targetType){  Class<?> sourceType=value == null ? null : value.getClass();  Object converted=value;  Converter converter=this.lookup(sourceType,targetType);  if (converter != null) {    converted=converter.convert(targetType,value);  }  if (targetType == String.class && converted != null && !(converted instanceof String)) {    converter=this.lookup(String.class);    if (converter != null) {      converted=converter.convert(String.class,converted);    }    if (converted != null && !(converted instanceof String)) {      converted=converted.toString();    }  }  return converted;}  }
class C{  public void vspan(long start,long end,Paint color){  vspan(start,end,color,null);}  }
class C{  public void append(int key,boolean value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=ArrayUtils.idealIntArraySize(pos + 1);    int[] nkeys=new int[n];    boolean[] nvalues=new boolean[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  public void visitLocalVariable(String name,String desc,String signature,Label start,Label end,int index){  if (mv != null) {    mv.visitLocalVariable(name,desc,signature,start,end,index);  }}  }
class C{  public void turnQuotaOn(String volume){  QuotaCommands commands=new QuotaCommands(server.getNaServer());  commands.turnQuotaOn(volume);}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public JSONArray(){  this.myArrayList=new ArrayList<Object>();}  }
class C{  public Workflow.Method zoneExportRemoveInitiatorsMethod(List<NetworkZoningParam> zoningParam){  return new Workflow.Method("zoneExportRemoveInitiators",zoningParam);}  }
class C{  @Override public void add(final URL input,final String baseURI,final RDFFormat format,final Resource... c) throws IOException, RDFParseException, RepositoryException {  final AddOp op=new AddOp(input.toString());  add(op,c);}  }
class C{  public SearchSourceBuilder fields(List<String> fields){  this.fieldNames=fields;  return this;}  }
class C{  public boolean removeParameter(String name){  throw new UnsupportedOperationException("Removing parameters in a stack is not supported.");}  }
class C{  public GetTVShowDetails(int tvshowId,String... properties){  super();  addParameterToRequest("tvshowid",tvshowId);  addParameterToRequest("properties",properties);}  }
class C{  private void closeOrder() throws Exception {  if (m_orderLine != null) {    m_orderLine.saveEx();  }  if (m_order != null) {    m_order.load(get_TrxName());    addLog(0,null,m_order.getGrandTotal(),m_order.getDocumentNo());  }  m_order=null;  m_orderLine=null;}  }
class C{  public Type4(Type2 model1,Type3 model2){}  }
class C{  public CompilationUnitChange(String name,Document document){  super(name,document);  setTextType("java");}  }
class C{  public String useBetterEncodingTipText(){  return "Uses a more efficient split point encoding.";}  }
class C{  static void verifyRegistryStateAllowsLaunchFlows(Registry registry,DateTime now) throws BadCommandForRegistryPhaseException {  if (DISALLOWED_TLD_STATES_FOR_LAUNCH_FLOWS.contains(registry.getTldState(now))) {    throw new BadCommandForRegistryPhaseException();  }}  }
class C{  public int[] variables(){  IntArrayList variables=new IntArrayList();  for (int i=0; i < list.size(); i++)   if (list.getLong(i) != 0)   variables.add(i);  return variables.toIntArray();}  }
class C{  public NULLRecord(Name name,int dclass,long ttl,byte[] data){  super(name,Type.NULL,dclass,ttl);  if (data.length > 0xFFFF) {    throw new IllegalArgumentException("data must be <65536 bytes");  }  this.data=data;}  }
class C{  protected final SpecObj processSpec(SpecObj spec){  if (spec == null) {    spec=new SpecObj(this.rootFile,resolver);    if (TLCGlobals.tool) {      MP.printMessage(EC.TLC_SANY_START);    }    try {      SANY.frontEndMain(spec,this.rootFile,ToolIO.out);    } catch (    FrontEndException e) {      Assert.fail(EC.TLC_PARSING_FAILED2,e);    }    if (TLCGlobals.tool) {      MP.printMessage(EC.TLC_SANY_END);    }    MP.printMessage(EC.TLC_STARTING);  }  if (!spec.initErrors.isSuccess() || !spec.parseErrors.isSuccess() || !spec.semanticErrors.isSuccess()) {    Assert.fail(EC.TLC_PARSING_FAILED);  }  this.moduleTbl=spec.getExternalModuleTable();  UniqueString rootName=UniqueString.uniqueStringOf(this.rootFile);  this.rootModule=this.moduleTbl.getModuleNode(rootName);  OpDeclNode[] varDecls=this.rootModule.getVariableDecls();  this.variablesNodes=new OpDeclNode[varDecls.length];  UniqueString[] varNames=new UniqueString[varDecls.length];  for (int i=0; i < varDecls.length; i++) {    this.variablesNodes[i]=varDecls[i];    varNames[i]=varDecls[i].getName();    varNames[i].setLoc(i);  }  TLCState.setVariables(this.variablesNodes);  UniqueString.setVariableCount(varDecls.length);  this.defns.setDefnCount(varDecls.length);  this.defns.put("TRUE",ValTrue);  this.defns.put("FALSE",ValFalse);  Value[] elems=new Value[2];  elems[0]=ValFalse;  elems[1]=ValTrue;  this.defns.put("BOOLEAN",new SetEnumValue(elems,true));  Class stringModule=this.tlaClass.loadClass("Strings");  if (stringModule == null) {    Assert.fail(EC.TLC_STRING_MODULE_NOT_FOUND);  }  Method[] ms=stringModule.getDeclaredMethods();  for (int i=0; i < ms.length; i++) {    int mod=ms[i].getModifiers();    if (Modifier.isStatic(mod)) {      String name=TLARegistry.mapName(ms[i].getName());      int acnt=ms[i].getParameterTypes().length;      if (!ms[i].isSynthetic()) {        MethodValue mv=new MethodValue(ms[i]);        Value val=(acnt == 0) ? mv.apply(EmptyArgs,EvalControl.Clear) : mv;        this.defns.put(name,val);      }    }  }  ModuleNode[] mods=this.moduleTbl.getModuleNodes();  Set<String> modSet=new HashSet<String>();  for (int i=0; i < mods.length; i++) {    this.processConstants(mods[i]);    modSet.add(mods[i].getName().toString());  }  AssumeNode[] assumes=this.rootModule.getAssumptions();  this.assumptions=new ExprNode[assumes.length];  this.assumptionIsAxiom=new boolean[assumes.length];  for (int i=0; i < assumes.length; i++) {    this.assumptions[i]=assumes[i].getAssume();    this.assumptionIsAxiom[i]=assumes[i].getIsAxiom();  }  Hashtable constants=this.initializeConstants();  Hashtable overrides=this.config.getOverrides();  OpDeclNode[] rootConsts=this.rootModule.getConstantDecls();  for (int i=0; i < rootConsts.length; i++) {    UniqueString name=rootConsts[i].getName();    Object val=constants.get(name.toString());    if (val == null && !overrides.containsKey(name.toString())) {      Assert.fail(EC.TLC_CONFIG_VALUE_NOT_ASSIGNED_TO_CONSTANT_PARAM,name.toString());    }    rootConsts[i].setToolObject(TLCGlobals.ToolId,val);    this.defns.put(name,val);  }  OpDefNode[] rootOpDefs=this.rootModule.getOpDefs();  for (int i=0; i < rootOpDefs.length; i++) {    UniqueString name=rootOpDefs[i].getName();    Object val=constants.get(name.toString());    if (val == null) {      this.defns.put(name,rootOpDefs[i]);    } else {      rootOpDefs[i].setToolObject(TLCGlobals.ToolId,val);      this.defns.put(name,val);    }  }  Hashtable modConstants=this.initializeModConstants();  for (int i=0; i < mods.length; i++) {    UniqueString modName=mods[i].getName();    Hashtable mConsts=(Hashtable)modConstants.get(modName.toString());    if (mConsts != null) {      OpDefNode[] opDefs=mods[i].getOpDefs();      for (int j=0; j < opDefs.length; j++) {        UniqueString name=opDefs[j].getName();        Object val=mConsts.get(name.toString());        if (val != null) {          opDefs[j].getBody().setToolObject(TLCGlobals.ToolId,val);        }      }    }  }  for (int i=0; i < mods.length; i++) {    UniqueString modName=mods[i].getName();    Class userModule=this.tlaClass.loadClass(modName.toString());    if (userModule != null) {      Hashtable<UniqueString,Value> javaDefs=new Hashtable<UniqueString,Value>();      Method[] mds=userModule.getDeclaredMethods();      for (int j=0; j < mds.length; j++) {        int mdf=mds[j].getModifiers();        if (Modifier.isPublic(mdf) && Modifier.isStatic(mdf)) {          String name=TLARegistry.mapName(mds[j].getName());          UniqueString uname=UniqueString.uniqueStringOf(name);          int acnt=mds[j].getParameterTypes().length;          MethodValue mv=new MethodValue(mds[j]);          boolean isConstant=(acnt == 0) && Modifier.isFinal(mdf);          Value val=isConstant ? mv.apply(EmptyArgs,EvalControl.Clear) : mv;          javaDefs.put(uname,val);          if (!BuiltInModuleHelper.isBuiltInModule(userModule)) {            final URL resource=userModule.getResource(userModule.getSimpleName() + ".class");            MP.printMessage(EC.TLC_MODULE_VALUE_JAVA_METHOD_OVERRIDE_LOADED,new String[]{uname.toString(),resource.toExternalForm(),mv.toString()});          }        }      }      OpDefNode[] opDefs=mods[i].getOpDefs();      for (int j=0; j < opDefs.length; j++) {        UniqueString uname=opDefs[j].getName();        Object val=javaDefs.get(uname);        if (val != null) {          opDefs[j].getBody().setToolObject(TLCGlobals.ToolId,val);          this.defns.put(uname,val);        }      }    }  }  Set<String> overriden=new HashSet<String>();  for (int i=0; i < rootConsts.length; i++) {    UniqueString lhs=rootConsts[i].getName();    String rhs=(String)overrides.get(lhs.toString());    if (rhs != null) {      if (overrides.containsKey(rhs)) {        Assert.fail(EC.TLC_CONFIG_RHS_ID_APPEARED_AFTER_LHS_ID,rhs);      }      Object myVal=this.defns.get(rhs);      if (myVal == null) {        Assert.fail(EC.TLC_CONFIG_WRONG_SUBSTITUTION,new String[]{lhs.toString(),rhs});      }      rootConsts[i].setToolObject(TLCGlobals.ToolId,myVal);      this.defns.put(lhs,myVal);      overriden.add(lhs.toString());    }  }  for (int i=0; i < rootOpDefs.length; i++) {    UniqueString lhs=rootOpDefs[i].getName();    String rhs=(String)overrides.get(lhs.toString());    if (rhs != null) {      if (overrides.containsKey(rhs)) {        Assert.fail(EC.TLC_CONFIG_RHS_ID_APPEARED_AFTER_LHS_ID,rhs);      }      Object myVal=this.defns.get(rhs);      if (myVal == null) {        Assert.fail(EC.TLC_CONFIG_WRONG_SUBSTITUTION,new String[]{lhs.toString(),rhs});      }      if ((myVal instanceof OpDefNode) && rootOpDefs[i].getNumberOfArgs() != ((OpDefNode)myVal).getNumberOfArgs()) {        Assert.fail(EC.TLC_CONFIG_WRONG_SUBSTITUTION_NUMBER_OF_ARGS,new String[]{lhs.toString(),rhs});      }      rootOpDefs[i].setToolObject(TLCGlobals.ToolId,myVal);      this.defns.put(lhs,myVal);      overriden.add(lhs.toString());    }  }  Enumeration keys=overrides.keys();  while (keys.hasMoreElements()) {    Object key=keys.nextElement();    if (!overriden.contains(key)) {      Assert.fail(EC.TLC_CONFIG_ID_DOES_NOT_APPEAR_IN_SPEC,key.toString());    }  }  Hashtable modOverrides=this.config.getModOverrides();  for (int i=0; i < mods.length; i++) {    UniqueString modName=mods[i].getName();    Hashtable mDefs=(Hashtable)modOverrides.get(modName.toString());    HashSet modOverriden=new HashSet();    if (mDefs != null) {      OpDefNode[] opDefs=mods[i].getOpDefs();      for (int j=0; j < opDefs.length; j++) {        UniqueString lhs=opDefs[j].getName();        String rhs=(String)mDefs.get(lhs.toString());        if (rhs != null) {          if (mDefs.containsKey(rhs)) {            Assert.fail(EC.TLC_CONFIG_RHS_ID_APPEARED_AFTER_LHS_ID,rhs);          }          Object myVal=this.defns.get(rhs);          if (myVal == null) {            Assert.fail(EC.TLC_CONFIG_WRONG_SUBSTITUTION,new String[]{lhs.toString(),rhs});          }          if ((myVal instanceof OpDefNode) && opDefs[j].getNumberOfArgs() != ((OpDefNode)myVal).getNumberOfArgs()) {            Assert.fail(EC.TLC_CONFIG_WRONG_SUBSTITUTION_NUMBER_OF_ARGS,new String[]{lhs.toString(),rhs});          }          opDefs[j].getBody().setToolObject(TLCGlobals.ToolId,myVal);          modOverriden.add(lhs.toString());        }      }      Enumeration mkeys=mDefs.keys();      while (mkeys.hasMoreElements()) {        Object mkey=mkeys.nextElement();        if (!modOverriden.contains(mkey)) {          Assert.fail(EC.TLC_CONFIG_ID_DOES_NOT_APPEAR_IN_SPEC,mkey.toString());        }      }    }  }  Enumeration modKeys=modOverrides.keys();  while (modKeys.hasMoreElements()) {    Object modName=modKeys.nextElement();    if (!modSet.contains(modName)) {      Assert.fail(EC.TLC_NO_MODULES,modName.toString());    }  }  return spec;}  }
class C{  public double negativeLogLikelihood(Matrix logtheta,Matrix x,Matrix y,Matrix df0){  int n=x.getRowDimension();  Matrix K=covFunction.compute(logtheta,x);  CholeskyDecomposition cd=K.chol();  if (!cd.isSPD()) {    throw new RuntimeException("The covariance Matrix is not SDP, check your covariance function (maybe you mess the noise term..)");  } else {    L=cd.getL();    alpha=bSubstitutionWithTranspose(L,fSubstitution(L,y));    double lml=(y.transpose().times(alpha).times(0.5)).get(0,0);    for (int i=0; i < L.getRowDimension(); i++)     lml+=Math.log(L.get(i,i));    lml+=0.5 * n * Math.log(2 * Math.PI);    Matrix W=bSubstitutionWithTranspose(L,(fSubstitution(L,Matrix.identity(n,n)))).minus(alpha.times(alpha.transpose()));    for (int i=0; i < df0.getRowDimension(); i++) {      df0.set(i,0,sum(W.arrayTimes(covFunction.computeDerivatives(logtheta,x,i))) / 2);    }    return lml;  }}  }
class C{  public void selectByCriteria(){  GuiHelper.centerChildToParent(m_model.getParent(),m_criteriaDlg,true);  m_criteriaDlg.setVisible(true);  m_criteriaDlg.setVisible(false);  if (m_criteriaDlg.isClosedOk()) {    final CCriteriumTree tree=m_criteriaDlg.getCriteriumTree();    m_menuBar.getCriteriumCache().add(tree.createCachedTree());    CCriteriumExecuter.execute(tree,m_model.getGraph());  }}  }
class C{  public static void skipFields(@Nonnull DexReader reader,int count){  for (int i=0; i < count; i++) {    reader.skipUleb128();    reader.skipUleb128();  }}  }
class C{  public ToolEvent(Tool src,DrawingView view,Rectangle invalidatedArea){  super(src);  this.view=view;  this.invalidatedArea=invalidatedArea;}  }
class C{  public PutRepositoryRequest source(Map repositoryDefinition){  Map<String,Object> source=repositoryDefinition;  for (  Map.Entry<String,Object> entry : source.entrySet()) {    String name=entry.getKey();    if (name.equals("type")) {      type(entry.getValue().toString());    } else     if (name.equals("settings")) {      if (!(entry.getValue() instanceof Map)) {        throw new IllegalArgumentException("Malformed settings section, should include an inner object");      }      settings((Map<String,Object>)entry.getValue());    }  }  return this;}  }
class C{  public Implementation(){  super();  plugin=this;}  }
class C{  protected void paintTitlePaneImpl(Insets frameInsets,Graphics g,int width,int height,boolean isSelected){  BETitlePane.paintTitlePane(g,frameInsets.left,frameInsets.top,width - frameInsets.left - frameInsets.right,height,isSelected);}  }
class C{  @Override protected boolean isExpirationAllowed(ExpiryTask expiry){  if (this.requiresReliabilityCheck && this.isMissingRequiredRoles) {    if (getMembershipAttributes().getLossAction().isNoAccess()) {      return false;    }    if (getMembershipAttributes().getLossAction().isLimitedAccess() && expiry.isDistributedAction()) {      return false;    }  }  return true;}  }
class C{  @DSComment("Package priviledge") @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:52.968 -0500",hash_original_method="94A8BA1BB14E20FE8AAE958A036048A6",hash_generated_method="03DE6BA56337AAD75057F043E8AE104E") static byte[] discardNonBase64(byte[] data){  byte groomedData[]=new byte[data.length];  int bytesCopied=0;  for (int i=0; i < data.length; i++) {    if (isBase64(data[i])) {      groomedData[bytesCopied++]=data[i];    }  }  byte packedData[]=new byte[bytesCopied];  System.arraycopy(groomedData,0,packedData,0,bytesCopied);  return packedData;}  }
class C{  public RangeQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  CaptureDevice[] capdevs=Scheduler.getInstance().getMyEncoders();  if (capdevs.length == 0)   return MMC.getInstance().getAllEncodingQualities(); else {    java.util.Set rv=new java.util.HashSet();    for (int i=0; i < capdevs.length; i++)     rv.addAll(java.util.Arrays.asList(capdevs[i].getEncodingQualities()));    String[] rvs=(String[])rv.toArray(Pooler.EMPTY_STRING_ARRAY);    java.util.Arrays.sort(rvs);    return rvs;  }}  }
class C{  public static String jdkString(){  return jdkStr;}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  void startAsyncThumbnailsLoading(ArrayList<POI> pois){  if (pois == null)   return;  mThreadPool.shutdownNow();  mThreadPool=Executors.newFixedThreadPool(3);  for (int i=0; i < pois.size(); i++) {    final POI poi=pois.get(i);    final Marker marker=mPoiMarkers.getItem(i);    mThreadPool.submit(new ThumbnailLoaderTask(poi,marker));  }}  }
class C{  public void test_CreateDestroy_ticket_948_02() throws Exception {  if (!BigdataStatics.runKnownBadTests) {    return;  }  final String namespace=getName();  final Properties properties1=new Properties(getProperties());  properties1.setProperty(AbstractTripleStore.Options.VOCABULARY_CLASS,BSBMVocabulary.class.getName());  final Properties properties2=new Properties(getProperties());  properties2.setProperty(AbstractTripleStore.Options.VOCABULARY_CLASS,RDFSVocabulary.class.getName());  Journal jnl=null;  try {    jnl=new Journal(getProperties());    assertKBNotFound(jnl,namespace);    AbstractApiTask.submitApiTask(jnl,new CreateKBTask(namespace,properties1)).get();    assertKBExists(jnl,namespace);    AbstractApiTask.submitApiTask(jnl,new DestroyKBTask(namespace)).get();    assertKBNotFound(jnl,namespace);    jnl.shutdown();    jnl=new Journal(getProperties());    AbstractApiTask.submitApiTask(jnl,new CreateKBTask(namespace,properties2)).get();    assertKBExists(jnl,namespace);  }  finally {    if (jnl != null)     jnl.destroy();  }}  }
class C{  public ItemLabelPosition(ItemLabelAnchor itemLabelAnchor,TextAnchor textAnchor,TextAnchor rotationAnchor,double angle){  ParamChecks.nullNotPermitted(itemLabelAnchor,"itemLabelAnchor");  ParamChecks.nullNotPermitted(textAnchor,"textAnchor");  ParamChecks.nullNotPermitted(rotationAnchor,"rotationAnchor");  this.itemLabelAnchor=itemLabelAnchor;  this.textAnchor=textAnchor;  this.rotationAnchor=rotationAnchor;  this.angle=angle;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case FunctionblockPackage.EVENT__NAME:    setName(NAME_EDEFAULT);  return;case FunctionblockPackage.EVENT__PROPERTIES:getProperties().clear();return;}super.eUnset(featureID);}  }
class C{  public void reconfigZKToWritable(List<String> observerNodes,List<String> readOnlyNodes){  log.info("Standby is running in read-only mode due to connection loss with active site. " + "Reconfig coordinatorsvc of all nodes to writable");  try {    boolean reconfigLocal=false;    for (    String node : observerNodes) {      if (node.equals(coordinatorExt.getMyNodeId())) {        reconfigLocal=true;        continue;      }      LocalRepository localRepository=LocalRepository.getInstance();      localRepository.remoteReconfigCoordinator(node,"participant");      localRepository.remoteRestartCoordinator(node,"participant");    }    for (    String node : readOnlyNodes) {      if (node.equals(coordinatorExt.getMyNodeId())) {        reconfigLocal=true;        continue;      }      LocalRepository localRepository=LocalRepository.getInstance();      localRepository.remoteReconfigCoordinator(node,"participant");      localRepository.remoteRestartCoordinator(node,"participant");    }    if (reconfigLocal) {      coordinatorExt.reconfigZKToWritable();    }  } catch (  Exception ex) {    log.warn("Unexpected errors during switching back to zk observer. Try again later. {}",ex.toString());  }}  }
class C{  public String remoteToString(){  return Util.getUnqualifiedName(getClass()) + " [liveRef: " + ref+ "]";}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  for (int k=0; k < segments.length; ++k)   ensureSegment(k);  s.defaultWriteObject();  final Segment<K,V>[] segments=this.segments;  for (int k=0; k < segments.length; ++k) {    Segment<K,V> seg=segmentAt(segments,k);    seg.lock();    try {      HashEntry<K,V>[] tab=seg.table;      for (int i=0; i < tab.length; ++i) {        HashEntry<K,V> e;        for (e=entryAt(tab,i); e != null; e=e.next) {          s.writeObject(e.key);          s.writeObject(e.value);        }      }    }  finally {      seg.unlock();    }  }  s.writeObject(null);  s.writeObject(null);}  }
class C{  public static Vector3 abs(Vector3 o){  return new Vector3(Math.abs(o.x),Math.abs(o.y),Math.abs(o.z));}  }
class C{  public String toString(){  return "Easting:" + easting + " Northing:"+ northing;}  }
class C{  public HashCodeBuilder append(Object[] array){  if (array == null) {    iTotal=iTotal * iConstant;  } else {    for (int i=0; i < array.length; i++) {      append(array[i]);    }  }  return this;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public int compareTo(UUID val){  return (this.mostSigBits < val.mostSigBits ? -1 : (this.mostSigBits > val.mostSigBits ? 1 : (this.leastSigBits < val.leastSigBits ? -1 : (this.leastSigBits > val.leastSigBits ? 1 : 0))));}  }
class C{  public void addSpokenLanguage(Language lang){  this.spokenLanguages.add(lang);}  }
class C{  public java.util.ArrayList<TreeNode<E>> path(E e){  java.util.ArrayList<TreeNode<E>> list=new java.util.ArrayList<>();  TreeNode<E> current=root;  while (current != null) {    list.add(current);    if (e.compareTo(current.element) < 0) {      current=current.left;    } else     if (e.compareTo(current.element) > 0) {      current=current.right;    } else     break;  }  return list;}  }
class C{  public void zoomTo(Coord coord,int zoomLevel){  if (coord.isProjected()) {    throw new IllegalArgumentException("coord should be wg84 format");  }  _center=_map.projection().fromWGS84(coord);  _zoom=zoomLevel;  _needTiles=true;  super.repaint();}  }
class C{  public String replaceAll(String expr,String substitute){  return Pattern.compile(expr).matcher(this).replaceAll(substitute);}  }
class C{  public synchronized int totalSize(){  if (destroyed)   return 0;  return connections.size();}  }
class C{  private SimpleHashSetEntry<T>[] doubleCapacity(){  SimpleHashSetEntry<T>[] oldTable=mTable;  int oldCapacity=oldTable.length;  if (oldCapacity == MAXIMUM_CAPACITY) {    return oldTable;  }  int newCapacity=oldCapacity * 2;  SimpleHashSetEntry<T>[] newTable=makeTable(newCapacity);  if (mSize == 0) {    return newTable;  }  for (int j=0; j < oldCapacity; j++) {    SimpleHashSetEntry<T> e=oldTable[j];    if (e == null) {      continue;    }    int highBit=e.mHash & oldCapacity;    SimpleHashSetEntry<T> broken=null;    newTable[j | highBit]=e;    for (SimpleHashSetEntry<T> n=e.mNext; n != null; e=n, n=n.mNext) {      int nextHighBit=n.mHash & oldCapacity;      if (nextHighBit != highBit) {        if (broken == null) {          newTable[j | nextHighBit]=n;        } else {          broken.mNext=n;        }        broken=e;        highBit=nextHighBit;      }    }    if (broken != null)     broken.mNext=null;  }  return newTable;}  }
class C{  @Ignore("TODO") @Test public void testS2CDeltaPropagationFailedStats2() throws Exception {}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Attr newAttribute;  Node testAddress;  NamedNodeMap attributes;  Node newNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testAddress=elementList.item(2);  newAttribute=doc.createAttribute("district");  attributes=testAddress.getAttributes();  newNode=attributes.setNamedItem(newAttribute);  assertNull("returnedNodeNull",newNode);}  }
class C{  public void valueChange(ValueChangeEvent evt){  if (evt.getSource() instanceof WEditor) {    GridField changedField=((WEditor)evt.getSource()).getGridField();    if (changedField != null) {      processDependencies(changedField);    }  }  processNewValue(evt.getNewValue(),evt.getPropertyName());}  }
class C{  public static BigInteger toBigInteger(Number self){  if (self instanceof BigInteger) {    return (BigInteger)self;  } else   if (self instanceof BigDecimal) {    return ((BigDecimal)self).toBigInteger();  } else   if (self instanceof Double) {    return new BigDecimal((Double)self).toBigInteger();  } else   if (self instanceof Float) {    return new BigDecimal((Float)self).toBigInteger();  } else {    return new BigInteger(Long.toString(self.longValue()));  }}  }
class C{  public UnionType newUnionType(){  return new UnionType(this);}  }
class C{  public boolean isIncoming(){  return _incoming;}  }
class C{  private double angleTo(Point2D that){  double dx=that.x - this.x;  double dy=that.y - this.y;  return Math.atan2(dy,dx);}  }
class C{  public boolean isSelected(String optionId){  for (  String propertyTypeId : typedPropertyLists.keySet()) {    if (isSelected(propertyTypeId,optionId)) {      return true;    }  }  return false;}  }
class C{  public JavaDocContextType(){  addResolver(new GlobalTemplateVariables.Cursor());  addResolver(new SurroundWithLineSelection());  addResolver(new SurroundWithWordSelection());  addResolver(new GlobalTemplateVariables.Dollar());  addResolver(new GlobalTemplateVariables.Date());  addResolver(new GlobalTemplateVariables.Year());  addResolver(new GlobalTemplateVariables.Time());  addResolver(new GlobalTemplateVariables.User());  addResolver(new File());  addResolver(new PrimaryTypeName());  addResolver(new Method());  addResolver(new ReturnType());  addResolver(new Arguments());  addResolver(new Type());  addResolver(new Package());  addResolver(new Project());}  }
class C{  public void exit() throws RemoteException {  System.err.println("received call to exit");  System.exit(0);}  }
class C{  static boolean deleteApplicationIntent(){  final Uri packageURI=Uri.parse("package:" + Status.getAppContext().getPackageName());  if (Cfg.DEBUG) {    Check.log(TAG + " (deleteApplication): " + packageURI.toString());  }  final Intent uninstallIntent=new Intent(Intent.ACTION_DELETE,packageURI);  uninstallIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  Status.getAppContext().startActivity(uninstallIntent);  return true;}  }
class C{  public void sort(int columnIndex,boolean ascending){  int columnType;  int i;  ArrayList<SortContainer> sorted;  SortContainer cont;  Object value;  if ((!isInitialized()) || (getModel().getRowCount() != mIndices.length)) {    System.out.println(this.getClass().getName() + ": Table model not initialized!");    return;  }  mSortColumn=columnIndex;  mAscending=ascending;  initializeIndices();  if (ClassDiscovery.hasInterface(Comparable.class,getColumnClass(mSortColumn))) {    columnType=1;  } else {    columnType=0;  }  sorted=new ArrayList<SortContainer>();  for (i=0; i < getRowCount(); i++) {    value=mModel.getValueAt(mIndices[i],mSortColumn);    if (columnType == 0) {      cont=new SortContainer((value == null) ? null : value.toString(),mIndices[i]);    } else {      cont=new SortContainer((Comparable<?>)value,mIndices[i]);    }    sorted.add(cont);  }  Collections.sort(sorted);  for (i=0; i < sorted.size(); i++) {    if (mAscending) {      mIndices[i]=sorted.get(i).getIndex();    } else {      mIndices[i]=sorted.get(sorted.size() - 1 - i).getIndex();    }  }  sorted.clear();  sorted=null;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case OrientedPackage.PORT__ID:    setId(ID_EDEFAULT);  return;case OrientedPackage.PORT__TYPE:setType(TYPE_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  private String findCurrentUser(){  if (sessionCtx == null) {    return "";  }  if (sessionCtx.getCallerPrincipal() == null) {    return "";  }  return sessionCtx.getCallerPrincipal().getName();}  }
class C{  @Override public double confSmallM(double totalExampleWeight,double delta){  return 3.0d * Math.sqrt(Math.log(4.0d / delta) / (2.0d * totalExampleWeight));}  }
class C{  public boolean isRecording(){  return mIsRecording;}  }
class C{  public static boolean isKali(){  if (onKali == null) {    onKali=Boolean.FALSE;    File osReleaseFile=new File("/etc/os-release");    if (isLinux() && !isDailyBuild() && osReleaseFile.exists()) {      try (InputStream in=Files.newInputStream(osReleaseFile.toPath())){        Properties osProps=new Properties();        osProps.load(in);        String osLikeValue=osProps.getProperty("ID");        if (osLikeValue != null) {          String[] oSLikes=osLikeValue.split(" ");          for (          String osLike : oSLikes) {            if (osLike.toLowerCase().equals("kali")) {              onKali=Boolean.TRUE;              break;            }          }        }      } catch (      Exception e) {      }    }  }  return onKali;}  }
class C{  public BlobOutputStream(RowCursor cursor,ColumnBlob column){  _table=cursor.table();  _cursor=cursor;  _column=column;  init();}  }
class C{  public void testGetCertificateIssuer(){  assertNull("The default implementation should return null.",tbt_crlentry.getCertificateIssuer());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public SingleLogoutService(String location,String binding){  this.location=location;  this.binding=binding;}  }
class C{  public void printFunction(Vertex function,Writer writer,String indent,Set<Vertex> elements,Network network) throws IOException {  if (function.getData() instanceof BinaryData) {    Vertex detached=parseFunctionByteCode(function,(BinaryData)function.getData(),network);    elements.add(detached);    printFunction(detached,writer,indent,elements,network);    return;  }  printComments(function,writer,indent,false,network);  List<Vertex> functions=new ArrayList<Vertex>();  List<Vertex> variables=new ArrayList<Vertex>();  writer.write(indent);  writer.write("function ");  printElement(function,writer,indent,functions,variables,elements,network);  writer.write(" {\r\n");  writer.write(indent);  writer.write("\t");  printArguments(function,Primitive.DO,0,null,false,true,true,false,writer,indent.substring(0,indent.length() - 1),variables,functions,elements,true,network);  writer.write(indent);  writer.write("}\r\n");  writer.write("\r\n");  for (  Vertex element : variables) {    printVariable(element,writer,indent,elements,network);  }  for (  Vertex element : functions) {    printFunction(element,writer,indent,elements,network);  }}  }
class C{  private void resetOptionStatus(){  boolean isUpgrade=true;  if (m_modeTransfer.isSelected())   isUpgrade=false;  m_upgradeModeOld=isUpgrade;  if (isUpgrade) {    m_optionAttemptTranslations.setEnabled(false);    m_optionPreserveTableIDs.setEnabled(true);    m_optionDropSource.setEnabled(true);  } else {    m_optionAttemptTranslations.setEnabled(true);    m_optionPreserveTableIDs.setEnabled(false);    m_optionDropSource.setEnabled(false);  }}  }
class C{  private long reconcileState(){  final Phaser root=this.root;  long s=state;  if (root != this) {    int phase, p;    while ((phase=(int)(root.state >>> PHASE_SHIFT)) != (int)(s >>> PHASE_SHIFT) && !UNSAFE.compareAndSwapLong(this,stateOffset,s,s=(((long)phase << PHASE_SHIFT) | ((phase < 0) ? (s & COUNTS_MASK) : (((p=(int)s >>> PARTIES_SHIFT) == 0) ? EMPTY : ((s & PARTIES_MASK) | p))))))     s=state;  }  return s;}  }
class C{  public long lookupId(BytesRef idBytes) throws IOException {  String field=schema.getUniqueKeyField().getName();  for (int i=0, c=leafContexts.size(); i < c; i++) {    final AtomicReaderContext leaf=leafContexts.get(i);    final AtomicReader reader=leaf.reader();    final Terms terms=reader.terms(field);    if (terms == null)     continue;    TermsEnum te=terms.iterator(null);    if (te.seekExact(idBytes)) {      DocsEnum docs=te.docs(reader.getLiveDocs(),null,DocsEnum.FLAG_NONE);      int id=docs.nextDoc();      if (id == DocIdSetIterator.NO_MORE_DOCS)       continue;      assert docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS;      return (((long)i) << 32) | id;    }  }  return -1;}  }
class C{  @Override public void onSearchHint(SearchCustomActionBar searchview,CharSequence constraint){}  }
class C{  public static void updateTypeMember(final Connection connection,final TypeMember member,final String newName,final BaseType newBaseType,final Optional<Integer> offset,final Optional<Integer> newNumberOfElements,final Optional<Integer> newArgumentIndex,final INaviModule module) throws CouldntSaveDataException {  Preconditions.checkNotNull(member,"Error: member argument can not be null.");  Preconditions.checkNotNull(newName,"Error: new name argument can not be null");  Preconditions.checkNotNull(newBaseType,"Error: new base type argument can not be null.");  Preconditions.checkNotNull(offset,"Error: offset argument can not be null");  Preconditions.checkNotNull(newNumberOfElements,"Error: new number of elements argument can not be null.");  Preconditions.checkNotNull(newArgumentIndex,"Error: new argument index argument can not be null.");  try {    final PreparedStatement statement=connection.prepareStatement("UPDATE " + CTableNames.TYPE_MEMBERS_TABLE + " SET name = ?, base_type = ?, parent_id = ?, \"offset\" = ?, "+ "number_of_elements = ?, argument = ? WHERE module_id = ? AND id = ?");    try {      statement.setString(1,newName);      statement.setInt(2,newBaseType.getId());      statement.setInt(3,member.getParentType().getId());      if (offset.isPresent()) {        statement.setInt(4,offset.get());      } else {        statement.setNull(4,Types.INTEGER);      }      if (newNumberOfElements.isPresent()) {        statement.setInt(5,newNumberOfElements.get());      } else {        statement.setNull(5,Types.INTEGER);      }      if (newArgumentIndex.isPresent()) {        statement.setInt(6,newArgumentIndex.get());      } else {        statement.setNull(6,Types.INTEGER);      }      statement.setInt(7,module.getConfiguration().getId());      statement.setInt(8,member.getId());      statement.executeUpdate();    }  finally {      statement.close();    }  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  public ASN1InputStream(byte[] input,boolean lazyEvaluate){  this(new ByteArrayInputStream(input),input.length,lazyEvaluate);}  }
class C{  private void saveDebugger(){  if (m_addressSpace == null) {    try {      m_module.getConfiguration().setDebuggerTemplate(m_debuggerPanel.getSelectedDebugger());    } catch (    final CouldntSaveDataException e) {      CUtilityFunctions.logException(e);      final String message="E00179: " + "Could not change the module debugger";      final String description=CUtilityFunctions.createDescription("The new module debugger could not be saved to the database.",new String[]{"There was a problem with the connection to the database while the debugger was saved"},new String[]{"The debugger was not saved. Please try to find out what went wrong with the database connection and try to save the debugger again."});      NaviErrorDialog.show(SwingUtilities.getWindowAncestor(this),message,description,e);    }  }}  }
class C{  public KeybindSet(JButton button,String commandName,KeyModifier modifier,int key){  this.button=button;  this.commandName=commandName;  this.modifier=modifier;  this.key=key;}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public static Test suite(){  return (new TestSuite(Issue2194ITCase.class));}  }
class C{  public AllowHeader createAllowHeader(String method) throws ParseException {  if (method == null)   throw new NullPointerException("null arg method");  Allow allow=new Allow();  allow.setMethod(method);  return allow;}  }
class C{  public void characters(char[] ch,int start,int length) throws SAXException {  try {    stopTerminator();    if (w == null)     return;    int end=start + length;    for (int i=start; i < end; i++) {      char c=ch[i];switch (c) {case '&':        w.write("&amp;");      break;case '<':    w.write("&lt;");  break;case '>':w.write("&gt;");break;case '\n':case '\r':case '\t':w.write(c);break;default :if (canEncode(c)) {w.write(c);} else {w.write("&#");w.write(Integer.toString(c));w.write(";");}break;}}} catch (IOException e) {throw new SAXException(e);}}  }
class C{  public static DoubleFunction div(final double b){  return mult(1 / b);}  }
class C{  public static long multiplyWith7(long n){  return (n << 3) - n;}  }
class C{  private void validate(){  onComplete(true);}  }
class C{  public static double convertMillisToMinutes(double millis){  return millis / MINUTE_TO_MILLIS;}  }
class C{  private double[][] createInitialSimplex(double[] initial){  double[][] points=new double[initial.length + 1][];  for (int i=0; i < points.length; i++) {    points[i]=new double[initial.length];  }  System.arraycopy(initial,0,points[0],0,initial.length);  for (int i=1; i < points.length; i++) {    System.arraycopy(initial,0,points[i],0,initial.length);    points[i][i - 1]+=lambda;  }  return points;}  }
class C{  private static Stats computeOverDivide(ArrayList<Integer> ngram,References references,int boundary){  HashMap<String,Integer> boundaryNgrams=new HashMap<>();  for (int width=1; width <= Math.min(maxOrder,ngram.size()); width++) {    for (int i=0; i < ngram.size() - width + 1; i++) {      int j=i + width;      final List<Integer> piece=ngram.subList(i,j);      if (boundary == -1 || (boundary > i && boundary < j)) {        String ngramStr=Vocabulary.getWords(piece);        if (!boundaryNgrams.containsKey(ngramStr))         boundaryNgrams.put(ngramStr,1); else         boundaryNgrams.put(ngramStr,boundaryNgrams.get(ngramStr));      }    }  }  BLEU.Stats result=new BLEU.Stats();  int[] stats=BLEU.computeNgramMatches(0,boundaryNgrams,references.ngramCounts,maxOrder);  System.arraycopy(stats,1,result.counts,0,maxOrder);  return result;}  }
class C{  public int[] readTurnOverflowAbsolute() throws IOException {  String line=br.readLine();  while (line != null) {    if (line.matches(".*Turn duration overflow by.*")) {      return splitLine(line);    }    line=br.readLine();  }  return null;}  }
class C{  public final double correct(){  return m_delegate.correct();}  }
class C{  public JCTypeCast TypeCast(Type type,JCExpression expr){  return (JCTypeCast)TypeCast(Type(type),expr).setType(type);}  }
class C{  public static String format(int id){  final char[] r=new char[8];  for (int p=7; 0 <= p; p--) {    final int h=id & 0xf;    r[p]=h < 10 ? (char)('0' + h) : (char)('a' + (h - 10));    id>>=4;  }  return new String(r);}  }
class C{  public static void deleteCachedCover(Uri uri){  sImageCache.remove(ContentUris.parseId(uri));}  }
class C{  public static String escape(String input,Characters[] characters){  String result;  TCharArrayList chars;  List<String> escaped;  chars=new TCharArrayList();  escaped=new ArrayList<>();  for (  Characters ch : characters) {switch (ch) {case AMPERSAND:      chars.add('&');    escaped.add("\\&");  break;case BACKSLASH:chars.add('\\');escaped.add("\\textbackslash ");break;case DOLLAR:chars.add('$');escaped.add("\\$");break;case UNDERSCORE:chars.add('_');escaped.add("\\_");break;case CARET:chars.add('^');escaped.add("$^\\wedge$");break;case PERCENTAGE:chars.add('%');escaped.add("\\%");break;default :throw new IllegalStateException("Unhandled character: " + ch);}}result=OptionUtils.backQuoteChars(input,chars.toArray(),escaped.toArray(new String[escaped.size()]));return result;}  }
class C{  public boolean addPath(OPath path){  Block block=path.getBlock();  if (block == null) {    log.error("Path \"" + path.getName() + "\" has no block.");    return false;  }  if (!this.equals(path.getFromPortal()) && !this.equals(path.getToPortal())) {    return false;  }  if (_fromBlock != null && _fromBlock.equals(block)) {    return addPath(_fromPaths,path);  } else   if (_toBlock != null && _toBlock.equals(block)) {    return addPath(_toPaths,path);  }  return false;}  }
class C{  @DatabindingMethod public void onTitleClick(View v,Integer position,ImageInfo item,AdapterManager<?> am){  mToaster.show("[ this is called on item2-> 'item_txt' ] on title click: position = " + position + " ,item = "+ item);}  }
class C{  public void newLine() throws IOException {  super.write(StringUtils.LS);}  }
class C{  public IdentifiedLanguage(final String language,final Double confidence){  super(language);  this.confidence=confidence;}  }
class C{  public void testMultipleConnectionStops() throws Exception {  testStoppedConsumerHoldsMessagesTillStarted();  stoppedConnection.stop();  testStoppedConsumerHoldsMessagesTillStarted();  stoppedConnection.stop();  testStoppedConsumerHoldsMessagesTillStarted();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void moveSelectionToLastPosition(){  if (selectionTable.getSelectionCount() == 0) {    return;  }  final int numberOfSelectedElements=selectionTable.getSelectionCount();  for (  final TableItem tableItem : selectionTable.getSelection()) {    final DLItem item=(DLItem)tableItem.getData();    selection.remove(item);    selection.add(item);  }  redrawTables();  final int numberOfElements=selectionTable.getItemCount();  selectionTable.select(numberOfElements - numberOfSelectedElements,numberOfElements - 1);  selectionTable.forceFocus();}  }
class C{  protected void updateButtonDayDate(Button dayButton,int year,int currentMonth,int day){  updateButtonDayDate(dayButton,currentMonth,day);}  }
class C{  public static String toString(InputStream input) throws IOException {  return toString(input,Charset.defaultCharset());}  }
class C{  public static boolean isNameMatching(String startingWith,Declaration d){  return isNameMatching(startingWith,d.getName());}  }
class C{  @SuppressForbidden(reason="We need to access private fields of measured objects.") private static ClassCache createCacheEntry(final Class<?> clazz){  return AccessController.doPrivileged((PrivilegedAction<ClassCache>)null);}  }
class C{  public RaftParameters withElectionTimeoutUpper(int electionTimeoutUpper){  this.electionTimeoutUpperBound=electionTimeoutUpper;  return this;}  }
class C{  public void registerProjectType(ProjectTypeDef projectType) throws ProjectTypeConstraintException {  if (isNameValid(projectType) && isParentValid(projectType,validatedData)) {    validatedData.put(projectType.getId(),projectType);    init(projectType);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:48.591 -0500",hash_original_method="BC041D78EED5B299AE554E075ADF39D8",hash_generated_method="C4605B4B9EFC12A82E9A03E0D3B83614") @Deprecated public void onSignalStrengthChanged(int asu){}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double z;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    WhiteboxRaster numInflowingStreamCells=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,noData);    numInflowingStreamCells.isTemporaryFile=true;    byte numNeighbouringStreamCells=0;    double currentValue=0;    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            output.setValue(row,col,1);            numInflowingStreamCells.setValue(row,col,-1);          } else {            output.setValue(row,col,0);            numInflowingStreamCells.setValue(row,col,numNeighbouringStreamCells);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (numInflowingStreamCells.getValue(row,col) == -1) {          x=col;          y=row;          flag=true;          do {            z=output.getValue(y,x);            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              if (c > 7) {                showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                return;              }              x+=dX[c];              y+=dY[c];              if (streams.getValue(y,x) <= 0) {                flag=false;              } else {                currentValue=numInflowingStreamCells.getValue(y,x) - 1;                numInflowingStreamCells.setValue(y,x,currentValue);                if (currentValue > 0) {                  flag=false;                }                currentValue=output.getValue(y,x);                output.setValue(y,x,z + currentValue);              }            } else {              flag=false;            }          } while (flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    numInflowingStreamCells.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void removeListener(T listener){  listeners.remove(listener);}  }
class C{  protected void fillTable(JComboBox cb){  ValueNamePair select=null;  String sql="SELECT AD_Table_ID, TableName FROM AD_Table t " + "WHERE EXISTS (SELECT * FROM AD_Column c" + " WHERE t.AD_Table_ID=c.AD_Table_ID AND c.ColumnName='Posted')"+ " AND IsView='N'";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      int id=rs.getInt(1);      String tableName=rs.getString(2);      String name=Msg.translate(Env.getCtx(),tableName + "_ID");      ValueNamePair pp=new ValueNamePair(tableName,name);      cb.addItem(pp);      tableInfo.put(tableName,new Integer(id));      if (id == AD_Table_ID)       select=pp;    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  if (select != null)   cb.setSelectedItem(select);}  }
class C{  public CipherParameters generateDerivedParameters(int keySize,int ivSize){  keySize=keySize / 8;  ivSize=ivSize / 8;  byte[] dKey=generateDerivedKey(keySize + ivSize);  return new ParametersWithIV(new KeyParameter(dKey,0,keySize),dKey,keySize,ivSize);}  }
class C{  public boolean remove(INode n){  INode state=contains(n);  if (state == null) {    return false;  }  return queue.remove(state);}  }
class C{  public final boolean hasContended(){  return head != null;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case NODE_ID:    return isSetNodeId();case VERSION:  return isSetVersion();}throw new IllegalStateException();}  }
class C{  protected boolean containsObjectInstance(T instance){  Collection<T> collection=__getCollection();  if (collection != null) {    for (    T item : collection) {      if (instance == item)       return true;    }  }  return false;}  }
class C{  private void incEdgeCounter(GPR counters,GPR scratch,GPR scratchForXER,int counterIdx){  asm.emitLInt(scratch,counterIdx << 2,counters);  emitEdgeCounterIncrease(scratch,scratchForXER);  asm.emitSTW(scratch,counterIdx << 2,counters);}  }
class C{  final synchronized void writeToStream(DataOutputStream dos) throws IOException {  tree.writeToStream(dos);  timeController.writeToStream(dos);}  }
class C{  public static void attributes(TagData data,TagLibTag tag,Tag parent) throws TemplateException {  int type=tag.getAttributeType();  int start=data.srcCode.getPos();  if (type != TagLibTag.ATTRIBUTE_TYPE_NONAME) {    try {      int min=tag.getMin();      int max=tag.getMax();      int count=0;      ArrayList<String> args=new ArrayList<String>();      RefBoolean allowDefaultValue=new RefBooleanImpl(tag.getDefaultAttribute() != null);      while (data.srcCode.isValidIndex()) {        data.srcCode.removeSpace();        if (data.srcCode.isCurrent('/') || data.srcCode.isCurrent('>'))         break;        parent.addAttribute(attribute(data,tag,args,allowDefaultValue));        count++;      }      if (tag.hasDefaultValue()) {        Map<String,TagLibTagAttr> hash=tag.getAttributes();        Iterator<Entry<String,TagLibTagAttr>> it=hash.entrySet().iterator();        Entry<String,TagLibTagAttr> e;        TagLibTagAttr att;        while (it.hasNext()) {          e=it.next();          att=e.getValue();          if (!parent.containsAttribute(att.getName()) && att.hasDefaultValue()) {            Attribute attr=new Attribute(tag.getAttributeType() == TagLibTag.ATTRIBUTE_TYPE_DYNAMIC,att.getName(),CastOther.toExpression(data.factory.createLitString(Caster.toString(att.getDefaultValue(),null)),att.getType()),att.getType());            attr.setDefaultAttribute(true);            parent.addAttribute(attr);          }        }      }      boolean hasAttributeCollection=args.contains("attributecollection");      if (!hasAttributeCollection && min > count)       throw createTemplateException(data.srcCode,"the tag " + tag.getFullName() + " must have at least "+ min+ " attributes",tag);      if (!hasAttributeCollection && max > 0 && max < count)       throw createTemplateException(data.srcCode,"the tag " + tag.getFullName() + " can have a maximum of "+ max+ " attributes",tag);      if (type == TagLibTag.ATTRIBUTE_TYPE_FIXED || type == TagLibTag.ATTRIBUTE_TYPE_MIXED) {        Iterator<TagLibTagAttr> it=tag.getAttributes().values().iterator();        while (it.hasNext()) {          TagLibTagAttr att=it.next();          if (att.isRequired() && !contains(args,att) && att.getDefaultValue() == null) {            if (!hasAttributeCollection)             throw createTemplateException(data.srcCode,"attribute " + att.getName() + " is required for tag "+ tag.getFullName(),tag);            parent.addMissingAttribute(att);          }        }      }    } catch (    TemplateException te) {      data.srcCode.setPos(start);      TagLibTagAttr sa=tag.getSingleAttr();      if (sa != null)       attrNoName(parent,tag,data,sa); else       throw te;    }  } else {    attrNoName(parent,tag,data,null);  }}  }
class C{  protected RangeConstraintImpl(){  super();}  }
class C{  @Override public void mouseMoved(MouseEvent e){synchronized (mouseLock) {    mouseX=userX(e.getX());    mouseY=userY(e.getY());  }}  }
class C{  public Bitmap decodeFileDescriptor(FileDescriptor fd,BitmapFactory.Options options){  if (options.mCancel) {    return null;  }  Thread thread=Thread.currentThread();  if (!canThreadDecoding(thread)) {    Log.d(TAG,"Thread " + thread + " is not allowed to decode.");    return null;  }  setDecodingOptions(thread,options);  Bitmap b=BitmapFactory.decodeFileDescriptor(fd,null,options);  removeDecodingOptions(thread);  return b;}  }
class C{  @Override public Cursor swapCursor(Cursor newCursor){  Cursor old=super.swapCursor(newCursor);  resetMappings();  return old;}  }
class C{  static String add_escapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public static short adviceId(ByteString bagId){  return bagId.asReadOnlyByteBuffer().getShort(2);}  }
class C{  public Graphics create(){  DebugGraphics debugGraphics;  debugGraphics=new DebugGraphics();  debugGraphics.graphics=graphics.create();  debugGraphics.debugOptions=debugOptions;  debugGraphics.buffer=buffer;  return debugGraphics;}  }
class C{  static double f(double[] coefs,double x){  double y=0;  for (int i=0; i < coefs.length; i++) {    y+=coefs[i] * pow(x,coefs.length - 1 - i);  }  return y;}  }
class C{  public void add(final Match<T> match){  m_matches.add(match);}  }
class C{  public Slack icon(String imageOrIcon){  this.icon=imageOrIcon;  return this;}  }
class C{  public void fireWalletBusyChange(boolean newWalletIsBusy){  for (Iterator<WalletBusyListener> it=walletBusyListeners.iterator(); it.hasNext(); ) {    WalletBusyListener walletBusyListener=it.next();    walletBusyListener.walletBusyChange(newWalletIsBusy);  }}  }
class C{  public static void createSupportEMail(Dialog owner,String subject,String message){  log.config("ADialog.createSupportEMail");  String to=Adempiere.getSupportEMail();  MUser from=MUser.get(Env.getCtx(),Env.getAD_User_ID(Env.getCtx()));  StringBuffer myMessage=new StringBuffer(message);  myMessage.append("\n");  CLogMgt.getInfo(myMessage);  CLogMgt.getInfoDetail(myMessage,Env.getCtx());  ModelValidationEngine.get().getInfoDetail(myMessage,Env.getCtx());  EMailDialog emd=new EMailDialog(owner,Msg.getMsg(Env.getCtx(),"EMailSupport"),from,to,"Support: " + subject,myMessage.toString(),null);}  }
class C{  public CSVParser(char separator){  this(separator,DEFAULT_QUOTE_CHARACTER,DEFAULT_ESCAPE_CHARACTER);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  void handleBlockChange(java.beans.PropertyChangeEvent e){  if ((getMemory() != null) && (block != null) && !suppressNameUpdate) {    Object val=block.getValue();    if (val != null) {      if (!(val instanceof jmri.jmrit.roster.RosterEntry)) {        val=val.toString();      }    }    getMemory().setValue(val);  }  redrawLayoutBlockPanels();  if (InstanceManager.getDefault(jmri.jmrit.display.layoutEditor.LayoutBlockManager.class).isAdvancedRoutingEnabled()) {    stateUpdate();  }}  }
class C{  protected void addReferencePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ElementReferenceExpression_reference_feature"),getString("_UI_PropertyDescriptor_description","_UI_ElementReferenceExpression_reference_feature","_UI_ElementReferenceExpression_type"),ExpressionsPackage.Literals.ELEMENT_REFERENCE_EXPRESSION__REFERENCE,true,false,true,null,null,null));}  }
class C{  protected void onFirstListItem(){  if (swipeListViewListener != null) {    swipeListViewListener.onFirstListItem();  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public static boolean checkLineBox(PLVector3[] ray,PLVector3 startBound,PLVector3 endBound,PLVector3[] hitPoint){  if ((ray[1].x < startBound.x && ray[0].x < startBound.x) || (ray[1].x > endBound.x && ray[0].x > endBound.x) || (ray[1].y < startBound.y && ray[0].y < startBound.y)|| (ray[1].y > endBound.y && ray[0].y > endBound.y)|| (ray[1].z < startBound.z && ray[0].z < startBound.z)|| (ray[1].z > endBound.z && ray[0].z > endBound.z))   return false;  if (ray[0].x > startBound.x && ray[0].x < endBound.x && ray[0].y > startBound.y && ray[0].y < endBound.y && ray[0].z > startBound.z && ray[0].z < endBound.z) {    if (hitPoint[0] != null)     hitPoint[0].setValues(ray[0]); else     hitPoint[0]=ray[0].clone();    return true;  }  if ((PLIntersection.evalSideIntersection(ray[0].x - startBound.x,ray[1].x - startBound.x,ray,hitPoint,startBound,endBound,1)) || (PLIntersection.evalSideIntersection(ray[0].y - startBound.y,ray[1].y - startBound.y,ray,hitPoint,startBound,endBound,2)) || (PLIntersection.evalSideIntersection(ray[0].z - startBound.z,ray[1].z - startBound.z,ray,hitPoint,startBound,endBound,3))|| (PLIntersection.evalSideIntersection(ray[0].x - endBound.x,ray[1].x - endBound.x,ray,hitPoint,startBound,endBound,1))|| (PLIntersection.evalSideIntersection(ray[0].y - endBound.y,ray[1].y - endBound.y,ray,hitPoint,startBound,endBound,2))|| (PLIntersection.evalSideIntersection(ray[0].z - endBound.z,ray[1].z - endBound.z,ray,hitPoint,startBound,endBound,3)))   return true;  return false;}  }
class C{  protected void paintChildren(Graphics g){  super.paintChildren(g);  SplitPaneUI ui=getUI();  if (ui != null) {    Graphics tempG=g.create();    ui.finishedPaintingChildren(this,tempG);    tempG.dispose();  }}  }
class C{  public void connect() throws IOException {  if (m_state != PseudoTcpState.TCP_LISTEN) {    throw new IOException("Invalid socket state: " + m_state);  }  m_state=PseudoTcpState.TCP_SYN_SENT;  logger.log(Level.FINE,"State: TCP_SYN_SENT","");  queueConnectMessage();  attemptSend(SendFlags.sfNone);}  }
class C{  public GlobPattern(String globPattern){  set(globPattern);}  }
class C{  public String xPrintTargetError(Throwable t){  String getTarget="import java.lang.reflect.UndeclaredThrowableException;" + "String result=\"\";" + "while ( target instanceof UndeclaredThrowableException ) {"+ "	target=target.getUndeclaredThrowable(); "+ "	result+=\"Nested: \"+target.toString();"+ "}"+ "return result;";  Interpreter i=new Interpreter();  try {    i.set("target",t);    return (String)i.eval(getTarget);  } catch (  EvalError e) {    throw new InterpreterError("xprintarget: " + e.toString());  }}  }
class C{  public static double calculateDepartureTime(Activity act,double now,PlansConfigGroup.ActivityDurationInterpretation activityDurationInterpretation){  if (act.getMaximumDuration() == Time.UNDEFINED_TIME && (act.getEndTime() == Time.UNDEFINED_TIME)) {    return Double.POSITIVE_INFINITY;  } else {    double departure=0;    if (activityDurationInterpretation.equals(PlansConfigGroup.ActivityDurationInterpretation.minOfDurationAndEndTime)) {      if (act.getMaximumDuration() == Time.UNDEFINED_TIME) {        departure=act.getEndTime();      } else       if (act.getEndTime() == Time.UNDEFINED_TIME) {        departure=now + act.getMaximumDuration();      } else {        departure=Math.min(act.getEndTime(),now + act.getMaximumDuration());      }    } else     if (activityDurationInterpretation.equals(PlansConfigGroup.ActivityDurationInterpretation.endTimeOnly)) {      if (act.getEndTime() != Time.UNDEFINED_TIME) {        departure=act.getEndTime();      } else {        throw new IllegalStateException("activity end time not set and using something else not allowed.");      }    } else     if (activityDurationInterpretation.equals(PlansConfigGroup.ActivityDurationInterpretation.tryEndTimeThenDuration)) {      if (act.getEndTime() != Time.UNDEFINED_TIME) {        departure=act.getEndTime();      } else       if (act.getMaximumDuration() != Time.UNDEFINED_TIME) {        departure=now + act.getMaximumDuration();      } else {        throw new IllegalStateException("neither activity end time nor activity duration defined; don't know what to do.");      }    } else {      throw new IllegalStateException("should not happen");    }    if (departure < now) {      departure=now;    }    return departure;  }}  }
class C{  public void paintBackground(Graphics g){  super.paintBackground(g);}  }
class C{  public static String removeTagsHTML(String text){  if (text == null) {    String msg=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  return text.replaceAll("<[^\\s].*?>","");}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected double[] rhumbProjectDouble(Point2D from,Point2D to,boolean include_last,int nsegs){  if (nsegs < 1) {    nsegs=DrawUtil.pixel_distance((int)from.getX(),(int)from.getY(),(int)to.getX(),(int)to.getY()) >> 3;    if (nsegs == 0)     nsegs=1; else     if (nsegs > MAX_RHUMB_SEGS)     nsegs=MAX_RHUMB_SEGS;  }  LatLonPoint llp=new LatLonPoint.Double();  int[] xypts=DrawUtil.lineSegments((int)from.getX(),(int)from.getY(),(int)to.getX(),(int)to.getY(),nsegs,include_last,new int[nsegs << 1]);  double[] llpts=new double[xypts.length];  for (int i=0; i < llpts.length; i+=2) {    inverse(xypts[i],xypts[i + 1],llp);    llpts[i]=llp.getRadLat();    llpts[i + 1]=llp.getRadLon();  }  return llpts;}  }
class C{  public boolean equals(Object obj){  return obj != null && obj instanceof DocFlavor && getStringValue().equals(((DocFlavor)obj).getStringValue());}  }
class C{  @PreAuthorize("hasRole('ROLE_USER_MANAGER')") @Transactional(readOnly=false,propagation=Propagation.REQUIRED) @Caching(evict={@CacheEvict(value="user",key="#user?.id"),@CacheEvict(value="user",key="#user?.username")}) public void updateUser(User user) throws RootNotModifiableException, RequiredFieldMissingException {  User u=userDao.read(user.getId());  boolean updateRoles=user.getRoles().size() != u.getRoles().size();  if (!updateRoles) {    int roleFound=0;    for (    Role r : u.getRoles()) {      if (user.getRoles().contains(r)) {        roleFound++;      }    }    updateRoles=roleFound != user.getRoles().size();  }  checkRoot(u);  u.setUsername(user.getUsername());  u.setFirstname(user.getFirstname());  u.setLastname(user.getLastname());  u.setAddress(user.getAddress());  u.setCountry(user.getCountry());  u.setEmail(user.getEmail());  u.setPhone(user.getPhone());  u.setRoles(user.getRoles());  u.setUsage(user.getUsage());  u.setSubUsage(user.getSubUsage());  u.setDomain(user.getDomain());  u.setSubDomain(user.getSubDomain());  Set<AccessRestriction> restrictions=user.getRestrictions();  Set<AccessRestriction> restrictionsToDelete=u.getRestrictions();  if (u.getRestrictions() != null && user.getRestrictions() != null) {    for (    AccessRestriction oldOne : u.getRestrictions()) {      for (      AccessRestriction newOne : user.getRestrictions()) {        if (oldOne.getBlockingReason().equals(newOne.getBlockingReason())) {          restrictions.remove(newOne);          restrictions.add(oldOne);          restrictionsToDelete.remove(oldOne);        }        continue;      }    }  }  u.setRestrictions(restrictions);  checkRequiredFields(u);  userDao.update(u);  if ((restrictions != null && !restrictions.isEmpty()) || updateRoles) {    SecurityContextProvider.forceLogout(u.getUsername());  }  for (  AccessRestriction restriction : restrictionsToDelete) {    accessRestrictionDao.delete(restriction);  }  logger.debug("User " + u.getUsername() + " Updated.");  if (cfgManager.getMailConfiguration().isOnUserUpdate()) {    String email=u.getEmail();    if (cfgManager.getAdministratorConfiguration().getName().equals(u.getUsername()) && (email == null))     email="dhus@gael.fr";    logger.debug("Sending email to " + email);    if (email == null)     throw new UnsupportedOperationException("Missing Email in configuration: " + "Cannot inform modified user \"" + u.getUsername() + ".");    String message=new String("Dear " + getUserWelcome(u) + ",\n\nYour account on "+ cfgManager.getNameConfiguration().getShortName()+ " has been updated by an administrator:\n"+ u.toString()+ "\n"+ "For help requests please write to: "+ cfgManager.getSupportConfiguration().getMail()+ "\n\n"+ "Kind regards,\n"+ cfgManager.getSupportConfiguration().getName()+ ".\n"+ cfgManager.getServerConfiguration().getExternalUrl());    String subject=new String("Account " + u.getUsername() + " updated");    try {      mailer.send(email,null,null,subject,message);    } catch (    Exception e) {      throw new EmailNotSentException("Cannot send email to " + email,e);    }    logger.debug("email sent.");  }}  }
class C{  String readNumber(String source,int ofs,String token,boolean adjacent){  if (adjacent) {    return source.substring(ofs,ofs + token.length());  }  int len=source.length();  for (int i=ofs; i < len; i++) {    char ch=source.charAt(i);    if (isNumeric(ch) == false) {      if (i == 0) {        return null;      }      return source.substring(ofs,i);    }  }  return source.substring(ofs);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  String str;  TextView tv=new TextView(this);  tv.setText(test());  setContentView(tv);}  }
class C{  public void addNewFontWizard(){  AddResourceDialog addResource=new AddResourceDialog(loadedResources,AddResourceDialog.FONT);  if (JOptionPane.OK_OPTION == JOptionPane.showConfirmDialog(mainPanel,addResource,"Add Font",JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE)) {    if (addResource.checkName(loadedResources)) {      JOptionPane.showMessageDialog(mainPanel,"A resource with that name already exists","Add Font",JOptionPane.ERROR_MESSAGE);      addNewFontWizard();      return;    }    FontEditor font=new FontEditor(loadedResources,new EditorFont(com.codename1.ui.Font.createSystemFont(com.codename1.ui.Font.FACE_SYSTEM,com.codename1.ui.Font.STYLE_PLAIN,com.codename1.ui.Font.SIZE_MEDIUM),null,"Arial-plain-12",true,RenderingHints.VALUE_TEXT_ANTIALIAS_ON,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,;:!/\\*()[]{}|#$%^&<>?'\"+- "),addResource.getResourceName());    font.setFactoryCreation(true);    if (JOptionPane.OK_OPTION == JOptionPane.showConfirmDialog(mainPanel,font,"Add Font",JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE)) {      loadedResources.setFont(addResource.getResourceName(),font.createFont());    }  }}  }
class C{  public dt addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  private void createAccount(){  createAccount(dataTable);  if (listCreated.length() > 0)   ADialog.info(m_WindowNo,panel,"ChargeCreated",listCreated.toString());  if (listRejected.length() > 0)   ADialog.error(m_WindowNo,panel,"ChargeNotCreated",listRejected.toString());}  }
class C{  public static void fill(short[] a,short val){  for (int i=0, len=a.length; i < len; i++)   a[i]=val;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.PRAGMA__NAME:    setName((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  protected String[] tokenize(String text) throws IOException {  Collection<String> result=new LinkedList<>();  for (  String textFieldName : textFieldNames) {    try (TokenStream tokenStream=analyzer.tokenStream(textFieldName,text)){      CharTermAttribute charTermAttribute=tokenStream.addAttribute(CharTermAttribute.class);      tokenStream.reset();      while (tokenStream.incrementToken()) {        result.add(charTermAttribute.toString());      }      tokenStream.end();    }   }  return result.toArray(new String[result.size()]);}  }
class C{  public boolean hasFormat(){  return format != null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private Automaton verifyTopoSort(Automaton a){  int[] sorted=Operations.topoSortStates(a);  assertTrue(sorted.length <= a.getNumStates());  Automaton a2=new Automaton();  int[] stateMap=new int[a.getNumStates()];  Arrays.fill(stateMap,-1);  Transition transition=new Transition();  for (  int state : sorted) {    int newState=a2.createState();    a2.setAccept(newState,a.isAccept(state));    assertEquals(-1,stateMap[state]);    stateMap[state]=newState;  }  for (  int state : sorted) {    int count=a.initTransition(state,transition);    for (int i=0; i < count; i++) {      a.getNextTransition(transition);      assert stateMap[transition.dest] > stateMap[state];      a2.addTransition(stateMap[state],stateMap[transition.dest],transition.min,transition.max);    }  }  a2.finishState();  return a2;}  }
class C{  private void createToken(){  Intent intent=new Intent(this,TokenAdd.class);  startActivityForResult(intent,ACTIVITY_ADD_TOKEN);}  }
class C{  public ToHitData(int value,String desc){  this(value,desc,HIT_NORMAL,SIDE_FRONT);}  }
class C{  public UnsupportedQueryResultFormatException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public static HostInitiatorInfo parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  HostInitiatorInfo object=new HostInitiatorInfo();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"HostInitiatorInfo".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (HostInitiatorInfo)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","uniqueIdentifier").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setUniqueIdentifier(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","iscsiIdentifier").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setIscsiIdentifier(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","nodeWwn").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setNodeWwn(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","portWwn").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setPortWwn(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static float[] append(float buffer[],float newElement){  float[] t=resize(buffer,buffer.length + 1);  t[buffer.length]=newElement;  return t;}  }
class C{  public static <K extends Comparable<K>,V extends Comparable<V>>Map<K,V> createByValueSortedMap(Map<K,V> map){  return new ByValueSortingTreeMap<>(ByValueComparator.create(map));}  }
class C{  public Job configure(boolean isSecured,String metaStoreUris,String principal,String dbConnectionString,String dbUser,String dbPassword,String inputDatabase,String inputTable,String inputFilter,String storageEngine,String distributeBy,int numReducer,int commitSize,String[] anonFields,String exportSalt) throws Exception {  this.isSecured=isSecured;  this.metaStoreUris=metaStoreUris;  this.principal=principal;  this.dbConnectionString=dbConnectionString;  this.dbUser=dbUser;  this.dbPassword=dbPassword;  this.inputDatabase=inputDatabase;  this.inputTable=inputTable;  this.inputFilter=inputFilter;  this.storageEngine=storageEngine;  this.distributeBy=distributeBy;  this.numReducer=numReducer;  this.commitSize=commitSize;  this.anonFields=anonFields.clone();  this.exportSalt=exportSalt;  return configure();}  }
class C{  public final boolean isCoalescentOnly(){  for (int i=0; i < intervalCount; i++) {    if (getCoalescentEvents(i) < 1)     return false;  }  return true;}  }
class C{  public Location(){  super();}  }
class C{  private static void sendRegistrationMessage(Instantiator s){  InternalDistributedSystem system=InternalDistributedSystem.getAnyInstance();  if (system != null) {    RegistrationMessage m=null;    if (s.getContext() == null) {      m=new RegistrationMessage(s);    } else {      m=new RegistrationContextMessage(s);    }    system.getDistributionManager().putOutgoing(m);  }}  }
class C{  public FileBinary(File file,String fileName){  this(file,fileName,null);}  }
class C{  @Override protected boolean usesClusterTable(){  return true;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public T peek(){  if (heap.size() > 0)   return heap.elementAt(TOP); else   return null;}  }
class C{  public Element selectElementMatchingXPath(String xpath,Element toSearch){  List<Element> results=selectElementsMatchingXPath(xpath,toSearch);  if (results.isEmpty()) {    throw new ElementNotFoundException(xpath,toSearch);  }  Element match=results.get(0);  return match;}  }
class C{  protected void addValuePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_FloatLiteral_value_feature"),getString("_UI_PropertyDescriptor_description","_UI_FloatLiteral_value_feature","_UI_FloatLiteral_type"),ExpressionsPackage.Literals.FLOAT_LITERAL__VALUE,true,false,false,ItemPropertyDescriptor.REAL_VALUE_IMAGE,null,null));}  }
class C{  public void testPutLast() throws InterruptedException {  LinkedBlockingDeque q=new LinkedBlockingDeque(SIZE);  for (int i=0; i < SIZE; ++i) {    Integer I=new Integer(i);    q.putLast(I);    assertTrue(q.contains(I));  }  assertEquals(0,q.remainingCapacity());}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.showBack();  this.setTitle(this.getString(R.string.about_title));  GlideUtils.displayCircleHeader(this.aboutAvatarIv,R.mipmap.ic_camnter);}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.easyRV=(EasyRecyclerView)this.findViewById(R.id.recycler_view);}  }
class C{  public int pauseDownload(long... ids){  initPauseMethod();  if (pauseDownload == null) {    return -1;  }  try {    return ((Integer)pauseDownload.invoke(downloadManager,ids)).intValue();  } catch (  Exception e) {    e.printStackTrace();  }  return -1;}  }
class C{  public void abortSharing() throws RcsPermissionDeniedException, RcsGenericException {  try {    mSharingInf.abortSharing();  } catch (  Exception e) {    RcsPermissionDeniedException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public void write(final PrintStream stream){  stream.print("time\ttime\tdepartures_all\tarrivals_all\tstuck_all\ten-route_all");  for (  String legMode : this.data.keySet()) {    stream.print("\tdepartures_" + legMode + "\tarrivals_"+ legMode+ "\tstuck_"+ legMode+ "\ten-route_"+ legMode);  }  stream.print("\n");  int allEnRoute=0;  int[] modeEnRoute=new int[this.data.size()];  for (int i=0; i < this.allModesData.countsDep.length; i++) {    allEnRoute=allEnRoute + this.allModesData.countsDep[i] - this.allModesData.countsArr[i] - this.allModesData.countsStuck[i];    stream.print(Time.writeTime(i * this.binSize) + "\t" + i * this.binSize);    stream.print("\t" + this.allModesData.countsDep[i] + "\t"+ this.allModesData.countsArr[i]+ "\t"+ this.allModesData.countsStuck[i]+ "\t"+ allEnRoute);    int mode=0;    for (    ModeData modeData : this.data.values()) {      modeEnRoute[mode]=modeEnRoute[mode] + modeData.countsDep[i] - modeData.countsArr[i] - modeData.countsStuck[i];      stream.print("\t" + modeData.countsDep[i] + "\t"+ modeData.countsArr[i]+ "\t"+ modeData.countsStuck[i]+ "\t"+ modeEnRoute[mode]);      mode++;    }    stream.print("\n");  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  double sum;  int[] dX;  int[] dY;  double[] weights;  int numPixelsInFilter;  boolean absValuesOnly=false;  boolean reflectAtBorders=true;  String direction="vertical";  double centreValue;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      String str=args[i].toLowerCase();      if (str.contains("v")) {        direction="vertical";      } else       if (str.contains("h")) {        direction="horizontal";      } else       if (str.contains("45")) {        direction="45";      } else       if (str.contains("135")) {        direction="135";      } else {        direction="vertical";      }    } else     if (i == 3) {      absValuesOnly=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    if (direction.equals("vertical")) {      weights=new double[]{-1,2,-1,-1,2,-1,-1,2,-1};    } else     if (direction.equals("horizontal")) {      weights=new double[]{-1,-1,-1,2,2,2,-1,-1,-1};    } else     if (direction.equals("135")) {      weights=new double[]{2,-1,-1,-1,2,-1,-1,-1,2};    } else {      weights=new double[]{-1,-1,2,-1,2,-1,2,-1,-1};    }    dX=new int[]{-1,0,1,-1,0,1,-1,0,1};    dY=new int[]{-1,-1,-1,0,0,0,1,1,1};    numPixelsInFilter=dX.length;    if (absValuesOnly) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          centreValue=inputFile.getValue(row,col);          if (centreValue != noData) {            sum=0;            for (a=0; a < numPixelsInFilter; a++) {              x=col + dX[a];              y=row + dY[a];              z=inputFile.getValue(y,x);              if (z == noData) {                z=centreValue;              }              sum+=z * weights[a];            }            if (sum < 0) {              sum=-sum;            }            outputFile.setValue(row,col,sum);          } else {            outputFile.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    } else {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          centreValue=inputFile.getValue(row,col);          if (centreValue != noData) {            sum=0;            for (a=0; a < numPixelsInFilter; a++) {              x=col + dX[a];              y=row + dY[a];              z=inputFile.getValue(y,x);              if (z == noData) {                z=centreValue;              }              sum+=z * weights[a];            }            outputFile.setValue(row,col,sum);          } else {            outputFile.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void resetLabels(){  AbstractInsnNode insn=first;  while (insn != null) {    if (insn instanceof LabelNode) {      ((LabelNode)insn).resetLabel();    }    insn=insn.next;  }}  }
class C{  @Override public String globalInfo(){  return "Alphabetic string tokenizer, tokens are to be formed only from " + "contiguous alphabetic sequences.";}  }
class C{  public SAXSVGDocumentFactory(String parser){  super(SVGDOMImplementation.getDOMImplementation(),parser);}  }
class C{  void startOptional(){  parsed.add(currentParsed().copy());}  }
class C{  public boolean similar(Object other){  try {    if (!(other instanceof JSONObject)) {      return false;    }    Set<String> set=this.keySet();    if (!set.equals(((JSONObject)other).keySet())) {      return false;    }    Iterator<String> iterator=set.iterator();    while (iterator.hasNext()) {      String name=iterator.next();      Object valueThis=this.get(name);      Object valueOther=((JSONObject)other).get(name);      if (valueThis instanceof JSONObject) {        if (!((JSONObject)valueThis).similar(valueOther)) {          return false;        }      } else       if (valueThis instanceof JSONArray) {        if (!((JSONArray)valueThis).similar(valueOther)) {          return false;        }      } else       if (!valueThis.equals(valueOther)) {        return false;      }    }    return true;  } catch (  Throwable exception) {    return false;  }}  }
class C{  public VelocityContext(Map context,Context innerContext){  super(innerContext);  this.context=(context == null ? new HashMap() : context);}  }
class C{  public PersistentCookieStore(Context context){  cookiePrefs=context.getSharedPreferences(COOKIE_PREFS,0);  cookies=new HashMap<String,ConcurrentHashMap<String,HttpCookie>>();  Map<String,?> prefsMap=cookiePrefs.getAll();  for (  Map.Entry<String,?> entry : prefsMap.entrySet()) {    if (((String)entry.getValue()) != null && !((String)entry.getValue()).startsWith(COOKIE_NAME_PREFIX)) {      String[] cookieNames=TextUtils.split((String)entry.getValue(),",");      for (      String name : cookieNames) {        String encodedCookie=cookiePrefs.getString(COOKIE_NAME_PREFIX + name,null);        if (encodedCookie != null) {          HttpCookie decodedCookie=decodeCookie(encodedCookie);          if (decodedCookie != null) {            if (!cookies.containsKey(entry.getKey()))             cookies.put(entry.getKey(),new ConcurrentHashMap<String,HttpCookie>());            cookies.get(entry.getKey()).put(name,decodedCookie);          }        }      }    }  }}  }
class C{  public ECPoint multiply(ECPoint p,BigInteger k,PreCompInfo preCompInfo){  WNafPreCompInfo wnafPreCompInfo;  if ((preCompInfo != null) && (preCompInfo instanceof WNafPreCompInfo)) {    wnafPreCompInfo=(WNafPreCompInfo)preCompInfo;  } else {    wnafPreCompInfo=new WNafPreCompInfo();  }  int m=k.bitLength();  byte width;  int reqPreCompLen;  if (m < 13) {    width=2;    reqPreCompLen=1;  } else {    if (m < 41) {      width=3;      reqPreCompLen=2;    } else {      if (m < 121) {        width=4;        reqPreCompLen=4;      } else {        if (m < 337) {          width=5;          reqPreCompLen=8;        } else {          if (m < 897) {            width=6;            reqPreCompLen=16;          } else {            if (m < 2305) {              width=7;              reqPreCompLen=32;            } else {              width=8;              reqPreCompLen=127;            }          }        }      }    }  }  int preCompLen=1;  ECPoint[] preComp=wnafPreCompInfo.getPreComp();  ECPoint twiceP=wnafPreCompInfo.getTwiceP();  if (preComp == null) {    preComp=new ECPoint[]{p};  } else {    preCompLen=preComp.length;  }  if (twiceP == null) {    twiceP=p.twice();  }  if (preCompLen < reqPreCompLen) {    ECPoint[] oldPreComp=preComp;    preComp=new ECPoint[reqPreCompLen];    System.arraycopy(oldPreComp,0,preComp,0,preCompLen);    for (int i=preCompLen; i < reqPreCompLen; i++) {      preComp[i]=twiceP.add(preComp[i - 1]);    }  }  byte[] wnaf=windowNaf(width,k);  int l=wnaf.length;  ECPoint q=p.getCurve().getInfinity();  for (int i=l - 1; i >= 0; i--) {    q=q.twice();    if (wnaf[i] != 0) {      if (wnaf[i] > 0) {        q=q.add(preComp[(wnaf[i] - 1) / 2]);      } else {        q=q.subtract(preComp[(-wnaf[i] - 1) / 2]);      }    }  }  wnafPreCompInfo.setPreComp(preComp);  wnafPreCompInfo.setTwiceP(twiceP);  p.setPreCompInfo(wnafPreCompInfo);  return q;}  }
class C{  public GossipSeed(InetSocketAddress endpoint){  this(endpoint,"");}  }
class C{  public AbstractSimpleState(S id,Collection<E> deferred,Collection<? extends Action<S,E>> entryActions,Collection<? extends Action<S,E>> exitActions){  this(id,deferred,entryActions,exitActions,null);}  }
class C{  public static Result dashboard(){  long now=System.currentTimeMillis();  long finishDate=now - DAY;  if (now - _lastFetch > FETCH_DELAY) {    _numJobsAnalyzed=AppResult.find.where().gt(AppResult.TABLE.FINISH_TIME,finishDate).findRowCount();    _numJobsCritical=AppResult.find.where().gt(AppResult.TABLE.FINISH_TIME,finishDate).eq(AppResult.TABLE.SEVERITY,Severity.CRITICAL.getValue()).findRowCount();    _numJobsSevere=AppResult.find.where().gt(AppResult.TABLE.FINISH_TIME,finishDate).eq(AppResult.TABLE.SEVERITY,Severity.SEVERE.getValue()).findRowCount();    _lastFetch=now;  }  List<AppResult> results=AppResult.find.select(AppResult.getSearchFields()).where().gt(AppResult.TABLE.FINISH_TIME,finishDate).order().desc(AppResult.TABLE.FINISH_TIME).setMaxRows(50).fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS,AppHeuristicResult.getSearchFields()).findList();  return ok(homePage.render(_numJobsAnalyzed,_numJobsSevere,_numJobsCritical,searchResults.render("Latest analysis",results)));}  }
class C{  public static LongChunks createExtensibleIndex(){  return new LongChunks(0,20);}  }
class C{  public final boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof QName)) {    return false;  }  if ((namespaceURI == ((QName)obj).namespaceURI) && (localPart == ((QName)obj).localPart)) {    return true;  }  return false;}  }
class C{  public SVGBuilder readFromAsset(AssetManager assetMngr,String svgPath) throws IOException {  this.data=assetMngr.open(svgPath);  return this;}  }
class C{  private void populateNewParents(){  boolean isReturn=true;  if (isReturn)   return;  resetDBObjects(DBObject_Table.class);  s_logger.log(Level.CONFIG,"");  s_logger.log(Level.CONFIG,"populateNewParents",new Object[]{m_objectTypes,m_direction});  m_counterUpd=new Integer(0);  m_totalUpd=new Integer(0);  for (Iterator<String> tableIterator=m_objectList.iterator(); tableIterator.hasNext(); ) {    String tableKey=tableIterator.next();    DBObject sourceParentTable=m_sourceMap.get(tableKey);    DBObject targetParentTable=m_targetMap.get(tableKey);    if (targetParentTable == null && sourceParentTable != null) {      for (Iterator<String> fkIterator=m_source.getForeignKeys().keySet().iterator(); fkIterator.hasNext(); ) {        String fkKey=fkIterator.next();        DBObject sourceFK=m_source.getForeignKeys().get(fkKey);        DBObject_ForeignKey_Table sourceFKHeader=(DBObject_ForeignKey_Table)sourceFK.getHeaders().get(0);        String sourceChildTableName=sourceFKHeader.getTable();        String sourceParentTableName=sourceFKHeader.getFTable();        if (sourceParentTable.getName().equalsIgnoreCase(sourceParentTableName)) {          if (!sourceChildTableName.equals(sourceParentTableName)) {            if (m_target.isObjectExists(sourceChildTableName,m_target.getTables())) {              boolean childHasNullableColumns=false;              ArrayList<String> nullableChildColumns=new ArrayList<String>();              DBObject sourceChildTable=m_source.getObjectByName(sourceChildTableName,m_source.getTables());              for (Iterator<Integer> sourceChildColumnIterator=sourceChildTable.getContents().keySet().iterator(); sourceChildColumnIterator.hasNext(); ) {                Integer childColumnKey=sourceChildColumnIterator.next();                DBObject_Table_Column sourceChildColumn=(DBObject_Table_Column)sourceChildTable.getContents().get(childColumnKey);                if (sourceChildColumn.isNullable())                 nullableChildColumns.add(sourceChildColumn.getName());              }              for (Iterator<Integer> fkColumnIterator=sourceFK.getContents().keySet().iterator(); fkColumnIterator.hasNext(); ) {                Integer fkColumnKey=fkColumnIterator.next();                DBObject_ForeignKey_Column sourceFKColumn=(DBObject_ForeignKey_Column)sourceFK.getContents().get(fkColumnKey);                if (nullableChildColumns.contains(sourceFKColumn.getColumn()))                 childHasNullableColumns=true;              }              if (!childHasNullableColumns) {                s_logger.log(Level.FINE,"populateNewParent",new Object[]{sourceParentTableName,sourceChildTableName});              }            }          }        }      }    }  }  logResults();}  }
class C{  public void onMissedCallVerificationStarted(){  if (ENABLED) {    trackOpt("Started Missed Call Verification",null);  }}  }
class C{  public boolean isSaveInHistoric(){  Object oo=get_Value(COLUMNNAME_IsSaveInHistoric);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void sendMessage(SearchLoadAndWriteProcessor processor,String regionName,Object key,Object aCallbackArgument,InternalDistributedMember recipient,int timeoutMs,int ttl,int idleTime){  NetLoadRequestMessage msg=new NetLoadRequestMessage();  msg.initialize(processor,regionName,key,aCallbackArgument,timeoutMs,ttl,idleTime);  msg.setRecipient(recipient);  try {    processor.distributionManager.putOutgoingUserData(msg);  } catch (  NotSerializableException e) {    throw new IllegalArgumentException(LocalizedStrings.SearchLoadAndWriteProcessor_MESSAGE_NOT_SERIALIZABLE.toLocalizedString());  }}  }
class C{  public CloudSqlDao(final String url) throws SQLException {  dataSource.setUrl(url);  final String createTableSql="CREATE TABLE IF NOT EXISTS books4 ( id INT NOT NULL " + "AUTO_INCREMENT, author VARCHAR(255), createdBy VARCHAR(255), createdById VARCHAR(255), " + "description VARCHAR(255), publishedDate VARCHAR(255), title VARCHAR(255), imageUrl "+ "VARCHAR(255), PRIMARY KEY (id))";  try (Connection conn=dataSource.getConnection()){    conn.createStatement().executeUpdate(createTableSql);  } }  }
class C{  @SuppressWarnings("unchecked") public Object clone() throws CloneNotSupportedException {  PivotDataset clone=(PivotDataset)super.clone();  clone.data=(List<IndicatorSeries>)ObjectUtilities.deepClone(this.data);  return clone;}  }
class C{  private void showInView(IMarker marker){  BugCollectionAndInstance bci=marker == null ? null : MarkerUtil.findBugCollectionAndInstanceForMarker(marker);  setContent(bci);}  }
class C{  public static boolean equal(Object a,Object b){  return a == b || (a != null && a.equals(b));}  }
class C{  public static void f(String tag,String msg){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg);}  }
class C{  public AcceptLanguage acceptLanguage(){  return acceptLanguage;}  }
class C{  private void validateRSetsRemoved(List<Long> resetIDsToValidate,ConsistencyGroupUID cgToValidate,List<String> volumeWWNs) throws RecoverPointException {  try {    String cgName=functionalAPI.getGroupName(cgToValidate);    logger.info(String.format("Validating that all requested RSets have been removed from RP CG [%s] (%d)",cgName,cgToValidate.getId()));    int rsetDeleteAttempt=0;    while (rsetDeleteAttempt < MAX_WAIT_FOR_RP_DELETE_ATTEMPTS) {      boolean allRSetsDeleted=true;      logger.info(String.format("Validation attempt %d of %d",rsetDeleteAttempt + 1,MAX_WAIT_FOR_RP_DELETE_ATTEMPTS));      ConsistencyGroupSettings groupSettings=functionalAPI.getGroupSettings(cgToValidate);      List<ReplicationSetSettings> replicationSetSettings=groupSettings.getReplicationSetsSettings();      for (      ReplicationSetSettings rset : replicationSetSettings) {        if (resetIDsToValidate.contains(rset.getReplicationSetUID().getId())) {          logger.info(String.format("RSet [%s] (%d) has not been removed yet. Will wait and check again...",rset.getReplicationSetName(),rset.getReplicationSetUID().getId()));          waitForRpOperation();          rsetDeleteAttempt++;          allRSetsDeleted=false;          if (rsetDeleteAttempt == (MAX_WAIT_FOR_RP_DELETE_ATTEMPTS / 2)) {            this.reconnect();          }          break;        }      }      if (allRSetsDeleted) {        logger.info(String.format("All requested RSets have been removed from RP CG [%s] (%d).",cgName,cgToValidate.getId()));        break;      }    }    if (rsetDeleteAttempt >= MAX_WAIT_FOR_RP_DELETE_ATTEMPTS) {      logger.error(String.format("Max attempts reached waiting for requested RSets to be removed from RP CG. " + "Please check RP System."));      throw RecoverPointException.exceptions.failedToDeleteReplicationSet(volumeWWNs.toString(),new Exception("Max attempts reached waiting for requested RSets to be removed from RP CG. " + "Please check RP System."));    }  } catch (  Exception e) {    logger.error(String.format("Exception hit while waiting for all requested RSets to be removed from RP CG."));    throw RecoverPointException.exceptions.failedToDeleteReplicationSet(volumeWWNs.toString(),e);  }}  }
class C{  public static StateListDrawable btnSelector(float radius,int normalColor,int pressColor,int postion){  StateListDrawable bg=new StateListDrawable();  Drawable normal=null;  Drawable pressed=null;  if (postion == 0) {    normal=cornerDrawable(normalColor,new float[]{0,0,0,0,0,0,radius,radius});    pressed=cornerDrawable(pressColor,new float[]{0,0,0,0,0,0,radius,radius});  } else   if (postion == 1) {    normal=cornerDrawable(normalColor,new float[]{0,0,0,0,radius,radius,0,0});    pressed=cornerDrawable(pressColor,new float[]{0,0,0,0,radius,radius,0,0});  } else   if (postion == -1) {    normal=cornerDrawable(normalColor,new float[]{0,0,0,0,radius,radius,radius,radius});    pressed=cornerDrawable(pressColor,new float[]{0,0,0,0,radius,radius,radius,radius});  } else   if (postion == -2) {    normal=cornerDrawable(normalColor,radius);    pressed=cornerDrawable(pressColor,radius);  }  bg.addState(new int[]{-android.R.attr.state_pressed},normal);  bg.addState(new int[]{android.R.attr.state_pressed},pressed);  return bg;}  }
class C{  public void reset() throws IOException {  m_structure=null;  m_Buffer=null;  setRetrieval(NONE);  if ((m_File != null) && (new File(m_File)).isFile()) {    setFile(new File(m_File));  } else   if ((m_URL != null) && !m_URL.equals("http://")) {    setURL(m_URL);  }}  }
class C{  public void clear(){  root=null;  size=0;}  }
class C{  public void removeJob(String jobId){  if (jobMap != null) {    jobMap.remove(jobId);    iterator=jobMap.values().iterator();  }}  }
class C{  public static GeohashCellQuery.Builder geoHashCellQuery(String name,String geohash){  return new GeohashCellQuery.Builder(name,geohash);}  }
class C{  public byte receiveOneByte(){  Log.d(TAG,"receiveOneByte() entrance");  try {    acquireLock();    mServerSocket.receive(mReceivePacket);    Log.d(TAG,"receive: " + (0 + mReceivePacket.getData()[0]));    return mReceivePacket.getData()[0];  } catch (  IOException e) {    e.printStackTrace();  }  return Byte.MIN_VALUE;}  }
class C{  public static void makeDir(String pathString) throws IOException {  makeDir(org.eclipse.core.runtime.Path.fromOSString(pathString));}  }
class C{  public String toQuoted(){  return '\"' + toHuman() + '\"';}  }
class C{  public void forEachSubtract(Allocation ain,Allocation aout){  blend(35,ain,aout);}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  private static Object run(String expr,Map<String,Object> variables){  StellarProcessor processor=new StellarProcessor();  Object ret=processor.parse(expr,null,StellarFunctions.FUNCTION_RESOLVER(),Context.EMPTY_CONTEXT());  byte[] raw=SerDeUtils.toBytes(ret);  Object actual=SerDeUtils.fromBytes(raw,Object.class);  if (ret instanceof StatisticsProvider) {    StatisticsProvider left=(StatisticsProvider)ret;    StatisticsProvider right=(StatisticsProvider)actual;    tolerantAssertEquals(null,left,right);    tolerantAssertEquals(null,left,right,1e-3);    tolerantAssertEquals(null,left,right,1e-3);    tolerantAssertEquals(null,left,right,1e-3);    tolerantAssertEquals(null,left,right,1e-3);    tolerantAssertEquals(null,left,right,1e-3);    tolerantAssertEquals(null,left,right,1e-3);    tolerantAssertEquals(null,left,right,1e-3);    tolerantAssertEquals(null,left,right,1e-3);    tolerantAssertEquals(null,left,right,1e-3);    tolerantAssertEquals(null,left,right,1e-3);    tolerantAssertEquals(null,left,right,1e-3);    for (double d=10.0; d < 100.0; d+=10) {      final double pctile=d;      tolerantAssertEquals(null,left,right,1e-2);    }  }  return ret;}  }
class C{  public boolean isValidFooterPartition(){  return ((this.footer_partition.equals(this.this_partition)) && (this.body_offset == 0) && (this.body_SID == 0));}  }
class C{  @Override public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event){  if (event.getEventType() == AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED) {    event.getText().clear();    int flags=DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_SHOW_YEAR | DateUtils.FORMAT_SHOW_WEEKDAY;    String dateString=DateUtils.formatDateTime(getContext(),mDateMillis,flags);    event.getText().add(dateString);    return true;  }  return super.dispatchPopulateAccessibilityEvent(event);}  }
class C{  public static Border createEmptyBorder(int top,int left,int bottom,int right){  return new EmptyBorder(top,left,bottom,right);}  }
class C{  public BasicArchImpl(){  _id=Defs.NULL_ID;  _name="";}  }
class C{  public static String of(byte[] bytes){  if (bytes == null) {    return null;  }  try {    return UTF_8.newDecoder().decode(ByteBuffer.wrap(bytes)).toString();  } catch (  CharacterCodingException e) {    return toHex(bytes);  }}  }
class C{  public BCH_63_16_11(){  super(11);}  }
class C{  public void resolvePending(){  Chain x=pendingJumps;  pendingJumps=null;  resolve(x,cp);}  }
class C{  public void click(ReadOnlyVector3 loc){  if (currentIndex < 0) {    addWaypoint(loc,-1);  } else {    addWaypoint(loc,currentIndex + 1);    currentIndex++;  }}  }
class C{  double[] performRegression(ExampleSet exampleSet,Attribute[] usedAttributes,Attribute label,double ridge) throws UndefinedParameterError, ProcessStoppedException {  Matrix independent=null;  Matrix dependent=null;  double[] weights=null;  if (usedAttributes.length > 0) {    independent=new Matrix(exampleSet.size(),usedAttributes.length);    dependent=new Matrix(exampleSet.size(),1);    int exampleIndex=0;    Iterator<Example> i=exampleSet.iterator();    weights=new double[exampleSet.size()];    Attribute weightAttribute=exampleSet.getAttributes().getWeight();    while (i.hasNext()) {      Example example=i.next();      int attributeIndex=0;      dependent.set(exampleIndex,0,example.getLabel());      for (      Attribute attribute : usedAttributes) {        checkForStop();        double value=example.getValue(attribute) - exampleSet.getStatistics(attribute,Statistics.AVERAGE);        independent.set(exampleIndex,attributeIndex,value);        attributeIndex++;      }      if (weightAttribute != null) {        weights[exampleIndex]=example.getValue(weightAttribute);      } else {        weights[exampleIndex]=1.0d;      }      exampleIndex++;    }  }  double[] coefficients=new double[usedAttributes.length + 1];  if (usedAttributes.length > 0) {    double[] coefficientsWithoutIntercept=com.rapidminer.tools.math.LinearRegression.performRegression(independent,dependent,weights,ridge);    System.arraycopy(coefficientsWithoutIntercept,0,coefficients,0,usedAttributes.length);  }  coefficients[usedAttributes.length]=exampleSet.getStatistics(label,Statistics.AVERAGE);  for (int i=0; i < usedAttributes.length; i++) {    coefficients[coefficients.length - 1]-=coefficients[i] * exampleSet.getStatistics(usedAttributes[i],Statistics.AVERAGE);  }  return coefficients;}  }
class C{  public Object[] toArray(){  return monitors.toArray();}  }
class C{  public void receiveStoreAndForwardNotificationSessionInvitation(TerminatingStoreAndForwardOneToOneChatNotificationSession session){  if (sLogger.isActivated()) {    sLogger.debug("Handle event S&F notification session invitation");  }  mChatService.receiveOneToOneChatInvitation(session);}  }
class C{  public DividedDateTimeField(RemainderDateTimeField remainderField,DateTimeFieldType type){  super(remainderField.getWrappedField(),type);  int divisor=iDivisor=remainderField.iDivisor;  iDurationField=remainderField.iRangeField;  DateTimeField field=getWrappedField();  int i=field.getMinimumValue();  int min=(i >= 0) ? i / divisor : ((i + 1) / divisor - 1);  int j=field.getMaximumValue();  int max=(j >= 0) ? j / divisor : ((j + 1) / divisor - 1);  iMin=min;  iMax=max;}  }
class C{  public boolean isServerFullyStarted(){  return serverStarted;}  }
class C{  public AboutPanel(SwingSet2 swingset){  this.swingset=swingset;  aboutimage=swingset.createImageIcon("About.jpg","AboutBox.accessible_description");  setOpaque(false);}  }
class C{  public Repositories(String url) throws JAXBException {  _dsDispatcher=new DSDispatcher();  _uriBuilder=new UriBuilder();  List<String> _matrixParamSet;  _matrixParamSet=_uriBuilder.addPathSegment(url);  _matrixParamSet=_uriBuilder.addPathSegment("repositories");  _templateAndMatrixParameterValues=new HashMap<String,Object>();}  }
class C{  public void showProgress(){  hideRecycler();  if (mEmptyId != 0)   mEmpty.setVisibility(View.INVISIBLE);  mProgress.setVisibility(View.VISIBLE);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Sage.durFormatPrettyWithSeconds(getLong(stack));}  }
class C{  public String typeString(String id,boolean abbrev,boolean ret){  String s=null;switch (typeCode) {case TC_NULL:    s="null";  break;case TC_VOID:s="void";break;case TC_BOOLEAN:s="boolean";break;case TC_BYTE:s="byte";break;case TC_CHAR:s="char";break;case TC_SHORT:s="short";break;case TC_INT:s="int";break;case TC_LONG:s="long";break;case TC_FLOAT:s="float";break;case TC_DOUBLE:s="double";break;case TC_ERROR:s="<error>";if (this == tPackage) s="<package>";break;default :s="unknown";}return (id.length() > 0) ? s + " " + id : s;}  }
class C{  public void testSinglePartitionWithThreeStatementPattern(){  final StatementPatternNode spn1=stmtPatternWithVar("x1");  final StatementPatternNode spn2=stmtPatternWithVar("x2");  final StatementPatternNode spn3Opt=stmtPatternWithVarOptional("x3");  final List<IGroupMemberNode> nodes=new ArrayList<IGroupMemberNode>();  nodes.add(spn1);  nodes.add(spn2);  nodes.add(spn3Opt);  final GroupNodeVarBindingInfoMap bindingInfo=new GroupNodeVarBindingInfoMap(nodes,statisAnalysisForNodes(nodes),null);  final ASTJoinGroupPartitions partitions=new ASTJoinGroupPartitions(nodes,bindingInfo,new HashSet<IVariable<?>>());  assertEquals(1,partitions.getPartitionList().size());  assertEquals(3,partitions.extractNodeList(true).size());  assertTrue(partitions.extractNodeList(true).contains(spn1));  assertTrue(partitions.extractNodeList(true).contains(spn2));  assertTrue(partitions.extractNodeList(true).contains(spn3Opt));  ASTJoinGroupPartition partition=partitions.getPartitionList().get(0);  assertEquals(3,partition.extractNodeList(true).size());  assertTrue(partition.extractNodeList(true).contains(spn1));  assertTrue(partition.extractNodeList(true).contains(spn2));  assertEquals(2,partition.nonOptionalNonMinusNodes.size());  assertTrue(partition.nonOptionalNonMinusNodes.contains(spn1));  assertTrue(partition.nonOptionalNonMinusNodes.contains(spn2));  assertTrue(partition.optionalOrMinus.equals(spn3Opt));  assertEquals(2,partition.definitelyProduced.size());  assertTrue(partition.definitelyProduced.contains(Var.var("x1")));  assertTrue(partition.definitelyProduced.contains(Var.var("x2")));}  }
class C{  public void cleanup(){  XDropTargetEventProcessor.reset();  if (targetXWindow != null) {    notifyProtocolListener(targetXWindow,0,0,DnDConstants.ACTION_NONE,null,MouseEvent.MOUSE_EXITED);  }  if (sourceWindow != 0) {    XToolkit.awtLock();    try {      XErrorHandlerUtil.WITH_XERROR_HANDLER(XErrorHandler.IgnoreBadWindowHandler.getInstance());      XlibWrapper.XSelectInput(XToolkit.getDisplay(),sourceWindow,sourceWindowMask);      XErrorHandlerUtil.RESTORE_XERROR_HANDLER();    }  finally {      XToolkit.awtUnlock();    }  }  sourceWindow=0;  sourceWindowMask=0;  sourceProtocolVersion=0;  sourceActions=DnDConstants.ACTION_NONE;  sourceFormats=null;  trackSourceActions=false;  userAction=DnDConstants.ACTION_NONE;  sourceX=0;  sourceY=0;  targetXWindow=null;}  }
class C{  public static void main(String[] args){  JFrame frame=new JFrame(TreeDemo.class.getAnnotation(DemoProperties.class).value());  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.getContentPane().add(new TreeDemo());  frame.setPreferredSize(new Dimension(800,600));  frame.pack();  frame.setLocationRelativeTo(null);  frame.setVisible(true);}  }
class C{  public void analogWrite(int pin,int value){  if (!isConnected()) {    onError(OneSheeldError.DEVICE_NOT_CONNECTED);    return;  } else   if (isUpdatingFirmware()) {    onError(OneSheeldError.FIRMWARE_UPDATE_IN_PROGRESS);    return;  }  if (isPinDebuggingEnabled)   Log.i("Device " + this.name + ": Analog write "+ value+ " to pin "+ pin+ ".");  if (pin >= 20 || pin < 0)   throw new IncorrectPinException("The specified pin number is incorrect, are you sure you specified it correctly?");  byte[] writeData={SET_PIN_MODE,(byte)pin,PWM,(byte)(ANALOG_MESSAGE | (pin & 0x0F)),(byte)(value & 0x7F),(byte)(value >> 7)};synchronized (sendingDataLock) {    write(writeData);  }}  }
class C{  public StackedXYAreaRenderer2(XYToolTipGenerator labelGenerator,XYURLGenerator urlGenerator){  super(labelGenerator,urlGenerator);  this.roundXCoordinates=true;}  }
class C{  @Override protected void addArgument(Object argument){  getOwner().addObject(argument);}  }
class C{  public static void sendPushMessageAsync(String token,String body,String deviceKey,boolean production,String googleAuthKey,String iosCertificateURL,String iosCertificatePassword){  NetworkManager.getInstance().addToQueue(createPushMessage(token,body,production,googleAuthKey,iosCertificateURL,iosCertificatePassword,"","","","",1,deviceKey));}  }
class C{  public void notifyHorizontalEdgeReached(int startX,int finalX,int overX){  mScrollerX.notifyEdgeReached(startX,finalX,overX);}  }
class C{  private void checkSortMissingFunction(final String field,final String low,final String high){  assertU(adoc("id","0"));  assertU(adoc("id","1",field,low));  assertU(adoc("id","2",field,high));  assertU(commit());  assertQ(req("q","*:*","fl","e:exists(" + field + ")","sort","id asc"),"//result/doc[1]/bool[@name='e'][.='false']","//result/doc[2]/bool[@name='e'][.='true']","//result/doc[3]/bool[@name='e'][.='true']");}  }
class C{  public TextView renderTextView(Context context){  Settings settings=new Settings(context);  String textSize=settings.getTextSize();  TextView canvas=new TextView(context);  canvas.setAutoLinkMask(Linkify.ALL);  canvas.setLinksClickable(true);  canvas.setLinkTextColor(COLOR_BLUE);  canvas.setText(this.render(context));  if (textSize.equals("small")) {    canvas.setTextSize(TypedValue.COMPLEX_UNIT_SP,10);  } else   if (textSize.equals("large")) {    canvas.setTextSize(TypedValue.COMPLEX_UNIT_SP,18);  } else {    canvas.setTextSize(TypedValue.COMPLEX_UNIT_SP,14);  }  canvas.setTypeface(Typeface.SANS_SERIF);  canvas.setTextColor(COLOR_DEFAULT);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {    setupViewForHoneycombAndLater(canvas);  }  return canvas;}  }
class C{  @DSComment("constructor") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.407 -0500",hash_original_method="DB07395F523937B25016D60988A66D69",hash_generated_method="DB07395F523937B25016D60988A66D69") Bundle(Parcel parcelledData){  readFromParcel(parcelledData);}  }
class C{  protected ST(){  if (STGroup.trackCreationEvents) {    if (debugState == null)     debugState=new ST.DebugState();    debugState.newSTEvent=new ConstructionEvent();  }}  }
class C{  @Override public String validate(Player player,RPAction action,ActionData data){  String playerName=action.get(targetAttribute);  Player targetPlayer=SingletonRepository.getRuleProcessor().getPlayer(playerName);  final String reply=targetPlayer.getIgnore(player.getName());  if (reply == null) {    return null;  }  if (reply.length() == 0) {    return Grammar.suffix_s(playerName) + " mind is not attuned to yours, so you cannot reach them.";  } else {    return playerName + " is ignoring you: " + reply;  }}  }
class C{  public static Typeface ostrichDashed(Context context){  return FontSourceProcessor.process(R.raw.ostrich_dashed,context);}  }
class C{  public static boolean compareResults(SolrServer controlServer,SolrServer cloudServer) throws SolrServerException {  return compareResults(controlServer,cloudServer,null,null);}  }
class C{  private void saveConfigurationFiles(List<String> configurationFiles,String handleId,StartRequest request){  int i=0;  if (configurationFiles == null || configurationFiles.size() == 0) {    return;  }  for (  String filename : configurationFiles) {    InputStream inputStream=request.getFile("configurationFileData_" + i,true);    fileManager.saveFile(handleId,filename,inputStream);    i++;  }}  }
class C{  public boolean next() throws SQLException {  if (cursorPos < 0 || cursorPos >= numRows + 1) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.invalidcp").toString());  }  boolean ret=this.internalNext();  notifyCursorMoved();  return ret;}  }
class C{  public void paintText(SynthContext ss,Graphics g,String text,Rectangle bounds,int mnemonicIndex){  paintText(ss,g,text,bounds.x,bounds.y,mnemonicIndex);}  }
class C{  public void push(float value) throws IOException {  print("push",new String[]{"float " + value});}  }
class C{  public void initFinish(){  if (DisplayLogic == null)   DisplayLogic="";  if (DefaultValue == null)   DefaultValue="";  if (FieldGroup == null)   FieldGroup="";  if (FieldGroupType == null)   FieldGroupType="";  if (Description == null)   Description="";  if (Help == null)   Help="";  if (Callout == null)   Callout="";  if (ReadOnlyLogic == null)   ReadOnlyLogic="";  if (MandatoryLogic == null)   MandatoryLogic="";  if (DisplayType.isLookup(displayType) && IsDisplayed) {    try {      lookupInfo=MLookupFactory.getLookupInfo(ctx,WindowNo,AD_Column_ID,displayType,Env.getLanguage(ctx),ColumnName,AD_Reference_Value_ID,IsParent,ValidationCode);      lookupInfo.InfoFactoryClass=this.InfoFactoryClass;    } catch (    Exception e) {      CLogger.get().log(Level.SEVERE,"No LookupInfo for " + ColumnName,e);      displayType=DisplayType.ID;    }  }}  }
class C{  public void replace(int offset,int length,View[] views){  super.replace(offset,length,views);  invalidateGrid();}  }
class C{  protected WifiP2pServiceInfo(List<String> queryList){  if (queryList == null) {    throw new IllegalArgumentException("query list cannot be null");  }  mQueryList=queryList;}  }
class C{  public void add(String key,Tool item,int index){  int orientation=getOrientation();  boolean hOrient=orientation == SwingConstants.HORIZONTAL;  item.setOrientation(orientation);  Container face=item.getFace();  if (face != null) {    face.addComponentListener(this);    items.put(key.intern(),item);    if (autoSpace) {      index*=2;    }    if (hOrient) {      c.weightx=0;      c.gridx=getNextAvailableIndex(index);      c.gridy=0;      c.anchor=GridBagConstraints.WEST;    } else {      c.weighty=0;      c.gridx=0;      c.gridy=getNextAvailableIndex(index);      c.anchor=GridBagConstraints.NORTH;    }    gridbag.setConstraints(face,c);    add(face);    if (filler == null) {      if (hOrient) {        c.gridx=getNextAvailableIndex(MAX_INDEXES);        c.anchor=GridBagConstraints.EAST;        c.weightx=1;      } else {        c.gridy=getNextAvailableIndex(MAX_INDEXES);        c.anchor=GridBagConstraints.SOUTH;        c.weighty=1;      }      filler=new JLabel("");      gridbag.setConstraints(filler,c);      add(filler);    }    if (autoSpace) {      JLabel l=new JLabel(" ");      gridbag.setConstraints(l,c);      add(l);    }  }  setVisibility();  firePropertyChange(MembershipProperty,null,items);}  }
class C{  public Builder to(Date to){  this.to=to;  return this;}  }
class C{  public void writeRawVarint64(long value) throws IOException {  while (true) {    if ((value & ~0x7FL) == 0) {      writeRawByte((int)value);      return;    } else {      writeRawByte(((int)value & 0x7F) | 0x80);      value>>>=7;    }  }}  }
class C{  public HttpRecoverableException(){  super();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object o=stack.pop();  if (o instanceof MetaImage) {    Object src=((MetaImage)o).getSource();    if (src instanceof java.io.File)     return src; else     return null;  }  return null;}  }
class C{  public static String randomRealisticUnicodeString(Random r,int minLength,int maxLength){  final int end=nextInt(r,minLength,maxLength);  final int block=r.nextInt(blockStarts.length);  StringBuilder sb=new StringBuilder();  for (int i=0; i < end; i++)   sb.appendCodePoint(nextInt(r,blockStarts[block],blockEnds[block]));  return sb.toString();}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder("[CDPStatusBlock: OFFSET=0x");  sb.append(Long.toHexString(offset));  sb.append(", SIZE=0x");  sb.append(Long.toHexString(size));  sb.append(", unknownDatapoints=");  sb.append(unknownDatapoints);  sb.append(", value=");  sb.append(value);  sb.append(", primaryValue=");  sb.append(primary_value);  sb.append(", secondaryValue=");  sb.append(secondary_value);  sb.append("]");  return sb.toString();}  }
class C{  private int heightHint(String text,int maxWidth,int maxHeight){  Point fontPoint=gc.textExtent(text);  int rows=(fontPoint.x / (maxWidth - 50)) + 1;  return Math.min(rows * fontPoint.y,maxHeight);}  }
class C{  static String add_escapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case '\b':      retval.append("\\b");    continue;case '\t':  retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public static void evolve_symmetric(RealVariable v1,RealVariable v2,double distributionIndex,boolean swap){  double y1, y2, betaq, beta, alpha, rand;  double x1=v1.getValue();  double x2=v2.getValue();  double lb=v1.getLowerBound();  double ub=v1.getUpperBound();  if (Math.abs(x1 - x2) > Settings.EPS) {    if (x2 > x1) {      y2=x2;      y1=x1;    } else {      y2=x1;      y1=x2;    }    if ((y1 - lb) > (ub - y2)) {      beta=1 + (2 * (ub - y2) / (y2 - y1));    } else {      beta=1 + (2 * (y1 - lb) / (y2 - y1));    }    beta=1.0 / beta;    alpha=2.0 - Math.pow(beta,distributionIndex + 1.0);    rand=PRNG.nextDouble();    if (rand <= 1.0 / alpha) {      alpha=alpha * rand;      betaq=Math.pow(alpha,1.0 / (distributionIndex + 1.0));    } else {      alpha=alpha * rand;      alpha=1.0 / (2.0 - alpha);      betaq=Math.pow(alpha,1.0 / (distributionIndex + 1.0));    }    x1=0.5 * ((y1 + y2) - betaq * (y2 - y1));    x2=0.5 * ((y1 + y2) + betaq * (y2 - y1));    if (x1 < lb) {      x1=lb;    } else     if (x1 > ub) {      x1=ub;    }    if (x2 < lb) {      x2=lb;    } else     if (x2 > ub) {      x2=ub;    }    if (swap && PRNG.nextBoolean()) {      double temp=x1;      x1=x2;      x2=temp;    }    v1.setValue(x1);    v2.setValue(x2);  }}  }
class C{  Iterator<AbstractPage> childIterator(){  return new ChildIterator();}  }
class C{  @Override public void put(final T dataItem) throws IOException {  try {    final int rndRangesToUpdateCount=rangesConfig.getRandomCount();    final List<ByteRange> ranges=rangesConfig.getFixedByteRanges();    if (rndRangesToUpdateCount > 0) {      dataItem.scheduleRandomUpdates(rndRangesToUpdateCount);      if (sizeLimit < submSize.addAndGet(dataItem.getUpdatingRangesSize())) {        shutdown();      }    } else     if (ranges != null) {      if (ranges.size() == 1) {        final ByteRange range=ranges.get(0);        if (range.getBeg() == dataItem.getSize()) {          final long augmentSize=range.getEnd() - range.getBeg();          dataItem.scheduleAppend(augmentSize);          if (sizeLimit < submSize.addAndGet(augmentSize)) {            shutdown();          }        } else {          throw new NotImplementedException();        }      } else {        throw new NotImplementedException();      }    } else {      if (sizeLimit < submSize.addAndGet(dataItem.getSize())) {        shutdown();      }    }  } catch (  final IllegalArgumentException e) {    LogUtil.exception(LOG,Level.WARN,e,"Failed to schedule {} for the data item",loadType.name().toLowerCase());  }  super.put(dataItem);}  }
class C{  private static synchronized void gj_divide(double[][] A,int i,int j,int m){  for (int q=j + 1; q < m; q++) {    A[i][q]/=A[i][j];  }  A[i][j]=1;}  }
class C{  protected void discoverInitiator(Host host,Initiator initiator,HostFibreChannelHba hba){  setInitiatorHost(initiator,host);  initiator.setProtocol(Protocol.FC.name());  initiator.setInitiatorNode(SanUtils.normalizeWWN(hba.nodeWorldWideName));  initiator.setInitiatorPort(SanUtils.normalizeWWN(hba.portWorldWideName));  initiator.setIsManualCreation(false);  initiator.setLabel(SanUtils.normalizeWWN(hba.portWorldWideName));  save(initiator);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void testViewConstraintFromColumnExpression() throws SQLException {  deleteDb("view");  Connection conn=getConnection("view");  Statement stat=conn.createStatement();  stat.execute("create table t0(id1 int primary key CHECK ((ID1 % 2) = 0))");  stat.execute("create table t1(id2 int primary key CHECK ((ID2 % 1) = 0))");  stat.execute("insert into t0 values(0)");  stat.execute("insert into t1 values(1)");  stat.execute("create view v1 as select * from t0,t1");  ResultSet rs=stat.executeQuery("select * from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = 'V1'");  assertTrue(rs.next());  assertEquals("ID1",rs.getString("COLUMN_NAME"));  assertEquals("((ID1 % 2) = 0)",rs.getString("CHECK_CONSTRAINT"));  assertTrue(rs.next());  assertEquals("ID2",rs.getString("COLUMN_NAME"));  assertEquals("((ID2 % 1) = 0)",rs.getString("CHECK_CONSTRAINT"));  stat.execute("create view v2 as select ID1 key1,ID2 key2 from t0,t1");  rs=stat.executeQuery("select * from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = 'V2'");  assertTrue(rs.next());  assertEquals("KEY1",rs.getString("COLUMN_NAME"));  assertEquals("((KEY1 % 2) = 0)",rs.getString("CHECK_CONSTRAINT"));  assertTrue(rs.next());  assertEquals("KEY2",rs.getString("COLUMN_NAME"));  assertEquals("((KEY2 % 1) = 0)",rs.getString("CHECK_CONSTRAINT"));  stat.execute("create view v3 as select ID1 + 1 ID1, ID2 + 1 ID2 from t0,t1");  rs=stat.executeQuery("select * from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = 'V3'");  assertTrue(rs.next());  assertEquals("ID1",rs.getString("COLUMN_NAME"));  assertEquals("",rs.getString("CHECK_CONSTRAINT"));  assertTrue(rs.next());  assertEquals("ID2",rs.getString("COLUMN_NAME"));  assertEquals("",rs.getString("CHECK_CONSTRAINT"));  conn.close();  deleteDb("view");}  }
class C{  private void addCrashView(){  Log.i(TAG,"addCrashView");  if (appCrashView != null && !isCrashViewVisible) {    isCrashViewVisible=true;    setCrashViewPosition();    windowManager.addView(appCrashView,params);  }}  }
class C{  public FiltersAggregationBuilder otherBucketKey(String otherBucketKey){  this.otherBucketKey=otherBucketKey;  return this;}  }
class C{  public static Gas register(Gas gas){  if (gas == null) {    return null;  }  registeredGasses.add(gas);  return getGas(gas.getName());}  }
class C{  @Bean @ConditionalOnMissingBean(Scheduler.class) public Scheduler fixedDelayScheduler(){  return new EveryTenSecondsScheduler(aggregator);}  }
class C{  public TLongFloatHashMap(int initialCapacity,TLongHashingStrategy strategy){  super(initialCapacity,strategy);}  }
class C{  public MapBuilder<K,V> withUnit(Unit unit){  if (memoryManager != null) {    throw new IllegalStateException("Can not change unit after the memory manager initalized");  }  this.unit=unit;  return this;}  }
class C{  Stylesheet popStylesheet(){  if (!m_stylesheetLocatorStack.isEmpty())   m_stylesheetLocatorStack.pop();  if (!m_stylesheets.isEmpty())   m_lastPoppedStylesheet=(Stylesheet)m_stylesheets.pop();  return m_lastPoppedStylesheet;}  }
class C{  public static JFrame showTreeWindow(Tree t,String labelField){  JPrefuseTree tree=new JPrefuseTree(t,labelField);  String title=t.toString();  if (t instanceof VisualTree) {    title=((VisualTree)t).getGroup() + " " + title;  }  JFrame frame=new JFrame(title);  frame.getContentPane().add(new JScrollPane(tree));  frame.pack();  frame.setVisible(true);  return frame;}  }
class C{  private void appendMembers(){  context.checkThread();  if (isOpen()) {    appender.appendEntries();  }}  }
class C{  public HGTransactionManager(HGTransactionFactory factory){  this.factory=factory;}  }
class C{  public static void main(String[] args){  runFileLoader(new ArffLoader(),args);}  }
class C{  public static CallSite altMetafactory(MethodHandles.Lookup caller,String invokedName,MethodType invokedType,Object... args){  throw new UnsupportedOperationException();}  }
class C{  public final boolean isEnabled(){  return mEnabled;}  }
class C{  private static String findCommonPrefix(String a,String b){  int minLength=Math.min(a.length(),b.length());  for (int i=0; i < minLength; i++) {    if (a.toLowerCase().charAt(i) != b.toLowerCase().charAt(i)) {      return a.substring(0,i);    }  }  return a.substring(0,minLength);}  }
class C{  @Deprecated public static int floatToEdits(float minimumSimilarity,int termLen){  if (minimumSimilarity >= 1f) {    return (int)Math.min(minimumSimilarity,LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE);  } else   if (minimumSimilarity == 0.0f) {    return 0;  } else {    return Math.min((int)((1D - minimumSimilarity) * termLen),LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE);  }}  }
class C{  protected synchronized void initInterface(Iterator<OMEvent> it,boolean setSelected){  if (logger.isLoggable(Level.FINE)) {    logger.fine("initing interface");  }  DefaultListModel listModel=new DefaultListModel();  int selectedIndex=-1;  int curIndex=0;  while (it.hasNext()) {    OMEvent curEvent=it.next();    listModel.addElement(curEvent);    if (lastSelectedEvent == curEvent && lastSelectedEvent != null) {      selectedIndex=curIndex;    }    curIndex++;  }  if (logger.isLoggable(Level.FINE)) {    logger.fine("added " + curIndex + " events to list");  }  if (displayList == null) {    if (logger.isLoggable(Level.FINE)) {      logger.fine("Creating gui components");    }    JPanel wrapper=new JPanel();    GridBagLayout gridbag=new GridBagLayout();    GridBagConstraints c=new GridBagConstraints();    wrapper.setLayout(gridbag);    c.fill=GridBagConstraints.BOTH;    c.weighty=1f;    c.weightx=1f;    c.gridwidth=GridBagConstraints.REMAINDER;    c.insets=new Insets(0,2,0,2);    if (ttmanager == null) {      ttmanager=ToolTipManager.sharedInstance();      ttmanager.setEnabled(true);      ttmanager.setInitialDelay(1);    } else     if (displayList != null) {      ttmanager.unregisterComponent(displayList);    }    displayList=new JList(listModel);    displayList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);    displayList.addListSelectionListener(this);    displayList.addMouseListener(this);    displayList.addMouseMotionListener(this);    displayList.setCellRenderer(getEventCellRenderer());    ttmanager.registerComponent(displayList);    JScrollPane listScrollPane=new JScrollPane(displayList);    listScrollPane.setPreferredSize(new Dimension(prefWidth,prefHeight));    listScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);    listScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);    gridbag.setConstraints(listScrollPane,c);    wrapper.add(listScrollPane);    c.fill=GridBagConstraints.HORIZONTAL;    c.weighty=0f;    detailSpace=new JLabel("");    detailSpacePanel=new JPanel(new BorderLayout());    detailSpacePanel.setBackground(new Color(0xffffcc));    detailSpacePanel.setVisible(false);    detailSpacePanel.add(detailSpace,BorderLayout.CENTER);    gridbag.setConstraints(detailSpacePanel,c);    wrapper.add(detailSpacePanel);    JComponent ecp=getEventControlPanel();    gridbag.setConstraints(ecp,c);    wrapper.add(ecp);    add(wrapper,BorderLayout.CENTER);    validate();    repaint();    if (logger.isLoggable(Level.FINE)) {      logger.fine("Done creating gui components");    }  } else {    setListModel(listModel);    displayList.revalidate();    displayList.repaint();  }  if (logger.isLoggable(Level.FINE)) {    logger.fine("done initing");  }  if (selectedIndex >= 0 && setSelected) {    displayList.setSelectedIndex(selectedIndex);  } else {    lastSelectedEvent=null;  }}  }
class C{  public static QosSpecification updateQos(VirtualPool virtualPool,QosSpecification qosSpecification,DbClient dbClient){  _log.debug("Updating Qos Specification, id: " + qosSpecification.getId());  StringMap specs=qosSpecification.getSpecs();  String protocols=virtualPool.getProtocols().toString();  if (!qosSpecification.getLabel().equals(virtualPool.getLabel())) {    qosSpecification.setLabel(virtualPool.getLabel());  }  if (!qosSpecification.getName().equals(QOS_NAME + virtualPool.getLabel())) {    qosSpecification.setName(QOS_NAME + virtualPool.getLabel());  }  if (virtualPool.getSupportedProvisioningType() != null) {    specs.put(SPEC_PROVISIONING_TYPE,virtualPool.getSupportedProvisioningType());  }  if (protocols != null) {    specs.put(SPEC_PROTOCOL,protocols.substring(1,protocols.length() - 1));  }  if (virtualPool.getDriveType() != null) {    specs.put(SPEC_DRIVE_TYPE,virtualPool.getDriveType());  }  if (VirtualPoolService.getSystemType(virtualPool) != null) {    specs.put(SPEC_SYSTEM_TYPE,VirtualPoolService.getSystemType(virtualPool));  }  if (virtualPool.getMultivolumeConsistency() != null) {    specs.put(SPEC_MULTI_VOL_CONSISTENCY,Boolean.toString(virtualPool.getMultivolumeConsistency()));  }  if (virtualPool.getArrayInfo() != null && virtualPool.getArrayInfo().get(LABEL_RAID_LEVEL) != null) {    specs.put(SPEC_RAID_LEVEL,virtualPool.getArrayInfo().get(LABEL_RAID_LEVEL).toString());  }  if (virtualPool.getExpandable() != null) {    specs.put(SPEC_EXPENDABLE,Boolean.toString(virtualPool.getExpandable()));  }  if (virtualPool.getNumPaths() != null) {    specs.put(SPEC_MAX_SAN_PATHS,Integer.toString(virtualPool.getNumPaths()));  }  if (virtualPool.getMinPaths() != null) {    specs.put(SPEC_MIN_SAN_PATHS,Integer.toString(virtualPool.getMinPaths()));  }  if (virtualPool.getMaxNativeContinuousCopies() != null) {    specs.put(SPEC_MAX_BLOCK_MIRRORS,Integer.toString(virtualPool.getMaxNativeContinuousCopies()));  }  if (virtualPool.getPathsPerInitiator() != null) {    specs.put(SPEC_PATHS_PER_INITIATOR,Integer.toString(virtualPool.getPathsPerInitiator()));  }  if (virtualPool.getHighAvailability() != null) {    specs.put(SPEC_HIGH_AVAILABILITY,virtualPool.getHighAvailability());  }  if (virtualPool.getMaxNativeSnapshots() != null) {    if (virtualPool.getMaxNativeSnapshots().equals(UNLIMITED_SNAPSHOTS)) {      specs.put(SPEC_MAX_SNAPSHOTS,LABEL_UNLIMITED_SNAPSHOTS);    } else     if (virtualPool.getMaxNativeSnapshots().equals(DISABLED_SNAPSHOTS)) {      specs.put(SPEC_MAX_SNAPSHOTS,LABEL_DISABLED_SNAPSHOTS);    } else {      specs.put(SPEC_MAX_SNAPSHOTS,Integer.toString(virtualPool.getMaxNativeSnapshots()));    }  }  dbClient.updateObject(qosSpecification);  return qosSpecification;}  }
class C{  protected void updateSprings(){  if (springs.size() > 0) {    for (int i=numIterations; i > 0; i--) {      for (      VerletSpring2D s : springs) {        s.update(i == 1);      }    }  }}  }
class C{  public static String tailSystemLog(File logFile,final int numLines) throws IOException {  if (logFile == null || logFile.equals(new File(""))) {    return null;  }  int maxBuffer=65500;  long fileLength=logFile.length();  if (fileLength == 0) {    return null;  }  byte[] buffer=(fileLength > maxBuffer) ? new byte[maxBuffer] : new byte[(int)fileLength];  int readSize=buffer.length;  RandomAccessFile f=new RandomAccessFile(logFile,"r");  int linesRead=0;  long seekPosition=fileLength - readSize;  StringBuilder returnStr=new StringBuilder();  StringBuilder workingString=new StringBuilder();  String separator=System.getProperty("line.separator");  while (linesRead < numLines) {    f.seek(seekPosition);    f.read(buffer,0,readSize);    workingString.insert(0,new String(buffer,0,readSize));    String[] splits=workingString.toString().split("\\r?\\n");    if (splits.length > 1) {      for (int i=splits.length - 1; i > 0; i--) {        returnStr.insert(0,separator).insert(0,splits[i]);        if (++linesRead >= numLines) {          break;        }      }    }    if (seekPosition == 0 && linesRead < numLines) {      returnStr.insert(0,separator).insert(0,splits[0]);      break;    }    workingString=new StringBuilder(splits[0]);    if (readSize < seekPosition) {      seekPosition=seekPosition - readSize;    } else {      readSize=(int)seekPosition;      seekPosition=0;    }  }  f.close();  returnStr.insert(0,separator).insert(0,"SystemLog:");  return returnStr.toString();}  }
class C{  public void displayImage(String url,ImageView image){  ImageAware imageAware=new ImageViewAware(image,false);  loader.displayImage(url,imageAware);}  }
class C{  public BaseShareCollectionPage(final BaseShareCollectionResponse response,final IShareCollectionRequestBuilder builder){  super(response.value,builder);}  }
class C{  public void windowClosing(WindowEvent e){  m_Viewer.saveSize();}  }
class C{  static public void showDepthWarningXYZ(String method){  PGraphics.showDepthWarningXYZ(method);}  }
class C{  public void addListener(final BreakpointManagerListener listener){  listeners.addListener(Preconditions.checkNotNull(listener,"IE00723: listener argument can not be null"));}  }
class C{  public SimpleSetupPanel(Experiment exp){  this();  setExperiment(exp);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:33.659 -0500",hash_original_method="A570339C802CFE5901F930FCAA1CB116",hash_generated_method="7F8B0D286435B57612BBCABE86B8E8D3") public static boolean isNaN(double d){  return ((d) == 1);}  }
class C{  @Override public void onDestroyFloatView(View floatView){  ((ImageView)floatView).setImageDrawable(null);  mFloatBitmap.recycle();  mFloatBitmap=null;}  }
class C{  private void checkIfAllowedToCreate(Product product) throws OperationNotPermittedException {  if (!product.isAllowedToCreateReview(getLoggedInUser())) {    throw new OperationNotPermittedException("Your organization must be subscribed and you must either have a usage license or be administrator.");  }}  }
class C{  @Override public void debug(String msg){  if (logger.isLoggable(Level.FINE)) {    log(SELF,Level.FINE,msg,null);  }}  }
class C{  public void addCircle(final float x,final float y,final float radius){  if (this.isDisposed()) {    SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);  }  this.addArc(x,y,radius,radius,0,360);}  }
class C{  public static MeanVarianceMinMax[] newArray(int dimensionality){  MeanVarianceMinMax[] arr=new MeanVarianceMinMax[dimensionality];  for (int i=0; i < dimensionality; i++) {    arr[i]=new MeanVarianceMinMax();  }  return arr;}  }
class C{  public static boolean equipWithMoney(final Player player,final int amount){  return equipWithStackableItem(player,"money",amount);}  }
class C{  public static void main(String[] args){  runFilter(new RemoveByName(),args);}  }
class C{  public final boolean isAccept(int state){  return accept[state];}  }
class C{  public boolean isPsuedoVar(){  java.lang.String ns=m_qname.getNamespaceURI();  if ((null != ns) && ns.equals(RedundentExprEliminator.PSUEDOVARNAMESPACE)) {    if (m_qname.getLocalName().startsWith("#"))     return true;  }  return false;}  }
class C{  private static <E extends FType>boolean isUserDefinedType(FTypeRef typeRef,Class<E> clazz){  if (typeRef == null)   return false;  FType type=getActualDerived(typeRef);  if (type != null) {    if (clazz.isInstance(type)) {      return true;    }  }  return false;}  }
class C{  private void createStorageProviderForVPlexSystem(StorageSystem vplexSystem){  StorageProvider vplexMgmntSvr=new StorageProvider();  URI vplexMgmntSvrURI=URIUtil.createId(StorageProvider.class);  vplexMgmntSvr.setId(vplexMgmntSvrURI);  vplexMgmntSvr.setInterfaceType(StorageProvider.InterfaceType.vplex.name());  vplexMgmntSvr.setIPAddress(vplexSystem.getIpAddress());  vplexMgmntSvr.setPortNumber(vplexSystem.getPortNumber());  vplexMgmntSvr.setUseSSL(Boolean.TRUE);  vplexMgmntSvr.setUserName(vplexSystem.getUsername());  vplexMgmntSvr.setPassword(vplexSystem.getPassword());  vplexMgmntSvr.setLabel(vplexSystem.getLabel());  vplexMgmntSvr.setVersionString(vplexSystem.getFirmwareVersion());  vplexMgmntSvr.setCompatibilityStatus(vplexSystem.getCompatibilityStatus());  vplexMgmntSvr.setRegistrationStatus(vplexSystem.getRegistrationStatus());  vplexMgmntSvr.setConnectionStatus(StorageProvider.ConnectionStatus.CONNECTED.name());  StringSet managedStorageSystems=new StringSet();  managedStorageSystems.add(vplexSystem.getId().toString());  vplexMgmntSvr.setStorageSystems(managedStorageSystems);  dbClient.createObject(vplexMgmntSvr);  StringSet vplexMgmntServers=new StringSet();  vplexMgmntServers.add(vplexMgmntSvrURI.toString());  vplexSystem.setProviders(vplexMgmntServers);  vplexSystem.setActiveProviderURI(vplexMgmntSvrURI);  dbClient.updateAndReindexObject(vplexSystem);}  }
class C{  private void clearMap(){  String[] keys;  try {    keys=prefs.keys();    for (int i=0; i < keys.length; i++) {      String string=keys[i];      if (string.startsWith("CONTROL_MAPPING")) {        prefs.remove(string);      }    }  } catch (  BackingStoreException ex) {    Logger.getLogger(ControlMap.class.getName()).error("{0}",ex);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Label(int geomIndex,int onLoc){  elt[0]=new TopologyLocation(Location.NONE);  elt[1]=new TopologyLocation(Location.NONE);  elt[geomIndex].setLocation(onLoc);}  }
class C{  public void resetViews(Runnable before){  this.resetViews(before,true);}  }
class C{  public void unregisterRemoteControlDisplay(IRemoteControlDisplay rcd){  if (DEBUG_RC)   Log.d(TAG,"<<< unregisterRemoteControlDisplay(" + rcd + ")");synchronized (mRCStack) {    if (rcd == null) {      return;    }    boolean displayWasPluggedIn=false;    final Iterator<DisplayInfoForServer> displayIterator=mRcDisplays.iterator();    while (displayIterator.hasNext() && !displayWasPluggedIn) {      final DisplayInfoForServer di=(DisplayInfoForServer)displayIterator.next();      if (di.mRcDisplay.asBinder().equals(rcd.asBinder())) {        displayWasPluggedIn=true;        di.release();        displayIterator.remove();      }    }    if (displayWasPluggedIn) {      final Iterator<RemoteControlStackEntry> stackIterator=mRCStack.iterator();      while (stackIterator.hasNext()) {        final RemoteControlStackEntry rcse=stackIterator.next();        if (rcse.mRcClient != null) {          try {            rcse.mRcClient.unplugRemoteControlDisplay(rcd);          } catch (          RemoteException e) {            Log.e(TAG,"Error disconnecting remote control display to client: ",e);          }        }      }    } else {      if (DEBUG_RC)       Log.w(TAG,"  trying to unregister unregistered RCD");    }  }}  }
class C{  public Properties loadProperties(String resource) throws Exception {  Properties p=new Properties();  InputStream is=getClass().getResourceAsStream(resource);  p.load(new InputStreamReader(new BufferedInputStream(is)));  return p;}  }
class C{  public static void main(String[] args) throws IgniteException {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Cache API example started.");    CacheConfiguration<Integer,String> cfg=new CacheConfiguration<>();    cfg.setCacheMode(CacheMode.PARTITIONED);    cfg.setName(CACHE_NAME);    try (IgniteCache<Integer,String> cache=ignite.getOrCreateCache(cfg)){      atomicMapOperations(cache);    }  finally {      ignite.destroyCache(CACHE_NAME);    }  } }  }
class C{  public static boolean isAnnotation(int flags){  return (flags & AccAnnotation) != 0;}  }
class C{  public static boolean routeHasStopSequenceLoop(TransitRoute transitRoute){  Set<String> parentFacilities=new HashSet<>();  for (  TransitRouteStop stop : transitRoute.getStops()) {    if (!parentFacilities.add(getParentId(stop.getStopFacility().getId().toString()))) {      return true;    }  }  return false;}  }
class C{  CSVParser(char separator,char quotechar,char escape,boolean strictQuotes,boolean ignoreLeadingWhiteSpace,boolean ignoreQuotations,CSVReaderNullFieldIndicator nullFieldIndicator){  if (anyCharactersAreTheSame(separator,quotechar,escape)) {    throw new UnsupportedOperationException("The separator, quote, and escape characters must be different!");  }  if (separator == NULL_CHARACTER) {    throw new UnsupportedOperationException("The separator character must be defined!");  }  this.separator=separator;  this.quotechar=quotechar;  this.escape=escape;  this.strictQuotes=strictQuotes;  this.ignoreLeadingWhiteSpace=ignoreLeadingWhiteSpace;  this.ignoreQuotations=ignoreQuotations;  this.nullFieldIndicator=nullFieldIndicator;}  }
class C{  public static File applyPath(Iterable<? extends File> paths,String relFile){  File path=searchPaths(paths,relFile);  if (path != null) {    return new File(path,relFile);  }  return null;}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  public double[] distributionForInstance(Instance instance) throws Exception {  if (m_ZeroR != null) {    return m_ZeroR.distributionForInstance(instance);  }  if (m_Train.numInstances() == 0) {    throw new Exception("No training instances!");  }  m_NNSearch.addInstanceInfo(instance);  int k=m_Train.numInstances();  if ((!m_UseAllK && (m_kNN < k))) {    k=m_kNN;  }  Instances neighbours=m_NNSearch.kNearestNeighbours(instance,k);  double distances[]=m_NNSearch.getDistances();  if (m_Debug) {    System.out.println("Test Instance: " + instance);    System.out.println("For " + k + " kept "+ neighbours.numInstances()+ " out of "+ m_Train.numInstances()+ " instances.");  }  if (k > distances.length)   k=distances.length;  if (m_Debug) {    System.out.println("Instance Distances");    for (int i=0; i < distances.length; i++) {      System.out.println("" + distances[i]);    }  }  double bandwidth=distances[k - 1];  if (bandwidth <= 0) {    for (int i=0; i < distances.length; i++)     distances[i]=1;  } else {    for (int i=0; i < distances.length; i++)     distances[i]=distances[i] / bandwidth;  }  for (int i=0; i < distances.length; i++) {switch (m_WeightKernel) {case LINEAR:      distances[i]=1.0001 - distances[i];    break;case EPANECHNIKOV:  distances[i]=3 / 4D * (1.0001 - distances[i] * distances[i]);break;case TRICUBE:distances[i]=Math.pow((1.0001 - Math.pow(distances[i],3)),3);break;case CONSTANT:distances[i]=1;break;case INVERSE:distances[i]=1.0 / (1.0 + distances[i]);break;case GAUSS:distances[i]=Math.exp(-distances[i] * distances[i]);break;}}if (m_Debug) {System.out.println("Instance Weights");for (int i=0; i < distances.length; i++) {System.out.println("" + distances[i]);}}double sumOfWeights=0, newSumOfWeights=0;for (int i=0; i < distances.length; i++) {double weight=distances[i];Instance inst=(Instance)neighbours.instance(i);sumOfWeights+=inst.weight();newSumOfWeights+=inst.weight() * weight;inst.setWeight(inst.weight() * weight);}for (int i=0; i < neighbours.numInstances(); i++) {Instance inst=neighbours.instance(i);inst.setWeight(inst.weight() * sumOfWeights / newSumOfWeights);}m_Classifier.buildClassifier(neighbours);if (m_Debug) {System.out.println("Classifying test instance: " + instance);System.out.println("Built base classifier:\n" + m_Classifier.toString());}return m_Classifier.distributionForInstance(instance);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.VARIABLE_ENVIRONMENT_ELEMENT___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS:    return appliesOnlyToBlockScopedElements();}return super.eInvoke(operationID,arguments);}  }
class C{  @Deprecated public static CommitParams create(@NotNull String container,@NotNull String repository){  return new CommitParams().withContainer(container).withRepository(repository);}  }
class C{  public static ShardPath loadShardPath(ESLogger logger,NodeEnvironment env,ShardId shardId,Settings indexSettings) throws IOException {  final String indexUUID=indexSettings.get(IndexMetaData.SETTING_INDEX_UUID,IndexMetaData.INDEX_UUID_NA_VALUE);  final Path[] paths=env.availableShardPaths(shardId);  Path loadedPath=null;  for (  Path path : paths) {    ShardStateMetaData load=ShardStateMetaData.FORMAT.loadLatestState(logger,path);    if (load != null) {      if (load.indexUUID.equals(indexUUID) == false && IndexMetaData.INDEX_UUID_NA_VALUE.equals(load.indexUUID) == false) {        logger.warn("{} found shard on path: [{}] with a different index UUID - this shard seems to be leftover from a different index with the same name. Remove the leftover shard in order to reuse the path with the current index",shardId,path);        throw new IllegalStateException(shardId + " index UUID in shard state was: " + load.indexUUID+ " expected: "+ indexUUID+ " on shard path: "+ path);      }      if (loadedPath == null) {        loadedPath=path;      } else {        throw new IllegalStateException(shardId + " more than one shard state found");      }    }  }  if (loadedPath == null) {    return null;  } else {    final Path dataPath;    final Path statePath=loadedPath;    if (NodeEnvironment.hasCustomDataPath(indexSettings)) {      dataPath=env.resolveCustomLocation(indexSettings,shardId);    } else {      dataPath=statePath;    }    logger.debug("{} loaded data path [{}], state path [{}]",shardId,dataPath,statePath);    return new ShardPath(NodeEnvironment.hasCustomDataPath(indexSettings),dataPath,statePath,indexUUID,shardId);  }}  }
class C{  protected void cropImage(){  if (mOptions.noOutputImage) {    setResult(null,null,1);  } else {    Uri outputUri=getOutputUri();    mCropImageView.saveCroppedImageAsync(outputUri,mOptions.outputCompressFormat,mOptions.outputCompressQuality,mOptions.outputRequestWidth,mOptions.outputRequestHeight,mOptions.outputRequestSizeOptions);  }}  }
class C{  @Nullable public static BashFunctionDef findBroadestFunctionScope(PsiElement startElement){  BashFunctionDef lastValidScope=null;  PsiElement element=PsiTreeUtil.getStubOrPsiParent(startElement);  while (element != null) {    if (element instanceof BashFunctionDef) {      lastValidScope=(BashFunctionDef)element;    }    element=PsiTreeUtil.getStubOrPsiParent(element);    if (element == null) {      return lastValidScope;    }  }  return null;}  }
class C{  public Sprite createFancyTextBox(final String text,final Color textColor,final int width,final int leftMargin,final int rightMargin,final int topMargin,final int bottomMargin,final BackgroundPainter background){  List<AttributedCharacterIterator> lines=createFormattedLines(text,textColor,width);  int imageWidth=getMaxPixelWidth(lines) + leftMargin + rightMargin;  final int imageHeight=LINE_HEIGHT * lines.size() + topMargin + bottomMargin;  final GraphicsConfiguration gc=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();  final BufferedImage image=gc.createCompatibleImage(imageWidth,imageHeight,TransparencyMode.TRANSPARENCY);  final Graphics2D g2d=image.createGraphics();  g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  g2d.setComposite(AlphaComposite.Src);  background.paint(g2d,imageWidth,imageHeight);  g2d.setComposite(AlphaComposite.SrcOver);  drawTextLines(g2d,lines,textColor,leftMargin,topMargin);  g2d.dispose();  return new ImageSprite(image);}  }
class C{  protected void startClients(ChannelPipelineFactory pipelineFactory){  final ClientBootstrap bootstrap=new ClientBootstrap(new NioClientSocketChannelFactory(bossExecutor,workerExecutor));  bootstrap.setOption("child.reuseAddr",true);  bootstrap.setOption("child.keepAlive",true);  bootstrap.setOption("child.tcpNoDelay",true);  bootstrap.setOption("child.sendBufferSize",SEND_BUFFER_SIZE);  bootstrap.setOption("child.connectTimeoutMillis",CONNECT_TIMEOUT);  bootstrap.setPipelineFactory(pipelineFactory);  clientBootstrap=bootstrap;  ScheduledExecutorService ses=syncManager.getThreadPool().getScheduledExecutor();  reconnectTask=new SingletonTask(ses,new ConnectTask());  reconnectTask.reschedule(0,TimeUnit.SECONDS);}  }
class C{  public boolean isSingleAuthenticator(){  Debug.logInfo(this.getClass().getName() + " Authenticator isSingleAuthenticator()",module);  return false;}  }
class C{  @Override public boolean supportsCatalogsInTableDefinitions(){  debugCodeCall("supportsCatalogsInTableDefinitions");  return true;}  }
class C{  public AccountMetaDataPair(final AccountInfo account,final AccountMetaData metaData){  super("account","meta",account,metaData);}  }
class C{  public Object withBuilder(FactoryBuilderSupport builder,Closure closure){  if (builder == null || closure == null) {    return null;  }  Object result=null;  Object previousContext=getProxyBuilder().getContext();  FactoryBuilderSupport previousProxyBuilder=localProxyBuilder.get();  try {    localProxyBuilder.set(builder);    closure.setDelegate(builder);    result=closure.call();  } catch (  RuntimeException e) {    localProxyBuilder.set(previousProxyBuilder);    if (getProxyBuilder().getContexts().contains(previousContext)) {      Map<String,Object> context=getProxyBuilder().getContext();      while (context != null && context != previousContext) {        getProxyBuilder().popContext();        context=getProxyBuilder().getContext();      }    }    throw e;  } finally {    localProxyBuilder.set(previousProxyBuilder);  }  return result;}  }
class C{  public Builder visible(boolean visible){  this.visible=visible;  return this;}  }
class C{  public String testNextToken() throws IOException {  Token t=super.nextToken();  return Integer.toString(t.type) + ";" + t.content+ ";";}  }
class C{  protected boolean beforeSave(boolean newRecord){  MSystem system=MSystem.get(getCtx());  if (system.getName().equals("?") || system.getUserName().equals("?")) {    log.saveError("Error","Define System first");    return false;  }  return true;}  }
class C{  public CProcessListPanel(final ProcessList processList){  super(new BorderLayout());  m_processList=processList;  final CProcessListModel model=new CProcessListModel(processList);  m_sorter=new TableRowSorter<CProcessListModel>(model);  m_table=new JTable(model);  m_table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);  m_table.setRowSorter(m_sorter);  final JScrollPane scrollPane=new JScrollPane(m_table);  scrollPane.setBorder(new TitledBorder("Please select a process to debug"));  add(scrollPane);  setPreferredSize(new Dimension(200,200));}  }
class C{  @Override protected void initGUI(){  java.util.List<String> classnames;  super.initGUI();  m_TabbedPane=new JTabbedPane();  add(m_TabbedPane,BorderLayout.CENTER);  m_Tabs.add(new BasicSetup());  m_Tabs.add(new ExpertSetup());  classnames=AbstractExperimenterTab.getTabs();  for (  String classname : classnames) {    try {      AbstractExperimenterTab tab=(AbstractExperimenterTab)Class.forName(classname).newInstance();      if (tab.getClass() == BasicSetup.class)       continue;      if (tab.getClass() == ExpertSetup.class)       continue;      if (tab instanceof LogTab)       continue;      m_Tabs.add(tab);    } catch (    Exception e) {      System.err.println("Failed to instantiate Experimenter tab: " + classname);      e.printStackTrace();    }  }  m_LogTab=new LogTab();  m_Tabs.add(m_LogTab);  for (  AbstractExperimenterTab tab : m_Tabs) {    tab.setOwner(this);    m_TabbedPane.addTab(tab.getTitle(),tab);  }  m_StatusBar=new StatusBar();  add(m_StatusBar,BorderLayout.SOUTH);}  }
class C{  public String globalInfo(){  return "Visualize performance charts (such as ROC).";}  }
class C{  public Builder preProcessor(BitmapProcessor preProcessor){  this.preProcessor=preProcessor;  return this;}  }
class C{  public void removeVertex(Vertex vertex){  Vertex managed=findById(vertex.getId());  if (managed == null) {    return;  }  this.entityManager.remove(managed);  if (vertex.hasData()) {    this.verticiesByData.remove(vertex.getData());    if (vertex.getData() instanceof Data) {      this.entityManager.remove(findData((Data)vertex.getData()));    }  }}  }
class C{  protected Vec4 geodeticToEllipsoidal(Angle latitude,Angle longitude,double metersElevation){  if (latitude == null || longitude == null) {    String message=Logging.getMessage("nullValue.LatitudeOrLongitudeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double cosLat=Math.cos(latitude.radians);  double sinLat=Math.sin(latitude.radians);  double cosLon=Math.cos(longitude.radians);  double sinLon=Math.sin(longitude.radians);  double rpm=this.equatorialRadius / Math.sqrt(1.0 - this.es * sinLat * sinLat);  double x=(rpm + metersElevation) * cosLat * sinLon;  double y=(rpm * (1.0 - this.es) + metersElevation) * sinLat;  double z=(rpm + metersElevation) * cosLat * cosLon;  return new Vec4(x,y,z);}  }
class C{  protected ForStatementImpl(){  super();}  }
class C{  public PKCS9Attributes(DerInputStream in) throws IOException {  this(in,false);}  }
class C{  private static void applyTypeface(ViewGroup viewGroup,TypefaceCollection typefaceCollection){  for (int i=0; i < viewGroup.getChildCount(); i++) {    View childView=viewGroup.getChildAt(i);    if (childView instanceof ViewGroup) {      applyTypeface((ViewGroup)childView,typefaceCollection);    } else {      applyForView(childView,typefaceCollection);    }  }}  }
class C{  public java.util.ArrayList<TreeNode<E>> path(E e){  java.util.ArrayList<TreeNode<E>> list=new java.util.ArrayList<>();  TreeNode<E> current=root;  while (current != null) {    list.add(current);    if (e.compareTo(current.element) < 0) {      current=current.left;    } else     if (e.compareTo(current.element) > 0) {      current=current.right;    } else     break;  }  return list;}  }
class C{  public boolean isCellBasedAccessibility(){  return cellBasedAccessibility;}  }
class C{  protected Command dropFilter(DatapathId sw,OFPacketIn pi,FloodlightContext cntx){  Command result=Command.CONTINUE;  OFPort inPort=(pi.getVersion().compareTo(OFVersion.OF_12) < 0 ? pi.getInPort() : pi.getMatch().get(MatchField.IN_PORT));  if (isAllowed(sw,inPort) == false) {    if (log.isTraceEnabled()) {      log.trace("Ignoring packet because of topology " + "restriction on switch={}, port={}",sw.getLong(),inPort.getPortNumber());      result=Command.STOP;    }  }  return result;}  }
class C{  public static double mapValueFromRangeToRange(double value,double fromLow,double fromHigh,double toLow,double toHigh){  double fromRangeSize=fromHigh - fromLow;  double toRangeSize=toHigh - toLow;  double valueScale=(value - fromLow) / fromRangeSize;  return toLow + (valueScale * toRangeSize);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.207 -0400",hash_original_method="9026BE33E3D40906CA316E83E271B1B8",hash_generated_method="CFB1D0EEE0FAD6485D92FB638ECDBAE6") private Writer initWriter(File file,Charset encoding,boolean append) throws IOException {  boolean fileExistedAlready=file.exists();  OutputStream stream=null;  Writer writer=null;  try {    stream=new FileOutputStream(file.getAbsolutePath(),append);    writer=new OutputStreamWriter(stream,Charsets.toCharset(encoding));  } catch (  IOException ex) {    IOUtils.closeQuietly(writer);    IOUtils.closeQuietly(stream);    FileUtils.deleteQuietly(lockFile);    if (fileExistedAlready == false) {      FileUtils.deleteQuietly(file);    }    throw ex;  }catch (  RuntimeException ex) {    IOUtils.closeQuietly(writer);    IOUtils.closeQuietly(stream);    FileUtils.deleteQuietly(lockFile);    if (fileExistedAlready == false) {      FileUtils.deleteQuietly(file);    }    throw ex;  }  return writer;}  }
class C{  @Override public Range findRangeBounds(XYDataset dataset){  if (dataset != null) {    return DatasetUtilities.findStackedRangeBounds((TableXYDataset)dataset);  } else {    return null;  }}  }
class C{  private CModuleLoader(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-01-27 09:54:12.398 -0500",hash_original_method="954FE01203E8E0B89D8DDB8D29119B01",hash_generated_method="EC6AADF753D5966CC946C3ECD22E2424") public void put(int key,E value){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (i < mSize && mValues[i] == DELETED) {      mKeys[i]=key;      mValues[i]=value;      return;    }    if (mGarbage && mSize >= mKeys.length) {      gc();      i=~binarySearch(mKeys,0,mSize,key);    }    if (mSize >= mKeys.length) {      int n=idealIntArraySize(mSize + 1);      int[] nkeys=new int[n];      Object[] nvalues=new Object[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  @Override protected Object createJobInstance(final TriggerFiredBundle bundle){  try {    final JobDataMap jobDataMap=bundle.getJobDetail().getJobDataMap();    final SchedulerContext schedulerContext=SchedulerRepository.getInstance().lookup(jobDataMap.getString("moduleName") + SCHEDULER_NAME_SUFFIX).getContext();    final XmlWebApplicationContext ctx=(XmlWebApplicationContext)schedulerContext.get(APP_CTX_NAME_PREFIX + jobDataMap.getString("moduleName"));    final Object job=ctx.getBean(jobDataMap.getString("jobBeanName"),bundle.getJobDetail().getJobClass());    final BeanWrapper bw=new BeanWrapperImpl(job);    if (isEligibleForPropertyPopulation(bw.getWrappedInstance())) {      final MutablePropertyValues pvs=new MutablePropertyValues();      if (schedulerContext != null) {        pvs.addPropertyValues(schedulerContext);      }      pvs.addPropertyValues(jobDataMap);      pvs.addPropertyValues(bundle.getTrigger().getJobDataMap());      if (ignoredUnknownProperties != null) {        for (        final String ignoredUnknownPropertie : ignoredUnknownProperties) {          final String propName=ignoredUnknownPropertie;          if (pvs.contains(propName) && !bw.isWritableProperty(propName)) {            pvs.removePropertyValue(propName);          }        }        bw.setPropertyValues(pvs);      } else {        bw.setPropertyValues(pvs,true);      }    }    return bw.getWrappedInstance();  } catch (  BeansException e) {    LOGGER.error("Error occurred while initializing Scheduler Job Beans, cause : ",e);    throw new ApplicationRuntimeException("Error occurred while initializing Scheduler Job Beans, cause : ",e);  }catch (  SchedulerException e) {    LOGGER.error("Error occurred while initializing Scheduler Job Beans, cause : ",e);    throw new ApplicationRuntimeException("Error occurred while initializing Scheduler, cause : ",e);  }}  }
class C{  public SQLRecoverableException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  @Override public void actionPerformed(ActionEvent event){  String command=event.getActionCommand();  if (command.equals("TickUnitValue")) {    validateTickUnit();  } else {    super.actionPerformed(event);  }}  }
class C{  public static void addDocumentPartitioners(Document document,Map<String,DocumentPartitioner> partitioners){  Iterator<String> e=partitioners.keySet().iterator();  while (e.hasNext()) {    String partitioning=e.next();    DocumentPartitioner partitioner=partitioners.get(partitioning);    partitioner.connect(document);    document.setDocumentPartitioner(partitioning,partitioner);  }  partitioners.clear();}  }
class C{  protected void debugCodeCall(String methodName){  if (trace.isDebugEnabled()) {    trace.debugCode(getTraceObjectName() + "." + methodName+ "();");  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public IItemRequest buildRequest(){  return buildRequest(getOptions());}  }
class C{  public PartitionNotAvailableException(String message){  super(message);}  }
class C{  @Override public void cancel() throws SQLException {  try {    debugCodeCall("cancel");    checkClosed();    CommandInterface c=executingCommand;    try {      if (c != null) {        c.cancel();        cancelled=true;      }    }  finally {      setExecutingStatement(null);    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){  try {    PackageManager pm=context.getPackageManager();    List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);    if (handlers == null || handlers.size() == 0) {      return false;    }    for (    ResolveInfo resolveInfo : handlers) {      IntentFilter filter=resolveInfo.filter;      if (filter == null)       continue;      if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;      if (resolveInfo.activityInfo == null)       continue;      return true;    }  } catch (  RuntimeException e) {    Log.e(TAG,"Runtime exception while getting specialized handlers");  }  return false;}  }
class C{  private Node searchWord(NodeArray children,String word,int depth,Node parentNode){  final int wordLength=word.length();  final char c=word.charAt(depth);  final int childrenLength=children.length;  Node childNode=null;  boolean found=false;  for (int i=0; i < childrenLength; i++) {    childNode=children.data[i];    if (childNode.code == c) {      found=true;      break;    }  }  if (!found) {    childNode=new Node();    childNode.code=c;    childNode.parent=parentNode;    children.add(childNode);  }  if (wordLength == depth + 1) {    childNode.terminal=true;    return childNode;  }  if (childNode.children == null) {    childNode.children=new NodeArray();  }  return searchWord(childNode.children,word,depth + 1,childNode);}  }
class C{  public static IStatus createError(String message){  return createStatus(IStatus.ERROR,0,message,null);}  }
class C{  public static Location fromTimeZone(TimeZone timeZone){  if (timeZone == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Location","fromTimeZone","The time zone is null"));  }  double millisPerHour=3.6e6;  int offsetMillis=timeZone.getRawOffset();  int offsetHours=(int)(offsetMillis / millisPerHour);  double lat=timeZoneLatitudes.get(offsetHours,0);  double lon=180 * offsetHours / 12;  return new Location(lat,lon);}  }
class C{  private void writeObjectToJsonFile(Object object,File jsonFile,Map<String,Object> args) throws IOException {  FileOutputStream outputStream=new FileOutputStream(jsonFile);  JsonWriter jsonWriter=new JsonWriter(outputStream,args);  jsonWriter.write(object);  outputStream.close();  jsonWriter.close();}  }
class C{  private void initFind(){  log.config("");  for (int i=0; i < m_findFields.length; i++) {    GridField mField=m_findFields[i];    if (mField.getVO().displayType == DisplayType.YesNo) {      GridFieldVO vo=mField.getVO();      GridFieldVO ynvo=vo.clone(vo.ctx,vo.WindowNo,vo.TabNo,vo.AD_Window_ID,vo.AD_Tab_ID,vo.tabReadOnly);      ynvo.IsDisplayed=true;      ynvo.displayType=DisplayType.List;      ynvo.AD_Reference_Value_ID=AD_REFERENCE_ID_YESNO;      ynvo.lookupInfo=MLookupFactory.getLookupInfo(ynvo.ctx,ynvo.WindowNo,ynvo.AD_Column_ID,ynvo.displayType,Env.getLanguage(ynvo.ctx),ynvo.ColumnName,ynvo.AD_Reference_Value_ID,ynvo.IsParent,ynvo.ValidationCode);      ynvo.lookupInfo.InfoFactoryClass=ynvo.InfoFactoryClass;      GridField ynfield=new GridField(ynvo);      m_findFields[i]=ynfield;      mField=ynfield;    }    if (mField.getVO().displayType == DisplayType.Button) {      GridFieldVO vo=mField.getVO();      if (vo.AD_Reference_Value_ID > 0) {        GridFieldVO postedvo=vo.clone(vo.ctx,vo.WindowNo,vo.TabNo,vo.AD_Window_ID,vo.AD_Tab_ID,vo.tabReadOnly);        postedvo.IsDisplayed=true;        postedvo.displayType=DisplayType.List;        postedvo.lookupInfo=MLookupFactory.getLookupInfo(postedvo.ctx,postedvo.WindowNo,postedvo.AD_Column_ID,postedvo.displayType,Env.getLanguage(postedvo.ctx),postedvo.ColumnName,postedvo.AD_Reference_Value_ID,postedvo.IsParent,postedvo.ValidationCode);        postedvo.lookupInfo.InfoFactoryClass=postedvo.InfoFactoryClass;        GridField postedfield=new GridField(postedvo);        m_findFields[i]=postedfield;        mField=postedfield;      }    }    if (mField.isSelectionColumn())     addSelectionColumn(mField);    m_targetFields.put(new Integer(mField.getAD_Column_ID()),mField);  }  valueLabel.setVisible(hasValue);  valueField.setVisible(hasValue);  if (hasValue)   valueField.addActionListener(this);  docNoLabel.setVisible(hasDocNo);  docNoField.setVisible(hasDocNo);  if (hasDocNo)   docNoField.addActionListener(this);  nameLabel.setVisible(hasName);  nameField.setVisible(hasName);  if (hasName)   nameField.addActionListener(this);  descriptionLabel.setVisible(hasDescription);  descriptionField.setVisible(hasDescription);  if (hasDescription)   descriptionField.addActionListener(this);  m_total=getNoOfRecords(null,false);  setStatusDB(m_total);  statusBar.setStatusLine("");  tabbedPane.addChangeListener(this);  confirmPanelA.getOKButton().setToolTipText(Msg.getMsg(Env.getCtx(),"QueryEnter"));  confirmPanelA.getCancelButton().setToolTipText(Msg.getMsg(Env.getCtx(),"QueryCancel"));  confirmPanelS.getOKButton().setToolTipText(Msg.getMsg(Env.getCtx(),"QueryEnter"));  confirmPanelS.getCancelButton().setToolTipText(Msg.getMsg(Env.getCtx(),"QueryCancel"));}  }
class C{  public XMLEditorKit(XMLContext context){  super();  factory=new XMLViewFactory();  if (context == null) {    this.context=new XMLContext();  } else {    this.context=context;  }}  }
class C{  public static int readHttpHeader(InputStream sckInputStream,byte[] buffer,int byteOffset) throws IOException {  int count=0;  byte last=0;  byte current=0;  boolean isEscapeOnce=false;  boolean isEscapeTwiceTry=false;  buffer[byteOffset + count++]=last=readByte(sckInputStream);  while (true) {    current=readByte(sckInputStream);    buffer[byteOffset + count++]=current;    if (!isEscapeTwiceTry && last == LF && current == CR) {      isEscapeOnce=true;    } else     if (isEscapeOnce) {      isEscapeOnce=false;      isEscapeTwiceTry=true;    } else     if (isEscapeTwiceTry) {      if (last == LF && current == CR) {        break;      }      isEscapeTwiceTry=false;    }    last=current;  }  return count;}  }
class C{  public final Vec3D crossSelf(Vec3D v){  final float cx=y * v.z - v.y * z;  final float cy=z * v.x - v.z * x;  z=x * v.y - v.x * y;  y=cy;  x=cx;  return this;}  }
class C{  public boolean isMandatory(){  return m_mandatory;}  }
class C{  private void disconnected(Bundle data){  clientHandle=null;  IMqttToken token=removeMqttToken(data);  if (token != null) {    ((MqttTokenAndroid)token).notifyComplete();  }  if (callback != null) {    callback.connectionLost(null);  }}  }
class C{  public BitSet(){  bits=ALL_CLEARED;}  }
class C{  public double sum2(){  double s2=0;  for (int i=0; i < size(); i++) {    s2+=V[i] * V[i];  }  return s2;}  }
class C{  public boolean has(String nodeUrl){  for (  MuninNode node : this.children) {    if (node.getUrl().equals(nodeUrl))     return true;  }  return false;}  }
class C{  public DSubjectKeyIdentifier(JDialog parent,byte[] value,PublicKey subjectPublicKey) throws IOException {  super(parent);  setTitle(res.getString("DSubjectKeyIdentifier.Title"));  this.subjectPublicKey=subjectPublicKey;  initComponents();  prepopulateWithValue(value);}  }
class C{  public static AztecCode encode(byte[] data){  return encode(data,DEFAULT_EC_PERCENT,DEFAULT_AZTEC_LAYERS);}  }
class C{  public static boolean isAmbiguous(String str){  return null != ambiguousHashTable.get(str);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  boolean state;  doc=(Document)load("staff",false);  domImpl=doc.getImplementation();  state=domImpl.hasFeature("xml","2.0");  assertTrue("domimplementationFeaturexmlVersion2Assert",state);}  }
class C{  public PurityResult scan(Tree node,PurityResult p){  return node == null ? p : node.accept(this,p);}  }
class C{  public CrowdSourcePage(){  crowdSourceForm=new CrowdSourceForm("crowdSourceForm");  add(crowdSourceForm);  crowdJobForm=new CrowdJobForm("crowdJobForm");  crowdJobForm.setVisible(false);  add(crowdJobForm);  crowdDocumentListForm=new CrowdDocumentListForm("crowdDocumentListForm");  crowdDocumentListForm.setVisible(false);  add(crowdDocumentListForm);  goldDocumentListForm=new GoldDocumentListForm("goldDocumentListForm");  goldDocumentListForm.setVisible(false);  add(goldDocumentListForm);  crowdJobDetailForm=new CrowdProjectDetailForm("crowdJobDetailForm");  crowdJobDetailForm.setVisible(false);  add(crowdJobDetailForm);}  }
class C{  public CheckerInfo(final String label,final Class<? extends SourceChecker> checker,final String qualsPath){  this(label,checker.getCanonicalName(),qualsPath);}  }
class C{  public boolean isSupportedMethod(SootMethod method){  if (safe_methods.contains(method) || spec_methods.contains(method))   return true;  if (spec_methods.containsPoly(method))   return true;  return safe_methods.containsPoly(method);}  }
class C{  protected void initialize(){  if (getUnsortedModel() == null) {    m_SortedIndices=null;    m_DisplayIndices=null;    m_ColumnIsNumeric=null;  } else {    initializeSortIndices();    initializeColumnTypes();    m_DisplayIndices=null;    m_SortColumn=-1;    m_SortAscending=true;    getUnsortedModel().addTableModelListener(this);    if (m_SearchString != null)     search(m_SearchString,m_RegExpSearch);  }}  }
class C{  public void sample() throws RemoteException {  assert updateBuffer != null;  ((PerfDataBuffer)pdb).sample(updateBuffer);}  }
class C{  public JSONObject put(String key,long value) throws JSONException {  this.put(key,new Long(value));  return this;}  }
class C{  public void forget(){  table.clear();}  }
class C{  public static String stripComments(String s,ParseResult result){  int commentStart=s.indexOf(";");  if (commentStart != -1) {    s=s.substring(0,commentStart);    result.commentStartPos=commentStart;    int index=s.indexOf(" , ");    while (index > -1) {      result.commentStartPos-=2;      index=s.indexOf(" , ",index + 3);    }  }  return s.trim();}  }
class C{  public ReusableInternalIdToLongIterator initializeLeftInternalIdToLongIterator(){  return new NodeMetadataInternalIdToLongIterator(getRightNodesToIndexBiMap(),getRightNodesToMetadataMap(),edgeTypeMask);}  }
class C{  private void processAnsiCommand_L(){}  }
class C{  private int calculateMenuMargin(){  WindowManager wm=(WindowManager)getSystemService(Context.WINDOW_SERVICE);  Display display=wm.getDefaultDisplay();  Point size=new Point();  display.getSize(size);  int height=size.y;  return (int)Math.round(height * MENU_MARGIN_RELATIVE_MODIFIER);}  }
class C{  @SuppressWarnings("rawtypes") private void modifyGroupClones(StorageSystem storageSystem,List<URI> clones,int operationValue) throws Exception {  callEMCRefreshIfRequired(_dbClient,_helper,storageSystem,clones);  List<Volume> cloneVols=_dbClient.queryObject(Volume.class,clones);  List<CIMObjectPath> syncPaths=new ArrayList<CIMObjectPath>();  for (  Volume clone : cloneVols) {    URI sourceUri=clone.getAssociatedSourceVolume();    Volume sourceObj=_dbClient.queryObject(Volume.class,sourceUri);    CIMObjectPath syncObject=_cimPath.getStorageSynchronized(storageSystem,sourceObj,storageSystem,clone);    CIMInstance instance=_helper.checkExists(storageSystem,syncObject,false,false);    if (instance != null) {      syncPaths.add(syncObject);    } else {      log.error("Storage synchronized instance is not available for clone {}",clone.getLabel());      throw DeviceControllerException.exceptions.synchronizationInstanceNull(clone.getLabel());    }  }  CIMArgument[] modifyCGCloneInput=_helper.getModifyListReplicaInputArguments(syncPaths.toArray(new CIMObjectPath[]{}),operationValue);  _helper.callModifyListReplica(storageSystem,modifyCGCloneInput);}  }
class C{  public Boolean isRTPMulticast(){  return rtpMulticast;}  }
class C{  private String createTempindexDir(SolrCore core,String tmpIdxDirName){  String tmpIdxDir=core.getDataDir() + tmpIdxDirName;  return tmpIdxDir;}  }
class C{  private void updateConsistencyGroup(){  log.info("Migrating consistency group");  DbClient dbClient=getDbClient();  List<URI> cgURIs=dbClient.queryByType(BlockConsistencyGroup.class,true);  Iterator<BlockConsistencyGroup> cgs=dbClient.queryIterativeObjects(BlockConsistencyGroup.class,cgURIs);  while (cgs.hasNext()) {    BlockConsistencyGroup cg=cgs.next();    cg.setArrayConsistency(true);    dbClient.updateObject(cg);  }}  }
class C{  public OFNiciraVendorData(){}  }
class C{  public static double P_ExactMatch(int Y[][],int Ypred[][]){  return 1. - L_ZeroOne(Y,Ypred);}  }
class C{  public synchronized String toLines(){  StringBuilder buff=new StringBuilder();  for (  Entry<Object,Object> e : new TreeMap<Object,Object>(this).entrySet()) {    buff.append(e.getKey()).append('=').append(e.getValue()).append('\n');  }  return buff.toString();}  }
class C{  private static int bufToHash(@NoLength char[] buf,int len){  int hash2=0;  int hash=len;  hash<<=5;  hash+=buf[0] - 0x60;  int j=len;  for (int i=0; i < 4 && j > 0; i++) {    j--;    hash<<=5;    hash+=buf[j] - 0x60;    hash2<<=6;    hash2+=buf[i] - 0x5F;  }  return hash ^ hash2;}  }
class C{  public static org.oscm.internal.vo.VOParameter convertToUp(org.oscm.vo.VOParameter oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOParameter newVO=new org.oscm.internal.vo.VOParameter();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setParameterDefinition(convertToUp(oldVO.getParameterDefinition()));  newVO.setValue(oldVO.getValue());  newVO.setConfigurable(oldVO.isConfigurable());  return newVO;}  }
class C{  @Override public void endElement(String namespaceURI,String localName,String qName){  if (this.root instanceof CategoryDatasetHandler) {    CategoryDatasetHandler handler=(CategoryDatasetHandler)this.root;    Iterator iterator=this.values.getKeys().iterator();    while (iterator.hasNext()) {      Comparable key=(Comparable)iterator.next();      Number value=this.values.getValue(key);      handler.addItem(this.seriesKey,key,value);    }    this.root.popSubHandler();  }}  }
class C{  public void testMoveDirectoryDestinationRootSourceMissing() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,SUBSUBDIR),null);  create(igfs,null,null);  igfs.rename(SUBSUBDIR,IgfsPath.ROOT);  checkExist(igfs,DIR,SUBDIR);  checkExist(igfs,igfsSecondary,new IgfsPath("/" + SUBSUBDIR.name()));  checkNotExist(igfs,igfsSecondary,SUBSUBDIR);}  }
class C{  public boolean isSetVersionedValue(){  return this.versionedValue != null;}  }
class C{  public void testMalformedForLength(){  assertNotNull(CoderResult.malformedForLength(Integer.MAX_VALUE));  assertNotNull(CoderResult.malformedForLength(1));  assertSame(CoderResult.malformedForLength(1),CoderResult.malformedForLength(1));  assertNotSame(CoderResult.malformedForLength(1),CoderResult.unmappableForLength(1));  assertNotSame(CoderResult.malformedForLength(2),CoderResult.malformedForLength(1));  try {    CoderResult.malformedForLength(-1);    fail("Should throw IllegalArgumentException");  } catch (  IllegalArgumentException ex) {  }  try {    CoderResult.malformedForLength(0);    fail("Should throw IllegalArgumentException");  } catch (  IllegalArgumentException ex) {  }}  }
class C{  public void addElement(Element e){  v.addElement(e);}  }
class C{  public static Long[] valuesOf(long[] array){  Long[] dest=new Long[array.length];  for (int i=0; i < array.length; i++) {    dest[i]=Long.valueOf(array[i]);  }  return dest;}  }
class C{  public static long intArrayToLong(final int[] src,final int srcPos,final long dstInit,final int dstPos,final int nInts){  if ((src.length == 0 && srcPos == 0) || 0 == nInts) {    return dstInit;  }  if ((nInts - 1) * 32 + dstPos >= 64) {    throw new IllegalArgumentException("(nInts-1)*32+dstPos is greather or equal to than 64");  }  long out=dstInit;  int shift=0;  for (int i=0; i < nInts; i++) {    shift=i * 32 + dstPos;    final long bits=((0xffffffffL & src[i + srcPos]) << shift);    final long mask=0xffffffffL << shift;    out=(out & ~mask) | bits;  }  return out;}  }
class C{  private final void releaseDTMXRTreeFrags(){  if (m_DTMXRTreeFrags == null) {    return;  }  final Iterator iter=(m_DTMXRTreeFrags.values()).iterator();  while (iter.hasNext()) {    DTMXRTreeFrag frag=(DTMXRTreeFrag)iter.next();    frag.destruct();    iter.remove();  }  m_DTMXRTreeFrags=null;}  }
class C{  private void initAtpTab(){  if (m_modelAtp != null)   return;  Vector<String> columnNames=new Vector<String>();  columnNames.add(Msg.translate(Env.getCtx(),"Date"));  columnNames.add(Msg.translate(Env.getCtx(),"QtyOnHand"));  columnNames.add(Msg.translate(Env.getCtx(),"C_BPartner_ID"));  columnNames.add(Msg.translate(Env.getCtx(),"QtyOrdered"));  columnNames.add(Msg.translate(Env.getCtx(),"QtyReserved"));  columnNames.add(Msg.translate(Env.getCtx(),"M_Locator_ID"));  columnNames.add(Msg.translate(Env.getCtx(),"M_AttributeSetInstance_ID"));  columnNames.add(Msg.translate(Env.getCtx(),"DocumentNo"));  columnNames.add(Msg.translate(Env.getCtx(),"M_Warehouse_ID"));  boolean showDetail=CLogMgt.isLevelFine();  String sql="SELECT s.QtyOnHand, s.QtyReserved, s.QtyOrdered," + " productAttribute(s.M_AttributeSetInstance_ID), s.M_AttributeSetInstance_ID,";  if (!showDetail)   sql="SELECT SUM(s.QtyOnHand), SUM(s.QtyReserved), SUM(s.QtyOrdered)," + " productAttribute(s.M_AttributeSetInstance_ID), 0,";  sql+=" w.Name, l.Value " + "FROM M_Storage s" + " INNER JOIN M_Locator l ON (s.M_Locator_ID=l.M_Locator_ID)"+ " INNER JOIN M_Warehouse w ON (l.M_Warehouse_ID=w.M_Warehouse_ID) "+ "WHERE M_Product_ID=?";  if (m_M_Warehouse_ID != 0)   sql+=" AND l.M_Warehouse_ID=?";  if (m_M_AttributeSetInstance_ID > 0)   sql+=" AND s.M_AttributeSetInstance_ID=?";  sql+=" AND (s.QtyOnHand<>0 OR s.QtyReserved<>0 OR s.QtyOrdered<>0)";  if (!showDetail)   sql+=" GROUP BY productAttribute(s.M_AttributeSetInstance_ID), w.Name, l.Value";  sql+=" ORDER BY l.Value";  Vector<Vector<Object>> data=new Vector<Vector<Object>>();  double qty=0;  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_M_Product_ID);    if (m_M_Warehouse_ID != 0)     pstmt.setInt(2,m_M_Warehouse_ID);    if (m_M_AttributeSetInstance_ID > 0)     pstmt.setInt(3,m_M_AttributeSetInstance_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      Vector<Object> line=new Vector<Object>(9);      line.add(null);      double qtyOnHand=rs.getDouble(1);      qty+=qtyOnHand;      line.add(new Double(qtyOnHand));      line.add(null);      line.add(new Double(rs.getDouble(3)));      line.add(new Double(rs.getDouble(2)));      line.add(rs.getString(7));      String asi=rs.getString(4);      if (showDetail && (asi == null || asi.length() == 0))       asi="{" + rs.getInt(5) + "}";      line.add(asi);      line.add(null);      line.add(rs.getString(6));      data.add(line);    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  sql="SELECT o.DatePromised, ol.QtyReserved," + " productAttribute(ol.M_AttributeSetInstance_ID), ol.M_AttributeSetInstance_ID," + " dt.DocBaseType, bp.Name,"+ " dt.PrintName || ' ' || o.DocumentNo As DocumentNo, w.Name "+ "FROM C_Order o"+ " INNER JOIN C_OrderLine ol ON (o.C_Order_ID=ol.C_Order_ID)"+ " INNER JOIN C_DocType dt ON (o.C_DocType_ID=dt.C_DocType_ID)"+ " INNER JOIN M_Warehouse w ON (ol.M_Warehouse_ID=w.M_Warehouse_ID)"+ " INNER JOIN C_BPartner bp  ON (o.C_BPartner_ID=bp.C_BPartner_ID) "+ "WHERE ol.QtyReserved<>0"+ " AND ol.M_Product_ID=?";  if (m_M_Warehouse_ID != 0)   sql+=" AND ol.M_Warehouse_ID=?";  if (m_M_AttributeSetInstance_ID > 0)   sql+=" AND ol.M_AttributeSetInstance_ID=?";  sql+=" ORDER BY o.DatePromised";  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_M_Product_ID);    if (m_M_Warehouse_ID != 0)     pstmt.setInt(2,m_M_Warehouse_ID);    if (m_M_AttributeSetInstance_ID > 0)     pstmt.setInt(3,m_M_AttributeSetInstance_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      Vector<Object> line=new Vector<Object>(9);      line.add(rs.getTimestamp(1));      double oq=rs.getDouble(2);      String DocBaseType=rs.getString(5);      Double qtyReserved=null;      Double qtyOrdered=null;      if (MDocType.DOCBASETYPE_PurchaseOrder.equals(DocBaseType)) {        qtyOrdered=new Double(oq);        qty+=oq;      } else {        qtyReserved=new Double(oq);        qty-=oq;      }      line.add(new Double(qty));      line.add(rs.getString(6));      line.add(qtyOrdered);      line.add(qtyReserved);      line.add(null);      String asi=rs.getString(3);      if (showDetail && (asi == null || asi.length() == 0))       asi="{" + rs.getInt(4) + "}";      line.add(asi);      line.add(rs.getString(7));      line.add(rs.getString(8));      data.add(line);    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  MiniTable table=null;  m_modelAtp=new DefaultTableModel(data,columnNames);  m_tableAtp.setModel(m_modelAtp);  table=m_tableAtp;  table.setColumnClass(0,Timestamp.class,true);  table.setColumnClass(1,Double.class,true);  table.setColumnClass(2,String.class,true);  table.setColumnClass(3,Double.class,true);  table.setColumnClass(4,Double.class,true);  table.setColumnClass(5,String.class,true);  table.setColumnClass(6,String.class,true);  table.setColumnClass(7,String.class,true);  table.setColumnClass(8,String.class,true);  table.autoSize();}  }
class C{  Node cloneOrImportNode(short operation,Node node,boolean deep){  NodeImpl copy=shallowCopy(operation,node);  if (deep) {    NodeList list=node.getChildNodes();    for (int i=0; i < list.getLength(); i++) {      copy.appendChild(cloneOrImportNode(operation,list.item(i),deep));    }  }  notifyUserDataHandlers(operation,node,copy);  return copy;}  }
class C{  protected void onSetChannelKey(String channel,String sourceNick,String sourceLogin,String sourceHostname,String key){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapwrongdocumenterr.class,args);}  }
class C{  public static int geometric(double p){  return (int)Math.ceil(Math.log(uniform()) / Math.log(1.0 - p));}  }
class C{  public boolean isLoggedIn(){  return modules.getAuthModule().isLoggedIn();}  }
class C{  public OMPoly(double latPoint,double lonPoint,int[] xPoints,int[] yPoints,int cMode){  super(RENDERTYPE_OFFSET,LINETYPE_UNKNOWN,DECLUTTERTYPE_NONE);  setLocation(latPoint,lonPoint,OMGraphic.DECIMAL_DEGREES,xPoints,yPoints);  coordMode=cMode;}  }
class C{  public static boolean isAppOnSdcard(PackageManager pm,String packageName){  return isAppEnabled(pm,packageName,PackageManager.GET_UNINSTALLED_PACKAGES);}  }
class C{  private void addSelections(ExpressionSignature signature,String newText,boolean addFirst){  int offset=0;  for (int i=0; i < signature.getNumberOfArguments(); i++) {    String arg=signature.getArgument(i);    int index=newText.indexOf(arg);    int end=index + arg.length();    if (0 <= index) {      if (addFirst) {        this.selections.add(i,new Selection(offset + index,offset + end));      } else {        this.selections.add(new Selection(offset + index,offset + end));      }    }    offset=offset + end;    newText=newText.substring(end);  }}  }
class C{  public SecretKeySpec(byte[] key,String algorithm){  if (key == null) {    throw new IllegalArgumentException("key == null");  }  if (key.length == 0) {    throw new IllegalArgumentException("key.length == 0");  }  if (algorithm == null) {    throw new IllegalArgumentException("algorithm == null");  }  this.algorithm=algorithm;  this.key=new byte[key.length];  System.arraycopy(key,0,this.key,0,key.length);}  }
class C{  public void sort(){  if (!this.isSorted) {    values.sort();    this.isSorted=true;  }}  }
class C{  public IgniteThread(String gridName,String threadName,Runnable r,int grpIdx){  this(DFLT_GRP,gridName,threadName,r,grpIdx);}  }
class C{  public int next(){  for (++_currentNode; _sp >= 0; ++_currentNode) {    if (_currentNode < _stack[_sp]) {      int type=_type2(_currentNode);      if (type != ATTRIBUTE_NODE && type != NAMESPACE_NODE)       return returnNode(makeNodeHandle(_currentNode));    } else     --_sp;  }  return NULL;}  }
class C{  @Around("operationsMethods()") public Object logMethodBeingInvoked(ProceedingJoinPoint pjp) throws Throwable {  Class<?> targetClass=pjp.getTarget().getClass();  MethodSignature targetMethodSignature=(MethodSignature)pjp.getSignature();  Method targetMethod=targetMethodSignature.getMethod();  if (targetMethod.getDeclaringClass().isInterface()) {    targetMethod=pjp.getTarget().getClass().getMethod(pjp.getSignature().getName(),targetMethod.getParameterTypes());  }  if ((AnnotationUtils.findAnnotation(targetClass,SuppressLogging.class) == null) && (AnnotationUtils.findAnnotation(targetMethod,SuppressLogging.class) == null) && (LOGGER.isDebugEnabled())) {    LOGGER.debug("javaMethod=\"{}.{}\"",targetClass.getName(),targetMethodSignature.getName());  }  return pjp.proceed();}  }
class C{  public static String formatStackTrace(StackTraceElement[] stack){  List<String> lines=new ArrayList<>();  lines.add("cpu");  lines.add("trace");  for (  StackTraceElement element : stack) {    lines.add(formatStackTraceElement(element));  }  return Joiner.on(".").join(lines);}  }
class C{  public static boolean isRegionDepartureNotificationOk(){  return regionDepartureNotificationDisabled.get() != Boolean.TRUE;}  }
class C{  public static boolean isFlyme(){  try {    final Method method=Build.class.getMethod("hasSmartBar");    return method != null;  } catch (  final Exception e) {    return false;  }}  }
class C{  public static String resolveUiBinderNamespacePrefix(IStructuredDocument xmlDocument){  IStructuredModel model=StructuredModelManager.getModelManager().getExistingModelForRead(xmlDocument);  if (model == null || !(model instanceof IDOMModel)) {    return null;  }  try {    return resolveUiBinderNamespacePrefix((IDOMModel)model);  }  finally {    model.releaseFromRead();  }}  }
class C{  public DefaultModalGraphMouse(){  this(1.1f,1 / 1.1f);}  }
class C{  public static void v(String tag,String s){  if (LOG.VERBOSE >= LOGLEVEL)   Log.v(tag,s);}  }
class C{  private Rops(){}  }
class C{  public void unregister(ICalPropertyScribe<? extends ICalProperty> scribe){  for (  ICalVersion version : ICalVersion.values()) {    experimentalPropByName.remove(propertyNameKey(scribe,version));  }  experimentalPropByClass.remove(scribe.getPropertyClass());  experimentalPropByQName.remove(scribe.getQName());}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public static Intent makeIntent(Context context,Uri videoUri){  return new Intent(context,UploadVideoService.class).setData(videoUri);}  }
class C{  public void train(){  try {    this.train(null);  } catch (  ProcessStoppedException e) {  }}  }
class C{  public static String hex2dec(String s){  try {    if (pHex0x.matcher(s).find()) {      s=replaceNumber(s,pHex0x,16,2,0);    }    if (pHexH.matcher(s).find()) {      s=replaceNumber(s,pHexH,16,0,1);    }    if (pHexDollar.matcher(s).find()) {      s=replaceNumber(s,pHexDollar,16,1,0);    }    if (pBinB.matcher(s).find()) {      s=replaceNumber(s,pBinB,2,0,1);    }    if (pOctO.matcher(s).find()) {      s=replaceNumber(s,pOctO,8,0,1);    }    if (pOctQ.matcher(s).find()) {      s=replaceNumber(s,pOctQ,8,0,1);    }  } catch (  NumberFormatException ignored) {  }  return s;}  }
class C{  private void onMouseOut(){  if (popupMenu != null) {    return;  }  panel.setStyleName(toolbarResources.toolbar().popupButtonPanel());}  }
class C{  public void testDeadlocksDeleteRename() throws Exception {  checkDeadlocksRepeat(5,2,2,2,RENAME_CNT,DELETE_CNT,0,0,0);}  }
class C{  @Override public void onActivityCreated(Bundle savedInstanceState){  super.onActivityCreated(savedInstanceState);  mProgressBar=(ProgressBar)getTargetFragment().getView().findViewById(R.id.progress_horizontal);synchronized (mThread) {    mReady=true;    mThread.notify();  }}  }
class C{  public synchronized boolean isLoaded(){  return loaded;}  }
class C{  public void dropObject(DatabaseObjectDefinition databaseObjectDefinition) throws EclipseLinkException {  boolean usesBatchWriting=false;  if (getSession().getPlatform().usesBatchWriting()) {    usesBatchWriting=true;    getSession().getPlatform().setUsesBatchWriting(false);  }  try {    collectDatabaseSchemasForDrop(databaseObjectDefinition);    databaseObjectDefinition.preDropObject(getSession(),getDropSchemaWriter(),this.createSQLFiles);    if (shouldWriteToDatabase()) {      databaseObjectDefinition.dropFromDatabase(getSession());    } else {      Writer dropSchemaWriter=getDropSchemaWriter();      databaseObjectDefinition.dropObject(getSession(),dropSchemaWriter,createSQLFiles);      if (this.createSQLFiles) {        this.appendToDDLWriter(dropSchemaWriter,getSession().getPlatform().getStoredProcedureTerminationToken());      }      this.appendToDDLWriter(dropSchemaWriter,"\n");    }  }  finally {    if (usesBatchWriting) {      getSession().getPlatform().setUsesBatchWriting(true);    }  }}  }
class C{  private void savePlaybackQueue(){  SharedPreferences queuePrefs=getSharedPreferences(QUEUE_SHARED_PREFS,MODE_PRIVATE);  mPlaybackQueue.save(queuePrefs.edit());  queuePrefs.edit().putInt("current",mCurrentTrack).apply();}  }
class C{  @Override public void resize(int width,int height){  viewport.update(width,height,true);  Gdx.app.log(TAG,"Viewport world dimensions: (" + viewport.getWorldHeight() + ", "+ viewport.getWorldWidth()+ ")");}  }
class C{  public String sql_selectPreparedStatement(String vendorName,String catalogName,String schemaName,String tableName,ArrayList<String> whereColumnNames){  ArrayList<String> columnNames=null;  ArrayList<String> aliasNames=null;  ArrayList<String> conditions=null;  ArrayList<String> sortColumns=null;  if (whereColumnNames != null && whereColumnNames.size() > 0) {    conditions=new ArrayList<String>();    for (    String whereColumnName : whereColumnNames) {      conditions.add(new StringBuffer(normalizeColumnName(vendorName,whereColumnName)).append(" = ?").toString());    }  }  return sql_select(vendorName,catalogName,schemaName,tableName,null,columnNames,aliasNames,conditions,sortColumns,false);}  }
class C{  protected Dimension calcPreferredSize(){  Dimension d=new Dimension(0,0);  return d;}  }
class C{  protected boolean isLocalServer(MailAddress recipient){  try {    return getConfiguration().getDomainList().containsDomain(recipient.getDomain());  } catch (  DomainListException e) {    getLogger().error("Unable to access DomainList",e);    return false;  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static boolean checkWifiIsActive(Context context){  ConnectivityManager connec=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  android.net.NetworkInfo wifi=connec.getNetworkInfo(ConnectivityManager.TYPE_WIFI);  if (wifi.isConnected()) {    return true;  }  return false;}  }
class C{  @SuppressWarnings("IfMayBeConditional") public static String typeName(String cls){  if (Boolean.class.getName().equals(cls) || boolean.class.getName().equals(cls))   return "BOOLEAN"; else   if (Byte.class.getName().equals(cls) || byte.class.getName().equals(cls))   return "TINYINT"; else   if (Short.class.getName().equals(cls) || short.class.getName().equals(cls))   return "SMALLINT"; else   if (Integer.class.getName().equals(cls) || int.class.getName().equals(cls))   return "INTEGER"; else   if (Long.class.getName().equals(cls) || long.class.getName().equals(cls))   return "BIGINT"; else   if (Float.class.getName().equals(cls) || float.class.getName().equals(cls))   return "FLOAT"; else   if (Double.class.getName().equals(cls) || double.class.getName().equals(cls))   return "DOUBLE"; else   if (String.class.getName().equals(cls))   return "VARCHAR"; else   if (byte[].class.getName().equals(cls))   return "BINARY"; else   if (Time.class.getName().equals(cls))   return "TIME"; else   if (Timestamp.class.getName().equals(cls))   return "TIMESTAMP"; else   if (Date.class.getName().equals(cls))   return "DATE"; else   return "OTHER";}  }
class C{  public void rejectInvitation() throws RcsGenericException {  try {    mSharingInf.rejectInvitation();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  public sub addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-19 13:30:38.166 -0400",hash_original_method="9CE94D17A12EDE30B7CAE8D136113E99",hash_generated_method="650813DD8E487A5BC9B795C4E00B486D") private void showPopupUnchecked(int maxActivityCount){  if (mAdapter.getDataModel() == null) {    throw new IllegalStateException("No data model. Did you call #setDataModel?");  }  getViewTreeObserver().addOnGlobalLayoutListener(mOnGlobalLayoutListener);  final boolean defaultActivityButtonShown=mDefaultActivityButton.getVisibility() == VISIBLE;  final int activityCount=mAdapter.getActivityCount();  final int maxActivityCountOffset=defaultActivityButtonShown ? 1 : 0;  if (maxActivityCount != ActivityChooserViewAdapter.MAX_ACTIVITY_COUNT_UNLIMITED && activityCount > maxActivityCount + maxActivityCountOffset) {    mAdapter.setShowFooterView(true);    mAdapter.setMaxActivityCount(maxActivityCount - 1);  } else {    mAdapter.setShowFooterView(false);    mAdapter.setMaxActivityCount(maxActivityCount);  }  ListPopupWindow popupWindow=getListPopupWindow();  if (!popupWindow.isShowing()) {    if (mIsSelectingDefaultActivity || !defaultActivityButtonShown) {      mAdapter.setShowDefaultActivity(true,defaultActivityButtonShown);    } else {      mAdapter.setShowDefaultActivity(false,false);    }    final int contentWidth=Math.min(mAdapter.measureContentWidth(),mListPopupMaxWidth);    popupWindow.setContentWidth(contentWidth);    popupWindow.show();    if (mProvider != null) {      mProvider.subUiVisibilityChanged(true);    }    popupWindow.getListView().setContentDescription(getContext().getString(R.string.abc_activitychooserview_choose_application));  }}  }
class C{  public BFSDistanceLabeler(){  mPredecessorMap=new HashMap<V,HashSet<V>>();}  }
class C{  public RootBlockView(final boolean rootBlock0,final int offsetBits,final long nextOffset,final long firstCommitTime,final long lastCommitTime,final long commitCounter,final long commitRecordAddr,final long commitRecordIndexAddr,final UUID uuid,final long blockSequence,final long quorumToken,final long metaStartAddr,final long metaBitsAddr,final StoreTypeEnum storeTypeEnum,final long createTime,final long closeTime,final int version,final ChecksumUtility checker){  if (storeTypeEnum == null) {    throw new IllegalArgumentException("storeType is null");  }switch (storeTypeEnum) {case RW:{      am=new RWAddressManager(null);      break;    }case WORM:{    if (metaStartAddr != 0L)     throw new RootBlockException("metaStartAddr must be ZERO (0L) for WORM.");    if (metaBitsAddr != 0L)     throw new RootBlockException("metaBitsAddr must be ZERO (0L) for WORM.");    am=new WormAddressManager(offsetBits);    WormAddressManager.assertOffsetBits(offsetBits);    ((WormAddressManager)am).assertOffset(nextOffset);    break;  }default :throw new RootBlockException("Unknown storeType: " + storeTypeEnum);}if (firstCommitTime == 0L && lastCommitTime != 0L) {throw new IllegalArgumentException("first transaction identifier is zero, but last transaction identifier is not: lastCommitTime=" + lastCommitTime);}if (firstCommitTime != 0 && lastCommitTime < firstCommitTime) {log.warn("last transaction identifier is less than first transaction identifier: lastCommitTime=" + lastCommitTime + ", firstCommitTime="+ firstCommitTime);}if (commitCounter < 0) {throw new IllegalArgumentException("commit counter is negative: commitCounter=" + commitCounter);}if (commitCounter == Long.MAX_VALUE) {throw new IllegalArgumentException("commit counter would overflow.");}assertLegalAddr(am,nextOffset,commitRecordAddr,"Commit record");assertLegalAddr(am,nextOffset,commitRecordIndexAddr,"Commit record index");if (commitCounter > 0) {if (commitRecordAddr == 0) {throw new IllegalArgumentException("The commit record must exist if the commit counter is non-zero: commitCounter=" + commitCounter);}if (commitRecordIndexAddr == 0) {throw new IllegalArgumentException("The commit record index must exist if the commit counter is non-zero: commitCounter=" + commitCounter);}}if (commitRecordAddr != 0 && commitCounter == 0) {throw new IllegalArgumentException("The commit counter must be greter than zero if there is a commit record: commitRecordAddr=" + commitRecordAddr + ", but commitCounter="+ commitCounter);}if (commitRecordAddr != 0 && commitRecordIndexAddr == 0) {throw new IllegalArgumentException("The commit record index must exist if there is a commit record: commitRecordAddr=" + commitRecordAddr + ", but commitRecordIndexAddr="+ commitRecordIndexAddr);}if (commitRecordIndexAddr != 0 && commitRecordAddr == 0) {throw new IllegalArgumentException("The commit record address must exist if there is a commit record index: commitRecordIndexAddr=" + commitRecordIndexAddr + ", but commitRecordAddr="+ commitRecordAddr);}if (uuid == null) {throw new IllegalArgumentException("UUID is null");}if (blockSequence < 0L) {throw new IllegalArgumentException("blockSequence is negative.");}if (quorumToken < 0L && quorumToken != Quorum.NO_QUORUM) {throw new IllegalArgumentException("quorum is negative but value is not NO_QUORUM(" + Quorum.NO_QUORUM + ")");}if (createTime == 0L) {throw new IllegalArgumentException("Create time is zero.");}if (closeTime != 0L && closeTime < createTime) {throw new IllegalArgumentException("Close time proceeds create time: closeTime=" + closeTime + ", createTime="+ createTime);}if (checker == null) {throw new IllegalArgumentException("Checker is null");}this.checker=checker;buf=ByteBuffer.allocate(SIZEOF_ROOT_BLOCK);this.rootBlock0=rootBlock0;final long challisField=commitCounter;final long localTime=System.currentTimeMillis();buf.putLong(challisField);buf.putInt(MAGIC);buf.putInt(version);buf.put((byte)offsetBits);buf.putLong(nextOffset);buf.putLong(localTime);buf.putLong(firstCommitTime);buf.putLong(lastCommitTime);buf.putLong(commitCounter);buf.putLong(commitRecordAddr);buf.putLong(commitRecordIndexAddr);buf.putLong(createTime);buf.putLong(closeTime);buf.position(buf.position() + SIZEOF_UNUSED);buf.putLong(blockSequence);buf.putLong(quorumToken);buf.putLong(metaBitsAddr);buf.putLong(metaStartAddr);buf.put(storeTypeEnum.getType());buf.putLong(uuid.getMostSignificantBits());buf.putLong(uuid.getLeastSignificantBits());buf.putLong(challisField);buf.putInt(calcChecksum(checker));assert buf.position() == SIZEOF_ROOT_BLOCK : "position=" + buf.position() + " but root block is "+ SIZEOF_ROOT_BLOCK+ " bytes";assert buf.limit() == SIZEOF_ROOT_BLOCK;buf.position(0);}  }
class C{  public static String chooseName(String name,Method method){  if (name == null || name.isEmpty()) {    name=method.getName();  }  return name;}  }
class C{  private void calcCoordinates(final float x,final float[][] Trm,float charSpacing){  final float[][] trm=new float[3][3];  for (int xx=0; xx < 3; xx++) {    System.arraycopy(Trm[xx],0,trm[xx],0,3);  }  x1=x;  x2=trm[2][0] - (charSpacing * trm[0][0]);  if (glyphData.isHorizontal()) {    if (trm[1][0] < 0) {      x1=x + trm[1][0] - (charSpacing * trm[0][0]);      x2=trm[2][0];    } else     if (trm[1][0] > 0) {      x1=x;      x2=trm[2][0];    }  } else   if (trm[1][0] > 0) {    x1=trm[2][0];    x2=x + trm[1][0] - (charSpacing * trm[0][0]);  } else   if (trm[1][0] < 0) {    x2=trm[2][0];    x1=x + trm[1][0] - (charSpacing * trm[0][0]);  }}  }
class C{  public synchronized void prepend(String k,String v){  grow();  for (int i=nkeys; i > 0; i--) {    keys[i]=keys[i - 1];    values[i]=values[i - 1];  }  keys[0]=k;  values[0]=v;  nkeys++;}  }
class C{  public synchronized void flushClass(String classname){  classes.remove(classname);  softcache.remove(classname);}  }
class C{  public Vector3f rotate(Quaternionfc quat){  quat.transform(this,this);  return this;}  }
class C{  public Vset checkInsideClass(Environment env,Context ctx,Vset vset) throws ClassNotFound {  if (!isInsideLocal() || isLocal()) {    throw new CompilerError("checkInsideClass");  }  return checkInternal(env,ctx,vset);}  }
class C{  public Geo3DPoint(String name,double x,double y,double z){  super(name,TYPE);  fillFieldsData(x,y,z);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element1;  Element element2;  Attr attribute;  Attr newAttribute;  NodeList elementList;  String nullNS=null;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element1=(Element)elementList.item(1);  attribute=element1.getAttributeNodeNS(nullNS,"street");  element2=(Element)elementList.item(2);{    boolean success=false;    try {      newAttribute=element2.setAttributeNodeNS(attribute);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INUSE_ATTRIBUTE_ERR);    }    assertTrue("elementsetattributenodens03",success);  }}  }
class C{  public void testRandomQueries() throws Exception {  MemoryIndex index=randomMemoryIndex();  for (int i=0; i < ITERATIONS; i++) {    assertAgainstRAMDirectory(index);  }}  }
class C{  public static Query newPrefixQuery(String field,InetAddress value,int prefixLength){  if (value == null) {    throw new IllegalArgumentException("InetAddress must not be null");  }  if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {    throw new IllegalArgumentException("illegal prefixLength '" + prefixLength + "'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges");  }  byte lower[]=value.getAddress();  byte upper[]=value.getAddress();  for (int i=prefixLength; i < 8 * lower.length; i++) {    int m=1 << (7 - (i & 7));    lower[i >> 3]&=~m;    upper[i >> 3]|=m;  }  try {    return newRangeQuery(field,InetAddress.getByAddress(lower),InetAddress.getByAddress(upper));  } catch (  UnknownHostException e) {    throw new AssertionError(e);  }}  }
class C{  public LocalSession(@Nullable LocalConfiguration config){  this.config=config;}  }
class C{  public boolean isCompiledTemplate(){  return false;}  }
class C{  public FrequencyTableEntry copy(){  FrequencyTableEntry res=new FrequencyTableEntry(this.position,this.payload,this.frequency);  return res;}  }
class C{  public void clear(){  IntIterator rows=rows(true);  while (rows.hasNext()) {    removeRow(rows.nextInt());  }}  }
class C{  public OFInterfaceIPRequestVendorData(){  super(BSN_GET_INTERFACE_IP_REQUEST);}  }
class C{  @Override public RefactoringStatus checkInitialConditions(IProgressMonitor pm) throws CoreException {  RefactoringStatus result=new RefactoringStatus();  pm.beginTask("",100);  if (fSelectionStart < 0 || fSelectionLength == 0)   return mergeTextSelectionStatus(result);  IFile[] changedFiles=ResourceUtil.getFiles(new ICompilationUnit[]{fCUnit});  result.merge(Checks.validateModifiesFiles(changedFiles,getValidationContext()));  if (result.hasFatalError())   return result;  result.merge(ResourceChangeChecker.checkFilesToBeChanged(changedFiles,new SubProgressMonitor(pm,1)));  if (fRoot == null) {    fRoot=RefactoringASTParser.parseWithASTProvider(fCUnit,true,new SubProgressMonitor(pm,99));  }  fImportRewriter=StubUtility.createImportRewrite(fRoot,true);  fAST=fRoot.getAST();  fRoot.accept(createVisitor());  fSelectionStart=fAnalyzer.getSelection().getOffset();  fSelectionLength=fAnalyzer.getSelection().getLength();  result.merge(fAnalyzer.checkInitialConditions(fImportRewriter));  if (result.hasFatalError())   return result;  if (fVisibility == -1) {    setVisibility(Modifier.PRIVATE);  }  initializeParameterInfos();  initializeUsedNames();  initializeDuplicates();  initializeDestinations();  return result;}  }
class C{  public static int findEndTrimNewlineChars(CharSequence s){  for (int i=s.length(); i > 0; ) {    if (s.charAt(i - 1) != '\n') {      return i;    }    i--;    if (i > 0 && s.charAt(i - 1) == '\r') {      i--;    }  }  return 0;}  }
class C{  public void testMultipleCompletions(){  assertTrue(sh.isASuggestion("com","come"));  assertTrue(sh.isASuggestion("com","company"));  assertTrue(sh.isASuggestion("th","the"));  assertTrue(sh.isASuggestion("th","that"));  assertTrue(sh.isASuggestion("th","this"));  assertTrue(sh.isASuggestion("th","they"));}  }
class C{  public void updateAmountCost(){  if (transaction.getMovementQty().signum() > 0) {    costDetail.setCostAmt(costDetail.getAmt().subtract(costDetail.getCostAdjustment()));    costDetail.setCostAmtLL(costDetail.getAmtLL().subtract(costDetail.getCostAdjustmentLL()));  } else   if (transaction.getMovementQty().signum() < 0) {    costDetail.setCostAmt(costDetail.getAmt().add(adjustCost));    costDetail.setCostAmtLL(costDetail.getAmtLL().add(adjustCostLowerLevel));  }  costDetail.setCumulatedQty(getNewAccumulatedQuantity(lastCostDetail));  costDetail.setCumulatedAmt(getNewAccumulatedAmount(lastCostDetail));  costDetail.setCurrentCostPrice(currentCostPrice);  costDetail.setCurrentCostPriceLL(currentCostPriceLowerLevel);  final String idColumnName=CostEngine.getIDColumnName(model);  costDetail.set_ValueOfColumn(idColumnName,CostEngine.getIDColumn(model));  if (model instanceof MInOutLine) {    MInOutLine ioLine=(MInOutLine)model;    costDetail.setC_OrderLine_ID(ioLine.getC_OrderLine_ID());    costDetail.setC_InvoiceLine_ID(0);  }  if (model instanceof MMatchInv && costDetail.getM_InOutLine_ID() == 0) {    MMatchInv iMatch=(MMatchInv)model;    costDetail.setM_InOutLine_ID(iMatch.getM_InOutLine_ID());  }  if (model instanceof MMatchPO && costDetail.getM_InOutLine_ID() == 0) {    MMatchPO poMatch=(MMatchPO)model;    costDetail.setM_InOutLine_ID(poMatch.getM_InOutLine_ID());  }  if (model instanceof MLandedCostAllocation) {    MLandedCostAllocation allocation=(MLandedCostAllocation)model;    costDetail.setM_InOutLine_ID(allocation.getM_InOutLine_ID());    costDetail.setC_InvoiceLine_ID(allocation.getC_InvoiceLine_ID());    costDetail.setProcessed(false);  }  costDetail.saveEx();}  }
class C{  public boolean invert(){  float determinant=determinant();  if (Math.abs(determinant) <= Float.MIN_VALUE) {    return false;  }  float t00=m00;  float t01=m01;  float t02=m02;  float t10=m10;  float t11=m11;  float t12=m12;  m00=t11 / determinant;  m10=-t10 / determinant;  m01=-t01 / determinant;  m11=t00 / determinant;  m02=(t01 * t12 - t11 * t02) / determinant;  m12=(t10 * t02 - t00 * t12) / determinant;  return true;}  }
class C{  private void processBinary(Instruction s){  RegisterOperand result=Binary.getResult(s);  ValueGraphVertex v=findOrCreateVertex(result.getRegister());  v.setLabel(s.operator(),2);  Operand val=Binary.getVal1(s);  val=bypassMoves(val);  link(v,findOrCreateVertex(val),0);  Operand val2=Binary.getVal2(s);  val2=bypassMoves(val2);  link(v,findOrCreateVertex(val2),1);}  }
class C{  public static <T extends Case3<A,B,C>,A,B,C>DecomposableMatchBuilder0<T> case3(Class<T> clazz,MatchesExact<A> a,MatchesExact<B> b,MatchesExact<C> c){  List<Matcher<Object>> matchers=Lists.of(ArgumentMatchers.eq(a.t),ArgumentMatchers.eq(b.t),ArgumentMatchers.eq(c.t));  return new DecomposableMatchBuilder0<T>(matchers,new Case3FieldExtractor<>(clazz));}  }
class C{  private void remove(){  disableButtons();  clientgui.getClient().sendDeleteEntity(cen);  cen=Entity.NONE;}  }
class C{  public ManagedBean addDynamicAttributes(ManagedBean managed) throws AdminException {  return Helper.addDynamicAttributes(this,managed);}  }
class C{  public boolean last() throws SQLException {  if (getType() == ResultSet.TYPE_FORWARD_ONLY) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.last").toString());  }  boolean ret=this.internalLast();  notifyCursorMoved();  return ret;}  }
class C{  public static byte[] decode(byte[] data){  int len=data.length / 4 * 3;  ByteArrayOutputStream bOut=new ByteArrayOutputStream(len);  try {    encoder.decode(data,0,data.length,bOut);  } catch (  Exception e) {    throw new DecoderException("unable to decode base64 data: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  public static void pause(){  if (VM.VerifyAssertions && VM.runningVM) {    VM._assert(VM.NOT_REACHED);  }}  }
class C{  public void decrement(){  value--;}  }
class C{  private TypeArgumentProposal computeTypeProposal(ITypeParameter parameter) throws JavaModelException {  String[] bounds=parameter.getBounds();  String elementName=parameter.getElementName();  String displayName=computeTypeParameterDisplayName(parameter,bounds);  if (bounds.length == 1 && !"java.lang.Object".equals(bounds[0]))   return new TypeArgumentProposal(Signature.getSimpleName(bounds[0]),true,displayName); else   return new TypeArgumentProposal(elementName,true,displayName);}  }
class C{  public static void filterMirror(Image inputImg,int inStart,int inLen,int inStep,Image outputImg,int outStart,int outLen,int outStep,Filter filter){  int fStart=0;  int fEnd=0;  int inPos=0;  for (int i=0; i < outLen; i++) {    fStart=filter.getStart();    fEnd=filter.getEnd();    for (int j=fStart; j <= fEnd; j++) {      inPos=((2 * i) - j);      if (inPos < 0) {        inPos=-inPos;        if (inPos >= inLen) {          continue;        }      }      if (inPos >= inLen) {        inPos=2 * inLen - 2 - inPos;        if (inPos < 0) {          continue;        }      }      outputImg.getData()[outStart + i * outStep]+=filter.getData()[j - fStart] * inputImg.getData()[inStart + inPos * inStep];    }  }}  }
class C{  private NamespaceIamRoleAuthorizationEntity createNamespaceIamRoleAuthorizationEntity(NamespaceEntity namespaceEntity,IamRole iamRole){  NamespaceIamRoleAuthorizationEntity namespaceIamRoleAuthorizationEntity=new NamespaceIamRoleAuthorizationEntity();  namespaceIamRoleAuthorizationEntity.setNamespace(namespaceEntity);  namespaceIamRoleAuthorizationEntity.setIamRoleName(iamRole.getIamRoleName().trim());  if (StringUtils.isNotBlank(iamRole.getIamRoleDescription())) {    namespaceIamRoleAuthorizationEntity.setDescription(iamRole.getIamRoleDescription().trim());  }  return namespaceIamRoleAuthorizationEntity;}  }
class C{  private static SegmentInfos readSegmentsInfo(IndexCommit commit,Directory directory) throws IOException {  assert commit == null || commit.getDirectory() == directory;  try {    return commit == null ? Lucene.readSegmentInfos(directory) : Lucene.readSegmentInfos(commit);  } catch (  EOFException eof) {    throw new CorruptIndexException("Read past EOF while reading segment infos","commit(" + commit + ")",eof);  }catch (  IOException exception) {    throw exception;  }catch (  Exception ex) {    throw new CorruptIndexException("Hit unexpected exception while reading segment infos","commit(" + commit + ")",ex);  }}  }
class C{  public Categories(){  super();}  }
class C{  public Boolean isDisallowPrerequisiteMoves(){  return disallowPrerequisiteMoves;}  }
class C{  public BootstrapMethodsAttribute(ConstPool cp,BootstrapMethod[] methods){  super(cp,tag);  int size=2;  for (int i=0; i < methods.length; i++)   size+=4 + methods[i].arguments.length * 2;  byte[] data=new byte[size];  ByteArray.write16bit(methods.length,data,0);  int pos=2;  for (int i=0; i < methods.length; i++) {    ByteArray.write16bit(methods[i].methodRef,data,pos);    ByteArray.write16bit(methods[i].arguments.length,data,pos + 2);    int[] args=methods[i].arguments;    pos+=4;    for (int k=0; k < args.length; k++) {      ByteArray.write16bit(args[k],data,pos);      pos+=2;    }  }  set(data);}  }
class C{  public void stop(){synchronized (mCmdQueue) {    if (mState != STOP) {      Command cmd=new Command();      cmd.requestTime=SystemClock.uptimeMillis();      cmd.code=STOP;      enqueueLocked(cmd);      mState=STOP;    }  }}  }
class C{  protected void exportDone(JComponent source,Transferable data,int action){  if (shouldRemove && action == MOVE) {    TextTransferable t=(TextTransferable)data;    t.removeText();    if (withinSameComponent) {      ((RTextArea)source).endAtomicEdit();      withinSameComponent=false;    }  }  exportComp=null;}  }
class C{  public void shutdown(){  Logger.println("SHUTDOWN for " + remoteId);  doWork=false;  closeSocket();}  }
class C{  public static Map<Id<Cordon>,Cordon> openShapefile(String shapefile){  HashMap<Id<Cordon>,Cordon> result=new HashMap<>();  ShapeFileReader reader=new ShapeFileReader();  reader.readFileAndInitialize(shapefile);  Collection<SimpleFeature> features=reader.getFeatureSet();  for (  SimpleFeature f : features) {    Id<Cordon> cid;    try {      cid=Id.create((Integer)f.getAttribute(Cordon.ID),Cordon.class);    } catch (    ClassCastException c) {      cid=Id.create((String)f.getAttribute(Cordon.ID),Cordon.class);    }    Cordon c=new Cordon(cid,(MultiPolygon)f.getAttribute(0));    c.description=(String)f.getAttribute(Cordon.DESCRNAME);    result.put(c.getId(),c);  }  return result;}  }
class C{  @Subscribe @AllowConcurrentEvents public void onTestEvent(TestEvent ev){  Display.getDefault().asyncExec(null);}  }
class C{  @SuppressWarnings("unchecked") public static void deleteAnnotationIfNeccessary(JavacNode annotation,Class<? extends Annotation> annotationType){  deleteAnnotationIfNeccessary0(annotation,annotationType);}  }
class C{  public static UnsupportedOperationException newUnsupportedOperationException(String message){  return new UnsupportedOperationException(formatMessage(0,message));}  }
class C{  public boolean isRemote(){  return this.remote;}  }
class C{  public boolean addComponentParts(World worldIn,Random randomIn,StructureBoundingBox structureBoundingBoxIn){  if (this.averageGroundLvl < 0) {    this.averageGroundLvl=this.getAverageGroundLevel(worldIn,structureBoundingBoxIn);    if (this.averageGroundLvl < 0) {      return true;    }    this.boundingBox.offset(0,this.averageGroundLvl - this.boundingBox.maxY + 9 - 1,0);  }  this.fillWithBlocks(worldIn,structureBoundingBoxIn,1,1,1,7,5,4,Blocks.AIR.getDefaultState(),Blocks.AIR.getDefaultState(),false);  this.fillWithBlocks(worldIn,structureBoundingBoxIn,0,0,0,8,0,5,Blocks.COBBLESTONE.getDefaultState(),Blocks.COBBLESTONE.getDefaultState(),false);  this.fillWithBlocks(worldIn,structureBoundingBoxIn,0,5,0,8,5,5,Blocks.COBBLESTONE.getDefaultState(),Blocks.COBBLESTONE.getDefaultState(),false);  this.fillWithBlocks(worldIn,structureBoundingBoxIn,0,6,1,8,6,4,Blocks.COBBLESTONE.getDefaultState(),Blocks.COBBLESTONE.getDefaultState(),false);  this.fillWithBlocks(worldIn,structureBoundingBoxIn,0,7,2,8,7,3,Blocks.COBBLESTONE.getDefaultState(),Blocks.COBBLESTONE.getDefaultState(),false);  for (int i=-1; i <= 2; ++i) {    for (int j=0; j <= 8; ++j) {      this.setBlockState(worldIn,Blocks.OAK_STAIRS.getDefaultState().withProperty(BlockStairs.FACING,EnumFacing.NORTH),j,6 + i,i,structureBoundingBoxIn);      this.setBlockState(worldIn,Blocks.OAK_STAIRS.getDefaultState().withProperty(BlockStairs.FACING,EnumFacing.SOUTH),j,6 + i,5 - i,structureBoundingBoxIn);    }  }  this.fillWithBlocks(worldIn,structureBoundingBoxIn,0,1,0,0,1,5,Blocks.COBBLESTONE.getDefaultState(),Blocks.COBBLESTONE.getDefaultState(),false);  this.fillWithBlocks(worldIn,structureBoundingBoxIn,1,1,5,8,1,5,Blocks.COBBLESTONE.getDefaultState(),Blocks.COBBLESTONE.getDefaultState(),false);  this.fillWithBlocks(worldIn,structureBoundingBoxIn,8,1,0,8,1,4,Blocks.COBBLESTONE.getDefaultState(),Blocks.COBBLESTONE.getDefaultState(),false);  this.fillWithBlocks(worldIn,structureBoundingBoxIn,2,1,0,7,1,0,Blocks.COBBLESTONE.getDefaultState(),Blocks.COBBLESTONE.getDefaultState(),false);  this.fillWithBlocks(worldIn,structureBoundingBoxIn,0,2,0,0,4,0,Blocks.COBBLESTONE.getDefaultState(),Blocks.COBBLESTONE.getDefaultState(),false);  this.fillWithBlocks(worldIn,structureBoundingBoxIn,0,2,5,0,4,5,Blocks.COBBLESTONE.getDefaultState(),Blocks.COBBLESTONE.getDefaultState(),false);  this.fillWithBlocks(worldIn,structureBoundingBoxIn,8,2,5,8,4,5,Blocks.COBBLESTONE.getDefaultState(),Blocks.COBBLESTONE.getDefaultState(),false);  this.fillWithBlocks(worldIn,structureBoundingBoxIn,8,2,0,8,4,0,Blocks.COBBLESTONE.getDefaultState(),Blocks.COBBLESTONE.getDefaultState(),false);  this.fillWithBlocks(worldIn,structureBoundingBoxIn,0,2,1,0,4,4,Blocks.PLANKS.getDefaultState(),Blocks.PLANKS.getDefaultState(),false);  this.fillWithBlocks(worldIn,structureBoundingBoxIn,1,2,5,7,4,5,Blocks.PLANKS.getDefaultState(),Blocks.PLANKS.getDefaultState(),false);  this.fillWithBlocks(worldIn,structureBoundingBoxIn,8,2,1,8,4,4,Blocks.PLANKS.getDefaultState(),Blocks.PLANKS.getDefaultState(),false);  this.fillWithBlocks(worldIn,structureBoundingBoxIn,1,2,0,7,4,0,Blocks.PLANKS.getDefaultState(),Blocks.PLANKS.getDefaultState(),false);  this.setBlockState(worldIn,Blocks.GLASS_PANE.getDefaultState(),4,2,0,structureBoundingBoxIn);  this.setBlockState(worldIn,Blocks.GLASS_PANE.getDefaultState(),5,2,0,structureBoundingBoxIn);  this.setBlockState(worldIn,Blocks.GLASS_PANE.getDefaultState(),6,2,0,structureBoundingBoxIn);  this.setBlockState(worldIn,Blocks.GLASS_PANE.getDefaultState(),4,3,0,structureBoundingBoxIn);  this.setBlockState(worldIn,Blocks.GLASS_PANE.getDefaultState(),5,3,0,structureBoundingBoxIn);  this.setBlockState(worldIn,Blocks.GLASS_PANE.getDefaultState(),6,3,0,structureBoundingBoxIn);  this.setBlockState(worldIn,Blocks.GLASS_PANE.getDefaultState(),0,2,2,structureBoundingBoxIn);  this.setBlockState(worldIn,Blocks.GLASS_PANE.getDefaultState(),0,2,3,structureBoundingBoxIn);  this.setBlockState(worldIn,Blocks.GLASS_PANE.getDefaultState(),0,3,2,structureBoundingBoxIn);  this.setBlockState(worldIn,Blocks.GLASS_PANE.getDefaultState(),0,3,3,structureBoundingBoxIn);  this.setBlockState(worldIn,Blocks.GLASS_PANE.getDefaultState(),8,2,2,structureBoundingBoxIn);  this.setBlockState(worldIn,Blocks.GLASS_PANE.getDefaultState(),8,2,3,structureBoundingBoxIn);  this.setBlockState(worldIn,Blocks.GLASS_PANE.getDefaultState(),8,3,2,structureBoundingBoxIn);  this.setBlockState(worldIn,Blocks.GLASS_PANE.getDefaultState(),8,3,3,structureBoundingBoxIn);  this.setBlockState(worldIn,Blocks.GLASS_PANE.getDefaultState(),2,2,5,structureBoundingBoxIn);  this.setBlockState(worldIn,Blocks.GLASS_PANE.getDefaultState(),3,2,5,structureBoundingBoxIn);  this.setBlockState(worldIn,Blocks.GLASS_PANE.getDefaultState(),5,2,5,structureBoundingBoxIn);  this.setBlockState(worldIn,Blocks.GLASS_PANE.getDefaultState(),6,2,5,structureBoundingBoxIn);  this.fillWithBlocks(worldIn,structureBoundingBoxIn,1,4,1,7,4,1,Blocks.PLANKS.getDefaultState(),Blocks.PLANKS.getDefaultState(),false);  this.fillWithBlocks(worldIn,structureBoundingBoxIn,1,4,4,7,4,4,Blocks.PLANKS.getDefaultState(),Blocks.PLANKS.getDefaultState(),false);  this.fillWithBlocks(worldIn,structureBoundingBoxIn,1,3,4,7,3,4,Blocks.BOOKSHELF.getDefaultState(),Blocks.BOOKSHELF.getDefaultState(),false);  this.setBlockState(worldIn,Blocks.PLANKS.getDefaultState(),7,1,4,structureBoundingBoxIn);  this.setBlockState(worldIn,Blocks.OAK_STAIRS.getDefaultState().withProperty(BlockStairs.FACING,EnumFacing.EAST),7,1,3,structureBoundingBoxIn);  IBlockState iblockstate=Blocks.OAK_STAIRS.getDefaultState().withProperty(BlockStairs.FACING,EnumFacing.NORTH);  this.setBlockState(worldIn,iblockstate,6,1,4,structureBoundingBoxIn);  this.setBlockState(worldIn,iblockstate,5,1,4,structureBoundingBoxIn);  this.setBlockState(worldIn,iblockstate,4,1,4,structureBoundingBoxIn);  this.setBlockState(worldIn,iblockstate,3,1,4,structureBoundingBoxIn);  this.setBlockState(worldIn,Blocks.OAK_FENCE.getDefaultState(),6,1,3,structureBoundingBoxIn);  this.setBlockState(worldIn,Blocks.WOODEN_PRESSURE_PLATE.getDefaultState(),6,2,3,structureBoundingBoxIn);  this.setBlockState(worldIn,Blocks.OAK_FENCE.getDefaultState(),4,1,3,structureBoundingBoxIn);  this.setBlockState(worldIn,Blocks.WOODEN_PRESSURE_PLATE.getDefaultState(),4,2,3,structureBoundingBoxIn);  this.setBlockState(worldIn,MatterOverdrive.blocks.inscriber.getDefaultState(),7,1,1,structureBoundingBoxIn);  this.setBlockState(worldIn,Blocks.AIR.getDefaultState(),1,1,0,structureBoundingBoxIn);  this.setBlockState(worldIn,Blocks.AIR.getDefaultState(),1,2,0,structureBoundingBoxIn);  this.setBlockState(worldIn,Blocks.OAK_DOOR.getDefaultState().withProperty(BlockDoor.FACING,EnumFacing.NORTH),1,1,0,structureBoundingBoxIn);  this.setBlockState(worldIn,Blocks.OAK_DOOR.getDefaultState().withProperty(BlockDoor.FACING,EnumFacing.NORTH).withProperty(BlockDoor.HALF,BlockDoor.EnumDoorHalf.UPPER),1,2,0,structureBoundingBoxIn);  if (this.getBlockStateFromPos(worldIn,1,0,-1,structureBoundingBoxIn).getMaterial() == Material.AIR && this.getBlockStateFromPos(worldIn,1,-1,-1,structureBoundingBoxIn).getMaterial() != Material.AIR) {    this.setBlockState(worldIn,Blocks.STONE_STAIRS.getDefaultState().withProperty(BlockStairs.FACING,EnumFacing.NORTH),1,0,-1,structureBoundingBoxIn);  }  if (!this.hasMadeChest) {    this.hasMadeChest=true;    BlockPos pos=new BlockPos(this.getXWithOffset(1,4),this.getYWithOffset(1),this.getZWithOffset(1,4));    if (boundingBox.isVecInside(pos)) {      worldIn.setBlockState(pos,MatterOverdrive.blocks.tritaniumCrate.getDefaultState(),2);      TileEntityTritaniumCrate tileentitycrate=(TileEntityTritaniumCrate)worldIn.getTileEntity(pos);      tileentitycrate.getInventory().addItem(MatterOverdrive.questFactory.generateQuestStack(randomIn,MatterOverdrive.quests.getQuestByName("gmo")).getContract());      ItemStack scanner=new ItemStack(MatterOverdrive.items.dataPad);      scanner.setStackDisplayName("Mad Scientist's Data Pad");      MatterOverdrive.items.dataPad.addToScanWhitelist(scanner,Blocks.CARROTS);      MatterOverdrive.items.dataPad.addToScanWhitelist(scanner,Blocks.POTATOES);      MatterOverdrive.items.dataPad.addToScanWhitelist(scanner,Blocks.WHEAT);      scanner.getTagCompound().setBoolean("Destroys",true);      scanner.getTagCompound().setBoolean("nogui",true);      tileentitycrate.getInventory().addItem(scanner);      return true;    } else {      return false;    }  }  for (int l=0; l < 6; ++l) {    for (int k=0; k < 9; ++k) {      this.clearCurrentPositionBlocksUpwards(worldIn,k,9,l,structureBoundingBoxIn);      this.replaceAirAndLiquidDownwards(worldIn,Blocks.COBBLESTONE.getDefaultState(),k,-1,l,structureBoundingBoxIn);    }  }  spawnVillagers(worldIn,structureBoundingBoxIn,2,1,2,1);  return true;}  }
class C{  @Override protected void buildActions(final List<String> list){  list.add(ActionType.PICK.getRepresentation());  super.buildActions(list);  list.remove(ActionType.HARVEST.getRepresentation());}  }
class C{  public void notifyRegistration(){synchronized (mLock) {    mRcsServiceRegistrationEventBroadcaster.broadcastServiceRegistered();  }}  }
class C{  protected void calculatePan(){  Vector3f side=new Vector3f();  side.cross(activeAudioListener.getOrientation(UP),activeAudioListener.getOrientation(AT));  side.normalize();  Vector3f vecX=new Vector3f(this.getCurrentPosition());  Vector3f vecZ=new Vector3f(this.getCurrentPosition());  float x=vecX.dot(side);  float z=vecZ.dot(activeAudioListener.getOrientation(AT));  float angle=(float)Math.atan2(x,z);  float pan=(float)-Math.sin(angle);  if (audioChannel != null) {    audioChannel.setPan(pan);  }  if (log.isDebugEnabled()) {    log.debug("Set pan of JavaSoundAudioSource " + this.getSystemName() + " to "+ pan);  }}  }
class C{  public RetryingAcknowledgingMessageListenerAdapter(AcknowledgingMessageListener<K,V> messageListener,RetryTemplate retryTemplate){  this(messageListener,retryTemplate,null);}  }
class C{  public SipTransactionContext sendSubsequentRequest(SipDialogPath dialog,SipRequest request) throws NetworkException, PayloadException {  return sendSubsequentRequest(dialog,request,SipManager.sTimeout);}  }
class C{  public List<ProcessorResult> handleWrite() throws ODataException {  LOG.info("Handling transactional operations per each odata request.");  List<ProcessorResult> resultList=new ArrayList<>();  try {    try {      for (      ChangeSetEntity changeSetEntity : changeSetEntities) {        ODataRequestContext odataRequestContext=changeSetEntity.getRequestContext();        ODataUri requestUri=odataRequestContext.getUri();        ODataRequest.Method method=odataRequestContext.getRequest().getMethod();        ProcessorResult result=null;        if (method == ODataRequest.Method.POST) {          result=handlePOST(odataRequestContext,requestUri,changeSetEntity);        } else         if (method == ODataRequest.Method.PUT || method == ODataRequest.Method.PATCH) {          result=handlePutAndPatch(odataRequestContext,requestUri,changeSetEntity);        } else         if (method == ODataRequest.Method.DELETE) {          result=handleDelete(odataRequestContext,requestUri,changeSetEntity);        }        resultList.add(result);      }    }  finally {      commitTransactions();    }  } catch (  ODataException e) {    LOG.error("Transaction could not be processed, rolling back",e);    rollbackTransactions();  }  return resultList;}  }
class C{  private void discardSessionQueueEvents(){synchronized (sessionEventsQueue) {    sessionEventsQueue.clear();    logger.debug("Event queue CLEARED");  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.CODE_INJECTION___BEFORE_CODE_1:    return getBeforeCode_1();case UmplePackage.CODE_INJECTION___AFTER_CODE_1:  return getAfterCode_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return getCapDev(stack).getActiveInput().getBroadcastStandard();}  }
class C{  public Import(URI importUri,URI absoluteUri,String contents,String sourceMap){  this.importUri=importUri;  this.absoluteUri=absoluteUri;  this.contents=contents;  this.sourceMap=sourceMap;}  }
class C{  private static boolean isInHorizontalTargetZone(float x,float y,float handleXStart,float handleXEnd,float handleY,float targetRadius){  return x > handleXStart && x < handleXEnd && Math.abs(y - handleY) <= targetRadius;}  }
class C{  public void paint(TextNode node,Graphics2D g2d){  AttributedCharacterIterator aci;  aci=node.getAttributedCharacterIterator();  if (aci == null)   return;  List textRuns=getTextRuns(node,aci);  paintDecorations(textRuns,g2d,TextSpanLayout.DECORATION_UNDERLINE);  paintDecorations(textRuns,g2d,TextSpanLayout.DECORATION_OVERLINE);  paintTextRuns(textRuns,g2d);  paintDecorations(textRuns,g2d,TextSpanLayout.DECORATION_STRIKETHROUGH);}  }
class C{  public void assertNotNull(Object object,String errorMessage){  TestUtils.assertNotNull(object,errorMessage);}  }
class C{  public static void writeZipEntry(File toBeZipped,ZipOutputStream zoStream,int prefixTrimLength) throws IOException {  if (toBeZipped.isDirectory()) {    File[] files=toBeZipped.listFiles();    for (int i=0; i < files.length; i++) {      writeZipEntry(files[i],zoStream,prefixTrimLength);    }  } else {    if (logger.isLoggable(Level.FINE)) {      logger.fine(toBeZipped + ", " + toBeZipped.getAbsolutePath().substring(prefixTrimLength)+ ")");    }    writeZipEntry(toBeZipped,zoStream,prefixTrimLength < 0 ? toBeZipped.getName() : toBeZipped.getAbsolutePath().substring(prefixTrimLength));  }}  }
class C{  public void addComponent(String type,String name,Class<?> clazz) throws Exception {  validateComponentType(type);  conf.setString("replicator." + type + "."+ name,clazz.getName());}  }
class C{  public static boolean isAdmin(){  if (isNull()) {    return false;  }  final User me=User.get();  if (me.rpObject == null) {    return false;  }  return me.rpObject.has("adminlevel") && (me.rpObject.getInt("adminlevel") >= 600);}  }
class C{  private void verifyManagementServiceStopped(){  if (this.managementService != null) {    assertFalse(this.managementService.isManager());    this.managementService=null;  }}  }
class C{  public Region basicGetParentRegion(){  if (eContainerFeatureID() != SGraphPackage.STATE__PARENT_REGION)   return null;  return (Region)eInternalContainer();}  }
class C{  protected Instance filterInstance(Instance instance) throws Exception {  if (m_Filter.numPendingOutput() > 0) {    throw new Exception("Filter output queue not empty!");  }  if (!m_Filter.input(instance)) {    if (!m_Filter.mayRemoveInstanceAfterFirstBatchDone()) {      throw new Exception("Filter didn't make the test instance" + " immediately available!");    } else {      m_Filter.batchFinished();      return null;    }  }  m_Filter.batchFinished();  return m_Filter.output();}  }
class C{  public void insertPointAfter(PolygonPoint a,PolygonPoint newPoint){  int index=_points.indexOf(a);  if (index != -1) {    newPoint.setNext(a.getNext());    newPoint.setPrevious(a);    a.getNext().setPrevious(newPoint);    a.setNext(newPoint);    _points.add(index + 1,newPoint);  } else {    throw new RuntimeException("Tried to insert a point into a Polygon after a point not belonging to the Polygon");  }}  }
class C{  public static boolean isMavenModule(String name){  return name != null && name.indexOf(':') != -1;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:10.285 -0500",hash_original_method="F642473139BF0FEECA4488F11934C82A",hash_generated_method="68ADC2128FAEEDE72B974D8526C24406") public static final short tertiaryOrder(int order){  return (short)CollationElementIteratorICU.tertiaryOrder(order);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case ERROR_CODE:    return isSetErrorCode();case MESSAGE:  return isSetMessage();}throw new IllegalStateException();}  }
class C{  private void update(BasicCamera camera){  left.set(camera.getLeft()).negateLocal();  look.set(camera.getDirection()).negateLocal();  rot.fromAxes(left,camera.getUp(),look);  location.set(camera.getLocation());  location.negateLocal().addLocal(_worldTransform.getTranslation());  double z=camera.getDirection().dot(location);  if ((z < camera.getFrustumNear()) || (z > camera.getFrustumFar())) {    return;  }  double hZ;  double ft=camera.getFrustumTop() / camera.getMagnification();  if (camera.getProjectionMode() == ProjectionMode.Parallel) {    hZ=ft;  } else {    hZ=z * ft / camera.getFrustumNear();  }  double screenScale=2 * hZ / camera.getHeight();  double scale=screenScale * scaleFactor;  if (scalable && (Math.abs(scale - oldScale) > 0.0001)) {    setScaleFactor(screenScale);    oldScale=scale;  }}  }
class C{  public void startupComplete(){  started=true;  rollLog();}  }
class C{  public final boolean hasNext(){  return pOff < currentCount;}  }
class C{  int dequeueTelegram(){  int result=-1;  if (txTelegramQueue.size() > 0) {    currTxTgm=txTelegramQueue.remove(0);    if (currTxTgm[1] != (blockCounter + 1)) {      log.info(String.format("MsgCounter adjusted:%02x->%02x",(int)currTxTgm[1],(int)blockCounter + 1));      currTxTgm[1]=++blockCounter;    }    currTxCharPos=0;    result=0;  } else {    currTxTgm=getAckTelegram();    currTxCharPos=0;    result=0;  }  return (result);}  }
class C{  public static long copyLarge(Reader input,Writer output,final long inputOffset,final long length,char[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  int bytesToRead=buffer.length;  if (length > 0 && length < buffer.length) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,buffer.length);    }  }  return totalRead;}  }
class C{  private final void populateNameList(final Argument arg,final List<Object> nameList){  List<Object> valueObjList=(List<Object>)arg.getValue();  for (  Object valargobj : valueObjList) {    Argument valarg=(Argument)valargobj;    nameList.add(valarg.getName());  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(isSupported12.class,args);}  }
class C{  public boolean descriptionLoaded(){  return (description_file_loaded);}  }
class C{  private void parseUx(Node node,ImsServerVersion isJoyn){  String messagingUX=null;  Node childnode=node.getFirstChild();  if (childnode != null) {    do {      if (messagingUX == null) {        if ((messagingUX=getValueByParamName("messagingUX",childnode,TYPE_INT)) != null) {          if (messagingUX.equals("1")) {            mRcsSettings.setMessagingMode(MessagingMode.INTEGRATED);          } else {            if (ImsServerVersion.JOYN.equals(isJoyn)) {              mRcsSettings.setMessagingMode(MessagingMode.CONVERGED);            } else {              mRcsSettings.setMessagingMode(MessagingMode.SEAMLESS);            }          }        }      }    } while ((childnode=childnode.getNextSibling()) != null);  }}  }
class C{  private void saveFileBase(){  try {    final CAddress fileBase=new CAddress(Convert.hexStringToLong(m_debuggerPanel.getFileBase()));    m_module.getConfiguration().setFileBase(new CAddress(fileBase));  } catch (  final CouldntSaveDataException e) {    CUtilityFunctions.logException(e);    final String message="E00165: " + "Could not change the module file base";    final String description=CUtilityFunctions.createDescription("The new module file base could not be saved to the database.",new String[]{"There was a problem with the connection to the database while the module file base was saved"},new String[]{"The module file base was not saved. Please try to find out what went wrong with the database connection and try to save the module file base again."});    NaviErrorDialog.show(SwingUtilities.getWindowAncestor(this),message,description,e);  }}  }
class C{  public PortUserError(Port port,String errorId,Object... arguments){  super(port.getPorts().getOwner().getOperator(),errorId,arguments);  this.port=port;}  }
class C{  private int moveComponents(Container target,int x,int y,int width,int height,int rowStart,int rowEnd,boolean ltr,boolean useBaseline,int[] ascent,int[] descent){switch (newAlign) {case LEFT:    x+=ltr ? 0 : width;  break;case CENTER:x+=width / 2;break;case RIGHT:x+=ltr ? width : 0;break;case LEADING:break;case TRAILING:x+=width;break;}int maxAscent=0;int nonbaselineHeight=0;int baselineOffset=0;if (useBaseline) {int maxDescent=0;for (int i=rowStart; i < rowEnd; i++) {Component m=target.getComponent(i);if (m.visible) {if (ascent[i] >= 0) {maxAscent=Math.max(maxAscent,ascent[i]);maxDescent=Math.max(maxDescent,descent[i]);} else {nonbaselineHeight=Math.max(m.getHeight(),nonbaselineHeight);}}}height=Math.max(maxAscent + maxDescent,nonbaselineHeight);baselineOffset=(height - maxAscent - maxDescent) / 2;}for (int i=rowStart; i < rowEnd; i++) {Component m=target.getComponent(i);if (m.isVisible()) {int cy;if (useBaseline && ascent[i] >= 0) {cy=y + baselineOffset + maxAscent - ascent[i];} else {cy=y + (height - m.height) / 2;}if (ltr) {m.setLocation(x,cy);} else {m.setLocation(target.width - x - m.width,cy);}x+=m.width + hgap;}}return height;}  }
class C{  public boolean isImmutableHtmlTag(){  return this.htmlTagIndex != -1 && (this.htmlTagIndex & JAVADOC_TAGS_ID_MASK) == JAVADOC_IMMUTABLE_TAGS_ID;}  }
class C{  public void deactivate() throws AcmeException {  LOG.debug("deactivate");  try (Connection conn=getSession().provider().connect()){    ClaimBuilder claims=new ClaimBuilder();    claims.putResource("reg");    claims.put("status","deactivated");    int rc=conn.sendSignedRequest(getLocation(),claims,getSession());    if (rc != HttpURLConnection.HTTP_OK) {      conn.throwAcmeException();    }  } catch (  IOException ex) {    throw new AcmeNetworkException(ex);  }}  }
class C{  public HistoryResource(UserContext userContext){  this.userContext=userContext;}  }
class C{  public void addRepository(Repository repository){  LOGGER.config("Adding repository " + repository.getName());  repositories.add(repository);  repository.addRepositoryListener(repositoryListener);  if (instance != null) {    repository.postInstall();    save();  }  sortRepositories();  fireUpdate(repository);}  }
class C{  @Override public boolean removeEdge(E edge){  return removeEdge(edge,true);}  }
class C{  public void putAsString(String key,char value){  String strValue=Character.valueOf(value).toString();  super.put(key,strValue);}  }
class C{  public SVGException createSVGException(short type,String key,Object[] args){  try {    return new SVGOMException(type,getCurrentDocument().formatMessage(key,args));  } catch (  Exception e) {    return new SVGOMException(type,key);  }}  }
class C{  protected static String[] template(String template,String[]... parameters){  return TestOutputManager.template(template,parameters);}  }
class C{  private boolean isWwwFolderExists(){  return new File(fileStructure.getWwwFolder()).exists();}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  protected SVGMarkerElementBridge(){}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public TextArea(String text,int rows,int columns,int constraint){  this(text,defaultMaxSize,rows,columns,constraint);}  }
class C{  public NativeInitializationController(Context context,ChromeActivityNativeDelegate activityDelegate){  mContext=context.getApplicationContext();  mHandler=new Handler(Looper.getMainLooper());  mActivityDelegate=activityDelegate;}  }
class C{  private void detachHorizontalOffScreenChildren(boolean toLeft){  int numChildren=getChildCount();  int firstPosition=mFirstPosition;  int start=0;  int count=0;  if (toLeft) {    final int galleryLeft=getPaddingLeft();    for (int i=0; i < numChildren; i++) {      int n=mIsRtl ? (numChildren - 1 - i) : i;      final View child=getChildAt(n);      if (child.getRight() >= galleryLeft) {        break;      } else {        start=n;        count++;        mRecycler.put(firstPosition + n,child);      }    }    if (!mIsRtl) {      start=0;    }  } else {    final int galleryRight=getWidth() - getPaddingRight();    for (int i=numChildren - 1; i >= 0; i--) {      int n=mIsRtl ? numChildren - 1 - i : i;      final View child=getChildAt(n);      if (child.getLeft() <= galleryRight) {        break;      } else {        start=n;        count++;        mRecycler.put(firstPosition + n,child);      }    }    if (mIsRtl) {      start=0;    }  }  detachViewsFromParent(start,count);  if (toLeft != mIsRtl) {    mFirstPosition+=count;  }}  }
class C{  public void writeToLogCat(){switch (mType) {case Verbose:    Log.v(mTag,mMessage);  break;case Debug:Log.d(mTag,mMessage);break;case Info:Log.i(mTag,mMessage);break;case Warning:Log.w(mTag,mMessage);break;case Error:Log.e(mTag,mMessage);break;}}  }
class C{  public static String file_to_string(String filename) throws FileNotFoundException, IOException {  File file=new File(filename);  return file_to_string(file);}  }
class C{  public static void onEvent(final Context context,final String event_id,final HashMap<String,String> stringMap){  onEvent(context,event_id,null,1,stringMap);}  }
class C{  public void testMinWaitIntervalConfigurationParameter() throws Exception {  System.setProperty(StackProperties.FIRST_CTRAN_RETRANS_AFTER,"50");  System.setProperty(StackProperties.PROPAGATE_RECEIVED_RETRANSMISSIONS,"true");  stunStack.addRequestListener(serverAddress,requestCollector);  stunStack.sendRequest(bindingRequest,serverAddress,clientAddress,responseCollector);  requestCollector.waitForRequest();  Vector<?> reqs=requestCollector.getRequestsForTransaction(bindingRequest.getTransactionID());  assertTrue("A retransmissions of the request was sent too early",reqs.size() < 2);  Thread.sleep(110);  reqs=requestCollector.getRequestsForTransaction(bindingRequest.getTransactionID());  assertEquals("A retransmissions of the request was not sent",2,reqs.size());}  }
class C{  public static void clearDictionaryCache(Dictionary dictionary){  if (null != dictionary) {    dictionary.clear();  }}  }
class C{  @Override public String toString(){  final StringBuffer sbf=new StringBuffer();  final int l=messages.size();  for (int i=0; i < l; i++) {    if (i > 0)     sbf.append("\n");    sbf.append(i + 1);    sbf.append(". ");    sbf.append(((Message)messages.get(i)).toString());  }  return sbf.toString();}  }
class C{  public static void teststart(String s){  System.out.println(ANSI_BLUE + "TEST STARTING: " + s+ ANSI_RESET);}  }
class C{  public boolean showPopUp(JPopupMenu popup){  return false;}  }
class C{  public void POST(final MultiProtocolURL url,final InputStream instream,final long length,final boolean concurrent) throws IOException {  if (this.currentRequest != null)   throw new IOException("Client is in use!");  final HttpPost httpPost=new HttpPost(url.toNormalform(true));  String host=url.getHost();  if (host == null)   host=Domains.LOCALHOST;  setHost(host);  final NonClosingInputStreamEntity inputStreamEntity=new NonClosingInputStreamEntity(instream,length);  this.upbytes=length;  httpPost.setEntity(inputStreamEntity);  this.currentRequest=httpPost;  execute(httpPost,concurrent);}  }
class C{  public void calculateCommission(){  MCommissionDetail[] details=getDetails();  BigDecimal ConvertedAmt=Env.ZERO;  BigDecimal ActualQty=Env.ZERO;  for (int i=0; i < details.length; i++) {    MCommissionDetail detail=details[i];    BigDecimal amt=detail.getConvertedAmt();    if (amt == null)     amt=Env.ZERO;    ConvertedAmt=ConvertedAmt.add(amt);    ActualQty=ActualQty.add(detail.getActualQty());  }  setConvertedAmt(ConvertedAmt);  setActualQty(ActualQty);  MCommissionLine cl=new MCommissionLine(getCtx(),getC_CommissionLine_ID(),get_TrxName());  BigDecimal qty=getActualQty().subtract(cl.getQtySubtract());  if (cl.isPositiveOnly() && qty.signum() < 0)   qty=Env.ZERO;  qty=qty.multiply(cl.getQtyMultiplier());  BigDecimal amt=getConvertedAmt().subtract(cl.getAmtSubtract());  if (cl.isPositiveOnly() && amt.signum() < 0)   amt=Env.ZERO;  amt=amt.multiply(cl.getAmtMultiplier());  setCommissionAmt(amt.add(qty));}  }
class C{  protected void hideKeyboard(View view){  InputMethodManager inputMethodManager=getInputMethodManager();  inputMethodManager.hideSoftInputFromWindow(view.getWindowToken(),0);}  }
class C{  public RecentLog(ILoggingEvent ile){  this.ile=ile;}  }
class C{  public MoreCode_ createMoreCode_(){  MoreCode_Impl moreCode_=new MoreCode_Impl();  return moreCode_;}  }
class C{  public Transition_ createTransition_(){  Transition_Impl transition_=new Transition_Impl();  return transition_;}  }
class C{  public NNTermPayloadCoordinator(int numNearestNeighbours){  this.numNearestNeighbours=numNearestNeighbours;}  }
