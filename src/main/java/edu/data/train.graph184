class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("Processing"))     m_Processing=(String)para[i].getParameter(); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }  m_AD_Package_Imp_ID=getRecord_ID();}  }
class C{  BracketMatcher(Highlighter.HighlightPainter goodHighlightPainter,Highlighter.HighlightPainter badHighlightPainter){  this.goodPainter=goodHighlightPainter;  this.badPainter=badHighlightPainter;}  }
class C{  public static int parseUpperMap(String s) throws NumberFormatException {  int upperCase=MAP_UNDEFINED;  int length=s.length();  if (length >= 4 && length <= 6) {    upperCase=Integer.parseInt(s,16);  } else   if (s.length() != 0) {    throw new NumberFormatException();  }  return upperCase;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof BoxAndWhiskerXYToolTipGenerator)) {    return false;  }  return super.equals(obj);}  }
class C{  public Connection(OutputAnchor source,InputAnchor sink){  this.setMouseTransparent(true);  this.setFill(null);  this.startAnchor=source;  this.endAnchor=sink;  this.errorState=false;  this.scopeError=false;  source.getPane().addConnection(this);  this.invalidateAnchorPositions();  this.startAnchor.addConnection(this);  this.startAnchor.localToSceneTransformProperty().addListener(this);  this.endAnchor.setConnection(this);  this.endAnchor.localToSceneTransformProperty().addListener(this);  try {    TypeChecker.unify("new connection",this.startAnchor.getType(Optional.of(this)),this.endAnchor.getType());  } catch (  HaskellTypeError e) {    this.endAnchor.setErrorState(true);    this.errorState=true;  }}  }
class C{  public static boolean isASCII(String token){  int len=token.length();  for (int i=0; i < len; ++i) {    char c=token.charAt(i);    if (Character.isAlphabetic(c) && (int)c >> 7 != 0) {      return false;    }  }  return true;}  }
class C{  public boolean optBoolean(int index){  return this.optBoolean(index,false);}  }
class C{  public ToStringBuilder append(final String fieldName,final double[] array){  style.append(buffer,fieldName,array,null);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:22.957 -0400",hash_original_method="F17863C8B98E2C8BC03C7B1A1F59017D",hash_generated_method="28BC473AA3DB805D1A6E355F281E6189") private long reconcileState(){  final Phaser root=this.root;  long s=state;  if (root != this) {    int phase, p;    while ((phase=(int)(root.state >>> PHASE_SHIFT)) != (int)(s >>> PHASE_SHIFT) && !UNSAFE.compareAndSwapLong(this,stateOffset,s,s=(((long)phase << PHASE_SHIFT) | ((phase < 0) ? (s & COUNTS_MASK) : (((p=(int)s >>> PARTIES_SHIFT) == 0) ? EMPTY : ((s & PARTIES_MASK) | p))))))     s=state;  }  return s;}  }
class C{  protected ExternalDefinition_Impl(){  super();}  }
class C{  public void reserveCapacity(int additionalCapacity) throws InterruptedException, NoCapacityAvailableException {  Collection<Ticket> tickets=mParentPool.acquire(additionalCapacity);  mLock.lock();  try {    mCapacity+=additionalCapacity;    for (    Ticket ticket : tickets) {      mParentTickets.add(ticket);    }    releaseWaitersOnTicketAvailability();  }  finally {    mLock.unlock();  }  updateCurrentTicketCount();}  }
class C{  public static <T>T mode(final T... items){  if (ArrayUtils.isNotEmpty(items)) {    final HashMap<T,MutableInt> occurrences=new HashMap<T,MutableInt>(items.length);    for (    final T t : items) {      final MutableInt count=occurrences.get(t);      if (count == null) {        occurrences.put(t,new MutableInt(1));      } else {        count.increment();      }    }    T result=null;    int max=0;    for (    final Map.Entry<T,MutableInt> e : occurrences.entrySet()) {      final int cmp=e.getValue().intValue();      if (cmp == max) {        result=null;      } else       if (cmp > max) {        max=cmp;        result=e.getKey();      }    }    return result;  }  return null;}  }
class C{  public ChildNodes(ChildNodes<? extends T> source){  this.backingList=new ArrayList<T>(source.backingList);  this.elementClass=source.elementClass;}  }
class C{  static public void assertSame(String message,Object expected,Object actual){  if (expected == actual) {    return;  }  failNotSame(message,expected,actual);}  }
class C{  public YearGrouperMediaFileNode(BasicMediaSource inSource,BasicMediaNode inParent,String inGroupLabel,java.util.Vector inDescendants,boolean groupKidsByAlbum){  super(inSource,inParent,inGroupLabel,DATATYPE_VIRTUAL,null,inDescendants);  this.groupKidsByAlbum=groupKidsByAlbum;}  }
class C{  public void visitEnd(){  if (cv != null) {    cv.visitEnd();  }}  }
class C{  public void onUpOrCancel(long time){  if (mLastPressedCloseButton != null)   mLastPressedCloseButton.onUpOrCancel();  mLastPressedCloseButton=null;  stopReorderMode();  mInteractingTab=null;  mReorderState=REORDER_SCROLL_NONE;  if (mNewTabButton.onUpOrCancel() && mModel != null) {    mTabCreator.launchNTP();  }}  }
class C{  public boolean containsAll(Collection collection){  for (Iterator i=collection.iterator(); i.hasNext(); ) {    if (!contains(i.next())) {      return false;    }  }  return true;}  }
class C{  void redraw(boolean fast){  int win_w=getWidth();  int win_h=getHeight();synchronized (main_img) {    BufferedImage ckln=new BufferedImage(MAX_WIDTH,MAX_HEIGHT,BufferedImage.TYPE_INT_ARGB);    Graphics2D bg=base_img.createGraphics();    if (!fast)     bg.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);    bg.setColor(Color.black);    bg.clearRect(0,0,win_w,win_h);    Graphics2D hg=null;    if (!fast) {      hg=height_img.createGraphics();      hg.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);      hg.setColor(Color.black);      hg.clearRect(0,0,win_w,win_h);    }synchronized (chunks) {      for (      ChunkImage chunk : chunks) {        int x=(int)((chunk.x + shift_x) * zoom_level);        int y=(int)((chunk.y + shift_y) * zoom_level);        int w=(int)(chunk.image.getWidth() * zoom_level);        int h=(int)(chunk.image.getHeight() * zoom_level);        if (x > win_w || y > win_h)         continue;        if (x + w < 0 || y + h < 0)         continue;        if (showchunks) {          ckln.createGraphics().drawLine(x,y,x + w,y);          ckln.createGraphics().drawLine(x + w,y,x + w,y + h);        }        bg.drawImage(chunk.image,x,y,w,h,null);        if (!fast)         hg.drawImage(chunk.height_map,x,y,w,h,null);      }    }    if (!fast) {      WritableRaster height_raster=height_img.getRaster();      int h, oh;      for (int x=0; x < win_w; x++)       for (int y=0; y < win_h; y++) {        h=height_raster.getSample(x,y,0);        if (x < (win_w - 1) && y < (win_h - 1))         oh=height_raster.getSample(x + 1,y + 1,0); else         oh=h;        h=h + 50 + (oh - h) * 20;        if (h < 0)         h=0;        if (h > 255)         h=255;        height_raster.setSample(x,y,0,h);      }    }    Graphics2D mg=main_img.createGraphics();    mg.drawImage(base_img,0,0,null);    if (!fast) {      mg.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,(float)(0.6)));      mg.drawImage(height_img,0,0,null);    }    if (showchunks)     mg.drawImage(ckln,0,0,null);  }}  }
class C{  @Inline public final void push(Address addr){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!addr.isZero());  checkHeadInsert(1);  uncheckedHeadInsert(addr);}  }
class C{  @org.junit.Test public void testSubtraction() throws Exception {  Bot bot=Bot.createInstance();  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  text.input("1 - 1");  String response=waitForOutput(output);  if (!response.equals("1 - 1 = 0")) {    fail("incorrect:" + response);  }  text.input("3 - 4?");  response=waitForOutput(output);  if (!response.equals("3 - 4 = -1")) {    fail("incorrect:" + response);  }  text.input("0 - 4?");  response=waitForOutput(output);  if (!response.equals("0 - 4 = -4")) {    fail("incorrect:" + response);  }  text.input("4 - 0?");  response=waitForOutput(output);  if (!response.equals("4 - 0 = 4")) {    fail("incorrect:" + response);  }  text.input("4 - 12?");  response=waitForOutput(output);  if (!response.equals("4 - 12 = -8")) {    fail("incorrect:" + response);  }  text.input("13 - 4?");  response=waitForOutput(output);  if (!response.equals("13 - 4 = 9")) {    fail("incorrect:" + response);  }  text.input("13 - 454?");  response=waitForOutput(output);  if (!response.equals("13 - 454 = -441")) {    fail("incorrect:" + response);  }  text.input("what is 9 - 99?");  response=waitForOutput(output);  if (!response.equals("9 - 99 = -90")) {    fail("incorrect:" + response);  }  text.input("what is 1 - 1 - 2 - 4 - 7?");  response=waitForOutput(output);  if (!response.equals("1 - 1 - 2 - 4 - 7 = -13")) {    fail("incorrect:" + response);  }  bot.shutdown();}  }
class C{  public Node createNode(String name,Form config) throws XMPPException {  PubSub request=createPubsubPacket(to,Type.SET,new NodeExtension(PubSubElementType.CREATE,name));  boolean isLeafNode=true;  if (config != null) {    request.addExtension(new FormNode(FormNodeType.CONFIGURE,config));    FormField nodeTypeField=config.getField(ConfigureNodeFields.node_type.getFieldName());    if (nodeTypeField != null)     isLeafNode=nodeTypeField.getValues().next().equals(NodeType.leaf.toString());  }  sendPubsubPacket(con,to,Type.SET,request);  Node newNode=isLeafNode ? new LeafNode(con,name) : new CollectionNode(con,name);  newNode.setTo(to);  nodeMap.put(newNode.getId(),newNode);  return newNode;}  }
class C{  protected void emit_N4CallableConstructorDeclaration_SemicolonKeyword_1_q(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public Assignment(String booleanAssign){  this();  addPair(booleanAssign);}  }
class C{  public Column(short initial[]){  num=0;  for (int i=0; i < initial.length; i++) {    cards[i]=initial[i];    num++;  }}  }
class C{  public boolean isSendRefererHeader(){  return sendRefererHeader;}  }
class C{  public static Script dml(String scriptString){  return dmlFromString(scriptString);}  }
class C{  public CustomEditor(){  m_fileChooser.setFileFilter(new ExtensionFileFilter(CostMatrix.FILE_EXTENSION,"Cost files"));  m_fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);  m_defaultButton=new JButton("Defaults");  m_openButton=new JButton("Open...");  m_saveButton=new JButton("Save...");  m_resizeButton=new JButton("Resize");  m_classesField=new JTextField("" + m_matrix.size());  m_defaultButton.addActionListener(this);  m_openButton.addActionListener(this);  m_saveButton.addActionListener(this);  m_resizeButton.addActionListener(this);  m_classesField.addActionListener(this);  JPanel classesPanel=new JPanel();  classesPanel.setLayout(new GridLayout(1,2,0,0));  classesPanel.add(new JLabel("Classes:",SwingConstants.RIGHT));  classesPanel.add(m_classesField);  JPanel rightPanel=new JPanel();  GridBagLayout gridBag=new GridBagLayout();  GridBagConstraints gbc=new GridBagConstraints();  rightPanel.setLayout(gridBag);  gbc.gridx=0;  gbc.gridy=GridBagConstraints.RELATIVE;  gbc.insets=new Insets(2,10,2,10);  gbc.fill=GridBagConstraints.HORIZONTAL;  gridBag.setConstraints(m_defaultButton,gbc);  rightPanel.add(m_defaultButton);  gridBag.setConstraints(m_openButton,gbc);  rightPanel.add(m_openButton);  gridBag.setConstraints(m_saveButton,gbc);  rightPanel.add(m_saveButton);  gridBag.setConstraints(classesPanel,gbc);  rightPanel.add(classesPanel);  gridBag.setConstraints(m_resizeButton,gbc);  rightPanel.add(m_resizeButton);  JPanel fill=new JPanel();  gbc.weightx=1.0;  gbc.weighty=1.0;  gbc.fill=GridBagConstraints.BOTH;  gridBag.setConstraints(fill,gbc);  rightPanel.add(fill);  m_tableModel=new CostMatrixTableModel();  m_tableModel.addTableModelListener(this);  JTable matrixTable=new JTable(m_tableModel);  setLayout(new BorderLayout());  add(matrixTable,BorderLayout.CENTER);  add(rightPanel,BorderLayout.EAST);}  }
class C{  public Block(NetworkParameters params,byte[] payloadBytes,boolean parseLazy,boolean parseRetain,int length) throws ProtocolException {  super(params,payloadBytes,0,parseLazy,parseRetain,length);}  }
class C{  public void doCut(){  jTextArea1.cut();}  }
class C{  @Override protected EClass eStaticClass(){  return TypeRefsPackage.Literals.STATIC_BASE_TYPE_REF;}  }
class C{  public void stop() throws ContainerException {  bsh=null;}  }
class C{  public static void openURL(String url){  try {    Class<?> d=Class.forName("java.awt.Desktop");    d.getDeclaredMethod("browse",new Class[]{java.net.URI.class}).invoke(d.getDeclaredMethod("getDesktop").invoke(null),new Object[]{java.net.URI.create(url)});  } catch (  Exception ignore) {    String osName=System.getProperty("os.name");    try {      if (osName.startsWith("Mac OS")) {        Class.forName("com.apple.eio.FileManager").getDeclaredMethod("openURL",new Class[]{String.class}).invoke(null,new Object[]{url});      } else       if (osName.startsWith("Windows"))       Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + url); else {        boolean found=false;        for (        String browser : browsers)         if (!found) {          found=Runtime.getRuntime().exec(new String[]{"which",browser}).waitFor() == 0;          if (found)           Runtime.getRuntime().exec(new String[]{browser,url});        }        if (!found)         throw new Exception(Arrays.toString(browsers));      }    } catch (    Exception e) {      JOptionPane.showMessageDialog(j2DClient.get().getMainFrame(),errMsg + url);    }  }}  }
class C{  private void writeObject(ObjectOutputStream out) throws ClassNotFoundException, IOException {  out.defaultWriteObject();  out.writeObject(SerializationUtils.wrap(borderStroke));}  }
class C{  public Matrix4f translationRotateScale(Vector3fc translation,Quaternionfc quat,Vector3fc scale){  return translationRotateScale(translation.x(),translation.y(),translation.z(),quat.x(),quat.y(),quat.z(),quat.w(),scale.x(),scale.y(),scale.z());}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE_NAME;case 3:return CURSOR_ID;case 4:return CLOSE;default :return null;}}  }
class C{  public void closeDDLWriter(){  closeDDLWriter(createSchemaWriter);  closeDDLWriter(dropSchemaWriter);  createSchemaWriter=null;  dropSchemaWriter=null;}  }
class C{  static public void assertSquare(IDoubleMatrix mat){  if (mat.getRowNum() != mat.getColNum()) {    throw new AdeCoreIllegalArgumentException(String.format("Expected a square matrix. Matrix size is %d x %d",mat.getRowNum(),mat.getColNum()));  }}  }
class C{  public static int findFirstDiff(char[] source,int index,char[] match){  for (int i=index; i < source.length; i++) {    if (equalsOne(source[i],match) == false) {      return i;    }  }  return -1;}  }
class C{  public static boolean checkCSSStatement(String key,String value){  return (key != null) && (value != null);}  }
class C{  protected void sequence_AnnotatedPropertyAssignment_PropertyNameValuePairSingleName(ISerializationContext context,PropertyNameValuePairSingleName semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public boolean hasPurchase(String sku){  return mPurchaseMap.containsKey(sku);}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public AccountHeaderBuilder withSelectionListEnabledForSingleProfile(boolean selectionListEnabledForSingleProfile){  this.mSelectionListEnabledForSingleProfile=selectionListEnabledForSingleProfile;  return this;}  }
class C{  protected ChangeListener createChangeListener(){  return new ModelListener();}  }
class C{  private void usingOrElse(){  Student student=null;  Student defaultStudent=new Student();  defaultStudent.setName("Default John");  Optional<Student> studentOptional=Optional.ofNullable(student);  String name=studentOptional.orElse(defaultStudent).getName();  System.out.println("Get Name: " + name);}  }
class C{  public MalformedChallengeException(String message){  super(message);}  }
class C{  @Override public int size(){  return this._set.size();}  }
class C{  protected SynapseGroupNode(NetworkPanel networkPanel,SynapseGroup group){  this.networkPanel=networkPanel;  this.synapseGroup=group;  outlinedObjects=new OutlinedObjects();  outlinedObjects.setDrawOutline(false);  interactionBox=new SynapseGroupInteractionBox(networkPanel,group);  interactionBox.setText(synapseGroup.getLabel());  addChild(outlinedObjects);  addChild(interactionBox);  interactionBox.updateText();}  }
class C{  public static void releaseQuiet(@Nullable FileLock lock){  if (lock != null)   try {    lock.release();  } catch (  Exception ignored) {  }}  }
class C{  public Builder backgroundExceptionHandler(Thread.UncaughtExceptionHandler exceptionHandler){  return set("backgroundExceptionHandler",exceptionHandler);}  }
class C{  public final static char toUpperAscii(char c){  if (isLowercaseAlpha(c)) {    c-=(char)0x20;  }  return c;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void clear(){  this.map.clear();  this.count=0;}  }
class C{  @Override public void addComment(String comment){  current.appendChild(document.createComment(comment));}  }
class C{  public Iterable<Divider> dividersThatOverlap(final Rectangle r){  if (r == null) {    throw new IllegalArgumentException("null Rectangle");  }  return dividersThatOverlap(getModel(),r);}  }
class C{  public boolean unlockIt(){  log.info(toString());  setProcessing(false);  return true;}  }
class C{  @CanIgnoreReturnValue public Stopwatch stop(){  long tick=ticker.read();  checkState(isRunning,"This stopwatch is already stopped.");  isRunning=false;  elapsedNanos+=tick - startTick;  return this;}  }
class C{  public static void assertNotNull(Object object){  assertTrue(object != null);}  }
class C{  public NamedUUID(String name,UUID uuid){  this.name=name;  this.uuid=uuid;}  }
class C{  public VolumeBarRenderer(){  configureToolTips();}  }
class C{  public void release(){  if (_parent != null && maybeDirty()) {    _parent.mergeChild(new TableInfo(this));    _mainHashShared=true;    _mainNamesShared=true;    _collListShared=true;  }}  }
class C{  public String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  public AttribKey onElement(ElKey el){  if (el.equals(this.el)) {    return this;  }  return new AttribKey(el,ns,localName);}  }
class C{  public void addRaster(float lt,float ln,int offset_x1,int offset_y1,int w,int h,int[] pix,LinkProperties properties) throws IOException {  LinkRaster.write(lt,ln,offset_x1,offset_y1,w,h,pix,properties,link.dos);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case StextPackage.TIME_EVENT_SPEC__TYPE:    setType((TimeEventType)newValue);  return;case StextPackage.TIME_EVENT_SPEC__VALUE:setValue((Expression)newValue);return;case StextPackage.TIME_EVENT_SPEC__UNIT:setUnit((TimeUnit)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public final void testToString(){  CertPath cp1=new MyCertPath(testEncoding);  assertNotNull(cp1.toString());}  }
class C{  public boolean variableExists(String key){  if (StringUtils.isEmpty(key)) {    return false;  }  key=ValidationUtil.removeVariableIdentifier(key);  return this.variables.containsKey(key);}  }
class C{  private static Type fileType(Path file){  Type type=null;  String fileName=file.getFileName().toString();  int idx=fileName.lastIndexOf('.');  if (idx != -1) {    type=extensionToType.get(fileName.substring(idx).toLowerCase(Locale.ROOT));  }  return type == null ? Type.PLAIN : type;}  }
class C{  public synchronized void updateType(final BaseType baseType,final String name,final int size,final boolean isSigned) throws CouldntSaveDataException {  Preconditions.checkNotNull(baseType,"IE02422: Base type argument can not be null.");  Preconditions.checkNotNull(name,"IE02621: Name argument can not be null.");  Preconditions.checkArgument(size >= 0,"Size argument can not be negative.");  final boolean sizeChanged=baseType.getBitSize() != size;  final ImmutableMap<BaseType,Integer> originalTypeSizes=(sizeChanged) ? captureTypeSizesState(typesContainer.getAffectedTypes(baseType)) : ImmutableMap.<BaseType,Integer>of();  backend.updateType(baseType,name,size,isSigned);  final ImmutableSet<BaseType> affectedTypes=typesContainer.updateBaseType(baseType,name,isSigned,size);  notifyTypesUpdated(affectedTypes);  notifySubstitutionsChanged(affectedTypes);  if (sizeChanged) {    ensureConsistencyAfterTypeUpdate(affectedTypes,Sets.newHashSet(affectedTypes),originalTypeSizes);  }}  }
class C{  protected void dragWholeShape(DragSelectEvent dragEvent){  Movable2 dragObject=(Movable2)this.getShape();  View view=getWwd().getView();  Globe globe=getWwd().getModel().getGlobe();  Position refPos=dragObject.getReferencePosition();  if (refPos == null)   return;  Vec4 refPoint=globe.computePointFromPosition(refPos);  Vec4 screenRefPoint=view.project(refPoint);  int dx=dragEvent.getPickPoint().x - dragEvent.getPreviousPickPoint().x;  int dy=dragEvent.getPickPoint().y - dragEvent.getPreviousPickPoint().y;  double x=screenRefPoint.x + dx;  double y=dragEvent.getMouseEvent().getComponent().getSize().height - screenRefPoint.y + dy - 1;  Line ray=view.computeRayFromScreenPoint(x,y);  Intersection inters[]=globe.intersect(ray,refPos.getElevation());  if (inters != null) {    Position p=globe.computePositionFromPoint(inters[0].getIntersectionPoint());    dragObject.moveTo(getWwd().getModel().getGlobe(),new Position(p,((Movable2)this.getShape()).getReferencePosition().getAltitude()));  }  this.adjustShape();}  }
class C{  public static Object deserialization(String filePath){  ObjectInputStream in=null;  try {    in=new ObjectInputStream(new FileInputStream(filePath));    Object o=in.readObject();    in.close();    return o;  } catch (  FileNotFoundException e) {    throw new RuntimeException("FileNotFoundException occurred. ",e);  }catch (  ClassNotFoundException e) {    throw new RuntimeException("ClassNotFoundException occurred. ",e);  }catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (in != null) {      try {        in.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }}  }
class C{  public List<CssSelector> parse(){  try {    lexer.yylex();    if (lexer.selectors.isEmpty()) {      return null;    }    CssSelector last=lexer.selectors.get(lexer.selectors.size() - 1);    if (last.getCombinator() == Combinator.DESCENDANT) {      last.setCombinator(null);    }    CssSelector prevCssSelector=null;    for (    CssSelector cssSelector : lexer.selectors) {      if (prevCssSelector != null) {        cssSelector.setPrevCssSelector(prevCssSelector);      }      prevCssSelector=cssSelector;    }    return lexer.selectors;  } catch (  IOException ioex) {    throw new CSSellyException(ioex);  }}  }
class C{  protected Dispatcher createContentDispatcher(){  return new NSContentDispatcher();}  }
class C{  public OperationStateException(String message){  super(message);}  }
class C{  public Message(Message other){  if (other.isSetSessionIDs()) {    List<String> __this__sessionIDs=new ArrayList<String>();    for (    String other_element : other.sessionIDs) {      __this__sessionIDs.add(other_element);    }    this.sessionIDs=__this__sessionIDs;  }  if (other.isSetPacket()) {    this.packet=new Packet(other.packet);  }}  }
class C{  public void removeAction(String action){  actions.remove(action);}  }
class C{  public static String quote(String string){  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    try {      return quote(string,sw).toString();    } catch (    IOException ignored) {      return "";    }  }}  }
class C{  public void initializeAllProcessors(UimaContext aContext){  for (  Priority prio : processorNames.keySet()) {    for (    String pn : processorNames.get(prio)) {      try {        Class<?> c=Class.forName(pn);        GenericProcessor p=(GenericProcessor)c.newInstance();        p.initialize(aContext);        processors.get(prio).add(p);      } catch (      Exception exception) {        exception.printStackTrace();        Logger.printError(component,"Unable to initialize registered Processor " + pn + ", got: "+ exception.toString());        System.exit(-1);      }    }  }  this.initialized=true;}  }
class C{  private void saveInitialChildState(FacesContext facesContext,UIComponent component){  if (component instanceof EditableValueHolder && !component.isTransient()) {    String clientId=component.getClientId(facesContext);    SavedState state=new SavedState();    initialChildState.put(clientId,state);    state.populate((EditableValueHolder)component);  }  Iterator<UIComponent> iterator=component.getFacetsAndChildren();  while (iterator.hasNext()) {    saveChildState(facesContext,iterator.next());  }}  }
class C{  public static void addChemicalInjectionChamberRecipe(ItemStack input,String gasName,ItemStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addChemicalInjectionChamberRecipe",ItemStack.class,String.class,ItemStack.class);    m.invoke(null,input,gasName,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  @Override public String serialize(final boolean includingBuiltIn){  if (deprecated != null) {    return "";  }  if (SymbolSerializer.uselessFacets.contains(name)) {    return "";  }  return name + (optional ? ": optional" : ": required") + " ("+ (types.length < 2 ? typesToString().substring(1) : typesToString())+ ")";}  }
class C{  public void pasteSubgraph(List graphElements,Point upperLeft){  Point oldUpperLeft=EditorUtils.getTopLeftPoint(graphElements);  int deltaX=upperLeft.x - oldUpperLeft.x;  int deltaY=upperLeft.y - oldUpperLeft.y;  for (  Object graphElement : graphElements) {    if (graphElement instanceof Node) {      Node node=(Node)graphElement;      adjustNameAndPosition(node,deltaX,deltaY);      getWorkbench().getGraph().addNode(node);    } else     if (graphElement instanceof Edge) {      getWorkbench().getGraph().addEdge((Edge)graphElement);    } else {      throw new IllegalArgumentException("The list of session " + "elements should contain only SessionNodeWrappers " + "and SessionEdges: "+ graphElement);    }  }}  }
class C{  @Deprecated public static void drag(ActivityInstrumentationTestCase test,float fromX,float toX,float fromY,float toY,int stepCount){  drag((InstrumentationTestCase)test,fromX,toX,fromY,toY,stepCount);}  }
class C{  public static byte randomByte(int max){  return (byte)random.nextInt(max + 1);}  }
class C{  @RequestMapping(value={"/optionslist"},method=RequestMethod.POST) @ResponseBody public RestWrapperOptions listOptions(){  RestWrapperOptions restWrapperOptions=null;  try {    List<WorkflowType> workflowTypes=new ArrayList<WorkflowType>();    List<com.wipro.ats.bdre.md.dao.jpa.WorkflowType> jpaWorkflowTypes=workflowTypeDAO.list(0,0);    for (    com.wipro.ats.bdre.md.dao.jpa.WorkflowType wfType : jpaWorkflowTypes) {      WorkflowType workflowType=new WorkflowType();      workflowType.setWorkflowId(wfType.getWorkflowId());      workflowType.setWorkflowTypeName(wfType.getWorkflowTypeName());      workflowType.setCounter(jpaWorkflowTypes.size());      workflowTypes.add(workflowType);    }    LOGGER.debug(workflowTypes.get(0).getWorkflowId());    if (workflowTypes.get(0).getWorkflowId() == 0) {      workflowTypes.remove(0);    }    List<RestWrapperOptions.Option> options=new ArrayList<RestWrapperOptions.Option>();    for (    WorkflowType type : workflowTypes) {      RestWrapperOptions.Option option=new RestWrapperOptions.Option(type.getWorkflowTypeName(),type.getWorkflowId());      options.add(option);      LOGGER.debug(option.getDisplayText());    }    restWrapperOptions=new RestWrapperOptions(options,RestWrapperOptions.OK);  } catch (  Exception e) {    LOGGER.error(e);    restWrapperOptions=new RestWrapperOptions(e.getMessage(),RestWrapperOptions.ERROR);  }  return restWrapperOptions;}  }
class C{  public void attrModified(Attr node,String oldv,String newv){  if (!mutate) {    value=cssEngine.parsePropertyValue(SVGStylableElement.this,property,newv);  }}  }
class C{  public RoleExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  private void lookAheadCase(int regExpNum){  if (getLookAhead(regExpNum) != null) {    RegExp r1=getRegExp(regExpNum);    RegExp r2=getLookAhead(regExpNum);    Action a=getAction(regExpNum);    int len1=SemCheck.length(r1);    int len2=SemCheck.length(r2);    if (len1 >= 0) {      a.setLookAction(Action.FIXED_BASE,len1);    } else     if (len2 >= 0) {      a.setLookAction(Action.FIXED_LOOK,len2);    } else     if (SemCheck.isFiniteChoice(r2)) {      a.setLookAction(Action.FINITE_CHOICE,0);    } else {      a.setLookAction(Action.GENERAL_LOOK,0);      look_entry.setElementAt(new Integer(gen_look_count),regExpNum);      gen_look_count++;    }  }}  }
class C{  public MemcacheClientBuilder<V> withMetrics(final Metrics metrics){  this.metrics=metrics;  return this;}  }
class C{  @DSSink({DSSinkKind.SYNCHRONIZATION_DATA}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.550 -0500",hash_original_method="EEAA69B320108852E46A6304535CC9F5",hash_generated_method="D642B9F06D082255CC2F6570E4A84B40") public Message sendMessageSynchronously(int what,int arg1,int arg2,Object obj){  Message msg=Message.obtain();  msg.what=what;  msg.arg1=arg1;  msg.arg2=arg2;  msg.obj=obj;  Message resultMsg=sendMessageSynchronously(msg);  return resultMsg;}  }
class C{  public Expression(){  super();  setExpression(defaultExpression());}  }
class C{  private boolean scrollToChildRect(Rect rect,boolean immediate){  final int delta=computeScrollDeltaToGetChildRectOnScreen(rect);  final boolean scroll=delta != 0;  if (scroll) {    if (immediate) {      scrollBy(0,delta);    } else {      smoothScrollBy(0,delta);    }  }  return scroll;}  }
class C{  Node(Object item,boolean isData){  UNSAFE.putObject(this,itemOffset,item);  this.isData=isData;}  }
class C{  private void appendMultiPolygonText(MultiPolygon multiPolygon,int level,Writer writer) throws IOException {  if (multiPolygon.isEmpty()) {    writer.write("EMPTY");  } else {    int level2=level;    boolean doIndent=false;    writer.write("(");    for (int i=0; i < multiPolygon.getNumGeometries(); i++) {      if (i > 0) {        writer.write(", ");        level2=level + 1;        doIndent=true;      }      appendPolygonText((Polygon)multiPolygon.getGeometryN(i),level2,doIndent,writer);    }    writer.write(")");  }}  }
class C{  public static void validateKeyFields(ARecordType recType,ARecordType metaRecType,List<List<String>> keyFieldNames,List<Integer> keySourceIndicators,List<IAType> keyFieldTypes,IndexType indexType) throws AsterixException {  List<IAType> fieldTypes=KeyFieldTypeUtils.getKeyTypes(recType,metaRecType,keyFieldNames,keySourceIndicators);  int pos=0;  boolean openFieldCompositeIdx=false;  for (  IAType fieldType : fieldTypes) {    List<String> fieldName=keyFieldNames.get(pos);    if (fieldType == null) {      fieldType=keyFieldTypes.get(pos);      if (keyFieldTypes.get(pos) == BuiltinType.AMISSING) {        throw new AsterixException("A field with this name  \"" + fieldName + "\" could not be found.");      }    } else     if (openFieldCompositeIdx) {      throw new AsterixException("A closed field \"" + fieldName + "\" could be only in a prefix part of the composite index, containing opened field.");    }    if (keyFieldTypes.get(pos) != BuiltinType.AMISSING && fieldType.getTypeTag() != keyFieldTypes.get(pos).getTypeTag()) {      throw new AsterixException("A field \"" + fieldName + "\" is already defined with the type \""+ fieldType+ "\"");    }switch (indexType) {case BTREE:switch (fieldType.getTypeTag()) {case INT8:case INT16:case INT32:case INT64:case FLOAT:case DOUBLE:case STRING:case BINARY:case DATE:case TIME:case DATETIME:case UNION:case UUID:case YEARMONTHDURATION:case DAYTIMEDURATION:        break;default :      throw new AsterixException("The field \"" + fieldName + "\" which is of type "+ fieldType.getTypeTag()+ " cannot be indexed using the BTree index.");  }break;case RTREE:switch (fieldType.getTypeTag()) {case POINT:case LINE:case RECTANGLE:case CIRCLE:case POLYGON:case UNION:break;default :throw new AsterixException("The field \"" + fieldName + "\" which is of type "+ fieldType.getTypeTag()+ " cannot be indexed using the RTree index.");}break;case LENGTH_PARTITIONED_NGRAM_INVIX:switch (fieldType.getTypeTag()) {case STRING:case UNION:break;default :throw new AsterixException("The field \"" + fieldName + "\" which is of type "+ fieldType.getTypeTag()+ " cannot be indexed using the Length Partitioned N-Gram index.");}break;case LENGTH_PARTITIONED_WORD_INVIX:switch (fieldType.getTypeTag()) {case STRING:case UNORDEREDLIST:case ORDEREDLIST:case UNION:break;default :throw new AsterixException("The field \"" + fieldName + "\" which is of type "+ fieldType.getTypeTag()+ " cannot be indexed using the Length Partitioned Keyword index.");}break;case SINGLE_PARTITION_NGRAM_INVIX:switch (fieldType.getTypeTag()) {case STRING:case UNION:break;default :throw new AsterixException("The field \"" + fieldName + "\" which is of type "+ fieldType.getTypeTag()+ " cannot be indexed using the N-Gram index.");}break;case SINGLE_PARTITION_WORD_INVIX:switch (fieldType.getTypeTag()) {case STRING:case UNORDEREDLIST:case ORDEREDLIST:case UNION:break;default :throw new AsterixException("The field \"" + fieldName + "\" which is of type "+ fieldType.getTypeTag()+ " cannot be indexed using the Keyword index.");}break;default :throw new AsterixException("Invalid index type: " + indexType + ".");}pos++;}}  }
class C{  public void addSectionHandling(String name,EnumMap<SIT,EnumMap<CIT,Boolean>> sh){  sectionHandling.put(SectionType.USER_SECTION.toString() + name.toUpperCase(),sh);}  }
class C{  public static SecretKeys generateKeyFromPassword(String password,byte[] salt) throws GeneralSecurityException {  fixPrng();  KeySpec keySpec=new PBEKeySpec(password.toCharArray(),salt,PBE_ITERATION_COUNT,AES_KEY_LENGTH_BITS + HMAC_KEY_LENGTH_BITS);  SecretKeyFactory keyFactory=SecretKeyFactory.getInstance(PBE_ALGORITHM);  byte[] keyBytes=keyFactory.generateSecret(keySpec).getEncoded();  byte[] confidentialityKeyBytes=copyOfRange(keyBytes,0,AES_KEY_LENGTH_BITS / 8);  byte[] integrityKeyBytes=copyOfRange(keyBytes,AES_KEY_LENGTH_BITS / 8,AES_KEY_LENGTH_BITS / 8 + HMAC_KEY_LENGTH_BITS / 8);  SecretKey confidentialityKey=new SecretKeySpec(confidentialityKeyBytes,CIPHER);  SecretKey integrityKey=new SecretKeySpec(integrityKeyBytes,HMAC_ALGORITHM);  return new SecretKeys(confidentialityKey,integrityKey);}  }
class C{  public int count(int value){  int count=0;  for (int i=0; i != coeffs.length; i++) {    if (coeffs[i] == value) {      count++;    }  }  return count;}  }
class C{  public static org.oscm.vo.VOTechnicalService convertToApi(org.oscm.internal.vo.VOTechnicalService oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOTechnicalService newVO=new org.oscm.vo.VOTechnicalService();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setEventDefinitions(convertToApiVOEventDefinition(oldVO.getEventDefinitions()));  newVO.setTechnicalServiceId(oldVO.getTechnicalServiceId());  newVO.setTechnicalServiceBuildId(oldVO.getTechnicalServiceBuildId());  newVO.setAccessType(EnumConverter.convert(oldVO.getAccessType(),org.oscm.types.enumtypes.ServiceAccessType.class));  newVO.setTechnicalServiceDescription(oldVO.getTechnicalServiceDescription());  newVO.setBaseUrl(oldVO.getBaseUrl());  newVO.setProvisioningUrl(oldVO.getProvisioningUrl());  newVO.setLoginPath(oldVO.getLoginPath());  newVO.setProvisioningVersion(oldVO.getProvisioningVersion());  newVO.setParameterDefinitions(convertToApiVOParameterDefinition(oldVO.getParameterDefinitions()));  newVO.setRoleDefinitions(convertToApiVORoleDefinition(oldVO.getRoleDefinitions()));  newVO.setTags(oldVO.getTags());  newVO.setLicense(oldVO.getLicense());  newVO.setAccessInfo(oldVO.getAccessInfo());  newVO.setTechnicalServiceOperations(convertToApiVOTechnicalServiceOperation(oldVO.getTechnicalServiceOperations()));  newVO.setExternalBilling(oldVO.isExternalBilling());  return newVO;}  }
class C{  public void selectAllPhotosUpTo(int targetIndex,MediaAdapter adapter){  int indexRightBeforeOrAfter=-1;  int indexNow;  for (  Media sm : selectedMedias) {    indexNow=media.indexOf(sm);    if (indexRightBeforeOrAfter == -1)     indexRightBeforeOrAfter=indexNow;    if (indexNow > targetIndex)     break;    indexRightBeforeOrAfter=indexNow;  }  if (indexRightBeforeOrAfter != -1) {    for (int index=Math.min(targetIndex,indexRightBeforeOrAfter); index <= Math.max(targetIndex,indexRightBeforeOrAfter); index++) {      if (media.get(index) != null) {        if (!media.get(index).isSelected()) {          media.get(index).setSelected(true);          selectedMedias.add(media.get(index));          adapter.notifyItemChanged(index);        }      }    }  }}  }
class C{  public VCardValidateChecker versions(VCardVersion... versions){  this.versions=versions;  return this;}  }
class C{  public void hasBody(boolean hasBody){  this.hasBody=hasBody;}  }
class C{  public final Builder addItem(final int id,@NonNull final CharSequence title,@Nullable final Drawable icon){  bottomSheet.addItem(id,title,icon);  return this;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public Boolean isVirtualExecUsageSupported(){  return virtualExecUsageSupported;}  }
class C{  public TestHarness(Path solrHome,String solrXml){  this(new SolrResourceLoader(solrHome),solrXml);}  }
class C{  private boolean isFilePoolMatchedRequestedProtocols(StoragePool pool,Set<String> protocolsRequested){  boolean isMatched=false;  StringSet poolProtocols=pool.getProtocols();  if (poolProtocols.contains(StorageProtocol.File.NFS_OR_CIFS.name()) && protocolsRequested.size() == 1) {    Iterator<String> it=protocolsRequested.iterator();    String protocol=it.next();    if (protocol.equalsIgnoreCase(StorageProtocol.File.NFS.name()) || protocol.equalsIgnoreCase(StorageProtocol.File.CIFS.name()) || protocol.equalsIgnoreCase(StorageProtocol.File.NFSv4.name())) {      isMatched=true;    }  }  return isMatched;}  }
class C{  @Override public void decrypt(byte[] buffer){  int nLen=buffer.length;  long lTemp;  for (int nI=0; nI < nLen; nI+=8) {    lTemp=BinConverter.byteArrayToLong(buffer,nI);    lTemp=decryptBlock(lTemp);    BinConverter.longToByteArray(lTemp,buffer,nI);  }  ;}  }
class C{  public static ArrayList<Integer> largestColumn(int[][] array){  ArrayList<Integer> index=new ArrayList<Integer>();  int[] count=new int[array.length];  for (int i=0; i < array.length; i++) {    for (int j=0; j < array[i].length; j++) {      if (array[i][j] == 1)       count[j]++;    }  }  int max=max(count);  getIndex(index,count,max);  return index;}  }
class C{  public static boolean isMainThread(){  return Looper.getMainLooper() == Looper.myLooper();}  }
class C{  protected N4MemberAnnotationListImpl(){  super();}  }
class C{  private void copy(File from,OutputStream to) throws IOException {  InputStream in=new FileInputStream(from);  try {    copy(in,to);  }  finally {    in.close();  }}  }
class C{  static void errorMissingPCData(String systemID,int lineNr,String parentElementName) throws XMLValidationException {  throw new XMLValidationException(XMLValidationException.MISSING_PCDATA,systemID,lineNr,null,null,null,"Missing #PCDATA in element " + parentElementName);}  }
class C{  public static boolean disjoint(Collection<?> c1,Collection<?> c2){  if ((c1 instanceof Set) && !(c2 instanceof Set) || (c2.size()) > c1.size()) {    Collection<?> tmp=c1;    c1=c2;    c2=tmp;  }  Iterator<?> it=c1.iterator();  while (it.hasNext()) {    if (c2.contains(it.next())) {      return false;    }  }  return true;}  }
class C{  @Override void closeConnection(){  if (mSuspended) {    restartConnection(false);  }  try {    if (mHttpClientConnection != null && mHttpClientConnection.isOpen()) {      mHttpClientConnection.close();    }  } catch (  IOException e) {    if (HttpLog.LOGV)     HttpLog.v("HttpsConnection.closeConnection():" + " failed closing connection " + mHost);    e.printStackTrace();  }}  }
class C{  public boolean isFileExtExist(String fileExt){  return WinRegistryUtil.isFileExtExist(fileExt);}  }
class C{  public static Query newBoxQuery(final String field,final double minLatitude,final double maxLatitude,final double minLongitude,final double maxLongitude){  final GeoShape shape=Geo3DUtil.fromBox(minLatitude,maxLatitude,minLongitude,maxLongitude);  return newShapeQuery(field,shape);}  }
class C{  static private byte[] toBytes(ASN1OctetString[] octs){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  for (int i=0; i != octs.length; i++) {    try {      DEROctetString o=(DEROctetString)octs[i];      bOut.write(o.getOctets());    } catch (    ClassCastException e) {      throw new IllegalArgumentException(octs[i].getClass().getName() + " found in input should only contain DEROctetString");    }catch (    IOException e) {      throw new IllegalArgumentException("exception converting octets " + e.toString());    }  }  return bOut.toByteArray();}  }
class C{  public void updateCharacterStream(int columnIndex,java.io.Reader x,long length) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  @Interruptible public static Address initializeArrayHeader(BootImageInterface bootImage,Address ptr,TIB tib,int size,int numElements,boolean needsIdentityHash,int identityHashValue){  Address ref=ptr.plus(OBJECT_REF_OFFSET);  if (needsIdentityHash) {    bootImage.setFullWord(ref.plus(STATUS_OFFSET),HASH_STATE_HASHED_AND_MOVED.toInt());    if (DYNAMIC_HASH_OFFSET) {      RVMType t=tib.getType();      bootImage.setFullWord(ptr.plus(t.asArray().getInstanceSize(numElements)),identityHashValue);    } else {      ref=ref.plus(HASHCODE_BYTES);      bootImage.setFullWord(ref.plus(HASHCODE_OFFSET),(identityHashValue << 1) | ALIGNMENT_MASK);    }  } else {    bootImage.setFullWord(ref.plus(STATUS_OFFSET),HASH_STATE_HASHED.toInt());  }  return ref;}  }
class C{  public String reportTotals(){  final long elapsed=elapsed();  final long tripleCount=getTripleCount();  final double tps=(long)(((double)tripleCount) / ((double)elapsed) * 1000d);  return "Processed: #terms=" + getTermCount() + " ("+ getTermNotFoundCount()+ " not found), #stmts="+ tripleCount+ " ("+ getTripleNotFoundCount()+ " not found)"+ ", rate="+ tps+ " in "+ elapsed+ " ms.";}  }
class C{  public void add(ReadablePeriod period){  super.addPeriod(period);}  }
class C{  public NativeFont(String platName,boolean isBitmapDelegate) throws FontFormatException {  throw new FontFormatException("NativeFont not used on Windows");}  }
class C{  public static boolean startsWithIgnoreCaseAndWs(String searchIn,String searchFor,int beginPos){  if (searchIn == null) {    return searchFor == null;  }  int inLength=searchIn.length();  for (; beginPos < inLength; beginPos++) {    if (!Character.isWhitespace(searchIn.charAt(beginPos))) {      break;    }  }  return startsWithIgnoreCase(searchIn,beginPos,searchFor);}  }
class C{  public static String removeBeginningAndEndingQuotes(String input){  if (input == null || !input.startsWith("\"") || !input.endsWith("\"")) {    return input;  }  return input.substring(1,input.length() - 1);}  }
class C{  protected void verifyFileSize(ParcelFileDescriptor pfd,long size){  assertEquals(pfd.getStatSize(),size);}  }
class C{  public boolean isGenericSuperTypeOf(GenericClass subType){  return GenericTypeReflector.isSuperType(type,subType.getType());}  }
class C{  private static int internalIntersectionSize(DBIDs first,DBIDs second){  int c=0;  for (DBIDIter it=first.iter(); it.valid(); it.advance()) {    if (second.contains(it)) {      c++;    }  }  return c;}  }
class C{  public synchronized final int evictionCount(){  return evictionCount;}  }
class C{  public Text plus(String str){  Text merge=this.append(str);  return merge != null ? merge : concat(Text.valueOf(str));}  }
class C{  public void restoreDefaults(){  restoreDefaults(true);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (queued_1: ");  result.append(queued_1);  result.append(", name_1: ");  result.append(name_1);  result.append(')');  return result.toString();}  }
class C{  public boolean isRedirect(){switch (code) {case HTTP_PERM_REDIRECT:case HTTP_TEMP_REDIRECT:case HTTP_MULT_CHOICE:case HTTP_MOVED_PERM:case HTTP_MOVED_TEMP:case HTTP_SEE_OTHER:    return true;default :  return false;}}  }
class C{  public static IO<String> readLine(){  return readLine(Nothing.instance);}  }
class C{  public void player(IPlayer player){  if (player != xPlayer && player != oPlayer) {    throw new IllegalArgumentException("Unable to set player to non-existing X or O player.");  }  currentPlayer=player;}  }
class C{  protected double computePLOFs(Relation<O> relation,KNNQuery<O> knn,WritableDoubleDataStore pdists,WritableDoubleDataStore plofs){  FiniteProgress progressPLOFs=LOG.isVerbose() ? new FiniteProgress("PLOFs for objects",relation.size(),LOG) : null;  double nplof=0.;  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    final KNNList neighbors=knn.getKNNForDBID(iditer,kcomp + 1);    int ks=0;    double sum=0.;    for (DBIDIter neighbor=neighbors.iter(); neighbor.valid() && ks < kcomp; neighbor.advance()) {      if (DBIDUtil.equal(neighbor,iditer)) {        continue;      }      sum+=pdists.doubleValue(neighbor);      ks++;    }    double plof=MathUtil.max(pdists.doubleValue(iditer) * ks / sum,1.0);    if (Double.isNaN(plof) || Double.isInfinite(plof)) {      plof=1.0;    }    plofs.putDouble(iditer,plof);    nplof+=(plof - 1.0) * (plof - 1.0);    LOG.incrementProcessed(progressPLOFs);  }  LOG.ensureCompleted(progressPLOFs);  nplof=lambda * Math.sqrt(nplof / relation.size());  if (LOG.isDebuggingFine()) {    LOG.debugFine("nplof normalization factor is " + nplof);  }  return nplof > 0. ? nplof : 1.;}  }
class C{  protected void dispatchMouseWheelEvent(MouseWheelEvent evt){  if (lastHit != null) {    processMouseWheelEvent(new GraphicsNodeMouseWheelEvent(lastHit,evt.getID(),evt.getWhen(),evt.getModifiersEx(),getCurrentLockState(),evt.getWheelRotation()));  }}  }
class C{  public String toString(){  updateMeanAndVariance();  return "Mean: " + m_Mean + "\t"+ "Variance: "+ m_Variance;}  }
class C{  private DrawableHolder addAnimation(ObjectAnimator anim,boolean overwrite){  if (anim != null)   mAnimators.add(anim);  mNeedToStart.add(anim);  return this;}  }
class C{  public int size(){  return intSet.size();}  }
class C{  public void testFinalBlock() throws Exception {  Directory d=newDirectory();  IndexWriter w=new IndexWriter(d,new IndexWriterConfig(new MockAnalyzer(random())));  for (int i=0; i < 25; i++) {    Document doc=new Document();    doc.add(newStringField("field",Character.toString((char)(97 + i)),Field.Store.NO));    doc.add(newStringField("field","z" + Character.toString((char)(97 + i)),Field.Store.NO));    w.addDocument(doc);  }  w.forceMerge(1);  DirectoryReader r=DirectoryReader.open(w);  assertEquals(1,r.leaves().size());  FieldReader field=(FieldReader)r.leaves().get(0).reader().fields().terms("field");  Stats stats=field.getStats();  assertEquals(0,stats.floorBlockCount);  assertEquals(2,stats.nonFloorBlockCount);  r.close();  w.close();  d.close();}  }
class C{  public CoalesceAnimation3D(CoalesceConfig rootConfig){  mCoalesceObjects=Collections.synchronizedList(new CopyOnWriteArrayList<CoalesceConfig>());  mThetaRanges=Collections.synchronizedList(new CopyOnWriteArrayList<Double>());  mTransformable3D=rootConfig.object;  mCoalesceObjects.add(rootConfig);  mThetaRanges.add(rootConfig.spiral.calculateThetaForRadius(rootConfig.endProximity));}  }
class C{  public synchronized void start() throws IllegalStateException, IOException {  configure();  if (!mStreaming) {    super.start();  }}  }
class C{  public static boolean symbolTableEquals(final SymbolTable first,final SymbolTable second){  if (first == second) {    return true;  }  if ((first != null && second == null) || (first == null && second != null)) {    return false;  }  if (first.isSystemTable() != second.isSystemTable()) {    return false;  }  if (first.isSharedTable() != second.isSharedTable()) {    return false;  }  if (first.isLocalTable() != second.isLocalTable()) {    return false;  }  if (!equals(first.getName(),second.getName())) {    return false;  }  if (first.getVersion() != second.getVersion()) {    return false;  }  if (first.getMaxId() != second.getMaxId()) {    return false;  }  final SymbolTable[] firstImports=first.getImportedTables();  final SymbolTable[] secondImports=second.getImportedTables();  if (firstImports != null && secondImports == null) {    return false;  }  if (firstImports == null && secondImports != null) {    return false;  }  if (firstImports != null && secondImports != null) {    if (firstImports.length != secondImports.length) {      return false;    }    for (int i=0; i < firstImports.length; i++) {      if (!symbolTableEquals(firstImports[i],secondImports[i])) {        return false;      }    }  }  final Iterator<String> firstSymbols=first.iterateDeclaredSymbolNames();  final Iterator<String> secondSymbols=second.iterateDeclaredSymbolNames();  while (firstSymbols.hasNext() && secondSymbols.hasNext()) {    final String firstNextSymbol=firstSymbols.next();    final String secondNextSymbol=secondSymbols.next();    if (!equals(firstNextSymbol,secondNextSymbol)) {      return false;    }  }  if (firstSymbols.hasNext() != secondSymbols.hasNext()) {    return false;  }  return true;}  }
class C{  public Where<T> reset(){  clause=null;  return this;}  }
class C{  public Iterator<E> iterator(){  return new Itr();}  }
class C{  public XMLParserNotification(Object source,String notificationType,XMLEvent event,String msg,Object oldValue,Object newValue){  super(source,notificationType,oldValue,newValue);  this.notificationSource=source;  this.notificationType=notificationType;  this.event=event;  this.message=msg;  if (newValue instanceof Exception)   this.exception=(Exception)newValue;}  }
class C{  public T caseAssociation_(Association_ object){  return null;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void shoot(Asteroids asteroids){  if (bulletCountdown <= 0) {    bulletCountdown=BULLET_COUNTDOWN;    MutableDouble2D v2=new MutableDouble2D(velocity);    v2.x+=Bullet.VELOCITY * Math.cos(orientation);    v2.y+=Bullet.VELOCITY * Math.sin(orientation);    Double2D location=asteroids.field.getObjectLocation(this);    Double2D l2=new Double2D(location.x + (MAXIMUM_RADIUS + 1) * Math.cos(orientation),location.y + (MAXIMUM_RADIUS + 1) * Math.sin(orientation));    Bullet b=new Bullet(asteroids,v2,l2,Bullet.LIFETIME);  }}  }
class C{  public void credentials(SecurityCredentials creds){  this.creds=creds;}  }
class C{  public center addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public IRTMPEvent decodeMessage(RTMP rtmp,Header header,IoBuffer in){  IRTMPEvent message;  byte dataType=header.getDataType();switch (dataType) {case TYPE_CHUNK_SIZE:    message=decodeChunkSize(in);  break;case TYPE_ABORT:message=decodeAbort(in);break;case TYPE_INVOKE:message=decodeInvoke(in,rtmp);break;case TYPE_NOTIFY:if (header.getStreamId() == 0) {message=decodeNotify(in,header,rtmp);} else {message=decodeStreamMetadata(in,rtmp);}break;case TYPE_PING:message=decodePing(in);break;case TYPE_BYTES_READ:message=decodeBytesRead(in);break;case TYPE_AUDIO_DATA:message=decodeAudioData(in);break;case TYPE_VIDEO_DATA:message=decodeVideoData(in);break;case TYPE_FLEX_SHARED_OBJECT:message=decodeFlexSharedObject(in,rtmp);break;case TYPE_SHARED_OBJECT:message=decodeSharedObject(in,rtmp);break;case TYPE_SERVER_BANDWIDTH:message=decodeServerBW(in);break;case TYPE_CLIENT_BANDWIDTH:message=decodeClientBW(in);break;case TYPE_FLEX_MESSAGE:message=decodeFlexMessage(in,rtmp);break;case TYPE_FLEX_STREAM_SEND:message=decodeFlexStreamSend(in);break;case TYPE_AGGREGATE:message=decodeAggregate(in);break;default :log.warn("Unknown object type: {}",dataType);message=decodeUnknown(dataType,in);break;}return message;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.HISTORY_ENTRY__INITIAL_STEP:    return initialStep != null;case SexecPackage.HISTORY_ENTRY__DEEP:  return deep != DEEP_EDEFAULT;case SexecPackage.HISTORY_ENTRY__REGION:return region != null;case SexecPackage.HISTORY_ENTRY__HISTORY_STEP:return historyStep != null;}return super.eIsSet(featureID);}  }
class C{  protected void append(Node newNode) throws org.xml.sax.SAXException {  Node currentNode=m_currentNode;  if (null != currentNode) {    currentNode.appendChild(newNode);  } else   if (null != m_docFrag) {    m_docFrag.appendChild(newNode);  } else {    boolean ok=true;    short type=newNode.getNodeType();    if (type == Node.TEXT_NODE) {      String data=newNode.getNodeValue();      if ((null != data) && (data.trim().length() > 0)) {        throw new org.xml.sax.SAXException("Warning: can't output text before document element!  Ignoring...");      }      ok=false;    } else     if (type == Node.ELEMENT_NODE) {      if (m_doc.getDocumentElement() != null) {        throw new org.xml.sax.SAXException("Can't have more than one root on a DOM!");      }    }    if (ok)     m_doc.appendChild(newNode);  }}  }
class C{  protected void verifyCGSnapshotRequest(){  throw APIException.badRequests.fullCopyNotSupportedForConsistencyGroup();}  }
class C{  @Override protected void initListeners(){}  }
class C{  @Deprecated public BitmapDrawable(Bitmap bitmap){  this(new BitmapState(bitmap),null);}  }
class C{  private void executeSearch(String[] args) throws IOException, ServiceException, DocumentListException {  if (args.length == 2) {    HashMap<String,String> searchParameters=new HashMap<String,String>();    searchParameters.put("q",args[1]);    DocumentListFeed feed=documentList.search(searchParameters);    out.println("Results for [" + args[1] + "]");    for (    DocumentListEntry entry : feed.getEntries()) {      printDocumentEntry(entry);    }  } else {    printMessage(COMMAND_HELP_SEARCH);  }}  }
class C{  Item(final int index,final Item i){  this.index=index;  type=i.type;  intVal=i.intVal;  longVal=i.longVal;  strVal1=i.strVal1;  strVal2=i.strVal2;  strVal3=i.strVal3;  hashCode=i.hashCode;}  }
class C{  public void assertGrabPoints(){  OMGraphic omg=getGraphic();  if (omg == null)   return;  int rt=omg.getRenderType();  if (rt != lastRenderType) {    clearGrabPoints();    lastRenderType=rt;  }  if (gpnw == null) {    gpnw=new GrabPoint(-1,-1);    gPoints[NW_POINT_INDEX]=gpnw;  }  if (gpne == null) {    gpne=new GrabPoint(-1,-1);    gPoints[NE_POINT_INDEX]=gpne;  }  if (gpsw == null) {    gpsw=new GrabPoint(-1,-1);    gPoints[SW_POINT_INDEX]=gpsw;  }  if (gpse == null) {    gpse=new GrabPoint(-1,-1);    gPoints[SE_POINT_INDEX]=gpse;  }  if (gpc == null) {    gpc=new OffsetGrabPoint(-1,-1);    gPoints[CENTER_POINT_INDEX]=gpc;    if (getGraphic().getRenderType() != OMGraphic.RENDERTYPE_LATLON) {      gpc.addGrabPoint(gpnw);      gpc.addGrabPoint(gpne);      gpc.addGrabPoint(gpsw);      gpc.addGrabPoint(gpse);    }  }  if (gpo == null) {    gpo=new OffsetGrabPoint(-1,-1);    gPoints[OFFSET_POINT_INDEX]=gpo;    gpo.addGrabPoint(gpc);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.811 -0400",hash_original_method="7F3FA848D774B0E8E97D2C379EE0C684",hash_generated_method="224DD502B8D64AE54B9B850DB5F4777F") @Override public int available(){  long avail=size - position;  if (avail <= 0) {    return 0;  } else   if (avail > Integer.MAX_VALUE) {    return Integer.MAX_VALUE;  } else {    return (int)avail;  }}  }
class C{  public static void clearConfiguration(String configDefFilePath){  configurationsCache.remove(configDefFilePath);}  }
class C{  public Long addOrganisation(String orgname,long user_id){  try {    Organisation org=new Organisation();    org.setName(orgname);    org.setInsertedby(new Long(user_id));    org.setDeleted("false");    org.setStarttime(new Date());    org=em.merge(org);    long id=org.getOrganisation_id();    return id;  } catch (  Exception ex2) {    log.error("[addOrganisation]",ex2);  }  return null;}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  m_expr.fixupVariables(vars,globalsSize);}  }
class C{  private static String generateSeesion(){  dbHelper.setAppStartDate();  String sessionId="";  String str=getAppKey();  if (str != null) {    str=str + deviceHelper.getTime() + deviceHelper.getDeviceID();    sessionId=deviceHelper.md5(str);    dbHelper.setSessionTime();    dbHelper.setSessionID(sessionId);    session_id=sessionId;    Ln.i("MobclickAgent: ","Start new session :" + session_id);    startLogService(MessageUtils.LAUNCH_DATA,getLaunchJSONObject());    return sessionId;  } else {    Ln.e("MobclickAgent","protocol Header need Appkey or Device ID ,Please check AndroidManifest.xml ");  }  return sessionId;}  }
class C{  public TeXParser(String parseString,TeXFormula formula,boolean firstpass,boolean space){  this(false,parseString,formula,firstpass);  this.ignoreWhiteSpace=space;}  }
class C{  public static void add(EmojiSet set,Collection<Emoticon> emotes,String code,String filename,String name,String category){  String url=EmojiUtil.class.getResource(set.internalPath + filename).toString();  Emoticon.Builder b=new Emoticon.Builder(Emoticon.Type.EMOJI,code,url);  b.setCreator(set.name);  b.setSize(24,24);  if (name != null) {    b.addInfo("\"" + name + "\"");  }  if (category != null) {    b.addInfo("Category: " + category);  } else {    b.addInfo("Category: Unkown");  }  emotes.add(b.build());}  }
class C{  public String toString(){  return getAncestorSelector() + " " + getSimpleSelector();}  }
class C{  public NetMaskImpl() throws UnknownHostException {}  }
class C{  @SuppressWarnings("unchecked") public final void testIsSatisfiedWhenAllConstraintsAreSatisfied(){  Constraint<Object> constraint1=new ConstraintImplementation(true);  Constraint<Object> constraint2=new ConstraintImplementation(true);  Constraint<Object>[] constraints=new Constraint[2];  constraints[0]=constraint1;  constraints[1]=constraint2;  DisjunctiveConstraint<Object> disjunctiveConstraint=new DisjunctiveConstraint<>(constraints);  assertTrue(disjunctiveConstraint.isSatisfied(new Object()));}  }
class C{  public PeerNetwork clone(){  PeerNetwork clone=new WifiDirectPeerNetwork(new WifiP2pDevice(this.wifiP2pDevice));  return clone;}  }
class C{  public boolean isOffsetNeeded(){  return offsetNeeded;}  }
class C{  public void clear(){  cache.clear();}  }
class C{  public DeletionConstraintException(String message){  super(message);}  }
class C{  public int find(final double search){  int a=0, b=size - 1;  while (a <= b) {    final int mid=(a + b) >>> 1;    final double cur=keys[mid];    if (cur > search) {      b=mid - 1;    } else {      a=mid + 1;    }  }  return b;}  }
class C{  public String generate(){  return generate(panel.getStatusBar(),null);}  }
class C{  public CActionExpandSelectionUp(final ZyGraph graph){  super("Expand Selection Up");  m_graph=graph;}  }
class C{  public boolean isElementContentWhitespace(){  return false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @LargeTest public void testUnmount_DontForce(){  mFile=createObbFile(OBB_FILE_1,R.raw.obb_file1);  String obbFilePath=mFile.getAbsolutePath();  MountingObbThread mountingThread=new MountingObbThread(obbFilePath,OBB_FILE_1_CONTENTS_1);  try {    mountingThread.start();    long waitTime=0;    while (!mountingThread.isFileOpenOnObb()) {synchronized (mountingThread) {        Log.i(LOG_TAG,"Waiting for file to be opened on OBB...");        mountingThread.wait(WAIT_TIME_INCR);        waitTime+=WAIT_TIME_INCR;        if (waitTime > MAX_WAIT_TIME) {          fail("Timed out waiting for file file to be opened on OBB!");        }      }    }    unmountObb(obbFilePath,DONT_FORCE);    assertTrue("mounted path should not be null!",obbFilePath != null);    assertTrue("mounted path should still be mounted!",mSm.isObbMounted(obbFilePath));    mountingThread.doStop();    unmountObb(obbFilePath,DONT_FORCE);    assertFalse("mounted path should no longer be mounted!",mSm.isObbMounted(obbFilePath));  } catch (  InterruptedException e) {    fail("Timed out waiting for file on OBB to be opened...");  }}  }
class C{  public int nextInt(int n){  return 0;}  }
class C{  public final void rotX(float angle){  float sinAngle, cosAngle;  sinAngle=(float)Math.sin((double)angle);  cosAngle=(float)Math.cos((double)angle);  this.m00=(float)1.0;  this.m01=(float)0.0;  this.m02=(float)0.0;  this.m03=(float)0.0;  this.m10=(float)0.0;  this.m11=cosAngle;  this.m12=-sinAngle;  this.m13=(float)0.0;  this.m20=(float)0.0;  this.m21=sinAngle;  this.m22=cosAngle;  this.m23=(float)0.0;  this.m30=(float)0.0;  this.m31=(float)0.0;  this.m32=(float)0.0;  this.m33=(float)1.0;}  }
class C{  private RecyclerView createRecyclerView(){  RecyclerView recyclerView=new RecyclerView(getContext());  RecyclerView.LayoutParams params=new RecyclerView.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);  recyclerView.setLayoutParams(params);  setContentView(recyclerView);  return recyclerView;}  }
class C{  public static ImageSource resource(int resId){  return new ImageSource(resId);}  }
class C{  public static ArrayNode buildArgumentsArray(ObjectMapper objectMapper,Object... args){  if (args.length == 0)   return null;  final ArrayNode argArray=objectMapper.createArrayNode();  for (  Object arg : args) {    argArray.addPOJO(arg);  }  return argArray;}  }
class C{  public void runUntilIdle(){  while (!isIdle()) {    runNextPendingCommand();  }}  }
class C{  public void solve(){  if (a == 0.0 && b == 0.0)   values(); else   if (a == 0.0 && b != 0.0)   values(linear(b,c)); else   if (a != 0.0 && c == 0.0)   values(0.0,linear(a,b)); else {    double d=b * b - 4.0 * a * c;    if (d < 0.0)     values(); else     if (d == 0.0)     values(-b / (2.0 * a)); else     values((-b + Math.sqrt(d)) / (2.0 * a),(-b - Math.sqrt(d)) / (2.0 * a));  }}  }
class C{  private ScriptEngine newScriptEngine(File file) throws ScriptException {  String filename=file.getName();  int index=filename.lastIndexOf('.');  if ((index < 0) || (index >= filename.length() - 1)) {    throw new ScriptException("file has no extension");  }  String extension=filename.substring(index + 1);  ScriptEngineManager manager=new ScriptEngineManager();  ScriptEngine engine=manager.getEngineByExtension(extension);  if (engine == null) {    throw new ScriptException("no scripting engine for extension ." + extension);  }  return engine;}  }
class C{  public Instruction lastInstructionInCodeOrder(){  return lastBasicBlockInCodeOrder().lastInstruction();}  }
class C{  public DrawerBuilder withOnDrawerListener(@NonNull Drawer.OnDrawerListener onDrawerListener){  this.mOnDrawerListener=onDrawerListener;  return this;}  }
class C{  public static void recompile(NormalMethod meth){  try {    CompiledMethod cm=RuntimeCompiler.compile(meth);    meth.replaceCompiledMethod(cm);  } catch (  Throwable e) {    VM.sysWrite("Failure while recompiling \"" + meth + "\" : "+ e+ "\n");  }}  }
class C{  public MultiPostingsEnum reset(final EnumWithSlice[] subs,final int numSubs){  this.numSubs=numSubs;  for (int i=0; i < numSubs; i++) {    this.subs[i].postingsEnum=subs[i].postingsEnum;    this.subs[i].slice=subs[i].slice;  }  upto=-1;  doc=-1;  current=null;  return this;}  }
class C{  public boolean isCampaignDim(){  Object oo=get_Value(COLUMNNAME_IsCampaignDim);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static int indexOf(short[] array,short value,int startIndex){  for (int i=startIndex; i < array.length; i++) {    if (array[i] == value) {      return i;    }  }  return -1;}  }
class C{  public static boolean isTwinprime(int num){  return PrimeNumberMethod.isPrime(num) && PrimeNumberMethod.isPrime(num + 2);}  }
class C{  private boolean exists(List<ConversionMethod> conversions){  if (conversions.isEmpty())   return false;  return (method=verifyConversionExistence(conversions)) != null;}  }
class C{  public void attributeAsClassAt(int columnIndex){  ((ArffTableModel)getModel()).attributeAsClassAt(columnIndex);}  }
class C{  public FastLongBuffer append(long[] array,int off,int len){  int end=off + len;  if ((off < 0) || (len < 0) || (end > array.length)) {    throw new IndexOutOfBoundsException();  }  if (len == 0) {    return this;  }  int newSize=size + len;  int remaining=len;  if (currentBuffer != null) {    int part=Math.min(remaining,currentBuffer.length - offset);    System.arraycopy(array,end - remaining,currentBuffer,offset,part);    remaining-=part;    offset+=part;    size+=part;  }  if (remaining > 0) {    needNewBuffer(newSize);    int part=Math.min(remaining,currentBuffer.length - offset);    System.arraycopy(array,end - remaining,currentBuffer,offset,part);    offset+=part;    size+=part;  }  return this;}  }
class C{  OneStepIterator(Compiler compiler,int opPos,int analysis) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis);  int firstStepPos=OpMap.getFirstChildPos(opPos);  m_axis=WalkerFactory.getAxisFromStep(compiler,firstStepPos);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4mfPackage.SIMPLE_PROJECT_DESCRIPTION__DECLARED_VENDOR_ID:    setDeclaredVendorId(DECLARED_VENDOR_ID_EDEFAULT);  return;case N4mfPackage.SIMPLE_PROJECT_DESCRIPTION__PROJECT_ID:setProjectId(PROJECT_ID_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public void execute() throws SQLException {  crsInternal.execute();}  }
class C{  public static HubConfig hubFromEnvironment(String projectDir,String environment){  HubConfig config=new HubConfig(projectDir);  Properties environmentProperties=config.getProperties(environment);  config.loadConfigurationFromProperties(environmentProperties);  return config;}  }
class C{  public static long optimize(InputStream in,OutputStream out,Configuration configuration) throws IOException {  Movie movie=new Movie();  TagDecoder tagDecoder=new TagDecoder(in);  MovieDecoder movieDecoder=new MovieDecoder(movie);  tagDecoder.parse(movieDecoder);  optimize(movie,configuration);  TagEncoder handler=new TagEncoder();  MovieEncoder encoder=new MovieEncoder(handler);  encoder.export(movie);  ByteArrayOutputStream baos=new ByteArrayOutputStream();  handler.writeTo(baos);  out.write(baos.toByteArray());  return baos.size();}  }
class C{  public void text(int[] glyphIndices,int[] glyphAdvances){  int[] codes=(int[])fontCodes.get(fontId);  if (codes == null) {    return;  }  char[] chars=new char[glyphIndices.length];  for (int i=0; i < chars.length; i++) {    int index=glyphIndices[i];    if (index >= codes.length) {      chars[i]=(char)index;    } else {      chars[i]=(char)(codes[index]);    }  }  output.print(chars);}  }
class C{  public static CalendarUserType find(String value){  return enums.find(value);}  }
class C{  private boolean isOverridden(OutputNode node,Object value) throws Exception {  return factory.setOverride(type,value,node);}  }
class C{  public static byte composeDefaultMessageType(byte esmClass){  return cleanMessageType(esmClass);}  }
class C{  public Binomial(int n,double p,RandomEngine randomGenerator){  setRandomGenerator(randomGenerator);  setNandP(n,p);}  }
class C{  private void resume(){  Log.d(LOG_TAG,"## resume : resume the service");  if (mSessions != null) {    for (    MXSession session : mSessions) {      session.resumeEventStream();    }  }  setServiceState(StreamAction.START);}  }
class C{  public String toString(){  return "VotedPerceptron: Number of perceptrons=" + m_K;}  }
class C{  public static byte max(byte a,final byte b,final byte c){  if (b > a) {    a=b;  }  if (c > a) {    a=c;  }  return a;}  }
class C{  public void deleteUnusedNodes(){  for (  LoopEx loop : loops()) {    loop.deleteUnusedNodes();  }}  }
class C{  public TextLiteralResource(String resourceText){  this.resourceText=resourceText;}  }
class C{  protected SVGOMFEMorphologyElement(){}  }
class C{  public static Angle fromDMS(int degrees,int minutes,int seconds){  if (minutes < 0 || minutes >= 60) {    String message=Logging.getMessage("generic.ArgumentOutOfRange",minutes);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (seconds < 0 || seconds >= 60) {    String message=Logging.getMessage("generic.ArgumentOutOfRange",seconds);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return Angle.fromDegrees(Math.signum(degrees) * (Math.abs(degrees) + minutes / 60d + seconds / 3600d));}  }
class C{  public boolean isBlocked(){  return this.blocked;}  }
class C{  public static IBaseLabelProvider wrap(final IBaseLabelProvider provider){  if (provider instanceof ITableLabelProvider) {    return new TableLabelProviderWrapper((ITableLabelProvider)provider);  }  if (provider instanceof ILabelProvider) {    return new LabelProviderWrapper((ILabelProvider)provider);  }  return new BaseLabelProviderWrapper(provider);}  }
class C{  public void addAll(SentenceSplitter splitter){  Sentence[] rawSentences=splitter.splitAll();  for (  Sentence rawSentence : rawSentences)   add(rawSentence.wordSplit());}  }
class C{  public static String makeMarginTransform(double owidth,double oheight,double iwidth,double iheight,double xmargin,double ymargin){  return makeMarginTransform(owidth,oheight,iwidth,iheight,xmargin,ymargin,xmargin,ymargin);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public InvocationTargetException(@Nullable Throwable target){  super((Throwable)null);  this.target=target;}  }
class C{  public MultiGetShardRequest preference(String preference){  this.preference=preference;  return this;}  }
class C{  public boolean sound(HashSet<CollectData> collects){  bftsmart.tom.util.Logger.println("(LCManager.sound) I collected the context from " + collects.size() + " replicas");  if (collects == null)   return false;  HashSet<Integer> timestamps=new HashSet<Integer>();  HashSet<byte[]> values=new HashSet<byte[]>();  for (  CollectData c : collects) {    bftsmart.tom.util.Logger.println("(LCManager.sound) Context for replica " + c.getPid() + ": CID["+ c.getCid()+ "] WRITESET["+ c.getWriteSet()+ "] (VALTS,VAL)["+ c.getQuorumWrites()+ "]");    timestamps.add(c.getQuorumWrites().getTimestamp());    if (!Arrays.equals(c.getQuorumWrites().getValue(),new byte[0])) {      boolean insert=true;      for (      byte[] b : values) {        if (Arrays.equals(b,c.getQuorumWrites().getValue())) {          insert=false;          break;        }      }      if (insert)       values.add(c.getQuorumWrites().getValue());    }    for (    TimestampValuePair rv : c.getWriteSet()) {      timestamps.add(rv.getTimestamp());      boolean insert=true;      for (      byte[] b : values) {        if (Arrays.equals(b,rv.getHashedValue())) {          insert=false;          break;        }      }      if (insert)       values.add(rv.getHashedValue());    }  }  bftsmart.tom.util.Logger.println("(LCManager.sound) number of timestamps: " + timestamps.size());  bftsmart.tom.util.Logger.println("(LCManager.sound) number of values: " + values.size());  for (  int r : timestamps) {    for (    byte[] v : values) {      bftsmart.tom.util.Logger.println("(LCManager.sound) testing predicate BIND for timestamp/value pair (" + r + " , "+ Arrays.toString(v)+ ")");      if (binds(r,v,collects)) {        bftsmart.tom.util.Logger.println("(LCManager.sound) Predicate BIND is true for timestamp/value pair (" + r + " , "+ Arrays.toString(v)+ ")");        bftsmart.tom.util.Logger.println("(LCManager.sound) Predicate SOUND is true for the for context collected from N-F replicas");        return true;      }    }  }  bftsmart.tom.util.Logger.println("(LCManager.sound) No timestamp/value pair passed on the BIND predicate");  boolean unbound=unbound(collects);  if (unbound) {    bftsmart.tom.util.Logger.println("(LCManager.sound) Predicate UNBOUND is true for N-F replicas");    bftsmart.tom.util.Logger.println("(LCManager.sound) Predicate SOUND is true for the for context collected from N-F replicas");  }  return unbound;}  }
class C{  private void cacheAttribute(String attrId,byte[][] values){  String cacheKey=name + "|" + attrId;  valueCache.put(cacheKey,values);}  }
class C{  public KMLPolygon(String namespaceURI){  super(namespaceURI);}  }
class C{  protected void initInputLocators(Instances data,int[] indices){  if (indices == null) {    m_InputStringAtts=new StringLocator(data);    m_InputRelAtts=new RelationalLocator(data);  } else {    m_InputStringAtts=new StringLocator(data,indices);    m_InputRelAtts=new RelationalLocator(data,indices);  }}  }
class C{  public static void fill(int[] array,int x){  for (int i=0; i < array.length; i++) {    array[i]=x;  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    final double log2=0.301029995663981;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.log(z) / log2);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public final double distanceTo(Vec4 p){  return p.distanceTo3(this.nearestPointTo(p));}  }
class C{  public void finest(String mesg){  log(Level.FINEST,mesg,null);}  }
class C{  private void updateController(String source){  logger.debug("Updating controller from : " + source);  if (player != null) {    player.hideController();    player.showController();    updateNextPreviousListeners();  }}  }
class C{  public boolean isValid(){  return GLES20.glIsBuffer(mVertexBufferInfo.bufferHandle);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:52.862 -0500",hash_original_method="4CF8CB38A5AC53FB99D6035A88D058D2",hash_generated_method="B69A43EE6162F9A2F92FB3768A16E282") public Event(){  super(EVENT);}  }
class C{  public String toString(){  return Integer.toString(get());}  }
class C{  public SRaster(LLPoint ll1,short offset_x1,short offset_y1,short width,short height,byte[] pixels,short colorsTotal,CTEntry[] ct,short transparent,short x_hot,short y_hot){  super(GraphicType.GT_Raster,RenderType.RT_Offset,LineType.LT_Unknown,DeclutterType.DC_None);  p1_=new XYPoint(offset_x1,offset_y1);  ll1_=ll1;  width_=width;  height_=height;  x_hot_=x_hot;  y_hot_=y_hot;  pixels_=pixels;  makeMatch(colorsTotal,ct);  transparent_=transparent;}  }
class C{  public void addStreamEscape(Stream source,Location target){  StreamEscape streamEscape=new StreamEscape(source,target);  streamEscapeSet.add(streamEscape);  if (FindOpenStream.DEBUG) {    System.out.println("Adding potential stream escape " + streamEscape);  }}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.776 -0500",hash_original_method="1836401D6B82BE6CCBD088E7B5026D41",hash_generated_method="1E198A53AE5B2BE3C2A90D8BCF0759DF") public IntentFilter(IntentFilter o){  mPriority=o.mPriority;  mActions=o.mActions;  if (o.mCategories != null) {    mCategories=new ArrayList<String>(o.mCategories);  }  if (o.mDataTypes != null) {    mDataTypes=new ArrayList<String>(o.mDataTypes);  }  if (o.mDataSchemes != null) {    mDataSchemes=new ArrayList<String>(o.mDataSchemes);  }  if (o.mDataAuthorities != null) {    mDataAuthorities=new ArrayList<AuthorityEntry>(o.mDataAuthorities);  }  if (o.mDataPaths != null) {    mDataPaths=new ArrayList<PatternMatcher>(o.mDataPaths);  }  mHasPartialTypes=o.mHasPartialTypes;}  }
class C{  @SuppressWarnings("unchecked") public FixedsizeForgetfulHashSet<E> clone(){  try {    FixedsizeForgetfulHashSet<E> newSet=(FixedsizeForgetfulHashSet<E>)super.clone();    newSet.map=map.clone();    return newSet;  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  public void testMultivariateMIforNoisyDependentVariablesFromFile() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/4ColsPairedNoisyDependence-1.txt");  double[][] data=afr.getDouble2DMatrix();  int[] kNNs={1,2,3,4,5,6,10,15};  double[] expectedFromMILCA_2={0.33738970,0.36251531,0.34708687,0.36200563,0.35766125,0.35007623,0.35023664,0.33728287};  System.out.println("Kraskov comparison 7 - multivariate dependent data 1");  checkMIForGivenData(MatrixUtils.selectColumns(data,new int[]{0,1}),MatrixUtils.selectColumns(data,new int[]{2,3}),kNNs,expectedFromMILCA_2);}  }
class C{  public boolean isActivityDim(){  Object oo=get_Value(COLUMNNAME_IsActivityDim);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("WorkflowPanel[");  if (m_wf != null)   sb.append(m_wf.getAD_Workflow_ID());  sb.append("]");  return sb.toString();}  }
class C{  public org.apache.nutch.storage.WebPage.Builder clearReprUrl(){  reprUrl=null;  fieldSetFlags()[17]=false;  return this;}  }
class C{  public void createWebGraph(Path webGraphDb,Path[] segments,boolean normalize,boolean filter) throws IOException {  SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  long start=System.currentTimeMillis();  if (LOG.isInfoEnabled()) {    LOG.info("WebGraphDb: starting at " + sdf.format(start));    LOG.info("WebGraphDb: webgraphdb: " + webGraphDb);    LOG.info("WebGraphDb: URL normalize: " + normalize);    LOG.info("WebGraphDb: URL filter: " + filter);  }  Configuration conf=getConf();  FileSystem fs=FileSystem.get(conf);  Path lock=new Path(webGraphDb,LOCK_NAME);  if (!fs.exists(webGraphDb)) {    fs.mkdirs(webGraphDb);  }  LockUtil.createLockFile(fs,lock,false);  Path outlinkDb=new Path(webGraphDb,OUTLINK_DIR);  Path oldOutlinkDb=new Path(webGraphDb,OLD_OUTLINK_DIR);  if (!fs.exists(outlinkDb)) {    fs.mkdirs(outlinkDb);  }  Path tempOutlinkDb=new Path(outlinkDb + "-" + Integer.toString(new Random().nextInt(Integer.MAX_VALUE)));  JobConf outlinkJob=new NutchJob(conf);  outlinkJob.setJobName("Outlinkdb: " + outlinkDb);  boolean deleteGone=conf.getBoolean("link.delete.gone",false);  boolean preserveBackup=conf.getBoolean("db.preserve.backup",true);  if (deleteGone) {    LOG.info("OutlinkDb: deleting gone links");  }  if (segments != null) {    for (int i=0; i < segments.length; i++) {      Path parseData=new Path(segments[i],ParseData.DIR_NAME);      if (fs.exists(parseData)) {        LOG.info("OutlinkDb: adding input: " + parseData);        FileInputFormat.addInputPath(outlinkJob,parseData);      }      if (deleteGone) {        Path crawlFetch=new Path(segments[i],CrawlDatum.FETCH_DIR_NAME);        if (fs.exists(crawlFetch)) {          LOG.info("OutlinkDb: adding input: " + crawlFetch);          FileInputFormat.addInputPath(outlinkJob,crawlFetch);        }      }    }  }  LOG.info("OutlinkDb: adding input: " + outlinkDb);  FileInputFormat.addInputPath(outlinkJob,outlinkDb);  outlinkJob.setBoolean(OutlinkDb.URL_NORMALIZING,normalize);  outlinkJob.setBoolean(OutlinkDb.URL_FILTERING,filter);  outlinkJob.setInputFormat(SequenceFileInputFormat.class);  outlinkJob.setMapperClass(OutlinkDb.class);  outlinkJob.setReducerClass(OutlinkDb.class);  outlinkJob.setMapOutputKeyClass(Text.class);  outlinkJob.setMapOutputValueClass(NutchWritable.class);  outlinkJob.setOutputKeyClass(Text.class);  outlinkJob.setOutputValueClass(LinkDatum.class);  FileOutputFormat.setOutputPath(outlinkJob,tempOutlinkDb);  outlinkJob.setOutputFormat(MapFileOutputFormat.class);  outlinkJob.setBoolean("mapreduce.fileoutputcommitter.marksuccessfuljobs",false);  try {    LOG.info("OutlinkDb: running");    JobClient.runJob(outlinkJob);    LOG.info("OutlinkDb: installing " + outlinkDb);    FSUtils.replace(fs,oldOutlinkDb,outlinkDb,true);    FSUtils.replace(fs,outlinkDb,tempOutlinkDb,true);    if (!preserveBackup && fs.exists(oldOutlinkDb))     fs.delete(oldOutlinkDb,true);    LOG.info("OutlinkDb: finished");  } catch (  IOException e) {    LockUtil.removeLockFile(fs,lock);    if (fs.exists(tempOutlinkDb)) {      fs.delete(tempOutlinkDb,true);    }    LOG.error(StringUtils.stringifyException(e));    throw e;  }  Path inlinkDb=new Path(webGraphDb,INLINK_DIR);  Path tempInlinkDb=new Path(inlinkDb + "-" + Integer.toString(new Random().nextInt(Integer.MAX_VALUE)));  JobConf inlinkJob=new NutchJob(conf);  inlinkJob.setJobName("Inlinkdb " + inlinkDb);  LOG.info("InlinkDb: adding input: " + outlinkDb);  FileInputFormat.addInputPath(inlinkJob,outlinkDb);  inlinkJob.setInputFormat(SequenceFileInputFormat.class);  inlinkJob.setMapperClass(InlinkDb.class);  inlinkJob.setMapOutputKeyClass(Text.class);  inlinkJob.setMapOutputValueClass(LinkDatum.class);  inlinkJob.setOutputKeyClass(Text.class);  inlinkJob.setOutputValueClass(LinkDatum.class);  FileOutputFormat.setOutputPath(inlinkJob,tempInlinkDb);  inlinkJob.setOutputFormat(MapFileOutputFormat.class);  inlinkJob.setBoolean("mapreduce.fileoutputcommitter.marksuccessfuljobs",false);  try {    LOG.info("InlinkDb: running");    JobClient.runJob(inlinkJob);    LOG.info("InlinkDb: installing " + inlinkDb);    FSUtils.replace(fs,inlinkDb,tempInlinkDb,true);    LOG.info("InlinkDb: finished");  } catch (  IOException e) {    LockUtil.removeLockFile(fs,lock);    if (fs.exists(tempInlinkDb)) {      fs.delete(tempInlinkDb,true);    }    LOG.error(StringUtils.stringifyException(e));    throw e;  }  Path nodeDb=new Path(webGraphDb,NODE_DIR);  Path tempNodeDb=new Path(nodeDb + "-" + Integer.toString(new Random().nextInt(Integer.MAX_VALUE)));  JobConf nodeJob=new NutchJob(conf);  nodeJob.setJobName("NodeDb " + nodeDb);  LOG.info("NodeDb: adding input: " + outlinkDb);  LOG.info("NodeDb: adding input: " + inlinkDb);  FileInputFormat.addInputPath(nodeJob,outlinkDb);  FileInputFormat.addInputPath(nodeJob,inlinkDb);  nodeJob.setInputFormat(SequenceFileInputFormat.class);  nodeJob.setReducerClass(NodeDb.class);  nodeJob.setMapOutputKeyClass(Text.class);  nodeJob.setMapOutputValueClass(LinkDatum.class);  nodeJob.setOutputKeyClass(Text.class);  nodeJob.setOutputValueClass(Node.class);  FileOutputFormat.setOutputPath(nodeJob,tempNodeDb);  nodeJob.setOutputFormat(MapFileOutputFormat.class);  nodeJob.setBoolean("mapreduce.fileoutputcommitter.marksuccessfuljobs",false);  try {    LOG.info("NodeDb: running");    JobClient.runJob(nodeJob);    LOG.info("NodeDb: installing " + nodeDb);    FSUtils.replace(fs,nodeDb,tempNodeDb,true);    LOG.info("NodeDb: finished");  } catch (  IOException e) {    LockUtil.removeLockFile(fs,lock);    if (fs.exists(tempNodeDb)) {      fs.delete(tempNodeDb,true);    }    LOG.error(StringUtils.stringifyException(e));    throw e;  }  LockUtil.removeLockFile(fs,lock);  long end=System.currentTimeMillis();  LOG.info("WebGraphDb: finished at " + sdf.format(end) + ", elapsed: "+ TimingUtil.elapsedTime(start,end));}  }
class C{  public SerialParameters(String portName,int baudRate,int flowControlIn,int flowControlOut,int databits,int stopbits,int parity,boolean echo){  this.portName=portName;  this.baudRate=baudRate;  this.flowControlIn=flowControlIn;  this.flowControlOut=flowControlOut;  this.databits=databits;  this.stopbits=stopbits;  this.parity=parity;  this.echo=echo;}  }
class C{  private String createStartMissionXml(String startMomentId,String missionName){  return "<?xml version='1.0' encoding='utf-8'?>" + "<mission " + "start_id='" + startMomentId + "' "+ "name='"+ missionName+ "' >";}  }
class C{  public void start(){  Thread thread=new Thread(this);  if (m_pi != null)   thread.setName(m_pi.getTitle() + "-" + m_pi.getAD_PInstance_ID());  thread.start();}  }
class C{  public boolean hasMoreElements(){  return hasMoreTokens();}  }
class C{  public XMLFilterImpl(XMLReader parent){  setParent(parent);}  }
class C{  public void shrink(int newSize){  if (newSize < 0) {    throw new IllegalArgumentException("newSize < 0");  }  if (newSize > size) {    throw new IllegalArgumentException("newSize > size");  }  throwIfImmutable();  size=newSize;}  }
class C{  private StringBuffer createColumns(int AD_Table_ID,StringBuffer mandatory){  StringBuffer sb=new StringBuffer();  String sql="SELECT c.ColumnName, c.IsUpdateable, c.IsMandatory," + " c.AD_Reference_ID, c.AD_Reference_Value_ID, DefaultValue, SeqNo, " + " c.FieldLength, c.ValueMin, c.ValueMax, c.VFormat, c.Callout, "+ " c.Name, c.Description, c.ColumnSQL, c.IsEncrypted, c.IsKey "+ "FROM AD_Column c "+ "WHERE c.AD_Table_ID=?"+ " AND c.IsActive='Y'"+ " ORDER BY c.ColumnName";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Table_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      String columnName=rs.getString(1);      boolean isUpdateable="Y".equals(rs.getString(2));      boolean isMandatory="Y".equals(rs.getString(3));      int displayType=rs.getInt(4);      int AD_Reference_Value_ID=rs.getInt(5);      String defaultValue=rs.getString(6);      int fieldLength=rs.getInt(8);      String ValueMin=rs.getString(9);      String ValueMax=rs.getString(10);      String VFormat=rs.getString(11);      String Callout=rs.getString(12);      String Name=rs.getString(13);      String Description=rs.getString(14);      String ColumnSQL=rs.getString(15);      boolean virtualColumn=ColumnSQL != null && ColumnSQL.length() > 0;      boolean IsEncrypted="Y".equals(rs.getString(16));      boolean IsKey="Y".equals(rs.getString(17));      sb.append("\n").append("    /** Column name ").append(columnName).append(" */\n").append("    public static final String COLUMNNAME_").append(columnName).append(" = \"").append(columnName).append("\";");      sb.append(createColumnMethods(mandatory,columnName,isUpdateable,isMandatory,displayType,AD_Reference_Value_ID,fieldLength,defaultValue,ValueMin,ValueMax,VFormat,Callout,Name,Description,virtualColumn,IsEncrypted,IsKey,AD_Table_ID));    }  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return sb;}  }
class C{  public void monitorExit(){  mv.visitInsn(Opcodes.MONITOREXIT);}  }
class C{  public boolean isColorEnhancementEnabled(){  try {    return checkService() && sService.isColorEnhancementEnabled();  } catch (  RemoteException e) {    return false;  }}  }
class C{  public static String decodeUri(String uri){  try {    return URLDecoder.decode(uri,"UTF-8");  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  void orAction(NodeRepresentation nodeRep){  int idx=nodeRep.getParentIndex();  Vector<NodeRepresentation> parentVec=nodeRep.parentVector;  if (parentVec == this.assumeReps) {    this.chosenSplit=idx;  }  Decomposition decomp=nodeRep.decomposition;  hasChanged=true;  if (decomp.definedOp != null) {    goalDefinitions.add(decomp.definedOp);  }  nodeRep.nodeType=NodeRepresentation.OR_DECOMP;  nodeRep.nodeSubtype=NodeRepresentation.OTHER_TYPE;  nodeRep.children=new Vector<Vector<NodeRepresentation>>();  for (int i=0; i < decomp.children.size(); i++) {    Vector<NodeRepresentation> repVec=new Vector<NodeRepresentation>();    nodeRep.children.add(repVec);    NodeRepresentation rep=decompositionChildToNodeRep(nodeRep,i,repVec,nodeRep);    repVec.add(rep);  }  raiseWindow();}  }
class C{  public PopulationIterator(){  super();  nextIndex=0;  currentIndex=-1;  expectedModCount=modCount;}  }
class C{  @EventHandler public void onPlayerRespawn(PlayerRespawnEvent event){  World world=playerDeathWorlds.get(event.getPlayer().getUniqueId());  playerDeathWorlds.remove(event.getPlayer().getUniqueId());  if (world == null)   return;  world=WorldDimension.getBaseWorld(world);  if (world == null)   return;  event.setRespawnLocation(world.getSpawnLocation());}  }
class C{  public Resin2xExistingLocalConfigurationCapability(){  this.propertySupportMap.put(GeneralPropertySet.PROTOCOL,Boolean.FALSE);  this.propertySupportMap.put(GeneralPropertySet.HOSTNAME,Boolean.FALSE);}  }
class C{  private long writeOrgKeyIdentifierForProcess(long orgKey,ResultSet processes) throws SQLException {  long triggerProcessKey=processes.getLong("processkey");  triggerProcessKey=processes.getLong("processkey");  createTriggerProcessIdentifier(triggerProcessKey,TriggerProcessIdentifierName.ORGANIZATION_KEY,String.valueOf(orgKey));  return triggerProcessKey;}  }
class C{  public static <I,A>Parser<I,A> choice(IList<Parser<I,A>> ps){  if (ps.tail().isEmpty()) {    return ps.head();  } else {    return or(ps.head(),choice(ps.tail()));  }}  }
class C{  static <T extends Comparable>GeneralRange<T> from(Range<T> range){  @Nullable T lowerEndpoint=range.hasLowerBound() ? range.lowerEndpoint() : null;  BoundType lowerBoundType=range.hasLowerBound() ? range.lowerBoundType() : OPEN;  @Nullable T upperEndpoint=range.hasUpperBound() ? range.upperEndpoint() : null;  BoundType upperBoundType=range.hasUpperBound() ? range.upperBoundType() : OPEN;  return new GeneralRange<T>(Ordering.natural(),range.hasLowerBound(),lowerEndpoint,lowerBoundType,range.hasUpperBound(),upperEndpoint,upperBoundType);}  }
class C{  private String docToString(final doc[] docs){  if (docs == null || docs.length == 0) {    return "";  }  return docToString(docs[0]);}  }
class C{  @Override public boolean equals(Object other){  if (this == other)   return true;  if (other == null || getClass() != other.getClass())   return false;  LocalizedAuditLogEntryParameters localizedAuditLogEntryParameters=(LocalizedAuditLogEntryParameters)other;  if (!description.equals(localizedAuditLogEntryParameters.description))   return false;  if (!license.equals(localizedAuditLogEntryParameters.license))   return false;  return true;}  }
class C{  private boolean isInstalled(List<SoftwareVersion> localAvailableVersions,SoftwareVersion targetVersion){  for (  SoftwareVersion s : localAvailableVersions) {    if (targetVersion.compareTo(s) == 0) {      return true;    }  }  return false;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof CategoryAxis)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  CategoryAxis that=(CategoryAxis)obj;  if (that.lowerMargin != this.lowerMargin) {    return false;  }  if (that.upperMargin != this.upperMargin) {    return false;  }  if (that.categoryMargin != this.categoryMargin) {    return false;  }  if (that.maximumCategoryLabelWidthRatio != this.maximumCategoryLabelWidthRatio) {    return false;  }  if (that.categoryLabelPositionOffset != this.categoryLabelPositionOffset) {    return false;  }  if (!ObjectUtilities.equal(that.categoryLabelPositions,this.categoryLabelPositions)) {    return false;  }  if (!ObjectUtilities.equal(that.categoryLabelToolTips,this.categoryLabelToolTips)) {    return false;  }  if (!ObjectUtilities.equal(this.categoryLabelURLs,that.categoryLabelURLs)) {    return false;  }  if (!ObjectUtilities.equal(this.tickLabelFontMap,that.tickLabelFontMap)) {    return false;  }  if (!equalPaintMaps(this.tickLabelPaintMap,that.tickLabelPaintMap)) {    return false;  }  return true;}  }
class C{  public void dataRefresh(boolean fireEvent){  dataRefresh(m_currentRow,fireEvent);}  }
class C{  public static float intersectRayPlane(Vector3fc origin,Vector3fc dir,Vector3fc point,Vector3fc normal,float epsilon){  return intersectRayPlane(origin.x(),origin.y(),origin.z(),dir.x(),dir.y(),dir.z(),point.x(),point.y(),point.z(),normal.x(),normal.y(),normal.z(),epsilon);}  }
class C{  public void addPerson(Id person){  boardingAtFacility.add(person);  if (rule.getsSeatOnEnter(person,vehicle,sittingPersons.size(),standingPersons.size())) {    addSitting(person);  } else {    addStanding(person);  }}  }
class C{  private void createCommandsMenu(Column column){  JComponent label=createMenuTitle("Commands");  column.addComponent(label);  JMenuItem item=createMenuItem("Atlas","atlas");  column.addComponent(item);  item=createMenuItem("Online Players","who");  column.addComponent(item);  item=createMenuItem("Hall of Fame","halloffame");  column.addComponent(item);  item=createMenuItem("Travel Log","travellog");  column.addComponent(item);}  }
class C{  public synchronized void add(double x,double y){  mXY.put(x,y);  updateRange(x,y);}  }
class C{  public void restore(String fileName) throws IOException, McBadRequestException {  if (fileName == null) {    throw new McBadRequestException("backup file should not be null");  }  String backupCanonicalPath=FileUtils.getFile(AppProperties.getInstance().getBackupSettings().getBackupLocation()).getCanonicalPath();  String fileFullName=AppProperties.getInstance().getBackupSettings().getBackupLocation() + fileName;  if (McUtils.isInScope(backupCanonicalPath,fileFullName)) {    File bkpFile=FileUtils.getFile(fileFullName);    BackupFile backupFile=BackupFile.builder().name(bkpFile.getName()).canonicalPath(bkpFile.getCanonicalPath()).timestamp(bkpFile.lastModified()).size(bkpFile.length()).build();    new Thread(new Restore(backupFile)).start();    _logger.info("Restore triggered.");  } else {    throw new McBadRequestException("Trying to restore file from outside backup scope");  }}  }
class C{  public ScMappingProfile createVolumeMappingProfile(String volInstanceId,String serverInstanceId,int preferredLun,String[] preferredPorts,int maxPathCount,String preferredController) throws StorageCenterAPIException {  Parameters advancedParams=new Parameters();  advancedParams.add("MapToDownServerHbas",true);  if (preferredLun != -1) {    advancedParams.add("PreferredLun",preferredLun);  }  if (preferredPorts != null && preferredPorts.length > 0) {    advancedParams.add("PreferredServerHbaList",preferredPorts);  }  if (maxPathCount > 0) {    advancedParams.add("MaximumPathCount",maxPathCount);  }  if (preferredController != null) {    advancedParams.add("PreferredController",preferredController);  }  Parameters params=new Parameters();  params.add("server",serverInstanceId);  params.add("Advanced",advancedParams.getRawPayload());  RestResult rr=restClient.post(String.format("StorageCenter/ScVolume/%s/MapToServer",volInstanceId),params.toJson());  if (checkResults(rr)) {    return gson.fromJson(rr.getResult(),ScMappingProfile.class);  }  throw new StorageCenterAPIException(String.format("Error creating volume mapping: %s",rr.getErrorMsg()));}  }
class C{  private boolean isPopupMenu(){  return ((invoker != null) && !(invoker instanceof JMenu));}  }
class C{  public final void writeLong(long v) throws java.io.IOException {  return;}  }
class C{  protected void sequence_AnnotatedScriptElement_N4EnumDeclaration(ISerializationContext context,N4EnumDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void put(String key,File files[],String contentType,String customFileName) throws FileNotFoundException {  if (key != null) {    List<FileWrapper> fileWrappers=new ArrayList<FileWrapper>();    for (    File file : files) {      if (file == null || !file.exists()) {        throw new FileNotFoundException();      }      fileWrappers.add(new FileWrapper(file,contentType,customFileName));    }    fileArrayParams.put(key,fileWrappers);  }}  }
class C{  @Override public boolean onPassphraseEntered(String passphrase){  if (!passphrase.isEmpty() && ProfileSyncService.get().setDecryptionPassphrase(passphrase)) {    finish();    return true;  }  return false;}  }
class C{  public void onGroupCollapse(int groupPosition){}  }
class C{  public int toStartPc(int line){  int n=tableLength();  for (int i=0; i < n; ++i)   if (line == lineNumber(i))   return startPc(i);  return -1;}  }
class C{  @Override public void removeTestSetListener(TestSetListener tsl){  m_testSetListeners.removeElement(tsl);}  }
class C{  @TargetApi(Build.VERSION_CODES.M) @Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){  if (mPermissionRequest != null) {    mPermissionRequest.onRequestPermissionsResult(requestCode,permissions,grantResults);    mPermissionRequest=null;  }}  }
class C{  public void testRemoveWithProxies(){  Object bean=new Object();  PropertyChangeSupport support=new PropertyChangeSupport(bean);  EventLog all=new EventLog();  support.addPropertyChangeListener(all);  assertEquals(1,support.getPropertyChangeListeners().length);  EventLog proxiedA=new EventLog();  support.addPropertyChangeListener(new PropertyChangeListenerProxy("a",proxiedA));  assertEquals(2,support.getPropertyChangeListeners().length);  EventLog addA=new EventLog();  support.addPropertyChangeListener("a",addA);  assertEquals(3,support.getPropertyChangeListeners().length);  EventLog addAProxiedB=new EventLog();  support.addPropertyChangeListener("a",new PropertyChangeListenerProxy("b",addAProxiedB));  assertEquals(4,support.getPropertyChangeListeners().length);  EventLog proxiedAB=new EventLog();  PropertyChangeListenerProxy proxyAB=new PropertyChangeListenerProxy("a",new PropertyChangeListenerProxy("b",proxiedAB));  support.addPropertyChangeListener(proxyAB);  assertEquals(5,support.getPropertyChangeListeners().length);  EventLog proxiedAAC=new EventLog();  support.addPropertyChangeListener(new PropertyChangeListenerProxy("a",new PropertyChangeListenerProxy("a",new PropertyChangeListenerProxy("c",proxiedAAC))));  assertEquals(6,support.getPropertyChangeListeners().length);  support.removePropertyChangeListener(all);  assertEquals(5,support.getPropertyChangeListeners().length);  support.removePropertyChangeListener("a",proxiedA);  assertEquals(4,support.getPropertyChangeListeners().length);  support.removePropertyChangeListener(new PropertyChangeListenerProxy("a",addA));  assertEquals(3,support.getPropertyChangeListeners().length);  support.removePropertyChangeListener("a",new PropertyChangeListenerProxy("b",addAProxiedB));  assertEquals(2,support.getPropertyChangeListeners().length);  support.removePropertyChangeListener(proxyAB);  assertEquals(1,support.getPropertyChangeListeners().length);  support.removePropertyChangeListener(proxiedAAC);  support.removePropertyChangeListener(new PropertyChangeListenerProxy("a",proxiedAAC));  support.removePropertyChangeListener("a",new PropertyChangeListenerProxy("c",proxiedAAC));  support.removePropertyChangeListener("a",new PropertyChangeListenerProxy("c",new PropertyChangeListenerProxy("a",proxiedAAC)));  assertEquals(1,support.getPropertyChangeListeners().length);  support.removePropertyChangeListener("a",new PropertyChangeListenerProxy("a",new PropertyChangeListenerProxy("c",proxiedAAC)));  assertEquals(0,support.getPropertyChangeListeners().length);}  }
class C{  public TIntIntHash(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);  no_entry_key=(int)0;  no_entry_value=(int)0;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementgetelementsbytagnamespecialvalue.class,args);}  }
class C{  public List<JarClassLoader> findJarClassLoaders(){  List<JarClassLoader> returnList=new ArrayList<JarClassLoader>();  Collection<ClassLoader> classLoaders=ClassPathLoader.getLatest().getClassLoaders();  for (  ClassLoader classLoader : classLoaders) {    if (classLoader instanceof JarClassLoader) {      returnList.add((JarClassLoader)classLoader);    }  }  return returnList;}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  public StatementBuilder(int capacity){  builder=new StringBuilder(capacity);}  }
class C{  public XPathFactoryConfigurationException(Throwable cause){  super(cause);}  }
class C{  private void handleHtmlShowSources(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String title=servletText.pageTitleSources();  if (addTitle(requestAndResponse,title)) {    return;  }  final String paneId="sources";  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,title,false).setPaneId(paneId);  pageWrapper.addHeader();  pageWrapper.addMetaData(new KeyAndValue("paneType",paneId));  pageWrapper.addPageIntroText(servletText.introTextShowSources(false),servletText.introTextShowSources(true));  try {    final StringBuilder result=new StringBuilder();    User queryUser=null;    if (null != (queryUser=canUserSeeUsersData(requestAndResponse,true))) {      final ResultsPaginator paginator=new ResultsPaginator(requestAndResponse,servletText.sentenceNoSourcesExist(),result,servletText);      startItemList(result,paneId);      final ArrayList<EntryInfo> entryInfoList=new ArrayList<EntryInfo>();      final List<?> sources=dbLogic.getEntriesByUserIdAndType(queryUser.getId(),DbLogic.Constants.source,paginator.getStartPosition(),paginator.getMaxResults());      for (      final Object sourceUncasted : sources) {        final Entry entry=(Entry)sourceUncasted;        final int resultNumber=paginator.next();        if (resultNumber == -1) {          continue;        } else         if (resultNumber == 0) {          break;        }        addSourceHtml(entry,result,SourceEmbedContext.InSources,null,resultNumber,paneId);        addEntryToInfoList(entry,entryInfoList);      }      finishItemList(result);      result.append("\n<script type=\"application/json\" class=\"entryInfoDictJson\">\n");      addJsonForEntryInfos(result,entryInfoList,paneId);      result.append("\n</script>\n");      paginator.done();    }    dbLogic.commit();    requestAndResponse.print(result.toString());  } catch (  final PersistenceException e) {    requestAndResponse.print(servletText.errorInternalDatabase());  }  pageWrapper.addFooter();}  }
class C{  static PageBtreeLeaf create(PageBtreeIndex index,int pageId,int parentPageId){  PageBtreeLeaf p=new PageBtreeLeaf(index,pageId,index.getPageStore().createData());  index.getPageStore().logUndo(p,null);  p.rows=SearchRow.EMPTY_ARRAY;  p.parentPageId=parentPageId;  p.writeHead();  p.start=p.data.length();  return p;}  }
class C{  public DefaultArchivoLogger(Class clase){  this.clase=clase;  this.eventos=new Stack();}  }
class C{  protected final void registerProblem(@NotNull final PsiElement psiElement,@NotNull final String descriptionTemplate,final ProblemHighlightType highlightType,@Nullable final HintAction hintAction,final LocalQuickFix... fixes){  registerProblem(psiElement,descriptionTemplate,highlightType,hintAction,null,fixes);}  }
class C{  public synchronized void unpin(){  if (strongRef != null) {    if (DGCImpl.dgcLog.isLoggable(Log.VERBOSE)) {      DGCImpl.dgcLog.log(Log.VERBOSE,"strongRef = " + strongRef);    }    strongRef=null;  }}  }
class C{  private static void quickSort1(int x[],int off,int len,IntComparator comp){  if (len < SMALL) {    for (int i=off; i < len + off; i++)     for (int j=i; j > off && comp.compare(x[j - 1],x[j]) > 0; j--)     swap(x,j,j - 1);    return;  }  int m=off + len / 2;  if (len > SMALL) {    int l=off;    int n=off + len - 1;    if (len > MEDIUM) {      int s=len / 8;      l=med3(x,l,l + s,l + 2 * s,comp);      m=med3(x,m - s,m,m + s,comp);      n=med3(x,n - 2 * s,n - s,n,comp);    }    m=med3(x,l,m,n,comp);  }  int v=x[m];  int a=off, b=a, c=off + len - 1, d=c;  while (true) {    int comparison;    while (b <= c && (comparison=comp.compare(x[b],v)) <= 0) {      if (comparison == 0)       swap(x,a++,b);      b++;    }    while (c >= b && (comparison=comp.compare(x[c],v)) >= 0) {      if (comparison == 0)       swap(x,c,d--);      c--;    }    if (b > c)     break;    swap(x,b++,c--);  }  int s, n=off + len;  s=Math.min(a - off,b - a);  vecswap(x,off,b - s,s);  s=Math.min(d - c,n - d - 1);  vecswap(x,b,n - s,s);  if ((s=b - a) > 1)   quickSort1(x,off,s,comp);  if ((s=d - c) > 1)   quickSort1(x,n - s,s,comp);}  }
class C{  private static Credential authorize() throws Exception {  GoogleClientSecrets clientSecrets=GoogleClientSecrets.load(JSON_FACTORY,new InputStreamReader(AdSenseSample.class.getResourceAsStream("/client_secrets.json")));  if (clientSecrets.getDetails().getClientId().startsWith("Enter") || clientSecrets.getDetails().getClientSecret().startsWith("Enter ")) {    System.out.println("Enter Client ID and Secret from " + "https://code.google.com/apis/console/?api=adsense into " + "adsense-cmdline-sample/src/main/resources/client_secrets.json");    System.exit(1);  }  GoogleAuthorizationCodeFlow flow=new GoogleAuthorizationCodeFlow.Builder(httpTransport,JSON_FACTORY,clientSecrets,Collections.singleton(AdSenseScopes.ADSENSE_READONLY)).setDataStoreFactory(dataStoreFactory).build();  return new AuthorizationCodeInstalledApp(flow,new LocalServerReceiver()).authorize("user");}  }
class C{  public static final String encodePassword(String password){  try {    byte[] digest=MessageDigest.getInstance(DEFAULT_ALGORITHM).digest(password.getBytes());    return new String(Base64.encodeBase64(digest));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }}  }
class C{  @LargeTest public void testIncludedClasses() throws Exception {  final String LOWER="njlj";  final String UPPER="NJLJ";  final String TITLECASE="\u01C8\u01CB\u01F2";  final String OTHER="\u3042\u3044\u3046";  final String MODIFIER="\u02C6\u02CA\u02CB";  verifyWordLimits(LOWER,1,0,4);  verifyWordLimits(UPPER,1,0,4);  verifyWordLimits(TITLECASE,1,0,3);  verifyWordLimits(OTHER,1,0,3);  verifyWordLimits(MODIFIER,1,0,3);}  }
class C{  public static Pair<String,LineColumnPosition> parsePathLineColumn2(String sourceString,String separator) throws CommonException {  String columnStr=StringUtil.segmentAfterLastMatch(sourceString,separator);  sourceString=StringUtil.substringUntilLastMatch(sourceString,separator);  String lineStr=StringUtil.segmentAfterLastMatch(sourceString,separator);  sourceString=StringUtil.substringUntilLastMatch(sourceString,separator);  String pathString=sourceString;  LineColumnPosition second=parseLineColumn(lineStr,columnStr,0,0);  return Pair.create(pathString,second);}  }
class C{  @Override public AlarmEvent evaluate(AlarmPoint alarm,String trigger){  if (trigger.equals(AlarmPoint.TRIGGER_ACTIVATE)) {    return activation(alarm);  } else   if (trigger.equals(AlarmPoint.TRIGGER_DEACTIVATE)) {    return deactivation(alarm);  } else   if (trigger.equals(AlarmPoint.TRIGGER_ACKNOWLEDGE)) {    return acknowledge(alarm);  } else   if (trigger.equals(AlarmPoint.TRIGGER_BLOCK)) {    return block(alarm);  } else   if (trigger.equals(AlarmPoint.TRIGGER_UNBLOCK)) {    return unblock(alarm);  } else   if (trigger.equals(AlarmPoint.TRIGGER_ENABLE)) {    return enable(alarm);  } else   if (trigger.equals(AlarmPoint.TRIGGER_DISABLE)) {    return disable(alarm);  } else {    throw new IllegalArgumentException("'" + trigger + "' is not supported by this AlarmModel.");  }}  }
class C{  boolean hasLanguageChanged(){  if ((lastUsedLanguage == null) || !lastUsedLanguage.equals(getUserLanguage())) {    lastUsedLanguage=getUserLanguage();    return true;  }  return false;}  }
class C{  public static void resetThreadsBeginN(){  THREADS_BEGIN_N_2D=65536;  THREADS_BEGIN_N_3D=65536;}  }
class C{  private static String timeToDaysMinutesSeconds(Context context,long time){  long days=time / MS_PER_DAY;  long hours=(time / MS_PER_HOUR) % 24;  long minutes=(time / MS_PER_MINUTE) % 60;  return context.getString(R.string.status_days_hours_minutes,days,hours,minutes);}  }
class C{  public MergeWebXml(File configDirectory){  this.configDirectory=configDirectory;}  }
class C{  @SuppressWarnings("deprecation") public void hide(){  Component component=getComponent();  if (component instanceof JWindow) {    component.hide();    ((JWindow)component).getContentPane().removeAll();  }  dispose();}  }
class C{  public synchronized boolean add(E o){  return super.add(o);}  }
class C{  public static Reader newReader(ReadableByteChannel channel,String charsetName){  if (charsetName == null) {    throw new NullPointerException("charsetName == null");  }  return newReader(channel,Charset.forName(charsetName).newDecoder(),-1);}  }
class C{  @Override public Object create(final ConfigurableFactoryContext ctx){  return new OnePlayerArea(getWidth(ctx),getHeight(ctx));}  }
class C{  public static void next(final IdocApplet ui){  FileVO ele=(FileVO)ui.getFileVO();  if (ele.getImageSelectIndex() + 2 > ele.getListImage().size()) {    ele.setImageSelectIndex(0);  } else {    ele.setImageSelectIndex(ele.getImageSelectIndex() + 1);  }}  }
class C{  private void createSchedule(){  Map<Id<TransitLine>,TransitLine> transitLinesDump=new HashMap<>();  this.nodes=handler.getNodes();  this.relations=handler.getRelations();  this.ways=handler.getWays();  createStopFacilities();  Set<Long> routesWithMaster=new HashSet<>();  for (  OsmParser.OsmRelation relation : relations.values()) {    if (route_master.matches(relation.tags)) {      Id<TransitLine> lineId=createLineId(relation);      TransitLine newTransitLine=factory.createTransitLine(lineId);      newTransitLine.setName(relation.tags.get(OsmTag.NAME));      for (      OsmParser.OsmRelationMember member : relation.members) {        OsmParser.OsmRelation route=relations.get(member.refId);        if (route != null) {          TransitRoute newTransitRoute=createTransitRoute(route);          if (newTransitRoute != null) {            newTransitLine.addRoute(newTransitRoute);            routesWithMaster.add(member.refId);          }        }      }      transitLinesDump.put(lineId,newTransitLine);    }  }  for (  OsmParser.OsmRelation relation : relations.values()) {    if (ptRoute.matches(relation.tags) && !routesWithMaster.contains(relation.id)) {      Id<TransitLine> lineId=createLineId(relation);      if (!transitLinesDump.containsKey(lineId)) {        transitLinesDump.put(lineId,factory.createTransitLine(lineId));      }      TransitLine transitLine=transitLinesDump.get(lineId);      TransitRoute newTransitRoute=createTransitRoute(relation);      if (newTransitRoute != null) {        transitLine.addRoute(newTransitRoute);      }    }  }  for (  TransitLine transitLine : transitLinesDump.values()) {    this.transitSchedule.addTransitLine(transitLine);  }  log.info("MATSim Transit Schedule created.");}  }
class C{  public void flash(){  mFlash=true;  invalidate();}  }
class C{  public SQLDataException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  public SelectionBuilder reset(){  mTable=null;  mGroupBy=null;  mHaving=null;  mSelection.setLength(0);  mSelectionArgs.clear();  return this;}  }
class C{  private StructuredName(){}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:38.083 -0400",hash_original_method="1ECCE9E7B8E4B2ABE7862485905FED28",hash_generated_method="5D6143BFB96C7D98182A05D61ACED164") public boolean hasInitialResponse(){  return false;}  }
class C{  private Tuple<Message,Connection> tryOtherMessages(){  List<Tuple<Message,Connection>> messages=new ArrayList<Tuple<Message,Connection>>();  Collection<Message> msgCollection=getMessageCollection();  for (  Connection con : getConnections()) {    DTNHost other=con.getOtherNode(getHost());    ProphetRouter othRouter=(ProphetRouter)other.getRouter();    if (othRouter.isTransferring()) {      continue;    }    for (    Message m : msgCollection) {      if (othRouter.hasMessage(m.getId())) {        continue;      }      if (othRouter.getPredFor(m.getTo()) > getPredFor(m.getTo())) {        messages.add(new Tuple<Message,Connection>(m,con));      }    }  }  if (messages.size() == 0) {    return null;  }  Collections.sort(messages,new TupleComparator());  return tryMessagesForConnected(messages);}  }
class C{  public void send(boolean clearMessage) throws IOException {  sendBytes(clearMessage);}  }
class C{  Item newConstItem(final Object cst){  if (cst instanceof Integer) {    int val=((Integer)cst).intValue();    return newInteger(val);  } else   if (cst instanceof String) {    return newString((String)cst);  } else   if (cst instanceof Type) {    Type t=(Type)cst;    return newClassItem(t.getSort() == Type.OBJECT ? t.getInternalName() : t.getDescriptor());  } else {    throw new IllegalArgumentException("value " + cst);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:17.724 -0400",hash_original_method="51800EEA0E375B7213B9A1C6559BB395",hash_generated_method="12A99DE7C70348477D87DC04DC2E4110") private void sweep(){  for (Node p=head, s, n; p != null && (s=p.next) != null; ) {    if (!s.isMatched())     p=s; else     if ((n=s.next) == null)     break; else     if (s == n)     p=head; else     p.casNext(s,n);  }}  }
class C{  public void stop(){  if (started) {    positionUs=elapsedRealtimeMinus(deltaUs);    started=false;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createElementNS02.class,args);}  }
class C{  public static long remainderUnsigned(long dividend,long divisor){  if (dividend > 0 && divisor > 0) {    return dividend % divisor;  } else {    if (compareUnsigned(dividend,divisor) < 0)     return dividend; else     return toUnsignedBigInteger(dividend).remainder(toUnsignedBigInteger(divisor)).longValue();  }}  }
class C{  @Override public void write(byte[] buf,int offset,int length,boolean isEnd) throws IOException {  int end=offset + length;  while (offset < end) {    int ch1=buf[offset++] & 0xff;    if (ch1 < 0x80)     _cb.append((char)ch1); else     if ((ch1 & 0xe0) == 0xc0) {      if (offset >= end)       throw new EOFException("unexpected end of file in utf8 character");      int ch2=buf[offset++] & 0xff;      if ((ch2 & 0xc0) != 0x80)       throw new CharConversionException("illegal utf8 encoding");      _cb.append((char)(((ch1 & 0x1f) << 6) + (ch2 & 0x3f)));    } else     if ((ch1 & 0xf0) == 0xe0) {      if (offset + 1 >= end)       throw new EOFException("unexpected end of file in utf8 character");      int ch2=buf[offset++] & 0xff;      int ch3=buf[offset++] & 0xff;      if ((ch2 & 0xc0) != 0x80)       throw new CharConversionException("illegal utf8 encoding");      if ((ch3 & 0xc0) != 0x80)       throw new CharConversionException("illegal utf8 encoding");      _cb.append((char)(((ch1 & 0x1f) << 12) + ((ch2 & 0x3f) << 6) + (ch3 & 0x3f)));    } else     throw new CharConversionException("illegal utf8 encoding at (" + (int)ch1 + ")");  }}  }
class C{  public void beforeCompletion(@NotNull CompletionInitializationContext context){}  }
class C{  public void execute(){  RunnableExecutorPair list;synchronized (this) {    if (executed) {      return;    }    executed=true;    list=runnables;    runnables=null;  }  RunnableExecutorPair reversedList=null;  while (list != null) {    RunnableExecutorPair tmp=list;    list=list.next;    tmp.next=reversedList;    reversedList=tmp;  }  while (reversedList != null) {    executeListener(reversedList.runnable,reversedList.executor);    reversedList=reversedList.next;  }}  }
class C{  public static void main(String[] argv){  runClassifier(new CostSensitiveClassifier(),argv);}  }
class C{  @Override protected IgfsSecondaryFileSystem createSecondaryFileSystemStack() throws Exception {  startUnderlying();  prepareConfiguration();  KerberosUserNameMapper mapper1=new KerberosUserNameMapper();  mapper1.setRealm("TEST.COM");  TestUserNameMapper mapper2=new TestUserNameMapper();  ChainedUserNameMapper mapper=new ChainedUserNameMapper();  mapper.setMappers(mapper1,mapper2);  CachingHadoopFileSystemFactory factory=new CachingHadoopFileSystemFactory();  factory.setUri(secondaryUri);  factory.setConfigPaths(secondaryConfFullPath);  factory.setUserNameMapper(mapper);  IgniteHadoopIgfsSecondaryFileSystem second=new IgniteHadoopIgfsSecondaryFileSystem();  second.setFileSystemFactory(factory);  igfsSecondary=new HadoopIgfsSecondaryFileSystemTestAdapter(factory);  return second;}  }
class C{  private void validateProjectName(){  if (NameUtils.checkProjectName(view.getProjectName())) {    view.hideNameError();  } else {    view.showNameError();  }}  }
class C{  public boolean isInverted(){  return mInverted;}  }
class C{  private void createImage(final String mapName){  final Image image=Toolkit.getDefaultToolkit().createImage(mapName);  Util.ensureImageLoaded(image);  m_bufferedImage=new BufferedImage(image.getWidth(null),image.getHeight(null),BufferedImage.TYPE_INT_ARGB);  final Graphics g=m_bufferedImage.getGraphics();  g.drawImage(image,0,0,this);  g.dispose();}  }
class C{  public static void clearBuildType(IProject project){  buildTypes.remove(project);}  }
class C{  @Override public void updateRef(String columnLabel,Ref x) throws SQLException {  throw unsupported("ref");}  }
class C{  @Override public void caretUpdate(CaretEvent e){  m_LabelCurrentSize.setText("currently: " + m_Output.getStyledDocument().getLength());  if (DEBUG) {    System.out.println(e);  }}  }
class C{  private JPanel createMainPanel(){  JPanel panel=new JPanel();  panel.setLayout(new GridBagLayout());  GridBagConstraints c=new GridBagConstraints();  c.anchor=GridBagConstraints.WEST;  c.fill=GridBagConstraints.HORIZONTAL;  c.gridheight=1;  c.gridwidth=GridBagConstraints.RELATIVE;  c.insets=LABEL_INSETS;  c.gridx=0;  c.gridy=0;  c.weightx=0.33f;  c.weighty=0;  panel.add(new JLabel("Receptive field"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  panel.add(new JLabel(sensor.getReceptiveField().getWidth() + "x" + sensor.getReceptiveField().getHeight()),c);  c.gridwidth=GridBagConstraints.RELATIVE;  c.insets=LABEL_INSETS;  c.gridx=0;  c.gridy++;  c.weightx=0.33f;  panel.add(new JLabel("Location"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  panel.add(new JLabel("(" + sensor.getReceptiveField().getX() + ", "+ sensor.getReceptiveField().getY()+ ")"),c);  c.gridwidth=GridBagConstraints.RELATIVE;  c.insets=LABEL_INSETS;  c.gridx=0;  c.gridy++;  c.weightx=0.33f;  panel.add(new JLabel("Current filter"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  panel.add(new JLabel(sensor.getFilter().getDescription()),c);  c.gridwidth=GridBagConstraints.RELATIVE;  c.insets=LABEL_INSETS;  c.gridx=0;  c.gridy++;  c.weightx=0.33f;  panel.add(new JLabel("New filter"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  panel.add(filters,c);  c.gridwidth=GridBagConstraints.REMAINDER;  c.insets=EMPTY_INSETS;  c.gridx=0;  c.gridy++;  c.weightx=1.0f;  panel.add(Box.createVerticalStrut(6),c);  c.insets=FIELD_INSETS;  c.gridy++;  filterEditorPlaceholder.add("Center",filterEditor.getEditorComponent());  panel.add(filterEditorPlaceholder,c);  c.anchor=GridBagConstraints.NORTHWEST;  c.fill=GridBagConstraints.BOTH;  c.gridheight=1;  c.insets=EMPTY_INSETS;  c.gridy++;  c.weighty=1.0f;  c.weightx=1.0f;  panel.add(Box.createVerticalStrut(6),c);  return panel;}  }
class C{  public int count(){  if (root == null) {    return 0;  }  return root.count();}  }
class C{  public boolean isStarted(){  return lastaction != null;}  }
class C{  private void finalizeDestinationFile(State state) throws StopRequest {  syncDestination(state);  String tempFilename=state.mFilename;  String finalFilename=Helpers.generateSaveFileName(mService,mInfo.mFileName);  if (!state.mFilename.equals(finalFilename)) {    File startFile=new File(tempFilename);    File destFile=new File(finalFilename);    if (mInfo.mTotalBytes != -1 && mInfo.mCurrentBytes == mInfo.mTotalBytes) {      if (!startFile.renameTo(destFile)) {        throw new StopRequest(DownloaderService.STATUS_FILE_ERROR,"unable to finalize destination file");      }    } else {      throw new StopRequest(DownloaderService.STATUS_FILE_DELIVERED_INCORRECTLY,"file delivered with incorrect size. probably due to network not browser configured");    }  }}  }
class C{  public String optString(int index){  return this.optString(index,"");}  }
class C{  public TimeSliderLayer(boolean realTimeMode){  this.realTimeMode=realTimeMode;  setName("TimeSlider");  setProjectionChangePolicy(new com.bbn.openmap.layer.policy.StandardPCPolicy(this,false));  setMouseModeIDsForEvents(new String[]{"Gestures"});  centerDelegate=new CenterSupport(this);  zoomDelegate=new ZoomSupport(this);  addComponentListener(this);}  }
class C{  private double[] projectSparse(SparseNumberVector in,double[] ret){  Arrays.fill(ret,0);  for (int iter=in.iter(); in.iterValid(iter); iter=in.iterAdvance(iter)) {    final int i=in.iterDim(iter);    final double val=in.iterDoubleValue(iter);    for (int o=0; o < ret.length; o++) {      ret[o]+=val * matrix[o][i];    }  }  return ret;}  }
class C{  public boolean isIgnoringEvents(){  return this.isDistracted;}  }
class C{  void zSetAppropriateTextFieldMinimumWidth(){  if (settings == null) {    return;  }  Integer programmerSuppliedWidth=settings.getSizeTextFieldMinimumWidth();  int minimumWidthPixels=CalculateMinimumDateFieldSize.getFormattedDateWidthInPixels(settings.getFormatForDatesCommonEra(),settings.getLocale(),settings.getFontValidDate(),0);  if (programmerSuppliedWidth != null) {    if (settings.getSizeTextFieldMinimumWidthDefaultOverride()) {      minimumWidthPixels=Math.max(programmerSuppliedWidth,minimumWidthPixels);    } else {      minimumWidthPixels=programmerSuppliedWidth;    }  }  Dimension newMinimumSize=dateTextField.getMinimumSize();  newMinimumSize.width=minimumWidthPixels;  dateTextField.setMinimumSize(newMinimumSize);  Dimension newPreferredSize=dateTextField.getPreferredSize();  newPreferredSize.width=minimumWidthPixels;  dateTextField.setPreferredSize(newPreferredSize);  this.validate();}  }
class C{  public void testValueOfLongMin(){  long longVal=Long.MIN_VALUE;  BigInteger aNumber=BigInteger.valueOf(longVal);  byte rBytes[]={-128,0,0,0,0,0,0,0};  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  public Task<MigrationRestRep> pause(URI id){  return postTask(getIdUrl() + "/pause",id);}  }
class C{  public static void startChatServiceInBackground(){  final Intent intent=new Intent(sStaticContext,ChatService.class);  intent.putExtra(AppConstants.Keys.HEART_BEAT,AppConstants.HEART_BEAT_BACKGROUND);  sStaticContext.startService(intent);}  }
class C{  public double manhattanDistance(final Int2D p){  final double dx=Math.abs((double)this.x - p.x);  final double dy=Math.abs((double)this.y - p.y);  return dx + dy;}  }
class C{  public int nice(){  return Integer.parseInt(fields[18]);}  }
class C{  public FloatBuffer makeEllipse(float x,float y,float majorRadius,float minorRadius,int slices){  if (majorRadius < 0) {    String message=Logging.getMessage("Geom.RadiusIsNegative");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (minorRadius < 0) {    String message=Logging.getMessage("Geom.RadiusIsNegative");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (slices < 0) {    String message=Logging.getMessage("generic.NumSlicesIsNegative");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (slices <= 1) {    FloatBuffer buffer=Buffers.newDirectFloatBuffer(2);    buffer.put(x + majorRadius);    buffer.put(y);    buffer.rewind();    return buffer;  }  float step=(float)Math.PI * 2f / (float)slices;  float angle=0;  FloatBuffer buffer=Buffers.newDirectFloatBuffer(2 * slices);  for (int i=0; i < slices; i++, angle+=step) {    buffer.put(x + (float)Math.cos(angle) * majorRadius);    buffer.put(y + (float)Math.sin(angle) * minorRadius);  }  buffer.rewind();  return buffer;}  }
class C{  public boolean isConnected(){  return btConnectionManager.isConnected();}  }
class C{  private String hmac(String stringToSign){  String signature=null;  byte[] data;  byte[] rawHmac;  try {    data=stringToSign.getBytes(UTF8_CHARSET);    rawHmac=mac.doFinal(data);    signature=Base64.getEncoder().encodeToString(rawHmac);  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(UTF8_CHARSET + " is unsupported!",e);  }  return signature;}  }
class C{  @Override public void removeAllKeyBindings(){  bindings.clear();}  }
class C{  public Extractor(final Logger logger){  this.logger=logger;  pdfConfig.setExtractInlineImages(true);  pdfConfig.setExtractUniqueInlineImagesOnly(false);  ocrConfig.setTimeout(Math.toIntExact(DEFAULT_OCR_TIMEOUT.to(TimeUnit.SECONDS)));}  }
class C{  public ObjectFactory(){}  }
class C{  public static int ESTRPIPE(){  return 86;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static LiveChannelStat parseGetLiveChannelStat(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    LiveChannelStat result=new LiveChannelStat();    result.setPushflowStatus(PushflowStatus.parse(root.getChildText("Status")));    if (root.getChild("ConnectedTime") != null) {      result.setConnectedDate(DateUtil.parseIso8601Date(root.getChildText("ConnectedTime")));    }    if (root.getChild("RemoteAddr") != null) {      result.setRemoteAddress(root.getChildText("RemoteAddr"));    }    Element videoElem=root.getChild("Video");    if (videoElem != null) {      VideoStat videoStat=new VideoStat();      videoStat.setWidth(Integer.parseInt(videoElem.getChildText("Width")));      videoStat.setHeight(Integer.parseInt(videoElem.getChildText("Height")));      videoStat.setFrameRate(Integer.parseInt(videoElem.getChildText("FrameRate")));      videoStat.setBandWidth(Integer.parseInt(videoElem.getChildText("Bandwidth")));      videoStat.setCodec(videoElem.getChildText("Codec"));      result.setVideoStat(videoStat);    }    Element audioElem=root.getChild("Audio");    if (audioElem != null) {      AudioStat audioStat=new AudioStat();      audioStat.setBandWidth(Integer.parseInt(audioElem.getChildText("Bandwidth")));      audioStat.setSampleRate(Integer.parseInt(audioElem.getChildText("SampleRate")));      audioStat.setCodec(audioElem.getChildText("Codec"));      result.setAudioStat(audioStat);    }    return result;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:49.701 -0500",hash_original_method="5602B112C459EA0AD88653A254825A5D",hash_generated_method="DED8E69DAEAD7F291990A7522CE6A2F7") public boolean isMWISetMessage(){  return mWrappedSmsMessage.isMWISetMessage();}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing(){  FilteredLineTokenizerKeyVal oper=new FilteredLineTokenizerKeyVal();  HashTestSink tokenSink=new HashTestSink();  oper.setSplitBy(",");  oper.setSplitTokenBy("=");  oper.tokens.setSink(tokenSink);  String[] filters=new String[2];  filters[0]="a";  filters[1]="c";  oper.setFilterBy(filters);  oper.beginWindow(0);  String input1="a=2,b=3,c=4";  String input2="d=2";  String input3="";  int numTuples=1000;  for (int i=0; i < numTuples; i++) {    oper.data.process(input1);    oper.data.process(input2);    oper.data.process(input3);  }  oper.endWindow();  Assert.assertEquals("number emitted tuples",2,tokenSink.map.size());  HashMap<Object,Object> smap=tokenSink.map;  for (  Map.Entry<Object,Object> e : smap.entrySet()) {    HashMap<String,String> kmap=(HashMap<String,String>)e.getKey();    for (    Map.Entry<String,String> o : kmap.entrySet()) {      String key=o.getKey();      String val=o.getValue();      Assert.assertTrue(!key.equals("b"));      Assert.assertTrue(!key.equals("d"));      if (key.equals("a")) {        Assert.assertEquals("value of \"a\"","2",val);      } else       if (key.equals("c")) {        Assert.assertEquals("value of \"c\"","4",val);      }    }  }}  }
class C{  public RestoreSnapshotRequest indexSettings(Map<String,Object> source){  try {    XContentBuilder builder=XContentFactory.contentBuilder(XContentType.JSON);    builder.map(source);    indexSettings(builder.string());  } catch (  IOException e) {    throw new ElasticsearchGenerationException("Failed to generate [" + source + "]",e);  }  return this;}  }
class C{  public void shutDownConnectionManager(){  client.getConnectionManager().shutdown();}  }
class C{  public void registerExtraHistoryLogMember(int providerId,Uri providerUri,Uri database,String table,Map<String,String> columnMapping) throws RcsServiceNotAvailableException, RcsGenericException {  if (mService == null) {    throw new RcsServiceNotAvailableException();  }  try {    mService.registerExtraHistoryLogMember(providerId,providerUri,database,table,columnMapping);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  private void initRasterProgram(){  glUseProgram(rasterProgram);  viewMatrixUniform=glGetUniformLocation(rasterProgram,"viewMatrix");  projectionMatrixUniform=glGetUniformLocation(rasterProgram,"projectionMatrix");  glUseProgram(0);}  }
class C{  @SuppressWarnings("SuspiciousNameCombination") public Rectangle transpose(){  return new Rectangle(new Point(rect.center.y,rect.center.x),rect.size.height,rect.size.width);}  }
class C{  public static <T>boolean intersects(Collection<T> A,Collection<T> B){  if (A == B) {    return true;  }  Set<T> setA=new HashSet<T>(A);  Set<T> setB=new HashSet<T>(B);  setA.retainAll(setB);  return setA.size() > 0;}  }
class C{  private void makeNfsAceFromDB(List<NfsACE> nfsAcls,List<NFSShareACL> dbNfsAclTemp){  for (  NFSShareACL nfsShareACL : dbNfsAclTemp) {    NfsACE nfsAce=new NfsACE();    String permission=nfsShareACL.getPermissions();    if (permission != null && !permission.isEmpty()) {      nfsAce.setPermissions(permission);    }    String domain=nfsShareACL.getDomain();    if (domain != null && !domain.isEmpty()) {      nfsAce.setDomain(domain);    }    String permissionType=nfsShareACL.getPermissionType();    nfsAce.setPermissionType(FileControllerConstants.NFS_FILE_PERMISSION_TYPE_ALLOW);    if (permissionType != null && !permissionType.isEmpty()) {      nfsAce.setPermissionType(permissionType);    }    String type=nfsShareACL.getType();    if (type != null && !type.isEmpty()) {      nfsAce.setType(type);    }    String user=nfsShareACL.getUser();    if (user != null && !user.isEmpty()) {      nfsAce.setUser(user);    }    nfsAcls.add(nfsAce);  }}  }
class C{  private URIContext createUriContext(URI uri,final UriDeploymentScannerContext scanCtx){  assert "http".equals(uri.getScheme()) || "https".equals(uri.getScheme());  URL scanDir;  try {    scanDir=new URL(uri.getScheme(),uri.getHost(),uri.getPort(),uri.getPath());  } catch (  MalformedURLException e) {    throw new IgniteSpiException("Wrong value for scanned HTTP directory with URI: " + uri,e);  }  SSLSocketFactory sockFactory=null;  try {    if ("https".equals(uri.getScheme())) {      SSLContext ctx=SSLContext.getInstance(PROTOCOL);      ctx.init(null,getTrustManagers(scanCtx),null);      sockFactory=ctx.getSocketFactory();    }  } catch (  NoSuchAlgorithmException e) {    throw new IgniteSpiException("Failed to initialize SSL context. URI: " + uri,e);  }catch (  KeyManagementException e) {    throw new IgniteSpiException("Failed to initialize SSL context. URI:" + uri,e);  }  return new URIContext(scanDir,sockFactory);}  }
class C{  public Builder title(String mediaTitle){  this.mediaTitle=mediaTitle;  return this;}  }
class C{  public Vector2f subtractLocal(Vector2f vec){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  x-=vec.x;  y-=vec.y;  return this;}  }
class C{  private void _serializeArray(PageContext pc,Set test,Array array,StringBuilder sb,boolean serializeQueryByColumns,Set<Object> done) throws ConverterException {  _serializeList(pc,test,array.toList(),sb,serializeQueryByColumns,done);}  }
class C{  public PrereadNames(File preread,LongRange region) throws IOException {  this(preread,region,false);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:10.996 -0500",hash_original_method="6054E23D0D81F613FCE07FC6523D2D13",hash_generated_method="245D71CD2C0456855913E82F38D75EE9") public NNTPConnectionClosedException(String message){  super(message);}  }
class C{  WindowInfoImpl(@NotNull String id){  myActive=false;  myAnchor=ToolWindowAnchor.LEFT;  myAutoHide=false;  myFloatingBounds=null;  myId=id;  setType(ToolWindowType.DOCKED);  myVisible=false;  myWeight=DEFAULT_WEIGHT;  mySideWeight=DEFAULT_SIDE_WEIGHT;  myOrder=-1;  mySplitMode=false;}  }
class C{  public void removeFactsValidate(String tableName,FactsValidator listener){  if (tableName == null || listener == null)   return;  String propertyName=m_globalValidators.contains(listener) ? tableName + "*" : tableName + listener.getAD_Client_ID();  ArrayList<FactsValidator> list=m_factsValidateListeners.get(propertyName);  if (list == null)   return;  list.remove(listener);  if (list.size() == 0)   m_factsValidateListeners.remove(propertyName);}  }
class C{  public void testSetIndexedProperty(){  ArbitraryPropertySupport instance=(new UnboundBeanImpl()).aps();  instance.setIndexedProperty(INDEXED_PROPERTY,1,NEW_VALUE);  instance.setIndexedProperty(MAPPED_INDEXED,1,NEW_VALUE);  assertEquals(OLD_VALUE,instance.getIndexedProperty(INDEXED_PROPERTY,0));  assertEquals(OLD_VALUE,instance.getIndexedProperty(MAPPED_INDEXED,0));  assertEquals(NEW_VALUE,instance.getIndexedProperty(INDEXED_PROPERTY,1));  assertEquals(NEW_VALUE,instance.getIndexedProperty(MAPPED_INDEXED,1));  instance.setIndexedProperty(INDEXED_PROPERTY,0,NEW_VALUE);  instance.setIndexedProperty(MAPPED_INDEXED,0,NEW_VALUE);  assertEquals(NEW_VALUE,instance.getIndexedProperty(INDEXED_PROPERTY,0));  assertEquals(NEW_VALUE,instance.getIndexedProperty(MAPPED_INDEXED,0));  assertNull(instance.getIndexedProperty(NEW_PROPERTY,0));  instance.setIndexedProperty(NEW_PROPERTY,0,NEW_VALUE);  assertEquals(NEW_VALUE,instance.getIndexedProperty(NEW_PROPERTY,0));}  }
class C{  private UserAssignmentIdentifiers determineUserAssignmentIds(long triggerProcessKey) throws Exception {  ResourceHolder holder=getTriggerProcessParameters(triggerProcessKey);  ResultSet triggerProcessParameters=holder.getRs();  UserAssignmentIdentifiers result=new UserAssignmentIdentifiers();  while (triggerProcessParameters.next()) {    String parameterName=triggerProcessParameters.getString("name");    if (TriggerProcessParameterName.SUBSCRIPTION.name().equals(parameterName)) {      String subId=getObjectFromXML(triggerProcessParameters,String.class);      result.setSubscriptionId(subId);    }    if (TriggerProcessParameterName.USERS_TO_ADD.name().equals(parameterName)) {      List<VOUsageLicense> usersToAdd=ParameterizedTypes.list(getObjectFromXML(triggerProcessParameters,ArrayList.class),VOUsageLicense.class);      for (      VOUsageLicense license : usersToAdd) {        VOUser user=license.getUser();        if (user != null) {          result.addUserToAdd(user.getUserId());        }      }    }    if (TriggerProcessParameterName.USERS_TO_REVOKE.name().equals(parameterName)) {      List<VOUserDetails> usersToRevoke=ParameterizedTypes.list(getObjectFromXML(triggerProcessParameters,ArrayList.class),VOUserDetails.class);      for (      VOUserDetails user : usersToRevoke) {        result.addUserToRevoke(user.getUserId());      }    }  }  holder.close();  if (result.isInitialized()) {    return result;  }  throw new Exception("Migration failed, no product entry found for trigger process!");}  }
class C{  protected SpecialInstrumentationPoint(){}  }
class C{  static public double j1(double x) throws ArithmeticException {  double ax;  double y;  double ans1, ans2;  if ((ax=Math.abs(x)) < 8.0) {    y=x * x;    ans1=x * (72362614232.0 + y * (-7895059235.0 + y * (242396853.1 + y * (-2972611.439 + y * (15704.48260 + y * (-30.16036606))))));    ans2=144725228442.0 + y * (2300535178.0 + y * (18583304.74 + y * (99447.43394 + y * (376.9991397 + y * 1.0))));    return ans1 / ans2;  } else {    double z=8.0 / ax;    double xx=ax - 2.356194491;    y=z * z;    ans1=1.0 + y * (0.183105e-2 + y * (-0.3516396496e-4 + y * (0.2457520174e-5 + y * (-0.240337019e-6))));    ans2=0.04687499995 + y * (-0.2002690873e-3 + y * (0.8449199096e-5 + y * (-0.88228987e-6 + y * 0.105787412e-6)));    double ans=Math.sqrt(0.636619772 / ax) * (Math.cos(xx) * ans1 - z * Math.sin(xx) * ans2);    if (x < 0.0)     ans=-ans;    return ans;  }}  }
class C{  private boolean isWhitespaceOnly(String comment){  return EMPTY_COMMENT_REGEX.matcher(comment).find();}  }
class C{  @Override public int describeContents(){  return 0;}  }
class C{  public void createForward(int localPort,int remotePort) throws TimeoutException, AdbCommandRejectedException, IOException {  AdbHelper.createForward(AndroidDebugBridge.getSocketAddress(),this,String.format("tcp:%d",localPort),String.format("tcp:%d",remotePort));}  }
class C{  public static void main(String[] args) throws Exception {  new ResultFileEvaluator().start(args);}  }
class C{  public static boolean isConnected(Context context){  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo activeNetworkInfo=connectivityManager.getActiveNetworkInfo();  return activeNetworkInfo != null && activeNetworkInfo.isConnected();}  }
class C{  public void buildClassifier(Instances data) throws Exception {  initializeClassifier(data);  while (next()) {  }  ;  done();}  }
class C{  @Override public boolean contains(O object){  if (this.resultSets.isEmpty()) {    return false;  }  for (  ResultSet<O> resultSet : this.resultSets) {    if (!resultSet.contains(object)) {      return false;    }  }  return true;}  }
class C{  public boolean hasNext() throws XMLStreamException {  return _xml.hasNext();}  }
class C{  public Where<T,ID> isNull(String columnName) throws SQLException {  addClause(new IsNull(columnName,findColumnFieldType(columnName)));  return this;}  }
class C{  public RawProperty addExtendedProperty(String name,String value){  RawProperty raw=new RawProperty(name,value);  addProperty(raw);  return raw;}  }
class C{  public CardinalityBuilder precisionThreshold(long precisionThreshold){  this.precisionThreshold=precisionThreshold;  return this;}  }
class C{  public void endCDATA() throws org.xml.sax.SAXException {  m_inCData=false;}  }
class C{  public ColorEditor(Dialog owner,CompiereColor color){  super(owner,"",true);  init(color);}  }
class C{  public Walker(StackMapTable smt){  this(smt.get());}  }
class C{  public boolean provides(Class<?> type){  if (getDisabled()) {    return false;  }  if (type.equals(jmri.ThrottleManager.class)) {    return true;  }  if (type.equals(jmri.PowerManager.class)) {    return true;  }  if (type.equals(jmri.ProgrammerManager.class)) {    return true;  }  if (type.equals(jmri.GlobalProgrammerManager.class)) {    return getProgrammerManager().isGlobalProgrammerAvailable();  }  if (type.equals(jmri.AddressedProgrammerManager.class)) {    return getProgrammerManager().isAddressedModePossible();  }  if (type.equals(jmri.SensorManager.class)) {    return true;  }  if (type.equals(jmri.TurnoutManager.class)) {    return true;  }  return false;}  }
class C{  void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException {  offset+=3;  setChangeIpFlag((attributeValue[offset] & 4) > 0);  setChangePortFlag((attributeValue[offset] & 0x2) > 0);}  }
class C{  private void checkInitialized(){  if (executeEngine == null) {    throw new IllegalStateException(ERROR_NOT_INITIALIZED);  }}  }
class C{  public static Description describe(final char[] pin){  if (pin == null || pin.length == 0) {    return new Description(0,EnumSet.noneOf(CharacterClass.class));  }  EnumSet<CharacterClass> classes=EnumSet.noneOf(CharacterClass.class);  for (  char ch : pin) {    classes.add(CharacterClass.of(ch));  }  return new Description(pin.length,classes);}  }
class C{  Context2(Context2 parent){  if (parent == null) {    prefixTable=new Hashtable();    uriTable=new Hashtable();    elementNameTable=null;    attributeNameTable=null;  } else   setParent(parent);}  }
class C{  static <T>boolean last(final T t,final List<T> ts){  return ts.indexOf(t) == ts.size() - 1;}  }
class C{  public DeleteEdit(int offset,int length){  super(offset,length);}  }
class C{  @Override public int compare(String c1,String c2){  if (c1.equals(c2)) {    return 0;  }  if (c1.equals(SIMPLE.key()) || c1.equals(XTENSION.key())) {    return -1;  } else   if (c2.equals(SIMPLE.key()) || c2.equals(XTENSION.key())) {    return 1;  } else   if (c1.equals(BITPIX.key())) {    return -1;  } else   if (c2.equals(BITPIX.key())) {    return 1;  } else   if (c1.equals(NAXIS.key())) {    return -1;  } else   if (c2.equals(NAXIS.key())) {    return 1;  }  final int naxisNc1=naxisN(c1);  final int naxisNc2=naxisN(c2);  if (naxisNc1 > 0) {    if (naxisNc2 > 0) {      if (naxisNc1 < naxisNc2) {        return -1;      } else {        return 1;      }    }    return -1;  } else   if (naxisNc2 > 0) {    return 1;  }  if (c1.equals(EXTEND.key())) {    return -1;  } else   if (c2.equals(EXTEND.key())) {    return 1;  } else   if (c1.equals(PCOUNT.key())) {    return -1;  } else   if (c2.equals(PCOUNT.key())) {    return 1;  } else   if (c1.equals(GCOUNT.key())) {    return -1;  } else   if (c2.equals(GCOUNT.key())) {    return 1;  } else   if (c1.equals(TFIELDS.key())) {    return -1;  } else   if (c2.equals(TFIELDS.key())) {    return 1;  }  if (c1.equals(BLOCKED.key())) {    return -1;  } else   if (c2.equals(BLOCKED.key())) {    return 1;  }  if (c1.equals(THEAP.key())) {    return 1;  } else   if (c2.equals(THEAP.key())) {    return -1;  } else   if (c1.equals(END.key())) {    return 1;  } else   if (c2.equals(END.key())) {    return -1;  }  return 0;}  }
class C{  public Intent putExtra(String name,char[] value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putCharArray(name,value);  return this;}  }
class C{  public void disconnect(){  if (sLogger.isActivated()) {    sLogger.info("Network access disconnected");  }  mIpAddress=null;}  }
class C{  private static void addClosingDelimiters(final StringBuffer line,final List<CStyleRunData> styleRuns,final boolean hasMemderef,final boolean hasExpressionList,final boolean hasExclamationMark){  final ColorsConfigItem colors=ConfigManager.instance().getColorSettings();  if (hasMemderef) {    styleRuns.add(new CStyleRunData(line.length(),1,colors.getMemRefColor()));    line.append(']');  }  if (hasExpressionList) {    styleRuns.add(new CStyleRunData(line.length(),1,colors.getExpressionListColor()));    line.append('}');  }  if (hasExclamationMark) {    styleRuns.add(new CStyleRunData(line.length(),1,colors.getOperatorColor()));    line.append('!');  }}  }
class C{  public static VLookup createProduct(int WindowNo){  int AD_Column_ID=3840;  try {    Lookup lookup=MLookupFactory.get(Env.getCtx(),WindowNo,0,AD_Column_ID,DisplayType.Search);    return new VLookup("M_Product_ID",false,false,true,lookup);  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }  return null;}  }
class C{  public void arrayLength(){  mv.visitInsn(Opcodes.ARRAYLENGTH);}  }
class C{  private static boolean hasLandRouteToEnemyOwnedCapitol(final Territory t,final PlayerID player,final GameData data){  for (  final PlayerID ePlayer : data.getPlayerList().getPlayers()) {    for (    final Territory capital : TerritoryAttachment.getAllCapitals(ePlayer,data)) {      if (data.getRelationshipTracker().isAtWar(player,capital.getOwner()) && data.getMap().getDistance(t,capital,Matches.TerritoryIsNotImpassableToLandUnits(player,data)) != -1) {        return true;      }    }  }  return false;}  }
class C{  private static int insertView(final CConnection connection,final String name,final String description) throws SQLException {  final String query="INSERT INTO " + CTableNames.VIEWS_TABLE + "(type, name, description, creation_date, modification_date) "+ " VALUES(?::view_type, ?, ?, NOW(), NOW()) RETURNING id";  final PreparedStatement statement=connection.getConnection().prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);  try {    statement.setString(1,"non-native");    statement.setString(2,name);    if (description == null) {      statement.setNull(3,Types.VARCHAR);    } else {      statement.setString(3,description);    }    int lastId=0;    final ResultSet resultSet=statement.executeQuery();    try {      while (resultSet.next()) {        if (resultSet.isFirst()) {          lastId=resultSet.getInt(1);          break;        }      }      if (!resultSet.isFirst()) {        throw new IllegalStateException("IE02071: Unable to determine last id after SQL insertion.");      }    }  finally {      resultSet.close();    }    return lastId;  }  finally {    statement.close();  }}  }
class C{  public void tcpPort(int tcpPort){  this.tcpPort=tcpPort;}  }
class C{  public static void copy(File from,OutputStream to) throws IOException {  asByteSource(from).copyTo(to);}  }
class C{  public boolean reserve(Object object){  reservedIdsLock.lock();  if (reservedObjects.contains(object)) {    reservedIdsLock.unlock();    return false;  }  reservedObjects.add(object);  reservedIdsLock.unlock();  return true;}  }
class C{  public void testUtf8StringsWithEscaping() throws Exception {  List<byte[]> strings=generateStrings(new Random(28),720000,true);  ByteArrayOutputStream out=new ByteArrayOutputStream(16000);  SmileFactory jf=new SmileFactory();  JsonGenerator jgen=jf.createJsonGenerator(out,JsonEncoding.UTF8);  jgen.writeStartArray();  for (  byte[] str : strings) {    jgen.writeUTF8String(str,0,str.length);  }  jgen.writeEndArray();  jgen.close();  byte[] json=out.toByteArray();  JsonParser jp=jf.createJsonParser(json);  assertToken(JsonToken.START_ARRAY,jp.nextToken());  for (  byte[] inputBytes : strings) {    assertToken(JsonToken.VALUE_STRING,jp.nextToken());    String string=jp.getText();    byte[] outputBytes=string.getBytes("UTF-8");    assertEquals(inputBytes.length,outputBytes.length);    assertArrayEquals(inputBytes,outputBytes);  }  assertToken(JsonToken.END_ARRAY,jp.nextToken());}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ImPackage.PARAMETERIZED_TYPE_REF_IM__REWIRED_TARGET:    setRewiredTarget((SymbolTableEntry)null);  return;}super.eUnset(featureID);}  }
class C{  @Override public String toString(String field){  final StringBuilder sb=new StringBuilder();  sb.append(getClass().getSimpleName());  sb.append(':');  if (!getField().equals(field)) {    sb.append(" field=");    sb.append(getField());    sb.append(':');  }  sb.append(" Polygon: ");  sb.append(Arrays.toString(polygons));  return sb.toString();}  }
class C{  public SWFTagTypes tagDefineSprite(int id) throws IOException {  startTag(TAG_DEFINESPRITE,id,true);  out.writeUI16(0);  TagWriter writer=new TagWriter(new SpriteTags());  writer.version=version;  return writer;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public final synchronized void removeAllElements(){  m_Size=0;  m_Head=null;  m_Tail=null;}  }
class C{  @Override public void check(SnmpMibRequest inRequest) throws SnmpStatusException {  SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,SnmpErrorHandlerAgent.class.getName(),"check","Check in Exception");  throw new SnmpStatusException(SnmpDefinitions.snmpRspNotWritable);}  }
class C{  public static Number createNumber(String str) throws NumberFormatException {  if (str == null) {    return null;  }  if (StringUtils.isBlank(str)) {    throw new NumberFormatException("A blank string is not a valid number");  }  if (str.startsWith("--")) {    return null;  }  if (str.startsWith("0x") || str.startsWith("-0x")) {    return createInteger(str);  }  char lastChar=str.charAt(str.length() - 1);  String mant;  String dec;  String exp;  int decPos=str.indexOf('.');  int expPos=str.indexOf('e') + str.indexOf('E') + 1;  if (decPos > -1) {    if (expPos > -1) {      if (expPos < decPos || expPos > str.length()) {        throw new NumberFormatException(str + " is not a valid number.");      }      dec=str.substring(decPos + 1,expPos);    } else {      dec=str.substring(decPos + 1);    }    mant=str.substring(0,decPos);  } else {    if (expPos > -1) {      if (expPos > str.length()) {        throw new NumberFormatException(str + " is not a valid number.");      }      mant=str.substring(0,expPos);    } else {      mant=str;    }    dec=null;  }  if (!Character.isDigit(lastChar) && lastChar != '.') {    if (expPos > -1 && expPos < str.length() - 1) {      exp=str.substring(expPos + 1,str.length() - 1);    } else {      exp=null;    }    String numeric=str.substring(0,str.length() - 1);    boolean allZeros=isAllZeros(mant) && isAllZeros(exp);switch (lastChar) {case 'l':case 'L':      if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {        try {          return createLong(numeric);        } catch (        NumberFormatException nfe) {        }        return createBigInteger(numeric);      }    throw new NumberFormatException(str + " is not a valid number.");case 'f':case 'F':  try {    Float f=NumberUtils.createFloat(numeric);    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {      return f;    }  } catch (  NumberFormatException nfe) {  }case 'd':case 'D':try {  Double d=NumberUtils.createDouble(numeric);  if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {    return d;  }} catch (NumberFormatException nfe) {}try {return createBigDecimal(numeric);} catch (NumberFormatException e) {}default :throw new NumberFormatException(str + " is not a valid number.");}} else {if (expPos > -1 && expPos < str.length() - 1) {exp=str.substring(expPos + 1,str.length());} else {exp=null;}if (dec == null && exp == null) {try {return createInteger(str);} catch (NumberFormatException nfe) {}try {return createLong(str);} catch (NumberFormatException nfe) {}return createBigInteger(str);} else {boolean allZeros=isAllZeros(mant) && isAllZeros(exp);try {Float f=createFloat(str);if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {return f;}} catch (NumberFormatException nfe) {}try {Double d=createDouble(str);if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {return d;}} catch (NumberFormatException nfe) {}return createBigDecimal(str);}}}  }
class C{  @LargeTest public void testThumbnailWithNegativeHeight() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "MPEG4_SP_176x144_30fps_256kbps_AACLC_44.1kHz_96kbps_s_1_17.3gp";  final int tnCount=10;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  boolean flagForException=false;  try {    final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);    final int outWidth=(mediaVideoItem.getWidth() / 2);    final int outHeight=-1;    final long thumbNailStartTime=mediaVideoItem.getBoundaryBeginTime() / 2;    final long thumbNailEndTime=mediaVideoItem.getBoundaryEndTime();    mediaVideoItem.getThumbnailList(outWidth,outHeight,thumbNailStartTime,thumbNailEndTime,tnCount);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Thumbnail List with negative Height",flagForException);}  }
class C{  public void updateIndexShardSnapshotStatus(SnapshotId snapshotId,ShardId shardId,SnapshotsInProgress.ShardSnapshotStatus status){  UpdateIndexShardSnapshotStatusRequest request=new UpdateIndexShardSnapshotStatusRequest(snapshotId,shardId,status);  try {    if (clusterService.state().nodes().localNodeMaster()) {      innerUpdateSnapshotState(request);    } else {      transportService.sendRequest(clusterService.state().nodes().masterNode(),UPDATE_SNAPSHOT_ACTION_NAME,request,EmptyTransportResponseHandler.INSTANCE_SAME);    }  } catch (  Throwable t) {    logger.warn("[{}] [{}] failed to update snapshot state",t,request.snapshotId(),request.status());  }}  }
class C{  @Override public boolean isInside(Point point){  return false;}  }
class C{  public String toString(){  StringBuffer retBuffer=new StringBuffer();  retBuffer.append(getClass().getName() + " " + Integer.toString(hashCode()));  if (path != null)   retBuffer.append(" path " + path);  if (childIndices != null) {    retBuffer.append(" indices [ ");    for (int counter=0; counter < childIndices.length; counter++)     retBuffer.append(Integer.toString(childIndices[counter]) + " ");    retBuffer.append("]");  }  if (children != null) {    retBuffer.append(" children [ ");    for (int counter=0; counter < children.length; counter++)     retBuffer.append(children[counter] + " ");    retBuffer.append("]");  }  return retBuffer.toString();}  }
class C{  public void draw(Graphics graph,Rectangle clipBounds){  graph.setColor(COLOR_BACKGROUND);  graph.setFont(FONT_CHAT);  int yOffset=((clipBounds.height) - height - DIST_BOTTOM) + slideOffset + clipBounds.y;  graph.fillRect(DIST_SIDE + clipBounds.x,yOffset,width,height);  graph.setColor(COLOR_TEXT_BACK);  if (slideOffset == getMaxSlideOffset()) {    graph.drawImage(maxbutton,10 + clipBounds.x,yOffset + 3,bv);  } else {    graph.drawImage(minbutton,10 + clipBounds.x,yOffset + 3,bv);  }  printLine(graph,"Incoming messages...",29 + clipBounds.x,yOffset + 15);  graph.drawImage(resizebutton,(width - 16) + clipBounds.x,yOffset + 3,bv);  graph.drawImage(upbutton,(width - 16) + clipBounds.x,yOffset + 16,bv);  graph.drawRect((width - 16) + clipBounds.x,yOffset + 30,13,getScrollbarOuterHeight());  graph.drawRect((width - 14) + clipBounds.x,yOffset + 31 + scrollBarOffset,9,scrollBarHeight);  graph.drawImage(downbutton,(width - 16) + clipBounds.x,(yOffset + height) - 20,bv);  graph.drawRect(10 + clipBounds.x,(yOffset + height) - 21,width - 50,17);  if (message != null && bv.getChatterBoxActive()) {    printLine(graph,visibleMessage + "_",13 + clipBounds.x,(yOffset + height) - 7);  }  int rows=messages.size();  if (rows <= max_nbr_rows) {    for (int i=0; i < messages.size(); i++) {      printLine(graph,messages.elementAt(i),10 + clipBounds.x,yOffset + 15 + ((i + 1) * 15));    }  } else {    int row=1;    for (int i=rows - max_nbr_rows - chatScroll; i < (messages.size() - chatScroll); i++) {      if (i > -1) {        printLine(graph,messages.elementAt(i),10 + clipBounds.x,yOffset + 15 + (row * 15));        row++;      }    }  }}  }
class C{  public Offset loadOffset(){  return new Offset(loadArchitecturalWord());}  }
class C{  public ObjectFactory(){}  }
class C{  public MessageBuilder withChannel(String channelID){  this.channel=client.getChannelByID(channelID);  return this;}  }
class C{  private Cookie parseCookieHeader(String h){  String lowerH=h.toLowerCase();  Cookie c=new Cookie();  int edge=h.indexOf(';');  int equals=h.indexOf('=');  if (equals < 0) {    return null;  }  c.setName(h.substring(0,equals));  if (edge < 0) {    c.setValue(h.substring(equals + 1));    c.setDomain(Util.getImplementation().getURLDomain(url));    return c;  } else {    c.setValue(h.substring(equals + 1,edge));  }  int index=lowerH.indexOf("domain=");  if (index > -1) {    String domain=h.substring(index + 7);    index=domain.indexOf(';');    if (index != -1) {      domain=domain.substring(0,index);    }    if (url.indexOf(domain) < 0) {      System.out.println("Warning: Cookie tried to set to another domain");      c.setDomain(Util.getImplementation().getURLDomain(url));    } else {      c.setDomain(domain);    }  } else {    c.setDomain(Util.getImplementation().getURLDomain(url));  }  index=lowerH.indexOf("path=");  if (index > -1) {    String path=h.substring(index + 5);    index=path.indexOf(';');    if (index > -1) {      path=path.substring(0,index);    }    if (Util.getImplementation().getURLPath(url).indexOf(path) != 0) {      System.out.println("Warning: Cookie tried to set to another path");      c.setPath(path);    } else {    }  } else {  }  Vector parts=StringUtil.tokenizeString(lowerH,';');  for (int i=0; i < parts.size(); i++) {    String part=(String)parts.elementAt(i);    part=part.trim();    if (part.indexOf("secure") == 0) {      c.setSecure(true);    } else     if (part.indexOf("httponly") == 0) {      c.setHttpOnly(true);    }  }  return c;}  }
class C{  public void disableWhenHorizontalMove(boolean disable){  mDisableWhenHorizontalMove=disable;}  }
class C{  @Inject private CachedTSDBService(SystemConfiguration config,MonitorService monitorService,CacheService cacheService,@NamedBinding TSDBService tsdbService){  super(config);  requireArgument(tsdbService != null,"TSDBService cannot be null.");  requireArgument(monitorService != null,"Monitor service cannot be null.");  requireArgument(cacheService != null,"Cache service cannot be null.");  _cacheService=cacheService;  _monitorService=monitorService;  _defaultTsdbService=tsdbService;  _mapper=new ObjectMapper();}  }
class C{  public void paintInternalFrameTitlePaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public void parse() throws ParseException {  if (len != 0) {    char ch;    while (pos < len) {      ch=parseString.charAt(pos);switch (ch) {case '\n':        line++;      col=pos;case '\t':case '\r':    pos++;  break;case ' ':pos++;if (!ignoreWhiteSpace) {formula.add(new SpaceAtom());formula.add(new BreakMarkAtom());while (pos < len) {  ch=parseString.charAt(pos);  if (ch != ' ' || ch != '\t' || ch != '\r')   break;  pos++;}}break;case DOLLAR:pos++;if (!ignoreWhiteSpace) {int style=TeXConstants.STYLE_TEXT;boolean doubleDollar=false;if (parseString.charAt(pos) == DOLLAR) {style=TeXConstants.STYLE_DISPLAY;doubleDollar=true;pos++;}formula.add(new MathAtom(new TeXFormula(this,getDollarGroup(DOLLAR),false).root,style));if (doubleDollar) {if (parseString.charAt(pos) == DOLLAR) {pos++;}}}break;case ESCAPE:Atom at=processEscape();formula.add(at);if (arrayMode && at instanceof HlineAtom) {((ArrayOfAtoms)formula).addRow();}if (insertion) {insertion=false;}break;case L_GROUP:Atom atom=getArgument();if (atom != null) {atom.type=TeXConstants.TYPE_ORDINARY;}formula.add(atom);break;case R_GROUP:group--;pos++;if (group == -1) throw new ParseException("Found a closing '" + R_GROUP + "' without an opening '"+ L_GROUP+ "'!");return;case SUPER_SCRIPT:formula.add(getScripts(ch));break;case SUB_SCRIPT:if (ignoreWhiteSpace) {formula.add(getScripts(ch));} else {formula.add(new UnderscoreAtom());pos++;}break;case '&':if (!arrayMode) throw new ParseException("Character '&' is only available in array mode !");((ArrayOfAtoms)formula).addCol();pos++;break;case '~':formula.add(new SpaceAtom());pos++;break;case PRIME:if (ignoreWhiteSpace) {formula.add(new CumulativeScriptsAtom(getLastAtom(),null,SymbolAtom.get("prime")));} else {formula.add(convertCharacter(PRIME,true));}pos++;break;case BACKPRIME:if (ignoreWhiteSpace) {formula.add(new CumulativeScriptsAtom(getLastAtom(),null,SymbolAtom.get("backprime")));} else {formula.add(convertCharacter(BACKPRIME,true));}pos++;break;case DQUOTE:if (ignoreWhiteSpace) {formula.add(new CumulativeScriptsAtom(getLastAtom(),null,SymbolAtom.get("prime")));formula.add(new CumulativeScriptsAtom(getLastAtom(),null,SymbolAtom.get("prime")));} else {formula.add(convertCharacter(PRIME,true));formula.add(convertCharacter(PRIME,true));}pos++;break;default :formula.add(convertCharacter(ch,false));pos++;}}}if (formula.root == null && !arrayMode) {formula.add(new EmptyAtom());}}  }
class C{  User canUserSeeUsersData(RequestAndResponse requestAndResponse,boolean printError) throws IOException {  final String effectiveUserId=getEffectiveUserId(requestAndResponse);  final String queryUserId=getURIParameterOrUserId(requestAndResponse);  final User effectiveUser=dbLogic.getUserById(effectiveUserId);  final User queryUser=dbLogic.getUserById(queryUserId);  if (isUserAnAdmin(requestAndResponse)) {    return queryUser;  }  if (effectiveUser == null) {    if (printError) {      requestAndResponse.print(servletText.errorRequiresSignIn(allowSaveIfNotSignedIn));    }    return null;  }  if (effectiveUser.getIsAccountClosed()) {    if (printError) {      requestAndResponse.print(servletText.errorAccountIsClosed());    }    return null;  }  if (queryUser == null) {    if (printError) {      requestAndResponse.print(servletText.errorNoAccountFound());    }    return null;  }  if (queryUser.getUserName().equals(effectiveUser.getUserName())) {    return queryUser;  }  if (printError) {    requestAndResponse.print(servletText.errorMayNotSeeList());  }  return null;}  }
class C{  public static ActiveInformationCalculatorDiscrete newInstance(int base,int history){  return new ActiveInformationCalculatorDiscrete(base,history);}  }
class C{  public String line() throws IOException {  StringBuilder buffer=new StringBuilder();  while (true) {    if (buffer.length() > Hash.MAX) {      throw new IOException("Line too long.");    }    int a=real();    if (a == '\0') {      return buffer.toString();    }    if (a == '\r') {      int b=real();      if (b == '\n') {        return buffer.toString();      } else       if (b > -1) {        buffer.append((char)a);        buffer.append((char)b);      }    } else     if (a > -1) {      buffer.append((char)a);    }  }}  }
class C{  public void begin(){  autoCommitAtTransactionEnd=true;  autoCommit=false;}  }
class C{  public void validate(){  Validation.valid("ipReconfigForm",this);  if (nodeCount >= 3) {    Validation.required("ipReconfigForm.ipv4_network_addrs2",this.ipv4_network_addrs2);    Validation.required("ipReconfigForm.ipv6_network_addrs2",this.ipv6_network_addrs2);    Validation.required("ipReconfigForm.ipv4_network_addrs3",this.ipv4_network_addrs3);    Validation.required("ipReconfigForm.ipv6_network_addrs3",this.ipv6_network_addrs3);  }  if (nodeCount == 5) {    Validation.required("ipReconfigForm.ipv4_network_addrs4",this.ipv4_network_addrs4);    Validation.required("ipReconfigForm.ipv6_network_addrs4",this.ipv6_network_addrs4);    Validation.required("ipReconfigForm.ipv4_network_addrs5",this.ipv4_network_addrs5);    Validation.required("ipReconfigForm.ipv6_network_addrs5",this.ipv6_network_addrs5);  }  ClusterIpInfo ipInfo=this.getClusterIpInfo();  if (ipInfo != null && ipInfo.getIpv4Setting() != null && ipInfo.getIpv6Setting() != null) {    if (ipInfo.getIpv4Setting().isDefault() && ipInfo.getIpv6Setting().isDefault()) {      Validation.addError(null,"validation.noConfiguration");    }  }  if (ipInfo != null) {    if (ipInfo.getIpv4Setting() != null && !ipInfo.getIpv4Setting().isDefault()) {      if (!ipInfo.getIpv4Setting().isOnSameNetworkIPv4()) {        Validation.addError(null,"validation.notOnSameNwIpv4");      }    }    if (ipInfo.getIpv6Setting() != null && !ipInfo.getIpv6Setting().isDefault()) {      if (!ipInfo.getIpv6Setting().isOnSameNetworkIPv6()) {        Validation.addError(null,"validation.notOnSameNwIpv6");      }    }  }  Set<String> dupValidationSet=new HashSet<String>();  if (network_vip != DEFAULT_IPV4_ADDR) {    dupValidationSet.add(network_vip);    if (isDuplicate(dupValidationSet,ipv4_network_addrs1)) {      Validation.addError("ipReconfigForm.ipv4_network_addrs1","validation.duplicateIpAddress");    }    if (isDuplicate(dupValidationSet,ipv4_network_addrs2)) {      Validation.addError("ipReconfigForm.ipv4_network_addrs2","validation.duplicateIpAddress");    }    if (isDuplicate(dupValidationSet,ipv4_network_addrs3)) {      Validation.addError("ipReconfigForm.ipv4_network_addrs3","validation.duplicateIpAddress");    }    if (isDuplicate(dupValidationSet,ipv4_network_addrs4)) {      Validation.addError("ipReconfigForm.ipv4_network_addrs4","validation.duplicateIpAddress");    }    if (isDuplicate(dupValidationSet,ipv4_network_addrs5)) {      Validation.addError("ipReconfigForm.ipv4_network_addrs5","validation.duplicateIpAddress");    }    if (isDuplicate(dupValidationSet,network_gateway)) {      Validation.addError("ipReconfigForm.network_gateway","validation.duplicateIpAddress");    }    if (isDuplicate(dupValidationSet,network_netmask)) {      Validation.addError("ipReconfigForm.network_netmask","validation.duplicateIpAddress");    }    if (isDuplicate(dupValidationSet,network_vip6)) {      Validation.addError("ipReconfigForm.network_vip6","validation.duplicateIpAddress");    }    if (isDuplicate(dupValidationSet,ipv6_network_addrs1)) {      Validation.addError("ipReconfigForm.ipv6_network_addrs1","validation.duplicateIpAddress");    }    if (isDuplicate(dupValidationSet,ipv6_network_addrs2)) {      Validation.addError("ipReconfigForm.ipv6_network_addrs2","validation.duplicateIpAddress");    }    if (isDuplicate(dupValidationSet,ipv6_network_addrs3)) {      Validation.addError("ipReconfigForm.ipv6_network_addrs3","validation.duplicateIpAddress");    }    if (isDuplicate(dupValidationSet,ipv6_network_addrs4)) {      Validation.addError("ipReconfigForm.ipv6_network_addrs4","validation.duplicateIpAddress");    }    if (isDuplicate(dupValidationSet,ipv6_network_addrs5)) {      Validation.addError("ipReconfigForm.ipv6_network_addrs5","validation.duplicateIpAddress");    }    if (isDuplicate(dupValidationSet,network_gateway6)) {      Validation.addError("ipReconfigForm.network_gateway6","validation.duplicateIpAddress");    }  }}  }
class C{  public static String of(CtClass type){  StringBuffer sbuf=new StringBuffer();  toDescriptor(sbuf,type);  return sbuf.toString();}  }
class C{  public LedgerDescriptor openLedger(LogSegmentMetadata metadata,boolean fence) throws BKException {  return FutureUtils.bkResult(asyncOpenLedger(metadata,fence));}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getExternalDefinition_();}  }
class C{  public final double lengthSq(){  return x * x + y * y + z * z;}  }
class C{  public void addAlias(String alias,String code){  State state=stateMap.get(code);  if (state == null) {    throw new IllegalArgumentException("DataType doesn't contain the state, " + code);  }  stateMap.put(alias,state);}  }
class C{  public RestoreSource restoreSource(){  return restoreSource;}  }
class C{  public static void checkNull(Object o){  if (o != null)   error();}  }
class C{  public Boolean isSuppressExpandCandidates(){  return suppressExpandCandidates;}  }
class C{  public void ensureOpen() throws IOException {  mParent.ensureOpen();  if (mExceptionMessage != null) {    throw new IOException(mExceptionMessage);  }  if (!mInputOpen) {    throw new IOException("Operation has already ended");  }}  }
class C{  public void reset(){  isAnimating=false;  isLoading=false;  bezier=false;  isCompleted=false;  isEnd=false;  length=radius / 2;  count=0;  hookCount=0;  jumpPoint.x=-1;  progress=0;  lengthX=3 * radius / 4;  lengthY=3 * radius / 4;  a.y=y + length;  b.y=y - length;  e.y=y + length;  c.x=x - length / 2;  c.y=y + length / 2;  d.x=x + length / 2;  d.y=y + length / 2;  invalidate();}  }
class C{  public boolean isPhantom(){  Object oo=get_Value(COLUMNNAME_IsPhantom);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  EquirippleHalfBandPrototype(int N,double OmegaP){  super(1,N);  if (OmegaP <= 0.0 || OmegaP >= 1.0)   throw new IllegalArgumentException("OmegaP: " + OmegaP + " out of bounds (0.0 < OmegaP < 1.0)");  bands[0][0]=0.0;  bands[0][1]=OmegaP;  generateCoefficients();}  }
class C{  public XBoolean(boolean b){  super();  m_val=b;}  }
class C{  public void releaseBuffer(){  if ((buffer.capacity() > 4194304 && buffer.limit() * BIG_SIZE_INCREASE < buffer.capacity()) || (buffer.capacity() <= 4194304 && buffer.limit() * NORMAL_INCREASE < buffer.capacity())) {    buffer=firstBuffer;  }}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  globalRoomFeatureIds=DynamicList.getInstance(new ArrayList(),factoryRoomFeatures);  departmentRoomFeatureIds=DynamicList.getInstance(new ArrayList(),factoryRoomFeatures);  globalRoomFeatureNames=DynamicList.getInstance(new ArrayList(),factoryRoomFeatures);  departmentRoomFeatureNames=DynamicList.getInstance(new ArrayList(),factoryRoomFeatures);  globalRoomFeaturesEditable=DynamicList.getInstance(new ArrayList(),factoryRoomFeatures);  departmentRoomFeaturesEditable=DynamicList.getInstance(new ArrayList(),factoryRoomFeatures);  globalRoomFeaturesAssigned=DynamicList.getInstance(new ArrayList(),factoryRoomFeatures);  departmentRoomFeaturesAssigned=DynamicList.getInstance(new ArrayList(),factoryRoomFeatures);}  }
class C{  public Stylesheet(String uri,int origin){  _uri=uri;  _origin=origin;}  }
class C{  private void addBorderLabels(){  borderLabels=new JLabel[6][6];  int[] labelLocations_X_forColumn=new int[]{0,1,2,3,4,11};  int[] labelLocations_Y_forRow=new int[]{0,1,2,5,6,12};  int[] labelWidthsInCells_forColumn=new int[]{0,1,1,1,7,1};  int[] labelHeightsInCells_forRow=new int[]{0,1,3,1,6,1};  Point[] allBorderLabelIndexes=new Point[]{new Point(1,1),new Point(2,1),new Point(3,1),new Point(4,1),new Point(5,1),new Point(1,2),new Point(3,2),new Point(5,2),new Point(1,3),new Point(2,3),new Point(3,3),new Point(4,3),new Point(5,3),new Point(1,4),new Point(3,4),new Point(5,4),new Point(1,5),new Point(2,5),new Point(3,5),new Point(4,5),new Point(5,5)};  for (  Point index : allBorderLabelIndexes) {    Point labelLocationCell=new Point(labelLocations_X_forColumn[index.x],labelLocations_Y_forRow[index.y]);    Dimension labelSizeInCells=new Dimension(labelWidthsInCells_forColumn[index.x],labelHeightsInCells_forRow[index.y]);    JLabel label=new JLabel();    label.setOpaque(true);    label.setVisible(false);    borderLabels[index.x][index.y]=label;    centerPanel.add(label,CC.xywh(labelLocationCell.x,labelLocationCell.y,labelSizeInCells.width,labelSizeInCells.height));  }}  }
class C{  public List<String> wordBreak(String s,Set<String> dict){  List<String> words=new ArrayList<String>();  int len=s.length();  for (int i=1; i <= len; i++) {    String pref=s.substring(0,i);    if (dict.contains(pref)) {      if (i == len) {        words.add(pref);      } else {        String remain=s.substring(i,len);        List<String> remainDecomp=res.containsKey(remain) ? res.get(remain) : wordBreak(remain,dict);        if (remainDecomp != null) {          for (          String w : remainDecomp) {            words.add(pref + " " + w);          }          res.put(remain,remainDecomp);        }      }    }  }  return words;}  }
class C{  public static List propertyDescriptors(int apiLevel){  if (apiLevel == AST.JLS2_INTERNAL) {    return PROPERTY_DESCRIPTORS_2_0;  } else {    return PROPERTY_DESCRIPTORS_3_0;  }}  }
class C{  private static List<Template> sortTemplates(List<Template> templates){  List<Template> result=new ArrayList<Template>();  for (  Template t : templates) {    int pos=0;    while (pos < result.size() && t.getPos().getStart() > result.get(pos).getPos().getStart()) {      pos++;    }    result.add(pos,t);  }  return result;}  }
class C{  private Object invokeItemSelectMethod(Object handler,String methodName,Object... params){  if (handler == null)   return null;  Method method=null;  try {    method=handler.getClass().getDeclaredMethod(methodName,AdapterView.class,View.class,int.class,long.class);    if (method != null)     return method.invoke(handler,params); else     throw new AbAppException("no such method:" + methodName);  } catch (  Exception e) {    e.printStackTrace();  }  return null;}  }
class C{  public void dispose(){  mRunButton.setSelected(false);  super.dispose();}  }
class C{  private boolean isSupportedFileReplicationCreate(FileShare fs,VirtualPool currentVpool,StringBuffer notSuppReasonBuff){  _log.info(String.format("Checking isSupportedFileReplicationCreate for Fs [%s] with vpool [%s]...",fs.getLabel(),currentVpool.getLabel()));  if (!doBasicMirrorValidation(fs,currentVpool,notSuppReasonBuff)) {    return false;  }  if (fs.getPersonality() != null && fs.getPersonality().equalsIgnoreCase(PersonalityTypes.SOURCE.name()) && !MirrorStatus.DETACHED.name().equalsIgnoreCase(fs.getMirrorStatus())) {    notSuppReasonBuff.append(String.format("File system given in request is an active source file system %s.",fs.getLabel()));    _log.info(notSuppReasonBuff.toString());    return false;  }  if (fs.getMirrorfsTargets() != null && !fs.getMirrorfsTargets().isEmpty()) {    notSuppReasonBuff.append(String.format("File system given in request has active target file system %s.",fs.getLabel()));    _log.info(notSuppReasonBuff.toString());    return false;  }  return true;}  }
class C{  protected void maximizePanel(StateChangeReason reason){  animatePanelToState(PanelState.MAXIMIZED,reason);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element root;  String tagname;  doc=(Document)load("hc_staff",false);  root=doc.getDocumentElement();  tagname=root.getTagName();  if (("image/svg+xml".equals(getContentType()))) {    assertEquals("svgTagname","svg",tagname);  } else {    assertEqualsAutoCase("element","tagname","html",tagname);  }}  }
class C{  public TwirlFilter(){  super(ConvolveFilter.CLAMP_EDGES);}  }
class C{  public static synchronized void beforeEach(UnsafeBlock block){  isValidContext("beforeEach");  contexts.get().current().addBeforeEach(block);}  }
class C{  @Nullable private ClassNode requireAst(String id,Token token){  id=expandClassName(id);  try {    return astLoader.loadAst(id);  } catch (  AstNotFoundException ex) {    AstBuilder.this.handleSyntaxError("ast not found:" + id,token);    return null;  }}  }
class C{  public synchronized void revertOne(int row){  if (list.get(row).isBeingEdited()) {    list.get(row).revert();    fireTableRowsUpdated(row,row);  }}  }
class C{  public boolean isUseContributorAgreements(){  return useContributorAgreements;}  }
class C{  private LoggerHolder(){  throw new AssertionError("The LoggerHolder should never be instantiated");}  }
class C{  public String toString(){  return "move " + FreeCellNode.out(card) + " from freecell to "+ nth+ " column.";}  }
class C{  public void startAutoScroll(int duration){  startAutoScroll(duration,0);}  }
class C{  public static Vector2 ceil(Vector2 o){  return new Vector2(Math.ceil(o.x),Math.ceil(o.z));}  }
class C{  public boolean validateBaseURL(URL baseURL){  if (baseURL == null) {    return false;  }  try {    String testURL=baseURL.toString() + PATH_TO_CSS;    log.info("Validating BaseURL with get request (having 4 second timeout) to: " + testURL);    HttpResponse response=http.executeGetWithTimeout(new HttpGet(testURL),DEFAULT_TO);    return HttpServletResponse.SC_OK == response.getStatusLine().getStatusCode();  } catch (  ClientProtocolException e) {    log.info("Protocol error connecting to new base URL [" + baseURL.toString() + "]",e);  }catch (  IOException e) {    log.info("IO error connecting to new base URL [" + baseURL.toString() + "]",e);  }catch (  Exception e) {    log.info("Unknown error connecting to new base URL [" + baseURL.toString() + "]",e);  }  return false;}  }
class C{  protected void _writeChunk(byte[] buffer,long index) throws FileEncryptionException, RandomDataGenerationException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException, IOException {  byte[] iv=generateRandomChunkIV();  IvParameterSpec spec=new IvParameterSpec(iv);  encCipher.init(Cipher.ENCRYPT_MODE,getFileKey(),spec);  byte[] encChunk=encCipher.doFinal(buffer);  if (encChunk == null || encChunk.length != CHUNK_ENC_DATA_SIZE) {    throw new FileEncryptionException("Encrypted chunk length mismatch!");  }  long oldpos=backingRandomAccessFile.getFilePointer();  backingRandomAccessFile.seek(chunkOffset(index));  backingRandomAccessFile.write(iv);  backingRandomAccessFile.write(encChunk);  backingRandomAccessFile.seek(oldpos);}  }
class C{  public static boolean isLocalResourceUri(Uri uri){  final String scheme=getSchemeOrNull(uri);  return FrescoUri.LOCAL_RESOURCE_SCHEME.equals(scheme);}  }
class C{  @Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){  alpha=(float)-headerView.getTop() / (float)TOP_HEIGHT;  if (alpha > 1) {    alpha=1;  }  if (mSwitch.isChecked()) {    mBlurredImage.setAlpha(alpha);  }  mBlurredImage.setTop(headerView.getTop() / 2);  mNormalImage.setTop(headerView.getTop() / 2);  mBlurredImageHeader.handleScroll(headerView.getTop() / 2);}  }
class C{  public RaptorImageRegistry(){  this(Display.getCurrent());}  }
class C{  protected List<String> addWhitespace(List<String> list){  List<String> whitespaceList=new ArrayList<>();  for (  String value : list) {    whitespaceList.add(addWhitespace(value));  }  return whitespaceList;}  }
class C{  @Override @InService(TableWriterService.class) public Page writeCheckpoint(TableKelp table,OutSegment sOut,long oldSequence,int saveLength,int saveTail,int saveSequence) throws IOException {  BlockLeaf[] blocks=_blocks;  int size=BLOCK_SIZE * blocks.length;  WriteStream os=sOut.out();  int available=sOut.getAvailable();  if (available < os.position() + size) {    return null;  }  long newSequence=sOut.getSequence();  if (newSequence < oldSequence) {    return null;  }  compareAndSetSequence(oldSequence,newSequence);  PageLeafStub stub=_stub;  Type type;  if (saveLength > 0 && oldSequence == newSequence && stub != null && stub.allowDelta()) {    int offset=(int)os.position();    type=writeDelta(table,sOut.out(),saveLength);    int length=(int)(os.position() - offset);    stub.addDelta(table,offset,length);  } else {    int offset=(int)os.position();    if (sOut.isCompress()) {      try (OutputStream zOut=sOut.outCompress()){        type=writeCheckpointFull(table,zOut,saveTail);      }     } else {      type=writeCheckpointFull(table,sOut.out(),saveTail);    }    int length=(int)(os.position() - offset);    stub=new PageLeafStub(getId(),getNextId(),sOut.getSegment(),offset,length);    stub.setLeafRef(this);    _stub=stub;  }  _writeType=type;  return this;}  }
class C{  public ResultRecord(){}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static void main(String argv[]){  System.out.println(getVersion());}  }
class C{  private void onSecondaryPointerUp(MotionEvent ev){  final int pointerIndex=MotionEventCompat.getActionIndex(ev);  final int pointerId=MotionEventCompat.getPointerId(ev,pointerIndex);  if (pointerId == mActivePointerId) {    final int newPointerIndex=pointerIndex == 0 ? 1 : 0;    mActivePointerId=MotionEventCompat.getPointerId(ev,newPointerIndex);  }}  }
class C{  public void paint(Graphics g){  Graphics2D g2=(Graphics2D)g;  g2.setColor(isSelected() ? DisplayNodeUtils.getNodeSelectedFillColor() : unselectedColor);  g2.fill(getShape());  g2.setColor(isSelected() ? DisplayNodeUtils.getNodeSelectedEdgeColor() : DisplayNodeUtils.getNodeEdgeColor());  g2.draw(getShape());  super.paint(g);}  }
class C{  public JComponent navigatingTo(String id,Map wizardData){  return impl.navigatingTo(id,wizardData);}  }
class C{  public void success(String message){  successCallback.invoke(message);}  }
class C{  static public void validateSplits(final LocalPartitionMetadata originalPartitionMetadata,final Split[] splits,final boolean checkFromToIndex){  if (originalPartitionMetadata == null)   throw new IllegalArgumentException();  if (splits == null)   throw new IllegalArgumentException("splits[] is null.");  final int nsplits=splits.length;  if (nsplits <= 1)   throw new AssertionError("Expecting at least two splits, but found " + nsplits);  int lastToIndex=-1;  byte[] fromKey=originalPartitionMetadata.getLeftSeparatorKey();  for (int i=0; i < nsplits; i++) {    final Split split=splits[i];    if (split == null)     throw new AssertionError();    if (split.pmd == null)     throw new AssertionError();    if (!(split.pmd instanceof LocalPartitionMetadata))     throw new AssertionError();    final LocalPartitionMetadata pmd=(LocalPartitionMetadata)split.pmd;    if (pmd.getLeftSeparatorKey() == null)     throw new AssertionError();    if (!BytesUtil.bytesEqual(fromKey,pmd.getLeftSeparatorKey()))     throw new AssertionError();    if (pmd.getRightSeparatorKey() != null) {      if (BytesUtil.compareBytes(fromKey,pmd.getRightSeparatorKey()) >= 0)       throw new AssertionError();    }    fromKey=pmd.getRightSeparatorKey();    if (checkFromToIndex) {      if (i == 0) {        if (split.fromIndex != 0)         throw new AssertionError();        if (split.toIndex <= split.fromIndex)         throw new AssertionError();      } else {        if (split.fromIndex != lastToIndex)         throw new AssertionError();      }      if (i + 1 == nsplits && split.toIndex == 0) {        if (split.ntuples != 0)         throw new AssertionError();        log.warn("Last split has no definate tuple count");      } else {        if (split.toIndex - split.fromIndex != split.ntuples)         throw new AssertionError();      }    }    lastToIndex=split.toIndex;  }  if (!BytesUtil.bytesEqual(originalPartitionMetadata.getLeftSeparatorKey(),splits[0].pmd.getLeftSeparatorKey())) {    throw new AssertionError("leftSeparator[0]" + ": expected=" + BytesUtil.toString(originalPartitionMetadata.getLeftSeparatorKey()) + ", actual="+ BytesUtil.toString(splits[0].pmd.getLeftSeparatorKey()));  }{    final byte[] rightSeparator=((LocalPartitionMetadata)splits[splits.length - 1].pmd).getRightSeparatorKey();    if (rightSeparator == null) {      if (originalPartitionMetadata.getRightSeparatorKey() != null)       throw new AssertionError("rightSeparator for lastSplit: expected=" + BytesUtil.toString(originalPartitionMetadata.getRightSeparatorKey()) + ", actual=null");    } else {      if (!rightSeparator.equals(originalPartitionMetadata.getRightSeparatorKey()))       throw new AssertionError("rightSeparator for lastSplit: expected=" + BytesUtil.toString(originalPartitionMetadata.getRightSeparatorKey()) + ", actual="+ BytesUtil.toString(rightSeparator));    }  }}  }
class C{  public ObjectIdentifier(int[] oid){  validate(oid);  this.oid=oid;}  }
class C{  public SerializedObject(Object toStore,boolean compress) throws Exception {  ByteArrayOutputStream ostream=new ByteArrayOutputStream();  OutputStream os=ostream;  ObjectOutputStream p;  if (!compress)   p=new ObjectOutputStream(new BufferedOutputStream(os)); else   p=new ObjectOutputStream(new BufferedOutputStream(new GZIPOutputStream(os)));  p.writeObject(toStore);  p.flush();  p.close();  m_storedObjectArray=ostream.toByteArray();  m_isCompressed=compress;  m_isJython=(toStore instanceof JythonSerializableObject);}  }
class C{  public double doOperation() throws OperatorFailedException {  double logq=0;  try {    if (MathUtils.nextDouble() < 0.5)     logq=AddOperation(); else     logq=RemoveOperation();  } catch (  OperatorFailedException ofe) {    if (ofe.getMessage().compareTo("No reassortment nodes to remove.") != 0) {      System.err.println("Catch: " + ofe.getMessage());    }  }  if (arg.isBifurcationDoublyLinked(arg.getRoot()))   throw new OperatorFailedException("trouble with double-rooted root");  return logq;}  }
class C{  public static void writeContentType(WspEncodingVersion wspEncodingVersion,OutputStream theOs,String theContentType) throws IOException {  int wellKnownContentType=WspUtil.getWellKnownContentTypeId(wspEncodingVersion,theContentType.toLowerCase());  if (wellKnownContentType == -1) {    writeValueLength(theOs,theContentType.length() + 1);    writeExtensionMedia(theOs,theContentType);  } else {    writeShortInteger(theOs,wellKnownContentType);  }}  }
class C{  public void terminate(){  if (isTerminating.compareAndSet(false,true)) {    while (!queue.isEmpty()) {      PooledConnection conn=queue.poll();      if (conn != null) {        conn.dispose();      }    }    for (    PooledConnection pooledConnection : acquiredConnections) {      pooledConnection.dispose();    }  }}  }
class C{  private void parseFirstConsonant(){  Iterator iter=alFirstConsonants.iterator();  while (iter.hasNext()) {    String strFirstCon=(String)iter.next();    if (strSyllable.startsWith(strFirstCon,iCurPos)) {      strFirstConsonant=strFirstCon;      iCurPos+=strFirstCon.length();      return;    }  }  strFirstConsonant=ZERO;}  }
class C{  private static boolean writeUnmarshalArgument(IndentingWriter p,String streamName,Type type,String name) throws IOException {  boolean readObject=false;  if (name != null) {    p.p(name + " = ");  }  int typeCode=type.getTypeCode();switch (type.getTypeCode()) {case TC_BOOLEAN:    p.p(streamName + ".readBoolean()");  break;case TC_BYTE:p.p(streamName + ".readByte()");break;case TC_CHAR:p.p(streamName + ".readChar()");break;case TC_SHORT:p.p(streamName + ".readShort()");break;case TC_INT:p.p(streamName + ".readInt()");break;case TC_LONG:p.p(streamName + ".readLong()");break;case TC_FLOAT:p.p(streamName + ".readFloat()");break;case TC_DOUBLE:p.p(streamName + ".readDouble()");break;case TC_ARRAY:case TC_CLASS:p.p("(" + type + ") "+ streamName+ ".readObject()");readObject=true;break;default :throw new Error("unexpected type code: " + typeCode);}return readObject;}  }
class C{  public void displayComponentsOnscreen(final int startPage,int endPage){  if (compData != null) {    endPage++;    compData.displayComponents(startPage,endPage);    org.jpedal.DevFlags.formsLoaded=true;  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.PAREN_EXPRESSION__EXPRESSION:    return basicSetExpression(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public BitcoinURI(String uri) throws BitcoinURIParseException {  this(null,uri);}  }
class C{  public DiasporaPodUrl fromJson(JSONObject json) throws JSONException {  if (json.has("host")) {    host=json.getString("host");  }  if (json.has("protocol")) {    protocol=json.getString("protocol");  }  if (json.has("port")) {    port=json.getInt("port");  }  return this;}  }
class C{  public RequestHandle delete(Context context,String url,Header[] headers,ResponseHandlerInterface responseHandler){  final HttpDelete delete=new HttpDelete(URI.create(url).normalize());  if (headers != null)   delete.setHeaders(headers);  return sendRequest(httpClient,httpContext,delete,null,responseHandler,context);}  }
class C{  @WorkerThread private void reloadFromDb(){  Logger.i("AptoideUpdates","(reloadFromDb) UI Thread = " + AptoideUtils.UI.isUiThread());  AptoideDatabase database=new AptoideDatabase(Aptoide.getDb());  database.invalidateUpdates();  Intent intent=new Intent(getActivity(),UpdatesService.class);  intent.putExtra(UpdatesService.FORCE_UPDATE,true);  getActivity().startService(intent);}  }
class C{  public TransformerException(String message,Throwable e){  super(((message == null) || (message.length() == 0)) ? e.toString() : message);  this.containedException=e;  this.locator=null;}  }
class C{  static boolean containsIgnoreCaseTrimmed(CharArrayBuffer buffer,int beginIndex,final String str){  int len=buffer.length();  char[] chars=buffer.buffer();  while (beginIndex < len && HTTP.isWhitespace(chars[beginIndex])) {    beginIndex++;  }  int size=str.length();  boolean ok=len >= beginIndex + size;  for (int j=0; ok && (j < size); j++) {    char a=chars[beginIndex + j];    char b=str.charAt(j);    if (a != b) {      a=toLower(a);      b=toLower(b);      ok=a == b;    }  }  return ok;}  }
class C{  public boolean equalsIgnoreCase(Vertex vertex){  if (this.equals(vertex)) {    return true;  }  if ((this.data instanceof String) && (vertex.getData() instanceof String)) {    return ((String)this.data).equalsIgnoreCase((String)vertex.getData());  }  return false;}  }
class C{  public String toString(){  return "[" + left + ","+ right+ ")";}  }
class C{  private void updateServerStart(UpdateServerHeartbeat update){  boolean isSSL=false;  ServerHeartbeat server=_root.createServer(update.getAddress(),update.getPort(),isSSL,0,getCluster());  server.setDisplayName(update.getDisplayName());  updateServer(server,update);  if (server.getRack() != null) {    server.getRack().update();  }}  }
class C{  public void remove(String key){  if (key == null || key.isEmpty())   return;  if (super.containsKey(key))   super.remove(key); else   if (this.containsKey(".")) {    String[] keys=key.split("\\.",2);    if (super.get(keys[0]) instanceof ConfigSection) {      ConfigSection section=(ConfigSection)super.get(keys[0]);      section.remove(keys[1]);    }  }}  }
class C{  @Override public void runScript(HiveContext hqlContext){  String[] expressions=ScriptSplitter.splitScriptIntoExpressions(script);  for (  String expression : expressions) {    hqlContext.sql(expression);  }}  }
class C{  public int numOfEntries(){  return ByteArray.readU16bit(info,0);}  }
class C{  public int capacity(){  return data == null ? 0 : data.length;}  }
class C{  @Override public int hashCode(){  T v=get();  if (v == null)   return 0;  return v.hashCode();}  }
class C{  @Override public int analyseProtocol(){  logging.log(getClass(),"\nAnalyse: " + getProtocol() + " with ID: "+ getToken(),Logging.DEBUG);  ArrayList<SSOProtocol> last_protocolflow=SSOProtocol.getLastProtocolFlow();  if (last_protocolflow != null) {    double listsize=(double)last_protocolflow.size();    double protocol=0;    double token=0;    long tmp=0;    long curr_time=0;    long last_time=0;    boolean wait=true;    for (    SSOProtocol sso : last_protocolflow) {      if (sso.getProtocol().contains(this.getProtocol())) {        logging.log(getClass(),sso.getProtocol(),Logging.DEBUG);        protocol++;      }      if (sso.getToken().equals(this.getToken())) {        logging.log(getClass(),sso.getToken(),Logging.DEBUG);        token++;      }      if (wait) {        wait=false;      } else {        curr_time=sso.getTimestamp();        tmp+=curr_time - last_time;        logging.log(getClass(),"Diff: " + (curr_time - last_time),Logging.DEBUG);      }      last_time=sso.getTimestamp();    }    if (listsize >= 0) {      double diff_time=((double)tmp / listsize);      double curr_diff_time=getTimestamp() - last_protocolflow.get(last_protocolflow.size() - 1).getTimestamp();      double time_bonus=0;      logging.log(getClass(),"CurrDiff:" + curr_diff_time + " Diff:"+ diff_time,Logging.DEBUG);      if (curr_diff_time <= (diff_time + 4000)) {        time_bonus=0.35;      }      double prob=((protocol / listsize) + (token / listsize) * 2) / 3 + (time_bonus);      logging.log(getClass(),"Probability: " + prob,Logging.DEBUG);      if (prob >= 0.7) {        return getIDOfLastList();      }    }  }  return newProtocolflowID();}  }
class C{  int MAClen(){  return macAlg.size;}  }
class C{  public GdbInfoLine finish() throws IOException, InterruptedException, DebuggerException {  sendCommand("finish");  return infoLine();}  }
class C{  protected void processTableStructureChanges(Database currentModel,Database desiredModel,Collection<TableChange> changes,StringBuilder ddl){  filterChanges(changes);  LinkedHashMap<String,List<TableChange>> changesPerTable=new LinkedHashMap<String,List<TableChange>>();  LinkedHashMap<String,List<ForeignKey>> unchangedFKs=new LinkedHashMap<String,List<ForeignKey>>();  boolean caseSensitive=delimitedIdentifierModeOn;  for (Iterator<TableChange> changeIt=changes.iterator(); changeIt.hasNext(); ) {    TableChange change=changeIt.next();    String name=change.getChangedTable().getName();    if (!caseSensitive) {      name=name.toUpperCase();    }    List<TableChange> changesForTable=(List<TableChange>)changesPerTable.get(name);    if (changesForTable == null) {      changesForTable=new ArrayList<TableChange>();      changesPerTable.put(name,changesForTable);      unchangedFKs.put(name,getUnchangedForeignKeys(currentModel,desiredModel,name));    }    changesForTable.add(change);  }  addRelevantFKsFromUnchangedTables(currentModel,desiredModel,changesPerTable.keySet(),unchangedFKs);  for (Iterator<Map.Entry<String,List<ForeignKey>>> tableFKIt=unchangedFKs.entrySet().iterator(); tableFKIt.hasNext(); ) {    Map.Entry<String,List<ForeignKey>> entry=tableFKIt.next();    Table targetTable=desiredModel.findTable((String)entry.getKey(),caseSensitive);    for (Iterator<ForeignKey> fkIt=entry.getValue().iterator(); fkIt.hasNext(); ) {      writeExternalForeignKeyDropStmt(targetTable,fkIt.next(),ddl);    }  }  Database copyOfCurrentModel=copy(currentModel);  for (Iterator<Map.Entry<String,List<TableChange>>> tableChangeIt=changesPerTable.entrySet().iterator(); tableChangeIt.hasNext(); ) {    Map.Entry<String,List<TableChange>> entry=tableChangeIt.next();    processTableStructureChanges(copyOfCurrentModel,desiredModel,entry.getKey(),entry.getValue(),ddl);  }  for (Iterator<Map.Entry<String,List<ForeignKey>>> tableFKIt=unchangedFKs.entrySet().iterator(); tableFKIt.hasNext(); ) {    Map.Entry<String,List<ForeignKey>> entry=tableFKIt.next();    Table targetTable=desiredModel.findTable((String)entry.getKey(),caseSensitive);    for (Iterator<ForeignKey> fkIt=entry.getValue().iterator(); fkIt.hasNext(); ) {      writeExternalForeignKeyCreateStmt(desiredModel,targetTable,fkIt.next(),ddl);    }  }}  }
class C{  private List<AssetOption> createFilesystemOptions(Collection<FileShareRestRep> filesystems){  return createFilesystemOptions(filesystems,null);}  }
class C{  protected Key engineTranslateKey(Key key) throws InvalidKeyException {  try {    if (key instanceof javax.crypto.interfaces.DHPublicKey) {      if (key instanceof com.sun.crypto.provider.DHPublicKey) {        return key;      }      DHPublicKeySpec dhPubKeySpec=engineGetKeySpec(key,DHPublicKeySpec.class);      return engineGeneratePublic(dhPubKeySpec);    } else     if (key instanceof javax.crypto.interfaces.DHPrivateKey) {      if (key instanceof com.sun.crypto.provider.DHPrivateKey) {        return key;      }      DHPrivateKeySpec dhPrivKeySpec=engineGetKeySpec(key,DHPrivateKeySpec.class);      return engineGeneratePrivate(dhPrivKeySpec);    } else {      throw new InvalidKeyException("Wrong algorithm type");    }  } catch (  InvalidKeySpecException e) {    throw new InvalidKeyException("Cannot translate key",e);  }}  }
class C{  public static Todo instance(Context context){  Todo instance=context.get(todoKey);  if (instance == null)   instance=new Todo(context);  return instance;}  }
class C{  public AbstractDataSource(String name,Class<? extends Comparable<?>>... types){  this.name=name;  setColumnTypes(types);  dataListeners=new LinkedHashSet<DataListener>();}  }
class C{  private void processEvent(final String action,final DTNHost host1,final DTNHost host2,final Message message,final String extra){  write(getSimTime() + " " + action+ " "+ (host1 != null ? host1 : "")+ (host2 != null ? (" " + host2) : "")+ (message != null ? " " + message : "")+ (extra != null ? " " + extra : ""));}  }
class C{  private String validateModule(IModule imodule,IJavaProject javaProject,ILaunchConfiguration configuration){  List<String> linkers=imodule.getAddLinkers();  List<String> redirects=imodule.getSetConfigurationProperty("devModeRedirectEnabled");  List<String> useSourceMaps=imodule.getSetConfigurationProperty("compiler.useSourceMaps");  String gwtVersion=GwtVersionUtil.getProjectGwtVersion(javaProject);  boolean legacySuperDevModePossibleForGwtVersion=GWTLaunchConstants.SUPERDEVMODE_LAUNCH_LEGACY_VERSIONS.contains(gwtVersion);  List<String> errors=new ArrayList<String>();  if (legacySuperDevModePossibleForGwtVersion && (linkers == null || linkers.indexOf(GWTLaunchConstants.SUPERDEVMODE_LINKER_NAME) < 0)) {    errors.add(ERROR_NO_LINKER);  }  if (gwtVersion.contains("2.5") && redirects == null) {    errors.add(ERROR_NO_LINKER_REDIRECT);  } else   if (gwtVersion.contains("2.5") && redirects != null) {    for (    String redirect : redirects) {      if (redirect.toLowerCase().equals("false")) {        errors.add(ERROR_NO_LINKER_REDIRECT);        break;      }    }    for (    String useSourceMap : useSourceMaps) {      if (useSourceMap.toLowerCase().equals("false")) {        errors.add(ERROR_NO_LINKER_NOSOURCEMAP);        break;      }    }  }  if (errors.size() > 0) {    return StringUtilities.join(errors,", ");  }  return null;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;default :  return null;}}  }
class C{  public GsonBuilder addSerializationExclusionStrategy(ExclusionStrategy strategy){  excluder=excluder.withExclusionStrategy(strategy,true,false);  return this;}  }
class C{  public void testGcdBothZeros(){  byte rBytes[]={0};  BigInteger aNumber=new BigInteger("0");  BigInteger bNumber=BigInteger.valueOf(0L);  BigInteger result=aNumber.gcd(bNumber);  byte resBytes[]=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public static float[] subarray(float[] buffer,int offset,int length){  float temp[]=new float[length];  System.arraycopy(buffer,offset,temp,0,length);  return temp;}  }
class C{  private long offset(long index){  return (index / 64) * 8;}  }
class C{  public PackageMemberItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static void isInstanceOf(String argumentName,Object argumentObject,Class<?>... targetClasses){  notNull(argumentName,argumentObject);  for (int i=0; i < targetClasses.length; ) {    if (targetClasses[i++].isInstance(argumentObject)) {      return;    }  }  StringBuilder sb=new StringBuilder(argumentName);  sb.append(" must be an instance of");  for (int i=0; i < targetClasses.length; ) {    if (i != 0) {      sb.append(",");    }    sb.append(" ").append(targetClasses[i++].getName());  }  throw new IllegalArgumentException(sb.toString());}  }
class C{  public final void addChange(final TextChange change){  Assert.isNotNull(change);  final ComposableBufferChange result=new ComposableBufferChange();  result.setEdit(change.getEdit());  final TextEditBasedChangeGroup[] groups=change.getChangeGroups();  final List list=new ArrayList(groups.length);  for (int index=0; index < groups.length; index++) {    final TextEditBasedChangeGroup group=new ComposableBufferChangeGroup(this,groups[index].getTextEditGroup());    list.add(group);    addChangeGroup(group);  }  result.setGroups(list);  fChanges.add(result);}  }
class C{  public boolean isAdmin(){  return (getAdminLevel() != 0);}  }
class C{  protected SVGDecoratedShapeElementBridge(){}  }
class C{  public static void list(Dfareporting reporting,Long userProfileId,int maxPageSize) throws Exception {  System.out.println("=================================================================");  System.out.println("Listing all reports");  System.out.println("=================================================================");  String pageToken=null;  ReportList reports=null;  do {    reports=reporting.reports().list(userProfileId).setMaxResults(maxPageSize).setPageToken(pageToken).execute();    for (    Report report : reports.getItems()) {      System.out.printf("Report with ID \"%s\" and display name \"%s\" was found.%n",report.getId(),report.getName());    }    pageToken=reports.getNextPageToken();  } while ((reports.getItems() != null) && !reports.getItems().isEmpty());  System.out.println();}  }
class C{  public void close() throws IOException {  in.close();}  }
class C{  public void clear(){  column=new String[0];  types=null;  rows=new Vector();  ncolumns=nrows=0;  atmaxrows=false;}  }
class C{  public void register(DispatchContext context){  if (Debug.infoOn())   Debug.logInfo("Registering dispatcher: " + context.getName(),module);  this.localContext.put(context.getName(),context);}  }
class C{  public boolean hasMoreSmallCraftElements(){  return this.getTurnSCEnum().hasMoreElements();}  }
class C{  @RequestMapping(value="podcasts_by_ids",method=RequestMethod.POST) public String updatePodcastsByIds(@ModelAttribute("updatePodcastByIdForm") PodcastByIdForm updatePodcastByIdForm,BindingResult bindingResult,ModelMap model) throws IllegalArgumentException, FeedException, IOException {  if (bindingResult.hasErrors()) {    return "redirect:/admin";  }  LOG.debug("------ updatePodcastById : update and its episodes from DB by podcast's id -----");  String[] podcastIds=updatePodcastByIdForm.getPodcastIds().split(",");  for (  String podcastId : podcastIds) {    Podcast podcast=new Podcast();    podcast.setPodcastId(Integer.valueOf(podcastId.trim()));    long start=System.currentTimeMillis();    updateService.updatePodcastById(podcast,true,updatePodcastByIdForm.getIsFeedLoadedFromLocalFile());    long elapsedTime=System.currentTimeMillis() - start;    LOG.info("It took " + elapsedTime + " miliseconds for podcastid "+ podcast.getPodcastId());  }  restClient.invokeRefreshAllCaches();  return "redirect:/admin/update/episodes";}  }
class C{  public static BaseResult parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  BaseResult object=new BaseResult();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"baseResult".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (BaseResult)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","desc").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setDesc(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","rc").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setRc(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));      reader.next();    } else {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void removeListener(final IBookmarkListener listener){  m_listeners.removeListener(listener);}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  m_fixUpWasCalled=true;  int sz=vars.size();  for (int i=vars.size() - 1; i >= 0; i--) {    QName qn=(QName)vars.elementAt(i);    if (qn.equals(m_qname)) {      if (i < globalsSize) {        m_isGlobal=true;        m_index=i;      } else {        m_index=i - globalsSize;      }      return;    }  }  java.lang.String msg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_COULD_NOT_FIND_VAR,new Object[]{m_qname.toString()});  TransformerException te=new TransformerException(msg,this);  throw new org.apache.xml.utils.WrappedRuntimeException(te);}  }
class C{  public void completePhase() throws CompilationFailedException {  errorCollector.failIfErrors();  phaseComplete=true;}  }
class C{  private double[] extend(double[] array,double value){  double[] result=null;  if (array == null) {    result=new double[1];  } else {    result=Arrays.copyOf(array,array.length + 1);  }  result[result.length - 1]=value;  return result;}  }
class C{  private static String lookup(String key){  return amh.getMessage(key);}  }
class C{  public void clearClues(){  clues.clear();}  }
class C{  private static int decodeDigit(int[] counters) throws NotFoundException {  float bestVariance=MAX_AVG_VARIANCE;  int bestMatch=-1;  int max=PATTERNS.length;  for (int i=0; i < max; i++) {    int[] pattern=PATTERNS[i];    float variance=patternMatchVariance(counters,pattern,MAX_INDIVIDUAL_VARIANCE);    if (variance < bestVariance) {      bestVariance=variance;      bestMatch=i;    }  }  if (bestMatch >= 0) {    return bestMatch;  } else {    throw NotFoundException.getNotFoundInstance();  }}  }
class C{  public boolean isSection(String name){  return false;}  }
class C{  public void addMetadataEntry(String value){  metadata.add(value.replaceAll(";",":"));}  }
class C{  public static String[] copy(String[] array){  if (array != null) {    String[] copy=new String[array.length];    System.arraycopy(array,0,copy,0,array.length);    return copy;  }  return null;}  }
class C{  public static String reverse(CharSequence self){  return new StringBuilder(self).reverse().toString();}  }
class C{  public void exportObject(Target target) throws RemoteException {  transport.exportObject(target);}  }
class C{  public SystemMemberRegionJmxImpl(SystemMemberCacheImpl cache,Region region) throws org.apache.geode.admin.AdminException {  super(cache,region);  initializeMBean(cache);}  }
class C{  public boolean isSecondaryProvisioningAddressOnly(){  return readBoolean(RcsSettingsData.SECONDARY_PROVISIONING_ADDRESS_ONLY);}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  boolean isMapgraphAccelerated(){  final IFeatureSupported obj=ClassPathUtil.classForName("com.blazegraph.rdf.gpu.MapgraphAcceleratedNamespace",null,IFeatureSupported.class,getClass().getClassLoader());  if (obj == null)   return false;  return obj.isSupported(tripleStore);}  }
class C{  int chunkSize(){  return mChunkSize;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (declaredModifiers: ");  result.append(declaredModifiers);  result.append(')');  return result.toString();}  }
class C{  private void createDetails(Composite parent){  if (!areDetailsDisplayed()) {    detailsComposite=toolkit.createComposite(parent);    TableWrapLayout layout=new TableWrapLayout();    layout.numColumns=2;    detailsComposite.setLayout(layout);    GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,((GridLayout)parent.getLayout()).numColumns,1);    gd.widthHint=getShell().getSize().x;    detailsComposite.setLayoutData(gd);    Label additonalInfo=toolkit.createLabel(detailsComposite,"Additional Information",SWT.NONE);    additonalInfo.setForeground(toolkit.getColors().getColor(IFormColors.TITLE));    additonalInfo.setFont(JFaceResources.getFont(JFaceResources.HEADER_FONT));    TableWrapData twd=new TableWrapData(TableWrapData.FILL_GRAB);    twd.colspan=2;    additonalInfo.setLayoutData(twd);    Label label=toolkit.createLabel(detailsComposite,"Exception:",SWT.NONE);    label.setForeground(toolkit.getColors().getColor(IFormColors.TITLE));    Label exceptionType=toolkit.createLabel(detailsComposite,"",SWT.WRAP);    exceptionType.setLayoutData(new TableWrapData(TableWrapData.FILL));    label=toolkit.createLabel(detailsComposite,"Message:",SWT.NONE);    label.setForeground(toolkit.getColors().getColor(IFormColors.TITLE));    Label exceptionMessage=toolkit.createLabel(detailsComposite,"",SWT.WRAP);    exceptionMessage.setLayoutData(new TableWrapData(TableWrapData.FILL));    label=toolkit.createLabel(detailsComposite,"Cause:",SWT.NONE);    label.setForeground(toolkit.getColors().getColor(IFormColors.TITLE));    Label exceptionCause=toolkit.createLabel(detailsComposite,"",SWT.WRAP);    exceptionCause.setLayoutData(new TableWrapData(TableWrapData.FILL));    label=toolkit.createLabel(detailsComposite,"Stack trace:",SWT.WRAP);    label.setForeground(toolkit.getColors().getColor(IFormColors.TITLE));    Text stackTrace=toolkit.createText(detailsComposite,"",SWT.BORDER | SWT.MULTI | SWT.READ_ONLY| SWT.V_SCROLL| SWT.H_SCROLL);    twd=new TableWrapData(TableWrapData.FILL);    twd.heightHint=150;    twd.maxWidth=0;    stackTrace.setLayoutData(twd);    if (throwable instanceof RemoteException) {      exceptionType.setText(((RemoteException)throwable).getOriginalExceptionClass());    } else {      exceptionType.setText(throwable.getClass().getName());    }    if (null != throwable.getMessage()) {      exceptionMessage.setText(throwable.getMessage());    } else {      exceptionMessage.setText("-");    }    if ((null != throwable.getCause()) && !Objects.equals(throwable,throwable.getCause())) {      exceptionCause.setText(throwable.getCause().getClass().getName() + ": " + throwable.getCause().getMessage());    } else {      exceptionCause.setText("-");    }    stackTrace.setText(ExceptionUtils.getFullStackTrace(throwable));  }}  }
class C{  public boolean scanAndGenerate() throws InterruptedException, ReplicatorException, SQLException, IOException {  Writer writer=null;  try {    scanner.parseTemplate(templateFile);  } catch (  ReplicatorException e) {    println(e.getMessage());    return false;  }  if (renameDefinitions != null) {    try {      scanner.parseRenameDefinitions(renameDefinitions);    } catch (    IOException e) {      println(e.getMessage());      return false;    }  }  if (tableFile != null)   tables=tableFileToRegex(tableFile);  if (outFile == null)   writer=new StringWriter(); else   writer=new BufferedWriter(new FileWriter(new File(outFile)));  if (tables != null && outFile != null)   println("tables = " + tables);  scanner.scan(tables,templateOptions,writer);  writer.flush();  writer.close();  if (outFile == null)   println(writer.toString()); else   println("rendered to = " + outFile);  return true;}  }
class C{  public String toString(){  final String TAB=" ";  StringBuffer retValue=new StringBuffer();  retValue.append("BooleanOperator ( ").append("set = ").append(this.set).append(TAB).append(" )");  return retValue.toString();}  }
class C{  private void initUnconfiguredFolders(){  try {    for (    FolderEntry folder : root.getChildFolders()) {      if (!projects.containsKey(folder.getVirtualFile().getPath().toString())) {        putProject(null,folder,true,false);      }    }  } catch (  ServerException|ConflictException|NotFoundException e) {    LOG.warn(e.getLocalizedMessage());  }}  }
class C{  public static <E,L extends List<E>>L filter(L list,Predicate<E> predicate){  for (Iterator<? extends E> iter=list.iterator(); iter.hasNext(); ) {    E obj=iter.next();    if (predicate.test(obj)) {      iter.remove();    }  }  return list;}  }
class C{  private void mergeVertices(){  PointIndex index=new PointIndex(options.getMergeDistance().radians());  for (  Map.Entry<S2Point,Multiset<S2Point>> edge : edges.entrySet()) {    index.add(edge.getKey());    Multiset<S2Point> vset=edge.getValue();    for (    S2Point v : vset) {      index.add(v);    }  }  Map<S2Point,S2Point> mergeMap=Maps.newHashMap();  Stack<S2Point> frontier=new Stack<S2Point>();  List<S2Point> mergeable=Lists.newArrayList();  for (  Map.Entry<S2CellId,MarkedS2Point> entry : index.entries()) {    MarkedS2Point point=entry.getValue();    if (point.isMarked()) {      continue;    }    point.mark();    S2Point vstart=point.getPoint();    frontier.push(vstart);    while (!frontier.isEmpty()) {      S2Point v0=frontier.pop();      index.query(v0,mergeable);      for (      S2Point v1 : mergeable) {        frontier.push(v1);        mergeMap.put(v1,vstart);      }    }  }  moveVertices(mergeMap);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE_NAME;case 3:return KEY;case 4:return VERSION;default :return null;}}  }
class C{  private Tab createNewTab(AnchorPane contentAnchorPane,int numberOfTabs){  String tabNamePrefix="Payload ";  if (numberOfTabs > 1) {    tabNamePrefix="OR " + tabNamePrefix;  }  Tab newTab=new Tab(tabNamePrefix + (this.filterPanelList.size()));  this.tabList.add(newTab);  if (this.filterPanelList.size() == 1) {    newTab.setClosable(false);  } else {    newTab.setClosable(true);  }  newTab.setContent(contentAnchorPane);  newTab.setOnClosed(null);  return newTab;}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  static Page read(FileStore fileStore,long pos,MVMap<?,?> map,long filePos,long maxPos){  ByteBuffer buff;  int maxLength=DataUtils.getPageMaxLength(pos);  if (maxLength == DataUtils.PAGE_LARGE) {    buff=fileStore.readFully(filePos,128);    maxLength=buff.getInt();  }  maxLength=(int)Math.min(maxPos - filePos,maxLength);  int length=maxLength;  if (length < 0) {    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,"Illegal page length {0} reading at {1}; max pos {2} ",length,filePos,maxPos);  }  buff=fileStore.readFully(filePos,length);  Page p=new Page(map,0);  p.pos=pos;  int chunkId=DataUtils.getPageChunkId(pos);  int offset=DataUtils.getPageOffset(pos);  p.read(buff,chunkId,offset,maxLength);  return p;}  }
class C{  public void put(KeyStroke keyStroke,Object actionMapKey){  super.put(keyStroke,actionMapKey);  if (getComponent() != null) {    getComponent().componentInputMapChanged(this);  }}  }
class C{  void jbInit() throws Exception {  mainPanel.setLayout(mainLayout);  mainLayout.setHgap(2);  mainLayout.setVgap(2);  infoPane.setBorder(BorderFactory.createLoweredBevelBorder());  infoPane.setPreferredSize(new Dimension(500,400));  getContentPane().add(mainPanel);  mainPanel.add(infoPane,BorderLayout.CENTER);  mainPanel.add(confirmPanel,BorderLayout.SOUTH);  infoPane.getViewport().add(info,null);  confirmPanel.addActionListener(this);}  }
class C{  public JPolicyInformation(String title){  this.title=title;  initComponents();}  }
class C{  @Override public boolean receiveEntity(ReceivePacket<?> entity,ReceiveDelivery delivery){  OutputStream out=entity.getOutputStream();  MessageDigest md5Verification=null;  int surplusLen=entity.getLength();  int cursor=0;  try {    md5Verification=MessageDigest.getInstance("MD5");    int readLen;    while (surplusLen > 0) {      if (surplusLen > mBufferSize)       readLen=mIn.read(mInBuffer); else       readLen=mIn.read(mInBuffer,0,surplusLen);      out.write(mInBuffer,0,readLen);      out.flush();      md5Verification.update(mInBuffer,0,readLen);      surplusLen-=readLen;      cursor+=readLen;      delivery.postReceiveProgress(entity,entity.getLength(),cursor);    }    return true;  } catch (  Exception e) {    receiveRedundancy();  } finally {    closeOutStream(out);    if (md5Verification != null) {      entity.setHashCode(getMD5String(md5Verification.digest()));    }  }  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Node streetAttr;  String attrName;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testEmployee=elementList.item(1);  attributes=testEmployee.getAttributes();  streetAttr=attributes.getNamedItem("class");  assertInstanceOf("typeAssert",Attr.class,streetAttr);  attrName=streetAttr.getNodeName();  assertEqualsAutoCase("attribute","nodeName","class",attrName);  attrName=((Attr)streetAttr).getName();  assertEqualsAutoCase("attribute","name","class",attrName);}  }
class C{  public void testBoundedInts(){  AtomicInteger fails=new AtomicInteger(0);  Random r=new Random();  long size=12345L;  for (int least=-15485867; least < MAX_INT_BOUND; least+=524959) {    for (int bound=least + 2; bound > least && bound < MAX_INT_BOUND; bound+=67867967) {      final int lo=least, hi=bound;      r.ints(size,lo,hi).forEach(null);    }  }  assertEquals(fails.get(),0);}  }
class C{  public static void putFloat(Context context,String key,float value){  SharedPreferences mainPref=context.getSharedPreferences(context.getResources().getString(R.string.shared_pref_package),Context.MODE_PRIVATE);  Editor editor=mainPref.edit();  editor.putFloat(key,value);  editor.commit();}  }
class C{  protected void adjustShape(){  if (this.getShape() instanceof TrackAirspace)   this.adjustTrackShape();}  }
class C{  public static ByteString toByteString(BaggageMessage message){  if (message != null) {    try {      return message.toByteString();    } catch (    Throwable t) {    }  }  return ByteString.EMPTY;}  }
class C{  public MaterialCollapsibleBody(final Widget... widgets){  this();  for (  Widget w : widgets) {    add(w);  }}  }
class C{  protected String defaultClassifierString(){  return "weka.classifiers.lazy.IBk";}  }
class C{  public boolean isClosed(){  return !isOpen;}  }
class C{  private boolean updateAllNotifications(){  assert !ThreadUtils.runningOnUiThread();  boolean ret=true;  for (  DownloadProgress progress : mDownloadProgressMap.values()) {    if (progress != null) {switch (progress.mDownloadStatus) {case COMPLETE:        removeProgressNotificationForDownload(progress.mDownloadInfo.getDownloadId());      ret=ret && addCompletedDownload(progress.mDownloadInfo);    mDownloadNotifier.notifyDownloadSuccessful(progress.mDownloadInfo);  broadcastDownloadSuccessful(progress.mDownloadInfo);break;case FAILED:removeProgressNotificationForDownload(progress.mDownloadInfo.getDownloadId());mDownloadNotifier.notifyDownloadFailed(progress.mDownloadInfo);Log.w(TAG,"Download failed: " + progress.mDownloadInfo.getFilePath());break;case IN_PROGRESS:mDownloadNotifier.notifyDownloadProgress(progress.mDownloadInfo,progress.mStartTimeInMillis);}}}return ret;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:17.105 -0500",hash_original_method="BE434DFF88CE2417ED5025C2BE62DC96",hash_generated_method="A714873C97139AD9E9871B8DA38FCAE1") private static String formatElapsedTime(StringBuilder recycle,String format,long hours,long minutes,long seconds){  if (FAST_FORMAT_HMMSS.equals(format)) {    StringBuilder sb=recycle;    if (sb == null) {      sb=new StringBuilder(8);    } else {      sb.setLength(0);    }    sb.append(hours);    sb.append(TIME_SEPARATOR);    if (minutes < 10) {      sb.append(TIME_PADDING);    } else {      sb.append(toDigitChar(minutes / 10));    }    sb.append(toDigitChar(minutes % 10));    sb.append(TIME_SEPARATOR);    if (seconds < 10) {      sb.append(TIME_PADDING);    } else {      sb.append(toDigitChar(seconds / 10));    }    sb.append(toDigitChar(seconds % 10));    return sb.toString();  } else {    return String.format(format,hours,minutes,seconds);  }}  }
class C{  public static void cursorFloatToContentValuesIfPresent(Cursor cursor,ContentValues values,String column){  final int index=cursor.getColumnIndex(column);  if (index != -1 && !cursor.isNull(index)) {    values.put(column,cursor.getFloat(index));  }}  }
class C{  public Point2D either(){  return best1;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void sleep(int ms){  SystemClock.sleep(ms);}  }
class C{  public NumericNode numberNode(short v){  return IntNode.valueOf(v);}  }
class C{  protected long[] joinLastDimensions(Subspace other){  if (this.dimensionality != other.dimensionality) {    return null;  }  int alloc=MathUtil.max(dimensions.length,other.dimensions.length);  long[] resultDimensions=new long[alloc];  int last1=-1, last2=-1;  for (int d1=BitsUtil.nextSetBit(this.dimensions,0), d2=BitsUtil.nextSetBit(other.dimensions,0); d1 >= 0 && d2 >= 0; d1=BitsUtil.nextSetBit(this.dimensions,d1 + 1), d2=BitsUtil.nextSetBit(other.dimensions,d2 + 1)) {    if (d1 == d2) {      BitsUtil.setI(resultDimensions,d1);    }    last1=d1;    last2=d2;  }  if (last1 >= 0 && last2 >= 0 && last1 < last2) {    BitsUtil.setI(resultDimensions,last1);    BitsUtil.setI(resultDimensions,last2);    return resultDimensions;  } else {    return null;  }}  }
class C{  private int compareVdcConfigVersion(String left,String right){  if (left == null && right == null) {    return 0;  }  if (left == null && right != null) {    return -1;  }  if (left != null && right == null) {    return 1;  }  return (int)(Long.parseLong(left) - Long.parseLong(right));}  }
class C{  public Date engineGetCreationDate(String alias){  token.ensureValid();  throw new ProviderException(new UnsupportedOperationException());}  }
class C{  @Override public int size(){  long count=0;  for (Node<E> n=findFirst(); n != null; n=n.next) {    if (n.getValidValue() != null)     ++count;  }  return (count >= Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int)count;}  }
class C{  private int skipDelimiters(int startPos){  if (delimiters == null) {    throw new NullPointerException();  }  int position=startPos;  while (!retDelims && position < maxPosition) {    char c=str.charAt(position);    if ((c > maxDelimChar) || (delimiters.indexOf(c) < 0))     break;    position++;  }  return position;}  }
class C{  public void testAllSpeedsPresent(){  for (int i=0; i < speeds.length; i++) {    Assert.assertTrue(map.getSpeed(speeds[i]) + " must be ge 0 to be present",0 <= map.getSpeed(speeds[i]));  }}  }
class C{  boolean containsAttributes(){  return (flags & ATTRIBUTES_FLAG) != 0;}  }
class C{  public static void main(String[] args) throws Exception {  new Analysis().start(args);}  }
class C{  public static void showDialogIf(@Nullable Dialog dialog,boolean show){  if (dialog != null) {    if (show) {      dialog.show();    } else {      dialog.hide();    }  }}  }
class C{  public void pauseDownload(int token){  moderator.pause(token);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:14.518 -0400",hash_original_method="8ECA317C2A378F8F7993EF4F47C37092",hash_generated_method="AC5113B7E13A02E185A7C44CDFF0597D") public boolean removeAll(Collection<?> c){  boolean modified=false;  for (  Object e : c)   if (remove(e))   modified=true;  return modified;}  }
class C{  public void addGeolocSharingInvitationRejected(ContactId remoteContact,GeolocSharing.ReasonCode reasonCode,long timestamp){  mGeolocSharingService.addGeolocSharingInvitationRejected(remoteContact,reasonCode,timestamp);}  }
class C{  public String uploadFile(SlingHttpServletRequest request,String path){  final RequestParameterMap params=request.getRequestParameterMap();  ResourceResolver resolver=request.getResourceResolver();  String filePath=null;  for (  final Map.Entry<String,RequestParameter[]> pairs : params.entrySet()) {    final RequestParameter[] pArr=pairs.getValue();    final RequestParameter param=pArr[0];    if (!param.isFormField()) {      final String name=param.getFileName();      final String mimeType=param.getContentType();      try {        final InputStream stream=param.getInputStream();        Resource imagesParent=resolver.getResource(path);        Node imageNode=JcrUtils.putFile(imagesParent.adaptTo(Node.class),name,mimeType,stream);        resolver.commit();        filePath=imageNode.getPath();      } catch (      javax.jcr.RepositoryException e) {        LOGGER.error("Could not save image to repository.",e);      }catch (      java.io.IOException e) {        LOGGER.error("Could not get image input stream",e);      }    }  }  return filePath;}  }
class C{  public final static boolean isNotNullOrEmpty(Object object){  return !(isNullOrEmpty(object));}  }
class C{  private void writeInt(String key,int value){  SharedPreferences.Editor ed=mSharedPreferences.edit();  ed.putInt(key,value);  ed.apply();}  }
class C{  public int insert(E e) throws RuntimeException {  int hash=(e.hashCode() & 0x7FFFFFFF) % storage.length;  int h=hash;  for (int p=1; p <= storage.length; p++) {    if (storage[h] == null) {      storage[h]=e;      num++;      return p;    } else     if (storage[h].equals(e)) {      return p;    }    h=probe.next(hash,p);  }  throw new RuntimeException("Unable to insert element: " + num + " slots taken out of "+ storage.length+ " with probe:"+ probe);}  }
class C{  public static void scaleX(View v,float fromX,float toX,int duration){  scaleX(v,fromX,toX,duration,null);}  }
class C{  public HashCode append(final int value){  iTotal=iTotal * iConstant + value;  return this;}  }
class C{  public void message(String message){  bot.sendIRC().message(channel.getName(),message);}  }
class C{  public static double[] performRegression(Matrix x,Matrix y,double ridge){  int numberOfColumns=x.getColumnDimension();  double[] coefficients=new double[numberOfColumns];  Matrix xTransposed=x.transpose();  Matrix result;  boolean finished=false;  while (!finished) {    Matrix xTx=xTransposed.times(x);    for (int i=0; i < numberOfColumns; i++) {      xTx.set(i,i,xTx.get(i,i) + ridge);    }    Matrix xTy=xTransposed.times(y);    for (int i=0; i < numberOfColumns; i++) {      coefficients[i]=xTy.get(i,0);    }    try {      result=xTx.solve(new Matrix(coefficients,coefficients.length));      for (int i=0; i < numberOfColumns; i++) {        coefficients[i]=result.get(i,0);      }      finished=true;    } catch (    Exception ex) {      double ridgeOld=ridge;      if (ridge > 0) {        ridge*=10;      } else {        ridge=0.0000001;      }      finished=false;      logger.warning("Error during calculation: " + ex.getMessage() + ": Increasing ridge factor from "+ ridgeOld+ " to "+ ridge);    }  }  return coefficients;}  }
class C{  public void storePermission(Permissions permissions) throws ServerException, ConflictException, NotFoundException {  final String domainId=permissions.getDomainId();  final String instanceId=permissions.getInstanceId();  final String userId=permissions.getUserId();  final PermissionsDao<? extends AbstractPermissions> permissionsDao=getPermissionsDao(domainId);  if (!permissions.getActions().contains(SET_PERMISSIONS) && userHasLastSetPermissions(permissionsDao,userId,instanceId)) {    throw new ConflictException("Can't edit permissions because there is not any another user with permission 'setPermissions'");  }  store(permissionsDao,userId,instanceId,permissions);}  }
class C{  private void merge(final int m,final int c,final String separator,final boolean moveFont){  if (f_x1[m] > f_x1[c]) {    f_x1[m]=f_x1[c];  }  if (f_y1[m] < f_y1[c]) {    f_y1[m]=f_y1[c];  }  if (f_x2[m] < f_x2[c]) {    f_x2[m]=f_x2[c];  }  if (f_y2[m] > f_y2[c]) {    f_y2[m]=f_y2[c];  }  if (isXMLExtraction) {    String test=Fonts.fe;    if (colorExtracted) {      test=Fonts.fe + GenericColorSpace.ce;    }    if ((moveFont) && (content[m].toString().lastIndexOf(test) != -1)) {      final String master=content[m].toString();      content[m]=new StringBuilder(master.substring(0,master.lastIndexOf(test)));      content[m].append(separator);      content[m].append(master.substring(master.lastIndexOf(test)));    } else {      content[m].append(separator);    }    if (textLength[c] > 1 && content[m].toString().endsWith(" ")) {      content[m].deleteCharAt(content[m].lastIndexOf(" "));    }    fontSize[m]=fontSize[c];    if ((content[c].indexOf("<color") != -1 && content[m].indexOf("<color") != -1) && (content[c].toString().startsWith(content[m].substring(content[m].lastIndexOf("<color"),content[m].indexOf(">",content[m].lastIndexOf("<color")))) && content[m].lastIndexOf("</color>") + 7 == content[m].lastIndexOf(">"))) {      content[c].replace(content[c].indexOf("<color"),content[c].indexOf(">") + 1,"");      content[m].replace(content[m].lastIndexOf("</color>"),content[m].lastIndexOf("</color>") + 8,"");    }    if ((content[c].indexOf("<font") != -1 && content[m].indexOf("<font") != -1) && (content[c].toString().startsWith(content[m].substring(content[m].lastIndexOf("<font"),content[m].indexOf(">",content[m].lastIndexOf("<font")))) && content[m].lastIndexOf("</font>") + 6 == content[m].lastIndexOf(">"))) {      content[c].replace(content[c].indexOf("<font"),content[c].indexOf(">") + 1,"");      content[m].replace(content[m].lastIndexOf("</font>"),content[m].lastIndexOf("</font>") + 7,"");    }    content[m]=content[m].append(content[c]);    textLength[m]+=textLength[c];    isUsed[c]=true;    content[c]=null;  } else {    fontSize[m]=fontSize[c];    content[m]=content[m].append(separator).append(content[c]);    textLength[m]+=textLength[c];    isUsed[c]=true;    content[c]=null;  }}  }
class C{  public static void e(String msg){  if (DEBUG)   Log.e(TAG,buildMessage(msg));}  }
class C{  protected boolean isPossibleToDequeueOneToOneChatMessage(ContactId contact){  Capabilities remoteCapabilities=mContactManager.getContactCapabilities(contact);  if (remoteCapabilities == null) {    if (mLogger.isActivated()) {      mLogger.debug(new StringBuilder("Cannot dequeue one-to-one chat messages as the capabilities are not known for remote contact ").append(contact).toString());    }    return false;  }  return true;}  }
class C{  @RequestMapping(value="/{type}/{uuid}",method={RequestMethod.PUT}) @ResponseBody public List<AccessEntryResponse> update(@PathVariable String type,@PathVariable String uuid,@RequestBody AccessRequest accessRequest){  AclEntity ae=accessService.getAclEntity(type,uuid);  Permission permission=AclPermissionFactory.getPermission(accessRequest.getPermission());  Acl acl=accessService.update(ae,accessRequest.getAccessEntryId(),permission);  return accessService.generateAceResponses(acl);}  }
class C{  private static int computeBestOffset(int newOffset,int invocationLocation,int bestOffset){  if (newOffset <= invocationLocation) {    if (bestOffset > invocationLocation) {      return newOffset;    } else     if (bestOffset <= newOffset) {      return newOffset;    }    return -1;  }  if (newOffset <= bestOffset) {    return newOffset;  }  return -1;}  }
class C{  protected void rehash(){  final int oldCapacity=table.length;  final Entry[] oldMap=table;  final int newCapacity=oldCapacity * 2 + 1;  final Entry[] newMap=new Entry[newCapacity];  threshold=(int)(newCapacity * loadFactor);  table=newMap;  for (int i=oldCapacity; i-- > 0; ) {    for (Entry old=oldMap[i]; old != null; ) {      final Entry e=old;      old=old.next;      final int index=(e.hash & 0x7FFFFFFF) % newCapacity;      e.next=newMap[index];      newMap[index]=e;    }  }}  }
class C{  private Map.Entry<K,V> doRemoveLastEntry(){  for (; ; ) {    Node<K,V> b=findPredecessorOfLast();    Node<K,V> n=b.next;    if (n == null) {      if (b.isBaseHeader())       return null; else       continue;    }    for (; ; ) {      Node<K,V> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (b.value == null || v == n)       break;      if (f != null) {        b=n;        n=f;        continue;      }      if (!n.casValue(v,null))       break;      K key=n.key;      if (!n.appendMarker(f) || !b.casNext(n,f))       findNode(key); else {        findPredecessor(key,comparator);        if (head.right == null)         tryReduceLevel();      }      @SuppressWarnings("unchecked") V vv=(V)v;      return new AbstractMap.SimpleImmutableEntry<K,V>(key,vv);    }  }}  }
class C{  public Matrix3d scale(double x,double y,double z){  return scale(x,y,z,this);}  }
class C{  protected void computeParameters(){  Debug.message("proj","Gnomonic.computeParameters()");  super.computeParameters();  maxscale=(width < height) ? (float)(planetPixelRadius * 2 * hPrime) / (float)width : (float)(planetPixelRadius * 2 * hPrime) / (float)height;  if (maxscale < minscale) {    maxscale=minscale;  }  if (scale > maxscale) {    scale=maxscale;  }  scaled_radius=planetPixelRadius / scale;  world.x=(int)((planetPixelRadius * 2 * hPrime) / scale);  cosCtrLat=Math.cos(centerY);  sinCtrLat=Math.sin(centerY);  hy=height / 2;  wx=width / 2;}  }
class C{  public void dispose(){  m_graph.dispose();  m_proximityUpdater.dispose();}  }
class C{  public static IPath installTestSdk(Bundle bundle,IPath sdkPathFromProjectRoot){  URL fileUrl=bundle.getEntry(sdkPathFromProjectRoot.toPortableString());  return installTestSdk(bundle,fileUrl);}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.266 -0400",hash_original_method="E4B5E15EBD1DC0F51B6909882AA2B9D3",hash_generated_method="F2EA6D6D1EB28486AFF7B8C18D6CD1F3") @Override public void write(byte[] bts) throws IOException {  try {    int len=bts != null ? bts.length : 0;    beforeWrite(len);    out.write(bts);    afterWrite(len);  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public JobContextImpl jobContext(){  return jobCtx;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void addRosterEntry(RosterEntry rosterEntry){  List<String> groupNamesList=new ArrayList<String>();  String[] groupNames;  for (  RosterGroup group : rosterEntry.getGroups()) {    groupNamesList.add(group.getName());  }  groupNames=groupNamesList.toArray(new String[groupNamesList.size()]);  RemoteRosterEntry remoteRosterEntry=new RemoteRosterEntry(rosterEntry.getUser(),rosterEntry.getName(),groupNames);  addRosterEntry(remoteRosterEntry);}  }
class C{  public MultiplexingSocket(Proxy proxy){  this((Socket)null);}  }
class C{  public void addDropVar(final VarNode dropVar){  dropVars().add(dropVar);}  }
class C{  public void testDeleteOpenFile() throws IOException {  Path dir=wrap(createTempDir());  OutputStream file=Files.newOutputStream(dir.resolve("stillopen"));  file.write(5);  file.close();  InputStream is=Files.newInputStream(dir.resolve("stillopen"));  try {    Files.delete(dir.resolve("stillopen"));    fail("should have gotten exception");  } catch (  IOException e) {    assertTrue(e.getMessage().contains("access denied"));  }  is.close();}  }
class C{  public static void boot(){  VM.sysWrite("AOS generation booted\n");  try {    log=new PrintStream(new FileOutputStream(Controller.options.COMPILATION_ADVICE_FILE_OUTPUT));  } catch (  IOException e) {    VM.sysWrite("IOException caught in AOSGenerator.java while trying to create and start log file.\n");    VM.sysWrite("Please check for file permission problems\n");  }  booted=true;  recording=false;}  }
class C{  public static boolean hasFocus(Control control){  Control focusControl=control.getDisplay().getFocusControl();  if (focusControl == null) {    return false;  }  for (Control fc=focusControl; fc != null; fc=fc.getParent()) {    if (fc == control) {      return true;    }  }  return false;}  }
class C{  public boolean isFill(){  return fill;}  }
class C{  public Object next(){  String[] line=(String[])super.next();  while (line != null && (line.length < 2 || line[4].equals("-X-")))   line=(String[])super.next();  if (line == null)   return null;  if (line[3].charAt(0) == 'I')   line[3]="B" + line[3].substring(1);  Token t=new Token(new Word(line[5],line[4]),null,line[3]);  String previous=line[3];  for (line=(String[])super.next(); line != null && line.length > 0; line=(String[])super.next()) {    if (line[3].charAt(0) == 'I' && !previous.endsWith(line[3].substring(2)))     line[3]="B" + line[3].substring(1);    t.next=new Token(new Word(line[5],line[4]),t,line[3]);    t=(Token)t.next;    previous=line[3];  }  return new LinkedVector(t);}  }
class C{  public boolean isPhantomVolumeInMultipleMaskingViews(StorageSystem storage,URI volumeId,String knownStorageGroupName) throws Exception {  CloseableIterator<CIMInstance> sgPaths=null;  try {    Volume volume=_dbClient.queryObject(Volume.class,volumeId);    CIMObjectPath volumePath=this.getVolumeMember(storage,volume);    if (volumePath != null) {      CIMInstance cimInstance=this.getInstance(storage,volumePath,true,false,PS_ELEMENT_NAME);      _log.info("phantom checker: looking at volume to see what storage groups it's part of: " + volume.getLabel());      sgPaths=getAssociatorInstances(storage,cimInstance.getObjectPath(),null,SmisConstants.SE_DEVICE_MASKING_GROUP,null,null,null);      while (sgPaths.hasNext()) {        CIMInstance sgPath=sgPaths.next();        String storageGroupName=CIMPropertyFactory.getPropertyValue(sgPath,SmisConstants.CP_ELEMENT_NAME);        Set<String> policyNames=this.findTierPoliciesForStorageGroup(storage,storageGroupName);        if ((policyNames == null || policyNames.isEmpty() || policyNames.contains(Constants.NONE.toString())) && !storageGroupName.equalsIgnoreCase(knownStorageGroupName)) {          _log.info("Found that the volume is in storage group " + storageGroupName + " which has no FAST policy");          return true;        }      }    }  } catch (  Exception e) {    _log.error("Failed trying to find existing Storage Groups for volume {}",volumeId,e);    throw e;  } finally {    closeCIMIterator(sgPaths);  }  return false;}  }
class C{  public EmulatedFields(ObjectStreamField[] fields,ObjectStreamField[] declared){  buildSlots(fields);  declaredFields=declared;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  @Override protected void entityInit(){  if (wrapped != null) {    wrapped.events.publish(new Stateful.LoadEvent());    prevPosX=posX;    prevPosY=posY;    prevPosZ=posZ;    prevRotationYaw=rotationYaw;    prevRotationPitch=rotationPitch;    setPosition(posX,posY,posZ);  }}  }
class C{  public static DynamicMessage parseFrom(Descriptor type,CodedInputStream input) throws IOException {  return newBuilder(type).mergeFrom(input).buildParsed();}  }
class C{  public void forgetVolumes(URI vplexSystemURI,List<VolumeInfo> volumeInfo,String stepId){  try {    WorkflowStepCompleter.stepExecuting(stepId);    StorageSystem vplexSystem=_dbClient.queryObject(StorageSystem.class,vplexSystemURI);    VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplexSystem,_dbClient);    client.forgetVolumes(volumeInfo);  } catch (  Exception ex) {    _log.error("An exception occurred forgetting volumes on VPLEX system {}",vplexSystemURI,ex);  }  WorkflowStepCompleter.stepSucceded(stepId);}  }
class C{  private void step1(){  final SpeakerNPC npc=npcs.get("Finn Farmer");  npc.add(ConversationStates.ATTENDING,ConversationPhrases.QUEST_MESSAGES,new QuestInStateCondition(QUEST_SLOT,QUEST_INDEX_STATUS,"deliver_to_george"),ConversationStates.ATTENDING,"Thank you for agreeing to tell George this message:",new SayTextAction("[quest.coded_message:1]"));  npc.add(ConversationStates.ATTENDING,ConversationPhrases.QUEST_MESSAGES,new AndCondition(new QuestNotActiveCondition(QUEST_SLOT),new NotCondition(new TimeReachedCondition(QUEST_SLOT,QUEST_INDEX_TIME))),ConversationStates.ATTENDING,"Perhaps, I have another message tomorrow.",null);  npc.add(ConversationStates.ATTENDING,ConversationPhrases.QUEST_MESSAGES,new AndCondition(new QuestNotActiveCondition(QUEST_SLOT),new TimeReachedCondition(QUEST_SLOT,QUEST_INDEX_TIME)),ConversationStates.QUEST_OFFERED,"I have an urgent message for #George! It's really important! But my parents don't let me wander around the city alone. As if I were a small kid! Could you please deliver a message to him?",null);  npc.add(ConversationStates.QUEST_OFFERED,"george",null,ConversationStates.QUEST_OFFERED,"Just find Tommy. Perhaps in Ados Park. George won't be far away. Could you please deliver a message to him?",null);  npc.add(ConversationStates.QUEST_OFFERED,ConversationPhrases.NO_MESSAGES,ConversationStates.IDLE,"Okay, then I better don't tell you no secrets.",new MultipleActions(new DecreaseKarmaAction(10),new SetQuestAction(QUEST_SLOT,QUEST_INDEX_STATUS,"rejected")));  npc.add(ConversationStates.QUEST_OFFERED,ConversationPhrases.YES_MESSAGES,ConversationStates.ATTENDING,null,new MultipleActions(new CreateAndSayCodedMessage(),new SetQuestAction(QUEST_SLOT,QUEST_INDEX_STATUS,"deliver_to_george")));}  }
class C{  public Enumeration<String> enumerateMeasures(){  Vector<String> newVector=new Vector<String>();  newVector.addAll(Collections.list(super.enumerateMeasures()));  newVector.addElement("measureTotal_nodes_visited");  newVector.addElement("measureMean_nodes_visited");  newVector.addElement("measureStdDev_nodes_visited");  newVector.addElement("measureMin_nodes_visited");  newVector.addElement("measureMax_nodes_visited");  newVector.addElement("measureTotal_leaves_visited");  newVector.addElement("measureMean_leaves_visited");  newVector.addElement("measureStdDev_leaves_visited");  newVector.addElement("measureMin_leaves_visited");  newVector.addElement("measureMax_leaves_visited");  return newVector.elements();}  }
class C{  public void throwCauses() throws Exception {  if (causes.isEmpty()) {    throw new IllegalStateException();  }  if (causes.size() == 1)   throw new Exception(causes.get(0));  final int k=req.getPrepareResponse().replicationFactor();  throw new Exception("replicationFactor=" + k + ", nok="+ nok+ ", nfail="+ nfail,new ExecutionExceptions(causes));}  }
class C{  public TransactionSignature(ECKey.ECDSASignature signature,Transaction.SigHash mode,boolean anyoneCanPay){  super(signature.r,signature.s);  setSigHash(mode,anyoneCanPay);}  }
class C{  public static Hour parseHour(String s){  Hour result=null;  s=s.trim();  String daystr=s.substring(0,Math.min(10,s.length()));  Day day=Day.parseDay(daystr);  if (day != null) {    String hourstr=s.substring(Math.min(daystr.length() + 1,s.length()),s.length());    hourstr=hourstr.trim();    int hour=Integer.parseInt(hourstr);    if ((hour >= FIRST_HOUR_IN_DAY) && (hour <= LAST_HOUR_IN_DAY)) {      result=new Hour(hour,day);    }  }  return result;}  }
class C{  public InvalidExpiresRangeException(int expires,String message){  super(message);  this.expires=expires;}  }
class C{  boolean isAssignment(BashPsiBuilder builder){  final String text=builder.getTokenText();  return (builder.getTokenType() == WORD) && (text != null) && !text.startsWith("-");}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public XHTMLText(String style,String lang){  appendOpenBodyTag(style,lang);}  }
class C{  private static InputStream configuredInputStream(Map parameters,URL url) throws IOException {  final URLConnection connection=url.openConnection();  if (parameters != null) {    if (parameters.containsKey("connectTimeout")) {      connection.setConnectTimeout(DefaultGroovyMethods.asType(parameters.get("connectTimeout"),Integer.class));    }    if (parameters.containsKey("readTimeout")) {      connection.setReadTimeout(DefaultGroovyMethods.asType(parameters.get("readTimeout"),Integer.class));    }    if (parameters.containsKey("useCaches")) {      connection.setUseCaches(DefaultGroovyMethods.asType(parameters.get("useCaches"),Boolean.class));    }    if (parameters.containsKey("allowUserInteraction")) {      connection.setAllowUserInteraction(DefaultGroovyMethods.asType(parameters.get("allowUserInteraction"),Boolean.class));    }    if (parameters.containsKey("requestProperties")) {      @SuppressWarnings("unchecked") Map<String,CharSequence> properties=(Map<String,CharSequence>)parameters.get("requestProperties");      for (      Map.Entry<String,CharSequence> entry : properties.entrySet()) {        connection.setRequestProperty(entry.getKey(),entry.getValue().toString());      }    }  }  return connection.getInputStream();}  }
class C{  @Category(FlakyTest.class) @Test public void testDLockAggregate() throws Throwable {  initManagement(false);  VM[] managedNodes=new VM[getManagedNodeList().size()];  VM managingNode=getManagingNode();  getManagedNodeList().toArray(managedNodes);  createGrantorLockService(managedNodes[0]);  createLockService(managedNodes[1]);  createLockService(managedNodes[2]);  checkAggregate(managingNode,3);  DistributedMember member=getMember(managedNodes[2]);  checkNavigation(managingNode,member);  createLockService(managingNode);  checkAggregate(managingNode,4);  for (  VM vm : getManagedNodeList()) {    closeLockService(vm);  }  ensureProxyCleanup(managingNode);  checkAggregate(managingNode,1);  closeLockService(managingNode);  checkAggregate(managingNode,0);}  }
class C{  public static Map<String,String> parseKeyAndValueToMap(String source){  if (StringUtils.isEmpty(source)) {    return null;  }  try {    JSONObject jsonObject=new JSONObject(source);    return parseKeyAndValueToMap(jsonObject);  } catch (  JSONException e) {    if (isPrintException) {      e.printStackTrace();    }    return null;  }}  }
class C{  @Override public CCNode addChild(CCNode node,int z,int aTag){  node.setAnchorPoint(CGPoint.ccp(0.0f,0.0f));  if (container_ != node) {    container_.addChild(node,z,aTag);  } else {    super.addChild(node,z,aTag);  }  return this;}  }
class C{  public void addExceptionsFromMember(InternalDistributedMember member,Set exceptions){  for (Iterator iter=exceptions.iterator(); iter.hasNext(); ) {    Exception ex=(Exception)iter.next();    if (ex instanceof CancelException) {      cacheExceptions.add(member);    } else     if (ex instanceof RegionDestroyedException) {      String r=((RegionDestroyedException)ex).getRegionFullPath();      Set<InternalDistributedMember> members=regionExceptions.get(r);      if (members == null) {        members=new HashSet();        regionExceptions.put(r,members);      }      members.add(member);    } else {      List el=(List)this.fatalExceptions.get(member);      if (el == null) {        el=new ArrayList(2);        this.fatalExceptions.put(member,el);      }      el.add(ex);    }  }}  }
class C{  public void test_ESTCARD_readWriteTx() throws Exception {  doInsertbyURL("POST",packagePath + "test_estcard.ttl");  final long exactRangeCount1=m_repo.rangeCount(true,null,null,null);  final long fastRangeCount1=m_repo.rangeCount(false,null,null,null);  assertEquals(7,exactRangeCount1);  assertEquals(7,fastRangeCount1);  final long mutationCount=m_repo.remove(new RemoveOp(null,RDFS.LABEL,null));  assertEquals(2,mutationCount);  final long exactRangeCount2=m_repo.rangeCount(true,null,null,null);  final long fastRangeCount2=m_repo.rangeCount(false,null,null,null);  assertEquals(5,exactRangeCount2);  assertEquals(7,fastRangeCount2);}  }
class C{  public StandardizeTransform(){}  }
class C{  public Activity runAt(String key,long time){  Activity a=get(key);  if (a != null)   ActivityManager.scheduleAt(a,time);  return a;}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + my_N+ ","+ my_s+ ","+ my_n+ ")";}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthTabbedPaneUI();}  }
class C{  @RequestMapping(value="/users",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @Secured(AuthoritiesConstants.ADMIN) public ResponseEntity<?> createUser(@RequestBody ManagedUserDTO managedUserDTO,HttpServletRequest request) throws URISyntaxException {  log.debug("REST request to save User : {}",managedUserDTO);  if (userRepository.findOneByLogin(managedUserDTO.getLogin()).isPresent()) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("user-management","userexists","Login already in use")).body(null);  } else   if (userRepository.findOneByEmail(managedUserDTO.getEmail()).isPresent()) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("user-management","emailexists","Email already in use")).body(null);  } else {    User newUser=userService.createUser(managedUserDTO);    String baseUrl=request.getScheme() + "://" + request.getServerName()+ ":"+ request.getServerPort()+ request.getContextPath();    mailService.sendCreationEmail(newUser,baseUrl);    return ResponseEntity.created(new URI("/api/users/" + newUser.getLogin())).headers(HeaderUtil.createAlert("user-management.created",newUser.getLogin())).body(newUser);  }}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("\n\t\t FVarDefs numVars [");  buffer.append(numVars);  buffer.append("] varDefs [");  Integer pos=null;  for (Iterator it=varDefs.keySet().iterator(); it.hasNext(); ) {    pos=(Integer)it.next();    buffer.append("\n\t\t\t ");    buffer.append(pos);    buffer.append(" ");    buffer.append(varDefs.get(pos).toString());  }  buffer.append("\n\t\t\t ]");  buffer.append("\n\t\t ]");  return buffer.toString();}  }
class C{  public int compare(Object o1,Object o2){  Option opt1=(Option)o1;  Option opt2=(Option)o2;  return opt1.getKey().compareToIgnoreCase(opt2.getKey());}  }
class C{  public void testElementOrderServletAfterFilter() throws Exception {  String xml=WEBAPP_TEST_HEADER.trim() + "  <filter>".trim() + "    <filter-name>f1</filter-name>".trim()+ "    <filter-class>f1class</filter-class>".trim()+ "  </filter>".trim()+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  webXml.addTag(createServletElement(webXml.getDescriptorType(),"s1","s1class"));  List<Element> order=webXml.getRootElement().getContent();  assertEquals("filter",order.get(0).getName());  assertEquals("servlet",order.get(1).getName());}  }
class C{  public static Path append(Path base,Path path,int strip){  for (  Path subPath : path) {    if (strip-- > 0) {      continue;    }    base=base.resolve(subPath.toString());  }  return base;}  }
class C{  public void show(){  if (frame == null) {    frame=new JFrame();    JMenuBar menuBar=new JMenuBar();    JMenu menu=new JMenu("File");    menuBar.add(menu);    JMenuItem menuItem1=new JMenuItem(" Save...   ");    menuItem1.addActionListener(this);    menuItem1.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));    menu.add(menuItem1);    frame.setJMenuBar(menuBar);    frame.setContentPane(getJLabel());    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);    frame.setTitle(filename);    frame.setResizable(false);    frame.pack();    frame.setVisible(true);  }  frame.repaint();}  }
class C{  public RequestHandle post(Context context,String url,RequestParams params,ResponseHandlerInterface responseHandler){  return post(context,url,paramsToEntity(params,responseHandler),null,responseHandler);}  }
class C{  private void fireMessageEventNotificationListeners(String from,String packetID,String methodName){  MessageEventNotificationListener[] listeners=null;  Method method;synchronized (messageEventNotificationListeners) {    listeners=new MessageEventNotificationListener[messageEventNotificationListeners.size()];    messageEventNotificationListeners.toArray(listeners);  }  try {    method=MessageEventNotificationListener.class.getDeclaredMethod(methodName,new Class[]{String.class,String.class});    for (int i=0; i < listeners.length; i++) {      method.invoke(listeners[i],new Object[]{from,packetID});    }  } catch (  NoSuchMethodException e) {    e.printStackTrace();  }catch (  InvocationTargetException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }}  }
class C{  synchronized void clearConnectedHandler(){  this.connectedHandler=null;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMMarkerElement(prefix,(AbstractDocument)doc);}  }
class C{  public static PlatformDecoder buildPlatformDecoder(PoolFactory poolFactory,WebpBitmapFactory webpBitmapFactory,WebpBitmapFactory.WebpErrorLogger webpErrorLogger){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    int maxNumThreads=poolFactory.getFlexByteArrayPoolMaxNumThreads();    return new ArtDecoder(poolFactory.getBitmapPool(),maxNumThreads,new Pools.SynchronizedPool<>(maxNumThreads));  } else {    if (webpBitmapFactory != null && Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {      return new GingerbreadPurgeableDecoder(webpErrorLogger);    } else {      return new KitKatPurgeableDecoder(poolFactory.getFlexByteArrayPool());    }  }}  }
class C{  public void updateMessageRecord(MessageRecord messageRecord) throws Exception {  doInTransaction(null);}  }
class C{  public static String cellInfoGSMJSON(CellInfoGsm cellInfo,boolean returnSignalStrength){  final Calendar calendar=Calendar.getInstance();  final JSONObject json=new JSONObject();  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2 && cellInfo != null) {    try {      json.put("provider",CELLINFO_PROVIDER);      json.put("type",GSM);      json.put("timestamp",calendar.getTimeInMillis());      final CellIdentityGsm identityGsm=cellInfo.getCellIdentity();      json.put("cid",identityGsm.getCid());      json.put("lac",identityGsm.getLac());      json.put("mcc",identityGsm.getMcc());      json.put("mnc",identityGsm.getMnc());      if (returnSignalStrength) {        final JSONObject jsonSignalStrength=new JSONObject();        final CellSignalStrengthGsm cellSignalStrengthGsm=cellInfo.getCellSignalStrength();        jsonSignalStrength.put("asuLevel",cellSignalStrengthGsm.getAsuLevel());        jsonSignalStrength.put("dbm",cellSignalStrengthGsm.getDbm());        jsonSignalStrength.put("level",cellSignalStrengthGsm.getLevel());        json.put("cellSignalStrengthGsm",jsonSignalStrength);      }    } catch (    JSONException exc) {      logJSONException(exc);    }  }  return json.toString();}  }
class C{  public VerticalLayout(){  this(5,CENTER,TOP);}  }
class C{  public void paintStripesAndGrid(SeaGlassContext context,Graphics g,JComponent c,int width,int height,int top){  int rh=table.getRowHeight();  int n=table.getRowCount();  int row=Math.abs(top / rh);  if (alternateColor != null) {    g.setColor(alternateColor);    g.fillRect(0,0,width,height);    g.setColor(table.getBackground());    for (int y=top + row * rh, ymax=height; y < ymax; y+=rh) {      if (row % 2 == 0) {        g.fillRect(0,y,width,rh);      }      row++;    }  } else {    g.setColor(table.getBackground());    g.fillRect(0,0,c.getWidth(),c.getHeight());  }  SynthGraphicsUtils synthG=context.getStyle().getGraphicsUtils(context);  if (table.getShowHorizontalLines()) {    g.setColor(table.getGridColor());    row=Math.abs(top / rh);    int y=top + row * rh + rh - 1;    while (y < height) {      synthG.drawLine(context,"Table.grid",g,0,y,width,y);      y+=rh;    }  }  if (table.getShowVerticalLines()) {    g.setColor(table.getGridColor());    TableColumnModel cm=table.getColumnModel();    n=cm.getColumnCount();    int y=top + row * rh;    ;    int x=-1;    for (int i=0; i < n; i++) {      TableColumn col=cm.getColumn(i);      x+=col.getWidth();      synthG.drawLine(context,"Table.grid",g,x,y,x,height);    }  }}  }
class C{  private boolean hasChild(final ITreeNode<CTag> tag){  for (int i=0; i < getChildCount(); i++) {    final CTagNode node=(CTagNode)getChildAt(i);    if (node.getObject().getObject() == tag.getObject()) {      return true;    }  }  return false;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.SOFTWARE_PATTERN___IS_A1:    return isA_1 != null && !isA_1.isEmpty();case UmplePackage.SOFTWARE_PATTERN___SINGLETON_1:  return singleton_1 != null && !singleton_1.isEmpty();case UmplePackage.SOFTWARE_PATTERN___IMMUTABLE_1:return immutable_1 != null && !immutable_1.isEmpty();case UmplePackage.SOFTWARE_PATTERN___KEY_DEFINITION_1:return keyDefinition_1 != null && !keyDefinition_1.isEmpty();case UmplePackage.SOFTWARE_PATTERN___CODE_INJECTION_1:return codeInjection_1 != null && !codeInjection_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public EventResource(){  this.indexName=BLANK;  this.partitionId=BLANK;  this.file=BLANK;}  }
class C{  public boolean removeFooterView(View v){  if (mFooterViewInfos.size() > 0) {    boolean result=false;    if (mAdapter != null && ((HeaderViewListAdapter)mAdapter).removeFooter(v)) {      if (mDataSetObserver != null) {        mDataSetObserver.onChanged();      }      result=true;    }    removeFixedViewInfo(v,mFooterViewInfos);    return result;  }  return false;}  }
class C{  public TableLayout(int cols,double gapH,double gapV){  super(gapH,gapV);  if (cols <= 0) {    throw new IllegalArgumentException("Invalid number of columns.");  }  this.cols=cols;}  }
class C{  private void validateTargetVolumeVpoolWithSourceVolume(UnManagedVolume unManagedVolume,VirtualArray virtualArray){  String sourceUnManagedVolumeId=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.REMOTE_MIRROR_SOURCE_VOLUME.toString(),unManagedVolume.getVolumeInformation());  String sourceVolumeId=sourceUnManagedVolumeId.replace(VolumeIngestionUtil.UNMANAGEDVOLUME,VolumeIngestionUtil.VOLUME);  List<URI> sourceUris=_dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVolumeNativeGuidConstraint(sourceVolumeId));  if (sourceUris.isEmpty()) {    _logger.info("Source {} Not found for target {}",sourceVolumeId,unManagedVolume.getNativeGuid());  } else {    Volume sourceVolume=_dbClient.queryObject(Volume.class,sourceUris.get(0));    VirtualPool sourceVPool=_dbClient.queryObject(VirtualPool.class,sourceVolume.getVirtualPool());    Map<URI,VpoolRemoteCopyProtectionSettings> settings=sourceVPool.getRemoteProtectionSettings(sourceVPool,_dbClient);    if (null == settings || settings.isEmpty() || !settings.containsKey(virtualArray.getId())) {      _logger.info("Target Volume's VArray {} is not matching already ingested source volume virtual pool's remote VArray ",virtualArray.getId());      throw IngestionException.exceptions.unmanagedSRDFTargetVolumeVArrayMismatch(unManagedVolume.getLabel(),sourceVolume.getVirtualArray().toString());    }  }}  }
class C{  public InlineKeyboardButton.InlineKeyboardButtonBuilder callbackData(String callbackData){  this.callback_data=callbackData;  this.url=null;  this.switch_inline_query=null;  return this;}  }
class C{  private static Edge createTree(Edge edges[],int low,int high){  if (low > high) {    return null;  }  int mid=(low + high) >>> 1;  Edge newNode=edges[mid];  newNode.left=createTree(edges,low,mid - 1);  newNode.right=createTree(edges,mid + 1,high);  if (newNode.left != null) {    newNode.max=Math.max(newNode.max,newNode.left.max);  }  if (newNode.right != null) {    newNode.max=Math.max(newNode.max,newNode.right.max);  }  return newNode;}  }
class C{  public void register(TrainSchedule schedule){  Integer oldSize=Integer.valueOf(_scheduleHashTable.size());  _scheduleHashTable.put(schedule.getId(),schedule);  int id=Integer.parseInt(schedule.getId());  if (id > _id) {    _id=id;  }  setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_scheduleHashTable.size()));}  }
class C{  public Topic(){  final Queue<T> q=new Queue<T>();  distributor.addQueue(q);}  }
class C{  public void testConsequentProxyConnection() throws Throwable {  setUpStoreProperties();  ServerSocket ss=new ServerSocket(0);  TestHostnameVerifier hnv=new TestHostnameVerifier();  HttpsURLConnection.setDefaultHostnameVerifier(hnv);  URL url=new URL("https://requested.host:55555/requested.data");  HttpsURLConnection connection=(HttpsURLConnection)url.openConnection(new Proxy(Proxy.Type.HTTP,new InetSocketAddress("localhost",ss.getLocalPort())));  connection.setSSLSocketFactory(getContext().getSocketFactory());  SSLSocket peerSocket=(SSLSocket)doInteraction(connection,ss);  checkConnectionStateParameters(connection,peerSocket);  ss=new ServerSocket(0);  connection=(HttpsURLConnection)url.openConnection(new Proxy(Proxy.Type.HTTP,new InetSocketAddress("localhost",ss.getLocalPort())));  connection.setSSLSocketFactory(getContext().getSocketFactory());  peerSocket=(SSLSocket)doInteraction(connection,ss);  checkConnectionStateParameters(connection,peerSocket);}  }
class C{  public static void disableBlending(){  glShadeModel(GL_FLAT);  glDisable(GL_LINE_SMOOTH);  glDisable(GL_POLYGON_SMOOTH);  glDisable(GL_BLEND);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Wizard.getInstance().searchByExactGenre(getString(stack));}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (newRecord) {    log.fine(toString());    getAD_Org_ID();    getC_SalesRegion_ID();    if (getM_Product_ID() == 0)     setM_Product_ID(m_acct.getM_Product_ID());    if (getC_LocFrom_ID() == 0)     setC_LocFrom_ID(m_acct.getC_LocFrom_ID());    if (getC_LocTo_ID() == 0)     setC_LocTo_ID(m_acct.getC_LocTo_ID());    if (getC_BPartner_ID() == 0)     setC_BPartner_ID(m_acct.getC_BPartner_ID());    if (getAD_OrgTrx_ID() == 0)     setAD_OrgTrx_ID(m_acct.getAD_OrgTrx_ID());    if (getC_Project_ID() == 0)     setC_Project_ID(m_acct.getC_Project_ID());    if (getC_Campaign_ID() == 0)     setC_Campaign_ID(m_acct.getC_Campaign_ID());    if (getC_Activity_ID() == 0)     setC_Activity_ID(m_acct.getC_Activity_ID());    if (getUser1_ID() == 0)     setUser1_ID(m_acct.getUser1_ID());    if (getUser2_ID() == 0)     setUser2_ID(m_acct.getUser2_ID());    if (m_doc.getDocumentType().equals(Doc.DOCTYPE_ARInvoice) && m_docLine != null && m_docLine.getC_RevenueRecognition_ID() != 0) {      int AD_User_ID=0;      setAccount_ID(createRevenueRecognition(m_docLine.getC_RevenueRecognition_ID(),m_docLine.get_ID(),getAD_Client_ID(),getAD_Org_ID(),AD_User_ID,getAccount_ID(),getC_SubAcct_ID(),getM_Product_ID(),getC_BPartner_ID(),getAD_OrgTrx_ID(),getC_LocFrom_ID(),getC_LocTo_ID(),getC_SalesRegion_ID(),getC_Project_ID(),getC_Campaign_ID(),getC_Activity_ID(),getUser1_ID(),getUser2_ID(),getUserElement1_ID(),getUserElement2_ID()));    }  }  return true;}  }
class C{  public String debugDump(int indent){  int save=indentation;  indentation=indent;  String retval=this.debugDump();  indentation=save;  return retval;}  }
class C{  public static FilterBuilder buildFilter(Criteria criteria){  if (criteria.getBusinessTransaction() != null && criteria.getBusinessTransaction().trim().isEmpty()) {    return FilterBuilders.missingFilter(BUSINESS_TRANSACTION_FIELD);  }  return null;}  }
class C{  public void recompose() throws TransformerException {  Vector recomposableElements=new Vector();  if (null == m_globalImportList) {    Vector importList=new Vector();    addImports(this,true,importList);    m_globalImportList=new StylesheetComposed[importList.size()];    for (int i=0, j=importList.size() - 1; i < importList.size(); i++) {      m_globalImportList[j]=(StylesheetComposed)importList.elementAt(i);      m_globalImportList[j].recomposeIncludes(m_globalImportList[j]);      m_globalImportList[j--].recomposeImports();    }  }  int n=getGlobalImportCount();  for (int i=0; i < n; i++) {    StylesheetComposed imported=getGlobalImport(i);    imported.recompose(recomposableElements);  }  QuickSort2(recomposableElements,0,recomposableElements.size() - 1);  m_outputProperties=new OutputProperties(org.apache.xml.serializer.Method.UNKNOWN);  m_attrSets=new HashMap();  m_decimalFormatSymbols=new Hashtable();  m_keyDecls=new Vector();  m_namespaceAliasComposed=new Hashtable();  m_templateList=new TemplateList();  m_variables=new Vector();  for (int i=recomposableElements.size() - 1; i >= 0; i--)   ((ElemTemplateElement)recomposableElements.elementAt(i)).recompose(this);  initComposeState();  m_templateList.compose(this);  m_outputProperties.compose(this);  m_outputProperties.endCompose(this);  n=getGlobalImportCount();  for (int i=0; i < n; i++) {    StylesheetComposed imported=this.getGlobalImport(i);    int includedCount=imported.getIncludeCountComposed();    for (int j=-1; j < includedCount; j++) {      Stylesheet included=imported.getIncludeComposed(j);      composeTemplates(included);    }  }  if (m_extNsMgr != null)   m_extNsMgr.registerUnregisteredNamespaces();  clearComposeState();}  }
class C{  @Override public DeserializationConfig with(DeserializationConfig.Feature... features){  int flags=_featureFlags;  for (  Feature f : features) {    flags|=f.getMask();  }  return new DeserializationConfig(this,flags);}  }
class C{  public boolean hasArgName(){  return argName != null && argName.length() > 0;}  }
class C{  public synchronized String toString(){  int max=size() - 1;  StringBuilder buf=new StringBuilder();  Iterator it=entrySet().iterator();  buf.append("{");  for (int i=0; i <= max; i++) {    Map.Entry e=(Map.Entry)(it.next());    Object key=e.getKey();    Object value=e.getValue();    buf.append((key == this ? "(this Map)" : key) + "=" + (value == this ? "(this Map)" : value));    if (i < max)     buf.append(", ");  }  buf.append("}");  return buf.toString();}  }
class C{  public void calculateDate(Record record,Date initTime,int subtract){  Date d=initTime;  long milliseconds=d.getTime();  if (subtract > 0) {    milliseconds-=subtract * MedtronicConstants.TIME_5_MIN_IN_MS;  }  long timeAdd=milliseconds;  Date display=new Date(timeAdd);  String displayTime=new SimpleDateFormat("MM/dd/yyy hh:mm:ss aa",Locale.getDefault()).format(display);  record.displayTime=displayTime;  if (record instanceof MedtronicSensorRecord) {    ((MedtronicSensorRecord)record).displayDateTime=display.getTime();  }}  }
class C{  public FilterEditorsComboBoxModel(){  super();  selection=FilterEditors.VALUES.get(0);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Bean public Controller controller(){  if (useQtInterface) {    return new ControllerQtImplementation();  } else {    return new ControllerJavaFXImplementation();  }}  }
class C{  public BlockingIOPbrpcClientSocketFactory(PbrpcClientConfiguration pbrpcClientConfiguration,String ip,int port,int connTimeout,int readTimeout,Codec codec,HeaderResolver headerResolver){  if (pbrpcClientConfiguration == null) {    this.pbrpcClientConfiguration=new PbrpcClientConfiguration();  }  this.ip=ip;  this.port=port;  this.connTimeout=connTimeout;  this.readTimeout=readTimeout;  this.codec=codec;  this.headerResolver=headerResolver;}  }
class C{  public QuadBuilder addVertex(double x,double y,double z){  return this.addVertex(new Vec3d(x,y,z));}  }
class C{  public static void failNotSame(String message,Object expected,Object actual){  fail(format(message,expected,actual,true));}  }
class C{  public static List<String> convertClassesToClassNames(final List<Class<?>> classes){  if (classes == null) {    return null;  }  List<String> classNames=new ArrayList<String>(classes.size());  for (Iterator<Class<?>> it=classes.iterator(); it.hasNext(); ) {    Class<?> cls=it.next();    if (cls == null) {      classNames.add(null);    } else {      classNames.add(cls.getName());    }  }  return classNames;}  }
class C{  public void checkAccess() throws SecurityException {  checkPermission();}  }
class C{  public static <T>Collection<T> collect(Object self,Collection<T> collector,Closure<? extends T> transform){  for (Iterator iter=InvokerHelper.asIterator(self); iter.hasNext(); ) {    collector.add(transform.call(iter.next()));  }  return collector;}  }
class C{  public static int extractLowUnsignedNibble(int value){  return value & 0x0F;}  }
class C{  @Override public synchronized void close() throws SailException {  if (!openConn) {    return;  }  super.close();  if (!clusterCacheBugFix) {    try {      txService.abort(tx);    } catch (    IOException ex) {      throw new SailException(ex);    }  }}  }
class C{  public String transform(List criterios){  StringBuffer xml=new StringBuffer("<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>");  xml.append("<Criterios_Busqueda version=\"01.00\">");  if (criterios != null && criterios.size() > 0) {    xml.append("<Condiciones_Fechas_Extremas>");    for (int i=0; i < criterios.size(); i++) {      CriterioFechaVO criterio=(CriterioFechaVO)criterios.get(i);      xml.append("<Condicion>");      if (criterio.getFechaInicial() != null) {        xml.append("<Fecha_Inicial>");        xml.append("<Operador>").append(Constants.addCData(criterio.getFechaInicial().getOperador())).append("</Operador>");        xml.append("<Valor>").append(criterio.getFechaInicial().getMes()).append("/").append(criterio.getFechaInicial().getDia()).append("/").append("</Valor>");        xml.append("</Fecha_Inicial>");      }      if (criterio.getFechaFinal() != null) {        xml.append("<Fecha_Final>");        xml.append("<Operador>").append(Constants.addCData(criterio.getFechaFinal().getOperador())).append("</Operador>");        xml.append("<Valor>").append(criterio.getFechaFinal().getMes()).append("/").append(criterio.getFechaFinal().getDia()).append("/").append("</Valor>");        xml.append("</Fecha_Final>");      }      xml.append("</Condicion>");    }    xml.append("</Condiciones_Fechas_Extremas>");  }  xml.append("</Criterios_Busqueda>");  return xml.toString();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public void updateTextLabel(){  if (!currentTextVisibility) {    return;  }  if ((!neuron.getLabel().equalsIgnoreCase("")) || (!neuron.getLabel().equalsIgnoreCase(SimbrainConstants.NULL_STRING))) {    labelText.setFont(NEURON_FONT);    labelText.setText("" + neuron.getLabel());    labelText.setOffset(mainShape.getX() - labelText.getWidth() / 2 + DIAMETER / 2,mainShape.getY() - DIAMETER / 2 - 1);    labelBackground.setBounds(labelText.getFullBounds());    PBounds bounds=mainShape.getBounds();    bounds.add(labelText.localToParent(labelText.getBounds()));    setBounds(bounds);  }}  }
class C{  public MqttStreams(Topology topology,String url,String clientId){  this.topology=topology;  MqttConfig config=new MqttConfig();  config.setServerURLs(new String[]{url});  config.setClientId(clientId);  connector=new MqttConnector(null);}  }
class C{  public void updatePresentationField(boolean isFromSuper,NodePresentation presentation,String presentableName,JavaResources resources){  if (isFromSuper) {    SpanElement highlightElement=Elements.createSpanElement(resources.css().disableTextColor());    highlightElement.setInnerText(presentableName);    presentation.setUserElement((Element)highlightElement);  } else {    presentation.setPresentableText(presentableName);  }}  }
class C{  @Override public InitStepInfo execute(String[] params){  try {    InitStepInfo initStepInfo=new InitStepInfo();    CommandLine commandLine=getCommandLine(params,PARAMS_STRUCTURE);    String subPid=commandLine.getOptionValue("sub-process-id");    LOGGER.debug("subPid is " + subPid);    initStepInfo.setSubProcessId(Integer.parseInt(subPid));    stepDAO.initStep(initStepInfo.getSubProcessId());    return initStepInfo;  } catch (  Exception e) {    LOGGER.error("Error occurred",e);    throw new MetadataException(e);  }}  }
class C{  public PutRepositoryRequestBuilder(ElasticsearchClient client,PutRepositoryAction action){  super(client,action,new PutRepositoryRequest());}  }
class C{  public void sendMessage(String address,ClientMessage message){  sendMessage(SimpleString.toSimpleString(address),message);}  }
class C{  @Beta public static <K,V>ImmutableListMultimap<K,V> copyOf(Iterable<? extends Entry<? extends K,? extends V>> entries){  return new Builder<K,V>().putAll(entries).build();}  }
class C{  public void readProcess(final Reader in) throws XMLException, IOException {  readProcess(in,null);}  }
class C{  public LocatorConnector(){}  }
class C{  @Override public SimpleMove performMove(){  SimplePose newPose;  Vector2D vector;  do {    newPose=map.randomPose();    vector=pose.getPosition().vec(newPose.getPosition());  } while (vector.length() > maxMoveDistance || vector.length() < minMoveDistance);  final double vectorAngle=vector.angleTo(Vector2D.X_VECTOR);  final double firstRotation=vectorAngle - pose.getHeading();  final double lastRotation=newPose.getHeading() - vectorAngle;  pose=newPose;  return new SimpleMove(firstRotation,vector.length(),lastRotation);}  }
class C{  protected DateAttribute(String name,int valueType){  super(name,valueType);  registerStatistics(new MinMaxStatistics());  registerStatistics(new UnknownStatistics());}  }
class C{  public static void closeQuietly(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    RuntimeException rethrown) {      throw rethrown;    }catch (    Exception ignored) {    }  }}  }
class C{  public static BitwiseOpExpression binaryXor(){  return new BitwiseOpExpression(BitWiseOpEnum.BXOR);}  }
class C{  public void printBlock(List<? extends JCTree> stats,JCTree container) throws IOException {  print("{");  println();  indent();  printStats(stats);  consumeComments(endPos(container));  undent();  align();  print("}");}  }
class C{  public Reminder(){  super(KEY);}  }
class C{  public CheckBoxPainter(Which state){  super();  this.ctx=new PaintContext(CacheMode.FIXED_SIZES);  type=getControlType(state);  focused=false;  selected=false;  if (state == Which.ICON_FOCUSED || state == Which.ICON_PRESSED_FOCUSED || state == Which.ICON_SELECTED_FOCUSED || state == Which.ICON_PRESSED_SELECTED_FOCUSED) {    focused=true;  }  if (state == Which.ICON_SELECTED || state == Which.ICON_PRESSED_SELECTED || state == Which.ICON_DISABLED_SELECTED || state == Which.ICON_SELECTED_FOCUSED || state == Which.ICON_PRESSED_SELECTED_FOCUSED) {    selected=true;  }}  }
class C{  public void markDirty(PlatformIdent platformIdent){  markDirty(platformIdent.getId());}  }
class C{  @SuppressWarnings("unchecked") public ArrayDeque(){  elements=(E[])new Object[16];}  }
class C{  @Override public void pause(boolean shouldBePaused){}  }
class C{  public void createPictScenario07() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-01 12:00:00"));  String supplierAdminId="Pict07Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict07SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  setCutOffDay(supplierAdmin.getKey(),15);  String customerAdminId="Pict07Customer";  VOOrganization customer=orgSetup.registerCustomer("Pict07CustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplierMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.createMarketingPermission(basicSetup.getSupplierAdminKey(),supplier.getOrganizationId(),technicalService);  orgSetup.saveAllVats(supplierAdmin.getKey(),VOVatRateFactory.newVOVatRate(new BigDecimal("10.00")),Arrays.asList(VOVatRateFactory.newVOCountryVatRate(new BigDecimal("20.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_UK),VOVatRateFactory.newVOCountryVatRate(new BigDecimal("30.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_DE)),Arrays.asList(VOVatRateFactory.newVOOrganizationVatRate(new BigDecimal("50.00"),customer)));  VOServiceDetails serviceUnitTempl=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT_TEST_07",TestService.EXAMPLE2,TestPriceModel.FREE,technicalService,supplierMarketplace);  VOServiceDetails serviceDetails=serviceSetup.savePriceModelForCustomer(serviceUnitTempl,TestPriceModel.EXAMPLE_PICT07_RATA_MONTH,customer);  serviceDetails=serviceSetup.activateMarketableService(serviceDetails);  VOServiceDetails serviceFreeTempl=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT_TEST_07_Upgrade",TestService.EXAMPLE2,TestPriceModel.EXAMPLE_PICT07_RATA_MONTH,technicalService,supplierMarketplace);  VOServiceDetails serviceFreeDetails=serviceSetup.savePriceModelForCustomer(serviceFreeTempl,TestPriceModel.FREE,customer);  serviceFreeDetails=serviceSetup.activateMarketableService(serviceFreeDetails);  serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),serviceUnitTempl,serviceFreeTempl);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_07",serviceDetails,customerAdmin,role);  container.login(basicSetup.getSupplierAdminKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  subscrSetup.recordEventForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-08-02 05:00:00"),"FILE_UPLOAD",10);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long roleChangeTime=DateTimeHandling.calculateMillis("2013-08-02 06:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(roleChangeTime);  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(0),VOServiceFactory.getRole(serviceDetails,"USER"),subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-02 12:00:00"));  subDetails=subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-03 12:00:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  paymentSetup.deleteCustomerPaymentTypes(customer);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-06 12:00:00"));  paymentSetup.reassignCustomerPaymentTypes(customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-08-08 12:00:00"),"LONG_NUMBER","500");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-15 00:00:00"));  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,serviceFreeDetails);  container.login(basicSetup.getSupplierAdminKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  subscrSetup.recordEventForSubscription(upgradedSubDetails,DateTimeHandling.calculateMillis("2013-08-15 12:10:00"),"FILE_UPLOAD",10);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-16 12:30:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long userterminateTime=DateTimeHandling.calculateMillis("2013-08-20 12:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userterminateTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_07",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_07",upgradedSubDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_07",customer);}  }
class C{  public boolean isEmpty(){  return mCapabilities.isEmpty();}  }
class C{  public static long hash64(final int[] data,int length,int seed){  final long m=0xc6a4a7935bd1e995L;  final int r=47;  long h=(seed & 0xffffffffl) ^ (length * 4 * m);  int length8=length / 2;  for (int i=0; i < length8; i++) {    long k=(((long)(data[i * 2]) & 0xffffffffl)) | (((long)(data[i * 2 + 1]) & 0xffffffffl) << 32);    k*=m;    k^=k >>> r;    k*=m;    h^=k;    h*=m;  }  if (length % 2 == 1) {    h^=(long)(data[length & ~1]) & 0xffffffffl;    h*=m;  }  h^=h >>> r;  h*=m;  h^=h >>> r;  return h;}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public boolean isEmpty(){  return ObjectUtils.isEmpty(this.requestConditions);}  }
class C{  public boolean isCustomer(){  Object oo=get_Value(COLUMNNAME_IsCustomer);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static Vector3 addVectors(Vector3 first,Vector3 second){  return new Vector3(first.x + second.x,first.y + second.y,first.z + second.z);}  }
class C{  public void mergeWith(ReturnPathType fact){  if (fact.isTop()) {    return;  } else   if (this.isTop()) {    this.copyFrom(fact);  } else {    if (fact.type == CAN_RETURN_NORMALLY) {      this.type=CAN_RETURN_NORMALLY;    }  }}  }
class C{  public AutoImportQuickFix(PsiElement node,PsiReference reference,String name,boolean qualify){  super(node);  myReference=reference;  myImports=new ArrayList<ImportCandidateHolder>();  myInitialName=name;  myUseQualifiedImport=qualify;  myExpended=false;}  }
class C{  public Period(long duration,PeriodType type){  super(duration,type,null);}  }
class C{  public void addUser(WebUser user){  users.add(user);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void prepare(){}  }
class C{  public static void checkIfPowerOf2(int v,String argName){  if ((v > 0) && ((v & (v - 1)) == 0)) {    return;  }  throw new SketchesArgumentException("The value of the parameter \"" + argName + "\" must be a positive integer-power of 2"+ " and greater than 0: "+ v);}  }
class C{  public void testFiveNodeExpireEvent() throws Throwable {  testSessionExpire(5);}  }
class C{  @Override public void show(){}  }
class C{  public static void markup(Element e,String text,String linkCssClass){  e.setInnerHTML("");  List<String> paragraphs=StringUtils.split(text,"\n\n");  for (  String paragraph : paragraphs) {    markupParagraph(e,paragraph,linkCssClass);  }}  }
class C{  public void readFrom(ChannelBuffer data,int length){  super.readFrom(data,length);  role=data.readInt();}  }
class C{  public NumberTextField(String label,double initialValue,double multiply,double add){  setValues(label,initialValue,multiply,add);}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public boolean changeExecutionFailed(){  return fChangeExecutionFailed;}  }
class C{  public void updateBinaryStream(String columnName,java.io.InputStream x,int length) throws SQLException {  updateBinaryStream(findColumn(columnName),x,length);}  }
class C{  @Override public Object invoke(final Object proxy,final Method method,final Object[] parameters) throws Throwable {  if (eventTypes.isEmpty() || eventTypes.contains(method.getName())) {    if (hasMatchingParametersMethod(method)) {      return MethodUtils.invokeMethod(target,methodName,parameters);    }    return MethodUtils.invokeMethod(target,methodName);  }  return null;}  }
class C{  private Integer calculateTotalTradestrategiesToProcess(long startTime){  Integer total=new Integer(0);  ConcurrentHashMap<String,Contract> contracts=new ConcurrentHashMap<String,Contract>();  for (  Tradingday tradingday : this.tradingdays.getTradingdays()) {    total=total + tradingday.getTradestrategies().size();    if (this.brokerModel.isBrokerDataOnly() || this.brokerModel.isConnected()) {      for (      Tradestrategy tradestrategy : tradingday.getTradestrategies()) {        tradestrategy.setStrategyData(StrategyData.create(tradestrategy));        CandleDataset candleDataset=(CandleDataset)tradestrategy.getStrategyData().getIndicatorByType(IndicatorSeries.CandleSeries);        if (null != candleDataset) {          for (int seriesIndex=0; seriesIndex < candleDataset.getSeriesCount(); seriesIndex++) {            CandleSeries series=candleDataset.getSeries(seriesIndex);            Contract contract=series.getContract();            if (!contractRequests.containsKey(contract.getSymbol()))             contractRequests.put(contract.getSymbol(),contract);            if (!contracts.containsKey(contract.getSymbol()))             contracts.put(contract.getSymbol(),contract);          }        }        if (!contractRequests.containsKey(tradestrategy.getContract().getSymbol()))         contractRequests.put(tradestrategy.getContract().getSymbol(),tradestrategy.getContract());      }      total=total + contracts.size();      contracts.clear();      if (backTestBarSize > 0) {        if (TradingCalendar.isTradingDay(tradingday.getOpen()) && TradingCalendar.sameDay(tradingday.getOpen(),TradingCalendar.getZonedDateTimeFromMilli(startTime)) && !TradingCalendar.isAfterHours(TradingCalendar.getZonedDateTimeFromMilli(startTime)))         continue;        for (        Tradestrategy tradestrategy : tradingday.getTradestrategies()) {          if (backTestBarSize < tradestrategy.getBarSize())           total++;          if (null == tradestrategy.getStrategyData()) {            tradestrategy.setStrategyData(StrategyData.create(tradestrategy));          }          CandleDataset candleDataset=(CandleDataset)tradestrategy.getStrategyData().getIndicatorByType(IndicatorSeries.CandleSeries);          if (null != candleDataset) {            for (int seriesIndex=0; seriesIndex < candleDataset.getSeriesCount(); seriesIndex++) {              CandleSeries series=candleDataset.getSeries(seriesIndex);              Contract contract=series.getContract();              if (!contracts.containsKey(contract.getSymbol()))               contracts.put(contract.getSymbol(),contract);            }          }        }        total=total + contracts.size();        contracts.clear();      }    }  }  return total;}  }
class C{  @Override public void onMouseReleased(final MapMouseEvent ev){  if (panning) {    panning=false;    getMapPane().redraw();  }}  }
class C{  public void putData(DataContextKey key,Object o){  this.map.put(key.getName(),o);}  }
class C{  public void addLine(MPaySelectionLine line){  if (getC_BPartner_ID() != line.getInvoice().getC_BPartner_ID())   throw new IllegalArgumentException("Line for fifferent BPartner");  if (isReceipt() == line.isSOTrx()) {    setPayAmt(getPayAmt().add(line.getPayAmt()));    setDiscountAmt(getDiscountAmt().add(line.getDiscountAmt()));  } else {    setPayAmt(getPayAmt().subtract(line.getPayAmt()));    setDiscountAmt(getDiscountAmt().subtract(line.getDiscountAmt()));  }  setQty(getQty() + 1);}  }
class C{  @Override void basicInvalidate(EntryEventImpl event) throws EntryNotFoundException {  boolean hasSeen=false;  if (hasSeenEvent(event)) {    hasSeen=true;  }  try {    if (event.isLocalInvalid() && !event.getOperation().isLocal() && getScope().isDistributed()&& getDataPolicy().withReplication()) {      throw new IllegalStateException(LocalizedStrings.DistributedRegion_NOT_ALLOWED_TO_DO_A_LOCAL_INVALIDATION_ON_A_REPLICATED_REGION.toLocalizedString());    }    if (this.requiresOneHopForMissingEntry(event)) {      RegionEntry re=getRegionEntry(event.getKey());      if (re == null || !this.generateVersionTag) {        if (this.srp == null) {          Assert.assertTrue(!this.dataPolicy.withReplication() || !this.generateVersionTag);        }        boolean didDistribute=RemoteInvalidateMessage.distribute(event,!this.generateVersionTag);        if (!this.generateVersionTag && !didDistribute) {          throw new PersistentReplicatesOfflineException();        }        if (didDistribute) {          if (logger.isDebugEnabled()) {            logger.debug("Event after remoteInvalidate operation: {}",event);          }          if (event.getVersionTag() == null) {            return;          }        }      }    }    super.basicInvalidate(event);    return;  }  finally {    if (hasSeen) {      if (!getConcurrencyChecksEnabled() || event.hasValidVersionTag()) {        distributeInvalidate(event);        event.invokeCallbacks(this,true,false);      }    }  }}  }
class C{  public long timeSinceStart(){  long currentTime=System.currentTimeMillis();  return currentTime - startTime;}  }
class C{  private boolean validateFile(Path file){  List<String> ignoredExtensions=ImmutableList.of(".gz",".bz2",".zip");  for (  String extension : ignoredExtensions) {    if (file.toString().toLowerCase().endsWith(extension))     return false;  }  return true;}  }
class C{  public int compareTo(ReadableInstant other){  if (this == other) {    return 0;  }  long otherMillis=other.getMillis();  long thisMillis=getMillis();  if (thisMillis == otherMillis) {    return 0;  }  if (thisMillis < otherMillis) {    return -1;  } else {    return 1;  }}  }
class C{  public boolean isPrimaryGroup(){  return primaryGroup;}  }
class C{  public void testExecuteUpdate_String() throws SQLException {  String[] queries1={"update zoo set name='Masha', family='cat' where id=2;","drop table if exists hutch","create table hutch (id integer not null, animal_id integer, address char(20), primary key (id));","insert into hutch (id, animal_id, address) values (1, 2, 'Birds-house, 1');","insert into hutch (id, animal_id, address) values (2, 1, 'Horse-house, 5');","create view address as select address from hutch where animal_id=2;","drop view address;","drop table hutch;"};  String queries2="select * from zoo;";  Statement st=null;  try {    st=conn.createStatement();    for (int i=0; i < queries1.length; i++) {      int count=st.executeUpdate(queries1[i]);      assertTrue(count > 0);    }    assertEquals(0,st.executeUpdate(queries2));  }  finally {    try {      st.close();    } catch (    Exception ee) {    }  }  Statement stat=conn.createStatement();  assertEquals(0,stat.executeUpdate("create table s1 (c1);"));  assertEquals(1,stat.executeUpdate("insert into s1 values (0);"));  assertEquals(1,stat.executeUpdate("insert into s1 values (1);"));  assertEquals(1,stat.executeUpdate("insert into s1 values (2);"));  assertEquals(1,stat.executeUpdate("delete from s1 where c1 = 1;"));  assertEquals(2,stat.executeUpdate("update s1 set c1 = 5;"));  assertEquals(2,stat.executeUpdate("delete from s1;"));  assertEquals(0,stat.executeUpdate("drop table s1;"));  stat.executeUpdate("create table s1 (c1);");  stat.executeUpdate("insert into s1 values (0);");  stat.executeUpdate("insert into s1 values (1);");  stat.executeUpdate("insert into s1 values (2);");  assertEquals(3,stat.executeUpdate("drop table s1;"));  stat.close();}  }
class C{  public static DomainResource persistDomainAsDeleted(DomainResource domain,DateTime deletionTime){  return persistResource(domain.asBuilder().setDeletionTime(deletionTime).build());}  }
class C{  public static void ValidateSessionExpiry(DateTime sessionNotOnOrAfter,int clockTolerance) throws ValidationException {  try {    log.info("Validate sessionNotOnOrAfter with clock tolerance = " + clockTolerance);    Validate.isTrue(clockTolerance >= 0,"Negative clock tolerance setting");    Calendar currentDate=Calendar.getInstance();    TimeZone gmtTimeZone=TimeZone.getTimeZone("GMT");    currentDate.setTimeZone(gmtTimeZone);    if (sessionNotOnOrAfter != null) {      DateTime notOnOrAfter=sessionNotOnOrAfter.plusSeconds(clockTolerance);      Validate.isTrue(currentDate.getTime().before(notOnOrAfter.toDate()),"Validating notAfter fails! Tolerance-adjusted notAfter date is:" + notOnOrAfter.toString());    }  } catch (  IllegalArgumentException e) {    log.error(Error.IDP_SESSION_EXPIRED,e);    throw new ValidationException(e);  }}  }
class C{  public PassiveNPC(){  baseSpeed=0.2;  createPath();  put("title_type","npc");  setName("PassiveNPC");  put("unnamed","");  put("no_hpbar","");  setSize(1,1);  updateModifiedAttributes();}  }
class C{  public static void checkSignature(DataInput dataInput) throws IOException {  if (dataInput.readInt() != SIGNATURE1 || dataInput.readInt() != SIGNATURE2) {    throw new IllegalStateException("Signature bytes do not match");  }}  }
class C{  public int lastIndexOfAny(CharSet charSet,int start,int length){  for (int i=start + length; --i >= start; ) {    if (charSet.contains(charAt(i)))     return i;  }  return -1;}  }
class C{  public final void writeLEFloat(float f) throws IOException {  this.writeLEInt(Float.floatToIntBits(f));}  }
class C{  public void testSpanOrVersusTerm() throws Exception {  Term t1=randomTerm();  SpanQuery term=spanQuery(new SpanTermQuery(t1));  assertSameSet(spanQuery(new SpanOrQuery(term)),term);}  }
class C{  public void testMapContainsKey(){  Object[] keys=getSampleKeys();  resetEmpty();  for (int i=0; i < keys.length; i++) {    assertTrue("Map must not contain key when map is empty",!map.containsKey(keys[i]));  }  verify();  resetFull();  for (int i=0; i < keys.length; i++) {    assertTrue("Map must contain key for a mapping in the map. " + "Missing: " + keys[i],map.containsKey(keys[i]));  }  verify();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public GridBoundedConcurrentOrderedMap(int max,SortedMap<K,V> map){  super(map);  A.ensure(max > 0,"max > 0");  this.max=max;}  }
class C{  public void use(T aData){  currentData=aData;  childModel.use(aData);}  }
class C{  public static TempPath createFile() throws IOException {  return wrap(Files.createTempFile(PREFIX,SUFFIX));}  }
class C{  public static boolean isEmailValid(String email){  if (email == null || email.length() == 0)   return false;  try {    InternetAddress ia=new InternetAddress(email,true);    if (ia != null)     return true;  } catch (  AddressException ex) {    log.warning(email + " - " + ex.getLocalizedMessage());  }  return false;}  }
class C{  private long tryDecReaderOverflow(long s){  if ((s & ABITS) == RFULL) {    if (U.compareAndSwapLong(this,STATE,s,s | RBITS)) {      int r;      long next;      if ((r=readerOverflow) > 0) {        readerOverflow=r - 1;        next=s;      } else       next=s - RUNIT;      U.putLongVolatile(this,STATE,next);      return next;    }  } else   if ((nextSecondarySeed() & OVERFLOW_YIELD_RATE) == 0)   Thread.yield();  return 0L;}  }
class C{  public void readAndParse(Projection proj,OMGridGenerator generator) throws IOException {  readAndParse(proj,generator,null);}  }
class C{  @SuppressWarnings("rawtypes") private void modifyListReplica(StorageSystem storage,List<URI> replicaList,List<? extends BlockObject> replicas,int operation,int copyState) throws Exception {  callEMCRefreshIfRequired(_dbClient,_helper,storage,replicaList);  List<CIMObjectPath> syncPaths=new ArrayList<CIMObjectPath>();  for (  BlockObject replica : replicas) {    BlockObject source=_helper.getSource(replica);    CIMObjectPath syncObject=_cimPath.getStorageSynchronized(storage,source,storage,replica);    if (_helper.checkExists(storage,syncObject,false,false) == null) {      _log.error("Storage synchronized instance is not available for replica {}",replica.getLabel());      throw DeviceControllerException.exceptions.synchronizationInstanceNull(replica.getLabel());    }    syncPaths.add(syncObject);  }  CIMArgument[] inArgs=_helper.getModifyListReplicaInputArguments(syncPaths.toArray(new CIMObjectPath[]{}),operation,copyState);  _helper.callModifyListReplica(storage,inArgs);}  }
class C{  protected boolean lessThan(Object arg0,Object arg1){  CrawlDatum candidate=(CrawlDatum)arg0;  CrawlDatum least=(CrawlDatum)arg1;  return candidate.getScore() > least.getScore();}  }
class C{  protected Vector2D[] createTriangleVertices(float triangleSize){  Vector2D[] p=new Vector2D[3];  double f;  f=2.0 * Math.PI / 3.0;  p[0]=new Vector2D(triangleSize * Math.sin(f),triangleSize * Math.cos(f));  f=4.0 * Math.PI / 3.0;  p[1]=new Vector2D(triangleSize * Math.sin(f),triangleSize * Math.cos(f));  f=6.0 * Math.PI / 3.0;  p[2]=new Vector2D(triangleSize * Math.sin(f),triangleSize * Math.cos(f));  return p;}  }
class C{  public static boolean isMetroPointVolume(DbClient dbClient,Volume volume){  if (volume != null) {    VirtualPool vpool=dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());    if (vpool != null && VirtualPool.vPoolSpecifiesMetroPoint(vpool)) {      _log.info(String.format("Volume's vpool [%s](%s) specifies Metropoint",vpool.getLabel(),vpool.getId()));      return true;    }  }  return false;}  }
class C{  void createJar(File jarFile,String[] classPath,File... files) throws IOException {  logger.info("Creating " + jarFile);  JarOutputStream jos=new JarOutputStream(new FileOutputStream(jarFile));  for (  File f : files) {    String name=f.getPath();    if (classPath != null) {      String[] names=new String[classPath.length];      for (int i=0; i < classPath.length; i++) {        String path=new File(classPath[i]).getCanonicalPath();        if (name.startsWith(path)) {          names[i]=name.substring(path.length() + 1);        }      }      for (int i=0; i < names.length; i++) {        if (names[i] != null && names[i].length() < name.length()) {          name=names[i];        }      }    }    ZipEntry e=new ZipEntry(name.replace(File.separatorChar,'/'));    e.setTime(f.lastModified());    jos.putNextEntry(e);    FileInputStream fis=new FileInputStream(f);    byte[] buffer=new byte[1024];    int length;    while ((length=fis.read(buffer)) != -1) {      jos.write(buffer,0,length);    }    fis.close();    jos.closeEntry();  }  jos.close();}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public T usemap(String value){  return attr("usemap",value);}  }
class C{  private void updateCoordinatorWithLicenseFeatures(License license,boolean checkClusterUpgradable) throws CoordinatorClientException {  LicenseInfoListExt licenseList=null;  List<LicenseInfoExt> licenseInfoList=new ArrayList<LicenseInfoExt>();  for (  LicenseFeature licenseFeature : license.getLicenseFeatures()) {    LicenseType licenseType;    if (licenseFeature.getModelId().startsWith(LicenseConstants.VIPR_CONTROLLER)) {      licenseType=LicenseType.CONTROLLER;    } else {      throw APIException.internalServerErrors.licenseInfoNotFoundForType("invalid license model id" + licenseFeature.getModelId());    }    LicenseInfoExt licenseInfo=new LicenseInfoExt();    licenseInfo.setLicenseType(licenseType);    licenseInfo.setExpirationDate(licenseFeature.getDateExpires());    licenseInfo.setStorageCapacity(licenseFeature.getStorageCapacity());    licenseInfo.setProductId(licenseFeature.getProductId());    licenseInfo.setModelId(licenseFeature.getModelId());    licenseInfo.setIssuedDate(licenseFeature.getDateIssued());    licenseInfo.setLicenseTypeIndicator(licenseFeature.getLicenseIdIndicator());    licenseInfo.setVersion(licenseFeature.getVersion());    licenseInfo.setNotice(licenseFeature.getNotice());    if (licenseFeature.isTrialLicense()) {      licenseInfo.setTrialLicense(true);    }    licenseInfoList.add(licenseInfo);  }  if (!licenseInfoList.isEmpty()) {    licenseList=new LicenseInfoListExt(licenseInfoList);    _coordinator.setTargetInfo(licenseList,checkClusterUpgradable);  }}  }
class C{  public ViewRootPhaseListenerITCase(String name){  super(name);}  }
class C{  public String toString(){  try {    Iterator<String> keys=keys();    StringBuffer sb=new StringBuffer("{");    while (keys.hasNext()) {      if (sb.length() > 1) {        sb.append(',');      }      Object o=keys.next();      sb.append(quote(o.toString()));      sb.append(':');      sb.append(valueToString(this.myHashMap.get(o)));    }    sb.append('}');    return sb.toString();  } catch (  Exception e) {    return null;  }}  }
class C{  public void displayTheHelp(){  if (theHB != null) {    theHB.setFont(GlobalValues.guifont);    theHB.setDisplayed(true);  }}  }
class C{  public static void copy(File source,File destination) throws IOException {  Validate.notNull(source,"source is null");  Validate.notNull(destination,"destination is null");  if (source.equals(destination)) {    return;  }  InputStream input=null;  OutputStream output=null;  try {    input=new FileInputStream(source);    try {      output=new FileOutputStream(destination);      copy(input,output);    }  finally {      if (output != null) {        output.close();      }    }  }  finally {    if (input != null) {      input.close();    }  }}  }
class C{  protected KeyListener createKeyListener(){  return getHandler();}  }
class C{  private boolean isRegularSoftwareFile(String name){  return !FilenameUtils.getExtension(name).isEmpty() || new File(name).exists();}  }
class C{  private static void assertFilesExist(final List<File> expectedFiles){  final List<File> missingFiles=new ArrayList<File>();  for (  final File file : expectedFiles) {    if (file == null) {      throw new RuntimeException("Null passed to assertFilesExist");    }    if (!file.exists()) {      missingFiles.add(file);    }  }  if (!missingFiles.isEmpty()) {    List<String> missingAbsoluteFilenames=new ArrayList<String>(missingFiles.size());    for (    File missingFile : missingFiles) {      missingAbsoluteFilenames.add(missingFile.getAbsolutePath());    }    throw new RuntimeException("The following files could not be located: " + PluginUtil.join(", ",missingAbsoluteFilenames));  }}  }
class C{  public static ClassAnnotation fromClassDescriptor(ClassDescriptor classDescriptor){  return new ClassAnnotation(classDescriptor.toDottedClassName());}  }
class C{  public synchronized void disableAttribute(String name){  enabledAttributes.removeElement(name);}  }
class C{  @Override public int add(PlaylistItem o){  return addSorted(o);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.MULTIPLICATIVE_EXPRESSION__LHS:    return basicSetLhs(null,msgs);case N4JSPackage.MULTIPLICATIVE_EXPRESSION__RHS:  return basicSetRhs(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @SuppressWarnings("rawtypes") public Iterator<T> inorder(){  if (root == null) {    return empty();  }  return new ValueExtractor<T>(new InorderTraversal(root));}  }
class C{  public static Element addElement(String name,String text,Node parentElement){  Element ret=addElement(name,parentElement);  ret.setTextContent(text);  return ret;}  }
class C{  private void processStartedState(final State currentState){  sendRequest(HostUtils.getCloudStoreHelper(this).createGet(currentState.hostServiceLink).setCompletion(null));}  }
class C{  public void shuffleFromTo(int from,int to){  if (size == 0) {    return;  }  checkRangeFromTo(from,to,size);  cern.jet.random.Uniform gen=new cern.jet.random.Uniform(new cern.jet.random.engine.DRand(new java.util.Date()));  double tmpElement;  double[] theElements=elements;  int random;  for (int i=from; i < to; i++) {    random=gen.nextIntFromTo(i,to);    tmpElement=theElements[random];    theElements[random]=theElements[i];    theElements[i]=tmpElement;  }}  }
class C{  public static void testValidity(Object o) throws JSONException {  if (o != null) {    if (o instanceof Double) {      if (((Double)o).isInfinite() || ((Double)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    } else     if (o instanceof Float) {      if (((Float)o).isInfinite() || ((Float)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    }  }}  }
class C{  public CharSeq forEachByte(BiConsumer<Byte,Integer> action){  Objects.requireNonNull(action);  eachByte().forEach(action);  return this;}  }
class C{  public X400Address(byte[] value){  nameValue=value;}  }
class C{  public boolean contains(final URI param){  return params.containsKey(param);}  }
class C{  @Override public QualifiedNameResolver withPlainDirectories(){  myCheckForPackage=false;  return this;}  }
class C{  static void initAccessibilityConfigGroupParameters(MatsimConfigType matsim4urbansimConfigPart1,Config config){  AccessibilityConfigGroup acm=ConfigUtils.addOrGetModule(config,AccessibilityConfigGroup.GROUP_NAME,AccessibilityConfigGroup.class);  acm.setCellSizeCellBasedAccessibility(matsim4urbansimConfigPart1.getCellSize().intValue());  if (matsim4urbansimConfigPart1.isAccessibilityComputationAreaFromShapeFile()) {    acm.setAreaOfAccessibilityComputation(AccessibilityConfigGroup.AreaOfAccesssibilityComputation.fromShapeFile.toString());    if (matsim4urbansimConfigPart1.getStudyAreaBoundaryShapeFile() != null && (new File(matsim4urbansimConfigPart1.getStudyAreaBoundaryShapeFile().getInputFile())).exists())     acm.setShapeFileCellBasedAccessibility(matsim4urbansimConfigPart1.getStudyAreaBoundaryShapeFile().getInputFile()); else     throw new RuntimeException("Study area boundary shape file not found! Given shape file location:" + matsim4urbansimConfigPart1.getStudyAreaBoundaryShapeFile());  }  if (matsim4urbansimConfigPart1.isAccessibilityComputationAreaFromBoundingBox()) {    acm.setAreaOfAccessibilityComputation(AccessibilityConfigGroup.AreaOfAccesssibilityComputation.fromBoundingBox.toString());    acm.setBoundingBoxBottom(matsim4urbansimConfigPart1.getBoundingBoxBottom());    acm.setBoundingBoxTop(matsim4urbansimConfigPart1.getBoundingBoxTop());    acm.setBoundingBoxLeft(matsim4urbansimConfigPart1.getBoundingBoxLeft());    acm.setBoundingBoxRight(matsim4urbansimConfigPart1.getBoundingBoxRight());  }  if (matsim4urbansimConfigPart1.isAccessibilityComputationAreaFromNetwork()) {    acm.setAreaOfAccessibilityComputation(AccessibilityConfigGroup.AreaOfAccesssibilityComputation.fromNetwork.toString());  }}  }
class C{  public void printValidThroughPaths(){  log.info("Through paths in this block");  log.info("Current Block, From Block, To Block");  for (int i=0; i < throughPaths.size(); i++) {    String activeStr="";    if (throughPaths.get(i).isPathActive()) {      activeStr=", *";    }    log.info("From " + this.getDisplayName() + ", "+ (throughPaths.get(i).getSourceBlock()).getDisplayName()+ ", "+ (throughPaths.get(i).getDestinationBlock()).getDisplayName()+ activeStr);  }}  }
class C{  public static <T1,T2,T3,T4,T5>Flux<Tuple5<T1,T2,T3,T4,T5>> zip(Publisher<? extends T1> source1,Publisher<? extends T2> source2,Publisher<? extends T3> source3,Publisher<? extends T4> source4,Publisher<? extends T5> source5){  return zip(Tuples.fn5(),source1,source2,source3,source4,source5);}  }
class C{  public static List<VOReport> toVOReportList(List<Report> reports,String reportUrlTemplate,LocalizerFacade facade){  List<VOReport> rtv=new ArrayList<VOReport>();  for (Iterator<Report> iterator=reports.iterator(); iterator.hasNext(); ) {    Report report=iterator.next();    rtv.add(toVOReport(report,reportUrlTemplate,facade));  }  return rtv;}  }
class C{  boolean isNormal(){  if (intLen + offset > value.length)   return false;  if (intLen == 0)   return true;  return (value[offset] != 0);}  }
class C{  private final StyledString appendParameterSignature(StyledString buffer,char[][] parameterTypes,char[][] parameterNames){  if (parameterTypes != null) {    for (int i=0; i < parameterTypes.length; i++) {      if (i > 0) {        buffer.append(',');        buffer.append(' ');      }      buffer.append(parameterTypes[i]);      if (parameterNames != null && parameterNames[i] != null) {        buffer.append(' ');        buffer.append(parameterNames[i]);      }    }  }  return buffer;}  }
class C{  boolean isConnected(){  return !(channel instanceof SocketChannel) || ((SocketChannel)channel).isConnected();}  }
class C{  public boolean rerun_jb(){  return soot.PhaseOptions.getBoolean(options,"rerun-jb");}  }
class C{  @Override public boolean start(){  if (!_lifecycle.toActive()) {    return false;  }  return true;}  }
class C{  public TextDialog(final ArrayList<TextNode> selectedTextNodes){  selectionList=selectedTextNodes;  init();  fillFieldValues();}  }
class C{  private void pop(final int elements){  if (outputStackTop >= elements) {    outputStackTop-=elements;  } else {    owner.inputStackTop-=elements - outputStackTop;    outputStackTop=0;  }}  }
class C{  public RSAPublicKeyImpl(byte[] encoded) throws InvalidKeyException {  decode(encoded);  RSAKeyFactory.checkRSAProviderKeyLengths(n.bitLength(),e);}  }
class C{  public String outputPerClassInfoRetrievalStatsTipText(){  return "Output per-class info retrieval stats. If set to true, predictions get " + "stored so that stats such as AUC can be computed. Note: this consumes some memory.";}  }
class C{  Item newConstItem(final Object cst){  if (cst instanceof Integer) {    int val=((Integer)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Byte) {    int val=((Byte)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Character) {    int val=((Character)cst).charValue();    return newInteger(val);  } else   if (cst instanceof Short) {    int val=((Short)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Boolean) {    int val=((Boolean)cst).booleanValue() ? 1 : 0;    return newInteger(val);  } else   if (cst instanceof Float) {    float val=((Float)cst).floatValue();    return newFloat(val);  } else   if (cst instanceof Long) {    long val=((Long)cst).longValue();    return newLong(val);  } else   if (cst instanceof Double) {    double val=((Double)cst).doubleValue();    return newDouble(val);  } else   if (cst instanceof String) {    return newString((String)cst);  } else   if (cst instanceof Type) {    Type t=(Type)cst;    int s=t.getSort();    if (s == Type.OBJECT) {      return newClassItem(t.getInternalName());    } else     if (s == Type.METHOD) {      return newMethodTypeItem(t.getDescriptor());    } else {      return newClassItem(t.getDescriptor());    }  } else   if (cst instanceof Handle) {    Handle h=(Handle)cst;    return newHandleItem(h.tag,h.owner,h.name,h.desc);  } else {    throw new IllegalArgumentException("value " + cst);  }}  }
class C{  public ReplyProcessor21(DM dm,InternalDistributedMember member){  this(dm,Collections.singleton(member));}  }
class C{  public void loadModel(Class<? extends BaseModel> modelClazz,InputStream model) throws BaleenException {  if (this.model != null) {    return;  }  try {    this.model=modelClazz.getDeclaredConstructor(InputStream.class).newInstance(model);  } catch (  Exception e) {    throw new BaleenException("Unable to construct model",e);  }}  }
class C{  protected void addDefaultModules(Collection<Class<? extends IFloodlightModule>> userModules){  Collection<Class<? extends IFloodlightModule>> defaultModules=new ArrayList<Class<? extends IFloodlightModule>>(DEFAULT_MODULE_LIST.size());  defaultModules.addAll(DEFAULT_MODULE_LIST);  Iterator<Class<? extends IFloodlightModule>> modIter=userModules.iterator();  while (modIter.hasNext()) {    Class<? extends IFloodlightModule> userMod=modIter.next();    Iterator<Class<? extends IFloodlightModule>> dmIter=defaultModules.iterator();    while (dmIter.hasNext()) {      Class<? extends IFloodlightModule> dmMod=dmIter.next();      Collection<Class<? extends IFloodlightService>> userModServs;      Collection<Class<? extends IFloodlightService>> dmModServs;      try {        dmModServs=dmMod.newInstance().getModuleServices();        userModServs=userMod.newInstance().getModuleServices();      } catch (      InstantiationException e) {        log.error(e.getMessage());        break;      }catch (      IllegalAccessException e) {        log.error(e.getMessage());        break;      }      if (dmModServs == null || userModServs == null)       continue;      boolean shouldBreak=false;      Iterator<Class<? extends IFloodlightService>> userModServsIter=userModServs.iterator();      while (userModServsIter.hasNext()) {        Class<? extends IFloodlightService> userModServIntf=userModServsIter.next();        Iterator<Class<? extends IFloodlightService>> dmModsServsIter=dmModServs.iterator();        while (dmModsServsIter.hasNext()) {          Class<? extends IFloodlightService> dmModServIntf=dmModsServsIter.next();          if (dmModServIntf.getCanonicalName().equals(userModServIntf.getCanonicalName())) {            logger.debug("Removing default module {} because it was " + "overriden by an explicitly specified module",dmModServIntf.getCanonicalName());            dmIter.remove();            shouldBreak=true;            break;          }        }        if (shouldBreak)         break;      }      if (shouldBreak)       break;    }  }  userModules.addAll(defaultModules);  log.debug("Using module set " + userModules.toString());}  }
class C{  @Override public void execute(MetricTimeSeries timeSeries,FunctionValueMap functionValueMap){  timeSeries.sort();  LinearRegression linearRegression=new LinearRegression(timeSeries.getTimestamps(),timeSeries.getValues());  double slope=linearRegression.slope();  functionValueMap.add(this,slope > 0,null);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (comparison_operator_1: ");  result.append(comparison_operator_1);  result.append(", RHS_1: ");  result.append(rhS_1);  result.append(')');  return result.toString();}  }
class C{  @Override public void disconnectionNotification(String eventName,Object source){  m_listenees.remove(source);}  }
class C{  public BasicSessionCache(int capacity){  if (capacity < 0) {    String message=Logging.getMessage("generic.ArgumentOutOfRange","capacity < 0");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.entries=new BoundedHashMap<Object,Object>(capacity);}  }
class C{  public static GeneHistory serializableInstance(){  return new GeneHistory(BasalInitializer.serializableInstance(),BooleanGlassFunction.serializableInstance());}  }
class C{  public int findStartIndex(String blockName){  String line;  int startIndex=-1;  StringBuffer buf=new StringBuffer();  String key=null;  buf.append('<').append(blockName).append('>');  key=buf.toString();  buf=null;  for (int lineNum=0; lineNum < rawData.size(); lineNum++) {    line=rawData.get(lineNum).toString();    try {      if ((line.length() >= 3) && line.equalsIgnoreCase(key)) {        startIndex=++lineNum;        break;      }    } catch (    StringIndexOutOfBoundsException e) {      System.err.print("Was looking for ");      System.err.print(key);      System.err.println(" and caught a");      System.err.print("string index out of bounds exception on line: \"");      System.err.print(line);      System.err.println("\"");      System.err.print("rawData index number: ");      System.err.println(lineNum);    }  }  return startIndex;}  }
class C{  private void abuseWeakness(boolean before,int elementIndex,int declarationPosition,Element signedElement,Element payloadElement) throws InvalidWeaknessException {  List<Element> matches=XPathWeaknessTools.getSignedPostPart(step,signedElement);  Element signedPostPart=matches.get(elementIndex);  Element payloadPostPart=XPathWeaknessTools.createPayloadPostPart(signedPostPart,signedElement,payloadElement);  if (before) {    WeaknessLog.append("Inserted Payload just before " + signedPostPart.getNodeName());    signedPostPart.getParentNode().insertBefore(payloadPostPart,signedPostPart);  } else {    WeaknessLog.append("Inserted Payload after " + signedPostPart.getNodeName());    signedPostPart.getParentNode().appendChild(payloadPostPart);  }  String theNamespaceUri=signedPostPart.getNamespaceURI();  String thePrefix=signedPostPart.getPrefix();  String injectedPrefix="atk" + thePrefix;  String injectedNamespaceUri=NamespaceConstants.URI_NS_WSATTACKER;  List<Element> taskList=DomUtilities.findChildren(signedPostPart,null,theNamespaceUri);  taskList.add(0,signedPostPart);  for (  Element task : taskList) {    if (task.getPrefix().equals(thePrefix) && task.getNamespaceURI().equals(theNamespaceUri)) {      task.getOwnerDocument().renameNode(task,injectedNamespaceUri,injectedPrefix + ":" + task.getLocalName());      WeaknessLog.append(String.format("Renamed %s:%s to {%s}%s",thePrefix,task.getLocalName(),task.getNamespaceURI(),task.getNodeName()));    }  }  Element declarationElement=DomUtilities.findCorrespondingElement(signedElement.getOwnerDocument(),ref.getXPathElement());  for (int i=1; i < declarationPosition; ++i) {    declarationElement=(Element)declarationElement.getParentNode();  }  declarationElement.setAttribute("xmlns:" + thePrefix,injectedNamespaceUri);  WeaknessLog.append(String.format("Changed namespace declaration in <%s> to %s -> %s",declarationElement.getNodeName(),thePrefix,injectedNamespaceUri));}  }
class C{  public boolean isParam(){  return isParam;}  }
class C{  @Override public boolean match(final Cookie cookie,final CookieOrigin origin){  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (origin == null) {    throw new IllegalArgumentException("Cookie origin may not be null");  }  String path=origin.getPath();  if (cookie.getPath() == null) {    LOG.warn("Invalid cookie state: path attribute is null.");    return false;  }  if (path.trim().equals("")) {    path=PATH_DELIM;  }  if (!pathMatch(path,cookie.getPath())) {    return false;  }  return true;}  }
class C{  SealedObject seal(Key key) throws Exception {  byte[] salt=new byte[8];  SunJCE.getRandom().nextBytes(salt);  PBEParameterSpec pbeSpec=new PBEParameterSpec(salt,20);  PBEKeySpec pbeKeySpec=new PBEKeySpec(this.password);  SecretKey sKey=new PBEKey(pbeKeySpec,"PBEWithMD5AndTripleDES");  pbeKeySpec.clearPassword();  Cipher cipher;  PBEWithMD5AndTripleDESCipher cipherSpi;  cipherSpi=new PBEWithMD5AndTripleDESCipher();  cipher=new CipherForKeyProtector(cipherSpi,SunJCE.getInstance(),"PBEWithMD5AndTripleDES");  cipher.init(Cipher.ENCRYPT_MODE,sKey,pbeSpec);  return new SealedObjectForKeyProtector(key,cipher);}  }
class C{  public static int[][] loadPNGFile(InputStream str,boolean flipY) throws IOException {  int[][] vals=loadPNGFile(str);  if (flipY) {    for (int i=0; i < vals.length; i++) {      int height=vals[i].length;      for (int j=0; j < height / 2; j++) {        int temp=vals[i][j];        vals[i][j]=vals[i][height - j + 1];        vals[i][height - j + 1]=temp;      }    }  }  return vals;}  }
class C{  public synchronized void addBan(long duration,String reason,String id){  addLine(new BanMessage(System.currentTimeMillis(),duration,reason,id));}  }
class C{  private void parseTurret2Lock(Element turret2LockTag,Entity entity){  String value=turret2LockTag.getAttribute(DIRECTION);  try {    int turDir=Integer.parseInt(value);    ((Tank)entity).setDualTurretOffset(turDir);    ((Tank)entity).lockTurret(((Tank)entity).getLocTurret2());  } catch (  Exception e) {    System.err.println(e);    e.printStackTrace();    warning.append("Invalid turret2 lock direction value in " + "movement tag.\n");  }}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public static ArrayList<Prediction> toWekaPredictions(int y[],double p[]){  ArrayList<Prediction> predictions=new ArrayList<Prediction>();  for (int i=0; i < y.length; i++) {    predictions.add(new NominalPrediction((double)y[i],new double[]{1. - p[i],p[i]}));  }  return predictions;}  }
class C{  public void windowClosing(WindowEvent e){}  }
class C{  public void removeActionListener(ActionListener al){  btnClearCodes.removeActionListener(al);  btnReadCodes.removeActionListener(al);  btnReadPending.removeActionListener(al);  btnReadPermanent.removeActionListener(al);}  }
class C{  public FailedOplet(int afterTuples,int sleepMillis){  if (afterTuples < 0)   throw new IllegalArgumentException("afterTuples=" + afterTuples);  if (sleepMillis < 0)   throw new IllegalArgumentException("sleepMillis=" + sleepMillis);  this.threshold=afterTuples;  this.sleepMillis=sleepMillis;}  }
class C{  public void stop(){  if (jmxServer != null) {    jmxServer.stop();  }  service.stop();}  }
class C{  private static float CallFloatMethod(JNIEnvironment env,int objJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallFloatMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithDotDotVarArg(obj,methodID,TypeReference.Float,false);    return Reflection.unwrapFloat(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  private void siteSelected(String site){  if (!site.equals(currentSite)) {    this.sessionsModel=extension.getHttpSessionsSite(site).getModel();    this.getHttpSessionsTable().setModel(this.sessionsModel);    this.setSessionsTableColumnSizes();    currentSite=site;  }}  }
class C{  private Response<Bitmap> doResourceParse(){  if (mResources == null) {    return Response.error(new ParseError("Resources instance is null"));  }  final String requestUrl=getUrl();  final int resourceId=Integer.valueOf(Uri.parse(requestUrl).getLastPathSegment());  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  decodeOptions.inInputShareable=true;  decodeOptions.inPurgeable=true;  decodeOptions.inPreferredConfig=mDecodeConfig;  Bitmap bitmap;  if (mMaxWidth == 0 && mMaxHeight == 0) {    bitmap=BitmapFactory.decodeResource(mResources,resourceId,decodeOptions);    addMarker("read-full-size-image-from-resource");  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeResource(mResources,resourceId,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=ImageUtils.findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeResource(mResources,resourceId,decodeOptions);    addMarker(String.format("read-from-resource-scaled-times-%d",decodeOptions.inSampleSize));    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();      addMarker("scaling-read-from-resource-bitmap");    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError());  } else {    return Response.success(bitmap,HttpHeaderParser.parseBitmapCacheHeaders(bitmap));  }}  }
class C{  public void testBadInputs() throws Exception {  if (random().nextBoolean()) {    assertU(adoc("id","42","str","z","float","99.99","int","42"));    assertU(adoc("id","66","str","x","float","22.00","int","-66"));  } else {    assertU(commit());  }  assertU(commit());  for (  String c : new String[]{"","   ","all the docs please!"}) {    assertFail(params("q","*:*","sort","id desc",CURSOR_MARK_PARAM,c),ErrorCode.BAD_REQUEST,"Unable to parse");  }  assertFail(params("q","*:*","sort","score desc",CURSOR_MARK_PARAM,CURSOR_MARK_START),ErrorCode.BAD_REQUEST,"uniqueKey field");  assertFail(params("q","*:*","sort","_docid_ asc, id desc",CURSOR_MARK_PARAM,CURSOR_MARK_START),ErrorCode.BAD_REQUEST,"_docid_");  assertFail(params("q","*:*","sort","id desc",CommonParams.TIME_ALLOWED,"1000",CURSOR_MARK_PARAM,CURSOR_MARK_START),ErrorCode.BAD_REQUEST,CommonParams.TIME_ALLOWED);  assertFail(params("q","*:*","sort","id desc",GroupParams.GROUP,"true",GroupParams.GROUP_FIELD,"str",CURSOR_MARK_PARAM,CURSOR_MARK_START),ErrorCode.BAD_REQUEST,"Grouping");}  }
class C{  @Override public boolean intTryCompareAndSwap(ObjectReference objref,int expected,int newValue,Word offset,Word unused,int mode){  if (org.jikesrvm.VM.BuildForIA32) {    return Magic.attemptInt(objref.toObject(),offset.toOffset(),expected,newValue);  } else {    int oldValue;    do {      oldValue=Magic.prepareInt(objref,offset.toOffset());      if (oldValue != expected)       return false;    } while (!Magic.attemptInt(objref,offset.toOffset(),oldValue,newValue));    return true;  }}  }
class C{  private List<BusinessObjectDataEntity> registerInvalidBusinessObjectDatas(BusinessObjectDataEntity latestBusinessObjectDataEntity,BusinessObjectFormatEntity businessObjectFormatEntity,List<BusinessObjectDataKey> businessObjectDataKeys,StorageEntity storageEntity){  List<BusinessObjectDataEntity> createdBusinessObjectDataEntities=new ArrayList<>();  if (!businessObjectDataKeys.isEmpty()) {    if (latestBusinessObjectDataEntity != null) {      latestBusinessObjectDataEntity.setLatestVersion(false);    }    BusinessObjectDataStatusEntity businessObjectDataStatusEntity=businessObjectDataStatusDao.getBusinessObjectDataStatusByCode(UNREGISTERED_STATUS);    StorageUnitStatusEntity storageUnitStatusEntity=storageUnitStatusDao.getStorageUnitStatusByCode(StorageUnitStatusEntity.ENABLED);    Iterator<BusinessObjectDataKey> unregisteredBusinessObjectDataKeysIterator=businessObjectDataKeys.iterator();    while (unregisteredBusinessObjectDataKeysIterator.hasNext()) {      BusinessObjectDataKey unregisteredBusinessObjectDataKey=unregisteredBusinessObjectDataKeysIterator.next();      BusinessObjectDataEntity businessObjectDataEntity=new BusinessObjectDataEntity();      businessObjectDataEntity.setBusinessObjectFormat(businessObjectFormatEntity);      businessObjectDataEntity.setPartitionValue(unregisteredBusinessObjectDataKey.getPartitionValue());      businessObjectDataEntity.setPartitionValue2(herdCollectionHelper.safeGet(unregisteredBusinessObjectDataKey.getSubPartitionValues(),0));      businessObjectDataEntity.setPartitionValue3(herdCollectionHelper.safeGet(unregisteredBusinessObjectDataKey.getSubPartitionValues(),1));      businessObjectDataEntity.setPartitionValue4(herdCollectionHelper.safeGet(unregisteredBusinessObjectDataKey.getSubPartitionValues(),2));      businessObjectDataEntity.setPartitionValue5(herdCollectionHelper.safeGet(unregisteredBusinessObjectDataKey.getSubPartitionValues(),3));      businessObjectDataEntity.setVersion(unregisteredBusinessObjectDataKey.getBusinessObjectDataVersion());      List<StorageUnitEntity> storageUnitEntities=new ArrayList<>();      StorageUnitEntity storageUnitEntity=new StorageUnitEntity();      storageUnitEntity.setStorage(storageEntity);      storageUnitEntity.setBusinessObjectData(businessObjectDataEntity);      String s3KeyPrefix=s3KeyPrefixHelper.buildS3KeyPrefix(storageEntity,businessObjectFormatEntity,unregisteredBusinessObjectDataKey);      storageUnitEntity.setDirectoryPath(s3KeyPrefix);      storageUnitEntity.setStatus(storageUnitStatusEntity);      storageUnitEntities.add(storageUnitEntity);      businessObjectDataEntity.setStorageUnits(storageUnitEntities);      businessObjectDataEntity.setStatus(businessObjectDataStatusEntity);      businessObjectDataEntity.setLatestVersion(!unregisteredBusinessObjectDataKeysIterator.hasNext());      businessObjectDataDao.saveAndRefresh(businessObjectDataEntity);      createdBusinessObjectDataEntities.add(businessObjectDataEntity);    }  }  return createdBusinessObjectDataEntities;}  }
class C{  private void waitForErrors(WriteStreamOld error,InputStream inputStream,InputStream errorStream) throws IOException {  byte[] buffer=new byte[256];  int stderrLen=0;  int stdoutLen=0;  if (inputStream == null || errorStream == null)   return;  do {    if ((stderrLen=errorStream.available()) > 0) {      stderrLen=errorStream.read(buffer,0,buffer.length);      if (stderrLen > 0) {        error.write(buffer,0,stderrLen);        continue;      }    }    if ((stdoutLen=inputStream.available()) > 0) {      stdoutLen=inputStream.read(buffer,0,buffer.length);      if (stdoutLen > 0) {        error.write(buffer,0,stdoutLen);        continue;      }    }    if (stderrLen < 0 && stdoutLen < 0)     return;    stderrLen=errorStream.read(buffer,0,buffer.length);    if (stderrLen > 0) {      error.write(buffer,0,stderrLen);      continue;    }    stdoutLen=inputStream.read(buffer,0,buffer.length);    if (stdoutLen > 0) {      error.write(buffer,0,stdoutLen);      continue;    }  } while (!_isDead && (stderrLen >= 0 || stdoutLen >= 0));}  }
class C{  private void createTargetConsistencyGroup(BlockConsistencyGroup sourceCG,List<URI> addVolumesList,Workflow workflow,String waitFor,String task){  Volume sourceVolume=_dbClient.queryObject(Volume.class,addVolumesList.get(0));  VirtualPool vPool=_dbClient.queryObject(VirtualPool.class,sourceVolume.getVirtualPool());  VirtualArray protectionVirtualArray=null;  if (vPool.getProtectionRemoteCopySettings() != null) {    for (    String protectionVarray : vPool.getProtectionRemoteCopySettings().keySet()) {      protectionVirtualArray=_dbClient.queryObject(VirtualArray.class,URI.create(protectionVarray));    }  }  String vArrayName=null;  if (protectionVirtualArray != null) {    vArrayName=protectionVirtualArray.getLabel();  }  String cgName=sourceCG.getLabel() + "-Target-" + vArrayName;  List<BlockConsistencyGroup> groups=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,BlockConsistencyGroup.class,PrefixConstraint.Factory.getFullMatchConstraint(BlockConsistencyGroup.class,"label",cgName));  BlockConsistencyGroup targetCG=null;  boolean createGroup=false;  if (groups.isEmpty()) {    targetCG=new BlockConsistencyGroup();    targetCG.setId(URIUtil.createId(BlockConsistencyGroup.class));    targetCG.setLabel(cgName);    targetCG.setProject(sourceCG.getProject());    targetCG.setTenant(sourceCG.getTenant());    targetCG.setAlternateLabel(sourceCG.getLabel());    targetCG.getRequestedTypes().add(Types.SRDF.name());    _dbClient.createObject(targetCG);    createGroup=true;  } else {    targetCG=groups.get(0);  }  List<URI> addTargetVolumesList=getSRDFTargetVolumes(addVolumesList);  if (!addTargetVolumesList.isEmpty()) {    Volume targetVolume=_dbClient.queryObject(Volume.class,addTargetVolumesList.get(0));    StorageSystem targetSystem=_dbClient.queryObject(StorageSystem.class,targetVolume.getStorageController());    String groupName=ControllerUtils.generateReplicationGroupName(targetSystem,targetCG,null,_dbClient);    if (createGroup || !targetCG.created()) {      _log.info("Creating target Consistency group on Array.");      waitFor=workflow.createStep(UPDATE_CONSISTENCY_GROUP_STEP_GROUP,String.format("Creating consistency group %s",targetCG.getId()),waitFor,targetSystem.getId(),targetSystem.getSystemType(),this.getClass(),createConsistencyGroupMethod(targetSystem.getId(),targetCG.getId(),groupName),rollbackMethodNullMethod(),null);    }    _log.info("Adding target volumes to target Consistency group.");    waitFor=workflow.createStep(UPDATE_CONSISTENCY_GROUP_STEP_GROUP,String.format("Updating consistency group %s",targetCG.getId()),waitFor,targetSystem.getId(),targetSystem.getSystemType(),this.getClass(),addToConsistencyGroupMethod(targetSystem.getId(),targetCG.getId(),null,addTargetVolumesList),rollbackMethodNullMethod(),null);    waitFor=_replicaDeviceController.addStepsForAddingSessionsToCG(workflow,waitFor,targetCG.getId(),addTargetVolumesList,groupName,task);  }}  }
class C{  public static <S extends HasSelectionUpdatedHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    SelectionUpdatedEvent event=new SelectionUpdatedEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public Matrix dstColumns(boolean scale){  DenseDoubleMatrix2D dm=new DenseDoubleMatrix2D(getArray());  dm.dstColumns(scale);  return new Matrix(dm.toArray());}  }
class C{  protected void assertDoesNotExist(File file){  assertFalse("File '" + file.getAbsolutePath() + "' exists",file.exists());}  }
class C{  public synchronized void onJoinStarted(){  joinStartedTs=U.currentTimeMillis();}  }
class C{  @Override public boolean isBold(String id){  return false;}  }
class C{  public Token createToken(final char[] line,final int beg,final int end,final int startOffset,final int type){  Token token=tokenList[currentFreeToken];  token.set(line,beg,end,startOffset,type);  currentFreeToken++;  if (currentFreeToken == size)   augmentTokenList();  return token;}  }
class C{  private void drawCircleBorder(@NonNull Canvas canvas){  canvas.drawCircle(mCenterPointX,mCenterPointY,mRadius,mBoarderPaint);}  }
class C{  public Lucene54DocValuesConsumer(SegmentWriteState state,String dataCodec,String dataExtension,String metaCodec,String metaExtension) throws IOException {  boolean success=false;  try {    String dataName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,dataExtension);    data=state.directory.createOutput(dataName,state.context);    CodecUtil.writeIndexHeader(data,dataCodec,Lucene54DocValuesFormat.VERSION_CURRENT,state.segmentInfo.getId(),state.segmentSuffix);    String metaName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,metaExtension);    meta=state.directory.createOutput(metaName,state.context);    CodecUtil.writeIndexHeader(meta,metaCodec,Lucene54DocValuesFormat.VERSION_CURRENT,state.segmentInfo.getId(),state.segmentSuffix);    maxDoc=state.segmentInfo.maxDoc();    success=true;  }  finally {    if (!success) {      IOUtils.closeWhileHandlingException(this);    }  }}  }
class C{  protected double variance(double[] s,double[] sS,double[] sumOfWeights){  double var=0;  for (int i=0; i < s.length; i++) {    if (sumOfWeights[i] > 0) {      var+=singleVariance(s[i],sS[i],sumOfWeights[i]);    }  }  return var;}  }
class C{  @Override public int read() throws IOException {  if (buf == null) {    throw new IOException();  }  if (pos < buf.length) {    return (buf[pos++] & 0xFF);  }  return in.read();}  }
class C{  public void addBanMethod(SootMethod sm){  all_sys_methods.addMethod(sm);  banned_methods.addMethod(sm);  api_modeled_methods.addMethod(sm);}  }
class C{  protected AnnotationQuery(){  _tags=new HashMap<>();}  }
class C{  private static Dimension calculateCharacterRectangle(final Font font,final char[] characters){  BufferedImage img=new BufferedImage(1,1,BufferedImage.TYPE_INT_ARGB);  Graphics g=img.getGraphics();  Graphics2D graphics=(Graphics2D)g;  graphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);  graphics.setFont(font);  FontMetrics fm=graphics.getFontMetrics();  Dimension maxCharacter=new Dimension();  for (int i=0; i < characters.length; i++) {    String character=Character.toString(characters[i]);    Rectangle characterRectangle=new TextLayout(character,fm.getFont(),fm.getFontRenderContext()).getOutline(null).getBounds();    if (maxCharacter.width < characterRectangle.getWidth()) {      maxCharacter.width=(int)characterRectangle.getWidth();    }    if (maxCharacter.height < characterRectangle.getHeight()) {      maxCharacter.height=(int)characterRectangle.getHeight();    }  }  return maxCharacter;}  }
class C{  public Y notin(X value,X... values){  if (isIngore(value)) {    return criteria;  }  if (q.isEmpty() == false) {    q.add(" AND ");  }  q.add(getColumnName()).notin(getValues(value,values));  return criteria;}  }
class C{  private void writeHeader() throws OpenStegoException {  DCTDataHeader header=null;  try {    header=new DCTDataHeader(this.dataLength,this.fileName,this.config);    if (((header.getHeaderSize() + this.dataLength) * 8) > (this.imgWidth * this.imgHeight / (DCT.NJPEG * DCT.NJPEG))) {      throw new OpenStegoException(null,DctLSBPlugin.NAMESPACE,DctLSBErrors.IMAGE_SIZE_INSUFFICIENT);    }    this.coord=new Coordinates((header.getHeaderSize() + this.dataLength) * 8);    write(header.getHeaderData());  } catch (  IOException ioEx) {    throw new OpenStegoException(ioEx);  }}  }
class C{  private void createServerSocket(){  int p=this.port;  int b=BACKLOG;  InetAddress bindAddress=this.address;  try {    if (this.useNIO) {      if (p <= 0) {        socket=socketCreator.createServerSocketUsingPortRange(bindAddress,b,isBindAddress,this.useNIO,0,tcpPortRange);      } else {        ServerSocketChannel channel=ServerSocketChannel.open();        socket=channel.socket();        InetSocketAddress inetSocketAddress=new InetSocketAddress(isBindAddress ? bindAddress : null,p);        socket.bind(inetSocketAddress,b);      }      if (useNIO) {        try {          socket.setReceiveBufferSize(tcpBufferSize);          int newSize=socket.getReceiveBufferSize();          if (newSize != tcpBufferSize) {            logger.info(LocalizedMessage.create(LocalizedStrings.TCPConduit_0_IS_1_INSTEAD_OF_THE_REQUESTED_2,new Object[]{"Listener receiverBufferSize",Integer.valueOf(newSize),Integer.valueOf(tcpBufferSize)}));          }        } catch (        SocketException ex) {          logger.warn(LocalizedMessage.create(LocalizedStrings.TCPConduit_FAILED_TO_SET_LISTENER_RECEIVERBUFFERSIZE_TO__0,tcpBufferSize));        }      }      channel=socket.getChannel();    } else {      try {        if (p <= 0) {          socket=socketCreator.createServerSocketUsingPortRange(bindAddress,b,isBindAddress,this.useNIO,this.tcpBufferSize,tcpPortRange);        } else {          socket=socketCreator.createServerSocket(p,b,isBindAddress ? bindAddress : null,this.tcpBufferSize);        }        int newSize=socket.getReceiveBufferSize();        if (newSize != this.tcpBufferSize) {          logger.info(LocalizedMessage.create(LocalizedStrings.TCPConduit_0_IS_1_INSTEAD_OF_THE_REQUESTED_2,new Object[]{"Listener receiverBufferSize",Integer.valueOf(newSize),Integer.valueOf(this.tcpBufferSize)}));        }      } catch (      SocketException ex) {        logger.warn(LocalizedMessage.create(LocalizedStrings.TCPConduit_FAILED_TO_SET_LISTENER_RECEIVERBUFFERSIZE_TO__0,this.tcpBufferSize));      }    }    port=socket.getLocalPort();  } catch (  IOException io) {    throw new ConnectionException(LocalizedStrings.TCPConduit_EXCEPTION_CREATING_SERVERSOCKET.toLocalizedString(new Object[]{Integer.valueOf(p),bindAddress}),io);  }}  }
class C{  public void clearData(){  rawData.clear();}  }
class C{  private void updateInfoField(){  final Enumeration<?> nodes=((JCriteriumTreeNode)m_jtree.getModel().getRoot()).breadthFirstEnumeration();  while (nodes.hasMoreElements()) {    final JCriteriumTreeNode node=(JCriteriumTreeNode)nodes.nextElement();    final JPanel panel=node.getCriterium().getCriteriumPanel();    if (panel instanceof CAbstractOperatorPanel) {      final int count=node.getChildCount();      final ICriterium criterium=node.getCriterium();      final JTextArea infoField=((CAbstractOperatorPanel)panel).getInfoField();      if (count == 1 && (criterium instanceof CNotCriterium || node.getLevel() == 0) || count > 1 && !(criterium instanceof CNotCriterium)) {        infoField.setForeground(VALID_OPERATOR_COLOR);        infoField.setText(((CAbstractOperatorPanel)panel).getValidInfoString());      } else {        infoField.setForeground(INVALID_OPERATOR_COLOR);        infoField.setText(((CAbstractOperatorPanel)panel).getInvalidInfoString());      }    }    panel.updateUI();  }}  }
class C{  public void remove(TreePath path){synchronized (root) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    DefaultMutableTreeNode parent=(DefaultMutableTreeNode)path.getParentPath().getLastPathComponent();    int index=parent.getIndex(node);    if (node.getUserObject() instanceof MovieSet) {      MovieSet movieSet=(MovieSet)node.getUserObject();      for (      Movie movie : movieSet.getMovies()) {        movie.setMovieSet(null);        movie.writeNFO();        movie.saveToDb();        nodeMap.remove(movie);      }      movieSet.removeAllMovies();      movieSet.removePropertyChangeListener(propertyChangeListener);      movieList.removeMovieSet(movieSet);      nodeMap.remove(movieSet);      node.removeAllChildren();      node.removeFromParent();      TreeModelEvent event=new TreeModelEvent(this,parent.getPath(),new int[]{index},new Object[]{node});      for (      TreeModelListener listener : listeners) {        listener.treeNodesRemoved(event);      }    }    if (node.getUserObject() instanceof Movie) {      Movie movie=(Movie)node.getUserObject();      MovieSet movieSet=movie.getMovieSet();      if (movieSet != null) {        movieSet.removeMovie(movie);      }      nodeMap.remove(movie);      movie.setMovieSet(null);      movie.writeNFO();      movie.saveToDb();    }  }}  }
class C{  public void add(Integer id,String method){  LOG.debug("Binding ID: {} to method: {}",id,method);  requests.put(id,method);}  }
class C{  public final void testIsSatisfiedSucceeds(){  ContainsNumberConstraint containsNumberConstraint=new ContainsNumberConstraint();  assertTrue(containsNumberConstraint.isSatisfied("abc1abc"));}  }
class C{  private static void printMessage(String[] msg){  for (  String s : msg) {    System.out.println(s);  }}  }
class C{  public T caseSnippet(Snippet object){  return null;}  }
class C{  public boolean containsKey(Object key){  return _pairs.containsKey(key);}  }
class C{  public MemoryTableRenderer(MemoryTableModel model){  this.model=model;}  }
class C{  public boolean isCanceled(){  return canceled;}  }
class C{  public RemoteOperationException(String message){  super(message);}  }
class C{  static double svd_dmax(double a,double b){  return Math.max(a,b);}  }
class C{  protected void handleEndTag(TagElement tag){}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;default :  return null;}}  }
class C{  public static ArrayList<String> toLines(){  ArrayList<String> list=new ArrayList<>();  list.add(String.format("%10s %s","Toast:",Version.version().get()));  list.add(String.format("%10s %s (%s)","Git:",Version.getShortCommitHash(),Version.getCommitHash()));  list.add(String.format("%10s %s","Type:",getEnvironmentalType()));  list.add(String.format("%10s %s","FMS:",isCompetition()));  list.add(String.format("%10s %s %s (%s)","OS:",getOS_Name(),getOS_Version(),getOS_Architecture()));  list.add(String.format("%10s %s (%s)","Java:",getJava_version(),getJava_vendor()));  list.add(String.format("%10s %s","Java Path:",getJava_home()));  if (JavaScript.supported())   list.add(String.format("%10s %s","JScript:","Supported (" + JavaScript.engineType() + ")")); else   list.add(String.format("%10s %s","JScript:","Unsupported"));  return list;}  }
class C{  public static double weightedL0_Distance(FeatureMetaData[] featureTypes,int[] A,int[] B){  double count=0;  for (int i=0; i < A.length; i++) {    FeatureType type=featureTypes[i].type;    if (type == FeatureType.TOKEN || type == FeatureType.RULE || type == FeatureType.INT || type == FeatureType.BOOL) {      if (A[i] != B[i]) {        count+=featureTypes[i].mismatchCost;      }    }  }  return count;}  }
class C{  @NonNull public static String dateToString(@NonNull Date date,@NonNull DateFormat df){  return df.format(date);}  }
class C{  @Override public final void appendRectangle(final float x,final float y,final float w,final float h){  moveTo(x,y);  lineTo(x + w,y);  lineTo(x + w,y + h);  lineTo(x,y + h);  lineTo(x,y);  closeShape();  metrics.incrementRectangleCount();}  }
class C{  private void markRecoveryFailed(RecoveryStatus.ErrorCode errorMessage){  if (!isLeader.get()) {    log.warn("This node is not the recovery leader");    throw new IllegalStateException("This node is not the recovery leader");  }  RecoveryStatus recoveryStatus=queryNodeRecoveryStatus();  if (recoveryStatus.getErrorCode() != null) {    log.debug("Have already marked.");    return;  }  recoveryStatus.setErrorCode(errorMessage);  recoveryStatus.setEndTime(new Date());  recoveryStatus.setStatus(RecoveryStatus.Status.FAILED);  persistNodeRecoveryStatus(recoveryStatus);  poweroff(getHibernateNodes());}  }
class C{  public void clearSelection(){  if (anchorSelectionIndex > -1) {    leadSelectionIndex=anchorSelectionIndex;  } else {    anchorSelectionIndex=leadSelectionIndex=0;  }  repaintSelection();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public String generateFinished() throws Exception {  StringBuffer dLString=new StringBuffer();  boolean[] attList_Irr=getAttList_Irr();  Instances format=getDatasetFormat();  dLString.append("%\n% Number of attributes chosen as irrelevant = " + getNumIrrelevant() + "\n");  for (int i=0; i < attList_Irr.length; i++) {    if (attList_Irr[i]) {      dLString.append("% " + format.attribute(i).name() + "\n");    }  }  dLString.append("%\n% DECISIONLIST (number of rules = " + m_DecisionList.size() + "):\n");  for (int i=0; i < m_DecisionList.size(); i++) {    RuleList rl=m_DecisionList.get(i);    dLString.append("% RULE " + i + ": "+ rl.toString()+ "\n");  }  return dLString.toString();}  }
class C{  public Anonymous_numExpr_1_ createAnonymous_numExpr_1_(){  Anonymous_numExpr_1_Impl anonymous_numExpr_1_=new Anonymous_numExpr_1_Impl();  return anonymous_numExpr_1_;}  }
class C{  public int transformToGlobalRTF(ElemTemplateElement templateParent) throws TransformerException {  DTM dtmFrag=m_xcontext.getGlobalRTFDTM();  return transformToRTF(templateParent,dtmFrag);}  }
class C{  @Override protected EClass eStaticClass(){  return ExpressionsPackage.Literals.BOOL_LITERAL;}  }
class C{  public void writeToBuilder(final StringBuilder sb,final int indent){  final char[] indentation=new char[indent * 2];  Arrays.fill(indentation,' ');  for (  StackTraceElement ste : stackTraceElements) {    sb.append(indentation).append("at ").append(ste.getClassName()).append('.').append(ste.getMethodName()).append('(').append(ste.getFileName()).append(':').append(Integer.toString(ste.getLineNumber())).append(")\n");  }}  }
class C{  protected boolean mustDrawInterior(){  return super.mustDrawInterior() || this.getActiveSideAttributes().isDrawInterior();}  }
class C{  public void registerTags(BridgeContext ctx){  super.registerTags(ctx);  ctx.putBridge(new SVGFlowRootElementBridge());  ctx.putBridge(new SVGMultiImageElementBridge());  ctx.putBridge(new SVGSolidColorElementBridge());  ctx.putBridge(new SVG12TextElementBridge());  ctx.putBridge(new XBLShadowTreeElementBridge());  ctx.putBridge(new XBLContentElementBridge());  ctx.setDefaultBridge(new BindableElementBridge());  ctx.putReservedNamespaceURI(null);  ctx.putReservedNamespaceURI(SVGConstants.SVG_NAMESPACE_URI);  ctx.putReservedNamespaceURI(XBLConstants.XBL_NAMESPACE_URI);}  }
class C{  public static boolean startJavaProcessWithoutTrxClose(Properties ctx,ProcessInfo pi,Trx trx){  return startJavaProcess(ctx,pi,trx,false);}  }
class C{  public int copyResource(final Uri packageURI,ContainerEncryptionParams encryptionParams,ParcelFileDescriptor outStream){  if (packageURI == null || outStream == null) {    return PackageManager.INSTALL_FAILED_INVALID_URI;  }  ParcelFileDescriptor.AutoCloseOutputStream autoOut=new ParcelFileDescriptor.AutoCloseOutputStream(outStream);  try {    copyFile(packageURI,autoOut,encryptionParams);    return PackageManager.INSTALL_SUCCEEDED;  } catch (  FileNotFoundException e) {    Slog.e(TAG,"Could not copy URI " + packageURI.toString() + " FNF: "+ e.getMessage());    return PackageManager.INSTALL_FAILED_INVALID_URI;  }catch (  IOException e) {    Slog.e(TAG,"Could not copy URI " + packageURI.toString() + " IO: "+ e.getMessage());    return PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;  }catch (  DigestException e) {    Slog.e(TAG,"Could not copy URI " + packageURI.toString() + " Security: "+ e.getMessage());    return PackageManager.INSTALL_FAILED_INVALID_APK;  }}  }
class C{  @Override public int hashCode(){  int hc=13 * sort;  if (sort >= ARRAY) {    for (int i=off, end=i + len; i < end; i++) {      hc=17 * (hc + buf[i]);    }  }  return hc;}  }
class C{  public ObjectState(S id,PseudoState<S,E> pseudoState){  super(id,pseudoState);}  }
class C{  public void requestPreviewFrame(Handler handler,int message){  if (camera != null && previewing) {    previewCallback.setHandler(handler,message);    if (useOneShotPreviewCallback) {      camera.setOneShotPreviewCallback(previewCallback);    } else {      camera.setPreviewCallback(previewCallback);    }  }}  }
class C{  public static void putShort(long addr,short val){  if (UNALIGNED)   UNSAFE.putShort(addr,val); else   putShortByByte(addr,val,BIG_ENDIAN);}  }
class C{  default <S>void updating(Class<? extends S> stateClass,S stateInstance,Consumer<ProxyingEventBus> busConsumer){  StateBuilder<S> stateBuilder=DispatchingStateBuilder.dispatchingTo(stateClass,stateInstance);  notifying(stateBuilder.toEventsOutChannel(),Consumers.transform(busConsumer,null));}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 7:{        addToken(start,zzEndRead,Token.LITERAL_STRING_DOUBLE_QUOTE);        return firstToken;      }case 9:    break;case 2:{    start=zzMarkedPos;    addToken(Token.OPERATOR);    yybegin(VALUE);  }case 10:break;case 8:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addToken(temp,zzMarkedPos - 1,Token.VARIABLE);start=zzMarkedPos;}case 11:break;case 3:{addToken(Token.WHITESPACE);}case 12:break;case 6:{addToken(start,zzMarkedPos - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);start=zzMarkedPos;}case 13:break;case 1:{addToken(Token.RESERVED_WORD);}case 14:break;case 5:{}case 15:break;case 4:{addToken(Token.COMMENT_EOL);}case 16:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case YYINITIAL:{addNullToken();return firstToken;}case 14:break;case VALUE:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addNullToken();return firstToken;}case 15:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  private void addLocoToConsist(int address,boolean isLong,byte command){  if (isLong) {    address+=0xC000;  }  sendNceBinaryCommand(address,command,_consistNum);}  }
class C{  private HashMap<String,String> convertSingleJpg(String inputFile,String outputfile){  String[] argv=new String[]{getPathToImageMagic(),inputFile,outputfile + ".jpg"};  if (System.getProperty("os.name").toUpperCase().indexOf("WINDOWS") == -1) {    return ProcessHelper.executeScript("generateBatchThumbByWidth",argv);  } else {    return generateThumbs.processImageWindows(argv);  }}  }
class C{  public boolean isResource(){  return isResource;}  }
class C{  public HyperLogLog(double rsd){  this(log2m(rsd));}  }
class C{  public static void generateYaCyBot(String addinfo){  String agentString="yacybot (" + addinfo + "; "+ yacySystem+ ") http://yacy.net/bot.html";  yacyInternetCrawlerAgent=new Agent(agentString,new String[]{"yacybot"},minimumGlobalDeltaInit,clientTimeoutInit);  yacyIntranetCrawlerAgent=new Agent(agentString,new String[]{"yacybot"},minimumLocalDeltaInit,clientTimeoutInit);  agents.put(yacyInternetCrawlerAgentName,yacyInternetCrawlerAgent);  agents.put(yacyIntranetCrawlerAgentName,yacyIntranetCrawlerAgent);}  }
class C{  public static int executeUpdateEx(String sql,Object[] params,String trxName) throws DBException {  return executeUpdateEx(sql,params,trxName,0);}  }
class C{  public void addCapabilitiesListener(CapabilitiesListener listener) throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    ICapabilitiesListener rcsListener=new CapabilitiesListenerImpl(listener);    mCapabilitiesListeners.put(listener,new WeakReference<>(rcsListener));    mApi.addCapabilitiesListener(rcsListener);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public RandomColors(long seed){  this();  random.setSeed(seed);}  }
class C{  public ShowItemListEvent(final String title,String caption,final Collection<Item> items){  super(RPCLASS_NAME);  super.put(TITLE,title);  if (caption != null) {    super.put(CAPTION,caption);  }  super.addSlot(CONTENT_SLOT);  RPSlot slot=super.getSlot(CONTENT_SLOT);  for (  Item item : items) {    slot.add(item);  }}  }
class C{  void validateFiles(List sourceFiles){  ArrayList noOverwrite=new ArrayList();  ArrayList overwriteReadonly=new ArrayList();  collectExistingReadonlyFiles(destinationPath,sourceFiles,noOverwrite,overwriteReadonly,POLICY_DEFAULT);  rejectedFiles=validateEdit(overwriteReadonly);  rejectedFiles.addAll(noOverwrite);}  }
class C{  public boolean isDeleteEnabled(){  if (text == null || text.isDisposed()) {    return false;  }  return text.getSelectionCount() > 0 || text.getCaretOffset() < text.getCharCount();}  }
class C{  public ToStringBuilder append(Object obj){  style.append(buffer,null,obj,null);  return this;}  }
class C{  public HttpMethod process(HttpServletRequest request,String url) throws IOException {  final EntityEnclosingMethod method;  if (request.getMethod().equalsIgnoreCase("POST")) {    method=new PostMethod(url);  } else   if (request.getMethod().equalsIgnoreCase("PUT")) {    method=new PutMethod(url);  } else {    throw new IOException("Unknown request method: " + request.getMethod());  }  setHeaders(method,request);  InputStreamRequestEntity stream;  stream=new InputStreamRequestEntity(request.getInputStream());  method.setRequestEntity(stream);  method.setRequestHeader("Content-type",request.getContentType());  return method;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemns02.class,args);}  }
class C{  public void testConfigured(){  m_Filter=getConfiguredFilter();  Instances result=useFilter();  assertEquals(m_Instances.numAttributes() + 2,result.numAttributes());  assertEquals(m_Instances.numInstances(),result.numInstances());}  }
class C{  public static boolean isDirectory(String dir){  return (new File(dir)).isDirectory();}  }
class C{  public boolean remove(Object o){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return q.remove(o);  }  finally {    lock.unlock();  }}  }
class C{  public U64 addObservedLatency(U64 latency){  if (isLatencyHistoryFull()) {    latencyHistory.removeFirst();  }  latencyHistory.addLast(latency);  if (currentLatency == null) {    currentLatency=latency;    return currentLatency;  } else {    return getLatency();  }}  }
class C{  protected Map<Object,Attribute> createAttributeIndex(){  return createIndex();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:42.886 -0500",hash_original_method="8DFAA261B116CB95D8F3EE320976E821",hash_generated_method="E2028131F1B07E853FD832F61317A006") public TestSuiteBuilder(Class clazz){  this(clazz.getName(),clazz.getClassLoader());}  }
class C{  public static void selectVisibleSubtreeNodes(final ZyGraph graph,final ITreeNode<CTag> tag){  selectNodes(graph,getSubtreeTags(tag),true);}  }
class C{  public boolean onCoverRemoval(byte aSide,int aCoverID,int aCoverVariable,ICoverable aTileEntity,boolean aForced){  return true;}  }
class C{  private void upgradeLegacyBackgroundData(){  mRestrictBackground=Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.BACKGROUND_DATA,1) != 1;  if (mRestrictBackground) {    final Intent broadcast=new Intent(ConnectivityManager.ACTION_BACKGROUND_DATA_SETTING_CHANGED);    mContext.sendBroadcastAsUser(broadcast,UserHandle.ALL);  }}  }
class C{  public AnnotationVisitor visitInsnAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (mv != null) {    return mv.visitInsnAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public Pointer withByteOffset(long byteOffset){  return new Pointer(this,byteOffset);}  }
class C{  private void delete(URI url,String id,String key) throws IsilonException {  ClientResponse resp=null;  try {    resp=_client.delete(url.resolve(id));    if (resp.getStatus() != 200 && resp.getStatus() != 204 && resp.getStatus() != 404) {      processErrorResponse("delete",key + ": " + id,resp.getStatus(),resp.hasEntity() ? resp.getEntity(JSONObject.class) : null);    }  } catch (  IsilonException ie) {    throw ie;  }catch (  Exception e) {    String response=String.format("%1$s",(resp == null) ? "" : resp);    throw IsilonException.exceptions.deleteResourceFailedOnIsilonArray(key,id,response,e);  } finally {    if (resp != null) {      resp.close();    }  }}  }
class C{  public void testCrazyIndexTimeBoosts() throws Exception {  long avgLength=750;  long docCount=500000;  long numTokens=docCount * avgLength;  CollectionStatistics collectionStats=new CollectionStatistics("body",docCount,docCount,numTokens,numTokens);  long docFreq=2000;  long totalTermFreq=2000 * avgLength;  TermStatistics termStats=new TermStatistics(new BytesRef("term"),docFreq,totalTermFreq);  for (  SimilarityBase sim : sims) {    if (sim instanceof IBSimilarity) {      if (((IBSimilarity)sim).getDistribution() instanceof DistributionSPL) {        continue;      }    } else     if (sim instanceof DFRSimilarity) {      BasicModel model=((DFRSimilarity)sim).getBasicModel();      if (model instanceof BasicModelD || model instanceof BasicModelP) {        continue;      } else       if (model instanceof BasicModelBE) {        continue;      }    }    BasicStats stats=(BasicStats)sim.computeWeight(1f,collectionStats,termStats);    for (float tf=1.0f; tf <= 10.0f; tf+=1.0f) {      for (int i=0; i < 256; i++) {        float len=sim.decodeNormValue((byte)i);        float score=sim.score(stats,tf,len);        assertFalse("negative score for " + sim + ", len="+ len+ ",score="+ score,score < 0.0f);        assertFalse("inf score for " + sim + ", len="+ len,Float.isInfinite(score));        assertFalse("nan score for " + sim + ", len="+ len,Float.isNaN(score));      }    }  }}  }
class C{  public void calculateSelection(){  m_noSelected=0;  BigDecimal selectedAmt=new BigDecimal(0.0);  if (miniTable.getKeyColumnIndex() == -1) {    return;  }  int[] rows=miniTable.getSelectedIndices();  for (int row=0; row < rows.length; row++) {    BigDecimal amt=(BigDecimal)miniTable.getModel().getValueAt(rows[row],amtColIndex);    if (amt != null)     selectedAmt=selectedAmt.add(amt);    m_noSelected++;  }  StringBuffer info=new StringBuffer();  info.append(m_noSelected).append(" ").append(Msg.getMsg(Env.getCtx(),"Selected")).append(" / ").append(miniTable.getRowCount());  differenceField.setValue(m_format.format(selectedAmt));  setStatusLine(info.toString() + " " + Msg.getMsg(Env.getCtx(),"SearchRows_EnterQuery"),false);  setStatusDB(Integer.toString(miniTable.getRowCount()));  bGenerate.setEnabled(m_noSelected != 0 && Env.ZERO.compareTo(selectedAmt) == 0 && !isReconciled.isSelected());  bReset.setEnabled(m_noSelected > 0 && isReconciled.isSelected());}  }
class C{  private void waitForSystemTimeChange(){  long start=System.currentTimeMillis();  while (System.currentTimeMillis() == start)   ;}  }
class C{  public Boolean isPanTilt(){  return panTilt;}  }
class C{  public N4MFWizardTestedProjectPage(N4MFProjectInfo projectInfo,IResourceDescriptions resourceDescriptions){  super("Select projects to be tested");  this.resourceDescriptions=resourceDescriptions;  this.projectInfo=projectInfo;  this.setTitle("Select projects to be tested");  this.setMessage("Select projects to be tested in your new test project");}  }
class C{  public Rect(float x,float y,float width,float height){  this.x=x;  this.y=y;  this.width=width;  this.height=height;}  }
class C{  @Scheduled(initialDelayString="${batch.greeting.initialdelay}",fixedDelayString="${batch.greeting.fixeddelay}") public void fixedDelayJobWithInitialDelay(){  logger.info("> fixedDelayJobWithInitialDelay");  counterService.increment("method.invoked.greetingBatchBean.fixedDelayJobWithInitialDelay");  final Collection<Greeting> greetings=greetingService.findAll();  logger.info(MESSAGE_FORMAT,greetings.size());  logger.info("< fixedDelayJobWithInitialDelay");}  }
class C{  private LongKeyMap(boolean dummy){}  }
class C{  public Contribution(NondominatedPopulation referenceSet,double[] epsilon){  this(referenceSet,new EpsilonBoxDominanceComparator(epsilon));}  }
class C{  public XML11ConfigurationMMImpl(SymbolTable symbolTable,XMLGrammarPool grammarPool,XMLComponentManager parentSettings){  super(parentSettings);  fComponents=new ArrayList();  fXML11Components=new ArrayList();  fCommonComponents=new ArrayList();  fRecognizedFeatures=new ArrayList();  fRecognizedProperties=new ArrayList();  fFeatures=new HashMap();  fProperties=new HashMap();  final String[] recognizedFeatures={CONTINUE_AFTER_FATAL_ERROR,LOAD_EXTERNAL_DTD,VALIDATION,NAMESPACES,NORMALIZE_DATA,SCHEMA_ELEMENT_DEFAULT,SCHEMA_AUGMENT_PSVI,GENERATE_SYNTHETIC_ANNOTATIONS,VALIDATE_ANNOTATIONS,HONOUR_ALL_SCHEMALOCATIONS,IGNORE_XSI_TYPE,ID_IDREF_CHECKING,IDENTITY_CONSTRAINT_CHECKING,UNPARSED_ENTITY_CHECKING,USE_GRAMMAR_POOL_ONLY,XMLSCHEMA_VALIDATION,XMLSCHEMA_FULL_CHECKING,EXTERNAL_GENERAL_ENTITIES,EXTERNAL_PARAMETER_ENTITIES,PARSER_SETTINGS};  addRecognizedFeatures(recognizedFeatures);  fFeatures.put(VALIDATION,Boolean.FALSE);  fFeatures.put(NAMESPACES,Boolean.TRUE);  fFeatures.put(EXTERNAL_GENERAL_ENTITIES,Boolean.TRUE);  fFeatures.put(EXTERNAL_PARAMETER_ENTITIES,Boolean.TRUE);  fFeatures.put(CONTINUE_AFTER_FATAL_ERROR,Boolean.FALSE);  fFeatures.put(LOAD_EXTERNAL_DTD,Boolean.TRUE);  fFeatures.put(SCHEMA_ELEMENT_DEFAULT,Boolean.TRUE);  fFeatures.put(NORMALIZE_DATA,Boolean.TRUE);  fFeatures.put(SCHEMA_AUGMENT_PSVI,Boolean.TRUE);  fFeatures.put(GENERATE_SYNTHETIC_ANNOTATIONS,Boolean.FALSE);  fFeatures.put(VALIDATE_ANNOTATIONS,Boolean.FALSE);  fFeatures.put(HONOUR_ALL_SCHEMALOCATIONS,Boolean.FALSE);  fFeatures.put(IGNORE_XSI_TYPE,Boolean.FALSE);  fFeatures.put(ID_IDREF_CHECKING,Boolean.TRUE);  fFeatures.put(IDENTITY_CONSTRAINT_CHECKING,Boolean.TRUE);  fFeatures.put(UNPARSED_ENTITY_CHECKING,Boolean.TRUE);  fFeatures.put(USE_GRAMMAR_POOL_ONLY,Boolean.FALSE);  fFeatures.put(PARSER_SETTINGS,Boolean.TRUE);  final String[] recognizedProperties={SYMBOL_TABLE,ERROR_HANDLER,ENTITY_RESOLVER,ERROR_REPORTER,ENTITY_MANAGER,DOCUMENT_SCANNER,DTD_SCANNER,DTD_PROCESSOR,DTD_VALIDATOR,DATATYPE_VALIDATOR_FACTORY,VALIDATION_MANAGER,SCHEMA_VALIDATOR,XML_STRING,XMLGRAMMAR_POOL,JAXP_SCHEMA_SOURCE,JAXP_SCHEMA_LANGUAGE,SCHEMA_LOCATION,SCHEMA_NONS_LOCATION,ROOT_TYPE_DEF};  addRecognizedProperties(recognizedProperties);  if (symbolTable == null) {    symbolTable=new SymbolTable();  }  fSymbolTable=symbolTable;  fProperties.put(SYMBOL_TABLE,fSymbolTable);  fGrammarPool=grammarPool;  if (fGrammarPool != null) {    fProperties.put(XMLGRAMMAR_POOL,fGrammarPool);  }  fEntityManager=new XMLEntityManager();  fProperties.put(ENTITY_MANAGER,fEntityManager);  addCommonComponent(fEntityManager);  fErrorReporter=new XMLErrorReporter();  fErrorReporter.setDocumentLocator(fEntityManager.getEntityScanner());  fProperties.put(ERROR_REPORTER,fErrorReporter);  addCommonComponent(fErrorReporter);  fNamespaceScanner=new XMLNSDocumentScannerMMImpl();  fProperties.put(DOCUMENT_SCANNER,fNamespaceScanner);  addComponent((XMLComponent)fNamespaceScanner);  fDTDScanner=new XMLDTDScannerImpl();  fProperties.put(DTD_SCANNER,fDTDScanner);  addComponent((XMLComponent)fDTDScanner);  fDTDProcessor=new XMLDTDProcessor();  fProperties.put(DTD_PROCESSOR,fDTDProcessor);  addComponent(fDTDProcessor);  fDTDValidator=new XMLNSDTDValidator();  fProperties.put(DTD_VALIDATOR,fDTDValidator);  addComponent(fDTDValidator);  fDatatypeValidatorFactory=DTDDVFactory.getInstance();  fProperties.put(DATATYPE_VALIDATOR_FACTORY,fDatatypeValidatorFactory);  fValidationManager=new ValidationManager();  fProperties.put(VALIDATION_MANAGER,fValidationManager);  fVersionDetector=new XMLVersionDetector();  if (fErrorReporter.getMessageFormatter(XMLMessageFormatter.XML_DOMAIN) == null) {    XMLMessageFormatter xmft=new XMLMessageFormatter();    fErrorReporter.putMessageFormatter(XMLMessageFormatter.XML_DOMAIN,xmft);    fErrorReporter.putMessageFormatter(XMLMessageFormatter.XMLNS_DOMAIN,xmft);  }  try {    setLocale(Locale.getDefault());  } catch (  XNIException e) {  }  fConfigUpdated=false;}  }
class C{  protected String convertKey(String key){  return key.toLowerCase(this.locale);}  }
class C{  Surround(final int offset,final int length,final String prefix,final String suffix){  super(offset,length,prefix);  this.suffix=suffix;}  }
class C{  public void reset(){  removeAllNotifications();  setWakeupTime(sleepTime);}  }
class C{  public FloatBuffer duplicate(){  FloatBuffer buf=new FloatBuffer(byteBuffer.duplicate());  buf.limit=limit;  buf.position=position;  buf.mark=mark;  return buf;}  }
class C{  private List<MBrowseField> initBrowserTable(){  List<MBrowseField> list=initBrowserData();  if (list.size() == 0) {    ADialog.error(getWindowNo(),m_frame,"Error","No Browse Fields");    log.log(Level.SEVERE,"No Browser for view=" + m_View.getName());    return null;  }  log.finest("Browse Fields #" + list.size());  detail=new BrowseTable(this);  centerPanel.setViewportView(detail);  return list;}  }
class C{  public static boolean isXML11ValidLiteral(int c){  return ((c < 0x10000 && ((XML11CHARS[c] & MASK_XML11_VALID) != 0 && (XML11CHARS[c] & MASK_XML11_CONTROL) == 0)) || (0x10000 <= c && c <= 0x10FFFF));}  }
class C{  public void destroy(){  if (exprDeclaredService != null) {    exprDeclaredService.destroy();  }  if (dataFlowService != null) {    dataFlowService.destroy();  }  if (variableService != null) {    variableService.destroy();  }  if (metricsReportingService != null) {    metricsReportingService.destroy();  }  if (threadingService != null) {    threadingService.destroy();  }  if (statementLifecycleSvc != null) {    statementLifecycleSvc.destroy();  }  if (filterService != null) {    filterService.destroy();  }  if (schedulingService != null) {    schedulingService.destroy();  }  if (schedulingMgmtService != null) {    schedulingMgmtService.destroy();  }  if (streamFactoryService != null) {    streamFactoryService.destroy();  }  if (namedWindowMgmtService != null) {    namedWindowMgmtService.destroy();  }  if (namedWindowDispatchService != null) {    namedWindowDispatchService.destroy();  }  if (engineLevelExtensionServicesContext != null) {    engineLevelExtensionServicesContext.destroy();  }  if (statementIsolationService != null) {    statementIsolationService.destroy();  }  if (deploymentStateService != null) {    deploymentStateService.destroy();  }}  }
class C{  public FolderTokenRelFld findByName(String fldName) throws Exception {  int i;  FolderTokenRelFld fld=null;  boolean find=false;  for (i=0; i < count(); i++) {    fld=get(i);    if (fld.getName().equals(fldName)) {      find=true;      break;    }  }  if (!find) {    throw new IeciTdException(FolderBaseError.EC_NOT_FOUND,FolderBaseError.EM_NOT_FOUND);  }  return fld;}  }
class C{  public void writeProperty(String propertyName,VCardDataType dataType,JCardValue value) throws IOException {  writeProperty(null,propertyName,new VCardParameters(),dataType,value);}  }
class C{  public SignatureEvaluator(int suggestedBufferSize,boolean humanReadable){  this(suggestedBufferSize,humanReadable,new SignatureRules());}  }
class C{  public void stopSpinning(){  isSpinning=false;  mProgress=0.0f;  mTargetProgress=0.0f;  invalidate();}  }
class C{  public void refresh(){  setUrl(getUrl());}  }
class C{  public Adapter createEObjectAdapter(){  return null;}  }
class C{  public RouteFindingProblem(MapNode from,MapNode to,MapWayFilter filter,boolean ignoreOneWays){  this(from,to,filter,ignoreOneWays,new OsmDistanceStepCostFunction());}  }
class C{  protected String hash(Field f){  requireNonNull(f);  final String prefix="hash = 31 * hash + (";  final String suffix=".hashCode(this." + f.getName() + "));";switch (f.getType().getTypeName()) {case "byte":    return prefix + "Byte" + suffix;case "short":  return prefix + "Short" + suffix;case "int":return prefix + "Integer" + suffix;case "long":return prefix + "Long" + suffix;case "float":return prefix + "Float" + suffix;case "double":return prefix + "Double" + suffix;case "boolean":return prefix + "Boolean" + suffix;case "char":return prefix + "Character" + suffix;default :return prefix + "Objects" + suffix;}}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + n+ ","+ p+ ")";}  }
class C{  public static int minIndex(double[] doubles){  double minimum=0;  int minIndex=0;  for (int i=0; i < doubles.length; i++) {    if ((i == 0) || (doubles[i] < minimum)) {      minIndex=i;      minimum=doubles[i];    }  }  return minIndex;}  }
class C{  public boolean isTaxProrated(){  Object oo=get_Value(COLUMNNAME_IsTaxProrated);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public X509Principal(String dirName){  super(dirName);}  }
class C{  public void dispose(){  m_database.removeListener(m_internalListener);  disposedLoadedObjects();}  }
class C{  public Object remove(Object key){  return vmproxyhash.remove(key);}  }
class C{  public static double varianceSampleMean(double[] x){  return variance(x) / (double)x.length;}  }
class C{  public String apply(){  return OUTCOME_SUCCESS;}  }
class C{  public int length(){  return size();}  }
class C{  public StunDatagramPacketFilter(){  this(null);}  }
class C{  public static boolean equals(char[] array1,char[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList newList;  Element newElement;  String prefix;  String lname;  doc=(Document)load("staffNS",false);  newList=doc.getElementsByTagNameNS("*","employee");  assertSize("employeeCount",5,newList);  newElement=(Element)newList.item(3);  prefix=newElement.getPrefix();  assertEquals("prefix","emp",prefix);  lname=newElement.getLocalName();  assertEquals("lname","employee",lname);}  }
class C{  public static void check(int val){  if (val < 0 || val > 0xFFFF)   throw new InvalidTypeException(val);}  }
class C{  public boolean isDisplayValues(){  return mDisplayValues;}  }
class C{  public static StyledText createStyledText(Composite parent,int style,int hspan,int width,int height,int fill){  StyledText t=new StyledText(parent,style);  t.setFont(parent.getFont());  GridData gd=new GridData(fill);  gd.horizontalSpan=hspan;  gd.widthHint=width;  gd.heightHint=height;  t.setLayoutData(gd);  return t;}  }
class C{  public static boolean isDownwardAxisOfMany(int axis){  return ((Axis.DESCENDANTORSELF == axis) || (Axis.DESCENDANT == axis) || (Axis.FOLLOWING == axis)|| (Axis.PRECEDING == axis));}  }
class C{  protected void logErrorDisconnect(OFErrorMsg error){  logError(error);  channel.disconnect();}  }
class C{  public final void testValidateSucceeds(){  MinLengthValidator minLengthValidator=new MinLengthValidator("foo",2);  assertTrue(minLengthValidator.validate("12"));}  }
class C{  public Instrumenter(){  super();  frequency=100;  customCollectors=new ArrayList<Collector>();}  }
class C{  private void disableService(){  managers.remove(connection);  this.connection.removePacketListener(this.initiationListener);  this.connection.removePacketListener(this.dataListener);  this.connection.removePacketListener(this.closeListener);  this.initiationListener.shutdown();  this.userListeners.clear();  this.allRequestListeners.clear();  this.sessions.clear();  this.ignoredBytestreamRequests.clear();}  }
class C{  public boolean isEnforcePriceLimit(){  Object oo=get_Value(COLUMNNAME_EnforcePriceLimit);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private boolean canReassignAudioFocusFromQchat(int streamType,String clientId){  if (!mFocusStack.isEmpty() && mFocusStack.peek().mClientId.contains(CLIENT_ID_QCHAT) && (clientId.contains(CLIENT_ID_QCHAT) || (streamType == AudioManager.STREAM_MUSIC))) {    return false;  }  return true;}  }
class C{  private Converter createConverter(FaceletContext ctx){  if (owner.getConverterId(ctx) == null) {    throw new TagException(owner.getTag(),"Default behavior invoked of requiring a converter-id passed in the constructor, must override ConvertHandler(ConverterConfig)");  }  return ctx.getFacesContext().getApplication().createConverter(owner.getConverterId(ctx));}  }
class C{  public void addSupportedVendorModel(VendorModel param){  if (localSupportedVendorModel == null) {    localSupportedVendorModel=new VendorModel[]{};  }  localSupportedVendorModelTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localSupportedVendorModel);  list.add(param);  this.localSupportedVendorModel=(VendorModel[])list.toArray(new VendorModel[list.size()]);}  }
class C{  void validateNumber(int i,int ofs,String name,int min,int max) throws ParseException {  if (i < min || i > max) {    throwInvalid(name,ofs);  }}  }
class C{  public BulkRequestBuilder add(byte[] data,int from,int length) throws Exception {  request.add(data,from,length,null,null);  return this;}  }
class C{  public final void tryClaimDraw(String str){  if (str.startsWith("draw ")) {    String drawCmd=str.substring(str.indexOf(" ") + 1);    handleDrawCmd(drawCmd,false);  }}  }
class C{  public static Wildcards of(Wildcards.Flag setFlag){  return Wildcards.of(setFlag.wildcard(0));}  }
class C{  @Override public void onSurfaceChanged(GL10 unused,int width,int height){  if (EXTRA_CHECK)   Util.checkGlError("onSurfaceChanged start");  float arenaRatio=GameState.ARENA_HEIGHT / GameState.ARENA_WIDTH;  int x, y, viewWidth, viewHeight;  if (height > (int)(width * arenaRatio)) {    viewWidth=width;    viewHeight=(int)(width * arenaRatio);  } else {    viewHeight=height;    viewWidth=(int)(height / arenaRatio);  }  x=(width - viewWidth) / 2;  y=(height - viewHeight) / 2;  Log.d(TAG,"onSurfaceChanged w=" + width + " h="+ height);  Log.d(TAG," --> x=" + x + " y="+ y+ " gw="+ viewWidth+ " gh="+ viewHeight);  GLES20.glViewport(x,y,viewWidth,viewHeight);  mViewportWidth=viewWidth;  mViewportHeight=viewHeight;  mViewportXoff=x;  mViewportYoff=y;  Matrix.orthoM(mProjectionMatrix,0,0,GameState.ARENA_WIDTH,0,GameState.ARENA_HEIGHT,-1,1);  mGameState.surfaceChanged();  if (EXTRA_CHECK)   Util.checkGlError("onSurfaceChanged end");}  }
class C{  public PrivateKeyPbeNotSupportedException(String unsupportedPbe,String message,Throwable causeThrowable){  super(message,causeThrowable);  this.unsupportedPbe=unsupportedPbe;}  }
class C{  public MicroPipelineShutdownResponse shutdown(final String pipelineId) throws RemoteClientConnectionFailedException {  if (StringUtils.isBlank(pipelineId))   return new MicroPipelineShutdownResponse(pipelineId,MicroPipelineShutdownState.PIPELINE_ID_MISSING,"Missing required pipeline identifier");  StringBuffer url=new StringBuffer(this.processingNodeServiceBaseUrl).append("/pipelines/").append(pipelineId);  if (logger.isDebugEnabled())   logger.debug("Deleting pipeline [id=" + pipelineId + "] on processing node "+ url.toString());  try {    final WebTarget webTarget=this.restClient.target(url.toString());    return webTarget.request(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON).delete(MicroPipelineShutdownResponse.class);  } catch (  Exception e) {    throw new RemoteClientConnectionFailedException("Failed to establish a connection with the remote resource manager [url=" + url.toString() + "]. Error: "+ e.getMessage());  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("C_BPartner_ID"))     p_C_BPartner_ID=((BigDecimal)para[i].getParameter()).intValue(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  private void applyKitKatTranslucency(){  if (Build.VERSION.SDK_INT == Build.VERSION_CODES.KITKAT) {    TypedValue tv=new TypedValue();    int actionBarHeight=0;    if (getActivity().getTheme().resolveAttribute(android.R.attr.actionBarSize,tv,true)) {      actionBarHeight=TypedValue.complexToDimensionPixelSize(tv.data,getResources().getDisplayMetrics());    }    mListView.setBackgroundColor(0xFFEEEEEE);    mRootView.setPadding(0,actionBarHeight + mApp.getStatusBarHeight(mContext),0,0);    mListView.setPadding(10,0,10,mApp.getNavigationBarHeight(mContext));    mListView.setClipToPadding(false);    getActivity().getWindow().setBackgroundDrawable(UIElementsHelper.getGeneralActionBarBackground(mContext));  }}  }
class C{  private void runAcceptLoop(){  while (!this.shuttingDown) {    try {      connectionPermits.acquire();    } catch (    InterruptedException consumed) {      continue;    }    Socket socket=null;    try {      socket=this.serverSocket.accept();    } catch (    IOException e) {      connectionPermits.release();      if (!this.shuttingDown) {        log.error("Error accepting connection",e);        try {          Thread.sleep(1000);        } catch (        InterruptedException consumed) {        }      }      continue;    }    Session session=null;    try {      session=new Session(server,this,socket);    } catch (    IOException e) {      connectionPermits.release();      log.error("Error while starting a connection",e);      try {        socket.close();      } catch (      IOException e1) {        log.debug("Cannot close socket after exception",e1);      }      continue;    }synchronized (this) {      this.sessionThreads.add(session);    }    try {      server.getExecutorService().execute(session);    } catch (    RejectedExecutionException e) {      connectionPermits.release();synchronized (this) {        this.sessionThreads.remove(session);      }      log.error("Error while executing a session",e);      try {        socket.close();      } catch (      IOException e1) {        log.debug("Cannot close socket after exception",e1);      }      continue;    }  }}  }
class C{  private void startSubscriptionForMonitoring(Set<String> activeProvidersChangeSet){  for (  String smisProviderUri : activeProvidersChangeSet) {    boolean isSuccess=_connectionFactory.subscribeSMIProviderConnection(smisProviderUri);    if (isSuccess) {      ACTIVE_SMIS_PROVIDERS_CACHE.add(smisProviderUri);      _logger.info("Created new subscription for the active SMI-S Provider :{}",smisProviderUri);    } else {      _logger.error("Subscription to the active SMIS provider {} is failed. " + "Controller will try to make new subscription in the next scheduled cycle",smisProviderUri);    }  }}  }
class C{  public static boolean canExternalFrame(List constraints){  for (Iterator iter=constraints.iterator(); iter.hasNext(); ) {    DockConstraint dc=(DockConstraint)iter.next();    if (!dc.canExternalFrame())     return false;  }  return true;}  }
class C{  public void ignorableWhitespace(XMLString text,Augmentations augs) throws XNIException {  try {    if (fDocumentHandler != null) {      fDocumentHandler.ignorableWhitespace(text.ch,text.offset,text.length);    }    if (fContentHandler != null) {      fContentHandler.ignorableWhitespace(text.ch,text.offset,text.length);    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  @Override public synchronized void close(boolean writeIDX){  shrinkWithGapsAtEnd();  super.close(writeIDX);}  }
class C{  public boolean isUnused(){  return (numEntries < 1) && waitingThreads.isEmpty();}  }
class C{  public long index(){  return index;}  }
class C{  public String suffix(){  return mSuffix;}  }
class C{  private static String format(final int number){  String value=String.valueOf(number);  if (value.length() == 1) {    value='0' + value;  }  return value;}  }
class C{  public static org.oscm.vo.VODiscount convertToApi(org.oscm.internal.vo.VODiscount oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VODiscount newVO=new org.oscm.vo.VODiscount();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setEndTime(oldVO.getEndTime());  newVO.setStartTime(oldVO.getStartTime());  newVO.setValue(oldVO.getValue());  return newVO;}  }
class C{  boolean casValue(Object cmp,Object val){  return UNSAFE.compareAndSwapObject(this,valueOffset,cmp,val);}  }
class C{  private void restore(){  Frame frame=getFrame();  if (frame == null) {    return;  }  if ((state & Frame.ICONIFIED) != 0) {    frame.setExtendedState(state & ~Frame.ICONIFIED);  } else {    frame.setExtendedState(state & ~Frame.MAXIMIZED_BOTH);  }}  }
class C{  protected void throwParseException(ParseException e) throws ParseException {  if (locator != null) {    String elementLocation="";    if (curHandler != null) {      elementLocation+=", element " + curHandler.qName;    }    String location="[Line " + String.valueOf(locator.getLineNumber()) + ", Column "+ String.valueOf(locator.getColumnNumber())+ elementLocation+ "] ";    LogUtils.logException(logger,Level.FINE,location,e);    throw new ParseException(location + e.getMessage(),e);  } else {    LogUtils.logException(logger,Level.FINE,null,e);    throw e;  }}  }
class C{  private void accomodateIndex(DiscreteVariable variable,int index){  if (!variable.isAccommodateNewCategories()) {    throw new IllegalArgumentException("This variable is not set " + "to accomodate new categories.");  }  if (index >= variable.getNumCategories()) {    adjustCategories(variable,index + 1);  }}  }
class C{  @Interruptible private static void finishBooting(){  RVMThread.getCurrentThread().pthread_id=sysCall.sysGetThreadId();  RVMThread.getCurrentThread().priority_handle=sysCall.sysGetThreadPriorityHandle();  RVMThread.availableProcessors=SysCall.sysCall.sysNumProcessors();  Services.boot();  if (verboseBoot >= 1) {    VM.sysWriteln("Setting up memory manager: bootrecord = ",Magic.objectAsAddress(BootRecord.the_boot_record));  }  MemoryManager.boot(BootRecord.the_boot_record);  if (verboseBoot >= 1)   VM.sysWriteln("Initializing baseline compiler options to defaults");  BaselineCompiler.initOptions();  if (verboseBoot >= 1)   VM.sysWriteln("Fetching command-line arguments");  CommandLineArgs.fetchCommandLineArguments();  if (verboseBoot >= 1)   VM.sysWriteln("Early stage processing of command line");  CommandLineArgs.earlyProcessCommandLineArguments();  TraceEngine.engine.earlyStageBooting();  if (verboseBoot >= 1)   VM.sysWriteln("Collector processing rest of boot options");  MemoryManager.postBoot();  String bootstrapClasses=CommandLineArgs.getBootstrapClasses();  if (verboseBoot >= 1)   VM.sysWriteln("Initializing bootstrap class loader: ",bootstrapClasses);  Callbacks.addClassLoadedMonitor(JMXSupport.CLASS_LOADING_JMX_SUPPORT);  RVMClassLoader.boot();  BootstrapClassLoader.boot(bootstrapClasses);  if (verboseBoot >= 1)   VM.sysWriteln("Running various class initializers");  if (VM.BuildForGnuClasspath) {    runClassInitializer("java.util.WeakHashMap");  }  runClassInitializer("org.jikesrvm.classloader.Atom$InternedStrings");  if (VM.BuildForGnuClasspath) {    runClassInitializer("gnu.classpath.SystemProperties");    runClassInitializer("java.lang.Throwable$StaticData");  }  runClassInitializer("java.lang.Runtime");  runClassInitializer("java.lang.System");  runClassInitializer("sun.misc.Unsafe");  runClassInitializer("java.lang.Character");  runClassInitializer("org.jikesrvm.classloader.TypeReferenceVector");  runClassInitializer("org.jikesrvm.classloader.MethodVector");  runClassInitializer("org.jikesrvm.classloader.FieldVector");  if (VM.BuildForGnuClasspath) {    runClassInitializer("java.lang.ThreadGroup");  }  VM.safeToAllocateJavaThread=true;  if (VM.BuildForGnuClasspath) {    runClassInitializer("java.lang.ThreadLocal");    runClassInitializer("java.lang.ThreadLocalMap");  }  if (VM.BuildForGnuClasspath) {    runClassInitializer("java.security.VMAccessController");  }  if (VM.BuildForHarmony) {    runClassInitializer("java.security.AccessController");  }  if (verboseBoot >= 1)   VM.sysWriteln("Booting Lock");  Lock.boot();  if (verboseBoot >= 1)   VM.sysWriteln("Booting scheduler");  RVMThread.boot();  DynamicLibrary.boot();  if (verboseBoot >= 1)   VM.sysWriteln("Enabling GC");  MemoryManager.enableCollection();  if (verboseBoot >= 1)   VM.sysWriteln("Setting up boot thread");  RVMThread.getCurrentThread().setupBootJavaThread();  org.jikesrvm.jni.JNIEnvironment.boot();  if (verboseBoot >= 1)   VM.sysWriteln("Initializing JNI for boot thread");  RVMThread.getCurrentThread().initializeJNIEnv();  if (verboseBoot >= 1)   VM.sysWriteln("JNI initialized for boot thread");  if (VM.BuildForHarmony) {    System.loadLibrary("hyluni");    System.loadLibrary("hythr");    System.loadLibrary("hyniochar");  }  runClassInitializer("java.io.File");  runClassInitializer("java.lang.String");  if (VM.BuildForGnuClasspath) {    runClassInitializer("gnu.java.security.provider.DefaultPolicy");  }  runClassInitializer("java.net.URL");  if (VM.BuildForGnuClasspath) {    runClassInitializer("java.net.URLClassLoader");  }  runClassInitializer("java.net.URLConnection");  if (VM.BuildForGnuClasspath) {    runClassInitializer("gnu.java.net.protocol.jar.Connection$JarFileCache");    runClassInitializer("java.lang.ClassLoader$StaticData");  }  runClassInitializer("java.lang.Class$StaticData");  runClassInitializer("java.nio.charset.Charset");  if (VM.BuildForGnuClasspath) {    runClassInitializer("java.nio.charset.CharsetEncoder");  }  runClassInitializer("java.nio.charset.CoderResult");  if (VM.BuildForHarmony) {    runClassInitializer("org.apache.harmony.niochar.CharsetProviderImpl");  }  runClassInitializer("java.io.PrintWriter");  System.setProperty("line.separator","\n");  runClassInitializer("java.io.PrintStream");  runClassInitializer("java.util.Locale");  runClassInitializer("java.util.ResourceBundle");  runClassInitializer("java.util.zip.CRC32");  if (VM.BuildForHarmony) {    System.loadLibrary("hyarchive");  }  runClassInitializer("java.util.zip.Inflater");  if (VM.BuildForGnuClasspath) {    runClassInitializer("java.util.zip.DeflaterHuffman");    runClassInitializer("java.util.zip.InflaterDynHeader");    runClassInitializer("java.util.zip.InflaterHuffmanTree");  }  if (verboseBoot >= 1)   VM.sysWriteln("Running late class initializers");  if (VM.BuildForGnuClasspath) {    System.loadLibrary("javaio");  }  runClassInitializer("java.lang.Math");  runClassInitializer("java.util.TreeMap");  if (VM.BuildForGnuClasspath) {    runClassInitializer("gnu.java.nio.VMChannel");    runClassInitializer("gnu.java.nio.FileChannelImpl");  }  runClassInitializer("java.io.FileDescriptor");  runClassInitializer("java.io.FilePermission");  runClassInitializer("java.util.jar.JarFile");  if (VM.BuildForGnuClasspath) {    runClassInitializer("java.util.zip.ZipFile$PartialInputStream");  }  runClassInitializer("java.util.zip.ZipFile");  if (VM.BuildForHarmony) {    runClassInitializer("java.util.Hashtable");    runClassInitializer("java.util.jar.Manifest");    runClassInitializer("java.util.jar.Attributes$Name");    runClassInitializer("java.util.BitSet");    runClassInitializer("java.util.regex.Matcher");    runClassInitializer("java.util.regex.Pattern");    runClassInitializer("org.apache.harmony.luni.internal.net.www.protocol.jar.JarURLConnection");    runClassInitializer("org.apache.harmony.luni.platform.OSMemory");    runClassInitializer("org.apache.harmony.luni.platform.Platform");    runClassInitializer("org.apache.harmony.luni.platform.AbstractMemorySpy");    runClassInitializer("org.apache.harmony.luni.platform.PlatformAddress");    runClassInitializer("org.apache.harmony.nio.internal.FileChannelImpl");    runClassInitializer("com.ibm.icu.util.ULocale");    runClassInitializer("java.io.ObjectStreamClass");    runClassInitializer("java.io.ObjectStreamClass$OSCThreadLocalCache");    runClassInitializer("java.io.ObjectInputStream");    runClassInitializer("java.security.MessageDigest");  }  if (VM.BuildForGnuClasspath) {    runClassInitializer("java.lang.VMDouble");  }  runClassInitializer("java.util.PropertyPermission");  runClassInitializer("org.jikesrvm.classloader.RVMAnnotation");  runClassInitializer("java.lang.annotation.RetentionPolicy");  runClassInitializer("java.lang.annotation.ElementType");  runClassInitializer("java.lang.Thread$State");  if (VM.BuildForGnuClasspath) {    runClassInitializer("gnu.java.nio.charset.EncodingHelper");    runClassInitializer("java.lang.VMClassLoader");  }  if (verboseBoot >= 1)   VM.sysWriteln("initializing standard streams");  FileSystem.initializeStandardStreams();  if (verboseBoot >= 1)   VM.sysWriteln("VM is now fully booted");  VM.fullyBooted=true;  MemoryManager.fullyBootedVM();  org.jikesrvm.mm.mminterface.JMXSupport.fullyBootedVM();  BaselineCompiler.fullyBootedVM();  TraceEngine.engine.fullyBootedVM();  runClassInitializer("java.util.logging.Level");  if (VM.BuildForGnuClasspath) {    runClassInitializer("java.lang.reflect.Proxy");    runClassInitializer("java.lang.reflect.Proxy$ProxySignature");  }  runClassInitializer("java.util.logging.Logger");  if (VM.BuildForHarmony) {    Entrypoints.luni1.setObjectValueUnchecked(null,null);    Entrypoints.luni2.setObjectValueUnchecked(null,null);    Entrypoints.luni3.setObjectValueUnchecked(null,null);    Entrypoints.luni4.setObjectValueUnchecked(null,null);    Entrypoints.luni5.setObjectValueUnchecked(null,null);    Entrypoints.luni6.setObjectValueUnchecked(null,null);    runClassInitializer("org.apache.harmony.luni.util.Msg");    runClassInitializer("org.apache.harmony.archive.internal.nls.Messages");    runClassInitializer("org.apache.harmony.luni.internal.nls.Messages");    runClassInitializer("org.apache.harmony.nio.internal.nls.Messages");    runClassInitializer("org.apache.harmony.niochar.internal.nls.Messages");    runClassInitializer("java.util.logging.LogManager");  }  if (verboseBoot >= 1)   VM.sysWriteln("Initializing runtime compiler");  RuntimeCompiler.boot();  if (verboseBoot >= 1)   VM.sysWriteln("Late stage processing of command line");  String[] applicationArguments=CommandLineArgs.lateProcessCommandLineArguments();  if (VM.verboseClassLoading || verboseBoot >= 1)   VM.sysWrite("[VM booted]\n");  if (VM.BuildForAdaptiveSystem) {    if (verboseBoot >= 1)     VM.sysWriteln("Initializing adaptive system");    Controller.boot();  }  if (verboseBoot >= 1)   VM.sysWriteln("Extracting name of class to execute");  if (applicationArguments.length == 0) {    pleaseSpecifyAClass();  }  if (applicationArguments.length > 0 && !TypeDescriptorParsing.isJavaClassName(applicationArguments[0])) {    VM.sysWrite("vm: \"");    VM.sysWrite(applicationArguments[0]);    VM.sysWrite("\" is not a legal Java class name.\n");    pleaseSpecifyAClass();  }  if (applicationArguments.length > 0 && applicationArguments[0].startsWith("-X")) {    VM.sysWrite("vm: \"");    VM.sysWrite(applicationArguments[0]);    VM.sysWrite("\" is not a recognized Jikes RVM command line argument.\n");    VM.sysExit(EXIT_STATUS_BOGUS_COMMAND_LINE_ARG);  }  if (verboseBoot >= 1)   VM.sysWriteln("Initializing Application Class Loader");  RVMClassLoader.getApplicationClassLoader();  RVMClassLoader.declareApplicationClassLoaderIsReady();  if (verboseBoot >= 1) {    VM.sysWriteln("Turning back on security checks.  Letting people see the ApplicationClassLoader.");  }  if (VM.BuildForGnuClasspath) {    runClassInitializer("java.lang.ClassLoader$StaticData");  }  if (VM.BuildForAdaptiveSystem) {    CompilerAdvice.postBoot();  }  if (VM.AlignmentChecking) {    SysCall.sysCall.sysEnableAlignmentChecking();  }  Time.boot();  Configuration.setupPropertiesForUnitTesting();  if (verboseBoot >= 2)   VM.sysWriteln("Creating main thread");  if (verboseBoot >= 1)   VM.sysWriteln("Constructing mainThread");  mainThread=new MainThread(applicationArguments);  if (verboseBoot >= 1)   VM.sysWriteln("Starting main thread");  mainThread.start();  if (VM.TraceThreads)   RVMThread.trace("VM.boot","completed - terminating");  if (verboseBoot >= 2) {    VM.sysWriteln("Boot sequence completed; finishing boot thread");  }  RVMThread.getCurrentThread().terminate();  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:02.664 -0500",hash_original_method="8AD6127ED19B3CFA328D7ED80A755AFB",hash_generated_method="10F869287E42A17356B67A9DA6374214") public void removePubGruuParam(){  if (parameters != null)   parameters.delete(ParameterNames.PUB_GRUU);}  }
class C{  private Response loadInternal(final Request request,CacheStrategy cacheStrategy,final int maxFileSize,final BlacklistType blacklistType,ClientIdentification.Agent agent) throws IOException {  final DigestURL url=request.url();  if (url.isFile() || url.isSMB())   cacheStrategy=CacheStrategy.NOCACHE;  final String protocol=url.getProtocol();  final String host=url.getHost();  final CrawlProfile crawlProfile=request.profileHandle() == null ? null : this.sb.crawler.get(UTF8.getBytes(request.profileHandle()));  if (blacklistType != null && host != null && Switchboard.urlBlacklist.isListed(blacklistType,host.toLowerCase(),url.getFile())) {    this.sb.crawlQueues.errorURL.push(request.url(),request.depth(),crawlProfile,FailCategory.FINAL_LOAD_CONTEXT,"url in blacklist",-1);    throw new IOException("DISPATCHER Rejecting URL '" + request.url().toString() + "'. URL is in blacklist.$");  }  Response response=loadFromCache(request,cacheStrategy,agent,url,crawlProfile);  if (response != null) {    return response;  }  if (cacheStrategy == CacheStrategy.CACHEONLY) {    throw new IOException("cache only strategy");  }  checkAccessTime(agent,url);  if (host != null) {    if (accessTime.size() > accessTimeMaxsize)     accessTime.clear();    accessTime.put(host,System.currentTimeMillis());  }  if (protocol.equals("http") || protocol.equals("https")) {    response=this.httpLoader.load(request,crawlProfile,maxFileSize,blacklistType,agent);  } else   if (protocol.equals("ftp")) {    response=this.ftpLoader.load(request,true);  } else   if (protocol.equals("smb")) {    response=this.smbLoader.load(request,true);  } else   if (protocol.equals("file")) {    response=this.fileLoader.load(request,true);  } else {    throw new IOException("Unsupported protocol '" + protocol + "' in url "+ url);  }  if (response == null) {    throw new IOException("no response (NULL) for url " + url);  }  if (response.getContent() == null) {    throw new IOException("empty response (code " + response.getStatus() + ") for url "+ url.toNormalform(true));  }  if (crawlProfile == null || !crawlProfile.storeHTCache()) {    return response;  }  final String storeError=response.shallStoreCacheForCrawler();  if (storeError == null) {    try {      Cache.store(url,response.getResponseHeader(),response.getContent());    } catch (    final IOException e) {      LoaderDispatcher.log.warn("cannot write " + response.url() + " to Cache (3): "+ e.getMessage(),e);    }  } else {    LoaderDispatcher.log.warn("cannot write " + response.url() + " to Cache (4): "+ storeError);  }  return response;}  }
class C{  public static long decodeLong(InputStream stream) throws IOException {  long result=0;  int shift=0;  int b;  do {    b=stream.read();    if (b < 0) {      if (shift == 0) {        throw new EOFException();      } else {        throw new IOException("varint not terminated");      }    }    long bits=b & 0x7F;    if (shift >= 64 || (shift == 63 && bits > 1)) {      throw new IOException("varint too long");    }    result|=bits << shift;    shift+=7;  } while ((b & 0x80) != 0);  return result;}  }
class C{  public boolean containsKey(Object key){  if (key == null)   return false;  return m_keys.contains(key);}  }
class C{  @PreAuthorize("hasAnyRole('ROLE_USER_MANAGER','ROLE_DATA_MANAGER')") @Transactional(readOnly=true,propagation=Propagation.REQUIRED) public int countByFilter(String filter){  return userDao.countNotDeletedByFilter(filter);}  }
class C{  public BlobsReport(){  this(new Mat(),Collections.emptyList());}  }
class C{  public void addAll(Properties properties){  this.properties.putAll(properties);}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("CallInfoParser.parse");  CallInfoList list=new CallInfoList();  try {    headerName(TokenTypes.CALL_INFO);    while (lexer.lookAhead(0) != '\n') {      CallInfo callInfo=new CallInfo();      callInfo.setHeaderName(SIPHeaderNames.CALL_INFO);      this.lexer.SPorHT();      this.lexer.match('<');      URLParser urlParser=new URLParser((Lexer)this.lexer);      GenericURI uri=urlParser.uriReference(true);      callInfo.setInfo(uri);      this.lexer.match('>');      this.lexer.SPorHT();      super.parse(callInfo);      list.add(callInfo);      while (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();        callInfo=new CallInfo();        this.lexer.SPorHT();        this.lexer.match('<');        urlParser=new URLParser((Lexer)this.lexer);        uri=urlParser.uriReference(true);        callInfo.setInfo(uri);        this.lexer.match('>');        this.lexer.SPorHT();        super.parse(callInfo);        list.add(callInfo);      }    }    return list;  }  finally {    if (debug)     dbg_leave("CallInfoParser.parse");  }}  }
class C{  public Integer toInteger(){  return Integer.valueOf(intValue());}  }
