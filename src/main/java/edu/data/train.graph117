class C{  public CacheServerImpl(AdminDistributedSystemImpl system,CacheVmConfig config) throws AdminException {  super(system,config);  this.config=(CacheServerConfigImpl)config;  this.config.setManagedEntity(this);}  }
class C{  public static int countOccurrencesOf(String str,String sub){  if (str == null || sub == null || str.length() == 0 || sub.length() == 0) {    return 0;  }  int count=0;  int pos=0;  int idx;  while ((idx=str.indexOf(sub,pos)) != -1) {    ++count;    pos=idx + sub.length();  }  return count;}  }
class C{  private void init(){  Border redBorder=BorderFactory.createLineBorder(Color.RED);  Border exBorder=BorderFactory.createTitledBorder(redBorder,"Excitatory");  Border blueBorder=BorderFactory.createLineBorder(Color.BLUE);  Border inBorder=BorderFactory.createTitledBorder(blueBorder,"Inhibitory");  BoxLayout bxLayout=new BoxLayout(mainPanel,BoxLayout.X_AXIS);  mainPanel.setLayout(bxLayout);  if (creationPanel) {    Box inBox=Box.createVerticalBox();    inBox.setAlignmentY(Component.TOP_ALIGNMENT);    inBox.add(inhibitoryInfoPanel);    inBox.add(Box.createVerticalGlue());    inBox.setBorder(inBorder);    mainPanel.add(inBox);  } else {    inApplyPanel=ApplyPanel.createApplyPanel(inhibitoryInfoPanel);    inApplyPanel.setBorder(inBorder);    mainPanel.add(inApplyPanel);  }  mainPanel.add(Box.createHorizontalGlue(),bxLayout);  mainPanel.add(Box.createHorizontalStrut(10),bxLayout);  if (creationPanel) {    Box exBox=Box.createVerticalBox();    exBox.setAlignmentY(Component.TOP_ALIGNMENT);    exBox.add(excitatoryInfoPanel);    exBox.add(Box.createVerticalGlue());    exBox.setBorder(exBorder);    mainPanel.add(exBox);  } else {    exApplyPanel=ApplyPanel.createApplyPanel(excitatoryInfoPanel);    exApplyPanel.setBorder(exBorder);    mainPanel.add(exApplyPanel);  }  this.add(mainPanel);}  }
class C{  public JsonValue(List<JsonValue> array){  this.array=array;  value=null;  object=null;  isNull=(array == null);}  }
class C{  private Notification.Builder createInProgressNotificationBuilder(){  return new Notification.Builder(this).setSmallIcon(R.drawable.ic_notification).setWhen(System.currentTimeMillis()).setOngoing(true).setContentTitle(this.getText(R.string.app_name));}  }
class C{  public Signature(final byte[] r,final byte[] s){  if (32 != r.length || 32 != s.length) {    throw new IllegalArgumentException("binary signature representation of r and s must both have 32 bytes length");  }  this.r=r;  this.s=s;}  }
class C{  public static double pixelsToPoints(int pix,int dpi){  return pixelsToInch(pix,dpi) * POINT_POSTSCRIPT;}  }
class C{  public XhtmlDocument appendTitle(String value){  title.addElement(value);  return (this);}  }
class C{  public static boolean isValid(Date expirationDate){  Date currentDate=new Date();  String formattedDate=dateFormat.format(currentDate);  currentDate=convertDate(formattedDate);  boolean isExpired=currentDate.after(expirationDate);  boolean isEqual=currentDate.equals(expirationDate);  if (isExpired == true || isEqual == true) {    return true;  }  return false;}  }
class C{  public void addBitmapToCache(String data,Bitmap bitmap){  if (data == null || bitmap == null) {    return;  }synchronized (mMemoryCache) {    if (mMemoryCache.get(data) == null) {      LOGD(TAG,"Memory cache put - " + data);      mMemoryCache.put(data,bitmap);    }  }}  }
class C{  public ConcatenatedVec(Vec... vecs){  this(Arrays.asList(vecs));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.182 -0500",hash_original_method="85C29845972840A2A78B8F138670556A",hash_generated_method="CD4E9DC764BA294C9CF415C093942BB3") public boolean clipRect(Rect rect){  addTaint(rect.getTaint());  return getTaintBoolean();}  }
class C{  public static <K,V>void writeMap(BinaryRawWriterEx writer,Map<K,V> map){  assert map != null;  writeMap(writer,map,null);}  }
class C{  public long writtenBits(){  return writtenBits;}  }
class C{  private static void queryTransactionEntry(FinanceService service,String entryUrl) throws IOException, MalformedURLException, ServiceException {  System.out.println("Requesting Entry at location: " + entryUrl);  TransactionEntry transactionEntry=service.getEntry(new URL(entryUrl),TransactionEntry.class);  printTransactionEntry(transactionEntry);}  }
class C{  public JSONWriter value(Object object) throws JSONException {  return this.append(JSONObject.valueToString(object));}  }
class C{  public Options addOption(String opt,boolean hasArg,String description){  addOption(opt,null,hasArg,description);  return this;}  }
class C{  @SafeVarargs private static Map<CharSequence,Object> asMap(final Map.Entry<CharSequence,Object>... entries){  final Map<CharSequence,Object> map=new HashMap<>(entries.length);  for (  final Map.Entry<CharSequence,Object> ent : entries) {    map.put(ent.getKey(),ent.getValue());  }  return map;}  }
class C{  private BufferedWriter initZone2ZoneImpedaceWriter(String travelDataPath) throws FileNotFoundException, IOException {  BufferedWriter travelDataWriter=IOUtils.getBufferedWriter(travelDataPath);  travelDataWriter.write("from_zone_id:i4,to_zone_id:i4,vehicle_free_speed_travel_time:f4,single_vehicle_to_work_travel_cost:f4," + "am_single_vehicle_to_work_travel_time:f4,bike_time_in_minutes:f4,walk_time_in_minutes:f4,pt_time_in_minutes:f4," + "vehicle_travel_distance_in_meter:f4,am_pk_period_drive_alone_vehicle_trips:f4");  travelDataWriter.newLine();  return travelDataWriter;}  }
class C{  public void close(){  atomicLong.close();}  }
class C{  private void persistBluetoothSetting(int value){  Settings.Global.putInt(mContext.getContentResolver(),Settings.Global.BLUETOOTH_ON,value);}  }
class C{  public Way[] splitAtNodes(Way way,Node node1,Node node2,boolean createPolygons){  Log.d("StorageDelegator","splitAtNodes way " + way.getOsmId() + " node1 "+ node1.getOsmId()+ " node2 "+ node2.getOsmId());  dirty=true;  undo.save(way);  List<Node> nodes=way.getNodes();  if (nodes.size() < 3) {    return null;  }  List<Node> nodesForNewWay=new LinkedList<Node>();  List<Node> nodesForOldWay1=new LinkedList<Node>();  List<Node> nodesForOldWay2=new LinkedList<Node>();  boolean found1=false;  boolean found2=false;  for (Iterator<Node> it=way.getRemovableNodes(); it.hasNext(); ) {    Node wayNode=it.next();    if (!found1 && wayNode.getOsmId() == node1.getOsmId()) {      found1=true;      nodesForNewWay.add(wayNode);      if (!found2)       nodesForOldWay1.add(wayNode); else       nodesForOldWay2.add(wayNode);    } else     if (!found2 && wayNode.getOsmId() == node2.getOsmId()) {      found2=true;      nodesForNewWay.add(wayNode);      if (!found1)       nodesForOldWay1.add(wayNode); else       nodesForOldWay2.add(wayNode);    } else     if ((found1 && !found2) || (!found1 && found2)) {      nodesForNewWay.add(wayNode);    } else     if (!found1 && !found2) {      nodesForOldWay1.add(wayNode);    } else     if (found1 && found2) {      nodesForOldWay2.add(wayNode);    }  }  Log.d("StorageDelegator","nodesForNewWay " + nodesForNewWay.size() + " oldNodes1 "+ nodesForOldWay1.size()+ " oldNodes2 "+ nodesForOldWay2.size());  List<Node> oldNodes=way.getNodes();  oldNodes.clear();  if (nodesForOldWay1.size() == 0) {    oldNodes.addAll(nodesForOldWay2);  } else   if (nodesForOldWay2.size() == 0) {    oldNodes.addAll(nodesForOldWay1);  } else   if (nodesForOldWay1.get(0) == nodesForOldWay2.get(nodesForOldWay2.size() - 1)) {    oldNodes.addAll(nodesForOldWay2);    nodesForOldWay1.remove(0);    oldNodes.addAll(nodesForOldWay1);  } else {    oldNodes.addAll(nodesForOldWay1);    nodesForOldWay2.remove(0);    oldNodes.addAll(nodesForOldWay2);  }  try {    if (createPolygons && way.length() > 2) {      way.addNode(way.getFirstNode());    }    way.updateState(OsmElement.STATE_MODIFIED);    apiStorage.insertElementSafe(way);    Way newWay=factory.createWayWithNewId();    newWay.addTags(way.getTags());    newWay.addNodes(nodesForNewWay,false);    if (createPolygons && newWay.length() > 2) {      newWay.addNode(newWay.getFirstNode());    }    insertElementUnsafe(newWay);    if (way.hasParentRelations()) {      ArrayList<Relation> relations=new ArrayList<Relation>(way.getParentRelations());      dirty=true;      for (      Relation r : relations) {        Log.d("StorageDelegator","splitAtNode processing relation (#" + r.getOsmId() + "/"+ relations.size()+ ") "+ r.getDescription());        RelationMember rm=r.getMember(way);        undo.save(r);        RelationMember newMember=new RelationMember(rm.getRole(),newWay);        r.addMemberAfter(rm,newMember);        newWay.addParentRelation(r);        r.updateState(OsmElement.STATE_MODIFIED);        apiStorage.insertElementSafe(r);      }    }    recordImagery();    Way[] result=new Way[2];    result[0]=way;    result[1]=newWay;    return result;  } catch (  StorageException e) {    e.printStackTrace();  }  return null;}  }
class C{  public void removeParameter(int index){  m_Rows.remove(index);  m_Labels.remove(index);  m_Parameters.remove(index);  update();}  }
class C{  public INode copy(){  int[][] newBoard=new int[MaxR + 1][MaxC + 1];  for (int r=0; r <= MaxR; r++) {    for (int c=0; c <= MaxC; c++) {      newBoard[r][c]=board[r][c];    }  }  EightPuzzleNode node=new EightPuzzleNode(newBoard);  return node;}  }
class C{  public Tasks<BlockSnapshotRestRep> deactivateForConsistencyGroup(URI consistencyGroupId,URI id){  return postTasks(getByConsistencyGroupUrl() + "/{id}/deactivate",consistencyGroupId,id);}  }
class C{  private void hideCurrentSubtree(int offset){  List<Annotation> modifiedAnnotations=new ArrayList<Annotation>();  TLAProofPosition found=null;  for (Iterator<TLAProofPosition> it=foldPositions.iterator(); it.hasNext(); ) {    TLAProofPosition proofPosition=it.next();    try {      if (found == null && proofPosition.containsBeforeProof(offset,document)) {        found=proofPosition;        if (!found.getAnnotation().isCollapsed()) {          found.getAnnotation().markCollapsed();          modifiedAnnotations.add(found.getAnnotation());        }        continue;      }      if (found != null && found.contains(proofPosition)) {        if (!proofPosition.getAnnotation().isCollapsed()) {          proofPosition.getAnnotation().markCollapsed();          modifiedAnnotations.add(proofPosition.getAnnotation());        }      }    } catch (    BadLocationException e) {      Activator.getDefault().logError("Error changing expansion state of proofs.",e);    }  }  editor.modifyProjectionAnnotations((Annotation[])modifiedAnnotations.toArray(new ProjectionAnnotation[modifiedAnnotations.size()]));}  }
class C{  public static String int2Str(int i,boolean bShowZero){  return int2Str(i,bShowZero,false);}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == ThisArgProvider.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == FunctionOrFieldAccessor.class) {switch (derivedFeatureID) {case N4JSPackage.PROPERTY_METHOD_DECLARATION__BODY:    return N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__BODY;case N4JSPackage.PROPERTY_METHOD_DECLARATION__LOK:  return N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__LOK;default :return -1;}}if (baseClass == TypeDefiningElement.class) {switch (derivedFeatureID) {case N4JSPackage.PROPERTY_METHOD_DECLARATION__DEFINED_TYPE:return N4JSPackage.TYPE_DEFINING_ELEMENT__DEFINED_TYPE;default :return -1;}}if (baseClass == FunctionDefinition.class) {switch (derivedFeatureID) {case N4JSPackage.PROPERTY_METHOD_DECLARATION__FPARS:return N4JSPackage.FUNCTION_DEFINITION__FPARS;case N4JSPackage.PROPERTY_METHOD_DECLARATION__RETURN_TYPE_REF:return N4JSPackage.FUNCTION_DEFINITION__RETURN_TYPE_REF;case N4JSPackage.PROPERTY_METHOD_DECLARATION__GENERATOR:return N4JSPackage.FUNCTION_DEFINITION__GENERATOR;case N4JSPackage.PROPERTY_METHOD_DECLARATION__DECLARED_ASYNC:return N4JSPackage.FUNCTION_DEFINITION__DECLARED_ASYNC;default :return -1;}}if (baseClass == GenericDeclaration.class) {switch (derivedFeatureID) {case N4JSPackage.PROPERTY_METHOD_DECLARATION__TYPE_VARS:return N4JSPackage.GENERIC_DECLARATION__TYPE_VARS;default :return -1;}}if (baseClass == TypeProvidingElement.class) {switch (derivedFeatureID) {default :return -1;}}if (baseClass == TypedElement.class) {switch (derivedFeatureID) {case N4JSPackage.PROPERTY_METHOD_DECLARATION__DECLARED_TYPE_REF:return N4JSPackage.TYPED_ELEMENT__DECLARED_TYPE_REF;case N4JSPackage.PROPERTY_METHOD_DECLARATION__BOGUS_TYPE_REF:return N4JSPackage.TYPED_ELEMENT__BOGUS_TYPE_REF;default :return -1;}}if (baseClass == MethodDeclaration.class) {switch (derivedFeatureID) {default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  protected int lengthOfByteStream(jmri.jmrix.AbstractMRMessage m){  int len=m.getNumDataElements() + 2;  return len;}  }
class C{  public static ArrayList<Integer> union(ArrayList<Integer> list1,ArrayList<Integer> list2){  ArrayList<Integer> list3=list1;  for (int i=0; i < list2.size(); i++) {    list3.add(list2.get(i));  }  return list3;}  }
class C{  public static String relativize(File file){  Path them=file.getAbsoluteFile().toPath();  if (them.startsWith(ToastBootstrap.toastHome.getAbsoluteFile().toPath())) {    return relativize_0(them,ToastBootstrap.toastHome.getAbsoluteFile().toPath());  } else {    for (    MassStorageDevice dev : connectedDevices) {      if (them.startsWith(dev.toast_directory.getAbsoluteFile().toPath()))       return relativize_0(them,dev.toast_directory.getAbsoluteFile().toPath());    }  }  return "";}  }
class C{  public static void closeCurrentMenu(){  Form f=Display.getInstance().getCurrent();  SideMenuBar b=(SideMenuBar)f.getClientProperty("cn1$sideMenuParent");  if (b != null && !b.transitionRunning) {    b.closeMenu();  }}  }
class C{  private void showUpdateLogDialog(){  boolean isLogFileExist;  Locale locale=Locale.getDefault();  String languageCode=locale.getLanguage().toLowerCase(Locale.US);  String countryCode=locale.getCountry().toLowerCase(Locale.US);  String folderName=languageCode + "_" + countryCode;  String path=VERSION_LOG_PATH.replace("%locale",folderName);  isLogFileExist=isAssetFileExist(path);  if (!isLogFileExist) {    folderName=languageCode;    path=VERSION_LOG_PATH.replace("%locale",folderName);    isLogFileExist=isAssetFileExist(path);  }  String url;  if (isLogFileExist) {    url=VERSION_LOG_URL.replaceAll("%locale",folderName);  } else {    url=DEFAULT_VERSION_LOG_URL;  }  WebView webview=new WebView(getActivity());  webview.loadUrl(url);  new AlertDialog.Builder(getActivity()).setView(webview).show();}  }
class C{  @Override public boolean isNumerical(){  return true;}  }
class C{  public static HashMap<String,String> iterateOverJSON(JSONObject jsonObject){  Iterator<String> iter=jsonObject.keys();  HashMap<String,String> keyValueMap=new HashMap<>();  while (iter.hasNext()) {    String key=iter.next();    try {      String value=jsonObject.getString(key);      keyValueMap.put(key,value);    } catch (    JSONException e) {      e.printStackTrace();    }  }  return keyValueMap;}  }
class C{  public long add(long instant,int value){  throw unsupported();}  }
class C{  @Bean LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource,Environment env){  LocalContainerEntityManagerFactoryBean entityManagerFactoryBean=new LocalContainerEntityManagerFactoryBean();  entityManagerFactoryBean.setDataSource(dataSource);  entityManagerFactoryBean.setJpaVendorAdapter(new HibernateJpaVendorAdapter());  entityManagerFactoryBean.setPackagesToScan(ENTITY_PACKAGES);  Properties jpaProperties=new Properties();  jpaProperties.put(PROPERTY_NAME_HIBERNATE_DIALECT,env.getRequiredProperty(PROPERTY_NAME_HIBERNATE_DIALECT));  jpaProperties.put(PROPERTY_NAME_HIBERNATE_HBM2DDL_AUTO,env.getRequiredProperty(PROPERTY_NAME_HIBERNATE_HBM2DDL_AUTO));  jpaProperties.put(PROPERTY_NAME_HIBERNATE_NAMING_STRATEGY,env.getRequiredProperty(PROPERTY_NAME_HIBERNATE_NAMING_STRATEGY));  jpaProperties.put(PROPERTY_NAME_HIBERNATE_SHOW_SQL,env.getRequiredProperty(PROPERTY_NAME_HIBERNATE_SHOW_SQL));  jpaProperties.put(PROPERTY_NAME_HIBERNATE_FORMAT_SQL,env.getRequiredProperty(PROPERTY_NAME_HIBERNATE_FORMAT_SQL));  entityManagerFactoryBean.setJpaProperties(jpaProperties);  return entityManagerFactoryBean;}  }
class C{  public Builder normalize(final boolean normalize){  this.normalize=normalize;  return this;}  }
class C{  @SuppressWarnings("unused") public List<String> removeInitiatorDetails(URI initiatorId){  List<String> result=Lists.newArrayList();  Initiator initiator=_dbClient.queryObject(Initiator.class,initiatorId);  if (initiator != null) {    result.add(ComputeSystemDialogProperties.getMessage("ComputeSystem.removeInitiatorDetails",initiator.getInitiatorPort()));    List<ExportGroup> exportGroups=ComputeSystemControllerImpl.getExportGroups(_dbClient,initiator.getId(),Lists.newArrayList(initiator));    for (    ExportGroup export : exportGroups) {      List<URI> updatedInitiators=StringSetUtil.stringSetToUriList(export.getInitiators());      if (updatedInitiators.remove(initiatorId)) {        List<BlockObjectDetails> volumeDetails=getBlockObjectDetails(initiator.getHost(),export.getVolumes());        result.addAll(getVolumeInitiatorDetails(volumeDetails,false));      }    }  }  return result;}  }
class C{  private static String normalizeUrlPath(String path){  if ("".equals(path) || path.charAt(0) != '/') {    path="/" + path;  }  try {    URI uri=URI.create(path);    uri=uri.normalize();    path=uri.toString();  } catch (  IllegalArgumentException ex) {    EFLogger.error("Illegal path: " + path);    return null;  }catch (  Exception ex) {    EFLogger.error("invalid path: " + path);    return null;  }  if ("".equals(path))   return "/";  if ("/".equals(path))   return "/";  String[] pathInfo=path.split("/");  String index="";  for (  String str : pathInfo) {    if ("".equals(str))     continue;    index=str;    break;  }  if (index.startsWith("_"))   return "/";  return "/" + index;}  }
class C{  public VcpcFastRunner(Graph graph,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graph,params,knowledgeBoxModel);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (!(obj instanceof CategoryMarker)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  CategoryMarker that=(CategoryMarker)obj;  if (!this.key.equals(that.key)) {    return false;  }  if (this.drawAsLine != that.drawAsLine) {    return false;  }  return true;}  }
class C{  private void queryClass(JClass jc){  Set<URI> selectionUris=null;  List<JSelection> selectionList=jc.getSelections();  for (  JSelection js : selectionList) {    Set<URI> allValueUris=new HashSet<URI>();    if (jc.getMetaData().isId(js.getField())) {      for (      Object value : js.getValues()) {        if (value == null || value.equals("")) {          continue;        }        allValueUris.add(URI.create(value.toString()));      }      if (selectionUris == null) {        selectionUris=new HashSet<URI>();        selectionUris.addAll(allValueUris);      } else {        selectionUris=andUriSet(selectionUris,allValueUris);      }    } else     if (jc.getMetaData().isIndexed(js.getField())) {      for (      Object value : js.getValues()) {        if (value == null || value.equals("")) {          continue;        }        Constraint constraint=jc.getMetaData().buildConstraint(js.getField(),value.toString());        allValueUris.addAll(engine.queryByConstraint(constraint));      }      if (selectionUris == null) {        selectionUris=new HashSet<URI>();        selectionUris.addAll(allValueUris);      } else {        selectionUris=andUriSet(selectionUris,allValueUris);      }    }  }  if (jc.getSubJClasses() != null) {    joinSubClasses(jc);  } else   if (jc.getJoinToField() != null) {    joinBid2A(jc,selectionUris);  } else   if (jc.getField() != null) {    joinAid2B(jc,selectionUris);  } else   if (jc.getJoinToAlias() == null) {    Set<URI> uris=selectionUris;    if (uris == null) {      uris=engine.queryByType(jc.getClazz());    }    Iterator iter=engine.queryIterObject(jc.getClazz(),uris);    jc.setCacheValid(true);    while (iter.hasNext()) {      DataObject dobj=(DataObject)iter.next();      if (testSelections(jc,dobj) == false) {        continue;      }      jc.addToCache(dobj);      jc.getUris().add(dobj.getId());    }  } else {    throw new JoinerException("Unrecognized join");  }}  }
class C{  public Method field(int opcode,Object obj,String name,Object type){  if (obj instanceof String) {    String cls=MappingHandler.INSTANCE.getClassMapping((String)obj);    String desc=MappingHandler.INSTANCE.getClassMapping(this.patcher.fieldDesc(type));    this.insnList.add(new FieldInsnNode(opcode,cls,MappingHandler.INSTANCE.getFieldMapping(cls,name),desc));  }  return this;}  }
class C{  public boolean isLineEdge(){  boolean isLine=label.isLine(0) || label.isLine(1);  boolean isExteriorIfArea0=!label.isArea(0) || label.allPositionsEqual(0,Location.EXTERIOR);  boolean isExteriorIfArea1=!label.isArea(1) || label.allPositionsEqual(1,Location.EXTERIOR);  return isLine && isExteriorIfArea0 && isExteriorIfArea1;}  }
class C{  public void buildStructure(BayesNet bayesNet,Instances instances) throws Exception {  if (m_sInitalBIFFile != null && !m_sInitalBIFFile.equals("")) {    BIFReader initialNet=new BIFReader().processFile(m_sInitalBIFFile);    for (int iAttribute=0; iAttribute < instances.numAttributes(); iAttribute++) {      int iNode=initialNet.getNode(bayesNet.getNodeName(iAttribute));      for (int iParent=0; iParent < initialNet.getNrOfParents(iAttribute); iParent++) {        String sParent=initialNet.getNodeName(initialNet.getParent(iNode,iParent));        int nParent=0;        while (nParent < bayesNet.getNrOfNodes() && !bayesNet.getNodeName(nParent).equals(sParent)) {          nParent++;        }        if (nParent < bayesNet.getNrOfNodes()) {          bayesNet.getParentSet(iAttribute).addParent(nParent,instances);        } else {          System.err.println("Warning: Node " + sParent + " is ignored. It is found in initial network but not in data set.");        }      }    }  } else   if (m_bInitAsNaiveBayes) {    int iClass=instances.classIndex();    for (int iAttribute=0; iAttribute < instances.numAttributes(); iAttribute++) {      if (iAttribute != iClass) {        bayesNet.getParentSet(iAttribute).addParent(iClass,instances);      }    }  }  search(bayesNet,instances);  if (m_bMarkovBlanketClassifier) {    doMarkovBlanketCorrection(bayesNet,instances);  }}  }
class C{  public MultisigSignatureTransaction(final DeserializationOptions options,final Deserializer deserializer){  super(TransactionTypes.MULTISIG_SIGNATURE,options,deserializer);  this.otherTransactionHash=deserializer.readObject("otherHash",null);  this.multisig=Account.readFrom(deserializer,"otherAccount");}  }
class C{  public static void classesAbsent(String fieldName,Class<?> aClass){  throw new MappingErrorException(MSG.INSTANCE.message(mappingErrorRelationalException2,fieldName,aClass.getSimpleName()));}  }
class C{  public Coordinate[] toCoordinateArray(){  return coordinates;}  }
class C{  public SparseBooleanArray(){  this(10);}  }
class C{  public static VersionedObjectList execute(ExecutablePool pool,Region region,Collection<Object> keys,EventID eventId,int retryAttempts,Object callbackArg){  final boolean isDebugEnabled=logger.isDebugEnabled();  ClientMetadataService cms=((LocalRegion)region).getCache().getClientMetadataService();  Map<ServerLocation,HashSet> serverToFilterMap=cms.getServerToFilterMap(keys,region,true);  if (serverToFilterMap == null || serverToFilterMap.isEmpty()) {    AbstractOp op=new RemoveAllOpImpl(region,keys,eventId,((PoolImpl)pool).getPRSingleHopEnabled(),callbackArg);    op.initMessagePart();    return (VersionedObjectList)pool.execute(op);  }  List callableTasks=constructAndGetRemoveAllTasks(region,eventId,serverToFilterMap,(PoolImpl)pool,callbackArg);  if (isDebugEnabled) {    logger.debug("RemoveAllOp#execute : Number of removeAll tasks is :{}",callableTasks.size());  }  HashMap<ServerLocation,RuntimeException> failedServers=new HashMap<ServerLocation,RuntimeException>();  PutAllPartialResult result=new PutAllPartialResult(keys.size());  try {    Map<ServerLocation,Object> results=SingleHopClientExecutor.submitBulkOp(callableTasks,cms,(LocalRegion)region,failedServers);    for (    Map.Entry<ServerLocation,Object> entry : results.entrySet()) {      Object value=entry.getValue();      if (value instanceof PutAllPartialResultException) {        PutAllPartialResultException pap=(PutAllPartialResultException)value;        if (isDebugEnabled) {          logger.debug("RemoveAll SingleHop encountered BulkOpPartialResultException exception: {}, failedServers are {}",pap,failedServers.keySet());        }        result.consolidate(pap.getResult());      } else {        if (value != null) {          VersionedObjectList list=(VersionedObjectList)value;          result.addKeysAndVersions(list);        }      }    }  } catch (  RuntimeException ex) {    logger.debug("single-hop removeAll encountered unexpected exception: {}",ex);    throw ex;  }  if (!failedServers.isEmpty()) {    if (retryAttempts == 0) {      throw failedServers.values().iterator().next();    }    if (result.getSucceededKeysAndVersions().size() == 0) {      Set succeedKeySet=new LinkedHashSet();      Set<ServerLocation> serverSet=serverToFilterMap.keySet();      for (      ServerLocation server : serverSet) {        if (!failedServers.containsKey(server)) {          succeedKeySet.addAll(serverToFilterMap.get(server));        }      }      result.addKeys(succeedKeySet);    }    boolean oneSubMapRetryFailed=false;    Set<ServerLocation> failedServerSet=failedServers.keySet();    for (    ServerLocation failedServer : failedServerSet) {      RuntimeException savedRTE=failedServers.get(failedServer);      if (savedRTE instanceof PutAllPartialResultException) {        oneSubMapRetryFailed=true;        continue;      }      Collection<Object> newKeys=serverToFilterMap.get(failedServer);      try {        VersionedObjectList v=RemoveAllOp.execute(pool,region,newKeys,eventId,true,callbackArg);        if (v == null) {          result.addKeys(newKeys);        } else {          result.addKeysAndVersions(v);        }      } catch (      PutAllPartialResultException pre) {        oneSubMapRetryFailed=true;        logger.debug("Retry failed with BulkOpPartialResultException: {} Before retry: {}",pre,result.getKeyListString());        result.consolidate(pre.getResult());      }catch (      Exception rte) {        oneSubMapRetryFailed=true;        Object firstKey=newKeys.iterator().next();        result.saveFailedKey(firstKey,rte);      }    }    if (oneSubMapRetryFailed && result.hasFailure()) {      PutAllPartialResultException pre=new PutAllPartialResultException(result);      throw pre;    }  }  return result.getSucceededKeysAndVersions();}  }
class C{  public Name add(int posn,Rdn comp){  if (comp == null) {    throw new NullPointerException("Cannot set comp to null");  }  rdns.add(posn,comp);  unparsed=null;  return this;}  }
class C{  public String requestLine(){  return startLine;}  }
class C{  private void $$$setupUI$$$(){  contentPane=new JPanel();  contentPane.setLayout(new BorderLayout(0,0));  final JScrollPane scrollPane1=new JScrollPane();  contentPane.add(scrollPane1,BorderLayout.CENTER);  table=new JTable();  scrollPane1.setViewportView(table);}  }
class C{  public boolean isBillOfMaterial(){  Object oo=get_Value(COLUMNNAME_IsBillOfMaterial);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void readDefsElement(IXMLElement elem) throws IOException {  for (  IXMLElement child : elem.getChildren()) {    Figure childFigure=readElement(child);  }}  }
class C{  public SnmpMsg encodeSnmpPdu(SnmpPdu p,int maxDataLength) throws SnmpStatusException, SnmpTooBigException {switch (p.version) {case SnmpDefinitions.snmpVersionOne:case SnmpDefinitions.snmpVersionTwo:{      SnmpMessage result=new SnmpMessage();      result.encodeSnmpPdu((SnmpPduPacket)p,maxDataLength);      return result;    }case SnmpDefinitions.snmpVersionThree:{    SnmpV3Message result=new SnmpV3Message();    result.encodeSnmpPdu(p,maxDataLength);    return result;  }default :return null;}}  }
class C{  public void close() throws IOException {}  }
class C{  public static int[] cs_counts(Dcs A,int[] parent,int[] post,boolean ata){  int i, j, k, n, m, J, s, p, q, ATp[], ATi[], maxfirst[], prevleaf[], ancestor[], colcount[], w[], first[], delta[];  int[] head=null, next=null;  int[] jleaf=new int[1];  int head_offset=0, next_offset=0;  Dcs AT;  if (!Dcs_util.CS_CSC(A) || parent == null || post == null)   return (null);  m=A.m;  n=A.n;  s=4 * n + (ata ? (n + m + 1) : 0);  delta=colcount=new int[n];  w=new int[s];  AT=Dcs_transpose.cs_transpose(A,false);  ancestor=w;  maxfirst=w;  int maxfirst_offset=n;  prevleaf=w;  int prevleaf_offset=2 * n;  first=w;  int first_offset=3 * n;  for (k=0; k < s; k++)   w[k]=-1;  for (k=0; k < n; k++) {    j=post[k];    delta[j]=(first[first_offset + j] == -1) ? 1 : 0;    for (; j != -1 && first[first_offset + j] == -1; j=parent[j])     first[first_offset + j]=k;  }  ATp=AT.p;  ATi=AT.i;  if (ata) {    int[] offsets=init_ata(AT,post,w);    head=w;    head_offset=offsets[0];    next=w;    next_offset=offsets[1];  }  for (i=0; i < n; i++)   ancestor[i]=i;  for (k=0; k < n; k++) {    j=post[k];    if (parent[j] != -1)     delta[parent[j]]--;    for (J=HEAD(k,j,head,head_offset,ata); J != -1; J=NEXT(J,next,next_offset,ata)) {      for (p=ATp[J]; p < ATp[J + 1]; p++) {        i=ATi[p];        q=Dcs_leaf.cs_leaf(i,j,first,first_offset,maxfirst,maxfirst_offset,prevleaf,prevleaf_offset,ancestor,0,jleaf);        if (jleaf[0] >= 1)         delta[j]++;        if (jleaf[0] == 2)         delta[q]--;      }    }    if (parent[j] != -1)     ancestor[j]=parent[j];  }  for (j=0; j < n; j++) {    if (parent[j] != -1)     colcount[parent[j]]+=colcount[j];  }  return colcount;}  }
class C{  protected void onUnknown(String line){}  }
class C{  public final static EarlyTerminatingCollector createCountBasedEarlyTerminatingCollector(int maxCountHits){  return new EarlyTerminatingCollector(maxCountHits);}  }
class C{  default void onEditorPositionChange(int oldPosition,int newPosition){}  }
class C{  public static AuthRequest forExternalUser(String username){  AccountExternalId.Key i=new AccountExternalId.Key(SCHEME_EXTERNAL,username);  AuthRequest r=new AuthRequest(i.get());  r.setUserName(username);  return r;}  }
class C{  protected void processNeighbors(DBIDRef id,T neighbors){  if (!corepred.isCorePoint(id,neighbors)) {    return;  }  Core core=null;  for (DBIDIter it=npred.iterDBIDs(neighbors); it.valid(); it.advance()) {    Assignment cand=clusterids.get(it);    if (cand instanceof Core) {      core=(Core)cand;      break;    }  }synchronized (this) {    if (core == null) {      if (nextclus == cores.length) {        cores=Arrays.copyOf(cores,cores.length + (cores.length >> 1));        borders=Arrays.copyOf(borders,cores.length);      }      core=cores[nextclus]=new Core(nextclus);      borders[nextclus]=new Border(core);      ++nextclus;    }    Border border=borders[core.num];    clusterids.put(id,core);    for (DBIDIter it=npred.iterDBIDs(neighbors); it.valid(); it.advance()) {      Assignment oclus=clusterids.get(it);      if (oclus == null) {        clusterids.put(it,border);      } else       if (oclus instanceof Core) {        core.mergeWith((Core)oclus);      } else       if (oclus instanceof Border) {        Border oborder=(Border)oclus;        if (border.core.num != oborder.core.num) {          clusterids.put(it,new MultiBorder(border,oborder));        }      } else {        assert (oclus instanceof MultiBorder);        clusterids.put(it,((MultiBorder)oclus).update(border));      }    }  }}  }
class C{  public void addContentItem(ContentItem contentItem){  if (contentItems == null) {    contentItems=new ArrayList<ContentItem>();  }  contentItems.add(contentItem);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static Test suite(){  return (new TestSuite(DynamicStateITCase.class));}  }
class C{  @Override public byte[] encode(BufferedImage bufferedImage) throws IOException {  ParamChecks.nullNotPermitted(bufferedImage,"bufferedImage");  PngEncoder encoder=new PngEncoder(bufferedImage,this.encodingAlpha,0,this.quality);  return encoder.pngEncode();}  }
class C{  static long[][] buildTable(long[] map,int size){  int n=map.length;  if (((n >> size) << size) != n) {    FAIL("Length " + n + " is not a multiple of "+ (1 << size));  }  int m=1 << size;  long[] newmap=new long[n >> size];  long[] buffer=new long[n];  int ptr=0;  OUTER:   for (int i=0; i < n; i+=m) {    MIDDLE:     for (int j=0; j < ptr; j+=m) {      for (int k=0; k < m; k++) {        if (buffer[j + k] != map[i + k])         continue MIDDLE;      }      newmap[i >> size]=(j >> size);      continue OUTER;    }    for (int k=0; k < m; k++) {      buffer[ptr + k]=map[i + k];    }    newmap[i >> size]=(ptr >> size);    ptr+=m;  }  long[] newdata=new long[ptr];  for (int j=0; j < ptr; j++) {    newdata[j]=buffer[j];  }  long[][] result={newmap,newdata};  return result;}  }
class C{  public Object[] toArray(){synchronized (children) {    return children.keySet().toArray();  }}  }
class C{  public SegToken(char[] idArray,int start,int end,int wordType,int weight){  this.charArray=idArray;  this.startOffset=start;  this.endOffset=end;  this.wordType=wordType;  this.weight=weight;}  }
class C{  public String toString(){  return String.format("%s on %s",marker,contact);}  }
class C{  public static long copyLarge(Reader input,Writer output,char[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public AudioTrack(AudioCapabilities audioCapabilities,int streamType){  this.audioCapabilities=audioCapabilities;  this.streamType=streamType;  releasingConditionVariable=new ConditionVariable(true);  if (Util.SDK_INT >= 18) {    try {      getLatencyMethod=android.media.AudioTrack.class.getMethod("getLatency",(Class<?>[])null);    } catch (    NoSuchMethodException e) {    }  }  if (Util.SDK_INT >= 19) {    audioTrackUtil=new AudioTrackUtilV19();  } else {    audioTrackUtil=new AudioTrackUtil();  }  playheadOffsets=new long[MAX_PLAYHEAD_OFFSET_COUNT];  volume=1.0f;  startMediaTimeState=START_NOT_SET;}  }
class C{  private void runQueuedRequests(LimeWireCore limeWireCore){  limeWireCore.getExternalControl().runQueuedControlRequest();}  }
class C{  public static String utf8BytesWithUtf16LengthToString(@Nonnull byte[] bytes,int start,int utf16Length){  return utf8BytesWithUtf16LengthToString(bytes,start,utf16Length,null);}  }
class C{  public static boolean isNative(int flags){  return (flags & AccNative) != 0;}  }
class C{  private static <E extends FType>boolean isBasicType(FTypeRef typeRef,FBasicTypeId expected){  if (typeRef == null)   return false;  FBasicTypeId id=getActualPredefined(typeRef);  if (id != null) {    if (id.getValue() == expected.getValue()) {      return true;    }  }  return false;}  }
class C{  public boolean equals(Object o){  try {    Rect r=(Rect)o;    return (x == r.x && y == r.y && width == r.width && height == r.height);  } catch (  NullPointerException e) {    return false;  }catch (  ClassCastException e) {    return false;  }}  }
class C{  public boolean isReadableEntryId(SnmpOid rowOid,long var,Object data) throws SnmpStatusException {  return node.isReadable(var);}  }
class C{  public GridSpacingDecoration(int spacing,int numColumns){  this(spacing,numColumns,ANY_VIEW);}  }
class C{  public static boolean isUnconditionalJump(final ReilInstruction instruction){  Preconditions.checkNotNull(instruction,"Argument instruction can't be null.");  return instruction.getMnemonic().equals(OPCODE_JCC) && !isConditionalJump(instruction);}  }
class C{  @DSComment("Request/Change/Listen Android Manger") @DSSpec(DSCat.ANDROID_MANAGER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.306 -0500",hash_original_method="A063D2F3A1A45A8B2BB20D41F98AEB1B",hash_generated_method="5589CB694139C3927BD03E556015C3E5") public boolean enableNetwork(int netId,boolean disableOthers){  try {    return mService.enableNetwork(netId,disableOthers);  } catch (  RemoteException e) {    return false;  }}  }
class C{  public boolean isAutoIncrement(){  return autoIncrement;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.547 -0500",hash_original_method="298AB552332245AFF95538EA4279D4D4",hash_generated_method="50D1BFC7AAECE48C025D94DD177D8F93") private static void removeDashes(Editable text){  int p=0;  while (p < text.length()) {    if (text.charAt(p) == '-') {      text.delete(p,p + 1);    } else {      p++;    }  }}  }
class C{  public static void write(int x1,int y1,int x2,int y2,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.LINE_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_LINE);  dos.writeByte(RENDERTYPE_XY);  dos.writeInt(x1);  dos.writeInt(y1);  dos.writeInt(x2);  dos.writeInt(y2);  properties.write(dos);}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public AuthenticationException(String message){  super(message);}  }
class C{  public void processPackageRemoved(String[] packages){  HashSet<String> packageSet=new HashSet<String>();  getUserApps(packageSet);  boolean packageRemoved=false;  for (  String packageName : packages) {    if (packageSet.remove(packageName)) {      packageRemoved=true;    }  }  if (packageRemoved) {    mPrefs.edit().putStringSet(mPackageSetKey,packageSet).apply();  }}  }
class C{  public void addAll(final Collection elements){  adjusting=true;  Set oldSelection=new HashSet(selection);  boolean rv=selection.addAll(elements);  adjusting=false;  if (rv) {    fireSelectionChanged(oldSelection,selection);  }  oldSelection=null;}  }
class C{  public void destroy(){  invoke(contextDestroy);}  }
class C{  private static byte[] pbkdf2(char[] password,byte[] salt,int iterations,int bytes){  PBEKeySpec spec=new PBEKeySpec(password,salt,iterations,bytes * 8);  SecretKeyFactory skf=null;  try {    skf=SecretKeyFactory.getInstance(PBKDF2_ALGORITHM);    return skf.generateSecret(spec).getEncoded();  } catch (  NoSuchAlgorithmException ignore) {    return null;  }catch (  InvalidKeySpecException e) {    throw new IllegalArgumentException(e);  }}  }
class C{  public void beginCompoundEdit(){}  }
class C{  void switchOutDrawHistory(){  sendMessage(obtainMessage(SWITCH_OUT_HISTORY));}  }
class C{  private void handleRouteUnregistration(final HttpServerRequest request){  log.debug("handleRouteUnregistration > " + request.uri());  final String routeStorageUri=hookRootUri + HOOK_ROUTE_STORAGE_PATH + getStorageIdentifier(request.uri());  storage.delete(routeStorageUri,null);}  }
class C{  public void mv(String oldPath,String newPath) throws IOException {  int req_id=generateNextRequestID();  TypesWriter tw=new TypesWriter();  tw.writeString(oldPath,charsetName);  tw.writeString(newPath,charsetName);  sendMessage(Packet.SSH_FXP_RENAME,req_id,tw.getBytes());  expectStatusOKMessage(req_id);}  }
class C{  public void run(){  PrintService printService=getPrintService(printerName);  if (printService == null) {    System.out.println("Could not get printer with name: " + printerName);    System.out.println("Taking default print service");    printService=getDefaultPrintService();  }  if (printService == null) {    System.out.println("No printers found");    return;  }  boolean isDataReady=loadPrintData();  if (isDataReady) {    printData(printService);  } else {    System.out.println("Unable to print data.");  }}  }
class C{  public int compareTo(Boolean that){  return compare(value,that.value);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  protected void handleStartedStage(final State current,final State patch){switch (current.taskInfo.subStage) {case UPDATE_DATASTORE_COUNTS:    updateTotalImageDatastore(current);  break;case TRIGGER_COPIES:handleTriggerCopies(current);break;case AWAIT_COMPLETION:processAwaitCompletion(current);break;default :throw new IllegalStateException("Un-supported substage" + current.taskInfo.subStage.toString());}}  }
class C{  @Override public final void perform(IR ir){  if (ir.desiredSSAOptions.getAbort())   return;  if (ir.actualSSAOptions != null) {    if (ir.actualSSAOptions.satisfies(ir.desiredSSAOptions)) {      return;    }  }  this.ir=ir;  boolean scalarsOnly=ir.desiredSSAOptions.getScalarsOnly();  boolean backwards=ir.desiredSSAOptions.getBackwards();  Set<Object> heapTypes=ir.desiredSSAOptions.getHeapTypes();  boolean insertUsePhis=ir.desiredSSAOptions.getInsertUsePhis();  boolean insertPEIDeps=ir.desiredSSAOptions.getInsertPEIDeps();  boolean excludeGuards=ir.desiredSSAOptions.getExcludeGuards();  if (!ir.HIRInfo.dominatorsAreComputed) {    throw new OptimizingCompilerException("Need dominators for SSA");  }  ir.HIRInfo.dictionary=new SSADictionary(null,true,false,ir);  prepare();  if (true) {    patchPEIgeneratedValues();  }  if (ir.options.PRINT_SSA) {    SSA.printInstructions(ir);  }  computeSSA(ir,scalarsOnly,backwards,heapTypes,insertUsePhis,insertPEIDeps,excludeGuards);  ir.actualSSAOptions=new SSAOptions();  ir.actualSSAOptions.setScalarsOnly(scalarsOnly);  ir.actualSSAOptions.setBackwards(backwards);  ir.actualSSAOptions.setHeapTypes(heapTypes);  ir.actualSSAOptions.setInsertUsePhis(insertUsePhis);  ir.actualSSAOptions.setInsertPEIDeps(insertPEIDeps);  ir.actualSSAOptions.setExcludeGuards(excludeGuards);  ir.actualSSAOptions.setScalarValid(true);  ir.actualSSAOptions.setHeapValid(!scalarsOnly);}  }
class C{  @Override public String toString(){  StringBuilder stringBuilder=new StringBuilder();  stringBuilder.append(getName());  stringBuilder.append("(0x");  stringBuilder.append(Integer.toHexString(getMessageType()));  stringBuilder.append(")[attrib.count=");  stringBuilder.append(getAttributeCount());  stringBuilder.append(" len=");  stringBuilder.append((int)this.getDataLength());  byte[] transactionID=getTransactionID();  if (transactionID != null) {    stringBuilder.append(" tranID=");    stringBuilder.append(TransactionID.toString(transactionID));  }  stringBuilder.append("]");  return stringBuilder.toString();}  }
class C{  public static Date parseDate(String dateString) throws ParseException {  Matcher matcher=xep0091Pattern.matcher(dateString);  if (matcher.matches()) {    int length=dateString.split("T")[0].length();    if (length < 8) {      Date date=handleDateWithMissingLeadingZeros(dateString,length);      if (date != null)       return date;    } else {synchronized (xep0091Formatter) {        return xep0091Formatter.parse(dateString);      }    }  } else {    for (    PatternCouplings coupling : couplings) {      matcher=coupling.pattern.matcher(dateString);      if (matcher.matches()) {        if (coupling.needToConvertTimeZone) {          dateString=coupling.convertTime(dateString);        }synchronized (coupling.formatter) {          return coupling.formatter.parse(dateString);        }      }    }  }synchronized (dateTimeNoMillisFormatter) {    return dateTimeNoMillisFormatter.parse(dateString);  }}  }
class C{  public String readPref(final String editorKey){  final EditorPreferences editorPreferences=this.preferenceReader.getPreferences();  if (editorPreferences.getKeymaps() == null) {    return null;  }  return editorPreferences.getKeymaps().get(editorKey);}  }
class C{  public static int differenceInDays(long day1,long day2){  return (int)(day1 - day2) / (24 * 60 * 60* 1000);}  }
class C{  private static void printReportInfo(McfData mcfData){  System.out.println();  System.out.println("Report Info:");  System.out.println("ID:" + mcfData.getId());  System.out.println("Self link: " + mcfData.getSelfLink());  System.out.println("Kind: " + mcfData.getKind());  System.out.println("Contains Sampled Data: " + mcfData.getContainsSampledData());  System.out.println();}  }
class C{  @Override public void addResponseListener(ResponseListener listener){  mResponseListeners.add(listener);}  }
class C{  public RewrittenUrl processRequest(final HttpServletRequest hsRequest,final HttpServletResponse hsResponse) throws IOException, ServletException, InvocationTargetException {  RuleChain chain=getNewChain(hsRequest,null);  if (chain == null)   return null;  chain.process(hsRequest,hsResponse);  return chain.getFinalRewrittenRequest();}  }
class C{  @Override public void expandVolumeAsMetaVolume(StorageSystem storageSystem,StoragePool storagePool,Volume metaHead,List<String> metaMembers,String metaType,MetaVolumeTaskCompleter metaVolumeTaskCompleter) throws DeviceControllerException {  String label=null;  _log.info(String.format("Expand Volume as  Meta Volume Start - Array: %s, Head: %s, Recommended meta type: %s %n   Members:%s",storageSystem.getSerialNumber(),metaHead.getLabel(),metaType,metaMembers));  label=metaHead.getLabel();  boolean isRPVolume=false;  if (metaHead != null) {    isRPVolume=metaHead.checkForRp() || RPHelper.isAssociatedToAnyRpVplexTypes(metaHead,_dbClient);  }  int attempt=0;  int retries=1;  if (isRPVolume) {    retries=MAX_RP_EXPAND_RETRIES;  }  while (attempt++ <= retries) {    try {      CIMObjectPath elementCompositionServicePath=_cimPath.getElementCompositionSvcPath(storageSystem);      CIMArgument[] inArgs;      inArgs=_helper.getCreateMetaVolumeInputArguments(storageSystem,label,metaHead,metaMembers,metaType,true);      CIMArgument[] outArgs=new CIMArgument[5];      StorageSystem forProvider=_helper.getStorageSystemForProvider(storageSystem,metaHead);      _log.info("Selected Provider : {}",forProvider.getNativeGuid());      SmisJob smisJobCompleter=new SmisVolumeExpandJob(null,forProvider.getId(),storagePool.getId(),metaVolumeTaskCompleter,"ExpandAsMetaVolume");      if (isRPVolume) {        _log.info(String.format("Attempt %s/%s to expand volume %s, which is associated with RecoverPoint",attempt,MAX_RP_EXPAND_RETRIES,metaHead.getLabel()));      }      _helper.invokeMethodSynchronously(forProvider,elementCompositionServicePath,SmisConstants.CREATE_OR_MODIFY_COMPOSITE_ELEMENT,inArgs,outArgs,smisJobCompleter);      break;    } catch (    WBEMException e) {      _log.error("Problem making SMI-S call: ",e);      ServiceError error=DeviceControllerErrors.smis.unableToCallStorageProvider(e.getMessage());      metaVolumeTaskCompleter.getVolumeTaskCompleter().error(_dbClient,_locker,error);    }catch (    Exception e) {      if (attempt != retries && isRPVolume && e.getMessage().contains("The requested device has active sessions")) {        _log.warn(String.format("Encountered exception attempting to expand RP volume %s.  Waiting %s milliseconds before trying again.  Error: %s",metaHead.getLabel(),RP_EXPAND_WAIT_FOR_RETRY,e.getMessage()));        try {          Thread.sleep(RP_EXPAND_WAIT_FOR_RETRY);        } catch (        InterruptedException e1) {          Thread.currentThread().interrupt();        }      } else {        _log.error("Problem in expandVolumeAsMetaVolume: ",e);        ServiceError error=DeviceControllerErrors.smis.methodFailed("expandVolumeAsMetaVolume",e.getMessage());        metaVolumeTaskCompleter.getVolumeTaskCompleter().error(_dbClient,_locker,error);        break;      }    }  }  _log.info(String.format("Expand Volume as  Meta Volume End - Array:%s, Head:%s, %n  Head device ID: %s, Members:%s",storageSystem.getSerialNumber(),metaHead.getLabel(),metaHead.getNativeId(),metaMembers));}  }
class C{  public static String printCodePointAsString(int codePoint){  StringBuilder builder=new StringBuilder(12);  builder.append('"');  try {    printStringCodePoint(builder,codePoint);  } catch (  IOException e) {    throw new Error(e);  }  builder.append('"');  return builder.toString();}  }
class C{  static boolean isWhiteSpace(char ch){  return (ch == 0x20) || (ch == 0x09) || (ch == 0xD)|| (ch == 0xA);}  }
class C{  public Builder resize(int targetWidth,int targetHeight){  if (targetWidth <= 0) {    throw new IllegalArgumentException("Width must be positive number.");  }  if (targetHeight <= 0) {    throw new IllegalArgumentException("Height must be positive number.");  }  this.targetWidth=targetWidth;  this.targetHeight=targetHeight;  return this;}  }
class C{  public static double staticNextDouble(double freedom){synchronized (shared) {    return shared.nextDouble(freedom);  }}  }
class C{  private String stripTags(String content){  return Jsoup.parse(content).text();}  }
class C{  private void initPanel(){  final JPanel mainPanel=new JPanel(new BorderLayout());  mainPanel.setBorder(new TitledBorder("Edit Text Condition"));  final JPanel inputPanel=new JPanel(new BorderLayout());  inputPanel.setBorder(new EmptyBorder(5,5,5,5));  m_inputField.setPreferredSize(new Dimension(m_inputField.getPreferredSize().width,23));  inputPanel.add(m_inputField,BorderLayout.NORTH);  final JPanel checkboxesPanel=new JPanel(new GridLayout(2,1));  checkboxesPanel.setBorder(new EmptyBorder(5,0,0,0));  checkboxesPanel.add(m_caseSensitiveBox);  checkboxesPanel.add(m_regExBox);  inputPanel.add(checkboxesPanel,BorderLayout.CENTER);  mainPanel.add(inputPanel,BorderLayout.NORTH);  add(mainPanel,BorderLayout.CENTER);}  }
class C{  private void renegotiateIfNeeded(SSLEngineResult res) throws IgniteCheckedException, SSLException {  if (res.getStatus() != CLOSED && res.getStatus() != BUFFER_UNDERFLOW && res.getHandshakeStatus() != NOT_HANDSHAKING) {    handshakeStatus=res.getHandshakeStatus();    if (log.isDebugEnabled())     log.debug("Renegotiation requested [status=" + res.getStatus() + ", handshakeStatus = "+ handshakeStatus+ "ses="+ ses+ ']');    handshakeFinished=false;    handshake();  }}  }
class C{  public ViewPropertyAnimator scaleYBy(float value){  animatePropertyBy(SCALE_Y,value);  return this;}  }
class C{  public void createSegments(Path arcFiles,Path segmentsOutDir) throws IOException {  SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  long start=System.currentTimeMillis();  if (LOG.isInfoEnabled()) {    LOG.info("ArcSegmentCreator: starting at " + sdf.format(start));    LOG.info("ArcSegmentCreator: arc files dir: " + arcFiles);  }  JobConf job=new NutchJob(getConf());  job.setJobName("ArcSegmentCreator " + arcFiles);  String segName=generateSegmentName();  job.set(Nutch.SEGMENT_NAME_KEY,segName);  FileInputFormat.addInputPath(job,arcFiles);  job.setInputFormat(ArcInputFormat.class);  job.setMapperClass(ArcSegmentCreator.class);  FileOutputFormat.setOutputPath(job,new Path(segmentsOutDir,segName));  job.setOutputFormat(FetcherOutputFormat.class);  job.setOutputKeyClass(Text.class);  job.setOutputValueClass(NutchWritable.class);  JobClient.runJob(job);  long end=System.currentTimeMillis();  LOG.info("ArcSegmentCreator: finished at " + sdf.format(end) + ", elapsed: "+ TimingUtil.elapsedTime(start,end));}  }
class C{  public LangSourceLookupDirector(){  this(null);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:13.821 -0500",hash_original_method="1ACC59770DF5E02FD5C6C8AE56F288AE",hash_generated_method="DBA07A4DEC2C4DC6FACF2097EEDC69DA") public SocketException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  public Task(Schedule schedule) throws Exception {  this.taskName=schedule.getTaskName();  this.perforcePath=schedule.getPerforcePath();  this.rScript=schedule.getrScript();  this.startTime=System.currentTimeMillis();  this.owner=schedule.getOwner();  this.emailOnSuccess=schedule.getEmailOnSuccess();  this.parameters=schedule.getParameters();  this.shinyApp=schedule.getShinyApp();  this.jobId=schedule.getJobId();  this.isPython=!rScript.toLowerCase().endsWith(".r");  if (shinyApp) {    try {      URL whatismyip=new URL("http://checkip.amazonaws.com");      BufferedReader in=new BufferedReader(new InputStreamReader(whatismyip.openStream()));      shinyUrl="http://" + in.readLine() + ":"+ parameters.split(" ")[0];      in.close();    } catch (    Exception e) {      e.printStackTrace();      shinyUrl=InetAddress.getLocalHost().getCanonicalHostName() + ":" + parameters.split(" ")[0];    }  }}  }
class C{  @Override public void onClick(View v){  Toast.makeText(getActivity(),"button",Toast.LENGTH_LONG).show();}  }
class C{  public static boolean delete(@Nullable File file){  if (file == null)   return false;  boolean res=true;  if (file.isDirectory()) {    File[] files=file.listFiles();    if (files != null && files.length > 0)     for (    File file1 : files)     if (file1.isDirectory())     res&=delete(file1); else     res&=file1.delete();    res&=file.delete();  } else   res=file.delete();  return res;}  }
class C{  public Checkout copy(){  return Checkout.fromJson(this.toJsonString());}  }
class C{  public boolean multipleReturns() throws LanguageException {  throw new LanguageException("multipleReturns() must be overridden in the subclass.");}  }
class C{  public short[] multiplyMatrix(short[][] M1,short[] m) throws RuntimeException {  if (M1[0].length != m.length) {    throw new RuntimeException("Multiplication is not possible!");  }  short tmp=0;  short[] B=new short[M1.length];  for (int i=0; i < M1.length; i++) {    for (int j=0; j < m.length; j++) {      tmp=GF2Field.multElem(M1[i][j],m[j]);      B[i]=GF2Field.addElem(B[i],tmp);    }  }  return B;}  }
class C{  public void writeToParcel(Parcel dest,int flags){  dest.writeLong(durationMillis);  dest.writeString(serviceDetails);}  }
class C{  public void mainViewClicked(){  getParentStack().pushFrame(new SessionScopedData("<RandomSessionKey>"));  getParentStack().pushFrame(new SecondInSessionViewPresenter());}  }
class C{  final void put(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals,final ByteVector out){  Attribute attr=this;  while (attr != null) {    ByteVector b=attr.write(cw,code,len,maxStack,maxLocals);    out.putShort(cw.newUTF8(attr.type)).putInt(b.length);    out.putByteArray(b.data,0,b.length);    attr=attr.next;  }}  }
class C{  public boolean checkError(){  try {    out.flush();  } catch (  IOException e) {    hadError=true;  }  return hadError;}  }
class C{  public HadoopV1Reporter(HadoopTaskContext ctx){  this.ctx=ctx;}  }
class C{  public SerialIO(String portName,int width){  this.portName=portName;  this.width=width;}  }
class C{  public boolean isInUse(){  return !getReferencingTlds().isEmpty();}  }
class C{  public static <T,R>Function<T,R> memoizeFunction(final Function<T,R> fn){  final Map<T,R> lazy=new ConcurrentHashMap<>();  return null;}  }
class C{  private void addCountsSimRealPerHourGraphs(final FolderType folder,final int timestep,final TimeSpanType timespan){  StringBuffer filename;  ScreenOverlayType overlay;  try {    filename=new StringBuffer(graphname);    filename.append(Integer.toString(timestep));    filename.append(PNG);    CountsSimRealPerHourGraph graph=new CountsSimRealPerHourGraph(this.countComparisonFilter.getCountsForHour(null),this.iterationNumber,filename.toString());    graph.createChart(timestep);    this.writeChartToKmz(filename.toString(),graph.getChart());    overlay=kmlObjectFactory.createScreenOverlayType();    LinkType icon=kmlObjectFactory.createLinkType();    icon.setHref("./" + filename.toString());    overlay.setIcon(icon);    overlay.setName(graph.getChartTitle());    Vec2Type overlayXY=kmlObjectFactory.createVec2Type();    overlayXY.setX(1.0);    overlayXY.setY(1.0);    overlayXY.setXunits(UnitsEnumType.FRACTION);    overlayXY.setYunits(UnitsEnumType.FRACTION);    overlay.setOverlayXY(overlayXY);    Vec2Type screenXY=kmlObjectFactory.createVec2Type();    screenXY.setX(0.98);    screenXY.setY(0.98);    screenXY.setXunits(UnitsEnumType.FRACTION);    screenXY.setYunits(UnitsEnumType.FRACTION);    overlay.setScreenXY(screenXY);    overlay.setAbstractTimePrimitiveGroup(kmlObjectFactory.createTimeSpan(timespan));    folder.getAbstractFeatureGroup().add(kmlObjectFactory.createScreenOverlay(overlay));  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public boolean checkError(){  Writer delegate=out;  if (delegate == null) {    return ioError;  }  flush();  return ioError || delegate.checkError();}  }
class C{  static public long makeCookie(int application,int user){  if (!appIdMap.containsKey(application)) {    throw new AppIDNotRegisteredException(application);  }  long longApp=application;  long longUser=user & USER_MASK;  return (longApp << APP_ID_SHIFT) | longUser;}  }
class C{  public CertificateAlgorithmId(InputStream in) throws IOException {  DerValue val=new DerValue(in);  algId=AlgorithmId.parse(val);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public String localize(String key,String defaultValue){  if (bundle != null && key != null) {    Object o=bundle.get(key);    if (o != null) {      return (String)o;    }  }  return defaultValue;}  }
class C{  public double findMinimum(UnivariateFunction f){  double tol=MachineAccuracy.EPSILON;  return optimize(f,tol);}  }
class C{  public void add(final AbstractInsnNode insn){  ++size;  if (last == null) {    first=insn;    last=insn;  } else {    last.next=insn;    insn.prev=last;  }  last=insn;  cache=null;  insn.index=0;}  }
class C{  public static int convertClipRule(Element e){  Value v=getComputedStyle(e,SVGCSSEngine.CLIP_RULE_INDEX);  return (v.getStringValue().charAt(0) == 'n') ? GeneralPath.WIND_NON_ZERO : GeneralPath.WIND_EVEN_ODD;}  }
class C{  public TimeOfDay withMinuteOfHour(int minute){  int[] newValues=getValues();  newValues=getChronology().minuteOfHour().set(this,MINUTE_OF_HOUR,newValues,minute);  return new TimeOfDay(this,newValues);}  }
class C{  protected void fillMenuBar(IMenuManager menuBar){  menuBar.add(createFileMenu());  menuBar.add(createEditMenu());  menuBar.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));  menuBar.add(createHelpMenu());}  }
class C{  private void closeServerSocket(){  try {    this.serverSocket.close();    log.debug("SMTP Server socket shut down");  } catch (  IOException e) {    log.error("Failed to close server socket.",e);  }}  }
class C{  public void fine(Supplier<String> msgSupplier){  log(Level.FINE,msgSupplier);}  }
class C{  public final void testGetP(){  DSAPublicKeySpec dpks=new DSAPublicKeySpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"),new BigInteger("4"));  assertEquals(2,dpks.getP().intValue());}  }
class C{  public void testMIforRandomGaussianVariablesFromLargeFile() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/10ColsRandomGaussian-1.txt");  double[][] data=afr.getDouble2DMatrix();  int[] kNNs={1,2,4,10,15};  double[] expectedFromMILCA_2={0.01542004,0.01137151,0.00210945,0.00159921,0.00031277};  System.out.println("Kraskov comparison 9 - uncorrelated Gaussian data 1 - large file");  checkMIForGivenData(MatrixUtils.selectColumns(data,new int[]{0}),MatrixUtils.selectColumns(data,new int[]{1}),kNNs,expectedFromMILCA_2);}  }
class C{  private static GatewaySender createGatewaySender(Cache cache,GatewaySenderFunctionArgs gatewaySenderCreateArgs){  GatewaySenderFactory gateway=cache.createGatewaySenderFactory();  Boolean isParallel=gatewaySenderCreateArgs.isParallel();  if (isParallel != null) {    gateway.setParallel(isParallel);  }  Boolean manualStart=gatewaySenderCreateArgs.isManualStart();  if (manualStart != null) {    gateway.setManualStart(manualStart);  }  Integer maxQueueMemory=gatewaySenderCreateArgs.getMaxQueueMemory();  if (maxQueueMemory != null) {    gateway.setMaximumQueueMemory(maxQueueMemory);  }  Integer batchSize=gatewaySenderCreateArgs.getBatchSize();  if (batchSize != null) {    gateway.setBatchSize(batchSize);  }  Integer batchTimeInterval=gatewaySenderCreateArgs.getBatchTimeInterval();  if (batchTimeInterval != null) {    gateway.setBatchTimeInterval(batchTimeInterval);  }  Boolean enableBatchConflation=gatewaySenderCreateArgs.isBatchConflationEnabled();  if (enableBatchConflation != null) {    gateway.setBatchConflationEnabled(enableBatchConflation);  }  Integer socketBufferSize=gatewaySenderCreateArgs.getSocketBufferSize();  if (socketBufferSize != null) {    gateway.setSocketBufferSize(socketBufferSize);  }  Integer socketReadTimeout=gatewaySenderCreateArgs.getSocketReadTimeout();  if (socketReadTimeout != null) {    gateway.setSocketReadTimeout(socketReadTimeout);  }  Integer alertThreshold=gatewaySenderCreateArgs.getAlertThreshold();  if (alertThreshold != null) {    gateway.setAlertThreshold(alertThreshold);  }  Integer dispatcherThreads=gatewaySenderCreateArgs.getDispatcherThreads();  if (dispatcherThreads != null && dispatcherThreads > 1) {    gateway.setDispatcherThreads(dispatcherThreads);    String orderPolicy=gatewaySenderCreateArgs.getOrderPolicy();    gateway.setOrderPolicy(OrderPolicy.valueOf(orderPolicy));  }  Boolean isPersistenceEnabled=gatewaySenderCreateArgs.isPersistenceEnabled();  if (isPersistenceEnabled != null) {    gateway.setPersistenceEnabled(isPersistenceEnabled);  }  String diskStoreName=gatewaySenderCreateArgs.getDiskStoreName();  if (diskStoreName != null) {    gateway.setDiskStoreName(diskStoreName);  }  Boolean isDiskSynchronous=gatewaySenderCreateArgs.isDiskSynchronous();  if (isDiskSynchronous != null) {    gateway.setDiskSynchronous(isDiskSynchronous);  }  String[] gatewayEventFilters=gatewaySenderCreateArgs.getGatewayEventFilter();  if (gatewayEventFilters != null) {    for (    String gatewayEventFilter : gatewayEventFilters) {      Class gatewayEventFilterKlass=forName(gatewayEventFilter,CliStrings.CREATE_GATEWAYSENDER__GATEWAYEVENTFILTER);      gateway.addGatewayEventFilter((GatewayEventFilter)newInstance(gatewayEventFilterKlass,CliStrings.CREATE_GATEWAYSENDER__GATEWAYEVENTFILTER));    }  }  String[] gatewayTransportFilters=gatewaySenderCreateArgs.getGatewayTransportFilter();  if (gatewayTransportFilters != null) {    for (    String gatewayTransportFilter : gatewayTransportFilters) {      Class gatewayTransportFilterKlass=forName(gatewayTransportFilter,CliStrings.CREATE_GATEWAYSENDER__GATEWAYTRANSPORTFILTER);      gateway.addGatewayTransportFilter((GatewayTransportFilter)newInstance(gatewayTransportFilterKlass,CliStrings.CREATE_GATEWAYSENDER__GATEWAYTRANSPORTFILTER));    }  }  return gateway.create(gatewaySenderCreateArgs.getId(),gatewaySenderCreateArgs.getRemoteDistributedSystemId());}  }
class C{  public static void touch(File file) throws IOException {  checkNotNull(file);  if (!file.createNewFile() && !file.setLastModified(System.currentTimeMillis())) {    throw new IOException("Unable to update modification time of " + file);  }}  }
class C{  public static void main(String[] args){  checkCalcForceExertedByXY();}  }
class C{  private static RegisterValue v(Register r){  return r.asValue(kind);}  }
class C{  private void installLayout(JRootPane root){  if (layoutManager == null) {    layoutManager=createLayoutManager();  }  savedOldLayout=root.getLayout();  root.setLayout(layoutManager);}  }
class C{  public FuzzyQueryBuilder(String name,String value){  this(name,(Object)value);}  }
class C{  @Override public void inflict(ConfuseStatus status,StatusList statusList,Entity attacker){  if (statusList.hasStatus(status.getStatusType())) {    return;  }  RPEntity entity=statusList.getEntity();  if (entity == null) {    return;  }  if (attacker == null) {    entity.sendPrivateText(NotificationType.SCENE_SETTING,"You are confused.");  } else {    entity.sendPrivateText(NotificationType.SCENE_SETTING,"You have been confused by " + attacker.getName() + ".");  }  statusList.activateStatusAttribute("status_" + status.getName());  statusList.addInternal(status);  TurnNotifier.get().notifyInSeconds(60,new StatusRemover(statusList,status));}  }
class C{  boolean createSnapshot(String snapshotName,boolean isValidLunCloneSnapshot,boolean async){  NaElement elem=new NaElement("snapshot-create");  elem.addNewChild("volume",name);  elem.addNewChild("snapshot",snapshotName);  elem.addNewChild("async",Boolean.toString(async));  elem.addNewChild("is-valid-lun-clone-snapshot",Boolean.toString(isValidLunCloneSnapshot));  try {    server.invokeElem(elem);  } catch (  Exception e) {    String msg="Failed to create snapshot on volume: " + name;    log.error(msg,e);    throw new NetAppException(msg,e);  }  return true;}  }
class C{  public ConfigurationSocketAdapter configure(URL url) throws RuntimeException {  if (log.isInfoEnabled()) {    log.info("Configuring from url: " + url.toString());  }  try {    ConfigurationSocketAdapterParser.doConfigure(this,url.openStream(),url.toString());    return this;  } catch (  IOException ioe) {    throw new RuntimeException("could not configure from URL: " + url,ioe);  }}  }
class C{  public static void trace(byte level,String s,Throwable t){  if (s == null)   return;  if (level == SEVERE) {    if (!logged.contains(s)) {      TypeScriptValidationCorePlugin.getDefault().getLog().log(new Status(IStatus.ERROR,TypeScriptValidationCorePlugin.PLUGIN_ID,s,t));      logged.add(s);    }  }  if (!TypeScriptValidationCorePlugin.getDefault().isDebugging())   return;  StringBuilder sb=new StringBuilder(TypeScriptValidationCorePlugin.PLUGIN_ID);  sb.append(" ");  sb.append(levelNames[level]);  sb.append(" ");  sb.append(sdf.format(new Date()));  sb.append(" ");  sb.append(s);  System.out.println(sb.toString());  if (t != null)   t.printStackTrace();}  }
class C{  public void displayAll(View v){  try {    getOps().displayAll();  } catch (  RemoteException e) {    Log.d(TAG,"exception " + e);  }}  }
class C{  public BlackVolatilityTermStructure(final Date referenceDate,final Calendar cal){  super(referenceDate,cal,BusinessDayConvention.Following,new DayCounter());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private final int filterStatusBytes(byte[] src,byte[] dest,int totalBytesRead,int maxPacketSize){  final int packetsCount=totalBytesRead / maxPacketSize + (totalBytesRead % maxPacketSize == 0 ? 0 : 1);  for (int packetIdx=0; packetIdx < packetsCount; ++packetIdx) {    final int count=(packetIdx == (packetsCount - 1)) ? (totalBytesRead % maxPacketSize) - MODEM_STATUS_HEADER_LENGTH : maxPacketSize - MODEM_STATUS_HEADER_LENGTH;    if (count > 0) {      System.arraycopy(src,packetIdx * maxPacketSize + MODEM_STATUS_HEADER_LENGTH,dest,packetIdx * (maxPacketSize - MODEM_STATUS_HEADER_LENGTH),count);    }  }  return totalBytesRead - (packetsCount * 2);}  }
class C{  public void disconnected(){}  }
class C{  public Period div(final int scalar){  return this.clone().divAssign(scalar);}  }
class C{  @Override public void run(){  amIActive=true;  String ouptutFile=null;  String shapefileName=null;  int i=0;  int row, col, rows, cols;  InputStream inStream=null;  OutputStream outStream=null;  int progress=0;  Geometry[] JTSGeometries;  GMLWriter gmlWriter=new GMLWriter();  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFilesString=args[0];  if (inputFilesString.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  String[] imageFiles=inputFilesString.split(";");  int numFiles=imageFiles.length;  try {    for (i=0; i < numFiles; i++) {      if (numFiles > 1) {        progress=(int)(100f * i / (numFiles - 1));        updateProgress("Loop " + (i + 1) + " of "+ numFiles+ ":",progress);      }      shapefileName=imageFiles[i];      if (!((new File(shapefileName)).exists())) {        showFeedback("Vector file does not exist.");        break;      }      ShapeFile shapefile=new ShapeFile(shapefileName);      ouptutFile=shapefileName.replace(".shp",".gml");      (new File(ouptutFile)).delete();      fw=new FileWriter(ouptutFile,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      progress=0;      int n=0;      int onePercentOfRecs=shapefile.getNumberOfRecords() / 100;      for (      ShapeFileRecord record : shapefile.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          JTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < JTSGeometries.length; a++) {            str1=gmlWriter.write(JTSGeometries[a]);            out.println(str1);          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        if (n == onePercentOfRecs) {          n=0;          progress++;          updateProgress("Exporting shapefile data:",progress);        }      }    }    showFeedback("Operation complete!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void copyZRotationPoint(MowzieModelRenderer target){  rotationPointZ=target.rotationPointZ;}  }
class C{  public static <E>SynchronizedRichIterable<E> of(RichIterable<E> iterable,Object lock){  return new SynchronizedRichIterable<>(iterable,lock);}  }
class C{  @Override public boolean performClick(){  return mDetector.handlePerformClick();}  }
class C{  public static boolean isEmptyString(CharSequence string){  return (TextUtils.isEmpty(string) || string.toString().equalsIgnoreCase("null"));}  }
class C{  public TreeRTGAcaciaBucheri(){  super();  this.logBlock=Blocks.LOG2.getDefaultState();  this.leavesBlock=Blocks.LEAVES2.getDefaultState();  this.trunkSize=10;}  }
class C{  public static void addPrecisionSawmillRecipe(ItemStack input,ItemStack primaryOutput,ItemStack secondaryOutput,double chance){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addPrecisionSawmillRecipe",ItemStack.class,ItemStack.class,ItemStack.class,Double.TYPE);    m.invoke(null,input,primaryOutput,secondaryOutput,chance);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  public static void updateTokensOnTextRemoval(@NotNull List<? extends TokenInfo> tokens,int startOffset,int endOffset){  final int firstIndex=findTokenInfoIndexByOffset(tokens,startOffset);  if (firstIndex >= tokens.size()) {    return;  }  int removedSymbolsNumber=endOffset - startOffset;  boolean updateOnly=false;  int removeIndexStart=-1;  int removeIndexEnd=-1;  final TokenInfo firstToken=tokens.get(firstIndex);  if (startOffset == firstToken.startOffset) {    if (endOffset < firstToken.endOffset) {      firstToken.endOffset-=removedSymbolsNumber;      updateOnly=true;    } else {      removeIndexStart=removeIndexEnd=firstIndex;    }  } else   if (endOffset <= firstToken.endOffset) {    firstToken.endOffset-=removedSymbolsNumber;    updateOnly=true;  }  for (int i=firstIndex + 1; i < tokens.size(); i++) {    final TokenInfo tokenInfo=tokens.get(i);    if (updateOnly) {      tokenInfo.startOffset-=removedSymbolsNumber;      tokenInfo.endOffset-=removedSymbolsNumber;      continue;    }    if (endOffset >= tokenInfo.endOffset) {      if (removeIndexStart < 0) {        removeIndexStart=i;      }      removeIndexEnd=i;      continue;    }    tokenInfo.startOffset=startOffset;    tokenInfo.endOffset=startOffset + (tokenInfo.endOffset - endOffset);    updateOnly=true;  }  if (removeIndexStart >= 0) {    tokens.subList(removeIndexStart,removeIndexEnd + 1).clear();  }}  }
class C{  public void test() throws Exception {  Similarity sim=getSimilarity("text");  assertEquals(DFISimilarity.class,sim.getClass());  DFISimilarity dfi=(DFISimilarity)sim;  assertTrue(dfi.getDiscountOverlaps());  assertTrue(dfi.getIndependence() instanceof IndependenceChiSquared);}  }
class C{  public Graph<CV,CE> collapseVertexPartitions(VertexPartition<V,E> partitioning){  Graph<V,E> original=partitioning.getGraph();  Graph<CV,CE> collapsed=graph_factory.get();  for (  Set<V> set : partitioning.getVertexPartitions()) {    CV cv=vertex_factory.get();    collapsed.addVertex(vertex_factory.get());    set_collapsedv.put(set,cv);  }  for (  E e : original.getEdges()) {    Collection<V> incident=original.getIncidentVertices(e);    Collection<CV> collapsed_vertices=new HashSet<CV>();    Map<V,Set<V>> vertex_partitions=partitioning.getVertexToPartitionMap();    for (    V v : incident)     collapsed_vertices.add(set_collapsedv.get(vertex_partitions.get(v)));    if (collapsed_vertices.size() > 1) {      CE ce=edge_factory.get();      collapsed.addEdge(ce,collapsed_vertices);    }  }  return collapsed;}  }
class C{  private static boolean overflowInParse(long current,int digit,int radix){  if (current >= 0) {    if (current < maxValueDivs[radix]) {      return false;    }    if (current > maxValueDivs[radix]) {      return true;    }    return (digit > maxValueMods[radix]);  }  return true;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:40.818 -0500",hash_original_method="8DBFD5F046457CCDE72CB0FF01FB7E1A",hash_generated_method="3EBE27587D105331186151656D37C486") @Override public boolean ready() throws IOException {synchronized (lock) {    checkNotClosed();    return 1 == ((end - pos) + (((in.ready())) ? 1 : 0));  }}  }
class C{  public void addMinuteChangeListener(PropertyChangeListener l){  if (!Arrays.asList(this.getMinuteChangeListeners()).contains(l)) {    pcMinutes.addPropertyChangeListener(l);    startAlarm();  }}  }
class C{  public void doRegister(RegisterMeta meta){  registryService.registerMetaSet().add(meta);  Message msg=new Message();  msg.sign(PUBLISH_SERVICE);  msg.data(meta);  Channel ch=channel;  if (attachPublishEventOnChannel(meta,ch)) {    ch.writeAndFlush(msg).addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);    MessageNonAck msgNonAck=new MessageNonAck(msg,ch);    messagesNonAck.put(msgNonAck.id,msgNonAck);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public InputMismatchException(String s){  super(s);}  }
class C{  public boolean waitClusterForming(long timeWait,TimeUnit unit,int iterations,int servers) throws Exception {  if (activeMQServer.getClusterManager().getClusterConnections() == null || activeMQServer.getClusterManager().getClusterConnections().size() == 0) {    return servers == 0;  }  for (int i=0; i < iterations; i++) {    for (    ClusterConnection connection : activeMQServer.getClusterManager().getClusterConnections()) {      if (connection.getTopology().getMembers().size() == servers) {        return true;      }      Thread.sleep(unit.toMillis(timeWait));    }  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:21.174 -0500",hash_original_method="84A07FBCA269378A9147D6530126000E",hash_generated_method="CF6A398FCDDC219326C41A995D5477D8") public static String intToString(int i,int radix){  String str=new String();  str.addTaint(i);  str.addTaint(radix);  return str;}  }
class C{  public static <T>List<CloseableReference<T>> cloneOrNull(Collection<CloseableReference<T>> refs){  if (refs == null) {    return null;  }  List<CloseableReference<T>> ret=new ArrayList<>(refs.size());  for (  CloseableReference<T> ref : refs) {    ret.add(CloseableReference.cloneOrNull(ref));  }  return ret;}  }
class C{  public String modelsToString(){  StringBuffer text=new StringBuffer();  if (m_isLeaf) {    text.append("LM_" + m_leafModelNum + ":"+ super.toString());  } else {    for (    LMTNode m_son : m_sons) {      text.append("\n" + m_son.modelsToString());    }  }  return text.toString();}  }
class C{  protected void DrawLabels(int i){  paint.setColor(Color.BLACK);  if (i > 1) {    float colwidth=horizontal_width_list.get(1) - horizontal_width_list.get(0) - 10;    canvas.drawText(largest_value_set.get(i - 1).getXValue() + "",horizontal_width - (colwidth),Math.min(height,width) - 38,paint);  } else   if (i != 0 && i == 1) {    canvas.drawText(largest_value_set.get(i - 1).getXValue() + "",horizontal_width / 2,Math.min(height,width) - 38,paint);  }}  }
class C{  public void updateEntry(StatusHistoryEntry entry){  data.update(entry);}  }
class C{  public MaterialCollapsibleItem(){  super();}  }
class C{  public static void onlyNominalAttributes(ExampleSet es,String task) throws OperatorException {  onlyNominalAttributes(es.getAttributes(),task);}  }
class C{  private void writePlacemark(String name,String category,String description,String styleName,Location location){  if (location != null) {    printWriter.println("<Placemark>");    printWriter.println("<name>" + StringUtils.formatCData(name) + "</name>");    printWriter.println("<description>" + StringUtils.formatCData(description) + "</description>");    printWriter.println("<TimeStamp><when>" + StringUtils.formatDateTimeIso8601(location.getTime()) + "</when></TimeStamp>");    printWriter.println("<styleUrl>#" + styleName + "</styleUrl>");    writeCategory(category);    printWriter.println("<Point>");    printWriter.println("<coordinates>" + getCoordinates(location,",") + "</coordinates>");    printWriter.println("</Point>");    printWriter.println("</Placemark>");  }}  }
class C{  public ImportAsyncTask(ImportActivity importActivity,boolean importAll,TrackFileFormat trackFileFormat,String path){  this.importActivity=importActivity;  this.importAll=importAll;  this.trackFileFormat=trackFileFormat;  this.path=path;  context=importActivity.getApplicationContext();  completed=false;  successCount=0;  totalCount=0;  trackId=-1L;}  }
class C{  @Override public void IALOAD(Object conc_array,int conc_index){  IntegerValue symb_index=env.topFrame().operandStack.popBv32();  ReferenceExpression array_ref=env.topFrame().operandStack.popRef();  env.heap.initializeReference(conc_array,array_ref);  if (nullReferenceViolation(array_ref,conc_array)) {    return;  }  if (negativeIndexViolation(conc_index,symb_index)) {    return;  }  ReferenceExpression symb_array=(ReferenceExpression)array_ref;  int conc_array_length=Array.getLength(conc_array);  IntegerValue symb_array_length=env.heap.getField("",ARRAY_LENGTH,conc_array,symb_array,conc_array_length);  if (indexTooBigViolation(conc_index,symb_index,conc_array_length,symb_array_length))   return;  int bv32=Array.getInt(conc_array,conc_index);  IntegerValue c=env.heap.array_load(symb_array,conc_index,(long)bv32);  env.topFrame().operandStack.pushBv32(c);}  }
class C{  private void uninstallListeners(){  if (window != null) {    window.removeWindowListener(windowListener);    window.removePropertyChangeListener(propertyChangeListener);  }}  }
class C{  public MemoryModule(final String name,final String path,final RelocatedAddress baseAddress,final long size){  this.name=Preconditions.checkNotNull(name,"IE00751: Name argument can not be null");  this.path=Preconditions.checkNotNull(path,"IE00180: Path argument can not be null");  relocatedAddress=Preconditions.checkNotNull(baseAddress,"IE00752: Base address argument can not be null");  byteSize=size;}  }
class C{  private void storeVoteValueInTx(CachedVote.Type type,long itemId,Vote vote){  checkNotMainThread();  withTransaction(database.value(),null);}  }
class C{  public double optDouble(int index,double defaultValue){  try {    return this.getDouble(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static IsNullValue nullOnComplexPathValue3(){  return instanceByFlagsList[0][NCP3];}  }
class C{  static boolean functionMapName(String name){  if (numericPattern == null) {    numericPattern=Pattern.compile(numericRegex);  }  if (ffPattern == null) {    ffPattern=Pattern.compile(ffRegex);  }  if (frPattern == null) {    frPattern=Pattern.compile(frRegex);  }  Matcher matcher=numericPattern.matcher(name);  if (matcher.matches()) {    return true;  }  matcher=ffPattern.matcher(name);  if (matcher.matches()) {    return true;  }  matcher=frPattern.matcher(name);  if (matcher.matches()) {    return true;  }  return false;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Iterator<NameValuePair> iterator(){  return nameValuePairList.iterator();}  }
class C{  private int checkObjectId(){  CheckType checkType=CheckType.OBJECT_ID;  helper.logMessage("\nStart to check DataObject records id that is illegal.\n",false,toConsole);  DbConsistencyStatus status=getStatusFromZk();  Collection<DataObjectType> resumeDataCfs=resumeFromWorkingPoint(checkType,status.getWorkingPoint());  int totalIllegalCount=0;  for (  DataObjectType dataCf : resumeDataCfs) {    int illegalCount=helper.checkDataObject(dataCf,toConsole);    status=getStatusFromZk();    if (!toConsole && isCancelled(status)) {      cancel(status);    }    if (!toConsole) {      status.update(this.totalCount,checkType.name(),dataCf.getCF().getName(),illegalCount);      persistStatus(status);    }    totalIllegalCount+=illegalCount;  }  String msg=String.format("\nFinish to check DataObject records id: totally checked %d data CFs, " + "%d corrupted rows found.\n",resumeDataCfs.size(),totalIllegalCount);  helper.logMessage(msg,false,toConsole);  return totalIllegalCount;}  }
class C{  public String[] toSRT(){  return new FormatSRT().toFile(this);}  }
class C{  public void addRow(T row){  row.addMouseListener(mouseAdapter);  this.rows.add(row);  if (table != null) {    ((AbstractTableModel)table.getModel()).fireTableRowsInserted(rows.size() - 1,rows.size() - 1);  }}  }
class C{  private boolean isAccountSchemaValid(){  if (m_acctSchema == null) {    return false;  } else   if (m_acctSchema.getC_AcctSchema_ID() == 0) {    return false;  }  return true;}  }
class C{  public DataFormatException(){  super();}  }
class C{  public short wValue(){  return this.controlSetup.getShort(2);}  }
class C{  public boolean doAccessibleAction(int i){  Action[] actions=JTextComponent.this.getActions();  if (i < 0 || i >= actions.length) {    return false;  }  ActionEvent ae=new ActionEvent(JTextComponent.this,ActionEvent.ACTION_PERFORMED,null,EventQueue.getMostRecentEventTime(),getCurrentEventModifiers());  actions[i].actionPerformed(ae);  return true;}  }
class C{  public void close() throws IOException {  long length=cache.getLength();  seek(length);  flushBefore(length);  super.close();  cache.reset();  cache=null;  stream=null;}  }
class C{  public static float scalb(final float f,final int n){  if ((n > -127) && (n < 128)) {    return f * Float.intBitsToFloat((n + 127) << 23);  }  if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {    return f;  }  if (n < -277) {    return (f > 0) ? 0.0f : -0.0f;  }  if (n > 276) {    return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;  }  final int bits=Float.floatToIntBits(f);  final int sign=bits & 0x80000000;  int exponent=(bits >>> 23) & 0xff;  int mantissa=bits & 0x007fffff;  int scaledExponent=exponent + n;  if (n < 0) {    if (scaledExponent > 0) {      return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);    } else     if (scaledExponent > -24) {      mantissa|=1 << 23;      final int mostSignificantLostBit=mantissa & (1 << (-scaledExponent));      mantissa>>>=1 - scaledExponent;      if (mostSignificantLostBit != 0) {        mantissa++;      }      return Float.intBitsToFloat(sign | mantissa);    } else {      return (sign == 0) ? 0.0f : -0.0f;    }  } else {    if (exponent == 0) {      while ((mantissa >>> 23) != 1) {        mantissa<<=1;        --scaledExponent;      }      ++scaledExponent;      mantissa&=0x007fffff;      if (scaledExponent < 255) {        return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);      } else {        return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;      }    } else     if (scaledExponent < 255) {      return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);    } else {      return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;    }  }}  }
class C{  protected void evaluateQoSActions(){  if (log.isTraceEnabled()) {    Set<ObjectInstance> instances=mbeanServer.queryMBeans(null,null);    for (    ObjectInstance instance : instances) {      log.trace("MBean Found:");      log.trace("Class Name:t" + instance.getClassName());      log.trace("Object Name:t" + instance.getObjectName());      log.trace("****************************************");    }  }  int validSentinels=0;  List<Double> currentSentinelRatios=new ArrayList<>();  for (  QoSSentinel sentinel : qosSentinels) {    String name="metrics:name=" + prefix + "routing."+ sentinel.getName()+ ".duration";    try {      ObjectName beanName=new ObjectName(name);      if (mbeanServer.isRegistered(beanName)) {        int currentSampleCount=(Integer)mbeanServer.getAttribute(beanName,"Count");        if (currentSampleCount >= globalQoSConfig.getMinSampleCount()) {          double currentResponseTime=0.0;          if (sentinel.getPercentile() != null) {            currentResponseTime=(Double)mbeanServer.getAttribute(beanName,"" + sentinel.getPercentile() + PERCENTILE_SUFFIX);          } else {            currentResponseTime=(Double)mbeanServer.getAttribute(beanName,"" + globalQoSConfig.getPercentile() + PERCENTILE_SUFFIX);          }          if (sentinel.getLowestPercentileValue() > currentResponseTime) {            sentinel.setLowestPercentileValue(currentResponseTime);          }          currentSentinelRatios.add(currentResponseTime / sentinel.getLowestPercentileValue());          validSentinels++;        } else {          log.warn("Sentinel " + sentinel.getName() + " doesn't have enough samples yet ("+ currentSampleCount+ "/"+ globalQoSConfig.getMinSampleCount()+ ")");        }      } else {        log.warn("MBean {} for sentinel {} is not ready yet ...",name,sentinel.getName());      }    } catch (    MalformedObjectNameException e) {      log.error("Could not load MBean for metric name '" + sentinel.getName() + "'.",e);    }catch (    AttributeNotFoundException e) {    }catch (    InstanceNotFoundException e) {      log.error("Could not find attribute " + sentinel.getPercentile() + PERCENTILE_SUFFIX+ " for the MBean of the metric '"+ sentinel.getName()+ "'.",e);    }catch (    MBeanException|ReflectionException e) {      log.error("Could not load value of attribute " + sentinel.getPercentile() + PERCENTILE_SUFFIX+ " for the MBean of the metric '"+ sentinel.getName()+ "'.",e);    }  }  if (validSentinels >= globalQoSConfig.getMinSentinelCount()) {    int threshold=(int)Math.ceil(validSentinels / 100.0 * globalQoSConfig.getQuorum()) - 1;    Collections.sort(currentSentinelRatios,Collections.reverseOrder());    if (log.isTraceEnabled()) {      for (      double sentinelRatio : currentSentinelRatios) {        log.trace(" -> {}",sentinelRatio);      }    }    log.debug("Successfully read sentinels: {}",validSentinels);    log.debug("Threshold index: {}",threshold);    log.debug("Threshold ratio: {}",currentSentinelRatios.get(threshold));    for (    QoSRule rule : qosRules) {      Double warn=rule.getWarn();      Double reject=rule.getReject();      if (actionNecessary(reject,currentSentinelRatios.get(threshold))) {        log.debug("rule will be rejected: {}",rule.getUrlPattern());        rule.addAction(REJECT_ACTION);      } else {        log.debug("rule will not be rejected: {}",rule.getUrlPattern());        rule.removeAction(REJECT_ACTION);      }      if (actionNecessary(warn,currentSentinelRatios.get(threshold))) {        log.debug("rule will be logged with a warning: {}",rule.getUrlPattern());        rule.addAction(WARN_ACTION);      } else {        log.debug("rule will not be logged with a warning: {}",rule.getUrlPattern());        rule.removeAction(WARN_ACTION);      }    }  } else {    qosRules.forEach(null);  }}  }
class C{  public MultiPercolateRequest documentType(String type){  this.documentType=type;  return this;}  }
class C{  @Override public boolean onScaleBegin(ScaleGestureDetector detector){  return true;}  }
class C{  public void addHierarchyChangeListener(@NotNull final HierarchyChangeListener l){  myListenerList.add(HierarchyChangeListener.class,l);}  }
class C{  private static boolean isSpace(char ch){  return XMLCharacterRecognizer.isWhiteSpace(ch);}  }
class C{  public static Bitmap cropBitmap(Bitmap bitmap,float[] points,int degreesRotated,boolean fixAspectRatio,int aspectRatioX,int aspectRatioY){  Rect rect=getRectFromPoints(points,bitmap.getWidth(),bitmap.getHeight(),fixAspectRatio,aspectRatioX,aspectRatioY);  Matrix matrix=new Matrix();  matrix.setRotate(degreesRotated,bitmap.getWidth() / 2,bitmap.getHeight() / 2);  Bitmap result=Bitmap.createBitmap(bitmap,rect.left,rect.top,rect.width(),rect.height(),matrix,true);  if (result == bitmap) {    result=bitmap.copy(bitmap.getConfig(),false);  }  if (degreesRotated % 90 != 0) {    result=cropForRotatedImage(result,points,rect,degreesRotated,fixAspectRatio,aspectRatioX,aspectRatioY);  }  return result;}  }
class C{  public void doOpen(){  if (!okToAbandon()) {    return;  }  jpgIcon=new ImageIcon("images/jpgIcon.jpg");  gifIcon=new ImageIcon("images/gifIcon.gif");  ExampleFileFilter filter=new ExampleFileFilter(new String[]{"jpg","gif"},"JPEG and GIF Image Files");  ExampleFileChooser fileView=new ExampleFileChooser();  fileView.putIcon("jpg",jpgIcon);  fileView.putIcon("gif",gifIcon);  if (filer1 == null) {    filer1=new JFileChooser();  }  filer1.setFileView(fileView);  filer1.addChoosableFileFilter(filter);  filer1.setFileFilter(filter);  int returnVal=filer1.showOpenDialog(this);  if (returnVal == JFileChooser.APPROVE_OPTION) {    currFileName=filer1.getSelectedFile().getPath();    openFile(currFileName);  }}  }
class C{  @Override public boolean equals(Object compareTo){  if (!(compareTo instanceof NumericItem)) {    return false;  }  NumericItem b=(NumericItem)compareTo;  if (m_attribute.equals(b.getAttribute()) && m_comparison == b.getComparison() && (new Double(m_splitPoint).equals(new Double(b.getSplitPoint())))) {    return true;  }  return false;}  }
class C{  public boolean isRefreshing(){  return mStatus == PTR_STATUS_LOADING;}  }
class C{  public double fileDescriptorUsage(){  try {    final Method getOpenFileDescriptorCount=os.getClass().getDeclaredMethod("getOpenFileDescriptorCount");    getOpenFileDescriptorCount.setAccessible(true);    final Long openFds=(Long)getOpenFileDescriptorCount.invoke(os);    final Method getMaxFileDescriptorCount=os.getClass().getDeclaredMethod("getMaxFileDescriptorCount");    getMaxFileDescriptorCount.setAccessible(true);    final Long maxFds=(Long)getMaxFileDescriptorCount.invoke(os);    return openFds.doubleValue() / maxFds.doubleValue();  } catch (  NoSuchMethodException e) {    return Double.NaN;  }catch (  IllegalAccessException e) {    return Double.NaN;  }catch (  InvocationTargetException e) {    return Double.NaN;  }}  }
class C{  public void actionPerformed(ActionEvent evt){  Element element=getElement();  StringBuilder dataBuffer=new StringBuilder();  HTMLDocument doc=(HTMLDocument)getDocument();  AttributeSet attr=element.getAttributes();  String type=(String)attr.getAttribute(HTML.Attribute.TYPE);  if (type.equals("submit")) {    getFormData(dataBuffer);    submitData(dataBuffer.toString());  } else   if (type.equals("reset")) {    resetForm();  } else   if (type.equals("text") || type.equals("password")) {    if (isLastTextOrPasswordField()) {      getFormData(dataBuffer);      submitData(dataBuffer.toString());    } else {      getComponent().transferFocus();    }  }}  }
class C{  public <E extends Enum<E>>E optEnum(Class<E> clazz,int index,E defaultValue){  try {    Object val=this.opt(index);    if (JSONObject.NULL.equals(val)) {      return defaultValue;    }    if (clazz.isAssignableFrom(val.getClass())) {      @SuppressWarnings("unchecked") E myE=(E)val;      return myE;    }    return Enum.valueOf(clazz,val.toString());  } catch (  IllegalArgumentException e) {    return defaultValue;  }catch (  NullPointerException e) {    return defaultValue;  }}  }
class C{  public CqQuery newCq(String cqName,String queryString,CqAttributes cqAttributes,boolean isDurable) throws QueryInvalidException, CqExistsException, CqException {  if (cqName == null) {    throw new IllegalArgumentException(LocalizedStrings.DefaultQueryService_CQNAME_MUST_NOT_BE_NULL.toLocalizedString());  }  ClientCQ cq=(ClientCQ)getCqService().newCq(cqName,queryString,cqAttributes,this.pool,isDurable);  return cq;}  }
class C{  private void addAndDelete(AddUpdateCommand cmd,List<Query> dbqList) throws IOException {  Document luceneDocument=cmd.getLuceneDocument();  Term idTerm=new Term(idField.getName(),cmd.getIndexedId());synchronized (solrCoreState.getUpdateLock()) {    RefCounted<IndexWriter> iw=solrCoreState.getIndexWriter(core);    try {      IndexWriter writer=iw.get();      writer.updateDocument(idTerm,luceneDocument,cmd.getReq().getSchema().getIndexAnalyzer());      for (      Query q : dbqList) {        writer.deleteDocuments(q);      }    }  finally {      iw.decref();    }    if (ulog != null)     ulog.add(cmd,true);  }}  }
class C{  @Override public boolean isServerOwner(ServerBartender server){  for (int i=0; i < _owners.length; i++) {    ServerBartender serverBar=server(i);    if (serverBar == null) {      continue;    } else     if (serverBar.isSameServer(server)) {      return server.isUp();    } else     if (serverBar.isUp()) {      return false;    }  }  return false;}  }
class C{  @Before public void prepareTestDataIfNeeded() throws Exception {  if (marketplaces.size() != 2) {    WebserviceTestBase.deleteMarketplaces();    create2Marketplaces();  }  if (NUMBER_SERVICES != INITIAL_NUMBER_SERVICES) {    System.out.println("----------------------------------------");    System.out.println("Re-new services... in order to get consistent test data!");    deleteAllServices();    createServicesForMarketplace1(INITIAL_NUMBER_SERVICES);    NUMBER_SERVICES=INITIAL_NUMBER_SERVICES;    System.out.println("----------------------------------------");    sleep();  }  assertTrue(INITIAL_NUMBER_SERVICES == NUMBER_SERVICES);  assertTrue(INITIAL_NUMBER_SERVICES == servicesForMarketplace1.size());}  }
class C{  public static boolean isMountLegal(BattleArmor ba,Mounted newMount,int loc,int trooper){  int numUsedCrits=0;  int numAntiMechWeapons=0;  int numAntiPersonnelWeapons=0;  for (  Mounted m : ba.getEquipment()) {    if (m.getType().hasFlag(MiscType.F_BA_MANIPULATOR)) {      continue;    }    if (m.getType().hasFlag(WeaponType.F_INFANTRY)) {      continue;    }    if (m.getBaMountLoc() == loc && (m.getLocation() == trooper || m.getLocation() == BattleArmor.LOC_SQUAD)) {      if ((m.getType() instanceof WeaponType) && !(m.getType() instanceof InfantryWeapon)) {        numAntiMechWeapons++;      }      if (m.getType().hasFlag(MiscType.F_AP_MOUNT)) {        numAntiPersonnelWeapons++;      }      if (m.getType().isSpreadable()) {        numUsedCrits++;      } else {        numUsedCrits+=m.getType().getCriticals(ba);      }    }  }  int newCrits;  if (newMount.getType().isSpreadable()) {    newCrits=1;  } else {    newCrits=newMount.getType().getCriticals(ba);  }  if ((numUsedCrits + newCrits) <= ba.getNumCrits(loc)) {    if (newMount.getType() instanceof WeaponType) {      if ((numAntiMechWeapons + 1) <= ba.getNumAllowedAntiMechWeapons(loc)) {        return true;      } else {        return false;      }    } else     if (newMount.getType().hasFlag(MiscType.F_AP_MOUNT)) {      if ((numAntiPersonnelWeapons + 1) <= ba.getNumAllowedAntiPersonnelWeapons(loc,trooper)) {        return true;      } else {        return false;      }    } else {      return true;    }  } else {    return false;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setNamedItemNS04.class,args);}  }
class C{  public void zoom(float factor,int focusX,int focusY){  float focusLon=lon(focusX);  float focusLat=lat(focusY);  dotsPerDeg*=factor;  int focusXNew=x(focusLon);  int focusYNew=y(focusLat);  adjust(focusX - focusXNew,focusY - focusYNew);}  }
class C{  public RadialGradientPaint(Point2D center,float radius,float[] fractions,Color[] colors){  this(center,radius,center,fractions,colors);}  }
class C{  public static void compressZip(Resource[] sources,Resource target,ResourceFilter filter) throws IOException {  ZipOutputStream zos=null;  try {    zos=new ZipOutputStream(IOUtil.toBufferedOutputStream(target.getOutputStream()));    compressZip("",sources,zos,filter);  }  finally {    IOUtil.closeEL(zos);  }}  }
class C{  @SuppressWarnings("unchecked") public Object clone() throws CloneNotSupportedException {  BollingerBandsDataset clone=(BollingerBandsDataset)super.clone();  clone.data=(List<IndicatorSeries>)ObjectUtilities.deepClone(this.data);  return clone;}  }
class C{  public static boolean isWhitespaceString(Object object){  if (object != null) {    String s=object.toString();    return s != null && "".equals(s.trim());  }  return false;}  }
class C{  @RequestMapping(value="/businessObjectData",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_POST) public BusinessObjectData createBusinessObjectData(@RequestBody BusinessObjectDataCreateRequest businessObjectDataCreateRequest){  BusinessObjectData businessObjectData=businessObjectDataService.createBusinessObjectData(businessObjectDataCreateRequest);  businessObjectDataDaoHelper.triggerNotificationsForCreateBusinessObjectData(businessObjectData);  return businessObjectData;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  Task clone=(Task)super.clone();  return clone;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static long idForGlobalId(long globalId){  return Syncing.idForGlobalId(CONTENT_URI,globalId);}  }
class C{  public static BufferedWriter newWriter(File file,Charset charset) throws FileNotFoundException {  checkNotNull(file);  checkNotNull(charset);  return new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file),charset));}  }
class C{  public SystemException(String msg,Throwable ex){  super(msg,ex);}  }
class C{  public void send(String value){  JsonObject obj=new JsonObject().put(ConfigConstants.VALUE_FIELD,value).put(TYPE_FIELD,MessageType.SIMPLE.value);  send(obj);}  }
class C{  private void checkUpdateRemoteControlDisplay_syncAfRcs(int infoChangedFlags){  if (mRCStack.isEmpty() || mFocusStack.isEmpty()) {    clearRemoteControlDisplay_syncAfRcs();    return;  }  FocusStackEntry af=null;  try {    for (int index=mFocusStack.size() - 1; index >= 0; index--) {      FocusStackEntry fse=mFocusStack.elementAt(index);      if ((fse.mStreamType == AudioManager.STREAM_MUSIC) || (fse.mFocusChangeType == AudioManager.AUDIOFOCUS_GAIN)) {        af=fse;        break;      }    }  } catch (  ArrayIndexOutOfBoundsException e) {    Log.e(TAG,"Wrong index accessing audio focus stack when updating RCD: " + e);    af=null;  }  if (af == null) {    clearRemoteControlDisplay_syncAfRcs();    return;  }  if ((mRCStack.peek().mCallingPackageName != null) && (af.mPackageName != null) && !(mRCStack.peek().mCallingPackageName.compareTo(af.mPackageName) == 0)) {    clearRemoteControlDisplay_syncAfRcs();    return;  }  if (mRCStack.peek().mCallingUid != af.mCallingUid) {    clearRemoteControlDisplay_syncAfRcs();    return;  }  updateRemoteControlDisplay_syncAfRcs(infoChangedFlags);}  }
class C{  public static Map<String,Object> quickRunAllProductionRunTasks(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=ServiceUtil.returnSuccess();  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  GenericValue userLogin=(GenericValue)context.get("userLogin");  String productionRunId=(String)context.get("productionRunId");  ProductionRun productionRun=new ProductionRun(productionRunId,delegator,dispatcher);  if (!productionRun.exist()) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotExists",locale));  }  List<GenericValue> tasks=productionRun.getProductionRunRoutingTasks();  GenericValue oneTask=null;  String taskId=null;  for (int i=0; i < tasks.size(); i++) {    oneTask=tasks.get(i);    taskId=oneTask.getString("workEffortId");    try {      Map<String,Object> serviceContext=FastMap.newInstance();      serviceContext.put("productionRunId",productionRunId);      serviceContext.put("taskId",taskId);      serviceContext.put("userLogin",userLogin);      dispatcher.runSync("quickRunProductionRunTask",serviceContext);    } catch (    GenericServiceException e) {      Debug.logError(e,"Problem calling the quickRunProductionRunTask service",module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusNotChanged",locale));    }  }  return result;}  }
class C{  @Override protected void keyTyped(char par1,int par2){  if (par2 == 28 || par2 == 156)   actionPerformed((GuiButton)buttonList.get(0));}  }
class C{  public static <T>boolean any(Iterable<T> self,@ClosureParams(FirstParam.FirstGenericType.class) Closure closure){  BooleanClosureWrapper bcw=new BooleanClosureWrapper(closure);  for (Iterator<T> iter=self.iterator(); iter.hasNext(); ) {    if (bcw.call(iter.next()))     return true;  }  return false;}  }
class C{  public List<List<Integer>> combinationSum(int[] candidates,int target){  List<List<Integer>> res=new ArrayList<List<Integer>>();  if (candidates == null || candidates.length == 0)   return res;  Arrays.sort(candidates);  helper(candidates,target,0,new ArrayList<Integer>(),res);  return res;}  }
class C{  public String doNotMakeSplitPointActualValueTipText(){  return "If true, the split point is not relocated to an actual data value." + " This can yield substantial speed-ups for large datasets with numeric attributes.";}  }
class C{  public void disable(){  for (  GetJobsAction<K,V> getJobsAction : actions) {    getJobsAction.disable();  }}  }
class C{  private static Recharge buildTalkRecharge(String title){  Recharge.Amount amount=new Recharge.Amount(25,PlanConstants.TALK_STEP_AMOUNT);  Recharge.MetaData metaData=new Recharge.MetaData(title,PlanConstants.TALK_UNIT,R.drawable.talk_dark_gray);  return new Recharge(amount,PlanConstants.TALK_DOLLARS_PER_STEP,metaData);}  }
class C{  public static NbtInputStream fromInflated(InputStream in,NbtLimiter limiter){  return new NbtInputStream(new DataInputStream(new BufferedInputStream(new InflaterInputStream(new NbtInputLimitedStream(in,limiter)))));}  }
class C{  public static <T extends Number,V>void show(BackgroundTask<T,V> task,@Nullable String title,@Nullable String message,Number total,boolean cancelAllowed){  show(task,title,message,total,cancelAllowed,false);}  }
class C{  public void transpose(){  if (matrixValid) {    if (this.matrix.length == 16) {      float[] newMatrix=new float[16];      for (int i=0; i < 4; i++) {        int k=i * 4;        newMatrix[k]=matrix[i];        newMatrix[k + 1]=matrix[4 + i];        newMatrix[k + 2]=matrix[8 + i];        newMatrix[k + 3]=matrix[12 + i];      }      matrix=newMatrix;    } else {      float[] newMatrix=new float[9];      for (int i=0; i < 3; i++) {        int k=i * 3;        newMatrix[k]=matrix[i];        newMatrix[k + 1]=matrix[3 + i];        newMatrix[k + 2]=matrix[6 + i];      }      matrix=newMatrix;    }  }}  }
class C{  public static void exportRemote(Map<String,String> properties){  final int index=counter.getAndIncrement();  Perf perf=Perf.getPerf();  for (  Map.Entry<String,String> entry : properties.entrySet()) {    perf.createString(REMOTE_CONNECTOR_COUNTER_PREFIX + index + "."+ entry.getKey(),1,Units.STRING.intValue(),entry.getValue());  }}  }
class C{  private static void cleanDirectory(File path){  if (path == null)   return;  if (path.exists()) {    for (    File f : path.listFiles()) {      if (f.isDirectory())       cleanDirectory(f);      f.delete();    }  }}  }
class C{  public boolean isEmpty(){  return warnings.isEmpty();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.272 -0500",hash_original_method="7B6B61AB972DEFAAC29D5DA42EF8C210",hash_generated_method="98EF1EEBE7B091E23404DE1FD813A782") public boolean op(Region region,Op op){  return op(this,region,op);}  }
class C{  public static int clear(int accflags,int clearBit){  return accflags & ~clearBit;}  }
class C{  public final HashCode append(int value){  return hashCode.append(value);}  }
class C{  public void onRecentTabsPageOpened(){  if (!mCanDisableSessionInvalidations)   return;  ++mNumRecentTabPages;  if (mNumRecentTabPages == 1) {    setSessionInvalidationsEnabled(true,REGISTER_FOR_SESSION_SYNC_INVALIDATIONS_DELAY_MS);  }}  }
class C{  private void logItem(final PreparedStatement ps,final String name,final String slotName,final RPObject item) throws SQLException {  final String itemName=item.get("name");  int quantity=1;  if (item.has("quantity")) {    quantity=item.getInt("quantity");  }  int itemid=-1;  if (item.has("logid")) {    itemid=item.getInt("logid");  }  ps.setDate(1,date);  ps.setString(2,name);  ps.setString(3,slotName);  ps.setInt(4,itemid);  ps.setString(5,itemName);  ps.setInt(6,quantity);  ps.executeUpdate();}  }
class C{  private Object readResolve(){  return iChronology.dayOfWeek();}  }
class C{  public Minute(Date time,TimeZone zone){  this(time,zone,Locale.getDefault());}  }
class C{  public static Properties snapshot(){  Properties sysProps=(Properties)System.getProperties().clone();  Iterator<Map.Entry<Object,Object>> iter=sysProps.entrySet().iterator();  while (iter.hasNext()) {    Map.Entry entry=iter.next();    if (!(entry.getValue() instanceof String) || !(entry.getKey() instanceof String))     iter.remove();  }  return sysProps;}  }
class C{  @Override public String toString(){  return buf.toString();}  }
class C{  protected Geometry transformLinearRing(LinearRing geom,Geometry parent){  boolean removeDegenerateRings=parent instanceof Polygon;  Geometry simpResult=super.transformLinearRing(geom,parent);  if (removeDegenerateRings && !(simpResult instanceof LinearRing))   return null;  ;  return simpResult;}  }
class C{  private void generateCacheServer(CacheServerConfig config) throws SAXException {  handler.startElement("",CACHE_SERVER,CACHE_SERVER,EMPTY);  generateEntityConfig(config);  String classpath=config.getClassPath();  if (classpath != null) {    handler.startElement("",CLASSPATH,CLASSPATH,EMPTY);    handler.characters(classpath.toCharArray(),0,classpath.length());    handler.endElement("",CLASSPATH,CLASSPATH);  }  handler.endElement("",CACHE_SERVER,CACHE_SERVER);}  }
class C{  public void stopCollect(IgniteEx g,String visorKey){synchronized (listenVisor) {    listenVisor.remove(visorKey);    tryDisableEvents(g);  }}  }
class C{  @Override public final boolean delete(DBIDRef id){  O obj=relation.get(id);  IndexTreePath<RdKNNEntry> deletionPath=findPathToObject(getRootPath(),obj,id);  if (deletionPath == null) {    return false;  }  deletePath(deletionPath);  return true;}  }
class C{  public byte[] blobValue(){  return ((byte[])value);}  }
class C{  private final void aggregateOpportunities(final ActivityFacilities opportunities,Network network){  log.info("Aggregating " + opportunities.getFacilities().size() + " opportunities with identical nearest node ...");  Map<Id<Node>,AggregationObject> opportunityClusterMap=new ConcurrentHashMap<>();  ProgressBar bar=new ProgressBar(opportunities.getFacilities().size());  for (  ActivityFacility opportunity : opportunities.getFacilities().values()) {    bar.update();    Node nearestNode=NetworkUtils.getNearestNode(((Network)network),opportunity.getCoord());    double distance_meter=NetworkUtils.getEuclideanDistance(opportunity.getCoord(),nearestNode.getCoord());    double VjkWalkTravelTime=this.betaWalkTT * (distance_meter / this.walkSpeedMeterPerHour);    double VjkWalkDistance=this.betaWalkTD * distance_meter;    double expVjk=Math.exp(this.logitScaleParameter * (VjkWalkTravelTime + VjkWalkDistance));    AggregationObject jco=opportunityClusterMap.get(nearestNode.getId());    if (jco == null) {      jco=new AggregationObject(opportunity.getId(),null,null,nearestNode,0.);      opportunityClusterMap.put(nearestNode.getId(),jco);    }    if (cnt == 0) {      cnt++;      log.warn("ignoring the capacities of the facilities");      log.warn(Gbl.ONLYONCE);    }    jco.addObject(opportunity.getId(),expVjk);  }  log.info("Aggregated " + opportunities.getFacilities().size() + " number of opportunities to "+ opportunityClusterMap.size()+ " nodes.");  this.aggregatedOpportunities=opportunityClusterMap.values().toArray(new AggregationObject[opportunityClusterMap.size()]);}  }
class C{  public CBCBlockCipherMac(BlockCipher cipher,BlockCipherPadding padding){  this(cipher,(cipher.getBlockSize() * 8) / 2,padding);}  }
class C{  public static void checkSymbol(String name,int id,IonValue value){  checkType(IonType.SYMBOL,value);  IonSymbol sym=(IonSymbol)value;  assertFalse(value.isNullValue());  if (name == null) {    try {      sym.stringValue();      fail("Expected " + UnknownSymbolException.class);    } catch (    UnknownSymbolException e) {      assertEquals(id,e.getSid());    }  } else {    assertEquals("symbol name",name,sym.stringValue());  }  int sid=sym.symbolValue().getSid();  if (sid != id) {    assertEquals("symbol id",id,sym.symbolValue().getSid());  }  checkSymbol(name,id,sym.symbolValue());}  }
class C{  public FactoryConfigurationError(){  this.exception=null;}  }
class C{  private static String buildCommand(final Class classToExecute,final String classPathArguments,final String[] args){  StringBuilder commandBuilder=new StringBuilder();  commandBuilder.append(javaPath).append(" ");  commandBuilder.append("-cp ").append(System.getProperty("test.classes",".")).append(File.pathSeparatorChar);  if (classPathArguments.trim().length() > 0) {    commandBuilder.append(classPathArguments).append(" ");  }  commandBuilder.append(" ");  commandBuilder.append(classToExecute.getName());  for (  String argument : args) {    commandBuilder.append(" ").append(argument);  }  command=commandBuilder.toString();  return command;}  }
class C{  public static void main(String... args) throws Exception {  Class.forName("org.h2.Driver");  Connection conn=DriverManager.getConnection("jdbc:h2:mem:","sa","");  Statement stat=conn.createStatement();  stat.execute("CREATE ALIAS IS_PRIME " + "FOR \"org.h2.samples.Function.isPrime\" ");  ResultSet rs;  rs=stat.executeQuery("SELECT IS_PRIME(X), X " + "FROM SYSTEM_RANGE(1, 20) ORDER BY X");  while (rs.next()) {    boolean isPrime=rs.getBoolean(1);    if (isPrime) {      int x=rs.getInt(2);      System.out.println(x + " is prime");    }  }  stat.execute("CREATE TABLE TEST(ID INT) AS " + "SELECT X FROM SYSTEM_RANGE(1, 100)");  PreparedStatement prep;  prep=conn.prepareStatement("SELECT * FROM TABLE(X INT=?, O INT=?) J " + "INNER JOIN TEST T ON J.X=T.ID ORDER BY J.O");  prep.setObject(1,new Integer[]{30,20});  prep.setObject(2,new Integer[]{1,2});  rs=prep.executeQuery();  while (rs.next()) {    System.out.println(rs.getInt(1));  }  prep.close();  rs.close();  stat.execute("CREATE ALIAS MATRIX " + "FOR \"org.h2.samples.Function.getMatrix\" ");  prep=conn.prepareStatement("SELECT * FROM MATRIX(?) " + "ORDER BY X, Y");  prep.setInt(1,2);  rs=prep.executeQuery();  while (rs.next()) {    System.out.println(rs.getInt(1) + "/" + rs.getInt(2));  }  prep.close();  stat.execute("create alias make_point as $$ " + "java.awt.Point newPoint(int x, int y) { " + "return new java.awt.Point(x, y); } $$");  stat.execute("create alias get_x as $$ " + "int pointX(java.awt.geom.Point2D p) { " + "return (int) p.getX(); } $$");  rs=stat.executeQuery("call get_x(make_point(10, 20))");  while (rs.next()) {    System.out.println(rs.getString(1));  }  stat.close();  conn.close();}  }
class C{  @Override public boolean next() throws SQLException {  if (source != null) {    rowId++;    currentRow=source.readRow();    if (currentRow != null) {      return true;    }  } else   if (rows != null && rowId < rows.size()) {    rowId++;    if (rowId < rows.size()) {      currentRow=rows.get(rowId);      return true;    }    currentRow=null;  }  if (autoClose) {    close();  }  return false;}  }
class C{  private void printMembers(List<BodyDeclaration> members,Object arg){  for (  BodyDeclaration member : members) {    printer.printLn();    member.accept(this,arg);    printer.printLn();  }}  }
class C{  private File sourceFileForClass(String binaryName,File destDir){  return fileForClass(binaryName,destDir,".java");}  }
class C{  @Override public boolean needsMaterialization(){  return false;}  }
class C{  public TIntHashSet(){}  }
class C{  @Override public void actionPerformed(ActionEvent e){  searchMetrics=null;  if (e == null || e.getSource() == clearButton) {    currState=game.getInitialState();  } else   if (!game.isTerminal(currState)) {    if (e.getSource() == proposeButton) {      proposeMove();    } else     if (e.getSource() instanceof GridElement) {      GridElement el=(GridElement)e.getSource();      currState=game.getResult(currState,el.col);    }  }  repaint();  updateStatus();}  }
class C{  public static ComplexColumnInfo<? extends ComplexValue> create(ColumnImpl column,ByteBuffer buffer,int offset) throws IOException {  int complexTypeId=buffer.getInt(offset + column.getFormat().OFFSET_COLUMN_COMPLEX_ID);  DatabaseImpl db=column.getDatabase();  TableImpl complexColumns=db.getSystemComplexColumns();  IndexCursor cursor=CursorBuilder.createCursor(complexColumns.getPrimaryKeyIndex());  if (!cursor.findFirstRowByEntry(complexTypeId)) {    throw new IOException(column.withErrorContext("Could not find complex column info for complex column with id " + complexTypeId));  }  Row cColRow=cursor.getCurrentRow();  int tableId=cColRow.getInt(COL_TABLE_ID);  if (tableId != column.getTable().getTableDefPageNumber()) {    throw new IOException(column.withErrorContext("Found complex column for table " + tableId + " but expected table "+ column.getTable().getTableDefPageNumber()));  }  int flatTableId=cColRow.getInt(COL_FLAT_TABLE_ID);  int typeObjId=cColRow.getInt(COL_COMPLEX_TYPE_OBJECT_ID);  TableImpl typeObjTable=db.getTable(typeObjId);  TableImpl flatTable=db.getTable(flatTableId);  if ((typeObjTable == null) || (flatTable == null)) {    throw new IOException(column.withErrorContext("Could not find supporting tables (" + typeObjId + ", "+ flatTableId+ ") for complex column with id "+ complexTypeId));  }  if (isMultiValueColumn(typeObjTable)) {    return new MultiValueColumnInfoImpl(column,complexTypeId,typeObjTable,flatTable);  } else   if (isAttachmentColumn(typeObjTable)) {    return new AttachmentColumnInfoImpl(column,complexTypeId,typeObjTable,flatTable);  } else   if (isVersionHistoryColumn(typeObjTable)) {    return new VersionHistoryColumnInfoImpl(column,complexTypeId,typeObjTable,flatTable);  }  LOG.warn(column.withErrorContext("Unsupported complex column type " + typeObjTable.getName()));  return new UnsupportedColumnInfoImpl(column,complexTypeId,typeObjTable,flatTable);}  }
class C{  public ReadPrefReadWriteLockManager(boolean trackLocks){  super(trackLocks);}  }
class C{  @Override public Enumeration<String> enumerateRequests(){  Vector<String> newVector=new Vector<String>(0);  if (m_visualizeDataSet != null) {    newVector.addElement("Show plot");  }  return newVector.elements();}  }
class C{  public void open(File file){  Object[] data;  java.util.List<AbstractObjectRenderer> renderers;  JPanel panel;  m_TabbedPane.removeAll();  try {    data=SerializationHelper.readAll(file.getAbsolutePath());    for (    Object obj : data) {      if (obj == null)       continue;      JTextArea text=new JTextArea(20,40);      text.setFont(GUIHelper.getMonospacedFont());      renderers=AbstractObjectRenderer.getRenderer(obj);      if (renderers.size() == 0)       continue;      panel=new JPanel(new BorderLayout());      renderers.get(0).render(obj,panel);      m_TabbedPane.addTab(obj.getClass().getName(),panel);    }    m_RecentFilesHandler.addRecentItem(file);    m_LabelFile.setText(file.getAbsolutePath());  } catch (  Exception e) {    m_TabbedPane.removeAll();    m_LabelFile.setText(NO_FILE_LOADED);    System.err.println("Failed to load data from '" + file + "':");    e.printStackTrace();    JOptionPane.showMessageDialog(this,"Failed to load dataset from '" + file + "':\n"+ e,"Error loading",JOptionPane.ERROR_MESSAGE);  }}  }
class C{  @Override public CRL engineGenerateCRL(InputStream is) throws CRLException {  if (is == null) {    crlCache.clear();    throw new CRLException("Missing input stream");  }  try {    byte[] encoding=readOneBlock(is);    if (encoding != null) {      X509CRLImpl crl=getFromCache(crlCache,encoding);      if (crl != null) {        return crl;      }      crl=new X509CRLImpl(encoding);      addToCache(crlCache,crl.getEncodedInternal(),crl);      return crl;    } else {      throw new IOException("Empty input");    }  } catch (  IOException ioe) {    throw new CRLException(ioe.getMessage());  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof ThermometerPlot)) {    return false;  }  ThermometerPlot that=(ThermometerPlot)obj;  if (!super.equals(obj)) {    return false;  }  if (!ObjectUtilities.equal(this.rangeAxis,that.rangeAxis)) {    return false;  }  if (this.axisLocation != that.axisLocation) {    return false;  }  if (this.lowerBound != that.lowerBound) {    return false;  }  if (this.upperBound != that.upperBound) {    return false;  }  if (!ObjectUtilities.equal(this.padding,that.padding)) {    return false;  }  if (!ObjectUtilities.equal(this.thermometerStroke,that.thermometerStroke)) {    return false;  }  if (!PaintUtilities.equal(this.thermometerPaint,that.thermometerPaint)) {    return false;  }  if (this.units != that.units) {    return false;  }  if (this.valueLocation != that.valueLocation) {    return false;  }  if (!ObjectUtilities.equal(this.valueFont,that.valueFont)) {    return false;  }  if (!PaintUtilities.equal(this.valuePaint,that.valuePaint)) {    return false;  }  if (!ObjectUtilities.equal(this.valueFormat,that.valueFormat)) {    return false;  }  if (!PaintUtilities.equal(this.mercuryPaint,that.mercuryPaint)) {    return false;  }  if (this.showValueLines != that.showValueLines) {    return false;  }  if (this.subrange != that.subrange) {    return false;  }  if (this.followDataInSubranges != that.followDataInSubranges) {    return false;  }  if (!equal(this.subrangeInfo,that.subrangeInfo)) {    return false;  }  if (this.useSubrangePaint != that.useSubrangePaint) {    return false;  }  if (this.bulbRadius != that.bulbRadius) {    return false;  }  if (this.columnRadius != that.columnRadius) {    return false;  }  if (this.gap != that.gap) {    return false;  }  for (int i=0; i < this.subrangePaint.length; i++) {    if (!PaintUtilities.equal(this.subrangePaint[i],that.subrangePaint[i])) {      return false;    }  }  return true;}  }
class C{  public DefaultTreeColouring sampleTreeColouring(Tree tree,ColourChangeMatrix colourChangeMatrix,MetaPopulation mp){  populateEquilibriumColourArray(colourChangeMatrix);  computeIntervals(tree,mp);  DefaultTreeColouring colouring=new DefaultTreeColouring(2,tree);  logNodePartialsRescaling=0.0;  prune(tree,tree.getRoot(),colourChangeMatrix);  calculateMeanColourCounts(tree,colourChangeMatrix);  logNodePartialsRescaling=0.0;  double[] rootPartials=pruneEM(tree,tree.getRoot(),colourChangeMatrix,mp);  if (useSecondColourIteration) {    calculateMeanColourCountsEM(tree,tree.getRoot(),colourChangeMatrix);    logNodePartialsRescaling=0.0;    rootPartials=pruneEM(tree,tree.getRoot(),colourChangeMatrix,mp);  }  double normalization=0.0;  for (int i=0; i < colourCount; i++) {    normalization+=equilibriumColours[i] * rootPartials[i];  }  double logNormalization=Math.log(normalization) + logNodePartialsRescaling;  double logP=sampleEM(tree,tree.getRoot(),colourChangeMatrix,mp,colouring) - logNormalization;  colouring.setLogProbabilityDensity(logP);  if (debugProposalProbabilityCalculator) {    double logP2=getProposalProbability(colouring,tree,colourChangeMatrix,mp);    System.out.println("Sampling proposal probability " + logP + ", re-calculated as "+ logP2+ " (norm="+ logNormalization+ ")");  }  return colouring;}  }
class C{  public StringSet fetchDeviceDataMapEntry(String key){  if (getDeviceDataMap() == null || !getDeviceDataMap().containsKey(key)) {    return new StringSet();  }  return getDeviceDataMap().get(key);}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  public Expression nextValid(final Iterator<Expression> it){  while (it.hasNext()) {    final Expression expr=it.next();    if (!isIgnorable(expr)) {      return expr;    }  }  return null;}  }
class C{  public void writeString(String s){  if (s == null)   writeShort((short)-1); else   writeUTF(s);}  }
class C{  static void put(Pointer address,int index,byte value){  getAddressFromPointer(address).store(value,Offset.fromIntSignExtend(index));}  }
class C{  private RemoteClass(BatchEnvironment env,ClassDoc implClass){  this.env=env;  this.implClass=implClass;}  }
class C{  public void initializePackageContents(){  if (isInitialized)   return;  isInitialized=true;  setName(eNAME);  setNsPrefix(eNS_PREFIX);  setNsURI(eNS_URI);  ModelPackage theModelPackage=(ModelPackage)EPackage.Registry.INSTANCE.getEPackage(ModelPackage.eNS_URI);  FunctionblockPackage theFunctionblockPackage=(FunctionblockPackage)EPackage.Registry.INSTANCE.getEPackage(FunctionblockPackage.eNS_URI);  informationModelEClass.getESuperTypes().add(theModelPackage.getModel());  initEClass(informationModelEClass,InformationModel.class,"InformationModel",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getInformationModel_Properties(),this.getFunctionblockProperty(),null,"properties",null,0,-1,InformationModel.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(functionblockPropertyEClass,FunctionblockProperty.class,"FunctionblockProperty",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getFunctionblockProperty_Name(),ecorePackage.getEString(),"name",null,0,1,FunctionblockProperty.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getFunctionblockProperty_Description(),ecorePackage.getEString(),"description",null,0,1,FunctionblockProperty.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFunctionblockProperty_Type(),theFunctionblockPackage.getFunctionblockModel(),null,"type",null,0,1,FunctionblockProperty.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  createResource(eNS_URI);}  }
class C{  public static void clearImageCacheForMediaEntity(MediaEntity entity){  List<MediaFile> mediaFiles=new ArrayList<>(entity.getMediaFiles());  for (  MediaFile mediaFile : mediaFiles) {    if (mediaFile.isGraphic()) {      Path file=ImageCache.getCachedFile(mediaFile.getFileAsPath());      if (Files.exists(file)) {        Utils.deleteFileSafely(file);      }    }  }}  }
class C{  @Override public boolean canRead(){  return getDelegate().canRead();}  }
class C{  @Override public boolean conditionOk(Example example){  return example.equalValue(example.getAttributes().getLabel(),example.getAttributes().getPredictedLabel());}  }
class C{  private void nextChunk() throws IOException {  if (!bof) {    readCRLF();  }  chunkSize=getChunkSizeFromInputStream(in);  bof=false;  pos=0;  if (chunkSize == 0) {    eof=true;  }}  }
class C{  public Object sendAsync(final Message query,final ResolverListener listener){  final Object id;synchronized (this) {    id=new Integer(uniqueID++);  }  Record question=query.getQuestion();  String qname;  if (question != null)   qname=question.getName().toString(); else   qname="(none)";  String name=this.getClass() + ": " + qname;  Thread thread=new ResolveThread(this,query,id,listener);  thread.setName(name);  thread.setDaemon(true);  thread.start();  return id;}  }
class C{  public void expand() throws MacroException {  Enumeration names;  names=macros.keys();  while (names.hasMoreElements()) {    String name=(String)names.nextElement();    if (isUsed(name))     macros.put(name,expandMacro(name,getDefinition(name)));  }}  }
class C{  public ParameterBlock add(byte b){  return add(new Byte(b));}  }
class C{  public void processServerResponse(int response,ResponseData rawData){  if (response != Policy.RETRY) {    setRetryCount(0);  } else {    setRetryCount(mRetryCount + 1);  }  if (response == Policy.LICENSED) {    Map<String,String> extras=decodeExtras(rawData.extra);    mLastResponse=response;    setValidityTimestamp(extras.get("VT"));    setRetryUntil(extras.get("GT"));    setMaxRetries(extras.get("GR"));  } else   if (response == Policy.NOT_LICENSED) {    setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP);    setRetryUntil(DEFAULT_RETRY_UNTIL);    setMaxRetries(DEFAULT_MAX_RETRIES);  }  setLastResponse(response);  mPreferences.commit();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void main(String[] args) throws IOException {  new TcpServer();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Version writtenBy(){  return writtenBy;}  }
class C{  public ImmutableMultimap<State,Service> servicesByState(){  return state.servicesByState();}  }
class C{  @RequestMapping(value="/hive",method={RequestMethod.GET}) @ResponseBody private static List<String> showHiveDatabases() throws IOException {  IHiveClient hiveClient=HiveClientFactory.getHiveClient();  List<String> results=null;  try {    results=hiveClient.getHiveDbNames();  } catch (  Exception e) {    e.printStackTrace();    throw new IOException(e);  }  return results;}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer("MWMDefinition[").append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  public void addGroupName(String groupName){  groupNames.add(groupName);}  }
class C{  public void testContainsWithNull(){  CharArraySet set=new CharArraySet(1,true);  expectThrows(NullPointerException.class,null);  expectThrows(NullPointerException.class,null);  expectThrows(NullPointerException.class,null);}  }
class C{  public double mouseX(){synchronized (mouseLock) {    return mouseX;  }}  }
class C{  public static void until(Callable<Boolean> condition){  until(condition,10,TimeUnit.SECONDS);}  }
class C{  public void report(){  ui.message("Merged codebase generated at: %s",mergedCodebase.path().getAbsolutePath());  if (failedToMergeFiles.isEmpty()) {    ui.message("%d files merged successfully. No merge conflicts.",mergedFiles.size());  } else {    ui.message("%d files merged successfully.\n%d files have merge " + "conflicts. Edit the following files to resolve conflicts:\n%s",mergedFiles.size(),failedToMergeFiles.size(),failedToMergeFiles);  }}  }
class C{  public IsilonList<IsilonSMBShare> listShares(String resumeToken,String zoneName) throws IsilonException {  URI uri=URI_SMB_SHARES;  if (zoneName != null) {    String baseUrl=getURIWithZoneName(_baseUrl.resolve(uri).toString(),zoneName);    uri=URI.create(baseUrl);    sLogger.info("get list of shares for accesszone {} and uri {}",zoneName,uri.toString());  } else {    uri=_baseUrl.resolve(uri);  }  return list(_baseUrl.resolve(uri),"shares",IsilonSMBShare.class,resumeToken);}  }
class C{  synchronized private FileChannel reopenChannel() throws IOException {  assertOpen();  if (raf != null && raf.getChannel().isOpen()) {    return raf.getChannel();  }  if (temporaryStore && !fileOpened) {    throw new AssertionError("TemporaryStore not yet open: " + file);  }  this.raf=new RandomAccessFile(file,fileMode);  if (log.isInfoEnabled())   log.info("(Re-)opened file: " + file);  try {    final boolean readOnly="r".equals(fileMode);    if (raf.getChannel().tryLock(0,Long.MAX_VALUE,readOnly) == null) {      try {        raf.close();      } catch (      Throwable t) {      }      throw new IOException("File already locked? file=" + file);    }  } catch (  IOException ex) {    if (log.isInfoEnabled())     log.info("FileLock not supported: file=" + file,ex);  }  storeCounters.nreopen++;  return raf.getChannel();}  }
class C{  public static void deleteDirectory(final File directory){  final File[] filesInTestDir=directory.listFiles();  if (filesInTestDir != null) {    for (    final File eachFile : filesInTestDir) {      eachFile.delete();    }  }  directory.delete();}  }
class C{  public TableModelEvent(TableModel source,int firstRow,int lastRow){  this(source,firstRow,lastRow,ALL_COLUMNS,UPDATE);}  }
class C{  public void endDocument() throws SAXException {  if (DEBUG)   System.out.println("endDocument");  charactersFlush();  m_nextsib.setElementAt(NULL,0);  if (m_firstch.elementAt(0) == NOTPROCESSED)   m_firstch.setElementAt(NULL,0);  if (DTM.NULL != m_previous)   m_nextsib.setElementAt(DTM.NULL,m_previous);  m_parents=null;  m_prefixMappings=null;  m_contextIndexes=null;  m_endDocumentOccured=true;  m_locator=null;}  }
class C{  public CalendarIntervalScheduleBuilder withIntervalInMinutes(int intervalInMinutes){  validateInterval(intervalInMinutes);  this.interval=intervalInMinutes;  this.intervalUnit=IntervalUnit.MINUTE;  return this;}  }
class C{  private static boolean sendWriteLopToMR(Lop node){  if (DMLScript.rtplatform == RUNTIME_PLATFORM.SINGLE_NODE)   return false;  Lop in=node.getInputs().get(0);  Format nodeFormat=node.getOutputParameters().getFormat();  if (in.getExecLocation() == ExecLocation.Data && in.getOutputs().size() == 1 && !((Data)node).isTransient() && ((Data)in).isTransient() && ((Data)in).getOutputParameters().isBlocked() && node.getOutputParameters().isBlocked()) {    return false;  }  if (node.getExecType() == ExecType.MR || (in.getExecType() == ExecType.MR && nodeFormat != Format.CSV))   return true; else   return false;}  }
class C{  public static String trimExtensions(String fileName,String[] extensions){  String newName=null;  for (  String extension : extensions) {    final String ext="." + extension;    if (fileName.toUpperCase().endsWith(ext.toUpperCase())) {      newName=fileName.substring(0,fileName.length() - ext.length());    }  }  return (newName != null) ? newName : fileName;}  }
class C{  public List<Tradestrategy> findTradestrategyDistinctByDateRange(ZonedDateTime fromOpen,ZonedDateTime toOpen){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Tradestrategy> query=builder.createQuery(Tradestrategy.class);    Root<Tradestrategy> from=query.from(Tradestrategy.class);    query.select(from);    List<Predicate> predicates=new ArrayList<Predicate>();    if (null != fromOpen) {      Join<Tradestrategy,Tradingday> tradingday=from.join("tradingday");      Predicate predicate=builder.greaterThanOrEqualTo(tradingday.get("open").as(ZonedDateTime.class),fromOpen);      predicates.add(predicate);    }    if (null != toOpen) {      Join<Tradestrategy,Tradingday> tradingday=from.join("tradingday");      Predicate predicate=builder.lessThanOrEqualTo(tradingday.get("open").as(ZonedDateTime.class),toOpen);      predicates.add(predicate);    }    query.multiselect(from.get("barSize"),from.get("chartDays"),from.join("strategy")).distinct(true);    query.where(predicates.toArray(new Predicate[]{}));    TypedQuery<Tradestrategy> typedQuery=entityManager.createQuery(query);    List<Tradestrategy> items=typedQuery.getResultList();    entityManager.getTransaction().commit();    return items;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public void resetLocal(){  tail=Deque.TAIL_INITIAL_VALUE;  tailBufferEnd=Deque.TAIL_INITIAL_VALUE;}  }
class C{  public boolean isBoundingSectorMode(){  return this.isBoundingSectorMode;}  }
class C{  public ServiceHttpError(){  requestFileName="getstate.query";}  }
class C{  public List<Parameterization> asList(){  return list;}  }
class C{  public void testRadix36Pos(){  String value="23895lt45y6vhgliuwhgi45y845htsuerhsi4586ysuerhtsio5y68peruhgsil4568ypeorihtse48y6";  int radix=36;  BigInteger aNumber=new BigInteger(value,radix);  String result=aNumber.toString(radix);  assertTrue(result.equals(value));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return DShowTVPlayer.getVideoDecoderFilter();}  }
class C{  void enableGUI(){  LoaderPane.this.enableDownloadVerifyButtons();}  }
class C{  public void toFile(final File file){  final List<String> sortedPaths=makeItemPathList();  Collections.sort(sortedPaths,ServerPath.TOP_DOWN_COMPARATOR);  final Document document=DOMCreateUtils.newDocument(ROOT_ELEMENT_NAME);  final Element root=document.getDocumentElement();  final Element element=DOMUtils.appendChild(root,FOLDER_PATHS_ELEMENT_NAME);  for (final Iterator<String> it=sortedPaths.iterator(); it.hasNext(); ) {    final String path=it.next();    DOMUtils.appendChildWithText(element,PATH_ELEMENT_NAME,path);  }  DOMSerializeUtils.serializeToFile(document,file,DOMSerializeUtils.ENCODING_UTF8,DOMSerializeUtils.INDENT);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  double cutoff=Double.parseDouble(args[2]);  if (cutoff < 0) {    cutoff=0;  }  if (cutoff > 0.95) {    cutoff=0.95;  }  double gain=Double.parseDouble(args[3]);  if (inputHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress=0;    WhiteboxRaster input=new WhiteboxRaster(inputHeader,"r");    int rows=input.getNumberRows();    int cols=input.getNumberColumns();    double noData=input.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(input.getPreferredPalette());    double minValue=input.getMinimumValue();    double maxValue=input.getMaximumValue();    double range=maxValue - minValue;    double[] data;    double a=1 / (1 + Math.exp(gain * cutoff));    double b=1 / (1 + Math.exp(gain * (cutoff - 1))) - 1 / (1 + Math.exp(gain * cutoff));    for (row=0; row < rows; row++) {      data=input.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          z=(z - minValue) / range;          z=(1 / (1 + Math.exp(gain * (cutoff - z))) - a) / b;          output.setValue(row,col,z);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    input.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static boolean isInside(double lat1,double lon1,double lat2,double lon2,double radius,double lat3,double lon3){  return (new Geo(lat1,lon1)).isInside(new Geo(lat2,lon2),radius,new Geo(lat3,lon3));}  }
class C{  private static <K,V>CacheConfiguration<K,V> cacheCar(){  CacheConfiguration<K,V> ccfg=cacheConfiguration(CAR_CACHE_NAME);  Collection<QueryEntity> qryEntities=new ArrayList<>();  QueryEntity type=new QueryEntity();  qryEntities.add(type);  type.setKeyType(Integer.class.getName());  type.setValueType(Car.class.getName());  LinkedHashMap<String,String> qryFlds=new LinkedHashMap<>();  qryFlds.put("id","java.lang.Integer");  qryFlds.put("parkingId","java.lang.Integer");  qryFlds.put("name","java.lang.String");  type.setFields(qryFlds);  ccfg.setQueryEntities(qryEntities);  return ccfg;}  }
class C{  public Boolean isThroughPathActive(int i){  return throughPaths.get(i).isPathActive();}  }
class C{  JSONStringer open(Scope empty,String openBracket) throws JSONException {  if (stack.isEmpty() && out.length() > 0) {    throw new JSONException("Nesting problem: multiple top-level roots");  }  beforeValue();  stack.add(empty);  out.append(openBracket);  return this;}  }
class C{  public boolean hasExtensions(){  return extensions != null;}  }
class C{  public boolean isFinished(){  return finishedFlag.get();}  }
class C{  protected void sequence_VariableStatement(ISerializationContext context,VariableStatement semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  @Bean public FilterRegistrationBean registration(StatelessAuthenticationFilter filter){  FilterRegistrationBean registration=new FilterRegistrationBean(filter);  registration.setEnabled(false);  return registration;}  }
class C{  private void zApplyBorderPropertiesInstance(CalendarBorderProperties borderProperties){  Point ul=borderProperties.upperLeft;  Point lr=borderProperties.lowerRight;  Color color=borderProperties.backgroundColor;  Integer thickness=borderProperties.thicknessInPixels;  if ((ul == null) || (lr == null) || (ul.x < 1)|| (ul.x > 5)|| (ul.y < 1)|| (ul.y > 5)|| (lr.x < 1)|| (lr.x > 5)|| (lr.y < 1)|| (lr.y > 5)|| (ul.x > lr.x)|| (ul.y > lr.y)) {    throw new RuntimeException("CalendarPanel.setBorderProperties(), " + "The supplied points cannot be null, and they must have x and y " + "coordinates with values in the range of 1 to 5 (inclusive). Additionally, "+ "the upper left point values must be less than or equal to the lower right "+ "point values.");  }  for (int x=ul.x; x <= lr.x; ++x) {    for (int y=ul.y; y <= lr.y; ++y) {      JLabel borderLabel=borderLabels[x][y];      if (borderLabel == null) {        continue;      }      if (color != null) {        borderLabel.setBackground(color);      }      if (thickness != null) {        boolean isVisible=(thickness > 0);        borderLabel.setVisible(isVisible);        Dimension minimumSize=(isVisible) ? new Dimension(thickness,thickness) : new Dimension(1,1);        borderLabel.setMinimumSize(minimumSize);      }    }  }}  }
class C{  public ClientKeyExchange(){  exchange_keys=EmptyArray.BYTE;  length=0;  isRSA=false;}  }
class C{  public ImageSize scaleDown(int sampleSize){  return new ImageSize(width / sampleSize,height / sampleSize);}  }
class C{  public Server(CnATreeElement parent){  super(parent);  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());  setTitel(getTypeFactory().getMessage(TYPE_ID));}  }
class C{  public String sqlObjectDetail_restoreTemporaryColumn(String vendorName,String catalogName,String schemaName,String tableName,String columnName){  columnName=normalizeColumnName(vendorName,columnName);  return m_interfaces.get(getDBVendorID(vendorName)).sqlObjectDetail_restoreTemporaryColumn(vendorName,catalogName,schemaName,tableName,getTemporaryColumnName(),columnName);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddress;  Attr newAttribute;  Attr oldAttr;  Attr districtAttr;  String attrVal;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testAddress=(Element)elementList.item(0);  newAttribute=doc.createAttribute("district");  oldAttr=testAddress.setAttributeNode(newAttribute);  assertNull("old_attr_doesnt_exist",oldAttr);  districtAttr=testAddress.getAttributeNode("district");  assertNotNull("new_district_accessible",districtAttr);  attrVal=testAddress.getAttribute("district");  assertEquals("attr_value","",attrVal);}  }
class C{  public QuerySpecBuilder(boolean incompleteQueryFails){  this.incompleteQueryFails=incompleteQueryFails;}  }
class C{  @Override public void translate(final Geometry geom){  if (referenceProjection != null) {    referenceProjection.translate(geom);  }}  }
class C{  @Override public int hashCode(){  try {    if (unicodeStringOrJTOCoffset != null) {      return toUnicodeStringInternal().hashCode();    } else {      return UTF8Convert.computeStringHashCode(val);    }  } catch (  UTFDataFormatException e) {    return 0;  }}  }
class C{  public static int scalarProduct(final long[] x,final long[] y){  int sum=0;  for (int i=y.length; i-- != 0; ) {    final long high=x[i] & 0xAAAAAAAAAAAAAAAAL;    final long low=x[i] & 0x5555555555555555L;    final long highShift=high >>> 1;    final long t=(y[i] ^ (high | highShift)) & (x[i] | highShift | low << 1);    sum+=Long.bitCount(t & 0xAAAAAAAAAAAAAAAAL) * 2 + Long.bitCount(t & 0x5555555555555555L);  }  return sum;}  }
class C{  public static byte[] buildAudioSpecificConfig(int sampleRate,int numChannels){  int sampleRateIndex=-1;  for (int i=0; i < AUDIO_SPECIFIC_CONFIG_SAMPLING_RATE_TABLE.length; ++i) {    if (sampleRate == AUDIO_SPECIFIC_CONFIG_SAMPLING_RATE_TABLE[i]) {      sampleRateIndex=i;    }  }  int channelConfig=-1;  for (int i=0; i < AUDIO_SPECIFIC_CONFIG_CHANNEL_COUNT_TABLE.length; ++i) {    if (numChannels == AUDIO_SPECIFIC_CONFIG_CHANNEL_COUNT_TABLE[i]) {      channelConfig=i;    }  }  byte[] csd=new byte[2];  csd[0]=(byte)((2 << 3) | (sampleRateIndex >> 1));  csd[1]=(byte)(((sampleRateIndex & 0x1) << 7) | (channelConfig << 3));  return csd;}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  void programmerSelected(){  log.debug("programmerSelected starts with {} buttons",buttonPool.size());  for (  JRadioButton button : buttonPool) {    button.setVisible(false);  }  buttonMap.clear();  oldAddrText="";  int index=0;  List<ProgrammingMode> modes;  if (getProgrammer() != null) {    modes=getProgrammer().getSupportedModes();  } else {    modes=((AddressedProgrammerManager)progBox.getSelectedItem()).getDefaultModes();  }  log.debug("   has {} modes",modes.size());  for (  ProgrammingMode mode : modes) {    JRadioButton button;    if (index >= buttonPool.size()) {      log.debug("   add button");      button=new JRadioButton();      buttonPool.add(button);      modeGroup.add(button);      button.addActionListener(this);      add(button);    }    log.debug("   set for {}",mode.toString());    button=buttonPool.get(index++);    button.setVisible(true);    modeGroup.add(button);    button.setText(mode.toString());    buttonMap.put(mode,button);  }  setGuiFromProgrammer();}  }
class C{  public void start(@NonNull Context context,@NonNull android.support.v4.app.Fragment fragment){  start(context,fragment,REQUEST_CROP);}  }
class C{  @CloudUnitSecurable @RequestMapping(value="/{applicationName}/{moduleName}",method=RequestMethod.DELETE) @ResponseBody public JsonResponse removeModule(JsonInput jsonInput) throws ServiceException, CheckException {  jsonInput.validateRemoveModule();  String applicationName=jsonInput.getApplicationName();  String moduleName=jsonInput.getModuleName();  User user=authentificationUtils.getAuthentificatedUser();  Application application=applicationService.findByNameAndUser(user,applicationName);  authentificationUtils.canStartNewAction(user,application,locale);  Status previousApplicationStatus=application.getStatus();  try {    applicationService.setStatus(application,Status.PENDING);    moduleService.remove(user,moduleName,true,previousApplicationStatus);    logger.info("-- removeModule " + applicationName + " to "+ moduleName+ " successful-- ");  } catch (  Exception e) {    logger.error(applicationName + " // " + moduleName,e);  } finally {    applicationService.setStatus(application,previousApplicationStatus);  }  return new HttpOk();}  }
class C{  public void store(Document document,String pathToParent,String elementName) throws XMLException {  Element parent=(Element)DocUtil.evalXPathAsNode(document,pathToParent);  BeanConverter converter=new BeanConverter(this,document);  Element elem=converter.createElement(elementName);  parent.appendChild(elem);}  }
class C{  public final FastVector<E> copyElements(){  FastVector<E> copy=copy();  for (int i=0; i < size(); i++) {    copy.set(i,Utils.<E>cast(((Copyable)get(i)).copy()));  }  return copy;}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {  if (argNum > 1)   reportWrongNumberArgs();}  }
class C{  public void removeListener(String listenerTypeName,String listenerName){synchronized (monData) {    if (!monData.hasListeners())     return;    ListenerType type=getListenerType(listenerTypeName);    if (type != null)     type.removeListener(listenerName);  }}  }
class C{  public Vector3d mul(double scalar){  x*=scalar;  y*=scalar;  z*=scalar;  return this;}  }
class C{  public TwoDRectangle(double left,double bottom,double right,double top){  this.left=left;  this.bottom=bottom;  this.right=right;  this.top=top;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.RECORD_ENTITY___ANONYMOUS_RECORD_ENTITY_11:    getAnonymous_recordEntity_1_1().clear();  return;case UmplePackage.RECORD_ENTITY___TRACE_RECORD_1:setTrace_record_1(TRACE_RECORD_1_EDEFAULT);return;case UmplePackage.RECORD_ENTITY___ANONYMOUS_RECORD_ENTITY_21:getAnonymous_recordEntity_2_1().clear();return;}super.eUnset(featureID);}  }
class C{  public Coord translate(double latitude,double longitude){  return new Coord(latitude + getLatitude(),longitude + getLongitude(),isProjected());}  }
class C{  @Override protected void register(ContainerFactory containerFactory){  containerFactory.registerContainer("jrun4x",ContainerType.INSTALLED,JRun4xInstalledLocalContainer.class);}  }
class C{  protected void matchReportReference(ASTNode reference,IJavaElement element,Binding elementBinding,int accuracy,MatchLocator locator) throws CoreException {  this.match=null;  int referenceType=referenceType();  int offset=reference.sourceStart;switch (referenceType) {case IJavaElement.PACKAGE_FRAGMENT:    this.match=locator.newPackageReferenceMatch(element,accuracy,offset,reference.sourceEnd - offset + 1,reference);  break;case IJavaElement.TYPE:this.match=locator.newTypeReferenceMatch(element,elementBinding,accuracy,offset,reference.sourceEnd - offset + 1,reference);break;case IJavaElement.FIELD:this.match=locator.newFieldReferenceMatch(element,null,elementBinding,accuracy,offset,reference.sourceEnd - offset + 1,reference);break;case IJavaElement.LOCAL_VARIABLE:this.match=locator.newLocalVariableReferenceMatch(element,accuracy,offset,reference.sourceEnd - offset + 1,reference);break;case IJavaElement.TYPE_PARAMETER:this.match=locator.newTypeParameterReferenceMatch(element,accuracy,offset,reference.sourceEnd - offset + 1,reference);break;}if (this.match != null) {locator.report(this.match);}}  }
class C{  public SSLParameters(){}  }
class C{  public void displayErrorMessage(String message){  Toast toast=Toast.makeText(App.getInstance().getApplicationContext(),message,Toast.LENGTH_LONG);  NinePatchDrawable drawable=(NinePatchDrawable)toast.getView().getBackground();  drawable.setColorFilter(Color.RED,PorterDuff.Mode.SRC_IN);  toast.show();}  }
class C{  public short[] rawkey(){  short key[]=new short[160];  int idx=0;  for (int i=0; i < 4; i++) {    key[idx++]=freeEncoding[i];  }  for (int i=0; i < 4; i++) {    key[idx++]=foundationEncoding[i];  }  for (int i=0; i < cols.length; i++) {    Column col=cols[i];    int sz=col.num;    for (int j=0; j < sz; j++) {      key[idx++]=col.cards[j];    }    while (sz < 19) {      key[idx++]=0;      sz++;    }  }  return key;}  }
class C{  public Extractors split(Extractor listableExtractor){  Validate.isTrue(listableExtractor instanceof ListableExtractor,"split parameter must implement ListableExtractor." + listableExtractor.getClass().getSimpleName() + " can't be used.");  this.htmlList=((ListableExtractor)listableExtractor).extractList(html);  return this;}  }
class C{  public Map<RandomVariable,Object> priorSample(BayesianNetwork bn){  Map<RandomVariable,Object> x=new LinkedHashMap<RandomVariable,Object>();  for (  RandomVariable Xi : bn.getVariablesInTopologicalOrder()) {    x.put(Xi,ProbUtil.randomSample(bn.getNode(Xi),x,randomizer));  }  return x;}  }
class C{  public DataValidatorBuilder trueOrFalseRequired(final boolean trueOfFalseFieldProvided){  if (!trueOfFalseFieldProvided && !this.ignoreNullValue) {    final StringBuilder validationErrorCode=new StringBuilder("validation.msg.").append(this.resource).append(".").append(this.parameter).append(".must.be.true.or.false");    final StringBuilder defaultEnglishMessage=new StringBuilder("The parameter ").append(this.parameter).append(" must be set as true or false.");    final ApiParameterError error=ApiParameterError.parameterError(validationErrorCode.toString(),defaultEnglishMessage.toString(),this.parameter);    this.dataValidationErrors.add(error);  }  return this;}  }
class C{  public static List split(String str,String regex){  return (Arrays.asList(str.split(regex)));}  }
class C{  @Override public void connectionStateChanged(State state){}  }
class C{  public GapStatistic(KClusterer base){  this(base,false);}  }
class C{  public void cleanUp(){  if (DEBUG)   Log.v(TAG,"Cleanup() called on " + this);  mLockPatternUtils=null;  mLockPatternView.setOnPatternListener(null);}  }
class C{  @Override public void insertBack(Blorp x){  size+=1;  Node p=sentinel;  while (p.next != null) {    p=p.next;  }  p.next=new Node(x,null);}  }
class C{  public void stop(String name,URL apiEndpoint,String org,String space,String email,String password,String namespace){  CloudFoundryOperations operations=appDeployerFactory.getOperations(email,password,apiEndpoint,org,space);  CloudFoundryAppDeployer appDeployer=appDeployerFactory.getAppDeployer(apiEndpoint,org,space,email,password,namespace);  operations.applications().stop(StopApplicationRequest.builder().name(name).build()).then(null).block(Duration.ofSeconds(30));}  }
class C{  public RegisterSpec withOffset(int delta){  if (delta == 0) {    return this;  }  return withReg(reg + delta);}  }
class C{  public void _testImportNode1() throws Throwable {  Document doc;  Document aNewDoc;  Attr newAttr;  Text importedChild;  Node aNode;  Document ownerDocument;  Element attrOwnerElement;  DocumentType docType;  String system;  boolean specified;  NodeList childList;  String nodeName;  Node child;  String childValue;  List<String> expectedResult=new ArrayList<String>();  expectedResult.add("elem:attr1");  expectedResult.add("importedText");  doc=(Document)load("staffNS",builder);  aNewDoc=(Document)load("staffNS",builder);  newAttr=aNewDoc.createAttribute("elem:attr1");  importedChild=aNewDoc.createTextNode("importedText");  aNode=newAttr.appendChild(importedChild);  aNode=doc.importNode(newAttr,false);  ownerDocument=aNode.getOwnerDocument();  docType=ownerDocument.getDoctype();  system=docType.getSystemId();  assertNotNull("aNode",aNode);  assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);  attrOwnerElement=((Attr)aNode).getOwnerElement();  assertNull("ownerElement",attrOwnerElement);  specified=((Attr)aNode).getSpecified();  assertTrue("specified",specified);  childList=aNode.getChildNodes();  assertEquals("childList",1,childList.getLength());  nodeName=aNode.getNodeName();  assertEquals("nodeName","elem:attr1",nodeName);  child=aNode.getFirstChild();  childValue=child.getNodeValue();  assertEquals("childValue","importedText",childValue);}  }
class C{  public static CalendarIntervalScheduleBuilder calendarIntervalSchedule(){  return new CalendarIntervalScheduleBuilder();}  }
class C{  public SimpleTimeCounter(String name){  start(name);}  }
class C{  public MemorySynchronizer(final IDebugger debugger){  this.debugger=Preconditions.checkNotNull(debugger,"IE00816: Debugger argument can not be null");  this.debugger.addListener(debuggerListener);  this.debugger.getProcessManager().getMemory().addMemoryListener(memoryListener);  memoryLoader=new MemoryLoader(debugger);}  }
class C{  @Override public boolean containsKey(Object key){  return _map.containsKey(unwrapKey(key));}  }
class C{  public HtmlCell td(){  HtmlCell c=new HtmlCell();  addSubnode(c);  return c;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:46.962 -0500",hash_original_method="3833904997A1288F1E7950B84718C1E5",hash_generated_method="3C85F6F19C37221BA26E3341906EA33F") private LinkedList<Node> findRoots(int[] rulesFilter){  final SparseArray<Node> keyNodes=mKeyNodes;  final ArrayList<Node> nodes=mNodes;  final int count=nodes.size();  for (int i=0; i < count; i++) {    final Node node=nodes.get(i);    node.dependents.clear();    node.dependencies.clear();  }  for (int i=0; i < count; i++) {    final Node node=nodes.get(i);    final LayoutParams layoutParams=(LayoutParams)node.view.getLayoutParams();    final int[] rules=layoutParams.mRules;    final int rulesCount=rulesFilter.length;    for (int j=0; j < rulesCount; j++) {      final int rule=rules[rulesFilter[j]];      if (rule > 0) {        final Node dependency=keyNodes.get(rule);        if (dependency == null || dependency == node) {          continue;        }        dependency.dependents.add(node);        node.dependencies.put(rule,dependency);      }    }  }  final LinkedList<Node> roots=mRoots;  roots.clear();  for (int i=0; i < count; i++) {    final Node node=nodes.get(i);    if (node.dependencies.size() == 0)     roots.add(node);  }  return roots;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Size size(){  calculate();  return size;}  }
class C{  private void assertFileContains(List<String> expected,String filename) throws Exception {  try (BufferedReader reader=new BufferedReader(new FileReader(filename))){    List<String> actual=new ArrayList<>();    for (; ; ) {      String line=reader.readLine();      if (line == null) {        break;      }      actual.add(line);    }    assertEquals(expected,actual);  } }  }
class C{  protected static String normalize(String s,boolean canonical){  StringBuffer str=new StringBuffer();  int len=(s != null) ? s.length() : 0;  for (int i=0; i < len; i++) {    char ch=s.charAt(i);switch (ch) {case '<':{        str.append("&lt;");        break;      }case '>':{      str.append("&gt;");      break;    }case '&':{    str.append("&amp;");    break;  }case '"':{  str.append("&quot;");  break;}case '\'':{str.append("&apos;");break;}case '\r':case '\n':{if (canonical) {str.append("&#");str.append(Integer.toString(ch));str.append(';');break;}}default :{str.append(ch);}}}return (str.toString());}  }
class C{  public final Vec2D scaleSelf(Vec2D s){  x*=s.x;  y*=s.y;  return this;}  }
class C{  public boolean isIncludeRequestProcessors(){  return includeRequestProcessors;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:59.032 -0500",hash_original_method="5AEB6F027685AF0CCAB12374EBFEEB6C",hash_generated_method="5AEB6F027685AF0CCAB12374EBFEEB6C") void _spyRead(int ch){  if (spyStream != null) {    try {      if (ch != (int)'\r') {        spyStream.write(ch);        if (ch == (int)'\n') {          spyStream.write((int)'\r');        }        spyStream.flush();      }    } catch (    Exception e) {      spyStream=null;    }  }}  }
class C{  public T caseStateMachine_(StateMachine_ object){  return null;}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public String formatDate(Date date){  return dateFormat.format(date);}  }
class C{  private static void s_uasqkp(SparseBlock a,double[] c,int m,int n,KahanObject kbuff,KahanPlusSq kplusSq,int rl,int ru){  if (a.isContiguous()) {    sumSq(a.values(rl),a.pos(rl),(int)a.size(rl,ru),kbuff,kplusSq);  } else {    for (int i=rl; i < ru; i++) {      if (!a.isEmpty(i))       sumSq(a.values(i),a.pos(i),a.size(i),kbuff,kplusSq);    }  }  c[0]=kbuff._sum;  c[1]=kbuff._correction;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter the number of rows: ");  int numberOfRows=input.nextInt();  displayPattern(numberOfRows);}  }
class C{  public String generateRankingTipText(){  return "Set to true if a ranked list is required.";}  }
class C{  public static Context fromUserKtab(Subject s,String user,String ktab,boolean storeKey) throws Exception {  Context out=new Context();  out.name=user;  out.s=s;  Krb5LoginModule krb5=new Krb5LoginModule();  Map<String,String> map=new HashMap<>();  map.put("isInitiator","false");  map.put("doNotPrompt","true");  map.put("useTicketCache","false");  map.put("useKeyTab","true");  map.put("keyTab",ktab);  map.put("principal",user);  if (storeKey) {    map.put("storeKey","true");  }  krb5.initialize(out.s,null,null,map);  krb5.login();  krb5.commit();  return out;}  }
class C{  private void emergencyRollback(String message,ReplDBMSEvent event,Throwable t){  logError(message,t);  logger.info("Performing emergency rollback of applied changes");  try {    applier.rollback();  } catch (  InterruptedException e1) {    logWarn("Task cancelled while trying to rollback following cancellation",null);  }catch (  Throwable t1) {    logWarn("Emergency rollback failed",t1);  }  dispatchErrorNotification(message,event,t);}  }
class C{  @DSSink({DSSinkKind.SMS_MMS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:47.935 -0500",hash_original_method="EA1BFE3566BC11C4D089155AC6363183",hash_generated_method="016ADFC455C529B040F4A548F2E62497") public boolean check(String appName,int smsWaiting){synchronized (mSmsStamp) {    removeExpiredTimestamps();    ArrayList<Long> sentList=mSmsStamp.get(appName);    if (sentList == null) {      sentList=new ArrayList<Long>();      mSmsStamp.put(appName,sentList);    }    return isUnderLimit(sentList,smsWaiting);  }}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\tNumber of folds used for cross validation (default 10).","X",1,"-X <number of folds>"));  newVector.addElement(new Option("\tClassifier parameter options.\n" + "\teg: \"N 1 5 10\" Sets an optimisation parameter for the\n" + "\tclassifier with name -N, with lower bound 1, upper bound\n"+ "\t5, and 10 optimisation steps. The upper bound may be the\n"+ "\tcharacter 'A' or 'I' to substitute the number of\n"+ "\tattributes or instances in the training data,\n"+ "\trespectively. This parameter may be supplied more than\n"+ "\tonce to optimise over several classifier options\n"+ "\tsimultaneously.","P",1,"-P <classifier parameter>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public RecurrenceExceptionEntry addWho(Who who){  super.addElement(Who.KEY,who);  return this;}  }
class C{  public boolean isLoggedIn(){  return getCurrentUser() != null;}  }
class C{  @SuppressWarnings("unchecked") public static <T extends PointerBase>T nullPointer(){  return (T)Word.zero();}  }
class C{  @Override public boolean performLongClick(){  return mDetector.handlePerformLongClick();}  }
class C{  public Builder<OWNER,TOKEN_TYPE,TOKEN> enableLocking(boolean enableLocking){  this.enableLocking=enableLocking;  return this;}  }
class C{  public boolean isCommitCeiling(){  Object oo=get_Value(COLUMNNAME_IsCommitCeiling);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public ImplMessage(JSONObject data,ImplDiscordAPI api,MessageReceiver receiver){  this.api=api;  id=data.getString("id");  if (data.has("content")) {    content=data.getString("content");  }  tts=data.getBoolean("tts");  if (data.has("timestamp")) {    String time=data.getString("timestamp");    Calendar calendar=Calendar.getInstance();    try {      String nanoSecondsRemoved=Joiner.on("+").join(time.split("\\d{3}\\+"));      calendar.setTime(TIMEZONE_FORMAT.get().parse(nanoSecondsRemoved));    } catch (    ParseException timeZoneIgnored) {      try {        calendar.setTime(FORMAT.get().parse(time.substring(0,time.length() - 9)));      } catch (      ParseException ignored) {        try {          calendar.setTime(FORMAT_ALTERNATIVE.get().parse(time.substring(0,time.length() - 9)));        } catch (        ParseException ignored2) {          try {            calendar.setTime(FORMAT_ALTERNATIVE_TWO.get().parse(time.substring(0,time.length() - 9)));          } catch (          ParseException e) {            logger.warn("Could not parse timestamp {}. Please contact the developer!",time,e);          }        }      }    }    creationDate=calendar;  }  author=api.getOrCreateUser(data.getJSONObject("author"));  try {    JSONArray attachments=data.getJSONArray("attachments");    for (int i=0; i < attachments.length(); i++) {      JSONObject attachment=attachments.getJSONObject(i);      String url=attachment.getString("url");      String proxyUrl=attachment.getString("proxy_url");      int size=attachment.getInt("size");      String id=attachment.getString("id");      String name=attachment.getString("filename");      this.attachments.add(new ImplMessageAttachment(url,proxyUrl,size,id,name));    }  } catch (  JSONException ignored) {  }  JSONArray mentions=data.getJSONArray("mentions");  for (int i=0; i < mentions.length(); i++) {    String userId=mentions.getJSONObject(i).getString("id");    User user;    try {      user=api.getUserById(userId).get();    } catch (    InterruptedException|ExecutionException e) {      continue;    }    this.mentions.add(user);  }  channelId=data.getString("channel_id");  if (receiver == null) {    this.receiver=findReceiver(channelId);  } else {    this.receiver=receiver;  }  if (getChannelReceiver() != null) {    ((ImplServer)getChannelReceiver().getServer()).addMember(author);  }  api.addMessage(this);}  }
class C{  public float distanceTo(AnimatableValue other){  AnimatableIntegerValue o=(AnimatableIntegerValue)other;  return Math.abs(value - o.value);}  }
class C{  @Override public final void close(){  try {    TempBufferData tempBuffer=_tempRead;    if (tempBuffer != null && !_isReuseBuffer) {      _tempRead=null;      _readBuffer=null;      tempBuffer.free();    }    if (_source != null) {      StreamImpl s=_source;      _source=null;      s.close();    }  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public RefUpdate.Result modifyMessage(ChangeEdit edit,String msg) throws AuthException, InvalidChangeOperationException, IOException, UnchangedCommitMessageException {  msg=msg.trim() + "\n";  checkState(!Strings.isNullOrEmpty(msg),"message cannot be null");  if (!currentUser.get().isIdentifiedUser()) {    throw new AuthException("Authentication required");  }  RevCommit prevEdit=edit.getEditCommit();  if (prevEdit.getFullMessage().equals(msg)) {    throw new UnchangedCommitMessageException();  }  IdentifiedUser me=currentUser.get().asIdentifiedUser();  Project.NameKey project=edit.getChange().getProject();  try (Repository repo=gitManager.openRepository(project);RevWalk rw=new RevWalk(repo);ObjectInserter inserter=repo.newObjectInserter()){    String refName=edit.getRefName();    Timestamp now=TimeUtil.nowTs();    ObjectId commit=createCommit(me,inserter,prevEdit,prevEdit.getTree(),msg,now);    inserter.flush();    return update(repo,me,refName,rw,prevEdit,commit,now);  } }  }
class C{  public void sideBySideView(){  sensorMatrixNode.setVisible(true);  sensorMatrixNode.raiseToTop();  double x=sensorMatrixNode.getWidth() + (sensorMatrixNode.getWidth() * 0.1d);  sensorMatrixNode.setOffset(-x,0.0d);  if (pixelMatrixNode.hasFocus()) {    pixelMatrixNode.setFocus(false);  }  if (!selectionEventHandlerInstalled) {    selectionEventHandlerInstalled=true;    addInputEventListener(selectionEventHandler);  }  centerCamera();}  }
class C{  public SymbolReferenceLibrary(SymbolImageMaker sim){  Properties props=findAndLoadProperties("hierarchy.properties");  if (props != null) {    initialize(props,sim);  }}  }
class C{  @GET @Path("class/null") public String nullControllerClass(){  return null;}  }
class C{  protected void onSessionStateChange(SessionState state,Exception exception){}  }
class C{  public CEditTextAction(final JFrame parent,final CTextNode node){  super("Edit Text");  m_parent=Preconditions.checkNotNull(parent,"IE02156: Parent argument can not be null");  m_node=Preconditions.checkNotNull(node,"IE02157: Node argument can not be null");}  }
class C{  public PerfDataBufferPrologue(ByteBuffer byteBuffer) throws MonitorException {  super(byteBuffer);  assert ((getMajorVersion() == 1) && (getMinorVersion() == 0));}  }
class C{  @Override public void onRestoreInstanceState(Bundle savedInstanceState){  if (savedInstanceState == null)   return;  ComponentName launchComponent=savedInstanceState.getParcelable(INSTANCE_KEY_COMPONENT);  Bundle appSearchData=savedInstanceState.getBundle(INSTANCE_KEY_APPDATA);  String userQuery=savedInstanceState.getString(INSTANCE_KEY_USER_QUERY);  if (!doShow(userQuery,false,launchComponent,appSearchData)) {    return;  }}  }
class C{  public void openPopupMenu(){  lockLayer=new MenuLockLayer(this);  popupMenu=new PopupMenu(action,actionManager,place,presentationFactory,lockLayer,this,keyBindingAgent,"toolbar");  lockLayer.add(popupMenu);  int left=getAbsoluteLeft();  int top=getAbsoluteTop() + 24;  popupMenu.getElement().getStyle().setTop(top,com.google.gwt.dom.client.Style.Unit.PX);  popupMenu.getElement().getStyle().setLeft(left,com.google.gwt.dom.client.Style.Unit.PX);}  }
class C{  public synchronized int checkExceptionThreshold(String queueid){  FetchItemQueue fiq=queues.get(queueid);  if (fiq == null) {    return 0;  }  if (fiq.getQueueSize() == 0) {    return 0;  }  int excCount=fiq.incrementExceptionCounter();  if (maxExceptionsPerQueue != -1 && excCount >= maxExceptionsPerQueue) {    int deleted=fiq.emptyQueue();    LOG.info("* queue: " + queueid + " >> removed "+ deleted+ " URLs from queue because "+ excCount+ " exceptions occurred");    for (int i=0; i < deleted; i++) {      totalSize.decrementAndGet();    }    return deleted;  }  return 0;}  }
class C{  public static synchronized void addObservedEvent(Class<? extends MvcEvent> eventType){  if (observedEvents == null) {    observedEvents=new HashSet<>();  }  observedEvents.add(eventType);}  }
class C{  public void prepareDataForEditPaymentType(){  if (selectedPaymentTypeKey == null) {    return;  }  for (  VOPaymentType voPaymentType : getSelectedPSP().getPaymentTypes()) {    if (selectedPaymentTypeKey.equals(new Long(voPaymentType.getKey()))) {      selectedPaymentType=voPaymentType;      return;    }  }}  }
class C{  public void testDataStoringRemainder() throws Exception {  final int blockSize=IGFS_BLOCK_SIZE;  for (int i=0; i < 10; i++) {    IgfsPath path=IgfsPath.ROOT;    long t=System.currentTimeMillis();    IgfsEntryInfo info=IgfsUtils.createFile(IgniteUuid.randomUuid(),blockSize,0L,null,IgfsUtils.DELETE_LOCK_ID,false,null,t,t);    assertNull(mgr.dataBlock(info,path,0,null).get());    byte[] data=new byte[blockSize];    rnd.nextBytes(data);    byte[] remainder=new byte[blockSize / 2];    rnd.nextBytes(remainder);    info=info.length(info.length() + data.length + remainder.length);    IgniteInternalFuture<Boolean> fut=mgr.writeStart(info.id());    IgfsFileAffinityRange range=new IgfsFileAffinityRange();    byte[] left=mgr.storeDataBlocks(info,info.length(),remainder,remainder.length,ByteBuffer.wrap(data),false,range,null);    assert left.length == blockSize / 2;    byte[] remainder2=new byte[blockSize / 2];    info=info.length(info.length() + remainder2.length);    byte[] left2=mgr.storeDataBlocks(info,info.length(),left,left.length,ByteBuffer.wrap(remainder2),false,range,null);    assert left2 == null;    mgr.writeClose(info.id());    fut.get(3000);    for (int j=0; j < NODES_CNT; j++) {      GridCacheContext<Object,Object> ctx=GridTestUtils.getFieldValue(grid(j).cachex(DATA_CACHE_NAME),"ctx");      Collection<IgniteInternalTx> txs=ctx.tm().txs();      assert txs.isEmpty() : "Incomplete transactions: " + txs;    }    byte[] concat=U.join(remainder,data,remainder2);    for (int pos=0, block=0; pos < info.length(); block++) {      byte[] stored=mgr.dataBlock(info,path,block,null).get();      assertNotNull("Expects data exist [data.length=" + concat.length + ", block="+ block+ ']',stored);      for (int j=0; j < stored.length; j++)       assertEquals(stored[j],concat[pos + j]);      pos+=stored.length;    }    mgr.delete(info);    long nIters=getTestTimeout() / BUSY_WAIT_SLEEP_INTERVAL;    assert nIters < Integer.MAX_VALUE;    boolean rmvBlocks=false;    for (int j=0; j < nIters && !rmvBlocks; j=sleepAndIncrement(BUSY_WAIT_SLEEP_INTERVAL,j)) {      boolean b=true;      for (long block=0; block < info.blocksCount(); block++)       b&=mgr.dataBlock(info,path,block,null).get() == null;      rmvBlocks=b;    }    assertTrue("All blocks should be removed from cache.",rmvBlocks);  }}  }
class C{  public Vertex evaluateSET(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  if (!checkArguments(expression,arguments,3,network)) {    return network.createVertex(Primitive.NULL);  }  Vertex source=evaluateExpression(arguments.get(0).getTarget(),variables,network,startTime,maxTime,stack);  Vertex relationship=evaluateExpression(arguments.get(1).getTarget(),variables,network,startTime,maxTime,stack);  Vertex target=evaluateExpression(arguments.get(2).getTarget(),variables,network,startTime,maxTime,stack);  Vertex index=expression.getRelationship(Primitive.INDEX);  if ((index != null) && (index.getData() instanceof Number)) {    int position=((Number)index.getData()).intValue();    List<Vertex> values=source.orderedRelations(relationship);    if (position < 0) {      source.addRelationship(relationship,target,(values.size() + position));    } else {      source.addRelationship(relationship,target,position);    }  } else {    source.setRelationship(relationship,target);  }  if (relationship.isPrimitive() && (relationship.is(Primitive.IT) || relationship.is(Primitive.HE) || relationship.is(Primitive.SHE))) {    return relationship;  }  return target;}  }
class C{  @RequestMapping(value="/stub/admin/collections/{collection_id}/products",method=RequestMethod.GET) public ResponseEntity<?> collectionProducts(@PathVariable(value="collection_id") Long id){  fr.gael.dhus.service.CollectionService collectionService=ApplicationContextProvider.getBean(fr.gael.dhus.service.CollectionService.class);  try {    List<Long> productIds=collectionService.getProductIds(id);    if (productIds.size() == 1) {      Iterator iter=productIds.iterator();      Object first=iter.next();      if (first == null) {        return new ResponseEntity<>("[]",HttpStatus.OK);      }    }    return new ResponseEntity<>(productIds,HttpStatus.OK);  } catch (  AccessDeniedException e) {    e.printStackTrace();    return new ResponseEntity<>("{\"code\":\"unauthorized\"}",HttpStatus.FORBIDDEN);  }catch (  Exception e) {    e.printStackTrace();    return new ResponseEntity<>(e.getMessage(),HttpStatus.INTERNAL_SERVER_ERROR);  }}  }
class C{  public static Map<String,DLockService> snapshotAllServices(){  Map snapshot=null;synchronized (services) {    snapshot=new HashMap(services);  }  return snapshot;}  }
class C{  public Stocking(final String name,final String clazz,final String subclass,final Map<String,String> attributes){  super(name,clazz,subclass,attributes);}  }
class C{  public void unbox(Type type){  Type t=Constants.TYPE_NUMBER;  Signature sig=null;switch (type.getSort()) {case Type.VOID:    return;case Type.CHAR:  t=Constants.TYPE_CHARACTER;sig=CHAR_VALUE;break;case Type.BOOLEAN:t=Constants.TYPE_BOOLEAN;sig=BOOLEAN_VALUE;break;case Type.DOUBLE:sig=DOUBLE_VALUE;break;case Type.FLOAT:sig=FLOAT_VALUE;break;case Type.LONG:sig=LONG_VALUE;break;case Type.INT:case Type.SHORT:case Type.BYTE:sig=INT_VALUE;}if (sig == null) {checkcast(type);} else {checkcast(t);invoke_virtual(t,sig);}}  }
class C{  public MUCPacketListener(String number,MultiUserChat muc,String name,int mode,Context ctx){  this.mName=name;  this.mNumber=number;  this.mLastDate=new Date(0);  this.mMuc=muc;  this.mRoomName=muc.getRoom();  this.mSettings=SettingsManager.getSettingsManager(ctx);  this.mMode=mode;  this.mCtx=ctx;  Log.initialize(mSettings);}  }
class C{  private void jbInit() throws Exception {  bShowAll.setLabel(Msg.getMsg(Env.getCtx(),"All"));  bShowAll.addEventListener(Events.ON_CLICK,this);  bShowYear.setLabel(Msg.getMsg(Env.getCtx(),"Year"));  bShowYear.addEventListener(Events.ON_CLICK,this);  bShowMonth.setLabel(Msg.getMsg(Env.getCtx(),"Month"));  bShowMonth.addEventListener(Events.ON_CLICK,this);  bShowWeek.setLabel(Msg.getMsg(Env.getCtx(),"Week"));  bShowWeek.addEventListener(Events.ON_CLICK,this);  bShowDay.setLabel(Msg.getMsg(Env.getCtx(),"Day"));  bShowDay.addEventListener(Events.ON_CLICK,this);  mainPanel.setWidth("100%");  mainPanel.setStyle("text-align:center");  mainPanel.appendChild(bShowDay);  mainPanel.appendChild(bShowWeek);  mainPanel.appendChild(bShowMonth);  mainPanel.appendChild(bShowYear);  mainPanel.appendChild(bShowAll);  this.setWidth("450px");  this.setBorder("normal");  this.setTitle(Msg.getMsg(Env.getCtx(),"VOnlyCurrentDays"));  this.setClosable(true);  this.setAttribute("mode","modal");  this.appendChild(new Separator());  this.appendChild(mainPanel);  this.appendChild(new Separator());}  }
class C{  @SuppressWarnings("rawtypes") private IConfiguracionAccionMultientidad instanceConfiguracionAccion(AccionMultientidadForm accionMultientidadForm) throws Exception {  ServicioAdministracion oServicio=LocalizadorServicios.getServicioAdministracion();  AccionMultientidad accionMultientidad=oServicio.getAccionMultientidad(accionMultientidadForm.getIdAccion());  Class claseConfiguradora=Class.forName(accionMultientidad.getClaseConfiguradora());  return (IConfiguracionAccionMultientidad)claseConfiguradora.newInstance();}  }
class C{  public void update(){  mESN.clear();  mFleetsync.clear();  mLoJack.clear();  mMDC1200.clear();  mMobileID.clear();  mMPT1327.clear();  mSiteID.clear();  mStatus.clear();  mTalkgroup.clear();  mUniqueID.clear();  for (  Group group : mGroups) {    for (    Alias alias : group.getAlias()) {      for (      AliasID id : alias.getId()) {switch (id.getType()) {case ESN:          Esn esn=(Esn)id;        if (esn.getEsn().contains("*")) {          mESNWildcard=true;          mESN.put(fixWildcard(esn.getEsn()),alias);        } else {          mESN.put(esn.getEsn(),alias);        }      break;case Fleetsync:    FleetsyncID fs=(FleetsyncID)id;  if (fs.getIdent().contains("*")) {    mFleetsyncWildcard=true;    mFleetsync.put(fixWildcard(fs.getIdent()),alias);  } else {    mFleetsync.put(fs.getIdent(),alias);  }break;case LoJack:mLoJack.put((LoJackFunctionAndID)id,alias);break;case MDC1200:MDC1200ID mdc=(MDC1200ID)id;if (mdc.getIdent().contains("*")) {mMDC1200Wildcard=true;mMDC1200.put(fixWildcard(mdc.getIdent()),alias);} else {mMDC1200.put(mdc.getIdent(),alias);}break;case MPT1327:MPT1327ID mpt=(MPT1327ID)id;String ident=mpt.getIdent();if (ident != null) {if (ident.contains("*")) {mMPT1327Wildcard=true;mMPT1327.put(fixWildcard(ident),alias);} else {mMPT1327.put(ident,alias);}}break;case MIN:Min min=(Min)id;if (min.getMin().contains("*")) {mMobileIDWildcard=true;mMobileID.put(fixWildcard(min.getMin()),alias);} else {mMobileID.put(min.getMin(),alias);}break;case LTRNetUID:UniqueID uid=(UniqueID)id;mUniqueID.put(uid.getUid(),alias);break;case Site:SiteID siteID=(SiteID)id;if (siteID.getSite().contains("*")) {mSiteWildcard=true;mSiteID.put(fixWildcard(siteID.getSite()),alias);} else {mSiteID.put(siteID.getSite(),alias);}break;case Status:mStatus.put(((StatusID)id).getStatus(),alias);break;case Talkgroup:TalkgroupID tgid=(TalkgroupID)id;if (tgid.getTalkgroup().contains("*")) {mTalkgroupWildcard=true;mTalkgroup.put(fixWildcard(tgid.getTalkgroup()),alias);} else {mTalkgroup.put(tgid.getTalkgroup(),alias);}break;case NonRecordable:case Priority:break;default :mLog.warn("Unrecognized Alias ID Type:" + id.getType().name());break;}}}}}  }
class C{  public Result run(Class<?>... classes){  return run(defaultComputer(),classes);}  }
class C{  public void shiftLeft(Object inserted,int last,int length){  int mask=(data.length << shift) - 1;  int tail=(last + offset) & mask;  int head=(last + offset - length) & mask;  if (shift == 0) {    int n=tail - head;    if (head > tail) {      System.arraycopy(data,head + 1,data,head,mask - head);      data[mask]=data[0];      n=tail;    }    System.arraycopy(data,tail - n + 1,data,tail - n,n);    data[tail]=inserted;  } else   if ((head <= tail) && ((head >> shift) == (tail >> shift))) {    F(head >> shift).shiftLeft(inserted,tail,length);  } else {    int low=head >> shift;    int high=(low != data.length - 1) ? low + 1 : 0;    F(low).shiftLeft(F(high).get(0),-1,mask - head);    while (high != (tail >> shift)) {      low=high;      high=(low != data.length - 1) ? low + 1 : 0;      F(low).offset++;      F(low).set(-1,F(high).get(0));    }    F(high).shiftLeft(inserted,tail,tail);  }}  }
class C{  public static int alertLevelToLogLevel(final int alertLevel){switch (alertLevel) {case Alert.SEVERE:    return Level.FATAL.intLevel();case Alert.ERROR:  return Level.ERROR.intLevel();case Alert.WARNING:return Level.WARN.intLevel();case Alert.OFF:return Level.OFF.intLevel();}throw new IllegalArgumentException("Unknown Alert level [" + alertLevel + "].");}  }
class C{  public static String valueToString(Object value) throws JSONException {  if (value == null || value.equals(null)) {    return "null";  }  if (value instanceof JSONString) {    Object object;    try {      object=((JSONString)value).toJSONString();    } catch (    Exception e) {      throw new JSONException(e);    }    if (object instanceof String) {      return (String)object;    }    throw new JSONException("Bad value from toJSONString: " + object);  }  if (value instanceof Number) {    return numberToString((Number)value);  }  if (value instanceof Boolean || value instanceof JSONObject || value instanceof JSONArray) {    return value.toString();  }  if (value instanceof Map) {    @SuppressWarnings("unchecked") Map<String,Object> map=(Map<String,Object>)value;    return new JSONObject(map).toString();  }  if (value instanceof Collection) {    @SuppressWarnings("unchecked") Collection<Object> coll=(Collection<Object>)value;    return new JSONArray(coll).toString();  }  if (value.getClass().isArray()) {    return new JSONArray(value).toString();  }  return quote(value.toString());}  }
class C{  public void addReply(final Collection<String> triggerStrings,final String text,final ChatAction action){  add(ConversationStates.ATTENDING,triggerStrings,null,ConversationStates.ATTENDING,text,action);}  }
class C{  public synchronized void reset(){  _loadQueue.clear();}  }
class C{  public boolean isShift(){  return this.shift;}  }
class C{  protected void connectionEstablished(Channel connectedChannel){  channel=connectedChannel;  connected.set(true);  connectLatch.countDown();}  }
class C{  public static final void assertExp(boolean b,String s){  if (enabled && !b)   throw new AssertionException(s);}  }
class C{  public static int lerp(float t,int a,int b){  return (int)(a + t * (b - a));}  }
class C{  public DrawerBuilder withStickyDrawerItems(@NonNull ArrayList<IDrawerItem> stickyDrawerItems){  this.mStickyDrawerItems=IdDistributor.checkIds(stickyDrawerItems);  return this;}  }
class C{  private static void appendJSONPair(StringBuilder json,String key,String value) throws UnsupportedEncodingException {  boolean isValueNumeric=false;  try {    if (value.equals("0") || !value.endsWith("0")) {      Double.parseDouble(value);      isValueNumeric=true;    }  } catch (  NumberFormatException e) {    isValueNumeric=false;  }  if (json.charAt(json.length() - 1) != '{') {    json.append(',');  }  json.append(escapeJSON(key));  json.append(':');  if (isValueNumeric) {    json.append(value);  } else {    json.append(escapeJSON(value));  }}  }
class C{  public FiltersWizardPage(List<Filter> filters,String[] filterFields){  super("wizardPage");  setTitle("View or Set Filters");  setDescription("View or set the list of filters for the indicator outline view.");  this.newFilters=new ArrayList<Filter>();  for (  Filter filter : filters) {    newFilters.add(new Filter(filter));  }  this.filterFields=filterFields;}  }
class C{  private void handleRedirect(State state,HttpResponse response,int statusCode) throws StopRequest, RetryDownload {  if (Constants.LOGVV) {    Log.v(Constants.TAG,"got HTTP redirect " + statusCode);  }  if (state.mRedirectCount >= Constants.MAX_REDIRECTS) {    throw new StopRequest(DownloaderService.STATUS_TOO_MANY_REDIRECTS,"too many redirects");  }  Header header=response.getFirstHeader("Location");  if (header == null) {    return;  }  if (Constants.LOGVV) {    Log.v(Constants.TAG,"Location :" + header.getValue());  }  String newUri;  try {    newUri=new URI(mInfo.mUri).resolve(new URI(header.getValue())).toString();  } catch (  URISyntaxException ex) {    if (Constants.LOGV) {      Log.d(Constants.TAG,"Couldn't resolve redirect URI " + header.getValue() + " for "+ mInfo.mUri);    }    throw new StopRequest(DownloaderService.STATUS_HTTP_DATA_ERROR,"Couldn't resolve redirect URI");  }  ++state.mRedirectCount;  state.mRequestUri=newUri;  if (statusCode == 301 || statusCode == 303) {    state.mNewUri=newUri;  }  throw new RetryDownload();}  }
class C{  public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  private int readAnnotationValue(int v,final char[] buf,final String name,final AnnotationVisitor av){  int i;  if (av == null) {switch (b[v] & 0xFF) {case 'e':      return v + 5;case '@':    return readAnnotationValues(v + 3,buf,true,null);case '[':  return readAnnotationValues(v + 1,buf,false,null);default :return v + 3;}}switch (b[v++] & 0xFF) {case 'I':case 'J':case 'F':case 'D':av.visit(name,readConst(readUnsignedShort(v),buf));v+=2;break;case 'B':av.visit(name,(byte)readInt(items[readUnsignedShort(v)]));v+=2;break;case 'Z':av.visit(name,readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE);v+=2;break;case 'S':av.visit(name,(short)readInt(items[readUnsignedShort(v)]));v+=2;break;case 'C':av.visit(name,(char)readInt(items[readUnsignedShort(v)]));v+=2;break;case 's':av.visit(name,readUTF8(v,buf));v+=2;break;case 'e':av.visitEnum(name,readUTF8(v,buf),readUTF8(v + 2,buf));v+=4;break;case 'c':av.visit(name,Type.getType(readUTF8(v,buf)));v+=2;break;case '@':v=readAnnotationValues(v + 2,buf,true,av.visitAnnotation(name,readUTF8(v,buf)));break;case '[':int size=readUnsignedShort(v);v+=2;if (size == 0) {return readAnnotationValues(v - 2,buf,false,av.visitArray(name));}switch (this.b[v++] & 0xFF) {case 'B':byte[] bv=new byte[size];for (i=0; i < size; i++) {bv[i]=(byte)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,bv);--v;break;case 'Z':boolean[] zv=new boolean[size];for (i=0; i < size; i++) {zv[i]=readInt(items[readUnsignedShort(v)]) != 0;v+=3;}av.visit(name,zv);--v;break;case 'S':short[] sv=new short[size];for (i=0; i < size; i++) {sv[i]=(short)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,sv);--v;break;case 'C':char[] cv=new char[size];for (i=0; i < size; i++) {cv[i]=(char)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,cv);--v;break;case 'I':int[] iv=new int[size];for (i=0; i < size; i++) {iv[i]=readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,iv);--v;break;case 'J':long[] lv=new long[size];for (i=0; i < size; i++) {lv[i]=readLong(items[readUnsignedShort(v)]);v+=3;}av.visit(name,lv);--v;break;case 'F':float[] fv=new float[size];for (i=0; i < size; i++) {fv[i]=Float.intBitsToFloat(readInt(items[readUnsignedShort(v)]));v+=3;}av.visit(name,fv);--v;break;case 'D':double[] dv=new double[size];for (i=0; i < size; i++) {dv[i]=Double.longBitsToDouble(readLong(items[readUnsignedShort(v)]));v+=3;}av.visit(name,dv);--v;break;default :v=readAnnotationValues(v - 3,buf,false,av.visitArray(name));}}return v;}  }
class C{  public boolean isSetResponseTo(){  return EncodingUtils.testBit(__isset_bitfield,__RESPONSETO_ISSET_ID);}  }
class C{  public void addTargetsToStorageView(String viewName,List<PortInfo> targetPortInfo) throws VPlexApiException {  s_logger.info("Request to add targets to storage view on VPlex at {}",_baseURI);  _exportMgr.addTargetsToStorageView(viewName,targetPortInfo);}  }
class C{  public static Date rollMockClock(int seconds){  return rollMockClockMillis(seconds * 1000);}  }
class C{  public void show(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=LayoutParams.WRAP_CONTENT;  mContentView.setLayoutParams(lp);}  }
class C{  public static void create(){  if (instance == null) {    try {      instance=new SystemConsole();    } catch (    Exception ex) {      log.error("failed to complete Console redirection",ex);    }  }}  }
class C{  protected final void LONG_CMP(Instruction s,RegisterOperand res,Operand val1,Operand val2){  if (VM.BuildFor32Addr) {    RegisterOperand one=regpool.makeTempInt();    RegisterOperand lone=regpool.makeTempInt();    Operand two, ltwo;    if (val1 instanceof RegisterOperand) {      Register val1_reg=val1.asRegister().getRegister();      EMIT(CPOS(s,MIR_Move.create(IA32_MOV,one,new RegisterOperand(val1_reg,TypeReference.Int))));      EMIT(CPOS(s,MIR_Move.create(IA32_MOV,lone,new RegisterOperand(regpool.getSecondReg(val1_reg),TypeReference.Int))));    } else {      LongConstantOperand tmp=(LongConstantOperand)val1;      EMIT(CPOS(s,MIR_Move.create(IA32_MOV,one,IC(tmp.upper32()))));      EMIT(CPOS(s,MIR_Move.create(IA32_MOV,lone,IC(tmp.lower32()))));    }    if (val2 instanceof RegisterOperand) {      two=val2;      ltwo=L(burs.ir.regpool.getSecondReg(val2.asRegister().getRegister()));    } else {      LongConstantOperand tmp=(LongConstantOperand)val2;      two=IC(tmp.upper32());      ltwo=IC(tmp.lower32());    }    EMIT(CPOS(s,MIR_Compare.create(IA32_CMP,lone.copyRO(),ltwo)));    EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SBB,one.copyRO(),two)));    EMIT(CPOS(s,MIR_Set.create(IA32_SET__B,res,IA32ConditionOperand.LT())));    EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_OR,one.copyRO(),lone.copyRO())));    EMIT(CPOS(s,MIR_Set.create(IA32_SET__B,lone.copyRO(),IA32ConditionOperand.NE())));    EMIT(CPOS(s,MIR_UnaryAcc.create(IA32_NEG,res.copyRO())));    EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_OR,res.copyRO(),lone.copyRO())));    EMIT(MIR_Unary.mutate(s,IA32_MOVSX__B,res.copyRO(),res.copyRO()));  } else {    RegisterOperand one=regpool.makeTempLong();    RegisterOperand two=regpool.makeTempLong();    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,one,val1)));    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,two,val2)));    EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SUB,one,two)));    EMIT(CPOS(s,MIR_Set.create(IA32_SET__B,res,IA32ConditionOperand.NE())));    EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SAR,one.copyRO(),LC(64))));    EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_OR,res.copyRO(),one.copyRO())));  }}  }
class C{  public static void appendText(TextView view,String toAppend){  String currentText=getText(view);  view.setText(currentText + toAppend);}  }
class C{  public static Join inner(SqlTable<?> table,Property<?>... usingColumns){  return new Join(table,JoinType.INNER,usingColumns);}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  if (getAdapter() == null || getAdapter().getCount() == 0) {    Log.i(TAG,"SlidePager onTouchEvent returned false because adapter is null or empty:");    return false;  }  try {    return super.onTouchEvent(event);  } catch (  Exception e) {    Log.e(TAG,e.toString());  }  return false;}  }
class C{  public static SimpleScheduleBuilder repeatHourlyForever(){  return simpleSchedule().withIntervalInHours(1).repeatForever();}  }
class C{  @Override public void fillAssignedKeys(Set<String> keys){  keys.add(_column.getColumn().name());}  }
class C{  private static List<Territory> onlyWaterTerr(final GameData data,final List<Territory> allTerr){  final List<Territory> water=new ArrayList<>(allTerr);  final Iterator<Territory> wFIter=water.iterator();  while (wFIter.hasNext()) {    final Territory waterFact=wFIter.next();    if (!Matches.TerritoryIsWater.match(waterFact)) {      wFIter.remove();    }  }  return water;}  }
class C{  private void initView(){  JToolBar toolBar=new ExtendedJToolBar(true);  toolBar.setBorder(BorderFactory.createMatteBorder(0,0,1,0,Colors.TEXTFIELD_BORDER));  Action clearAction=new ClearCacheAction(map);  toolBar.add(clearAction);  JPanel headerPanel=new JPanel(IOObjectCacheEntryPanel.ENTRY_LAYOUT);  headerPanel.add(Box.createVerticalStrut(16),IOObjectCacheEntryPanel.ICON_CONSTRAINTS);  JLabel typeLabel=new JLabel(I18N.getGUILabel("ioobject_viewer.type"));  typeLabel.setFont(getFont().deriveFont(Font.ITALIC));  headerPanel.add(typeLabel,IOObjectCacheEntryPanel.TYPE_CONSTRAINTS);  JLabel keyLabel=new JLabel(I18N.getGUILabel("ioobject_viewer.key"));  keyLabel.setFont(getFont().deriveFont(Font.ITALIC));  headerPanel.add(keyLabel,IOObjectCacheEntryPanel.KEY_CONSTRAINTS);  headerPanel.add(Box.createVerticalStrut(24),IOObjectCacheEntryPanel.REMOVE_BUTTON_CONSTRAINTS);  scrollPane=new ExtendedJScrollPane(createEntriesPanel());  scrollPane.setBorder(null);  JPanel contentPanel=new JPanel(new BorderLayout());  contentPanel.add(headerPanel,BorderLayout.NORTH);  contentPanel.add(scrollPane,BorderLayout.CENTER);  add(toolBar,BorderLayout.NORTH);  add(contentPanel,BorderLayout.CENTER);}  }
class C{  public void onShowSheet(){}  }
class C{  public void error(SAXParseException e) throws SAXException {  throw e;}  }
class C{  public void removeStatListener(StatListener observer){  int listenerId=-1;  boolean foundIt=false;synchronized (this.statListenersLock) {    ListenerIdMap.EntryIterator it=this.statListeners.iterator();    ListenerIdMap.Entry e=it.next();    while (e != null) {      if (e.getValue() == observer) {        foundIt=true;        listenerId=e.getKey();        this.statListeners.remove(listenerId);        break;      }      e=it.next();    }  }  if (foundIt) {    cancelStatListener(listenerId);  }}  }
class C{  public CopyException(String msg){  super(msg);}  }
class C{  public Matrix4x3f m01(float m01){  this.m01=m01;  properties&=~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);  return this;}  }
class C{  boolean moveScrollTowards(int direction,Component next){  if (isScrollable()) {    Component current=null;    Form f=getComponentForm();    current=f.getFocused();    boolean cyclic=f.isCyclicFocus();    f.setCyclicFocus(false);    boolean edge=false;    boolean currentLarge=false;    boolean scrollOutOfBounds=false;    int x=getScrollX();    int y=getScrollY();    int w=getWidth();    int h=getHeight();switch (direction) {case Display.GAME_UP:      if (!cyclic && getScrollY() == 0) {        return true;      }    y=getScrollY() - scrollIncrement;  edge=f.findNextFocusUp() == null;currentLarge=(current != null && current.getVisibleBounds().getSize().getHeight() > getHeight());scrollOutOfBounds=y < 0;if (scrollOutOfBounds) {y=0;}break;case Display.GAME_DOWN:y=getScrollY() + scrollIncrement;edge=f.findNextFocusDown() == null;currentLarge=(current != null && current.getVisibleBounds().getSize().getHeight() > getHeight());scrollOutOfBounds=y > getScrollDimension().getHeight() - getHeight();if (scrollOutOfBounds) {y=getScrollDimension().getHeight() - getHeight();}break;case Display.GAME_RIGHT:x=getScrollX() + scrollIncrement;edge=f.findNextFocusRight() == null;currentLarge=(current != null && current.getVisibleBounds().getSize().getWidth() > getWidth());scrollOutOfBounds=x > getScrollDimension().getWidth() - getWidth();if (scrollOutOfBounds) {x=getScrollDimension().getWidth() - getWidth();}break;case Display.GAME_LEFT:x=getScrollX() - scrollIncrement;edge=f.findNextFocusLeft() == null;currentLarge=(current != null && current.getVisibleBounds().getSize().getWidth() > getWidth());scrollOutOfBounds=x < 0;if (scrollOutOfBounds) {x=0;}break;}f.setCyclicFocus(cyclic);if (next == null || next == this) {scrollRectToVisible(x,y,w,h,this);return false;}if (!cyclic && direction == Display.GAME_DOWN && edge) {scrollRectToVisible(x,y,w,h,this);return false;}boolean nextIntersects=contains(next) && Rectangle.intersects(next.getAbsoluteX(),next.getAbsoluteY(),next.getWidth(),next.getHeight(),getAbsoluteX() + x,getAbsoluteY() + y,w,h);if ((nextIntersects && !currentLarge && !edge) || (Rectangle.contains(getAbsoluteX() + getScrollX(),getAbsoluteY() + getScrollY(),w,h,next.getAbsoluteX(),next.getAbsoluteY(),next.getWidth(),next.getHeight()))) {return true;} else {if (!scrollOutOfBounds) {scrollRectToVisible(x,y,w,h,this);if (nextIntersects && !Rectangle.intersects(current.getAbsoluteX(),current.getAbsoluteY(),current.getWidth(),current.getHeight(),getAbsoluteX() + x,getAbsoluteY() + y,w,h)) {return true;}return false;} else {return true;}}}return true;}  }
class C{  public static Angle fromXY(double x,double y){  double radians=Math.atan2(y,x);  return new Angle(RADIANS_TO_DEGREES * radians,radians);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node addressNode;  Text textNode;  Text splitNode;  String value;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  addressNode=elementList.item(0);  textNode=(Text)addressNode.getFirstChild();  splitNode=textNode.splitText(30);  value=splitNode.getNodeValue();  assertEquals("textSplitTextFourAssert","98551",value);}  }
class C{  @Override public boolean isValid(){  return crlValidity.isValid();}  }
class C{  public TIntByteHash(int initialCapacity){  super(initialCapacity);  no_entry_key=(int)0;  no_entry_value=(byte)0;}  }
class C{  protected final AspectContainer addAmount(IAspectType type,int amount,boolean isDynamic){  List<InternalAspect> entries=this.getEntries(type);  int dynAmounts=0;  int staticAmounts=0;  int prevStaticAmounts=this.getAmount(type,false);  int prevDynAmounts=this.getAmount(type,true);  for (  InternalAspect aspect : entries) {    if (!aspect.isDynamic)     staticAmounts+=aspect.amount; else     dynAmounts+=aspect.amount;  }  if (!isDynamic)   staticAmounts+=amount; else   dynAmounts+=amount;  entries.clear();  entries.add(new InternalAspect(type,staticAmounts > 0 ? staticAmounts : 0,false,prevStaticAmounts != staticAmounts));  entries.add(new InternalAspect(type,dynAmounts > 0 ? dynAmounts : 0,true,true));  if (prevStaticAmounts != staticAmounts || prevDynAmounts != dynAmounts)   this.onChanged();  return this;}  }
class C{  @SideEffectFree public void logrb(Level level,@Nullable String sourceClass,@Nullable String sourceMethod,@Nullable String bundleName,@Nullable String msg){  throw new RuntimeException();}  }
class C{  Item newMethodItem(final String owner,final String name,final String desc,final boolean itf){  int type=itf ? IMETH : METH;  key3.set(type,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(type,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  private boolean hasBeenUploaded(final int id){  final DataHelper dataHelper=new DataHelper(this);  final Session session=dataHelper.loadSession(id);  if (session != null) {    return session.hasBeenExported();  } else {    return true;  }}  }
class C{  public LogFormatter(Logger log){  if (log == null)   log=Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);  Level lvl=null;  while (log != null) {    lvl=log.getLevel();    if (lvl != null)     break;    log=log.getParent();  }  ;  if (lvl == null)   lvl=Level.WARNING;  this.level=lvl;}  }
class C{  @Override public int hashCode(){  if (dateTimeValue == null) {    return 0;  }  return dateTimeValue.hashCode();}  }
class C{  public static boolean isGzip(byte[] buffer,int offset,int length){  return cookieMatches(GZIP_HEADER,buffer,offset,length);}  }
class C{  static void saveNonvolatilesBeforeSysCall(Instruction call,IR ir){  GenericPhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();  StackManager sm=(StackManager)ir.stackManager;  int location=sm.getOffsetForSysCall();  for (Enumeration<Register> e=phys.enumerateNonvolatileGPRs(); e.hasMoreElements(); ) {    Register r=e.nextElement();    Operand M=new StackLocationOperand(true,-location,(byte)WORDSIZE);    call.insertBefore(MIR_Move.create(IA32_MOV,M,new RegisterOperand(r,wordType)));    location+=WORDSIZE;  }  Operand M=new StackLocationOperand(true,-location,(byte)WORDSIZE);  call.insertBefore(MIR_Move.create(IA32_MOV,M,ir.regpool.makeTROp()));}  }
class C{  public void testSharedSymbols() throws Exception {  JsonFactory jf=new JsonFactory();  String DOC0="{ \"a\" : 1, \"x\" : [ ] }";  JsonParser jp0=createParser(jf,DOC0);  while (jp0.nextToken() != JsonToken.START_ARRAY) {  }  String doc1=createDoc(FIELD_NAMES,true);  String doc2=createDoc(FIELD_NAMES,false);  for (int x=0; x < 2; ++x) {    JsonParser jp1=createParser(jf,doc1);    JsonParser jp2=createParser(jf,doc2);    assertToken(JsonToken.START_OBJECT,jp1.nextToken());    assertToken(JsonToken.START_OBJECT,jp2.nextToken());    int len=FIELD_NAMES.length;    for (int i=0; i < len; ++i) {      assertToken(JsonToken.FIELD_NAME,jp1.nextToken());      assertToken(JsonToken.FIELD_NAME,jp2.nextToken());      assertEquals(FIELD_NAMES[i],jp1.getCurrentName());      assertEquals(FIELD_NAMES[len - (i + 1)],jp2.getCurrentName());      assertToken(JsonToken.VALUE_NUMBER_INT,jp1.nextToken());      assertToken(JsonToken.VALUE_NUMBER_INT,jp2.nextToken());      assertEquals(i,jp1.getIntValue());      assertEquals(i,jp2.getIntValue());    }    assertToken(JsonToken.END_OBJECT,jp1.nextToken());    assertToken(JsonToken.END_OBJECT,jp2.nextToken());    jp1.close();    jp2.close();  }}  }
class C{  public static int ZZ_CMAP(int ch){  return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 9] << 7) | ((ch >> 2) & 0x7f)] << 2) | (ch & 0x3)];}  }
class C{  private void usage(){  throw new UsageException("usb <generate|dump|load> [drive_name]");}  }
class C{  @Override public Task<Void> deactivate(){  try {    if (isDeactivated()) {      return Task.done();    }    return executionSerializer.offerJob(key,null,10000);  } catch (  Throwable ex) {    ex.printStackTrace();    return Task.done();  }}  }
class C{  protected void compareHierarchies(CalendarHierarchy expected,CalendarHierarchy found){  Assert.assertNotNull("Null description",found.getDescription());  Assert.assertEquals("Wrong hierarchy id.",expected.getId(),found.getId());  Assert.assertEquals("Number of children wrong.",expected.getChildren().size(),found.getChildren().size());  for (  String id : expected.getChildren().keySet()) {    Assert.assertTrue("Missing " + id + " within "+ found.getId(),found.getChildren().containsKey(id));    compareHierarchies(expected.getChildren().get(id),found.getChildren().get(id));  }}  }
class C{  @Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){  Log.i(LOGTAG,"Upgrading SQL database from " + oldVersion + " to "+ newVersion);  if (newVersion != DB_VERSION) {    Log.e(LOGTAG,"Don't know how to upgrade to version " + DB_VERSION);    return;  }}  }
class C{  public int hashCode(){  return getLastRawOffset() ^ checksum;}  }
class C{  public GEPSymbolSet symbolSetFor(final String symbolSetName,final EvolutionState state){  GEPSymbolSet set=null;  if (symbolSet.name.equals(symbolSetName))   set=symbolSet;  if (set == null)   state.output.error("The GEP symbol set \"" + symbolSetName + "\" could not be found.");  return set;}  }
class C{  private void acquireRPWorkflowLock(Workflow workflow,URI rpSystemId,List<URI> volumeIds){  Set<URI> cgUris=new HashSet<URI>();  for (  URI volumeId : volumeIds) {    Volume volume=_dbClient.queryObject(Volume.class,volumeId);    if (volume != null && !volume.getInactive() && !NullColumnValueGetter.isNullURI(volume.getConsistencyGroup())) {      cgUris.add(volume.getConsistencyGroup());    }  }  List<String> lockKeys=new ArrayList<String>();  for (  URI cgUri : cgUris) {    lockKeys.add(ControllerLockingUtil.getConsistencyGroupStorageKey(_dbClient,cgUri,rpSystemId));  }  if (!lockKeys.isEmpty()) {    boolean lockAcquired=_workflowService.acquireWorkflowLocks(workflow,lockKeys,LockTimeoutValue.get(LockType.RP_CG));    if (!lockAcquired) {      throw DeviceControllerException.exceptions.failedToAcquireLock(lockKeys.toString(),String.format("acquire lock for RP consistency group(s) %s",StringUtils.join(cgUris,",")));    }  }}  }
class C{  public void initialize(String schemaName,String cubeName) throws CarbonSortKeyAndGroupByException {  this.schemaName=schemaName;  this.cubeName=cubeName;  CarbonProperties carbonProperties=CarbonProperties.getInstance();  setSortConfiguration(carbonProperties);  this.recordHolderList=new Object[this.sortBufferSize][];  updateSortTempFileLocation();  deleteSortLocationIfExists();  if (!new File(this.tempFileLocation).mkdirs()) {    LOGGER.info("Sort Temp Location Already Exists");  }  int numberOfCores=0;  try {    numberOfCores=Integer.parseInt(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.NUM_CORES_LOADING,CarbonCommonConstants.NUM_CORES_DEFAULT_VAL));    numberOfCores=numberOfCores / 2;  } catch (  NumberFormatException exc) {    numberOfCores=Integer.parseInt(CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);  }  this.executorService=Executors.newFixedThreadPool(numberOfCores);  this.dataSorterAndWriterExecutorService=Executors.newFixedThreadPool(numberOfCores);  semaphore=new Semaphore(numberOfCores);  this.fileWriteBufferSize=Integer.parseInt(carbonProperties.getProperty(CarbonCommonConstants.CARBON_SORT_FILE_WRITE_BUFFER_SIZE,CarbonCommonConstants.CARBON_SORT_FILE_WRITE_BUFFER_SIZE_DEFAULT_VALUE));  this.isSortFileCompressionEnabled=Boolean.parseBoolean(carbonProperties.getProperty(CarbonCommonConstants.IS_SORT_TEMP_FILE_COMPRESSION_ENABLED,CarbonCommonConstants.IS_SORT_TEMP_FILE_COMPRESSION_ENABLED_DEFAULTVALUE));  try {    this.sortTempFileNoOFRecordsInCompression=Integer.parseInt(carbonProperties.getProperty(CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORDS_FOR_COMPRESSION,CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORD_FOR_COMPRESSION_DEFAULTVALUE));    if (this.sortTempFileNoOFRecordsInCompression < 1) {      LOGGER.error("Invalid value for: " + CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORDS_FOR_COMPRESSION + ":Only Positive Integer value(greater than zero) is allowed.Default value will "+ "be used");      this.sortTempFileNoOFRecordsInCompression=Integer.parseInt(CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORD_FOR_COMPRESSION_DEFAULTVALUE);    }  } catch (  NumberFormatException e) {    LOGGER.error("Invalid value for: " + CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORDS_FOR_COMPRESSION + ", only Positive Integer value is allowed. Default value will be used");    this.sortTempFileNoOFRecordsInCompression=Integer.parseInt(CarbonCommonConstants.SORT_TEMP_FILE_NO_OF_RECORD_FOR_COMPRESSION_DEFAULTVALUE);  }  if (isSortFileCompressionEnabled) {    LOGGER.info("Compression will be used for writing the sort temp File");  }  prefetch=CarbonCommonConstants.CARBON_PREFETCH_IN_MERGE_VALUE;  bufferSize=CarbonCommonConstants.CARBON_PREFETCH_BUFFERSIZE;  initAggType();}  }
class C{  public TermVectorsRequest termStatistics(boolean termStatistics){  setFlag(Flag.TermStatistics,termStatistics);  return this;}  }
class C{  public String toString(){  try {    return this.toString(0);  } catch (  Exception e) {    return null;  }}  }
class C{  public String asString(){  StringBuilder buff=new StringBuilder();  for (int i=0; i < arrayLevel; i++) {    if (refCount) {      buff.append("ptr< ");    }    buff.append("array< ");  }  if (refCount) {    if (!classObj.isPrimitive) {      buff.append("ptr< ");    }  }  buff.append(classObj.toString());  if (refCount) {    if (!classObj.isPrimitive) {      buff.append(" >");    }  }  for (int i=0; i < arrayLevel; i++) {    if (refCount) {      buff.append(" >");    } else {      if (!classObj.isPrimitive) {        buff.append("*");      }    }    buff.append(" >");  }  if (!refCount) {    if (isObject()) {      buff.append("*");    }  }  return buff.toString();}  }
class C{  public void unregisterDeviceService(Class<?> deviceClass,Class<?> discoveryClass){  if (!DeviceService.class.isAssignableFrom(deviceClass)) {    return;  }  if (!DiscoveryProvider.class.isAssignableFrom(discoveryClass)) {    return;  }  try {    DiscoveryProvider discoveryProvider=null;    for (    DiscoveryProvider dp : discoveryProviders) {      if (dp.getClass().isAssignableFrom(discoveryClass)) {        discoveryProvider=dp;        break;      }    }    if (discoveryProvider == null)     return;    Method m=deviceClass.getMethod("discoveryFilter");    Object result=m.invoke(null);    DiscoveryFilter discoveryFilter=(DiscoveryFilter)result;    String serviceId=discoveryFilter.getServiceId();    if (null == deviceClasses.remove(serviceId)) {      return;    }    discoveryProvider.removeDeviceFilter(discoveryFilter);    if (discoveryProvider.isEmpty()) {      discoveryProvider.stop();      discoveryProviders.remove(discoveryProvider);    }  } catch (  SecurityException e) {    e.printStackTrace();  }catch (  NoSuchMethodException e) {    e.printStackTrace();  }catch (  IllegalArgumentException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }catch (  InvocationTargetException e) {    e.printStackTrace();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:47.449 -0500",hash_original_method="A5A1976DCF128376F1184597AC290A44",hash_generated_method="EFD999286E4154CC4017A058D559EA48") public static List<SpellCheckerSubtype> sort(Context context,int flags,SpellCheckerInfo sci,List<SpellCheckerSubtype> subtypeList){  if (sci == null)   return subtypeList;  final HashSet<SpellCheckerSubtype> subtypesSet=new HashSet<SpellCheckerSubtype>(subtypeList);  final ArrayList<SpellCheckerSubtype> sortedList=new ArrayList<SpellCheckerSubtype>();  int N=sci.getSubtypeCount();  for (int i=0; i < N; ++i) {    SpellCheckerSubtype subtype=sci.getSubtypeAt(i);    if (subtypesSet.contains(subtype)) {      sortedList.add(subtype);      subtypesSet.remove(subtype);    }  }  for (  SpellCheckerSubtype subtype : subtypesSet) {    sortedList.add(subtype);  }  return sortedList;}  }
class C{  public DiscoveryNode[] pendingNodes(){  return pendingNodes.toArray(new DiscoveryNode[0]);}  }
class C{  public JCCompilationUnit TopLevel(List<JCAnnotation> packageAnnotations,JCExpression pid,List<JCTree> defs){  Assert.checkNonNull(packageAnnotations);  for (  JCTree node : defs)   Assert.check(node instanceof JCClassDecl || node instanceof JCImport || node instanceof JCSkip|| node instanceof JCErroneous|| (node instanceof JCExpressionStatement && ((JCExpressionStatement)node).expr instanceof JCErroneous),node.getClass().getSimpleName());  JCCompilationUnit tree=new JCCompilationUnit(packageAnnotations,pid,defs,null,null,null,null);  tree.pos=pos;  return tree;}  }
class C{  public HttpsURL(final char[] escaped,final String charset) throws URIException, NullPointerException {  protocolCharset=charset;  parseUriReference(new String(escaped),true);  checkValid();}  }
class C{  @SuppressWarnings("ForLoopReplaceableByForEach") Object readSerializable(Class<?> cls,List<Method> mtds,Method readResolveMtd,OptimizedClassDescriptor.Fields fields) throws ClassNotFoundException, IOException {  Object obj;  try {    obj=GridUnsafe.allocateInstance(cls);  } catch (  InstantiationException e) {    throw new IOException(e);  }  int handle=handles.assign(obj);  for (int i=0; i < mtds.size(); i++) {    Method mtd=mtds.get(i);    if (mtd != null) {      curObj=obj;      curFields=fields.fields(i);      try {        mtd.invoke(obj,this);      } catch (      IllegalAccessException|InvocationTargetException e) {        throw new IOException(e);      }    } else     readFields(obj,fields.fields(i));  }  if (readResolveMtd != null) {    try {      obj=readResolveMtd.invoke(obj);      handles.set(handle,obj);    } catch (    IllegalAccessException|InvocationTargetException e) {      throw new IOException(e);    }  }  return obj;}  }
class C{  public ImportCaReplyFromClipboardAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("ImportCaReplyFromClipboardAction.statusbar"));  putValue(NAME,res.getString("ImportCaReplyFromClipboardAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("ImportCaReplyFromClipboardAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("ImportCaReplyFromClipboardAction.image")))));}  }
class C{  public void testDataSizeEviction() throws Exception {  start();  igfsPrimary.create(FILE_RMT,true).close();  int blockCnt=3;  int blockSize=igfsPrimary.info(FILE_RMT).blockSize();  evictPlc.setMaxSize(blockSize * blockCnt);  append(FILE_RMT,blockSize * blockCnt);  checkEvictionPolicy(blockCnt,blockCnt * blockSize);  igfsPrimary.resetMetrics();  read(FILE_RMT,0,blockSize);  checkMetrics(1,0);  checkEvictionPolicy(blockCnt,blockCnt * blockSize);  append(FILE_RMT,blockSize);  checkEvictionPolicy(blockCnt,blockCnt * blockSize);  read(FILE_RMT,0,blockSize);  checkMetrics(2,0);  checkEvictionPolicy(blockCnt,blockCnt * blockSize);  read(FILE_RMT,blockSize,blockSize);  checkMetrics(3,1);  checkEvictionPolicy(blockCnt,blockCnt * blockSize);}  }
class C{  public static double[] lnToNormaliedProb(final double[] logs){  final double[] prob=new double[logs.length];  double max=logs[0];  for (int i=1; i < logs.length; i++) {    if (max < logs[i]) {      max=logs[i];    }  }  double sum=0.0;  for (int i=0; i < logs.length; i++) {    final double v=Math.exp(logs[i] - max);    prob[i]=v;    sum+=v;  }  for (int i=0; i < logs.length; i++) {    prob[i]=prob[i] / sum;  }  return prob;}  }
class C{  public OMPoly(double[] llPoints,int units,int lType){  this(llPoints,units,lType,-1);}  }
class C{  public void startNodeRepair(boolean canResume,boolean crossVdc) throws Exception {  this.mbean.startNodeRepair(canResume,crossVdc);}  }
class C{  public final void testSetIconWithDrawableParameter(){  Drawable icon=ContextCompat.getDrawable(getContext(),android.R.drawable.ic_dialog_info);  AbstractValidatorImplementation abstractValidator=new AbstractValidatorImplementation("foo");  abstractValidator.setIcon(icon);  assertEquals(icon,abstractValidator.getIcon());}  }
class C{  @Override public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(this.one + this.two);  buffer.append(" (");  buffer.append(this.one);  buffer.append("+");  buffer.append(this.two);  buffer.append(")");  return buffer.toString();}  }
class C{  public void read(Appendable dest) throws IOException {  if (_input == null)   throw new IOException("Reader closed");  dest.append(_input);}  }
class C{  public <T extends Event>T callEvent(T event){  Preconditions.checkNotNull(event,"event");  long start=System.nanoTime();  eventBus.post(event);  event.postCall();  long elapsed=start - System.nanoTime();  if (elapsed > 250000) {    ProxyServer.getInstance().getLogger().log(Level.WARNING,"Event {0} took more {1}ns to process!",new Object[]{event,elapsed});  }  return event;}  }
class C{  public Object clone(){  return this.copy();}  }
class C{  public static void close() throws AdeInternalException {  if (projectCon.get() == null) {    return;  }  try {    projectCon.get().close();    projectCon.set(null);  } catch (  SQLException e) {    throw new AdeInternalException("Failed closing connection ",e);  }}  }
class C{  public HashPrintJobAttributeSet(PrintJobAttribute attribute){  super(attribute,PrintJobAttribute.class);}  }
class C{  private boolean valid(int row,int col){  int d=0;  while (++d <= row) {    if (board[row - d][col]) {      return false;    }    if (col >= d && board[row - d][col - d]) {      return false;    }    if (col + d < n && board[row - d][col + d]) {      return false;    }  }  return true;}  }
class C{  public final static String encodeMD52(String s){  char hexDigits[]={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};  try {    byte[] btInput=s.getBytes();    MessageDigest digest=MessageDigest.getInstance("MD5");    digest.update(btInput);    byte[] md=digest.digest();    int j=md.length;    char str[]=new char[j * 2];    int k=0;    for (int i=0; i < j; i++) {      byte byte0=md[i];      str[k++]=hexDigits[byte0 >>> 4 & 0xf];      str[k++]=hexDigits[byte0 & 0xf];    }    return new String(str);  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  public void addSubDocuments(final Document[] docs) throws IOException {  for (  final Document doc : docs) {    this.sections.addAll(doc.sections);    this.titles.addAll(doc.titles());    this.keywords.addAll(doc.dc_subject());    for (    String d : doc.dc_description())     this.descriptions.add(d);    if (!(this.text instanceof ByteArrayOutputStream)) {      this.text=new ByteArrayOutputStream();    }    FileUtils.copy(doc.getTextStream(),(ByteArrayOutputStream)this.text);    this.anchors.addAll(doc.getAnchors());    this.rss.putAll(doc.getRSS());    this.images.putAll(doc.getImages());  }}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.ANNOTABLE_ELEMENT;}  }
class C{  private void prepareVolumeData() throws Exception {  prepareVPlexVolumeData();  prepareRPVolumeData();}  }
class C{  public Rectangle(){}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return ERROR_CODE;case 2:  return MESSAGE;default :return null;}}  }
class C{  public MessageArea addRadioButtons(final int defaultSelection,final String... values){  setInitialised(true);  this.radioDefaultSelection=defaultSelection;  this.radioValues=values;  return this;}  }
class C{  public SecurityException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static double covarianceFirstTwoColumns(double[][] data){  return covarianceTwoColumns(data,0,1);}  }
class C{  public boolean visit(MoveTargetEdit edit){  return visitNode(edit);}  }
class C{  public PinLaterJob buildJob(){  PinLaterJob job=new PinLaterJob(ByteBuffer.wrap(logData.getBytes()));  job.setNumAttemptsAllowed(10);  return job;}  }
class C{  @Override public void run(){  running=true;  Region region=null;  Chunk chunk=null;  Rectangle prev_bounds=new Rectangle();  long last_time=System.currentTimeMillis(), this_time;  loaded_chunks.clear();  while (running) {    Rectangle bounds=preview.getChunkBounds();    int floor, ceiling;synchronized (y_bounds_sync) {      floor=this.floor;      ceiling=this.ceiling;    }    boolean stop_iter=false;    if (!bounds.equals(prev_bounds) || y_bounds_changed) {      int cxs=bounds.x;      int czs=bounds.y;      int cxe=bounds.x + bounds.width;      int cze=bounds.y + bounds.height;      if (y_bounds_changed) {        y_bounds_changed=false;        loaded_chunks.clear();        chunk_images.clear();      }      Iterator<ChunkImage> iter=chunk_images.iterator();      while (iter.hasNext()) {        ChunkImage chunk_image=iter.next();        int cx=chunk_image.x / 64;        int cz=chunk_image.y / 64;        if (cx < cxs || cx > cxe || cz < czs || cz > cze) {          loaded_chunks.remove(cx * MAX_CHUNK_NUM + cz);          iter.remove();        }        Rectangle new_bounds=preview.getChunkBounds();        if (!bounds.equals(new_bounds) || y_bounds_changed) {          stop_iter=true;          break;        }        if (!running)         return;      }      preview.redraw(true);      for (int cx=cxs; cx <= cxe && !stop_iter; cx++) {        for (int cz=czs; cz <= cze && !stop_iter; cz++) {          if (loaded_chunks.contains(cx * MAX_CHUNK_NUM + cz))           continue;          try {            region=Region.findRegion(worldPath,dimension,cx,cz);            chunk=region.getChunk(cx,cz);          } catch (          Exception e) {            continue;          }          if (chunk == null)           continue;          int ix=chunk.getPosX();          int iy=chunk.getPosZ();          chunk.renderImages(floor,ceiling,preview.fastrendermode);          BufferedImage height_img=null;          if (!preview.fastrendermode)           height_img=chunk.getHeightImage();          BufferedImage img=chunk.getBlockImage();          preview.addImage(img,height_img,ix * 64,iy * 64);          loaded_chunks.add(cx * MAX_CHUNK_NUM + cz);          this_time=System.currentTimeMillis();          if (this_time - last_time > REPAINT_FREQUENCY) {            preview.repaint();            last_time=this_time;          }          Rectangle new_bounds=preview.getChunkBounds();          if (!bounds.equals(new_bounds) || y_bounds_changed)           stop_iter=true;          if (!running)           return;        }      }      if (!preview.fastrendermode)       preview.redraw(false); else       preview.redraw(true);      preview.repaint();    }    prev_bounds=bounds;    if (!stop_iter) {      try {        Thread.sleep(500);      } catch (      InterruptedException e) {      }    }  }}  }
class C{  public int problemId(){  return this.type.problemId();}  }
class C{  public KMLModel(String namespaceURI){  super(namespaceURI);}  }
class C{  public static Request newPost(){  return new Request(Code.POST);}  }
class C{  public String diff_prettyHtml(LinkedList<Diff> diffs){  StringBuilder html=new StringBuilder();  for (  Diff aDiff : diffs) {    String text=aDiff.text.replace("&","&amp;").replace("<","&lt;").replace(">","&gt;").replace("\n","&para;<br>");switch (aDiff.operation) {case INSERT:      html.append("<ins style=\"background:#e6ffe6;\">").append(text).append("</ins>");    break;case DELETE:  html.append("<del style=\"background:#ffe6e6;\">").append(text).append("</del>");break;case EQUAL:html.append("<span>").append(text).append("</span>");break;}}return html.toString();}  }
class C{  public UniqueIdMgr(String server){  super();  commonPartOfId=getCommonPartOfId(server);  lastcounter=0;}  }
class C{  public static <K>PriorityQueue<K> synchronize(final PriorityQueue<K> q,final Object sync){  return new SynchronizedPriorityQueue<K>(q,sync);}  }
class C{  public void startClean() throws Exception {  start();}  }
class C{  @Override protected String doTask() throws Exception {  ran.compareAndSet(false,true);  return getOnlyResource();}  }
class C{  @Override public boolean equals(Object o){  return (o instanceof Country) && (((Country)o).getIso().toUpperCase().equals(this.getIso().toUpperCase()));}  }
class C{  private User fetch(final String token){  try {    return new DefaultFacebookClient(token,this.requestor,new DefaultJsonMapper(),Version.LATEST).fetchObject("me",User.class);  } catch (  final FacebookException ex) {    throw new IllegalArgumentException(ex);  }}  }
class C{  public boolean hasTime(){  return dateHasTime;}  }
class C{  protected void keyPressed(KeyEvent e){  if (e.getSource() == treeSearch && treeSearch.getText() != null && treeSearch.getText().length() > 0 && treeSearch.getText().substring(0,1).equals(PREFIX_DOCUMENT_SEARCH)) {    setBusy(true);    DocumentSearch search=new DocumentSearch();    if (search.openDocumentsByDocumentNo(treeSearch.getText().substring(1)))     treeSearch.setText(null);    setBusy(false);    return;  }  if (e.getSource() instanceof JTree || (e.getSource() == treeSearch && e.getModifiers() != 0)) {    TreePath tp=tree.getSelectionPath();    if (tp == null)     ADialog.beep(); else {      MTreeNode tn=(MTreeNode)tp.getLastPathComponent();      setSelectedNode(tn);    }  } else   if (e.getSource() == treeSearch) {    String search=treeSearch.getText();    boolean found=false;    if (m_nodeEn != null && !m_nodeEn.hasMoreElements())     m_search="";    if (!search.equals(m_search)) {      m_nodeEn=m_root.preorderEnumeration();      m_search=search;    }    while (!found && m_nodeEn != null && m_nodeEn.hasMoreElements()) {      MTreeNode nd=(MTreeNode)m_nodeEn.nextElement();      if (nd.toString().toUpperCase().indexOf(search.toUpperCase()) != -1) {        found=true;        TreePath treePath=new TreePath(nd.getPath());        tree.setSelectionPath(treePath);        tree.makeVisible(treePath);        tree.scrollPathToVisible(treePath);      }    }    if (!found)     ADialog.beep();  }}  }
class C{  public synchronized void putAll(Map t){  int n=t.size();  if (n == 0)   return;  while (n >= threshold)   rehash();  for (Iterator it=t.entrySet().iterator(); it.hasNext(); ) {    Map.Entry entry=(Map.Entry)it.next();    Object key=entry.getKey();    Object value=entry.getValue();    put(key,value);  }}  }
class C{  @Override public boolean logModified(Logger log){  if (_isModifiedLog)   return true;  for (int i=_dependencyList.size() - 1; i >= 0; i--) {    Dependency dependency=_dependencyList.get(i);    if (dependency.logModified(log)) {      _isModifiedLog=true;      return true;    }  }  return false;}  }
class C{  public ReadStream(InputStream is){  this();  init(new VfsStream(is));}  }
class C{  protected void appendSummary(StringBuffer buffer,String fieldName,double[] array){  appendSummarySize(buffer,fieldName,array.length);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:01.403 -0500",hash_original_method="EB4FD7737CAA6B47FAF861D2CF75741C",hash_generated_method="6946942B3991A05F1F01A9DFA85486EB") private int nativeReadContent(byte[] buf,int bufOff,int len,int mediaOff){  addTaint(buf[0]);  addTaint(bufOff);  addTaint(len);  addTaint(mediaOff);  return getTaintInt();}  }
class C{  public boolean checkRootBySuAccess(){  if (new ShellExecutor().executeCommand(SU_CHECK_COMMAND) != null) {    return true;  } else {    return false;  }}  }
class C{  public static void main(String args[]) throws IOException {  FileWriter fw=new FileWriter(new File("cache.xml"));  PrintWriter pw=new PrintWriter(fw);  generateDefault(pw);  pw.close();  fw.close();}  }
class C{  private static void turnAdvancingFrontConvex(DTSweepContext tcx,AdvancingFrontNode b,AdvancingFrontNode c){  AdvancingFrontNode first=b;  while (c != tcx.aFront.tail) {    if (tcx.isDebugEnabled()) {      tcx.getDebugContext().setActiveNode(c);    }    if (orient2d(b.point,c.point,c.next.point) == Orientation.CCW) {      fill(tcx,c);      c=c.next;    } else {      if (b != first && orient2d(b.prev.point,b.point,c.point) == Orientation.CCW) {        fill(tcx,b);        b=b.prev;      } else {        b=c;        c=c.next;      }    }  }}  }
class C{  public boolean isIgnoringTrailingBlanks(){  return this.ignoreTrailingBlanks;}  }
class C{  public ErrorPacket(Buffer buffer){  buffer.skipByte();  this.errorNumber=buffer.readShort();  this.sqlStateMarker=buffer.readByte();  if (sqlStateMarker == '#') {    this.sqlState=buffer.readRawBytes(5);    this.message=buffer.readString(StandardCharsets.UTF_8);  } else {    this.message=new String(buffer.buf,buffer.position,buffer.limit,StandardCharsets.UTF_8);    this.sqlState="HY000".getBytes();  }}  }
class C{  public Regress(File sourceDir,File outputDir,int width){  this.sourceDir=sourceDir;  this.outputDir=outputDir;  this.width=width;}  }
class C{  public static void main(String[] args){  rGen=new Random();  rGen.setSeed(1);  int maxD=35;  int maxT=2;  int maxDT=9;  int n=4096;  int numSearches=1024;  System.out.println("NUM TRIALS:" + NUM_TRIALS);  double fracts[]=new double[]{0.00625,0.0125,0.025,0.05,0.1,0.2,0.4,0.8};  for (int f=0; f < fracts.length; f++) {    double fract=fracts[f];    System.out.println(fract + "...");    long kdSearch[]=new long[maxD];    long othSearch[]=new long[maxD];    long othWaiting[]=new long[maxD];    long sthSearch[][]=new long[maxD][maxT];    long sthWaiting[][]=new long[maxD][maxT];    for (int t=0; t < NUM_TRIALS; t++) {      System.out.println("  " + t + "...");      long now, done;      for (int d=2; d < maxD; d++) {        IMultiPoint[] points=randomPoints(n,d);        System.gc();        IMultiPoint[] searchPoints=randomPoints(numSearches,d);        KDTree tree=KDFactory.generate(points);        IMultiPoint[] resultsKD=new IMultiPoint[numSearches];        int idx=0;        System.gc();        now=System.currentTimeMillis();        for (        IMultiPoint imp : searchPoints) {          resultsKD[idx++]=tree.nearest(imp);        }        done=System.currentTimeMillis();        kdSearch[d]+=(done - now);        OneHelperKDTree ohtree=OneHelperKDFactory.generate(points);        IMultiPoint[] resultsOTH=new IMultiPoint[numSearches];        idx=0;        System.gc();        OneHelperKDNode.waiting=0;        now=System.currentTimeMillis();        for (        IMultiPoint imp : searchPoints) {          resultsOTH[idx++]=ohtree.nearest(imp);        }        done=System.currentTimeMillis();        othSearch[d]+=(done - now);        othWaiting[d]+=OneHelperKDNode.waiting;        for (int x=0; x < resultsOTH.length; x++) {          assert (resultsOTH[x].equals(resultsKD[x]));        }        if (d <= maxDT) {          for (int nt=0; nt < maxT; nt++) {            SmallProblemsKDTree ttree=SmallProblemsKDFactory.generate(points);            SmallProblemsKDNode.setNumberHelperThreads(nt);            SmallProblemsKDTree.fract=fract;            IMultiPoint[] resultsSTH=new IMultiPoint[numSearches];            idx=0;            System.gc();            SmallProblemsKDNode.waiting=0;            now=System.currentTimeMillis();            for (            IMultiPoint imp : searchPoints) {              resultsSTH[idx++]=ttree.nearest(imp);            }            done=System.currentTimeMillis();            sthSearch[d][nt]+=(done - now);            sthWaiting[d][nt]+=SmallProblemsKDNode.waiting;            for (int x=0; x < resultsOTH.length; x++) {              assert (resultsSTH[x].equals(resultsKD[x]));            }          }        }      }    }    System.out.print("d,kd,othd,othwait,");    for (int nt=0; nt < maxT; nt++) {      System.out.print("tkd" + nt + ",wait"+ nt+ ",");    }    System.out.println();    for (int d=2; d < maxD; d++) {      System.out.print(d + "," + kdSearch[d]+ ","+ othSearch[d]+ ","+ othWaiting[d]+ ",");      for (int nt=0; nt < maxT; nt++) {        System.out.print(sthSearch[d][nt] + "," + sthWaiting[d][nt]+ ",");      }      System.out.println();    }    System.out.println();  }}  }
class C{  protected void parseL() throws ParseException, IOException {  current=reader.read();  skipSpaces();  _parseL(true);}  }
class C{  private void validateModel(Class type) throws Exception {  if (!root.isEmpty()) {    root.validate(type);  }}  }
class C{  public void componentAdded(ContainerEvent e){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,Math.exp(z1));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private static final String toXml(Mass mass,boolean explicit){  StringBuilder sb=new StringBuilder();  Mass m=new Mass(mass);  m.setType(MassType.NORMAL);  sb.append("<Mass>").append(XmlGenerator.toXml(mass.getCenter(),"LocalCenter")).append("<Type>").append(mass.getType()).append("</Type>").append("<Mass>").append(m.getMass()).append("</Mass>").append("<Inertia>").append(m.getInertia()).append("</Inertia>").append("<Explicit>").append(explicit).append("</Explicit>").append("</Mass>");  return sb.toString();}  }
class C{  public static double mean(DoubleArrayList data){  return sum(data) / data.size();}  }
class C{  @SuppressWarnings("unchecked") public int put(Object obj,int pos){  assert obj != null;  assert pos >= 0;switch (mode) {case MODE_EMPTY:    this.data=obj;  this.singlePos=pos;this.mode=MODE_SINGLE;return POS_NULL;case MODE_SINGLE:if (this.data == obj) return singlePos; else {IdentityHashMap<Object,Integer> newData=new IdentityHashMap<>(2);newData.put(data,singlePos);newData.put(obj,pos);this.data=newData;this.singlePos=-1;this.mode=MODE_MULTIPLE;return POS_NULL;}default :assert mode == MODE_MULTIPLE;IdentityHashMap<Object,Integer> data0=(IdentityHashMap<Object,Integer>)data;Integer oldPos=data0.put(obj,pos);if (oldPos != null) {data0.put(obj,oldPos);return oldPos;} else return POS_NULL;}}  }
class C{  public void enableDashedLine(float lineLength,float spaceLength,float phase){  mDashPathEffect=new DashPathEffect(new float[]{lineLength,spaceLength},phase);}  }
class C{  public ArabicAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  public LocaleSpan(Locale locale){  mLocale=locale;}  }
class C{  private void paginate(){  List<Integer> edges=new ArrayList<>();  for (int i=0; i < mQuestionHolder.getChildCount(); i++) {    View child=mQuestionHolder.getChildAt(i);    edges.add(child.getTop());    if (child instanceof ODKView) {      List<QuestionWidget> widgets=((ODKView)child).getWidgets();      for (int j=1; j < widgets.size(); j++) {        edges.add(child.getTop() + widgets.get(j).getTop());      }    }  }  int maxPageHeight=(int)(mScrollView.getMeasuredHeight() * MAX_SCROLL_FRACTION);  mPageBreaks.clear();  mPageBreaks.add(0);  int prevBreak=0;  int nextBreak=prevBreak + maxPageHeight;  for (  int y : edges) {    while (y > prevBreak + maxPageHeight) {      mPageBreaks.add(nextBreak);      prevBreak=nextBreak;      nextBreak=prevBreak + maxPageHeight;    }    if (y > prevBreak) {      nextBreak=y;    }  }  int bottom=prevBreak + mScrollView.getMeasuredHeight();  int paddingHeight=bottom - mBottomPaddingView.getTop();  ViewGroup.LayoutParams params=mBottomPaddingView.getLayoutParams();  if (params.height != paddingHeight) {    params.height=paddingHeight;    mBottomPaddingView.requestLayout();  }}  }
class C{  public TopologicalLink(int srcNode,int destNode,float delay,float bw){  linkDelay=delay;  srcNodeID=srcNode;  destNodeID=destNode;  linkBw=bw;}  }
class C{  @Override public void performRequest(String request){  if (request.compareTo("Stop") == 0) {    stop();  } else   if (request.compareTo("Save model") == 0) {    saveModel();  } else   if (request.compareTo("Load model") == 0) {    loadModel();  } else {    throw new IllegalArgumentException(request + " not supported (Clusterer)");  }}  }
class C{  @Override public String toString(){  return new String(c,0,length);}  }
class C{  public void clear(){  for (int i=0; i < sampleQueues.size(); i++) {    sampleQueues.valueAt(i).clear();  }}  }
class C{  public ByteVector putInt(final int i){  int length=this.length;  if (length + 4 > data.length) {    enlarge(4);  }  byte[] data=this.data;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  default Filterable<T> removeAll(final T... values){  return removeAll(Stream.of(values));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Status asStatus(){  return new Status(getCode(),getLevel(),getDescription());}  }
class C{  public static void handleNetworkUpdated(Network network,Collection<URI> addVarrays,Collection<URI> remVarray,Collection<StoragePort> ports,Collection<StoragePort> remPorts,DbClient dbClient,CoordinatorClient coordinator){  StoragePortAssociationHelper.runUpdatePortAssociationsProcess(ports,remPorts,dbClient,coordinator,null);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void addAttribute(String uri,String localName,String rawName,String type,String value) throws SAXException {  if (m_elemContext.m_startTagOpen) {    addAttributeAlways(uri,localName,rawName,type,value,false);  }}  }
class C{  public static boolean checkRootPermission(){  return execCommand("echo root",true,false).result == 0;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void tag(int tagType,boolean longTag,byte[] contents) throws IOException {  tags.tag(tagType,longTag,contents);}  }
class C{  public HttpMonFactory(String labelPrefix){  this.labelPrefix=labelPrefix;}  }
class C{  public void testTopic(String prod_broker_url,String cons_broker_url) throws Exception {  int num_msg;  Connection conn;  Session sess;  String topic_name;  Destination cons_dest;  num_msg=5;  LOG.info("TESTING TOPICS " + prod_broker_url + " -> "+ cons_broker_url+ " ("+ num_msg+ " messages)");  conn=createConnection(cons_broker_url);  conn.start();  sess=conn.createSession(false,Session.AUTO_ACKNOWLEDGE);  topic_name="topotest2.perm.topic";  LOG.trace("Removing existing Topic");  removeTopic(conn,topic_name);  LOG.trace("Creating Topic, " + topic_name);  cons_dest=sess.createTopic(topic_name);  testOneDest(conn,sess,cons_dest,num_msg);  removeTopic(conn,topic_name);  sess.close();  conn.close();}  }
class C{  public EipEditorPlugin(){  super(new ResourceLocator[]{});}  }
class C{  private void animateProperty(int constantName,float toValue){  float fromValue=getValue(constantName);  float deltaValue=toValue - fromValue;  animatePropertyBy(constantName,fromValue,deltaValue);}  }
class C{  public void close(){  disConnect();  if (mBluetoothGatt != null) {    mBluetoothGatt.close();  }  mBluetoothGatt=null;}  }
class C{  synchronized void endOfPeriod(){  lastCallsPerPeriod=acquireCount;  totalAcquireCount+=acquireCount;  periodCount++;  acquireCount=0;  notifyAll();}  }
class C{  public SimpleCommandLineParser(String[] arg){  argMap=new HashMap<String,String>();  for (int i=0; i < arg.length; i++) {    String key;    if (arg[i].startsWith("--")) {      key=arg[i].substring(2);    } else     if (arg[i].startsWith("-")) {      key=arg[i].substring(1);    } else {      argMap.put(arg[i],null);      continue;    }    String value;    int index=key.indexOf('=');    if (index == -1) {      if (((i + 1) < arg.length) && (arg[i + 1].charAt(0) != '-')) {        argMap.put(key,arg[i + 1]);        i++;      } else {        argMap.put(key,null);      }    } else {      value=key.substring(index + 1);      key=key.substring(0,index);      argMap.put(key,value);    }  }}  }
class C{  private void paintRestoreEnabled(Graphics2D g,JComponent c,int width,int height){  restorePainter.paintEnabled(g,c,width,height);}  }
class C{  public void removeArm(){  world.getChildren().remove(manipulator);}  }
class C{  public static void handleFooterView(DrawerBuilder drawer,View.OnClickListener onClickListener){  Context ctx=drawer.mSliderLayout.getContext();  if (drawer.mStickyDrawerItems != null && drawer.mStickyDrawerItems.size() > 0) {    drawer.mStickyFooterView=DrawerUtils.buildStickyDrawerItemFooter(ctx,drawer,onClickListener);  }  if (drawer.mStickyFooterView != null) {    RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.WRAP_CONTENT);    layoutParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM,1);    drawer.mStickyFooterView.setId(R.id.material_drawer_sticky_footer);    drawer.mSliderLayout.addView(drawer.mStickyFooterView,layoutParams);    if ((drawer.mTranslucentNavigationBar || drawer.mFullscreen) && Build.VERSION.SDK_INT >= 19) {      drawer.mStickyFooterView.setPadding(0,0,0,UIUtils.getNavigationBarHeight(ctx));    }    RelativeLayout.LayoutParams layoutParamsListView=(RelativeLayout.LayoutParams)drawer.mRecyclerView.getLayoutParams();    layoutParamsListView.addRule(RelativeLayout.ABOVE,R.id.material_drawer_sticky_footer);    drawer.mRecyclerView.setLayoutParams(layoutParamsListView);    if (drawer.mStickyFooterShadow) {      drawer.mStickyFooterShadowView=new View(ctx);      drawer.mStickyFooterShadowView.setBackgroundResource(R.drawable.material_drawer_shadow_top);      drawer.mSliderLayout.addView(drawer.mStickyFooterShadowView,RelativeLayout.LayoutParams.MATCH_PARENT,ctx.getResources().getDimensionPixelSize(R.dimen.material_drawer_sticky_footer_elevation));      RelativeLayout.LayoutParams lps=(RelativeLayout.LayoutParams)drawer.mStickyFooterShadowView.getLayoutParams();      lps.addRule(RelativeLayout.ABOVE,R.id.material_drawer_sticky_footer);      drawer.mStickyFooterShadowView.setLayoutParams(lps);    }    drawer.mRecyclerView.setPadding(drawer.mRecyclerView.getPaddingLeft(),drawer.mRecyclerView.getPaddingTop(),drawer.mRecyclerView.getPaddingRight(),ctx.getResources().getDimensionPixelSize(R.dimen.material_drawer_padding));  }  if (drawer.mFooterView != null) {    if (drawer.mRecyclerView == null) {      throw new RuntimeException("can't use a footerView without a recyclerView");    }    if (drawer.mFooterDivider) {      drawer.getFooterAdapter().add(new ContainerDrawerItem().withView(drawer.mFooterView).withViewPosition(ContainerDrawerItem.Position.BOTTOM));    } else {      drawer.getFooterAdapter().add(new ContainerDrawerItem().withView(drawer.mFooterView).withViewPosition(ContainerDrawerItem.Position.NONE));    }  }}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public AbLevelView(Context context,AbLevelAbstractChart abstractChart){  super(context);  this.mContext=context;  this.mAbLevelChart=(AbLevelChart)abstractChart;  mPaint=new Paint();  DisplayMetrics displayMetrics=new DisplayMetrics();  ((Activity)context).getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);  screenWidth=displayMetrics.widthPixels;  screenHeight=displayMetrics.heightPixels;}  }
class C{  public static ClassCloner cloneClassAndInheritedMethods(SootClass original,boolean allMethods){  ClassCloner c=new ClassCloner(original,allMethods);  c.cloneClassCloneInheritedMethodsAndInstallClass();  return c;}  }
class C{  public static VarSymbol findFieldDeclaration(ClassSymbol classSymbol,Name name){  Iterator<Symbol> it=classSymbol.members_field.getElementsByName(name,null).iterator();  if (it.hasNext()) {    return (VarSymbol)it.next();  } else {    if (classSymbol.getSuperclass().tsym instanceof ClassSymbol) {      return findFieldDeclaration((ClassSymbol)classSymbol.getSuperclass().tsym,name);    } else {      return null;    }  }}  }
class C{  public UndoableEdit insertString(int where,String str) throws BadLocationException {  if (where >= count || where < 0) {    throw new BadLocationException("Invalid location",count);  }  char[] chars=str.toCharArray();  replace(where,0,chars,0,chars.length);  if (marks != null) {    updateMarksForInsert(where,str.length());  }  return new InsertUndo(where,str.length());}  }
class C{  public int peekEOFWarningCount(){  if (isEOF() && getDataLength() >= 3) {    return (byteBuffer[EOF_WARNING_COUNT_OFFSET] & 0xff) | ((byteBuffer[EOF_WARNING_COUNT_OFFSET + 1] & 0xff) << 8);  }  return -1;}  }
class C{  public void write(Environment env,OutputStream out) throws IOException {  DataOutputStream data=new DataOutputStream(out);  data.writeInt(JAVA_MAGIC);  data.writeShort(env.getMinorVersion());  data.writeShort(env.getMajorVersion());  cpool.write(data,env);  data.writeShort(getModifiers() & ACCM_CLASS);  data.writeShort(cpool.indexObject(getClassDeclaration(),env));  data.writeShort((getSuperClass() != null) ? cpool.indexObject(getSuperClass(),env) : 0);  data.writeShort(interfaces.length);  for (int i=0; i < interfaces.length; i++) {    data.writeShort(cpool.indexObject(interfaces[i],env));  }  int fieldCount=0, methodCount=0;  for (MemberDefinition f=firstMember; f != null; f=f.getNextMember())   if (f.isMethod())   methodCount++; else   fieldCount++;  data.writeShort(fieldCount);  for (MemberDefinition f=firstMember; f != null; f=f.getNextMember()) {    if (!f.isMethod()) {      data.writeShort(f.getModifiers() & ACCM_FIELD);      String name=f.getName().toString();      String signature=f.getType().getTypeSignature();      data.writeShort(cpool.indexString(name,env));      data.writeShort(cpool.indexString(signature,env));      BinaryAttribute.write(((BinaryMember)f).atts,data,cpool,env);    }  }  data.writeShort(methodCount);  for (MemberDefinition f=firstMember; f != null; f=f.getNextMember()) {    if (f.isMethod()) {      data.writeShort(f.getModifiers() & ACCM_METHOD);      String name=f.getName().toString();      String signature=f.getType().getTypeSignature();      data.writeShort(cpool.indexString(name,env));      data.writeShort(cpool.indexString(signature,env));      BinaryAttribute.write(((BinaryMember)f).atts,data,cpool,env);    }  }  BinaryAttribute.write(atts,data,cpool,env);  data.flush();}  }
class C{  public ListMenuPresenter(Context context,int itemLayoutRes){  this(itemLayoutRes,0);  mContext=context;  mInflater=LayoutInflater.from(mContext);}  }
class C{  void initView(View v){  mListView=((ListView)v.findViewById(R.id.listView_members));  IMXStore store=mSession.getDataHandler().getStore();  ArrayList<String> idsToIgnore=new ArrayList<String>();  Room fromRoom=store.getRoom(mRoomId);  Collection<RoomMember> currentMembers=fromRoom.getMembers();  for (  RoomMember member : currentMembers) {    idsToIgnore.add(member.getUserId());  }  ArrayList<RoomMember> members_OneToOne=new ArrayList<RoomMember>();  ArrayList<String> ids_OneToOne=new ArrayList<String>();  ArrayList<RoomMember> members_MaxTenMembers=new ArrayList<RoomMember>();  ArrayList<String> ids_MaxTenMembers=new ArrayList<String>();  ArrayList<RoomMember> members_BigRooms=new ArrayList<RoomMember>();  ArrayList<String> ids_BigRooms=new ArrayList<String>();  Collection<RoomSummary> summaries=store.getSummaries();  for (  RoomSummary summary : summaries) {    if (!summary.getRoomId().equals(mRoomId)) {      Room curRoom=store.getRoom(summary.getRoomId());      Collection<RoomMember> otherRoomMembers=curRoom.getMembers();      for (      RoomMember member : otherRoomMembers) {        String userID=member.getUserId();        if ((idsToIgnore.indexOf(userID) < 0) && (RoomMember.MEMBERSHIP_JOIN.equals(member.membership))) {          int posOneToOne=ids_OneToOne.indexOf(userID);          int posTenMembers=ids_MaxTenMembers.indexOf(userID);          int posBigRooms=ids_BigRooms.indexOf(userID);          if (otherRoomMembers.size() <= 2) {            if (posBigRooms >= 0) {              members_BigRooms.remove(posBigRooms);              ids_BigRooms.remove(posBigRooms);            }            if (posTenMembers >= 0) {              members_MaxTenMembers.remove(posTenMembers);              ids_MaxTenMembers.remove(posTenMembers);            }            if (posOneToOne < 0) {              members_OneToOne.add(member);              ids_OneToOne.add(member.getUserId());            }          } else           if (otherRoomMembers.size() <= 10) {            if (posBigRooms >= 0) {              members_BigRooms.remove(posBigRooms);              ids_BigRooms.remove(posBigRooms);            }            if ((posTenMembers < 0) && (posOneToOne < 0)) {              members_MaxTenMembers.add(member);              ids_MaxTenMembers.add(member.getUserId());            }          } else {            if ((posBigRooms < 0) && (posTenMembers < 0) && (posOneToOne < 0)) {              members_BigRooms.add(member);              ids_BigRooms.add(member.getUserId());            }          }        }      }    }  }  mAdapter=new MembersInvitationAdapter(getActivity(),mSession.getHomeserverConfig(),R.layout.adapter_item_members_invitation,getMXMediasCache());  Collections.sort(members_OneToOne,alphaComparator);  Collections.sort(members_MaxTenMembers,alphaComparator);  Collections.sort(members_BigRooms,alphaComparator);  mAdapter.addAll(members_OneToOne);  mAdapter.addAll(members_MaxTenMembers);  mAdapter.addAll(members_BigRooms);  ArrayList<Integer> bounds=new ArrayList<Integer>();  ArrayList<String> sectionTitles=new ArrayList<String>();  int index=0;  if (members_OneToOne.size() > 0) {    bounds.add(index);    sectionTitles.add(getActivity().getResources().getString(R.string.members_one_to_one));    index+=members_OneToOne.size();  }  if (members_MaxTenMembers.size() > 0) {    bounds.add(index);    sectionTitles.add(getActivity().getResources().getString(R.string.members_small_room_members));    index+=members_MaxTenMembers.size();  }  if (members_BigRooms.size() > 0) {    bounds.add(index);    sectionTitles.add(getActivity().getResources().getString(R.string.members_large_room_members));    index+=members_BigRooms.size();  }  mAdapter.setSectionTiles(bounds,sectionTitles);  mListView.setAdapter(mAdapter);}  }
class C{  public static <B>Builder<B> builder(){  return new Builder<B>();}  }
class C{  public CannotParseException(int code,Object... args){  this(Warning.parse(code,args));}  }
class C{  static void addToTimestamp(String operation,StringBuilder sb){  if (operation != null)   sb.append(operation);  sb.append("to_timestamp(?,'YYYY-MM-DD\"T\"HH24:MI:SS.FF TZH:TZM')");}  }
class C{  private static String createTooltip(String columnName,String type,String roleName){  StringBuilder tipBuilder=new StringBuilder();  tipBuilder.append("<html><table><tbody><tr><td><strong>");  tipBuilder.append(I18N.getGUILabel("io.dataimport.step.data_column_configuration.tooltip_name"));  tipBuilder.append("</strong><td><td>");  tipBuilder.append(columnName);  tipBuilder.append("<td></tr><tr><td><strong>");  tipBuilder.append(I18N.getGUILabel("io.dataimport.step.data_column_configuration.tooltip_type"));  tipBuilder.append("</strong><td><td>");  tipBuilder.append(type);  tipBuilder.append("<td></tr>");  if (roleName != null) {    tipBuilder.append("<tr><td><strong>");    tipBuilder.append(I18N.getGUILabel("io.dataimport.step.data_column_configuration.tooltip_role"));    tipBuilder.append("</strong><td><td>");    tipBuilder.append(roleName);    tipBuilder.append("<td></tr>");  }  tipBuilder.append("</tbody></table></html>");  return tipBuilder.toString();}  }
class C{  public void start(){  register();  coordinatorStreamConsumer.start();  coordinatorStreamIterator=coordinatorStreamConsumer.getStartIterator();  bootstrap();}  }
class C{  public static Version version(){  return vers;}  }
class C{  void write(ByteCodeWriter out) throws IOException {  out.write(ConstantPool.CP_FIELD_REF);  out.writeShort(_classIndex);  out.writeShort(_nameAndTypeIndex);}  }
class C{  public SortOrder(){}  }
class C{  public ThumbnailParameterBuilder scale(double scalingFactor){  return scale(scalingFactor,scalingFactor);}  }
class C{  private static int[] computeDiffLine(ImageLineInt l1,ImageLineInt l2){  double maxDif=-1;  int maxDifCol=-1;  double dif;  int channels=l1.imgInfo.channels;  int[] scanline1=l1.getScanline();  int[] scanline2=l2.getScanline();  for (int col=0; col < l1.imgInfo.cols; col++) {    dif=Math.abs(scanline1[col * channels] - scanline2[col * channels]) + Math.abs(scanline1[col * channels + 1] - scanline2[col * channels + 1]) + Math.abs(scanline1[col * channels + 2] - scanline2[col * channels + 2]);    if (channels == 4)     dif+=Math.abs(scanline1[col * channels + 3] - scanline2[col * channels + 3]);    if (dif > maxDif) {      maxDif=dif;      maxDifCol=col;    }  }  return new int[]{(int)(maxDif + 0.5),maxDifCol};}  }
class C{  public ExceptionTable(ConstPool cp){  constPool=cp;  entries=new ArrayList();}  }
class C{  public void onCenterUpdated(LatLng center){  circle.setCenter(center);}  }
class C{  public boolean acceptsURL(String url) throws SQLException {  if (url == null) {    throw new SQLException("url is null");  }  for (  String protocol : GDSFactory.getSupportedProtocols()) {    if (url.startsWith(protocol))     return true;  }  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  long x=getLong(stack);  return (x == 0) ? "" : Sage.tfjFull(x);}  }
class C{  public static void killIOSApp(String appString){  Process p=null;  int processId=-1;  try {    processId=MobileUtil.getIOSProcessId(appString,false);    killIOSApp(new Integer(processId).intValue());  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  return m_view.modelToView(pos,a,b);}  }
class C{  public void addModifyListener(ModifyListener listener){  checkWidget();  if (listener == null)   SWT.error(SWT.ERROR_NULL_ARGUMENT);  TypedListener typedListener=new TypedListener(listener);  addListener(SWT.Modify,typedListener);}  }
class C{  private void updateVersion(){  version.incrementAndGet();}  }
class C{  public Inset(int initialCapacity){  super(initialCapacity);}  }
class C{  public boolean isCounterClockwise(){  return this.counterClockwise;}  }
class C{  public String transformAllValuesTipText(){  return "Whether all nominal values are turned into new attributes, not only if there are more than 2.";}  }
class C{  private float crossCheckVertical(int startI,int centerJ,int maxCount,int originalStateCountTotal){  BitMatrix image=this.image;  int maxI=image.getHeight();  int[] stateCount=getCrossCheckStateCount();  int i=startI;  while (i >= 0 && image.get(centerJ,i)) {    stateCount[2]++;    i--;  }  if (i < 0) {    return Float.NaN;  }  while (i >= 0 && !image.get(centerJ,i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i--;  }  if (i < 0 || stateCount[1] > maxCount) {    return Float.NaN;  }  while (i >= 0 && image.get(centerJ,i) && stateCount[0] <= maxCount) {    stateCount[0]++;    i--;  }  if (stateCount[0] > maxCount) {    return Float.NaN;  }  i=startI + 1;  while (i < maxI && image.get(centerJ,i)) {    stateCount[2]++;    i++;  }  if (i == maxI) {    return Float.NaN;  }  while (i < maxI && !image.get(centerJ,i) && stateCount[3] < maxCount) {    stateCount[3]++;    i++;  }  if (i == maxI || stateCount[3] >= maxCount) {    return Float.NaN;  }  while (i < maxI && image.get(centerJ,i) && stateCount[4] < maxCount) {    stateCount[4]++;    i++;  }  if (stateCount[4] >= maxCount) {    return Float.NaN;  }  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2]+ stateCount[3]+ stateCount[4];  if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {    return Float.NaN;  }  return foundPatternCross(stateCount) ? centerFromEnd(stateCount,i) : Float.NaN;}  }
class C{  public void addCalendar(String calName,Calendar calendar,boolean replace,boolean updateTriggers) throws SchedulerException {  validateState();  resources.getJobStore().storeCalendar(calName,calendar,replace,updateTriggers);}  }
class C{  @Override public boolean ccTouchesBegan(MotionEvent event){  if (!getVisible()) {    return false;  }  CGRect frame;  locationbegan=CCDirector.sharedDirector().convertToGL(CGPoint.ccp(event.getX(),event.getY()));  frame=CGRect.make(0,0,viewSize.width,viewSize.height);  CGPoint touch=convertTouchToNodeSpace(event);  if (!CGRect.containsPoint(frame,touch)) {    touchPoint_=CGPoint.ccp(-1.0f,-1.0f);    isDragging_=false;    return false;  }  touchPoint_=touch;  touchMoved_=false;  isDragging_=true;  scrollDistance_=CGPoint.ccp(0.0f,0.0f);  touchLength_=0.0f;  return true;}  }
class C{  public PullParams withAuthConfigs(AuthConfigs authConfigs){  this.authConfigs=authConfigs;  return this;}  }
class C{  public VqlAst(ILinkTableConfiguration linkTableConfiguration){  this.linkTableConfiguration=linkTableConfiguration;  this.vqlGraph=new DefaultDirectedGraph<>(VqlEdge.class);  createQueryTree();}  }
class C{  public static <T>ObjectName registerCacheMBean(MBeanServer mbeanSrv,@Nullable String gridName,@Nullable String cacheName,String name,T impl,Class<T> itf) throws JMException {  assert mbeanSrv != null;  assert name != null;  assert itf != null;  DynamicMBean mbean=new IgniteStandardMXBean(impl,itf);  mbean.getMBeanInfo();  return mbeanSrv.registerMBean(mbean,makeCacheMBeanName(gridName,cacheName,name)).getObjectName();}  }
class C{  void handleAsyncUpdateSubscription(Subscription subscription,Product targetProduct) throws TechnicalServiceNotAliveException, TechnicalServiceOperationException {  EnumSet<SubscriptionStatus> set=EnumSet.of(SubscriptionStatus.ACTIVE,SubscriptionStatus.SUSPENDED);  SubscriptionStatus status=subscription.getStatus();  if (set.contains(status)) {    appManager.asyncModifySubscription(subscription,targetProduct);switch (status) {case ACTIVE:      subscription.setStatus(SubscriptionStatus.PENDING_UPD);    break;case SUSPENDED:  subscription.setStatus(SubscriptionStatus.SUSPENDED_UPD);break;default :break;}}}  }
class C{  public void switchToSpellCasting(KeyEvent e){  RPObject spell=findSpell(e);  if (spell != null) {    switchToSpellCastingState(spell);  }}  }
class C{  private void handleSubscribeToProduct(TriggerProcess process,LocalizerFacade facade) throws IOException, WSDLException, ParserConfigurationException {  INotificationServiceAdapter serviceClient=getServiceClient(process.getTriggerDefinition());  VOTriggerProcess vo=TriggerProcessAssembler.toVOTriggerProcess(process,facade);  VOSubscription subscription=getParamValue(process.getParamValueForName(TriggerProcessParameterName.SUBSCRIPTION),VOSubscription.class);  VOService product=getParamValue(process.getParamValueForName(TriggerProcessParameterName.PRODUCT),VOService.class);  List<?> usersTemp=getParamValue(process.getParamValueForName(TriggerProcessParameterName.USERS),List.class);  List<VOUsageLicense> users=new ArrayList<VOUsageLicense>();  if (usersTemp != null) {    for (    Object object : usersTemp) {      users.add(VOUsageLicense.class.cast(object));    }  }  serviceClient.onSubscribeToProduct(VOConverter.convertToApi(vo),VOConverter.convertToApi(subscription),VOConverter.convertToApi(product),VOCollectionConverter.convertList(users,org.oscm.vo.VOUsageLicense.class));  updateProcessState(process);}  }
class C{  public <AnnotationType extends Annotation>void register(FieldBinder<AnnotationType> binder){  fieldBinders.add(binder);  for (  BinderCache cache : classBinderCacheMap.values()) {    cache.register(binder);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void selectionChanged(IAction action,ISelection selection){}  }
class C{  long triggerTime(long delay){  return now() + ((delay < (Long.MAX_VALUE >> 1)) ? delay : overflowFree(delay));}  }
class C{  private int copyInt4(byte[] buffer,int index,int i){  buffer[index++]=(byte)(i & 0xFF);  buffer[index++]=(byte)((i >> 8) & 0xFF);  buffer[index++]=(byte)((i >> 16) & 0xFF);  buffer[index++]=(byte)((i >> 24) & 0xFF);  return index;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodecdatasectionnodevalue.class,args);}  }
class C{  private void verifyCreateDatabase(String cmd,String dbmsType){  SqlStatementParser p=SqlStatementParser.getParser();  SqlOperation op=p.parse(cmd,dbmsType);  Assert.assertEquals("Found object type: " + dbmsType,SqlOperation.SCHEMA,op.getObjectType());  Assert.assertEquals("Found operation: " + dbmsType,SqlOperation.CREATE,op.getOperation());  Assert.assertEquals("Found database: " + dbmsType,"foo",op.getSchema());  Assert.assertNull("No table: " + dbmsType,op.getName());  Assert.assertTrue("Is autocommit: " + dbmsType,op.isAutoCommit());}  }
class C{  public SearchSourceBuilder fetchSource(@Nullable String include,@Nullable String exclude){  return fetchSource(include == null ? Strings.EMPTY_ARRAY : new String[]{include},exclude == null ? Strings.EMPTY_ARRAY : new String[]{exclude});}  }
class C{  private int add(CharSequence value,long[] bloom,int[] bloomSeeds,long bloomMask){  int i=bloomSeeds.length;  int seen=1;  while (--i >= 0) {    seen=updateBloom(bloom,bloomMask,seen,MurmurHash.hash32(value,bloomSeeds[i]));  }  memberCount++;  return seen;}  }
class C{  private void mergeCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] <= runLen[n] + runLen[n + 1]) {      if (runLen[n - 1] < runLen[n + 1])       n--;      mergeAt(n);    } else     if (runLen[n] <= runLen[n + 1]) {      mergeAt(n);    } else {      break;    }  }}  }
class C{  public boolean isCachedValidated(){  if (logger.isTraceEnabled())   logger.trace("isCachedValidated=" + isFlags(FLAG_CACHED_VALUES_CHECKED) + ": "+ getAbsolutePath());  return isFlags(FLAG_CACHED_VALUES_CHECKED);}  }
class C{  public static void dismissKeyboard(Activity activity,View view){  InputMethodManager imm=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);  if (view != null) {    imm.hideSoftInputFromWindow(view.getWindowToken(),0);  }}  }
class C{  public ConstraintMap createAssignmentConstraints(final AnnotatedTypeMirror assignedTo,final AnnotatedTypeMirror boxedReturnType,final AnnotatedExecutableType methodType,final Set<AFConstraint> afArgumentConstraints,final Map<TypeVariable,AnnotatedTypeMirror> inferredArgs,final Set<TypeVariable> targets,final AnnotatedTypeFactory typeFactory){  final LinkedList<AFConstraint> assignmentAfs=new LinkedList<>();  for (  AnnotatedTypeVariable typeParam : methodType.getTypeVariables()) {    final TypeVariable target=typeParam.getUnderlyingType();    final AnnotatedTypeMirror inferredType=inferredArgs.get(target);    if (inferredType != null) {      assignmentAfs.add(new A2F(inferredType,typeParam.getUpperBound()));      assignmentAfs.add(new F2A(typeParam.getLowerBound(),inferredType));    } else {      assignmentAfs.add(new F2A(typeParam,typeParam.getUpperBound()));      assignmentAfs.add(new A2F(typeParam.getLowerBound(),typeParam));    }  }  for (  AFConstraint argConstraint : afArgumentConstraints) {    if (argConstraint instanceof F2A) {      assignmentAfs.add(argConstraint);    }  }  LinkedList<AFConstraint> substitutedAssignmentConstraints=new LinkedList<>();  for (  AFConstraint afConstraint : assignmentAfs) {    substitutedAssignmentConstraints.add(afConstraint.substitute(inferredArgs));  }  final AnnotatedTypeMirror substitutedReturnType=TypeArgInferenceUtil.substitute(inferredArgs,boxedReturnType);  substitutedAssignmentConstraints.add(new F2A(substitutedReturnType,assignedTo));  final Set<AFConstraint> reducedConstraints=new LinkedHashSet<>();  reduceAfConstraints(typeFactory,reducedConstraints,substitutedAssignmentConstraints,targets);  final Set<TUConstraint> tuAssignmentConstraints=afToTuConstraints(reducedConstraints,targets);  addConstraintsBetweenTargets(tuAssignmentConstraints,targets,true,typeFactory);  return constraintMapBuilder.build(targets,tuAssignmentConstraints,typeFactory);}  }
class C{  protected void customizeFileChooser(JFileChooser chooser){}  }
class C{  public String toJson(){  return gson.toJson(this);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @SuppressWarnings("ErrorNotRethrown") private void waitSetResourcesCleared() throws IgniteCheckedException {  final int MAX_CHECK=5;  for (int i=0; i < MAX_CHECK; i++) {    try {      assertSetResourcesCleared();      return;    } catch (    AssertionFailedError e) {      if (i == MAX_CHECK - 1)       throw e;      log.info("Set resources not cleared, will wait more.");      U.sleep(1000);    }  }}  }
class C{  public final synchronized void close(){  log.fine("Shutting down blacklists ...");  for (  final BlacklistType blacklistType : BlacklistType.values()) {    saveDHTCache(blacklistType);  }  log.fine("All blacklists has been shutdown.");}  }
class C{  protected boolean doTest(String theMacAlgo,String thePBKDF2Algo) throws NoSuchAlgorithmException, InvalidKeyException, InvalidKeySpecException {  SecretKey key=getSecretKey(thePBKDF2Algo);  Mac theMac=Mac.getInstance(theMacAlgo);  theMac.init(key);  if (!largeByteBufferTest(theMac)) {    System.out.println("Large ByteBuffer test case failed.");    return false;  }  if (!emptyByteBufferTest(theMac)) {    System.out.println("Empty ByteBuffer test case failed.");    return false;  }  if (!nullByteBufferTest(theMac)) {    System.out.println("NULL ByteBuffer test case failed.");    return false;  }  return true;}  }
class C{  public SensorTableAction(String actionName){  super(actionName);  if (senManager == null) {    setEnabled(false);  }}  }
class C{  @Override public int hashCode(){  int result=193;  result=37 * result + (int)(this.baseMillis ^ (this.baseMillis >>> 32));  result=37 * result + this.positivePrefix.hashCode();  result=37 * result + this.daySuffix.hashCode();  result=37 * result + this.hourSuffix.hashCode();  result=37 * result + this.minuteSuffix.hashCode();  result=37 * result + this.secondSuffix.hashCode();  result=37 * result + this.secondFormatter.hashCode();  return result;}  }
class C{  public T compact(String value){  return attr("compact",value);}  }
class C{  public static Object generateExampleForRefModel(boolean generateMissingExamples,String simpleRef,Map<String,Model> definitions,MarkupDocBuilder markupDocBuilder,Map<String,Integer> refStack){  Model model=definitions.get(simpleRef);  Object example=null;  if (model != null) {    example=model.getExample();    if (example == null && generateMissingExamples) {      if (!refStack.containsKey(simpleRef)) {        refStack.put(simpleRef,1);      } else {        refStack.put(simpleRef,refStack.get(simpleRef) + 1);      }      if (refStack.get(simpleRef) <= MAX_RECURSION_TO_DISPLAY) {        if (model instanceof ComposedModel) {          example=exampleMapForProperties(getPropertiesForComposedModel((ComposedModel)model,definitions),definitions,markupDocBuilder,refStack);        } else {          example=exampleMapForProperties(model.getProperties(),definitions,markupDocBuilder,refStack);        }      } else {        return "...";      }      refStack.put(simpleRef,refStack.get(simpleRef) - 1);    }  }  return example;}  }
class C{  public static Throwable shouldFail(Closure code){  boolean failed=false;  Throwable th=null;  try {    code.call();  } catch (  GroovyRuntimeException gre) {    failed=true;    th=ScriptBytecodeAdapter.unwrap(gre);  }catch (  Throwable e) {    failed=true;    th=e;  }  assertTrue("Closure " + code + " should have failed",failed);  return th;}  }
class C{  private void ensureSortedByIndex(){  if (currentSortOrder != SORT_ORDER_BY_INDEX) {    Collections.sort(samples,INDEX_COMPARATOR);    currentSortOrder=SORT_ORDER_BY_INDEX;  }}  }
class C{  @Override public void dropView(){  view=null;  subs.unsubscribeAll();}  }
class C{  public InfoModelMappingRule createInfoModelMappingRule(){  InfoModelMappingRuleImpl infoModelMappingRule=new InfoModelMappingRuleImpl();  return infoModelMappingRule;}  }
class C{  private static IOException badHostName(String hostname){  return new IOException(String.format(BAD_HOST,hostname));}  }
class C{  public static CachedFile addCachedFile(File f){  if (f == null) {    if (logger.isTraceEnabled())     logger.trace("addCachedFile(f) - unexpected null parameter");    return null;  }  String path=f.getPath();  CachedFile cf=inCache(f);  if (cf == null) {    cf=new CachedFile(path);    cachedFilesMap.put(path,cf);    if (logger.isTraceEnabled())     logger.trace("Added file to cache: " + path);  }  return cf;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public static List<INaviView> loadMixedgraphs(final AbstractSQLProvider provider,final CProject project,final CTagManager viewTagManager,final CTagManager nodeTagManager) throws CouldntLoadDataException {  checkArguments(provider,project,viewTagManager);  final String query="SELECT * FROM load_module_mixed_graph(?)";  try {    final CConnection connection=provider.getConnection();    final PreparedStatement statement=connection.getConnection().prepareStatement(query);    statement.setInt(1,project.getConfiguration().getId());    final ResultSet resultSet=statement.executeQuery();    final Map<Integer,Set<CTag>> tags=loadTags(connection,project,viewTagManager);    return new ArrayList<INaviView>(processQueryResults(resultSet,project,tags,nodeTagManager,provider,new ArrayList<CView>(),ViewType.NonNative,GraphType.MIXED_GRAPH));  } catch (  final SQLException exception) {    throw new CouldntLoadDataException(exception);  }}  }
class C{  protected void sendFunctionGroup2(){  sendUpdate();}  }
class C{  public void nextBytes(byte[] bytes){  org.evosuite.runtime.Random.nextBytes(bytes);}  }
class C{  public static void assertLabel(int[] path,String text){  if (verbose) {    log("assertLabel(" + toString(path) + ", "+ text+ ")");  }  Label l=(Label)getComponentByPath(path);  assertBool(l != null,"Null label" + text);  assertBool(text == l.getText() || text.equals(l.getText()),("" + l.getText()) + " != " + text);}  }
class C{  public static boolean isAnonymous(TypeMirror type){  return (type instanceof DeclaredType) && (((TypeElement)((DeclaredType)type).asElement()).getNestingKind().equals(NestingKind.ANONYMOUS));}  }
class C{  public boolean checkError(){  Writer delegate=out;  if (delegate == null) {    return ioError;  }  flush();  return ioError || delegate.checkError();}  }
class C{  void torsoTwist(Coords cTarget){  int direction=ce().getFacing();  if (null != cTarget) {    direction=ce().clipSecondaryFacing(ce().getPosition().direction(cTarget));  }  if (direction != ce().getSecondaryFacing()) {    clearAttacks();    attacks.addElement(new TorsoTwistAction(cen,direction));    ce().setSecondaryFacing(direction);    refreshAll();  }}  }
class C{  public void threadDump(OutputStream out){  final ThreadInfo[] threads=this.threads.dumpAllThreads(true,true);  final PrintWriter writer=new PrintWriter(out,true);  for (int ti=threads.length - 1; ti >= 0; ti--) {    final ThreadInfo t=threads[ti];    writer.printf("%s id=%d state=%s",t.getThreadName(),t.getThreadId(),t.getThreadState());    final LockInfo lock=t.getLockInfo();    if (lock != null && t.getThreadState() != State.BLOCKED) {      writer.printf("\n    - waiting on <0x%08x> (a %s)",lock.getIdentityHashCode(),lock.getClassName());      writer.printf("\n    - locked <0x%08x> (a %s)",lock.getIdentityHashCode(),lock.getClassName());    } else     if (lock != null && t.getThreadState() == State.BLOCKED) {      writer.printf("\n    - waiting to lock <0x%08x> (a %s)",lock.getIdentityHashCode(),lock.getClassName());    }    if (t.isSuspended()) {      writer.print(" (suspended)");    }    if (t.isInNative()) {      writer.print(" (running in native)");    }    writer.println();    if (t.getLockOwnerName() != null) {      writer.printf("     owned by %s id=%d\n",t.getLockOwnerName(),t.getLockOwnerId());    }    final StackTraceElement[] elements=t.getStackTrace();    final MonitorInfo[] monitors=t.getLockedMonitors();    for (int i=0; i < elements.length; i++) {      final StackTraceElement element=elements[i];      writer.printf("    at %s\n",element);      for (int j=1; j < monitors.length; j++) {        final MonitorInfo monitor=monitors[j];        if (monitor.getLockedStackDepth() == i) {          writer.printf("      - locked %s\n",monitor);        }      }    }    writer.println();    final LockInfo[] locks=t.getLockedSynchronizers();    if (locks.length > 0) {      writer.printf("    Locked synchronizers: count = %d\n",locks.length);      for (      LockInfo l : locks) {        writer.printf("      - %s\n",l);      }      writer.println();    }  }  writer.println();  writer.flush();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public AdvancedStateMap.Builder withName(Function<PropertiesMap,String> mapper){  this.nameMapper=mapper;  return this;}  }
class C{  protected void handleAppendResponse(MemberState member,AppendRequest request,AppendResponse response){  updateHeartbeatTime(member,null);  super.handleAppendResponse(member,request,response);}  }
class C{  public static ComponentBuilder start(ComponentBuilder original){  return new ComponentBuilder(original);}  }
class C{  public void persist(){  isNew=false;}  }
class C{  public void abort(){  txnService.rollbackTransactionIfOpen(session);}  }
class C{  public InvalidNameException(){  super();}  }
class C{  @Override public String toString(){  char[] chars=new char[18];  long v=value;  chars[0]='0';  chars[1]='x';  for (int x=17; x > 1; x--) {    long thisValue=v & 0x0FL;    if (thisValue > 9) {      chars[x]=(char)('A' + thisValue - 10);    } else {      chars[x]=(char)('0' + thisValue);    }    v>>>=4;  }  return new String(chars);}  }
class C{  public void startSettingActivity(Context context,Bundle extras){  if (!startDelegateActivity(context,delegate.getSettingsIntent(),extras)) {    startActivity(context,extras,MyProfileActivity.class);  }}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  public double averageShortfall(final double target){  final Ops.DoubleOp minus=new Bind1st(target,new Minus());  final Ops.DoublePredicate less=new Bind1stPredicate(target,new LessThanPredicate());  final Pair<Double,Integer> result=expectationValue(minus,less);  final double x=result.first();  final Integer N=result.second();  QL.ensure(N != 0,NO_DATA_BELOW_THE_TARGET);  return x;}  }
class C{  static HttpStreamWrapper openReadWrite(HttpPath path) throws IOException {  HttpStream stream=createStream(path);  stream._isPost=true;  return new HttpStreamWrapper(stream);}  }
class C{  protected double alpha(FrequencyCounter<Pair<S,A>> Nsa,S s,A a){  return alpha;}  }
class C{  protected void refreshUpdateDividers(){  int i;  FolderTokenDivider div=null;  for (i=0; i < count(); i++) {    div=get(i);    if (div.isUpdate())     div.clearEditInfo();  }}  }
class C{  @Bean public static DataSource herdDataSource(){  Environment environment=ApplicationContextHolder.getApplicationContext().getEnvironment();  String dataSourceJndiName=ConfigurationHelper.getProperty(ConfigurationValue.HERD_DATA_SOURCE_JNDI_NAME,environment);  return new JndiDataSourceLookup().getDataSource(dataSourceJndiName);}  }
class C{  public DefaultPolarItemRenderer(){  this.seriesFilled=new BooleanList();  this.drawOutlineWhenFilled=true;  this.fillComposite=AlphaComposite.getInstance(AlphaComposite.SRC_OVER,0.3f);  this.useFillPaint=false;  this.legendLine=new Line2D.Double(-7.0,0.0,7.0,0.0);  this.shapesVisible=true;  this.connectFirstAndLastPoint=true;  this.toolTipGeneratorList=new ObjectList();  this.urlGenerator=null;  this.legendItemToolTipGenerator=null;  this.legendItemURLGenerator=null;}  }
class C{  public static String toJavaName(String classname){  return Descriptor.toJavaName(classname);}  }
class C{  public static WebSiteProperties from(GenericValue webSiteValue){  Assert.notNull("webSiteValue",webSiteValue);  if (!"WebSite".equals(webSiteValue.getEntityName())) {    throw new IllegalArgumentException("webSiteValue is not a WebSite entity value");  }  WebSiteProperties defaults=new WebSiteProperties();  String httpPort=(webSiteValue.get("httpPort") != null) ? webSiteValue.getString("httpPort") : defaults.getHttpPort();  String httpHost=(webSiteValue.get("httpHost") != null) ? webSiteValue.getString("httpHost") : defaults.getHttpHost();  String httpsPort=(webSiteValue.get("httpsPort") != null) ? webSiteValue.getString("httpsPort") : defaults.getHttpsPort();  String httpsHost=(webSiteValue.get("httpsHost") != null) ? webSiteValue.getString("httpsHost") : defaults.getHttpsHost();  boolean enableHttps=(webSiteValue.get("enableHttps") != null) ? webSiteValue.getBoolean("enableHttps") : defaults.getEnableHttps();  if (Start.getInstance().getConfig().portOffset != 0) {    Integer httpPortValue=Integer.valueOf(httpPort);    httpPortValue+=Start.getInstance().getConfig().portOffset;    httpPort=httpPortValue.toString();    Integer httpsPortValue=Integer.valueOf(httpsPort);    httpsPortValue+=Start.getInstance().getConfig().portOffset;    httpsPort=httpsPortValue.toString();  }  return new WebSiteProperties(httpPort,httpHost,httpsPort,httpsHost,enableHttps);}  }
class C{  private void parseId3Header(){  id3Output.sampleData(id3HeaderBuffer,ID3_HEADER_SIZE);  id3HeaderBuffer.setPosition(ID3_SIZE_OFFSET);  setReadingSampleState(id3Output,0,ID3_HEADER_SIZE,id3HeaderBuffer.readSynchSafeInt() + ID3_HEADER_SIZE);}  }
class C{  public AsyncResult ModifyMonitoredItemsAsync(ModifyMonitoredItemsRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  protected void acceptFrom(SocketImpl s,InetSocketAddress saddr) throws IOException {  if (cmdsock == null) {    return;  }  InputStream in=cmdIn;  socksBind(saddr);  in.read();  int i=in.read();  in.read();  SocketException ex=null;  int nport;  byte[] addr;  InetSocketAddress real_end=null;switch (i) {case REQUEST_OK:    i=in.read();switch (i) {case IPV4:    addr=new byte[4];  readSocksReply(in,addr);nport=in.read() << 8;nport+=in.read();real_end=new InetSocketAddress(new Inet4Address("",addr),nport);break;case DOMAIN_NAME:int len=in.read();addr=new byte[len];readSocksReply(in,addr);nport=in.read() << 8;nport+=in.read();real_end=new InetSocketAddress(new String(addr),nport);break;case IPV6:addr=new byte[16];readSocksReply(in,addr);nport=in.read() << 8;nport+=in.read();real_end=new InetSocketAddress(new Inet6Address("",addr),nport);break;}break;case GENERAL_FAILURE:ex=new SocketException("SOCKS server general failure");break;case NOT_ALLOWED:ex=new SocketException("SOCKS: Accept not allowed by ruleset");break;case NET_UNREACHABLE:ex=new SocketException("SOCKS: Network unreachable");break;case HOST_UNREACHABLE:ex=new SocketException("SOCKS: Host unreachable");break;case CONN_REFUSED:ex=new SocketException("SOCKS: Connection refused");break;case TTL_EXPIRED:ex=new SocketException("SOCKS: TTL expired");break;case CMD_NOT_SUPPORTED:ex=new SocketException("SOCKS: Command not supported");break;case ADDR_TYPE_NOT_SUP:ex=new SocketException("SOCKS: address type not supported");break;}if (ex != null) {cmdIn.close();cmdOut.close();cmdsock.close();cmdsock=null;throw ex;}if (s instanceof SocksSocketImpl) {((SocksSocketImpl)s).external_address=real_end;}if (s instanceof PlainSocketImpl) {PlainSocketImpl psi=(PlainSocketImpl)s;psi.setInputStream((SocketInputStream)in);psi.setFileDescriptor(cmdsock.getImpl().getFileDescriptor());psi.setAddress(cmdsock.getImpl().getInetAddress());psi.setPort(cmdsock.getImpl().getPort());psi.setLocalPort(cmdsock.getImpl().getLocalPort());} else {s.fd=cmdsock.getImpl().fd;s.address=cmdsock.getImpl().address;s.port=cmdsock.getImpl().port;s.localport=cmdsock.getImpl().localport;}cmdsock=null;}  }
class C{  public TwitLongerResponse readPost(final String id) throws TwitLongerException {  try {    final HttpClient httpclient=new DefaultHttpClient();    final HttpGet httpget=new HttpGet(TWITLONGER_API_READ + id);    final HttpResponse response=httpclient.execute(httpget);    return parseTwitLongerResponse(response.getEntity().getContent());  } catch (  final IOException e) {    throw new TwitLongerException(e);  }}  }
class C{  public float RM2Refresh(String mac){  JsonObject out=broadlinkExecuteCommand(BroadlinkConstants.CMD_RM2_REFRESH_ID,BroadlinkConstants.CMD_RM2_REFRESH,mac);  int code=out.get(BroadlinkConstants.CODE).getAsInt();  if (code != 0)   return BroadlinkConstants.INVALID_TEMPERATURE;  return out.get(BroadlinkConstants.TEMPERATURE).getAsFloat();}  }
class C{  public static void closeQuietly(Connection conn){  try {    close(conn);  } catch (  SQLException e) {  }}  }
class C{  public boolean isReverse(){  return true;}  }
class C{  @SuppressWarnings("unchecked") private <T>T outputValue(String outputName){  Data data=getData(outputName);  if (data instanceof BooleanObject) {    return (T)new Boolean(((BooleanObject)data).getBooleanValue());  } else   if (data instanceof DoubleObject) {    return (T)new Double(((DoubleObject)data).getDoubleValue());  } else   if (data instanceof IntObject) {    return (T)new Long(((IntObject)data).getLongValue());  } else   if (data instanceof StringObject) {    return (T)((StringObject)data).getStringValue();  } else   if (data instanceof MatrixObject) {    return (T)getMatrix(outputName);  } else   if (data instanceof FrameObject) {    return (T)getFrame(outputName);  }  return (T)data;}  }
class C{  public Client(String ServerName){  this.setServerName(ServerName);  setEnumFilter(certFilters.ACTIVE_CERTIFICATES);}  }
class C{  public static CourseUnitVideoFragment newInstance(VideoBlockModel unit,boolean hasNextUnit,boolean hasPreviousUnit){  CourseUnitVideoFragment f=new CourseUnitVideoFragment();  Bundle args=new Bundle();  args.putSerializable(Router.EXTRA_COURSE_UNIT,unit);  args.putBoolean(HAS_NEXT_UNIT_ID,hasNextUnit);  args.putBoolean(HAS_PREV_UNIT_ID,hasPreviousUnit);  f.setArguments(args);  return f;}  }
class C{  public static EvenPortAttribute createEvenPortAttribute(boolean rFlag){  EvenPortAttribute attribute=new EvenPortAttribute();  attribute.setRFlag(rFlag);  return attribute;}  }
class C{  @SuppressWarnings("unchecked") TypeLiteral(Type type){  this.type=canonicalize(checkNotNull(type,"type"));  this.rawType=(Class<? super T>)MoreTypes.getRawType(this.type);  this.hashCode=MoreTypes.hashCode(this.type);}  }
class C{  public static void updateConnectedVirtualArrays(Network network,List<StoragePort> storagePorts,boolean isAdd,DbClient dbClient){  _log.info("Updating connected virtual arrays for network {}",network.getLabel());  if (isAdd) {    _log.info("Storage ports were added to network or have virtual arrays added.");    Set<String> varraysToAdd=new HashSet<String>();    StringSet networksConnectedVArrays=network.getConnectedVirtualArrays();    _log.info("Current connected virtual arrays are {} ",networksConnectedVArrays);    for (    StoragePort storagePort : storagePorts) {      _log.debug("Processing virtual arrays for storage port {}",storagePort.getNativeGuid());      StringSet storagePortTaggedVArrays=storagePort.getTaggedVirtualArrays();      if ((storagePortTaggedVArrays != null) && (!storagePortTaggedVArrays.isEmpty())) {        for (        String storagePortTaggedVArray : storagePortTaggedVArrays) {          _log.debug("Storage port assigned to virtual array {}",storagePortTaggedVArray);          if ((networksConnectedVArrays == null) || (!networksConnectedVArrays.contains(storagePortTaggedVArray))) {            varraysToAdd.add(storagePortTaggedVArray);          }        }      }    }    if (!varraysToAdd.isEmpty()) {      addNetworkConnectedVarrays(network,varraysToAdd,true,dbClient);    }  } else {    _log.info("Storage ports {} removed from network or have had virtual arrays removed");    setNetworkConnectedVirtualArrays(network,true,dbClient);  }}  }
class C{  void dismissSubWindow(){  if (mSubView != null) {    mWebViewController.endActionMode();    mSubView.destroy();    mSubView=null;    mSubViewContainer=null;  }}  }
class C{  @Override public View newView(Context context,Cursor cursor,ViewGroup parent){  return mInflater.inflate(mLayout,parent,false);}  }
class C{  public static char[] convertBytes2Uint8s(byte[] bytes){  int len=bytes.length;  char[] uint8s=new char[len];  for (int i=0; i < len; i++) {    uint8s[i]=convertByte2Uint8(bytes[i]);  }  return uint8s;}  }
class C{  @Override public Void visitSynchronized(SynchronizedTree node,Void p){  checkForNullability(node.getExpression(),LOCKING_NULLABLE);  return super.visitSynchronized(node,p);}  }
class C{  public FactoryDto saveFactory(final FactoryDto factory) throws ServerException {  final String url=fromUri(baseUrl).path(FactoryService.class).build().toString();  FactoryDto newFactory;  HttpJsonRequest httpJsonRequest=httpJsonRequestFactory.fromUrl(url).usePostMethod().setBody(factory);  try {    HttpJsonResponse response=httpJsonRequest.request();    newFactory=response.asDto(FactoryDto.class);  } catch (  IOException|ApiException e) {    LOG.error(e.getLocalizedMessage(),e);    throw new ServerException(e.getLocalizedMessage());  }  return newFactory;}  }
class C{  public final void testIsPolicyMappingInhibited() throws Exception {  Set<TrustAnchor> taSet=TestUtils.getTrustAnchorSet();  if (taSet == null) {    fail(getName() + ": not performed (could not create test TrustAnchor set)");  }  PKIXParameters p=new PKIXParameters(taSet);  assertFalse(p.isPolicyMappingInhibited());  CertificateFactory cf=CertificateFactory.getInstance("X.509");  TestUtils.initCertPathSSCertChain();  Set<TrustAnchor> taSet2=Collections.singleton(new TrustAnchor(TestUtils.rootCertificateSS,null));  p=new PKIXParameters(taSet2);  assertFalse(p.isPolicyMappingInhibited());  p.setPolicyMappingInhibited(true);  assertTrue(p.isRevocationEnabled());}  }
class C{  public EmtpyRegionFunctionException(String msg){  super(msg);}  }
class C{  public void actionPerformed(ActionEvent e){  if (fileChooser == null) {    String start_dir=VSDecoderManager.instance().getVSDecoderPreferences().getDefaultVSDFilePath();    if (last_path != null) {      start_dir=last_path;    }    log.debug("Using path: " + start_dir);    fileChooser=new JFileChooser(start_dir);    jmri.util.FileChooserFilter filt=new jmri.util.FileChooserFilter(Bundle.getMessage("LoadVSDFileChooserFilterLabel"));    filt.addExtension("vsd");    filt.addExtension("zip");    fileChooser.setFileFilter(filt);    fileChooser.setDialogType(JFileChooser.OPEN_DIALOG);    fileChooser.setCurrentDirectory(new File(start_dir));  }  int retVal=fileChooser.showOpenDialog(null);  if (retVal != JFileChooser.APPROVE_OPTION) {    return;  }  loadVSDFile(fileChooser.getSelectedFile());  try {    last_path=fileChooser.getCurrentDirectory().getCanonicalPath();  } catch (  java.io.IOException err) {    log.debug("Error getting current directory: " + err);    last_path=VSDecoderManager.instance().getVSDecoderPreferences().getDefaultVSDFilePath();  }}  }
class C{  public String outputFilenameTipText(){  return "Whether to store the filename in an additional attribute.";}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node otherChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  textNode=(Text)titleAttr.getFirstChild();  assertNotNull("textNodeNotNull",textNode);  value=textNode.getNodeValue();  assertEquals("child1IsYes","Yes",value);  otherChild=textNode.getNextSibling();  assertNull("nextSiblingIsNull",otherChild);  otherChild=textNode.getPreviousSibling();  assertNull("previousSiblingIsNull",otherChild);}  }
class C{  public static cuComplex cuCadd(cuComplex x,cuComplex y){  return cuCmplx(cuCreal(x) + cuCreal(y),cuCimag(x) + cuCimag(y));}  }
class C{  private static boolean isNewMatch(IDocument document,int offset,int length,String partitioning){  Assert.isTrue(length >= 0);  Assert.isTrue(offset >= 0);  Assert.isTrue(offset + length < document.getLength() + 1);  try {    String text=document.get(offset,length);    int pos=text.indexOf("new");    while (pos != -1 && !isDefaultPartition(document,pos + offset,partitioning))     pos=text.indexOf("new",pos + 2);    if (pos < 0)     return false;    if (pos != 0 && Character.isJavaIdentifierPart(text.charAt(pos - 1)))     return false;    if (pos + 3 < length && Character.isJavaIdentifierPart(text.charAt(pos + 3)))     return false;    return true;  } catch (  BadLocationException e) {  }  return false;}  }
class C{  public void update(){  Set<String> parameterIds=new HashSet<String>(frame.getSystem().getState().getParameterIds());  Set<String> otherVarsIds=new HashSet<String>(frame.getSystem().getState().getChanceNodeIds());  otherVarsIds.removeAll(parameterIds);  exportState.setEnabled(!otherVarsIds.isEmpty());  exportParams.setEnabled(!parameterIds.isEmpty());  stateDisplayMenu.setEnabled(!parameterIds.isEmpty());  inputMenu.setEnabled(frame.isSpeechEnabled());  for (  Component c : inputMenu.getComponents()) {    if (c instanceof JRadioButtonMenuItem && ((JRadioButtonMenuItem)c).getText().startsWith(frame.getSystem().getSettings().inputMixer.getName())) {      ((JRadioButtonMenuItem)c).setSelected(true);    }  }  for (  Component c : outputMenu.getComponents()) {    if (c instanceof JRadioButtonMenuItem && ((JRadioButtonMenuItem)c).getText().startsWith(frame.getSystem().getSettings().outputMixer.getName())) {      ((JRadioButtonMenuItem)c).setSelected(true);    }  }  systemRole.setEnabled(!frame.getSystem().getSettings().remoteConnections.isEmpty());  boolean realDomain=!frame.getSystem().getDomain().isEmpty();  saveDomainAs.setEnabled(realDomain);  boolean isChanged=frame.tabbedPane.getTitleAt(2).contains("*");  saveDomain.setEnabled(realDomain && isChanged);  resetItem.setEnabled(realDomain);  freezeItem.setEnabled(realDomain);}  }
class C{  private static byte[] generateSeed(){  try {    ByteArrayOutputStream seedBuffer=new ByteArrayOutputStream();    DataOutputStream seedBufferOut=new DataOutputStream(seedBuffer);    seedBufferOut.writeLong(System.currentTimeMillis());    seedBufferOut.writeLong(System.nanoTime());    seedBufferOut.writeInt(Process.myPid());    seedBufferOut.writeInt(Process.myUid());    seedBufferOut.write(BUILD_FINGERPRINT_AND_DEVICE_SERIAL);    seedBufferOut.close();    return seedBuffer.toByteArray();  } catch (  IOException e) {    throw new SecurityException("Failed to generate seed",e);  }}  }
class C{  public synchronized void contextInitialized(ServletContextEvent sce){  servletContext=sce.getServletContext();  servletContext.setAttribute((COUNT_KEY),Integer.toString(counter));}  }
class C{  public int read(ByteBuf dst,int dstStart,int dstLength) throws IOException {  final int remaining=(int)Math.min(this.length - this.position,Integer.MAX_VALUE);  final int read=Math.min(remaining,dstLength);  final int bufferPosition=checkOffset(position,read);  final long srcAddress=PlatformDependent.directBufferAddress(lastMapped) + bufferPosition;  if (dst.hasMemoryAddress()) {    final long dstAddress=dst.memoryAddress() + dstStart;    PlatformDependent.copyMemory(srcAddress,dstAddress,read);  } else   if (dst.hasArray()) {    final byte[] dstArray=dst.array();    PlatformDependent.copyMemory(srcAddress,dstArray,dstStart,read);  } else {    throw new IllegalArgumentException("unsupported byte buffer");  }  position+=read;  return read;}  }
class C{  MemberMoveResult moveMembers(final TreeSet<TypeMember> moveMembers,final int moveDelta){  Preconditions.checkArgument(moveMembers.first().getBitOffset().get() + moveDelta >= 0,"Cannot move members to negative offset.");  Preconditions.checkArgument(moveMembers.last().getBitOffset().get() + moveDelta <= members.last().getBitOffset().get() + members.last().getBitSize(),"Cannot move members behind last member.");  Preconditions.checkArgument(areMembersConsecutive(moveMembers),"Cannot move members that are not consecutive to each other.");  final TypeMember firstMember=moveMembers.first();  final TypeMember lastMember=moveMembers.last();  final boolean moveTowardsBeginning=moveDelta < 0;  final int startOffset=moveTowardsBeginning ? firstMember.getBitOffset().get() + moveDelta : members.higher(lastMember).getBitOffset().get();  final int endOffset=moveTowardsBeginning ? firstMember.getBitOffset().get() : members.higher(lastMember).getBitOffset().get() + moveDelta;  final List<TypeMember> implicitlyMoved=getMembers(startOffset,endOffset,members);  final int implicitMoveDelta=moveTowardsBeginning ? determineOccupiedSize(moveMembers) : -determineOccupiedSize(moveMembers);  members.removeAll(moveMembers);  members.removeAll(implicitlyMoved);  for (  final TypeMember member : implicitlyMoved) {    member.setOffset(Optional.<Integer>of(member.getBitOffset().get() + implicitMoveDelta));  }  for (  final TypeMember member : moveMembers) {    member.setOffset(Optional.<Integer>of(member.getBitOffset().get() + moveDelta));  }  members.addAll(moveMembers);  members.addAll(implicitlyMoved);  return new MemberMoveResult(implicitlyMoved,implicitMoveDelta);}  }
class C{  public static LinkedHashMap<Pattern,String> parseRulesFile(InputStream is){  LinkedHashMap<Pattern,String> rules=new LinkedHashMap<>();  BufferedReader br=new BufferedReader(IOUtils.getDecodingReader(is,StandardCharsets.UTF_8));  String line;  try {    int linenum=0;    while ((line=br.readLine()) != null) {      linenum++;      String[] arr=line.split("#");      if (arr.length > 0)       line=arr[0].trim();      if (line.length() == 0)       continue;      int sep=line.indexOf("=");      if (sep <= 0) {        log.warn("Wrong format of password line " + linenum);        continue;      }      String pass=line.substring(sep + 1).trim();      String regex=line.substring(0,sep).trim();      try {        Pattern pattern=Pattern.compile(regex);        rules.put(pattern,pass);      } catch (      PatternSyntaxException pse) {        log.warn("Key of line " + linenum + " was not a valid regex pattern",pse);        continue;      }    }    is.close();  } catch (  IOException e) {    throw new RuntimeException();  }  return rules;}  }
class C{  @PostMapping("/users/{id}/change-password") public void changePassword(@PathVariable("id") U user,@RequestBody ChangePasswordForm changePasswordForm){  log.debug("Changing password ... ");  lemonService.changePassword(user,changePasswordForm);}  }
class C{  public static void demo7(){  double[][] values={{5,10,20,40},{7,8,6,7},{12,10,20,19},{3,1,5,6}};  String[] columnNames={"1996","1997","1998","1999"};  String[] rowNames={"PowerBar","Benzol","Mercedes","Sparcling"};  String rowAxisName="CPU";  String columnAxisName="Year";  String title="CPU performance over time [nops/sec]";  System.out.println("FIXME:  Should this test exist without hep.aida");  String format="%1.2G";  System.out.println("FIXME:  Should this test exist without hep.aida");}  }
class C{  public synchronized Vertex findById(Number id){  if (id == null) {    return null;  }  Vertex vertex=(Vertex)getVerticiesById().get(id);  if ((vertex == null) && (getParent() != null)) {    Vertex originalVertex=getParent().findById(id);    if (originalVertex != null) {      vertex=new BasicVertex(originalVertex);      addVertex(vertex);    }  }  return vertex;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.353 -0500",hash_original_method="8893A9BFD4970E039D8D32407D02C15E",hash_generated_method="8893A9BFD4970E039D8D32407D02C15E") boolean fullScroll(int direction){  boolean moved=false;  if (direction == FOCUS_UP) {    if (mSelectedPosition != 0) {      int position=lookForSelectablePosition(0,true);      if (position >= 0) {        mLayoutMode=LAYOUT_FORCE_TOP;        setSelectionInt(position);        invokeOnItemScrollListener();      }      moved=true;    }  } else   if (direction == FOCUS_DOWN) {    if (mSelectedPosition < mItemCount - 1) {      int position=lookForSelectablePosition(mItemCount - 1,true);      if (position >= 0) {        mLayoutMode=LAYOUT_FORCE_BOTTOM;        setSelectionInt(position);        invokeOnItemScrollListener();      }      moved=true;    }  }  if (moved && !awakenScrollBars()) {    awakenScrollBars();    invalidate();  }  return moved;}  }
class C{  void addToEmebeddedCSS(CSSElement cssElement){  if (embeddedCSS == null) {    embeddedCSS=new Vector();  }  embeddedCSS.addElement(cssElement);}  }
class C{  public String[] valueArray(String[] array){  if (array == null || array.length != size()) {    array=new String[count];  }  System.arraycopy(values,0,array,0,count);  return array;}  }
class C{  @SuppressWarnings({"unchecked"}) public void addValidators(FacesContext ctx,EditableValueHolder editableValueHolder){  if ((validatorStack == null) || validatorStack.isEmpty()) {    addDefaultValidatorsToComponent(ctx,editableValueHolder);    return;  }  Application application=ctx.getApplication();  Map<String,String> defaultValidatorInfo=application.getDefaultValidatorInfo();  Set<String> keySet=defaultValidatorInfo.keySet();  List<String> validatorIds=new ArrayList<>(keySet.size());  for (  String key : keySet) {    validatorIds.add(key);  }  Set<String> disabledIds=(Set<String>)RequestStateManager.remove(ctx,RequestStateManager.DISABLED_VALIDATORS);  int count=validatorStack.size();  for (int i=count - 1; i >= 0; i--) {    ValidatorInfo info=validatorStack.get(i);    if (!info.isEnabled() || (disabledIds != null && disabledIds.contains(info.getValidatorId()))) {      if (validatorIds.contains(info.getValidatorId())) {        validatorIds.remove(info.getValidatorId());      }    } else {      if (!validatorIds.contains(info.getValidatorId())) {        validatorIds.add(info.getValidatorId());      }    }  }  addValidatorsToComponent(ctx,validatorIds,editableValueHolder,((validatorStack == null || validatorStack.isEmpty()) ? null : validatorStack));}  }
class C{  public static double bufferDistanceError(int quadSegs){  double alpha=Math.PI / 2.0 / quadSegs;  return 1 - Math.cos(alpha / 2.0);}  }
class C{  public CreateMonitoredItemsResponse CreateMonitoredItems(CreateMonitoredItemsRequest req) throws ServiceFaultException, ServiceResultException {  return (CreateMonitoredItemsResponse)channel.serviceRequest(req);}  }
class C{  @Override public void onLogin(String uid){  _isLogin.set(true);}  }
class C{  public SimpleEnumMap(Map<? extends K,? extends V> m,float f){  super(m,f,(Strategy)SimpleEnumHashingStrategy.INSTANCE);}  }
class C{  protected void displayPage(){  if (pagenum > pageImages.size()) {    pagenum=pageImages.size();  }  if (pagenum < 1) {    pagenum=1;  }  previousButton.setEnabled(true);  nextButton.setEnabled(true);  if (pagenum == pageImages.size()) {    nextButton.setEnabled(false);  }  if (pagenum == 1) {    previousButton.setEnabled(false);  }  previewImage=pageImages.elementAt(pagenum - 1);  previewFrame.setVisible(false);  previewIcon.setImage(previewImage);  previewLabel.setIcon(previewIcon);  previewPanel.add(previewLabel);  pageCount.setText("" + pagenum);  totalPages.setText("" + pageImages.size() + "     ");  previewFrame.invalidate();  previewFrame.revalidate();  previewFrame.setVisible(true);}  }
class C{  public boolean canDockSouth(){  return canDockSouth;}  }
class C{  public boolean isExiting(){  return mFocusState == FocusState.STATE_FADE_OUT || mFocusState == FocusState.STATE_HARD_STOP;}  }
class C{  public boolean showErrorInRelease(IdeaLoggingEvent event){  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static String encodeString(String s){  return new String(encode(s.getBytes()));}  }
class C{  public boolean externalMemoryAvailable(){  return android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED);}  }
class C{  public void dynInit() throws Exception {  MLookup orgL=MLookupFactory.get(Env.getCtx(),form.getWindowNo(),0,2163,DisplayType.TableDir);  fOrg=new WTableDirEditor("AD_Org_ID",false,false,true,orgL);  fOrg.addValueChangeListener(this);  MLookup bpL=MLookupFactory.get(Env.getCtx(),form.getWindowNo(),0,2762,DisplayType.Search);  fBPartner=new WSearchEditor("C_BPartner_ID",false,false,true,bpL);  fBPartner.addValueChangeListener(this);  lDocAction.setText(Msg.translate(Env.getCtx(),"DocAction"));  MLookup docActionL=MLookupFactory.get(Env.getCtx(),form.getWindowNo(),3495,DisplayType.List,Env.getLanguage(Env.getCtx()),"DocAction",135,false,"AD_Ref_List.Value IN ('CO','PR')");  docAction=new WTableDirEditor("DocAction",true,false,true,docActionL);  docAction.setValue(DocAction.ACTION_Complete);  docAction.addValueChangeListener(this);  lDocType.setText(Msg.translate(Env.getCtx(),"C_DocType_ID"));  cmbDocType.addItem(new KeyNamePair(MOrder.Table_ID,Msg.translate(Env.getCtx(),"Order")));  cmbDocType.addItem(new KeyNamePair(MRMA.Table_ID,Msg.translate(Env.getCtx(),"CustomerRMA")));  cmbDocType.addActionListener(this);  cmbDocType.setSelectedIndex(0);  form.getStatusBar().setStatusLine(Msg.getMsg(Env.getCtx(),"InvGenerateSel"));}  }
class C{  public static int sizeOf(int value){  if (value < 253)   return 1; else   if (value < 65536)   return 3;  return 5;}  }
class C{  public void textFont(PFont which,float size){  if (which == null) {    throw new RuntimeException(ERROR_TEXTFONT_NULL_PFONT);  }  if (size <= 0) {    System.err.println("textFont: ignoring size " + size + " px:"+ "the text size must be larger than zero");    size=textSize;  }  textFontImpl(which,size);}  }
class C{  public void visitInnerClassType(String name){}  }
class C{  @Override void encode(final byte[] in,int inPos,final int inAvail,final Context context){  if (context.eof) {    return;  }  if (inAvail < 0) {    context.eof=true;    if (0 == context.modulus && lineLength == 0) {      return;    }    final byte[] buffer=ensureBufferSize(encodeSize,context);    final int savedPos=context.pos;switch (context.modulus) {case 0:      break;case 1:    buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 2) & MASK_6BITS];  buffer[context.pos++]=encodeTable[(context.ibitWorkArea << 4) & MASK_6BITS];if (encodeTable == STANDARD_ENCODE_TABLE) {  buffer[context.pos++]=pad;  buffer[context.pos++]=pad;}break;case 2:buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 10) & MASK_6BITS];buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 4) & MASK_6BITS];buffer[context.pos++]=encodeTable[(context.ibitWorkArea << 2) & MASK_6BITS];if (encodeTable == STANDARD_ENCODE_TABLE) {buffer[context.pos++]=pad;}break;default :throw new IllegalStateException("Impossible modulus " + context.modulus);}context.currentLinePos+=context.pos - savedPos;if (lineLength > 0 && context.currentLinePos > 0) {System.arraycopy(lineSeparator,0,buffer,context.pos,lineSeparator.length);context.pos+=lineSeparator.length;}} else {for (int i=0; i < inAvail; i++) {final byte[] buffer=ensureBufferSize(encodeSize,context);context.modulus=(context.modulus + 1) % BYTES_PER_UNENCODED_BLOCK;int b=in[inPos++];if (b < 0) {b+=256;}context.ibitWorkArea=(context.ibitWorkArea << 8) + b;if (0 == context.modulus) {buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 18) & MASK_6BITS];buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 12) & MASK_6BITS];buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 6) & MASK_6BITS];buffer[context.pos++]=encodeTable[context.ibitWorkArea & MASK_6BITS];context.currentLinePos+=BYTES_PER_ENCODED_BLOCK;if (lineLength > 0 && lineLength <= context.currentLinePos) {System.arraycopy(lineSeparator,0,buffer,context.pos,lineSeparator.length);context.pos+=lineSeparator.length;context.currentLinePos=0;}}}}}  }
class C{  public void constValueIndex(long value) throws IOException {  constValueIndex('J',pool.addLongInfo(value));}  }
class C{  public Rect calcInnerRect(int l,int t,int r,int b){  Rect rect=new Rect(l,t,r,b);  rect.left+=innerPad;  rect.top+=innerPad;  rect.right-=innerPad;  rect.bottom-=triYSize + innerPad;  return rect;}  }
class C{  protected UndoableRichTextChange createCurrent(){  if (fDocumentUndoManager.fFoldingIntoCompoundChange)   return new UndoableCompoundRichTextChange(fDocumentUndoManager);  return new UndoableRichTextChange(fDocumentUndoManager);}  }
class C{  public static long pop_intersect(long[] arr1,long[] arr2,int wordOffset,int numWords){  long popCount=0;  for (int i=wordOffset, end=wordOffset + numWords; i < end; ++i) {    popCount+=Long.bitCount(arr1[i] & arr2[i]);  }  return popCount;}  }
class C{  private synchronized void addChildNode(DefaultMutableTreeNode parent,DefaultMutableTreeNode child){  int childCount=parent.getChildCount();  if (childCount == 0) {    addChildNode(parent,child,0);    return;  }  if (child instanceof ComparableDefaultMutableTreeNode) {    ComparableDefaultMutableTreeNode comparableChild=(ComparableDefaultMutableTreeNode)child;    for (int i=childCount - 1; i >= 0; i--) {      DefaultMutableTreeNode brother=(DefaultMutableTreeNode)parent.getChildAt(i);      if ((i <= 2 && isMetadataNode(brother)) || comparableChild.compareTo(brother) >= 0) {        addChildNode(parent,child,i + 1);        return;      }    }    addChildNode(parent,child,0);    return;  }  addChildNode(parent,child,childCount);}  }
class C{  public void addUser(String user,String password,Reader reader) throws Exception {  final ProtocolSessionBuilder builder=new ProtocolSessionBuilder();  builder.setVariable(USER_VARIABLE_NAME,user);  builder.setVariable(PASSWORD_VARIABLE_NAME,password);  final Runner runner=new Runner();  builder.addProtocolLines(SCRIPT_NAME,reader,runner.getTestElements());  final ExternalSessionFactory factory=new ExternalSessionFactory(host,port,monitor,null);  runner.runSessions(factory);}  }
class C{  void init(Key key,AlgorithmParameterSpec params) throws InvalidKeyException, InvalidAlgorithmParameterException {  if (params != null) {    throw new InvalidAlgorithmParameterException("SslMac does not use parameters");  }  if (!(key instanceof SecretKey)) {    throw new InvalidKeyException("Secret key expected");  }  secret=key.getEncoded();  if (secret == null || secret.length == 0) {    throw new InvalidKeyException("Missing key data");  }  reset();}  }
class C{  public DTMIterator asNodeIterator(){  throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_RTF_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER,null));}  }
class C{  public void ensureCapacity(int minCapacity){  objects.ensureCapacity(minCapacity);}  }
class C{  public LongAdder(){}  }
class C{  protected void tearDown() throws Exception {  stunStack.removeSocket(clientAddress);  stunStack.removeSocket(serverAddress);  stunStack.removeSocket(serverAddress2);  clientSock.close();  serverSock.close();  serverSock2.close();  requestCollector=null;  responseCollector=null;  super.tearDown();}  }
class C{  private Object writeReplace(){  return new SerializationProxy(this);}  }
class C{  public synchronized void discardAllEdits(){  for (  UndoableEdit e : edits) {    e.die();  }  edits=new Vector<UndoableEdit>();  indexOfNextAdd=0;}  }
class C{  protected void sequence_TEnum(ISerializationContext context,TEnum semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static void flushTo(Set<InternalDistributedMember> targets,DistributedRegion region){  DM dm=region.getDistributionManager();  DistributedRegion r=region;  boolean initialized=r.isInitialized();  if (initialized) {    r.getDistributionAdvisor().forceNewMembershipVersion();    try {      r.getDistributionAdvisor().waitForCurrentOperations();    } catch (    RegionDestroyedException e) {      return;    }  }  Set<ReplyProcessor21> processors=new HashSet<ReplyProcessor21>();  for (  InternalDistributedMember target : targets) {    StateStabilizationMessage gr=new StateStabilizationMessage();    gr.isSingleFlushTo=true;    gr.requestingMember=dm.getDistributionManagerId();    gr.setRecipient(target);    ReplyProcessor21 processor=new ReplyProcessor21(dm,target);    gr.processorId=processor.getProcessorId();    gr.channelState=dm.getMembershipManager().getMessageState(target,false);    if (logger.isTraceEnabled(LogMarker.STATE_FLUSH_OP) && ((gr.channelState != null) && (gr.channelState.size() > 0))) {      logger.trace(LogMarker.STATE_FLUSH_OP,"channel states: {}",gr.channelStateDescription(gr.channelState));    }    if (logger.isTraceEnabled(LogMarker.STATE_FLUSH_OP)) {      logger.trace(LogMarker.STATE_FLUSH_OP,"Sending {}",gr);    }    dm.putOutgoing(gr);    processors.add(processor);  }  if (r.getRegionMap().getARMLockTestHook() != null) {    r.getRegionMap().getARMLockTestHook().beforeStateFlushWait();  }  for (  ReplyProcessor21 processor : processors) {    try {      processor.waitForReplies();    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();      return;    }  }}  }
class C{  private int peekChar(int offset){  if (offset < fDocument.getLength()) {    try {      Region line=fDocument.getLineInformationOfOffset(offset);      int lineOffset=line.getOffset();      int next=fScanner.nextToken(offset,lineOffset + line.getLength());      return next;    } catch (    BadLocationException e) {    }  }  return Symbols.TokenEOF;}  }
class C{  @Override public final void addBonusMaxHealth(float healthToAdd){  setBonusMaxHealth(getBonusMaxHealth() + healthToAdd);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:12.373 -0500",hash_original_method="4331049DB20FE3D320265414E1BB6DD1",hash_generated_method="4331049DB20FE3D320265414E1BB6DD1") void appendArrayGenericType(StringBuilder sb,Type[] types){  if (types.length > 0) {    appendGenericType(sb,types[0]);    for (int i=1; i < types.length; i++) {      sb.append(',');      appendGenericType(sb,types[i]);    }  }}  }
class C{  public boolean isSleepingAllowed(){  return (m_flags & e_autoSleepFlag) == e_autoSleepFlag;}  }
class C{  protected void onAction(String sender,String login,String hostname,String target,String action){}  }
class C{  public static ArrayList<String> loadFile(String fileName){  ArrayList<String> lines=new ArrayList<String>();  try {    File f=new File(fileName);    Scanner sc=new Scanner(f);    while (sc.hasNextLine()) {      lines.add(sc.nextLine());    }    sc.close();  } catch (  FileNotFoundException fnfex) {    return null;  }  return lines;}  }
class C{  public void firePropertyChange(){  java.util.Vector<PropertyChangeListener> targets;synchronized (this) {    if (listeners == null) {      return;    }    targets=unsafeClone(listeners);  }  PropertyChangeEvent evt=new PropertyChangeEvent(source,null,null,null);  for (int i=0; i < targets.size(); i++) {    PropertyChangeListener target=targets.elementAt(i);    target.propertyChange(evt);  }}  }
class C{  public int value(){  return _map._values[_index];}  }
class C{  public static Command createUpdateFileCommand(Path fileToUpdate,String textToPutIntoFile,String replacementPattern,NodeConfig node) throws IOException {  return createCommand(getUpdateFileCommand(fileToUpdate,textToPutIntoFile,replacementPattern,true),node);}  }
class C{  private void finalizeTargetPlacement(RPProtectionRecommendation recommendation,PlacementStatus placementStatus){  _log.info("RP Placement: Found a solution for all target varrays");  recommendation.setPlacementStepsCompleted(PlacementProgress.IDENTIFIED_SOLUTION_FOR_ALL_TARGETS);  if (placementStatus.isBestSolutionToDate(recommendation)) {    placementStatus.setLatestInvalidRecommendation(recommendation);  }}  }
class C{  int decryptFinal(byte[] cipher,int cipherOffset,int cipherLen,byte[] plain,int plainOffset) throws IllegalBlockSizeException {  if (cipherLen < blockSize) {    throw new IllegalBlockSizeException("input is too short!");  } else   if (cipherLen == blockSize) {    decrypt(cipher,cipherOffset,cipherLen,plain,plainOffset);  } else {    int nLeft=cipherLen % blockSize;    if (nLeft == 0) {      int lastBlkIndex=cipherOffset + cipherLen - blockSize;      int nextToLastBlkIndex=cipherOffset + cipherLen - 2 * blockSize;      byte[] tmp=new byte[2 * blockSize];      System.arraycopy(cipher,lastBlkIndex,tmp,0,blockSize);      System.arraycopy(cipher,nextToLastBlkIndex,tmp,blockSize,blockSize);      int cipherLen2=cipherLen - 2 * blockSize;      decrypt(cipher,cipherOffset,cipherLen2,plain,plainOffset);      decrypt(tmp,0,2 * blockSize,plain,plainOffset + cipherLen2);    } else {      int newCipherLen=cipherLen - (blockSize + nLeft);      if (newCipherLen > 0) {        decrypt(cipher,cipherOffset,newCipherLen,plain,plainOffset);        cipherOffset+=newCipherLen;        plainOffset+=newCipherLen;      }      byte[] tmp=new byte[blockSize];      embeddedCipher.decryptBlock(cipher,cipherOffset,tmp,0);      for (int i=0; i < nLeft; i++) {        plain[plainOffset + blockSize + i]=(byte)(cipher[cipherOffset + blockSize + i] ^ tmp[i]);      }      System.arraycopy(cipher,cipherOffset + blockSize,tmp,0,nLeft);      embeddedCipher.decryptBlock(tmp,0,plain,plainOffset);      for (int i=0; i < blockSize; i++) {        plain[plainOffset + i]=(byte)(plain[plainOffset + i] ^ r[i]);      }    }  }  return cipherLen;}  }
class C{  public int randomValueFromClosedInterval(int min,int max,MersenneTwisterFast random){  if (max - min < 0) {    int l=0;    do     l=random.nextInt(); while (l < min || l > max);    return l;  } else   return min + random.nextInt(max - min + 1);}  }
class C{  public static GeometryOperation createGeometryOperation(ClassLoader classLoader,String geomOpClassname){  Class geomOpClass=null;  try {    geomOpClass=classLoader.loadClass(geomOpClassname);  } catch (  ClassNotFoundException ex) {    System.out.println("ERROR: Class not found - " + geomOpClassname);    return null;  }  try {    GeometryOperation geometryOp=(GeometryOperation)geomOpClass.newInstance();    return geometryOp;  } catch (  Exception ex) {    System.out.println(ex.getMessage());    return null;  }}  }
class C{  private LocalDate moveDate(MovingCondition mc,LocalDate fixed){  DayOfWeek weekday=xmlUtil.getWeekday(mc.getWeekday());  return fixed.with(mc.getWith() == With.NEXT ? nextOrSame(weekday) : previousOrSame(weekday));}  }
class C{  protected final Set<CatalogFunction> parseFunctions(NodeList nodes,Map<String,TypeClass> typeClasses){  Set<CatalogFunction> entries=new HashSet<>();  for (int i=0; i < nodes.getLength(); i++) {    Node node=nodes.item(i);    NamedNodeMap attributes=node.getAttributes();    String name=attributes.getNamedItem("name").getTextContent();    String signature=attributes.getNamedItem("signature").getTextContent();    Boolean isConstructor=attributes.getNamedItem("isConstructor") != null;    Boolean isCommon=attributes.getNamedItem("isCommon") != null;    String category=node.getParentNode().getAttributes().getNamedItem("name").getTextContent();    String documentation=node.getTextContent();    TypeBuilder builder=new TypeBuilder(typeClasses);    Type tsig=builder.build(signature);    entries.add(new CatalogFunction(name,category,tsig,documentation,isConstructor,isCommon));  }  return entries;}  }
class C{  public boolean isTemporaryExempt(){  Object oo=get_Value(COLUMNNAME_IsTemporaryExempt);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private int[] blur(final int[] in,final int width,final int radius){  final int[] out=new int[width];  final int widthMinus1=width - 1;  final int r2=2 * radius + 1;  int tr=0, tg=0, tb=0;  for (int i=-radius; i <= radius; i++) {    final int rgb=in[this.mod(i,width)];    tr+=rgb >> 16 & 0xff;    tg+=rgb >> 8 & 0xff;    tb+=rgb & 0xff;  }  for (int x=0; x < width; x++) {    out[x]=0xff000000 | tr / r2 << 16 | tg / r2 << 8 | tb / r2;    int i1=x + radius + 1;    if (i1 > widthMinus1) {      i1=this.mod(i1,width);    }    int i2=x - radius;    if (i2 < 0) {      i2=this.mod(i2,width);    }    final int rgb1=in[i1];    final int rgb2=in[i2];    tr+=(rgb1 & 0xff0000) - (rgb2 & 0xff0000) >> 16;    tg+=(rgb1 & 0xff00) - (rgb2 & 0xff00) >> 8;    tb+=(rgb1 & 0xff) - (rgb2 & 0xff);  }  return out;}  }
class C{  static void putInt(long ptr,int data){  unsafe.putInt(ptr,data);}  }
class C{  private void cancelBatchThroughDatabaseState(long batchId){  batchRepository.cancelBatch(batchId);}  }
class C{  public void put(String fieldName,double v){  _put(fieldName,numberNode(v));}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  public DoubleMemberValue(int index,ConstPool cp){  super('D',cp);  this.valueIndex=index;}  }
class C{  public LabeledIntent(String sourcePackage,int labelRes,int icon){  mSourcePackage=sourcePackage;  mLabelRes=labelRes;  mNonLocalizedLabel=null;  mIcon=icon;}  }
class C{  public boolean isAllowed(String fname){  boolean res=((userFieldsMap.containsKey(fname) || isDynField(fname,false)) && !userFieldsMap.containsKey("-" + fname) && !isDynField(fname,true));  return res;}  }
class C{  public Profiler(String name){  this.name=name;}  }
class C{  static char decodeEntity(String source){  if (source.length() < 4 || source.charAt(0) != HTML_ENTITY_START || source.charAt(source.length() - 1) != HTML_ENTITY_TERMINATE) {    return HTML_ENTITY_INVALID;  }  if (source.charAt(1) == HTML_ENTITY_RAWVALUE) {    try {      if (Character.toLowerCase(source.charAt(2)) == HTML_ENTITY_RAWHEXVALUE) {        return (char)Integer.parseInt(source.substring(3,4),16);      } else {        return (char)Integer.parseInt(source.substring(2,3),10);      }    } catch (    NumberFormatException nfe) {      return HTML_ENTITY_INVALID;    }  }  source=source.toLowerCase();  for (int i=0; i < HTML_ENCODED_ENTITIES.length; i++) {    if (source.equals(HTML_ENCODED_ENTITIES[i])) {      return HTML_ENTITIES[i];    }  }  return HTML_ENTITY_INVALID;}  }
class C{  protected boolean isOffContentLeft(float p){  if (p < mContentRect.left)   return true; else   return false;}  }
class C{  public static void collectApplicationServletStats(Context context,Application app){  int svltCount=0;  int reqCount=0;  int errCount=0;  long procTime=0;  long minTime=Long.MAX_VALUE;  long maxTime=0;  for (  Container container : context.findChildren()) {    if (container instanceof StandardWrapper) {      StandardWrapper sw=(StandardWrapper)container;      svltCount++;      reqCount+=sw.getRequestCount();      errCount+=sw.getErrorCount();      procTime+=sw.getProcessingTime();      if (sw.getRequestCount() > 0) {        minTime=Math.min(minTime,sw.getMinTime());      }      maxTime=Math.max(maxTime,sw.getMaxTime());    }  }  app.setServletCount(svltCount);  app.setRequestCount(reqCount);  app.setErrorCount(errCount);  app.setProcessingTime(procTime);  app.setMinTime(minTime == Long.MAX_VALUE ? 0 : minTime);  app.setMaxTime(maxTime);}  }
class C{  @SuppressWarnings("unchecked") private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  keyUniverse=getKeyUniverse(keyType);  vals=new Object[keyUniverse.length];  int size=s.readInt();  for (int i=0; i < size; i++) {    K key=(K)s.readObject();    V value=(V)s.readObject();    put(key,value);  }}  }
class C{  private void projectChanged(){  populateWorkItemTypes();  reset();}  }
class C{  private static void createUnimplementedMethod(ClassWriter cw,String internalClassName,Method method){  String exceptionName=getInternalClassName(UnsupportedOperationException.class.getName());  String sig=Type.getMethodDescriptor(method);  String name=method.getName();  MethodVisitor mv=cw.visitMethod(ACC_PUBLIC,name,sig,null,null);  mv.visitTypeInsn(NEW,exceptionName);  mv.visitInsn(DUP);  mv.visitLdcInsn("Unimplemented method '" + name + "' (not a setter/getter, could not materialize)");  mv.visitMethodInsn(INVOKESPECIAL,exceptionName,"<init>","(Ljava/lang/String;)V");  mv.visitInsn(ATHROW);  mv.visitMaxs(0,0);  mv.visitEnd();}  }
class C{  public boolean isFieldInvalidated(ImplicitIntentFields field){  return isInvalidated[field.i()];}  }
class C{  public static void handleLinks(Document doc){  String hostname=Config.getHostname();  String[] attrNames={"src","href"};  Boolean noreferrer=play.Configuration.root().getBoolean("application.noreferrer",false);  for (  String attrName : attrNames) {    Elements tags=doc.select("*[" + attrName + "]");    for (    Element tag : tags) {      boolean isNoreferrerRequired=false;      String uriString=tag.attr(attrName);      if (noreferrer && attrName.equals("href")) {        isNoreferrerRequired=true;      }      try {        URI uri=new URI(uriString);        if (!uri.isAbsolute()) {          tag.attr(attrName,Url.create(uriString));        }        if (uri.getHost() == null || uri.getHost().equals(hostname)) {          isNoreferrerRequired=false;        }      } catch (      URISyntaxException e) {        play.Logger.info("A malformed URI is detected while" + " checking an email to send",e);      }      if (isNoreferrerRequired) {        tag.attr("rel",tag.attr("rel") + " noreferrer");      }    }  }}  }
class C{  public ValidationDriver(PropertyMap schemaProperties,PropertyMap instanceProperties){  this(schemaProperties,instanceProperties,null);}  }
class C{  public ChooserIntentBuilder history(boolean enable){  mIntent.putExtra(BottomSheetChooserActivity.EXTRA_HISTORY,enable);  return this;}  }
class C{  public static void appendUnpaddedInteger(StringBuffer buf,long value){  int intValue=(int)value;  if (intValue == value) {    appendUnpaddedInteger(buf,intValue);  } else {    buf.append(Long.toString(value));  }}  }
class C{  public Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    boolean zzR=false;    for (zzCurrentPosL=zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {switch (zzBufferL[zzCurrentPosL]) {case '\u000B':case '\u000C':case '\u0085':case '\u2028':case '\u2029':        yyline++;      zzR=false;    break;case '\r':  yyline++;zzR=true;break;case '\n':if (zzR) zzR=false; else {yyline++;}break;default :zzR=false;}}if (zzR) {boolean zzPeek;if (zzMarkedPosL < zzEndReadL) zzPeek=zzBufferL[zzMarkedPosL] == '\n'; else if (zzAtEOF) zzPeek=false; else {boolean eof=zzRefill();zzEndReadL=zzEndRead;zzMarkedPosL=zzMarkedPos;zzBufferL=zzBuffer;if (eof) zzPeek=false; else zzPeek=zzBufferL[zzMarkedPosL] == '\n';}if (zzPeek) yyline--;}zzAction=-1;zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;zzState=zzLexicalState;zzForAction: {while (true) {if (zzCurrentPosL < zzEndReadL) zzInput=zzBufferL[zzCurrentPosL++]; else if (zzAtEOF) {zzInput=YYEOF;break zzForAction;} else {zzCurrentPos=zzCurrentPosL;zzMarkedPos=zzMarkedPosL;boolean eof=zzRefill();zzCurrentPosL=zzCurrentPos;zzMarkedPosL=zzMarkedPos;zzBufferL=zzBuffer;zzEndReadL=zzEndRead;if (eof) {zzInput=YYEOF;break zzForAction;} else {zzInput=zzBufferL[zzCurrentPosL++];}}int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];if (zzNext == -1) break zzForAction;zzState=zzNext;int zzAttributes=zzAttrL[zzState];if ((zzAttributes & 1) == 1) {zzAction=zzState;zzMarkedPosL=zzCurrentPosL;if ((zzAttributes & 8) == 8) break zzForAction;}}}zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 47:{return Token.TK_PAGE_SYM;}case 55:break;case 52:{return Token.TK_IMPORTANT_SYM;}case 56:break;case 15:{return Token.TK_COMMA;}case 57:break;case 22:{return Token.TK_FUNCTION;}case 58:break;case 54:{return Token.TK_NAMESPACE_SYM;}case 59:break;case 40:{return Token.TK_PC;}case 60:break;case 32:{return Token.TK_HASH;}case 61:break;case 19:{return Token.TK_COLON;}case 62:break;case 39:{return Token.TK_MM;}case 63:break;case 30:{return Token.TK_PREFIXMATCH;}case 64:break;case 50:{return Token.TK_IMPORT_SYM;}case 65:break;case 42:{return Token.TK_PX;}case 66:break;case 35:{return Token.TK_EMS;}case 67:break;case 38:{return Token.TK_IN;}case 68:break;case 10:{return Token.TK_GREATER;}case 69:break;case 21:{return Token.TK_RBRACKET;}case 70:break;case 53:{return Token.TK_FONT_FACE_SYM;}case 71:break;case 34:{return Token.TK_CM;}case 72:break;case 31:{return Token.TK_SUFFIXMATCH;}case 73:break;case 37:{return Token.TK_FREQ;}case 74:break;case 26:{return Token.TK_STRING;}case 75:break;case 16:{return Token.TK_RPAREN;}case 76:break;case 7:{return Token.TK_VIRGULE;}case 77:break;case 4:{return Token.TK_S;}case 78:break;case 49:{return Token.TK_MEDIA_SYM;}case 79:break;case 3:{return Token.createOtherToken(yytext());}case 80:break;case 33:{return Token.TK_AT_RULE;}case 81:break;case 5:{return Token.TK_MINUS;}case 82:break;case 12:{return Token.TK_VERTICAL_BAR;}case 83:break;case 45:{}case 84:break;case 9:{return Token.TK_PERIOD;}case 85:break;case 48:{return Token.TK_URI;}case 86:break;case 41:{return Token.TK_PT;}case 87:break;case 1:{return Token.TK_IDENT;}case 88:break;case 28:{return Token.TK_INCLUDES;}case 89:break;case 44:{return Token.TK_ANGLE;}case 90:break;case 51:{return Token.TK_CHARSET_SYM;}case 91:break;case 14:{return Token.TK_PLUS;}case 92:break;case 23:{return Token.TK_DIMENSION;}case 93:break;case 13:{return Token.TK_LBRACE;}case 94:break;case 17:{return Token.TK_RBRACE;}case 95:break;case 43:{return Token.TK_CDC;}case 96:break;case 25:{return Token.TK_PERCENTAGE;}case 97:break;case 18:{return Token.TK_SEMICOLON;}case 98:break;case 20:{return Token.TK_LBRACKET;}case 99:break;case 46:{return Token.TK_CDO;}case 100:break;case 27:{return Token.TK_SUBSTRINGMATCH;}case 101:break;case 2:{return Token.TK_NUMBER;}case 102:break;case 24:{return Token.TK_TIME;}case 103:break;case 8:{return Token.TK_ASTERISK;}case 104:break;case 6:{return Token.TK_INVALID;}case 105:break;case 11:{return Token.TK_EQUALS;}case 106:break;case 36:{return Token.TK_EXS;}case 107:break;case 29:{return Token.TK_DASHMATCH;}case 108:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;{return Token.TK_EOF;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  private int readAnnotationTarget(final Context context,int u){  int target=readInt(u);switch (target >>> 24) {case 0x00:case 0x01:case 0x16:    target&=0xFFFF0000;  u+=2;break;case 0x13:case 0x14:case 0x15:target&=0xFF000000;u+=1;break;case 0x40:case 0x41:{target&=0xFF000000;int n=readUnsignedShort(u + 1);context.start=new Label[n];context.end=new Label[n];context.index=new int[n];u+=3;for (int i=0; i < n; ++i) {int start=readUnsignedShort(u);int length=readUnsignedShort(u + 2);context.start[i]=readLabel(start,context.labels);context.end[i]=readLabel(start + length,context.labels);context.index[i]=readUnsignedShort(u + 4);u+=6;}break;}case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:target&=0xFF0000FF;u+=4;break;default :target&=(target >>> 24) < 0x43 ? 0xFFFFFF00 : 0xFF000000;u+=3;break;}int pathLength=readByte(u);context.typeRef=target;context.typePath=pathLength == 0 ? null : new TypePath(b,u);return u + 1 + 2 * pathLength;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.FOR_STATEMENT__STATEMENT:    return basicSetStatement(null,msgs);case N4JSPackage.FOR_STATEMENT__EXPRESSION:  return basicSetExpression(null,msgs);case N4JSPackage.FOR_STATEMENT__INIT_EXPR:return basicSetInitExpr(null,msgs);case N4JSPackage.FOR_STATEMENT__UPDATE_EXPR:return basicSetUpdateExpr(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static boolean hasPermission(Activity activity,String permission){  return activity.checkSelfPermission(permission) == PackageManager.PERMISSION_GRANTED;}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  super.onActivityResult(requestCode,resultCode,data);switch (requestCode) {case REQ_CODE_SPEECH_INPUT:{      if (resultCode == RESULT_OK && null != data) {        ArrayList<String> result=data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);        String results=result.get(0);        if ((results != null) && (results.length() > 1)) {          if (mTextView != null) {            mTextView.setText(results);            mTextView.setVisibility(View.VISIBLE);          }          SendData(this,WEARABLE_VOICE_PAYLOAD,results.getBytes(StandardCharsets.UTF_8));        }      }      recognitionRunning=false;      break;    }}}  }
class C{  public DateTime toDateTime(DateTimeZone zone){  Chronology chrono=DateTimeUtils.getChronology(getChronology());  chrono=chrono.withZone(zone);  return new DateTime(getMillis(),chrono);}  }
class C{  PorterDuffColorFilter updateTintFilter(PorterDuffColorFilter tintFilter,ColorStateList tint,PorterDuff.Mode tintMode){  if (tint == null || tintMode == null) {    return null;  }  final int color=tint.getColorForState(getState(),Color.TRANSPARENT);  tintFilter=new PorterDuffColorFilter(color,tintMode);  return tintFilter;}  }
class C{  public void log(PrintWriter printWriter,Platform platform,Deque<CallStackItem> callStack){  String msg=platform.getMasterClock().getFormatedTotalElapsedTimeMs() + " ";  if (function != null) {    msg+=function.getName() + "(";    if (function.getParameterList() != null) {      for (      Symbol.Parameter parameter : function.getParameterList()) {        if (parameter.getInVariableName() != null) {          String paramString=parameter.getInVariableName() + "=";          int value=platform.getCpuState().getReg(parameter.getRegister());          if (parameter.getInVariableName().startsWith("sz")) {            paramString+="\"";            int character=platform.getMemory().loadUnsigned8(value++,com.nikonhacker.emu.memory.DebuggableMemory.AccessSource.CODE);            while (character > 0) {              paramString+=(char)character;              character=platform.getMemory().loadUnsigned8(value++,com.nikonhacker.emu.memory.DebuggableMemory.AccessSource.CODE);            }            paramString+="\"";          } else {            paramString+="0x" + Format.asHex(value,8);          }          if (!msg.endsWith("(")) {            msg+=", ";          }          msg+=paramString;        }      }    }    msg+=") ";  } else {    msg+=name;  }  String addr=Format.asHex(platform.getCpuState().pc,8);  if (!msg.toUpperCase().contains(addr)) {    msg+=" triggered at 0x" + addr;  }  if (callStack != null) {    for (    CallStackItem callStackItem : callStack) {      msg+=" << " + StringUtils.strip(callStackItem.toString()).replaceAll("\\s+"," ");    }  }  printWriter.print(msg + "\n");}  }
class C{  public boolean isClipPreserved(){  return clipPreserved;}  }
class C{  public COPACNeighborPredicate.Instance instantiate(Database database,Relation<V> relation){  DistanceQuery<V> dq=database.getDistanceQuery(relation,EuclideanDistanceFunction.STATIC);  KNNQuery<V> knnq=database.getKNNQuery(dq,settings.k);  WritableDataStore<COPACModel> storage=DataStoreUtil.makeStorage(relation.getDBIDs(),DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP,COPACModel.class);  Duration time=LOG.newDuration(this.getClass().getName() + ".preprocessing-time").begin();  FiniteProgress progress=LOG.isVerbose() ? new FiniteProgress(this.getClass().getName(),relation.size(),LOG) : null;  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    DoubleDBIDList ref=knnq.getKNNForDBID(iditer,settings.k);    storage.put(iditer,computeLocalModel(iditer,ref,relation));    LOG.incrementProcessed(progress);  }  LOG.ensureCompleted(progress);  LOG.statistics(time.end());  return new Instance(relation.getDBIDs(),storage);}  }
class C{  public void add(Tool item,int index){  try {    add(item.getKey(),item,index);  } catch (  NullPointerException npe) {    if (item != null) {      logger.warning("ToolPanel.add(): no name for " + item.getClass().getName());      npe.printStackTrace();    } else {      logger.warning("ToolPanel.add(): no name for null tool.");    }  }}  }
class C{  public static Set send(final DM dm,long timeout){  boolean hadCache=hasCache();  boolean interrupted=false;  DistributionManager dism=(dm instanceof DistributionManager) ? (DistributionManager)dm : null;  InternalDistributedMember myId=dm.getDistributionManagerId();  Set recipients=dm.getOtherNormalDistributionManagerIds();  recipients.remove(myId);  ShutdownAllRequest request=new ShutdownAllRequest();  request.setRecipients(recipients);  ShutDownAllReplyProcessor replyProcessor=new ShutDownAllReplyProcessor(dm,recipients);  request.msgId=replyProcessor.getProcessorId();  dm.putOutgoing(request);  if (!InternalLocator.isDedicatedLocator()) {    if (hadCache && dism != null) {      AdminResponse response;      try {        request.setSender(myId);        response=request.createResponse(dism);      } catch (      Exception ex) {        if (logger.isDebugEnabled()) {          logger.debug("caught exception while processing shutdownAll locally",ex);        }        response=AdminFailureResponse.create(dism,myId,ex);      }      response.setSender(myId);      replyProcessor.process(response);    }  }  try {    if (!replyProcessor.waitForReplies(timeout)) {      return null;    }  } catch (  ReplyException e) {    if (!(e.getCause() instanceof CancelException)) {      e.handleAsUnexpected();    }  }catch (  CancelException e) {  }catch (  InterruptedException e) {    interrupted=true;  }  if (hadCache) {    if (!InternalLocator.isDedicatedLocator()) {      InternalDistributedSystem ids=dm.getSystem();      if (ids.isConnected()) {        ids.disconnect();      }    }  }  if (interrupted) {    Thread.currentThread().interrupt();  }  try {    Thread.sleep(3 * SLEEP_TIME_BEFORE_DISCONNECT_DS);  } catch (  InterruptedException e) {  }  return replyProcessor.getResults();}  }
class C{  public SassList(Collection<?> collection,Separator separator){  super(collection);  this.separator=separator;}  }
class C{  private void add(GridUnsafeCompoundMemory c){  GridUnsafeCompoundMemory existing=compound;  if (existing == null) {    if (compoundUpdater.compareAndSet(this,null,c))     return;    existing=compound;  }  existing.merge(c);}  }
class C{  public static float length(Vector3 a){  return (float)Math.sqrt(lengthSquared(a));}  }
class C{  public Deck(){  this.cards=new Card[52];  int index=0;  for (int suit=0; suit <= 3; suit++) {    for (int rank=1; rank <= 13; rank++) {      this.cards[index]=new Card(rank,suit);      index++;    }  }}  }
class C{  final public int yylength(){  return yy_markedPos - yy_startRead;}  }
class C{  public static ByteBuffer decode(ByteBuffer buf,PDFObject params) throws IOException {  LZWDecode me=new LZWDecode(buf);  ByteBuffer outBytes=me.decode();  if (params != null && params.getDictionary().containsKey("Predictor")) {    Predictor predictor=Predictor.getPredictor(params);    if (predictor != null) {      outBytes=predictor.unpredict(outBytes);    }  }  return outBytes;}  }
class C{  protected SVGURIReferenceGraphicsElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  @NotNull @ObjectiveCName("addPreferredLanguage:") public ConfigurationBuilder addPreferredLanguage(String language){  if (!preferredLanguages.contains(language)) {    preferredLanguages.add(language);  }  return this;}  }
class C{  public mat4 sub(mat4 matA,mat4 matB){  float[] a=matA.m;  float[] b=matB.m;  for (int i=0; i < 16; ++i) {    this.m[i]=a[i] - b[i];  }  return this;}  }
class C{  public void add(float val){  ensureCapacity(_pos + 1);  _data[_pos++]=val;}  }
class C{  @Override public Figure findFigure(Point p){  return getDrawing().findFigure(viewToDrawing(p));}  }
class C{  public static void reportError(final Context context,final Throwable throwable){  log.reportError(context,throwable);}  }
class C{  public void visit(int version,int access,String name,String signature,String superName,String[] interfaces){  if (cv != null) {    cv.visit(version,access,name,signature,superName,interfaces);  }}  }
class C{  static void executeOnServer(Connection connection,String clientId) throws IOException {  connection.send(CreateGroupsAction.PATH,ImmutableMap.of(CreateGroupsAction.CLIENT_ID_PARAM,clientId),MediaType.PLAIN_TEXT_UTF_8,new byte[0]);}  }
class C{  public MLetParser(){}  }
class C{  public GetActivePlayers(){  super();}  }
class C{  public static void refreshProject(final SWTWorkbenchBot bot,String projectName){  SWTBotTreeItem project=selectProject(bot,projectName);  project.contextMenu("Refresh").click();}  }
class C{  public static int compare(String left,boolean right){  if (Decision.isBoolean(left))   return compare(Caster.toBooleanValue(left,false),right);  if (Decision.isNumber(left))   return compare(Caster.toDoubleValue(left,Double.NaN),right ? 1d : 0d);  if (left.length() == 0)   return -1;  char leftFirst=left.charAt(0);  if (leftFirst >= '0' && leftFirst <= '9')   return left.compareToIgnoreCase(Caster.toString(right ? 1D : 0D));  return leftFirst - '0';}  }
class C{  public void writeToNBT(final NBTTagCompound nbt){  final NBTTagList pagesNbt=new NBTTagList();  int removed=0;  for (int index=0; index < programs.size(); index++) {    final List<String> program=programs.get(index);    if (program.size() > 1 || program.get(0).length() > 0) {      pagesNbt.appendTag(new NBTTagString(String.join("\n",program)));    } else     if (index < selectedProgram) {      removed++;    }  }  nbt.setTag(TAG_PAGES,pagesNbt);  nbt.setInteger(TAG_SELECTED,selectedProgram - removed);}  }
class C{  private void synchronizeDebugger(final IDebugger newDebugger){  m_historyStringBuilder.setDebugger(newDebugger);}  }
class C{  static void _dumpAsString(String indent,boolean verbose,ASN1Primitive obj,StringBuffer buf){  String nl=System.getProperty("line.separator");  if (obj instanceof ASN1Sequence) {    Enumeration e=((ASN1Sequence)obj).getObjects();    String tab=indent + TAB;    buf.append(indent);    if (obj instanceof BERSequence) {      buf.append("BER Sequence");    } else     if (obj instanceof DERSequence) {      buf.append("DER Sequence");    } else {      buf.append("Sequence");    }    buf.append(nl);    while (e.hasMoreElements()) {      Object o=e.nextElement();      if (o == null || o.equals(DERNull.INSTANCE)) {        buf.append(tab);        buf.append("NULL");        buf.append(nl);      } else       if (o instanceof ASN1Primitive) {        _dumpAsString(tab,verbose,(ASN1Primitive)o,buf);      } else {        _dumpAsString(tab,verbose,((ASN1Encodable)o).toASN1Primitive(),buf);      }    }  } else   if (obj instanceof ASN1TaggedObject) {    String tab=indent + TAB;    buf.append(indent);    if (obj instanceof BERTaggedObject) {      buf.append("BER Tagged [");    } else {      buf.append("Tagged [");    }    ASN1TaggedObject o=(ASN1TaggedObject)obj;    buf.append(Integer.toString(o.getTagNo()));    buf.append(']');    if (!o.isExplicit()) {      buf.append(" IMPLICIT ");    }    buf.append(nl);    if (o.isEmpty()) {      buf.append(tab);      buf.append("EMPTY");      buf.append(nl);    } else {      _dumpAsString(tab,verbose,o.getObject(),buf);    }  } else   if (obj instanceof ASN1Set) {    Enumeration e=((ASN1Set)obj).getObjects();    String tab=indent + TAB;    buf.append(indent);    if (obj instanceof BERSet) {      buf.append("BER Set");    } else {      buf.append("DER Set");    }    buf.append(nl);    while (e.hasMoreElements()) {      Object o=e.nextElement();      if (o == null) {        buf.append(tab);        buf.append("NULL");        buf.append(nl);      } else       if (o instanceof ASN1Primitive) {        _dumpAsString(tab,verbose,(ASN1Primitive)o,buf);      } else {        _dumpAsString(tab,verbose,((ASN1Encodable)o).toASN1Primitive(),buf);      }    }  } else   if (obj instanceof ASN1OctetString) {    ASN1OctetString oct=(ASN1OctetString)obj;    if (obj instanceof BEROctetString || obj instanceof BERConstructedOctetString) {      buf.append(indent + "BER Constructed Octet String" + "["+ oct.getOctets().length+ "] ");    } else {      buf.append(indent + "DER Octet String" + "["+ oct.getOctets().length+ "] ");    }    if (verbose) {      buf.append(dumpBinaryDataAsString(indent,oct.getOctets()));    } else {      buf.append(nl);    }  } else   if (obj instanceof ASN1ObjectIdentifier) {    buf.append(indent + "ObjectIdentifier(" + ((ASN1ObjectIdentifier)obj).getId()+ ")"+ nl);  } else   if (obj instanceof DERBoolean) {    buf.append(indent + "Boolean(" + ((DERBoolean)obj).isTrue()+ ")"+ nl);  } else   if (obj instanceof ASN1Integer) {    buf.append(indent + "Integer(" + ((ASN1Integer)obj).getValue()+ ")"+ nl);  } else   if (obj instanceof DERBitString) {    DERBitString bt=(DERBitString)obj;    buf.append(indent + "DER Bit String" + "["+ bt.getBytes().length+ ", "+ bt.getPadBits()+ "] ");    if (verbose) {      buf.append(dumpBinaryDataAsString(indent,bt.getBytes()));    } else {      buf.append(nl);    }  } else   if (obj instanceof DERIA5String) {    buf.append(indent + "IA5String(" + ((DERIA5String)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERUTF8String) {    buf.append(indent + "UTF8String(" + ((DERUTF8String)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERPrintableString) {    buf.append(indent + "PrintableString(" + ((DERPrintableString)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERVisibleString) {    buf.append(indent + "VisibleString(" + ((DERVisibleString)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERBMPString) {    buf.append(indent + "BMPString(" + ((DERBMPString)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERT61String) {    buf.append(indent + "T61String(" + ((DERT61String)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERUTCTime) {    buf.append(indent + "UTCTime(" + ((DERUTCTime)obj).getTime()+ ") "+ nl);  } else   if (obj instanceof DERGeneralizedTime) {    buf.append(indent + "GeneralizedTime(" + ((DERGeneralizedTime)obj).getTime()+ ") "+ nl);  } else   if (obj instanceof BERApplicationSpecific) {    buf.append(outputApplicationSpecific("BER",indent,verbose,obj,nl));  } else   if (obj instanceof DERApplicationSpecific) {    buf.append(outputApplicationSpecific("DER",indent,verbose,obj,nl));  } else   if (obj instanceof DEREnumerated) {    DEREnumerated en=(DEREnumerated)obj;    buf.append(indent + "DER Enumerated(" + en.getValue()+ ")"+ nl);  } else   if (obj instanceof DERExternal) {    DERExternal ext=(DERExternal)obj;    buf.append(indent + "External " + nl);    String tab=indent + TAB;    if (ext.getDirectReference() != null) {      buf.append(tab + "Direct Reference: " + ext.getDirectReference().getId()+ nl);    }    if (ext.getIndirectReference() != null) {      buf.append(tab + "Indirect Reference: " + ext.getIndirectReference().toString()+ nl);    }    if (ext.getDataValueDescriptor() != null) {      _dumpAsString(tab,verbose,ext.getDataValueDescriptor(),buf);    }    buf.append(tab + "Encoding: " + ext.getEncoding()+ nl);    _dumpAsString(tab,verbose,ext.getExternalContent(),buf);  } else {    buf.append(indent + obj.toString() + nl);  }}  }
class C{  public void d(Object str){  if (debug) {    if (logLevel <= Log.DEBUG) {      String name=getFunctionName();      if (name != null) {        Log.d(tag,name + "\n" + str+ "\n------------------------------------------------------------------------------");      } else {        Log.d(tag,str.toString());      }    }  }}  }
class C{  public void copyBits(BitVector set){  System.arraycopy(set.bits,0,this.bits,0,set.bits.length);}  }
class C{  private boolean isBudgetCheckingRequiredForType(final String txnType,final String budgetingType){  if ("debit".equalsIgnoreCase(budgetingType) && "debit".equals(txnType))   return true; else   if ("credit".equalsIgnoreCase(budgetingType) && "credit".equals(txnType))   return true; else   if ("all".equalsIgnoreCase(budgetingType))   return true; else   return false;}  }
class C{  public PositionLayer(ImageView icon){  this(icon,0.0,0.0);}  }
class C{  private ThreadGroup(){  this.name="main";  this.parent=null;}  }
class C{  public static String removeIllegalFileNameCharacters(final String s){  return s;}  }
class C{  public boolean isSetRenameToPath(){  return this.renameToPath != null;}  }
class C{  public INode contains(INode n){  DoubleNode<INode> dn=list.first();  while (dn != null) {    if (dn.value().equals(n)) {      return dn.value();    }    dn=dn.next();  }  return null;}  }
class C{  public ResultState call() throws FlinkTestFailedException {  Action nextStep=Action.STOP;  try {    nextStep=processMessage(subscriber.recv());    while (nextStep == Action.CONTINUE) {      nextStep=processMessage(subscriber.recv());    }  } catch (  IOException e) {    throw new FlinkTestFailedException(e);  }catch (  ZMQException e) {  }  try {    verifier.finish();  } catch (  Throwable e) {    throw new FlinkTestFailedException(e);  }  if (nextStep == Action.FINISH) {    return ResultState.SUCCESS;  } else   if (nextStep == Action.STOP) {    return ResultState.TRIGGERED;  } else {    return ResultState.FAILURE;  }}  }
class C{  public void suspend(){  throw new UnsupportedOperationException("Caller not instrumented");}  }
class C{  private synchronized void doFinish(){  if (isRunning) {    isRunning=false;    Intent i=new Intent(SplashScreen.this,MainActivity.class);    i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);    startActivity(i);    finish();  }}  }
class C{  protected boolean haveSharedCellsRaw(ObjectMatrix1D other){  if (other instanceof SelectedDenseObjectMatrix1D) {    SelectedDenseObjectMatrix1D otherMatrix=(SelectedDenseObjectMatrix1D)other;    return this.elements == otherMatrix.elements;  } else   if (other instanceof DenseObjectMatrix1D) {    DenseObjectMatrix1D otherMatrix=(DenseObjectMatrix1D)other;    return this.elements == otherMatrix.elements;  }  return false;}  }
class C{  public IdentifierRef_IM createIdentifierRef_IM(){  IdentifierRef_IMImpl identifierRef_IM=new IdentifierRef_IMImpl();  return identifierRef_IM;}  }
class C{  public static ExceptionMessage translateExceptionMessage(ExceptionCode code,Dictionary<?,?> params) throws MessageTranslatorException {  return translateExceptionMessage(code.getCode(),params);}  }
class C{  public T ismap(String value){  return attr("ismap",value);}  }
class C{  public static boolean usesFirstOperand(final Integer mnemonic){  return !mnemonic.equals(_OPCODE_NOP);}  }
class C{  public void close() throws IOException {  if (baos != null) {    baos.close();    baos=null;  }  if (dos != null) {    dos.close();    dos=null;  }}  }
class C{  private static int med3(Object x[],int a,int b,int c){  int ab=((Comparable)x[a]).compareTo((Comparable)x[b]);  int ac=((Comparable)x[a]).compareTo((Comparable)x[c]);  int bc=((Comparable)x[b]).compareTo((Comparable)x[c]);  return (ab < 0 ? (bc < 0 ? b : ac < 0 ? c : a) : (bc > 0 ? b : ac > 0 ? c : a));}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double zConvFactor=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zConvFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    double[] N=new double[8];    float slope;    float progress=0;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    final double radToDeg=180 / Math.PI;    double Zx, Zy, Zxx, Zyy, Zxy, Zx2, Zy2, p, q;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double gridRes=inputFile.getCellSizeX();    double gridResTimes2=gridRes * 2;    double eightGridRes=8 * gridRes;    double gridResSquared=gridRes * gridRes;    double fourTimesGridResSquared=gridResSquared * 4;    double curv;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zConvFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("blue_white_red.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          for (int i=0; i < 8; i++) {            N[i]=inputFile.getValue(row + Dy[i],col + Dx[i]);            if (N[i] != noData) {              N[i]=N[i] * zConvFactor;            } else {              N[i]=z * zConvFactor;            }          }          Zxx=(N[1] - 2 * z + N[5]) / gridResSquared;          Zyy=(N[7] - 2 * z + N[3]) / gridResSquared;          Zxy=(-N[6] + N[0] + N[4] - N[2]) / fourTimesGridResSquared;          curv=Zxx * Zxx + 2 * Zxy * Zxy + Zyy * Zyy;          outputFile.setValue(row,col,curv * radToDeg * 100);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  void index(Object newIndex){  this.index=newIndex;}  }
class C{  public CertificatePoliciesExtension(Boolean critical,Object value) throws IOException {  this.extensionId=PKIXExtensions.CertificatePolicies_Id;  this.critical=critical.booleanValue();  this.extensionValue=(byte[])value;  DerValue val=new DerValue(this.extensionValue);  if (val.tag != DerValue.tag_Sequence) {    throw new IOException("Invalid encoding for " + "CertificatePoliciesExtension.");  }  certPolicies=new ArrayList<PolicyInformation>();  while (val.data.available() != 0) {    DerValue seq=val.data.getDerValue();    PolicyInformation policy=new PolicyInformation(seq);    certPolicies.add(policy);  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONTACT'";  db.execSQL(sql);}  }
class C{  private void solveInplace(double[][] B,int nx){  for (int k=0; k < n; k++) {    for (int i=k + 1; i < n; i++) {      for (int j=0; j < nx; j++) {        B[i][j]-=B[k][j] * LU[i][k];      }    }  }  for (int k=n - 1; k >= 0; k--) {    for (int j=0; j < nx; j++) {      B[k][j]/=LU[k][k];    }    for (int i=0; i < k; i++) {      for (int j=0; j < nx; j++) {        B[i][j]-=B[k][j] * LU[i][k];      }    }  }}  }
class C{  private List<String> updateStatus(List<String> unsentRegIds,Map<String,Result> allResults,MulticastResult multicastResult){  List<Result> results=multicastResult.getResults();  if (results.size() != unsentRegIds.size()) {    throw new RuntimeException("Internal error: sizes do not match. " + "currentResults: " + results + "; unsentRegIds: "+ unsentRegIds);  }  List<String> newUnsentRegIds=new ArrayList<String>();  for (int i=0; i < unsentRegIds.size(); i++) {    String regId=unsentRegIds.get(i);    Result result=results.get(i);    allResults.put(regId,result);    String error=result.getErrorCodeName();    if (error != null && (error.equals(Constants.ERROR_UNAVAILABLE) || error.equals(Constants.ERROR_INTERNAL_SERVER_ERROR))) {      newUnsentRegIds.add(regId);    }  }  return newUnsentRegIds;}  }
class C{  public int execSox(List<String> cmd,ShellCallback sc) throws IOException, InterruptedException {  String soxBin=new File(fileBinDir,"sox").getCanonicalPath();  Runtime.getRuntime().exec("chmod 700 " + soxBin);  return execProcess(cmd,sc);}  }
class C{  public boolean validate(Class type,File source) throws Exception {  return validate(type,source,true);}  }
class C{  private void addElements(int numberOfElements){  int newlen=m_firstFree + numberOfElements;  if (newlen > m_blocksize) {    int index=m_firstFree >>> m_SHIFT;    int newindex=(m_firstFree + numberOfElements) >>> m_SHIFT;    for (int i=index + 1; i <= newindex; ++i)     m_map[i]=new int[m_blocksize];  }  m_firstFree=newlen;}  }
class C{  public final void sub(int bagIndex,Instance instance) throws Exception {  int classIndex;  double weight;  classIndex=(int)instance.classValue();  weight=instance.weight();  m_perClassPerBag[bagIndex][classIndex]=m_perClassPerBag[bagIndex][classIndex] - weight;  m_perBag[bagIndex]=m_perBag[bagIndex] - weight;  m_perClass[classIndex]=m_perClass[classIndex] - weight;  totaL=totaL - weight;}  }
class C{  public final void finishFragment(){  android.support.v4.app.FragmentActivity activity=getActivity();  if (activity == null) {    throw new IllegalStateException("Fragment " + this + " not attached to Activity");  }  activity.onBackPressed();}  }
class C{  public static Credentials acquireServiceCreds(String service,Credentials ccreds) throws KrbException, IOException {  PrincipalName sname=new PrincipalName(service);  String serviceRealm=sname.getRealmString();  String localRealm=ccreds.getClient().getRealmString();  if (localRealm.equals(serviceRealm)) {    if (DEBUG) {      System.out.println(">>> Credentials acquireServiceCreds: same realm");    }    return serviceCreds(sname,ccreds);  }  Credentials theCreds=null;  boolean[] okAsDelegate=new boolean[1];  Credentials theTgt=getTGTforRealm(localRealm,serviceRealm,ccreds,okAsDelegate);  if (theTgt != null) {    if (DEBUG) {      System.out.println(">>> Credentials acquireServiceCreds: " + "got right tgt");      System.out.println(">>> Credentials acquireServiceCreds: " + "obtaining service creds for " + sname);    }    try {      theCreds=serviceCreds(sname,theTgt);    } catch (    Exception exc) {      if (DEBUG) {        System.out.println(exc);      }      theCreds=null;    }  }  if (theCreds != null) {    if (DEBUG) {      System.out.println(">>> Credentials acquireServiceCreds: " + "returning creds:");      Credentials.printDebug(theCreds);    }    if (!okAsDelegate[0]) {      theCreds.resetDelegate();    }    return theCreds;  }  throw new KrbApErrException(Krb5.KRB_AP_ERR_GEN_CRED,"No service creds");}  }
class C{  protected GeneralPath createShape(){  GeneralPath shape=null;  if (getNeedToRegenerate() || !checkPoints(xpoints,ypoints)) {    return shape;  }  initLabelingDuringGenerate();switch (renderType) {case RENDERTYPE_XY:case RENDERTYPE_OFFSET:    shape=createShape(xpoints[0],ypoints[0],isPolygon());  break;case RENDERTYPE_LATLON:int size=xpoints.length;for (int i=0; i < size; i++) {GeneralPath gp=createShape(xpoints[i],ypoints[i],isPolygon());shape=appendShapeEdge(shape,gp,false);}break;default :}setLabelLocation(xpoints[0],ypoints[0]);return shape;}  }
class C{  public static <E>Set<E> synchronizedSet(Set<E> set){  if (set == null) {    throw new NullPointerException();  }  return new SynchronizedSet<E>(set);}  }
class C{  public void removeRepositoryConnectionInterceptor(RepositoryConnectionInterceptor interceptor){  interceptors.remove(interceptor);  activated=!interceptors.isEmpty();}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  public Task<FileShareRestRep> updateNfsACL(URI id,FileNfsACLUpdateParams param){  UriBuilder builder=client.uriBuilder(getNfsACLsUrl());  URI targetUri=builder.build(id);  return putTaskURI(param,targetUri);}  }
class C{  private static void check(List<Map.Entry<Integer,FactPurchase>> res){  assertEquals("Result size",4,res.size());  checkPurchase(res.get(0),13,3,0);  checkPurchase(res.get(1),14,4,1);  checkPurchase(res.get(2),15,5,0);  checkPurchase(res.get(3),16,6,1);}  }
class C{  public void encodeBegin(FacesContext context,UIComponent component) throws IOException {  String styleClass=null;  if (context == null || component == null) {    throw new NullPointerException("'context' and/or 'component' is null");  }  if (logger.isLoggable(Level.FINER)) {    logger.log(Level.FINER,"Begin encoding component " + component.getId());  }  if (!component.isRendered()) {    if (logger.isLoggable(Level.FINER)) {      logger.log(Level.FINER,"Begin encoding component " + component.getId() + " since "+ "rendered attribute is set to false ");    }    return;  }  ResponseWriter writer=context.getResponseWriter();  if (!context.getExternalContext().getRequestMap().containsKey(RENDERED_SCRIPT)) {    context.getExternalContext().getRequestMap().put(RENDERED_SCRIPT,Boolean.TRUE);    writer.startElement("script",component);    writer.writeAttribute("xlink:href",context.getExternalContext().getRequestContextPath() + "/src/script/http-svg.es",null);    writer.endElement("script");    writer.writeText("\n",null);    writer.startElement("script",component);    writer.writeAttribute("xlink:href",context.getExternalContext().getRequestContextPath() + "/src/script/lifecycle.es",null);    writer.endElement("script");    writer.writeText("\n",null);  }  writer.startElement("g",component);  writer.writeAttribute("id",component.getClientId(context),"clientId");  writer.writeAttribute("method","post",null);  writer.writeAttribute("action",getActionStr(context),null);  String acceptcharset=null;  if (null != (acceptcharset=(String)component.getAttributes().get("acceptcharset"))) {    writer.writeAttribute("accept-charset",acceptcharset,"acceptcharset");  }  writer.writeText("\n",null);}  }
class C{  public void addChangeListener(StructuredViewer listener){  listeners.add(listener);}  }
class C{  public boolean isNumber(){  return false;}  }
class C{  public static void checkSuperClass(Service s,Class<?> subClass,Class<?> superClass) throws NoSuchAlgorithmException {  if (superClass == null) {    return;  }  if (superClass.isAssignableFrom(subClass) == false) {    throw new NoSuchAlgorithmException("class configured for " + s.getType() + ": "+ s.getClassName()+ " not a "+ s.getType());  }}  }
class C{  @CanIgnoreReturnValue @Override public Builder<K,V> put(K key,V value){  builderMultimap.put(checkNotNull(key),checkNotNull(value));  return this;}  }
class C{  @SuppressWarnings("unchecked") @Override protected ConnectFuture connect0(final SocketAddress remoteAddress,final SocketAddress localAddress,final IoSessionInitializer<? extends ConnectFuture> sessionInitializer){  if (!proxyIoSession.isReconnectionNeeded()) {    IoHandler handler=getHandler();    if (!(handler instanceof AbstractProxyIoHandler)) {      throw new IllegalArgumentException("IoHandler must be an instance of AbstractProxyIoHandler");    }    connector.setHandler(handler);    future=new DefaultConnectFuture();  }  ConnectFuture conFuture=connector.connect(proxyIoSession.getProxyAddress(),new ProxyIoSessionInitializer(sessionInitializer,proxyIoSession));  if (proxyIoSession.getRequest() instanceof SocksProxyRequest || proxyIoSession.isReconnectionNeeded()) {    return conFuture;  }  return future;}  }
class C{  public double det(){  return quick.det();}  }
class C{  public void trigger(DialogueState state,Collection<String> updatedVars){  refresh();  if (updatedVars.contains(system.getSettings().userInput) && state.hasChanceNode(system.getSettings().userInput)) {    CategoricalTable distrib=state.queryProb(system.getSettings().userInput,false).toDiscrete();    showVariable(distrib);  }  if (updatedVars.contains(system.getSettings().systemOutput) && state.hasChanceNode(system.getSettings().systemOutput)) {    showVariable(state.queryProb(system.getSettings().systemOutput).toDiscrete());  }  for (  String monitorVar : system.getSettings().varsToMonitor) {    if (updatedVars.contains(monitorVar)) {      showVariable(state.queryProb(monitorVar).toDiscrete());    }  }}  }
class C{  private void importSharedPreferencesWithLogging(){  final SharedPreferences sharedPreferences=getContext().getSharedPreferences(SampleActivity.SHARED_PREF_NAME,Context.MODE_MULTI_PROCESS);  final HashMap<String,?> allBefore=new HashMap<>(sharedPreferences.getAll());  Log.v(TAG,allBefore.size() + " items in sharedPreferences: " + allBefore.toString());  importSharedPreferences();  final ArrayList<TrayItem> all=new ArrayList<>(getAll());  Log.v(TAG,"imported " + all.size() + " items: "+ all.toString());  final HashMap<String,?> allAfter=new HashMap<>(sharedPreferences.getAll());  Log.v(TAG,allAfter.size() + " items in sharedPreferences: " + allAfter.toString());}  }
class C{  public List<SourceRecord> ddlRecordsForDatabase(String dbName){  return ddlRecordsByDbName.get(dbName);}  }
class C{  public boolean isLenient(){  return lenient;}  }
class C{  protected void buildKDTree(Instances instances) throws Exception {  checkMissing(instances);  if (m_EuclideanDistance == null)   m_DistanceFunction=m_EuclideanDistance=new EuclideanDistance(instances); else   m_EuclideanDistance.setInstances(instances);  m_Instances=instances;  int numInst=m_Instances.numInstances();  m_InstList=new int[numInst];  for (int i=0; i < numInst; i++) {    m_InstList[i]=i;  }  double[][] universe=m_EuclideanDistance.getRanges();  m_Splitter.setInstances(m_Instances);  m_Splitter.setInstanceList(m_InstList);  m_Splitter.setEuclideanDistanceFunction(m_EuclideanDistance);  m_Splitter.setNodeWidthNormalization(m_NormalizeNodeWidth);  m_NumNodes=m_NumLeaves=1;  m_MaxDepth=0;  m_Root=new KDTreeNode(m_NumNodes,0,m_Instances.numInstances() - 1,universe);  splitNodes(m_Root,universe,m_MaxDepth + 1);}  }
class C{  public void acceptVisitor(CFG cfg,PathVisitor visitor){  if (getLength() > 0) {    BasicBlock startBlock=cfg.lookupBlockByLabel(getBlockIdAt(0));    acceptVisitorStartingFromLocation(cfg,visitor,startBlock,startBlock.getFirstInstruction());  }}  }
class C{  public void addNearValue(int keyIdx,@Nullable CacheObject val,long ttl,long expireTime){  if (nearValsIdxs == null) {    nearValsIdxs=new ArrayList<>();    nearVals=new ArrayList<>();  }  addNearTtl(keyIdx,ttl,expireTime);  nearValsIdxs.add(keyIdx);  nearVals.add(val);}  }
class C{  @Override public void onSurfaceCreated(GL10 unused,EGLConfig config){  if (EXTRA_CHECK)   Util.checkGlError("onSurfaceCreated start");  BasicAlignedRect.createProgram();  TexturedAlignedRect.createProgram();  GameState gameState=mGameState;  gameState.setTextResources(new TextResources(mTextConfig));  gameState.allocBorders();  gameState.allocBricks();  gameState.allocPaddle();  gameState.allocBall();  gameState.allocScore();  gameState.allocMessages();  gameState.allocDebugStuff();  gameState.restore();  GLES20.glClearColor(0.0f,0.0f,0.0f,1.0f);  GLES20.glDisable(GLES20.GL_DEPTH_TEST);  if (EXTRA_CHECK) {    GLES20.glEnable(GLES20.GL_CULL_FACE);  } else {    GLES20.glDisable(GLES20.GL_CULL_FACE);  }  if (EXTRA_CHECK)   Util.checkGlError("onSurfaceCreated end");}  }
class C{  public void clear(){  mGestureDetector=null;  mScaleGetureDetector=null;  mDrawable=null;  mScaleRunnable.stop();  mScaleRunnable=null;  mTranslateRunnable.stop();  mTranslateRunnable=null;  mSnapRunnable.stop();  mSnapRunnable=null;  mRotateRunnable.stop();  mRotateRunnable=null;  setOnClickListener(null);  mExternalClickListener=null;  mDoubleTapOccurred=false;}  }
class C{  public TModule createTModule(){  TModuleImpl tModule=new TModuleImpl();  return tModule;}  }
class C{  public boolean isExactMatch(){  return _isExactMatch;}  }
class C{  String tableName(TableReference tableRef){  String rawName=tableRef.getQualifiedName();  String hash=hashTableName(rawName).substring(0,8);  if (tablePrefix.length() + rawName.length() + hash.length() < 30) {    return tablePrefix + rawName.replace('.','_') + '_'+ hash;  } else {    String fullName=tablePrefix + rawName.replace('.','_');    return fullName.substring(0,10) + '_' + fullName.substring(fullName.length() - 10)+ '_'+ hash;  }}  }
class C{  public static S2Point faceUvToXyz(int face,double u,double v){switch (face) {case 0:    return new S2Point(1,u,v);case 1:  return new S2Point(-u,1,v);case 2:return new S2Point(-u,-v,1);case 3:return new S2Point(-1,-v,-u);case 4:return new S2Point(v,-1,-u);default :return new S2Point(v,u,-1);}}  }
class C{  public boolean hasActiveProbe(){  for (  Mounted equip : getMisc()) {    if (equip.getType().hasFlag(MiscType.F_BAP) && !(equip.getType().getInternalName().equals(Sensor.ISIMPROVED) || equip.getType().getInternalName().equals(Sensor.CLIMPROVED))) {      return true;    }  }  return false;}  }
class C{  public boolean onSwipedAway(boolean toRight){  return false;}  }
class C{  void multiply(MutableBigInteger y,MutableBigInteger z){  int xLen=intLen;  int yLen=y.intLen;  int newLen=xLen + yLen;  if (z.value.length < newLen)   z.value=new int[newLen];  z.offset=0;  z.intLen=newLen;  long carry=0;  for (int j=yLen - 1, k=yLen + xLen - 1; j >= 0; j--, k--) {    long product=(y.value[j + y.offset] & LONG_MASK) * (value[xLen - 1 + offset] & LONG_MASK) + carry;    z.value[k]=(int)product;    carry=product >>> 32;  }  z.value[xLen - 1]=(int)carry;  for (int i=xLen - 2; i >= 0; i--) {    carry=0;    for (int j=yLen - 1, k=yLen + i; j >= 0; j--, k--) {      long product=(y.value[j + y.offset] & LONG_MASK) * (value[i + offset] & LONG_MASK) + (z.value[k] & LONG_MASK) + carry;      z.value[k]=(int)product;      carry=product >>> 32;    }    z.value[i]=(int)carry;  }  z.normalize();}  }
class C{  public ServiceUnavailableException(String message,Response response){  super(HttpStatus.SERVICE_UNAVAILABLE,message,response);}  }
class C{  public boolean validSystemNameConfig(String systemName){  return (true);}  }
class C{  public boolean userCanViewGroup(int connectedUserId,String entidad) throws Exception {  boolean can=false;  try {    can=hasUserGroupAuth(connectedUserId,USER_ACTION_ID_VIEW,Defs.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  public static int computeEnumSizeNoTag(final int value){  return computeRawVarint32Size(value);}  }
class C{  public static PatternFilterExpr filter(String eventTypeName){  return new PatternFilterExpr(Filter.create(eventTypeName));}  }
class C{  public GeoTimeSerie(long lastbucket,int bucketcount,long bucketspan,int sizehint){  this.lastbucket=lastbucket;  this.bucketcount=bucketcount;  this.bucketspan=bucketspan;  this.sizehint=sizehint;}  }
class C{  public <C>void putComponent(String s,C component){  mComponentMap.put(s,component);}  }
class C{  protected List<ACLEntry> doUpdateACLs(URI id,ACLAssignmentChanges aclChanges){  ACLAssignments response=client.put(ACLAssignments.class,aclChanges,getAclUrl(),id);  return defaultList(response.getAssignments());}  }
class C{  public JSONArray put(int index,Map<?,?> value) throws JSONException {  this.put(index,new JSONObject(value));  return this;}  }
class C{  public NodeList nodelist() throws javax.xml.transform.TransformerException {  error(XPATHErrorResources.ER_CANT_CONVERT_TO_NODELIST,new Object[]{getTypeString()});  return null;}  }
class C{  @Override public void computeStaticRoots(TraceLocal trace){  ScanStatics.scanStatics(trace);}  }
class C{  private void logFailure(Throwable e){  ServiceUtils.logSevere(this,e);}  }
class C{  public void doScrollStateChange(AbsListView view,int scrollState){  mHandler.removeCallbacks(this);  mNewState=scrollState;  mHandler.postDelayed(this,SCROLL_CHANGE_DELAY);}  }
class C{  private void updateColors(Play play){  if (play.getPlayerCount() == 0) {    return;  }  if (!ResolverUtils.rowExists(resolver,Games.buildGameUri(play.gameId))) {    return;  }  List<ContentValues> values=new ArrayList<>();  for (  Player player : play.getPlayers()) {    String color=player.color;    if (!TextUtils.isEmpty(color)) {      ContentValues cv=new ContentValues();      cv.put(GameColors.COLOR,color);      values.add(cv);    }  }  if (values.size() > 0) {    ContentValues[] array={};    resolver.bulkInsert(Games.buildColorsUri(play.gameId),values.toArray(array));  }}  }
class C{  public BeanBoxDnDCatcher(DragSource ds,Component c){  this(ds,c,DnDConstants.ACTION_MOVE);}  }
class C{  public ServiceSchemeException(){  super();}  }
class C{  public static int appendGlobalInstructionComment(final SQLProvider provider,final INaviInstruction instruction,final String commentText,final Integer userId) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE01648: provider argument can not be null");  Preconditions.checkNotNull(instruction,"IE02040: instruction argument can not be null");  Preconditions.checkNotNull(commentText,"IE02041: commentText argument can not be null");  Preconditions.checkNotNull(userId,"IE02142: userId argument can not be null");  final CConnection connection=provider.getConnection();  final String function="{ ? = call append_global_instruction_comment(?, ?, ?, ?) }";  try {    final CallableStatement appendCommentFunction=connection.getConnection().prepareCall(function);    try {      appendCommentFunction.registerOutParameter(1,Types.INTEGER);      appendCommentFunction.setInt(2,instruction.getModule().getConfiguration().getId());      appendCommentFunction.setObject(3,instruction.getAddress().toBigInteger(),Types.BIGINT);      appendCommentFunction.setInt(4,userId);      appendCommentFunction.setString(5,commentText);      appendCommentFunction.execute();      final int commentId=appendCommentFunction.getInt(1);      if (appendCommentFunction.wasNull()) {        throw new CouldntSaveDataException("Error: Got an comment id of null from the database");      }      return commentId;    }  finally {      appendCommentFunction.close();    }  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.980 -0400",hash_original_method="65389FBCC8B0D4443CC183F594B0559D",hash_generated_method="87DA10DB5FCA1C7EADC80C693A617DDA") public void initialize() throws Exception {  rootEntry.refresh(rootEntry.getFile());  File[] files=listFiles(rootEntry.getFile());  FileEntry[] children=files.length > 0 ? new FileEntry[files.length] : FileEntry.EMPTY_ENTRIES;  for (int i=0; i < files.length; i++) {    children[i]=createFileEntry(rootEntry,files[i]);  }  rootEntry.setChildren(children);}  }
class C{  public void addItem(Comparable rowKey,Comparable columnKey,Number value){  this.dataset.addValue(value,rowKey,columnKey);}  }
class C{  @Override public void onTokenRefresh(){  Intent mIntent=new Intent(this,RegistrationIntentService.class);  startService(mIntent);}  }
class C{  public DSAPrivateKey(byte[] encoded) throws InvalidKeyException {  clearOldKey();  decode(encoded);}  }
class C{  public void moveToEnd(Instruction inst){  Iterator<GCIRMapElement> iter=list.iterator();  while (iter.hasNext()) {    GCIRMapElement newPtr=iter.next();    if (newPtr.getInstruction() == inst) {      iter.remove();      list.add(newPtr);      return;    }  }  throw new OptimizingCompilerException("GCIRMap.moveToEnd(" + inst + ") did not delete instruction from GC Map ");}  }
class C{  public OutputParams outputParams(){  return mOutputParams;}  }
class C{  public static void cancel(String flowName){  Flow flow=sFlowMap.get(flowName);  if (flow != null) {    flow.cancel();  }}  }
class C{  @Override public void send(HandshakeIODataStream out){  out.writeUint8(certificate_types.length);  for (int i=0; i < certificate_types.length; i++) {    out.write(certificate_types[i]);  }  int authoritiesLength=0;  for (int i=0; i < certificate_authorities.length; i++) {    authoritiesLength+=encoded_principals[i].length + 2;  }  out.writeUint16(authoritiesLength);  for (int i=0; i < certificate_authorities.length; i++) {    out.writeUint16(encoded_principals[i].length);    out.write(encoded_principals[i]);  }}  }
class C{  static boolean compareThrowable(Throwable t,String expectedThrowable){  StringTokenizer tokenizer=new StringTokenizer(expectedThrowable,";");  String token=null;  try {    while (tokenizer.hasMoreTokens()) {      token=tokenizer.nextToken();      if (!token.equals("*")) {        if (!Class.forName(token).isInstance(t)) {          return false;        }      } else {        token=tokenizer.nextToken();        while (!Class.forName(token).isInstance(t)) {          t=t.getCause();          if (t == null) {            return false;          }        }      }      t=t.getCause();    }  } catch (  ClassNotFoundException cnfe) {    String msg="Expected throwable class(es) " + expectedThrowable + " cannot be located";    System.out.println(msg);    throw new IllegalArgumentException(msg);  }  return true;}  }
class C{  private void checkAndEnableSaveButton(){  boolean enabled=true;  enabled&=txt_PubCert.getDocument().getLength() > MIN_CERT_LENGTH;  bt_save.setEnabled(enabled);}  }
class C{  public void cfgNamespace(ConfigurationValue cfgval,List<String> args) throws ConfigurationException {  if (args == null) {    throw new ConfigurationException.CannotOpen(null,cfgval.getVar(),cfgval.getSource(),cfgval.getLine());  }  if (args.size() < 2) {    throw new ConfigurationException.NamespaceMissingManifest("namespace",cfgval.getSource(),cfgval.getLine());  }  PathResolver resolver=ThreadLocalToolkit.getPathResolver();  assert resolver != null && configResolver != null : "Path resolvers must be set before calling this method.";  if (resolver == null || configResolver == null) {    throw new ConfigurationException.CannotOpen(null,cfgval.getVar(),cfgval.getSource(),cfgval.getLine());  }  String uri=null;  Iterator<String> iterator=args.iterator();  while (iterator.hasNext()) {    if (uri == null) {      uri=iterator.next();    } else {      String manifest=iterator.next();      VirtualFile file=ConfigurationPathResolver.getVirtualFile(manifest,configResolver,cfgval);      if (manifestMappings == null)       manifestMappings=new LinkedHashMap<String,List<VirtualFile>>();      List<VirtualFile> files=manifestMappings.get(uri);      if (files == null)       files=new ArrayList<VirtualFile>();      files.add(file);      manifestMappings.put(uri,files);    }  }}  }
class C{  public boolean isReadableInterval(Object object,Chronology chrono){  return false;}  }
class C{  public void captivePortalCheckCompleted(NetworkInfo info,boolean isCaptivePortal){  try {    mService.captivePortalCheckCompleted(info,isCaptivePortal);  } catch (  RemoteException e) {  }}  }
class C{  public void rollLookRight(){  if (DEBUG) {    Debug.output("Tilting right");  }  doLookZ(getRollRightAmount());}  }
class C{  public void writeRocs(File outDir,int truePositives,int falsePositives,int falseNegatives,int truePositivesRaw,boolean zip,boolean slope) throws IOException {  Diagnostic.developerLog("Writing ROC");  mBestFMeasure=0;  mBest=null;  final RocPoint unfiltered=new RocPoint(Double.NaN,truePositives,falsePositives,truePositivesRaw);  final int totalBaselineVariants=truePositives + falseNegatives;  final int totalCallVariants=truePositivesRaw + falsePositives;  for (  Map.Entry<RocFilter,SortedMap<Double,RocPoint>> entry : mRocs.entrySet()) {    final RocFilter filter=entry.getKey();    final SortedMap<Double,RocPoint> points=entry.getValue();    final File rocFile=FileUtils.getZippedFileName(zip,new File(outDir,mFilePrefix + filter.fileName()));    try (LineWriter os=new LineWriter(new OutputStreamWriter(FileUtils.createOutputStream(rocFile,zip)))){      final RocPoint cumulative=new RocPoint();      String prevScore=null;      final boolean extraMetrics=filter == RocFilter.ALL && totalBaselineVariants > 0;      rocHeader(os,totalBaselineVariants,totalCallVariants,extraMetrics);      for (      final Map.Entry<Double,RocPoint> me : points.entrySet()) {        final RocPoint point=me.getValue();        final String score=Utils.realFormat(point.mThreshold,SCORE_DP);        if (prevScore != null && score.compareTo(prevScore) != 0) {          writeRocLine(os,prevScore,totalBaselineVariants,cumulative,extraMetrics,filter == RocFilter.ALL);        }        prevScore=score;        cumulative.add(point);        cumulative.mThreshold=point.mThreshold;      }      if (prevScore != null) {        writeRocLine(os,prevScore,totalBaselineVariants,cumulative,extraMetrics,filter == RocFilter.ALL);      }      if (extraMetrics && (Math.abs(cumulative.mTruePositives - unfiltered.mTruePositives) > 0.001 || Math.abs(cumulative.mFalsePositives - unfiltered.mFalsePositives) > 0.001)) {        writeRocLine(os,"None",totalBaselineVariants,unfiltered,extraMetrics,false);      }    }     if (slope) {      produceSlopeFile(rocFile,zip);    }  }}  }
class C{  JsonEncoderImpl(Project project,Manager<ENTITY> manager){  this.getters=new LinkedHashMap<>();  this.project=requireNonNull(project);  this.manager=requireNonNull(manager);}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  static MethodHandle makeCollectArguments(MethodHandle target,MethodHandle collector,int collectArgPos,boolean retainOriginalArgs){  MethodType targetType=target.type();  MethodType collectorType=collector.type();  int collectArgCount=collectorType.parameterCount();  Class<?> collectValType=collectorType.returnType();  int collectValCount=(collectValType == void.class ? 0 : 1);  MethodType srcType=targetType.dropParameterTypes(collectArgPos,collectArgPos + collectValCount);  if (!retainOriginalArgs) {    srcType=srcType.insertParameterTypes(collectArgPos,collectorType.parameterList());  }  MethodType lambdaType=srcType.invokerType();  Name[] names=arguments(2,lambdaType);  final int collectNamePos=names.length - 2;  final int targetNamePos=names.length - 1;  Name[] collectorArgs=Arrays.copyOfRange(names,1 + collectArgPos,1 + collectArgPos + collectArgCount);  names[collectNamePos]=new Name(collector,(Object[])collectorArgs);  Name[] targetArgs=new Name[targetType.parameterCount()];  int inputArgPos=1;  int targetArgPos=0;  int chunk=collectArgPos;  System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);  inputArgPos+=chunk;  targetArgPos+=chunk;  if (collectValType != void.class) {    targetArgs[targetArgPos++]=names[collectNamePos];  }  chunk=collectArgCount;  if (retainOriginalArgs) {    System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);    targetArgPos+=chunk;  }  inputArgPos+=chunk;  chunk=targetArgs.length - targetArgPos;  System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);  assert (inputArgPos + chunk == collectNamePos);  names[targetNamePos]=new Name(target,(Object[])targetArgs);  LambdaForm form=new LambdaForm("collect",lambdaType.parameterCount(),names);  return SimpleMethodHandle.make(srcType,form);}  }
class C{  private Profile updateProfileInternal(Profile profile) throws BusinessException, JAXBException, IOException {  String id=profile.getId();  profile.setRevision(profile.getRevision() + 1);  Profile local=existingProfiles.replace(id,profile);  if (null == local) {    existingProfiles.remove(id);    throw new BusinessException("Update of the profile '" + profile.getName() + ".",ConfigurationInterfaceErrorCodeEnum.PROFILE_DOES_NOT_EXIST);  } else   if ((local != profile) && ((local.getRevision() + 1) != profile.getRevision())) {    existingProfiles.replace(id,local);    BusinessException e=new BusinessException("Update of the profile '" + profile.getName() + ".",ConfigurationInterfaceErrorCodeEnum.REVISION_CHECK_FAILED);    profile.setRevision(profile.getRevision() - 1);    throw e;  }  profile.setUpdatedDate(new Date());  saveProfile(profile);  if (!Objects.equals(profile.getName(),local.getName())) {    Files.deleteIfExists(pathResolver.getProfileFilePath(local));  }  publishProfileUpdateEvent(local,profile);  return profile;}  }
class C{  ZzFlexStreamInfo(java.io.Reader zzReader,int zzEndRead,int zzStartRead,int zzCurrentPos,int zzMarkedPos,char[] zzBuffer,boolean zzAtEOF,int yyline,int yycolumn){  this.zzReader=zzReader;  this.zzEndRead=zzEndRead;  this.zzStartRead=zzStartRead;  this.zzCurrentPos=zzCurrentPos;  this.zzMarkedPos=zzMarkedPos;  this.zzBuffer=zzBuffer;  this.zzAtEOF=zzAtEOF;  this.zzEOFDone=zzEOFDone;  this.yyline=yyline;  this.yycolumn=yycolumn;}  }
class C{  public ISchedulingRule refreshRule(IResource resource){  if (resource.getType() == IResource.ROOT)   return root;  return factoryFor(resource).refreshRule(resource);}  }
class C{  public String toString(){  return "(" + x + " "+ y+ " "+ z+ " "+ w+ ")";}  }
class C{  public ClassNotFoundException(){}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  protected boolean hasArgumentList(){  if (CompletionProposal.METHOD_NAME_REFERENCE == fProposal.getKind())   return false;  boolean noOverwrite=true ^ isToggleEating();  char[] completion=fProposal.getCompletion();  return !isInJavadoc() && completion.length > 0 && (noOverwrite || completion[completion.length - 1] == ')');}  }
class C{  public void mult(int factor){  for (int i=0; i < coeffs.length; i++) {    coeffs[i]*=factor;  }}  }
class C{  protected void createShapes(DrawContext dc){  this.paths=new Path[2];  Globe globe=dc.getGlobe();  Vec4 pt1=globe.computePointFromLocation(this.position1);  Vec4 pt2=globe.computePointFromLocation(this.position2);  Vec4 pt3=globe.computePointFromLocation(this.position3);  Vec4[] controlPoints=this.computeBezierControlPoints(dc,pt1,pt2,this.getNumControlPoints(),this.getCurvature());  int intervals=this.getIntervals();  List<Position> curvePositionsLeft=new ArrayList<Position>(intervals);  List<Position> curvePositionsRight=new ArrayList<Position>(intervals);  int[] coefficients=new int[controlPoints.length];  Vec4 projectedPt3=Line.nearestPointOnSegment(pt1,pt2,pt3);  Vec4 offsetPt=this.bezierNearestPointToSegment(projectedPt3,pt3,controlPoints,coefficients,0.01);  Vec4 offset=pt3.subtract3(offsetPt);  double delta=1.0 / intervals;  for (int i=0; i <= intervals; i++) {    double t=i * delta;    Vec4 p=TacticalGraphicUtil.bezierCurve(controlPoints,t,coefficients);    Vec4 ptLeft=p.add3(offset);    Vec4 ptRight=p.subtract3(offset);    curvePositionsLeft.add(globe.computePositionFromPoint(ptLeft));    curvePositionsRight.add(globe.computePositionFromPoint(ptRight));  }  this.paths[0]=this.createPath(curvePositionsLeft);  this.paths[1]=this.createPath(curvePositionsRight);}  }
class C{  public Vector multiply(Vector... others){  double newX=x, newY=y, newZ=z;  for (  Vector other : others) {    newX*=other.x;    newY*=other.y;    newZ*=other.z;  }  return new Vector(newX,newY,newZ);}  }
class C{  public LayerTree(Offset offset){  if (offset == null) {    String message=Logging.getMessage("nullValue.OffsetIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.initialize(null,offset);}  }
class C{  private void clearMessages(){  messages.clear();}  }
class C{  public AbstractOutputTarget(final Formatter formatter){  m_formatter=formatter;}  }
class C{  private void correctErrors(byte[] codewordBytes,int numDataCodewords) throws ChecksumException {  int numCodewords=codewordBytes.length;  int[] codewordsInts=new int[numCodewords];  for (int i=0; i < numCodewords; i++) {    codewordsInts[i]=codewordBytes[i] & 0xFF;  }  int numECCodewords=codewordBytes.length - numDataCodewords;  try {    rsDecoder.decode(codewordsInts,numECCodewords);  } catch (  ReedSolomonException rse) {    throw ChecksumException.getChecksumInstance();  }  for (int i=0; i < numDataCodewords; i++) {    codewordBytes[i]=(byte)codewordsInts[i];  }}  }
class C{  private boolean isSet(int position){  return (position < bitString.length) && bitString[position];}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:42.294 -0500",hash_original_method="AC9CA52F95EEC7D238B5030F9E805DDC",hash_generated_method="2D7D3192756557AF7021EA15D326E0EE") private static String optimizedPathFor(File path,File optimizedDirectory){  String fileName=path.getName();  if (!fileName.endsWith(DEX_SUFFIX)) {    int lastDot=fileName.lastIndexOf(".");    if (lastDot < 0) {      fileName+=DEX_SUFFIX;    } else {      StringBuilder sb=new StringBuilder(lastDot + 4);      sb.append(fileName,0,lastDot);      sb.append(DEX_SUFFIX);      fileName=sb.toString();    }  }  File result=new File(optimizedDirectory,fileName);  return result.getPath();}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;    framingRect=null;    framingRectInPreview=null;  }}  }
class C{  protected void validateLunUniqueId(java.lang.String[] param){}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case StextPackage.GUARD__EXPRESSION:    return basicSetExpression(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean cgModifyStep(URI rpSystemId,List<VolumeDescriptor> volumeDescriptors,CGRequestParams cgParams,String token) throws InternalException {  try {    List<VolumeDescriptor> existingProtectedSourceVolumeDescriptors=VolumeDescriptor.filterByType(volumeDescriptors,new VolumeDescriptor.Type[]{VolumeDescriptor.Type.RP_EXISTING_PROTECTED_SOURCE},new VolumeDescriptor.Type[]{});    WorkflowStepCompleter.stepExecuting(token);    _log.info("Modify CG step executing");    ProtectionSystem rpSystem=_dbClient.queryObject(ProtectionSystem.class,rpSystemId);    if (!existingProtectedSourceVolumeDescriptors.isEmpty()) {      VolumeDescriptor descriptor=existingProtectedSourceVolumeDescriptors.get(0);      Volume sourceVolume=_dbClient.queryObject(Volume.class,descriptor.getVolumeURI());      URI newVpoolURI=(URI)descriptor.getParameters().get(VolumeDescriptor.PARAM_VPOOL_CHANGE_NEW_VPOOL_ID);      URI oldVPoolURI=(URI)descriptor.getParameters().get(VolumeDescriptor.PARAM_VPOOL_CHANGE_OLD_VPOOL_ID);      VirtualPool newVpool=_dbClient.queryObject(VirtualPool.class,newVpoolURI);      VirtualPool oldVpool=_dbClient.queryObject(VirtualPool.class,oldVPoolURI);      if (VirtualPool.vPoolSpecifiesRPVPlex(oldVpool) && !VirtualPool.vPoolSpecifiesMetroPoint(oldVpool) && VirtualPool.vPoolSpecifiesMetroPoint(newVpool)) {        upgradeRPVPlexToMetroPoint(sourceVolume,newVpool,oldVpool,rpSystem);      }      ProtectionSet protectionSet=_dbClient.queryObject(ProtectionSet.class,sourceVolume.getProtectionSet());      updateProtectionSet(protectionSet,cgParams);    }    _log.info("Collecting RP statistics post CG update.");    collectRPStatistics(rpSystem);    _log.info("Modify CG step completed");    WorkflowStepCompleter.stepSucceded(token);  } catch (  Exception e) {    _log.error("Failed modifying cg: " + e.getStackTrace());    doFailCgModifyStep(volumeDescriptors,cgParams,rpSystemId,token,e);    return false;  }  return true;}  }
class C{  public static void ff_er_add_slice(MpegEncContext s,int startx,int starty,int endx,int endy,int status){  int start_i=H264DSPContext.av_clip(startx + starty * s.mb_width,0,s.mb_num - 1);  int end_i=H264DSPContext.av_clip(endx + endy * s.mb_width,0,s.mb_num);  int start_xy=s.mb_index2xy[start_i];  int end_xy=s.mb_index2xy[end_i];  int mask=-1;  if (start_i > end_i || start_xy > end_xy) {    return;  }  if (0 == s.error_recognition)   return;  mask&=~MpegEncContext.VP_START;  if (0 != (status & (MpegEncContext.AC_ERROR | MpegEncContext.AC_END))) {    mask&=~(MpegEncContext.AC_ERROR | MpegEncContext.AC_END);    s.error_count-=end_i - start_i + 1;  }  if (0 != (status & (MpegEncContext.DC_ERROR | MpegEncContext.DC_END))) {    mask&=~(MpegEncContext.DC_ERROR | MpegEncContext.DC_END);    s.error_count-=end_i - start_i + 1;  }  if (0 != (status & (MpegEncContext.MV_ERROR | MpegEncContext.MV_END))) {    mask&=~(MpegEncContext.MV_ERROR | MpegEncContext.MV_END);    s.error_count-=end_i - start_i + 1;  }  if (0 != (status & (MpegEncContext.AC_ERROR | MpegEncContext.DC_ERROR | MpegEncContext.MV_ERROR)))   s.error_count=Integer.MAX_VALUE;  if (mask == ~0x7F) {    Arrays.fill(s.error_status_table,start_xy,end_xy,0);  } else {    int i;    for (i=start_xy; i < end_xy; i++) {      s.error_status_table[i]&=mask;    }  }  if (end_i == s.mb_num)   s.error_count=Integer.MAX_VALUE; else {    s.error_status_table[end_xy]&=mask;    s.error_status_table[end_xy]|=status;  }  s.error_status_table[start_xy]|=MpegEncContext.VP_START;  if (start_xy > 0 && skip_top * s.mb_width < start_i) {    int prev_status=s.error_status_table[s.mb_index2xy[start_i - 1]];    prev_status&=~MpegEncContext.VP_START;    if (prev_status != (MpegEncContext.MV_END | MpegEncContext.DC_END | MpegEncContext.AC_END))     s.error_count=Integer.MAX_VALUE;  }}  }
class C{  public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize){  return new ScheduledThreadPoolExecutor(corePoolSize);}  }
class C{  protected void finalize(){  close();}  }
class C{  protected void sendAJAXResponse(final String response){  try {    final HttpServletResponse httpResponse=ServletActionContext.getResponse();    final Writer httpResponseWriter=httpResponse.getWriter();    IOUtils.write(response,httpResponseWriter);    IOUtils.closeQuietly(httpResponseWriter);  } catch (  final IOException e) {    LOG.error("Error occurred while processing Ajax response",e);  }}  }
class C{  public void readData(DataInput din) throws IOException {  reference=din.readUnsignedShort();  andMask=din.readUnsignedShort();  orMask=din.readUnsignedShort();}  }
class C{  public static IntStream of(int... values){  return java8.util.J8Arrays.stream(values);}  }
class C{  private void processNamelessParameters(ICalParameters parameters,String propertyName,ICalVersion version,int lineNumber){  List<String> namelessParamValues=parameters.removeAll(null);  if (namelessParamValues.isEmpty()) {    return;  }  if (version != ICalVersion.V1_0) {    warnings.add(lineNumber,propertyName,4,namelessParamValues);  }  for (  String paramValue : namelessParamValues) {    String paramName=guessParameterName(paramValue);    parameters.put(paramName,paramValue);  }}  }
class C{  public final void push(int value){  int ff=m_firstFree;  if ((ff + 1) >= m_mapSize) {    if (null == m_map) {      m_map=new int[m_blocksize];      m_mapSize=m_blocksize;    } else {      m_mapSize+=m_blocksize;      int newMap[]=new int[m_mapSize];      System.arraycopy(m_map,0,newMap,0,ff + 1);      m_map=newMap;    }  }  m_map[ff]=value;  ff++;  m_firstFree=ff;}  }
class C{  @Override public boolean isLeaf(String id){  return toolTipInfos.get(id) != null;}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.815 -0400",hash_original_method="05A90D0FB660BAF10AD4D61031A72FD9",hash_generated_method="4BBF2732884EE85DD846B0E6BB60AB12") @Override public int read(byte[] bytes,int offset,int length) throws IOException {  if (eof) {    throw new IOException("Read after end of file");  }  if (position == size) {    return doEndOfFile();  }  position+=length;  int returnLength=length;  if (position > size) {    returnLength=length - (int)(position - size);    position=size;  }  processBytes(bytes,offset,returnLength);  return returnLength;}  }
class C{  public final boolean print_dependencies(){  return (getFlags() & F_PRINT_DEPENDENCIES) != 0;}  }
class C{  public static void f(String tag,String msg,Object... args){  if (sLevel > LEVEL_FATAL) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.wtf(tag,msg);}  }
class C{  public CustomerRenderer(){  icocustomer=new ImageIcon(getClass().getClassLoader().getResource("uk/chromis/images/customer_sml.png"));}  }
class C{  public void bindFieldValues(Map<String,String> fieldValues){  for (  Entry<String,ZapTextField> f : textFields.entrySet()) {    if (fieldValues.containsKey(f.getKey()))     f.getValue().setText(fieldValues.get(f.getKey())); else     f.getValue().setText("");  }}  }
class C{  public boolean more(){  return pos < in.length();}  }
class C{  public <V>Object[] allMeta(){  Object[] cp;synchronized (this) {    cp=Arrays.copyOf(data,data.length);  }  return cp;}  }
class C{  public boolean unregisterUpnSuffix(String tenantName,String domainName,String upnSuffix) throws Exception {  return getService().unregisterUpnSuffix(tenantName,domainName,upnSuffix,this.getServiceContext());}  }
class C{  public boolean retainAll(double[] array){  Arrays.sort(array);  double[] set=_set;  byte[] states=_states;  boolean changed=false;  for (int i=set.length; i-- > 0; ) {    if (states[i] == FULL && Arrays.binarySearch(array,set[i]) < 0) {      remove(set[i]);      changed=true;    }  }  return changed;}  }
class C{  public boolean isOfClass(final String clazz){  return getItemClass().equals(clazz);}  }
class C{  public boolean removeMiddleOfLastThree(){  if (!hasThree())   return false;  int pos=points.size();  points.remove(pos - 2);  return true;}  }
class C{  public void dispatch(NamingListener listener){  listener.namingExceptionThrown(this);}  }
class C{  public void showMissing(boolean missing){  this.missing=missing;}  }
class C{  protected void nextUpElement(){  int editingColumn=getActiveColumn();  int editingRow=getActiveRow();  int nextRow=editingRow - 1;  if (editingRow == -1) {    return;  }  if (editingColumn == -1) {    editingColumn=0;  }  if (nextRow == -1) {    nextRow=impl.getRowCount() - 1;  }  moveToStart(nextRow,editingColumn);}  }
class C{  public PaymentInformationException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public synchronized void clear(){  super.clear();  mValue.clear();  initRange();}  }
class C{  public SizeAction(){  super(SIZE_CMD);}  }
class C{  public void match(int open,int close) throws IOException {  int depth=1;  while (true) {    scan();    if (token == open) {      depth++;    } else     if (token == close) {      if (--depth == 0) {        return;      }    } else     if (token == EOF) {      env.error(pos,"unbalanced.paren");      return;    }  }}  }
class C{  public void showDialog(){  view.show();}  }
class C{  public ASTNode generateAST(String query) throws ParseException {  ParseDriver pd=new ParseDriver();  return pd.parse(query);}  }
class C{  public String toString(){  StringBuffer text=new StringBuffer();  text.append("ML ARAM classifier");  return text.toString();}  }
class C{  void loadCurrent(){synchronized (sync) {    baseRow=baseCursor.getSearchRow();    deltaRow=deltaCursor.get();    needNewDelta=false;    needNewBase=false;  }}  }
class C{  protected byte[] engineWrap(Key key) throws IllegalBlockSizeException, InvalidKeyException {  return core.wrap(key);}  }
class C{  @Override public String toString(){  return getValueAsString();}  }
class C{  public static void performUpgradeTasksAfterDatabaseLoading(String oldVersion){  MovieList movieList=MovieList.getInstance();  TvShowList tvShowList=TvShowList.getInstance();  String v="" + oldVersion;  if (StringUtils.isBlank(v)) {    v="2.6.9";  }  if (StrgUtils.compareVersion(v,"2.7") < 0) {    LOGGER.info("Performing database upgrade tasks to version 2.7");    FileUtils.deleteQuietly(new File("tmm.odb"));    FileUtils.deleteQuietly(new File("tmm.odb$"));    FileUtils.deleteQuietly(new File("objectdb.conf"));    FileUtils.deleteQuietly(new File("log"));    Globals.settings.removeSubtitleFileType(".idx");    if (ReleaseInfo.isReleaseBuild()) {      MovieModuleManager.MOVIE_SETTINGS.setImageBanner(true);      MovieModuleManager.MOVIE_SETTINGS.setImageLogo(true);      MovieModuleManager.MOVIE_SETTINGS.setImageClearart(true);      MovieModuleManager.MOVIE_SETTINGS.setImageDiscart(true);      MovieModuleManager.MOVIE_SETTINGS.setImageThumb(true);      MovieModuleManager.MOVIE_SETTINGS.setUseTrailerPreference(true);      Globals.settings.writeDefaultSettings();    }  }  if (StrgUtils.compareVersion(v,"2.7.2") < 0) {    LOGGER.info("Performing database upgrade tasks to version 2.7.2");    for (    Movie movie : movieList.getMovies()) {      boolean dirty=false;      for (      MovieActor actor : movie.getActors()) {        if (StringUtils.isNotBlank(actor.getThumbPath())) {          if (actor.updateThumbRoot(movie.getPath())) {            dirty=true;          }        }      }      if (dirty) {        movie.saveToDb();      }    }  }  if (StrgUtils.compareVersion(v,"2.7.3") < 0) {    LOGGER.info("Performing database upgrade tasks to version 2.7.3");    for (    MovieSet movieSet : movieList.getMovieSetList()) {      MovieSetArtworkHelper.updateArtwork(movieSet);      movieSet.saveToDb();    }    for (    Movie movie : movieList.getMovies()) {      movie.setNewlyAdded(false);      movie.saveToDb();    }    for (    TvShow tvShow : tvShowList.getTvShows()) {      for (      TvShowEpisode episode : tvShow.getEpisodes()) {        episode.setNewlyAdded(false);        episode.saveToDb();      }      tvShow.saveToDb();    }  }  if (StrgUtils.compareVersion(v,"2.8") < 0) {    LOGGER.info("Performing database upgrade tasks to version 2.8");    if (MovieModuleManager.MOVIE_SETTINGS.getMovieConnector() == MovieConnectors.MP) {      MovieModuleManager.MOVIE_SETTINGS.setMovieCertificationStyle(CertificationStyle.TECHNICAL);    }    for (    Movie movie : movieList.getMovies()) {      movie.reEvaluateStacking();      boolean isOffline=false;      for (      MediaFile mf : movie.getMediaFiles(MediaFileType.VIDEO)) {        if ("disc".equalsIgnoreCase(mf.getExtension())) {          isOffline=true;        }      }      movie.setOffline(isOffline);      movie.saveToDb();    }  }  if (StrgUtils.compareVersion(v,"2.8.2") < 0) {    LOGGER.info("Performing database upgrade tasks to version 2.8.2");    Date initialDate=new Date(0);    for (    Movie movie : movieList.getMovies()) {      if (movie.getReleaseDate() != null && DateUtils.isSameDay(initialDate,movie.getReleaseDate())) {        movie.setReleaseDate((Date)null);        movie.saveToDb();      }    }    for (    TvShow tvShow : tvShowList.getTvShows()) {      if (tvShow.getFirstAired() != null && DateUtils.isSameDay(initialDate,tvShow.getFirstAired())) {        tvShow.setFirstAired((Date)null);        tvShow.saveToDb();      }      for (      TvShowEpisode episode : tvShow.getEpisodes()) {        if (episode.getFirstAired() != null && DateUtils.isSameDay(initialDate,episode.getFirstAired())) {          episode.setFirstAired((Date)null);          episode.saveToDb();        }      }    }  }  if (StrgUtils.compareVersion(v,"2.8.3") < 0) {    LOGGER.info("Performing database upgrade tasks to version 2.8.3");    for (    Movie movie : movieList.getMovies()) {      boolean changed=false;      for (      MediaFile mf : movie.getMediaFiles(MediaFileType.VIDEO)) {        if (mf.getVideoResolution().isEmpty()) {          mf.setContainerFormat("");          changed=true;        }      }      if (changed) {        movie.saveToDb();      }    }    for (    TvShow tvShow : tvShowList.getTvShows()) {      for (      TvShowEpisode episode : tvShow.getEpisodes()) {        boolean changed=false;        for (        MediaFile mf : episode.getMediaFiles(MediaFileType.VIDEO)) {          if (mf.getVideoResolution().isEmpty()) {            mf.setContainerFormat("");            changed=true;          }        }        if (episode.isDisc()) {          Path discRoot=episode.getPathNIO().toAbsolutePath();          String folder=tvShow.getPathNIO().relativize(discRoot).toString().toUpperCase();          while (folder.contains("BDMV") || folder.contains("VIDEO_TS")) {            discRoot=discRoot.getParent();            folder=tvShow.getPathNIO().relativize(discRoot).toString().toUpperCase();            episode.setPath(discRoot.toAbsolutePath().toString());            changed=true;          }        }        if (changed) {          episode.saveToDb();        }      }    }  }  if (StrgUtils.compareVersion(v,"2.9") < 0) {    LOGGER.info("Performing database upgrade tasks to version 2.9");    for (    Movie movie : movieList.getMovies()) {      boolean changed=false;      for (      MovieActor a : movie.getActors()) {        if (a.getEntityRoot().isEmpty()) {          a.setEntityRoot(movie.getPathNIO().toString());          a.setThumbPath("");          changed=true;        }      }      for (      MovieProducer a : movie.getProducers()) {        if (a.getEntityRoot().isEmpty()) {          a.setEntityRoot(movie.getPathNIO().toString());          a.setThumbPath("");          changed=true;        }      }      if (movie.getMovieSet() != null) {        movie.setSortTitle("");        changed=true;      }      if (movie.getMediaSource() == MediaSource.UNKNOWN) {        MediaFile source=movie.getMediaFiles(MediaFileType.VIDEO).get(0);        MediaSource ms=MediaSource.parseMediaSource(source.getPath());        if (movie.getMediaSource() != ms) {          movie.setMediaSource(ms);          changed=true;        }      }      if (changed) {        movie.saveToDb();      }    }    for (    TvShow tvShow : tvShowList.getTvShows()) {      boolean changed=false;      for (      TvShowActor a : tvShow.getActors()) {        if (a.getEntityRoot().isEmpty()) {          a.setEntityRoot(tvShow.getPathNIO().toString());          a.setThumbUrl(a.getThumb());          a.setThumbPath("");          a.setThumb("");          changed=true;        }      }      for (      TvShowEpisode episode : tvShow.getEpisodes()) {        for (        TvShowActor a : episode.getActors()) {          if (a.getEntityRoot().isEmpty()) {            a.setEntityRoot(episode.getPathNIO().toString());            a.setThumbUrl(a.getThumb());            a.setThumbPath("");            a.setThumb("");            changed=true;          }        }      }      if (changed) {        tvShow.saveToDb();      }    }  }}  }
class C{  public int next(){  if (text == null) {    return NULLORDER;  }  NormalizerBase.Mode textMode=text.getMode();  NormalizerBase.Mode ownerMode=CollatorUtilities.toNormalizerMode(owner.getDecomposition());  if (textMode != ownerMode) {    text.setMode(ownerMode);  }  if (buffer != null) {    if (expIndex < buffer.length) {      return strengthOrder(buffer[expIndex++]);    } else {      buffer=null;      expIndex=0;    }  } else   if (swapOrder != 0) {    if (Character.isSupplementaryCodePoint(swapOrder)) {      char[] chars=Character.toChars(swapOrder);      swapOrder=chars[1];      return chars[0] << 16;    }    int order=swapOrder << 16;    swapOrder=0;    return order;  }  int ch=text.next();  if (ch == NormalizerBase.DONE) {    return NULLORDER;  }  int value=ordering.getUnicodeOrder(ch);  if (value == RuleBasedCollator.UNMAPPED) {    swapOrder=ch;    return UNMAPPEDCHARVALUE;  } else   if (value >= RuleBasedCollator.CONTRACTCHARINDEX) {    value=nextContractChar(ch);  }  if (value >= RuleBasedCollator.EXPANDCHARINDEX) {    buffer=ordering.getExpandValueList(value);    expIndex=0;    value=buffer[expIndex++];  }  if (ordering.isSEAsianSwapping()) {    int consonant;    if (isThaiPreVowel(ch)) {      consonant=text.next();      if (isThaiBaseConsonant(consonant)) {        buffer=makeReorderedBuffer(consonant,value,buffer,true);        value=buffer[0];        expIndex=1;      } else       if (consonant != NormalizerBase.DONE) {        text.previous();      }    }    if (isLaoPreVowel(ch)) {      consonant=text.next();      if (isLaoBaseConsonant(consonant)) {        buffer=makeReorderedBuffer(consonant,value,buffer,true);        value=buffer[0];        expIndex=1;      } else       if (consonant != NormalizerBase.DONE) {        text.previous();      }    }  }  return strengthOrder(value);}  }
class C{  private boolean closeInternal(ErrorCode errorCode){  assert (!Thread.holdsLock(this));synchronized (this) {    if (this.errorCode != null) {      return false;    }    if (source.finished && sink.finished) {      return false;    }    this.errorCode=errorCode;    notifyAll();  }  connection.removeStream(id);  return true;}  }
class C{  public boolean isGroupFileTransferSupported() throws RcsGenericException {  try {    return mIFtServiceConfig.isGroupFileTransferSupported();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  public InlineQueryResultMpeg4Gif.InlineQueryResultMpeg4GifBuilder inputMessageContent(InputMessageContent inputMessageContent){  this.input_message_content=inputMessageContent;  return this;}  }
class C{  public static String nullSafeToString(int[] array){  if (array == null) {    return NULL_STRING;  }  int length=array.length;  if (length == 0) {    return EMPTY_ARRAY;  }  StringBuffer buffer=new StringBuffer();  for (int i=0; i < length; i++) {    if (i == 0) {      buffer.append(ARRAY_START);    } else {      buffer.append(ARRAY_ELEMENT_SEPARATOR);    }    buffer.append(array[i]);  }  buffer.append(ARRAY_END);  return buffer.toString();}  }
class C{  public void onBackPressed(){  if (!mFragments.popBackStackImmediate()) {    finish();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:01.673 -0500",hash_original_method="9D80C9082F91CAFA08705A591CB3B142",hash_generated_method="848B59499902E7D28738BE65161277AE") public static String guessUrl(String inUrl){  String retVal=inUrl;  WebAddress webAddress;  if (DebugFlags.URL_UTIL)   Log.v(LOGTAG,"guessURL before queueRequest: " + inUrl);  if (inUrl.length() == 0)   return inUrl;  if (inUrl.startsWith("about:"))   return inUrl;  if (inUrl.startsWith("data:"))   return inUrl;  if (inUrl.startsWith("file:"))   return inUrl;  if (inUrl.startsWith("javascript:"))   return inUrl;  if (inUrl.endsWith(".") == true) {    inUrl=inUrl.substring(0,inUrl.length() - 1);  }  try {    webAddress=new WebAddress(inUrl);  } catch (  ParseException ex) {    if (DebugFlags.URL_UTIL) {      Log.v(LOGTAG,"smartUrlFilter: failed to parse url = " + inUrl);    }    return retVal;  }  if (webAddress.getHost().indexOf('.') == -1) {    webAddress.setHost("www." + webAddress.getHost() + ".com");  }  return webAddress.toString();}  }
class C{  public C lowerEndpoint(){  return lowerBound.endpoint();}  }
class C{  public void reduce(Text key,Iterator<Route> values,OutputCollector<Text,LoopSet> output,Reporter reporter) throws IOException {  LoopSet loops=new LoopSet();  while (values.hasNext()) {    Route route=values.next();    loops.getLoopSet().add(route.getOutlinkUrl());  }  output.collect(key,loops);}  }
class C{  public void test_niceErrors(){  final BTree btree=BTree.createTransient(new IndexMetadata(UUID.randomUUID()));  try {    btree.handleCommit(System.currentTimeMillis());  } catch (  UnsupportedOperationException ex) {    if (log.isInfoEnabled())     log.info("Ignoring expected exception: " + ex);  }  try {    btree.writeCheckpoint();  } catch (  UnsupportedOperationException ex) {    if (log.isInfoEnabled())     log.info("Ignoring expected exception: " + ex);  }}  }
class C{  public ServerRefusedConnectionException(DistributedMember server,String msg){  super(server + " refused connection: " + msg);}  }
class C{  public void fillAssignedKeys(Set<String> keys){  keys.clear();}  }
class C{  public static String[] init(String[] args,String applicationName) throws IOException {  String baseUrl=null;  int argsIndex=0;  while (argsIndex < args.length && args[argsIndex].startsWith("-")) {    String arg=args[argsIndex];    argsIndex++;    if (argsIndex >= args.length) {      throw new IllegalArgumentException("Expected a parameter value " + "after " + arg);    }    String value=args[argsIndex];    argsIndex++;    if ("--url".equals(arg)) {      baseUrl=value;    } else     if ("--key".equals(arg)) {    } else {      throw new IllegalArgumentException("unknown parameter: " + arg);    }  }  if (baseUrl != null) {    urlFactory=new FeedURLFactory(baseUrl);  }  service=new GoogleBaseService(applicationName);  if (argsIndex > 0) {    String[] newargs=new String[args.length - argsIndex];    System.arraycopy(args,argsIndex,newargs,0,newargs.length);    args=newargs;  }  return args;}  }
class C{  private int pointToInt(int i,int j){  int ret=((j - 1) * (widthChars + 1)) + (i - 1);  return ret;}  }
class C{  public XMLString substring(int beginIndex,int endIndex){  int len=endIndex - beginIndex;  if (len > m_length)   len=m_length;  if (len <= 0)   return XString.EMPTYSTRING; else {    int start=m_start + beginIndex;    return new XStringForFSB(fsb(),start,len);  }}  }
class C{  private static void purgeUnserializable(Collection<?> objects){  logger.trace("purgeUnserializable","starts");  ObjectOutputStream oos=null;  int i=0;  for (Iterator<?> it=objects.iterator(); it.hasNext(); i++) {    Object v=it.next();    if (v == null || v instanceof String) {      if (logger.traceOn()) {        logger.trace("purgeUnserializable","Value trivially serializable: " + v);      }      continue;    }    try {      if (oos == null)       oos=new ObjectOutputStream(new SinkOutputStream());      oos.writeObject(v);      if (logger.traceOn()) {        logger.trace("purgeUnserializable","Value serializable: " + v);      }    } catch (    IOException e) {      if (logger.traceOn()) {        logger.trace("purgeUnserializable","Value not serializable: " + v + ": "+ e);      }      it.remove();      oos=null;    }  }}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzBufferArrayL=zzBufferArray;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++)); else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 106:{        yybegin(IN_DOLLAR_SLASH_REGEX);        gStringStack.push(GroovyTokenTypes.mDOLLAR);        return GroovyTokenTypes.mDOLLAR_SLASH_REGEX_BEGIN;      }case 175:    break;case 165:{    return (GroovyTokenTypes.kABSTRACT);  }case 176:break;case 117:{return (GroovyTokenTypes.kDEF);}case 177:break;case 118:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mTRIPLE_DOT);}case 178:break;case 83:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mPLUS_ASSIGN);}case 179:break;case 50:{afterComment=YYINITIAL;return (TokenType.WHITE_SPACE);}case 180:break;case 166:{return (GroovyTokenTypes.kCONTINUE);}case 181:break;case 88:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mMEMBER_POINTER);}case 182:break;case 14:{yybegin(NLS_AFTER_LBRACE);braceCount.push(GroovyTokenTypes.mLCURLY);return (GroovyTokenTypes.mLCURLY);}case 183:break;case 24:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mLT);}case 184:break;case 5:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mSTAR);}case 185:break;case 84:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mDEC);}case 186:break;case 75:{return GroovyTokenTypes.mNUM_BIG_INT;}case 187:break;case 17:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mASSIGN);}case 188:break;case 125:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mSL_ASSIGN);}case 189:break;case 37:{yybegin(IN_TRIPLE_DOT);return GroovyTokenTypes.mIDENT;}case 190:break;case 167:{return (GroovyTokenTypes.kSTRICTFP);}case 191:break;case 142:{return (GroovyTokenTypes.kBREAK);}case 192:break;case 81:{return (GroovyTokenTypes.kDO);}case 193:break;case 49:{yypushback(1);if (blockStack.isEmpty()) {yybegin(YYINITIAL);} else {yybegin(IN_INNER_BLOCK);}}case 194:break;case 151:{return (GroovyTokenTypes.kDOUBLE);}case 195:break;case 42:{if (!gStringStack.isEmpty()) {gStringStack.pop();}if (blockStack.isEmpty()) {yybegin(YYINITIAL);} else {yybegin(IN_INNER_BLOCK);}return GroovyTokenTypes.mGSTRING_END;}case 196:break;case 4:{if (zzStartRead == 0 || zzBuffer.subSequence(0,zzStartRead).toString().trim().length() == 0) {yypushback(1);yybegin(WAIT_FOR_REGEX);} else {return (GroovyTokenTypes.mDIV);}}case 197:break;case 141:{return (GroovyTokenTypes.kFALSE);}case 198:break;case 146:{return (GroovyTokenTypes.kSHORT);}case 199:break;case 128:{return (GroovyTokenTypes.kLONG);}case 200:break;case 93:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mELVIS);}case 201:break;case 158:{return (GroovyTokenTypes.kNATIVE);}case 202:break;case 29:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mBOR);}case 203:break;case 124:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mCOMPARE_TO);}case 204:break;case 143:{return (GroovyTokenTypes.kCLASS);}case 205:break;case 150:{return (GroovyTokenTypes.kIMPORT);}case 206:break;case 27:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mMOD);}case 207:break;case 78:{return GroovyTokenTypes.mNUM_DOUBLE;}case 208:break;case 135:{return (GroovyTokenTypes.kTHIS);}case 209:break;case 168:{return (GroovyTokenTypes.kVOLATILE);}case 210:break;case 161:{return (GroovyTokenTypes.kEXTENDS);}case 211:break;case 147:{return (GroovyTokenTypes.kTRAIT);}case 212:break;case 87:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mRANGE_INCLUSIVE);}case 213:break;case 159:{return (GroovyTokenTypes.kFINALLY);}case 214:break;case 152:{return (GroovyTokenTypes.kPUBLIC);}case 215:break;case 21:{if (!braceCount.isEmpty() && GroovyTokenTypes.mLPAREN == braceCount.peek()) {braceCount.pop();}return (GroovyTokenTypes.mRBRACK);}case 216:break;case 149:{return (GroovyTokenTypes.kWHILE);}case 217:break;case 54:{blockStack.push(GroovyTokenTypes.mDIV);braceCount.push(GroovyTokenTypes.mLCURLY);yybegin(NLS_AFTER_LBRACE);return GroovyTokenTypes.mLCURLY;}case 218:break;case 65:{yypushback(1);yybegin(WAIT_FOR_REGEX);}case 219:break;case 122:{return (GroovyTokenTypes.kNEW);}case 220:break;case 38:{blockStack.push(GroovyTokenTypes.mLBRACK);braceCount.push(GroovyTokenTypes.mLCURLY);yybegin(NLS_AFTER_LBRACE);return GroovyTokenTypes.mLCURLY;}case 221:break;case 136:{return (GroovyTokenTypes.kNULL);}case 222:break;case 69:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mDIV_ASSIGN);}case 223:break;case 115:{return (GroovyTokenTypes.kFOR);}case 224:break;case 102:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mBAND_ASSIGN);}case 225:break;case 163:{return (GroovyTokenTypes.kPACKAGE);}case 226:break;case 101:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mLOR);}case 227:break;case 174:{return (GroovyTokenTypes.kSYNCHRONIZED);}case 228:break;case 105:zzMarkedPos=zzStartRead + 1;{yybegin(IN_TRIPLE_NLS);return GroovyTokenTypes.mDOT;}case 229:break;case 134:{return (GroovyTokenTypes.kTRUE);}case 230:break;case 9:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mPLUS);}case 231:break;case 90:{return GroovyTokenTypes.mGSTRING_LITERAL;}case 232:break;case 104:zzMarkedPos=zzStartRead + 1;{yybegin(IN_SINGLE_IDENT);return GroovyTokenTypes.mDOT;}case 233:break;case 145:{return (GroovyTokenTypes.kSUPER);}case 234:break;case 58:{yypushback(1);yybegin(IN_DOLLAR_SLASH_REGEX);}case 235:break;case 26:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mBNOT);}case 236:break;case 130:{return (GroovyTokenTypes.kENUM);}case 237:break;case 41:{yybegin(IN_SINGLE_GSTRING_DOLLAR);return GroovyTokenTypes.mDOLLAR;}case 238:break;case 144:{return (GroovyTokenTypes.kCATCH);}case 239:break;case 173:{return (GroovyTokenTypes.kINSTANCEOF);}case 240:break;case 51:{yybegin(IN_REGEX);gStringStack.push(GroovyTokenTypes.mDIV);return GroovyTokenTypes.mREGEX_BEGIN;}case 241:break;case 89:{if (zzStartRead == 0 || zzBuffer.subSequence(0,zzStartRead).toString().trim().length() == 0) {yypushback(2);yybegin(WAIT_FOR_REGEX);} else {yypushback(1);return (GroovyTokenTypes.mDOLLAR);}}case 242:break;case 72:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mSTAR_ASSIGN);}case 243:break;case 40:{clearStacks();yybegin(NLS_AFTER_NLS);afterComment=YYINITIAL;return GroovyTokenTypes.mNLS;}case 244:break;case 71:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mSPREAD_DOT);}case 245:break;case 23:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mCOMMA);}case 246:break;case 31:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mSEMI);}case 247:break;case 111:zzMarkedPos=zzStartRead + 1;{yybegin(IN_DOLLAR_SLASH_REGEX_IDENT);return GroovyTokenTypes.mDOT;}case 248:break;case 80:{return (GroovyTokenTypes.kIN);}case 249:break;case 113:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mSTAR_STAR_ASSIGN);}case 250:break;case 120:{yybegin(IN_TRIPLE_GSTRING);gStringStack.push(GroovyTokenTypes.mLBRACK);return GroovyTokenTypes.mGSTRING_BEGIN;}case 251:break;case 3:{return TokenType.WHITE_SPACE;}case 252:break;case 155:{return (GroovyTokenTypes.kSWITCH);}case 253:break;case 68:{return GroovyTokenTypes.mML_COMMENT;}case 254:break;case 33:{yypushback(1);yybegin(IN_SINGLE_GSTRING);}case 255:break;case 70:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mSTAR_STAR);}case 256:break;case 1:{return GroovyTokenTypes.mWRONG;}case 257:break;case 52:{yypushback(1);yybegin(IN_REGEX);}case 258:break;case 170:{return (GroovyTokenTypes.kPROTECTED);}case 259:break;case 64:{yypushback(1);yybegin(afterComment);}case 260:break;case 156:{return (GroovyTokenTypes.kTHROWS);}case 261:break;case 94:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mEQUAL);}case 262:break;case 103:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mLAND);}case 263:break;case 98:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mMOD_ASSIGN);}case 264:break;case 22:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mCOLON);}case 265:break;case 28:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mBXOR);}case 266:break;case 36:{yypushback(1);yybegin(IN_TRIPLE_GSTRING);}case 267:break;case 95:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mREGEX_FIND);}case 268:break;case 34:{yybegin(IN_SINGLE_DOT);return GroovyTokenTypes.mIDENT;}case 269:break;case 20:{yybegin(WAIT_FOR_REGEX);braceCount.push(GroovyTokenTypes.mLPAREN);return (GroovyTokenTypes.mLBRACK);}case 270:break;case 11:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mDOT);}case 271:break;case 160:{return (GroovyTokenTypes.kDEFAULT);}case 272:break;case 100:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mBOR_ASSIGN);}case 273:break;case 108:zzMarkedPos=zzStartRead + 1;{yybegin(IN_REGEX_IDENT);return GroovyTokenTypes.mDOT;}case 274:break;case 121:{return (GroovyTokenTypes.kTRY);}case 275:break;case 97:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mGE);}case 276:break;case 82:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mINC);}case 277:break;case 73:{return GroovyTokenTypes.mSH_COMMENT;}case 278:break;case 133:{return (GroovyTokenTypes.kCHAR);}case 279:break;case 74:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mNOT_EQUAL);}case 280:break;case 56:{if (!gStringStack.isEmpty()) {gStringStack.pop();}if (blockStack.isEmpty()) {yybegin(YYINITIAL);} else {yybegin(IN_INNER_BLOCK);}return GroovyTokenTypes.mREGEX_END;}case 281:break;case 19:{if (!braceCount.isEmpty() && GroovyTokenTypes.mLPAREN == braceCount.peek()) {braceCount.pop();}return (GroovyTokenTypes.mRPAREN);}case 282:break;case 7:{return GroovyTokenTypes.mIDENT;}case 283:break;case 48:{if (!blockStack.isEmpty()) {IElementType br=blockStack.pop();if (br.equals(GroovyTokenTypes.mLPAREN)) yybegin(IN_SINGLE_GSTRING);if (br.equals(GroovyTokenTypes.mLBRACK)) yybegin(IN_TRIPLE_GSTRING);if (br.equals(GroovyTokenTypes.mDIV)) yybegin(IN_REGEX);if (br.equals(GroovyTokenTypes.mDOLLAR)) yybegin(IN_DOLLAR_SLASH_REGEX);}while (!braceCount.isEmpty() && GroovyTokenTypes.mLCURLY != braceCount.peek()) {braceCount.pop();}if (!braceCount.isEmpty() && GroovyTokenTypes.mLCURLY == braceCount.peek()) {braceCount.pop();}return GroovyTokenTypes.mRCURLY;}case 284:break;case 12:{return GroovyTokenTypes.mSTRING_LITERAL;}case 285:break;case 32:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mAT);}case 286:break;case 43:{int zzFState=24;int zzFPos=zzStartRead;if (zzFin.length <= (zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())) {zzFin=new boolean[(zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length()) + 1];}boolean zzFinL[]=zzFin;while (zzFState != -1 && zzFPos < zzMarkedPos) {if ((zzAttrL[zzFState] & 1) == 1) {zzFinL[zzFPos]=true;}zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzFPos++] : zzBufferL.charAt(zzFPos++));zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];}if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) {zzFinL[zzFPos]=true;}zzFState=25;zzFPos=zzMarkedPos;while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {zzInput=(zzBufferArrayL != null ? zzBufferArrayL[--zzFPos] : zzBufferL.charAt(--zzFPos));zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];};zzMarkedPos=zzFPos;}{return GroovyTokenTypes.mGSTRING_CONTENT;}case 287:break;case 39:{return GroovyTokenTypes.mGSTRING_CONTENT;}case 288:break;case 92:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mOPTIONAL_DOT);}case 289:break;case 172:{return (GroovyTokenTypes.kIMPLEMENTS);}case 290:break;case 55:{return GroovyTokenTypes.mREGEX_CONTENT;}case 291:break;case 107:yypushback(1);{return GroovyTokenTypes.mREGEX_CONTENT;}case 292:break;case 45:{yypushback(1);yybegin(IN_TRIPLE_IDENT);}case 293:break;case 96:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mLE);}case 294:break;case 123:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mREGEX_MATCH);}case 295:break;case 44:{yybegin(IN_TRIPLE_GSTRING_DOLLAR);return GroovyTokenTypes.mDOLLAR;}case 296:break;case 137:{return (GroovyTokenTypes.kVOID);}case 297:break;case 129:{return (GroovyTokenTypes.kELSE);}case 298:break;case 148:{return (GroovyTokenTypes.kTHROW);}case 299:break;case 8:{return GroovyTokenTypes.mNUM_INT;}case 300:break;case 46:{yybegin(NLS_AFTER_NLS);afterComment=IN_TRIPLE_IDENT;return GroovyTokenTypes.mNLS;}case 301:break;case 77:{return GroovyTokenTypes.mNUM_LONG;}case 302:break;case 126:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mSR_ASSIGN);}case 303:break;case 153:{return (GroovyTokenTypes.kASSERT);}case 304:break;case 61:{return GroovyTokenTypes.mDOLLAR_SLASH_REGEX_CONTENT;}case 305:break;case 110:yypushback(1);{return GroovyTokenTypes.mDOLLAR_SLASH_REGEX_CONTENT;}case 306:break;case 162:{return (GroovyTokenTypes.kBOOLEAN);}case 307:break;case 79:{return (GroovyTokenTypes.kIF);}case 308:break;case 76:{return GroovyTokenTypes.mNUM_FLOAT;}case 309:break;case 59:{yybegin(IN_DOLLAR_SLASH_REGEX_DOT);return GroovyTokenTypes.mIDENT;}case 310:break;case 169:{return (GroovyTokenTypes.kINTERFACE);}case 311:break;case 164:{return (GroovyTokenTypes.kPRIVATE);}case 312:break;case 66:{yypushback(1);yybegin(NLS_AFTER_COMMENT);}case 313:break;case 15:{while (!braceCount.isEmpty() && GroovyTokenTypes.mLCURLY != braceCount.peek()) {braceCount.pop();}if (!braceCount.isEmpty() && GroovyTokenTypes.mLCURLY == braceCount.peek()) {braceCount.pop();}return GroovyTokenTypes.mRCURLY;}case 314:break;case 116:{return (GroovyTokenTypes.kINT);}case 315:break;case 53:{yybegin(IN_REGEX_DOT);return GroovyTokenTypes.mIDENT;}case 316:break;case 109:{if (!gStringStack.isEmpty()) {gStringStack.pop();}if (blockStack.isEmpty()) {yybegin(YYINITIAL);} else {yybegin(IN_INNER_BLOCK);}return GroovyTokenTypes.mDOLLAR_SLASH_REGEX_END;}case 317:break;case 35:{blockStack.push(GroovyTokenTypes.mLPAREN);braceCount.push(GroovyTokenTypes.mLCURLY);yybegin(NLS_AFTER_LBRACE);return GroovyTokenTypes.mLCURLY;}case 318:break;case 91:{return (GroovyTokenTypes.kAS);}case 319:break;case 131:{return (GroovyTokenTypes.kBYTE);}case 320:break;case 157:{return (GroovyTokenTypes.kRETURN);}case 321:break;case 57:{yybegin(IN_REGEX_DOLLAR);return GroovyTokenTypes.mDOLLAR;}case 322:break;case 85:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mMINUS_ASSIGN);}case 323:break;case 119:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mRANGE_EXCLUSIVE);}case 324:break;case 112:{return GroovyDocElementTypes.GROOVY_DOC_COMMENT;}case 325:break;case 47:{blockStack.push(GroovyTokenTypes.mLCURLY);braceCount.push(GroovyTokenTypes.mLCURLY);yybegin(NLS_AFTER_LBRACE);return (GroovyTokenTypes.mLCURLY);}case 326:break;case 2:{yybegin(NLS_AFTER_NLS);afterComment=WAIT_FOR_REGEX;return !braceCount.isEmpty() && GroovyTokenTypes.mLPAREN == braceCount.peek() ? TokenType.WHITE_SPACE : GroovyTokenTypes.mNLS;}case 327:break;case 114:{return GroovyTokenTypes.mNUM_BIG_DECIMAL;}case 328:break;case 16:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mQUESTION);}case 329:break;case 62:{yybegin(IN_DOLLAR_SLASH_REGEX_DOLLAR);return GroovyTokenTypes.mDOLLAR;}case 330:break;case 132:{return (GroovyTokenTypes.kCASE);}case 331:break;case 63:{yypushback(1);yybegin(IN_DOLLAR_SLASH_REGEX);}case 332:break;case 127:{if (!gStringStack.isEmpty()) {gStringStack.pop();}if (blockStack.isEmpty()) {yybegin(YYINITIAL);} else {yybegin(IN_INNER_BLOCK);}return GroovyTokenTypes.mGSTRING_END;}case 333:break;case 99:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mBXOR_ASSIGN);}case 334:break;case 60:{blockStack.push(GroovyTokenTypes.mDOLLAR);braceCount.push(GroovyTokenTypes.mLCURLY);yybegin(NLS_AFTER_LBRACE);return GroovyTokenTypes.mLCURLY;}case 335:break;case 139:{return (GroovyTokenTypes.kFLOAT);}case 336:break;case 171:{return (GroovyTokenTypes.kTRANSIENT);}case 337:break;case 154:{return (GroovyTokenTypes.kSTATIC);}case 338:break;case 138:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mBSR_ASSIGN);}case 339:break;case 6:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mLNOT);}case 340:break;case 18:{yybegin(WAIT_FOR_REGEX);braceCount.push(GroovyTokenTypes.mLPAREN);return (GroovyTokenTypes.mLPAREN);}case 341:break;case 25:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mGT);}case 342:break;case 30:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mBAND);}case 343:break;case 13:{yybegin(IN_SINGLE_GSTRING);gStringStack.push(GroovyTokenTypes.mLPAREN);return GroovyTokenTypes.mGSTRING_BEGIN;}case 344:break;case 67:{return GroovyTokenTypes.mSL_COMMENT;}case 345:break;case 86:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mCLOSABLE_BLOCK_OP);}case 346:break;case 10:{yybegin(WAIT_FOR_REGEX);return (GroovyTokenTypes.mMINUS);}case 347:break;case 140:{return (GroovyTokenTypes.kFINAL);}case 348:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;zzDoEOF();return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public JBBPOut Short(final int... value) throws IOException {  assertNotEnded();  assertArrayNotNull(value);  if (this.processCommands) {    for (    final int v : value) {      this._writeShort(v);    }  }  return this;}  }
class C{  public boolean isWellFormed(){  double totalProb=table.keySet().stream().mapToDouble(null).sum();  if (totalProb < 0.9f || totalProb > 1.1f) {    log.fine("total probability is " + totalProb);    return false;  }  return true;}  }
class C{  private TagLibFactory(String saxParser,TagLib lib,InputStream stream,Identification id) throws TagLibException {  this.id=id;  this.lib=lib == null ? new TagLib() : lib;  try {    InputSource is=new InputSource(IOUtil.getReader(stream,SystemUtil.getCharset()));    init(saxParser,is);  } catch (  IOException e) {    throw new TagLibException(e);  }}  }
class C{  public synchronized boolean remove(EventListener<T> listener){  boolean didRemove=unsortedListeners.removeIf(null);  if (didRemove) {    invalidateCache();  }  return didRemove;}  }
class C{  public String findAllRulesForSupportLevelTipText(){  return "Find all rules that meet " + "the lower bound on minimum support and the minimum metric constraint. " + "Turning this mode on will disable the iterative support reduction "+ "procedure to find the specified number of rules.";}  }
class C{  public Bz2OsmReader(){  try {    compressorClass=Class.forName("org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream");  } catch (  ClassNotFoundException e) {  }}  }
class C{  public static void main(String... args) throws SQLException {  new FileShell().runTool(args);}  }
class C{  public static String valueOf(String str){  if (str == null)   return "";  return str;}  }
class C{  public void recreate(EglCore newEglCore){  if (mSurface == null) {    throw new RuntimeException("not yet implemented for SurfaceTexture");  }  mEglCore=newEglCore;  createWindowSurface(mSurface);}  }
class C{  @SuppressWarnings("synthetic-access") @Override public Iterator<E> iterator(){  return new ArrayDequeIterator<E>();}  }
class C{  private boolean adjustOwnerStatusResistance(final StatusType statusType,final boolean apply){  SlotOwner slotOwner=this.getContainerBaseOwner();  if (slotOwner instanceof RPEntity) {    RPEntity owner=(RPEntity)slotOwner;    final String statusName=statusType.getName().toLowerCase();    final String resistAttribute="resist_" + statusName;    final double currentResistance;    double newResistance=this.getStatusResistanceValue(statusType);    if (!apply) {      newResistance*=-1;    }    if (owner.has(resistAttribute)) {      currentResistance=owner.getDouble(resistAttribute);      if (!apply && currentResistance <= 0.0) {        owner.remove(resistAttribute);        return false;      }      newResistance+=currentResistance;    }    if (newResistance > 1.0) {      newResistance=1.0;    }    if (newResistance <= 0.0) {      owner.remove(resistAttribute);      if (logger.isDebugEnabled() || Testing.DEBUG) {        logger.info(owner.getName() + " new " + statusName+ " resistance: 0.0");      }      return true;    } else {      owner.put(resistAttribute,newResistance);      if (logger.isDebugEnabled() || Testing.DEBUG) {        logger.info(owner.getName() + " new " + statusName+ " resistance: "+ Double.toString(newResistance));      }      return true;    }  }  return false;}  }
class C{  private Storage createStorageFromEntity(StorageEntity storageEntity){  Storage storage=new Storage();  storage.setName(storageEntity.getName());  storage.setStoragePlatformName(storageEntity.getStoragePlatform().getName());  List<Attribute> attributes=new ArrayList<>();  storage.setAttributes(attributes);  for (  StorageAttributeEntity attributeEntity : storageEntity.getAttributes()) {    Attribute attribute=new Attribute();    attributes.add(attribute);    attribute.setName(attributeEntity.getName());    attribute.setValue(attributeEntity.getValue());  }  return storage;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.COMPLEX_TYPE__FEATURES:    return ((InternalEList<?>)getFeatures()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static StringBuilder readFile(String filePath){  File file=new File(filePath);  StringBuilder fileContent=new StringBuilder("");  if (file == null || !file.isFile()) {    return null;  }  BufferedReader reader=null;  try {    reader=new BufferedReader(new FileReader(file));    String line=null;    while ((line=reader.readLine()) != null) {      if (!fileContent.toString().equals("")) {        fileContent.append("\r\n");      }      fileContent.append(line);    }    reader.close();    return fileContent;  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
