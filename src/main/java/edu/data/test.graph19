class C{  public int size(){  return _pos;}  }
class C{  public synchronized void checkAccess(LicenseCheckerCallback callback){  if (mPolicy.allowAccess()) {    Log.i(TAG,"Using cached license response");    callback.allow(Policy.LICENSED);  } else {    LicenseValidator validator=new LicenseValidator(mPolicy,new NullDeviceLimiter(),callback,generateNonce(),mPackageName,mVersionCode);    if (mService == null) {      Log.i(TAG,"Binding to licensing service.");      try {        boolean bindResult=mContext.bindService(new Intent(new String(Base64.decode("Y29tLmFuZHJvaWQudmVuZGluZy5saWNlbnNpbmcuSUxpY2Vuc2luZ1NlcnZpY2U="))).setPackage("com.android.vending"),this,Context.BIND_AUTO_CREATE);        if (bindResult) {          mPendingChecks.offer(validator);        } else {          Log.e(TAG,"Could not bind to service.");          handleServiceConnectionError(validator);        }      } catch (      SecurityException e) {        callback.applicationError(LicenseCheckerCallback.ERROR_MISSING_PERMISSION);      }catch (      Base64DecoderException e) {        e.printStackTrace();      }    } else {      mPendingChecks.offer(validator);      runChecks();    }  }}  }
class C{  public void notifyFailed(Throwable exception) throws CarbonSortKeyAndGroupByException {  dataSorterAndWriterExecutorService.shutdownNow();  intermediateFileMerger.close();  parameters.getObserver().setFailed(true);  LOGGER.error(exception);  throw new CarbonSortKeyAndGroupByException(exception);}  }
class C{  @Override public CauchyDistribution makeDistribution(){  return new CauchyDistribution(1.2,2.1);}  }
class C{  private void calculateTouchOffset(RectF rect,float touchX,float touchY){  float touchOffsetX=0;  float touchOffsetY=0;switch (mType) {case TOP_LEFT:    touchOffsetX=rect.left - touchX;  touchOffsetY=rect.top - touchY;break;case TOP_RIGHT:touchOffsetX=rect.right - touchX;touchOffsetY=rect.top - touchY;break;case BOTTOM_LEFT:touchOffsetX=rect.left - touchX;touchOffsetY=rect.bottom - touchY;break;case BOTTOM_RIGHT:touchOffsetX=rect.right - touchX;touchOffsetY=rect.bottom - touchY;break;case LEFT:touchOffsetX=rect.left - touchX;touchOffsetY=0;break;case TOP:touchOffsetX=0;touchOffsetY=rect.top - touchY;break;case RIGHT:touchOffsetX=rect.right - touchX;touchOffsetY=0;break;case BOTTOM:touchOffsetX=0;touchOffsetY=rect.bottom - touchY;break;case CENTER:touchOffsetX=rect.centerX() - touchX;touchOffsetY=rect.centerY() - touchY;break;default :break;}mTouchOffset.x=touchOffsetX;mTouchOffset.y=touchOffsetY;}  }
class C{  public void removeAllFromAggregate(int row){  clearAggregateMappings(row,true);}  }
class C{  public AfterExtended(){  super(null,null);}  }
class C{  public void init(Iterator iter,Comparator c){  m_tuples.clear();  m_cmp=c;  while (iter.hasNext()) {    Tuple t=(Tuple)iter.next();    m_tuples.add(t);  }  Collections.sort(m_tuples,m_cmp);  m_iter=m_tuples.iterator();}  }
class C{  public String join(String separator) throws JSONException {  int len=length();  StringBuilder sb=new StringBuilder();  for (int i=0; i < len; i+=1) {    if (i > 0) {      sb.append(separator);    }    sb.append(JSONObject.valueToString(this.myArrayList.get(i)));  }  return sb.toString();}  }
class C{  public ComboBoxCellRenderer(JComboBox<String> comboBox){  this.combo=new JComboBox<String>();  for (int i=0; i < comboBox.getItemCount(); i++) {    combo.addItem(comboBox.getItemAt(i));  }}  }
class C{  private void updateSyncStateFromSwitch(){  updateSyncEverythingState();  updateDataTypeState();  updateEncryptionState();}  }
class C{  public static double mean(final double[] values){  double sum=0;  for (  double val : values) {    sum+=val;  }  return sum / values.length;}  }
class C{  void handleEOD(EncoderContext context,StringBuilder buffer){  int unwritten=(buffer.length() / 3) * 2;  int rest=buffer.length() % 3;  int curCodewordCount=context.getCodewordCount() + unwritten;  context.updateSymbolInfo(curCodewordCount);  int available=context.getSymbolInfo().getDataCapacity() - curCodewordCount;  if (rest == 2) {    buffer.append('\0');    while (buffer.length() >= 3) {      writeNextTriplet(context,buffer);    }    if (context.hasMoreCharacters()) {      context.writeCodeword(HighLevelEncoder.C40_UNLATCH);    }  } else   if (available == 1 && rest == 1) {    while (buffer.length() >= 3) {      writeNextTriplet(context,buffer);    }    if (context.hasMoreCharacters()) {      context.writeCodeword(HighLevelEncoder.C40_UNLATCH);    }    context.pos--;  } else   if (rest == 0) {    while (buffer.length() >= 3) {      writeNextTriplet(context,buffer);    }    if (available > 0 || context.hasMoreCharacters()) {      context.writeCodeword(HighLevelEncoder.C40_UNLATCH);    }  } else {    throw new IllegalStateException("Unexpected case. Please report!");  }  context.signalEncoderChange(HighLevelEncoder.ASCII_ENCODATION);}  }
class C{  public boolean isBuiltInSelected(){  return builtInSelected;}  }
class C{  public boolean simulate_natives(){  return soot.PhaseOptions.getBoolean(options,"simulate-natives");}  }
class C{  public SymbolicGraph(int iMinNGramSize,int iMaxNGramSize){  super(16);  MaxNGramSize=iMaxNGramSize;  MinNGramSize=iMinNGramSize;}  }
class C{  public void increment(){  add(1);}  }
class C{  public FaveGetLinksQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Confuse_END_A(String value0){  return new SM_SYSTEM_MESSAGE(1201127,value0);}  }
class C{  public CachingMap<K,V> load(Collection<V> collection,Function<V,K> keyMapper){  for (  V item : collection) {    K key=keyMapper.apply(item);    if (key != null) {      super.put(key,item);    }  }  cacheLoadCount++;  return this;}  }
class C{  private void validateCollectionAttribute(CollectionAttribute collection,Set<String> allCollections){  if (collection == null || allCollections == null) {    return;  }  for (  RestMethod restMethod : collection.getMethods()) {    if (allCollections.contains(restMethod.getRestFullMethodName())) {      aspect.warning(SimpleLocation.TOPLEVEL,"The rpc methods and the associated http paths are not following the guidelines. As a " + "result the derived rest collection '%s' contains a sub collection and a " + "method with the same name as '%s'. This can cause a failure to generate client "+ "library, since these names are used for generating artifacts in generated code.",collection.getFullName(),restMethod.getRestMethodName());    }  }}  }
class C{  private static Integer openKey(Integer baseKey,String keyPath){  return openKey(baseKey,keyPath,KEY_READ);}  }
class C{  public static String generateSummary(Resources resources){  if (DataReductionProxySettings.getInstance().isDataReductionProxyEnabled()) {    String percent=DataReductionProxySettings.getInstance().getContentLengthPercentSavings();    return resources.getString(R.string.data_reduction_menu_item_summary,percent);  } else {    return (String)resources.getText(R.string.text_off);  }}  }
class C{  private void fireRequestBlock(ServerRequest request) throws RemoteServerException, LoginFailedException {  ServerRequest[] requests=CommonRequest.fillRequest(request,this);  getRequestHandler().sendServerRequests(requests);  try {    inventories.updateInventories(GetInventoryResponse.parseFrom(requests[3].getData()));    settings.updateSettings(DownloadSettingsResponse.parseFrom(requests[5].getData()));  } catch (  InvalidProtocolBufferException e) {    throw new RemoteServerException();  }}  }
class C{  public static byte[] toByteArray(Bitmap bitmap){  if (bitmap == null) {    return null;  }  ByteArrayOutputStream os=new ByteArrayOutputStream();  bitmap.compress(Bitmap.CompressFormat.PNG,100,os);  byte[] bytes=os.toByteArray();  try {    os.close();  } catch (  IOException e) {    e.printStackTrace();  }  return bytes;}  }
class C{  private boolean hasAdditionalProperties(ModelImpl modelImpl){  return modelImpl.getAdditionalProperties() != null;}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  String oldValueObj=(String)undoRedoObject.getOldValue();  attributeComboBox.setSelectedItem(oldValueObj);}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  public static Map<String,Object> createUpdatePartyRelationshipAndRoles(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  try {    List<GenericValue> partyRelationShipList=PartyRelationshipHelper.getActivePartyRelationships(delegator,context);    if (UtilValidate.isEmpty(partyRelationShipList)) {      String partyId=(String)context.get("partyId");      String partyIdFrom=(String)context.get("partyIdFrom");      String partyIdTo=(String)context.get("partyIdTo");      String roleTypeIdFrom=(String)context.get("roleTypeIdFrom");      String roleTypeIdTo=(String)context.get("roleTypeIdTo");      String partyRelationshipTypeId=(String)context.get("partyRelationshipTypeId");      GenericValue partyToRole=null;      partyToRole=EntityQuery.use(delegator).from("PartyRole").where("partyId",partyIdTo,"roleTypeId",roleTypeIdTo).queryOne();      if (partyToRole == null) {        partyToRole=delegator.makeValue("PartyRole",UtilMisc.toMap("partyId",partyIdTo,"roleTypeId",roleTypeIdTo));        partyToRole.create();      }      GenericValue partyFromRole=null;      partyFromRole=EntityQuery.use(delegator).from("PartyRole").where("partyId",partyIdFrom,"roleTypeId",roleTypeIdFrom).queryOne();      if (partyFromRole == null) {        partyFromRole=delegator.makeValue("PartyRole",UtilMisc.toMap("partyId",partyIdFrom,"roleTypeId",roleTypeIdFrom));        partyFromRole.create();      }      String sideChecked=partyIdFrom.equals(partyId) ? "partyIdFrom" : "partyIdTo";      GenericValue oldPartyRelationShip=EntityQuery.use(delegator).from("PartyRelationship").where(sideChecked,partyId,"roleTypeIdFrom",roleTypeIdFrom,"roleTypeIdTo",roleTypeIdTo,"partyRelationshipTypeId",partyRelationshipTypeId).filterByDate().queryFirst();      if (UtilValidate.isNotEmpty(oldPartyRelationShip)) {        oldPartyRelationShip.setFields(UtilMisc.toMap("thruDate",UtilDateTime.nowTimestamp()));        oldPartyRelationShip.store();      }      try {        dispatcher.runSync("createPartyRelationship",context);      } catch (      GenericServiceException e) {        Debug.logWarning(e.getMessage(),module);        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyrelationshipservices.could_not_create_party_role_write",UtilMisc.toMap("errorString",e.getMessage()),locale));      }    }  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyrelationshipservices.could_not_create_party_role_write",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  private void rectangle(int size){  int start=(windowFunction.length - size) / 2;  int stop=(windowFunction.length + size) / 2;  for (int i=start; i < stop; i++)   windowFunction[i]=1.0 / (double)size;}  }
class C{  private ProxyBypassListSelector buildLocalBypassSelector(ProtocolDispatchSelector ps){  List<UriFilter> localBypassFilter=new ArrayList<UriFilter>();  localBypassFilter.add(new IELocalByPassFilter());  return new ProxyBypassListSelector(localBypassFilter,ps);}  }
class C{  public void clean(){  _recentFifoObject=null;  _notifyNewEntry=null;  setSyncReplFromMultipleOperation(false);  _disableSyncReplication=false;  resetTemplateInitialSearchThread();  _isFifoThread=false;  _fifoThreadNumber=0;  _mainThread=false;  _opResultByThread=false;  _operationID=null;  _operationIDs=null;  _fromReplication=false;  _origin=true;  _isTransactionalMultipleOperation=false;  _operationVisibilityTime=0;  _lastRawMatchSnapshot=null;  _matchResult=MatchResult.NONE;  _lastRawmatchEntry=null;  _lastRawmatchTemplate=null;  _possibleIEBlockingMatch=false;  _isMultipleOperation=false;  _unstableEntry=false;  _isNonBlockingReadOp=false;  _partialUpdatedValuesIndicators=null;  _writeResult=null;  _notifyLease=null;  _reRegisterLease=false;  if (_replicationContext != null) {    _replicationContext.release();    _replicationContext=null;  }  _updateLastSentKey=true;  _fromGateway=false;  _take_template=null;  _take_typeDesc=null;  _readByIdsInfo=null;  _prefetchedNonBlobStoreEntries=null;  _pendingExpiredEntriesExist=false;  _committingXtn=null;  _anyFifoGroupIndex=false;  _fifoGroupIndexResultsUsedInFifoGroupScan=null;  _fifoGroupScanEncounteredXtnConflict=false;  _fifoGroupValuesForMiltipleOperations=null;  _exhaustedFifoGroupsTemplatesSearch=false;  _fifoGroupQueryContainsOrCondition=false;  _ordinalForMultipleIdsOperation=-1;  _changeResultsForCurrentEntry=null;  _numOfIndexesInserted=0;  _numOfEntriesMatched=0;  _indicesIntersectionEnabled=false;  _chosenIntersectedList=null;  _usingIntersectedListForScanning=false;  _offHeapEntryCacheInfo=null;  _offHeapOpEntryHolder=null;  _offHeapOpPin=false;  _indexUsed=false;  _initialLoadInfo=null;  _blobStoreBulkInfo=null;  _blobStoreUsePureIndexesAccess=false;  _blobStoreTryNonPersistentOp=false;  _blobStorePreFetchBatchResult=null;  _disableBlobStorePreFetching=false;  _blobStoreEntry=null;  _originalOffHeapVersion=0;  _originalData=null;  _mutators=null;  _removeReason=null;  _delayedReplicationForbulkOpUsed=false;  _explainPlanContext=null;  _owningThreadName=null;}  }
class C{  public static Authentication newAuthentication(String user,String password,final boolean authenticated,GrantedAuthority... authorities){  return new TestingAuthenticationToken(user,password,ImmutableList.<org.springframework.security.core.GrantedAuthority>builder().add(authorities).build()){    private static final long serialVersionUID=1L;{      setAuthenticated(authenticated);    }  };}  }
class C{  public short[][] reduce_table(){  return _reduce_table;}  }
class C{  public double dist(Math_Vector other){  double distX=this.x - other.x;  double distY=this.y - other.y;  return Math.sqrt(distX * distX + distY * distY);}  }
class C{  public void delete() throws JMSException {}  }
class C{  public PolynomialSplineFunction polynomialSplineDerivative(){  PolynomialFunction derivativePolynomials[]=new PolynomialFunction[n];  for (int i=0; i < n; i++) {    derivativePolynomials[i]=polynomials[i].polynomialDerivative();  }  return new PolynomialSplineFunction(knots,derivativePolynomials);}  }
class C{  public boolean implementsInterface(String name){  checkLevel(HIERARCHY);  Iterator<SootClass> interfaceIt=getInterfaces().iterator();  while (interfaceIt.hasNext()) {    SootClass SootClass=interfaceIt.next();    if (SootClass.getName().equals(name))     return true;  }  return false;}  }
class C{  void modifyingCharacterData(NodeImpl node,boolean replace){}  }
class C{  public GiftsGetQuery(VkApiClient client,UserActor actor){  super(client,"gifts.get",GetResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public void init$Children(){  children=new ASTNode[2];  setChild(new List(),1);}  }
class C{  public static long copyLarge(Reader input,Writer output,final long inputOffset,final long length,char[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  int bytesToRead=buffer.length;  if (length > 0 && length < buffer.length) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,buffer.length);    }  }  return totalRead;}  }
class C{  public String process(Item syl) throws ProcessException {  int count=0;  Item daughter=syl.getItemAs(Relation.SYLLABLE_STRUCTURE).getDaughter();  while (daughter != null) {    if ("+".equals(getPhoneFeature(daughter,"vc"))) {      break;    }    count++;    daughter=daughter.getNext();  }  return Integer.toString(rail(count));}  }
class C{  private void saveCrashToLocal(Throwable ex){  LogUtil.d("saveCrashToLocal");  if (config.isSaveToLocal()) {    String localFolderPath=config.getLocalFolderPath();    if (null != localFolderPath && localFolderPath.length() > 2) {      File file=new File(localFolderPath);      file.mkdirs();      if (file.exists() && file.isDirectory()) {        AECHFileWriter.getInstance(mContext).writeEx2File(ex,localFolderPath);      } else {        AECHFileWriter.getInstance(mContext).writeEx2File(ex);      }    } else {      AECHFileWriter.getInstance(mContext).writeEx2File(ex);    }  }}  }
class C{  private String diff_linesToCharsMunge(String text,List<String> lineArray,Map<String,Integer> lineHash){  int lineStart=0;  int lineEnd=-1;  String line;  StringBuilder chars=new StringBuilder();  while (lineEnd < text.length() - 1) {    lineEnd=text.indexOf('\n',lineStart);    if (lineEnd == -1) {      lineEnd=text.length() - 1;    }    line=text.substring(lineStart,lineEnd + 1);    lineStart=lineEnd + 1;    if (lineHash.containsKey(line)) {      chars.append(String.valueOf((char)(int)lineHash.get(line)));    } else {      lineArray.add(line);      lineHash.put(line,lineArray.size() - 1);      chars.append(String.valueOf((char)(lineArray.size() - 1)));    }  }  return chars.toString();}  }
class C{  public AdsCheckLinkQuery(VkApiClient client,UserActor actor,int accountId,AdsCheckLinkType linkType,String linkUrl){  super(client,"ads.checkLink",LinkStatus.class);  accessToken(actor.getAccessToken());  accountId(accountId);  linkType(linkType);  linkUrl(linkUrl);}  }
class C{  @Override @Transactional(value="cacheTransactionManager") public List<ProcessChange> doCreateEquipment(ConfigurationElement element) throws IllegalAccessException {  Equipment equipment=super.createAbstractEquipment(element);  equipmentFacade.addEquipmentToProcess(equipment.getId(),equipment.getProcessId());  EquipmentUnitAdd equipmentUnitAdd=new EquipmentUnitAdd(element.getSequenceId(),equipment.getId(),processXMLProvider.getEquipmentConfigXML(equipment.getId()));  List<ProcessChange> result=new ArrayList<ProcessChange>();  result.add(new ProcessChange(equipment.getProcessId(),equipmentUnitAdd));  updateControlTagInformation(element,equipment);  return result;}  }
class C{  public DoubleColumn(){  this(0,10,0);}  }
class C{  public static FileFooter convertFileFooter(List<BlockletInfoColumnar> infoList,int numCols,int[] cardinalities,List<ColumnSchema> columnSchemaList,SegmentProperties segmentProperties) throws IOException {  SegmentInfo segmentInfo=new SegmentInfo();  segmentInfo.setNum_cols(columnSchemaList.size());  segmentInfo.setColumn_cardinalities(CarbonUtil.convertToIntegerList(cardinalities));  FileFooter footer=new FileFooter();  footer.setNum_rows(getTotalNumberOfRows(infoList));  footer.setSegment_info(segmentInfo);  for (  BlockletInfoColumnar info : infoList) {    footer.addToBlocklet_index_list(getBlockletIndex(info));  }  footer.setTable_columns(columnSchemaList);  for (  BlockletInfoColumnar info : infoList) {    footer.addToBlocklet_info_list(getBlockletInfo(info,columnSchemaList,segmentProperties));  }  return footer;}  }
class C{  private void refill(){  long nowNano=time.getNanoTime();  long deltaMs=time.getTimeDeltaMs(lastRefill,nowNano);  if (deltaMs < 0) {    return;  }  tokens=Math.min(tokens + deltaMs * rate,capacity);  lastRefill=nowNano;}  }
class C{  protected BigInteger parseNextBigInteger(final String source,final ParsePosition pos){  final int start=pos.getIndex();  int end=(source.charAt(start) == '-') ? (start + 1) : start;  while ((end < source.length()) && Character.isDigit(source.charAt(end))) {    ++end;  }  try {    BigInteger n=new BigInteger(source.substring(start,end));    pos.setIndex(end);    return n;  } catch (  NumberFormatException nfe) {    pos.setErrorIndex(start);    return null;  }}  }
class C{  private static Map<String,List<String>> splitQuery(URL url) throws UnsupportedEncodingException {  final Map<String,List<String>> query_pairs=new LinkedHashMap<String,List<String>>();  final String[] pairs=url.getQuery().split("&");  for (  String pair : pairs) {    final int idx=pair.indexOf("=");    final String key=idx > 0 ? URLDecoder.decode(pair.substring(0,idx),"UTF-8") : pair;    if (!query_pairs.containsKey(key)) {      query_pairs.put(key,new LinkedList<String>());    }    final String value=idx > 0 && pair.length() > idx + 1 ? URLDecoder.decode(pair.substring(idx + 1),"UTF-8") : null;    query_pairs.get(key).add(value);  }  return query_pairs;}  }
class C{  public PathController(JList l,JLabel label,DefaultListModel model,JButton add,JFileChooser chooser,JButton remove,JButton up,JButton down,ListDataListener lstnr){  this.l=l;  this.label=label;  this.model=model;  this.add=add;  this.remove=remove;  this.up=up;  this.down=down;  this.chooser=chooser;  this.lstnr=lstnr;  l.setModel(model);  if (model != null) {    model.addListDataListener(this);  }  add.setActionCommand("add");  remove.setActionCommand("remove");  up.setActionCommand("up");  down.setActionCommand("down");  add.addActionListener(this);  remove.addActionListener(this);  up.addActionListener(this);  down.addActionListener(this);  l.addListSelectionListener(this);  remove.setEnabled(false);  up.setEnabled(false);  down.setEnabled(false);}  }
class C{  protected void notifyClickListenersAboutClick(int item){  for (  OnWheelClickedListener listener : clickingListeners) {    listener.onItemClicked(this,item);  }}  }
class C{  public SimpleMethodTest(String caseName,Element mainElement){  this(caseName,mainElement.getAttribute("location"),mainElement.getAttribute("name"));}  }
class C{  String internalsprintf(int s) throws IllegalArgumentException {  String s2="";switch (conversionCharacter) {case 'd':case 'i':    if (optionalh)     s2=printDFormat((short)s); else     if (optionall)     s2=printDFormat((long)s); else     s2=printDFormat(s);  break;case 'x':case 'X':if (optionalh) s2=printXFormat((short)s); else if (optionall) s2=printXFormat((long)s); else s2=printXFormat(s);break;case 'o':if (optionalh) s2=printOFormat((short)s); else if (optionall) s2=printOFormat((long)s); else s2=printOFormat(s);break;case 'c':case 'C':s2=printCFormat((char)s);break;default :throw new IllegalArgumentException("Cannot format a int with a format using a " + conversionCharacter + " conversion character.");}return s2;}  }
class C{  public BoundingSphere(){}  }
class C{  @Override public double value(final double[] point){  return value(new ArrayRealVector(point,false));}  }
class C{  public AemFieldset fold(){  if (!isFolded()) {    foldButton.click();  }  bobcatWait.withTimeout(Timeouts.BIG).until(null,Timeouts.MINIMAL);  return this;}  }
class C{  public JsonArray remove(int index){  values.remove(index);  return this;}  }
class C{  private Builder noClip(Boolean noClip){  this.noClip=noClip;  return this;}  }
class C{  public void addNew(List<String> parameterList){  if (this.envMgr != null) {    for (    String parameter : parameterList) {      String[] componentList=parameter.split(";");      for (      String component : componentList) {        String[] childComponentList=component.split(":");        String envVarName=childComponentList[0];        String envVarValue=null;        if (childComponentList.length > 1) {          envVarValue=childComponentList[1];        }        EnvVar envVar=this.envMgr.addNewEnvVar(envVarName,String.class,envVarValue);        if (envVar != null) {          dataList.add(envVar);        }      }    }    this.fireTableDataChanged();  }}  }
class C{  public boolean isSupportedBcp47Tag(String bcp47Tag){  boolean supported=true;  try {    getDetectorLanguageForBcp47Tag(bcp47Tag);  } catch (  UnsupportedLanguageException ule) {    supported=false;  }  return supported;}  }
class C{  public static final void onPlayerLogout(Player player){  PlayerAlliance alliance=player.getPlayerAlliance2();  if (alliance != null) {    PlayerAllianceMember member=alliance.getMember(player.getObjectId());    member.updateLastOnlineTime();    alliance.onEvent(new PlayerDisconnectedEvent(alliance,player));  }}  }
class C{  public static StateListDrawable toStateListDrawable(Drawable normal,Drawable pressed){  return toStateListDrawable(normal,pressed,pressed,normal);}  }
class C{  public PlacesCheckinQuery placeId(Integer value){  return unsafeParam("place_id",value);}  }
class C{  private void appendHeader(StringBuilder builder,String prefix,String name,List<?> values){  String value=values.size() == 1 ? values.get(0).toString() : values.toString();  builder.append(prefix).append(name).append("=").append(value).append("\t");}  }
class C{  protected GroupsGetCallbackConfirmationCodeQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  public static void startMe(Context _context){  Intent intent=new Intent(_context,CreateTaskActivity.class);  _context.startActivity(intent);}  }
class C{  public JsonObject sendCrxRequest(HttpUriRequest request) throws IOException {  String resultJson;  try (CloseableHttpResponse response=httpClient.execute(request)){    resultJson=EntityUtils.toString(response.getEntity());  }   JsonObject result;  try {    result=new JsonParser().parse(resultJson).getAsJsonObject();  } catch (  JsonSyntaxException e) {    throw new JsonSyntaxException("Unable to parse as Json: " + resultJson,e);  }  if (result.get("success").getAsBoolean()) {    return result;  }  throw new IOException(result.get("msg").getAsString());}  }
class C{  public void sendData(SerialMessage serialMessage){  if (serialMessage == null) {    return;  }  if (serialMessage.getMessageClass() != SerialMessageClass.SendData) {    logger.error(String.format("Invalid message class %s (0x%02X) for sendData",serialMessage.getMessageClass().getLabel(),serialMessage.getMessageClass().getKey()));    return;  }  if (serialMessage.getMessageType() != SerialMessageType.Request) {    logger.error("Only request messages can be sent");    return;  }  serialMessage.setAckRequired();  if (!serialMessage.areTransmitOptionsSet()) {    serialMessage.setTransmitOptions(TRANSMIT_OPTION_ACK | TRANSMIT_OPTION_AUTO_ROUTE | TRANSMIT_OPTION_EXPLORE);  }  serialMessage.setCallbackId(getCallbackId());  enqueue(serialMessage);}  }
class C{  public void writeStringNoCompression(String str) throws IOException {  if (str == null) {    writeInt(0);  } else {    writeInt(str.length());    for (int i=0; i < str.length(); i++)     outs.write((byte)str.charAt(i));    position+=str.length();  }}  }
class C{  @Override public void onClick(View view){switch (view.getId()) {case R.id.container_loading_view_large_feedbackBtn:    photosPresenter.initRefresh(getContext());  break;}}  }
class C{  public PointF mapViewToImage(PointF viewPoint){  float[] points=mTempValues;  points[0]=viewPoint.x;  points[1]=viewPoint.y;  mActiveTransform.invert(mActiveTransformInverse);  mActiveTransformInverse.mapPoints(points,0,points,0,1);  mapAbsoluteToRelative(points,points,1);  return new PointF(points[0],points[1]);}  }
class C{  public @Nullable @ColorInt int[] grabPixels(Point[] points){  Image image=null;  try {    image=imageReader.acquireLatestImage();  } catch (  Exception exception) {    Timber.e("Error thrown in grabPixels() - acquireLatestImage()");    Timber.e(exception);  }  if (image == null) {    return null;  }  Rect imageBounds=new Rect(0,0,image.getWidth(),image.getHeight());  @ColorInt int[] pixels=new int[points.length];  Image.Plane imgPlane=image.getPlanes()[0];  int pixelStride=imgPlane.getPixelStride();  int rowStride=imgPlane.getRowStride();  ByteBuffer buffer=imgPlane.getBuffer();  for (int i=0; i < points.length; i++) {    Point p=points[i];    if (imageBounds.contains(p.x,p.y)) {      pixels[i]=getPixel(buffer,p,pixelStride,rowStride);    } else {      pixels=null;      break;    }  }  image.close();  return pixels;}  }
class C{  public PlacesCheckinQuery longitude(Float value){  return unsafeParam("longitude",value);}  }
class C{  public DateTimeParser(){  this(DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT));}  }
class C{  public AdsGetStatisticsQuery(VkApiClient client,UserActor actor,int accountId,AdsGetStatisticsIdsType idsType,String ids,AdsGetStatisticsPeriod period,String dateFrom,String dateTo){  super(client,"ads.getStatistics",Utils.buildParametrizedType(List.class,Stats.class));  accessToken(actor.getAccessToken());  accountId(accountId);  idsType(idsType);  ids(ids);  period(period);  dateFrom(dateFrom);  dateTo(dateTo);}  }
class C{  public void startRecordingAudio(String id,String file){  AudioPlayer audio=getOrCreatePlayer(id,file);  audio.startRecording(file);}  }
class C{  @Override public String toString(){  return Vector1DFormat.getInstance().format(this);}  }
class C{  public GroupsSetCallbackSettingsQuery videoNew(Boolean value){  return unsafeParam("video_new",value);}  }
class C{  public void configureUI(NlComponent component){  mComponent=component;  if (component == null)   return;  String mWidgetName=component.getId();  int bottom=ConstraintUtilities.getMargin(component,SdkConstants.ATTR_LAYOUT_MARGIN_BOTTOM);  int top=ConstraintUtilities.getMargin(component,SdkConstants.ATTR_LAYOUT_MARGIN_TOP);  int left=ConstraintUtilities.getMargin(component,SdkConstants.ATTR_LAYOUT_MARGIN_START);  int right=ConstraintUtilities.getMargin(component,SdkConstants.ATTR_LAYOUT_MARGIN_END);  String rl=component.getAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_RIGHT_TO_LEFT_OF);  String rr=component.getAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_RIGHT_TO_RIGHT_OF);  String ll=component.getAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_LEFT_TO_LEFT_OF);  String lr=component.getAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_LEFT_TO_RIGHT_OF);  String tt=component.getAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_TOP_TO_TOP_OF);  String tb=component.getAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_TOP_TO_BOTTOM_OF);  String bt=component.getAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_BOTTOM_TO_TOP_OF);  String bb=component.getAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_BOTTOM_TO_BOTTOM_OF);  String basline=component.getAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_BASELINE_TO_BASELINE_OF);  String hbias=component.getAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_HORIZONTAL_BIAS);  String vbias=component.getAttribute(SdkConstants.SHERPA_URI,SdkConstants.ATTR_LAYOUT_VERTICAL_BIAS);  String widthStr=component.getAttribute(SdkConstants.ANDROID_URI,SdkConstants.ATTR_LAYOUT_WIDTH);  String heightStr=component.getAttribute(SdkConstants.ANDROID_URI,SdkConstants.ATTR_LAYOUT_HEIGHT);  if (rl == null && rr == null) {    right=-1;  }  if (ll == null && lr == null) {    left=-1;  }  if (tt == null && tb == null) {    top=-1;  }  if (bb == null && bt == null) {    bottom=-1;  }  boolean showVerticalSlider=bottom >= 0 && top >= 0;  boolean showHorizontalSlider=left >= 0 && right >= 0;  mVerticalSlider.setEnabled(showVerticalSlider);  mHorizontalSlider.setEnabled(showHorizontalSlider);  mHorizontalSlider.invalidate();  mVerticalSlider.invalidate();  mVerticalSlider.setToolTipText(showVerticalSlider ? VERTICAL_TOOL_TIP_TEXT : null);  mHorizontalSlider.setToolTipText(showHorizontalSlider ? HORIZONTAL_TOOL_TIP_TEXT : null);  float horizBias=0.5f;  if (hbias != null && hbias.length() > 0) {    horizBias=Float.parseFloat(hbias);  }  float vertBias=0.5f;  if (vbias != null && vbias.length() > 0) {    vertBias=Float.parseFloat(vbias);  }  mHorizontalSlider.setValue((int)(horizBias * 100));  mVerticalSlider.setValue(100 - (int)(vertBias * 100));  int widthVal=SingleWidgetView.FIXED;  int heightValue=SingleWidgetView.FIXED;  if (SdkConstants.VALUE_WRAP_CONTENT.equals(widthStr)) {    widthVal=SingleWidgetView.WRAP_CONTENT;  } else   if (SIZE_ANY.equals(widthStr)) {    widthVal=SingleWidgetView.ANY;  } else {    mWidgetWidthCache=widthStr;  }  updateCacheSize(heightStr,heightValue);  mMain.configureUi(bottom,top,left,right,basline != null,widthVal,heightValue);}  }
class C{  public void moveBy(int offset){  cursor+=offset;}  }
class C{  @RequestMapping(value="/",method=PUT,produces=APPLICATION_JSON_VALUE) public ResponseEntity<UserDTO> update(@RequestBody UserDTO userDTO) throws URISyntaxException {  log.debug("Update UserDTO : {}",userDTO);  if (!userDTO.isIdSet()) {    return create(userDTO);  }  UserDTO result=userDTOService.save(userDTO);  return ResponseEntity.ok().body(result);}  }
class C{  public void addRoot(ProtoElement root){  roots.add(root);}  }
class C{  LoadReport nextBroker(){  List<LoadReport> availableBrokers=zkCache.getAvailableBrokers();  if (availableBrokers.isEmpty()) {    throw new RestException(Status.SERVICE_UNAVAILABLE,"No active broker is available");  } else {    int brokersCount=availableBrokers.size();    int nextIdx=Math.abs(counter.getAndIncrement()) % brokersCount;    return availableBrokers.get(nextIdx);  }}  }
class C{  private void displayExpression(ExpressionNode node){  if (node == null) {    return;  }  envVarField.setDataType(node.getType());  envVarField.setEnvironmentVariable(node.getExpression());  revalidate();}  }
class C{  public LaguerreSolver(double relativeAccuracy,double absoluteAccuracy){  super(relativeAccuracy,absoluteAccuracy);}  }
class C{  public static Bitmap scaleImageTo(Bitmap org,int newWidth,int newHeight){  return scaleImage(org,(float)newWidth / org.getWidth(),(float)newHeight / org.getHeight());}  }
class C{  public static MissionBehaviour createAgentHandlersFromMissionInit(MissionInit missionInit) throws Exception {  MissionBehaviour behaviour=new MissionBehaviour();  behaviour.initAgent(missionInit);  return behaviour;}  }
class C{  public static boolean isElementContent(String tagName){  return isElement(tagName,ELEM_CONTENT);}  }
class C{  public boolean containsValue(Object value){  return indexOfValue(value) >= 0;}  }
class C{  public boolean ignore_wrong_staticness(){  return soot.PhaseOptions.getBoolean(options,"ignore-wrong-staticness");}  }
class C{  protected NodeIterator(Node rootNode,boolean showLeafNodes,boolean showDecisionNodes,boolean showDirectedGraphNodes){  this.root=rootNode;  this.showLeafNodes=showLeafNodes;  this.showDecisionNodes=showDecisionNodes;  this.showDirectedGraphNodes=showDirectedGraphNodes;  this.current=root;  alreadySeen.add(current);  if (!currentIsSuitable()) {    nextSuitableNodeDepthFirst();  }}  }
class C{  public static void logWithStackOffset(int level,int stackOffset,String tag,String msg,Object... params){  log(level,stackOffset,tag,FMT_STRING,mConfig.getLogger(),msg,params);}  }
class C{  public void put(String key,String value){  if (key != null && value != null) {    urlParams.put(key,value);  }}  }
class C{  public void componentShown(ComponentEvent ev){}  }
class C{  public static void v(String tag,String msg,Object... args){  if (sLevel > LEVEL_VERBOSE) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.v(tag,msg);}  }
class C{  public void outputOrigin(){  System.out.println("After decoding:");  for (int i=0; i < num; i++) {    System.out.printf("data:%d:  ",i);    System.out.println(rs[i]);  }}  }
class C{  public void init$Children(){}  }
class C{  public void insert(ForceItem item){  try {    insert(item,root,xMin,yMin,xMax,yMax);  } catch (  StackOverflowError e) {    e.printStackTrace();  }}  }
class C{  public static final double logX(double dNumber,double dBase){  return Math.log(dNumber) / Math.log(dBase);}  }
class C{  @Override public void remove(String... identifiers){  blacklist.removeAll(Arrays.asList(identifiers));}  }
class C{  public void initialiseSelectedFTSIndex(){  this.selectedFTSIndex=0;}  }
class C{  public ImageSize scaleDown(int sampleSize){  return new ImageSize(width / sampleSize,height / sampleSize);}  }
class C{  public static Tuple max(Iterator tuples,String field){  return max(tuples,field,DefaultLiteralComparator.getInstance());}  }
class C{  public MarketEditAlbumQuery(VkApiClient client,UserActor actor,int ownerId,int albumId,String title){  super(client,"market.editAlbum",OkResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  albumId(albumId);  title(title);}  }
class C{  public static String toString(JSONObject jo) throws JSONException {  StringBuilder sb=new StringBuilder();  int i;  JSONArray ja;  String key;  Iterator<String> keys;  int length;  Object object;  String tagName;  String value;  tagName=jo.optString("tagName");  if (tagName == null) {    return XML.escape(jo.toString());  }  XML.noSpace(tagName);  tagName=XML.escape(tagName);  sb.append('<');  sb.append(tagName);  keys=jo.keys();  while (keys.hasNext()) {    key=keys.next();    if (!"tagName".equals(key) && !"childNodes".equals(key)) {      XML.noSpace(key);      value=jo.optString(key);      if (value != null) {        sb.append(' ');        sb.append(XML.escape(key));        sb.append('=');        sb.append('"');        sb.append(XML.escape(value));        sb.append('"');      }    }  }  ja=jo.optJSONArray("childNodes");  if (ja == null) {    sb.append('/');    sb.append('>');  } else {    sb.append('>');    length=ja.length();    for (i=0; i < length; i+=1) {      object=ja.get(i);      if (object != null) {        if (object instanceof String) {          sb.append(XML.escape(object.toString()));        } else         if (object instanceof JSONObject) {          sb.append(toString((JSONObject)object));        } else         if (object instanceof JSONArray) {          sb.append(toString((JSONArray)object));        } else {          sb.append(object.toString());        }      }    }    sb.append('<');    sb.append('/');    sb.append(tagName);    sb.append('>');  }  return sb.toString();}  }
class C{  public EntityQuery cursorScrollInsensitive(){  this.resultSetType=EntityFindOptions.TYPE_SCROLL_INSENSITIVE;  return this;}  }
class C{  @Override public void write(char[] chr,int st,int end) throws IOException {  out.write(chr,st,end);}  }
class C{  public static void validateReferenceType(int referenceType){  if (referenceType < 0 || referenceType > 3) {    throw new InvalidReferenceTypeException(referenceType);  }}  }
class C{  public int replaceAll(String regularExpression,String replaceText,boolean selectionOnly){  System.err.println("not implemented");  return 0;}  }
class C{  public boolean checkAndAddMeso(long addMeso,boolean show){  if (getMeso() + addMeso < 0) {    return false;  }  gainMeso(addMeso,show);  return true;}  }
class C{  @Override public long skip(long ln) throws IOException {  try {    return in.skip(ln);  } catch (  IOException e) {    handleIOException(e);    return 0;  }}  }
class C{  public static List<BaseMqttMessage> processMessageLog(final List<LoggedMqttMessage> list,final ProgressUpdater progress,final long current,final long max){  final List<BaseMqttMessage> mqttMessageList=new ArrayList<BaseMqttMessage>();  long item=0;  for (  final LoggedMqttMessage loggedMessage : list) {    if (progress != null) {      if (progress.isCancelled()) {        logger.info("Task cancelled!");        return null;      }      item++;      if (item % 1000 == 0) {        progress.update(current + item,max);      }    }    mqttMessageList.add(convertToBaseMqttMessage(loggedMessage));  }  logger.info("Message audit log - processed {} MQTT messages",list.size());  return mqttMessageList;}  }
class C{  protected String renderSingleHighlight(JSONArray passage){  StringBuilder sb=new StringBuilder();  for (  Object o2 : passage) {    if (o2 instanceof String) {      sb.append((String)o2);    } else {      JSONObject obj=(JSONObject)o2;      sb.append("<b>");      sb.append(obj.get("text"));      sb.append("</b>");    }  }  return sb.toString();}  }
class C{  public FilterSpec normalize(){  FilterSpec copy=new FilterSpec();  copy.attributePath=attributePath;  copy.operator=operator;  copy.value=value;  if (expressions != null) {    copy.expressions=cloneExpressions(expressions,true);  }  return copy;}  }
class C{  public void encodeXML(Document doc,Element root,String elementName){  if ((doc == null) || (root == null) || (elementName == null)) {    return;  }  Element lengendOptionElement=doc.createElement(elementName);  createElement(doc,lengendOptionElement,IMAGE_WIDTH,imageWidth);  createElement(doc,lengendOptionElement,IMAGE_HEIGHT,imageHeight);  createElement(doc,lengendOptionElement,IMAGE_DPI,dpi);  createElement(doc,lengendOptionElement,IMAGE_SIZE,imageSize);  createElement(doc,lengendOptionElement,MAINTAIN_ASPECT_RATIO,maintainAspectRatio);  createElement(doc,lengendOptionElement,SHOW_LABELS,showLabels);  createElement(doc,lengendOptionElement,SHOW_TITLE,showTitle);  createElement(doc,lengendOptionElement,SPLIT_SYMBOLIZERS,splitSymbolizers);  createElement(doc,lengendOptionElement,FONT_ANTI_ALIASING,fontAntiAliasing);  createElement(doc,lengendOptionElement,SHOW_BORDER,border);  createElement(doc,lengendOptionElement,BAND_INFORMATION,bandInformation);  createElement(doc,lengendOptionElement,BACKGROUND_TRANSPARENT,transparent);  createElement(doc,lengendOptionElement,LABEL_FONT,labelFont);  createElement(doc,lengendOptionElement,LABEL_FONT_COLOUR,labelFontColour);  createElement(doc,lengendOptionElement,BORDER_COLOUR,borderColour);  createElement(doc,lengendOptionElement,BACKGROUND_COLOUR,backgroundColour);  root.appendChild(lengendOptionElement);}  }
class C{  public Gaussian(){  this(0,1);}  }
class C{  public SequenceTemplateParameterContext addSequenceParameter(SequenceType seqType,SequenceUUID uuid,SequenceContextParameters paramName,String paramValue){  initSequence(seqType,uuid);  doAddParameter(seqType,uuid,paramName,paramValue);  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_IMMUNED_MAGIC_OTHER_FRIENDLY(String skilltarget,String skillcaster){  return new SM_SYSTEM_MESSAGE(1240221,skilltarget,skillcaster);}  }
class C{  public VideoGetNewTagsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  private float[] crossProduct(float[] v1,float[] v2){  float[] result=new float[3];  result[0]=v1[1] * v2[2] - v2[1] * v1[2];  result[1]=v1[2] * v2[0] - v2[2] * v1[0];  result[2]=v1[0] * v2[1] - v2[0] * v1[1];  return result;}  }
class C{  private boolean isIP4SubnetFilter(String token){  return IPWithSubnetChecker.isValidIP4Range(token);}  }
class C{  public RoleDataAccessException(Throwable cause){  super(cause);}  }
class C{  private static void logThrow(Level level,String sourceMethod,String msg,Object[] params,Throwable e){  LogRecord r=new LogRecord(level,msg);  r.setLoggerName(logger.getName());  r.setSourceClassName(LeaseRenewalManager.class.getName());  r.setSourceMethodName(sourceMethod);  r.setParameters(params);  r.setThrown(e);  logger.log(r);}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  public static void filledRectangle(double x,double y,double halfWidth,double halfHeight){  if (!(halfWidth >= 0))   throw new IllegalArgumentException("half width must be nonnegative");  if (!(halfHeight >= 0))   throw new IllegalArgumentException("half height must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * halfWidth);  double hs=factorY(2 * halfHeight);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.fill(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public SymmetricGaussIntegrator(Pair<double[],double[]> pointsAndWeights) throws MathIllegalArgumentException {  this(pointsAndWeights.getFirst(),pointsAndWeights.getSecond());}  }
class C{  protected WallUnpinQuery postId(int value){  return unsafeParam("post_id",value);}  }
class C{  private void initPresenter(){  this.loadPresenter=new LoadImplementor(loadModel,this);}  }
class C{  public static int max(int a,int b,int c){  int ma;  ma=a;  if (b > ma) {    ma=b;  }  if (c > ma) {    ma=c;  }  return ma;}  }
class C{  public WallDeleteQuery(VkApiClient client,UserActor actor){  super(client,"wall.delete",OkResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public static Value noExceptionThrowing(Value val){  if (val == null)   return null;  if (!throwsException(val))   return val; else   return null;}  }
class C{  public static void surrenderPet(Player player,int petId){  PetCommonData petCommonData=player.getPetList().getPet(petId);  if (player.getPet() != null && player.getPet().getPetId() == petCommonData.getPetId()) {    if (petCommonData.getFeedProgress() != null) {      petCommonData.setCancelFeed(true);    }    PetSpawnService.dismissPet(player,false);  }  player.getPetList().deletePet(petCommonData.getPetId());  PacketSendUtility.sendPacket(player,new SM_PET(2,petCommonData));}  }
class C{  public void readExifData(){  this.aperture=inFile.getAttribute(ExifInterface.TAG_APERTURE);  this.datetime=inFile.getAttribute(ExifInterface.TAG_DATETIME);  this.exposureTime=inFile.getAttribute(ExifInterface.TAG_EXPOSURE_TIME);  this.flash=inFile.getAttribute(ExifInterface.TAG_FLASH);  this.focalLength=inFile.getAttribute(ExifInterface.TAG_FOCAL_LENGTH);  this.gpsAltitude=inFile.getAttribute(ExifInterface.TAG_GPS_ALTITUDE);  this.gpsAltitudeRef=inFile.getAttribute(ExifInterface.TAG_GPS_ALTITUDE_REF);  this.gpsDateStamp=inFile.getAttribute(ExifInterface.TAG_GPS_DATESTAMP);  this.gpsLatitude=inFile.getAttribute(ExifInterface.TAG_GPS_LATITUDE);  this.gpsLatitudeRef=inFile.getAttribute(ExifInterface.TAG_GPS_LATITUDE_REF);  this.gpsLongitude=inFile.getAttribute(ExifInterface.TAG_GPS_LONGITUDE);  this.gpsLongitudeRef=inFile.getAttribute(ExifInterface.TAG_GPS_LONGITUDE_REF);  this.gpsProcessingMethod=inFile.getAttribute(ExifInterface.TAG_GPS_PROCESSING_METHOD);  this.gpsTimestamp=inFile.getAttribute(ExifInterface.TAG_GPS_TIMESTAMP);  this.iso=inFile.getAttribute(ExifInterface.TAG_ISO);  this.make=inFile.getAttribute(ExifInterface.TAG_MAKE);  this.model=inFile.getAttribute(ExifInterface.TAG_MODEL);  this.orientation=inFile.getAttribute(ExifInterface.TAG_ORIENTATION);  this.whiteBalance=inFile.getAttribute(ExifInterface.TAG_WHITE_BALANCE);}  }
class C{  private void writeInstalledComponentXML() throws Exception {  assert installedFilesNames != null;  File installedFolder=infoFile.getParentFile();  String archiveFilename=archiveFile.getName();  String compdescFilename=archiveFilename.substring(0,archiveFilename.lastIndexOf('.')) + "-component.xml";  File compdescFile=new File(installedFolder,compdescFilename);  Document doc=createComponentXML();  DomUtils.document2File(doc,compdescFile);}  }
class C{  public static Map<String,Object> createUserPrefMap(GenericValue rec) throws GeneralException {  return addPrefToMap(rec,new LinkedHashMap<String,Object>());}  }
class C{  public static ISpaceQuery create(Class<?> entryClass,ISpacePredicate predicate){  return new CustomSpaceQuery(entryClass,predicate);}  }
class C{  public NewsfeedSaveListQuery listId(Integer value){  return unsafeParam("list_id",value);}  }
class C{  public List<String> updateDeletionStatus(List<String> loadIds,LoadMetadataDetails[] listOfLoadFolderDetailsArray,List<String> invalidLoadIds){  for (  String loadId : loadIds) {    boolean loadFound=false;    for (    LoadMetadataDetails loadMetadata : listOfLoadFolderDetailsArray) {      if (loadId.equalsIgnoreCase(loadMetadata.getLoadName())) {        if (CarbonCommonConstants.SEGMENT_COMPACTED.equalsIgnoreCase(loadMetadata.getLoadStatus())) {          LOG.error("Cannot delete the Segment which is compacted. Segment is " + loadId);          invalidLoadIds.add(loadId);          return invalidLoadIds;        }        if (!CarbonCommonConstants.MARKED_FOR_DELETE.equals(loadMetadata.getLoadStatus())) {          loadFound=true;          loadMetadata.setLoadStatus(CarbonCommonConstants.MARKED_FOR_DELETE);          loadMetadata.setModificationOrdeletionTimesStamp(readCurrentTime());          LOG.info("Segment ID " + loadId + " Marked for Delete");        }        break;      }    }    if (!loadFound) {      LOG.audit("Delete segment by ID is failed. No matching segment id found :" + loadId);      invalidLoadIds.add(loadId);      return invalidLoadIds;    }  }  return invalidLoadIds;}  }
class C{  public ChangeSet decrement(String path,int delta){  return increment(path,-delta);}  }
class C{  public static boolean onRender(Entity entity,double x,double y,double z,float yaw,float partialTicks){  GlStateManager.pushMatrix();  final boolean successful=OpenModLoader.getEventBus().post(new Shadows(entity,x,y,z,yaw,partialTicks));  GlStateManager.popMatrix();  return successful;}  }
class C{  public String process(Item item) throws ProcessException {  int count=0;  Item inPhrase=SUB_PHRASE_PATH.findItem(item);  for (Item p=inPhrase; p != null; p=p.getPrevious()) {    count++;  }  return Integer.toString(rail(count));}  }
class C{  public AuthenticationException(Throwable cause){  super(cause);}  }
class C{  public static byte[] toByteArray(InputStream input,int size) throws IOException {  if (size < 0) {    throw new IllegalArgumentException("Size must be equal or greater than zero: " + size);  }  if (size == 0) {    return new byte[0];  }  byte[] data=new byte[size];  int offset=0;  int readed;  while (offset < size && (readed=input.read(data,offset,size - offset)) != EOF) {    offset+=readed;  }  if (offset != size) {    throw new IOException("Unexpected readed size. current: " + offset + ", excepted: "+ size);  }  return data;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("show replaceToolbar=" + !isSelected() + ";");}  }
class C{  private static boolean isNullValue(String value,String valueMeaning){  if (value == null) {    LOGGER.warning("Setting null " + valueMeaning + "!");    return true;  }  return false;}  }
class C{  public static Document parseDocument(Reader inputData,boolean validating) throws ParserConfigurationException, SAXException, IOException {  DocumentBuilder builder=createDocumentBuilder(validating);  return builder.parse(new InputSource(inputData));}  }
class C{  public FriendsSearchQuery fields(UserField... value){  return unsafeParam("fields",value);}  }
class C{  private ByteBuffer initBuffer(GSByteArrayOutputStream bos){  ByteBuffer byteBuffer=wrap(bos);  _bufferCache.set(byteBuffer);  return byteBuffer;}  }
class C{  public static synchronized String delVar(String namespace,String variable){  if (isNullValue(namespace,"namespace") || isNullValue(variable,"variable")) {    return null;  }  if (!variables.containsKey(namespace)) {    return null;  }  Map<String,String> namespaceVariables=variables.get(namespace);  String result=namespaceVariables.remove(variable);  if (namespaceVariables.isEmpty()) {    variables.remove(namespace);  }  return result;}  }
class C{  public void rememberTransition(@NonNull final View coveringView,@NonNull final PointF touchPoint){  this.coveringView=coveringView;  this.touchPoint=touchPoint;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  ChartViewer viewer=(ChartViewer)getViewer();  ChartColorManager chartColors=viewer.getChartColorManager();  np.matchIgnoreCase("set color=");  Color color=np.getColor();  String series=null;  if (np.peekMatchIgnoreCase("series")) {    np.matchIgnoreCase("series=");    series=np.getLabelRespectCase();  }  String className=null;  if (np.peekMatchIgnoreCase("class")) {    np.matchIgnoreCase("class=");    className=np.getLabelRespectCase();  }  np.matchIgnoreCase(";");  if (series != null)   chartColors.setSampleColor(series,color);  if (className != null)   chartColors.setClassColor(className,color);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_main);  if (savedInstanceState == null) {    Fragment fragment=new MainFragment();    getFragmentManager().beginTransaction().replace(R.id.fragmentContainer,fragment).commit();  }}  }
class C{  public ViewsAnimator withDelayBetweenEachChild(final int delayBetweenEachChild){  this.delayBetweenEachChild=delayBetweenEachChild;  return this;}  }
class C{  public void initialiseSelectedRuleIndex(){  this.selectedRuleIndex=0;}  }
class C{  public AudioMoveToAlbumQuery albumId(Integer value){  return unsafeParam("album_id",value);}  }
class C{  private ManifestModInfo loadMod(File file,Manifest manifest){  ManifestModInfo container=ManifestModInfo.create(file,manifest);  if (container == null) {    log.error("Found invalid manifest in file " + file);    return null;  }  log.info("Found mod " + container.getName() + " with id "+ container.getModID());  if (container.getModID().isEmpty()) {    throw new RuntimeException("Empty mod ID for mod '" + container.getName() + "'!");  }  for (  char c : container.getModID().toCharArray()) {    if (c != '-' && c != '_' && !CharSet.ASCII_ALPHA_LOWER.contains(c) && !CharSet.ASCII_NUMERIC.contains(c)) {      throw new RuntimeException("Illegal characters in ID '" + container.getModID() + "' for mod '"+ container.getName()+ "'.");    }  }  if (container.getModID().equals("oml")) {    throw new RuntimeException("'oml' is a reserved mod id!");  }  if (container.getName() == null || container.getName().isEmpty()) {    throw new RuntimeException("The mod must set a non-empty name!");  }  container.getVersion();  if (!container.getMinecraftVersion().equals(OpenModLoader.getMinecraftVersion())) {    log.warn("Mod '%s' is expecting Minecraft %s, but we are running on Minecraft %s!",container.getName(),container.getMinecraftVersion(),OpenModLoader.getMinecraftVersion());  }  if (container.getSide() != Side.UNIVERSAL && container.getSide() != OMLStrippableTransformer.getSide()) {    log.info("Invalid side %s for mod %s. The mod will not be loaded.",OMLStrippableTransformer.getSide(),container.getName());  }  return container;}  }
class C{  public AdsGetAdsPostsReachQuery(VkApiClient client,UserActor actor,int accountId,String adsIds){  super(client,"ads.getAdsPostsReach",Utils.buildParametrizedType(List.class,PostStats.class));  accessToken(actor.getAccessToken());  accountId(accountId);  adsIds(adsIds);}  }
class C{  public Builder buttonTextColor(int buttonTextColor){  this.buttonTextColor=buttonTextColor;  return this;}  }
class C{  private static WidgetDecorator createDecorator(NlComponent component,ConstraintWidget widget){  WidgetDecorator decorator=null;  if (component.getTagName().equalsIgnoreCase(SdkConstants.TEXT_VIEW)) {    decorator=new TextWidget(widget,ConstraintUtilities.getResolvedText(component));  } else   if (component.getTagName().equalsIgnoreCase(SdkConstants.BUTTON)) {    decorator=new ButtonWidget(widget,ConstraintUtilities.getResolvedText(component));  } else   if (component.getTagName().equalsIgnoreCase(SdkConstants.RADIO_BUTTON)) {    decorator=new RadiobuttonWidget(widget,ConstraintUtilities.getResolvedText(component));  } else   if (component.getTagName().equalsIgnoreCase(SdkConstants.CHECK_BOX)) {    decorator=new CheckboxWidget(widget,ConstraintUtilities.getResolvedText(component));  } else   if (component.getTagName().equalsIgnoreCase(SdkConstants.SWITCH)) {    decorator=new SwitchWidget(widget,ConstraintUtilities.getResolvedText(component));  } else   if (component.getTagName().equalsIgnoreCase(SdkConstants.IMAGE_VIEW)) {    decorator=new ImageViewWidget(widget);  } else   if (component.getTagName().equalsIgnoreCase(SdkConstants.WEB_VIEW)) {    decorator=new WebViewWidget(widget);  } else   if (component.getTagName().equalsIgnoreCase(SdkConstants.EDIT_TEXT)) {    decorator=new TextWidget(widget,ConstraintUtilities.getResolvedText(component));  }  if (decorator == null) {    decorator=new WidgetDecorator(widget);  }  return decorator;}  }
class C{  public static float scalb(final float f,final int n){  if ((n > -127) && (n < 128)) {    return f * Float.intBitsToFloat((n + 127) << 23);  }  if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {    return f;  }  if (n < -277) {    return (f > 0) ? 0.0f : -0.0f;  }  if (n > 276) {    return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;  }  final int bits=Float.floatToIntBits(f);  final int sign=bits & 0x80000000;  int exponent=(bits >>> 23) & 0xff;  int mantissa=bits & 0x007fffff;  int scaledExponent=exponent + n;  if (n < 0) {    if (scaledExponent > 0) {      return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);    } else     if (scaledExponent > -24) {      mantissa|=1 << 23;      final int mostSignificantLostBit=mantissa & (1 << (-scaledExponent));      mantissa>>>=1 - scaledExponent;      if (mostSignificantLostBit != 0) {        mantissa++;      }      return Float.intBitsToFloat(sign | mantissa);    } else {      return (sign == 0) ? 0.0f : -0.0f;    }  } else {    if (exponent == 0) {      while ((mantissa >>> 23) != 1) {        mantissa<<=1;        --scaledExponent;      }      ++scaledExponent;      mantissa&=0x007fffff;      if (scaledExponent < 255) {        return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);      } else {        return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;      }    } else     if (scaledExponent < 255) {      return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);    } else {      return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;    }  }}  }
class C{  @Deprecated public boolean isReverseOrder(){  return mIsReversed;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_STIGMA_ENCHANT_HIDDEN_SKILL(DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1402944,descriptionId);}  }
class C{  public static int dipToPX(final Context ctx,float dip){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dip,ctx.getResources().getDisplayMetrics());}  }
class C{  protected void escapeString(String str){  if (str == null) {    m_out.print("null");    return;  }  int len=str.length();  for (int i=0; i < len; ++i) {    char c=str.charAt(i);    if ((c < LOWER_RANGE && c != VALID_CHARS[0] && c != VALID_CHARS[1] && c != VALID_CHARS[2]) || (c > UPPER_RANGE)) {      m_out.print("&#");      m_out.print(Integer.toString(c));      m_out.print(';');    } else {      boolean valid=true;      for (int j=INVALID.length - 1; j >= 0; --j) {        if (INVALID[j] == c) {          valid=false;          m_out.print(VALID[j]);          break;        }      }      if (valid) {        m_out.print(c);      }    }  }}  }
class C{  public UShort registerUri(String namespaceUri){  UShort index=namespaceTable.addUri(namespaceUri);  logger.info("registered namespace index={}, uri={}",index,namespaceUri);  return index;}  }
class C{  static Token complementRanges(Token token){  if (token.type != RANGE && token.type != NRANGE)   throw new IllegalArgumentException("Token#complementRanges(): must be RANGE: " + token.type);  RangeToken tok=(RangeToken)token;  tok.sortRanges();  tok.compactRanges();  int len=tok.ranges.length + 2;  if (tok.ranges[0] == 0)   len-=2;  int last=tok.ranges[tok.ranges.length - 1];  if (last == UTF16_MAX)   len-=2;  RangeToken ret=Token.createRange();  ret.ranges=new int[len];  int wp=0;  if (tok.ranges[0] > 0) {    ret.ranges[wp++]=0;    ret.ranges[wp++]=tok.ranges[0] - 1;  }  for (int i=1; i < tok.ranges.length - 2; i+=2) {    ret.ranges[wp++]=tok.ranges[i] + 1;    ret.ranges[wp++]=tok.ranges[i + 1] - 1;  }  if (last != UTF16_MAX) {    ret.ranges[wp++]=last + 1;    ret.ranges[wp]=UTF16_MAX;  }  ret.setCompacted();  return ret;}  }
class C{  private Type<?> findInterface(final Class<?> theInterface){  Type<?> theInterfaceType=null;  LinkedList<Type<?>> types=new LinkedList<Type<?>>();  types.add(this);  while (theInterfaceType == null && !types.isEmpty()) {    Type<?> currentType=types.removeFirst();    if (theInterface.equals(currentType.getRawType())) {      theInterfaceType=currentType;    } else     if (!currentType.equals(TypeFactory.TYPE_OF_OBJECT)) {      types.addAll(Arrays.asList(currentType.getInterfaces()));      types.add(currentType.getSuperType());    }  }  return theInterfaceType;}  }
class C{  public static final void emoteStartAttacking(Npc owner){  Creature target=(Creature)owner.getTarget();  owner.unsetState(CreatureState.WALKING);  if (!owner.isInState(CreatureState.WEAPON_EQUIPPED)) {    owner.setState(CreatureState.WEAPON_EQUIPPED);    PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.START_EMOTE2,0,target.getObjectId()));    PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.ATTACKMODE,0,target.getObjectId()));  }}  }
class C{  @NonNull public static StorableFence not(@NonNull StorableFence fence){  StorableFence metaFence=new StorableFence(Type.META);  metaFence.mNotFence=fence;  return metaFence;}  }
class C{  public void put(String key,File file,String contentType) throws FileNotFoundException {  if (key != null && file != null) {    fileParams.put(key,new FileWrapper(file,contentType));  }}  }
class C{  public static java.sql.Date toSqlDate(String monthStr,String dayStr,String yearStr){  java.util.Date newDate=toDate(monthStr,dayStr,yearStr,"0","0","0");  if (newDate != null) {    return new java.sql.Date(newDate.getTime());  } else {    return null;  }}  }
class C{  private void unexpectedCommandError(String command){  error("command '@%s' is unexpected in this context",command);}  }
class C{  private static int compareInt(final int a,final int b){  int result=0;  if (a > b) {    result=1;  } else   if (a < b) {    result=-1;  }  return result;}  }
class C{  public static BookKeeperClientBuilder newBuilder(){  return new BookKeeperClientBuilder();}  }
class C{  @NotNull public static String listAllEmotions(@NotNull Emotion emotion){  return emotion.scores.scores().entrySet().stream().map(null).collect(Collectors.joining());}  }
class C{  static public String numberToString(Number n) throws JSONException {  if (n == null) {    throw new JSONException("Null pointer");  }  testValidity(n);  String s=n.toString();  if (s.indexOf('.') > 0 && s.indexOf('e') < 0 && s.indexOf('E') < 0) {    while (s.endsWith("0")) {      s=s.substring(0,s.length() - 1);    }    if (s.endsWith(".")) {      s=s.substring(0,s.length() - 1);    }  }  return s;}  }
class C{  public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){  if (tag != cp.tag)   return tag - cp.tag;  CONSTANT_String_info cu=(CONSTANT_String_info)cp;  return ((CONSTANT_Utf8_info)(constant_pool[string_index])).compareTo(cp_constant_pool[cu.string_index]);}  }
class C{  public void monitor(String key){  Timer t=new Timer(true);  t.schedule(new WatchableRegistration(key),10 * 1000,10 * 1000);}  }
class C{  public void loadMithraConfiguration(String mithraConfigXml){  MithraRuntimeType runtimeType=loadConfigXml(mithraConfigXml);  this.loadMithraConfiguration(runtimeType);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public PackageOrTypeAccess fullCopy(){  PackageOrTypeAccess tree=(PackageOrTypeAccess)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private void prepareIsUseInvertedIndex(List<CarbonDimension> dims,GraphConfigurationInfo graphConfig){  List<Boolean> isUseInvertedIndexList=new ArrayList<Boolean>();  for (  CarbonDimension dimension : dims) {    if (dimension.isUseInvertedIndnex()) {      isUseInvertedIndexList.add(true);    } else {      isUseInvertedIndexList.add(false);    }  }  graphConfig.setIsUseInvertedIndex(isUseInvertedIndexList.toArray(new Boolean[isUseInvertedIndexList.size()]));}  }
class C{  public void init$Children(){  children=new ASTNode[5];  setChild(new List(),2);  setChild(new List(),3);  setChild(new Opt(),4);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_InteralSkill_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1201270,skillname);}  }
class C{  public static boolean isCorsPreflight(String requestMethod,SecurityContext securityContext){  return HttpMethod.OPTIONS.equals(requestMethod) && (securityContext == null || securityContext.getUserPrincipal() == null);}  }
class C{  public static final boolean isExpired(long time){  return time < System.currentTimeMillis();}  }
class C{  public int searchForGraphInIndex(DocumentNGramGraph dgNewGraph){  int idgName=0;  NGramCachedGraphComparator ngcIntra=new NGramCachedGraphComparator();  Set<String> graphSet=indexOfGraphs.keySet();  DocumentNGramGraph dgSeg=(DocumentNGramGraph)dgNewGraph.clone();  for (  String graphName : graphSet) {    DocumentNGramGraph ClassGraph=indexOfGraphs.get(graphName);    GraphSimilarity gs;    gs=ngcIntra.getSimilarityBetween(dgSeg,ClassGraph);    if (calcOverallSimilarity(gs) >= maxForMerging) {      idgName=Integer.valueOf(graphName);      break;    } else     if (calcOverallSimilarity(gs) >= minForMerging) {      idgName=Integer.valueOf(graphName);      ClassGraph.mergeGraph(dgSeg,1 - (dNameInstanceCount.getValue(graphName) / (dNameInstanceCount.getValue(graphName) + 1)));      dNameInstanceCount.increaseValue(graphName,1.0);      break;    }    if (1.0 - gs.ContainmentSimilarity > 10e-5) {      dgSeg=dgSeg.allNotIn(ClassGraph);    }  }  if (idgName == 0) {    if (!indexOfGraphs.isEmpty()) {      idgName=graphSet.size() + 1;    } else {      idgName++;    }    indexOfGraphs.put(Integer.toString(idgName),dgSeg);  }  return idgName;}  }
class C{  public int compare(File file1,File file2){  String suffix1=FilenameUtils.getExtension(file1.getName());  String suffix2=FilenameUtils.getExtension(file2.getName());  return caseSensitivity.checkCompareTo(suffix1,suffix2);}  }
class C{  @Override public String substringData(int offset,int count) throws DOMException {  if (fData == null)   return null;  if (count < 0 || offset < 0 || offset > fData.length())   throw new DOMException(DOMException.INDEX_SIZE_ERR,"parameter error");  if (offset + count >= fData.length())   return fData.substring(offset);  return fData.substring(offset,offset + count);}  }
class C{  public void exitApp(){  this.webView.getPluginManager().postMessage("exit",null);}  }
class C{  public void write(DataInput in,int length) throws IOException {  buffer.write(in,length);}  }
class C{  public void editText(String txt,Rectangle r){  if (m_editing) {    stopEditing();  }  m_editing=true;  m_editor.setBounds(r.x,r.y,r.width,r.height);  m_editor.setText(txt);  m_editor.setVisible(true);  m_editor.setCaretPosition(txt.length());  m_editor.requestFocus();}  }
class C{  public void requestAuthReconnection(AionConnection client){  if (loginServer == null || loginServer.getState() != State.AUTHED) {    client.close(false);    return;  }synchronized (this) {    if (loginRequests.containsKey(client.getAccount().getId())) {      return;    }    loginRequests.put(client.getAccount().getId(),client);  }  loginServer.sendPacket(new SM_ACCOUNT_RECONNECT_KEY(client.getAccount().getId()));}  }
class C{  @Override public boolean endContentModel(int[] currentState){  boolean isFinal=false;  int state=currentState[0];  return state >= 0;}  }
class C{  public PathOptions build(){  PathOptions options=new PathOptions();  options.stroke=this.stroke;  options.color=this.color;  options.weight=this.weight;  options.fill=this.fill;  options.fillColor=this.fillColor;  options.fillOpacity=this.fillOpacity;  options.fillRule=this.fillRule;  options.dashArray=this.dashArray;  options.lineCap=this.lineCap;  options.lineJoin=this.lineJoin;  options.clickable=this.clickable;  options.pointerEvents=this.pointerEvents;  options.className=this.className;  return options;}  }
class C{  public boolean isNull(int index) throws LazyException {  LazyNode token=getValueToken(index);  if (token.type == LazyNode.VALUE_NULL)   return true;  return false;}  }
class C{  public boolean isSPD(){  return isspd;}  }
class C{  public static ServerGroup loadFromFile(IniFileReader iniReader) throws MyException {  ServerGroup serverGroup;  ServerInfo serverInfo;  ServerInfo[] servers;  ServerComparator compObj=new ServerComparator();  int keep_alive;  int group_count;  int server_index;  String[] szServers;  String[] parts;  serverGroup=new ServerGroup();  keep_alive=iniReader.getIntValue("keep_alive",0);  serverGroup.keep_alive=keep_alive != 0;  group_count=iniReader.getIntValue("group_count",0);  if (group_count <= 0) {    throw new MyException("Invalid group_count: " + group_count);  }  serverGroup.groups=new ServerInfo[group_count][];  serverGroup.servers=new ServerInfo[0];  for (int i=0; i < group_count; i++) {    szServers=iniReader.getValues("group" + i);    if (szServers == null || szServers.length == 0) {      throw new MyException("item \"group" + i + "\" in "+ iniReader.getConfFilename()+ " not found");    }    serverGroup.groups[i]=new ServerInfo[0];    for (int k=0; k < szServers.length; k++) {      parts=szServers[k].split("\\:",2);      if (parts.length != 2) {        throw new MyException("the value of item \"group" + i + "\" is invalid, the correct format is host:port");      }      serverInfo=new ServerInfo(new InetSocketAddress(parts[0].trim(),Integer.parseInt(parts[1].trim())));      server_index=java.util.Arrays.binarySearch(serverGroup.servers,serverInfo,compObj);      if (server_index < 0) {        servers=new ServerInfo[serverGroup.servers.length + 1];        if (serverGroup.servers.length > 0) {          System.arraycopy(serverGroup.servers,0,servers,0,serverGroup.servers.length);        }        servers[serverGroup.servers.length]=serverInfo;        java.util.Arrays.sort(servers,compObj);        serverGroup.servers=servers;        server_index=java.util.Arrays.binarySearch(serverGroup.servers,serverInfo,compObj);      }      if (java.util.Arrays.binarySearch(serverGroup.groups[i],serverInfo,compObj) < 0) {        servers=new ServerInfo[serverGroup.groups[i].length + 1];        if (serverGroup.groups[i].length > 0) {          System.arraycopy(serverGroup.groups[i],0,servers,0,serverGroup.groups[i].length);        }        servers[serverGroup.groups[i].length]=serverGroup.servers[server_index];        java.util.Arrays.sort(servers,compObj);        serverGroup.groups[i]=servers;      }    }  }  return serverGroup;}  }
class C{  public void createSymEdgesConnecting(UniqueVertexGraph gGraph,String sStartNode,List lOtherNodes,HashMap hAppearenceHistogram){  if (lOtherNodes != null)   if (lOtherNodes.size() == 0) {    VertexImpl v=new VertexImpl();    v.setLabel(sStartNode);    try {      gGraph.add(v);    } catch (    Exception e) {      e.printStackTrace(System.err);    }    return;  }  java.util.Iterator iIter=lOtherNodes.iterator();  Vertex vOldA=gr.demokritos.iit.jinsect.utils.locateVertexInGraph(gGraph,sStartNode);  Vertex vA;  if (vOldA != null)   vA=vOldA; else {    vA=new VertexImpl();    vA.setLabel(sStartNode);    try {      gGraph.add(vA);    } catch (    Exception e) {    }  }  int iCnt=0;  while (iIter.hasNext()) {    VertexImpl vB=new VertexImpl();    vB.setLabel((String)iIter.next());    if (eclLocator == null)     eclLocator=new EdgeCachedLocator(10);    WeightedEdge weCorrectEdge=(WeightedEdge)eclLocator.locateDirectedEdgeInGraph(gGraph,vA,vB);    Distribution dDist=null;    if (weCorrectEdge == null) {      dDist=new Distribution();    } else {      dDist=(Distribution)EdgeDistros.get(weCorrectEdge);      if (dDist == null) {        dDist=new Distribution();      }    }    dDist.increaseValue(Double.valueOf(++iCnt),1);    try {      if (weCorrectEdge == null) {        WeightedEdge e=gGraph.addEdge(vA,vB,0.0);        eclLocator.addedEdge(e);        EdgeDistros.put(e,dDist);      } else {        EdgeDistros.put(weCorrectEdge,dDist);      }    } catch (    Exception e) {      e.printStackTrace();    }    weCorrectEdge=(WeightedEdge)eclLocator.locateDirectedEdgeInGraph(gGraph,vB,vA);    if (weCorrectEdge == null) {      dDist=new Distribution();    }    dDist.increaseValue(Double.valueOf(iCnt),1);    try {      if (weCorrectEdge == null) {        WeightedEdge e=gGraph.addEdge(vB,vA,0.0);        eclLocator.addedEdge(e);        EdgeDistros.put(e,dDist);      } else {        dDist=(Distribution)EdgeDistros.get(weCorrectEdge);        if (dDist == null) {          dDist=new Distribution();        }        weCorrectEdge.setWeight(0.0);        EdgeDistros.put(weCorrectEdge,dDist);      }    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  @Override public boolean isXIncludeAware(){  try {    return xmlReader.getFeature(XINCLUDE_FEATURE);  } catch (  SAXException exc) {    return false;  }}  }
class C{  @Nullable protected CompilationUnit findCompilationUnit(String className) throws IOException, CompileException {  Resource sourceResource=this.sourceFinder.findResource(ClassFile.getSourceResourceName(className));  JavaSourceIClassLoader.LOGGER.log(Level.FINE,"sourceResource={0}",sourceResource);  if (sourceResource == null)   return null;  InputStream inputStream=sourceResource.open();  try {    Scanner scanner=new Scanner(sourceResource.getFileName(),inputStream,this.optionalCharacterEncoding);    Parser parser=new Parser(scanner);    parser.setWarningHandler(this.optionalWarningHandler);    return parser.parseCompilationUnit();  }  finally {    try {      inputStream.close();    } catch (    IOException ex) {    }  }}  }
class C{  public DateTimeFormatter generateDateTimeFormatter(DateTimeZone timeZone){  return FULLY_OPTIONAL_DATETIME_FORMATTER.withZone(timeZone);}  }
class C{  public void start(){  this.startTime=this.world.getTotalWorldTime();  this.stopTime=0;}  }
class C{  public static String createUIDFromName(Object name,String typeName){  if (name == null)   throw new RuntimeException("CreateUIDFromName: a non-null object must be supplied for name.");  if (typeName == null)   throw new RuntimeException("CreateUIDFromName: a non-null string must be supplied for className.");  String basicName;  boolean validate;  if (_serUID) {    try {      basicName=new String(mc.getMarshObject(name).getBytes(),"ISO-8859-1");      validate=false;    } catch (    IOException e) {      throw new RuntimeException(e);    }  } else {    basicName=getUID(name);    validate=true;  }  final String uid=_factory.createUidFromTypeAndId(typeName,basicName,validate);  return uid.length() == 0 ? null : uid;}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((getId() == null) ? 0 : getId().hashCode());  result=prime * result + ((getAccount() == null) ? 0 : getAccount().hashCode());  result=prime * result + ((getPassword() == null) ? 0 : getPassword().hashCode());  result=prime * result + ((getPhone() == null) ? 0 : getPhone().hashCode());  result=prime * result + ((getSex() == null) ? 0 : getSex().hashCode());  result=prime * result + ((getUserName() == null) ? 0 : getUserName().hashCode());  result=prime * result + ((getAvatar() == null) ? 0 : getAvatar().hashCode());  result=prime * result + ((getUserType() == null) ? 0 : getUserType().hashCode());  result=prime * result + ((getDeptId() == null) ? 0 : getDeptId().hashCode());  result=prime * result + ((getLocked() == null) ? 0 : getLocked().hashCode());  result=prime * result + ((getEnable() == null) ? 0 : getEnable().hashCode());  result=prime * result + ((getRemark() == null) ? 0 : getRemark().hashCode());  result=prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());  result=prime * result + ((getCreateBy() == null) ? 0 : getCreateBy().hashCode());  result=prime * result + ((getUpdateTime() == null) ? 0 : getUpdateTime().hashCode());  result=prime * result + ((getUpdateBy() == null) ? 0 : getUpdateBy().hashCode());  return result;}  }
class C{  @Override public void visitLocalVariable(String name,String desc,String signature,Label start,Label end,int index){  if (index < 1 || currentIndex >= numberOfParameters || name == null)   return;  parameterNames[currentIndex]=name;  currentIndex++;}  }
class C{  public void start(){  if (startTime != 0L) {    notReliable=true;  }  startTime=System.currentTimeMillis();}  }
class C{  public HttpAuthHeader(String header){  if (header != null) {    parseHeader(header);  }}  }
class C{  public int id(){  return id;}  }
class C{  public Object toObject(SpaceDocument document){  FromDocumentConvertionContext conversionContext=new FromDocumentConvertionContext();  return toObjectInternal(document,conversionContext);}  }
class C{  private static void validateURL(SpaceURL spaceURL) throws SpaceURLValidationException {  Enumeration names=spaceURL.propertyNames();  while (names.hasMoreElements()) {    String property=names.nextElement().toString();    if (_logger.isLoggable(Level.FINE))     _logger.fine("Validating Space URL property: " + property + " = "+ spaceURL.getProperty(property));    if (!urlElements.contains(property.toLowerCase()))     throw new SpaceURLValidationException("Invalid space url property - '" + property + "'");  }}  }
class C{  public void update(){  while (edgeSource.hasNext()) {    Edge e=edgeSource.next();    if (set.contains(e.getSrc()))     addMethod(e.getTgt());  }  while (unprocessedMethods.hasNext()) {    MethodOrMethodContext m=unprocessedMethods.next();    Iterator<Edge> targets=cg.edgesOutOf(m);    if (filter != null)     targets=filter.wrap(targets);    addMethods(new Targets(targets));  }}  }
class C{  public void action(){synchronized (myAgent) {    NGramDocumentComparatorAgent a=(NGramDocumentComparatorAgent)myAgent;    ACLMessage msg=new ACLMessage(ACLMessage.AGREE);    msg.setSender(a.getAID());    msg.addReceiver(a.ResultConsumer);    try {      msg.setContentObject(a.getName());    } catch (    IOException ex) {      System.err.println("Cannot send move completion message. Sending empty message.");      ex.printStackTrace(System.err);    }    a.send(msg);    if (!a.Silent) {synchronized (System.err) {        System.err.println("Sending move completion message");      }    }    a.addBehaviour(new ReceiveTextsBehaviour(a,100));  }}  }
class C{  public static long lowestOnBitForLevel(int level){  return 1L << (2 * (MAX_LEVEL - level));}  }
class C{  public DatabaseGetUniversitiesQuery q(String value){  return unsafeParam("q",value);}  }
class C{  public static Map<String,Object> checkPaymentMethodIdForNew(HttpServletRequest request,String paymentMethodId,String ccParamPrefix,String eftParamPrefix) throws GeneralException {  String origPaymentMethodId=paymentMethodId;  Collection<MapProcessor> paramValidators=null;  String serviceName;  Map<String,Object> overrideParams=new HashMap<String,Object>();  String paramPrefix;  if (paymentMethodId != null && paymentMethodId.startsWith("_NEW_CREDIT_CARD_")) {    if (Boolean.FALSE.equals(request.getAttribute("checkoutUseNewRecords"))) {      Map<String,Object> result=ServiceUtil.returnSuccess();      result.put("paymentMethodId",null);      result.put("origPaymentMethodId",origPaymentMethodId);      return result;    }    paramPrefix=ccParamPrefix + paymentMethodId.substring("_NEW_CREDIT_CARD_".length());    String addrContactMechId=getRequestAttribOrParam(request,paramPrefix + "contactMechId");    if (UtilValidate.isNotEmpty(addrContactMechId)) {      if ("_NEW_".equals(addrContactMechId)) {        serviceName="createCreditCardAndAddress";        paramValidators=UtilMisc.<MapProcessor>toList(SimpleMapProcessorProcessor.getInstance(request,"component://accounting/script/org/ofbiz/accounting/payment/PaymentMapProcs.xml","createCreditCard"),getPostalAddressValidator(request));        overrideParams.put("contactMechId",null);      } else {        serviceName="createCreditCard";        paramValidators=UtilMisc.<MapProcessor>toList(SimpleMapProcessorProcessor.getInstance(request,"component://accounting/script/org/ofbiz/accounting/payment/PaymentMapProcs.xml","createCreditCard"));      }    } else {      return ServiceUtil.returnError("No contact mech (billing address) specified for new credit card");    }  } else   if (paymentMethodId != null && paymentMethodId.startsWith("_NEW_EFT_ACCOUNT_")) {    if (Boolean.FALSE.equals(request.getAttribute("checkoutUseNewRecords"))) {      Map<String,Object> result=ServiceUtil.returnSuccess();      result.put("paymentMethodId",null);      result.put("origPaymentMethodId",origPaymentMethodId);      return result;    }    paramPrefix=eftParamPrefix + paymentMethodId.substring("_NEW_EFT_ACCOUNT_".length());    String addrContactMechId=getRequestAttribOrParam(request,paramPrefix + "contactMechId");    if (UtilValidate.isNotEmpty(addrContactMechId)) {      if ("_NEW_".equals(addrContactMechId)) {        serviceName="createEftAccountAndAddress";        paramValidators=UtilMisc.<MapProcessor>toList(SimpleMapProcessorProcessor.getInstance(request,"component://accounting/script/org/ofbiz/accounting/payment/PaymentMapProcs.xml","createEftAccount"),getPostalAddressValidator(request));        overrideParams.put("contactMechId",null);      } else {        serviceName="createEftAccount";        paramValidators=UtilMisc.<MapProcessor>toList(SimpleMapProcessorProcessor.getInstance(request,"component://accounting/script/org/ofbiz/accounting/payment/PaymentMapProcs.xml","createEftAccount"));      }    } else {      return ServiceUtil.returnError("No contact mech (billing address) specified for new EFT account");    }  } else {    Map<String,Object> result=ServiceUtil.returnSuccess();    result.put("paymentMethodId",paymentMethodId);    result.put("origPaymentMethodId",origPaymentMethodId);    return result;  }  Map<String,Object> servResult=runServiceFromParams(request,paramPrefix,serviceName,overrideParams,paramValidators);  if (!ServiceUtil.isSuccess(servResult)) {    Debug.logInfo("Could not create new pay method during checkout: " + ServiceUtil.getErrorMessage(servResult),module);    return servResult;  } else {    paymentMethodId=(String)servResult.get("paymentMethodId");  }  saveToNewPaymentMethodIdMap(request,origPaymentMethodId,paymentMethodId);  Map<String,Object> result=ServiceUtil.returnSuccess();  result.put("paymentMethodId",paymentMethodId);  result.put("origPaymentMethodId",origPaymentMethodId);  result.put("paramPrefix",paramPrefix);  return result;}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  public SPTKPitchReaderWriter(double[] contour,PitchFileHeader header){  this.contour=contour;  this.header=header;}  }
class C{  public PacketBuilder send(String id){  if (!specs.containsKey(id))   throw new IllegalArgumentException("Invalid PacketSpec name " + id);  return new PacketBuilder(this,specs.get(id));}  }
class C{  public FisheyeDistortion(){  this(4);}  }
class C{  public static boolean batch(WebSocketImpl ws,ByteChannel sockchannel) throws IOException {  ByteBuffer buffer=ws.outQueue.peek();  WrappedByteChannel c=null;  if (buffer == null) {    if (sockchannel instanceof WrappedByteChannel) {      c=(WrappedByteChannel)sockchannel;      if (c.isNeedWrite()) {        c.writeMore();      }    }  } else {    do {      sockchannel.write(buffer);      if (buffer.remaining() > 0) {        return false;      } else {        ws.outQueue.poll();        buffer=ws.outQueue.peek();      }    } while (buffer != null);  }  if (ws != null && ws.outQueue.isEmpty() && ws.isFlushAndClose() && ws.getDraft() != null && ws.getDraft().getRole() != null && ws.getDraft().getRole() == Role.SERVER) {synchronized (ws) {      ws.closeConnection();    }  }  return c != null ? !((WrappedByteChannel)sockchannel).isNeedWrite() : true;}  }
class C{  private void makeOrmTest(int id){switch (id) {case 0:    testSave();  break;case 1:testInsert();break;case 2:testUpdate();break;case 3:testUpdateColumn();break;case 4:testQueryAll();break;case 5:testQueryByWhere();break;case 6:testQueryByID();break;case 7:testQueryAnyUwant();break;case 8:testMapping();break;case 9:testDelete();break;case 10:testDeleteByIndex();break;case 11:testDeleteByWhereBuilder();break;case 12:testDeleteAll();break;case 13:testLargeScaleUseLite();break;case 14:testLargeScaleUseSystem();break;default :break;}}  }
class C{  public NewsfeedSearchQueryWithExtended searchExtended(UserActor actor){  return new NewsfeedSearchQueryWithExtended(getClient(),actor);}  }
class C{  public void notifyPanelTouched(){  getOverlayPanelContent().notifyPanelTouched();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Sprint_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200416,skillname);}  }
class C{  public PropertiesAccessor(Properties p,boolean letSystemPropertiesOverride,Map<String,String> stringReplacements){  this.p=p;  this.isSystemOverrides=letSystemPropertiesOverride;  this.replacements=stringReplacements;}  }
class C{  @Override public void write(int b) throws IOException {  throw exception;}  }
class C{  public OpenForReadResult openForRead(Uri uri,boolean skipThreadCheck) throws IOException {  if (!skipThreadCheck) {    assertBackgroundThread();  }switch (getUriType(uri)) {case URI_TYPE_FILE:{      FileInputStream inputStream=new FileInputStream(uri.getPath());      String mimeType=getMimeTypeFromPath(uri.getPath());      long length=inputStream.getChannel().size();      return new OpenForReadResult(uri,inputStream,mimeType,length,null);    }case URI_TYPE_ASSET:{    String assetPath=uri.getPath().substring(15);    AssetFileDescriptor assetFd=null;    InputStream inputStream;    long length=-1;    try {      assetFd=assetManager.openFd(assetPath);      inputStream=assetFd.createInputStream();      length=assetFd.getLength();    } catch (    FileNotFoundException e) {      inputStream=assetManager.open(assetPath);    }    String mimeType=getMimeTypeFromPath(assetPath);    return new OpenForReadResult(uri,inputStream,mimeType,length,assetFd);  }case URI_TYPE_CONTENT:case URI_TYPE_RESOURCE:{  String mimeType=contentResolver.getType(uri);  AssetFileDescriptor assetFd=contentResolver.openAssetFileDescriptor(uri,"r");  InputStream inputStream=assetFd.createInputStream();  long length=assetFd.getLength();  return new OpenForReadResult(uri,inputStream,mimeType,length,assetFd);}case URI_TYPE_DATA:{OpenForReadResult ret=readDataUri(uri);if (ret == null) {  break;}return ret;}case URI_TYPE_HTTP:case URI_TYPE_HTTPS:{HttpURLConnection conn=(HttpURLConnection)new URL(uri.toString()).openConnection();conn.setDoInput(true);String mimeType=conn.getHeaderField("Content-Type");if (mimeType != null) {mimeType=mimeType.split(";")[0];}int length=conn.getContentLength();InputStream inputStream=conn.getInputStream();return new OpenForReadResult(uri,inputStream,mimeType,length,null);}case URI_TYPE_PLUGIN:{String pluginId=uri.getHost();CordovaPlugin plugin=pluginManager.getPlugin(pluginId);if (plugin == null) {throw new FileNotFoundException("Invalid plugin ID in URI: " + uri);}return plugin.handleOpenForRead(uri);}}throw new FileNotFoundException("URI not supported by CordovaResourceApi: " + uri);}  }
class C{  @Override public DataTagAddress clone(){  DataTagAddress clonedAddress=null;  try {    clonedAddress=(DataTagAddress)super.clone();    if (this.hardwareAddress != null) {      clonedAddress.hardwareAddress=this.hardwareAddress.clone();    }    if (this.addressParameters != null) {      clonedAddress.addressParameters=new HashMap<>(addressParameters);    }  } catch (  CloneNotSupportedException e) {    e.printStackTrace();  }  return clonedAddress;}  }
class C{  public String toString(){  StringBuffer text=new StringBuffer();  if (m_InfoGains == null) {    text.append("Information Gain attribute evaluator has not been built");  } else {    text.append("\tInformation Gain Ranking Filter");    if (!m_missing_merge) {      text.append("\n\tMissing values treated as seperate");    }    if (m_Binarize) {      text.append("\n\tNumeric attributes are just binarized");    }  }  text.append("\n");  return text.toString();}  }
class C{  public static void deleteAircraft(AirMapAircraft aircraft,@Nullable AirMapCallback<Void> callback){  PilotService.deleteAircraft(aircraft,callback);}  }
class C{  @Override public LifecycleListener[] findLifecycleListeners(){  return lifecycle.findLifecycleListeners();}  }
class C{  private void generateFilledPath(final ILineDataSet dataSet,final int startIndex,final int endIndex,final Path outputPath){  final float fillMin=dataSet.getFillFormatter().getFillLinePosition(dataSet,mDataProvider);  final float phaseY=mAnimator.getPhaseY();  final boolean isDrawSteppedEnabled=dataSet.getMode() == LineDataSet.Mode.STEPPED;  final Path filled=outputPath;  filled.reset();  final Entry entry=dataSet.getEntryForIndex(startIndex);  filled.moveTo(entry.getX(),fillMin);  filled.lineTo(entry.getX(),entry.getY() * phaseY);  Entry currentEntry=null;  Entry previousEntry=null;  for (int x=startIndex + 1; x <= endIndex; x++) {    currentEntry=dataSet.getEntryForIndex(x);    if (isDrawSteppedEnabled && previousEntry != null) {      filled.lineTo(currentEntry.getX(),previousEntry.getY() * phaseY);    }    filled.lineTo(currentEntry.getX(),currentEntry.getY() * phaseY);    previousEntry=currentEntry;  }  if (currentEntry != null) {    filled.lineTo(currentEntry.getX(),fillMin);  }  filled.close();}  }
class C{  public void hiliteLabel(Node v,NodeData data){  NodeView nv=viewer.getNV(v);  if (nv.getLocation() == null)   return;  Point apt=nv.getLabelPosition(viewer.trans);  if (apt == null)   return;  gc.setColor(ProgramProperties.SELECTION_COLOR_ADDITIONAL_TEXT);  if (!nv.getLabelVisible() && nv.getLabel() != null) {    gc.setFont(nv.getFont());    gc.drawString(nv.getLabel(),apt.x,apt.y);  }  if (data.getSummarized().length > 1 || (data.getSummarized().length == 1 && data.getSummarized()[0] > 0)) {    gc.setFont(selectionFont);    StringBuilder buf=new StringBuilder();    if (data.getCountAssigned() > 0) {      buf.append("Ass=");      for (      int value : data.getAssigned()) {        buf.append(String.format("%,d  ",value));      }      gc.drawString(buf.toString(),apt.x,apt.y+=14);    }    buf=new StringBuilder();    buf.append("Sum=");    for (    int value : data.getSummarized()) {      buf.append(String.format("%,d  ",value));    }    gc.drawString(buf.toString(),apt.x,apt.y+=12);  }  if (data.getUpPValue() != -1) {    gc.drawString("UPv=" + (float)data.getUpPValue(),apt.x,apt.y+=12);  }  if (data.getDownPValue() != -1) {    gc.drawString("DPv=" + (float)data.getDownPValue(),apt.x,apt.y+=12);  }}  }
class C{  protected boolean isToolbarEnable(){  return true;}  }
class C{  public void onFailure(int statusCode,Header[] headers,Throwable throwable,JSONArray errorResponse){}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public UnknownType fullCopy(){  UnknownType tree=(UnknownType)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public KeyValueProperty(final String key,final String value){  this.key=new SimpleStringProperty(key);  this.value=new SimpleStringProperty(value);}  }
class C{  public void processUtterance(Utterance utterance) throws ProcessException {  Viterbi vd;  Relation segs=utterance.getRelation(Relation.SEGMENT);  utterance.setObject(SampleInfo.UTT_NAME,clunitDB.getSampleInfo());  utterance.setObject("sts_list",clunitDB.getSts());  vd=new Viterbi(segs,clunitDB);  for (Item s=segs.getHead(); s != null; s=s.getNext()) {    setUnitName(s);  }  vd.decode();  if (!vd.result("selected_unit")) {    utterance.getVoice().error("clunits: can't find path");  }  vd.copyFeature("unit_prev_move");  vd.copyFeature("unit_this_move");  Relation unitRelation=utterance.createRelation(Relation.UNIT);  for (Item s=segs.getHead(); s != null; s=s.getNext()) {    Item unit=unitRelation.appendItem();    FeatureSet unitFeatureSet=unit.getFeatures();    int unitEntry=s.getFeatures().getInt("selected_unit");    unitFeatureSet.setString("name",s.getFeatures().getString("name"));    int unitStart;    int unitEnd;    String clunitName=s.getFeatures().getString("clunit_name");    if (s.getFeatures().isPresent("unit_this_move")) {      unitStart=s.getFeatures().getInt("unit_this_move");    } else {      unitStart=clunitDB.getStart(unitEntry);    }    if (s.getNext() != null && s.getNext().getFeatures().isPresent("unit_prev_move")) {      unitEnd=s.getNext().getFeatures().getInt("unit_prev_move");    } else {      unitEnd=clunitDB.getEnd(unitEntry);    }    unitFeatureSet.setInt("unit_entry",unitEntry);    ClusterUnit clunit=new ClusterUnit(clunitDB,clunitName,unitStart,unitEnd);    unitFeatureSet.setObject("unit",clunit);    if (true) {      unitFeatureSet.setInt("unit_start",clunit.getStart());      unitFeatureSet.setInt("unit_end",clunit.getEnd());      unitFeatureSet.setInt("instance",unitEntry - clunitDB.getUnitIndex(clunitName,0));    }    if (DEBUG) {      debug(" sr " + clunitDB.getSampleInfo().getSampleRate() + " "+ s.getFeatures().getFloat("end")+ " "+ (int)(s.getFeatures().getFloat("end") * clunitDB.getSampleInfo().getSampleRate()));    }    unitFeatureSet.setInt("target_end",(int)(s.getFeatures().getFloat("end") * clunitDB.getSampleInfo().getSampleRate()));  }}  }
class C{  void paintGridCell(Graphics2D gr2d,FontRenderContext render,int index){  if (index >= cellCount)   return;  int x=(((index - cornerIndex) % panelColumns) * horizStep) + PANEL_MARGIN;  int y=(((index - cornerIndex) / panelColumns) * vertiStep) + PANEL_MARGIN;  gr2d.setColor(GRID_COLOUR);  gr2d.fillRect(x,y,(horizStep + GRID_WIDTH),(vertiStep + GRID_WIDTH));  if (index == clickIndex) {    gr2d.setColor(TEXT_COLOUR);  } else   if (index == hoverIndex) {  } else {    gr2d.setColor(PANEL_COLOUR);  }  if ((index == selectedChar) && (selectedFont.compareTo(charMap4.getDisplayFont().getFontName()) == 0)) {    gr2d.setColor(SELECTED_COLOUR);  }  gr2d.fillRect((x + GRID_WIDTH),(y + GRID_WIDTH),(horizStep - GRID_WIDTH),(vertiStep - GRID_WIDTH));  gr2d.setColor((index == clickIndex) ? PANEL_COLOUR : TEXT_COLOUR);  if (CharMap4.isGlyphFlag()) {    int[] list=new int[1];    list[0]=cellGlyph[index];    GlyphVector glyvector=panelFont.createGlyphVector(render,list);    gr2d.drawGlyphVector(glyvector,(x + GRID_WIDTH + TEXT_MARGIN+ ((maxWidth - ((int)glyvector.getGlyphMetrics(0).getAdvanceX())) / 2)),(y + GRID_WIDTH + TEXT_MARGIN+ lineAscent));  } else {    int ch=cellChar[index];    gr2d.setFont(panelFont);    gr2d.drawString(CharMap4.charToString(ch),(x + GRID_WIDTH + TEXT_MARGIN+ ((maxWidth - fontData.charWidth(ch)) / 2)),(y + GRID_WIDTH + TEXT_MARGIN+ lineAscent));  }}  }
class C{  public static void circle(double x,double y,double radius){  if (!(radius >= 0))   throw new IllegalArgumentException("radius must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * radius);  double hs=factorY(2 * radius);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  protected void unregister(){  try {    long endTime=SystemTime.timeMillis() + MAX_UNEXPORT_DELAY;    boolean unexported=false;    while (!unexported && (SystemTime.timeMillis() < endTime)) {      unexported=_containerExporter.unexport(true);      if (!unexported)       Thread.yield();    }    if (!unexported)     _containerExporter.unexport(true);  } catch (  Exception ex) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,ex.toString(),ex);    }  }}  }
class C{  private BrowserOperatingSystemMappingComparator(){}  }
class C{  public void add(Predicate p,SizeAction f){  super.add(p,f);}  }
class C{  public static boolean contentEquals(Reader input1,Reader input2) throws IOException {  input1=toBufferedReader(input1);  input2=toBufferedReader(input2);  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  BinarySearchTreeNode<E> removeMaximum(BinarySearchTreeNode<E> node){  node=this.getMaximum(node);  if (node == null)   return null;  if (node == this.root) {    this.root=node.left;  } else   if (node.parent.right == node) {    node.parent.right=node.left;  } else {    node.parent.left=node.left;  }  this.size--;  return node;}  }
class C{  private boolean showFilterDialog(Class<?> type,Filter filter){  rootNode=new FilterNode();  if (model != null) {    model.setRoot(rootNode);    FilterNode filterNode=(FilterNode)rootNode;    filterNode.setType(type);    if (filter != null) {      populateFilter((FilterNode)rootNode,filter);    }  }  setVisible(true);  return okButtonPressed;}  }
class C{  private final boolean eq(long v1,long v2){  return v1 == v2;}  }
class C{  public SM_MAIL_SERVICE(int[] letterIds){  super(null);  this.serviceId=6;  this.letterIds=letterIds;}  }
class C{  private int computeOrphan2AncestorMappingRec(Node v,Map<Integer,Integer> orphan2AncestorMapping,Set<Integer> orphans) throws CanceledException {  progressListener.incrementProgress();  int taxId=(Integer)v.getInfo();  if (taxId < 0)   return 0;  int below=0;  Set<Integer> orphansBelow=new HashSet<>();  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {    Node w=e.getTarget();    below+=computeOrphan2AncestorMappingRec(w,orphan2AncestorMapping,orphansBelow);  }  Integer count=taxId2count.get(taxId);  if (count == null)   count=0;  if (below + count >= minSupport) {    for (    Integer id : orphansBelow) {      orphan2AncestorMapping.put(id,taxId);    }  } else {    if (count > 0) {      orphansBelow.add(taxId);    }    orphans.addAll(orphansBelow);  }  return below + count;}  }
class C{  @Pollable(async=true,message="Process asset: {assetId}",expectedSubTaskNumber=2) public PollableFuture<Asset> processAsset(@MsgArg(name="assetId") Long assetId,@ParentTask PollableTask parentTask,@InjectCurrentTask PollableTask currentTask) throws UnsupportedAssetFilterTypeException, InterruptedException, AssetExtractionConflictException {  logger.info("Start processing asset id: {}",assetId);  Asset asset=assetRepository.findOne(assetId);  waitForCurrentAssetExtractionToFinish(asset);  AssetExtraction assetExtraction=createAssetExtraction(asset,currentTask);  assetExtractor.performAssetExtraction(assetExtraction,currentTask);  assetMappingService.mapAssetTextUnitAndCreateTMTextUnit(assetExtraction.getId(),asset.getRepository().getTm().getId(),assetId,currentTask);  markAssetExtractionAsLastSuccessful(asset,assetExtraction);  logger.info("Done processing asset id: {}",assetId);  return new PollableFutureTaskResult<>(asset);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setHasOptionsMenu(true);}  }
class C{  public static double[] interpolateNonZeroValues(double[] contour){  for (int i=0; i < contour.length; i++) {    if (contour[i] == 0) {      int index=findNextIndexNonZero(contour,i);      if (index == -1) {        for (int j=(i == 0 ? 1 : i); j < contour.length; j++) {          contour[j]=contour[j - 1];        }        break;      } else {        for (int j=i; j < index; j++) {          if (i == 0) {            contour[j]=contour[index];          } else {            contour[j]=contour[j - 1] + ((contour[index] - contour[i - 1]) / (index - i));          }        }        i=index - 1;      }    }  }  return contour;}  }
class C{  public void close() throws GenericDataSourceException {  if (_manualTX) {    if (Debug.verboseOn())     Debug.logVerbose("SQLProcessor:close() calling commit : _manualTX=" + _manualTX,module);    commit();  }  _sql=null;  if (_rs != null) {    try {      _rs.close();      if (Debug.verboseOn())       Debug.logVerbose("SQLProcessor:close() result close : _manualTX=" + _manualTX,module);    } catch (    SQLException sqle) {      Debug.logWarning(sqle.getMessage(),module);    }    _rs=null;  }  if (_ps != null) {    try {      _ps.close();      if (Debug.verboseOn())       Debug.logVerbose("SQLProcessor:close() preparedStatement close : _manualTX=" + _manualTX,module);    } catch (    SQLException sqle) {      Debug.logWarning(sqle.getMessage(),module);    }    _ps=null;  }  if ((_connection != null) && _bDeleteConnection) {    try {      _connection.close();      if (Debug.verboseOn())       Debug.logVerbose("SQLProcessor:close() connection close : _manualTX=" + _manualTX,module);    } catch (    SQLException sqle) {      Debug.logWarning(sqle.getMessage(),module);    }    _connection=null;  }}  }
class C{  public FieldConfigVendorOption(FieldConfigCommonData commonData,List<VendorOptionInterface> veList){  super(commonData);  this.veList=veList;  PrefManager.getInstance().addVendorOptionListener(this);}  }
class C{  public boolean isServiceUnitLoaded(String suName){  return this.loadedBundles.contains(suName);}  }
class C{  public static void calcTextSize(Paint paint,String demoText,FSize outputFSize){  Rect r=mCalcTextSizeRect;  r.set(0,0,0,0);  paint.getTextBounds(demoText,0,demoText.length(),r);  outputFSize.width=r.width();  outputFSize.height=r.height();}  }
class C{  public static void e(String tag,String msg){  if (LOG_ENABLE) {    Log.e(tag,buildMsg(msg));  }}  }
class C{  public void clearGetLatches(){  getLatches.clear();}  }
class C{  public static String javaNameToDbName(String javaName){  if (javaName == null)   return null;  if (javaName.length() <= 0)   return "";  StringBuilder dbName=new StringBuilder();  dbName.append(Character.toUpperCase(javaName.charAt(0)));  int namePos=1;  while (namePos < javaName.length()) {    char curChar=javaName.charAt(namePos);    if (Character.isUpperCase(curChar))     dbName.append('_');    dbName.append(Character.toUpperCase(curChar));    namePos++;  }  return dbName.toString();}  }
class C{  public Response doPost(String url){  return doPost(url,null);}  }
class C{  public void doMeasure(int widthMeasureSpec,int heightMeasureSpec){  if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) {    int tempSpec=widthMeasureSpec;    widthMeasureSpec=heightMeasureSpec;    heightMeasureSpec=tempSpec;  }  int width=View.getDefaultSize(mVideoWidth,widthMeasureSpec);  int height=View.getDefaultSize(mVideoHeight,heightMeasureSpec);  if (mCurrentAspectRatio == IRenderView.AR_MATCH_PARENT) {    width=widthMeasureSpec;    height=heightMeasureSpec;  } else   if (mVideoWidth > 0 && mVideoHeight > 0) {    int widthSpecMode=View.MeasureSpec.getMode(widthMeasureSpec);    int widthSpecSize=View.MeasureSpec.getSize(widthMeasureSpec);    int heightSpecMode=View.MeasureSpec.getMode(heightMeasureSpec);    int heightSpecSize=View.MeasureSpec.getSize(heightMeasureSpec);    if (widthSpecMode == View.MeasureSpec.AT_MOST && heightSpecMode == View.MeasureSpec.AT_MOST) {      float specAspectRatio=(float)widthSpecSize / (float)heightSpecSize;      float displayAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_16_9_FIT_PARENT:        displayAspectRatio=16.0f / 9.0f;      if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270)       displayAspectRatio=1.0f / displayAspectRatio;    break;case IRenderView.AR_4_3_FIT_PARENT:  displayAspectRatio=4.0f / 3.0f;if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) displayAspectRatio=1.0f / displayAspectRatio;break;case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_ASPECT_FILL_PARENT:case IRenderView.AR_ASPECT_WRAP_CONTENT:default :displayAspectRatio=(float)mVideoWidth / (float)mVideoHeight;if (mVideoSarNum > 0 && mVideoSarDen > 0) displayAspectRatio=displayAspectRatio * mVideoSarNum / mVideoSarDen;break;}boolean shouldBeWider=displayAspectRatio > specAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_16_9_FIT_PARENT:case IRenderView.AR_4_3_FIT_PARENT:if (shouldBeWider) {width=widthSpecSize;height=(int)(width / displayAspectRatio);} else {height=heightSpecSize;width=(int)(height * displayAspectRatio);}break;case IRenderView.AR_ASPECT_FILL_PARENT:if (shouldBeWider) {height=heightSpecSize;width=(int)(height * displayAspectRatio);} else {width=widthSpecSize;height=(int)(width / displayAspectRatio);}break;case IRenderView.AR_ASPECT_WRAP_CONTENT:default :if (shouldBeWider) {width=Math.min(mVideoWidth,widthSpecSize);height=(int)(width / displayAspectRatio);} else {height=Math.min(mVideoHeight,heightSpecSize);width=(int)(height * displayAspectRatio);}break;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY && heightSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=heightSpecSize;if (mVideoWidth * height < width * mVideoHeight) {width=height * mVideoWidth / mVideoHeight;} else if (mVideoWidth * height > width * mVideoHeight) {height=width * mVideoHeight / mVideoWidth;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;}} else if (heightSpecMode == View.MeasureSpec.EXACTLY) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;}} else {width=mVideoWidth;height=mVideoHeight;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;}if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;}}} else {}mMeasuredWidth=width;mMeasuredHeight=height;}  }
class C{  public void drawScreen(int mouseX,int mouseY,float partialTicks){  if (this.errorTextDisplayStart != 0) {    long currentTime=System.currentTimeMillis();    if (currentTime - this.errorTextDisplayStart > ERROR_TEXT_TIMEOUT_MS) {      this.errorText="";      this.errorTextDisplayStart=0;    }  }  this.drawDefaultBackground();  this.drawCenteredString(this.fontRendererObj,this.title,this.width / 2,20,16777215);  this.drawString(this.fontRendererObj,this.question,this.width / 2 - 100,47,10526880);  this.drawString(this.fontRendererObj,this.errorText,this.width / 2 - 100,87,16711680);  this.guiTextField.drawTextBox();  super.drawScreen(mouseX,mouseY,partialTicks,false);}  }
class C{  @Override public void close() throws RemoteException {  tx.commit();}  }
class C{  private void restoreSnapshot(String snapshot) throws ParserConfigurationException, SAXException, IOException {  String xml=this.snapshots.get(snapshot);  String name=Simulation.DEFAULT_SIMULATION_NAME;synchronized (Simulation.LOCK) {    Camera oldCamera=this.simulation.getCamera();    Simulation simulation=XmlReader.fromXml(xml);    simulation.getCamera().setScale(oldCamera.getScale());    simulation.getCamera().setTranslation(oldCamera.getTranslation());    this.simulation=simulation;    name=this.simulation.getWorld().getUserData().toString();    this.pnlSimulation.setSimulation(this.simulation);    this.pnlContacts.setContactCounter(this.simulation.getContactCounter());  }  this.setTitle(this.getWindowTitle() + " - " + name);}  }
class C{  @PostConstruct public void init(){  LOGGER.info("Initializing the DataTag cache...");  try {    getCache().setNodeBulkLoadEnabled(true);  } catch (  UnsupportedOperationException ex) {    LOGGER.warn("setNodeBulkLoadEnabled() method threw an exception when " + "loading the cache (UnsupportedOperationException) - this is " + "normal behaviour in a single-server mode and can be ignored");  }  commonInit();  try {    getCache().setNodeBulkLoadEnabled(false);  } catch (  UnsupportedOperationException ex) {    LOGGER.warn("setNodeBulkLoadEnabled() method threw an exception when " + "loading the cache (UnsupportedOperationException) - this is " + "normal behaviour in a single-server mode and can be ignored");  }  LOGGER.info("... DataTag cache initialization complete.");}  }
class C{  public Builder prefix(String prefix){  this.prefix=prefix;  return this;}  }
class C{  public ObjectColumn(Class type,int nrows,int capacity,Object defaultValue){  super(type,defaultValue);  if (capacity < nrows) {    throw new IllegalArgumentException("Capacity value can not be less than the row count.");  }  m_values=new Object[capacity];  try {    Cloneable def=(Cloneable)defaultValue;    Method m=def.getClass().getMethod("clone",(Class[])null);    for (int i=0; i < capacity; ++i) {      m_values[i]=m.invoke(m_defaultValue,(Object[])null);    }  } catch (  Exception e) {    if (defaultValue != null) {      Logger.getLogger(getClass().getName()).fine("Default value of type \"" + defaultValue.getClass().getName() + "\" is not "+ "cloneable. Using Object reference directly.");    }    Arrays.fill(m_values,defaultValue);  }  m_size=nrows;}  }
class C{  public static void i(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg,throwable);}  }
class C{  private void parseAndAdd(String line){  StringTokenizer tokenizer=new StringTokenizer(line," ");  try {    String phoneme=tokenizer.nextToken();    String feature=tokenizer.nextToken();    String value=tokenizer.nextToken();    phonesetMap.put(getKey(phoneme,feature),value);  } catch (  NoSuchElementException nse) {    throw new Error("part of speech data in bad format at line " + lineCount);  }}  }
class C{  public void applyMirroredCorrection(ResultPoint[] points){  if (!mirrored || points == null || points.length < 3) {    return;  }  ResultPoint bottomLeft=points[0];  points[0]=points[2];  points[2]=bottomLeft;}  }
class C{  public VarcharConstant(String s){  type=new VarcharType(s.length());  val=s;}  }
class C{  static int addOrSubtract(int a,int b){  return a ^ b;}  }
class C{  @NotNull private File resolveName(@NotNull String name) throws IOException {  File file;  if (name.startsWith(ROOT)) {    file=new File(myTemplateRootFolder,name.substring(ROOT.length()));  } else   if (myLastTemplateFolders != null) {    file=new File(myLastTemplateFolders.peek(),name);  } else {    file=new File(myTemplateRootFolder,name);  }  return file.getCanonicalFile();}  }
class C{  private static double computeCorrelationDistanceBetweenClasses(String classA,String classB,Table<String,String,Double> seriesAndClass2Value){  final Set<String> series=seriesAndClass2Value.rowKeySet();  final ArrayList<Double> xValues=new ArrayList<>(series.size());  final ArrayList<Double> yValues=new ArrayList<>(series.size());  for (  String seriesName : series) {    xValues.add(seriesAndClass2Value.get(seriesName,classA));    yValues.add(seriesAndClass2Value.get(seriesName,classB));  }  return 1 - Correlation.computePersonsCorrelationCoefficent(series.size(),xValues,yValues);}  }
class C{  public static String makeFromClause(ModelEntity modelEntity,ModelFieldTypeReader modelFieldTypeReader,Datasource datasourceInfo) throws GenericEntityException {  StringBuilder sql=new StringBuilder(" FROM ");  if (modelEntity instanceof ModelViewEntity) {    ModelViewEntity modelViewEntity=(ModelViewEntity)modelEntity;    if ("ansi".equals(datasourceInfo.getJoinStyle()) || "ansi-no-parenthesis".equals(datasourceInfo.getJoinStyle())) {      boolean useParenthesis=true;      if ("ansi-no-parenthesis".equals(datasourceInfo.getJoinStyle())) {        useParenthesis=false;      }      Set<String> joinedAliasSet=new TreeSet<String>();      StringBuilder openParens=null;      if (useParenthesis)       openParens=new StringBuilder();      StringBuilder restOfStatement=new StringBuilder();      for (int i=0; i < modelViewEntity.getViewLinksSize(); i++) {        if (i > 0 && useParenthesis)         openParens.append('(');        ModelViewEntity.ModelViewLink viewLink=modelViewEntity.getViewLink(i);        ModelEntity linkEntity=modelViewEntity.getMemberModelEntity(viewLink.getEntityAlias());        ModelEntity relLinkEntity=modelViewEntity.getMemberModelEntity(viewLink.getRelEntityAlias());        if (i == 0) {          restOfStatement.append(makeViewTable(linkEntity,modelFieldTypeReader,datasourceInfo));          restOfStatement.append(" ");          restOfStatement.append(viewLink.getEntityAlias());          joinedAliasSet.add(viewLink.getEntityAlias());        } else {          if (!joinedAliasSet.contains(viewLink.getEntityAlias())) {            throw new GenericModelException("Tried to link the " + viewLink.getEntityAlias() + " alias to the "+ viewLink.getRelEntityAlias()+ " alias of the "+ modelViewEntity.getEntityName()+ " view-entity, but it is not the first view-link and has not been included in a previous view-link. In other words, the left/main alias isn't connected to the rest of the member-entities yet.");          }        }        joinedAliasSet.add(viewLink.getRelEntityAlias());        if (viewLink.isRelOptional()) {          restOfStatement.append(" LEFT OUTER JOIN ");        } else {          restOfStatement.append(" INNER JOIN ");        }        restOfStatement.append(makeViewTable(relLinkEntity,modelFieldTypeReader,datasourceInfo));        restOfStatement.append(" ");        restOfStatement.append(viewLink.getRelEntityAlias());        restOfStatement.append(" ON ");        StringBuilder condBuffer=new StringBuilder();        for (int j=0; j < viewLink.getKeyMapsSize(); j++) {          ModelKeyMap keyMap=viewLink.getKeyMap(j);          ModelField linkField=linkEntity.getField(keyMap.getFieldName());          if (linkField == null) {            throw new GenericModelException("Invalid field name in view-link key-map for the " + viewLink.getEntityAlias() + " and the "+ viewLink.getRelEntityAlias()+ " member-entities of the "+ modelViewEntity.getEntityName()+ " view-entity; the field ["+ keyMap.getFieldName()+ "] does not exist on the ["+ linkEntity.getEntityName()+ "] entity.");          }          ModelField relLinkField=relLinkEntity.getField(keyMap.getRelFieldName());          if (relLinkField == null) {            throw new GenericModelException("Invalid related field name in view-link key-map for the " + viewLink.getEntityAlias() + " and the "+ viewLink.getRelEntityAlias()+ " member-entities of the "+ modelViewEntity.getEntityName()+ " view-entity; the field ["+ keyMap.getRelFieldName()+ "] does not exist on the ["+ relLinkEntity.getEntityName()+ "] entity.");          }          if (condBuffer.length() > 0) {            condBuffer.append(" AND ");          }          condBuffer.append(viewLink.getEntityAlias());          condBuffer.append(".");          condBuffer.append(linkField.getColName());          condBuffer.append(" = ");          condBuffer.append(viewLink.getRelEntityAlias());          condBuffer.append(".");          condBuffer.append(relLinkField.getColName());        }        if (condBuffer.length() == 0) {          throw new GenericModelException("No view-link/join key-maps found for the " + viewLink.getEntityAlias() + " and the "+ viewLink.getRelEntityAlias()+ " member-entities of the "+ modelViewEntity.getEntityName()+ " view-entity.");        }        ModelViewEntity.ViewEntityCondition viewEntityCondition=viewLink.getViewEntityCondition();        if (viewEntityCondition != null) {          EntityCondition whereCondition=viewEntityCondition.getWhereCondition(modelFieldTypeReader,null);          if (whereCondition != null) {            condBuffer.append(" AND ");            condBuffer.append(whereCondition.makeWhereString(modelEntity,null,datasourceInfo));          }        }        restOfStatement.append(condBuffer.toString());        if (i < (modelViewEntity.getViewLinksSize() - 1) && useParenthesis)         restOfStatement.append(')');      }      if (useParenthesis)       sql.append(openParens.toString());      sql.append(restOfStatement.toString());      boolean fromEmpty=restOfStatement.length() == 0;      for (      String aliasName : modelViewEntity.getMemberModelMemberEntities().keySet()) {        ModelEntity fromEntity=modelViewEntity.getMemberModelEntity(aliasName);        if (!joinedAliasSet.contains(aliasName)) {          if (!fromEmpty)           sql.append(", ");          fromEmpty=false;          sql.append(makeViewTable(fromEntity,modelFieldTypeReader,datasourceInfo));          sql.append(" ");          sql.append(aliasName);        }      }    } else     if ("theta-oracle".equals(datasourceInfo.getJoinStyle()) || "theta-mssql".equals(datasourceInfo.getJoinStyle())) {      Iterator<String> meIter=modelViewEntity.getMemberModelMemberEntities().keySet().iterator();      while (meIter.hasNext()) {        String aliasName=meIter.next();        ModelEntity fromEntity=modelViewEntity.getMemberModelEntity(aliasName);        sql.append(makeViewTable(fromEntity,modelFieldTypeReader,datasourceInfo));        sql.append(" ");        sql.append(aliasName);        if (meIter.hasNext())         sql.append(", ");      }    } else {      throw new GenericModelException("The join-style " + datasourceInfo.getJoinStyle() + " is not yet supported");    }  } else {    sql.append(modelEntity.getTableName(datasourceInfo));  }  return sql.toString();}  }
class C{  public TextEditor detabify(){  return detabify(4);}  }
class C{  public DeferredDocumentImpl(){  this(false);}  }
class C{  private void initIdleStateTracking(){  mIdleTracker=new IdlenessTracker();  mIdleTracker.startTracking();}  }
class C{  static int applyMaskPenaltyRule3(ByteMatrix matrix){  int numPenalties=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      byte[] arrayY=array[y];      if (x + 6 < width && arrayY[x] == 1 && arrayY[x + 1] == 0 && arrayY[x + 2] == 1 && arrayY[x + 3] == 1 && arrayY[x + 4] == 1 && arrayY[x + 5] == 0 && arrayY[x + 6] == 1 && (isWhiteHorizontal(arrayY,x - 4,x) || isWhiteHorizontal(arrayY,x + 7,x + 11))) {        numPenalties++;      }      if (y + 6 < height && array[y][x] == 1 && array[y + 1][x] == 0 && array[y + 2][x] == 1 && array[y + 3][x] == 1 && array[y + 4][x] == 1 && array[y + 5][x] == 0 && array[y + 6][x] == 1 && (isWhiteVertical(array,x,y - 4,y) || isWhiteVertical(array,x,y + 7,y + 11))) {        numPenalties++;      }    }  }  return numPenalties * N3;}  }
class C{  private void showArrow(int whichArrow,int requestedX){  final View showArrow=(whichArrow == R.id.arrow_up) ? mArrowUp : mArrowDown;  final View hideArrow=(whichArrow == R.id.arrow_up) ? mArrowDown : mArrowUp;  final int arrowWidth=mArrowUp.getMeasuredWidth();  showArrow.setVisibility(View.VISIBLE);  ViewGroup.MarginLayoutParams param=(ViewGroup.MarginLayoutParams)showArrow.getLayoutParams();  param.leftMargin=requestedX - arrowWidth / 2;  hideArrow.setVisibility(View.INVISIBLE);}  }
class C{  public static float convertDpToPixel(float dp,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float px=dp * ((float)metrics.densityDpi / DisplayMetrics.DENSITY_DEFAULT);  return px;}  }
class C{  public boolean isFolder(){  return mMimeType != null && mMimeType.equals(MimeType.DIRECTORY);}  }
class C{  public Builder buttonPressedTextColor(int buttonPressedTextColor){  this.buttonPressedTextColor=buttonPressedTextColor;  return this;}  }
class C{  public void addTo(Document document){  document.addData(this);}  }
class C{  private void back_Position(){  sncX=(int)this.map_controler.get_Direc_Dis_X(this.map_controler.dir);  velocity.y=-80;  position.x+=sncX;  if (Math.abs(position.y - posY) <= 4) {    GetPath(a_Kind + 10);    status=ATTACK;  }}  }
class C{  public boolean isValidPoint(double x,double y){  if (x < xval[0] || x > xval[xval.length - 1] || y < yval[0] || y > yval[yval.length - 1]) {    return false;  } else {    return true;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_XPBoost_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201213,skilltarget,skillname);}  }
class C{  public WallRestoreQuery(VkApiClient client,UserActor actor){  super(client,"wall.restore",OkResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public static int floor_double(double value){  int i=(int)value;  return value < (double)i ? i - 1 : i;}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  Object oldValue=undoRedoObject.getOldValue();  fieldConfigVisitor.populateTextField(FieldIdEnum.TTF_SYMBOL,(String)oldValue);}  }
class C{  private synchronized void update(String query) throws SQLException {  Statement st=connection.createStatement();  int ok=st.executeUpdate(query);  if (ok == -1) {    throw new SQLException("DB problem with query: " + query);  }  st.close();}  }
class C{  public SimplePointChecker(final double relativeThreshold,final double absoluteThreshold){  super(relativeThreshold,absoluteThreshold);  maxIterationCount=ITERATION_CHECK_DISABLED;}  }
class C{  public static boolean contentEquals(InputStream input1,InputStream input2) throws IOException {  if (!(input1 instanceof BufferedInputStream)) {    input1=new BufferedInputStream(input1);  }  if (!(input2 instanceof BufferedInputStream)) {    input2=new BufferedInputStream(input2);  }  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  public SurfaceManager(Surface surface,SurfaceManager manager){  mSurface=surface;  mEGLSharedContext=manager.mEGLContext;  eglSetup();}  }
class C{  public void resourceDeleted(ISVNRemoteResource resource){  Iterator it=listeners.iterator();  while (it.hasNext()) {    IRepositoryListener listener=(IRepositoryListener)it.next();    listener.remoteResourceDeleted(resource);  }}  }
class C{  public CardinalityAggregation withDimensions(Set<Dimension> dimensions){  return new CardinalityAggregation(getName(),dimensions,byRow);}  }
class C{  public void initializeGeo(){switch (getConfiguredGeoType()) {case GEO_MESHES:    geoData=new RealGeoData();  break;case NO_GEO:geoData=new DummyGeoData();break;}log.info("Configured Geo type: " + getConfiguredGeoType());geoData.loadGeoMaps();}  }
class C{  public void renderImmediate(VisualItem item){  Graphics2D g2D=(Graphics2D)this.getGraphics();  prepareGraphics(g2D);  item.render(g2D);}  }
class C{  public void removeAndCreateNewLog(){  logMgrLock.lock();  try {    VanillaDb.fileMgr().rebuildLogFile();    appendNewBlock();  }  finally {    logMgrLock.unlock();  }}  }
class C{  public void save() throws IOException {  setPathIfApplicable(myAndroidSdkPathModified,SDK_DIR_PROPERTY,getAndroidSdkPathFromFile(),myNewAndroidSdkPath);  setPathIfApplicable(myAndroidNdkPathModified,NDK_DIR_PROPERTY,getAndroidNdkPathFromFile(),myNewAndroidNdkPath);  if (myAndroidSdkPathModified || myAndroidNdkPathModified) {    savePropertiesToFile(myProperties,myPropertiesFilePath,getHeaderComment());  }  myNewAndroidSdkPath=myNewAndroidNdkPath=null;  myAndroidSdkPathModified=myAndroidNdkPathModified=false;}  }
class C{  public void add(Predicate p,int shape){  super.add(p,new Integer(shape));}  }
class C{  public void zoomOut(){  MPPointF center=mViewPortHandler.getContentCenter();  mViewPortHandler.zoomOut(center.x,-center.y,mZoomOutMatrixBuffer);  mViewPortHandler.refresh(mZoomOutMatrixBuffer,this,false);  MPPointF.recycleInstance(center);  calculateOffsets();  postInvalidate();}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public static boolean isBookmarkInMobileBookmarksBranch(Context context,long nodeId){  Boolean result=chromeBrowserProviderCall(Boolean.class,ChromeBrowserProvider.CLIENT_API_IS_BOOKMARK_IN_MOBILE_BOOKMARKS_BRANCH,context,argsToBundle(nodeId));  return result != null ? result.booleanValue() : false;}  }
class C{  public ZWaveBasicWindowCoveringCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public static void updateState(@NonNull TransactionContext context,@NonNull TransactionResource resource,@NonNull String state,String msg){  Validate.notNull(context.getDataSource());  Validate.notNull(context.getId());  Validate.notNull(resource.getTable());  Validate.notNull(resource.getIdCol());  Validate.notNull(resource.getStateCol());  List<Object> paramList=new ArrayList<Object>(4);  StringBuilder sql=new StringBuilder().append("update ").append(resource.getTable()).append(" set ").append(resource.getStateCol()).append(" = ?");  paramList.add(state);  if (StringUtils.isNotBlank(resource.getMsgCol()) && StringUtils.isNotEmpty(msg)) {    sql.append(", ").append(resource.getMsgCol()).append(" = ?");    if (resource.getMsgMaxLength() > 0) {      msg=msg.length() > resource.getMsgMaxLength() ? msg.substring(0,resource.getMsgMaxLength()) : msg;    }    paramList.add(msg);  }  if (StringUtils.isNotBlank(resource.getHandleTimeCol())) {    sql.append(", ").append(resource.getHandleTimeCol()).append(" = ?");    paramList.add(new Date());  }  sql.append(" where ").append(resource.getIdCol()).append(" = ?");  paramList.add(context.getId());  new JdbcTemplate(context.getDataSource()).update(sql.toString(),paramList.toArray());}  }
class C{  private void initializeIfBookmarkModelLoaded(){  if (mEnhancedBookmarksModel.isBookmarkModelLoaded()) {    mSearchView.onEnhancedBookmarkDelegateInitialized(this);    mDrawerListView.onEnhancedBookmarkDelegateInitialized(this);    mContentView.onEnhancedBookmarkDelegateInitialized(this);    if (mStateStack.isEmpty()) {      setState(UIState.createStateFromUrl(getUrlFromPreference(),mEnhancedBookmarksModel));    } else     if (mStateStack.peek().mState == UIState.STATE_LOADING) {      String url=mStateStack.pop().mUrl;      setState(UIState.createStateFromUrl(url,mEnhancedBookmarksModel));    }  } else {    mContentView.showLoadingUi();    mDrawerListView.showLoadingUi();    mContentView.showLoadingUi();    if (mStateStack.isEmpty() || mStateStack.peek().mState != UIState.STATE_LOADING) {      setState(UIState.createLoadingState(getUrlFromPreference()));    } else     if (!mStateStack.isEmpty()) {      setState(mStateStack.pop());    }  }}  }
class C{  private ProxySearchStrategy findDesktopSpecificStrategy(){  Platform pf=PlatformUtil.getCurrentPlattform();  Desktop dt=PlatformUtil.getCurrentDesktop();  Logger.log(getClass(),LogLevel.TRACE,"Detecting system settings.");  ProxySearchStrategy strategy=null;  if (pf == Platform.WIN) {    Logger.log(getClass(),LogLevel.TRACE,"We are running on Windows.");    strategy=new WinProxySearchStrategy();  } else   if (dt == Desktop.KDE) {    Logger.log(getClass(),LogLevel.TRACE,"We are running on KDE.");    strategy=new KdeProxySearchStrategy();  } else   if (dt == Desktop.GNOME) {    Logger.log(getClass(),LogLevel.TRACE,"We are running on Gnome.");    strategy=new GnomeProxySearchStrategy();  } else   if (dt == Desktop.MAC_OS) {    Logger.log(getClass(),LogLevel.TRACE,"We are running on Mac OSX.");    strategy=new OsxProxySearchStrategy();  }  return strategy;}  }
class C{  public void startSync(){}  }
class C{  public INSECTMemoryDB(){  ObjectMap=new HashMap();}  }
class C{  public static void main(String[] args){  Hashtable hSwitches=utils.parseCommandLineSwitches(args);  if (utils.getSwitch(hSwitches,"?","").length() > 0) {    System.exit(0);  }  int NMin, Levels;  double DistFactor;  String SummaryFile, ModelDir;  boolean Silent, Merge, bAvoidSelfComparison;  try {    NMin=Integer.valueOf(utils.getSwitch(hSwitches,"nMin","4"));    Levels=Integer.valueOf(utils.getSwitch(hSwitches,"levels","5"));    DistFactor=Double.valueOf(utils.getSwitch(hSwitches,"distFactor","2"));    SummaryFile=utils.getSwitch(hSwitches,"summary","summary.txt");    ModelDir=utils.getSwitch(hSwitches,"modelDir","models" + System.getProperty("file.separator"));    Silent=utils.getSwitch(hSwitches,"s","FALSE").equals("TRUE");    bAvoidSelfComparison=utils.getSwitch(hSwitches,"avoidSelfComparison","FALSE").equals("TRUE");    if (!Silent)     System.err.println("Using parameters:\n" + hSwitches);  } catch (  ClassCastException cce) {    System.err.println("Malformed switch:" + cce.getMessage() + ". Aborting...");    return;  }  summarySingleFileHierEvaluator ssfeEval=new summarySingleFileHierEvaluator(NMin,DistFactor,Levels,bAvoidSelfComparison);  DocumentSet dsModels=new DocumentSet(ModelDir,1.0);  dsModels.createSets(true);  double dRes=Double.NaN;  Set<String> ssModels=dsModels.toFilenameSet(DocumentSet.FROM_WHOLE_SET);  dRes=ssfeEval.doCompare(SummaryFile,ssModels);  System.out.println(String.format("%12.10f",dRes));}  }
class C{  public TopNMetric(TopNMetricType type,String previousStop){  this.type=type;  this.metricName=Optional.empty();  this.nested=Optional.empty();  this.previousStop=Optional.of(previousStop);}  }
class C{  @Override public String toString(){  StringBuffer str=new StringBuffer();  if (fPublicId != null) {    str.append(fPublicId);  }  str.append(':');  if (fLiteralSystemId != null) {    str.append(fLiteralSystemId);  }  str.append(':');  if (fBaseSystemId != null) {    str.append(fBaseSystemId);  }  str.append(':');  if (fExpandedSystemId != null) {    str.append(fExpandedSystemId);  }  str.append(':');  if (fNamespace != null) {    str.append(fNamespace);  }  return str.toString();}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public void render(OutputStream out,int indent) throws IOException {  DotGraphUtility.renderLine(out,command,indent);}  }
class C{  public List<LogFile> searchRemoteLogs(String search){  List<LogFile> logs=new FastList<LogFile>();  if (!isConnected()) {    PacketSamurai.getUserInterface().log("You have to be connected to use the Remote Log Repository");    return null;  }  PostMethod post=new PostMethod(_repoLocation + "/rpc.php");  post.addParameter("user",getUserName());  post.addParameter("pass",getPassword());  CompoundXmlRequest req=new CompoundXmlRequest();  Request listReq=req.createRequest("list");  listReq.addPart(new RequestPart("matchQuery",search));  post.addParameter("req",req.toXml());  try {    int response=_httpClient.executeMethod(post);    if (response != HttpStatus.SC_OK) {    }    post.getResponseHeaders();    post.getResponseBodyAsStream();  } catch (  HttpException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  return logs;}  }
class C{  public HttpPost createReplicateRequest(String path){  return new HttpPost(String.format(REQUEST_STRING_WITH_PATH,authorIp,path,Commands.REPLICATE.getCommand()));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stun_END_A(String value0){  return new SM_SYSTEM_MESSAGE(1201137,value0);}  }
class C{  public static void gc2gc(double c1[],int m1,double g1,double c2[],int m2,double g2){  double[] gc2gc_buff=Arrays.copyOf(c1,m1 + 1);  c2[0]=gc2gc_buff[0];  for (int i=1; i <= m2; i++) {    double ss1=0.0;    double ss2=0.0;    int min=m1 < i ? m1 : i - 1;    for (int k=1; k <= min; k++) {      int mk=i - k;      double cc=gc2gc_buff[k] * c2[mk];      ss2+=k * cc;      ss1+=mk * cc;    }    if (i <= m1)     c2[i]=gc2gc_buff[i] + (g2 * ss2 - g1 * ss1) / i; else     c2[i]=(g2 * ss2 - g1 * ss1) / i;  }}  }
class C{  public static GeneralPath cardinalSpline(float pts[],int start,int npoints,float slack,boolean closed){  GeneralPath path=new GeneralPath();  path.moveTo(pts[start],pts[start + 1]);  return cardinalSpline(path,pts,start,npoints,slack,closed,0f,0f);}  }
class C{  public Bindings add(String property,JComboBox combo){  combo.addActionListener(this);  return add(new JComboBoxBinding(property,combo,0));}  }
class C{  public Fraction(int num,int den){  if (den == 0) {    throw new MathRuntimeException(LocalizedCoreFormats.ZERO_DENOMINATOR_IN_FRACTION,num,den);  }  if (den < 0) {    if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) {      throw new MathRuntimeException(LocalizedCoreFormats.OVERFLOW_IN_FRACTION,num,den);    }    num=-num;    den=-den;  }  final int d=ArithmeticUtils.gcd(num,den);  if (d > 1) {    num/=d;    den/=d;  }  if (den < 0) {    num=-num;    den=-den;  }  this.numerator=num;  this.denominator=den;}  }
class C{  public BetweenSpacePredicate(Comparable<?> low,Comparable<?> high){  this(low,high,null,true,true);}  }
class C{  public static BufferedImage toBufferedImage(Image image){  return ImageTransform.toBufferedImage(image,BufferedImage.TYPE_INT_ARGB_PRE);}  }
class C{  public void testAddService() throws Exception {  final VirtualFile file=myFixture.copyFileToProject("intentions/DummyService.java","src/com/example/DummyService.java");  myFixture.configureFromExistingVirtualFile(file);  final IntentionAction action=AndroidTestUtils.getIntentionAction(myFixture,"Add service to manifest");  assertNotNull(action);  action.invoke(getProject(),myFixture.getEditor(),myFixture.getFile());  myFixture.checkResultByFile("AndroidManifest.xml","intentions/DummyService_manifest_after.xml",true);}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof ExpandedRow)) {    return false;  }  ExpandedRow that=(ExpandedRow)o;  return this.pairs.equals(that.getPairs()) && wasReversed == that.wasReversed;}  }
class C{  @Override public Writer append(char value){  builder.append(value);  return this;}  }
class C{  public static SuperPrefs newInstance(Context context){  return new SuperPrefs(context);}  }
class C{  public MessagesSearchQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  @Override public boolean accept(File dir,String name){  if (filenameFilter != null) {    return filenameFilter.accept(dir,name);  } else {    return super.accept(dir,name);  }}  }
class C{  @NotNull public OCROnImageAction ocrOnImage(@NotNull String language,boolean detectOrientation,@NotNull InputStream image){  return new OCROnImageAction(cognitiveContext,language,detectOrientation,image);}  }
class C{  @Deprecated public static String translateName(String engName,Locale newLocale) throws MissingResourceException {  return PokeDictionary.translateName(engName,newLocale);}  }
class C{  public static boolean isRsaKey(Key key){  return "RSA".equals(key.getAlgorithm());}  }
class C{  public void addParameter(ParameterDeclaration node){  List<ParameterDeclaration> list=(parent == null || state == null) ? getParameterListNoTransform() : getParameterList();  list.addChild(node);}  }
class C{  public FriendsGetQueryWithFields listId(Integer value){  return unsafeParam("list_id",value);}  }
class C{  public static AnnotationGenerator v(){  return G.v().soot_jimple_toolkits_annotation_j5anno_AnnotationGenerator();}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  private void capacityWarn(){  if (warningCounter == 0) {    LOGGER.warn("The maximum capacity of the SynchroBuffer was reached (current size is " + buffer.size() + ") - FIFO was applied to the buffer.");    warningCounter=WARNING_FREQUENCY;  } else {    warningCounter=warningCounter - 1;  }}  }
class C{  private void updateSymbol(){  if (!Controller.getInstance().isPopulating()) {    String name=fieldConfigVisitor.getText(FieldIdEnum.NAME);    NamedLayer namedLayer=getStyleFactory().createNamedLayer();    namedLayer.setName(name);    List<FeatureTypeConstraint> ftcList=fieldConfigVisitor.getFeatureTypeConstraint(FieldIdEnum.LAYER_FEATURE_CONSTRAINTS);    if ((ftcList != null) && !ftcList.isEmpty()) {      FeatureTypeConstraint[] ftcArray=new FeatureTypeConstraint[ftcList.size()];      namedLayer.setLayerFeatureConstraints(ftcList.toArray(ftcArray));    }    StyledLayer existingStyledLayer=SelectedSymbol.getInstance().getStyledLayer();    if (existingStyledLayer instanceof NamedLayerImpl) {      NamedLayerImpl existingNamedLayer=(NamedLayerImpl)existingStyledLayer;      for (      Style style : existingNamedLayer.styles()) {        namedLayer.addStyle(style);      }    }    SelectedSymbol.getInstance().replaceStyledLayer(namedLayer);    this.fireUpdateSymbol();  }}  }
class C{  public void onUpdateFromExpandToMaximize(float percentage){  if (!isVisible())   return;  mHeightPx=0.f;  mTextOpacity=0.f;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_BC_NOT_ENOUGH_PARAMETER(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300919,value0,value1);}  }
class C{  private static String removeQuotesEncolosingOption(String fileName,String option) throws Exception {  String option1=removeQuoteCharactersIfNecessary(fileName,option,'"');  if (!option1.equals(option)) {    return option1;  }  return removeQuoteCharactersIfNecessary(fileName,option,'\'');}  }
class C{  public static <T>void addService(String url,Class<T> serviceInterface,T service,int port) throws RpcException {  ProviderConfig<T> providerConfig=new ProviderConfig<T>(serviceInterface,service);  providerConfig.setUrl(url);  providerConfig.getServerConfig().setPort(port);  addService(providerConfig);}  }
class C{  public int read(byte[] b,int off,int len) throws IOException {  if ((len % frameSize) != 0) {    len-=(len % frameSize);    if (len == 0) {      return 0;    }  }  if (frameLength != AudioSystem.NOT_SPECIFIED) {    if (framePos >= frameLength) {      return -1;    } else {      if ((len / frameSize) > (frameLength - framePos)) {        len=(int)(frameLength - framePos) * frameSize;      }    }  }  int bytesRead=0;  int thisOff=off;  if (pushBackLen > 0 && len >= pushBackLen) {    System.arraycopy(pushBackBuffer,0,b,off,pushBackLen);    thisOff+=pushBackLen;    len-=pushBackLen;    bytesRead+=pushBackLen;    pushBackLen=0;  }  int thisBytesRead=stream.read(b,thisOff,len);  if (thisBytesRead == -1) {    return -1;  }  if (thisBytesRead > 0) {    bytesRead+=thisBytesRead;  }  if (bytesRead > 0) {    pushBackLen=bytesRead % frameSize;    if (pushBackLen > 0) {      if (pushBackBuffer == null) {        pushBackBuffer=new byte[frameSize];      }      System.arraycopy(b,off + bytesRead - pushBackLen,pushBackBuffer,0,pushBackLen);      bytesRead-=pushBackLen;    }    framePos+=bytesRead / frameSize;  }  return bytesRead;}  }
class C{  private boolean isAnAncestor(String className){  for (  ClassNode parentNode : parentNodes) {    if (parentNode.name.equals(className)) {      return true;    }  }  return false;}  }
class C{  public GroupsBanUserQuery comment(String value){  return unsafeParam("comment",value);}  }
class C{  protected double[] computeObjectiveGradient(final double[] params){  return gradient.value(params);}  }
class C{  private String generateAccessToken(LoginReqDto reqDto,String role){  PlatformUser platformUser=new PlatformUser(reqDto.getUserId(),StringConstant.EMPTY_STRING,new ArrayList<GrantedAuthority>());  platformUser.setDeviceId(reqDto.getDeviceId());  platformUser.setPlatform(reqDto.getPlatform());  platformUser.setRole(role);  platformUser.setLoginTime(new Date().getTime());  String token=jwtService.generateToken(platformUser);  if (StringUtils.isEmpty(token))   throw new RuntimeException(ERR_FAIL_TO_CREATE_TOKEN);  return token;}  }
class C{  @Override protected void doRescheduleTask(Object task){  this.taskExecutor.execute((Runnable)task);}  }
class C{  public static void d(String tag,String msg){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg);}  }
class C{  @Override public void onError(String error){}  }
class C{  public boolean isSetSequenceId(){  return __isset_bit_vector.get(__SEQUENCEID_ISSET_ID);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysNoResist_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200634,skillcaster,skillname);}  }
class C{  public static MatD makeTranslationRotXY(double tx,double ty,double tz,double angleX,double angleY){  double cosX=Math.cos(Math.toRadians(angleX));  double sinX=Math.sin(Math.toRadians(angleX));  double cosY=Math.cos(Math.toRadians(angleY));  double sinY=Math.sin(Math.toRadians(angleY));  return new MatD(new double[]{cosY,sinX * sinY,-cosX * sinY,0,0,cosX,sinX,0,sinY,-sinX * cosY,cosX * cosY,0,tx,ty,tz,1});}  }
class C{  public JsonHttpResponseHandler(){  super(DEFAULT_CHARSET);}  }
class C{  public GatheringCursor queryGatheringItem(long id){  QueryHelper qh=new QueryHelper();  qh.Columns=null;  qh.Table=S.TABLE_GATHERING;  qh.Selection="g." + S.COLUMN_GATHERING_ITEM_ID + " = ? ";  qh.SelectionArgs=new String[]{"" + id};  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy="g." + S.COLUMN_GATHERING_RANK + " DESC, "+ "l."+ S.COLUMN_LOCATIONS_MAP+ " ASC";  qh.Limit=null;  return new GatheringCursor(wrapJoinHelper(builderGathering(),qh));}  }
class C{  protected void showModels(boolean show,EpoxyModel<?>... models){  showModels(Arrays.asList(models),show);}  }
class C{  public static void onAttackBegin(NpcAI2 npcAI,Creature creature){  Npc npc=npcAI.getOwner();  if (DataManager.NPC_SHOUT_DATA.hasAnyShout(npc.getPosition().getMapId(),npc.getNpcId(),ShoutEventType.ATTACK_BEGIN)) {    List<NpcShout> shouts=DataManager.NPC_SHOUT_DATA.getNpcShouts(npc.getPosition().getMapId(),npc.getNpcId(),ShoutEventType.ATTACK_BEGIN,null,0);    NpcShoutsService.getInstance().shout(npc,creature,shouts,0,false);    shouts.clear();    return;  }}  }
class C{  @Override protected void onPause(){  super.onPause();  Log.i(TAG,"onPause");  if (mCamera != null) {    mCamera.stopPreview();  }}  }
class C{  private void handleMultiChannelEndpointReportResponse(SerialMessage serialMessage,int offset) throws ZWaveSerialMessageException {  logger.debug("Process Multi-channel endpoint Report");  boolean changingNumberOfEndpoints=(serialMessage.getMessagePayloadByte(offset) & 0x80) != 0;  endpointsAreTheSameDeviceClass=(serialMessage.getMessagePayloadByte(offset) & 0x40) != 0;  int endpoints=serialMessage.getMessagePayloadByte(offset + 1) & 0x7F;  logger.debug("NODE {}: Changing number of endpoints = {}",getNode().getNodeId(),changingNumberOfEndpoints ? "true" : false);  logger.debug("NODE {}: Endpoints are the same device class = {}",getNode().getNodeId(),endpointsAreTheSameDeviceClass ? "true" : false);  logger.debug("NODE {}: Number of endpoints = {}",getNode().getNodeId(),endpoints);  if (changingNumberOfEndpoints) {    logger.warn("NODE {}: Changing number of endpoints, expect some weird behavior during multi channel handling.",getNode().getNodeId());  }  for (int i=1; i <= endpoints; i++) {    ZWaveEndpoint endpoint=new ZWaveEndpoint(i);    this.endpoints.put(i,endpoint);  }}  }
class C{  private static void format(long min,long max,SimpleDateFormat formatter,StringBuffer buf,FieldPosition pos){  if (min == max) {    formatter.format(new Date(min),buf,pos);  } else {    buf.append('[');    formatter.format(new Date(min),buf,pos);    buf.append(", ");    formatter.format(new Date(max),buf,pos);    buf.append(']');  }}  }
class C{  public static final void sort(double[] a,int[] b,int begin,int end){  mergesort(a,b,begin,end - 1);}  }
class C{  public ASCIIReader(InputStream inputStream,MessageFormatter messageFormatter,Locale locale){  this(inputStream,DEFAULT_BUFFER_SIZE,messageFormatter,locale);}  }
class C{  protected MarketRemoveFromAlbumQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  @Override public SubEquipmentCacheObject clone(){  return (SubEquipmentCacheObject)super.clone();}  }
class C{  public StatelessScrollableDataIterator(String entityName,SessionFactory sessionFactory,int fetchSize,boolean performOrderById){  super(entityName,sessionFactory,fetchSize,performOrderById);}  }
class C{  public double calculateResidualSumOfSquares(){  final RealVector residuals=calculateResiduals();  return residuals.dotProduct(residuals);}  }
class C{  public void onCompletion(MediaPlayer player){  Toast.makeText(this,String.format(getString(R.string.media_event_done,mFile.getFileName())),Toast.LENGTH_LONG).show();  if (mMediaController != null) {    player.seekTo(0);    processPauseRequest();    mMediaController.updatePausePlay();  } else {    processStopRequest(true);  }  return;}  }
class C{  public static HouseObject<?> createNew(House house,ItemTemplate itemTemplate){  if (itemTemplate.getActions() == null) {    throw new IncompleteArgumentException("template actions null");  }  SummonHouseObjectAction action=itemTemplate.getActions().getHouseObjectAction();  if (action == null) {    throw new IncompleteArgumentException("template actions miss SummonHouseObjectAction");  }  int objectTemplateId=action.getTemplateId();  HouseObject<?> obj=createNew(house,IDFactory.getInstance().nextId(),objectTemplateId);  if (obj.getObjectTemplate().getUseDays() > 0) {    int expireEnd=(int)(DateTime.now().plusDays(obj.getObjectTemplate().getUseDays()).getMillis() / 1000);    obj.setExpireTime(expireEnd);  }  return obj;}  }
class C{  private void printError(DOMError error){  int severity=error.getSeverity();  fOut.print("[");  if (severity == DOMError.SEVERITY_WARNING) {    fOut.print("Warning");  } else   if (severity == DOMError.SEVERITY_ERROR) {    fOut.print("Error");  } else {    fOut.print("FatalError");    eStatus=false;  }  fOut.print("] ");  DOMLocator locator=error.getLocation();  if (locator != null) {    fOut.print(locator.getLineNumber());    fOut.print(":");    fOut.print(locator.getColumnNumber());    fOut.print(":");    fOut.print(locator.getByteOffset());    fOut.print(",");    fOut.print(locator.getUtf16Offset());    Node node=locator.getRelatedNode();    if (node != null) {      fOut.print("[");      fOut.print(node.getNodeName());      fOut.print("]");    }    String systemId=locator.getUri();    if (systemId != null) {      int index=systemId.lastIndexOf('/');      if (index != -1)       systemId=systemId.substring(index + 1);      fOut.print(": ");      fOut.print(systemId);    }  }  fOut.print(":");  fOut.print(error.getMessage());  fOut.println();  fOut.flush();}  }
class C{  public UsersSearchQuery birthYear(Integer value){  return unsafeParam("birth_year",value);}  }
class C{  public IncompatibleComparatorException(String message){  super(message);}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  private static void drawSnapHorizontalIndicator(ViewTransform transform,Graphics2D g,SnapCandidate candidate){  ConstraintAnchor source=candidate.source;  ConstraintAnchor target=candidate.target;  ConstraintHandle sourceHandle=WidgetInteractionTargets.constraintHandle(source);  ConstraintHandle targetHandle=WidgetInteractionTargets.constraintHandle(target);  int x=transform.getSwingX(candidate.x);  if (targetHandle != null) {    x=transform.getSwingX(targetHandle.getDrawX());  }  int y1=transform.getSwingY(source.getOwner().getDrawY());  int y2=transform.getSwingY(source.getOwner().getDrawY() + source.getOwner().getHeight());  int y3=transform.getSwingY(target.getOwner().getDrawY());  int y4=transform.getSwingY(target.getOwner().getDrawY() + target.getOwner().getHeight());  int minY=Math.min(y1,y3);  int maxY=Math.max(y2,y4);  if (candidate.margin != 0) {    int x2=transform.getSwingX(sourceHandle.getDrawX());    String textMargin=String.valueOf(Math.abs(candidate.margin));    int yS=y2;    int yT=y4 + OVER_MARGIN / 2;    int mY=yS + OVER_MARGIN;    boolean textOver=false;    if (y1 < y3) {      yS=y1;      yT=y3 - OVER_MARGIN / 2;      mY=yS - OVER_MARGIN;      textOver=true;    }    drawSnapHorizontalMargin(transform,g,x,x2,mY,textMargin,textOver);    Graphics2D g2=(Graphics2D)g.create();    g2.setStroke(sDashedStroke);    g2.drawLine(x,yS,x,yT);    g2.dispose();  } else {    Graphics2D g2=(Graphics2D)g.create();    boolean insideIndicator=(source.getOwner().getParent() == candidate.target.getOwner()) || (candidate.target.getOwner() instanceof Guideline);    if (insideIndicator) {      g2.setStroke(sLongDashedStroke);      g2.drawLine(x,minY,x,maxY);    } else {      g2.setStroke(sDashedStroke);      g2.drawLine(x,minY - OVER,x,maxY + OVER);    }    g2.dispose();  }}  }
class C{  private static Data parseName(Set me,Set peer){  if (me == null) {    throw new NullPointerException("local principals must be non-empty");  } else   if (me.isEmpty()) {    throw new IllegalArgumentException("local principals must be non-empty");  }  Data data=new Data();  StringBuffer b=new StringBuffer();  data.me=cons(me,b);  if (peer != null && !peer.isEmpty()) {    b.append(" peer ");    data.peer=cons(peer,b);  }  data.name=b.toString();  return data;}  }
class C{  public Iterable<T> asIterable(){  return internalArray;}  }
class C{  public <R>R executeTransactionalCommand(final TransactionalCommand<R> command,final TransactionStyle style) throws MithraBusinessException {  String commandName=command.getClass().getName();  MithraTransaction tx=this.getCurrentTransaction();  if (tx != null) {    try {      return command.executeTransaction(tx);    } catch (    RuntimeException e) {      throw e;    }catch (    Throwable throwable) {      getLogger().error(commandName + " rolled back tx, will not retry.",throwable);      tx.expectRollbackWithCause(throwable);      throw new MithraBusinessException(commandName + " transaction failed",throwable);    }  }  R result=null;  int retryCount=style.getRetries() + 1;  do {    try {      tx=this.startOrContinueTransaction(style);      tx.setTransactionName("Transactional Command: " + commandName);      result=command.executeTransaction(tx);      tx.commit();      retryCount=0;    } catch (    Throwable throwable) {      retryCount=MithraTransaction.handleTransactionException(tx,throwable,retryCount,style);    }  } while (retryCount > 0);  return result;}  }
class C{  public void removeColumn(Column c){  int idx=m_columns.indexOf(c);  if (idx < 0) {    throw new IllegalArgumentException("No such column.");  }  removeColumn(idx);}  }
class C{  protected boolean isTemporaryDestination(){  boolean result=false;  if (m_queueName.startsWith(TEMP_QUEUE_PREFIX)) {    result=true;  }  return result;}  }
class C{  public PresenterLayout(Context context){  super(context);  initializedDefaultsFromXml();  initLayout();  if (mInflateDefaultViews) {    inflateDefaultOverlappingViews();  }}  }
class C{  public static boolean isStateCode(String s){  if (isEmpty(s))   return defaultEmptyOK;  return ((USStateCodes.indexOf(s) != -1) && (s.indexOf(USStateCodeDelimiter) == -1));}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public DivExpr fullCopy(){  DivExpr tree=(DivExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_NO_SUCH_USER(String value0){  return new SM_SYSTEM_MESSAGE(1300627,value0);}  }
class C{  public MyDialog outInterpolator(Interpolator interpolator){  mOutInterpolator=interpolator;  return this;}  }
class C{  private void showDrawableError(){  Dialog dialog=new Dialog("Error...",getSkin());  Label label=new Label("Error while adding new drawables.\nEnsure that image dimensions are\nless than maximums specified in project.\nRolling back changes...",getSkin());  label.setAlignment(Align.center);  dialog.text(label);  dialog.button("OK");  dialog.show(getStage());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_TOWER_DEFENCE_ALREADY_MEMBER_OF_OTHER_GAME(String value0){  return new SM_SYSTEM_MESSAGE(1400954,value0);}  }
class C{  protected Table(int nrows,int ncols,Class tupleType){  m_listeners=new CopyOnWriteArrayList();  m_columns=new ArrayList(ncols);  m_names=new ArrayList(ncols);  m_rows=new RowManager(this);  m_entries=new HashMap(ncols + 5);  m_tuples=new TupleManager(this,null,tupleType);  if (nrows > 0)   addRows(nrows);}  }
class C{  public void unlockUserInput(){}  }
class C{  public void write(LogRecord rec) throws LogException {  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(TransientLogFile.class.getName(),"write",rec);  }  if (persistenceLogger.isLoggable(Level.FINEST)) {    persistenceLogger.log(Level.FINEST,"(ignored) write called for cookie: {0}",new Long(cookie));  }  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(TransientLogFile.class.getName(),"write");  }}  }
class C{  public void removeCallback(@NonNull Callback callback){  mCallbacks.remove(callback);}  }
class C{  public static Zmat trans(Zmat A){  Zmat Ah=new Zmat(A.nc,A.nr);  for (int i=0; i < A.nr; i++)   for (int j=0; j < A.nc; j++) {    Ah.re[j][i]=A.re[i][j];    Ah.im[j][i]=A.im[i][j];  }  return Ah;}  }
class C{  public RemoteHostDescriptor(Host host){  super(host,resolveName(host,host.getHostName()),NbBundle.getMessage(RemoteHostDescriptor.class,"DESCR_Remote"),NODE_ICON,resolvePosition(host,POSITION_AT_THE_END,true),EXPAND_ON_FIRST_CHILD);  setChildrenComparator(DataSourceDescriptorFactory.getDescriptor(Host.LOCALHOST).getChildrenComparator());}  }
class C{  public UpgradePokemonResponse.Result powerUp() throws LoginFailedException, RemoteServerException {  return AsyncHelper.toBlocking(powerUpAsync());}  }
class C{  @SuppressWarnings({"checkstyle:cyclomaticcomplexity","checkstyle:javadocstyle","checkstyle:javadocmethod"}) private List parseArray(JsonLexer lexer){  List content=new ArrayList();  JsonToken currentToken;  for (; ; ) {    currentToken=lexer.nextToken();    if (currentToken == null) {      throw new JsonException("Expected a value on line: " + lexer.getReader().getLine() + ", "+ "column: "+ lexer.getReader().getColumn()+ ".\n"+ "But got an unterminated array.");    }    if (currentToken.getType() == OPEN_CURLY) {      content.add(parseObject(lexer));    } else     if (currentToken.getType() == OPEN_BRACKET) {      content.add(parseArray(lexer));    } else     if (currentToken.getType().ordinal() >= NULL.ordinal()) {      content.add(currentToken.getValue());    } else     if (currentToken.getType() == CLOSE_BRACKET) {      sortIfNeeded(content);      return content;    } else {      throw new JsonException("Expected a value, an array, or an object " + "on line: " + currentToken.getStartLine() + ", "+ "column: "+ currentToken.getStartColumn()+ ".\n"+ "But got '"+ currentToken.getText()+ "' instead.");    }    currentToken=lexer.nextToken();    if (currentToken == null) {      throw new JsonException("Expected " + CLOSE_BRACKET.getLabel() + " "+ "or "+ COMMA.getLabel()+ " "+ "on line: "+ lexer.getReader().getLine()+ ", "+ "column: "+ lexer.getReader().getColumn()+ ".\n"+ "But got an unterminated array.");    }    if (currentToken.getType() == CLOSE_BRACKET) {      break;    } else     if (currentToken.getType() != COMMA) {      throw new JsonException("Expected a value or " + CLOSE_BRACKET.getLabel() + " "+ "on line: "+ currentToken.getStartLine()+ " "+ "column: "+ currentToken.getStartColumn()+ ".\n"+ "But got '"+ currentToken.getText()+ "' instead.");    }  }  sortIfNeeded(content);  return content;}  }
class C{  protected void update(){  long time=System.nanoTime();  long diff=time - this.last;  this.last=time;  double elapsedTime=diff / NANO_TO_BASE;  this.world.update(elapsedTime);}  }
class C{  public void removeElement(String ref){  if (TextUtils.isEmpty(ref)) {    return;  }  Message msg=Message.obtain();  WXDomTask task=new WXDomTask();  task.instanceId=mWXSDKInstance.getInstanceId();  task.args=new ArrayList<>();  task.args.add(ref);  msg.what=WXDomHandler.MsgType.WX_DOM_REMOVE_DOM;  msg.obj=task;  WXSDKManager.getInstance().getWXDomManager().sendMessage(msg);}  }
class C{  public void updateView(final String what){  for (  String sample : doc.getSampleNames()) {    String shape=doc.getSampleAttributeTable().getSampleShape(sample);    if (shape == null || shape.equalsIgnoreCase("circle")) {      label2shape.put(sample,NodeView.OVAL_NODE);    } else     if (shape.equalsIgnoreCase("triangle")) {      label2shape.put(sample,NodeView.TRIANGLE_NODE);    } else     if (shape.equalsIgnoreCase("square")) {      label2shape.put(sample,NodeView.RECT_NODE);    } else     if (shape.equalsIgnoreCase("diamond")) {      label2shape.put(sample,NodeView.DIAMOND_NODE);    }  }  setFont(ProgramProperties.get(ProgramProperties.DEFAULT_FONT,getFont()));  final GraphView graphView=getGraphViewForTabId(tabbedPane.getSelectedIndex());  setStatusLine(ClusterViewer.this);  getCommandManager().updateEnableState();  setTitle();  if (what.equals(IDirector.ALL)) {    if (graphView != null) {      final PhyloTree graph=((PhyloTree)graphView.getGraph());      group2Nodes.clear();      if (isPCoATab()) {        Map<String,Node> sample2node=new HashMap<>();        for (Node v=graph.getFirstNode(); v != null; v=v.getNext()) {          sample2node.put(graphView.getNV(v).getLabel(),v);        }        for (        String sample : getDir().getDocument().getSampleAttributeTable().getSampleOrder()) {          String groupId=getDir().getDocument().getSampleAttributeTable().getGroupId(sample);          if (groupId != null) {            LinkedList<Node> nodes=group2Nodes.get(groupId);            if (nodes == null) {              nodes=new LinkedList<>();              group2Nodes.put(groupId,nodes);            }            nodes.add(sample2node.get(sample));          }        }      }      if (frame.isActive())       graphView.requestFocusInWindow();      final Set<String> selectedLabels=doc.getSampleSelection().getAll();      final NodeSet toSelect=new NodeSet(graphView.getGraph());      for (Node v=graph.getFirstNode(); v != null; v=v.getNext()) {        final NodeView nv=graphView.getNV(v);        if (nv.getLabel() != null) {          nv.setLabelVisible(showLabels);          if (nv.getHeight() <= 3)           nv.setHeight(nodeRadius);          if (nv.getWidth() <= 3)           nv.setWidth(nodeRadius);          nv.setFixedSize(true);          if (useColors) {            String sample=graph.getLabel(v);            Color color=dir.getDocument().getChartColorManager().getSampleColor(sample);            if (nodeRadius > 1 || !showLabels) {              nv.setBackgroundColor(color);              nv.setLabelBackgroundColor(null);            } else             nv.setLabelBackgroundColor(color);          } else           nv.setBackgroundColor(null);          if (selectedLabels.contains(nv.getLabel()))           toSelect.add(v);        }      }      addFormatting(upgmaTab.getGraphView());      addFormatting(njTab.getGraphView());      addFormatting(nnetTab.getGraphView());      if (pcoaTab.isShowGroupsAsEllipses() || pcoaTab.isShowGroupsAsConvexHulls())       pcoaTab.computeConvexHullsAndEllipsesForGroups(group2Nodes);      addFormatting(pcoaTab.getGraphView());      graphView.setSelected(toSelect,true);    }  }  if (graphView != null)   graphView.repaint();  final FindToolBar findToolBar=searchManager.getFindDialogAsToolBar();  if (findToolBar.isClosing()) {    showFindToolBar=false;    findToolBar.setClosing(false);  }  if (!findToolBar.isEnabled() && showFindToolBar) {    mainPanel.add(findToolBar,BorderLayout.NORTH);    findToolBar.setEnabled(true);    frame.getContentPane().validate();    getCommandManager().updateEnableState();  } else   if (findToolBar.isEnabled() && !showFindToolBar) {    mainPanel.remove(findToolBar);    findToolBar.setEnabled(false);    frame.getContentPane().validate();    getCommandManager().updateEnableState();  }  if (tabbedPane.getSelectedComponent() instanceof ITab) {    try {      ((ITab)tabbedPane.getSelectedComponent()).updateView(what);    } catch (    Exception e) {      Basic.caught(e);    }  }  legendPanel.updateView();  if (doc.getNumberOfSamples() <= 1)   splitPane.setDividerLocation(1.0);  legendPanel.repaint();  for (int i=0; i < tabbedPane.getTabCount(); i++) {    if (tabbedPane.getComponentAt(i) instanceof ITab) {      ITab tab=(ITab)tabbedPane.getComponentAt(i);      tabbedPane.setEnabledAt(i,tab.isApplicable());    }  }}  }
class C{  public CM_REVIVE(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  @Override public boolean converged(final int iteration,final PointValuePair previous,final PointValuePair current){  if (maxIterationCount != ITERATION_CHECK_DISABLED && iteration >= maxIterationCount) {    return true;  }  final double p=previous.getValue();  final double c=current.getValue();  final double difference=FastMath.abs(p - c);  final double size=FastMath.max(FastMath.abs(p),FastMath.abs(c));  return difference <= size * getRelativeThreshold() || difference <= getAbsoluteThreshold();}  }
class C{  public boolean postDominates(Stmt s,Stmt t){  return getFlowBefore(t).contains(s);}  }
class C{  public final DetectorResult detect(Map<DecodeHintType,?> hints) throws NotFoundException, FormatException {  resultPointCallback=hints == null ? null : (ResultPointCallback)hints.get(DecodeHintType.NEED_RESULT_POINT_CALLBACK);  FinderPatternFinder finder=new FinderPatternFinder(image,resultPointCallback);  FinderPatternInfo info=finder.find(hints);  return processFinderPatternInfo(info);}  }
class C{  protected void onPsiFileAvailable(){}  }
class C{  private static void openSyncSettings(Activity activity){  String accountName=ChromeSigninController.get(activity).getSignedInAccountName();  if (TextUtils.isEmpty(accountName))   return;  Intent intent=PreferencesLauncher.createIntentForSettingsPage(activity,SyncCustomizationFragment.class.getName());  Bundle args=new Bundle();  args.putString(SyncCustomizationFragment.ARGUMENT_ACCOUNT,accountName);  intent.putExtra(Preferences.EXTRA_SHOW_FRAGMENT_ARGUMENTS,args);  activity.startActivity(intent);}  }
class C{  public static final void sort(float[] a,int[] b,int length){  mergesort(a,b,0,length - 1);}  }
class C{  private ISpaceProxy findEmbeddedSpace(SpaceURL url,Properties customProperties,CredentialsProvider credentialsProvider,LifeCycle lifeCycle) throws Exception {  final String spaceName=url.getSpaceName();  if (JSpaceUtilities.isEmpty(spaceName))   throw new FinderException("Using java:// protocol SpaceName should be defined in SpaceFinder URL");  final String containerName=url.getContainerName();  if (JSpaceUtilities.isEmpty(containerName))   throw new FinderException("Using java:// protocol ContainerName should be defined in SpaceFinder URL");  if (credentialsProvider != null)   CredentialsProviderHelper.appendCredentials(customProperties,credentialsProvider);synchronized (_embeddedSpaces) {    SpaceImpl space=_embeddedSpaces.get(url);    if (space != null && space.getContainer().getContainerStatus() == JSpaceContainerImpl.SHUTDOWN_STATUS) {      _embeddedSpaces.remove(url);      space=null;    }    if (space == null) {      if (url.getProperty(SpaceURL.CREATE,"").equalsIgnoreCase("false"))       throw new NoSuchNameException("Space <" + spaceName + "> could not be found using space url: "+ url.getURL());      space=createEmbeddedSpace(containerName,url,customProperties,lifeCycle);      _embeddedSpaces.put(url,space);    }    if (_logger.isLoggable(Level.FINE))     _logger.log(Level.FINE,"java:// protocol. Get <" + spaceName + "> space from <"+ containerName+ "> container");    return (ISpaceProxy)space.getContainer().getContainerEntry().getClusteredSpaceProxy();  }}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  @Override public boolean isAcceptable(ActiveElectionState.State aquireState,List<ServiceItem> candidateSrv){  final String STARTED_STATE=JSpaceState.convertToString(ISpaceState.STARTED);  List<CandidateEntry> orderedMemberList=new ArrayList<CandidateEntry>();  for (  ServiceItem si : candidateSrv) {    String memberName=getMemberName(si.attributeSets);    String state=getMemberState(memberName,si.attributeSets);    orderedMemberList.add(new CandidateEntry(memberName,STARTED_STATE.equals(state)));  }  Collections.sort(orderedMemberList);  int orderId=orderedMemberList.indexOf(new CandidateEntry(_memberName));  if (orderId == -1 && _logger.isLoggable(Level.SEVERE)) {    String msgEx="Cluster may be in inconsistent state due to an illegal active election state: Space instance <" + _memberName + "> is not registered as a candidate to become PRIMARY in LUS.\n Please restart the space cluster. ";    _logger.severe(msgEx);    return false;  }  if (_logger.isLoggable(Level.FINE)) {    _logger.fine("PriorityElectionFilter - " + "\n Member: [" + _memberName + "] ask to acquire ["+ aquireState+ "] state."+ "\n OrderId: "+ orderId+ "\n Candidates: "+ orderedMemberList+ "\n Acquire accepted: "+ (orderId == 0));  }  return orderId == 0;}  }
class C{  public FieldConfigFeatureTypeConstraint(FieldConfigCommonData commonData){  super(commonData);  filterModel=new FeatureTypeConstraintModel(this);  extentModel=new ExtentModel(this);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_PET_CONDITION_SEARCH_01(String value0){  return new SM_SYSTEM_MESSAGE(1400869,value0);}  }
class C{  protected void initConfig(KadminProducerConfig config){}  }
class C{  public void writeUTF(String str) throws IOException {  int strlen=str.length();  int utflen=0;  int c, count=0;  for (int i=0; i < strlen; i++) {    c=str.charAt(i);    if ((c >= 0x0001) && (c <= 0x007F)) {      utflen++;    } else     if (c > 0x07FF) {      utflen+=3;    } else {      utflen+=2;    }  }  if (utflen > 65535)   throw new UTFDataFormatException("encoded string too long: " + utflen + " bytes");  byte[] bytearr=null;  bytearr=new byte[utflen + 2];  bytearr[count++]=(byte)((utflen >>> 8) & 0xFF);  bytearr[count++]=(byte)((utflen) & 0xFF);  int i=0;  for (i=0; i < strlen; i++) {    c=str.charAt(i);    if (!((c >= 0x0001) && (c <= 0x007F)))     break;    bytearr[count++]=(byte)c;  }  for (; i < strlen; i++) {    c=str.charAt(i);    if ((c >= 0x0001) && (c <= 0x007F)) {      bytearr[count++]=(byte)c;    } else     if (c > 0x07FF) {      bytearr[count++]=(byte)(0xE0 | ((c >> 12) & 0x0F));      bytearr[count++]=(byte)(0x80 | ((c >> 6) & 0x3F));      bytearr[count++]=(byte)(0x80 | ((c) & 0x3F));    } else {      bytearr[count++]=(byte)(0xC0 | ((c >> 6) & 0x1F));      bytearr[count++]=(byte)(0x80 | ((c) & 0x3F));    }  }  out.write(bytearr,0,utflen + 2);}  }
class C{  public synchronized void stop(){  if (mStreaming) {    if (mMode == MODE_MEDIACODEC_API) {      Log.d(TAG,"Interrupting threads...");      mThread.interrupt();      mAudioRecord.stop();      mAudioRecord.release();      mAudioRecord=null;    }    super.stop();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_CANT_INVITE_WHEN_HE_IS_ASKED_QUESTION(String value0){  return new SM_SYSTEM_MESSAGE(1300174,value0);}  }
class C{  public void train(String sUpdateText,boolean bResetExisting){  if (!bResetExisting)   FullTextDataString=FullTextDataString + sUpdateText; else   FullTextDataString=sUpdateText;  for (int iCnt=iMinCharNGram; iCnt <= iMaxCharNGram; iCnt++) {    DistributionDocument dCur=DistroDocs.get(iCnt);    if (dCur != null)     if (!bResetExisting)     dCur.setDataString(sUpdateText,iCnt,bResetExisting); else     dCur.setDataString(FullTextDataString,iCnt,bResetExisting);  }  for (int iCnt=iMinWordNGram; iCnt <= iMaxWordNGram; iCnt++) {    DistributionWordDocument dWordCur=DistroWordDocs.get(iCnt);    if (dWordCur != null)     if (!bResetExisting)     dWordCur.setDataString(sUpdateText,iCnt,bResetExisting); else     dWordCur.setDataString(FullTextDataString,iCnt,bResetExisting);  }}  }
class C{  private void copyTo(ByteBuffer buf,OutputStream out) throws IOException {  if (!buf.hasRemaining()) {    return;  }  if (buf.hasArray()) {    out.write(buf.array(),buf.arrayOffset() + buf.position(),buf.remaining());  } else {    byte[] bytes=new byte[4096];    do {      buf.get(bytes,0,Math.min(bytes.length,buf.remaining()));      out.write(bytes);    } while (buf.hasRemaining());  }}  }
class C{  protected void populateStandardData(Style style){  StandardData standardData=new StandardData();  if (style != null) {    standardData.name=style.getName();    standardData.description=style.getDescription();  }  populateStandardData(standardData);}  }
class C{  public SymbolHash(){  fBuckets=new Entry[fTableSize];}  }
class C{  public StaticScript(String name,String type,String script){  this.name=name;  this.type=type;  this.script=script;}  }
class C{  @SuppressWarnings("unchecked") public void updateTableData(final List<Pokemon> pokes){  ClearTable();  final MutableInt i=new MutableInt();  pokes.forEach(null);  fireTableDataChanged();}  }
class C{  public Object call(Object[] args) throws LuaException {  return call(args,1)[0];}  }
class C{  public static Object createObjectFromString(String type,String value) throws Exception {  Object result;  if (primitiveToWrapper.containsKey(type)) {    if (type.equals(Character.TYPE.getName())) {      result=new Character(value.charAt(0));    } else {      result=newStringConstructor(((Class<?>)primitiveToWrapper.get(type)).getName(),value);    }  } else   if (type.equals(Character.class.getName())) {    result=new Character(value.charAt(0));  } else   if (Number.class.isAssignableFrom(Utils.getClass(type))) {    result=createNumberFromStringValue(type,value);  } else   if (String[].class.isAssignableFrom(Utils.getClass(type))) {    String[] args=value.split(",");    for (int i=0; i < args.length; i++) {      args[i]=args[i].trim();    }    result=args;  } else   if (value == null || value.toString().equals("null")) {    result=null;  } else {    result=newStringConstructor(type,value);  }  return result;}  }
class C{  private static InspectionResult checkArrayInitializerExpression(@NotNull PsiArrayInitializerExpression e,@NotNull AllowedValues allowedValues,@NotNull PsiElement scope,@NotNull PsiManager manager,@Nullable Set<PsiExpression> visited){  for (  PsiExpression arrayValueExpression : e.getInitializers()) {    InspectionResult result=isGoodExpression(arrayValueExpression,allowedValues,scope,manager,visited).useErrorNode(arrayValueExpression);    if (result.isInvalid()) {      return result;    }  }  return InspectionResult.valid();}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ABYSS_BOSS_KILLED(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1390195,value1,value0);}  }
class C{  private void updateButtonState(boolean dataChanged){  btnApply.setEnabled(dataChanged);  btnRevert.setEnabled(dataChanged);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public PostIncExpr fullCopy(){  PostIncExpr tree=(PostIncExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public void stopAuth(){  if (mCancellationSignal != null) {    isScanning=true;    mCancellationSignal.cancel();    mCancellationSignal=null;  }}  }
class C{  boolean hasWildcard(){  boolean wildcarded=false;  for (int i=0; i < websterRoot.length; i++) {    String root=websterRoot[i];    if ((root.indexOf('*')) != -1) {      wildcarded=true;      break;    }  }  return (wildcarded);}  }
class C{  public ClientAccessInformation(String ipAddress,String accessAndTerminateTime,String type){  super();  this.ipAddress=ipAddress;  AccessAndTerminateTime=accessAndTerminateTime;  this.type=type;}  }
class C{  public void run(){synchronized (timerSync) {    if (LOG.isDebugEnabled()) {      LOG.debug("run() : Checking HeartbeatTimer.");    }    if (heartbeatExpired) {      if (LOG.isDebugEnabled()) {        LOG.debug("run() : No Heartbeat received since timer expiration.");      }      return;    }    boolean hasExpired=System.currentTimeMillis() - lastHeartbeatReceived - TOLERANCE_IN_MILLIS > Heartbeat.getHeartbeatInterval();    if (hasExpired) {      this.heartbeatExpired=true;      if (LOG.isInfoEnabled()) {        LOG.info("run() : HeartbeatTimer has expired, notifying listeners");      }      listenerLock.readLock().lock();      try {        for (        HeartbeatListener listener : heartbeatListeners) {          try {            listener.onHeartbeatExpired(lastHeartbeatEvent);          } catch (          Exception e) {            LOG.error("run() : error notifying listener of heartbeat expiration.",e);          }        }      }  finally {        listenerLock.readLock().unlock();      }    }  }}  }
class C{  public TeeOutputStream(OutputStream out,OutputStream branch){  super(out);  this.branch=branch;}  }
class C{  private static String joinStringFrom(final String arr[],final int start,final String sep){  StringBuilder builder=new StringBuilder();  for (int i=start; i < arr.length; i++) {    builder.append(arr[i]);    if (i != arr.length - 1) {      builder.append(sep);    }  }  return builder.toString();}  }
class C{  public JFastLabel(){  this(null);}  }
class C{  final public static int insertTable(V sets,Class<? extends Bean> t){  Table mapping=(Table)t.getAnnotation(Table.class);  if (mapping == null) {    if (log.isErrorEnabled())     log.error("mapping missed in [" + t + "] declaretion");    return -1;  }  if (!X.isEmpty(mapping.name())) {    return insertTable(mapping.name(),sets);  }  return -1;}  }
class C{  public final void expand(Vector2 point){  ExpandingSimplexEdge edge=this.queue.poll();  ExpandingSimplexEdge edge1=new ExpandingSimplexEdge(edge.point1,point,this.winding);  ExpandingSimplexEdge edge2=new ExpandingSimplexEdge(point,edge.point2,this.winding);  this.queue.add(edge1);  this.queue.add(edge2);}  }
class C{  default String resourceRole(String resourceId){  return "has-" + resourceId + "-value";}  }
class C{  public StringBuffer outputKeyCreation(boolean kekOnly,String kekTest){  return this.outputKeyCreation(0,kekOnly,kekTest);}  }
class C{  private void trimExcessLines(){  final int numLinesToTrunk=textArea.getLineCount() - maxLines;  if (numLinesToTrunk > 0) {    try {      final int posOfLastLineToTrunk=textArea.getLineEndOffset(numLinesToTrunk - 1);      textArea.replaceRange("",0,posOfLastLineToTrunk);    } catch (    final BadLocationException e) {      maxLines=Integer.MAX_VALUE;      System.err.println("Error trimming text area, trimming will be disabled!");      ConsolePrintStream.printException(e);    }  }}  }
class C{  public boolean isNullValue(){  return StringUtils.trimToNull(value) == null && StringUtils.trimToNull(comment) == null;}  }
class C{  public UrlValidator(String[] schemes){  this(schemes,0L);}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,camera);  }}  }
class C{  @Nullable @Override protected JComponent createSouthPanel(){  JPanel southPanel=(JPanel)super.createSouthPanel();  assert southPanel != null;  southPanel.setBorder(new EmptyBorder(WizardConstants.STUDIO_WIZARD_INSETS));  return southPanel;}  }
class C{  public Door(final TreeSpecies species,boolean isHingeRight){  this(getWoodDoorOfSpecies(species),isHingeRight);}  }
class C{  public static void loadPropsFromFile(File file){  if (file.exists()) {    try (InputStream stream=new FileInputStream(file)){      logger.info("Loading properties file '" + file.getAbsolutePath() + "'");      loadProperties(stream);    } catch (    IOException e) {      logger.error("Problem loading properties file '" + file.getAbsolutePath() + "'");      e.printStackTrace();    }  } else {    logger.warn("Properties file does not exist: '" + file.getAbsolutePath() + "'");  }}  }
class C{  public void checkPacketAccessPrivileges(SpaceContext sc,Privilege privilege,ITransportPacket packet){  if (_securityInterceptor != null)   _securityInterceptor.intercept(SpaceContextHelper.getSecurityContext(sc),privilege,packet != null ? packet.getTypeName() : null);}  }
class C{  private static boolean isAlphanum(char p_char){  return (p_char <= 'z' && (fgLookupTable[p_char] & MASK_ALPHA_NUMERIC) != 0);}  }
class C{  public boolean isLocked(){  return locked;}  }
class C{  protected void waitAndStop(){  waitForScripts();  stopMqtt();  displayGoodbyeMessage();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Reflector_PROTECT_SKILL_ME_to_B(int num0,String skillname,String skilltarget){  return new SM_SYSTEM_MESSAGE(1201164,num0,skillname,skilltarget);}  }
class C{  public void clear(){  events.clear();}  }
class C{  private void generateProvisionMethodFromClass(NewBindingKey key,TypeElement referencingClass,String suffix){  ClassName packagedInjectorClassName=getInjectorFor(key,referencingClass);  TypeSpec.Builder injectorSpecBuilder=getInjectorTypeSpecBuilder(packagedInjectorClassName);  TypeElement cls=getClassFromKey(key);  ExecutableElement ctor=Utils.findInjectedCtor(cls,processingEnv);  Preconditions.checkNotNull(ctor,String.format("Did not find ctor for %s",cls));  List<NewBindingKey> dependencyKeys=Utils.getDependenciesFromExecutableElement(ctor);  if (key.getTypeName() instanceof ParameterizedTypeName) {    List<NewBindingKey> specializedKeys=new ArrayList<>();    Map<TypeVariableName,TypeName> map=Utils.getMapFromTypeVariableToSpecialized((ParameterizedTypeName)key.getTypeName(),(ParameterizedTypeName)TypeName.get(cls.asType()));    for (    NewBindingKey k : dependencyKeys) {      specializedKeys.add(Utils.specializeIfNeeded(k,map));    }    dependencyKeys=specializedKeys;  }  MethodSpec.Builder methodSpecBuilder=MethodSpec.methodBuilder(getProvisionMethodName(key) + suffix);  methodSpecBuilder.addModifiers(suffix.isEmpty() ? Modifier.PUBLIC : Modifier.PRIVATE).returns(key.getTypeName());  StringBuilder builder=new StringBuilder("$T result = new $T(");  if (dependencyKeys.size() > 0) {    for (    NewBindingKey dependencyKey : dependencyKeys) {      generateProvisionMethodAndAppendAsParameter(dependencyKey,cls,packagedInjectorClassName,builder);    }    builder.delete(builder.length() - 2,builder.length());  }  builder.append(")");  methodSpecBuilder.addStatement(builder.toString(),key.getTypeName(),key.getTypeName());  if (Utils.hasInjectedFieldsOrMethods(cls,processingEnv)) {    generateInjectionMethod(key,referencingClass);    methodSpecBuilder.addStatement("inject(result)");  }  methodSpecBuilder.addStatement("return result");  injectorSpecBuilder.addMethod(methodSpecBuilder.build());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SOUL_BOUND_ITEM_FAILED(String value0){  return new SM_SYSTEM_MESSAGE(1300486,value0);}  }
class C{  public void build(){  QueueReader<Edge> callEdges;  if (ofcg != null) {    callEdges=ofcg.callGraph().listener();    ofcg.build();    reachables=ofcg.reachableMethods();    reachables.update();  } else {    callEdges=cgb.getCallGraph().listener();    cgb.build();    reachables=cgb.reachables();  }  for (  final SootClass c : Scene.v().getClasses()) {    handleClass(c);  }  while (callEdges.hasNext()) {    Edge e=callEdges.next();    if (!e.getTgt().method().getDeclaringClass().isPhantom()) {      MethodPAG.v(pag,e.tgt()).addToPAG(null);      pag.addCallTarget(e);    }  }  if (pag.getOpts().verbose()) {    G.v().out.println("Total methods: " + totalMethods);    G.v().out.println("Initially reachable methods: " + analyzedMethods);    G.v().out.println("Classes with at least one reachable method: " + classes);  }}  }
class C{  private static final String export(Filter f,String tabs){  StringBuilder sb=new StringBuilder();  if (f == Filter.DEFAULT_FILTER) {  } else   if (f instanceof CategoryFilter) {    CategoryFilter cf=(CategoryFilter)f;    sb.append(tabs).append("bf.setFilter(new CategoryFilter(").append(cf.getCategory()).append(", ").append(cf.getMask()).append("));").append(NEW_LINE);  } else {    throw new UnsupportedOperationException(MessageFormat.format(Messages.getString("exception.persist.unknownClass"),f.getClass().getName()));  }  return sb.toString();}  }
class C{  public synchronized int size(){  return count;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OneTimeBoostSkillCritical_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200386,skillname);}  }
class C{  @deprecated public String format(Style style,TimeZone tz,long date,Output<TimeType> timeType){  String result=null;  if (timeType != null) {    timeType.value=TimeType.UNKNOWN;  }switch (style) {case GENERIC_LOCATION:    result=getTimeZoneGenericNames().getGenericLocationName(ZoneMeta.getCanonicalCLDRID(tz));  break;case GENERIC_LONG:result=getTimeZoneGenericNames().getDisplayName(tz,TimeZoneGenericNames.GenericNameType.LONG,date);break;case GENERIC_SHORT:result=getTimeZoneGenericNames().getDisplayName(tz,TimeZoneGenericNames.GenericNameType.SHORT,date);break;case SPECIFIC_LONG:result=formatSpecific(tz,TimeZoneNames.NameType.LONG_STANDARD,TimeZoneNames.NameType.LONG_DAYLIGHT,date,timeType);break;case SPECIFIC_SHORT:result=formatSpecific(tz,TimeZoneNames.NameType.SHORT_STANDARD,TimeZoneNames.NameType.SHORT_DAYLIGHT,date,timeType);break;case SPECIFIC_SHORT_COMMONLY_USED:result=formatSpecific(tz,TimeZoneNames.NameType.SHORT_STANDARD_COMMONLY_USED,TimeZoneNames.NameType.SHORT_DAYLIGHT_COMMONLY_USED,date,timeType);break;}if (result == null) {int[] offsets={0,0};tz.getOffset(date,false,offsets);if (style == Style.RFC822) {result=formatOffsetRFC822(offsets[0] + offsets[1]);} else {result=formatOffsetLocalizedGMT(offsets[0] + offsets[1]);}if (timeType != null) {timeType.value=(offsets[1] != 0 ? TimeType.DAYLIGHT : TimeType.STANDARD);}}assert (result != null);return result;}  }
class C{  @Override protected boolean scanRootElementHook() throws IOException, XNIException {  if (fExternalSubsetResolver != null && !fSeenDoctypeDecl && !fDisallowDoctype && (fValidation || fLoadExternalDTD)) {    scanStartElementName();    resolveExternalSubsetAndRead();    reconfigurePipeline();    if (scanStartElementAfterName()) {      setScannerState(SCANNER_STATE_TRAILING_MISC);      setDispatcher(fTrailingMiscDispatcher);      return true;    }  } else {    reconfigurePipeline();    if (scanStartElement()) {      setScannerState(SCANNER_STATE_TRAILING_MISC);      setDispatcher(fTrailingMiscDispatcher);      return true;    }  }  return false;}  }
class C{  public void editText(VisualItem item,String attribute,Rectangle r){  if (m_editing) {    stopEditing();  }  String txt=item.getString(attribute);  m_editItem=item;  m_editAttribute=attribute;  Color tc=ColorLib.getColor(item.getTextColor());  Color fc=ColorLib.getColor(item.getFillColor());  m_editor.setForeground(tc);  m_editor.setBackground(fc);  editText(txt,r);}  }
class C{  private void drawTabSwitcherAnimationOverlay(Canvas canvas,float animationProgress){  if (!isNativeLibraryReady())   return;  float floatAlpha=1 - animationProgress;  int rgbAlpha=(int)(255 * floatAlpha);  canvas.save();  canvas.translate(0,-animationProgress * mBackgroundOverlayBounds.height());  canvas.clipRect(mBackgroundOverlayBounds);  float previousAlpha=0.f;  if (mHomeButton.getVisibility() != View.GONE) {    previousAlpha=mHomeButton.getAlpha();    mHomeButton.setAlpha(previousAlpha * floatAlpha);    drawChild(canvas,mHomeButton,SystemClock.uptimeMillis());    mHomeButton.setAlpha(previousAlpha);  }  previousAlpha=mPhoneLocationBar.getAlpha();  mPhoneLocationBar.setAlpha(previousAlpha * floatAlpha);  if (mPhoneLocationBar.getAlpha() != 0) {    drawChild(canvas,mPhoneLocationBar,SystemClock.uptimeMillis());  }  mPhoneLocationBar.setAlpha(previousAlpha);  translateCanvasToView(this,mToolbarButtonsContainer,canvas);  if (mTabSwitcherAnimationTabStackDrawable != null && mToggleTabStackButton != null && mUrlExpansionPercent != 1f) {    canvas.save();    translateCanvasToView(mToolbarButtonsContainer,mToggleTabStackButton,canvas);    int backgroundWidth=mToggleTabStackButton.getDrawable().getIntrinsicWidth();    int backgroundHeight=mToggleTabStackButton.getDrawable().getIntrinsicHeight();    int backgroundLeft=(mToggleTabStackButton.getWidth() - mToggleTabStackButton.getPaddingLeft() - mToggleTabStackButton.getPaddingRight()- backgroundWidth) / 2;    backgroundLeft+=mToggleTabStackButton.getPaddingLeft();    int backgroundTop=(mToggleTabStackButton.getHeight() - mToggleTabStackButton.getPaddingTop() - mToggleTabStackButton.getPaddingBottom()- backgroundHeight) / 2;    backgroundTop+=mToggleTabStackButton.getPaddingTop();    canvas.translate(backgroundLeft,backgroundTop);    mTabSwitcherAnimationTabStackDrawable.setAlpha(rgbAlpha);    mTabSwitcherAnimationTabStackDrawable.draw(canvas);    canvas.restore();  }  if (mTabSwitcherAnimationMenuDrawable != null && mUrlExpansionPercent != 1f) {    mTabSwitcherAnimationMenuDrawable.setBounds(mMenuButton.getPaddingLeft(),mMenuButton.getPaddingTop(),mMenuButton.getWidth() - mMenuButton.getPaddingRight(),mMenuButton.getHeight() - mMenuButton.getPaddingBottom());    translateCanvasToView(mToolbarButtonsContainer,mMenuButton,canvas);    mTabSwitcherAnimationMenuDrawable.setAlpha(rgbAlpha);    int color=mUseLightToolbarDrawables ? mLightModeDefaultColor : mDarkModeDefaultColor;    mTabSwitcherAnimationMenuDrawable.setColorFilter(color,PorterDuff.Mode.SRC_IN);    mTabSwitcherAnimationMenuDrawable.draw(canvas);  }  canvas.restore();}  }
class C{  @Override public void run(){  try {    AudioSystem.write(m_audioInputStream,m_targetType,m_outputFile);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static String nodeValue(Node node){  if (node == null)   return null;  StringBuilder valueBuffer=new StringBuilder();  do {    if (node.getNodeType() == Node.CDATA_SECTION_NODE || node.getNodeType() == Node.TEXT_NODE || node.getNodeType() == Node.COMMENT_NODE) {      valueBuffer.append(node.getNodeValue());    }  } while ((node=node.getNextSibling()) != null);  return valueBuffer.toString();}  }
class C{  public Builder intoSourceFiles(@Nullable Collection<File> sourceFiles){  mySourceFiles=sourceFiles;  return this;}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.io.FileSystem getFileSystem()")) {    java_io_FileSystem_getFileSystem(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public static double nextUp(double d){  if (d == Double.POSITIVE_INFINITY)   return d; else {    d+=0.0d;    return Double.longBitsToDouble(Double.doubleToRawLongBits(d) + ((d >= 0.0d) ? +1L : -1L));  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public XtnEntry attachToXtnGranular(final ServerTransaction txn,boolean fromReplication) throws TransactionException, RemoteException {  XtnEntry xtnEntry=null;  try {    xtnEntry=getTransactionEntry(txn);    final XtnEntry firstFoundXtnEntry=xtnEntry;    if (xtnEntry != null && !xtnEntry.addUsedIfPossible()) {      removeUnusedTransaction(xtnEntry,true);      xtnEntry=null;    }    if (xtnEntry != null && xtnEntry.getStatus() != XtnStatus.UNINITIALIZED && xtnEntry.getStatus() != XtnStatus.UNINITIALIZED_FAILED && (txn.isEmbeddedMgrInProxy() || !xtnEntry.isOnlyEmbeddedJoins())) {      if (txn.isEmbeddedMgrInProxy() && !xtnEntry.isOperatedUpon() && isTransactionWithLease(txn))       renewTransactionLease(txn,txn.getLease());      return xtnEntry;    }    while (true) {      XtnEntry newXtnEntry=null;      if (xtnEntry == null) {        newXtnEntry=new XtnEntry(txn);        xtnEntry=newXtnEntry;      }      XtnEntry lockXtnEntry=xtnEntry;      lockXtnEntry.lock();      try {        if (newXtnEntry != null) {          XtnEntry curXtn=createTransactionEntryIfAbsent(txn,newXtnEntry);          if (curXtn != newXtnEntry) {            xtnEntry=curXtn;            continue;          }        }        if (newXtnEntry == null && xtnEntry != firstFoundXtnEntry && !xtnEntry.addUsedIfPossible()) {          removeUnusedTransaction(xtnEntry,false);          xtnEntry=null;          continue;        }        XtnStatus status=xtnEntry.getStatus();        if (status != XtnStatus.UNINITIALIZED && status != XtnStatus.UNINITIALIZED_FAILED)         if (txn.isEmbeddedMgrInProxy() || !xtnEntry.isOnlyEmbeddedJoins())         return xtnEntry;        boolean localXtn=xtnEntry.m_Transaction.mgr instanceof LocalTransactionManager;        if (!localXtn && isPhantomGlobalXtn(txn)) {          removeUnusedTransaction(xtnEntry,false);          xtnEntry=null;          throw new TransactionException(" phantom xtn reached member=" + _engine.getFullSpaceName() + " xtnid="+ txn.id);        }        if (!localXtn) {          XtnEntry joinLockXtnEntry=xtnEntry;synchronized (joinLockXtnEntry.getJoinLock()) {            xtnEntry.unlock();            lockXtnEntry=null;            try {              if (xtnEntry.getStatus() == XtnStatus.UNINITIALIZED_FAILED) {                ((ConcurrentHashMap<ServerTransaction,XtnEntry>)getXtnTable()).remove(xtnEntry.m_Transaction,xtnEntry);                xtnEntry=null;                continue;              }              if (!fromReplication && !txn.isEmbeddedMgrInProxy() && xtnEntry.setOnlyEmbeddedJoins(false)) {                final PlatformLogicalVersion targetSpaceVersion=LRMIUtilities.getServicePlatformLogicalVersion(((TxnMgrProxy)txn.mgr).getProxy());                if (_engine.getClusterPolicy() != null)                 txn.join(_engine.getSpaceImpl().getSpaceStub(),SystemTime.timeMillis(),_engine.getPartitionIdZeroBased(),_engine.getClusterPolicy().m_ClusterName); else                 txn.join(_engine.getSpaceImpl().getSpaceStub(),SystemTime.timeMillis());              }              if (xtnEntry.getStatus() == XtnStatus.UNINITIALIZED)               xtnEntry.setStatus(XtnStatus.BEGUN);            } catch (            TransactionException te) {              if (xtnEntry.getStatus() == XtnStatus.UNINITIALIZED) {                xtnEntry.setStatus(XtnStatus.UNINITIALIZED_FAILED);                ((ConcurrentHashMap<ServerTransaction,XtnEntry>)getXtnTable()).remove(xtnEntry.m_Transaction,xtnEntry);              }              xtnEntry=null;              throw te;            }catch (            RemoteException re) {              if (xtnEntry.getStatus() == XtnStatus.UNINITIALIZED) {                xtnEntry.setStatus(XtnStatus.UNINITIALIZED_FAILED);                ((ConcurrentHashMap<ServerTransaction,XtnEntry>)getXtnTable()).remove(xtnEntry.m_Transaction,xtnEntry);              }              xtnEntry=null;              throw re;            }          }        } else {          xtnEntry.setStatus(XtnStatus.BEGUN);        }      }  finally {        if (lockXtnEntry != null)         lockXtnEntry.unlock();      }      return xtnEntry;    }  }  finally {    if (xtnEntry != null)     setNonEmbeddedJoinIfNeed(xtnEntry,txn,fromReplication);  }}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_InteralSkill_A_TO_B(String skillcaster,String skillname,String skilltarget){  return new SM_SYSTEM_MESSAGE(1201274,skillcaster,skillname,skilltarget);}  }
class C{  public JToggleGroup createRadioGroup(){  return createToggleGroup(JToggleGroup.RADIO);}  }
class C{  protected static void version(){  System.out.println("baksmali " + VERSION + " (http://smali.googlecode.com)");  System.out.println("Copyright (C) 2010 Ben Gruver (JesusFreke@JesusFreke.com)");  System.out.println("BSD license (http://www.opensource.org/licenses/bsd-license.php)");  System.exit(0);}  }
class C{  @Override public void externalEntityDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {}  }
class C{  public StatusSetQuery(VkApiClient client,UserActor actor){  super(client,"status.set",OkResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  private Set<AccessPath> handleStringGetChars(InvokeExpr invokeExpr,AccessPath taintedPath){  if (((InstanceInvokeExpr)invokeExpr).getBase() == taintedPath.getPlainValue())   return new TwoElementSet<AccessPath>(taintedPath,new AccessPath(invokeExpr.getArg(2),true));  return Collections.singleton(taintedPath);}  }
class C{  private AudioOption createOption3(ChannelType... channels){  AudioOption option=new AudioOption();  option.add(createTrack(new Channel(FL.name(),channels[0]),new Channel(FR.name(),channels[1]),new Channel(FC.name(),channels[2]),new Channel(LFE.name(),channels[3]),new Channel(SL.name(),channels[4]),new Channel(SR.name(),channels[5])));  option.add(createTrack(new Channel(FL.name(),channels[6]),new Channel(FR.name(),channels[7])));  return option;}  }
class C{  public boolean isAvoidFirstLastClippingEnabled(){  return mAvoidFirstLastClipping;}  }
class C{  private static void check(double x,double y){  double eps=Math.pow(2.0,-52.0);  if (x == 0 & Math.abs(y) < 10 * eps)   return;  if (y == 0 & Math.abs(x) < 10 * eps)   return;  if (Math.abs(x - y) > 10 * eps * Math.max(Math.abs(x),Math.abs(y))) {    throw new RuntimeException("The difference x-y is too large: x = " + Double.toString(x) + "  y = "+ Double.toString(y));  }}  }
class C{  private void initPresenter(){  this.toolbarPresenter=new ToolbarImplementor();  this.swipeBackManagePresenter=new SwipeBackManageImplementor(this);  this.editResultPresenter=new EditResultImplementor(editResultModel,this);  this.browsablePresenter=new BrowsableImplementor(browsableModel,this);}  }
class C{  public int optInt(int index,int defaultValue){  try {    return this.getInt(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  private boolean isSaving(){  return SaveHandler.class.getName().equals(getClass().getName());}  }
class C{  public static List<PathSegment> decodePath(URI u,boolean decode){  String rawPath=u.getRawPath();  if (rawPath != null && rawPath.length() > 0 && rawPath.charAt(0) == '/') {    rawPath=rawPath.substring(1);  }  return decodePath(rawPath,decode);}  }
class C{  public void removeUserNamedLayer(StyledLayer layerToDelete){  List<StyledLayer> styledLayerList=this.sld.layers();  int indexFound=-1;  int index=0;  for (  StyledLayer styledLayer : styledLayerList) {    if (styledLayer == layerToDelete) {      indexFound=index;      break;    } else {      index++;    }  }  if (indexFound > -1) {    styledLayerList.remove(indexFound);  }}  }
class C{  public double[][] extractMainSetJacobian(final ODEState state){  final double[] p=state.getSecondaryState(index);  final double[][] dYdY0=new double[stateDim][stateDim];  int j=0;  for (int i=0; i < stateDim; i++) {    System.arraycopy(p,j,dYdY0[i],0,stateDim);    j+=stateDim;  }  return dYdY0;}  }
class C{  public static <K,R>Observable<R> switchCase(Callable<? extends K> caseSelector,Map<? super K,? extends ObservableSource<? extends R>> mapOfCases,ObservableSource<? extends R> defaultCase){  ObjectHelper.requireNonNull(caseSelector,"caseSelector is null");  ObjectHelper.requireNonNull(mapOfCases,"mapOfCases is null");  ObjectHelper.requireNonNull(defaultCase,"defaultCase is null");  return RxJavaPlugins.onAssembly(new ObservableSwitchCase<R,K>(caseSelector,mapOfCases,defaultCase));}  }
class C{  public static String formatDocString(StringLiteral docstring,DocStringOwner owner){  String raw=docstring.getStringContents();  String[] lines=raw.split("\n");  StringBuilder output=new StringBuilder();  output.append("<pre>");  int initialIndent=-1;  for (  String line : lines) {    if (initialIndent == -1 && line.startsWith(" ")) {      initialIndent=StringUtil.countChars(line,' ',0,true);    }    line=trimStart(line,initialIndent);    if (!line.isEmpty()) {      output.append(line);    }    output.append("<br>");  }  output.append("</pre>");  return output.toString();}  }
class C{  private static LitePalOpenHelper buildConnection(){  if (mLitePalAttr == null) {    LitePalParser.parseLitePalConfiguration();    mLitePalAttr=LitePalAttr.getInstance();  }  if (mLitePalAttr.checkSelfValid()) {    if (mLitePalHelper == null) {synchronized (Connector.class) {        if (mLitePalHelper == null) {          mLitePalHelper=new LitePalOpenHelper(mLitePalAttr.getDbName(),mLitePalAttr.getVersion());        }      }    }    return mLitePalHelper;  } else {    throw new InvalidAttributesException("Uncaught invalid attributes exception happened");  }}  }
class C{  public String toString(){  String s="";  s+=String.format("%.2f N + %.2f",slope(),intercept());  return s + "  (R^2 = " + String.format("%.3f",R2())+ ")";}  }
class C{  private void repopulateTree(String sldContents){  int[] selectedRows=symbolTree.getSelectionRows();  SLDDataInterface sldData=new SLDData(null,sldContents);  StyledLayerDescriptor sld=SLDUtils.createSLDFromString(sldData);  SelectedSymbol.getInstance().setSld(sld);  populateSLD();  if ((selectedRows != null) && (selectedRows.length > 0)) {    symbolTree.setSelectionRow(selectedRows[0]);  }}  }
class C{  public FaveAddUserQuery addUser(UserActor actor,int userId){  return new FaveAddUserQuery(getClient(),actor,userId);}  }
class C{  public long convert(){  return ints2long(high,low);}  }
class C{  public void insertIdentityStmts(){  int i=0;  Iterator<Type> parIt=getMethod().getParameterTypes().iterator();  while (parIt.hasNext()) {    Type t=(Type)parIt.next();    Local l=Jimple.v().newLocal("parameter" + i,t);    getLocals().add(l);    getUnits().addFirst(Jimple.v().newIdentityStmt(l,Jimple.v().newParameterRef(l.getType(),i)));    i++;  }  if (!getMethod().isStatic()) {    Local l=Jimple.v().newLocal("this",RefType.v(getMethod().getDeclaringClass()));    getLocals().add(l);    getUnits().addFirst(Jimple.v().newIdentityStmt(l,Jimple.v().newThisRef((RefType)l.getType())));  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Paralyze_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200434,skilltarget,skillname);}  }
class C{  protected boolean executePredicate(Object valueToMatch){  if (_spacePredicate == null) {    Object convertedTemplateValue=ConvertedObjectWrapper.create(_expectedValue,valueToMatch.getClass()).getValue();    _spacePredicate=createSpacePredicate(convertedTemplateValue);  }  return _spacePredicate.execute(valueToMatch);}  }
class C{  public MessagesAddChatUserQuery addChatUser(UserActor actor,int chatId,int userId){  return new MessagesAddChatUserQuery(getClient(),actor,chatId,userId);}  }
class C{  public int size(){  return values.size();}  }
class C{  public void loadAndParseRClassSilently(){  final String rClassName=getRClassName(myModule);  try {    if (rClassName == null) {      LOG.info(String.format("loadAndParseRClass: failed to find manifest package for project %1$s",myModule.getProject().getName()));      return;    }    myLogger.setResourceClass(rClassName);    loadAndParseRClass(rClassName);  } catch (  ClassNotFoundException e) {    myLogger.setMissingResourceClass(true);  }catch (  NoClassDefFoundError e) {    myLogger.setMissingResourceClass(true);  }catch (  InconvertibleClassError e) {    assert rClassName != null;    myLogger.addIncorrectFormatClass(rClassName,e);  }}  }
class C{  public void message(int level,String message){  if (debug >= level) {    System.out.println(message);  }}  }
class C{  public SOCKS4Connector(String socks4host,int socks4port){  this(socks4host,socks4port,null);}  }
class C{  @Override public boolean equals(Object other){  boolean result=false;  if (other instanceof Unit) {    Unit that=(Unit)other;    result=(this.index == that.index);  }  return result;}  }
class C{  public void fireRequestBlockTwo() throws RemoteServerException, LoginFailedException {  fireRequestBlock(new ServerRequest(RequestTypeOuterClass.RequestType.GET_ASSET_DIGEST,CommonRequest.getGetAssetDigestMessageRequest()));}  }
class C{  public PhotosCopyQuery accessKey(String value){  return unsafeParam("access_key",value);}  }
class C{  public NewsfeedGetRecommendedQuery(VkApiClient client,UserActor actor){  super(client,"newsfeed.getRecommended",GetRecommendedResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public Vector rotateInDegree(double degree){  return rotateInRadian(Math.toRadians(degree));}  }
class C{  public void validate(){  if (maxZoom < 0) {    throw new IllegalArgumentException("Cannot set max zoom to a number < 1");  }  if (touchRadius < 0) {    throw new IllegalArgumentException("Cannot set touch radius value to a number <= 0 ");  }  if (initialCropWindowPaddingRatio < 0 || initialCropWindowPaddingRatio >= 0.5) {    throw new IllegalArgumentException("Cannot set initial crop window padding value to a number < 0 or >= 0.5");  }  if (aspectRatioX <= 0) {    throw new IllegalArgumentException("Cannot set aspect ratio value to a number less than or equal to 0.");  }  if (aspectRatioY <= 0) {    throw new IllegalArgumentException("Cannot set aspect ratio value to a number less than or equal to 0.");  }  if (borderLineThickness < 0) {    throw new IllegalArgumentException("Cannot set line thickness value to a number less than 0.");  }  if (borderCornerThickness < 0) {    throw new IllegalArgumentException("Cannot set corner thickness value to a number less than 0.");  }  if (guidelinesThickness < 0) {    throw new IllegalArgumentException("Cannot set guidelines thickness value to a number less than 0.");  }  if (minCropWindowHeight < 0) {    throw new IllegalArgumentException("Cannot set min crop window height value to a number < 0 ");  }  if (minCropResultWidth < 0) {    throw new IllegalArgumentException("Cannot set min crop result width value to a number < 0 ");  }  if (minCropResultHeight < 0) {    throw new IllegalArgumentException("Cannot set min crop result height value to a number < 0 ");  }  if (maxCropResultWidth < minCropResultWidth) {    throw new IllegalArgumentException("Cannot set max crop result width to smaller value than min crop result width");  }  if (maxCropResultHeight < minCropResultHeight) {    throw new IllegalArgumentException("Cannot set max crop result height to smaller value than min crop result height");  }  if (outputRequestWidth < 0) {    throw new IllegalArgumentException("Cannot set request width value to a number < 0 ");  }  if (outputRequestHeight < 0) {    throw new IllegalArgumentException("Cannot set request height value to a number < 0 ");  }  if (rotationDegrees < 0 || rotationDegrees > 360) {    throw new IllegalArgumentException("Cannot set rotation degrees value to a number < 0 or > 360");  }}  }
class C{  public boolean isRestrictedToNonNegative(){  return isRestricted;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_LOOT_PAUSE_START_ME(String value0){  return new SM_SYSTEM_MESSAGE(1390188,value0);}  }
class C{  public Vector3DFormat(final NumberFormat format){  super(DEFAULT_PREFIX,DEFAULT_SUFFIX,DEFAULT_SEPARATOR,format);}  }
class C{  public UnknownTransactionException(String desc){  super(desc);}  }
class C{  private void startWaveSouthernShieldGenerator2(){  sp(284847,337.93338f,257.88702f,292.43845f,(byte)60,1000,"SouthernShieldGenerator1");  sp(284848,338.05304f,254.6424f,292.3325f,(byte)60,1000,"SouthernShieldGenerator2");  sp(284849,338.13315f,251.34738f,292.48932f,(byte)59,1000,"SouthernShieldGenerator3");}  }
class C{  public ChangeSet increment(String path,long delta){  return add(new IncrementSpaceEntryMutator(path,delta));}  }
class C{  public static SparseMatrix loadSparseMatrix(File file) throws IOException, IllegalFormatException {  String str;  TextFileReader reader=new TextFileReader(file);  str=reader.readLine();  String[] parts=str.split("\\s+");  if (parts.length != 2)   throw new IllegalFormatException();  int rows=Integer.parseInt(parts[0]);  int cols=Integer.parseInt(parts[1]);  SparseMatrix matrix=new SparseMatrix(rows,cols);  while ((str=reader.readLine()) != null) {    parts=str.split("\\s+");    if (parts.length != 3)     throw new IllegalFormatException();    int row=Integer.parseInt(parts[0]);    int col=Integer.parseInt(parts[1]);    double value=Double.parseDouble(parts[2]);    matrix.add(row,col,value);  }  reader.close();  return matrix;}  }
class C{  public boolean exited(){  return waitResult < SIGNAL_1 || waitResult > SIGNAL_63;}  }
class C{  public final Observable<Void> evict(final Object group){  return Observable.defer(null);}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> propertyNotNull(String propertyName){  return property(propertyName,isNotNull());}  }
class C{  @Autowired public RequestController(final ConfigurationController configurationController){  this.configurationController=configurationController;}  }
class C{  public static RenewResults renewAll(LocalLandlord landlord,Uuid[] cookies,long[] durations){  final int count=cookies.length;  final long[] granted=new long[count];  final ArrayList exceptions=new ArrayList(count);  for (int i=0; i < count; i++) {    try {      granted[i]=landlord.renew(cookies[i],durations[i]);    } catch (    LeaseException le) {      granted[i]=-1;      exceptions.add(le);    }  }  if (exceptions.size() == 0) {    return new Landlord.RenewResults(granted);  } else {    final Exception[] es=new Exception[exceptions.size()];    return new RenewResults(granted,(Exception[])exceptions.toArray(es));  }}  }
class C{  public static void i(String tag,String msg){  if (isDebug) {    Log.i(tag,msg);  }}  }
class C{  @Override public void run(){  while (!isInterrupted()) {    try {      Reference ref=_queue.remove();      _entryInfos.remove(ref);    } catch (    InterruptedException e) {      interrupt();      break;    }  }}  }
class C{  @Override public void write(int idx) throws IOException {  out.write(idx);}  }
class C{  public final Edge locateEdgeInGraph(UniqueVertexGraph gGraph,Vertex vHead,Vertex vTail){  Edge eRes=locateDirectedEdgeInGraph(gGraph,vHead,vTail);  return eRes == null ? locateDirectedEdgeInGraph(gGraph,vTail,vHead) : eRes;}  }
class C{  public XMLGrammarPoolImplExtension(){  super();}  }
class C{  public byte[] toByteArray(){  int size=24 + 2 * interfaceCount;  int nbFields=0;  FieldWriter fb=firstField;  while (fb != null) {    ++nbFields;    size+=fb.getSize();    fb=fb.next;  }  int nbMethods=0;  MethodWriter mb=firstMethod;  while (mb != null) {    ++nbMethods;    size+=mb.getSize();    mb=mb.next;  }  int attributeCount=0;  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;    size+=8;    newUTF8("Signature");  }  if (sourceFile != 0) {    ++attributeCount;    size+=8;    newUTF8("SourceFile");  }  if (sourceDebug != null) {    ++attributeCount;    size+=sourceDebug.length + 4;    newUTF8("SourceDebugExtension");  }  if (enclosingMethodOwner != 0) {    ++attributeCount;    size+=10;    newUTF8("EnclosingMethod");  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;    size+=6;    newUTF8("Deprecated");  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0 && (version & 0xffff) < Opcodes.V1_5) {    ++attributeCount;    size+=6;    newUTF8("Synthetic");  }  if (innerClasses != null) {    ++attributeCount;    size+=8 + innerClasses.length;    newUTF8("InnerClasses");  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;    size+=8 + anns.getSize();    newUTF8("RuntimeVisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;    size+=8 + ianns.getSize();    newUTF8("RuntimeInvisibleAnnotations");  }  if (attrs != null) {    attributeCount+=attrs.getCount();    size+=attrs.getSize(this,null,0,-1,-1);  }  size+=pool.length;  ByteVector out=new ByteVector(size);  out.putInt(0xCAFEBABE).putInt(version);  out.putShort(index).putByteArray(pool.data,0,pool.length);  out.putShort(access).putShort(name).putShort(superName);  out.putShort(interfaceCount);  for (int i=0; i < interfaceCount; ++i) {    out.putShort(interfaces[i]);  }  out.putShort(nbFields);  fb=firstField;  while (fb != null) {    fb.put(out);    fb=fb.next;  }  out.putShort(nbMethods);  mb=firstMethod;  while (mb != null) {    mb.put(out);    mb=mb.next;  }  out.putShort(attributeCount);  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(newUTF8("Signature")).putInt(2).putShort(signature);  }  if (sourceFile != 0) {    out.putShort(newUTF8("SourceFile")).putInt(2).putShort(sourceFile);  }  if (sourceDebug != null) {    int len=sourceDebug.length - 2;    out.putShort(newUTF8("SourceDebugExtension")).putInt(len);    out.putByteArray(sourceDebug.data,2,len);  }  if (enclosingMethodOwner != 0) {    out.putShort(newUTF8("EnclosingMethod")).putInt(4);    out.putShort(enclosingMethodOwner).putShort(enclosingMethod);  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(newUTF8("Deprecated")).putInt(0);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0 && (version & 0xffff) < Opcodes.V1_5) {    out.putShort(newUTF8("Synthetic")).putInt(0);  }  if (innerClasses != null) {    out.putShort(newUTF8("InnerClasses"));    out.putInt(innerClasses.length + 2).putShort(innerClassesCount);    out.putByteArray(innerClasses.data,0,innerClasses.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (attrs != null) {    attrs.put(this,null,0,-1,-1,out);  }  if (invalidFrames) {    ClassWriter cw=new ClassWriter(COMPUTE_FRAMES);    new ClassReader(out.data).accept(cw,ClassReader.SKIP_FRAMES);    return cw.toByteArray();  }  return out.data;}  }
class C{  public void disableAllOperations(){  setPermissions("");}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public void addDecimatedSpawnPoints(Collection<SpawnPoint> decimatedSpawnPoints){  if (decimatedSpawnPoints == null || decimatedSpawnPoints.isEmpty()) {    return;  }  complete=true;  this.decimatedSpawnPoints.addAll(decimatedSpawnPoints);}  }
class C{  public void addDataSources(Set<? extends DataSource> added){  super.registerDataSources(added);}  }
class C{  private long calcExpiration(long preferredDuration,long now){  long expiration=now + preferredDuration;  if (expiration < 0) {    return Long.MAX_VALUE;  }  return expiration;}  }
class C{  public void writeToUrlConnection(HttpURLConnection urlConnection) throws IOException {  urlConnection.setDoOutput(true);  urlConnection.setRequestProperty("Content-Type","application/json");  urlConnection.setRequestProperty("Accept","application/json");  urlConnection.setRequestMethod("POST");  OutputStream os=urlConnection.getOutputStream();  os.write(mJsonObject.toString().getBytes("UTF-8"));  os.close();}  }
class C{  public DocsEditQuery title(String value){  return unsafeParam("title",value);}  }
class C{  public boolean isRoot(){  return myPath == null && mySnippets != null;}  }
class C{  private void tryScrollBackToTopAbortRefresh(){  tryScrollBackToTop();}  }
class C{  public static boolean isCJKSymbol(char c){  return isRange(c,'\u3001','\u3003') || isRange(c,'\u3008','\u301F');}  }
class C{  public Builder cacheInMemory(){  cacheInMemory=true;  return this;}  }
class C{  @SuppressWarnings("unchecked") @Override public ClientCommandTag<T> clone() throws CloneNotSupportedException {  ClientCommandTagImpl<T> clone=(ClientCommandTagImpl<T>)super.clone();  clone.authorizationDetails=null;  return clone;}  }
class C{  public SemanticIndex(SymbolicGraph sgGraph){  Graph=sgGraph;  SemanticLink=new HashMap();}  }
class C{  public static byte[] Synthesize(String textToSynthesize,String outputFormat,String locale,String genderName,String voiceName) throws Exception {  Authentication auth=new Authentication("Your api key goes here");  String accessToken=auth.GetAccessToken();  HttpsURLConnection webRequest=HttpsConnection.getHttpsConnection(ttsServiceUri);  webRequest.setDoInput(true);  webRequest.setDoOutput(true);  webRequest.setConnectTimeout(5000);  webRequest.setReadTimeout(15000);  webRequest.setRequestMethod("POST");  webRequest.setRequestProperty("Content-Type","application/ssml+xml");  webRequest.setRequestProperty("X-Microsoft-OutputFormat",outputFormat);  webRequest.setRequestProperty("Authorization","Bearer " + accessToken);  webRequest.setRequestProperty("X-Search-AppId","07D3234E49CE426DAA29772419F436CA");  webRequest.setRequestProperty("X-Search-ClientID","1ECFAE91408841A480F00935DC390960");  webRequest.setRequestProperty("User-Agent","TTSAndroid");  webRequest.setRequestProperty("Accept","*/*");  String SsmlTemplate="<speak version='1.0' xml:lang='en-us'><voice xml:lang='%s' xml:gender='%s' name='%s'>%s</voice></speak>";  String body=String.format(SsmlTemplate,locale,genderName,voiceName,textToSynthesize);  byte[] bytes=body.getBytes();  webRequest.setRequestProperty("content-length",String.valueOf(bytes.length));  webRequest.connect();  DataOutputStream dop=new DataOutputStream(webRequest.getOutputStream());  dop.write(bytes);  dop.flush();  dop.close();  InputStream inSt=webRequest.getInputStream();  ByteArray ba=new ByteArray();  int rn2=0;  int bufferLength=4096;  byte[] buf2=new byte[bufferLength];  while ((rn2=inSt.read(buf2,0,bufferLength)) > 0) {    ba.cat(buf2,0,rn2);  }  inSt.close();  webRequest.disconnect();  return ba.getArray();}  }
class C{  public static boolean propertyValueEquals(URL url,String name,String compareString){  String value=getPropertyValue(url,name);  if (value == null)   return false;  return value.trim().equals(compareString);}  }
class C{  public UseItemPotionResponse.Result heal() throws LoginFailedException, RemoteServerException {  if (!isInjured())   return UseItemPotionResponse.Result.ERROR_CANNOT_USE;  if (api.getInventories().getItemBag().getItem(ItemId.ITEM_POTION).getCount() > 0)   return usePotion(ItemId.ITEM_POTION);  if (api.getInventories().getItemBag().getItem(ItemId.ITEM_SUPER_POTION).getCount() > 0)   return usePotion(ItemId.ITEM_SUPER_POTION);  if (api.getInventories().getItemBag().getItem(ItemId.ITEM_HYPER_POTION).getCount() > 0)   return usePotion(ItemId.ITEM_HYPER_POTION);  if (api.getInventories().getItemBag().getItem(ItemId.ITEM_MAX_POTION).getCount() > 0)   return usePotion(ItemId.ITEM_MAX_POTION);  return UseItemPotionResponse.Result.ERROR_CANNOT_USE;}  }
class C{  public TimeMetaData(String name){  this(name,DateTimeZone.UTC,null,null);}  }
class C{  public static Map<String,Object> deactivateContentAssocMethod(DispatchContext dctx,Map<String,? extends Object> rcontext){  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Map<String,Object> result=FastMap.newInstance();  Locale locale=(Locale)context.get("locale");  context.put("entityOperation","_UPDATE");  List<String> targetOperationList=ContentWorker.prepTargetOperationList(context,"_UPDATE");  List<String> contentPurposeList=ContentWorker.prepContentPurposeList(context);  context.put("targetOperationList",targetOperationList);  context.put("contentPurposeList",contentPurposeList);  GenericValue pk=delegator.makeValue("ContentAssoc");  pk.setAllFields(context,false,null,Boolean.TRUE);  pk.setAllFields(context,false,"ca",Boolean.TRUE);  GenericValue contentAssoc=null;  try {    contentAssoc=EntityQuery.use(delegator).from("ContentAssoc").where(pk).queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,"Entity Error:" + e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentAssocRetrievingError",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  if (contentAssoc == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentAssocDeactivatingError",locale));  }  GenericValue userLogin=(GenericValue)context.get("userLogin");  String userLoginId=(String)userLogin.get("userLoginId");  String lastModifiedByUserLogin=userLoginId;  Timestamp lastModifiedDate=UtilDateTime.nowTimestamp();  contentAssoc.put("lastModifiedByUserLogin",lastModifiedByUserLogin);  contentAssoc.put("lastModifiedDate",lastModifiedDate);  contentAssoc.put("thruDate",UtilDateTime.nowTimestamp());  String permissionStatus=null;  Map<String,Object> serviceInMap=FastMap.newInstance();  serviceInMap.put("userLogin",context.get("userLogin"));  serviceInMap.put("targetOperationList",targetOperationList);  serviceInMap.put("contentPurposeList",contentPurposeList);  serviceInMap.put("entityOperation",context.get("entityOperation"));  serviceInMap.put("contentIdTo",contentAssoc.get("contentIdTo"));  serviceInMap.put("contentIdFrom",contentAssoc.get("contentId"));  Map<String,Object> permResults=null;  try {    permResults=dispatcher.runSync("checkAssocPermission",serviceInMap);  } catch (  GenericServiceException e) {    Debug.logError(e,"Problem checking permissions","ContentServices");    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentPermissionNotGranted",locale));  }  permissionStatus=(String)permResults.get("permissionStatus");  if (permissionStatus != null && permissionStatus.equals("granted")) {    try {      contentAssoc.store();    } catch (    GenericEntityException e) {      return ServiceUtil.returnError(e.getMessage());    }  } else {    String errorMsg=ContentWorker.prepPermissionErrorMsg(permResults);    return ServiceUtil.returnError(errorMsg);  }  return result;}  }
class C{  public static Random of(RandomGenerator randomGenerator){  return new RandomAdaptor(randomGenerator);}  }
class C{  public GroupsGetBannedQuery fields(List<UserField> value){  return unsafeParam("fields",value);}  }
class C{  public static boolean onRender(Entity entity,double x,double y,double z,float yaw,float partialTicks){  GlStateManager.pushMatrix();  final boolean successful=OpenModLoader.getEventBus().post(new Fires(entity,x,y,z,yaw,partialTicks));  GlStateManager.popMatrix();  return successful;}  }
class C{  public static final Token newToken(int ofKind){switch (ofKind) {default :    return new Token();}}  }
class C{  public PhotosGetAllQuery skipHidden(Boolean value){  return unsafeParam("skip_hidden",value);}  }
class C{  public boolean hasHiddenValue(){  for (  EnumValue value : values) {    if (!value.isReachable()) {      return true;    }  }  return false;}  }
class C{  public void execute(IAction action) throws InvocationTargetException, InterruptedException {  if (action != null && !action.isEnabled()) {    action.setEnabled(true);  } else {    final ISVNRemoteFile svnResource=getSingleSelectedSVNRemoteFile();    execute(svnResource);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_LIMIT_SALE_TEST_DESC01(String value0){  return new SM_SYSTEM_MESSAGE(1400374,value0);}  }
class C{  public void add(Number number){  elements.add(number == null ? JsonNull.INSTANCE : new JsonPrimitive(number));}  }
class C{  public boolean insert_null_checks(){  return soot.PhaseOptions.getBoolean(options,"insert-null-checks");}  }
class C{  private void handleInitialize(){  scheduleRepeatingAlarm();  if (hasRequest())   startService(createPostRequestIntent(this));}  }
class C{  public boolean publish(final String publicationTopic,final String payload,final int qos){  return publish(publicationTopic,ConversionUtils.stringToArray(payload),qos,false);}  }
class C{  public Bundler putStringArray(String key,String[] value){  bundle.putStringArray(key,value);  return this;}  }
class C{  public static double probToLogOdds(double prob){  if (gr(prob,1) || (sm(prob,0))) {    throw new IllegalArgumentException("probToLogOdds: probability must " + "be in [0,1] " + prob);  }  double p=SMALL + (1.0 - 2 * SMALL) * prob;  return Math.log(p / (1 - p));}  }
class C{  public Mean(final FirstMoment m1){  this.moment=m1;  incMoment=false;}  }
class C{  public static long toLong(Object obj){  try {    return Long.parseLong(obj.toString());  } catch (  Exception e) {    return -1L;  }}  }
class C{  @Override public Record read(Key key,ReadConsistency consistency){  checkNotNull(key,"key");  checkNotNull(consistency,"consistency");  AstyanaxTable table=(AstyanaxTable)key.getTable();  AstyanaxStorage storage=table.getReadStorage();  DeltaPlacement placement=(DeltaPlacement)storage.getPlacement();  ByteBuffer rowKey=storage.getRowKey(key.getKey());  return read(key,rowKey,consistency,placement);}  }
class C{  public static FingerLockManager initialize(@NonNull AppCompatActivity activity,@NonNull String keyName){  if (activity == null) {    return null;  }  FingerLock fragment=(FingerLock)activity.getSupportFragmentManager().findFragmentByTag(TAG_FINGER_LOCK_FRAGMENT);  if (fragment == null) {    fragment=createInstance(keyName);    activity.getSupportFragmentManager().beginTransaction().add(fragment,TAG_FINGER_LOCK_FRAGMENT).commitNow();  }  return fragment;}  }
class C{  public boolean contains(final P point,final double margin){  return point.distance(center) <= radius + margin;}  }
class C{  private void printModifiers(List<IExtendedModifier> ext){  for (Iterator<IExtendedModifier> it=ext.iterator(); it.hasNext(); ) {    ASTNode p=(ASTNode)it.next();    p.accept(this);    this.fBuffer.append(" ");  }}  }
class C{  public static boolean checkContentCanBePulledDown(PtrFrameLayout frame,View content,View header){  return !canChildScrollUp(content);}  }
class C{  public static byte[] patchFast(InputStream oldInputStream,int oldsize,byte[] diffBytes,int extLen) throws IOException {  byte[] oldBuf=new byte[oldsize];  BSUtil.readFromStream(oldInputStream,oldBuf,0,oldsize);  oldInputStream.close();  return BSPatch.patchFast(oldBuf,oldsize,diffBytes,diffBytes.length,extLen);}  }
class C{  public static Map<String,Object> compareDocuments(DispatchContext dctx,Map<String,? extends Object> context){  XMultiComponentFactory xmulticomponentfactory=null;  String stringUrl="file:///" + context.get("filenameFrom");  String stringOriginalFile="file:///" + context.get("filenameOriginal");  String stringOutFile="file:///" + context.get("filenameOut");  String oooHost=(String)context.get("oooHost");  String oooPort=(String)context.get("oooPort");  try {    xmulticomponentfactory=OpenOfficeWorker.getRemoteServer(oooHost,oooPort);  } catch (  IOException e) {    Debug.logError(e,"Error in OpenOffice operation: ",module);    return ServiceUtil.returnError(e.toString());  }catch (  Exception e) {    Debug.logError(e,"Error in OpenOffice operation: ",module);    return ServiceUtil.returnError(e.toString());  }  try {    XPropertySet xpropertysetMultiComponentFactory=(XPropertySet)UnoRuntime.queryInterface(XPropertySet.class,xmulticomponentfactory);    Object objectDefaultContext=xpropertysetMultiComponentFactory.getPropertyValue("DefaultContext");    XComponentContext xcomponentcontext=(XComponentContext)UnoRuntime.queryInterface(XComponentContext.class,objectDefaultContext);    Object desktopObj=xmulticomponentfactory.createInstanceWithContext("com.sun.star.frame.Desktop",xcomponentcontext);    XDesktop desktop=(XDesktop)UnoRuntime.queryInterface(XDesktop.class,desktopObj);    XComponentLoader xcomponentloader=(XComponentLoader)UnoRuntime.queryInterface(XComponentLoader.class,desktopObj);    PropertyValue propertyvalue[]=new PropertyValue[1];    propertyvalue[0]=new PropertyValue();    propertyvalue[0].Name="Hidden";    propertyvalue[0].Value=Boolean.valueOf(true);    Object objectDocumentToStore=xcomponentloader.loadComponentFromURL(stringUrl,"_blank",0,propertyvalue);    XStorable xstorable=(XStorable)UnoRuntime.queryInterface(XStorable.class,objectDocumentToStore);    propertyvalue=new PropertyValue[1];    propertyvalue[0]=new PropertyValue();    propertyvalue[0].Name="URL";    propertyvalue[0].Value=stringOriginalFile;    XFrame frame=desktop.getCurrentFrame();    Object dispatchHelperObj=xmulticomponentfactory.createInstanceWithContext("com.sun.star.frame.DispatchHelper",xcomponentcontext);    XDispatchHelper dispatchHelper=(XDispatchHelper)UnoRuntime.queryInterface(XDispatchHelper.class,dispatchHelperObj);    XDispatchProvider dispatchProvider=(XDispatchProvider)UnoRuntime.queryInterface(XDispatchProvider.class,frame);    dispatchHelper.executeDispatch(dispatchProvider,".uno:CompareDocuments","",0,propertyvalue);    propertyvalue=new PropertyValue[1];    propertyvalue[0]=new PropertyValue();    propertyvalue[0].Name="Overwrite";    propertyvalue[0].Value=Boolean.valueOf(true);    Debug.logInfo("stringOutFile: " + stringOutFile,module);    xstorable.storeToURL(stringOutFile,propertyvalue);    XComponent xcomponent=(XComponent)UnoRuntime.queryInterface(XComponent.class,xstorable);    xcomponent.dispose();    Map results=ServiceUtil.returnSuccess();    return results;  } catch (  Exception e) {    Debug.logError(e,"Error in OpenOffice operation: ",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentConvertingDocumentError",UtilMisc.toMap("errorString",e.toString()),locale));  }}  }
class C{  public Node addRoot(){  return getNode(addRootRow());}  }
class C{  public int installSilent(Context context,String filePath){  return installSilent(context,filePath," -r " + getInstallLocationParams());}  }
class C{  public void activate(){  getViewer().getSearchManager().setSearcher(getSearcher());  getViewer().getSearchManager().getFindDialogAsToolBar().clearMessage();  if (!inSelection) {    inSelection=true;    try {      chartSelection.clearSelectionAttributes();      chartSelection.setSelectedAttribute(getSelectedLabels(),true);      this.repaint();    }  finally {      inSelection=false;    }  }}  }
class C{  public static String topLevelTypeString(String typeStr){  int dollarIndex=typeStr.indexOf('$');  String topLevelTypeStr=dollarIndex == -1 ? typeStr : typeStr.substring(0,dollarIndex);  return topLevelTypeStr;}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new List(),2);}  }
class C{  @Override protected boolean sameOriginDisabled(){  return true;}  }
class C{  public void incrementOptOutShownCount(){  SharedPreferences.Editor sharedPreferencesEditor=mSharedPreferences.edit();  sharedPreferencesEditor.putLong(OPT_OUT_SHOWN_COUNT,getOptOutShownCount() + 1);  sharedPreferencesEditor.apply();}  }
class C{  public void testIsPublic(){  VirtualFile myFile=myFixture.copyFileToProject("themeEditor/styles_1.xml","res/values/styles.xml");  Configuration configuration=myFacet.getConfigurationManager().getConfiguration(myFile);  ThemeResolver themeResolver=new ThemeResolver(configuration);  ConfiguredThemeEditorStyle projectTheme=themeResolver.getTheme("AppTheme");  assertNotNull(projectTheme);  assertTrue(projectTheme.isPublic());  ConfiguredThemeEditorStyle frameworkPublicTheme=themeResolver.getTheme("android:Theme.Material");  assertNotNull(frameworkPublicTheme);  assertTrue(frameworkPublicTheme.isPublic());  ConfiguredThemeEditorStyle frameworkPrivateTheme=themeResolver.getTheme("android:Theme.Material.Dialog.NoFrame");  assertNotNull(frameworkPrivateTheme);  assertFalse(frameworkPrivateTheme.isPublic());}  }
class C{  public static Map<String,Object> recalcOrderShipping(DispatchContext ctx,Map<String,? extends Object> context){  LocalDispatcher dispatcher=ctx.getDispatcher();  Delegator delegator=ctx.getDelegator();  String orderId=(String)context.get("orderId");  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Security security=ctx.getSecurity();  boolean hasPermission=OrderServices.hasPermission(orderId,userLogin,"UPDATE",security,delegator);  if (!hasPermission) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderYouDoNotHavePermissionToChangeThisOrdersStatus",locale));  }  GenericValue orderHeader=null;  try {    orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();  } catch (  GenericEntityException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCannotGetOrderHeaderEntity",locale) + e.getMessage());  }  if (orderHeader == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorNoValidOrderHeaderFoundForOrderId",UtilMisc.toMap("orderId",orderId),locale));  }  OrderReadHelper orh=new OrderReadHelper(orderHeader);  List<GenericValue> shipGroups=orh.getOrderItemShipGroups();  if (shipGroups != null) {    for (    GenericValue shipGroup : shipGroups) {      String shipGroupSeqId=shipGroup.getString("shipGroupSeqId");      if (shipGroup.get("contactMechId") == null || shipGroup.get("shipmentMethodTypeId") == null) {        continue;      }      Map<String,Object> shippingEstMap=ShippingEvents.getShipEstimate(dispatcher,delegator,orh,shipGroupSeqId);      BigDecimal shippingTotal=null;      if (UtilValidate.isEmpty(orh.getValidOrderItems(shipGroupSeqId))) {        shippingTotal=ZERO;        Debug.logInfo("No valid order items found - " + shippingTotal,module);      } else {        shippingTotal=UtilValidate.isEmpty(shippingEstMap.get("shippingTotal")) ? ZERO : (BigDecimal)shippingEstMap.get("shippingTotal");        shippingTotal=shippingTotal.setScale(orderDecimals,orderRounding);        Debug.logInfo("Got new shipping estimate - " + shippingTotal,module);      }      if (Debug.infoOn()) {        Debug.logInfo("New Shipping Total [" + orderId + " / "+ shipGroupSeqId+ "] : "+ shippingTotal,module);      }      BigDecimal currentShipping=OrderReadHelper.getAllOrderItemsAdjustmentsTotal(orh.getOrderItemAndShipGroupAssoc(shipGroupSeqId),orh.getAdjustments(),false,false,true);      currentShipping=currentShipping.add(OrderReadHelper.calcOrderAdjustments(orh.getOrderHeaderAdjustments(shipGroupSeqId),orh.getOrderItemsSubTotal(),false,false,true));      if (Debug.infoOn()) {        Debug.logInfo("Old Shipping Total [" + orderId + " / "+ shipGroupSeqId+ "] : "+ currentShipping,module);      }      List<String> errorMessageList=UtilGenerics.checkList(shippingEstMap.get(ModelService.ERROR_MESSAGE_LIST));      if (errorMessageList != null) {        Debug.logWarning("Problem finding shipping estimates for [" + orderId + "/ "+ shipGroupSeqId+ "] = "+ errorMessageList,module);        continue;      }      if ((shippingTotal != null) && (shippingTotal.compareTo(currentShipping) != 0)) {        BigDecimal adjustmentAmount=shippingTotal.subtract(currentShipping);        String adjSeqId=delegator.getNextSeqId("OrderAdjustment");        GenericValue orderAdjustment=delegator.makeValue("OrderAdjustment",UtilMisc.toMap("orderAdjustmentId",adjSeqId));        orderAdjustment.set("orderAdjustmentTypeId","SHIPPING_CHARGES");        orderAdjustment.set("amount",adjustmentAmount);        orderAdjustment.set("orderId",orh.getOrderId());        orderAdjustment.set("shipGroupSeqId",shipGroupSeqId);        orderAdjustment.set("orderItemSeqId",DataModelConstants.SEQ_ID_NA);        orderAdjustment.set("createdDate",UtilDateTime.nowTimestamp());        orderAdjustment.set("createdByUserLogin",userLogin.getString("userLoginId"));        try {          orderAdjustment.create();        } catch (        GenericEntityException e) {          Debug.logError(e,"Problem creating shipping re-calc adjustment : " + orderAdjustment,module);          return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCannotCreateAdjustment",locale));        }      }    }  }  return ServiceUtil.returnSuccess();}  }
class C{  public Config(File file){  if (!file.getName().endsWith(".conf")) {    throw new IllegalArgumentException("Config file has to be a .conf file");  }  boolean flag=false;  File parent=file.getParentFile();  while (parent != null && !flag) {    if (parent.equals(CONFIG_DIR)) {      flag=true;    }  }  if (!flag) {    throw new IllegalArgumentException("Config file has to be located within ./config or one of its subdirectories");  }  this.file=file;  this.config=ConfigFactory.parseFile(file);  this.initialHash=System.identityHashCode(config);  this.name=null;  this.parent=null;}  }
class C{  private void initialize(URI p_base,String p_uriSpec,boolean allowNonAbsoluteURI) throws MalformedURIException {  String uriSpec=p_uriSpec;  int uriSpecLen=(uriSpec != null) ? uriSpec.length() : 0;  if (p_base == null && uriSpecLen == 0) {    if (allowNonAbsoluteURI) {      m_path="";      return;    }    throw new MalformedURIException("Cannot initialize URI with empty parameters.");  }  if (uriSpecLen == 0) {    initialize(p_base);    return;  }  int index=0;  int colonIdx=uriSpec.indexOf(':');  if (colonIdx != -1) {    final int searchFrom=colonIdx - 1;    int slashIdx=uriSpec.lastIndexOf('/',searchFrom);    int queryIdx=uriSpec.lastIndexOf('?',searchFrom);    int fragmentIdx=uriSpec.lastIndexOf('#',searchFrom);    if (colonIdx == 0 || slashIdx != -1 || queryIdx != -1 || fragmentIdx != -1) {      if (colonIdx == 0 || (p_base == null && fragmentIdx != 0 && !allowNonAbsoluteURI)) {        throw new MalformedURIException("No scheme found in URI.");      }    } else {      initializeScheme(uriSpec);      index=m_scheme.length() + 1;      if (colonIdx == uriSpecLen - 1 || uriSpec.charAt(colonIdx + 1) == '#') {        throw new MalformedURIException("Scheme specific part cannot be empty.");      }    }  } else   if (p_base == null && uriSpec.indexOf('#') != 0 && !allowNonAbsoluteURI) {    throw new MalformedURIException("No scheme found in URI.");  }  if (((index + 1) < uriSpecLen) && (uriSpec.charAt(index) == '/' && uriSpec.charAt(index + 1) == '/')) {    index+=2;    int startPos=index;    char testChar='\0';    while (index < uriSpecLen) {      testChar=uriSpec.charAt(index);      if (testChar == '/' || testChar == '?' || testChar == '#') {        break;      }      index++;    }    if (index > startPos) {      if (!initializeAuthority(uriSpec.substring(startPos,index))) {        index=startPos - 2;      }    } else {      m_host="";    }  }  initializePath(uriSpec,index);  if (p_base != null) {    absolutize(p_base);  }}  }
class C{  private Constraint(){}  }
class C{  private static BitMatrix bitMatrixFrombitArray(byte[][] input,int margin){  BitMatrix output=new BitMatrix(input[0].length + 2 * margin,input.length + 2 * margin);  output.clear();  for (int y=0, yOutput=output.getHeight() - margin - 1; y < input.length; y++, yOutput--) {    for (int x=0; x < input[0].length; x++) {      if (input[y][x] == 1) {        output.set(x + margin,yOutput);      }    }  }  return output;}  }
class C{  private void keepAnnotated(Path path) throws FileNotFoundException {  for (  ClassPathElement element : path.getElements()) {    forClazz:     for (    String name : element.list()) {      if (name.endsWith(CLASS_EXTENSION)) {        DirectClassFile clazz=path.getClass(name);        if (hasRuntimeVisibleAnnotation(clazz)) {          filesToKeep.add(name);        } else {          MethodList methods=clazz.getMethods();          for (int i=0; i < methods.size(); i++) {            if (hasRuntimeVisibleAnnotation(methods.get(i))) {              filesToKeep.add(name);              continue forClazz;            }          }          FieldList fields=clazz.getFields();          for (int i=0; i < fields.size(); i++) {            if (hasRuntimeVisibleAnnotation(fields.get(i))) {              filesToKeep.add(name);              continue forClazz;            }          }        }      }    }  }}  }
class C{  public ProcessConfigurationUpdate(final long changeId,final long processId){  setChangeId(changeId);  this.processId=processId;}  }
class C{  private boolean okButtonPressed(){  return ok;}  }
class C{  public boolean isUploadCrashDumpEnabled(){  if (isMobileNetworkCapable()) {    return !mSharedPreferences.getString(PREF_CRASH_DUMP_UPLOAD,mCrashDumpNeverUpload).equals(mCrashDumpNeverUpload);  }  return mSharedPreferences.getBoolean(PREF_CRASH_DUMP_UPLOAD_NO_CELLULAR,false);}  }
class C{  private void DrawPrimitive(DrawEntity e,World w) throws Exception {  String entityName=e.getType().getValue();  NBTTagCompound nbttagcompound=new NBTTagCompound();  nbttagcompound.setString("id",entityName);  Entity entity;  try {    entity=EntityList.createEntityFromNBT(nbttagcompound,w);    if (entity != null) {      entity.setLocationAndAngles(e.getX().doubleValue(),e.getY().doubleValue(),e.getZ().doubleValue(),e.getYaw().floatValue(),e.getPitch().floatValue());      entity.setVelocity(e.getXVel().doubleValue(),e.getYVel().doubleValue(),e.getZVel().doubleValue());      w.spawnEntityInWorld(entity);    }  } catch (  RuntimeException runtimeexception) {    throw new Exception("Couldn't create entity type: " + e.getType().getValue());  }}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  public CMULexicon(){  this("cmulex");}  }
class C{  public synchronized boolean isCompleted(){  return completed;}  }
class C{  public MarketGetQuery albumId(Integer value){  return unsafeParam("album_id",value);}  }
class C{  @Deprecated public static void putIANA2JavaMapping(String ianaEncoding,String javaEncoding){  fIANA2JavaMap.put(ianaEncoding,javaEncoding);}  }
class C{  public Time parseTime(String text) throws DataParseException {  m_pos.setErrorIndex(0);  m_pos.setIndex(0);  Time t=null;  try {    t=Time.valueOf(text);    m_pos.setIndex(text.length());  } catch (  IllegalArgumentException e) {    t=null;  }  if (t == null) {    java.util.Date d1=m_dfmt.parse(text,m_pos);    if (d1 != null) {      t=new Time(d1.getTime());    }  }  if (t == null || m_pos.getIndex() < text.length()) {    throw new DataParseException("Could not parse Date: " + text);  } else {    return t;  }}  }
class C{  public Bundler putDouble(String key,double value){  bundle.putDouble(key,value);  return this;}  }
class C{  public static ScriptContext createScriptContext(Map<String,Object> context){  Assert.notNull("context",context);  Map<String,Object> localContext=new HashMap<String,Object>(context);  localContext.put(WIDGET_CONTEXT_KEY,context);  localContext.put("context",context);  ScriptContext scriptContext=new SimpleScriptContext();  ScriptHelper helper=createScriptHelper(scriptContext);  if (helper != null) {    localContext.put(SCRIPT_HELPER_KEY,helper);  }  Bindings bindings=new SimpleBindings(localContext);  scriptContext.setBindings(bindings,ScriptContext.ENGINE_SCOPE);  return scriptContext;}  }
class C{  public void showMetrics(){}  }
class C{  public static Map addOrderItemShipGroupAssoc(DispatchContext dctx,Map<String,Object> context) throws GenericEntityException {  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  String orderId=(String)context.get("orderId");  String orderItemSeqId=(String)context.get("orderItemSeqId");  String shipGroupSeqId=(String)context.get("shipGroupSeqId");  BigDecimal quantity=(BigDecimal)context.get("quantity");  String mainErrorMessage=UtilProperties.getMessage(resource_error,"OrderUnableToAddItemToOISG",locale);  GenericValue orderItem=EntityQuery.use(delegator).from("OrderItem").where("orderId",orderId,"orderItemSeqId",orderItemSeqId).queryOne();  if (orderItem == null) {    String errMsg=mainErrorMessage + UtilProperties.getMessage(resource_error,"OrderErrorOrderItemNotFound",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItemSeqId),locale);    return ServiceUtil.returnError(errMsg);  }  String statusId=orderItem.getString("statusId");  if ("ITEM_CREATED".equals(statusId) || "ITEM_APPROVED".equals(statusId)) {    if ("new".equals(shipGroupSeqId)) {      try {        Map<String,Object> addOrderItemShipGroupMap=dctx.makeValidContext("addOrderItemShipGroup","IN",context);        addOrderItemShipGroupMap.remove("shipGroupSeqId");        List<GenericValue> oisgas=orderItem.getRelated("OrderItemShipGroupAssoc",null,null,false);        if (UtilValidate.isNotEmpty(oisgas)) {          GenericValue oisga=EntityUtil.getFirst(oisgas);          GenericValue oisg=oisga.getRelatedOne("OrderItemShipGroup",false);          if (UtilValidate.isNotEmpty(oisg)) {            addOrderItemShipGroupMap.put("shipmentMethodTypeId",oisg.get("shipmentMethodTypeId"));            addOrderItemShipGroupMap.put("carrierPartyId",oisg.get("carrierPartyId"));            addOrderItemShipGroupMap.put("carrierRoleTypeId",oisg.get("carrierRoleTypeId"));            addOrderItemShipGroupMap.put("contactMechId",oisg.get("contactMechId"));          }        }        Map<String,Object> result=null;        result=dispatcher.runSync("addOrderItemShipGroup",addOrderItemShipGroupMap);        if (result.containsKey("shipGroupSeqId")) {          shipGroupSeqId=(String)result.get("shipGroupSeqId");        }      } catch (      GenericServiceException e) {        String errMsg=UtilProperties.getMessage(resource,mainErrorMessage,locale);        return ServiceUtil.returnError(errMsg);      }    }    GenericValue orderItemShipGroup=EntityQuery.use(delegator).from("OrderItemShipGroup").where("orderId",orderId,"shipGroupSeqId",shipGroupSeqId).queryOne();    if (UtilValidate.isEmpty(orderItemShipGroup)) {      String errMsg=mainErrorMessage + UtilProperties.getMessage(resource_error,"OrderCartShipGroupNotFound",UtilMisc.toMap("groupIndex",shipGroupSeqId),locale);      return ServiceUtil.returnError(errMsg);    }    if (quantity == null || quantity.compareTo(BigDecimal.ZERO) == -1) {      String errMsg=mainErrorMessage + UtilProperties.getMessage(resource_error,"OrderQuantityAssociatedCannotBeNullOrNegative",locale);      return ServiceUtil.returnError(errMsg);    }    GenericValue oisgAssoc=EntityQuery.use(delegator).from("OrderItemShipGroupAssoc").where("orderId",orderId,"orderItemSeqId",orderItem.get("orderItemSeqId"),"shipGroupSeqId",shipGroupSeqId).queryOne();    if (UtilValidate.isNotEmpty(oisgAssoc)) {      String errMsg=mainErrorMessage + UtilProperties.getMessage(resource_error,"OrderErrorOrderItemAlreadyRelatedToShipGroup",locale);      return ServiceUtil.returnError(errMsg);    }    oisgAssoc=delegator.makeValue("OrderItemShipGroupAssoc",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItem.get("orderItemSeqId"),"shipGroupSeqId",shipGroupSeqId));    oisgAssoc.set("quantity",quantity);    oisgAssoc.create();    return ServiceUtil.returnSuccess();  } else {    String errMsg=UtilProperties.getMessage(resource,mainErrorMessage + orderItem,locale);    return ServiceUtil.returnError(errMsg);  }}  }
class C{  public IncompatibleComparatorException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static boolean urlIsValid(String url){  return new UrlValidator().isValid(url);}  }
class C{  public Suggester(){  this(0.80);}  }
class C{  public <E,D>void addMappedEntityClass(Class<E> entityClass,Class<D> dtoClass,JpaMapper<E,D> mapper){  checkNotInitialized();  if (mappings.containsKey(dtoClass)) {    throw new IllegalArgumentException(dtoClass.getName() + " is already registered");  }  mappings.put(dtoClass,new MappedRegistration<>(entityClass,dtoClass,mapper));}  }
class C{  public static void drawHorizontalMarginIndicator(Graphics2D g,String text,int x1,int x2,int y){  if (x1 > x2) {    int temp=x1;    x1=x2;    x2=temp;  }  if (text == null) {    g.drawLine(x1,y,x2,y);    g.drawLine(x1,y,x1 + CONNECTION_ARROW_SIZE,y - CONNECTION_ARROW_SIZE);    g.drawLine(x1,y,x1 + CONNECTION_ARROW_SIZE,y + CONNECTION_ARROW_SIZE);    g.drawLine(x2,y,x2 - CONNECTION_ARROW_SIZE,y - CONNECTION_ARROW_SIZE);    g.drawLine(x2,y,x2 - CONNECTION_ARROW_SIZE,y + CONNECTION_ARROW_SIZE);    return;  }  Canvas c=new Canvas();  FontMetrics fm=c.getFontMetrics(sFont);  g.setFont(sFont);  int padding=4;  Rectangle2D bounds=fm.getStringBounds(text,g);  int th=(int)bounds.getHeight();  int tw=(int)bounds.getWidth();  int offset=3 * CONNECTION_ARROW_SIZE;  int w=((x2 - x1) - (tw + 2 * padding)) / 2;  if (w <= padding) {    g.drawLine(x1,y,x2,y);    g.drawString(text,x1 + w + padding,y + offset);    g.drawLine(x1,y - CONNECTION_ARROW_SIZE,x1,y + CONNECTION_ARROW_SIZE);    g.drawLine(x2,y - CONNECTION_ARROW_SIZE,x2,y + CONNECTION_ARROW_SIZE);  } else {    g.drawLine(x1,y,x1 + w,y);    g.drawLine(x2 - w,y,x2,y);    g.drawString(text,x1 + w + padding,(int)(y + (bounds.getHeight() / 2)));    g.drawLine(x1,y,x1 + CONNECTION_ARROW_SIZE,y - CONNECTION_ARROW_SIZE);    g.drawLine(x1,y,x1 + CONNECTION_ARROW_SIZE,y + CONNECTION_ARROW_SIZE);    g.drawLine(x2,y,x2 - CONNECTION_ARROW_SIZE,y - CONNECTION_ARROW_SIZE);    g.drawLine(x2,y,x2 - CONNECTION_ARROW_SIZE,y + CONNECTION_ARROW_SIZE);  }}  }
class C{  public static List<? extends Element> childElementList(Element element,String... childElementNames){  return childElementList(element,UtilMisc.toSetArray(childElementNames));}  }
class C{  public void configure(UpdateTreeStructureInterface sldTree,JTree symbolTree,DefaultTreeModel treeModel,List<RenderSymbolInterface> renderList){  this.sldTree=sldTree;  this.symbolTree=symbolTree;  this.treeModel=treeModel;  this.renderList=renderList;}  }
class C{  @Override public void dataApplied(){  DefaultMutableTreeNode node;  if (selectedNode.isLeaf()) {    node=(DefaultMutableTreeNode)selectedNode.getParent();    if (node == null) {      node=selectedNode;    }  } else {    node=selectedNode;  }  TreeNode[] tmpNode=node.getPath();  model.reload();  tree.expandPath(new TreePath(tmpNode));  displayResult();}  }
class C{  public ArmorCursor queryArmorSearch(String search){  return mHelper.queryArmorSearch(search);}  }
class C{  private void createUI(){  panel=new JPanel();  panel.setLayout(null);  createField(FIELD_DB_TYPE,Localisation.getField(DataSourceConnectorArcSDE.class,"DataSourceConnectorArcSDE.databaseType"));  createField(FIELD_SERVER,Localisation.getField(DataSourceConnectorArcSDE.class,"DataSourceConnectorArcSDE.server"));  createField(FIELD_PORT,Localisation.getField(DataSourceConnectorArcSDE.class,"DataSourceConnectorArcSDE.port"));  createField(FIELD_INSTANCE,Localisation.getField(DataSourceConnectorArcSDE.class,"DataSourceConnectorArcSDE.instance"));  createField(FIELD_USER,Localisation.getField(DataSourceConnectorArcSDE.class,"DataSourceConnectorArcSDE.username"));  createField(FIELD_PASSWORD,Localisation.getField(DataSourceConnectorArcSDE.class,"DataSourceConnectorArcSDE.password"));  panel.setPreferredSize(new Dimension(FIELD_X + FIELD_WIDTH,textFieldMap.size() * ROW_HEIGHT));}  }
class C{  public static float addExp_Old(float[] logV){  float max=Float.NEGATIVE_INFINITY;  float maxIndex=0;  for (int i=0; i < logV.length; i++) {    if (logV[i] > max) {      max=logV[i];      maxIndex=i;    }  }  if (max == Float.NEGATIVE_INFINITY)   return Float.NEGATIVE_INFINITY;  float threshold=max - LOGTOLERANCE_F;  float sumNegativeDifferences=0.0f;  for (int i=0; i < logV.length; i++) {    if (i != maxIndex && logV[i] > threshold) {      sumNegativeDifferences+=Math.exp(logV[i] - max);    }  }  return (float)Math.exp(max) * (1.0f + sumNegativeDifferences);}  }
class C{  public TypeVariableBV typeVariable(){  int id=typeVariableList.size();  typeVariableList.add(null);  TypeVariableBV result=new TypeVariableBV(id,this);  typeVariableList.set(id,result);  return result;}  }
class C{  public IntIterator rangeSortedBy(String field,float lo,float hi,int indexType){  Index index=getIndex(field,float.class,true);  return index.rows(lo,hi,indexType);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static String toString(String d){  int idx=0;  StringBuilder sb=new StringBuilder();  if (d.charAt(0) == '(') {    ++idx;    sb.append("(");    while (idx < d.length() && d.charAt(idx) != ')') {      if (idx != 1)       sb.append(", ");      idx=Descriptor.toString(d,idx,sb);    }    if (idx >= d.length())     throw new JaninoRuntimeException("Invalid descriptor \"" + d + "\"");    sb.append(") => ");    ++idx;  }  Descriptor.toString(d,idx,sb);  return sb.toString();}  }
class C{  public AuthenticationToken removeAuthenticationToken(String host,String realm){  return this.authenticationTokens.remove(host.concat(realm));}  }
class C{  private void STAR_encoding_row(){  int i, j;  for (i=0; i < stripe_unit_size; i++) {    for (j=0; j < data_disk_nbr; j++) {      check_data[data_disk_nbr][i]^=check_data[j][i];    }  }}  }
class C{  public FieldConverter createFieldEncoder(DataField dataField,Cache<DictionaryColumnUniqueIdentifier,Dictionary> cache,CarbonTableIdentifier carbonTableIdentifier,int index){  if (dataField.getColumn().isDimesion()) {    if (dataField.getColumn().hasEncoding(Encoding.DICTIONARY)) {      return new DictionaryFieldConverterImpl(dataField,cache,carbonTableIdentifier,index);    } else     if (dataField.getColumn().hasEncoding(Encoding.DIRECT_DICTIONARY)) {      return new DirectDictionaryFieldConverterImpl(dataField,index);    } else     if (dataField.getColumn().isComplex()) {      return new ComplexFieldConverterImpl();    } else {      return new NonDictionaryFieldConverterImpl(dataField,index);    }  }  return null;}  }
class C{  @Override public String toString(){  return mLanguageName;}  }
class C{  private static BitMatrix encodeLowLevel(DefaultPlacement placement,SymbolInfo symbolInfo){  int symbolWidth=symbolInfo.getSymbolDataWidth();  int symbolHeight=symbolInfo.getSymbolDataHeight();  ByteMatrix matrix=new ByteMatrix(symbolInfo.getSymbolWidth(),symbolInfo.getSymbolHeight());  int matrixY=0;  for (int y=0; y < symbolHeight; y++) {    int matrixX;    if ((y % symbolInfo.matrixHeight) == 0) {      matrixX=0;      for (int x=0; x < symbolInfo.getSymbolWidth(); x++) {        matrix.set(matrixX,matrixY,(x % 2) == 0);        matrixX++;      }      matrixY++;    }    matrixX=0;    for (int x=0; x < symbolWidth; x++) {      if ((x % symbolInfo.matrixWidth) == 0) {        matrix.set(matrixX,matrixY,true);        matrixX++;      }      matrix.set(matrixX,matrixY,placement.getBit(x,y));      matrixX++;      if ((x % symbolInfo.matrixWidth) == symbolInfo.matrixWidth - 1) {        matrix.set(matrixX,matrixY,(y % 2) == 0);        matrixX++;      }    }    matrixY++;    if ((y % symbolInfo.matrixHeight) == symbolInfo.matrixHeight - 1) {      matrixX=0;      for (int x=0; x < symbolInfo.getSymbolWidth(); x++) {        matrix.set(matrixX,matrixY,true);        matrixX++;      }      matrixY++;    }  }  return convertByteMatrixToBitMatrix(matrix);}  }
class C{  public SmartScroller(JScrollPane scrollPane,int scrollDirection,int viewportPosition){  if (scrollDirection != HORIZONTAL && scrollDirection != VERTICAL)   throw new IllegalArgumentException("invalid scroll direction specified");  if (viewportPosition != START && viewportPosition != END)   throw new IllegalArgumentException("invalid viewport position specified");  this.viewportPosition=viewportPosition;  if (scrollDirection == HORIZONTAL)   scrollBar=scrollPane.getHorizontalScrollBar(); else   scrollBar=scrollPane.getVerticalScrollBar();  scrollBar.addAdjustmentListener(this);  Component view=scrollPane.getViewport().getView();  if (view instanceof JTextComponent) {    JTextComponent textComponent=(JTextComponent)view;    DefaultCaret caret=(DefaultCaret)textComponent.getCaret();    caret.setUpdatePolicy(DefaultCaret.NEVER_UPDATE);  }}  }
class C{  public BreakpointStmt newBreakpointStmt(){  return new JBreakpointStmt();}  }
class C{  public static void show(Context context,String text){  if (mToast == null) {    mToast=Toast.makeText(context,text,Toast.LENGTH_SHORT);  }  mToast.setDuration(Toast.LENGTH_SHORT);  mToast.setText(text);  mToast.show();}  }
class C{  public boolean deleteFilesInWhiteList(){  return true;}  }
class C{  public EnvVar(String name,Class<?> type,boolean predefined){  super();  this.name=name;  this.type=type;  this.predefined=predefined;}  }
class C{  @Override public boolean parseParameters(Object params){  if (params == null || !(params instanceof BuildBattleDecorator))   return false;  this.params=(BuildBattleDecorator)params;  this.sourceBounds=this.params.getGoalStructureBounds();  this.destBounds=this.params.getPlayerStructureBounds();  this.delta=new Vec3i(destBounds.getMin().getX() - sourceBounds.getMin().getX(),destBounds.getMin().getY() - sourceBounds.getMin().getY(),destBounds.getMin().getZ() - sourceBounds.getMin().getZ());  this.structureVolume=volumeOfBounds(this.sourceBounds);  assert (this.structureVolume == volumeOfBounds(this.destBounds));  this.dest=new ArrayList<IBlockState>(Collections.nCopies(this.structureVolume,(IBlockState)null));  this.source=new ArrayList<IBlockState>(Collections.nCopies(this.structureVolume,(IBlockState)null));  DrawBlockBasedObjectType tickBlock=this.params.getBlockTypeOnCorrectPlacement();  DrawBlockBasedObjectType crossBlock=this.params.getBlockTypeOnIncorrectPlacement();  this.blockTypeOnCorrectPlacement=(tickBlock != null) ? new XMLBlockState(tickBlock.getType(),tickBlock.getColour(),tickBlock.getFace(),tickBlock.getVariant()) : null;  this.blockTypeOnIncorrectPlacement=(crossBlock != null) ? new XMLBlockState(crossBlock.getType(),crossBlock.getColour(),crossBlock.getFace(),crossBlock.getVariant()) : null;  return true;}  }
class C{  public FieldConfigWKT(FieldConfigCommonData commonData){  super(commonData,SYMBOLTYPE_FIELD_STATE_RESOURCE);}  }
class C{  @Override protected int scanContent() throws IOException, XNIException {  XMLString content=fString;  int c=fEntityScanner.scanContent(content);  if (c == '\r' || c == 0x85 || c == 0x2028) {    fEntityScanner.scanChar();    fStringBuffer.clear();    fStringBuffer.append(fString);    fStringBuffer.append((char)c);    content=fStringBuffer;    c=-1;  }  if (fDocumentHandler != null && content.length > 0) {    fDocumentHandler.characters(content,null);  }  if (c == ']' && fString.length == 0) {    fStringBuffer.clear();    fStringBuffer.append((char)fEntityScanner.scanChar());    fInScanContent=true;    if (fEntityScanner.skipChar(']')) {      fStringBuffer.append(']');      while (fEntityScanner.skipChar(']')) {        fStringBuffer.append(']');      }      if (fEntityScanner.skipChar('>')) {        reportFatalError("CDEndInContent",null);      }    }    if (fDocumentHandler != null && fStringBuffer.length != 0) {      fDocumentHandler.characters(fStringBuffer,null);    }    fInScanContent=false;    c=-1;  }  return c;}  }
class C{  public static boolean isUrlUsable(String url){  if (AppUtils.isEmpty(url)) {    return false;  }  URL urlTemp=null;  HttpURLConnection connt=null;  try {    urlTemp=new URL(url);    connt=(HttpURLConnection)urlTemp.openConnection();    connt.setRequestMethod("HEAD");    int returnCode=connt.getResponseCode();    if (returnCode == HttpURLConnection.HTTP_OK) {      return true;    }  } catch (  Exception e) {    return false;  } finally {    connt.disconnect();  }  return false;}  }
class C{  private void populateCarbonMeasures(String[] measures){  CarbonTable carbonTable=CarbonMetadata.getInstance().getCarbonTable(meta.getDatabaseName() + CarbonCommonConstants.UNDERSCORE + meta.getTableName());  meta.carbonMeasures=new CarbonMeasure[measures.length];  msrDataType=new DataType[measures.length];  for (int i=0; i < measures.length; i++) {    CarbonMeasure carbonMeasure=carbonTable.getMeasureByName(meta.getTableName(),measures[i]);    msrDataType[i]=carbonMeasure.getDataType();    if (DataType.DECIMAL == carbonMeasure.getDataType()) {      meta.carbonMeasures[i]=carbonMeasure;    }  }}  }
class C{  public void step(int steps,double elapsedTime){  if (steps <= 0)   return;  if (elapsedTime <= 0.0)   return;  for (int i=0; i < steps; i++) {    this.step.update(elapsedTime);    this.step();  }}  }
class C{  @Override public boolean accept(File directory,String fileName){  if (!super.accept(directory,fileName))   return false;  String firstLine=Basic.getFirstLineFromFile(new File(fileName));  return firstLine != null && firstLine.contains("Naive Bayesian rRNA Classifier");}  }
class C{  public T proxy(){  executorFactoryBean.afterPropertiesSet();  return (T)executorFactoryBean.getObject();}  }
class C{  public static Integer adjustPort(Delegator delegator,Integer port){  if (port != null && Start.getInstance().getConfig().portOffset != 0) {    return port + Start.getInstance().getConfig().portOffset;  } else {    return port;  }}  }
class C{  @Override public InputSource resolveEntity(String publicId,String systemId) throws SAXException, IOException {  String resolvedId=null;  if (publicId != null && systemId != null) {    resolvedId=resolvePublic(publicId,systemId);  } else   if (systemId != null) {    resolvedId=resolveSystem(systemId);  }  if (resolvedId != null) {    InputSource source=new InputSource(resolvedId);    source.setPublicId(publicId);    return source;  }  return null;}  }
class C{  @Nullable private Operator.Kind parseOperator(TokenStream tokens){  if (tokens.has("=")) {    tokens.next();    tokens.expect("=");    return Operator.Kind.EQUALS;  }  if (tokens.has("!")) {    tokens.next();    tokens.expect("=");    return Operator.Kind.NOT_EQUALS;  }  if (tokens.has("<")) {    tokens.next();    if (tokens.has("=")) {      tokens.next();      return Operator.Kind.LESS_EQUAL;    }    return Operator.Kind.LESS;  }  if (tokens.has(">")) {    tokens.next();    if (tokens.has("=")) {      tokens.next();      return Operator.Kind.GREATER_EQUAL;    }    return Operator.Kind.GREATER;  }  return null;}  }
class C{  public final boolean canGet(String field,Class type){  return m_table.canGet(field,type);}  }
class C{  private void unableServerTextEdit(){  serverTextEdit.setEditable(false);  serverTextEdit.setVisible(false);  serverTextEdit.setPromptText("");}  }
class C{  public static void listMixersAndExit(boolean bPlayback){  out("Available Mixers:");  Mixer.Info[] aInfos=AudioSystem.getMixerInfo();  for (int i=0; i < aInfos.length; i++) {    Mixer mixer=AudioSystem.getMixer(aInfos[i]);    Line.Info lineInfo=new Line.Info(bPlayback ? SourceDataLine.class : TargetDataLine.class);    if (mixer.isLineSupported(lineInfo)) {      out(aInfos[i].getName());    }  }  if (aInfos.length == 0) {    out("[No mixers available]");  }  System.exit(0);}  }
class C{  protected void readConfigFile(VendorOptionFactoryInterface vendorOptionFactory,UpdateSymbolInterface parent,String filename){  internal_readConfigFile(vendorOptionFactory,parent.getClass(),parent,filename,false,false);}  }
class C{  private StatementFlowable(){  throw new IllegalStateException("No instances!");}  }
class C{  @Override public void onDraw(Canvas canvas){  mLastDrawTimeMs=System.currentTimeMillis();  super.onDraw(canvas);}  }
class C{  public BoardGetTopicsQuery topicIds(Integer... value){  return unsafeParam("topic_ids",value);}  }
class C{  @Override public Future<List<Future<DLSN>>> writeBulk(final List<LogRecord> records){  final Stopwatch stopwatch=Stopwatch.createStarted();  return Future.value(asyncWriteBulk(records)).addEventListener(new OpStatsListener<List<Future<DLSN>>>(bulkWriteOpStatsLogger,stopwatch));}  }
class C{  public void addSecurityRequirementExtensionForEntireService(Swagger swagger){  AuthenticationRule.Builder builder=AuthenticationRule.newBuilder();  if (convertSecurityRequirementExtension(swagger.getVendorExtensions(),builder,new SimpleLocation("Swagger Spec"))) {    builder.setSelector("*");    authRules.add(builder.build());  }}  }
class C{  @Override public boolean mayIntersect(S2Cell cell){  if (numVertices() == 0) {    return false;  }  for (int i=0; i < numVertices(); ++i) {    if (cell.contains(vertex(i))) {      return true;    }  }  S2Point[] cellVertices=new S2Point[4];  for (int i=0; i < 4; ++i) {    cellVertices[i]=cell.getVertex(i);  }  for (int j=0; j < 4; ++j) {    S2EdgeUtil.EdgeCrosser crosser=new S2EdgeUtil.EdgeCrosser(cellVertices[j],cellVertices[(j + 1) & 3],vertex(0));    for (int i=1; i < numVertices(); ++i) {      if (crosser.robustCrossing(vertex(i)) >= 0) {        return true;      }    }  }  return false;}  }
class C{  @Override public ArrayList<Point> internalTrim(ArrayList<Point> input){  ArrayList<Point> output=new ArrayList<>(DataNormalizer.POINT_COUNT);  Iterator<Point> it=input.iterator();  for (int i=0; i < DataNormalizer.POINT_COUNT; i++) {    output.add(it.next());  }  return output;}  }
class C{  public boolean filterOut(final SAMRecord first,final SAMRecord second){  throw new UnsupportedOperationException("Paired *Filter not implemented!");}  }
class C{  private Set<String> extractValues(Matcher tokenizedQuery,String filterQuery) throws BadFilterException {  try {    return new LinkedHashSet<>(FilterTokenizer.split(tokenizedQuery.group(3).replaceAll("\\[","").replaceAll("\\]","").trim()));  } catch (  IllegalArgumentException e) {    LOG.debug(FILTER_ERROR.logFormat(filterQuery,e.getMessage()),e);    throw new BadFilterException(FILTER_ERROR.format(filterQuery,e.getMessage()),e);  }}  }
class C{  private void attemptLogin(){  if (mHmacAndKeyTask != null || !checkOnline("Please connect to the Internet","You must be online to register your USB stick.")) {    return;  }  mUsernameView.setError(null);  mPasswordView.setError(null);  String username=mUsernameView.getText().toString();  String password=mPasswordView.getText().toString();  boolean cancel=false;  View focusView=null;  if (TextUtils.isEmpty(password)) {    mPasswordView.setError(getString(R.string.error_invalid_password));    focusView=mPasswordView;    cancel=true;  }  if (TextUtils.isEmpty(username)) {    mUsernameView.setError(getString(R.string.error_field_required));    focusView=mUsernameView;    cancel=true;  }  if (cancel) {    focusView.requestFocus();  } else {    showProgress(true);    mHmacAndKeyTask=new GetHmacAndKey(username,password);    mHmacAndKeyTask.execute((Void)null);  }}  }
class C{  @NotNull private Point viewToModel(@NotNull Point p){  return new Point((int)(p.x / myScale),(int)(p.y / myScale));}  }
class C{  public OPCHardwareAddressImpl(final String pItemName,final int pCommandPulseLength) throws ConfigurationException {  setOPCItemName(pItemName);  setCommandPulseLength(pCommandPulseLength);  setCurrentOPCItemName(getOPCItemName());}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  static int userCheck(String stmt,int offset){  if (stmt.length() > offset + 5) {    char c1=stmt.charAt(++offset);    char c2=stmt.charAt(++offset);    char c3=stmt.charAt(++offset);    char c4=stmt.charAt(++offset);    char c5=stmt.charAt(++offset);    if ((c1 == 'S' || c1 == 's') && (c2 == 'E' || c2 == 'e') && (c3 == 'R' || c3 == 'r')&& (c4 == '(')&& (c5 == ')')&& (stmt.length() == ++offset || ParseUtil.isEOF(stmt.charAt(offset)))) {      return USER;    }  }  return OTHER;}  }
class C{  public boolean isMouseDown(){  return mMouseDown;}  }
class C{  private void add(AnnotateBlock aBlock){  int size=blocks.size();  if (size == 0) {    blocks.add(aBlock);  } else {    AnnotateBlock lastBlock=(AnnotateBlock)blocks.get(size - 1);    if (lastBlock.getRevision() == aBlock.getRevision()) {      lastBlock.setEndLine(aBlock.getStartLine());    } else {      blocks.add(aBlock);    }  }}  }
class C{  protected void configureXML11Pipeline(){  if (fCurrentDVFactory != fXML11DatatypeFactory) {    fCurrentDVFactory=fXML11DatatypeFactory;    setProperty(DATATYPE_VALIDATOR_FACTORY,fCurrentDVFactory);  }  if (fCurrentDTDScanner != fXML11DTDScanner) {    fCurrentDTDScanner=fXML11DTDScanner;    setProperty(DTD_SCANNER,fCurrentDTDScanner);    setProperty(DTD_PROCESSOR,fXML11DTDProcessor);  }  fXML11DTDScanner.setDTDHandler(fXML11DTDProcessor);  fXML11DTDProcessor.setDTDSource(fXML11DTDScanner);  fXML11DTDProcessor.setDTDHandler(fDTDHandler);  if (fDTDHandler != null) {    fDTDHandler.setDTDSource(fXML11DTDProcessor);  }  fXML11DTDScanner.setDTDContentModelHandler(fXML11DTDProcessor);  fXML11DTDProcessor.setDTDContentModelSource(fXML11DTDScanner);  fXML11DTDProcessor.setDTDContentModelHandler(fDTDContentModelHandler);  if (fDTDContentModelHandler != null) {    fDTDContentModelHandler.setDTDContentModelSource(fXML11DTDProcessor);  }  if (fFeatures.get(NAMESPACES) == Boolean.TRUE) {    if (fCurrentScanner != fXML11NSDocScanner) {      fCurrentScanner=fXML11NSDocScanner;      setProperty(DOCUMENT_SCANNER,fXML11NSDocScanner);      setProperty(DTD_VALIDATOR,fXML11NSDTDValidator);    }    fXML11NSDocScanner.setDTDValidator(fXML11NSDTDValidator);    fXML11NSDocScanner.setDocumentHandler(fXML11NSDTDValidator);    fXML11NSDTDValidator.setDocumentSource(fXML11NSDocScanner);    fXML11NSDTDValidator.setDocumentHandler(fDocumentHandler);    if (fDocumentHandler != null) {      fDocumentHandler.setDocumentSource(fXML11NSDTDValidator);    }    fLastComponent=fXML11NSDTDValidator;  } else {    if (fXML11DocScanner == null) {      fXML11DocScanner=new XML11DocumentScannerImpl();      addXML11Component(fXML11DocScanner);      fXML11DTDValidator=new XML11DTDValidator();      addXML11Component(fXML11DTDValidator);    }    if (fCurrentScanner != fXML11DocScanner) {      fCurrentScanner=fXML11DocScanner;      setProperty(DOCUMENT_SCANNER,fXML11DocScanner);      setProperty(DTD_VALIDATOR,fXML11DTDValidator);    }    fXML11DocScanner.setDocumentHandler(fXML11DTDValidator);    fXML11DTDValidator.setDocumentSource(fXML11DocScanner);    fXML11DTDValidator.setDocumentHandler(fDocumentHandler);    if (fDocumentHandler != null) {      fDocumentHandler.setDocumentSource(fXML11DTDValidator);    }    fLastComponent=fXML11DTDValidator;  }  if (fFeatures.get(XMLSCHEMA_VALIDATION) == Boolean.TRUE) {    if (fSchemaValidator == null) {      fSchemaValidator=new XMLSchemaValidator();      setProperty(SCHEMA_VALIDATOR,fSchemaValidator);      addCommonComponent(fSchemaValidator);      fSchemaValidator.reset(this);      if (fErrorReporter.getMessageFormatter(XSMessageFormatter.SCHEMA_DOMAIN) == null) {        XSMessageFormatter xmft=new XSMessageFormatter();        fErrorReporter.putMessageFormatter(XSMessageFormatter.SCHEMA_DOMAIN,xmft);      }    }    fLastComponent.setDocumentHandler(fSchemaValidator);    fSchemaValidator.setDocumentSource(fLastComponent);    fSchemaValidator.setDocumentHandler(fDocumentHandler);    if (fDocumentHandler != null) {      fDocumentHandler.setDocumentSource(fSchemaValidator);    }    fLastComponent=fSchemaValidator;  }}  }
class C{  protected VideoGetAlbumsByVideoQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  private static boolean checkSentence(String[] s1,String[] s2){  int n1=0, n2=0;  for (  String word : s1) {    n1+=word.split("_").length;  }  for (  String word : s2) {    n2+=word.split("_").length;  }  return n1 == n2;}  }
class C{  @Override public boolean isReadOnly() throws RemoteException {  return this.readOnly;}  }
class C{  public static boolean isShowErrorDetails(){  return showErrorDetails;}  }
class C{  public void endAction(MotionEvent me){  OnChartGestureListener l=mChart.getOnChartGestureListener();  if (l != null)   l.onChartGestureEnd(me,mLastGesture);}  }
class C{  public HTMLWriter(boolean omitXHTMLNamespace){  nsSupport=new NamespaceSupport();  prefixTable=new Hashtable<String,String>();  forcedDeclTable=new Hashtable<String,Boolean>();  doneDeclTable=new Hashtable<String,String>();  outputProperties=new Properties();  setOutputProperty(METHOD,"html");  setOutputProperty(OMIT_XML_DECLARATION,"yes");  mOmitXHTMLNamespace=omitXHTMLNamespace;  mIgnoredTags=new Stack<String>();}  }
class C{  @Override public synchronized void powerOnSelfTest() throws Error {}  }
class C{  public Builder doubleClickZoom(Boolean doubleClickZoom){  this.doubleClickZoom=doubleClickZoom;  return this;}  }
class C{  public static double mean(double[] vector){  double sum=0;  if (vector.length == 0) {    return 0;  }  for (  double aVector : vector) {    sum+=aVector;  }  return sum / (double)vector.length;}  }
class C{  public Builder addColumnsInteger(String... names){  for (  String s : names)   addColumnInteger(s);  return this;}  }
class C{  private static boolean isKDE(){  return System.getenv("KDE_SESSION_VERSION") != null;}  }
class C{  public void deactivate(){  mSpectaculumView.setOnTouchListener(null);  mSpectaculumView.setTouchEnabled(mSpectaculumViewTouchEnabled);  mActive=false;}  }
class C{  private ByteBuffer read(FileChannel channel,int size,long offset){  ByteBuffer byteBffer=ByteBuffer.allocate(size);  try {    channel.position(offset);    channel.read(byteBffer);  } catch (  Exception e) {    LOGGER.error(e,e.getMessage());  }  byteBffer.rewind();  return byteBffer;}  }
class C{  public static RxJavaCallAdapterFactory create(){  return new RxJavaCallAdapterFactory(null);}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  @Override public final boolean equals(final Object copy){  boolean result=copy != null && copy instanceof HardwareAddress && this.getClass().equals(copy.getClass());  if (result) {    Field[] fields=this.getClass().getDeclaredFields();    for (    Field field : fields) {      if (!Modifier.isFinal(field.getModifiers()) && !Modifier.isStatic(field.getModifiers()) && !Modifier.isTransient(field.getModifiers())) {        try {          if ((field.get(this) != null && field.get(copy) == null) || (field.get(this) == null && field.get(copy) != null)) {            result=false;          } else           if (field.get(this) != null && field.get(copy) != null) {            if (field.getType().isArray()) {              if (Object[].class.isAssignableFrom(field.getType())) {                result=Arrays.equals((Object[])field.get(this),(Object[])field.get(copy));              } else {                result=ArrayUtils.isEquals(field.get(this),field.get(copy));              }            } else {              result=field.get(this).equals(field.get(copy));            }          }        } catch (        Exception e) {          result=false;        }      }      if (!result)       break;    }  }  return result;}  }
class C{  public <RES>MatcherNext<RES,ARG> as(AnyType<RES> dummy){  return new MatcherNext<>(arg);}  }
class C{  @Override public void startElement(QName element,XMLAttributes attributes,Augmentations augs) throws XNIException {  handleStartElement(element,attributes,augs);  if (fDocumentHandler != null) {    fDocumentHandler.startElement(element,attributes,augs);  }}  }
class C{  private void computeTax2SpeciesMapRec(final Node v,int speciesId,final IntIntMap taxId2SpeciesId,final ProgressListener progress) throws CanceledException {  final int taxId=(Integer)v.getInfo();  if (speciesId == 0) {    if (name2IdMap.getRank(taxId) == TaxonomicLevels.getSpeciesId()) {      speciesId=taxId;      taxId2SpeciesId.put(taxId,speciesId);    }  } else   taxId2SpeciesId.put(taxId,speciesId);  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e))   computeTax2SpeciesMapRec(e.getTarget(),speciesId,taxId2SpeciesId,progress);  progress.incrementProgress();}  }
class C{  public QRDecomposition(RealMatrix matrix){  this(matrix,0d);}  }
class C{  public void reset(){  lock.lock();  value=start;  lock.unlock();}  }
class C{  @Override public final boolean isEmpty(){  return getAll().isEmpty();}  }
class C{  public void writeTo(Writer w) throws Exception {  if (type.isUtterances())   throw new IOException("Cannot write out utterance-based data type!");  if (type.isXMLType()) {    throw new IOException("Better write XML data to an OutputStream, not to a Writer");  } else   if (type.isTextType()) {    w.write(plainText);    w.flush();    Log.d(Mary.LOG,"Writing Text output:\n" + plainText);  } else {    throw new Exception("Illegal attempt to write audio data to a character Writer");  }}  }
class C{  private void refreshStatusInfinite(Collection<? extends IResource> resources){  Set<IResource> alreadyRefreshedResources=new HashSet<IResource>();  for (  IResource resource : resources) {    if (!alreadyRefreshedResources.contains(resource)) {      try {        IResource[] refreshedResources=SVNProviderPlugin.getPlugin().getStatusCacheManager().refreshStatus(resource,true);        alreadyRefreshedResources.addAll(Arrays.asList(refreshedResources));      } catch (      SVNException e) {        SVNProviderPlugin.log(IStatus.ERROR,e.getMessage(),e);      }    }  }}  }
class C{  public boolean isImmutable(){  return true;}  }
class C{  public StackedAreaChart(String group,String field,String[] columns,double threshold){  super(group);  this.columns=columns;  baseline=new double[columns.length];  peaks=new double[columns.length];  poly=new float[4 * columns.length];  m_field=field;  m_start=PrefuseLib.getStartField(field);  m_end=PrefuseLib.getEndField(field);  setThreshold(threshold);  m_model=new NumberRangeModel(0,1,0,1);}  }
class C{  @Override public boolean equals(Object that){  if (!(that instanceof S2Cap)) {    return false;  }  S2Cap other=(S2Cap)that;  return (axis.equals(other.axis) && height == other.height) || (isEmpty() && other.isEmpty()) || (isFull() && other.isFull());}  }
class C{  public final boolean containsKey(String name){  return mMap.containsKey(name);}  }
class C{  public static TextBlock parseTextBlock(ParseContext parseContext){  return TextBlockSectionParser.parseTextBlock(parseContext);}  }
class C{  private void correctTooLow(int childCount){  if (mFirstPosition == 0 && childCount > 0) {    final int firstTop=getScrollChildTop();    final int start=mListPadding.top;    final int end=(getBottom() - getTop()) - mListPadding.bottom;    int topOffset=firstTop - start;    final int lastBottom=getScrollChildBottom();    int lastPosition=mFirstPosition + childCount - 1;    if (topOffset > 0) {      if (lastPosition < mItemCount - 1 || lastBottom > end) {        if (lastPosition == mItemCount - 1) {          topOffset=Math.min(topOffset,lastBottom - end);        }        tryOffsetChildrenTopAndBottom(-topOffset);        if (lastPosition < mItemCount - 1) {          fillDown(lastPosition + 1,getFillChildTop() + mDividerHeight);          adjustViewsUpOrDown();        }      } else       if (lastPosition == mItemCount - 1) {        adjustViewsUpOrDown();      }    }  }}  }
class C{  public static Matrix constructWithCopy(double[][] A){  int m=A.length;  int n=A[0].length;  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    if (A[i].length != n) {      throw new IllegalArgumentException("All rows must have the same length.");    }    for (int j=0; j < n; j++) {      C[i][j]=A[i][j];    }  }  return X;}  }
class C{  public static void unregisterContainerMBean(IJSpaceContainer container) throws Exception {  String containerName=container.getName();  if (m_MBeanServer == null)   return;  try {    ObjectInstance objInst=m_MBeansRepository.remove(containerName);    if (objInst != null) {      getMBeanServer(containerName).unregisterMBean(objInst.getObjectName());      if (_logger.isLoggable(Level.CONFIG)) {        _logger.config("Container <" + containerName + "> MBean was unregistered successfully.");      }    }  } catch (  Exception ex) {    if (_logger.isLoggable(Level.WARNING)) {      _logger.log(Level.WARNING,"Failed to unregister MBean for <" + containerName + "> container",ex);    }  }}  }
class C{  private void sendBeforeTextChanged(CharSequence s,int start,int count,int after){  if (mListeners != null) {    for (int i=0; i < mListeners.size(); i++) {      mListeners.get(i).beforeTextChanged(s,start,count,after);    }  }}  }
class C{  public void onStackAnimationFinished(){  mStackAnimationCount--;  if (mStackAnimationCount == 0)   super.onAnimationFinished();}  }
class C{  @Deprecated public String jsEscape(String object,String quoteChar){  return jsEncode(object);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_NoFly_END_ME_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200472,skilltarget);}  }
class C{  public boolean filterOut(final SAMRecord first,final SAMRecord second){  throw new UnsupportedOperationException("Paired *Filter not implemented!");}  }
class C{  @RequestMapping(value="/push_logs",method=RequestMethod.GET) public JsonResponse pagingPushLogs(@RequestParam("appId") Long appId,@RequestParam(value="pageNo",defaultValue="1") Integer pageNo,@RequestParam(value="pageSize",defaultValue="10") Integer pageSize){  Response<Page<PushLog>> pageResp=pushLogService.pagingConfigPushLog(appId,pageNo,pageSize);  if (!pageResp.isSuccess()) {    Logs.error("failed to paging push logs(appId={}, pageNo={}, pageSize={}), cause: {}",appId,pageNo,pageSize,pageResp.getErr());    return JsonResponse.notOk(pageResp.getErr());  }  Page<PushLogDto> logDtoPage=render2PushLogDto(pageResp.getData());  return JsonResponse.ok(logDtoPage);}  }
class C{  public static ColorStateList toColorStateList(int normalColor,int pressedColor){  return toColorStateList(normalColor,pressedColor,pressedColor,normalColor);}  }
class C{  final LinkedVertexHull divide(Vector2[] points,int first,int last){  int size=last - first;  if (size == 0) {    return new LinkedVertexHull(points[first]);  } else {    int mid=(first + last) / 2;    LinkedVertexHull left=divide(points,first,mid);    LinkedVertexHull right=divide(points,mid + 1,last);    return LinkedVertexHull.merge(left,right);  }}  }
class C{  public static Recipe fromCursor(Cursor cursor){  Recipe recipe=new Recipe(null);  for (int c=0; c < cursor.getColumnCount(); c++) {    String columnName=cursor.getColumnName(c);    if (columnName.equals(RecipeTable.ID_COLUMN)) {      recipe.id=cursor.getString(c);    } else     if (columnName.equals(RecipeTable.TITLE_COLUMN)) {      recipe.setTitle(cursor.getString(c));    } else     if (columnName.equals(RecipeTable.DESCRIPTION_COLUMN)) {      recipe.setDescription(cursor.getString(c));    } else     if (columnName.equals(RecipeTable.PHOTO_COLUMN)) {      recipe.setPhoto(cursor.getString(c));    } else     if (columnName.equals(RecipeTable.PREP_TIME_COLUMN)) {      recipe.setPrepTime(cursor.getString(c));    }  }  return recipe;}  }
class C{  public static Hurt handle(EntityLivingBase entity,DamageSource source,float damage){  Hurt event=new Hurt(entity,source,damage);  OpenModLoader.getEventBus().post(event);  return event;}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  @SuppressWarnings("unchecked") public static final <T>T castToType(final Object value,final Class<T> clazz){  return (T)cast(value,clazz);}  }
class C{  public static HttpResponse execute(HttpMethod method,String targetUrl,String body) throws IOException, KeyStoreException, NoSuchAlgorithmException, CertificateException, KeyManagementException {  return execute(method,targetUrl,body,null);}  }
class C{  @Override public double cost(double a,double b){  double res=(a > b ? (a - b) : (b - a));  double dev=res / ((a + b) / 2.0);  if (dev < stepVal)   return (res); else   return (0.0);}  }
class C{  public static boolean isInitialized(Context ctx){  vitamioPackage=ctx.getPackageName();  vitamioLibraryPath=ContextUtils.getDataDir(ctx) + "lib/";  return true;}  }
class C{  public static String hexDump(byte[] b){  if (b == null)   return "";  StringBuffer buf=new StringBuffer();  int size=b.length;  for (int i=0; i < size; i++) {    if ((i + 1) % 16 == 0) {      buf.append(zeropad(Integer.toHexString(byteToUInt(b[i])).toUpperCase(),2));      buf.append("\n");    } else {      buf.append(zeropad(Integer.toHexString(byteToUInt(b[i])).toUpperCase(),2));      buf.append(" ");    }  }  return buf.toString();}  }
class C{  public static Zpsdmat o(Zpsdmat A) throws JampackException {  if (A.nrow != A.ncol)   throw new JampackException("Cannot compute the inverse of a rectangular matrix.");  Zpsdmat B=new Zpsdmat(Solve.aib(A,Eye.o(A.nrow)));  for (int i=0; i < B.ncol; i++) {    for (int j=i + 1; j < B.ncol; j++) {      B.re[j][i]=B.re[i][j];      B.im[j][i]=-B.im[i][j];    }    B.im[i][i]=0.0;  }  return B;}  }
class C{  public void solve(){  submitInitialSeeds();  awaitCompletionComputeValuesAndShutdown();}  }
class C{  @Override public boolean isEmpty(){  return false;}  }
class C{  @Path() public void onGet(){  JSON jo=new JSON();  Temp t=Temp.create("code.jpg");  try {    Captcha.create(this.sid(),System.currentTimeMillis() + 5 * X.AMINUTE,200,60,t.getFile(),4);    jo.put(X.STATE,200);    jo.put("sid",sid());    jo.put("uri",t.getUri() + "?" + System.currentTimeMillis());  } catch (  Exception e1) {    log.error(e1.getMessage(),e1);    OpLog.error(captcha.class,"",e1.getMessage(),e1,login,this.getRemoteHost());    jo.put(X.STATE,201);    jo.put(X.MESSAGE,e1.getMessage());  }  this.response(jo);}  }
class C{  @Override public GammaDistribution makeDistribution(){  return new GammaDistribution(4d,2d);}  }
class C{  public boolean hasPurchase(String sku){  return mPurchaseMap.containsKey(sku);}  }
class C{  private void updateMenuItems(){  boolean undoAllowed=(currentIndex > 0) && !undoList.isEmpty();  boolean redoAllowed=(currentIndex < undoList.size());  logger.debug(String.format("Current index : %d List : %d Undo %s Redo %s",currentIndex,undoList.size(),undoAllowed,redoAllowed));  for (  UndoStateInterface listener : listenerList) {    listener.updateUndoRedoState(undoAllowed,redoAllowed);  }}  }
class C{  protected AudioAddAlbumQuery title(String value){  return unsafeParam("title",value);}  }
class C{  public static double nextAfter(double d,double direction){  if (Double.isNaN(d) || Double.isInfinite(d)) {    return d;  } else   if (d == 0) {    return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;  }  long bits=Double.doubleToLongBits(d);  long sign=bits & 0x8000000000000000L;  long exponent=bits & 0x7ff0000000000000L;  long mantissa=bits & 0x000fffffffffffffL;  if (d * (direction - d) >= 0) {    if (mantissa == 0x000fffffffffffffL) {      return Double.longBitsToDouble(sign | (exponent + 0x0010000000000000L));    } else {      return Double.longBitsToDouble(sign | exponent | (mantissa + 1));    }  } else {    if (mantissa == 0L) {      return Double.longBitsToDouble(sign | (exponent - 0x0010000000000000L) | 0x000fffffffffffffL);    } else {      return Double.longBitsToDouble(sign | exponent | (mantissa - 1));    }  }}  }
class C{  public void apply(NexusStreamParser np) throws Exception {}  }
class C{  private void writeBinaryTo(DataOutput out,List<Integer> featuresToDrop) throws IOException {  int droppedByteFeatures=0;  int droppedShortFeatures=0;  int droppedContinuousFeatures=0;  for (  int f : featuresToDrop) {    if (f < numByteFeatures) {      droppedByteFeatures++;    } else     if (f < numByteFeatures + numShortFeatures) {      droppedShortFeatures++;    } else     if (f < numByteFeatures + numShortFeatures + numContinuousFeatures) {      droppedContinuousFeatures++;    }  }  out.writeInt(numByteFeatures - droppedByteFeatures);  for (int i=0; i < numByteFeatures; i++) {    if (featuresToDrop.contains(i)) {      continue;    }    if (featureWeights != null) {      out.writeFloat(featureWeights[i]);    } else {      out.writeFloat(0);    }    out.writeUTF(getFeatureName(i));    int numValues=getNumberOfValues(i);    byte numValuesEncoded=(byte)numValues;    out.writeByte(numValuesEncoded);    for (int b=0; b < numValues; b++) {      String value=getFeatureValueAsString(i,b);      out.writeUTF(value);    }  }  out.writeInt(numShortFeatures - droppedShortFeatures);  for (int i=numByteFeatures; i < numByteFeatures + numShortFeatures; i++) {    if (featuresToDrop.contains(i)) {      continue;    }    if (featureWeights != null) {      out.writeFloat(featureWeights[i]);    } else {      out.writeFloat(0);    }    out.writeUTF(getFeatureName(i));    short numValues=(short)getNumberOfValues(i);    out.writeShort(numValues);    for (short b=0; b < numValues; b++) {      String value=getFeatureValueAsString(i,b);      out.writeUTF(value);    }  }  out.writeInt(numContinuousFeatures - droppedContinuousFeatures);  for (int i=numByteFeatures + numShortFeatures; i < numByteFeatures + numShortFeatures + numContinuousFeatures; i++) {    if (featuresToDrop.contains(i)) {      continue;    }    if (featureWeights != null) {      out.writeFloat(featureWeights[i]);      out.writeUTF(floatWeightFuncts[i - numByteFeatures - numShortFeatures]);    } else {      out.writeFloat(0);      out.writeUTF("");    }    out.writeUTF(getFeatureName(i));  }}  }
class C{  private static Properties mergeProperties(Properties overrideProperties,Properties properties){  Properties merged=new Properties();  if (properties != null)   merged.putAll(properties);  if (overrideProperties != null)   merged.putAll(overrideProperties);  return merged;}  }
class C{  public static boolean putMapNotEmptyKeyAndValue(Map<String,String> map,String key,String value){  if (map == null || StringUtil.isEmpty(key) || StringUtil.isEmpty(value)) {    return false;  }  map.put(key,value);  return true;}  }
class C{  public LsClientPacket clonePacket(){  try {    return (LsClientPacket)super.clone();  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  private void parseAndAdd(String line){  StringTokenizer tokenizer=new StringTokenizer(line," ");  String phone=tokenizer.nextToken();  float mean=Float.parseFloat(tokenizer.nextToken());  float stddev=Float.parseFloat(tokenizer.nextToken());  phoneDurations.put(phone,new PhoneDuration(mean,stddev));}  }
class C{  public static byte[] writeObject(Object object) throws IOException {  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  ObjectOutputStream out=new ObjectOutputStream(buffer);  out.writeObject(object);  out.close();  return buffer.toByteArray();}  }
class C{  public static double solve(UnivariateFunction function,double x0,double x1,double absoluteAccuracy) throws MathIllegalArgumentException, NullArgumentException {  MathUtils.checkNotNull(function,LocalizedCoreFormats.FUNCTION);  final UnivariateSolver solver=new BrentSolver(absoluteAccuracy);  return solver.solve(Integer.MAX_VALUE,function,x0,x1);}  }
class C{  public FastByteArrayInputStream convertToInputStream(){  return new FastByteArrayInputStream(buf,count);}  }
class C{  public NaturalRanking(NaNStrategy nanStrategy){  super();  this.nanStrategy=nanStrategy;  tiesStrategy=DEFAULT_TIES_STRATEGY;  randomData=null;}  }
class C{  private static List<StatFunction> wrapModifiers(Item item,List<StatFunction> modifiers){  List<StatFunction> allModifiers=new ArrayList<StatFunction>();  for (  StatFunction modifier : modifiers) {switch (modifier.getName()) {case ATTACK_SPEED:case PVP_ATTACK_RATIO:case BOOST_CASTING_TIME:      continue;default :    allModifiers.add(modifier);}}return allModifiers;}  }
class C{  public static double[] genPulseFromFourierMag(double[] mag,double f0){  int numHarm=mag.length;  int currentF0=(int)Math.round(f0);  int T;  if (currentF0 < 512)   T=512; else   T=1024;  int T2=2 * T;  double[] pulse=new double[T];  double[] real=new double[T2];  double[] imag=new double[T2];  real[0]=real[T]=0.0;  for (int i=1; i <= numHarm; i++) {    real[i]=real[T - i]=real[T + i]=real[T2 - i]=mag[i - 1];    imag[i]=imag[T - i]=imag[T + i]=imag[T2 - i]=0.0;  }  for (int i=(numHarm + 1); i < (T - numHarm); i++) {    real[i]=real[T - i]=real[T + i]=real[T2 - i]=1.0;    imag[i]=imag[T - i]=imag[T + i]=imag[T2 - i]=0.0;  }  FFT.transform(real,imag,true);  double sqrt_f0=Math.sqrt(currentF0);  for (int i=0; i < T; i++)   pulse[i]=real[(i - numHarm) % T] * sqrt_f0;  return pulse;}  }
class C{  public static ExisitingJiniTransactionHolder unbindExistingTransactionIfPossible(){  return (ExisitingJiniTransactionHolder)TransactionSynchronizationManager.unbindResourceIfPossible(CONTEXT);}  }
class C{  @Override public void onPassphraseCreated(String passphrase){  if (!mProfileSyncService.isBackendInitialized()) {    return;  }  configureEncryption(passphrase);}  }
class C{  private String md5(String str){  if (str == null) {    return null;  }  MessageDigest messageDigest=null;  try {    messageDigest=MessageDigest.getInstance(QuickPayConf.signType);    messageDigest.reset();    messageDigest.update(str.getBytes(QuickPayConf.charset));  } catch (  NoSuchAlgorithmException e) {    return str;  }catch (  UnsupportedEncodingException e) {    return str;  }  byte[] byteArray=messageDigest.digest();  StringBuffer md5StrBuff=new StringBuffer();  for (int i=0; i < byteArray.length; i++) {    if (Integer.toHexString(0xFF & byteArray[i]).length() == 1)     md5StrBuff.append("0").append(Integer.toHexString(0xFF & byteArray[i])); else     md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));  }  return md5StrBuff.toString();}  }
class C{  @Deprecated public static String removeIANA2JavaMapping(String ianaEncoding){  return (String)fIANA2JavaMap.remove(ianaEncoding);}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  @Override public void processUtterance(Utterance utterance) throws ProcessException {  if (utterance.getRelation(Relation.WORD) == null) {    throw new IllegalStateException("Word relation has not been set");  } else   if (utterance.getRelation(Relation.SYLLABLE) != null) {    throw new IllegalStateException("Syllable relation has already been set");  } else   if (utterance.getRelation(Relation.SYLLABLE_STRUCTURE) != null) {    throw new IllegalStateException("SylStructure relation has already been set");  } else   if (utterance.getRelation(Relation.SEGMENT) != null) {    throw new IllegalStateException("Segment relation has already been set");  }  String stress=NO_STRESS;  Relation syl=utterance.createRelation(Relation.SYLLABLE);  Relation sylstructure=utterance.createRelation(Relation.SYLLABLE_STRUCTURE);  Relation seg=utterance.createRelation(Relation.SEGMENT);  String voicename=utterance.getVoice().getName();  Lexicon lex=utterance.getVoice().getLexicon();  List syllableList=null;  for (Item word=utterance.getRelation(Relation.WORD).getHead(); word != null; word=word.getNext()) {    Item ssword=sylstructure.appendItem(word);    Item sylItem=null;    Item segItem=null;    Item sssyl=null;    String[] phones=null;    String pos="0";    FeatureSet wordFeatures=word.getFeatures();    if (wordFeatures != null && wordFeatures.isPresent("pos")) {      pos=wordFeatures.getString("pos");      pos=pos.toLowerCase();      if (pos.charAt(0) == 'd')       pos="d";    }    Item token=word.getItemAs("Token");    FeatureSet featureSet=null;    if (token != null) {      Item parent=token.getParent();      featureSet=parent.getFeatures();    }    String wordString=word.toString();    if (featureSet != null && featureSet.isPresent("phones")) {      phones=(String[])featureSet.getObject("phones");    } else {      boolean useLTSRules=MaryProperties.getBoolean("english.lexicon.useLTSrules",true);      if (useLTSRules) {        phones=lex.getPhones(wordString,pos,true);      } else {        phones=lex.getPhones(wordString,pos,false);      }    }    if (phones == null) {      phones=lex.getPhones(wordString,pos,true);      StringBuffer ltsPhoneString=new StringBuffer();      for (int i=0; i < phones.length; i++) {        ltsPhoneString.append(phones[i] + " ");      }      lex.addAddendum(wordString,null,phones);      if (addenda == null)       addenda=new HashMap();      addenda.put(wordString,ltsPhoneString);    }    for (int j=0; j < phones.length; j++) {      if (sylItem == null) {        sylItem=syl.appendItem();        sssyl=ssword.addDaughter(sylItem);        stress=NO_STRESS;        syllableList=new ArrayList();      }      segItem=seg.appendItem();      if (isStressed(phones[j])) {        stress=STRESS;        phones[j]=deStress(phones[j]);      }      segItem.getFeatures().setString("name",phones[j]);      sssyl.addDaughter(segItem);      syllableList.add(phones[j]);      if (lex.isSyllableBoundary(syllableList,phones,j + 1)) {        sylItem=null;        sssyl.getFeatures().setString("stress",stress);      }    }  }  assert utterance.getRelation(Relation.WORD) != null;  assert utterance.getRelation(Relation.SYLLABLE) != null;  assert utterance.getRelation(Relation.SYLLABLE_STRUCTURE) != null;  assert utterance.getRelation(Relation.SEGMENT) != null;}  }
class C{  @VisibleForTesting static String row(int row,Table table,String missing){  StringBuilder builder=new StringBuilder().append("<tr>");  for (  Column col : table.columns()) {    builder.append("<td>").append(String.valueOf(col.getString(row))).append("</td>");  }  builder.append("</tr>").append('\n');  return builder.toString();}  }
class C{  public void eatKeyword(String keyword){  if (!matchKeyword(keyword))   throw new BadSyntaxException();  nextToken();}  }
class C{  public boolean containsValue(long val){  Object[] keys=_set;  long[] vals=_values;  for (int i=vals.length; i-- > 0; ) {    if (keys[i] != FREE && keys[i] != REMOVED && val == vals[i]) {      return true;    }  }  return false;}  }
class C{  protected boolean hasHelpset(String loc){  boolean ret=false;  LocHelpsetFilter filter=new LocHelpsetFilter(loc);  File files[];  files=basedir.listFiles(filter);  if (files != null && files.length > 0) {    ret=true;  }  return (ret);}  }
class C{  public BlankIcon(){  this(null,DEFAULT_SIZE);}  }
class C{  public static <T extends Bean>List<T> load(String table,String[] cols,String where,Object[] args,String orderby,int offset,int limit,Class<T> clazz){  TimeStamp t=TimeStamp.create();  StringBuilder sql=new StringBuilder();  sql.append("select ");  if (cols != null) {    for (int i=0; i < cols.length - 1; i++) {      sql.append(cols[i]).append(", ");    }    sql.append(cols[cols.length - 1]);  } else {    sql.append("*");  }  sql.append(" from ").append(table);  if (where != null) {    sql.append(" where ").append(where);  }  if (orderby != null) {    sql.append(" ").append(orderby);  }  if (limit > 0) {    sql.append(" limit ").append(limit);  }  if (offset > 0) {    sql.append(" offset ").append(offset);  }  Connection c=null;  PreparedStatement p=null;  ResultSet r=null;  try {    c=getConnection();    if (c == null)     return null;    p=c.prepareStatement(sql.toString());    int order=1;    if (args != null) {      for (int i=0; i < args.length; i++) {        Object o=args[i];        setParameter(p,order++,o);      }    }    r=p.executeQuery();    List<T> list=new ArrayList<T>();    while (r.next()) {      T b=clazz.newInstance();      b.load(r);      list.add(b);    }    return list;  } catch (  Exception e) {    if (log.isErrorEnabled())     log.error(sql.toString() + toString(args),e);  } finally {    close(r,p,c);    if (t.past() > 2 && sqllog.isDebugEnabled()) {      sqllog.debug("cost:" + t.past() + "ms, sql=["+ sql+ "]");    }  }  return null;}  }
class C{  public Builder iconAnchor(Point iconAnchor){  this.iconAnchor=iconAnchor;  return this;}  }
class C{  public void messageReceived(final T message){  formattingManager.formatMessage(message,getFormatter());  final boolean allTopicsShown=!browsingFiltersEnabled();  final boolean topicAlreadyExists=allTopics.contains(message.getTopic());  allTopics.add(message.getTopic());  final T removed=storeMessage(message);  if (!filteredStore.filterMessage(message,true) && (allTopicsShown || filteredStore.getBrowsedTopics().contains(message.getTopic()))) {    filteredStore.getFilteredMessages().add(message);    uiEventQueue.add(this,new BrowseReceivedMessageEvent<T>(filteredStore.getFilteredMessages(),message));  }  if (allTopicsShown && !topicAlreadyExists) {    filteredStore.applyTopicFilter(message.getTopic(),false);  }  if (removed != null) {    uiEventQueue.add(this,new TopicSummaryRemovedMessageEvent<T>(super.getMessageList(),removed));  }  uiEventQueue.add(this,new TopicSummaryNewMessageEvent<T>(super.getMessageList(),message,allTopicsShown && !topicAlreadyExists));}  }
class C{  private LinearConstraint normalize(final LinearConstraint constraint){  if (constraint.getValue() < 0) {    return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1 * constraint.getValue());  }  return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());}  }
class C{  @Override public void ignorableWhitespace(XMLString text,Augmentations augs) throws XNIException {  handleIgnorableWhitespace(text);  if (fDocumentHandler != null) {    fDocumentHandler.ignorableWhitespace(text,augs);  }}  }
class C{  public FieldConfigBoolean(FieldConfigCommonData commonData){  super(commonData);}  }
class C{  public FieldConfigCommonData(Class<?> panelId,FieldIdEnum id,String label,boolean valueOnly){  super();  this.panelId=panelId;  this.id=id;  this.label=label;  this.valueOnly=valueOnly;}  }
class C{  public boolean increment(K key){  return adjustValue(key,(long)1);}  }
class C{  private boolean isLargeEnough(){  int x0=leftMargin;  int x1=getWidth() - rightMargin;  int y0=getHeight() - bottomMargin;  int y1=topMargin;  return x0 < x1 && y0 > y1;}  }
class C{  public Bundler putCharArray(String key,char[] value){  bundle.putCharArray(key,value);  return this;}  }
class C{  public SkillCursor querySkillFromTree(long id){  QueryHelper qh=new QueryHelper();  qh.Distinct=false;  qh.Table=S.TABLE_SKILLS;  qh.Columns=null;  qh.Selection=S.COLUMN_SKILLS_SKILL_TREE_ID + " = ?";  qh.SelectionArgs=new String[]{String.valueOf(id)};  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy=null;  qh.Limit=null;  return new SkillCursor(wrapHelper(qh));}  }
class C{  private void initArray(){  this.permissionsGranted=new ArrayList<>();  this.permissionsDenied=new ArrayList<>();  this.permissionsDeniedForever=new ArrayList<>();  this.permissionToAsk=new ArrayList<>();}  }
class C{  @Override public void write(byte[] b,int off,int len) throws IOException {  while (len > 0) {    int c=Math.min(len,decoderIn.remaining());    decoderIn.put(b,off,c);    processInput(false);    len-=c;    off+=c;  }  if (writeImmediately) {    flushOutput();  }}  }
class C{  public void testRightProject() throws IOException {  ProjectManagerEx projectManager=ProjectManagerEx.getInstanceEx();  Project otherProject=projectManager.newProject(getProject().getName(),FileUtilRt.generateRandomTemporaryPath().getPath(),true,true);  try {    assertNotNull(otherProject);    projectManager.openProject(otherProject);    ThemeEditorVirtualFile themeEditorVirtualFile=ThemeEditorVirtualFile.getThemeEditorFile(myModule.getProject());    VirtualFile virtualFile=themeEditorVirtualFile.getFileSystem().findFileByPath(themeEditorVirtualFile.getPath());    assertEquals(themeEditorVirtualFile,virtualFile);  }  finally {    if (otherProject != null) {      ((ProjectManagerImpl)projectManager).closeProject(otherProject,false,true,false);    }  }}  }
class C{  public void attachTo(ImmersiveEffect effect) throws RuntimeException {  if (mEffect != null) {    throw new RuntimeException("Previous effect is still attached, call detach() first");  }  mEffect=effect;  mEffect.addParameter(mParameter);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DICE_ROLLED(String value0,int num1){  return new SM_SYSTEM_MESSAGE(1300781,value0,num1);}  }
class C{  public int addAllAbsent(Collection c){  int numNew=c.size();  if (numNew == 0)   return 0;synchronized (this) {    Object[] elements=getArray();    int len=elements.length;    Object[] temp=new Object[numNew];    int added=0;    for (Iterator itr=c.iterator(); itr.hasNext(); ) {      Object e=itr.next();      if (indexOf(e,elements,0,len) < 0 && indexOf(e,temp,0,added) < 0)       temp[added++]=e;    }    if (added != 0) {      Object[] newElements=new Object[len + added];      System.arraycopy(elements,0,newElements,0,len);      System.arraycopy(temp,0,newElements,len,added);      setArray(newElements);    }    return added;  }}  }
class C{  private static double[] mat2quat(final double[][] ort){  final double[] quat=new double[4];  double s=ort[0][0] + ort[1][1] + ort[2][2];  if (s > -0.19) {    quat[0]=0.5 * FastMath.sqrt(s + 1.0);    double inv=0.25 / quat[0];    quat[1]=inv * (ort[1][2] - ort[2][1]);    quat[2]=inv * (ort[2][0] - ort[0][2]);    quat[3]=inv * (ort[0][1] - ort[1][0]);  } else {    s=ort[0][0] - ort[1][1] - ort[2][2];    if (s > -0.19) {      quat[1]=0.5 * FastMath.sqrt(s + 1.0);      double inv=0.25 / quat[1];      quat[0]=inv * (ort[1][2] - ort[2][1]);      quat[2]=inv * (ort[0][1] + ort[1][0]);      quat[3]=inv * (ort[0][2] + ort[2][0]);    } else {      s=ort[1][1] - ort[0][0] - ort[2][2];      if (s > -0.19) {        quat[2]=0.5 * FastMath.sqrt(s + 1.0);        double inv=0.25 / quat[2];        quat[0]=inv * (ort[2][0] - ort[0][2]);        quat[1]=inv * (ort[0][1] + ort[1][0]);        quat[3]=inv * (ort[2][1] + ort[1][2]);      } else {        s=ort[2][2] - ort[0][0] - ort[1][1];        quat[3]=0.5 * FastMath.sqrt(s + 1.0);        double inv=0.25 / quat[3];        quat[0]=inv * (ort[0][1] - ort[1][0]);        quat[1]=inv * (ort[0][2] + ort[2][0]);        quat[2]=inv * (ort[2][1] + ort[1][2]);      }    }  }  return quat;}  }
class C{  protected boolean skipComponent(Component c){  if (c instanceof JComponent) {    JComponent jComponent=(JComponent)c;    if (jComponent.getClientProperty(SCALE_FACTOR_KEY) != null)     return true;  }  if (c instanceof ComponentWithBrowseButton) {    if (c.isPreferredSizeSet()) {      return true;    }  }  return false;}  }
class C{  public CodeAttribute(String name){  this.name=name;}  }
class C{  public int addOrderTerm(String termTypeId,BigDecimal termValue,Long termDays,String textValue){  GenericValue orderTerm=this.getDelegator().makeValue("OrderTerm");  orderTerm.put("termTypeId",termTypeId);  orderTerm.put("termValue",termValue);  orderTerm.put("termDays",termDays);  orderTerm.put("textValue",textValue);  return addOrderTerm(orderTerm);}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.getCamera().stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public static void mergePropertiesIntoMap(Properties props,Map<String,String> map){  if (map == null) {    throw new IllegalArgumentException("Map must not be null");  }  if (props != null) {    for (Enumeration<?> en=props.propertyNames(); en.hasMoreElements(); ) {      String key=(String)en.nextElement();      map.put(key,props.getProperty(key));    }  }}  }
class C{  public static IQueryProcessor newLocalInstance(IJSpace clusterProxy,IJSpace spaceProxy,Properties connectionProperties,SecurityInterceptor securityInterceptor) throws Exception {  Properties embeddedProperties=loadEmbeddedPropertiesFile();  Properties mergedProps=mergeProperties(connectionProperties,embeddedProperties);  return new QueryProcessor(clusterProxy,spaceProxy,mergedProps,securityInterceptor);}  }
class C{  private void failPendingBatchMessages(PulsarClientException ex){  if (batchMessageContainer.isEmpty()) {    return;  }  int numMessagesInBatch=batchMessageContainer.numMessagesInBatch;  semaphore.release(numMessagesInBatch);  try {    batchMessageContainer.firstCallback.sendComplete(ex);  } catch (  Throwable t) {    log.warn("[{}] [{}] Got exception while completing the callback for msg {}:",topic,producerName,batchMessageContainer.sequenceId,t);  }  ReferenceCountUtil.safeRelease(batchMessageContainer.getBatchedSingleMessageMetadataAndPayload());  batchMessageContainer.clear();}  }
class C{  public void closeAll(){  if (this.servers == null) {    return;  }  for (int i=0; i < this.servers.length; i++) {    this.forceClose(this.servers[i]);  }}  }
class C{  public void delayMethod(int deltaTime){  Robot robot;  try {    robot=new Robot();    robot.delay(deltaTime);  } catch (  AWTException e) {    e.printStackTrace();  }}  }
class C{  public static synchronized boolean isAntiAliasingEnabled(){  return antiAliasingEnabled;}  }
class C{  @Override public List<Class<? extends ConfigAspect>> mergeDependencies(){  return ImmutableList.<Class<? extends ConfigAspect>>of(VersionConfigAspect.class,HttpConfigAspect.class,DocumentationConfigAspect.class);}  }
class C{  protected final void advance(int amount){  cursor+=amount;}  }
class C{  private static void install(CompletableFuture<NewFile> fileCreation,Path destDir,FileChannel tmpFile,DateTime begin){  try {    try {synchronized (OUTSTANDING) {        OUTSTANDING.remove(fileCreation);      }      if (fileCreation.isCancelled())       throw new IOException("Installation aborted, due to cancellation.");      final FileUtil.NamedFileChannel newFile=FileUtil.createNewFile(destDir,prefixForTimestamp(begin),".optimized");      try (Releaseable<FileChannel> out=new Releaseable<>(newFile.getFileChannel())){        final long fileSize=tmpFile.size();        LOG.log(Level.INFO,"installing {0} ({1} MB)",new Object[]{newFile.getFileName(),fileSize / 1024.0 / 1024.0});        long offset=0;        while (offset < fileSize)         offset+=tmpFile.transferTo(offset,fileSize - offset,out.get());        out.get().force(true);        fileCreation.complete(new NewFile(newFile.getFileName(),new ReadonlyTableFile(new GCCloseable<>(out.release()))));      } catch (      Error|RuntimeException|IOException|OncRpcException ex) {        try {          Files.delete(newFile.getFileName());        } catch (        Error|RuntimeException|IOException ex1) {          ex.addSuppressed(ex1);        }        throw ex;      }    }  finally {      tmpFile.close();    }  } catch (  Error|RuntimeException|IOException|OncRpcException ex) {    LOG.log(Level.WARNING,"unable to install new file",ex);    fileCreation.completeExceptionally(ex);  }}  }
class C{  @Override public WXDomObject clone(){  if (sDestroy.get()) {    return null;  }  WXDomObject dom=null;  try {    dom=new WXDomObject();    if (this.cssstyle != null) {      dom.cssstyle.copy(this.cssstyle);    }    dom.setModifyHeight(isModifyHeight);    dom.setModifyWidth(isModifyWidth);    dom.ref=ref;    dom.type=type;    dom.style=style;    dom.attr=attr;    dom.event=event == null ? null : event.clone();    if (this.csslayout != null) {      dom.csslayout.copy(this.csslayout);    }  } catch (  Exception e) {    if (WXEnvironment.isApkDebugable()) {      WXLogUtils.e("WXDomObject clone error: ",e);    }  }  return dom;}  }
class C{  public String toString(){  try {    Iterator keys=keys();    StringBuilder sb=new StringBuilder("{");    while (keys.hasNext()) {      if (sb.length() > 1) {        sb.append(',');      }      Object o=keys.next();      sb.append(quote(o.toString()));      sb.append(':');      sb.append(valueToString(this.map.get(o)));    }    sb.append('}');    return sb.toString();  } catch (  Exception e) {    return null;  }}  }
class C{  private void initLabels(){  CompareConfiguration cc=getCompareConfiguration();  String resourceName=resource.getName();  setTitle(Policy.bind("SVNCompareRevisionsInput.compareResourceAndVersions",new Object[]{resourceName}));  cc.setLeftEditable(!readOnly);  cc.setRightEditable(false);  String leftLabel=Policy.bind("SVNCompareRevisionsInput.workspace",new Object[]{resourceName});  cc.setLeftLabel(leftLabel);  String remoteResourceName=null;  if (remoteResource != null) {    remoteResourceName=remoteResource.getName();  } else {    remoteResourceName=resourceName;  }  String rightLabel=Policy.bind("SVNCompareRevisionsInput.repository",new Object[]{remoteResourceName});  cc.setRightLabel(rightLabel);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CloseAerial_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200954,skilltarget,skillcaster,skillname);}  }
class C{  private int computeMinNumberOfNonConflictedTrianglesRequired(int totalTriangles){  double sum=0;  for (int k=totalTriangles; k >= 0; k--) {    sum+=binomial(totalTriangles,k) * Math.pow(1.0 / 3.0,k) * Math.pow(2.0 / 3.0,totalTriangles - k);    if (sum > 0.05)     return k + 1;  }  return 0;}  }
class C{  public static String encodeLines(byte[] in,int iOff,int iLen,int lineLen,String lineSeparator){  int blockLen=(lineLen * 3) / 4;  if (blockLen <= 0)   throw new IllegalArgumentException();  int lines=(iLen + blockLen - 1) / blockLen;  int bufLen=((iLen + 2) / 3) * 4 + lines * lineSeparator.length();  StringBuilder buf=new StringBuilder(bufLen);  int ip=0;  while (ip < iLen) {    int l=Math.min(iLen - ip,blockLen);    buf.append(encode(in,iOff + ip,l));    buf.append(lineSeparator);    ip+=l;  }  return buf.toString();}  }
class C{  private void initHideFileListingListener(View shareView){  mOnHideFileListingPermissionInteractionListener=new OnHideFileListingPermissionInteractionListener();  ((SwitchCompat)shareView.findViewById(R.id.shareViaLinkFileListingPermissionSwitch)).setOnCheckedChangeListener(mOnHideFileListingPermissionInteractionListener);}  }
class C{  private void update(){  long time=System.nanoTime();  long diff=time - this.last;  this.last=time;  int steps=0;synchronized (this.btnStep) {    steps=this.steps;    this.steps=0;  }  if (!this.isPaused()) {    double elapsedTime=diff / NANO_TO_BASE;    boolean stepped=this.simulation.getWorld().update(elapsedTime);    if (this.simulation instanceof CompiledSimulation) {      CompiledSimulation cs=(CompiledSimulation)this.simulation;      cs.update(elapsedTime,stepped);    }  } else   if (steps > 0) {    this.simulation.getWorld().step(steps);    if (this.simulation instanceof CompiledSimulation) {      CompiledSimulation cs=(CompiledSimulation)this.simulation;      cs.update(steps * this.simulation.getWorld().getStep().getDeltaTime(),true);    }  }  if (this.simulation instanceof CompiledSimulation) {    CompiledSimulation cs=(CompiledSimulation)this.simulation;    if (cs.isChanged()) {      this.pnlSimulation.setSimulation(cs);      if (this.selectBodyAction.isActive()) {        Body b=this.selectBodyAction.getObject();        boolean exists=false;        int bSize=cs.getWorld().getBodyCount();        for (int i=0; i < bSize; i++) {          Body q=cs.getWorld().getBody(i);          if (b == q) {            exists=true;            break;          }        }        if (!exists) {          this.selectBodyAction.end();          this.selectedBodyJoint=null;        }      }    }  }  this.updateFps(diff);}  }
class C{  public void notifyHorizontalEdgeReached(int startX,int finalX,int overX){  mScrollerX.notifyEdgeReached(startX,finalX,overX);}  }
class C{  public CaughtExceptionRef newCaughtExceptionRef(){  return new JCaughtExceptionRef();}  }
class C{  public UnrevealBuilder to(final View toView){  this.mToView=toView;  return this;}  }
class C{  ConstrainableRegistrarProxy(Object server,ServiceID registrarID,MethodConstraints constraints){  super((Registrar)((RemoteMethodControl)server).setConstraints(ConstrainableProxyUtil.translateConstraints(constraints,methodMappings)),registrarID);  this.constraints=constraints;}  }
class C{  public SourceEditor toggleMarkdown(){  return setMarkdown(!markdown);}  }
class C{  public static boolean isSameDomainName(URL url1,URL url2){  return getDomainName(url1).equalsIgnoreCase(getDomainName(url2));}  }
class C{  protected BoardGetTopicsQueryWithExtended extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options) throws java.io.IOException {  if (source == null) {    throw new NullPointerException("Cannot decode null source array.");  }  if (off < 0 || off + len > source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and process %d bytes.",source.length,off,len));  }  if (len == 0) {    return new byte[0];  } else   if (len < 4) {    throw new IllegalArgumentException("Base64-encoded string must have at least four characters, but length specified was " + len);  }  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiCrop=(byte)(source[i] & 0x7f);    sbiDecode=DECODABET[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=sbiCrop;        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (sbiCrop == EQUALS_SIGN) {            break;          }        }      }    } else {      throw new java.io.IOException(String.format("Bad Base64 input character '%c' in array position %d",source[i],i));    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public Action(String type,Object[] values){  this.type=type;  this.values=values;}  }
class C{  private static boolean validClass(Class<?> clazz,Class<?> classToIgnore){  return ((clazz.getName().compareTo(classToIgnore.getName()) != 0) && (clazz.getSimpleName().compareTo(PACKAGE_INFO) != 0));}  }
class C{  public List<String> generateAltQueries(String query){  List<String> altQueries=new ArrayList<>();  query=query.trim().replaceAll(" +"," ");  String altquery=query.replaceAll("[^A-Za-z0-9 ]"," ").trim().replaceAll(" +"," ");  if (!altquery.equals(query) && !Values.EMPTYSTRING.equals(altquery)) {    altQueries.add(altquery);  }  altquery=this.splitKeywords(query).trim();  if (!altquery.equals("") && !altquery.equals(query) && !altQueries.contains(altquery)) {    altQueries.add(altquery);  }  ISpellingCorrector sc=Singleton.getSpellingCorrector();  altquery=Values.EMPTYSTRING;  for (  String word : query.replaceAll(" +"," ").split(" ")) {    if (!word.trim().equals("AND") && !word.trim().equals("OR") && !word.trim().equals("NOT")) {      altquery+=" " + sc.correct(word);    }  }  altquery=altquery.trim();  if (!altquery.toLowerCase().equals(query.toLowerCase()) && !altQueries.contains(altquery)) {    altQueries.add(altquery);  }  altquery=query.replace(" AND "," OR ");  if (!altquery.toLowerCase().equals(query.toLowerCase()) && !altQueries.contains(altquery)) {    altQueries.add(altquery);  }  altquery=query.replace(" AND "," ");  if (!altquery.toLowerCase().equals(query.toLowerCase()) && !altQueries.contains(altquery)) {    altQueries.add(altquery);  }  altquery=query.replace(" NOT "," ");  if (!altquery.toLowerCase().equals(query.toLowerCase()) && !altQueries.contains(altquery)) {    altQueries.add(altquery);  }  return altQueries;}  }
class C{  public EntityQuery where(Object... fields){  this.whereEntityCondition=EntityCondition.makeCondition(UtilMisc.toMap(fields));  return this;}  }
class C{  @Override public void render(SpriteBatch sb){  for (  UIElement element : elements)   element.render(sb);}  }
class C{  public RecordId insertIntoDeletedSlot(){  RecordId nds=getNextDeletedSlotId();  setNextDeletedSlotId(new RecordId(new BlockId("",0),0));  Constant flag=INUSE_CONST;  setVal(currentPos(),flag);  return nds;}  }
class C{  public void start(boolean daemon){  start(daemon,Thread.NORM_PRIORITY);}  }
class C{  public boolean isSetDebug(){  return __isset_bit_vector.get(__DEBUG_ISSET_ID);}  }
class C{  public void allowAll(PermissionFlag flag){  generalPermissions.remove(flag);  strictPermission.getOrDefault(flag,emptyMap()).values().removeIf(null);}  }
class C{  public Phraser(CART cart){  this.cart=cart;}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public static Histogram subtract(Histogram x,Histogram y){  return new Histogram(Stream.concat(x.stream(),y.stream().map(null)));}  }
class C{  public TriangularDistribution(double a,double c,double b) throws MathIllegalArgumentException {  super();  if (a >= b) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,a,b,false);  }  if (c < a) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL,c,a,true);  }  if (c > b) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_LARGE,c,b,true);  }  this.a=a;  this.c=c;  this.b=b;}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set pc1=1 pc2=2 pc3=3;");}  }
class C{  public RenderSymbol(){}  }
class C{  public void destroy(){  tokenizer=null;}  }
class C{  public static ViewNode parseFlatString(@NotNull byte[] bytes){  String line;  ViewNode root=null;  ViewNode lastNode=null;  int lastWhitespaceCount=Integer.MIN_VALUE;  Stack<ViewNode> stack=new Stack<ViewNode>();  final BufferedReader in=new BufferedReader(new InputStreamReader(new ByteArrayInputStream(bytes),Charsets.UTF_8));  try {    while ((line=in.readLine()) != null) {      if ("DONE.".equalsIgnoreCase(line)) {        break;      }      int whitespaceCount=0;      while (line.charAt(whitespaceCount) == ' ') {        whitespaceCount++;      }      if (lastWhitespaceCount < whitespaceCount) {        stack.push(lastNode);      } else       if (!stack.isEmpty()) {        int count=lastWhitespaceCount - whitespaceCount;        for (int i=0; i < count; i++) {          stack.pop();        }      }      lastWhitespaceCount=whitespaceCount;      ViewNode parent=null;      if (!stack.isEmpty()) {        parent=stack.peek();      }      lastNode=new ViewNode(parent,line.trim());      if (root == null) {        root=lastNode;      }    }  } catch (  IOException e) {    return null;  }  if (root != null) {    root.updateNodeDrawn(true);  }  return root;}  }
class C{  private void populateList(){  children=new ArrayList<ArrayList<Armor>>();  armors=DataManager.get(getActivity()).queryArmorArrayType(mType);  ArrayList<Armor> g1=new ArrayList<Armor>();  ArrayList<Armor> g2=new ArrayList<Armor>();  ArrayList<Armor> g3=new ArrayList<Armor>();  ArrayList<Armor> g4=new ArrayList<Armor>();  ArrayList<Armor> g5=new ArrayList<Armor>();  for (int i=0; i < armors.size(); i++) {    if (filter == null || filter.armorPassesFilter(armors.get(i))) {switch (armors.get(i).getSlot()) {case "Head":        g1.add(armors.get(i));      break;case "Body":    g2.add(armors.get(i));  break;case "Arms":g3.add(armors.get(i));break;case "Waist":g4.add(armors.get(i));break;case "Legs":g5.add(armors.get(i));break;default :break;}}}children.add(g1);children.add(g2);children.add(g3);children.add(g4);children.add(g5);if (adapter != null) {adapter.notifyDataSetChanged();}}  }
class C{  public void resetViewPortOffsets(){  mCustomViewPortEnabled=false;  calculateOffsets();}  }
class C{  private void internal_updateSymbolDoubleField(Map<String,String> options,FieldIdEnum field,String key){  double value=fieldConfigVisitor.getDouble(field);  Double defaultValue=(Double)getDefaultFieldValue(field);  if (defaultValue == null) {    ConsoleManager.getInstance().error(this,"Failed to find default for field : " + field);  } else   if (value != defaultValue) {    options.put(key,String.valueOf(value));  }}  }
class C{  private void updateSegmentButtons(){  boolean enabled=false;  if (wktGeometry != null) {    WKTType geometryType=wktGeometry.getGeometryType();    if (geometryType != null) {      if (geometryType.canHaveMultipleShapes()) {        enabled=!multiListModel.isEmpty();      } else {        enabled=true;      }    }  }  addSegmentButton.setEnabled(enabled);  removeSegmentButton.setEnabled(!segmentList.isSelectionEmpty());}  }
class C{  public GroupsGetMembersQueryWithFields sort(GroupsGetMembersSort value){  return unsafeParam("sort",value);}  }
class C{  private List<CarbonDictionaryColumnMetaChunk> readDictionaryMetadataFile() throws IOException {  CarbonDictionaryMetadataReaderImpl columnMetadataReaderImpl=new CarbonDictionaryMetadataReaderImpl(this.carbonStorePath,this.carbonTableIdentifier,this.columnIdentifier);  List<CarbonDictionaryColumnMetaChunk> dictionaryMetaChunkList=null;  try {    dictionaryMetaChunkList=columnMetadataReaderImpl.read();  }  finally {    columnMetadataReaderImpl.close();  }  return dictionaryMetaChunkList;}  }
class C{  public void drawChart(Graphics2D gc){  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));  int y0=getHeight() - bottomMargin;  int y1=topMargin;  double topY;switch (scalingType) {case PERCENT:    topY=101;  break;case LOG:topY=computeMaxYAxisValueLogScale(getMaxValue());break;case SQRT:topY=Math.sqrt(getMaxValue());break;default :topY=1.1 * getMaxValue();}double yFactor=(y0 - y1) / topY;int x0=leftMargin;int x1=getWidth() - rightMargin;if (x0 >= x1) return;int numberOfSeries=getChartData().getNumberOfSeries();double xStep=(x1 - x0) / (2 * numberOfSeries);double bigSpace=Math.max(2,Math.min(10,xStep));xStep=(x1 - x0 - bigSpace * numberOfSeries) / numberOfSeries;Point[] previousPoint=new Point[getChartData().getNumberOfClasses()];java.util.List<Triplet<String,String,int[]>> list=new LinkedList<>();int d=0;for (String series : getChartData().getSeriesNames()) {if (showXAxis) {double xLabel=x0 + bigSpace + d * bigSpace + (d + 0.5) * xStep;Point2D apt=new Point2D.Double(xLabel,getHeight() - bottomMargin + 10);String label=seriesLabelGetter.getLabel(series);Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();if (classLabelAngle == 0) {apt.setLocation(apt.getX() - labelSize.getWidth() / 2,apt.getY());} else if (classLabelAngle > Math.PI / 2) {apt=Geometry.translateByAngle(apt,classLabelAngle,-labelSize.width);}if (getChartData().getChartSelection().isSelected(series,null)) {gc.setColor(ProgramProperties.SELECTION_COLOR);fillAndDrawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);}gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.BLACK));if (sgc != null) sgc.setCurrentItem(new String[]{series,null});drawString(gc,label,apt.getX(),apt.getY(),classLabelAngle);if (sgc != null) sgc.clearCurrentItem();}double currentHeight=y0;double currentValueForLog=0;int c=0;for (String className : getChartData().getClassNames()) {double value;if (scalingType == ChartViewer.ScalingType.PERCENT) {double total=getChartData().getTotalForSeriesIncludingDisabledAttributes(series);if (total == 0) value=0; else value=100 * getChartData().getValueAsDouble(series,className) / total;} else if (scalingType == ChartViewer.ScalingType.LOG) {value=getChartData().getValueAsDouble(series,className);if (value >= 1) {value=Math.log10(value + currentValueForLog);if (currentValueForLog >= 1) value-=Math.log10(currentValueForLog);}currentValueForLog+=getChartData().getValueAsDouble(series,className);} else if (scalingType == ChartViewer.ScalingType.SQRT) {value=getChartData().getValueAsDouble(series,className);if (value >= 1) {value=Math.sqrt(value + currentValueForLog);if (currentValueForLog >= 1) value-=Math.sqrt(currentValueForLog);}currentValueForLog+=getChartData().getValueAsDouble(series,className);} else value=getChartData().getValueAsDouble(series,className);double xBar=x0 + bigSpace + d * bigSpace + d * xStep;double height=value * yFactor;Point aPt=new Point((int)Math.round(xBar + xStep / 2.0),(int)Math.round(currentHeight - height));currentHeight-=height;Point bPt=previousPoint[c];if (bPt == null && numberOfSeries == 1) bPt=new Point(aPt.x - 2,aPt.y);if (bPt != null) {Triplet<String,String,int[]> triplet=new Triplet<>(series,className,new int[]{bPt.x,bPt.y,aPt.x,aPt.y});list.add(triplet);}previousPoint[c]=aPt;c++;}d++;}list=Basic.reverseList(list);for (Triplet<String,String,int[]> pair : list) {String series=pair.get1();String className=pair.get2();int[] coords=pair.get3();Color color=getChartColors().getClassColor(class2HigherClassMapper.get(className));gc.setColor(color);int[] xs=new int[]{coords[0],coords[2],coords[2],coords[0]};int[] ys=new int[]{coords[1],coords[3],y0,y0};gc.fillPolygon(xs,ys,4);gc.setColor(color.darker());if (sgc != null) sgc.setCurrentItem(new String[]{series,className});gc.drawLine(coords[0],coords[1],coords[2],coords[3]);if (sgc != null) sgc.clearCurrentItem();}Triplet<String,String,int[]> current=null;for (Triplet<String,String,int[]> next : list) {if (current != null) {String className=current.get2();String series=current.get1();int[] coords=current.get3();if (getChartData().getChartSelection().isSelected(null,className)) {gc.setStroke(HEAVY_STROKE);gc.setColor(ProgramProperties.SELECTION_COLOR);gc.drawLine(coords[0],coords[1],coords[2],coords[3]);coords=next.get3();gc.drawLine(coords[0],coords[1],coords[2],coords[3]);gc.setStroke(NORMAL_STROKE);} else if (getChartData().getChartSelection().isSelected(series,null)) {gc.setStroke(HEAVY_STROKE);gc.setColor(ProgramProperties.SELECTION_COLOR);gc.drawOval(coords[2] - 1,coords[3] - 1,2,2);gc.setStroke(NORMAL_STROKE);}}current=next;}if (current != null) {String className=current.get2();String series=current.get1();int[] coords=current.get3();if (getChartData().getChartSelection().isSelected(null,className)) {gc.setStroke(HEAVY_STROKE);gc.setColor(ProgramProperties.SELECTION_COLOR);gc.drawLine(coords[0],coords[1],coords[2],coords[3]);gc.setStroke(NORMAL_STROKE);} else if (getChartData().getChartSelection().isSelected(series,null)) {gc.setStroke(HEAVY_STROKE);gc.setColor(ProgramProperties.SELECTION_COLOR);gc.drawOval(coords[2] - 1,coords[3] - 1,2,2);gc.setStroke(NORMAL_STROKE);}}}  }
class C{  public static final double combinationsOfNByK(int n,int k){  return gr.demokritos.iit.jinsect.utils.factorial(n,k);}  }
class C{  public VideoHideCatalogSectionQuery(VkApiClient client,UserActor actor,int sectionId){  super(client,"video.hideCatalogSection",OkResponse.class);  accessToken(actor.getAccessToken());  sectionId(sectionId);}  }
class C{  @Override public boolean onUnbind(Intent intent){  mOperationsBinder.clearListeners();  return false;}  }
class C{  public boolean isInterfaceSuperinterfaceOf(SootClass parent,SootClass possibleChild){  parent.checkLevel(SootClass.HIERARCHY);  possibleChild.checkLevel(SootClass.HIERARCHY);  return getSuperinterfacesOf(possibleChild).contains(parent);}  }
class C{  private Collection<Var> migrateColumnValueAsResource(Var instance,String columnName,Object columnValue,String tableName){  if (columnValue == null) {    return Collections.emptyList();  }  return Collections.singleton(var().id(id(instance)).has(namer.resourceName(tableName,columnName),columnValue));}  }
class C{  public boolean onActivityResult(int requestCode,int resultCode,Intent intent){  CordovaPlugin callback=activityResultCallback;  if (callback == null && initCallbackService != null) {    savedResult=new ActivityResultHolder(requestCode,resultCode,intent);    if (pluginManager != null) {      callback=pluginManager.getPlugin(initCallbackService);      if (callback != null) {        callback.onRestoreStateForActivityResult(savedPluginState.getBundle(callback.getServiceName()),new ResumeCallback(callback.getServiceName(),pluginManager));      }    }  }  activityResultCallback=null;  if (callback != null) {    Log.d(TAG,"Sending activity result to plugin");    initCallbackService=null;    savedResult=null;    callback.onActivityResult(requestCode,resultCode,intent);    return true;  }  Log.w(TAG,"Got an activity result, but no plugin was registered to receive it" + (savedResult != null ? " yet!" : "."));  return false;}  }
class C{  public boolean isCompatibleWith(@NotNull ResourceTypeAllowedValues other){  for (  ResourceType type : other.types) {    if (isTypeAllowed(type)) {      return true;    }  }  return false;}  }
class C{  public VendorOptionRasterFactory(Class<?> panelId,FunctionNameInterface functionManager,RasterSymbolizerDetails parentPanel){  vendorOptionGeoServerContrastEnhancementNormalizeRed=new VOGeoServerContrastEnhancementNormalizeRed(panelId,parentPanel);  vendorOptionGeoServerContrastEnhancementNormalizeGreen=new VOGeoServerContrastEnhancementNormalizeGreen(panelId,parentPanel);  vendorOptionGeoServerContrastEnhancementNormalizeBlue=new VOGeoServerContrastEnhancementNormalizeBlue(panelId,parentPanel);  vendorOptionGeoServerContrastEnhancementNormalizeGrey=new VOGeoServerContrastEnhancementNormalizeGrey(panelId,parentPanel);  vendorOptionGeoServerContrastEnhancementNormalizeOverall=new VOGeoServerContrastEnhancementNormalizeOverall(panelId,parentPanel);  vendorOptionList.add(vendorOptionGeoServerContrastEnhancementNormalizeRed);  vendorOptionList.add(vendorOptionGeoServerContrastEnhancementNormalizeGreen);  vendorOptionList.add(vendorOptionGeoServerContrastEnhancementNormalizeBlue);  vendorOptionList.add(vendorOptionGeoServerContrastEnhancementNormalizeGrey);  vendorOptionList.add(vendorOptionGeoServerContrastEnhancementNormalizeOverall);  PrefManager.getInstance().addVendorOptionListener(this);}  }
class C{  protected boolean isParentInSvnIgnore() throws SVNException {  StatusCacheManager cacheMgr=SVNProviderPlugin.getPlugin().getStatusCacheManager();  IResource parent=resource.getParent();  while ((parent != null) && !cacheMgr.hasCachedStatus(parent)) {    parent=parent.getParent();  }  if (parent != null) {    LocalResourceStatus status=cacheMgr.getStatusFromCache(parent);    if ((status != null) && (SVNStatusKind.IGNORED.equals(status.getTextStatus()))) {      return true;    }  }  return false;}  }
class C{  @Override public void endElement(String uri,String localName,String qName) throws SAXException {switch (qName) {case "BlastOutput_program":    preamble.add(qName,getElementText());  break;case "BlastOutput_query-def":preamble.add(qName,getElementText());break;case "BlastOutput_query-len":preamble.add(qName,getElementText());break;case "BlastOutput_db":preamble.add(qName,getElementText());break;case "Parameters_matrix":parameters.add(qName,getElementText());break;case "Parameters_expect":parameters.addDouble(qName,getElementText());break;case "Parameters_gap-open":parameters.addInt(qName,getElementText());break;case "Parameters_gap-extend":parameters.addInt(qName,getElementText());break;case "Parameters_filter":parameters.add(qName,getElementText());break;case "Iteration":numberOfReads++;MatchesText matchesText=new MatchesText();if (iterationHits.size() == 0) {matchesText.setNumberOfMatches(0);matchesText.setText(iteration.queryDef.getBytes());matchesText.setLengthOfText(matchesText.getText().length);} else {int numberOfMatches=0;matches.clear();for (Hit hit : iterationHits) {if (matches.size() < getMaxMatchesPerRead() || hit.hsp.bitScore > matches.last().bitScore) {Match match=new Match();final HSP hsp=hit.hsp;match.bitScore=hsp.bitScore;match.id=numberOfMatches++;int queryStart=(int)(hsp.queryFrame >= 0 ? hsp.queryFrom : hsp.queryTo);int queryEnd=(int)(hsp.queryFrame >= 0 ? hsp.queryTo : hsp.queryFrom);final String hitLabel;if (hit.id == null) hitLabel=hit.def; else if (hit.def == null) hitLabel=hit.id; else hitLabel=(hit.def + " " + hit.id).replaceAll("\\s+"," ");match.samLine=makeSAM(iteration.queryDef,hitLabel,hit.len,hsp.bitScore,(float)hsp.eValue,(int)hsp.score,hsp.identity,hsp.queryFrame,queryStart,queryEnd,(int)hsp.hitFrom,(int)hsp.hitTo,hsp.qSeq,hsp.hSeq);matches.add(match);if (matches.size() > maxMatchesPerRead) matches.remove(matches.last());}}StringBuilder buf=new StringBuilder();for (Match match : matches) {buf.append(match.samLine).append("\n");}matchesText.setText(buf.toString().getBytes());matchesText.setLengthOfText(matchesText.getText().length);matchesText.setNumberOfMatches(matches.size());totalMatches+=iterationHits.size();totalDiscardedMatches+=(iterationHits.size() - matchesText.getNumberOfMatches());}try {blockQueue.put(matchesText);} catch (InterruptedException e) {throw new SAXException("Interrupted");}break;case "Iteration_iter-num":iteration.iterNum=Basic.parseLong(getElementText());break;case "Iteration_query-def":iteration.queryDef=getElementText();break;case "Iteration_query-len":iteration.queryLen=Basic.parseInt(getElementText());break;case "Hit_def":hit.def=getElementText();break;case "Hit_accession":hit.accession=getElementText();break;case "Hit_id":hit.id=getElementText();break;case "Hit_len":hit.len=Basic.parseInt(getElementText());break;case "Hsp":if (hit.hsp == null || hsp.bitScore > hit.hsp.bitScore) hit.hsp=hsp;break;case "Hit":iterationHits.add(hit);break;case "Hsp_bit-score":hsp.bitScore=Basic.parseFloat(getElementText());break;case "Hsp_score":hsp.score=Basic.parseFloat(getElementText());break;case "Hsp_evalue":hsp.eValue=Basic.parseDouble(getElementText());break;case "Hsp_query-from":hsp.queryFrom=Long.parseLong(getElementText());break;case "Hsp_query-to":hsp.queryTo=Basic.parseLong(getElementText());break;case "Hsp_hit-from":hsp.hitFrom=Basic.parseLong(getElementText());break;case "Hsp_hit-to":hsp.hitTo=Basic.parseLong(getElementText());break;case "Hsp_hit-frame":hsp.hitFrame=Basic.parseInt(getElementText());break;case "Hsp_query-frame":hsp.queryFrame=Basic.parseInt(getElementText());break;case "Hsp_identity":hsp.identity=Basic.parseInt(getElementText());break;case "Hsp_positive":hsp.positive=Basic.parseInt(getElementText());break;case "Hsp_gaps":hsp.gaps=Basic.parseInt(getElementText());break;case "Hsp_align-len":hsp.alignLength=Basic.parseInt(getElementText());break;case "Hsp_density":hsp.density=Basic.parseInt(getElementText());break;case "Hsp_qseq":hsp.qSeq=getElementText();break;case "Hsp_hseq":hsp.hSeq=getElementText();break;case "Hsp_midline":hsp.midLine=getElementText();break;case "Statistics_db-num":stats.addLong(qName,getElementText());break;case "Statistics_db-len":stats.addLong(qName,getElementText());break;case "Statistics_hsp-len":stats.addLong(qName,getElementText());break;case "Statistics_eff-space":stats.addDouble(qName,getElementText());break;case "Statistics_kappa":stats.addFloat(qName,getElementText());break;case "Statistics_lambda":stats.addFloat(qName,getElementText());break;case "Statistics_entropy":stats.addFloat(qName,getElementText());break;}}  }
class C{  @Override public void startup() throws Exception {  Log.d(Mary.LOG,"Register UnitSelection voices:");  List<String> voiceNames=MaryProperties.getList("unitselection.voices.list");  for (  String voiceName : voiceNames) {    long time=System.currentTimeMillis();    Voice unitSelVoice=new UnitSelectionVoice(voiceName,this);    Log.d(Mary.LOG,"Voice '" + unitSelVoice + "'");    Voice.registerVoice(unitSelVoice);    long newtime=System.currentTimeMillis() - time;    Log.i(Mary.LOG,"Loading of voice " + voiceName + " took "+ newtime+ " milliseconds");  }  Log.i(Mary.LOG,"started.");}  }
class C{  @Override public void skippedEntity(String name) throws SAXException {  if (saxParser != null) {    saxParser.skippedEntity(name);  }}  }
class C{  public static double[] convertVariablesToDimension(final double[] variables){  final double a=variables[0];  final double b=variables[1] / 2;  final double c=variables[2];  final double d=variables[3] / 2;  final double f=variables[4] / 2;  final double g=variables[5];  final double centerX=(c * d - b * f) / (b * b - a * c);  final double centerY=(a * f - b * d) / (b * b - a * c);  final double numerator=2 * (a * f * f + c * d * d + g * b * b - 2 * b * d* f - a * c * g);  final double lengthAxisA=Math.sqrt((numerator) / ((b * b - a * c) * (Math.sqrt((a - c) * (a - c) + 4 * b * b) - (a + c))));  final double lengthAxisB=Math.sqrt((numerator) / ((b * b - a * c) * (-Math.sqrt((a - c) * (a - c) + 4 * b * b) - (a + c))));  double phi=0;  if (b == 0) {    if (a <= c)     phi=0; else     if (a > c)     phi=Math.PI / 2;  } else {    if (a < c)     phi=Math.atan(2 * b / (a - c)) / 2; else     if (a > c)     phi=Math.atan(2 * b / (a - c)) / 2 + Math.PI / 2;  }  return new double[]{centerX,centerY,lengthAxisA,lengthAxisB,phi};}  }
class C{  private static JSONObject queryJsonFromUrl(final String latLong) throws IOException, JSONException {  final String language=ConfigNew.getConfig().getString(ConfigKey.LANGUAGE);  final String apiUrl="http://maps.googleapis.com/maps/api/geocode/json?latlng=%s&sensor=true&language=%s";  final String formattedUrl=String.format(apiUrl,latLong.replace(" ","%20"),language);  try {    final URL url=new URL(formattedUrl);    final String apiResponse=FileHelper.readFile(url.openStream());    return new JSONObject(apiResponse);  } catch (  IOException e) {    System.out.println(ExceptionMessages.COULD_NOT_QUERY_LOCATION.with(e));    return new JSONObject();  }}  }
class C{  protected IndexKey convertStartKeyToNodeEntry(byte[] startKey){  ByteBuffer buffer=ByteBuffer.wrap(startKey);  buffer.rewind();  int dictonaryKeySize=buffer.getInt();  int nonDictonaryKeySize=buffer.getInt();  byte[] dictionaryKey=new byte[dictonaryKeySize];  buffer.get(dictionaryKey);  byte[] nonDictionaryKey=new byte[nonDictonaryKeySize];  buffer.get(nonDictionaryKey);  IndexKey entry=new IndexKey(dictionaryKey,nonDictionaryKey);  return entry;}  }
class C{  public static boolean isDark(@ColorInt int color){  float[] hsl=new float[3];  android.support.v4.graphics.ColorUtils.colorToHSL(color,hsl);  return isDark(hsl);}  }
class C{  private Set<String> createValueSet(Matcher query,String havingQuery) throws BadHavingException {  try {    return new LinkedHashSet<>(FilterTokenizer.split(query.group(3).replaceAll("\\[","").replaceAll("\\]","").trim()));  } catch (  IllegalArgumentException e) {    LOG.debug(HAVING_ERROR.logFormat(havingQuery,e.getMessage()),e);    throw new BadHavingException(HAVING_ERROR.format(havingQuery,e.getMessage()),e);  }}  }
class C{  public ThreadDump(File file){  this(file,null);}  }
class C{  @deprecated public boolean isAlias(String k){  return ICUResourceBundleReader.RES_GET_TYPE(getTableResource(k)) == 3;}  }
class C{  public T[] extractEquationData(final int index,final T[] complete) throws MathIllegalArgumentException {  checkIndex(index);  final int begin=start[index];  final int end=start[index + 1];  if (complete.length < end) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,complete.length,end);  }  final int dimension=end - begin;  final T[] equationData=MathArrays.buildArray(complete[0].getField(),dimension);  System.arraycopy(complete,begin,equationData,0,dimension);  return equationData;}  }
class C{  @Override public final void evaluateRule(final Long pRuleId){  if (LOGGER.isTraceEnabled()) {    StringBuffer str=new StringBuffer("").append(pRuleId).append(" evaluateRule() called");    LOGGER.trace(str.toString());  }  final Timestamp ruleResultTimestamp=new Timestamp(System.currentTimeMillis());  if (ruleTagCache.isWriteLockedByCurrentThread(pRuleId)) {    LOGGER.info(pRuleId + " Attention: I already have a write lock on rule " + pRuleId);  }  ruleTagCache.acquireWriteLockOnKey(pRuleId);  try {    RuleTag rule=ruleTagCache.get(pRuleId);    if (rule.getRuleExpression() != null) {      final Collection<Long> ruleInputTagIds=rule.getRuleExpression().getInputTagIds();      final Map<Long,Object> tags=new Hashtable<Long,Object>(ruleInputTagIds.size());      Tag tag=null;      Long actualTag=null;      try {        for (        Long inputTagId : ruleInputTagIds) {          actualTag=inputTagId;          tag=tagLocationService.get(inputTagId);          tags.put(inputTagId,tag);        }        Class<?> ruleResultClass=getType(rule.getDataType());        Object value=rule.getRuleExpression().evaluate(tags,ruleResultClass);        ruleUpdateBuffer.update(pRuleId,value,"Rule result",ruleResultTimestamp);      } catch (      CacheElementNotFoundException cacheEx) {        LOGGER.warn(pRuleId + " evaluateRule - Failed to locate tag with id " + actualTag+ " in any tag cache (during rule evaluation) - unable to evaluate rule.",cacheEx);        ruleUpdateBuffer.invalidate(pRuleId,TagQualityStatus.UNKNOWN_REASON,"Unable to evaluate rule as cannot find required Tag in cache: " + cacheEx.getMessage(),ruleResultTimestamp);      }catch (      RuleEvaluationException re) {        LOGGER.trace(pRuleId + " evaluateRule - Problem evaluating expresion for rule with Id (" + pRuleId+ ") - invalidating rule with quality UNKNOWN_REASON ("+ re.getMessage()+ ").");        ruleUpdateBuffer.invalidate(pRuleId,TagQualityStatus.UNKNOWN_REASON,re.getMessage(),ruleResultTimestamp);      }catch (      Exception e) {        LOGGER.error(pRuleId + " evaluateRule - Unexpected Error evaluating expresion of rule with Id (" + pRuleId+ ") - invalidating rule with quality UNKNOWN_REASON",e);        ruleUpdateBuffer.invalidate(pRuleId,TagQualityStatus.UNKNOWN_REASON,e.getMessage(),ruleResultTimestamp);      }    } else {      LOGGER.error(pRuleId + " evaluateRule - Unable to evaluate rule with Id (" + pRuleId+ ") as RuleExpression is null.");    }  } catch (  CacheElementNotFoundException cacheEx) {    LOGGER.error(pRuleId + " evaluateRule - Rule with id " + pRuleId+ " not found in cache - unable to evaluate it.",cacheEx);  }catch (  Exception e) {    LOGGER.error("evaluateRule - Unexpected Error caught while retrieving " + pRuleId + " from rule cache.",e);    ruleUpdateBuffer.invalidate(pRuleId,TagQualityStatus.UNKNOWN_REASON,e.getMessage(),ruleResultTimestamp);  } finally {    ruleTagCache.releaseWriteLockOnKey(pRuleId);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ACCUSE_COUNT_INFO(String value0){  return new SM_SYSTEM_MESSAGE(1400091,value0);}  }
class C{  public static double[] xVals(double[] vector){  if (vector == null)   return null;  double[] x=new double[vector.length / 2];  int count=0;  for (int i=0; i < vector.length; i++) {    if (i % 2 != 0)     x[count++]=vector[i];  }  return x;}  }
class C{  public static Vector3D intersection(final Plane plane1,final Plane plane2,final Plane plane3){  final double a1=plane1.w.getX();  final double b1=plane1.w.getY();  final double c1=plane1.w.getZ();  final double d1=plane1.originOffset;  final double a2=plane2.w.getX();  final double b2=plane2.w.getY();  final double c2=plane2.w.getZ();  final double d2=plane2.originOffset;  final double a3=plane3.w.getX();  final double b3=plane3.w.getY();  final double c3=plane3.w.getZ();  final double d3=plane3.originOffset;  final double a23=b2 * c3 - b3 * c2;  final double b23=c2 * a3 - c3 * a2;  final double c23=a2 * b3 - a3 * b2;  final double determinant=a1 * a23 + b1 * b23 + c1 * c23;  if (FastMath.abs(determinant) < 1.0e-10) {    return null;  }  final double r=1.0 / determinant;  return new Vector3D((-a23 * d1 - (c1 * b3 - c3 * b1) * d2 - (c2 * b1 - c1 * b2) * d3) * r,(-b23 * d1 - (c3 * a1 - c1 * a3) * d2 - (c1 * a2 - c2 * a1) * d3) * r,(-c23 * d1 - (b1 * a3 - b3 * a1) * d2 - (b2 * a1 - b1 * a2) * d3) * r);}  }
class C{  public void clearChoices(){}  }
class C{  public JobRequestFailedException(String message){  super(message);}  }
class C{  private boolean compareResult(Map<String,List<Distributable>> expectedResult,Map<String,List<Distributable>> actualResult){  expectedResult=sortByListSize(expectedResult);  actualResult=sortByListSize(actualResult);  List<List<Distributable>> expectedList=new LinkedList(expectedResult.entrySet());  List<List<Distributable>> mapOfNodesList=new LinkedList(actualResult.entrySet());  boolean isEqual=expectedList.size() == mapOfNodesList.size();  if (isEqual) {    for (int i=0; i < expectedList.size(); i++) {      int size1=((List)((Map.Entry)(expectedList.get(i))).getValue()).size();      int size2=((List)((Map.Entry)(mapOfNodesList.get(i))).getValue()).size();      isEqual=size1 == size2;      if (!isEqual) {        break;      }    }  }  return isEqual;}  }
class C{  protected void sendPacket(CsServerPacket msg){  getConnection().sendPacket(msg);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  executeImmediately(getSyntax());}  }
class C{  static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {  try {    Class providerClass=findProviderClass(className,cl,doFallback);    Object instance=providerClass.newInstance();    if (DEBUG)     debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return instance;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  public static void w(String tag,String msg,Object... args){  if (sLevel > LEVEL_WARNING) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.w(tag,msg);}  }
class C{  public static long addExact(final long a,final long b) throws MathRuntimeException {  final long sum=a + b;  if ((a ^ b) >= 0 && (sum ^ b) < 0) {    throw new MathRuntimeException(LocalizedCoreFormats.OVERFLOW_IN_ADDITION,a,b);  }  return sum;}  }
class C{  public void clear(){  map.clear();}  }
class C{  public boolean isInteractive(int row){  return getBoolean(row,VisualItem.INTERACTIVE);}  }
class C{  public String indexName(){  return idxName;}  }
class C{  void addPaths(ViterbiPoint point,ViterbiPath path){  ViterbiPath nextPath;  for (ViterbiPath p=path; p != null; p=nextPath) {    nextPath=p.next;    addPath(point,p);  }}  }
class C{  public void mapToScreen(List<Double> rulerMap){  if ((this.from < rulerMap.get(0) && this.to < rulerMap.get(0)) || (this.from > rulerMap.get(rulerMap.size() - 1)) && this.to > rulerMap.get(rulerMap.size() - 1)) {    this.screenFrom=-1;    this.screenTo=-1;    return;  }  if (this.from <= rulerMap.get(0) && this.to >= rulerMap.get(rulerMap.size() - 1)) {    this.screenFrom=0;    this.screenTo=rulerMap.size() - 1;    return;  }  screenFrom=Utils.getIndexOfclosestValue(this.from,rulerMap);  screenTo=Utils.getIndexOfclosestValue(this.to,rulerMap);  if (screenFrom == -1) {    screenFrom=0;  }  if (screenTo == -1) {    screenTo=rulerMap.size() - 1;  }  if (screenFrom == -1 || screenTo == -1) {    System.err.println("Unexpected mapping of features to ruler.");    System.exit(1);  }}  }
class C{  @Deployment public void testBoundaryEvent(){  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("boundaryEventProcess");  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();  assertNotNull(task);  taskService.complete(task.getId());  assertEquals(0L,runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).count());  HistoricActivityInstance historicActivityInstance=historyService.createHistoricActivityInstanceQuery().activityId("boundary").processInstanceId(processInstance.getId()).singleResult();  assertNull(historicActivityInstance);  processInstance=runtimeService.startProcessInstanceByKey("boundaryEventProcess");  task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();  Execution signalExecution=runtimeService.createExecutionQuery().signalEventSubscriptionName("alert").singleResult();  runtimeService.signalEventReceived("alert",signalExecution.getId());  assertEquals(0L,runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).count());  historicActivityInstance=historyService.createHistoricActivityInstanceQuery().activityId("boundary").processInstanceId(processInstance.getId()).singleResult();  assertNotNull(historicActivityInstance);  assertNotNull(historicActivityInstance.getStartTime());  assertNotNull(historicActivityInstance.getEndTime());}  }
class C{  void out(Operand... oprs){  out=oprs;}  }
class C{  public WallEditQuery edit(UserActor actor,int postId){  return new WallEditQuery(getClient(),actor,postId);}  }
class C{  public void paintAxis(Graphics g0){  Graphics2D g=(Graphics2D)g0;  Rectangle rec=getVisibleRect();  g.setColor(Color.WHITE);  g.fillRect(0,0,getWidth(),getHeight());  g.setBackground(Color.WHITE);  g.setFont(axisFont);  if (alignment != null) {    final GapColumnContractor gapColumnContractor=getAlignment().getGapColumnContractor();{      g.setColor(Color.LIGHT_GRAY);      SortedSet<Integer> jumpColumns=gapColumnContractor.getJumpPositionsRelativeToLayoutColumns();      for (      Integer col : jumpColumns) {        if (cellWidth > 1) {          g.setColor(Color.WHITE);          g.drawLine((int)getX(col),-1,(int)getX(col),getSize().height);          g.setColor(Color.GRAY);          g.drawLine((int)getX(col) - 1,-1,(int)getX(col) - 1,getSize().height);          g.drawLine((int)getX(col) + 1,-1,(int)getX(col) + 1,getSize().height);        } else {          g.drawLine((int)getX(col),-1,(int)getX(col),getSize().height);        }      }    }    g.setColor(Color.BLACK);    int minVisibleCol=(int)Math.max(0,(rec.getX() / cellWidth)) + gapColumnContractor.getFirstLayoutColumn();    int maxVisibleCol=(int)Math.min(gapColumnContractor.getLastLayoutColumn(),(rec.getX() + rec.getWidth()) / cellWidth);    double dashWidth=axisMetrics.getStringBounds("-",g).getWidth();    double maxLabelWidth=axisMetrics.getStringBounds("|" + Math.min(alignment.getLength(),maxVisibleCol),g).getWidth();    int step=1;    for (; step <= 1000000; step*=10) {      if (maxLabelWidth < getX(step) - getX(0))       break;    }    Integer[] jumpCols=gapColumnContractor.getJumpPositionsRelativeToLayoutColumns().toArray(new Integer[gapColumnContractor.getJumpPositionsRelativeToLayoutColumns().size()]);    int jc=0;    int jumped=0;    int offsetDueToInsertedPositions=0;    if (alignment.getInsertionsIntoReference().size() > 0) {      for (int layoutCol=gapColumnContractor.getFirstLayoutColumn(); layoutCol < minVisibleCol; layoutCol++) {        while (jc < jumpCols.length && jumpCols[jc] < layoutCol) {          jumped+=gapColumnContractor.getJumpBeforeLayoutColumn(jumpCols[jc]);          jc++;        }        int trueCol=layoutCol + jumped;        if (alignment.getInsertionsIntoReference().contains(trueCol))         offsetDueToInsertedPositions++;      }    }    double lastPos=Float.MIN_VALUE;    for (int layoutCol=minVisibleCol; layoutCol <= maxVisibleCol; layoutCol++) {      while (jc < jumpCols.length && jumpCols[jc] < layoutCol) {        jumped+=gapColumnContractor.getJumpBeforeLayoutColumn(jumpCols[jc]);        jc++;      }      int trueCol=layoutCol + jumped;      if (alignment.getInsertionsIntoReference().contains(trueCol - 1)) {        offsetDueToInsertedPositions++;        if (cellWidth > dashWidth)         g.drawString("-",(int)(getX(layoutCol - 1) + (cellWidth - dashWidth) / 2),11);      } else {        trueCol-=offsetDueToInsertedPositions;        if (trueCol > 0 && ((trueCol) % step) == 0) {          double layoutX=getX(layoutCol - 1) - 3;          if (lastPos + maxLabelWidth < layoutX) {            g.drawString("|" + trueCol,Math.round(layoutX),11);            lastPos=layoutX;          }        }      }    }  }}  }
class C{  public static String determineOriginalFile(Context context,Uri uri) throws IllegalArgumentException {  String originalFile=null;  if (uri != null) {    if (uri.getScheme().startsWith("content")) {      originalFile=getPathFromUri(context,uri);    }    if (uri.toString().matches("https?://\\w+\\.googleusercontent\\.com/.+")) {      originalFile=uri.toString();    }    if (uri.getScheme().startsWith("file")) {      originalFile=uri.toString().substring(7);    }    if (isNullOrEmpty(originalFile)) {      throw new IllegalArgumentException("File path was null");    }  } else {    throw new IllegalArgumentException("Image Uri was null!");  }  return originalFile;}  }
class C{  public static final String unescapeHtml4(final String input){  return UNESCAPE_HTML4.translate(input);}  }
class C{  protected void renderMenuFull(Appendable writer,Map<String,Object> context,ModelMenu menu,StringBuffer sb) throws IOException {  try {    executeMacro(writer,sb.toString());  } catch (  TemplateException e) {    throw new IOException(e);  }}  }
class C{  private void paintRec(Graphics2D gc,Node v,List<Node> drawableNodeLabels,boolean enabled){  Rectangle bbox=node2BoundingBox.get(v);  if (bbox == null)   bbox=new Rectangle();  final Rectangle bboxDeviceCoordinates=new Rectangle();  trans.w2d(bbox,bboxDeviceCoordinates);  if (drawOnScreen && !getVisibleRect().intersects(bboxDeviceCoordinates))   return;  final NodeView nv=getNV(v);  if (nv.getLabel() != null) {    nv.setLabelSize(gc);  }  nv.setEnabled(enabled);  final boolean isSmall=v.getOutDegree() > 0 && (bboxDeviceCoordinates.getHeight() / (getTree().getDegree(v) - 1) < 4);  if (isSmall) {    if (1 != ((BasicStroke)gc.getStroke()).getLineWidth())     gc.setStroke(new BasicStroke(1));    gc.setColor(Color.DARK_GRAY);    gc.fill(bboxDeviceCoordinates);  } else {    for (Edge f=v.getFirstOutEdge(); f != null; f=v.getNextOutEdge(f)) {      Node w=v.getOpposite(f);      Point2D nextToV=getNV(w).getLocation();      Point2D nextToW=getNV(v).getLocation();      if (nextToV == null || nextToW == null)       continue;      if (getInternalPoints(f) != null) {        if (getInternalPoints(f).size() != 0) {          nextToV=getInternalPoints(f).get(0);          nextToW=getInternalPoints(f).get(getInternalPoints(f).size() - 1);        }      }      final Point pv=(!drawLeavesOnly || v.getOutDegree() == 0 ? getNV(v).computeConnectPoint(nextToV,trans) : trans.w2d(getNV(v).getLocation()));      final Point pw=(!drawLeavesOnly || w.getOutDegree() == 0 ? getNV(w).computeConnectPoint(nextToW,trans) : trans.w2d(getNV(w).getLocation()));      final EdgeView ev=getEV(f);      ev.setEnabled(enabled);      if (ev.getLineWidth() != ((BasicStroke)gc.getStroke()).getLineWidth()) {        gc.setStroke(new BasicStroke(ev.getLineWidth()));      }      ev.draw(gc,pv,pw,trans,getSelected(f));      ev.setLabelReferenceLocation(nextToV,nextToW,trans);      if (ev.getLabel() != null && ev.isLabelVisible()) {        ev.setLabelReferenceLocation(pv,pw,trans);        ev.setLabelSize(gc);        ev.drawLabel(gc,trans,false);        if (getSelected(f))         ev.drawLabel(gc,trans,true);      }      paintRec(gc,w,drawableNodeLabels,enabled);    }  }  if (getNV(v).getLineWidth() != ((BasicStroke)gc.getStroke()).getLineWidth()) {    gc.setStroke(new BasicStroke(getNV(v).getLineWidth()));  }  if (!drawLeavesOnly || v.getOutDegree() == 0)   nodeDrawer.draw(v,selectedNodes.contains(v));  if (getLabel(v) != null && getLabel(v).length() > 0 && !isSmall)   drawableNodeLabels.add(v);}  }
class C{  private void addTabId(int index,int tabId){  assert tabId != Tab.INVALID_TAB_ID;  if (mTabIdList.contains(tabId))   return;  mTabIdList.add(index,tabId);}  }
class C{  public AttribsExpression putAll(AttribsExpression otherExpr){  String origStr=otherExpr.attribsExpr.getOriginal();  if (UtilValidate.isNotEmpty(origStr)) {    return new AttribsExpression(FlexibleStringExpander.getInstance(concatMapExpr(attribsExpr.getOriginal(),origStr)));  } else {    return new AttribsExpression(attribsExpr);  }}  }
class C{  public static double calcHaMultiplier(Boolean vcenterhastate){  double d=0;  if (vcenterhastate) {    d=1.125;  } else {    d=1;  }  return d;}  }
class C{  protected final void updateAssistState(){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M)   return;  boolean isAssistSupported=isAssistSupported();  if (mAssistSupported == null || mAssistSupported != isAssistSupported) {    if (mSetAssistBlockedMethod == null) {      try {        mSetAssistBlockedMethod=View.class.getMethod("setAssistBlocked",boolean.class);      } catch (      NoSuchMethodException e) {        return;      }    }    View rootContent=mActivity.findViewById(android.R.id.content);    try {      mSetAssistBlockedMethod.invoke(rootContent,!isAssistSupported);    } catch (    IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {      return;    }  }  mAssistSupported=isAssistSupported;}  }
class C{  protected boolean isTopLevelIncludedItem(){  return isTopLevelIncludedItemViaInclude() || isTopLevelIncludedItemViaFallback();}  }
class C{  private void populateSupportedTypes(){  if (supportedNodeTypeList.isEmpty()) {    supportedNodeTypeList.add(GeoServerLayerHeadingNode.class);    supportedNodeTypeList.add(GeoServerWorkspaceNode.class);    supportedNodeTypeList.add(GeoServerLayerNode.class);  }}  }
class C{  public DataTypeException(Throwable cause){  super(cause);}  }
class C{  public RegexValidator(String regex){  this(regex,true);}  }
class C{  private CarbonDictionarySortInfo createColumnSortInfo(CarbonDictionarySortModel[] dictionarySortModels){  int[] sortIndex;  int[] sortIndexInverted;  Arrays.sort(dictionarySortModels);  sortIndex=new int[dictionarySortModels.length];  sortIndexInverted=new int[dictionarySortModels.length];  for (int i=0; i < dictionarySortModels.length; i++) {    CarbonDictionarySortModel dictionarySortModel=dictionarySortModels[i];    sortIndex[i]=dictionarySortModel.getKey();    sortIndexInverted[dictionarySortModel.getKey() - 1]=i + 1;  }  dictionarySortModels=null;  List<Integer> sortIndexList=convertToList(sortIndex);  List<Integer> sortIndexInvertedList=convertToList(sortIndexInverted);  return new CarbonDictionarySortInfo(sortIndexList,sortIndexInvertedList);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_RESISTED_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201097,skilltarget,skillcaster,skillname);}  }
class C{  private static void recursiveInvalidate(View view){  view.invalidate();  if (view instanceof ViewGroup) {    ViewGroup group=(ViewGroup)view;    int childCount=group.getChildCount();    for (int i=0; i < childCount; i++) {      View child=group.getChildAt(i);      if (child.getVisibility() == View.VISIBLE) {        recursiveInvalidate(child);      }    }  }}  }
class C{  public void init(OmniboxResultItem suggestionItem,OmniboxSuggestionDelegate suggestionDelegate,int position,boolean useDarkColors){  ViewCompat.setLayoutDirection(this,ViewCompat.getLayoutDirection(mUrlBar));  mPosition=position;  jumpDrawablesToCurrentState();  boolean colorsChanged=mUseDarkColors == null || mUseDarkColors != useDarkColors;  if (suggestionItem.equals(mSuggestionItem) && !colorsChanged)   return;  mUseDarkColors=useDarkColors;  if (colorsChanged) {    mContentsView.mTextLine1.setTextColor(getStandardFontColor());    setRefineIcon(true);  }  mSuggestionItem=suggestionItem;  mSuggestion=suggestionItem.getSuggestion();  mSuggestionDelegate=suggestionDelegate;  mContentsView.resetTextWidths();  mContentsView.mAnswerImage.setVisibility(GONE);  mContentsView.mAnswerImage.getLayoutParams().height=0;  mContentsView.mAnswerImage.getLayoutParams().width=0;  mContentsView.mAnswerImage.setImageDrawable(null);  mContentsView.mAnswerImageMaxSize=0;  mContentsView.mTextLine1.setTextSize(FIRST_LINE_TEXT_SIZE_SP);  mContentsView.mTextLine2.setTextSize(SECOND_LINE_TEXT_SIZE_SP);  if (mSuggestion.hasAnswer()) {    setAnswer(mSuggestion.getAnswer());    mContentsView.setSuggestionIcon(SuggestionIconType.MAGNIFIER,colorsChanged);    mContentsView.mTextLine2.setVisibility(VISIBLE);    setRefinable(true);    return;  }  boolean sameAsTyped=suggestionItem.getMatchedQuery().equalsIgnoreCase(mSuggestion.getDisplayText());  int suggestionType=mSuggestion.getType();  if (mSuggestion.isUrlSuggestion()) {    if (mSuggestion.isStarred()) {      mContentsView.setSuggestionIcon(SuggestionIconType.BOOKMARK,colorsChanged);    } else     if (suggestionType == OmniboxSuggestionType.HISTORY_URL) {      mContentsView.setSuggestionIcon(SuggestionIconType.HISTORY,colorsChanged);    } else {      mContentsView.setSuggestionIcon(SuggestionIconType.GLOBE,colorsChanged);    }    boolean urlShown=!TextUtils.isEmpty(mSuggestion.getUrl());    boolean urlHighlighted=false;    if (urlShown) {      urlHighlighted=setUrlText(suggestionItem);    } else {      mContentsView.mTextLine2.setVisibility(INVISIBLE);    }    setSuggestedQuery(suggestionItem,true,urlShown,urlHighlighted);    setRefinable(!sameAsTyped);  } else {    SuggestionIconType suggestionIcon=SuggestionIconType.MAGNIFIER;    if (suggestionType == OmniboxSuggestionType.VOICE_SUGGEST) {      suggestionIcon=SuggestionIconType.VOICE;    } else     if ((suggestionType == OmniboxSuggestionType.SEARCH_SUGGEST_PERSONALIZED) || (suggestionType == OmniboxSuggestionType.SEARCH_HISTORY)) {      suggestionIcon=SuggestionIconType.HISTORY;    }    mContentsView.setSuggestionIcon(suggestionIcon,colorsChanged);    setRefinable(!sameAsTyped);    setSuggestedQuery(suggestionItem,false,false,false);    if ((suggestionType == OmniboxSuggestionType.SEARCH_SUGGEST_ENTITY) || (suggestionType == OmniboxSuggestionType.SEARCH_SUGGEST_PROFILE)) {      showDescriptionLine(SpannableString.valueOf(mSuggestion.getDescription()),getStandardFontColor());    } else {      mContentsView.mTextLine2.setVisibility(INVISIBLE);    }  }}  }
class C{  public void close() throws IOException {  if (type != null) {    encode(out,buf,bufPtr);    for (int i=0; i != nl.length(); i++) {      out.write(nl.charAt(i));    }    out.write('=');    int crcV=crc.getValue();    buf[0]=((crcV >> 16) & 0xff);    buf[1]=((crcV >> 8) & 0xff);    buf[2]=(crcV & 0xff);    encode(out,buf,3);    for (int i=0; i != nl.length(); i++) {      out.write(nl.charAt(i));    }    for (int i=0; i != footerStart.length(); i++) {      out.write(footerStart.charAt(i));    }    for (int i=0; i != type.length(); i++) {      out.write(type.charAt(i));    }    for (int i=0; i != footerTail.length(); i++) {      out.write(footerTail.charAt(i));    }    for (int i=0; i != nl.length(); i++) {      out.write(nl.charAt(i));    }    out.flush();    type=null;    start=true;  }}  }
class C{  public IgDiskCache(File directory,long maxSizeInBytes,int maxCount,Executor serialExecutor){  assertOnNonUIThread();  mDirectory=(directory == null) ? FAKE_CACHE_DIRECTORY : directory;  mMaxCount=maxCount;  mMaxSizeInBytes=maxSizeInBytes;  mRemoveRetryList=new LinkedList<>();  mSizeInBytes.set(0);  mMissCount=0;  mHitCount=0;  mJournal=new Journal(mDirectory,this,serialExecutor);  mLruEntries=new LinkedHashMap<>(0,0.75f,true);  LinkedHashMap<String,Entry> cachedEntries=mJournal.retrieveEntriesFromJournal();  if (cachedEntries == null) {    mDirectory.mkdirs();    mJournal.rebuild();  } else {    mLruEntries.putAll(cachedEntries);    for (    Entry entry : mLruEntries.values()) {      mSizeInBytes.getAndAdd(entry.getLengthInBytes());    }  }}  }
class C{  @RequestMapping(value="/metrics",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Metric> createMetric(@RequestBody Metric metric) throws URISyntaxException {  log.debug("REST request to save Metric : {}",metric);  if (metric.getMetricId() != null) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("metric","idexists","A new metric cannot already have an ID")).body(null);  }  Metric result=metricRepository.save(metric);  return ResponseEntity.created(new URI("/api/metrics/" + result.getMetricId())).headers(HeaderUtil.createEntityCreationAlert("metric",result.getMetricId().toString())).body(result);}  }
class C{  protected void internalTransform(Body body,String phaseName,Map<String,String> options){  boolean changed=true;  BufferedReader reader=null;  peepholeListingStream=PeepholeOptimizer.class.getResourceAsStream("peephole.dat");  if (peepholeListingStream == null)   throw new RuntimeException("could not open file peephole.dat!");  reader=new BufferedReader(new InputStreamReader(peepholeListingStream));  String line=null;  List<String> peepholes=new LinkedList<String>();  try {    line=reader.readLine();    while (line != null) {      if (line.length() > 0)       if (!(line.charAt(0) == '#'))       peepholes.add(line);      line=reader.readLine();    }  } catch (  IOException e) {    throw new RuntimeException("IO error occured while reading file:  " + line + System.getProperty("line.separator")+ e);  }  while (changed) {    changed=false;    Iterator<String> it=peepholes.iterator();    while (it.hasNext()) {      boolean peepholeWorked=true;      String peepholeName=it.next();      while (peepholeWorked) {        peepholeWorked=false;        Class<?> peepholeClass;        if ((peepholeClass=peepholeMap.get(peepholeName)) == null) {          try {            peepholeClass=Class.forName(packageName + "." + peepholeName);          } catch (          ClassNotFoundException e) {            throw new RuntimeException(e.toString());          }          peepholeMap.put(peepholeName,peepholeClass);        }        Peephole p=null;        try {          p=(Peephole)peepholeClass.newInstance();        } catch (        IllegalAccessException e) {          throw new RuntimeException(e.toString());        }catch (        InstantiationException e) {          throw new RuntimeException(e.toString());        }        if (p.apply(body)) {          peepholeWorked=true;          changed=true;        }      }    }  }  try {    peepholeListingStream.close();  } catch (  IOException e) {  }}  }
class C{  static void forceKill(String commandUID){  if (!ExecutorUtils.isUnixOS())   return;  AsyncCommandResult killRes=null;  try {    File binDir=new File("/bin");    if (!binDir.exists())     return;    final String pkillScript=binDir.getPath() + File.separator + ExecutorContstants.KILL_TEST_SCRIPT;    SimpleCommand killCmd=new SimpleCommand("Kill JVM",pkillScript,commandUID);    killRes=Executor.executeAsync(killCmd,null);    killRes.waitFor(5 * 1000);  } catch (  InterruptedException e) {  } finally {    if (killRes != null)     killRes.stop(false);  }}  }
class C{  protected void notifyScrollingListenersAboutStart(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingStarted(this);  }}  }
class C{  public static long count(String table,String where,Object[] args){  TimeStamp t=TimeStamp.create();  StringBuilder sum=new StringBuilder();  sum.append("select count(*) t from ").append(table);  if (where != null) {    sum.append(" where ").append(where);  }  Connection c=null;  PreparedStatement p=null;  ResultSet r=null;  try {    c=getConnection();    if (c == null)     return 0;    p=c.prepareStatement(sum.toString());    int order=1;    if (args != null) {      for (int i=0; i < args.length; i++) {        Object o=args[i];        setParameter(p,order++,o);      }    }    r=p.executeQuery();    if (r.next()) {      return r.getInt("t");    }  } catch (  Exception e) {    if (log.isErrorEnabled())     log.error(sum.toString() + toString(args),e);  } finally {    close(r,p,c);    if (t.past() > 2 && sqllog.isDebugEnabled()) {      sqllog.debug("cost:" + t.past() + "ms, sql=["+ sum+ "]; ["+ sum+ "]");    }  }  return 0;}  }
class C{  public void collectTags(SootClass sc){  collectTags(sc,true);}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  out.defaultWriteObject();  servID.writeBytes(out);}  }
class C{  public RequestContext(ContainerRequestContext containerRequestContext,boolean readCache){  this.containerRequestContext=containerRequestContext;  this.readCache=readCache;  this.searchableHeaders=containerRequestContext != null ? Utils.headersToLowerCase(containerRequestContext.getHeaders()) : new MultivaluedHashMap<>();}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;  }}  }
class C{  private static int clampX(int x,ConstraintWidget base){  if (x < base.getX()) {    x=base.getX();  } else   if (x > base.getRight()) {    x=base.getRight();  }  return x;}  }
class C{  @Override public void justSelected(){  setCachedExpression(generateExpression());  checkSymbolIsValid();}  }
class C{  public PollsDeleteVoteQuery isBoard(Boolean value){  return unsafeParam("is_board",value);}  }
class C{  public static void decodePathSegment(List<PathSegment> segments,String segment,boolean decode){  int colon=segment.indexOf(';');  if (colon != -1) {    segments.add(new PathSegmentImpl((colon == 0) ? "" : segment.substring(0,colon),decode,decodeMatrix(segment,decode)));  } else {    segments.add(new PathSegmentImpl(segment,decode));  }}  }
class C{  public void schedule(String jobName,String poolName,String serviceName,String dataId,long startTime,int frequency,int interval,int count,long endTime,int maxRetry) throws JobManagerException {  schedule(jobName,poolName,serviceName,dataId,startTime,frequency,interval,count,endTime,maxRetry,(String)null);}  }
class C{  private void handleOnNotificationDismissed(long id){  Task[] tasksToDismiss=NagboxDbOps.getTasksToDismiss(mDatabase,id);  if (tasksToDismiss.length == 0) {    return;  }  NagboxDbOps.Transaction transaction=NagboxDbOps.startTransaction(mDatabase);  for (  Task task : tasksToDismiss) {    task.setIsSeen(true);    transaction.updateTaskStatus(task);  }  boolean isSuccess=transaction.commit();  if (!isSuccess) {    Log.e(TAG,"Couldn't unset the 'not seen' flag from tasks");  } else {    final ContentResolver contentResolver=getContentResolver();    for (    Task task : tasksToDismiss) {      contentResolver.notifyChange(TasksTable.getUriForItem(task.id),null);    }  }}  }
class C{  public void start(long timeInMillisecond){  stop();  fullTime=timeInMillisecond;  elapsedTime=0f;  playAnimationStart();}  }
class C{  public GroupsGetSettingsQuery(VkApiClient client,UserActor actor,int groupId){  super(client,"groups.getSettings",GroupSettings.class);  accessToken(actor.getAccessToken());  groupId(groupId);}  }
class C{  private void layout(int width,int height){  int itemsWidth=width - 2 * PADDING;  itemsLayout.layout(0,0,itemsWidth,height);}  }
class C{  public static void d(String tag,String msg){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg);}  }
class C{  public MarketReorderAlbumsQuery after(Integer value){  return unsafeParam("after",value);}  }
class C{  public Future execute(CompletionCallback<Map<String,Object>> callback){  if (callback == null)   throw new IllegalArgumentException("Callback cannot be null");  TaskManagerImpl taskManager=new TaskManagerImpl(this.executor_,this.tasks_,callback);  this.executor_.execute(taskManager);  return new Future(taskManager);}  }
class C{  @Override public boolean isCellEditable(int rowIndex,int columnIndex){  return (columnIndex != COL_NUMBER);}  }
class C{  public JDKRandomGenerator(long seed){  delegate=new Random(seed);}  }
class C{  private void populateAdvancedInformation(IVScanResult ivScanResult){  double selectedLevel=seekbarProgressToLevel(expandedLevelSeekbar.getProgress());  Pokemon selectedPokemon=initPokemonSpinnerIfNeeded(ivScanResult.pokemon);  setEstimateCpTextBox(ivScanResult,selectedLevel,selectedPokemon);  setEstimateHPTextBox(ivScanResult,selectedLevel,selectedPokemon);  setPokemonPerfectionPercentageText(ivScanResult,selectedPokemon);  setEstimateCostTextboxes(ivScanResult,selectedLevel,selectedPokemon);  exResLevel.setText(String.valueOf(selectedLevel));  setEstimateLevelTextColor(selectedLevel);  setAndCalculatePokeSpamText(ivScanResult);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public java.util.List<TypeDecl> typeArguments(MethodDecl decl){  Object _parameters=decl;  if (typeArguments_MethodDecl_values == null)   typeArguments_MethodDecl_values=new java.util.HashMap(4);  if (typeArguments_MethodDecl_values.containsKey(_parameters)) {    return (java.util.List<TypeDecl>)typeArguments_MethodDecl_values.get(_parameters);  }  ASTNode$State state=state();  int num=state.boundariesCrossed;  boolean isFinal=this.is$Final();  java.util.List<TypeDecl> typeArguments_MethodDecl_value=typeArguments_compute(decl);  if (isFinal && num == state().boundariesCrossed)   typeArguments_MethodDecl_values.put(_parameters,typeArguments_MethodDecl_value);  return typeArguments_MethodDecl_value;}  }
class C{  protected void stopWatchTextUnit(){  if (!textUnitStopWatch.isRunning()) {    textUnitStopWatch.start("start creating text unit");  }  if (++numOfTextUnitProcess % 500 == 0) {    logger.info("num of text unit added:  {}",numOfTextUnitProcess);    textUnitStopWatch.stop();    textUnitStopWatch.start("batch " + numOfTextUnitProcess);  }}  }
class C{  static private boolean _domWriter(Node node,PrintStream ps,String prefix){  if (node.getNodeType() == Node.TEXT_NODE) {    NodeList nl=node.getChildNodes();    for (int i=0; i < nl.getLength(); i++) {      _domWriter(nl.item(i),ps,prefix);    }    String nodeValue=node.getNodeValue().trim();    if (nodeValue != null && nodeValue.length() > 0) {      ps.print(nodeValue);      return true;    }    return false;  }  if (node.getNodeType() == Node.COMMENT_NODE) {    ps.println();    ps.print(prefix + "<!--" + node.getNodeValue().trim()+ "-->");    return false;  }  NodeList nl=node.getChildNodes();  int numOfChildren=nl.getLength();  String tagName=getNodeSignature(node);  ps.println();  ps.print(prefix + "<" + tagName+ ">");  boolean isMemberUrlTag=tagName.equals(ClusterXML.MEMBER_URL_TAG);  boolean valueNode=false;  for (int i=0; i < numOfChildren; i++) {    Node childNode=nl.item(i);    if (isMemberUrlTag) {      String memberUrl=childNode.getNodeValue();      memberUrl=handleInvalidChars(memberUrl);      childNode.setNodeValue(memberUrl);    }    boolean returnedValue=_domWriter(childNode,ps,prefix + "     ");    valueNode=valueNode || returnedValue;  }  if (!valueNode) {    ps.println();    ps.print(prefix + "</" + node.getNodeName()+ ">");  } else {    ps.print("</" + node.getNodeName() + ">");  }  return false;}  }
class C{  public TypeViewFilter(@NonNull Class<? extends View>[] viewTypes){  super(viewTypes);}  }
class C{  private void synchronizeData(ArrayList<Object> folderAndFiles,OwnCloudClient client) throws OperationCancelledException {  FileDataStorageManager storageManager=getStorageManager();  OCFile remoteFolder=FileStorageUtils.fillOCFile((RemoteFile)folderAndFiles.get(0));  remoteFolder.setParentId(mLocalFolder.getParentId());  remoteFolder.setFileId(mLocalFolder.getFileId());  Log_OC.d(TAG,"Remote folder " + mLocalFolder.getRemotePath() + " changed - starting update of local data ");  List<OCFile> updatedFiles=new Vector<OCFile>(folderAndFiles.size() - 1);  mFilesForDirectDownload.clear();  mFilesToSyncContents.clear();  if (mCancellationRequested.get()) {    throw new OperationCancelledException();  }  List<OCFile> localFiles=storageManager.getFolderContent(mLocalFolder,false);  Map<String,OCFile> localFilesMap=new HashMap<String,OCFile>(localFiles.size());  for (  OCFile file : localFiles) {    localFilesMap.put(file.getRemotePath(),file);  }  OCFile remoteFile=null, localFile=null, updatedFile=null;  RemoteFile r;  for (int i=1; i < folderAndFiles.size(); i++) {    r=(RemoteFile)folderAndFiles.get(i);    remoteFile=FileStorageUtils.fillOCFile(r);    updatedFile=FileStorageUtils.fillOCFile(r);    updatedFile.setParentId(mLocalFolder.getFileId());    localFile=localFilesMap.remove(remoteFile.getRemotePath());    updatedFile.setLastSyncDateForProperties(mCurrentSyncTime);    if (localFile != null) {      updatedFile.setFileId(localFile.getFileId());      updatedFile.setFavorite(localFile.isFavorite());      updatedFile.setLastSyncDateForData(localFile.getLastSyncDateForData());      updatedFile.setModificationTimestampAtLastSyncForData(localFile.getModificationTimestampAtLastSyncForData());      updatedFile.setStoragePath(localFile.getStoragePath());      updatedFile.setEtag(localFile.getEtag());      if (updatedFile.isFolder()) {        updatedFile.setFileLength(localFile.getFileLength());      } else       if (mRemoteFolderChanged && remoteFile.isImage() && remoteFile.getModificationTimestamp() != localFile.getModificationTimestamp()) {        updatedFile.setNeedsUpdateThumbnail(true);        Log.d(TAG,"Image " + remoteFile.getFileName() + " updated on the server");      }      updatedFile.setPublicLink(localFile.getPublicLink());      updatedFile.setShareViaLink(localFile.isSharedViaLink());      updatedFile.setShareWithSharee(localFile.isSharedWithSharee());      updatedFile.setEtagInConflict(localFile.getEtagInConflict());    } else {      updatedFile.setEtag("");    }    searchForLocalFileInDefaultPath(updatedFile);    if (remoteFile.isFolder()) {synchronized (mCancellationRequested) {        if (mCancellationRequested.get()) {          throw new OperationCancelledException();        }        startSyncFolderOperation(remoteFile.getRemotePath());      }    } else {      SynchronizeFileOperation operation=new SynchronizeFileOperation(localFile,remoteFile,mAccount,true,mContext);      mFilesToSyncContents.add(operation);    }    updatedFiles.add(updatedFile);  }  storageManager.saveFolder(remoteFolder,updatedFiles,localFilesMap.values());}  }
class C{  public LogOutputStream(RandomAccessFile raf) throws IOException {  this.raf=raf;}  }
class C{  @Override public EntityReference createEntityReference(String name) throws DOMException {  if (errorChecking && !isXMLName(name,xml11Version)) {    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INVALID_CHARACTER_ERR",null);    throw new DOMException(DOMException.INVALID_CHARACTER_ERR,msg);  }  return new EntityReferenceImpl(this,name);}  }
class C{  public void addParameter(ParameterDeclaration node){  List<ParameterDeclaration> list=(parent == null || state == null) ? getParameterListNoTransform() : getParameterList();  list.addChild(node);}  }
class C{  public IntIterator rows(boolean reverse){  return new RowIterator(reverse);}  }
class C{  public static BigDecimal parseBigDecimalForEntity(String bigDecimalString) throws NumberFormatException {  if (bigDecimalString == null) {    return null;  }  bigDecimalString=bigDecimalString.trim();  bigDecimalString=bigDecimalString.replaceAll(",","");  if (bigDecimalString.length() < 1) {    return null;  }  return new BigDecimal(bigDecimalString);}  }
class C{  public void releaseAll(){  for (  ListenerPairing listener : myListeners) {    listener.dispose();  }  myListeners.clear();  for (  CompositeListener listener : myCompositeListeners) {    listener.dispose();  }  myCompositeListeners.clear();}  }
class C{  public void destroy(){  for (  EnhancedBookmarkUIObserver observer : mUIObservers) {    observer.onDestroy();  }  assert mUIObservers.size() == 0;  if (mUndoController != null) {    mUndoController.destroy();    mUndoController=null;  }  mEnhancedBookmarksModel.removeObserver(mBookmarkModelObserver);  mEnhancedBookmarksModel.destroy();  mEnhancedBookmarksModel=null;  mLargeIconBridge.destroy();  mLargeIconBridge=null;}  }
class C{  protected List<String> validateConfig(Config config){  if (config.getMigrations().isEmpty()) {    return ImmutableList.of("At least one migration is required.");  }  return ImmutableList.of();}  }
class C{  @Override public void actionPerformed(ActionEvent e){  if (ACTION_START_RECORDING.equals(e.getActionCommand())) {    if (mSampler == null) {      mSampler=new Sampler();    }    mSampler.startSampling();    mRecordButton.setActionCommand(ACTION_STOP_RECORDING);    mRecordButton.setText("Stop Recording");  } else   if (ACTION_STOP_RECORDING.equals(e.getActionCommand())) {    mSampler.stopSampling();    mRecordButton.setActionCommand(ACTION_START_RECORDING);    mRecordButton.setText("Record");    setData(mSampler.getData());  } else   if (ACTION_SAVE_RECORDING.equals(e.getActionCommand())) {  } else   if (ACTION_LOAD_RECORDING.equals(e.getActionCommand())) {  } else   if (ACTION_THREAD_SELECTED.equals(e.getActionCommand())) {    int selected=mComboBox.getSelectedIndex();    if (selected >= 0 && selected < mComboBox.getItemCount()) {      String threadName=(String)mComboBox.getSelectedItem();      mtree=forest.get(threadName);      mChart.setHTree(mtree);      double start=mtree.getFirstChild().getStart();      double end=mtree.getLastChild().getEnd();      mDataRange.setMin(start);      mDataRange.setMax(end);      mSelectionRange.setMin(start);      mSelectionRange.setMax(end);      LongDataSeries series=new LongDataSeries();      RangedContinuousSeries rangedSeries=new RangedContinuousSeries("Threads",mDataRange,new Range(0.0,200.0),series);      Random r=new Random(System.currentTimeMillis());      for (int i=0; i < 100; i++) {        series.add((long)(start + (end - start) / 100 * i),(long)r.nextInt(100));      }      mLineChart.addLine(rangedSeries);      mScrollBar.setValues(0,mChart.getHeight(),0,mChart.getMaximumHeight());    }  }}  }
class C{  @Override public void applyDimensionBehaviour(){  wrapContent();}  }
class C{  AnnotationView viewForAnnotation(Annotation annotation){  return this.annotationToAnnotationViewMap.get(annotation);}  }
class C{  public XSModel toXSModel(){  return toXSModel(Constants.SCHEMA_VERSION_1_0);}  }
class C{  @Override protected XMLDocumentScanner createDocumentScanner(){  fNamespaceScanner=new XMLNSDocumentScannerImpl();  return fNamespaceScanner;}  }
class C{  public boolean isRmiProtocol(){  return StringUtils.equalsIgnoreCase(getProtocol(),RMI_PROTOCOL);}  }
class C{  public StandardDocumentComparator(double dGraphImportance){  GraphImportance=dGraphImportance;}  }
class C{  public static double distance1(Vector3D v1,Vector3D v2){  return v1.distance1(v2);}  }
class C{  public boolean isSkipRoot(){  if (skipRoot == null) {    return false;  } else {    return skipRoot;  }}  }
class C{  Client(Socket socket,String name,String clientIpAddress,Date accessTime){  this.dAccessTime=accessTime;  this.ticTacToc=new ClientGameInformation(Settings.sGameStringStyleTicTacToc);  this.catchMe=new ClientGameInformation(Settings.sGameStringStyleCatchMe);  this.meteor=new ClientGameInformation(Settings.sGameStringStyleMeteorGame);  this.pangPang=new ClientGameInformation(Settings.sGameStringStylePangPang);  this.sEnteredRoom=null;  this.clientName=name;  this.socket=socket;  this.nDestoryMeteor=Settings.ZEROINIT;  this.clientIpAddress=clientIpAddress;  this.queryDataSet=FXCollections.observableArrayList();  this.setGameStartSet(false);  this.setPlayToken(false);  this.setRename(false);  this.clientGameTag=Settings.ERRORCODE;  this.rnd=new Random();  this.nCatchmePlayCount=Settings.nCatchMeMAXClickCount;  executorServiceSending=Executors.newSingleThreadExecutor();  receive();  checkTheTime();}  }
class C{  @Override public void revertToDefaultValue(){  populateField(defaultValue);}  }
class C{  public static int calculateSampleSize(int srcWidth,int srcHeight,int dstWidth,int dstHeight){  final float srcAspect=(float)srcWidth / (float)srcHeight;  final float dstAspect=(float)dstWidth / (float)dstHeight;  if (srcAspect > dstAspect) {    return srcWidth / dstWidth;  } else {    return srcHeight / dstHeight;  }}  }
class C{  protected AbstractArea(ZoneName zoneName,int worldId,float minZ,float maxZ){  if (minZ > maxZ) {    throw new IllegalArgumentException("minZ(" + minZ + ") > maxZ("+ maxZ+ ")");  }  this.minZ=minZ;  this.maxZ=maxZ;  this.zoneName=zoneName;  this.worldId=worldId;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_HOUSING_OBJECT_USE(int objectNameId){  return new SM_SYSTEM_MESSAGE(1401257,calculateNameId(objectNameId));}  }
class C{  public VideoDeleteCommentQuery(VkApiClient client,UserActor actor,int commentId){  super(client,"video.deleteComment",OkResponse.class);  accessToken(actor.getAccessToken());  commentId(commentId);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DAY_CANNOT_SEND_MAIL(String value0){  return new SM_SYSTEM_MESSAGE(1400946,value0);}  }
class C{  public static final SM_SYSTEM_MESSAGE STR_ITEM_CANCELED(DescriptionId id){  return new SM_SYSTEM_MESSAGE(1300427,id);}  }
class C{  public Matrix arrayRightDivide(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] / B.A[i][j];    }  }  return X;}  }
class C{  public void resetPolicy(){  mPreferences.putString(PREF_LAST_RESPONSE,Integer.toString(Policy.RETRY));  setRetryUntil(DEFAULT_RETRY_UNTIL);  setMaxRetries(DEFAULT_MAX_RETRIES);  setRetryCount(Long.parseLong(DEFAULT_RETRY_COUNT));  setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP);  mPreferences.commit();}  }
class C{  protected AbstractPolynomialSolver(final double relativeAccuracy,final double absoluteAccuracy,final double functionValueAccuracy){  super(relativeAccuracy,absoluteAccuracy,functionValueAccuracy);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  ClusterViewer viewer=getViewer();  np.matchIgnoreCase("select=");  String target=np.getWordMatchesIgnoringCase("all none invert");  if (target.equalsIgnoreCase("all"))   viewer.selectAll(true); else   if (target.equalsIgnoreCase("invert"))   viewer.selectInverted(); else   viewer.selectAll(false);  np.matchIgnoreCase(";");}  }
class C{  public static long copyFile(File input,OutputStream output) throws IOException {  final FileInputStream fis=new FileInputStream(input);  try {    return IOUtils.copyLarge(fis,output);  }  finally {    fis.close();  }}  }
class C{  public static byte[] toByteArray(Writable... writables){  final DataOutputBuffer out=new DataOutputBuffer();  try {    for (    Writable w : writables) {      w.write(out);    }    out.close();  } catch (  IOException e) {    throw new RuntimeException("Fail to convert writables to a byte array",e);  }  return out.getData();}  }
class C{  public Bundler putAll(Bundle bundle){  this.bundle.putAll(bundle);  return this;}  }
class C{  public void updateView(String what){  isUpToDate=false;  commandManager.updateEnableState();  isUpToDate=true;}  }
class C{  @Override public void requestCollections(Context c,int page,boolean refresh){  if (!model.isRefreshing() && !model.isLoading()) {    if (refresh) {      model.setRefreshing(true);    } else {      model.setLoading(true);    }    page=refresh ? 1 : page + 1;    listener=new OnRequestCollectionsListener(c,page,refresh);    model.getService().requestUserCollections((User)model.getRequestKey(),page,Mysplash.DEFAULT_PER_PAGE,listener);  }}  }
class C{  public final synchronized String resolvePublic(String publicId,String systemId) throws IOException {  if (fCatalogsChanged) {    parseCatalogs();    fCatalogsChanged=false;  }  return (fCatalog != null) ? fCatalog.resolvePublic(publicId,systemId) : null;}  }
class C{  static public String doubleToString(double d){  if (Double.isInfinite(d) || Double.isNaN(d)) {    return "null";  }  String s=Double.toString(d);  if (s.indexOf('.') > 0 && s.indexOf('e') < 0 && s.indexOf('E') < 0) {    while (s.endsWith("0")) {      s=s.substring(0,s.length() - 1);    }    if (s.endsWith(".")) {      s=s.substring(0,s.length() - 1);    }  }  return s;}  }
class C{  public InvalidDescriptionException(final String message){  super(message);}  }
class C{  public Author toEntity(AuthorDTO dto){  return toEntity(dto,1);}  }
class C{  public static void moveFile(File srcFile,File destFile) throws IOException {  if (srcFile == null) {    throw new NullPointerException("Source must not be null");  }  if (destFile == null) {    throw new NullPointerException("Destination must not be null");  }  if (!srcFile.exists()) {    throw new FileNotFoundException("Source '" + srcFile + "' does not exist");  }  if (srcFile.isDirectory()) {    throw new IOException("Source '" + srcFile + "' is a directory");  }  if (destFile.exists()) {    throw new FileExistsException("Destination '" + destFile + "' already exists");  }  if (destFile.isDirectory()) {    throw new IOException("Destination '" + destFile + "' is a directory");  }  boolean rename=srcFile.renameTo(destFile);  if (!rename) {    copyFile(srcFile,destFile);    if (!srcFile.delete()) {      FileUtils.deleteQuietly(destFile);      throw new IOException("Failed to delete original file '" + srcFile + "' after copy to '"+ destFile+ "'");    }  }}  }
class C{  protected Object entryInitialFlow(){  return emptySet.clone();}  }
class C{  protected Observable<PreResponse> handlePreResponseWithError(PreResponse preResponse,UriInfo uriInfo,Optional<PaginationParameters> paginationParameters){  ResponseContext responseContext=preResponse.getResponseContext();  if (responseContext.containsKey(ResponseContextKeys.STATUS.getName())) {    ResponseException responseException=new ResponseException((Integer)responseContext.get(ResponseContextKeys.STATUS.getName()),(String)responseContext.get(ResponseContextKeys.ERROR_MESSAGE.getName()),(String)responseContext.get(ResponseContextKeys.ERROR_MESSAGE.getName()),null,null,writer);    return Observable.error(responseException);  }  return paginationParameters.map(null).map(null).map(null).orElse(Observable.just(preResponse));}  }
class C{  public V put(short key,V value){  int index=insertionIndex(key);  return doPut(key,value,index);}  }
class C{  public static int calculateMagicalResistRate(Creature attacker,Creature attacked,int accMod){  if (attacked.getObserveController().checkAttackStatus(AttackStatus.RESIST)) {    return 1000;  }  int attackerLevel=attacker.getLevel();  int targetLevel=attacked.getLevel();  int resistRate=attacked.getGameStats().getMResist().getCurrent() - attacker.getGameStats().getMainHandMAccuracy().getCurrent() - attacker.getGameStats().getStat(StatEnum.PVP_MAGICAL_HIT_ACCURACY,0).getCurrent()- accMod;  if ((targetLevel - attackerLevel) > 2) {    resistRate+=(targetLevel - attackerLevel - 2) * 100;  }  if (resistRate <= 0) {    resistRate=1;  }  if (resistRate > 500) {    resistRate=500;  }  return resistRate;}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  private void optimizeTasksLocked(){  ArrayList<ActivityManager.RecentTaskInfo> recentTask=new ArrayList<>(mAM.getRecentTasks(Integer.MAX_VALUE,ActivityManager.RECENT_WITH_EXCLUDED | ActivityManager.RECENT_IGNORE_UNAVAILABLE));  int N=mHistory.size();  while (N-- > 0) {    TaskRecord task=mHistory.valueAt(N);    ListIterator<ActivityManager.RecentTaskInfo> iterator=recentTask.listIterator();    boolean taskAlive=false;    while (iterator.hasNext()) {      ActivityManager.RecentTaskInfo info=iterator.next();      if (info.id == task.taskId) {        taskAlive=true;        iterator.remove();        break;      }    }    if (!taskAlive) {      mHistory.removeAt(N);    }  }}  }
class C{  private static void resolveSelfAssignmentExpression(SelfAssignmentExpression objSubjectExpression,@Nullable Function objScope,PhpIndex objIndex,HashSet<String> objTypesSet){  storeAsTypeWithSignaturesImport(objSubjectExpression.getType().toString(),objScope,objIndex,objTypesSet);}  }
class C{  public static String generateKey(String imageUri,ImageSize targetSize){  return new StringBuilder(imageUri).append(URI_AND_SIZE_SEPARATOR).append(targetSize.getWidth()).append(WIDTH_AND_HEIGHT_SEPARATOR).append(targetSize.getHeight()).toString();}  }
class C{  public static void main(String[] args){  Locale chs=new Locale("zh","CN");  for (int i=1; i < 152; i++) {    try {      System.out.println(String.format(chs,"Pokedex# %d is %s in %s",i,PokeDictionary.translateName(PokeDictionary.getDisplayName(i,Locale.ENGLISH),chs),chs.getDisplayName(chs)));    } catch (    MissingResourceException e) {      Log.e("Main","Unable to find Pokemon name with given Pokedex: ",e);    }  }}  }
class C{  private boolean checkMirrorEnabled(){  boolean isMirrorEnabled=false;  if (_spaceURL != null) {    isMirrorEnabled=Boolean.parseBoolean(_spaceURL.getProperty(SpaceURL.MIRROR,Mirror.MIRROR_SERVICE_ENABLED_DEFAULT));  }  Element mirrorService=getFirstMatchElement(m_rootDoc.getDocumentElement(),MIRROR_SERVICE_TAG);  if (isMirrorEnabled && mirrorService == null) {    throw new IllegalArgumentException(new ClusterConfigurationException("Mirror service is set in the Space URL, " + "but the cluster schema used does not support a mirror service."));  }  if (mirrorService != null) {    isMirrorEnabled|=JSpaceUtilities.parseBooleanTag(ENABLED_TAG,getNodeValueIfExists(mirrorService,ENABLED_TAG));  }  return isMirrorEnabled;}  }
class C{  public boolean using(){  return mUsing;}  }
class C{  public boolean isNested(){  return (depth() > 1);}  }
class C{  public static double trimToRange(double untrimmedValue,double min,double max){  return Math.max(min,Math.min(max,untrimmedValue));}  }
class C{  @Override public void resetDocumentLocator(String publicid,String systemid){  thePublicid=publicid;  theSystemid=systemid;  theLastLine=theLastColumn=theCurrentLine=theCurrentColumn=0;}  }
class C{  public static void main(String sArgs[]){  DocumentNGramGraph g1=new DocumentNGramGraph();  g1.setDataString("This is a serious test...");  DocumentNGramGraph g2=new DocumentNGramGraph(1,3,3);  g2.setDataString("This is a test...");  DocumentNGramGraph g3=new DocumentNGramGraph(1,3,3);  g3.setDataString("This is serious for a test.");  NGramGraphEuclidianComparator c=new NGramGraphEuclidianComparator();  System.err.println("Value Similarity of g1, g2 to g3:");  System.err.println(c.getSimilarityBetween(g1,g3).ValueSimilarity);  System.err.println(c.getSimilarityBetween(g2,g3).ValueSimilarity);  System.err.println("Euclidian Similarity of g1, g2 to g3:");  System.err.println(c.getEuclidianSimilarityBetween(g1,g3,false).getOverallSimilarity());  System.err.println(c.getEuclidianSimilarityBetween(g2,g3,false).getOverallSimilarity());  System.err.println("Euclidian Distance of g1, g2 to g3:");  System.err.println(c.getEuclidianSimilarityBetween(g1,g3,false).asDistance());  System.err.println(c.getEuclidianSimilarityBetween(g2,g3,false).asDistance());  System.err.println("Self-Euclidian Similarity of g1:");  System.err.println(c.getEuclidianSimilarityBetween(g1,g1,false).getOverallSimilarity());  System.err.println(c.getEuclidianSimilarityBetween(g1,g1,false).asDistance());}  }
class C{  static boolean contains(Object[] arr,int i,Object obj){  while (--i >= 0) {    if (obj.equals(arr[i])) {      return true;    }  }  return false;}  }
class C{  public boolean isApplicable(){  return getViewer().getTabbedIndex() == ClusterViewer.PCoA_TAB_INDEX;}  }
class C{  private void load(ByteBuffer bb) throws BufferUnderflowException, MaryConfigurationException {  int numIdx=bb.getInt();  idxInterval=bb.getInt();  if (idxInterval <= 0) {    throw new MaryConfigurationException("read negative index interval -- file seems corrupt");  }  bytePtrs=new long[numIdx];  timePtrs=new long[numIdx];  for (int i=0; i < numIdx; i++) {    bytePtrs[i]=bb.getLong();    timePtrs[i]=bb.getLong();    if (i > 0) {      if (bytePtrs[i] < bytePtrs[i - 1] || timePtrs[i] < timePtrs[i - 1]) {        throw new MaryConfigurationException("File seems corrupt: Pointer positions in index fields are not strictly monotonously rising");      }    }  }  bb.getLong();  bb.getLong();}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ResourceDeclaration fullCopy(){  ResourceDeclaration tree=(ResourceDeclaration)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private final void activateObjects(){  for (  VisibleObject visObject : objects.values()) {    if (visObject instanceof Creature) {      Creature creature=(Creature)visObject;      creature.getAi2().onGeneralEvent(AIEventType.ACTIVATE);    }  }}  }
class C{  @Override public String toString(){  return "Segmenter";}  }
class C{  public Configured(Configuration conf){  setConf(conf);}  }
class C{  public static String toGbk(String str){  try {    return new String(str.getBytes("utf-8"),"gbk");  } catch (  UnsupportedEncodingException e) {    LogUtils.warn(e.getMessage());    return str;  }}  }
class C{  protected void onHostViewInitialized(T host){}  }
class C{  public static void showCode(Instruction inst,int startinst,cp_info constant_pool[]){  int i;  Instruction j=inst;  String pref;  i=startinst;  while (j != null) {    if (i > 999)     pref=""; else     if (i > 99)     pref=" "; else     if (i > 9)     pref="  "; else     pref="   ";    G.v().out.print(pref + i + ": ");    G.v().out.println(j.toString(constant_pool));    i=j.nextOffset(i);    j=j.next;  }}  }
class C{  public DatabaseGetRegionsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public WKTDetails(WKTUpdateInterface parentObj,FunctionNameInterface functionManager){  super(WKTDetails.class,functionManager);  this.parentObj=parentObj;  createUI();}  }
class C{  public ConceptualGraph(){}  }
class C{  public void close(){  try {    connection.close();  } catch (  Exception e) {    ;  }}  }
class C{  public void handleDecode(Result result,Bitmap barcode){  inactivityTimer.onActivity();  playBeepSoundAndVibrate();  String resultString=result.getText();  if (resultString.equals("")) {    Toast.makeText(CaptureActivity.this,"Scan failed!",Toast.LENGTH_SHORT).show();  } else {    Intent resultIntent=new Intent();    Bundle bundle=new Bundle();    bundle.putString("result",resultString);    resultIntent.putExtras(bundle);    this.setResult(RESULT_OK,resultIntent);  }  CaptureActivity.this.finish();}  }
class C{  public static <K,V>HashMap<K,V> hashMap(int initialCapacity){  return new HashMap<K,V>(initialCapacity);}  }
class C{  public static boolean isFifo(int mod){  return Modifiers.contains(mod,FIFO);}  }
class C{  public boolean isValidRow(int row){  return m_rows.isValidRow(row);}  }
class C{  private void configureLoggers(String filename,List<String> loggers){  String file=getLogFile(filename);  RollingFileAppender appender=getRollingFileAppender(file);  for (  String loggerName : loggers) {    Logger logger=Logger.getRootLogger().getLoggerRepository().getLogger(loggerName);    logger.addAppender(appender);    log.info("Added logger: " + loggerName + " using file: "+ file);  }}  }
class C{  public int decrement(int val){  if (val < 0) {    return increment(-val);  }  lock.lock();  int dif=value - val;  if (dif >= 0) {    value-=val;  } else {    value=Integer.MAX_VALUE + (dif + 1);  }  int newValue=value;  lock.unlock();  return newValue;}  }
class C{  private CropImageOptions(Parcel in){  cropShape=CropImageView.CropShape.values()[in.readInt()];  snapRadius=in.readFloat();  touchRadius=in.readFloat();  guidelines=CropImageView.Guidelines.values()[in.readInt()];  scaleType=CropImageView.ScaleType.values()[in.readInt()];  showCropOverlay=in.readByte() != 0;  showProgressBar=in.readByte() != 0;  autoZoomEnabled=in.readByte() != 0;  maxZoom=in.readInt();  initialCropWindowPaddingRatio=in.readFloat();  fixAspectRatio=in.readByte() != 0;  aspectRatioX=in.readInt();  aspectRatioY=in.readInt();  borderLineThickness=in.readFloat();  borderLineColor=in.readInt();  borderCornerThickness=in.readFloat();  borderCornerOffset=in.readFloat();  borderCornerLength=in.readFloat();  borderCornerColor=in.readInt();  guidelinesThickness=in.readFloat();  guidelinesColor=in.readInt();  backgroundColor=in.readInt();  minCropWindowWidth=in.readInt();  minCropWindowHeight=in.readInt();  minCropResultWidth=in.readInt();  minCropResultHeight=in.readInt();  maxCropResultWidth=in.readInt();  maxCropResultHeight=in.readInt();  activityTitle=in.readString();  activityMenuIconColor=in.readInt();  outputUri=in.readParcelable(Uri.class.getClassLoader());  outputCompressFormat=Bitmap.CompressFormat.valueOf(in.readString());  outputCompressQuality=in.readInt();  outputRequestWidth=in.readInt();  outputRequestHeight=in.readInt();  noOutputImage=in.readByte() != 0;  initialCropWindowRectangle=in.readParcelable(Rect.class.getClassLoader());  initialRotation=in.readInt();  allowRotation=in.readByte() != 0;  allowCounterRotation=in.readByte() != 0;  rotationDegrees=in.readInt();}  }
class C{  protected WallGetCommentsQueryWithExtended extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  public static Map<String,SLDDataInterface> readLayers(String filename,SLDOutputFormatEnum outputFormat){  if (filename == null) {    return null;  }  File intermediateFile=new File(filename);  if (!intermediateFile.exists()) {    return null;  }  MXDParser parser=new MXDParser();  MXDInfo mxdInfo=new MXDInfo();  mxdInfo.setIntermediateFile(intermediateFile);  JsonObject mxdJSON=convertFileToJSON(filename);  String mxdFilename="";  JsonElement mxdFilenameJson=mxdJSON.get("mxd");  if (mxdFilenameJson != null) {    mxdFilename=mxdFilenameJson.getAsString();    mxdInfo.setMxdFilename(mxdFilename);  }  File f=new File(mxdFilename);  String mxdName=f.getName();  int pos=mxdName.lastIndexOf("\\");  if (pos > 0) {    mxdName=mxdName.substring(pos + 1);  }  mxdInfo.setMxdName(mxdName);  Map<String,SLDDataInterface> layerMap=new HashMap<String,SLDDataInterface>();  JsonArray layerList=mxdJSON.getAsJsonArray("layers");  for (int index=0; index < layerList.size(); index++) {    JsonObject layer=(JsonObject)layerList.get(index);    JsonElement layerNameElement=layer.get("name");    if (layerNameElement != null) {      String layerName=layerNameElement.getAsString();      SLDDataInterface sldData=parser.importLayer(layer,outputFormat);      layerMap.put(layerName,sldData);    }  }  return layerMap;}  }
class C{  public boolean all_reachable(){  return soot.PhaseOptions.getBoolean(options,"all-reachable");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_ROOM_BAN_MEMBER_BANNED(String value0){  return new SM_SYSTEM_MESSAGE(1300864,value0);}  }
class C{  public Builder inertiaMaxSpeed(Number inertiaMaxSpeed){  this.inertiaMaxSpeed=inertiaMaxSpeed;  return this;}  }
class C{  public Bindings add(String property,JList list){  registerPropertyChangeListener(list);  return add(new JListBinding(property,list));}  }
class C{  public FieldVector3D<T> applyInverseTo(final Vector3D u){  final double x=u.getX();  final double y=u.getY();  final double z=u.getZ();  final T s=q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));  final T m0=q0.negate();  return new FieldVector3D<T>(m0.multiply(m0.multiply(x).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x),m0.multiply(m0.multiply(y).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y),m0.multiply(m0.multiply(z).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z));}  }
class C{  public void clearAllConstraints(){  for (  ConstraintWidget widget : getWidgets()) {    widget.resetAllConstraints();  }  mSelection.clear();  mSelection.setSelectedAnchor(null);}  }
class C{  private void processBE(final char ch[],int offset,final int count){  int curPos=0;  for (int i=0; i < count; ++i) {    final int b0=fBuffer[curPos++] & 0xff;    final int b1=fBuffer[curPos++] & 0xff;    ch[offset++]=(char)((b0 << 8) | b1);  }}  }
class C{  public SharedIteratorSpaceDataSourceDecorator(SpaceDataSource spaceDataSource,long timeToLive){  _spaceDataSource=spaceDataSource;  _timeToLive=timeToLive;  _queryToSources=new ConcurrentHashMap<DataSourceSQLQuery,SharedDataIteratorSource<Object>>();  _sourcesToQuery=new ConcurrentHashMap<SharedDataIteratorSource<Object>,DataSourceSQLQuery>();}  }
class C{  public boolean isFinished(){  return this.request == null || request.isDone();}  }
class C{  public static boolean showEnhancedBookmarkIfEnabled(Activity activity){  if (!isEnhancedBookmarkEnabled()) {    return false;  }  if (DeviceFormFactor.isTablet(activity)) {    openBookmark(activity,UrlConstants.BOOKMARKS_URL);  } else {    activity.startActivity(new Intent(activity,EnhancedBookmarkActivity.class));  }  return true;}  }
class C{  public boolean populate(Map<String,List<StyleWrapper>> styleMap,List<GeoServerLayer> layerList){  dataModel.populate(styleMap,layerList);  dataModel.fireTableDataChanged();  geoServerStyleTree.initialise();  String geoserverName="Unknown";  if ((layerList != null) && !layerList.isEmpty()) {    geoserverName=layerList.get(0).getConnection().getConnectionName();  }  geoServerStyleTree.populate(geoserverName,styleMap);  setVisible(true);  return okButtonPressed;}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines) throws IOException {  writeLines(file,encoding,lines,null,false);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_PARTY_DODGE(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1220221,value0,value1);}  }
class C{  public boolean isEnabled(){  return mEnabled;}  }
class C{  public Iterator iterator(){  return new Iterator();}  }
class C{  private Patterns(){}  }
class C{  F0ModelTerm(String feature,float start,float mid,float end,String type){  path=new PathExtractorImpl(feature,true);  this.start=start;  this.mid=mid;  this.end=end;  this.type=type;}  }
class C{  public DescriptiveStatistics(int size) throws MathIllegalArgumentException {  this(size,false,null);}  }
class C{  public static void createQuerySchema(String schemaFile,String querySchemaName,String dataSchemaNameInput,String selectorNameInput,List<String> elementNames,List<String> filterNames,String filter) throws IOException {  createQuerySchema(schemaFile,querySchemaName,dataSchemaNameInput,selectorNameInput,elementNames,filterNames,filter,true,null,false,null);}  }
class C{  public final boolean hasNext(){  while (cur < lastNumber) {    if (numberToObj[cur] != null)     break;    ++cur;  }  return cur < lastNumber;}  }
class C{  @Override public void configure(Map<String,?> configs,boolean isKey){}  }
class C{  @Override public boolean checkCanSwipeBack(int dir){  return view.checkCanSwipeBack(dir);}  }
class C{  public NakagamiDistribution(double mu,double omega,double inverseAbsoluteAccuracy) throws MathIllegalArgumentException {  super(inverseAbsoluteAccuracy);  if (mu < 0.5) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL,mu,0.5);  }  if (omega <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_POSITIVE_SCALE,omega);  }  this.mu=mu;  this.omega=omega;}  }
class C{  public void printCenterTable(ScoutWidget[] list){  System.out.println("----------------- BASE TABLE --------------------");  final int SIZE=10;  String padd=new String(new char[SIZE]).replace('\0',' ');  System.out.print("  ");  for (int i=0; i < len; i++) {    String dbg="[" + i + "] "+ list[i]+ "-------------------------";    dbg=dbg.substring(0,20);    System.out.print(dbg + ((i == len - 1) ? "\n" : ""));  }  String str="[";  for (int con=0; con < len * 2; con++) {    int opposite=con & 0x1;    str+=(con / 2 + ((opposite == 0) ? "->" : "<-") + "           ").substring(0,10);  }  System.out.println("  " + str);  for (int i=1; i < len; i++) {    for (int dir=0; dir < mBinaryProbability[i].length; dir++) {      String tab="";      for (int k=0; k < mBinaryProbability[i][dir].length; k++) {        tab+=Utils.toS(mBinaryProbability[i][dir][k]) + "\n  ";      }      System.out.println(Direction.toString(dir) + " " + tab);    }  }}  }
class C{  public static AuthToken load(String id){  return Helper.load(id,AuthToken.class);}  }
class C{  public void onDrawerClosed(View view){  super.onDrawerClosed(view);  getSupportActionBar().setTitle(getString(R.string.app_name));}  }
class C{  public static int update(String where,Object[] args,V sets,Class<? extends Bean> t){  Table mapping=(Table)t.getAnnotation(Table.class);  if (mapping == null) {    if (log.isErrorEnabled())     log.error("mapping missed in [" + t + "] declaretion");    return -1;  }  if (!X.isEmpty(mapping.name())) {    return updateTable(mapping.name(),where,args,sets);  }  return -1;}  }
class C{  public List<Map<String,Object>> filter(List<Map<String,Object>> sheet,String key,Object value){  List<Map<String,Object>> result=new ArrayList<Map<String,Object>>();  Iterator<Map<String,Object>> iterator=sheet.iterator();  while (iterator.hasNext()) {    Map<String,Object> row=iterator.next();    if (row.get(key) != null && (row.get(key).toString().toLowerCase()).contains(value.toString().toLowerCase())) {      result.add(row);    }  }  return result;}  }
class C{  public void register(String key,Item... values){  for (  Item value : values) {    register(key,value);  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("print;");  System.err.println("Print command: not implemented");}  }
