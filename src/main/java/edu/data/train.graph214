class C{  public List<ParkRideParking> findParkRidesInEnvelope(Envelope env){  List<ParkRideParking> parkingRides=new ArrayList<>();  if (parkRideLocationsMap != null) {    EdgeStore.Edge e=edgeStore.getCursor();    VertexStore.Vertex v=vertexStore.getCursor();    TIntSet nearbyEdges=spatialIndex.query(VertexStore.envelopeToFixed(env));    nearbyEdges.forEach(null);  }  return parkingRides;}  }
class C{  private void activity(){  connectionCheckedCount=0;}  }
class C{  public static <V>boolean isEmpty(V[] sourceArray){  return (sourceArray == null || sourceArray.length == 0);}  }
class C{  private int calculatePreferredWrapPosition(@NotNull Editor editor,@NotNull CharSequence text,int tabSize,int spaceSize,int startLineOffset,int endLineOffset,int targetRangeEndOffset){  boolean hasTabs=false;  boolean canOptimize=true;  boolean hasNonSpaceSymbols=false;  loop:   for (int i=startLineOffset; i < Math.min(endLineOffset,targetRangeEndOffset); i++) {    char c=text.charAt(i);switch (c) {case '\t':{        hasTabs=true;        if (hasNonSpaceSymbols) {          canOptimize=false;          break loop;        }      }case ' ':    break;default :  hasNonSpaceSymbols=true;}}if (!hasTabs) {return wrapPositionForTextWithoutTabs(startLineOffset,endLineOffset,targetRangeEndOffset);} else if (canOptimize) {return wrapPositionForTabbedTextWithOptimization(text,tabSize,startLineOffset,endLineOffset,targetRangeEndOffset);} else {return wrapPositionForTabbedTextWithoutOptimization(editor,text,spaceSize,startLineOffset,endLineOffset,targetRangeEndOffset);}}  }
class C{  public Field noMatchSize(Integer noMatchSize){  this.noMatchSize=noMatchSize;  return this;}  }
class C{  public NetInfo netInfo(){  return _myNetInfo;}  }
class C{  public PlaceResponse pickBestResponse(Set<PlaceResponse> responses){  if (responses == null || responses.isEmpty()) {    return null;  }  return scoreOrdering.reverse().sortedCopy(responses).get(0);}  }
class C{  public RpfUtil(float ulat,float llon,float llat,float rlon){  this(null,ulat,llon,llat,rlon,0f,SCALE_EQUALS,BOUNDED);}  }
class C{  @Override public String toString(){  return this.serialDate.toString();}  }
class C{  public String next(int n) throws JSONException {  int i=this.myIndex;  int j=i + n;  if (j >= this.mySource.length()) {    throw syntaxError("Substring bounds error");  }  this.myIndex+=n;  return this.mySource.substring(i,j);}  }
class C{  public CActionShowSettingsDialog(final JFrame parent){  super("Settings");  m_parent=Preconditions.checkNotNull(parent,"IE01848: Parent argument can not be null");  putValue(MNEMONIC_KEY,(int)"HK_MENU_SHOW_SETTINGS_DIALOG".charAt(0));}  }
class C{  public void addTotalResultCountCookie(WorkbenchRequest req,HttpServletResponse resp,int value){  addCookie(req,resp,"total_result_count",String.valueOf(value));}  }
class C{  public StringSet findTierPoliciesForStorageGroup(StorageSystem storage,String storageGroup) throws Exception {  CloseableIterator<CIMInstance> cimInstanceItr;  StringSet policies=new StringSet();  CIMObjectPath storageGroupPath=_cimPath.getStorageGroupObjectPath(storageGroup,storage);  if (this.isCascadedSG(storage,storageGroupPath)) {    cimInstanceItr=getAssociatorInstances(storage,storageGroupPath,null,SmisCommandHelper.MASKING_GROUP_TYPE.SE_DeviceMaskingGroup.name(),null,null,PS_ELEMENT_NAME);    while (cimInstanceItr.hasNext()) {      CIMInstance childGroupInstance=cimInstanceItr.next();      String returnedgroupName=CIMPropertyFactory.getPropertyValue(childGroupInstance,CP_ELEMENT_NAME);      policies.addAll(findTierPoliciesForSingleStorageGroup(storage,returnedgroupName));    }  } else {    policies.addAll(findTierPoliciesForSingleStorageGroup(storage,storageGroup));  }  return policies;}  }
class C{  private void hidePublicShare(){  getShareViaLinkSwitch().setVisibility(View.GONE);  getExpirationDateSection().setVisibility(View.GONE);  getPasswordSection().setVisibility(View.GONE);  getGetLinkButton().setVisibility(View.GONE);}  }
class C{  public static int hash(Object... values){  if (values == null)   return 0;  int result=1;  for (  Object element : values)   result=31 * result + hashCode(element);  return result;}  }
class C{  @Override public String toString(){  return getClass().getSimpleName() + "()";}  }
class C{  @Override public String toString(){  return super.toString() + "[type=" + type+ "][message="+ message+ "]";}  }
class C{  private void pop(char c) throws JSONException {  if (this.top <= 0) {    throw new JSONException("Nesting error.");  }  char m=this.stack[this.top - 1] == null ? 'a' : 'k';  if (m != c) {    throw new JSONException("Nesting error.");  }  this.top-=1;  this.mode=this.top == 0 ? 'd' : this.stack[this.top - 1] == null ? 'a' : 'k';}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void advanceProcessingTime(TimerCallback timerCallback,Instant newProcessingTime) throws Exception {  checkState(!newProcessingTime.isBefore(processingTime),"Cannot move processing time backwards from %s to %s",processingTime,newProcessingTime);  WindowTracing.trace("TestTimerInternals.advanceProcessingTime: from {} to {}",processingTime,newProcessingTime);  processingTime=newProcessingTime;  advanceAndFire(timerCallback,newProcessingTime,TimeDomain.PROCESSING_TIME);}  }
class C{  public void removeStrategy(final WeightingStrategy strategy){  strategies_.remove(strategy);}  }
class C{  public Iterator items(String group){  return items(group,(Predicate)null);}  }
class C{  private static String[] sort(String[] inputs,int k){  if (k == inputs.length) {    return inputs;  }  int minDex=indexOfSmallest(inputs,k);  swap(inputs,k,minDex);  return sort(inputs,k + 1);}  }
class C{  public DemodulatedAudioFilterModule(int pass,int stop){  assert (stop > pass);  mBandPassFilter=new RealFIRFilter_RB_RB(FilterFactory.getLowPass(48000,pass,stop,60,WindowType.HANNING,true),1.0f);  mDCFilter.setListener(mBandPassFilter);}  }
class C{  public void clear(){  count=0;}  }
class C{  public void body(String namespace,String name,String text) throws Exception {}  }
class C{  public boolean hasEntries(){  return !fEntries.isEmpty();}  }
class C{  private boolean isLegalClassName(String className){  int lastBracket=className.lastIndexOf("]");  if (lastBracket != -1 && lastBracket != className.length() - 1) {    return false;  }  className=className.replaceAll("\\[\\]","");  String[] identifiers=className.split("(\\.)");  for (  String identifier : identifiers) {    if (!isJavaIdentifier(identifier)) {      return false;    }  }  return true;}  }
class C{  @Deprecated public static void main(String[] args){  String[] arguments;  if (args.length != 0) {    arguments=args;  } else {    arguments=ARGUMENTS;  }  String outputdirectory=DaFileUtil.checkFileEnding(arguments[0]);  log.info("output-directory: " + outputdirectory);  DaFileUtil.checkAndMaybeCreateDirectory(outputdirectory,true);  log.info("creating network.");  Network net=createTestGridNetwork(6,11,1000.);  new NetworkWriter(net).write(outputdirectory + "gridNetwork.xml.gz");  log.info("Done (creating network).");  log.info("creating population.");  Population p=createPopulation(relations,net);  new PopulationWriter(p,net).write(outputdirectory + "gridNEtworkPopulation.xml.gz");  log.info("done (creating population).");  log.info("finished.");}  }
class C{  @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:26.827 -0500",hash_original_method="3CA361324F026F8C9B0AA94A864ACDD9",hash_generated_method="409DC5F4E827A6799350876AEA63C2E8") public int size(){  return size;}  }
class C{  @Override public void alignLayoutMenuOption(final int mode){  if (GUI.debugFX) {    System.out.println("alignLayoutMenuOption not yet implemented for JavaFX in JavaFXButtons.java");  }  int i=1;  for (  CheckMenuItem item : layoutGroup) {    item.setSelected(i == mode);    i++;  }}  }
class C{  public AbstractExternalTransition(State<S,E> source,State<S,E> target,Collection<Action<S,E>> actions,E event,Guard<S,E> guard,Trigger<S,E> trigger,SecurityRule securityRule){  super(source,target,actions,event,TransitionKind.EXTERNAL,guard,trigger,securityRule);}  }
class C{  public static void showInfoNotification(Project project,String text){  showNotification(project,MessageType.INFO,text);}  }
class C{  public PointCloud3D applyMatrix(Matrix4x4 m){  for (  Vec3D p : points) {    p.set(m.applyTo(p));  }  updateBounds();  return this;}  }
class C{  public void testGetTotalBytesWritten() throws Exception {  final int BUFFER_SIZE=4 * 1024;  ByteArrayOutputStream outputStream=new ByteArrayOutputStream(BUFFER_SIZE);  CodedOutputStream codedStream=CodedOutputStream.newInstance(outputStream);  byte[] value="abcde".getBytes("UTF-8");  for (int i=0; i < 1024; ++i) {    codedStream.writeRawBytes(value,0,value.length);  }  assertTrue(codedStream.getTotalBytesWritten() > BUFFER_SIZE);  assertEquals(value.length * 1024,codedStream.getTotalBytesWritten());}  }
class C{  public int unpad(byte[] in,int off,int len){  if ((in == null) || (len == 0)) {    return 0;  }  byte lastByte=in[off + len - 1];  int padValue=(int)lastByte & 0x0ff;  if ((padValue < 0x01) || (padValue > blockSize)) {    return -1;  }  int start=off + len - ((int)lastByte & 0x0ff);  if (start < off) {    return -1;  }  return start;}  }
class C{  public static int deserializeInt(byte[] buffer,MutableInt offset){  int offsetInt=offset.intValue();  int val=((((int)buffer[0 + offsetInt]) & 0xFF) << 24) | ((((int)buffer[1 + offsetInt]) & 0xFF) << 16) | ((((int)buffer[2 + offsetInt]) & 0xFF) << 8)| (((int)buffer[3 + offsetInt]) & 0xFF);  offset.add(Type.INTEGER.getByteSize());  return val;}  }
class C{  public static CronScheduleBuilder cronScheduleNonvalidatedExpression(String cronExpression) throws ParseException {  return cronSchedule(new CronExpression(cronExpression));}  }
class C{  private static void shutDownMySQLAbandonedConnectionCleanupThread(ClassLoader classLoader){  try {    Class<?> mysqlCleanupThreadClass;    try {      mysqlCleanupThreadClass=classLoader.loadClass("com.mysql.jdbc.AbandonedConnectionCleanupThread");    } catch (    ClassNotFoundException e) {      LOG.trace("Failed to load MySQL abandoned connection cleanup thread class. Presuming DB App is " + "not being run with MySQL and ignoring",e);      return;    }    Method shutdownMethod=mysqlCleanupThreadClass.getMethod("shutdown");    shutdownMethod.invoke(null);    LOG.debug("Successfully shutdown MySQL connection cleanup thread.");  } catch (  Throwable e) {    LOG.warn("Failed to shutdown MySQL connection cleanup thread. Ignoring.",e);  }}  }
class C{  public static boolean zoomToAddress(final ZyGraph graph,final IAddress address,final INaviModule module,final boolean animate){  Preconditions.checkNotNull(graph,"IE02105: Graph argument can not be null");  Preconditions.checkNotNull(address,"IE02106: Address argument can not be null");  final InternalNodeCallBack callBack=new InternalNodeCallBack(module,graph,address,animate);  graph.iterate(callBack);  return callBack.nodeFound();}  }
class C{  public static boolean isLightColor(final int color,final float factor){  final int r=Color.red(color);  final int g=Color.green(color);  final int b=Color.blue(color);  final double threshold=0.21 * r + 0.72 * g + 0.07 * b;  return threshold > (RGB_TOTAL_COLORS * factor);}  }
class C{  public static Object[] resizeIfNeeded(Object[] arr,int minSize,boolean doPowerOf2){  if (arr.length >= minSize)   return arr;  if (doPowerOf2)   minSize=MathUtil.nextPowerOf2(minSize);  Object[] result=new Object[minSize];  System.arraycopy(arr,0,result,0,arr.length);  return result;}  }
class C{  private void initSizeMeasureIconHeight(){  final Bitmap measure=BitmapFactory.decodeResource(getResources(),com.android.systemui.R.drawable.stat_sys_wifi_signal_4_fully);  final int x=measure.getWidth() / 2;  mCircleSize=0;  for (int y=0; y < measure.getHeight(); y++) {    int alpha=Color.alpha(measure.getPixel(x,y));    if (alpha > 5) {      mCircleSize++;    }  }}  }
class C{  public void addActivity(GeoActivity a){  activityList.add(a);}  }
class C{  public static UnitValue[] parseInsets(String s,boolean acceptPanel){  if (s.length() == 0 || s.equals("dialog") || s.equals("panel")) {    if (acceptPanel == false) {      throw new IllegalArgumentException("Insets now allowed: " + s + "\n");    }    boolean isPanel=s.startsWith("p");    UnitValue[] ins=new UnitValue[4];    for (int j=0; j < 4; j++) {      ins[j]=isPanel ? PlatformDefaults.getPanelInsets(j) : PlatformDefaults.getDialogInsets(j);    }    return ins;  } else {    String[] insS=toTrimmedTokens(s,' ');    UnitValue[] ins=new UnitValue[4];    for (int j=0; j < 4; j++) {      UnitValue insSz=parseUnitValue(insS[j < insS.length ? j : insS.length - 1],UnitValue.ZERO,j % 2 == 1);      ins[j]=insSz != null ? insSz : PlatformDefaults.getPanelInsets(j);    }    return ins;  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (a < 0) {    throw new IllegalStateException();  }  if (b <= a) {    throw new IllegalStateException();  }}  }
class C{  public static String[] encode(final String[] values,final String encoding){  if (values != null) {    for (int index=0; index < values.length; index++) {      values[index]=encode(values[index],encoding);    }  }  return values;}  }
class C{  private float calculateDx(float distanceX){  int currentX=view.getScrollX();  float nextX=distanceX + currentX;  boolean isInsideHorizontally=nextX >= minX && nextX <= maxX;  return isInsideHorizontally ? distanceX : 0;}  }
class C{  private void performStorageTierBookKeeping(Set<String> tierNativeGuidsfromProvider,URI id) throws IOException {  List<URI> tierUrisAssociatedWithPolicy=_dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStorageTierFASTPolicyConstraint(id.toString()));  _logger.info("Tiers {} associated with Policy {}",Joiner.on("\t").join(tierUrisAssociatedWithPolicy),id);  List<StorageTier> existingTierObjectsInDB=_dbClient.queryObject(StorageTier.class,tierUrisAssociatedWithPolicy);  for (  StorageTier tier : existingTierObjectsInDB) {    if (!tierNativeGuidsfromProvider.contains(tier.getNativeGuid())) {      if (null != tier.getAutoTieringPolicies()) {        tier.getAutoTieringPolicies().clear();      }      _dbClient.updateAndReindexObject(tier);    }  }}  }
class C{  public synchronized void resetCountdown(){  current=n;}  }
class C{  public Period parsePeriod(String text){  checkParser();  return parseMutablePeriod(text).toPeriod();}  }
class C{  public void open(){  this.createContents();  this.shell.open();  this.shell.layout();  Display display=this.getParent().getDisplay();  while (!this.shell.isDisposed()) {    if (!display.readAndDispatch()) {      display.sleep();    }  }}  }
class C{  @SuppressWarnings("rawtypes") public final int compareTo(E o){  Enum<?> other=(Enum<?>)o;  Enum<E> self=this;  if (self.getClass() != other.getClass() && self.getDeclaringClass() != other.getDeclaringClass())   throw new ClassCastException();  return self.ordinal - other.ordinal;}  }
class C{  public static ParsedURLData parseURL(String urlStr){  ParsedURLProtocolHandler handler=getHandler(getProtocol(urlStr));  return handler.parseURL(urlStr);}  }
class C{  protected void emit_PrimaryTypeExpression_LeftParenthesisKeyword_3_0_p(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public OMPoint(double lat,double lon){  this(lat,lon,DEFAULT_RADIUS);}  }
class C{  public Vector3(Vector2 vector,float z){  this(vector.getX(),vector.getY(),z);}  }
class C{  public <T>T reverse(T t){  return t;}  }
class C{  public ManagedInetGuacamoleSocket(String hostname,int port,Runnable socketClosedTask) throws GuacamoleException {  super(hostname,port);  this.socketClosedTask=socketClosedTask;}  }
class C{  private Control createControl(Composite parent){  Composite topLevel=new Composite(parent,SWT.NONE);  GridLayout layout=new GridLayout(1,true);  layout.verticalSpacing=12;  topLevel.setLayout(layout);  migrationTaskView=new MigrationTaskView(task,topLevel);  Sasher sasher=new Sasher(topLevel,SWT.NONE);  migrationGroupList=new MigrationGroupListViewer(sasher,this,task);  remapTable=new RemapTable(sasher);  sasher.init(migrationGroupList.getControl(),remapTable.getControl(),SWT.HORIZONTAL,40);  migrationTaskView.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));  sasher.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));  return topLevel;}  }
class C{  private void limpar(){  Campo.limpar(txtNumOrdem,txtLocalizacao,txtProcedencia,txtEtiquetaRfid,txtEmprestimoFossil,txtDeatlhesProcedencia,txtDimesoes,txtNumPartes,txtDataEntrada,txtGrupoEstratigrafia,txtFormacao,txtColecao,txtColecaoDescricao,txtOrgao,txtSetor,txtLocal,txtOrdem,txtClasse,txtFamilia,txtGenero,txtEspecie);}  }
class C{  public static void main(String[] args) throws Exception {  System.setProperty("http.proxyHost","proxy.example.com");  String propval=System.getProperty("java.rmi.server.disableHttp");  String propdisp=(propval == null) ? "null" : ("\"" + propval + "\"");  boolean expected=Boolean.parseBoolean(args[0]);  boolean actual=new SocketFactory().proxyDisabled();  System.out.printf("### prop=%s exp=%s act=%s%n",propdisp,expected,actual);  if (expected != actual)   throw new AssertionError();}  }
class C{  public void put(String key,String value){  if (key != null && value != null) {    urlParams.put(key,value);  }}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {}  }
class C{  private ProtectionSet createProtectionSet(RecoverPointVolumeIngestionContext volumeContext){  UnManagedProtectionSet umpset=volumeContext.getUnManagedProtectionSet();  ProtectionSet pset=VolumeIngestionUtil.findOrCreateProtectionSet(volumeContext,volumeContext.getUnmanagedVolume(),umpset,_dbClient);  volumeContext.setManagedProtectionSet(pset);  return pset;}  }
class C{  public ReadMetadata(File imageFile) throws ImageProcessingException, FileNotFoundException {  if (!imageFile.canRead()) {    throw new FileNotFoundException(imageFile.toString());  }  if (DEBUG_OUTPUT) {    System.err.println("Reading " + imageFile.toString());  }  BufferedInputStream inputStream;  try {    inputStream=new BufferedInputStream(new FileInputStream(imageFile));  } catch (  FileNotFoundException e) {    throw new ImageProcessingException("File not found: " + imageFile.getPath(),e);  }  int magicNumber=ImageMetadataReader.readMagicNumber(inputStream);  if (magicNumber == ImageMetadataReader.JPEG_FILE_MAGIC_NUMBER) {    JpegSegmentReader segmentReader=new JpegSegmentReader(inputStream);    metadata=JpegMetadataReader.extractMetadataFromJpegSegmentReader(segmentReader);    if (metadata.containsDirectory(ExifDirectory.class)) {      ExifDirectory exif=(ExifDirectory)metadata.getDirectory(ExifDirectory.class);      if (exif.containsTag(ExifDirectory.TAG_THUMBNAIL_LENGTH) && exif.containsTag(ExifDirectory.TAG_THUMBNAIL_OFFSET)) {        int numApp1Segments=segmentReader.getSegmentCount(JpegSegmentReader.SEGMENT_APP1);        long exifFileOffset=-1;        long offset=-1;        for (int segNum=numApp1Segments - 1; segNum >= 0; segNum--) {          JpegSegmentData segment=segmentReader.getSegmentData();          byte[] segmentBytes=segment.getSegment(JpegSegmentReader.SEGMENT_APP1,segNum);          if (ExifReader.isExifSegment(segmentBytes)) {            exifFileOffset=segment.getSegmentOffset(JpegSegmentReader.SEGMENT_APP1,segNum);            break;          }        }        if (exifFileOffset >= 0) {          try {            long thumbOffset=exif.getLong(ExifDirectory.TAG_THUMBNAIL_OFFSET);            offset=exifFileOffset + ExifReader.TIFF_HEADER_START_OFFSET + thumbOffset;          } catch (          MetadataException e) {            offset=-1;          }        }        long length=-1;        try {          length=exif.getLong(ExifDirectory.TAG_THUMBNAIL_LENGTH);          if (length == 0)           length=-1;        } catch (        MetadataException e) {          length=-1;        }        if (offset > 0 && length > 0) {          thumbnailFileOffset=offset;          thumbnailSize=length;        } else {          thumbnailFileOffset=-1;          thumbnailSize=-1;        }        if (!hasJpgThumbnail()) {          thumbnailDimensions=null;        } else {          Metadata thumbMetadata=JpegMetadataReader.extractMetadataFromJpegSegmentReader(new JpegSegmentReader(getThumbnailBytes()));          if (thumbMetadata.containsDirectory(JpegDirectory.class)) {            JpegDirectory jpgDir=(JpegDirectory)thumbMetadata.getDirectory(JpegDirectory.class);            if (jpgDir != null && jpgDir.containsTag(JpegDirectory.TAG_JPEG_IMAGE_WIDTH) && jpgDir.containsTag(JpegDirectory.TAG_JPEG_IMAGE_HEIGHT)) {              int[] dimensions=null;              try {                int height=jpgDir.getInt(JpegDirectory.TAG_JPEG_IMAGE_HEIGHT);                int width=jpgDir.getInt(JpegDirectory.TAG_JPEG_IMAGE_WIDTH);                if (width > 0 && height > 0)                 dimensions=new int[]{width,height};              } catch (              MetadataException e) {                System.out.println("Error parsing JPG dimensions metadata " + e.toString());              }              thumbnailDimensions=dimensions;            } else {              thumbnailDimensions=null;            }          } else {            thumbnailDimensions=null;          }        }      } else {        thumbnailFileOffset=-1;        thumbnailSize=-1;        thumbnailDimensions=null;      }    } else {      thumbnailFileOffset=-1;      thumbnailSize=-1;      thumbnailDimensions=null;    }  } else {    throw new ImageProcessingException("File format not supported: " + imageFile.getPath());  }  if (DEBUG_OUTPUT) {    Iterator dirIt=metadata.getDirectoryIterator();    while (dirIt.hasNext()) {      Directory dir=(Directory)dirIt.next();      System.err.println("Found dir " + dir.getName());      if (dir.hasErrors()) {        for (Iterator errIt=dir.getErrors(); errIt.hasNext(); ) {          String error=(String)errIt.next();          System.err.println("Warning when parsing file " + imageFile.toString() + " in metadata directory: "+ dir.getName()+ ": "+ error);        }      }    }  }}  }
class C{  public StandardDTEDNameTranslator(String dtedDir,double lat,double lon,int level){  set(dtedDir,lat,lon,level);}  }
class C{  @Override public NodeConfig recognizeNodeConfigFromDns(String dns) throws IllegalArgumentException, IllegalStateException {  StringJoiner allowedDnsTemplates=new StringJoiner(", ","[","]");  for (  Node item : getNodeListProperties()) {    NodeConfig.NodeType type=item.getType();    String baseNodeDomain=getBaseNodeDomain(type,config);    String typeString=item.getDnsPrefix();    String regex=format("^%s\\d+%s$",typeString,baseNodeDomain.replace(".","\\."));    if (dns != null && dns.toLowerCase().matches(regex)) {      return new NodeConfig(type,dns);    }    allowedDnsTemplates.add(format("'%1$s<number>%2$s'",typeString,baseNodeDomain));  }  throw new IllegalArgumentException(format("Illegal DNS name '%s' of node. Correct DNS name templates: %s",dns,allowedDnsTemplates));}  }
class C{  public static GetSubscriptionKeysForSessionId parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  GetSubscriptionKeysForSessionId object=new GetSubscriptionKeysForSessionId();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"getSubscriptionKeysForSessionId".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (GetSubscriptionKeysForSessionId)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","sessionId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setSessionId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @Override public void rename(String from,String to){  throw new UnsupportedOperationException();}  }
class C{  @Override public int describeContents(){  return 0;}  }
class C{  @Override public boolean handleFault(SOAPMessageContext context){  return false;}  }
class C{  public GridTable(Properties ctx,int AD_Table_ID,String TableName,int WindowNo,int TabNo,boolean withAccessControl){  this(ctx,AD_Table_ID,TableName,WindowNo,TabNo,withAccessControl,false);}  }
class C{  @Override public boolean verifyPublicKey(PGPPublicKey keyToVerify,String id,PGPPublicKey keyToVerifyWith){  try {    return PGPEncryptionUtil.verifyPublicKey(keyToVerify,id,keyToVerifyWith);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private void showImmediateDescendants(int offset){  List<Annotation> modifiedAnnotations=new ArrayList<Annotation>();  TLAProofPosition found=null;  for (Iterator<TLAProofPosition> it=foldPositions.iterator(); it.hasNext(); ) {    TLAProofPosition proofPosition=it.next();    try {      if (found == null && proofPosition.containsBeforeProof(offset,document)) {        found=proofPosition;        if (found.getAnnotation().isCollapsed()) {          found.getAnnotation().markExpanded();          modifiedAnnotations.add(found.getAnnotation());        }        continue;      }      if (found != null && found.contains(proofPosition)) {        if (!proofPosition.getAnnotation().isCollapsed()) {          proofPosition.getAnnotation().markCollapsed();          modifiedAnnotations.add(proofPosition.getAnnotation());        }      }    } catch (    BadLocationException e) {      Activator.getDefault().logError("Error changing expansion state of proofs.",e);    }  }  editor.modifyProjectionAnnotations((Annotation[])modifiedAnnotations.toArray(new ProjectionAnnotation[modifiedAnnotations.size()]));}  }
class C{  public static double sum(double x,double y){  return Double.isNaN(x) ? y : Double.isNaN(y) ? x : x + y;}  }
class C{  public boolean addAll(Collection<? extends E> c){  return addAll(size,c);}  }
class C{  public double pdf(int k){  if (k < 0 || k >= cdf.length - 1)   return 0.0;  return cdf[k - 1] - cdf[k];}  }
class C{  public void mousePressed(MouseEvent event){  tryPopup(event);}  }
class C{  public void trimToSize(int maxSize){  while (true) {    K key;    V value;synchronized (this) {      if (size < 0 || (map.isEmpty() && size != 0)) {        throw new IllegalStateException(getClass().getName() + ".sizeOf() is reporting inconsistent results!");      }      if (size <= maxSize) {        break;      }      Map.Entry<K,V> toEvict=null;      for (      Map.Entry<K,V> entry : map.entrySet()) {        if (entry != null) {          toEvict=entry;          break;        }      }      if (toEvict == null) {        break;      }      key=toEvict.getKey();      value=toEvict.getValue();      map.remove(key);      size-=safeSizeOf(key,value);      evictionCount++;    }    entryRemoved(true,key,value,null);  }}  }
class C{  public static void classInexistent(String aClass){  throw new XmlMappingClassDoesNotExistException(MSG.INSTANCE.message(xmlMappingClassDoesNotExistException2,aClass));}  }
class C{  @Override public void writeGraph(final OutputStream outputStream,final Graph g) throws IOException {  final Map<String,String> identifiedVertexKeyTypes=this.vertexKeyTypes.orElseGet(null);  final Map<String,String> identifiedEdgeKeyTypes=this.edgeKeyTypes.orElseGet(null);  if (identifiedEdgeKeyTypes.containsKey(this.edgeLabelKey))   throw new IllegalStateException(String.format("The edgeLabelKey value of[%s] conflicts with the name of an existing property key to be included in the GraphML",this.edgeLabelKey));  if (identifiedEdgeKeyTypes.containsKey(this.edgeLabelKey))   throw new IllegalStateException(String.format("The vertexLabelKey value of[%s] conflicts with the name of an existing property key to be included in the GraphML",this.vertexLabelKey));  identifiedEdgeKeyTypes.put(this.edgeLabelKey,GraphMLTokens.STRING);  identifiedVertexKeyTypes.put(this.vertexLabelKey,GraphMLTokens.STRING);  try {    final XMLStreamWriter writer;    writer=configureWriter(outputStream);    writer.writeStartDocument();    writer.writeStartElement(GraphMLTokens.GRAPHML);    writeXmlNsAndSchema(writer);    writeTypes(identifiedVertexKeyTypes,identifiedEdgeKeyTypes,writer);    writer.writeStartElement(GraphMLTokens.GRAPH);    writer.writeAttribute(GraphMLTokens.ID,GraphMLTokens.G);    writer.writeAttribute(GraphMLTokens.EDGEDEFAULT,GraphMLTokens.DIRECTED);    writeVertices(writer,g);    writeEdges(writer,g);    writer.writeEndElement();    writer.writeEndElement();    writer.writeEndDocument();    writer.flush();    writer.close();  } catch (  XMLStreamException xse) {    throw new IOException(xse);  }}  }
class C{  private String constructDeleteWWNQuery(String systemId,String hsdId,List<String> wwnList,String model){  Map<String,Object> attributeMap=new HashMap<String,Object>();  StorageArray array=new StorageArray(systemId);  Delete deleteOp=new Delete(HDSConstants.ADD_WWN_TO_HSD_TARGET);  attributeMap.put(HDSConstants.STORAGEARRAY,array);  attributeMap.put(HDSConstants.DELETE,deleteOp);  attributeMap.put(HDSConstants.MODEL,model);  HostStorageDomain hsd=new HostStorageDomain(hsdId);  attributeMap.put(HDSConstants.HOST_STORAGE_DOMAIN,hsd);  List<WorldWideName> wwnObjList=new ArrayList<WorldWideName>();  if (null != wwnList && !wwnList.isEmpty()) {    for (    String initiatorWWN : wwnList) {      WorldWideName wwn=new WorldWideName(initiatorWWN);      wwnObjList.add(wwn);    }  }  attributeMap.put(HDSConstants.WWN_LIST,wwnObjList);  String deleteWWNFromHSDQuery=InputXMLGenerationClient.getInputXMLString(HDSConstants.DELETE_WWN_FROM_HSD_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);  return deleteWWNFromHSDQuery;}  }
class C{  public void hide(){  hide(false,null);}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("SearchServlet.init");}  }
class C{  public void dispose(){  if (menuWindow != null) {    menuWindow.dispose();  }  super.dispose();}  }
class C{  public Point2D gameToScreen(Point2D gamePoint){  return gamePoint.subtract(viewport.getOrigin()).multiply(FXGL.getDisplay().getScaleRatio());}  }
class C{  public ConfigureXmlOverlongNamesDialog_NB(XmlOverlongNames xmlOverlongNames){  this.xmlOverlongNames=xmlOverlongNames;  initComponents();  cbElementName.addChangeListener(cbChangeListener);  cbAttributeName.addChangeListener(cbChangeListener);  cbAttributeValue.addChangeListener(cbChangeListener);  final XmlOverlongNames.For[] overlogNamesFor=xmlOverlongNames.getOverlongNamesFor();  for (  XmlOverlongNames.For what : overlogNamesFor) {switch (what) {case ElementName:      cbElementName.setSelected(true);    break;case AttributeName:  cbAttributeName.setSelected(true);break;case AttributeValue:cbAttributeValue.setSelected(true);break;}}iterateModelToComponent(xmlOverlongNames.getLengthOfStringsIterator(),lengthOfStrings);iterateModelToComponent(xmlOverlongNames.getNumberOfElementsIterator(),numberOfElements);}  }
class C{  private void createAjacencyLists(int[][] edges,int numberOfVertices){  for (int i=0; i < edges.length; i++) {    addEdge(edges[i][0],edges[i][1]);  }}  }
class C{  public static Variable asVariable(RDFNode node){  if (node instanceof Resource && ((Resource)node).hasProperty(SP.varName)) {    return node.as(Variable.class);  } else {    return null;  }}  }
class C{  @Override protected void onNfcStateChange(boolean enabled){  if (enabled) {    toast(getString(R.string.nfcAvailableEnabled));  } else {    toast(getString(R.string.nfcAvailableDisabled));  }}  }
class C{  public static boolean isSameInstant(final Calendar cal1,final Calendar cal2){  if (cal1 == null || cal2 == null) {    throw new IllegalArgumentException("The date must not be null");  }  return cal1.getTime().getTime() == cal2.getTime().getTime();}  }
class C{  @SuppressWarnings("rawtypes") public void test_putGet4(){  final List<IBindingSet[]> in=new LinkedList<IBindingSet[]>();{    final IVariable<?> x=Var.var("x");    final IVariable<?> y=Var.var("y");    final IVariable<?> z=Var.var("z");{      final List<IBindingSet> t=new LinkedList<IBindingSet>();{        final ListBindingSet b=new ListBindingSet();        b.set(x,new Constant<IV>(termId2));        b.set(y,new Constant<IV>(inlineIV));        b.set(z,new Constant<IV>(blobIV));        t.add(b);      }      in.add(t.toArray(new IBindingSet[0]));    }{      final List<IBindingSet> t=new LinkedList<IBindingSet>();{        final ListBindingSet b=new ListBindingSet();        b.set(x,new Constant<IV>(termId));        b.set(y,new Constant<IV>(termId2));        t.add(b);      }      in.add(t.toArray(new IBindingSet[0]));    }{      final List<IBindingSet> t=new LinkedList<IBindingSet>();{        final ListBindingSet b=new ListBindingSet();        t.add(b);      }      in.add(t.toArray(new IBindingSet[0]));    }  }  final String solutionSet=getName();  try {    solutionSetsManager.getSolutions(solutionSet);    fail("Expecting: " + IllegalStateException.class);  } catch (  IllegalStateException ex) {    if (log.isInfoEnabled())     log.info("Ignoring expected exception: " + ex);  }  solutionSetsManager.putSolutions(solutionSet,new CloseableIteratorWrapper<IBindingSet[]>(in.iterator()));  final ICloseableIterator<IBindingSet[]> out=solutionSetsManager.getSolutions(solutionSet);  assertSameSolutionsAnyOrder(flatten(in.iterator()),out);}  }
class C{  public void readOctetString() throws IOException {  if (tag == ASN1Constants.TAG_OCTETSTRING) {    readContent();  } else   if (tag == ASN1Constants.TAG_C_OCTETSTRING) {    throw new ASN1Exception("Decoding constructed ASN.1 octet string type is not supported");  } else {    throw expected("octetstring");  }}  }
class C{  public int hashCode(){  return thisHashCode;}  }
class C{  private void cmd_export(){  ValueNamePair pp=(ValueNamePair)fPaymentRule.getSelectedItem();  if (pp == null)   return;  String PaymentRule=pp.getValue();  log.info(PaymentRule);  if (!getChecks(PaymentRule))   return;  JFileChooser fc=new JFileChooser();  fc.setDialogTitle(Msg.getMsg(Env.getCtx(),"Export"));  fc.setFileSelectionMode(JFileChooser.FILES_ONLY);  fc.setMultiSelectionEnabled(false);  fc.setSelectedFile(new java.io.File("paymentExport.txt"));  if (fc.showSaveDialog(panel) != JFileChooser.APPROVE_OPTION)   return;  int no=0;  StringBuffer err=new StringBuffer("");  if (m_PaymentExportClass == null || m_PaymentExportClass.trim().length() == 0) {    m_PaymentExportClass="org.compiere.util.GenericPaymentExport";  }  PaymentExport custom=null;  try {    Class<?> clazz=Class.forName(m_PaymentExportClass);    custom=(PaymentExport)clazz.newInstance();    no=custom.exportToFile(m_checks,fc.getSelectedFile(),err);  } catch (  ClassNotFoundException e) {    no=-1;    err.append("No custom PaymentExport class " + m_PaymentExportClass + " - "+ e.toString());    log.log(Level.SEVERE,err.toString(),e);  }catch (  Exception e) {    no=-1;    err.append("Error in " + m_PaymentExportClass + " check log, "+ e.toString());    log.log(Level.SEVERE,err.toString(),e);  }  if (no >= 0) {    ADialog.info(m_WindowNo,panel,"Saved",fc.getSelectedFile().getAbsolutePath() + "\n" + Msg.getMsg(Env.getCtx(),"NoOfLines")+ "="+ no);    if (ADialog.ask(m_WindowNo,panel,"VPayPrintSuccess?")) {      MPaySelectionCheck.confirmPrint(m_checks,m_batch);    }  } else {    ADialog.error(m_WindowNo,panel,"Error",err.toString());  }  dispose();}  }
class C{  protected Frame<V> newFrame(final int nLocals,final int nStack){  return new Frame<V>(nLocals,nStack);}  }
class C{  public void writeTo(final PacketOutputStream os) throws IOException {  if (loadedStream == null)   writeObjectToBytes();  ParameterWriter.write(os,loadedStream,noBackSlashEscapes);}  }
class C{  private static boolean hasEdge(final INaviViewNode source,final INaviViewNode target,final EdgeType type){  for (  final INaviEdge edge : source.getOutgoingEdges()) {    if ((edge.getTarget() == target) && (edge.getType() == type)) {      return true;    }  }  return false;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] imageFiles=null;  String outputName=null;  String workingDirectory=null;  WhiteboxRasterInfo[] components=null;  WhiteboxRaster ouptut=null;  int nCols=0;  int nRows=0;  double z;  int numImages=0;  int numFiles, numComponents;  int progress=0;  int col, row;  int a, i, j;  double[] imageAverages;  double[] imageTotals;  double[] imageNumPixels;  double[][] data;  double[] noDataValues;  String pathSep=File.separator;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputName=args[1];  if (outputName.toLowerCase().contains(".dep")) {    outputName=outputName.replace(".dep","");  }  try {    imageFiles=inputFilesString.split(";");    numFiles=imageFiles.length;    components=new WhiteboxRasterInfo[numFiles];    imageAverages=new double[numFiles];    imageTotals=new double[numFiles];    imageNumPixels=new double[numFiles];    noDataValues=new double[numFiles];    data=new double[numFiles][];    int[] componentNumbers=new int[numFiles];    double[][] eigenvectors=null;    for (i=0; i < numFiles; i++) {      boolean isComponent=false;      components[i]=new WhiteboxRasterInfo(imageFiles[i]);      noDataValues[i]=components[i].getNoDataValue();      if (i == 0) {        nCols=components[i].getNumberColumns();        nRows=components[i].getNumberRows();        File file=new File(imageFiles[i]);        workingDirectory=file.getParent();      } else {        if (components[i].getNumberColumns() != nCols || components[i].getNumberRows() != nRows) {          showFeedback("All input components must have the same dimensions (rows and columns).");          return;        }      }      ArrayList<String> metadata=components[i].getMetadata();      for (      String entry : metadata) {        if (entry.toLowerCase().contains("principal component num")) {          componentNumbers[i]=Integer.parseInt(entry.replace("Principal Component Num.:","").trim()) - 1;        }        if (entry.toLowerCase().contains("eigenvector")) {          String[] eigenStr=entry.replace("Eigenvector:","").replace("[","").replace("]","").split(",");          if (i == 0) {            numImages=eigenStr.length;            eigenvectors=new double[numImages][numImages];          }          for (a=0; a < numImages; a++) {            eigenvectors[componentNumbers[i]][a]=Double.parseDouble(eigenStr[a].trim());          }          isComponent=true;        }      }      if (!isComponent) {        showFeedback("At least one of the input images does not appear to have been created by the PrincipalComponentAnalysis tool. " + "This tool will not operate correctly.");        return;      }    }    int[] componentPointers=new int[numImages];    for (i=0; i < numFiles; i++) {      componentPointers[componentNumbers[i]]=i;    }    for (j=0; j < numImages; j++) {      String outputHeader=workingDirectory + pathSep + outputName+ (j + 1)+ ".dep";      if (new File(outputHeader).exists()) {        (new File(outputHeader)).delete();      }      if (new File(outputHeader.replace(".dep",".tas")).exists()) {        (new File(outputHeader.replace(".dep",".tas"))).delete();      }      WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.FLOAT,0);      output.setDataScale(DataScale.CONTINUOUS);      for (row=0; row < nRows; row++) {        for (i=0; i < numFiles; i++) {          data[i]=components[i].getRowValues(row);        }        for (col=0; col < nCols; col++) {          if (data[0][col] != noDataValues[0]) {            z=0;            for (i=0; i < numFiles; i++) {              z+=data[i][col] * eigenvectors[componentPointers[i]][j];            }            output.setValue(row,col,z);          } else {            output.setValue(row,col,noDataValues[0]);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress("Creating image " + (j + 1) + ":",progress);      }      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.close();    }    for (i=0; i < numFiles; i++) {      components[i].close();    }    String outputHeader=workingDirectory + pathSep + outputName+ "1.dep";    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static List<org.oscm.internal.vo.VOCatalogEntry> convertToUpVOCatalogEntry(List<org.oscm.vo.VOCatalogEntry> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.internal.vo.VOCatalogEntry> newVO=new ArrayList<org.oscm.internal.vo.VOCatalogEntry>();  for (  org.oscm.vo.VOCatalogEntry tmp : oldVO) {    newVO.add(convertToUp(tmp));  }  return newVO;}  }
class C{  protected Node newNode(){  return new SVGOMPathElement();}  }
class C{  private int lineToY(int line){  int h=textArea.getVisibleRect().height;  float lineCount=textArea.getLineCount();  return (int)((line / lineCount) * h) - 2;}  }
class C{  public EPDataFlowInstantiationOptions cpuStatistics(boolean cpuStatistics){  this.cpuStatistics=cpuStatistics;  return this;}  }
class C{  public int size(){  return mSize;}  }
class C{  public void testAuditCompleted(){  AuditServiceImpl instance=initialiseAuditService();  Audit mockAudit=EasyMock.createMock(Audit.class);  AuditServiceListener mockAuditServiceListener=EasyMock.createMock(AuditServiceListener.class);  mockAuditServiceListener.auditCompleted(mockAudit);  EasyMock.expectLastCall().anyTimes();  EasyMock.replay(mockAuditServiceListener);  EasyMock.replay(mockAudit);  instance.add(mockAuditServiceListener);  instance.auditCompleted(mockAudit);  EasyMock.verify(mockAudit);  EasyMock.verify(mockAuditServiceListener);}  }
class C{  public void ensureCompleted(Logging logger){  if (!isComplete()) {    logger.warning("Progress had not completed automatically as expected: " + getProcessed() + "/"+ total,new Throwable());    setProcessed(getTotal());    logger.progress(this);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static View fromQuery(Query query,String name,Class<? extends ViewModel> modelClass,Property<?>[] properties){  return new View(modelClass,properties,name,null,null,query,false);}  }
class C{  public long timestamp(){  if (version != 1) {    throw new UnsupportedOperationException();  }  return timestamp;}  }
class C{  public boolean areOnlyShortBuffersSupported(){  return mOnlyShortBufferSupported;}  }
class C{  private TraversePredicate traverseToVerb(final Map<WordToken,Collection<Interaction>> tokenToInteraction,final Multimap<Interaction,Entity> interactionToEntities,final Entity entity){  return null;}  }
class C{  private FixedAllocator findAllocator(final int block){  if (block > cSmallSlot) {    return null;  }  final Bucket stats=m_storageStats.findBucket(block);  if (stats == null) {    return null;  }  if (stats.m_allocators < cSmallSlotWasteCheckAllocators) {    return null;  }  final float slotWaste=stats.slotsUnused();  if (slotWaste < cSmallSlotHighWaste) {    return null;  }  FixedAllocator candidate=null;  int candidateFreeBits=cSmallSlotThresholdHighWaste;  for (int i=0; i < m_allocs.size(); i++) {    final FixedAllocator tst=m_allocs.get(i);    if (tst.getBlockSize() == block) {      if (tst.m_freeBits > candidateFreeBits) {        candidate=tst;        candidateFreeBits=candidate.m_freeBits;      }    }  }  if (candidate != null) {    candidate.m_smallSlotHighWaste=true;    if (log.isDebugEnabled()) {      log.debug("Found candidate small slot allocator");    }  }  return candidate;}  }
class C{  public boolean contains(Object o){  return super.contains(WeakElement.create(o));}  }
class C{  public String toString(){  return "MGRSPoint[" + mgrs + "]";}  }
class C{  public ConvolveOp(Kernel kernel,int edgeCondition,RenderingHints hints){  this.kernel=kernel;  this.edgeHint=edgeCondition;  this.hints=hints;}  }
class C{  public void externalEntityDecl(String name,String publicId,String systemId) throws SAXException {}  }
class C{  public static GroupByClause create(){  return new GroupByClause();}  }
class C{  @Override public String toString(){  return new ToStringBuilder(this).append("accession",accession).append("name",name).append("type",type).append("created",created).append("updated",updated).append("md5",getSafeMd5(md5)).append("comment",comment).append("signatureLibraryRelease",getSignatureLibraryRelease()).toString();}  }
class C{  private void findNextTaskFrom(int x,int y,int z){  if (blocksToMine.isEmpty()) {    return;  }  BlockTask_MineBlock mineTask;  if (blocksToMine.get(0).posY < y) {    if (y > minY) {      mineTask=new BlockTask_MineBlock(this,null,x,y - 1,z,true);      if (!jobQueue.contains(mineTask)) {        jobQueue.add(mineTask);      }    }  } else {    for (int xIter=-1; xIter <= 1; xIter++) {      for (int zIter=-1; zIter <= 1; zIter++) {        for (int yIter=1; yIter >= 0; yIter--) {          int xFin=x + xIter;          int zFin=z + zIter;          int yFin=y + yIter;          if (xFin >= minX && xFin <= maxX && zFin >= minZ && zFin <= maxZ && yFin <= maxY) {            if (worldObj.getBlockState(new BlockPos(xFin,yFin,zFin)).getBlock() != Blocks.air) {              mineTask=new BlockTask_MineBlock(this,null,xFin,yFin,zFin,true);              if (blocksToMine.contains(mineTask) && !jobQueue.contains(mineTask)) {                jobQueue.add(mineTask);              }            }          }        }      }    }  }}  }
class C{  public boolean isSelected(){  if (this.getSelectedIndex() == TRUE) {    return true;  } else {    return false;  }}  }
class C{  public String(byte[] data,int start,int length){  if (start >= 0 && 0 <= length && length <= data.length - start) {    offset=0;    Charset charset=defaultCharset();    int result;    CharBuffer cb=charset.decode(ByteBuffer.wrap(data,start,length));    if ((result=cb.length()) > 0) {      value=cb.array();      count=result;    } else {      count=0;      value=new char[0];    }  } else {    throw new StringIndexOutOfBoundsException();  }}  }
class C{  public void toInstanceOf(Class<?> clazz){synchronized (activities) {    for (int i=activities.size() - 1; i >= 0; i--) {      if (clazz.isInstance(activities.get(i).getActivity())) {        return;      } else {        activities.get(i).finish();        activities.remove(i);      }    }  }}  }
class C{  static NdefRecord[] parse(ByteBuffer buffer,boolean ignoreMbMe) throws FormatException {  List<NdefRecord> records=new ArrayList<NdefRecord>();  try {    byte[] type=null;    byte[] id=null;    byte[] payload=null;    ArrayList<byte[]> chunks=new ArrayList<byte[]>();    boolean inChunk=false;    short chunkTnf=-1;    boolean me=false;    while (!me) {      byte flag=buffer.get();      boolean mb=(flag & NdefRecord.FLAG_MB) != 0;      me=(flag & NdefRecord.FLAG_ME) != 0;      boolean cf=(flag & NdefRecord.FLAG_CF) != 0;      boolean sr=(flag & NdefRecord.FLAG_SR) != 0;      boolean il=(flag & NdefRecord.FLAG_IL) != 0;      short tnf=(short)(flag & 0x07);      if (!mb && records.size() == 0 && !inChunk && !ignoreMbMe) {        throw new FormatException("expected MB flag");      } else       if (mb && records.size() != 0 && !ignoreMbMe) {        throw new FormatException("unexpected MB flag");      } else       if (inChunk && il) {        throw new FormatException("unexpected IL flag in non-leading chunk");      } else       if (cf && me) {        throw new FormatException("unexpected ME flag in non-trailing chunk");      } else       if (inChunk && tnf != NdefRecord.TNF_UNCHANGED) {        throw new FormatException("expected TNF_UNCHANGED in non-leading chunk");      } else       if (!inChunk && tnf == NdefRecord.TNF_UNCHANGED) {        throw new FormatException("" + "unexpected TNF_UNCHANGED in first chunk or unchunked record");      }      int typeLength=buffer.get() & 0xFF;      long payloadLength=sr ? (buffer.get() & 0xFF) : (buffer.getInt() & 0xFFFFFFFFL);      int idLength=il ? (buffer.get() & 0xFF) : 0;      if (inChunk && typeLength != 0) {        throw new FormatException("expected zero-length type in non-leading chunk");      }      if (!inChunk) {        type=(typeLength > 0 ? new byte[typeLength] : EMPTY_BYTE_ARRAY);        id=(idLength > 0 ? new byte[idLength] : EMPTY_BYTE_ARRAY);        buffer.get(type);        buffer.get(id);      }      ensureSanePayloadSize(payloadLength);      payload=(payloadLength > 0 ? new byte[(int)payloadLength] : EMPTY_BYTE_ARRAY);      buffer.get(payload);      if (cf && !inChunk) {        chunks.clear();        chunkTnf=tnf;      }      if (cf || inChunk) {        chunks.add(payload);      }      if (!cf && inChunk) {        payloadLength=0;        for (        byte[] p : chunks) {          payloadLength+=p.length;        }        ensureSanePayloadSize(payloadLength);        payload=new byte[(int)payloadLength];        int i=0;        for (        byte[] p : chunks) {          System.arraycopy(p,0,payload,i,p.length);          i+=p.length;        }        tnf=chunkTnf;      }      if (cf) {        inChunk=true;        continue;      } else {        inChunk=false;      }      String error=validateTnf(tnf,type,id,payload);      if (error != null) {        throw new FormatException(error);      }      records.add(new NdefRecord(tnf,type,id,payload));      if (ignoreMbMe) {        break;      }    }  } catch (  BufferUnderflowException e) {    throw new FormatException("expected more data");  }  return records.toArray(new NdefRecord[records.size()]);}  }
class C{  public double[] values(){  return this.values;}  }
class C{  void putEncodeable(String fieldName,IEncodeable s,EncodeableDesc si) throws EncodingException {  try {    for (    EncodeableDesc.FieldInfo fi : si.fields) {      Field f=fi.field;      Object value=s == null ? null : f.get(s);      putObject(null,fi.type,value);    }  } catch (  IllegalAccessException e) {    throw new RuntimeException(e);  }}  }
class C{  public static OutputStream leftShift(OutputStream self,InputStream in) throws IOException {  byte[] buf=new byte[1024];  while (true) {    int count=in.read(buf,0,buf.length);    if (count == -1)     break;    if (count == 0) {      Thread.yield();      continue;    }    self.write(buf,0,count);  }  self.flush();  return self;}  }
class C{  private void build() throws Exception {  for (  String name : read) {    MethodPart part=read.get(name);    if (part != null) {      build(part,name);    }  }}  }
class C{  public JSDocContext(TemplateContextType type,IDocument document,int completionOffset,int completionLength){  super(type,document,completionOffset,completionLength);}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getMark1Percent() > getMark2Percent())   setMark1Percent(getMark2Percent());  if (getMark2Percent() > getMark3Percent() && getMark3Percent() != 0)   setMark2Percent(getMark3Percent());  if (getMark3Percent() > getMark4Percent() && getMark4Percent() != 0)   setMark4Percent(getMark4Percent());  return true;}  }
class C{  private static FCZoneReference createFCZoneReference(ZoneInfo info,URI volumeURI,ExportGroup exportGroup){  FCZoneReference ref=new FCZoneReference();  ref.setPwwnKey(info.getZoneReferenceKey());  ref.setFabricId(info.getFabricId());  ref.setNetworkSystemUri(URI.create(info.getNetworkSystemId()));  ref.setVolumeUri(volumeURI);  ref.setGroupUri(exportGroup.getId());  ref.setZoneName(info.getZoneName());  ref.setId(URIUtil.createId(FCZoneReference.class));  ref.setLabel(FCZoneReference.makeLabel(ref.getPwwnKey(),volumeURI.toString()));  ref.setExistingZone(true);  return ref;}  }
class C{  public static <T,P>int detectIndexWith(Iterable<T> iterable,Predicate2<? super T,? super P> predicate,P parameter){  if (iterable instanceof ArrayList<?>) {    return ArrayListIterate.detectIndexWith((ArrayList<T>)iterable,predicate,parameter);  }  if (iterable instanceof List<?>) {    return ListIterate.detectIndexWith((List<T>)iterable,predicate,parameter);  }  if (iterable != null) {    return IterableIterate.detectIndexWith(iterable,predicate,parameter);  }  throw new IllegalArgumentException("Cannot perform detectIndexWith on null");}  }
class C{  public void addTris(Texture tex,int tint,AffineTransform xf,float[] xys,int xysOffset,int xysLen,float tw,float th,int[] indices,int indicesOffset,int indicesLen,int indexBase){  setTexture(tex);  prepare(tint,xf);  addTris(xys,xysOffset,xysLen,tw,th,indices,indicesOffset,indicesLen,indexBase);}  }
class C{  public static EqualityExpression ilike(String propertyName,Object value){  return new EqualityExpression(Operator.ILIKE,propertyName,value);}  }
class C{  public RequestsTimer(TOMLayer tomLayer,ServerCommunicationSystem communication,ServerViewController controller){  this.tomLayer=tomLayer;  this.communication=communication;  this.controller=controller;  this.timeout=this.controller.getStaticConf().getRequestTimeout();  this.shortTimeout=-1;}  }
class C{  private boolean hasNext(){  return this.fileCounter > 0;}  }
class C{  public boolean isDone(){  return (index > 1);}  }
class C{  public boolean ungroupAllElements(){  try {    List<CartographicElement> elementsList=findAllUngroupedElements(listOfCartographicElements);    removeAllCartographicElements();    for (    CartographicElement ce : elementsList) {      addNewCartographicElement(ce);    }    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public final QuadEdge lPrev(){  return next.sym();}  }
class C{  public boolean isValidName(){  String _name=this.getName();  boolean _equals=Objects.equal("prototype",_name);  if (_equals) {    return false;  }  boolean _and=false;  String _name_1=this.getName();  boolean _equals_1=Objects.equal("constructor",_name_1);  if (!_equals_1) {    _and=false;  } else {    LiteralOrComputedPropertyName _declaredName=this.getDeclaredName();    PropertyNameKind _kind=null;    if (_declaredName != null) {      _kind=_declaredName.getKind();    }    boolean _tripleNotEquals=(_kind != PropertyNameKind.COMPUTED);    _and=_tripleNotEquals;  }  if (_and) {    return false;  }  return true;}  }
class C{  public static void addAttribute(Node element,String name,String value){  ((Element)element).setAttribute(name,value);}  }
class C{  public void removeLandingPad(int x,int z){  BlockPosition pos=new BlockPosition(x,0,z);  spawnLocations.remove(pos);  occupiedLandingPads.remove(pos);}  }
class C{  @Override public synchronized Object invokeMore(Object proxy,Method method,Object[] args) throws Throwable {  String methodName=method.getName();  if (this.isClosed && !allowedOnClosedConnection(method) && method.getExceptionTypes().length > 0) {    if (this.autoReconnect && !this.closedExplicitly) {      this.currentConnection=null;      pickNewConnection();      this.isClosed=false;      this.closedReason=null;    } else {      String reason="No operations allowed after connection closed.";      if (this.closedReason != null) {        reason+=" " + this.closedReason;      }      throw SQLError.createSQLException(reason,SQLError.SQL_STATE_CONNECTION_NOT_OPEN,null);    }  }  if (!this.inTransaction) {    this.inTransaction=true;    this.transactionStartTime=System.nanoTime();    this.transactionCount++;  }  Object result=null;  try {    result=method.invoke(this.thisAsConnection,args);    if (result != null) {      if (result instanceof com.mysql.jdbc.Statement) {        ((com.mysql.jdbc.Statement)result).setPingTarget(this);      }      result=proxyIfReturnTypeIsJdbcInterface(method.getReturnType(),result);    }  } catch (  InvocationTargetException e) {    dealWithInvocationException(e);  } finally {    if ("commit".equals(methodName) || "rollback".equals(methodName)) {      this.inTransaction=false;      String host=this.connectionsToHostsMap.get(this.currentConnection);      if (host != null) {synchronized (this.responseTimes) {          Integer hostIndex=(this.hostsToListIndexMap.get(host));          if (hostIndex != null && hostIndex < this.responseTimes.length) {            this.responseTimes[hostIndex]=System.nanoTime() - this.transactionStartTime;          }        }      }      pickNewConnection();    }  }  return result;}  }
class C{  public T caseNegativeConstraint_(NegativeConstraint_ object){  return null;}  }
class C{  public void disconnect(VoiceDisconnectedEvent.Reason reason){  if (isConnected.get()) {    client.dispatcher.dispatch(new VoiceDisconnectedEvent(reason));    isConnected.set(false);    client.voiceConnections.remove(guild);    executorService.shutdownNow();    if (udpSocket != null)     udpSocket.close();    if (reason != VoiceDisconnectedEvent.Reason.INIT_ERROR) {      session.close();    }  }}  }
class C{  private DataRefType dataRef(byte[] digest){  return dataRef(dataRefFileName,digest);}  }
class C{  public MSecurityManager(){  privilegedThreads=new CopyOnWriteArraySet<>();  privilegedThreads.add(Thread.currentThread());  defaultManager=System.getSecurityManager();  executingTestCase=false;  privilegedThreadToIgnore=null;  unrecognizedPermissions=new CopyOnWriteArraySet<>();  filesToDelete=new CopyOnWriteArraySet<>();}  }
class C{  public Database openOrCreate(String databaseName) throws IOException {  return impl.openOrCreateDB(databaseName);}  }
class C{  @SuppressWarnings("unused") public static byte[] selectFontB(){  byte[] result=new byte[3];  result[0]=ESC;  result[1]=77;  result[2]=1;  return result;}  }
class C{  public X509Name(Vector oids,Vector values,X509NameEntryConverter converter){  this.converter=converter;  if (oids.size() != values.size()) {    throw new IllegalArgumentException("oids vector must be same length as values.");  }  for (int i=0; i < oids.size(); i++) {    this.ordering.addElement(oids.elementAt(i));    this.values.addElement(values.elementAt(i));    this.added.addElement(FALSE);  }}  }
class C{  public void restoreSubcomponentFocus(){  if (isIcon()) {    SwingUtilities2.compositeRequestFocus(getDesktopIcon());  } else {    Component component=KeyboardFocusManager.getCurrentKeyboardFocusManager().getPermanentFocusOwner();    if ((component == null) || !SwingUtilities.isDescendingFrom(component,this)) {      setLastFocusOwner(getMostRecentFocusOwner());      if (lastFocusOwner == null) {        setLastFocusOwner(getContentPane());      }      lastFocusOwner.requestFocus();    }  }}  }
class C{  public void toEPL(StringWriter writer){  writer.write(windowName);  if (optionalAsName != null) {    writer.write(" as ");    writer.write(optionalAsName);  }  writer.write(" ");  UpdateClause.renderEPLAssignments(writer,assignments);}  }
class C{  void stopAnimation(){  mAnimation=null;  mTransformation=null;  if (mIndeterminateDrawable instanceof Animatable) {    ((Animatable)mIndeterminateDrawable).stop();    mShouldStartAnimationDrawable=false;  }  postInvalidate();}  }
class C{  @Override public void buildClassifier(Instances data) throws Exception {  if (m_fastRegression && (m_fixedNumIterations < 0)) {    m_fixedNumIterations=tryLogistic(data);  }  Instances cvData=new Instances(data);  cvData.stratify(m_numFoldsPruning);  double[][] alphas=new double[m_numFoldsPruning][];  double[][] errors=new double[m_numFoldsPruning][];  for (int i=0; i < m_numFoldsPruning; i++) {    Instances train=cvData.trainCV(m_numFoldsPruning,i);    Instances test=cvData.testCV(m_numFoldsPruning,i);    buildTree(train,null,train.numInstances(),0,null);    int numNodes=getNumInnerNodes();    alphas[i]=new double[numNodes + 2];    errors[i]=new double[numNodes + 2];    prune(alphas[i],errors[i],test);  }  cvData=null;  buildTree(data,null,data.numInstances(),0,null);  int numNodes=getNumInnerNodes();  double[] treeAlphas=new double[numNodes + 2];  int iterations=prune(treeAlphas,null,null);  double[] treeErrors=new double[numNodes + 2];  for (int i=0; i <= iterations; i++) {    double alpha=Math.sqrt(treeAlphas[i] * treeAlphas[i + 1]);    double error=0;    for (int k=0; k < m_numFoldsPruning; k++) {      int l=0;      while (alphas[k][l] <= alpha) {        l++;      }      error+=errors[k][l - 1];    }    treeErrors[i]=error;  }  int best=-1;  double bestError=Double.MAX_VALUE;  for (int i=iterations; i >= 0; i--) {    if (treeErrors[i] < bestError) {      bestError=treeErrors[i];      best=i;    }  }  double bestAlpha=Math.sqrt(treeAlphas[best] * treeAlphas[best + 1]);  unprune();  prune(bestAlpha);}  }
class C{  public static void e(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg,throwable);}  }
class C{  public SelectComponentValueITCase(String name){  super(name);}  }
class C{  public static Long toLong(Object o,Long defaultValue){  if (o instanceof Long)   return (Long)o;  if (defaultValue != null)   return Long.valueOf(toLongValue(o,defaultValue.longValue()));  long res=toLongValue(o,Long.MIN_VALUE);  if (res == Long.MIN_VALUE)   return defaultValue;  return Long.valueOf(res);}  }
class C{  public void resetMigrationStatus(MigrationStatus status){  MigrationStatus nowStatus=coordinator.getMigrationStatus();  if (nowStatus != null && nowStatus.equals(status)) {    log.info("Reset Migration status from {}.",nowStatus);    coordinator.removeServiceConfiguration(coordinator.getSiteId(),getMigrationConfiguration());    nowStatus=coordinator.getMigrationStatus();    log.info("After reseting, the status is {}.",nowStatus);    if (nowStatus == null) {      System.out.println("Reset Migration status Successfully.");    } else {      System.out.println("Fail to reset Migration status.");      log.error("Fail to reset Migration status.");    }  } else {    log.error("The Migration status is {}, not specific {}.",nowStatus,status);    System.out.println(String.format("The Migration status is %s, not %s.",nowStatus,status));  }}  }
class C{  public static void main(String[] args) throws IOException {  ListedData<ProcessInfo> p=new ProcessLister().list();  System.out.println("raw: " + p.getJmxData());  System.out.println("parsed: " + p.getParsedData());}  }
class C{  public MariaDbPrepareStatementFacade(final String sql,final int resultSetScrollType,MariaDbConnection connection) throws SQLException {  preparedStatement=new MariaDbServerPreparedStatement(connection,sql,resultSetScrollType,false);}  }
class C{  public void test_overflowPage_addressBits3(){  final int addressBits=3;  final int writeRetentionQueueCapacity=20;  final int numOverflowPages=5000;  doOverflowStressTest(addressBits,writeRetentionQueueCapacity,numOverflowPages);}  }
class C{  public AnnotatedTypeCopier(){  this(true);}  }
class C{  protected PapeRequest(ParameterList params){  super(params);}  }
class C{  public void writeAll(java.sql.ResultSet rs,boolean includeColumnNames,boolean trim) throws SQLException, IOException {  if (includeColumnNames) {    writeColumnNames(rs);  }  while (rs.next()) {    writeNext(resultService.getColumnValues(rs,trim));  }}  }
class C{  public void onSuccess(int statusCode,String content){  onSuccess(content);}  }
class C{  public boolean displayable(){  return true;}  }
class C{  public ImmutableArray<K> subArray(int fromIndex,int toIndex){  int len=toIndex - fromIndex;  @SuppressWarnings("unchecked") K[] array=(K[])new Object[len];  System.arraycopy(this.array,fromIndex,array,0,toIndex - fromIndex);  return new ImmutableArray<K>(array);}  }
class C{  @Override public void updateBytes(int columnIndex,byte[] x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBytes(" + columnIndex + ", x);");    }    update(columnIndex,x == null ? (Value)ValueNull.INSTANCE : ValueBytes.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.719 -0400",hash_original_method="6CA7D23F1FBD47EE0D87B2C3D2BAE183",hash_generated_method="784D9D3317A42F405422A8F6DBB23875") public void info(Object message){}  }
class C{  public static void transformBackToBooleanParameter(){  transformedBackToBooleanParameter++;}  }
class C{  public int padCount(byte[] in) throws InvalidCipherTextException {  int count=in.length - 1;  while (count > 0 && in[count] == 0) {    count--;  }  if (in[count] != (byte)0x80) {    throw new InvalidCipherTextException("pad block corrupted");  }  return in.length - count;}  }
class C{  private RequestedAuthnContext createRequestedAuthnContext(SsoRequestSettings requestSettings){  RequestedAuthnContextBuilder requestedAuthnContextBuilder=new RequestedAuthnContextBuilder();  RequestedAuthnContext requestedAuthnContext=requestedAuthnContextBuilder.buildObject();  requestedAuthnContext.setComparison(AuthnContextComparisonTypeEnumeration.EXACT);  List<AuthnContextClassRef> authnContextClassRefs=requestedAuthnContext.getAuthnContextClassRefs();  List<String> reqSettingsContextClasses=requestSettings.getRequestedAuthnContextClasses();  if (null == reqSettingsContextClasses) {    requestedAuthnContext=null;  } else {    for (    String ref : reqSettingsContextClasses) {      authnContextClassRefs.add(createAuthnContextClassReg(ref));    }  }  return requestedAuthnContext;}  }
class C{  @Override @SuppressWarnings("unchecked") public <T>T unwrap(Class<T> iface) throws SQLException {  if (isWrapperFor(iface)) {    return (T)this;  }  throw DbException.getInvalidValueException("iface",iface);}  }
class C{  private void updateDetailData(){  final long start=mLeftPosition;  final long end=mRightPosition;  final long now=mCurrentTime;  final Context context=getContext();  NetworkStatsHistory.Entry originalEntry=mOriginalNetworkStatsHistory.getValues(start,end,now,null);  final long originalTotalBytes=originalEntry.rxBytes;  mOriginalTotalPhrase=Formatter.formatFileSize(context,originalTotalBytes);  NetworkStatsHistory.Entry compressedEntry=mReceivedNetworkStatsHistory.getValues(start,end,now,null);  final long compressedTotalBytes=compressedEntry.rxBytes;  mReceivedTotalPhrase=Formatter.formatFileSize(context,compressedTotalBytes);  float percentage=0.0f;  if (originalTotalBytes > 0L && originalTotalBytes > compressedTotalBytes) {    percentage=(originalTotalBytes - compressedTotalBytes) / (float)originalTotalBytes;  }  mPercentReductionPhrase=String.format("%.0f%%",100.0 * percentage);  mStartDatePhrase=formatDate(context,start);  mEndDatePhrase=formatDate(context,end);}  }
class C{  public ArrowModifier(float length,float theta,Type type,boolean drawLine){  super();  this.length=length;  this.theta=theta;  this.type=type;  this.doDrawLine=drawLine;}  }
class C{  void clear(){  buffer.setLength(0);  startOffset=endOffset=type=subwordCount=0;}  }
class C{  public boolean hasValue(){  return super.hasAttribute(VALUE);}  }
class C{  public char charAt(int index){  return internal.charAt(index);}  }
class C{  public ImportDeclaration createImportDeclaration(){  ImportDeclarationImpl importDeclaration=new ImportDeclarationImpl();  return importDeclaration;}  }
class C{  public boolean isVmotionSupported(){  return vmotionSupported;}  }
class C{  private void postProcessDocumentChange(FilterBypass filterBypass,AttributeSet attributeSet,String valueBeforeEdit,int selectionStart,int selectionEnd,boolean allowPartialAutoCompletionTerm) throws BadLocationException {  if (doNotPostProcessDocumentChanges)   return;  final String valueAfterEdit=comboBoxEditorComponent.getText();  if (isStrict() && (findAutoCompleteTerm(valueAfterEdit) == NOT_FOUND) && !allItemsUnfiltered.isEmpty()) {    if (getBeepOnStrictViolation())     UIManager.getLookAndFeel().provideErrorFeedback(comboBoxEditorComponent);    doNotPostProcessDocumentChanges=true;    try {      comboBoxEditorComponent.setText(valueBeforeEdit);    }  finally {      doNotPostProcessDocumentChanges=false;    }    comboBoxEditorComponent.select(selectionStart,selectionEnd);    return;  }  final Object selectedItemBeforeEdit=comboBox.getSelectedItem();  updateFilter();  applyFilter(prefix);  if (filterEnabled) {    selectAutoCompleteTerm(filterBypass,attributeSet,selectedItemBeforeEdit,allowPartialAutoCompletionTerm);    togglePopup();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void addException(String exn){  _exceptions.add(exn);}  }
class C{  @Override public int hashCode(){  return toHashCode();}  }
class C{  public static Dcss cs_schol(int order,Dcs A){  int n, c[], post[], P[];  Dcs C;  Dcss S;  if (!Dcs_util.CS_CSC(A))   return (null);  n=A.n;  S=new Dcss();  P=Dcs_amd.cs_amd(order,A);  S.pinv=Dcs_pinv.cs_pinv(P,n);  if (order != 0 && S.pinv == null)   return null;  C=Dcs_symperm.cs_symperm(A,S.pinv,false);  S.parent=Dcs_etree.cs_etree(C,false);  post=Dcs_post.cs_post(S.parent,n);  c=Dcs_counts.cs_counts(C,S.parent,post,false);  S.cp=new int[n + 1];  S.unz=S.lnz=Dcs_cumsum.cs_cumsum(S.cp,c,n);  return ((S.lnz >= 0) ? S : null);}  }
class C{  public JseProcess(String[] cmd,InputStream stdin,OutputStream stdout,OutputStream stderr) throws IOException {  this(Runtime.getRuntime().exec(cmd),stdin,stdout,stderr);}  }
class C{  private void createCameraSource(){  Context context=getApplicationContext();  FaceDetector detector=createFaceDetector(context);  int facing=CameraSource.CAMERA_FACING_FRONT;  if (!mIsFrontFacing) {    facing=CameraSource.CAMERA_FACING_BACK;  }  mCameraSource=new CameraSource.Builder(context,detector).setFacing(facing).setRequestedPreviewSize(320,240).setRequestedFps(60.0f).setAutoFocusEnabled(true).build();}  }
class C{  @Override public Float put(Integer key,Float value){  return wrapValue(_map.put(unwrapKey(key),unwrapValue(value)));}  }
class C{  void generateLeafNodeBases(){  int var1=0;  int var2=this.leafNodes.length;  for (int[] var3=new int[]{this.basePos[0],this.basePos[1],this.basePos[2]}; var1 < var2; ++var1) {    int[] var4=this.leafNodes[var1];    int[] var5=new int[]{var4[0],var4[1],var4[2]};    var3[1]=var4[3];    int var6=var3[1] - this.basePos[1];    if (this.leafNodeNeedsBase(var6)) {      this.placeBlockLine(var3,var5,Blocks.log);    }  }}  }
class C{  public void store(char value){}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public void hideFloatingActionButton(){  if (!mHidden) {    ObjectAnimator scaleX=ObjectAnimator.ofFloat(this,"scaleX",1,0);    ObjectAnimator scaleY=ObjectAnimator.ofFloat(this,"scaleY",1,0);    AnimatorSet animSetXY=new AnimatorSet();    animSetXY.playTogether(scaleX,scaleY);    animSetXY.setInterpolator(accelerateInterpolator);    animSetXY.setDuration(100);    animSetXY.start();    mHidden=true;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(noderemovechildgetnodename.class,args);}  }
class C{  private static String removeMnemonicAmpersand(String message){  StringBuilder s=new StringBuilder();  for (int i=0; i < message.length(); i++) {    char current=message.charAt(i);    if (current != '&' || i == message.length() - 1 || message.charAt(i + 1) == '&') {      s.append(current);    }  }  return s.toString();}  }
class C{  public static void writeAttribute(final XMLStreamWriter writer,final String attributeName,final Calendar value,final boolean includeTime) throws XMLStreamException {  if (value == null) {    return;  }  writer.writeAttribute(attributeName,XMLConvert.toString(value,includeTime));}  }
class C{  public int write(Connection conn,String outputFileName,String sql,String charset) throws SQLException {  Statement stat=conn.createStatement();  ResultSet rs=stat.executeQuery(sql);  int rows=write(outputFileName,rs,charset);  stat.close();  return rows;}  }
class C{  @Override public void run(){  if (!isHelping()) {switch (getCommand()) {case START:      info(start());    waitOnServer();  break;case STATUS:info(status());break;case STOP:info(stop());break;case VERSION:info(version());break;default :usage();}} else {help(getCommand());}}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_ENUM_1__STATE_NAME_1:    return getStateName_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public String hmset(final byte[] key,final Map<byte[],byte[]> hash){  checkIsInMultiOrPipeline();  client.hmset(key,hash);  return client.getStatusCodeReply();}  }
class C{  public File createPDF(File file){  return null;}  }
class C{  public static void clearSearchQueryXButton(Activity activity){  try {    onView(withId(R.id.search_close_btn)).perform(click());  } catch (  NoMatchingViewException e) {    EspressoTestUtils.clickMenuItem(activity,activity.getString(R.string.action_search),R.id.action_search);    onView(withId(R.id.search_close_btn)).perform(click());  }  Espresso.closeSoftKeyboard();}  }
class C{  public static <A>List<A> from(A[] array){  List<A> xs=nil();  if (array != null)   for (int i=array.length - 1; i >= 0; i--)   xs=new List<A>(array[i],xs);  return xs;}  }
class C{  private void init(){}  }
class C{  public static BigDecimal trunc(BigDecimal number,int precision){  return number.setScale(precision,RoundingMode.DOWN);}  }
class C{  public static boolean save(File file,String content){  boolean result;  BufferedWriter writer;  writer=null;  try {    writer=new BufferedWriter(new FileWriter(file));    writer.write(content);    writer.flush();    result=true;  } catch (  Exception e) {    e.printStackTrace();    result=false;  } finally {    if (writer != null) {      try {        writer.close();      } catch (      Exception e) {      }    }  }  return result;}  }
class C{  private void paintBackground(Graphics2D g,JComponent c,int x,int y,int width,int height){  Color color=c.getBackground();  if (type == CommonControlState.DISABLED) {    color=new Color(color.getRed(),color.getGreen(),color.getBlue(),0x80);  }  Shape s=shapeGenerator.createRoundRectangle(x + 1,y + 1,width - 2,height - 2,CornerSize.ROUND_HEIGHT);  g.setPaint(color);  g.fill(s);}  }
class C{  @Override public boolean determineExportGroupCreateSteps(Workflow workflow,String waitFor,BlockStorageDevice device,StorageSystem storage,ExportGroup exportGroup,List<URI> initiatorURIs,Map<URI,Integer> volumeMap,boolean zoningStepNeeded,String token) throws Exception {  String previousStep=waitFor;  boolean flowCreated=false;  Map<String,URI> portNameToInitiatorURI=new HashMap<String,URI>();  List<URI> volumeURIs=new ArrayList<URI>();  volumeURIs.addAll(volumeMap.keySet());  Map<URI,URI> hostToExistingExportMaskMap=new HashMap<URI,URI>();  List<URI> hostURIs=new ArrayList<URI>();  List<String> portNames=new ArrayList<String>();  processInitiators(exportGroup,initiatorURIs,portNames,portNameToInitiatorURI,hostURIs);  queryHostInitiatorsAndAddToList(portNames,portNameToInitiatorURI,initiatorURIs,hostURIs);  Map<String,Set<URI>> matchingExportMaskURIs=device.findExportMasks(storage,portNames,false);  if (matchingExportMaskURIs.isEmpty()) {    previousStep=checkForSnapshotsToCopyToTarget(workflow,storage,previousStep,volumeMap,null);    _log.info(String.format("No existing mask found w/ initiators { %s }",Joiner.on(",").join(portNames)));    createNewExportMaskWorkflowForInitiators(initiatorURIs,exportGroup,workflow,volumeMap,storage,token,previousStep);    flowCreated=true;  } else {    _log.info(String.format("Mask(s) found w/ initiators {%s}. " + "MatchingExportMaskURIs {%s}, portNameToInitiators {%s}",Joiner.on(",").join(portNames),Joiner.on(",").join(matchingExportMaskURIs.keySet()),Joiner.on(",").join(portNameToInitiatorURI.entrySet())));    List<URI> initiatorURIsCopy=new ArrayList<URI>();    initiatorURIsCopy.addAll(initiatorURIs);    Map<URI,Map<URI,Integer>> existingMasksToUpdateWithNewVolumes=new HashMap<URI,Map<URI,Integer>>();    Map<URI,Set<Initiator>> existingMasksToUpdateWithNewInitiators=new HashMap<URI,Set<Initiator>>();    for (    Map.Entry<String,Set<URI>> entry : matchingExportMaskURIs.entrySet()) {      URI initiatorURI=portNameToInitiatorURI.get(entry.getKey());      Initiator initiator=_dbClient.queryObject(Initiator.class,initiatorURI);      initiatorURIsCopy.remove(initiatorURI);      List<URI> exportMaskURIs=new ArrayList<URI>();      exportMaskURIs.addAll(entry.getValue());      List<ExportMask> masks=_dbClient.queryObject(ExportMask.class,exportMaskURIs);      _log.info(String.format("initiator %s masks {%s}",initiator.getInitiatorPort(),Joiner.on(',').join(exportMaskURIs)));      for (      ExportMask mask : masks) {        _log.info(String.format("mask %s has initiator %s",mask.getMaskName(),initiator.getInitiatorPort()));        getDevice().refreshExportMask(storage,mask);        if (mask.getMaskName() != null && mask.getMaskName().toUpperCase().contains(ExportUtils.NO_VIPR)) {          _log.info(String.format("ExportMask %s disqualified because the name contains %s (in upper or lower case) to exclude it",mask.getMaskName(),ExportUtils.NO_VIPR));          continue;        }        if (mask.getCreatedBySystem()) {          _log.info(String.format("initiator %s is in persisted mask %s",initiator.getInitiatorPort(),mask.getMaskName()));          if (mask.getInitiators() != null) {            for (            String existingMaskInitiatorStr : mask.getInitiators()) {              Iterator<URI> initiatorIter=initiatorURIsCopy.iterator();              while (initiatorIter.hasNext()) {                Initiator initiatorCopy=_dbClient.queryObject(Initiator.class,initiatorIter.next());                if (initiatorCopy != null && initiatorCopy.getId() != null && !mask.hasInitiator(initiatorCopy.getId().toString())) {                  Initiator existingMaskInitiator=_dbClient.queryObject(Initiator.class,URI.create(existingMaskInitiatorStr));                  if (existingMaskInitiator != null && initiatorCopy.getHost() != null && initiatorCopy.getHost().equals(existingMaskInitiator.getHost())) {                    Set<Initiator> existingMaskInitiators=existingMasksToUpdateWithNewInitiators.get(mask.getId());                    if (existingMaskInitiators == null) {                      existingMaskInitiators=new HashSet<Initiator>();                      existingMasksToUpdateWithNewInitiators.put(mask.getId(),existingMaskInitiators);                    }                    existingMaskInitiators.add(initiatorCopy);                    initiatorIter.remove();                  }                }              }            }          }        } else {          mask.addInitiator(initiator);          if (!NullColumnValueGetter.isNullURI(initiator.getHost())) {            hostToExistingExportMaskMap.put(initiator.getHost(),mask.getId());          }        }        for (        URI boURI : volumeURIs) {          BlockObject bo=Volume.fetchExportMaskBlockObject(_dbClient,boURI);          if (bo != null && !mask.hasExistingVolume(bo)) {            _log.info(String.format("volume %s is not in mask %s",bo.getWWN(),mask.getMaskName()));            Map<URI,Integer> newVolumes=existingMasksToUpdateWithNewVolumes.get(mask.getId());            if (newVolumes == null) {              newVolumes=new HashMap<URI,Integer>();              existingMasksToUpdateWithNewVolumes.put(mask.getId(),newVolumes);            }            Integer requestedHLU=volumeMap.get(boURI);            StringMap existingVolumesInMask=mask.getExistingVolumes();            if (existingVolumesInMask != null && requestedHLU.intValue() != ExportGroup.LUN_UNASSIGNED && !ExportGroup.LUN_UNASSIGNED_DECIMAL_STR.equals(requestedHLU.toString()) && existingVolumesInMask.containsValue(requestedHLU.toString())) {              ExportOrchestrationTask completer=new ExportOrchestrationTask(exportGroup.getId(),token);              ServiceError serviceError=DeviceControllerException.errors.exportHasExistingVolumeWithRequestedHLU(boURI.toString(),requestedHLU.toString());              completer.error(_dbClient,serviceError);              return false;            }            newVolumes.put(bo.getId(),requestedHLU);            mask.addToUserCreatedVolumes(bo);          }        }        Map<URI,Integer> volumeMapForExistingMask=existingMasksToUpdateWithNewVolumes.get(mask.getId());        if (volumeMapForExistingMask != null && !volumeMapForExistingMask.isEmpty()) {          mask.addVolumes(volumeMapForExistingMask);        }        Set<Initiator> initiatorSetForExistingMask=existingMasksToUpdateWithNewInitiators.get(mask.getId());        if (initiatorSetForExistingMask != null && initiatorSetForExistingMask.isEmpty()) {          mask.addInitiators(initiatorSetForExistingMask);        }        updateZoningMap(exportGroup,mask);        _dbClient.updateAndReindexObject(mask);        exportGroup.addExportMask(mask.getId());        _dbClient.updateAndReindexObject(exportGroup);      }    }    Map<URI,List<URI>> hostInitiatorMap=new HashMap<URI,List<URI>>();    if (!initiatorURIsCopy.isEmpty()) {      for (      URI newExportMaskInitiator : initiatorURIsCopy) {        Initiator initiator=_dbClient.queryObject(Initiator.class,newExportMaskInitiator);        List<URI> initiatorSet=hostInitiatorMap.get(initiator.getHost());        if (initiatorSet == null) {          initiatorSet=new ArrayList<URI>();          hostInitiatorMap.put(initiator.getHost(),initiatorSet);        }        initiatorSet.add(initiator.getId());        _log.info(String.format("host = %s, " + "initiators to add: %d, " + "existingMasksToUpdateWithNewVolumes.size = %d",initiator.getHost(),hostInitiatorMap.get(initiator.getHost()).size(),existingMasksToUpdateWithNewVolumes.size()));      }    }    _log.info(String.format("existingMasksToUpdateWithNewVolumes.size = %d",existingMasksToUpdateWithNewVolumes.size()));    previousStep=checkForSnapshotsToCopyToTarget(workflow,storage,previousStep,volumeMap,existingMasksToUpdateWithNewVolumes.values());    if (!hostInitiatorMap.isEmpty()) {      for (      URI hostID : hostInitiatorMap.keySet()) {        if (hostToExistingExportMaskMap.containsKey(hostID)) {          URI existingExportMaskURI=hostToExistingExportMaskMap.get(hostID);          Set<Initiator> toAddInits=new HashSet<Initiator>();          List<URI> hostInitaitorList=hostInitiatorMap.get(hostID);          for (          URI initURI : hostInitaitorList) {            Initiator initiator=_dbClient.queryObject(Initiator.class,initURI);            if (!initiator.getInactive()) {              toAddInits.add(initiator);            }          }          _log.info(String.format("Need to add new initiators to existing mask %s, %s",existingExportMaskURI.toString(),Joiner.on(',').join(hostInitaitorList)));          existingMasksToUpdateWithNewInitiators.put(existingExportMaskURI,toAddInits);          continue;        }        _log.info(String.format("new export masks %s",Joiner.on(",").join(hostInitiatorMap.get(hostID))));        GenExportMaskCreateWorkflowResult result=generateExportMaskCreateWorkflow(workflow,previousStep,storage,exportGroup,hostInitiatorMap.get(hostID),volumeMap,token);        previousStep=result.getStepId();        flowCreated=true;      }    }    for (    Map.Entry<URI,Map<URI,Integer>> entry : existingMasksToUpdateWithNewVolumes.entrySet()) {      ExportMask mask=_dbClient.queryObject(ExportMask.class,entry.getKey());      Map<URI,Integer> volumesToAdd=entry.getValue();      _log.info(String.format("adding these volumes %s to mask %s",Joiner.on(",").join(volumesToAdd.keySet()),mask.getMaskName()));      previousStep=generateExportMaskAddVolumesWorkflow(workflow,previousStep,storage,exportGroup,mask,volumesToAdd,null);      flowCreated=true;    }    for (    Entry<URI,Set<Initiator>> entry : existingMasksToUpdateWithNewInitiators.entrySet()) {      ExportMask mask=_dbClient.queryObject(ExportMask.class,entry.getKey());      Set<Initiator> initiatorsToAdd=entry.getValue();      List<URI> initiatorsURIs=new ArrayList<URI>();      for (      Initiator initiator : initiatorsToAdd) {        initiatorsURIs.add(initiator.getId());      }      _log.info(String.format("adding these initiators %s to mask %s",Joiner.on(",").join(initiatorsURIs),mask.getMaskName()));      previousStep=generateExportMaskAddInitiatorsWorkflow(workflow,previousStep,storage,exportGroup,mask,initiatorsURIs,existingMasksToUpdateWithNewVolumes.get(entry.getKey()) != null ? existingMasksToUpdateWithNewVolumes.get(entry.getKey()).keySet() : null,token);      flowCreated=true;    }  }  return flowCreated;}  }
class C{  public static Integer stringToInteger(String s,Integer defaultValue){  try {    return Integer.parseInt(s);  } catch (  NumberFormatException nfe) {    return defaultValue;  }}  }
class C{  @Override public boolean equals(final Object other){  if (!(other instanceof Locations)) {    return false;  }  return nickname().equals(((Locations)other).nickname());}  }
class C{  public double weightedAreaUnderROC(){  double[] classCounts=new double[m_NumClasses];  double classCountSum=0;  for (int i=0; i < m_NumClasses; i++) {    for (int j=0; j < m_NumClasses; j++) {      classCounts[i]+=m_ConfusionMatrix[i][j];    }    classCountSum+=classCounts[i];  }  double aucTotal=0;  for (int i=0; i < m_NumClasses; i++) {    double temp=areaUnderROC(i);    if (!Utils.isMissingValue(temp)) {      aucTotal+=(temp * classCounts[i]);    }  }  return aucTotal / classCountSum;}  }
class C{  public List<String> wordBreakB(String s,Set<String> dict){  List<String> words=new ArrayList<String>();  int len=s.length();  for (int i=1; i <= len; i++) {    String pref=s.substring(0,i);    if (dict.contains(pref)) {      if (i == len) {        words.add(pref);      } else {        String remain=s.substring(i,len);        List<String> remainDecomp=wordBreakB(remain,dict);        if (remainDecomp != null) {          for (          String item : remainDecomp) {            words.add(pref + " " + item);          }        }      }    }  }  return words;}  }
class C{  public boolean removeAll(Collection<?> collection){  throw new UnsupportedOperationException();}  }
class C{  public static final Jama.Matrix sigma(Jama.Matrix A){  return new Jama.Matrix(sigma(A.getArray()));}  }
class C{  private synchronized IMqttToken removeMqttToken(Bundle data){  String activityToken=data.getString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN);  if (activityToken != null) {    int tokenNumber=Integer.parseInt(activityToken);    IMqttToken token=tokenMap.get(tokenNumber);    tokenMap.delete(tokenNumber);    return token;  }  return null;}  }
class C{  public NameNotFoundException(String message){  super(message);}  }
class C{  public DGenerateSecretKey(JFrame parent,SecretKeyType secretKeyType,int secretKeySize){  super(parent,res.getString("DGenerateSecretKey.Title"),Dialog.ModalityType.DOCUMENT_MODAL);  this.secretKeyType=secretKeyType;  this.secretKeySize=secretKeySize;  initComponents();}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public static String rowToString(JSONArray ja){  StringBuffer sb=new StringBuffer();  for (int i=0; i < ja.length(); i+=1) {    if (i > 0) {      sb.append(',');    }    Object object=ja.opt(i);    if (object != null) {      String string=object.toString();      if (string.length() > 0 && (string.indexOf(',') >= 0 || string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 || string.indexOf(0) >= 0 || string.charAt(0) == '"')) {        sb.append('"');        int length=string.length();        for (int j=0; j < length; j+=1) {          char c=string.charAt(j);          if (c >= ' ' && c != '"') {            sb.append(c);          }        }        sb.append('"');      } else {        sb.append(string);      }    }  }  sb.append('\n');  return sb.toString();}  }
class C{  public NoLoginAreaBehaviour(final int newX,final int newY,final String message){  this.newX=newX;  this.newY=newY;  this.message=message;}  }
class C{  public int hashCode(int index,int seed){  if (index < 8) {    int x=(index * 0x9f3b) ^ seed;    int result=seed;    int p=start;    while (true) {      int c=data[p++] & 255;      if (c == '\n') {        break;      }      x=31 + x * 0x9f3b;      result^=x * (1 + c);    }    return result;  }  int end=getEnd();  return StringHash.getSipHash24(data,start,end,index,seed);}  }
class C{  public HttpURL(final String userinfo,final String host,final String path,final String query,final String fragment) throws URIException {  this(userinfo,host,-1,path,query,fragment);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (operator: ");  result.append(operator);  result.append(')');  return result.toString();}  }
class C{  public Configuration createConfiguration(ConfigurationType type,String targetDir){  Configuration configuration;  if (type != ConfigurationType.RUNTIME) {    configuration=CONFIGURATION_FACTORY.createConfiguration(getTestData().containerId,getTestData().containerType,type,targetDir);  } else {    configuration=CONFIGURATION_FACTORY.createConfiguration(getTestData().containerId,getTestData().containerType,type);  }  configuration.setProperty(ServletPropertySet.PORT,"" + getTestData().port);  configuration.setProperty(GeneralPropertySet.RMI_PORT,"" + getTestData().rmiPort);  Properties allProperties=System.getProperties();  for (  Entry<Object,Object> property : allProperties.entrySet()) {    if (property.getKey() != null && property.getValue() != null) {      String key=property.getKey().toString();      String value=property.getValue().toString();      String containerIdentifier="cargo.samples." + getTestData().containerId;      if (key.startsWith(containerIdentifier)) {        key=key.replace(containerIdentifier,"cargo");      }      if (key.endsWith(".port")) {        if (configuration.getProperties().get(key) != null) {          configuration.setProperty(key,value);        }      } else {        configuration.setProperty(key,value);      }    }  }  if (getTestData().javaHome != null && !getTestData().javaHome.equals("")) {    configuration.setProperty(GeneralPropertySet.JAVA_HOME,getTestData().javaHome);  }  configuration.setProperty(GeneralPropertySet.LOGGING,LoggingLevel.HIGH.getLevel());  configuration.setLogger(getLogger());  return configuration;}  }
class C{  public Lookup(String name,int type) throws TextParseException {  this(Name.fromString(name),type,DClass.IN);}  }
class C{  public double f(Node n){  return gf.g(n) + hf.h(n.getState());}  }
class C{  public static SootMethod findClosetMatch(SootClass sootClass,SootMethodRef method){  List<SootClass> ancestorList=getSuperClassList(sootClass);  ancestorList.add(0,sootClass);  NumberedString subSig=method.getSubSignature();  for (  SootClass sc : ancestorList) {    if (sc.declaresMethod(subSig))     return sc.getMethod(subSig);  }  return null;}  }
class C{  public static boolean isEmpty(File path,boolean ignoreEmpty){  boolean empty=true;  if (path.isDirectory()) {    File[] files=path.listFiles();    for (int i=0; ((i < files.length) && empty); i++) {      if (files[i].isDirectory()) {        empty=isEmpty(files[i],ignoreEmpty);      } else {        empty=false;      }    }  } else {    empty=false;  }  return empty;}  }
class C{  public static int lastIndexOfAny(String str,String[] searchStrs){  if ((str == null) || (searchStrs == null)) {    return -1;  }  int sz=searchStrs.length;  int ret=-1;  int tmp=0;  for (int i=0; i < sz; i++) {    tmp=str.lastIndexOf(searchStrs[i]);    if (tmp > ret) {      ret=tmp;    }  }  return ret;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println("Progress: " + progress + "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public TriggerStatus(String status,Date nextFireTime){  this.status=status;  this.nextFireTime=nextFireTime;}  }
class C{  public void run(){  while (!interrupted) {    try {      Buffer packet=new Buffer();      packet.setData(new byte[0]);      packet.setLength(0);      packet.setFormat(format);      packet.setSequenceNumber(seqNo++);      packet.setTimeStamp(systemTimeBase.getTime());      fifo.addObject(packet);      if (!incomingStarted) {        Thread.sleep(DUMMY_SOURCE_OPENING_PERIOD);      } else {        Thread.sleep(DUMMY_SOURCE_PERIOD);      }    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  private static String[] readSqlStatements(URL url){  try {    char buffer[]=new char[256];    StringBuilder result=new StringBuilder();    InputStreamReader reader=new InputStreamReader(url.openStream(),"UTF-8");    while (true) {      int count=reader.read(buffer);      if (count < 0) {        break;      }      result.append(buffer,0,count);    }    return result.toString().split(";");  } catch (  IOException ex) {    throw new RuntimeException("Cannot read " + url,ex);  }}  }
class C{  public GlowOfflinePlayer(GlowServer server,UUID uuid){  checkNotNull(server,"server must not be null");  checkNotNull(uuid,"UUID must not be null");  this.server=server;  profile=ProfileCache.getProfile(uuid);  loadData();}  }
class C{  public synchronized void reset() throws IOException {  if (in == null) {    throw new IOException("Stream Closed");  }  slack=null;  in.reset();}  }
class C{  public void beginResizingFrame(JComponent f,int direction){  oldCursor=f.getCursor();  super.beginResizingFrame(f,direction);  Cursor cursor=f.getCursor();  Rectangle r=f.getBounds();  ghostPanel.setBounds(r);  f.setVisible(false);  targetPane.add(ghostPanel);  targetPane.setLayer(ghostPanel,JLayeredPane.DRAG_LAYER.intValue());  ghostPanel.setCursor(cursor);  targetPane.setVisible(true);}  }
class C{  protected String instNumsTipText(){  return "The upper and lowet boundary for instances per cluster.";}  }
class C{  public long toMinutes(){  return TimeUnit.MINUTES.convert(length,timeUnit);}  }
class C{  @Override public boolean supportsCapability(OperatorCapability lc){switch (lc) {case NUMERICAL_LABEL:case NO_LABEL:case UPDATABLE:case FORMULA_PROVIDER:    return false;default :  return true;}}  }
class C{  public BasicPoolEntryRef(BasicPoolEntry entry,ReferenceQueue<Object> queue){  super(entry,queue);  if (entry == null) {    throw new IllegalArgumentException("Pool entry must not be null.");  }  route=entry.getPlannedRoute();}  }
class C{  public static CPreparedStatement prepareStatement(String sql){  int concurrency=ResultSet.CONCUR_READ_ONLY;  String upper=sql.toUpperCase();  if (upper.startsWith("UPDATE ") || upper.startsWith("DELETE "))   concurrency=ResultSet.CONCUR_UPDATABLE;  return prepareStatement(sql,ResultSet.TYPE_FORWARD_ONLY,concurrency,null);}  }
class C{  public SerializablePermission(String name,String actions){  super(name,actions);}  }
class C{  public void addController(Controller controller){  if (!controllers.contains(controller)) {    controllers.add(controller);  }}  }
class C{  private ByteBuf writeRequest(ByteBuf buffer,Object request,ThreadContext context){  context.serializer().writeObject(request,OUTPUT.get().setByteBuf(buffer));  if (request instanceof ReferenceCounted) {    ((ReferenceCounted)request).release();  }  return buffer;}  }
class C{  public void addChangeListener(ChangeListener l){  listenerList.add(ChangeListener.class,l);}  }
class C{  public Set<URI> checkForActiveProjectAclsUsingUserGroup(String label){  Set<URI> projectsUsingUserGroup=null;  List<URI> projectURIList=_dbClient.queryByType(Project.class,true);  if (projectURIList == null || !projectURIList.iterator().hasNext()) {    _log.warn("There are no projects configured.");    return projectsUsingUserGroup;  }  List<Project> projects=_dbClient.queryObject(Project.class,projectURIList);  if (CollectionUtils.isEmpty(projects)) {    _log.error("Could not find the project objects for the Ids {}",projectURIList.toString());    return projectsUsingUserGroup;  }  projectsUsingUserGroup=new HashSet<URI>();  for (  Project project : projects) {    if (project == null) {      _log.debug("Invalid project");      continue;    }    if (CollectionUtils.isEmpty(project.getAcls())) {      _log.debug("ACLs are not configured for project {}",project.getLabel());      continue;    }    Set<String> aclKeys=project.getAcls().keySet();    if (checkUserGroupWithPermissionKeys(label,aclKeys)) {      projectsUsingUserGroup.add(project.getId());    }  }  return projectsUsingUserGroup;}  }
class C{  public int next(){  return mix(gen.getAndIncrement());}  }
class C{  @Override public Set<String> supportedMimeTypes(){  return this.SUPPORTED_MIME_TYPES;}  }
class C{  public synchronized static void addExtensionInstallationProvider(ExtensionInstallationProvider eip){  if (providers == null) {    providers=new Vector<>();  }  providers.add(eip);}  }
class C{  public <T>T fromXML(final Reader xml,final TypePermission... permissions) throws IOException, ClassNotFoundException {  return fromXML(new XppDriver(),xml,permissions);}  }
class C{  @Override public void write(byte[] buffer,int offset,int length) throws IOException {  _crc=Crc64.generate(_crc,buffer,offset,length);  _next.write(buffer,offset,length);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:28.963 -0500",hash_original_method="771B6175C18C16E526CCE4BE3670ABE7",hash_generated_method="4AA4C7197C7DFB863833D1384EE6EC43") public static byte[] sha256(byte[] data){  return getSha256Digest().digest(data);}  }
class C{  public FastCharStream(Reader r){  input=r;}  }
class C{  public synchronized void resetDevices(){  devices=null;}  }
class C{  public static BigDecimal parseBigDecimalForEntity(String bigDecimalString) throws NumberFormatException {  if (bigDecimalString == null) {    return null;  }  bigDecimalString=bigDecimalString.trim();  bigDecimalString=bigDecimalString.replaceAll(",","");  if (bigDecimalString.length() < 1) {    return null;  }  return new BigDecimal(bigDecimalString);}  }
class C{  private void determineAvailableSampleRates() throws LibUsbException, UsbException {  mSampleRates.clear();  try {    byte[] rawCount=readArray(Command.GET_SAMPLE_RATES,0,0,4);    if (rawCount != null) {      int count=EndianUtils.readSwappedInteger(rawCount,0);      byte[] rawRates=readArray(Command.GET_SAMPLE_RATES,0,count,(count * 4));      for (int x=0; x < count; x++) {        int rate=EndianUtils.readSwappedInteger(rawRates,(x * 4));        mSampleRates.add(new AirspySampleRate(x,rate,formatSampleRate(rate)));      }    }  } catch (  LibUsbException e) {  }  if (mSampleRates.isEmpty()) {    mSampleRates.add(DEFAULT_SAMPLE_RATE);  }}  }
class C{  private ChatCondition createTaskFinishedCondition(){  ChatCondition c=new AndCondition(new QuestStartedCondition(QUEST_SLOT),new QuestInStateCondition(QUEST_SLOT,0,"start"),new QuestInStateCondition(QUEST_SLOT,1,"0"));  return c;}  }
class C{  public static Test suite(){  return (new TestSuite(UIRepeatITCase.class));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:33.909 -0500",hash_original_method="FBEF152C2B412533A606ADB2B9DA9D2A",hash_generated_method="934ED55826BA80564998FB18A725B8F7") public ActiveSyncContext(SyncOperation syncOperation,long historyRowId,int syncAdapterUid){  super();  mSyncAdapterUid=syncAdapterUid;  mSyncOperation=syncOperation;  mHistoryRowId=historyRowId;  mSyncAdapter=null;  mStartTime=SystemClock.elapsedRealtime();  mTimeoutStartTime=mStartTime;  mSyncWakeLock=mSyncHandler.getSyncWakeLock(mSyncOperation.account,mSyncOperation.authority);  mSyncWakeLock.setWorkSource(new WorkSource(syncAdapterUid));  mSyncWakeLock.acquire();}  }
class C{  static boolean renameDir(@NonNull final File source,@NonNull final File target){  if (rename(source,target.getName())) {    return true;  }  if (target.exists()) {    return false;  }  if (Helper.isAtLeastAPI(LOLLIPOP) && source.getParent().equals(target.getParent())) {    DocumentFile document=getDocumentFile(source,true);    if (document != null && document.renameTo(target.getName())) {      return true;    }  }  if (!makeDir(target)) {    return false;  }  File[] sourceFiles=source.listFiles();  if (sourceFiles == null) {    return true;  }  for (  File sourceFile : sourceFiles) {    String fileName=sourceFile.getName();    File targetFile=new File(target,fileName);    if (!copyFile(sourceFile,targetFile)) {      return false;    }  }  for (  File sourceFile : sourceFiles) {    if (!deleteFile(sourceFile)) {      return false;    }  }  return true;}  }
class C{  public ProcessInfoParameter(String parameterName,Object parameter,Object parameter_To,String info,String info_To){  setParameterName(parameterName);  setParameter(parameter);  setParameter_To(parameter_To);  setInfo(info);  setInfo_To(info_To);}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException();}  }
class C{  private static float allairstrength(final Collection<Unit> units,final boolean attacking){  float airstrength=0.0F;  for (  final Unit u : units) {    final UnitAttachment unitAttachment=UnitAttachment.get(u.getType());    airstrength+=1.00F;    if (attacking) {      airstrength+=unitAttachment.getAttack(u.getOwner());    } else {      airstrength+=unitAttachment.getDefense(u.getOwner());    }  }  return airstrength;}  }
class C{  public TabbedPaneTabPainter(Which state){  super();  this.ctx=new PaintContext(CacheMode.FIXED_SIZES);switch (state) {case BACKGROUND_SELECTED_FOCUSED:case BACKGROUND_PRESSED_SELECTED_FOCUSED:    focused=true;  break;default :focused=false;break;}type=getButtonType(state);}  }
class C{  public static OperatorInfoBubble displayPrecheckMissingMandatoryParameterWarning(final Operator op,final ParameterType param,boolean showRunAnyway){  if (op == null) {    throw new IllegalArgumentException("op must not be null!");  }  if (param == null) {    throw new IllegalArgumentException("param must not be null!");  }  String opName=op.getOperatorDescription().getName();  return displayPrecheckMissingParameterWarning(op,param,false,showRunAnyway,"process_precheck_mandatory_parameter_unset",opName,param.getKey());}  }
class C{  @SuppressWarnings("unchecked") public void writeBoolean(boolean x) throws SQLException {  attribs.add(Boolean.valueOf(x));}  }
class C{  public int size(){  return shards.size();}  }
class C{  public static boolean hasAcceptedEula(Context context){  return getValue(context,ACCEPTED_EULA_PREFERENCE_KEY,false);}  }
class C{  private void outputPrefixDecoding(boolean b){  this.outputPrefixDecoding=b;}  }
class C{  private static InputStream gzipInputStream(String contentEncoding,InputStream inputStream) throws IOException {  if (HeaderUtil.isGzipContent(contentEncoding)) {    inputStream=new GZIPInputStream(inputStream);  }  return inputStream;}  }
class C{  public static MeanVariance[] newArray(int dimensionality){  MeanVariance[] arr=new MeanVariance[dimensionality];  for (int i=0; i < dimensionality; i++) {    arr[i]=new MeanVariance();  }  return arr;}  }
class C{  public NodesHotThreadsRequest(String... nodesIds){  super(nodesIds);}  }
class C{  public void executeAction(final String jsCode){  actionsExecuted=true;  if (disableJavascript) {    return;  }  jsParser.executeFunctions(jsCode,null);}  }
class C{  private void updateNextClock(final PseudoTCPBase tcp,final Object lock){  try {    long now=PseudoTCPBase.now();synchronized (tcp) {      tcp.notifyClock(now);    }    long interval;synchronized (tcp) {      interval=tcp.getNextClock(PseudoTCPBase.now());    }    if (logger.isLoggable(Level.FINEST)) {      logger.log(Level.FINEST,tcp.debugName + " CLOCK sleep for " + interval);    }    if (interval < 0) {      if (interval == -1) {        interval=1000;      } else {        return;      }    }synchronized (lock) {      lock.wait(interval);    }  } catch (  InterruptedException ex) {  }}  }
class C{  public static void put(String relativeUrl,AsyncHttpResponseHandler handler){  client.post(getAbsoluteApiUrl(relativeUrl),handler);  TLog.log(TAG,"PUT " + relativeUrl);}  }
class C{  public Long zrem(final String key,final String... members){  checkIsInMulti();  client.zrem(key,members);  return client.getIntegerReply();}  }
class C{  public BaleenWebApi(BaleenManager baleenManager){  super();  this.baleenManager=baleenManager;}  }
class C{  public Measurement convert(Reading r,Measurement last){  if (last != null) {    this.Xt=last.getX();    this.Yt=last.getY();    this.Zt=last.getZ();  }  if (this.Xt > 9.E99) {    this.Xt=0;  }  if (this.Yt > 9.E99) {    this.Yt=0;  }  if (this.Zt > 9.E99) {    this.Zt=0;  }  return convert(r);}  }
class C{  public int cardinality(){  if (this.isNoView)   return this.elements.size(); else   return super.cardinality();}  }
class C{  public DisposableObjectMap(final int initialCapacity,final float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public void hide(){  hide(false,null);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.SINGLE_ASSOCIATION_END___MULTIPLICITY_1:    return multiplicity_1 != null && !multiplicity_1.isEmpty();case UmplePackage.SINGLE_ASSOCIATION_END___TYPE_1:  return TYPE_1_EDEFAULT == null ? type_1 != null : !TYPE_1_EDEFAULT.equals(type_1);case UmplePackage.SINGLE_ASSOCIATION_END___ROLE_NAME_1:return ROLE_NAME_1_EDEFAULT == null ? roleName_1 != null : !ROLE_NAME_1_EDEFAULT.equals(roleName_1);}return super.eIsSet(featureID);}  }
class C{  @Override public int graphType(){  return Drawable.TREE;}  }
class C{  public void switchState(final boolean showAnimation){  if (showAnimation) {    final int childCount=getChildCount();    for (int i=0; i < childCount; i++) {      bindChildAnimation(getChildAt(i),i,300);    }  }  mExpanded=!mExpanded;  if (!showAnimation) {    requestLayout();  }  invalidate();}  }
class C{  public ElasticInterpolator(EasingMode easingMode,double amplitude,double oscillations){  super(easingMode);  this.amplitude.set(amplitude);  this.oscillations.set(oscillations);}  }
class C{  protected void notifyListenersDatabaseOpen(DatabaseServer databaseServer) throws DatabaseException {  notifyListenersDatabaseOpen(databaseListeners,databaseServer);}  }
class C{  public DialChart(CategorySeries dataset,DialRenderer renderer){  super(dataset,renderer);  mRenderer=renderer;}  }
class C{  public boolean hasLastFragmentMorpheme(){  return splits.get(splits.size() - 1).hasMorpheme();}  }
class C{  static void exhaustInputStream(final InputStream inStream) throws IOException {  final byte buffer[]=new byte[1024];  while (inStream.read(buffer) >= 0) {    ;  }}  }
class C{  public void gotoFrame(int frameNumber) throws IOException {  writeCode(GOTO_FRAME);  out.writeUI16(2);  out.writeUI16(frameNumber);}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public final void combine(final AABB aabb){  lowerBound.x=lowerBound.x < aabb.lowerBound.x ? lowerBound.x : aabb.lowerBound.x;  lowerBound.y=lowerBound.y < aabb.lowerBound.y ? lowerBound.y : aabb.lowerBound.y;  upperBound.x=upperBound.x > aabb.upperBound.x ? upperBound.x : aabb.upperBound.x;  upperBound.y=upperBound.y > aabb.upperBound.y ? upperBound.y : aabb.upperBound.y;}  }
class C{  public static long sizeOfRelocatingShards(RoutingNode node,ClusterInfo clusterInfo,boolean subtractShardsMovingAway,String dataPath){  long totalSize=0;  for (  ShardRouting routing : node.shardsWithState(ShardRoutingState.RELOCATING,ShardRoutingState.INITIALIZING)) {    String actualPath=clusterInfo.getDataPath(routing);    if (dataPath.equals(actualPath)) {      if (routing.initializing() && routing.relocatingNodeId() != null) {        totalSize+=getShardSize(routing,clusterInfo);      } else       if (subtractShardsMovingAway && routing.relocating()) {        totalSize-=getShardSize(routing,clusterInfo);      }    }  }  return totalSize;}  }
class C{  public Transportation(int[] sup,int[] dem,int[][] costs){  super(sup,dem,new int[0][0],new int[0],new int[0],new int[0][0],costs);}  }
class C{  public void visitAttribute(Attribute attr){  if (cv != null) {    cv.visitAttribute(attr);  }}  }
class C{  @Override public void run(){  amIActive=true;  boolean isInputRaster=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".shp")) {    isInputRaster=false;  }  String outputFile=args[1];  if (inputFile.isEmpty() || outputFile.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if (inputFile.endsWith(".dep") && outputFile.endsWith(".shp")) {    outputFile=outputFile.replace(".shp",".dep");  }  if (inputFile.endsWith(".shp") && outputFile.endsWith(".dep")) {    outputFile=outputFile.replace(".dep",".shp");  }  try {    if (isInputRaster) {      String inputDataFile=inputFile.replace(".dep",".tas");      String outputDataFile=outputFile.replace(".dep",".tas");      FileUtilities.copyFile(new File(inputFile),new File(outputFile));      FileUtilities.copyFile(new File(inputDataFile),new File(outputDataFile));    } else {      File file=new File(inputFile);      if (file.exists()) {        FileUtilities.copyFile(new File(inputFile),new File(outputFile));      } else {        showFeedback("The input file does not exist.");        return;      }      file=new File(inputFile.replace(".shp",".shx"));      if (file.exists()) {        FileUtilities.copyFile(file,new File(outputFile.replace(".shp",".shx")));      }      file=new File(inputFile.replace(".shp",".dbf"));      if (file.exists()) {        FileUtilities.copyFile(file,new File(outputFile.replace(".shp",".dbf")));      }      file=new File(inputFile.replace(".shp",".prj"));      if (file.exists()) {        FileUtilities.copyFile(file,new File(outputFile.replace(".shp",".prj")));      }      file=new File(inputFile.replace(".shp",".sbn"));      if (file.exists()) {        FileUtilities.copyFile(file,new File(outputFile.replace(".shp",".sbn")));      }      file=new File(inputFile.replace(".shp",".sbx"));      if (file.exists()) {        FileUtilities.copyFile(file,new File(outputFile.replace(".shp",".sbx")));      }    }    showFeedback("Operation complete.");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected void readHeader() throws IOException {  stream.seek(0L);  int endian=stream.readUnsignedShort();  if (!isValidEndianTag(endian)) {    throw new IllegalArgumentException(JaiI18N.getString("XTIFFDirectory1"));  }  isBigEndian=(endian == 0x4d4d);  int magic=readUnsignedShort(stream);  if (magic != 42) {    throw new IllegalArgumentException(JaiI18N.getString("XTIFFDirectory2"));  }}  }
class C{  public GeometryBuffer(boolean depthBuffer){  this.depthBuffer=depthBuffer;}  }
class C{  public void remove(int key){  if (key == 0) {    zeroKey=false;    return;  }  checkSizeRemove();  int index=getIndex(key);  int plus=1;  do {    int k=keys[index];    if (k == key) {      keys[index]=0;      values[index]=DELETED;      deletedCount++;      size--;      return;    } else     if (k == 0 && values[index] == 0) {      return;    }    index=(index + plus++) & mask;  } while (plus <= len);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ListCellRendererBasic(IRenderString renderer){  m_renderer=renderer;}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  List oListaPendientes=null;  try {    oListaPendientes=PagoElectronicoManagerHelper.obtenerListaLiquidacionesPendientesNIF(request,UserCertificateUtil.getUserData(request).getM_nif());  } catch (  SigemException e) {    logger.error(e.getMessage(),e);    request.setAttribute(ERROR_KEY,e.getMessage());    return mapping.findForward(ERROR_FORWARD);  }  request.setAttribute(LISTA_PENDIENTES_KEY,oListaPendientes);  return mapping.findForward(SUCCESS_FORWARD);}  }
class C{  public select addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static Object eval(ScriptEngine self,String script,Binding binding) throws ScriptException {  storeBindingVars(self,binding);  Object result=self.eval(script);  retrieveBindingVars(self,binding);  return result;}  }
class C{  public static String hideDeleteDropHintScript(){  return DELETE_TAG_DROP_REMOVE_SCRIPT;}  }
class C{  public ObjectBuildingQuery prepareNestedQuery(ObjectBuildingQuery sourceQuery){  if (sourceQuery.isObjectLevelReadQuery()) {    ObjectLevelReadQuery objectQuery=(ObjectLevelReadQuery)sourceQuery;    ObjectLevelReadQuery nestedObjectQuery=objectQuery.getAggregateQuery(this);    if (nestedObjectQuery != null) {      return nestedObjectQuery;    }    nestedObjectQuery=objectQuery;    String attributeName=getAttributeName();    if ((objectQuery.isPartialAttribute(attributeName))) {      nestedObjectQuery=(ObjectLevelReadQuery)objectQuery.clone();      if (objectQuery.hasPartialAttributeExpressions()) {        nestedObjectQuery.setPartialAttributeExpressions(extractNestedExpressions(objectQuery.getPartialAttributeExpressions(),nestedObjectQuery.getExpressionBuilder()));      }    }    if (objectQuery.isAttributeBatchRead(this.descriptor,attributeName)) {      if (nestedObjectQuery == objectQuery) {        nestedObjectQuery=(ObjectLevelReadQuery)nestedObjectQuery.clone();      }      nestedObjectQuery.setProperties(objectQuery.getProperties());      nestedObjectQuery.getBatchFetchPolicy().setAttributeExpressions(extractNestedExpressions(objectQuery.getBatchReadAttributeExpressions(),nestedObjectQuery.getExpressionBuilder()));      nestedObjectQuery.computeBatchReadAttributes();    }    FetchGroup parentQueryFetchGroup=sourceQuery.getExecutionFetchGroup(this.descriptor);    if (parentQueryFetchGroup != null) {      if (nestedObjectQuery == objectQuery) {        nestedObjectQuery=(ObjectLevelReadQuery)nestedObjectQuery.clone();      }      FetchGroup targetFetchGroup=parentQueryFetchGroup.getGroup(getAttributeName());      if (targetFetchGroup != null && sourceQuery.getDescriptor().hasFetchGroupManager()) {        nestedObjectQuery.setFetchGroup(targetFetchGroup);      } else {        targetFetchGroup=null;        nestedObjectQuery.setFetchGroup(null);        nestedObjectQuery.setFetchGroupName(null);      }    }    if (nestedObjectQuery != sourceQuery) {      objectQuery.setAggregateQuery(this,nestedObjectQuery);      return nestedObjectQuery;    }  }  return sourceQuery;}  }
class C{  public void shutdown(){  jobService.shutdown();}  }
class C{  public void testElement(){  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(i,q.element());    q.poll();  }  try {    q.element();    shouldThrow();  } catch (  NoSuchElementException success) {  }}  }
class C{  public long contentLength(){  return this.contentLength;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(stack.getUIMgrSafe().isFullScreen());}  }
class C{  public <T extends View>T findViewByIdEfficient(int parentId,int id){  return mCacheView.findViewByIdEfficient(parentId,id);}  }
class C{  public Stat stat() throws IOException {  return Stat.get(pid);}  }
class C{  public Ping ping() throws IOException {  Ping ping=new Ping();  int pingId;synchronized (this) {    if (shutdown) {      throw new IOException("shutdown");    }    pingId=nextPingId;    nextPingId+=2;    if (pings == null)     pings=new HashMap<Integer,Ping>();    pings.put(pingId,ping);  }  writePing(pingId,ping);  return ping;}  }
class C{  private void startupPlugins(){  for (  PluginEntry entry : entryMap.values()) {    if (entry.onload) {      getPlugin(entry.service);    } else {      pluginMap.put(entry.service,null);    }  }}  }
class C{  public XORWOW(long seed){  super(seed);}  }
class C{  public <T extends ManagedEntity>T searchManagedEntity(ManagedEntity parent,String type,String name) throws VMWareException {  try {    InventoryNavigator navigator=new InventoryNavigator(parent);    ManagedEntity entity=navigator.searchManagedEntity(type,name);    return (T)entity;  } catch (  InvalidProperty e) {    throw new VMWareException(e);  }catch (  RuntimeFault e) {    throw new VMWareException(e);  }catch (  RemoteException e) {    throw new VMWareException(e);  }}  }
class C{  public String moduleAlias(Module pkg){  if (compiler.isCompilingLanguageModule() && pkg.getLanguageModule() == pkg) {    return "";  }  StringBuilder sb=new StringBuilder("m$");  sb.append(Long.toString(getUID(pkg),36));  return sb.toString();}  }
class C{  public static Report insert(Dfareporting reporting,Long userProfileId,DimensionValue advertiser,String startDate,String endDate) throws Exception {  System.out.println("=================================================================");  System.out.printf("Creating a new standard report for advertiser %s%n",advertiser.getValue());  System.out.println("=================================================================");  Report report=new Report();  report.setName(String.format("API Report: Advertiser %s",advertiser.getValue()));  report.setFileName("api_report_files");  report.setType("STANDARD");  Report.Criteria criteria=new Report.Criteria();  criteria.setDateRange(new DateRange().setStartDate(new DateTime(startDate)).setEndDate(new DateTime(endDate)));  criteria.setDimensions(ImmutableList.of(new SortedDimension().setName("dfa:advertiser")));  criteria.setMetricNames(ImmutableList.of("dfa:clicks","dfa:impressions"));  criteria.setDimensionFilters(ImmutableList.of(advertiser));  report.setCriteria(criteria);  Report result=reporting.reports().insert(userProfileId,report).execute();  System.out.printf("Created report with ID \"%s\" and display name \"%s\"%n",result.getId(),result.getName());  System.out.println();  return result;}  }
class C{  final String removeImportsFromComments(final String content){  return content.replaceAll(REGEX_IMPORT_FROM_COMMENTS,StringUtils.EMPTY);}  }
class C{  public void add(final ChronoStorageBlock block){  int revCount=block.getRevisionCounter();  this.size+=block.length();  if (first == null) {    first=block;  } else {    ChronoStorageBlock previous=null, current=first;    do {      if (revCount < current.getRevisionCounter()) {        block.setCounterPrev(previous);        block.setCounterNext(current);        if (previous != null) {          previous.setCounterNext(block);        }        current.setCounterPrev(block);        if (current == this.first) {          this.first=block;        }        return;      }      previous=current;      current=current.getCounterNext();    } while (current != null);    previous.setCounterNext(block);    block.setCounterPrev(previous);  }}  }
class C{  void reportWarning(String msg,Element e){  messager.printMessage(Diagnostic.Kind.WARNING,msg,e);}  }
class C{  public void end(String namespace,String name) throws Exception {  ResourceBundleBean top=null;  try {    top=(ResourceBundleBean)digester.pop();  } catch (  Exception e) {    throw new IllegalStateException("Popped object is not a " + CLASS_NAME + " instance");  }  ApplicationBean fcb=(ApplicationBean)digester.peek();  if (null != fcb.getResourceBundle(top.getVar())) {    throw new IllegalStateException("Multiple ResourceBundle definitions " + "with the same name: " + top.getVar() + ".");  }  fcb.addResourceBundle(top);}  }
class C{  @After public void onSuperAfter(){  doAfter();}  }
class C{  public static String toString(URI uri) throws IOException {  return toString(uri,Charset.defaultCharset());}  }
class C{  public boolean isShowMixedViews(){  return m_mixedViewsCheckbox.isSelected();}  }
class C{  public boolean remove(Object o){  final ReentrantLock lock=this.lock;  lock.lock();  try {    for (    TenantQueue q : qs.values()) {      if (q.remove(o))       return true;    }    return false;  }  finally {    lock.unlock();  }}  }
class C{  public AnnotationFormatError(String message){  super(message);}  }
class C{  public DuplicateException(){  super();}  }
class C{  public static Bitmap inputStreamToBitmap(InputStream inputStream) throws Exception {  return BitmapFactory.decodeStream(inputStream);}  }
class C{  public static void classesNotConfigured(Class<?> destination,Class<?> source){  throw new MappingNotFoundException(MSG.INSTANCE.message(Constants.mappingNotFoundException2,destination.getSimpleName(),source.getSimpleName()));}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public static BlinkConn newConnection(Socket socket,int socketBufferSize,String resourcePath,String fileMark,ReceiveListener listener) throws Exception {  File rootDir=new File(resourcePath,DEFAULT_RESOURCE_DIR);  DiskResource resource=new DiskResource(rootDir,fileMark);  ReceiveParser parser=new ReceiveParser(resource);  SocketAdapter socketAdapter=new SocketAdapter(socket,socketBufferSize,parser);  ExecutorDelivery delivery=new ExecutorDelivery(new Handler(Looper.getMainLooper()),listener);  return new BlinkConn(socketAdapter,delivery,socketAdapter,delivery,resource);}  }
class C{  @Override public void PC(final PdfObject pdfObject,final int type){  if (showMethods) {    System.out.println("DefaultActionHandler.PC()");  }  final FormObject pageDictionary=(FormObject)pdfObject.getDictionary(type);  currentPdfFile.checkResolved(pageDictionary);  if (pageDictionary != null) {    final FormObject PCdictionary=(FormObject)pageDictionary.getDictionary(PdfDictionary.PC);    currentPdfFile.checkResolved(PCdictionary);    if (PCdictionary != null) {      final String jsCode=PCdictionary.getTextStreamValue(PdfDictionary.JS);      javascript.executeAction(jsCode);    }  }}  }
class C{  public String innerName(int nth){  int i=innerNameIndex(nth);  if (i == 0)   return null; else   return constPool.getUtf8Info(i);}  }
class C{  public static boolean isValid(Date expirationDate){  Date currentDate=new Date();  String formattedDate=dateFormat.format(currentDate);  currentDate=convertDate(formattedDate);  boolean isExpired=currentDate.after(expirationDate);  boolean isEqual=currentDate.equals(expirationDate);  return isExpired || isEqual;}  }
class C{  protected void initializeDocument(Document document){  SVGOMDocument doc=(SVGOMDocument)document;  CSSEngine eng=doc.getCSSEngine();  if (eng == null) {    SVGDOMImplementation impl;    impl=(SVGDOMImplementation)doc.getImplementation();    eng=impl.createCSSEngine(doc,this);    eng.setCSSEngineUserAgent(new CSSEngineUserAgentWrapper(userAgent));    doc.setCSSEngine(eng);    eng.setMedia(userAgent.getMedia());    String uri=userAgent.getUserStyleSheetURI();    if (uri != null) {      try {        ParsedURL url=new ParsedURL(uri);        eng.setUserAgentStyleSheet(eng.parseStyleSheet(url,"all"));      } catch (      Exception e) {        userAgent.displayError(e);      }    }    eng.setAlternateStyleSheet(userAgent.getAlternateStyleSheet());  }}  }
class C{  @Nullable public static String capitalize(@Nullable final String string){  if (isBlank(string)) {    return string;  }  final char firstChar=string.charAt(0);  final char newChar=Character.toUpperCase(firstChar);  if (firstChar == newChar) {    return string;  }  int strLen=string.length();  char[] newChars=new char[strLen];  newChars[0]=newChar;  string.getChars(1,strLen,newChars,1);  return String.valueOf(newChars);}  }
class C{  private void performDragOrPinch(){  if (selectedObject == null) {    return;  }  float currScale=!mCurrentTouchPointPosAndScale.isUpdateScale() ? 1.0f : mCurrentTouchPointPosAndScale.getScale() == 0.0f ? 1.0f : mCurrentTouchPointPosAndScale.getScale();  extractCurrentTouchPointInfo();  float newPosX=mCurrentTouchPointX - startPosX * currScale;  float newPosY=mCurrentTouchPointY - startPosY * currScale;  float deltaX=mCurrentTouchPoint.getX() - mPrevTouchPoint.getX();  float deltaY=mCurrentTouchPoint.getY() - mPrevTouchPoint.getY();  float newScale;  if (getMode() == MODE_ST_GRAB) {    if (deltaX < 0.0f || deltaY < 0.0f) {      newScale=mCurrentTouchPointPosAndScale.getScale() - 0.04f;    } else {      newScale=mCurrentTouchPointPosAndScale.getScale() + 0.04f;    }    if (newScale < 0.35f)     return;  } else {    newScale=startScaleOverPinchDiam * mCurrentTouchPointDiam;  }  if (!mDragOccurred) {    if (!pastThreshold(Math.abs(deltaX),Math.abs(deltaY),newScale)) {      return;    }  }  float newScaleX=startScaleXOverPinchWidth * mCurrentTouchPointWidth;  float newScaleY=startScaleYOverPinchHeight * mCurrentTouchPointHeight;  float newAngle=startAngleMinusPinchAngle + mCurrentTouchPointAng;  mCurrentTouchPointPosAndScale.set(newPosX,newPosY,newScale,newScaleX,newScaleY,newAngle);  objectCanvas.setPositionAndScale(selectedObject,mCurrentTouchPointPosAndScale,mCurrentTouchPoint);  mDragOccurred=true;}  }
class C{  public static String arrayToHexString(byte[] array){  return arrayToHexString(array,0,array.length);}  }
class C{  public static boolean makeDirs(boolean forcelocal){  CONF_DIR="l1/";  MARKUP_DIR="l2/";  LOG_DIR="l3/";  try {    setStorage(forcelocal);    if (Cfg.DEBUG) {      Check.log(TAG + " (makeDirs): hidden = " + hidden());    }    boolean success=true;    success&=createDirectory(conf());    success&=createDirectory(markup());    success&=createDirectory(logs());    Status.getAppContext().getDir(UPLOADS,Status.getAppContext().MODE_PRIVATE);    if (Cfg.FILE && Cfg.DEBUG && !forcelocal) {      final File file=new File(getCurLogfile());      file.getParentFile().mkdirs();      file.createNewFile();    }    initialized=success;    return success;  } catch (  final Exception e) {    if (Cfg.EXCEPTION) {      Check.log(e);    }    if (Cfg.DEBUG) {      Check.log(TAG + " Error: " + e.toString());    }  }  return false;}  }
class C{  public static double geoHashCellHeight(int level){  assert level >= 0;  return EARTH_POLAR_DISTANCE / (1L << ((((level + 1) / 2) * 2) + ((level / 2) * 3)));}  }
class C{  public Date(String date){  String[] fields=date.split("/");  if (fields.length != 3) {    throw new IllegalArgumentException("Invalid date");  }  month=Integer.parseInt(fields[0]);  day=Integer.parseInt(fields[1]);  year=Integer.parseInt(fields[2]);  if (!isValid(month,day,year))   throw new IllegalArgumentException("Invalid date");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:33.076 -0500",hash_original_method="29CED80F2164214524C1FC1AF02F2B1A",hash_generated_method="73CFA3025FD6B2E83A59778D7106E4C2") public boolean allowIncomingConnect(BluetoothDevice device,boolean value){  if (DBG)   log("allowIncomingConnect(" + device + ":"+ value+ ")");  try {    return mService.allowIncomingConnect(device,value);  } catch (  RemoteException e) {    Log.e(TAG,"",e);    return false;  }}  }
class C{  public ExistsQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-26 10:48:13.707 -0500",hash_original_method="4A6878651936579B382F987B5333B654",hash_generated_method="051AC06E323B7B09D3610CF43978BDD0") public PdfDocument(){  mNativeDocument=nativeCreateDocument();  mCloseGuard.open("close");}  }
class C{  private void installLayout(JRootPane root){  if (layoutManager == null) {    layoutManager=createLayoutManager();  }  savedOldLayout=root.getLayout();  root.setLayout(layoutManager);}  }
class C{  public void endAction(MotionEvent me){  OnChartGestureListener l=mChart.getOnChartGestureListener();  if (l != null)   l.onChartGestureEnd(me,mLastGesture);}  }
class C{  public void initializeDefinition(String triggerType,String triggerEvent,String tableName,String actionType,String actionOrientation){  m_type=triggerType;  m_event=triggerEvent;  m_table=tableName;  m_actionType=actionType;  m_actionOrientation=actionOrientation;  s_logger.log(Level.FINEST,toString());}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  protected SVGOMSVGElement(){}  }
class C{  @Inline public void postAlloc(ObjectReference object){  initializeHeader(object,true);}  }
class C{  private UnicodeBlock(String idName,String alias){  this(idName);  map.put(alias,this);}  }
class C{  public boolean adjustValue(float key,float amount){  int index=index(key);  if (index < 0) {    return false;  } else {    _values[index]+=amount;    return true;  }}  }
class C{  public void updateControls(boolean keyStoreContentsChanged){  KeyStoreHistory history=getActiveKeyStoreHistory();  if (history == null) {    updateControlsNoKeyStoresOpen();    return;  }  KeyStoreState currentState=history.getCurrentState();  if (keyStoreContentsChanged) {    try {      String selectedAlias=getSelectedEntryAlias();      ((KeyStoreTableModel)getActiveKeyStoreTable().getModel()).load(history);      if (selectedAlias != null) {        setSelectedEntryByAlias(selectedAlias);      }    } catch (    GeneralSecurityException ex) {      DError.displayError(frame,ex);    }catch (    CryptoException ex) {      DError.displayError(frame,ex);    }  }  if (!currentState.isSavedState()) {    saveAction.setEnabled(true);  } else {    saveAction.setEnabled(false);  }  boolean saveAll=false;  for (int i=0; i < histories.size(); i++) {    KeyStoreHistory h=histories.get(i);    if (!h.getCurrentState().isSavedState()) {      saveAll=true;      break;    }  }  saveAllAction.setEnabled(saveAll);  closeAction.setEnabled(true);  closeAllAction.setEnabled(true);  if (jkstpKeyStores.getTabCount() > 1) {    closeOthersAction.setEnabled(true);  } else {    closeOthersAction.setEnabled(false);  }  KeyStore keyStore=currentState.getKeyStore();  KeyStoreType type=KeyStoreType.resolveJce(keyStore.getType());  if (type.isFileBased()) {    saveAsAction.setEnabled(true);  }  updateUndoRedoControls(currentState);  if (type.isFileBased()) {    updateCutCopyPasteControls();  }  generateKeyPairAction.setEnabled(true);  generateSecretKeyAction.setEnabled(type.supportsKeyEntries());  importTrustedCertificateAction.setEnabled(true);  importKeyPairAction.setEnabled(true);  propertiesAction.setEnabled(true);  if (type.isFileBased()) {    setPasswordAction.setEnabled(true);  }  setDefaultStatusBarText();  if (!type.hasEntryPasswords() || !type.isFileBased()) {    unlockKeyPairAction.setEnabled(false);    setKeyPairPasswordAction.setEnabled(false);    unlockKeyAction.setEnabled(false);    setKeyPasswordAction.setEnabled(false);  } else {    unlockKeyPairAction.setEnabled(true);    setKeyPairPasswordAction.setEnabled(true);    unlockKeyAction.setEnabled(true);    setKeyPasswordAction.setEnabled(true);  }  if (type == KeyStoreType.MS_CAPI_PERSONAL || type == KeyStoreType.PKCS11) {    keyPairPrivateKeyDetailsAction.setEnabled(false);    keyDetailsAction.setEnabled(false);    renameKeyAction.setEnabled(false);    renameKeyPairAction.setEnabled(false);    renameTrustedCertificateAction.setEnabled(false);    exportKeyPairAction.setEnabled(false);    exportKeyPairPrivateKeyAction.setEnabled(false);    jmKeyPairEditCertChain.setEnabled(false);    appendToCertificateChainAction.setEnabled(false);    removeFromCertificateChainAction.setEnabled(false);    jmKeyPairImportCaReply.setEnabled(false);  } else {    keyPairPrivateKeyDetailsAction.setEnabled(true);    keyDetailsAction.setEnabled(true);    renameKeyAction.setEnabled(true);    renameKeyPairAction.setEnabled(true);    renameTrustedCertificateAction.setEnabled(true);    exportKeyPairAction.setEnabled(true);    exportKeyPairPrivateKeyAction.setEnabled(true);    jmKeyPairEditCertChain.setEnabled(true);    appendToCertificateChainAction.setEnabled(true);    removeFromCertificateChainAction.setEnabled(true);    jmKeyPairImportCaReply.setEnabled(true);  }  if (type.isFileBased()) {    jmChangeType.setEnabled(true);    if (type == JKS) {      jrbmiChangeTypeJks.setSelected(true);      jrbmiKeyStoreChangeTypeJks.setSelected(true);    } else     if (type == JCEKS) {      jrbmiChangeTypeJceks.setSelected(true);      jrbmiKeyStoreChangeTypeJceks.setSelected(true);    } else     if (type == PKCS12) {      jrbmiChangeTypePkcs12.setSelected(true);      jrbmiKeyStoreChangeTypePkcs12.setSelected(true);    } else     if (type == BKS_V1) {      jrbmiChangeTypeBksV1.setSelected(true);      jrbmiKeyStoreChangeTypeBksV1.setSelected(true);    } else     if (type == BKS) {      jrbmiChangeTypeBks.setSelected(true);      jrbmiKeyStoreChangeTypeBks.setSelected(true);    } else {      jrbmiChangeTypeUber.setSelected(true);      jrbmiKeyStoreChangeTypeUber.setSelected(true);    }  } else {    jmKeyStoreChangeType.setEnabled(false);  }  frame.getContentPane().remove(jQuickStart);  frame.getContentPane().add(jkstpKeyStores,BorderLayout.CENTER);  updateKeyStoreTabsText();  updateApplicationTitle();  frame.repaint();}  }
class C{  public static int uniform(int N){  if (N <= 0)   throw new IllegalArgumentException("Parameter N must be positive");  return random.nextInt(N);}  }
class C{  public DirectorApp directorApp(File dstFolder,String profile){  return performWithoutMissingBundlePool(null);}  }
class C{  public static SimState readFromCheckpoint(InputStream stream) throws IOException, ClassNotFoundException, OptionalDataException, ClassCastException {  ObjectInputStream s=new ObjectInputStream(new GZIPInputStream(new BufferedInputStream(stream)));  SimState state=(SimState)(s.readObject());  state.awakeFromCheckpoint();  return state;}  }
class C{  private static MqttFixedHeader decodeFixedHeader(ByteBuf buffer){  short b1=buffer.readUnsignedByte();  MqttMessageType messageType=MqttMessageType.valueOf(b1 >> 4);  boolean dupFlag=(b1 & 0x08) == 0x08;  int qosLevel=(b1 & 0x06) >> 1;  boolean retain=(b1 & 0x01) != 0;  int remainingLength=0;  int multiplier=1;  short digit;  int loops=0;  do {    digit=buffer.readUnsignedByte();    remainingLength+=(digit & 127) * multiplier;    multiplier*=128;    loops++;  } while ((digit & 128) != 0 && loops < 4);  if (loops == 4 && (digit & 128) != 0) {    throw new DecoderException("remaining length exceeds 4 digits (" + messageType + ')');  }  return new MqttFixedHeader(messageType,dupFlag,MqttQoS.valueOf(qosLevel),retain,remainingLength);}  }
class C{  public boolean isNegated(){  return (type != null) && type.isNegated();}  }
class C{  public CqAttributesFactory(){}  }
class C{  void pushLS(){  LSlabels.addElement(null);  LSparamSeq.addElement(new Vector());}  }
class C{  public static void startFetchingAccountInformation(Context context,Profile profile,String accountName){  if (TextUtils.isEmpty(accountName))   return;  if (sToNamePicture.get(accountName) != null)   return;  final int imageSidePixels=context.getResources().getDimensionPixelOffset(R.dimen.user_picture_size);  ProfileDownloader.startFetchingAccountInfoFor(profile,accountName,imageSidePixels,false);}  }
class C{  public Boolean isConsolidate(){  return consolidate;}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (o instanceof Cell) {    Cell cell=(Cell)o;    return (cell.col == col) && (cell.row == row);  }  return false;}  }
class C{  private static void assertDocWithValsIsFirst(final int numDocs,final String sort){  assertQ(sort,req("q","*:*","rows","" + numDocs,"sort",sort),"//result[@numFound='" + numDocs + "']","//result/doc[1]/float[@name='id']='0.0'");}  }
class C{  public void clear(){synchronized (lock) {    queue=createHeap();  }}  }
class C{  public GenPanel(){  initComponents();}  }
class C{  public String urlEncode(String toEncode){  try {    return URLEncoder.encode(toEncode,"utf-8");  } catch (  Exception e) {    LOG.error("Error url encoding " + toEncode + ": "+ e);  }  return toEncode;}  }
class C{  public void testVocabulary() throws IOException {  assertVocabulary(analyzer,getDataPath("ptminimaltestdata.zip"),"ptminimal.txt");}  }
class C{  public void testShowHideCursor(){  withTerminalSized(3,3);  assertTrue("Initially the cursor should be visible",mTerminal.isShowingCursor());  enterString("\033[?25l");  assertFalse(mTerminal.isShowingCursor());  enterString("\033[?25h");  assertTrue(mTerminal.isShowingCursor());  enterString("\033[?25l");  assertFalse(mTerminal.isShowingCursor());  mTerminal.reset();  assertTrue("Resetting the terminal should show the cursor",mTerminal.isShowingCursor());  enterString("\033[?25l");  assertFalse(mTerminal.isShowingCursor());  enterString("\033c");  assertTrue(mTerminal.isShowingCursor());}  }
class C{  private final String writeQDStrings(Attribute attr) throws NamingException {  return writeQDescrs(attr);}  }
class C{  public void SetDirectory(final String dir){  PlugInDirectory=new String(dir);}  }
class C{  public boolean containsKey(Class<?> category){  return category != null && AttributeSetUtilities.verifyAttributeCategory(category,Attribute.class) != null && attrMap.get(category) != null;}  }
class C{  public void test_from_and_from_named_with_unknown_graph() throws MalformedQueryException, TokenMgrError, ParseException {  final String sparql="" + "PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n" + "PREFIX dc: <http://purl.org/dc/elements/1.1/>\n"+ "SELECT ?who ?g ?mbox\n"+ "FROM <http://example.org/dft.ttl>\n"+ "FROM NAMED <http://example.org/alice>\n"+ "FROM NAMED <http://example.org/bob>\n"+ "WHERE {\n"+ "    ?g dc:publisher ?who .\n"+ "    GRAPH ?g { ?x foaf:mbox ?mbox } \n"+ "}";  final QueryRoot expected=new QueryRoot(QueryType.SELECT);{{      final Map<String,String> prefixDecls=new LinkedHashMap<String,String>(PrefixDeclProcessor.defaultDecls);      prefixDecls.put("foaf",FOAFVocabularyDecl.NAMESPACE);      prefixDecls.put("dc",DC.NAMESPACE);      expected.setPrefixDecls(prefixDecls);    }{      final ProjectionNode projection=new ProjectionNode();      expected.setProjection(projection);      projection.addProjectionVar(new VarNode("who"));      projection.addProjectionVar(new VarNode("g"));      projection.addProjectionVar(new VarNode("mbox"));    }{      final BigdataURI uri1=valueFactory.createURI("http://example.org/dft.ttl");      final BigdataURI uri2=valueFactory.createURI("http://example.org/alice");      final BigdataURI uri3=valueFactory.createURI("http://example.org/bob");      final BigdataValue[] values=new BigdataValue[]{uri1,uri2};      tripleStore.getLexiconRelation().addTerms(values,values.length,false);      final DatasetImpl dataset=new DatasetImpl();      dataset.addDefaultGraph(uri1);      dataset.addNamedGraph(uri2);      dataset.addNamedGraph(uri3);      final DatasetNode datasetNode=new DatasetNode(dataset,false);      expected.setDataset(datasetNode);    }{      final JoinGroupNode whereClause=new JoinGroupNode();      expected.setWhereClause(whereClause);      whereClause.addChild(new StatementPatternNode(new VarNode("g"),new ConstantNode(makeIV(valueFactory.createURI(DC.PUBLISHER.toString()))),new VarNode("who"),null,Scope.DEFAULT_CONTEXTS));      final JoinGroupNode group=new JoinGroupNode();      whereClause.addChild(group);      group.setContext(new VarNode("g"));      group.addChild(new StatementPatternNode(new VarNode("x"),new ConstantNode(makeIV(valueFactory.createURI(FOAFVocabularyDecl.mbox.toString()))),new VarNode("mbox"),new VarNode("g"),Scope.NAMED_CONTEXTS));    }  }  final QueryRoot actual=parse(sparql,baseURI);  assertSameAST(sparql,expected,actual);}  }
class C{  protected static double convertPercentileToX(double percentileLevelIteratedTo){  double x=1 / (1.0D - (percentileLevelIteratedTo / 100.0D));  return Math.log10(x);}  }
class C{  private void writeDataToDestination(State state,byte[] data,int bytesRead) throws StopRequest {  for (; ; ) {    try {      if (state.mStream == null) {        state.mStream=new FileOutputStream(state.mFilename,true);      }      state.mStream.write(data,0,bytesRead);      closeDestination(state);      return;    } catch (    IOException ex) {      if (!Helpers.isExternalMediaMounted()) {        throw new StopRequest(DownloaderService.STATUS_DEVICE_NOT_FOUND_ERROR,"external media not mounted while writing destination file");      }      long availableBytes=Helpers.getAvailableBytes(Helpers.getFilesystemRoot(state.mFilename));      if (availableBytes < bytesRead) {        throw new StopRequest(DownloaderService.STATUS_INSUFFICIENT_SPACE_ERROR,"insufficient space while writing destination file",ex);      }      throw new StopRequest(DownloaderService.STATUS_FILE_ERROR,"while writing destination file: " + ex.toString(),ex);    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean validate(ResponseHeaders networkResponse){  if (networkResponse.headers.getResponseCode() == HttpURLConnection.HTTP_NOT_MODIFIED) {    return true;  }  if (lastModified != null && networkResponse.lastModified != null && networkResponse.lastModified.getTime() < lastModified.getTime()) {    return true;  }  return false;}  }
class C{  public final CC gapAfter(String boundsSize){  hor.setGapAfter(ConstraintParser.parseBoundSize(boundsSize,true,true));  return this;}  }
class C{  public void testStringWithBlockComment() throws IOException {  final String sql="INSERT INTO Entity ( Id, Column1, Column2 ) VALUES ( 1, '/* some text', 'some text */' )";  final InputStream stream=this.getStream(R.raw.string_with_block_comment);  List<String> commands=SqlParser.parse(stream);  assertEquals(1,commands.size());  assertEquals(sql,commands.get(0));}  }
class C{  protected final void fail(Throwable ex){  ExceptionHelper.throwIfFatal(ex);  s.cancel();  error(ex);}  }
class C{  public Request session(String value){  Objects.requireNonNull(value);  _cookies.put("JSESSIONID",value);  return this;}  }
class C{  public final void writeLong(long val) throws IOException {  Memory.pokeLong(scratch,0,val,ByteOrder.BIG_ENDIAN);  write(scratch,0,SizeOf.LONG);}  }
class C{  public static byte[] SHA1(final byte[] message){  return SHA1(message,0,message.length);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  int progress;  int i, j, n;  int oneHundredthTotal;  int numRecs;  int FID=0;  ShapeType shapeType;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON && shapeType.getBaseType() != ShapeType.POLYLINE) {      showFeedback("The input shapefile must have a POLYLINE or POLYGON shape type.");      return;    }    numRecs=input.getNumberOfRecords();    oneHundredthTotal=numRecs / 100;    AttributeTable reader=input.getAttributeTable();    int numFields=reader.getFieldCount();    DBFField[] fields=reader.getAllFields();    ShapeFile output=new ShapeFile(outputFile,ShapeType.POINT,fields);    output.setProjectionStringFromOtherShapefile(input);    Object[][] attributeTableRecords=new Object[numRecs][numFields];    Object[] dataRow;    int a=0;    while ((dataRow=reader.nextRecord()) != null) {      System.arraycopy(dataRow,0,attributeTableRecords[a],0,numFields);      a++;    }    com.vividsolutions.jts.geom.Point p=null;    com.vividsolutions.jts.geom.Geometry[] JTSGeometries=null;    n=0;    progress=0;    for (    ShapeFileRecord record : input.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        JTSGeometries=record.getGeometry().getJTSGeometries();        for (a=0; a < JTSGeometries.length; a++) {          p=JTSGeometries[a].getCentroid();          Coordinate pCoord=p.getCoordinate();          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(pCoord.x,pCoord.y);          Object[] rowData=attributeTableRecords[record.getRecordNumber() - 1];          output.addRecord(wbGeometry,rowData);        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Reading shapefile data:",progress);      }    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public DefaultMultiValueCategoryDataset(){  this.data=new KeyedObjects2D();  this.minimumRangeValue=null;  this.maximumRangeValue=null;  this.rangeBounds=new Range(0.0,0.0);}  }
class C{  public CombinedDataset(SeriesDataset[] data){  add(data);}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public void checkStateErrors(MediaRecorderStateErrors stateErrors){  assertTrue(!stateErrors.errorInRecordingState);  assertTrue(stateErrors.errorInInitialState);  assertTrue(stateErrors.errorInInitialStateAfterReset);  assertTrue(stateErrors.errorInInitialStateAfterStop);  assertTrue(stateErrors.errorInInitializedState);  assertTrue(stateErrors.errorInErrorState);  assertTrue(stateErrors.errorInDataSourceConfiguredState);  assertTrue(stateErrors.errorInPreparedState);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  private static String formatCookie(final String name,final String value,final String path){  return String.format("%s=%s;%s",name,value,path);}  }
class C{  @Override public void sendAllFunctionStates(DccThrottle t){  log.debug("Sending state of all functions");  try {    for (int cnt=0; cnt < 29; cnt++) {      Method getF=t.getClass().getMethod("getF" + cnt,(Class[])null);      StringBuilder message=new StringBuilder(buildPacketWithChar('A'));      if ((Boolean)getF.invoke(t,(Object[])null)) {        message.append("F1");      } else {        message.append("F0");      }      message.append(cnt);      for (      ControllerInterface listener : controllerListeners) {        listener.sendPacketToDevice(message.toString());      }    }  } catch (  NoSuchMethodException ea) {    log.warn(ea.getLocalizedMessage(),ea);    return;  }catch (  IllegalAccessException eb) {    log.warn(eb.getLocalizedMessage(),eb);    return;  }catch (  java.lang.reflect.InvocationTargetException ec) {    log.warn(ec.getLocalizedMessage(),ec);    return;  }}  }
class C{  public void testNonexistent() throws Exception {  Similarity sim=getSimilarity("sdfdsfdsfdswr5fsdfdsfdsfs");  assertEquals(BM25Similarity.class,sim.getClass());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrremovechild1.class,args);}  }
class C{  protected void postDrain(Collection c){}  }
class C{  public static boolean isPotentialEmergencyNumber(String number,String defaultCountryIso){  return isEmergencyNumberInternal(number,defaultCountryIso,false);}  }
class C{  public List<DecommissionedResourceRep> listDeactivatedSystems(){  DecommissionedResources response=client.get(DecommissionedResources.class,baseUrl + "/deactivated-systems");  return defaultList(response.getResources());}  }
class C{  public void increment(int i,int d){  boundsCheck(i);  expandFor(i,d);  vector[i]++;}  }
class C{  public long updateTtl(long elapsedTime){  this.ttl-=elapsedTime;  this.currentAnimTimeMillis+=elapsedTime;  if (this.currentAnimTimeMillis >= this.getUpdateTextureMillis() && this.animFrames > 0) {    this.currentAnimTimeMillis=0;    int pos=this.getTextPos();    pos++;    if (pos < this.animFrames) {      this.setTextPos(pos);    } else {      this.setTextPos(0);    }  }  return this.ttl;}  }
class C{  @Override protected void extendSignatureTag() throws DSSException {  super.extendSignatureTag();  if (!xadesSignature.hasLTProfile() || SignatureLevel.XAdES_XL.equals(params.getSignatureLevel())) {    final ValidationContext valContext=xadesSignature.getSignatureValidationContext(certificateVerifier);    removeOldCertificateValues();    removeOldRevocationValues();    final List<CertificateToken> toIncludeCertificateTokens=getToIncludeCertificateTokens(valContext);    incorporateCertificateValues(unsignedSignaturePropertiesDom,toIncludeCertificateTokens);    incorporateRevocationValues(unsignedSignaturePropertiesDom,valContext);    xadesSignature.resetCertificateSource();    xadesSignature.resetRevocationSources();  }}  }
class C{  public void addRegister(ISetup setup){  injectors.add(setup.createInjectorAndDoEMFRegistration());}  }
class C{  public void testCertificateFactory02(){  try {    CertificateFactory.getInstance(null);    fail("NullPointerException or CertificateException must be thrown when type is null");  } catch (  CertificateException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertificateFactory.getInstance(invalidValues[i]);      fail("CertificateException must be thrown when type: ".concat(invalidValues[i]));    } catch (    CertificateException e) {    }  }}  }
class C{  public EnumMemberValue(int type,int value,ConstPool cp){  super('e',cp);  this.typeIndex=type;  this.valueIndex=value;}  }
class C{  public boolean isStarting(){  return getState().isStarting();}  }
class C{  public MultiHashMap(boolean sorted){  this.sorted=sorted;  if (sorted) {    map=new TreeMap<K,Set<V>>();  } else {    map=new HashMap<K,Set<V>>();  }}  }
class C{  public static void main(String[] args){  Properties config=new Properties();  config.put(StreamsConfig.APPLICATION_ID_CONFIG,"exclamation-kafka-streams");  config.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,"localhost:9092");  config.put(StreamsConfig.ZOOKEEPER_CONNECT_CONFIG,"localhost:2181");  config.put(StreamsConfig.KEY_SERDE_CLASS_CONFIG,Serdes.ByteArray().getClass().getName());  config.put(StreamsConfig.VALUE_SERDE_CLASS_CONFIG,Serdes.String().getClass().getName());  KStreamBuilder builder=new KStreamBuilder();  KStream<byte[],String> text=builder.stream("console");  KStream<byte[],String> exclamation=text.mapValues(null).mapValues(null);  exclamation.to("exclamated");  KafkaStreams streams=new KafkaStreams(builder,config);  streams.start();}  }
class C{  public PainterWrapper(SeaGlassPainter<Object> painter){  this.painter=painter;}  }
class C{  public List<LocalDate> bottom(int n){  List<LocalDate> bottom=new ArrayList<>();  int[] values=data.toIntArray();  IntArrays.parallelQuickSort(values);  for (int i=0; i < n && i < values.length; i++) {    bottom.add(PackedLocalDate.asLocalDate(values[i]));  }  return bottom;}  }
class C{  public DeniedException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void loadIdentity(){  mMat[0]=1;  mMat[1]=0;  mMat[2]=0;  mMat[3]=0;  mMat[4]=0;  mMat[5]=1;  mMat[6]=0;  mMat[7]=0;  mMat[8]=0;  mMat[9]=0;  mMat[10]=1;  mMat[11]=0;  mMat[12]=0;  mMat[13]=0;  mMat[14]=0;  mMat[15]=1;}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  private static int arrayHashCode(Object object){  if (object == null)   return 0;  int result=1;  Object[] array=(Object[])object;  for (int i=0; i < array.length; ++i) {    int elementHashCode=0;    if (array[i] != null)     elementHashCode=array[i].hashCode();    result=31 * result + elementHashCode;  }  return result;}  }
class C{  protected void appendDetail(final StringBuffer buffer,final String fieldName,final int value){  buffer.append(value);}  }
class C{  public AbstractExpressionDescriptor(String name,String token,Position position,boolean unlimited){  if (name == null) {    throw new NullPointerException("name was null.");  }  if (token == null) {    throw new NullPointerException("token was null.");  }  if (position == null) {    throw new NullPointerException("position was null.");  }  this.signature=new Signature(token,unlimited,false,token,"expr");  this.name=name;  this.token=token;  this.position=position;  this.display=true;}  }
class C{  public String encode(String pString){  return soundex(pString);}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  Loger.debug("Cache cleared.");}  }
class C{  @BeforeMethod public void initMethod(){  indexQuery=new IndexQuery();  indexQuery.restrictionProcessor=processor;}  }
class C{  public CustomerOrderServiceImpl(final GenericDAO<CustomerOrder,Long> customerOrderDao,final GenericDAO<Customer,Long> customerDao,final GenericDAO<Object,Long> genericDao,final GenericDAO<CustomerOrderDelivery,Long> customerOrderDeliveryDao,final OrderAssembler orderAssembler,final DeliveryAssembler deliveryAssembler){  super(customerOrderDao);  this.orderAssembler=orderAssembler;  this.deliveryAssembler=deliveryAssembler;  this.customerDao=customerDao;  this.genericDao=genericDao;  this.customerOrderDeliveryDao=customerOrderDeliveryDao;}  }
class C{  public MenuPanelAction(AppView app,String icon,String keytext,String sMyView){  putValue(Action.SMALL_ICON,new ImageIcon(JPrincipalApp.class.getResource(icon)));  putValue(Action.NAME,AppLocal.getIntString(keytext));  putValue(AppUserView.ACTION_TASKNAME,sMyView);  m_App=app;  m_sMyView=sMyView;}  }
class C{  public static String createName(String prefix){  AtomicInteger counter=nameCounters.get(prefix);  if (counter == null) {    nameCounters.put(prefix,new AtomicInteger(1));    return prefix;  } else {    return prefix + counter.getAndIncrement();  }}  }
class C{  public final boolean isEmptyRotationMatrix(){  if (this.m00 == 1 && this.m11 == 1 && this.m22 == 1) {    float[] m=this.intoArray();    boolean isEmptyRotationMatrix=true;    for (int i=0; i < m.length; i++) {      if (i != 0 && i != 5 && i != 10 && i <= 10) {        if (m[i] != 0) {          isEmptyRotationMatrix=false;          break;        }      }    }    return isEmptyRotationMatrix;  }  return false;}  }
class C{  public static String remove(String source,String searchFor[]){  return StringUtils.replace(source,searchFor,"");}  }
class C{  public void mouseExited(MouseEvent e){  mouseSupport.fireMapMouseExited(e);}  }
class C{  protected void paintImage(Graphics2D g,int x,int y,int w,int h){  BufferedImage image=getImage();  if (image != null)   g.drawImage(image,x,y,w,h,this); else {    Color c=g.getColor();    g.setColor(Color.WHITE);    g.fillRect(x,y,w,h);    g.setColor(c);  }}  }
class C{  public GFElement invert() throws ArithmeticException {  return invertMAIA();}  }
class C{  public boolean isOpsModePossible(){  return true;}  }
class C{  public MobileCustomizerPanel(ProjectExtensionProperties properties){  this.properties=properties;  initComponents();  HelpCtx.setHelpIDString(this,"jme3.android");  updateTargetList();  loadProperties();}  }
class C{  public static boolean eq(Object left,Object right){  if (left == right)   return true; else   if (left == null)   return false; else   if (right == null)   return false; else   return left.equals(right);}  }
class C{  public Map<MethodDescriptor,int[]> findLinkedMethods(Set<MethodParameter> inputs){  Map<MethodDescriptor,int[]> result=new HashMap<>();  for (  MethodParameter found : findLinked(inputs)) {    int[] params=result.get(found.getMethodDescriptor());    if (params == null) {      params=new int[]{found.getParameterNumber()};      result.put(found.getMethodDescriptor(),params);    } else {      int[] newParams=new int[params.length + 1];      System.arraycopy(params,0,newParams,0,params.length);      newParams[params.length]=found.getParameterNumber();      result.put(found.getMethodDescriptor(),newParams);    }  }  return result;}  }
class C{  public Dimension2DDouble(double width,double height){  this.width=width;  this.height=height;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HISTORY_ENTITY'";  db.execSQL(sql);}  }
class C{  private boolean groupIsFieldList(FormIndex index){  IFormElement element=mFormEntryController.getModel().getForm().getChild(index);  return element instanceof GroupDef;}  }
class C{  public void removeAllKeyBindings(){  bindings.clear();}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  double cutoff=Double.parseDouble(args[2]);  if (cutoff < 0) {    cutoff=0;  }  if (cutoff > 0.95) {    cutoff=0.95;  }  double gain=Double.parseDouble(args[3]);  if (inputHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress=0;    WhiteboxRaster input=new WhiteboxRaster(inputHeader,"r");    int rows=input.getNumberRows();    int cols=input.getNumberColumns();    double noData=input.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(input.getPreferredPalette());    double minValue=input.getMinimumValue();    double maxValue=input.getMaximumValue();    double range=maxValue - minValue;    double[] data;    double a=1 / (1 + Math.exp(gain * cutoff));    double b=1 / (1 + Math.exp(gain * (cutoff - 1))) - 1 / (1 + Math.exp(gain * cutoff));    for (row=0; row < rows; row++) {      data=input.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          z=(z - minValue) / range;          z=(1 / (1 + Math.exp(gain * (cutoff - z))) - a) / b;          output.setValue(row,col,z);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    input.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public BitmapSize scale(float scale){  return new BitmapSize((int)(width * scale),(int)(height * scale));}  }
class C{  private void clearListeners(){  listeners.clear();  defaultListener=null;}  }
class C{  @Override public int describeContents(){  return 0;}  }
class C{  static public void assertOffScreenAbove(View origin,View view){  int[] xy=new int[2];  view.getLocationOnScreen(xy);  int[] xyRoot=new int[2];  origin.getLocationOnScreen(xyRoot);  int y=xy[1] - xyRoot[1];  assertTrue("view should have y location less than that of origin view",y < 0);}  }
class C{  public void clear(){  properties.clear();}  }
class C{  public int exportToText(){  if (!externalStorageAvailable()) {    Log.d(TAG,"Media was not mounted");    return STATE_SD_CARD_UNMOUONTED;  }  PrintStream ps=getExportToTextPrintStream();  if (ps == null) {    Log.e(TAG,"get print stream error");    return STATE_SYSTEM_ERROR;  }  Cursor folderCursor=mContext.getContentResolver().query(Notes.CONTENT_NOTE_URI,NOTE_PROJECTION,"(" + NoteColumns.TYPE + "="+ Notes.TYPE_FOLDER+ " AND "+ NoteColumns.PARENT_ID+ "<>"+ Notes.ID_TRASH_FOLER+ ") OR "+ NoteColumns.ID+ "="+ Notes.ID_CALL_RECORD_FOLDER,null,null);  if (folderCursor != null) {    if (folderCursor.moveToFirst()) {      do {        String folderName="";        if (folderCursor.getLong(NOTE_COLUMN_ID) == Notes.ID_CALL_RECORD_FOLDER) {          folderName=mContext.getString(R.string.call_record_folder_name);        } else {          folderName=folderCursor.getString(NOTE_COLUMN_SNIPPET);        }        if (!TextUtils.isEmpty(folderName)) {          ps.println(String.format(getFormat(FORMAT_FOLDER_NAME),folderName));        }        String folderId=folderCursor.getString(NOTE_COLUMN_ID);        exportFolderToText(folderId,ps);      } while (folderCursor.moveToNext());    }    folderCursor.close();  }  Cursor noteCursor=mContext.getContentResolver().query(Notes.CONTENT_NOTE_URI,NOTE_PROJECTION,NoteColumns.TYPE + "=" + +Notes.TYPE_NOTE+ " AND "+ NoteColumns.PARENT_ID+ "=0",null,null);  if (noteCursor != null) {    if (noteCursor.moveToFirst()) {      do {        ps.println(String.format(getFormat(FORMAT_NOTE_DATE),DateFormat.format(mContext.getString(R.string.format_datetime_mdhm),noteCursor.getLong(NOTE_COLUMN_MODIFIED_DATE))));        String noteId=noteCursor.getString(NOTE_COLUMN_ID);        exportNoteToText(noteId,ps);      } while (noteCursor.moveToNext());    }    noteCursor.close();  }  ps.close();  return STATE_SUCCESS;}  }
class C{  public UDPGrappl(ApplicationState applicationState){  this.applicationState=applicationState;  this.uuid=UUID.randomUUID();  Application.getLog().log("Creating grappl connection " + getUUID());}  }
class C{  @Override public StateConnection state(){  return _state;}  }
class C{  @LogMessageDocs({@LogMessageDoc(level="INFO",message="Loading modules from {file name}",explanation="The controller is initializing its module " + "configuration from the specified properties " + "file or directory"),@LogMessageDoc(level="INFO",message="Loading default modules",explanation="The controller is initializing its module " + "configuration to the default configuration"),@LogMessageDoc(level="ERROR",message="Could not load module configuration file",explanation="The controller failed to read the " + "module configuration file",recommendation="Verify that the module configuration is " + "present. " + LogMessageDoc.CHECK_CONTROLLER),@LogMessageDoc(level="ERROR",message="Could not load default modules",explanation="The controller failed to read the default " + "module configuration",recommendation=LogMessageDoc.CHECK_CONTROLLER)}) public IFloodlightModuleContext loadModulesFromConfig(String fName) throws FloodlightModuleException {  Properties prop=new Properties();  Collection<String> configMods=new ArrayList<>();  if (fName == null) {    logger.info("Loading default modules");    InputStream is=this.getClass().getClassLoader().getResourceAsStream(COMPILED_CONF_FILE);    mergeProperties(is,null,configMods,prop);  } else {    File confFile=new File(fName);    if (!confFile.exists())     throw new FloodlightModuleConfigFileNotFoundException(fName);    logger.info("Loading modules from {}",confFile.getPath());    if (confFile.isFile()) {      mergeProperties(null,confFile,configMods,prop);    } else {      File[] files=confFile.listFiles();      Arrays.sort(files);      for (      File f : files) {        logger.debug("Loading conf.d file {}",f.getPath());        if (f.isFile() && f.getName().matches(".*\\.properties$")) {          mergeProperties(null,f,configMods,prop);        }      }    }  }  return loadModulesFromList(configMods,prop);}  }
class C{  public void removeLayerConfigurationListener(LayerConfigurationListener lcl){  layerConfigListeners.remove(lcl);}  }
class C{  public static void main(String[] args){  final int numNeurons=1992;  double density=.1;  System.out.println(System.getProperty("java.vm.name"));  Scanner keyboard=new Scanner(System.in);  System.out.println("Press any key, then ENTER.");  String beginToken=keyboard.next();  long start=System.nanoTime();  Network net=new Network();  net.setFireUpdates(false);  net.setTimeStep(0.1);  NeuronGroup ng=new NeuronGroup(net,numNeurons);  ng.setRecordAsSpikes(true);  ng.setLabel(beginToken);  IzhikevichRule upRule=new IzhikevichRule();  upRule.setiBg(0);  upRule.setAddNoise(true);  ng.setNeuronType(upRule);  Randomizer rand=new Randomizer(ProbDistribution.NORMAL);  for (  Neuron neuron : ng.getNeuronList()) {    IzhikevichRule iz=new IzhikevichRule();    if (Math.random() < 0.2) {      neuron.setPolarity(Polarity.INHIBITORY);      iz.setRefractoryPeriod(1.0);      double rVal=Math.random();      iz.setA(0.02 + (0.08 * rVal));      iz.setB(0.25 - (0.05 * rVal));      iz.setC(-65);      iz.setD(2);      rand.setParam2(0.5);    } else {      neuron.setPolarity(Polarity.EXCITATORY);      iz.setRefractoryPeriod(2.0);      iz.setA(0.02);      iz.setB(0.2);      double rVal=Math.random();      rVal*=rVal;      iz.setC(-65.0 + (15.0 * rVal));      iz.setD(8.0 - (6 * rVal));      rand.setParam2(1.2);    }    iz.setiBg(3.5);    iz.setAddNoise(true);    iz.setNoiseGenerator(rand);    neuron.setUpdateRule(iz);  }  GridLayout gl=new GridLayout();  gl.layoutNeurons(ng.getNeuronList());  PolarizedRandomizer exRand=new PolarizedRandomizer(Polarity.EXCITATORY,ProbDistribution.LOGNORMAL);  PolarizedRandomizer inRand=new PolarizedRandomizer(Polarity.INHIBITORY,ProbDistribution.LOGNORMAL);  exRand.setParam1(.25);  exRand.setParam2(1);  inRand.setParam1(2);  inRand.setParam2(2);  System.out.println("Begin Network Construction...");  SynapseGroup sg=SynapseGroup.createSynapseGroup(ng,ng,new Sparse(density,false,false),.8,exRand,inRand);  for (  Synapse s : sg.getAllSynapses()) {    s.setId(null);    s.setFrozen(true);    s.forceSetStrength(s.getStrength() / 5);  }  sg.setSpikeResponder(new ConvolvedJumpAndDecay(),Polarity.EXCITATORY);  ConvolvedJumpAndDecay inhibJD=new ConvolvedJumpAndDecay();  inhibJD.setTimeConstant(6);  sg.setSpikeResponder(inhibJD,Polarity.INHIBITORY);  net.addGroup(ng);  net.addGroup(sg);  long end=System.nanoTime();  System.out.println("End Network construction");  System.out.println("Time: " + SimbrainMath.roundDouble((end - start) / Math.pow(10,9),6));  System.out.println(ng.size() + " neurons.");  System.out.println(sg.size() + " synapses.");  System.out.println("Begin Test? (Y/N)");  String cont=keyboard.next();  keyboard.close();  if (!(cont.matches("Y") || cont.matches("y"))) {    return;  }  net.getUpdateManager().clear();  ConcurrentBufferedUpdate cbu=ConcurrentBufferedUpdate.createConcurrentBufferedUpdate(net);  net.getUpdateManager().addAction(cbu);  int siz=0;  for (  BufferedUpdateTask but : cbu.taskSet.taskArray) {    siz+=but.getHosts().length;  }  System.out.println();  for (int i=0; i < 10000; i++) {    net.update();  }  for (int i=0; i < 10000; i++) {    if (i % 100 == 0) {      System.out.println(i + "...");    }    net.update();  }  start=System.nanoTime();  ng.startRecording(new File("outs.csv"));  for (int i=0; i < 100000; i++) {    net.update();  }  end=System.nanoTime();  System.out.println("Parallel: " + SimbrainMath.roundDouble((end - start) / Math.pow(10,9),6));  System.exit(0);  return;}  }
class C{  public void rollbackPromoteMirror(URI vplexURI,URI mirrorURI,URI promoteeURI,String executeStepId,String stepId) throws WorkflowException {  try {    WorkflowStepCompleter.stepExecuting(stepId);    VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplexURI,_dbClient);    VplexMirror vplexMirror=_dbClient.queryObject(VplexMirror.class,mirrorURI);    Volume sourceVplexVolume=getDataObject(Volume.class,vplexMirror.getSource().getURI(),_dbClient);    String locality=null;    if (sourceVplexVolume.getAssociatedVolumes() != null && sourceVplexVolume.getAssociatedVolumes().size() > 1) {      locality=VPlexApiConstants.DISTRIBUTED_VIRTUAL_VOLUME;    } else {      locality=VPlexApiConstants.LOCAL_VIRTUAL_VOLUME;    }    client.destroyVirtualVolume(vplexMirror.getDeviceLabel());    client.attachMirror(locality,sourceVplexVolume.getDeviceLabel(),vplexMirror.getDeviceLabel());    _log.info("Successfully re-attached mirror %s to the source volume %s during rollback. ",vplexMirror.getDeviceLabel(),sourceVplexVolume.getDeviceLabel());  } catch (  Exception e) {    VplexMirror vplexMirror=_dbClient.queryObject(VplexMirror.class,mirrorURI);    Volume sourceVplexVolume=getDataObject(Volume.class,vplexMirror.getSource().getURI(),_dbClient);    sourceVplexVolume.getMirrors().remove(vplexMirror.getId().toString());    _dbClient.updateObject(sourceVplexVolume);    _log.info("Removed mirror %s from source volume %s",mirrorURI,sourceVplexVolume.getId());    if (null != vplexMirror.getAssociatedVolumes()) {      for (      String assocVolumeId : vplexMirror.getAssociatedVolumes()) {        Volume volume=_dbClient.queryObject(Volume.class,URI.create(assocVolumeId));        _dbClient.markForDeletion(volume);      }    }    _dbClient.markForDeletion(vplexMirror);    _log.error("Error during rollback of promote mirror: {}",e.getMessage(),e);  } finally {    Volume volume=_dbClient.queryObject(Volume.class,promoteeURI);    _dbClient.markForDeletion(volume);    WorkflowStepCompleter.stepSucceded(stepId);  }}  }
class C{  @Override protected void createButtonsForButtonBar(final Composite parent){  createButton(parent,IDialogConstants.OK_ID,Messages.getString("ReturnOnlineDialog.PendChangesButtonText"),true);  createButton(parent,IDialogConstants.CANCEL_ID,IDialogConstants.CANCEL_LABEL,false);}  }
class C{  @SuppressWarnings("ConstantConditions") public void testMkdirs() throws Exception {  if (!propertiesSupported())   return;  Map<String,String> props=properties(null,null,"0555");  igfs.mkdirs(new IgfsPath("/x"),null);  checkExist(igfs,igfsSecondary,new IgfsPath("/x"));  igfs.mkdirs(new IgfsPath("/k/l"),null);  checkExist(igfs,igfsSecondary,new IgfsPath("/k/l"));  igfs.mkdirs(new IgfsPath("/x/y"),null);  checkExist(igfs,igfsSecondary,new IgfsPath("/x/y"));  igfs.mkdirs(new IgfsPath("/a/b/c/d"),null);  checkExist(igfs,igfsSecondary,new IgfsPath("/a/b/c/d"));  igfs.mkdirs(new IgfsPath("/a/b/c/d/e"),null);  checkExist(igfs,igfsSecondary,new IgfsPath("/a/b/c/d/e"));  create(igfs,null,new IgfsPath[]{new IgfsPath("/d/f")});  checkExist(igfs,igfsSecondary,new IgfsPath("/d/f"));  assertTrue(igfs.info(new IgfsPath("/d/f")).isFile());  try {    igfs.mkdirs(new IgfsPath("/d/f"),null);    fail("IgfsParentNotDirectoryException expected.");  } catch (  IgfsParentNotDirectoryException ignore) {  }catch (  IgfsException ignore) {    if (!getClass().getSimpleName().startsWith("Hadoop"))     throw ignore;  }  try {    igfs.mkdirs(new IgfsPath("/d/f/something/else"),null);    fail("IgfsParentNotDirectoryException expected.");  } catch (  IgfsParentNotDirectoryException ignore) {  }catch (  IgfsException ignore) {    if (!getClass().getSimpleName().startsWith("Hadoop"))     throw ignore;  }  create(igfs,paths(DIR,SUBDIR),null);  igfs.mkdirs(SUBSUBDIR,props);  checkExist(igfs,igfsSecondary,SUBSUBDIR);  if (permissionsSupported()) {    if (dual)     assertEquals(props.get(IgfsUtils.PROP_PERMISSION),igfsSecondary.permissions(SUBSUBDIR.toString()));    assertEquals(props.get(IgfsUtils.PROP_PERMISSION),igfs.info(SUBSUBDIR).properties().get(IgfsUtils.PROP_PERMISSION));  }}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public String globalInfo(){  return "Graphically visualize trees or graphs produced by classifiers/clusterers.";}  }
class C{  protected boolean isLandscape(){  return (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE);}  }
class C{  public FuzzyQueryBuilder(String name,int value){  this(name,(Object)value);}  }
class C{  public void componentMoved(ComponentEvent e){  ((ComponentListener)a).componentMoved(e);  ((ComponentListener)b).componentMoved(e);}  }
class C{  @GET @Path("export/{noteId}") @ZeppelinApi public Response exportNote(@PathParam("noteId") String noteId) throws IOException {  String exportJson=notebook.exportNote(noteId);  return new JsonResponse<>(Status.OK,"",exportJson).build();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public Matrix4d reflect(double nx,double ny,double nz,double px,double py,double pz){  return reflect(nx,ny,nz,px,py,pz,this);}  }
class C{  private void updateFieldSize(){  Dimension minSize=new Dimension(PlayFieldGraphic.scale(w.getSizeX()),PlayFieldGraphic.scale(w.getSizeY()));  this.setMinimumSize(minSize);  this.setPreferredSize(minSize);  this.setSize(minSize);}  }
class C{  @Override protected DataObject queryResource(URI id){  ArgValidator.checkUri(id);  AutoTieringPolicy autoTierPolicy=_dbClient.queryObject(AutoTieringPolicy.class,id);  ArgValidator.checkEntityNotNull(autoTierPolicy,id,isIdEmbeddedInURL(id));  return autoTierPolicy;}  }
class C{  public static List propertyDescriptors(int apiLevel){  if (apiLevel == AST.JLS2_INTERNAL) {    return PROPERTY_DESCRIPTORS_2_0;  } else {    return PROPERTY_DESCRIPTORS_3_0;  }}  }
class C{  public void addTreeCheckingListener(TreeCheckingListener tsl){  this.checkingModel.addTreeCheckingListener(tsl);}  }
class C{  private static void internalAlignedWordCopy(Address dst,Address src,int numBytes){  Address end=src.plus(numBytes);  while (src.LT(end)) {    dst.store(src.loadWord());    src=src.plus(BYTES_IN_ADDRESS);    dst=dst.plus(BYTES_IN_ADDRESS);  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return ID;default :  return null;}}  }
class C{  public static void assignData(DatabaseEntry entry,byte[] data){  byte[] dest=entry.getData();  if (dest == null || dest.length != data.length) {    dest=new byte[data.length];    entry.setData(dest);  }  System.arraycopy(data,0,dest,0,data.length);}  }
class C{  protected RHSSymbols prec(RHSSymbols syms,Terminal prec){  return syms.setPrec(prec);}  }
class C{  public Object clone() throws CloneNotSupportedException {  UnionPathIterator clone=(UnionPathIterator)super.clone();  if (m_iterators != null) {    int n=m_iterators.length;    clone.m_iterators=new DTMIterator[n];    for (int i=0; i < n; i++) {      clone.m_iterators[i]=(DTMIterator)m_iterators[i].clone();    }  }  return clone;}  }
class C{  public void testSetScaleRoundHalfEven(){  String a="1231212478987482988429808779810457634781384756794987";  String b="123121247898748298842980877981045763478138";  int aScale=28;  int newScale=18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.setScale(newScale,BigDecimal.ROUND_HALF_EVEN);  assertTrue("incorrect scale",bNumber.scale() == newScale);  assertTrue("incorrect value",bNumber.unscaledValue().toString().equals(b));}  }
class C{  @NamespacePermission(fields="#businessObjectFormatKey.namespace",permissions=NamespacePermissionEnum.WRITE) @Override public BusinessObjectFormat deleteBusinessObjectFormat(BusinessObjectFormatKey businessObjectFormatKey){  businessObjectFormatHelper.validateBusinessObjectFormatKey(businessObjectFormatKey);  BusinessObjectFormatEntity businessObjectFormatEntity=businessObjectFormatDaoHelper.getBusinessObjectFormatEntity(businessObjectFormatKey);  if (businessObjectDataDao.getBusinessObjectDataCount(businessObjectFormatKey) > 0L) {    throw new IllegalArgumentException(String.format("Can not delete a business object format that has business object data associated with it. Business object format: {%s}",businessObjectFormatHelper.businessObjectFormatEntityAltKeyToString(businessObjectFormatEntity)));  }  businessObjectFormatDao.delete(businessObjectFormatEntity);  if (businessObjectFormatEntity.getLatestVersion()) {    Integer maxBusinessObjectFormatVersion=businessObjectFormatDao.getBusinessObjectFormatMaxVersion(businessObjectFormatKey);    if (maxBusinessObjectFormatVersion != null) {      BusinessObjectFormatEntity previousVersionBusinessObjectFormatEntity=businessObjectFormatDao.getBusinessObjectFormatByAltKey(new BusinessObjectFormatKey(businessObjectFormatKey.getNamespace(),businessObjectFormatKey.getBusinessObjectDefinitionName(),businessObjectFormatKey.getBusinessObjectFormatUsage(),businessObjectFormatKey.getBusinessObjectFormatFileType(),maxBusinessObjectFormatVersion));      previousVersionBusinessObjectFormatEntity.setLatestVersion(true);      businessObjectFormatDao.saveAndRefresh(previousVersionBusinessObjectFormatEntity);    }  }  return businessObjectFormatHelper.createBusinessObjectFormatFromEntity(businessObjectFormatEntity);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:42.514 -0500",hash_original_method="320F140F8D57B27D338CDA0750999A03",hash_generated_method="A536783168A45F38B4FBC5281CBB1B4D") protected void flushCache() throws IOException {  if (this.cachePosition > 0) {    this.out.writeLine(Integer.toHexString(this.cachePosition));    this.out.write(this.cache,0,this.cachePosition);    this.out.writeLine("");    this.cachePosition=0;  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MStorage[").append("M_Locator_ID=").append(getM_Locator_ID()).append(",M_Product_ID=").append(getM_Product_ID()).append(",M_AttributeSetInstance_ID=").append(getM_AttributeSetInstance_ID()).append(": OnHand=").append(getQtyOnHand()).append(",Reserved=").append(getQtyReserved()).append(",Ordered=").append(getQtyOrdered()).append("]");  return sb.toString();}  }
class C{  public final int indexOf(java.lang.CharSequence csq,int fromIndex){  if ((_offset + fromIndex + csq.length() - 1) >= (_offset + _length))   throw new IndexOutOfBoundsException(String.format("From Index %d Is Out of Bounds",fromIndex));  final char c=csq.charAt(0);  final int csqLength=csq.length();  for (int i=_offset + fromIndex, end=_offset + _length - csqLength + 1; i < end; i++) {    if (_array[i] == c) {      boolean match=true;      for (int j=1; j < csqLength; j++) {        if (_array[i + j] != csq.charAt(j)) {          match=false;          break;        }      }      if (match) {        return i - _offset;      }    }  }  return -1;}  }
class C{  public Multiply(){  super(Number.class,Number.class,Number.class);}  }
class C{  public static org.oscm.vo.VOServiceListResult convertToApi(org.oscm.internal.vo.VOServiceListResult oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOServiceListResult newVO=new org.oscm.vo.VOServiceListResult();  newVO.setResultSize(oldVO.getResultSize());  for (  org.oscm.internal.vo.VOService s : oldVO.getServices()) {    newVO.getServices().add(convertToApi(s));  }  return newVO;}  }
class C{  private Instance generateExample(Random random,Instances format) throws Exception {  double[] attributes;  Instance example;  attributes=new double[getNumAttributes() + 1];  for (int i=0; i < getNumAttributes(); i++) {    double value=random.nextDouble();    if (format.attribute(i).isNumeric()) {      attributes[i]=value;    } else {      if (format.attribute(i).isNominal()) {        attributes[i]=(value > 0.5) ? 1.0 : 0.0;      } else {        throw new Exception("Attribute type is not supported.");      }    }  }  example=new DenseInstance(1.0,attributes);  example.setDataset(format);  example.setClassMissing();  return example;}  }
class C{  public TransferEntropyCalculatorKernelSeparate(){  super();  mvkeDestinationPast=new KernelEstimatorMultiVariate();  mvkeDestinationNextPast=new KernelEstimatorMultiVariate();  mvkeDestinationPastSource=new KernelEstimatorMultiVariate();  mvkeDestinationNextPastSource=new KernelEstimatorMultiVariate();  mvkeDestinationPast.setNormalise(normalise);  mvkeDestinationNextPast.setNormalise(normalise);  mvkeDestinationPastSource.setNormalise(normalise);  mvkeDestinationNextPastSource.setNormalise(normalise);}  }
class C{  private void create(EnumerationContext ctx){  if (ctx.virtualMachines.size() == 0) {    if (ctx.enumNextPageLink != null) {      ctx.subStage=EnumerationSubStages.LISTVMS;      handleSubStage(ctx);      return;    }    logInfo("No virtual machine available for creation");    ctx.subStage=EnumerationSubStages.PATCH_ADDITIONAL_FIELDS;    handleSubStage(ctx);    return;  }  logFine("%d compute description with states to be created",ctx.virtualMachines.size());  Iterator<Entry<String,VirtualMachine>> iterator=ctx.virtualMachines.entrySet().iterator();  AtomicInteger size=new AtomicInteger(ctx.virtualMachines.size());  while (iterator.hasNext()) {    Entry<String,VirtualMachine> vmEntry=iterator.next();    VirtualMachine virtualMachine=vmEntry.getValue();    iterator.remove();    createHelper(ctx,virtualMachine,size);  }}  }
class C{  public VerifyError(String s){  super(s);}  }
class C{  public void open(String remoteAddr,int remotePort) throws NetworkException, PayloadException {  SSLSocket socket=null;  try {    socket=(SSLSocket)getSslFactory().createSocket(remoteAddr,remotePort);    socket.startHandshake();    if (mFingerprint != null) {      String[] announcedFingerprintElements=mFingerprint.split(" ");      if (announcedFingerprintElements != null && announcedFingerprintElements.length > 1) {        String usedFingerprint=getFingerprint(announcedFingerprintElements[0],socket);        if (announcedFingerprintElements[1] != null && !announcedFingerprintElements[1].equals(usedFingerprint)) {          if (logger.isActivated()) {            logger.debug("Wrong fingerprint! " + usedFingerprint + " is used while "+ announcedFingerprintElements[1]+ " is expected!");          }          CloseableUtils.tryToClose(socket);          return;        }      }    }    setSocket(socket);  } catch (  IOException e) {    throw new NetworkException(new StringBuilder("Failed to open socket connection for address : ").append(remoteAddr).append("and port : ").append(remotePort).toString(),e);  } finally {    CloseableUtils.tryToClose(socket);  }}  }
class C{  @SuppressWarnings("BusyWait") public Object invokeMethod(final Method mtd,final Object[] args){  if (U.isHashCodeMethod(mtd))   return System.identityHashCode(proxy); else   if (U.isEqualsMethod(mtd))   return proxy == args[0]; else   if (U.isToStringMethod(mtd))   return GridServiceProxy.class.getSimpleName() + " [name=" + name+ ", sticky="+ sticky+ ']';  ctx.gateway().readLock();  try {    while (true) {      ClusterNode node=null;      try {        node=nodeForService(name,sticky);        if (node == null)         throw new IgniteException("Failed to find deployed service: " + name);        if (node.isLocal()) {          ServiceContextImpl svcCtx=ctx.service().serviceContext(name);          if (svcCtx != null) {            Service svc=svcCtx.service();            if (svc != null)             return mtd.invoke(svc,args);          }        } else {          return ctx.closure().callAsyncNoFailover(GridClosureCallMode.BROADCAST,new ServiceProxyCallable(mtd.getName(),name,mtd.getParameterTypes(),args),Collections.singleton(node),false).get();        }      } catch (      GridServiceNotFoundException|ClusterTopologyCheckedException e) {        if (log.isDebugEnabled())         log.debug("Service was not found or topology changed (will retry): " + e.getMessage());      }catch (      RuntimeException|Error e) {        throw e;      }catch (      IgniteCheckedException e) {        throw U.convertException(e);      }catch (      Exception e) {        throw new IgniteException(e);      }      rmtNode.compareAndSet(node,null);      try {        Thread.sleep(10);      } catch (      InterruptedException e) {        Thread.currentThread().interrupt();        throw new IgniteException(e);      }    }  }  finally {    ctx.gateway().readUnlock();  }}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    if (requestedCameraId >= 0) {      theCamera=OpenCameraInterface.open(requestedCameraId);    } else {      theCamera=OpenCameraInterface.open();    }    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);  }  Camera.Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  protected GenericText(){}  }
class C{  private static Class<?> forName(String name) throws ReflectException {  try {    return Class.forName(name);  } catch (  Exception e) {    throw new ReflectException(e);  }}  }
class C{  public ConePortrayal3D(Appearance appearance,boolean generateNormals,boolean generateTextureCoordinates,double scale){  this.appearance=appearance;  setScale(null,scale);  Cone cone=new Cone(0.5f,1f,(generateNormals ? Primitive.GENERATE_NORMALS : 0) | (generateTextureCoordinates ? Primitive.GENERATE_TEXTURE_COORDS : 0),appearance);  setShape3DFlags(cone.getShape(Cone.BODY));  setShape3DFlags(cone.getShape(Cone.CAP));  group=cone;}  }
class C{  public void draw(){  StdDraw.point(x,y);}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  @Override public void process(KeyValPair<K,V> tuple){  K key=tuple.getKey();  if (!doprocessKey(key)) {    return;  }  MutableDouble bval=basemap.get(key);  if (bval != null) {    double cval=tuple.getValue().doubleValue() - bval.doubleValue();    change.emit(new KeyValPair<K,V>(cloneKey(key),getValue(cval)));    percent.emit(new KeyValPair<K,Double>(cloneKey(key),(cval / bval.doubleValue()) * 100));  }}  }
class C{  public static PipelineDraweeControllerBuilder newDraweeControllerBuilder(){  return sDraweeControllerBuilderSupplier.get();}  }
class C{  private ReplicatorMonitor(){  clearCounters();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:18.872 -0500",hash_original_method="05E28527AC6BDB7F8BDD1968A304DADF",hash_generated_method="3A4B45B9D623DCD90191FBF41B3CB3BB") public boolean containsValue(String value){  return mCapabilities.containsValue(value);}  }
class C{  public Message nextMessage(){  return (Message)messageCollector.nextResult();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.152 -0500",hash_original_method="54E49D501AAC4DB03DE41A5BADEC9468",hash_generated_method="3E4EB86BA18ABDA53E16A5B357F4B743") public void restore(){}  }
class C{  public void testNestedFunction() throws Exception {  check("func1(field1, func2(field2))","{fn func1(field1, {fn func2(field2)})}");  check("select func1(field1, func2(field2))","select {fn func1(field1, {fn func2(field2)})}");  check("select func1(field1, func2(field2), field3) from SomeTable;","select {fn func1(field1, {fn func2(field2)}, field3)} from SomeTable;");}  }
class C{  static void endParagraph(SpannableStringBuilder builder){  int position=builder.length() - 1;  while (position >= 0 && builder.charAt(position) == ' ') {    position--;  }  if (position >= 0 && builder.charAt(position) != '\n') {    builder.append('\n');  }}  }
class C{  public static org.oscm.internal.vo.VOEventDefinition convertToUp(org.oscm.vo.VOEventDefinition oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOEventDefinition newVO=new org.oscm.internal.vo.VOEventDefinition();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setEventType(EnumConverter.convert(oldVO.getEventType(),org.oscm.internal.types.enumtypes.EventType.class));  newVO.setEventId(oldVO.getEventId());  newVO.setEventDescription(oldVO.getEventDescription());  return newVO;}  }
class C{  public void saveChannelBotMode(BotModeConfig config){  config.addCredentials(this);  POST(this.url + "/save-channel-bot-mode",config.toXML());}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getDateWorkStart() != null && getDeliveryDays() != 0)   setDateWorkComplete(TimeUtil.addDays(getDateWorkStart(),getDeliveryDays())); else   if (getDateWorkStart() != null && getDeliveryDays() == 0 && getDateWorkComplete() != null)   setDeliveryDays(TimeUtil.getDaysBetween(getDateWorkStart(),getDateWorkComplete())); else   if (getDateWorkStart() == null && getDeliveryDays() != 0 && getDateWorkComplete() != null)   setDateWorkStart(TimeUtil.addDays(getDateWorkComplete(),getDeliveryDays() * -1));  return true;}  }
class C{  public static GeoTimeSerie detect(GeoTimeSerie gts,int alphabetSize,int wordLen,int windowLen,Collection<String> patterns,boolean standardizePAA) throws WarpScriptException {  GeoTimeSerie gtsPatterns=GTSHelper.bSAX(gts,alphabetSize,wordLen,windowLen,standardizePAA);  GTSHelper.sort(gtsPatterns);  GeoTimeSerie detected=new GeoTimeSerie(gts.lastbucket,gts.bucketcount,gts.bucketspan,16);  detected.setMetadata(gts.getMetadata());  int lastidx=-1;  for (int i=0; i < gtsPatterns.values; i++) {    if (!patterns.contains(gtsPatterns.stringValues[i])) {      continue;    }    for (int j=0; j < windowLen; j++) {      if (i + j > lastidx) {        lastidx=i + j;        GTSHelper.setValue(detected,GTSHelper.tickAtIndex(gts,lastidx),GTSHelper.locationAtIndex(gts,lastidx),GTSHelper.elevationAtIndex(gts,lastidx),GTSHelper.valueAtIndex(gts,lastidx),false);      }    }  }  return detected;}  }
class C{  public void skipSample(){  long nextOffset=infoQueue.moveToNextSample();  dropDownstreamTo(nextOffset);}  }
class C{  public static void passMockSleep(){  mockSleepQueue.offer(false);}  }
class C{  public InternalColorPanelListener(final ITypeDescription description){  m_description=description;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:33.771 -0500",hash_original_method="A09C3D32ACE02300A3630780DF7DA73F",hash_generated_method="32F0C96A3AE6D3E038F875614DB6300C") public boolean equals(Object obj){  if (getClass() != obj.getClass()) {    return false;  }  UserInfo other=(UserInfo)obj;  if (this.userType != other.userType) {    return false;  }  if (!this.user.equalsIgnoreCase(other.user)) {    return false;  }  if (this.password != null && other.password == null)   return false;  if (other.password != null && this.password == null)   return false;  if (this.password == other.password)   return true;  return (this.password.equals(other.password));}  }
class C{  protected GlyfSimple(){}  }
class C{  public Object nextToken() throws JSONException {  char c;  char q;  StringBuilder sb;  do {    c=next();  } while (Character.isWhitespace(c));switch (c) {case 0:    throw syntaxError("Misshaped element");case '<':  throw syntaxError("Misplaced '<'");case '>':return XML.GT;case '/':return XML.SLASH;case '=':return XML.EQ;case '!':return XML.BANG;case '?':return XML.QUEST;case '"':case '\'':q=c;sb=new StringBuilder();for (; ; ) {c=next();if (c == 0) {throw syntaxError("Unterminated string");}if (c == q) {return sb.toString();}if (c == '&') {sb.append(nextEntity(c));} else {sb.append(c);}}default :sb=new StringBuilder();for (; ; ) {sb.append(c);c=next();if (Character.isWhitespace(c)) {return sb.toString();}switch (c) {case 0:return sb.toString();case '>':case '/':case '=':case '!':case '?':case '[':case ']':back();return sb.toString();case '<':case '"':case '\'':throw syntaxError("Bad character in a name");}}}}  }
class C{  public InvalidDeltaException(String msg){  super(msg);}  }
class C{  public void mapTriangleToNodes(DelaunayTriangle t){  AdvancingFrontNode n;  for (int i=0; i < 3; i++) {    if (t.neighbors[i] == null) {      n=aFront.locatePoint(t.pointCW(t.points[i]));      if (n != null) {        n.triangle=t;      }    }  }}  }
class C{  public void startMonitoring(Context context,Handler target){  mCsHandler=target;  mContext=context;  mWifiManager=(WifiManager)mContext.getSystemService(Context.WIFI_SERVICE);  IntentFilter filter=new IntentFilter();  filter.addAction(WifiManager.NETWORK_STATE_CHANGED_ACTION);  filter.addAction(WifiManager.LINK_CONFIGURATION_CHANGED_ACTION);  mWifiStateReceiver=new WifiStateReceiver();  mContext.registerReceiver(mWifiStateReceiver,filter);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildSemosLibraryArea(zone);}  }
class C{  public REPLMessage(){  this.map=new TreeMap<>();}  }
class C{  public void render(Graphics2D g2d){  if (g2d != oldG2d) {    g2d.setFont(font);    fontMetrics=g2d.getFontMetrics();    defaultStroke=g2d.getStroke();    setRange(xMin,xMax,yMin,yMax);    oldG2d=g2d;  }  drawGrid(g2d);  drawText(g2d);}  }
class C{  public ClusterConfig(List<Node> nodes,short thisNodeId,String listenAddress,AuthScheme authScheme,String keyStorePath,String keyStorePassword) throws SyncException {  init(nodes,thisNodeId,authScheme,keyStorePath,keyStorePassword);  this.listenAddress=listenAddress;}  }
class C{  public void initialize(Context context,boolean is24HourMode,boolean hasInnerCircle,boolean disappearsOut,int selectionDegrees,boolean isInnerCircle){  if (mIsInitialized) {    Log.e(TAG,"This RadialSelectorView may only be initialized once.");    return;  }  Resources res=context.getResources();  int accentColor=res.getColor(R.color.mdtp_accent_color);  mPaint.setColor(accentColor);  mPaint.setAntiAlias(true);  mSelectionAlpha=SELECTED_ALPHA;  mIs24HourMode=is24HourMode;  if (is24HourMode) {    mCircleRadiusMultiplier=Float.parseFloat(res.getString(R.string.mdtp_circle_radius_multiplier_24HourMode));  } else {    mCircleRadiusMultiplier=Float.parseFloat(res.getString(R.string.mdtp_circle_radius_multiplier));    mAmPmCircleRadiusMultiplier=Float.parseFloat(res.getString(R.string.mdtp_ampm_circle_radius_multiplier));  }  mHasInnerCircle=hasInnerCircle;  if (hasInnerCircle) {    mInnerNumbersRadiusMultiplier=Float.parseFloat(res.getString(R.string.mdtp_numbers_radius_multiplier_inner));    mOuterNumbersRadiusMultiplier=Float.parseFloat(res.getString(R.string.mdtp_numbers_radius_multiplier_outer));  } else {    mNumbersRadiusMultiplier=Float.parseFloat(res.getString(R.string.mdtp_numbers_radius_multiplier_normal));  }  mSelectionRadiusMultiplier=Float.parseFloat(res.getString(R.string.mdtp_selection_radius_multiplier));  mAnimationRadiusMultiplier=1;  mTransitionMidRadiusMultiplier=1f + (0.05f * (disappearsOut ? -1 : 1));  mTransitionEndRadiusMultiplier=1f + (0.3f * (disappearsOut ? 1 : -1));  mInvalidateUpdateListener=new InvalidateUpdateListener();  setSelection(selectionDegrees,isInnerCircle,false);  mIsInitialized=true;}  }
class C{  public Clustering<SubspaceModel> run(Relation<V> relation){  if (LOG.isVerbose()) {    LOG.verbose("*** 1. Identification of subspaces that contain clusters ***");  }  SortedMap<Integer,List<CLIQUESubspace<V>>> dimensionToDenseSubspaces=new TreeMap<>();  List<CLIQUESubspace<V>> denseSubspaces=findOneDimensionalDenseSubspaces(relation);  dimensionToDenseSubspaces.put(Integer.valueOf(0),denseSubspaces);  if (LOG.isVerbose()) {    LOG.verbose("    1-dimensional dense subspaces: " + denseSubspaces.size());  }  if (LOG.isDebugging()) {    for (    CLIQUESubspace<V> s : denseSubspaces) {      LOG.debug(s.toString("      "));    }  }  int dimensionality=RelationUtil.dimensionality(relation);  for (int k=2; k <= dimensionality && !denseSubspaces.isEmpty(); k++) {    denseSubspaces=findDenseSubspaces(relation,denseSubspaces);    dimensionToDenseSubspaces.put(Integer.valueOf(k - 1),denseSubspaces);    if (LOG.isVerbose()) {      LOG.verbose("    " + k + "-dimensional dense subspaces: "+ denseSubspaces.size());    }    if (LOG.isDebugging()) {      for (      CLIQUESubspace<V> s : denseSubspaces) {        LOG.debug(s.toString("      "));      }    }  }  if (LOG.isVerbose()) {    LOG.verbose("*** 2. Identification of clusters ***");  }  int numClusters=1;  Clustering<SubspaceModel> result=new Clustering<>("CLIQUE clustering","clique-clustering");  for (  Integer dim : dimensionToDenseSubspaces.keySet()) {    List<CLIQUESubspace<V>> subspaces=dimensionToDenseSubspaces.get(dim);    List<Pair<Subspace,ModifiableDBIDs>> modelsAndClusters=determineClusters(subspaces);    if (LOG.isVerbose()) {      LOG.verbose("    " + (dim + 1) + "-dimensional clusters: "+ modelsAndClusters.size());    }    for (    Pair<Subspace,ModifiableDBIDs> modelAndCluster : modelsAndClusters) {      Cluster<SubspaceModel> newCluster=new Cluster<>(modelAndCluster.second);      newCluster.setModel(new SubspaceModel(modelAndCluster.first,Centroid.make(relation,modelAndCluster.second).getArrayRef()));      newCluster.setName("cluster_" + numClusters++);      result.addToplevelCluster(newCluster);    }  }  return result;}  }
class C{  public boolean scheduleAtEnd(Steppable event){  return _scheduleAtExtreme(event,true);}  }
class C{  public void inc(){  inc(1);}  }
class C{  public void keyTyped(KeyEvent e){  if (tree != null && tree.getRowCount() > 0 && tree.hasFocus() && tree.isEnabled()) {    if (e.isAltDown() || BasicGraphicsUtils.isMenuShortcutKeyDown(e) || isNavigationKey(e)) {      return;    }    boolean startingFromSelection=true;    char c=e.getKeyChar();    long time=e.getWhen();    int startingRow=tree.getLeadSelectionRow();    if (time - lastTime < timeFactor) {      typedString+=c;      if ((prefix.length() == 1) && (c == prefix.charAt(0))) {        startingRow++;      } else {        prefix=typedString;      }    } else {      startingRow++;      typedString="" + c;      prefix=typedString;    }    lastTime=time;    if (startingRow < 0 || startingRow >= tree.getRowCount()) {      startingFromSelection=false;      startingRow=0;    }    TreePath path=tree.getNextMatch(prefix,startingRow,Position.Bias.Forward);    if (path != null) {      tree.setSelectionPath(path);      int row=getRowForPath(tree,path);      ensureRowsAreVisible(row,row);    } else     if (startingFromSelection) {      path=tree.getNextMatch(prefix,0,Position.Bias.Forward);      if (path != null) {        tree.setSelectionPath(path);        int row=getRowForPath(tree,path);        ensureRowsAreVisible(row,row);      }    }  }}  }
class C{  private static <T>void mapTypeVariablesToArguments(final Class<T> cls,final ParameterizedType parameterizedType,final Map<TypeVariable<?>,Type> typeVarAssigns){  final Type ownerType=parameterizedType.getOwnerType();  if (ownerType instanceof ParameterizedType) {    mapTypeVariablesToArguments(cls,(ParameterizedType)ownerType,typeVarAssigns);  }  final Type[] typeArgs=parameterizedType.getActualTypeArguments();  final TypeVariable<?>[] typeVars=getRawType(parameterizedType).getTypeParameters();  final List<TypeVariable<Class<T>>> typeVarList=Arrays.asList(cls.getTypeParameters());  for (int i=0; i < typeArgs.length; i++) {    final TypeVariable<?> typeVar=typeVars[i];    final Type typeArg=typeArgs[i];    if (typeVarList.contains(typeArg) && typeVarAssigns.containsKey(typeVar)) {      typeVarAssigns.put((TypeVariable<?>)typeArg,typeVarAssigns.get(typeVar));    }  }}  }
class C{  @Override public boolean onUsed(final RPEntity entity){  if (!entity.nextTo(this)) {    entity.sendPrivateText("You can't reach that " + grainName + " from here.");    return false;  }  if (getRipeness() != RIPE) {    entity.sendPrivateText("This " + grainName + " is not yet ripe enough to harvest.");    return false;  }  if (!isNeededToolEquipped(entity)) {    entity.sendPrivateText("You need a " + tools.get(0) + " to harvest "+ grainName+ " fields.");    return false;  }  onFruitPicked(null);  final Item grain=SingletonRepository.getEntityManager().getItem(grainName);  entity.equipOrPutOnGround(grain);  if (entity instanceof Player) {    ((Player)entity).incHarvestedForItem(grainName,1);    SingletonRepository.getAchievementNotifier().onObtain((Player)entity);  }  return true;}  }
class C{  private void incrVersion(){  do {    version++;  } while (version == 0);}  }
class C{  private int generateNonce(){  return RANDOM.nextInt();}  }
class C{  public String add(final V value){  String key=map.get(value);  if (key == null) {    key=prefix + counter;    map.put(value,key);    mapKeys.put(key,value);    counter++;  }  return key;}  }
class C{  static void free(Pointer address){  SysCall.sysCall.sysFree(getAddressFromPointer(address));}  }
class C{  public int size(){  return nvPairs.size() >> 1;}  }
class C{  public ClusterInfo configureConnectEmcFtpsParams(ConnectEmcFtps ftpsParams){  return client.post(ClusterInfo.class,ftpsParams,CONFIG_CONNECT_EMC_FTPS_URL);}  }
class C{  public static void main(String[] args){  new BaleenManager(Optional.empty()).runUntilStopped();}  }
class C{  public static int startsWithIgnoreCaseAndWs(String searchIn,String[] searchFor){  for (int i=0; i < searchFor.length; i++) {    if (startsWithIgnoreCaseAndWs(searchIn,searchFor[i],0)) {      return i;    }  }  return -1;}  }
class C{  protected void report_reduce_reduce(lalr_item itm1,lalr_item itm2) throws internal_error {  boolean comma_flag=false;  System.err.println("*** Reduce/Reduce conflict found in state #" + index());  System.err.print("  between ");  System.err.println(itm1.to_simple_string());  System.err.print("  and     ");  System.err.println(itm2.to_simple_string());  System.err.print("  under symbols: {");  for (int t=0; t < terminal.number(); t++) {    if (itm1.lookahead().contains(t) && itm2.lookahead().contains(t)) {      if (comma_flag)       System.err.print(", "); else       comma_flag=true;      System.err.print(terminal.find(t).name());    }  }  System.err.println("}");  System.err.print("  Resolved in favor of ");  if (itm1.the_production().index() < itm2.the_production().index())   System.err.println("the first production.\n"); else   System.err.println("the second production.\n");  emit.num_conflicts++;  lexer.warning_count++;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:25.604 -0500",hash_original_method="E86C9DC4408CF260B8E6AACF31CF8025",hash_generated_method="CF872DAE47252191A5AA057CAEF11C5C") @Override public View newView(Context context,Cursor cursor,ViewGroup parent){  return mInflater.inflate(mLayout,parent,false);}  }
class C{  public CloudSqlDao(final String url) throws SQLException {  dataSource.setUrl(url);  final String createTableSql="CREATE TABLE IF NOT EXISTS books6 ( id INT NOT NULL " + "AUTO_INCREMENT, author VARCHAR(255), createdBy VARCHAR(255), createdById VARCHAR(255), " + "description VARCHAR(255), publishedDate VARCHAR(255), title VARCHAR(255), imageUrl "+ "VARCHAR(255), PRIMARY KEY (id))";  try (Connection conn=dataSource.getConnection()){    conn.createStatement().executeUpdate(createTableSql);  } }  }
class C{  public static int[] convertIntegers(List<Integer> integers){  int[] ret=new int[integers.size()];  for (int i=0; i < ret.length; i++) {    ret[i]=integers.get(i).intValue();  }  return ret;}  }
class C{  public static CompletedPatternWrapper serializableInstance(){  return new CompletedPatternWrapper(Dag.serializableInstance());}  }
class C{  public static void reset(){  AdempierePLAF.setPLAF();}  }
class C{  public static void endTransaction(final CConnection connection) throws SQLException {  endTransaction(connection.getConnection());}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.N4_METHOD_DECLARATION__BODY:    setBody((Block)null);  return;case N4JSPackage.N4_METHOD_DECLARATION__LOK:set_lok((LocalArgumentsVariable)null);return;case N4JSPackage.N4_METHOD_DECLARATION__DEFINED_TYPE:setDefinedType((Type)null);return;case N4JSPackage.N4_METHOD_DECLARATION__FPARS:getFpars().clear();return;case N4JSPackage.N4_METHOD_DECLARATION__RETURN_TYPE_REF:setReturnTypeRef((TypeRef)null);return;case N4JSPackage.N4_METHOD_DECLARATION__GENERATOR:setGenerator(GENERATOR_EDEFAULT);return;case N4JSPackage.N4_METHOD_DECLARATION__DECLARED_ASYNC:setDeclaredAsync(DECLARED_ASYNC_EDEFAULT);return;case N4JSPackage.N4_METHOD_DECLARATION__TYPE_VARS:getTypeVars().clear();return;case N4JSPackage.N4_METHOD_DECLARATION__DECLARED_TYPE_REF:setDeclaredTypeRef((TypeRef)null);return;case N4JSPackage.N4_METHOD_DECLARATION__BOGUS_TYPE_REF:setBogusTypeRef((TypeRef)null);return;case N4JSPackage.N4_METHOD_DECLARATION__DECLARED_NAME:setDeclaredName((LiteralOrComputedPropertyName)null);return;}super.eUnset(featureID);}  }
class C{  public boolean is_set_city(){  return this.city != null;}  }
class C{  private void createShader(){  if (mWidth == 0)   return;  if (mBitmapCover == null) {    mBitmapCover=Bitmap.createBitmap(mWidth,mHeight,Bitmap.Config.ARGB_8888);    mBitmapCover.eraseColor(mCoverColor);  }  mCoverScale=((float)mWidth) / (float)mBitmapCover.getWidth();  mBitmapCover=Bitmap.createScaledBitmap(mBitmapCover,(int)(mBitmapCover.getWidth() * mCoverScale),(int)(mBitmapCover.getHeight() * mCoverScale),true);  mShader=new BitmapShader(mBitmapCover,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);  mPaintCover=new Paint();  mPaintCover.setAntiAlias(true);  mPaintCover.setShader(mShader);}  }
class C{  @SuppressWarnings("rawtypes") final private void handleSid(final SidIV sid,final Collection<IV<?,?>> ivs,final Set<IV<?,?>> unrequested){  final ISPO spo=sid.getInlineValue();  handleTerm(spo.s(),ivs,unrequested);  handleTerm(spo.p(),ivs,unrequested);  handleTerm(spo.o(),ivs,unrequested);  if (spo.c() != null) {    handleTerm(spo.c(),ivs,unrequested);  }}  }
class C{  private boolean meets(ChemicalPairOutput input){  if (input == null || !input.isValid()) {    return false;  }  if (input.leftGas.getGas() != leftGas.getGas() || input.rightGas.getGas() != rightGas.getGas()) {    return false;  }  return input.leftGas.amount >= leftGas.amount && input.rightGas.amount >= rightGas.amount;}  }
class C{  public T passphrase(String passphrase){  this.passphrase=passphrase;  return self();}  }
class C{  public WalletExtension addOrGetExistingExtension(WalletExtension extension){  String id=checkNotNull(extension).getWalletExtensionID();  lock.lock();  try {    WalletExtension previousExtension=extensions.get(id);    if (previousExtension != null)     return previousExtension;    extensions.put(id,extension);    saveNow();    return extension;  }  finally {    lock.unlock();  }}  }
class C{  private void init(String servicePrincipal,int mask){  if (servicePrincipal == null)   throw new NullPointerException("service principal can't be null");  if ((mask & ALL) != mask)   throw new IllegalArgumentException("invalid actions mask");  this.mask=mask;}  }
class C{  private void sendFile() throws IOException {  int reply;  write("STOR " + url.getFile().substring(url.getFile().lastIndexOf('/') + 1,url.getFile().length()) + "\r\n");  reply=getReply();  if (!(reply == FTP_OPENDATA || reply == FTP_OK || reply == FTP_DATAOPEN)) {    throw new IOException("Unable to store file");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:40.428 -0500",hash_original_method="A38E23E6BBCA60A8718121827E32C27A",hash_generated_method="EACB2A8AC45F9E3F33B52F2A89935418") public RoutedRequest(final RequestWrapper req,final HttpRoute route){  super();  this.request=req;  this.route=route;}  }
class C{  private void swapParentNode(FlexibleNode node,FlexibleNode parent,FlexibleNode child){  if (parent != null) {    FlexibleNode parent2=parent.getParent();    swapParentNode(parent,parent2,node);    if (child != null) {      node.removeChild(child);      child.addChild(node);      node.setLength(child.getLength());    }  } else {    node.removeChild(child);    if (node.getChildCount() > 1) {      throw new IllegalArgumentException("Trees must be binary");    }    FlexibleNode tmp=node.getChild(0);    node.removeChild(tmp);    child.addChild(tmp);    tmp.setLength(tmp.getLength() + child.getLength());  }}  }
class C{  @Override protected void initListeners(){}  }
class C{  public boolean checkTableAgainstData(String tableName,String pattern) throws NamingException, SQLException {  Context ctx=cache.getJNDIContext();  DataSource ds=(DataSource)ctx.lookup("java:/SimpleDataSource");  boolean found=false;  String id_str="";  String sql="select * from " + tableName;  Connection conn=ds.getConnection();  Statement sm=conn.createStatement();  ResultSet rs=sm.executeQuery(sql);  while (rs.next()) {    System.out.println("id:" + rs.getString(1));    System.out.println("name:" + rs.getString(2));    id_str=rs.getString(1);    if (id_str.equals(pattern)) {      found=true;      break;    } else     continue;  }  rs.close();  conn.close();  return found;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static void addTagLines(final ZyLabelContent content,final INaviViewNode node,final String prefix,final Color color){  Preconditions.checkNotNull(content,"IE00918: Content argument can't be null");  Preconditions.checkNotNull(node,"IE00919: Node argument can't be null");  Preconditions.checkNotNull(color,"IE00920: Color argument can't be null");  final Iterator<CTag> it=node.getTagsIterator();  while (it.hasNext()) {    final CTag tag=it.next();    if (!"".equals(tag.getName())) {      final ZyLineContent lineComment=new ZyLineContent(prefix + tag.getName(),null);      lineComment.setTextColor(color);      lineComment.setFont(ITALIC_BOLD_FONT);      content.addLineContent(lineComment);    }  }}  }
class C{  public Matrix4d shadow(Vector4d light,Matrix4d planeTransform){  return shadow(light,planeTransform,this);}  }
class C{  public AbortException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void addJDIListener(JDIListener jl){  jdiListeners.add(jl);}  }
class C{  public PersistentSubscriptionDeletedException(){  super("The subscription has been deleted.");}  }
class C{  @Override public Mounted addEquipment(EquipmentType etype,int loc) throws LocationFullException {  return addEquipment(etype,loc,false,-1);}  }
class C{  @HLEFunction(nid=0xD5A229C9,version=150,checkInsideInterrupt=true) public int __sceSasRevEVOL(int sasCore,int leftVolume,int rightVolume){  checkSasHandleGood(sasCore);  waveformEffectLeftVol=leftVolume;  waveformEffectRightVol=rightVolume;  return 0;}  }
class C{  private static String requireNonNull(String required,String message) throws ConfigurationRuntimeException {  if (required == null)   throw new ConfigurationRuntimeException(message);  return required;}  }
class C{  private void verifyPassword(){  Transaction transaction=new Transaction("user",1,new SecureRandom().nextLong());  if (!mStoreBackend.verify(transaction,mPassword.getText().toString())) {    return;  }  if (mStage == Stage.NEW_FINGERPRINT_ENROLLED) {    SharedPreferences.Editor editor=mSharedPreferences.edit();    editor.putBoolean(getString(R.string.use_fingerprint_to_authenticate_key),mUseFingerprintFutureCheckBox.isChecked());    editor.apply();    if (mUseFingerprintFutureCheckBox.isChecked()) {      mActivity.createKeyPair();      mStage=Stage.FINGERPRINT;    }  }  mPassword.setText("");  mActivity.onPurchased(null);  dismiss();}  }
class C{  public String primaryOccupationName(){  String primaryOccupation=null;  if (professionalExperience != null && professionalExperience.primaryCompany() != null) {    Company company=professionalExperience.primaryCompany();    primaryOccupation=company.title();  }  if (primaryOccupation == null || primaryOccupation.isEmpty()) {    if (educationBackground != null && educationBackground.primarySchool() != null) {      School primarySchool=educationBackground.primarySchool();      primaryOccupation=primarySchool.degree();    }  }  return primaryOccupation;}  }
class C{  public boolean charge(ItemStack stack){  if (stack == null || !Info.isIc2Available())   return false;  double amount=ElectricItem.manager.charge(stack,energyStored,tier,false,false);  energyStored-=amount;  return amount > 0;}  }
class C{  public Point2D toVector(Vec2 v){  return new Point2D(toPixels(v.x),toPixels(-v.y));}  }
class C{  public void pendingSplits(Map<HadoopInputSplit,Integer> pendingSplits){  this.pendingSplits=pendingSplits;}  }
class C{  public void createMInOut(MWMInOutBoundLine line){  MOrderLine oline=line.getMOrderLine();  if (line.getPickedQty().subtract(oline.getQtyDelivered()).signum() <= 0 && !p_IsIncludeNotAvailable) {    return;  }  MLocator standing=null;  BigDecimal QtyDelivered=Env.ZERO;  if (p_IsIncludeNotAvailable) {    standing=MLocator.getDefault((MWarehouse)line.getParent().getM_Warehouse());    QtyDelivered=line.getQtyToPick().subtract(oline.getQtyDelivered());  } else {    standing=line.getMLocator();    QtyDelivered=line.getPickedQty().subtract(oline.getQtyDelivered());  }  MInOut inout=getMInOut(oline);  inout.setIsSOTrx(true);  inout.saveEx();  MInOutLine shipmentLine=new MInOutLine(line.getCtx(),0,line.get_TrxName());  shipmentLine.setM_InOut_ID(inout.getM_InOut_ID());  shipmentLine.setM_Locator_ID(standing.getM_Locator_ID());  shipmentLine.setM_Product_ID(line.getM_Product_ID());  shipmentLine.setQtyEntered(QtyDelivered);  shipmentLine.setMovementQty(QtyDelivered);  shipmentLine.setC_OrderLine_ID(oline.getC_OrderLine_ID());  shipmentLine.saveEx();}  }
class C{  @Override public boolean isFactoryForType(Object object){  if (object == modelPackage) {    return true;  }  if (object instanceof EObject) {    return ((EObject)object).eClass().getEPackage() == modelPackage;  }  return false;}  }
class C{  @Override public void onItemClick(AdapterView<?> adapter,View view,int position,long id){  FolderListEntry entry=(FolderListEntry)adapter.getItemAtPosition(position);  if (mIsCreatingFolder) {    BookmarkId selectedFolder=null;    if (entry.mType == FolderListEntry.TYPE_NORMAL) {      selectedFolder=entry.mId;    } else {      assert false : "New folder items should not be clickable in creating mode";    }    Intent intent=new Intent();    intent.putExtra(INTENT_SELECTED_FOLDER,selectedFolder.toString());    setResult(RESULT_OK,intent);    finish();  } else   if (entry.mType == FolderListEntry.TYPE_NEW_FOLDER) {    EnhancedBookmarkAddEditFolderActivity.startAddFolderActivity(this,mBookmarksToMove);  } else   if (entry.mType == FolderListEntry.TYPE_NORMAL) {    mEnhancedBookmarksModel.moveBookmarks(mBookmarksToMove,entry.mId);    finish();  }}  }
class C{  private double psfunc3(double x,double t1,double t2,int dim){  dim=dim + 1;  double xy=4 * (x - 0.5);  if (lType == 31) {    double rate=dim / (double)numberOfVariables;    return xy - 4 * (t1 * t1 * rate + t2 * (1.0 - rate)) + 2;  } else   if (lType == 32) {    double theta=2 * Math.PI * t1 + dim * Math.PI / numberOfVariables;    return xy - 2 * t2 * Math.sin(theta);  } else {    throw new IllegalStateException();  }}  }
class C{  public static PrivateKey fromDecimalString(final String decimal){  try {    return new PrivateKey(new BigInteger(decimal,10));  } catch (  final NumberFormatException e) {    throw new CryptoException(e);  }}  }
class C{  public ToTextSAXHandler(ContentHandler handler,String encoding){  super(handler,encoding);}  }
class C{  public static List combinations(Object[] collections){  return combinations((Iterable)Arrays.asList(collections));}  }
class C{  public Boolean isFaultToleranceEnabled(){  return faultToleranceEnabled;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public double classifyInstance(Instance inst) throws Exception {  double prediction=m_zeroR.classifyInstance(inst);  if (!m_SuitableData) {    return prediction;  }  for (  Classifier classifier : m_Classifiers) {    double toAdd=classifier.classifyInstance(inst);    if (Utils.isMissingValue(toAdd)) {      throw new UnassignedClassException("AdditiveRegression: base learner predicted missing value.");    }    toAdd*=getShrinkage();    prediction+=toAdd;  }  return prediction;}  }
class C{  public boolean requiresControl(){  return true;}  }
class C{  public boolean isValid(){  if (getC_BP_BankAccount_ID() != 0)   return true;  return !isDirect();}  }
class C{  public BufferOccupancyReport(){  super();  Settings settings=getSettings();  if (settings.contains(BUFFER_REPORT_INTERVAL)) {    interval=settings.getInt(BUFFER_REPORT_INTERVAL);  } else {    interval=-1;  }  if (interval < 0) {    interval=DEFAULT_BUFFER_REPORT_INTERVAL;  }}  }
class C{  public Object read(InputNode node,Object value) throws Exception {  Class expect=type.getType();  if (value != null) {    throw new PersistenceException("Can not read value of %s for %s",expect,entry);  }  return read(node);}  }
class C{  public TypeInferencer(ParserFactory template){  m_template=template;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:10.785 -0500",hash_original_method="216BAC89605FCA377BB0AADBB6E2A8AC",hash_generated_method="3077633676B6AE40756F1F933FD918E4") public URL(String protocol,String host,String file) throws MalformedURLException {  this(protocol,host,-1,file,null);}  }
class C{  String printIt(String arg){  char[] carray=arg.toCharArray();  StringBuffer bb=new StringBuffer(arg.length() * 5);  for (int ii=0; ii < arg.length(); ii++) {    int ccc=arg.charAt(ii);    bb.append(String.format("%1$04x ",ccc));  }  return bb.toString();}  }
class C{  public static Map<String,Integer> readLines(TransitSchedule schedule,Vehicles vehicles,Set<Integer> bitfeldNummern,Map<String,String> operators,String FPLAN){  Map<String,Integer> vehiclesUndefined=new HashMap<>();  VehiclesFactory vehicleBuilder=vehicles.getFactory();  try {    Map<Id<TransitLine>,PtLineFPLAN> linesFPLAN=new HashMap<>();    PtRouteFPLAN currentRouteFPLAN=null;    Counter counter=new Counter("FPLAN line # ");    BufferedReader readsLines=new BufferedReader(new InputStreamReader(new FileInputStream(FPLAN),"latin1"));    String newLine=readsLines.readLine();    while (newLine != null) {      if (newLine.charAt(0) == '*') {        if (newLine.charAt(1) == 'Z') {          Id<TransitLine> lineId=Id.create(operators.get(newLine.substring(9,15).trim()),TransitLine.class);          PtLineFPLAN lineFPLAN;          if (linesFPLAN.containsKey(lineId)) {            lineFPLAN=linesFPLAN.get(lineId);          } else {            lineFPLAN=new PtLineFPLAN(lineId);            linesFPLAN.put(lineId,lineFPLAN);          }          int routeNr=0;          Id<TransitRoute> routeId=Id.create(newLine.substring(3,8).trim() + "_" + String.format("%03d",routeNr),TransitRoute.class);          while (lineFPLAN.getIdRoutesFPLAN().contains(routeId)) {            routeNr++;            routeId=Id.create(newLine.substring(3,8).trim() + "_" + String.format("%03d",routeNr),TransitRoute.class);          }          int numberOfDepartures=0;          int cycleTime=0;          try {            numberOfDepartures=Integer.parseInt(newLine.substring(22,25));            cycleTime=Integer.parseInt(newLine.substring(26,29));          } catch (          Exception e) {          }          currentRouteFPLAN=new PtRouteFPLAN(lineId,routeId,numberOfDepartures,cycleTime);          lineFPLAN.addPtRouteFPLAN(currentRouteFPLAN);        } else         if (newLine.charAt(1) == 'G') {          if (currentRouteFPLAN != null) {            Id<VehicleType> typeId=Id.create(newLine.substring(3,6).trim(),VehicleType.class);            VehicleType vehicleType=vehicles.getVehicleTypes().get(typeId);            if (vehicleType == null) {              String typeIdstr=typeId.toString();              vehicleType=vehicleBuilder.createVehicleType(Id.create(typeId.toString(),VehicleType.class));              vehicleType.setLength(HafasDefinitions.Vehicles.valueOf(typeIdstr).length);              vehicleType.setWidth(HafasDefinitions.Vehicles.valueOf(typeIdstr).width);              vehicleType.setAccessTime(HafasDefinitions.Vehicles.valueOf(typeIdstr).accessTime);              vehicleType.setEgressTime(HafasDefinitions.Vehicles.valueOf(typeIdstr).egressTime);              vehicleType.setDoorOperationMode(HafasDefinitions.Vehicles.valueOf(typeIdstr).doorOperation);              vehicleType.setPcuEquivalents(HafasDefinitions.Vehicles.valueOf(typeIdstr).pcuEquivalents);              VehicleCapacity vehicleCapacity=vehicleBuilder.createVehicleCapacity();              vehicleCapacity.setSeats(HafasDefinitions.Vehicles.valueOf(typeIdstr).capacitySeats);              vehicleCapacity.setStandingRoom(HafasDefinitions.Vehicles.valueOf(typeIdstr).capacityStanding);              vehicleType.setCapacity(vehicleCapacity);              vehicles.addVehicleType(vehicleType);            }            currentRouteFPLAN.setUsedVehicle(typeId,vehicleType);            int hourFirstDeparture=Integer.parseInt(newLine.substring(25,27));            int minuteFirstDeparture=Integer.parseInt(newLine.substring(27,29));            currentRouteFPLAN.setFirstDepartureTime(hourFirstDeparture,minuteFirstDeparture);          }        } else         if (newLine.charAt(1) == 'A' && newLine.charAt(3) == 'V' && newLine.charAt(4) == 'E') {          if (currentRouteFPLAN != null) {            int localBitfeldnr=0;            if (newLine.substring(22,28).trim().length() > 0) {              localBitfeldnr=Integer.parseInt(newLine.substring(22,28));            }            if (!bitfeldNummern.contains(localBitfeldnr)) {              linesFPLAN.get(currentRouteFPLAN.getLineId()).removePtRouteFPLAN(currentRouteFPLAN);              currentRouteFPLAN=null;            }          }        } else         if (newLine.charAt(1) == 'L') {          if (currentRouteFPLAN != null) {            currentRouteFPLAN.setLineDescription(newLine.substring(3,11).trim());          }        } else         if (newLine.charAt(1) == 'T') {          log.error("*T-Line in HAFAS discovered. Please implement appropriate read out.");        }      } else       if (newLine.charAt(0) == '+') {        log.error("+-Line in HAFAS discovered. Please implement appropriate read out.");      } else {        if (currentRouteFPLAN != null) {          double arrivalTime=0;          try {            arrivalTime=Double.parseDouble(newLine.substring(31,33)) * 3600 + Double.parseDouble(newLine.substring(33,35)) * 60;          } catch (          Exception e) {          }          double departureTime=0;          try {            departureTime=Double.parseDouble(newLine.substring(38,40)) * 3600 + Double.parseDouble(newLine.substring(40,42)) * 60;          } catch (          Exception e) {          }          Id<TransitStopFacility> stopId=Id.create(newLine.substring(0,7),TransitStopFacility.class);          TransitStopFacility stopFacility=schedule.getFacilities().get(stopId);          currentRouteFPLAN.addStop(stopId,stopFacility,arrivalTime,departureTime);        }      }      newLine=readsLines.readLine();      counter.incCounter();    }    readsLines.close();    counter.printCounter();    for (    Id<TransitLine> transitLineId : linesFPLAN.keySet()) {      TransitLine line=linesFPLAN.get(transitLineId).createTransitLine();      if (line != null) {        schedule.addTransitLine(line);      }    }    for (    TransitLine line : schedule.getTransitLines().values()) {      for (      TransitRoute route : line.getRoutes().values()) {        for (        Departure departure : route.getDepartures().values()) {          Id<Vehicle> vehicleId=departure.getVehicleId();          Id<VehicleType> vehicleTypeId=Id.create(vehicleId.toString().split("_")[0],VehicleType.class);          VehicleType vehicleType=vehicles.getVehicleTypes().get(vehicleTypeId);          vehicles.addVehicle(vehicleBuilder.createVehicle(vehicleId,vehicleType));        }      }    }  } catch (  IOException e) {    e.printStackTrace();  }  return vehiclesUndefined;}  }
class C{  public static ClassificationDataSet readC(int classification_target,Reader reader,char delimiter,int lines_to_skip,char comment,Set<Integer> cat_cols) throws IOException {  return (ClassificationDataSet)readCSV(reader,lines_to_skip,delimiter,comment,cat_cols,-1,classification_target);}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  private void ensureSorted(){  if (needsSorting) {    Collections.sort(children,FigureLayerComparator.INSTANCE);    needsSorting=false;  }}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.ROOT;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:02.532 -0500",hash_original_method="0723455182874DC076BEC16F53F1DAFE",hash_generated_method="E9ED7C304D8EC41D1D7DA7A897DA5FCA") public ReasonFlags(boolean[] flags){  this.flags=flags;}  }
class C{  public UsedClass methodInC5(UsedClass p){  return p;}  }
class C{  public void visitEnd(){  if (fv != null) {    fv.visitEnd();  }}  }
class C{  public void makePath(String path,boolean retryOnConnLoss) throws KeeperException, InterruptedException {  makePath(path,null,CreateMode.PERSISTENT,retryOnConnLoss);}  }
class C{  public String toString(){  return x + " x " + y;}  }
class C{  public static void main(String[] args) throws Exception {  new SetHypervolume().start(args);}  }
class C{  private StorageSystem createStorageSystem(StorageSystemViewObject storageSystemViewObject,String scannedStorageSystemNativeGuid,Map<URI,List<String>> providersToUpdate) throws IOException {  Set<String> providerSet=storageSystemViewObject.getProviders();  StorageSystem newStorageSystem=null;  Iterator<String> iterator=providerSet.iterator();  if (iterator.hasNext()) {    StorageProvider providerFromDB;    do {      String provider=iterator.next();      providerFromDB=_dbClient.queryObject(StorageProvider.class,URI.create(provider));    } while (iterator.hasNext() && (providerFromDB == null || providerFromDB.getInactive()));    if (providerFromDB == null || providerFromDB.getInactive()) {      _logger.info(String.format("StorageSystem %s was found during scan but could not find its associated active providers. " + "Could have been deleted while scan was occurring.",scannedStorageSystemNativeGuid));      return null;    }    _logger.info("Scanned StorageSystemNativeGuid for a new Storage System:" + scannedStorageSystemNativeGuid);    newStorageSystem=new StorageSystem();    newStorageSystem.setId(URIUtil.createId(StorageSystem.class));    newStorageSystem.setNativeGuid(scannedStorageSystemNativeGuid);    newStorageSystem.setSystemType(storageSystemViewObject.getDeviceType());    String model=storageSystemViewObject.getProperty(storageSystemViewObject.MODEL);    if (StringUtils.isNotBlank(model)) {      newStorageSystem.setModel(model);    }    String serialNo=storageSystemViewObject.getProperty(storageSystemViewObject.SERIAL_NUMBER);    if (StringUtils.isNotBlank(serialNo)) {      newStorageSystem.setSerialNumber(serialNo);    }    String version=storageSystemViewObject.getProperty(storageSystemViewObject.VERSION);    if (StringUtils.isNotBlank(version)) {      newStorageSystem.setFirmwareVersion(version);    }    String name=storageSystemViewObject.getProperty(storageSystemViewObject.STORAGE_NAME);    if (StringUtils.isNotBlank(name)) {      newStorageSystem.setLabel(name);    }    StringSet allProviders=new StringSet(providerSet);    newStorageSystem.setProviders(allProviders);    setActiveProviderDetailsInSystem(providerFromDB,newStorageSystem,providersToUpdate);    newStorageSystem.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());    newStorageSystem.setReachableStatus(true);  }  return newStorageSystem;}  }
class C{  public static char combine2bytesToU16(byte high,byte low){  char highU8=convertByte2Uint8(high);  char lowU8=convertByte2Uint8(low);  return (char)(highU8 << 8 | lowU8);}  }
class C{  @Override public OCRTransaction findById(OCRTransaction entity) throws DataAccessException {  if (!entity.getId().trim().isEmpty()) {    return dynamoDBMapper.load(getType(),entity.getId());  } else {    return null;  }}  }
class C{  public static void writeln(byte[] b,boolean flush){  write(b);  writelnWithFlush(flush);}  }
class C{  public TextSelection(int offset,int length){  this(null,offset,length);}  }
class C{  public Holder(ObjectDigestInfo objectDigestInfo){  this.objectDigestInfo=objectDigestInfo;}  }
class C{  public static long convertDateStringCompactToTimstamp(String timestring) throws NullPointerException, NumberFormatException {  int dayOfMonth=Integer.parseInt(timestring.substring(0,2));  int month=Integer.parseInt(timestring.substring(3,5));  int year=Integer.parseInt(timestring.substring(6));  Calendar cal=Calendar.getInstance();  cal.set(Calendar.YEAR,year);  cal.set(Calendar.MONTH,month - 1);  cal.set(Calendar.DAY_OF_MONTH,dayOfMonth);  cal=reduceCalendar(cal);  return cal.getTimeInMillis();}  }
class C{  public void reconfigure(){  accountHeader.clear();  SteamGiftsUserData account=SteamGiftsUserData.getCurrent(activity);  if (account.isLoggedIn()) {    profile=new ProfileDrawerItem().withName(account.getName()).withEmail("...").withIdentifier(1);    if (account.getImageUrl() != null && !account.getImageUrl().isEmpty())     profile.withIcon(account.getImageUrl());    accountHeader.addProfile(profile,0);  } else {    profile=new ProfileDrawerItem().withName(activity.getString(R.string.guest)).withEmail("Not logged in").withIcon(R.drawable.default_avatar).withIdentifier(1);    accountHeader.addProfile(profile,0);  }  drawer.removeAllItems();  if (!account.isLoggedIn())   drawer.addItem(new PrimaryDrawerItem().withName(R.string.login).withIdentifier(R.string.login).withSelectable(false).withIcon(FontAwesome.Icon.faw_sign_in));  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(activity);  String mode=sharedPreferences.getString("preference_sidebar_discussion_list","full");  addGiveawayItems(account);  if ("compact".equals(mode))   drawer.addItem(new DividerDrawerItem());  addDiscussionItems(account,mode);  drawer.addItems(new DividerDrawerItem());  drawer.addItem(new PrimaryDrawerItem().withName(R.string.navigation_saved_elements).withIdentifier(R.string.navigation_saved_elements).withIcon(FontAwesome.Icon.faw_star));  drawer.addItem(new PrimaryDrawerItem().withName(R.string.preferences).withIdentifier(R.string.preferences).withSelectable(false).withIcon(FontAwesome.Icon.faw_cog));  drawer.addItem(new PrimaryDrawerItem().withName(R.string.navigation_help).withIdentifier(R.string.navigation_help).withSelectable(false).withIcon(FontAwesome.Icon.faw_question));  drawer.addItem(new PrimaryDrawerItem().withName(R.string.navigation_about).withIdentifier(R.string.navigation_about).withSelectable(false).withIcon(FontAwesome.Icon.faw_info));}  }
class C{  protected double calculateLogLikelihood(){  if (patternLogLikelihoods == null) {    patternLogLikelihoods=new double[patternCount];  }  if (!integrateAcrossCategories) {    if (siteCategories == null) {      siteCategories=new int[patternCount];    }    for (int i=0; i < patternCount; i++) {      siteCategories[i]=siteModel.getCategoryOfSite(i);    }  }  if (tipStatesModel != null) {    int extNodeCount=treeModel.getExternalNodeCount();    for (int index=0; index < extNodeCount; index++) {      if (updateNode[index]) {        likelihoodCore.setNodePartialsForUpdate(index);        tipStatesModel.getTipPartials(index,tipPartials);        likelihoodCore.setCurrentNodePartials(index,tipPartials);      }    }  }  final NodeRef root=treeModel.getRoot();  traverse(treeModel,root);  double logL=0.0;  double ascertainmentCorrection=getAscertainmentCorrection(patternLogLikelihoods);  for (int i=0; i < patternCount; i++) {    logL+=(patternLogLikelihoods[i] - ascertainmentCorrection) * patternWeights[i];  }  if (logL == Double.NEGATIVE_INFINITY) {    Logger.getLogger("dr.evomodel").info("TreeLikelihood, " + this.getId() + ", turning on partial likelihood scaling to avoid precision loss");    likelihoodCore.setUseScaling(true);    updateAllNodes();    updateAllPatterns();    traverse(treeModel,root);    logL=0.0;    ascertainmentCorrection=getAscertainmentCorrection(patternLogLikelihoods);    for (int i=0; i < patternCount; i++) {      logL+=(patternLogLikelihoods[i] - ascertainmentCorrection) * patternWeights[i];    }  }  for (int i=0; i < nodeCount; i++) {    updateNode[i]=false;  }  return logL;}  }
class C{  public synchronized void addPanListener(PanListener listener){  mPanListeners.add(listener);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:00.002 -0500",hash_original_method="543AFBFA58DD3885C5C6D68F749BE5FB",hash_generated_method="F59402BF202611685F635C695FD2D912") @Override public synchronized int hashCode(){  int hashCode=getID().hashCode() + rawOffset;  if (useDaylight) {    hashCode+=startYear + startMonth + startDay+ startDayOfWeek+ startTime+ startMode+ endMonth+ endDay+ endDayOfWeek+ endTime+ endMode+ dstSavings;  }  return hashCode;}  }
class C{  public void assertGrabPoints(){  int rt=getGraphic().getRenderType();  if (rt != lastRenderType) {    clearGrabPoints();    lastRenderType=rt;  }  if (gpr == null) {    gpr=new GrabPoint(-1,-1);    gPoints[RADIUS_POINT_INDEX]=gpr;  }  if (gpnw == null) {    gpnw=new GrabPoint(-1,-1);    gPoints[NW_POINT_INDEX]=gpnw;  }  if (gpn == null) {    gpn=new VerticalGrabPoint(-1,-1);    gPoints[N_POINT_INDEX]=gpn;  }  if (gpne == null) {    gpne=new GrabPoint(-1,-1);    gPoints[NE_POINT_INDEX]=gpne;  }  if (gpw == null) {    gpw=new HorizontalGrabPoint(-1,-1);    gPoints[W_POINT_INDEX]=gpw;  }  if (gpe == null) {    gpe=new HorizontalGrabPoint(-1,-1);    gPoints[E_POINT_INDEX]=gpe;  }  if (gpsw == null) {    gpsw=new GrabPoint(-1,-1);    gPoints[SW_POINT_INDEX]=gpsw;  }  if (gps == null) {    gps=new VerticalGrabPoint(-1,-1);    gPoints[S_POINT_INDEX]=gps;  }  if (gpse == null) {    gpse=new GrabPoint(-1,-1);    gPoints[SE_POINT_INDEX]=gpse;  }  if (gpc == null) {    gpc=new OffsetGrabPoint(-1,-1);    gPoints[CENTER_POINT_INDEX]=gpc;    if (getGraphic().getRenderType() != OMGraphic.RENDERTYPE_LATLON) {      gpc.addGrabPoint(gpnw);      gpc.addGrabPoint(gpn);      gpc.addGrabPoint(gpne);      gpc.addGrabPoint(gpw);      gpc.addGrabPoint(gpe);      gpc.addGrabPoint(gpsw);      gpc.addGrabPoint(gps);      gpc.addGrabPoint(gpse);    }  }  if (gpo == null) {    gpo=new OffsetGrabPoint(-1,-1);    gPoints[OFFSET_POINT_INDEX]=gpo;    gpo.addGrabPoint(gpc);  }}  }
class C{  public void acc_reduceInner(){  int i;  for (i=0; i < digits.length; i++) {    if (digits[i] != 0) {      if (i == 0) {        return;      }      int newDigs[]=new int[digits.length - i];      for (int j=0; j < digits.length - i; j++) {        newDigs[j]=digits[i + j];      }      digits=newDigs;      return;    }  }  digits=new int[1];  sign=0;}  }
class C{  public ImagePortrayal2D(Image image){  this(image,1.0);}  }
class C{  @Override public void onBackPressed(){  if (CommService.elm.getService() != ObdProt.OBD_SVC_NONE) {    if (dataViewMode == DATA_VIEW_MODE.FILTERED) {      setDataViewMode(DATA_VIEW_MODE.LIST);    } else {      setObdService(ObdProt.OBD_SVC_NONE,null);    }  } else {    if (lastBackPressTime < System.currentTimeMillis() - EXIT_TIMEOUT) {      exitToast=Toast.makeText(this,R.string.back_again_to_exit,Toast.LENGTH_SHORT);      exitToast.show();      lastBackPressTime=System.currentTimeMillis();    } else {      if (exitToast != null) {        exitToast.cancel();      }      super.onBackPressed();    }  }}  }
class C{  public boolean isCellEditable(EventObject anEvent){  return m_select;}  }
class C{  public static void startElement(XmlWriter w,XmlNamespace namespace,String elementName,XmlBlob xml,Collection<XmlWriter.Attribute> additionalAttrs,Collection<XmlNamespace> additionalNs) throws IOException {  Collection<XmlWriter.Attribute> attrs;  Collection<XmlNamespace> namespaces;  if (xml != null) {    String lang=xml.getLang();    String base=xml.getBase();    if (lang != null || base != null) {      attrs=new ArrayList<XmlWriter.Attribute>();      if (additionalAttrs != null) {        attrs.addAll(additionalAttrs);      }      if (lang != null) {        attrs.add(new XmlWriter.Attribute("xml:lang",lang));      }      if (base != null) {        attrs.add(new XmlWriter.Attribute("xml:base",base));      }    } else {      assert lang == null && base == null;      attrs=additionalAttrs;    }    List<XmlNamespace> blobNamespaces=xml.getNamespaces();    int additionalNsSize=(additionalNs == null ? 0 : additionalNs.size());    if (blobNamespaces.size() == 0 && additionalNsSize == 0) {      namespaces=null;    } else {      namespaces=new ArrayList<XmlNamespace>(additionalNsSize + blobNamespaces.size());      for (      XmlNamespace blobNs : blobNamespaces) {        namespaces.add(new XmlNamespace(blobNs.getAlias(),blobNs.getUri()));      }      if (additionalNs != null) {        namespaces.addAll(additionalNs);      }    }  } else {    assert xml == null;    attrs=additionalAttrs;    namespaces=additionalNs;  }  w.startElement(namespace,elementName,attrs,namespaces);}  }
class C{  public static Type valueOf(final int value){switch (value) {case 0:    return CON;case 1:  return NON;case 2:return ACK;case 3:return RST;default :throw new IllegalArgumentException("Unknown CoAP type " + value);}}  }
class C{  public void maximumChanged(double value){  colorMap.setRange(colorMap.getMinimum(),value);}  }
class C{  void cleanup(){  controller().sendEasyDccMessage(EasyDccMessage.getExitProgMode(),this);}  }
class C{  public ListenerIdMap(int initialCapacity,float loadFactor){  if (initialCapacity < 0) {    throw new IllegalArgumentException(LocalizedStrings.ListenerIdMap_ILLEGAL_INITIAL_CAPACITY_0.toLocalizedString(Integer.valueOf(initialCapacity)));  }  if (loadFactor <= 0 || Float.isNaN(loadFactor)) {    throw new IllegalArgumentException(LocalizedStrings.ListenerIdMap_ILLEGAL_LOAD_FACTOR_0.toLocalizedString(new Float(loadFactor)));  }  if (initialCapacity == 0) {    initialCapacity=1;  }  this.loadFactor=loadFactor;  table=new Entry[initialCapacity];  threshold=(int)(initialCapacity * loadFactor);}  }
class C{  public int findIndexByName(String name) throws Exception {  int i;  FolderTokenDocTreeNode node=null;  int idx=-1;  for (i=0; i < count(); i++) {    node=(FolderTokenDocTreeNode)m_nodes.get(i);    if (node.getName().equals(name)) {      idx=i;      break;    }  }  return idx;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:10.186 -0500",hash_original_method="FEA4ACACBEC27CDC2E19A445360CDF2B",hash_generated_method="BB97870F58D7F42B8A597BDBDE78E2D6") public LocalSocket(){  this(new LocalSocketImpl());  isBound=false;  isConnected=false;}  }
class C{  public static CodedInputStream newInstance(final InputStream input){  return new CodedInputStream(input);}  }
class C{  @Override public void itemStateChanged(ItemEvent ie){  CardLayout cl=(CardLayout)(settingsContainer.getLayout());  cl.show(settingsContainer,(String)ie.getItem());}  }
class C{  public boolean isReturnval(){  return returnval;}  }
class C{  private String normalizeDateString(String dateString){  return dateString;}  }
class C{  public SAXNotRecognizedException(String message){  super(message);}  }
class C{  public static String fileURL(HttpServletRequest request,HttpServletResponse response,String pathname,String filename){  return toURL(request,response,"/UnknownType",pathname,filename);}  }
class C{  public GF2mField(int degree){  if (degree >= 32) {    throw new IllegalArgumentException(" Error: the degree of field is too large ");  }  if (degree < 1) {    throw new IllegalArgumentException(" Error: the degree of field is non-positive ");  }  this.degree=degree;  polynomial=PolynomialRingGF2.getIrreduciblePolynomial(degree);}  }
class C{  private void indentSmart() throws IOException {  if (!indented) {    indent();    indented=true;  }}  }
class C{  @Override public void createMainMenu(final boolean includeAll,final CommandListener currentCommandListener,final boolean isSingle,final Values commonValues,final Commands currentCommands,final GUIButtons buttons){  this.currentCommandListener=currentCommandListener;  String addSeparator;  fileMenu=new Menu(Messages.getMessage("PdfViewerFileMenu.text"));  addToMainMenu(fileMenu);  openMenu=new Menu(Messages.getMessage("PdfViewerFileMenuOpen.text"));  fileMenu.getItems().add(openMenu);  addMenuItem(openMenu,Messages.getMessage("PdfViewerFileMenuOpen.text"),Commands.OPENFILE);  addMenuItem(openMenu,Messages.getMessage("PdfViewerFileMenuOpenurl.text"),Commands.OPENURL);  addSeparator=properties.getValue("Save") + properties.getValue("Resaveasforms") + properties.getValue("Find");  if (!addSeparator.isEmpty() && addSeparator.equalsIgnoreCase("true")) {    fileMenu.getItems().add(new SeparatorMenuItem());  }  addMenuItem(fileMenu,Messages.getMessage("PdfViewerFileMenuSave.text"),Commands.SAVE);  if (includeAll) {    addMenuItem(fileMenu,Messages.getMessage("PdfViewerFileMenuResaveForms.text"),Commands.SAVEFORM);  }  addMenuItem(fileMenu,Messages.getMessage("PdfViewerFileMenuFind.text"),Commands.FIND);  addSeparator=properties.getValue("Documentproperties");  if (!addSeparator.isEmpty() && addSeparator.equalsIgnoreCase("true")) {    fileMenu.getItems().add(new SeparatorMenuItem());  }  addMenuItem(fileMenu,Messages.getMessage("PdfViewerFileMenuDocProperties.text"),Commands.DOCINFO);  if (commonValues.isEncrypOnClasspath()) {    addMenuItem(fileMenu,Messages.getMessage("PdfViewerFileMenuSignPDF.text"),Commands.SIGN);  } else {    addMenuItem(fileMenu,Messages.getMessage("PdfViewerFileMenuSignPDF.text"),Commands.SIGN);  }  addSeparator=properties.getValue("Recentdocuments");  if (!addSeparator.isEmpty() && addSeparator.equalsIgnoreCase("true")) {    fileMenu.getItems().add(new SeparatorMenuItem());    currentCommands.recentDocumentsOption();  }  addSeparator=properties.getValue("Exit");  if (!addSeparator.isEmpty() && addSeparator.equalsIgnoreCase("true")) {    fileMenu.getItems().add(new SeparatorMenuItem());  }  addMenuItem(fileMenu,Messages.getMessage("PdfViewerFileMenuExit.text"),Commands.EXIT);  editMenu=new Menu(Messages.getMessage("PdfViewerEditMenu.text"));  addToMainMenu(editMenu);  addMenuItem(editMenu,Messages.getMessage("PdfViewerEditMenuCopy.text"),Commands.COPY);  addMenuItem(editMenu,Messages.getMessage("PdfViewerEditMenuSelectall.text"),Commands.SELECTALL);  addMenuItem(editMenu,Messages.getMessage("PdfViewerEditMenuDeselectall.text"),Commands.DESELECTALL);  addSeparator=properties.getValue("Preferences");  if (!addSeparator.isEmpty() && addSeparator.equalsIgnoreCase("true")) {    editMenu.getItems().add(new SeparatorMenuItem());  }  addMenuItem(editMenu,Messages.getMessage("PdfViewerEditMenuPreferences.text"),Commands.PREFERENCES);  viewMenu=new Menu(Messages.getMessage("PdfViewerViewMenu.text"));  addToMainMenu(viewMenu);  goToMenu=new Menu(Messages.getMessage("GoToViewMenuGoto.text"));  viewMenu.getItems().add(goToMenu);  addMenuItem(goToMenu,Messages.getMessage("GoToViewMenuGoto.FirstPage"),Commands.FIRSTPAGE);  addMenuItem(goToMenu,Messages.getMessage("GoToViewMenuGoto.BackPage"),Commands.BACKPAGE);  addMenuItem(goToMenu,Messages.getMessage("GoToViewMenuGoto.ForwardPage"),Commands.FORWARDPAGE);  addMenuItem(goToMenu,Messages.getMessage("GoToViewMenuGoto.LastPage"),Commands.LASTPAGE);  addMenuItem(goToMenu,Messages.getMessage("GoToViewMenuGoto.GoTo"),Commands.GOTO);  addSeparator=properties.getValue("Previousdocument") + properties.getValue("Nextdocument");  if (!addSeparator.isEmpty() && addSeparator.equalsIgnoreCase("true")) {    goToMenu.getItems().add(new SeparatorMenuItem());  }  addMenuItem(goToMenu,Messages.getMessage("GoToViewMenuGoto.PreviousDoucment"),Commands.PREVIOUSDOCUMENT);  addMenuItem(goToMenu,Messages.getMessage("GoToViewMenuGoto.NextDoucment"),Commands.NEXTDOCUMENT);  if (isSingle) {    pageLayoutMenu=new Menu(Messages.getMessage("PageLayoutViewMenu.PageLayout"));    viewMenu.getItems().add(pageLayoutMenu);  }  final String[] descriptions={Messages.getMessage("PageLayoutViewMenu.SinglePage"),Messages.getMessage("PageLayoutViewMenu.PageFlow")};  final int[] value={Display.SINGLE_PAGE,Display.PAGEFLOW};  if (isSingle) {    initLayoutMenus(pageLayoutMenu,descriptions,value,buttons,currentCommands,isSingle);  }  if (properties.getValue("separateCover").equals("true")) {    addMenuItem(viewMenu,Messages.getMessage("PdfViewerViewMenuSeparateCover.text"),Commands.SEPARATECOVER);  }  if (properties.getValue("panMode").equals("true") || properties.getValue("textSelect").equals("true")) {    viewMenu.getItems().add(new SeparatorMenuItem());    if (properties.getValue("panMode").equals("true")) {      addMenuItem(viewMenu,Messages.getMessage("PdfViewerViewMenuPanMode.text"),Commands.PANMODE);    }    if (properties.getValue("textSelect").equals("true")) {      addMenuItem(viewMenu,Messages.getMessage("PdfViewerViewMenuTextSelectMode.text"),Commands.TEXTSELECT);    }    viewMenu.getItems().add(new SeparatorMenuItem());  }  addSeparator=properties.getValue("Fullscreen");  if (!addSeparator.isEmpty() && addSeparator.equalsIgnoreCase("true")) {    goToMenu.getItems().add(new SeparatorMenuItem());  }  addMenuItem(viewMenu,Messages.getMessage("PdfViewerViewMenuFullScreenMode.text"),Commands.FULLSCREEN);  if (!isSingle) {    windowMenu=new Menu(Messages.getMessage("PdfViewerWindowMenu.text"));    addToMainMenu(windowMenu);    addMenuItem(windowMenu,Messages.getMessage("PdfViewerWindowMenuCascade.text"),Commands.CASCADE);    addMenuItem(windowMenu,Messages.getMessage("PdfViewerWindowMenuTile.text"),Commands.TILE);  }  exportMenu=new Menu(Messages.getMessage("PdfViewerExportMenu.text"));  addToMainMenu(exportMenu);  pdfMenu=new Menu(Messages.getMessage("PdfViewerExportMenuPDF.text"));  exportMenu.getItems().add(pdfMenu);  addMenuItem(pdfMenu,Messages.getMessage("PdfViewerExportMenuOnePerPage.text"),Commands.PDF);  addMenuItem(pdfMenu,Messages.getMessage("PdfViewerExportMenuNUp.text"),Commands.NUP);  addMenuItem(pdfMenu,Messages.getMessage("PdfViewerExportMenuHandouts.text"),Commands.HANDOUTS);  contentMenu=new Menu(Messages.getMessage("PdfViewerExportMenuContent.text"));  exportMenu.getItems().add(contentMenu);  addMenuItem(contentMenu,Messages.getMessage("PdfViewerExportMenuImages.text"),Commands.IMAGES);  addMenuItem(contentMenu,Messages.getMessage("PdfViewerExportMenuText.text"),Commands.TEXT);  addMenuItem(exportMenu,Messages.getMessage("PdfViewerExportMenuBitmap.text"),Commands.BITMAP);  if (includeAll && GUI.debugFX) {    final Menu debugViewport=new Menu("Debug");    addToMainMenu(debugViewport);    addMenuItem(debugViewport,"Toggle viewport border",Commands.TOGGLE);    addMenuItem(debugViewport,"Reset viewport",Commands.RESET);    addMenuItem(debugViewport,"Enable acceleration",Commands.ACCELERATIONON);    addMenuItem(debugViewport,"Disable acceleration",Commands.ACCELERATIONOFF);    addMenuItem(debugViewport,"Show form NAMES",Commands.SHOWFORMNAMES);    addMenuItem(debugViewport,"Wipe properties on exit",Commands.DELETEPROPERTIESONEXIT);    addMenuItem(debugViewport,"Always show mouse coords",Commands.ALWAYSSHOWMOUSE);  }  helpMenu=new Menu(Messages.getMessage("PdfViewerHelpMenu.text"));  addToMainMenu(helpMenu);  addMenuItem(helpMenu,Messages.getMessage("PdfViewerHelpMenu.VisitWebsite"),Commands.VISITWEBSITE);  addMenuItem(helpMenu,Messages.getMessage("PdfViewerHelpMenuTip.text"),Commands.TIP);  addMenuItem(helpMenu,Messages.getMessage("PdfViewerHelpMenuabout.text"),Commands.ABOUT);  if (includeExtraMenus) {    addMenuItem(helpMenu,Messages.getMessage("PdfViewerHelpMenuTutorial.text"),Commands.HELP);  }}  }
class C{  void recordRemoval(HashMapPro<K,V> m){}  }
class C{  public static Object find(Object self,Closure closure){  BooleanClosureWrapper bcw=new BooleanClosureWrapper(closure);  for (Iterator iter=InvokerHelper.asIterator(self); iter.hasNext(); ) {    Object value=iter.next();    if (bcw.call(value)) {      return value;    }  }  return null;}  }
class C{  public void test() throws Exception {  Similarity sim=getSimilarity("text");  assertEquals(IBSimilarity.class,sim.getClass());  IBSimilarity ib=(IBSimilarity)sim;  assertEquals(DistributionSPL.class,ib.getDistribution().getClass());  assertEquals(LambdaDF.class,ib.getLambda().getClass());  assertEquals(NormalizationH2.class,ib.getNormalization().getClass());}  }
class C{  private int countEncoding(int n,ArgumentType code){  Iterator<EmitterDescriptor> i=emitters.iterator();  int count=0;  while (i.hasNext())   if (((EmitterDescriptor)i.next()).argMatchesEncoding(n,code))   count++;  return count;}  }
class C{  void checkMultiColumnCell(int axis,int col,int ncols,View v){  long min=0;  long pref=0;  long max=0;  for (int i=0; i < ncols; i++) {    SizeRequirements req=columnRequirements[col + i];    min+=req.minimum;    pref+=req.preferred;    max+=req.maximum;  }  int cmin=(int)v.getMinimumSpan(axis);  if (cmin > min) {    SizeRequirements[] reqs=new SizeRequirements[ncols];    for (int i=0; i < ncols; i++) {      reqs[i]=columnRequirements[col + i];    }    int[] spans=new int[ncols];    int[] offsets=new int[ncols];    SizeRequirements.calculateTiledPositions(cmin,null,reqs,offsets,spans);    for (int i=0; i < ncols; i++) {      SizeRequirements req=reqs[i];      req.minimum=Math.max(spans[i],req.minimum);      req.preferred=Math.max(req.minimum,req.preferred);      req.maximum=Math.max(req.preferred,req.maximum);    }  }  int cpref=(int)v.getPreferredSpan(axis);  if (cpref > pref) {    SizeRequirements[] reqs=new SizeRequirements[ncols];    for (int i=0; i < ncols; i++) {      reqs[i]=columnRequirements[col + i];    }    int[] spans=new int[ncols];    int[] offsets=new int[ncols];    SizeRequirements.calculateTiledPositions(cpref,null,reqs,offsets,spans);    for (int i=0; i < ncols; i++) {      SizeRequirements req=reqs[i];      req.preferred=Math.max(spans[i],req.preferred);      req.maximum=Math.max(req.preferred,req.maximum);    }  }}  }
class C{  public String addPostRestoreFromFullcopySteps(Workflow workflow,String waitFor,URI storageSystemURI,List<URI> fullCopies,String taskId){  if (fullCopies != null && !fullCopies.isEmpty()) {    List<Volume> sourceVolumes=checkIfDistributedVplexOrVmaxFullCopies(fullCopies);    if (!sourceVolumes.isEmpty()) {      Map<String,RecreateReplicationSetRequestParams> rsetParams=new HashMap<String,RecreateReplicationSetRequestParams>();      List<URI> volumeURIs=new ArrayList<URI>();      URI rpSystemId=sourceVolumes.get(0).getProtectionController();      ProtectionSystem rpSystem=_dbClient.queryObject(ProtectionSystem.class,rpSystemId);      for (      Volume vol : sourceVolumes) {        RecreateReplicationSetRequestParams rsetParam=getReplicationSettings(rpSystem,vol.getId());        rsetParams.put(RPHelper.getRPWWn(vol.getId(),_dbClient),rsetParam);        volumeURIs.add(vol.getId());      }      String stepId=workflow.createStepId();      Workflow.Method recreateRSetExecuteMethod=new Workflow.Method(METHOD_RECREATE_RSET_STEP,rpSystemId,volumeURIs,rsetParams);      waitFor=workflow.createStep(STEP_PRE_VOLUME_RESTORE,"Post volume restore from full copy, add replication set step for RP",waitFor,rpSystemId,rpSystem.getSystemType(),this.getClass(),recreateRSetExecuteMethod,rollbackMethodNullMethod(),stepId);      _log.info("Created workflow step to recreate replication set for volumes");    }  }  return waitFor;}  }
class C{  public Vector3i mul(Vector3i v){  x+=v.x;  y+=v.y;  z+=v.z;  return this;}  }
class C{  @Override public boolean isProcessingInstruction(){  return eventType == XMLStreamConstants.PROCESSING_INSTRUCTION;}  }
class C{  public static void main(String... a) throws Exception {  TestBase test=TestBase.createCaller().init();  test.config.big=true;  test.test();}  }
class C{  public String toString(DateTimeFormatter formatter){  if (formatter == null) {    return toString();  }  return formatter.print(this);}  }
class C{  private void handleIntent(Intent intent){  if (Intent.ACTION_SEARCH.equals(intent.getAction())) {    String query=intent.getStringExtra(SearchManager.QUERY);    viewPager.setCurrentItem(2,true);    if (searchFragment != null) {      searchFragment.searchQuery(query);    }  }}  }
class C{  public void handleAnimatedAttributeChanged(AnimatedLiveAttributeValue alav){  if (alav.getNamespaceURI() == null) {    String ln=alav.getLocalName();    if (ln.equals(SVG_POINTS_ATTRIBUTE)) {      buildShape(ctx,e,(ShapeNode)node);      handleGeometryChanged();      return;    }  }  super.handleAnimatedAttributeChanged(alav);}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.CONTROL_LETTER_ESCAPE_SEQUENCE;}  }
class C{  protected boolean isEqualKey(AbstractHashedMap.HashEntry entry,Object key1,Object key2,Object key3){  MultiKey multi=(MultiKey)entry.getKey();  return multi.size() == 3 && (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) && (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) && (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2)));}  }
class C{  void addClassAnnotations(TypeElement sourceClass) throws IOException {  preserveNecessaryAnnotations(sourceClass,SysCallProcessor.GEN_IMPL_ANNOTATION,"javax.annotation.Generated");  addGeneratedAnnotation(sourceClass);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isSystemUser(){  return systemUser;}  }
class C{  public LiquibaseMigration(){  this(null);}  }
class C{  protected Object invoke(ObjectName resource,String operationName,Object[] params,String[] signature) throws JMXInvocationException {  try {    return mbsc.invoke(resource,operationName,params,signature);  } catch (  InstanceNotFoundException e) {    throw new JMXInvocationException(resource + " is not registered in the MBean server.",e);  }catch (  MBeanException e) {    throw new JMXInvocationException("Exception while invoking " + operationName + " on "+ resource,e);  }catch (  ReflectionException e) {    throw new JMXInvocationException("Couldn't find " + operationName + " on "+ resource+ " with arguments "+ Arrays.toString(signature),e);  }catch (  IOException e) {    throw new JMXInvocationException("Couldn't communicate with remote server at " + toString(),e);  }}  }
class C{  private static Object unmaskNull(Object key){  return (key == NULL_KEY ? null : key);}  }
class C{  public String[] types(){  return this.types;}  }
class C{  public boolean hasNextLine(){  saveCurrentStatus();  String result=findWithinHorizon(LINE_PATTERN,0);  recoverPreviousStatus();  return result != null;}  }
class C{  public static float nextRandomFloat(){  return rand.nextFloat();}  }
class C{  public static void pushParameter(short o){  parametersShort.push(o);}  }
class C{  public static void randomizeWeightsInPlace(Counter<String> wts,double scale){  for (  String feature : wts.keySet()) {    double epsilon=Math.random() * scale;    double newValue=wts.getCount(feature) + epsilon;    wts.setCount(feature,newValue);  }}  }
class C{  private Map<String,String> parseControlTotals(String filename){  LOG.info("Parsing control totals from " + filename);  Map<String,String> map=new TreeMap<>();  BufferedReader br=IOUtils.getBufferedReader(filename);  try {    String line=br.readLine();    while ((line=br.readLine()) != null) {      String[] sa=line.split(",");      if (sa.length == 17) {        map.put(sa[0],line);      } else {        LOG.warn("Zone " + sa[0] + " does not have 17 field - zone will be ignored.");      }    }  } catch (  IOException e) {    throw new RuntimeException("Could not read from BufferedReader for " + filename);  } finally {    try {      br.close();    } catch (    IOException e) {      throw new RuntimeException("Could not close BufferedReader for " + filename);    }  }  LOG.info("Done parsing control totals (" + map.size() + " found)");  return map;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public Fill(){  mPaint=new Paint();  mPaint.setStyle(Paint.Style.FILL);  mPaint.setColor(DEFAULT_FILL_COLOR);}  }
class C{  public static DynamicMessage parseFrom(Descriptor type,CodedInputStream input,ExtensionRegistry extensionRegistry) throws IOException {  return newBuilder(type).mergeFrom(input,extensionRegistry).buildParsed();}  }
class C{  public AffineTransformation rotate(double theta,double x,double y){  compose(rotationInstance(theta,x,y));  return this;}  }
class C{  protected byte[] engineWrap(Key key) throws IllegalBlockSizeException, InvalidKeyException {  byte[] keyVal=key.getEncoded();  if ((keyVal == null) || (keyVal.length == 0)) {    throw new InvalidKeyException("Cannot get an encoding of " + "the key to be wrapped");  }  byte[] cks=getChecksum(keyVal);  byte[] in=new byte[keyVal.length + CHECKSUM_LEN];  System.arraycopy(keyVal,0,in,0,keyVal.length);  System.arraycopy(cks,0,in,keyVal.length,CHECKSUM_LEN);  byte[] out=new byte[iv.length + in.length];  System.arraycopy(iv,0,out,0,iv.length);  cipher.encrypt(in,0,in.length,out,iv.length);  for (int i=0; i < out.length / 2; i++) {    byte temp=out[i];    out[i]=out[out.length - 1 - i];    out[out.length - 1 - i]=temp;  }  try {    cipher.init(false,cipherKey.getAlgorithm(),cipherKey.getEncoded(),IV2);  } catch (  InvalidKeyException ike) {    throw new RuntimeException("Internal cipher key is corrupted");  }  byte[] out2=new byte[out.length];  cipher.encrypt(out,0,out.length,out2,0);  try {    cipher.init(decrypting,cipherKey.getAlgorithm(),cipherKey.getEncoded(),iv);  } catch (  InvalidKeyException ike) {    throw new RuntimeException("Internal cipher key is corrupted");  }  return out2;}  }
class C{  public SqeNotification(String type,Object source,long sequenceNumber){  super(type,source,sequenceNumber);}  }
class C{  public DeviceAutomator denyRuntimePermission(String permission){  clickPermissionDialogButton(permission,0);  return this;}  }
class C{  public void recordBounds(final PlanetModel planetModel,final XYZBounds boundsInfo,final Plane p,final Membership... bounds){  findIntersectionBounds(planetModel,boundsInfo,p,bounds);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:56.579 -0500",hash_original_method="956D6A58CF004E8191495221FE8E06DD",hash_generated_method="E88811BBBA48BA05CC3C91222C4A42AB") public void removeCountryListener(CountryListener listener){synchronized (mListeners) {    ListenerTransport transport=mListeners.get(listener);    if (transport != null) {      try {        mListeners.remove(listener);        mService.removeCountryListener(transport);      } catch (      RemoteException e) {        Log.e(TAG,"removeCountryListener: RemoteException",e);      }    }  }}  }
class C{  private String addStepsForRemovingVolumesFromCG(Workflow workflow,String waitFor,URI cgURI,URI storage,List<URI> volumeList,String taskId) throws InternalException {  Iterator<Volume> volumes=_dbClient.queryIterativeObjects(Volume.class,volumeList);  Map<String,List<URI>> groupMap=new HashMap<String,List<URI>>();  while (volumes.hasNext()) {    Volume volume=volumes.next();    String groupName=volume.getReplicationGroupInstance();    if (NullColumnValueGetter.isNotNullValue(groupName)) {      if (groupMap.get(groupName) == null) {        groupMap.put(groupName,new ArrayList<URI>());      }      groupMap.get(groupName).add(volume.getId());    }  }  for (  Entry<String,List<URI>> entry : groupMap.entrySet()) {    waitFor=addStepsForRemovingVolumesFromCG(workflow,waitFor,cgURI,storage,entry.getKey(),entry.getValue(),taskId);  }  return waitFor;}  }
class C{  private static boolean isValidEntry(final String key,final String value){  boolean load;  int pos1;  if (key.startsWith("sfx.")) {    pos1=value.indexOf(',');    if (pos1 > -1) {      load=value.substring(pos1 + 1).charAt(0) != 'x';    } else {      load=true;    }    load|=value.indexOf('.') != -1;    return load;  } else {    return false;  }}  }
class C{  public void send(String message){  if (session == null || !session.isOpen()) {    Discord4J.LOGGER.error(LogMarkers.WEBSOCKET,"Socket attempting to send a message ({}) without a valid session!",message);    return;  }  if (isConnected.get()) {    try {      session.getRemote().sendString(message);    } catch (    IOException e) {      Discord4J.LOGGER.error(LogMarkers.WEBSOCKET,"Error caught attempting to send a websocket message",e);    }  }}  }
class C{  public void paintScrollPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public final synchronized static boolean gc(final int last,final String info){  return getStrategy().gc(last,info);}  }
class C{  protected byte[] computeSHAdigest(final byte[] value){  try {    return MessageDigest.getInstance("SHA").digest(value);  } catch (  Exception e) {    throw new UnsupportedOperationException(e.toString());  }}  }
class C{  protected void messageEvent(String selection){  m_notifier.notifyEvent(new MessageEvent(selection),new Vector<Object>());}  }
class C{  @Override public void execute(){  new TransitionDiagram().showTransitionDiagram(event.get("data"));}  }
class C{  public static void scale(View view,float from,float to,int duration,AnimatorListenerAdapter listener){  ObjectAnimator scaleX=ObjectAnimator.ofFloat(view,"scaleX",from,to);  ObjectAnimator scaleY=ObjectAnimator.ofFloat(view,"scaleY",from,to);  scaleX.setDuration(duration);  scaleY.setDuration(duration);  if (listener != null) {    scaleX.addListener(listener);  }  scaleX.start();  scaleY.start();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (curNumberOfParameters == 2) {    int masky=getMediaMask(stack);    return Wizard.getInstance().searchForPeopleNTE(getString(stack),masky);  } else   return Wizard.getInstance().searchForPeopleNTE(getString(stack),DBObject.MEDIA_MASK_ALL);}  }
class C{  protected boolean collectInconsistency(Derivation inconsistency){  for (  Fact source : inconsistency.getSources()) {    if (frontier(source)) {      return inconsistencies.add(inconsistency);    }  }  return false;}  }
class C{  public static <T>Set<T> immutableSet(Collection<T> elements){  if (elements == null || elements.isEmpty())   return emptySet();  return java.util.Collections.unmodifiableSet(new LinkedHashSet<>(elements));}  }
class C{  public LocalTypeSet(List<Local> locals,List<Type> types){  super(locals.size() * types.size());  this.locals=locals;  this.types=types;  if (!Scene.v().hasFastHierarchy()) {    Scene.v().setFastHierarchy(new FastHierarchy());  }}  }
class C{  public static String[] sortStringArray(String[] array){  if (ObjectUtils.isEmpty(array)) {    return new String[0];  }  Arrays.sort(array);  return array;}  }
class C{  public void sendGroupChatDisplayedDeliveryReport(String msgId,ContactId contact,long timestamp,String chatId) throws NetworkException {  final GroupChatSession session=mImService.getGroupChatSession(chatId);  if (session == null || !session.isMediaEstablished()) {    if (sLogger.isActivated()) {      sLogger.info("No suitable session found to send the delivery status for " + msgId + " : use SIP message");    }    mImService.getImdnManager().sendMessageDeliveryStatus(chatId,contact,msgId,ImdnDocument.DeliveryStatus.DISPLAYED,timestamp);    return;  }  if (sLogger.isActivated()) {    sLogger.info("Using the available session to send displayed for " + msgId);  }  session.sendMsrpMessageDeliveryStatus(contact,msgId,ImdnDocument.DeliveryStatus.DISPLAYED,timestamp);}  }
class C{  @Override @Nullable public View findView(MetaClass metaClass,@Nullable String name){  if (metaClass == null) {    throw new IllegalArgumentException("Passed metaClass should not be null");  }  if (name == null) {    return null;  }  lock.readLock().lock();  try {    checkInitialized();    View view=retrieveView(metaClass,name,new HashSet<>());    return copyView(view);  }  finally {    lock.readLock().unlock();  }}  }
class C{  public void actionPerformed(ActionEvent e){  if (log.isDebugEnabled()) {    log.debug("actionPerformed");  }  int newVal=Integer.valueOf(_value.getText()).intValue();  updatedTextField();  prop.firePropertyChange("Value",null,Integer.valueOf(newVal));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Map<String,String> parse(final char[] chars,int offset,int length,char separator){  if (chars == null) {    return new HashMap<String,String>();  }  HashMap<String,String> params=new HashMap<String,String>();  this.chars=chars;  this.pos=offset;  this.len=length;  String paramName=null;  String paramValue=null;  while (hasChar()) {    paramName=parseToken(new char[]{'=',separator});    paramValue=null;    if (hasChar() && (chars[pos] == '=')) {      pos++;      paramValue=parseQuotedToken(new char[]{separator});    }    if (hasChar() && (chars[pos] == separator)) {      pos++;    }    if ((paramName != null) && (paramName.length() > 0)) {      if (this.lowerCaseNames) {        paramName=paramName.toLowerCase();      }      params.put(paramName,paramValue);    }  }  return params;}  }
class C{  private static boolean eq(int v1,int v2){  return v1 == v2;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  return mf == null ? "" : mf.getMediaTitle();}  }
class C{  public SingularValueDecomposition(Matrix Arg){  double[][] A=Arg.getArrayCopy();  m=Arg.getRowDimension();  n=Arg.getColumnDimension();  int nu=Math.min(m,n);  s=new double[Math.min(m + 1,n)];  U=new double[m][nu];  V=new double[n][n];  double[] e=new double[n];  double[] work=new double[m];  boolean wantu=true;  boolean wantv=true;  int nct=Math.min(m - 1,n);  int nrt=Math.max(0,Math.min(n - 2,m));  for (int k=0; k < Math.max(nct,nrt); k++) {    if (k < nct) {      s[k]=0;      for (int i=k; i < m; i++) {        s[k]=Maths.hypot(s[k],A[i][k]);      }      if (s[k] != 0.0) {        if (A[k][k] < 0.0) {          s[k]=-s[k];        }        for (int i=k; i < m; i++) {          A[i][k]/=s[k];        }        A[k][k]+=1.0;      }      s[k]=-s[k];    }    for (int j=k + 1; j < n; j++) {      if ((k < nct) & (s[k] != 0.0)) {        double t=0;        for (int i=k; i < m; i++) {          t+=A[i][k] * A[i][j];        }        t=-t / A[k][k];        for (int i=k; i < m; i++) {          A[i][j]+=t * A[i][k];        }      }      e[j]=A[k][j];    }    if (wantu & (k < nct)) {      for (int i=k; i < m; i++) {        U[i][k]=A[i][k];      }    }    if (k < nrt) {      e[k]=0;      for (int i=k + 1; i < n; i++) {        e[k]=Maths.hypot(e[k],e[i]);      }      if (e[k] != 0.0) {        if (e[k + 1] < 0.0) {          e[k]=-e[k];        }        for (int i=k + 1; i < n; i++) {          e[i]/=e[k];        }        e[k + 1]+=1.0;      }      e[k]=-e[k];      if ((k + 1 < m) & (e[k] != 0.0)) {        for (int i=k + 1; i < m; i++) {          work[i]=0.0;        }        for (int j=k + 1; j < n; j++) {          for (int i=k + 1; i < m; i++) {            work[i]+=e[j] * A[i][j];          }        }        for (int j=k + 1; j < n; j++) {          double t=-e[j] / e[k + 1];          for (int i=k + 1; i < m; i++) {            A[i][j]+=t * work[i];          }        }      }      if (wantv) {        for (int i=k + 1; i < n; i++) {          V[i][k]=e[i];        }      }    }  }  int p=Math.min(n,m + 1);  if (nct < n) {    s[nct]=A[nct][nct];  }  if (m < p) {    s[p - 1]=0.0;  }  if (nrt + 1 < p) {    e[nrt]=A[nrt][p - 1];  }  e[p - 1]=0.0;  if (wantu) {    for (int j=nct; j < nu; j++) {      for (int i=0; i < m; i++) {        U[i][j]=0.0;      }      U[j][j]=1.0;    }    for (int k=nct - 1; k >= 0; k--) {      if (s[k] != 0.0) {        for (int j=k + 1; j < nu; j++) {          double t=0;          for (int i=k; i < m; i++) {            t+=U[i][k] * U[i][j];          }          t=-t / U[k][k];          for (int i=k; i < m; i++) {            U[i][j]+=t * U[i][k];          }        }        for (int i=k; i < m; i++) {          U[i][k]=-U[i][k];        }        U[k][k]=1.0 + U[k][k];        for (int i=0; i < k - 1; i++) {          U[i][k]=0.0;        }      } else {        for (int i=0; i < m; i++) {          U[i][k]=0.0;        }        U[k][k]=1.0;      }    }  }  if (wantv) {    for (int k=n - 1; k >= 0; k--) {      if ((k < nrt) & (e[k] != 0.0)) {        for (int j=k + 1; j < nu; j++) {          double t=0;          for (int i=k + 1; i < n; i++) {            t+=V[i][k] * V[i][j];          }          t=-t / V[k + 1][k];          for (int i=k + 1; i < n; i++) {            V[i][j]+=t * V[i][k];          }        }      }      for (int i=0; i < n; i++) {        V[i][k]=0.0;      }      V[k][k]=1.0;    }  }  int pp=p - 1;  int iter=0;  double eps=Math.pow(2.0,-52.0);  double tiny=Math.pow(2.0,-966.0);  while (p > 0) {    int k, kase;    for (k=p - 2; k >= -1; k--) {      if (k == -1) {        break;      }      if (Math.abs(e[k]) <= tiny + eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {        e[k]=0.0;        break;      }    }    if (k == p - 2) {      kase=4;    } else {      int ks;      for (ks=p - 1; ks >= k; ks--) {        if (ks == k) {          break;        }        double t=(ks != p ? Math.abs(e[ks]) : 0.) + (ks != k + 1 ? Math.abs(e[ks - 1]) : 0.);        if (Math.abs(s[ks]) <= tiny + eps * t) {          s[ks]=0.0;          break;        }      }      if (ks == k) {        kase=3;      } else       if (ks == p - 1) {        kase=1;      } else {        kase=2;        k=ks;      }    }    k++;switch (kase) {case 1:{        double f=e[p - 2];        e[p - 2]=0.0;        for (int j=p - 2; j >= k; j--) {          double t=Maths.hypot(s[j],f);          double cs=s[j] / t;          double sn=f / t;          s[j]=t;          if (j != k) {            f=-sn * e[j - 1];            e[j - 1]=cs * e[j - 1];          }          if (wantv) {            for (int i=0; i < n; i++) {              t=cs * V[i][j] + sn * V[i][p - 1];              V[i][p - 1]=-sn * V[i][j] + cs * V[i][p - 1];              V[i][j]=t;            }          }        }      }    break;case 2:{    double f=e[k - 1];    e[k - 1]=0.0;    for (int j=k; j < p; j++) {      double t=Maths.hypot(s[j],f);      double cs=s[j] / t;      double sn=f / t;      s[j]=t;      f=-sn * e[j];      e[j]=cs * e[j];      if (wantu) {        for (int i=0; i < m; i++) {          t=cs * U[i][j] + sn * U[i][k - 1];          U[i][k - 1]=-sn * U[i][j] + cs * U[i][k - 1];          U[i][j]=t;        }      }    }  }break;case 3:{double scale=Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]),Math.abs(s[p - 2])),Math.abs(e[p - 2])),Math.abs(s[k])),Math.abs(e[k]));double sp=s[p - 1] / scale;double spm1=s[p - 2] / scale;double epm1=e[p - 2] / scale;double sk=s[k] / scale;double ek=e[k] / scale;double b=((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2.0;double c=(sp * epm1) * (sp * epm1);double shift=0.0;if ((b != 0.0) | (c != 0.0)) {  shift=Math.sqrt(b * b + c);  if (b < 0.0) {    shift=-shift;  }  shift=c / (b + shift);}double f=(sk + sp) * (sk - sp) + shift;double g=sk * ek;for (int j=k; j < p - 1; j++) {  double t=Maths.hypot(f,g);  double cs=f / t;  double sn=g / t;  if (j != k) {    e[j - 1]=t;  }  f=cs * s[j] + sn * e[j];  e[j]=cs * e[j] - sn * s[j];  g=sn * s[j + 1];  s[j + 1]=cs * s[j + 1];  if (wantv) {    for (int i=0; i < n; i++) {      t=cs * V[i][j] + sn * V[i][j + 1];      V[i][j + 1]=-sn * V[i][j] + cs * V[i][j + 1];      V[i][j]=t;    }  }  t=Maths.hypot(f,g);  cs=f / t;  sn=g / t;  s[j]=t;  f=cs * e[j] + sn * s[j + 1];  s[j + 1]=-sn * e[j] + cs * s[j + 1];  g=sn * e[j + 1];  e[j + 1]=cs * e[j + 1];  if (wantu && (j < m - 1)) {    for (int i=0; i < m; i++) {      t=cs * U[i][j] + sn * U[i][j + 1];      U[i][j + 1]=-sn * U[i][j] + cs * U[i][j + 1];      U[i][j]=t;    }  }}e[p - 2]=f;iter=iter + 1;}break;case 4:{if (s[k] <= 0.0) {s[k]=(s[k] < 0.0 ? -s[k] : 0.0);if (wantv) {for (int i=0; i <= pp; i++) {  V[i][k]=-V[i][k];}}}while (k < pp) {if (s[k] >= s[k + 1]) {break;}double t=s[k];s[k]=s[k + 1];s[k + 1]=t;if (wantv && (k < n - 1)) {for (int i=0; i < n; i++) {  t=V[i][k + 1];  V[i][k + 1]=V[i][k];  V[i][k]=t;}}if (wantu && (k < m - 1)) {for (int i=0; i < m; i++) {  t=U[i][k + 1];  U[i][k + 1]=U[i][k];  U[i][k]=t;}}k++;}iter=0;p--;}break;}}}  }
class C{  public PacketSender(DatagramSocket socket){  running=true;  this.socket=socket;}  }
class C{  public TraceCaseDef_ createTraceCaseDef_(){  TraceCaseDef_Impl traceCaseDef_=new TraceCaseDef_Impl();  return traceCaseDef_;}  }
class C{  protected void notifyScrollingListenersAboutStart(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingStarted(this);  }}  }
class C{  private static int findAnyZero(double[] a,int low,int high){  while (true) {    int middle=(low + high) >>> 1;    double middleValue=a[middle];    if (middleValue < 0.0d) {      low=middle + 1;    } else     if (middleValue > 0.0d) {      high=middle - 1;    } else {      return middle;    }  }}  }
class C{  private static InetAddress decodeIpv6(String input,int pos,int limit){  byte[] address=new byte[16];  int b=0;  int compress=-1;  int groupOffset=-1;  for (int i=pos; i < limit; ) {    if (b == address.length)     return null;    if (i + 2 <= limit && input.regionMatches(i,"::",0,2)) {      if (compress != -1)       return null;      i+=2;      b+=2;      compress=b;      if (i == limit)       break;    } else     if (b != 0) {      if (input.regionMatches(i,":",0,1)) {        i++;      } else       if (input.regionMatches(i,".",0,1)) {        if (!decodeIpv4Suffix(input,groupOffset,limit,address,b - 2))         return null;        b+=2;        break;      } else {        return null;      }    }    int value=0;    groupOffset=i;    for (; i < limit; i++) {      char c=input.charAt(i);      int hexDigit=decodeHexDigit(c);      if (hexDigit == -1)       break;      value=(value << 4) + hexDigit;    }    int groupLength=i - groupOffset;    if (groupLength == 0 || groupLength > 4)     return null;    address[b++]=(byte)((value >>> 8) & 0xff);    address[b++]=(byte)(value & 0xff);  }  if (b != address.length) {    if (compress == -1)     return null;    System.arraycopy(address,compress,address,address.length - (b - compress),b - compress);    Arrays.fill(address,compress,compress + (address.length - b),(byte)0);  }  try {    return InetAddress.getByAddress(address);  } catch (  UnknownHostException e) {    throw new AssertionError();  }}  }
class C{  public void registerFabricNode(FabricNodeCreateSpec request,FutureCallback<FabricNode> responseCallback) throws IOException {  postAsync(FABRIC_NODES_BASE_PATH,serializeObjectAsJson(request),HttpStatus.SC_CREATED,new TypeReference<FabricNode>(){  },responseCallback);}  }
class C{  public static boolean isValidEmail(Object value){  InternetAddress addr=parseEmail(value);  if (addr != null) {    String address=addr.getAddress();    if (address.contains(".."))     return false;    int pos=address.indexOf('@');    if (pos < 1 || pos == address.length() - 1)     return false;    String local=address.substring(0,pos);    String domain=address.substring(pos + 1);    if (domain.charAt(0) == '.' || local.charAt(0) == '.' || local.charAt(local.length() - 1) == '.')     return false;    pos=domain.lastIndexOf('.');    if (pos > 0 && pos < domain.length() - 2) {      if (StringUtil.isAllAlpha(domain.substring(pos + 1)))       return true;      try {        addr.validate();        return true;      } catch (      AddressException e) {      }    }  }  return false;}  }
class C{  public RawData(byte[] data){  this(data,null,0,null,false);}  }
class C{  public Filter createFilter(BridgeContext ctx,Element filterElement,Element filteredElement,GraphicsNode filteredNode,Filter inputFilter,Rectangle2D filterRegion,Map filterMap){  float surfaceScale=convertNumber(filterElement,SVG_SURFACE_SCALE_ATTRIBUTE,1,ctx);  float diffuseConstant=convertNumber(filterElement,SVG_DIFFUSE_CONSTANT_ATTRIBUTE,1,ctx);  Light light=extractLight(filterElement,ctx);  double[] kernelUnitLength=convertKernelUnitLength(filterElement,ctx);  Filter in=getIn(filterElement,filteredElement,filteredNode,inputFilter,filterMap,ctx);  if (in == null) {    return null;  }  Rectangle2D defaultRegion=in.getBounds2D();  Rectangle2D primitiveRegion=SVGUtilities.convertFilterPrimitiveRegion(filterElement,filteredElement,filteredNode,defaultRegion,filterRegion,ctx);  Filter filter=new DiffuseLightingRable8Bit(in,primitiveRegion,light,diffuseConstant,surfaceScale,kernelUnitLength);  handleColorInterpolationFilters(filter,filterElement);  updateFilterMap(filterElement,filter,filterMap);  return filter;}  }
class C{  public OpaqueAttributePlugin locateAttrPlugin(String name){  return this.opaqueAttrByName.get(name);}  }
class C{  public MajorityVote(Classifier... voters){  this.voters=voters;}  }
class C{  public InteractionTypeDefinition(String type,String subType,String pos){  this.type=type;  this.subType=subType;  this.pos=pos;}  }
class C{  public static void main(String... args) throws Exception {  new UpdateTest().test();}  }
class C{  public boolean isIndependent(Node x,Node y,List<Node> z){  double r;  int n=sampleSize();  r=recursivePartialCorrelation.corr(x,y,z);  if (r > 1.)   r=1.;  if (r < -1.)   r=-1.;  double fisherZ=Math.sqrt(n - z.size() - 3.0) * 0.5 * (Math.log(1.0 + r) - Math.log(1.0 - r));  double pValue=2.0 * (1.0 - RandomUtil.getInstance().normalCdf(0,1,Math.abs(fisherZ)));  this.pValue=pValue;  boolean independent=pValue > alpha;  if (verbose) {    if (independent) {      TetradLogger.getInstance().log("independencies",SearchLogUtils.independenceFactMsg(x,y,z,getPValue()));    } else {      if (pValueLogger != null) {        pValueLogger.println(getPValue());      }      TetradLogger.getInstance().log("dependencies",SearchLogUtils.dependenceFactMsg(x,y,z,getPValue()));    }  }  return independent;}  }
class C{  public void initializeView(int layoutId){  inflate(getContext(),layoutId,this);  dragView=(FrameLayout)findViewById(R.id.drag_view);  shadowView=(FrameLayout)findViewById(R.id.shadow_view);}  }
class C{  public static void read(@NonNull UUID characteristic,@NonNull UUID service,@NonNull BlueteethDevice device,@NonNull OnCharacteristicReadListener readListener){  if (device.isConnected()) {    device.discoverServices(null);  } else {    device.connect(false,null);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ExpressionsPackage.LOGICAL_OR_EXPRESSION__LEFT_OPERAND:    return leftOperand != null;case ExpressionsPackage.LOGICAL_OR_EXPRESSION__RIGHT_OPERAND:  return rightOperand != null;}return super.eIsSet(featureID);}  }
class C{  public void onJobStarted(){  MinionsCore.debugPrint("onJobStarted() " + this);}  }
class C{  public dfn addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @SuppressLint("NewApi") private int calculateAnimationDelay(final int position){  int delay;  int lastVisiblePosition=mListViewWrapper.getLastVisiblePosition();  int firstVisiblePosition=mListViewWrapper.getFirstVisiblePosition();  int numberOfItemsOnScreen=lastVisiblePosition - firstVisiblePosition;  int numberOfAnimatedItems=position - 1 - mFirstAnimatedPosition;  if (numberOfItemsOnScreen + 1 < numberOfAnimatedItems) {    delay=mAnimationDelayMillis;    if (mListViewWrapper.getListView() instanceof GridView && Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {      int numColumns=((GridView)mListViewWrapper.getListView()).getNumColumns();      delay+=mAnimationDelayMillis * (position % numColumns);    }  } else {    int delaySinceStart=(position - mFirstAnimatedPosition) * mAnimationDelayMillis;    delay=Math.max(0,(int)(-SystemClock.uptimeMillis() + mAnimationStartMillis + mInitialDelayMillis+ delaySinceStart));  }  return delay;}  }
class C{  public Word minus(Offset w2){  return new Word(value.minus(w2.toLong()));}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean execute(INode state){  OnePuzzle op=(OnePuzzle)state;  op.s++;  return true;}  }
class C{  public boolean closeIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_CLOSE);  if (m_processMsg != null)   return false;  setDocAction(DOCACTION_None);  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_CLOSE);  if (m_processMsg != null)   return false;  return true;}  }
class C{  @Override public InetAddress addressRemote(){  if (_s != null)   return _s.getInetAddress(); else   return null;}  }
class C{  int degree(){  int degree=coeffs.length - 1;  while (degree > 0 && coeffs[degree] == 0) {    degree--;  }  return degree;}  }
class C{  public ImageFetcher(Context context,int imageWidth,int imageHeight){  super(context,imageWidth,imageHeight);  init(context);}  }
class C{  public void testBug2671() throws Exception {  if (versionMeetsMinimum(4,1)) {    createTable("test3","(`field1` int(8) NOT NULL auto_increment, `field2` int(8) unsigned zerofill default NULL," + " `field3` varchar(30) binary NOT NULL default '', `field4` varchar(100) default NULL, `field5` datetime NULL default NULL," + " PRIMARY KEY  (`field1`), UNIQUE KEY `unq_id` (`field2`), UNIQUE KEY  (`field3`)) CHARACTER SET utf8","InnoDB");    this.stmt.executeUpdate("insert into test3 (field1, field3, field4) values (1, 'blewis', 'Bob Lewis')");    String query="UPDATE test3 SET field2=?, field3=?, field4=?, field5=? WHERE field1 = ?";    java.sql.Date mydate=null;    this.pstmt=this.conn.prepareStatement(query);    this.pstmt.setInt(1,13);    this.pstmt.setString(2,"abc");    this.pstmt.setString(3,"def");    this.pstmt.setDate(4,mydate);    this.pstmt.setInt(5,1);    int retval=this.pstmt.executeUpdate();    assertEquals(1,retval);  }}  }
class C{  public void putFloat(float f){  putInt32(Float.floatToIntBits(f));}  }
class C{  public static Toast quickToast(Context context,String message,boolean longLength){  final Toast toast;  if (longLength) {    toast=Toast.makeText(context,message,Toast.LENGTH_LONG);  } else {    toast=Toast.makeText(context,message,Toast.LENGTH_SHORT);  }  toast.show();  return toast;}  }
class C{  public void vrule(long timestamp,Paint color,String legend,float width){  vrule(timestamp,color,legend,new BasicStroke(width));}  }
class C{  final public boolean logModified(Logger log){  return false;}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public LockableViewPager(final Context context){  super(context);}  }
class C{  static boolean analyzePredicate(Compiler compiler,int opPos,int stepType) throws javax.xml.transform.TransformerException {  int argLen;switch (stepType) {case OpCodes.OP_VARIABLE:case OpCodes.OP_EXTFUNCTION:case OpCodes.OP_FUNCTION:case OpCodes.OP_GROUP:    argLen=compiler.getArgLength(opPos);  break;default :argLen=compiler.getArgLengthOfStep(opPos);}int pos=compiler.getFirstPredicateOpPos(opPos);int nPredicates=compiler.countPredicates(pos);return (nPredicates > 0) ? true : false;}  }
class C{  private ServiceBuilderImpl(ServiceBuilderImpl<T> builder){  Objects.requireNonNull(builder);  _services=null;  _address=builder.address();  if (_address != null) {    _name=_address;  } else {    _name=builder.name();  }  _workers=builder.workers();  _api=builder.api();  _queueSize=builder.queueSize();  _queueSizeMax=builder.queueSizeMax();  _offerTimeout=builder.queueTimeout();  _queueFullHandler=builder.queueFullHandler();  _isPublic=builder.isPublic();  _isAutoStart=builder.isAutoStart();  _isJournal=builder.isJournal();  _journalMaxCount=builder.journalMaxCount();  _journalDelay=builder.journalDelay();}  }
class C{  private void copyArrays(){  String[] oldSyms=_symbols;  int size=oldSyms.length;  _symbols=new String[size];  System.arraycopy(oldSyms,0,_symbols,0,size);  Bucket[] oldBuckets=_buckets;  size=oldBuckets.length;  _buckets=new Bucket[size];  System.arraycopy(oldBuckets,0,_buckets,0,size);}  }
class C{  protected long addString(WbXmlEncoder encoder,String s) throws IOException {  Long idx=strtblByString.get(s);  if (idx == null) {    if (WbXmlEncoder.StrtblType.NO.equals(encoder.getType())) {      throw new IOException(String.format("The strtbl cannot be used for '%s'!",s));    }    idx=size;    internalAddString(idx,s);    size+=strtblByIndex.get(idx).getBytes(encoder.getCharset()).length + 1;    encoder.setStrtblUsed();  }  return idx;}  }
class C{  private int doRegister(int registrations){  long adjust=((long)registrations << PARTIES_SHIFT) | registrations;  final Phaser parent=this.parent;  int phase;  for (; ; ) {    long s=(parent == null) ? state : reconcileState();    int counts=(int)s;    int parties=counts >>> PARTIES_SHIFT;    int unarrived=counts & UNARRIVED_MASK;    if (registrations > MAX_PARTIES - parties)     throw new IllegalStateException(badRegister(s));    phase=(int)(s >>> PHASE_SHIFT);    if (phase < 0)     break;    if (counts != EMPTY) {      if (parent == null || reconcileState() == s) {        if (unarrived == 0)         root.internalAwaitAdvance(phase,null); else         if (UNSAFE.compareAndSwapLong(this,stateOffset,s,s + adjust))         break;      }    } else     if (parent == null) {      long next=((long)phase << PHASE_SHIFT) | adjust;      if (UNSAFE.compareAndSwapLong(this,stateOffset,s,next))       break;    } else {synchronized (this) {        if (state == s) {          phase=parent.doRegister(1);          if (phase < 0)           break;          while (!UNSAFE.compareAndSwapLong(this,stateOffset,s,((long)phase << PHASE_SHIFT) | adjust)) {            s=state;            phase=(int)(root.state >>> PHASE_SHIFT);          }          break;        }      }    }  }  return phase;}  }
class C{  protected long parseDate(Calendar calendar) throws IOException {  int ch=skipWhitespace();  int year=0;  for (int i=0; i < 4; i++) {    if (ch >= '0' && ch <= '9')     year=10 * year + ch - '0'; else     throw expectedChar("year",ch);    ch=read();  }  int month=0;  for (int i=0; i < 2; i++) {    if (ch >= '0' && ch <= '9')     month=10 * month + ch - '0'; else     throw expectedChar("month",ch);    ch=read();  }  int day=0;  for (int i=0; i < 2; i++) {    if (ch >= '0' && ch <= '9')     day=10 * day + ch - '0'; else     throw expectedChar("day",ch);    ch=read();  }  if (ch != 'T')   throw expectedChar("`T'",ch);  ch=read();  int hour=0;  for (int i=0; i < 2; i++) {    if (ch >= '0' && ch <= '9')     hour=10 * hour + ch - '0'; else     throw expectedChar("hour",ch);    ch=read();  }  int minute=0;  for (int i=0; i < 2; i++) {    if (ch >= '0' && ch <= '9')     minute=10 * minute + ch - '0'; else     throw expectedChar("minute",ch);    ch=read();  }  int second=0;  for (int i=0; i < 2; i++) {    if (ch >= '0' && ch <= '9')     second=10 * second + ch - '0'; else     throw expectedChar("second",ch);    ch=read();  }  for (; ch > 0 && ch != '<'; ch=read()) {  }  peek=ch;  calendar.set(Calendar.YEAR,year);  calendar.set(Calendar.MONTH,month - 1);  calendar.set(Calendar.DAY_OF_MONTH,day);  calendar.set(Calendar.HOUR_OF_DAY,hour);  calendar.set(Calendar.MINUTE,minute);  calendar.set(Calendar.SECOND,second);  calendar.set(Calendar.MILLISECOND,0);  return calendar.getTime().getTime();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.170 -0500",hash_original_method="B6A6493DA121BF70308A3AD912C75AC8",hash_generated_method="4B718B536FEF51FCF5A96AF1688B588F") private synchronized Vector cloneListeners(){  return (Vector)fListeners.clone();}  }
class C{  public void testAbnormalQuietlyInvoke(){  testAbnormalQuietlyInvoke(mainPool());}  }
class C{  private Workflow.Method untagVolumesMethod(URI systemURI,List<URI> volumeURIs){  return new Workflow.Method("untagVolumes",systemURI,volumeURIs);}  }
class C{  private Node<K,V> findPredecessorOfLast(){  for (; ; ) {    Index<K,V> q=head;    for (; ; ) {      Index<K,V> d, r;      if ((r=q.right) != null) {        if (r.indexesDeletedNode()) {          q.unlink(r);          break;        }        if (r.node.next != null) {          q=r;          continue;        }      }      if ((d=q.down) != null)       q=d; else       return q.node;    }  }}  }
class C{  public static void postResponse(List<VMInformation> vmInfo){}  }
class C{  @Override @SuppressWarnings({"unchecked","rawtypes"}) public synchronized void addStateNotifiable(StateListener<StateType> listener){  if (listener == null)   throw new IllegalArgumentException("null arg");  if (notifiableList == null)   notifiableList=new SnapshotArray(StateListener.class);  notifiableList.add(listener);}  }
class C{  public FormUploadException(){  this(null,null);}  }
class C{  public ColladaLambert(String namespaceURI){  super(namespaceURI);}  }
class C{  @SuppressWarnings("unchecked") public CircularLossyQueue(int size){  this.circularArray=new AtomicReference[size];  for (int i=0; i < size; i++) {    this.circularArray[i]=new AtomicReference<T>();  }  this.maxSize=size;}  }
class C{  public static long hexToId(String hexString){  Assert.hasText(hexString,"Can't convert empty hex string to long");  int length=hexString.length();  if (length < 1 || length > 32)   throw new IllegalArgumentException("Malformed id");  int i=length > 16 ? length - 16 : 0;  long result=0;  for (; i < length; i++) {    char c=hexString.charAt(i);    result<<=4;    if (c >= '0' && c <= '9') {      result|=c - '0';    } else     if (c >= 'a' && c <= 'f') {      result|=c - 'a' + 10;    } else {      throw new IllegalArgumentException("Malformed id");    }  }  return result;}  }
class C{  public VideoStream(int camera){  super();  setCamera(camera);}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(suite());}  }
class C{  private boolean storeGamePathIfValid(Path path){  if (path == null || !Files.isDirectory(path)) {    return false;  }  if (!Files.isRegularFile(path.resolve(FORGED_ALLIANCE_EXE)) && !Files.isRegularFile(path.resolve(SUPREME_COMMANDER_EXE))) {    return storeGamePathIfValid(path.resolve("bin"));  }  Path gamePath=path.getParent();  logger.info("Found game path at {}",gamePath);  preferences.getForgedAlliance().setPath(gamePath);  storeInBackground();  createFaPathLua(gamePath);  return true;}  }
class C{  public CopyException(Throwable cause){  super(cause);}  }
class C{  public static String urlEncode(String str){  try {    return (URLEncoder.encode(str,"utf-8"));  } catch (  Exception e) {    return ("Encoding error");  }}  }
class C{  protected SolrInputDocument processAdd(final String chain,final SolrInputDocument docIn) throws IOException {  return processAdd(chain,new ModifiableSolrParams(),docIn);}  }
class C{  public int processByte(byte in,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  int resultLen=0;  if (bufOff == buf.length) {    resultLen=cipher.processBlock(buf,0,out,outOff);    System.arraycopy(buf,blockSize,buf,0,blockSize);    bufOff=blockSize;  }  buf[bufOff++]=in;  return resultLen;}  }
class C{  public void addColumn(String tableName,String columnName,int columnId){  columnCache.put(tableName + "." + columnName,columnId);}  }
class C{  public Object clone() throws CloneNotSupportedException {  Object newObj=super.clone();  if (mimeType != null) {    ((DataFlavor)newObj).mimeType=(MimeType)mimeType.clone();  }  return newObj;}  }
class C{  public static void transformedContainerComparison(){  transformedContainerComparison++;}  }
class C{  public int numGames(){  if (wins + losses > 0) {    return wins + losses;  } else   return 1;}  }
class C{  public static double parseDouble(byte[] bytes,int startIndex,int endIndex){  if (endIndex - startIndex == 8) {    return Double.longBitsToDouble(parseLong(bytes,startIndex,endIndex));  } else   if (endIndex - startIndex == 4) {    return Float.intBitsToFloat((int)parseLong(bytes,startIndex,endIndex));  } else {    throw new IllegalArgumentException("endIndex (" + endIndex + ") - startIndex ("+ startIndex+ ") != 4 or 8");  }}  }
class C{  public ValidationEngine(XMLReaderCreator xrc,ErrorHandler eh,boolean checkIdIdref){  this(xrc,eh,checkIdIdref ? CHECK_ID_IDREF : 0);}  }
class C{  private InputStream openResource(String name) throws IOException {  InputStream in;  if (iFileDir != null) {    in=new FileInputStream(new File(iFileDir,name));  } else {    String path=iResourcePath.concat(name);    if (iLoader != null) {      in=iLoader.getResourceAsStream(path);    } else {      in=ClassLoader.getSystemResourceAsStream(path);    }    if (in == null) {      StringBuffer buf=new StringBuffer(40).append("Resource not found: \"").append(path).append("\" ClassLoader: ").append(iLoader != null ? iLoader.toString() : "system");      throw new IOException(buf.toString());    }  }  return in;}  }
class C{  protected Float wrapKey(float k){  return new Float(k);}  }
class C{  public void testDetermineMetadataOneRevision() throws Exception {  contextFactory.projectConfigs.put("moe_config.txt","{\"name\": \"foo\", \"repositories\": {\"internal\": {\"type\": \"dummy\"}}}");  ProjectContext context=contextFactory.create("moe_config.txt");  DetermineMetadataDirective d=new DetermineMetadataDirective(context,ui,new Migrator(new DraftRevision.Factory(ui),NO_SCRUBBERS,ui,null));  d.repositoryExpression="internal(revision=7)";  assertEquals(0,d.perform());  RevisionMetadata rm=RevisionMetadata.builder().id("7").author("author").date(new DateTime(1L)).description("description").withParents(Revision.create("parent","internal")).build();  assertThat(stream.toString().trim()).isEqualTo(rm.toString().trim());}  }
class C{  @Override public void processIncoming(DistributionManager dm,String adviseePath,boolean removeProfile,boolean exchangeProfiles,final List<Profile> replyProfiles){  tellLocalControllers(removeProfile,exchangeProfiles,replyProfiles);  tellLocalBridgeServers(removeProfile,exchangeProfiles,replyProfiles);}  }
class C{  @NotNull public <T extends PsiElement>PsiTypedQuery<T> siblings(@NotNull final Class<T> clazz){  final List<T> result=new ArrayList<T>();  for (  final PsiElement element : myPsiElements) {    final PsiElement parent=element.getParent();    for (    final T sibling : PsiTreeUtil.findChildrenOfType(parent,clazz)) {      if ((!sibling.equals(element))) {        result.add(sibling);      }    }  }  return new PsiTypedQuery<T>(clazz,result);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isWwwFolderInstalled(){  return wwwFolderInstalled;}  }
class C{  private void handleNonFatalError(String message,boolean logoutFromFb){  if (logoutFromFb) {    LoginDialogFragment.logoutUser();  }  if (getActivity() != null)   MsgUtils.showToast(getActivity(),MsgUtils.TOAST_TYPE_MESSAGE,message,MsgUtils.ToastLength.LONG);}  }
class C{  public void breadthFirstTraversal(){  if (root == null)   return;  java.util.Queue<TreeNode<E>> queue=new java.util.LinkedList<>();  queue.add(root);  while (!queue.isEmpty()) {    TreeNode<E> current=queue.element();    if (current.left != null) {      queue.add(current.left);    }    if (current.right != null) {      queue.add(current.right);    }    System.out.print(queue.remove().element + " ");  }}  }
class C{  public ZoomingPanControl(){  this(true);}  }
class C{  public static byte[] hexStringToBytes(String hexString){  if (hexString == null || hexString.equals("")) {    return null;  }  hexString=hexString.toUpperCase();  int length=hexString.length() / 2;  char[] hexChars=hexString.toCharArray();  byte[] d=new byte[length];  for (int i=0; i < length; i++) {    int pos=i * 2;    d[i]=(byte)(charToByte(hexChars[pos]) << 4 | charToByte(hexChars[pos + 1]));  }  return d;}  }
class C{  protected void registerMenuAttributes(){  addAttributeProcessor(new PopupMenuListenerLmlAttribute(),"menuListener");  addAttributeProcessor(new MenuBarListenerLmlAttribute(),"menuListener");  addAttributeProcessor(new MenuItemGenerateDisabledImageLmlAttribute(),"generateDisabled");  addAttributeProcessor(new MenuItemShortcutLmlAttribute(),"shortcut");}  }
class C{  public SparseGraph(){  vertex_maps=new HashMap<V,Map<V,E>[]>();  directed_edges=new HashMap<E,Pair<V>>();  undirected_edges=new HashMap<E,Pair<V>>();}  }
class C{  public final boolean sendMessage(Message msg){  return mExec.sendMessage(msg);}  }
class C{  public void generateCode(BlockScope currentScope){  if ((this.bits & IsReachable) == 0) {    return;  }  if (this.statements != null) {    for (int i=0, max=this.statements.length; i < max; i++) {      this.statements[i].generateCode(this.scope);    }  }}  }
class C{  @Deprecated public String toString(Object value,FrameInstance frameInstance){  verifyValidState(false);  RootNode rootNode=null;  if (frameInstance.getCallTarget() instanceof RootCallTarget) {    rootNode=((RootCallTarget)frameInstance.getCallTarget()).getRootNode();  }  if (rootNode == null) {    return value.toString();  }  return session.getDebugger().getEnv().toString(rootNode,value);}  }
class C{  @Override protected void register(PackagerFactory packagerFactory){  packagerFactory.registerPackager("jetty6x",PackagerType.DIRECTORY,JettyDirectoryPackager.class);  packagerFactory.registerPackager("jetty7x",PackagerType.DIRECTORY,JettyDirectoryPackager.class);  packagerFactory.registerPackager("jetty8x",PackagerType.DIRECTORY,JettyDirectoryPackager.class);  packagerFactory.registerPackager("jetty9x",PackagerType.DIRECTORY,JettyDirectoryPackager.class);}  }
class C{  public static void appendString(final StringBuffer buf,final String s){  buf.append('\"');  for (int i=0; i < s.length(); ++i) {    char c=s.charAt(i);    if (c == '\n') {      buf.append("\\n");    } else     if (c == '\r') {      buf.append("\\r");    } else     if (c == '\\') {      buf.append("\\\\");    } else     if (c == '"') {      buf.append("\\\"");    } else     if (c < 0x20 || c > 0x7f) {      buf.append("\\u");      if (c < 0x10) {        buf.append("000");      } else       if (c < 0x100) {        buf.append("00");      } else       if (c < 0x1000) {        buf.append('0');      }      buf.append(Integer.toString(c,16));    } else {      buf.append(c);    }  }  buf.append('\"');}  }
class C{  public boolean isSetStore(){  return this.store != null;}  }
class C{  @Override public int hashCode(){  return Objects.hashCode(value);}  }
class C{  @Override protected void onCreate(Bundle icicle){  super.onCreate(icicle);  Intent intent=getIntent();  accountAuthenticatorResponse=intent.getParcelableExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE);  if (accountAuthenticatorResponse != null) {    accountAuthenticatorResponse.onRequestContinued();  }  accountType=intent.getStringExtra(AccountManager.KEY_ACCOUNT_TYPE);  if (accountType == null)   throw new IllegalStateException(String.format("This Activity cannot be started without the \"%s\" extra in the intent! " + "Use the \"addAccount\"-Method of the \"%s\" for opening the Login manually.",AccountManager.KEY_ACCOUNT_TYPE,AuthAccountManager.class.getSimpleName()));  tokenType=intent.getStringExtra(AccountAuthenticator.KEY_TOKEN_TYPE);  accountManager=AccountManager.get(this);  resultBundle=new Bundle();  resultBundle.putString(AccountManager.KEY_ACCOUNT_TYPE,accountType);}  }
class C{  private double kdKNNSearch(int left,int right,int axis,O query,KNNHeap knns,DBIDArrayIter iter,double maxdist){  if (right - left <= leafsize) {    for (iter.seek(left); iter.getOffset() < right; iter.advance()) {      double dist=norm.distance(query,relation.get(iter));      countObjectAccess();      countDistanceComputation();      if (dist <= maxdist) {        knns.insert(dist,iter);      }      maxdist=knns.getKNNDistance();    }    return maxdist;  }  final int middle=(left + right) >>> 1;  O split=relation.get(iter.seek(middle));  countObjectAccess();  final double delta=split.doubleValue(axis) - query.doubleValue(axis);  final boolean onleft=(delta >= 0);  final boolean onright=(delta <= 0);  final int next=(axis + 1) % dims;  if (onleft && onright) {    double dist=norm.distance(query,split);    countDistanceComputation();    if (dist <= maxdist) {      assert (iter.getOffset() == middle);      knns.insert(dist,iter);      maxdist=knns.getKNNDistance();    }    if (left < middle) {      maxdist=kdKNNSearch(left,middle,next,query,knns,iter,maxdist);    }    if (middle + 1 < right) {      maxdist=kdKNNSearch(middle + 1,right,next,query,knns,iter,maxdist);    }  } else {    if (onleft) {      if (left < middle) {        maxdist=kdKNNSearch(left,middle,next,query,knns,iter,maxdist);      }      if (Math.abs(delta) <= maxdist) {        double dist=norm.distance(query,split);        countDistanceComputation();        if (dist <= maxdist) {          knns.insert(dist,iter.seek(middle));          maxdist=knns.getKNNDistance();        }      }      if ((middle + 1 < right) && (Math.abs(delta) <= maxdist)) {        maxdist=kdKNNSearch(middle + 1,right,next,query,knns,iter,maxdist);      }    } else {      if (middle + 1 < right) {        maxdist=kdKNNSearch(middle + 1,right,next,query,knns,iter,maxdist);      }      if (Math.abs(delta) <= maxdist) {        double dist=norm.distance(query,split);        countDistanceComputation();        if (dist <= maxdist) {          knns.insert(dist,iter.seek(middle));          maxdist=knns.getKNNDistance();        }      }      if ((left < middle) && (Math.abs(delta) <= maxdist)) {        maxdist=kdKNNSearch(left,middle,next,query,knns,iter,maxdist);      }    }  }  return maxdist;}  }
class C{  private boolean executeCommands(String[] cmds,Connection conn,boolean batch,boolean doConvert){  if (cmds == null || cmds.length == 0) {    log.warning("No Commands");    return false;  }  Statement stmt=null;  String cmd=null;  String cmdOriginal=null;  try {    if (conn == null) {      conn=getConnection(false,false);      if (conn == null)       return false;    }    if (conn.getAutoCommit() == batch)     conn.setAutoCommit(!batch);    stmt=conn.createStatement();    for (int i=0; i < cmds.length; i++) {      cmd=cmds[i];      cmdOriginal=cmds[i];      if (cmd == null || cmd.length() == 0)       continue;      if (cmd.indexOf('@') != -1) {        cmd=Util.replace(cmd,"@SystemPassword@",m_systemPassword);        cmd=Util.replace(cmd,"@AdempiereUser@",m_adempiereUser);        cmd=Util.replace(cmd,"@AdempierePassword@",m_adempierePassword);        cmd=Util.replace(cmd,"@SystemPassword@",m_systemPassword);        cmd=Util.replace(cmd,"@DatabaseName@",m_databaseName);        if (m_databaseDevice != null)         cmd=Util.replace(cmd,"@DatabaseDevice@",m_databaseDevice);      }      if (doConvert)       cmd=m_dbTarget.convertStatement(cmd);      writeLog(cmd);      log.finer(cmd);      int no=stmt.executeUpdate(cmd);      log.finest("# " + no);    }    stmt.close();    stmt=null;    if (batch)     conn.commit();    return true;  } catch (  Exception e) {    String msg=e.getMessage();    if (msg == null || msg.length() == 0)     msg=e.toString();    msg+=" (";    if (e instanceof SQLException) {      msg+="State=" + ((SQLException)e).getSQLState() + ",ErrorCode="+ ((SQLException)e).getErrorCode();    }    msg+=")";    if (cmdOriginal != null && !cmdOriginal.equals(cmd))     msg+=" - " + cmdOriginal;    msg+="\n=>" + cmd;    log.log(Level.SEVERE,msg);  }  try {    if (stmt != null)     stmt.close();  } catch (  SQLException e1) {    log.log(Level.SEVERE,"close statement",e1);  }  stmt=null;  return false;}  }
class C{  public void shutDown(){synchronized (syncVar) {    syncVar[0]=true;  }}  }
class C{  public boolean hasTargetAndRepositoryReadPermission(){  return hasTargetReadPermission() && hasReadDistributionPermission();}  }
class C{  @Override public final boolean equals(Object socketAddr){  if (this == socketAddr) {    return true;  }  if (!(socketAddr instanceof InetSocketAddress)) {    return false;  }  InetSocketAddress iSockAddr=(InetSocketAddress)socketAddr;  if (port != iSockAddr.port) {    return false;  }  if ((addr == null) && (iSockAddr.addr == null)) {    return hostname.equals(iSockAddr.hostname);  }  if (addr == null) {    return false;  }  return addr.equals(iSockAddr.addr);}  }
class C{  public synchronized void cache(Object key,T value){  put(key,value);}  }
class C{  public EchoServer(String host,int port,boolean useSSL,String serverKeystoreAlias,AuthenticationInfo securityInfo,boolean silentFail) throws ConfigurationException {  this.host=host;  this.port=port;  this.useSSL=useSSL;  this.keystoreAlias=serverKeystoreAlias;  this.securityInfo=securityInfo;  this.silentFail=silentFail;  this.checkConsistency();}  }
class C{  @Override protected Instances process(Instances instances) throws Exception {  Instances result;  int i;  result=instances;  for (i=0; i < getFilters().length; i++) {    if (!isFirstBatchDone()) {      getFilter(i).setInputFormat(result);    }    result=Filter.useFilter(result,getFilter(i));  }  return result;}  }
class C{  protected String[] options(){  String[] options={"-Dcom.sun.management.jmxremote.authenticate=false","-Dcom.sun.management.jmxremote.ssl=false","-Dcom.sun.management.jmxremote=true","-Dcom.sun.management.jmxremote.port=" + String.valueOf(jmxPort),"-Dcom.sun.management.jmxremote.autodiscovery=true","-Dcom.sun.management.jdp.pause=1","-Dcom.sun.management.jdp.name=" + jdpName,"-Dcom.sun.management.jdp.address=224.0.1.2","-Dcom.sun.management.jdp.port=1234","-Djava.util.logging.SimpleFormatter.format='%1$tF %1$tT %4$-7s %5$s %n'",testName};  return options;}  }
class C{  public QRDecomposition qr(){  return new QRDecomposition(this);}  }
class C{  public static void cloneAll(Collection<BugInstance> dest,Collection<BugInstance> source){  for (  BugInstance obj : source) {    dest.add((BugInstance)obj.clone());  }}  }
class C{  public ExecutionContext createExecutionContext(){  ExecutionContextImpl executionContext=new ExecutionContextImpl();  return executionContext;}  }
class C{  public char current(){  if (pos >= begin && pos < end) {    return text.charAt(pos);  } else {    return DONE;  }}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public void discardAllEdits(){  undoManager.discardAllEdits();  getDocument().removeUndoableEditListener(undoManager);  undoManager=new RUndoManager(this);  getDocument().addUndoableEditListener(undoManager);  undoManager.updateActions();}  }
class C{  public long loadLong(Offset offset){  return this.plus(offset).loadLong();}  }
class C{  public void generateDependencies(){  neededDeps=new HashMap<>();  Stream.concat(javaClasses.values().stream(),scalaClasses.values().stream()).forEach(null);}  }
class C{  public Long logoutUser(String SID){  try {    Long users_id=sessionManagement.checkSession(SID);    IConnection current=Red5.getConnectionLocal();    RoomClient currentClient=this.clientListManager.getClientByStreamId(current.getClient().getId());    scopeApplicationAdapter.roomLeaveByScope(currentClient,current.getScope(),false);    currentClient.setUserObject(null,null,null,null);    return userManagement.logout(SID,users_id);  } catch (  Exception err) {    log.error("[logoutUser]",err);  }  return -1L;}  }
class C{  public boolean hasDetails(String sku){  return mSkuMap.containsKey(sku);}  }
class C{  public void findAndInit(Object someObj){  Component menuItems[]=getMenuComponents();  for (int i=0; i < menuItems.length; i++) {    Component item=menuItems[i];    if (item instanceof LightMapHandlerChild) {      ((LightMapHandlerChild)item).findAndInit(someObj);    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public int resolve(TransportNetwork network,Set<String> warnings){  if (id == null) {    if (lat == 0 || lon == 0) {      warnings.add("When no stop ID is supplied, nonzero coordinates must be supplied.");    }    int newStopId=materializeOne(network);    return newStopId;  } else {    if (lat != 0 || lon != 0 || name != null) {      warnings.add("A reference to an existing id should not include coordinates or a name.");    }    int intStopId=network.transitLayer.indexForStopId.get(id);    if (intStopId == -1) {      warnings.add("Could not find existing stop with GTFS ID " + id);    }    return intStopId;  }}  }
class C{  public void add_return(StorageFileSystem param){  if (local_return == null) {    local_return=new StorageFileSystem[]{};  }  local_returnTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(local_return);  list.add(param);  this.local_return=(StorageFileSystem[])list.toArray(new StorageFileSystem[list.size()]);}  }
class C{  protected void deleteControlAction(int row){  controlList.remove(row);  lightControlTableModel.fireTableDataChanged();  lightControlChanged=true;}  }
class C{  public static synchronized void visitLine(BytecodeContext bc,Position pos){  if (pos != null) {    visitLine(bc,pos.line);  }}  }
class C{  public boolean isLink(Object e){  return nsh.getLinkUri((Element)e) != null;}  }
class C{  @Override public String toString(){  String sSource="_na_";  try {    sSource=XContentHelper.convertToJson(querySource,false);  } catch (  Exception e) {  }  return Arrays.toString(indices) + Arrays.toString(types) + "["+ field+ "], querySource["+ sSource+ "]";}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  init(getName());}  }
class C{  public CNameDescriptionGenerator(){  this(null);}  }
class C{  public CompletionService newCompletionService(){  return new ExecutorCompletionService<ShardResponse>(commExecutor);}  }
class C{  public static int checkActions(Map<String,Object> entry){  boolean ip6=false;  boolean ip4=false;  String actions=null;  if (entry.containsKey(StaticFlowEntryPusher.COLUMN_ACTIONS) || entry.containsKey(StaticFlowEntryPusher.COLUMN_INSTR_APPLY_ACTIONS) || entry.containsKey(StaticFlowEntryPusher.COLUMN_INSTR_WRITE_ACTIONS)) {    if (entry.containsKey(StaticFlowEntryPusher.COLUMN_ACTIONS)) {      actions=(String)entry.get(StaticFlowEntryPusher.COLUMN_ACTIONS);    } else     if (entry.containsKey(StaticFlowEntryPusher.COLUMN_INSTR_APPLY_ACTIONS)) {      actions=(String)entry.get(StaticFlowEntryPusher.COLUMN_INSTR_APPLY_ACTIONS);    } else     if (entry.containsKey(StaticFlowEntryPusher.COLUMN_INSTR_WRITE_ACTIONS)) {      actions=(String)entry.get(StaticFlowEntryPusher.COLUMN_INSTR_WRITE_ACTIONS);    }    if (actions.contains(MatchUtils.STR_ICMPV6_CODE) || actions.contains(MatchUtils.STR_ICMPV6_TYPE) || actions.contains(MatchUtils.STR_IPV6_DST)|| actions.contains(MatchUtils.STR_IPV6_SRC)|| actions.contains(MatchUtils.STR_IPV6_FLOW_LABEL)|| actions.contains(MatchUtils.STR_IPV6_ND_SSL)|| actions.contains(MatchUtils.STR_IPV6_ND_TARGET)|| actions.contains(MatchUtils.STR_IPV6_ND_TTL)) {      ip6=true;    }    if (actions.contains(MatchUtils.STR_NW_SRC) || actions.contains(MatchUtils.STR_NW_DST) || actions.contains(MatchUtils.STR_ARP_OPCODE)|| actions.contains(MatchUtils.STR_ARP_SHA)|| actions.contains(MatchUtils.STR_ARP_DHA)|| actions.contains(MatchUtils.STR_ARP_SPA)|| actions.contains(MatchUtils.STR_ARP_DPA)|| actions.contains(MatchUtils.STR_ICMP_CODE)|| actions.contains(MatchUtils.STR_ICMP_TYPE)) {      ip4=true;    }  }  if (ip6 == false && ip4 == false) {    return 0;  } else   if (ip6 == false && ip4 == true) {    return 1;  } else   if (ip6 == true && ip4 == false) {    return 2;  } else {    return -1;  }}  }
class C{  public final long sumTotalTermFreq(){  return sumTotalTermFreq;}  }
class C{  @Override public void updateSelectedReduce(Collection<GraphNode> reduction){  for (  GraphNode node : reduction) {    setSelectedState(node,false);  }}  }
class C{  public RegisterSet(Address argL,Address argH,Address argX,Address argE,String strL,String strH,String strX,String strE){  aL=argL;  aH=argH;  aE=argE;  aX=argX;  L=strL;  H=strH;  X=strX;  E=strE;}  }
class C{  static UseRecordSet replaceLoads(IR ir,DF_Solution available,HashMap<UseRecord,Register> registers){  UseRecordSet result=new UseRecordSet();  SSADictionary ssa=ir.HIRInfo.dictionary;  GlobalValueNumberState valueNumbers=ir.HIRInfo.valueNumbers;  for (Enumeration<Instruction> e=ir.forwardInstrEnumerator(); e.hasMoreElements(); ) {    Instruction s=e.nextElement();    if (!GetField.conforms(s) && !GetStatic.conforms(s) && !ALoad.conforms(s)) {      continue;    }    HeapOperand<?>[] H=ssa.getHeapUses(s);    if (H == null) {      continue;    }    if (H.length != 1) {      throw new OptimizingCompilerException("LoadElimination: load with wrong number of heap uses");    }    if (GetField.conforms(s) || GetStatic.conforms(s)) {      int valueNumber=-1;      if (GetField.conforms(s)) {        Object address=GetField.getRef(s);        valueNumber=valueNumbers.getValueNumber(address);      } else {        valueNumber=0;      }      ObjectCell cell=(ObjectCell)available.lookup(H[0].getHeapVariable());      if (cell == null) {        continue;      }      if (cell.contains(valueNumber)) {        result.add(H[0].getHeapVariable(),valueNumber);        TypeReference type=ResultCarrier.getResult(s).getType();        Register r=findOrCreateRegister(H[0].getHeapType(),valueNumber,registers,ir.regpool,type);        if (DEBUG) {          System.out.println("ELIMINATING LOAD " + s);        }        replaceLoadWithMove(r,s);      }    } else {      Object array=ALoad.getArray(s);      Object index=ALoad.getIndex(s);      ArrayCell cell=(ArrayCell)available.lookup(H[0].getHeapVariable());      if (cell == null) {        continue;      }      int v1=valueNumbers.getValueNumber(array);      int v2=valueNumbers.getValueNumber(index);      if (cell.contains(v1,v2)) {        result.add(H[0].getHeapVariable(),v1,v2);        TypeReference type=ALoad.getResult(s).getType();        Register r=findOrCreateRegister(H[0].getHeapVariable().getHeapType(),v1,v2,registers,ir.regpool,type);        if (DEBUG) {          System.out.println("ELIMINATING LOAD " + s);        }        replaceLoadWithMove(r,s);      }    }  }  return result;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected void registerFloatingGroupAttributes(){  addAttributeProcessor(new UseChildrenPreferredSizeLmlAttribute(),"useChildrenPreferredSize","usePref");}  }
class C{  public void writeDetails(javax.xml.namespace.QName qname,org.apache.axis.encoding.SerializationContext context) throws java.io.IOException {  context.serialize(qname,null,this);}  }
class C{  public static <T,X extends Throwable>Tuple3<CompletableFuture<Subscription>,Runnable,CompletableFuture<Boolean>> forEachWithError(final LazyFutureStream<T> stream,final Consumer<? super T> consumerElement,final Consumer<? super Throwable> consumerError){  final CompletableFuture<Subscription> subscription=new CompletableFuture<>();  final CompletableFuture<Boolean> streamCompleted=new CompletableFuture<>();  return tuple(subscription,null,streamCompleted);}  }
class C{  public static Criteria update(Class<?> clazz){  return new Criteria(clazz,new UpdateBuilder(clazz));}  }
class C{  @Override public ObjectName preRegister(MBeanServer server,ObjectName name) throws Exception {  return name;}  }
class C{  public static int nextHighestPowerOfTwo(int v){  v--;  v|=v >> 1;  v|=v >> 2;  v|=v >> 4;  v|=v >> 8;  v|=v >> 16;  v++;  return v;}  }
class C{  public boolean isDisplayValues(){  return mDisplayValues;}  }
class C{  public static AccessibilityRecord obtain(){synchronized (sPoolLock) {    if (sPool != null) {      AccessibilityRecord record=sPool;      sPool=sPool.mNext;      sPoolSize--;      record.mNext=null;      record.mIsInPool=false;      return record;    }    return new AccessibilityRecord();  }}  }
class C{  public boolean isZoomEnabled(){  return mZoomEnabled;}  }
class C{  public EsriShapeExport(OMGraphicList list,Projection proj,String pathToFile){  setGraphicList(list);  projection=proj;  filePath=pathToFile;  DEBUG=logger.isLoggable(Level.FINE);}  }
class C{  static public String formatDouble(double number){  return doubleFormatter().format(number);}  }
class C{  public void startLoading(){  if (allPortionsLoaded) {    return;  }  if (firstPortionLoaded) {    subscribeToLoadingChannel();  } else {    OffsetAndLimit offsetAndLimit=new OffsetAndLimit(START_OFFSET,getLimit());    loadNewItems(offsetAndLimit);  }}  }
class C{  private DelimiterData scanDelimiters(DelimiterProcessor delimiterProcessor,char delimiterChar){  int startIndex=index;  int delimiterCount=0;  while (peek() == delimiterChar) {    delimiterCount++;    index++;  }  if (delimiterCount < delimiterProcessor.getMinLength()) {    index=startIndex;    return null;  }  String before=startIndex == 0 ? "\n" : input.substring(startIndex - 1,startIndex);  char charAfter=peek();  String after=charAfter == '\0' ? "\n" : String.valueOf(charAfter);  boolean beforeIsPunctuation=PUNCTUATION.matcher(before).matches();  boolean beforeIsWhitespace=UNICODE_WHITESPACE_CHAR.matcher(before).matches();  boolean afterIsPunctuation=PUNCTUATION.matcher(after).matches();  boolean afterIsWhitespace=UNICODE_WHITESPACE_CHAR.matcher(after).matches();  boolean leftFlanking=!afterIsWhitespace && !(afterIsPunctuation && !beforeIsWhitespace && !beforeIsPunctuation);  boolean rightFlanking=!beforeIsWhitespace && !(beforeIsPunctuation && !afterIsWhitespace && !afterIsPunctuation);  boolean canOpen;  boolean canClose;  if (delimiterChar == '_') {    canOpen=leftFlanking && (!rightFlanking || beforeIsPunctuation);    canClose=rightFlanking && (!leftFlanking || afterIsPunctuation);  } else {    canOpen=leftFlanking && delimiterChar == delimiterProcessor.getOpeningCharacter();    canClose=rightFlanking && delimiterChar == delimiterProcessor.getClosingCharacter();  }  index=startIndex;  return new DelimiterData(delimiterCount,canOpen,canClose);}  }
class C{  private void writeObject0(Object obj) throws IOException {  curObj=null;  curFields=null;  curPut=null;  if (obj == null)   writeByte(NULL); else {    if (obj instanceof Throwable && !(obj instanceof Externalizable)) {      writeByte(JDK);      try {        JDK_MARSH.marshal(obj,this);      } catch (      IgniteCheckedException e) {        IOException ioEx=e.getCause(IOException.class);        if (ioEx != null)         throw ioEx; else         throw new IOException("Failed to serialize object with JDK marshaller: " + obj,e);      }    } else {      OptimizedClassDescriptor desc=classDescriptor(clsMap,obj instanceof Object[] ? Object[].class : obj.getClass(),ctx,mapper);      if (desc.excluded()) {        writeByte(NULL);        return;      }      Object obj0=desc.replace(obj);      if (obj0 == null) {        writeByte(NULL);        return;      }      int handle=-1;      if (!desc.isPrimitive() && !desc.isEnum() && !desc.isClass()&& !desc.isProxy())       handle=handles.lookup(obj);      if (obj0 != obj) {        obj=obj0;        desc=classDescriptor(clsMap,obj instanceof Object[] ? Object[].class : obj.getClass(),ctx,mapper);      }      if (handle >= 0) {        writeByte(HANDLE);        writeInt(handle);      } else       desc.write(this,obj);    }  }}  }
class C{  public void stop() throws IgniteInterruptedCheckedException {  U.interrupt(writer);  U.interrupt(compactor);  U.join(writer);  U.join(compactor);  left.delete();  right.delete();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:12.123 -0400",hash_original_method="A985AF99F9F781A8A9976410A53B204B",hash_generated_method="B66F02FD6266CB4820ECF12D7742FC1B") private void writeObject(java.io.ObjectOutputStream out) throws IOException {  updateKeyMaskFields();  out.defaultWriteObject();}  }
class C{  public boolean isWrapped(){  return isWrapped;}  }
class C{  public void onTcpOpen(PseudoTCPBase tcp){  logger.log(Level.FINE,"tcp opened");synchronized (state_notify) {    state_notify.notifyAll();  }  onTcpWriteable(tcp);}  }
class C{  public Rational(Rational r){  mNumerator=r.mNumerator;  mDenominator=r.mDenominator;}  }
class C{  protected void logFailedStatementSQL(String sql,SQLException ex){  try {    String log="Statement failed: " + sql;    if (log.length() > maxSQLLogLength)     log=log.substring(0,maxSQLLogLength);    logger.error(log);    if (ex != null && ex.getCause() != null && ex.getCause() instanceof SQLException) {      SQLException nextException=((SQLException)ex.getCause()).getNextException();      if (nextException != null) {        logger.error(nextException.getMessage());      }    }  } catch (  Exception e) {    if (logger.isDebugEnabled())     logger.debug("logFailedStatementSQL failed to log, because: " + e.getMessage());  }}  }
class C{  public static JFreeChart createChart(XYDataset dataset,String title){  JFreeChart chart=ChartFactory.createTimeSeriesChart(title,"Time(s)","Variable",dataset,true,true,false);  chart.setBackgroundPaint(Color.white);  XYPlot plot=chart.getXYPlot();  plot.setBackgroundPaint(Color.lightGray);  plot.setDomainGridlinePaint(Color.white);  plot.setRangeGridlinePaint(Color.white);  plot.setDomainCrosshairVisible(true);  plot.setRangeCrosshairVisible(true);  DateAxis axis=(DateAxis)plot.getDomainAxis();  axis.setDateFormatOverride(new SimpleDateFormat("s"));  return chart;}  }
class C{  ClassLoader createClassloader(boolean includeUpdates,boolean firstPhase) throws Exception {  final List<URL> jarFiles=new LinkedList<URL>();  if (includeUpdates) {    final String propFile=jarFolder + "jar.properties";    bootProp=new Properties();    if (new File(propFile).canRead()) {      final InputStream is=new FileInputStream(propFile);      try {        bootProp.load(is);      }  finally {        is.close();      }      bootPropOrg=(Properties)bootProp.clone();      final String jarNameString=bootProp.getProperty("load-1.20","");      final StringTokenizer st=new StringTokenizer(jarNameString,",");      while (st.hasMoreTokens()) {        final String filename=st.nextToken();        if (SignatureVerifier.get().checkSignature(jarFolder + filename,bootProp.getProperty("file-signature." + filename))) {          jarFiles.add(new File(jarFolder + filename).toURI().toURL());        } else {          if (firstPhase) {            clearUpdateFiles();            ClassLoader loader=new URLClassLoader(new URL[0],this.getClass().getClassLoader());            return loader;          }        }      }      System.out.println("our classpath: " + jarNameString);    } else {      System.out.println("no jar.properties");    }  }  ClassLoader orgClassloader=Bootstrap.class.getClassLoader();  String[] includedJarFiles=new String[]{"lib/log4j.jar","lib/marauroa.jar","lib/jorbis.jar","lib/stendhal.jar","lib/stendhal-data.jar","lib/stendhal-sound-data.jar","lib/stendhal-music-data.jar"};  for (  String includedJarFile : includedJarFiles) {    URL url=orgClassloader.getResource(includedJarFile);    if (url != null) {      jarFiles.add(url);    }  }  System.out.println("Creating custom class loader for: " + jarFiles);  final URL[] urlArray=jarFiles.toArray(new URL[jarFiles.size()]);  final ClassLoader loader=new URLClassLoader(urlArray,this.getClass().getClassLoader());  return loader;}  }
class C{  private void loadDataFromService(){  List<ExceptionSensorData> exData=null;  if ((null != fromDate) && (null != toDate)) {    exData=dataAccessService.getUngroupedExceptionOverview(template,limit,fromDate,toDate,resultComparator);  } else {    exData=dataAccessService.getUngroupedExceptionOverview(template,limit,resultComparator);  }  exceptionSensorData.clear();  if (null != exData) {    exceptionSensorData.addAll(exData);  }}  }
class C{  private XMLSignatureInput resolveInput(Attr uri,String baseURI,boolean secureValidation) throws XMLSecurityException {  ResourceResolver resRes=ResourceResolver.getInstance(uri,baseURI,secureValidation);  XMLSignatureInput resource=resRes.resolve(uri,baseURI,secureValidation);  return resource;}  }
class C{  public Bro2Reader(){  this(false);}  }
class C{  @SuppressWarnings("unchecked") @EventBusListenerMethod(scope=EventScope.SESSION) public void onRolloutGroupChangeEvent(final RolloutGroupChangeEventContainer eventContainer){  if (!rolloutUIState.isShowRolloutGroups()) {    return;  }  ((LazyQueryContainer)getContainerDataSource()).refresh();}  }
class C{  public String name(){  return this.nodeName;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name_1: ");  result.append(name_1);  result.append(')');  return result.toString();}  }
class C{  public void skipBlockSize() throws IOException {  dataInput.skipBytes(Integer.SIZE / Byte.SIZE);}  }
class C{  public void randomize(Random rand){  int i;  for (i=0; i < blocks; i++) {    value[i]=rand.nextInt();  }  zeroUnusedBits();}  }
class C{  public CuboidClipboard(Vector size,Vector origin){  checkNotNull(size);  checkNotNull(origin);  this.origin=origin;  this.offset=new Vector();  this.size=size;  this.dx=size.getBlockX();  this.dxz=dx * size.getBlockZ();  ids=new byte[dx * size.getBlockZ() * ((size.getBlockY() + 15) >> 4)][];  nbtMap=new HashMap<>();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TSTRUCTURAL_TYPE__AST_ELEMENT:    return astElement != null;}return super.eIsSet(featureID);}  }
class C{  private void saveMemoryBlockJPG(ImageData imageData,File file,float quality) throws Exception {  BufferedImage bufferedImage=getBufferedImageFromData(imageData);  Iterator iter=ImageIO.getImageWritersByFormatName("jpg");  ImageWriter writer=(ImageWriter)iter.next();  ImageWriteParam iwp=writer.getDefaultWriteParam();  iwp.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);  iwp.setCompressionQuality(quality);  FileImageOutputStream output=null;  try {    output=new FileImageOutputStream(file);    writer.setOutput(output);    IIOImage image=new IIOImage(bufferedImage,null,null);    writer.write(null,image,iwp);    addScanFile(file);  } catch (  Exception e) {    throw e;  } finally {    if (output != null) {      output.close();    }  }}  }
class C{  private void connectAction(Bundle data){  MqttConnectOptions conOpt=new MqttConnectOptions();  String server=(String)data.get(ActivityConstants.server);  String clientId=(String)data.get(ActivityConstants.clientId);  int port=Integer.parseInt((String)data.get(ActivityConstants.port));  boolean cleanSession=(Boolean)data.get(ActivityConstants.cleanSession);  boolean ssl=(Boolean)data.get(ActivityConstants.ssl);  String ssl_key=(String)data.get(ActivityConstants.ssl_key);  String uri=null;  if (ssl) {    Log.e("SSLConnection","Doing an SSL Connect");    uri="ssl://";  } else {    uri="tcp://";  }  uri=uri + server + ":"+ port;  MqttAndroidClient client;  client=Connections.getInstance(this).createClient(this,uri,clientId);  if (ssl) {    try {      if (ssl_key != null && !ssl_key.equalsIgnoreCase("")) {        FileInputStream key=new FileInputStream(ssl_key);        conOpt.setSocketFactory(client.getSSLSocketFactory(key,"mqtttest"));      }    } catch (    MqttSecurityException e) {      Log.e(this.getClass().getCanonicalName(),"MqttException Occured: ",e);    }catch (    FileNotFoundException e) {      Log.e(this.getClass().getCanonicalName(),"MqttException Occured: SSL Key file not found",e);    }  }  String clientHandle=uri + clientId;  String message=(String)data.get(ActivityConstants.message);  String topic=(String)data.get(ActivityConstants.topic);  Integer qos=(Integer)data.get(ActivityConstants.qos);  Boolean retained=(Boolean)data.get(ActivityConstants.retained);  String username=(String)data.get(ActivityConstants.username);  String password=(String)data.get(ActivityConstants.password);  int timeout=(Integer)data.get(ActivityConstants.timeout);  int keepalive=(Integer)data.get(ActivityConstants.keepalive);  Connection connection=new Connection(clientHandle,clientId,server,port,this,client,ssl);  arrayAdapter.add(connection);  connection.registerChangeListener(changeListener);  String[] actionArgs=new String[1];  actionArgs[0]=clientId;  connection.changeConnectionStatus(ConnectionStatus.CONNECTING);  conOpt.setCleanSession(cleanSession);  conOpt.setConnectionTimeout(timeout);  conOpt.setKeepAliveInterval(keepalive);  if (!username.equals(ActivityConstants.empty)) {    conOpt.setUserName(username);  }  if (!password.equals(ActivityConstants.empty)) {    conOpt.setPassword(password.toCharArray());  }  final ActionListener callback=new ActionListener(this,ActionListener.Action.CONNECT,clientHandle,actionArgs);  boolean doConnect=true;  if ((!message.equals(ActivityConstants.empty)) || (!topic.equals(ActivityConstants.empty))) {    try {      conOpt.setWill(topic,message.getBytes(),qos.intValue(),retained.booleanValue());    } catch (    Exception e) {      Log.e(this.getClass().getCanonicalName(),"Exception Occured",e);      doConnect=false;      callback.onFailure(null,e);    }  }  client.setCallback(new MqttCallbackHandler(this,clientHandle));  client.setTraceCallback(new MqttTraceCallback());  connection.addConnectionOptions(conOpt);  Connections.getInstance(this).addConnection(connection);  if (doConnect) {    try {      client.connect(conOpt,null,callback);    } catch (    MqttException e) {      Log.e(this.getClass().getCanonicalName(),"MqttException Occured",e);    }  }}  }
class C{  protected void sequence_ParameterizedTypeRefStructural_TStructMemberList_TypeRefWithoutModifiers(ISerializationContext context,ParameterizedTypeRefStructural semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public double distance(final Double3D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  final double dz=(double)this.z - p.z;  return Math.sqrt(dx * dx + dy * dy + dz * dz);}  }
class C{  void checkEndMethod(){  if (endMethod) {    throw new IllegalStateException("Cannot visit elements after visitEnd has been called.");  }}  }
class C{  private void install(){  try {    FileUtils.copyFiles(DEFAULT_HOME_DIR,USER_RAPTOR_DIR);    if (!new File(preferences.getString(APP_PGN_FILE)).exists()) {      new File(preferences.getString(APP_PGN_FILE)).createNewFile();    }  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }}  }
class C{  protected static void fatal(String msg,Throwable t){  System.out.println(msg);  if (t != null)   t.printStackTrace();  fail();}  }
class C{  public void resetViews(Runnable before,boolean alert){  if (alert) {    LogEmitter.factory.get().emit(this,Core.ALERT.INFO,"View is resetting.");  }  tree.lockUpdates();  tree.clear();  graph.clear();  graph.getLogical().vis().runLater(null);}  }
class C{  public Cell interpretXY(int x,int y){  int col=(x - OFFSET_X - INSET) / CELLSIZE;  int row=(y - OFFSET_Y - INSET) / CELLSIZE;  return new Cell(col,row);}  }
class C{  public static void initialize(boolean isClient){  if (s_handlers != null)   return;  if (isClient) {    LogManager mgr=LogManager.getLogManager();    try {      String fileName="logClient.properties";      InputStream in=CLogMgt.class.getResourceAsStream(fileName);      BufferedInputStream bin=new BufferedInputStream(in);      mgr.readConfiguration(bin);      in.close();    } catch (    Exception e) {      e.printStackTrace();    }  }  s_handlers=new ArrayList<Handler>();  try {    Logger rootLogger=Logger.getLogger("");    Handler[] handlers=rootLogger.getHandlers();    for (int i=0; i < handlers.length; i++) {      if (!s_handlers.contains(handlers[i]))       s_handlers.add(handlers[i]);    }  } catch (  Exception e) {    if (e instanceof ClassNotFoundException)     ; else     System.err.println(e.toString());  }  if (CLogErrorBuffer.get(false) == null)   addHandler(CLogErrorBuffer.get(true));  if (CLogConsole.get(false) == null)   addHandler(CLogConsole.get(true));  CLogFile fh=CLogFile.get(false,null,isClient);  if (fh == null && !isClient) {    fh=CLogFile.get(true,null,isClient);    addHandler(fh);  }  if (fh != null && !isClient)   System.out.println(fh);  setFormatter(CLogFormatter.get());  setFilter(CLogFilter.get());  CLogMgtLog4J.initialize(isClient);}  }
class C{  private WebDoc CreateChatPage(WWindowStatus ws,WebSessionCtx wsc,WebDoc doc,int CM_Chat_ID){  doc=WebDoc.createPopup("Chat ");  td center=doc.addWindowCenter(false);  int record_ID=ws.curTab.getRecord_ID();  log.info("Record_ID=" + record_ID);  if (record_ID == -1) {    log.info("Record does not exist");    return doc;  }  String infoName=null;  String infoDisplay=null;  for (int i=0; i < ws.curTab.getFieldCount(); i++) {    GridField field=ws.curTab.getField(i);    if (field.isKey())     infoName=field.getHeader();    if ((field.getColumnName().equals("Name") || field.getColumnName().equals("DocumentNo")) && field.getValue() != null)     infoDisplay=field.getValue().toString();    if (infoName != null && infoDisplay != null)     break;  }  String description=infoName + ": " + infoDisplay;  if (ws.curTab.getCM_ChatID() > 0)   m_chat=new MChat(wsc.ctx,ws.curTab.getCM_ChatID(),null); else   if (CM_Chat_ID > 0)   m_chat=new MChat(wsc.ctx,CM_Chat_ID,null); else   m_chat=new MChat(wsc.ctx,ws.curTab.getAD_Table_ID(),record_ID,description,null);  String text=m_chat.getHistory(MChat.CONFIDENTIALTYPE_Internal).toString();  form myForm=new form("WChat").setName("chat");  myForm.setOnSubmit("this.Submit.disabled=true;return true;");  if (CM_Chat_ID == 0)   myForm.addElement(new input(input.TYPE_HIDDEN,"CM_ChatID",ws.curTab.getCM_ChatID())); else   myForm.addElement(new input(input.TYPE_HIDDEN,"CM_ChatID",CM_Chat_ID));  myForm.addElement(new input(input.TYPE_HIDDEN,"AD_Table_ID",ws.curTab.getAD_Table_ID()));  myForm.addElement(new input(input.TYPE_HIDDEN,"record_ID",record_ID));  myForm.addElement(new input(input.TYPE_HIDDEN,"description",description));  table myTable=new table("0","0","5","100%",null);  myTable.setID("WChatParameter");  m_displayLength=80;  myTable.addElement(new tr().addElement(new td("History")));  m_readOnly=true;  table HistoryTable=new table("1","0","5","100%",null);  HistoryTable.addElement(new tr().addElement(new td(text).setRowSpan(10).setAlign(AlignType.LEFT).setVAlign(AlignType.TOP).setColSpan(4)));  myTable.addElement(HistoryTable);  myTable.addElement(new tr().addElement(new td("Input")));  m_readOnly=false;  m_columnName="chatinput";  myTable.addElement(new tr().addElement(getTextField("",10)));  String textbtn="Reset";  if (wsc.ctx != null)   text=Msg.getMsg(wsc.ctx,"Reset");  input restbtn=new input(input.TYPE_RESET,textbtn,"  " + text);  restbtn.setID(text);  restbtn.setClass("resetbtn");  textbtn="Submit";  if (wsc.ctx != null)   text=Msg.getMsg(wsc.ctx,"Submit");  input submitbtn=new input(input.TYPE_SUBMIT,textbtn,"  " + text);  submitbtn.setID(text);  submitbtn.setClass("submitbtn");  textbtn="Close";  if (wsc.ctx != null)   text=Msg.getMsg(wsc.ctx,"Close");  input closebtn=new input(input.TYPE_SUBMIT,textbtn,"  " + text);  closebtn.setID(text);  closebtn.setClass("closebtn");  closebtn.setOnClick("self.close();return false;");  myTable.addElement(new tr().addElement(new td(null,AlignType.RIGHT,AlignType.MIDDLE,false,restbtn)).addElement(new td(null,AlignType.CENTER,AlignType.MIDDLE,false,submitbtn)).addElement(new td(null,AlignType.LEFT,AlignType.MIDDLE,false,closebtn)));  myForm.addElement(myTable);  center.addElement(myForm);  return doc;}  }
class C{  public RemoteGossipMember(String clusterName,String hostname,int port,String id){  super(clusterName,hostname,port,id,System.currentTimeMillis());}  }
class C{  public static Object bootImageInstantiationFinished(){  Object t=objectSlots;  objectSlots=null;  return t;}  }
class C{  public ByteLookupTable(int offset,byte data[][]){  super(offset,data.length);  numComponents=data.length;  numEntries=data[0].length;  this.data=new byte[numComponents][];  for (int i=0; i < numComponents; i++) {    this.data[i]=data[i];  }}  }
class C{  public JComponent createComponent(){  return createSearchPanel();}  }
class C{  private static final PrivateKey constructPrivateKey(byte[] encodedKey,String encodedKeyAlgorithm) throws InvalidKeyException, NoSuchAlgorithmException {  PrivateKey key=null;  try {    KeyFactory keyFactory=KeyFactory.getInstance(encodedKeyAlgorithm,SunJCE.getInstance());    PKCS8EncodedKeySpec keySpec=new PKCS8EncodedKeySpec(encodedKey);    return keyFactory.generatePrivate(keySpec);  } catch (  NoSuchAlgorithmException nsae) {    try {      KeyFactory keyFactory=KeyFactory.getInstance(encodedKeyAlgorithm);      PKCS8EncodedKeySpec keySpec=new PKCS8EncodedKeySpec(encodedKey);      key=keyFactory.generatePrivate(keySpec);    } catch (    NoSuchAlgorithmException nsae2) {      throw new NoSuchAlgorithmException("No installed providers " + "can create keys for the " + encodedKeyAlgorithm + "algorithm");    }catch (    InvalidKeySpecException ikse2) {      InvalidKeyException ike=new InvalidKeyException("Cannot construct private key");      ike.initCause(ikse2);      throw ike;    }  }catch (  InvalidKeySpecException ikse) {    InvalidKeyException ike=new InvalidKeyException("Cannot construct private key");    ike.initCause(ikse);    throw ike;  }  return key;}  }
class C{  public final boolean isTiledCoverage(){  return isTiled;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:00.117 -0500",hash_original_method="4C79B03AF1323FEB3700FE89F15D8B06",hash_generated_method="3F7A0473178F8E8594DCDC7C6BBB2C0D") public void handleDoubleTap(float lastTouchX,float lastTouchY){  mInitialZoomOverview=false;  WebSettings settings=mWebView.getSettings();  if (!isDoubleTapEnabled()) {    return;  }  setZoomCenter(lastTouchX,lastTouchY);  mAnchorX=mWebView.viewToContentX((int)lastTouchX + mWebView.getScrollX());  mAnchorY=mWebView.viewToContentY((int)lastTouchY + mWebView.getScrollY());  settings.setDoubleTapToastCount(0);  dismissZoomPicker();  Rect pluginBounds=mWebView.getPluginBounds(mAnchorX,mAnchorY);  if (pluginBounds != null) {    if (mWebView.isRectFitOnScreen(pluginBounds)) {      zoomToOverview();    } else {      mWebView.centerFitRect(pluginBounds);    }    return;  }  final float newTextWrapScale;  if (settings.getUseFixedViewport()) {    newTextWrapScale=Math.max(mActualScale,getReadingLevelScale());  } else {    newTextWrapScale=mActualScale;  }  final boolean firstTimeReflow=!exceedsMinScaleIncrement(mActualScale,mTextWrapScale);  if (firstTimeReflow || mInZoomOverview) {    mTextWrapScale=newTextWrapScale;  }  if (settings.isNarrowColumnLayout() && exceedsMinScaleIncrement(mTextWrapScale,newTextWrapScale) && !firstTimeReflow&& !mInZoomOverview) {    mTextWrapScale=newTextWrapScale;    refreshZoomScale(true);  } else   if (!mInZoomOverview && willScaleTriggerZoom(getZoomOverviewScale())) {    if (mTextWrapScale > getReadingLevelScale()) {      mTextWrapScale=getReadingLevelScale();      refreshZoomScale(true);    }    zoomToOverview();  } else {    zoomToReadingLevelOrMore();  }}  }
class C{  protected void drawMark(Graphics2D g2,float x,float y,Color color){  Rectangle2D bounds=mark.getBounds2D();  float w=(float)bounds.getWidth();  float h=(float)bounds.getHeight();  x=x - (w / 2);  y=y - (h / 2);  g2.translate(x,y);  if (color == null) {    if (markFillPaint != null) {      g2.setPaint(markFillPaint);      g2.fill(mark);    }  } else {    g2.setPaint(color);    g2.fill(mark);  }  g2.setPaint(markPaint);  g2.setStroke(markStroke);  g2.draw(mark);  g2.translate(-x,-y);  Rectangle2D rect=new Rectangle2D.Float(x,y,w,h);  markBounds.add(rect);}  }
class C{  public void addCorrelationSet(CorrelationSet set){  correlationSets.add(set);  for (  String operation : set.correlatingOperations()) {    operationCorrelationSetMap.put(operation,set);  }}  }
class C{  public void message(SerialMessage r){}  }
class C{  @Override public void endWindow(){  for (  Map.Entry<Integer,HighLow<Integer>> e : newgps.entrySet()) {    HighLow<Integer> loc=gps.get(e.getKey());    if (loc == null) {      gps.put(e.getKey(),e.getValue());    } else {      loc.setHigh(e.getValue().getHigh());      loc.setLow(e.getValue().getLow());    }  }  boolean found=false;  for (  Integer phone : phoneRegister) {    emitQueryResult(phone);    found=true;  }  if (!found) {    LOG.debug("No phone number");  }  newgps.clear();  context.setCounters(commandCounters);}  }
class C{  public static byte combine2bytesToOne(byte high,byte low){  if (high < 0 || high > 0xf || low < 0 || low > 0xf) {    throw new RuntimeException("Out of Boundary");  }  return (byte)(high << 4 | low);}  }
class C{  void link(double[] xr,double[] xi,double[] Xr,double[] Xi){  this.xr=xr;  this.xi=xi;  this.Xr=Xr;  this.Xi=Xi;}  }
class C{  public Matcher(Document document,String findString){  this(document,findString,true,MatchType.CONTAINS);}  }
class C{  static float logFunc(float x){  return 1f - (float)(Math.pow(LogBase,reverse(x))) / (LogBase);}  }
class C{  public static String toClassName(String descriptor){  int arrayDim=0;  int i=0;  char c=descriptor.charAt(0);  while (c == '[') {    ++arrayDim;    c=descriptor.charAt(++i);  }  String name;  if (c == 'L') {    int i2=descriptor.indexOf(';',i++);    name=descriptor.substring(i,i2).replace('/','.');    i=i2;  } else   if (c == 'V')   name="void"; else   if (c == 'I')   name="int"; else   if (c == 'B')   name="byte"; else   if (c == 'J')   name="long"; else   if (c == 'D')   name="double"; else   if (c == 'F')   name="float"; else   if (c == 'C')   name="char"; else   if (c == 'S')   name="short"; else   if (c == 'Z')   name="boolean"; else   throw new RuntimeException("bad descriptor: " + descriptor);  if (i + 1 != descriptor.length())   throw new RuntimeException("multiple descriptors?: " + descriptor);  if (arrayDim == 0)   return name; else {    StringBuffer sbuf=new StringBuffer(name);    do {      sbuf.append("[]");    } while (--arrayDim > 0);    return sbuf.toString();  }}  }
class C{  public double localScore(int i){  return localScore(i,new int[0]);}  }
class C{  boolean aboutEquals(float moduleSize,float i,float j){  if (Math.abs(i - getY()) <= moduleSize && Math.abs(j - getX()) <= moduleSize) {    float moduleSizeDiff=Math.abs(moduleSize - estimatedModuleSize);    return moduleSizeDiff <= 1.0f || moduleSizeDiff <= estimatedModuleSize;  }  return false;}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException exc) {    throw new InternalError();  }}  }
class C{  public DateTimeFormatterBuilder appendHourOfDay(int minDigits){  return appendDecimal(DateTimeFieldType.hourOfDay(),minDigits,2);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:41.149 -0500",hash_original_method="F126C5267DAD0F96A8C03752944B8779",hash_generated_method="ABE2905D17D5E349C98C5348C046E2AE") private int writeString(String string) throws IOException {  if (string == null) {    return 0;  }  Integer identifier=stringToId.get(string);  if (identifier != null) {    return identifier;  }  int id=nextStringId++;  stringToId.put(string,id);  byte[] bytes=string.getBytes("UTF-8");  writeRecordHeader(BinaryHprof.Tag.STRING_IN_UTF8,0,BinaryHprof.ID_SIZE + bytes.length);  out.writeInt(id);  out.write(bytes,0,bytes.length);  return id;}  }
class C{  public Cefs(IndependenceTest test,int depth){  if (test == null) {    throw new NullPointerException();  }  if (depth == -1) {    depth=Integer.MAX_VALUE;  }  if (depth < 0) {    throw new IllegalArgumentException("Depth must be >= -1: " + depth);  }  this.test=test;  this.depth=depth;  this.variables=test.getVariables();}  }
class C{  protected void addSyntheticProperty(Mappings mappings,ManyToOne m2o,ForeignKey relationship,com.manydesigns.portofino.model.database.Table oneMDTable,String oneMDQualifiedTableName){  StringBuilder propertyNameBuffer=new StringBuilder("_");  propertyNameBuffer.append(oneMDTable.getActualEntityName());  String firstPropertyName=relationship.getReferences().get(0).getActualToColumn().getActualPropertyName();  propertyNameBuffer.append("_").append(firstPropertyName);  String syntheticPropertyName=DatabaseLogic.getUniquePropertyName(oneMDTable,propertyNameBuffer.toString());  PersistentClass referencedClass=mappings.getClass(oneMDQualifiedTableName);  Component embeddedComp=new Component(mappings,referencedClass);  embeddedComp.setEmbedded(true);  embeddedComp.setNodeName(syntheticPropertyName);  embeddedComp.setComponentClassName(embeddedComp.getOwner().getClassName());  for (  Reference ref : relationship.getReferences()) {    String propertyName=ref.getActualToColumn().getActualPropertyName();    Property property;    if (referencedClass.getIdentifier() instanceof Component) {      property=((Component)referencedClass.getIdentifier()).getProperty(propertyName);    } else {      property=referencedClass.getProperty(propertyName);    }    Property clone=BinderHelper.shallowCopy(property);    clone.setInsertable(false);    clone.setUpdateable(false);    clone.setNaturalIdentifier(false);    clone.setValueGenerationStrategy(property.getValueGenerationStrategy());    embeddedComp.addProperty(clone);  }  SyntheticProperty synthProp=new SyntheticProperty();  synthProp.setName(syntheticPropertyName);  synthProp.setNodeName(syntheticPropertyName);  synthProp.setPersistentClass(referencedClass);  synthProp.setUpdateable(false);  synthProp.setInsertable(false);  synthProp.setValue(embeddedComp);  synthProp.setPropertyAccessorName("embedded");  referencedClass.addProperty(synthProp);  TableBinder.createUniqueConstraint(embeddedComp);  m2o.setReferencedPropertyName(syntheticPropertyName);  mappings.addUniquePropertyReference(referencedClass.getEntityName(),syntheticPropertyName);  mappings.addPropertyReferencedAssociation(referencedClass.getEntityName(),firstPropertyName,syntheticPropertyName);  oneMDTable.getSyntheticPropertyNames().add(syntheticPropertyName);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == ModifiableElement.class) {switch (baseFeatureID) {case N4JSPackage.MODIFIABLE_ELEMENT__DECLARED_MODIFIERS:      return N4JSPackage.N4_MEMBER_DECLARATION__DECLARED_MODIFIERS;default :    return -1;}}if (baseClass == TypeProvidingElement.class) {switch (baseFeatureID) {default :  return -1;}}if (baseClass == TypableElement.class) {switch (baseFeatureID) {default :return -1;}}if (baseClass == NamedElement.class) {switch (baseFeatureID) {default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  private static void stableStringSort(String[] arr,int start,int end){  stableStringSort(arr,arr,new String[end],start,end,0);}  }
class C{  protected void engineInit(int opmode,Key key,AlgorithmParameterSpec params,SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException {  core.init(opmode,key,params,random);}  }
class C{  public final void testGetSeed03(){  ECFieldFp f=new ECFieldFp(BigInteger.valueOf(23L));  BigInteger a=BigInteger.ONE;  BigInteger b=BigInteger.valueOf(19L);  byte[] seed=new byte[24];  EllipticCurve c=new EllipticCurve(f,a,b,seed);  c.getSeed();  assertNotSame(c.getSeed(),c.getSeed());}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  XYPlot clone=(XYPlot)super.clone();  clone.domainAxes=CloneUtils.cloneMapValues(this.domainAxes);  for (  ValueAxis axis : clone.domainAxes.values()) {    if (axis != null) {      axis.setPlot(clone);      axis.addChangeListener(clone);    }  }  clone.rangeAxes=CloneUtils.cloneMapValues(this.rangeAxes);  for (  ValueAxis axis : clone.rangeAxes.values()) {    if (axis != null) {      axis.setPlot(clone);      axis.addChangeListener(clone);    }  }  clone.domainAxisLocations=new HashMap<Integer,AxisLocation>(this.domainAxisLocations);  clone.rangeAxisLocations=new HashMap<Integer,AxisLocation>(this.rangeAxisLocations);  clone.datasets=new HashMap<Integer,XYDataset>(this.datasets);  for (  XYDataset dataset : clone.datasets.values()) {    if (dataset != null) {      dataset.addChangeListener(clone);    }  }  clone.datasetToDomainAxesMap=new TreeMap();  clone.datasetToDomainAxesMap.putAll(this.datasetToDomainAxesMap);  clone.datasetToRangeAxesMap=new TreeMap();  clone.datasetToRangeAxesMap.putAll(this.datasetToRangeAxesMap);  clone.renderers=CloneUtils.cloneMapValues(this.renderers);  for (  XYItemRenderer renderer : clone.renderers.values()) {    if (renderer != null) {      renderer.setPlot(clone);      renderer.addChangeListener(clone);    }  }  clone.foregroundDomainMarkers=(Map)ObjectUtilities.clone(this.foregroundDomainMarkers);  clone.backgroundDomainMarkers=(Map)ObjectUtilities.clone(this.backgroundDomainMarkers);  clone.foregroundRangeMarkers=(Map)ObjectUtilities.clone(this.foregroundRangeMarkers);  clone.backgroundRangeMarkers=(Map)ObjectUtilities.clone(this.backgroundRangeMarkers);  clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);  if (this.fixedDomainAxisSpace != null) {    clone.fixedDomainAxisSpace=(AxisSpace)ObjectUtilities.clone(this.fixedDomainAxisSpace);  }  if (this.fixedRangeAxisSpace != null) {    clone.fixedRangeAxisSpace=(AxisSpace)ObjectUtilities.clone(this.fixedRangeAxisSpace);  }  if (this.fixedLegendItems != null) {    clone.fixedLegendItems=(LegendItemCollection)this.fixedLegendItems.clone();  }  clone.quadrantOrigin=(Point2D)ObjectUtilities.clone(this.quadrantOrigin);  clone.quadrantPaint=this.quadrantPaint.clone();  return clone;}  }
class C{  private void addReference(final int sourcePosition,final int referencePosition){  if (srcAndRefPositions == null) {    srcAndRefPositions=new int[6];  }  if (referenceCount >= srcAndRefPositions.length) {    int[] a=new int[srcAndRefPositions.length + 6];    System.arraycopy(srcAndRefPositions,0,a,0,srcAndRefPositions.length);    srcAndRefPositions=a;  }  srcAndRefPositions[referenceCount++]=sourcePosition;  srcAndRefPositions[referenceCount++]=referencePosition;}  }
class C{  public Walker(byte[] data){  info=data;  numOfEntries=ByteArray.readU16bit(data,0);}  }
class C{  protected Experiment toExperiment(){  Experiment result;  MultiLabelClassifier[] classifiers;  int i;  result=(Experiment)ObjectUtils.deepCopy(m_Experiment);  classifiers=new MultiLabelClassifier[m_ModelClassifiers.getSize()];  for (i=0; i < m_ModelClassifiers.getSize(); i++) {    try {      classifiers[i]=OptionUtils.fromCommandLine(MultiLabelClassifier.class,m_ModelClassifiers.get(i));    } catch (    Exception e) {      handleException("Failed to instantiate classifier: " + m_ModelClassifiers.get(i),e);      classifiers[i]=new BR();    }  }  result.setClassifiers(classifiers);  result.setDatasetProvider((DatasetProvider)m_GOEDatasets.getValue());  result.setEvaluator((Evaluator)m_GOEEvaluator.getValue());  result.setStatisticsHandler((EvaluationStatisticsHandler)m_GOEStatisticsHandler.getValue());  result.setNotes(m_Notes);  return result;}  }
class C{  public static String decode(String encoded){  return new String(Base64.decodeBase64(encoded));}  }
class C{  public static byte[] JBIGDecode(final byte[] data,final byte[] globalData,final String temp_dir) throws Exception {  final org.jpedal.jbig2.JBIG2Decoder decoder=new org.jpedal.jbig2.JBIG2Decoder();  if (globalData != null && globalData.length > 0) {    decoder.setGlobalData(globalData);  }  decoder.decodeJBIG2(data);  return decoder.getPageAsJBIG2Bitmap(0).getData(true);}  }
class C{  public NavigationModel(){  super(null);}  }
class C{  public void register(RouteLocation rl){  Integer old=Integer.valueOf(_routeHashTable.size());  _routeHashTable.put(rl.getId(),rl);  String[] getId=rl.getId().split("r");  int id=Integer.parseInt(getId[1]);  if (id > _IdNumber) {    _IdNumber=id;  }  if (rl.getSequenceId() > _sequenceNum) {    _sequenceNum=rl.getSequenceId();  }  setDirtyAndFirePropertyChange(LISTCHANGE_CHANGED_PROPERTY,old,Integer.valueOf(_routeHashTable.size()));  rl.addPropertyChangeListener(this);}  }
class C{  @Override public boolean containsKey(Object key){  return _map.containsKey(unwrapKey(key));}  }
class C{  public final void normalizeCP(){  double mag=1.0 / Math.sqrt(m00 * m00 + m10 * m10 + m20 * m20);  m00=m00 * mag;  m10=m10 * mag;  m20=m20 * mag;  mag=1.0 / Math.sqrt(m01 * m01 + m11 * m11 + m21 * m21);  m01=m01 * mag;  m11=m11 * mag;  m21=m21 * mag;  m02=m10 * m21 - m11 * m20;  m12=m01 * m20 - m00 * m21;  m22=m00 * m11 - m01 * m10;}  }
class C{  static void testSetUp() throws Exception {  InstallSDE.install(new File(System.getProperty("test.classes","."),op + "Mangle.class"),new File(System.getProperty("test.src","."),"Mangle.sde"));}  }
class C{  private void interpretSub(final ReilInstruction instruction){  final Pair<Boolean,BigInteger> firstValue=loadLongValue(instruction.getFirstOperand());  final Pair<Boolean,BigInteger> secondValue=loadLongValue(instruction.getSecondOperand());  if (firstValue.first() && secondValue.first()) {    final OperandSize targetSize=instruction.getThirdOperand().getSize();    final BigInteger result=firstValue.second().subtract(secondValue.second()).and(getTruncateMask(targetSize));    final String targetRegister=instruction.getThirdOperand().getValue();    setRegister(targetRegister,result,targetSize,ReilRegisterStatus.DEFINED);  } else {    assert false;  }}  }
class C{  public void logEvent(String eventName,Bundle parameters){  logEvent(eventName,null,parameters,false);}  }
class C{  protected double difftime(double t2,double t1){  return t2 - t1;}  }
class C{  private boolean isEmpty(String value){  return value.length() == 0;}  }
class C{  private void loadPaySelectInfo(){  log.info("HRPayPrint.loadPaySelectInfo");  if (fPaySelect.getSelectedIndex() == -1)   return;  int HR_PaySelection_ID=fPaySelect.getSelectedItem().toKeyNamePair().getKey();  loadPaySelectInfo(HR_PaySelection_ID);  fBank.setText(bank);  fCurrency.setText(currency);  fBalance.setValue(balance);  loadPaymentRule();}  }
class C{  public void clearIdmAuthStats(String tenantName) throws Exception {  getService().clearIdmAuthStats(tenantName,this.getServiceContext());}  }
class C{  protected final void clearFailed(){  allFailed.clear();}  }
class C{  public final boolean endsWith(CharSequence suffix){  return toString().endsWith(suffix.toString());}  }
class C{  protected AnyTypeImpl(){  super();}  }
class C{  public static boolean lock() throws IOException {  if (locked)   return true;  if (!canOpenSocket())   return false;  lockPortNumber();  locked=true;  return true;}  }
class C{  public void benchHasChildSingleTerm(){  QueryBuilder lookupQuery;  QueryBuilder mainQuery=matchAllQuery();  FilterJoinBuilder stringFilter=QueryBuilders.filterJoin("id").indices(CHILD_INDEX).types(CHILD_TYPE).path("pid").termsEncoding(TermsByQueryRequest.TermsEncoding.LONG);  FilterJoinBuilder longFilter=QueryBuilders.filterJoin("num").indices(CHILD_INDEX).types(CHILD_TYPE).path("num").termsEncoding(TermsByQueryRequest.TermsEncoding.LONG);  FilterJoinBuilder intFilter=QueryBuilders.filterJoin("num").indices(CHILD_INDEX).types(CHILD_TYPE).path("num").termsEncoding(TermsByQueryRequest.TermsEncoding.INTEGER);  FilterJoinBuilder bloomNumFilter=QueryBuilders.filterJoin("num").indices(CHILD_INDEX).types(CHILD_TYPE).path("num").termsEncoding(TermsByQueryRequest.TermsEncoding.BLOOM);  FilterJoinBuilder bloomStringFilter=QueryBuilders.filterJoin("id").indices(CHILD_INDEX).types(CHILD_TYPE).path("pid").termsEncoding(TermsByQueryRequest.TermsEncoding.BLOOM);  long tookString=0;  long tookLong=0;  long tookInt=0;  long tookBloomNum=0;  long tookBloomString=0;  long expected=NUM_PARENTS;  warmFieldData("id","pid");  warmFieldData("num","num");  log("==== HAS CHILD SINGLE TERM ====");  for (int i=0; i < NUM_QUERIES; i++) {    lookupQuery=boolQuery().filter(termQuery("tag","tag" + random.nextInt(NUM_CHILDREN_PER_PARENT)));    stringFilter.query(lookupQuery);    longFilter.query(lookupQuery);    intFilter.query(lookupQuery);    bloomNumFilter.query(lookupQuery);    bloomStringFilter.query(lookupQuery);    tookString+=runQuery("string",i,PARENT_INDEX,expected,filteredQuery(mainQuery,stringFilter));    tookLong+=runQuery("long",i,PARENT_INDEX,expected,filteredQuery(mainQuery,longFilter));    tookInt+=runQuery("int",i,PARENT_INDEX,expected,filteredQuery(mainQuery,intFilter));    tookBloomNum+=runQuery("bloom_num",i,PARENT_INDEX,expected,filteredQuery(mainQuery,bloomNumFilter));    tookBloomString+=runQuery("bloom_string",i,PARENT_INDEX,expected,filteredQuery(mainQuery,bloomStringFilter));  }  log("string: " + (tookString / NUM_QUERIES) + "ms avg");  log("long  : " + (tookLong / NUM_QUERIES) + "ms avg");  log("int   : " + (tookInt / NUM_QUERIES) + "ms avg");  log("bloom_num   : " + (tookBloomNum / NUM_QUERIES) + "ms avg");  log("bloom_string   : " + (tookBloomString / NUM_QUERIES) + "ms avg");  log("");}  }
class C{  private void computeFuzzyMembership(Relation<V> relation,ArrayList<Signature> clusterCores,ModifiableDBIDs unassigned,WritableDataStore<double[]> probClusterIGivenX,List<MultivariateGaussianModel> models,int dim){  final int n=relation.size();  final double pweight=1. / n;  final int k=clusterCores.size();  double[] clusterWeights=new double[k];  for (DBIDIter iter=relation.iterDBIDs(); iter.valid(); iter.advance()) {    int count=0;    double[] weights=new double[k];    for (int cluster=0; cluster < k; ++cluster) {      if (clusterCores.get(cluster).ids.contains(iter)) {        weights[cluster]=1.;        ++count;      }    }    if (count > 0) {      VMath.timesEquals(weights,1. / count);      VMath.plusTimesEquals(clusterWeights,weights,pweight);    } else {      unassigned.add(iter);    }    probClusterIGivenX.put(iter,weights);  }  final double f=MathUtil.powi(MathUtil.TWOPI,dim);  for (int i=0; i < k; i++) {    models.add(new MultivariateGaussianModel(clusterWeights[i],new double[dim],f));  }}  }
class C{  private Uri insertPosition(final Uri baseUri,final ContentValues values){  if (values.containsKey(Schema.COL_LONGITUDE) && values.containsKey(Schema.COL_LATITUDE) && values.containsKey(Schema.COL_TIMESTAMP)&& values.containsKey(Schema.COL_SESSION_ID)) {    final long rowId=mDbHelper.getWritableDatabase().insert(Schema.TBL_POSITIONS,null,values);    if (rowId > 0) {      final Uri positionUri=ContentUris.withAppendedId(baseUri,rowId);      getContext().getContentResolver().notifyChange(ContentProvider.CONTENT_URI_POSITION,null);      return positionUri;    }  } else {    throw new IllegalArgumentException("mandatory column missing");  }  return null;}  }
class C{  void configureViewAnimator(int numVisibleViews,int activeOffset){  if (activeOffset > numVisibleViews - 1) {  }  mMaxNumActiveViews=numVisibleViews;  mActiveOffset=activeOffset;  mPreviousViews.clear();  mViewsMap.clear();  removeAllViewsInLayout();  mCurrentWindowStart=0;  mCurrentWindowEnd=-1;}  }
class C{  void channelActive(ChannelHandlerContext ctx){  currentRetryTimes=0;}  }
class C{  public static Point2D.Double cap(Point2D.Double p1,Point2D.Double p2,double radius){  double angle=PI / 2 - atan2(p2.x - p1.x,p2.y - p1.y);  Point2D.Double p3=new Point2D.Double(p2.x + radius * cos(angle),p2.y + radius * sin(angle));  return p3;}  }
class C{  @Experimental public List<TimestampedValue<OutputT>> takeOutputElementsWithTimestamp(){  List<TimestampedValue<OutputT>> resultElems=new ArrayList<>(peekOutputElementsWithTimestamp());  clearOutputElements();  return resultElems;}  }
class C{  public static void createClientCache(String hostName,Integer port1) throws Exception {  int PORT1=port1.intValue();  Properties props=new Properties();  props.setProperty(MCAST_PORT,"0");  props.setProperty(LOCATORS,"");  new HAEventIdPropagationDUnitTest().createCache(props);  AttributesFactory factory=new AttributesFactory();  PoolImpl pi=(PoolImpl)ClientServerTestCase.configureConnectionPool(factory,hostName,new int[]{PORT1},true,-1,2,null);  factory.setScope(Scope.DISTRIBUTED_ACK);  CacheListener clientListener=new HAEventIdPropagationListenerForClient();  factory.setCacheListener(clientListener);  RegionAttributes attrs=factory.create();  cache.createRegion(REGION_NAME,attrs);  Region region=cache.getRegion(Region.SEPARATOR + REGION_NAME);  assertNotNull(region);  region.registerInterest("ALL_KEYS",InterestResultPolicy.NONE);  System.out.println("KKKKKK:[" + pi.getName() + "]");  ;  PoolImpl p2=(PoolImpl)PoolManager.find("testPool");  System.out.println("QQQQ:" + p2);  pool=pi;}  }
class C{  public BacktrackingArmijoLineSearch(){  this(0.5,1e-1);}  }
class C{  public void appendWhitespace(Appendable writer) throws IOException {  writer.append(whiteSpace);}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,true);}  }
class C{  public Object remove(String name){  return nameValuePairs.remove(name);}  }
class C{  public int addTrack(MediaFormat format){  if (format.getString(MediaFormat.KEY_MIME) == MediaFormat.MIMETYPE_VIDEO_AVC) {    flv.setVideoTrack(format);    return VIDEO_TRACK;  }  flv.setAudioTrack(format);  return AUDIO_TRACK;}  }
class C{  public VcfEvalParamsBuilder baselinePhaseOrientor(Orientor orientor){  mBaselinePhaseOrientor=orientor;  return this;}  }
class C{  public void putAll(Map<Long,? extends V> m){  for (  Map.Entry<Long,? extends V> e : m.entrySet()) {    put(e.getKey(),e.getValue());  }}  }
class C{  public static ProcessInfo createProcessInstance(Properties ctx,int processId,Map map,String trxName) throws OperationException {  checkProcessAccess(ctx,processId,trxName);  MProcess process=MProcess.get(ctx,processId);  MProcessPara[] processParams=process.getParameters();  ProcessInfoParameter[] pInfoParams=new ProcessInfoParameter[processParams.length];  MPInstance processInstance=new MPInstance(ctx,processId,0);  processInstance.save(trxName);  int sequence=0;  for (  MProcessPara parameter : processParams) {    String columnName=parameter.getColumnName();    boolean isRange=parameter.isRange();    int displayType=parameter.getAD_Reference_ID();    Class classType=DisplayType.getClass(displayType,true);    Object value=null;    Object value_to=null;    if (isRange) {      value=map.get(columnName + "From");      value_to=map.get(columnName + "To");    } else {      value=map.get(columnName);    }    if (parameter.isMandatory()) {      if (isRange) {        if (value_to == null) {          throw new MandatoryException(columnName + " value_to parameter is mandatory");        }      }      if (value == null) {        throw new MandatoryException(columnName + " value parameter is mandatory");      }    }    value=convertValue(value,classType);    value_to=convertValue(value_to,classType);    MPInstancePara param=new MPInstancePara(processInstance,sequence);    param.setParameterName(columnName);    setParameterValue(param,value,value_to);    String info=null;    String info_to=null;    Lookup lookup=parameter.getLookup();    if (lookup != null) {      if (value != null) {        info=lookup.get(value).toString();      }      if (value_to != null) {        info_to=parameter.getLookup().get(value_to).toString();      }      param.setInfo(info);      param.setInfo_To(info_to);    }    param.save(trxName);    ProcessInfoParameter infoParam=new ProcessInfoParameter(columnName,value,value_to,null,null);    pInfoParams[sequence]=infoParam;    sequence++;  }  ProcessInfo pi=new ProcessInfo(process.getName(),processId);  pi.setTitle(process.getName());  pi.setTransactionName(trxName);  pi.setAD_Client_ID(Env.getAD_Client_ID(ctx));  pi.setParameter(pInfoParams);  pi.setAD_PInstance_ID(processInstance.getAD_PInstance_ID());  pi.setClassName(process.getClassname());  return pi;}  }
class C{  private static int[] initialIndex(int size){  int[] index=new int[size];  for (int i=0; i < size; i++) {    index[i]=i;  }  return index;}  }
class C{  public boolean isSentToRawPubKey(){  return chunks.size() == 2 && chunks.get(1).equalsOpCode(OP_CHECKSIG) && !chunks.get(0).isOpCode() && chunks.get(0).data.length > 1;}  }
class C{  public String toString(){  if (null != m_value) {    return (m_value.toString());  } else   if (null != m_invalidValue) {    return m_invalidValue;  } else {    return "";  }}  }
class C{  public void removeNetwork(String netId) throws IOException {  removeNetwork(RemoveNetworkParams.create(netId));}  }
class C{  public Iterator resolvers(){  return Collections.unmodifiableMap(fResolvers).values().iterator();}  }
class C{  public void removeListener(final ProcessManagerListener listener){  listeners.removeListener(listener);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:44.597 -0500",hash_original_method="5AA78E39B6EC64AD2F4CBC59769995CB",hash_generated_method="CB3CC522C26BFEA09961AD4D142B51A3") protected NameValue nameValue() throws ParseException {  if (debug)   dbg_enter("nameValue");  try {    lexer.match(LexerCore.ID);    Token name=lexer.getNextToken();    lexer.SPorHT();    try {      boolean quoted=false;      char la=lexer.lookAhead(0);      if (la == '=') {        lexer.consume(1);        lexer.SPorHT();        String str=null;        if (name.getTokenValue().compareToIgnoreCase(Via.RECEIVED) == 0) {          str=lexer.byteStringNoSemicolon();        } else {          if (lexer.lookAhead(0) == '\"') {            str=lexer.quotedString();            quoted=true;          } else {            lexer.match(LexerCore.ID);            Token value=lexer.getNextToken();            str=value.getTokenValue();          }        }        NameValue nv=new NameValue(name.getTokenValue().toLowerCase(),str);        if (quoted)         nv.setQuotedValue();        return nv;      } else {        return new NameValue(name.getTokenValue().toLowerCase(),null);      }    } catch (    ParseException ex) {      return new NameValue(name.getTokenValue(),null);    }  }  finally {    if (debug)     dbg_leave("nameValue");  }}  }
class C{  public void childrenAdded(BeanContextMembershipEvent bcme){  findAndInit(bcme.iterator());}  }
class C{  public static byte[] fromHexString(String text){  text=text.trim();  if (text.length() % 2 != 0)   text="0" + text;  int resLen=text.length() / 2;  int loNibble, hiNibble;  byte[] res=new byte[resLen];  for (int i=0; i < resLen; i++) {    int j=i << 1;    hiNibble=charToNibble(text.charAt(j));    loNibble=charToNibble(text.charAt(j + 1));    if (loNibble == -1 || hiNibble == -1)     return null;    res[i]=(byte)(hiNibble << 4 | loNibble);  }  return res;}  }
class C{  public int convert(String value){  if (Strings.isNullOrEmpty(value) || TypeUtils.MISSING_INDICATORS.contains(value) || value.equals("-1")) {    return (int)ColumnType.LOCAL_TIME.getMissingValue();  }  value=Strings.padStart(value,4,'0');  if (selectedFormatter == null) {    selectedFormatter=TypeUtils.getTimeFormatter(value);  }  LocalTime time;  try {    time=LocalTime.parse(value,selectedFormatter);  } catch (  DateTimeParseException e) {    selectedFormatter=TypeUtils.TIME_FORMATTER;    time=LocalTime.parse(value,selectedFormatter);  }  return PackedLocalTime.pack(time);}  }
class C{  public static Integer[] transformIntArray(int[] source){  Integer[] destin=new Integer[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public SnowballFilter(TokenStream stream,String language){  super(stream);  try {    stemmer=Class.forName("org.tartarus.snowball.ext." + language.toLowerCase() + "Stemmer").asSubclass(SnowballStemmer.class).newInstance();  } catch (  Exception e) {    throw new IndexException(e,"The specified language '{}' is not valid",language);  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.STATE_MACHINE___ENUM_1:    getEnum_1().clear();  getEnum_1().addAll((Collection<? extends Enum_>)newValue);return;case UmplePackage.STATE_MACHINE___INLINE_STATE_MACHINE_1:getInlineStateMachine_1().clear();getInlineStateMachine_1().addAll((Collection<? extends InlineStateMachine_>)newValue);return;case UmplePackage.STATE_MACHINE___REFERENCED_STATE_MACHINE_1:getReferencedStateMachine_1().clear();getReferencedStateMachine_1().addAll((Collection<? extends ReferencedStateMachine_>)newValue);return;case UmplePackage.STATE_MACHINE___ACTIVE_DEFINITION_1:getActiveDefinition_1().clear();getActiveDefinition_1().addAll((Collection<? extends ActiveDefinition_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private static int CallIntMethod(JNIEnvironment env,int objJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallIntMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithDotDotVarArg(obj,methodID,TypeReference.Int,false);    return Reflection.unwrapInt(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public static Builder builder(){  return new Builder(new CommandResponse());}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;    framingRect=null;    framingRectInPreview=null;  }}  }
class C{  private String convertAlias(String sqlStatement){  String[] tokens=sqlStatement.split("\\s");  String table=null;  String alias=null;  if ("UPDATE".equalsIgnoreCase(tokens[0])) {    if ("SET".equalsIgnoreCase(tokens[2]))     return sqlStatement;    table=tokens[1];    alias=tokens[2];  } else   if ("INSERT".equalsIgnoreCase(tokens[0])) {    if ("VALUES".equalsIgnoreCase(tokens[3]) || "SELECT".equalsIgnoreCase(tokens[3]))     return sqlStatement;    if (tokens[2].indexOf('(') > 0)     return sqlStatement; else     if ((tokens[3].indexOf('(') < 0) || tokens[3].indexOf('(') > 0) {      table=tokens[2];      alias=tokens[3];    } else {      return sqlStatement;    }  } else   if ("DELETE".equalsIgnoreCase(tokens[0])) {    if (tokens.length < 4)     return sqlStatement;    if ("WHERE".equalsIgnoreCase(tokens[3]))     return sqlStatement;    table=tokens[2];    alias=tokens[3];  }  if (table != null && alias != null) {    if (alias.indexOf('(') > 0)     alias=alias.substring(0,alias.indexOf('('));    String converted=sqlStatement.replaceFirst("\\s" + alias + "\\s"," ");    converted=converted.replaceAll("\\b" + alias + "\\.",table + ".");    converted=converted.replaceAll("[+]" + alias + "\\.","+" + table + ".");    converted=converted.replaceAll("[-]" + alias + "\\.","-" + table + ".");    converted=converted.replaceAll("[*]" + alias + "\\.","*" + table + ".");    converted=converted.replaceAll("[/]" + alias + "\\.","/" + table + ".");    converted=converted.replaceAll("[%]" + alias + "\\.","%" + table + ".");    converted=converted.replaceAll("[<]" + alias + "\\.","<" + table + ".");    converted=converted.replaceAll("[>]" + alias + "\\.",">" + table + ".");    converted=converted.replaceAll("[=]" + alias + "\\.","=" + table + ".");    converted=converted.replaceAll("[|]" + alias + "\\.","|" + table + ".");    converted=converted.replaceAll("[(]" + alias + "\\.","(" + table + ".");    converted=converted.replaceAll("[)]" + alias + "\\.",")" + table + ".");    return converted;  } else {    return sqlStatement;  }}  }
class C{  public XContentBuilder toXContentInternal(XContentBuilder builder,Params params) throws IOException {  for (  Aggregation aggregation : aggregations) {    ((InternalAggregation)aggregation).toXContent(builder,params);  }  return builder;}  }
class C{  public void addLocalClass(String namespace,String localPart,String className){  assert rootNode != null;  rootNode.addLocalClass(namespace,localPart,className);}  }
class C{  @Override public void onPurchaseResponse(final PurchaseResponse purchaseResponse){  Log.v(TAG,"onPurchaseResponse recieved");  Log.v(TAG,"PurchaseRequestStatus:" + purchaseResponse.getPurchaseRequestStatus());  new PurchaseAsyncTask().execute(purchaseResponse);}  }
class C{  boolean methodIsSelectedForDebuggingWithMethodToPrint(){  boolean originalMethodSelected=options.hasMETHOD_TO_PRINT() && options.fuzzyMatchMETHOD_TO_PRINT(getOriginalMethod().toString());  return originalMethodSelected;}  }
class C{  public static Validator<CharSequence> iPv6Address(@NonNull final Context context,@StringRes final int resourceId){  return new IPv6AddressValidator(context,resourceId);}  }
class C{  void unbindFromTask(){  mApplicationIcon.setImageDrawable(null);}  }
class C{  @Override @Pure public boolean equals(Object other){  if (this == other) {    return true;  } else {    if (other instanceof Atom) {      Atom that=(Atom)other;      if ((that.id != -1) && (this.id != -1)) {        return that.id == this.id;      }      if ((this.unicodeStringOrJTOCoffset != null) && (that.unicodeStringOrJTOCoffset != null)) {        return toUnicodeStringInternal().equals(that.toUnicodeStringInternal());      }      try {        byte[] val1;        if (that.val != null) {          val1=that.val;        } else {          val1=UTF8Convert.toUTF8(that.toUnicodeString());        }        byte[] val2;        if (this.val != null) {          val2=this.val;        } else {          val2=UTF8Convert.toUTF8(toUnicodeString());        }        if (val1.length == val2.length) {          for (int i=0; i < val1.length; i++) {            if (val1[i] != val2[i])             return false;          }          return true;        }      } catch (      UTFDataFormatException e) {        throw new Error("Error in UTF data encoding: ",e);      }    }    return false;  }}  }
class C{  public boolean isExpert(){  return expert;}  }
class C{  public void test_ticket_1202q() throws Exception {  new TestHelper("ticket-1202-additional5","ticket-1202-additional5.rq","ticket-1202-additional5.ttl","ticket-1202-additional5.srx").runTest();}  }
class C{  public void addValue(T value){  list.addFirst(value);  total+=Double.valueOf(value.toString());  trim();}  }
class C{  private static void checkArguments(final Object parent){  Preconditions.checkNotNull(parent,"IE01920: Parent argument can not be null");}  }
class C{  public void closeAllFragment(){  int backStackCount=context.getSupportFragmentManager().getBackStackEntryCount();  for (int i=0; i < backStackCount; i++) {    int backStackId=context.getSupportFragmentManager().getBackStackEntryAt(i).getId();    context.getSupportFragmentManager().popBackStack(backStackId,FragmentManager.POP_BACK_STACK_INCLUSIVE);  }}  }
class C{  protected void sendFunctionGroup3(){  byte[] result=jmri.NmraPacket.function9Through12Packet(address.getNumber(),address.isLongAddress(),getF9(),getF10(),getF11(),getF12());  station.sendPacket(result,1);}  }
class C{  public ExponentialGrowth(Type units){  super(units);}  }
class C{  public static void colorLoops(final IDirectedGraph<INaviViewNode,INaviEdge> graph,final INaviViewNode entryNode) throws MalformedGraphException {  final Collection<INaviEdge> edges=graph.getEdges();  if (entryNode != null) {    final HashMap<INaviViewNode,ArrayList<INaviViewNode>> backedges=GraphAlgorithms.getBackEdges(graph,entryNode);    for (    final INaviEdge edge : edges) {      if (edge.getSource() == edge.getTarget()) {        edge.setEdgeType(loopify(edge.getType()));      }      if (backedges.containsKey(edge.getSource())) {        if (backedges.get(edge.getSource()).contains(edge.getTarget())) {          edge.setEdgeType(loopify(edge.getType()));        }      }    }  }}  }
class C{  protected ChunkType parseChunkType(String chunkDefinition){  if (StringUtils.isEmpty(chunkDefinition)) {    throw new TestConfigurationException("Parameter 'unparsedChunkSpec' cannot be null or empty.");  }  String chunkTypeString=chunkDefinition.substring(0,chunkDefinition.indexOf("("));  ChunkType[] actualTypes=ChunkType.values();  for (int i=0; i < actualTypes.length; i++) {    ChunkType chunkType=actualTypes[i];    if (chunkType.toString().startsWith(chunkTypeString)) {      return chunkType;    }  }  throw new TestConfigurationException(String.format("Unknown ChunkType.%s specified.",chunkTypeString));}  }
class C{  public void testConstrBigIntegerScaleMathContext(){  String a="1231212478987482988429808779810457634781384756794987";  BigInteger bA=new BigInteger(a);  int aScale=10;  int precision=46;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String res="1231212478987482988429808779810457634781384757";  int resScale=4;  BigDecimal result=new BigDecimal(bA,aScale,mc);  assertEquals("incorrect value",res,result.unscaledValue().toString());  assertEquals("incorrect scale",resScale,result.scale());  BigDecimal bd;  BigInteger bi=new BigInteger("12345678901234567890123456789012345");  BigInteger nbi=new BigInteger("-12345678901234567890123456789012345");  mc=new MathContext(31,RoundingMode.UP);  bd=new BigDecimal(bi,-10,mc);  assertEquals("incorrect value","1.234567890123456789012345678902E+44",bd.toString());  bd=new BigDecimal(nbi,-10,mc);  assertEquals("incorrect value","-1.234567890123456789012345678902E+44",bd.toString());  mc=new MathContext(28,RoundingMode.DOWN);  bd=new BigDecimal(bi,-10,mc);  assertEquals("incorrect value","1.234567890123456789012345678E+44",bd.toString());  bd=new BigDecimal(nbi,-10,mc);  assertEquals("incorrect value","-1.234567890123456789012345678E+44",bd.toString());  mc=new MathContext(33,RoundingMode.CEILING);  bd=new BigDecimal(bi,-10,mc);  assertEquals("incorrect value","1.23456789012345678901234567890124E+44",bd.toString());  bd=new BigDecimal(nbi,-10,mc);  assertEquals("incorrect value","-1.23456789012345678901234567890123E+44",bd.toString());  mc=new MathContext(34,RoundingMode.FLOOR);  bd=new BigDecimal(bi,-10,mc);  assertEquals("incorrect value","1.234567890123456789012345678901234E+44",bd.toString());  bd=new BigDecimal(nbi,-10,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901235E+44",bd.toString());  mc=new MathContext(34,RoundingMode.HALF_EVEN);  bd=new BigDecimal(bi,-10,mc);  assertEquals("incorrect value","1.234567890123456789012345678901234E+44",bd.toString());  bd=new BigDecimal(nbi,-10,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901234E+44",bd.toString());  bd=new BigDecimal(new BigInteger("-12345678901234567890123456789012335"),-10,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901234E+44",bd.toString());  mc=new MathContext(34,RoundingMode.HALF_UP);  bd=new BigDecimal(bi,-10,mc);  assertEquals("incorrect value","1.234567890123456789012345678901235E+44",bd.toString());  bd=new BigDecimal(nbi,-10,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901235E+44",bd.toString());  mc=new MathContext(34,RoundingMode.HALF_DOWN);  bd=new BigDecimal(bi,-10,mc);  assertEquals("incorrect value","1.234567890123456789012345678901234E+44",bd.toString());  bd=new BigDecimal(nbi,-10,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901234E+44",bd.toString());  mc=new MathContext(34,RoundingMode.UNNECESSARY);  try {    bd=new BigDecimal(bi,-10,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }  try {    bd=new BigDecimal(nbi,-10,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }  mc=new MathContext(31,RoundingMode.UP);  bd=new BigDecimal(bi,10,mc);  assertEquals("incorrect value","1234567890123456789012345.678902",bd.toString());  bd=new BigDecimal(nbi,10,mc);  assertEquals("incorrect value","-1234567890123456789012345.678902",bd.toString());  mc=new MathContext(28,RoundingMode.DOWN);  bd=new BigDecimal(bi,10,mc);  assertEquals("incorrect value","1234567890123456789012345.678",bd.toString());  bd=new BigDecimal(nbi,10,mc);  assertEquals("incorrect value","-1234567890123456789012345.678",bd.toString());  mc=new MathContext(33,RoundingMode.CEILING);  bd=new BigDecimal(bi,10,mc);  assertEquals("incorrect value","1234567890123456789012345.67890124",bd.toString());  bd=new BigDecimal(nbi,10,mc);  assertEquals("incorrect value","-1234567890123456789012345.67890123",bd.toString());  mc=new MathContext(34,RoundingMode.FLOOR);  bd=new BigDecimal(bi,10,mc);  assertEquals("incorrect value","1234567890123456789012345.678901234",bd.toString());  bd=new BigDecimal(nbi,10,mc);  assertEquals("incorrect value","-1234567890123456789012345.678901235",bd.toString());  mc=new MathContext(34,RoundingMode.HALF_EVEN);  bd=new BigDecimal(bi,10,mc);  assertEquals("incorrect value","1234567890123456789012345.678901234",bd.toString());  bd=new BigDecimal(nbi,10,mc);  assertEquals("incorrect value","-1234567890123456789012345.678901234",bd.toString());  bd=new BigDecimal(new BigInteger("-12345678901234567890123456789012335"),10,mc);  assertEquals("incorrect value","-1234567890123456789012345.678901234",bd.toString());  mc=new MathContext(34,RoundingMode.HALF_UP);  bd=new BigDecimal(bi,10,mc);  assertEquals("incorrect value","1234567890123456789012345.678901235",bd.toString());  bd=new BigDecimal(nbi,10,mc);  assertEquals("incorrect value","-1234567890123456789012345.678901235",bd.toString());  mc=new MathContext(34,RoundingMode.HALF_DOWN);  bd=new BigDecimal(bi,10,mc);  assertEquals("incorrect value","1234567890123456789012345.678901234",bd.toString());  bd=new BigDecimal(nbi,10,mc);  assertEquals("incorrect value","-1234567890123456789012345.678901234",bd.toString());  mc=new MathContext(34,RoundingMode.UNNECESSARY);  try {    bd=new BigDecimal(bi,10,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }  try {    bd=new BigDecimal(nbi,10,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }  mc=new MathContext(28,RoundingMode.FLOOR);  bd=new BigDecimal(bi,10,mc);  assertEquals("incorrect value","1234567890123456789012345.678",bd.toString());  bd=new BigDecimal(nbi,10,mc);  assertEquals("incorrect value","-1234567890123456789012345.679",bd.toString());}  }
class C{  private double deviation(double[] delta,double[][] beta){  final double a=squareSum(delta);  final double b=squareSum(transposeTimes(beta,delta));  return (a > b) ? Math.sqrt(a - b) : 0.;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  for (Node<K,V> n=findFirst(); n != null; n=n.next) {    V v=n.getValidValue();    if (v != null) {      s.writeObject(n.key);      s.writeObject(v);    }  }  s.writeObject(null);}  }
class C{  public I18n(String moduleName,String key,I18nSet lang){  super();  Assert.hasText(moduleName,"Not allowed to create an I18n instance with an empty moduleName");  Assert.hasText(key,"Not allowed to create an I18n instance with an empty key");  this.moduleName=moduleName;  this.key=key;  this.lang=lang;}  }
class C{  public void testRecognizeFullCone_Local_v4_Public_v6() throws Exception {  Response testIResponse1=MessageFactory.create3489BindingResponse(mappedClientAddress_v6,responseServerAddress_v4,responseServerAddress_v4);  Response testIResponse2=MessageFactory.create3489BindingResponse(mappedClientAddress_v6,responseServerAddress_v4,responseServerAddress_v4);  responseServer_v4.addMessage(testIResponse1);  responseServer_v4.addMessage(testIResponse2);  StunDiscoveryReport expectedReturn=new StunDiscoveryReport();  expectedReturn.setNatType(StunDiscoveryReport.FULL_CONE_NAT);  expectedReturn.setPublicAddress(mappedClientAddress_v6);  StunDiscoveryReport actualReturn=stunAddressDiscoverer_v4.determineAddress();  assertEquals("The StunAddressDiscoverer failed for a no-udp environment.",expectedReturn,actualReturn);}  }
class C{  static void writeShort(final byte[] b,final int index,final int s){  b[index]=(byte)(s >>> 8);  b[index + 1]=(byte)s;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TANNOTATION_ARGUMENT___GET_ARG_AS_STRING:    return getArgAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  void writeClassfile(String classname,OutputStream out) throws NotFoundException, IOException, CannotCompileException {  InputStream fin=openClassfile(classname);  if (fin == null)   throw new NotFoundException(classname);  try {    copyStream(fin,out);  }  finally {    fin.close();  }}  }
class C{  public void clear(){  list.clear();}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter a string and a character: ");  String[] str=input.nextLine().split("[ ]");  System.out.println("The number of occurences of the character \'" + str[1] + "\' in the string \""+ str[0]+ "\" is "+ count(str[0],str[1].charAt(0)));}  }
class C{  public void createPictScenario03() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2013-07-01 00:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  String supplierAdminId="Pict03Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict03SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  VOMarketplace supplMarketplace=orgSetup.createMarketplace("Pict03Supplier_MP",false,supplier);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  serviceSetup.importTechnicalServices(BaseAdmUmTest.TECHNICAL_SERVICE_EXAMPLE2_XML);  VOTechnicalService example2TechService=serviceSetup.getTechnicalService(VOTechServiceFactory.TECH_SERVICE_EXAMPLE2_ID);  setCutOffDay(supplierAdmin.getKey(),1);  String customerAdminId="PIC03Customer";  VOOrganization customer=orgSetup.registerCustomer("PIC03CustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  VOServiceDetails serviceDetailsTemp=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT_TEST_03",TestService.EXAMPLE2,TestPriceModel.FREE,example2TechService,supplMarketplace);  VOServiceDetails serviceDetails=serviceSetup.savePriceModelForCustomer(serviceDetailsTemp,TestPriceModel.EXAMPLE_PICT03_UNIT_HOUR,customer);  serviceDetails=serviceSetup.activateMarketableService(serviceDetails);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_03",serviceDetails,customerAdmin,role);  BillingIntegrationTestBase.setDateFactoryInstance("2013-07-02 10:00:00");  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance("2013-07-02 12:00:00");  role=VOServiceFactory.getRole(serviceDetails,"USER");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance("2013-07-02 13:00:00");  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance("2013-07-02 14:00:00");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance("2013-07-22 10:00:00");  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance("2013-07-22 10:10:00");  role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long userterminateTime=DateTimeHandling.calculateMillis("2013-08-01 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userterminateTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-01 13:00:01"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-11-01 13:00:02"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetailsTemp);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-01 13:00:03"));  container.login(supplierAdmin.getKey(),ROLE_TECHNOLOGY_MANAGER);  serviceSetup.deleteTechnicalService(example2TechService);  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_03",subDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_03",customer);}  }
class C{  protected void writeHTMLTags(AttributeSet attr) throws IOException {  int oldMask=fontMask;  setFontMask(attr);  int endMask=0;  int startMask=0;  if ((oldMask & BOLD) != 0) {    if ((fontMask & BOLD) == 0) {      endMask|=BOLD;    }  } else   if ((fontMask & BOLD) != 0) {    startMask|=BOLD;  }  if ((oldMask & ITALIC) != 0) {    if ((fontMask & ITALIC) == 0) {      endMask|=ITALIC;    }  } else   if ((fontMask & ITALIC) != 0) {    startMask|=ITALIC;  }  if ((oldMask & UNDERLINE) != 0) {    if ((fontMask & UNDERLINE) == 0) {      endMask|=UNDERLINE;    }  } else   if ((fontMask & UNDERLINE) != 0) {    startMask|=UNDERLINE;  }  writeEndMask(endMask);  writeStartMask(startMask);}  }
class C{  public boolean hasType(){  return getType() != null;}  }
class C{  public ThiranAllpass(int N,double D){  super(N);  double[] a=new double[N + 1];  a[0]=1.0;  for (int i=1; i <= N; i++) {    double prod=1.0;    for (int n=0; n <= N; n++) {      prod*=((double)(D - N + n)) / ((double)(D - N + i + n));    }    a[i]=Math.pow(-1,i) * (factorial(N) / (factorial(N - i) * factorial(i))) * prod;  }  Polynomial P=new Polynomial(a);  k=P.reflectionCoefficients();  constructRationalRepresentation();}  }
class C{  @Override public void dispose(){  m_project.removeListener(m_projectListener);  m_database.getContent().getDebuggerTemplateManager().removeListener(m_debuggerManagerListener);  m_table.dispose();}  }
class C{  public boolean isIncludeDestClasses(){  return includeDestClasses;}  }
class C{  public boolean process(PO document,int AD_Table_ID){  m_noCalled++;  MWorkflow[] wfs=MWorkflow.getDocValue(document.getCtx(),document.getAD_Client_ID(),AD_Table_ID,document.get_TrxName());  if (wfs == null || wfs.length == 0)   return false;  boolean started=false;  for (int i=0; i < wfs.length; i++) {    MWorkflow wf=wfs[i];    String logic=wf.getDocValueLogic();    if (logic == null || logic.length() == 0) {      log.severe("Workflow has no Logic - " + wf.getName());      continue;    }    if (wf.getAD_Client_ID() != document.getAD_Client_ID())     continue;    boolean sql=logic.startsWith("SQL=");    if (sql && !testStart(wf,document)) {      log.fine("SQL Logic evaluated to false (" + logic + ")");      continue;    }    if (!sql && !Evaluator.evaluateLogic(document,logic)) {      log.fine("Logic evaluated to false (" + logic + ")");      continue;    }    log.fine(logic);    int AD_Process_ID=305;    ProcessInfo pi=new ProcessInfo(wf.getName(),AD_Process_ID,AD_Table_ID,document.get_ID());    pi.setAD_User_ID(Env.getAD_User_ID(document.getCtx()));    pi.setAD_Client_ID(document.getAD_Client_ID());    if (wf.start(pi,document.get_TrxName()) != null) {      log.config(wf.getName());      m_noStarted++;      started=true;    }  }  return started;}  }
class C{  public final boolean exit(){  if (!inQueue)   return false;  inQueue=false;  return cancelScheduledTimeout(this);}  }
class C{  public void connect(LnTrafficController t){  t.addLocoNetListener(~0,this);}  }
class C{  public void assertDisplayNameDoesNotExistForTag(String tagCode,String displayName){  TagEntity tagEntity=tagDao.getTagByTagTypeAndDisplayName(tagCode,displayName);  if (tagEntity != null) {    throw new AlreadyExistsException(String.format("Display name \"%s\" already exists for a tag with tag type \"%s\" and tag code \"%s\".",displayName,tagEntity.getTagType().getCode(),tagEntity.getTagCode()));  }}  }
class C{  @Override public String execute() throws Exception {  Closer closer=Closer.create();  try {    dcatInfo=closer.register(new ByteArrayInputStream(generateDCAT.getFeed().getBytes("UTF-8")));  } catch (  UnsupportedEncodingException e) {    LOG.error("Error generating DCAT feed: " + e.getMessage(),e);  } finally {    try {      closer.close();    } catch (    IOException e) {      LOG.error("Failed to close input stream on DCAT feed",e);    }  }  return SUCCESS;}  }
class C{  public boolean isShardingKey(){  return shardingKey;}  }
class C{  public static int translateLine(@Nullable Change change,int line){  return translateLine(change,line,false);}  }
class C{  public BasicIconPart(Shape shape,AffineTransform transform){  this(shape,transform,DrawingAttributes.DEFAULT);}  }
class C{  public static Cuboid alignToBlock(Cuboid cuboid){  Vector min=alignToBlock(cuboid.minimum());  Vector max=alignToBlock(cuboid.maximum());  return Cuboid.between(min,max);}  }
class C{  public void actionPerformed(ActionEvent e){  String cmd=e.getActionCommand();  if (cmd.equals("Cancel")) {    setVisible(false);    value=null;  } else   if (cmd.equals("Select")) {    value=(String)list.getSelectedValue();    setVisible(false);    swingGui.showFileWindow(value,-1);  }}  }
class C{  public void platform(SwtPlatform platform){  addArg("p2.os",platform.getOs());  addArg("p2.ws",platform.getWs());  addArg("p2.arch",platform.getArch());  if (platform.getOs().equals("macosx")) {    String dest=args.get("destination").get(0);    if (!dest.endsWith(".app")) {      System.err.println("WARNING: Mac installs should end with '.app', this is " + dest);    }  }}  }
class C{  public static boolean isAlphabetic(String s){  if (isEmpty(s))   return defaultEmptyOK;  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (!isLetter(c))     return false;  }  return true;}  }
class C{  private void incorporateArchiveTimestamp(){  final TimestampParameters archiveTimestampParameters=params.getArchiveTimestampParameters();  final String canonicalizationMethod=archiveTimestampParameters.getCanonicalizationMethod();  final byte[] archiveTimestampData=xadesSignature.getArchiveTimestampData(null,canonicalizationMethod);  final DigestAlgorithm timestampDigestAlgorithm=archiveTimestampParameters.getDigestAlgorithm();  final byte[] digestBytes=DSSUtils.digest(timestampDigestAlgorithm,archiveTimestampData);  createXAdESTimeStampType(TimestampType.ARCHIVE_TIMESTAMP,canonicalizationMethod,digestBytes);}  }
class C{  @DSComment("Notification can only go to screen") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:55.198 -0500",hash_original_method="C3E2CA3977B6A0DFE40EA0B5D969CEEE",hash_generated_method="90EF31815973B3B19C436849AC0958EC") public void cancel(int id){  cancel(null,id);}  }
class C{  public void addListener(final ICriteriumTreeListener listener){  m_listeners.addListener(listener);}  }
class C{  public static Storagetransfer createStorageTransferClient(HttpTransport httpTransport,JsonFactory jsonFactory,GoogleCredential credential){  Preconditions.checkNotNull(httpTransport);  Preconditions.checkNotNull(jsonFactory);  Preconditions.checkNotNull(credential);  if (credential.createScopedRequired()) {    credential=credential.createScoped(StoragetransferScopes.all());  }  HttpRequestInitializer initializer=new RetryHttpInitializerWrapper(credential);  return new Storagetransfer.Builder(httpTransport,jsonFactory,initializer).setApplicationName("storagetransfer-sample").build();}  }
class C{  public static int baseHeapSize(){  if (bits.getValue() == 64 && baseHeap64.getPages() != 0) {    return baseHeap64.getPages();  }  return baseHeap.getPages();}  }
class C{  private static String maybeFixupURLForWindows(String url){  if (url == null || url.length() < 2 || url.charAt(0) == '\\' || url.charAt(1) == ':')   return url;  String lower_url=url.toLowerCase();  int i=badEndings.length;  while (i-- > 0)   if (lower_url.endsWith(badEndings[i]))   return fixupURLForWindows(url);  return url;}  }
class C{  public static Boolean isLockGrantor(String serviceName){  DLockService service=(DLockService)DistributedLockService.getServiceNamed(serviceName);  assertNotNull(service);  Boolean result=Boolean.valueOf(service.isLockGrantor());  logInfo("In isLockGrantor: " + result);  return result;}  }
class C{  public _BuildAgentUpdate(){  super();}  }
class C{  static <T>T checkNotNull(T reference,String errorMessage,Object... args){  if (reference == null) {    throw new NullPointerException(String.format(errorMessage,args));  }  return reference;}  }
class C{  public static BigDecimal openToDate(int p_C_Invoice_ID,int p_C_InvoicePaySchedule_ID,Timestamp DateAcct) throws SQLException {  int C_Currency_ID=0;  int C_ConversionType_ID=0;  BigDecimal GrandTotal=null;  BigDecimal MultiplierAP=null;  BigDecimal MultiplierCM=null;  String sql="SELECT MAX(C_Currency_ID),MAX(C_ConversionType_ID)," + " SUM(GrandTotal), MAX(MultiplierAP), MAX(Multiplier) " + "FROM	C_Invoice_v "+ "WHERE C_Invoice_ID=?"+ " AND DateAcct <= ?";  if (p_C_InvoicePaySchedule_ID != 0)   sql+=" AND C_InvoicePaySchedule_ID=?";  PreparedStatement pstmt=Adempiere.prepareStatement(sql);  pstmt.setInt(1,p_C_Invoice_ID);  pstmt.setTimestamp(2,DateAcct);  if (p_C_InvoicePaySchedule_ID != 0)   pstmt.setInt(3,p_C_InvoicePaySchedule_ID);  ResultSet rs=pstmt.executeQuery();  if (rs.next()) {    C_Currency_ID=rs.getInt(1);    C_ConversionType_ID=rs.getInt(2);    GrandTotal=rs.getBigDecimal(3);    MultiplierAP=rs.getBigDecimal(4);    MultiplierCM=rs.getBigDecimal(5);  }  rs.close();  pstmt.close();  pstmt=null;  if (GrandTotal == null)   return null;  BigDecimal paidAmt=allocatedAmtToDate(p_C_Invoice_ID,C_Currency_ID,C_ConversionType_ID,MultiplierAP,DateAcct);  BigDecimal TotalOpenAmt=GrandTotal.subtract(paidAmt);  if (p_C_InvoicePaySchedule_ID > 0) {    TotalOpenAmt=GrandTotal;    BigDecimal remainingAmt=paidAmt;    sql="SELECT C_InvoicePaySchedule_ID, DueAmt " + "FROM C_InvoicePaySchedule " + "WHERE C_Invoice_ID=?"+ " AND IsValid='Y' "+ "ORDER BY DueDate";    pstmt=Adempiere.prepareStatement(sql);    pstmt.setInt(1,p_C_Invoice_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      int C_InvoicePaySchedule_ID=rs.getInt(1);      BigDecimal DueAmt=rs.getBigDecimal(2);      if (C_InvoicePaySchedule_ID == p_C_InvoicePaySchedule_ID) {        if (DueAmt.signum() > 0) {          if (DueAmt.compareTo(remainingAmt) < 0)           TotalOpenAmt=Adempiere.ZERO; else           TotalOpenAmt=DueAmt.multiply(MultiplierCM).subtract(remainingAmt);        } else {          if (DueAmt.compareTo(remainingAmt) > 0)           TotalOpenAmt=Adempiere.ZERO; else           TotalOpenAmt=DueAmt.multiply(MultiplierCM).add(remainingAmt);        }      } else {        if (DueAmt.signum() > 0) {          remainingAmt=remainingAmt.subtract(DueAmt);          if (remainingAmt.signum() < 0)           remainingAmt=Adempiere.ZERO;        } else {          remainingAmt=remainingAmt.add(DueAmt);          if (remainingAmt.signum() < 0)           remainingAmt=Adempiere.ZERO;        }      }    }    rs.close();    pstmt.close();  }  TotalOpenAmt=Currency.round(TotalOpenAmt,C_Currency_ID,null);  if (paidAmt.signum() != 0) {    double open=TotalOpenAmt.doubleValue();    if (open >= -0.01 && open <= 0.01)     TotalOpenAmt=Adempiere.ZERO;  }  return TotalOpenAmt;}  }
class C{  static protected void logInfo(String name,String s){  logStdErr("info",name,s,null);}  }
class C{  public long calculateDuration(){  if (!nodes.isEmpty()) {    long endTime=0;    for (int i=0; i < getNodes().size(); i++) {      Node node=getNodes().get(i);      long nodeEndTime=node.overallEndTime();      if (nodeEndTime > endTime) {        endTime=nodeEndTime;      }    }    return endTime - getNodes().get(0).getTimestamp();  }  return 0L;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Boolean isMtuSettable(){  return mtuSettable;}  }
class C{  public void paint(Graphics g,JComponent c){  super.paint(g,c);  AbstractButton b=(AbstractButton)c;  ButtonModel model=b.getModel();  boolean in=model.isPressed() || model.isSelected();  if (b.isBorderPainted())   CompiereUtils.paint3Deffect((Graphics2D)g,c,CompiereLookAndFeel.ROUND,!in);}  }
class C{  public static OreDictionaryEntry valueOf(int id){  if (id < 0)   throw new IllegalArgumentException("ore dictionary IDs are not negative");  while (oreDictionaryEntries.size() < id + 1) {    oreDictionaryEntries.add(new OreDictionaryEntry(oreDictionaryEntries.size()));  }  return oreDictionaryEntries.get(id);}  }
class C{  public void clear(){  contents.clear();}  }
class C{  public Intent execute(Context context){  String[] titles=new String[]{"Crete","Corfu","Thassos","Skiathos"};  List<double[]> x=new ArrayList<double[]>();  for (int i=0; i < titles.length; i++) {    x.add(new double[]{1,2,3,4,5,6,7,8,9,10,11,12});  }  List<double[]> values=new ArrayList<double[]>();  values.add(new double[]{12.3,12.5,13.8,16.8,20.4,24.4,26.4,26.1,23.6,20.3,17.2,13.9});  values.add(new double[]{10,10,12,15,20,24,26,26,23,18,14,11});  values.add(new double[]{5,5.3,8,12,17,22,24.2,24,19,15,9,6});  values.add(new double[]{9,10,11,15,19,23,26,25,22,18,13,10});  int[] colors=new int[]{Color.BLUE,Color.GREEN,Color.CYAN,Color.YELLOW};  PointStyle[] styles=new PointStyle[]{PointStyle.CIRCLE,PointStyle.DIAMOND,PointStyle.TRIANGLE,PointStyle.SQUARE};  XYMultipleSeriesRenderer renderer=buildRenderer(colors,styles);  int length=renderer.getSeriesRendererCount();  for (int i=0; i < length; i++) {    ((XYSeriesRenderer)renderer.getSeriesRendererAt(i)).setFillPoints(true);  }  setChartSettings(renderer,"Average temperature","Month","Temperature",0.5,12.5,-10,40,Color.LTGRAY,Color.LTGRAY);  renderer.setXLabels(12);  renderer.setYLabels(10);  renderer.setShowGrid(true);  renderer.setXLabelsAlign(Align.RIGHT);  renderer.setYLabelsAlign(Align.RIGHT);  renderer.setZoomButtonsVisible(true);  renderer.setPanLimits(new double[]{-10,20,-10,40});  renderer.setZoomLimits(new double[]{-10,20,-10,40});  XYMultipleSeriesDataset dataset=buildDataset(titles,x,values);  XYSeries series=dataset.getSeriesAt(0);  series.addAnnotation("Vacation",6,30);  XYSeriesRenderer r=(XYSeriesRenderer)renderer.getSeriesRendererAt(0);  r.setAnnotationsColor(Color.GREEN);  r.setAnnotationsTextSize(15);  r.setAnnotationsTextAlign(Align.CENTER);  Intent intent=ChartFactory.getLineChartIntent(context,dataset,renderer,"Average temperature");  return intent;}  }
class C{  private void append(PrintWriter pw,final String k,final String v){  if (v != null) {    pw.println(k + ": " + v);  }}  }
class C{  @Override public void onUpdate(){  this.prevPosX=this.posX;  this.prevPosY=this.posY;  this.prevPosZ=this.posZ;  this.particleScale++;  if (this.particleAge++ >= this.particleMaxAge) {    this.setDead();    return;  }}  }
class C{  static void selfInterrupt(){  Thread.currentThread().interrupt();}  }
class C{  public LayerTree(LayerTreeModel model){  if (model == null) {    String message=Logging.getMessage("nullValue.ModelIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.initialize(model,null);}  }
class C{  public void testQParserEmptyInput() throws Exception {  SolrQueryRequest req=req();  final String[] parsersTested=new String[]{OldLuceneQParserPlugin.NAME,LuceneQParserPlugin.NAME,DisMaxQParserPlugin.NAME,ExtendedDismaxQParserPlugin.NAME};  for (  String defType : parsersTested) {    for (    String qstr : new String[]{null,""}) {      QParser parser=null;      try {        parser=QParser.getParser(qstr,defType,req);      } catch (      Exception e) {        throw new RuntimeException("getParser excep using defType=" + defType + " with qstr="+ qstr,e);      }      Query q=parser.parse();      assertNull("expected no query",q);    }  }}  }
class C{  public boolean hasUserCancelled(){  return myIsDialogCancelled;}  }
class C{  public final void signal(){  if (!isHeldExclusively())   throw new IllegalMonitorStateException();  Node first=firstWaiter;  if (first != null)   doSignal(first);}  }
class C{  private boolean validateTemplate(Template template){  String contextTypeId=template.getContextTypeId();  if (contextExists(contextTypeId)) {    if (fRegistry != null)     try {      fRegistry.getContextType(contextTypeId).validate(template.getPattern());    } catch (    TemplateException e) {      return false;    }    return true;  }  return false;}  }
class C{  protected LineStartImpl(){  super();}  }
class C{  public void addZips(Collection<String> zips){  if (zips != null) {    for (    String zip : zips) {      addZip(zip);    }  }}  }
class C{  @Override public double nextRandom(){  return -Math.log(random.nextDouble()) / rate + location;}  }
class C{  void skipSpace() throws IOException {  while (true) {switch (ch) {case '\n':      ln++;    ch=readCh();  lfCount++;break;case '\r':ln++;if ((ch=readCh()) == '\n') {ch=readCh();crlfCount++;} else {crCount++;}break;case ' ':case '\t':ch=readCh();break;default :return;}}}  }
class C{  @Override public void dispose(){  GLU.gluDeleteTess(this.tess);  this.tess=null;}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  this(AccountManager.get(context),account,authTokenType,notifyAuthFailure);}  }
class C{  public boolean maxValue(int val,int maxVal){  return GenericValidator.maxValue(val,maxVal);}  }
class C{  public void applyPattern(String template){  validatePattern(template);  pattern=template;}  }
class C{  public LocalDirectoryRequest(String repository){  BugLog.getInstance().assertNotNull(repository);  this.repository=repository;}  }
class C{  public OFVendorData newInstance(){  return instantiable.instantiate();}  }
