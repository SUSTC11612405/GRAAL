class C{  public String toString(){  java.text.MessageFormat form=new java.text.MessageFormat(sun.security.util.ResourcesMgr.getString("NTSidGroupPrincipal.name","sun.security.util.AuthResources"));  Object[] source={getName()};  return form.format(source);}  }
class C{  public static boolean isDraw(String[][] m){  for (int i=0; i < m.length; i++) {    for (int j=0; j < m[i].length; j++) {      if (m[i][j] == "   ")       return false;    }  }  return true;}  }
class C{  protected void run() throws Exception {}  }
class C{  public static boolean isEmpty(Map map){  return (map == null || map.isEmpty());}  }
class C{  public static Object sum(Object[] items){  return sum((Iterable)Arrays.asList(items));}  }
class C{  public void testGetF24(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF24();  assertEquals(expResult,result);}  }
class C{  @Deprecated public void readObject(ObjectInputStream s) throws IOException {}  }
class C{  public IllinoisLemmatizer(boolean isLazilyInitialized){  super(ViewNames.LEMMA,new String[]{ViewNames.POS},isLazilyInitialized,new LemmatizerConfigurator().getDefaultConfig());}  }
class C{  public static void updateObligationView(ObligationStatus status){  ObligationsView oblView;  if (!ProverHelper.isInterestingObligation(status)) {    oblView=(ObligationsView)UIHelper.findView(VIEW_ID);  } else {    oblView=(ObligationsView)UIHelper.openView(VIEW_ID);  }  if (oblView != null) {    String moduleName=status.getObMarker().getResource().getName();    if (!oblView.getPartName().equals(PART_NAME_BASE + moduleName)) {      oblView.setPartName(PART_NAME_BASE + moduleName);    }    oblView.updateItem(status);    if (oblView.isEmpty()) {      UIHelper.getActivePage().hideView(oblView);    }  }}  }
class C{  public BuilderForDnsDiscoverer gossipTimeout(Duration gossipTimeout){  super.gossipTimeout=gossipTimeout;  return this;}  }
class C{  @Override public void addBatch() throws SQLException {synchronized (checkClosed().getConnectionMutex()) {    if (this.batchedArgs == null) {      this.batchedArgs=new ArrayList<Object>();    }    this.batchedArgs.add(new BatchedBindValues(this.parameterBindings));  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public EventClient(InetAddress hostAddress,int hostPort,String deviceName,String iconFile) throws IOException {  byte iconType=Packet.ICON_PNG;  if (iconFile.toLowerCase().endsWith(".jpeg"))   iconType=Packet.ICON_JPEG;  if (iconFile.toLowerCase().endsWith(".jpg"))   iconType=Packet.ICON_JPEG;  if (iconFile.toLowerCase().endsWith(".gif"))   iconType=Packet.ICON_GIF;  FileInputStream iconFileStream=new FileInputStream(iconFile);  byte[] iconData=new byte[iconFileStream.available()];  iconFileStream.read(iconData);  hasIcon=true;  startClient(hostAddress,hostPort,deviceName,iconType,iconData);}  }
class C{  public Shape3DPortrayal3D(Shape3D shape,Color color){  this(shape,appearanceForColor(color));}  }
class C{  public final void invert(){  invertGeneral(this);}  }
class C{  public void init() throws ServletException {}  }
class C{  public static String removeDuplicateWhitespace(String s){  StringBuilder result=new StringBuilder();  int length=s.length();  boolean isPreviousWhiteSpace=false;  for (int i=0; i < length; i++) {    char c=s.charAt(i);    boolean thisCharWhiteSpace=Character.isWhitespace(c);    if (!(isPreviousWhiteSpace && thisCharWhiteSpace)) {      result.append(c);    }    isPreviousWhiteSpace=thisCharWhiteSpace;  }  return result.toString();}  }
class C{  protected boolean mapContainsTask(String map,String taskId){  return getMap(map).containsKey(taskId);}  }
class C{  public int showDialog(){  m_Result=CANCEL_OPTION;  setVisible(true);  return m_Result;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public String toString(){  return this.blocksize_S + " " + this.blocksize_E+ " "+ this.blocksize_B+ " "+ this.blocksize_L;}  }
class C{  public boolean isGameRule(String rule){  return rule != null && gameRules.containsKey(rule);}  }
class C{  public void blockCopy(int sx,int sy,int w,int h,int dx,int dy){  if (w == 0)   return;  if (sx < 0 || sx + w > mColumns || sy < 0 || sy + h > mScreenRows || dx < 0 || dx + w > mColumns || dy < 0 || dy + h > mScreenRows)   throw new IllegalArgumentException();  boolean copyingUp=sy > dy;  for (int y=0; y < h; y++) {    int y2=copyingUp ? y : (h - (y + 1));    TerminalRow sourceRow=allocateFullLineIfNecessary(externalToInternalRow(sy + y2));    allocateFullLineIfNecessary(externalToInternalRow(dy + y2)).copyInterval(sourceRow,sx,sx + w,dx);  }}  }
class C{  public static boolean isTrue(String key,boolean defaultVal){  String val=valueFor(key);  if (val == null) {    return defaultVal;  }  if ("true|false".indexOf(val) == -1) {    XRLog.exception("Property '" + key + "' was requested as a boolean, but "+ "value of '"+ val+ "' is not a boolean. Check configuration.");    return defaultVal;  } else {    return Boolean.valueOf(val).booleanValue();  }}  }
class C{  public OpenIntObjectHashMap(int initialCapacity,double minLoadFactor,double maxLoadFactor){  setUp(initialCapacity,minLoadFactor,maxLoadFactor);}  }
class C{  public static String detectImdbId(String text){  String imdb="";  if (text != null && !text.isEmpty()) {    imdb=StrgUtils.substr(text,".*(tt\\d{7}).*");    if (imdb.isEmpty()) {      imdb=StrgUtils.substr(text,".*imdb\\.com\\/Title\\?(\\d{7}).*");      if (!imdb.isEmpty()) {        imdb="tt" + imdb;      }    }  }  return imdb;}  }
class C{  public QueryTask waitForQuery(QueryTask query,Predicate<QueryTask> predicate) throws Throwable {  return ServiceHostUtils.waitForQuery(this,REFERRER,query,predicate,this.waitIterationCount,this.waitIterationSleep);}  }
class C{  public ColorRGBA(int r,int g,int b,int a){  super(new Scalar(r,g,b,a));}  }
class C{  @SuppressWarnings("unchecked") public <T extends BeanDescription>T introspect(JavaType type){  return (T)getClassIntrospector().forSerialization(this,type,this);}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private int computeAlpha(final ISItem item){  return (int)(255 - 150 * Math.abs(item.getzPosition()));}  }
class C{  public p addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @BeforeMethod public void init(){  MockitoAnnotations.initMocks(this);  globalDataAccessService=new GlobalDataAccessService();  globalDataAccessService.platformIdentDao=platformIdentDao;  globalDataAccessService.agentStatusProvider=agentStatusProvider;  globalDataAccessService.defaultDataDao=defaultDataDao;  globalDataAccessService.eventPublisher=eventPublisher;  globalDataAccessService.log=LoggerFactory.getLogger(GlobalDataAccessService.class);}  }
class C{  private boolean execute(String command,File arg,List<String> lines){  ProcessBuilder pb=new ProcessBuilder(command,arg.getAbsolutePath());  pb.redirectErrorStream(true);  try {    Process proc=pb.start();    BufferedReader reader=new BufferedReader(new InputStreamReader(proc.getInputStream()));    String line;    while ((line=reader.readLine()) != null) {      lines.add(line);    }    proc.waitFor();    return proc.exitValue() == 0;  } catch (  Exception e) {    log.error("Exception while executing: " + command + " "+ arg,e);    lines.add(e.getMessage());    return false;  }}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (mv != null) {    return mv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  public static void organizeDistribution(final float[] probabilities){  organizeDistribution(probabilities,false);}  }
class C{  public static void main(String[] args) throws Exception {  System.out.println("Checking " + Arrays.toString(args));  KeyTab ktab=KeyTab.getInstance(args[0]);  Set<String> expected=new HashSet<>();  for (int i=1; i < args.length; i+=2) {    expected.add(args[i] + ":" + args[i + 1]);  }  for (  KeyTabEntry e : ktab.getEntries()) {    String vne=e.getKey().getKeyVersionNumber() + ":" + e.getKey().getEType();    if (!expected.contains(vne)) {      throw new Exception("No " + vne + " in expected");    }    expected.remove(vne);  }  if (!expected.isEmpty()) {    throw new Exception("Extra elements in expected");  }}  }
class C{  public boolean hasActiveTasks(){  return mActiveTasks.size() > 0;}  }
class C{  protected TAnnotationStringArgumentImpl(){  super();}  }
class C{  private void assertDownloaderManifest(DownloaderInputManifestDto expectedDownloaderInputManifest,DownloaderInputManifestDto actualDownloaderInputManifest){  assertEquals(expectedDownloaderInputManifest.getBusinessObjectDefinitionName(),actualDownloaderInputManifest.getBusinessObjectDefinitionName());  assertEquals(expectedDownloaderInputManifest.getBusinessObjectFormatUsage(),actualDownloaderInputManifest.getBusinessObjectFormatUsage());  assertEquals(expectedDownloaderInputManifest.getBusinessObjectFormatFileType(),actualDownloaderInputManifest.getBusinessObjectFormatFileType());  assertEquals(expectedDownloaderInputManifest.getBusinessObjectFormatVersion(),actualDownloaderInputManifest.getBusinessObjectFormatVersion());  assertEquals(expectedDownloaderInputManifest.getPartitionKey(),actualDownloaderInputManifest.getPartitionKey());  assertEquals(expectedDownloaderInputManifest.getPartitionValue(),actualDownloaderInputManifest.getPartitionValue());  assertEquals(expectedDownloaderInputManifest.getBusinessObjectDataVersion(),actualDownloaderInputManifest.getBusinessObjectDataVersion());}  }
class C{  public double mean(){  return mu;}  }
class C{  public boolean hasAltitude(){  return mHasAltitude;}  }
class C{  public final byte[] generateSecret() throws IllegalStateException {  return spiImpl.engineGenerateSecret();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  String[] imageFiles;  int numImages=0;  double noData=-32768;  int progress=0;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    String returnedHeader="";    for (i=0; i < numImages; i++) {      if (numImages > 1) {        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      GeoTiff gt=new GeoTiff(imageFiles[i]);      gt.read();      int compressionType=gt.getCompressionType();      if (compressionType != 1) {        showFeedback("GeoTiff import does not currently support compressed files.");        return;      }      boolean hasNoDataValue=gt.hasNoDataTag();      double nodata;      if (hasNoDataValue) {        nodata=gt.getNoData();      } else {        nodata=-32768;      }      int nRows=gt.getNumberRows();      int nCols=gt.getNumberColumns();      int dot=imageFiles[i].lastIndexOf(".");      String tiffExtension=imageFiles[i].substring(dot + 1);      whiteboxHeaderFile=imageFiles[i].replace(tiffExtension,"dep");      if (i == 0) {        returnedHeader=whiteboxHeaderFile;      }      whiteboxDataFile=imageFiles[i].replace(tiffExtension,"tas");      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxDataFile)).delete();      ByteOrder byteOrder=gt.getByteOrder();      WhiteboxRasterBase.DataScale myDataScale=WhiteboxRasterBase.DataScale.CONTINUOUS;      if (gt.getPhotometricInterpretation() == 2) {        myDataScale=WhiteboxRasterBase.DataScale.RGB;      }      final WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,gt.getNorth(),gt.getSouth(),gt.getEast(),gt.getWest(),nRows,nCols,myDataScale,WhiteboxRasterBase.DataType.FLOAT,nodata,nodata);      wbr.setByteOrder(byteOrder.toString());      double z;      int oldProgress=-1;      for (int row=0; row < nRows; row++) {        for (int col=0; col < nCols; col++) {          z=gt.getValue(row,col);          if (!hasNoDataValue && (z == -32768 || z == -Float.MAX_VALUE)) {            nodata=z;            hasNoDataValue=true;            wbr.setNoDataValue(nodata);          }          wbr.setValue(row,col,z);        }        progress=(int)(100f * row / (nRows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress("Importing GeoTiff file...",progress);        }      }      wbr.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      wbr.addMetadataEntry("Created on " + new Date());      String[] metaData=gt.showInfo();      for (int a=0; a < metaData.length; a++) {        wbr.addMetadataEntry(metaData[a]);      }      wbr.close();      gt.close();    }    if (!returnedHeader.isEmpty()) {      returnData(returnedHeader);    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private int readArgumentIndex(final String pattern,final ParsePosition pos){  final int start=pos.getIndex();  seekNonWs(pattern,pos);  final StringBuilder result=new StringBuilder();  boolean error=false;  for (; !error && pos.getIndex() < pattern.length(); next(pos)) {    char c=pattern.charAt(pos.getIndex());    if (Character.isWhitespace(c)) {      seekNonWs(pattern,pos);      c=pattern.charAt(pos.getIndex());      if (c != START_FMT && c != END_FE) {        error=true;        continue;      }    }    if ((c == START_FMT || c == END_FE) && result.length() > 0) {      try {        return Integer.parseInt(result.toString());      } catch (      final NumberFormatException e) {      }    }    error=!Character.isDigit(c);    result.append(c);  }  if (error) {    throw new IllegalArgumentException("Invalid format argument index at position " + start + ": "+ pattern.substring(start,pos.getIndex()));  }  throw new IllegalArgumentException("Unterminated format element at position " + start);}  }
class C{  private Assert(){}  }
class C{  public void scrollPathToVisible(TreePath path){  if (path != null) {    makeVisible(path);    Rectangle bounds=getPathBounds(path);    if (bounds != null) {      scrollRectToVisible(bounds);      if (accessibleContext != null) {        ((AccessibleJTree)accessibleContext).fireVisibleDataPropertyChange();      }    }  }}  }
class C{  @Override public Object visit(Variable var){  return Register.createLocal(var.getSlot(),var.getSymbol().getType());}  }
class C{  public static <T>ObjectAnimator ofFloat(T target,Property<T,Float> property,float... values){  ObjectAnimator anim=new ObjectAnimator(target,property);  anim.setFloatValues(values);  return anim;}  }
class C{  public boolean toggle(boolean state){  final int oldScrewState=screwState;  this.screwState=state ? 1 : 0;  if (oldScrewState != screwState)   markForUpdate();  return oldScrewState != screwState;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:15.143 -0500",hash_original_method="6FEED072B476DF683299871B82C2E47E",hash_generated_method="D1C8F57605DACB183A09E1BEE2EA4F5E") @Deprecated public static void runFinalizersOnExit(boolean run){  finalizeOnExit=run;}  }
class C{  public OutputStream put(String key) throws FileNotFoundException {  return new xFileOutputStream(mCache.newFile(key));}  }
class C{  public VNXeCommandJob createFileSystemSnap(String fsId,String name){  _logger.info("creating file system snap:" + fsId);  String resourceId=getStorageResourceId(fsId);  FileSystemSnapCreateParam parm=new FileSystemSnapCreateParam();  VNXeBase resource=new VNXeBase();  resource.setId(resourceId);  parm.setStorageResource(resource);  parm.setName(name);  parm.setIsReadOnly(false);  FileSystemSnapRequests req=new FileSystemSnapRequests(_khClient,getBasicSystemInfo().getSoftwareVersion());  return req.createFileSystemSnap(parm);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:07.174 -0500",hash_original_method="DE018C3EFE6320C8CBFF22F7586A6AFE",hash_generated_method="99D4E31A8067C1F45C3E6784449B085B") public void translateWindowLayout(WindowManager.LayoutParams params){  params.scale(applicationScale);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  long[] ls=stack.getUIMgrSafe().getIRCodesForUE(UserEvent.getEvtCodeForName(getString(stack)));  Long[] rv=new Long[ls.length];  for (int i=0; i < ls.length; i++)   rv[i]=new Long(ls[i]);  return rv;}  }
class C{  @Override public Void apply(ErrorMessage errorMessage){  return null;}  }
class C{  public Builder defaultHeaderTypefacePath(String typefacePath){  this.defaultHeaderTypefacePath=typefacePath;  return this;}  }
class C{  public static DoubleMatrix2D div(DoubleMatrix2D A,double s){  return A.assign(F.div(s));}  }
class C{  public void addFatalError(Message message) throws CompilationFailedException {  addError(message);  failIfErrors();}  }
class C{  public BeanContextServiceAvailableEvent(BeanContextServices bcs,Class sc){  super((BeanContext)bcs);  serviceClass=sc;}  }
class C{  public int height(){  if (root == null) {    return 0;  }  return root.height();}  }
class C{  public static void swap(short[] array){  for (int i=0; i < array.length; i++)   array[i]=swap(array[i]);}  }
class C{  public boolean isRelease(){  return release;}  }
class C{  private boolean mkdirs0(@Nullable File dir){  if (dir == null)   return true;  if (dir.exists())   return dir.isDirectory(); else {    File parentDir=dir.getParentFile();    if (!mkdirs0(parentDir))     return false;    boolean res=dir.mkdir();    if (!res)     res=dir.exists();    return res;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Object clone() throws java.lang.CloneNotSupportedException {  return (super.clone());}  }
class C{  protected boolean beforeSave(boolean newRecord){  return true;}  }
class C{  public final Mono<T> awaitOnSubscribe(){  return onAssembly(new MonoAwaitOnSubscribe<>(this));}  }
class C{  public void install(Router router){  BridgeOptions bridgeOptions=new BridgeOptions().addOutboundPermitted(new PermittedOptions().setAddressRegex(addressPrefix + "(.*)"));  if (eventbusBridgePingInterval != null) {    bridgeOptions=bridgeOptions.setPingTimeout(eventbusBridgePingInterval);  }  router.route(sockPath).handler(SockJSHandler.create(vertx).bridge(bridgeOptions));  log.info("Installed SockJS endpoint on " + sockPath);  log.info("Listening to requests on " + adressPathPattern.pattern());  log.info("Using address prefix " + addressPrefix);}  }
class C{  public void shutdown(){  log.info("Shutting down CoreContainer instance=" + System.identityHashCode(this));  isShutDown=true;  ExecutorUtil.shutdownAndAwaitTermination(coreContainerWorkExecutor);  if (isZooKeeperAware()) {    cancelCoreRecoveries();    zkSys.zkController.publishNodeAsDown(zkSys.zkController.getNodeName());  }  try {    if (coreAdminHandler != null)     coreAdminHandler.shutdown();  } catch (  Exception e) {    log.warn("Error shutting down CoreAdminHandler. Continuing to close CoreContainer.",e);  }  try {synchronized (solrCores.getModifyLock()) {      solrCores.getModifyLock().notifyAll();    }    if (backgroundCloser != null) {      try {        backgroundCloser.join();      } catch (      InterruptedException e) {        Thread.currentThread().interrupt();        if (log.isDebugEnabled()) {          log.debug("backgroundCloser thread was interrupted before finishing");        }      }    }    solrCores.close();synchronized (solrCores.getModifyLock()) {      solrCores.getModifyLock().notifyAll();    }  }  finally {    try {      if (shardHandlerFactory != null) {        shardHandlerFactory.close();      }    }  finally {      try {        if (updateShardHandler != null) {          updateShardHandler.close();        }      }  finally {        zkSys.close();      }    }  }  try {    if (authorizationPlugin != null) {      authorizationPlugin.plugin.close();    }  } catch (  IOException e) {    log.warn("Exception while closing authorization plugin.",e);  }  try {    if (authenticationPlugin != null) {      authenticationPlugin.plugin.close();      authenticationPlugin=null;    }  } catch (  Exception e) {    log.warn("Exception while closing authentication plugin.",e);  }  org.apache.lucene.util.IOUtils.closeWhileHandlingException(loader);}  }
class C{  private static Point2D.Double[] generateBezier(ArrayList<Point2D.Double> d,int first,int last,double[] uPrime,Point2D.Double tHat1,Point2D.Double tHat2){  Point2D.Double[] bezCurve;  bezCurve=new Point2D.Double[4];  for (int i=0; i < bezCurve.length; i++) {    bezCurve[i]=new Point2D.Double();  }  double dist=v2DistanceBetween2Points(d.get(last),d.get(first)) / 3.0;  bezCurve[0]=d.get(first);  bezCurve[3]=d.get(last);  v2Add(bezCurve[0],v2Scale(tHat1,dist),bezCurve[1]);  v2Add(bezCurve[3],v2Scale(tHat2,dist),bezCurve[2]);  return (bezCurve);}  }
class C{  public void tagRemoveObject(int charId,int depth) throws IOException {  startTag(TAG_REMOVEOBJECT,false);  out.writeUI16(charId);  out.writeUI16(depth);  completeTag();}  }
class C{  public void testCreateExistingLocalConfigurationWhenNoHomeDirectorySpecified(){  this.factory.registerConfiguration("testableContainerId",ContainerType.INSTALLED,ConfigurationType.EXISTING,ExistingLocalConfigurationStub.class);  try {    this.factory.createConfiguration("testableContainerId",ContainerType.INSTALLED,ConfigurationType.EXISTING);    fail("An exception should have been raised");  } catch (  ContainerException expected) {    assertEquals("The configuration home parameter must be specified for existing " + "configurations",expected.getOriginalThrowable().getMessage());  }}  }
class C{  public void infoCode(String java){  if (isEnabled(TraceSystem.INFO)) {    traceWriter.write(TraceSystem.INFO,java,null);  }}  }
class C{  public static IndexType createUnique(boolean hash){  IndexType type=new IndexType();  type.unique=true;  type.hash=hash;  return type;}  }
class C{  @Nullable private S3CheckpointData read(String key) throws IgniteCheckedException, AmazonClientException {  assert !F.isEmpty(key);  if (log.isDebugEnabled())   log.debug("Reading data from S3 [bucket=" + bucketName + ", key="+ key+ ']');  try {    S3Object obj=s3.getObject(bucketName,key);    InputStream in=obj.getObjectContent();    try {      return S3CheckpointData.fromStream(in);    } catch (    IOException e) {      throw new IgniteCheckedException("Failed to unmarshal S3CheckpointData [bucketName=" + bucketName + ", key="+ key+ ']',e);    } finally {      U.closeQuiet(in);    }  } catch (  AmazonServiceException e) {    if (e.getStatusCode() != 404)     throw e;  }  return null;}  }
class C{  public void updatePreviousRunStatus(final String previousRunStatus){  if (!StringUtils.isEmpty(previousRunStatus)) {    this.previousRunStatus=previousRunStatus;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr streetAttr;  String value;  doc=(Document)load("staff",false);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  streetAttr=(Attr)attributes.getNamedItem("street");  value=streetAttr.getNodeValue();  assertEquals("attrDefaultValueAssert","Yes",value);}  }
class C{  public boolean isLocateAtCenter(){  return locateAtCenter;}  }
class C{  public void release(){  if (config.managed) {    assert refs > 0 : "Released a texture with no references!";    if (--refs == 0)     close();  }}  }
class C{  public void endStartLocator(InternalDistributedSystem distributedSystem) throws UnknownHostException {  env=null;  if (distributedSystem == null) {    distributedSystem=InternalDistributedSystem.getConnectedInstance();  }  if (distributedSystem != null) {    onConnect(distributedSystem);  } else {    InternalDistributedSystem.addConnectListener(this);  }  this.locatorDiscoverer=WANServiceProvider.createLocatorDiscoverer();  if (this.locatorDiscoverer != null) {    this.locatorDiscoverer.discover(getPort(),config,locatorListener,hostnameForClients);  }}  }
class C{  public static String convertGLUTessErrorToString(int errno){switch (errno) {case GLU.GLU_TESS_MISSING_BEGIN_POLYGON:    return "missing begin polygon";case GLU.GLU_TESS_MISSING_END_POLYGON:  return "missing end polygon";case GLU.GLU_TESS_MISSING_BEGIN_CONTOUR:return "missing begin contour";case GLU.GLU_TESS_MISSING_END_CONTOUR:return "missing end contour";case GLU.GLU_TESS_COORD_TOO_LARGE:return "coordinate too large";case GLU.GLU_TESS_NEED_COMBINE_CALLBACK:return "need combine callback";default :return "unknown";}}  }
class C{  public Configuration(final String url) throws JAXBException {  _dsDispatcher=new DSDispatcher();  _uriBuilder=new UriBuilder();  List<String> _matrixParamSet;  _matrixParamSet=_uriBuilder.addPathSegment(url);  _matrixParamSet=_uriBuilder.addPathSegment("system");  _matrixParamSet=_uriBuilder.addPathSegment("configuration");  _templateAndMatrixParameterValues=new HashMap<String,Object>();}  }
class C{  @DSComment("OS Bundle data structure") @DSSafe(DSCat.DATA_STRUCTURE) @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.463 -0500",hash_original_method="48338BC49C4A94D5C3F73368CEF11822",hash_generated_method="40E5D56C660E674AEAC1983F06C125A3") public void putShort(String key,short value){  unparcel();  mMap.put(key,value);}  }
class C{  private static void read(IgniteFileSystem fs,IgfsPath path) throws IgniteException, IOException {  assert fs != null;  assert path != null;  assert fs.info(path).isFile();  byte[] data=new byte[(int)fs.info(path).length()];  try (IgfsInputStream in=fs.open(path)){    in.read(data);  }   System.out.println();  System.out.println(">>> Read data from " + path + ": "+ Arrays.toString(data));}  }
class C{  @Override public void run(){  try {    logger.info("Beginning Code Verification. Echoing environmental data...");    echoEnvironment();    logger.info("Starting Code Verification in 5 seconds...");    Thread.sleep(5 * 1000);    logger.info("Transferring into Autonomous... (Switching to Teleop in 15 seconds)");    SimulationData.currentState=RobotState.AUTONOMOUS;    Thread.sleep(15 * 1000);    logger.info("Transferring into Teleoperated... (Switching to Disabled in 1 minute)");    SimulationData.currentState=RobotState.TELEOP;    Thread.sleep(60 * 1000);    logger.info("Disabling Robot... (Shutting Down in 10 seconds)");    SimulationData.currentState=RobotState.DISABLED;    Thread.sleep(10 * 1000);    logger.info("Code Verification Successful! Shutting Down...");    Toast.getToast().shutdownSafely();  } catch (  Exception e) {    logger.error("Exception encountered during verification: " + e);    logger.exception(e);    Toast.getToast().shutdownCrash();  }}  }
class C{  protected void checkLoopExplosionIteration(MethodScope methodScope,LoopScope loopScope){  throw shouldNotReachHere("when subclass uses loop explosion, it needs to implement this method");}  }
class C{  public Builder toBuilder(){  return newBuilder().readRoles(readRoles).writeRoles(writeRoles).deleteRoles(deleteRoles).metaReadRoles(metaReadRoles).metaWriteRoles(metaWriteRoles);}  }
class C{  public ClassPath(){  String syscp=System.getProperty("sun.boot.class.path");  String envcp=System.getProperty("env.class.path");  if (envcp == null)   envcp=".";  String cp=syscp + File.pathSeparator + envcp;  init(cp);}  }
class C{  public JarInfo loadJar() throws IOException {  ZipInputStream zis=null;  Manifest mf=null;  boolean empty=true;  try {    zis=new ZipInputStream(jarStream);    ZipEntry ent=null;    while ((ent=zis.getNextEntry()) != null) {      empty=false;      String name=ent.getName();      if (Manifest.isManifestName(name)) {        ByteArrayOutputStream baos=new ByteArrayOutputStream();        byte buffer[]=new byte[1024];        for (; ; ) {          int len=zis.read(buffer);          if (len < 0) {            break;          }          baos.write(buffer,0,len);        }        byte[] buf=baos.toByteArray();        mf=new Manifest(buf);      }    }  } catch (  IOException ex) {    throw ex;  }catch (  Throwable th) {    th.printStackTrace();    throw new IOException("loadJar caught: " + th);  } finally {    if (zis != null) {      try {        zis.close();      } catch (      Exception ex) {      }    }  }  if (empty) {    throw new IOException("JAR file is corrupt or empty");  }  JarInfo ji=createJarInfo(mf);  return ji;}  }
class C{  public String detect() throws LangDetectException {  ArrayList<Language> probabilities=getProbabilities();  if (probabilities.size() > 0)   return probabilities.get(0).lang;  return UNKNOWN_LANG;}  }
class C{  public void deleteAttributeAt(int columnIndex,boolean notify){  if ((columnIndex > 0) && (columnIndex < getColumnCount())) {    if (!m_IgnoreChanges) {      addUndoPoint();    }    m_Data.deleteAttributeAt(columnIndex - 1);    if (notify) {      notifyListener(new TableModelEvent(this,TableModelEvent.HEADER_ROW));    }  }}  }
class C{  public void fireGenerateEvent(int eventType,String data){}  }
class C{  public HessianMethodSerializationException(Throwable cause){  super(cause);}  }
class C{  public R scan(TreePath path,P p){  this.path=path;  try {    return path.getLeaf().accept(this,p);  }  finally {    this.path=null;  }}  }
class C{  @Override public boolean handles(Class cls){  return true;}  }
class C{  public MemoryDocValuesFormat(float acceptableOverheadRatio){  super("Memory");  this.acceptableOverheadRatio=acceptableOverheadRatio;}  }
class C{  public void scale(int width,int height){  image=Display.impl.scale(image,width,height);}  }
class C{  private void generateStructure(jplagWebService.server.Option usr_opt,String argsInString) throws JPlagException {  Vector<String> vec=new Vector<String>();  vec.add("JPlag");  vec.add("-vp");  vec.add("-vq");  if (usr_opt.isReadSubdirs())   vec.add("-s");  if (isSet(usr_opt.getPathToFiles())) {    vec.add("-S");    vec.add(usr_opt.getPathToFiles());  }  vec.add("-m");  String tmpmatch=usr_opt.getStoreMatches();  if (!isSet(tmpmatch)) {    vec.add(DEFAULT_STORABLE + "");  } else {    int index=tmpmatch.indexOf("%");    try {      if (index != -1) {        tmpmatch=tmpmatch.substring(0,index);        int percent=Integer.parseInt(tmpmatch);        if (percent > 100) {          throw new JPlagException("optionsException","Illegal store matches option specified!","There can't be a similarity bigger than 100%!");        }        tmpmatch+="%";      } else {        int nummatches=Integer.parseInt(tmpmatch);        if (nummatches > MAX_STORABLE)         nummatches=MAX_STORABLE;        if (nummatches < MIN_STORABLE)         nummatches=MIN_STORABLE;        tmpmatch=nummatches + "";      }    } catch (    NumberFormatException ex) {      throw new JPlagException("optionsException","Illegal store matches option specified!","Please check the usage function for correct " + "store_matches format");    }    vec.add(tmpmatch);  }  vec.add("-compmode");  if (usr_opt.getComparisonMode() == null)   vec.add(jplag.options.Options.COMPMODE_NORMAL + ""); else   vec.add(usr_opt.getComparisonMode().toString());  vec.add("-clang");  vec.add(usr_opt.getCountryLang());  if (usr_opt.getSuffixes().length != 0) {    vec.add("-p");    String str="";    String[] suffixes=usr_opt.getSuffixes();    for (int i=0; i < suffixes.length; i++) {      str+=suffixes[i];      if (i != suffixes.length - 1)       str+=",";    }    vec.add(str);  }  if (isSet(usr_opt.getBasecodeDir())) {    vec.add("-bc");    vec.add(usr_opt.getBasecodeDir());  }  if (isSet(usr_opt.getClustertype())) {    vec.add("-clustertype");    vec.add(usr_opt.getClustertype());  }  String language=usr_opt.getLanguage();  int languagenum;  for (languagenum=0; languagenum < JPlagTypImpl.languageInfos.length; languagenum++) {    if (JPlagTypImpl.languageInfos[languagenum].getName().equals(language)) {      vec.add("-l");      vec.add(language);      break;    }  }  if (languagenum == JPlagTypImpl.languageInfos.length) {    System.out.println("Wrong language specified: " + language);    throw new JPlagException("optionsException","Illegal language specified!","Use getServerInfo to see which languages are supported " + "and how they are spelled!");  }  int mintoklen=usr_opt.getMinimumMatchLength();  if (mintoklen <= 0)   mintoklen=JPlagTypImpl.languageInfos[languagenum].getDefMinMatchLen();  vec.add("-t");  vec.add(mintoklen + "");  String submissiondir=submissionID + username;  String result_dir=JPLAG_RESULTS_DIRECTORY + File.separator + submissiondir;  vec.add("-r");  vec.add(result_dir);  vec.add("-o");  File file12s=new File(result_dir);  if (!(file12s.exists()))   file12s.mkdir();  String tmp11st=result_dir + File.separator + PARSERLOG;  vec.add(tmp11st);  vec.add("-d");  vec.add(usr_opt.getOriginalDir());  vec.add("-title");  vec.add(usr_opt.getTitle());  vec.add(JPLAG_ENTRIES_DIRECTORY + File.separator + submissiondir);  try {    String[] args=new String[vec.size()];    for (int i=0; i < args.length; i++)     args[i]=vec.elementAt(i);    options=new jplag.options.CommandLineOptions(args,argsInString);    getDecorator().add(options.getState(),options.getProgress(),"");  } catch (  jplag.ExitException e) {    throw new JPlagException("invalidOptionsException",e.getReport(),"Check your options");  }}  }
class C{  public final boolean canBeSeenBy(Scope scope){  if (isPublic())   return true;  SourceTypeBinding invocationType=scope.enclosingSourceType();  if (invocationType == this)   return true;  if (invocationType == null)   return !isPrivate() && scope.getCurrentPackage() == this.fPackage;  if (isProtected()) {    if (invocationType.fPackage == this.fPackage)     return true;    TypeBinding declaringClass=enclosingType();    if (declaringClass == null)     return false;    declaringClass=declaringClass.erasure();    TypeBinding currentType=invocationType.erasure();    do {      if (declaringClass == invocationType)       return true;      if (currentType.findSuperTypeOriginatingFrom(declaringClass) != null)       return true;      currentType=currentType.enclosingType();    } while (currentType != null);    return false;  }  if (isPrivate()) {    ReferenceBinding outerInvocationType=invocationType;    ReferenceBinding temp=outerInvocationType.enclosingType();    while (temp != null) {      outerInvocationType=temp;      temp=temp.enclosingType();    }    ReferenceBinding outerDeclaringClass=(ReferenceBinding)erasure();    temp=outerDeclaringClass.enclosingType();    while (temp != null) {      outerDeclaringClass=temp;      temp=temp.enclosingType();    }    return outerInvocationType == outerDeclaringClass;  }  return invocationType.fPackage == this.fPackage;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  @NamespacePermissions({@NamespacePermission(fields="#request.businessObjectDataNotificationRegistrationKey.namespace",permissions=NamespacePermissionEnum.WRITE),@NamespacePermission(fields="#request.businessObjectDataNotificationFilter.namespace",permissions=NamespacePermissionEnum.READ),@NamespacePermission(fields="#request.jobActions.![namespace]",permissions=NamespacePermissionEnum.EXECUTE)}) private void mockMethod(BusinessObjectDataNotificationRegistrationCreateRequest request){}  }
class C{  private void addField(MetaClass metaClass,MetaProperty metaProperty,Entity item,FieldGroup fieldGroup,boolean required,boolean custom,boolean readOnly,Collection<FieldGroup.FieldConfig> customFields){  if (!attrViewPermitted(metaClass,metaProperty))   return;  if ((metaProperty.getType() == MetaProperty.Type.COMPOSITION || metaProperty.getType() == MetaProperty.Type.ASSOCIATION) && !entityOpPermitted(metaProperty.getRange().asClass(),EntityOp.READ))   return;  FieldGroup.FieldConfig field=new FieldGroup.FieldConfig(metaProperty.getName());  String caption=getPropertyCaption(metaClass,metaProperty);  field.setCaption(caption);  field.setType(metaProperty.getJavaType());  field.setWidth(themeConstants.get("cuba.gui.EntityInspectorEditor.field.width"));  field.setCustom(custom);  field.setRequired(required);  field.setEditable(!readOnly);  field.setWidth("100%");  if (requireTextArea(metaProperty,item)) {    Element root=DocumentHelper.createElement("textArea");    root.addAttribute("rows","3");    field.setXmlDescriptor(root);  }  if (focusFieldId == null && !readOnly) {    focusFieldId=field.getId();    focusFieldGroup=fieldGroup;  }  if (required) {    MessageTools messageTools=AppBeans.get(MessageTools.NAME);    field.setRequiredError(messageTools.getDefaultRequiredMessage(metaClass,metaProperty.getName()));  }  fieldGroup.addField(field);  if (custom)   customFields.add(field);}  }
class C{  public static void pushParameter(double o){  parametersDouble.push(o);}  }
class C{  public static SelectorExtractor selector(String query,int eq){  return new SelectorExtractor(query,eq);}  }
class C{  public Matrix3f multLocal(float scale){  m00*=scale;  m01*=scale;  m02*=scale;  m10*=scale;  m11*=scale;  m12*=scale;  m20*=scale;  m21*=scale;  m22*=scale;  return this;}  }
class C{  private int startFrame(final int offset,final int nLocal,final int nStack){  int n=3 + nLocal + nStack;  if (frame == null || frame.length < n) {    frame=new int[n];  }  frame[0]=offset;  frame[1]=nLocal;  frame[2]=nStack;  return 3;}  }
class C{  public static <T extends Date>String dateTimeFrom(T dateTime){  checkNotNull(dateTime);  return dateTimeFrom(new DateTime(dateTime));}  }
class C{  public StringBuilder format(final StringBuilder sb,final float w){  final int initPosition=sb.length();  if (Float.isNaN(w)) {    sb.append("NaN");  } else   if (Float.isInfinite(w)) {    sb.append(w < 0.0 ? "-Infinity" : "Infinity");  } else {    sb.append(mLocalFormat.format(w));  }  final int currLength=sb.length() - initPosition;  if (currLength == mLength) {    return sb;  }  if (currLength > mLength) {    sb.insert(initPosition,'#');    sb.append('#');  } else {    sb.insert(initPosition,mPadding,0,mLength - currLength);    assert sb.length() - initPosition == mLength;  }  return sb;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private void openCategorySelection(){  CategorySelectionDialogFragment categorySelectionDialogFragment=CategorySelectionDialogFragment.newInstance(categories);  categorySelectionDialogFragment.show(getChildFragmentManager(),"CategorySelectionDialogFragment");}  }
class C{  private TaskList pauseMirrors(URI id,String sync,URI copyID){  Volume sourceVolume=queryVolumeResource(id);  ArgValidator.checkEntity(sourceVolume,id,true);  StringSet mirrors=sourceVolume.getMirrors();  if (mirrors == null || mirrors.isEmpty()) {    throw APIException.badRequests.invalidParameterVolumeHasNoContinuousCopies(sourceVolume.getId());  }  ArrayList<BlockMirror> mirrorList=null;  if (copyID != null) {    BlockMirror mirror=queryMirror(copyID);    ArgValidator.checkEntity(mirror,copyID,true);    if (!mirror.getSource().getURI().equals(id)) {      throw APIException.badRequests.invalidParameterBlockCopyDoesNotBelongToVolume(copyID,id);    } else {      mirrorList=new ArrayList();      mirrorList.add(mirror);    }  }  if (sync != null) {    ArgValidator.checkFieldValueFromArrayIgnoreCase(sync,ProtectionOp.SYNC.getRestOp(),TRUE_STR,FALSE_STR);  }  Boolean syncParam=Boolean.parseBoolean(sync);  String task=UUID.randomUUID().toString();  StorageSystem device=_dbClient.queryObject(StorageSystem.class,sourceVolume.getStorageController());  BlockServiceApi blockServiceApi=getBlockServiceImpl("mirror");  auditOp(OperationTypeEnum.FRACTURE_VOLUME_MIRROR,true,AuditLogManager.AUDITOP_BEGIN,mirrorList == null ? mirrors : mirrorList,sync);  return blockServiceApi.pauseNativeContinuousCopies(device,sourceVolume,mirrorList,syncParam,task);}  }
class C{  public static int indexOf(boolean[] array,boolean[] sub){  return indexOf(array,sub,0,array.length);}  }
class C{  public static void addCmdDirToPathEnv(Path cmdExePath,ProcessBuilder pb){  Location cmdLoc=Location.createValidOrNull(cmdExePath);  if (cmdLoc == null) {    return;  }  cmdLoc=cmdLoc.getParent();  if (cmdLoc == null) {    return;  }  addLocationToPathEnv(cmdLoc,pb);}  }
class C{  public boolean replaceIn(final StringBuffer source){  if (source == null) {    return false;  }  return replaceIn(source,0,source.length());}  }
class C{  ClientResponse put(URI uri,String body){  return setResourceHeaders(_client.resource(uri)).type(MediaType.TEXT_XML).put(ClientResponse.class,body);}  }
class C{  public static String inflate(String name){  return inflate(name,gPrefix);}  }
class C{  public CProjectViewGenerator(final SQLProvider provider,final INaviProject project){  m_provider=Preconditions.checkNotNull(provider,"IE00272: provider argument can not be null");  m_project=Preconditions.checkNotNull(project,"IE00452: project argument can not be null");}  }
class C{  public Vset checkAssignOp(Environment env,Context ctx,Vset vset,Hashtable exp,Expression outside){  vset=right.checkAssignOp(env,ctx,vset,exp,outside);  type=right.type;  return vset;}  }
class C{  private void initializeInDir(int x,int y,int dir){  initializeHex(Coords.xInDir(x,y,dir),Coords.yInDir(x,y,dir));}  }
class C{  private PhysicalNAS findPhysicalNasByNativeId(final StorageSystem system,DbClient dbClient,String nativeId){  URIQueryResultList results=new URIQueryResultList();  PhysicalNAS physicalNas=null;  String nasNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,nativeId,NativeGUIDGenerator.PHYSICAL_NAS);  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getPhysicalNasByNativeGuidConstraint(nasNativeGuid),results);  Iterator<URI> iter=results.iterator();  while (iter.hasNext()) {    PhysicalNAS tmpNas=dbClient.queryObject(PhysicalNAS.class,iter.next());    if (tmpNas != null && !tmpNas.getInactive()) {      physicalNas=tmpNas;      _logger.info("found physical NAS {}",physicalNas.getNativeGuid() + ":" + physicalNas.getNasName());      break;    }  }  return physicalNas;}  }
class C{  @Override public void scan(InH3Amp in,PathH3Amp path,Object[] values){  int ch=read();switch (ch) {case 0xd0:    readDefinition(in);  scan(in,path,values);return;case 0xd1:case 0xd2:case 0xd3:case 0xd4:case 0xd5:case 0xd6:case 0xd7:case 0xd8:case 0xd9:case 0xda:case 0xdb:case 0xdc:case 0xdd:case 0xde:case 0xdf:{int id=ch - 0xd0;in.serializer(id).scan(this,path,in,values);return;}case 0xe0:case 0xe1:case 0xe2:case 0xe3:case 0xe4:case 0xe5:case 0xe6:case 0xe7:case 0xe8:case 0xe9:case 0xea:case 0xeb:case 0xec:case 0xed:case 0xee:case 0xef:{int id=(int)readLong(ch - 0xe0,4);in.serializer(id).scan(this,path,in,values);return;}default :throw error(L.l("Unexpected opcode 0x{0} while scanning for {1}",Integer.toHexString(ch),path));}}  }
class C{  private ServerUpdateInfo readServerUpdateInfoFromFile(Context context){  String uniqueServerId=getServerUniqueId();  Object serializedServerInfoObject=SerializableManager.readSerializedObject(context,SERIALIZE_UPDATE_FILE_PREFIX + uniqueServerId + SERIALIZE_CONFIG_FILE_EXTENSION);  if (serializedServerInfoObject != null && serializedServerInfoObject instanceof ServerUpdateInfo) {    return (ServerUpdateInfo)serializedServerInfoObject;  } else   return null;}  }
class C{  @Override public long skip(long byteCount){  Preconditions.checkArgument(byteCount >= 0);  int skipped=Math.min((int)byteCount,available());  mOffset+=skipped;  return skipped;}  }
class C{  public static String unescapeMySQLString(String s) throws IllegalArgumentException {  char chars[]=s.toCharArray();  if (chars.length < 2 || chars[0] != chars[chars.length - 1] || (chars[0] != '\'' && chars[0] != '"')) {    throw new IllegalArgumentException("not a valid MySQL string: " + s);  }  int j=1;  int f=0;  for (int i=1; i < chars.length - 1; i++) {    if (f == 0) {      if (chars[i] == '\\') {        f=1;      } else       if (chars[i] == chars[0]) {        f=2;      } else {        chars[j++]=chars[i];      }    } else     if (f == 1) {switch (chars[i]) {case '0':        chars[j++]='\0';      break;case '\'':    chars[j++]='\'';  break;case '"':chars[j++]='"';break;case 'b':chars[j++]='\b';break;case 'n':chars[j++]='\n';break;case 'r':chars[j++]='\r';break;case 't':chars[j++]='\t';break;case 'z':chars[j++]='\032';break;case '\\':chars[j++]='\\';break;default :chars[j++]=chars[i];break;}f=0;} else {if (chars[i] != chars[0]) {throw new IllegalArgumentException("not a valid MySQL string: " + s);}chars[j++]=chars[0];f=0;}}if (f != 0) {throw new IllegalArgumentException("not a valid MySQL string: " + s);}return new String(chars,1,j - 1);}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  delayForNfs();  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Running Parser HMMER2 Output Step for proteins " + stepInstance.getBottomProtein() + " to "+ stepInstance.getTopProtein());  }  InputStream is=null;  try {    final String hmmerOutputFilePath=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,hmmerOutputFilePathTemplate);    is=new FileInputStream(hmmerOutputFilePath);    final Set<RawProtein<T>> parsedResults=parser.parse(is);    rawMatchDAO.insertProteinMatches(parsedResults);  } catch (  IOException e) {    throw new IllegalStateException("IOException thrown when attempting to read " + hmmerOutputFilePathTemplate,e);  } finally {    if (is != null) {      try {        is.close();      } catch (      IOException e) {        LOGGER.error("Duh - parsed OK, but can't close the input stream?",e);      }    }  }}  }
class C{  public static ImmutableList<Statement> siteLink(String entityId,String link,String language,boolean outOfOrder){  if (outOfOrder) {    return ImmutableList.of(statement(link,SchemaDotOrg.IN_LANGUAGE,new LiteralImpl(language)),statement(link,SchemaDotOrg.ABOUT,entityId),statement(link,RDF.TYPE,SchemaDotOrg.ARTICLE));  }  return ImmutableList.of(statement(link,RDF.TYPE,SchemaDotOrg.ARTICLE),statement(link,SchemaDotOrg.ABOUT,entityId),statement(link,SchemaDotOrg.IN_LANGUAGE,new LiteralImpl(language)));}  }
class C{  private IDocument acquireDocument(final IProgressMonitor monitor) throws CoreException {  if (fCount > 0)   return fBuffer.getDocument();  final ITextFileBufferManager manager=FileBuffers.getTextFileBufferManager();  final IPath path=fFile.getFullPath();  manager.connect(path,LocationKind.IFILE,monitor);  fCount++;  fBuffer=manager.getTextFileBuffer(path,LocationKind.IFILE);  final IDocument document=fBuffer.getDocument();  fContentStamp=ContentStamps.get(fFile,document);  return document;}  }
class C{  public BOSHPacketReader(BOSHConnection connection){  this.connection=connection;}  }
class C{  private double[] calculateValues(Function function,double[][] points){  double values[]=new double[points.length];  for (int i=0; i < points.length; i++) {    values[i]=function.valueAt(points[i]);  }  return values;}  }
class C{  public boolean equalsStatusCode(StatusCode statusCode){  return isStatusCode(statusCode.getValue());}  }
class C{  protected int dismissPermissionRationale(){  if (rationaleView != null && rationaleView.getVisibility() == View.VISIBLE) {    rationaleView.setVisibility(View.GONE);    return (int)rationaleView.getTag();  }  return 0;}  }
class C{  private static String toFieldName(String node){  return node.toUpperCase().replaceAll("-","_");}  }
class C{  public void ensureStartedAndUpdateRegisteredTypes(){  mStarted=true;  ensureGcmIsInitialized();  mEnableSessionInvalidationsTimer.resume();  HashSet<Integer> typesToRegister=new HashSet<Integer>();  typesToRegister.addAll(ProfileSyncService.get().getPreferredDataTypes());  if (!mSessionInvalidationsEnabled) {    typesToRegister.remove(ModelType.SESSIONS);    typesToRegister.remove(ModelType.FAVICON_TRACKING);    typesToRegister.remove(ModelType.FAVICON_IMAGES);  }  Intent registerIntent=InvalidationIntentProtocol.createRegisterIntent(ChromeSigninController.get(mContext).getSignedInUser(),typesToRegister);  registerIntent.setClass(mContext,InvalidationClientService.class);  mContext.startService(registerIntent);}  }
class C{  public void testMovePointRightException(){  String a="12312124789874829887348723648726347429808779810457634781384756794987";  int aScale=Integer.MAX_VALUE;  int shift=-18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  try {    aNumber.movePointRight(shift);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  private void validate(){  if (values != null)   return;  values=new Values();  final AppContext ctx=AppContext.getAppContext();  Map<String,TreeMap<String,Object>> compiledDefaults=(Map<String,TreeMap<String,Object>>)ctx.get("SeaGlassStyle.defaults");  if (compiledDefaults == null) {    compiledDefaults=new HashMap<String,TreeMap<String,Object>>();    compileDefaults(compiledDefaults,UIManager.getDefaults());    UIDefaults lafDefaults=UIManager.getLookAndFeelDefaults();    compileDefaults(compiledDefaults,lafDefaults);    PropertyChangeListener pcl=(PropertyChangeListener)ctx.get("SeaGlassStyle.defaults.pcl");    if (pcl == null) {      pcl=new DefaultsListener();      UIManager.getDefaults().addPropertyChangeListener(pcl);      UIManager.getLookAndFeelDefaults().addPropertyChangeListener(pcl);      ctx.put("SeaGlassStyle.defaults.pcl",pcl);    }    ctx.put("SeaGlassStyle.defaults",compiledDefaults);  }  TreeMap<String,Object> defaults=compiledDefaults.get(prefix);  if (defaults == null) {    defaults=new TreeMap<String,Object>();  }  if (component != null) {    Object o=component.getClientProperty("SeaGlass.Overrides");    if (o instanceof UIDefaults) {      Object i=component.getClientProperty("SeaGlass.Overrides.InheritDefaults");      boolean inherit=i instanceof Boolean ? (Boolean)i : true;      UIDefaults d=(UIDefaults)o;      TreeMap<String,Object> map=new TreeMap<String,Object>();      for (      Object obj : d.keySet()) {        if (obj instanceof String) {          String key=(String)obj;          if (key.startsWith(prefix)) {            map.put(key,d.get(key));          }        }      }      if (inherit) {        defaults.putAll(map);      } else {        defaults=map;      }    }  }  init(values,defaults);}  }
class C{  public static double[][] randomUniform(int m,int n,double min,double max){  double[][] A=new double[m][n];  for (int i=0; i < A.length; i++)   for (int j=0; j < A[i].length; j++)   A[i][j]=Random.uniform(min,max);  return A;}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + count;  result=prime * result + offsetValue;  result=prime * result + tag;  result=prime * result + ((type == null) ? 0 : type.hashCode());  return result;}  }
class C{  protected String doIt() throws java.lang.Exception {  StringBuffer sql=null;  int no=0;  String clientCheck=getWhereClause();  if (m_deleteOldImported) {    sql=new StringBuffer("DELETE I_BPartner " + "WHERE I_IsImported='Y'").append(clientCheck);    no=DB.executeUpdateEx(sql.toString(),get_TrxName());    log.fine("Delete Old Impored =" + no);  }  sql=new StringBuffer("UPDATE I_BPartner " + "SET AD_Client_ID = COALESCE (AD_Client_ID, ").append(m_AD_Client_ID).append(")," + " AD_Org_ID = COALESCE (AD_Org_ID, 0)," + " IsActive = COALESCE (IsActive, 'Y'),"+ " Created = COALESCE (Created, SysDate),"+ " CreatedBy = COALESCE (CreatedBy, 0),"+ " Updated = COALESCE (Updated, SysDate),"+ " UpdatedBy = COALESCE (UpdatedBy, 0),"+ " I_ErrorMsg = ' ',"+ " I_IsImported = 'N' "+ "WHERE I_IsImported<>'Y' OR I_IsImported IS NULL");  no=DB.executeUpdateEx(sql.toString(),get_TrxName());  log.fine("Reset=" + no);  ModelValidationEngine.get().fireImportValidate(this,null,null,ImportValidator.TIMING_BEFORE_VALIDATE);  sql=new StringBuffer("UPDATE I_BPartner i " + "SET GroupValue=(SELECT MAX(Value) FROM C_BP_Group g WHERE g.IsDefault='Y'" + " AND g.AD_Client_ID=i.AD_Client_ID) ");  sql.append("WHERE GroupValue IS NULL AND C_BP_Group_ID IS NULL" + " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdateEx(sql.toString(),get_TrxName());  log.fine("Set Group Default=" + no);  sql=new StringBuffer("UPDATE I_BPartner i " + "SET C_BP_Group_ID=(SELECT C_BP_Group_ID FROM C_BP_Group g" + " WHERE i.GroupValue=g.Value AND g.AD_Client_ID=i.AD_Client_ID) "+ "WHERE C_BP_Group_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdateEx(sql.toString(),get_TrxName());  log.fine("Set Group=" + no);  sql=new StringBuffer("UPDATE I_BPartner " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Group, ' " + "WHERE C_BP_Group_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdateEx(sql.toString(),get_TrxName());  log.config("Invalid Group=" + no);  sql=new StringBuffer("UPDATE I_BPartner i " + "SET C_Country_ID=(SELECT C_Country_ID FROM C_Country c" + " WHERE i.CountryCode=c.CountryCode AND c.AD_Client_ID IN (0, i.AD_Client_ID)) "+ "WHERE C_Country_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdateEx(sql.toString(),get_TrxName());  log.fine("Set Country=" + no);  sql=new StringBuffer("UPDATE I_BPartner " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Country, ' " + "WHERE C_Country_ID IS NULL AND (City IS NOT NULL OR Address1 IS NOT NULL)"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdateEx(sql.toString(),get_TrxName());  log.config("Invalid Country=" + no);  sql=new StringBuffer("UPDATE I_BPartner i " + "Set RegionName=(SELECT MAX(Name) FROM C_Region r" + " WHERE r.IsDefault='Y' AND r.C_Country_ID=i.C_Country_ID"+ " AND r.AD_Client_ID IN (0, i.AD_Client_ID)) ");  sql.append("WHERE RegionName IS NULL AND C_Region_ID IS NULL" + " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdateEx(sql.toString(),get_TrxName());  log.fine("Set Region Default=" + no);  sql=new StringBuffer("UPDATE I_BPartner i " + "Set C_Region_ID=(SELECT C_Region_ID FROM C_Region r" + " WHERE r.Name=i.RegionName AND r.C_Country_ID=i.C_Country_ID"+ " AND r.AD_Client_ID IN (0, i.AD_Client_ID)) "+ "WHERE C_Region_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdateEx(sql.toString(),get_TrxName());  log.fine("Set Region=" + no);  sql=new StringBuffer("UPDATE I_BPartner i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Region, ' " + "WHERE C_Region_ID IS NULL "+ " AND EXISTS (SELECT * FROM C_Country c"+ " WHERE c.C_Country_ID=i.C_Country_ID AND c.HasRegion='Y')"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdateEx(sql.toString(),get_TrxName());  log.config("Invalid Region=" + no);  sql=new StringBuffer("UPDATE I_BPartner i " + "SET C_Greeting_ID=(SELECT C_Greeting_ID FROM C_Greeting g" + " WHERE i.BPContactGreeting=g.Name AND g.AD_Client_ID IN (0, i.AD_Client_ID)) "+ "WHERE C_Greeting_ID IS NULL AND BPContactGreeting IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdateEx(sql.toString(),get_TrxName());  log.fine("Set Greeting=" + no);  sql=new StringBuffer("UPDATE I_BPartner i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Greeting, ' " + "WHERE C_Greeting_ID IS NULL AND BPContactGreeting IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdateEx(sql.toString(),get_TrxName());  log.config("Invalid Greeting=" + no);  sql=new StringBuffer("UPDATE I_BPartner i " + "SET C_BPartner_ID=" + "(SELECT C_BPartner_ID FROM AD_User u "+ "WHERE i.EMail=u.EMail AND u.AD_Client_ID=i.AD_Client_ID) "+ "WHERE i.EMail IS NOT NULL AND I_IsImported='N'").append(clientCheck);  no=DB.executeUpdateEx(sql.toString(),get_TrxName());  log.fine("Found EMail User=" + no);  sql=new StringBuffer("UPDATE I_BPartner i " + "SET AD_User_ID=" + "(SELECT AD_User_ID FROM AD_User u "+ "WHERE i.EMail=u.EMail AND u.AD_Client_ID=i.AD_Client_ID) "+ "WHERE i.EMail IS NOT NULL AND I_IsImported='N'").append(clientCheck);  no=DB.executeUpdateEx(sql.toString(),get_TrxName());  log.fine("Found EMail User=" + no);  sql=new StringBuffer("UPDATE I_BPartner i " + "SET C_BPartner_ID=(SELECT C_BPartner_ID FROM C_BPartner p" + " WHERE i.Value=p.Value AND p.AD_Client_ID=i.AD_Client_ID) "+ "WHERE C_BPartner_ID IS NULL AND Value IS NOT NULL"+ " AND I_IsImported='N'").append(clientCheck);  no=DB.executeUpdateEx(sql.toString(),get_TrxName());  log.fine("Found BPartner=" + no);  sql=new StringBuffer("UPDATE I_BPartner i " + "SET AD_User_ID=(SELECT AD_User_ID FROM AD_User c" + " WHERE i.ContactName=c.Name AND i.C_BPartner_ID=c.C_BPartner_ID AND c.AD_Client_ID=i.AD_Client_ID) "+ "WHERE C_BPartner_ID IS NOT NULL AND AD_User_ID IS NULL AND ContactName IS NOT NULL"+ " AND I_IsImported='N'").append(clientCheck);  no=DB.executeUpdateEx(sql.toString(),get_TrxName());  log.fine("Found Contact=" + no);  sql=new StringBuffer("UPDATE I_BPartner i " + "SET C_BPartner_Location_ID=(SELECT C_BPartner_Location_ID" + " FROM C_BPartner_Location bpl INNER JOIN C_Location l ON (bpl.C_Location_ID=l.C_Location_ID)"+ " WHERE i.C_BPartner_ID=bpl.C_BPartner_ID AND bpl.AD_Client_ID=i.AD_Client_ID"+ " AND (i.Address1=l.Address1 OR (i.Address1 IS NULL AND l.Address1 IS NULL))"+ " AND (i.Address2=l.Address2 OR (i.Address2 IS NULL AND l.Address2 IS NULL))"+ " AND (i.City=l.City OR (i.City IS NULL AND l.City IS NULL))"+ " AND (i.Postal=l.Postal OR (i.Postal IS NULL AND l.Postal IS NULL))"+ " AND (i.Postal_Add=l.Postal_Add OR (l.Postal_Add IS NULL AND l.Postal_Add IS NULL))"+ " AND i.C_Region_ID=l.C_Region_ID AND i.C_Country_ID=l.C_Country_ID) "+ "WHERE C_BPartner_ID IS NOT NULL AND C_BPartner_Location_ID IS NULL"+ " AND I_IsImported='N'").append(clientCheck);  no=DB.executeUpdateEx(sql.toString(),get_TrxName());  log.fine("Found Location=" + no);  sql=new StringBuffer("UPDATE I_BPartner i " + "SET R_InterestArea_ID=(SELECT R_InterestArea_ID FROM R_InterestArea ia " + "WHERE i.InterestAreaName=ia.Name AND ia.AD_Client_ID=i.AD_Client_ID) "+ "WHERE R_InterestArea_ID IS NULL AND InterestAreaName IS NOT NULL"+ " AND I_IsImported='N'").append(clientCheck);  no=DB.executeUpdateEx(sql.toString(),get_TrxName());  log.fine("Set Interest Area=" + no);  sql=new StringBuffer("UPDATE I_BPartner " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Value is mandatory, ' " + "WHERE Value IS NULL "+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdateEx(sql.toString(),get_TrxName());  log.config("Value is mandatory=" + no);  ModelValidationEngine.get().fireImportValidate(this,null,null,ImportValidator.TIMING_AFTER_VALIDATE);  commitEx();  if (p_IsValidateOnly) {    return "Validated";  }  int noInsert=0;  int noUpdate=0;  sql=new StringBuffer("SELECT * FROM I_BPartner " + "WHERE I_IsImported='N'").append(clientCheck);  sql.append(" ORDER BY Value, I_BPartner_ID");  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    rs=pstmt.executeQuery();    String Old_BPValue="";    MBPartner bp=null;    MBPartnerLocation bpl=null;    while (rs.next()) {      String New_BPValue=rs.getString("Value");      X_I_BPartner impBP=new X_I_BPartner(getCtx(),rs,get_TrxName());      log.fine("I_BPartner_ID=" + impBP.getI_BPartner_ID() + ", C_BPartner_ID="+ impBP.getC_BPartner_ID()+ ", C_BPartner_Location_ID="+ impBP.getC_BPartner_Location_ID()+ ", AD_User_ID="+ impBP.getAD_User_ID());      if (!New_BPValue.equals(Old_BPValue)) {        bp=null;        if (impBP.getC_BPartner_ID() == 0) {          bp=new MBPartner(impBP);          ModelValidationEngine.get().fireImportValidate(this,impBP,bp,ImportValidator.TIMING_AFTER_IMPORT);          setTypeOfBPartner(impBP,bp);          if (bp.save()) {            impBP.setC_BPartner_ID(bp.getC_BPartner_ID());            log.finest("Insert BPartner - " + bp.getC_BPartner_ID());            noInsert++;          } else {            sql=new StringBuffer("UPDATE I_BPartner i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||").append("'Cannot Insert BPartner, ' ").append("WHERE I_BPartner_ID=").append(impBP.getI_BPartner_ID());            DB.executeUpdateEx(sql.toString(),get_TrxName());            continue;          }        } else {          bp=new MBPartner(getCtx(),impBP.getC_BPartner_ID(),get_TrxName());          if (impBP.getName() != null) {            bp.setName(impBP.getName());            bp.setName2(impBP.getName2());          }          if (impBP.getDUNS() != null)           bp.setDUNS(impBP.getDUNS());          if (impBP.getTaxID() != null)           bp.setTaxID(impBP.getTaxID());          if (impBP.getNAICS() != null)           bp.setNAICS(impBP.getNAICS());          if (impBP.getDescription() != null)           bp.setDescription(impBP.getDescription());          if (impBP.getC_BP_Group_ID() != 0)           bp.setC_BP_Group_ID(impBP.getC_BP_Group_ID());          ModelValidationEngine.get().fireImportValidate(this,impBP,bp,ImportValidator.TIMING_AFTER_IMPORT);          setTypeOfBPartner(impBP,bp);          if (bp.save()) {            log.finest("Update BPartner - " + bp.getC_BPartner_ID());            noUpdate++;          } else {            sql=new StringBuffer("UPDATE I_BPartner i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||").append("'Cannot Update BPartner, ' ").append("WHERE I_BPartner_ID=").append(impBP.getI_BPartner_ID());            DB.executeUpdateEx(sql.toString(),get_TrxName());            continue;          }        }        bpl=null;        if (impBP.getC_BPartner_Location_ID() != 0) {          bpl=new MBPartnerLocation(getCtx(),impBP.getC_BPartner_Location_ID(),get_TrxName());          MLocation location=new MLocation(getCtx(),bpl.getC_Location_ID(),get_TrxName());          location.setC_Country_ID(impBP.getC_Country_ID());          location.setC_Region_ID(impBP.getC_Region_ID());          location.setCity(impBP.getCity());          location.setAddress1(impBP.getAddress1());          location.setAddress2(impBP.getAddress2());          location.setPostal(impBP.getPostal());          location.setPostal_Add(impBP.getPostal_Add());          if (!location.save())           log.warning("Location not updated"); else           bpl.setC_Location_ID(location.getC_Location_ID());          if (impBP.getPhone() != null)           bpl.setPhone(impBP.getPhone());          if (impBP.getPhone2() != null)           bpl.setPhone2(impBP.getPhone2());          if (impBP.getFax() != null)           bpl.setFax(impBP.getFax());          ModelValidationEngine.get().fireImportValidate(this,impBP,bpl,ImportValidator.TIMING_AFTER_IMPORT);          bpl.saveEx();        } else         if (impBP.getC_Country_ID() != 0 && impBP.getAddress1() != null && impBP.getCity() != null) {          MLocation location=new MLocation(getCtx(),impBP.getC_Country_ID(),impBP.getC_Region_ID(),impBP.getCity(),get_TrxName());          location.setAddress1(impBP.getAddress1());          location.setAddress2(impBP.getAddress2());          location.setPostal(impBP.getPostal());          location.setPostal_Add(impBP.getPostal_Add());          if (location.save())           log.finest("Insert Location - " + location.getC_Location_ID()); else {            rollback();            noInsert--;            sql=new StringBuffer("UPDATE I_BPartner i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||").append("'Cannot Insert Location, ' ").append("WHERE I_BPartner_ID=").append(impBP.getI_BPartner_ID());            DB.executeUpdateEx(sql.toString(),get_TrxName());            continue;          }          bpl=new MBPartnerLocation(bp);          bpl.setC_Location_ID(location.getC_Location_ID());          bpl.setPhone(impBP.getPhone());          bpl.setPhone2(impBP.getPhone2());          bpl.setFax(impBP.getFax());          ModelValidationEngine.get().fireImportValidate(this,impBP,bpl,ImportValidator.TIMING_AFTER_IMPORT);          if (bpl.save()) {            log.finest("Insert BP Location - " + bpl.getC_BPartner_Location_ID());            impBP.setC_BPartner_Location_ID(bpl.getC_BPartner_Location_ID());          } else {            rollback();            noInsert--;            sql=new StringBuffer("UPDATE I_BPartner i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||").append("'Cannot Insert BPLocation, ' ").append("WHERE I_BPartner_ID=").append(impBP.getI_BPartner_ID());            DB.executeUpdateEx(sql.toString(),get_TrxName());            continue;          }        }      }      Old_BPValue=New_BPValue;      MUser user=null;      if (impBP.getAD_User_ID() != 0) {        user=new MUser(getCtx(),impBP.getAD_User_ID(),get_TrxName());        if (user.getC_BPartner_ID() == 0)         user.setC_BPartner_ID(bp.getC_BPartner_ID()); else         if (user.getC_BPartner_ID() != bp.getC_BPartner_ID()) {          rollback();          noInsert--;          sql=new StringBuffer("UPDATE I_BPartner i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||").append("'BP of User <> BP, ' ").append("WHERE I_BPartner_ID=").append(impBP.getI_BPartner_ID());          DB.executeUpdateEx(sql.toString(),get_TrxName());          continue;        }        if (impBP.getC_Greeting_ID() != 0)         user.setC_Greeting_ID(impBP.getC_Greeting_ID());        String name=impBP.getContactName();        if (name == null || name.length() == 0)         name=impBP.getEMail();        user.setName(name);        if (impBP.getTitle() != null)         user.setTitle(impBP.getTitle());        if (impBP.getContactDescription() != null)         user.setDescription(impBP.getContactDescription());        if (impBP.getComments() != null)         user.setComments(impBP.getComments());        if (impBP.getPhone() != null)         user.setPhone(impBP.getPhone());        if (impBP.getPhone2() != null)         user.setPhone2(impBP.getPhone2());        if (impBP.getFax() != null)         user.setFax(impBP.getFax());        if (impBP.getEMail() != null)         user.setEMail(impBP.getEMail());        if (impBP.getBirthday() != null)         user.setBirthday(impBP.getBirthday());        if (bpl != null)         user.setC_BPartner_Location_ID(bpl.getC_BPartner_Location_ID());        ModelValidationEngine.get().fireImportValidate(this,impBP,user,ImportValidator.TIMING_AFTER_IMPORT);        if (user.save()) {          log.finest("Update BP Contact - " + user.getAD_User_ID());        } else {          rollback();          noInsert--;          sql=new StringBuffer("UPDATE I_BPartner i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||").append("'Cannot Update BP Contact, ' ").append("WHERE I_BPartner_ID=").append(impBP.getI_BPartner_ID());          DB.executeUpdateEx(sql.toString(),get_TrxName());          continue;        }      } else       if (impBP.getContactName() != null || impBP.getEMail() != null) {        user=new MUser(bp);        if (impBP.getC_Greeting_ID() != 0)         user.setC_Greeting_ID(impBP.getC_Greeting_ID());        String name=impBP.getContactName();        if (name == null || name.length() == 0)         name=impBP.getEMail();        user.setName(name);        user.setTitle(impBP.getTitle());        user.setDescription(impBP.getContactDescription());        user.setComments(impBP.getComments());        user.setPhone(impBP.getPhone());        user.setPhone2(impBP.getPhone2());        user.setFax(impBP.getFax());        user.setEMail(impBP.getEMail());        user.setBirthday(impBP.getBirthday());        if (bpl != null)         user.setC_BPartner_Location_ID(bpl.getC_BPartner_Location_ID());        ModelValidationEngine.get().fireImportValidate(this,impBP,user,ImportValidator.TIMING_AFTER_IMPORT);        if (user.save()) {          log.finest("Insert BP Contact - " + user.getAD_User_ID());          impBP.setAD_User_ID(user.getAD_User_ID());        } else {          rollback();          noInsert--;          sql=new StringBuffer("UPDATE I_BPartner i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||").append("'Cannot Insert BPContact, ' ").append("WHERE I_BPartner_ID=").append(impBP.getI_BPartner_ID());          DB.executeUpdateEx(sql.toString(),get_TrxName());          continue;        }      }      if (impBP.getR_InterestArea_ID() != 0 && user != null) {        MContactInterest ci=MContactInterest.get(getCtx(),impBP.getR_InterestArea_ID(),user.getAD_User_ID(),true,get_TrxName());        ci.saveEx();      }      impBP.setI_IsImported(true);      impBP.setProcessed(true);      impBP.setProcessing(false);      impBP.saveEx();      commitEx();    }    DB.close(rs,pstmt);  } catch (  SQLException e) {    rollback();    throw new DBException(e,sql.toString());  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;    sql=new StringBuffer("UPDATE I_BPartner " + "SET I_IsImported='N', Updated=SysDate " + "WHERE I_IsImported<>'Y'").append(clientCheck);    no=DB.executeUpdateEx(sql.toString(),get_TrxName());    addLog(0,null,new BigDecimal(no),"@Errors@");    addLog(0,null,new BigDecimal(noInsert),"@C_BPartner_ID@: @Inserted@");    addLog(0,null,new BigDecimal(noUpdate),"@C_BPartner_ID@: @Updated@");  }  return "";}  }
class C{  public CertificateParsingException(){  super();}  }
class C{  protected Resources fetchResourceFile(){  try {    if (resourceFile != null) {      return resourceFile;    }    String p=getResourceFilePath();    if (p.indexOf('.') > -1) {      return Resources.open(p);    }    Resources res=Resources.openLayered(p);    if (isKeepResourcesInRam()) {      resourceFile=res;    }    return res;  } catch (  IOException ex) {    ex.printStackTrace();    return null;  }}  }
class C{  public boolean add(Solution solution){  return data.add(solution);}  }
class C{  protected void parse(String url){  dbType=null;  host=null;  port=null;  dbName=null;  if (url.startsWith(MYSQL_PREFIX)) {    dbType="mysql";    host="localhost";    port="3306";    Matcher matcher=mysqlPattern.matcher(url);    if (matcher.matches()) {      if (matcher.group(1) != null && matcher.group(1).length() > 0)       host=matcher.group(1);      if (matcher.group(4) != null && matcher.group(4).length() > 0)       port=matcher.group(4);      dbName=matcher.group(5);    }  } else   if (url.startsWith(POSTGRESQL_PREFIX)) {    dbType="postgresql";    host="localhost";    port="5432";    Matcher matcher=postgresqlPattern.matcher(url);    if (matcher.matches()) {      if (matcher.group(3) != null)       host=matcher.group(3);      if (matcher.group(6) != null)       port=matcher.group(6);      dbName=matcher.group(7);    }  } else {  }}  }
class C{  public void testSetBitPositiveInside4(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=50;  byte rBytes[]={1,-128,56,100,-2,-76,93,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public DDFFieldDefinition findFieldDefn(String pszFieldName){  for (Iterator it=paoFieldDefns.iterator(); it.hasNext(); ) {    DDFFieldDefinition ddffd=(DDFFieldDefinition)it.next();    String pszThisName=ddffd.getName();    if (Debug.debugging("iso8211detail")) {      Debug.output("DDFModule.findFieldDefn(" + pszFieldName + ":"+ pszFieldName.length()+ ") checking against ["+ pszThisName+ ":"+ pszThisName.length()+ "]");    }    if (pszFieldName.equalsIgnoreCase(pszThisName)) {      return ddffd;    }  }  return null;}  }
class C{  public void show(StackablePath path){  dispatcher.dispatch(add(History.NAV_TYPE_MODAL,path));}  }
class C{  public static Pair<HistoricalIndexLookupStrategy,PollResultIndexingStrategy> determineIndexing(QueryGraph queryGraph,EventType polledViewType,EventType streamViewType,int polledViewStreamNum,int streamViewStreamNum){  QueryGraphValue queryGraphValue=queryGraph.getGraphValue(streamViewStreamNum,polledViewStreamNum);  QueryGraphValuePairHashKeyIndex hashKeysAndIndes=queryGraphValue.getHashKeyProps();  QueryGraphValuePairRangeIndex rangeKeysAndIndex=queryGraphValue.getRangeProps();  List<QueryGraphValueEntryHashKeyed> hashKeys=hashKeysAndIndes.getKeys();  String[] hashIndexes=hashKeysAndIndes.getIndexed();  List<QueryGraphValueEntryRange> rangeKeys=rangeKeysAndIndex.getKeys();  String[] rangeIndexes=rangeKeysAndIndex.getIndexed();  if (hashKeys.isEmpty() && rangeKeys.isEmpty()) {    QueryGraphValuePairInKWSingleIdx inKeywordSingles=queryGraphValue.getInKeywordSingles();    if (inKeywordSingles != null && inKeywordSingles.getIndexed().length != 0) {      String indexed=inKeywordSingles.getIndexed()[0];      QueryGraphValueEntryInKeywordSingleIdx lookup=inKeywordSingles.getKey().get(0);      HistoricalIndexLookupStrategyInKeywordSingle strategy=new HistoricalIndexLookupStrategyInKeywordSingle(streamViewStreamNum,lookup.getKeyExprs());      PollResultIndexingStrategyIndexSingle indexing=new PollResultIndexingStrategyIndexSingle(polledViewStreamNum,polledViewType,indexed);      return new Pair<HistoricalIndexLookupStrategy,PollResultIndexingStrategy>(strategy,indexing);    }    List<QueryGraphValuePairInKWMultiIdx> multis=queryGraphValue.getInKeywordMulti();    if (!multis.isEmpty()) {      QueryGraphValuePairInKWMultiIdx multi=multis.get(0);      HistoricalIndexLookupStrategyInKeywordMulti strategy=new HistoricalIndexLookupStrategyInKeywordMulti(streamViewStreamNum,multi.getKey().getKeyExpr());      PollResultIndexingStrategyIndexSingleArray indexing=new PollResultIndexingStrategyIndexSingleArray(polledViewStreamNum,polledViewType,ExprNodeUtility.getIdentResolvedPropertyNames(multi.getIndexed()));      return new Pair<HistoricalIndexLookupStrategy,PollResultIndexingStrategy>(strategy,indexing);    }    return new Pair<HistoricalIndexLookupStrategy,PollResultIndexingStrategy>(new HistoricalIndexLookupStrategyNoIndex(),new PollResultIndexingStrategyNoIndex());  }  CoercionDesc keyCoercionTypes=CoercionUtil.getCoercionTypesHash(new EventType[]{streamViewType,polledViewType},0,1,hashKeys,hashIndexes);  if (rangeKeys.isEmpty()) {    if (!keyCoercionTypes.isCoerce()) {      if (hashIndexes.length == 1) {        PollResultIndexingStrategyIndexSingle indexing=new PollResultIndexingStrategyIndexSingle(polledViewStreamNum,polledViewType,hashIndexes[0]);        HistoricalIndexLookupStrategy strategy=new HistoricalIndexLookupStrategyIndexSingle(streamViewStreamNum,hashKeys.get(0));        return new Pair<HistoricalIndexLookupStrategy,PollResultIndexingStrategy>(strategy,indexing);      } else {        PollResultIndexingStrategyIndex indexing=new PollResultIndexingStrategyIndex(polledViewStreamNum,polledViewType,hashIndexes);        HistoricalIndexLookupStrategy strategy=new HistoricalIndexLookupStrategyIndex(streamViewType,streamViewStreamNum,hashKeys);        return new Pair<HistoricalIndexLookupStrategy,PollResultIndexingStrategy>(strategy,indexing);      }    }    if (hashIndexes.length == 1) {      PollResultIndexingStrategy indexing=new PollResultIndexingStrategyIndexCoerceSingle(polledViewStreamNum,polledViewType,hashIndexes[0],keyCoercionTypes.getCoercionTypes()[0]);      HistoricalIndexLookupStrategy strategy=new HistoricalIndexLookupStrategyIndexSingle(streamViewStreamNum,hashKeys.get(0));      return new Pair<HistoricalIndexLookupStrategy,PollResultIndexingStrategy>(strategy,indexing);    } else {      PollResultIndexingStrategy indexing=new PollResultIndexingStrategyIndexCoerce(polledViewStreamNum,polledViewType,hashIndexes,keyCoercionTypes.getCoercionTypes());      HistoricalIndexLookupStrategy strategy=new HistoricalIndexLookupStrategyIndex(streamViewType,streamViewStreamNum,hashKeys);      return new Pair<HistoricalIndexLookupStrategy,PollResultIndexingStrategy>(strategy,indexing);    }  } else {    CoercionDesc rangeCoercionTypes=CoercionUtil.getCoercionTypesRange(new EventType[]{streamViewType,polledViewType},1,rangeIndexes,rangeKeys);    if (rangeKeys.size() == 1 && hashKeys.size() == 0) {      Class rangeCoercionType=rangeCoercionTypes.isCoerce() ? rangeCoercionTypes.getCoercionTypes()[0] : null;      PollResultIndexingStrategySorted indexing=new PollResultIndexingStrategySorted(polledViewStreamNum,polledViewType,rangeIndexes[0],rangeCoercionType);      HistoricalIndexLookupStrategy strategy=new HistoricalIndexLookupStrategySorted(streamViewStreamNum,rangeKeys.get(0));      return new Pair<HistoricalIndexLookupStrategy,PollResultIndexingStrategy>(strategy,indexing);    } else {      PollResultIndexingStrategyComposite indexing=new PollResultIndexingStrategyComposite(polledViewStreamNum,polledViewType,hashIndexes,keyCoercionTypes.getCoercionTypes(),rangeIndexes,rangeCoercionTypes.getCoercionTypes());      HistoricalIndexLookupStrategy strategy=new HistoricalIndexLookupStrategyComposite(streamViewStreamNum,hashKeys,keyCoercionTypes.getCoercionTypes(),rangeKeys,rangeCoercionTypes.getCoercionTypes());      return new Pair<HistoricalIndexLookupStrategy,PollResultIndexingStrategy>(strategy,indexing);    }  }}  }
class C{  public String download(String siteUrl) throws IOException {  URL url=new URL(siteUrl);  HttpsURLConnection con=(HttpsURLConnection)url.openConnection();  return dl(con);}  }
class C{  public void testJustDate() throws Exception {  Path file=getWorkDir().resolve("one-line");  PerfRunData runData=createPerfRunData(file,false,JustDateDocMaker.class.getName());  WriteLineDocTask wldt=new WriteLineDocTask(runData);  wldt.doLogic();  wldt.close();  try (BufferedReader br=Files.newBufferedReader(file,StandardCharsets.UTF_8)){    String line=br.readLine();    assertHeaderLine(line);    line=br.readLine();    assertNull(line);  } }  }
class C{  public static byte[] flattenBitmap(Bitmap bitmap){  int size=bitmap.getWidth() * bitmap.getHeight() * 4;  ByteArrayOutputStream out=new ByteArrayOutputStream(size);  try {    bitmap.compress(Bitmap.CompressFormat.PNG,100,out);    out.flush();    out.close();    return out.toByteArray();  } catch (  IOException e) {    Log.w(TAG,"Could not write bitmap");    return null;  }}  }
class C{  public boolean execute(String sql) throws SQLException {  return executeInternal(sql,false);}  }
class C{  @Deprecated public void compactValueNumbers(Dataflow<ValueNumberFrame,ValueNumberAnalysis> dataflow){  if (true) {    throw new UnsupportedOperationException();  }}  }
class C{  @Override public void addStatement(final Resource s,final URI p,final Value o,final Resource... contexts) throws SailException {  if (log.isDebugEnabled())   log.debug("s=" + s + ", p="+ p+ ", o="+ o+ ", contexts="+ Arrays.toString(contexts));  OpenRDFUtil.verifyContextNotNull(contexts);  if (contexts.length == 0) {    addStatement(s,p,o,(Resource)null);  }  if (contexts.length == 1 && contexts[0] == null) {    addStatement(s,p,o,(Resource)null);  }  for (  Resource c : contexts) {    addStatement(s,p,o,c);  }}  }
class C{  synchronized void receive(char oneChar) throws IOException {  if (buffer == null) {    throw new IOException("Pipe is closed");  }  if (lastReader != null && !lastReader.isAlive()) {    throw new IOException("Pipe broken");  }  lastWriter=Thread.currentThread();  try {    while (buffer != null && out == in) {      notifyAll();      wait(1000);      if (lastReader != null && !lastReader.isAlive()) {        throw new IOException("Pipe broken");      }    }  } catch (  InterruptedException e) {    IoUtils.throwInterruptedIoException();  }  if (buffer == null) {    throw new IOException("Pipe is closed");  }  if (in == -1) {    in=0;  }  buffer[in++]=oneChar;  if (in == buffer.length) {    in=0;  }}  }
class C{  public ASN1InputStream(InputStream input,int limit,boolean lazyEvaluate){  super(input);  this.limit=limit;  this.lazyEvaluate=lazyEvaluate;  this.tmpBuffers=new byte[11][];}  }
class C{  public static AvedevProjectionExpression avedevDistinct(Expression expression){  return new AvedevProjectionExpression(expression,false);}  }
class C{  private static Box createLabel(String text){  Box box=Box.createHorizontalBox();  box.add(new JLabel(text));  box.add(Box.createHorizontalGlue());  return box;}  }
class C{  private void enrichMapWithProducts(final Map<String,Object> map){  final Map<String,ProductSku> products=new HashMap<String,ProductSku>();  for (  final CustomerOrderDet orderDet : ((CustomerOrder)map.get(ROOT)).getOrderDetail()) {    final ProductSku sku=productSkuService.getProductSkuBySkuCode(orderDet.getProductSkuCode());    if (sku != null) {      products.put(sku.getCode(),sku);    }  }  map.put(PRODUCTS,products);}  }
class C{  public static double max(double[] array){  if (array == null) {    throw new IllegalArgumentException("The Array must not be null");  } else   if (array.length == 0) {    throw new IllegalArgumentException("Array cannot be empty.");  }  double max=array[0];  for (int j=1; j < array.length; j++) {    if (Double.isNaN(array[j])) {      return Double.NaN;    }    if (array[j] > max) {      max=array[j];    }  }  return max;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String fileName=null;  String inputDataFile=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  double noData=-32768;  InputStream inStream=null;  OutputStream outStream=null;  String dataType="float";  String dataScale="rgb";  DataInputStream in=null;  BufferedReader br=null;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      int progress=(int)(100f * i / (numImages - 1));      if (numImages > 1) {        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      fileName=imageFiles[i];      if (!((new File(fileName)).exists())) {        showFeedback("Image file does not exist.");        break;      }      File file=new File(fileName);      String fileExtension=whitebox.utilities.FileUtilities.getFileExtension(fileName).toLowerCase();      String[] formatNames=ImageIO.getReaderFormatNames();      boolean checkForSupportedFormat=false;      for (      String str : formatNames) {        if (str.toLowerCase().equals(fileExtension)) {          checkForSupportedFormat=true;          break;        }      }      if (!checkForSupportedFormat) {        showFeedback("This image file format is not currently supported by this tool.");        return;      }      BufferedImage image=ImageIO.read(new File(fileName));      rows=image.getHeight();      cols=image.getWidth();      if (image.getColorModel().getPixelSize() == 24) {        dataType="float";        dataScale="rgb";      }      int dot=imageFiles[i].lastIndexOf(".");      String imageExtension=imageFiles[i].substring(dot + 1);      whiteboxHeaderFile=imageFiles[i].replace(imageExtension,"dep");      whiteboxDataFile=imageFiles[i].replace(imageExtension,"tas");      char[] extChars=imageExtension.toCharArray();      boolean worldFileFound=false;      String wfExtension=Character.toString(extChars[0]) + Character.toString(extChars[2]) + "w";      String worldFile=imageFiles[i].replace(imageExtension,wfExtension);      if ((new File(worldFile)).exists()) {        worldFileFound=true;      } else {        wfExtension=imageExtension + "w";        worldFile=imageFiles[i].replace(imageExtension,wfExtension);        if ((new File(worldFile)).exists()) {          worldFileFound=true;        } else {          wfExtension=".wld";          worldFile=imageFiles[i].replace(imageExtension,wfExtension);          if ((new File(worldFile)).exists()) {            worldFileFound=true;          }        }      }      if (worldFileFound) {        double A=0, B=0, C=0, D=0, E=0, F=0;        FileInputStream fstream=new FileInputStream(worldFile);        in=new DataInputStream(fstream);        br=new BufferedReader(new InputStreamReader(in));        String line;        int n=0;        while ((line=br.readLine()) != null) {switch (n) {case 0:            A=Double.parseDouble(line);          break;case 1:        D=Double.parseDouble(line);      break;case 2:    B=Double.parseDouble(line);  break;case 3:E=Double.parseDouble(line);break;case 4:C=Double.parseDouble(line);break;case 5:F=Double.parseDouble(line);break;}n++;}if (B == 0 && D == 0) {double west=A * 0 + B * 0 + C;double north=D * 0 + E * 0 + F;double east=A * (cols - 1) + B * (rows - 1) + C;double south=D * (cols - 1) + E * (rows - 1) + F;(new File(whiteboxHeaderFile)).delete();(new File(whiteboxDataFile)).delete();fw=new FileWriter(whiteboxHeaderFile,false);bw=new BufferedWriter(fw);out=new PrintWriter(bw,true);String byteOrder=java.nio.ByteOrder.nativeOrder().toString();str1="Min:\t" + Double.toString(Integer.MAX_VALUE);out.println(str1);str1="Max:\t" + Double.toString(Integer.MIN_VALUE);out.println(str1);str1="North:\t" + Double.toString(north);out.println(str1);str1="South:\t" + Double.toString(south);out.println(str1);str1="East:\t" + Double.toString(east);out.println(str1);str1="West:\t" + Double.toString(west);out.println(str1);str1="Cols:\t" + Integer.toString(cols);out.println(str1);str1="Rows:\t" + Integer.toString(rows);out.println(str1);str1="Data Type:\t" + dataType;out.println(str1);str1="Z Units:\t" + "not specified";out.println(str1);str1="XY Units:\t" + "not specified";out.println(str1);str1="Projection:\t" + "not specified";out.println(str1);str1="Data Scale:\t" + dataScale;out.println(str1);str1="Preferred Palette:\t" + "greyscale.pal";out.println(str1);str1="NoData:\t-32768";out.println(str1);if (byteOrder.toLowerCase().contains("lsb") || byteOrder.toLowerCase().contains("little")) {str1="Byte Order:\t" + "LITTLE_ENDIAN";} else {str1="Byte Order:\t" + "BIG_ENDIAN";}out.println(str1);output=new WhiteboxRaster(whiteboxHeaderFile,"rw");int z, r, g, b;for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=image.getRGB(col,row);r=(int)z & 0xFF;g=((int)z >> 8) & 0xFF;b=((int)z >> 16) & 0xFF;output.setValue(row,col,(double)((255 << 24) | (b << 16) | (g << 8)| r));}}output.findMinAndMaxVals();output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());output.writeHeaderFile();output.close();} else {showFeedback("We're sorry but Whitebox cannot currently handle the import of rotated images.");break;}} else {double west=0;double north=rows - 1;double east=cols - 1;double south=0;(new File(whiteboxHeaderFile)).delete();(new File(whiteboxDataFile)).delete();fw=new FileWriter(whiteboxHeaderFile,false);bw=new BufferedWriter(fw);out=new PrintWriter(bw,true);String byteOrder=java.nio.ByteOrder.nativeOrder().toString();str1="Min:\t" + Double.toString(Integer.MAX_VALUE);out.println(str1);str1="Max:\t" + Double.toString(Integer.MIN_VALUE);out.println(str1);str1="North:\t" + Double.toString(north);out.println(str1);str1="South:\t" + Double.toString(south);out.println(str1);str1="East:\t" + Double.toString(east);out.println(str1);str1="West:\t" + Double.toString(west);out.println(str1);str1="Cols:\t" + Integer.toString(cols);out.println(str1);str1="Rows:\t" + Integer.toString(rows);out.println(str1);str1="Data Type:\t" + dataType;out.println(str1);str1="Z Units:\t" + "not specified";out.println(str1);str1="XY Units:\t" + "not specified";out.println(str1);str1="Projection:\t" + "not specified";out.println(str1);str1="Data Scale:\t" + dataScale;out.println(str1);str1="Preferred Palette:\t" + "greyscale.pal";out.println(str1);str1="NoData:\t-32768";out.println(str1);if (byteOrder.toLowerCase().contains("lsb") || byteOrder.toLowerCase().contains("little")) {str1="Byte Order:\t" + "LITTLE_ENDIAN";} else {str1="Byte Order:\t" + "BIG_ENDIAN";}out.println(str1);output=new WhiteboxRaster(whiteboxHeaderFile,"rw");int z, r, g, b;for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=image.getRGB(col,row);r=(int)z & 0xFF;g=((int)z >> 8) & 0xFF;b=((int)z >> 16) & 0xFF;output.setValue(row,col,(double)((255 << 24) | (b << 16) | (g << 8)| r));}}output.findMinAndMaxVals();output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());output.writeHeaderFile();output.close();returnData(whiteboxHeaderFile);}}} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  @Override public void createUntamperedRequest(){  CollisionDJBX33X DJBX33X=new CollisionDJBX33X();  String untampered=UtilHashDoS.generateUntampered(DJBX33X,optionNumberAttributes.getValue(),optionUseNamespaces.isOn());  String soapMessage=this.getOptionTextAreaSoapMessage().getValue();  String soapMessageFinal=this.getOptionTextAreaSoapMessage().replacePlaceholderWithPayload(soapMessage,untampered);  Map<String,String> httpHeaderMap=new HashMap<String,String>();  for (  Map.Entry<String,String> entry : getOriginalRequestHeaderFields().entrySet()) {    httpHeaderMap.put(entry.getKey(),entry.getValue());  }  this.setUntamperedRequestObject(httpHeaderMap,getOriginalRequest().getEndpoint(),soapMessageFinal);}  }
class C{  public String demodulize(String className){  int period=className.lastIndexOf('.');  if (period >= 0) {    return className.substring(period + 1);  } else {    return className;  }}  }
class C{  void sendRoleRequest(OFControllerRole role){  try {    roleChanger.sendRoleRequest(role,0);  } catch (  IOException e) {    log.error("Disconnecting switch {} due to IO Error: {}",getSwitchInfoString(),e.getMessage());    mainConnection.disconnect();  }}  }
class C{  private void add(){  list.addLast(Integer.parseInt(textField.getText()));  displayText();}  }
class C{  public void addAnewarray(String classname){  addOpcode(ANEWARRAY);  addIndex(constPool.addClassInfo(classname));}  }
class C{  private void updateMultiEdges(){  if (m_multiEdgeUpdatingEnabled) {    if (m_graph.getSettings().getEdgeSettings().getDisplayMultipleEdgesAsOne()) {      MultiEdgeHider.hideMultipleEdgesInternal(m_graph);    } else {      MultiEdgeHider.unhideMultipleEdgesInternal(m_graph);    }  }}  }
class C{  private boolean allVolumesInSameBackendCG(List<Volume> volumes){  boolean result=true;  String replicationGroup=null;  int count=0;  URI storageUri=null;  for (  Volume volume : volumes) {    URI cgURI=volume.getConsistencyGroup();    if (NullColumnValueGetter.isNullURI(cgURI)) {      result=false;      break;    }    Volume srcVol=VPlexUtil.getVPLEXBackendVolume(volume,true,_dbClient,false);    if (srcVol == null) {      result=false;      break;    }    URI storage=volume.getStorageController();    String rgName=srcVol.getReplicationGroupInstance();    if (count == 0) {      replicationGroup=rgName;      storageUri=storage;    }    if (replicationGroup == null || replicationGroup.isEmpty()) {      result=false;      break;    }    if (rgName == null || !replicationGroup.equals(rgName)) {      result=false;      break;    }    if (!storageUri.equals(storage)) {      result=false;      break;    }    count++;  }  return result;}  }
class C{  public static AsciiImgCache create(final Font font,final char[] characters){  Dimension maxCharacterImageSize=calculateCharacterRectangle(font,characters);  Map<Character,GrayscaleMatrix> imageCache=createCharacterImages(font,maxCharacterImageSize,characters);  return new AsciiImgCache(maxCharacterImageSize,imageCache,characters);}  }
class C{  public Spring addListener(SpringListener newListener){  if (newListener == null) {    throw new IllegalArgumentException("newListener is required");  }  mListeners.add(newListener);  return this;}  }
class C{  public void vibrateWithPattern(long[] pattern,int repeat){  AudioManager manager=(AudioManager)this.cordova.getActivity().getSystemService(Context.AUDIO_SERVICE);  if (manager.getRingerMode() != AudioManager.RINGER_MODE_SILENT) {    Vibrator vibrator=(Vibrator)this.cordova.getActivity().getSystemService(Context.VIBRATOR_SERVICE);    vibrator.vibrate(pattern,repeat);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Long(stack.getUIMgrSafe().getVideoFrame().getVideoHShiftFreq());}  }
class C{  private void duplicateRow(int yDest,int ySrc){  for (int i=0; i < width; i++) {    setPixel(i,yDest,getPixel(i,ySrc,line,newData));  }}  }
class C{  @Override public void onGetUserIdResponse(final GetUserIdResponse getUserIdResponse){  Log.v(TAG,"onGetUserIdResponse recieved: Response -" + getUserIdResponse);  Log.v(TAG,"RequestId:" + getUserIdResponse.getRequestId());  Log.v(TAG,"IdRequestStatus:" + getUserIdResponse.getUserIdRequestStatus());  new GetUserIdAsyncTask().execute(getUserIdResponse);}  }
class C{  private void onMembershipGossip(Message message){  MembershipRecord record=message.data();  LOGGER.debug("Received membership gossip: {}",record);  updateMembership(record,false);}  }
class C{  public XmlHandler addClass(Class<?> clazz,String... attributes){  Attribute[] listAttributes=new Attribute[attributes.length];  for (int i=attributes.length; i-- > 0; )   listAttributes[i]=new Attribute(attributes[i]);  return addClass(clazz,listAttributes);}  }
class C{  public ColumnMap<String> acquireLockAndReadRow() throws Exception {  withDataColumns(true);  acquire();  return getDataColumns();}  }
class C{  public static Map<String,Object> performFindItem(DispatchContext dctx,Map<String,Object> context){  context.put("viewSize",1);  context.put("viewIndex",0);  Map<String,Object> result=org.ofbiz.common.FindServices.performFind(dctx,context);  List<GenericValue> list=null;  GenericValue item=null;  try {    EntityListIterator it=(EntityListIterator)result.get("listIt");    list=it.getPartialList(1,1);    if (UtilValidate.isNotEmpty(list)) {      item=list.get(0);    }    it.close();  } catch (  Exception e) {    Debug.logInfo("Problem getting list Item" + e,module);  }  if (!UtilValidate.isEmpty(item)) {    result.put("item",item);  }  result.remove("listIt");  if (result.containsKey("listSize")) {    result.remove("listSize");  }  return result;}  }
class C{  public void test_ticket_1105_quads_update5() throws Exception {  new UpdateTestHelper("ticket_1105_quads_update5","ticket_1105_update5.rq","ticket_1105.trig");}  }
class C{  public String parseHandle(String linkUri){  Matcher m=parseRegex.matcher(linkUri);  return m.find() ? m.group(handleGroup) : null;}  }
class C{  public _DeleteOptions(){  super();}  }
class C{  public void enableChildAttach(boolean enable,int isolateId){  getIsolateState(isolateId).m_attachChildren=enable;}  }
class C{  public void closeButtonActionPerformed(java.awt.event.ActionEvent ae){  dispose();}  }
class C{  public T caseArrayBindingPattern(ArrayBindingPattern object){  return null;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  public boolean isSelected(){  return isChecked();}  }
class C{  @Override protected Key<PollMessage> doBackward(String externalKey){  List<String> idComponents=Splitter.on('-').splitToList(externalKey);  if (idComponents.size() != 5) {    throw new PollMessageExternalKeyParseException();  }  try {    Class<?> resourceClazz=EXTERNAL_KEY_CLASS_ID_MAP.inverse().get(Long.parseLong(idComponents.get(0)));    if (resourceClazz == null) {      throw new PollMessageExternalKeyParseException();    }    return Key.create(Key.create(Key.create(null,resourceClazz,String.format("%s-%s",idComponents.get(1),idComponents.get(2))),HistoryEntry.class,Long.parseLong(idComponents.get(3))),PollMessage.class,Long.parseLong(idComponents.get(4)));  } catch (  NumberFormatException e) {    throw new PollMessageExternalKeyParseException();  }}  }
class C{  @Override protected void sendFunctionGroup5(){  int new_fn=((getF21() ? CbusConstants.CBUS_F21 : 0) | (getF22() ? CbusConstants.CBUS_F22 : 0) | (getF23() ? CbusConstants.CBUS_F23 : 0)| (getF24() ? CbusConstants.CBUS_F24 : 0)| (getF25() ? CbusConstants.CBUS_F25 : 0)| (getF26() ? CbusConstants.CBUS_F26 : 0)| (getF27() ? CbusConstants.CBUS_F27 : 0)| (getF28() ? CbusConstants.CBUS_F28 : 0));  cs.setFunctions(5,_handle,new_fn);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void columnSelectionChanged(ListSelectionEvent e){}  }
class C{  public void sendEndEvaluationInstance(Stream inputStream){  InstanceContentEvent instanceContentEvent=new InstanceContentEvent(-1,firstInstance,false,true);  inputStream.put(instanceContentEvent);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == TypedElement.class) {switch (baseFeatureID) {case N4JSPackage.TYPED_ELEMENT__DECLARED_TYPE_REF:      return N4JSPackage.N4_FIELD_DECLARATION__DECLARED_TYPE_REF;case N4JSPackage.TYPED_ELEMENT__BOGUS_TYPE_REF:    return N4JSPackage.N4_FIELD_DECLARATION__BOGUS_TYPE_REF;default :  return -1;}}if (baseClass == ThisArgProvider.class) {switch (baseFeatureID) {default :return -1;}}if (baseClass == PropertyNameOwner.class) {switch (baseFeatureID) {case N4JSPackage.PROPERTY_NAME_OWNER__DECLARED_NAME:return N4JSPackage.N4_FIELD_DECLARATION__DECLARED_NAME;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public static ImageSource uri(Uri uri){  if (uri == null) {    throw new NullPointerException("Uri must not be null");  }  return new ImageSource(uri);}  }
class C{  public static Schema createSchema(final String schemaLocation) throws XMLException {  Schema schema=null;  final SchemaFactory schemaFactory=SchemaFactory.newInstance(javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI);  try {    final File file=new File(schemaLocation);    if (file.exists()) {      schema=schemaFactory.newSchema(file);    } else {      final InputStream resourceAsStream=XMLParser.class.getResourceAsStream(schemaLocation);      if (resourceAsStream == null) {        throw new XMLException("Cannot load the schema from file or classpath - fix the schema or amend the location: " + schemaLocation);      }      schema=schemaFactory.newSchema(new StreamSource(resourceAsStream));    }    return schema;  } catch (  SAXException e) {    throw new XMLException("Cannot set the schema - please fix the schema or the location",e);  }}  }
class C{  public org.smpte_ra.schemas.st2067_2_2013.CompositionTimecodeType buildCompositionTimeCode(BigInteger compositionEditRate){  org.smpte_ra.schemas.st2067_2_2013.CompositionTimecodeType compositionTimecodeType=new CompositionTimecodeType();  compositionTimecodeType.setTimecodeDropFrame(false);  compositionTimecodeType.setTimecodeRate(compositionEditRate);  compositionTimecodeType.setTimecodeStartAddress(IMFUtils.generateTimecodeStartAddress());  return compositionTimecodeType;}  }
class C{  public KeyPair generateKeyPair(){  KeyPairGenerator keyGen=null;  SecureRandom random=null;  try {    random=SecureRandom.getInstance(SecurityUtil.getSecuredRandomAlgorithm());    keyGen=KeyPairGenerator.getInstance(KeyCertificateAlgorithmValuesHolder.DEFAULT_KEY_ALGORITHM);    keyGen.initialize(valuesHolder.getKeySize(),random);    return keyGen.generateKeyPair();  } catch (  Exception e) {    throw SecurityException.fatals.noSuchAlgorithmException(SecurityUtil.getSecuredRandomAlgorithm(),e);  } finally {    if (keyGen != null) {      SecurityUtil.clearSensitiveData(keyGen);    }    if (random != null) {      SecurityUtil.clearSensitiveData(random);    }  }}  }
class C{  public List<V> values(){  List<V> list=new ArrayList<V>();  for (  List<V> value : map.values()) {    list.addAll(value);  }  return Collections.unmodifiableList(list);}  }
class C{  public QuantiserIndex(SpatialClusters<?> quantiser){  this.quantiser=quantiser;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.PARAMETER__BUILT_IN_FACET_KEY:    return getBuiltInFacetKey();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public MiniDrawer withDrawer(@NonNull Drawer drawer){  this.mDrawer=drawer;  return this;}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  public TransitionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void mark(int limit){}  }
class C{  private void addDbMetaDataEntry(List<Map<String,String>> list,String name,String value){  Map<String,String> entry=new LinkedHashMap<>();  entry.put("propertyName",getMessageSourceAccessor().getMessage(name));  entry.put("propertyValue",value);  list.add(entry);}  }
class C{  public static boolean isStandardLanguage(Locale locale){  if (Locale.ENGLISH.equals(locale) || Locale.GERMAN.equals(locale) || Locale.JAPANESE.equals(locale)) {    return true;  }  return false;}  }
class C{  protected boolean isCursorPositionCycle(){  return true;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  @Benchmark public long test1_UsingWhileAndMapEntry() throws IOException {  long i=0;  Iterator<Map.Entry<Integer,Integer>> it=map.entrySet().iterator();  while (it.hasNext()) {    Map.Entry<Integer,Integer> pair=it.next();    i+=pair.getKey() + pair.getValue();  }  return i;}  }
class C{  public SelectionColorChooserAction(DrawingEditor editor,AttributeKey<Color> key){  this(editor,key,null,null);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double slope;  double z, z2;  int c, i;  int progress;  int[] dY={-1,0,1,1,1,0,-1,-1};  int[] dX={1,1,1,0,-1,-1,-1,0};  int row, col, x, y;  double dist;  double maxSlope=0;  double maxZChange=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    DEM.isReflectedAtEdges=true;    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    double gridResX=DEM.getCellSizeX();    double gridResY=DEM.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          maxSlope=-99999999;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            dist=gridLengths[c];            z2=DEM.getValue(y,x);            if (z2 != noData) {              slope=(z - z2) / dist;              if (slope > maxSlope) {                maxSlope=slope;                maxZChange=z - z2;              }            }          }          if (maxSlope > 0) {            output.setValue(row,col,maxZChange);          } else {            output.setValue(row,col,0);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override protected final void parseArgs(String[] args) throws AdeException {  super.parseArgs(new Options(),args);}  }
class C{  protected void enableOtherNotifications(TransactionBuilder builder,boolean enable){  builder.notify(getCharacteristic(MiBandService.UUID_CHARACTERISTIC_REALTIME_STEPS),enable).notify(getCharacteristic(MiBandService.UUID_CHARACTERISTIC_SENSOR_DATA),enable);}  }
class C{  private void drawFirstAnimation(Canvas canvas){  if (radius1 < getWidth() / 2) {    Paint paint=new Paint();    paint.setAntiAlias(true);    paint.setColor(makePressColor());    radius1=(radius1 >= getWidth() / 2) ? (float)getWidth() / 2 : radius1 + 1;    canvas.drawCircle(getWidth() / 2,getHeight() / 2,radius1,paint);  } else {    Bitmap bitmap=Bitmap.createBitmap(canvas.getWidth(),canvas.getHeight(),Bitmap.Config.ARGB_8888);    Canvas temp=new Canvas(bitmap);    Paint paint=new Paint();    paint.setAntiAlias(true);    paint.setColor(makePressColor());    temp.drawCircle(getWidth() / 2,getHeight() / 2,getHeight() / 2,paint);    Paint transparentPaint=new Paint();    transparentPaint.setAntiAlias(true);    transparentPaint.setColor(getResources().getColor(android.R.color.transparent));    transparentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));    if (cont >= 50) {      radius2=(radius2 >= getWidth() / 2) ? (float)getWidth() / 2 : radius2 + 1;    } else {      radius2=(radius2 >= getWidth() / 2 - Utils.dpToPx(4,getResources())) ? (float)getWidth() / 2 - Utils.dpToPx(4,getResources()) : radius2 + 1;    }    temp.drawCircle(getWidth() / 2,getHeight() / 2,radius2,transparentPaint);    canvas.drawBitmap(bitmap,0,0,new Paint());    if (radius2 >= getWidth() / 2 - Utils.dpToPx(4,getResources()))     cont++;    if (radius2 >= getWidth() / 2)     firstAnimationOver=true;  }}  }
class C{  public void emitDirect(int taskId,Tuple anchor,List<Object> tuple){  emitDirect(taskId,Utils.DEFAULT_STREAM_ID,anchor,tuple);}  }
class C{  CSVReader(Reader reader,int line,CSVParser csvParser,boolean keepCR,boolean verifyReader){  this.br=(reader instanceof BufferedReader ? (BufferedReader)reader : new BufferedReader(reader,30720));  this.lineReader=new LineReader(br,keepCR);  this.skipLines=line;  this.parser=csvParser;  this.keepCR=keepCR;  this.verifyReader=verifyReader;}  }
class C{  public static void addOsmiumCompressorRecipe(ItemStack input,ItemStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addOsmiumCompressorRecipe",ItemStack.class,ItemStack.class);    m.invoke(null,input,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  public void testPrintMessageBuilder() throws Exception {  String javaText=TextFormat.printToString(TestUtil.getAllSetBuilder());  javaText=javaText.replace(".0\n","\n");  assertEquals(allFieldsSetText,javaText);}  }
class C{  @EventHandler(ignoreCancelled=true) public void onItemSpawn(ItemSpawnEvent event){  Match match=Cardinal.getMatch(event.getWorld());  MaterialData data=event.getEntity().getItemStack().getData();  for (  MaterialType type : materials.get(match)) {    if (type.isType(data)) {      event.setCancelled(true);      break;    }  }}  }
class C{  public boolean hasClauses(){  return !(mustClauses.isEmpty() && shouldClauses.isEmpty() && mustNotClauses.isEmpty()&& filterClauses.isEmpty());}  }
class C{  public void start(@NonNull Context context,@NonNull Fragment fragment){  start(context,fragment,REQUEST_CROP);}  }
class C{  public static void checkIfSavable(final Process process) throws Exception {  for (  Operator operator : process.getAllOperators()) {    if (operator instanceof DummyOperator) {      throw new Exception("The process contains dummy operators. Remove all dummy operators or install all missing extensions in order to save the process.");    }  }}  }
class C{  private static int decodeDigit(int[] counters) throws NotFoundException {  int bestVariance=MAX_AVG_VARIANCE;  int bestMatch=-1;  int max=PATTERNS.length;  for (int i=0; i < max; i++) {    int[] pattern=PATTERNS[i];    int variance=patternMatchVariance(counters,pattern,MAX_INDIVIDUAL_VARIANCE);    if (variance < bestVariance) {      bestVariance=variance;      bestMatch=i;    }  }  if (bestMatch >= 0) {    return bestMatch;  } else {    throw NotFoundException.getNotFoundInstance();  }}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.activity_create_widget_clock_day_week_doneButton:    SharedPreferences.Editor editor=getSharedPreferences(getString(R.string.sp_widget_clock_day_week_setting),MODE_PRIVATE).edit();  editor.putString(getString(R.string.key_location),location.location);editor.putBoolean(getString(R.string.key_show_card),showCardSwitch.isChecked());editor.putBoolean(getString(R.string.key_black_text),blackTextSwitch.isChecked());editor.apply();Intent intent=getIntent();Bundle extras=intent.getExtras();int appWidgetId=0;if (extras != null) {appWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);}Intent resultValue=new Intent();resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,appWidgetId);setResult(RESULT_OK,resultValue);Intent service=new Intent(this,WidgetClockDayWeekService.class);startService(service);finish();break;}}  }
class C{  public void testGenerateCertPath03() throws Exception {  String certPathEncoding="PkiPath";  CertificateFactory[] certFs=initCertFs();  assertNotNull("CertificateFactory objects were not created",certFs);  for (int i=0; i < certFs.length; i++) {    Iterator<String> it=certFs[0].getCertPathEncodings();    assertTrue("no CertPath encodings",it.hasNext());    assertEquals("Incorrect default encoding",certPathEncoding,it.next());    CertPath certPath=null;    InputStream fis=Support_Resources.getResourceStream(fileCertPathPki);    certPath=certFs[i].generateCertPath(fis);    fis.close();    assertEquals(defaultType,certPath.getType());    List<? extends Certificate> list1=certPath.getCertificates();    assertFalse("Result list is empty",list1.isEmpty());  }}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public boolean equals(JulianDate d){  return (julian == d.julian);}  }
class C{  public void put(int key,int value){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (mSize >= mKeys.length) {      int n=Math.max(mSize + 1,mKeys.length * 2);      int[] nkeys=new int[n];      int[] nvalues=new int[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  public List<RDOPaymentPreviewSummary> evaluateBillingResultForPaymentPreview(RDOSummary summaryTemplate,Document doc,PlatformUser user,PriceConverter formatter,Long paymentPreviewEndTime) throws XPathExpressionException, SQLException {  this.formatter=formatter;  this.document=doc;  return evaluateBillingResult(summaryTemplate,user,paymentPreviewEndTime);}  }
class C{  public TemplatePersistenceData(Template template,boolean enabled,String id){  Assert.isNotNull(template);  fOriginalTemplate=template;  fCustomTemplate=template;  fOriginalIsEnabled=enabled;  fCustomIsEnabled=enabled;  fId=id;}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null || getClass() != obj.getClass())   return false;  MessageFormat other=(MessageFormat)obj;  return (maxOffset == other.maxOffset && pattern.equals(other.pattern) && ((locale != null && locale.equals(other.locale)) || (locale == null && other.locale == null)) && Arrays.equals(offsets,other.offsets) && Arrays.equals(argumentNumbers,other.argumentNumbers) && Arrays.equals(formats,other.formats));}  }
class C{  public void putNull(String key){  mValues.put(key,null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributens08.class,args);}  }
class C{  public boolean isIgnoringOrder(){  return _isIgnoringOrder;}  }
class C{  public TenantDeletionConstraintException(String message){  super(message);}  }
class C{  public void onClickPlaneta(View view){  Intent intent=new Intent(this,PlanetaActivity.class);  ActivityOptionsCompat opts=ActivityOptionsCompat.makeCustomAnimation(this,R.anim.slide_in_left,R.anim.slide_out_left);  ActivityCompat.startActivity(this,intent,opts.toBundle());}  }
class C{  public PriorityQueue(int initialCapacity){  this(initialCapacity,null);}  }
class C{  public void deregisterPort(int port,IgnitePortProtocol proto,Class cls){  assert port > 0 && port < 65535;  assert proto != null;  assert cls != null;synchronized (recs) {    for (Iterator<GridPortRecord> iter=recs.iterator(); iter.hasNext(); ) {      GridPortRecord pr=iter.next();      if (pr.port() == port && pr.protocol() == proto && pr.clazz().equals(cls))       iter.remove();    }  }  notifyListeners();}  }
class C{  public boolean isOverrides(MembershipRecord r0){  if (r0 == null) {    return true;  }  checkArgument(this.member.equals(r0.member),"Can't compare records for different members");  if (r0.status == DEAD) {    return false;  }  if (status == DEAD) {    return true;  }  if (incarnation == r0.incarnation) {    return (status != r0.status) && (status == SUSPECT);  } else {    return incarnation > r0.incarnation;  }}  }
class C{  private void replaceTop(Scope topOfStack){  stack.set(stack.size() - 1,topOfStack);}  }
class C{  @Override public void contextInitialized(ServletContextEvent event){  this.context=event.getServletContext();  log("contextInitialized()");}  }
class C{  private void signIdToken(final ClientDetailsEntity client,final JWSAlgorithm signingAlg,final OAuth2AccessTokenEntity idTokenEntity,final JWTClaimsSet.Builder idClaims){  log.debug("Client {} is configured to ignore encryption",client.getClientId());  final JWT idToken;  if (signingAlg.equals(Algorithm.NONE)) {    idToken=new PlainJWT(idClaims.build());    log.debug("Client {} is configured to use an unsigned idToken",client.getClientId());  } else {    if (signingAlg.equals(JWSAlgorithm.HS256) || signingAlg.equals(JWSAlgorithm.HS384) || signingAlg.equals(JWSAlgorithm.HS512)) {      idToken=signIdTokenForHs256Hs384Hs512(client,signingAlg,idClaims);    } else {      idToken=signIdTokenWithDefaultService(client,signingAlg,idClaims);    }  }  idTokenEntity.setJwt(idToken);}  }
class C{  public ExitData(S source,S target){  this.source=source;  this.target=target;}  }
class C{  private void removeMethodIfStupid(SootClass clz,SootMethod method){  boolean debug=false;  StmtBody stmtBody=null;  try {    stmtBody=(StmtBody)method.retrieveActiveBody();  } catch (  Exception ex) {    logger.info("Exception retrieving method body {}",ex);    return;  }  if (debug)   logger.debug("looking at method: {}",method);  Unit[] units=stmtBody.getUnits().toArray(new Unit[0]);  for (int i=0; i < units.length - 2; i++)   if (!(units[i] instanceof JIdentityStmt)) {    if (debug)     logger.debug("non identity: {}",units[i]);    return;  }  if (debug)   logger.debug("Identity test pass");  boolean foundSpecialInvoke=false;  if (debug)   logger.debug("invoke: {}",units[units.length - 2]);  if ((units[units.length - 2] instanceof Stmt) && ((Stmt)units[units.length - 2]).containsInvokeExpr()) {    InvokeExpr invoke=((Stmt)units[units.length - 2]).getInvokeExpr();    if (debug)     logger.debug("{} {} {}",invoke instanceof SpecialInvokeExpr,method.getSubSignature().equals(invoke.getMethodRef().getSubSignature().getString()),((SpecialInvokeExpr)invoke).getBase().equals(stmtBody.getThisLocal()));    if (invoke instanceof SpecialInvokeExpr && method.getSubSignature().equals(invoke.getMethodRef().getSubSignature().getString()) && ((SpecialInvokeExpr)invoke).getBase().equals(stmtBody.getThisLocal())) {      for (int i=0; i < invoke.getArgCount(); i++) {        if (!invoke.getArg(i).equals(stmtBody.getParameterLocal(i))) {          if (debug)           logger.debug("no a local? {} {}",invoke.getArg(i),stmtBody.getParameterLocal(i));          return;        }      }      foundSpecialInvoke=true;    }  }  if (!foundSpecialInvoke) {    return;  }  if (debug)   logger.debug("call to super pass");  boolean correctReturn=false;  if ((units[units.length - 1] instanceof JReturnVoidStmt) && units[units.length - 2] instanceof JInvokeStmt) {    if (debug)     logger.debug("Correct return void ");    correctReturn=true;  }  if ((units[units.length - 1] instanceof JReturnStmt) && units[units.length - 2] instanceof AssignStmt) {    if (((AssignStmt)units[units.length - 2]).getLeftOp().equals(((JReturnStmt)units[units.length - 1]).getOp())) {      correctReturn=true;      logger.debug("correct return");    }  }  if (!correctReturn) {    return;  }  logger.info("Removing stupid override {}",method);  clz.removeMethod(method);}  }
class C{  public void loadMarkdown(String txt,String cssFileUrl){  loadMarkdownToView(txt,cssFileUrl);}  }
class C{  protected void clearList(){  int listSize=getItemCount();  this.list.clear();  notifyItemRangeRemoved(0,listSize);}  }
class C{  public static SearchRecentSuggestions newHelper(Context context){  return new SearchRecentSuggestions(context,AUTHORITY,MODE);}  }
class C{  @Override public boolean supportsSchemasInIndexDefinitions(){  debugCodeCall("supportsSchemasInIndexDefinitions");  return true;}  }
class C{  private IBindingSet aggregate(final Iterable<IBindingSet> solutions){  final IBindingSet aggregates=new ContextBindingSet(context,new ListBindingSet());  if (groupBy != null) {    final IBindingSet aSolution=solutions.iterator().next();    for (    IValueExpression<?> expr : groupBy) {      if (expr instanceof IVariable<?>) {        final IVariable<?> var=(IVariable<?>)expr;        final Object varValue=var.get(aSolution);        final Constant<?> val;        if (varValue == null) {          val=Constant.errorValue();        } else {          val=new Constant(varValue.getClass().cast(varValue));        }        ;        aggregates.set(var,val);      } else       if (expr instanceof IBind<?>) {        final IBind<?> bindExpr=(IBind<?>)expr;        final Constant<?> val;        final Object exprValue=bindExpr.get(aSolution);        if (exprValue == null) {          val=Constant.errorValue();        } else {          val=new Constant(exprValue.getClass().cast(exprValue));        }        final IVariable<?> ovar=((IBind<?>)expr).getVar();        aggregates.set(ovar,val);      }    }  }{    final boolean nestedAggregates=groupByState.isNestedAggregates();    final Iterator<Map.Entry<IAggregate<?>,IVariable<?>>> itr=rewrite.getAggExpr().entrySet().iterator();    while (itr.hasNext()) {      final Map.Entry<IAggregate<?>,IVariable<?>> e=itr.next();      doAggregate(e.getKey(),e.getValue(),nestedAggregates,aggregates,solutions,stats);    }    if (log.isTraceEnabled())     log.trace("aggregates: " + aggregates);  }  for (  IValueExpression<?> expr : rewrite.getSelect2()) {    try {      expr.get(aggregates);    } catch (    SparqlTypeErrorException ex) {      TypeErrorLog.handleTypeError(ex,expr,stats);      continue;    }catch (    IllegalArgumentException ex) {      TypeErrorLog.handleTypeError(ex,expr,stats);      continue;    }  }{    final boolean drop;    final IConstraint[] having2=rewrite.getHaving2();    if (having2 != null && !BOpUtility.isConsistent(having2,aggregates)) {      drop=true;    } else {      drop=false;    }    if (log.isInfoEnabled())     log.info((drop ? "drop" : "keep") + " : " + aggregates);    if (drop) {      return null;    }  }  final IBindingSet out;  if (groupBy == null) {    assert !aggregates.containsErrorValues();    out=aggregates.copy(groupByState.getSelectVars().toArray(new IVariable[0]));  } else {    out=aggregates.copyMinusErrors(groupByState.getSelectVars().toArray(new IVariable[0]));  }  return out;}  }
class C{  public CStepIntoAction(final JFrame parent,final IFrontEndDebuggerProvider debugger){  m_parent=Preconditions.checkNotNull(parent,"IE00310: Parent argument can not be null");  m_debugger=Preconditions.checkNotNull(debugger,"IE01544: Debugger argument can not be null");  putValue(Action.SHORT_DESCRIPTION,"Step Into");}  }
class C{  public static void applySampledState(SampledVertex v,Attributes attrs){  String str=attrs.getValue(SAMPLED_ATTR);  if (str != null)   v.sample(new Integer(str));}  }
class C{  private static void appendCommandStatus(final PrintWriter writer,final IStatus CommandStatus,final int nesting){  for (int i=0; i < nesting; i++) {    writer.print("  ");  }  writer.println(CommandStatus.getMessage());  final IStatus[] children=CommandStatus.getChildren();  for (int i=0; i < children.length; i++) {    appendCommandStatus(writer,children[i],nesting + 1);  }}  }
class C{  private void fillFromArguments(String[] arguments){  for (  String string : arguments) {    if (!string.startsWith("--")) {      throw new IllegalArgumentException("illegal parameter: " + string);    }    String param=string.substring(2);    String params[]=param.split("=",2);    boolean found=false;    for (    ParameterNames parameterName : ParameterNames.values()) {      String name=parameterName.getParameterName().toLowerCase();      if (name.equals(params[0])) {        if (params.length == 1) {          parameterValueMap.put(params[0],"");        } else {          parameterValueMap.put(params[0],params[1]);        }        found=true;        break;      }    }    if (!found) {      elementDesc.add(string);    }  }  verifyAllParameters();}  }
class C{  private ExpirationAction(String name){  this.name=name;}  }
class C{  public void resetPattern(String pattern){  normalize(pattern);}  }
class C{  public void testResourcesAvailable(){  new PortugueseAnalyzer().close();}  }
class C{  public static boolean isLauncherAppTarget(Intent launchIntent){  if (launchIntent != null && Intent.ACTION_MAIN.equals(launchIntent.getAction()) && launchIntent.getComponent() != null && launchIntent.getCategories() != null && launchIntent.getCategories().size() == 1 && launchIntent.hasCategory(Intent.CATEGORY_LAUNCHER) && TextUtils.isEmpty(launchIntent.getDataString())) {    Bundle extras=launchIntent.getExtras();    if (extras == null) {      return true;    } else {      Set<String> keys=extras.keySet();      return keys.size() == 1 && keys.contains(ItemInfo.EXTRA_PROFILE);    }  }  ;  return false;}  }
class C{  public static Class[] resolveAllInterfaces(Class type){  Set<Class> bag=new LinkedHashSet<>();  _resolveAllInterfaces(type,bag);  return bag.toArray(new Class[bag.size()]);}  }
class C{  public ProtocolDecoderException(Throwable cause){  super(cause);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (lagGraph == null) {    throw new NullPointerException();  }}  }
class C{  protected SQLException logAndConvert(Exception ex){  SQLException e=DbException.toSQLException(ex);  if (trace == null) {    DbException.traceThrowable(e);  } else {    int errorCode=e.getErrorCode();    if (errorCode >= 23000 && errorCode < 24000) {      trace.info(e,"exception");    } else {      trace.error(e,"exception");    }  }  return e;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void compute_default(){  int i, prod, max_prod, max_red;  if (reduction_count == null)   reduction_count=new int[production.number()];  for (i=0; i < production.number(); i++)   reduction_count[i]=0;  max_prod=-1;  max_red=0;  for (i=0; i < size(); i++)   if (under_term[i].kind() == parse_action.REDUCE) {    prod=((reduce_action)under_term[i]).reduce_with().index();    reduction_count[prod]++;    if (reduction_count[prod] > max_red) {      max_red=reduction_count[prod];      max_prod=prod;    }  }  default_reduce=max_prod;}  }
class C{  public void KillRandomBlordroughs(int numb){  for (int i=0; i < numb; i++) {    KillRandomBlordrough();  }  logger.debug("killed " + numb + " creatures.");}  }
class C{  public static void error(Throwable problem){  _errorCallback.error(problem);}  }
class C{  public OsmMoveAction(MapWay way,int fromNodeIdx,int toNodeIdx){  this.way=way;  fromIndex=fromNodeIdx;  toIndex=toNodeIdx;}  }
class C{  public VPAttributeDialog(Frame frame,int M_AttributeSetInstance_ID,int M_Product_ID,int C_BPartner_ID,boolean productWindow,int AD_Column_ID,int WindowNo,boolean readWrite){  super(frame,Msg.translate(Env.getCtx(),"M_AttributeSetInstance_ID"),true);  log.config("M_AttributeSetInstance_ID=" + M_AttributeSetInstance_ID + ", M_Product_ID="+ M_Product_ID+ ", C_BPartner_ID="+ C_BPartner_ID+ ", ProductW="+ productWindow+ ", Column="+ AD_Column_ID);  m_WindowNo=Env.createWindowNo(this);  m_M_AttributeSetInstance_ID=M_AttributeSetInstance_ID;  m_M_Product_ID=M_Product_ID;  m_C_BPartner_ID=C_BPartner_ID;  m_productWindow=productWindow;  m_AD_Column_ID=AD_Column_ID;  m_WindowNoParent=WindowNo;  m_readWrite=readWrite;  m_columnName=DB.getSQLValueString(null,"SELECT ColumnName FROM AD_Column WHERE AD_Column_ID = ?",m_AD_Column_ID);  if (m_columnName == null || m_columnName.trim().length() == 0) {    m_columnName="M_AttributeSetInstance_ID";  }  try {    jbInit();  } catch (  Exception ex) {    log.log(Level.SEVERE,"VPAttributeDialog" + ex);  }  if (!initAttributes()) {    dispose();    return;  }  AEnv.showCenterWindow(frame,this);}  }
class C{  public static long quantile(long[] values,double quantile){  if (values == null)   throw new IllegalArgumentException("Values cannot be null.");  if (quantile < 0.0 || quantile > 1.0)   throw new IllegalArgumentException("Quantile must be between 0.0 and 1.0");  long[] copy=new long[values.length];  System.arraycopy(values,0,copy,0,copy.length);  Arrays.sort(copy);  int index=(int)(copy.length * quantile);  return copy[index];}  }
class C{  public PaintListenerSupport(){  this(null);}  }
class C{  public String fromId(){  return fromId;}  }
class C{  protected void configureCoreUI(){  GinMultibinder<PreferencePagePresenter> prefBinder=GinMultibinder.newSetBinder(binder(),PreferencePagePresenter.class);  prefBinder.addBinding().to(AppearancePresenter.class);  prefBinder.addBinding().to(ExtensionManagerPresenter.class);  GinMultibinder<Theme> themeBinder=GinMultibinder.newSetBinder(binder(),Theme.class);  themeBinder.addBinding().to(DarkTheme.class);  themeBinder.addBinding().to(LightTheme.class);  bind(PartStackUIResources.class).to(Resources.class).in(Singleton.class);  bind(WorkspaceView.class).to(WorkspaceViewImpl.class).in(Singleton.class);  bind(PerspectiveView.class).to(PerspectiveViewImpl.class);  bind(MainMenuView.class).to(MainMenuViewImpl.class).in(Singleton.class);  bind(StatusPanelGroupView.class).to(StatusPanelGroupViewImpl.class).in(Singleton.class);  bind(ToolbarView.class).to(ToolbarViewImpl.class);  bind(ToolbarPresenter.class).annotatedWith(MainToolbar.class).to(ToolbarPresenter.class).in(Singleton.class);  install(new GinFactoryModuleBuilder().implement(DropDownWidget.class,DropDownWidgetImpl.class).build(DropDownListFactory.class));  bind(NotificationManagerView.class).to(NotificationManagerViewImpl.class).in(Singleton.class);  bind(EditorPartStackView.class);  bind(EditorContentSynchronizer.class).to(EditorContentSynchronizerImpl.class).in(Singleton.class);  install(new GinFactoryModuleBuilder().implement(EditorGroupSynchronization.class,EditorGroupSynchronizationImpl.class).build(EditorGroupSychronizationFactory.class));  bind(MessageDialogFooter.class);  bind(MessageDialogView.class).to(MessageDialogViewImpl.class);  bind(ConfirmDialogFooter.class);  bind(ConfirmDialogView.class).to(ConfirmDialogViewImpl.class);  bind(ChoiceDialogFooter.class);  bind(ChoiceDialogView.class).to(ChoiceDialogViewImpl.class);  bind(InputDialogFooter.class);  bind(InputDialogView.class).to(InputDialogViewImpl.class);  install(new GinFactoryModuleBuilder().implement(MessageDialog.class,MessageDialogPresenter.class).implement(ConfirmDialog.class,ConfirmDialogPresenter.class).implement(InputDialog.class,InputDialogPresenter.class).implement(ChoiceDialog.class,ChoiceDialogPresenter.class).build(DialogFactory.class));  install(new GinFactoryModuleBuilder().implement(SubPanelView.class,SubPanelViewImpl.class).build(SubPanelViewFactory.class));  install(new GinFactoryModuleBuilder().implement(SubPanel.class,SubPanelPresenter.class).build(SubPanelFactory.class));  install(new GinFactoryModuleBuilder().implement(Tab.class,TabWidget.class).build(TabItemFactory.class));  install(new GinFactoryModuleBuilder().implement(ConsoleButton.class,ConsoleButtonImpl.class).build(ConsoleButtonFactory.class));  install(new GinFactoryModuleBuilder().implement(ProjectNotificationSubscriber.class,ProjectNotificationSubscriberImpl.class).build(ImportProjectNotificationSubscriberFactory.class));  install(new GinFactoryModuleBuilder().build(FindResultNodeFactory.class));  bind(UploadFileView.class).to(UploadFileViewImpl.class);  bind(UploadFolderFromZipView.class).to(UploadFolderFromZipViewImpl.class);  bind(PreferencesView.class).to(PreferencesViewImpl.class).in(Singleton.class);  bind(NavigateToFileView.class).to(NavigateToFileViewImpl.class).in(Singleton.class);  bind(ExtensionManagerView.class).to(ExtensionManagerViewImpl.class).in(Singleton.class);  bind(AppearanceView.class).to(AppearanceViewImpl.class).in(Singleton.class);  bind(FindActionView.class).to(FindActionViewImpl.class).in(Singleton.class);  bind(HotKeysDialogView.class).to(HotKeysDialogViewImpl.class).in(Singleton.class);  bind(RecentFileList.class).to(RecentFileStore.class).in(Singleton.class);  install(new GinFactoryModuleBuilder().build(RecentFileActionFactory.class));  install(new GinFactoryModuleBuilder().build(CommandProducerActionFactory.class));}  }
class C{  public void invert(final int ulx,final int uly,final int lrx,final int lry){  filter(ulx,uly,lrx,lry,FilterMode.FILTER_INVERT,-1);}  }
class C{  public UpdateSettingsRequest(Settings settings,String... indices){  this.indices=indices;  this.settings=settings;}  }
class C{  public void close() throws IOException {  mFd.close();}  }
class C{  @Override public int remove(final byte[] termHash,final HandleSet urlHashes) throws IOException {  this.countCache.remove(termHash);  final int removed=this.ram.remove(termHash,urlHashes);  int reduced;  try {    reduced=this.array.reduce(termHash,new RemoveReducer<ReferenceType>(urlHashes));  } catch (  final SpaceExceededException e) {    reduced=0;    ConcurrentLog.warn("IndexCell","not possible to remove urlHashes from a RWI because of too low memory. Remove was not applied. Please increase RAM assignment");  }  return removed + (reduced / this.array.rowdef().objectsize);}  }
class C{  public void trace(String msg){  innerLog(Level.TRACE,null,msg,UNKNOWN_ARG,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
class C{  private boolean isInactiveField(){  return _property.getName().equals(DataObject.INACTIVE_FIELD_NAME);}  }
class C{  @Deprecated public boolean requestDefaultFocus(){  Container nearestRoot=(isFocusCycleRoot()) ? this : getFocusCycleRootAncestor();  if (nearestRoot == null) {    return false;  }  Component comp=nearestRoot.getFocusTraversalPolicy().getDefaultComponent(nearestRoot);  if (comp != null) {    comp.requestFocus();    return true;  } else {    return false;  }}  }
class C{  private Organization createOrganization() throws Exception {  Organization organization=new Organization();  organization.setOrganizationId("testOrg");  organization.setRegistrationDate(123L);  organization.setCutOffDay(1);  mgr.persist(organization);  mgr.flush();  return organization;}  }
class C{  public void testGetAttributes(){  char expectedId1=20;  char expectedId2=21;  char actualId1;  char actualId2;  unknownAttributesAttribute.addAttributeID(expectedId1);  unknownAttributesAttribute.addAttributeID(expectedId2);  Iterator<Character> iterator=unknownAttributesAttribute.getAttributes();  actualId1=iterator.next();  actualId2=iterator.next();  assertEquals("getAttributes() return value mismatch",expectedId1,actualId1);  assertEquals("getAttributes() return value mismatch",expectedId2,actualId2);}  }
class C{  public MyHashMap(int initialCapacity){  this(initialCapacity,DEFAULT_MAX_LOAD_FACTOR);}  }
class C{  public synchronized void flush(){  sampleHolder=new SampleHolder(SampleHolder.BUFFER_REPLACEMENT_MODE_NORMAL);  parsing=false;  result=null;  error=null;  runtimeError=null;}  }
class C{  @Override public void mouseReleased(GlobalMouseEvent event){}  }
class C{  @Ignore @Test public final void testSaveWithNull(){  thrown.expect(ConstraintViolationException.class);  srv.save(null);}  }
class C{  public TrackerDataHelper(Context context){  this(context,NO_FORMATTER);}  }
class C{  public boolean isCancelled(){  return cancelled;}  }
class C{  public PopupEncoder2Menu(){  super();  initialize();}  }
class C{  public static LC parseLayoutConstraint(String s){  LC lc=new LC();  if (s.length() == 0) {    return lc;  }  String[] parts=toTrimmedTokens(s,',');  for (int i=0; i < parts.length; i++) {    String part=parts[i];    if (part == null) {      continue;    }    int len=part.length();    if (len == 3 || len == 11) {      if (part.equals("ltr") || part.equals("rtl") || part.equals("lefttoright")|| part.equals("righttoleft")) {        lc.setLeftToRight(part.charAt(0) == 'l' ? Boolean.TRUE : Boolean.FALSE);        parts[i]=null;      }      if (part.equals("ttb") || part.equals("btt") || part.equals("toptobottom")|| part.equals("bottomtotop")) {        lc.setTopToBottom(part.charAt(0) == 't');        parts[i]=null;      }    }  }  for (  String part : parts) {    if (part == null || part.length() == 0) {      continue;    }    try {      int ix=-1;      char c=part.charAt(0);      if (c == 'w' || c == 'h') {        ix=startsWithLenient(part,"wrap",-1,true);        if (ix > -1) {          String num=part.substring(ix).trim();          lc.setWrapAfter(num.length() != 0 ? Integer.parseInt(num) : 0);          continue;        }        boolean isHor=c == 'w';        if (isHor && (part.startsWith("w ") || part.startsWith("width "))) {          String sz=part.substring(part.charAt(1) == ' ' ? 2 : 6).trim();          lc.setWidth(parseBoundSize(sz,false,true));          continue;        }        if (!isHor && (part.startsWith("h ") || part.startsWith("height "))) {          String uvStr=part.substring(part.charAt(1) == ' ' ? 2 : 7).trim();          lc.setHeight(parseBoundSize(uvStr,false,false));          continue;        }        if (part.length() > 5) {          String sz=part.substring(5).trim();          if (part.startsWith("wmin ")) {            lc.minWidth(sz);            continue;          } else           if (part.startsWith("wmax ")) {            lc.maxWidth(sz);            continue;          } else           if (part.startsWith("hmin ")) {            lc.minHeight(sz);            continue;          } else           if (part.startsWith("hmax ")) {            lc.maxHeight(sz);            continue;          }        }        if (part.startsWith("hidemode ")) {          lc.setHideMode(Integer.parseInt(part.substring(9)));          continue;        }      }      if (c == 'g') {        if (part.startsWith("gapx ")) {          lc.setGridGapX(parseBoundSize(part.substring(5).trim(),true,true));          continue;        }        if (part.startsWith("gapy ")) {          lc.setGridGapY(parseBoundSize(part.substring(5).trim(),true,false));          continue;        }        if (part.startsWith("gap ")) {          String[] gaps=toTrimmedTokens(part.substring(4).trim(),' ');          lc.setGridGapX(parseBoundSize(gaps[0],true,true));          lc.setGridGapY(gaps.length > 1 ? parseBoundSize(gaps[1],true,false) : lc.getGridGapX());          continue;        }      }      if (c == 'd') {        ix=startsWithLenient(part,"debug",5,true);        if (ix > -1) {          String millis=part.substring(ix).trim();          lc.setDebugMillis(millis.length() > 0 ? Integer.parseInt(millis) : 1000);          continue;        }      }      if (c == 'n') {        if (part.equals("nogrid")) {          lc.setNoGrid(true);          continue;        }        if (part.equals("nocache")) {          lc.setNoCache(true);          continue;        }        if (part.equals("novisualpadding")) {          lc.setVisualPadding(false);          continue;        }      }      if (c == 'f') {        if (part.equals("fill") || part.equals("fillx") || part.equals("filly")) {          lc.setFillX(part.length() == 4 || part.charAt(4) == 'x');          lc.setFillY(part.length() == 4 || part.charAt(4) == 'y');          continue;        }        if (part.equals("flowy")) {          lc.setFlowX(false);          continue;        }        if (part.equals("flowx")) {          lc.setFlowX(true);          continue;        }      }      if (c == 'i') {        ix=startsWithLenient(part,"insets",3,true);        if (ix > -1) {          String insStr=part.substring(ix).trim();          UnitValue[] ins=parseInsets(insStr,true);          LayoutUtil.putCCString(ins,insStr);          lc.setInsets(ins);          continue;        }      }      if (c == 'a') {        ix=startsWithLenient(part,new String[]{"aligny","ay"},new int[]{6,2},true);        if (ix > -1) {          UnitValue align=parseUnitValueOrAlign(part.substring(ix).trim(),false,null);          if (align == UnitValue.BASELINE_IDENTITY) {            throw new IllegalArgumentException("'baseline' can not be used to align the whole component group.");          }          lc.setAlignY(align);          continue;        }        ix=startsWithLenient(part,new String[]{"alignx","ax"},new int[]{6,2},true);        if (ix > -1) {          lc.setAlignX(parseUnitValueOrAlign(part.substring(ix).trim(),true,null));          continue;        }        ix=startsWithLenient(part,"align",2,true);        if (ix > -1) {          String[] gaps=toTrimmedTokens(part.substring(ix).trim(),' ');          lc.setAlignX(parseUnitValueOrAlign(gaps[0],true,null));          if (gaps.length > 1) {            lc.setAlignY(parseUnitValueOrAlign(gaps[1],false,null));          }          continue;        }      }      if (c == 'p') {        if (part.startsWith("packalign ")) {          String[] packs=toTrimmedTokens(part.substring(10).trim(),' ');          lc.setPackWidthAlign(packs[0].length() > 0 ? Float.parseFloat(packs[0]) : 0.5f);          if (packs.length > 1) {            lc.setPackHeightAlign(Float.parseFloat(packs[1]));          }          continue;        }        if (part.startsWith("pack ") || part.equals("pack")) {          String ps=part.substring(4).trim();          String[] packs=toTrimmedTokens(ps.length() > 0 ? ps : "pref pref",' ');          lc.setPackWidth(parseBoundSize(packs[0],false,true));          if (packs.length > 1) {            lc.setPackHeight(parseBoundSize(packs[1],false,false));          }          continue;        }      }      if (lc.getAlignX() == null) {        UnitValue alignX=parseAlignKeywords(part,true);        if (alignX != null) {          lc.setAlignX(alignX);          continue;        }      }      UnitValue alignY=parseAlignKeywords(part,false);      if (alignY != null) {        lc.setAlignY(alignY);        continue;      }      throw new IllegalArgumentException("Unknown Constraint: '" + part + "'\n");    } catch (    Exception ex) {      throw new IllegalArgumentException("Illegal Constraint: '" + part + "'\n"+ ex.getMessage());    }  }  return lc;}  }
class C{  public static PickResults doPick(Spatial root,final Ray3 pickRay){  root.updateWorldBound(true);  final PrimitivePickResults bpr=new PrimitivePickResults();  bpr.setCheckDistance(true);  PickingUtil.findPick(root,pickRay,bpr);  if (bpr.getNumber() == 0) {    return (null);  }  PickData closest=bpr.getPickData(0);  for (int i=1; i < bpr.getNumber(); ++i) {    PickData pd=bpr.getPickData(i);    if (closest.getIntersectionRecord().getClosestDistance() > pd.getIntersectionRecord().getClosestDistance()) {      closest=pd;    }  }  return bpr;}  }
class C{  private MigrationInfoDumper(){}  }
class C{  public void testOneTrackOneSegment() throws Exception {  Capture<Track> track=new Capture<Track>();  Location location0=createLocation(0,DATE_FORMAT_0.parse(TRACK_TIME_0).getTime());  Location location1=createLocation(1,DATE_FORMAT_1.parse(TRACK_TIME_1).getTime());  expect(myTracksProviderUtils.insertTrack((Track)AndroidMock.anyObject())).andReturn(TRACK_ID_0_URI);  expectFirstTrackPoint(location0,TRACK_ID_0,TRACK_POINT_ID_0);  expect(myTracksProviderUtils.bulkInsertTrackPoint(LocationsMatcher.eqLoc(location1),eq(1),eq(TRACK_ID_0))).andReturn(1);  expect(myTracksProviderUtils.getLastTrackPointId(TRACK_ID_0)).andReturn(TRACK_POINT_ID_1);  expect(myTracksProviderUtils.getTrack(PreferencesUtils.getLong(getContext(),R.string.recording_track_id_key))).andStubReturn(null);  expectUpdateTrack(track,true,TRACK_ID_0);  AndroidMock.replay(myTracksProviderUtils);  InputStream inputStream=new ByteArrayInputStream(VALID_ONE_TRACK_ONE_SEGMENT_GPX.getBytes());  GpxFileTrackImporter gpxFileTrackImporter=new GpxFileTrackImporter(getContext(),myTracksProviderUtils);  long trackId=gpxFileTrackImporter.importFile(inputStream);  assertEquals(TRACK_ID_0,trackId);  long time0=DATE_FORMAT_0.parse(TRACK_TIME_0).getTime();  long time1=DATE_FORMAT_1.parse(TRACK_TIME_1).getTime();  assertEquals(time1 - time0,track.getValue().getTripStatistics().getTotalTime());  AndroidMock.verify(myTracksProviderUtils);  verifyTrack(track.getValue(),TRACK_NAME_0,TRACK_DESCRIPTION_0,time0);}  }
class C{  public CloseSessionResponse CloseSession(CloseSessionRequest req) throws ServiceFaultException, ServiceResultException {  return (CloseSessionResponse)channel.serviceRequest(req);}  }
class C{  public Object removeAttributeValue(AttributeKey<?> key){  return removeAttributeValue(key.getId());}  }
class C{  public Yaml(){  this(new Constructor(),new Representer(),new DumperOptions(),new Resolver());}  }
class C{  public TrunkingSquelchController(boolean allowSquelchOverride){  mAllowSquelchOverride=allowSquelchOverride;  mSquelchMode=SquelchMode.AUTOMATIC;}  }
class C{  final protected int depth(Node node){  int i=0;  while ((node=node.jjtGetParent()) != null) {    i++;  }  return i;}  }
class C{  @Override public long runTask(){  if (CurrentTime.isTest()) {    return -1;  }  _lastTime=CurrentTime.getExactTime();  while (true) {    long now=CurrentTime.getExactTime();    long next=_clock.extractAlarm(now,false);    if (next < 0) {      return 120000L;    } else     if (now < next) {      return Math.min(next - now,120000L);    }  }}  }
class C{  public void appendStart(StringBuffer buffer,Object object){  if (object != null) {    appendClassName(buffer,object);    appendIdentityHashCode(buffer,object);    appendContentStart(buffer);    if (fieldSeparatorAtStart) {      appendFieldSeparator(buffer);    }  }}  }
class C{  public void addInvokedynamic(int bootstrap,String name,String desc){  int nt=constPool.addNameAndTypeInfo(name,desc);  int dyn=constPool.addInvokeDynamicInfo(bootstrap,nt);  add(INVOKEDYNAMIC);  addIndex(dyn);  add(0,0);  growStack(Descriptor.dataSize(desc));}  }
class C{  public void unsetParamCode(){  this.paramCode=null;}  }
class C{  @Override public boolean onUsed(final RPEntity user){  if (!this.isContained()) {    user.sendPrivateText("The staff must be wielded.");    return false;  }  final StendhalRPZone zone=user.getZone();  if (zone.isInProtectionArea(user)) {    user.sendPrivateText("The aura of protection in this area lets the dead sleep in peace.");    return false;  }  if (zone.getNPCList().size() >= MAX_ZONE_NPCS) {    user.sendPrivateText("Mysteriously, the staff does not function! Perhaps this area is too crowded...");    logger.warn(user.getName() + " is trying to use the necromancer staff but there are too many npcs in " + zone.getName());    return false;  }  for (  final RPObject inspected : zone) {    if (inspected instanceof Corpse && user.squaredDistance(Integer.parseInt(inspected.get("x")),Integer.parseInt(inspected.get("y"))) <= SQUARED_RANGE) {      final AttackableCreature creature=pickSuitableCreature(user.getLevel());      if (creature == null) {        user.sendPrivateText("This staff does not seem to work. Maybe it has lost its unholy power.");        return false;      }      StendhalRPAction.placeat(zone,creature,Integer.parseInt(inspected.get("x")),Integer.parseInt(inspected.get("y")));      zone.remove(inspected);      creature.init();      creature.setMaster(user.getTitle());      creature.clearDropItemList();      creature.put("title_type","friend");      user.damage(HP_FACTOR * creature.getLevel(),this);      user.notifyWorldAboutChanges();      return true;    }  }  user.sendPrivateText("Step closer to corpses to awake them.");  return false;}  }
class C{  public CreatureRespawnPoint(final StendhalRPZone zone,final int x,final int y,final Creature creature,final int maximum){  this.zone=zone;  this.x=x;  this.y=y;  this.prototypeCreature=creature;  this.maximum=maximum;  this.respawnTime=creature.getRespawnTime();  this.creatures=new LinkedList<Creature>();  respawning=true;  SingletonRepository.getTurnNotifier().notifyInTurns(calculateNextRespawnTurn(),this);}  }
class C{  public void stateChanged(ChangeEvent e){  if (settingColor) {    return;  }  Color color=getColor();  if (e.getSource() == hueSpinner) {    setHue(((Number)hueSpinner.getValue()).floatValue() / 360,false);  } else   if (e.getSource() == saturationSpinner) {    setSaturation(((Number)saturationSpinner.getValue()).floatValue() / 255);  } else   if (e.getSource() == valueSpinner) {    setBrightness(((Number)valueSpinner.getValue()).floatValue() / 255);  } else   if (e.getSource() == redSpinner) {    setRed(((Number)redSpinner.getValue()).intValue());  } else   if (e.getSource() == greenSpinner) {    setGreen(((Number)greenSpinner.getValue()).intValue());  } else   if (e.getSource() == blueSpinner) {    setBlue(((Number)blueSpinner.getValue()).intValue());  }}  }
class C{  public Feature(String name,Object value,boolean isDefaultValue){  this.name=FeatureUtil.escapeFeatureName(name).intern();  this.value=value;  this.isDefaultValue=isDefaultValue;}  }
class C{  public static void doEntryOperations() throws Exception {  Region r1=cache.getRegion(Region.SEPARATOR + REGION_NAME);  String keyPrefix="server-";  for (int i=0; i < 10; i++) {    r1.put(keyPrefix + i,keyPrefix + "val-" + i);  }}  }
class C{  public Transit createNewTransit(String userName){  boolean found=false;  String testName="";  Transit z;  while (!found) {    int nextAutoTransitRef=lastAutoTransitRef + 1;    testName="IZ" + nextAutoTransitRef;    z=getBySystemName(testName);    if (z == null) {      found=true;    }    lastAutoTransitRef=nextAutoTransitRef;  }  return createNewTransit(testName,userName);}  }
class C{  protected static <A extends Annotation,T>Set<PersistentResource<T>> filter(Class<A> permission,Set<PersistentResource<T>> resources,boolean skipNew){  Set<PersistentResource<T>> filteredSet=new LinkedHashSet<>();  for (  PersistentResource<T> resource : resources) {    PermissionExecutor permissionExecutor=resource.getRequestScope().getPermissionExecutor();    try {      if (!(skipNew && resource.getRequestScope().getNewResources().contains(resource))) {        if (!permissionExecutor.shouldShortCircuitPermissionChecks(permission,resource.getResourceClass(),null)) {          ExpressionResult expressionResult=permissionExecutor.checkUserPermissions(resource.getResourceClass(),permission);          if (expressionResult == ExpressionResult.PASS) {            filteredSet.add(resource);            continue;          }          resource.checkFieldAwarePermissions(permission);        }      }      filteredSet.add(resource);    } catch (    ForbiddenAccessException e) {    }  }  if (resources instanceof SingleElementSet && resources.equals(filteredSet)) {    return resources;  }  return filteredSet;}  }
class C{  public void initialize(final String componentFolder) throws IOException, RequiredInputMissingException {  if (StringUtils.isBlank(componentFolder))   throw new RequiredInputMissingException("Missing required value for parameter 'componentFolder'");  File folder=new File(componentFolder);  if (!folder.isDirectory())   throw new IOException("Provided input '" + componentFolder + "' does not reference a valid folder");  File[] jarFiles=folder.listFiles();  if (jarFiles == null || jarFiles.length < 1)   throw new RequiredInputMissingException("No JAR files found in folder '" + componentFolder + "'");  logger.info("Initializing component classloader [folder=" + componentFolder + "]");  for (  File jarFile : jarFiles) {    if (jarFile.isFile()) {      JarInputStream jarInputStream=null;      try {        jarInputStream=new JarInputStream(new FileInputStream(jarFile));        JarEntry jarEntry=null;        while ((jarEntry=jarInputStream.getNextJarEntry()) != null) {          String jarEntryName=jarEntry.getName();          if (StringUtils.endsWith(jarEntryName,".class")) {            jarEntryName=jarEntryName.substring(0,jarEntryName.length() - 6).replace('/','.');            this.byteCode.put(jarEntryName,loadBytes(jarInputStream));          } else {            this.resources.put(jarEntryName,loadBytes(jarInputStream));          }        }      } catch (      Exception e) {        logger.error("Failed to read from JAR file '" + jarFile.getAbsolutePath() + "'. Error: "+ e.getMessage());      } finally {        try {          jarInputStream.close();        } catch (        Exception e) {          logger.error("Failed to close open JAR file '" + jarFile.getAbsolutePath() + "'. Error: "+ e.getMessage());        }      }    }  }  logger.info("Analyzing " + this.byteCode.size() + " classes for component annotation");  for (  String cjf : this.byteCode.keySet()) {    try {      Class<?> c=loadClass(cjf);      Annotation spqrComponentAnnotation=getSPQRComponentAnnotation(c);      if (spqrComponentAnnotation != null) {        Method spqrAnnotationTypeMethod=spqrComponentAnnotation.getClass().getMethod(ANNOTATION_TYPE_METHOD,(Class[])null);        Method spqrAnnotationNameMethod=spqrComponentAnnotation.getClass().getMethod(ANNOTATION_NAME_METHOD,(Class[])null);        Method spqrAnnotationVersionMethod=spqrComponentAnnotation.getClass().getMethod(ANNOTATION_VERSION_METHOD,(Class[])null);        Method spqrAnnotationDescriptionMethod=spqrComponentAnnotation.getClass().getMethod(ANNOTATION_DESCRIPTION_METHOD,(Class[])null);        @SuppressWarnings("unchecked") Enum<MicroPipelineComponentType> o=(Enum<MicroPipelineComponentType>)spqrAnnotationTypeMethod.invoke(spqrComponentAnnotation,(Object[])null);        final MicroPipelineComponentType componentType=Enum.valueOf(MicroPipelineComponentType.class,o.name());        final String componentName=(String)spqrAnnotationNameMethod.invoke(spqrComponentAnnotation,(Object[])null);        final String componentVersion=(String)spqrAnnotationVersionMethod.invoke(spqrComponentAnnotation,(Object[])null);        final String componentDescription=(String)spqrAnnotationDescriptionMethod.invoke(spqrComponentAnnotation,(Object[])null);        this.managedComponents.put(getManagedComponentKey(componentName,componentVersion),new ComponentDescriptor(c.getName(),componentType,componentName,componentVersion,componentDescription));        logger.info("pipeline component found [type=" + componentType + ", name="+ componentName+ ", version="+ componentVersion+ "]");        ;      }    } catch (    Throwable e) {      e.printStackTrace();      logger.error("Failed to load class '" + cjf + "'. Error: "+ e.getMessage());    }  }}  }
class C{  public void clearSelection(){  List<CalendarDay> dates=getSelectedDates();  adapter.clearSelections();  for (  CalendarDay day : dates) {    dispatchOnDateSelected(day,false);  }}  }
class C{  protected boolean hasOutstandingChanges(){  return (fAmtFrom.hasChanged() || fAmtTo.hasChanged() || fBankAccount_ID.hasChanged()|| fCash_ID.hasChanged()|| fCashBook_ID.hasChanged()|| fCharge_ID.hasChanged()|| fDateFrom.hasChanged()|| fDateTo.hasChanged()|| fInvoice_ID.hasChanged()|| fPayment_ID.hasChanged()|| cbAbsolute.hasChanged());}  }
class C{  public void addListener(final IZyEditModeListener<NodeType,EdgeType> listener){  m_listeners.add(listener);}  }
class C{  public PurchasePanel(final GameData data,final MapPanel map){  super(data,map);  m_purchasedPreviousRoundsUnits=new SimpleUnitPanel(map.getUIContext());  m_purhcasedUnits=new SimpleUnitPanel(map.getUIContext());  m_buyButton=new JButton(BUY);  m_buyButton.addActionListener(PURCHASE_ACTION);  m_purchasedPreviousRoundsLabel=new JLabel("Unplaced from previous rounds");}  }
class C{  protected void paintTabBorder(final Graphics g,final int tabPlacement,final int tabIndex,final int x,final int y,final int w,final int h,final boolean isSelected){  g.setColor(lightHighlight);switch (tabPlacement) {case LEFT:    g.drawLine(x + 1,y + h - 2,x + 1,y + h - 2);  g.drawLine(x,y + 2,x,y + h - 3);g.drawLine(x + 1,y + 1,x + 1,y + 1);g.drawLine(x + 2,y,x + w - 1,y);g.setColor(shadow);g.drawLine(x + 2,y + h - 2,x + w - 1,y + h - 2);g.setColor(darkShadow);g.drawLine(x + 2,y + h - 1,x + w - 1,y + h - 1);break;case RIGHT:g.drawLine(x,y,x + w - 3,y);g.setColor(shadow);g.drawLine(x,y + h - 2,x + w - 3,y + h - 2);g.drawLine(x + w - 2,y + 2,x + w - 2,y + h - 3);g.setColor(darkShadow);g.drawLine(x + w - 2,y + 1,x + w - 2,y + 1);g.drawLine(x + w - 2,y + h - 2,x + w - 2,y + h - 2);g.drawLine(x + w - 1,y + 2,x + w - 1,y + h - 3);g.drawLine(x,y + h - 1,x + w - 3,y + h - 1);break;case BOTTOM:g.drawLine(x,y,x,y + h - 3);g.drawLine(x + 1,y + h - 2,x + 1,y + h - 2);g.setColor(shadow);g.drawLine(x + 2,y + h - 2,x + w - 3,y + h - 2);g.drawLine(x + w - 2,y,x + w - 2,y + h - 3);g.setColor(darkShadow);g.drawLine(x + 2,y + h - 1,x + w - 3,y + h - 1);g.drawLine(x + w - 2,y + h - 2,x + w - 2,y + h - 2);g.drawLine(x + w - 1,y,x + w - 1,y + h - 3);break;case TOP:default :g.drawLine(x,y + 2,x,y + h - 1);g.drawLine(x + 1,y + 1,x + 1,y + 1);g.drawLine(x + 2,y,x + w - 3,y);g.setColor(shadow);g.drawLine(x + w - 2,y + 2,x + w - 2,y + h - 1);g.setColor(darkShadow);g.drawLine(x + w - 1,y + 2,x + w - 1,y + h - 1);g.drawLine(x + w - 2,y + 1,x + w - 2,y + 1);}}  }
class C{  private void analize(){  StringTokenizer tokenizer2=new StringTokenizer(sourceData,"|");  String nextToken=tokenizer2.nextToken();  ver=nextToken.substring(1,nextToken.length() - 1);  StringTokenizer tokenizer=new StringTokenizer(tokenizer2.nextToken(),",");  nextToken=tokenizer.nextToken();  logDocColName=nextToken.substring(1,nextToken.length() - 1);  nextToken=tokenizer.nextToken();  docColName=nextToken.substring(1,nextToken.length() - 1);  nextToken=tokenizer.nextToken();  docColFmtDef=Integer.parseInt(nextToken);  nextToken=tokenizer.nextToken();  logSustColName=nextToken.substring(1,nextToken.length() - 1);  nextToken=tokenizer.nextToken();  sustColName=nextToken.substring(1,nextToken.length() - 1);  nextToken=tokenizer.nextToken();  sustColFmtDef=Integer.parseInt(nextToken);  nextToken=tokenizer.nextToken();  primaryColName=nextToken.substring(1,nextToken.length() - 1);  nextToken=tokenizer.nextToken();  from=nextToken.substring(1,nextToken.length() - 1);  nextToken=tokenizer.nextToken();  where=nextToken.substring(1,nextToken.length() - 1);  nextToken=tokenizer.nextToken();  docOrderBy=nextToken.substring(1,nextToken.length() - 1);  nextToken=tokenizer.nextToken();  sustOrderBy=nextToken.substring(1,nextToken.length() - 1);}  }
class C{  public SliderListener(JLabel f){  tf=f;}  }
class C{  public boolean isConst(){  return const_;}  }
class C{  public void logError(Object message,Throwable exception){  logInternal(ERROR,message,exception);}  }
class C{  @Override protected void populateMBeanDescriptor(Descriptor desc,Object managedBean,String beanKey){  Class intf=findJmxInterface(beanKey,AopUtils.getTargetClass(managedBean));  ManagedResource mr=this.attributeSource.getManagedResource(intf);  if (mr == null) {    applyDefaultCurrencyTimeLimit(desc);    return;  }  applyCurrencyTimeLimit(desc,mr.getCurrencyTimeLimit());  if (mr.isLog()) {    desc.setField(FIELD_LOG,"true");  }  if (StringUtils.hasLength(mr.getLogFile())) {    desc.setField(FIELD_LOG_FILE,mr.getLogFile());  }  if (StringUtils.hasLength(mr.getPersistPolicy())) {    desc.setField(FIELD_PERSIST_POLICY,mr.getPersistPolicy());  }  if (mr.getPersistPeriod() >= 0) {    desc.setField(FIELD_PERSIST_PERIOD,Integer.toString(mr.getPersistPeriod()));  }  if (StringUtils.hasLength(mr.getPersistName())) {    desc.setField(FIELD_PERSIST_NAME,mr.getPersistName());  }  if (StringUtils.hasLength(mr.getPersistLocation())) {    desc.setField(FIELD_PERSIST_LOCATION,mr.getPersistLocation());  }}  }
class C{  private String concatSubNameSpace(Application application) throws UnsupportedEncodingException {  String subNameSpace=AlphaNumericsCharactersCheckUtils.convertToAlphaNumerics(application.getName()) + "-" + AlphaNumericsCharactersCheckUtils.convertToAlphaNumerics(application.getUser().getLogin())+ "-"+ AlphaNumericsCharactersCheckUtils.convertToAlphaNumerics(application.getUser().getOrganization());  return subNameSpace;}  }
class C{  public FindClubAction(int entityId){  super(entityId);}  }
class C{  public static Iterator allCSS2PropertyNames(){  return ALL_PROPERTY_NAMES.keySet().iterator();}  }
class C{  public String businessObjectDefinitionKeyToString(BusinessObjectDefinitionKey businessObjectDefinitionKey){  return String.format("namespace: \"%s\", businessObjectDefinitionName: \"%s\"",businessObjectDefinitionKey.getNamespace(),businessObjectDefinitionKey.getBusinessObjectDefinitionName());}  }
class C{  public void runTest() throws Throwable {  Document doc;  EntityReference entRef;  CharacterData entText;  doc=(Document)load("staff",true);  entRef=doc.createEntityReference("ent3");  assertNotNull("createdEntRefNotNull",entRef);  entText=(CharacterData)entRef.getFirstChild();  assertNotNull("entTextNotNull",entText);{    boolean success=false;    try {      entText.setNodeValue("newValue");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public static long monthBefore(final long time){  return timeFrom(time,1,CalendarUnit.MONTH,Occurrence.BEFORE);}  }
class C{  private void addRate(Map<String,Map<String,Double>> ratesMap,String sourceCurrencyCode,String targetCurrencyCode,double rate){  Map<String,Double> rhs=ratesMap.get(sourceCurrencyCode);  if (rhs == null) {    rhs=new HashMap<>();    ratesMap.put(sourceCurrencyCode,rhs);  }  rhs.put(targetCurrencyCode,rate);}  }
class C{  public String queryType(){  return qryType;}  }
class C{  public void init(){  setCanGrabGraphic(false);  Debug.message("eomg","EditableOMCircle.init()");  setStateMachine(new CircleStateMachine(this));  gPoints=new GrabPoint[11];}  }
class C{  public void pointerDragged(final int[] x,final int[] y){  if (impl.getCurrentForm() == null) {    return;  }  longPointerCharged=false;  if (x.length == 1) {    addPointerDragEventWithTimestamp(x[0],y[0]);  } else {    addPointerEvent(POINTER_DRAGGED_MULTI,x,y);  }}  }
class C{  private static void deletePortMapping(final UPnPMapping mapping){  if (mapping.getPort() > 0 && gatewayDevice != null) {    boolean unmapped;    String msg;    try {      unmapped=gatewayDevice.deletePortMapping(mapping.getPort(),mapping.getProtocol());      msg="port " + mapping.getPort() + " on device "+ gatewayDevice.getFriendlyName();      if (unmapped) {        LOG.info("unmapped " + msg);      } else {        LOG.warn("could not unmap " + msg);      }    } catch (    SAXException|IOException e) {      LOG.severe("unmapping error: " + e.getMessage());    }  }  mapping.setPort(0);}  }
class C{  public static RxYouTubeExtractor create(){  return create(null,null);}  }
class C{  @Override public void destroy(){  uberRidesService=null;  credential=null;  super.destroy();}  }
class C{  String sourceFormForInitializer(AnnotationValue annotationValue,ProcessingEnvironment processingEnv,String memberName,Element context){  SourceFormVisitor visitor=new InitializerSourceFormVisitor(processingEnv,memberName,context);  StringBuilder sb=new StringBuilder();  visitor.visit(annotationValue,sb);  return sb.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.862 -0500",hash_original_method="60FAB9592DF6A1D398A3997EC9565FA6",hash_generated_method="FAE26D84A1A415F192AC1D3B16BA7F0C") public final int countDataPaths(){  return mDataPaths != null ? mDataPaths.size() : 0;}  }
class C{  public ClientHttpRequest(final Link link){  assert link != null : "The Link containing the URI and method for the client's HTTP request cannot be null!";  this.link=link;}  }
class C{  public boolean hasExtensions(){  return extensions != null;}  }
class C{  @POST @Path("backup/upload/") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public Response uploadBackup(@QueryParam("tag") final String backupTag){  log.info("Received upload backup request, backup tag={}",backupTag);  BackupUploadStatus job=new BackupUploadStatus();  job.setBackupName(backupTag);  job.setStatus(Status.NOT_STARTED);  jobProducer.enqueue(job);  backupScheduler.getUploadExecutor().addPendingUploadTask(backupTag);  return Response.status(ASYNC_STATUS).build();}  }
class C{  private SPUIComponentProvider(){}  }
class C{  @NoInline public static void write(String value){  if (value == null) {    write("null");  } else {    if (runningVM) {      char[] chars=java.lang.JikesRVMSupport.getBackingCharArray(value);      int numChars=java.lang.JikesRVMSupport.getStringLength(value);      int offset=java.lang.JikesRVMSupport.getStringOffset(value);      for (int i=0; i < numChars; i++) {        write(chars[offset + i]);      }    } else {      writeNotRunningVM(value);    }  }}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);}  }
class C{  public void removeAll(){  int i=myMaps.size();  myMaps.retainAll(myMaps);  notifyItemRangeRemoved(0,i);}  }
class C{  public void acceptChanges() throws SyncProviderException {  throw new UnsupportedOperationException();}  }
class C{  public Boolean isIpPoolEnabled(){  return ipPoolEnabled;}  }
class C{  @Override public void updateNClob(String columnLabel,NClob x) throws SQLException {  throw unsupported("NClob");}  }
class C{  public Boolean isLogonBannerDisabled(){  return logonBannerDisabled;}  }
class C{  private ColorPickerSwatch createColorSwatch(int color,int selectedColor){  ColorPickerSwatch view=new ColorPickerSwatch(getContext(),color,color == selectedColor,mOnColorSelectedListener);  TableRow.LayoutParams params=new TableRow.LayoutParams(mSwatchLength,mSwatchLength);  params.setMargins(mMarginSize,mMarginSize,mMarginSize,mMarginSize);  view.setLayoutParams(params);  return view;}  }
class C{  public Comparator<Point2D> polarOrder(){  return new PolarOrder();}  }
class C{  public MBeanServerDelegate(){  stamp=getStamp();  broadcaster=new NotificationBroadcasterSupport();}  }
class C{  public final boolean isVisualPadding(){  return visualPadding;}  }
class C{  @Nonnull public BugInstance addSuperclass(PreorderVisitor visitor){  String className=ClassName.toDottedClassName(visitor.getSuperclassName());  addClass(className);  return this;}  }
class C{  public SparseDoubleMatrix1D(double[] values){  this(values.length);  assign(values);}  }
class C{  public void tag(Tag tag){  if (!enabled) {    return;  }  TagType tagType=tag.getType();  Element node;switch (tagType) {case START:    if (domBuilder.config.isIgnoreWhitespacesBetweenTags()) {      removeLastChildNodeIfEmptyText(parentNode,false);    }  node=createElementNode(tag);if (domBuilder.config.isImpliedEndTags()) {  while (true) {    String parentNodeName=parentNode.getNodeName();    if (!implRules.implicitlyCloseParentTagOnNewTag(parentNodeName,node.getNodeName())) {      break;    }    parentNode=parentNode.getParentNode();    if (log.isDebugEnabled()) {      log.debug("Implicitly closed tag <" + node.getNodeName() + "> ");    }  }}parentNode.addChild(node);if (node.isVoidElement() == false) {parentNode=node;}break;case END:if (domBuilder.config.isIgnoreWhitespacesBetweenTags()) {removeLastChildNodeIfEmptyText(parentNode,true);}String tagName=tag.getName().toString();Node matchingParent=findMatchingParentOpenTag(tagName);if (matchingParent == parentNode) {parentNode=parentNode.getParentNode();break;}if (matchingParent == null) {error("Orphan closed tag ignored: </" + tagName + "> "+ tag.getTagPosition());break;}if (domBuilder.config.isImpliedEndTags()) {boolean fixed=false;while (implRules.implicitlyCloseParentTagOnTagEnd(parentNode.getNodeName(),tagName)) {parentNode=parentNode.getParentNode();if (log.isDebugEnabled()) {log.debug("Implicitly closed tag <" + tagName + ">");}if (parentNode == matchingParent) {parentNode=matchingParent.parentNode;fixed=true;break;}}if (fixed) {break;}}fixUnclosedTagsUpToMatchingParent(tag,matchingParent);break;case SELF_CLOSING:if (domBuilder.config.isIgnoreWhitespacesBetweenTags()) {removeLastChildNodeIfEmptyText(parentNode,false);}node=createElementNode(tag);parentNode.addChild(node);break;}}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image,int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,image.getTransparency());}  }
class C{  public static <T extends BaseFragment>T newInstance(Class<T> fragmentClazz,Bundle args){  T fragment=null;  try {    fragment=fragmentClazz.newInstance();    fragment.setArguments(args);  } catch (  java.lang.InstantiationException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }  return fragment;}  }
class C{  public boolean isEnabledForCurrentJRE(){  if ("".equals(requireJRE)) {    return true;  }  try {    JavaVersion requiredVersion=new JavaVersion(requireJRE);    JavaVersion runtimeVersion=JavaVersion.getRuntimeVersion();    if (DEBUG_JAVA_VERSION) {      System.out.println("Checking JRE version for " + getShortName() + " (requires "+ requiredVersion+ ", running on "+ runtimeVersion+ ")");    }    boolean enabledForCurrentJRE=runtimeVersion.isSameOrNewerThan(requiredVersion);    if (DEBUG_JAVA_VERSION) {      System.out.println("\t==> " + enabledForCurrentJRE);    }    return enabledForCurrentJRE;  } catch (  JavaVersionException e) {    if (DEBUG_JAVA_VERSION) {      System.out.println("Couldn't check Java version: " + e.toString());      e.printStackTrace(System.out);    }    return false;  }}  }
class C{  public void validate(String name,StringMap scope,String value,boolean isCheckDuplicate){  CustomConfigType item=getCustomConfigType(name);  if (item == null) {    throw CustomConfigControllerException.exceptions.configTypeNotFound(name);  }  if (isCheckDuplicate) {    CustomConfig config=getUserDefinedCustomConfig(constructConfigName(name,scope));    if (config != null && config.getScope().equals(scope)) {      throw CustomConfigControllerException.exceptions.customConfigAlreadyExists(config.getLabel());    }    for (    String key : scope.keySet()) {      if (!item.getScope().containsKey(key)) {        throw CustomConfigControllerException.exceptions.scopeTypeNotSupported(key,name);      }      List<String> scopeVals=java.util.Arrays.asList(item.getScope().get(key).split(","));      if (!scopeVals.contains(scope.get(key))) {        throw CustomConfigControllerException.exceptions.scopeValueNotSupported(scope.get(key),key,name);      }    }  }  value=getCustomConfigPreviewValue(name,value,scope,null);  for (  CustomConfigConstraint constraint : item.getConstraints()) {    constraint.validate(value,scope.values().iterator().next());  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getEntity_();}  }
class C{  public static long mod(long a,long m){  long result=a % m;  if (result < 0) {    result+=m;  }  return result;}  }
class C{  public static void main(final String[] args) throws Exception {  if (args.length != 1) {    System.err.println("Verifies the given class.");    System.err.println("Usage: CheckClassAdapter " + "<fully qualified class name or class file name>");    return;  }  ClassReader cr;  if (args[0].endsWith(".class")) {    cr=new ClassReader(new FileInputStream(args[0]));  } else {    cr=new ClassReader(args[0]);  }  verify(cr,false,new PrintWriter(System.err));}  }
class C{  public static Set<SootClass> loadClassesFromJar(JarFile jarFile,boolean appClass,Set<String> doNotLoad){  LinkedHashSet<SootClass> classSet=new LinkedHashSet<SootClass>();  Enumeration<JarEntry> allEntries=jarFile.entries();  while (allEntries.hasMoreElements()) {    JarEntry entry=allEntries.nextElement();    String name=entry.getName();    if (!name.endsWith(".class")) {      continue;    }    String clsName=name.substring(0,name.length() - 6).replace('/','.');    if (doNotLoad.contains(clsName)) {      continue;    }    if (appClass) {      SootClass clz=Scene.v().loadClass(clsName,SootClass.BODIES);      classSet.add(clz);      clz.setApplicationClass();      logger.debug("Loading from {}: {} (app)",jarFile.getName(),clsName);    } else {      SootClass clz=Scene.v().loadClass(clsName,SootClass.SIGNATURES);      classSet.add(clz);      clz.setLibraryClass();      logger.debug("Loading from {}: {} (lib)",jarFile.getName(),clsName);    }  }  return classSet;}  }
class C{  public Matrix4f scaleAround(float sx,float sy,float sz,float ox,float oy,float oz){  return scaleAround(sx,sy,sz,ox,oy,oz,this);}  }
class C{  public void testNegateNegative(){  String a="-92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=41;  String c="92948782094488478231212478987482988429808779810457634781384756794987";  int cScale=41;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);  assertEquals("incorrect value",cNumber,aNumber.negate());}  }
class C{  public boolean dynInit() throws Exception {  log.config("");  super.dynInit();  window.setTitle(getTitle());  initBPartner(true);  bPartnerField.addValueChangeListener(this);  loadRMA();  return true;}  }
class C{  public LinearKernel(double c){  this.c=c;}  }
class C{  public List<Metric> union(List<Metric> metrics){  SystemAssert.requireArgument(metrics != null,"Cannot transform empty metric/metrics");  if (metrics.isEmpty()) {    return metrics;  }  List<Metric> newMetricsList=new ArrayList<Metric>();  Metric newMetric=reduce(metrics);  Map<Long,String> reducedDatapoints=newMetric.getDatapoints();  Set<Long> sharedTimestamps=reducedDatapoints.keySet();  Map<Long,String> unionDatapoints=new TreeMap<Long,String>();  for (  Metric metric : metrics) {    for (    Map.Entry<Long,String> entry : metric.getDatapoints().entrySet()) {      if (!sharedTimestamps.contains(entry.getKey())) {        unionDatapoints.put(entry.getKey(),entry.getValue());      }    }  }  unionDatapoints.putAll(reduce(metrics).getDatapoints());  newMetric.setDatapoints(unionDatapoints);  newMetricsList.add(newMetric);  return newMetricsList;}  }
class C{  public boolean resourceSupportAR(int id){  boolean flag=false;  if (id < 0) {    flag=false;  } else {    flag=checkResource(arList,id);  }  return flag;}  }
class C{  static AttrAccept createFromString(final String str) throws BOSHException {  if (str == null) {    return null;  } else {    return new AttrAccept(str);  }}  }
class C{  private void commit() throws SQLException {  if (m_conn != null && !m_conn.getAutoCommit()) {    m_conn.commit();  }}  }
class C{  public boolean isStandby(){  return getRole().equals(DataSourceRole.standby.toString());}  }
class C{  public GitlabMergeRequest updateMergeRequest(Serializable projectId,Integer mergeRequestId,String targetBranch,Integer assigneeId,String title,String description,String stateEvent,String labels) throws IOException {  Query query=new Query().appendIf("target_branch",targetBranch).appendIf("assignee_id",assigneeId).appendIf("title",title).appendIf("description",description).appendIf("state_event",stateEvent).appendIf("labels",labels);  String tailUrl=GitlabProject.URL + "/" + sanitizeProjectId(projectId)+ "/merge_request/"+ mergeRequestId+ query.toString();  return retrieve().method("PUT").to(tailUrl,GitlabMergeRequest.class);}  }
class C{  @Override public boolean isResetted(){  return (leftTop.isResetted() && rightBottom.isResetted());}  }
class C{  public static Number plus(Number left,Character right){  return NumberNumberPlus.plus(left,Integer.valueOf(right));}  }
class C{  public static void addClipboardListener(final ClipboardListener l){  listenerList.add(l);}  }
class C{  private void resizeFramebufferTexture(){  glDeleteTextures(raytraceTexture);  glDeleteTextures(positionTexture);  glDeleteTextures(normalTexture);  glDeleteRenderbuffers(depthBuffer);  glDeleteFramebuffers(fbo);  createRaytracingTexture();  createRasterizerTextures();  createRasterFrameBufferObject();}  }
class C{  public void readMetaData(Transfer transfer) throws IOException {  dataType=transfer.readInt();  precision=transfer.readLong();  scale=transfer.readInt();  nullable=transfer.readInt();}  }
class C{  public void clearSelectedFeatures(){  selectedFeatures=new BooleanBitArray1D((int)lasFile.getNumPointRecords() + 1);  selectedFeatureNumbers.clear();  this.selectedFeatureNumber=-2;  this.pcs.firePropertyChange("selectedFeatureNumber",-1,selectedFeatureNumber);}  }
class C{  public static WritableDoubleDataStore makeDoubleStorage(DBIDs ids,int hints,double def){  return DataStoreFactory.FACTORY.makeDoubleStorage(ids,hints,def);}  }
class C{  public final double y(){  return this.y;}  }
class C{  public boolean showDialog(){  setVisible(true);  return continueQueue;}  }
class C{  @Override public void writeToParcel(Parcel dest,int flags){  super.writeToParcel(dest,flags,TYPE_WCDMA);  mCellIdentityWcdma.writeToParcel(dest,flags);  mCellSignalStrengthWcdma.writeToParcel(dest,flags);}  }
class C{  public static List<MethodNode> findMethodsWithParameter(Collection<MethodNode> methodNodes,Type expectedParamType){  Validate.notNull(methodNodes);  Validate.notNull(expectedParamType);  Validate.noNullElements(methodNodes);  Validate.isTrue(expectedParamType.getSort() != Type.METHOD && expectedParamType.getSort() != Type.VOID);  List<MethodNode> ret=new ArrayList<>();  for (  MethodNode methodNode : methodNodes) {    Type methodDescType=Type.getType(methodNode.desc);    Type[] methodParamTypes=methodDescType.getArgumentTypes();    if (Arrays.asList(methodParamTypes).contains(expectedParamType)) {      ret.add(methodNode);    }  }  return ret;}  }
class C{  public static String toHexString(byte[] input,String prefix,String seperator){  String result=new String(prefix);  for (int i=0; i < input.length; i++) {    result+=HEX_CHARS[(input[i] >>> 4) & 0x0f];    result+=HEX_CHARS[(input[i]) & 0x0f];    if (i < input.length - 1) {      result+=seperator;    }  }  return result;}  }
class C{  public MarketplaceAccessTypeUneligibleForOperationException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof XorOnlyAttribute))   return false;  if (obj == this)   return true;  XorOnlyAttribute att=(XorOnlyAttribute)obj;  if (att.getAttributeType() != getAttributeType() || att.getDataLength() != getDataLength())   return false;  return true;}  }
class C{  public static <T>DecomposableMatchBuilder0<List<T>> headTail(MatchesExact<T> head,MatchesExact<List<T>> tail){  List<Matcher<Object>> matchers=Lists.of(ArgumentMatchers.eq(head.t),ArgumentMatchers.eq(tail.t));  return new DecomposableMatchBuilder0<List<T>>(matchers,new ListConsHeadTailFieldExtractor<>());}  }
class C{  public ByteIterator(byte[] primitiveArray){  super(primitiveArray);}  }
class C{  public NioDatagramConnector(int processorCount){  super(new DefaultDatagramSessionConfig(),NioProcessor.class,processorCount);}  }
class C{  protected static ConditionOperand BIT_TEST(int x,ConditionOperand cond){  if (VM.VerifyAssertions)   opt_assert((x == 0) || (x == 1));  if (VM.VerifyAssertions)   opt_assert(EQ_NE(cond));  if ((x == 1 && cond.isEQUAL()) || (x == 0 && cond.isNOT_EQUAL())) {    return ConditionOperand.LOWER();  } else {    return ConditionOperand.HIGHER_EQUAL();  }}  }
class C{  public void not(){  mv.visitInsn(Opcodes.ICONST_1);  mv.visitInsn(Opcodes.IXOR);}  }
class C{  public static ReferenceRanges<String> createBedReferenceRanges(SAMFileHeader header,File bedFile) throws IOException {  final BedRangeLoader<String> brl=new ResolvedBedRangeLoader(header);  brl.loadRanges(bedFile);  final ReferenceRanges<String> ranges=brl.getReferenceRanges();  ranges.setIdMap(SamUtils.getSequenceIdLookup(header.getSequenceDictionary()));  return ranges;}  }
class C{  public File encryptToFile(InputStream fileInput,String fileNameOutput) throws NoSuchPaddingException, InvalidKeyException, NoSuchAlgorithmException, IOException, BadPaddingException, IllegalBlockSizeException, InvalidAlgorithmParameterException, InvalidKeySpecException {  if ((fileNameOutput == null) || (fileNameOutput.isEmpty())) {    return null;  }  File fileOutput=new File(fileNameOutput);  FileOutputStream out=new FileOutputStream(fileOutput);  byte[] encrypted=encrypt(fileInput);  out.write(encrypted);  out.flush();  out.close();  return fileOutput;}  }
class C{  public RemoteError(String message,int code){  this.message=message;  this.code=code;}  }
class C{  public ColorAnimator(String group,String[] fields){  super(group);  setColorFields(fields);}  }
class C{  public ScaleAndIndex index(int index){  return new ScaleAndIndex(scale,index);}  }
class C{  public static Bitmap create(float width,float height,String character,int textSize,Align textAlign,int textColor,int backgroundColor,Context context){  Bitmap bitmap=Bitmap.createBitmap((int)width,(int)height,Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(bitmap);  Paint paint=new Paint();  paint.setTextSize(textSize);  paint.setTextAlign(textAlign);  paint.setFakeBoldText(true);  paint.setColor(textColor);  canvas.drawColor(backgroundColor);  canvas.drawText(character,width / 2,height / 1.6f,paint);  return bitmap;}  }
class C{  private void nextTree(int layer){  if (layer > 0) {    index[layer - 1]++;    boolean lastTree=true;    int z=layer;    do {      z--;      if (index[z] < numLeafs[z]) {        lastTree=false;      }    } while (lastTree && (z > 0));    if (!lastTree) {      gmssRandom.nextSeed(currentSeeds[layer]);      nextRootSig[layer - 1].updateSign();      if (layer > 1) {        nextNextLeaf[layer - 1 - 1]=nextNextLeaf[layer - 1 - 1].nextLeaf();      }      upperLeaf[layer - 1]=upperLeaf[layer - 1].nextLeaf();      if (minTreehash[layer - 1] >= 0) {        upperTreehashLeaf[layer - 1]=upperTreehashLeaf[layer - 1].nextLeaf();        byte[] leaf=this.upperTreehashLeaf[layer - 1].getLeaf();        try {          currentTreehash[layer - 1][minTreehash[layer - 1]].update(this.gmssRandom,leaf);          if (currentTreehash[layer - 1][minTreehash[layer - 1]].wasFinished()) {          }        } catch (        Exception e) {          System.out.println(e);        }      }      this.updateNextNextAuthRoot(layer);      this.currentRootSig[layer - 1]=nextRootSig[layer - 1].getSig();      for (int i=0; i < heightOfTrees[layer] - K[layer]; i++) {        this.currentTreehash[layer][i]=this.nextTreehash[layer - 1][i];        this.nextTreehash[layer - 1][i]=this.nextNextRoot[layer - 1].getTreehash()[i];      }      for (int i=0; i < heightOfTrees[layer]; i++) {        System.arraycopy(nextAuthPaths[layer - 1][i],0,currentAuthPaths[layer][i],0,mdLength);        System.arraycopy(nextNextRoot[layer - 1].getAuthPath()[i],0,nextAuthPaths[layer - 1][i],0,mdLength);      }      for (int i=0; i < K[layer] - 1; i++) {        this.currentRetain[layer][i]=this.nextRetain[layer - 1][i];        this.nextRetain[layer - 1][i]=this.nextNextRoot[layer - 1].getRetain()[i];      }      this.currentStack[layer]=this.nextStack[layer - 1];      this.nextStack[layer - 1]=this.nextNextRoot[layer - 1].getStack();      this.nextRoot[layer - 1]=this.nextNextRoot[layer - 1].getRoot();      byte[] OTSseed=new byte[mdLength];      byte[] dummy=new byte[mdLength];      System.arraycopy(currentSeeds[layer - 1],0,dummy,0,mdLength);      OTSseed=gmssRandom.nextSeed(dummy);      OTSseed=gmssRandom.nextSeed(dummy);      OTSseed=gmssRandom.nextSeed(dummy);      nextRootSig[layer - 1].initSign(OTSseed,nextRoot[layer - 1]);      nextKey(layer - 1);    }  }}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);}  }
class C{  public static Line fromBottom(int margin,int marginUnit){  return new Line(1,Gravity.BOTTOM,margin,marginUnit,DebugColors.next());}  }
class C{  public h6 addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  private void loadStringSetting(SQLiteStatement stmt,String name,int resId){  loadSetting(stmt,name,mContext.getResources().getString(resId));}  }
class C{  public Vector3f mul(Matrix3fc mat){  return mul(mat,this);}  }
class C{  public static String stripWord(String word){  if (word != null) {    word=stripTitles(word);    return StringUtils.replaceChars(word,STRIP_CHARS,"");  }  return null;}  }
class C{  public static boolean isCoreFileSaver(String classname){  boolean result;  String[] classnames;  classnames=CORE_FILE_SAVERS.split(",");  result=(Arrays.binarySearch(classnames,classname) >= 0);  return result;}  }
class C{  @Override public void loadFiltersAndApplyDefault(){  initShortcutActions();  initAdHocFilter();  loadFilterEntities();  FilterEntity defaultFilter=getDefaultFilter(filterEntities);  initFilterSelectComponents();  if (defaultFilter == null) {    defaultFilter=adHocFilter;  }  try {    setFilterEntity(defaultFilter);  } catch (  Exception e) {    log.error("Exception on loading default filter '" + defaultFilter.getName() + "'",e);    windowManager.showNotification(messages.formatMainMessage("filter.errorLoadingDefaultFilter",defaultFilter.getName()),Frame.NotificationType.ERROR);    defaultFilter=adHocFilter;    setFilterEntity(adHocFilter);  }  if (defaultFilter != adHocFilter && (filterMode == FilterMode.GENERIC_MODE)) {    Window window=ComponentsHelper.getWindow(filter);    if (!WindowParams.DISABLE_AUTO_REFRESH.getBool(window.getContext())) {      if (getResultingManualApplyRequired()) {        if (BooleanUtils.isTrue(defaultFilter.getApplyDefault())) {          apply(true);        }      } else       apply(true);      if (filterEntity != null) {        window.setDescription(getFilterCaption(filterEntity));      } else       window.setDescription(null);    }  }}  }
class C{  int chunkSize(){  return mChunkSize;}  }
class C{  public static byte[][] split(final byte[] a,final byte[] b,final int num){  byte[][] ret=new byte[num + 2][];  int i=0;  Iterable<byte[]> iter=iterateOnSplits(a,b,num);  if (iter == null)   return null;  for (  byte[] elem : iter) {    ret[i++]=elem;  }  return ret;}  }
class C{  public boolean skipField(final int tag) throws IOException {switch (WireFormat.getTagWireType(tag)) {case WireFormat.WIRETYPE_VARINT:    readInt32();  return true;case WireFormat.WIRETYPE_FIXED64:readRawLittleEndian64();return true;case WireFormat.WIRETYPE_LENGTH_DELIMITED:skipRawBytes(readRawVarint32());return true;case WireFormat.WIRETYPE_START_GROUP:skipMessage();checkLastTagWas(WireFormat.makeTag(WireFormat.getTagFieldNumber(tag),WireFormat.WIRETYPE_END_GROUP));return true;case WireFormat.WIRETYPE_END_GROUP:return false;case WireFormat.WIRETYPE_FIXED32:readRawLittleEndian32();return true;default :throw InvalidProtocolBufferException.invalidWireType();}}  }
class C{  public HoverPredicate(){  super(VisualItem.HOVER);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:01.573 -0500",hash_original_method="16DE5E515D4E313298C804E12AA820B9",hash_generated_method="B6069869652BA6429DACB728FA845152") public ColorStateList(int[][] states,int[] colors){  mStateSpecs=states;  mColors=colors;  if (states.length > 0) {    mDefaultColor=colors[0];    for (int i=0; i < states.length; i++) {      if (states[i].length == 0) {        mDefaultColor=colors[i];      }    }  }}  }
class C{  protected void doPrintHeader(){  if (m_Header.classAttribute().isNominal())   if (m_OutputDistribution)   append(" inst#     actual  predicted error distribution"); else   append(" inst#     actual  predicted error prediction"); else   append(" inst#     actual  predicted      error");  if (m_Attributes != null) {    append(" (");    boolean first=true;    for (int i=0; i < m_Header.numAttributes(); i++) {      if (i == m_Header.classIndex())       continue;      if (m_Attributes.isInRange(i)) {        if (!first)         append(",");        append(m_Header.attribute(i).name());        first=false;      }    }    append(")");  }  append("\n");}  }
class C{  protected void startClients(RPCChannelInitializer channelInitializer){  final Bootstrap bootstrap=new Bootstrap();  bootstrap.group(workerGroup).channel(NioSocketChannel.class).option(ChannelOption.SO_REUSEADDR,true).option(ChannelOption.SO_KEEPALIVE,true).option(ChannelOption.TCP_NODELAY,true).option(ChannelOption.SO_SNDBUF,SEND_BUFFER_SIZE).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,CONNECT_TIMEOUT).handler(channelInitializer);  clientBootstrap=bootstrap;  ScheduledExecutorService ses=syncManager.getThreadPool().getScheduledExecutor();  reconnectTask=new SingletonTask(ses,new ConnectTask());  reconnectTask.reschedule(0,TimeUnit.SECONDS);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public static long copyFile(File input,OutputStream output) throws IOException {  final FileInputStream fis=new FileInputStream(input);  try {    return IOUtils.copyLarge(fis,output);  }  finally {    fis.close();  }}  }
class C{  private int handleEqual(){  try {    Region line=fDocument.getLineInformationOfOffset(fPosition);    int nonWS=fScanner.findNonWhitespaceBackward(line.getOffset(),JavaHeuristicScanner.UNBOUND);    if (nonWS != Symbols.TokenEOF) {      int tokenAtPreviousLine=fScanner.nextToken(nonWS,nonWS + 1);      if (tokenAtPreviousLine != Symbols.TokenSEMICOLON && tokenAtPreviousLine != Symbols.TokenRBRACE && tokenAtPreviousLine != Symbols.TokenLBRACE && tokenAtPreviousLine != Symbols.TokenEOF)       return fPosition;    }  } catch (  BadLocationException e) {    return fPosition;  }  fIndent=fPrefs.prefContinuationIndent;  return fPosition;}  }
class C{  public Drawable loadIcon(PackageManager pm){  return mReceiver.loadIcon(pm);}  }
class C{  public UnsupportedAttributeTypeException(String message){  super(message);}  }
class C{  public void updateAsciiStream(int columnIndex,java.io.InputStream x) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  LdapReferralException(Name resolvedName,Object resolvedObj,Name remainingName,String explanation,Hashtable<?,?> envprops,String nextName,int handleReferrals,Control[] reqCtls){  super(explanation);  if (debug)   System.out.println("LdapReferralException constructor");  setResolvedName(resolvedName);  setResolvedObj(resolvedObj);  setRemainingName(remainingName);  this.envprops=envprops;  this.nextName=nextName;  this.handleReferrals=handleReferrals;  this.reqCtls=(handleReferrals == LdapClient.LDAP_REF_FOLLOW ? reqCtls : null);}  }
class C{  protected void read(long offset,byte[] b) throws IOException {  rafile.seek(offset);  if (rafile.read(b) != b.length) {    throw new IOException("Not enough bytes available in file " + getPath());  }}  }
class C{  public static SQLException unmarshalError(byte[] bytes) throws SQLException {  return unmarshal(bytes);}  }
class C{  public static String toHtml(Explanation explanation){  StringBuilder buffer=new StringBuilder();  buffer.append("<ul>\n");  buffer.append("<li>");  buffer.append(explanation.getValue()).append(" = ").append(explanation.getDescription());  buffer.append("<br />\n");  Explanation[] details=explanation.getDetails();  for (int i=0; i < details.length; i++) {    buffer.append(toHtml(details[i]));  }  buffer.append("</li>\n");  buffer.append("</ul>\n");  return buffer.toString();}  }
class C{  public static void reloadIfNeeded(){  if (appPropertiesLastModified >= 0) {    URL appPropertiesUrl=ApplicationProperties.class.getClassLoader().getResource("application.properties");    long appPropTS=-1;    try {      try {        appPropTS=new File(appPropertiesUrl.toURI()).lastModified();      } catch (      URISyntaxException e) {        appPropTS=new File(appPropertiesUrl.getPath()).lastModified();      }    } catch (    Exception e) {    }    String customProperties=System.getProperty("tmtbl.custom.properties");    if (customProperties == null)     customProperties=props.getProperty("tmtbl.custom.properties","custom.properties");    URL custPropertiesUrl=ApplicationProperties.class.getClassLoader().getResource(customProperties);    long custPropTS=-1;    try {      if (custPropertiesUrl != null) {        try {          custPropTS=new File(custPropertiesUrl.toURI()).lastModified();        } catch (        URISyntaxException e) {          custPropTS=new File(custPropertiesUrl.getPath()).lastModified();        }      } else       if (new File(customProperties).exists()) {        custPropTS=new File(customProperties).lastModified();      }    } catch (    Exception e) {    }    if (appPropTS > appPropertiesLastModified || custPropTS > custPropertiesLastModified)     load();  }}  }
class C{  @Override public String toString(){  String pattern=printerParser.toString();  pattern=pattern.startsWith("[") ? pattern : pattern.substring(1,pattern.length() - 1);  return pattern;}  }
class C{  public void allowNull(){  setIsNullAllowed(true);}  }
class C{  public Array(final Array array,final Set<Address.Flags> flags){  super(1,array.size(),null);  this.addr=new DirectArrayRowAddress(this.$,0,null,0,array.size(),array.flags(),true,1,array.size());  if (array.addr.isContiguous()) {    final int begin=array.addr.col0() + (addr.isFortran() ? 1 : 0);    System.arraycopy(array.$,begin,$,0,this.size());  } else {    for (int i=0; i < array.size(); i++) {      this.$[i]=array.get(i);    }  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ExpressionsPackage.BITWISE_XOR_EXPRESSION__LEFT_OPERAND:    setLeftOperand((Expression)newValue);  return;case ExpressionsPackage.BITWISE_XOR_EXPRESSION__RIGHT_OPERAND:setRightOperand((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public boolean add(E obj){  int index=insertionIndex(obj);  if (index < 0) {    return false;  }  Object old=_set[index];  _set[index]=obj;  postInsertHook(old == null);  return true;}  }
class C{  public CharacterClassElement createCharacterClassElement(){  CharacterClassElementImpl characterClassElement=new CharacterClassElementImpl();  return characterClassElement;}  }
class C{  public String toString(){  return "null";}  }
class C{  protected Key engineUnwrap(byte[] wrappedKey,String wrappedKeyAlgorithm,int wrappedKeyType) throws InvalidKeyException, NoSuchAlgorithmException {  byte[] encodedKey;  return core.unwrap(wrappedKey,wrappedKeyAlgorithm,wrappedKeyType);}  }
class C{  private boolean movePrimaries(){  Move bestMove=model.findBestPrimaryMove();  if (bestMove == null) {    return false;  }  model.movePrimary(bestMove);  return true;}  }
class C{  public EntityContext newEntityContextSharingTransaction(){  EntityContext entityContext=newEntityContext();  env.joinTransaction(entityContext,this);  return entityContext;}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  if (!(text instanceof Spanned))   return super.onTouchEvent(event);  Spannable spannedText=(Spannable)text;  boolean handled=false;  if (event.getAction() == MotionEvent.ACTION_DOWN) {    pressedSpan=getPressedSpan(spannedText,event);    if (pressedSpan != null) {      pressedSpan.setPressed(true);      Selection.setSelection(spannedText,spannedText.getSpanStart(pressedSpan),spannedText.getSpanEnd(pressedSpan));      handled=true;      postInvalidateOnAnimation();    }  } else   if (event.getAction() == MotionEvent.ACTION_MOVE) {    TouchableUrlSpan touchedSpan=getPressedSpan(spannedText,event);    if (pressedSpan != null && touchedSpan != pressedSpan) {      pressedSpan.setPressed(false);      pressedSpan=null;      Selection.removeSelection(spannedText);      postInvalidateOnAnimation();    }  } else   if (event.getAction() == MotionEvent.ACTION_UP) {    if (pressedSpan != null) {      pressedSpan.setPressed(false);      pressedSpan.onClick(this);      handled=true;      postInvalidateOnAnimation();    }    pressedSpan=null;    Selection.removeSelection(spannedText);  } else {    if (pressedSpan != null) {      pressedSpan.setPressed(false);      handled=true;      postInvalidateOnAnimation();    }    pressedSpan=null;    Selection.removeSelection(spannedText);  }  return handled;}  }
class C{  protected int makePressColor(){  int r=(this.backgroundColor >> 16) & 0xFF;  int g=(this.backgroundColor >> 8) & 0xFF;  int b=(this.backgroundColor >> 0) & 0xFF;  return Color.argb(128,r,g,b);}  }
class C{  @JsonValue public String value(){  return this.toString();}  }
class C{  public void testBug23212347() throws Exception {  boolean useSPS=false;  do {    String testCase=String.format("Case [SPS: %s]",useSPS ? "Y" : "N");    createTable("testBug23212347","(id INT)");    Properties props=new Properties();    props.setProperty("useServerPrepStmts",Boolean.toString(useSPS));    Connection testConn=getConnectionWithProps(props);    Statement testStmt=testConn.createStatement();    testStmt.execute("INSERT INTO testBug23212347 VALUES (1)");    this.pstmt=testConn.prepareStatement("SELECT * FROM testBug23212347 WHERE id = 1");    this.rs=this.pstmt.executeQuery();    assertTrue(testCase,this.rs.next());    assertEquals(testCase,1,this.rs.getInt(1));    assertFalse(testCase,this.rs.next());    ResultSetMetaData rsmd=this.pstmt.getMetaData();    assertEquals(testCase,"id",rsmd.getColumnName(1));    this.pstmt=testConn.prepareStatement("SELECT * FROM testBug23212347 WHERE id = ?");    this.pstmt.setInt(1,1);    this.rs=this.pstmt.executeQuery();    assertTrue(testCase,this.rs.next());    assertEquals(testCase,1,this.rs.getInt(1));    assertFalse(this.rs.next());    rsmd=this.pstmt.getMetaData();    assertEquals(testCase,"id",rsmd.getColumnName(1));  } while (useSPS=!useSPS);}  }
class C{  public boolean execute(){  PsiDocumentManager.getInstance(myTarget.getProject()).commitAllDocuments();  if (!myTarget.isValid())   return false;  if ((myTarget instanceof PyQualifiedExpression) && ((((PyQualifiedExpression)myTarget).isQualified())))   return false;  for (  ImportCandidateHolder item : mySources) {    if (!item.getImportable().isValid())     return false;    if (!item.getFile().isValid())     return false;    if (item.getImportElement() != null && !item.getImportElement().isValid())     return false;  }  if (mySources.isEmpty()) {    return false;  }  if (mySources.size() > 1) {    selectSourceAndDo();  } else   doWriteAction(mySources.get(0));  return true;}  }
class C{  public ModbusUDPTransaction(ModbusRequest request){  setRequest(request);}  }
class C{  public static String replace(String source,String searchFor,String replaceWith){  if (source.length() < 1) {    return "";  }  int p=0;  while (p < source.length() && (p=source.indexOf(searchFor,p)) >= 0) {    source=source.substring(0,p) + replaceWith + source.substring(p + searchFor.length(),source.length());    p+=replaceWith.length();  }  return source;}  }
class C{  protected void pushBidirectionalVipRoutes(IOFSwitch sw,OFPacketIn pi,FloodlightContext cntx,IPClient client,LBMember member){  IDevice srcDevice=null;  IDevice dstDevice=null;  Collection<? extends IDevice> allDevices=deviceManager.getAllDevices();  for (  IDevice d : allDevices) {    for (int j=0; j < d.getIPv4Addresses().length; j++) {      if (srcDevice == null && client.ipAddress == d.getIPv4Addresses()[j])       srcDevice=d;      if (dstDevice == null && member.address == d.getIPv4Addresses()[j]) {        dstDevice=d;        member.macString=dstDevice.getMACAddressString();      }      if (srcDevice != null && dstDevice != null)       break;    }  }  if (srcDevice == null || dstDevice == null)   return;  Long srcIsland=topology.getL2DomainId(sw.getId());  if (srcIsland == null) {    log.debug("No openflow island found for source {}/{}",sw.getStringId(),pi.getInPort());    return;  }  boolean on_same_island=false;  boolean on_same_if=false;  for (  SwitchPort dstDap : dstDevice.getAttachmentPoints()) {    long dstSwDpid=dstDap.getSwitchDPID();    Long dstIsland=topology.getL2DomainId(dstSwDpid);    if ((dstIsland != null) && dstIsland.equals(srcIsland)) {      on_same_island=true;      if ((sw.getId() == dstSwDpid) && (pi.getInPort() == dstDap.getPort())) {        on_same_if=true;      }      break;    }  }  if (!on_same_island) {    if (log.isTraceEnabled()) {      log.trace("No first hop island found for destination " + "device {}, Action = flooding",dstDevice);    }    return;  }  if (on_same_if) {    if (log.isTraceEnabled()) {      log.trace("Both source and destination are on the same " + "switch/port {}/{}, Action = NOP",sw.toString(),pi.getInPort());    }    return;  }  SwitchPort[] srcDaps=srcDevice.getAttachmentPoints();  Arrays.sort(srcDaps,clusterIdComparator);  SwitchPort[] dstDaps=dstDevice.getAttachmentPoints();  Arrays.sort(dstDaps,clusterIdComparator);  int iSrcDaps=0, iDstDaps=0;  while ((iSrcDaps < srcDaps.length) && (iDstDaps < dstDaps.length)) {    SwitchPort srcDap=srcDaps[iSrcDaps];    SwitchPort dstDap=dstDaps[iDstDaps];    Long srcCluster=topology.getL2DomainId(srcDap.getSwitchDPID());    Long dstCluster=topology.getL2DomainId(dstDap.getSwitchDPID());    int srcVsDest=srcCluster.compareTo(dstCluster);    if (srcVsDest == 0) {      if (!srcDap.equals(dstDap) && (srcCluster != null) && (dstCluster != null)) {        Route routeIn=routingEngine.getRoute(srcDap.getSwitchDPID(),(short)srcDap.getPort(),dstDap.getSwitchDPID(),(short)dstDap.getPort(),0);        Route routeOut=routingEngine.getRoute(dstDap.getSwitchDPID(),(short)dstDap.getPort(),srcDap.getSwitchDPID(),(short)srcDap.getPort(),0);        if (routeIn != null) {          pushStaticVipRoute(true,routeIn,client,member,sw.getId());        }        if (routeOut != null) {          pushStaticVipRoute(false,routeOut,client,member,sw.getId());        }      }      iSrcDaps++;      iDstDaps++;    } else     if (srcVsDest < 0) {      iSrcDaps++;    } else {      iDstDaps++;    }  }  return;}  }
class C{  public MutableDateTime roundFloor(){  iInstant.setMillis(getField().roundFloor(iInstant.getMillis()));  return iInstant;}  }
class C{  public void characters(org.w3c.dom.Node node) throws org.xml.sax.SAXException {  flushPending();  String data=node.getNodeValue();  if (data != null) {    final int length=data.length();    if (length > m_charsBuff.length) {      m_charsBuff=new char[length * 2 + 1];    }    data.getChars(0,length,m_charsBuff,0);    characters(m_charsBuff,0,length);  }}  }
class C{  private void validateContextId(RequestSecurityTokenResponseType response) throws ParserException {  String contextId=response.getContext();  if (contextId == null) {    log.debug(PROCESS_RSTR_ERROR + ": Context is null");    throw new ParserException(PROCESS_RSTR_ERROR);  }}  }
class C{  public boolean start() throws LDIFException, LDAPException, IOException, FileOperationFailedException, GeneralSecurityException, DirectoryOrFileNotFoundException {  if (_isRunning) {    _log.info("LDAP Service is already running.");    return false;  }  _log.info("Starting LDAP Service.");  addLDAPBindCredentials();  _log.info("Importing Schema Ldifs");  importLDAPSchemaLdifs();  List<InMemoryListenerConfig> listenerConfigs=getInMemoryListenerConfigs();  _inMemoryDSConfig.setListenerConfigs(listenerConfigs);  _inMemoryDS=new InMemoryDirectoryServer(_inMemoryDSConfig);  _log.info("Importing Config Ldifs");  importLDAPConfigLdifs();  _log.info("Star listening...");  _inMemoryDS.startListening();  _isRunning=true;  return _isRunning;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case NODE:  return isSetNode();}throw new IllegalStateException();}  }
class C{  public static double staticNextDouble(double tau){synchronized (shared) {    return shared.nextDouble(tau);  }}  }
class C{  private void insert(float sample){  mBuffer[mBufferPointer++]=sample;  mBufferPointer=mBufferPointer % mBufferSize;}  }
class C{  public ObjectReference loadObjectReference(Offset offset){  return null;}  }
class C{  private static void explicitPromotionTest(final ISchemaVersion schemaVersion) throws IOException {  final Writer output=openOutput(schemaVersion,"explicit_promotion",TestType.UNION);  final Random random=new Random(randomLong());  final HLL hll=newHLL(HLLType.EMPTY);  final HLL emptyHLL=newHLL(HLLType.EMPTY);  cumulativeUnionLine(output,hll,emptyHLL,schemaVersion);  for (int i=0; i < (EXPLICIT_THRESHOLD + 500); i++) {    final HLL explicitHLL=newHLL(HLLType.EXPLICIT);    explicitHLL.addRaw(random.nextLong());    cumulativeUnionLine(output,hll,explicitHLL,schemaVersion);  }  output.flush();  output.close();}  }
class C{  public boolean isOverrideContentType(){  return overrideContentType;}  }
class C{  public static CustomTabsHelperFragment attachTo(FragmentActivity activity){  FragmentManager fragmentManager=activity.getSupportFragmentManager();  CustomTabsHelperFragment fragment=(CustomTabsHelperFragment)fragmentManager.findFragmentByTag(FRAGMENT_TAG);  if (fragment == null) {    fragment=new CustomTabsHelperFragment();    fragmentManager.beginTransaction().add(fragment,FRAGMENT_TAG).commit();  }  return fragment;}  }
class C{  public static int unionSize(long[] x,long[] y){  final int lx=x.length, ly=y.length;  final int min=(lx < ly) ? lx : ly;  int i=0, res=0;  for (; i < min; i++) {    res+=Long.bitCount(x[i] | y[i]);  }  for (; i < lx; i++) {    res+=Long.bitCount(x[i]);  }  for (; i < ly; i++) {    res+=Long.bitCount(y[i]);  }  return res;}  }
class C{  private static ValueAnimator loadAnimator(Context c,Resources res,Resources.Theme theme,AttributeSet attrs,ValueAnimator anim,float pathErrorScale) throws Resources.NotFoundException {  TypedArray arrayAnimator=null;  TypedArray arrayObjectAnimator=null;  if (theme != null) {    arrayAnimator=theme.obtainStyledAttributes(attrs,R.styleable.Animator,0,0);  } else {    arrayAnimator=res.obtainAttributes(attrs,R.styleable.Animator);  }  if (anim != null) {    if (theme != null) {      arrayObjectAnimator=theme.obtainStyledAttributes(attrs,R.styleable.PropertyAnimator,0,0);    } else {      arrayObjectAnimator=res.obtainAttributes(attrs,R.styleable.PropertyAnimator);    }  }  if (anim == null) {    anim=new ValueAnimator();  }  parseAnimatorFromTypeArray(anim,arrayAnimator,arrayObjectAnimator);  final int resId=arrayAnimator.getResourceId(R.styleable.Animator_android_interpolator,0);  if (resId > 0) {    anim.setInterpolator(AnimationUtils.loadInterpolator(c,resId));  }  arrayAnimator.recycle();  if (arrayObjectAnimator != null) {    arrayObjectAnimator.recycle();  }  return anim;}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.855 -0400",hash_original_method="72E9EA9CB4D496A22134A9DE55B8B91A",hash_generated_method="C5CFE166C9FCDBCC793D313229493905") @Override public void write(int b) throws IOException {  write(new byte[]{(byte)b},0,1);}  }
class C{  private int readAnnotationValues(int v,final char[] buf,final boolean named,final AnnotationVisitor av){  int i=readUnsignedShort(v);  v+=2;  if (named) {    for (; i > 0; --i) {      v=readAnnotationValue(v + 2,buf,readUTF8(v,buf),av);    }  } else {    for (; i > 0; --i) {      v=readAnnotationValue(v,buf,null,av);    }  }  if (av != null) {    av.visitEnd();  }  return v;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_ptr_list_fragment);  mPullRefreshListFragment=(PullToRefreshListFragment)getSupportFragmentManager().findFragmentById(R.id.frag_ptr_list);  mPullRefreshListView=mPullRefreshListFragment.getPullToRefreshListView();  mPullRefreshListView.setOnRefreshListener(this);  ListView actualListView=mPullRefreshListView.getRefreshableView();  mListItems=new LinkedList<String>();  mListItems.addAll(Arrays.asList(mStrings));  mAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,mListItems);  actualListView.setAdapter(mAdapter);  mPullRefreshListFragment.setListShown(true);}  }
class C{  public Space S(Domain domain) throws ScopeException {  if (domain.getId().getProjectId().equals(getProject().getId().getProjectId())) {    return new Space(this,domain);  } else {    throw new ScopeException("Domain '" + domain + "' does not belong to that Universe");  }}  }
class C{  private boolean[] sampleLine(Point p1,Point p2,int size){  boolean[] res=new boolean[size];  float d=distance(p1,p2);  float moduleSize=d / (size - 1);  float dx=moduleSize * (p2.x - p1.x) / d;  float dy=moduleSize * (p2.y - p1.y) / d;  float px=p1.x;  float py=p1.y;  for (int i=0; i < size; i++) {    res[i]=image.get(MathUtils.round(px),MathUtils.round(py));    px+=dx;    py+=dy;  }  return res;}  }
class C{  private void moveCursorBackward(int columnsToMove){}  }
class C{  protected void dropCar(PrintWriter file,Car car,boolean isManifest){  if (isManifest) {    StringBuffer buf=new StringBuffer(padAndTruncateString(Setup.getDropCarPrefix(),Setup.getManifestPrefixLength()));    String[] format=Setup.getDropManifestMessageFormat();    boolean isLocal=isLocalMove(car);    if (isLocal) {      buf=new StringBuffer(padAndTruncateString(Setup.getLocalPrefix(),Setup.getManifestPrefixLength()));      format=Setup.getLocalManifestMessageFormat();    }    dropCar(file,car,buf,format,isLocal,isManifest);  } else {    StringBuffer buf=new StringBuffer(padAndTruncateString(Setup.getSwitchListDropCarPrefix(),Setup.getSwitchListPrefixLength()));    String[] format=Setup.getDropSwitchListMessageFormat();    boolean isLocal=isLocalMove(car);    if (isLocal) {      buf=new StringBuffer(padAndTruncateString(Setup.getSwitchListLocalPrefix(),Setup.getSwitchListPrefixLength()));      format=Setup.getLocalSwitchListMessageFormat();    }    dropCar(file,car,buf,format,isLocal,isManifest);  }}  }
class C{  boolean distribute(){  CacheDistributionAdvisor advisor=this.r.getCacheDistributionAdvisor();  Set recipients=advisor.adviseCacheOpRole(this.role);  if (recipients.isEmpty()) {    return false;  }  ReplyProcessor21 processor=new ReplyProcessor21(this.dm,recipients);  SendQueueMessage msg=new SendQueueMessage();  msg.setRecipients(recipients);  msg.setRegionPath(this.r.getFullPath());  msg.setProcessorId(processor.getProcessorId());  msg.setOperations(this.l);  dm.putOutgoing(msg);  try {    processor.waitForReplies();  } catch (  InterruptedException ex) {    Thread.currentThread().interrupt();  }catch (  ReplyException ex) {    ex.handleAsUnexpected();  }  if (msg.getSuccessfulRecipients().isEmpty()) {    return false;  }  this.r.getCachePerfStats().incReliableQueuedOps(-l.size());  this.l.clear();  return true;}  }
class C{  public void resetLayout(){  Point p0=new Point(0,0);  for (int i=0; i < centerPanel.getComponentCount(); i++) {    Component comp=centerPanel.getComponent(i);    comp.setLocation(p0);  }  centerPanel.validate();}  }
class C{  public HeaderSection(DexFile file){  super(null,file,4);  HeaderItem item=new HeaderItem();  item.setIndex(0);  this.list=Collections.singletonList(item);}  }
class C{  static void testLoadWithoutEncoding() throws IOException {  System.out.println("testLoadWithoutEncoding");  Properties expected=new Properties();  expected.put("foo","bar");  String s="<?xml version=\"1.0\"?>" + "<!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">" + "<properties>"+ "<entry key=\"foo\">bar</entry>"+ "</properties>";  ByteArrayInputStream in=new ByteArrayInputStream(s.getBytes("UTF-8"));  Properties props=new Properties();  props.loadFromXML(in);  if (!props.equals(expected)) {    System.err.println("loaded: " + props + ", expected: "+ expected);    throw new RuntimeException("Test failed");  }}  }
class C{  public String toString(){  return (sun.security.util.ResourcesMgr.getString("LoginModuleControlFlag.") + controlFlag);}  }
class C{  protected void loadRMA(int M_RMA_ID,int M_Locator_ID){  loadTableOIS(getRMAData(M_RMA_ID,M_Locator_ID));}  }
class C{  public static String makeLogTag(Class cls){  return makeLogTag(cls.getSimpleName());}  }
class C{  public EOFException(){  super();}  }
class C{  public BOSHException(final String msg,final Throwable cause){  super(msg,cause);}  }
class C{  public boolean isIgnoreInactive(){  return this.ignoreInactive;}  }
class C{  public EquipmentMonitor(LivingEntity entity){  this.entity=entity;}  }
class C{  public FastStringBuffer(){  this(128);}  }
class C{  public InstanceNode clone(){  InstanceNode result=new InstanceNode();  result.NodeId=NodeId;  result.NodeClass=NodeClass;  result.BrowseName=BrowseName;  result.DisplayName=DisplayName;  result.Description=Description;  result.WriteMask=WriteMask;  result.UserWriteMask=UserWriteMask;  if (References != null) {    result.References=new ReferenceNode[References.length];    for (int i=0; i < References.length; i++)     result.References[i]=References[i].clone();  }  return result;}  }
class C{  public static boolean matchApilevelMax(Integer apilevelMax){  if (apilevelMax == null)   return true;  if (getBuildVersion() <= apilevelMax)   return true; else   return false;}  }
class C{  public void restoreSession(){  board.restoreSession();}  }
class C{  public static Number or(Number left,Number right){  return NumberMath.or(left,right);}  }
class C{  RegistrarWhoisResponse(Registrar registrar,DateTime timestamp){  super(timestamp);  this.registrar=checkNotNull(registrar,"registrar");}  }
class C{  public ToStringBuilder append(final String fieldName,final byte[] array,final boolean fullDetail){  style.append(buffer,fieldName,array,Boolean.valueOf(fullDetail));  return this;}  }
class C{  private void rehash(){  java.util.Set<MyMap.Entry<K,V>> set=entrySet();  capacity<<=1;  table=new LinkedList[capacity];  size=0;  for (  Entry<K,V> entry : set) {    put(entry.getKey(),entry.getValue());  }}  }
class C{  public Task createCluster(String projectId,ClusterCreateSpec clusterCreateSpec) throws IOException {  String path=String.format("%s/%s/clusters",getBasePath(),projectId);  HttpResponse response=this.restClient.perform(RestClient.Method.POST,path,serializeObjectAsJson(clusterCreateSpec));  this.restClient.checkResponse(response,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(response);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.413 -0400",hash_original_method="6FE2119F7B8AFCCC639C0C89F4C2E725",hash_generated_method="F20B5F67B150930B74BEA51952901832") public static float readSwappedFloat(byte[] data,int offset){  return Float.intBitsToFloat(readSwappedInteger(data,offset));}  }
class C{  private boolean checkConfigurationLocation(URL locationUrl){  if (locationUrl == null || !"file".equals(locationUrl.getProtocol()))   return true;  if (Boolean.valueOf(System.getProperty(PROP_CONFIG_AREA + READ_ONLY_AREA_SUFFIX)).booleanValue()) {    return true;  }  File configDir=new File(locationUrl.getFile()).getAbsoluteFile();  if (!configDir.exists()) {    configDir.mkdirs();    if (!configDir.exists()) {      System.getProperties().put(PROP_EXITCODE,"15");      System.getProperties().put(PROP_EXITDATA,"<title>Invalid Configuration Location</title>The configuration area at '" + configDir + "' could not be created.  Please choose a writable location using the '-configuration' command line option.");      return false;    }  }  if (!canWrite(configDir)) {    System.getProperties().put(PROP_EXITCODE,"15");    System.getProperties().put(PROP_EXITDATA,"<title>Invalid Configuration Location</title>The configuration area at '" + configDir + "' is not writable.  Please choose a writable location using the '-configuration' command line option.");    return false;  }  return true;}  }
class C{  public void initOptions(){  BROWSER.setText(URLHandlerSettings.BROWSER.getValue());}  }
class C{  public CharSequence loadLabel(PackageManager pm){  if (nonLocalizedLabel != null) {    return nonLocalizedLabel;  }  if (labelRes != 0) {    CharSequence label=pm.getText(packageName,labelRes,getApplicationInfo());    if (label != null) {      return label.toString().trim();    }  }  if (name != null) {    return name;  }  return packageName;}  }
class C{  @Override public final double classProb(int classIndex,Instance instance,int theSubset) throws Exception {  if (theSubset <= -1) {    double[] weights=weights(instance);    if (weights == null) {      return m_distribution.prob(classIndex);    } else {      double prob=0;      for (int i=0; i < weights.length; i++) {        prob+=weights[i] * m_distribution.prob(classIndex,i);      }      return prob;    }  } else {    if (Utils.gr(m_distribution.perBag(theSubset),0)) {      return m_distribution.prob(classIndex,theSubset);    } else {      return m_distribution.prob(classIndex);    }  }}  }
class C{  public synchronized boolean isRunning() throws ReplicatorException {  String command=vmrrControlScript + " status";  if (logger.isDebugEnabled()) {    logger.debug("Checking vmrr process status: " + command);  }  int result=this.execAndReturnExitValue(command);  return (result == 0);}  }
class C{  private void doSetMode(boolean newValue){  int modeBit=getArg0(0);switch (modeBit) {case 4:    mInsertMode=newValue;  break;case 20:unknownParameter(modeBit);break;case 34:break;default :unknownParameter(modeBit);break;}}  }
class C{  public static boolean putInt(ContentResolver cr,String name,int value){  return putIntForUser(cr,name,value,UserHandle.myUserId());}  }
class C{  public static void logOrderState(OrderState orderState){  _log.debug("Status: " + orderState.m_status + " Comms Amt: "+ orderState.m_commission+ " Comms Currency: "+ orderState.m_commissionCurrency+ " Warning txt: "+ orderState.m_warningText+ " Init Margin: "+ orderState.m_initMargin+ " Maint Margin: "+ orderState.m_maintMargin+ " Min Comms: "+ orderState.m_minCommission+ " Max Comms: "+ orderState.m_maxCommission);}  }
class C{  protected void printComponent(Graphics g){  boolean wasHighQuality=m_highQuality;  try {    m_highQuality=true;    paintDisplay((Graphics2D)g,getSize());  }  finally {    m_highQuality=wasHighQuality;  }}  }
class C{  private void pushTerm(BytesRef text) throws IOException {  int limit=Math.min(lastTerm.length(),text.length);  int pos=0;  while (pos < limit && lastTerm.byteAt(pos) == text.bytes[text.offset + pos]) {    pos++;  }  for (int i=lastTerm.length() - 1; i >= pos; i--) {    int prefixTopSize=pending.size() - prefixStarts[i];    if (prefixTopSize >= minItemsInBlock) {      writeBlocks(i + 1,prefixTopSize);      prefixStarts[i]-=prefixTopSize - 1;    }  }  if (prefixStarts.length < text.length) {    prefixStarts=ArrayUtil.grow(prefixStarts,text.length);  }  for (int i=pos; i < text.length; i++) {    prefixStarts[i]=pending.size();  }  lastTerm.copyBytes(text);}  }
class C{  public IOException(java.lang.String s){}  }
class C{  public boolean activateController(){  if (!hasController()) {    throw new IllegalStateException("hasController() == false!");  }  return getController().activate(this);}  }
class C{  public long count(){  return count;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void onTrackPointStart(Attributes attributes){  latitude=attributes.getValue(ATTRIBUTE_LAT);  longitude=attributes.getValue(ATTRIBUTE_LON);  altitude=null;  time=null;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:50.767 -0500",hash_original_method="9056910A11B8F7E2130B8014667A5810",hash_generated_method="CEECFF6F08063F48651117F1E4FF30DE") private EncodingUtils(){}  }
class C{  private void updateInternal() throws Exception {  long uptime=runtimeMXBean.getUptime();  long cpuTime=proxyClient.getProcessCpuTime();  long gcTime=sumGCTimes();  gcCount=sumGCCount();  if (lastUpTime > 0 && lastCPUTime > 0 && gcTime > 0) {    deltaUptime_=uptime - lastUpTime;    deltaCpuTime_=(cpuTime - lastCPUTime) / 1000000;    deltaGcTime_=gcTime - lastGcTime;    gcLoad=calcLoad(deltaCpuTime_,deltaGcTime_);    cpuLoad=calcLoad(deltaUptime_,deltaCpuTime_);  }  lastUpTime=uptime;  lastCPUTime=cpuTime;  lastGcTime=gcTime;  totalLoadedClassCount_=classLoadingMXBean_.getTotalLoadedClassCount();  threadCount_=threadMXBean.getThreadCount();}  }
class C{  public SlotNameInList(List<String> slotNames){  this.slotNames=ImmutableList.copyOf(slotNames);}  }
class C{  @DSComment("no security concern") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:40.172 -0500",hash_original_method="C1E29F96DEA4D8E16CD646B2E66B7808",hash_generated_method="49067DA9501AEFB1EA5D29AE5A00F09E") @Override public void close() throws IOException {}  }
class C{  public SelfSignSslOkHttpStack(Map<String,SSLSocketFactory> factoryMap){  this(new OkHttpClient(),factoryMap);}  }
class C{  protected void putCombination(KeyCombination keyCombination,CombinationCallback combinationCallback){synchronized (combinations) {    if (!combinations.containsKey(keyCombination)) {      combinations.put(keyCombination,new HashSet<>());    }synchronized (combinations.get(keyCombination)) {      combinations.get(keyCombination).add(combinationCallback);    }  }}  }
class C{  public boolean hasMoney(){  return hasRepeatingExtension(Money.class);}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeInt(size);  int entriesToBeWritten=size;  for (int i=0; entriesToBeWritten > 0; i++) {    if (null != vals[i]) {      s.writeObject(keyUniverse[i]);      s.writeObject(unmaskNull(vals[i]));      entriesToBeWritten--;    }  }}  }
class C{  public int updateId(DatabaseConnection databaseConnection,T data,ID newId,ObjectCache objectCache) throws SQLException {  if (mappedUpdateId == null) {    mappedUpdateId=MappedUpdateId.build(databaseType,tableInfo);  }  return mappedUpdateId.execute(databaseConnection,data,newId,objectCache);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.080 -0500",hash_original_method="54011F5D28450E17A088B23862CB14CB",hash_generated_method="8DBF2298F55DC953A20252E1B37D6A63") public void copyFromUnchecked(short[] d){  mRS.validate();  copy1DRangeFromUnchecked(0,mCurrentCount,d);}  }
class C{  protected static ArrayList<GeoPoint> parseKmlCoordinates(String input){  LinkedList<GeoPoint> tmpCoords=new LinkedList<GeoPoint>();  int i=0;  int tupleStart=0;  int length=input.length();  boolean startReadingTuple=false;  while (i < length) {    char c=input.charAt(i);    if (c == ' ' || c == '\n' || c == '\t') {      if (startReadingTuple) {        String tuple=input.substring(tupleStart,i);        GeoPoint p=parseKmlCoord(tuple);        if (p != null)         tmpCoords.add(p);        startReadingTuple=false;      }    } else {      if (!startReadingTuple) {        startReadingTuple=true;        tupleStart=i;      }      if (i == length - 1) {        String tuple=input.substring(tupleStart,i + 1);        GeoPoint p=parseKmlCoord(tuple);        if (p != null)         tmpCoords.add(p);      }    }    i++;  }  ArrayList<GeoPoint> coordinates=new ArrayList<GeoPoint>(tmpCoords.size());  coordinates.addAll(tmpCoords);  return coordinates;}  }
class C{  static public Timestamp addDays(Timestamp day,int offset){  if (day == null)   day=new Timestamp(System.currentTimeMillis());  GregorianCalendar cal=new GregorianCalendar();  cal.setTime(day);  cal.set(Calendar.HOUR_OF_DAY,0);  cal.set(Calendar.MINUTE,0);  cal.set(Calendar.SECOND,0);  cal.set(Calendar.MILLISECOND,0);  if (offset != 0)   cal.add(Calendar.DAY_OF_YEAR,offset);  java.util.Date temp=cal.getTime();  return new Timestamp(temp.getTime());}  }
class C{  public static void addPrecisionSawmillRecipe(ItemStack input,ItemStack primaryOutput,ItemStack secondaryOutput,double chance){  addRecipe(Recipe.PRECISION_SAWMILL,new SawmillRecipe(input,primaryOutput,secondaryOutput,chance));}  }
class C{  public Script parse(URI uri) throws CompilationFailedException, IOException {  return parse(new GroovyCodeSource(uri));}  }
class C{  public void arc(double x,double y,double w,double h,double startAngle,double sweepAngle,boolean joinPath){  arc((float)x,(float)y,(float)w,(float)h,(float)startAngle,(float)sweepAngle,joinPath);}  }
class C{  public DefaultWordsScanner(final Lexer lexer,final TokenSet identifierTokenSet,final TokenSet commentTokenSet,final TokenSet literalTokenSet){  this(lexer,identifierTokenSet,commentTokenSet,literalTokenSet,TokenSet.EMPTY);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GROUP_REMOVE_DEVICE_DB'";  db.execSQL(sql);}  }
class C{  public static <T>List<T> readNullableCollection(BinaryRawReaderEx reader,@Nullable PlatformReaderClosure<T> readClo){  if (!reader.readBoolean())   return null;  return readCollection(reader,readClo);}  }
class C{  LinkedList computeOrder(DirectedGraph g){  stmtToColor=new HashMap();  order=new LinkedList();  graph=g;  PseudoTopologicalReverseOrderer orderer=new PseudoTopologicalReverseOrderer();  reverseOrder=orderer.newList(g);{    Iterator stmtIt=g.iterator();    while (stmtIt.hasNext()) {      Object s=stmtIt.next();      stmtToColor.put(s,new Integer(WHITE));    }  }{    Iterator stmtIt=g.iterator();    while (stmtIt.hasNext()) {      Object s=stmtIt.next();      if (stmtToColor.get(s).intValue() == WHITE)       visitNode(s);    }  }  return order;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:30.802 -0500",hash_original_method="939347762BF1A6E9C475E2B54A6ADF35",hash_generated_method="60127D7162D992757C5B241F8DE55F4B") public KeyGenerationParameters(SecureRandom random,int strength){  this.random=random;  this.strength=strength;}  }
class C{  private void scanAndLoadDictionaries() throws IOException {  if (Files.isDirectory(hunspellDir)) {    try (DirectoryStream<Path> stream=Files.newDirectoryStream(hunspellDir)){      for (      Path file : stream) {        if (Files.isDirectory(file)) {          try (DirectoryStream<Path> inner=Files.newDirectoryStream(hunspellDir.resolve(file),"*.dic")){            if (inner.iterator().hasNext()) {              try {                dictionaries.getUnchecked(file.getFileName().toString());              } catch (              UncheckedExecutionException e) {                logger.error("exception while loading dictionary {}",file.getFileName(),e);              }            }          }         }      }    }   }}  }
class C{  public void sendResponse(int rCode,String rTag) throws IOException {  OutputStream os=new TestHttpServer.NioOutputStream(channel());  PrintStream ps=new PrintStream(os);  ps.print("HTTP/1.1 " + rCode + " "+ rTag+ "\r\n");  if (rspheaders != null) {    rspheaders.print(ps);  } else {    ps.print("\r\n");  }  ps.flush();  if (rspbody != null) {    os.write(rspbody,0,rspbodylen);    os.flush();  }  if (rsptrailers != null) {    rsptrailers.print(ps);  } else   if (rspchunked) {    ps.print("\r\n");  }  ps.flush();}  }
class C{  public void saveDomain(File fileToWrite){  String curText=editorTab.getText();  if (fileToWrite != null) {    try {      Files.write(Paths.get(fileToWrite.toURI()),curText.getBytes());    } catch (    IOException e) {      log.severe("Cannot save domain: " + e);      e.printStackTrace();      editorTab.rereadFile();    }    setSavedFlag(true);    refresh();  }}  }
class C{  public JSONWriter key(String string) throws JSONException {  if (string == null) {    throw new JSONException("Null key.");  }  if (this.mode == 'k') {    try {      this.stack[this.top - 1].putOnce(string,Boolean.TRUE);      if (this.comma) {        this.writer.write(',');      }      this.writer.write(JSONObject.quote(string));      this.writer.write(':');      this.comma=false;      this.mode='o';      return this;    } catch (    IOException e) {      throw new JSONException(e);    }  }  throw new JSONException("Misplaced key.");}  }
class C{  public static String parseIdentifier(FXGNode node,String value,String name,String defaultValue){  Matcher m;  m=idPattern.matcher(value);  if (m.matches()) {    return value;  } else {    if (((AbstractFXGNode)node).isVersionGreaterThanCompiler()) {      FXGLog.getLogger().log(FXGLogger.WARN,"DefaultAttributeValue",null,((AbstractFXGNode)node).getDocumentName(),node.getStartLine(),node.getStartColumn(),defaultValue,name);      return defaultValue;    } else {      throw new FXGException(node.getStartLine(),node.getStartColumn(),"InvalidIdentifierFormat",value);    }  }}  }
class C{  @Override public boolean equals(Object object){  if (object == null) {    return false;  }  if (this == object) {    return true;  }  if (!(object instanceof ConjunctiveRuleModel)) {    return false;  }  ConjunctiveRuleModel rule=(ConjunctiveRuleModel)object;  if (this.getRuleLength() != rule.getRuleLength() || this.getConclusion() != rule.getConclusion()) {    return false;  }  for (int i=0; i < this.getRuleLength(); i++) {    Attribute att=this.getAttributeOfLiteral(i);    int pos;    if ((pos=rule.getPositionOfAttributeInRule(att)) == -1 || this.getTestedValueAtLiteral(i) != rule.getTestedValueAtLiteral(pos)) {      return false;    }  }  return true;}  }
class C{  public synchronized void sync(long position) throws IOException {  if (position + SYNC_SIZE >= end) {    seek(end);    return;  }  if (position < headerEnd) {    in.seek(headerEnd);    syncSeen=true;    return;  }  try {    seek(position + 4);    in.readFully(syncCheck);    int syncLen=sync.length;    for (int i=0; in.getPos() < end; i++) {      int j=0;      for (; j < syncLen; j++) {        if (sync[j] != syncCheck[(i + j) % syncLen]) {          break;        }      }      if (j == syncLen) {        in.seek(in.getPos() - SYNC_SIZE);        return;      }      syncCheck[i % syncLen]=in.readByte();    }  } catch (  ChecksumException e) {    handleChecksumException(e);  }}  }
class C{  public String toStringSummary(){  String result;  String titles;  int resultsetLength;  int i;  int j;  String content;  if (m_NonSigWins == null)   return "-summary data not set-";  result="<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n";  titles="   <tr>";  resultsetLength=1 + Math.max((int)(Math.log(getColCount()) / Math.log(10)),(int)(Math.log(getRowCount()) / Math.log(10)));  for (i=0; i < getColCount(); i++) {    if (getColHidden(i))     continue;    titles+="<td align=\"center\"><b>" + getSummaryTitle(i) + "</b></td>";  }  result+=titles + "<td><b>(No. of datasets where [col] &gt;&gt; [row])</b></td></tr>\n";  for (i=0; i < getColCount(); i++) {    if (getColHidden(i))     continue;    result+="   <tr>";    for (j=0; j < getColCount(); j++) {      if (getColHidden(j))       continue;      if (j == i)       content=Utils.padLeft("-",resultsetLength * 2 + 3); else       content=Utils.padLeft("" + m_NonSigWins[i][j] + " ("+ m_Wins[i][j]+ ")",resultsetLength * 2 + 3);      result+="<td>" + content.replaceAll(" ","&nbsp;") + "</td>";    }    result+="<td><b>" + getSummaryTitle(i) + "</b> = "+ removeFilterName(m_ColNames[i])+ "</td></tr>\n";  }  result+="</table>\n";  return result;}  }
class C{  private static String codegenCompiledResourceBundleNames(SortedSet<String> bundleNames){  if (bundleNames == null)   return "[]";  StringJoiner.ItemStringer itemStringer=new StringJoiner.ItemQuoter();  return "[ " + StringJoiner.join(bundleNames,", ",itemStringer) + " ]";}  }
class C{  public synchronized void request(long n){  System.out.println("requested " + n);  numRequested+=n;  if (!marble.isEmpty()) {    parseLatch.countDown();  }  if (n > 0)   sendLatch.countDown();}  }
class C{  public SendAgentThread(IAgent a,Address to,boolean destroy){  super("SendAgent");  if (!(a.getClass().getClassLoader() instanceof JobClassLoader))   throw new IllegalArgumentException("Agent must have a JobClassLoader");  this.a=a;  this.to=to;  this.destroy=destroy;  startTime=System.currentTimeMillis();}  }
class C{  public final boolean executeCommand(AbsSender absSender,Message message){  if (message.hasText()) {    String text=message.getText();    if (text.startsWith(BotCommand.COMMAND_INIT_CHARACTER)) {      String commandMessage=text.substring(1);      String[] commandSplit=commandMessage.split(BotCommand.COMMAND_PARAMETER_SEPARATOR);      String command=removeUsernameFromCommandIfNeeded(commandSplit[0]);      if (commandRegistryMap.containsKey(command)) {        String[] parameters=Arrays.copyOfRange(commandSplit,1,commandSplit.length);        commandRegistryMap.get(command).execute(absSender,message.getFrom(),message.getChat(),parameters);        return true;      } else       if (defaultConsumer != null) {        defaultConsumer.accept(absSender,message);        return true;      }    }  }  return false;}  }
class C{  @MediumTest public void testPeriodics() throws Exception {  final Account account1=new Account("a@example.com","example.type");  final Account account2=new Account("b@example.com","example.type.2");  final String authority="testprovider";  final Bundle extras1=new Bundle();  extras1.putString("a","1");  final Bundle extras2=new Bundle();  extras2.putString("a","2");  final int period1=200;  final int period2=1000;  PeriodicSync sync1=new PeriodicSync(account1,authority,extras1,period1);  PeriodicSync sync2=new PeriodicSync(account1,authority,extras2,period1);  PeriodicSync sync3=new PeriodicSync(account1,authority,extras2,period2);  PeriodicSync sync4=new PeriodicSync(account2,authority,extras2,period2);  MockContentResolver mockResolver=new MockContentResolver();  SyncStorageEngine engine=SyncStorageEngine.newTestInstance(new TestContext(mockResolver,getContext()));  removePeriodicSyncs(engine,account1,0,authority);  removePeriodicSyncs(engine,account2,0,authority);  removePeriodicSyncs(engine,account1,1,authority);  engine.addPeriodicSync(sync1.account,0,sync1.authority,sync1.extras,sync1.period);  engine.addPeriodicSync(sync2.account,0,sync2.authority,sync2.extras,sync2.period);  engine.addPeriodicSync(sync3.account,0,sync3.authority,sync3.extras,sync3.period);  engine.addPeriodicSync(sync4.account,0,sync4.authority,sync4.extras,sync4.period);  engine.addPeriodicSync(sync2.account,1,sync2.authority,sync2.extras,sync2.period);  List<PeriodicSync> syncs=engine.getPeriodicSyncs(account1,0,authority);  assertEquals(2,syncs.size());  assertEquals(sync1,syncs.get(0));  assertEquals(sync3,syncs.get(1));  engine.removePeriodicSync(sync1.account,0,sync1.authority,sync1.extras);  syncs=engine.getPeriodicSyncs(account1,0,authority);  assertEquals(1,syncs.size());  assertEquals(sync3,syncs.get(0));  syncs=engine.getPeriodicSyncs(account2,0,authority);  assertEquals(1,syncs.size());  assertEquals(sync4,syncs.get(0));  syncs=engine.getPeriodicSyncs(sync2.account,1,sync2.authority);  assertEquals(1,syncs.size());  assertEquals(sync2,syncs.get(0));}  }
class C{  public List<ExportGroupRestRep> findContainingCluster(URI clusterId){  return search().byCluster(clusterId).run();}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  maybeParse();  out.defaultWriteObject();}  }
class C{  public AddTableChange(Table newTable){  _newTable=newTable;}  }
class C{  public int length(){  return length;}  }
class C{  private void createSceneSSBO(){  this.ssbo=glGenBuffers();  glBindBuffer(GL_SHADER_STORAGE_BUFFER,ssbo);  ByteBuffer ssboData=BufferUtils.createByteBuffer(4 * (4 + 4) * boxes.length / 2);  FloatBuffer fv=ssboData.asFloatBuffer();  for (int i=0; i < boxes.length; i+=2) {    Vector3f min=boxes[i];    Vector3f max=boxes[i + 1];    fv.put(min.x).put(min.y).put(min.z).put(0.0f);    fv.put(max.x).put(max.y).put(max.z).put(0.0f);  }  glBufferData(GL_SHADER_STORAGE_BUFFER,ssboData,GL_STATIC_DRAW);  glBindBuffer(GL_SHADER_STORAGE_BUFFER,0);}  }
class C{  public boolean hasStartIndex(){  return getStartIndex() != null;}  }
class C{  public static <T>String toString(Class<T> cls,T obj,String name0,Object val0,String name1,Object val1,String name2,Object val2,String name3,Object val3,String name4,Object val4){  assert cls != null;  assert obj != null;  assert name0 != null;  assert name1 != null;  assert name2 != null;  assert name3 != null;  assert name4 != null;  Queue<GridToStringThreadLocal> queue=threadCache.get();  assert queue != null;  GridToStringThreadLocal tmp=queue.isEmpty() ? new GridToStringThreadLocal() : queue.remove();  Object[] addNames=tmp.getAdditionalNames();  Object[] addVals=tmp.getAdditionalValues();  addNames[0]=name0;  addVals[0]=val0;  addNames[1]=name1;  addVals[1]=val1;  addNames[2]=name2;  addVals[2]=val2;  addNames[3]=name3;  addVals[3]=val3;  addNames[4]=name4;  addVals[4]=val4;  try {    return toStringImpl(cls,tmp.getStringBuilder(),obj,addNames,addVals,5);  }  finally {    queue.offer(tmp);  }}  }
class C{  public int compareTo(FifteenPuzzleNode n){  return toString().compareTo(n.toString());}  }
class C{  private void restore(Bundle savedInstanceState){  if (savedInstanceState != null) {    player=(IPlayer)savedInstanceState.get(KEY_PLAYER);    videoEntry=(DownloadEntry)savedInstanceState.get(KEY_VIDEO);    isPrepared=savedInstanceState.getBoolean(KEY_PREPARED);    isAutoPlayDone=savedInstanceState.getBoolean(KEY_AUTOPLAY_DONE);    transcript=(TranscriptModel)savedInstanceState.get(KEY_TRANSCRIPT);    if (savedInstanceState.getBoolean(KEY_MESSAGE_DISPLAYED)) {      showVideoNotAvailable(VideoNotPlayMessageType.IS_VIDEO_MESSAGE_DISPLAYED);    }  } else {    if (player == null)     player=new Player();  }}  }
class C{  private boolean isTimeout(){  int allowedMin=4 + level * 2;  if (level <= 2) {    allowedMin=2;  }  long diff=System.currentTimeMillis() - levelStart;  return diff / 1000 > allowedMin * 60;}  }
class C{  public void removeSection(Section s){  sections.remove(s);  ccl.remove(s);}  }
class C{  public S2Polygon assemblePolygon(){  S2Polygon polygon=new S2Polygon();  List<S2Edge> unusedEdges=Lists.newArrayList();  assemblePolygon(polygon,unusedEdges);  return polygon;}  }
class C{  @Override public boolean supportsAlterTableWithAddColumn(){  debugCodeCall("supportsAlterTableWithAddColumn");  return true;}  }
class C{  public IntegrateAndFireRulePanel(){  super();  this.add(tabbedPane);  tfTimeConstant=createTextField(null,null);  tfThreshold=createTextField(null,null);  tfReset=createTextField(null,null);  tfResistance=createTextField(null,null);  tfRestingPotential=createTextField(null,null);  tfBackgroundCurrent=createTextField(null,null);  mainTab.addItem("Threshold (mV)",tfThreshold);  mainTab.addItem("Resting potential (mV)",tfRestingPotential);  mainTab.addItem("Reset potential (mV)",tfReset);  mainTab.addItem("Resistance (M\u03A9)",tfResistance);  mainTab.addItem("Background Current (nA)",tfBackgroundCurrent);  mainTab.addItem("Time constant (ms)",tfTimeConstant);  mainTab.addItem("Add noise",getAddNoise());  tabbedPane.add(mainTab,"Main");  tabbedPane.add(getNoisePanel(),"Noise");}  }
class C{  private static Response failure(final Throwable err,final int code) throws IOException {  final ByteArrayOutputStream baos=new ByteArrayOutputStream();  final PrintStream stream=new Utf8PrintStream(baos,false);  try {    err.printStackTrace(stream);  }  finally {    stream.close();  }  return new RsWithStatus(new RsText(new ByteArrayInputStream(baos.toByteArray())),code);}  }
class C{  private boolean existsFdrs(String entidad) throws Exception {  ArchivesTable table=new ArchivesTable();  boolean exists=false;  String tblName;  int count;  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    tblName=DaoUtil.getFdrHdrTblName(_tblPrefix);    count=DbSelectFns.selectCount(dbConn,tblName,null);    if (count > 0)     exists=true;    dbConn.open(DBSessionManager.getSession(entidad));  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return exists;}  }
class C{  boolean defineChar2StringMapping(String outputString,char inputChar){  CharKey character=new CharKey(inputChar);  m_charToString.put(character,outputString);  set(inputChar);  boolean extraMapping=extraEntity(outputString,inputChar);  return extraMapping;}  }
class C{  public void addScrollingListener(OnWheelScrollListener listener){  scrollingListeners.add(listener);}  }
class C{  public void addLast(Object o){  addBefore(o,header);}  }
class C{  public void draw(Graphics2D g2d){  syncLayout();  gv.draw(g2d,aci);}  }
class C{  public void load(SimState state){  super.load(state);  setupPortrayals();}  }
class C{  public boolean isStrictJSR107(){  return strictJSR107;}  }
class C{  public void addItem(Artist a){synchronized (mArtists) {    mArtists.add(a);    sortList();  }}  }
class C{  protected void assertInventory(final long warehouseId,final String skuCode,final String expectedAvailable,final String expectedReserved){  ProductSku sku=productSkuService.getProductSkuBySkuCode(skuCode);  Pair<BigDecimal,BigDecimal> qty=skuWarehouseService.findQuantity(new ArrayList<Warehouse>(){{      add(warehouseService.findById(warehouseId));    }  },sku.getCode());  assertEquals(new BigDecimal(expectedAvailable),qty.getFirst());  assertEquals(new BigDecimal(expectedReserved),qty.getSecond());}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 1:{        addToken(Token.IDENTIFIER);      }case 11:    break;case 9:{    addToken(Token.MARKUP_TAG_DELIMITER);  }case 12:break;case 2:{addToken(Token.WHITESPACE);}case 13:break;case 10:{addToken(Token.OPERATOR);}case 14:break;case 8:{addToken(Token.MARKUP_TAG_NAME);}case 15:break;case 4:{addToken(Token.MARKUP_TAG_DELIMITER);yybegin(INTAG);}case 16:break;case 6:{addToken(Token.IDENTIFIER);}case 17:break;case 5:{addToken(Token.MARKUP_TAG_ATTRIBUTE);}case 18:break;case 3:{addNullToken();return firstToken;}case 19:break;case 7:{yybegin(YYINITIAL);addToken(Token.MARKUP_TAG_DELIMITER);}case 20:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case INTAG:{addToken(zzMarkedPos,zzMarkedPos,INTERNAL_INTAG);return firstToken;}case 42:break;case YYINITIAL:{addNullToken();return firstToken;}case 43:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public static void main(String... a) throws Exception {  TestImmutableArray test=(TestImmutableArray)TestBase.createCaller().init();  test.test();  testPerformance();}  }
class C{  protected Entry<K,V> nextEntry(){  if (modCount != expectedModCount)   throw new ConcurrentModificationException();  if (nextKey == null && !hasNext())   throw new NoSuchElementException();  lastReturned=entry;  entry=entry.next;  currentKey=nextKey;  nextKey=null;  return lastReturned;}  }
class C{  public jMatrix solve(jMatrix B){  return (m == n ? (new Jama.LUDecomposition(this)).solve(B) : (new Jama.QRDecomposition(this)).solve(B));}  }
class C{  public void close() throws IOException {  internalIn.close();}  }
class C{  public FontType(int textureAtlas,File fontFile){  this.textureAtlas=textureAtlas;  this.loader=new TextMeshCreator(fontFile);}  }
class C{  public void recordVolumeOperation(DbClient dbClient,OperationTypeEnum opType,Operation.Status status,Object... extParam){  try {    boolean opStatus=(Operation.Status.ready == status) ? true : false;    String evType;    evType=opType.getEvType(opStatus);    String evDesc=opType.getDescription();    String opStage=AuditLogManager.AUDITOP_END;    _logger.info("opType: {} detail: {}",opType.toString(),evType.toString() + ':' + evDesc);    URI uri=(URI)extParam[0];    recordBourneVolumeEvent(dbClient,evType,status,evDesc,uri);    String id=uri.toString();    AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,id);  } catch (  Exception e) {    _logger.error("Failed to record volume operation {}, err:",opType.toString(),e);  }}  }
class C{  private boolean isBetterLocation(final Location location){  if (location == null) {    return false;  }  if (currentBestLocation == null) {    return true;  }  long timeDelta=location.getTime() - currentBestLocation.getTime();  boolean isNewer=timeDelta > 0;  if (timeDelta > TWO_MINUTES_IN_MILLISECONDS) {    return true;  }  if (timeDelta < -TWO_MINUTES_IN_MILLISECONDS) {    return false;  }  int accuracyDelta=(int)(location.getAccuracy() - currentBestLocation.getAccuracy());  boolean isMoreAccurate=accuracyDelta < 0;  boolean isEquallyAccurate=accuracyDelta == 0;  boolean isSlightlyLessAccurate=(accuracyDelta > 0) && (accuracyDelta <= LOCATION_ACCURACY);  boolean isFromSameProvider=isSameProvider(location.getProvider(),currentBestLocation.getProvider());  return (isMoreAccurate || (isNewer && (isEquallyAccurate || (isFromSameProvider && isSlightlyLessAccurate))));}  }
class C{  public static double SSPNmaxFitness(GEPIndividual ind){  return (1000.0);}  }
class C{  public void testResourcesAvailable(){  new JapaneseAnalyzer().close();}  }
class C{  public boolean visit(TypeParameter node){  return true;}  }
class C{  protected JSRInlinerAdapter(final int api,final MethodVisitor mv,final int access,final String name,final String desc,final String signature,final String[] exceptions){  super(api,access,name,desc,signature,exceptions);  this.mv=mv;}  }
class C{  boolean waitForFileDone(){synchronized (waitFileSync) {    try {      while (!fileDone)       waitFileSync.wait();    } catch (    Exception e) {    }  }  return fileSuccess;}  }
class C{  public static String format(String property,Object... args){  String text=ResourceBundle.getBundle(Messages.class.getName()).getString(property);  return MessageFormat.format(text,args);}  }
class C{  AlarmManager(IAlarmManager service){  mService=service;}  }
class C{  public static <E extends Comparable<E>>BinaryNode<E> leastCommonAncestor(BinaryNode<E> node,E value1,E value2){  if (node == null || value1.compareTo(value2) > 0)   throw new NoSuchElementException();  if (value1.compareTo(node.value) <= 0 && value2.compareTo(node.value) >= 0) {    return node;  } else   if (value1.compareTo(node.value) > 0 && value2.compareTo(node.value) > 0) {    return leastCommonAncestor(node.right,value1,value2);  } else {    return leastCommonAncestor(node.left,value1,value2);  }}  }
class C{  public void provideCapacity(final int capacity){  if (c.length >= capacity) {    return;  }  int newcapacity=((capacity * 3) >> 1) + 1;  char[] newc=new char[newcapacity];  System.arraycopy(c,0,newc,0,length);  c=newc;}  }
class C{  protected final void addImpl(Component comp,Object constraints,int index){  if (comp instanceof Layer) {    super.addImpl(comp,constraints,index);  } else {    throw new IllegalArgumentException("only Layers can be added to a MapBean");  }}  }
class C{  public static double lngamma(double xx){  if (xx <= 0)   return Double.NaN;  double x, y, tmp, ser;  int j;  y=x=xx;  tmp=x + 5.5;  tmp-=(x + 0.5) * Math.log(tmp);  ser=1.000000000190015;  for (j=0; j <= 5; j++) {    ser+=cof[j] / ++y;  }  return -tmp + Math.log(2.5066282746310005 * ser / x);}  }
class C{  @Override public int compareTo(HaplotypePlayback that){  final int position=this.templatePosition() - that.templatePosition();  if (position != 0) {    return position;  }  if (this.mNextVariant == null) {    if (that.mNextVariant == null) {      return 0;    }    return -1;  }  if (that.mNextVariant == null) {    return 1;  }  final int current=this.mNextVariant.compareTo(that.mNextVariant);  if (current != 0) {    return current;  }  final int varPos=this.mPositionInVariant - that.mPositionInVariant;  if (varPos != 0) {    return varPos;  }  final Iterator<OrientedVariant> thisIt=this.mVariants.iterator();  final Iterator<OrientedVariant> thatIt=that.mVariants.iterator();  while (thisIt.hasNext()) {    if (!thatIt.hasNext()) {      return 1;    }    final int future=thisIt.next().compareTo(thatIt.next());    if (future != 0) {      return future;    }  }  if (thatIt.hasNext()) {    return -1;  }  return 0;}  }
class C{  public PropertyChangeListener(IPreferenceStore preferenceStore){  setPreferenceStore(preferenceStore);}  }
class C{  public void writePopulation(String outputfolder){  if (this.sc.getPopulation().getPersons().size() == 0 || this.personAttributes == null) {    throw new RuntimeException("Either no persons or person attributes to write.");  } else {    LOG.info("Writing population to file...");    PopulationWriter pw=new PopulationWriter(this.sc.getPopulation(),this.sc.getNetwork());    pw.writeV5(outputfolder + "Population.xml");    LOG.info("Writing person attributes to file...");    ObjectAttributesXmlWriter oaw=new ObjectAttributesXmlWriter(this.personAttributes);    oaw.putAttributeConverter(IncomeImpl.class,new SAIncomeConverter());    oaw.setPrettyPrint(true);    oaw.writeFile(outputfolder + "PersonAttributes.xml");  }}  }
class C{  public static String formatPixel(int pixel){  return String.format("0x%8s",Integer.toHexString(pixel)).replace(' ','0');}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.shadowPaint,stream);}  }
class C{  public final void print(char[] buffer,int offset,int length) throws IOException {  if (_source == null)   return;  printLatin1(buffer,offset,length);}  }
class C{  public void write(String string){  int caretPosition=getCaretPosition();  if (caretPosition + string.length() > maxLength) {    string=string.substring(0,maxLength - caretPosition + 1);  }  int start=caretPosition;  int end=caretPosition + string.length();  setSelectionStart(start);  setSelectionEnd(end);  replaceSelection(string);  setSelectionStart(getCaretPosition());  color(start,end,getForeground());}  }
class C{  public SHA512(){  super();}  }
class C{  public PutResponseMessage(PutResponseMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }}  }
class C{  public void notifyThrottleDisposed(){  log.debug("notifyThrottleDisposed");  dispatchButton.setEnabled(false);  releaseButton.setEnabled(false);  progButton.setEnabled(false);  setButton.setEnabled(true);  addrSelector.setEnabled(true);  getRosterEntrySelector().setEnabled(true);  conRosterBox.setEnabled(true);  if (throttle != null) {    throttle.removePropertyChangeListener(this);  }  throttle=null;  rosterEntry=null;  notifyListenersOfThrottleRelease();}  }
class C{  public boolean hasMappingAccessor(String attributeName){  return getMappingAccessor(attributeName,false) != null;}  }
class C{  public boolean onKeyUp(int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_BACK && mSlidingMenu.isMenuShowing()) {    showContent();    return true;  }  return false;}  }
class C{  public ColoredDataSeries(final HistogramBin[] bins){  this.data=bins;}  }
class C{  public DoubleMatrix2D solve(DoubleMatrix2D A,DoubleMatrix2D B){  return (A.rows() == A.columns() ? (lu(A).solve(B)) : (qr(A).solve(B)));}  }
class C{  private ObjID(long objNum,UID space){  this.objNum=objNum;  this.space=space;}  }
class C{  protected void inorder(TreeNode<E> root){  if (root == null)   return;  inorder(root.left);  System.out.print(root.element + " ");  inorder(root.right);}  }
class C{  public static String rtrimWildcardTokens(String input){  return rtrimWildcardTokens(input,DEFAULT_PATH_SEPARATOR);}  }
class C{  public void notifySecondBitConflict(String conflict,int bitNum){  javax.swing.JOptionPane.showMessageDialog(null,"The second output bit, " + bitNum + ", is currently assigned to "+ conflict+ ". Turnout cannot be created as "+ "you specified.","C/MRI Assignment Conflict",javax.swing.JOptionPane.INFORMATION_MESSAGE,null);}  }
class C{  public void moveOrigin(int dx,int dy){  log.trace("Move origin to: " + origin);  origin.translate(handler.realignToGrid(false,dx),handler.realignToGrid(false,dy));}  }
class C{  static CodecReader filter(CodecReader reader) throws IOException {  reader=VersionFieldUpgrader.wrap(reader);  return reader;}  }
class C{  public Object value(InternalContextAdapter context) throws MethodInvocationException {  Object left=jjtGetChild(0).value(context);  Object right=jjtGetChild(1).value(context);  if (left == null || right == null) {    rsvc.error((left == null ? "Left" : "Right") + " side (" + jjtGetChild((left == null ? 0 : 1)).literal()+ ") of subtraction operation has null value."+ " Operation not possible. "+ context.getCurrentTemplateName()+ " [line "+ getLine()+ ", column "+ getColumn()+ "]");    return null;  }  if (!(left instanceof Integer) || !(right instanceof Integer)) {    rsvc.error((!(left instanceof Integer) ? "Left" : "Right") + " side of subtraction operation is not a valid type. " + "Currently only integers (1,2,3...) and Integer type is supported. "+ context.getCurrentTemplateName()+ " [line "+ getLine()+ ", column "+ getColumn()+ "]");    return null;  }  return new Integer(((Integer)left).intValue() - ((Integer)right).intValue());}  }
class C{  private void track(final String event,final JSONObject props){  if (props != null) {    trackOpt(event,props);  }}  }
class C{  public void notifyConsistThrottleFound(DccThrottle t){  this.consistThrottle=t;  for (int i=0; i < listeners.size(); i++) {    AddressListener l=listeners.get(i);    if (log.isDebugEnabled()) {      log.debug("Notify address listener of address change " + l.getClass());    }    l.notifyConsistAddressThrottleFound(t);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void writeGolomb(int divisor,int value) throws IOException {  int q=value / divisor;  for (int i=0; i < q; i++) {    writeBit(true,MAX_PROBABILITY / 2);  }  writeBit(false,MAX_PROBABILITY / 2);  int r=value - q * divisor;  int bit=31 - Integer.numberOfLeadingZeros(divisor - 1);  if (r < ((2 << bit) - divisor)) {    bit--;  } else {    r+=(2 << bit) - divisor;  }  for (; bit >= 0; bit--) {    writeBit(((r >>> bit) & 1) == 1,MAX_PROBABILITY / 2);  }}  }
class C{  public void testCloseStrategy() throws Throwable {  RecoveryStrategy strategy=RecoveryStrategies.CLOSE;  CopycatClient client=mock(CopycatClient.class);  strategy.recover(client);  verify(client).close();}  }
class C{  public static void removeSecondaryObjective(SecondaryObjective<?> objective){  secondaryObjectives.remove(objective);}  }
class C{  public static CrusherRecipesOld smelting(){  return smeltingBase;}  }
class C{  public X509Name(String dirName,X509NameEntryConverter converter){  this(DefaultReverse,DefaultLookUp,dirName,converter);}  }
class C{  protected void sequence_BindingIdentifierAsFormalParameter(ISerializationContext context,FormalParameter semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameBindingIdentifierParserRuleCall_0(),semanticObject.getName());  feeder.finish();}  }
class C{  private void putPixel(WritableRaster raster,int x,int y,Color color){  raster.setPixel(x,y,new int[]{color.getRed(),color.getGreen(),color.getBlue()});}  }
class C{  public MyTableRowSorter(){  this(null);}  }
class C{  private void showProgressPanel(){  m_panel.setEnabled(false);}  }
class C{  protected static void copyBoardInto(IHex[] dest,int destWidth,int x,int y,IBoard copied){  for (int i=0; i < copied.getHeight(); i++) {    for (int j=0; j < copied.getWidth(); j++) {      dest[(i + y) * destWidth + j + x]=copied.getHex(j,i);    }  }}  }
class C{  private static boolean isTableFieldNode(Element node){  return (node.getAttributeValue(null,ATTRIBUTE_OPENMRS_ATTRIBUTE) != null && node.getAttributeValue(null,ATTRIBUTE_OPENMRS_TABLE) != null);}  }
class C{  public void launch(View view){  WebMediumConfig config=null;  if (launchType == LaunchType.Bot) {    config=new InstanceConfig();  } else   if (launchType == LaunchType.Forum) {    config=new ForumConfig();  } else   if (launchType == LaunchType.Channel) {    config=new ChannelConfig();  }  config.id=launchInstanceId;  config.name=launchInstanceName;  HttpAction action=new HttpFetchAction(this,config,true);  action.execute();}  }
class C{  @Override public void filter(ClientRequestContext requestContext,ClientResponseContext responseContext) throws IOException {  long time=new Date().getTime();  TraceEvent traceEvent=(TraceEvent)requestContext.getProperty(TRACE_EVENT_ATTRIBUTE);  if (traceEvent != null) {    TraceEvent endTraceEvent=new TraceEvent(TracingConstants.CLIENT_TRACE_END,traceEvent.getTraceId(),traceEvent.getOriginId(),time);    endTraceEvent.setStatusCode(responseContext.getStatus());    TracingUtil.pushToDAS(endTraceEvent,dasUrl);  }}  }
class C{  public static MethodAnnotation fromMethodDescriptor(MethodDescriptor methodDescriptor){  return fromForeignMethod(methodDescriptor.getSlashedClassName(),methodDescriptor.getName(),methodDescriptor.getSignature(),methodDescriptor.isStatic());}  }
class C{  public long optLong(int index){  return this.optLong(index,0);}  }
class C{  public static Tiling singleTile(String name){  Tiling ret=new Tiling(1,1);  ret.setAt(0,0,name);  return ret;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:10.765 -0500",hash_original_method="1E17DF4D2E642F9316AB5D83170D1374",hash_generated_method="781E6B54E01322E06173924A59BC3BEB") static public MotionEvent obtain(long downTime,long eventTime,int action,float x,float y,float pressure,float size,int metaState,float xPrecision,float yPrecision,int deviceId,int edgeFlags){  MotionEvent ev=obtain();synchronized (gSharedTempLock) {    ensureSharedTempPointerCapacity(1);    final PointerProperties[] pp=gSharedTempPointerProperties;    pp[0].clear();    pp[0].id=0;    final PointerCoords pc[]=gSharedTempPointerCoords;    pc[0].clear();    pc[0].x=x;    pc[0].y=y;    pc[0].pressure=pressure;    pc[0].size=size;    ev.mNativePtr=nativeInitialize(ev.mNativePtr,deviceId,InputDevice.SOURCE_UNKNOWN,action,0,edgeFlags,metaState,0,0,0,xPrecision,yPrecision,downTime * NS_PER_MS,eventTime * NS_PER_MS,1,pp,pc);    return ev;  }}  }
class C{  public int hash(char[] buffer,int offset,int length){  int code=0;  for (int i=0; i < length; i++) {    code=code * 37 + buffer[offset + i];  }  return code & 0x7FFFFFF;}  }
class C{  public boolean isShowGridX(){  return mShowGridX;}  }
class C{  public WebSocket flush(){synchronized (mStateManager) {    WebSocketState state=mStateManager.getState();    if (state != OPEN && state != CLOSING) {      return this;    }  }  WritingThread wt=mWritingThread;  if (wt != null) {    wt.queueFlush();  }  return this;}  }
class C{  @Override public void inc(ScoreMap<E> map){  if (map == null)   return;  for (  E entry : map) {    int count=map.get(entry);    if (count > 0)     this.inc(entry,count);  }}  }
class C{  public ByteVector putLong(final long l){  int length=this.length;  if (length + 8 > data.length) {    enlarge(8);  }  byte[] data=this.data;  int i=(int)(l >>> 32);  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  i=(int)l;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  private UIComponent newInstance(TreeNode n) throws FacesException {  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.log(Level.FINEST,"FaceletFullStateManagementStrategy.newInstance",n.componentType);  }  try {    Class<?> t=((classMap != null) ? classMap.get(n.componentType) : null);    if (t == null) {      t=Util.loadClass(n.componentType,n);      if (t != null && classMap != null) {        classMap.put(n.componentType,t);      } else {        if (!isDevelopmentMode) {          throw new NullPointerException();        }      }    }    assert (t != null);    UIComponent c=(UIComponent)t.newInstance();    c.setId(n.id);    return c;  } catch (  ClassNotFoundException|NullPointerException|InstantiationException|IllegalAccessException e) {    throw new FacesException(e);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public final void testValidateSucceeds(){  IPv4AddressValidator iPv4AddressValidator=new IPv4AddressValidator("foo");  assertTrue(iPv4AddressValidator.validate(""));  assertTrue(iPv4AddressValidator.validate("1.1.1.1"));  assertTrue(iPv4AddressValidator.validate("255.255.255.255"));  assertTrue(iPv4AddressValidator.validate("192.168.1.1"));  assertTrue(iPv4AddressValidator.validate("10.10.1.1"));  assertTrue(iPv4AddressValidator.validate("132.254.111.10"));  assertTrue(iPv4AddressValidator.validate("26.10.2.10"));  assertTrue(iPv4AddressValidator.validate("127.0.0.1"));}  }
class C{  public boolean isEmpty(){  return warnings.isEmpty();}  }
class C{  public static String escape(String s){  return JSONValue.escape(s);}  }
class C{  public Sound(File file,SoundType type) throws IOException {  super(file,type);}  }
class C{  private XPathFactory loadFromServicesFile(String uri,String resourceName,InputStream in){  if (debug)   debugPrintln("Reading " + resourceName);  BufferedReader rd;  try {    rd=new BufferedReader(new InputStreamReader(in,"UTF-8"),DEFAULT_LINE_LENGTH);  } catch (  java.io.UnsupportedEncodingException e) {    rd=new BufferedReader(new InputStreamReader(in),DEFAULT_LINE_LENGTH);  }  String factoryClassName;  XPathFactory resultFactory=null;  while (true) {    try {      factoryClassName=rd.readLine();    } catch (    IOException x) {      break;    }    if (factoryClassName != null) {      int hashIndex=factoryClassName.indexOf('#');      if (hashIndex != -1) {        factoryClassName=factoryClassName.substring(0,hashIndex);      }      factoryClassName=factoryClassName.trim();      if (factoryClassName.length() == 0) {        continue;      }      try {        XPathFactory foundFactory=createInstance(factoryClassName);        if (foundFactory.isObjectModelSupported(uri)) {          resultFactory=foundFactory;          break;        }      } catch (      Exception ignored) {      }    } else {      break;    }  }  IoUtils.closeQuietly(rd);  return resultFactory;}  }
class C{  private boolean hasAccess(StorageOSUser storageOSUser,StringSetMap acls){  if (acls == null || acls.isEmpty()) {    log.debug("acls is empty, pass");    return true;  }  List<ACLEntry> aclEntries=_permissionsHelper.convertToACLEntries(acls);  String username=storageOSUser.getName();  for (  ACLEntry entry : aclEntries) {    if (entry.getSubjectId() != null && entry.getSubjectId().equalsIgnoreCase(username)) {      log.debug("has acls contain subjectId for current user: " + username);      return true;    } else     if (entry.getGroup() != null) {      for (      String group : storageOSUser.getGroups()) {        if (group.equalsIgnoreCase(entry.getGroup())) {          log.debug("has acls contain group for current user: " + entry.getGroup());          return true;        }      }    } else {      continue;    }  }  log.debug("has acls, but current user is not in them: " + username);  return false;}  }
class C{  public boolean isReplaceHtmlLinefeeds(){  return replaceHtmlLinefeeds;}  }
class C{  @LargeTest public void testThumbnailWithCorruptedVideoPart() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "corrupted_H264_BP_640x480_12.5fps_256kbps_AACLC_16khz_24kbps_s_0_26.mp4";  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  boolean flagForException=false;  try {    final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);    final int outWidth=mediaVideoItem.getWidth();    final int outHeight=mediaVideoItem.getHeight() * 2;    final Bitmap thumbNailBmp=mediaVideoItem.getThumbnail(outWidth,outHeight,mediaVideoItem.getDuration() / 2);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Corrupted File cannot be read",flagForException);}  }
class C{  public String prepareIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  MDocType dt=MDocType.get(getCtx(),getC_DocType_ID());  if (!MPeriod.isOpen(getCtx(),getDateOrdered(),dt.getDocBaseType(),getAD_Org_ID())) {    m_processMsg="@PeriodClosed@";    return DocAction.STATUS_Invalid;  }  MDDOrderLine[] lines=getLines(true,"M_Product_ID");  if (lines.length == 0) {    m_processMsg="@NoLines@";    return DocAction.STATUS_Invalid;  }  if (getDeliveryRule() != null && getDeliveryRule().equals(MDDOrder.DELIVERYRULE_CompleteOrder)) {    for (int i=0; i < lines.length; i++) {      MDDOrderLine line=lines[i];      MProduct product=line.getProduct();      if (product != null && product.isExcludeAutoDelivery()) {        m_processMsg="@M_Product_ID@ " + product.getValue() + " @IsExcludeAutoDelivery@";        return DocAction.STATUS_Invalid;      }    }  }  String mandatoryType="='Y'";  String sql="SELECT COUNT(*) " + "FROM DD_OrderLine ol" + " INNER JOIN M_Product p ON (ol.M_Product_ID=p.M_Product_ID)"+ " INNER JOIN M_AttributeSet pas ON (p.M_AttributeSet_ID=pas.M_AttributeSet_ID) "+ "WHERE pas.MandatoryType" + mandatoryType + " AND ol.M_AttributeSetInstance_ID IS NULL"+ " AND ol.DD_Order_ID=?";  int no=DB.getSQLValue(get_TrxName(),sql,getDD_Order_ID());  if (no != 0) {    m_processMsg="@LinesWithoutProductAttribute@ (" + no + ")";    return DocAction.STATUS_Invalid;  }  reserveStock(lines);  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  m_justPrepared=true;  return DocAction.STATUS_InProgress;}  }
class C{  protected JBZipEntry(String name,JBZipFile file){  this.name=name;  myFile=file;}  }
class C{  private void bol(){  column=0;  collectingIndent=(maxIndent != 0);  indent=0;}  }
class C{  public void addImplicit(ObjectType type){  add(type,false);}  }
class C{  public Slf4jLogger(){  impl=LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);}  }
class C{  public static void directOutput(String filename,boolean append,boolean alsoToOutStream){  try {    directOutput(new FileOutputStream(filename,append),alsoToOutStream);  } catch (  IOException ioe) {    notifyOut=true;    out=System.out;    error("Debug: can't set up <" + filename + "> for log file! \n"+ ioe);    return;  }}  }
class C{  protected boolean haveSharedCellsRaw(ObjectMatrix1D other){  if (other instanceof SelectedSparseObjectMatrix1D) {    SelectedSparseObjectMatrix1D otherMatrix=(SelectedSparseObjectMatrix1D)other;    return this.elements == otherMatrix.elements;  } else   if (other instanceof SparseObjectMatrix1D) {    SparseObjectMatrix1D otherMatrix=(SparseObjectMatrix1D)other;    return this.elements == otherMatrix.elements;  }  return false;}  }
class C{  @Override public void flush() throws IOException {  super.flush();}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static String addVisibleNewLineChars(String string){  return string.replaceAll("\r",CARRIAGE_RETURN_SYMBOL + "\r").replaceAll("\n",LINE_FEED_SYMBOL + "\n");}  }
class C{  private void readCode(final MethodVisitor mv,final Context context,int u){  byte[] b=this.b;  char[] c=context.buffer;  int maxStack=readUnsignedShort(u);  int maxLocals=readUnsignedShort(u + 2);  int codeLength=readInt(u + 4);  u+=8;  int codeStart=u;  int codeEnd=u + codeLength;  Label[] labels=context.labels=new Label[codeLength + 2];  readLabel(codeLength + 1,labels);  while (u < codeEnd) {    int offset=u - codeStart;    int opcode=b[u] & 0xFF;switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:case ClassWriter.IMPLVAR_INSN:      u+=1;    break;case ClassWriter.LABEL_INSN:  readLabel(offset + readShort(u + 1),labels);u+=3;break;case ClassWriter.LABELW_INSN:readLabel(offset + readInt(u + 1),labels);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {u+=6;} else {u+=4;}break;case ClassWriter.TABL_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 8) - readInt(u + 4) + 1; i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=4;}u+=12;break;case ClassWriter.LOOK_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 4); i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=8;}u+=8;break;case ClassWriter.VAR_INSN:case ClassWriter.SBYTE_INSN:case ClassWriter.LDC_INSN:u+=2;break;case ClassWriter.SHORT_INSN:case ClassWriter.LDCW_INSN:case ClassWriter.FIELDORMETH_INSN:case ClassWriter.TYPE_INSN:case ClassWriter.IINC_INSN:u+=3;break;case ClassWriter.ITFMETH_INSN:case ClassWriter.INDYMETH_INSN:u+=5;break;default :u+=4;break;}}for (int i=readUnsignedShort(u); i > 0; --i) {Label start=readLabel(readUnsignedShort(u + 2),labels);Label end=readLabel(readUnsignedShort(u + 4),labels);Label handler=readLabel(readUnsignedShort(u + 6),labels);String type=readUTF8(items[readUnsignedShort(u + 8)],c);mv.visitTryCatchBlock(start,end,handler,type);u+=8;}u+=2;int[] tanns=null;int[] itanns=null;int tann=0;int itann=0;int ntoff=-1;int nitoff=-1;int varTable=0;int varTypeTable=0;boolean zip=true;boolean unzip=(context.flags & EXPAND_FRAMES) != 0;int stackMap=0;int stackMapSize=0;int frameCount=0;Context frame=null;Attribute attributes=null;for (int i=readUnsignedShort(u); i > 0; --i) {String attrName=readUTF8(u + 2,c);if ("LocalVariableTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {varTable=u + 8;for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}label+=readUnsignedShort(v + 12);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}v+=10;}}} else if ("LocalVariableTypeTable".equals(attrName)) {varTypeTable=u + 8;} else if ("LineNumberTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}Label l=labels[label];while (l.line > 0) {if (l.next == null) {l.next=new Label();}l=l.next;}l.line=readUnsignedShort(v + 12);v+=4;}}} else if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {tanns=readTypeAnnotations(mv,context,u + 8,true);ntoff=tanns.length == 0 || readByte(tanns[0]) < 0x43 ? -1 : readUnsignedShort(tanns[0] + 1);} else if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {itanns=readTypeAnnotations(mv,context,u + 8,false);nitoff=itanns.length == 0 || readByte(itanns[0]) < 0x43 ? -1 : readUnsignedShort(itanns[0] + 1);} else if (FRAMES && "StackMapTable".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else if (FRAMES && "StackMap".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {zip=false;stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else {for (int j=0; j < context.attrs.length; ++j) {if (context.attrs[j].type.equals(attrName)) {Attribute attr=context.attrs[j].read(this,u + 8,readInt(u + 4),c,codeStart - 8,labels);if (attr != null) {attr.next=attributes;attributes=attr;}}}}u+=6 + readInt(u + 4);}u+=2;if (FRAMES && stackMap != 0) {frame=context;frame.offset=-1;frame.mode=0;frame.localCount=0;frame.localDiff=0;frame.stackCount=0;frame.local=new Object[maxLocals];frame.stack=new Object[maxStack];if (unzip) {getImplicitFrame(context);}for (int i=stackMap; i < stackMap + stackMapSize - 2; ++i) {if (b[i] == 8) {int v=readUnsignedShort(i + 1);if (v >= 0 && v < codeLength) {if ((b[codeStart + v] & 0xFF) == Opcodes.NEW) {readLabel(v,labels);}}}}}u=codeStart;while (u < codeEnd) {int offset=u - codeStart;Label l=labels[offset];if (l != null) {Label next=l.next;l.next=null;mv.visitLabel(l);if ((context.flags & SKIP_DEBUG) == 0 && l.line > 0) {mv.visitLineNumber(l.line,l);while (next != null) {mv.visitLineNumber(next.line,l);next=next.next;}}}while (FRAMES && frame != null && (frame.offset == offset || frame.offset == -1)) {if (frame.offset != -1) {if (!zip || unzip) {mv.visitFrame(Opcodes.F_NEW,frame.localCount,frame.local,frame.stackCount,frame.stack);} else {mv.visitFrame(frame.mode,frame.localDiff,frame.local,frame.stackCount,frame.stack);}}if (frameCount > 0) {stackMap=readFrame(stackMap,zip,unzip,frame);--frameCount;} else {frame=null;}}int opcode=b[u] & 0xFF;switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:mv.visitInsn(opcode);u+=1;break;case ClassWriter.IMPLVAR_INSN:if (opcode > Opcodes.ISTORE) {opcode-=59;mv.visitVarInsn(Opcodes.ISTORE + (opcode >> 2),opcode & 0x3);} else {opcode-=26;mv.visitVarInsn(Opcodes.ILOAD + (opcode >> 2),opcode & 0x3);}u+=1;break;case ClassWriter.LABEL_INSN:mv.visitJumpInsn(opcode,labels[offset + readShort(u + 1)]);u+=3;break;case ClassWriter.LABELW_INSN:mv.visitJumpInsn(opcode - 33,labels[offset + readInt(u + 1)]);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {mv.visitIincInsn(readUnsignedShort(u + 2),readShort(u + 4));u+=6;} else {mv.visitVarInsn(opcode,readUnsignedShort(u + 2));u+=4;}break;case ClassWriter.TABL_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int min=readInt(u + 4);int max=readInt(u + 8);Label[] table=new Label[max - min + 1];u+=12;for (int i=0; i < table.length; ++i) {table[i]=labels[offset + readInt(u)];u+=4;}mv.visitTableSwitchInsn(min,max,labels[label],table);break;}case ClassWriter.LOOK_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int len=readInt(u + 4);int[] keys=new int[len];Label[] values=new Label[len];u+=8;for (int i=0; i < len; ++i) {keys[i]=readInt(u);values[i]=labels[offset + readInt(u + 4)];u+=8;}mv.visitLookupSwitchInsn(labels[label],keys,values);break;}case ClassWriter.VAR_INSN:mv.visitVarInsn(opcode,b[u + 1] & 0xFF);u+=2;break;case ClassWriter.SBYTE_INSN:mv.visitIntInsn(opcode,b[u + 1]);u+=2;break;case ClassWriter.SHORT_INSN:mv.visitIntInsn(opcode,readShort(u + 1));u+=3;break;case ClassWriter.LDC_INSN:mv.visitLdcInsn(readConst(b[u + 1] & 0xFF,c));u+=2;break;case ClassWriter.LDCW_INSN:mv.visitLdcInsn(readConst(readUnsignedShort(u + 1),c));u+=3;break;case ClassWriter.FIELDORMETH_INSN:case ClassWriter.ITFMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];boolean itf=b[cpIndex - 1] == ClassWriter.IMETH;String iowner=readClass(cpIndex,c);cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);if (opcode < Opcodes.INVOKEVIRTUAL) {mv.visitFieldInsn(opcode,iowner,iname,idesc);} else {mv.visitMethodInsn(opcode,iowner,iname,idesc,itf);}if (opcode == Opcodes.INVOKEINTERFACE) {u+=5;} else {u+=3;}break;}case ClassWriter.INDYMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];int bsmIndex=context.bootstrapMethods[readUnsignedShort(cpIndex)];Handle bsm=(Handle)readConst(readUnsignedShort(bsmIndex),c);int bsmArgCount=readUnsignedShort(bsmIndex + 2);Object[] bsmArgs=new Object[bsmArgCount];bsmIndex+=4;for (int i=0; i < bsmArgCount; i++) {bsmArgs[i]=readConst(readUnsignedShort(bsmIndex),c);bsmIndex+=2;}cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);mv.visitInvokeDynamicInsn(iname,idesc,bsm,bsmArgs);u+=5;break;}case ClassWriter.TYPE_INSN:mv.visitTypeInsn(opcode,readClass(u + 1,c));u+=3;break;case ClassWriter.IINC_INSN:mv.visitIincInsn(b[u + 1] & 0xFF,b[u + 2]);u+=3;break;default :mv.visitMultiANewArrayInsn(readClass(u + 1,c),b[u + 3] & 0xFF);u+=4;break;}while (tanns != null && tann < tanns.length && ntoff <= offset) {if (ntoff == offset) {int v=readAnnotationTarget(context,tanns[tann]);readAnnotationValues(v + 2,c,true,mv.visitInsnAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));}ntoff=++tann >= tanns.length || readByte(tanns[tann]) < 0x43 ? -1 : readUnsignedShort(tanns[tann] + 1);}while (itanns != null && itann < itanns.length && nitoff <= offset) {if (nitoff == offset) {int v=readAnnotationTarget(context,itanns[itann]);readAnnotationValues(v + 2,c,true,mv.visitInsnAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));}nitoff=++itann >= itanns.length || readByte(itanns[itann]) < 0x43 ? -1 : readUnsignedShort(itanns[itann] + 1);}}if (labels[codeLength] != null) {mv.visitLabel(labels[codeLength]);}if ((context.flags & SKIP_DEBUG) == 0 && varTable != 0) {int[] typeTable=null;if (varTypeTable != 0) {u=varTypeTable + 2;typeTable=new int[readUnsignedShort(varTypeTable) * 3];for (int i=typeTable.length; i > 0; ) {typeTable[--i]=u + 6;typeTable[--i]=readUnsignedShort(u + 8);typeTable[--i]=readUnsignedShort(u);u+=10;}}u=varTable + 2;for (int i=readUnsignedShort(varTable); i > 0; --i) {int start=readUnsignedShort(u);int length=readUnsignedShort(u + 2);int index=readUnsignedShort(u + 8);String vsignature=null;if (typeTable != null) {for (int j=0; j < typeTable.length; j+=3) {if (typeTable[j] == start && typeTable[j + 1] == index) {vsignature=readUTF8(typeTable[j + 2],c);break;}}}mv.visitLocalVariable(readUTF8(u + 4,c),readUTF8(u + 6,c),vsignature,labels[start],labels[start + length],index);u+=10;}}if (tanns != null) {for (int i=0; i < tanns.length; ++i) {if ((readByte(tanns[i]) >> 1) == (0x40 >> 1)) {int v=readAnnotationTarget(context,tanns[i]);v=readAnnotationValues(v + 2,c,true,mv.visitLocalVariableAnnotation(context.typeRef,context.typePath,context.start,context.end,context.index,readUTF8(v,c),true));}}}if (itanns != null) {for (int i=0; i < itanns.length; ++i) {if ((readByte(itanns[i]) >> 1) == (0x40 >> 1)) {int v=readAnnotationTarget(context,itanns[i]);v=readAnnotationValues(v + 2,c,true,mv.visitLocalVariableAnnotation(context.typeRef,context.typePath,context.start,context.end,context.index,readUTF8(v,c),false));}}}while (attributes != null) {Attribute attr=attributes.next;attributes.next=null;mv.visitAttribute(attributes);attributes=attr;}mv.visitMaxs(maxStack,maxLocals);}  }
class C{  public void testTwoStatements() throws IOException {  final InputStream stream=this.getStream(R.raw.two_statements);  List<String> commands=SqlParser.parse(stream);  assertEquals(2,commands.size());  assertEquals(sql1,commands.get(0));  assertEquals(sql2,commands.get(1));}  }
class C{  public void scrollTo(WebView view,int x,int y){  view.getEngine().executeScript("window.scrollTo(" + x + ", "+ y+ ")");}  }
class C{  @Override public Request<Workspace> create(Workspace workspaceReference){  checkNotNull(workspaceReference);  final Invocation request=getWebTarget().request().accept(APPLICATION_JSON).buildPost(json(workspaceReference));  return new SimpleRequest<Workspace>(request,DefaultWorkspace.class,getAuthenticationManager());}  }
class C{  private static URL fixEmbeddedParams(URL base,String target) throws MalformedURLException {  if (target.indexOf(';') >= 0 || base.toString().indexOf(';') == -1) {    return new URL(base,target);  }  String baseURL=base.toString();  int startParams=baseURL.indexOf(';');  String params=baseURL.substring(startParams);  int startQS=target.indexOf('?');  if (startQS >= 0) {    target=target.substring(0,startQS) + params + target.substring(startQS);  } else {    target+=params;  }  return new URL(base,target);}  }
class C{  private byte[] lookupClassData(String className) throws ClassNotFoundException {  byte[] data=null;  for (  String path : pathItems) {    String fileName=className.replace('.','/') + ".class";    if (isJar(path))     data=loadJarData(path,fileName); else     data=loadFileData(path,fileName);    if (data != null)     return data;  }  throw new ClassNotFoundException();}  }
class C{  public void dropTable(Database database,Table table,StringBuilder ddl){  for (int idx=database.getTableCount() - 1; idx >= 0; idx--) {    Table otherTable=database.getTable(idx);    ForeignKey[] fks=otherTable.getForeignKeys();    for (int fkIdx=0; (fks != null) && (fkIdx < fks.length); fkIdx++) {      if (fks[fkIdx].getForeignTable().equals(table)) {        writeExternalForeignKeyDropStmt(otherTable,fks[fkIdx],ddl);      }    }  }  dropExternalForeignKeys(table,ddl);  writeTableComment(table,ddl);  dropTable(table,ddl,false,false);}  }
class C{  public Integer limit(){  return limit;}  }
class C{  public void undo(){  EditItem edit=mEditHistory.getPrevious();  if (edit == null) {    return;  }  Editable text=mEditText.getEditableText();  int start=edit.mmStart;  int end=start + (edit.mmAfter != null ? edit.mmAfter.length() : 0);  mIsUndoOrRedo=true;  text.replace(start,end,edit.mmBefore);  mIsUndoOrRedo=false;  for (  Object o : text.getSpans(0,text.length(),UnderlineSpan.class)) {    text.removeSpan(o);  }  Selection.setSelection(text,edit.mmBefore == null ? start : (start + edit.mmBefore.length()));}  }
class C{  public void moveToPrevious(){  checkWidget();  final int index=this.selection - 1;  if (index < 0) {    return;  }  changeSelectionTo(index);}  }
class C{  public static ContigField parseContigLine(String line){  return new ContigField(line);}  }
class C{  protected String parseGameEvents(String inboundMessage){  containedStyle12=false;  if (inboundMessage.length() > MAX_GAME_MESSAGE) {    return inboundMessage;  } else {    if (LOG.isDebugEnabled()) {      LOG.debug("Raw message in " + connector.getContext().getShortName() + ": "+ inboundMessage);    }    boolean trimAtEnd=false;    StringBuilder result=new StringBuilder(inboundMessage.length());    RaptorStringTokenizer tok=new RaptorStringTokenizer(inboundMessage,"\n");    while (tok.hasMoreTokens()) {      String line=tok.nextToken();      if (LOG.isDebugEnabled()) {        LOG.debug("Processing raw line " + connector.getContext().getShortName() + ": "+ line);      }      G1Message g1Message=g1Parser.parse(line);      if (g1Message != null) {        process(g1Message,connector.getGameService());        trimAtEnd=true;        continue;      }      Style12Message style12Message=style12Parser.parse(line);      if (style12Message != null) {        process(style12Message,connector.getGameService(),inboundMessage);        containedStyle12=true;        continue;      }      B1Message b1Message=b1Parser.parse(line);      if (b1Message != null) {        process(b1Message,connector.getGameService());        continue;      }      GameEndMessage gameEndMessage=gameEndParser.parse(line);      if (gameEndMessage != null) {        process(gameEndMessage,connector.getGameService());        result.append(line).append(tok.hasMoreTokens() ? "\n" : "");        trimAtEnd=true;        continue;      }      IllegalMoveMessage illegalMoveMessage=illegalMoveParser.parse(line);      if (illegalMoveMessage != null) {        process(illegalMoveMessage,connector.getGameService());        result.append(line).append(tok.hasMoreTokens() ? "\n" : "");        continue;      }      RemovingObsGameMessage removingObsGameMessage=removingObsGameParser.parse(line);      if (removingObsGameMessage != null) {        process(removingObsGameMessage,inboundMessage,connector.getGameService());        result.append(line).append(tok.hasMoreTokens() ? "\n" : "");        continue;      }      if (processPendInfo(line)) {        trimAtEnd=true;        continue;      }      NoLongerExaminingGameMessage noLongerExaminingGameMessage=noLongerExaminingParser.parse(line);      if (noLongerExaminingGameMessage != null) {        process(noLongerExaminingGameMessage,connector.getGameService());        result.append(line).append(tok.hasMoreTokens() ? "\n" : "");        continue;      }      takebackParser.parse(line);      ChatEvent followingEvent=followingParser.parse(line);      if (followingEvent != null && followingEvent.getType() == ChatType.FOLLOWING) {        connector.setUserFollowing(followingEvent.getSource());      }      if (line.startsWith("Entering setup mode.") && !inboundMessage.contains("<12>")) {        processExaminedGameBecameSetup();      } else       if (line.startsWith("Game ") && line.endsWith("enters setup mode.") && !inboundMessage.contains("<12>")) {        processExaminedGameBecameSetup();      }      result.append(line).append(tok.hasMoreTokens() ? "\n" : "");    }    return trimAtEnd ? result.toString().trim() : result.toString();  }}  }
class C{  private double[] averageStackValues(double[] stack1,double[] stack2){  double[] result=new double[2];  result[0]=(stack1[0] + stack2[0]) / 2.0;  result[1]=(stack1[1] + stack2[1]) / 2.0;  return result;}  }
class C{  @Override public void receive(Event[] events){  String policyName=context.getPolicyDefinition().getName();  CompositePolicyHandler handler=((PolicyGroupEvaluatorImpl)context.getPolicyEvaluator()).getPolicyHandler(policyName);  if (LOG.isDebugEnabled()) {    LOG.debug("Generated {} alerts from policy '{}' in {}, index of definiton {} ",events.length,policyName,context.getPolicyEvaluatorId(),currentIndex);  }  for (  Event e : events) {    AlertStreamEvent event=new AlertStreamEvent();    event.setTimestamp(e.getTimestamp());    event.setData(e.getData());    event.setStreamId(outputStream);    event.setPolicyId(context.getPolicyDefinition().getName());    if (this.context.getPolicyEvaluator() != null) {      event.setCreatedBy(context.getPolicyEvaluator().getName());    }    event.setCreatedTime(System.currentTimeMillis());    event.setSchema(definition);    if (LOG.isDebugEnabled()) {      LOG.debug("Generate new alert event: {}",event);    }    try {      if (handler == null) {        if (LOG.isDebugEnabled()) {          LOG.debug(" handler not found when callback received event, directly emit. policy removed? ");        }        collector.emit(event);      } else {        handler.send(event,currentIndex + 1);      }    } catch (    Exception ex) {      LOG.error(String.format("send event %s to index %d failed with exception. ",event,currentIndex),ex);    }  }  context.getPolicyCounter().scope(String.format("%s.%s",this.context.getPolicyDefinition().getName(),"alert_count")).incrBy(events.length);}  }
class C{  public void memoryReallocate(long memPtr,int cap){  enter();  try {    PlatformCallbackUtils.memoryReallocate(envPtr,memPtr,cap);  }  finally {    leave();  }}  }
class C{  @SuppressWarnings("rawtypes") public static Task createDummy(){  return new Task(TaskTypes.DUMMY);}  }
class C{  protected int entityIndex(Entity entity){  return Arrays.binarySearch(entities,entity);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static String makeValidFileName(String fileName){  return fileName.replaceAll("[^a-zA-Z0-9_\\-\\.]","-");}  }
class C{  public void writeTo(ChannelBuffer data){  super.writeTo(data);  data.writeByte(tableIndex);  data.writeByte(pad1);  data.writeByte(pad2);  data.writeByte(pad3);  data.writeInt(netMask);}  }
class C{  public static Object[] toArray(List<?> list){  Iterator<?> it=list.iterator();  Class clazz=null;  while (it.hasNext()) {    Object v=it.next();    if (v == null)     continue;    if (clazz == null)     clazz=v.getClass(); else     if (clazz != v.getClass())     return list.toArray();  }  if (clazz == Object.class || clazz == null)   return list.toArray();  Object arr=java.lang.reflect.Array.newInstance(clazz,list.size());  return list.toArray((Object[])arr);}  }
class C{  public int size(){  if (tail == null) {    return 1;  }  return 1 + tail.size();}  }
class C{  private <N extends Oplet<P,P>>ExecutableVertex<N,P,P> newInternalVertex(N op,int nInputs,int nOutputs){  ExecutableVertex<N,P,P> vertex=graph().insert(op,nInputs,nOutputs);  for (  EtiaoConnector<P> connector : vertex.getConnectors()) {    connector.state=state;  }  return vertex;}  }
class C{  public Bits(){  this(false);}  }
class C{  public DateMidnight minus(long duration){  return withDurationAdded(duration,-1);}  }
class C{  @Override public void run(){  while (!mDie) {synchronized (mJobSync) {      if (hasJob()) {        final Runnable job=mJob;        try {          job.run();        } catch (        final Throwable t) {          Diagnostic.error(ErrorType.SLIM_ERROR);          Diagnostic.userLog(t);        }synchronized (mCompleteNotify) {          setJob(null);          mCompleteNotify.notifyAll();        }      }    }synchronized (mSleepSync) {      try {        if (!hasJob() && !mDie) {          mSleepSync.wait(SLEEP_TIME);        }      } catch (      final InterruptedException e) {      }    }  }}  }
class C{  public static List<List<String>> chunkRelativePaths(List<String> files){  ArrayList<List<String>> rc=new ArrayList<List<String>>();  int start=0;  int size=0;  int i=0;  for (; i < files.size(); i++) {    String p=files.get(i);    if (size + p.length() > FILE_PATH_LIMIT) {      if (start == i) {        rc.add(files.subList(i,i + 1));        start=i + 1;      } else {        rc.add(files.subList(start,i));        start=i;      }      size=0;    } else {      size+=p.length();    }  }  if (start != files.size()) {    rc.add(files.subList(start,i));  }  return rc;}  }
class C{  public final void alignSwitch(){  if (VM.VerifyAssertions) {    VM._assert(opcode == JBC_tableswitch || opcode == JBC_lookupswitch);  }  int align=bcIndex & 3;  if (align != 0)   bcIndex+=4 - align;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static PGPPublicKey readPublicKey(InputStream instr) throws PGPException {  PGPPublicKeyRingCollection pgpPub;  try {    instr=org.bouncycastle.openpgp.PGPUtil.getDecoderStream(instr);    pgpPub=new PGPPublicKeyRingCollection(instr,new JcaKeyFingerprintCalculator());  } catch (  IOException|PGPException ex) {    throw new PGPException("Failed to init public key ring",ex);  }  Iterator keyRingIter=pgpPub.getKeyRings();  while (keyRingIter.hasNext()) {    PGPPublicKeyRing keyRing=(PGPPublicKeyRing)keyRingIter.next();    Iterator keyIter=keyRing.getPublicKeys();    while (keyIter.hasNext()) {      PGPPublicKey key=(PGPPublicKey)keyIter.next();      if (key.isEncryptionKey()) {        return key;      }    }  }  throw new IllegalArgumentException("Can't find encryption key in key ring.");}  }
class C{  private void executeCreate(String[] args) throws IOException, MalformedURLException, ServiceException, DocumentListException {  if (args.length == 3) {    printDocumentEntry(documentList.createNew(args[2],args[1]));  } else {    printMessage(COMMAND_HELP_CREATE);  }}  }
class C{  public Value createClob(Reader x,long length){  if (x == null) {    return ValueNull.INSTANCE;  }  if (length <= 0) {    length=-1;  }  Value v=session.getDataHandler().getLobStorage().createClob(x,length);  session.addTemporaryLob(v);  return v;}  }
class C{  public void testStringUnion(){  List<BytesRef> strings=new ArrayList<>();  for (int i=RandomNumbers.randomIntBetween(random(),0,1000); --i >= 0; ) {    strings.add(new BytesRef(TestUtil.randomUnicodeString(random())));  }  Collections.sort(strings);  Automaton union=Automata.makeStringUnion(strings);  assertTrue(union.isDeterministic());  assertFalse(Operations.hasDeadStatesFromInitial(union));  Automaton naiveUnion=naiveUnion(strings);  assertTrue(naiveUnion.isDeterministic());  assertFalse(Operations.hasDeadStatesFromInitial(naiveUnion));  assertTrue(Operations.sameLanguage(union,naiveUnion));}  }
class C{  public AutoDeskewTransform(){  this(true,defaultList);}  }
class C{  public boolean isContent(){  return state.equals(CONTENT);}  }
class C{  public boolean isAccessibleChildSelected(int i){  if (i == 0) {    Object[] rootPath=new Object[1];    rootPath[0]=treeModel.getRoot();    if (rootPath[0] == null)     return false;    TreePath childPath=new TreePath(rootPath);    return JTree.this.isPathSelected(childPath);  } else {    return false;  }}  }
class C{  private static void generateNewData(){  for (int i=0; i < categoryNames.length; i++) {    newList[i]=new int[10];  }  storeNewData();  if (newListCount[BMP][categoryNames.length - 1] != 1) {    System.err.println("This should not happen. Unicode data which belongs to an undefined category exists");    System.exit(1);  }}  }
class C{  public T caseCoordinate_(Coordinate_ object){  return null;}  }
class C{  private List<AnnotatedTypeMirror> arrayAllComponents(AnnotatedArrayType atype){  LinkedList<AnnotatedTypeMirror> arrays=new LinkedList<AnnotatedTypeMirror>();  AnnotatedTypeMirror type=atype;  while (type.getKind() == TypeKind.ARRAY) {    arrays.addFirst(type);    type=((AnnotatedArrayType)type).getComponentType();  }  arrays.add(type);  return arrays;}  }
class C{  private void processMenuKeyEvent(MenuKeyEvent e){switch (e.getID()) {case KeyEvent.KEY_PRESSED:    fireMenuKeyPressed(e);  break;case KeyEvent.KEY_RELEASED:fireMenuKeyReleased(e);break;case KeyEvent.KEY_TYPED:fireMenuKeyTyped(e);break;default :break;}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:01.362 -0500",hash_original_method="757FC08885175457E85C9AB1294F9204",hash_generated_method="60EC476456FAA597E0E3D6EF5D2BCBF4") public DrmInputStream(DrmRights rights){  isClosed=false;  offset=0;  b=new byte[1];}  }
class C{  static String add_escapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case '\b':      retval.append("\\b");    continue;case '\t':  retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  @SuppressWarnings("unchecked") public ManagedArray(final T[] array){  if (array == null)   throw new IllegalArgumentException();  this.elementClass=(Class<? extends T>)array.getClass().getComponentType();  this.buf=array;}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() == bImport)   cmd_import(); else   if (e.getSource() == bExport)   cmd_export(); else   if (e.getActionCommand().equals(ConfirmPanel.A_OK)) {    m_text=editorPane.getText();    dispose();  } else   if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL))   dispose();}  }
class C{  private boolean split(Register r1,Register r2){  for (Enumeration<RegisterOperand> e=DefUse.defs(r1); e.hasMoreElements(); ) {    RegisterOperand def=e.nextElement();    Instruction s=def.instruction;    if (s.operator() == SPLIT) {      Operand rhs=Unary.getVal(s);      if (rhs.similar(def))       return true;    }  }  for (Enumeration<RegisterOperand> e=DefUse.defs(r2); e.hasMoreElements(); ) {    RegisterOperand def=e.nextElement();    Instruction s=def.instruction;    if (s.operator() == SPLIT) {      Operand rhs=Unary.getVal(s);      if (rhs.similar(def))       return true;    }  }  return false;}  }
class C{  public static void main(String[] args) throws Exception {  Http http=new Http();  http.setConf(NutchConfiguration.create());  main(http,args);}  }
class C{  public JSONException syntaxError(String message){  return new JSONException(message + this.toString());}  }
class C{  protected void sequence_AnnotatedExportableElement_AsyncNoTrailingLineBreak_FunctionBody_FunctionHeader_FunctionImpl_StrictFormalParameters_TypeVariables(ISerializationContext context,FunctionDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static boolean isSupplemental(int c){  return (c >= 0x10000 && c <= 0x10FFFF);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    double multiplier=Math.PI / 180;    if (inputFile.getZUnits().toLowerCase().contains("rad")) {      multiplier=1;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.cosh(z * multiplier));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private int find(int k){  if (offsets != null) {    int lo=0;    int hi=size - 1;    while (lo <= hi) {      int i=(lo + hi) / 2;      int m=offsets[i];      if (k > m)       lo=i + 1; else       if (k < m)       hi=i - 1; else       return i;    }    return -(lo + 1);  } else {    return k;  }}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  public static Object distArchiveEvent(String sessionID,String eventId,ScrDistreg scrDistReg,String entidad) throws DistributionException, SessionException, ValidationException {  Object result=null;  if (log.isDebugEnabled()) {    log.debug("distributionEx eventId [" + eventId + "]");  }  Validator.validate_String_NotNull_LengthMayorZero(sessionID,ValidationException.ATTRIBUTE_SESSION);  try {    CacheBag cacheBag=CacheFactory.getCacheInterface().getCacheEntry(sessionID);    AuthenticationUser user=(AuthenticationUser)cacheBag.get(HIBERNATE_Iuseruserhdr);    ScrOfic scrofic=(ScrOfic)cacheBag.get(HIBERNATE_ScrOfic);    RuleContext ruleCtx=new RuleContext();    ruleCtx=new RuleContext();    ruleCtx.setUsuario(user.getId().toString());    ruleCtx.setSessionId(sessionID);    ruleCtx.setEventId(eventId);    ruleCtx.setLibro(new Integer(scrDistReg.getIdArch()));    ruleCtx.setRegistro(new Integer(scrDistReg.getIdFdr()));    if (scrofic != null) {      ruleCtx.setOficina(scrofic.getId());    }    ruleCtx.setEntidad(entidad);    result=EventsFactory.getCurrentEvent(ruleCtx.getEventId()).execute(ruleCtx);  } catch (  EventException ee) {    log.error("Se ha producido un error durante la ejecucion del evento de archivo de la distribucion [" + scrDistReg.getId() + "]");    throw ee;  }catch (  SessionException e) {    throw e;  }catch (  Exception e) {    log.error("Impossible to launch event for externe distribution for the session [" + sessionID + "]",e);    throw new DistributionException(DistributionException.ERROR_CANNOT_ACCEPT_DISTRIBUTION);  }  return result;}  }
class C{  private static boolean haveSetCompressedSize(){  checkSCS();  return setCompressedSizeMethod != null;}  }
class C{  public RandomDecisionTree(int numFeatures){  setRandomFeatureCount(numFeatures);}  }
class C{  public void test_restart() throws Exception {  final boolean doYouWantMeToBreak=true;  final URI SYSTAP=new URIImpl("http://bigdata.com/elm#a479c37c-407e-4f4a-be30-5a643a54561f");  final URI ORGANIZATION=new URIImpl("http://bigdata.com/domain#Organization");  final URI ENTITY=new URIImpl("http://bigdata.com/system#Entity");  final String query="construct {" + "?s <" + RDF.TYPE + "> <"+ ENTITY+ "> ."+ " } "+ "where { "+ " ?s <"+ RDF.TYPE+ "> <"+ ENTITY+ "> ."+ " ?s ?p ?lit ."+ " ?lit <"+ BDS.SEARCH+ "> \"systap\" ."+ " ?lit <"+ BDS.MIN_RELEVANCE+ "> \"0.0\"^^<http://www.w3.org/2001/XMLSchema#double> ."+ " }";  final Graph test_restart_1=new LinkedHashModel();{    test_restart_1.add(new StatementImpl(ORGANIZATION,RDFS.SUBCLASSOF,ENTITY));  }  final Graph test_restart_2=new LinkedHashModel();{    test_restart_2.add(new StatementImpl(SYSTAP,RDF.TYPE,ENTITY));    test_restart_2.add(new StatementImpl(SYSTAP,RDFS.LABEL,new LiteralImpl("SYSTAP")));  }  final File file;{    try {      file=File.createTempFile(getName(),".tmp");      if (log.isInfoEnabled())       log.info("file=" + file);    } catch (    IOException ex) {      throw new RuntimeException(ex);    }  }  final Properties properties=super.getProperties();  properties.setProperty(Options.BUFFER_MODE,BufferMode.Disk.toString());  properties.setProperty(Options.CREATE_TEMP_FILE,"false");  properties.setProperty(Options.FILE,file.toString());  BigdataSail sail=getSail(properties);  try {{      final BigdataSailRepository repo=new BigdataSailRepository(sail);      repo.initialize();{        boolean ok=false;        final RepositoryConnection cxn=repo.getConnection();        try {          cxn.setAutoCommit(false);          log.info("loading ontology");          cxn.add(test_restart_1);          if (!doYouWantMeToBreak) {            log.info("loading entity data");            cxn.add(test_restart_2);          }          cxn.commit();          ok=true;        }  finally {          if (!ok)           cxn.rollback();          cxn.close();        }      }      if (doYouWantMeToBreak) {        boolean ok=false;        final RepositoryConnection cxn=repo.getConnection();        try {          cxn.setAutoCommit(false);          log.info("loading entity data");          cxn.add(test_restart_2);          cxn.commit();          ok=true;        }  finally {          if (!ok)           cxn.rollback();          cxn.close();        }      }{        final RepositoryConnection cxn=repo.getConnection();        try {          final Set<Statement> results=new LinkedHashSet<Statement>();          final GraphQuery graphQuery=cxn.prepareGraphQuery(QueryLanguage.SPARQL,query);          graphQuery.evaluate(new StatementCollector(results));          for (          Statement stmt : results) {            if (log.isInfoEnabled())             log.info(stmt);          }          assertTrue(results.contains(new StatementImpl(SYSTAP,RDF.TYPE,ENTITY)));        }  finally {          cxn.close();        }      }      repo.shutDown();    }    sail=reopenSail(sail);{      final BigdataSailRepository repo=new BigdataSailRepository(sail);      repo.initialize();{        final RepositoryConnection cxn=repo.getConnection();        try {          final Set<Statement> results=new LinkedHashSet<Statement>();          final GraphQuery graphQuery=cxn.prepareGraphQuery(QueryLanguage.SPARQL,query);          graphQuery.evaluate(new StatementCollector(results));          for (          Statement stmt : results) {            if (log.isInfoEnabled())             log.info(stmt);          }          assertTrue("Lost commit?",results.contains(new StatementImpl(SYSTAP,RDF.TYPE,ENTITY)));        }  finally {          cxn.close();        }      }    }  }  finally {    sail.__tearDownUnitTest();  }}  }
class C{  public BitOutputStream(OutputStream out){  this.out=out;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static void addDependency(Dependency depend,ClassLoader loader){  for (; loader != null; loader=loader.getParent()) {    if (loader instanceof EnvironmentClassLoader) {      ((EnvironmentClassLoader)loader).addDependency(depend);      return;    }  }}  }
class C{  public script addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  public static <T>ArrayList<T> arrayList(int initialCapacity){  return new ArrayList<T>(initialCapacity);}  }
class C{  public static InputStream toInputStream(final CharSequence input,final String encoding) throws IOException {  return IOUtils.toInputStream(input,Charsets.toCharset(encoding));}  }
class C{  public String objectToString(final Object productSkuObject){  return String.valueOf(((ProductSku)productSkuObject).getSkuId());}  }
class C{  public NBTTagCompound loadFile(File saveDirectory,String filename){  return loadFile(new File(saveDirectory,filename + ".dat"));}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof YearMonth) {    YearMonth other=(YearMonth)obj;    return year == other.year && month == other.month;  }  return false;}  }
class C{  static long toLong(String v){  String buildPart="1";  long buildType=700;  if (v.endsWith("-SNAPSHOT")) {    buildPart="";    v=v.substring(0,v.indexOf("-SNAPSHOT"));    buildType=0;  } else   if (v.contains("-alpha-")) {    buildPart=v.substring(v.lastIndexOf('-') + 1);    v=v.substring(0,v.indexOf("-alpha-"));    buildType=100;  } else   if (v.contains("-beta-")) {    buildPart=v.substring(v.lastIndexOf('-') + 1);    v=v.substring(0,v.indexOf("-beta-"));    buildType=300;  } else   if (v.contains("-rc-")) {    buildPart=v.substring(v.lastIndexOf('-') + 1);    v=v.substring(0,v.indexOf("-rc-"));    buildType=500;  }  String[] parts=v.split("\\.");  if (parts.length > 3) {    throw new IllegalArgumentException("Illegal version number: " + v);  }  long major=parts.length > 0 ? Long.parseLong(parts[0]) : 0;  long minor=parts.length > 1 ? Long.parseLong(parts[1]) : 0;  long rev=parts.length > 2 ? Long.parseLong(parts[2]) : 0;  long build=buildPart.isEmpty() ? 0 : Long.parseLong(buildPart);  long result=(((major * 1000 + minor) * 1000 + rev) * 1000) + build + buildType;  return result;}  }
class C{  private String token(final String code) throws IOException {  return new JdkRequest(new Href(this.gauth).path("o").path("oauth2").path("token").toString()).body().formParam("client_id",this.app).formParam("redirect_uri",this.redir).formParam("client_secret",this.key).formParam("grant_type","authorization_code").formParam(PsGoogle.CODE,code).back().header("Content-Type","application/x-www-form-urlencoded").method(com.jcabi.http.Request.POST).fetch().as(RestResponse.class).assertStatus(HttpURLConnection.HTTP_OK).as(JsonResponse.class).json().readObject().getString(PsGoogle.ACCESS_TOKEN);}  }
class C{  public void addStateValueAsDouble(String name,double doubleValue){  addStateValueAsDouble(null,name,doubleValue);}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  WhiteboxRaster output;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  final double LnOf2=0.693147180559945;  int row, col, x, y;  float progress=0;  double slope;  double z;  int i, c;  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  double outletID=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  streamsHeader=args[0];  pointerHeader=args[1];  outputHeader=args[2];  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    double noData=pntr.getNoDataValue();    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setNoDataValue(noData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    byte numNeighbouringStreamCells=0;    double currentID=0;    double currentValue=0;    double streamsID=0;    updateProgress("Loop 1 of 4:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            currentID++;            output.setValue(y,x,currentID);            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  currentValue=output.getValue(y,x);                  if (currentValue > 0) {                    flag=false;                    break;                  }                  numNeighbouringStreamCells=0;                  int x2, y2;                  for (int d=0; d < 8; d++) {                    x2=x + dX[d];                    y2=y + dY[d];                    if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[d]) {                      numNeighbouringStreamCells++;                    }                  }                  if (numNeighbouringStreamCells >= 2) {                    currentID++;                  }                  output.setValue(y,x,currentID);                }              } else {                if (streams.getValue(y,x) > 0) {                  output.setValue(y,x,currentID);                }                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 4:",(int)progress);    }    updateProgress("Loop 2 of 4:",0);    byte numStreamNeighbours=0;    double startingStreamHeadID=currentID + 1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numStreamNeighbours=0;          for (c=0; c < 8; c++) {            if (streams.getValue(row + dY[c],col + dX[c]) > 0 && pntr.getValue(row + dY[c],col + dX[c]) == inflowingVals[c]) {              numStreamNeighbours++;            }          }          if (numStreamNeighbours == 0) {            currentID++;            output.setValue(row,col,currentID);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 4:",(int)progress);    }    int d;    boolean state=false;    int currentMaxID=(int)currentID;    double[][] sideVals=new double[4][currentMaxID + 1];    for (i=1; i <= currentMaxID; i++) {      sideVals[0][i]=i;      currentID++;      sideVals[1][i]=currentID;    }    for (i=1; i <= currentMaxID; i++) {      currentID++;      sideVals[2][i]=currentID;    }    for (i=1; i <= currentMaxID; i++) {      currentID++;      sideVals[3][i]=currentID;    }    updateProgress("Loop 3 of 4:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          currentID=output.getValue(row,col);          flowDir=pntr.getValue(row,col);          if (flowDir > 0) {            c=(int)(Math.log(flowDir) / LnOf2);            flag=false;            d=c;            state=false;            do {              d++;              if (d > 7) {                d=0;              }              if (d < 0) {                d=7;              }              x=col + dX[d];              y=row + dY[d];              z=streams.getValue(y,x);              if (z <= 0 && z != noData) {                state=true;                if (pntr.getValue(y,x) == inflowingVals[d]) {                  output.setValue(y,x,sideVals[0][(int)currentID]);                }              } else {                if (state) {                  flag=true;                }              }            } while (!flag);            flag=false;            d=c;            state=false;            int k=0;            double val=sideVals[1][(int)currentID];            int j=1;            do {              d--;              if (d > 7) {                d=0;              }              if (d < 0) {                d=7;              }              x=col + dX[d];              y=row + dY[d];              z=streams.getValue(y,x);              if (z <= 0 && z != noData) {                if (!state) {                  val=sideVals[j][(int)currentID];                  j++;                  state=true;                }                if (pntr.getValue(y,x) == inflowingVals[d] && output.getValue(y,x) <= 0) {                  output.setValue(y,x,val);                }              }              k++;              if (k == 7) {                flag=true;              }            } while (!flag);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 3 of 4:",(int)progress);    }    updateProgress("Loop 4 of 4:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (output.getValue(row,col) == noData && pntr.getValue(row,col) != noData) {          flag=false;          x=col;          y=row;          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != noData) {                streamsID=z;                flag=true;              }            } else {              streamsID=noData;              flag=true;            }          } while (!flag);          flag=false;          x=col;          y=row;          output.setValue(y,x,streamsID);          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != noData) {                flag=true;              }            } else {              flag=true;            }            output.setValue(y,x,streamsID);          } while (!flag);        } else         if (pntr.getValue(row,col) == noData) {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 4 of 4:",(int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          output.setValue(row,col,0);        }      }      if (cancelOp) {        cancelOperation();        return;      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected void paintTrack(SynthContext context,Graphics g,Rectangle trackBounds){  int orientation=slider.getOrientation();  SynthLookAndFeel.updateSubregion(context,g,trackBounds);  context.getPainter().paintSliderTrackBackground(context,g,trackBounds.x,trackBounds.y,trackBounds.width,trackBounds.height,orientation);  context.getPainter().paintSliderTrackBorder(context,g,trackBounds.x,trackBounds.y,trackBounds.width,trackBounds.height,orientation);}  }
class C{  public static Float toFloat(Number self){  return self.floatValue();}  }
class C{  public void removeBindingListener(){  AbstractDocument doc=(AbstractDocument)document;  XBLManager xm=doc.getXBLManager();  if (xm instanceof DefaultXBLManager) {    DefaultXBLManager dxm=(DefaultXBLManager)xm;    dxm.removeBindingListener(bindingListener);    dxm.removeContentSelectionChangedListener(contentListener);  }}  }
class C{  public RegexValidator(String regex){  this(regex,true);}  }
class C{  private void cancelUploadForAccount(String accountName){  Iterator<String> it=mPendingUploads.keySet().iterator();  Log_OC.d(TAG,"Number of pending updloads= " + mPendingUploads.size());  while (it.hasNext()) {    String key=it.next();    Log_OC.d(TAG,"mPendingUploads CANCELLED " + key);    if (key.startsWith(accountName)) {synchronized (mPendingUploads) {        mPendingUploads.remove(key);      }    }  }}  }
class C{  public void testMultiplyDiffScalePosNeg(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=10;  String b="747233429293018787918347987234564568";  int bScale=-10;  String c="920003122862175749786430095741145455670101391569026662845893091880727173060570190220616";  int cScale=0;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.multiply(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  private void readFigTreeBlock(Map<String,Object> settings) throws ImportException, IOException {  String command=helper.readToken(";");  while (!command.equalsIgnoreCase("END")) {    if (command.equalsIgnoreCase("SET")) {      while (helper.getLastDelimiter() != ';') {        String key=helper.readToken("=;");        if (helper.getLastDelimiter() != '=') {          throw new ImportException("Subcommand, " + key + ", is missing a value in command, "+ command+ ", in FIGTREE block");        }        String value=helper.readToken(";");        settings.put(key,parseValue(value));      }    } else {      throw new ImportException("Unknown command, " + command + ", in FIGTREE block");    }    command=helper.readToken(";");  }  findEndBlock();}  }
class C{  @Override public void write(int b) throws IOException {  if (debug > 1) {    System.out.println("write " + b + " in CompressionResponseStream ");  }  if (closed)   throw new IOException("Cannot write to a closed output stream");  if (bufferCount >= buffer.length) {    flushToGZip();  }  buffer[bufferCount++]=(byte)b;}  }
class C{  public static boolean isVCardType(String mime){  mime=mime.toLowerCase();  return "text/vcard".equals(mime) || "text/x-vcard".equals(mime);}  }
class C{  public DuplicateException(String message,Throwable cause){  super(message,cause);}  }
class C{  static LiveCalc calculateLiveness(ParseTreeNode node){  return liveness(node,new LiveSet(node));}  }
class C{  public void map(Text key,Writable value,OutputCollector<Text,ObjectWritable> output,Reporter reporter) throws IOException {  ObjectWritable objWrite=new ObjectWritable();  objWrite.set(value);  output.collect(key,objWrite);}  }
class C{  public void Initialise(SceModule module,int entry_addr,int attr,String pspfilename,int moduleid,int gp,boolean fromSyscall){  int rootStackSize=(fromSyscall ? 0x8000 : 0x40000);  if (module != null && module.module_start_thread_stacksize > 0) {    rootStackSize=module.module_start_thread_stacksize;  }  int rootMpidStack=module.mpiddata > 0 ? module.mpiddata : USER_PARTITION_ID;  int rootInitPriority=0x20;  if (module != null && module.module_start_thread_priority > 0) {    rootInitPriority=module.module_start_thread_priority;  }  if (log.isDebugEnabled()) {    log.debug(String.format("Creating root thread: entry=0x%08X, priority=%d, stackSize=0x%X, attr=0x%X",entry_addr,rootInitPriority,rootStackSize,attr));  }  currentThread=new SceKernelThreadInfo("root",entry_addr,rootInitPriority,rootStackSize,attr,rootMpidStack);  currentThread.moduleid=moduleid;  threadMap.put(currentThread.uid,currentThread);  if (!currentThread.isKernelMode()) {    currentThread.attr|=PSP_THREAD_ATTR_USER;  }  hleKernelSetThreadArguments(currentThread,pspfilename);  currentThread.cpuContext._gp=gp;  idle0.cpuContext._gp=gp;  idle1.cpuContext._gp=gp;  currentThread.status=PSP_THREAD_READY;  currentThread.status=PSP_THREAD_RUNNING;  currentThread.restoreContext();}  }
class C{  protected DataAttribute(boolean padding){  super(DATA);  this.padding=padding;}  }
class C{  ByteSetting(Properties defaultProps,Properties props,String key,byte defaultByte){  super(defaultProps,props,key,String.valueOf(defaultByte),false,null,null);}  }
class C{  public boolean isExclude(){  Object oo=get_Value(COLUMNNAME_IsExclude);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void coerceAcceptanceProbability(CoercableMCMCOperator op,double logr){  if (isCoercable(op)) {    final double p=op.getCoercableParameter();    final double i=schedule.getOptimizationTransform(MCMCOperator.Utils.getOperationCount(op));    final double target=op.getTargetAcceptanceProbability();    final double newp=p + ((1.0 / (i + 1.0)) * (Math.exp(logr) - target));    if (newp > -Double.MAX_VALUE && newp < Double.MAX_VALUE) {      op.setCoercableParameter(newp);    }  }}  }
class C{  public static boolean isDistinct(int[] array,int num){  for (int i=0; i < array.length; i++) {    if (num == array[i])     return false;  }  return true;}  }
class C{  protected final IRegion alignRegion(IRegion region,IDocument document){  if (region == null)   return null;  try {    int start=document.getLineOfOffset(region.getOffset());    int end=document.getLineOfOffset(region.getOffset() + region.getLength());    if (start > end)     return null;    int offset=document.getLineOffset(start);    int endOffset;    if (document.getNumberOfLines() > end + 1)     endOffset=document.getLineOffset(end + 1); else     endOffset=document.getLineOffset(end) + document.getLineLength(end);    return new Region(offset,endOffset - offset);  } catch (  BadLocationException x) {    return null;  }}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  public void flush() throws Exception {  buffer.write(result);  buffer.clear();  result.flush();}  }
class C{  @Override public boolean execute(String sql,int autoGeneratedKeys) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("execute(" + quote(sql) + ", "+ autoGeneratedKeys+ ");");    }    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static DatacenterBroker createBroker(){  DatacenterBroker broker=null;  try {    broker=new PowerDatacenterBroker("Broker");  } catch (  Exception e) {    e.printStackTrace();    System.exit(0);  }  return broker;}  }
class C{  @SuppressWarnings("nullness") ValueForKeyIterator(@Nullable Object key){  this.key=key;  next=keyToKeyHead.get(key);}  }
class C{  public SusiThought(JSONObject json){  this();  if (json.has(this.metadata_name))   this.put(this.metadata_name,json.getJSONObject(this.metadata_name));  if (json.has(this.data_name))   this.setData(json.getJSONArray(this.data_name));  if (json.has("actions"))   this.put("actions",json.getJSONArray("actions"));}  }
class C{  public boolean isHandshakeComplete(){  return this.state.isHandshakeComplete();}  }
class C{  protected void updateFunctionGroup2(int fns){  this.f5=((fns & CbusConstants.CBUS_F5) == CbusConstants.CBUS_F5);  this.f6=((fns & CbusConstants.CBUS_F6) == CbusConstants.CBUS_F6);  this.f7=((fns & CbusConstants.CBUS_F7) == CbusConstants.CBUS_F7);  this.f8=((fns & CbusConstants.CBUS_F8) == CbusConstants.CBUS_F8);}  }
class C{  public int next(){  int node;  while ((node=super.next()) != END) {    node=makeNodeIdentity(node);    int parent=_parent(node);    int child=_firstch(parent);    int pos=0;    do {      int type=_type(child);      if (ELEMENT_NODE == type)       pos++;    } while ((pos < _pos) && (child=_nextsib(child)) != END);    if (node == child)     return node;  }  return (END);}  }
class C{  public static <T>List<T> synchronizedList(List<T> list){  if (list == null) {    throw new NullPointerException("list == null");  }  if (list instanceof RandomAccess) {    return new SynchronizedRandomAccessList<T>(list);  }  return new SynchronizedList<T>(list);}  }
class C{  public ProductId(String value){  super(value);}  }
class C{  public Vertex evaluateFunction(Vertex function,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  try {    if (function.getData() instanceof BinaryData) {      function=SelfDecompiler.getDecompiler().parseFunctionByteCode(function,(BinaryData)function.getData(),function.getNetwork());      return evaluateFunction(function,variables,network,startTime,maxTime,stack);    }  } catch (  IOException exception) {    network.getBot().log(this,exception);    throw new SelfExecutionException(function,exception);  }  Vertex result=null;  Vertex returnPrimitive=network.createVertex(Primitive.RETURN);  List<Relationship> operations=function.orderedRelationships(Primitive.DO);  if (operations != null) {    for (    Relationship expression : operations) {      result=evaluateExpression(expression.getTarget(),variables,network,startTime,maxTime,stack);      if (variables.containsKey(returnPrimitive)) {        variables.remove(returnPrimitive);        return result;      }    }  }  if (result == null) {    result=function;  }  return result;}  }
class C{  public void addTitle(Title title){  getTitles().add(title);}  }
class C{  public void velocitySolver(){  addSource(u,uOld);  addSource(v,vOld);  vorticityConfinement(uOld,vOld);  addSource(u,uOld);  addSource(v,vOld);  buoyancy(vOld);  addSource(v,vOld);  swap(u,uOld);  diffusion(0,u,uOld,viscosity);  swap(v,vOld);  diffusion(0,v,vOld,viscosity);  project(u,v,uOld,vOld);  swap(u,uOld);  swap(v,vOld);  advect(1,u,uOld,uOld,vOld);  advect(2,v,vOld,uOld,vOld);  project(u,v,uOld,vOld);  for (int i=0; i < size; i++) {    uOld[i]=vOld[i]=0;  }}  }
class C{  public void requestPreviewFrame(Handler handler,int message){  if (camera != null && previewing) {    previewCallback.setHandler(handler,message);    if (useOneShotPreviewCallback) {      camera.setOneShotPreviewCallback(previewCallback);    } else {      camera.setPreviewCallback(previewCallback);    }  }}  }
class C{  private void upgradeToTargetVolume(final Volume volume,final VirtualPool vpool,final VirtualPoolChangeParam cosChangeParam,final String taskId) throws InternalException {  VirtualPoolCapabilityValuesWrapper capabilities=new VirtualPoolCapabilityValuesWrapper();  capabilities.put(VirtualPoolCapabilityValuesWrapper.BLOCK_CONSISTENCY_GROUP,volume.getConsistencyGroup());  List<Recommendation> recommendations=getRecommendationsForVirtualPoolChangeRequest(volume,vpool,cosChangeParam);  if (recommendations.isEmpty()) {    throw APIException.badRequests.noStorageFoundForVolume();  }  Project project=_dbClient.queryObject(Project.class,volume.getProject());  VirtualArray varray=_dbClient.queryObject(VirtualArray.class,volume.getVirtualArray());  VolumeCreate param=new VolumeCreate(volume.getLabel(),String.valueOf(volume.getCapacity()),1,vpool.getId(),volume.getVirtualArray(),volume.getProject().getURI());  capabilities.put(VirtualPoolCapabilityValuesWrapper.RESOURCE_COUNT,new Integer(1));  if (volume.getIsComposite()) {    capabilities.put(VirtualPoolCapabilityValuesWrapper.IS_META_VOLUME,volume.getIsComposite());    capabilities.put(VirtualPoolCapabilityValuesWrapper.META_VOLUME_TYPE,volume.getCompositionType());    capabilities.put(VirtualPoolCapabilityValuesWrapper.META_VOLUME_MEMBER_COUNT,volume.getMetaMemberCount());    capabilities.put(VirtualPoolCapabilityValuesWrapper.META_VOLUME_MEMBER_SIZE,volume.getMetaMemberSize());    _log.debug(String.format("Capabilities : isMeta: %s, Meta Type: %s, Member size: %s, Count: %s",capabilities.getIsMetaVolume(),capabilities.getMetaVolumeType(),capabilities.getMetaVolumeMemberSize(),capabilities.getMetaVolumeMemberCount()));  }  Map<VpoolUse,List<Recommendation>> recommendationMap=new HashMap<VpoolUse,List<Recommendation>>();  recommendationMap.put(VpoolUse.ROOT,recommendations);  createVolumes(param,project,varray,vpool,recommendationMap,null,taskId,capabilities);}  }
class C{  static double expint(int p,final double result[]){  final double xs[]=new double[2];  final double as[]=new double[2];  final double ys[]=new double[2];  xs[0]=2.718281828459045;  xs[1]=1.4456468917292502E-16;  split(1.0,ys);  while (p > 0) {    if ((p & 1) != 0) {      quadMult(ys,xs,as);      ys[0]=as[0];      ys[1]=as[1];    }    quadMult(xs,xs,as);    xs[0]=as[0];    xs[1]=as[1];    p>>=1;  }  if (result != null) {    result[0]=ys[0];    result[1]=ys[1];    resplit(result);  }  return ys[0] + ys[1];}  }
class C{  private void createStopFacilities(){  Map<Id<TransitStopFacility>,TransitStopFacility> stopFacilities=this.transitSchedule.getFacilities();  for (  OsmParser.OsmRelation relation : relations.values()) {    if (stop_area.matches(relation.tags)) {      String stopPostAreaId=relation.tags.get(OsmTag.NAME);      for (      OsmParser.OsmRelationMember member : relation.members) {        if (member.role.equals(OsmValue.STOP)) {          TransitStopFacility newStopFacility=createStopFacilityFromOsmNode(nodes.get(member.refId),stopPostAreaId);          if (!stopFacilities.containsValue(newStopFacility)) {            this.transitSchedule.addStopFacility(newStopFacility);          }        }      }    }  }  for (  OsmParser.OsmNode node : nodes.values()) {    if (stop_position.matches(node.tags)) {      if (!stopFacilities.containsKey(Id.create(node.id,TransitStopFacility.class))) {        this.transitSchedule.addStopFacility(createStopFacilityFromOsmNode(node));      }    }  }}  }
class C{  private List<ErrorInformation> validate(final PasswordData password,final PasswordData oldPassword,final UserInfoBean uiBean) throws PwmUnrecoverableException {  final List<ErrorInformation> internalResults=internalPwmPolicyValidator(password,oldPassword,uiBean);  if (pwmApplication != null) {    final List<ErrorInformation> externalResults=invokeExternalRuleMethods(pwmApplication.getConfig(),policy,password,uiBean);    internalResults.addAll(externalResults);  }  return internalResults;}  }
class C{  public void testConnectANTSensor_Cadence(){  if (!runTest) {    Log.d(TAG,BigTestUtils.DISABLE_MESSAGE);    return;  }  useANTSeonsor();  assertTrue(checkSensorsStatus_notRecording());  checkANTSensorsStatus(R.id.sensor_state_cadence);}  }
class C{  public TextEvaluator(String expr){  super(expr);}  }
class C{  private static void sort1(int[] x,int off,int len){  if (len < 7) {    for (int i=off; i < len + off; i++)     for (int j=i; j > off && x[j - 1] > x[j]; j--)     swap(x,j,j - 1);    return;  }  int m=off + (len >> 1);  if (len > 7) {    int l=off;    int n=off + len - 1;    if (len > 40) {      int s=len / 8;      l=med3(x,l,l + s,l + 2 * s);      m=med3(x,m - s,m,m + s);      n=med3(x,n - 2 * s,n - s,n);    }    m=med3(x,l,m,n);  }  int v=x[m];  int a=off, b=a, c=off + len - 1, d=c;  while (true) {    while (b <= c && x[b] <= v) {      if (x[b] == v)       swap(x,a++,b);      b++;    }    while (c >= b && x[c] >= v) {      if (x[c] == v)       swap(x,c,d--);      c--;    }    if (b > c)     break;    swap(x,b++,c--);  }  int s, n=off + len;  s=Math.min(a - off,b - a);  vecswap(x,off,b - s,s);  s=Math.min(d - c,n - d - 1);  vecswap(x,b,n - s,s);  if ((s=b - a) > 1)   sort1(x,off,s);  if ((s=d - c) > 1)   sort1(x,n - s,s);}  }
class C{  private void initialize(){  HDRequest request=testStep.getRequest();  HDResponse response=testStep.getResponse();  String proxy=variables.getVariable("TANK_HTTP_PROXY");  if (StringUtils.isNotBlank(proxy)) {    try {      String[] proxyInfo=StringUtils.split(":");      int proxyPort=80;      if (proxy.startsWith("http://")) {        proxy=proxy.substring(7);      } else       if (proxy.startsWith("https://")) {        proxy=proxy.substring(8);        proxyPort=443;      }      if (proxyInfo.length > 2) {        LOG.error("Proxy should be specified as proxyHost:proxyPort.");      } else {        if (proxyInfo.length == 2) {          proxyPort=NumberUtils.toInt(proxyInfo[1]);        }        String proxyHost=proxyInfo[0];        tsc.getHttpClient().setProxy(proxyHost,proxyPort);      }    } catch (    Exception e) {      LOG.error("Error setting proxy " + proxy + ": "+ e,e);    }  }  host=processHost(request.getHost());  loggingKey=request.getLoggingKey();  method=request.getMethod();  path=processPath(request.getPath());  reqFormat=StringUtils.isEmpty(request.getReqFormat()) ? "nvp" : request.getReqFormat();  protocol=processProtocol(request.getProtocol());  port=processPort(request.getPort());  if (port == null) {    port="-1";  }  respFormat=StringUtils.isEmpty(response.getRespFormat()) ? "json" : response.getRespFormat();  baseRequest=HttpRequestFactory.getHttpRequest(reqFormat,tsc.getHttpClient());  baseRequest.setHost(host);  baseRequest.setProtocol(protocol);  baseRequest.setPort(port);  baseRequest.setPath(path);  List<Header> postDatas=request.getPostDatas();  List<Header> queryStringPairs=request.getQueryString();  List<Header> requestHeaders=request.getRequestHeaders();  processQueryString(queryStringPairs);  populateHeaders(requestHeaders);  baseResponse=HttpResponseFactory.getHttpResponse(respFormat);  populatePostData(postDatas);  if (!StringUtils.isBlank(request.getPayload()) && !reqFormat.equalsIgnoreCase(ScriptConstants.NVP_TYPE)) {    String payload=request.getPayload();    baseRequest.setBody(variables.evaluate(payload));  }  LogUtil.getLogEvent().setRequest(baseRequest);  tsc.getHttpClient().setProxy(null,-1);}  }
class C{  public void showSecondaryMenu(){  mSlidingMenu.showSecondaryMenu();}  }
class C{  protected RuntimeException(@Nullable String message,@Nullable Throwable cause,boolean enableSuppression,boolean writableStackTrace){  super(message,cause,enableSuppression,writableStackTrace);}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public void stressTest_multiTenancy_967() throws Exception {  doMultiTenancyStressTest(TimeUnit.HOURS.toMillis(1));}  }
class C{  public static void start(){  assertStopped();  CLOCK_STATE.get().exit();}  }
class C{  public ResponseWriter cloneWithWriter(Writer writer){  try {    return new XULResponseWriter(writer,getContentType(),getCharacterEncoding());  } catch (  FacesException e) {    throw new IllegalStateException();  }}  }
class C{  public void printTreeForHumans(final EvolutionState state,final int log){  printTreeForHumans(state,log,Output.V_VERBOSE);}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter the side: ");  double side=input.nextDouble();  System.out.println("The area of the pentagon is " + area(side));}  }
class C{  public boolean isCollection(){  return true;}  }
class C{  private static int blend_lightest(int a,int b){  int f=(b & ALPHA_MASK) >>> 24;  return (low(((a & ALPHA_MASK) >>> 24) + f,0xff) << 24 | high(a & RED_MASK,((b & RED_MASK) >> 8) * f) & RED_MASK | high(a & GREEN_MASK,((b & GREEN_MASK) >> 8) * f) & GREEN_MASK | high(a & BLUE_MASK,((b & BLUE_MASK) * f) >> 8));}  }
class C{  @Override public void write(byte[] source,int offset,int len){  if (len == 0)   return;  if (this.ignoreWrites)   return;  checkIfWritable();  if (this.doNotCopy && len > MIN_TO_COPY) {    moveBufferToChunks();    addToChunks(source,offset,len);  } else {    int remainingSpace=this.buffer.capacity() - this.buffer.position();    if (remainingSpace < len) {      this.buffer.put(source,offset,remainingSpace);      offset+=remainingSpace;      len-=remainingSpace;      ensureCapacity(len);    }    this.buffer.put(source,offset,len);  }}  }
class C{  private boolean isConnected(){  return this.connected;}  }
class C{  private void itemsArrayToCombinedBuffer(T[] itemsArray){  final int extra=2;  minValue_=itemsArray[0];  maxValue_=itemsArray[1];  System.arraycopy(itemsArray,extra,combinedBuffer_,0,baseBufferCount_);  long bits=bitPattern_;  if (bits > 0) {    int index=extra + baseBufferCount_;    for (int level=0; bits != 0L; level++, bits>>>=1) {      if ((bits & 1L) > 0L) {        System.arraycopy(itemsArray,index,combinedBuffer_,(2 + level) * k_,k_);        index+=k_;      }    }  }}  }
class C{  public static Configuration newConfiguration(){  return new Configuration();}  }
class C{  public boolean isPreferred(){  return preferred;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public static void w(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg,throwable);}  }
class C{  public SectorGeometryList(SectorGeometryList list){  super(list);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:50.924 -0500",hash_original_method="ABFAE4540EC552EECBD4679559074925",hash_generated_method="EC935FFC09D2ED871BD2D5B3E5767FE7") @Override public String toString(){  return this.getClass().getName() + '(' + getName()+ ':'+ getTypeInternal()+ ')';}  }
class C{  public static String trim(String string){  if (string == null) {    return null;  }  return string.trim();}  }
class C{  public static double approximateBinomialCoefficient(int n,int k){  final int m=max(k,n - k);  long temp=1;  for (int i=n, j=1; i > m; i--, j++) {    temp=temp * i / j;  }  return temp;}  }
class C{  public static void read(File input,String toRead,Throwing.Specific.Consumer<InputStream,IOException> reader) throws IOException {  try (ZipFile file=new ZipFile(input);InputStream stream=file.getInputStream(file.getEntry(toRead))){    reader.accept(stream);  } }  }
class C{  public int height(){  return h;}  }
class C{  public static void runTests(){  Robin robin=new Robin();  Deep deep=new Deep();  Large large=new Large();  robin.start();  deep.start();  large.start();  sleep(TEST_TIME * 1000);  quit=true;  try {    robin.join();    deep.join();    large.join();  } catch (  InterruptedException ie) {    System.err.println("join was interrupted");  }}  }
class C{  public javax.crypto.SecretKey engineLookupAndResolveSecretKey(Element element,String baseURI,StorageResolver storage){  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:42.517 -0500",hash_original_method="C8F2641055D76DBC203D7F98D786CB89",hash_generated_method="6AB1917E5D38181612CA9773841B44C8") public ToParser(String to){  super(to);}  }
class C{  public boolean dynamicNameExtractionActive(){  return null != getNameExtractionExpression();}  }
class C{  public URL(String protocol,String host,int port,String file) throws MalformedURLException {  this(protocol,host,port,file,null);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TYPE_DEFS__TYPES:    return types != null && !types.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static int countLocksHeldByThread(int id){  int count=0;  for (int i=0; i < numLocks(); i++) {    Lock l=getLock(i);    if (l != null && l.active && l.ownerId == id && l.recursionCount > 0) {      count++;    }  }  return count;}  }
class C{  public ComponentBuilder append(String text){  return append(text,FormatRetention.ALL);}  }
class C{  public RVMMethod resolveInterfaceMethod() throws IncompatibleClassChangeError, NoSuchMethodError {  if (resolvedMember != null)   return resolvedMember;  RVMClass declaringClass=(RVMClass)type.resolve();  if (!declaringClass.isResolved()) {    declaringClass.resolve();  }  if (!declaringClass.isInterface() && !isMiranda()) {    throw new IncompatibleClassChangeError();  }  RVMMethod ans=resolveInterfaceMethodInternal(declaringClass);  if (ans == null) {    throw new NoSuchMethodError(this.toString());  }  return ans;}  }
class C{  private void resizeNameColumn(int diff,boolean resizeStatisticPanels){  if (diff != 0) {    if (nameDim == null) {      nameDim=new Dimension(DIMENSION_HEADER_ATTRIBUTE_NAME.width + diff,DIMENSION_HEADER_ATTRIBUTE_NAME.height);    } else {      int newWidth=nameDim.width + diff;      int minWidth=RESIZE_MARGIN_SHRINK;      int maxWidth=columnHeaderPanel.getWidth() - (DIMENSION_HEADER_MISSINGS.width + DIMENSION_HEADER_TYPE.width + DIMENSION_SEARCH_FIELD.width+ RESIZE_MARGIN_ENLARGE);      if (newWidth > maxWidth) {        newWidth=maxWidth;      }      if (newWidth < minWidth) {        newWidth=minWidth;      }      nameDim=new Dimension(newWidth,nameDim.height);    }    sortingLabelAttName.setMinimumSize(nameDim);    sortingLabelAttName.setPreferredSize(nameDim);    columnHeaderPanel.revalidate();    columnHeaderPanel.repaint();  }  if (resizeStatisticPanels) {    revalidateAttributePanels();  }}  }
class C{  public void seekEnd(long offset) throws IOException {  flushBuffer();  StreamImpl source=_source;  if (source != null)   source.seekEnd(offset);  _position=offset;}  }
class C{  public void testHashcode(){  LogFormat f1=new LogFormat(10.0,"10",true);  LogFormat f2=new LogFormat(10.0,"10",true);  assertTrue(f1.equals(f2));  int h1=f1.hashCode();  int h2=f2.hashCode();  assertEquals(h1,h2);}  }
class C{  public void replace(String statement) throws CannotCompileException {  thisClass.getClassFile();  final int bytecodeSize=3;  int pos=newPos;  int newIndex=iterator.u16bitAt(pos + 1);  int codeSize=canReplace();  int end=pos + codeSize;  for (int i=pos; i < end; ++i)   iterator.writeByte(NOP,i);  ConstPool constPool=getConstPool();  pos=currentPos;  int methodIndex=iterator.u16bitAt(pos + 1);  String signature=constPool.getMethodrefType(methodIndex);  Javac jc=new Javac(thisClass);  ClassPool cp=thisClass.getClassPool();  CodeAttribute ca=iterator.get();  try {    CtClass[] params=Descriptor.getParameterTypes(signature,cp);    CtClass newType=cp.get(newTypeName);    int paramVar=ca.getMaxLocals();    jc.recordParams(newTypeName,params,true,paramVar,withinStatic());    int retVar=jc.recordReturnType(newType,true);    jc.recordProceed(new ProceedForNew(newType,newIndex,methodIndex));    checkResultValue(newType,statement);    Bytecode bytecode=jc.getBytecode();    storeStack(params,true,paramVar,bytecode);    jc.recordLocalVariables(ca,pos);    bytecode.addConstZero(newType);    bytecode.addStore(retVar,newType);    jc.compileStmnt(statement);    if (codeSize > 3)     bytecode.addAload(retVar);    replace0(pos,bytecode,bytecodeSize);  } catch (  CompileError e) {    throw new CannotCompileException(e);  }catch (  NotFoundException e) {    throw new CannotCompileException(e);  }catch (  BadBytecode e) {    throw new CannotCompileException("broken method");  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DatatypePackage.ENUM_LITERAL__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case DatatypePackage.ENUM_LITERAL__DESCRIPTION:  return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);}return super.eIsSet(featureID);}  }
class C{  private static int signedKeyChange(String uname,String server){  ClientUser user=users.get(uname);  if (user.isAllowsUnsignedChanges()) {    System.out.println("user " + uname + " allows unsigned key changes");  }  String newKeyData=user.getKeyData() + changeCtr;  DSAPrivateKey prKey=user.loadChangePrivKey();  if (prKey == null) {    System.out.println("no private key for " + uname);    return ConsistencyErr.KEYSTORE_ERR;  }  KeyPair newCk=null;  try {    newCk=Keys.generateDSAKeyPair();  } catch (  NoSuchAlgorithmException e) {    Logging.error("[TestClient] " + e.getMessage());    user.unloadChangePrivKey();    return ClientUtils.INTERNAL_CLIENT_ERR;  }  byte[] sig=null;  try {    ULNChangeReq changeReq=ClientMessaging.buildULNChangeReqMsgProto(user.getUsername(),newKeyData,(DSAPublicKey)newCk.getPublic(),user.isAllowsUnsignedChanges(),user.isAllowsPublicVisibility());    sig=Signing.dsaSign(prKey,changeReq.toByteArray());  } catch (  NoSuchAlgorithmException e) {    Logging.error("[TestClient] " + e.getMessage());    user.unloadChangePrivKey();    return ClientUtils.INTERNAL_CLIENT_ERR;  }  user.unloadChangePrivKey();  if (sig == null) {    Logging.error("Couldn't get a signature for the new key data");    return ClientUtils.INTERNAL_CLIENT_ERR;  }  user.setKeyData(newKeyData);  user.saveChangeKeyPair(newCk);  ClientMessaging.sendSignedULNChangeReqProto(user,sig,server);  newCk=null;  AbstractMessage serverMsg=ClientMessaging.receiveRegistrationRespProto();  if (serverMsg == null) {    return ServerErr.MALFORMED_SERVER_MSG_ERR;  } else   if (serverMsg instanceof ServerResp) {    return getServerErr((ServerResp)serverMsg);  } else {    changeCtr++;    return ConsistencyErr.CHECK_PASSED;  }}  }
class C{  public void test_write$BII_7() throws IOException, NoSuchAlgorithmException {  Support_OutputStream sos=new Support_OutputStream(MY_MESSAGE_LEN);  MessageDigest md=MessageDigest.getInstance(algorithmName[0]);  DigestOutputStream dos=new DigestOutputStream(sos,md);  dos.write(myMessage,0,MY_MESSAGE_LEN);  try {    dos.write(myMessage,0,MY_MESSAGE_LEN);    fail("Test 1: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  public static Scenario loadScenario(final String configFile){  return loadScenario(loadConfig(configFile));}  }
class C{  private boolean matchStrings(String pattern,String str,Map<String,String> uriTemplateVariables){  AntPathStringMatcher matcher=new AntPathStringMatcher(pattern,str,uriTemplateVariables);  return matcher.matchStrings();}  }
class C{  public TreePopupListener(JPopupMenu popupMenu,JTree tree){  this.popup=popupMenu;  this.tree=tree;}  }
class C{  public ParameterTypeFile(String key,String description,String extension,boolean optional){  super(key,description,null);  setOptional(optional);  this.extensions=new String[]{extension};}  }
class C{  public ObjectReference loadObjectReference(Offset offset){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return null;}  }
class C{  public Builder rootView(ViewGroup rootView){  this.rootView=rootView;  return this;}  }
class C{  public Object extractMin(){  int numElem=this.numElem;  Object[] objects=this.objects;  Comparable[] keys=this.keys;  if (numElem == 0)   return null;  keys[1 - 1]=keys[numElem - 1];  keys[numElem - 1]=null;  Object result=objects[1 - 1];  objects[1 - 1]=objects[numElem - 1];  objects[numElem - 1]=null;  numElem--;  if (numElem > 1)   heapify(1,numElem);  this.numElem=numElem;  return result;}  }
class C{  public static Set<Configuration> scanClusters(String netIf,String serviceName,String scenario){  log.info("Scanning over network {} for available configuration",netIf);  Set<Configuration> availableClusters=new HashSet<Configuration>();  try {    MulticastUtil multicastUtil=MulticastUtil.create(netIf);    Map<String,Map<String,String>> clusters=multicastUtil.list(serviceName);    for (    Map<String,String> cluster : clusters.values()) {      if (cluster != null && !cluster.isEmpty() && cluster.get(PropertyConstants.CONFIG_KEY_SCENARIO).equals(scenario)) {        Configuration config=new Configuration();        config.setConfigMap(cluster);        availableClusters.add(config);        log.info("Scan found cluster: {}/{}",config.getNetworkVip(),config.toString());      }    }    multicastUtil.close();  } catch (  IOException e) {    log.error("Scan available cluster Configuration failed with exception: %s",e.getMessage());  }  log.info("Scan found {} cluster(s) for '{}'",availableClusters.size(),scenario);  return availableClusters;}  }
class C{  ByteVector put11(final int b1,final int b2){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)b1;  data[length++]=(byte)b2;  this.length=length;  return this;}  }
class C{  public RedisQueue(final ConnectionManager connectionManager,final String name){  super(new RedisQueueCodec(),new CommandSyncService(connectionManager),null == name || name.trim().isEmpty() ? DEFAULT_NAME : name);  this.connectionManager=connectionManager;}  }
class C{  public static void deleteKey(String keyId,boolean deleteFromToken) throws Exception {  LOG.trace("Deleting key '{}', from token = ",keyId,deleteFromToken);  execute(new DeleteKey(keyId,deleteFromToken));}  }
class C{  protected void clean_cache(){  for (int i=0; i < cache_size; i++) {    elements[i]=null;  }  ;  elements=null;  last_used=null;  index=null;}  }
class C{  public JavaType uncheckedSimpleType(Class<?> cls){  return new SimpleType(cls);}  }
class C{  public long clearMetaKeyState(long state,int which){  if ((which & META_SHIFT_ON) != 0 && (state & META_CAP_LOCKED) != 0) {    state&=~META_SHIFT_MASK;  }  if ((which & META_ALT_ON) != 0 && (state & META_ALT_LOCKED) != 0) {    state&=~META_ALT_MASK;  }  if ((which & META_SYM_ON) != 0 && (state & META_SYM_LOCKED) != 0) {    state&=~META_SYM_MASK;  }  return state;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public SendPacket send(SendPacket packet){  SendDispatcher dispatcher=mSendDispatcher;  if (dispatcher == null)   throw new NullPointerException("Connector's SendDispatcher is null.");  packet.setDispatcher(dispatcher);  dispatcher.send(packet);  return packet;}  }
class C{  protected static void removeConnection(final ConnectionInfo conInfo){  getAllConnections().remove(conInfo);}  }
class C{  @SuppressWarnings("unchecked") public ListIterator<AbstractInsnNode> iterator(int index){  return new InsnListIterator(index);}  }
class C{  public SitemapsMobileEntry(BaseEntry<?> sourceEntry){  super(sourceEntry);  getCategories().add(CATEGORY);}  }
class C{  public static Result cvModel(MultiLabelClassifier h,Instances D,int numFolds,String top) throws Exception {  return cvModel(h,D,numFolds,top,"1");}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:06.715 -0500",hash_original_method="32329B6D4EFC7F65437C2D09A5400721",hash_generated_method="7B6C0E97C0EA9A758302804A5C5B251B") @Override public int available() throws IOException {  return end - pos;}  }
class C{  private final int pixel(int x,int y){  if (x < 0 || y < 0 || x >= width || y >= height) {    return 0;  }  return raster[y * width + x];}  }
class C{  public boolean isEnqueued(){  return (this.queue == ReferenceQueue.ENQUEUED);}  }
class C{  @Override public void initGui(){  autoMaximize=WurstClient.INSTANCE.files.loadAutoMaximize();  buttonList.clear();  buttonList.add(new GuiButton(0,width / 2 - 100,height / 4 + 144 - 16,200,20,"Back"));  buttonList.add(new GuiButton(1,width / 2 - 154,height / 4 + 24 - 16,100,20,"Click Friends: " + (WurstClient.INSTANCE.options.middleClickFriends ? "ON" : "OFF")));  buttonList.add(new GuiButton(2,width / 2 - 154,height / 4 + 48 - 16,100,20,"Mod List: " + modListModes[WurstClient.INSTANCE.options.modListMode]));  buttonList.add(new GuiButton(3,width / 2 - 154,height / 4 + 72 - 16,100,20,"AutoMaximize: " + (autoMaximize ? "ON" : "OFF")));  buttonList.add(new GuiButton(4,width / 2 - 154,height / 4 + 96 - 16,100,20,"Wurst News: " + (WurstClient.INSTANCE.options.wurstNews ? "ON" : "OFF")));  buttonList.add(new GuiButton(5,width / 2 - 154,height / 4 + 120 - 16,100,20,"Analytics: " + (WurstClient.INSTANCE.options.google_analytics.enabled ? "ON" : "OFF")));  buttonList.add(new GuiButton(6,width / 2 - 50,height / 4 + 24 - 16,100,20,"Keybinds"));  buttonList.add(new GuiButton(7,width / 2 - 50,height / 4 + 48 - 16,100,20,"X-Ray Blocks"));  buttonList.add(new GuiButton(8,width / 2 - 50,height / 4 + 72 - 16,100,20,"Zoom"));  buttonList.add(new GuiButton(11,width / 2 + 54,height / 4 + 24 - 16,100,20,"Wurst Website"));  buttonList.add(new GuiButton(12,width / 2 + 54,height / 4 + 48 - 16,100,20,"Wurst on YouTube"));  buttonList.add(new GuiButton(13,width / 2 + 54,height / 4 + 72 - 16,100,20,"Wurst on Twitter"));  buttonList.add(new GuiButton(14,width / 2 + 54,height / 4 + 96 - 16,100,20,"Report a Bug"));  ((GuiButton)buttonList.get(3)).enabled=!Minecraft.isRunningOnMac;}  }
class C{  public Instances retrieveInstances() throws Exception {  return retrieveInstances(m_Query);}  }
class C{  public void resetTheme(){  setTheme(originalTheme);}  }
class C{  public ExclusivePositionUpdater(String category){  fCategory=category;}  }
class C{  public String[] allKeys(){  return dict.keySet().toArray(new String[count()]);}  }
class C{  private RFC1960SimpleFilter(final String id,final int comparator,final String value){  this.id=id;  this.comparator=comparator;  this.value=value;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected void clearRegion(Graphics2D g,Rectangle2D r){  g.setColor(getBackground());  g.fill(r);  firePrePaint(g);}  }
class C{  public void addWarning(String message){  warnings.add(new Warning(message));}  }
class C{  @SuppressWarnings("unchecked") private void notifyGraphListeners(GraphEvent ge){  Vector<EventListener> l;synchronized (this) {    l=(Vector<EventListener>)m_graphListeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      ((GraphListener)l.elementAt(i)).acceptGraph(ge);    }  }}  }
class C{  public int hashCode(){  return this.getName().hashCode();}  }
class C{  public boolean hasType(){  return getType() != null;}  }
class C{  public RrdGraphDefTemplate(String xmlString) throws IOException {  super(xmlString);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void sequence_AnnotatedExpression_ClassExtendsClause_ClassImplementsList_Members_N4ClassExpression(ISerializationContext context,N4ClassExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override public boolean exists(){  return (resolveURL() != null);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @GET @Path("/{id}/projects") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public ProjectList listProjects(@PathParam("id") URI id){  TenantOrg tenant=getTenantById(id,false);  StorageOSUser user=getUserFromContext();  NamedElementQueryResultList projects=new NamedElementQueryResultList();  if (_permissionsHelper.userHasGivenRole(user,tenant.getId(),Role.SYSTEM_MONITOR,Role.TENANT_ADMIN,Role.SECURITY_ADMIN)) {    _dbClient.queryByConstraint(ContainmentConstraint.Factory.getTenantOrgProjectConstraint(tenant.getId()),projects);  } else {    if (!id.equals(URI.create(user.getTenantId()))) {      throw APIException.forbidden.insufficientPermissionsForUser(user.getName());    }    Map<URI,Set<String>> allMyProjects=_permissionsHelper.getAllPermissionsForUser(user,tenant.getId(),null,false);    if (!allMyProjects.keySet().isEmpty()) {      List<Project> project_list=_dbClient.queryObjectField(Project.class,"label",new ArrayList<URI>(allMyProjects.keySet()));      List<NamedElementQueryResultList.NamedElement> elements=new ArrayList<NamedElementQueryResultList.NamedElement>(project_list.size());      for (      Project p : project_list) {        elements.add(NamedElementQueryResultList.NamedElement.createElement(p.getId(),p.getLabel()));      }      projects.setResult(elements.iterator());    } else {      projects.setResult(new ArrayList<NamedElementQueryResultList.NamedElement>().iterator());    }  }  ProjectList list=new ProjectList();  for (  NamedElementQueryResultList.NamedElement el : projects) {    list.getProjects().add(toNamedRelatedResource(ResourceTypeEnum.PROJECT,el.getId(),el.getName()));  }  return list;}  }
class C{  public DisabledAlgorithmConstraints(String propertyName){  this(propertyName,new AlgorithmDecomposer());}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getPostcondition_();}  }
class C{  public void undeploy(String name,URL apiEndpoint,String org,String space,String email,String password,String namespace){  CloudFoundryOperations operations=appDeployerFactory.getOperations(email,password,apiEndpoint,org,space);  operations.applications().delete(DeleteApplicationRequest.builder().name(name).deleteRoutes(true).build()).block(Duration.ofMinutes(5));  counterService.increment(String.format(METRICS_UNDEPLOYED,name));}  }
class C{  public FacebookOperationCanceledException(Throwable throwable){  super(throwable);}  }
class C{  public String randomSeedTipText(){  return "Sets the random number seed for subsampling.";}  }
class C{  public int nextSpanTransition(int start,int limit,Class kind){  int count=mSpanCount;  Object[] spans=mSpans;  int[] starts=mSpanStarts;  int[] ends=mSpanEnds;  int gapstart=mGapStart;  int gaplen=mGapLength;  if (kind == null) {    kind=Object.class;  }  for (int i=0; i < count; i++) {    int st=starts[i];    int en=ends[i];    if (st > gapstart)     st-=gaplen;    if (en > gapstart)     en-=gaplen;    if (st > start && st < limit && kind.isInstance(spans[i]))     limit=st;    if (en > start && en < limit && kind.isInstance(spans[i]))     limit=en;  }  return limit;}  }
class C{  public double SumOutlinkAuthorityScore(Page page){  List<String> outLinks=page.getOutlinks();  double authScore=0;  for (int i=0; i < outLinks.size(); i++) {    Page outLink=pTable.get(outLinks.get(i));    if (outLink != null) {      authScore+=outLink.authority;    }  }  return authScore;}  }
class C{  private void applyLtp(SingleChannelElement sce){  LongTermPrediction ltp=sce.ics.ltp;  final int offsets[]=sce.ics.swbOffset;  if (sce.ics.windowSequence[0] != EIGHT_SHORT_SEQUENCE) {    final float predTime[]=sce.ret;    final float predFreq[]=ac.bufMdct;    int numSamples=2048;    if (ltp.lag < 1024) {      numSamples=ltp.lag + 1024;    }    for (int i=0; i < numSamples; i++) {      predTime[i]=sce.ltpState[i + 2048 - ltp.lag] * ltp.coef;    }    Arrays.fill(predTime,numSamples,2048,0f);    windowingAndMdctLtp(predFreq,predTime,sce.ics);    if (sce.tns.present) {      applyTns(predFreq,sce.tns,sce.ics,false);    }    for (int sfb=0; sfb < Math.min(sce.ics.maxSfb,MAX_LTP_LONG_SFB); sfb++) {      if (ltp.used[sfb]) {        for (int i=offsets[sfb]; i < offsets[sfb + 1]; i++) {          sce.coeffs[i]+=predFreq[i];        }      }    }  }}  }
class C{  public boolean isExpired(long now){  return this.expired || this.expiryTime < now;}  }
class C{  public static Evaluator createEvaluator(String text){  if (isNumeric(text)) {    return new IndexEvaluator(text);  } else   if (text.startsWith("@")) {    return new AttributeEvaluator(text);  } else   if (text.indexOf(IndexEvaluator.FUNC_LAST) != -1) {    return new IndexEvaluator(text);  } else   if (text.indexOf(TextEvaluator.FUNC_TEXT) != -1) {    return new TextEvaluator(text);  } else   if (text.indexOf(IndexEvaluator.FUNC_POSITION) != -1) {    return new IndexEvaluator(text);  } else   if (text.startsWith("@")) {    return new AttributeEvaluator(text);  } else   if (text.indexOf('%') != -1) {    return new ContainsEvaluator(text);  } else   if (text.indexOf('=') != -1) {    return new TextEvaluator(text);  }  throw new IllegalStateException("Could not create a comparator for value: " + text);}  }
class C{  public DataWrapper(DataSet dataSet){  setDataModel(dataSet);}  }
class C{  public void edit(FieldAccess f) throws CannotCompileException {}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:04.654 -0400",hash_original_method="BF22B7A975DB3BA3F07BF46A35715819",hash_generated_method="F604701E87295F6269AEA64A13C5EBD8") protected Object engineGetParameter(String param) throws InvalidParameterException {  if (param == null) {    throw new NullPointerException("param == null");  }  return null;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int length=s.readInt();  this.longs=new AtomicLongArray(length);  for (int i=0; i < length; i++) {    set(i,s.readDouble());  }}  }
class C{  public static boolean isSignedLong(String s){  if (isEmpty(s))   return defaultEmptyOK;  try {    Long.parseLong(s);    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public FBUserManager(GDSType gdsType){  super(gdsType);}  }
class C{  public boolean isReadable(long arc){switch ((int)arc) {case 3:case 2:    return true;default :  break;}return false;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(8);  newVector.addElement(new Option("\tSet minimum number of instances per leaf " + "(default 2).","M",1,"-M <minimum number of instances>"));  newVector.addElement(new Option("\tSet minimum numeric class variance proportion\n" + "\tof train variance for split (default 1e-3).","V",1,"-V <minimum variance for split>"));  newVector.addElement(new Option("\tNumber of folds for reduced error pruning " + "(default 3).","N",1,"-N <number of folds>"));  newVector.addElement(new Option("\tSeed for random data shuffling (default 1).","S",1,"-S <seed>"));  newVector.addElement(new Option("\tNo pruning.","P",0,"-P"));  newVector.addElement(new Option("\tMaximum tree depth (default -1, no maximum)","L",1,"-L"));  newVector.addElement(new Option("\tInitial class value count (default 0)","I",1,"-I"));  newVector.addElement(new Option("\tSpread initial count over all class values (i.e." + " don't use 1 per value)","R",0,"-R"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case StextPackage.EVENT_VALUE_REFERENCE_EXPRESSION__VALUE:    return getValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected SwapSpaceSpi spi(){  return new FileSwapSpaceSpi();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  synchronized public long routeData(boolean force){  long dataCount=-1l;  Node identity=engine.getNodeService().findIdentity();  if (identity != null) {    if (force || engine.getClusterService().lock(ClusterConstants.ROUTE)) {      try {        if (firstTimeCheckForAbandonedBatches) {          engine.getOutgoingBatchService().updateAbandonedRoutingBatches();          firstTimeCheckForAbandonedBatches=false;        }        if (gapDetector == null) {          if (parameterService.is(ParameterConstants.ROUTING_USE_FAST_GAP_DETECTOR)) {            gapDetector=new DataGapFastDetector(engine.getDataService(),parameterService,engine.getContextService(),symmetricDialect,this,engine.getStatisticManager(),engine.getNodeService());          } else {            gapDetector=new DataGapDetector(engine.getDataService(),parameterService,symmetricDialect,this,engine.getStatisticManager(),engine.getNodeService());          }        }        insertInitialLoadEvents();        long ts=System.currentTimeMillis();        gapDetector.beforeRouting();        dataCount=routeDataForEachChannel();        ts=System.currentTimeMillis() - ts;        if (dataCount > 0 || ts > Constants.LONG_OPERATION_THRESHOLD) {          log.info("Routed {} data events in {} ms",dataCount,ts);        }        if (dataCount > 0) {          gapDetector.afterRouting();        }      }  finally {        if (!force) {          engine.getClusterService().unlock(ClusterConstants.ROUTE);        }      }    }  }  return dataCount;}  }
class C{  public void add(ByteString namespace,ByteString key,ByteString value){  if (namespace != null && key != null && value != null) {    modifyNamespace(namespace).put(key,value);  }}  }
class C{  protected CCSpriteFrame(CCTexture2D texture,CGRect rect,CGPoint offset){  this(texture,rect,offset,rect.size,false);}  }
class C{  public void testEncodeZigZag() throws Exception {  assertEquals(0,CodedOutputStream.encodeZigZag32(0));  assertEquals(1,CodedOutputStream.encodeZigZag32(-1));  assertEquals(2,CodedOutputStream.encodeZigZag32(1));  assertEquals(3,CodedOutputStream.encodeZigZag32(-2));  assertEquals(0x7FFFFFFE,CodedOutputStream.encodeZigZag32(0x3FFFFFFF));  assertEquals(0x7FFFFFFF,CodedOutputStream.encodeZigZag32(0xC0000000));  assertEquals(0xFFFFFFFE,CodedOutputStream.encodeZigZag32(0x7FFFFFFF));  assertEquals(0xFFFFFFFF,CodedOutputStream.encodeZigZag32(0x80000000));  assertEquals(0,CodedOutputStream.encodeZigZag64(0));  assertEquals(1,CodedOutputStream.encodeZigZag64(-1));  assertEquals(2,CodedOutputStream.encodeZigZag64(1));  assertEquals(3,CodedOutputStream.encodeZigZag64(-2));  assertEquals(0x000000007FFFFFFEL,CodedOutputStream.encodeZigZag64(0x000000003FFFFFFFL));  assertEquals(0x000000007FFFFFFFL,CodedOutputStream.encodeZigZag64(0xFFFFFFFFC0000000L));  assertEquals(0x00000000FFFFFFFEL,CodedOutputStream.encodeZigZag64(0x000000007FFFFFFFL));  assertEquals(0x00000000FFFFFFFFL,CodedOutputStream.encodeZigZag64(0xFFFFFFFF80000000L));  assertEquals(0xFFFFFFFFFFFFFFFEL,CodedOutputStream.encodeZigZag64(0x7FFFFFFFFFFFFFFFL));  assertEquals(0xFFFFFFFFFFFFFFFFL,CodedOutputStream.encodeZigZag64(0x8000000000000000L));  assertEquals(0,CodedOutputStream.encodeZigZag32(CodedInputStream.decodeZigZag32(0)));  assertEquals(1,CodedOutputStream.encodeZigZag32(CodedInputStream.decodeZigZag32(1)));  assertEquals(-1,CodedOutputStream.encodeZigZag32(CodedInputStream.decodeZigZag32(-1)));  assertEquals(14927,CodedOutputStream.encodeZigZag32(CodedInputStream.decodeZigZag32(14927)));  assertEquals(-3612,CodedOutputStream.encodeZigZag32(CodedInputStream.decodeZigZag32(-3612)));  assertEquals(0,CodedOutputStream.encodeZigZag64(CodedInputStream.decodeZigZag64(0)));  assertEquals(1,CodedOutputStream.encodeZigZag64(CodedInputStream.decodeZigZag64(1)));  assertEquals(-1,CodedOutputStream.encodeZigZag64(CodedInputStream.decodeZigZag64(-1)));  assertEquals(14927,CodedOutputStream.encodeZigZag64(CodedInputStream.decodeZigZag64(14927)));  assertEquals(-3612,CodedOutputStream.encodeZigZag64(CodedInputStream.decodeZigZag64(-3612)));  assertEquals(856912304801416L,CodedOutputStream.encodeZigZag64(CodedInputStream.decodeZigZag64(856912304801416L)));  assertEquals(-75123905439571256L,CodedOutputStream.encodeZigZag64(CodedInputStream.decodeZigZag64(-75123905439571256L)));}  }
class C{  public ServerResponseInterface newSIPServerResponse(SIPResponse sipResponse,MessageChannel messageChannel){  SIPTransactionStack theStack=(SIPTransactionStack)messageChannel.getSIPStack();  SIPTransaction tr=(SIPTransaction)((SIPTransactionStack)theStack).findTransaction(sipResponse,false);  if (sipStack.isLoggingEnabled())   sipStack.getStackLogger().logDebug("Found Transaction " + tr + " for "+ sipResponse);  if (tr != null) {    if (tr.getState() == null) {      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Dropping response - null transaction state");      return null;    } else     if (TransactionState.COMPLETED == tr.getState() && sipResponse.getStatusCode() / 100 == 1) {      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Dropping response - late arriving " + sipResponse.getStatusCode());      return null;    }  }  DialogFilter retval=new DialogFilter(sipStack);  retval.transactionChannel=tr;  retval.listeningPoint=messageChannel.getMessageProcessor().getListeningPoint();  return retval;}  }
class C{  public static byte[] previousLexicographicName(@Nonnull byte[] name){  Preconditions.checkArgument(name.length <= Cell.MAX_NAME_LENGTH,"name is too long");  Preconditions.checkArgument(name.length > 0,"name is empty");  if (name[name.length - 1] == 0) {    byte[] ret=new byte[name.length - 1];    System.arraycopy(name,0,ret,0,ret.length);    return ret;  }  byte[] ret=new byte[Cell.MAX_NAME_LENGTH];  System.arraycopy(name,0,ret,0,name.length);  ret[name.length - 1]--;  for (int i=name.length; i < ret.length; i++) {    ret[i]=(byte)0xff;  }  return ret;}  }
class C{  private CIMObjectPath createInstance(String className,CIMProperty<?>[] properties) throws WBEMException {  s_logger.trace("className :{}",className);  s_logger.trace("properties :{}",properties);  WBEMClient cimClient=_connection.getCimClient();  String interopNS=_connection.getInteropNamespace();  CIMObjectPath path=CimObjectPathCreator.createInstance(className,interopNS);  CIMInstance instance=new CIMInstance(path,properties);  s_logger.trace("interopNS :{}",interopNS);  s_logger.trace("path :{}",path);  path=cimClient.createInstance(instance);  s_logger.debug("Created: {}",path);  return path;}  }
class C{  public Separator(){  this(null);}  }
class C{  public void appendProperty(String property,Properties src){  getPropertyHandler().appendProperty(property,src);}  }
class C{  public IndexTable(double[] array){  this(DoubleList.unmodifiableView(array,array.length));}  }
class C{  @Override void writeStream(OutputStream os,byte[] buffer,int rowOffset) throws IOException {}  }
class C{  private void verifyReservedBit2(WebSocketFrame frame) throws WebSocketException {  if (frame.getRsv2() == false) {    return;  }  throw new WebSocketException(WebSocketError.UNEXPECTED_RESERVED_BIT,"The RSV2 bit of a frame is set unexpectedly.");}  }
class C{  public void replaceFromToWithFrom(int from,int to,AbstractShortList other,int otherFrom){  if (!(other instanceof ShortArrayList)) {    super.replaceFromToWithFrom(from,to,other,otherFrom);    return;  }  int length=to - from + 1;  if (length > 0) {    checkRangeFromTo(from,to,size());    checkRangeFromTo(otherFrom,otherFrom + length - 1,other.size());    System.arraycopy(((ShortArrayList)other).elements,otherFrom,elements,from,length);  }}  }
class C{  public ApplicationIdVerifier(Set<String> supportedApplicationIds){  this.supportedApplicationIds=Collections.unmodifiableSet(new HashSet<String>(supportedApplicationIds));}  }
class C{  public SwarmGame(long seed){  super(seed);}  }
class C{  private void filterOnBehalfUserList(List<PlatformUser> userList){  Iterator<PlatformUser> iterator=userList.iterator();  while (iterator.hasNext()) {    PlatformUser onbehalfUser=iterator.next();    if (!getPlatformUsers().contains(onbehalfUser.getMaster().getMasterUser())) {      iterator.remove();    }  }}  }
class C{  public void secondLOSHex(BoardViewEvent b,Coords c){}  }
class C{  private static void checkNonDebugLabel(final Label label){  Field f=getLabelStatusField();  int status=0;  try {    status=f == null ? 0 : ((Integer)f.get(label)).intValue();  } catch (  IllegalAccessException e) {    throw new Error("Internal error");  }  if ((status & 0x01) != 0) {    throw new IllegalArgumentException("Labels used for debug info cannot be reused for control flow");  }}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  private static String cleanMethodName(final String methodName){  if (methodName.endsWith("]")) {    return methodName.substring(0,methodName.indexOf("["));  }  return methodName;}  }
class C{  public static boolean areAllTagsEnabled(){  return enableAllTags;}  }
class C{  public String branchForInstance(Instance inst){  return m_split.branchForInstance(inst);}  }
class C{  @Override public boolean isStateless(FacesContext facesContext,String viewId) throws IllegalStateException {  if (facesContext.isPostback()) {    String compoundId=getStateParamValue(facesContext);    if (compoundId != null && "stateless".equals(compoundId)) {      return true;    }    return false;  }  throw new IllegalStateException("Cannot determine whether or not the request is stateless");}  }
class C{  private boolean isFreshnessLifetimeHeuristic(){  return maxAgeSeconds == -1 && expires == null;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  private static BoundSize[] parseGaps(String s){  BoundSize[] ret=new BoundSize[4];  int ix=startsWithLenient(s,"gaptop",-1,true);  if (ix > -1) {    s=s.substring(ix).trim();    ret[0]=parseBoundSize(s,true,false);    return ret;  }  ix=startsWithLenient(s,"gapleft",-1,true);  if (ix > -1) {    s=s.substring(ix).trim();    ret[1]=parseBoundSize(s,true,true);    return ret;  }  ix=startsWithLenient(s,"gapbottom",-1,true);  if (ix > -1) {    s=s.substring(ix).trim();    ret[2]=parseBoundSize(s,true,false);    return ret;  }  ix=startsWithLenient(s,"gapright",-1,true);  if (ix > -1) {    s=s.substring(ix).trim();    ret[3]=parseBoundSize(s,true,true);    return ret;  }  ix=startsWithLenient(s,"gapbefore",-1,true);  if (ix > -1) {    s=s.substring(ix).trim();    ret[1]=parseBoundSize(s,true,true);    return ret;  }  ix=startsWithLenient(s,"gapafter",-1,true);  if (ix > -1) {    s=s.substring(ix).trim();    ret[3]=parseBoundSize(s,true,true);    return ret;  }  ix=startsWithLenient(s,new String[]{"gapx","gapy"},null,true);  if (ix > -1) {    boolean x=s.charAt(3) == 'x';    String[] gaps=toTrimmedTokens(s.substring(ix).trim(),' ');    ret[x ? 1 : 0]=parseBoundSize(gaps[0],true,x);    if (gaps.length > 1)     ret[x ? 3 : 2]=parseBoundSize(gaps[1],true,!x);    return ret;  }  ix=startsWithLenient(s,"gap ",1,true);  if (ix > -1) {    String[] gaps=toTrimmedTokens(s.substring(ix).trim(),' ');    ret[1]=parseBoundSize(gaps[0],true,true);    if (gaps.length > 1) {      ret[3]=parseBoundSize(gaps[1],true,false);      if (gaps.length > 2) {        ret[0]=parseBoundSize(gaps[2],true,true);        if (gaps.length > 3)         ret[2]=parseBoundSize(gaps[3],true,false);      }    }    return ret;  }  throw new IllegalArgumentException("Unknown Gap part: '" + s + "'");}  }
class C{  private boolean checkLongTermRetentionChanged(Boolean paramValue,Boolean vpoolValue){  boolean isModified=false;  if (null != vpoolValue) {    if (paramValue == null) {      isModified=false;    } else     if (paramValue != vpoolValue) {      isModified=true;    }  } else {    if (null != paramValue) {      isModified=true;    }  }  return isModified;}  }
class C{  private void traverseDependents(Token governor,String func,int parent_rankPre){  int rankPre=rank;  rank++;  List<Dependency> dependents=dependencies.get(governor);  if (dependents != null) {    for (    Dependency d : dependents) {      traverseDependents(d.getDependent(),d.getDependencyType(),rankPre);    }  }  int node_ref=nodes.get(governor);  if (parent_rankPre >= 0) {    writeToFile("rank",rankPre,rank,node_ref,componentId,parent_rankPre);    writeToFile("edge_annotation",rankPre,"dep","func",func);  } else {    writeToFile("rank",rankPre,rank,node_ref,componentId,"NULL");  }  rank++;}  }
class C{  public void flashTheControls(){  delayedHide(1000);}  }
class C{  public synchronized void incrementEdge(RVMMethod caller,int bcIndex,RVMMethod callee){  augmentEdge(caller,bcIndex,callee,1);}  }
class C{  public SmbFile(String url,NtlmPasswordAuthentication auth) throws MalformedURLException {  this(new URL(null,url,Handler.SMB_HANDLER),auth);}  }
class C{  public Interpreter createInterpreter(Document document,String language){  InterpreterFactory factory=(InterpreterFactory)factories.get(language);  if (factory == null)   return null;  Interpreter interpreter=null;  SVGOMDocument svgDoc=(SVGOMDocument)document;  try {    URL url=new URL(svgDoc.getDocumentURI());    interpreter=factory.createInterpreter(url,svgDoc.isSVG12());  } catch (  MalformedURLException e) {  }  if (interpreter == null)   return null;  if (document != null)   interpreter.bindObject(BIND_NAME_DOCUMENT,document);  return interpreter;}  }
class C{  public void writeBlocks(ByteBuf output) throws Exception {  int bitsPerBlock=4;  while (palette.size() > 1 << bitsPerBlock) {    bitsPerBlock+=1;  }  long maxEntryValue=(1L << bitsPerBlock) - 1;  output.writeByte(bitsPerBlock);  Type.VAR_INT.write(output,palette.size());  for (  int mappedId : palette) {    Type.VAR_INT.write(output,mappedId);  }  int length=(int)Math.ceil(SIZE * bitsPerBlock / 64.0);  Type.VAR_INT.write(output,length);  long[] data=new long[length];  for (int index=0; index < blocks.length; index++) {    int value=blocks[index];    int bitIndex=index * bitsPerBlock;    int startIndex=bitIndex / 64;    int endIndex=((index + 1) * bitsPerBlock - 1) / 64;    int startBitSubIndex=bitIndex % 64;    data[startIndex]=data[startIndex] & ~(maxEntryValue << startBitSubIndex) | ((long)value & maxEntryValue) << startBitSubIndex;    if (startIndex != endIndex) {      int endBitSubIndex=64 - startBitSubIndex;      data[endIndex]=data[endIndex] >>> endBitSubIndex << endBitSubIndex | ((long)value & maxEntryValue) >> endBitSubIndex;    }  }  for (  long l : data) {    Type.LONG.write(output,l);  }}  }
class C{  private static int compare(String row1,String row2,boolean asc){  int result=row1.compareTo(row2);  int returnVal=0;  if (result < 0) {    returnVal=-1;  } else   if (result != 0) {    returnVal=1;  } else {    returnVal=0;  }  return asc ? -returnVal : returnVal;}  }
class C{  public DefaultDragTracker(Figure figure){  anchorFigure=figure;}  }
class C{  public Boolean isIpfixSupported(){  return ipfixSupported;}  }
class C{  private int elementRight(int left,XMLStreamReader reader){  int rightIdx=lastIndexOf(xml,'>',reader.getLocation().getCharacterOffset());  int leftIdx=lastIndexOf(xml,'<',rightIdx);  while (leftIdx > left) {    rightIdx=lastIndexOf(xml,'>',rightIdx - 1);    leftIdx=lastIndexOf(xml,'<',rightIdx);  }  return rightIdx;}  }
class C{  public DefaultPersistenceDelegate(String[] propertyNames){  if (null != propertyNames) {    this.propertyNames=propertyNames;  }}  }
class C{  private void addHelpLink(RequestAndResponse requestAndResponse,String name) throws IOException {  requestAndResponse.println("<div class=\"helpListItem\">&bull; <a onclick=\"replacePaneForLink(event, uiText.pageTitleHelpPage()); return false;\" href=\"/help/" + name.replace(" ","-") + "\">"+ name+ "</a></div>");}  }
class C{  protected void registerSystemConfig(SystemConfig sysConfig){  SingletonRegistry.INSTANCE.registerSingleton(SystemConfig.HERON_SYSTEM_CONFIG,sysConfig);}  }
class C{  @Override public void buildMimeMessage() throws EmailException {  try {    if (this.isBoolHasAttachments()) {      this.buildAttachments();    } else {      this.buildNoAttachments();    }  } catch (  MessagingException me) {    throw new EmailException(me);  }  super.buildMimeMessage();}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider() throws Exception {  try {    KeyManagerFactory.getInstance(null,mProv);    fail("NoSuchAlgorithmException or NullPointerException should be thrown (algorithm is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyManagerFactory.getInstance(invalidValues[i],mProv);      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  Provider prov=null;  for (int i=0; i < validValues.length; i++) {    try {      KeyManagerFactory.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  KeyManagerFactory keyMF;  for (int i=0; i < validValues.length; i++) {    keyMF=KeyManagerFactory.getInstance(validValues[i],mProv);    assertEquals("Incorrect algorithm",keyMF.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",keyMF.getProvider(),mProv);    checkResult(keyMF);  }}  }
class C{  @Deprecated public SolrQuery addSortField(String field,ORDER order){  return addValueToParam(CommonParams.SORT,toSortString(field,order));}  }
class C{  public static boolean isPrime(BigInteger n){  for (BigInteger d=new BigInteger("2"); d.compareTo(n.divide(new BigInteger("2"))) <= 0; d=d.add(new BigInteger("1"))) {    if (n.remainder(d).compareTo(new BigInteger("0")) == 0) {      return false;    }  }  return true;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ASSOCIATION_POSITION___NAME_1:    setName_1(NAME_1_EDEFAULT);  return;case UmplePackage.ASSOCIATION_POSITION___COORDINATE_1:getCoordinate_1().clear();return;case UmplePackage.ASSOCIATION_POSITION___COORDINATE_2:getCoordinate_2().clear();return;}super.eUnset(featureID);}  }
class C{  public int nextInt(int min,int max){  if (min >= max) {    throw new IllegalArgumentException(String.format("bad range: [%d, %d)",min,max));  }  int range=max - min;  int ret=nextInt();  ret=Math.abs(ret) % range;  return ret + min;}  }
class C{  public final TextBuilder clear(){  _length=0;  return this;}  }
class C{  @Deprecated public static void liftingFromBottom(View view,float baseRotation,int duration){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,view.getHeight() / 3);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).rotationX(0).translationY(0).start();}  }
class C{  protected Node deepExport(Node n,AbstractDocument d){  GenericProcessingInstruction p;  p=(GenericProcessingInstruction)super.deepExport(n,d);  p.setTarget(getTarget());  return p;}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public boolean stop(){  if (DEBUG)   Log.d(TAG,"stop()");  if (mHandler.getLooper() != Looper.myLooper()) {    Log.e(TAG,"stop() called from non-UI thread");  }  mHandler.removeMessages(MSG_SERVICE_CONNECTED);  boolean mWasRunning=mIsRunning;  stopUi();  if (mBoundToService) {    if (mService != null) {      try {        mService.unregisterCallback(mFaceUnlockCallback);      } catch (      RemoteException e) {      }    }    Log.d(TAG,"Unbinding from Face Unlock service");    mContext.unbindService(mConnection);    mBoundToService=false;  } else {    if (DEBUG)     Log.d(TAG,"Attempt to unbind from Face Unlock when not bound");  }  mIsRunning=false;  return mWasRunning;}  }
class C{  public T casePreOrPostCondition_(PreOrPostCondition_ object){  return null;}  }
class C{  static int rendezvous(String where){  return current(where,VM.activePlan.collectorCount()).rendezvous();}  }
class C{  public void deleteProfile(Profile profile) throws BusinessException, IOException {  if (profile.isCommonProfile()) {    throw new BusinessException("Delete the profile '" + profile.getName() + ".",ConfigurationInterfaceErrorCodeEnum.COMMON_PROFILE_CAN_NOT_BE_ALTERED);  }  String id=profile.getId();  Profile local=existingProfiles.remove(id);  if (null != local) {    Files.deleteIfExists(pathResolver.getProfileFilePath(local));    for (    Environment environment : existingEnvironments.values()) {      if (checkProfiles(environment)) {        try {          updateEnvironment(environment,false);        } catch (        Exception e) {          log.error("Update of the environment on the profile deletion failed.",e);        }      }    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case FunctionblockPackage.RETURN_TYPE__MULTIPLICITY:    return isMultiplicity();}return super.eGet(featureID,resolve,coreType);}  }
class C{  Item(final int index,final Item i){  this.index=index;  type=i.type;  intVal=i.intVal;  longVal=i.longVal;  strVal1=i.strVal1;  strVal2=i.strVal2;  strVal3=i.strVal3;  hashCode=i.hashCode;}  }
class C{  static public InterestRate impliedRate(final double c,final double time,final DayCounter resultDC,final Compounding comp,final Frequency freq){  final double t=time;  final double f=freq.toInteger();  QL.require(c > 0.0,"positive compound factor required");  QL.require(t > 0.0,"positive time required");  double rate;switch (comp) {case Simple:    rate=(c - 1) / t;  break;case Compounded:rate=(Math.pow(c,(1 / (f * t))) - 1) * f;break;case Continuous:rate=Math.log(c) / t;break;case SimpleThenCompounded:if (t <= (1 / f)) {rate=(c - 1) / t;} else {rate=(Math.pow(c,(1 / (f * t))) - 1) * f;}break;default :throw new LibraryException("unknown compounding convention");}return new InterestRate(rate,resultDC,comp,freq);}  }
class C{  public TemporalOMGraphicList(){  super(10);}  }
class C{  public InputStream openConfig(String name) throws IOException {  return openResource(name);}  }
class C{  public Iterator<E> tailIterator(E from){  return new BinarySearchTreeIterator<E>(this.root,from,null);}  }
class C{  public void readScratchData(ScratchBank bank,Callback<ScratchData> callback){  addCallback(BeanMessageID.BT_GET_SCRATCH,callback);  Buffer buffer=new Buffer();  buffer.writeByte(intToByte(bank.getRawValue()));  sendMessage(BeanMessageID.BT_GET_SCRATCH,buffer);}  }
class C{  private void initLayout(){  setAttribute(Window.MODE_KEY,Window.MODE_EMBEDDED);  setBorder("none");  setWidth("100%");  setHeight("100%");  setStyle("position: absolute");  miniTable.setAttribute("zk_component_ID","Lookup_Data_SearchResults");  miniTable.setVflex(true);  Rows rows=new Rows();  Row row=new Row();  rows.appendChild(row);  row.setSpans("1, 1, 1, 1");  row.appendChild(labelAcctSchema.rightAlign());  row.appendChild(fieldAcctSchema.getComponent());  row.appendChild(labelBPartner.rightAlign());  row.appendChild(fieldBPartner.getComponent());  row=new Row();  rows.appendChild(row);  row.setSpans("1, 1, 1, 1");  row.appendChild(labelOrg.rightAlign());  row.appendChild(fieldOrg.getComponent());  row.appendChild(labelProduct.rightAlign());  row.appendChild(fieldProduct.getComponent());  row=new Row();  rows.appendChild(row);  row.setSpans("1, 1, 1, 1");  row.appendChild(labelAccount.rightAlign());  row.appendChild(fieldAccount.getComponent());  row.appendChild(new Space());  row.appendChild(isReconciled);  row=new Row();  rows.appendChild(row);  row.setSpans("1, 1, 1, 1");  row.appendChild(labelDateAcct.rightAlign());  Hbox hbox=new Hbox();  hbox.appendChild(fieldDateAcct);  hbox.appendChild(labelDateAcct2);  hbox.appendChild(fieldDateAcct2);  row.appendChild(hbox);  parameterGrid.appendChild(rows);  Center center=new Center();  center.setBorder("0");  center.appendChild(parameterGrid);  Hbox btnBox=new Hbox();  btnBox.setStyle("border-top: 2px; border-bottom: 2px; padding: 4px");  btnBox.appendChild(bRefresh);  btnBox.setHeight("100%");  West west=new West();  west.setBorder("0");  west.appendChild(btnBox);  parameterPanel.appendChild(center);  parameterPanel.appendChild(west);  parameterPanel.setHeight("100px");  North north=new North();  north.appendChild(parameterPanel);  mainPanel.appendChild(north);  center=new Center();  center.appendChild(miniTable);  mainPanel.appendChild(center);  pnlBtnLeft=new Panel();  pnlBtnLeft.setAlign("left");  pnlBtnLeft.setStyle("border-top: 2px; border-bottom: 2px; padding: 4px");  pnlBtnLeft.appendChild(bZoom);  pnlBtnRight=new Panel();  pnlBtnRight.setAlign("right");  pnlBtnRight.setStyle("border-top: 2px; border-bottom: 2px; padding: 4px");  pnlBtnRight.appendChild(bGenerate);  pnlBtnRight.appendChild(bReset);  pnlBtnRight.appendChild(bCancel);  pnlTextCenter=new Panel();  pnlTextCenter.setStyle("border-top: 2px; border-bottom: 2px; padding: 4px");  pnlTextCenter.setAlign("center");  pnlTextCenter.appendChild(differenceLabel);  pnlTextCenter.appendChild(differenceField);  hboxBtnRight=new Hbox();  hboxBtnRight.appendChild(pnlBtnRight);  hboxBtnRight.setWidth("100%");  hboxBtnRight.setStyle("text-align:right");  hboxBtnLeft=new Hbox();  hboxBtnLeft.appendChild(pnlBtnLeft);  hboxBtnLeft.setWidth("100%");  hboxBtnLeft.setStyle("text-align:left");  hboxTextCenter=new Hbox();  hboxTextCenter.appendChild(pnlTextCenter);  hboxTextCenter.setWidth("100%");  hboxTextCenter.setHeight("100%");  hboxTextCenter.setPack("center");  hboxTextCenter.setStyle("text-align:Center");  commandPane=new Hbox();  commandPane.appendChild(hboxBtnLeft);  commandPane.appendChild(hboxTextCenter);  commandPane.appendChild(hboxBtnRight);  commandPane.setWidth("100%");  commandPane.setPack("center");  commandPanel.setHeight("70px");  commandPanel.setStyle("border-top: 2px; border-bottom: 2px; padding: 4px");  commandPanel.setWidth("100%");  center=new Center();  center.appendChild(commandPane);  center.setBorder("0");  commandPanel.appendChild(center);  South south=new South();  south.appendChild(statusBar);  south.setBorder("0");  commandPanel.appendChild(south);  south=new South();  south.appendChild(commandPanel);  south.setBorder("0");  mainPanel.appendChild(south);  this.appendChild(mainPanel);}  }
class C{  public TourStep(Placement placement,Widget... targets){  peer=StepPeer.newInstance();  peer.setPlacement(placement.getValue());  JsArrayString values=JsArrayString.createArray().cast();  for (  Widget el : targets) {    values.push(getOrCreateId(el.getElement()));  }  peer.setTarget(values);}  }
class C{  public void cancel(){  BaseProducerContext.callOnCancellationRequested(cancelNoCallbacks());}  }
class C{  public UserRoleAssignmentException(){}  }
class C{  public DefaultRequest txTax(Double value){  setDouble(TRANSACTION_TAX,value);  return this;}  }
class C{  public void resetMoves(){  List<Track> tracks=getTrackList();  for (  Track track : tracks) {    track.setMoves(0);  }}  }
class C{  public Collection<Range<Token>> tokenRanges(){  return this.tokenRanges;}  }
class C{  private void doUpdateWithQuery(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  final String baseURI=req.getRequestURL().toString();  final String namespace=getNamespace(req);  final String queryStr=req.getParameter(QueryServlet.ATTR_QUERY);  final boolean suppressTruthMaintenance=getBooleanValue(req,QueryServlet.ATTR_TRUTH_MAINTENANCE,false);  if (queryStr == null)   buildAndCommitResponse(resp,HTTP_BADREQUEST,MIME_TEXT_PLAIN,"Required parameter not found: " + QueryServlet.ATTR_QUERY);  final Map<String,Value> bindings=parseBindings(req,resp);  if (bindings == null) {    return;  }  final String contentType=req.getContentType();  if (log.isInfoEnabled())   log.info("Request body: " + contentType);  final RDFFormat requestBodyFormat=RDFFormat.forMIMEType(new MiniMime(contentType).getMimeType());  if (requestBodyFormat == null) {    buildAndCommitResponse(resp,HTTP_BADREQUEST,MIME_TEXT_PLAIN,"Content-Type not recognized as RDF: " + contentType);    return;  }  final RDFParserFactory rdfParserFactory=RDFParserRegistry.getInstance().get(requestBodyFormat);  if (rdfParserFactory == null) {    buildAndCommitResponse(resp,HTTP_INTERNALERROR,MIME_TEXT_PLAIN,"Parser factory not found: Content-Type=" + contentType + ", format="+ requestBodyFormat);    return;  }  final Resource[] defaultContextInsert;{    final String[] s=req.getParameterValues("context-uri-insert");    if (s != null && s.length > 0) {      try {        defaultContextInsert=toURIs(s);      } catch (      IllegalArgumentException ex) {        buildAndCommitResponse(resp,HTTP_INTERNALERROR,MIME_TEXT_PLAIN,ex.getLocalizedMessage());        return;      }    } else {      defaultContextInsert=null;    }  }  final Resource[] defaultContextDelete;{    final String[] s=req.getParameterValues("context-uri-delete");    if (s != null && s.length > 0) {      try {        defaultContextDelete=toURIs(s);      } catch (      IllegalArgumentException ex) {        buildAndCommitResponse(resp,HTTP_INTERNALERROR,MIME_TEXT_PLAIN,ex.getLocalizedMessage());        return;      }    } else {      defaultContextDelete=null;    }  }  try {    if (getIndexManager().isGroupCommit()) {      submitApiTask(new UpdateWithQueryMaterializedTask(req,resp,namespace,ITx.UNISOLATED,queryStr,baseURI,suppressTruthMaintenance,bindings,rdfParserFactory,defaultContextDelete,defaultContextInsert)).get();    } else {      submitApiTask(new UpdateWithQueryStreamingTask(req,resp,namespace,ITx.UNISOLATED,queryStr,baseURI,suppressTruthMaintenance,bindings,rdfParserFactory,defaultContextDelete,defaultContextInsert)).get();    }  } catch (  Throwable t) {    launderThrowable(t,resp,"UPDATE-WITH-QUERY" + ": queryStr=" + queryStr + ", baseURI="+ baseURI+ (defaultContextInsert == null ? "" : ",context-uri-insert=" + Arrays.toString(defaultContextInsert))+ (defaultContextDelete == null ? "" : ",context-uri-delete=" + Arrays.toString(defaultContextDelete)));  }}  }
class C{  public static Object compare(Object obj1,Object obj2,int compOp) throws TypeMismatchException {  if (obj1 == null || obj2 == null) {    Boolean result=nullCompare(obj1,obj2,compOp);    if (result == null)     return QueryService.UNDEFINED;    return result;  }  if (obj1 == QueryService.UNDEFINED || obj2 == QueryService.UNDEFINED) {    if (compOp == TOK_NE && !(obj1 == QueryService.UNDEFINED && obj2 == QueryService.UNDEFINED)) {      return true;    } else     if (compOp == TOK_EQ && obj1.equals(obj2)) {      return true;    } else {      return QueryService.UNDEFINED;    }  }  if (obj1 instanceof PdxInstanceEnumInfo && obj2 instanceof Enum) {    obj2=new PdxInstanceEnum((Enum<?>)obj2);  } else   if (obj1 instanceof Enum && obj2 instanceof PdxInstanceEnumInfo) {    obj1=new PdxInstanceEnum((Enum<?>)obj1);  }  if (obj1 instanceof PdxString && obj2 instanceof String) {    obj2=new PdxString((String)obj2);  } else   if (obj1 instanceof String && obj2 instanceof PdxString) {    obj1=new PdxString((String)obj1);  }  try {    int r;    if (obj1 instanceof java.util.Date && obj2 instanceof java.util.Date)     r=getTemporalComparator().compare(obj1,obj2); else     if (obj1.getClass() != obj2.getClass() && (obj1 instanceof Number && obj2 instanceof Number)) {      r=getNumericComparator().compare(obj1,obj2);    } else     if (obj1 instanceof Boolean || obj2 instanceof Boolean)     return Boolean.valueOf(booleanCompare(obj1,obj2,compOp)); else     if (obj1 instanceof Comparable && obj2 instanceof Comparable)     r=((Comparable)obj1).compareTo(obj2); else     if (compOp == TOK_EQ)     return Boolean.valueOf(obj1.equals(obj2)); else     if (compOp == TOK_NE)     return Boolean.valueOf(!obj1.equals(obj2)); else     throw new TypeMismatchException(LocalizedStrings.TypeUtils_UNABLE_TO_USE_A_RELATIONAL_COMPARISON_OPERATOR_TO_COMPARE_AN_INSTANCE_OF_CLASS_0_WITH_AN_INSTANCE_OF_1.toLocalizedString(new Object[]{obj1.getClass().getName(),obj2.getClass().getName()}));switch (compOp) {case TOK_EQ:      return Boolean.valueOf(r == 0);case TOK_LT:    return Boolean.valueOf(r < 0);case TOK_LE:  return Boolean.valueOf(r <= 0);case TOK_GT:return Boolean.valueOf(r > 0);case TOK_GE:return Boolean.valueOf(r >= 0);case TOK_NE:return Boolean.valueOf(r != 0);default :throw new IllegalArgumentException(LocalizedStrings.TypeUtils_UNKNOWN_OPERATOR_0.toLocalizedString(Integer.valueOf(compOp)));}} catch (ClassCastException e) {if (compOp == TOK_EQ) return Boolean.FALSE;if (compOp == TOK_NE) return Boolean.TRUE;throw new TypeMismatchException(LocalizedStrings.TypeUtils_UNABLE_TO_COMPARE_OBJECT_OF_TYPE_0_WITH_OBJECT_OF_TYPE_1.toLocalizedString(new Object[]{obj1.getClass().getName(),obj2.getClass().getName()}),e);}catch (TypeMismatchException e) {if (compOp == TOK_EQ) return Boolean.FALSE;if (compOp == TOK_NE) return Boolean.TRUE;throw e;}}  }
class C{  private double CADRG_x_pix_constant(double adrgscale,int zone){  double x_pix=(double)adrgscale * CADRG_ARC_A[zone - 1] / 512.0;  x_pix=Math.ceil(x_pix);  x_pix*=1.33333;  x_pix=Math.round(x_pix);  return x_pix * 256.0;}  }
class C{  public void sendStringSync(String text){  if (text == null) {    return;  }  KeyCharacterMap keyCharacterMap=KeyCharacterMap.load(KeyCharacterMap.VIRTUAL_KEYBOARD);  KeyEvent[] events=keyCharacterMap.getEvents(text.toCharArray());  if (events != null) {    for (int i=0; i < events.length; i++) {      sendKeySync(KeyEvent.changeTimeRepeat(events[i],SystemClock.uptimeMillis(),0));    }  }}  }
class C{  public static String createWalletInfoFilename(String walletFilename){  if (walletFilename == null) {    return INFO_FILE_EXTENSION;  }  String walletInfoFilename=walletFilename;  if (walletFilename.endsWith(BitcoinModel.WALLET_FILE_EXTENSION)) {    walletInfoFilename=walletInfoFilename.substring(0,walletFilename.length() - BitcoinModel.WALLET_FILE_EXTENSION.length() - 1);    walletInfoFilename=walletInfoFilename + "." + INFO_FILE_EXTENSION;  } else {    walletInfoFilename=walletInfoFilename + "." + INFO_FILE_EXTENSION;  }  return walletInfoFilename;}  }
class C{  public ArrayPadding createArrayPadding(){  ArrayPaddingImpl arrayPadding=new ArrayPaddingImpl();  return arrayPadding;}  }
class C{  public GridCacheContext<K,V> cacheContext(int cacheId){  return ctxMap.get(cacheId);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case RegularExpressionPackage.GROUP__NON_CAPTURING:    setNonCapturing(NON_CAPTURING_EDEFAULT);  return;case RegularExpressionPackage.GROUP__PATTERN:setPattern((Pattern)null);return;}super.eUnset(featureID);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_METHOD_BODY_2__POSTCONDITION_1:    return getPostcondition_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static KeyStore create(KeyStoreType keyStoreType) throws CryptoException, IOException {  if (!keyStoreType.isFileBased()) {    throw new CryptoException(MessageFormat.format(res.getString("NoCreateKeyStoreNotFile.exception.message"),keyStoreType.jce()));  }  KeyStore keyStore=getKeyStoreInstance(keyStoreType);  try {    keyStore.load(null,null);  } catch (  CertificateException ex) {    throw new CryptoException(MessageFormat.format(res.getString("NoLoadKeyStoreType.exception.message"),keyStoreType),ex);  }catch (  NoSuchAlgorithmException ex) {    throw new CryptoException(MessageFormat.format(res.getString("NoLoadKeyStoreType.exception.message"),keyStoreType),ex);  }  return keyStore;}  }
class C{  public ConnectionDetachedPacketCollector(){  this(SmackConfiguration.getPacketCollectorSize());}  }
class C{  public void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  previewFormat=parameters.getPreviewFormat();  previewFormatString=parameters.get("preview-format");  Log.d(TAG,"Default preview format: " + previewFormat + '/'+ previewFormatString);  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  screenResolution=new Point(display.getWidth(),display.getHeight());  Log.d(TAG,"Screen resolution: " + screenResolution);  Point screenResolutionForCamera=new Point();  screenResolutionForCamera.x=screenResolution.x;  screenResolutionForCamera.y=screenResolution.y;  if (screenResolution.x < screenResolution.y) {    screenResolutionForCamera.x=screenResolution.y;    screenResolutionForCamera.y=screenResolution.x;  }  cameraResolution=getCameraResolution(parameters,screenResolutionForCamera);  Log.d(TAG,"Camera resolution: " + cameraResolution);}  }
class C{  public IconicsDrawable paddingDp(int iconPadding){  return paddingPx(Utils.convertDpToPx(mContext,iconPadding));}  }
class C{  public byte toOrdinal(){  return this.ordinal;}  }
class C{  public ConcurrentUpdateSolrServer(String solrServerUrl,HttpClient client,int queueSize,int threadCount,ExecutorService es){  this(solrServerUrl,client,queueSize,threadCount,es,false);}  }
class C{  private void refreshParentId(int parentId,int newParentId) throws Exception {  FolderTokenDividers divs=null;  int i;  FolderTokenDivider div=null;  divs=getChildren(parentId,true);  for (i=0; i < divs.count(); i++) {    div=divs.get(i);    div.changeParentId(newParentId);  }}  }
class C{  public void putNull() throws IOException {  write(DerValue.tag_Null);  putLength(0);}  }
class C{  public void mousePressed(MouseEvent evt){  if (evt.isPopupTrigger()) {    createPopup(evt.getPoint());  }}  }
class C{  private void interpretStr(final ReilInstruction instruction){  final Pair<Boolean,BigInteger> firstValue=loadLongValue(instruction.getFirstOperand());  if (firstValue.first()) {    final BigInteger result=firstValue.second();    final String targetRegister=instruction.getThirdOperand().getValue();    final OperandSize targetSize=instruction.getThirdOperand().getSize();    setRegister(targetRegister,result,targetSize,ReilRegisterStatus.DEFINED);  } else {    assert false;  }}  }
class C{  public void testClearBitPositiveInside3(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=45;  byte rBytes[]={1,-128,56,100,-2,-76,89,13,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void testRun(){  System.out.println("run");  Date date=new Date();  DateFactory mockDateFactory=createMock(DateFactory.class);  expect(mockDateFactory.createDate()).andReturn(date).times(8);  ContentDataService mockContentDataService=createMock(ContentDataService.class);  WebResourceDataService mockWebResourceDataService=createMock(WebResourceDataService.class);  Page mockPage1=createMock(Page.class);  expect(mockWebResourceDataService.createPage(ROOT_PAGE_URL)).andReturn(mockPage1).once();  expect(mockWebResourceDataService.saveOrUpdate(mockPage1)).andReturn(mockPage1).once();  Page mockPage2=createMock(Page.class);  expect(mockWebResourceDataService.createPage(PAGE_ACCESS_FORBIDDEN_URL)).andReturn(mockPage2).once();  expect(mockWebResourceDataService.saveOrUpdate(mockPage2)).andReturn(mockPage2).once();  Page mockPage3=createMock(Page.class);  expect(mockWebResourceDataService.createPage(ROOT_PAGE_URL)).andReturn(mockPage3).once();  expect(mockWebResourceDataService.saveOrUpdate(mockPage3)).andReturn(mockPage3).once();  Page mockPage4=createMock(Page.class);  expect(mockWebResourceDataService.createPage(PAGE_1_URL)).andReturn(mockPage4).once();  expect(mockWebResourceDataService.saveOrUpdate(mockPage4)).andReturn(mockPage4).once();  Page mockPage5=createMock(Page.class);  expect(mockWebResourceDataService.createPage(PAGE_ACCESS_FORBIDDEN_URL)).andReturn(mockPage5).once();  expect(mockWebResourceDataService.saveOrUpdate(mockPage5)).andReturn(mockPage5).once();  Page mockPage6=createMock(Page.class);  expect(mockWebResourceDataService.createPage(PAGE_1_URL)).andReturn(mockPage6).once();  expect(mockWebResourceDataService.saveOrUpdate(mockPage6)).andReturn(mockPage6).once();  Page mockPage7=createMock(Page.class);  expect(mockWebResourceDataService.createPage(PAGE_2_URL)).andReturn(mockPage7).once();  expect(mockWebResourceDataService.saveOrUpdate(mockPage7)).andReturn(mockPage7).once();  Page mockPage8=createMock(Page.class);  expect(mockWebResourceDataService.createPage(PAGE_ACCESS_FORBIDDEN_URL)).andReturn(mockPage8).once();  expect(mockWebResourceDataService.saveOrUpdate(mockPage8)).andReturn(mockPage8).once();  SSP ssp1=createMock(SSP.class);  expect(mockContentDataService.getSSP(date,ROOT_PAGE_URL,pageMap.get(ROOT_PAGE_URL),null,HttpStatus.SC_OK)).andReturn(ssp1).once();  expect(ssp1.getHttpStatusCode()).andReturn(HttpStatus.SC_OK).once();  expect(ssp1.getURI()).andReturn(ROOT_PAGE_URL).once();  ssp1.setDOM(readFile("htmlFiles/root-page_1.html",false));  ssp1.setPage(mockPage1);  expect(mockContentDataService.saveOrUpdate(ssp1)).andReturn(ssp1).once();  SSP ssp2=createMock(SSP.class);  expect(mockContentDataService.getSSP(date,PAGE_ACCESS_FORBIDDEN_URL,pageMap.get(PAGE_ACCESS_FORBIDDEN_URL),null,HttpStatus.SC_OK)).andReturn(ssp2).once();  expect(ssp2.getHttpStatusCode()).andReturn(HttpStatus.SC_OK).once();  expect(ssp2.getURI()).andReturn(PAGE_ACCESS_FORBIDDEN_URL).once();  ssp2.setDOM(readFile("htmlFiles/page-access-forbidden_1.html",false));  ssp2.setPage(mockPage2);  expect(mockContentDataService.saveOrUpdate(ssp2)).andReturn(ssp2).once();  SSP ssp3=createMock(SSP.class);  expect(mockContentDataService.getSSP(date,ROOT_PAGE_URL,pageMap.get(ROOT_PAGE_URL),null,HttpStatus.SC_OK)).andReturn(ssp3).once();  expect(ssp3.getHttpStatusCode()).andReturn(HttpStatus.SC_OK).once();  expect(ssp3.getURI()).andReturn(ROOT_PAGE_URL).once();  ssp3.setDOM(readFile("htmlFiles/root-page_1.html",false));  ssp3.setPage(mockPage3);  expect(mockContentDataService.saveOrUpdate(ssp3)).andReturn(ssp3).once();  SSP ssp4=createMock(SSP.class);  expect(mockContentDataService.getSSP(date,PAGE_1_URL,pageMap.get(PAGE_1_URL),null,HttpStatus.SC_OK)).andReturn(ssp4).once();  expect(ssp4.getHttpStatusCode()).andReturn(HttpStatus.SC_OK).once();  expect(ssp4.getURI()).andReturn(PAGE_1_URL).once();  ssp4.setDOM(readFile("htmlFiles/page-1_1.html",false));  ssp4.setPage(mockPage4);  expect(mockContentDataService.saveOrUpdate(ssp4)).andReturn(ssp4).once();  SSP ssp5=createMock(SSP.class);  expect(mockContentDataService.getSSP(date,PAGE_ACCESS_FORBIDDEN_URL,pageMap.get(PAGE_ACCESS_FORBIDDEN_URL),null,HttpStatus.SC_OK)).andReturn(ssp5).once();  expect(ssp5.getHttpStatusCode()).andReturn(HttpStatus.SC_OK).once();  expect(ssp5.getURI()).andReturn(PAGE_ACCESS_FORBIDDEN_URL).once();  ssp5.setDOM(readFile("htmlFiles/page-access-forbidden_1.html",false));  ssp5.setPage(mockPage5);  expect(mockContentDataService.saveOrUpdate(ssp5)).andReturn(ssp5).once();  SSP ssp6=createMock(SSP.class);  expect(mockContentDataService.getSSP(date,PAGE_1_URL,pageMap.get(PAGE_1_URL),null,HttpStatus.SC_OK)).andReturn(ssp6).once();  expect(ssp6.getHttpStatusCode()).andReturn(HttpStatus.SC_OK).once();  expect(ssp6.getURI()).andReturn(PAGE_1_URL).once();  ssp6.setDOM(readFile("htmlFiles/page-1_1.html",false));  ssp6.setPage(mockPage6);  expect(mockContentDataService.saveOrUpdate(ssp6)).andReturn(ssp6).once();  SSP ssp7=createMock(SSP.class);  expect(mockContentDataService.getSSP(date,PAGE_2_URL,pageMap.get(PAGE_2_URL),null,HttpStatus.SC_OK)).andReturn(ssp7).once();  expect(ssp7.getHttpStatusCode()).andReturn(HttpStatus.SC_OK).once();  expect(ssp7.getURI()).andReturn(PAGE_2_URL).once();  ssp7.setDOM(readFile("htmlFiles/page-2_1.html",false));  ssp7.setPage(mockPage7);  expect(mockContentDataService.saveOrUpdate(ssp7)).andReturn(ssp7).once();  SSP ssp8=createMock(SSP.class);  expect(mockContentDataService.getSSP(date,PAGE_ACCESS_FORBIDDEN_URL,pageMap.get(PAGE_ACCESS_FORBIDDEN_URL),null,HttpStatus.SC_OK)).andReturn(ssp8).once();  expect(ssp8.getHttpStatusCode()).andReturn(HttpStatus.SC_OK).once();  expect(ssp8.getURI()).andReturn(PAGE_ACCESS_FORBIDDEN_URL).once();  ssp8.setDOM(readFile("htmlFiles/page-access-forbidden_1.html",false));  ssp8.setPage(mockPage8);  expect(mockContentDataService.saveOrUpdate(ssp8)).andReturn(ssp8).once();  Site mockSite=createMock(Site.class);  mockSite.addChild(mockPage1);  expectLastCall().once();  mockSite.addChild(mockPage2);  expectLastCall().once();  mockSite.addChild(mockPage3);  expectLastCall().once();  mockSite.addChild(mockPage4);  expectLastCall().once();  mockSite.addChild(mockPage5);  expectLastCall().once();  mockSite.addChild(mockPage6);  expectLastCall().once();  mockSite.addChild(mockPage7);  expectLastCall().once();  mockSite.addChild(mockPage8);  expectLastCall().once();  expect(mockSite.getURL()).andReturn(ROOT_PAGE_URL).once();  replay(mockPage1);  replay(mockPage2);  replay(mockPage3);  replay(mockPage4);  replay(mockPage5);  replay(mockPage6);  replay(mockPage7);  replay(mockPage8);  replay(mockSite);  replay(mockWebResourceDataService);  replay(mockDateFactory);  replay(mockContentDataService);  replay(ssp1);  replay(ssp2);  replay(ssp3);  replay(ssp4);  replay(ssp5);  replay(ssp6);  replay(ssp7);  replay(ssp8);  verify(mockPage1);  verify(mockPage2);  verify(mockPage3);  verify(mockPage4);  verify(mockPage5);  verify(mockPage6);  verify(mockPage7);  verify(mockPage8);  verify(mockSite);  verify(mockWebResourceDataService);  verify(mockDateFactory);  verify(mockContentDataService);  verify(ssp1);  verify(ssp2);  verify(ssp3);  verify(ssp4);  verify(ssp5);  verify(ssp6);  verify(ssp7);  verify(ssp8);}  }
class C{  protected void transmitAtEndOfTask(final Task<Revision> task,final Task<Diff> result) throws TimeoutException {  this.processingTimeDiff+=System.currentTimeMillis() - startTime;  if (task.getTaskType() == TaskTypes.TASK_FULL || task.getTaskType() == TaskTypes.TASK_PARTIAL_LAST) {    diffedSize+=result.byteSize();    ArticleInformation info=result.getHeader();    info.setRevisionCounter(revisionCounter);    info.setIgnoredRevisionsCounter(ignoredRevisionsCounter);    info.setDiffedSize(diffedSize);    info.setDiffPartCounter(diffPartCounter);    info.setProcessingTimeRead(task.getHeader().getProcessingTimeRead());    info.setProcessingTimeDiff(processingTimeDiff);  }  super.transmitAtEndOfTask(task,result);}  }
class C{  @Override public void createOrAddVolumesToExportMask(URI arrayURI,URI exportGroupURI,URI exportMaskURI,Map<URI,Integer> volumeMap,List<URI> initiatorURIs2,TaskCompleter completer,String stepId){  try {    WorkflowStepCompleter.stepExecuting(stepId);    StorageSystem array=_dbClient.queryObject(StorageSystem.class,arrayURI);    ExportMask exportMask=_dbClient.queryObject(ExportMask.class,exportMaskURI);    if (exportMask == null || exportMask.getInactive()) {      _log.info(String.format("ExportMask %s deleted or inactive, failing",exportMaskURI));      ServiceError svcerr=VPlexApiException.errors.createBackendExportMaskDeleted(exportMaskURI.toString(),arrayURI.toString());      WorkflowStepCompleter.stepFailed(stepId,svcerr);      return;    }    List<String> lockKeys=ControllerLockingUtil.getHostStorageLockKeys(_dbClient,ExportGroupType.Host,StringSetUtil.stringSetToUriList(exportMask.getInitiators()),arrayURI);    getWorkflowService().acquireWorkflowStepLocks(stepId,lockKeys,LockTimeoutValue.get(LockType.VPLEX_BACKEND_EXPORT));    BlockStorageDevice device=_blockController.getDevice(array.getSystemType());    exportMask=refreshExportMask(array,device,exportMask);    if (!exportMask.hasAnyVolumes()) {      List<URI> initiatorURIs=new ArrayList<URI>();      List<Initiator> initiators=new ArrayList<Initiator>();      for (      String initiatorId : exportMask.getInitiators()) {        Initiator initiator=_dbClient.queryObject(Initiator.class,URI.create(initiatorId));        if (initiator != null) {          initiators.add(initiator);          initiatorURIs.add(initiator.getId());        }      }      List<URI> targets=new ArrayList<URI>();      for (      String targetId : exportMask.getStoragePorts()) {        targets.add(URI.create(targetId));      }      completer=new ExportMaskCreateCompleter(exportGroupURI,exportMaskURI,initiatorURIs,volumeMap,stepId);      device.doExportCreate(array,exportMask,volumeMap,initiators,targets,completer);    } else {      List<URI> initiatorURIs=new ArrayList<URI>();      List<Initiator> initiators=new ArrayList<Initiator>();      for (      String initiatorId : exportMask.getInitiators()) {        Initiator initiator=_dbClient.queryObject(Initiator.class,URI.create(initiatorId));        if (initiator != null) {          initiators.add(initiator);          initiatorURIs.add(initiator.getId());        }      }      device.doExportAddVolumes(array,exportMask,initiators,volumeMap,completer);    }  } catch (  Exception ex) {    _log.error("Failed to create or add volumes to export mask for vmax: ",ex);    VPlexApiException vplexex=DeviceControllerExceptions.vplex.addStepsForCreateVolumesFailed(ex);    WorkflowStepCompleter.stepFailed(stepId,vplexex);  }}  }
class C{  public void run(ExecutorService executor,Runnable task){  if (executor == null || task == null) {    throw new IllegalStateException("Valid executor/task must be provided");  }  if (executor.isShutdown()) {    throw new IllegalStateException("Stopped");  }  OperationContext origContext=OperationContext.getOperationContext();  executor.execute(null);}  }
class C{  public static String repeat(String str,int count){  final StringBuilder result=new StringBuilder(str.length() * count);  for (int i=0; i < count; i++) {    result.append(str);  }  return result.toString();}  }
class C{  public final Vec2D minSelf(ReadonlyVec2D v){  x=MathUtils.min(x,v.x());  y=MathUtils.min(y,v.y());  return this;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Attr addrAttr;  String localName;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  addrAttr=testAddr.getAttributeNode("emp:domestic");  localName=addrAttr.getLocalName();  assertEquals("localName","domestic",localName);}  }
class C{  public static WhereBuilder b(String columnName,String op,Object value){  WhereBuilder result=new WhereBuilder();  result.appendCondition(null,columnName,op,value);  return result;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) public AccessibilityNodeInfo focusSearch(int direction){  enforceSealed();  if (!canPerformRequestOverConnection(mSourceNodeId)) {    return null;  }  AccessibilityNodeInfo node=new AccessibilityNodeInfo(DSOnlyType.DONTCARE);  node.addTaint(getTaint());  node.addTaint(direction);  return node;}  }
class C{  public BlobStore openBlobStore(String url,Map<String,String> parameters) throws IOException {  Map<String,String> key=new HashMap<String,String>();  if (parameters != null) {    key.putAll(parameters);  }  key.put(URL_KEY,url);synchronized (stores) {    Iterator<WeakReference<BlobStore>> iter=stores.values().iterator();    while (iter.hasNext()) {      if (iter.next().get() == null) {        iter.remove();      }    }    WeakReference<BlobStore> ref=stores.get(key);    if (ref != null) {      BlobStore store=ref.get();      if (store != null)       return store;    }  }  BlobStore store=getBlobStoreProvider(url,parameters);  if (store == null)   throw new IllegalArgumentException("No blob store provider is available for: " + url);synchronized (stores) {    stores.put(key,new WeakReference<BlobStore>(store));  }  return store;}  }
class C{  public static MouseListener add(MouseListener a,MouseListener b){  return (MouseListener)addInternal(a,b);}  }
class C{  public ListNode deleteDuplicates(ListNode head){  ListNode cur=head;  while (cur != null) {    while (cur.next != null && cur.val == cur.next.val) {      cur.next=cur.next.next;    }    cur=cur.next;  }  return head;}  }
class C{  public String toString(){  return time + "\t:" + count;}  }
class C{  public void testExpandingEntityReferencesOffDoesNotImpactPredefinedEntities() throws Exception {  String xml="<foo>abc&amp;def</foo>";  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  factory.setExpandEntityReferences(false);  document=factory.newDocumentBuilder().parse(new InputSource(new StringReader(xml)));  Element documentElement=document.getDocumentElement();  Text text=(Text)documentElement.getFirstChild();  assertEquals("abc&def",text.getTextContent());  assertNull(text.getNextSibling());}  }
class C{  public static PlatformContext platformContext(Ignite grid){  return platformProcessor(grid).context();}  }
class C{  protected void onDismiss(){}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  sessionContext.checkPermission(Right.BuildingList);  DistanceMetric.Ellipsoid ellipsoid=DistanceMetric.Ellipsoid.valueOf(ApplicationProperty.DistanceEllipsoid.value());  WebTable webTable=new WebTable(5,null,"buildingList.do?ord=%%",new String[]{"Abbreviation","Name","External ID",ellipsoid.getFirstCoordinateName(),ellipsoid.getSecondCoordinateName()},new String[]{"left","left","left","right","right"},new boolean[]{true,true,true,true,true});  WebTable.setOrder(sessionContext,"BuildingList.ord",request.getParameter("ord"),1);  DecimalFormat df5=new DecimalFormat("####0.######");  for (  Building b : Building.findAll(sessionContext.getUser().getCurrentAcademicSessionId())) {    webTable.addLine("onClick=\"document.location='buildingEdit.do?op=Edit&id=" + b.getUniqueId() + "';\"",new String[]{b.getAbbreviation(),b.getName(),b.getExternalUniqueId() == null ? "<i>N/A</i>" : b.getExternalUniqueId().toString(),(b.getCoordinateX() == null ? "" : df5.format(b.getCoordinateX())),(b.getCoordinateY() == null ? "" : df5.format(b.getCoordinateY()))},new Comparable[]{b.getAbbreviation(),b.getName(),b.getExternalUniqueId() == null ? "" : b.getExternalUniqueId().toString(),b.getCoordinateX(),b.getCoordinateY()});  }  request.setAttribute("table",webTable.printTable(WebTable.getOrder(sessionContext,"BuildingList.ord")));  return mapping.findForward("showBuildingList");}  }
class C{  public static int hashCode(byte[] b){  int h=0;  for (  byte c : b)   h=31 * h + (c & 0xFF);  return h;}  }
class C{  public static String createRedactedDescription(SamlToken token){  return String.format("%s [subject=%s, groups=%s, delegactionChain=%s, startTime=%s, " + "expirationTime=%s, renewable=%s, delegable=%s, isSolution=%s," + "confirmationType=%s]",token.getClass().getSimpleName(),getTokenSubjectForLog(token),token.getGroupList(),token.getDelegationChain(),token.getStartTime(),token.getExpirationTime(),token.isRenewable(),token.isDelegable(),token.isSolution(),token.getConfirmationType());}  }
class C{  @Override protected void finalize() throws Throwable {  mType=null;  mSequence=null;  super.finalize();}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == MappedElement.class) {switch (derivedFeatureID) {case SexecPackage.EXECUTION_FLOW__SOURCE_ELEMENT:      return SexecPackage.MAPPED_ELEMENT__SOURCE_ELEMENT;default :    return -1;}}if (baseClass == NamedElement.class) {switch (derivedFeatureID) {case SexecPackage.EXECUTION_FLOW__NAME:  return BasePackage.NAMED_ELEMENT__NAME;default :return -1;}}if (baseClass == ExecutionScope.class) {switch (derivedFeatureID) {case SexecPackage.EXECUTION_FLOW__STATE_VECTOR:return SexecPackage.EXECUTION_SCOPE__STATE_VECTOR;case SexecPackage.EXECUTION_FLOW__SUB_SCOPES:return SexecPackage.EXECUTION_SCOPE__SUB_SCOPES;case SexecPackage.EXECUTION_FLOW__SUPER_SCOPE:return SexecPackage.EXECUTION_SCOPE__SUPER_SCOPE;case SexecPackage.EXECUTION_FLOW__ENTER_SEQUENCES:return SexecPackage.EXECUTION_SCOPE__ENTER_SEQUENCES;case SexecPackage.EXECUTION_FLOW__EXIT_SEQUENCE:return SexecPackage.EXECUTION_SCOPE__EXIT_SEQUENCE;case SexecPackage.EXECUTION_FLOW__INIT_SEQUENCE:return SexecPackage.EXECUTION_SCOPE__INIT_SEQUENCE;default :return -1;}}if (baseClass == ExecutionNode.class) {switch (derivedFeatureID) {case SexecPackage.EXECUTION_FLOW__REACTIONS:return SexecPackage.EXECUTION_NODE__REACTIONS;case SexecPackage.EXECUTION_FLOW__SIMPLE_NAME:return SexecPackage.EXECUTION_NODE__SIMPLE_NAME;case SexecPackage.EXECUTION_FLOW__REACT_SEQUENCE:return SexecPackage.EXECUTION_NODE__REACT_SEQUENCE;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  @Override public String toString(){  StringBuffer buffer=new StringBuffer("CellConstraints");  buffer.append("[x=");  buffer.append(gridX);  buffer.append("; y=");  buffer.append(gridY);  buffer.append("; w=");  buffer.append(gridWidth);  buffer.append("; h=");  buffer.append(gridHeight);  buffer.append("; hAlign=");  buffer.append(hAlign);  buffer.append("; vAlign=");  buffer.append(vAlign);  if (!EMPTY_INSETS.equals(insets)) {    buffer.append("; insets=");    buffer.append(insets);  }  buffer.append("; honorsVisibility=");  buffer.append(honorsVisibility);  buffer.append(']');  return buffer.toString();}  }
class C{  public ReadStream openRead() throws IOException {  if (_isDone)   return null; else   if (_readStream == null)   _readStream=new ReadStream(this); else   if (!_isPartDone) {    int len;    while ((len=read(_dummyBuffer,0,_dummyBuffer.length)) >= 0) {    }    if (_isDone)     return null;  }  _readStream.init(this);  _isPartDone=false;  if (scanHeaders()) {    String contentType=(String)getAttribute("content-type");    String charset=getAttributePart(contentType,"charset");    return _readStream;  } else {    _isDone=true;    _readStream.close();    return null;  }}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  String formatParameterObject(Object object){  if (object == null) {    return "NULL";  } else {    if (object instanceof String) {      return "'" + escapeString((String)object) + "'";    } else     if (object instanceof Date) {      return "'" + new SimpleDateFormat(dateFormat).format(object) + "'";    } else     if (object instanceof Boolean) {      return DriverSpy.DumpBooleanAsTrueFalse ? ((Boolean)object).booleanValue() ? "true" : "false" : ((Boolean)object).booleanValue() ? "1" : "0";    } else {      return object.toString();    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public synchronized void ensureCapacity(int minimumCapacity){  if (elementData.length < minimumCapacity) {    int next=(capacityIncrement <= 0 ? elementData.length : capacityIncrement) + elementData.length;    grow(minimumCapacity > next ? minimumCapacity : next);  }}  }
class C{  private synchronized boolean shouldGarbageCollectPeer(Peer peer){  Date lastSeen=peer.getLastSeen();  Date now=new Date();  long msSinceSeen=now.getTime() - lastSeen.getTime();  return msSinceSeen > PEER_TIMEOUT;}  }
class C{  public static void assertNotEquals(boolean notExpected,boolean actual){  try {    Verify.assertNotEquals("boolean",notExpected,actual);  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  public static SourceArtifactCreator makeSourceArtifactCreator(RepositoryManager repoManager,Iterable<? extends File> sourcePaths,String moduleName,String moduleVersion,boolean verbose,Logger log) throws IOException {  return new SourceArtifactCreatorImpl(repoManager,sourcePaths,moduleName,moduleVersion,verbose,log);}  }
class C{  @Override public boolean isPostOperation(){  return false;}  }
class C{  public CCWavesTiles3D(int wav,float amp,ccGridSize gridSize,float d){  super(gridSize,d);  waves=wav;  amplitude=amp;  amplitudeRate=1.0f;}  }
class C{  public static SyntaxScheme loadFromString(String string){  SyntaxScheme scheme=new SyntaxScheme(true);  try {    if (string != null) {      String[] tokens=string.split(",",-1);      if (tokens.length == 0 || !VERSION.equals(tokens[0])) {        return scheme;      }      int tokenTypeCount=Token.NUM_TOKEN_TYPES;      int tokenCount=tokenTypeCount * 7 + 1;      if (tokens.length != tokenCount) {        throw new Exception("Not enough tokens in packed color scheme: expected " + tokenCount + ", found "+ tokens.length);      }      for (int i=0; i < tokenTypeCount; i++) {        int pos=i * 7 + 1;        int integer=Integer.parseInt(tokens[pos]);        if (integer != i)         throw new Exception("Expected " + i + ", found "+ integer);        Color fg=null;        String temp=tokens[pos + 1];        if (!"-".equals(temp)) {          fg=stringToColor(temp);        }        Color bg=null;        temp=tokens[pos + 2];        if (!"-".equals(temp)) {          bg=stringToColor(temp);        }        temp=tokens[pos + 3];        if (!"t".equals(temp) && !"f".equals(temp))         throw new Exception("Expected 't' or 'f', found " + temp);        boolean underline="t".equals(temp);        Font font=null;        String family=tokens[pos + 4];        if (!"-".equals(family)) {          font=new Font(family,Integer.parseInt(tokens[pos + 5]),Integer.parseInt(tokens[pos + 6]));        }        scheme.styles[i]=new Style(fg,bg,font,underline);      }    }  } catch (  Exception e) {    e.printStackTrace();  }  return scheme;}  }
class C{  private void modifyLocalVariable(){  int count=0;}  }
class C{  public static DialogOption showYesNoMessage(final String message,final String title,final int msgType){  return MessageService.instance().showYesNoMessage(message,title,msgType);}  }
class C{  private Sprite buildOutfit(int code,final OutfitColor color){  final int bodycode=(code % 100);  code/=100;  final int dresscode=(code % 100);  code/=100;  final int headcode=(code % 100);  code/=100;  final int haircode=(code % 100);  code/=100;  final int detailcode=(code % 100);  Sprite layer=getBodySprite(bodycode,color);  if (layer == null) {    throw new IllegalArgumentException("No body image found for outfit: " + bodycode);  }  final ImageSprite sprite=new ImageSprite(layer);  final Graphics g=sprite.getGraphics();  layer=getDressSprite(dresscode,color);  layer.draw(g,0,0);  layer=getHeadSprite(headcode,color);  layer.draw(g,0,0);  layer=getHairSprite(haircode,color);  layer.draw(g,0,0);  layer=getDetailSprite(detailcode,color);  layer.draw(g,0,0);  return sprite;}  }
class C{  public void invokeInterface(final Type owner,final Method method){  invokeInsn(Opcodes.INVOKEINTERFACE,owner,method,true);}  }
class C{  protected void flush(){  HibernateTemplate hibernateTemplate=new HibernateTemplate((SessionFactory)applicationContext.getBean("sessionFactory"));  hibernateTemplate.flush();  hibernateTemplate.clear();}  }
class C{  public RedisStateMachineContextRepository(RedisConnectionFactory redisConnectionFactory){  redisOperations=createDefaultTemplate(redisConnectionFactory);}  }
class C{  public void writeChars(String s) throws IOException {  int length=s.length();  for (int i=0; i < length; i++) {    int c=s.charAt(i);    out.write(c & 0xFF);    out.write((c >>> 8) & 0xFF);  }  written+=length * 2;}  }
class C{  public UsageServer(int port,File usageDir,int threads) throws IOException {  if (!Charset.isSupported(UTF_8)) {    throw new IOException("UTF-8 character encoding not supported");  }  System.setProperty("sun.net.httpserver.maxReqTime","30");  System.setProperty("sun.net.httpserver.maxRspTime","30");  mUsageDir=usageDir;  mPort=port;  mThreadPoolExecutor=new ThreadPoolExecutor(threads,threads,0,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>(),new UsageServerThreadFactory());}  }
class C{  public void childrenRemoved(BeanContextMembershipEvent bcme){  Iterator it=bcme.iterator();  while (it.hasNext()) {    findAndUndo(it.next());  }}  }
class C{  public int recordObject(CollectionId id,Document object,long timestamp) throws InterruptedException {  final Struct sourceValue=source.lastOffsetStruct(replicaSetName,id);  final Map<String,?> offset=source.lastOffset(replicaSetName);  String objId=objectIdLiteralFrom(object);  return createRecords(sourceValue,offset,Operation.READ,objId,object,timestamp);}  }
class C{  ProposalSorterHandle(IConfigurationElement element) throws InvalidRegistryObjectException, CoreException {  Assert.isLegal(element != null);  fElement=element;  fId=element.getAttribute(ID);  checkNotNull(fId,ID);  String name=element.getAttribute(NAME);  if (name == null)   fName=fId; else   fName=name;  fClass=element.getAttribute(CLASS);  checkNotNull(fClass,CLASS);}  }
class C{  private static double[] computeLabels(final double start,final double end,final int approxNumLabels){  if (Math.abs(start - end) < 0.0000001f) {    return new double[]{start,start,0};  }  double s=start;  double e=end;  boolean switched=false;  if (s > e) {    switched=true;    double tmp=s;    s=e;    e=tmp;  }  double xStep=roundUp(Math.abs(s - e) / approxNumLabels);  double xStart=xStep * Math.ceil(s / xStep);  double xEnd=xStep * Math.floor(e / xStep);  if (switched) {    return new double[]{xEnd,xStart,-1.0 * xStep};  }  return new double[]{xStart,xEnd,xStep};}  }
class C{  public EnumComboBoxCellRenderer(String key){  this.i18nKeyPrefix=key;}  }
class C{  protected String apply(String source){  String result=source;  String match=m_matchS;  if (m_ignoreCase) {    result=result.toLowerCase();    match=match.toLowerCase();  }  if (result != null && result.length() > 0) {    if (m_regex) {      result=m_regexPattern.matcher(result).replaceAll(m_replaceS);    } else {      result=result.replace(match,m_replaceS);    }  }  return result;}  }
class C{  public ShapeWriter(){}  }
class C{  protected void clearCurrentText(){  this.currentText.delete(0,this.currentText.length());}  }
class C{  public void clear(){  if (arrayTable != null) {    arrayTable.clear();  }}  }
class C{  public Coord4D step(ForgeDirection side){  return translate(side.offsetX,side.offsetY,side.offsetZ);}  }
class C{  public String optString(int index){  return optString(index,"");}  }
class C{  public RuleSet[] split(int[] points,RuleSet[] sets){  for (int i=0; i < (points.length > 0 ? points[0] : rules.length); i++)   sets[0].addRule((Rule)(rules[i].clone()));  if (points.length > 0) {    for (int p=1; p < points.length; p++)     for (int i=points[p - 1]; i < points[p]; i++)     sets[p].addRule((Rule)(rules[i].clone()));    for (int i=points[points.length - 1]; i < rules.length; i++)     sets[points.length].addRule((Rule)(rules[i].clone()));  }  return sets;}  }
class C{  public void updateBlob(String columnLabel,InputStream inputStream) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.featnotsupp").toString());}  }
class C{  public double num(){  return toDouble();}  }
class C{  public IncompatibleComparatorException(String message,Throwable cause){  super(message,cause);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:31.658 -0500",hash_original_method="9FCBFE264C415F40E8FC1E843482D494",hash_generated_method="D1C00D2D9C7C9C5095A0BFA12F667944") public javax.sip.address.Address createAddress(String address) throws java.text.ParseException {  if (address == null)   throw new NullPointerException("null address");  if (address.equals("*")) {    AddressImpl addressImpl=new AddressImpl();    addressImpl.setAddressType(AddressImpl.WILD_CARD);    SipURI uri=new SipUri();    uri.setUser("*");    addressImpl.setURI(uri);    return addressImpl;  } else {    StringMsgParser smp=new StringMsgParser();    return smp.parseAddress(address);  }}  }
class C{  void memberEnter(List<? extends JCTree> trees,Env<AttrContext> env){  for (List<? extends JCTree> l=trees; l.nonEmpty(); l=l.tail)   memberEnter(l.head,env);}  }
class C{  public void testGetPropertyNames(){  ArbitraryPropertySupport instance=(new UnboundBeanImpl()).aps();  Set<String> expResult=new HashSet<>(6);  expResult.add(CLASS);  expResult.add(PROPERTY_NAMES);  expResult.add(STRING_PROPERTY);  expResult.add(INDEXED_PROPERTY);  expResult.add(MAPPED_STRING);  expResult.add(MAPPED_INDEXED);  Set<String> result=instance.getPropertyNames();  assertEquals(expResult,result);}  }
class C{  public static boolean isStandardLanguage(Locale locale){  if (Locale.ENGLISH.equals(locale) || Locale.GERMAN.equals(locale) || Locale.JAPANESE.equals(locale)) {    return true;  }  return false;}  }
class C{  public CutSubsessionAction(){  super("Cut");}  }
class C{  @RequestProcessing(value="/member/{userName}/following/articles",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class,UserBlockCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showHomeFollowingArticles(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String userName) throws Exception {  final JSONObject user=(JSONObject)request.getAttribute(User.USER);  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get("skinDirName"));  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("/home/following-articles.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  filler.fillHeaderAndFooter(request,response,dataModel);  String pageNumStr=request.getParameter("p");  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {    pageNumStr="1";  }  final int pageNum=Integer.valueOf(pageNumStr);  final int pageSize=Symphonys.getInt("userHomeFollowingArticlesCnt");  final int windowSize=Symphonys.getInt("userHomeFollowingArticlesWindowSize");  fillHomeUser(dataModel,user);  final String followingId=user.optString(Keys.OBJECT_ID);  dataModel.put(Follow.FOLLOWING_ID,followingId);  avatarQueryService.fillUserAvatarURL(user);  final JSONObject followingArticlesResult=followQueryService.getFollowingArticles(followingId,pageNum,pageSize);  final List<JSONObject> followingArticles=(List<JSONObject>)followingArticlesResult.opt(Keys.RESULTS);  dataModel.put(Common.USER_HOME_FOLLOWING_ARTICLES,followingArticles);  final boolean isLoggedIn=(Boolean)dataModel.get(Common.IS_LOGGED_IN);  if (isLoggedIn) {    final JSONObject currentUser=(JSONObject)dataModel.get(Common.CURRENT_USER);    final String followerId=currentUser.optString(Keys.OBJECT_ID);    final boolean isFollowing=followQueryService.isFollowing(followerId,followingId);    dataModel.put(Common.IS_FOLLOWING,isFollowing);    for (    final JSONObject followingArticle : followingArticles) {      final String homeUserFollowingArticleId=followingArticle.optString(Keys.OBJECT_ID);      followingArticle.put(Common.IS_FOLLOWING,followQueryService.isFollowing(followerId,homeUserFollowingArticleId));    }  }  user.put(UserExt.USER_T_CREATE_TIME,new Date(user.getLong(Keys.OBJECT_ID)));  final int followingArticleCnt=followingArticlesResult.optInt(Pagination.PAGINATION_RECORD_COUNT);  final int pageCount=(int)Math.ceil(followingArticleCnt / (double)pageSize);  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);  if (!pageNums.isEmpty()) {    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));  }  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);}  }
