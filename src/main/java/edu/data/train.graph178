class C{  void repeatSearch(SearchResultMediator rp,SearchInformation info){  if (!validate(info)) {    return;  }  stopSearch(rp.getToken());  long token=newSearchToken();  rp.setToken(token);  updateSearchIcon(token,true);  rp.resetFiltersPanel();  performSearch(token,info.getQuery());}  }
class C{  private void onCreateSwipeToRefresh(SwipeRefreshLayout refreshLayout){  refreshLayout.setColorSchemeResources(R.color.accent,R.color.primary,R.color.primary_dark);  refreshLayout.setOnRefreshListener(this);}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (!(o instanceof LocoNetMessage)) {    return false;  }  LocoNetMessage m=(LocoNetMessage)o;  if (m._nDataBytes != this._nDataBytes) {    return false;  }  for (int i=0; i < _nDataBytes - 1; i++) {    if ((m._dataBytes[i] & 0xFF) != (this._dataBytes[i] & 0xFF)) {      return false;    }  }  return true;}  }
class C{  @NotNull @ObjectiveCName("isInPhoneBookModel") public BooleanValueModel isInPhoneBook(){  return isInPhoneBook;}  }
class C{  public void testNextBoolean(){  Random r=new Random();  boolean f=r.nextBoolean();  int i=0;  while (i < NCALLS && r.nextBoolean() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  public void testGetMaxSize(){  assertEquals(14,SeeedStudioRfidProtocol.getMaxSize());}  }
class C{  protected void sendBatch(boolean isFromSchedule){  if (isFromSchedule) {    callbackScheduledTime=null;  } else {    if (callbackScheduledTime != null) {      agentInstanceContext.getStatementContext().getSchedulingService().remove(handle,scheduleSlot);      callbackScheduledTime=null;    }  }  if (this.hasViews()) {    EventBean[] newData=null;    EventBean[] oldData=null;    if (!currentBatch.isEmpty()) {      newData=currentBatch.toArray(new EventBean[currentBatch.size()]);    }    if ((lastBatch != null) && (!lastBatch.isEmpty())) {      oldData=lastBatch.toArray(new EventBean[lastBatch.size()]);    }    if (viewUpdatedCollection != null) {      viewUpdatedCollection.update(newData,oldData);    }    if ((newData != null) || (oldData != null) || (isForceOutput)) {      if (InstrumentationHelper.ENABLED) {        InstrumentationHelper.get().qViewIndicate(this,timeLengthBatchViewFactory.getViewName(),newData,oldData);      }      updateChildren(newData,oldData);      if (InstrumentationHelper.ENABLED) {        InstrumentationHelper.get().aViewIndicate();      }    }  }  if (((!currentBatch.isEmpty()) || ((lastBatch != null) && (!lastBatch.isEmpty()))) || (isForceOutput)) {    scheduleCallback(0);  }  lastBatch=currentBatch;  currentBatch=new ArrayList<EventBean>();}  }
class C{  public void keyPressed(KeyEvent e){  if (isNavigationKey(e)) {    prefix="";    typedString="";    lastTime=0L;  }}  }
class C{  protected void testClose(DataSource<Object> dataSource,DataSource<Object>... underlyingDataSources){  dataSource.close();  if (underlyingDataSources != null) {    for (    DataSource<Object> underlyingDataSource : underlyingDataSources) {      mInOrder.verify(underlyingDataSource,atLeastOnce()).close();    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentcreatetextnode.class,args);}  }
class C{  @Override public void mouseScroll(int delta){  mouseButton=4;  controller.mouseScroll(delta);}  }
class C{  static String join(CharSequence delimiter,Iterable tokens){  StringBuilder sb=new StringBuilder();  boolean firstTime=true;  for (  Object item : tokens) {    if (firstTime) {      firstTime=false;    } else {      sb.append(delimiter);    }    sb.append(item);  }  return sb.toString();}  }
class C{  @Interruptible @Pure public static boolean isJavaClassName(String s){  boolean identStart=true;  for (int i=0; i < s.length(); ++i) {    char c=s.charAt(i);    if (identStart) {      if (!isVMIdentifierStart(c)) {        return false;      }      identStart=false;      continue;    }    if (c == '.' || c == '/') {      identStart=true;      continue;    }    if (!isVMIdentifierPart(c)) {      return false;    }  }  return !identStart;}  }
class C{  public void visitVarInsn(int opcode,int var){  if (mv != null) {    mv.visitVarInsn(opcode,var);  }}  }
class C{  @Override public void serialize(CumulativeTimeBucket ctb,JsonGenerator jGen,SerializerProvider serializer) throws IOException, JsonProcessingException {  jGen.writeStartObject();  Timestamp ts=new Timestamp(ctb.getStartTimeNs() / 1000000);  jGen.writeStringField("start-time",ts.toString());  jGen.writeStringField("current-time",new Timestamp(System.currentTimeMillis()).toString());  jGen.writeNumberField("total-packets",ctb.getTotalPktCnt());  jGen.writeNumberField("average",ctb.getAverageProcTimeNs());  jGen.writeNumberField("min",ctb.getMinTotalProcTimeNs());  jGen.writeNumberField("max",ctb.getMaxTotalProcTimeNs());  jGen.writeNumberField("std-dev",ctb.getTotalSigmaProcTimeNs());  jGen.writeArrayFieldStart("modules");  for (  OneComponentTime oct : ctb.getModules()) {    serializer.defaultSerializeValue(oct,jGen);  }  jGen.writeEndArray();  jGen.writeEndObject();}  }
class C{  public String seedTipText(){  return "The random number seed to be used.";}  }
class C{  public long clear(){  long result;synchronized (this) {    result=this.topAddr;    if (result != 0L) {      this.topAddr=0L;    }  }  return result;}  }
class C{  public static Map<Unit,Unit> mapTransportsAlreadyLoaded(final Collection<Unit> units,final Collection<Unit> transports){  final Collection<Unit> canBeTransported=Match.getMatches(units,Matches.UnitCanBeTransported);  final Collection<Unit> canTransport=Match.getMatches(transports,Matches.UnitCanTransport);  final Map<Unit,Unit> mapping=new HashMap<>();  for (  final Unit currentTransported : canBeTransported) {    final Unit transport=TransportTracker.transportedBy(currentTransported);    if (transport == null || !canTransport.contains(transport)) {      continue;    }    mapping.put(currentTransported,transport);  }  return mapping;}  }
class C{  public static double acos(double x){  if (x != x) {    return Double.NaN;  }  if (x > 1.0 || x < -1.0) {    return Double.NaN;  }  if (x == -1.0) {    return Math.PI;  }  if (x == 1.0) {    return 0.0;  }  if (x == 0) {    return Math.PI / 2.0;  }  double temp=x * HEX_40000000;  final double xa=x + temp - temp;  final double xb=x - xa;  double ya=xa * xa;  double yb=xa * xb * 2.0 + xb * xb;  ya=-ya;  yb=-yb;  double za=1.0 + ya;  double zb=-(za - 1.0 - ya);  temp=za + yb;  zb+=-(temp - za - yb);  za=temp;  double y=sqrt(za);  temp=y * HEX_40000000;  ya=y + temp - temp;  yb=y - ya;  yb+=(za - ya * ya - 2 * ya * yb - yb * yb) / (2.0 * y);  yb+=zb / (2.0 * y);  y=ya + yb;  yb=-(y - ya - yb);  double r=y / x;  if (Double.isInfinite(r)) {    return Math.PI / 2;  }  double ra=doubleHighPart(r);  double rb=r - ra;  rb+=(y - ra * xa - ra * xb - rb * xa - rb * xb) / x;  rb+=yb / x;  temp=ra + rb;  rb=-(temp - ra - rb);  ra=temp;  return atan(ra,rb,x < 0);}  }
class C{  public boolean isStatic(){  return field.isStatic();}  }
class C{  public static void parse(Reader in,ContentHandler contentHandler) throws IOException, SAXException {  XMLReader reader=new ExpatReader();  reader.setContentHandler(contentHandler);  reader.parse(new InputSource(in));}  }
class C{  public void close() throws IOException {  if (response == null || closed)   return;  flush();  if (out != null)   out.close();  out=null;  byteOut=null;  closed=true;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  Content.registerMetadata(registry);  ElementCreator builder=registry.build(KEY);  builder.replaceAttribute(Content.SRC).setRequired(true);  builder.addAttribute(LENGTH).setVisible(false);  builder.addAttribute(ETAG);  registry.adapt(Content.KEY,KIND,KEY);}  }
class C{  public <T>T mapTo(final String path,final Class<T> mappingClass,final int flags){  return JBBPMapper.map(this,path,mappingClass,flags);}  }
class C{  public static double degreesDiff(double a1,double a2){  double diff=a1 - a2;  while (diff > 180) {    diff-=360;  }  while (diff <= -180) {    diff+=360;  }  return diff;}  }
class C{  public static void clearProperty(String key){  ri.clearProperty(key);}  }
class C{  public void addedDistributedSystem(int remoteDsId){  cache=CacheFactory.getAnyInstance();  if (remoteDsId == 2) {    if (cache != null) {      GatewaySender serialSender=cache.createGatewaySenderFactory().setManualStart(true).setPersistenceEnabled(false).setDiskStoreName("LN_" + remoteDsId).create("LN_" + remoteDsId,remoteDsId);      System.out.println("Sender Created : " + serialSender.getId());      Region region=cache.createRegionFactory().create("MyRegion");      System.out.println("Created Region : " + region.getName());      try {        serialSender.start();        System.out.println("Sender Started: " + serialSender.getId());      } catch (      Exception e) {        e.printStackTrace();      }    } else {      throw new CacheClosedException("Cache is not initialized here");    }  } else {    if (cache != null) {      Region region=cache.createRegionFactory().create("MyRegion");      System.out.println("Created Region :" + region.getName());      GatewayReceiver receiver=cache.createGatewayReceiverFactory().setStartPort(12345).setManualStart(true).create();      System.out.println("Created GatewayReceiver : " + receiver);      try {        receiver.start();        System.out.println("GatewayReceiver Started.");      } catch (      IOException e) {        e.printStackTrace();      }    }  }}  }
class C{  public void addRefType(RefType type){  nameToClass.put(type.getClassName(),type);}  }
class C{  protected SVGOMVKernElement(){}  }
class C{  public boolean isOnPieChart(Point screenPoint){  double sqValue=(Math.pow(mCenterX - screenPoint.getX(),2) + Math.pow(mCenterY - screenPoint.getY(),2));  double radiusSquared=mPieChartRadius * mPieChartRadius;  boolean isOnPieChart=sqValue <= radiusSquared;  return isOnPieChart;}  }
class C{  static float rotateX(float pX,float pY,float cX,float cY,float angleInDegrees){  double angle=Math.toRadians(angleInDegrees);  return (float)(Math.cos(angle) * (pX - cX) - Math.sin(angle) * (pY - cY) + cX);}  }
class C{  @Override protected void onPostCreate(Bundle savedInstanceState){  super.onPostCreate(savedInstanceState);  if (mDrawerToggle != null) {    mDrawerToggle.syncState();  }}  }
class C{  public static Result restSearch(){  DynamicForm form=Form.form().bindFromRequest(request());  String appId=form.get(APP_ID);  appId=appId != null ? appId.trim() : "";  if (appId.contains("job")) {    appId=appId.replaceAll("job","application");  }  String flowExecId=form.get(FLOW_EXEC_ID);  flowExecId=(flowExecId != null) ? flowExecId.trim() : null;  if (!appId.isEmpty()) {    AppResult result=AppResult.find.select("*").fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS,"*").fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS + "." + AppHeuristicResult.TABLE.APP_HEURISTIC_RESULT_DETAILS,"*").where().idEq(appId).findUnique();    if (result != null) {      return ok(Json.toJson(result));    } else {      return notFound("Unable to find record on id: " + appId);    }  } else   if (flowExecId != null && !flowExecId.isEmpty()) {    List<AppResult> results=AppResult.find.select("*").fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS,"*").fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS + "." + AppHeuristicResult.TABLE.APP_HEURISTIC_RESULT_DETAILS,"*").where().eq(AppResult.TABLE.FLOW_EXEC_ID,flowExecId).findList();    if (results.size() == 0) {      return notFound("Unable to find record on flow execution: " + flowExecId);    } else {      return ok(Json.toJson(results));    }  }  int page=1;  if (request().queryString().containsKey(PAGE)) {    page=Integer.parseInt(request().queryString().get(PAGE)[0]);    if (page <= 0) {      page=1;    }  }  Query<AppResult> query=generateSearchQuery("*",getSearchParams());  List<AppResult> results=query.setFirstRow((page - 1) * REST_PAGE_LENGTH).setMaxRows(REST_PAGE_LENGTH).fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS,"*").fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS + "." + AppHeuristicResult.TABLE.APP_HEURISTIC_RESULT_DETAILS,"*").findList();  if (results.size() == 0) {    return notFound("No records");  } else {    return ok(Json.toJson(results));  }}  }
class C{  public static <T>Supplier<T> nextDataSupplier(final Cursor cursor,final DatabaseEntry stopKey,final ByteArrayConverter<T> converter){  DatabaseEntry key=new DatabaseEntry();  DatabaseEntry data=new DatabaseEntry();  return null;}  }
class C{  @Override public void marshal(Object source,HierarchicalStreamWriter writer,MarshallingContext context){  ViewDocument viewInfo=(ViewDocument)source;  Components components=viewInfo.getComponents();  marshalObject(components.getParentGraph(),writer,context);  marshallNodes(components.getViewNodes(),VIEW_NODES,writer,context);  marshalObject(components.getUserPrefs(),writer,context);}  }
class C{  public Collection<String> removeHttpHeaders(String name){  return headers.removeAll(name);}  }
class C{  public static List<String> prepContentPurposeList(Map<String,Object> context){  List<String> contentPurposeList=UtilGenerics.checkList(context.get("contentPurposeList"));  String contentPurposeString=(String)context.get("contentPurposeString");  if (Debug.infoOn()) {    Debug.logInfo("in prepContentPurposeList, contentPurposeString(0):" + contentPurposeString,"");  }  if (UtilValidate.isNotEmpty(contentPurposeString)) {    List<String> purposesFromString=StringUtil.split(contentPurposeString,"|");    if (UtilValidate.isEmpty(contentPurposeList)) {      contentPurposeList=FastList.newInstance();    }    contentPurposeList.addAll(purposesFromString);  }  if (UtilValidate.isEmpty(contentPurposeList)) {    contentPurposeList=FastList.newInstance();  }  if (Debug.infoOn()) {    Debug.logInfo("in prepContentPurposeList, contentPurposeList(0):" + contentPurposeList,"");  }  return contentPurposeList;}  }
class C{  static public double i1(double x) throws ArithmeticException {  double y, z;  z=Math.abs(x);  if (z <= 8.0) {    y=(z / 2.0) - 2.0;    z=Arithmetic.chbevl(y,A_i1,29) * z * Math.exp(z);  } else {    z=Math.exp(z) * Arithmetic.chbevl(32.0 / z - 2.0,B_i1,25) / Math.sqrt(z);  }  if (x < 0.0)   z=-z;  return (z);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof XYBarDataset)) {    return false;  }  XYBarDataset that=(XYBarDataset)obj;  if (!this.underlying.equals(that.underlying)) {    return false;  }  if (this.barWidth != that.barWidth) {    return false;  }  return true;}  }
class C{  private boolean isFileBaseModified(){  final String fileBaseText=getFileBase();  final boolean fileBaseChanged="".equals(fileBaseText) || !new CAddress(Convert.hexStringToLong(fileBaseText)).equals(m_module.getConfiguration().getFileBase());  return fileBaseChanged;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  Node textNode;  String localName;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("employeeId");  testEmployee=elementList.item(0);  textNode=testEmployee.getFirstChild();  localName=textNode.getLocalName();  assertNull("textNodeLocalName",localName);}  }
class C{  public FileFooter readFooter() throws IOException {  ThriftReader thriftReader=openThriftReader(filePath);  thriftReader.open();  thriftReader.setReadOffset(offset);  FileFooter footer=(FileFooter)thriftReader.read();  thriftReader.close();  return footer;}  }
class C{  public static <ValueT>ByteBuffer toByteBuffer(ValueT obj) throws IOException {  byte[] bytes=null;  ByteArrayOutputStream bos=null;  ObjectOutputStream oos=null;  try {    bos=new ByteArrayOutputStream();    oos=new ObjectOutputStream(bos);    oos.writeObject(obj);    oos.flush();    bytes=bos.toByteArray();  }  finally {    if (oos != null) {      oos.close();    }    if (bos != null) {      bos.close();    }  }  return ByteBuffer.wrap(bytes);}  }
class C{  private String readLine(InputStream inputStream) throws IOException {  StringBuffer retval=new StringBuffer("");  while (true) {    char ch;    int i=inputStream.read();    if (i == -1) {      throw new IOException("End of stream");    } else     ch=(char)i;    if (this.maxMessageSize > 0) {      this.sizeCounter--;      if (this.sizeCounter <= 0)       throw new IOException("Max size exceeded!");    }    if (ch != '\r')     retval.append(ch);    if (ch == '\n') {      break;    }  }  return retval.toString();}  }
class C{  public Z21Reporter(String systemName,String userName,Z21SystemConnectionMemo memo){  super(systemName,userName);  _memo=memo;  _memo.getTrafficController().addz21Listener(this);  requestUpdateFromLayout();  refreshTimer();}  }
class C{  protected void parseKeyBits() throws InvalidKeyException {  try {    DerInputStream in=new DerInputStream(key);    DerValue derValue=in.getDerValue();    if (derValue.tag != DerValue.tag_Sequence) {      throw new IOException("Not a SEQUENCE");    }    DerInputStream data=derValue.data;    int version=data.getInteger();    if (version != 1) {      throw new IOException("Version must be 1");    }    byte[] privData=data.getOctetString();    s=new BigInteger(1,privData);    while (data.available() != 0) {      DerValue value=data.getDerValue();      if (value.isContextSpecific((byte)0)) {      } else       if (value.isContextSpecific((byte)1)) {      } else {        throw new InvalidKeyException("Unexpected value: " + value);      }    }    AlgorithmParameters algParams=this.algid.getParameters();    if (algParams == null) {      throw new InvalidKeyException("EC domain parameters must be " + "encoded in the algorithm identifier");    }    params=algParams.getParameterSpec(ECParameterSpec.class);  } catch (  IOException e) {    throw new InvalidKeyException("Invalid EC private key",e);  }catch (  InvalidParameterSpecException e) {    throw new InvalidKeyException("Invalid EC private key",e);  }}  }
class C{  public static void uploadFile(String name,String contentType,File file,String bucketName) throws IOException, GeneralSecurityException {  InputStreamContent contentStream=new InputStreamContent(contentType,new FileInputStream(file));  contentStream.setLength(file.length());  StorageObject objectMetadata=new StorageObject().setName(name).setAcl(Arrays.asList(new ObjectAccessControl().setEntity("allUsers").setRole("READER")));  Storage client=StorageFactory.getService();  Storage.Objects.Insert insertRequest=client.objects().insert(bucketName,objectMetadata,contentStream);  insertRequest.execute();}  }
class C{  public static int testb(int b){  byte x=(byte)b;  int y=x & 0xff;  if (y == 0xff) {    y=(int)(System.currentTimeMillis() >> 32);  }  return y;}  }
class C{  protected void paintCurrentLineHighlight(Graphics g,Rectangle visibleRect){  if (textArea.getHighlightCurrentLine()) {    Caret caret=textArea.getCaret();    if (caret.getDot() == caret.getMark()) {      Color highlight=textArea.getCurrentLineHighlightColor();      int height=textArea.getLineHeight();      if (textArea.getFadeCurrentLineHighlight()) {        Graphics2D g2d=(Graphics2D)g;        Color bg=textArea.getBackground();        GradientPaint paint=new GradientPaint(visibleRect.x,0,highlight,visibleRect.x + visibleRect.width,0,bg == null ? Color.WHITE : bg);        g2d.setPaint(paint);        g2d.fillRect(visibleRect.x,textArea.currentCaretY,visibleRect.width,height);      } else {        g.setColor(highlight);        g.fillRect(visibleRect.x,textArea.currentCaretY,visibleRect.width,height);      }    }  }}  }
class C{  public static final Move stringToMove(Position pos,String strMove){  strMove=strMove.replaceAll("=","");  Move move=null;  if (strMove.length() == 0)   return move;  MoveGen.MoveList moves=MoveGen.instance.pseudoLegalMoves(pos);  MoveGen.removeIllegal(pos,moves);{    char lastChar=strMove.charAt(strMove.length() - 1);    if ((lastChar == '#') || (lastChar == '+')) {      MoveGen.MoveList subMoves=new MoveGen.MoveList();      int len=0;      for (int mi=0; mi < moves.size; mi++) {        Move m=moves.m[mi];        String str1=TextIO.moveToString(pos,m,true,moves);        if (str1.charAt(str1.length() - 1) == lastChar) {          subMoves.m[len++]=m;        }      }      subMoves.size=len;      moves=subMoves;      strMove=normalizeMoveString(strMove);    }  }  for (int i=0; i < 2; i++) {    for (int mi=0; mi < moves.size; mi++) {      Move m=moves.m[mi];      String str1=normalizeMoveString(TextIO.moveToString(pos,m,true,moves));      String str2=normalizeMoveString(TextIO.moveToString(pos,m,false,moves));      if (i == 0) {        if (strMove.equals(str1) || strMove.equals(str2)) {          return m;        }      } else {        if (strMove.toLowerCase().equals(str1.toLowerCase()) || strMove.toLowerCase().equals(str2.toLowerCase())) {          return m;        }      }    }  }  for (int i=0; i < 2; i++) {    for (int mi=0; mi < moves.size; mi++) {      Move m=moves.m[mi];      String str1=normalizeMoveString(TextIO.moveToString(pos,m,true));      String str2=normalizeMoveString(TextIO.moveToString(pos,m,false));      boolean match;      if (i == 0) {        match=(str1.startsWith(strMove) || str2.startsWith(strMove));      } else {        match=(str1.toLowerCase().startsWith(strMove.toLowerCase()) || str2.toLowerCase().startsWith(strMove.toLowerCase()));      }      if (match) {        if (move != null) {          return null;        } else {          move=m;        }      }    }    if (move != null)     return move;  }  return move;}  }
class C{  public FileReader(String fileName) throws FileNotFoundException {  super(new FileInputStream(fileName));}  }
class C{  public static void e(String tag,String msg){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg);}  }
class C{  public void clearCache(){  MapTileFactory mtf=getTileFactory();  if (mtf != null) {    mtf.reset();  }}  }
class C{  public synchronized OMGraphicList prepare(){  OMGraphicList list=getList();  if (list == null) {    list=init();  }  list.generate(getProjection());  return list;}  }
class C{  public static boolean isArrowpointAllowed(Object from,Object to,IKnowledge knowledge){  if (knowledge == null) {    return true;  }  return !knowledge.isRequired(to.toString(),from.toString()) && !knowledge.isForbidden(from.toString(),to.toString());}  }
class C{  public static CalendarScale gregorian(){  return new CalendarScale(GREGORIAN);}  }
class C{  public void register(String key,DefinitionProcess value){  definitions.put(key,value);}  }
class C{  protected boolean check(boolean leaf,SpatialKey key,SpatialKey test){  return true;}  }
class C{  private static List<String> findUniqueAuthsFromChild(final String parentAuths,final String childAuths){  final List<String> parentAuthList=AccumuloRyaUtils.convertAuthStringToList(parentAuths);  final List<String> childAuthList=AccumuloRyaUtils.convertAuthStringToList(childAuths);  childAuthList.removeAll(parentAuthList);  return childAuthList;}  }
class C{  public static int lowOrderLongToInt(long longValue){  return (int)(longValue << 32 >> 32);}  }
class C{  public static void convertTsvToDat(String tsvFileName,float radius){  String datFileName=WWIO.replaceSuffix(tsvFileName,".dat");  convertTsvToDat(tsvFileName,datFileName,radius);}  }
class C{  public void addTagRelation(final JSONObject tagRelation) throws ServiceException {  final Transaction transaction=tagTagRepository.beginTransaction();  try {    tagTagRepository.add(tagRelation);    transaction.commit();  } catch (  final RepositoryException e) {    if (transaction.isActive()) {      transaction.rollback();    }    LOGGER.log(Level.ERROR,"Adds a tag-tag failed",e);    throw new ServiceException(e);  }}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isCpuFeatureMaskSupported(){  return cpuFeatureMaskSupported;}  }
class C{  public String asPlaintext(){  return Jsoup.parse(write()).text();}  }
class C{  public void testOneSubmittedMigration_equivalent() throws Exception {  ImmutableMap<String,String> files=ImmutableMap.of("/path/to/db","{\"equivalences\":[], \"migrations\":[]}","/dummy/codebase/int/1/file","1","/dummy/codebase/pub/1/","empty dir (different)","/dummy/codebase/int/migrated_from/file","migrated_from","/dummy/codebase/pub/migrated_to/file","migrated_to (equivalent)");  FileSystem filesystem=new InMemoryFileSystem(files);  FileDiffer fileDiffer=new ConcreteFileDiffer(cmd,filesystem);  CodebaseDiffer codebaseDiffer=new CodebaseDiffer(fileDiffer,filesystem);  Repositories repositories=new Repositories(ImmutableSet.<RepositoryType.Factory>of(new DummyRepositoryFactory()));  InMemoryProjectContextFactory contextFactory=init(new InMemoryProjectContextFactory(ui,repositories));  ProjectContext context=contextFactory.create("moe_config.txt");  Injector.INSTANCE=new Injector(filesystem,cmd,ui);  Db db=new FileDb(DB_FILE.getPath(),storage,new FileDb.Writer(GsonModule.provideGson(),filesystem));  BookkeepingDirective d=new BookkeepingDirective(new Bookkeeper(context,codebaseDiffer,db,ui));  d.dbLocation=DB_FILE.getAbsolutePath();  expectDiffs();  control.replay();  assertEquals(0,d.perform());  control.verify();  DbStorage expectedDb=new DbStorage();  expectedDb.addEquivalence(RepositoryEquivalence.create(Revision.create("migrated_from","int"),Revision.create("migrated_to","pub")));  expectedDb.addMigration(SubmittedMigration.create(Revision.create("migrated_from","int"),Revision.create("migrated_to","pub")));  assertThat(storage).isEqualTo(expectedDb);}  }
class C{  public final void prepareADM(ADM a){  adf=a;}  }
class C{  @Override public void updateCharacterStream(String columnLabel,Reader x,int length) throws SQLException {  updateCharacterStream(columnLabel,x,(long)length);}  }
class C{  public static ByteBuffer createByteBuffer(int elements){  return ByteBuffer.allocateDirect(elements);}  }
class C{  public ServiceParameterException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public void clearScriptCache(){  scriptCache.clear();}  }
class C{  public String readUTFAsArray() throws IOException {  byte[] buffer=new byte[super.readInt()];  super.read(buffer,0,buffer.length);  return new String(buffer,"UTF-8");}  }
class C{  private static int vIntSize(int x){  if ((x & (0xffffffff << (7 * 1))) == 0) {    return 1;  }  if ((x & (0xffffffff << (7 * 2))) == 0) {    return 2;  }  if ((x & (0xffffffff << (7 * 3))) == 0) {    return 3;  }  if ((x & (0xffffffff << (7 * 4))) == 0) {    return 4;  }  return 5;}  }
class C{  public void testGetIsForward(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getIsForward();  assertEquals(expResult,result);}  }
class C{  private Map<GraphNode,Integer> populateRelationCount(Collection<GraphNode> nodes){  Map<GraphNode,Integer> result=Maps.newHashMap();  for (  GraphNode node : nodes) {    result.put(node,0);  }  return result;}  }
class C{  private void handleEnumeratedAttribute(Instances trainInstances) throws Exception {  Distribution newDistribution, secondDistribution;  int numAttValues;  double currIG, currGR;  Instance instance;  int i;  numAttValues=trainInstances.attribute(m_attIndex).numValues();  newDistribution=new Distribution(numAttValues,trainInstances.numClasses());  Enumeration<Instance> enu=trainInstances.enumerateInstances();  while (enu.hasMoreElements()) {    instance=enu.nextElement();    if (!instance.isMissing(m_attIndex)) {      newDistribution.add((int)instance.value(m_attIndex),instance);    }  }  m_distribution=newDistribution;  for (i=0; i < numAttValues; i++) {    if (Utils.grOrEq(newDistribution.perBag(i),m_minNoObj)) {      secondDistribution=new Distribution(newDistribution,i);      if (secondDistribution.check(m_minNoObj)) {        m_numSubsets=2;        currIG=m_infoGainCrit.splitCritValue(secondDistribution,m_sumOfWeights);        currGR=m_gainRatioCrit.splitCritValue(secondDistribution,m_sumOfWeights,currIG);        if ((i == 0) || Utils.gr(currGR,m_gainRatio)) {          m_gainRatio=currGR;          m_infoGain=currIG;          m_splitPoint=i;          m_distribution=secondDistribution;        }      }    }  }}  }
class C{  public void startPreview(){  if (camera != null && !previewing) {    camera.startPreview();    previewing=true;  }}  }
class C{  public void addIscsiInitiatorIpAddress(java.lang.String param){  if (localIscsiInitiatorIpAddress == null) {    localIscsiInitiatorIpAddress=new java.lang.String[]{};  }  localIscsiInitiatorIpAddressTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localIscsiInitiatorIpAddress);  list.add(param);  this.localIscsiInitiatorIpAddress=(java.lang.String[])list.toArray(new java.lang.String[list.size()]);}  }
class C{  protected DrmEvent(int uniqueId,int type,String message,HashMap<String,Object> attributes){  mUniqueId=uniqueId;  mType=type;  if (null != message) {    mMessage=message;  }  if (null != attributes) {    mAttributes=attributes;  }}  }
class C{  private BOSHMessageEvent(final Object source,final AbstractBody cBody){  super(source);  if (cBody == null) {    throw (new IllegalArgumentException("message body may not be null"));  }  body=cBody;}  }
class C{  public Request(Code code,Type type){  super(type);  this.code=code;}  }
class C{  public AccountHeaderBuilder withHeaderBackground(Drawable headerBackground){  this.mHeaderBackground=new ImageHolder(headerBackground);  return this;}  }
class C{  private static Map<String,Boolean> objectMethodsToGenerate(List<ExecutableElement> methods){  Map<String,Boolean> vars=new TreeMap<String,Boolean>();  vars.put("equals",false);  vars.put("hashCode",false);  vars.put("toString",false);  for (  ExecutableElement method : methods) {    if (isToStringOrEqualsOrHashCode(method)) {      boolean canGenerate=method.getModifiers().contains(Modifier.ABSTRACT) || isJavaLangObject((TypeElement)method.getEnclosingElement());      vars.put(method.getSimpleName().toString(),canGenerate);    }  }  assert vars.size() == 3;  return vars;}  }
class C{  @Deprecated public static boolean isTest(String className){  try {    Class<?> clazz=TestGenerationContext.getInstance().getClassLoaderForSUT().loadClass(className);    Class<?> superClazz=clazz.getSuperclass();    while (!superClazz.equals(Object.class)) {      if (superClazz.equals(Suite.class))       return true;      if (superClazz.equals(Test.class))       return true;      superClazz=clazz.getSuperclass();    }    for (    Method method : clazz.getMethods()) {      if (method.isAnnotationPresent(Test.class)) {        return true;      }    }  } catch (  ClassNotFoundException e) {    logger.info("Could not load class: ",className);  }  return false;}  }
class C{  public void close() throws XMLStreamException {  this.endDocument();  this.writer.close();}  }
class C{  public static ClassNode[] make(Class[] classes){  ClassNode[] cns=new ClassNode[classes.length];  for (int i=0; i < cns.length; i++) {    cns[i]=make(classes[i]);  }  return cns;}  }
class C{  private void addInternalListeners(){  cbDistribution.addItemListener(cbItemListener);}  }
class C{  public static MaxRowExpression max(String propertyOne,String propertyTwo,String... moreProperties){  return new MaxRowExpression(propertyOne,propertyTwo,moreProperties);}  }
class C{  public boolean implies(Permission p){  return (p instanceof CryptoPermission);}  }
class C{  public void addCircle(final float x,final float y,final float radius){  if (this.isDisposed()) {    SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);  }  this.addArc(x,y,radius,radius,0,360);}  }
class C{  public void search(){  String searchString;  searchString=ComponentHelper.showInputBox(getParent(),"Search...","Enter the string to search for",m_LastSearch);  if (searchString != null) {    m_LastSearch=searchString;  }  getTable().setSearchString(searchString);}  }
class C{  public void testOneNodeEvents() throws Throwable {  testEvents(1);}  }
class C{  private SimpleClassTypeSignature parseSimpleClassTypeSignature(boolean dollar){  String id=parseIdentifier();  char c=current();switch (c) {case ';':case '.':    return SimpleClassTypeSignature.make(id,dollar,new TypeArgument[0]);case '<':  return SimpleClassTypeSignature.make(id,dollar,parseTypeArguments());default :throw error("expected '<' or ';' or '.', got '" + c + "'.");}}  }
class C{  private CActionLogger(){}  }
class C{  public void remove(final Channel channel){synchronized (channels) {    for (final Iterator chanIter=channels.iterator(); chanIter.hasNext(); ) {      if (chanIter.next() == channel) {        chanIter.remove();        break;      }    }  }}  }
class C{  public boolean isBoundsInGrid(){  return boundsInGrid;}  }
class C{  public boolean closeDrawerIfOpen(){  if (this.drawer.isDrawerOpen()) {    this.drawer.closeDrawer();    return true;  }  return false;}  }
class C{  @Override public void process(final DM dm,final ReplyProcessor21 processor){  final long startTime=getTimestamp();  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"{} process invoking reply processor with processorId: {}",getClass().getName(),this.processorId);  }  if (processor == null) {    if (logger.isTraceEnabled(LogMarker.DM)) {      logger.trace(LogMarker.DM,"{} processor not found",getClass().getName());    }    return;  }  processor.process(this);  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"{} processed {}",processor,this);  }  dm.getStats().incReplyMessageTime(DistributionStats.getStatTime() - startTime);}  }
class C{  public static String formatUTC(Date date){  return DATE_FORMATTER.get().format(date);}  }
class C{  @Override protected PfScanRawMatch buildMatchObject(String sequenceIdentifier,String model,String signatureLibraryRelease,int seqStart,int seqEnd,String cigarAlign,Double score,ProfileScanRawMatch.Level profileLevel,PatternScanMatch.PatternScanLocation.Level patternLevel){  return new ProSitePatternRawMatch(sequenceIdentifier,model,signatureLibraryRelease,seqStart,seqEnd,cigarAlign,patternLevel);}  }
class C{  private String toString(String spacing){  String str=spacing;  if (!isTextElement()) {    str+="<" + getTagName();    Hashtable attributes=getAttributes();    if (attributes != null) {      for (Enumeration e=attributes.keys(); e.hasMoreElements(); ) {        Integer attrKey=(Integer)e.nextElement();        String attrStr=getAttributeName(attrKey);        String val=(String)attributes.get(attrKey);        str+=" " + attrStr + "='"+ val+ "' ("+ attrKey+ ")";      }    }    str+=">\n";    Vector children=getChildren();    if (children != null) {      for (int i=0; i < children.size(); i++) {        str+=((HTMLElement)children.elementAt(i)).toString(spacing + ' ');      }    }    str+=spacing + "</" + getTagName()+ ">\n";  } else {    str+="'" + getText() + "'\n";  }  return str;}  }
class C{  protected synchronized void shutdownWriter(){  final Writer writer=m_output;  m_output=null;  try {    if (null != writer) {      writer.close();    }  } catch (  final IOException ioe) {    getErrorHandler().error("Error closing Writer",ioe,null);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  protected void init(Filter src,Map props){  init(src);  if (props != null) {    this.props.putAll(props);  }}  }
class C{  public ShardId shardId(){  return this.shardId;}  }
class C{  public static void registerDefaultAlgorithms(){  canonicalizerHash.put(Canonicalizer.ALGO_ID_C14N_OMIT_COMMENTS,Canonicalizer20010315OmitComments.class);  canonicalizerHash.put(Canonicalizer.ALGO_ID_C14N_WITH_COMMENTS,Canonicalizer20010315WithComments.class);  canonicalizerHash.put(Canonicalizer.ALGO_ID_C14N_EXCL_OMIT_COMMENTS,Canonicalizer20010315ExclOmitComments.class);  canonicalizerHash.put(Canonicalizer.ALGO_ID_C14N_EXCL_WITH_COMMENTS,Canonicalizer20010315ExclWithComments.class);  canonicalizerHash.put(Canonicalizer.ALGO_ID_C14N11_OMIT_COMMENTS,Canonicalizer11_OmitComments.class);  canonicalizerHash.put(Canonicalizer.ALGO_ID_C14N11_WITH_COMMENTS,Canonicalizer11_WithComments.class);  canonicalizerHash.put(Canonicalizer.ALGO_ID_C14N_PHYSICAL,CanonicalizerPhysical.class);}  }
class C{  private static double tanQ(double xa,double xb,boolean cotanFlag){  int idx=(int)((xa * 8.0) + 0.5);  final double epsilon=xa - EIGHTHS[idx];  final double sintA=SINE_TABLE_A[idx];  final double sintB=SINE_TABLE_B[idx];  final double costA=COSINE_TABLE_A[idx];  final double costB=COSINE_TABLE_B[idx];  double sinEpsA=epsilon;  double sinEpsB=polySine(epsilon);  final double cosEpsA=1.0;  final double cosEpsB=polyCosine(epsilon);  double temp=sinEpsA * HEX_40000000;  double temp2=(sinEpsA + temp) - temp;  sinEpsB+=sinEpsA - temp2;  sinEpsA=temp2;  double a=0;  double b=0;  double t=sintA;  double c=a + t;  double d=-(c - a - t);  a=c;  b+=d;  t=costA * sinEpsA;  c=a + t;  d=-(c - a - t);  a=c;  b+=d;  b+=sintA * cosEpsB + costA * sinEpsB;  b+=sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;  double sina=a + b;  double sinb=-(sina - a - b);  a=b=c=d=0.0;  t=costA * cosEpsA;  c=a + t;  d=-(c - a - t);  a=c;  b+=d;  t=-sintA * sinEpsA;  c=a + t;  d=-(c - a - t);  a=c;  b+=d;  b+=costB * cosEpsA + costA * cosEpsB + costB * cosEpsB;  b-=sintB * sinEpsA + sintA * sinEpsB + sintB * sinEpsB;  double cosa=a + b;  double cosb=-(cosa - a - b);  if (cotanFlag) {    double tmp;    tmp=cosa;    cosa=sina;    sina=tmp;    tmp=cosb;    cosb=sinb;    sinb=tmp;  }  double est=sina / cosa;  temp=est * HEX_40000000;  double esta=(est + temp) - temp;  double estb=est - esta;  temp=cosa * HEX_40000000;  double cosaa=(cosa + temp) - temp;  double cosab=cosa - cosaa;  double err=(sina - esta * cosaa - esta * cosab - estb * cosaa - estb * cosab) / cosa;  err+=sinb / cosa;  err+=-sina * cosb / cosa / cosa;  if (xb != 0.0) {    double xbadj=xb + est * est * xb;    if (cotanFlag) {      xbadj=-xbadj;    }    err+=xbadj;  }  return est + err;}  }
class C{  public void addExtension(MessageExtension extension) throws MessageException {  addExtension(extension,null);}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  public OutputStream put(String key) throws FileNotFoundException {  return new xFileOutputStream(mCache.newFile(key));}  }
class C{  protected ILaunchConfiguration createNewLaunchConfiguration(IResource resource,String startupUrl,boolean isExternal,boolean isGwtSuperDevModeEnabled) throws CoreException, OperationCanceledException {  String initialName=calculateLaunchConfigName(startupUrl,isExternal,resource);  ILaunchManager manager=DebugPlugin.getDefault().getLaunchManager();  String launchConfigName=manager.generateLaunchConfigurationName(initialName);  IProject project=resource.getProject();  ILaunchConfigurationWorkingCopy wc=WebAppLaunchUtil.createLaunchConfigWorkingCopy(launchConfigName,project,startupUrl,isExternal,isGwtSuperDevModeEnabled);  ILaunchConfiguration toReturn=wc.doSave();  return toReturn;}  }
class C{  public void init(Environment env,Instances structure){  m_matchS=m_match;  m_labelS=m_label;  String attsToApplyToS=m_attsToApplyTo;  try {    m_matchS=env.substitute(m_matchS);    m_labelS=env.substitute(m_labelS);    attsToApplyToS=env.substitute(attsToApplyToS);  } catch (  Exception ex) {  }  if (m_regex) {    String match=m_matchS;    if (m_ignoreCase) {      match=match.toLowerCase();    }    m_regexPattern=Pattern.compile(match);  }  String tempRangeS=attsToApplyToS;  tempRangeS=tempRangeS.replace("/first","first").replace("/last","last");  Range tempR=new Range();  tempR.setRanges(attsToApplyToS);  try {    tempR.setUpper(structure.numAttributes() - 1);    m_selectedAtts=tempR.getSelection();  } catch (  IllegalArgumentException ex) {    m_selectedAtts=null;  }  if (m_selectedAtts == null) {    Set<Integer> indexes=new HashSet<Integer>();    String[] attParts=m_attsToApplyTo.split(",");    for (    String att : attParts) {      att=att.trim();      if (att.toLowerCase().equals("/first")) {        indexes.add(0);      } else       if (att.toLowerCase().equals("/last")) {        indexes.add((structure.numAttributes() - 1));      } else {        if (structure.attribute(att) != null) {          indexes.add(new Integer(structure.attribute(att).index()));        } else {          if (m_logger != null) {            String msg=m_statusMessagePrefix + "Can't find attribute '" + att+ "in the incoming instances - ignoring";            m_logger.logMessage(msg);          }        }      }    }    m_selectedAtts=new int[indexes.size()];    int c=0;    for (    Integer i : indexes) {      m_selectedAtts[c++]=i.intValue();    }  }  Set<Integer> indexes=new HashSet<Integer>();  for (  int m_selectedAtt : m_selectedAtts) {    if (structure.attribute(m_selectedAtt).isString()) {      indexes.add(m_selectedAtt);    } else {      if (m_logger != null) {        String msg=m_statusMessagePrefix + "Attribute '" + structure.attribute(m_selectedAtt).name()+ "is not a string attribute - "+ "ignoring";        m_logger.logMessage(msg);      }    }  }  m_selectedAtts=new int[indexes.size()];  int c=0;  for (  Integer i : indexes) {    m_selectedAtts[c++]=i.intValue();  }}  }
class C{  public static void ensureVirtualizedHere(@SuppressWarnings("unused") Object object){}  }
class C{  private void handleEnumeratedAttribute(Instances trainInstances) throws Exception {  Instance instance;  m_distribution=new Distribution(m_complexityIndex,trainInstances.numClasses());  Enumeration<Instance> enu=trainInstances.enumerateInstances();  while (enu.hasMoreElements()) {    instance=enu.nextElement();    if (!instance.isMissing(m_attIndex)) {      m_distribution.add((int)instance.value(m_attIndex),instance);    }  }  if (m_distribution.check(m_minNoObj)) {    m_numSubsets=m_complexityIndex;    m_infoGain=infoGainCrit.splitCritValue(m_distribution,m_sumOfWeights);    m_gainRatio=gainRatioCrit.splitCritValue(m_distribution,m_sumOfWeights,m_infoGain);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:36.222 -0500",hash_original_method="2778A952D34B60D93ADEBF86D42CFB13",hash_generated_method="4D3FFF57EEE098A69A3D7ED6CE9A016A") @DSSink(DSSinkKind.DATABASE) public boolean putLong(long value,int row,int column){  this.addTaint(value);  return true;}  }
class C{  public void close() throws IOException {  rrdFile.close();}  }
class C{  public TableEntry(SSOProtocol ssoProtocol,IBurpExtenderCallbacks callbacks){  this.callbacks=callbacks;  this.helpers=callbacks.getHelpers();  this.counter="" + ssoProtocol.getCounter();  this.protocol=ssoProtocol.getProtocol();  this.fullMessage=callbacks.saveBuffersToTempFiles(ssoProtocol.getMessage());  this.host=helpers.analyzeRequest(this.fullMessage).getUrl().getHost();  this.method=helpers.analyzeRequest(this.fullMessage).getMethod();  this.url=helpers.analyzeRequest(this.fullMessage).getUrl().getPath();  this.token=ssoProtocol.getToken();  LocalTime t=LocalTime.now();  this.timestamp=t;  this.time=t.toString().substring(0,t.toString().length() - 4);  this.length=(new Integer(this.fullMessage.getResponse().length)).toString();  this.comment=this.fullMessage.getComment();  this.ssoProtocol=ssoProtocol;}  }
class C{  java.sql.Time toSqlTime(Calendar calendar){  return new java.sql.Time(getTimeInMillis(calendar));}  }
class C{  private static void initTestFile(File blah) throws Exception {  FileOutputStream fos=new FileOutputStream(blah);  BufferedWriter awriter=new BufferedWriter(new OutputStreamWriter(fos,"8859_1"));  for (int i=0; i < 4; i++) {    String number=new Integer(i).toString();    for (int h=0; h < 4 - number.length(); h++)     awriter.write("0");    awriter.write("" + i);    awriter.newLine();  }  awriter.flush();  awriter.close();}  }
class C{  public static void copyResource(String classPathLocation,Path targetFile) throws IOException {  Files.createDirectories(targetFile.getParent());  try (InputStream inputStream=TestResources.class.getResourceAsStream(classPathLocation)){    Files.copy(inputStream,targetFile);  } }  }
class C{  public void deleteRESTExportMask(StorageSystem storage,URI exportMaskURI,List<URI> volumeURIList,List<URI> targetURIList,List<Initiator> initiatorList,TaskCompleter taskCompleter){  try {    ExportMask exportMask=_dbClient.queryObject(ExportMask.class,exportMaskURI);    final String storageIP=storage.getSmisProviderIP();    final String exportType=ExportMaskUtils.getExportType(_dbClient,exportMask);    final String name=exportMask.getNativeId();    final StringSet emInitiatorURIs=exportMask.getInitiators();    final StringMap emVolumeURIs=exportMask.getVolumes();    XIVRestClient restExportOpr=getRestClient(storage);    Set<URI> hostURIs=new HashSet<URI>();    if (null != emVolumeURIs) {      Iterator<Entry<String,String>> emVolumeURIItr=emVolumeURIs.entrySet().iterator();      while (emVolumeURIItr.hasNext()) {        URI volUri=URI.create(emVolumeURIItr.next().getKey());        if (URIUtil.isType(volUri,Volume.class)) {          Volume volume=_dbClient.queryObject(Volume.class,volUri);          restExportOpr.unExportVolume(storageIP,exportType,name,volume.getLabel());        }      }    }    if (null != emInitiatorURIs) {      for (      String initiatorURI : emInitiatorURIs) {        Initiator initiator=_dbClient.queryObject(Initiator.class,URI.create(initiatorURI));        Host host=_dbClient.queryObject(Host.class,initiator.getHost());        hostURIs.add(host.getId());        String normalizedPort=Initiator.normalizePort(initiator.getInitiatorPort());        restExportOpr.deleteHostPort(storageIP,host.getLabel(),normalizedPort,initiator.getProtocol().toLowerCase(),false);      }    }    for (    URI hostURI : hostURIs) {      Host host=_dbClient.queryObject(Host.class,hostURI);      boolean hostDeleted=restExportOpr.deleteHost(storageIP,host.getLabel(),false);      if (hostDeleted && emVolumeURIs.size() > 0) {        unsetTag(host,storage.getSerialNumber());      }    }    if (ExportGroup.ExportGroupType.Cluster.name().equals(exportType)) {      restExportOpr.deleteCluster(storageIP,name);    }    ExportUtils.cleanupAssociatedMaskResources(_dbClient,exportMask);    exportMask.setMaskName(NullColumnValueGetter.getNullURI().toString());    exportMask.setLabel(NullColumnValueGetter.getNullURI().toString());    exportMask.setNativeId(NullColumnValueGetter.getNullURI().toString());    exportMask.setResource(NullColumnValueGetter.getNullURI().toString());    _dbClient.updateObject(exportMask);    taskCompleter.ready(_dbClient);  } catch (  Exception e) {    _log.error("Unexpected error: deleteExportMask failed.",e);    ServiceError error=XIVRestException.exceptions.methodFailed("createExportMask",e);    taskCompleter.error(_dbClient,error);  }}  }
class C{  public static void main(String... args) throws IOException {  String inFile=null, outFile=null;  for (int i=0; i < args.length; i++) {    if (args[i].equals("-in")) {      inFile=args[++i];    } else     if (args[i].equals("-out")) {      outFile=args[++i];    }  }  if (args.length == 0) {    outFile="-";  }  if (outFile == null) {    outFile=inFile + ".clean.txt";  }  PrintWriter writer;  if ("-".equals(outFile)) {    writer=new PrintWriter(System.out);  } else {    writer=new PrintWriter(new BufferedWriter(new FileWriter(outFile)));  }  Reader r;  if (inFile != null) {    r=new FileReader(inFile);  } else {    r=new InputStreamReader(System.in);  }  new ThreadDumpCleaner().run(new LineNumberReader(new BufferedReader(r)),writer);  writer.close();  r.close();}  }
class C{  public void testNextIntBadBounds(){  SplittableRandom sr=new SplittableRandom();  Runnable[] throwingActions={null,null,null};  assertThrows(IllegalArgumentException.class,throwingActions);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:55.698 -0400",hash_original_method="42D1827311BA67664F99FFEEA46CA725",hash_generated_method="738AD6FF9BCD206654511A42FC430A73") public Iterator<String> keyIterator(){  return mAttributes.keySet().iterator();}  }
class C{  public synchronized int size(){  return count;}  }
class C{  private String readStringV2() throws IOException {  int stringLength=in.readInt();  byte[] encodedString=IOUtil.readBytes(in,stringLength);  if (encodedString.length != stringLength) {    throw new EOFException("Attempted to read " + stringLength + " bytes but no more than "+ encodedString.length+ " were available");  }  ByteBuffer byteBuf=ByteBuffer.wrap(encodedString);  CharBuffer charBuf=charsetDecoder.decode(byteBuf);  return charBuf.toString();}  }
class C{  public int countRuns(){  verifyValidParaOrLine();  BidiLine.getRuns(this);  return runCount;}  }
class C{  public void rowChanged(boolean save,int keyID){  if (m_tree == null || keyID <= 0)   return;  String name=(String)m_mTab.getValue("Name");  String description=(String)m_mTab.getValue("Description");  Boolean IsSummary=(Boolean)m_mTab.getValue("IsSummary");  boolean summary=IsSummary != null && IsSummary.booleanValue();  String imageIndicator=(String)m_mTab.getValue("Action");  m_tree.nodeChanged(save,keyID,name,description,summary,imageIndicator);}  }
class C{  public InvocationTargetException(@Nullable Throwable target,@Nullable String s){  super(s,null);  this.target=target;}  }
class C{  public void postOnWallWithImage(Context context,String tagIdSelected,String latitude,String longitude,String message,String imagepath,String groupId,String keywords,String wallId,boolean isEdit){  Intent intent=new Intent(context,WallPostIntentService.class);  intent.setAction(ACTION_POST);  if (isEdit) {    intent.putExtra(HttpConstants.UPDATE_POST,true);  } else {    intent.putExtra(HttpConstants.UPDATE_POST,false);  }  intent.putExtra(HttpConstants.POST_MESSAGE,message);  intent.putExtra(HttpConstants.POST_LATITUDE,latitude);  intent.putExtra(HttpConstants.POST_LONGITUDE,longitude);  intent.putExtra(HttpConstants.POST_TAG_ID,tagIdSelected);  intent.putExtra(HttpConstants.GROUP_ID,groupId);  intent.putExtra(HttpConstants.KEYWORDS,keywords);  intent.putExtra(HttpConstants.WALL_ID,wallId);  intent.putExtra(HttpConstants.POST_CITY,mCityName.split(",")[0]);  intent.putExtra(HttpConstants.POST_ADDRESS,mAddressName);  intent.putExtra(HttpConstants.POST_COUNTRY,mCountryName);  intent.putExtra(AppConstants.WALL_IMAGE_NAME,imagepath);  context.startService(intent);  getActivity().finish();}  }
class C{  public Explosion(Entity source,Location location,float power,boolean incendiary,boolean breakBlocks){  if (!(location.getWorld() instanceof GlowWorld)) {    throw new IllegalArgumentException("Supplied location does not have a valid GlowWorld");  }  this.source=source;  this.location=location.clone();  this.power=power;  this.incendiary=incendiary;  this.breakBlocks=breakBlocks;  world=(GlowWorld)location.getWorld();}  }
class C{  public Object parse(Map params,URL url){  return parseURL(url,params);}  }
class C{  public final Message obtainMessage(int what){  return Message.obtain(mSmHandler,what);}  }
class C{  protected void throwIfConflictOnCommit(LockRefreshToken commitLocksToken,TransactionService transactionService) throws TransactionConflictException {  for (  Entry<TableReference,ConcurrentNavigableMap<Cell,byte[]>> write : writesByTable.entrySet()) {    ConflictHandler conflictHandler=getConflictHandlerForTable(write.getKey());    throwIfWriteAlreadyCommitted(write.getKey(),write.getValue(),conflictHandler,commitLocksToken,transactionService);  }}  }
class C{  public boolean isDateTimeFilterToggled(){  return dateTimeFilter;}  }
class C{  public void keyPressed(KeyEvent e){  if (e.getKeyCode() == KeyEvent.VK_RIGHT) {    scroll(SCROLL_SIZE,0);  } else   if (e.getKeyCode() == KeyEvent.VK_LEFT) {    scroll(-SCROLL_SIZE,0);  } else   if (e.getKeyCode() == KeyEvent.VK_UP) {    scroll(0,-SCROLL_SIZE);  } else   if (e.getKeyCode() == KeyEvent.VK_DOWN) {    scroll(0,SCROLL_SIZE);  } else   if (e.getKeyCode() == KeyEvent.VK_C) {    useClip=!useClip;    System.out.println("useClip = " + useClip);  } else   if (e.getKeyCode() == KeyEvent.VK_A) {    useCopyArea=!useCopyArea;    prevVX=-10000;    System.out.println("useCopyArea = " + useCopyArea);  }}  }
class C{  public void printExpr(JCTree tree,int prec) throws IOException {  int prevPrec=this.prec;  try {    this.prec=prec;    if (tree == null)     print("/*missing*/"); else {      tree.accept(this);    }  } catch (  UncheckedIOException ex) {    IOException e=new IOException(ex.getMessage());    e.initCause(ex);    throw e;  } finally {    this.prec=prevPrec;  }}  }
class C{  public ExtendedNode insert(ExtendedNode n,ExtendedNode r){  if (r == null) {    return append(n);  }  if (r == firstChild) {    firstChild.setPreviousSibling(n);    n.setNextSibling(firstChild);    firstChild=n;    children++;    if (n.getNodeType() == Node.ELEMENT_NODE) {      elementChildren++;    }    return n;  }  if (r == lastChild) {    ExtendedNode ps=(ExtendedNode)r.getPreviousSibling();    ps.setNextSibling(n);    r.setPreviousSibling(n);    n.setNextSibling(r);    n.setPreviousSibling(ps);    children++;    if (n.getNodeType() == Node.ELEMENT_NODE) {      elementChildren++;    }    return n;  }  ExtendedNode ps=(ExtendedNode)r.getPreviousSibling();  if ((ps.getNextSibling() == r) && (ps.getParentNode() == r.getParentNode())) {    ps.setNextSibling(n);    n.setPreviousSibling(ps);    n.setNextSibling(r);    r.setPreviousSibling(n);    children++;    if (n.getNodeType() == Node.ELEMENT_NODE) {      elementChildren++;    }    return n;  }  throw createDOMException(DOMException.NOT_FOUND_ERR,"child.missing",new Object[]{new Integer(r.getNodeType()),r.getNodeName()});}  }
class C{  public void removeAllArguments(){  requestArguments=null;}  }
class C{  public void start(){  if (currentThread != null) {    log.error("Start with currentThread not null!");  }  currentThread=new Thread(this,name);  currentThread.start();  summary.register(this);  count=0;}  }
class C{  @Override public Enumeration<Register> enumerateVolatileFPRs(){  return new PhysicalRegisterEnumeration(FIRST_DOUBLE + FIRST_SCRATCH_FPR.value(),FIRST_DOUBLE + LAST_VOLATILE_FPR.value());}  }
class C{  public AccentedAtom(Atom base,String accentName) throws InvalidSymbolTypeException, SymbolNotFoundException {  accent=SymbolAtom.get(accentName);  if (accent.type == TeXConstants.TYPE_ACCENT) {    this.base=base;    if (base instanceof AccentedAtom)     underbase=((AccentedAtom)base).underbase; else     underbase=base;  } else   throw new InvalidSymbolTypeException("The symbol with the name '" + accentName + "' is not defined as an accent ("+ TeXSymbolParser.TYPE_ATTR+ "='acc') in '"+ TeXSymbolParser.RESOURCE_NAME+ "'!");}  }
class C{  public mat4 scale(float s){  float[] m=this.m;  m[0]*=s;  m[4]*=s;  m[8]*=s;  m[1]*=s;  m[5]*=s;  m[9]*=s;  m[2]*=s;  m[6]*=s;  m[10]*=s;  m[3]*=s;  m[7]*=s;  m[11]*=s;  return this;}  }
class C{  public void initialize(CordovaInterface cordova,CordovaWebView webView){}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MStatus[");  sb.append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  public CJKBigramFilter(TokenStream in,int flags,boolean outputUnigrams){  super(in);  doHan=(flags & HAN) == 0 ? NO : HAN_TYPE;  doHiragana=(flags & HIRAGANA) == 0 ? NO : HIRAGANA_TYPE;  doKatakana=(flags & KATAKANA) == 0 ? NO : KATAKANA_TYPE;  doHangul=(flags & HANGUL) == 0 ? NO : HANGUL_TYPE;  this.outputUnigrams=outputUnigrams;}  }
class C{  private JTextField createTextField(int width){  JTextField f=new JTextField(width);  f.setEditable(false);  f.setBorder(null);  return f;}  }
class C{  public static <T>IList<T> createWithoutCasting(final IType contentType,final Iterable<T> objects){  final IList<T> list=create(contentType);  Iterables.addAll(list,objects);  return list;}  }
class C{  public void changeAmmoType(AmmoType at){  if (!(type instanceof AmmoType)) {    System.out.println("Attempted to change ammo type of non-ammo");    return;  }  type=at;  typeName=at.getInternalName();  if (location == Entity.LOC_NONE) {    shotsLeft=1;  } else {    shotsLeft=at.getShots();  }}  }
class C{  public StageTaskGroup(Stage stage,int taskCount,StageProgressTracker tracker){  this.taskCount=taskCount;  this.stage=stage;  this.tracker=tracker;}  }
class C{  @Override public int intValue(){  return (int)value;}  }
class C{  private boolean startWorkflow(int AD_Workflow_ID){  log.fine(AD_Workflow_ID + " - " + m_pi);  boolean started=false;  if (m_IsServerProcess) {    Server server=CConnection.get().getServer();    try {      if (server != null) {        m_pi=server.workflow(Env.getRemoteCallCtx(Env.getCtx()),m_pi,AD_Workflow_ID);        log.finest("server => " + m_pi);        started=true;      }    } catch (    Exception ex) {      log.log(Level.SEVERE,"AppsServer error",ex);      started=false;    }  }  if (!started && !m_IsServerProcess) {    if (m_trx != null)     m_pi.setTransactionName(m_trx.getTrxName());    MWFProcess wfProcess=ProcessUtil.startWorkFlow(Env.getCtx(),m_pi,AD_Workflow_ID);    started=wfProcess != null;  }  return started;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.877 -0400",hash_original_method="2EB2F7E1142D1CB5BA89628A74895621",hash_generated_method="97B936CA93A748D93235A5B1430D80DF") public static IOFileFilter asFileFilter(FileFilter filter){  return new DelegateFileFilter(filter);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case RegularExpressionPackage.WORD_BOUNDARY__NOT:    return isNot();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  CrosshairOverlay clone=(CrosshairOverlay)super.clone();  clone.xCrosshairs=(List)ObjectUtilities.deepClone(this.xCrosshairs);  clone.yCrosshairs=(List)ObjectUtilities.deepClone(this.yCrosshairs);  return clone;}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder="";  String outputFolder="";  String workload="random";  String vmAllocationPolicy="lr";  String vmSelectionPolicy="mc";  String parameter="1.2";  new RandomRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  public synchronized void nextSolution(final int nQueryHandle){  if (!m_prologTable.containsKey(new Integer(nQueryHandle)))   throw new JIPInvalidHandleException();  final AsyncWAMManager container=(AsyncWAMManager)m_prologTable.get(new Integer(nQueryHandle));  if (container.isRunning()) {    throw new JIPIsRunningException();  }  notifyMore(nQueryHandle);synchronized (container) {    container.next();  }}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  @Override protected Node removeFromFrontier(){  cleanUpFrontier();  Node result=frontier.remove();  updateMetrics(frontier.size());  setExplored(result);  return result;}  }
class C{  private void cleanUpWriterResources(PathSharingContext ac){  if (asqatasunWriterProcessor != null) {    asqatasunWriterProcessor.setExtractorCSSListener(null);    asqatasunWriterProcessor.setContentWriter(null);    asqatasunWriterProcessor.setCssRegexp(null);    asqatasunWriterProcessor.setExtractorHTMLListener(null);    asqatasunWriterProcessor.setHtmlRegexp(null);    asqatasunWriterProcessor=null;  }}  }
class C{  public static ViewService newService(){  return new ViewServiceImpl();}  }
class C{  public boolean isLightWeightPopupEnabled(){  return lightWeightPopup;}  }
class C{  public MyPlotChangeListener(){  this.event=null;}  }
class C{  public static int min(int a,int b){  return 0;}  }
class C{  public File makeLauncher(String launcherName,List str) throws IOException {  HMCLog.log("Making shell launcher...");  service.version().onLaunch(options.getLaunchVersion());  boolean isWin=OS.os() == OS.WINDOWS;  File f=new File(launcherName + (isWin ? ".bat" : ".sh"));  if (!f.exists() && !f.createNewFile())   HMCLog.warn("Failed to create " + f);  BufferedWriter writer;  try {    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(f),System.getProperty("sun.jnu.encoding","UTF-8")));  } catch (  UnsupportedEncodingException ex) {    HMCLog.warn("Failed to create writer, will try again.",ex);    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(f)));  }  if (isWin) {    writer.write("@echo off");    writer.newLine();    String appdata=IOUtils.tryGetCanonicalFilePath(service.baseDirectory());    if (appdata != null) {      writer.write("set appdata=" + appdata);      writer.newLine();      writer.write("cd /D %appdata%");      writer.newLine();    }  }  if (StrUtils.isNotBlank(options.getPrecalledCommand())) {    writer.write(options.getPrecalledCommand());    writer.newLine();  }  writer.write(StrUtils.makeCommand(str));  writer.close();  if (!f.setExecutable(true)) {    HMCLog.warn("Failed to give launcher permission.");    MessageBox.Show(C.i18n("launch.failed_sh_permission"));  }  HMCLog.log("Command: " + StrUtils.parseParams("",str," "));  return f;}  }
class C{  public Request<List<BuilderStatus>> builds(ProjectReference projectReference){  final Invocation request=getWebTarget().path(projectReference.workspaceId()).path("builds").queryParam("project",projectReference.name()).request().accept(APPLICATION_JSON).buildGet();  Type collectionType=new TypeToken<List<DefaultBuilderStatus>>(){  }.getType();  return new SimpleRequest<>(request,new GenericType<List<BuilderStatus>>(collectionType){  },getAuthenticationManager());}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public void clearResults(){  this.resultList.clear();}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @NonNull private CharSequence formatComment(Comment comment,boolean includeName){  String content=StringUtils.fromHtml(context,comment.getContent()).toString();  if (TextUtils.isEmpty(content) && comment.getAttachedImages() != null && comment.getAttachedImages().size() > 0) {    content=context.getString(R.string.notification_has_attached_image);  }  if (includeName && comment.getAuthor() != null) {    SpannableString sb=new SpannableString(String.format("%s  %s",comment.getAuthor(),content));    sb.setSpan(new StyleSpan(Typeface.BOLD),0,comment.getAuthor().length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);    return sb;  } else {    return content;  }}  }
class C{  BasicInterval addRange(RegisterAllocatorState regAllocState,LiveIntervalElement live,BasicBlock bb){  if (shouldConcatenate(regAllocState,live,bb)) {    BasicInterval last=last();    last.setEnd(regAllocState.getDfnEnd(live,bb));    return null;  } else {    BasicInterval newInterval=new MappedBasicInterval(regAllocState.getDfnBegin(live,bb),regAllocState.getDfnEnd(live,bb),this);    add(newInterval);    return newInterval;  }}  }
class C{  public void moveInFrontOfParentContainers(Block block){  if (block.getContainer() instanceof WrappedContainer) {    Block parent=((WrappedContainer)block.getContainer()).getWrapper();    int childIndex=this.bottomLayer.getChildren().indexOf(block);    int parentIndex=this.bottomLayer.getChildren().indexOf(parent);    if (childIndex < parentIndex && childIndex >= 0) {      this.bottomLayer.getChildren().remove(block);      this.bottomLayer.getChildren().add(parentIndex,block);      new ArrayList<>(this.bottomLayer.getChildren().subList(childIndex,parentIndex - 1)).stream().filter(null).forEach(null);    }  }}  }
class C{  public static SizeResponse send(Set recipients,PartitionedRegion r,ArrayList<Integer> bucketIds,boolean estimate){  Assert.assertTrue(recipients != null,"SizeMessage NULL recipients set");  SizeResponse p=new SizeResponse(r.getSystem(),recipients);  SizeMessage m=new SizeMessage(recipients,r.getPRId(),p,bucketIds,estimate);  r.getDistributionManager().putOutgoing(m);  return p;}  }
class C{  @Override public void onBasicPaymentProductsCallComplete(BasicPaymentProducts basicPaymentProducts){  for (  BasicPaymentProduct paymentProduct : basicPaymentProducts.getBasicPaymentProducts()) {    cacheBasicPaymentItem(paymentProduct);  }}  }
class C{  private static int skipWhiteSpace(BitArray row) throws NotFoundException {  int width=row.getSize();  int endStart=row.getNextSet(0);  if (endStart == width) {    throw NotFoundException.getNotFoundInstance();  }  return endStart;}  }
class C{  @Override protected EClass eStaticClass(){  return ImPackage.Literals.STRING_LITERAL_FOR_STE;}  }
class C{  protected void assertAnimateLayouts(View view,Runnable trigger){  Scheduler foregroundScheduler=ShadowApplication.getInstance().getForegroundThreadScheduler();  boolean wasPaused=foregroundScheduler.isPaused();  if (!wasPaused) {    foregroundScheduler.pause();  }  assertThat(view).isGone();  trigger.run();  assertThat(view).isVisible();  Animation animation=view.getAnimation();  assertNotNull(animation);  assertThat(animation.getStartTime()).isLessThanOrEqualTo(AnimationUtils.currentAnimationTimeMillis());  assertThat(animation).hasStartOffset(0);  foregroundScheduler.unPause();  assertThat(view).isGone();  if (wasPaused) {    foregroundScheduler.pause();  }}  }
class C{  public synchronized void parse(final Reader reader,final String baseURI) throws IOException, RDFParseException, RDFHandlerException {  if (reader == null) {    throw new IllegalArgumentException("Reader can not be 'null'");  }  if (baseURI == null) {    throw new IllegalArgumentException("base URI can not be 'null'");  }  rdfHandler.startRDF();  this.reader=new PushbackReader(reader,1);  lineNo=1;  reportLocation(lineNo,1);  push(new State());  try {    int c=reader.read();    c=skipWhitespace(c);    while (c != -1) {      if (c == '#') {        c=skipLine(c);      } else       if (c == '\r' || c == '\n') {        c=skipLine(c);      } else {        c=parseTriple(c,false);      }      c=skipWhitespace(c);    }  }  finally {    clear();  }  rdfHandler.endRDF();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public void closeInbound() throws SSLException {  if (logger != null) {    logger.println("closeInbound() " + isInboundDone);  }  if (isInboundDone) {    return;  }  isInboundDone=true;  engine_was_closed=true;  if (handshake_started) {    if (!close_notify_was_received) {      if (session != null) {        session.invalidate();      }      alertProtocol.alert(AlertProtocol.FATAL,AlertProtocol.INTERNAL_ERROR);      throw new SSLException("Inbound is closed before close_notify " + "alert has been received.");    }  } else {    shutdown();  }}  }
class C{  @Override public IBinder onBind(Intent intent){  return null;}  }
class C{  private boolean isSubtypeOf(String supertype){  String implementorName=SignatureUtil.stripSignatureToFQN(signature);  if (implementorName.length() == 0)   return false;  boolean qualified=supertype.indexOf('.') != -1;  if (implementorName.equals(supertype) || !qualified && Signature.getSimpleName(implementorName).equals(supertype))   return true;  return false;}  }
class C{  void updateResources(){  final Context context=mContext;  final Resources res=context.getResources();  CustomTheme newTheme=res.getConfiguration().customTheme;  if (newTheme != null && (mCurrentTheme == null || !mCurrentTheme.equals(newTheme))) {    mCurrentTheme=(CustomTheme)newTheme.clone();    recreateStatusBar();  } else {    if (mClearButton instanceof TextView) {      ((TextView)mClearButton).setText(context.getText(R.string.status_bar_clear_all_button));    }    loadDimens();  }  if (mQS != null)   mQS.updateResources();}  }
class C{  public void dcbt(){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public String toString(){  return s_name;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void write(CharSequence data,Writer output) throws IOException {  if (data != null) {    write(data.toString(),output);  }}  }
class C{  public double distanceSq(final java.awt.geom.Point2D p){  final double dx=(double)this.x - p.getX();  final double dy=(double)this.y - p.getY();  return (dx * dx + dy * dy);}  }
class C{  public boolean test(Instances data,int fromIndex,int toIndex){  if (doNotCheckCapabilities()) {    return true;  }  int i;  int n;  int m;  Attribute att;  Instance inst;  boolean testClass;  Capabilities cap;  boolean missing;  Iterator<Capability> iter;  if (!m_InstancesTest) {    return true;  }  if ((m_Capabilities.size() == 0) || ((m_Capabilities.size() == 1) && handles(Capability.NO_CLASS))) {    System.err.println(createMessage("No capabilities set!"));  }  if (toIndex - fromIndex < 0) {    m_FailReason=new WekaException(createMessage("No attributes!"));    return false;  }  testClass=(data.classIndex() > -1) && (data.classIndex() >= fromIndex) && (data.classIndex() <= toIndex);  for (i=fromIndex; i <= toIndex; i++) {    att=data.attribute(i);    if (i == data.classIndex()) {      continue;    }    if (!test(att)) {      return false;    }  }  if (!handles(Capability.NO_CLASS) && (data.classIndex() == -1)) {    m_FailReason=new UnassignedClassException(createMessage("Class attribute not set!"));    return false;  }  if (handles(Capability.NO_CLASS) && (data.classIndex() > -1)) {    cap=getClassCapabilities();    cap.disable(Capability.NO_CLASS);    iter=cap.capabilities();    if (!iter.hasNext()) {      m_FailReason=new WekaException(createMessage("Cannot handle any class attribute!"));      return false;    }  }  if (testClass && !handles(Capability.NO_CLASS)) {    att=data.classAttribute();    if (!test(att,true)) {      return false;    }    if (m_MissingClassValuesTest) {      if (!handles(Capability.MISSING_CLASS_VALUES)) {        for (i=0; i < data.numInstances(); i++) {          if (data.instance(i).classIsMissing()) {            m_FailReason=new WekaException(createMessage("Cannot handle missing class values!"));            return false;          }        }      } else {        if (m_MinimumNumberInstancesTest) {          int hasClass=0;          for (i=0; i < data.numInstances(); i++) {            if (!data.instance(i).classIsMissing()) {              hasClass++;            }          }          if (hasClass < getMinimumNumberInstances()) {            m_FailReason=new WekaException(createMessage("Not enough training instances with class labels (required: " + getMinimumNumberInstances() + ", provided: "+ hasClass+ ")!"));            return false;          }        }      }    }  }  if (m_MissingValuesTest) {    if (!handles(Capability.MISSING_VALUES)) {      missing=false;      for (i=0; i < data.numInstances(); i++) {        inst=data.instance(i);        if (inst instanceof SparseInstance) {          for (m=0; m < inst.numValues(); m++) {            n=inst.index(m);            if (n < fromIndex) {              continue;            }            if (n > toIndex) {              break;            }            if (n == inst.classIndex()) {              continue;            }            if (inst.isMissing(n)) {              missing=true;              break;            }          }        } else {          for (n=fromIndex; n <= toIndex; n++) {            if (n == inst.classIndex()) {              continue;            }            if (inst.isMissing(n)) {              missing=true;              break;            }          }        }        if (missing) {          m_FailReason=new NoSupportForMissingValuesException(createMessage("Cannot handle missing values!"));          return false;        }      }    }  }  if (m_MinimumNumberInstancesTest) {    if (data.numInstances() < getMinimumNumberInstances()) {      m_FailReason=new WekaException(createMessage("Not enough training instances (required: " + getMinimumNumberInstances() + ", provided: "+ data.numInstances()+ ")!"));      return false;    }  }  if (handles(Capability.ONLY_MULTIINSTANCE)) {    if (data.numAttributes() != 3) {      m_FailReason=new WekaException(createMessage("Incorrect Multi-Instance format, must be 'bag-id, bag, class'!"));      return false;    }    if (!data.attribute(0).isNominal() || !data.attribute(1).isRelationValued() || (data.classIndex() != data.numAttributes() - 1)) {      m_FailReason=new WekaException(createMessage("Incorrect Multi-Instance format, must be 'NOMINAL att, RELATIONAL att, CLASS att'!"));      return false;    }    if (getOwner() instanceof MultiInstanceCapabilitiesHandler) {      MultiInstanceCapabilitiesHandler handler=(MultiInstanceCapabilitiesHandler)getOwner();      cap=handler.getMultiInstanceCapabilities();      boolean result;      if (data.numInstances() > 0 && data.attribute(1).numValues() > 0) {        result=cap.test(data.attribute(1).relation(0));      } else {        result=cap.test(data.attribute(1).relation());      }      if (!result) {        m_FailReason=cap.m_FailReason;        return false;      }    }  }  return true;}  }
class C{  public void clearHttpAuthUsernamePassword(){  throw new MustOverrideException();}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null)   return false;  if (getClass() != obj.getClass())   return false;  AttachmentPoint other=(AttachmentPoint)obj;  if (port != other.port)   return false;  if (sw != other.sw)   return false;  return true;}  }
class C{  public Long zadd(final String key,final double score,final String member){  checkIsInMulti();  client.zadd(key,score,member);  return client.getIntegerReply();}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public RDFFormat(String name,Collection<String> mimeTypes,Charset charset,Collection<String> fileExtensions,IRI standardURI,boolean supportsNamespaces,boolean supportsContexts){  super(name,mimeTypes,charset,fileExtensions);  this.standardURI=standardURI;  this.supportsNamespaces=supportsNamespaces;  this.supportsContexts=supportsContexts;}  }
class C{  public static LastModFrom parse(final String s){  try {    return valueOf(s.toUpperCase(Locale.ROOT));  } catch (  Exception e) {    log.warn("Unrecognized value for lastModFrom: " + s,e);    return BOGUS;  }}  }
class C{  @Override public boolean connectionAllowed(String eventName){  if (!eventName.equals("instance")) {    return false;  }  if (m_listenee != null) {    return false;  }  return true;}  }
class C{  public static void launchChat(Context context){  Intent intent=new Intent(context,ConversationActivity.class);  context.startActivity(intent);}  }
class C{  public void flap(MowzieModelRenderer box,float speed,float degree,boolean invert,float offset,float weight,float f,float f1){  int inverted=1;  if (invert)   inverted=-1;  box.rotateAngleZ+=MathHelper.cos(f * speed + offset) * degree * inverted* f1 + weight * f1;}  }
class C{  @SuppressWarnings("unchecked") public void testDefaultExclusion() throws IOException {  MixedBean bean=new MixedBean();  StringWriter sw=new StringWriter();  ObjectMapper mapper=new ObjectMapper();  mapper.writerWithView(ViewA.class).writeValue(sw,bean);  Map<String,Object> map=mapper.readValue(sw.toString(),Map.class);  assertEquals(2,map.size());  assertEquals("1",map.get("a"));  assertEquals("2",map.get("b"));  mapper=new ObjectMapper();  mapper.configure(SerializationConfig.Feature.DEFAULT_VIEW_INCLUSION,false);  String json=mapper.writerWithView(ViewA.class).writeValueAsString(bean);  map=mapper.readValue(json,Map.class);  assertEquals(1,map.size());  assertEquals("1",map.get("a"));  assertNull(map.get("b"));}  }
class C{  public byte byteValue(){  return 0;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.GETTER_DECLARATION__DECLARED_TYPE_REF:    setDeclaredTypeRef((TypeRef)newValue);  return;case N4JSPackage.GETTER_DECLARATION__BOGUS_TYPE_REF:setBogusTypeRef((TypeRef)newValue);return;case N4JSPackage.GETTER_DECLARATION__DEFINED_GETTER:setDefinedGetter((TGetter)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void testComputeSignificanceDoesntAlterAverage(TransferEntropyCalculator teCalc,int timeSteps,int k) throws Exception {  System.out.printf("Testing significance doesn't alter average");  teCalc.initialise(k);  RandomGenerator rg=new RandomGenerator();  double[] sourceData=rg.generateNormalData(timeSteps,0,1);  double[] destData=rg.generateNormalData(timeSteps,0,1);  teCalc.setObservations(sourceData,destData);  double te=teCalc.computeAverageLocalOfObservations();  System.out.printf("Average was %.5f\n",te);  int[][] newOrderings=rg.generateDistinctRandomPerturbations(timeSteps - k,100);  teCalc.computeSignificance(newOrderings);  for (int i=0; i < 10; i++) {    double averageCheck1=teCalc.computeAverageLocalOfObservations();    assertEquals(te,averageCheck1);  }}  }
class C{  public JCheckBox(){  this(null,null,false);}  }
class C{  private void launchExplicitIntentForResult(){  Bundle bundle=new Bundle();  bundle.putInt("number",10);  bundle.putString("text","This is text sent from MainActivity");  Intent i=new Intent(MainActivity.this,Main2Activity.class);  i.putExtra("bundle",bundle);  i.putExtra("type","result");  startActivityForResult(i,100);}  }
class C{  public static String[] splitAtLineEndChar(String text){  String rep=StringStyle.replaceNotEscaped(text,"\\n","\n");  if (rep.contains("\n")) {    String[] split=rep.split("\n");    return split;  }  return new String[]{text};}  }
class C{  @DSSink({DSSinkKind.PHONE_CONNECTION}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:26.736 -0500",hash_original_method="29B8FEA7830E2BBE9C7BBFD69E48646E",hash_generated_method="34B3C845585366C8DB83B5DC6D722767") public void addApnContextSync(ApnContext apnContext){  Message response=sendMessageSynchronously(REQ_ADD_APNCONTEXT,apnContext);  if ((response != null) && (response.what == RSP_ADD_APNCONTEXT)) {    if (DBG)     log("addApnContext ok");  } else {    log("addApnContext error response=" + response);  }}  }
class C{  public NoReferenceTypes(){  super(Options.set,"No Reference Types","Should reference type processing be disabled?",false);}  }
class C{  @Override public Object clone(){  try {    ZipEntry result=(ZipEntry)super.clone();    result.extra=extra != null ? extra.clone() : null;    return result;  } catch (  CloneNotSupportedException e) {    throw new AssertionError(e);  }}  }
class C{  public static void deleteNode(final INaviView view,final INaviViewNode node){  Preconditions.checkNotNull(view,"IE01730: View argument can not be null");  Preconditions.checkNotNull(node,"IE01731: Node argument can not be null");  view.getContent().deleteNode(node);}  }
class C{  public static void main(String args[]){  File sourceDir=getSourceDir(args,0);  File destDir=getDestDir(args);  File localesDir=getLocalesDir(args,2);  String extensions=getExtensions(args,3);  try {    List<String> exts=new ArrayList<String>();    exts.add(".lng");    ExtensionsFileFilter localesFilter=new ExtensionsFileFilter(exts);    File[] translationFiles=localesDir.listFiles(localesFilter);    if (translationFiles == null || translationFiles.length == 0) {      ConcurrentLog.info("TranslateAll","No translation file found in " + localesDir);    } else {      ConcurrentLog.info("TranslateAll","Translating " + extensions + " files from "+ sourceDir+ " to "+ destDir+ " using all locale files in "+ localesDir);      for (      File translationFile : translationFiles) {        String localeCode=translationFile.getName().substring(0,translationFile.getName().length() - exts.get(0).length());        File localeDestDir=new File(destDir,localeCode);        localeDestDir.mkdirs();        new Translator().translateFilesRecursive(sourceDir,localeDestDir,translationFile,extensions,"locale");      }    }  }  finally {    ConcurrentLog.shutdown();  }}  }
class C{  @Override public int read() throws IOException {  if (closed) {    throw new FormItem.ItemSkippedException();  }  if (available() == 0 && makeAvailable() == 0) {    return -1;  }  ++total;  int b=buffer[head++];  if (b >= 0) {    return b;  }  return b + BYTE_POSITIVE_OFFSET;}  }
class C{  public static Dop dopFor(Insn insn){  Rop rop=insn.getOpcode();  Dop result=MAP.get(rop);  if (result != null) {    return result;  }switch (rop.getOpcode()) {case RegOps.MOVE_EXCEPTION:    return Dops.MOVE_EXCEPTION;case RegOps.INVOKE_STATIC:  return Dops.INVOKE_STATIC;case RegOps.INVOKE_VIRTUAL:return Dops.INVOKE_VIRTUAL;case RegOps.INVOKE_SUPER:return Dops.INVOKE_SUPER;case RegOps.INVOKE_DIRECT:return Dops.INVOKE_DIRECT;case RegOps.INVOKE_INTERFACE:return Dops.INVOKE_INTERFACE;case RegOps.NEW_ARRAY:return Dops.NEW_ARRAY;case RegOps.FILLED_NEW_ARRAY:return Dops.FILLED_NEW_ARRAY;case RegOps.FILL_ARRAY_DATA:return Dops.FILL_ARRAY_DATA;case RegOps.MOVE_RESULT:{RegisterSpec resultReg=insn.getResult();if (resultReg == null) {return Dops.NOP;} else {switch (resultReg.getBasicType()) {case Type.BT_INT:case Type.BT_FLOAT:case Type.BT_BOOLEAN:case Type.BT_BYTE:case Type.BT_CHAR:case Type.BT_SHORT:return Dops.MOVE_RESULT;case Type.BT_LONG:case Type.BT_DOUBLE:return Dops.MOVE_RESULT_WIDE;case Type.BT_OBJECT:return Dops.MOVE_RESULT_OBJECT;default :{throw new RuntimeException("Unexpected basic type");}}}}case RegOps.GET_FIELD:{CstFieldRef ref=(CstFieldRef)((ThrowingCstInsn)insn).getConstant();int basicType=ref.getBasicType();switch (basicType) {case Type.BT_BOOLEAN:return Dops.IGET_BOOLEAN;case Type.BT_BYTE:return Dops.IGET_BYTE;case Type.BT_CHAR:return Dops.IGET_CHAR;case Type.BT_SHORT:return Dops.IGET_SHORT;case Type.BT_INT:return Dops.IGET;}break;}case RegOps.PUT_FIELD:{CstFieldRef ref=(CstFieldRef)((ThrowingCstInsn)insn).getConstant();int basicType=ref.getBasicType();switch (basicType) {case Type.BT_BOOLEAN:return Dops.IPUT_BOOLEAN;case Type.BT_BYTE:return Dops.IPUT_BYTE;case Type.BT_CHAR:return Dops.IPUT_CHAR;case Type.BT_SHORT:return Dops.IPUT_SHORT;case Type.BT_INT:return Dops.IPUT;}break;}case RegOps.GET_STATIC:{CstFieldRef ref=(CstFieldRef)((ThrowingCstInsn)insn).getConstant();int basicType=ref.getBasicType();switch (basicType) {case Type.BT_BOOLEAN:return Dops.SGET_BOOLEAN;case Type.BT_BYTE:return Dops.SGET_BYTE;case Type.BT_CHAR:return Dops.SGET_CHAR;case Type.BT_SHORT:return Dops.SGET_SHORT;case Type.BT_INT:return Dops.SGET;}break;}case RegOps.PUT_STATIC:{CstFieldRef ref=(CstFieldRef)((ThrowingCstInsn)insn).getConstant();int basicType=ref.getBasicType();switch (basicType) {case Type.BT_BOOLEAN:return Dops.SPUT_BOOLEAN;case Type.BT_BYTE:return Dops.SPUT_BYTE;case Type.BT_CHAR:return Dops.SPUT_CHAR;case Type.BT_SHORT:return Dops.SPUT_SHORT;case Type.BT_INT:return Dops.SPUT;}break;}case RegOps.CONST:{Constant cst=((ThrowingCstInsn)insn).getConstant();if (cst instanceof CstType) {return Dops.CONST_CLASS;} else if (cst instanceof CstString) {return Dops.CONST_STRING;}break;}}throw new RuntimeException("unknown rop: " + rop);}  }
class C{  private Evidence(){  evidenceCollector=EvidenceCollector.self();  device=Device.self();  progressive=-1;  timestamp=new Date();}  }
class C{  public void addListener(RunListener listener){  notifier.addListener(listener);}  }
class C{  @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){  if (mWebView != null) {    mWebView.destroy();  }  mWebView=new WebView(getActivity());  mIsWebViewAvailable=true;  return mWebView;}  }
class C{  public Vector3 nor(){  float len=this.len();  if (len == 0) {    return this;  } else {    return this.div(len);  }}  }
class C{  public boolean hasMoney(){  return hasRepeatingExtension(Money.class);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static RArgsValuesAndNames matchArgumentsEvaluated(RRootNode target,RArgsValuesAndNames evaluatedArgs,S3DefaultArguments s3DefaultArguments,boolean forNextMethod,RBaseNode callingNode){  FormalArguments formals=target.getFormalArguments();  MatchPermutation match=permuteArguments(evaluatedArgs.getSignature(),formals.getSignature(),callingNode,forNextMethod,null,null,null);  Object[] evaledArgs=new Object[match.resultPermutation.length];  for (int formalIndex=0; formalIndex < match.resultPermutation.length; formalIndex++) {    int suppliedIndex=match.resultPermutation[formalIndex];    if (suppliedIndex == MatchPermutation.VARARGS) {      int varArgsLen=match.varargsPermutation.length;      Object[] newVarArgs=new Object[varArgsLen];      boolean nonNull=false;      for (int i=0; i < varArgsLen; i++) {        newVarArgs[i]=evaluatedArgs.getArguments()[match.varargsPermutation[i]];        nonNull|=newVarArgs[i] != null;      }      if (nonNull) {        evaledArgs[formalIndex]=new RArgsValuesAndNames(newVarArgs,match.varargsSignature);      } else {        evaledArgs[formalIndex]=RArgsValuesAndNames.EMPTY;      }    } else     if (suppliedIndex == MatchPermutation.UNMATCHED || evaluatedArgs.getArgument(suppliedIndex) == null) {      Object defaultValue=getS3DefaultArgumentValue(s3DefaultArguments,formals,formalIndex);      if (defaultValue == null) {        defaultValue=formals.getInternalDefaultArgumentAt(formalIndex);      }      evaledArgs[formalIndex]=defaultValue;    } else {      evaledArgs[formalIndex]=evaluatedArgs.getArgument(suppliedIndex);    }  }  return new RArgsValuesAndNames(evaledArgs,formals.getSignature());}  }
class C{  public boolean isMigrationAllowed(){  return migrationAllowed;}  }
class C{  public static void writeSingleByte(OutputStream out,int b) throws IOException {  byte[] buffer=new byte[1];  buffer[0]=(byte)(b & 0xff);  out.write(buffer);}  }
class C{  protected CommentCollectingScannerFactory(Context context){  super(context);}  }
class C{  @Override protected void onConfigurationChanged(Configuration newConfig){  super.onConfigurationChanged(newConfig);  if (navBarCanMove()) {    setup();  }}  }
class C{  protected byte readByteProtected(DataInputStream istream) throws java.io.IOException {  while (true) {    int nchars;    nchars=istream.read(rcvBuffer,0,1);    if (nchars > 0) {      return rcvBuffer[0];    }  }}  }
class C{  public int headState(){  if (getSignalHead() == null) {    return 0;  } else {    return getSignalHead().getAppearance();  }}  }
class C{  protected void processBuildingAttributeToDetermineTable(final ObjectMap<String,String> attributes,final ObjectSet<String> processedAttributes,final LmlActorBuilder builder){  final LmlSyntax syntax=getParser().getSyntax();  for (  final Entry<String,String> attribute : attributes) {    final LmlBuildingAttribute<LmlActorBuilder> buildingAttribute=syntax.getBuildingAttributeProcessor(builder,attribute.key);    if (buildingAttribute != null) {      buildingAttribute.process(getParser(),getParent(),builder,attribute.value);      processedAttributes.add(attribute.key);    }  }}  }
class C{  public void testBug24840() throws Exception {  Properties props=new Properties();  props.setProperty("characterEncoding","US-ASCII");  getConnectionWithProps(props).close();}  }
class C{  public double filter(double x){  double retval=sections.get(0).filter(x);  for (int i=1; i < sections.size(); i++)   retval=sections.get(i).filter(retval);  return retval;}  }
class C{  public void countNulledReference(){  numNulledReferences+=1;}  }
class C{  public static String str(Object value){  return new PrettyStringBuilder().toPrettyString(value);}  }
class C{  static String visibleFieldFromField(String realmClass,String field){  ensureInit();  String value=realmClass + "$" + field;  if (INSTANCE.flatVisFieldToFlatField.containsValue(value)) {    for (    Map.Entry<String,String> entry : INSTANCE.flatVisFieldToFlatField.entrySet()) {      if (entry.getValue().equals(value))       return stripKey(entry.getKey());    }  }  ClassData classData=getClassData();  FieldData fieldData=classData.getFieldData(realmClass);  StringBuilder builder=new StringBuilder();  String[] parts=FLAT_SEP_PATTERN.split(field);  for (int i=0; i < parts.length; i++) {    builder.append(fieldData.visibleNameOf(parts[i]));    if (i < parts.length - 1) {      builder.append(VIS_FLAT_SEP);      if (fieldData.isRealmListType(parts[i])) {        fieldData=classData.getFieldData(fieldData.realmListType(parts[i]));      } else {        fieldData=classData.getFieldData((Class<? extends RealmModel>)fieldData.fieldType(parts[i]));      }    }  }  String key=builder.toString();  INSTANCE.flatVisFieldToFlatField.put(realmClass + KEY_SEP + key,value);  return key;}  }
class C{  public static void deleteCollection(String host,String collection) throws Exception {  String deleteCollectionTemplate="http://%s:%s/solr/admin/collections?action=DELETE&name=%s";  String deleteCollectionCommand=String.format(deleteCollectionTemplate,host,DEFAULT_SOLR_PORT,collection);  executeSolrCommand(deleteCollectionCommand);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr attribute;  String version="";  String version1="1.0";  String version2="2.0";  String featureCore;  String featureXML;  boolean success;  java.util.List featuresXML=new java.util.ArrayList();  featuresXML.add("XML");  featuresXML.add("xmL");  java.util.List featuresCore=new java.util.ArrayList();  featuresCore.add("Core");  featuresCore.add("CORE");  doc=(Document)load("staffNS",false);  attribute=doc.createAttribute("TestAttr");  for (int indexN10064=0; indexN10064 < featuresXML.size(); indexN10064++) {    featureXML=(String)featuresXML.get(indexN10064);    success=attribute.isSupported(featureXML,version);    assertTrue("nodeissupported02_XML1",success);    success=attribute.isSupported(featureXML,version1);    assertTrue("nodeissupported02_XML2",success);  }  for (int indexN1007D=0; indexN1007D < featuresCore.size(); indexN1007D++) {    featureCore=(String)featuresCore.get(indexN1007D);    success=attribute.isSupported(featureCore,version);    assertTrue("nodeissupported02_Core1",success);    success=attribute.isSupported(featureCore,version1);    success=attribute.isSupported(featureCore,version2);    assertTrue("nodeissupported02_Core3",success);  }}  }
class C{  public void defineHeight(int motionType,int startTime,int duration,int start,int end){  height=createMotion(motionType,startTime,duration,start,end);}  }
class C{  public int checkIndexingCF(IndexAndCf indexAndCf,boolean toConsole) throws ConnectionException {  int corruptRowCount=0;  String indexCFName=indexAndCf.cf.getName();  Map<String,ColumnFamily<String,CompositeColumnName>> objCfs=getDataObjectCFs();  _log.info("Start checking the index CF {}",indexCFName);  Map<ColumnFamily<String,CompositeColumnName>,Map<String,List<IndexEntry>>> objsToCheck=new HashMap<>();  ColumnFamilyQuery<String,IndexColumnName> query=indexAndCf.keyspace.prepareQuery(indexAndCf.cf);  OperationResult<Rows<String,IndexColumnName>> result=query.getAllRows().setRowLimit(dbClient.DEFAULT_PAGE_SIZE).withColumnRange(new RangeBuilder().setLimit(dbClient.DEFAULT_PAGE_SIZE).build()).execute();  for (  Row<String,IndexColumnName> row : result.getResult()) {    ColumnList<IndexColumnName> columns=row.getColumns();    for (    Column<IndexColumnName> column : columns) {      ObjectEntry objEntry=extractObjectEntryFromIndex(row.getKey(),column.getName(),indexAndCf.indexType,toConsole);      if (objEntry == null) {        continue;      }      ColumnFamily<String,CompositeColumnName> objCf=objCfs.get(objEntry.getClassName());      if (objCf == null) {        logMessage(String.format("DataObject does not exist for %s",row.getKey()),true,toConsole);        continue;      }      Map<String,List<IndexEntry>> objKeysIdxEntryMap=objsToCheck.get(objCf);      if (objKeysIdxEntryMap == null) {        objKeysIdxEntryMap=new HashMap<>();        objsToCheck.put(objCf,objKeysIdxEntryMap);      }      List<IndexEntry> idxEntries=objKeysIdxEntryMap.get(objEntry.getObjectId());      if (idxEntries == null) {        idxEntries=new ArrayList<>();        objKeysIdxEntryMap.put(objEntry.getObjectId(),idxEntries);      }      idxEntries.add(new IndexEntry(row.getKey(),column.getName()));    }    if (getObjsSize(objsToCheck) >= INDEX_OBJECTS_BATCH_SIZE) {      corruptRowCount+=processBatchIndexObjects(indexAndCf,toConsole,objsToCheck);    }  }  corruptRowCount+=processBatchIndexObjects(indexAndCf,toConsole,objsToCheck);  return corruptRowCount;}  }
class C{  public void store(DataOutput os) throws IOException {  os.writeInt(cells.size());  Iterator<Character> i=cells.keySet().iterator();  for (; i.hasNext(); ) {    Character c=i.next();    Cell e=at(c);    if (e.cmd < 0 && e.ref < 0) {      continue;    }    os.writeChar(c.charValue());    os.writeInt(e.cmd);    os.writeInt(e.cnt);    os.writeInt(e.ref);    os.writeInt(e.skip);  }}  }
class C{  boolean sameClass(String cfn){  String s=cfn;  int i=s.lastIndexOf(".class");  if (i > 0) {    s=s.substring(0,i);  }  if (s.compareTo(toString()) == 0)   return true;  return false;}  }
class C{  public void normal(){  mHintView.setVisibility(View.VISIBLE);  mProgressBar.setVisibility(View.GONE);}  }
class C{  int numChildren(){  return this.children.size();}  }
class C{  public Crossfader withBaseLayout(@LayoutRes int baseLayout){  this.mBaseLayout=baseLayout;  return this;}  }
class C{  private void addExtensions(){  ExtensionProfile extensionProfile=getExtensionProfile();  GoogleBaseNamespaces.declareAllExtensions(extensionProfile);  BatchUtils.declareExtensions(extensionProfile);}  }
class C{  public static Builder builder(final Context context){  return new Builder(context);}  }
class C{  public void removeAutos(){  removeAutos(false);}  }
class C{  void verifyExceptionCaptured(Class<? extends Throwable> expectedExceptionClass){  assertTrue("Excpected exception not thrown",exceptionEventCapture.hasCaptured());  Throwable caughtEx=exceptionEventCapture.getValue().getCause();  assertEquals(expectedExceptionClass,caughtEx.getClass());  exceptionEventCapture.reset();}  }
class C{  public static String cleanUrl(String url){  if (url.startsWith("/")) {    return url.substring(1,url.length());  }  return url;}  }
class C{  public void invokeCommandLocally(NodeCommand command){switch (command.com) {case NodeCommand.CLEANALL:    wipeClean(((Long)command.pars[0]).longValue());  break;}}  }
class C{  public Builder busyloop(boolean busyloop){  this.busyloop=busyloop;  return this;}  }
class C{  public HexTileset(){}  }
class C{  private Shape createEllipseInternal(int x,int y,int w,int h){  ellipse.setFrame(x,y,w,h);  return ellipse;}  }
class C{  public void error(int id,int code,String msg){  String symbol="N/A";  BrokerModelException brokerModelException=null;  if (m_contractRequests.containsKey(id)) {    symbol=m_contractRequests.get(id).getSymbol();  }  if (m_historyDataRequests.containsKey(id)) {    Tradestrategy tradestrategy=m_historyDataRequests.get(id);    symbol=tradestrategy.getContract().getSymbol();    if (code == 162) {      symbol=tradestrategy.getContract().getSymbol() + " pacing violation Tradingday: " + tradestrategy.getTradingday().getOpen()+ " BarSize: "+ tradestrategy.getBarSize()+ " ChartDays: "+ tradestrategy.getChartDays()+ "  \n"+ "The following conditions can cause a pacing violation: \n"+ "1/ Making identical historical data requests within 15 seconds. \n"+ "2/ Making six or more historical data requests for the same Contract, Exchange and Tick Type within two seconds. \n"+ "3/ Making more than 60 historical data requests in any ten-minute period.  \n";    }synchronized (m_historyDataRequests) {      m_historyDataRequests.remove(id);      m_historyDataRequests.notify();    }  }  if (m_realTimeBarsRequests.containsKey(id)) {    symbol=m_realTimeBarsRequests.get(id).getSymbol();  }  if (m_marketDataRequests.containsKey(id)) {    symbol=m_marketDataRequests.get(id).getSymbol();  }  String errorMsg="Req/Order Id: " + id + " Code: "+ code+ " Symbol: "+ symbol+ " Msg: "+ msg;  if (((code > 1999) && (code < 3000)) || ((code >= 200) && (code < 299)) || (code == 366)|| (code == 162)|| (code == 321)|| (code == 3170)) {    if (((code > 1999) && (code < 3000))) {      _log.info(errorMsg);      brokerModelException=new BrokerModelException(3,code,errorMsg);    } else     if (code == 202 || code == 201 || code == 3170) {      _log.warn(errorMsg);      brokerModelException=new BrokerModelException(2,code,errorMsg);    } else     if (code == 321) {      _log.info(errorMsg);      return;    } else {      _log.warn(errorMsg);      brokerModelException=new BrokerModelException(2,code,errorMsg);    }  } else {    if (m_realTimeBarsRequests.containsKey(id)) {synchronized (m_realTimeBarsRequests) {        m_realTimeBarsRequests.remove(id);      }    }    if (m_marketDataRequests.containsKey(id)) {synchronized (m_marketDataRequests) {        m_marketDataRequests.remove(id);      }    }    _log.error(errorMsg);    brokerModelException=new BrokerModelException(1,code,errorMsg);  }  this.fireBrokerError(brokerModelException);  if (502 == code) {    this.fireConnectionClosed(false);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected void processpacket_down(SimEvent ev){  NetworkPacket hspkt=(NetworkPacket)ev.getData();  int recvVMid=hspkt.pkt.reciever;  CloudSim.cancelAll(getId(),new PredicateType(CloudSimTags.Network_Event_send));  schedule(getId(),latency,CloudSimTags.Network_Event_send);  if (level == NetworkConstants.EDGE_LEVEL) {    int hostid=dc.VmtoHostlist.get(recvVMid);    hspkt.recieverhostid=hostid;    List<NetworkPacket> pktlist=packetTohost.get(hostid);    if (pktlist == null) {      pktlist=new ArrayList<NetworkPacket>();      packetTohost.put(hostid,pktlist);    }    pktlist.add(hspkt);    return;  }  if (level == NetworkConstants.Agg_LEVEL) {    int switchid=dc.VmToSwitchid.get(recvVMid);    List<NetworkPacket> pktlist=downlinkswitchpktlist.get(switchid);    if (pktlist == null) {      pktlist=new ArrayList<NetworkPacket>();      downlinkswitchpktlist.put(switchid,pktlist);    }    pktlist.add(hspkt);    return;  }}  }
class C{  public URI csrfToken(){  URIBuilder builder=apiBuilder();  builder.setParameter("action","query");  builder.setParameter("meta","tokens");  builder.setParameter("continue","");  return build(builder);}  }
class C{  public void eventDispatched(AWTEvent event){  Object source=event.getSource();  if (event instanceof KeyEvent && source instanceof Component) {    if ((SwingUtilities.windowForComponent((Component)source) == _window)) {      ((KeyEvent)event).consume();    }  }}  }
class C{  @Override public String update(String xml){  try {    return query("/update?stream.body=" + URLEncoder.encode(xml,"UTF-8"));  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public static void process(ASTOperationContainer qc,String externalBaseURI) throws MalformedQueryException {  ParsedURI parsedBaseURI=null;  ASTBaseDecl baseDecl=qc.getBaseDecl();  if (baseDecl != null) {    parsedBaseURI=new ParsedURI(baseDecl.getIRI());    if (!parsedBaseURI.isAbsolute()) {      throw new MalformedQueryException("BASE IRI is not an absolute IRI: " + externalBaseURI);    }  } else   if (externalBaseURI != null) {    parsedBaseURI=new ParsedURI(externalBaseURI);    if (!parsedBaseURI.isAbsolute()) {      throw new IllegalArgumentException("Supplied base URI is not an absolute IRI: " + externalBaseURI);    }  } else {  }  if (parsedBaseURI != null) {    ASTUnparsedQuadDataBlock dataBlock=null;    if (qc.getOperation() instanceof ASTInsertData) {      ASTInsertData insertData=(ASTInsertData)qc.getOperation();      dataBlock=insertData.jjtGetChild(ASTUnparsedQuadDataBlock.class);    } else     if (qc.getOperation() instanceof ASTDeleteData) {      ASTDeleteData deleteData=(ASTDeleteData)qc.getOperation();      dataBlock=deleteData.jjtGetChild(ASTUnparsedQuadDataBlock.class);    }    if (dataBlock != null) {      final String baseURIDeclaration="BASE <" + parsedBaseURI + ">";      dataBlock.setDataBlock(baseURIDeclaration + dataBlock.getDataBlock());    } else {      RelativeIRIResolver visitor=new RelativeIRIResolver(parsedBaseURI);      try {        qc.jjtAccept(visitor,null);      } catch (      VisitorException e) {        throw new MalformedQueryException(e);      }    }  }}  }
class C{  private void paintForeground(SynthContext ctx,Graphics g,int x,int y,int w,int h,int orientation){  Component c=ctx.getComponent();  boolean ltr=c.getComponentOrientation().isLeftToRight();  if (orientation == SwingConstants.VERTICAL && ltr) {    AffineTransform transform=new AffineTransform();    transform.scale(-1,1);    transform.rotate(Math.toRadians(90));    paintForeground(ctx,g,y,x,h,w,transform);  } else   if (orientation == SwingConstants.VERTICAL) {    AffineTransform transform=new AffineTransform();    transform.rotate(Math.toRadians(90));    transform.translate(0,-(x + w));    paintForeground(ctx,g,y,0,h,w,transform);  } else   if (orientation == SwingConstants.HORIZONTAL && ltr) {    paintForeground(ctx,g,x,y,w,h,null);  } else {    paintForeground(ctx,g,x,y,w,h,null);  }}  }
class C{  public ZeroSizeThreadPool(){}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void send(final OutputStream os) throws IOException {  PacketOutputStream pos=(PacketOutputStream)os;  pos.startPacket(1);  pos.writeInt((int)this.clientCapabilities);  pos.writeInt((int)clientCapabilities).writeInt(1024 * 1024 * 1024).writeByte(serverLanguage);  pos.writeBytes((byte)0,19).writeInt((int)(clientCapabilities >> 32));  pos.finishPacketWithoutRelease(true);  pos.releaseBuffer();}  }
class C{  protected void addToMap(String commandName,CommandHandler<Session> cmdHandler){  List<CommandHandler<Session>> handlers=commandHandlerMap.get(commandName);  if (handlers == null) {    handlers=new ArrayList<CommandHandler<Session>>();    commandHandlerMap.put(commandName,handlers);  }  handlers.add(cmdHandler);}  }
class C{  protected String printElement() throws TranscoderException, XMLException, IOException {  char[] name=getCurrentValue();  String nameStr=new String(name);  List attributes=new LinkedList();  char[] space=null;  type=scanner.next();  while (type == LexicalUnits.S) {    space=getCurrentValue();    type=scanner.next();    if (type == LexicalUnits.NAME) {      char[] attName=getCurrentValue();      char[] space1=null;      type=scanner.next();      if (type == LexicalUnits.S) {        space1=getCurrentValue();        type=scanner.next();      }      if (type != LexicalUnits.EQ) {        throw fatalError("token",new Object[]{"="});      }      type=scanner.next();      char[] space2=null;      if (type == LexicalUnits.S) {        space2=getCurrentValue();        type=scanner.next();      }      if (type != LexicalUnits.STRING && type != LexicalUnits.FIRST_ATTRIBUTE_FRAGMENT) {        throw fatalError("string",null);      }      char valueDelim=scanner.getStringDelimiter();      boolean hasEntityRef=false;      StringBuffer sb=new StringBuffer();      sb.append(getCurrentValue());      loop:       for (; ; ) {        scanner.clearBuffer();        type=scanner.next();switch (type) {case LexicalUnits.STRING:case LexicalUnits.FIRST_ATTRIBUTE_FRAGMENT:case LexicalUnits.LAST_ATTRIBUTE_FRAGMENT:case LexicalUnits.ATTRIBUTE_FRAGMENT:          sb.append(getCurrentValue());        break;case LexicalUnits.CHARACTER_REFERENCE:      hasEntityRef=true;    sb.append("&#");  sb.append(getCurrentValue());sb.append(";");break;case LexicalUnits.ENTITY_REFERENCE:hasEntityRef=true;sb.append("&");sb.append(getCurrentValue());sb.append(";");break;default :break loop;}}attributes.add(new OutputManager.AttributeInfo(space,attName,space1,space2,new String(sb),valueDelim,hasEntityRef));space=null;}}output.printElementStart(name,attributes,space);switch (type) {default :throw fatalError("xml",null);case LexicalUnits.EMPTY_ELEMENT_END:output.printElementEnd(null,null);break;case LexicalUnits.END_CHAR:output.printCharacter('>');type=scanner.next();printContent(allowSpaceAtStart(nameStr));if (type != LexicalUnits.END_TAG) {throw fatalError("end.tag",null);}name=getCurrentValue();type=scanner.next();space=null;if (type == LexicalUnits.S) {space=getCurrentValue();type=scanner.next();}output.printElementEnd(name,space);if (type != LexicalUnits.END_CHAR) {throw fatalError("end",null);}}type=scanner.next();return nameStr;}  }
class C{  private boolean initSnappable(int x,int y){  if ((Math.abs(mOldParam[0] - x) > mSensitivity) || (Math.abs(mOldParam[1] - y) > mSensitivity)) {    mOldParam[0]=x;    mOldParam[1]=y;    discardTimeout();    return false;  }  mOldParam[0]=x;  mOldParam[1]=y;  int newSnapGravity=0;  if (x < mRange)   newSnapGravity=newSnapGravity | Gravity.LEFT;  if (x > (mScreenWidth - mRange))   newSnapGravity=newSnapGravity | Gravity.RIGHT;  if (y < mRange)   newSnapGravity=newSnapGravity | Gravity.TOP;  if (y > (mScreenHeight - mRange))   newSnapGravity=newSnapGravity | Gravity.BOTTOM;  mSnapWindowHolder.updateSnap(newSnapGravity);  return mSnapWindowHolder.isSnapped;}  }
class C{  public static Object tryParse(String value){  try {    return parseByDatatypeName(value,UUIDDatatype.NAME);  } catch (  Exception ignored) {  }  try {    return parseByDatatypeName(value,DateTimeDatatype.NAME);  } catch (  ParseException ignored) {  }  try {    return parseByDatatypeName(value,TimeDatatype.NAME);  } catch (  ParseException ignored) {  }  try {    return parseByDatatypeName(value,DateDatatype.NAME);  } catch (  ParseException ignored) {  }  try {    return parseByDatatypeName(value,BigDecimalDatatype.NAME);  } catch (  ParseException ignored) {  }  try {    return parseByDatatypeName(value,DoubleDatatype.NAME);  } catch (  ParseException ignored) {  }  try {    if (value.equalsIgnoreCase("true") || value.equalsIgnoreCase("false")) {      return parseByDatatypeName(value,BooleanDatatype.NAME);    }  } catch (  ParseException ignored) {  }  return value;}  }
class C{  @SuppressWarnings("unchecked") public EnumMap<K,V> clone(){  EnumMap<K,V> result=null;  try {    result=(EnumMap<K,V>)super.clone();  } catch (  CloneNotSupportedException e) {    throw new AssertionError();  }  result.vals=result.vals.clone();  result.entrySet=null;  return result;}  }
class C{  public T caseHistoryEntry(HistoryEntry object){  return null;}  }
class C{  public static void renderEPLAssignments(StringWriter writer,List<Assignment> assignments){  writer.write("set ");  String delimiter="";  for (  Assignment pair : assignments) {    writer.write(delimiter);    pair.getValue().toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);    delimiter=", ";  }}  }
class C{  void resetNoUserInteractionState(){  mDismissButton.setVisibility(View.INVISIBLE);}  }
class C{  public void updateDBSchemaToLatestVersion() throws Exception {  TESTDATABASE.purgeSchema();  TESTDATABASE.loadSchema(MAX_VERSION);}  }
class C{  private void cancelNotifications(String accountId,String roomId){  Log.d(LOG_TAG,"cancelNotifications " + accountId + " - "+ roomId);  if ((null != accountId) && (null != roomId)) {    Log.d(LOG_TAG,"cancelNotifications expected " + mNotificationSessionId + " - "+ mNotificationRoomId);    if (TextUtils.equals(mNotificationRoomId,roomId) && TextUtils.equals(accountId,mNotificationSessionId)) {      clearNotification();    }  }}  }
class C{  X509IssuerSerial(X500Principal issuer,BigInteger serial){  this.issuer=issuer;  this.serial=serial;}  }
class C{  public static void main(String args[]) throws PatternSyntaxException, IOException {  RegexURLNormalizer normalizer=new RegexURLNormalizer();  normalizer.setConf(NutchConfiguration.create());  HashMap<String,List<Rule>> scopedRules=normalizer.getScopedRules();  Iterator<Rule> i=normalizer.defaultRules.iterator();  System.out.println("* Rules for 'DEFAULT' scope:");  while (i.hasNext()) {    Rule r=i.next();    System.out.print("  " + r.pattern.pattern() + " -> ");    System.out.println(r.substitution);  }  if (args.length > 1) {    normalizer.normalize("http://test.com",args[1]);  }  if (scopedRules.size() > 1) {    Iterator<String> it=scopedRules.keySet().iterator();    while (it.hasNext()) {      String scope=it.next();      if (URLNormalizers.SCOPE_DEFAULT.equals(scope))       continue;      System.out.println("* Rules for '" + scope + "' scope:");      i=((List<Rule>)scopedRules.get(scope)).iterator();      while (i.hasNext()) {        Rule r=(Rule)i.next();        System.out.print("  " + r.pattern.pattern() + " -> ");        System.out.println(r.substitution);      }    }  }  if (args.length > 0) {    System.out.println("\n---------- Normalizer test -----------");    String scope=URLNormalizers.SCOPE_DEFAULT;    if (args.length > 1)     scope=args[1];    System.out.println("Scope: " + scope);    System.out.println("Input url:  '" + args[0] + "'");    System.out.println("Output url: '" + normalizer.normalize(args[0],scope) + "'");  }  System.exit(0);}  }
class C{  private Map<String,Integer> buildEntryColourMap(){  Map<String,Integer> map=new HashMap<String,Integer>();  for (  Map.Entry<Object,Object> entryColour : this.entryColourPropertiesFile.entrySet()) {    String entryAc=(String)entryColour.getKey();    int colour=Integer.parseInt((String)entryColour.getValue());    if (entryAc.startsWith("IPR")) {      map.put(entryAc,colour);    } else {      LOGGER.warn("Entry colours properties file contained an invalid entryAc - ignoring: " + entryAc);    }  }  return map;}  }
class C{  public static AppEventsLogger newLogger(Context context,String applicationId){  return new AppEventsLogger(context,applicationId,null);}  }
class C{  @Override public boolean isFactoryForType(Object object){  if (object == modelPackage) {    return true;  }  if (object instanceof EObject) {    return ((EObject)object).eClass().getEPackage() == modelPackage;  }  return false;}  }
class C{  public IncompleteAnnotationException(Class<? extends Annotation> annotationType,String elementName){  super("The element " + elementName + " is not complete for the annotation "+ annotationType.getName());  this.annotationType=annotationType;  this.elementName=elementName;}  }
class C{  public List<Node> listAvailableCrossoverNodes(Node node,Class<?> type){  List<Node> result=new ArrayList<Node>();  if (type.isAssignableFrom(node.getReturnType())) {    result.add(node);  }  for (int i=0; i < node.getNumberOfArguments(); i++) {    result.addAll(listAvailableCrossoverNodes(node.getArgument(i),type));  }  return result;}  }
class C{  private void checkForIPv6() throws Exception {  boolean preferIpV6Addr=Boolean.getBoolean("java.net.preferIPv6Addresses");  if (!preferIpV6Addr) {    logger.debug("forcing JGroups to think IPv4 is being used so it will choose an IPv4 address");    Field m=org.jgroups.util.Util.class.getDeclaredField("ip_stack_type");    m.setAccessible(true);    m.set(null,org.jgroups.util.StackType.IPv4);  }}  }
class C{  public static List seriesNameListFromDataArray(Object[][] data){  int seriesCount=data.length;  List seriesNameList=new java.util.ArrayList(seriesCount);  for (int i=0; i < seriesCount; i++) {    seriesNameList.add("Series " + (i + 1));  }  return seriesNameList;}  }
class C{  public Outlier(double xCoord,double yCoord,double radius){  this.point=new Point2D.Double(xCoord - radius,yCoord - radius);  this.radius=radius;}  }
class C{  public void cleanup(){  if (lineSource != null) {    try {      lineSource.close();    } catch (    Exception e) {    }  }  lineSource=null;  line=null;  number=0;}  }
class C{  public synchronized static void initClient(){  while (storageMap.isEmpty()) {    try {      InputStream is=getConfig(false);      parse(is);      LogFactory.info("Client initialization success...",StorageConfig.class);      break;    } catch (    Exception e) {      LogFactory.error("Client init failed:" + e.getMessage(),StorageConfig.class);      try {        Thread.sleep(10000);      } catch (      InterruptedException ex) {        break;      }    }  }}  }
class C{  public static RegExpExpression regexp(String property,String regExExpression){  return new RegExpExpression(getPropExpr(property),new ConstantExpression(regExExpression));}  }
class C{  private void sortChildren(final JCriteriumTreeNode parentNode){  final List<JCriteriumTreeNode> operators=new ArrayList<JCriteriumTreeNode>();  final List<JCriteriumTreeNode> conditions=new ArrayList<JCriteriumTreeNode>();  final List<JCriteriumTreeNode> minus=new ArrayList<JCriteriumTreeNode>();  final Enumeration<?> children=parentNode.children();  while (children.hasMoreElements()) {    final JCriteriumTreeNode child=(JCriteriumTreeNode)children.nextElement();    final ICriterium type=child.getCriterium();    if (type instanceof CConditionCriterium) {      conditions.add(child);    } else {      operators.add(child);    }  }  parentNode.removeAllChildren();  for (  final JCriteriumTreeNode child : operators) {    parentNode.add(child);    child.setParent(parentNode);  }  for (  final JCriteriumTreeNode child : conditions) {    parentNode.add(child);    child.setParent(parentNode);  }  for (  final JCriteriumTreeNode child : minus) {    parentNode.add(child);    child.setParent(parentNode);  }}  }
class C{  private static List<CoreLabel> toSequence(String sourceToken,List<String> targetTokens,int outputIndex){  StringBuilder sb=new StringBuilder();  for (  String s : targetTokens) {    if (sb.length() > 0)     sb.append(WHITESPACE);    sb.append(s);  }  String target=sb.toString();  int[] t2sGrid=alignStrings(sourceToken,target);  assert t2sGrid.length == target.length();  List<CoreLabel> sequence=new ArrayList<>(target.length());  int[] s2t=new int[sourceToken.length()];  Arrays.fill(s2t,-1);  int parentIndex=0;  int charIndex=0;  for (int i=0; i < t2sGrid.length; ++i) {    String tChar=String.valueOf(target.charAt(i));    if (tChar.equals(WHITESPACE)) {      ++parentIndex;      charIndex=-1;    }    String parentToken=parentIndex >= targetTokens.size() ? "#NoNe#" : targetTokens.get(parentIndex);    int sIndex=t2sGrid[i];    if (sIndex < 0) {      sequence.add(createDatum(tChar,Operation.Delete.toString(),i,parentToken,charIndex));    } else {      String sChar=String.valueOf(sourceToken.charAt(sIndex));      assert sIndex < s2t.length;      s2t[sIndex]=i;      if (tChar.equals(sChar) || TokenUtils.isPunctuation(sChar)) {        sequence.add(createDatum(tChar,Operation.None.toString(),i,parentToken,charIndex));      } else       if (tChar.equals(sChar.toLowerCase())) {        sequence.add(createDatum(tChar,Operation.ToUpper.toString(),i,parentToken,charIndex));      } else {        sequence.add(createDatum(tChar,Operation.None.toString(),i,parentToken,charIndex));      }    }    ++charIndex;  }  for (int i=0; i < s2t.length; ++i) {    if (s2t[i] >= 0)     continue;    int j=i + 1;    while (j < s2t.length && s2t[j] < 0)     ++j;    int p=i > 0 ? s2t[i - 1] : -1;    int q=j < s2t.length ? s2t[j] : -1;    String pLabel=p > 0 ? sequence.get(p).get(CoreAnnotations.GoldAnswerAnnotation.class) : null;    String qLabel=q > 0 ? sequence.get(q).get(CoreAnnotations.GoldAnswerAnnotation.class) : null;    Operation pOperation=null;    Operation qOperation=null;    try {      pOperation=pLabel == null ? null : Operation.valueOf(pLabel);    } catch (    Exception e) {    }    try {      qOperation=qLabel == null ? null : Operation.valueOf(qLabel);    } catch (    Exception e) {    }    if (pOperation != null && pOperation == Operation.None) {      String span=sourceToken.substring(i,j);      if (!TokenUtils.isPunctuation(span)) {        String label=Operation.InsertAfter.toString() + OP_DELIM + span;        sequence.get(p).set(CoreAnnotations.GoldAnswerAnnotation.class,label);      }    } else     if (qOperation == Operation.None) {      String span=sourceToken.substring(i,j);      if (!TokenUtils.isPunctuation(span)) {        String label=Operation.InsertBefore.toString() + OP_DELIM + span;        sequence.get(q).set(CoreAnnotations.GoldAnswerAnnotation.class,label);      }    } else {      if (Pattern.compile("\u00AD").matcher(sourceToken).find()) {      } else {        System.err.printf("WARNING: Unmanageable span (%s): %s -> %s%n",sourceToken.substring(i,j),sourceToken,target);      }    }  }  return sequence;}  }
class C{  public static List<AccessibilityNodeInfoCompat> searchAllFromBfs(Context context,AccessibilityNodeInfoCompat node,NodeFilter filter){  if (node == null) {    return null;  }  final List<AccessibilityNodeInfoCompat> toReturn=new ArrayList<AccessibilityNodeInfoCompat>();  final LinkedList<AccessibilityNodeInfoCompat> queue=new LinkedList<AccessibilityNodeInfoCompat>();  queue.add(AccessibilityNodeInfoCompat.obtain(node));  while (!queue.isEmpty()) {    final AccessibilityNodeInfoCompat item=queue.removeFirst();    if (filter.accept(context,item)) {      toReturn.add(AccessibilityNodeInfoCompat.obtain(item));    }    final int childCount=item.getChildCount();    for (int i=0; i < childCount; i++) {      final AccessibilityNodeInfoCompat child=item.getChild(i);      if (child != null) {        queue.addLast(child);      }    }  }  return toReturn;}  }
class C{  public void analyzeTrace(boolean verbose){  if (verbose) {    if (traces.length > 1)     System.out.println("Combining " + traces.length + " traces.");  }  Tree tree=getTree(0);  for (  TreeTrace trace : traces) {    int treeCount=trace.getTreeCount(burnin * trace.getStepSize());    double stepSize=treeCount / 60.0;    int counter=1;    if (verbose) {      System.out.println("Analyzing " + treeCount + " trees...");      System.out.println("0              25             50             75            100");      System.out.println("|--------------|--------------|--------------|--------------|");      System.out.print("*");    }    for (int i=1; i < treeCount; i++) {      tree=trace.getTree(i,burnin * trace.getStepSize());      addTree(tree);      if (i >= (int)Math.round(counter * stepSize) && counter <= 60) {        if (verbose) {          System.out.print("*");          System.out.flush();        }        counter+=1;      }    }    if (verbose) {      System.out.println("*");    }  }}  }
class C{  static BigDecimal resultScore(Audit audit){  Audit hydratedAudit=(Audit)Retriever.checkRetrieveChildren(audit);  ControlGroup topLevelControlGroup=hydratedAudit.getControlGroup();  topLevelControlGroup=(ControlGroup)Retriever.checkRetrieveChildren(topLevelControlGroup);  Set<SamtTopic> isaControls=new HashSet<>();  for (  CnATreeElement element : topLevelControlGroup.getChildren()) {    if (element instanceof ControlGroup) {      ControlGroup controlGroup=(ControlGroup)element;      controlGroup=(ControlGroup)Retriever.checkRetrieveChildren(controlGroup);      isaControls.addAll(getChildrenOfTypeIsaControl(controlGroup));    }  }  int accumulatedMaturity=0;  int count=0;  for (  SamtTopic isaControl : isaControls) {    isaControl=(SamtTopic)Retriever.checkRetrieveElement(isaControl);    int maturity=getMaturity(isaControl);    int targetMaturity=getTargetMaturity(isaControl);    if (maturity != Maturity.NOT_APPLICABLE.value()) {      if (maturity == Maturity.NOT_EDITED.value()) {        maturity=0;      }      if (maturity > targetMaturity) {        maturity=targetMaturity;      }      accumulatedMaturity+=maturity;      count++;    }  }  if (count == 0) {    return BigDecimal.ZERO;  }  return BigDecimal.valueOf(accumulatedMaturity).divide(BigDecimal.valueOf(count),SCALE,RoundingMode.HALF_UP);}  }
class C{  public static ResourceGroupState createDefaultResourceGroup(VerificationHost host,String projectId) throws Throwable {  ResourceGroupState resourceGroup=new ResourceGroupState();  resourceGroup.name=projectId;  return TestUtils.doPost(host,resourceGroup,ResourceGroupState.class,UriUtils.buildUri(host,ResourceGroupService.FACTORY_LINK));}  }
class C{  public ZipException(String s){  super(s);}  }
class C{  public ul addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void testViewAccess() throws Exception {  PreparedStatement ps=connection.prepareStatement("INSERT INTO test_blob_view(id, bin_data) VALUES (?, ?)");  for (int i=0; i < TEST_ROW_COUNT; i++) {    ps.setInt(1,i);    ps.setBytes(2,testData[i]);    ps.executeUpdate();  }  ps.close();  Statement stmt=connection.createStatement();  ResultSet rs=stmt.executeQuery("SELECT id, bin_data FROM test_blob_view");  try {    int counter=0;    while (rs.next()) {      int id=rs.getInt("id");      byte[] data=rs.getBytes("bin_data");      assertTrue("Data read from database for id " + id + " should be equal to generated one.",Arrays.equals(testData[id],data));      counter++;    }    assertTrue("Should read " + TEST_ROW_COUNT + " rows, read "+ counter,TEST_ROW_COUNT == counter);  }  finally {    rs.close();    stmt.close();  }}  }
class C{  public JsonHttpResponseHandler(boolean useRFC5179CompatibilityMode){  super(DEFAULT_CHARSET);  this.useRFC5179CompatibilityMode=useRFC5179CompatibilityMode;}  }
class C{  public void execute(final int session,final String path,final String filename){  if (path == null || filename == null) {    throw new IllegalArgumentException("Path and file must not be null");  }  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getActivity());  final int verbosity=Integer.parseInt(prefs.getString(Preferences.KEY_GPX_VERBOSITY,Preferences.VAL_GPX_VERBOSITY));  mIsExecuting=true;  mTask=new SaveGpxTask(this.getActivity(),this,session,path,filename,verbosity);  mTask.execute();}  }
class C{  static OperationDescription.Builder defaultBuilder(){  return OperationDescription.builder().category(OperationDescription.Category.OPENCV).icon(Icon.iconStream("opencv"));}  }
class C{  public String keyFieldNameTipText(){  return "Set the field name that will be unique for a run.";}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public VNXeCommandJob modifyLunAsync(LunModifyParam param,String resourceId){  StringBuilder urlBld=new StringBuilder(URL_RESOURCE);  urlBld.append(resourceId);  urlBld.append(URL_LUN_MODIFY_ACTION);  _url=urlBld.toString();  return postRequestAsync(param);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_entitiessetnameditem1.class,args);}  }
class C{  protected int topDocsSize(){  return totalHits < pq.size() ? totalHits : pq.size();}  }
class C{  public void enableDebug(){  beacon.enableDebug();}  }
class C{  private static <T>String join(final Iterable<T> objs,final String delimiter){  Iterator<T> iter=objs.iterator();  if (!iter.hasNext()) {    return "";  }  StringBuffer buffer=new StringBuffer(String.valueOf(iter.next()));  while (iter.hasNext()) {    buffer.append(delimiter).append(String.valueOf(iter.next()));  }  return buffer.toString();}  }
class C{  public void abort(){synchronized (this.secondRunnableSync) {    this.abort=true;  }}  }
class C{  public void readBlockLight(ByteBuf input){  byte[] handle=new byte[LIGHT_LENGTH];  input.readBytes(handle);  blockLight.setHandle(handle);}  }
class C{  private long convertBinaryDoubleToLong(byte[] data){  if (data == null || data.length != 8)   return 0x0;  long value;  if ((0x80 & data[0]) == 0x80) {    value=((long)(0x7f & data[0]) << 56 | (long)(0xff & data[1]) << 48 | (long)(0xff & data[2]) << 40 | (long)(0xff & data[3]) << 32 | (long)(0xff & data[4]) << 24 | (long)(0xff & data[5]) << 16 | (long)(0xff & data[6]) << 8 | (long)(0xff & data[7]));  } else {    value=~((long)(0xff & data[0]) << 56 | (long)(0xff & data[1]) << 48 | (long)(0xff & data[2]) << 40 | (long)(0xff & data[3]) << 32 | (long)(0xff & data[4]) << 24 | (long)(0xff & data[5]) << 16 | (long)(0xff & data[6]) << 8 | (long)(0xff & data[7]));  }  return value;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean canPush(final RPEntity entity){  return this != entity && SingletonRepository.getRuleProcessor().getTurn() - turnOfLastPush > 10;}  }
class C{  public MaterialTab createInteractiveTab(CharSequence label_text){  final MaterialTab mattab=new MaterialTab(this.getContext(),new tabBuilder(tabBuilder.layout.TAB_MATERIAL).with(getContext()).initInstance());  mattab.setText(label_text);  return mattab;}  }
class C{  public boolean reverseCorrectIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSECORRECT);  if (m_processMsg != null)   return false;  MDocType dt=MDocType.get(getCtx(),getC_DocType_ID());  if (!MPeriod.isOpen(getCtx(),getMovementDate(),dt.getDocBaseType(),getAD_Org_ID())) {    m_processMsg="@PeriodClosed@";    return false;  }  MMovement reversal=new MMovement(getCtx(),0,get_TrxName());  copyValues(this,reversal,getAD_Client_ID(),getAD_Org_ID());  reversal.setDocStatus(DOCSTATUS_Drafted);  reversal.setDocAction(DOCACTION_Complete);  reversal.setIsApproved(false);  reversal.setIsInTransit(false);  reversal.setPosted(false);  reversal.setProcessed(false);  reversal.setDocumentNo(getDocumentNo() + REVERSE_INDICATOR);  reversal.addDescription("{->" + getDocumentNo() + ")");  reversal.setReversal_ID(getM_Movement_ID());  if (!reversal.save()) {    m_processMsg="Could not create Movement Reversal";    return false;  }  reversal.setReversal(true);  MMovementLine[] oLines=getLines(true);  for (int i=0; i < oLines.length; i++) {    MMovementLine oLine=oLines[i];    MMovementLine rLine=new MMovementLine(getCtx(),0,get_TrxName());    copyValues(oLine,rLine,oLine.getAD_Client_ID(),oLine.getAD_Org_ID());    rLine.setM_Movement_ID(reversal.getM_Movement_ID());    rLine.setReversalLine_ID(oLine.getM_MovementLine_ID());    rLine.setMovementQty(rLine.getMovementQty().negate());    rLine.setTargetQty(Env.ZERO);    rLine.setScrappedQty(Env.ZERO);    rLine.setConfirmedQty(Env.ZERO);    rLine.setProcessed(false);    rLine.saveEx();  }  if (!reversal.processIt(DocAction.ACTION_Complete)) {    m_processMsg="Reversal ERROR: " + reversal.getProcessMsg();    return false;  }  reversal.closeIt();  reversal.setDocStatus(DOCSTATUS_Reversed);  reversal.setDocAction(DOCACTION_None);  reversal.saveEx();  m_processMsg=reversal.getDocumentNo();  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSECORRECT);  if (m_processMsg != null)   return false;  addDescription("(" + reversal.getDocumentNo() + "<-)");  setReversal_ID(reversal.getM_Movement_ID());  setProcessed(true);  setDocStatus(DOCSTATUS_Reversed);  setDocAction(DOCACTION_None);  return true;}  }
class C{  public void clearLiveHandler(){  this.liveHandler=null;}  }
class C{  public Approximator(){  this.mType=ApproximatorType.NONE;}  }
class C{  Iter(){  for (; ; ) {    next=findFirst();    if (next == null)     break;    Object x=next.value;    if (x != null && x != next) {      nextValue=(V)x;      break;    }  }}  }
class C{  public void unlockUI(ProcessInfo pi){  if (!m_isLock)   return;  m_isLock=false;  m_pi=pi;  Clients.showBusy(null,false);  this.dispose();  int AD_Form_ID=106;  ADForm form=SessionManager.getAppDesktop().openForm(AD_Form_ID);  if (m_ps != null) {    WPayPrint pp=(WPayPrint)form.getICustomForm();    pp.setPaySelection(m_ps.getC_PaySelection_ID());  }}  }
class C{  public DoubleVector plusEquals(double x){  for (int i=0; i < size(); i++) {    V[i]+=x;  }  return this;}  }
class C{  private boolean isInitiatorId(String value){  URI initiatorUri=null;  try {    initiatorUri=URI.create(value);  } catch (  IllegalArgumentException e) {    return false;  }  return URIUtil.isValid(initiatorUri);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:16.283 -0500",hash_original_method="3DD67552ED8C1FF65B79535A2E5F00F8",hash_generated_method="A0B77081CFA8EB5FDE9392D3EE35C8F4") public boolean isExportable(){  return isExportable;}  }
class C{  public static MockCurrentSensor currentSensor(){  return new MockCurrentSensor();}  }
class C{  public void loadConfig(String XMLFile){  try {    sectionHandling=new HashMap<String,EnumMap<SIT,EnumMap<CIT,Boolean>>>();    SAXParserFactory factory=SAXParserFactory.newInstance();    factory.setNamespaceAware(true);    SAXParser sp=factory.newSAXParser();    DefaultHandler handler=new ConfigLoader(this);    sp.parse(XMLFile,handler);  } catch (  Exception e) {    System.err.println(e);    loadConfig();  }}  }
class C{  @ObjectiveCName("isInAppNotificationSoundEnabled") public boolean isInAppNotificationSoundEnabled(){  return modules.getSettingsModule().isInAppSoundEnabled();}  }
class C{  @Override public synchronized void removeTestSetListener(TestSetListener tsl){  m_testListeners.removeElement(tsl);}  }
class C{  @Override public boolean isShown(){  return isShown;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementretrievetagname.class,args);}  }
class C{  public ContactsAdapter(Context context){  super(context,null,0);  mInflater=LayoutInflater.from(context);  final String alphabet=context.getString(R.string.alphabet);  mAlphabetIndexer=new AlphabetIndexer(null,ContactsQuery.SORT_KEY,alphabet);  highlightTextSpan=new TextAppearanceSpan(getActivity(),R.style.searchTextHiglight);}  }
class C{  protected String makeJarURLCachePath(URL jarURL,String contentType){  String innerAddress=jarURL.getPath();  URL innerUrl=WWIO.makeURL(innerAddress);  String host=WWIO.replaceIllegalFileNameCharacters(innerUrl.getHost());  String path=WWIO.replaceIllegalFileNameCharacters(innerUrl.getPath().replace("!/","#"));  StringBuilder sb=new StringBuilder();  sb.append(host);  sb.append(File.separator);  sb.append(path);  String suffix=this.makeSuffix(path,contentType);  if (suffix != null)   sb.append(suffix);  return sb.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:21.179 -0500",hash_original_method="2E283002697DCA5F88CA6E1957785306",hash_generated_method="BFF96DDFE121937C2DE0C7BAC3CC2780") public static void appendInt(AbstractStringBuilder sb,int i){  convertInt(sb,i);}  }
class C{  public Map<CIMObjectPath,Set<String>> findAnySLOStorageGroupsCanBeReUsed(StorageSystem forProvider,StorageSystem storage,String policyName,boolean associatedToView) throws WBEMException {  CloseableIterator<CIMInstance> groupInstanceItr=null;  CloseableIterator<CIMObjectPath> volumePathItr=null;  Map<CIMObjectPath,Set<String>> groupPaths=new ConcurrentHashMap<CIMObjectPath,Set<String>>();  try {    CIMObjectPath controllerConfigSvcPath=_cimPath.getControllerConfigSvcPath(storage);    _log.info("Trying to get all Storage Groups");    groupInstanceItr=getAssociatorInstances(forProvider,controllerConfigSvcPath,null,SE_DEVICE_MASKING_GROUP,null,null,PS_V3_STORAGE_GROUP_PROPERTIES);    while (groupInstanceItr.hasNext()) {      CIMInstance groupInstance=groupInstanceItr.next();      CIMObjectPath groupPath=groupInstance.getObjectPath();      String groupName=CIMPropertyFactory.getPropertyValue(groupInstance,CP_ELEMENT_NAME);      String fastSetting=CIMPropertyFactory.getPropertyValue(groupInstance,CP_FAST_SETTING);      String groupAssociatedToView=CIMPropertyFactory.getPropertyValue(groupInstance,CP_ASSOCIATED_TO_VIEW);      Set<String> returnedNativeGuids=new HashSet<String>();      if (fastSetting.equals(policyName) && associatedToView == Boolean.parseBoolean(groupAssociatedToView) && groupName.startsWith(Constants.STORAGE_GROUP_PREFIX)) {        _log.debug("Looping through all volumes in storage group {}",groupName);        volumePathItr=getAssociatorNames(forProvider,groupPath,null,CIM_STORAGE_VOLUME,null,null);        while (volumePathItr.hasNext()) {          returnedNativeGuids.add(getVolumeNativeGuid(volumePathItr.next()));        }        groupPaths.put(groupPath,returnedNativeGuids);      }    }  }  finally {    closeCIMIterator(groupInstanceItr);    closeCIMIterator(volumePathItr);  }  return groupPaths;}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1,K k2,V v2){  return ofEntries(entryOf(k1,v1),entryOf(k2,v2));}  }
class C{  public AutoDeskewTransform(final double... lambdas){  this(true,DoubleList.view(lambdas,lambdas.length));}  }
class C{  public int read(byte b[],int off,int len) throws IOException {  return checkInputFile().read(b,off,len);}  }
class C{  public void collide(){  Contact c=m_contactList;  while (c != null) {    Fixture fixtureA=c.getFixtureA();    Fixture fixtureB=c.getFixtureB();    int indexA=c.getChildIndexA();    int indexB=c.getChildIndexB();    Body bodyA=fixtureA.getBody();    Body bodyB=fixtureB.getBody();    if ((c.m_flags & Contact.FILTER_FLAG) == Contact.FILTER_FLAG) {      if (bodyB.shouldCollide(bodyA) == false) {        Contact cNuke=c;        c=cNuke.getNext();        destroy(cNuke);        continue;      }      if (m_contactFilter != null && m_contactFilter.shouldCollide(fixtureA,fixtureB) == false) {        Contact cNuke=c;        c=cNuke.getNext();        destroy(cNuke);        continue;      }      c.m_flags&=~Contact.FILTER_FLAG;    }    boolean activeA=bodyA.isAwake() && bodyA.m_type != BodyType.STATIC;    boolean activeB=bodyB.isAwake() && bodyB.m_type != BodyType.STATIC;    if (activeA == false && activeB == false) {      c=c.getNext();      continue;    }    int proxyIdA=fixtureA.m_proxies[indexA].proxyId;    int proxyIdB=fixtureB.m_proxies[indexB].proxyId;    boolean overlap=m_broadPhase.testOverlap(proxyIdA,proxyIdB);    if (overlap == false) {      Contact cNuke=c;      c=cNuke.getNext();      destroy(cNuke);      continue;    }    c.update(m_contactListener);    c=c.getNext();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void printRows(final List<TableRow> rows,final PrintStream out){  for (  TableRow row : rows) {    for (    TableCell field : row.getF()) {      out.printf("%-50s",field.getV());    }    out.println();  }}  }
class C{  public static void main(String args[]) throws Exception {  System.setSecurityManager(new RMISecurityManager());  Naming.rebind("/ComputeServer",new ComputeServerImpl());  System.out.println("Ready to receive tasks.");  System.err.println("DTI_DoneInitializing");}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public static final void writeByteArrayXml(byte[] val,String name,XmlSerializer out) throws XmlPullParserException, java.io.IOException {  if (val == null) {    out.startTag(null,"null");    out.endTag(null,"null");    return;  }  out.startTag(null,"byte-array");  if (name != null) {    out.attribute(null,"name",name);  }  final int N=val.length;  out.attribute(null,"num",Integer.toString(N));  StringBuilder sb=new StringBuilder(val.length * 2);  for (int i=0; i < N; i++) {    int b=val[i];    int h=b >> 4;    sb.append(h >= 10 ? ('a' + h - 10) : ('0' + h));    h=b & 0xff;    sb.append(h >= 10 ? ('a' + h - 10) : ('0' + h));  }  out.text(sb.toString());  out.endTag(null,"byte-array");}  }
class C{  public void destroyWorkflow(Workflow workflow){  String id=workflow.getOrchTaskId();  try {    destroyNestedWorkflows(workflow);    List<WorkflowStepData> dataRecords=CustomQueryUtility.queryActiveResourcesByRelation(_dbClient,workflow.getWorkflowURI(),WorkflowStepData.class,"workflow");    if (dataRecords != null && !dataRecords.isEmpty()) {      _dbClient.markForDeletion(dataRecords);    }    for (    String stepId : workflow.getStepMap().keySet()) {      Stat stat=_dataManager.checkExists(getZKStep2WorkflowPath(stepId));      if (stat != null) {        _dataManager.removeNode(getZKStep2WorkflowPath(stepId));      }    }    String path=getZKWorkflowPath(workflow);    Stat stat=_dataManager.checkExists(path);    if (stat != null) {      _dataManager.removeNode(path);      _log.info("Removed ZK workflow: " + workflow.getWorkflowURI());    }  } catch (  Exception ex) {    _log.error("Cannot destroy Workflow: " + id,ex);  }}  }
class C{  protected static long parseLongInteger(ByteArrayInputStream pduDataStream){  assert (null != pduDataStream);  int temp=pduDataStream.read();  assert (-1 != temp);  int count=temp & 0xFF;  if (count > LONG_INTEGER_LENGTH_MAX) {    throw new RuntimeException("Octet count greater than 8 and I can't represent that!");  }  long result=0;  for (int i=0; i < count; i++) {    temp=pduDataStream.read();    assert (-1 != temp);    result<<=8;    result+=(temp & 0xFF);  }  return result;}  }
class C{  public KrbApReq(Credentials tgsCred,boolean mutualRequired,boolean useSubKey,boolean useSeqNumber,Checksum cksum) throws Asn1Exception, KrbCryptoException, KrbException, IOException {  APOptions apOptions=(mutualRequired ? new APOptions(Krb5.AP_OPTS_MUTUAL_REQUIRED) : new APOptions());  if (DEBUG)   System.out.println(">>> KrbApReq: APOptions are " + apOptions);  EncryptionKey subKey=(useSubKey ? new EncryptionKey(tgsCred.getSessionKey()) : null);  SeqNumber seqNum=new LocalSeqNumber();  init(apOptions,tgsCred,cksum,subKey,seqNum,null,KeyUsage.KU_AP_REQ_AUTHENTICATOR);}  }
class C{  public static void addServletInitParam(WebXml webXml,String theServletName,String name,String value){  WebXmlTag tag=(WebXmlTag)webXml.getDescriptorType().getTagByName("init-param");  Servlet servletElement=getServlet(webXml,theServletName);  if (servletElement == null) {    throw new IllegalStateException("Servlet '" + theServletName + "' not defined");  }  InitParam ip=new InitParam(tag);  ip.setParamName(name);  ip.setParamValue(value);  Element loadOnStartupElements=servletElement.getChild(WebXmlType.LOAD_ON_STARTUP,servletElement.getNamespace());  if (loadOnStartupElements != null) {    servletElement.addContent(loadOnStartupElements.getParentElement().getChildren().indexOf(loadOnStartupElements),ip);  } else {    servletElement.addContent(ip);  }}  }
class C{  public SchedulerImpl(CFMLEngine engine,String xml,Config config){  this.engine=(CFMLEngineImpl)engine;  this.config=config;  try {    doc=su.loadDocument(xml);  } catch (  Exception e) {  }  tasks=new ScheduleTaskImpl[0];  init();}  }
class C{  public SendableDocumentMessage.SendableDocumentMessageBuilder caption(String caption){  this.caption=caption;  return this;}  }
class C{  public void print_array(byte[] array){  print("byte array: size = " + array.length);  for (int i=0; i < array.length; i++) {    print("" + array[i]);  }}  }
class C{  public GameEventEntry(final String id,final String timestamp,final String source,final String event,final String param1,final String param2){  this.id=id;  this.timestamp=timestamp;  this.source=source;  this.event=event;  this.param1=param1;  this.param2=param2;}  }
class C{  public CircleBattery(Context context){  this(context,null);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:22.818 -0500",hash_original_method="AC5E4B63287018AAA83AB6875AD71BA5",hash_generated_method="38CA8B036CBBB3AD7D2A23EA40E8CEEF") public final boolean isMutable(){  return mIsMutable;}  }
class C{  public static int[] trimToCapacity(int[] array,int maxCapacity){  if (array.length > maxCapacity) {    int oldArray[]=array;    array=new int[maxCapacity];    System.arraycopy(oldArray,0,array,0,maxCapacity);  }  return array;}  }
class C{  public static char[] toCharArray(InputStream is,Charset encoding) throws IOException {  CharArrayWriter output=new CharArrayWriter();  copy(is,output,encoding);  return output.toCharArray();}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public IconicsDrawable contourWidthRes(int contourWidthRes){  return contourWidthPx(mContext.getResources().getDimensionPixelSize(contourWidthRes));}  }
class C{  public static MethExecutorResult executeObject(Object target,String selector){  return executeObject(target,selector,null);}  }
class C{  public static boolean isDeviceRotationON(Context context){  try {    if (context == null) {      return true;    }    int str=Settings.System.getInt(context.getContentResolver(),Settings.System.ACCELEROMETER_ROTATION);    if (str == 1) {      return true;    } else {      return false;    }  } catch (  SettingNotFoundException e) {    logger.error(e);  }catch (  Exception e) {    logger.error(e);  }  return true;}  }
class C{  public T caseFunctionDefinition(FunctionDefinition object){  return null;}  }
class C{  public static boolean hasStringChanged(String oldString,String newString){  if (oldString == null && newString == null) {    return false;  } else   if ((oldString == null && newString != null) || (oldString != null && newString == null)) {    return true;  } else {    return !oldString.equals(newString);  }}  }
class C{  public StreamingConfig reloadStreamingConfigLocal(String name) throws IOException {  String path=StreamingConfig.concatResourcePath(name);  StreamingConfig ndesc=loadStreamingConfigAt(path);  streamingMap.putLocal(ndesc.getName(),ndesc);  return ndesc;}  }
class C{  public static int NextNonIdChar(String str,int col){  int curCol=col;  char c=str.charAt(col);  while ((curCol < str.length()) && (Character.isLetter(c) || Character.isDigit(c) || (c == '_'))) {    curCol++;    if (curCol < str.length()) {      c=str.charAt(curCol);    }  }  return curCol;}  }
class C{  public DeleteViewAction(final Window parent,final IViewContainer viewContainer,final INaviView[] views){  super("Delete View");  parentWindow=Preconditions.checkNotNull(parent,"IE02260: parent argument can not be null");  this.views=Preconditions.checkNotNull(views.clone(),"IE03413: views.clone() argument can not be null");  this.viewContainer=Preconditions.checkNotNull(viewContainer,"IE02297: viewContainer argument can not be null");}  }
class C{  public int optInt(String key,int defaultValue){  try {    return this.getInt(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  @Override public synchronized void decay(){  double rate=Controller.options.DCG_DECAY_RATE;  if (Controller.options.DYNAMIC_CALL_FILE_OUTPUT != null)   return;  for (  WeightedCallTargets ct : callGraph.values()) {    ct.decay(rate);  }  totalEdgeWeights/=rate;}  }
class C{  public void showEditorPanel(@NotNull RecipeWidget recipe){  RecipeEditorPanel recipeEditorPanel=recipePanels.get(recipe);  recipeEditorPanel.showEditor();  view.showWidget(recipeEditorPanel.getView());}  }
class C{  public boolean hasScrolled(){  return this.scroll != 0;}  }
class C{  public void write(final String filename){  PrintStream stream;  try {    stream=new PrintStream(new File(filename));  } catch (  FileNotFoundException e) {    e.printStackTrace();    return;  }  write(stream);  stream.close();}  }
class C{  public static ExcludedRefs.Builder createAndroidDefaults(){  ExcludedRefs.Builder excluded=new ExcludedRefs.Builder();  excluded.thread("FinalizerWatchdogDaemon");  excluded.thread("main");  excluded.thread(LEAK_CANARY_THREAD_NAME);  return excluded;}  }
class C{  public synchronized void add(long now){  addRateStatistics.update(1,now);  size++;  totalPacketsAdded++;  update(now);}  }
class C{  public Attribute customGet(String get){  xmlAttribute.get=get;  return this;}  }
class C{  public void add(Complex adder){  mLeft+=adder.left();  mRight+=adder.right();}  }
class C{  private void movePos(float deltaY){  if ((deltaY < 0 && mPtrIndicator.isInStartPosition())) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("has reached the top"));    }    return;  }  int to=mPtrIndicator.getCurrentPosY() + (int)deltaY;  if (mPtrIndicator.willOverTop(to)) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("over top"));    }    to=PtrIndicator.POS_START;  }  mPtrIndicator.setCurrentPos(to);  int change=to - mPtrIndicator.getLastPosY();  updatePos(change);}  }
class C{  public static void boot(Extent initial,Extent max){  initialHeapSize=initial;  maxHeapSize=max;  if (initialHeapSize.GT(maxHeapSize))   maxHeapSize=initialHeapSize;  currentHeapSize=initialHeapSize;  VM.events.heapSizeChanged(currentHeapSize);  if (VM.VERIFY_ASSERTIONS)   sanityCheck();  endLastMajorGC=VM.statistics.nanoTime();}  }
class C{  public static int lengthOf(int opcode){  return lengthArray[opcode & 0xff];}  }
class C{  public void testGetNameWhenEjbHasExtension(){  EJB ejb=new EJB("c:/some/path/to/ejb/test.ejb");  assertEquals("test",ejb.getName());}  }
class C{  public GenericValue previous(){  try {    if (resultSet.previous()) {      return currentGenericValue();    } else {      return null;    }  } catch (  SQLException e) {    if (!closed) {      try {        this.close();      } catch (      GenericEntityException e1) {        Debug.logError(e1,"Error auto-closing EntityListIterator on error, so info below for more info on original error; close error: " + e1.toString(),module);      }      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GeneralRuntimeException("Error getting the previous result",e);  }catch (  GenericEntityException e) {    if (!closed) {      try {        this.close();      } catch (      GenericEntityException e1) {        Debug.logError(e1,"Error auto-closing EntityListIterator on error, so info below for more info on original error; close error: " + e1.toString(),module);      }      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GeneralRuntimeException("Error creating GenericValue",e);  }}  }
class C{  public void updateActionHistoryHeader(final String targetName){  titleOfActionHistory.setValue(HawkbitCommonUtil.getActionHistoryLabelId(targetName));}  }
class C{  public static String loadCartFromOrder(HttpServletRequest request,HttpServletResponse response){  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  HttpSession session=request.getSession();  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");  Delegator delegator=(Delegator)request.getAttribute("delegator");  String orderId=request.getParameter("orderId");  ShoppingCart cart=null;  try {    Map<String,Object> outMap=dispatcher.runSync("loadCartFromOrder",UtilMisc.<String,Object>toMap("orderId",orderId,"skipProductChecks",Boolean.TRUE,"userLogin",userLogin));    if (!ServiceUtil.isSuccess(outMap)) {      request.setAttribute("_ERROR_MESSAGE_",ServiceUtil.getErrorMessage(outMap));      return "error";    }    cart=(ShoppingCart)outMap.get("shoppingCart");    cart.removeAdjustmentByType("SALES_TAX");    cart.removeAdjustmentByType("VAT_TAX");    cart.removeAdjustmentByType("VAT_PRICE_CORRECT");    cart.removeAdjustmentByType("PROMOTION_ADJUSTMENT");    String shipGroupSeqId=null;    long groupIndex=cart.getShipInfoSize();    List<GenericValue> orderAdjustmentList=new ArrayList<GenericValue>();    List<GenericValue> orderAdjustments=new ArrayList<GenericValue>();    orderAdjustments=cart.getAdjustments();    try {      orderAdjustmentList=EntityQuery.use(delegator).from("OrderAdjustment").where("orderId",orderId).queryList();    } catch (    Exception e) {      Debug.logError(e,module);    }    for (long itr=1; itr <= groupIndex; itr++) {      shipGroupSeqId=UtilFormatOut.formatPaddedNumber(itr,5);      List<GenericValue> duplicateAdjustmentList=new ArrayList<GenericValue>();      for (      GenericValue adjustment : orderAdjustmentList) {        if ("PROMOTION_ADJUSTMENT".equals(adjustment.get("orderAdjustmentTypeId"))) {          cart.addAdjustment(adjustment);        }        if ("SALES_TAX".equals(adjustment.get("orderAdjustmentTypeId"))) {          if (adjustment.get("description") != null && ((String)adjustment.get("description")).startsWith("Tax adjustment due")) {            cart.addAdjustment(adjustment);          }          if (adjustment.get("comments") != null && ((String)adjustment.get("comments")).startsWith("Added manually by")) {            cart.addAdjustment(adjustment);          }        }      }      for (      GenericValue orderAdjustment : orderAdjustments) {        if ("OrderAdjustment".equals(orderAdjustment.getEntityName())) {          if (("SHIPPING_CHARGES".equals(orderAdjustment.get("orderAdjustmentTypeId"))) && orderAdjustment.get("orderId").equals(orderId) && orderAdjustment.get("shipGroupSeqId").equals(shipGroupSeqId)&& orderAdjustment.get("comments") == null) {            duplicateAdjustmentList.add(orderAdjustment);          }        }      }      orderAdjustments.removeAll(duplicateAdjustmentList);    }  } catch (  GenericServiceException exc) {    request.setAttribute("_ERROR_MESSAGE_",exc.getMessage());    return "error";  }  cart.setAttribute("addpty","Y");  session.setAttribute("shoppingCart",cart);  session.setAttribute("productStoreId",cart.getProductStoreId());  session.setAttribute("orderMode",cart.getOrderType());  session.setAttribute("orderPartyId",cart.getOrderPartyId());  cart.setOrderId(null);  return "success";}  }
class C{  public synchronized <T>Future<T> submit(Callable<T> task){  assertState();  assertTaskValidity(task);  return mThreadPoolExecutor.submit(task);}  }
class C{  public static boolean isSameCallEvent(CallEvent e1,CallEvent e2){  if (e1 == null || e2 == null) {    return false;  }  if (e1.getCallEventType() != e2.getCallEventType()) {    return false;  }  if (e1.getChannel() == null || e2.getChannel() == null || !e1.getChannel().contentEquals(e2.getChannel())) {    return false;  }  if (e1.getToID() == null || e2.getToID() == null || !e1.getToID().contentEquals(e2.getToID())) {    return false;  }  if (e1.getFromID() == null || e2.getFromID() == null) {    if (e1.getFromID() == null && e2.getFromID() == null) {      return true;    } else {      return false;    }  } else   if (e1.getFromID().contentEquals(e2.getFromID())) {    return true;  }  return false;}  }
class C{  @Override public void flowControl(final int messageBytes,final boolean discountSlowConsumer) throws ActiveMQException {  if (clientWindowSize >= 0) {    creditsToSend+=messageBytes;    if (creditsToSend >= clientWindowSize) {      if (clientWindowSize == 0 && discountSlowConsumer) {        if (logger.isTraceEnabled()) {          logger.trace(this + "::FlowControl::Sending " + creditsToSend+ " -1, for slow consumer");        }        final int credits=creditsToSend - 1;        creditsToSend=0;        if (credits > 0) {          sendCredits(credits);        }      } else {        if (logger.isDebugEnabled()) {          logger.debug("Sending " + messageBytes + " from flow-control");        }        final int credits=creditsToSend;        creditsToSend=0;        if (credits > 0) {          sendCredits(credits);        }      }    }  }}  }
class C{  public void scrollToElement(HTMLElement element,boolean animate){  if (!pageLoading()) {    if (!document.contains(element)) {      throw new IllegalArgumentException("The specified element is not contained in the current document.");    }    Vector v=element.getUi();    if ((v != null) && (v.size() > 0)) {      Component cmp=((Component)v.firstElement());      if (cmp != null) {        Container parent=cmp.getParent();        int y=cmp.getY();        while ((parent != null) && (parent != this)) {          y+=parent.getY();          parent=parent.getParent();        }        scrollTo(y,animate);      }    }  } else {    throw new IllegalStateException("Page is still loading");  }}  }
class C{  public boolean isDefending(){  return (isBeingAttacked() && (System.currentTimeMillis() - combatIconTime < 4 * TURN_LENGTH));}  }
class C{  public void prepare() throws IOException {  int buffers=numberOfBuffers;  if (buffers < MIN_BUFFERS) {    buffers=MIN_BUFFERS;  } else   if (buffers > MAX_BUFFERS) {    buffers=MAX_BUFFERS;  }  for (int i=0; i < buffers; i++) {    ByteBuffer byteBuffer=byteBufferProvider.acquireByteBuffer();    emptyBuffers.add(byteBuffer);  }}  }
class C{  public String baseTipText(){  return "The base for the expansion constant.";}  }
class C{  public LinearProbingHashST(int capacity){  m=capacity;  n=0;  keys=(Key[])new Object[m];  vals=(Value[])new Object[m];}  }
class C{  public Vector3f subtract(Vector3f vec){  return new Vector3f(x - vec.x,y - vec.y,z - vec.z);}  }
class C{  private Base64(){}  }
class C{  public void stop(InetAddress addr,int port) throws java.net.ConnectException {  try {    ShutdownRequest request=new ShutdownRequest();    requestToServer(addr,port,request,DEFAULT_REQUEST_TIMEOUT);  } catch (  java.net.ConnectException ce) {    throw ce;  }catch (  Exception ex) {    logger.error("TcpClient.stop(): exception connecting to locator " + addr + ":"+ port+ ": "+ ex);  }}  }
class C{  public TemplateModelException(){  this((String)null,null);}  }
class C{  private void recordTokenString(Vector targetStrings){  int tokPos=getTokenQueuePosFromMap(m_patternMapSize - 1);  resetTokenMark(tokPos + 1);  if (m_processor.lookahead('(',1)) {    int tok=getKeywordToken(m_processor.m_token);switch (tok) {case OpCodes.NODETYPE_COMMENT:      targetStrings.addElement(PsuedoNames.PSEUDONAME_COMMENT);    break;case OpCodes.NODETYPE_TEXT:  targetStrings.addElement(PsuedoNames.PSEUDONAME_TEXT);break;case OpCodes.NODETYPE_NODE:targetStrings.addElement(PsuedoNames.PSEUDONAME_ANY);break;case OpCodes.NODETYPE_ROOT:targetStrings.addElement(PsuedoNames.PSEUDONAME_ROOT);break;case OpCodes.NODETYPE_ANYELEMENT:targetStrings.addElement(PsuedoNames.PSEUDONAME_ANY);break;case OpCodes.NODETYPE_PI:targetStrings.addElement(PsuedoNames.PSEUDONAME_ANY);break;default :targetStrings.addElement(PsuedoNames.PSEUDONAME_ANY);}} else {if (m_processor.tokenIs('@')) {tokPos++;resetTokenMark(tokPos + 1);}if (m_processor.lookahead(':',1)) {tokPos+=2;}targetStrings.addElement(m_compiler.getTokenQueue().elementAt(tokPos));}}  }
class C{  public SimpleAttributeSet(){}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  protected String repositoryLocation(){  return GITLAB_PREFIX + this.username + "/"+ this.repository+ ".git";}  }
class C{  private void splitStopLinks(byte publicTransportSystem){  Map<String,LinkStops> linksStops=new HashMap<String,LinkStops>();  for (  Stop stop : stops[publicTransportSystem].values()) {    if (stop.getLinkId() != null) {      LinkStops linkStops=linksStops.get(stop.getLinkId());      if (linkStops == null) {        linkStops=new LinkStops(network.getLinks().get(Id.createLinkId(stop.getLinkId())));        linksStops.put(stop.getLinkId(),linkStops);      }      linkStops.addStop(stop);    }  }  for (  LinkStops linkStops : linksStops.values()) {    for (int i=0; i < linkStops.getNumStops() - 1; i++) {      Link link=linkStops.split(i,network,coordinateTransformation);      if (link != null)       changeTrips(linkStops.getLink(),link,false,publicTransportSystem);    }    if (linkStops.getLastDistance() > MAX_DISTANCE_STOP_LINK) {      Link link=linkStops.split(linkStops.getNumStops() - 1,network,coordinateTransformation);      if (link != null)       changeTrips(linkStops.getLink(),link,true,publicTransportSystem);    }  }}  }
class C{  public Tasks<VolumeRestRep> create(VolumeCreate create){  return postTasks(create,baseUrl);}  }
class C{  private void enableSubmitIfReady(){  boolean isReady=false;  if (evServerIP.getText().toString().length() >= 1) {    isReady=true;  }  if (isReady) {    btnStartRegistration.setBackground(getResources().getDrawable(R.drawable.btn_orange));    btnStartRegistration.setTextColor(getResources().getColor(R.color.white));    btnStartRegistration.setEnabled(true);  } else {    btnStartRegistration.setBackground(getResources().getDrawable(R.drawable.btn_grey));    btnStartRegistration.setTextColor(getResources().getColor(R.color.black));    btnStartRegistration.setEnabled(false);  }}  }
class C{  public T marginheight(String value){  return attr("marginheight",value);}  }
class C{  public String flattenToString(Context context){  String flattened=componentName.flattenToString();  if (user != null) {    flattened+="#" + UserManagerCompat.getInstance(context).getSerialNumberForUser(user);  }  return flattened;}  }
class C{  public void receiveGroupFileDeliveryStatus(String chatId,ImdnDocument imdn,ContactId contact){  ImdnDocument.DeliveryStatus status=imdn.getStatus();  String msgId=imdn.getMsgId();  long timestamp=imdn.getDateTime();  if (sLogger.isActivated()) {    sLogger.info("Handling group file delivery status; contact=" + contact + ", msgId="+ msgId+ ", status="+ status+ ", notificationType="+ imdn.getNotificationType());  }switch (status) {case DELIVERED:    setGroupFileDeliveryStatusDelivered(chatId,msgId,contact,timestamp);  break;case DISPLAYED:setGroupFileDeliveryStatusDisplayed(chatId,msgId,contact,timestamp);break;case ERROR:case FAILED:case FORBIDDEN:ReasonCode reasonCode=imdnToFileTransferFailedReasonCode(imdn);setGroupFileDeliveryStatusFailed(chatId,msgId,contact,reasonCode);break;}}  }
class C{  public final void initialize(int low,int high,int attr){  number=high - low + 1;  first=low;  last=high;  position=-1;  maxImpurity=-1.e20;  splitAttr=attr;  splitValue=0.0;}  }
class C{  @Override public void shutdown(){  if (!shouldKeepAdbAlive) {    AndroidDebugBridge.disconnectBridge();    AndroidDebugBridge.terminate();  }  logger.info("stopping Device Manager");}  }
class C{  void validatePaymentInfoAndBillingContact(PaymentInfo paymentInfo,BillingContact billingContact,VOPaymentInfo voPaymentInfo,VOBillingContact voBillingContact) throws ConcurrentModificationException {  BaseAssembler.verifyVersionAndKey(paymentInfo,voPaymentInfo);  BaseAssembler.verifyVersionAndKey(billingContact,voBillingContact);}  }
class C{  public void initialize(Body bodyA,Body bodyB,Vector2 anchor){  this.bodyA=bodyA;  this.bodyB=bodyB;  localAnchorA.set(bodyA.getLocalPoint(anchor));  localAnchorB.set(bodyB.getLocalPoint(anchor));  referenceAngle=bodyB.getAngle() - bodyA.getAngle();}  }
class C{  public static InputStream toInputStream(CharSequence input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  public static NodeList selectNodeList(Node contextNode,String str) throws TransformerException {  return selectNodeList(contextNode,str,contextNode);}  }
class C{  public void contextInitialized(ServletContextEvent sce){  ServletContext servletContext=sce.getServletContext();  String propertiesBeanName=servletContext.getInitParameter(PROPERTIES_BEAN_NAME_PARAMETER);  if (StringUtils.isBlank(propertiesBeanName)) {    propertiesBeanName=DEFAULT_PROPERTIES_BEAN_NAME;  }  String contextProperty=servletContext.getInitParameter(CONTEXT_PROPERTY_PARAMETER);  if (StringUtils.isBlank(contextProperty)) {    contextProperty=DEFAULT_CONTEXT_PROPERTY;  }  WebApplicationContext context=WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);  PlatformPropertyPlaceholderConfigurer configurer=(PlatformPropertyPlaceholderConfigurer)context.getBean(propertiesBeanName);  sce.getServletContext().setAttribute(contextProperty,configurer.getResolvedProps());}  }
class C{  public void releaseEglSurface(){  mEglCore.releaseSurface(mEGLSurface);  mEGLSurface=EGL14.EGL_NO_SURFACE;  mWidth=mHeight=-1;}  }
class C{  @Override public boolean generatedKeyAlwaysReturned(){  return true;}  }
class C{  synchronized void fallBackToPrimaryIfAvailable(){  MySQLConnection connection=null;  try {    connection=createConnectionForHostIndex(this.primaryHostIndex);    switchCurrentConnectionTo(this.primaryHostIndex,connection);  } catch (  SQLException e1) {    if (connection != null) {      try {        connection.close();      } catch (      SQLException e2) {      }    }    resetAutoFallBackCounters();  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.TYPE_INFO__FIRST:    setFirst((Expression)null);  return;case GamlPackage.TYPE_INFO__SECOND:setSecond((Expression)null);return;}super.eUnset(featureID);}  }
class C{  public void replace(Record record){  delete(record.getName(),record.getType());  add(record);}  }
class C{  protected final boolean _loadToHaveAtLeast(int minAvailable) throws IOException {  if (_inputStream == null) {    return false;  }  int amount=_inputEnd - _inputPtr;  if (amount > 0 && _inputPtr > 0) {    _currInputProcessed+=_inputPtr;    System.arraycopy(_inputBuffer,_inputPtr,_inputBuffer,0,amount);    _inputEnd=amount;  } else {    _inputEnd=0;  }  _inputPtr=0;  while (_inputEnd < minAvailable) {    int count=_inputStream.read(_inputBuffer,_inputEnd,_inputBuffer.length - _inputEnd);    if (count < 1) {      _closeInput();      if (count == 0) {        throw new IOException("InputStream.read() returned 0 characters when trying to read " + amount + " bytes");      }      return false;    }    _inputEnd+=count;  }  return true;}  }
class C{  public Property dayOfMonth(){  return new Property(this,getChronology().dayOfMonth());}  }
class C{  private Mailbox cacheMailbox(Mailbox mailbox){  mailboxCache.add(new SimpleMailbox(mailbox));  int id=mailboxCache.size() - 1;  ((SimpleMailbox)mailbox).setMailboxId(MaildirId.of(id));  return mailbox;}  }
class C{  public ServerReceiver(ServerListener listener){  this.listener=listener;}  }
class C{  private void manuallyRegisterHostInitiators(StorageSystem storage,Multimap<URI,Initiator> targetPortsToInitiators) throws Exception {  _log.info("manuallyRegisterHostInitiators Start : {}",targetPortsToInitiators);  for (  Map.Entry<URI,Collection<Initiator>> t2is : targetPortsToInitiators.asMap().entrySet()) {    URI storagePortURI=t2is.getKey();    Collection<Initiator> initiators=t2is.getValue();    _log.info("Manually register : Initiators {}. StoragePort {}",initiators,storagePortURI);    CIMArgument[] inArgs=_helper.getEMCManuallyRegisterHostInitiators(storage,initiators,storagePortURI);    CIMArgument[] outArgs=new CIMArgument[5];    _helper.invokeMethod(storage,_cimPath.getStorageHardwareIDManagementService(storage),SmisConstants.EMC_MANUALLY_REGISTER_HOST_INITIATORS,inArgs,outArgs);  }  _log.info("manuallyRegisterHostInitiators End : ");}  }
class C{  public void animateY(int durationMillis,EasingFunction easing){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setInterpolator(easing);  animatorY.setDuration(durationMillis);  animatorY.addUpdateListener(mListener);  animatorY.start();}  }
class C{  private void _writeByte(final int value) throws IOException {  this.outStream.write(value);}  }
class C{  public void close(boolean pCloseUnderlying) throws IOException {  if (closed) {    return;  }  if (pCloseUnderlying) {    closed=true;    input.close();  } else {    for (; ; ) {      int av=available();      if (av == 0) {        av=makeAvailable();        if (av == 0) {          break;        }      }      skip(av);    }  }  closed=true;}  }
class C{  public static boolean doesFileExist(String file){  try {    new FileInputStream(FileUtils.getFile(file));    return true;  } catch (  FileNotFoundException e) {    return false;  }}  }
class C{  private <T>Constructor<T> findFromStringConstructor(Class<T> cls){  Constructor<T> con;  try {    con=cls.getDeclaredConstructor(String.class);  } catch (  NoSuchMethodException ex) {    try {      con=cls.getDeclaredConstructor(CharSequence.class);    } catch (    NoSuchMethodException ex2) {      return null;    }  }  FromString fromString=con.getAnnotation(FromString.class);  return fromString != null ? con : null;}  }
class C{  public SolicitudSerieVO solicitarPasoAVigente(String idSerie,String motivo,String idSolicitante) throws FondosOperacionNoPermitidaException {  LoggingEvent logEvent=AuditFondos.getLogginEventSolicitudCambiosEstadoOModif(this);  Locale locale=getServiceClient().getLocale();  SerieVO serie=_serieDBEntity.getSerie(idSerie);  checkPermission(FondosSecurityManager.SOLICITUD_CAMBIOS_ESTADO_O_MODIF_ACTION);  getAuthorizationHelper().verificarPermitidoSolicitarPasoAVigente(serie);  iniciarTransaccion();  SolicitudSerieVO solicitudSerie=nuevaSolicitud(serie,null,SolicitudSerie.PASO_A_VIGENTE,motivo,idSolicitante);  AuditFondos.addDataLogSolicitudSerie(locale,logEvent,serie,solicitudSerie.getInfo());  _solicitudSerieDBEntity.insertSolicitud(solicitudSerie);  logEvent=AuditFondos.getLogginEventSolicitudCambiosEstadoOModif(this);  AuditFondos.addDataLogCambiosEstadoSerie(locale,logEvent,serie,serie.getEstadoserie(),EstadoSerie.PENDIENTE_VIGENTE);  _serieDBEntity.updateEstadoSerie(idSerie,EstadoSerie.PENDIENTE_VIGENTE,serie.getEstadoserie());  commit();  return solicitudSerie;}  }
class C{  private void cmd_button(){  log.config("Activity=" + m_activity);  if (m_activity == null)   return;  MWFNode node=m_activity.getNode();  if (MWFNode.ACTION_UserWindow.equals(node.getAction())) {    int AD_Window_ID=node.getAD_Window_ID();    String ColumnName=m_activity.getPO().get_TableName() + "_ID";    int Record_ID=m_activity.getRecord_ID();    MQuery query=MQuery.getEqualQuery(ColumnName,Record_ID);    boolean IsSOTrx=m_activity.isSOTrx();    log.info("Zoom to AD_Window_ID=" + AD_Window_ID + " - "+ query+ " (IsSOTrx="+ IsSOTrx+ ")");    AWindow frame=new AWindow();    if (!frame.initWindow(AD_Window_ID,query))     return;    AEnv.addToWindowManager(frame);    AEnv.showCenterScreen(frame);    frame=null;  } else   if (MWFNode.ACTION_UserForm.equals(node.getAction())) {    int AD_Form_ID=node.getAD_Form_ID();    FormFrame ff=new FormFrame();    ff.openForm(AD_Form_ID);    ff.pack();    AEnv.addToWindowManager(ff);    AEnv.showCenterScreen(ff);  } else   if (MWFNode.ACTION_SmartBrowse.equals(node.getAction())) {    CFrame ff=VBrowser.openBrowse(node.getAD_Browse_ID());    ff.pack();    AEnv.addToWindowManager(ff);    AEnv.showCenterScreen(ff);  } else   log.log(Level.SEVERE,"No User Action:" + node.getAction());}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  public static int[] matrixToArray(int[][] input,int fromRow,int rows){  return matrixToArray(input,fromRow,rows,0,input[0].length);}  }
class C{  private void startSection(String uri) throws SAXException {  Section section=new Section(uri,currentSection);  Vector childPrograms=currentSection.childPrograms;  noResultActions.clear();  for (int i=0, len=childPrograms.size(); i < len; i++) {    Program program=(Program)childPrograms.elementAt(i);    ActionSet actions=program.modeUsage.getMode(currentSection.context).getElementActions(uri);    ResultAction resultAction=actions.getResultAction();    if (resultAction != null)     resultAction.perform(program.handler,section);    NoResultAction[] nra=actions.getNoResultActions();    for (int j=0; j < nra.length; j++) {      NoResultAction tem=nra[j];      if (!noResultActions.contains(tem)) {        nra[j].perform(section);        noResultActions.add(tem);      }    }  }  for (int i=0, len=section.validators.size(); i < len; i++)   initHandler(((Validator)section.validators.elementAt(i)).getContentHandler());  currentSection=section;}  }
class C{  public SamFilterParamsBuilder maxUnmatedAlignmentScore(final IntegerOrPercentage val){  mMaxASUnmatedValue=val;  return this;}  }
class C{  public static void createNativeCodeNodes(final CConnection connection,final int rawModuleId,final int moduleId) throws SQLException {  Preconditions.checkNotNull(connection,"IE00708: connection argument can not be null");  final String query=" { call create_native_code_nodes(?,?) } ";  final CallableStatement call=connection.getConnection().prepareCall(query);  call.setInt(1,rawModuleId);  call.setInt(2,moduleId);  call.execute();}  }
class C{  private void dynInit(int C_BPartner_ID){  log.config("C_BPartner_ID=" + C_BPartner_ID);  if (C_BPartner_ID != 0) {    int ShelfLifeMinPct=0;    int ShelfLifeMinDays=0;    String sql="SELECT bp.ShelfLifeMinPct, bpp.ShelfLifeMinPct, bpp.ShelfLifeMinDays " + "FROM C_BPartner bp " + " LEFT OUTER JOIN C_BPartner_Product bpp"+ " ON (bp.C_BPartner_ID=bpp.C_BPartner_ID AND bpp.M_Product_ID=?) "+ "WHERE bp.C_BPartner_ID=?";    PreparedStatement pstmt=null;    ResultSet rs=null;    try {      pstmt=DB.prepareStatement(sql,null);      pstmt.setInt(1,m_M_Product_ID);      pstmt.setInt(2,C_BPartner_ID);      rs=pstmt.executeQuery();      if (rs.next()) {        ShelfLifeMinPct=rs.getInt(1);        int pct=rs.getInt(2);        if (pct > 0)         ShelfLifeMinDays=pct;        ShelfLifeMinDays=rs.getInt(3);      }    } catch (    Exception e) {      log.log(Level.SEVERE,sql,e);    } finally {      DB.close(rs,pstmt);      rs=null;      pstmt=null;    }    if (ShelfLifeMinPct > 0) {      s_sqlMinLife=" AND COALESCE(TRUNC(((daysbetween(asi.GuaranteeDate, SYSDATE))/p.GuaranteeDays)*100),0)>=" + ShelfLifeMinPct;      log.config("PAttributeInstance.dynInit - ShelfLifeMinPct=" + ShelfLifeMinPct);    }    if (ShelfLifeMinDays > 0) {      s_sqlMinLife+=" AND COALESCE((daysbetween(asi.GuaranteeDate, SYSDATE)),0)>=" + ShelfLifeMinDays;      log.config("PAttributeInstance.dynInit - ShelfLifeMinDays=" + ShelfLifeMinDays);    }  }  m_sql=m_table.prepareTable(s_layout,s_sqlFrom,s_sqlWhereWithoutWarehouse + s_sqlNonZero,false,"asi") + " ORDER BY asi.GuaranteeDate, s.QtyOnHand";  m_table.setRowSelectionAllowed(true);  m_table.setMultiSelection(false);  m_table.addMouseListener(this);  m_table.getSelectionModel().addListSelectionListener(this);  refresh();  m_table.getInputMap().put(KeyStroke.getKeyStroke("ENTER"),"doDispose");  m_table.getActionMap().put("doDispose",doDispose);}  }
class C{  private void put(FilterContext ctx){  if (contexts.size() <= MAX_CONTEXTS) {    contexts.offer(ctx);  }}  }
class C{  @Deprecated public static boolean cacheDisabled(){  return false;}  }
class C{  private String inclusiveSlice(){  if (mark >= pos) {    return "";  }  return sign.substring(mark,pos + 1);}  }
class C{  private Conversion(){}  }
class C{  public Name addAll(Name suffix) throws InvalidNameException {  if (suffix instanceof CompoundName) {    impl.addAll(suffix.getAll());    return this;  } else {    throw new InvalidNameException("Not a compound name: " + suffix.toString());  }}  }
class C{  public static void statistics(){  StringBuffer line=new StringBuffer(errors + " error");  if (errors != 1)   line.append("s");  line.append(", " + warnings + " warning");  if (warnings != 1)   line.append("s");  line.append(".");  err(line.toString());}  }
class C{  @Override public Download download(String bucket,String key,File file,TransferManager transferManager){  MockS3Bucket mockS3Bucket=mockS3Buckets.get(bucket);  MockS3Object mockS3Object=mockS3Bucket.getObjects().get(key);  try (FileOutputStream fileOutputStream=new FileOutputStream(file)){    fileOutputStream.write(mockS3Object.getData());  } catch (  IOException e) {    throw new RuntimeException("Error writing to file " + file,e);  }  TransferProgress progress=new TransferProgress();  progress.setTotalBytesToTransfer(mockS3Object.getData().length);  progress.updateProgress(mockS3Object.getData().length);  DownloadImpl download=new DownloadImpl(null,progress,null,null,null,new GetObjectRequest(bucket,key),file,mockS3Object.getObjectMetadata(),false);  download.setState(TransferState.Completed);  return download;}  }
class C{  public Boolean new_queue(String queue_name){  if (has_queue(queue_name)) {    return false;  } else {    LinkedList<Value> new_queue=new LinkedList<Value>();    queue_map.put(queue_name,new_queue);    return true;  }}  }
class C{  public static Solve applyPenalty(Solve solve,int penalty){switch (penalty) {case PENALTY_DNF:    if (solve.getPenalty() == PENALTY_PLUSTWO)     solve.setTime(solve.getTime() - 2000);  solve.setPenalty(PENALTY_DNF);break;case PENALTY_PLUSTWO:if (solve.getPenalty() != PENALTY_PLUSTWO) solve.setTime(solve.getTime() + 2000);solve.setPenalty(PENALTY_PLUSTWO);break;case NO_PENALTY:if (solve.getPenalty() == PENALTY_PLUSTWO) solve.setTime(solve.getTime() - 2000);solve.setPenalty(NO_PENALTY);break;}return solve;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  private void updateHeadKey(long destroyedKey) throws CacheException {  this.headKey=inc(destroyedKey);  if (logger.isTraceEnabled()) {    logger.trace("{}: Incremented HEAD_KEY for region {} to {}",this,this.region.getName(),this.headKey);  }}  }
class C{  public static void newCardGroup(CardGroup cg,int[] cards){  cg.clear();  for (  int c : cards) {    cg.addCard(cardsInPlay.get(Math.abs(c)),Math.signum(c) >= 0);  }}  }
class C{  private StringBuffer stripExceedingChars(StringBuffer reference,int indentLength){  final int tabSize=fPrefs.prefTabSize;  int measured=0;  int chars=reference.length();  int i=0;  for (; measured < indentLength && i < chars; i++) {    char ch=reference.charAt(i);switch (ch) {case '\t':      if (tabSize > 0) {        int reminder=measured % tabSize;        measured+=tabSize - reminder;      }    break;case ' ':  measured++;break;}}int deleteFrom=measured > indentLength ? i - 1 : i;return reference.delete(deleteFrom,chars);}  }
class C{  public static org.oscm.vo.VOCountryVatRate convertToApi(org.oscm.internal.vo.VOCountryVatRate oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOCountryVatRate newVO=new org.oscm.vo.VOCountryVatRate();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setRate(oldVO.getRate());  newVO.setCountry(oldVO.getCountry());  return newVO;}  }
class C{  public @Test final void testCreationNegativ3(){  thrown.expect(IllegalArgumentException.class);  new User(null);}  }
class C{  public void remove() throws UnsupportedOperationException {  if (this.lastIndex < 0) {    throw new IllegalStateException("No header to remove.");  }  this.allHeaders.remove(this.lastIndex);  this.lastIndex=-1;  this.currentIndex--;}  }
class C{  public Boolean isStatsCollectionEnabled(){  return statsCollectionEnabled;}  }
class C{  public static void test4(){  DataFlavor df=new DataFlavor("text/plain-test4; charset=Unicode; class=java.io.Reader",null);  String nat="native4";  List<String> natives=fm.getNativesForFlavor(df);  if (!natives.contains(nat)) {    fm.addUnencodedNativeForFlavor(df,nat);    List<String> nativesNew=fm.getNativesForFlavor(df);    natives.add(nat);    if (!natives.equals(nativesNew)) {      System.err.println("orig=" + natives);      System.err.println("new=" + nativesNew);      throw new RuntimeException("Test failed");    }  }}  }
class C{  public Plane(Vector3 point1,Vector3 point2,Vector3 point3){  set(point1,point2,point3);}  }
class C{  public AxisLabelLayout(String group,int axis,ValuedRangeModel values){  this(group,axis,values,null);}  }
class C{  public File readSyncDirFromMetadata() throws IOException {  File dropboxConfigDir=getUserConfigDir();  if ((dropboxConfigDir != null) && dropboxConfigDir.exists() && dropboxConfigDir.isDirectory()&& dropboxConfigDir.canRead()) {    File hostdb=new File(dropboxConfigDir,DropboxConstants.DROPBOX_HOST_DB);    if (!hostdb.exists()) {      hostdb=new File(dropboxConfigDir,DropboxConstants.DROPBOX_HOST_DB_NEW);    }    if (!hostdb.exists() && OS.getOperatingSystem().isWindows()) {      dropboxConfigDir=getWindowsAlternativeUserConfigDir();      hostdb=new File(dropboxConfigDir,DropboxConstants.DROPBOX_HOST_DB_NEW);    }    if (hostdb.exists() && hostdb.canRead()) {      BufferedReader reader=new BufferedReader(new FileReader(hostdb));      reader.readLine();      String dropboxhome_enc=reader.readLine();      reader.close();      if (dropboxhome_enc != null) {        if (!dropboxhome_enc.isEmpty()) {          String dropboxhome_dec=new String(Base64.decodeBase64(dropboxhome_enc));          logger.info("getDropboxSyncDir: Sync directory resolved to: " + dropboxhome_dec);          File dropboxSyncDir=new File(dropboxhome_dec);          if (dropboxSyncDir.exists()) {            return dropboxSyncDir;          } else {            logger.error("getDropboxSyncDir: Resolved sync directory does not exist!");          }        }      }    } else {      logger.warn("getDropboxSyncDir: Couldn't read dropbox host.db file!");    }  } else {    if (dropboxConfigDir != null) {      logger.warn("getDropboxSyncDir: Couldn't access dropbox config directory: " + dropboxConfigDir.getAbsolutePath());    } else {      logger.warn("getDropboxSyncDir: Couldn't access dropbox config directory");    }  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.118 -0500",hash_original_method="1EAA6FDE909AE941C837793DE6358EFA",hash_generated_method="0B48AA10B2C40A1009726BB6AFB5ADA6") public void copy1DRangeFrom(int off,int count,short[] d){  validateIsInt16();  copy1DRangeFromUnchecked(off,count,d);}  }
class C{  @Override public void onChangedAdded(final RPObject object,final RPObject changes){  super.onChangedAdded(object,changes);  if (changes.has("amount")) {    working=changes.getInt("amount") > 0;    fireChange(PROP_WORKING);  }}  }
class C{  public void revert(){  OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit,this.lastX,this.lastY);}  }
class C{  public SessionChannel createSessionChannel(String connectUrl,EndpointDescription endpoint) throws ServiceResultException {  SecureChannel channel=createSecureChannel(connectUrl,endpoint);  try {    Session session=createSession(channel);    SessionChannel sessionChannel=session.createSessionChannel(channel,this);    return sessionChannel;  } catch (  ServiceResultException se) {    channel.closeAsync();    throw se;  }}  }
class C{  public void addVariable(String variableName,String variableValue){  variables.put(variableName,variableValue);}  }
class C{  private void actionRePost(){  if (m_data.documentQuery && m_data.AD_Table_ID != 0 && m_data.Record_ID != 0 && ADialog.ask(m_data.WindowNo,this,"PostImmediate?")) {    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));    boolean force=forcePost.isSelected();    String error=AEnv.postImmediate(m_data.WindowNo,m_data.AD_Client_ID,m_data.AD_Table_ID,m_data.Record_ID,force);    setCursor(Cursor.getDefaultCursor());    if (error != null)     ADialog.error(0,this,"PostingError-N",error);    actionQuery();  }}  }
class C{  private boolean checkBlockEntry(){  return Constant.NULL_BL_T_LINEBR.has(reader.peek(1));}  }
class C{  public static void compareDMLHDFSFileWithRFile(String rFile,String hdfsDir,double epsilon){  try {    FileSystem fs=FileSystem.get(conf);    Path outDirectory=new Path(hdfsDir);    BufferedReader compareIn=new BufferedReader(new FileReader(rFile));    HashMap<CellIndex,Double> expectedValues=new HashMap<CellIndex,Double>();    HashMap<CellIndex,Double> actualValues=new HashMap<CellIndex,Double>();    String line;    compareIn.readLine();    compareIn.readLine();    while ((line=compareIn.readLine()) != null) {      StringTokenizer st=new StringTokenizer(line," ");      int i=Integer.parseInt(st.nextToken());      int j=Integer.parseInt(st.nextToken());      double v=Double.parseDouble(st.nextToken());      expectedValues.put(new CellIndex(i,j),v);    }    compareIn.close();    FileStatus[] outFiles=fs.listStatus(outDirectory);    for (    FileStatus file : outFiles) {      FSDataInputStream fsout=fs.open(file.getPath());      BufferedReader outIn=new BufferedReader(new InputStreamReader(fsout));      while ((line=outIn.readLine()) != null) {        StringTokenizer st=new StringTokenizer(line," ");        int i=Integer.parseInt(st.nextToken());        int j=Integer.parseInt(st.nextToken());        double v=Double.parseDouble(st.nextToken());        actualValues.put(new CellIndex(i,j),v);      }      outIn.close();    }    int countErrors=0;    for (    CellIndex index : expectedValues.keySet()) {      Double expectedValue=expectedValues.get(index);      Double actualValue=actualValues.get(index);      if (expectedValue == null)       expectedValue=0.0;      if (actualValue == null)       actualValue=0.0;      if (!compareCellValue(expectedValue,actualValue,epsilon,false))       countErrors++;    }    assertTrue("for file " + hdfsDir + " "+ countErrors+ " values are not in equal",countErrors == 0);  } catch (  IOException e) {    fail("unable to read file: " + e.getMessage());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:16.642 -0400",hash_original_method="821BC76B6DA9B55C8308AD5BC14665AA",hash_generated_method="DF94B0048DB84440DBEBA621E3076A47") public void disconnectProfile(BluetoothAdapter adapter,BluetoothDevice device,int profile,String methodName){  if (methodName == null) {    methodName=String.format("disconnectProfile(profile=%d, device=%s)",profile,device);  }  int mask=(ConnectProfileReceiver.STATE_DISCONNECTING_FLAG | ConnectProfileReceiver.STATE_DISCONNECTED_FLAG);  long start=-1;  if (!adapter.isEnabled()) {    fail(String.format("%s bluetooth not enabled",methodName));  }  if (!adapter.getBondedDevices().contains(device)) {    fail(String.format("%s device not paired",methodName));  }  BluetoothProfile proxy=connectProxy(adapter,profile);  assertNotNull(proxy);  ConnectProfileReceiver receiver=getConnectProfileReceiver(device,profile,mask);  int state=proxy.getConnectionState(device);switch (state) {case BluetoothProfile.STATE_CONNECTED:case BluetoothProfile.STATE_CONNECTING:    start=System.currentTimeMillis();  if (profile == BluetoothProfile.A2DP) {    assertTrue(((BluetoothA2dp)proxy).disconnect(device));  } else   if (profile == BluetoothProfile.HEADSET) {    assertTrue(((BluetoothHeadset)proxy).disconnect(device));  } else   if (profile == BluetoothProfile.INPUT_DEVICE) {    assertTrue(((BluetoothInputDevice)proxy).disconnect(device));  }break;case BluetoothProfile.STATE_DISCONNECTED:removeReceiver(receiver);return;case BluetoothProfile.STATE_DISCONNECTING:mask=0;break;default :removeReceiver(receiver);fail(String.format("%s invalid state: state=%d",methodName,state));}long s=System.currentTimeMillis();while (System.currentTimeMillis() - s < CONNECT_DISCONNECT_PROFILE_TIMEOUT) {state=proxy.getConnectionState(device);if (state == BluetoothProfile.STATE_DISCONNECTED && (receiver.getFiredFlags() & mask) == mask) {long finish=receiver.getCompletedTime();if (start != -1 && finish != -1) {writeOutput(String.format("%s completed in %d ms",methodName,(finish - start)));} else {writeOutput(String.format("%s completed",methodName));}removeReceiver(receiver);return;}sleep(POLL_TIME);}int firedFlags=receiver.getFiredFlags();removeReceiver(receiver);fail(String.format("%s timeout: state=%d (expected %d), flags=0x%x (expected 0x%x)",methodName,state,BluetoothProfile.STATE_DISCONNECTED,firedFlags,mask));}  }
class C{  private void refresh(){  Object organization=orgField.getValue();  Object locator=locatorField.getValue();  Object product=productField.getValue();  Object movementType=mtypeField.getValue();  Timestamp movementDateFrom=(Timestamp)dateFField.getValue();  Timestamp movementDateTo=(Timestamp)dateTField.getValue();  refresh(organization,locator,product,movementType,movementDateFrom,movementDateTo,statusBar);}  }
class C{  public Long updateUserOrganisationsByUser(Users us,List<Long> organisations){  try {    LinkedList<Long> orgIdsToAdd=new LinkedList<Long>();    LinkedList<Long> orgIdsToDelete=new LinkedList<Long>();    if (us.getOrganisation_users() != null) {      for (      Long orgIdToAdd : organisations) {        boolean isAlreadyStored=this.checkOrgInStoredList(orgIdToAdd,us.getOrganisation_users());        if (!isAlreadyStored)         orgIdsToAdd.add(orgIdToAdd);      }      for (      Organisation_Users orgUsers : us.getOrganisation_users()) {        Long orgIdStored=orgUsers.getOrganisation().getOrganisation_id();        boolean shouldBeStored=this.checkOrgInList(orgIdStored,organisations);        if (!shouldBeStored)         orgIdsToDelete.add(orgIdStored);      }      for (      Long orgToAdd : orgIdsToAdd) {        this.addUserToOrganisation(us.getUser_id(),orgToAdd,us.getUser_id());      }      for (      Long orgToDel : orgIdsToDelete) {        this.deleteUserFromOrganisation(new Long(3),us.getUser_id(),orgToDel);      }    }  } catch (  Exception err) {    log.error("[updateUserOrganisationsByUser] ",err);  }  return null;}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public String inFormat(String format){  return format.replaceAll("\\$HOST",getIp()).replaceAll("\\$EXTERNAL_PORT",String.valueOf(getExternalPort())).replaceAll("\\$INTERNAL_PORT",String.valueOf(getInternalPort()));}  }
class C{  public CSVParser(char separator,char quotechar,char escape){  this(separator,quotechar,escape,DEFAULT_STRICT_QUOTES);}  }
class C{  public static SamReader makeSamReader(InputStream stream) throws IOException {  return makeSamReader(stream,null);}  }
class C{  protected void flushPushValues() throws IOException {  out.writeUI8(PUSH);  count++;  ByteArrayOutputStream baout=new ByteArrayOutputStream();  OutStream bout=new OutStream(baout);  for (Iterator enumerator=pushValues.iterator(); enumerator.hasNext(); ) {    Object value=enumerator.next();    if (value instanceof String) {      bout.writeUI8(PUSHTYPE_STRING);      bout.writeString(value.toString());    } else     if (value instanceof Boolean) {      bout.writeUI8(PUSHTYPE_BOOLEAN);      bout.writeUI8(((Boolean)value).booleanValue() ? 1 : 0);    } else     if (value instanceof Integer) {      bout.writeUI8(PUSHTYPE_INTEGER);      bout.writeSI32(((Integer)value).intValue());    } else     if (value instanceof Short) {      bout.writeUI8(PUSHTYPE_LOOKUP);      bout.writeUI8(((Short)value).intValue());    } else     if (value instanceof Byte) {      bout.writeUI8(SWFActionCodes.PUSHTYPE_REGISTER);      bout.writeUI8(((Byte)value).intValue());    } else     if (value instanceof Float) {      bout.writeUI8(PUSHTYPE_FLOAT);      bout.writeFloat(((Float)value).floatValue());    } else     if (value instanceof Double) {      bout.writeUI8(PUSHTYPE_DOUBLE);      bout.writeDouble(((Double)value).doubleValue());    } else {      bout.writeUI8(PUSHTYPE_NULL);    }  }  pushValues.clear();  bout.flush();  byte[] data=baout.toByteArray();  out.writeUI16(data.length);  out.write(data);}  }
class C{  private static TwoDNode construct(int d,IPoint p){  if (d == 1) {    return new VerticalNode(p);  } else {    return new HorizontalNode(p);  }}  }
class C{  public C context(){  return context;}  }
class C{  Object stringToValue(String text,Format f) throws ParseException {  if (f == null) {    return text;  }  return f.parseObject(text);}  }
class C{  protected void prepare(){  StringBuffer sb=new StringBuffer("Record_ID=").append(getRecord_ID());  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("C_Period_ID"))     p_C_Period_ID=para[i].getParameterAsInt(); else     if (name.equals("PA_Hierarchy_ID"))     p_PA_Hierarchy_ID=para[i].getParameterAsInt(); else     if (name.equals("Org_ID"))     p_Org_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_BPartner_ID"))     p_C_BPartner_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("M_Product_ID"))     p_M_Product_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_Project_ID"))     p_C_Project_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_Activity_ID"))     p_C_Activity_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_SalesRegion_ID"))     p_C_SalesRegion_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_Campaign_ID"))     p_C_Campaign_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("User1_ID"))     p_User1_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("User2_ID"))     p_User2_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("UserElement1_ID"))     p_UserElement1_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("UserElement2_ID"))     p_UserElement2_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("DetailsSourceFirst"))     p_DetailsSourceFirst="Y".equals(para[i].getParameter()); else     if (name.equals("PA_ReportCube_ID"))     p_PA_ReportCube_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  if (p_Org_ID != 0)   m_parameterWhere.append(" AND ").append(MReportTree.getWhereClause(getCtx(),p_PA_Hierarchy_ID,MAcctSchemaElement.ELEMENTTYPE_Organization,p_Org_ID));  if (p_C_BPartner_ID != 0)   m_parameterWhere.append(" AND ").append(MReportTree.getWhereClause(getCtx(),p_PA_Hierarchy_ID,MAcctSchemaElement.ELEMENTTYPE_BPartner,p_C_BPartner_ID));  if (p_M_Product_ID != 0)   m_parameterWhere.append(" AND ").append(MReportTree.getWhereClause(getCtx(),p_PA_Hierarchy_ID,MAcctSchemaElement.ELEMENTTYPE_Product,p_M_Product_ID));  if (p_C_Project_ID != 0)   m_parameterWhere.append(" AND ").append(MReportTree.getWhereClause(getCtx(),p_PA_Hierarchy_ID,MAcctSchemaElement.ELEMENTTYPE_Project,p_C_Project_ID));  if (p_C_Activity_ID != 0)   m_parameterWhere.append(" AND ").append(MReportTree.getWhereClause(getCtx(),p_PA_Hierarchy_ID,MAcctSchemaElement.ELEMENTTYPE_Activity,p_C_Activity_ID));  if (p_C_Campaign_ID != 0)   m_parameterWhere.append(" AND C_Campaign_ID=").append(p_C_Campaign_ID);  if (p_C_SalesRegion_ID != 0)   m_parameterWhere.append(" AND ").append(MReportTree.getWhereClause(getCtx(),p_PA_Hierarchy_ID,MAcctSchemaElement.ELEMENTTYPE_SalesRegion,p_C_SalesRegion_ID));  if (p_User1_ID != 0)   m_parameterWhere.append(" AND ").append(MReportTree.getWhereClause(getCtx(),p_PA_Hierarchy_ID,MAcctSchemaElement.ELEMENTTYPE_UserList1,p_User1_ID));  if (p_User2_ID != 0)   m_parameterWhere.append(" AND ").append(MReportTree.getWhereClause(getCtx(),p_PA_Hierarchy_ID,MAcctSchemaElement.ELEMENTTYPE_UserList2,p_User2_ID));  if (p_UserElement1_ID != 0)   m_parameterWhere.append(" AND UserElement1_ID=").append(p_UserElement1_ID);  if (p_UserElement2_ID != 0)   m_parameterWhere.append(" AND UserElement2_ID=").append(p_UserElement2_ID);  m_report=new MReport(getCtx(),getRecord_ID(),null);  sb.append(" - ").append(m_report);  setPeriods();  sb.append(" - C_Period_ID=").append(p_C_Period_ID).append(" - ").append(m_parameterWhere);  ProcessInfoParameter[] pi=getProcessInfo().getParameter();  pi[0].setParameter(new Integer(p_C_Period_ID));  getProcessInfo().setParameter(pi);  if (p_PA_ReportCube_ID > 0)   m_parameterWhere.append(" AND PA_ReportCube_ID=").append(p_PA_ReportCube_ID);  log.info(sb.toString());}  }
class C{  protected final void CMP64(Instruction s,RegisterOperand val1,Operand val2,ConditionOperand cond,boolean immediate){  if (VM.VerifyAssertions)   VM._assert(VM.BuildFor64Addr);  RegisterOperand cr=regpool.makeTempCondition();  Operator op;  if (immediate) {    op=cond.isUNSIGNED() ? PPC64_CMPLI : PPC64_CMPI;  } else {    op=cond.isUNSIGNED() ? PPC64_CMPL : PPC64_CMP;  }  EMIT(MIR_Binary.create(op,cr,val1,val2));  EMIT(MIR_CondBranch.mutate(s,PPC_BCOND,cr.copyD2U(),new PowerPCConditionOperand(cond),IfCmp.getTarget(s),IfCmp.getBranchProfile(s)));}  }
class C{  public static String deleteAny(String inString,String charsToDelete){  if (!hasLength(inString) || !hasLength(charsToDelete)) {    return inString;  }  StringBuilder sb=new StringBuilder();  for (int i=0; i < inString.length(); i++) {    char c=inString.charAt(i);    if (charsToDelete.indexOf(c) == -1) {      sb.append(c);    }  }  return sb.toString();}  }
class C{  private RunLengthDecode(ByteBuffer buf){  this.buf=buf;}  }
class C{  private void emitListAdd(Method method,String fieldName,StringBuilder builder){  builder.append("    public void ");  builder.append(getListAdderName(fieldName));  builder.append("(");  builder.append(getTypeArgumentImplName((ParameterizedType)method.getGenericReturnType(),0));  builder.append(" v) {\n      ");  builder.append(getEnsureName(fieldName));  builder.append("();\n      ");  builder.append(fieldName);  builder.append(".add(v);\n");  builder.append("    }\n\n");}  }
class C{  public RemoveColumnChange(Table table,Column column){  super(table);  _column=column;}  }
class C{  private boolean removeExpiredAttachmentPoints(List<AttachmentPoint> apList){  List<AttachmentPoint> expiredAPs=new ArrayList<AttachmentPoint>();  if (apList == null)   return false;  for (  AttachmentPoint ap : apList) {    if (ap.getLastSeen() + AttachmentPoint.INACTIVITY_INTERVAL < System.currentTimeMillis())     expiredAPs.add(ap);  }  if (expiredAPs.size() > 0) {    apList.removeAll(expiredAPs);    return true;  } else   return false;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MInOutLineMA[");  sb.append("M_InOutLine_ID=").append(getM_InOutLine_ID()).append(",M_AttributeSetInstance_ID=").append(getM_AttributeSetInstance_ID()).append(", Qty=").append(getMovementQty()).append("]");  return sb.toString();}  }
class C{  public Object create(String url) throws MalformedURLException, ClassNotFoundException {  BurlapMetaInfoAPI metaInfo;  metaInfo=(BurlapMetaInfoAPI)create(BurlapMetaInfoAPI.class,url);  String apiClassName=(String)metaInfo._burlap_getAttribute("java.api.class");  if (apiClassName == null)   throw new BurlapRuntimeException(url + " has an unknown api.");  ClassLoader loader=Thread.currentThread().getContextClassLoader();  Class apiClass=Class.forName(apiClassName,false,loader);  return create(apiClass,url);}  }
class C{  public void cleanupStats(Block block){  block.getAllConnections(mTempConnecitons);  for (int i=0; i < mTempConnecitons.size(); i++) {    mConnectionManager.removeConnection(mTempConnecitons.get(i));  }  mTempConnecitons.clear();  List<Input> inputs=block.getInputs();  for (int i=0; i < inputs.size(); i++) {    Input input=inputs.get(i);    List<Field> fields=input.getFields();    for (int j=0; j < fields.size(); j++) {      Field field=fields.get(j);      if (field instanceof FieldVariable) {        mVariableReferences.get(((FieldVariable)field).getVariable()).remove(field);      }    }    if (input.getConnection() != null && input.getConnection().getTargetBlock() != null) {      cleanupStats(input.getConnection().getTargetBlock());    }  }  if (block.getNextBlock() != null) {    cleanupStats(block.getNextBlock());  }}  }
class C{  private void doRemoveMapping(String user,String domain,String mapping) throws RecipientRewriteTableException {  EntityManager entityManager=entityManagerFactory.createEntityManager();  final EntityTransaction transaction=entityManager.getTransaction();  try {    transaction.begin();    entityManager.createNamedQuery("deleteMapping").setParameter("user",user).setParameter("domain",domain).setParameter("targetAddress",mapping).executeUpdate();    transaction.commit();  } catch (  PersistenceException e) {    getLogger().debug("Failed to remove mapping",e);    if (transaction.isActive()) {      transaction.rollback();    }    throw new RecipientRewriteTableException("Unable to remove mapping",e);  } finally {    entityManager.close();  }}  }
class C{  public void zoom(float scaleX,float scaleY,float x,float y){  Matrix save=mViewPortHandler.zoom(scaleX,scaleY,x,-y);  mViewPortHandler.refresh(save,this,true);}  }
class C{  private int clipOnLWUITBounds(Component lwuitComponent,Graphics rimGraphics){  int result=0;  Component parent=lwuitComponent;  while (parent != null) {    int x=parent.getAbsoluteX() + parent.getScrollX();    int y=parent.getAbsoluteY() + parent.getScrollY();    rimGraphics.pushRegion(x,y,parent.getWidth(),parent.getHeight(),0,0);    rimGraphics.translate(-rimGraphics.getTranslateX(),-rimGraphics.getTranslateY());    parent=parent.getParent();    result++;  }  return result;}  }
class C{  private static float[] ignoreIdentity(final float[] value){  boolean isIdentity=true;  if (value != null) {    final int count=value.length;    for (int aa=0; aa < count; aa+=2) {      if (value[aa] == 0f && value[aa + 1] == 1f) {      } else {        isIdentity=false;        aa=count;      }    }  }  if (isIdentity) {    return null;  } else {    return value;  }}  }
class C{  public void register(PhysicalObject2D objCol){  objBPCollision.register(objCol);}  }
class C{  public final void test_verify() throws Exception {  mySSLSession session=new mySSLSession("localhost",1080,null);  HostnameVerifier hv=HttpsURLConnection.getDefaultHostnameVerifier();  assertFalse(hv.verify("localhost",session));}  }
class C{  private void readApps(XmlPullParser parser,Set<String> apps) throws XmlPullParserException, IOException {  while (parser.next() != XmlPullParser.END_TAG) {    if (parser.getEventType() != XmlPullParser.START_TAG) {      continue;    }    String name=parser.getName();    if (TAG_APP.equals(name)) {      String packageName=parser.getAttributeValue(null,ATTRIBUTE_PACKAGE_NAME);      if (packageName != null) {        apps.add(packageName);      }      skipCurrentTag(parser);    }  }}  }
class C{  public void trace(String s){  lastPrint=0;  println(s);}  }
class C{  public void close(){  if (dialog != null) {    dialog.setVisible(false);    dialog.dispose();    dialog=null;    pane=null;    myBar=null;  }}  }
class C{  RegionTTLExpiryTask(LocalRegion reg){  super(reg);}  }
class C{  public boolean atEOF(){  return (this.len < 0);}  }
class C{  public static <K,V>Builder<K,V> builder(){  return new Builder();}  }
class C{  public static Date ceiling(final Object date,final int field){  if (date == null) {    throw new IllegalArgumentException("The date must not be null");  }  if (date instanceof Date) {    return ceiling((Date)date,field);  } else   if (date instanceof Calendar) {    return ceiling((Calendar)date,field).getTime();  } else {    throw new ClassCastException("Could not find ceiling of for type: " + date.getClass());  }}  }
class C{  public void pointerReleased(int[] x,int[] y){  pointerReleased(x[0],y[0]);}  }
class C{  @Override public synchronized void run(){  while (!shutdown) {    final Iterator iter=connectionManagers.iterator();    while (iter.hasNext()) {      final HttpConnectionManager connectionManager=(HttpConnectionManager)iter.next();      handleCloseIdleConnections(connectionManager);    }    try {      this.wait(timeoutInterval);    } catch (    final InterruptedException e) {    }  }  connectionManagers.clear();}  }
class C{  public static Date dateFrom(final Date date,final long duration,final CalendarUnit unit,final Occurrence occurrence){  final long time=timeFrom(date.getTime(),duration,unit,occurrence);  final Date newDate=new Date(time);  return newDate;}  }
class C{  protected FilterList buildQualifierFilter(List<QualifierFilterEntity> qualifierFilters){  FilterList list=new FilterList(Operator.MUST_PASS_ALL);  for (  QualifierFilterEntity entry : qualifierFilters) {    if (entry.getKeyType() == TokenType.EXP || entry.getValueType() == TokenType.EXP || entry.getKeyType() != TokenType.ID) {      if (!EagleConfigFactory.load().isCoprocessorEnabled()) {        LOG.warn("Expression in filter may not support, because custom filter and coprocessor is disabled: " + entry.toString());      }      list.addFilter(buildExpressionBasedFilter(entry));      continue;    }    String qualifierName=entry.getKey();    if (!isTag(entry.getKey())) {      Qualifier qualifier=_ed.getDisplayNameMap().get(entry.getKey());      qualifierName=qualifier.getQualifierName();    }    ByteArrayComparable comparable;    if (ComparisonOperator.IN.equals(entry.getOp()) || ComparisonOperator.NOT_IN.equals(entry.getOp())) {      Filter setFilter=buildListQualifierFilter(entry);      if (setFilter != null) {        list.addFilter(setFilter);      }    } else {      if (TokenType.NULL.equals(entry.getValueType())) {        if (ComparisonOperator.EQUAL.equals(entry.getOp()) || ComparisonOperator.NOT_EQUAL.equals(entry.getOp()) || ComparisonOperator.IS.equals(entry.getOp())|| ComparisonOperator.IS_NOT.equals(entry.getOp()))         comparable=new NullComparator(); else         throw new IllegalArgumentException("Operation: " + entry.getOp() + " with NULL is not supported yet: "+ entry.toString()+ ", avaliable options: [=, !=, is, is not] null|NULL");      } else       if (ComparisonOperator.CONTAINS.equals(entry.getOp()) || ComparisonOperator.NOT_CONTAINS.equals(entry.getOp())) {        comparable=new SubstringComparator(entry.getValue());      } else       if (ComparisonOperator.LIKE.equals(entry.getOp()) || ComparisonOperator.NOT_LIKE.equals(entry.getOp())) {        RegexStringComparator _comparator=new RegexStringComparator(buildQualifierRegex(entry.getValue()));        _comparator.setCharset(_charset);        comparable=_comparator;      } else {        Class type=EntityQualifierUtils.getType(_ed,entry.getKey());        if (!EagleConfigFactory.load().isCoprocessorEnabled() || type == null || TypedByteArrayComparator.get(type) == null) {          comparable=new BinaryComparator(EntityQualifierUtils.toBytes(_ed,entry.getKey(),entry.getValue()));        } else {          comparable=new TypedByteArrayComparator(EntityQualifierUtils.toBytes(_ed,entry.getKey(),entry.getValue()),type);        }      }      SingleColumnValueFilter filter=new SingleColumnValueFilter(_ed.getColumnFamily().getBytes(),qualifierName.getBytes(),convertToHBaseCompareOp(entry.getOp()),comparable);      filter.setFilterIfMissing(_filterIfMissing);      list.addFilter(filter);    }  }  return list;}  }
class C{  public Quaterniond identity(){  x=0.0;  y=0.0;  z=0.0;  w=1.0;  return this;}  }
class C{  public void paintColorChooserBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public boolean invalidateIt(){  log.info(toString());  setDocAction(DOCACTION_Prepare);  return true;}  }
class C{  public static SoapMessageImpl readRequest(String contentType,InputStream inputStream) throws Exception {  log.info("readRequest(contentType={})",contentType);  DecoderCallback cb=new DecoderCallback();  SoapMessageDecoder decoder=new SoapMessageDecoder(contentType,cb);  decoder.parse(inputStream);  return cb.getSoapMessage();}  }
class C{  public static long toEpochDay(int packedDate){  long y=PackedLocalDate.getYear(packedDate);  long m=PackedLocalDate.getMonthValue(packedDate);  long total=0;  total+=365 * y;  if (y >= 0) {    total+=(y + 3) / 4 - (y + 99) / 100 + (y + 399) / 400;  } else {    total-=y / -4 - y / -100 + y / -400;  }  total+=((367 * m - 362) / 12);  total+=getDayOfMonth(packedDate) - 1;  if (m > 2) {    total--;    if (!isLeapYear(packedDate)) {      total--;    }  }  return total - DAYS_0000_TO_1970;}  }
class C{  public void removeLastLane(){  if (lanes.size() > 1) {    Lane lane=lanes.remove(lanes.size() - 1);    lane.deleteAllLinks();    altSpace.getChildren().remove(lane);    initiateConnectionChanges();  }}  }
class C{  private void runGnuplotScript(String gnuplotScriptName,int iteration){  String pathToSpecificAnalysisDir=scenario.getConfig().controler().getOutputDirectory() + "ITERS/it." + iteration+ "/analysis";  String relativePathToGnuplotScript="../../../../../analysis/" + gnuplotScriptName + ".p";  log.info("execute command: cd " + pathToSpecificAnalysisDir);  log.info("and afterwards: gnuplot " + relativePathToGnuplotScript);  GnuplotUtils.runGnuplotScript(pathToSpecificAnalysisDir,relativePathToGnuplotScript);}  }
class C{  public static JSONArray toJSONArray(JSONArray names,String string) throws JSONException {  return toJSONArray(names,new JSONTokener(string));}  }
class C{  public void renderShaders(float partialTicks){  if (this.worldShader != null && this.isRequired() && this.canUseShaders()) {    Framebuffer mainFramebuffer=Minecraft.getMinecraft().getFramebuffer();    Framebuffer blitFramebuffer=this.blitBuffer.getFramebuffer(mainFramebuffer.framebufferWidth,mainFramebuffer.framebufferHeight);    ;    Framebuffer targetFramebuffer1=mainFramebuffer;    Framebuffer targetFramebuffer2=blitFramebuffer;    int renderPasses=MathHelper.floor_double(this.worldShader.getLightSourcesAmount() / WorldShader.MAX_LIGHT_SOURCES_PER_PASS) + 1;    renderPasses=1;    Minecraft.getMinecraft().entityRenderer.setupOverlayRendering();    targetFramebuffer2.framebufferClear();    GL11.glDisable(GL11.GL_ALPHA_TEST);    for (int i=0; i < renderPasses; i++) {      this.worldShader.setRenderPass(i);      this.worldShader.create(targetFramebuffer2).setSource(targetFramebuffer1.framebufferTexture).setRestoreGlState(true).setMirrorY(false).setClearDepth(true).setClearColor(false).render(partialTicks);      Framebuffer previous=targetFramebuffer2;      targetFramebuffer2=targetFramebuffer1;      targetFramebuffer1=previous;    }    GlStateManager.setActiveTexture(OpenGlHelper.defaultTexUnit);    if (targetFramebuffer1 != mainFramebuffer) {      mainFramebuffer.bindFramebuffer(false);      float renderWidth=(float)targetFramebuffer1.framebufferTextureWidth;      float renderHeight=(float)targetFramebuffer1.framebufferTextureHeight;      GlStateManager.viewport(0,0,(int)renderWidth,(int)renderHeight);      GlStateManager.matrixMode(GL11.GL_PROJECTION);      GlStateManager.loadIdentity();      GlStateManager.ortho(0.0D,renderWidth,renderHeight,0.0D,1000.0D,3000.0D);      GlStateManager.matrixMode(GL11.GL_MODELVIEW);      GlStateManager.loadIdentity();      GlStateManager.translate(0.0F,0.0F,-2000.0F);      GlStateManager.color(1,1,1,1);      GlStateManager.enableTexture2D();      targetFramebuffer1.bindFramebufferTexture();      GlStateManager.depthMask(false);      GlStateManager.colorMask(true,true,true,true);      Tessellator tessellator=Tessellator.getInstance();      VertexBuffer vb=tessellator.getBuffer();      vb.begin(GL11.GL_QUADS,DefaultVertexFormats.POSITION_TEX);      vb.pos(0.0D,(double)targetFramebuffer1.framebufferTextureHeight,500.0D).tex(0,0).endVertex();      vb.pos((double)targetFramebuffer1.framebufferTextureWidth,(double)targetFramebuffer1.framebufferTextureHeight,500.0D).tex(1,0).endVertex();      vb.pos((double)targetFramebuffer1.framebufferTextureWidth,0.0D,500.0D).tex(1,1).endVertex();      vb.pos(0.0D,0.0D,500.0D).tex(0,1).endVertex();      tessellator.draw();      GlStateManager.depthMask(true);      GlStateManager.colorMask(true,true,true,true);    }    this.worldShader.setRenderPass(0);    this.worldShader.renderPostEffects(partialTicks);    if (!this.isHDRActive() && this.toneMappingShader != null) {      this.toneMappingShader.delete();      this.toneMappingShader=null;    }    if (this.toneMappingShader != null) {      this.toneMappingShader.setExposure(1.0F);      this.toneMappingShader.setGamma(1.0F);      this.toneMappingShader.create(mainFramebuffer).setSource(mainFramebuffer.framebufferTexture).setBlitFramebuffer(blitFramebuffer).setRestoreGlState(true).setMirrorY(false).setClearDepth(false).setClearColor(false).render(partialTicks);    }    GL11.glEnable(GL11.GL_ALPHA_TEST);  }}  }
class C{  public int hashCode(){  return (int)value;}  }
class C{  public boolean addNote(Note bug,NoteComment comment){  if (bug.isNew()) {    Log.d(DEBUG_TAG,"adding note");    HttpURLConnection connection=null;    try {      try {        String encodedComment=URLEncoder.encode(comment.getText(),"UTF-8");        URL addNoteUrl=getAddNoteUrl((bug.getLat() / 1E7d),(bug.getLon() / 1E7d),encodedComment);        connection=openConnectionForWriteAccess(addNoteUrl,"POST","text/xml");        OutputStreamWriter out=new OutputStreamWriter(connection.getOutputStream(),Charset.defaultCharset());        out.flush();        if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {          throwUnexpectedRequestException(connection);        }        parseBug(bug,connection.getInputStream());        return true;      } catch (      XmlPullParserException e) {        Log.e(DEBUG_TAG,"addNote:Exception",e);      }catch (      IOException e) {        Log.e(DEBUG_TAG,"addNote:Exception",e);      }    }  finally {      disconnect(connection);    }  }  return false;}  }
class C{  @Override public int gotoDest(PdfObject aData,final int eventType,int command){  final boolean debugDest=false;  int page=-1;  if (showMethods) {    System.out.println("DefaultActionHandler.gotoDest()");  }  PdfArrayIterator Dest=DestHandler.getDestFromObject(aData,currentPdfFile);  if (Dest != null) {    if (eventType == MOUSECLICKED) {      String filename=aData.getTextStreamValue(PdfDictionary.F);      if (filename == null) {        final PdfObject fDic=aData.getDictionary(PdfDictionary.F);        if (fDic != null) {          filename=fDic.getTextStreamValue(PdfDictionary.F);        }      }      if (filename != null && filename.indexOf('/') == -1 && filename.indexOf('\\') == -1) {        filename=decode_pdf.getObjectStore().getCurrentFilepath() + filename;      }      if (filename != null) {        int index=filename.indexOf('\\');        while (index != -1) {          filename=filename.substring(0,index) + '/' + filename.substring(index + ("\\".length()),filename.length());          index=filename.indexOf('\\');        }        final int slashIndex=filename.indexOf(":/");        if ((slashIndex == -1 || slashIndex > 1) && !filename.startsWith("/")) {          final File fileStart=new File(decode_pdf.getFileName());          filename=fileStart.getParent() + '/' + filename;        }        index=filename.indexOf("/../");        if (index != -1) {          int start=index - 1;          while (start > 0) {            if ((filename.charAt(start) == '/') || start == 0) {              break;            }            start--;          }          if (start > 0) {            filename=filename.substring(0,start) + filename.substring(index + 3,filename.length());          }        }      }      String pageRef="";      if (Dest.getTokenCount() > 0) {        if (Dest.isNextValueNull()) {          return -1;        }        final int possiblePage=Dest.getNextValueAsInteger(false) + 1;        pageRef=Dest.getNextValueAsString(true);        if (pageRef.endsWith(" R")) {          page=decode_pdf.getPageFromObjectRef(pageRef);        } else         if (possiblePage > 0) {          page=possiblePage;        }        if (debugDest) {          System.out.println("pageRef=" + pageRef + " page="+ page+ ' '+ aData.getObjectRefAsString());        }        if (page == -1) {          final String newRef=currentPdfFile.convertNameToRef(pageRef);          if (newRef != null && newRef.endsWith(" R")) {            page=decode_pdf.getPageFromObjectRef(newRef);          }        }      }      if (Dest.getTokenCount() == 0 && aData.getNameAsConstant(PdfDictionary.S) == PdfDictionary.GoToR) {        command=PdfDictionary.GoToR;      }      if (debugDest) {        System.out.println("Command=" + PdfDictionary.showAsConstant(command));      }switch (command) {case PdfDictionary.Dest:        if (Dest.getTokenCount() > 1) {          final int type=Dest.getNextValueAsConstant(true);          if (debugDest) {            System.out.println("Type=" + PdfDictionary.showAsConstant(type));          }          Integer scale=null;          Rectangle position=null;switch (type) {case PdfDictionary.XYZ:            final float x=Dest.getNextValueAsFloat();          final float y=Dest.getNextValueAsFloat();        position=new Rectangle((int)x,(int)y,10,10);      break;case PdfDictionary.Fit:    scale=-3;  break;case PdfDictionary.FitB:scale=-3;break;case PdfDictionary.FitH:scale=-1;if (Dest.hasMoreTokens()) {final float top=Dest.getNextValueAsFloat();position=new Rectangle(10,(int)top,10,10);}break;case PdfDictionary.FitR:break;}changeTo(filename,page,position,scale,true);}break;case PdfDictionary.GoTo:if (page != -1) {changeTo(null,page,null,null,true);}break;case PdfDictionary.GoToR:final int index=pageRef.indexOf("P.");if (index != -1) {pageRef=pageRef.substring(index + 2,pageRef.length());page=Integer.parseInt(pageRef);} else if (pageRef.equals("F")) {page=1;} else {page=1;}if (new File(filename).exists()) {if (page != -1) {changeTo(filename,page,null,null,true);}LogWriter.writeFormLog("{DefaultActionHamdler.A} Form has GoToR command, needs methods for opening new file on page specified",FormStream.debugUnimplemented);} else {showMessageDialog("The file specified " + filename + " Does Not Exist!");}break;}}}return page;}  }
class C{  private boolean isArrayCall(MethodEntry entry){  if (entry.className.startsWith("[")) {    return true;  }  return false;}  }
class C{  public boolean hasSectionEndScript(){  return hasExtension(GwoSectionEndScript.class);}  }
class C{  public Task<BucketRestRep> create(BucketParam input,URI project){  URI uri=client.uriBuilder(baseUrl).queryParam("project",project).build();  TaskResourceRep task=client.postURI(TaskResourceRep.class,input,uri);  return new Task<>(client,task,resourceClass);}  }
class C{  public JSONArray put(int index,int value) throws JSONException {  this.put(index,new Integer(value));  return this;}  }
class C{  public int splitSegment(Point2D.Double split,double tolerance){  int i=findSegment(split,tolerance);  int nextI=(i + 1) % size();  if (i != -1) {    if ((get(i).mask & C2_MASK) == C2_MASK && (get(nextI).mask & C1_MASK) == 0) {      add(i + 1,new Node(C2_MASK,split,split,split));    } else     if ((get(i).mask & C2_MASK) == 0 && (get(nextI).mask & C1_MASK) == C1_MASK) {      add(i + 1,new Node(C1_MASK,split,split,split));    } else     if ((get(i).mask & C2_MASK) == C2_MASK && (get(nextI).mask & C1_MASK) == C1_MASK) {      add(i + 1,new Node(C1_MASK | C2_MASK,split,split,split));    } else {      add(i + 1,new Node(split));    }  }  return i + 1;}  }
class C{  public void verifyThreeStageTreeGraph() throws Throwable {  String name=UUID.randomUUID().toString();  int stageCount=3;  int recursionDepth=stageCount - 1;  createQueryTargetServices(name,recursionDepth);  GraphQueryTask finalState;  int[] resultCounts={this.serviceCount,this.serviceCount * this.linkCount,this.serviceCount * this.linkCount * this.linkCount};  createAndVerifyTreeGraph(resultCounts,stageCount);  createAndVerifyTreeGraphWithStageFiltering(stageCount);  finalState=createAndVerifyTreeGraphDirect(stageCount,resultCounts);  QueryTask finishedFirstStage=Utils.clone(finalState.stages.get(0));  createAndVerifyTreeGraphWithZeroStageResults(stageCount,finishedFirstStage,resultCounts);  createAndVerifyDirectTreeGraphZeroStageResults(stageCount,resultCounts,finishedFirstStage);  QueryTask stageWithResults=createGraphQueryStage(0);  stageWithResults.querySpec.resultLimit=this.serviceCount / 2;  createAndVerifyDirectTreeGraphWithZeroStagePaginatedResults(stageCount,stageWithResults);  this.isFailureExpected=true;  stageWithResults=createGraphQueryStage(0);  stageWithResults.querySpec.resultLimit=this.serviceCount / 2;  stageWithResults.querySpec.options.remove(QueryOption.SELECT_LINKS);  createAndVerifyDirectTreeGraphWithZeroStagePaginatedResults(stageCount,stageWithResults);  this.isFailureExpected=false;}  }
class C{  public void zoomInImage(float scale,float centerX,float centerY){  if (scale <= getMaxScale()) {    postScale(scale / getCurrentScale(),centerX,centerY);  }}  }
class C{  @SuppressWarnings("unused") public static int dpToPx(float dp,Resources resources){  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,resources.getDisplayMetrics());  return (int)px;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildmagicbarmaid(zone);}  }
class C{  public T caseAttribute_(Attribute_ object){  return null;}  }
class C{  protected int string2() throws IOException {  start=position;  loop:   for (; ; ) {switch (nextChar()) {case -1:      throw new ParseException("eof",reader.getLine(),reader.getColumn());case '"':    break loop;}}nextChar();return STRING;}  }
class C{  public Config(SamlAuthorityConfiguration samlAuthorityConfig,TokenRestrictions tokenRestrictions,Collection<List<Certificate>> validCerts,long clockTolerance,Collection<IDPConfig> inExternalIdps){  Validate.notNull(samlAuthorityConfig);  Validate.notNull(tokenRestrictions);  Validate.notEmpty(validCerts);  List<Certificate> authorityCert=samlAuthorityConfig.getSigningCertificateChain();  boolean authorityCertInValidCerts=false;  for (  List<Certificate> currentChain : validCerts) {    Validate.notEmpty(currentChain);    Validate.noNullElements(currentChain);    if (!authorityCertInValidCerts && currentChain.equals(authorityCert)) {      authorityCertInValidCerts=true;    }  }  Validate.isTrue(authorityCertInValidCerts,"signing certificate chain is not in valid chains.");  Validate.isTrue(clockTolerance >= 0);  this.samlAuthorityConfig=samlAuthorityConfig;  this.validCerts=validCerts;  this.clockTolerance=clockTolerance;  this.tokenRestrictions=tokenRestrictions;  HashMap<String,IDPConfig> idpsSet=new HashMap<String,IDPConfig>();  if (inExternalIdps != null) {    for (    IDPConfig conf : inExternalIdps) {      if (conf != null) {        idpsSet.put(conf.getEntityID(),conf);      }    }  }  this.externalIdps=Collections.unmodifiableMap(idpsSet);}  }
class C{  public Map<String,Long> update(Statement stmt,List<Bin> bins,Qualifier... qualifiers){  if (qualifiers != null && qualifiers.length == 1 && qualifiers[0] instanceof KeyQualifier) {    KeyQualifier keyQualifier=(KeyQualifier)qualifiers[0];    Key key=keyQualifier.makeKey(stmt.getNamespace(),stmt.getSetName());    this.client.put(this.updatePolicy,key,bins.toArray(new Bin[0]));    Map<String,Long> result=new HashMap<String,Long>();    result.put("read",1L);    result.put("write",1L);    return result;  } else {    KeyRecordIterator results=select(stmt,true,null,qualifiers);    return update(results,bins);  }}  }
class C{  public static void checkNull(Object o,String msg){  if (o != null)   error(msg);}  }
class C{  public void estimateCPTs(BayesNet bayesNet) throws Exception {  throw new Exception("Incorrect BayesNetEstimator: use subclass instead.");}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  Set roleNames=(Set)in.readObject();  Set roles=new HashSet(roleNames.size());  for (Iterator iter=roleNames.iterator(); iter.hasNext(); ) {    String name=(String)iter.next();    roles.add(InternalRole.getRole(name));  }  this.failedRoles=roles;}  }
class C{  protected boolean isCachingAllowed(){  return false;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (methodName_1: ");  result.append(methodName_1);  result.append(')');  return result.toString();}  }
class C{  public static AArch64Address createAddress(AddressingMode addressingMode,Register base,Register offset,int immediate,boolean isScaled,AArch64Assembler.ExtendType extendType){  return new AArch64Address(base,offset,immediate,isScaled,extendType,addressingMode);}  }
class C{  public DirectionButton(Icon icon,Icon downIcon,String direction,String description,ActionListener l,ButtonGroup group,boolean selected){  super();  this.addActionListener(l);  this.setOpaque(false);  setFocusPainted(false);  setHorizontalTextPosition(CENTER);  group.add(this);  setIcon(icon);  setSelectedIcon(downIcon);  setActionCommand(direction);  getAccessibleContext().setAccessibleName(direction);  getAccessibleContext().setAccessibleDescription(description);  setSelected(selected);}  }
class C{  public void entityReference(String name) throws org.xml.sax.SAXException {  append(m_doc.createEntityReference(name));}  }
class C{  public int pop(){  return elements[--size];}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected LiteralImpl(){  super();}  }
class C{  private void makeBillingView() throws Exception {  handleTableCreation("billing data view",bigquery().query(BILLING_DATA_SQL.put("SOURCE_DATASET",sourceDatasetId).put("DEST_DATASET",bigquery().getDatasetId()).put("TLDS",Joiner.on(",").join(tlds)).build(),bigquery().buildDestinationTable("BillingData").description("Synthetic view of consolidated billing information.").type(TableType.VIEW).build()));}  }
class C{  public void testNextIntBounded(){  Random r=new Random();  for (int bound=2; bound < MAX_INT_BOUND; bound+=524959) {    int f=r.nextInt(bound);    assertTrue(0 <= f && f < bound);    int i=0;    int j;    while (i < NCALLS && (j=r.nextInt(bound)) == f) {      assertTrue(0 <= j && j < bound);      ++i;    }    assertTrue(i < NCALLS);  }}  }
class C{  protected synchronized void closeConnection(){  super.closeConnection();  if (null != m_statement) {    try {      m_statement.close();    } catch (    final SQLException se) {      getErrorHandler().error("Error closing statement",se,null);    }    m_statement=null;  }}  }
class C{  public ExceptionContext create(ExceptionContext context){  ExceptionMessage message=new ExceptionMessage(new ExceptionCode("XXX"),m_exceptionContext.getValue());  message.addExceptionContext(context);  return create(message.getMessage());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:01.337 -0500",hash_original_method="412B90C2E6660CBD34B9FCD7AA411423",hash_generated_method="5C0A490BD2CE9B2C5AFFFA4AB2680065") public static String quoteReplacement(String s){  StringBuilder result=new StringBuilder(s.length());  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (c == '\\' || c == '$') {      result.append('\\');    }    result.append(c);  }  return result.toString();}  }
class C{  public void close(boolean byMouse){  this.setMouseTransparent(true);  ScaleTransition closing=new ScaleTransition(byMouse ? Duration.ONE : Duration.millis(300),this);  closing.setToX(0.3);  closing.setToY(0.1);  closing.setOnFinished(null);  closing.play();}  }
class C{  public Segment nextSegment(){  assertOpen();  Segment lastSegment=lastSegment();  SegmentDescriptor descriptor=SegmentDescriptor.builder().withId(lastSegment != null ? lastSegment.descriptor().id() + 1 : 1).withVersion(1).withIndex(currentSegment.lastIndex() + 1).withMaxSegmentSize(storage.maxSegmentSize()).withMaxEntries(storage.maxEntriesPerSegment()).build();  descriptor.lock();  currentSegment=createSegment(descriptor);  segments.put(descriptor.index(),currentSegment);  return currentSegment;}  }
class C{  public boolean includesFeature(String feature){synchronized (features) {    return features.contains(feature);  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  private static void doCopyFile(final File srcFile,final File destFile,final boolean preserveFileDate) throws IOException {  if (destFile.exists() && destFile.isDirectory())   throw new IOException("Destination '" + destFile + "' exists but is a directory");  FileInputStream fis=null;  FileOutputStream fos=null;  FileChannel input=null;  FileChannel output=null;  try {    fis=new FileInputStream(srcFile);    fos=new FileOutputStream(destFile);    input=fis.getChannel();    output=fos.getChannel();    final long size=input.size();    long pos=0;    long count=0;    while (pos < size) {      count=size - pos > FILE_COPY_BUFFER_SIZE ? FILE_COPY_BUFFER_SIZE : size - pos;      pos+=output.transferFrom(input,pos,count);    }  }  finally {    closeQuietly(output);    closeQuietly(fos);    closeQuietly(input);    closeQuietly(fis);  }  if (srcFile.length() != destFile.length())   throw new IOException("Failed to copy full contents from '" + srcFile + "' to '"+ destFile+ "'");  if (preserveFileDate) {    destFile.setLastModified(srcFile.lastModified());  }}  }
class C{  public static BufferedImage toCompatibleImage(BufferedImage image){  if (image.getColorModel().equals(CONFIGURATION.getColorModel())) {    return image;  }  BufferedImage compatibleImage=CONFIGURATION.createCompatibleImage(image.getWidth(),image.getHeight(),image.getTransparency());  Graphics g=compatibleImage.getGraphics();  g.drawImage(image,0,0,null);  g.dispose();  return compatibleImage;}  }
class C{  public CharSet intersection(CharSet that){  return new CharSet(doIntersection(that.chars));}  }
class C{  public static MemoryManagerImpl create(Context context,MediaSaver mediaSaver){  ActivityManager activityManager=AndroidServices.instance().provideActivityManager();  int maxAllowedNativeMemory=getMaxAllowedNativeMemory(context);  MemoryQuery mMemoryQuery=new MemoryQuery(activityManager);  MemoryManagerImpl memoryManager=new MemoryManagerImpl(maxAllowedNativeMemory,mMemoryQuery);  context.registerComponentCallbacks(memoryManager);  mediaSaver.setQueueListener(memoryManager);  return memoryManager;}  }
class C{  public ApiConfig(String apiKey,String accessToken,LogLevel logLevel){  this(apiKey,accessToken);  mLogLevel=logLevel;}  }
class C{  void dump(){  System.out.println();  System.out.println("LdapReferralException.dump");  LdapReferralException ptr=this;  while (ptr != null) {    ptr.dumpState();    ptr=ptr.nextReferralEx;  }}  }
class C{  public void testAtomicLocal() throws Exception {  checkAtomic(LOCAL);}  }
class C{  public final void appendEntry(final LRUClockNode aNode){synchronized (this.lock) {    if (aNode.nextLRUNode() != null || aNode.prevLRUNode() != null) {      return;    }    if (logger.isTraceEnabled(LogMarker.LRU_CLOCK)) {      logger.trace(LogMarker.LRU_CLOCK,LocalizedMessage.create(LocalizedStrings.NewLRUClockHand_ADDING_ANODE_TO_LRU_LIST,aNode));    }    aNode.setNextLRUNode(this.tail);    this.tail.prevLRUNode().setNextLRUNode(aNode);    aNode.setPrevLRUNode(this.tail.prevLRUNode());    this.tail.setPrevLRUNode(aNode);    this.size++;  }}  }
class C{  public AlgorithmException(Algorithm algorithm,Throwable cause){  this(algorithm,cause.getMessage(),cause);}  }
class C{  public char[] toChars(){  return toChars(null,null);}  }
class C{  public static void clear(){  data.clear();}  }
class C{  private static BigInteger evaluateInteger(final INaviOperandTreeNode node,final IDebugger debugger,final INaviModule module){  final int longValue=(int)(long)Long.valueOf(node.getValue());  if (RelocationChecker.needsRelocation(node,module)) {    return debugger.fileToMemory(module,new UnrelocatedAddress(new CAddress(longValue))).getAddress().toBigInteger();  } else {    return BigInteger.valueOf(longValue);  }}  }
class C{  private static void xstaticSetRandomGenerator(RandomEngine randomGenerator){synchronized (shared) {    shared.setRandomGenerator(randomGenerator);  }}  }
class C{  public VerticalTextIcon(String text,boolean clockwize){  Font font=UIManager.getFont("Label.font").deriveFont(Font.BOLD);  fm=getFontMetrics(font);  this.text=text;  width=SwingUtilities.computeStringWidth(fm,text);  height=fm.getHeight();  this.clockwize=clockwize;}  }
class C{  @Override public boolean equals(final Object obj){  return ((obj != null) && obj.getClass().equals(getClass()));}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.183 -0400",hash_original_method="2BA99363849AA1A2FF348D630CD9505A",hash_generated_method="24082F69A54C27E561E758F6E6C6E5BB") public static String toString(InputStream input,Charset encoding) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw,encoding);  return sw.toString();}  }
class C{  public void paintToggleButtonBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public void apply(){  if (mChart instanceof XYChart) {    if (((XYChart)mChart).getDataset() == null) {      return;    }    int scales=mRenderer.getScalesCount();    if (mRenderer.isInitialRangeSet()) {      for (int i=0; i < scales; i++) {        if (mRenderer.isInitialRangeSet(i)) {          mRenderer.setRange(mRenderer.getInitialRange(i),i);        }      }    } else {      XYSeries[] series=((XYChart)mChart).getDataset().getSeries();      double[] range=null;      int length=series.length;      if (length > 0) {        for (int i=0; i < scales; i++) {          range=new double[]{MathHelper.NULL_VALUE,-MathHelper.NULL_VALUE,MathHelper.NULL_VALUE,-MathHelper.NULL_VALUE};          for (int j=0; j < length; j++) {            if (i == series[j].getScaleNumber()) {              range[0]=Math.min(range[0],series[j].getMinX());              range[1]=Math.max(range[1],series[j].getMaxX());              range[2]=Math.min(range[2],series[j].getMinY());              range[3]=Math.max(range[3],series[j].getMaxY());            }          }          double marginX=Math.abs(range[1] - range[0]) / 40;          double marginY=Math.abs(range[3] - range[2]) / 40;          mRenderer.setRange(new double[]{range[0] - marginX,range[1] + marginX,range[2] - marginY,range[3] + marginY},i);        }      }    }  } else {    DefaultRenderer renderer=((RoundChart)mChart).getRenderer();    renderer.setScale(renderer.getOriginalScale());  }}  }
class C{  public static IArraySlice<Value> compactAndSort(final Set<Value> vertices,final IManagedArray<Value> buffer){  final int nvertices=vertices.size();  buffer.ensureCapacity(nvertices);  final Value[] a=buffer.array();  int i=0;  for (  Value v : vertices) {    a[i++]=v;  }  java.util.Arrays.sort(a,0,nvertices);  return buffer.slice(0,nvertices);}  }
class C{  private static void generateHeaderHtml(Document document,File outputFile) throws IOException {  if (ConfigurationManager.getCurrentProfile().getGenerateHtml()) {    FileOutputStream fos=null;    try {      JDOMSource source=new JDOMSource(document);      String xmlFilename=outputFile.getParentFile().getAbsolutePath();      File htmlFile=new File(xmlFilename + File.separator + "header.html");      fos=new FileOutputStream(htmlFile);      StreamResult streamResult=new StreamResult(fos);      try {        Transformer transformer;        transformer=JDOMManager.getHeaderTransformer();        transformer.transform(source,streamResult);      } catch (      TransformerException e) {        logger.error(Localization.Main.getText("error.cannotTransform",outputFile.getAbsolutePath()),e);      }    }  finally {      if (fos != null)       fos.close();    }  }}  }
class C{  public int write(byte[] b,int off){  int nBytes=ShapeUtils.writeLEDouble(b,off,x);  nBytes+=ShapeUtils.writeLEDouble(b,off + nBytes,y);  return nBytes;}  }
class C{  private Model[] applyCodePattern(SplittedExampleSet seSet,Attribute classLabel,CodePattern codePattern) throws OperatorException {  int numberOfClasses=classLabel.getMapping().size();  int numberOfFunctions=codePattern.data[0].length;  Model[] models=new Model[numberOfFunctions];  HashMap<Integer,Integer> classIndexMap=new HashMap<Integer,Integer>(numberOfClasses);  for (int currentFunction=0; currentFunction < numberOfFunctions; currentFunction++) {    int counter=0;    seSet.clearSelection();    for (    String currentClass : classLabel.getMapping().getValues()) {      classIndexMap.put(classLabel.getMapping().mapString(currentClass),counter);      if (codePattern.partitionEnabled[counter][currentFunction]) {        seSet.selectAdditionalSubset(classLabel.getMapping().mapString(currentClass));      }      counter++;    }    Attribute workingLabel=AttributeFactory.createAttribute("multiclass_working_label",Ontology.BINOMINAL);    seSet.getExampleTable().addAttribute(workingLabel);    seSet.getAttributes().addRegular(workingLabel);    int currentIndex=0;    Iterator<Example> iterator=seSet.iterator();    while (iterator.hasNext()) {      Example e=iterator.next();      currentIndex=classIndexMap.get((int)e.getValue(classLabel));      if (codePattern.partitionEnabled[currentIndex][currentFunction]) {        e.setValue(workingLabel,workingLabel.getMapping().mapString(codePattern.data[currentIndex][currentFunction]));      }    }    seSet.getAttributes().remove(workingLabel);    seSet.getAttributes().setLabel(workingLabel);    models[currentFunction]=applyInnerLearner(seSet);    inApplyLoop();    seSet.getAttributes().setLabel(classLabel);    seSet.getExampleTable().removeAttribute(workingLabel);  }  return models;}  }
class C{  public boolean removeEdges(Collection<Edge> edges){  boolean change=false;  for (  Edge edge : edges) {    boolean _change=removeEdge(edge);    change=change || _change;  }  return change;}  }
class C{  private void populateSnapInfo(UnManagedVolume unManagedVolume,Snap snap,String parentVolumeNatvieGuid,StringSet parentMatchedVPools){  log.info(String.format("populate snap:",snap.getName()));  unManagedVolume.getVolumeCharacterstics().put(SupportedVolumeCharacterstics.IS_SNAP_SHOT.toString(),Boolean.TRUE.toString());  StringSet parentVol=new StringSet();  parentVol.add(parentVolumeNatvieGuid);  unManagedVolume.getVolumeInformation().put(SupportedVolumeInformation.LOCAL_REPLICA_SOURCE_VOLUME.toString(),parentVol);  StringSet isSyncActive=new StringSet();  isSyncActive.add(Boolean.TRUE.toString());  unManagedVolume.getVolumeInformation().put(SupportedVolumeInformation.IS_SYNC_ACTIVE.toString(),isSyncActive);  StringSet isReadOnly=new StringSet();  Boolean readOnly=snap.getIsReadOnly();  isReadOnly.add(readOnly.toString());  unManagedVolume.getVolumeInformation().put(SupportedVolumeInformation.IS_READ_ONLY.toString(),isReadOnly);  StringSet techType=new StringSet();  techType.add(BlockSnapshot.TechnologyType.NATIVE.toString());  unManagedVolume.getVolumeInformation().put(SupportedVolumeInformation.TECHNOLOGY_TYPE.toString(),techType);  VNXeBase snapGroup=snap.getSnapGroup();  if (snapGroup != null) {    unManagedVolume.getVolumeInformation().put(SupportedVolumeInformation.SNAPSHOT_CONSISTENCY_GROUP_NAME.toString(),snapGroup.getId());  }  log.debug("Matched Pools : {}",Joiner.on("\t").join(parentMatchedVPools));  if (null == parentMatchedVPools || parentMatchedVPools.isEmpty()) {    log.info("no parent pool");    unManagedVolume.getSupportedVpoolUris().clear();  } else {    unManagedVolume.getSupportedVpoolUris().replace(parentMatchedVPools);    log.info("Replaced Pools :{}",Joiner.on("\t").join(unManagedVolume.getSupportedVpoolUris()));  }}  }
class C{  public static void main(String[] args){  Header.printHeader(JoinSubpopulations.class.toString(),args);  String first=args[0];  String firstAttribute=args[1];  String second=args[2];  String secondAttribute=args[3];  String output=args[4];  String outputAttribute=args[5];  JoinSubpopulations.Run(first,firstAttribute,second,secondAttribute,output,outputAttribute);  Header.printFooter();}  }
class C{  protected void parse(DataInputStream stream) throws Exception {}  }
class C{  protected void startNode(Node node) throws org.xml.sax.SAXException {  if (node instanceof Locator) {    Locator loc=(Locator)node;    m_locator.setColumnNumber(loc.getColumnNumber());    m_locator.setLineNumber(loc.getLineNumber());    m_locator.setPublicId(loc.getPublicId());    m_locator.setSystemId(loc.getSystemId());  } else {    m_locator.setColumnNumber(0);    m_locator.setLineNumber(0);  }switch (node.getNodeType()) {case Node.COMMENT_NODE:{      String data=((Comment)node).getData();      if (m_contentHandler instanceof LexicalHandler) {        LexicalHandler lh=((LexicalHandler)this.m_contentHandler);        lh.comment(data.toCharArray(),0,data.length());      }    }  break;case Node.DOCUMENT_FRAGMENT_NODE:break;case Node.DOCUMENT_NODE:break;case Node.ELEMENT_NODE:Element elem_node=(Element)node;{String uri=elem_node.getNamespaceURI();if (uri != null) {String prefix=elem_node.getPrefix();if (prefix == null) prefix="";this.m_contentHandler.startPrefixMapping(prefix,uri);}}NamedNodeMap atts=elem_node.getAttributes();int nAttrs=atts.getLength();for (int i=0; i < nAttrs; i++) {final Node attr=atts.item(i);final String attrName=attr.getNodeName();final int colon=attrName.indexOf(':');final String prefix;if (attrName.equals("xmlns") || attrName.startsWith("xmlns:")) {if (colon < 0) prefix=""; else prefix=attrName.substring(colon + 1);this.m_contentHandler.startPrefixMapping(prefix,attr.getNodeValue());} else if (colon > 0) {prefix=attrName.substring(0,colon);String uri=attr.getNamespaceURI();if (uri != null) this.m_contentHandler.startPrefixMapping(prefix,uri);}}String ns=m_dh.getNamespaceOfNode(node);if (null == ns) ns="";this.m_contentHandler.startElement(ns,m_dh.getLocalNameOfNode(node),node.getNodeName(),new AttList(atts,m_dh));break;case Node.PROCESSING_INSTRUCTION_NODE:{ProcessingInstruction pi=(ProcessingInstruction)node;String name=pi.getNodeName();if (name.equals("xslt-next-is-raw")) {nextIsRaw=true;} else {this.m_contentHandler.processingInstruction(pi.getNodeName(),pi.getData());}}break;case Node.CDATA_SECTION_NODE:{boolean isLexH=(m_contentHandler instanceof LexicalHandler);LexicalHandler lh=isLexH ? ((LexicalHandler)this.m_contentHandler) : null;if (isLexH) {lh.startCDATA();}dispatachChars(node);{if (isLexH) {lh.endCDATA();}}}break;case Node.TEXT_NODE:{if (nextIsRaw) {nextIsRaw=false;m_contentHandler.processingInstruction(javax.xml.transform.Result.PI_DISABLE_OUTPUT_ESCAPING,"");dispatachChars(node);m_contentHandler.processingInstruction(javax.xml.transform.Result.PI_ENABLE_OUTPUT_ESCAPING,"");} else {dispatachChars(node);}}break;case Node.ENTITY_REFERENCE_NODE:{EntityReference eref=(EntityReference)node;if (m_contentHandler instanceof LexicalHandler) {((LexicalHandler)this.m_contentHandler).startEntity(eref.getNodeName());} else {}}break;default :}}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success)   return success;  if (newRecord || is_ValueChanged("MeasureTarget") || is_ValueChanged("MeasureScope"))   updateGoal(true);  return success;}  }
class C{  protected void shiftGap(int newGapStart){  int oldGapStart=getGapStart();  int dg=newGapStart - oldGapStart;  int oldGapEnd=getGapEnd();  int newGapEnd=oldGapEnd + dg;  int gapSize=oldGapEnd - oldGapStart;  super.shiftGap(newGapStart);  if (dg > 0) {    int adjustIndex=findMarkAdjustIndex(oldGapStart);    int n=marks.size();    for (int i=adjustIndex; i < n; i++) {      MarkData mark=marks.elementAt(i);      if (mark.index >= newGapEnd) {        break;      }      mark.index-=gapSize;    }  } else   if (dg < 0) {    int adjustIndex=findMarkAdjustIndex(newGapStart);    int n=marks.size();    for (int i=adjustIndex; i < n; i++) {      MarkData mark=marks.elementAt(i);      if (mark.index >= oldGapEnd) {        break;      }      mark.index+=gapSize;    }  }  resetMarksAtZero();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case FunctionblockPackage.STATUS__PROPERTIES:    return ((InternalEList<?>)getProperties()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public int add(GL10 gl,String text,Paint textPaint){  return add(gl,null,text,textPaint);}  }
class C{  public void testAppStability() throws Exception {  String packageName=mArgs.getString(PACKAGE_TO_LAUNCH);  if (packageName != null) {    Log.d(TAG,"Launching app " + packageName);    Collection<ProcessErrorStateInfo> err=launchActivity(packageName);    assertNull(getFirstError(err),err);    assertTrue("App crashed after launch.",processStillUp(packageName));  } else {    Log.d(TAG,"Missing argument, use " + PACKAGE_TO_LAUNCH + " to specify the package to launch");  }}  }
class C{  public boolean isSelfService(){  Object oo=get_Value(COLUMNNAME_IsSelfService);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private boolean isValidLocalDefinition(BashVarDef varDef,ResolveState resolveState){  boolean validScope=PsiTreeUtil.isAncestor(BashPsiUtils.findEnclosingBlock(varDef),startElement,false);  return validScope && BashPsiUtils.getFileTextOffset(varDef) < BashPsiUtils.getFileTextOffset(startElement);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.358 -0500",hash_original_method="85CF1420537B9541711C4FCF41BF1A25",hash_generated_method="1F51162AE5FD7B556E7AFBCB3F1A3D3C") private static boolean isSeparator(char ch){  return !isDialable(ch) && !(('a' <= ch && ch <= 'z') || ('A' <= ch && ch <= 'Z'));}  }
class C{  public static boolean isValidMethodName(String s){  return isJavaIdentifier(s) || s.equals("<init>") || s.equals("<clinit>");}  }
class C{  public void addInstanceField(EncodedField field){  if (field == null) {    throw new NullPointerException("field == null");  }  instanceFields.add(field);}  }
class C{  private void createFramebufferTexture(){  this.tex=glGenTextures();  glBindTexture(GL_TEXTURE_2D,tex);  glTexImage2D(GL_TEXTURE_2D,0,GL_RGBA32F,width,height,0,GL_RGBA,GL_FLOAT,(ByteBuffer)null);  glBindTexture(GL_TEXTURE_2D,0);}  }
class C{  public void init(FilterConfig filterConfig) throws ServletException {  m_filterConfig=filterConfig;  WebEnv.initWeb(filterConfig.getServletContext());  if (log == null)   log=CLogger.getCLogger(WFilter.class);  log.info(filterConfig.getFilterName());  Enumeration en=filterConfig.getInitParameterNames();  while (en.hasMoreElements()) {    String name=en.nextElement().toString();    String value=filterConfig.getInitParameter(name);    log.config(name + "=" + value);    if (name.equals("Timing") && value.equals("Y"))     m_timing=true;  }}  }
class C{  public V remove(Object key){synchronized (this) {    Map<K,V> newMap=new HashMap<K,V>(internalMap);    V val=newMap.remove(key);    internalMap=newMap;    return val;  }}  }
class C{  public int[] toARGBArray(){  int[] array=new int[colors.size()];  int i=0;  for (  ReadonlyTColor c : colors) {    array[i++]=c.toARGB();  }  return array;}  }
class C{  public AnimationBuilder pivotX(float... pivotX){  ObjectAnimator.ofFloat(getView(),"pivotX",getValues(pivotX));  return this;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.299 -0500",hash_original_method="7C55F1E05538CA172591209F0EED6056",hash_generated_method="7C55F1E05538CA172591209F0EED6056") void cleanup(){  mMessages.clear();}  }
class C{  static String[] computeSyncParameterTypes(IMethodBinding asyncMethodBinding){  List<String> parameters=new ArrayList<String>();  ITypeBinding[] parameterTypes=asyncMethodBinding.getParameterTypes();  for (int i=0; i < parameterTypes.length - 1; ++i) {    parameters.add(parameterTypes[i].getErasure().getQualifiedName());  }  return parameters.toArray(NO_STRINGS);}  }
class C{  public AccountHeaderBuilder withSelectionFirstLine(String selectionFirstLine){  this.mSelectionFirstLine=selectionFirstLine;  return this;}  }
class C{  private Favorite packFavorite(Cursor c){  Favorite favorite=new Favorite();  favorite.id=c.getLong(ID_INDEX);  favorite.screen=c.getInt(SCREEN_INDEX);  favorite.container=c.getInt(CONTAINER_INDEX);  favorite.cellX=c.getInt(CELLX_INDEX);  favorite.cellY=c.getInt(CELLY_INDEX);  favorite.spanX=c.getInt(SPANX_INDEX);  favorite.spanY=c.getInt(SPANY_INDEX);  favorite.iconType=c.getInt(ICON_TYPE_INDEX);  String title=c.getString(TITLE_INDEX);  if (!TextUtils.isEmpty(title)) {    favorite.title=title;  }  String intentDescription=c.getString(INTENT_INDEX);  Intent intent=null;  if (!TextUtils.isEmpty(intentDescription)) {    try {      intent=Intent.parseUri(intentDescription,0);      intent.removeExtra(ItemInfo.EXTRA_PROFILE);      favorite.intent=intent.toUri(0);    } catch (    URISyntaxException e) {      Log.e(TAG,"Invalid intent",e);    }  }  favorite.itemType=c.getInt(ITEM_TYPE_INDEX);  if (favorite.itemType == Favorites.ITEM_TYPE_APPWIDGET) {    favorite.appWidgetId=c.getInt(APPWIDGET_ID_INDEX);    String appWidgetProvider=c.getString(APPWIDGET_PROVIDER_INDEX);    if (!TextUtils.isEmpty(appWidgetProvider)) {      favorite.appWidgetProvider=appWidgetProvider;    }  } else   if (favorite.itemType == Favorites.ITEM_TYPE_SHORTCUT) {    if (favorite.iconType == Favorites.ICON_TYPE_RESOURCE) {      String iconPackage=c.getString(ICON_PACKAGE_INDEX);      if (!TextUtils.isEmpty(iconPackage)) {        favorite.iconPackage=iconPackage;      }      String iconResource=c.getString(ICON_RESOURCE_INDEX);      if (!TextUtils.isEmpty(iconResource)) {        favorite.iconResource=iconResource;      }    }    byte[] blob=c.getBlob(ICON_INDEX);    if (blob != null && blob.length > 0) {      favorite.icon=blob;    }  }  if (isReplaceableHotseatItem(favorite)) {    if (intent != null && intent.getComponent() != null) {      PackageManager pm=mContext.getPackageManager();      ActivityInfo activity=null;      ;      try {        activity=pm.getActivityInfo(intent.getComponent(),0);      } catch (      NameNotFoundException e) {        Log.e(TAG,"Target not found",e);      }      if (activity == null) {        return favorite;      }      for (int i=0; i < mItemTypeMatchers.length; i++) {        if (mItemTypeMatchers[i] == null) {          mItemTypeMatchers[i]=new ItemTypeMatcher(CommonAppTypeParser.getResourceForItemType(i));        }        if (mItemTypeMatchers[i].matches(activity,pm)) {          favorite.itemType=i;          break;        }      }    }  }  return favorite;}  }
class C{  public final Buffer append(byte b){  makeroom(0,1);  bytes[offset + length++]=b;  return this;}  }
class C{  public boolean checkType(String typeName,int typeId){  int type=getTypeId(typeName);  return type / OID_RADIX == typeId / OID_RADIX;}  }
class C{  @Override public void forget(){  Arrays.fill(this.masterKey,(byte)0x00);}  }
class C{  public static void check(){  Iterator<DataObjectType> doIterator=_typeMap.values().iterator();  while (doIterator.hasNext()) {    DataObjectType doType=doIterator.next();    Iterator<ColumnField> columnIterator=doType.getColumnFields().iterator();    while (columnIterator.hasNext()) {      ColumnField field=columnIterator.next();      field.check();    }  }}  }
class C{  public void run(){  while (recordsRead < howMany) {    try {      LogRecord rec;      rec=tf.readRecord(2000);      if (rec.isEmpty())       break;      recordsRead++;      bytesRead+=rec.getRecordLength();      if (!rec.checkCrc())       crcFailures++;    } catch (    Exception e) {      error=e;      break;    }  }}  }
class C{  public boolean isScreenSaverDisableSupported(){  return impl.isScreenLockSupported();}  }
class C{  public static DummyScope make(){  return singleton;}  }
class C{  @Inject protected FqnResolverFactory(){  this.resolvers=new HashMap<>();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public final void testGetEncoded02() throws IOException {  boolean performed=false;  for (int i=0; i < EncryptedPrivateKeyInfoData.algName0.length; i++) {    try {      EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(EncryptedPrivateKeyInfoData.algName0[i][0],EncryptedPrivateKeyInfoData.encryptedData);      byte[] refEnc=EncryptedPrivateKeyInfoData.getValidEncryptedPrivateKeyInfoEncoding(EncryptedPrivateKeyInfoData.algName0[i][0],false);      byte[] actEnc=epki.getEncoded();      assertTrue(Arrays.equals(refEnc,actEnc));      performed=true;    } catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  public void writeVariables(VariableService variableService,EventBean[] eventsPerStream,Map<String,Object> valuesWritten,ExprEvaluatorContext exprEvaluatorContext){  Set<String> variablesBeansCopied=null;  if (!copyMethods.isEmpty()) {    variablesBeansCopied=new HashSet<String>();  }  variableService.getReadWriteLock().writeLock().lock();  try {    variableService.setLocalVersion();    int count=0;    for (    VariableTriggerSetDesc assignment : assignments) {      VariableMetaData variableMetaData=metaData[count];      int agentInstanceId=variableMetaData.getContextPartitionName() == null ? EPStatementStartMethod.DEFAULT_AGENT_INSTANCE_ID : exprEvaluatorContext.getAgentInstanceId();      Object value=assignment.evaluator.evaluate(eventsPerStream,true,exprEvaluatorContext);      if (writers[count] != null) {        VariableReader reader=variableService.getReader(variableMetaData.getVariableName(),exprEvaluatorContext.getAgentInstanceId());        EventBean current=(EventBean)reader.getValue();        if (current == null) {          value=null;        } else {          WriteDesc writeDesc=writers[count];          boolean copy=variablesBeansCopied.add(writeDesc.getVariableName());          if (copy) {            EventBean copied=copyMethods.get(writeDesc.getType()).copy(current);            current=copied;          }          variableService.write(variableMetaData.getVariableNumber(),agentInstanceId,current);          writeDesc.getWriter().write(value,current);        }      } else       if (variableMetaData.getEventType() != null) {        EventBean eventBean=eventAdapterService.adapterForType(value,variableMetaData.getEventType());        variableService.write(variableMetaData.getVariableNumber(),agentInstanceId,eventBean);      } else {        if ((value != null) && (mustCoerce[count])) {          value=JavaClassHelper.coerceBoxed((Number)value,variableMetaData.getType());        }        variableService.write(variableMetaData.getVariableNumber(),agentInstanceId,value);      }      count++;      if (valuesWritten != null) {        valuesWritten.put(assignment.variableName,value);      }    }    variableService.commit();  } catch (  RuntimeException ex) {    log.error("Error evaluating on-set variable expressions: " + ex.getMessage(),ex);    variableService.rollback();  } finally {    variableService.getReadWriteLock().writeLock().unlock();  }}  }
class C{  private ColumnUtil(){  instanceNotAllowed(ColumnUtil.class);}  }
class C{  public HAVING HAVING(String having){  return new HAVING(this,having);}  }
class C{  public void add(File dbPath,SQLiteDbModel dbModel){  connPoolMap.put(dbPath,dbModel);  size+=1;}  }
class C{  public boolean fullScrollV(int direction){  boolean down=direction == View.FOCUS_DOWN;  int height=getHeight();  mTempRect.top=0;  mTempRect.bottom=height;  if (down) {    int count=getChildCount();    if (count > 0) {      View view=getChildAt(count - 1);      mTempRect.bottom=view.getBottom();      mTempRect.top=mTempRect.bottom - height;    }  }  return scrollAndFocusV(direction,mTempRect.top,mTempRect.bottom);}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public void step(int steps,double elapsedTime){  if (steps <= 0)   return;  if (elapsedTime <= 0.0)   return;  for (int i=0; i < steps; i++) {    this.step.update(elapsedTime);    this.step();  }}  }
class C{  private static int findMnemonicInt(String s){  for (int i=0; i < s.length() - 1; i++) {    if (s.charAt(i) == '&') {      if (s.charAt(i + 1) != '&') {        return KeyEvent.getExtendedKeyCodeForChar(s.charAt(i + 1));      } else {        i++;      }    }  }  return 0;}  }
class C{  protected void assertFuncEquals(final SolrQueryRequest req,final String... inputs) throws Exception {  final String funcName=(new QueryParsing.StrParser(inputs[0])).getId();  valParsersTested.add(funcName);  assertQueryEquals(FunctionQParserPlugin.NAME,req,inputs);}  }
class C{  @DSSafe(DSCat.IPC_CALLBACK) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.375 -0500",hash_original_method="47FB80A3CFEFEB59EA9B936E333C1DEB",hash_generated_method="E154ED61341C3A58390581429D12F941") @Override public final void handleMessage(Message msg){  if (mDbg)   Log.d(TAG,"handleMessage: E msg.what=" + msg.what);  mMsg=msg;  if (!mIsConstructionCompleted) {    Log.e(TAG,"The start method not called, ignore msg: " + msg);    return;  }  processMsg(msg);  performTransitions();  if (mDbg)   Log.d(TAG,"handleMessage: X");}  }
class C{  private void doSelfCert(String alias,String dname,String sigAlgName) throws Exception {  if (alias == null) {    alias=keyAlias;  }  Pair<Key,char[]> objs=recoverKey(alias,storePass,keyPass);  PrivateKey privKey=(PrivateKey)objs.fst;  if (keyPass == null)   keyPass=objs.snd;  if (sigAlgName == null) {    sigAlgName=getCompatibleSigAlgName(privKey.getAlgorithm());  }  Certificate oldCert=keyStore.getCertificate(alias);  if (oldCert == null) {    MessageFormat form=new MessageFormat(rb.getString("alias.has.no.public.key"));    Object[] source={alias};    throw new Exception(form.format(source));  }  if (!(oldCert instanceof X509Certificate)) {    MessageFormat form=new MessageFormat(rb.getString("alias.has.no.X.509.certificate"));    Object[] source={alias};    throw new Exception(form.format(source));  }  byte[] encoded=oldCert.getEncoded();  X509CertImpl certImpl=new X509CertImpl(encoded);  X509CertInfo certInfo=(X509CertInfo)certImpl.get(X509CertImpl.NAME + "." + X509CertImpl.INFO);  Date firstDate=getStartDate(startDate);  Date lastDate=new Date();  lastDate.setTime(firstDate.getTime() + validity * 1000L * 24L* 60L* 60L);  CertificateValidity interval=new CertificateValidity(firstDate,lastDate);  certInfo.set(X509CertInfo.VALIDITY,interval);  certInfo.set(X509CertInfo.SERIAL_NUMBER,new CertificateSerialNumber(new java.util.Random().nextInt() & 0x7fffffff));  X500Name owner;  if (dname == null) {    owner=(X500Name)certInfo.get(X509CertInfo.SUBJECT + "." + X509CertInfo.DN_NAME);  } else {    owner=new X500Name(dname);    certInfo.set(X509CertInfo.SUBJECT + "." + X509CertInfo.DN_NAME,owner);  }  certInfo.set(X509CertInfo.ISSUER + "." + X509CertInfo.DN_NAME,owner);  X509CertImpl newCert=new X509CertImpl(certInfo);  newCert.sign(privKey,sigAlgName);  AlgorithmId sigAlgid=(AlgorithmId)newCert.get(X509CertImpl.SIG_ALG);  certInfo.set(CertificateAlgorithmId.NAME + "." + CertificateAlgorithmId.ALGORITHM,sigAlgid);  certInfo.set(X509CertInfo.VERSION,new CertificateVersion(CertificateVersion.V3));  CertificateExtensions ext=createV3Extensions(null,(CertificateExtensions)certInfo.get(X509CertInfo.EXTENSIONS),v3ext,oldCert.getPublicKey(),null);  certInfo.set(X509CertInfo.EXTENSIONS,ext);  newCert=new X509CertImpl(certInfo);  newCert.sign(privKey,sigAlgName);  keyStore.setKeyEntry(alias,privKey,(keyPass != null) ? keyPass : storePass,new Certificate[]{newCert});  if (verbose) {    System.err.println(rb.getString("New.certificate.self.signed."));    System.err.print(newCert.toString());    System.err.println();  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.TEMPLATE_LITERAL__SEGMENTS:    return ((InternalEList<?>)getSegments()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void fireEvent(ClientStateInformation event){  for (  Listener<ClientStateInformation> listener : listeners) {    listener.receiveEvent(event);  }}  }
class C{  private void addToList(MapNode node){  if (!this.neighbors.contains(node) && node != this) {    this.neighbors.add(node);  }}  }
class C{  public static <T>T cas(String key,CASMutation<T> mutation,T value,int expireSecs){  MemcachedClient client=getClient();  if (client != null) {    Transcoder transcoder=new SerializingTranscoder();    CASMutator<T> mutator=new CASMutator<>(client,transcoder,MAX_CAS_RETRIES);    try {      return mutator.cas(hashKey(key),value,expireSecs,mutation);    } catch (    Exception e) {      logger.error("Failed up update hits in cache ",e);      return null;    }  } else   return null;}  }
class C{  public Vertex evaluateLESSTHANEQUAL(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  if (!checkArguments(expression,arguments,2,network)) {    return network.createVertex(Primitive.NULL);  }  Vertex left=evaluateExpression(arguments.get(0).getTarget(),variables,network,startTime,maxTime,stack);  Vertex right=evaluateExpression(arguments.get(1).getTarget(),variables,network,startTime,maxTime,stack);  if ((left.getData() instanceof Number) && (right.getData() instanceof Number)) {    if (((Number)left.getData()).doubleValue() <= ((Number)right.getData()).doubleValue()) {      return network.createVertex(Primitive.TRUE);    } else {      return network.createVertex(Primitive.FALSE);    }  }  if ((left.getData() instanceof String) && (right.getData() instanceof String)) {    if (((String)left.getData()).compareTo((String)right.getData()) <= 0) {      return network.createVertex(Primitive.TRUE);    } else {      return network.createVertex(Primitive.FALSE);    }  }  if ((left.getData() instanceof java.util.Date) && (right.getData() instanceof java.util.Date)) {    if (((java.util.Date)left.getData()).compareTo((java.util.Date)right.getData()) <= 0) {      return network.createVertex(Primitive.TRUE);    } else {      return network.createVertex(Primitive.FALSE);    }  }  if (left.matches(right,variables) == Boolean.TRUE) {    return network.createVertex(Primitive.TRUE);  }  return network.createVertex(Primitive.UNKNOWN);}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.763 -0400",hash_original_method="29D7601B80549C4B9C567F426A16BACB",hash_generated_method="419F4D0159CC5D65D0B2C8B1333318F8") public byte readByte() throws IOException, EOFException {  return (byte)in.read();}  }
class C{  public boolean abort() throws LoginException {switch (status) {case UNINITIALIZED:default :    return false;case INITIALIZED:  return false;case AUTHENTICATED:logoutInternal();return true;case LOGGED_IN:logoutInternal();return true;}}  }
class C{  private void writeNodeStartOfStartTag(Node node) throws IOException, RDFHandlerException {  Value value=node.getValue();  if (node.hasType()) {    writeStartOfStartTag(node.getType().getNamespace(),node.getType().getLocalName());  } else {    writeStartOfStartTag(RDF.NAMESPACE,"Description");  }  if (value instanceof IRI) {    IRI uri=(IRI)value;    writeAttribute(RDF.NAMESPACE,"about",uri.toString());  } else {    BNode bNode=(BNode)value;    writeAttribute(RDF.NAMESPACE,"nodeID",getValidNodeId(bNode));  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case IM_TRUE:    return isSetIm_true();case IM_FALSE:  return isSetIm_false();}throw new IllegalStateException();}  }
class C{  @Override public long position(String pattern,long start) throws SQLException {  throw unsupported("LOB search");}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader;  String outputFileName;  boolean flag;  int row, col;  double xCoord, yCoord;  int progress;  int i;  double value, z, zN;  double contourInterval;  double baseContour;  double zConvFactor=1.0;  int FID=0;  double topNeighbour, leftNeighbour;  int[] rowVals=new int[2];  int[] colVals=new int[2];  int traceDirection=0;  int previousTraceDirection=0;  double currentHalfRow=0, currentHalfCol=0;  double[] elevClassData=new double[4];  long numPoints;  double contourValue=0;  boolean val1, val2;  boolean[] edges=new boolean[4];  boolean[] untraversed=new boolean[4];  int[] visitedData=new int[4];  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  demHeader=args[0];  outputFileName=args[1];  contourInterval=Double.parseDouble(args[2]);  if (contourInterval <= 0) {    showFeedback("The contour interval must be greater than zero.");    return;  }  baseContour=Double.parseDouble(args[3]);  zConvFactor=Double.parseDouble(args[4]);  if ((demHeader == null) || (outputFileName == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(demHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    double gridResX=DEM.getCellSizeX();    double gridResY=DEM.getCellSizeY();    double east=DEM.getEast() - gridResX / 2.0;    double west=DEM.getWest() + gridResX / 2.0;    double EWRange=east - west;    double north=DEM.getNorth() - gridResY / 2.0;    double south=DEM.getSouth() + gridResY / 2.0;    double NSRange=north - south;    String tempHeader1=demHeader.replace(".dep","_temp1.dep");    WhiteboxRaster temp1=new WhiteboxRaster(tempHeader1,"rw",demHeader,WhiteboxRaster.DataType.INTEGER,0);    temp1.isTemporaryFile=true;    ShapeFile output=new ShapeFile(outputFileName,ShapeType.POLYLINE);    DBFField fields[]=new DBFField[2];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("ELEV");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(3);    String DBFName=output.getDatabaseFile();    DBFWriter writer=new DBFWriter(new File(DBFName));    writer.setFields(fields);    int[] parts={0};    for (row=0; row < rows; row++) {      col=0;      z=DEM.getValue(row,col);      if (z != noData) {        z=baseContour + Math.floor(((z * zConvFactor) - baseContour) / contourInterval) * contourInterval;        zN=DEM.getValue(row - 1,col);        topNeighbour=baseContour + Math.floor(((zN * zConvFactor) - baseContour) / contourInterval) * contourInterval;        if (topNeighbour != z && zN != noData) {          contourValue=Math.max(z,topNeighbour);          currentHalfRow=row - 0.5;          currentHalfCol=-0.5;          traceDirection=-1;          numPoints=0;          FID++;          PointsList points=new PointsList();          flag=true;          do {            rowVals[0]=(int)Math.floor(currentHalfRow);            rowVals[1]=(int)Math.ceil(currentHalfRow);            colVals[0]=(int)Math.floor(currentHalfCol);            colVals[1]=(int)Math.ceil(currentHalfCol);            if (DEM.getValue(rowVals[0],colVals[0]) != noData) {              elevClassData[0]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;            } else {              elevClassData[0]=noData;            }            if (DEM.getValue(rowVals[0],colVals[1]) != noData) {              elevClassData[1]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;            } else {              elevClassData[1]=noData;            }            if (DEM.getValue(rowVals[1],colVals[0]) != noData) {              elevClassData[2]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;            } else {              elevClassData[2]=noData;            }            if (DEM.getValue(rowVals[1],colVals[1]) != noData) {              elevClassData[3]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;            } else {              elevClassData[3]=noData;            }            edges=new boolean[4];            if (elevClassData[1] != elevClassData[3] && Math.min(elevClassData[1],elevClassData[3]) != noData) {              edges[0]=true;            }            if (elevClassData[2] != elevClassData[3] && Math.min(elevClassData[2],elevClassData[3]) != noData) {              edges[1]=true;            }            if (elevClassData[0] != elevClassData[2] && Math.min(elevClassData[0],elevClassData[2]) != noData) {              edges[2]=true;            }            if (elevClassData[0] != elevClassData[1] && Math.min(elevClassData[0],elevClassData[1]) != noData) {              edges[3]=true;            }            visitedData=new int[4];            visitedData[0]=(int)temp1.getValue(rowVals[0],colVals[0]);            visitedData[1]=(int)temp1.getValue(rowVals[0],colVals[1]);            visitedData[2]=(int)temp1.getValue(rowVals[1],colVals[0]);            visitedData[3]=(int)temp1.getValue(rowVals[1],colVals[1]);            untraversed=new boolean[4];            if (visitedData[1] == 0 && visitedData[3] == 0) {              untraversed[0]=true;            } else {              val1=BitOps.checkBit(visitedData[1],2);              val2=BitOps.checkBit(visitedData[3],0);              untraversed[0]=!(val1 | val2);            }            if (visitedData[2] == 0 && visitedData[3] == 0) {              untraversed[1]=true;            } else {              val1=BitOps.checkBit(visitedData[2],1);              val2=BitOps.checkBit(visitedData[3],3);              untraversed[1]=!(val1 | val2);            }            if (visitedData[0] == 0 && visitedData[2] == 0) {              untraversed[2]=true;            } else {              val1=BitOps.checkBit(visitedData[0],2);              val2=BitOps.checkBit(visitedData[2],0);              untraversed[2]=!(val1 | val2);            }            if (visitedData[0] == 0 && visitedData[1] == 0) {              untraversed[3]=true;            } else {              val1=BitOps.checkBit(visitedData[0],1);              val2=BitOps.checkBit(visitedData[1],3);              untraversed[3]=!(val1 | val2);            }            previousTraceDirection=traceDirection;            if (edges[0] && untraversed[0]) {              traceDirection=0;            } else             if (edges[1] && untraversed[1]) {              traceDirection=1;            } else             if (edges[2] && untraversed[2]) {              traceDirection=2;            } else             if (edges[3] && untraversed[3]) {              traceDirection=3;            } else {              traceDirection=-1;              flag=false;            }            if (previousTraceDirection != traceDirection) {              xCoord=west + (currentHalfCol / cols) * EWRange;              yCoord=north - (currentHalfRow / rows) * NSRange;              points.addPoint(xCoord,yCoord);            }switch (traceDirection) {case 0:              currentHalfCol+=1.0;            temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],2));          temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],0));        break;case 1:      currentHalfRow+=1.0;    temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],1));  temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],3));break;case 2:currentHalfCol-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],2));temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],0));break;case 3:currentHalfRow-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],1));temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],3));break;}numPoints++;if (numPoints > 1000000) {flag=false;}} while (flag);if (numPoints > 1) {PolyLine line=new PolyLine(parts,points.getPointsArray());output.addRecord(line);Object[] rowData=new Object[2];rowData[0]=new Double(FID);rowData[1]=new Double(contourValue);writer.addRecord(rowData);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 1 of 5:",progress);}for (col=0; col < cols; col++) {row=0;z=DEM.getValue(row,col);if (z != noData) {z=baseContour + Math.floor(((z * zConvFactor) - baseContour) / contourInterval) * contourInterval;zN=DEM.getValue(row,col - 1);leftNeighbour=baseContour + Math.floor(((zN * zConvFactor) - baseContour) / contourInterval) * contourInterval;if (leftNeighbour != z && zN != noData) {contourValue=Math.max(z,leftNeighbour);currentHalfRow=-0.5;currentHalfCol=col - 0.5;traceDirection=-1;numPoints=0;FID++;PointsList points=new PointsList();flag=true;do {rowVals[0]=(int)Math.floor(currentHalfRow);rowVals[1]=(int)Math.ceil(currentHalfRow);colVals[0]=(int)Math.floor(currentHalfCol);colVals[1]=(int)Math.ceil(currentHalfCol);if (DEM.getValue(rowVals[0],colVals[0]) != noData) {elevClassData[0]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[0]=noData;}if (DEM.getValue(rowVals[0],colVals[1]) != noData) {elevClassData[1]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[1]=noData;}if (DEM.getValue(rowVals[1],colVals[0]) != noData) {elevClassData[2]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[2]=noData;}if (DEM.getValue(rowVals[1],colVals[1]) != noData) {elevClassData[3]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[3]=noData;}edges=new boolean[4];if (elevClassData[1] != elevClassData[3] && Math.min(elevClassData[1],elevClassData[3]) != noData) {edges[0]=true;}if (elevClassData[2] != elevClassData[3] && Math.min(elevClassData[2],elevClassData[3]) != noData) {edges[1]=true;}if (elevClassData[0] != elevClassData[2] && Math.min(elevClassData[0],elevClassData[2]) != noData) {edges[2]=true;}if (elevClassData[0] != elevClassData[1] && Math.min(elevClassData[0],elevClassData[1]) != noData) {edges[3]=true;}visitedData=new int[4];visitedData[0]=(int)temp1.getValue(rowVals[0],colVals[0]);visitedData[1]=(int)temp1.getValue(rowVals[0],colVals[1]);visitedData[2]=(int)temp1.getValue(rowVals[1],colVals[0]);visitedData[3]=(int)temp1.getValue(rowVals[1],colVals[1]);untraversed=new boolean[4];if (visitedData[1] == 0 && visitedData[3] == 0) {untraversed[0]=true;} else {val1=BitOps.checkBit(visitedData[1],2);val2=BitOps.checkBit(visitedData[3],0);untraversed[0]=!(val1 | val2);}if (visitedData[2] == 0 && visitedData[3] == 0) {untraversed[1]=true;} else {val1=BitOps.checkBit(visitedData[2],1);val2=BitOps.checkBit(visitedData[3],3);untraversed[1]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[2] == 0) {untraversed[2]=true;} else {val1=BitOps.checkBit(visitedData[0],2);val2=BitOps.checkBit(visitedData[2],0);untraversed[2]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[1] == 0) {untraversed[3]=true;} else {val1=BitOps.checkBit(visitedData[0],1);val2=BitOps.checkBit(visitedData[1],3);untraversed[3]=!(val1 | val2);}previousTraceDirection=traceDirection;if (edges[0] && untraversed[0]) {traceDirection=0;} else if (edges[1] && untraversed[1]) {traceDirection=1;} else if (edges[2] && untraversed[2]) {traceDirection=2;} else if (edges[3] && untraversed[3]) {traceDirection=3;} else {traceDirection=-1;flag=false;}if (previousTraceDirection != traceDirection) {xCoord=west + (currentHalfCol / cols) * EWRange;yCoord=north - (currentHalfRow / rows) * NSRange;points.addPoint(xCoord,yCoord);}switch (traceDirection) {case 0:currentHalfCol+=1.0;temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],2));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],0));break;case 1:currentHalfRow+=1.0;temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],1));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],3));break;case 2:currentHalfCol-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],2));temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],0));break;case 3:currentHalfRow-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],1));temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],3));break;}numPoints++;if (numPoints > 1000000) {flag=false;}} while (flag);if (numPoints > 1) {PolyLine line=new PolyLine(parts,points.getPointsArray());output.addRecord(line);Object[] rowData=new Object[2];rowData[0]=new Double(FID);rowData[1]=new Double(contourValue);writer.addRecord(rowData);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * col / (cols - 1));updateProgress("Loop 2 of 5:",progress);}for (row=0; row < rows; row++) {col=cols - 1;z=DEM.getValue(row,col);if (z != noData) {z=baseContour + Math.floor(((z * zConvFactor) - baseContour) / contourInterval) * contourInterval;zN=DEM.getValue(row - 1,col);topNeighbour=baseContour + Math.floor(((zN * zConvFactor) - baseContour) / contourInterval) * contourInterval;if (topNeighbour != z && zN != noData) {contourValue=Math.max(z,topNeighbour);currentHalfRow=row - 0.5;currentHalfCol=col + 0.5;traceDirection=-1;numPoints=0;FID++;PointsList points=new PointsList();flag=true;do {rowVals[0]=(int)Math.floor(currentHalfRow);rowVals[1]=(int)Math.ceil(currentHalfRow);colVals[0]=(int)Math.floor(currentHalfCol);colVals[1]=(int)Math.ceil(currentHalfCol);if (DEM.getValue(rowVals[0],colVals[0]) != noData) {elevClassData[0]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[0]=noData;}if (DEM.getValue(rowVals[0],colVals[1]) != noData) {elevClassData[1]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[1]=noData;}if (DEM.getValue(rowVals[1],colVals[0]) != noData) {elevClassData[2]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[2]=noData;}if (DEM.getValue(rowVals[1],colVals[1]) != noData) {elevClassData[3]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[3]=noData;}edges=new boolean[4];if (elevClassData[1] != elevClassData[3] && Math.min(elevClassData[1],elevClassData[3]) != noData) {edges[0]=true;}if (elevClassData[2] != elevClassData[3] && Math.min(elevClassData[2],elevClassData[3]) != noData) {edges[1]=true;}if (elevClassData[0] != elevClassData[2] && Math.min(elevClassData[0],elevClassData[2]) != noData) {edges[2]=true;}if (elevClassData[0] != elevClassData[1] && Math.min(elevClassData[0],elevClassData[1]) != noData) {edges[3]=true;}visitedData=new int[4];visitedData[0]=(int)temp1.getValue(rowVals[0],colVals[0]);visitedData[1]=(int)temp1.getValue(rowVals[0],colVals[1]);visitedData[2]=(int)temp1.getValue(rowVals[1],colVals[0]);visitedData[3]=(int)temp1.getValue(rowVals[1],colVals[1]);untraversed=new boolean[4];if (visitedData[1] == 0 && visitedData[3] == 0) {untraversed[0]=true;} else {val1=BitOps.checkBit(visitedData[1],2);val2=BitOps.checkBit(visitedData[3],0);untraversed[0]=!(val1 | val2);}if (visitedData[2] == 0 && visitedData[3] == 0) {untraversed[1]=true;} else {val1=BitOps.checkBit(visitedData[2],1);val2=BitOps.checkBit(visitedData[3],3);untraversed[1]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[2] == 0) {untraversed[2]=true;} else {val1=BitOps.checkBit(visitedData[0],2);val2=BitOps.checkBit(visitedData[2],0);untraversed[2]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[1] == 0) {untraversed[3]=true;} else {val1=BitOps.checkBit(visitedData[0],1);val2=BitOps.checkBit(visitedData[1],3);untraversed[3]=!(val1 | val2);}previousTraceDirection=traceDirection;if (edges[0] && untraversed[0]) {traceDirection=0;} else if (edges[1] && untraversed[1]) {traceDirection=1;} else if (edges[2] && untraversed[2]) {traceDirection=2;} else if (edges[3] && untraversed[3]) {traceDirection=3;} else {traceDirection=-1;flag=false;}if (previousTraceDirection != traceDirection) {xCoord=west + (currentHalfCol / cols) * EWRange;yCoord=north - (currentHalfRow / rows) * NSRange;points.addPoint(xCoord,yCoord);}switch (traceDirection) {case 0:currentHalfCol+=1.0;temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],2));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],0));break;case 1:currentHalfRow+=1.0;temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],1));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],3));break;case 2:currentHalfCol-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],2));temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],0));break;case 3:currentHalfRow-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],1));temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],3));break;}numPoints++;if (numPoints > 1000000) {flag=false;}} while (flag);if (numPoints > 1) {PolyLine line=new PolyLine(parts,points.getPointsArray());output.addRecord(line);Object[] rowData=new Object[2];rowData[0]=new Double(FID);rowData[1]=new Double(contourValue);writer.addRecord(rowData);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 3 of 5:",progress);}for (col=0; col < cols; col++) {row=rows - 1;z=DEM.getValue(row,col);if (z != noData) {z=baseContour + Math.floor(((z * zConvFactor) - baseContour) / contourInterval) * contourInterval;zN=DEM.getValue(row,col - 1);leftNeighbour=baseContour + Math.floor(((zN * zConvFactor) - baseContour) / contourInterval) * contourInterval;if (leftNeighbour != z && zN != noData) {contourValue=Math.max(z,leftNeighbour);currentHalfRow=row + 0.5;currentHalfCol=col - 0.5;traceDirection=-1;numPoints=0;FID++;PointsList points=new PointsList();flag=true;do {rowVals[0]=(int)Math.floor(currentHalfRow);rowVals[1]=(int)Math.ceil(currentHalfRow);colVals[0]=(int)Math.floor(currentHalfCol);colVals[1]=(int)Math.ceil(currentHalfCol);if (DEM.getValue(rowVals[0],colVals[0]) != noData) {elevClassData[0]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[0]=noData;}if (DEM.getValue(rowVals[0],colVals[1]) != noData) {elevClassData[1]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[1]=noData;}if (DEM.getValue(rowVals[1],colVals[0]) != noData) {elevClassData[2]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[2]=noData;}if (DEM.getValue(rowVals[1],colVals[1]) != noData) {elevClassData[3]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[3]=noData;}edges=new boolean[4];if (elevClassData[1] != elevClassData[3] && Math.min(elevClassData[1],elevClassData[3]) != noData) {edges[0]=true;}if (elevClassData[2] != elevClassData[3] && Math.min(elevClassData[2],elevClassData[3]) != noData) {edges[1]=true;}if (elevClassData[0] != elevClassData[2] && Math.min(elevClassData[0],elevClassData[2]) != noData) {edges[2]=true;}if (elevClassData[0] != elevClassData[1] && Math.min(elevClassData[0],elevClassData[1]) != noData) {edges[3]=true;}visitedData=new int[4];visitedData[0]=(int)temp1.getValue(rowVals[0],colVals[0]);visitedData[1]=(int)temp1.getValue(rowVals[0],colVals[1]);visitedData[2]=(int)temp1.getValue(rowVals[1],colVals[0]);visitedData[3]=(int)temp1.getValue(rowVals[1],colVals[1]);untraversed=new boolean[4];if (visitedData[1] == 0 && visitedData[3] == 0) {untraversed[0]=true;} else {val1=BitOps.checkBit(visitedData[1],2);val2=BitOps.checkBit(visitedData[3],0);untraversed[0]=!(val1 | val2);}if (visitedData[2] == 0 && visitedData[3] == 0) {untraversed[1]=true;} else {val1=BitOps.checkBit(visitedData[2],1);val2=BitOps.checkBit(visitedData[3],3);untraversed[1]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[2] == 0) {untraversed[2]=true;} else {val1=BitOps.checkBit(visitedData[0],2);val2=BitOps.checkBit(visitedData[2],0);untraversed[2]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[1] == 0) {untraversed[3]=true;} else {val1=BitOps.checkBit(visitedData[0],1);val2=BitOps.checkBit(visitedData[1],3);untraversed[3]=!(val1 | val2);}previousTraceDirection=traceDirection;if (edges[0] && untraversed[0]) {traceDirection=0;} else if (edges[1] && untraversed[1]) {traceDirection=1;} else if (edges[2] && untraversed[2]) {traceDirection=2;} else if (edges[3] && untraversed[3]) {traceDirection=3;} else {traceDirection=-1;flag=false;}if (previousTraceDirection != traceDirection) {xCoord=west + (currentHalfCol / cols) * EWRange;yCoord=north - (currentHalfRow / rows) * NSRange;points.addPoint(xCoord,yCoord);}switch (traceDirection) {case 0:currentHalfCol+=1.0;temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],2));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],0));break;case 1:currentHalfRow+=1.0;temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],1));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],3));break;case 2:currentHalfCol-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],2));temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],0));break;case 3:currentHalfRow-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],1));temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],3));break;}numPoints++;if (numPoints > 1000000) {flag=false;}} while (flag);if (numPoints > 1) {PolyLine line=new PolyLine(parts,points.getPointsArray());output.addRecord(line);Object[] rowData=new Object[2];rowData[0]=new Double(FID);rowData[1]=new Double(contourValue);writer.addRecord(rowData);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * col / (cols - 1));updateProgress("Loop 4 of 5:",progress);}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=DEM.getValue(row,col);if (z != noData) {z=baseContour + Math.floor(((z * zConvFactor) - baseContour) / contourInterval) * contourInterval;zN=DEM.getValue(row - 1,col);topNeighbour=baseContour + Math.floor(((zN * zConvFactor) - baseContour) / contourInterval) * contourInterval;value=DEM.getValue(row,col - 1);leftNeighbour=baseContour + Math.floor(((value * zConvFactor) - baseContour) / contourInterval) * contourInterval;if ((topNeighbour != z && zN != noData) || (leftNeighbour != z && value != noData)) {contourValue=Math.max(z,topNeighbour);currentHalfRow=row - 0.5;currentHalfCol=col - 0.5;traceDirection=-1;numPoints=0;FID++;PointsList points=new PointsList();flag=true;do {rowVals[0]=(int)Math.floor(currentHalfRow);rowVals[1]=(int)Math.ceil(currentHalfRow);colVals[0]=(int)Math.floor(currentHalfCol);colVals[1]=(int)Math.ceil(currentHalfCol);if (DEM.getValue(rowVals[0],colVals[0]) != noData) {elevClassData[0]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[0]=noData;}if (DEM.getValue(rowVals[0],colVals[1]) != noData) {elevClassData[1]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[1]=noData;}if (DEM.getValue(rowVals[1],colVals[0]) != noData) {elevClassData[2]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[2]=noData;}if (DEM.getValue(rowVals[1],colVals[1]) != noData) {elevClassData[3]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[3]=noData;}edges=new boolean[4];if (elevClassData[1] != elevClassData[3] && Math.min(elevClassData[1],elevClassData[3]) != noData) {edges[0]=true;}if (elevClassData[2] != elevClassData[3] && Math.min(elevClassData[2],elevClassData[3]) != noData) {edges[1]=true;}if (elevClassData[0] != elevClassData[2] && Math.min(elevClassData[0],elevClassData[2]) != noData) {edges[2]=true;}if (elevClassData[0] != elevClassData[1] && Math.min(elevClassData[0],elevClassData[1]) != noData) {edges[3]=true;}visitedData=new int[4];visitedData[0]=(int)temp1.getValue(rowVals[0],colVals[0]);visitedData[1]=(int)temp1.getValue(rowVals[0],colVals[1]);visitedData[2]=(int)temp1.getValue(rowVals[1],colVals[0]);visitedData[3]=(int)temp1.getValue(rowVals[1],colVals[1]);untraversed=new boolean[4];if (visitedData[1] == 0 && visitedData[3] == 0) {untraversed[0]=true;} else {val1=BitOps.checkBit(visitedData[1],2);val2=BitOps.checkBit(visitedData[3],0);untraversed[0]=!(val1 | val2);}if (visitedData[2] == 0 && visitedData[3] == 0) {untraversed[1]=true;} else {val1=BitOps.checkBit(visitedData[2],1);val2=BitOps.checkBit(visitedData[3],3);untraversed[1]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[2] == 0) {untraversed[2]=true;} else {val1=BitOps.checkBit(visitedData[0],2);val2=BitOps.checkBit(visitedData[2],0);untraversed[2]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[1] == 0) {untraversed[3]=true;} else {val1=BitOps.checkBit(visitedData[0],1);val2=BitOps.checkBit(visitedData[1],3);untraversed[3]=!(val1 | val2);}previousTraceDirection=traceDirection;if (edges[0] && untraversed[0]) {traceDirection=0;} else if (edges[1] && untraversed[1]) {traceDirection=1;} else if (edges[2] && untraversed[2]) {traceDirection=2;} else if (edges[3] && untraversed[3]) {traceDirection=3;} else {traceDirection=-1;flag=false;}if (previousTraceDirection != traceDirection) {xCoord=west + (currentHalfCol / cols) * EWRange;yCoord=north - (currentHalfRow / rows) * NSRange;points.addPoint(xCoord,yCoord);}switch (traceDirection) {case 0:currentHalfCol+=1.0;temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],2));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],0));break;case 1:currentHalfRow+=1.0;temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],1));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],3));break;case 2:currentHalfCol-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],2));temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],0));break;case 3:currentHalfRow-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],1));temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],3));break;}numPoints++;if (numPoints > 1000000) {flag=false;}} while (flag);if (numPoints > 1) {PolyLine line=new PolyLine(parts,points.getPointsArray());output.addRecord(line);Object[] rowData=new Object[2];rowData[0]=new Double(FID);rowData[1]=new Double(contourValue);writer.addRecord(rowData);}}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 5 of 5:",progress);}DEM.close();temp1.close();output.write();writer.write();returnData(outputFileName);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public void testRadixOutOfRange(){  String value="442429234853876401";  int radix=10;  BigInteger aNumber=new BigInteger(value,radix);  String result=aNumber.toString(45);  assertTrue(result.equals(value));}  }
class C{  public void mouseExited(MouseEvent evt){}  }
class C{  public TextParserX(){  m_nullTextString="";  m_nullNumberString="";  m_nullDateTimeString="";  m_decimalSeparator=',';  m_datetimePattern="dd-MM-yyyy HH:mm:ss";  m_datePattern="dd-MM-yyyy";  m_timePattern="HH:mm:ss";}  }
class C{  public void logLevelChange(Level level){}  }
class C{  protected synchronized byte[] firstKey() throws IOException {  assert (this.index != null) : "index == null; closeDate=" + this.closeDate + ", now="+ new Date();  if (this.index == null) {    log.severe("this.index == null in firstKey(); closeDate=" + this.closeDate + ", now="+ new Date()+ this.heapFile == null ? "" : (" file = " + this.heapFile.toString()));    return null;  }synchronized (this.index) {    return this.index.smallestKey();  }}  }
class C{  public boolean isReturnval(){  return returnval;}  }
class C{  public boolean isRegistered(){  return attribute.isRegistered();}  }
class C{  public void output(PrintWriter out){  Element element=null;  Enumeration<Element> data=ec.elements();  while (data.hasMoreElements()) {    element=data.nextElement();    element.output(out);  }}  }
class C{  public void destroy(){  log.fine("destroy");}  }
class C{  public List<String> listFiles(String parentFolderId,String query) throws IOException {  ImmutableList.Builder<String> result=new ImmutableList.Builder<>();  Children.List req=drive.children().list(parentFolderId);  if (!Strings.isNullOrEmpty(query)) {    req.setQ(query);  }  do {    ChildList files=req.execute();    for (    ChildReference child : files.getItems()) {      result.add(child.getId());    }    req.setPageToken(files.getNextPageToken());  } while (!Strings.isNullOrEmpty(req.getPageToken()));  return result.build();}  }
class C{  public void scannerData(int reqId,int rank,ContractDetails contractDetails,String distance,String benchmark,String projection,String legsStr){  _log.debug("scannerData: " + reqId);}  }
class C{  private static void addComment(Document doc){  doc.appendChild(doc.createComment("\n" + "  Licensed to the Apache Software Foundation (ASF) under one or more\n" + "  contributor license agreements.  See the NOTICE file distributed with\n"+ "  this work for additional information regarding copyright ownership.\n"+ "  The ASF licenses this file to You under the Apache License, Version 2.0\n"+ "  (the \"License\"); you may not use this file except in compliance with\n"+ "  the License.  You may obtain a copy of the License at\n\n"+ "       http://www.apache.org/licenses/LICENSE-2.0\n\n"+ "  Unless required by applicable law or agreed to in writing, software\n"+ "  distributed under the License is distributed on an \"AS IS\" BASIS,\n"+ "  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"+ "  See the License for the specific language governing permissions and\n"+ "  limitations under the License.\n"));  doc.appendChild(doc.createComment("\n    XML generated by Apache Ignite Schema Import utility: " + new SimpleDateFormat("MM/dd/yyyy").format(new Date()) + "\n"));}  }
class C{  public static int min(int... numbers){  int min=numbers[0];  for (  int e : numbers) {    if (e < min)     min=e;  }  return min;}  }
class C{  public void addPoly(int[] xypoints,LinkProperties properties) throws IOException {  LinkPoly.write(xypoints,properties,link.dos);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.955 -0400",hash_original_method="B96EF178F3ED1A0DFACDA94649407E5C",hash_generated_method="4D83B8C1063FF7FA74D9E723C4611DA4") @Override public void close(){}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 90) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public int copyLinesFrom(MProjectPhase fromPhase){  if (fromPhase == null)   return 0;  int count=0;  MProjectLine[] fromLines=fromPhase.getLines();  for (int i=0; i < fromLines.length; i++) {    if (fromLines[i].getC_ProjectTask_ID() != 0)     continue;    MProjectLine toLine=new MProjectLine(getCtx(),0,get_TrxName());    PO.copyValues(fromLines[i],toLine,getAD_Client_ID(),getAD_Org_ID());    toLine.setC_Project_ID(getC_Project_ID());    toLine.setC_ProjectPhase_ID(getC_ProjectPhase_ID());    if (toLine.save())     count++;  }  if (fromLines.length != count)   log.warning("Count difference - ProjectLine=" + fromLines.length + " <> Saved="+ count);  return count;}  }
class C{  public int write(byte[] b,int off){  int nBytes=super.write(b,off);  nBytes+=writeLEInt(b,off + nBytes,shapeType);  nBytes+=writeBox(b,off + nBytes,bounds);  int numParts=polygons.length;  nBytes+=writeLEInt(b,off + nBytes,numParts);  int numPoints=0;  for (int i=0; i < numParts; i++) {    numPoints+=polygons[i].nPoints;  }  nBytes+=writeLEInt(b,off + nBytes,numPoints);  int ptr=0;  for (int i=0; i < numParts; i++) {    nBytes+=writeLEInt(b,off + nBytes,ptr);    ptr+=polygons[i].nPoints;  }  for (int i=0; i < numParts; i++) {    double[] pts=((ESRIPoly.ESRIFloatPoly)polygons[i]).getRadians();    int nPts=pts.length;    for (int j=0; j < nPts; j+=2) {      nBytes+=writeLEDouble(b,off + nBytes,(double)ProjMath.radToDeg(pts[j + 1]));      nBytes+=writeLEDouble(b,off + nBytes,(double)ProjMath.radToDeg(pts[j]));    }  }  return nBytes;}  }
class C{  public boolean userCanMoveArch(int connectedUserId,int archId,int dstDirId,String entidad) throws Exception {  boolean can=false;  int parentId;  int parentArchMgrId=ISicresAdminDefsKeys.NULL_ID;  int dstDirMgrId=ISicresAdminDefsKeys.NULL_ID;  ArchivesTable table=new ArchivesTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    parentId=DbSelectFns.selectLongInteger(dbConn,DaoDATNodeTbl.getTblName(),DaoDATNodeTbl.getParentIdColName(true),table.getLoadNodeArchIdQual(archId));    if (parentId == ISicresAdminDefsKeys.ROOT_DIR_ID)     parentArchMgrId=0; else     parentArchMgrId=getDirMgrId(parentId,entidad);    if (dstDirId == ISicresAdminDefsKeys.NULL_ID || dstDirId == ISicresAdminDefsKeys.ROOT_DIR_ID)     dstDirMgrId=0; else     dstDirMgrId=getDirMgrId(dstDirId,entidad);    can=hasUserAuth(connectedUserId,USER_ACTION_ID_MOVE,ISicresAdminDefsKeys.NULL_ID,parentArchMgrId,dstDirMgrId,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  protected boolean prepareQueryForDimension(Domain domain,HierarchyQuery select,List<DimensionIndex> indexes,boolean handling_continuous){  boolean result=false;  DimensionIndex root=indexes.get(0);  for (  DimensionIndex index : indexes) {    if (!(index instanceof DimensionIndexProxy)) {      boolean needed=prepareQueryForDimension(domain,select,index);      if (!needed && index.getStatus() == Status.STALE) {        index.setDone();      }      if (handling_continuous && index == root && index.getDimension().getType() == Type.CONTINUOUS) {      } else {        result=needed || result;      }    }  }  return result;}  }
class C{  private void validateInitiatorRegistered(Initiator initiator){  if (initiator != null && !RegistrationStatus.REGISTERED.name().equalsIgnoreCase(initiator.getRegistrationStatus())) {    throw APIException.badRequests.invalidParameterInitiatorIsDeregistered(initiator);  }}  }
class C{  public static boolean isExpressionStatement(JCExpression tree){switch (tree.getTag()) {case PREINC:case PREDEC:case POSTINC:case POSTDEC:case ASSIGN:case BITOR_ASG:case BITXOR_ASG:case BITAND_ASG:case SL_ASG:case SR_ASG:case USR_ASG:case PLUS_ASG:case MINUS_ASG:case MUL_ASG:case DIV_ASG:case MOD_ASG:case APPLY:case NEWCLASS:case ERRONEOUS:    return true;default :  return false;}}  }
class C{  public void addAndLabelSynapseGroup(SynapseGroup synGrp){  addSynapseGroup(synGrp);  NeuronGroup source=synGrp.getSourceNeuronGroup();  NeuronGroup target=synGrp.getTargetNeuronGroup();  setSynapseGroupLabel(source,target,synGrp,source.getLabel(),target.getLabel());}  }
class C{  public boolean canSet12Or24HourClock(){  if (DEBUG_SHOW_PUBLIC_CALLS) {    log.debug("canSet12Or24HourClock");  }  return true;}  }
class C{  protected void init(Refactoring refactoring) throws CoreException {}  }
class C{  public static int dragViewToY(InstrumentationTestCase test,View v,int gravity,int toY){  int[] xy=new int[2];  getStartLocation(v,gravity,xy);  final int fromX=xy[0];  final int fromY=xy[1];  int deltaY=fromY - toY;  drag(test,fromX,fromX,fromY,toY,deltaY);  return deltaY;}  }
class C{  public XmlChecker(){  m_domParser=null;  m_onlyCheckValidity=true;  m_infoMsg=null;  m_valid=true;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override synchronized void doAbort(Executor executor) throws SQLException {  this.currentConnection.abort(executor);}  }
class C{  private void updateErrorField(){  rmsError.setText("Error:" + Utils.round(trainer.getError(),4));}  }
class C{  public boolean isReachable(){  return reachable;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("Post from " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  Properties ctx=JSPEnv.getCtx(request);  HttpSession session=request.getSession(true);  WebUser wu=(WebUser)session.getAttribute(WebUser.NAME);  MPayment p=(MPayment)session.getAttribute(ATTR_PAYMENT);  WebOrder wo=(WebOrder)session.getAttribute(WebOrder.NAME);  String url=null;  if (wu == null || p == null)   url="/index.jsp"; else   if (processPayment(request,ctx,p,wu,wo))   url="/confirm.jsp"; else   url="/paymentInfo.jsp";  log.info("Forward to " + url);  RequestDispatcher dispatcher=getServletContext().getRequestDispatcher(url);  dispatcher.forward(request,response);}  }
class C{  public boolean merge(final Frame<? extends V> frame,final boolean[] access){  boolean changes=false;  for (int i=0; i < locals; ++i) {    if (!access[i] && !values[i].equals(frame.values[i])) {      values[i]=frame.values[i];      changes=true;    }  }  return changes;}  }
class C{  public int layoutHelperElementTypePrimitiveInPlace(){  return (layoutHelperArrayTagTypeValue & ~layoutHelperArrayTagObjectValue) << layoutHelperArrayTagShift;}  }
class C{  public boolean deleteEntryFiles(){  String tmp2=getSubmissionID() + getUsername();  File zipfile=new File(JPLAG_ENTRIES_DIRECTORY + File.separator + tmp2+ ".zip");  File entrydir=new File(JPLAG_ENTRIES_DIRECTORY + File.separator + tmp2);  try {    zipfile.delete();    if (entrydir.exists())     deleteDir(entrydir);  } catch (  SecurityException ex) {    System.out.println("Not allowed to delete entry files!");    return false;  }  return true;}  }
class C{  public static byte[] generateX509PublicKey(PublicKey publicKey) throws Exception {  X509EncodedKeySpec x509EncodedPublicKey=KEY_FACTORY.getKeySpec(publicKey,X509EncodedKeySpec.class);  return x509EncodedPublicKey.getEncoded();}  }
class C{  public void testRemoveAllFull(){  Trie remove=buildTrie(m_Data);  Trie clone=(Trie)m_Trie.clone();  m_Trie.removeAll(remove);  assertEquals("Removing all strings",clone.size(),m_Trie.size() + m_Data.length);}  }
class C{  private static StatisticsProvider statsInit(List<Object> args){  int windowSize=0;  if (args.size() > 0 && args.get(0) instanceof Number) {    windowSize=convert(args.get(0),Integer.class);  }  if (windowSize > 0) {    return new WindowedStatisticsProvider(windowSize);  }  return new OnlineStatisticsProvider();}  }
class C{  public static TypeCode toTypeCode(byte b){  return toTypeCode((char)b);}  }
class C{  public void resetMustSend(){  for (int i=0; i < (outputBits[nodeType] + 7) / 8; i++) {    if (outputByteChanged[i]) {      return;    }  }  super.resetMustSend();}  }
class C{  public static <K,V>Map<K,V> sortMap(Map<K,V> map,Comparator<Entry<K,V>> compator){  Map<K,V> result=new LinkedHashMap<K,V>();  List<Entry<K,V>> entries=new ArrayList<Entry<K,V>>(map.entrySet());  Collections.sort(entries,compator);  for (  Entry<K,V> entry : entries) {    result.put(entry.getKey(),entry.getValue());  }  return result;}  }
class C{  public static void hideToast(){  if (null != toast) {    toast.cancel();  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void testNextGaussian(){  Random r=new Random();  double f=r.nextGaussian();  int i=0;  while (i < NCALLS && r.nextGaussian() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  public void testClassFromModuleAlias() throws Exception {  runPythonTest(new SkeletonTestTask("dotNet/expected.skeleton.java.py","com.just.like.java","import_class_from_module_alias.py",null));}  }
class C{  public ExportException(String s){  super(s);}  }
class C{  private boolean addNodesInDocOrder(int start,int end,int testIndex,NodeList nodelist,XPathContext support){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  boolean foundit=false;  int i;  Node node=nodelist.item(testIndex);  for (i=end; i >= start; i--) {    Node child=(Node)elementAt(i);    if (child == node) {      i=-2;      break;    }    if (!DOM2Helper.isNodeAfter(node,child)) {      insertElementAt(node,i + 1);      testIndex--;      if (testIndex > 0) {        boolean foundPrev=addNodesInDocOrder(0,i,testIndex,nodelist,support);        if (!foundPrev) {          addNodesInDocOrder(i,size() - 1,testIndex,nodelist,support);        }      }      break;    }  }  if (i == -1) {    insertElementAt(node,0);  }  return foundit;}  }
class C{  public void softDelete(String type,List<String> ids,MetacatContext metacatContext){  if (ids != null && !ids.isEmpty()) {    List<List<String>> partitionedDocs=Lists.partition(ids,100);    partitionedDocs.forEach(null);  }}  }
class C{  final void delete(int index){  if (!isNominal() && !isString() && !isRelationValued()) {    throw new IllegalArgumentException("Can only remove value of " + "nominal, string or relation-" + " valued attribute!");  } else {    ((NominalAttributeInfo)m_AttributeInfo).m_Values=Utils.cast(((NominalAttributeInfo)m_AttributeInfo).m_Values.clone());    ((NominalAttributeInfo)m_AttributeInfo).m_Values.remove(index);    if (!isRelationValued()) {      Hashtable<Object,Integer> hash=new Hashtable<Object,Integer>(((NominalAttributeInfo)m_AttributeInfo).m_Hashtable.size());      Enumeration<Object> enu=((NominalAttributeInfo)m_AttributeInfo).m_Hashtable.keys();      while (enu.hasMoreElements()) {        Object string=enu.nextElement();        Integer valIndexObject=((NominalAttributeInfo)m_AttributeInfo).m_Hashtable.get(string);        int valIndex=valIndexObject.intValue();        if (valIndex > index) {          hash.put(string,new Integer(valIndex - 1));        } else         if (valIndex < index) {          hash.put(string,valIndexObject);        }      }      ((NominalAttributeInfo)m_AttributeInfo).m_Hashtable=hash;    }  }}  }
class C{  public void printStackTrace(){  printStackTrace(System.err);}  }
class C{  public boolean exist(String name){  return tags.containsKey(name);}  }
class C{  public void insertUpdate(DocumentEvent changes,Shape a,ViewFactory f){  handleInsert(changes.getOffset(),changes.getLength());  super.insertUpdate(changes,a,f);}  }
class C{  private static IgniteLogger initLogger(String log) throws IgniteCheckedException {  Logger impl=Logger.getRootLogger();  impl.removeAllAppenders();  String fileName=U.getIgniteHome() + "/work/log/" + log;  RollingFileAppender fileApp;  String fmt="[%d{ABSOLUTE}][%-5p][%t][%c{1}] %m%n";  try {    fileApp=new RollingFileAppender(new PatternLayout(fmt),fileName);    fileApp.setMaxBackupIndex(0);    fileApp.rollOver();  } catch (  IOException e) {    throw new IgniteCheckedException("Unable to initialize file appender.",e);  }  LevelRangeFilter lvlFilter=new LevelRangeFilter();  lvlFilter.setLevelMin(Level.DEBUG);  fileApp.addFilter(lvlFilter);  impl.addAppender(fileApp);  ConsoleAppender conApp=new ConsoleAppender(new PatternLayout(fmt),ConsoleAppender.SYSTEM_OUT);  lvlFilter=new LevelRangeFilter();  lvlFilter.setLevelMin(Level.INFO);  lvlFilter.setLevelMax(Level.INFO);  conApp.addFilter(lvlFilter);  impl.addAppender(conApp);  conApp=new ConsoleAppender(new PatternLayout(fmt),ConsoleAppender.SYSTEM_ERR);  conApp.setThreshold(Level.WARN);  impl.addAppender(conApp);  impl.setLevel(Level.INFO);  Logger.getLogger("org.apache.ignite").setLevel(Level.DEBUG);  return new GridTestLog4jLogger(false);}  }
class C{  protected void reuseEntry(HashEntry entry,int hashIndex,int hashCode,Object key,Object value){  entry.next=data[hashIndex];  entry.hashCode=hashCode;  entry.key=key;  entry.value=value;}  }
class C{  public void update(){  for (int i=0; i < this.connections.size(); ) {    Connection con=this.connections.get(i);    NetworkInterface anotherInterface=con.getOtherInterface(this);    assert con.isUp() : "Connection " + con + " was down!";    if (!isWithinRange(anotherInterface)) {      disconnect(con,anotherInterface);      connections.remove(i);    } else {      i++;    }  }}  }
class C{  public String makeQueryString(HttpServletRequest request,ConfigXMLReader.RequestResponse requestResponse){  if (requestResponse == null || (requestResponse.redirectParameterMap.size() == 0 && requestResponse.redirectParameterValueMap.size() == 0)) {    Map<String,Object> urlParams=UtilHttp.getUrlOnlyParameterMap(request);    String queryString=UtilHttp.urlEncodeArgs(urlParams,false);    if (UtilValidate.isEmpty(queryString)) {      return queryString;    }    return "?" + queryString;  } else {    StringBuilder queryString=new StringBuilder();    queryString.append("?");    for (    Map.Entry<String,String> entry : requestResponse.redirectParameterMap.entrySet()) {      String name=entry.getKey();      String from=entry.getValue();      Object value=request.getAttribute(from);      if (value == null) {        value=request.getParameter(from);      }      addNameValuePairToQueryString(queryString,name,(String)value);    }    for (    Map.Entry<String,String> entry : requestResponse.redirectParameterValueMap.entrySet()) {      String name=entry.getKey();      String value=entry.getValue();      addNameValuePairToQueryString(queryString,name,value);    }    return queryString.toString();  }}  }
class C{  public void stop(){synchronized (this.messageQueue) {    this.isRunning=false;    this.messageQueue.notifyAll();    sock.close();  }}  }
class C{  public void testDeadlocksDeleteMkdirs() throws Exception {  checkDeadlocksRepeat(5,2,2,2,0,DELETE_CNT,0,MKDIRS_CNT,0);}  }
class C{  public AuthChallengeResponse(AuthChallengeResponse other){  if (other.isSetChallenge()) {    this.challenge=other.challenge;  }  if (other.isSetResponse()) {    this.response=other.response;  }}  }
class C{  private MobileDoc createParameterPage(MobileSessionCtx wsc,int processId,int windowID,int tableID,int recordID,int Type,String columnName,GridTab mTab){  MProcess process=null;  if (Type == 0)   process=MProcess.getFromMenu(wsc.ctx,processId); else   process=MProcess.get(wsc.ctx,processId);  if (process == null) {    MobileDoc doc=MobileDoc.createWindow("Process Not Found");    return doc;  }  MobileDoc doc=MobileDoc.createWindow(process.getName());  if (process.isWorkflow()) {    if (mTab == null) {      doc=MobileDoc.createWindow("No Tab found");      return doc;    }    if (columnName.toString().equals("DocAction")) {      readReference();      option[] Options=dynInit(windowID,tableID,recordID,columnName,mTab);      fieldset center=new fieldset();      WebField wField=new WebField(wsc,columnName,columnName,columnName,17,22,22,false,false,false,false,false,false,processId,0,0,0,0,null,null,null,null,null);      if (process.getDescription() != null)       center.addElement(new p(new i(process.getDescription())));      if (process.getHelp() != null)       center.addElement(new p(process.getHelp(),AlignType.LEFT));      form myForm=new form("WProcess").setName("process" + process.getAD_Process_ID());      myForm.setTarget("WProcess");      myForm.setMethod("GET");      myForm.addElement(new input(input.TYPE_HIDDEN,"AD_Process_ID",process.getAD_Process_ID()));      myForm.addElement(new input(input.TYPE_HIDDEN,"AD_Window_ID",windowID));      myForm.addElement(new input(input.TYPE_HIDDEN,"AD_Table_ID",tableID));      myForm.addElement(new input(input.TYPE_HIDDEN,"AD_Record_ID",recordID));      table myTable=new table("0","0","5","100%",null);      myTable.setID("WProcessParameter");      myTable.addElement(new tr().addElement(wField.getLabel(true)).addElement(createSelectField(columnName,Options)));      String text="Reset";      if (wsc.ctx != null)       text=Msg.getMsg(wsc.ctx,"Reset");      input restbtn=new input(input.TYPE_RESET,text,"  " + text);      restbtn.setID(text);      restbtn.setClass("resetbtn");      text="Submit";      if (wsc.ctx != null)       text=Msg.getMsg(wsc.ctx,"Submit");      input submitbtn=new input(input.TYPE_SUBMIT,text,"  " + text);      submitbtn.setID(text);      submitbtn.setClass("submitbtn");      myTable.addElement(new tr().addElement(new td(null,AlignType.RIGHT,AlignType.MIDDLE,false,restbtn)).addElement(new td(null,AlignType.LEFT,AlignType.MIDDLE,false,submitbtn)).addElement(new td(null,AlignType.RIGHT,AlignType.MIDDLE,false,null)));      myForm.addElement(myTable);      center.addElement(myForm);    }  } else {    form myForm=new form().setName(process.getName());    myForm.addAttribute("selected","true");    myForm.setClass("panel");    if (process.getDescription() != null)     myForm.addElement(new p(new i(process.getDescription())));    if (process.getHelp() != null)     myForm.addElement(new p(process.getHelp(),AlignType.LEFT));    myForm.setMethod("get");    myForm.setAction(MobileEnv.getBaseDirectory("WProcess?AD_Process_ID=" + process.getAD_Process_ID()));    myForm.setTarget("_self");    myForm.addElement(new input(input.TYPE_HIDDEN,"AD_Process_ID",process.getAD_Process_ID()));    myForm.addElement(new input(input.TYPE_HIDDEN,"AD_Window_ID",windowID));    myForm.addElement(new input(input.TYPE_HIDDEN,"AD_Table_ID",tableID));    myForm.addElement(new input(input.TYPE_HIDDEN,"AD_Record_ID",recordID));    fieldset fs=new fieldset();    fs.setID("WProcessParameter");    MProcessPara[] parameter=process.getParameters();    for (int i=0; i < parameter.length; i++) {      MProcessPara para=parameter[i];      WebField wField=new WebField(wsc,para.getColumnName(),para.getName(),para.getDescription(),para.getAD_Reference_ID(),para.getFieldLength(),para.getFieldLength(),false,false,para.isMandatory(),false,false,false,para.getAD_Process_ID(),0,0,0,i,null,null,null,null,null);      WebField wFieldforRange=null;      if (para.isRange())       wFieldforRange=new WebField(wsc,para.getColumnName(),para.getName(),para.getDescription(),para.getAD_Reference_ID(),para.getFieldLength(),para.getFieldLength(),false,false,para.isMandatory(),false,false,false,para.getAD_Process_ID(),0,0,0,i + 1,null,null,null,null,null);      Element toField=para.isRange() ? wFieldforRange.getField(para.getLookup(),para.getDefaultValue2()) : new td(MobileEnv.NBSP);      div d=new div();      d.setClass("row");      fs.addElement(d.addElement(wField.getLabel(true)).addElement(wField.getField(para.getLookup(),para.getDefaultValue())).addElement(toField));    }    String text="Submit";    if (wsc.ctx != null)     text=Msg.getMsg(wsc.ctx,"Submit");    a submitbtn=new a("#",text);    submitbtn.setClass("whiteButton");    submitbtn.addAttribute("type","submit");    submitbtn.setID(text);    myForm.addElement(fs);    myForm.addElement(submitbtn);    doc.getBody().addElement(myForm);  }  return doc;}  }
class C{  public void notationDecl(String name,String publicId,String systemId) throws SAXException {}  }
class C{  public boolean drawImage(Image img,int x,int y,int width,int height,ImageObserver observer){  return drawImage(img,x,y,width,height,null,observer);}  }
class C{  public void printStackTrace(PrintWriter output){synchronized (output) {    super.printStackTrace(output);    Throwable throwable=getException();    if (throwable != null) {      output.print("Caused by: ");      throwable.printStackTrace(output);    }  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public int length(){  return count;}  }
class C{  public void addVolume(URI blockObjectURI,Integer lun){  if (getVolumes() == null) {    setVolumes(new StringMap());  }  getVolumes().put(blockObjectURI.toString(),lun.toString());}  }
class C{  public static String optionKeyFromIrritant(int irritant){switch (irritant) {case MethodWithConstructorName:    return OPTION_ReportMethodWithConstructorName;case OverriddenPackageDefaultMethod:  return OPTION_ReportOverridingPackageDefaultMethod;case UsingDeprecatedAPI:case (InvalidJavadoc | UsingDeprecatedAPI):return OPTION_ReportDeprecation;case MaskedCatchBlock:return OPTION_ReportHiddenCatchBlock;case UnusedLocalVariable:return OPTION_ReportUnusedLocal;case UnusedArgument:return OPTION_ReportUnusedParameter;case NoImplicitStringConversion:return OPTION_ReportNoImplicitStringConversion;case AccessEmulation:return OPTION_ReportSyntheticAccessEmulation;case NonExternalizedString:return OPTION_ReportNonExternalizedStringLiteral;case AssertUsedAsAnIdentifier:return OPTION_ReportAssertIdentifier;case UnusedImport:return OPTION_ReportUnusedImport;case NonStaticAccessToStatic:return OPTION_ReportNonStaticAccessToStatic;case Task:return OPTION_TaskTags;case NoEffectAssignment:return OPTION_ReportNoEffectAssignment;case IncompatibleNonInheritedInterfaceMethod:return OPTION_ReportIncompatibleNonInheritedInterfaceMethod;case UnusedPrivateMember:return OPTION_ReportUnusedPrivateMember;case LocalVariableHiding:return OPTION_ReportLocalVariableHiding;case FieldHiding:return OPTION_ReportFieldHiding;case AccidentalBooleanAssign:return OPTION_ReportPossibleAccidentalBooleanAssignment;case EmptyStatement:return OPTION_ReportEmptyStatement;case MissingJavadocComments:return OPTION_ReportMissingJavadocComments;case MissingJavadocTags:return OPTION_ReportMissingJavadocTags;case UnqualifiedFieldAccess:return OPTION_ReportUnqualifiedFieldAccess;case UnusedDeclaredThrownException:return OPTION_ReportUnusedDeclaredThrownExceptionWhenOverriding;case FinallyBlockNotCompleting:return OPTION_ReportFinallyBlockNotCompletingNormally;case InvalidJavadoc:return OPTION_ReportInvalidJavadoc;case UnnecessaryTypeCheck:return OPTION_ReportUnnecessaryTypeCheck;case UndocumentedEmptyBlock:return OPTION_ReportUndocumentedEmptyBlock;case IndirectStaticAccess:return OPTION_ReportIndirectStaticAccess;case UnnecessaryElse:return OPTION_ReportUnnecessaryElse;case UncheckedTypeOperation:return OPTION_ReportUncheckedTypeOperation;case FinalParameterBound:return OPTION_ReportFinalParameterBound;case MissingSerialVersion:return OPTION_ReportMissingSerialVersion;case EnumUsedAsAnIdentifier:return OPTION_ReportEnumIdentifier;case ForbiddenReference:return OPTION_ReportForbiddenReference;case VarargsArgumentNeedCast:return OPTION_ReportVarargsArgumentNeedCast;case NullReference:return OPTION_ReportNullReference;case PotentialNullReference:return OPTION_ReportPotentialNullReference;case RedundantNullCheck:return OPTION_ReportRedundantNullCheck;case AutoBoxing:return OPTION_ReportAutoboxing;case AnnotationSuperInterface:return OPTION_ReportAnnotationSuperInterface;case TypeHiding:return OPTION_ReportTypeParameterHiding;case MissingOverrideAnnotation:return OPTION_ReportMissingOverrideAnnotation;case IncompleteEnumSwitch:return OPTION_ReportIncompleteEnumSwitch;case MissingDeprecatedAnnotation:return OPTION_ReportMissingDeprecatedAnnotation;case DiscouragedReference:return OPTION_ReportDiscouragedReference;case UnhandledWarningToken:return OPTION_ReportUnhandledWarningToken;case RawTypeReference:return OPTION_ReportRawTypeReference;case UnusedLabel:return OPTION_ReportUnusedLabel;case ParameterAssignment:return OPTION_ReportParameterAssignment;case FallthroughCase:return OPTION_ReportFallthroughCase;case OverridingMethodWithoutSuperInvocation:return OPTION_ReportOverridingMethodWithoutSuperInvocation;case MissingJavadocTagDescription:return OPTION_ReportMissingJavadocTagDescription;case UnusedTypeArguments:return OPTION_ReportUnusedTypeArgumentsForMethodInvocation;case UnusedWarningToken:return OPTION_ReportUnusedWarningToken;case RedundantSuperinterface:return OPTION_ReportRedundantSuperinterface;case ComparingIdentical:return OPTION_ReportComparingIdentical;case MissingSynchronizedModifierInInheritedMethod:return OPTION_ReportMissingSynchronizedOnInheritedMethod;case ShouldImplementHashcode:return OPTION_ReportMissingHashCodeMethod;case DeadCode:return OPTION_ReportDeadCode;case UnusedObjectAllocation:return OPTION_ReportUnusedObjectAllocation;case MethodCanBeStatic:return OPTION_ReportMethodCanBeStatic;case MethodCanBePotentiallyStatic:return OPTION_ReportMethodCanBePotentiallyStatic;case RedundantSpecificationOfTypeArguments:return OPTION_ReportRedundantSpecificationOfTypeArguments;}return null;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSize=3;  double n;  double sum;  int[] dX;  int[] dY;  double[] weightsD;  double[] weightsI;  int midPoint;  int numPixelsInFilter;  boolean reflectAtBorders=false;  double sigmaD=0;  double sigmaI=0;  double recipRoot2PiTimesSigmaD;  double recipRoot2PiTimesSigmaI;  double twoSigmaSqrD;  double twoSigmaSqrI;  double zN, zFinal;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      sigmaD=Double.parseDouble(args[i]);    } else     if (i == 3) {      sigmaI=Double.parseDouble(args[i]);    } else     if (i == 4) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if (sigmaD < 0.5) {    sigmaD=0.5;  } else   if (sigmaD > 20) {    sigmaD=20;  }  if (sigmaI < 0.001) {    sigmaI=0.001;  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    recipRoot2PiTimesSigmaD=1 / (Math.sqrt(2 * Math.PI) * sigmaD);    twoSigmaSqrD=2 * sigmaD * sigmaD;    recipRoot2PiTimesSigmaI=1 / (Math.sqrt(2 * Math.PI) * sigmaI);    twoSigmaSqrI=2 * sigmaI * sigmaI;    double weight;    for (int i=0; i <= 250; i++) {      weight=recipRoot2PiTimesSigmaD * Math.exp(-1 * (i * i) / twoSigmaSqrD);      if (weight <= 0.001) {        filterSize=i * 2 + 1;        break;      }    }    if (filterSize % 2 == 0) {      filterSize++;    }    if (filterSize < 3) {      filterSize=3;    }    numPixelsInFilter=filterSize * filterSize;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    weightsD=new double[numPixelsInFilter];    weightsI=new double[numPixelsInFilter];    midPoint=(int)Math.floor(filterSize / 2) + 1;    a=0;    for (row=0; row < filterSize; row++) {      for (col=0; col < filterSize; col++) {        x=col - midPoint;        y=row - midPoint;        dX[a]=x;        dY[a]=y;        weight=recipRoot2PiTimesSigmaD * Math.exp(-1 * (x * x + y * y) / twoSigmaSqrD);        weightsD[a]=weight;        a++;      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          sum=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            zN=inputFile.getValue(y,x);            if (zN != noData) {              weight=recipRoot2PiTimesSigmaI * Math.exp(-1 * ((zN - z) * (zN - z)) / twoSigmaSqrI);              weight=weightsD[a] * weight;              weightsI[a]=weight;              sum+=weight;            }          }          zFinal=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            zN=inputFile.getValue(y,x);            if (zN != noData) {              zFinal+=weightsI[a] * zN / sum;            }          }          outputFile.setValue(row,col,zFinal);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public boolean handle(IGame.Phase phase,Vector<Report> vPhaseReport){  AmmoType atype=(AmmoType)ammo.getType();  server.deployTeleMissile(ae,atype,ae.getEquipmentNum(weapon),getCapMisMod(),vPhaseReport);  return false;}  }
class C{  public OrgJobDescription(String value){  this();  setValue(value);}  }
class C{  protected void handleDoubleClick(DoubleClickEvent anEvent){  super.handleDoubleClick(anEvent);  if (anEvent.getSelection() instanceof IStructuredSelection) {    IStructuredSelection iss=(IStructuredSelection)anEvent.getSelection();    Object firstElement=iss.getFirstElement();    if (firstElement instanceof Module) {      final Map<String,String> parameters=new HashMap<String,String>();      parameters.put(OpenModuleHandler.PARAM_MODULE,((Module)firstElement).getModuleName());      UIHelper.runCommand(OpenModuleHandler.COMMAND_ID,parameters);    } else     if (firstElement instanceof IGroup) {    } else     if (firstElement instanceof Spec && ((Spec)firstElement).isCurrentSpec()) {    } else {      UIHelper.runCommand(ToolboxExplorer.COMMAND_ID,new HashMap<String,String>());    }  }}  }
class C{  public static DeletePlatformSessionResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeletePlatformSessionResponseE object=new DeletePlatformSessionResponseE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","deletePlatformSessionResponse").equals(reader.getName())) {          object.setDeletePlatformSessionResponse(DeletePlatformSessionResponse.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static boolean isNoCacheKey(int optionNumber){  return (optionNumber & 0x1E) == 0x1C;}  }
class C{  protected void paintMarginLine(Graphics g,Rectangle visibleRect){  if (textArea.isMarginLineEnabled()) {    g.setColor(textArea.getMarginLineColor());    Insets insets=textArea.getInsets();    int marginLineX=textArea.getMarginLinePixelLocation() + (insets == null ? 0 : insets.left);    g.drawLine(marginLineX,visibleRect.y,marginLineX,visibleRect.y + visibleRect.height);  }}  }
class C{  @Override public double calculateDistance(double[] x1,double[] x2){  double prod=a * innerProduct(x1,x2) + b;  double e1=Math.exp(prod);  double e2=Math.exp(-prod);  return ((e1 - e2) / (e1 + e2));}  }
class C{  public void tagDefineButtonSound(int buttonId,int rollOverSoundId,SoundInfo rollOverSoundInfo,int rollOutSoundId,SoundInfo rollOutSoundInfo,int pressSoundId,SoundInfo pressSoundInfo,int releaseSoundId,SoundInfo releaseSoundInfo) throws IOException {  startTag(TAG_DEFINEBUTTONSOUND,buttonId,true);  out.writeUI16(rollOverSoundId);  if (rollOverSoundId != 0) {    rollOverSoundInfo.write(out);  }  out.writeUI16(rollOutSoundId);  if (rollOutSoundId != 0) {    rollOutSoundInfo.write(out);  }  out.writeUI16(pressSoundId);  if (pressSoundId != 0) {    pressSoundInfo.write(out);  }  out.writeUI16(releaseSoundId);  if (releaseSoundId != 0) {    releaseSoundInfo.write(out);  }  completeTag();}  }
class C{  private boolean refreshStatsMessage(final boolean updateOnly){  final String appName=configurationManager.getDefaultPropertyFile().getApplicationName();  if ((statMessageIndex == 0) && (StatisticsManager.stats.getConnections() > 0)) {    controlPanelItemController.setTitle(String.format("Your %s made %s connection" + (StatisticsManager.stats.getConnections() > 1 ? "s" : "") + " to MQTT brokers%s.",appName,FormattingUtils.formatNumber(StatisticsManager.stats.getConnections()),IN_DAYS_PHRASE));    return true;  } else   if ((statMessageIndex == 1) && (StatisticsManager.stats.getMessagesPublished() > 1)) {    controlPanelItemController.setTitle(String.format("Your %s published %s messages to MQTT brokers.",appName,FormattingUtils.formatNumber(StatisticsManager.stats.getMessagesPublished()),IN_DAYS_PHRASE));    return true;  } else   if ((statMessageIndex == 2) && (StatisticsManager.stats.getSubscriptions() > 1)) {    controlPanelItemController.setTitle(String.format("Your %s made %s subscriptions to MQTT brokers%s.",appName,FormattingUtils.formatNumber(StatisticsManager.stats.getSubscriptions()),IN_DAYS_PHRASE));    return true;  } else   if ((statMessageIndex == 3) && (StatisticsManager.stats.getMessagesReceived() > 1)) {    controlPanelItemController.setTitle(String.format("Your %s received %s messages%s.",appName,FormattingUtils.formatNumber(StatisticsManager.stats.getMessagesReceived()),SINCE_PHRASE));    return true;  } else   if ((statMessageIndex == 4) && (updateOnly || StatisticsManager.getMessagesPublished() > 1)) {    controlPanelItemController.setTitle(String.format("Right now your %s is publishing %s msgs/s.",appName,StatisticsManager.getMessagesPublished()));    return true;  } else   if ((statMessageIndex == 5) && (updateOnly || StatisticsManager.getMessagesReceived() > 1)) {    controlPanelItemController.setTitle(String.format("Right now your %s is munching through %d msgs/s.",appName,StatisticsManager.getMessagesReceived()));    return true;  }  return false;}  }
class C{  public static long interleave(int even,int odd){  long v1=0x00000000FFFFFFFFL & even;  long v2=0x00000000FFFFFFFFL & odd;  v1=(v1 | (v1 << SHIFT[4])) & MAGIC[4];  v1=(v1 | (v1 << SHIFT[3])) & MAGIC[3];  v1=(v1 | (v1 << SHIFT[2])) & MAGIC[2];  v1=(v1 | (v1 << SHIFT[1])) & MAGIC[1];  v1=(v1 | (v1 << SHIFT[0])) & MAGIC[0];  v2=(v2 | (v2 << SHIFT[4])) & MAGIC[4];  v2=(v2 | (v2 << SHIFT[3])) & MAGIC[3];  v2=(v2 | (v2 << SHIFT[2])) & MAGIC[2];  v2=(v2 | (v2 << SHIFT[1])) & MAGIC[1];  v2=(v2 | (v2 << SHIFT[0])) & MAGIC[0];  return (v2 << 1) | v1;}  }
class C{  public boolean isInPosession(){  Object oo=get_Value(COLUMNNAME_IsInPosession);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static int hash(int aSeed,Object aObject){  int result=aSeed;  if (aObject == null) {    result=hash(result,0);  } else   if (!isArray(aObject)) {    result=hash(result,aObject.hashCode());  } else {    final int length=Array.getLength(aObject);    for (int idx=0; idx < length; ++idx) {      final Object item=Array.get(aObject,idx);      result=hash(result,item);    }  }  return result;}  }
class C{  @Override public void add(final int index,final E value){  super.add(index,value);}  }
class C{  public synchronized void clear() throws IOException {  if (allocatedNodes != null) {    allocatedNodes.clear();  } else {    allocatedNodes=new BitSet();  }  scheduleSync();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public MACDSeries(Strategy strategy,String name,String type,String description,Boolean displayOnChart,Integer chartRGBColor,Boolean subChart){  super(strategy,name,type,description,displayOnChart,chartRGBColor,subChart);}  }
class C{  public RawUnionValue(int unionTag,Object value){  this.unionTag=unionTag;  this.value=value;}  }
class C{  private void showVariable(CategoricalTable distrib){  if (distrib.getBest() == ValueFactory.none()) {    distrib=distrib.getNBest(nBestView + 1);  } else {    distrib=distrib.getNBest(nBestView);  }  String text=getHtmlRendering(distrib);  String variable=distrib.getVariable();  try {    if (variable.equals(lastUpdatedVariable) && (system.getState().isIncremental(variable))) {      doc.remove(doc.getLength() - negativeOffset,negativeOffset);    }    int initLength=doc.getLength();    kit.read(new StringReader(text),doc,doc.getLength());    lastUpdatedVariable=variable;    lastUpdate=System.currentTimeMillis();    negativeOffset=doc.getLength() - initLength;  } catch (  Exception e) {    log.warning("text area exception: " + e);  }}  }
class C{  private void doRotation(float dx,float dy){  mRenderer.setSceneAngleX(dx * TOUCH_SCALE_FACTOR_ROTATION);  mRenderer.setSceneAngleY(dy * TOUCH_SCALE_FACTOR_ROTATION);}  }
class C{  public boolean wpsPbcSupported(){  return (wpsConfigMethodsSupported & WPS_CONFIG_PUSHBUTTON) != 0;}  }
class C{  public static void error(String message){  errors++;  err(NL + message);}  }
class C{  public SimpleDominatorsFinder(DirectedGraph graph){  this.graph=graph;  SimpleDominatorsAnalysis analysis=new SimpleDominatorsAnalysis(graph);{    nodeToDominators=new HashMap<Object,FlowSet>(graph.size() * 2 + 1,0.7f);    for (Iterator nodeIt=graph.iterator(); nodeIt.hasNext(); ) {      Object node=nodeIt.next();      FlowSet set=(FlowSet)analysis.getFlowAfter(node);      nodeToDominators.put(node,set);    }  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UHSUB16");  translateAll(environment,instruction,"UHSUB16",instructions);}  }
class C{  public void registerPlayerListener(CheerleaderPlayerListener listener){  checkState();  mCheerleaderPlayerListeners.add(listener);  if (mState == STATE_PLAYING) {    listener.onPlayerPlay(mPlayerPlaylist.getCurrentTrack(),mPlayerPlaylist.getCurrentTrackIndex());  } else   if (mState == STATE_PAUSED) {    listener.onPlayerPause();  }}  }
class C{  public void init(){  this.mappings.put("c",makeList("text/x-c"));  this.mappings.put("C",makeList("text/x-c++src"));  this.mappings.put("cc",makeList("text/x-c++src"));  this.mappings.put("cpp",makeList("text/x-c++src"));  this.mappings.put("h",makeList("text/x-chdr"));  this.mappings.put("hh",makeList("text/x-c++hdr"));  this.mappings.put("c++",Collections.singletonList("text/x-c++src"));  this.mappings.put("cs",Collections.singletonList("text/x-csharp"));  this.mappings.put("m",Collections.singletonList("text/x-objective-c"));  this.mappings.put("java",Collections.singletonList("text/x-java"));  this.mappings.put("class",Collections.singletonList("text/x-java"));  this.mappings.put("scala",Collections.singletonList("text/x-scala"));  this.mappings.put("sbt",Collections.singletonList("text/x-scala"));  this.mappings.put("clj",Collections.singletonList("text/x-clojure"));  this.mappings.put("groovy",Collections.singletonList("text/x-groovy"));  this.mappings.put("gvy",Collections.singletonList("text/x-groovy"));  this.mappings.put("gy",Collections.singletonList("text/x-groovy"));  this.mappings.put("gradle",Collections.singletonList("text/x-groovy"));  this.mappings.put("kt",Collections.singletonList("text/x-kotlin"));  this.mappings.put("js",makeList("application/javascript","text/javascript"));  this.mappings.put("coffee",makeList("text/x-coffeescript"));  this.mappings.put("json",makeList("application/json"));  this.mappings.put("ts",makeList("application/typescript"));  this.mappings.put("css",makeList("text/css"));  this.mappings.put("scss",makeList("text/x-scss"));  this.mappings.put("less",makeList("text/x-less"));  this.mappings.put("sass",makeList("text/x-sass"));  this.mappings.put("xml",makeList("application/xml"));  this.mappings.put("xml",makeList("application/xml"));  this.mappings.put("html",makeList("text/html"));  this.mappings.put("xhtml",makeList("application/xml+xhtml","text/html"));  this.mappings.put("htm",makeList("text/html"));  this.mappings.put("dtd",makeList("application/xml-dtd"));  this.mappings.put("yaml",makeList("text/x-yaml"));  this.mappings.put("yml",makeList("text/x-yaml"));  this.mappings.put("markdown",makeList("text/x-markdown"));  this.mappings.put("mdown",makeList("text/x-markdown"));  this.mappings.put("mkdn",makeList("text/x-markdown"));  this.mappings.put("mkd",makeList("text/x-markdown"));  this.mappings.put("md",makeList("text/x-markdown"));  this.mappings.put("mdwn",makeList("text/x-markdown"));  this.mappings.put("rest",makeList("text/x-rst"));  this.mappings.put("rst",makeList("text/x-rst"));  this.mappings.put("tex",makeList("text/x-latex"));  this.mappings.put("cls",makeList("text/x-latex"));  this.mappings.put("sty",makeList("text/x-latex"));  this.mappings.put("py",makeList("text/x-python"));  this.mappings.put("pyx",makeList("text/x-cython"));  this.mappings.put("rb",makeList("text/x-ruby"));  this.mappings.put("gemspec",makeList("text/x-ruby"));  this.mappings.put("go",makeList("text/x-go"));  this.mappings.put("rs",makeList("text/x-rustsrc"));  this.mappings.put("erl",makeList("text/x-erlang"));  this.mappings.put("lua",makeList("text/x-lua"));  this.mappings.put("tcl",makeList("text/x-tcl"));  this.mappings.put("pl",makeList("text/x-perl"));  this.mappings.put("pm",makeList("text/x-perl"));  this.mappings.put("php",makeList("text/x-php"));  this.mappings.put("ejs",makeList("application/x-ejs"));  this.mappings.put("jsp",makeList("application/x-jsp"));  this.mappings.put("asp",makeList("application/x-aspx"));  this.mappings.put("aspx",makeList("application/x-aspx"));  this.mappings.put("slim",makeList("text/x-slim"));  this.mappings.put("ml",makeList("text/x-ocaml"));  this.mappings.put("fs",makeList("text/x-fsharp"));  this.mappings.put("lisp",makeList("text/x-commonlisp"));  this.mappings.put("cl",makeList("text/x-commonlisp"));  this.mappings.put("hs",makeList("text/x-haskell"));  this.mappings.put("scm",makeList("text/x-scheme"));  this.mappings.put("sql",makeList("text/x-sql"));  this.mappings.put("properties",makeList("text/x-properties"));  this.mappings.put("diff",makeList("text/x-diff"));  this.mappings.put("r",makeList("text/x-rsrc"));  this.mappings.put("R",makeList("text/x-rsrc"));  this.mappings.put("csv",makeList("text/csv"));  this.mappings.put("sh",makeList("text/x-sh"));  this.mappings.put("pas",makeList("text/x-pascal"));  this.mappings.put("p",makeList("text/x-pascal"));  this.mappings.put("fpm",makeList("text/x-pascal"));  this.mappings.put("st",makeList("text/x-stsrc"));  this.mappings.put("cob",makeList("text/x-cobol"));  this.mappings.put("cbl",makeList("text/x-cobol"));  this.mappings.put("cpy",makeList("text/x-cobol"));  this.mappings.put("f",makeList("text/x-fortran"));  this.mappings.put("for",makeList("text/x-fortran"));  this.mappings.put("f90",makeList("text/x-fortran"));  this.mappings.put("f95",makeList("text/x-fortran"));  this.mappings.put("f03",makeList("text/x-fortran"));  this.mappings.put("vb",makeList("text/x-vb"));  this.mappings.put("vbs",makeList("text/vbscript"));  this.mappings.put("pp",makeList("text/x-puppet"));  this.mappings.put("docker",makeList("text/x-dockerfile-config"));  this.mappings.put("jag",makeList("text/jaggery"));}  }
class C{  public static String requestPath(URL url){  String fileOnly=url.getFile();  if (fileOnly == null) {    return "/";  } else   if (!fileOnly.startsWith("/")) {    return "/" + fileOnly;  } else {    return fileOnly;  }}  }
class C{  protected void newButtonListener(){  try {    AzureManager manager=AzureManagerImpl.getManager();    List<Subscription> subList=manager.getSubscriptionList();    if (subList.size() > 0) {      if (!manager.authenticated()) {        manager.clearImportedPublishSettingsFiles();        WizardCacheManager.clearSubscriptions();        createSubscriptionDialog(true);      }    } else {      createSubscriptionDialog(true);    }    createNewDilaog();  } catch (  Exception ex) {    Activator.getDefault().log(Messages.importErrMsg,ex);  }}  }
class C{  @SuppressWarnings("unchecked") public NamingEnumeration<NameClassPair> list(Name name) throws NamingException {  return (NamingEnumeration)listBindings(name);}  }
class C{  public void refresh(LayerList layerList){  if (layerList == null) {    String message=Logging.getMessage("nullValue.LayersListArrayIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.removeAllLayers();  for (  Layer layer : layerList) {    if (this.mustIncludeLayer(layer)) {      this.addLayer(layer);    }  }}  }
class C{  public Ping ping() throws IOException {  Ping ping=new Ping();  int pingId;synchronized (this) {    if (shutdown) {      throw new IOException("shutdown");    }    pingId=nextPingId;    nextPingId+=2;    if (pings == null)     pings=new HashMap<Integer,Ping>();    pings.put(pingId,ping);  }  writePing(pingId,ping);  return ping;}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.lastModified=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  private void discoverProtectionSets(ProtectionSystem protectionSystem) throws RecoverPointException {  URIQueryResultList list=new URIQueryResultList();  Constraint constraint=ContainmentConstraint.Factory.getProtectionSystemProtectionSetConstraint(protectionSystem.getId());  _dbClient.queryByConstraint(constraint,list);  Iterator<URI> it=list.iterator();  while (it.hasNext()) {    URI protectionSetId=it.next();    discoverProtectionSet(protectionSystem,protectionSetId);  }}  }
class C{  private int[] doUnion(int[] c2){  int[] result=new int[chars.length + c2.length];  int i=0;  int j=0;  int index=0;  while (i < chars.length && j < c2.length) {    int ub;    if (chars[i] < c2[j]) {      result[index++]=chars[i];      ub=chars[++i];    } else {      result[index++]=c2[j];      ub=c2[++j];    }    while (i % 2 == 1 || j % 2 == 1 || (i < chars.length && chars[i] <= ub + 1)) {      while (i < chars.length && chars[i] <= ub + 1) {        ++i;      }      if (i % 2 == 1) {        ub=chars[i];      } else       if (i > 0 && chars[i - 1] > ub) {        ub=chars[i - 1];      }      while (j < c2.length && c2[j] <= ub + 1) {        ++j;      }      if (j % 2 == 1) {        ub=c2[j];      } else       if (j > 0 && c2[j - 1] > ub) {        ub=c2[j - 1];      }    }    result[index++]=ub;  }  if (i < chars.length) {    for (int k=i; k < chars.length; k++) {      result[index++]=chars[k];    }  }  if (j < c2.length) {    for (int k=j; k < c2.length; k++) {      result[index++]=c2[k];    }  }  if (result.length > index) {    int[] tmpbuf=new int[index];    System.arraycopy(result,0,tmpbuf,0,index);    return tmpbuf;  }  return result;}  }
class C{  public synchronized void onAckTimeout(){  ackTimeoutsCnt++;}  }
class C{  protected int estimateNameValuePairLen(final NameValuePair nvp){  if (nvp == null)   return 0;  int result=nvp.getName().length();  final String value=nvp.getValue();  if (value != null) {    result+=3 + value.length();  }  return result;}  }
class C{  private boolean valid(String s){  return !Character.isAlphabetic(s.charAt(0));}  }
class C{  private void indexDocValue(PerField fp,DocValuesType dvType,IndexableField field) throws IOException {  if (fp.fieldInfo.getDocValuesType() == DocValuesType.NONE) {    fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number,fp.fieldInfo.name,dvType);  }  fp.fieldInfo.setDocValuesType(dvType);  int docID=docState.docID;switch (dvType) {case NUMERIC:    if (fp.docValuesWriter == null) {      fp.docValuesWriter=new NumericDocValuesWriter(fp.fieldInfo,bytesUsed);    }  ((NumericDocValuesWriter)fp.docValuesWriter).addValue(docID,field.numericValue().longValue());break;case BINARY:if (fp.docValuesWriter == null) {fp.docValuesWriter=new BinaryDocValuesWriter(fp.fieldInfo,bytesUsed);}((BinaryDocValuesWriter)fp.docValuesWriter).addValue(docID,field.binaryValue());break;case SORTED:if (fp.docValuesWriter == null) {fp.docValuesWriter=new SortedDocValuesWriter(fp.fieldInfo,bytesUsed);}((SortedDocValuesWriter)fp.docValuesWriter).addValue(docID,field.binaryValue());break;case SORTED_NUMERIC:if (fp.docValuesWriter == null) {fp.docValuesWriter=new SortedNumericDocValuesWriter(fp.fieldInfo,bytesUsed);}((SortedNumericDocValuesWriter)fp.docValuesWriter).addValue(docID,field.numericValue().longValue());break;case SORTED_SET:if (fp.docValuesWriter == null) {fp.docValuesWriter=new SortedSetDocValuesWriter(fp.fieldInfo,bytesUsed);}((SortedSetDocValuesWriter)fp.docValuesWriter).addValue(docID,field.binaryValue());break;default :throw new AssertionError("unrecognized DocValues.Type: " + dvType);}}  }
class C{  protected int numShapes(){  return 0;}  }
class C{  public boolean removeEdge(Edge e){  edgeCheck(e,true);  return removeEdge(e.getRow());}  }
class C{  public FloatMatrix copy(FloatMatrix a){  if (!sameSize(a)) {    resize(a.rows,a.columns);  }  System.arraycopy(a.data,0,data,0,length);  return a;}  }
class C{  public static double mod(double a,double b){  int n=(int)(a / b);  a-=n * b;  if (a < 0)   return a + b;  return a;}  }
class C{  public String meanSquaredTipText(){  return "Whether the mean squared error is used rather than mean " + "absolute error when doing cross-validation for regression problems.";}  }
class C{  public void writeString(final byte[] string){  try {    uncompData.write(string);  } catch (  final IOException e) {    LogWriter.writeLog("Exception " + e + " with LZW decoder");  }}  }
class C{  public static Builder disque(String host,int port){  Builder builder=new Builder();  builder.withDisque(host,port);  return builder;}  }
class C{  public Boolean isPublished(){  return ZeroConfService.services().containsKey(key());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean hasPurchase(String sku){  return mPurchaseMap.containsKey(sku);}  }
class C{  public double optDouble(int index){  return this.optDouble(index,Double.NaN);}  }
class C{  public NdefMessage(NdefRecord[] records){  if (records.length < 1) {    throw new IllegalArgumentException("must have at least one record");  }  for (  NdefRecord r : records) {    if (r == null) {      throw new NullPointerException("records cannot contain null");    }  }  mRecords=records;}  }
class C{  public static void close() throws Exception {  boolean mustbeClose=mustbeClose();  Connection jdbcConn=(Connection)m_tJdbc.get();  m_tJdbc.set(null);  m_tMustBeClosed.set(null);  try {    if ((jdbcConn != null) && mustbeClose)     jdbcConn.close();  } catch (  Exception e) {    throw new IeciTdException(DbError.EC_NOT_CLOSED_CONN,DbError.EM_NOT_CLOSED_CONN);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.EXPORTED_VARIABLE_BINDING__DEFINED_VARIABLE:    if (resolve)     return getDefinedVariable();  return basicGetDefinedVariable();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static void launchActivity(Activity context,Class<? extends Activity> activity,boolean closeCurrentActivity,Map<String,String> params){  Intent intent=new Intent(context,activity);  if (params != null) {    Bundle bundle=new Bundle();    for (    Entry<String,String> param : params.entrySet()) {      bundle.putString(param.getKey(),param.getValue());    }    intent.putExtras(bundle);  }  context.startActivity(intent);  if (closeCurrentActivity) {    context.finish();  }}  }
class C{  public double totalMax(){  return memory.getHeapMemoryUsage().getMax() + memory.getNonHeapMemoryUsage().getMax();}  }
class C{  public String toString(){  return "NeighborLogic";}  }
class C{  public boolean isConnected(){  return mConnected;}  }
class C{  final int compareMagnitude(long val){  assert val != Long.MIN_VALUE;  int[] m1=mag;  int len=m1.length;  if (len > 2) {    return 1;  }  if (val < 0) {    val=-val;  }  int highWord=(int)(val >>> 32);  if (highWord == 0) {    if (len < 1)     return -1;    if (len > 1)     return 1;    int a=m1[0];    int b=(int)val;    if (a != b) {      return ((a & LONG_MASK) < (b & LONG_MASK)) ? -1 : 1;    }    return 0;  } else {    if (len < 2)     return -1;    int a=m1[0];    int b=highWord;    if (a != b) {      return ((a & LONG_MASK) < (b & LONG_MASK)) ? -1 : 1;    }    a=m1[1];    b=(int)val;    if (a != b) {      return ((a & LONG_MASK) < (b & LONG_MASK)) ? -1 : 1;    }    return 0;  }}  }
class C{  public Parameter copy(ParameterSet owningParameterSet){  Parameter copy=new Parameter();  copy.setDataContainer(new ParameterData());  copy.setConfigurable(isConfigurable());  copy.setValue(getValue());  copy.setParameterDefinition(this.getParameterDefinition());  copy.setParameterSet(owningParameterSet);  return copy;}  }
class C{  private int nextTlsMode(){  if (nextTlsMode == TLS_MODE_MODERN) {    nextTlsMode=TLS_MODE_COMPATIBLE;    return TLS_MODE_MODERN;  } else   if (nextTlsMode == TLS_MODE_COMPATIBLE) {    nextTlsMode=TLS_MODE_NULL;    return TLS_MODE_COMPATIBLE;  } else {    throw new AssertionError();  }}  }
class C{  public Boolean isPssblDplct(){  return pssblDplct;}  }
class C{  @Override public void visit(Visitor visitor){  visit(visitor,true);}  }
class C{  public SimpleCraftingRecipeItem(final ItemStack item,final boolean ignoreData,final Collection<BiPredicate<Player,ItemStack>> validators){  this.item=item.clone();  this.ignoreData=ignoreData;  this.validators=(validators == null) ? null : new ArrayList<>(validators);  this.replacement=null;  this.replacementFunc=null;}  }
class C{  private void computeUneachableSourceMethods(){  unreachableSourceMethodMap=new TreeMap<String,Map<String,Set<IntRange>>>();  Set<String> srcClassNames=Project.v().getSrcClasses();  for (  String srcClassName : srcClassNames) {    SootClass srcClass=Scene.v().getSootClass(srcClassName);    if (!srcClass.isPhantomClass()) {      for (      SootMethod method : srcClass.getMethods()) {        if (!PTABridge.v().isReachableMethod(method)) {          String methodName=getSourceMethodID(method);          if (methodName != null) {            SourceLocationTag loc=SootUtils.getMethodLocation(method);            if (loc != null) {              String clsName=loc.getClz();              if (Project.v().isSrcClass(clsName)) {                Map<String,Set<IntRange>> methodMap=unreachableSourceMethodMap.get(clsName);                if (methodMap == null) {                  methodMap=new TreeMap<String,Set<IntRange>>();                  unreachableSourceMethodMap.put(clsName,methodMap);                }                IntRange range=SootUtils.getMethodLineRange(method);                if (range != null) {                  Set<IntRange> ranges=methodMap.get(methodName);                  if (ranges == null) {                    ranges=new TreeSet<IntRange>();                    methodMap.put(methodName,ranges);                  }                  ranges.add(range);                }              }            }          }        }      }    }  }}  }
class C{  public JFrame show(){  return show(800,600);}  }
class C{  private void invokeInsn(final int opcode,final Type type,final Method method){  String owner=type.getSort() == Type.ARRAY ? type.getDescriptor() : type.getInternalName();  mv.visitMethodInsn(opcode,owner,method.getName(),method.getDescriptor());}  }
class C{  public void printLastSeenInfo(String messageID){  if (m_verbose) {    logger.info(messageID + "\t" + m_deltasInSeconds.toString());  }}  }
class C{  public MutableShort(final String value) throws NumberFormatException {  super();  this.value=Short.parseShort(value);}  }
class C{  StoppableCondition(Condition c,CancelCriterion stopper){  Assert.assertTrue(stopper != null);  this.condition=c;  this.stopper=stopper;}  }
class C{  private String createMethodSignature(OperationModel ope){  StringBuffer sb=new StringBuffer();  sb.append("    ");  String visibility=ope.getVisibility().toString();  if (!visibility.equals("package")) {    sb.append(ope.getVisibility().toString());    sb.append(" ");  }  if (ope.isStatic()) {    sb.append("static ");  }  if (ope.isAbstract()) {    sb.append("abstract ");  }  if (ope.getType().length() != 0 && !ope.isConstructor()) {    sb.append(ope.getType());    sb.append(" ");  }  sb.append(ope.getName());  sb.append("(");  List<Argument> params=ope.getParams();  for (int i=0; i < params.size(); i++) {    if (i != 0) {      sb.append(", ");    }    Argument arg=params.get(i);    sb.append(arg.getType());    sb.append(" ");    sb.append(arg.getName());  }  sb.append(")");  return sb.toString();}  }
class C{  protected final void flushWriter() throws org.xml.sax.SAXException {  final java.io.Writer writer=m_writer;  if (null != writer) {    try {      if (writer instanceof WriterToUTF8Buffered) {        if (m_shouldFlush)         ((WriterToUTF8Buffered)writer).flush(); else         ((WriterToUTF8Buffered)writer).flushBuffer();      }      if (writer instanceof WriterToASCI) {        if (m_shouldFlush)         writer.flush();      } else {        writer.flush();      }    } catch (    IOException ioe) {      throw new org.xml.sax.SAXException(ioe);    }  }}  }
class C{  public void clear(){  for (  VerletSpring2D s : links) {    physics.removeSpringElements(s);  }  particles.clear();  links.clear();}  }
class C{  protected void invalidateGeometryCache(){  super.invalidateGeometryCache();  primitiveBounds=null;  geometryBounds=null;  outline=null;}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public final Entry<K,V> pollFirstEntry(){  throw new UnsupportedOperationException();}  }
class C{  protected void illegalMessageReceived(OFMessage m){  String msg=getSwitchStateMessage(m,"Switch should never send this message in the current state");  throw new SwitchStateException(msg);}  }
class C{  private void init(){  this.setLayout(new BorderLayout());  Box boxV=Box.createVerticalBox();  Box boxH=Box.createHorizontalBox();  Box boxV1=Box.createVerticalBox();  Box boxV2=Box.createVerticalBox();  Box boxH1=Box.createHorizontalBox();  boxV2.setPreferredSize(new Dimension(120,120));  for (int i=0; i < m_goals.length; i++) {    PerformanceIndicator pi=new PerformanceIndicator(m_goals[i]);    pi.addActionListener(this);    boxV1.add(pi,BorderLayout.NORTH);  }  boxV1.add(Box.createVerticalGlue(),BorderLayout.CENTER);  JScrollPane scrollPane=new JScrollPane();  scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);  scrollPane.getViewport().add(boxV1,BorderLayout.CENTER);  scrollPane.setMinimumSize(new Dimension(190,180));  HtmlDashboard contentHtml=new HtmlDashboard("http:///local/home",m_goals,true);  boxV2.add(contentHtml,BorderLayout.CENTER);  for (int i=0; i < java.lang.Math.min(2,m_goals.length); i++) {    if (m_goals[i].getMeasure() != null)     boxH1.add(new Graph(m_goals[i]),BorderLayout.SOUTH);  }  boxV2.add(boxH1,BorderLayout.SOUTH);  boxH.add(scrollPane,BorderLayout.WEST);  boxH.add(Box.createHorizontalStrut(5));  boxH.add(boxV2,BorderLayout.CENTER);  HtmlDashboard t=new HtmlDashboard("http:///local/logo",null,false);  t.setMaximumSize(new Dimension(2000,80));  boxV.add(t,BorderLayout.NORTH);  boxV.add(Box.createVerticalStrut(5));  boxV.add(boxH,BorderLayout.CENTER);  boxV.add(Box.createVerticalGlue());  add(boxV,BorderLayout.CENTER);}  }
class C{  public static boolean isResponseType(char type){  return (isSuccessResponseType(type) || isErrorResponseType(type));}  }
class C{  public void maybeLookAhead(){  lock.lock();  try {    List<DeterministicKey> keys=maybeLookAhead(externalParentKey,issuedExternalKeys);    keys.addAll(maybeLookAhead(internalParentKey,issuedInternalKeys));    if (keys.isEmpty())     return;    keyLookaheadEpoch++;    basicKeyChain.importKeys(keys);  }  finally {    lock.unlock();  }}  }
class C{  public void engineDeleteEntry(String alias) throws KeyStoreException {  Key k=(Key)keys.remove(alias);  Certificate c=(Certificate)certs.remove(alias);  if (c != null) {    chainCerts.remove(new CertId(c.getPublicKey()));  }  if (k != null) {    String id=(String)localIds.remove(alias);    if (id != null) {      c=(Certificate)keyCerts.remove(id);    }    if (c != null) {      chainCerts.remove(new CertId(c.getPublicKey()));    }  }}  }
class C{  public <B>Set<B> ap(Set<Function<A,B>> functions){  Set<B> result=empty();  for (  Function<A,B> fn : functions) {    result=result.plus(map(fn));  }  return result;}  }
class C{  public static boolean isIndicesOptions(String name){  return "expand_wildcards".equals(name) || "expandWildcards".equals(name) || "ignore_unavailable".equals(name)|| "ignoreUnavailable".equals(name)|| "allow_no_indices".equals(name)|| "allowNoIndices".equals(name);}  }
class C{  public DTMIterator createDTMIterator(int node){  DTMIterator iter=new org.apache.xpath.axes.OneStepIteratorForward(Axis.SELF);  iter.setRoot(node,this);  return iter;}  }
class C{  public int size(){  return bits.length << 6;}  }
class C{  public static SequencesReader createSequencesReader(final SequenceDataSource source) throws IOException {  final List<byte[]> data=new ArrayList<>();  final List<String> labels=new ArrayList<>();  final List<Long> counts=new ArrayList<>();  int min=Integer.MAX_VALUE;  int max=Integer.MIN_VALUE;  while (source.nextSequence()) {    final byte[] b=new byte[source.currentLength()];    System.arraycopy(source.sequenceData(),0,b,0,source.currentLength());    data.add(b);    labels.add(source.name());    counts.add((long)source.currentLength());    min=Math.min(min,source.currentLength());    max=Math.max(max,source.currentLength());  }  final byte[][] dataArray=data.toArray(new byte[data.size()][]);  final String[] labelsArray=labels.toArray(new String[labels.size()]);  return new CompressedMemorySequencesReader(dataArray,labelsArray,ArrayUtils.asLongArray(counts),min,max,source.type());}  }
class C{  public BaseCollectionRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options,final Class<T1> responseClass,final Class<T2> collectionPageClass){  mResponseClass=responseClass;  mCollectionPageClass=collectionPageClass;  mBaseRequest=new BaseRequest(requestUrl,client,options,mResponseClass){  };  mBaseRequest.setHttpMethod(HttpMethod.GET);}  }
class C{  @RequestMapping(value="/topics",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) public ResponseEntity<Topic> updateTopic(@Valid @RequestBody Topic topic) throws URISyntaxException {  log.debug("REST request to update Topic : {}",topic);  if (topic.getId() == null) {    return createTopic(topic);  }  Topic result=topicsService.updateTopic(topic);  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert("topic",topic.getId().toString())).body(result);}  }
class C{  public void service(Mail mail) throws MessagingException {  MimeMessage message=mail.getMessage();  Collection<MailAddress> recipients=mail.getRecipients();  recipients.clear();  recipients.addAll(getHeaderMailAddresses(message,"Mail-For"));  if (recipients.isEmpty()) {    recipients.addAll(getHeaderMailAddresses(message,"To"));    recipients.addAll(getHeaderMailAddresses(message,"Cc"));  }  if (isDebug) {    log("All recipients = " + recipients.toString());    log("Reprocessing mail using recipients in message headers");  }  getMailetContext().sendMail(mail.getSender(),mail.getRecipients(),mail.getMessage());  mail.setState(Mail.GHOST);}  }
class C{  long offer(int part,long addr,int hash) throws GridOffHeapOutOfMemoryException {  lock.lock();  try {    long qAddr=mem.allocateSystem(NODE,false);    if (head == 0)     head=qAddr;    long prev=tail;    tail=qAddr;    if (prev != 0)     next(prev,qAddr);    order(qAddr);    partition(qAddr,part);    polling(qAddr,false);    hash(qAddr,hash);    entry(qAddr,addr);    previous(qAddr,prev);    next(qAddr,0L);    size++;    return qAddr;  }  finally {    lock.unlock();  }}  }
class C{  public static Stats of(int... values){  StatsAccumulator acummulator=new StatsAccumulator();  acummulator.addAll(values);  return acummulator.snapshot();}  }
class C{  private boolean createUiMember(Integer intId){  logger.info("calling createViewMember {}:{}) ",intId.toString(),String.format("%08x",intId));  UISootObject obj=mUiObjectTable.get(intId);  if (obj == null || obj.type == null) {    logger.warn("Object for id {} info is not available",String.format("%08x",intId));    return false;  }  String idName=makeIdName(obj.type,obj.numericId);  String className=makeClassName(obj.type);  if (className == null) {    logger.warn("Cannot resolve class {} ",obj.type);    return false;  }  RefType classType=RefType.v(className);  RefType fragmentType=RefType.v("android.app.Fragment");  RefType supportFragmentType=RefType.v("android.support.v4.app.Fragment");  if (SootUtils.isSubTypeOfIncluding(classType,fragmentType) || SootUtils.isSubTypeOfIncluding(classType,supportFragmentType)) {    obj.childOf=UiType.FRAGMENT;    logger.info("soot class {} is a Fragment ",classType);  }  RefType viewType=RefType.v("android.view.View");  if (SootUtils.isSubTypeOfIncluding(classType,viewType)) {    obj.childOf=UiType.VIEW;    logger.info("soot class {} is a view ",classType);  }  SootField sf=new SootField(idName,classType,Modifier.PUBLIC | Modifier.STATIC);  mSootClass.addField(sf);  obj.sootField=sf;  return true;}  }
class C{  int estimateExecutionTime(Instruction instr){  if (instr.operator() == NULL_CHECK) {    return 0;  } else {    return 1;  }}  }
class C{  public S2CellId cellId(int i){  return cellIds.get(i);}  }
class C{  protected StereoTypeTargetImpl(){  super();}  }
class C{  public ItemRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  @SuppressWarnings("WeakerAccess") public void updateRealmResults(RealmResults<T> queryResults){  if (changeListener != null && realmResults != null)   realmResults.removeChangeListener(changeListener);  realmResults=queryResults;  if (realmResults != null && changeListener != null)   realmResults.addChangeListener(changeListener);  selectedPositions.clear();  lastSelectedPos=-1;  ids=getIdsOfRealmResults();  notifyDataSetChanged();}  }
class C{  public void paintSliderTrackBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static <Req,Resp>List<Future<Resp>> executePartitioned(List<Req> requests,int parallelism,Function<List<Req>,Future<Resp>> executeBatch){  MorePreconditions.checkNotBlank(requests);  Preconditions.checkArgument(parallelism > 0);  Preconditions.checkNotNull(executeBatch);  int sizePerPartition=Math.max(requests.size() / parallelism,1);  List<List<Req>> partitions=Lists.partition(requests,sizePerPartition);  List<Future<Resp>> futures=Lists.newArrayListWithCapacity(partitions.size());  for (  final List<Req> request : partitions) {    futures.add(executeBatch.apply(request));  }  return futures;}  }
class C{  public void load(String df){  pause();  descriptionfile=df;  reset();}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public SectionContainerBackend(final SQLProvider provider,final INaviModule module){  this.provider=Preconditions.checkNotNull(provider,"Error: provider argument can not be null");  this.module=Preconditions.checkNotNull(module,"Error: module argument can not be null");}  }
class C{  protected TypeRefAnnotationArgumentImpl(){  super();}  }
class C{  public ExecutableImage loadModule(File moduleFile) throws IOException, BinaryParseException {  ExecutableImage module=null;  try {    module=new PEModule(moduleFile,getArchitecture());    targetOS=TargetOS.WINDOWS;  } catch (  BinaryParseException e) {    try {      module=new ObjectFile(moduleFile,getArchitecture());    } catch (    BinaryParseException e2) {      try {        module=new ELFModule(moduleFile,getArchitecture());        targetOS=TargetOS.LINUX;      } catch (      BinaryParseException e3) {        module=new RawModule(moduleFile,getArchitecture());      }    }  }  for (  ExecutableImage existingModule : modules) {    if (existingModule.getMaxAddress().getValue() >= module.getMinAddress().getValue() && existingModule.getMinAddress().getValue() <= module.getMaxAddress().getValue()) {      throw new RuntimeException("Virtual addresses of modules overlap!");    }  }  modules.add(module);  unresolvedSymbols.addAll(module.getUnresolvedSymbols());  for (  ExportedSymbol symbol : module.getExportedSymbols()) {    exportedSymbols.put(removeDecoration(symbol.getName()),symbol);  }  resolveSymbols();  return module;}  }
class C{  public FileMonitoredVm(VmIdentifier vmid,int interval) throws MonitorException {  super(vmid,interval);  this.pdb=new PerfDataBuffer(vmid);}  }
class C{  public boolean specifiesMirroring(){  return (continuousCopies != null && continuousCopies.getMaxMirrors() != null && continuousCopies.getMaxMirrors() != VirtualPoolProtectionMirrorParam.MAX_DISABLED);}  }
class C{  @Override public final void perform(IR ir){  if (!ir.method.isInterruptible()) {    return;  }  prependYield(ir.cfg.entry(),YIELDPOINT_PROLOGUE,0,ir.getGc().getInlineSequence());  if (VM.UseEpilogueYieldPoints) {    for (Enumeration<BasicBlock> e=ir.getBasicBlocks(); e.hasMoreElements(); ) {      BasicBlock block=e.nextElement();      if (block.hasReturn() || block.hasAthrowInst()) {        prependYield(block,YIELDPOINT_EPILOGUE,INSTRUMENTATION_BCI,ir.getGc().getInlineSequence());      }    }  }  LSTGraph lst=ir.HIRInfo.loopStructureTree;  if (lst != null) {    for (java.util.Enumeration<LSTNode> e=lst.getRoot().getChildren(); e.hasMoreElements(); ) {      processLoopNest(e.nextElement());    }  }}  }
class C{  public static String loadAndFormatUsername(final String username){  return loadAndFormatUsername(username,100);}  }
class C{  public void testAskGetJSON() throws IOException {  this.setAccept(BigdataRDFServlet.MIME_SPARQL_RESULTS_JSON);  final String response=serviceRequest("query",AbstractProtocolTest.ASK);  assertTrue("Bad response: " + response,response.contains("boolean"));  assertEquals(BigdataRDFServlet.MIME_SPARQL_RESULTS_JSON,getResponseContentType());}  }
class C{  public void checkLanguageCodeNotNull(String languageCode) throws PropertiesImportException {  if (languageCode == null || languageCode.trim().length() == 0) {    PropertiesImportException propertiesImportException=new PropertiesImportException(PropertiesImportException.Reason.NONE_LANGUAGE_CODE);    logger.logWarn(Log4jLogger.SYSTEM_LOG,propertiesImportException,LogMessageIdentifier.WARN_NO_LANGUAGE_CODE_FOR_IMPORT_PROPERTIES);    throw propertiesImportException;  }}  }
class C{  @NoInline @Entrypoint static void raiseArrayIndexOutOfBoundsException(int index){  throw new java.lang.ArrayIndexOutOfBoundsException(index);}  }
class C{  public JFileChooser(FileSystemView fsv){  this((File)null,fsv);}  }
class C{  @GET @Path("/initChat") @Produces(MediaType.APPLICATION_JSON) public Response startConversation(@QueryParam("firstTimeUser") boolean firstTimeUser){  Conversation conversation=dialogService.createConversation(dialog_id);  if (!firstTimeUser) {    Map<String,String> profile=new HashMap<>();    profile.put("First_Time","No");    dialogService.updateProfile(dialog_id,conversation.getClientId(),profile);  }  WDSConversationPayload conversationPayload=new WDSConversationPayload();  conversationPayload.setClientId(Integer.toString(conversation.getClientId()));  conversationPayload.setConversationId(Integer.toString(conversation.getId()));  conversationPayload.setInput(conversation.getInput());  conversationPayload.setWdsResponse(StringUtils.join(conversation.getResponse()," "));  return Response.ok(conversationPayload,MediaType.APPLICATION_JSON_TYPE).build();}  }
class C{  public byte[] reset(byte[] data){  byte[] bytes=null;  if ((data[1] & 0xFF) < 128) {    bytes=new byte[data[1] + 2];    System.arraycopy(data,0,bytes,0,data[1] + 2);  } else {    if ((data[1] & 0xFF) > 128) {      int len=data[1] & (byte)0x7F;      int result=0;      for (int i=0; i < len; i++) {        result|=(data[i + 2] & 0xFF) << (8 * (len - i - 1));      }      bytes=new byte[result + len + 2];      System.arraycopy(data,0,bytes,0,result + len + 2);    }  }  return bytes;}  }
class C{  private boolean addCall(TestChromosome test,int statement){  logger.debug("Adding call");  TestFactory factory=TestFactory.getInstance();  Statement theStatement=test.getTestCase().getStatement(statement);  VariableReference var=theStatement.getReturnValue();  int oldLength=test.size();  factory.insertRandomCallOnObjectAt(test.getTestCase(),var,statement + 1);  test.setChanged(test.size() != oldLength);  return false;}  }
class C{  public static Builder createBuilder(Header header,WritableFontData data){  return new Builder(header,data);}  }
class C{  @Override protected void loadPaths(ArrayList<PathImpl> pathSet){  _fileSet.getPaths(pathSet);}  }
class C{  public void resetChanges(){  changes.clear();  changesCalculated=false;  for (int i=0; i < 5; i++) {    updateItem(i);  }}  }
class C{  public int size(){  return callbacks.size();}  }
class C{  private void refreshControls(){  final Area selectedArea=configuration.getArea();  final Button[] buttons=new Button[]{fileButton,projectButton,workspaceButton};  for (int i=0; i < buttons.length; i++) {    if (((Area)buttons[i].getData()) == selectedArea) {      buttons[i].setSelection(true);    } else {      buttons[i].setSelection(false);    }  }}  }
class C{  public void addMarker(IFile file){  if (level == DBPlugin.LEVEL_ERROR) {    addMarker(file,IMarker.SEVERITY_ERROR,message);  } else {    addMarker(file,IMarker.SEVERITY_WARNING,message);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.MULTIPLICATIVE_EXPRESSION__LHS:    return lhs != null;case N4JSPackage.MULTIPLICATIVE_EXPRESSION__OP:  return op != OP_EDEFAULT;case N4JSPackage.MULTIPLICATIVE_EXPRESSION__RHS:return rhs != null;}return super.eIsSet(featureID);}  }
class C{  @Override public synchronized void close() throws SQLException {  try {    debugCodeCall("close");    if (session == null) {      return;    }    session.cancel();    if (executingStatement != null) {      try {        executingStatement.cancel();      } catch (      NullPointerException e) {      }    }synchronized (session) {      try {        if (!session.isClosed()) {          try {            if (session.hasPendingTransaction()) {              if (!session.isReconnectNeeded(true)) {                try {                  rollbackInternal();                } catch (                DbException e) {                  if (e.getErrorCode() != ErrorCode.CONNECTION_BROKEN_1) {                    throw e;                  }                }              }            }            closePreparedCommands();          }  finally {            session.close();          }        }      }  finally {        session=null;      }    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void stopWaiting(){  m_finished=true;  removeListeners();  finish();}  }
class C{  public int read(int num) throws IOException {  byte[] bytes=new byte[num];  if (read(bytes,0,num) != num) {    throw new IOException("Premature end of stream reached");  }  int result=0;  for (int i=0; i < num; i++) {    if (bigEndian) {      result|=(bytes[i] & 0xff) << (num - i - 1) * 8;    } else {      result|=(bytes[i] & 0xff) << i * 8;    }  }  return result;}  }
class C{  private Methods(){}  }
class C{  TextSegment(char[] buffer,int length){  super(buffer,length);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.232 -0400",hash_original_method="0B73E6030E0DCCE4A59142FE847725E7",hash_generated_method="997E22269BD848FB3E4B34F9D6C89E9C") public static void copy(InputStream input,Writer output) throws IOException {  InputStreamReader in=new InputStreamReader(input);  copy(in,output);}  }
class C{  private boolean writeMacroMemory(int macroNum,byte[] b){  if (isUsb) {    setUsbCabMemoryPointer(CabMemoryUsb.CAB_NUM_MACRO,(macroNum * macroSize));    if (!waitNce()) {      return false;    }    for (int i=0; i < macroSize; i++) {      writeUsbMemory1(b[i]);      if (!waitNce()) {        return false;      }    }  } else {    int nceMacroAddr=(macroNum * macroSize) + memBase;    byte[] buf=new byte[macroSize];    int i=0;    for (; i < 16; i++) {      buf[i]=b[i];    }    writeSerialMemoryN(nceMacroAddr,buf,16);    if (!waitNce()) {      return false;    }    for (; i < macroSize; i++) {      buf[i]=b[i];    }    writeSerialMemory4(nceMacroAddr + 16,buf);    if (!waitNce()) {      return false;    }  }  return true;}  }
class C{  public JspProperty findJspProperty(String uri) throws JasperException {  init();  if (jspProperties == null || uri.endsWith(".tag") || uri.endsWith(".tagx")) {    return defaultJspProperty;  }  String uriPath=null;  int index=uri.lastIndexOf('/');  if (index >= 0) {    uriPath=uri.substring(0,index + 1);  }  String uriExtension=null;  index=uri.lastIndexOf('.');  if (index >= 0) {    uriExtension=uri.substring(index + 1);  }  ArrayList<String> includePreludes=new ArrayList<String>();  ArrayList<String> includeCodas=new ArrayList<String>();  JspPropertyGroup isXmlMatch=null;  JspPropertyGroup elIgnoredMatch=null;  JspPropertyGroup scriptingInvalidMatch=null;  JspPropertyGroup trimSpacesMatch=null;  JspPropertyGroup poundAllowedMatch=null;  JspPropertyGroup pageEncodingMatch=null;  JspPropertyGroup defaultContentTypeMatch=null;  JspPropertyGroup bufferMatch=null;  JspPropertyGroup errorOnUndeclaredNamespaceMatch=null;  for (  JspPropertyGroup jpg : jspProperties) {    JspProperty jp=jpg.getJspProperty();    String extension=jpg.getExtension();    String path=jpg.getPath();    if (extension == null) {      if (!uri.equals(path)) {        continue;      }    } else {      if (path != null && uriPath != null && !uriPath.startsWith(path)) {        continue;      }      if (!extension.equals("*") && !extension.equals(uriExtension)) {        continue;      }    }    if (jp.getIncludePrelude() != null) {      includePreludes.addAll(jp.getIncludePrelude());    }    if (jp.getIncludeCoda() != null) {      includeCodas.addAll(jp.getIncludeCoda());    }    if (jp.isXml() != null) {      isXmlMatch=selectProperty(isXmlMatch,jpg);    }    if (jp.isELIgnored() != null) {      elIgnoredMatch=selectProperty(elIgnoredMatch,jpg);    }    if (jp.isScriptingInvalid() != null) {      scriptingInvalidMatch=selectProperty(scriptingInvalidMatch,jpg);    }    if (jp.getPageEncoding() != null) {      pageEncodingMatch=selectProperty(pageEncodingMatch,jpg);    }    if (jp.getTrimSpaces() != null) {      trimSpacesMatch=selectProperty(trimSpacesMatch,jpg);    }    if (jp.getPoundAllowed() != null) {      poundAllowedMatch=selectProperty(poundAllowedMatch,jpg);    }    if (jp.getDefaultContentType() != null) {      defaultContentTypeMatch=selectProperty(defaultContentTypeMatch,jpg);    }    if (jp.getBuffer() != null) {      bufferMatch=selectProperty(bufferMatch,jpg);    }    if (jp.errorOnUndeclaredNamespace() != null) {      errorOnUndeclaredNamespaceMatch=selectProperty(errorOnUndeclaredNamespaceMatch,jpg);    }  }  String isXml=defaultIsXml;  String isELIgnored=defaultIsELIgnored;  String isScriptingInvalid=defaultIsScriptingInvalid;  String trimSpaces=defaultTrimSpaces;  String poundAllowed=defaultPoundAllowed;  String pageEncoding=null;  String defaultContentType=null;  String buffer=null;  String errorOnUndeclaredNamespace=defaultErrorOnUndeclaredNamespace;  if (isXmlMatch != null) {    isXml=isXmlMatch.getJspProperty().isXml();  }  if (elIgnoredMatch != null) {    isELIgnored=elIgnoredMatch.getJspProperty().isELIgnored();  }  if (scriptingInvalidMatch != null) {    isScriptingInvalid=scriptingInvalidMatch.getJspProperty().isScriptingInvalid();  }  if (trimSpacesMatch != null) {    trimSpaces=trimSpacesMatch.getJspProperty().getTrimSpaces();  }  if (poundAllowedMatch != null) {    poundAllowed=poundAllowedMatch.getJspProperty().getPoundAllowed();  }  if (pageEncodingMatch != null) {    pageEncoding=pageEncodingMatch.getJspProperty().getPageEncoding();  }  if (defaultContentTypeMatch != null) {    defaultContentType=defaultContentTypeMatch.getJspProperty().getDefaultContentType();  }  if (bufferMatch != null) {    buffer=bufferMatch.getJspProperty().getBuffer();  }  if (errorOnUndeclaredNamespaceMatch != null) {    errorOnUndeclaredNamespace=errorOnUndeclaredNamespaceMatch.getJspProperty().errorOnUndeclaredNamespace();  }  return new JspProperty(isXml,isELIgnored,isScriptingInvalid,trimSpaces,poundAllowed,pageEncoding,includePreludes,includeCodas,defaultContentType,buffer,errorOnUndeclaredNamespace);}  }
class C{  public static void fill(int[] array,int value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public Picture(Picture picture){  width=picture.width();  height=picture.height();  image=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);  filename=picture.filename;  for (int col=0; col < width(); col++)   for (int row=0; row < height(); row++)   image.setRGB(col,row,picture.get(col,row).getRGB());}  }
class C{  public void removeLastInput(){  BinderAnchor arg=arguments.remove(arguments.size() - 1);  arg.removeConnections();  argSpace.getChildren().remove(arg);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  protected final void fireColumnEvent(int idx,long prev){  Object[] lstnrs=m_listeners.getArray();  for (int i=0; i < lstnrs.length; ++i)   ((ColumnListener)lstnrs[i]).columnChanged(this,idx,prev);}  }
class C{  public static Builder builder(UnregisterResponse response){  return new Builder(response);}  }
class C{  public void preInit(){  int count=4;  m_columnName=new String[count];  m_label=new CLabel[count];  m_from=new VLookup[count];  m_to=new VLookup[count];  preInit(0,2163,DisplayType.TableDir,AD_ORG_ID);  preInit(1,2762,DisplayType.Search,C_BPARTNER_ID);  preInit(2,971,DisplayType.Search,AD_USER_ID);  preInit(3,2221,DisplayType.Search,M_PRODUCT_ID);}  }
class C{  public CAddRootTagNodeAction(final JFrame parent,final ITagManager tagManager,final ITreeNode<CTag> parentTag){  super("Create Root Tag");  m_parent=Preconditions.checkNotNull(parent,"IE01780: Parent argument can not be null.");  m_tagManager=Preconditions.checkNotNull(tagManager,"IE02309: Tag manager arguemnt can not be null");  m_parentTag=Preconditions.checkNotNull(parentTag,"IE02310: Parent tag arguemnt can not be null");}  }
class C{  public ObjectFactory(){}  }
class C{  HandlerBlockLE(int loc,InlineSequence position,TypeOperand eType,GenericRegisterPool temps,int exprStackSize,ControlFlowGraph cfg){  super(loc);  entryBlock=new ExceptionHandlerBasicBlock(SYNTH_CATCH_BCI,position,eType,cfg);  block=new BasicBlock(loc,position,cfg);  exceptionObject=temps.makeTemp(TypeReference.JavaLangThrowable);  BC2IR.setGuardForRegOp(exceptionObject,new TrueGuardOperand());  high=loc;  stackState=new OperandStack(exprStackSize);  stackState.push(exceptionObject);  setStackKnown();  Instruction s=Nullary.create(GET_CAUGHT_EXCEPTION,exceptionObject.copyD2D());  entryBlock.appendInstruction(s);  s.setBytecodeIndex(SYNTH_CATCH_BCI);  entryBlock.insertOut(block);}  }
class C{  protected final void appendLong(final BigInteger number){  for (int i=7; i >= 0; --i) {    byteData.add(Byte.valueOf((byte)(number.shiftRight(8 * i).and(BigInteger.valueOf(0xFF)).longValue())));  }}  }
class C{  public EventType(int eventCode){  this();  this.eventCode=eventCode;}  }
class C{  public boolean hasNumAbPageVariations(){  return hasExtension(GwoNumAbPageVariations.class);}  }
class C{  public static org.smpte_ra.schemas.st2067_2_2016.CompositionPlaylistType constructCompositionPlaylistType_2016(){  org.smpte_ra.schemas.st2067_2_2016.CompositionPlaylistType cplType_2016=new org.smpte_ra.schemas.st2067_2_2016.CompositionPlaylistType();  IMFDocumentsObjectFieldsFactory.constructObjectFields(cplType_2016);  return cplType_2016;}  }
class C{  public static ParallelCorpus loadCorpusFromFiles(String sourceFile,String targetFile,String alignmentFile,int expectedSize) throws IOException {  try (LineNumberReader srcReader=IOTools.getReaderFromFile(sourceFile);LineNumberReader tgtReader=IOTools.getReaderFromFile(targetFile);LineNumberReader algnReader=IOTools.getReaderFromFile(alignmentFile)){    ParallelCorpus corpus=new ParallelCorpus(expectedSize);    for (String srcLine; (srcLine=srcReader.readLine()) != null; ) {      if (srcReader.getLineNumber() % 10000 == 0)       logger.info("Reading corpus line {}...",srcReader.getLineNumber());      String tgtLine=tgtReader.readLine();      String algnLine=algnReader.readLine();      corpus.add(srcLine,tgtLine,algnLine);    }    return corpus;  } }  }
class C{  public ServiceRef basicGetServiceRef(){  return serviceRef;}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public ImmutableList<V> replaceValues(K key,Iterable<? extends V> values){  throw new UnsupportedOperationException();}  }
class C{  @Override public boolean onContextItemSelected(MenuItem item){switch (item.getItemId()) {case CONTEXT_CLOSE_ID:    closeMessage();  break;case CONTEXT_DELETE_ID:showDialog(DIALOG_DELETE);break;case CONTEXT_REPLY_ID:replyToMessage();break;case CONTEXT_QUICKREPLY_ID:quickReply();break;case CONTEXT_INBOX_ID:gotoInbox();break;case CONTEXT_TTS_ID:speakMessage();break;case CONTEXT_VIEWCONTACT_ID:viewContact();break;}return super.onContextItemSelected(item);}  }
class C{  private byte[] genBytes(int size){  byte[] arr=new byte[size];  RAND.nextBytes(arr);  return arr;}  }
class C{  private void cbr(TreeModel tree,NodeRef node,double rate){  NodeRef childNode0=tree.getChild(node,0);  NodeRef childNode1=tree.getChild(node,1);  int nodeNumber0=childNode0.getNumber();  int nodeNumber1=childNode1.getNumber();  double nodeIndicator=indicators.getNodeValue(tree,node);  if (indicators.getNodeValue(tree,node) != 0) {  }  if (nodeIndicator < 0) {    branchRates[nodeNumber0]=rate + getVariable(tree,childNode0);    branchRates[nodeNumber1]=rate;    if (driftRates != null) {      driftRates.setParameterValue(nodeNumber0,rate + getVariable(tree,childNode0));      driftRates.setParameterValue(nodeNumber1,rate);    }  } else   if (nodeIndicator > 0) {    branchRates[nodeNumber0]=rate;    branchRates[nodeNumber1]=rate + getVariable(tree,childNode1);    if (driftRates != null) {      driftRates.setParameterValue(nodeNumber0,rate);      driftRates.setParameterValue(nodeNumber1,rate + getVariable(tree,childNode1));    }  } else {    branchRates[nodeNumber0]=rate;    branchRates[nodeNumber1]=rate;    if (driftRates != null) {      driftRates.setParameterValue(nodeNumber0,rate);      driftRates.setParameterValue(nodeNumber1,rate);    }  }  if (tree.getChildCount(childNode0) > 0) {    cbr(tree,childNode0,branchRates[nodeNumber0]);  }  if (tree.getChildCount(childNode1) > 0) {    cbr(tree,childNode1,branchRates[nodeNumber1]);  }}  }
class C{  public SVGSVGElementViewport(float w,float h){  this.width=w;  this.height=h;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) @Path("/{id}/discover") public TaskResourceRep discoverProtectionSystem(@PathParam("id") URI id,@QueryParam("namespace") String namespace){  ProtectionSystem protectionSystem=_dbClient.queryObject(ProtectionSystem.class,id);  ArgValidator.checkEntity(protectionSystem,id,isIdEmbeddedInURL(id),true);  if (namespace == null || namespace.trim().length() < 1) {    namespace=Discovery_Namespaces.ALL.toString();  }  if (!validateNameSpace(namespace)) {    throw APIException.badRequests.invalidParameterProtectionSystemNamespace(namespace);  }  String deviceType=protectionSystem.getSystemType();  ProtectionController controller=getController(RPController.class,deviceType);  DiscoveredObjectTaskScheduler scheduler=new DiscoveredObjectTaskScheduler(_dbClient,new DiscoverJobExec(controller));  ArrayList<AsyncTask> tasks=new ArrayList<AsyncTask>(1);  String taskId=UUID.randomUUID().toString();  tasks.add(new AsyncTask(ProtectionSystem.class,protectionSystem.getId(),taskId,namespace));  TaskList taskList=scheduler.scheduleAsyncTasks(tasks);  return taskList.getTaskList().listIterator().next();}  }
class C{  public static String encodeMac(final String secret,final String message,final String algorithm) throws HmacException {  String digest;  try {    SecretKeySpec key=new SecretKeySpec(secret.getBytes("UTF-8"),algorithm);    Mac mac=Mac.getInstance(algorithm);    mac.init(key);    byte[] bytes=mac.doFinal(message.getBytes("UTF-8"));    StringBuilder hash=new StringBuilder();    for (    byte b : bytes) {      String hex=Integer.toHexString(0xFF & b);      if (hex.length() == 1) {        hash.append('0');      }      hash.append(hex);    }    digest=hash.toString();  } catch (  Exception ex) {    throw new HmacException("Error while encoding request with hmac",ex);  }  return digest;}  }
class C{  public static Builder builder(ConnectResponse response){  return new Builder(response);}  }
class C{  public static void serialize(OutputStream outStream,Object o,SerializationMode mode){  try {    if (mode == SerializationMode.BIN || mode == SerializationMode.BIN_GZ) {      Kryo kryo=new Kryo();      kryo.setReferences(false);      Output output=mode == SerializationMode.BIN_GZ ? new Output(new GZIPOutputStream(outStream)) : new Output(outStream);      kryo.writeObject(output,o);      output.close();    } else {      logger.warn("Unsupported serialization mode: {} file: {}",mode);    }  } catch (  KryoException|IOException e) {    logger.error("Serialization exception",e);    throw new RuntimeException(e);  }}  }
class C{  public String toWireDump(Transaction t) throws IOException {  WireFormat.ArrayWriter writer=new WireFormat.ArrayWriter();  toWire(t,writer);  return ByteUtils.toHex(writer.toByteArray());}  }
class C{  private static String js_join(Context cx,Scriptable thisObj,Object[] args){  long llength=getLengthProperty(cx,thisObj);  int length=(int)llength;  if (llength != length) {    throw Context.reportRuntimeError1("msg.arraylength.too.big",String.valueOf(llength));  }  String separator=(args.length < 1 || args[0] == Undefined.instance) ? "," : ScriptRuntime.toString(args[0]);  if (thisObj instanceof NativeArray) {    NativeArray na=(NativeArray)thisObj;    if (na.denseOnly) {      StringBuilder sb=new StringBuilder();      for (int i=0; i < length; i++) {        if (i != 0) {          sb.append(separator);        }        if (i < na.dense.length) {          Object temp=na.dense[i];          if (temp != null && temp != Undefined.instance && temp != Scriptable.NOT_FOUND) {            sb.append(ScriptRuntime.toString(temp));          }        }      }      return sb.toString();    }  }  if (length == 0) {    return "";  }  String[] buf=new String[length];  int total_size=0;  for (int i=0; i != length; i++) {    Object temp=getElem(cx,thisObj,i);    if (temp != null && temp != Undefined.instance) {      String str=ScriptRuntime.toString(temp);      total_size+=str.length();      buf[i]=str;    }  }  total_size+=(length - 1) * separator.length();  StringBuilder sb=new StringBuilder(total_size);  for (int i=0; i != length; i++) {    if (i != 0) {      sb.append(separator);    }    String str=buf[i];    if (str != null) {      sb.append(str);    }  }  return sb.toString();}  }
class C{  public static String rmSlashFromUrl(final String url){  return url.endsWith("/") ? url.substring(0,url.length() - 1) : url;}  }
class C{  public EquipRandomItemAction(final String itemlist){  this(itemlist,false);}  }
class C{  public void lerp(Vector4f input,Vector4f output,float t){  output.points[0]=(points[0] * (1.0f * t) + input.points[0] * t);  output.points[1]=(points[1] * (1.0f * t) + input.points[1] * t);  output.points[2]=(points[2] * (1.0f * t) + input.points[2] * t);  output.points[3]=(points[3] * (1.0f * t) + input.points[3] * t);}  }
class C{  public String schemaRegistryUrl(){  return schemaRegistry.restConnect;}  }
class C{  public SQFPrivateDeclVar(SQFString var,SQFPrivatizer privatizer){  this.myElement=var;  this.varName=var.getNonQuoteText();  this.privatizer=privatizer;}  }
class C{  public int nextInt(){  return nextInt(this.my_N,this.my_s,this.my_n,this.randomGenerator);}  }
class C{  private void displayAccessRoomWarning(){  Toast.makeText(getActivity(),R.string.room_settings_room_access_warning,Toast.LENGTH_SHORT).show();}  }
class C{  public final void insertElementAt(Object value,int at){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    Object newMap[]=new Object[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  if (at <= (m_firstFree - 1)) {    System.arraycopy(m_map,at,m_map,at + 1,m_firstFree - at);  }  m_map[at]=value;  m_firstFree++;}  }
class C{  @Override protected void executionFinished(Throwable t){  m_ButtonApplyFilter.setEnabled(true);  m_ButtonRemoveAttributes.setEnabled(true);  m_PanelDataSummary.setEnabled(true);  m_PanelAttributes.setEnabled(true);  if (t != null) {    System.err.println("Processing failed:");    t.printStackTrace();    JOptionPane.showMessageDialog(this,"Processing failed:\n" + t,"Error",JOptionPane.ERROR_MESSAGE);  }}  }
class C{  public boolean canStripWhiteSpace(){  StylesheetRoot sroot=this.getStylesheetRoot();  return (null != sroot) ? sroot.canStripWhiteSpace() : false;}  }
class C{  @POST @Path("internal/node/poweroff") @Produces({MediaType.APPLICATION_JSON}) public Response powerOffNode(){  _log.info("Poweroff node");  recoveryManager.poweroff();  return Response.status(Response.Status.ACCEPTED).build();}  }
class C{  @Override protected MBeanOperationInfo[] createMBeanOperationInfo(){  MBeanOperationInfo[] operationsInfo=new MBeanOperationInfo[MAX_OPERATIONS_COUNT];  operationsInfo[0]=new MBeanOperationInfo("getMembers","Returns ids as strings for all the members - Application Peers & Cache Servers.",new MBeanParameterInfo[]{},String[].class.getName(),MBeanOperationInfo.ACTION_INFO);  MBeanParameterInfo[] getMemberDetailsArgs=new MBeanParameterInfo[1];  getMemberDetailsArgs[0]=new MBeanParameterInfo("memberId",String.class.getName(),"Id of the member for all the details are to be retrieved.");  operationsInfo[1]=new MBeanOperationInfo("getMemberDetails","Returns details for a given member",getMemberDetailsArgs,Map.class.getName(),MBeanOperationInfo.ACTION_INFO);  MBeanParameterInfo[] getRegionSnapArgs=new MBeanParameterInfo[1];  getRegionSnapArgs[0]=new MBeanParameterInfo("memberId",String.class.getName(),"Id of the member on which we want to discover all the region MBean.");  operationsInfo[2]=new MBeanOperationInfo("getRegions","Returns a java.util.Map of details of regions on a member",getRegionSnapArgs,Map.class.getName(),MBeanOperationInfo.ACTION_INFO);  return operationsInfo;}  }
class C{  void serialize(IonDatagram dg) throws IonException {  myIonSystem=dg.getSystem();  mySymbolTable=null;  writeIonValue(dg);  if (mySymbolTable != null && mySymbolTable.isLocalTable()) {    writeLocalSymbolTable(mySymbolTable);  }  writeBytes(BINARY_VERSION_MARKER_1_0);}  }
class C{  public String toString(){  return name;}  }
class C{  public static String updateItemName(String name){  if (name != null) {    int idx=ITEM_NAMES_OLD.indexOf(name);    if (idx != -1) {      name=ITEM_NAMES_NEW.get(idx);    }    name=ItemTools.itemNameToDisplayName(name);    idx=ITEM_NAMES_OLD_0_66.indexOf(name);    if (idx != -1) {      name=ITEM_NAMES_NEW_0_66.get(idx);    }  }  return name;}  }
class C{  public boolean forEachKey(IntProcedure procedure){  for (int i=table.length; i-- > 0; ) {    if (state[i] == FULL)     if (!procedure.apply(table[i]))     return false;  }  return true;}  }
class C{  public Polynomial(double[] coefficients){  this.coefficients=coefficients;}  }
class C{  public ScaleAndIndexes indexes(int... indexes){  return new ScaleAndIndexes(scale,indexes.clone());}  }
class C{  public static boolean isAppliance(){  if (isAppliance != null) {    log.info("Return value {} from cached result",isAppliance.booleanValue());    return isAppliance.booleanValue();  }  final String[] cmd={SYSTOOL_CMD,IS_APPLIANCE};  Exec.Result result=Exec.sudo(CMD_TIMEOUT,cmd);  if (!result.exitedNormally()) {    log.error("Failed to check if it's appliance {}",result.getExitValue());    throw new IllegalStateException("Failed to check if it's appliance");  }  log.debug("result={}",result.toString());  if (IS_APPLIANCE_OUTPUT.equals(result.getStdError().trim())) {    log.info("It's an appliance");    isAppliance=Boolean.TRUE;    return isAppliance.booleanValue();  }  log.info("The output of appliance check: {}",result.getStdError());  isAppliance=Boolean.FALSE;  return isAppliance.booleanValue();}  }
class C{  public Transaction(NetworkParameters params,byte[] payloadBytes) throws ProtocolException {  super(params,payloadBytes,0);}  }
class C{  public RangeQueryBuilder gte(float from){  this.from=from;  this.includeLower=true;  return this;}  }
class C{  public InputStream openClassfile(String classname){  try {    URLConnection con=openClassfile0(classname);    if (con != null)     return con.getInputStream();  } catch (  IOException e) {  }  return null;}  }
class C{  public Channel(RTMPConnection conn,int channelId){  connection=conn;  id=channelId;}  }
class C{  public PaymentDeregistrationException(){}  }
class C{  public Method node(AbstractInsnNode node){  this.insnList.add(node);  return this;}  }
class C{  protected int descend(final CoverTreeNode query,MyHeap upper_k,int current_scale,int max_scale,Stack<Stack<d_node>> cover_sets,Stack<d_node> zero_set) throws Exception {  d_node parent;  Stack<d_node> cover_set_currentscale=getCoverSet(current_scale,cover_sets);  for (int i=0; i < cover_set_currentscale.length; i++) {    parent=cover_set_currentscale.element(i);    CoverTreeNode par=parent.n;    double upper_dist=upper_k.peek().distance + query.max_dist + query.max_dist;    if (parent.dist <= upper_dist + par.max_dist) {      CoverTreeNode chi;      if (par == m_Root && par.num_children == 0) {        chi=par;      } else {        chi=par.children.element(0);      }      if (parent.dist <= upper_dist + chi.max_dist) {        if (chi.num_children > 0) {          if (max_scale < chi.scale) {            max_scale=chi.scale;          }          d_node temp=new d_node(parent.dist,chi);          getCoverSet(chi.scale,cover_sets).push(temp);          if (m_TreeStats != null) {            m_TreeStats.incrIntNodeCount();          }        } else         if (parent.dist <= upper_dist) {          d_node temp=new d_node(parent.dist,chi);          zero_set.push(temp);          if (m_TreeStats != null) {            m_TreeStats.incrLeafCount();          }        }      }      for (int c=1; c < par.num_children; c++) {        chi=par.children.element(c);        double upper_chi=upper_k.peek().distance + chi.max_dist + query.max_dist+ query.max_dist;        if (shell(parent.dist,chi.parent_dist,upper_chi)) {          double d=Math.sqrt(m_DistanceFunction.distance(query.p(),chi.p(),upper_chi * upper_chi,m_TreeStats));          if (m_TreeStats != null) {            m_TreeStats.incrPointCount();          }          if (d <= upper_chi) {            if (d < upper_k.peek().distance) {              update(upper_k,d);            }            if (chi.num_children > 0) {              if (max_scale < chi.scale) {                max_scale=chi.scale;              }              d_node temp=new d_node(d,chi);              getCoverSet(chi.scale,cover_sets).push(temp);              if (m_TreeStats != null) {                m_TreeStats.incrIntNodeCount();              }            } else             if (d <= upper_chi - chi.max_dist) {              d_node temp=new d_node(d,chi);              zero_set.push(temp);              if (m_TreeStats != null) {                m_TreeStats.incrLeafCount();              }            }          }        }      }    }  }  return max_scale;}  }
class C{  public Counter histogram(String name){  return metrics.getCounter(name);}  }
class C{  public boolean isExceptionHeapType(){  return type == SSADictionary.exceptionState;}  }
class C{  public boolean allProceduresAreCallable() throws SQLException {  return false;}  }
class C{  public int next(){  int node;  do {    node=_currentNode;    _currentNode=m_traverser.next(_startNode,_currentNode);  } while (node != DTM.NULL && (getExpandedTypeID(node) != _nodeType && getNodeType(node) != _nodeType));  return (node == DTM.NULL ? DTM.NULL : returnNode(node));}  }
class C{  protected void doScheduled(IJobChangeEvent event){}  }
class C{  public Delegator(Scriptable obj){  this.obj=obj;}  }
class C{  public Turnout newTurnout(String systemName,String userName){  return (Turnout)newNamedBean(systemName,userName);}  }
class C{  public ClusterMetricsSnapshot(){}  }
class C{  public Boolean add(Todo body) throws ApiException {  Object postBody=body;  if (body == null) {    throw new ApiException(400,"Missing the required parameter 'body' when calling add");  }  String path="/todo-service/todo".replaceAll("\\{format\\}","json");  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,String> formParams=new HashMap<String,String>();  final String[] accepts={"application/json"};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  if (contentType.startsWith("multipart/form-data")) {    boolean hasFields=false;    FormDataMultiPart mp=new FormDataMultiPart();    if (hasFields)     postBody=mp;  } else {  }  try {    String[] authNames=new String[]{};    String response=apiClient.invokeAPI(path,"POST",queryParams,postBody,headerParams,formParams,accept,contentType,authNames);    if (response != null) {      return (Boolean)apiClient.deserialize(response,"",Boolean.class);    } else {      return null;    }  } catch (  ApiException ex) {    throw ex;  }}  }
class C{  public String(StringBuffer stringbuffer){  offset=0;synchronized (stringbuffer) {    value=stringbuffer.shareValue();    count=stringbuffer.length();  }}  }
class C{  public boolean isForIn(){  return forIn;}  }
class C{  public EmptyStatement newEmptyStatement(){  return new EmptyStatement(this);}  }
class C{  private boolean shouldSynthensizeKeyEvents(){  if (!checkedInputOverride) {    needToSendKeyTypedEvent=!METHOD_OVERRIDDEN.get(getClass());    checkedInputOverride=true;  }  return needToSendKeyTypedEvent;}  }
class C{  public double rho(final double maturity){  QL.require(maturity >= 0.0,"negative maturity not allowed");  final double DalphaDr=dAlpha_dD1 / stdDev;  final double DbetaDr=dBeta_dD2 / stdDev;  final double temp=DalphaDr * forward + alpha * forward + DbetaDr * x;  return maturity * (discount * temp - value());}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  private static void updateResultsToFile(String response){  BufferedWriter bw=null;  try {    File outFile=new File(props.getProperty(OUT_FILE_LOCATION));    System.out.println("Output file deletion status: " + outFile.delete());    outFile.createNewFile();    System.out.println("Output file location: " + outFile.getCanonicalPath());    bw=new BufferedWriter(new FileWriter(outFile));    bw.write(response);    bw.close();  } catch (  Exception e) {    e.printStackTrace();  } finally {    try {      if (bw != null) {        bw.close();        bw=null;      }    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public void stop(){  Logger.println("(ExecutionManager.stoping) Stoping execution manager");  stoppedMsgsLock.lock();  this.stopped=true;  if (tomLayer.getInExec() != -1) {    stoppedEpoch=getConsensus(tomLayer.getInExec()).getLastEpoch();    if (stoppedEpoch != null)     Logger.println("(ExecutionManager.stop) Stoping epoch " + stoppedEpoch.getTimestamp() + " of consensus "+ tomLayer.getInExec());  }  stoppedMsgsLock.unlock();}  }
class C{  public void push(T object){  add(object);}  }
class C{  public void print(int w,int d){  print(new PrintWriter(System.out,true),w,d);}  }
class C{  public HTMLEditor(Frame owner,String title,String htmlText,boolean editable){  super(owner,title == null ? Msg.getMsg(Env.getCtx(),"Editor") : title,true);  init(owner,htmlText,editable);}  }
class C{  public boolean canContain(ElementType other){  return (theModel & other.theMemberOf) != 0;}  }
class C{  public symbol on_symbol(){  return _on_symbol;}  }
class C{  public boolean isSelfService(){  Object oo=get_Value(COLUMNNAME_IsSelfService);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void main(String args[]){  SantiagoScenarioBuilder scb=new SantiagoScenarioBuilder();  scb.build();}  }
class C{  @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:14.918 -0500",hash_original_method="516FFF274D5A3C3904BD2A35075D82E5",hash_generated_method="C003D4D15FB3B793E0C405F27DCF0A14") public URI normalize(){  if (opaque) {    return this;  }  String normalizedPath=normalize(path,false);  if (path.equals(normalizedPath)) {    return this;  }  URI result=duplicate();  result.path=normalizedPath;  result.setSchemeSpecificPart();  return result;}  }
class C{  protected void exceptionHandling(HttpSecurity http) throws Exception {  http.exceptionHandling().authenticationEntryPoint(new Http403ForbiddenEntryPoint());}  }
class C{  public void rejectedExecution(Runnable r,ThreadPoolExecutor e){  if (!e.isShutdown()) {    r.run();  }}  }
class C{  private String extractBoundary(String line){  int index=line.lastIndexOf("boundary=");  if (index == -1) {    return null;  }  String token=line.substring(index + 9);  if (token.charAt(0) == '"') {    index=token.lastIndexOf('"');    token=token.substring(1,index);  }  token="--" + token;  return token;}  }
class C{  private void addZipkinAnnotations(zipkin.Span.Builder zipkinSpan,Span span,Endpoint endpoint){  for (  Log ta : span.logs()) {    Annotation zipkinAnnotation=Annotation.builder().endpoint(endpoint).timestamp(ta.getTimestamp() * 1000).value(ta.getEvent()).build();    zipkinSpan.addAnnotation(zipkinAnnotation);  }}  }
class C{  static public void unTriggerAction(final Action action){  int qq=action.getQueue();  @SuppressWarnings("unchecked") ArrayList<Trigger> act=(ArrayList<Trigger>)triggeredActions[qq];  Object sem=triggeredSemaphore[qq];  Trigger trigger=new Trigger(action.getId(),null);synchronized (act) {    if (act.contains(trigger)) {      act.remove(trigger);    }  }synchronized (sem) {    try {      sem.notifyAll();    } catch (    final Exception ex) {      if (Cfg.EXCEPTION) {        Check.log(ex);      }      if (Cfg.DEBUG) {        Check.log(ex);      }    }  }}  }
class C{  @Override public final double splitCritValue(Distribution bags){  double numerator;  double denumerator;  numerator=oldEnt(bags) - newEnt(bags);  if (Utils.eq(numerator,0)) {    return Double.MAX_VALUE;  }  denumerator=splitEnt(bags);  if (Utils.eq(denumerator,0)) {    return Double.MAX_VALUE;  }  return denumerator / numerator;}  }
class C{  public boolean isShowMainToolbar(){  return showMainToolbar != 0;}  }
class C{  public MemoryIndexStoreEntry next(){  if (valuesIterator == null) {    currentEntry.setMemoryIndexStoreEntry(currKey,(RegionEntry)currValue);    return currentEntry;  }  RegionEntry re=(RegionEntry)valuesIterator.next();  if (re == null)   throw new NoSuchElementException();  currentEntry.setMemoryIndexStoreEntry(currKey,re);  return currentEntry;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.187 -0400",hash_original_method="9D5EF91D4BF7AC959A9D204440546D9E",hash_generated_method="ABF3DFD480E33AA8B43340EB22AD5BB0") public static String toString(URL url,String encoding) throws IOException {  return toString(url,Charsets.toCharset(encoding));}  }
class C{  private void createJNDIContext() throws Exception {  this.tempDir=File.createTempFile("jnditest",null);  this.tempDir.delete();  this.tempDir.mkdir();  this.tempDir.deleteOnExit();  MysqlConnectionPoolDataSource ds;  Hashtable<String,String> env=new Hashtable<String,String>();  env.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.fscontext.RefFSContextFactory");  this.ctx=new InitialContext(env);  assertTrue("Naming Context not created",this.ctx != null);  ds=new MysqlConnectionPoolDataSource();  ds.setUrl(dbUrl);  ds.setDatabaseName("test");  this.ctx.bind(this.tempDir.getAbsolutePath() + "/test",ds);}  }
class C{  public static String escapeHTML(String str){  return escapeHTML(str,HTMLV40);}  }
class C{  public static float toFloat(byte[] bytes){  return toFloat(bytes,0);}  }
class C{  public void remove(){  throw new UnsupportedOperationException(getClass().getName());}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesDate1String=null;  String inputFilesDate2String=null;  String[] imageFilesDate1=null;  String[] imageFilesDate2=null;  String outputHeader=null;  String outputHeaderDirection=null;  WhiteboxRasterInfo[] date1Images=null;  WhiteboxRasterInfo[] date2Images=null;  int nCols=0;  int nRows=0;  double z;  int numImages;  int progress=0;  int col, row;  int a, i, j;  double[][] data1;  double[][] data2;  double noData=-32768;  double dist, direction;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesDate1String=args[0];  inputFilesDate2String=args[1];  outputHeader=args[2];  outputHeaderDirection=args[3];  try {    imageFilesDate1=inputFilesDate1String.split(";");    imageFilesDate2=inputFilesDate2String.split(";");    numImages=imageFilesDate1.length;    if (imageFilesDate2.length != numImages) {      showFeedback("The number of specified images must be the same for both dates.");      return;    }    date1Images=new WhiteboxRasterInfo[numImages];    date2Images=new WhiteboxRasterInfo[numImages];    double[] date1NoDataValues=new double[numImages];    double[] date2NoDataValues=new double[numImages];    for (i=0; i < numImages; i++) {      date1Images[i]=new WhiteboxRasterInfo(imageFilesDate1[i]);      date2Images[i]=new WhiteboxRasterInfo(imageFilesDate2[i]);      if (i == 0) {        nCols=date1Images[i].getNumberColumns();        nRows=date1Images[i].getNumberRows();        noData=date1Images[i].getNoDataValue();        if (date2Images[i].getNumberColumns() != nCols || date2Images[i].getNumberRows() != nRows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      } else {        if (date1Images[i].getNumberColumns() != nCols || date1Images[i].getNumberRows() != nRows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }        if (date2Images[i].getNumberColumns() != nCols || date2Images[i].getNumberRows() != nRows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      date1NoDataValues[i]=date1Images[i].getNoDataValue();      date2NoDataValues[i]=date2Images[i].getNoDataValue();    }    data1=new double[numImages][];    data2=new double[numImages][];    double[] directionArray=new double[numImages];    for (i=0; i < numImages; i++) {      directionArray[i]=Math.pow(2,i);    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",imageFilesDate1[0],WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("spectrum.pal");    WhiteboxRaster outputDir=new WhiteboxRaster(outputHeaderDirection,"rw",imageFilesDate1[0],WhiteboxRaster.DataType.INTEGER,0);    outputDir.setDataScale(DataScale.CATEGORICAL);    outputDir.setPreferredPalette("qual.pal");    for (row=0; row < nRows; row++) {      for (i=0; i < numImages; i++) {        data1[i]=date1Images[i].getRowValues(row);        data2[i]=date2Images[i].getRowValues(row);      }      for (col=0; col < nCols; col++) {        dist=0;        direction=0;        a=0;        for (i=0; i < numImages; i++) {          if (data1[i][col] != date1NoDataValues[i] && data2[i][col] != date2NoDataValues[i]) {            z=(data2[i][col] - data1[i][col]);            dist+=z * z;            a++;            if (z >= 0) {              direction+=directionArray[i];            }          }        }        if (a > 0) {          output.setValue(row,col,Math.sqrt(dist));          outputDir.setValue(row,col,direction);        } else {          output.setValue(row,col,noData);          outputDir.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress(progress);    }    for (i=0; i < numImages; i++) {      date1Images[i].close();      date2Images[i].close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    outputDir.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputDir.addMetadataEntry("Created on " + new Date());    outputDir.close();    returnData(outputHeader);    returnData(outputHeaderDirection);    String ret="Key For Interpreting The CVA Direction Image:\n\n\tDirection of Change (+ or -)\nValue";    for (i=0; i < numImages; i++) {      ret+="\tBand" + (i + 1);    }    ret+="\n";    String line="";    for (a=0; a < (2 * Math.pow(2,(numImages - 1))); a++) {      line=a + "\t";      for (i=0; i < numImages; i++) {        if (BitOps.checkBit(a,i)) {          line+="+\t";        } else {          line+="-\t";        }      }      ret+=line + "\n";    }    returnData(ret);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  void onCancel(){  onUp();}  }
class C{  public Command prepareCommand(String sql){  try {    Prepared p=parse(sql);    boolean hasMore=isToken(";");    if (!hasMore && currentTokenType != END) {      throw getSyntaxError();    }    p.prepare();    Command c=new CommandContainer(this,sql,p);    if (hasMore) {      String remaining=originalSQL.substring(parseIndex);      if (remaining.trim().length() != 0) {        CommandList list=new CommandList(this,sql,c,remaining);        c=list;      }    }    return c;  } catch (  DbException e) {    throw e.addSQL(originalSQL);  }}  }
class C{  public static <T>FutureW<T> empty(){  return new FutureW(CompletableFuture.completedFuture(null));}  }
class C{  public byte[] windowNaf(byte width,BigInteger k){  byte[] wnaf=new byte[k.bitLength() + 1];  short pow2wB=(short)(1 << width);  BigInteger pow2wBI=BigInteger.valueOf(pow2wB);  int i=0;  int length=0;  while (k.signum() > 0) {    if (k.testBit(0)) {      BigInteger remainder=k.mod(pow2wBI);      if (remainder.testBit(width - 1)) {        wnaf[i]=(byte)(remainder.intValue() - pow2wB);      } else {        wnaf[i]=(byte)remainder.intValue();      }      k=k.subtract(BigInteger.valueOf(wnaf[i]));      length=i;    } else {      wnaf[i]=0;    }    k=k.shiftRight(1);    i++;  }  length++;  byte[] wnafShort=new byte[length];  System.arraycopy(wnaf,0,wnafShort,0,length);  return wnafShort;}  }
class C{  public void show(){  mAlertDialog.show();}  }
class C{  private void startSearch(){  AccessibilityNodeInfoCompat focused=FocusFinder.getFocusedNode(mContext,true);  mInitialNode.reset(focused);  mHasNavigated=false;  mNodeSearch.startSearch();  mSpeechController.speak(mContext.getString(R.string.search_mode_open),SpeechController.QUEUE_MODE_FLUSH_ALL,FeedbackItem.FLAG_NO_HISTORY,null);  mHandler.postDelayed(mHint,HINT_DELAY);}  }
class C{  @Override protected int sizeOf(MemoryCacheKey key,Bitmap bitmap){  if (bitmap == null)   return 0;  return bitmap.getRowBytes() * bitmap.getHeight();}  }
class C{  private void processDigest(byte[] digest,int offset){  int i, j;  int lastWord;  long nBits=messageLength << 3;  engineUpdate((byte)0x80);  i=0;  lastWord=(buffer[BYTES_OFFSET] + 3) >> 2;  if (buffer[BYTES_OFFSET] != 0) {    if (lastWord < 15) {      i=lastWord;    } else {      if (lastWord == 15) {        buffer[15]=0;      }      SHA1Impl.computeHash(buffer);      i=0;    }  }  Arrays.fill(buffer,i,14,0);  buffer[14]=(int)(nBits >>> 32);  buffer[15]=(int)(nBits & 0xFFFFFFFF);  SHA1Impl.computeHash(buffer);  j=offset;  for (i=HASH_OFFSET; i < HASH_OFFSET + 5; i++) {    int k=buffer[i];    digest[j]=(byte)(k >>> 24);    digest[j + 1]=(byte)(k >>> 16);    digest[j + 2]=(byte)(k >>> 8);    digest[j + 3]=(byte)(k);    j+=4;  }  engineReset();}  }
class C{  public Object callFactory(String factoryMethod,Class<?>[] paramTypes,Object[] paramValues){  return callFactory(fullyQualifiedClassName,factoryMethod,paramTypes,paramValues);}  }
class C{  public void ringDevice(String code){  resultBuilder.build(code);  devicePolicyManager.lockNow();}  }
class C{  public static Object instantiateObject(Class<?> clazz,Object... arguments) throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException {  return getConstructor(clazz,DataType.getPrimitive(arguments)).newInstance(arguments);}  }
class C{  public boolean isNullNodeId(){  final int nsIdx;  if (namespaceUri != null && !namespaceUri.isEmpty()) {    if (NamespaceTable.OPCUA_NAMESPACE.equals(namespaceUri)) {      nsIdx=0;    } else {      return false;    }  } else {    nsIdx=namespaceIndex;  }  return NodeId.get(type,nsIdx,value).isNullNodeId();}  }
class C{  @Override public boolean add(E e){  while (true) {    Object[] elements=array;    Object[] newElements=createArrayAdd(elements,e);    if (replaceArray(elements,newElements))     break;  }  return true;}  }
class C{  public ComplexType createComplexType(){  ComplexTypeImpl complexType=new ComplexTypeImpl();  return complexType;}  }
class C{  private static void dualPivotQuicksort(byte[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  byte ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    byte t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    byte t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    byte t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    byte t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    byte t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    byte t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    byte t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    byte t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    byte t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  byte pivot1=ae2;  a[e2]=a[left];  byte pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      byte ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      byte ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      byte ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  public void deleteImageSharings() throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    mApi.deleteImageSharings();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  private static Boolean isErrorIcon(final Label icon){  return icon.isVisible() && icon.getStyleName().contains(SPUIStyleDefinitions.ERROR_LABEL);}  }
class C{  public HistoryExtent(final EditSession session,final Extent extent,final FaweChangeSet changeSet,FaweQueue queue){  super(extent);  checkNotNull(changeSet);  this.extent=(AbstractDelegateExtent)extent;  this.queue=queue;  this.changeSet=changeSet;  this.session=session;}  }
class C{  public static void putFloat(Context context,String key,float value){  SharedPreferences mainPref=context.getSharedPreferences(context.getResources().getString(R.string.shared_pref_package),Context.MODE_PRIVATE);  Editor editor=mainPref.edit();  editor.putFloat(key,value);  editor.commit();}  }
class C{  public InvertedGenerationalDistance(Problem problem,NondominatedPopulation referenceSet,double d){  super(problem,referenceSet);  this.d=d;}  }
class C{  public PasswordEditText(@NonNull final Context context){  super(context);  initialize(null);}  }
class C{  protected ActiveDefinition_Impl(){  super();}  }
class C{  private void sendSubscribeMessage(String channel) throws WebSocketException {  MessageBuilder builder=new MessageBuilder(RequestBuilder.POST,null);  builder.header(MESSAGE_TYPE_HEADER_NAME,"subscribe-channel").data("{\"channel\":\"" + channel + "\"}");  Message message=builder.build();  send(message,null);}  }
class C{  public ZyGraphEdge(final NodeTypeT source,final NodeTypeT target,final Edge edge,final ZyEdgeRealizer<EdgeTypeT> realizer,final RawEdgeTypeT rawEdge){  m_sourceNode=Preconditions.checkNotNull(source,"Source node cannot be null");  m_targetNode=Preconditions.checkNotNull(target,"Target node cannot be null");  m_edge=Preconditions.checkNotNull(edge,"Edge argument cannot be null");  m_rawEdge=Preconditions.checkNotNull(rawEdge,"Raw edge argument cannot be null");  m_realizer=realizer;  m_realizer.setSelected(rawEdge.isSelected());  m_realizer.setSourcePoint(new YPoint(rawEdge.getX1(),rawEdge.getY1()));  m_realizer.setTargetPoint(new YPoint(rawEdge.getX2(),rawEdge.getY2()));  m_graph=(Graph2D)edge.getGraph();  m_graph.setRealizer(edge,realizer);  for (  final CBend bend : m_rawEdge.getBends()) {    m_realizer.addPoint(bend.getX(),bend.getY());    bend.addListener(m_listener);  }  realizer.addListener(m_listener);  rawEdge.addListener(m_listener);}  }
class C{  public PaymentInfoCash(double dTotal,double dPaid,double dTendered){  m_dTotal=dTotal;  m_dPaid=dPaid;}  }
class C{  public AutoAssignScheduler(TenantAware tenantAware,SystemManagement systemManagement,SystemSecurityContext systemSecurityContext,AutoAssignChecker autoAssignChecker){  this.tenantAware=tenantAware;  this.systemManagement=systemManagement;  this.systemSecurityContext=systemSecurityContext;  this.autoAssignChecker=autoAssignChecker;}  }
class C{  private static Boolean isShared(int AD_Client_ID,int AD_Table_ID){  if (s_shares.isEmpty()) {    String sql="SELECT AD_Client_ID, AD_Table_ID, ShareType " + "FROM AD_ClientShare WHERE ShareType<>'x' AND IsActive='Y'";    PreparedStatement pstmt=null;    try {      pstmt=DB.prepareStatement(sql,null);      ResultSet rs=pstmt.executeQuery();      while (rs.next()) {        int Client_ID=rs.getInt(1);        int table_ID=rs.getInt(2);        String key=Client_ID + "_" + table_ID;        String ShareType=rs.getString(3);        if (ShareType.equals(SHARETYPE_ClientAllShared))         s_shares.put(key,Boolean.TRUE); else         if (ShareType.equals(SHARETYPE_OrgNotShared))         s_shares.put(key,Boolean.FALSE);      }      rs.close();      pstmt.close();      pstmt=null;    } catch (    Exception e) {      s_log.log(Level.SEVERE,sql,e);    }    try {      if (pstmt != null)       pstmt.close();      pstmt=null;    } catch (    Exception e) {      pstmt=null;    }    if (s_shares.isEmpty())     s_shares.put("0_0",Boolean.TRUE);  }  String key=AD_Client_ID + "_" + AD_Table_ID;  return s_shares.get(key);}  }
class C{  public ResultDataModelTestCase(String name){  super(name);}  }
class C{  public void clear(){  refs.clear();}  }
class C{  private static void test_directGetResourceAsStream(Configuration config) throws Exception {  test_directGetResourceAsStream(config,"test/Resource1.txt","Muffins are tasty!\n");}  }
class C{  public Rectangle2D(double x,double y,Dimension2D size){  this.x=x;  this.y=y;  this.size=size;}  }
class C{  @Override @Transactional public void logout(HttpServletRequest request,HttpServletResponse response,Authentication authentication){  String rememberMeCookie=extractRememberMeCookie(request);  if (rememberMeCookie != null && rememberMeCookie.length() != 0) {    try {      String[] cookieTokens=decodeCookie(rememberMeCookie);      PersistentToken token=getPersistentToken(cookieTokens);      persistentTokenRepository.delete(token);    } catch (    InvalidCookieException ice) {      log.info("Invalid cookie, no persistent token could be deleted");    }catch (    RememberMeAuthenticationException rmae) {      log.debug("No persistent token found, so no token could be deleted");    }  }  super.logout(request,response,authentication);}  }
class C{  private static byte randomByte(){  return (byte)(127 - new Random().nextInt(256));}  }
class C{  @Override protected void drawNeedle(Graphics2D g2,Rectangle2D plotArea,Point2D rotate,double angle){  Line2D shape=new Line2D.Float();  Shape d;  float x=(float)(plotArea.getMinX() + (plotArea.getWidth() / 2));  float minY=(float)plotArea.getMinY();  float maxY=(float)plotArea.getMaxY();  shape.setLine(x,minY,x,maxY);  GeneralPath shape1=new GeneralPath();  if (this.isArrowAtTop) {    shape1.moveTo(x,minY);    minY+=4 * getSize();  } else {    shape1.moveTo(x,maxY);    minY=maxY - 4 * getSize();  }  shape1.lineTo(x + getSize(),minY);  shape1.lineTo(x - getSize(),minY);  shape1.closePath();  if ((rotate != null) && (angle != 0)) {    getTransform().setToRotation(angle,rotate.getX(),rotate.getY());    d=getTransform().createTransformedShape(shape);  } else {    d=shape;  }  defaultDisplay(g2,d);  if ((rotate != null) && (angle != 0)) {    d=getTransform().createTransformedShape(shape1);  } else {    d=shape1;  }  defaultDisplay(g2,d);}  }
class C{  public static final <T extends EObject>List<T> collectNodesWithinSameThisEnvironment(EObject root,Class<T> cls){  final List<T> result=new ArrayList<>();  final TreeIterator<EObject> iter=root.eAllContents();  while (iter.hasNext()) {    final EObject obj=iter.next();    if (cls.isAssignableFrom(obj.getClass())) {      @SuppressWarnings("unchecked") final T objCasted=(T)obj;      result.add(objCasted);    }    if (obj instanceof ThisArgProvider) {      iter.prune();    }  }  return result;}  }
class C{  private Event(){}  }
class C{  @Override public void requestLayout(){  if (engine == null) {    throw new IllegalStateException("This surface has not been added to a MosaicEngine");  }  engine.requestLayout(this);}  }
class C{  public static String readTextFileWithEncoding(String fileName,String encoding) throws IOException {  byte[] buff=readFile(fileName);  String s=new String(buff,encoding);  return s;}  }
class C{  public long tryConvertToReadLock(long stamp){  long a=stamp & ABITS, m, s, next;  WNode h;  while (((s=state) & SBITS) == (stamp & SBITS)) {    if ((m=s & ABITS) == 0L) {      if (a != 0L)       break; else       if (m < RFULL) {        if (U.compareAndSwapLong(this,STATE,s,next=s + RUNIT))         return next;      } else       if ((next=tryIncReaderOverflow(s)) != 0L)       return next;    } else     if (m == WBIT) {      if (a != m)       break;      U.putLongVolatile(this,STATE,next=s + (WBIT + RUNIT));      if ((h=whead) != null && h.status != 0)       release(h);      return next;    } else     if (a != 0L && a < WBIT)     return stamp; else     break;  }  return 0L;}  }
class C{  public static DateTimeRenderer createTimeRenderer(boolean twentyFourHours,boolean showSeconds){  DateTimeRenderer d=new DateTimeRenderer();  d.twentyFourHours=twentyFourHours;  d.showSeconds=showSeconds;  return d;}  }
class C{  private static TranslationResult processSimpleMemoryAccess(final ITranslationEnvironment environment,final IOperandTreeNode segmentOverride,OperandSize size,final boolean loadOperand,TranslationResult intermediateResult){  final TranslationResultType childType=intermediateResult.getType();  if ((childType == TranslationResultType.LITERAL) || (childType == TranslationResultType.REGISTER)) {    return processSimpleMemoryAccessLiteralOrRegisterLoad(environment,segmentOverride,size,loadOperand,intermediateResult);  } else {    return processSimpleMemoryAccessFromCompoundAddress(environment,segmentOverride,size,loadOperand,intermediateResult);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.644 -0500",hash_original_method="25835348DC7AD8FF740039B9BA0B006A",hash_generated_method="7DBC871E34662A75C5F9C0C3FD8B8B0F") public SIPETagParser(String etag){  super(etag);}  }
class C{  public static byte combine2bytesToOne(byte high,byte low){  if (high < 0 || high > 0xf || low < 0 || low > 0xf) {    throw new RuntimeException("Out of Boundary");  }  return (byte)(high << 4 | low);}  }
class C{  public void undo(){  ((DataTableModel)getModel()).undo();}  }
class C{  public static boolean copy(final InputStream input,final String filePath){  try {    File file=new File(filePath);    OutputStream output=new FileOutputStream(file);    byte[] buffer=new byte[8 * 1024];    int read;    while ((read=input.read(buffer)) != -1) {      output.write(buffer,0,read);    }    output.flush();    output.close();    return true;  } catch (  Exception e) {    e.printStackTrace();    return false;  } finally {    try {      input.close();    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public static String join(String sep,String... parts){  StringBuilder sb=new StringBuilder();  for (  String part : parts) {    sb.append(part).append(sep);  }  return sb.subSequence(0,sb.length() - sep.length()).toString();}  }
class C{  public static int tokenizeEntityValue(char[] buf,int off,int end,Token token) throws PartialTokenException, InvalidTokenException, EmptyTokenException, ExtensibleTokenException {  if (off == end)   throw new EmptyTokenException();  int start=off;  while (off != end) {switch (charType(buf[off])) {case CT_LEAD2:      if (end - off < 2)       throw new PartialCharException(off);    off+=2;  break;case CT_AMP:if (off == start) return scanRef(buf,off + 1,end,token);token.tokenEnd=off;return TOK_DATA_CHARS;case CT_PERCNT:if (off == start) {int tok=scanPercent(buf,off + 1,end,token);if (tok == TOK_PERCENT) throw new InvalidTokenException(off + 1);return tok;}token.tokenEnd=off;return TOK_DATA_CHARS;case CT_LF:if (off == start) {token.tokenEnd=off + 1;return TOK_DATA_NEWLINE;}token.tokenEnd=off;return TOK_DATA_CHARS;case CT_CR:if (off == start) {off+=1;if (off == end) throw new ExtensibleTokenException(TOK_DATA_NEWLINE);if (charType(buf[off]) == CT_LF) off+=1;token.tokenEnd=off;return TOK_DATA_NEWLINE;}token.tokenEnd=off;return TOK_DATA_CHARS;default :off+=1;break;}}token.tokenEnd=off;return TOK_DATA_CHARS;}  }
class C{  public T caseN4MemberDeclaration(N4MemberDeclaration object){  return null;}  }
class C{  public static void storeData(final Window parent,final INaviModule module){  final SaveToDatabaseThread thread=new SaveToDatabaseThread(module);  CProgressDialog.showEndless(parent,"Saving data to the database" + " ...",thread);  final Exception exception=thread.getException();  if (exception != null) {    CUtilityFunctions.logException(exception);    final String message="E00200: " + "Could not save module data";    final String description=CUtilityFunctions.createDescription(String.format("BinNavi could not save the module data of module '%s' to the database.",module.getConfiguration().getName()),new String[]{"There was a problem with the database connection."},new String[]{"The module data was not written to the database."});    NaviErrorDialog.show(parent,message,description,exception);  }}  }
class C{  public String toString(){  return toString(null);}  }
class C{  public void createInspector(LocationWrapper wrapper,GUIState simulation){  Bag b=new Bag();  b.add(wrapper);  createInspectors(b,simulation);}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  @Override public int compareTo(FirewallRule rule){  return this.priority - rule.priority;}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(super.toString());  sb.append("NetscapeCertType [\n");  if (isSet(0)) {    sb.append("   SSL client\n");  }  if (isSet(1)) {    sb.append("   SSL server\n");  }  if (isSet(2)) {    sb.append("   S/MIME\n");  }  if (isSet(3)) {    sb.append("   Object Signing\n");  }  if (isSet(5)) {    sb.append("   SSL CA\n");  }  if (isSet(6)) {    sb.append("   S/MIME CA\n");  }  if (isSet(7)) {    sb.append("   Object Signing CA");  }  sb.append("]\n");  return sb.toString();}  }
class C{  public int processBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  processBytes(in,inOff,blockSize,out,outOff);  return blockSize;}  }
class C{  public IntersectionTypeExpression createIntersectionTypeExpression(){  IntersectionTypeExpressionImpl intersectionTypeExpression=new IntersectionTypeExpressionImpl();  return intersectionTypeExpression;}  }
class C{  public MatchQueryBuilder slop(int slop){  this.slop=slop;  return this;}  }
class C{  protected Object convertKey(Object key){  return (key == null ? NULL : key);}  }
class C{  public JCheckBoxMenuItem createJCheckBoxMenuItem(String name) throws MissingResourceException, ResourceFormatException, MissingListenerException {  return createJCheckBoxMenuItem(name,null);}  }
class C{  public void writeTo(DataOutput out) throws IOException {  out.writeInt(schemaId);  out.writeInt(ids.length);  for (  Integer id : ids)   out.writeInt(id);}  }
class C{  public AttributeValues applyIMHighlight(){  if (imHighlight != null) {    InputMethodHighlight hl=null;    if (imHighlight instanceof InputMethodHighlight) {      hl=(InputMethodHighlight)imHighlight;    } else {      hl=(InputMethodHighlight)((Annotation)imHighlight).getValue();    }    Map imStyles=hl.getStyle();    if (imStyles == null) {      Toolkit tk=Toolkit.getDefaultToolkit();      imStyles=tk.mapInputMethodHighlight(hl);    }    if (imStyles != null) {      return clone().merge(imStyles);    }  }  return this;}  }
class C{  @SuppressWarnings("unchecked") private void initDrawing(Drawing d){  d.setInputFormats((java.util.List<InputFormat>)Collections.EMPTY_LIST);  d.setOutputFormats((java.util.List<OutputFormat>)Collections.EMPTY_LIST);  DOMStorableInputOutputFormat ioFormat=new DOMStorableInputOutputFormat(new NetFactory());  d.addInputFormat(ioFormat);  d.addInputFormat(new ImageInputFormat(new ImageFigure()));  d.addInputFormat(new TextInputFormat(new TextFigure()));  d.addOutputFormat(ioFormat);  d.addOutputFormat(new ImageOutputFormat());}  }
class C{  public void reset(){  for (int i=0; i < buf.length; i++) {    buf[i]=0;  }  bufOff=0;  cipher.reset();}  }
class C{  private static void usage(){  System.out.println("Tank Test Startup Usage:");  System.out.println("java -cp agent-startup-pkg-1.0-all.jar com/intuit/tank/agent/AgentStartup <options>");  System.out.println("-controller=<controller_base_url>:  The url of the controller to get test info from");}  }
class C{  public static GasStack removeGas(ItemStack itemStack,Gas type,int amount){  if (itemStack != null && itemStack.getItem() instanceof IGasItem) {    IGasItem item=(IGasItem)itemStack.getItem();    if (type != null && item.getGas(itemStack) != null && item.getGas(itemStack).getGas() != type || !item.canProvideGas(itemStack,type)) {      return null;    }    return item.removeGas(itemStack,amount);  }  return null;}  }
class C{  public boolean hasEmailAddresses(){  return hasRepeatingExtension(Email.class);}  }
class C{  public void testMultiKeyTable() throws SQLException {  this.stmt.executeUpdate("DROP TABLE IF EXISTS MULTI_UPDATABLE");  this.stmt.executeUpdate("CREATE TABLE MULTI_UPDATABLE (field1 int NOT NULL, field2 int NOT NULL, PRIMARY KEY (field1, field2))");  Statement scrollableStmt=null;  try {    scrollableStmt=this.conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);    this.rs=scrollableStmt.executeQuery("SELECT field1 FROM MULTI_UPDATABLE");    try {      this.rs.moveToInsertRow();      fail("ResultSet.moveToInsertRow() should not succeed on query that does not select all primary keys");    } catch (    NotUpdatable noUpdate) {    }  }  finally {    if (scrollableStmt != null) {      try {        scrollableStmt.close();      } catch (      SQLException sqlEx) {      }    }    this.stmt.executeUpdate("DROP TABLE IF EXISTS MULTI_UPDATABLE");  }}  }
class C{  @Override protected EClass eStaticClass(){  return ImPackage.Literals.DELEGATING_METHOD_DECLARATION;}  }
class C{  @Override public int calculateBattleValue(boolean ignoreC3,boolean ignorePilot){  if (useManualBV) {    return manualBV;  }  return calculateBattleValue(ignoreC3,ignorePilot,false);}  }
class C{  public static void deleteDirectory(File indexDirectory) throws Exception {  boolean deleteTopDir=false;  for (  File file : indexDirectory.listFiles()) {    if (file.getName().equals(".gitignore")) {      continue;    }    if (file.isDirectory()) {      deleteDirectory(file);    } else {      deleteTopDir=file.delete();    }  }  if (deleteTopDir) {    indexDirectory.delete();  }}  }
class C{  public KeyValueProperty(final String key,final String value){  this.key=new SimpleStringProperty(key);  this.value=new SimpleStringProperty(value);}  }
class C{  public void parseCommandCsv(String filePath) throws IOException {  CSVReader reader=new CSVReader(new FileReader(filePath),';');  String[] line=reader.readNext();  while (line != null) {    log.info(CollectionUtils.arrayToString(line));    executeCmdLine(line);    line=reader.readNext();  }  reader.close();}  }
class C{  protected void layoutMinorAxis(int targetSpan,int axis,int[] offsets,int[] spans){  updateGrid();  int n=getRowCount();  for (int i=0; i < n; i++) {    RowView row=getRow(i);    row.layoutChanged(axis);  }  layoutColumns(targetSpan,columnOffsets,columnSpans,columnRequirements);  super.layoutMinorAxis(targetSpan,axis,offsets,spans);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"NEG");  translateAll(environment,instruction,"NEG",instructions);}  }
class C{  public void write(OutputStream output) throws IOException {  BitUtils.writeString(output,"GIF87a");  ScreenDescriptor sd=new ScreenDescriptor(this.imageWidth,this.imageHeight,this.numberOfColors);  sd.write(output);  output.write(this.allColors,0,this.allColors.length);  ImageDescriptor id=new ImageDescriptor(this.imageWidth,this.imageHeight,',');  id.write(output);  byte codesize=BitUtils.BitsNeeded(this.numberOfColors);  if (codesize == 1)   codesize++;  output.write(codesize);  LZWCompressor.LZWCompress(output,codesize,this.allPixels);  output.write(0);  id=new ImageDescriptor((byte)0,(byte)0,';');  id.write(output);  output.flush();}  }
class C{  public AviationZone(String sidc){  super(sidc);  this.setShowHostileIndicator(false);}  }
class C{  private void updateMaxSpeed(Location location){  if (startLocation != null) {    double velocity=(startLocation.distanceTo(location)) / ((location.getTime() - startLocation.getTime()) / (1000.0));    double timePoint=(double)(location.getTime() - getTimeStart()) / (1000.0 * 60 * 60);    DataPoint speed=new DataPoint(timePoint,velocity);    DataPoint distance=new DataPoint(timePoint,this.distance);    broadcast(speed,distance);    velocity=velocity * (6 * 6 / 10);    if (maxSpeed < velocity) {      maxSpeed=(float)velocity;      broadcast(null,maxSpeed,null,null);    }  }}  }
class C{  private static int pack8888(int r,int g,int b,int a){  return (r << 0) | (g << 8) | (b << 16)| (a << 24);}  }
class C{  void exitPlugin(PluginResult result){  if (result.getResultType() == PluginResultType.CONTINUE) {    if (log.isDebugEnabled()) {      log.debug("Switch " + getSwitchInfoString() + " app handshake plugin {} returned {}."+ " Proceeding normally..",this.plugin.getClass().getSimpleName(),result);    }    enterNextPlugin();  } else   if (result.getResultType() == PluginResultType.DISCONNECT) {    log.error("Switch " + getSwitchInfoString() + " app handshake plugin {} returned {}. "+ "Disconnecting switch.",this.plugin.getClass().getSimpleName(),result);    mainConnection.disconnect();  } else   if (result.getResultType() == PluginResultType.QUARANTINE) {    log.warn("Switch " + getSwitchInfoString() + " app handshake plugin {} returned {}. "+ "Putting switch into quarantine state.",this.plugin.getClass().getSimpleName(),result);    setState(new QuarantineState(result.getReason()));  }}  }
class C{  private void invokeMetering() throws BaseCollectionException {  _commInterface.collectStatisticsInformation(_accessProfile);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public IndexOutOfBoundsException(@Nullable String s){  super(s);}  }
class C{  public String sprintf(Object[] o){  Enumeration e=vFmt.elements();  ConversionSpecification cs=null;  char c=0;  int i=0;  StringBuffer sb=new StringBuffer();  while (e.hasMoreElements()) {    cs=(ConversionSpecification)e.nextElement();    c=cs.getConversionCharacter();    if (c == '\0')     sb.append(cs.getLiteral()); else     if (c == '%')     sb.append("%"); else {      if (cs.isPositionalSpecification()) {        i=cs.getArgumentPosition() - 1;        if (cs.isPositionalFieldWidth()) {          int ifw=cs.getArgumentPositionForFieldWidth() - 1;          cs.setFieldWidthWithArg(((Integer)o[ifw]).intValue());        }        if (cs.isPositionalPrecision()) {          int ipr=cs.getArgumentPositionForPrecision() - 1;          cs.setPrecisionWithArg(((Integer)o[ipr]).intValue());        }      } else {        if (cs.isVariableFieldWidth()) {          cs.setFieldWidthWithArg(((Integer)o[i]).intValue());          i++;        }        if (cs.isVariablePrecision()) {          cs.setPrecisionWithArg(((Integer)o[i]).intValue());          i++;        }      }      if (o[i] instanceof Byte)       sb.append(cs.internalsprintf(((Byte)o[i]).byteValue())); else       if (o[i] instanceof Short)       sb.append(cs.internalsprintf(((Short)o[i]).shortValue())); else       if (o[i] instanceof Integer)       sb.append(cs.internalsprintf(((Integer)o[i]).intValue())); else       if (o[i] instanceof Long)       sb.append(cs.internalsprintf(((Long)o[i]).longValue())); else       if (o[i] instanceof Float)       sb.append(cs.internalsprintf(((Float)o[i]).floatValue())); else       if (o[i] instanceof Double)       sb.append(cs.internalsprintf(((Double)o[i]).doubleValue())); else       if (o[i] instanceof Character)       sb.append(cs.internalsprintf(((Character)o[i]).charValue())); else       if (o[i] instanceof String)       sb.append(cs.internalsprintf((String)o[i])); else       sb.append(cs.internalsprintf(o[i]));      if (!cs.isPositionalSpecification())       i++;    }  }  return sb.toString();}  }
class C{  public boolean declaresMethodByName(String name){  checkLevel(SIGNATURES);  Iterator methodIt=methodIterator();  while (methodIt.hasNext()) {    SootMethod method=(SootMethod)methodIt.next();    if (method.getName().equals(name))     return true;  }  return false;}  }
class C{  private static int asInteger(long[] data,int n){  int t;  int cnt=0;  long seed=0;  if (n < 2)   throw new SketchesArgumentException("Given value of n must be &gt; 1.");  if (n > (1 << 30)) {    while (++cnt < 10000) {      long[] h=MurmurHash3.hash(data,seed);      t=(int)(h[0] & INT_MASK);      if (t < n) {        return t;      }      t=(int)((h[0] >>> 33));      if (t < n) {        return t;      }      t=(int)(h[1] & INT_MASK);      if (t < n) {        return t;      }      t=(int)((h[1] >>> 33));      if (t < n) {        return t;      }      seed+=PRIME;    }    throw new SketchesStateException("Internal Error: Failed to find integer &lt; n within 10000 iterations.");  }  long mask=ceilingPowerOf2(n) - 1;  while (++cnt < 10000) {    long[] h=MurmurHash3.hash(data,seed);    t=(int)(h[0] & mask);    if (t < n) {      return t;    }    t=(int)((h[0] >>> 33) & mask);    if (t < n) {      return t;    }    t=(int)(h[1] & mask);    if (t < n) {      return t;    }    t=(int)((h[1] >>> 33) & mask);    if (t < n) {      return t;    }    seed+=PRIME;  }  throw new SketchesStateException("Internal Error: Failed to find integer &lt; n within 10000 iterations.");}  }
class C{  public static void showSaveSheet(URIChooser chooser,Component parent,SheetListener listener){  chooser.setDialogType(JFileChooser.SAVE_DIALOG);  showSheet(chooser,parent,null,listener);}  }
class C{  public ConnectionConfig(jmri.jmrix.NetworkPortAdapter p){  super(p);}  }
class C{  public org.mozilla.javascript.Scriptable generateJStype(final String textString,final boolean returnAsString){  if (returnAsString) {    return cx.newObject(scope,"String",new Object[]{textString});  } else {    if (textString != null && !textString.isEmpty() && StringUtils.isNumber(textString) && !(textString.length() == 1 && textString.indexOf('.') != -1)) {      final Double retNum=Double.valueOf(textString);      return cx.newObject(scope,"Number",new Object[]{retNum});    } else {      return cx.newObject(scope,"String",new Object[]{textString});    }  }}  }
class C{  @Override protected void validate(){  failIf((this.value < 0 || this.value > 1.0),"Ratio must be a float between 0 and 1");}  }
class C{  public Multiset(int maxSize){  reg=new int[maxSize];  count=new int[maxSize];  size=0;}  }
class C{  static <T>LongStream makeLong(AbstractPipeline<?,Long,?> upstream){  return new OfLong(upstream);}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  public DecodeReturn reset(final String _data){  data=_data;  pos=0;  return this;}  }
class C{  public void addRule(Rule rule){  if (rule == null) {    throw new IllegalArgumentException("Rule to add cannot be null.");  } else {    rules.add(rule);  }}  }
class C{  public int size(){  return getArray().length;}  }
class C{  public String invertSelectionTipText(){  return "Set attribute selection mode. If false, only selected" + " attributes in the range will be worked on; if" + " true, only non-selected attributes will be processed.";}  }
class C{  private void saveLegendToFile(String strFileName){  File f=new File(strFileName);  try {    FileWriter fw=new FileWriter(f);    fw.write(this.fLegend.toString());    fw.close();  } catch (  IOException e) {    System.err.println("Could not wirte legend to file: " + strFileName);    e.printStackTrace();  }}  }
