class C{  public JAXBWriter(String contextPath){  super(contextPath);  outputFormat=new OutputFormat();}  }
class C{  public final void mulTransposeLeft(Matrix4f m1,Matrix4f m2){  if (this != m1 && this != m2) {    this.m00=m1.m00 * m2.m00 + m1.m10 * m2.m10 + m1.m20 * m2.m20 + m1.m30 * m2.m30;    this.m01=m1.m00 * m2.m01 + m1.m10 * m2.m11 + m1.m20 * m2.m21 + m1.m30 * m2.m31;    this.m02=m1.m00 * m2.m02 + m1.m10 * m2.m12 + m1.m20 * m2.m22 + m1.m30 * m2.m32;    this.m03=m1.m00 * m2.m03 + m1.m10 * m2.m13 + m1.m20 * m2.m23 + m1.m30 * m2.m33;    this.m10=m1.m01 * m2.m00 + m1.m11 * m2.m10 + m1.m21 * m2.m20 + m1.m31 * m2.m30;    this.m11=m1.m01 * m2.m01 + m1.m11 * m2.m11 + m1.m21 * m2.m21 + m1.m31 * m2.m31;    this.m12=m1.m01 * m2.m02 + m1.m11 * m2.m12 + m1.m21 * m2.m22 + m1.m31 * m2.m32;    this.m13=m1.m01 * m2.m03 + m1.m11 * m2.m13 + m1.m21 * m2.m23 + m1.m31 * m2.m33;    this.m20=m1.m02 * m2.m00 + m1.m12 * m2.m10 + m1.m22 * m2.m20 + m1.m32 * m2.m30;    this.m21=m1.m02 * m2.m01 + m1.m12 * m2.m11 + m1.m22 * m2.m21 + m1.m32 * m2.m31;    this.m22=m1.m02 * m2.m02 + m1.m12 * m2.m12 + m1.m22 * m2.m22 + m1.m32 * m2.m32;    this.m23=m1.m02 * m2.m03 + m1.m12 * m2.m13 + m1.m22 * m2.m23 + m1.m32 * m2.m33;    this.m30=m1.m03 * m2.m00 + m1.m13 * m2.m10 + m1.m23 * m2.m20 + m1.m33 * m2.m30;    this.m31=m1.m03 * m2.m01 + m1.m13 * m2.m11 + m1.m23 * m2.m21 + m1.m33 * m2.m31;    this.m32=m1.m03 * m2.m02 + m1.m13 * m2.m12 + m1.m23 * m2.m22 + m1.m33 * m2.m32;    this.m33=m1.m03 * m2.m03 + m1.m13 * m2.m13 + m1.m23 * m2.m23 + m1.m33 * m2.m33;  } else {    float m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33;    m00=m1.m00 * m2.m00 + m1.m10 * m2.m10 + m1.m20 * m2.m20 + m1.m30 * m2.m30;    m01=m1.m00 * m2.m01 + m1.m10 * m2.m11 + m1.m20 * m2.m21 + m1.m30 * m2.m31;    m02=m1.m00 * m2.m02 + m1.m10 * m2.m12 + m1.m20 * m2.m22 + m1.m30 * m2.m32;    m03=m1.m00 * m2.m03 + m1.m10 * m2.m13 + m1.m20 * m2.m23 + m1.m30 * m2.m33;    m10=m1.m01 * m2.m00 + m1.m11 * m2.m10 + m1.m21 * m2.m20 + m1.m31 * m2.m30;    m11=m1.m01 * m2.m01 + m1.m11 * m2.m11 + m1.m21 * m2.m21 + m1.m31 * m2.m31;    m12=m1.m01 * m2.m02 + m1.m11 * m2.m12 + m1.m21 * m2.m22 + m1.m31 * m2.m32;    m13=m1.m01 * m2.m03 + m1.m11 * m2.m13 + m1.m21 * m2.m23 + m1.m31 * m2.m33;    m20=m1.m02 * m2.m00 + m1.m12 * m2.m10 + m1.m22 * m2.m20 + m1.m32 * m2.m30;    m21=m1.m02 * m2.m01 + m1.m12 * m2.m11 + m1.m22 * m2.m21 + m1.m32 * m2.m31;    m22=m1.m02 * m2.m02 + m1.m12 * m2.m12 + m1.m22 * m2.m22 + m1.m32 * m2.m32;    m23=m1.m02 * m2.m03 + m1.m12 * m2.m13 + m1.m22 * m2.m23 + m1.m32 * m2.m33;    m30=m1.m03 * m2.m00 + m1.m13 * m2.m10 + m1.m23 * m2.m20 + m1.m33 * m2.m30;    m31=m1.m03 * m2.m01 + m1.m13 * m2.m11 + m1.m23 * m2.m21 + m1.m33 * m2.m31;    m32=m1.m03 * m2.m02 + m1.m13 * m2.m12 + m1.m23 * m2.m22 + m1.m33 * m2.m32;    m33=m1.m03 * m2.m03 + m1.m13 * m2.m13 + m1.m23 * m2.m23 + m1.m33 * m2.m33;    this.m00=m00;    this.m01=m01;    this.m02=m02;    this.m03=m03;    this.m10=m10;    this.m11=m11;    this.m12=m12;    this.m13=m13;    this.m20=m20;    this.m21=m21;    this.m22=m22;    this.m23=m23;    this.m30=m30;    this.m31=m31;    this.m32=m32;    this.m33=m33;  }}  }
class C{  public void loadUrl(String url,JSONObject props) throws JSONException {  LOG.d("App","App.loadUrl(" + url + ","+ props+ ")");  int wait=0;  boolean openExternal=false;  boolean clearHistory=false;  HashMap<String,Object> params=new HashMap<String,Object>();  if (props != null) {    JSONArray keys=props.names();    for (int i=0; i < keys.length(); i++) {      String key=keys.getString(i);      if (key.equals("wait")) {        wait=props.getInt(key);      } else       if (key.equalsIgnoreCase("openexternal")) {        openExternal=props.getBoolean(key);      } else       if (key.equalsIgnoreCase("clearhistory")) {        clearHistory=props.getBoolean(key);      } else {        Object value=props.get(key);        if (value == null) {        } else         if (value.getClass().equals(String.class)) {          params.put(key,(String)value);        } else         if (value.getClass().equals(Boolean.class)) {          params.put(key,(Boolean)value);        } else         if (value.getClass().equals(Integer.class)) {          params.put(key,(Integer)value);        }      }    }  }  if (wait > 0) {    try {synchronized (this) {        this.wait(wait);      }    } catch (    InterruptedException e) {      e.printStackTrace();    }  }  this.webView.showWebPage(url,openExternal,clearHistory,params);}  }
class C{  public static Expression attributeValue(TagData data,TagLibTag tag,String type,boolean parseExpression,boolean isNonName,Expression noExpression) throws TemplateException {  Expression expr;  try {    ExprTransformer transfomer=null;    if (parseExpression) {      transfomer=tag.getTagLib().getExprTransfomer();    } else {      if (data.getSimpleExprTransformer() == null) {        data.setSimpleExprTransformer(new SimpleExprTransformer('#'));      }      transfomer=data.getSimpleExprTransformer();    }    if (isNonName) {      int pos=data.srcCode.getPos();      try {        expr=transfomer.transform(data.factory,data.root,data.ep,data.tlibs,data.flibs,data.scriptTags,data.srcCode,data.settings);      } catch (      TemplateException ete) {        if (data.srcCode.getPos() == pos)         expr=noExpression; else         throw ete;      }    } else {      if (data.settings.handleUnQuotedAttrValueAsString)       expr=transfomer.transformAsString(data.factory,data.root,data.ep,data.tlibs,data.flibs,data.scriptTags,data.srcCode,data.settings,true); else       expr=transfomer.transform(data.factory,data.root,data.ep,data.tlibs,data.flibs,data.scriptTags,data.srcCode,data.settings);    }    if (type.length() > 0) {      expr=CastOther.toExpression(expr,type);    }  } catch (  TagLibException e) {    throw new TemplateException(data.srcCode,e);  }  return expr;}  }
class C{  public static boolean occupy(int waitMs){  if (occupiedUntil != null && occupiedUntil.after(new Date())) {    return false;  }  occupiedUntil=DateUtils.addMilliseconds(new Date(),waitMs);  return true;}  }
class C{  private boolean allowedToPrintToFile(){  try {    throwPrintToFile();    return true;  } catch (  SecurityException e) {    return false;  }}  }
class C{  public static Vector2 pow(Vector2 o,double power){  return new Vector2(Math.pow(o.x,power),Math.pow(o.z,power));}  }
class C{  @CanIgnoreReturnValue public Builder<C> addAll(RangeSet<C> ranges){  for (  Range<C> range : ranges.asRanges()) {    add(range);  }  return this;}  }
class C{  public String toString(){  return this.getClass().getName() + ": " + m_Streams.size();}  }
class C{  private void addExportGroup(Map<URI,RPExport> rpExports,ExportGroup exportGroup,URI volumeURI,URI storageURI){  if (exportGroup != null) {    RPExport rpExport=rpExports.get(exportGroup.getId());    if (rpExport == null) {      rpExport=new RPExport();      rpExport.setStorageSystem(storageURI);      rpExports.put(exportGroup.getId(),rpExport);    }    rpExport.getVolumes().add(volumeURI);  }}  }
class C{  private Object _deserialize(Element element) throws ConverterException {  String nodeName=element.getNodeName().toLowerCase();  if (nodeName.equals("null")) {    return null;  } else   if (nodeName.equals("string")) {    return _deserializeString(element);  } else   if (nodeName.equals("number")) {    try {      Node data=element.getFirstChild();      if (data == null)       return new Double(0);      return Caster.toDouble(data.getNodeValue());    } catch (    Exception e) {      throw toConverterException(e);    }  } else   if (nodeName.equals("boolean")) {    try {      return Caster.toBoolean(element.getAttribute("value"));    } catch (    PageException e) {      throw toConverterException(e);    }  } else   if (nodeName.equals("array")) {    return _deserializeArray(element);  } else   if (nodeName.equals("component") || nodeName.equals("class")) {    return _deserializeComponent(element);  } else   if (nodeName.equals("struct")) {    return _deserializeStruct(element);  } else   if (nodeName.equals("recordset")) {    return _deserializeQuery(element);  } else   if (nodeName.equalsIgnoreCase("dateTime")) {    try {      return DateCaster.toDateAdvanced(element.getFirstChild().getNodeValue(),timeZone);    } catch (    Exception e) {      throw toConverterException(e);    }  } else   throw new ConverterException("can't deserialize Element of type [" + nodeName + "] to a Object representation");}  }
class C{  private int countOccurrenceExtensions(List<Extension> extensions){  int count=0;  for (  Extension extension : extensions) {    if (extension.getRowType().equalsIgnoreCase(Constants.DWC_ROWTYPE_OCCURRENCE)) {      count++;    }  }  return count;}  }
class C{  private static DataStream<String> streamSource(BenchmarkConfig config,StreamExecutionEnvironment env){  RichParallelSourceFunction<String> source;  String sourceName;  if (config.useLocalEventGenerator) {    EventGeneratorSource eventGenerator=new EventGeneratorSource(config);    source=eventGenerator;    sourceName="EventGenerator";    Map<String,List<String>> campaigns=eventGenerator.getCampaigns();    RedisHelper redisHelper=new RedisHelper(config);    redisHelper.prepareRedis(campaigns);    redisHelper.writeCampaignFile(campaigns);  } else {    source=kafkaSource(config);    sourceName="Kafka";  }  return env.addSource(source,sourceName);}  }
class C{  public void addName(String nom,PShape shape){  if (parent != null) {    parent.addName(nom,shape);  } else {    if (nameTable == null) {      nameTable=new HashMap<String,PShape>();    }    nameTable.put(nom,shape);  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public byte[] receive(){  return null;}  }
class C{  public FireworkEffectType(String enumName,int enumId,int typeID){  super(enumName,enumId);  this.typeID=(byte)typeID;}  }
class C{  public static boolean start(RootDoc root) throws IOException {  return new ResourceDoclet().startDoc(root);}  }
class C{  private Pair<InferenceResult,InferenceResult> inferFromArguments(final AnnotatedTypeFactory typeFactory,final Set<AFConstraint> afArgumentConstraints,final Set<TypeVariable> targets){  Set<TUConstraint> tuArgConstraints=afToTuConstraints(afArgumentConstraints,targets);  addConstraintsBetweenTargets(tuArgConstraints,targets,false,typeFactory);  ConstraintMap argConstraints=constraintMapBuilder.build(targets,tuArgConstraints,typeFactory);  InferenceResult inferredFromArgEqualities=equalitiesSolver.solveEqualities(targets,argConstraints,typeFactory);  Set<TypeVariable> remainingTargets=inferredFromArgEqualities.getRemainingTargets(targets,true);  InferenceResult fromSupertypes=supertypesSolver.solveFromSupertypes(remainingTargets,argConstraints,typeFactory);  InferenceResult fromSubtypes=subtypesSolver.solveFromSubtypes(remainingTargets,argConstraints,typeFactory);  fromSupertypes.mergeSubordinate(fromSubtypes);  return Pair.of(inferredFromArgEqualities,fromSupertypes);}  }
class C{  public boolean isAvailable(){  Object oo=get_Value(COLUMNNAME_IsAvailable);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mCurrentColor);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  @Override public void close(){}  }
class C{  @Override public void relocate(){  int w=550, h=210;  int x=(this.getWidth() - w) / 2;  int y=(this.getHeight() - h) / 2;  executablePathLabel.setLocation(x,y);  sevenZipEnableBox.setLocation(x,y + 35);  sevenZipLabel.setLocation(x + 30,y + 35);  sevenZipPathField.setLocation(x + 160,y + 35);  sevenZipSearchButton.setLocation(x + 470,y + 35);}  }
class C{  private boolean betterParallel(boolean parallelAllowed,Operator operator){  return parallelAllowed && operator != null && Resources.getConcurrencyContext(operator).getParallelism() > 1 && ((long)numberOfRegularNominalAttributes + numberOfRegularNumericalAttributes) * numberOfExamples > THRESHOLD_PRODUCT_PARALLEL;}  }
class C{  boolean isBiometricUnlockEnabled(){  return mLockPatternUtils.usingBiometricWeak() && mLockPatternUtils.isBiometricWeakInstalled();}  }
class C{  boolean aboutEquals(float moduleSize,float i,float j){  if (Math.abs(i - getY()) <= moduleSize && Math.abs(j - getX()) <= moduleSize) {    float moduleSizeDiff=Math.abs(moduleSize - estimatedModuleSize);    return moduleSizeDiff <= 1.0f || moduleSizeDiff <= estimatedModuleSize;  }  return false;}  }
class C{  public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY){  if (mFlywheel && !mFinished) {    float oldVel=getCurrVelocity();    float dx=(float)(mFinalX - mStartX);    float dy=(float)(mFinalY - mStartY);    float hyp=(float)Math.hypot(dx,dy);    float ndx=dx / hyp;    float ndy=dy / hyp;    float oldVelocityX=ndx * oldVel;    float oldVelocityY=ndy * oldVel;    if (Math.signum(velocityX) == Math.signum(oldVelocityX) && Math.signum(velocityY) == Math.signum(oldVelocityY)) {      velocityX+=oldVelocityX;      velocityY+=oldVelocityY;    }  }  mMode=FLING_MODE;  mFinished=false;  float velocity=(float)Math.hypot(velocityX,velocityY);  mVelocity=velocity;  mDuration=getSplineFlingDuration(velocity);  mStartTime=AnimationUtils.currentAnimationTimeMillis();  mStartX=startX;  mStartY=startY;  float coeffX=velocity == 0 ? 1.0f : velocityX / velocity;  float coeffY=velocity == 0 ? 1.0f : velocityY / velocity;  double totalDistance=getSplineFlingDistance(velocity);  mDistance=(int)(totalDistance * Math.signum(velocity));  mMinX=minX;  mMaxX=maxX;  mMinY=minY;  mMaxY=maxY;  mFinalX=startX + (int)Math.round(totalDistance * coeffX);  mFinalX=Math.min(mFinalX,mMaxX);  mFinalX=Math.max(mFinalX,mMinX);  mFinalY=startY + (int)Math.round(totalDistance * coeffY);  mFinalY=Math.min(mFinalY,mMaxY);  mFinalY=Math.max(mFinalY,mMinY);}  }
class C{  private void pop(){  top=Math.max(-1,top - 1);  sendData();}  }
class C{  private void assertTagMatchesLocation(Element tag,MyTracksLocation location){  assertEquals(StringUtils.formatDateTimeIso8601(location.getTime()),getChildTextValue(tag,"Time"));  Element positionTag=getChildElement(tag,"Position");  assertEquals(Double.toString(location.getLatitude()),getChildTextValue(positionTag,"LatitudeDegrees"));  assertEquals(Double.toString(location.getLongitude()),getChildTextValue(positionTag,"LongitudeDegrees"));  assertEquals(Double.toString(location.getAltitude()),getChildTextValue(tag,"AltitudeMeters"));  assertTrue(location.getSensorDataSet() != null);  Sensor.SensorDataSet sds=location.getSensorDataSet();  List<Element> heartRate=getChildElements(tag,"HeartRateBpm",1);  assertEquals(Integer.toString(sds.getHeartRate().getValue()),getChildTextValue(heartRate.get(0),"Value"));  List<Element> extensions=getChildElements(tag,"Extensions",1);  List<Element> tpx=getChildElements(extensions.get(0),"TPX",1);  assertEquals(Integer.toString(sds.getCadence().getValue()),getChildTextValue(tpx.get(0),"RunCadence"));  assertEquals(Integer.toString(sds.getPower().getValue()),getChildTextValue(tpx.get(0),"Watts"));}  }
class C{  public void expand() throws MacroException {  for (  String name : macros.keySet()) {    if (isUsed(name))     macros.put(name,expandMacro(name,getDefinition(name)));  }}  }
class C{  public static Integer toInteger(Object o) throws PageException {  return Integer.valueOf(toIntValue(o));}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream bytes=new DerOutputStream();  DerOutputStream temp=new DerOutputStream();  temp.putInteger(BigInteger.valueOf(pvno));  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x00),temp);  temp=new DerOutputStream();  temp.putInteger(BigInteger.valueOf(msgType));  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),temp);  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x02),apOptions.asn1Encode());  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x03),ticket.asn1Encode());  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x04),authenticator.asn1Encode());  temp=new DerOutputStream();  temp.write(DerValue.tag_Sequence,bytes);  DerOutputStream apreq=new DerOutputStream();  apreq.write(DerValue.createTag(DerValue.TAG_APPLICATION,true,(byte)0x0E),temp);  return apreq.toByteArray();}  }
class C{  public static List<RoleSpecificPrice> determineRolePricesForSubscription(VOSubscriptionDetails subDetails){  if (subDetails == null) {    return null;  }  return determineRolePricesForPriceModel(subDetails.getPriceModel());}  }
class C{  @OnClick(R.id.info_icon_button) public void onInfoClick(View view){  Offer selectedOffer;  int position=getAdapterPosition();  int cardPosition=getCardPosition(position);  selectedOffer=offers.get(cardPosition);  goToInfo(selectedOffer,view.getContext());}  }
class C{  public static List<URI> toUris(List<? extends DataObject> dataObjects){  List<URI> uris=new ArrayList<>();  if (dataObjects != null) {    for (    DataObject dataObject : dataObjects) {      uris.add(dataObject.getId());    }  }  return uris;}  }
class C{  private boolean tryToNotifyReset(){  if ((mStatus == PTR_STATUS_COMPLETE || mStatus == PTR_STATUS_PREPARE) && mPtrIndicator.isInStartPosition()) {    if (mPtrUIHandlerHolder.hasHandler()) {      mPtrUIHandlerHolder.onUIReset(this);      if (DEBUG) {        PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIReset");      }    }    mStatus=PTR_STATUS_INIT;    clearFlag();    return true;  }  return false;}  }
class C{  public void clear(){  for (int i=0; i < size; i++) {    queue[i]=null;  }  this.size=0;  heapModified();}  }
class C{  public void updateUI(){  setUI((TaskPaneUI)LookAndFeelAddons.getUI(this,TaskPaneUI.class));}  }
class C{  public int assignIDs(int lastID){  int currLastID=lastID + 1;  m_id=currLastID;  if (m_sons != null) {    for (    LMTNode m_son : m_sons) {      currLastID=m_son.assignIDs(currLastID);    }  }  return currLastID;}  }
class C{  public boolean isIgnored(Object o,String displayName){  Enumeration<Object> enm;  Class<?> c;  Object element;  boolean result;  HashSet<String> list;  result=false;  enm=ignored();  while (enm.hasMoreElements()) {    element=enm.nextElement();    if (!(element instanceof Class)) {      continue;    }    c=(Class<?>)element;    if (c.isInstance(o)) {      list=m_Ignored.get(c);      result=list.contains(displayName);      break;    }  }  return result;}  }
class C{  public void sendGroupChangeEvent(Player player){  List<String> members=new LinkedList<String>(membersAndLastSeen.keySet());  RPEvent event=new GroupChangeEvent(leader,members,lootmode);  player.addEvent(event);  player.notifyWorldAboutChanges();}  }
class C{  public List<Node<T>> toList(){  List<Node<T>> list=new ArrayList<>();  if (rootNodes != null) {    for (    Node<T> rootNode : rootNodes) {      walk(rootNode,list);    }  }  return list;}  }
class C{  @Override public void reload() throws Exception {  String coreName=(String)evaluateXPath(query("/admin/cores?action=STATUS"),"//lst[@name='status']/lst[1]/str[@name='name']",XPathConstants.STRING);  String xml=checkResponseStatus("/admin/cores?action=RELOAD&core=" + coreName,"0");  if (null != xml) {    throw new RuntimeException("RELOAD failed:\n" + xml);  }}  }
class C{  public Bindings add(String property,JToggleButton c){  registerPropertyChangeListener(c);  return add(new JToggleButtonBinding(property,c,false));}  }
class C{  public final void nextGeneration(){  generation++;}  }
class C{  public void removeSamples(HashSet<String> names){  final ArrayList<String> samplesclone=new ArrayList<>(mSampleNames);  for (  final String sampleName : samplesclone) {    if (names.contains(sampleName)) {      mSampleNames.remove(sampleName);    }  }  mNameToColumn.clear();  for (int i=0; i < mSampleNames.size(); i++) {    mNameToColumn.put(mSampleNames.get(i),i);  }  final Iterator<SampleField> iterator=mSampleLines.iterator();  while (iterator.hasNext()) {    final SampleField sample=iterator.next();    if (names.contains(sample.getId())) {      iterator.remove();    }  }}  }
class C{  public static String inTypeName(int type){  String s="InUnknown(" + type + ")";switch (type) {case InSetMenuState:    s="InSetMenuState";  break;case InSetProperty:s="InSetProperty";break;case InExit:s="InExit";break;case InNewObject:s="InNewObject";break;case InRemoveObject:s="InRemoveObject";break;case InTrace:s="InTrace";break;case InErrorTarget:s="InErrorTarget";break;case InErrorExecLimit:s="InErrorExecLimit";break;case InErrorWith:s="InErrorWith";break;case InErrorProtoLimit:s="InErrorProtoLimit";break;case InSetVariable:s="InSetVariable";break;case InDeleteVariable:s="InDeleteVariable";break;case InParam:s="InParam";break;case InPlaceObject:s="InPlaceObject";break;case InScript:s="InScript";break;case InAskBreakpoints:s="InAskBreakpoints";break;case InBreakAt:s="InBreakAt";break;case InContinue:s="InContinue";break;case InSetLocalVariables:s="InSetLocalVariables";break;case InSetBreakpoint:s="InSetBreakpoint";break;case InNumScript:s="InNumScript";break;case InRemoveScript:s="InRemoveScript";break;case InRemoveBreakpoint:s="InRemoveBreakpoint";break;case InNotSynced:s="InNotSynced";break;case InErrorURLOpen:s="InErrorURLOpen";break;case InProcessTag:s="InProcessTag";break;case InVersion:s="InVersion";break;case InBreakAtExt:s="InBreakAtExt";break;case InSetVariable2:s="InSetVariable2";break;case InSquelch:s="InSquelch";break;case InGetVariable:s="InGetVariable";break;case InFrame:s="InFrame";break;case InOption:s="InOption";break;case InWatch:s="InWatch";break;case InGetSwf:s="InGetSwf";break;case InGetSwd:s="InGetSwd";break;case InErrorException:s="InErrorException";break;case InErrorStackUnderflow:s="InErrorStackUnderflow";break;case InErrorZeroDivide:s="InErrorZeroDivide";break;case InErrorScriptStuck:s="InErrorScriptStuck";break;case InBreakReason:s="InBreakReason";break;case InGetActions:s="InGetActions";break;case InSwfInfo:s="InSwfInfo";break;case InConstantPool:s="InConstantPool";break;case InErrorConsole:s="InErrorConsole";break;case InGetFncNames:s="InGetFncNames";break;case InCallFunction:s="InCallFunction";break;case InWatch2:s="InWatch2";break;case InPassAllExceptionsToDebugger:s="InPassAllExceptionsToDebugger";break;case InBinaryOp:s="InBinaryOp";break;case InIsolateCreate:s="InIsolateCreate";break;case InIsolateExit:s="InIsolateExit";break;case InIsolateEnumerate:s="InIsolateEnumerate";break;case InSetActiveIsolate:s="InSetActiveIsolate";break;case InIsolate:s="InIsolate";break;case InSetExceptionBreakpoint:s="InSetExceptionBreakpoint";break;case InRemoveExceptionBreakpoint:s="InRemoveExceptionBreakpoint";break;}return s;}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.CONDITIONAL_EXPRESSION__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public HashCodeBuilder append(boolean value){  iTotal=iTotal * iConstant + (value ? 0 : 1);  return this;}  }
class C{  public boolean isListFiles(){  return listFiles;}  }
class C{  protected boolean readPulseWidth(){  try {    pulseWidth=Integer.parseInt(pulseWidthField.getText());  } catch (  Exception e) {    statusText1.setText(rb.getString("Error18"));    statusText1.setVisible(true);    pulseWidth=500;    errorInStatus1=true;    resetNotes2();    return (false);  }  if (pulseWidth < 100) {    statusText1.setText(rb.getString("Error16"));    statusText1.setVisible(true);    pulseWidth=100;    pulseWidthField.setText(Integer.toString(pulseWidth));    errorInStatus1=true;    resetNotes2();    return (false);  }  if (pulseWidth > 10000) {    statusText1.setText(rb.getString("Error17"));    statusText1.setVisible(true);    pulseWidth=500;    pulseWidthField.setText(Integer.toString(pulseWidth));    errorInStatus1=true;    resetNotes2();    return (false);  }  return true;}  }
class C{  public static Pair<List<ReilBlock>,List<ReilEdge>> createGraphElements(final Collection<List<ReilInstruction>> instructionList,final Collection<IAddress> nativeJumpTargets){  final BasicBlockGenerator generator=new BasicBlockGenerator(instructionList,nativeJumpTargets);  final List<ReilBlock> blocks=generator.getBlocks();  final ArrayList<Triple<ReilBlock,IAddress,EdgeType>> edgepairs=generator.getEdges();  final List<ReilEdge> edges=new ArrayList<ReilEdge>();  for (  final Triple<ReilBlock,IAddress,EdgeType> p : edgepairs) {    final ReilBlock source=p.first();    final IAddress target=p.second();    final EdgeType edgeType=p.third();    if (target != null) {      for (      final ReilBlock block : blocks) {        for (        final ReilInstruction instruction : block.getInstructions()) {          if (target.equals(instruction.getAddress())) {            final ReilEdge edge=new ReilEdge(source,block,edgeType);            edges.add(edge);            ReilBlock.link(source,block,edge);          }        }      }    } else {      final int index=blocks.indexOf(source);      if (blocks.size() > (index + 1)) {        final ReilEdge edge=new ReilEdge(source,blocks.get(index + 1),edgeType);        edges.add(edge);        ReilBlock.link(source,blocks.get(index + 1),edge);      }    }  }  return new Pair<List<ReilBlock>,List<ReilEdge>>(blocks,edges);}  }
class C{  public ErrorSign(){  this.width=getOrigWidth();  this.height=getOrigHeight();}  }
class C{  public void test_swapLjava_util_ListII(){  LinkedList smallList=new LinkedList();  for (int i=0; i < 10; i++) {    smallList.add(objArray[i]);  }  try {    Collections.swap(smallList,-1,6);    fail("Expected IndexOutOfBoundsException for -1");  } catch (  IndexOutOfBoundsException e) {  }  try {    Collections.swap(smallList,6,-1);    fail("Expected IndexOutOfBoundsException for -1");  } catch (  IndexOutOfBoundsException e) {  }  try {    Collections.swap(smallList,6,11);    fail("Expected IndexOutOfBoundsException for 11");  } catch (  IndexOutOfBoundsException e) {  }  try {    Collections.swap(smallList,11,6);    fail("Expected IndexOutOfBoundsException for 11");  } catch (  IndexOutOfBoundsException e) {  }  try {    Collections.swap(null,1,1);    fail("Expected NullPointerException for null list parameter");  } catch (  NullPointerException e) {  }  Collections.swap(smallList,4,7);  assertEquals("Didn't Swap the element at position 4 ",new Integer(7),smallList.get(4));  assertEquals("Didn't Swap the element at position 7 ",new Integer(4),smallList.get(7));  for (int i=0; i < 10; i++) {    if (i != 4 && i != 7)     assertEquals("shouldn't have swapped the element at position " + i,new Integer(i),smallList.get(i));  }}  }
class C{  public RandomSampler(long n,long N,long low,RandomEngine randomGenerator){  if (n < 0)   throw new IllegalArgumentException("n must be >= 0");  if (n > N)   throw new IllegalArgumentException("n must by <= N");  this.my_n=n;  this.my_N=N;  this.my_low=low;  if (randomGenerator == null)   randomGenerator=cern.jet.random.AbstractDistribution.makeDefaultGenerator();  this.my_RandomGenerator=randomGenerator;}  }
class C{  @RequestMapping(value=EMR_CLUSTER_DEFINITIONS_URI_PREFIX + "/namespaces/{namespace}/emrClusterDefinitionNames/{emrClusterDefinitionName}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_EMR_CLUSTER_DEFINITIONS_DELETE) public EmrClusterDefinitionInformation deleteEmrClusterDefinition(@PathVariable("namespace") String namespace,@PathVariable("emrClusterDefinitionName") String emrClusterDefinitionName) throws Exception {  return emrClusterDefinitionService.deleteEmrClusterDefinition(new EmrClusterDefinitionKey(namespace,emrClusterDefinitionName));}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  lock();  try {    s.defaultWriteObject();  }  finally {    unlock();  }}  }
class C{  public T caseScript(Script object){  return null;}  }
class C{  public static ConfigurationException createConfigurationException(final ErrorKeys errorId,final String message){  return new ConfigurationException(errorId.toString() + ":\r\n" + message);}  }
class C{  public CustomSwitchPreference(Context context){  super(context,null);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (stateConfigurationIdx: ");  result.append(stateConfigurationIdx);  result.append(')');  return result.toString();}  }
class C{  @Override public boolean onDragEvent(DragEvent event){  boolean result=false;switch (event.getAction()) {case DragEvent.ACTION_DRAG_STARTED:{      Log.i(TAG,"Drag started, event=" + event);      mDragInProgress=true;      mAcceptsDrag=result=true;      if (mAcceptsDrag) {        invalidate();      }    }  break;case DragEvent.ACTION_DRAG_ENDED:{  Log.i(TAG,"Drag ended.");  if (mAcceptsDrag) {    invalidate();  }  mDragInProgress=false;  mHovering=false;}break;case DragEvent.ACTION_DRAG_LOCATION:{Log.i(TAG,"... seeing drag locations ...");result=mAcceptsDrag;}break;case DragEvent.ACTION_DROP:{Log.i(TAG,"Got a drop! dot=" + this + " event="+ event);if (mAnrType == ANR_DROP) {sleepSixSeconds();}processDrop(event);result=true;}break;case DragEvent.ACTION_DRAG_ENTERED:{Log.i(TAG,"Entered dot @ " + this);mHovering=true;invalidate();}break;case DragEvent.ACTION_DRAG_EXITED:{Log.i(TAG,"Exited dot @ " + this);mHovering=false;invalidate();}break;default :Log.i(TAG,"other drag event: " + event);result=mAcceptsDrag;break;}return result;}  }
class C{  public void testPolygonLine(){  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("at least 4 polygon points required"));}  }
class C{  @Override public void update(SimulationThread simulationThread){  if (simulationThread.isCanceled()) {    frame.setStatus("Task canceled.");    isPrepared=false;  } else   if (frame.simulationPaused()) {    frame.setStatus("Task paused.");  } else {    StringBuffer statusMsg=new StringBuffer();    statusMsg.append("Task completed");    List<Agent> agents=env.getAgents();    if (agents.size() == 1) {      Double travelDistance=env.getAgentTravelDistance(agents.get(0));      if (travelDistance != null) {        DecimalFormat f=new DecimalFormat("#0.0");        statusMsg.append("; travel distance: " + f.format(travelDistance) + "km");      }    }    statusMsg.append(".");    frame.setStatus(statusMsg.toString());  }}  }
class C{  public ECEFPoint(){}  }
class C{  private void refreshAttributes(){  mbeanAttributes.refreshAttributes();}  }
class C{  public int size(){  return 5;}  }
class C{  private void advanceCompilationState(CompilationUnit unit){  int state=getCompileState(unit);  assert state < STATE_IMPLEMENTATION_GENERATED : "FXGCompiler advanceState called with state == " + state;  setCompileState(unit,state + 1);}  }
class C{  static final int fromType(String type,ConstantPool pool){  if (type.length() == 1) {switch (type.charAt(0)) {case 'B':case 'C':case 'S':case 'Z':case 'I':      return INTEGER;case 'D':    return DOUBLE;case 'F':  return FLOAT;case 'J':return LONG;default :throw new IllegalArgumentException("bad type");}}return TypeInfo.OBJECT(type,pool);}  }
class C{  @Override public void printStackTrace(PrintStream ps){  super.printStackTrace(ps);  if (nested != null) {    nested.printStackTrace(ps);  }}  }
class C{  protected static void printUsage(){  System.out.println("Usage: " + PropsUtils.class.getName() + " <read|find> <props>");  System.out.println("Use uppercase of read/find to enable debug output");  System.out.println();  System.out.println("Examples:");  System.out.println("- read");  System.out.println("  " + PropsUtils.class.getName() + " read meka/gui/goe/MekaEditors.props");  System.out.println("- find");  System.out.println("  " + PropsUtils.class.getName() + " find meka/gui/goe/MekaEditors.props");  System.out.println();}  }
class C{  @Override public void run(){  amIActive=true;  String DEMHeader=null;  String watershedHeader=null;  String outputHeader=null;  int progress=0;  double z=0;  int row, col;  int rows=0;  int cols=0;  int i;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      DEMHeader=args[i];    } else     if (i == 1) {      watershedHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((DEMHeader == null) || (watershedHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(DEMHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    double DEM_noData=DEM.getNoDataValue();    WhiteboxRaster watersheds=new WhiteboxRaster(watershedHeader,"r");    if (watersheds.getNumberRows() != rows || watersheds.getNumberColumns() != cols) {      showFeedback("The input images must be the same dimension, i.e. number of " + "rows and columns.");      return;    }    double watersheds_noData=watersheds.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",DEMHeader,WhiteboxRaster.DataType.FLOAT,DEM_noData,0);    output.setPreferredPalette("spectrum.pal");    int minWatershedVal=9999999;    int maxWatershedVal=-9999999;    double[] watershedData;    updateProgress("Loop 1 of 3",0);    for (row=0; row < rows; row++) {      watershedData=watersheds.getRowValues(row);      for (col=0; col < cols; col++) {        if (watershedData[col] != watersheds_noData && watershedData[col] > 0) {          if (watershedData[col] < minWatershedVal) {            minWatershedVal=(int)watershedData[col];          }          if (watershedData[col] > maxWatershedVal) {            maxWatershedVal=(int)watershedData[col];          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 3",progress);    }    int numWatersheds=maxWatershedVal - minWatershedVal + 1;    double[][] elevations=new double[3][numWatersheds];    for (i=0; i < numWatersheds; i++) {      elevations[0][i]=9999999;      elevations[1][i]=-9999999;    }    double[] data;    int watershedVal;    updateProgress("Loop 2 of 3",0);    for (row=0; row < rows; row++) {      watershedData=watersheds.getRowValues(row);      data=DEM.getRowValues(row);      for (col=0; col < cols; col++) {        if (watershedData[col] != watersheds_noData && watershedData[col] > 0) {          watershedVal=(int)watershedData[col];          z=data[col];          if (z != DEM_noData) {            if (z < elevations[0][watershedVal - minWatershedVal]) {              elevations[0][watershedVal - minWatershedVal]=z;            }            if (z > elevations[1][watershedVal - minWatershedVal]) {              elevations[1][watershedVal - minWatershedVal]=z;            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 2 of 3",progress);    }    for (i=0; i < numWatersheds; i++) {      elevations[2][i]=elevations[1][i] - elevations[0][i];    }    updateProgress("Loop 3 of 3",0);    for (row=0; row < rows; row++) {      watershedData=watersheds.getRowValues(row);      data=DEM.getRowValues(row);      for (col=0; col < cols; col++) {        if (watershedData[col] != watersheds_noData && watershedData[col] > 0) {          watershedVal=(int)watershedData[col];          z=data[col];          if (z != DEM_noData) {            i=watershedVal - minWatershedVal;            output.setValue(row,col,(z - elevations[0][i]) / elevations[2][i] * 100);          } else {            output.setValue(row,col,DEM_noData);          }        } else {          output.setValue(row,col,DEM_noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 3 of 3",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    watersheds.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void testSimpleDirectData() throws IOException, RDFParseException, RepositoryException {  final URL n3=TestGOM.class.getResource("testgom.n3");  ((IGOMProxy)m_delegate).load(n3,RDFFormat.N3);  final ValueFactory vf=om.getValueFactory();  final URI s=vf.createURI("gpo:#root");  final URI rootAttr=vf.createURI("attr:/root");  om.getGPO(s).getValue(rootAttr);  final URI rootId=(URI)om.getGPO(s).getValue(rootAttr);  final IGPO rootGPO=om.getGPO(rootId);  if (log.isInfoEnabled()) {    log.info("--------\n" + rootGPO.pp() + "\n"+ rootGPO.getType().pp()+ "\n"+ rootGPO.getType().getStatements());  }  final URI typeName=vf.createURI("attr:/type#name");  assertTrue("Company".equals(rootGPO.getType().getValue(typeName).stringValue()));  final URI worksFor=vf.createURI("attr:/employee#worksFor");  final ILinkSet linksIn=rootGPO.getLinksIn(worksFor);  final Iterator<IGPO> workers=linksIn.iterator();  while (workers.hasNext()) {    final IGPO tmp=workers.next();    if (log.isInfoEnabled())     log.info("Returned: " + tmp.pp());  }}  }
class C{  public final void testIPv6AddressWithCharSequenceParameter(){  assertNotNull(Validators.iPv6Address("foo"));}  }
class C{  public boolean isNew(){  return getAge() < 2 * 60 || getAtk() < 15 || getDef() < 15 || getLevel() < 5;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == Literal.class) {switch (baseOperationID) {case N4JSPackage.LITERAL___GET_VALUE_AS_STRING:      return N4JSPackage.NUMERIC_LITERAL___GET_VALUE_AS_STRING;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  static void putTarget(int typeRef,TypePath typePath,ByteVector out){switch (typeRef >>> 24) {case 0x00:case 0x01:case 0x16:    out.putShort(typeRef >>> 16);  break;case 0x13:case 0x14:case 0x15:out.putByte(typeRef >>> 24);break;case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:out.putInt(typeRef);break;default :out.put12(typeRef >>> 24,(typeRef & 0xFFFF00) >> 8);break;}if (typePath == null) {out.putByte(0);} else {int length=typePath.b[typePath.offset] * 2 + 1;out.putByteArray(typePath.b,typePath.offset,length);}}  }
class C{  public void renderWispParticles(VertexBuffer vertexBuffer,TileEntityWisp tileEntity,double x,double y,double z,float partialTicks){  List<Object> particleList=tileEntity.particleList;  Entity viewer=Minecraft.getMinecraft().getRenderViewEntity();  Particle.interpPosX=viewer.lastTickPosX + (viewer.posX - viewer.lastTickPosX) * (double)partialTicks;  Particle.interpPosY=viewer.lastTickPosY + (viewer.posY - viewer.lastTickPosY) * (double)partialTicks;  Particle.interpPosZ=viewer.lastTickPosZ + (viewer.posZ - viewer.lastTickPosZ) * (double)partialTicks;  Particle.field_190016_K=viewer.getLook(partialTicks);  for (  Object particle : particleList) {    ParticleWisp wisp=(ParticleWisp)particle;    wisp.renderParticle(vertexBuffer,viewer,partialTicks,ActiveRenderInfo.getRotationX(),ActiveRenderInfo.getRotationXZ(),ActiveRenderInfo.getRotationZ(),ActiveRenderInfo.getRotationYZ(),ActiveRenderInfo.getRotationXY());  }}  }
class C{  public void endVisit(PackageDeclaration node){}  }
class C{  public LocalLogWriter(int level,PrintStream logWriter){  super(level,logWriter);}  }
class C{  protected Attribute(final String type){  this.type=type;}  }
class C{  public void putEncodeable(String fieldName,IEncodeable s) throws EncodingException {  Class<? extends IEncodeable> clazz=s.getClass();  ctx.getEncodeableSerializer().putEncodeable(clazz,s,this);}  }
class C{  private int findRunLength(java.util.ArrayList currTrans,int offset){  int lastOffset=((Integer)currTrans.get(offset)).intValue();  int j=offset + 1;  for (; j < currTrans.size(); j++) {    int thisOffset=((Integer)currTrans.get(j)).intValue();    if (thisOffset != lastOffset + 1) {      break;    }    lastOffset=thisOffset;  }  return j - offset;}  }
class C{  protected void notifyScrollingListenersAboutEnd(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingFinished(this);  }}  }
class C{  public static <S extends HasViewStateChangedHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    ViewStateChangedEvent event=new ViewStateChangedEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  @Override public double[] distributionForInstance(Instance instance) throws Exception {  instance=normalizeInstance(instance);  return m_BayesNetEstimator.distributionForInstance(this,instance);}  }
class C{  public MasterProtocol(final UrlParser urlParser,final ReentrantLock lock){  super(urlParser,lock);}  }
class C{  public boolean isEmpty(){  return first == null;}  }
class C{  public void nofityChange(){  if (observer != null) {    observer.onChange();  }}  }
class C{  @Override public void onServiceConnected(ComponentName name,IBinder service){  this.binder=(IRCBinder)service;  if (server.getStatus() == Status.PRE_CONNECTING && getIntent().hasExtra("connect")) {    server.setStatus(Status.CONNECTING);    binder.connect(server);  } else {    onStatusUpdate();  }}  }
class C{  private Configuration(){}  }
class C{  public void queueThread(WaitingThread wt){  if (wt == null) {    throw new IllegalArgumentException("Waiting thread must not be null.");  }  this.waitingThreads.add(wt);}  }
class C{  public static boolean isValidName(String name){  if (name.length() == 0)   return false;  char ch=name.charAt(0);  if (isNameStart(ch) == false)   return false;  for (int i=1; i < name.length(); i++) {    ch=name.charAt(i);    if (isName(ch) == false) {      return false;    }  }  return true;}  }
class C{  public long convertUTMToGeodetic(long Zone,String Hemisphere,double Easting,double Northing){  long Error_Code=UTM_NO_ERROR;  double Origin_Latitude=0;  double False_Easting=500000;  double False_Northing=0;  double Scale=0.9996;  if ((Zone < 1) || (Zone > 60))   Error_Code|=UTM_ZONE_ERROR;  if (!Hemisphere.equals(AVKey.SOUTH) && !Hemisphere.equals(AVKey.NORTH))   Error_Code|=UTM_HEMISPHERE_ERROR;  if ((Northing < MIN_NORTHING) || (Northing > MAX_NORTHING))   Error_Code|=UTM_NORTHING_ERROR;  if (Error_Code == UTM_NO_ERROR) {    if (Zone >= 31)     Central_Meridian=((6 * Zone - 183) * PI / 180.0); else     Central_Meridian=((6 * Zone + 177) * PI / 180.0);    if (Hemisphere.equals(AVKey.SOUTH))     False_Northing=10000000;    try {      TMCoord TM=TMCoord.fromTM(Easting,Northing,Angle.fromRadians(Origin_Latitude),Angle.fromRadians(Central_Meridian),False_Easting,False_Northing,Scale);      Latitude=TM.getLatitude().radians;      Longitude=TM.getLongitude().radians;      if ((Latitude < MIN_LAT) || (Latitude > MAX_LAT)) {        Error_Code|=UTM_NORTHING_ERROR;      }    } catch (    Exception e) {      Error_Code=UTM_TM_ERROR;    }  }  return (Error_Code);}  }
class C{  public RangeQueryBuilder gte(long from){  this.from=from;  this.includeLower=true;  return this;}  }
class C{  public int size(){  return count;}  }
class C{  public DefaultCategoryDataset(){  this.data=new DefaultKeyedValues2D();}  }
class C{  private void decryptBlock(byte[] src,int srcIndex,byte[] dst,int dstIndex){  int xl=BytesTo32bits(src,srcIndex);  int xr=BytesTo32bits(src,srcIndex + 4);  xl^=P[ROUNDS + 1];  for (int i=ROUNDS; i > 0; i-=2) {    xr^=F(xl) ^ P[i];    xl^=F(xr) ^ P[i - 1];  }  xr^=P[0];  Bits32ToBytes(xr,dst,dstIndex);  Bits32ToBytes(xl,dst,dstIndex + 4);}  }
class C{  public static boolean isLogger(Context c){  SharedPreferences pref=c.getSharedPreferences(APP_PREF_NAME,Context.MODE_PRIVATE);  return pref.getBoolean("logger",c.getString(R.string.logger).equals("true"));}  }
class C{  public DoubleVector subvector(int i0,int i1){  DoubleVector v=new DoubleVector(i1 - i0 + 1);  v.set(0,i1 - i0,this,i0);  return v;}  }
class C{  public T caseN4EnumDeclaration(N4EnumDeclaration object){  return null;}  }
class C{  public static boolean wordMatches(String source,String match){  return wordMatches(false,source,match);}  }
class C{  public static char combine2bytesToU16(byte high,byte low){  char highU8=convertByte2Uint8(high);  char lowU8=convertByte2Uint8(low);  return (char)(highU8 << 8 | lowU8);}  }
class C{  public int dim(){  return sort[pos];}  }
class C{  public Hypervolume(Problem problem,NondominatedPopulation referenceSet,double[] referencePoint){  super(problem,referenceSet,referencePoint);}  }
class C{  public static Map<String,Object> createDataResource(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=createDataResourceMethod(dctx,context);  return result;}  }
class C{  private static void dumpHeap(String filename) throws Exception {  System.gc();  System.runFinalization();  Thread.sleep(1000);  String state=Environment.getExternalStorageState();  if (Environment.MEDIA_MOUNTED.equals(state)) {    String extDir=Environment.getExternalStorageDirectory().toString();    if ((new File(extDir + "/" + filename+ ".dump")).exists()) {      (new File(extDir + "/" + filename+ ".dump")).delete();    }    FileOutputStream ost=new FileOutputStream(extDir + "/" + filename+ ".dump");    Debug.dumpNativeHeap(ost.getFD());    ost.close();  }}  }
class C{  @Override public boolean updatesAreDetected(int type){  debugCodeCall("updatesAreDetected",type);  return false;}  }
class C{  public static double quantile(double val,double rate){  return -Math.log(1 - val) / rate;}  }
class C{  public void drop(DropTargetDropEvent dtde){}  }
class C{  public CCSprite createSprite(String name){  CCSpriteFrame frame=spriteFrames.get(name);  return CCSprite.sprite(frame);}  }
class C{  public static void writeStats(Map<String,Double> stats,String filename) throws IOException {  BufferedWriter writer=new BufferedWriter(new FileWriter(filename));  writer.write("property\tvalue");  writer.newLine();  for (  Entry<String,Double> entry : stats.entrySet()) {    writer.write(entry.getKey());    writer.write("\t");    writer.write(entry.getValue().toString());    writer.newLine();  }  writer.close();}  }
class C{  public PdxConfigurationException(String message){  super(message);}  }
class C{  public GridCloseableIterator<IgniteBiTuple<byte[],byte[]>> iterator(@Nullable String spaceName,int part){  GridOffHeapPartitionedMap m=offheap(spaceName);  return m == null ? new GridEmptyCloseableIterator<IgniteBiTuple<byte[],byte[]>>() : m.iterator(part);}  }
class C{  public void testTransportableTablespaces() throws Exception {  if (versionMeetsMinimum(5,6,8)) {    String tmpdir=null;    String uuid=null;    this.rs=this.stmt.executeQuery("SHOW VARIABLES WHERE Variable_name='tmpdir' or Variable_name='innodb_file_per_table' or Variable_name='server_uuid'");    while (this.rs.next()) {      if ("tmpdir".equals(this.rs.getString(1))) {        tmpdir=this.rs.getString(2);        if (tmpdir.endsWith(File.separator)) {          tmpdir=tmpdir.substring(0,tmpdir.length() - File.separator.length());        }      } else       if ("innodb_file_per_table".equals(this.rs.getString(1))) {        if (!this.rs.getString(2).equals("ON")) {          fail("You need to set innodb_file_per_table to ON before running this test!");        }      } else       if ("server_uuid".equals(this.rs.getString(1))) {        uuid=this.rs.getString(2);      }    }    if (uuid != null) {      tmpdir=tmpdir + File.separator + uuid;    }    if (File.separatorChar == '\\') {      tmpdir=StringUtils.escapeQuote(tmpdir,File.separator);    }    Properties props=new NonRegisteringDriver().parseURL(dbUrl,null);    String dbname=props.getProperty(NonRegisteringDriver.DBNAME_PROPERTY_KEY);    if (dbname == null) {      assertTrue("No database selected",false);    }    dropTable("testTransportableTablespaces1");    dropTable("testTransportableTablespaces2");    File checkTableSpaceFile1=new File(tmpdir + File.separator + dbname+ File.separator+ "testTransportableTablespaces1.ibd");    if (checkTableSpaceFile1.exists()) {      checkTableSpaceFile1.delete();    }    File checkTableSpaceFile2=new File(tmpdir + File.separator + dbname+ File.separator+ "testTransportableTablespaces2.ibd");    if (checkTableSpaceFile2.exists()) {      checkTableSpaceFile2.delete();    }    try {      createTable("testTransportableTablespaces1","(x VARCHAR(10) NOT NULL DEFAULT '') DATA DIRECTORY = '" + tmpdir + "'");      createTable("testTransportableTablespaces2","(x VARCHAR(10) NOT NULL DEFAULT '') DATA DIRECTORY = '" + tmpdir + "'");      this.stmt.executeUpdate("FLUSH TABLES testTransportableTablespaces1, testTransportableTablespaces2 FOR EXPORT");      this.stmt.executeUpdate("UNLOCK TABLES");      File tempFile=File.createTempFile("testTransportableTablespaces1","tmp");      tempFile.deleteOnExit();      String tableSpacePath=tmpdir + File.separator + dbname+ File.separator+ "testTransportableTablespaces1.ibd";      File tableSpaceFile=new File(tableSpacePath);      copyFile(tableSpaceFile,tempFile);      this.stmt.executeUpdate("ALTER TABLE testTransportableTablespaces1 DISCARD TABLESPACE");      tableSpaceFile=new File(tableSpacePath);      copyFile(tempFile,tableSpaceFile);      this.stmt.executeUpdate("ALTER TABLE testTransportableTablespaces1 IMPORT TABLESPACE");      this.pstmt=this.conn.prepareStatement("FLUSH TABLES testTransportableTablespaces1, testTransportableTablespaces2 FOR EXPORT");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.pstmt=this.conn.prepareStatement("ALTER TABLE testTransportableTablespaces1 DISCARD TABLESPACE");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);      this.pstmt=this.conn.prepareStatement("ALTER TABLE testTransportableTablespaces1 IMPORT TABLESPACE");      assertTrue(this.pstmt instanceof com.mysql.jdbc.PreparedStatement);    }  finally {      dropTable("testTransportableTablespaces1");      dropTable("testTransportableTablespaces2");    }  }}  }
class C{  public static void showContactOnMap(Context ctx,ContactId contact){  Set<ContactId> set=new HashSet<>();  set.add(contact);  showContactsOnMap(ctx,set);}  }
class C{  public int[] intersect(int[] nums1,int[] nums2){  Map<Integer,Integer> count=new HashMap<>();  for (  int n : nums1) {    count.put(n,count.containsKey(n) ? count.get(n) + 1 : 1);  }  List<Integer> intersections=new ArrayList<>(Math.min(nums1.length,nums2.length));  for (  int n : nums2) {    if (count.containsKey(n)) {      intersections.add(n);      count.put(n,count.get(n) - 1);      if (count.get(n) == 0)       count.remove(n);    }  }  int[] res=new int[intersections.size()];  for (int i=0; i < intersections.size(); i++) {    res[i]=intersections.get(i);  }  return res;}  }
class C{  public Cot(){  super("cot",1);}  }
class C{  public boolean isAudited(){  Object oo=get_Value(COLUMNNAME_IsAudited);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  WebAppInterface(Context c){  mContext=c;}  }
class C{  public void clear(){  clear(k());}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z1 <= z2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            if (z1 <= constant2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row <= rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            if (z2 < constant1) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static boolean deleteDirectory(String directory) throws IOException {  return deleteDirectory(directory,false);}  }
class C{  private boolean equalCharSequences(CharSequence s1,CharSequence s2){  int len1=s1.length();  if (len1 != s2.length())   return false;  for (int i=len1; --i >= 0; ) {    if (s1.charAt(i) != s2.charAt(i)) {      return false;    }  }  return true;}  }
class C{  private void searchForClusterExport(String clusterId,List<SearchResultResourceRep> resRepLists,boolean selfOnly,boolean authorized){  URIQueryResultList egUris=new URIQueryResultList();  Set<URI> resultUris=new HashSet<URI>();  List<ExportGroup> exportGroups=new ArrayList<ExportGroup>();  if (selfOnly) {    exportGroups=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,ExportGroup.class,AlternateIdConstraint.Factory.getConstraint(ExportGroup.class,"clusters",clusterId));  } else {    List<NamedElement> hostElements=getModelClient().hosts().findIdsByCluster(URI.create(clusterId));    List<URI> hosts=toURIs(hostElements);    for (    URI hUri : hosts) {      List<NamedElement> initiatorElements=getModelClient().initiators().findIdsByHost(hUri);      List<URI> initiators=toURIs(initiatorElements);      for (      URI iUri : initiators) {        _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getExportGroupInitiatorConstraint(iUri.toString()),egUris);        for (        URI eUri : egUris) {          resultUris.add(eUri);        }      }    }    exportGroups=_dbClient.queryObject(ExportGroup.class,resultUris,true);  }  buildExportGroupSearchResponse(exportGroups,resRepLists,selfOnly,ExportGroupType.Cluster.name(),authorized);}  }
class C{  public synchronized void add(Statement s){  Operation o=(operations.isEmpty()) ? null : operations.get(operations.size() - 1);  if ((o == null) || !(o instanceof AddRemoveOperation)) {    o=new AddRemoveOperation();    operations.add(o);  }  AddRemoveOperation aro=(AddRemoveOperation)o;  aro.add(new ContextAwareStatementImpl(s));}  }
class C{  public short readShort(){  return scanner.nextShort();}  }
class C{  public boolean isNotSpurious(int minClSize){  return !children.isEmpty() || newids.size() >= minClSize;}  }
class C{  public static void openGamesWindowItem(Connector connector){  RaptorWindowItem[] items=Raptor.getInstance().getWindow().getWindowItems(GamesWindowItem.class);  boolean openNewWindow=true;  for (  RaptorWindowItem item : items) {    GamesWindowItem gameWindowsItem=(GamesWindowItem)item;    if (gameWindowsItem.getConnector() == connector) {      Raptor.getInstance().getWindow().forceFocus(item);      openNewWindow=false;      break;    }  }  if (openNewWindow) {    Raptor.getInstance().getWindow().addRaptorWindowItem(new GamesWindowItem(connector));  }}  }
class C{  public URI findType(Class<?> role){  return types.get(role);}  }
class C{  public Address plus(Offset offset){  return new Address(value.plus(offset.toLong()));}  }
class C{  public DomainObjectException(){  super();}  }
class C{  public void updateInt(String columnName,int x) throws SQLException {  updateInt(findColumn(columnName),x);}  }
class C{  public void compose(StylesheetRoot sroot){  if (DEBUG) {    System.out.println("Before wildcard insert...");    dumpAssociationTables();  }  if (null != m_wildCardPatterns) {    Enumeration associations=m_patternTable.elements();    while (associations.hasMoreElements()) {      TemplateSubPatternAssociation head=(TemplateSubPatternAssociation)associations.nextElement();      TemplateSubPatternAssociation wild=m_wildCardPatterns;      while (null != wild) {        try {          head=insertAssociationIntoList(head,(TemplateSubPatternAssociation)wild.clone(),true);        } catch (        CloneNotSupportedException cnse) {        }        wild=wild.getNext();      }    }  }  if (DEBUG) {    System.out.println("After wildcard insert...");    dumpAssociationTables();  }}  }
class C{  public boolean isRelatedToIterator(Operand op){  return isFixedDistanceFromPhiIterator(op);}  }
class C{  public boolean isFill(){  return fill;}  }
class C{  public static boolean intersectLineLine(float ps1x,float ps1y,float pe1x,float pe1y,float ps2x,float ps2y,float pe2x,float pe2y,Vector2f p){  float d1x=ps1x - pe1x;  float d1y=pe1y - ps1y;  float d1ps1=d1y * ps1x + d1x * ps1y;  float d2x=ps2x - pe2x;  float d2y=pe2y - ps2y;  float d2ps2=d2y * ps2x + d2x * ps2y;  float det=d1y * d2x - d2y * d1x;  if (det == 0.0f)   return false;  p.x=(d2x * d1ps1 - d1x * d2ps2) / det;  p.y=(d1y * d2ps2 - d2y * d1ps1) / det;  return true;}  }
class C{  public void skipSequenceNumbers(long jump){  nextSeqNo.addAndGet(jump);}  }
class C{  public static boolean isUrl(String url){  String regex="^(https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]";  Pattern patt=Pattern.compile(regex);  Matcher matcher=patt.matcher(url);  return matcher.matches();}  }
class C{  protected JButton stopButton(){  JButton stopButton=new JButton("STOP");  return (stopButton);}  }
class C{  @VisibleForTesting protected void listenToPhoneState(PhoneStateListener listener,int events){  TelephonyManager telephony=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);  if (telephony != null) {    telephony.listen(listener,events);  }}  }
class C{  public void selectFeature(int recordNumber){  if (!selectedFeatures[recordNumber]) {    selectedFeatures[recordNumber]=true;    selectedFeatureNumbers.add(recordNumber);    this.pcs.firePropertyChange("selectedFeatureNumber",-2,recordNumber);  }}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  private boolean isExceptionEdge(Edge edge){  boolean isExceptionEdge=edge.isExceptionEdge();  if (isExceptionEdge) {    if (DEBUG) {      System.out.println("NOT Ignoring " + edge);    }    return true;  }  if (edge.getType() != EdgeTypes.FALL_THROUGH_EDGE) {    return false;  }  InstructionHandle h=edge.getSource().getLastInstruction();  if (h != null && h.getInstruction() instanceof IFNONNULL && isNullCheck(h,methodGen.getConstantPool())) {    return true;  }  return false;}  }
class C{  public void createDisplayComponentsForPage(final int page,final PdfStreamDecoder current){  final Map<String,String> formsCreated=new HashMap<String,String>();  if (flattenForms) {    compData.setRasterizeForms(true);  }  if (!ignoreAllForms && (!compData.hasformsOnPageDecoded(page) || (formsRasterizedForDisplay() && current != null))) {    compData.initParametersForPage(pageData,page,formFactory,dpi);    final Map<String,String> formsProcessed=new HashMap<String,String>();    int Acount=0;    if (AfieldCount != null && AfieldCount.length > page) {      Acount=AfieldCount[page];    }    Fforms=new FormObject[FfieldCount];    FormObject[] xfaFormList=null;    Aforms=new FormObject[Acount];    FormObject formObject;    String objRef;    int i, count;    if (hasXFA && useXFA) {      xfaFormList=createXFADisplayComponentsForPage(xfaFormList,page);    } else {      final int decodeToForm=2;      for (int forms=0; forms < decodeToForm; forms++) {        i=0;        if (forms == 0) {          count=0;          if (fieldList != null) {            fieldList.resetToStart();            count=fieldList.getTokenCount() - 1;          }        } else {          if (annotList != null && annotList.length > page && annotList[page] != null) {            if (!isContainXFAStream && formFactory.getType() == FormFactory.HTML) {              annotList[page].resetToStart();              final Map<String,String> annotOrder=new HashMap<String,String>();              final int count2=annotList[page].getTokenCount();              String val;              for (int ii=0; ii < count2; ii++) {                val=annotList[page].getNextValueAsString(true);                annotOrder.put(val,String.valueOf(ii + 1));              }              formFactory.setAnnotOrder(annotOrder);            }            annotList[page].resetToStart();          }          count=Acount - 1;        }        for (int fieldNum=count; fieldNum > -1; fieldNum--) {          objRef=null;          if (forms == 0) {            if (fieldList != null) {              objRef=fieldList.getNextValueAsString(true);            }          } else {            if (addedMissingPopup && !annotList[page].hasMoreTokens()) {            } else {              if (annotList.length > page && annotList[page] != null) {                objRef=annotList[page].getNextValueAsString(true);              }            }          }          if (objRef == null || (objRef != null && (formsProcessed.get(objRef) != null || objRef.isEmpty()))) {            continue;          }          try {            formObject=convertRefToFormObject(objRef,page);            if (!isAnnotation(formObject)) {              continue;            }          } catch (          Exception e) {            LogWriter.writeLog("Exception " + e + " with "+ objRef);            continue;          }          if (forms == 0 && formObject != null && formObject.getFormType() == -1) {            continue;          }          if (allowsPopup(formObject) && formObject.getDictionary(PdfDictionary.Popup) == null) {            final FormObject po=new FormObject(PdfDictionary.Annot);            additionalOBjectRef++;            po.setRef((-additionalOBjectRef) + " 0 X");            po.setIntNumber(PdfDictionary.F,24);            po.setBoolean(PdfDictionary.Open,formObject.getBoolean(PdfDictionary.Open));            po.setConstant(PdfDictionary.Subtype,PdfDictionary.Popup);            final float[] rect=formObject.getFloatArray(PdfDictionary.Rect);            if (pageData.getRotation(page) % 180 != 0) {              po.setFloatArray(PdfDictionary.Rect,new float[]{rect[2],pageData.getCropBoxHeight(page) - 100,rect[2] + 160,pageData.getCropBoxHeight(page)});            } else {              po.setFloatArray(PdfDictionary.Rect,new float[]{pageData.getCropBoxWidth(page),rect[3] - 100,pageData.getCropBoxWidth(page) + 160,rect[3]});            }            po.setStringKey(PdfDictionary.Parent,formObject.getObjectRefAsString().getBytes());            po.setParentPdfObj(formObject);            po.setPageNumber(page);            formObject.setDictionary(PdfDictionary.Popup,po);            final FormObject[] newForms=new FormObject[Aforms.length + 1];            for (int ii=0; ii != Aforms.length; ii++) {              newForms[ii]=Aforms[ii];            }            newForms[Aforms.length]=po;            Aforms=newForms;            AfieldCount[page]++;            addedMissingPopup=true;          }          final byte[][] kids=formObject.getKeyArray(PdfDictionary.Kids);          if (kids != null) {            i=flattenKids(page,formsProcessed,formObject,i,forms);          } else {            i=processFormObject(page,formsProcessed,formObject,objRef,i,forms);          }        }      }    }    final List<FormObject> unsortedForms=new ArrayList<FormObject>();    final List<FormObject> sortedForms=new ArrayList<FormObject>();    compData.setListForPage(page,unsortedForms,false);    compData.setListForPage(page,sortedForms,true);    final int readToForm=3;    for (int forms=0; forms < readToForm; forms++) {      count=0;      if (forms == 0) {        if (xfaFormList != null) {          count=xfaFormList.length;        }      } else       if (forms == 1) {        if (Fforms == null) {          count=0;        } else {          for (          final FormObject Fform : Fforms) {            if (Fform != null) {              unsortedForms.add(Fform);            }          }          Fforms=FormUtils.sortGroupLargestFirst(Fforms);          count=Fforms.length;        }      } else {        for (        final FormObject Aform : Aforms) {          if (Aform != null) {            unsortedForms.add(Aform);          }        }        if (!formsRasterizedForDisplay()) {          Aforms=FormUtils.sortGroupLargestFirst(Aforms);        }        if (isContainXFAStream) {          final HashMap<Double,ArrayList<FormObject>> tabMap=new HashMap<Double,ArrayList<FormObject>>();          double maxY=0;          for (          final FormObject obj : Aforms) {            if (obj != null) {              final int x=obj.getBoundingRectangle().x;              final Double y=obj.getBounding2DRectangleForTabbing().getY();              maxY=Math.max(y,maxY);              if (tabMap.containsKey(y)) {                final ArrayList<FormObject> fList=tabMap.get(y);                int insertion=-1;                for (int z=0; z < fList.size(); z++) {                  final int nextX=fList.get(z).getBoundingRectangle().x;                  if (nextX < x) {                    insertion=z;                  }                }                if (insertion == -1) {                  fList.add(0,obj);                } else {                  fList.add(insertion + 1,obj);                }              } else {                final ArrayList<FormObject> list=new ArrayList<FormObject>();                list.add(obj);                tabMap.put(y,list);              }            }          }          final FormObject[] finalList=new FormObject[Aforms.length];          int objCount=0;          final Object[] keys=new Object[tabMap.size()];          int cc=0;          for (          final Object k : tabMap.keySet().toArray()) {            keys[cc]=k;            cc++;          }          Arrays.sort(keys);          for (int k=keys.length; k > 0; k--) {            final ArrayList<FormObject> objList=tabMap.get(keys[k - 1]);            if (objList != null) {              for (              final FormObject f : objList) {                finalList[objCount]=f;                objCount++;              }            }          }          Aforms=finalList;        }        count=Aforms.length;      }      boolean firstPopup=true;      for (int k=0; k < count; k++) {        if (forms == 0) {          formObject=xfaFormList[k];        } else         if (forms == 1) {          formObject=Fforms[k];        } else {          formObject=Aforms[k];        }        if (formObject != null && (formsCreated.get(formObject.getObjectRefAsString()) == null) && page == formObject.getPageNumber()) {          final int type=formFactory.getType();          if ((formsRasterizedForDisplay() && current != null) || type == FormFactory.SVG || (formFactory.flattenForms() && !AcroRenderer.isAnnotation(formObject))) {            try {              getFormFlattener().drawFlattenedForm(current,formObject,type == FormFactory.HTML || type == FormFactory.SVG,(PdfObject)this.getFormResources()[0]);            } catch (            final PdfException e) {              LogWriter.writeLog("Exception: " + e.getMessage());            }          } else {            createField(formObject);            compData.storeRawData(formObject);            formsCreated.put(formObject.getObjectRefAsString(),"x");            if (type == FormFactory.HTML || type == FormFactory.SVG || type == FormFactory.JAVAFX) {              sortedForms.add(formObject);            } else             if (formObject.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Popup) {              if (firstPopup) {                sortedForms.add(formObject);                firstPopup=false;              } else {                sortedForms.add(sortedForms.size() - 1,formObject);              }            } else {              sortedForms.add(0,formObject);            }          }        }      }    }    if (!formsRasterizedForDisplay()) {      try {        final String ref=currentPdfFile.getReferenceforPage(page);        final PageObject pageObj=new PageObject(ref);        currentPdfFile.readObject(pageObj);        if (javascript != null && formsActionHandler != null) {          formsActionHandler.O(pageObj,PdfDictionary.AA);          formsActionHandler.O(pageObj,PdfDictionary.A);          formsActionHandler.PO(pageObj,PdfDictionary.AA);          formsActionHandler.PO(pageObj,PdfDictionary.A);        }        if (formFactory.getType() != FormFactory.HTML && formFactory.getType() != FormFactory.SVG) {          initJSonFields(formsCreated);        }      } catch (      final Exception e) {        LogWriter.writeLog("Exception: " + e.getMessage());      }    }  }}  }
class C{  public static int read32bit(byte[] code,int index){  return (code[index] << 24) | ((code[index + 1] & 0xff) << 16) | ((code[index + 2] & 0xff) << 8)| (code[index + 3] & 0xff);}  }
class C{  public static YeloBoardFragment newInstance(){  YeloBoardFragment f=new YeloBoardFragment();  return f;}  }
class C{  public boolean isSourceModified(Resource resource){  boolean modified=true;  String fileName=resource.getName();  String path=(String)templatePaths.get(fileName);  File currentFile=null;  for (int i=0; currentFile == null && i < paths.size(); i++) {    String testPath=(String)paths.get(i);    File testFile=new File(testPath,fileName);    if (testFile.canRead()) {      currentFile=testFile;    }  }  File file=new File(path,fileName);  if (currentFile == null || !file.exists()) {  } else   if (currentFile.equals(file) && file.canRead()) {    modified=(file.lastModified() != resource.getLastModified());  }  return modified;}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public NSNumber(long l){  doubleValue=longValue=l;  type=INTEGER;}  }
class C{  static boolean hostExcludedFromProxyProperties(final URI serverURI,final String nonProxyHosts){  if (serverURI == null || serverURI.getHost() == null || nonProxyHosts == null) {    return false;  }  for (  final String nonProxyHost : nonProxyHosts.split("\\|")) {    if (nonProxyHost.startsWith("*") && LocaleInvariantStringHelpers.caseInsensitiveEndsWith(serverURI.getHost(),nonProxyHost.substring(1))) {      return true;    } else     if (nonProxyHost.endsWith("*") && LocaleInvariantStringHelpers.caseInsensitiveStartsWith(serverURI.getHost(),nonProxyHost.substring(0,nonProxyHost.length() - 1))) {      return true;    } else     if (CollatorFactory.getCaseInsensitiveCollator().equals(serverURI.getHost(),nonProxyHost)) {      return true;    }  }  return false;}  }
class C{  protected void graphTree(StringBuffer text) throws Exception {  text.append("N" + m_clusterNum + " [label=\""+ ((m_children == null) ? "leaf " : "node ")+ m_clusterNum+ " "+ " ("+ m_clusterInstances.numInstances()+ ")\" "+ ((m_children == null) ? "shape=box style=filled " : "")+ (m_saveInstances ? "data =\n" + dumpData() + "\n,\n" : "")+ "]\n");  if (m_children != null) {    for (int i=0; i < m_children.size(); i++) {      CNode temp=m_children.get(i);      text.append("N" + m_clusterNum + "->"+ "N"+ temp.m_clusterNum+ "\n");    }    for (int i=0; i < m_children.size(); i++) {      CNode temp=m_children.get(i);      temp.graphTree(text);    }  }}  }
class C{  private void removeStaleSpans(){  Iterator<Entry<String,TreeSet<CacheSpan>>> iterator=cachedSpans.entrySet().iterator();  while (iterator.hasNext()) {    Entry<String,TreeSet<CacheSpan>> next=iterator.next();    Iterator<CacheSpan> spanIterator=next.getValue().iterator();    boolean isEmpty=true;    while (spanIterator.hasNext()) {      CacheSpan span=spanIterator.next();      if (!span.file.exists()) {        spanIterator.remove();        if (span.isCached) {          totalSpace-=span.length;        }        notifySpanRemoved(span);      } else {        isEmpty=false;      }    }    if (isEmpty) {      iterator.remove();    }  }}  }
class C{  public final void forceFinished(boolean finished){  mFinished=finished;}  }
class C{  public Outline(@NonNull Outline src){  set(src);}  }
class C{  public SQLNonTransientConnectionException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  public void importPKCS8(BurpCertificate certificate,String filename){  setStatus("Importing private key...");  FileInputStream fis;  File file=new File(filename);  PrivateKey privateKey;  try {    fis=new FileInputStream(file);    DataInputStream dis=new DataInputStream(fis);    byte[] keyBytes=new byte[(int)file.length()];    dis.readFully(keyBytes);    dis.close();    PKCS8EncodedKeySpec keySpec=new PKCS8EncodedKeySpec(keyBytes);    KeyFactory keyFactory=KeyFactory.getInstance("RSA");    privateKey=keyFactory.generatePrivate(keySpec);    certificate.setPrivateKey(privateKey);    setCertificateTree();    setStatus("Private Key imported.");  } catch (  IOException|NoSuchAlgorithmException|InvalidKeySpecException e) {    setStatus("Error importing private Key. (" + e.getMessage() + ")");    e.printStackTrace();  }catch (  Exception e) {    setStatus("Error (" + e.getMessage() + ")");  }}  }
class C{  protected void processStartArg(final String key,final String value,final Map<String,Object> options,final List<String> vmArgs,final Properties props) throws Exception {  props.setProperty(key,value);}  }
class C{  public static String saveCSV(Context context){  FileOutputStream foStream=null;  PrintStream printStream=null;  ZipOutputStream zipOutputStream=null;  String zipFilename=null;  try {    final String databaseName=new Configuration.Builder(context).create().getDatabaseName();    final String dir=getExternalDir();    makeSureDirectoryExists(dir);    final StringBuilder sb=new StringBuilder();    sb.append(dir);    sb.append("/exportCSV");    sb.append(DateFormat.format("yyyyMMdd-kkmmss",System.currentTimeMillis()));    sb.append(".zip");    zipFilename=sb.toString();    final File sd=Environment.getExternalStorageDirectory();    if (sd.canWrite()) {      final File zipOutputFile=new File(zipFilename);      foStream=new FileOutputStream(zipOutputFile);      zipOutputStream=new ZipOutputStream(new BufferedOutputStream(foStream));      zipOutputStream.putNextEntry(new ZipEntry("export" + DateFormat.format("yyyyMMdd-kkmmss",System.currentTimeMillis()) + ".csv"));      printStream=new PrintStream(zipOutputStream);      printStream.println("DAY;TIME;UDT_CGMS");      SQLiteDatabase db=Cache.openDatabase();      Cursor cur=db.query("bgreadings",new String[]{"timestamp","calculated_value"},null,null,null,null,"timestamp ASC");      double value;      long timestamp;      java.text.DateFormat df=new SimpleDateFormat("dd.MM.yyyy;HH:mm;");      Date date=new Date();      if (cur.moveToFirst()) {        do {          timestamp=cur.getLong(0);          value=cur.getDouble(1);          if (value > 13) {            date.setTime(timestamp);            printStream.println(df.format(date) + Math.round(value));          }        } while (cur.moveToNext());      }      printStream.flush();    } else {      toastText(context,"SD card not writable!");      Log.d(TAG,"SD card not writable!");    }  } catch (  IOException e) {    toastText(context,"SD card not writable!");    Log.e(TAG,"Exception while writing DB",e);  } finally {    if (printStream != null) {      printStream.close();    }    if (zipOutputStream != null)     try {      zipOutputStream.close();    } catch (    IOException e1) {      Log.e(TAG,"Something went wrong closing: ",e1);    }  }  return zipFilename;}  }
class C{  public void endAtomicEdit(){  undoManager.endInternalAtomicEdit();}  }
class C{  public void manualTestBug22750465() throws Exception {  this.conn=(FabricMySQLConnection)getNewDefaultDataSource().getConnection(this.username,this.password);  this.conn.setServerGroupName("ha_config1_group");  String initialMasterUuid=this.conn.getCurrentServerGroup().getMaster().getUuid();  Statement stmt=this.conn.createStatement();  ResultSet rs=stmt.executeQuery("SHOW VARIABLES LIKE 'server_uuid'");  rs.next();  String firstServerUuid=rs.getString(2);  rs.close();  assertEquals(initialMasterUuid,firstServerUuid);  manualTestBug22750465SomeReadWriteOperations(this.conn);  int seconds=10;  System.err.println("Waiting " + seconds + " seconds for new master to be chosen (execute: 'mysqlfabric group promote ha_config1_group')");  Thread.sleep(TimeUnit.SECONDS.toMillis(1 + seconds));  rs=stmt.executeQuery("SHOW VARIABLES LIKE 'server_uuid'");  rs.next();  String secondServerUuid=rs.getString(2);  rs.close();  assertFalse(initialMasterUuid.equals(secondServerUuid));  manualTestBug22750465SomeReadWriteOperations(this.conn);  System.err.println("Waiting " + seconds + " seconds for Fabric node shutdown (execute: 'mysqlfabric group manage stop')");  Thread.sleep(TimeUnit.SECONDS.toMillis(1 + seconds));  rs=stmt.executeQuery("SHOW VARIABLES LIKE 'server_uuid'");  rs.next();  String thirdServerUuid=rs.getString(2);  rs.close();  assertEquals(secondServerUuid,thirdServerUuid);  manualTestBug22750465SomeReadWriteOperations(this.conn);  this.conn.close();  try {    getNewDefaultDataSource().getConnection(this.username,this.password);    fail("Exception was expected when trying to connect to a non-running Fabric node.");  } catch (  SQLException e) {    assertEquals("Unable to establish connection to the Fabric server",e.getMessage());  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.964 -0500",hash_original_method="1FBB4BF6938E55C9E24FEC1EE0A95252",hash_generated_method="E97C0644499688529C3BF08E85BC65DF") public String toLowerCase(){  return this;}  }
class C{  private void addContextToItem(Map<String,Set<String>> contextStringFeatures,Map<String,Map<String,Double>> contextFloatFeatures,Map<String,List<Double>> contextDenseFeatures,FeatureVector item){  if (contextStringFeatures != null) {    if (item.getStringFeatures() == null) {      item.setStringFeatures(new HashMap<>());    }    Map<String,Set<String>> itemStringFeatures=item.getStringFeatures();    for (    Map.Entry<String,Set<String>> stringFeature : contextStringFeatures.entrySet()) {      Set<String> stringFeatureValueCopy=new HashSet<>(stringFeature.getValue());      itemStringFeatures.put(stringFeature.getKey(),stringFeatureValueCopy);    }  }  if (contextFloatFeatures != null) {    if (item.getFloatFeatures() == null) {      item.setFloatFeatures(new HashMap<>());    }    Map<String,Map<String,Double>> itemFloatFeatures=item.getFloatFeatures();    for (    Map.Entry<String,Map<String,Double>> floatFeature : contextFloatFeatures.entrySet()) {      Map<String,Double> floatFeatureValueCopy=new HashMap<>(floatFeature.getValue());      itemFloatFeatures.put(floatFeature.getKey(),floatFeatureValueCopy);    }  }  if (contextDenseFeatures != null) {    if (item.getDenseFeatures() == null) {      item.setDenseFeatures(new HashMap<>());    }    Map<String,List<Double>> itemDenseFeatures=item.getDenseFeatures();    for (    Map.Entry<String,List<Double>> denseFeature : contextDenseFeatures.entrySet()) {      List<Double> denseFeatureValueCopy=new ArrayList<>(denseFeature.getValue());      itemDenseFeatures.put(denseFeature.getKey(),denseFeatureValueCopy);    }  }}  }
class C{  public boolean isVmSearch(){  return vmSearch;}  }
class C{  protected void sendReply(UUID nodeId,GridDhtTxFinishRequest req,boolean committed,GridCacheVersion nearTxId){  if (req.replyRequired() || req.checkCommitted()) {    GridDhtTxFinishResponse res=new GridDhtTxFinishResponse(req.version(),req.futureId(),req.miniId());    if (req.checkCommitted()) {      res.checkCommitted(true);      if (committed) {        if (req.needReturnValue()) {          try {            GridCacheReturnCompletableWrapper wrapper=ctx.tm().getCommittedTxReturn(req.version());            if (wrapper != null)             res.returnValue(wrapper.fut().get()); else             assert !ctx.discovery().alive(nodeId) : nodeId;          } catch (          IgniteCheckedException e) {            if (txFinishMsgLog.isDebugEnabled()) {              txFinishMsgLog.debug("Failed to gain entry processor return value. [txId=" + nearTxId + ", dhtTxId="+ req.version()+ ", node="+ nodeId+ ']');            }          }        }      } else {        ClusterTopologyCheckedException cause=new ClusterTopologyCheckedException("Primary node left grid.");        res.checkCommittedError(new IgniteTxRollbackCheckedException("Failed to commit transaction " + "(transaction has been rolled back on backup node): " + req.version(),cause));      }    }    try {      ctx.io().send(nodeId,res,req.policy());      if (txFinishMsgLog.isDebugEnabled()) {        txFinishMsgLog.debug("Sent dht tx finish response [txId=" + nearTxId + ", dhtTxId="+ req.version()+ ", node="+ nodeId+ ", checkCommitted="+ req.checkCommitted()+ ']');      }    } catch (    Throwable e) {      if (ctx.discovery().node(nodeId) == null) {        if (txFinishMsgLog.isDebugEnabled()) {          txFinishMsgLog.debug("Node left while send dht tx finish response [txId=" + nearTxId + ", dhtTxId="+ req.version()+ ", node="+ nodeId+ ']');        }      } else {        U.error(log,"Failed to send finish response to node [txId=" + nearTxId + ", dhtTxId="+ req.version()+ ", nodeId="+ nodeId+ ", res="+ res+ ']',e);      }      if (e instanceof Error)       throw (Error)e;    }  } else {    if (txFinishMsgLog.isDebugEnabled()) {      txFinishMsgLog.debug("Skip send dht tx finish response [txId=" + nearTxId + ", dhtTxId="+ req.version()+ ", node="+ nodeId+ ']');    }  }}  }
class C{  public Property hourOfDay(){  return new Property(this,HOUR_OF_DAY);}  }
class C{  protected void reportAccurateParameterizedMethodReference(SearchMatch match,ASTNode statement,TypeReference[] typeArguments) throws CoreException {  if (match.getRule() == 0)   return;  if (!encloses((IJavaElement)match.getElement()))   return;  int start=match.getOffset();  if (typeArguments != null && typeArguments.length > 0) {    boolean isErasureMatch=(this.pattern instanceof OrPattern) ? ((OrPattern)this.pattern).isErasureMatch() : ((JavaSearchPattern)this.pattern).isErasureMatch();    if (!isErasureMatch) {      Scanner scanner=this.parser.scanner;      char[] source=this.currentPossibleMatch.getContents();      scanner.setSource(source);      start=typeArguments[0].sourceStart;      int end=statement.sourceEnd;      scanner.resetTo(start,end);      int lineStart=start;      try {        linesUp:         while (true) {          while (scanner.source[scanner.currentPosition] != '\n') {            scanner.currentPosition--;            if (scanner.currentPosition == 0)             break linesUp;          }          lineStart=scanner.currentPosition + 1;          scanner.resetTo(lineStart,end);          while (!scanner.atEnd()) {            if (scanner.getNextToken() == TerminalTokens.TokenNameLESS) {              start=scanner.getCurrentTokenStartPosition();              break linesUp;            }          }          end=lineStart - 2;          scanner.currentPosition=end;        }      } catch (      InvalidInputException ex) {      }    }  }  match.setOffset(start);  match.setLength(statement.sourceEnd - start + 1);  report(match);}  }
class C{  public boolean isSensor(){  return m_isSensor;}  }
class C{  public static double max(double[][] values){  double max=0;  for (int i=0; i < values.length; i++) {    for (int j=0; j < values[i].length; j++) {      max=(values[i][j] > max) ? values[i][j] : max;    }  }  return max;}  }
class C{  public Command addVariable(String name){  return addArgument("${" + name + "}");}  }
class C{  public void clearBitmap(){  mCache.evictAll();}  }
class C{  public APIException(APIError.Type type,String message){  this(new APIError(type,message));}  }
class C{  static RouteBuilder path(String path){  return builder().path(path);}  }
class C{  public OMGeometry addOMGeometry(OMGeometryList list){  int nPolys=polygons.length;  if (nPolys <= 0) {    return null;  }  double[] pts;  boolean ispolyg=isPolygon();  OMGeometry geom=null;  for (int i=0; i < nPolys; i++) {    pts=((ESRIPoly.ESRIFloatPoly)polygons[i]).getRadians();    if (ispolyg) {      geom=new PolygonGeometry.LL(pts,OMGraphic.RADIANS,OMGraphic.LINETYPE_STRAIGHT);    } else {      geom=new PolylineGeometry.LL(pts,OMGraphic.RADIANS,OMGraphic.LINETYPE_STRAIGHT);    }    list.add(geom);  }  return geom;}  }
class C{  private void initData(){  this.nameList=new ArrayList<>();  List<Location> locationList=DatabaseHelper.getInstance(this).readLocation();  for (  Location l : locationList) {    nameList.add(l.location);  }  this.location=new Location(nameList.get(0),null);  this.weatherUtils=new WeatherUtils();  this.locationUtils=new LocationUtils(this);}  }
class C{  public void copyTo(@Name("destination") float[] destination,@Name("sourcePosition") @Defaulted int sourcePosition,@Name("destinationPosition") @Defaulted int destinationPosition,@Name("length") @Defaulted int length){  throw Util.makeJavaArrayWrapperException();}  }
class C{  static void svd_opb(SMat A,double[] x,double[] y,double[] temp){  int[] pointr=A.pointr;  int[] rowind=A.rowind;  double[] value=A.value;  int n=A.cols;  for (int i=0; i < n; i++)   y[i]=0;  for (int i=0; i < A.rows; i++)   temp[i]=0.0;  for (int i=0; i < A.cols; i++) {    int end=pointr[i + 1];    for (int j=pointr[i]; j < end; j++)     temp[rowind[j]]+=value[j] * (x[i]);  }  for (int i=0; i < A.cols; i++) {    int end=pointr[i + 1];    for (int j=pointr[i]; j < end; j++)     y[i]+=value[j] * temp[rowind[j]];  }  return;}  }
class C{  private void createBarcode(String code,MPrintFormatItem item){  String type=item.getBarcodeType();  try {    if (type.equals(MPrintFormatItem.BARCODETYPE_Codabar2Of7Linear))     m_barcode=BarcodeFactory.create2of7(code); else     if (type.equals(MPrintFormatItem.BARCODETYPE_CodabarMonarchLinear))     m_barcode=BarcodeFactory.createMonarch(code); else     if (type.equals(MPrintFormatItem.BARCODETYPE_CodabarNW_7Linear))     m_barcode=BarcodeFactory.createNW7(code); else     if (type.equals(MPrintFormatItem.BARCODETYPE_CodabarUSD_4Linear))     m_barcode=BarcodeFactory.createUSD4(code); else     if (type.equals(MPrintFormatItem.BARCODETYPE_Code128ACharacterSet))     m_barcode=BarcodeFactory.createCode128A(code); else     if (type.equals(MPrintFormatItem.BARCODETYPE_Code128BCharacterSet))     m_barcode=BarcodeFactory.createCode128B(code); else     if (type.equals(MPrintFormatItem.BARCODETYPE_Code128CCharacterSet))     m_barcode=BarcodeFactory.createCode128C(code); else     if (type.equals(MPrintFormatItem.BARCODETYPE_Code128DynamicallySwitching))     m_barcode=BarcodeFactory.createCode128(code); else     if (type.equals(MPrintFormatItem.BARCODETYPE_Code393Of9LinearWithChecksum))     m_barcode=BarcodeFactory.create3of9(code,true); else     if (type.equals(MPrintFormatItem.BARCODETYPE_Code393Of9LinearWOChecksum))     m_barcode=BarcodeFactory.create3of9(code,false); else     if (type.equals(MPrintFormatItem.BARCODETYPE_Code39LinearWithChecksum))     m_barcode=BarcodeFactory.createCode39(code,true); else     if (type.equals(MPrintFormatItem.BARCODETYPE_Code39LinearWOChecksum))     m_barcode=BarcodeFactory.createCode39(code,false); else     if (type.equals(MPrintFormatItem.BARCODETYPE_Code39USD3WithChecksum))     m_barcode=BarcodeFactory.createUSD3(code,true); else     if (type.equals(MPrintFormatItem.BARCODETYPE_Code39USD3WOChecksum))     m_barcode=BarcodeFactory.createUSD3(code,false); else     if (type.equals(MPrintFormatItem.BARCODETYPE_CodeabarLinear))     m_barcode=BarcodeFactory.createCodabar(code); else     if (type.equals(MPrintFormatItem.BARCODETYPE_EAN128))     m_barcode=BarcodeFactory.createEAN128(code); else     if (type.equals(MPrintFormatItem.BARCODETYPE_GlobalTradeItemNoGTINUCCEAN128))     m_barcode=BarcodeFactory.createGlobalTradeItemNumber(code); else     if (type.equals(MPrintFormatItem.BARCODETYPE_PDF417TwoDimensional))     m_barcode=BarcodeFactory.createPDF417(code); else     if (type.equals(MPrintFormatItem.BARCODETYPE_SCC_14ShippingCodeUCCEAN128))     m_barcode=BarcodeFactory.createSCC14ShippingCode(code); else     if (type.equals(MPrintFormatItem.BARCODETYPE_ShipmentIDNumberUCCEAN128))     m_barcode=BarcodeFactory.createShipmentIdentificationNumber(code); else     if (type.equals(MPrintFormatItem.BARCODETYPE_SSCC_18NumberUCCEAN128))     m_barcode=BarcodeFactory.createSSCC18(code); else     if (type.equals(MPrintFormatItem.BARCODETYPE_UCC128))     m_barcode=BarcodeFactory.createUCC128(UCCEAN128Barcode.EAN128_AI,code); else     if (type.equals(MPrintFormatItem.BARCODETYPE_EAN13))     m_barcode=BarcodeFactory.createEAN13(code); else     if (type.equals(MPrintFormatItem.BARCODETYPE_USPostalServiceUCCEAN128)) {      m_barcode=BarcodeFactory.createUSPS(code);      m_barcode.setDrawingText(false);    } else     log.warning("Invalid Type" + type);  } catch (  Exception e) {    log.warning(code + " - " + e.toString());    m_valid=false;  }  if (m_valid && m_barcode != null) {    if (item.getAD_PrintFont_ID() != 0) {      MPrintFont mFont=MPrintFont.get(item.getAD_PrintFont_ID());      if (mFont != null)       m_barcode.setFont(mFont.getFont());    }  }}  }
class C{  private void closeAllCqs(boolean clientInitiated,Collection<? extends InternalCqQuery> cqs){  closeAllCqs(clientInitiated,cqs,((GemFireCacheImpl)this.cache).keepDurableSubscriptionsAlive());}  }
class C{  public static byte[] decode(byte[] source) throws java.io.IOException {  byte[] decoded=null;  decoded=decode(source,0,source.length,Base64.NO_OPTIONS);  return decoded;}  }
class C{  @Override public void close() throws IOException {  if (!def.finished()) {    finish();  }  def.end();  out.close();}  }
class C{  public void disableLogging(){  getStackLogger().disableLogging();}  }
class C{  public void testGetSigAlgParams(){  if (this.cert == null) {    return;  }  assertTrue("The byte array with encoded algorithm parameters " + "is not correct.",Arrays.equals(tbt_cert.getSigAlgParams(),cert.getSigAlgParams()));}  }
class C{  public void addMethodToDisplay(MethodIdent methodIdent){  methods.add(methodIdent);}  }
class C{  public Replacer replacer(Substitution model){  return new Replacer(this,model);}  }
class C{  public static Stats of(Iterable<? extends Number> values){  StatsAccumulator accumulator=new StatsAccumulator();  accumulator.addAll(values);  return accumulator.snapshot();}  }
class C{  public boolean checkTimestampTokenIncludes(final TimestampToken timestampToken){  final List<TimestampInclude> timestampIncludes=timestampToken.getTimestampIncludes();  for (  final TimestampInclude timestampInclude : timestampIncludes) {    if (!timestampInclude.isReferencedData()) {      return false;    }  }  return true;}  }
class C{  private static boolean checkLoaderAncestry(ClassLoader child,ClassLoader ancestor){  if (ancestor == null) {    return true;  } else   if (child == null) {    return false;  } else {    for (ClassLoader parent=child; parent != null; parent=parent.getParent()) {      if (parent == ancestor) {        return true;      }    }    return false;  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_PARAMETER_LIST_1__PARAMETER_1:    return parameter_1 != null && !parameter_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public Zweckbestimmung(CnATreeElement parent){  super(parent);  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());}  }
class C{  private void backupScreens(BackupDataOutput data) throws IOException {  ContentResolver cr=mContext.getContentResolver();  Cursor cursor=cr.query(WorkspaceScreens.CONTENT_URI,SCREEN_PROJECTION,null,null,null);  try {    cursor.moveToPosition(-1);    if (DEBUG)     Log.d(TAG,"dumping screens after: " + mLastBackupRestoreTime);    while (cursor.moveToNext()) {      final long id=cursor.getLong(ID_INDEX);      final long updateTime=cursor.getLong(ID_MODIFIED);      Key key=getKey(Key.SCREEN,id);      mKeys.add(key);      final String backupKey=keyToBackupKey(key);      if (!mExistingKeys.contains(backupKey) || updateTime >= mLastBackupRestoreTime) {        writeRowToBackup(key,packScreen(cursor),data);      } else {        if (VERBOSE)         Log.v(TAG,"screen already backup up " + id);      }    }  }  finally {    cursor.close();  }}  }
class C{  private static void updateWidget(Context context,int appWidgetId,int smallWidget){  Log.v(TAG,"updateWidget appWidgetId: " + appWidgetId);  RemoteViews remoteViews=new RemoteViews(context.getPackageName(),R.layout.widget);  PendingIntent clickIntent;  final Intent intent=new Intent(context,WidgetService.class);  intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,appWidgetId);  intent.putExtra("small_widget",smallWidget);  intent.setData(Uri.parse(intent.toUri(Intent.URI_INTENT_SCHEME)));  remoteViews.setRemoteAdapter(R.id.conversation_list,intent);  remoteViews.setTextViewText(R.id.widget_label,context.getString(R.string.title_conversation_list));  remoteViews.setTextColor(R.id.widget_label,ThemeManager.getTextOnColorPrimary());  remoteViews.setInt(R.id.conversation_list_background,"setColorFilter",ThemeManager.getBackgroundColor());  remoteViews.setInt(R.id.header_background,"setColorFilter",ThemeManager.getColor());  final Intent convIntent=new Intent(context,MainActivity.class);  clickIntent=PendingIntent.getActivity(context,0,convIntent,PendingIntent.FLAG_UPDATE_CURRENT);  remoteViews.setOnClickPendingIntent(R.id.widget_header,clickIntent);  final Intent composeIntent=new Intent(context,QKComposeActivity.class);  clickIntent=PendingIntent.getActivity(context,0,composeIntent,PendingIntent.FLAG_UPDATE_CURRENT);  remoteViews.setOnClickPendingIntent(R.id.widget_compose,clickIntent);  Intent startActivityIntent=new Intent(context,MainActivity.class);  PendingIntent startActivityPendingIntent=PendingIntent.getActivity(context,0,startActivityIntent,PendingIntent.FLAG_UPDATE_CURRENT);  remoteViews.setPendingIntentTemplate(R.id.conversation_list,startActivityPendingIntent);  AppWidgetManager.getInstance(context).updateAppWidget(appWidgetId,remoteViews);}  }
class C{  public boolean isPosted(){  Object oo=get_Value(COLUMNNAME_Posted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void writeFile(byte[] fileData,String fileName) throws OpenStegoException {  File file=null;  if (fileName != null) {    file=new File(fileName);  }  writeFile(fileData,file);}  }
class C{  public static ComponentUI createUI(JComponent c){  if (c == null || sliderClass == null) {    return null;  }  UIDefaults defaults=UIManager.getLookAndFeelDefaults();  try {    Method m=(Method)defaults.get(sliderClass);    if (m == null) {      m=sliderClass.getMethod("createUI",new Class<?>[]{JComponent.class});      defaults.put(sliderClass,m);    }    ComponentUI uiObject=(ComponentUI)m.invoke(null,new Object[]{c});    if (uiObject instanceof BasicSliderUI) {      c.addHierarchyListener(new MouseAttacher());    }    return uiObject;  } catch (  NoSuchMethodException|SecurityException|IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {    throw new RuntimeException(e);  }}  }
class C{  public static Typeface funRaiser(Context context){  sFunRaiser=getFontFromRes(R.raw.fun_raiser,context);  return sFunRaiser;}  }
class C{  public FunctionException(){}  }
class C{  protected void validateFileSystemInfo(FileSystemInfo[] param){}  }
class C{  private void updateNonzero(){  if (mIsPathDirty) {    mIsNonzero=false;    if (mIsCircle || mBorderWidth > 0) {      mIsNonzero=true;    }    for (int i=0; i < mCornerRadii.length; i++) {      if (mCornerRadii[i] > 0) {        mIsNonzero=true;      }    }  }}  }
class C{  public ColorRange addBrightnessRange(FloatRange bri){  brightnessConstraint.add(bri);  return this;}  }
class C{  public Set<Class> objectClasses(){  return mapping.keySet();}  }
class C{  private static int min(int x,int y){  return y + ((x - y) & ((x - y) >> 31));}  }
class C{  private static String camelCaseToAllCaps(String camelCase){  return camelCase.replaceAll("(?<=[^A-Z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][^A-Z])","_").toUpperCase();}  }
class C{  public static String forHrefAmpersand(String aURL){  return aURL.replace("&","&amp;");}  }
class C{  @Override public synchronized String toString(){  if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {    MODELMBEAN_LOGGER.logp(Level.FINEST,DescriptorSupport.class.getName(),"toString()","Entry");  }  String respStr="";  String[] fields=getFields();  if ((fields == null) || (fields.length == 0)) {    if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {      MODELMBEAN_LOGGER.logp(Level.FINEST,DescriptorSupport.class.getName(),"toString()","Empty Descriptor");    }    return respStr;  }  if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {    MODELMBEAN_LOGGER.logp(Level.FINEST,DescriptorSupport.class.getName(),"toString()","Printing " + fields.length + " fields");  }  for (int i=0; i < fields.length; i++) {    if (i == (fields.length - 1)) {      respStr=respStr.concat(fields[i]);    } else {      respStr=respStr.concat(fields[i] + ", ");    }  }  if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {    MODELMBEAN_LOGGER.logp(Level.FINEST,DescriptorSupport.class.getName(),"toString()","Exit returning " + respStr);  }  return respStr;}  }
class C{  public static String readString(SharedPreferences preferences,String key,String defaultValue){  return preferences.getString(key,defaultValue);}  }
class C{  public void removeResponseCodeListener(ActionListener<NetworkEvent> a){  if (responseCodeListeners == null) {    return;  }  responseCodeListeners.removeListener(a);  if (responseCodeListeners.getListenerCollection() == null || responseCodeListeners.getListenerCollection().size() == 0) {    responseCodeListeners=null;  }}  }
class C{  public ReverseTransactionObserver(final TransactionObserver observer){  this.observer=observer;}  }
class C{  protected void drawStackVertical(List values,Comparable category,Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset){  int column=dataset.getColumnIndex(category);  double barX0=domainAxis.getCategoryMiddle(column,dataset.getColumnCount(),dataArea,plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0;  double barW=state.getBarWidth();  List itemLabelList=new ArrayList();  boolean inverted=rangeAxis.isInverted();  int blockCount=values.size() - 1;  for (int k=0; k < blockCount; k++) {    int index=(inverted ? blockCount - k - 1 : k);    Object[] prev=(Object[])values.get(index);    Object[] curr=(Object[])values.get(index + 1);    int series;    if (curr[0] == null) {      series=-((Integer)prev[0]).intValue() - 1;    } else {      series=((Integer)curr[0]).intValue();      if (series < 0) {        series=-((Integer)prev[0]).intValue() - 1;      }    }    double v0=((Double)prev[1]).doubleValue();    double vv0=rangeAxis.valueToJava2D(v0,dataArea,plot.getRangeAxisEdge());    double v1=((Double)curr[1]).doubleValue();    double vv1=rangeAxis.valueToJava2D(v1,dataArea,plot.getRangeAxisEdge());    Shape[] faces=createVerticalBlock(barX0,barW,vv0,vv1,inverted);    Paint fillPaint=getItemPaint(series,column);    Paint fillPaintDark=PaintAlpha.darker(fillPaint);    boolean drawOutlines=isDrawBarOutline();    Paint outlinePaint=fillPaint;    if (drawOutlines) {      outlinePaint=getItemOutlinePaint(series,column);      g2.setStroke(getItemOutlineStroke(series,column));    }    for (int f=0; f < 6; f++) {      if (f == 5) {        g2.setPaint(fillPaint);      } else {        g2.setPaint(fillPaintDark);      }      g2.fill(faces[f]);      if (drawOutlines) {        g2.setPaint(outlinePaint);        g2.draw(faces[f]);      }    }    itemLabelList.add(new Object[]{new Integer(series),faces[5].getBounds2D(),BooleanUtilities.valueOf(v0 < getBase())});    EntityCollection entities=state.getEntityCollection();    if (entities != null) {      addItemEntity(entities,dataset,series,column,faces[5]);    }  }  for (int i=0; i < itemLabelList.size(); i++) {    Object[] record=(Object[])itemLabelList.get(i);    int series=((Integer)record[0]).intValue();    Rectangle2D bar=(Rectangle2D)record[1];    boolean neg=((Boolean)record[2]).booleanValue();    CategoryItemLabelGenerator generator=getItemLabelGenerator(series,column);    if (generator != null && isItemLabelVisible(series,column)) {      drawItemLabel(g2,dataset,series,column,plot,generator,bar,neg);    }  }}  }
class C{  protected ItemListener createItemListener(){  return null;}  }
class C{  public RedirectVote(String target,TransportOrder transportOrder){  this.target=target;  this.transportOrder=transportOrder;}  }
class C{  private void processItem(String qName,String data){  if (tagIsEqual(qName,TITLE_TAG))   itm.setTitle(data);  if (tagIsEqual(qName,LINK_TAG))   itm.setLink(data);  if (tagIsEqual(qName,DESCRIPTION_TAG) || tagIsEqual(qName,ITUNES_SUMMARY))   itm.setDescription(data);  if (tagIsEqual(qName,PUB_DATE_TAG))   itm.setPubDate(data);  if (tagIsEqual(qName,PUB_DATE_TAG))   itm.setPubDate(data);  if (tagIsEqual(qName,AUTHOR_TAG) || tagIsEqual(qName,ITUNES_AUTHOR))   itm.setAuthor(data);  if (tagIsEqual(qName,COMMENTS_TAG))   itm.setComments(data);  if (qName.toUpperCase().startsWith("DC:"))   processDoublinCoreTags(qName,data,itm);  if (tagIsEqual(qName,CONTENT_ENCODED_TAG))   itm.setContentEncoded(data);  if (tagIsEqual(qName,ITUNES_DURATION)) {    itm.setDuration(parseDuration(data));  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:12.116 -0400",hash_original_method="4060C53488B85388A8589DA990375C48",hash_generated_method="93125471A8B3E44F8114BC8582FE0660") private void nonContextualShape(char[] text,int start,int count){  char maxDigit=(char)0x0039;  char minDigit=(char)((fRanges == ETHIOPIC) ? 0x0031 : 0x0030);  for (int ind=start; ind < start + count; ind++) {    if (minDigit <= text[ind] && text[ind] <= maxDigit) {      text[ind]=(char)(digitsLowRanges[fSingleRangeIndex] + text[ind]);    }  }}  }
class C{  public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeHeader(v)) {      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  public static ValueLobDb createSmallLob(int type,byte[] small,long precision){  return new ValueLobDb(type,small,precision);}  }
class C{  public int next(){  if (_startNode == _currentNode)   return NULL;  final int node=_startNode;  int expType=_exptype2(makeNodeIdentity(node));  _currentNode=node;  if (_nodeType >= DTM.NTYPES) {    if (_nodeType == expType) {      return returnNode(node);    }  } else {    if (expType < DTM.NTYPES) {      if (expType == _nodeType) {        return returnNode(node);      }    } else {      if (m_extendedTypes[expType].getNodeType() == _nodeType) {        return returnNode(node);      }    }  }  return NULL;}  }
class C{  protected TriggerImpl(){  super();}  }
class C{  public long size64(){  return n;}  }
class C{  public void deleteFuctionality(NativeAppDriver driver,String editButton,String checkboxButton,String deleteButton,String okButton,int videoNumber) throws InterruptedException {  Thread.sleep(10000);  driver.clickElementById(editButton);  driver.clickElementWithIndexById(checkboxButton,videoNumber);  driver.clickElementById(deleteButton);  driver.clickElementById(okButton);}  }
class C{  public static Charset toCharset(final String charset){  return charset == null ? Charset.defaultCharset() : Charset.forName(charset);}  }
class C{  public final int hashCode(){  return (int)m_char;}  }
class C{  public void addOnItemTouchListener(RecyclerView.OnItemTouchListener listener){  mRecycler.addOnItemTouchListener(listener);}  }
class C{  public static boolean validatePassword(String password,String correctHash) throws NoSuchAlgorithmException, InvalidKeySpecException {  return validatePassword(password.toCharArray(),correctHash);}  }
class C{  public static void enable(){  setEnabled(true);}  }
class C{  @Override public boolean canInteractWith(EntityPlayer aPlayer){  return false;}  }
class C{  @Override public void onCreate(SQLiteDatabase db){  db.execSQL(SQL_CREATE_HOBBIT_TABLE);}  }
class C{  public DefaultTableModel(Vector data,Vector columnNames){  setDataVector(data,columnNames);}  }
class C{  @Override public void registerOutParameter(String parameterName,int sqlType,int scale) throws SQLException {  registerOutParameter(getIndexForName(parameterName),sqlType,scale);}  }
class C{  public Boolean isCertificateBasedAuthenticationEnabled(){  return certificateBasedAuthenticationEnabled;}  }
class C{  public HashPrintRequestAttributeSet(){  super(PrintRequestAttribute.class);}  }
class C{  public static double sumOfPowerDeviations(DoubleArrayList data,int k,double c){  return sumOfPowerDeviations(data,k,c,0,data.size() - 1);}  }
class C{  public boolean hasChanged(){  if (getValue() != null)   if (m_oldValue != null)   return !m_oldValue.equals(getValue()); else   return true; else   if (m_oldValue != null)   return true; else   return false;}  }
class C{  @OnOpen public void onOpen(Session session,@PathParam("user") String user) throws IOException {  if (Boolean.parseBoolean(InitParametersInjector.get(InitParametersInjector.INIT_PARAM_ENABLE_ROLES))) {    Principal principal=session.getUserPrincipal();    if (principal == null) {      session.getBasicRemote().sendText("Login first to be able to use the Debug Sessions websocket channel.");      session.close();    }  }  openSessions.put(session.getId(),session);  if (user != null) {    session.getUserProperties().put("user",user);  }  callInternal("onOpen",session,null);}  }
class C{  @Deprecated @Transactional public void updateCashDeposit(Map<String,Object> instrumentMap){  contraService.updateCashDeposit(instrumentMap);}  }
class C{  private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {  try {    ois.defaultReadObject();    initPlot();  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public static void log(final String message){  CPluginOutputDialog.instance().log(message);}  }
class C{  public void save(OutputStream out,String header) throws IOException {  properties.store(out,header);  dirty=false;}  }
class C{  public void processServerResponse(int response,ResponseData rawData){  mLastResponse=response;}  }
class C{  private void dropDBSchema(){  setDoNotInterrupt(true);  s_logger.log(Level.FINE,"dropDBSchema",new Object[]{getSchema(),getDirection()});  try {    Statement stmt=setStatement();    DatabaseMetaData md=m_connection.getMetaData();    ResultSet rs=md.getSchemas();    while (getResultSetNext(rs)) {      if (getResultSetString(rs,"TABLE_SCHEM").equalsIgnoreCase(getSchema())) {        int step=0;        String sql=s_dbEngine.sqlAdmin_dropSchema(step,getVendor(),getCatalog(),getSchema());        while (sql != null) {          executeUpdate(stmt,sql,false,false);          step++;          sql=s_dbEngine.sqlAdmin_dropSchema(step,getVendor(),getCatalog(),getSchema());        }      }    }    releaseResultSet(rs);    releaseStatement(stmt);  } catch (  SQLException e) {    s_logger.log(Level.SEVERE,this.getClass().getSimpleName(),Thread.currentThread().getStackTrace()[2].getMethodName(),"dropDBSchemaError",new Object[]{getSchema(),e.getMessage()});  }  s_logger.log(Level.FINE,"dbSchemaDropped",getSchema());  s_logger.flush();}  }
class C{  public JoinPseudoState(List<State<S,E>> joins,List<JoinStateData<S,E>> joinTargets){  super(PseudoStateKind.JOIN);  this.joins=joins;  this.joinTargets=joinTargets;  this.tracker=new JoinTracker();}  }
class C{  public boolean checkSuExists(){  Process process=null;  try {    process=Runtime.getRuntime().exec(new String[]{"/system/xbin/which","su"});    BufferedReader in=new BufferedReader(new InputStreamReader(process.getInputStream()));    if (in.readLine() != null)     return true;    return false;  } catch (  Throwable t) {    return false;  } finally {    if (process != null)     process.destroy();  }}  }
class C{  public final ArrayList<WifiRecord> loadWifisOverview(final int session){  return loadWifisOverviewWithin(session,null,null,null,null);}  }
class C{  public static ReactiveSocket createClient(){  ConnectionSetupPayload setupPayload=ConnectionSetupPayload.create("","");  if ("tcp".equals(uri.getScheme())) {    Function<SocketAddress,TcpClient<ByteBuf,ByteBuf>> clientFactory=null;    if (debug)     clientFactory=null;    return toObservable(TcpReactiveSocketConnector.create(setupPayload,null,clientFactory).connect(new InetSocketAddress(uri.getHost(),uri.getPort()))).toSingle().toBlocking().value();  } else {    throw new UnsupportedOperationException("uri unsupported: " + uri);  }}  }
class C{  private void registerReceiver(){  Log.i(TAG,"Registering broadcast receivers");  final IntentFilter filter=new IntentFilter();  filter.addAction(Intent.ACTION_BATTERY_LOW);  registerReceiver(mReceiver,filter);}  }
class C{  public void testPasswordHandler() throws Exception {  testPassword();  try {    Callback[] callbacks=new Callback[]{new NameCallback("test")};    factory.handle(callbacks);    fail();  } catch (  NullPointerException expected) {  }  try {    Callback[] callbacks=new Callback[]{new NameCallback("test"),new PasswordCallback("test",false)};    factory.handle(callbacks);    fail();  } catch (  NullPointerException expected) {  }  try {    Callback[] callbacks=new Callback[]{new TextInputCallback("test")};    factory.handle(callbacks);    fail();  } catch (  UnsupportedCallbackException expected) {  }}  }
class C{  public void doneWithExecutingUnsafeCodeOnSameThread() throws SecurityException, IllegalStateException {  if (!privilegedThreads.contains(Thread.currentThread())) {    throw new SecurityException("Only a privileged thread can return from unsafe code execution");  }  if (privilegedThreadToIgnore == null) {    throw new IllegalStateException("The thread was not executing unsafe code");  }  privilegedThreadToIgnore=null;}  }
class C{  private static int midPt(final int a,final int b){  return a + (b - a) / 2;}  }
class C{  @SuppressWarnings("unchecked") @Override public void initGui(){  Keyboard.enableRepeatEvents(true);  buttonList.clear();  buttonList.add(new GuiButton(0,width / 2 - 100,height / 4 + 120 + 12,"Cancel"));  buttonList.add(new GuiButton(1,width / 2 - 100,height / 4 + 72 + 12,"Connect"));  buttonList.add(new GuiButton(2,width / 2 - 100,height / 4 + 96 + 12,"Reset"));  proxyBox=new GuiTextField(0,fontRendererObj,width / 2 - 100,60,200,20);  proxyBox.setFocused(true);  WurstClient.INSTANCE.analytics.trackPageView("/multiplayer/use-proxy","Use Proxy");}  }
class C{  private static String toHex(byte[] array){  BigInteger bi=new BigInteger(1,array);  String hex=bi.toString(16);  int paddingLength=(array.length * 2) - hex.length();  if (paddingLength > 0)   return String.format("%0" + paddingLength + "d",0) + hex; else   return hex;}  }
class C{  public void writeInteger(String key,int value){  SharedPreferences.Editor editor=preferences.edit();  editor.putInt(key,value);  editor.commit();}  }
class C{  public static void assertNotEquals(char notExpected,char actual){  try {    Verify.assertNotEquals("char",notExpected,actual);  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  public double calcScoreWithMissingParent(int nNode,int nCandidateParent) throws Exception {  ParentSet oParentSet=m_BayesNet.getParentSet(nNode);  Instances instances=m_BayesNet.m_Instances;  if (!oParentSet.contains(nCandidateParent)) {    return -1e100;  }  int iParent=oParentSet.deleteParent(nCandidateParent,instances);  double fAccuracy=calcScore(m_BayesNet);  oParentSet.addParent(nCandidateParent,iParent,instances);  return fAccuracy;}  }
class C{  private void changeTmpOutput(long id){  ArrayList<DataIdentifier> outputParams=getOutputParams();  cell2BlockInst=getCell2BlockInstructions(outputParams,_blockedFileNames);}  }
class C{  public T findById(Class cls,Long id){  Criteria criteria=currentSession().createCriteria(cls).add(Restrictions.eq("id",id));  Object object=criteria.uniqueResult();  T castedObject=null;  if (object != null)   castedObject=(T)object;  return castedObject;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private Object readResolve() throws ObjectStreamException {  return INSTANCE;}  }
class C{  private CExpressionEvaluator(){}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  public JIPAbortException(){}  }
class C{  private static int indexOfCause(Throwable parent,Class<? extends Throwable> causeClass,final int cindex,final boolean isSubtypeOk){  int resultIndex=cindex;  Throwable cause=parent.getCause();  if (cause != null && !isMatching(cause,causeClass,isSubtypeOk)) {    resultIndex=indexOfCause(cause,causeClass,cindex + 1,isSubtypeOk);  } else   if (cause != null && isMatching(cause,causeClass,isSubtypeOk)) {    resultIndex=cindex != -1 ? cindex + 1 : cindex;  } else   if (cause == null) {    resultIndex=-1;  }  return resultIndex;}  }
class C{  public static void createDirIfNotExists(File dir) throws IOException {  if (!dir.exists() && !dir.mkdirs()) {    throw new IOException("Unable to create directory: " + dir.toString());  }}  }
class C{  public void addPage(Integer pageNumber,PDFPage page,PDFParser parser){  addPageRecord(pageNumber,page,parser);}  }
class C{  public boolean isAchieved(){  Object oo=get_Value(COLUMNNAME_IsAchieved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (newRecord && success)   insert_Accounting("C_Withholding_Acct","C_AcctSchema_Default",null);  return success;}  }
class C{  private void warning(String msg,Throwable th){  warning(msg);  th.printStackTrace();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SGenPackage.FEATURE_TYPE_LIBRARY__TYPES:    return getTypes();case SGenPackage.FEATURE_TYPE_LIBRARY__NAME:  return getName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:29.943 -0500",hash_original_method="EE56C51BBF77F8839109E7F97EF2C650",hash_generated_method="984A51642E868B1A8453A2229F0FFDDA") @Override public int hashCode(){  return PlainSocketFactory.class.hashCode();}  }
class C{  public void sort(ArrayList<Value[]> rows){  Collections.sort(rows,this);}  }
class C{  public void testBasicSkin(){  GenericSkinRegistry.registerClass(BasicSkin.class);  final GPO gpo=(GPO)om.createGPO();  final BasicSkin skin=(BasicSkin)gpo.getSkin(BasicSkin.class);  assertTrue(skin == gpo.getSkin(BasicSkin.class));  skin.setValue("attr:#name","Martyn");}  }
class C{  @Override public void startCompetition(){  try {    ProfilerSection section=Profiler.INSTANCE.section("Setup");    section.stop("WPILib");    LoadPhase.PRE_START.transition();    log().info("Buttering Bread...");    RobotLoader.init(Profiler.INSTANCE.section("RobotLoader"));    JavaScript.loaderInit();    section.start("CommandBus");    CommandBus.init();    section.stop("CommandBus");    RobotLoader.prestart(Profiler.INSTANCE.section("RobotLoader"));    FRCHooks.robotReady();    startCompetition_2();  } catch (  Exception e) {    CrashHandler.handle(e);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:14.573 -0500",hash_original_method="EF5D8B81A9E09E0C38DFC15BA422ECA1",hash_generated_method="79AB96931D4D2744C8AC02B11E3A7517") @Override public int hashCode(){  return name.hashCode();}  }
class C{  public boolean isSubtitleEnabled(){  return mCollapsingSubtitleEnabled;}  }
class C{  public GridStringBuilder appendHex(long val){  String hex=Long.toHexString(val);  int len=hex.length();  for (int i=0; i < 16 - len; i++)   a('0');  a(hex);  return this;}  }
class C{  private void sendExternalUpdatesIfNecessary(String registrarName,Map<String,Object> existingRegistrar,Map<String,Object> updatedRegistrar){  Map<?,?> diffs=DiffUtils.deepDiff(existingRegistrar,updatedRegistrar,true);  @SuppressWarnings("unchecked") Set<String> changedKeys=(Set<String>)diffs.keySet();  if (CollectionUtils.difference(changedKeys,"lastUpdateTime").isEmpty()) {    return;  }  SyncRegistrarsSheetAction.enqueueBackendTask();  ImmutableList<String> toEmailAddress=CONFIG.getRegistrarChangesNotificationEmailAddresses();  if (!toEmailAddress.isEmpty()) {    SendEmailUtils.sendEmail(toEmailAddress,String.format("Registrar %s updated",registrarName),"The following changes were made to the registrar:\n" + DiffUtils.prettyPrintDiffedMap(diffs,null));  }}  }
class C{  public char previous(){  return iter.previous();}  }
class C{  protected void addStatePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ExitState_state_feature"),getString("_UI_PropertyDescriptor_description","_UI_ExitState_state_feature","_UI_ExitState_type"),SexecPackage.Literals.EXIT_STATE__STATE,true,false,true,null,null,null));}  }
class C{  public static int computeSampleSize(BitmapFactory.Options options,int minSideLength,int maxNumOfPixels){  int initialSize=computeInitialSampleSize(options,minSideLength,maxNumOfPixels);  int roundedSize;  if (initialSize <= 8) {    roundedSize=1;    while (roundedSize < initialSize) {      roundedSize<<=1;    }  } else {    roundedSize=(initialSize + 7) / 8 * 8;  }  return roundedSize;}  }
class C{  private boolean matchesField(Format.Field attribute){  if (this.attribute != null) {    return this.attribute.equals(attribute);  }  return false;}  }
class C{  void addAlias(String alias){  if ((aliases == null) || (aliases.size() == 0)) {    aliases=new ArrayList<String>();  }  aliases.add(alias);}  }
class C{  private EFS(){  super();}  }
class C{  private void checkCompile(){  for (  JspServletWrapper jsw : jsps.values()) {    if (jsw.isTagFile()) {      continue;    }    JspCompilationContext ctxt=jsw.getJspEngineContext();synchronized (jsw) {      try {        ctxt.compile();      } catch (      FileNotFoundException ex) {        ctxt.incrementRemoved();      }catch (      Throwable t) {        jsw.getServletContext().log(Localizer.getMessage("jsp.error.background.compile"),t);      }    }  }}  }
class C{  public static void main(final String[] args){  SpringApplication.run(RaspberryPiTemperatureRecorderApplication.class,args);}  }
class C{  public int fontSize(){  return 0;}  }
class C{  public static FileDescriptor open(String path,int flags) throws FileNotFoundException {  FileDescriptor fd=null;  try {    int mode=((flags & O_ACCMODE) == O_RDONLY) ? 0 : 0600;    fd=Libcore.os.open(path,flags,mode);    if (fd.valid()) {      if (S_ISDIR(Libcore.os.fstat(fd).st_mode)) {        throw new ErrnoException("open",EISDIR);      }    }    return fd;  } catch (  ErrnoException errnoException) {    try {      if (fd != null) {        IoUtils.close(fd);      }    } catch (    IOException ignored) {    }    FileNotFoundException ex=new FileNotFoundException(path + ": " + errnoException.getMessage());    ex.initCause(errnoException);    throw ex;  }}  }
class C{  public DShowTranscodeJob(MediaFile mf,String inFormatName,sage.media.format.ContainerFormat targetFormat,boolean replaceOriginal,java.io.File inDestFile){  super(mf,inFormatName,targetFormat,replaceOriginal,inDestFile);}  }
class C{  protected boolean waitForAvailableRecords(long timeout,TimeUnit unit){  assertThat(timeout).isGreaterThanOrEqualTo(0);  long now=System.currentTimeMillis();  long stop=now + unit.toMillis(timeout);  while (System.currentTimeMillis() < stop) {    if (!consumedLines.isEmpty())     break;  }  return consumedLines.isEmpty() ? false : true;}  }
class C{  @Override public QueueBrowser createBrowser(final Queue queue) throws JMSException {  if (cri.getType() == ActiveMQRAConnectionFactory.TOPIC_CONNECTION || cri.getType() == ActiveMQRAConnectionFactory.XA_TOPIC_CONNECTION) {    throw new IllegalStateException("Cannot create browser for javax.jms.TopicSession");  }  Session session=getSessionInternal();  if (ActiveMQRASession.trace) {    ActiveMQRALogger.LOGGER.trace("createBrowser " + session + " queue="+ queue);  }  QueueBrowser result=session.createBrowser(queue);  if (ActiveMQRASession.trace) {    ActiveMQRALogger.LOGGER.trace("createdBrowser " + session + " browser="+ result);  }  return result;}  }
class C{  private static CacheConfiguration<Long,Person> cacheConfiguration(){  CacheJdbcPojoStoreFactory<Long,Person> storeFactory=new CacheJdbcPojoStoreFactory<>();  storeFactory.setDataSourceBean("h2-example-db");  storeFactory.setDialect(new H2Dialect());  JdbcType jdbcType=new JdbcType();  jdbcType.setCacheName(CACHE_NAME);  jdbcType.setDatabaseSchema("PUBLIC");  jdbcType.setDatabaseTable("PERSON");  jdbcType.setKeyType("java.lang.Long");  jdbcType.setKeyFields(new JdbcTypeField(Types.BIGINT,"ID",Long.class,"id"));  jdbcType.setValueType("org.apache.ignite.examples.model.Person");  jdbcType.setValueFields(new JdbcTypeField(Types.BIGINT,"ID",Long.class,"id"),new JdbcTypeField(Types.VARCHAR,"FIRST_NAME",String.class,"firstName"),new JdbcTypeField(Types.VARCHAR,"LAST_NAME",String.class,"lastName"));  storeFactory.setTypes(jdbcType);  CacheConfiguration<Long,Person> cfg=new CacheConfiguration<>(CACHE_NAME);  cfg.setCacheStoreFactory(storeFactory);  cfg.setAtomicityMode(TRANSACTIONAL);  cfg.setStoreKeepBinary(true);  cfg.setReadThrough(true);  cfg.setWriteThrough(true);  return cfg;}  }
class C{  public static JobDefinition cronJobDefinition(final String jobType,final String jobName,final String description,final String cron,final int restarts,final Optional<Duration> maxAge){  return new DefaultJobDefinition(jobType,jobName,description,maxAge,Optional.empty(),Optional.of(cron),restarts,0,Optional.empty());}  }
class C{  public Kernel(int offset,double[] values){  this.values=Arrays.copyOf(values,values.length);  this.offset=offset;}  }
class C{  public JSONObject put(String key,double value) throws JSONException {  this.put(key,new Double(value));  return this;}  }
class C{  protected Vec4 computeReferenceCenter(DrawContext dc){  Position pos=this.getReferencePosition();  if (pos == null)   return null;  return this.computePoint(dc.getTerrain(),pos);}  }
class C{  public void generateAndTranslateKey(byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException, InvalidKeyException {  SecretKey key1=getSecretKeyForPBKDF2(algoForTest,salt);  SecretKeyFactory skf=SecretKeyFactory.getInstance(algoForTest);  SecretKey key2=skf.translateKey(key1);  if (!Arrays.equals(key1.getEncoded(),key2.getEncoded())) {    System.out.println("Key1=" + new String(key1.getEncoded()) + " key2="+ new String(key2.getEncoded())+ " salt="+ new String(salt));    throw new RuntimeException("generateAndTranslateKey test case failed: the  key1 and" + " key2 values in its primary encoding format are" + " not the same for " + algoForTest + " algorithm.");  }}  }
class C{  private void parseFile(PDFPassword password) throws IOException {  buf.rewind();  String versionLine=readLine();  if (versionLine.startsWith(VERSION_COMMENT)) {    processVersion(versionLine.substring(VERSION_COMMENT.length()));  }  buf.rewind();  byte[] scan=new byte[32];  int scanPos=buf.remaining() - scan.length;  int loc=0;  while (scanPos >= 0) {    buf.position(scanPos);    buf.get(scan);    String scans=new String(scan);    loc=scans.indexOf("startxref");    if (loc > 0) {      if (scanPos + loc + scan.length <= buf.limit()) {        scanPos=scanPos + loc;        loc=0;      }      break;    }    scanPos-=scan.length - 10;  }  if (scanPos < 0) {    throw new IOException("This may not be a PDF File");  }  buf.position(scanPos);  buf.get(scan);  String scans=new String(scan);  loc+=10;  if (scans.charAt(loc) < 32) {    loc++;  }  while (scans.charAt(loc) == 32) {    loc++;  }  int numstart=loc;  while (loc < scans.length() && scans.charAt(loc) >= '0' && scans.charAt(loc) <= '9') {    loc++;  }  int xrefpos=Integer.parseInt(scans.substring(numstart,loc));  buf.position(xrefpos);  try {    readTrailer(password);  } catch (  UnsupportedEncryptionException e) {    throw new PDFParseException(e.getMessage(),e);  }}  }
class C{  public double pdf(double x){  if (x < 0.0)   return 0.0;  return lambda * Math.exp(-x * lambda);}  }
class C{  public Boolean isIsRequired(){  return isRequired;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.STRING_EVALUATOR__TOTO:    setToto(TOTO_EDEFAULT);  return;case GamlPackage.STRING_EVALUATOR__EXPR:setExpr((Expression)null);return;}super.eUnset(featureID);}  }
class C{  @SuppressWarnings("nls") protected void writePath(Shape s){  PathIterator segments=s.getPathIterator(null);  double[] coords=new double[6];  for (int i=0; !segments.isDone(); i++, segments.next()) {    if (i > 0) {      write(" ");    }    int segmentType=segments.currentSegment(coords);switch (segmentType) {case PathIterator.SEG_MOVETO:      write("M",coords[0],",",coords[1]);    break;case PathIterator.SEG_LINETO:  write("L",coords[0],",",coords[1]);break;case PathIterator.SEG_CUBICTO:write("C",coords[0],",",coords[1]," ",coords[2],",",coords[3]," ",coords[4],",",coords[5]);break;case PathIterator.SEG_QUADTO:write("Q",coords[0],",",coords[1]," ",coords[2],",",coords[3]);break;case PathIterator.SEG_CLOSE:write("Z");break;default :throw new IllegalStateException("Unknown path operation.");}}}  }
class C{  public ASFBay(double space,int doors,int bayNumber){  totalSpace=space;  currentSpace=space;  this.doors=doors;  doorsNext=doors;  recoverySlots=initializeRecoverySlots();  this.bayNumber=bayNumber;}  }
class C{  public TriggerOption withEarlyFiringsAtEvery(Duration duration){  TimeTrigger trigger=new TimeTrigger(Type.EARLY,duration);  triggerList.add(trigger);  return this;}  }
class C{  public ReactiveSeq<T> reactiveSeq(){  return topic.stream();}  }
class C{  public MaterializeBuilder withUseScrimInsetsLayout(boolean useScrimInsetsLayout){  this.mUseScrimInsetsLayout=useScrimInsetsLayout;  return this;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == DeprecatableElement.class) {switch (derivedFeatureID) {case SGenPackage.FEATURE_PARAMETER__DEPRECATED:      return SGenPackage.DEPRECATABLE_ELEMENT__DEPRECATED;case SGenPackage.FEATURE_PARAMETER__COMMENT:    return SGenPackage.DEPRECATABLE_ELEMENT__COMMENT;default :  return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  private void addObjectToUnManagedConsistencyGroup(XtremIOClient xtremIOClient,UnManagedVolume unManagedVolume,String cgNameToProcess,StorageSystem storageSystem,String xioClusterName,DbClient dbClient) throws Exception {  if (!unSupportedCG.isEmpty() && unSupportedCG.contains(cgNameToProcess.toString())) {    log.warn("Skipping CG {} as it contains volumes belonging to multiple CGs and this is not supported",cgNameToProcess.toString());    return;  }  log.info("Unmanaged volume {} belongs to consistency group {} on the array",unManagedVolume.getLabel(),cgNameToProcess);  unManagedVolume.getVolumeCharacterstics().put(SupportedVolumeCharacterstics.IS_VOLUME_ADDED_TO_CONSISTENCYGROUP.toString(),Boolean.TRUE.toString());  XtremIOConsistencyGroup xioCG=xtremIOClient.getConsistencyGroupDetails(cgNameToProcess.toString(),xioClusterName);  String unManagedCGNativeGuid=NativeGUIDGenerator.generateNativeGuidForCG(storageSystem.getNativeGuid(),xioCG.getGuid());  UnManagedConsistencyGroup unManagedCG=null;  if (unManagedCGToUpdateMap.containsKey(unManagedCGNativeGuid)) {    unManagedCG=unManagedCGToUpdateMap.get(unManagedCGNativeGuid);    log.info("Unmanaged consistency group {} was previously added to the unManagedCGToUpdateMap",unManagedCG.getLabel());  } else {    unManagedCG=DiscoveryUtils.checkUnManagedCGExistsInDB(dbClient,unManagedCGNativeGuid);    if (null == unManagedCG) {      unManagedCG=createUnManagedCG(unManagedCGNativeGuid,xioCG,storageSystem.getId(),dbClient);      log.info("Created unmanaged consistency group: {}",unManagedCG.getId().toString());    } else {      log.info("Unmanaged consistency group {} was previously added to the database",unManagedCG.getLabel());      log.info("Cleaning out unmanaged volume map from unmanaged consistency group: {}",unManagedCG.getLabel());      unManagedCG.getUnManagedVolumesMap().clear();    }  }  log.info("Adding unmanaged volume {} to unmanaged consistency group {}",unManagedVolume.getLabel(),unManagedCG.getLabel());  unManagedVolume.getVolumeInformation().put(SupportedVolumeInformation.UNMANAGED_CONSISTENCY_GROUP_URI.toString(),unManagedCG.getId().toString());  unManagedCG.getUnManagedVolumesMap().put(unManagedVolume.getNativeGuid(),unManagedVolume.getId().toString());  unManagedCGToUpdateMap.put(unManagedCGNativeGuid,unManagedCG);  allCurrentUnManagedCgURIs.add(unManagedCG.getId());}  }
class C{  public Source<BigDecimal> withScale(int scale){  return BigDecimals.randomWithScale(maxLengthOfBigIntegerByteArray,scale);}  }
class C{  public void close(){  core.close();}  }
class C{  void addToSubroutine(final long id,final int nbSubroutines){  if ((status & VISITED) == 0) {    status|=VISITED;    srcAndRefPositions=new int[nbSubroutines / 32 + 1];  }  srcAndRefPositions[(int)(id >>> 32)]|=(int)id;}  }
class C{  @SuppressWarnings("unchecked") public static <T extends JsonElement>T deepCopy(T el){  if (el == null) {    return (T)JsonNull.INSTANCE;  } else   if (el.isJsonArray()) {    JsonArray array=new JsonArray();    for (    JsonElement subEl : el.getAsJsonArray()) {      array.add(deepCopy(subEl));    }    return (T)array;  } else   if (el.isJsonObject()) {    JsonObject object=new JsonObject();    for (    Map.Entry<String,JsonElement> entry : el.getAsJsonObject().entrySet()) {      object.add(entry.getKey(),deepCopy(entry.getValue()));    }    return (T)object;  } else {    return (T)el;  }}  }
class C{  private boolean isSolvable(int method) throws NullPointerException {  if (solved) {    return solvable;  }  if (!reducedRowEchelonForm) {    reducedRowEchelonForm(method);  }  for (int i=rank; i < rhs.length; i++) {    if (Math.abs(rhs[row[i]]) > DELTA) {      solvable=false;      return false;    }  }  solvable=true;  return true;}  }
class C{  public AttributeCertificateIssuer(AttCertIssuer issuer){  form=issuer.getIssuer();}  }
class C{  @Override public void evaluateResponse(Vertex output,Vertex response,Vertex meta){  Collection<Relationship> actions=null;  if (meta != null) {    actions=meta.getRelationships(Primitive.ACTION);  }  if (actions == null) {    actions=response.getRelationships(Primitive.ACTION);  }  if (actions != null) {    for (    Relationship relationship : actions) {      output.addWeakRelationship(Primitive.ACTION,relationship.getTarget(),relationship.getCorrectness());    }  }  Collection<Relationship> poses=null;  if (meta != null) {    poses=meta.getRelationships(Primitive.POSE);  }  if (poses == null) {    poses=response.getRelationships(Primitive.POSE);  }  if (poses != null) {    for (    Relationship relationship : poses) {      output.addWeakRelationship(Primitive.POSE,relationship.getTarget(),relationship.getCorrectness());    }  }}  }
class C{  public FontAction(){  super();}  }
class C{  private ListResources(Monitoring monitoringService,String projectResource){  this.monitoringService=monitoringService;  this.projectResource=projectResource;  this.outputStream=System.out;}  }
class C{  private void zkStore(){  boolean hasChanged=this.selectorsChanged.getAndSet(false);  if (!hasChanged) {    return;  }  for (  String znode : currentSubsZnodes) {    try {      this.subsCurator.delete().guaranteed().forPath(znode);    } catch (    Exception e) {      LOG.error("Error while deleting " + znode,e);    }  }  currentSubsZnodes.clear();synchronized (this.selectors) {    int chunkid=-1;    long chunksize=0L;    GeoDirectorySubscriptions thriftSubs=null;    for (    String token : this.selectors.keySet()) {      for (      String selector : this.selectors.get(token)) {        if (null == thriftSubs) {          thriftSubs=new GeoDirectorySubscriptions();          chunksize=0L;          chunkid++;        } else {          if (chunksize + selector.length() + token.length() > this.maxSubsZnodeSize) {            storeChunk(chunkid,thriftSubs);            thriftSubs=new GeoDirectorySubscriptions();            chunksize=0L;            chunkid++;          }        }        if (0 == thriftSubs.getSubscriptionsSize() || !thriftSubs.getSubscriptions().containsKey(token)) {          thriftSubs.putToSubscriptions(token,new HashSet<String>());        }      }    }    if (null != thriftSubs && thriftSubs.getSubscriptionsSize() > 0) {      storeChunk(chunkid,thriftSubs);    }  }}  }
class C{  public ActionTargetNotIgnoringSender(String targetAttribute){  this.targetAttribute=targetAttribute;}  }
class C{  public void removeNodeInformationProvider(String node){  nodeInformationProviders.remove(node);}  }
class C{  @CheckReturnValue public <T>Subject2<A,T> asWithPrecursor(Function<A,T> mapping,Function<T,String> typeToString){  final Generator<Pair<A,T>> g=null;  final Shrink<Pair<A,T>> s=null;  final AsString<Pair<A,T>> desc=null;  final Source<Pair<A,T>> gen=Source.of(g).withShrinker(s).describedAs(desc);  return new PrecursorTheoryBuilder1<A,T>(this.state,gen,this.assumptions);}  }
class C{  public static Number count(Iterator self,Object value){  long answer=0;  while (self.hasNext()) {    if (DefaultTypeTransformation.compareEqual(self.next(),value)) {      ++answer;    }  }  if (answer <= Integer.MAX_VALUE)   return (int)answer;  return answer;}  }
class C{  private void tred2(){  for (int j=0; j < n; j++) {    d[j]=V.$[V.addr.op(n - 1,j)];  }  for (int i=n - 1; i > 0; i--) {    double scale=0.0;    double h=0.0;    for (int k=0; k < i; k++) {      scale=scale + Math.abs(d[k]);    }    if (scale == 0.0) {      e[i]=d[i - 1];      for (int j=0; j < i; j++) {        d[j]=V.$[V.addr.op(i - 1,j)];        V.$[V.addr.op(i,j)]=0.0;        V.$[V.addr.op(j,i)]=0.0;      }    } else {      for (int k=0; k < i; k++) {        d[k]/=scale;        h+=d[k] * d[k];      }      double f=d[i - 1];      double g=Math.sqrt(h);      if (f > 0) {        g=-g;      }      e[i]=scale * g;      h=h - f * g;      d[i - 1]=f - g;      for (int j=0; j < i; j++) {        e[j]=0.0;      }      for (int j=0; j < i; j++) {        f=d[j];        V.$[V.addr.op(j,i)]=f;        g=e[j] + V.$[V.addr.op(j,j)] * f;        for (int k=j + 1; k <= i - 1; k++) {          g+=V.$[V.addr.op(k,j)] * d[k];          e[k]+=V.$[V.addr.op(k,j)] * f;        }        e[j]=g;      }      f=0.0;      for (int j=0; j < i; j++) {        e[j]/=h;        f+=e[j] * d[j];      }      final double hh=f / (h + h);      for (int j=0; j < i; j++) {        e[j]-=hh * d[j];      }      for (int j=0; j < i; j++) {        f=d[j];        g=e[j];        for (int k=j; k <= i - 1; k++) {          V.$[V.addr.op(k,j)]-=(f * e[k] + g * d[k]);        }        d[j]=V.$[V.addr.op(i - 1,j)];        V.$[V.addr.op(i,j)]=0.0;      }    }    d[i]=h;  }  for (int i=0; i < n - 1; i++) {    V.$[V.addr.op(n - 1,i)]=V.$[V.addr.op(i,i)];    V.$[V.addr.op(i,i)]=1.0;    final double h=d[i + 1];    if (h != 0.0) {      for (int k=0; k <= i; k++) {        d[k]=V.$[V.addr.op(k,i + 1)] / h;      }      for (int j=0; j <= i; j++) {        double g=0.0;        for (int k=0; k <= i; k++) {          g+=V.$[V.addr.op(k,i + 1)] * V.$[V.addr.op(k,j)];        }        for (int k=0; k <= i; k++) {          V.$[V.addr.op(k,j)]-=g * d[k];        }      }    }    for (int k=0; k <= i; k++) {      V.$[V.addr.op(k,i + 1)]=0.0;    }  }  for (int j=0; j < n; j++) {    d[j]=V.$[V.addr.op(n - 1,j)];    V.$[V.addr.op(n - 1,j)]=0.0;  }  V.$[V.addr.op(n - 1,n - 1)]=1.0;  e[0]=0.0;}  }
class C{  public int index(){  return currentBufferIndex;}  }
class C{  public static Result sudo(long timeout,Pattern maskFilter,String... args){  String userName=System.getProperty("user.name");  if (userName.equals("root")) {    return exec(timeout,maskFilter,args);  }  List<String> tmpList=new ArrayList(Arrays.asList(args));  tmpList.add(0,"sudo");  String[] newArray=tmpList.toArray(new String[tmpList.size()]);  return exec(timeout,maskFilter,newArray);}  }
class C{  private void indexPoint(PerField fp,IndexableField field) throws IOException {  int pointDimensionCount=field.fieldType().pointDimensionCount();  int dimensionNumBytes=field.fieldType().pointNumBytes();  if (fp.fieldInfo.getPointDimensionCount() == 0) {    fieldInfos.globalFieldNumbers.setDimensions(fp.fieldInfo.number,fp.fieldInfo.name,pointDimensionCount,dimensionNumBytes);  }  fp.fieldInfo.setPointDimensions(pointDimensionCount,dimensionNumBytes);  if (fp.pointValuesWriter == null) {    fp.pointValuesWriter=new PointValuesWriter(docWriter,fp.fieldInfo);  }  fp.pointValuesWriter.addPackedValue(docState.docID,field.binaryValue());}  }
class C{  final Node succ(Node p){  Node next=p.next;  return (p == next) ? head : next;}  }
class C{  public void findAndUndo(Object obj){  super.findAndUndo(obj);  if (obj == null) {    return;  }  if (obj instanceof MouseDelegator) {    ((MouseDelegator)obj).removePropertyChangeListener(this);  }  for (  Layer layer : getLayers()) {    layer.findAndUndo(obj);  }}  }
class C{  public XYShapeAnnotation(Shape shape){  this(shape,new BasicStroke(1.0f),Color.black);}  }
class C{  public String toString(){  return name;}  }
class C{  private boolean isTextEditorHidden(){  return textEditorHidden;}  }
class C{  public synchronized void removeIndex(IPath containerPath){  if (JobManager.VERBOSE || DEBUG)   Util.verbose("removing index " + containerPath);  IndexLocation indexLocation=computeIndexLocation(containerPath);  Index index=getIndex(indexLocation);  File indexFile=null;  if (index != null) {    index.monitor=null;    indexFile=index.getIndexFile();  }  if (indexFile == null)   indexFile=indexLocation.getIndexFile();  if (this.indexStates.get(indexLocation) == REUSE_STATE) {    indexLocation.close();    this.indexLocations.put(containerPath,null);  } else   if (indexFile != null && indexFile.exists()) {    if (DEBUG)     Util.verbose("removing index file " + indexFile);    indexFile.delete();  }  this.indexes.removeKey(indexLocation);  if (IS_MANAGING_PRODUCT_INDEXES_PROPERTY) {    this.indexLocations.removeKey(containerPath);  }  updateIndexState(indexLocation,null);}  }
class C{  public void checkCast(final Type type){  if (!type.equals(OBJECT_TYPE)) {    typeInsn(Opcodes.CHECKCAST,type);  }}  }
class C{  public BuildImageParams withMemoryLimit(long memoryLimit){  this.memoryLimit=memoryLimit;  return this;}  }
class C{  public static int day(){  return getTotalNumberOfDays(year(),month());}  }
class C{  public static long secureRandomLong(){  SecureRandom sr=getSecureRandom();synchronized (sr) {    return sr.nextLong();  }}  }
class C{  public void addMethod(MethodInfo minfo) throws DuplicateMemberException {  testExistingMethod(minfo);  methods.add(minfo);}  }
class C{  void reset(){  if (DO_CLEAN_DIRTY) {    final int recLimit=recCurveStack.length - 1;    for (int i=recLimit; i >= 0; i--) {      Arrays.fill(recCurveStack[i],0f);    }    Arrays.fill(sides,Side.LEFT);    Arrays.fill(curLeafCtrlPolyLengths,0f);    Arrays.fill(nextRoots,0f);    Arrays.fill(flatLeafCoefCache,0f);    flatLeafCoefCache[2]=-1f;  }}  }
class C{  @Override protected MkAppEntry createNewDirectoryEntry(MkAppTreeNode<O> node,DBID routingObjectID,double parentDistance){  return new MkAppDirectoryEntry(routingObjectID,parentDistance,node.getPageID(),node.coveringRadiusFromEntries(routingObjectID,this),null);}  }
class C{  public K key(){  return (K)_map._set[_index];}  }
class C{  public static String generateRandomCodeVerifier(SecureRandom entropySource,int entropyBytes){  checkNotNull(entropySource,"entropySource cannot be null");  checkArgument(MIN_CODE_VERIFIER_ENTROPY <= entropyBytes,"entropyBytes is less than the minimum permitted");  checkArgument(entropyBytes <= MAX_CODE_VERIFIER_ENTROPY,"entropyBytes is greater than the maximum permitted");  byte[] randomBytes=new byte[entropyBytes];  entropySource.nextBytes(randomBytes);  return Base64.encodeToString(randomBytes,PKCE_BASE64_ENCODE_SETTINGS);}  }
class C{  public Builder metadata(Map<String,String> metadata){  this.metadata=new HashMap<String,String>();  this.metadata.putAll(metadata);  return this;}  }
class C{  public boolean isSelfService(){  Object oo=get_Value(COLUMNNAME_IsSelfService);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public SnowballPorterFilterFactory(Map<String,String> args){  super(args);  language=get(args,"language","English");  wordFiles=get(args,PROTECTED_TOKENS);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public void removeListSelectionListener(ListSelectionListener listener){  listenerList.remove(ListSelectionListener.class,listener);}  }
class C{  public static Object clone(Object array){  Class<?> componentType=getComponentType(array.getClass());  int dims[]=getArrayLengths(array);  Object[] elements=(Object[])muxArray(array,dims,componentType);  return demuxArray(elements,dims,componentType);}  }
class C{  public GraphicsState restoreGraphicsState(GraphicsState gs,final DynamicVectorRenderer current){  if (!isStackInitialised) {    LogWriter.writeLog("No GraphicsState saved to retrieve");    gs=new GraphicsState();    gs.setTextState(new TextState());  } else   if (depth > 0) {    depth--;    gs=(GraphicsState)graphicsStateStack.pull();    gs.setTextState((TextState)textStateStack.pull());    gs.strokeColorSpace=(GenericColorSpace)strokeColorStateStack.pull();    gs.nonstrokeColorSpace=(GenericColorSpace)nonstrokeColorStateStack.pull();    final int strokeColorData=strokeColorValueStack.pull();    final int nonStrokeColorData=nonstrokeColorValueStack.pull();    gs.resetColorSpaces(strokeColorData,nonStrokeColorData);  }  if (parserOptions.isRenderPage()) {    current.drawClip(gs,parserOptions.defaultClip,false);    current.writeCustom(DynamicVectorRenderer.RESET_COLORSPACE,null);    current.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),gs.getBMValue());    current.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),gs.getBMValue());  }  return gs;}  }
class C{  @Override public boolean execute(String sql) throws SQLException {  try {    debugCodeCall("execute",sql);    return executeInternal(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static List<Long> hybridTest(GeoTimeSerie gts,int buckets_per_period,int periods_per_piece,int k,double alpha,Map<String,Object> params) throws WarpScriptException {  doubleCheck(gts);  List<Long> anomalous_ticks=new ArrayList<Long>();  if (!GTSHelper.isBucketized(gts)) {    throw new WarpScriptException("GTS must be bucketized");  }  if (k >= periods_per_piece * buckets_per_period / 2) {    throw new WarpScriptException("Upper bound of number of outliers must be less than half of the number of observations per piece");  }  GeoTimeSerie subgts=null;  GeoTimeSerie seasonal=null;  long pieces=gts.bucketcount / buckets_per_period / periods_per_piece;  int bpp=periods_per_piece * buckets_per_period;  long lb=gts.lastbucket;  long bs=gts.bucketspan;  if (null == params) {    params=new HashMap<String,Object>();  }  if (null != params.get(PERIOD_PARAM)) {    if (buckets_per_period != (int)params.get(PERIOD_PARAM)) {      throw new WarpScriptException("Incoherence between PERIOD parameter of test and PERIOD parameter of STL");    }  } else {    params.put(PERIOD_PARAM,buckets_per_period);  }  params.put(BANDWIDTH_S_PARAM,periods_per_piece);  params.put(PRECISION_PARAM,10);  params.put(ROBUSTNESS_PARAM,0);  STL stl=new STL("STL");  for (int u=0; u < pieces; u++) {    long start=lb - bs * ((pieces - u) * bpp - 1);    long stop=lb - bs * (pieces - u - 1) * bpp;    subgts=GTSHelper.subSerie(gts,start,stop,false,false,subgts);    subgts.lastbucket=stop;    subgts.bucketcount=bpp;    subgts.bucketspan=bs;    seasonal=((List<GeoTimeSerie>)stl.doGtsOp(params,subgts)).get(0);    double m=median(seasonal);    int idx=0;    for (int i=0; i < subgts.values; i++) {      idx=Arrays.binarySearch(seasonal.ticks,idx,seasonal.values,subgts.ticks[i]);      if (idx < 0) {        throw new WarpScriptException("Internal bug method hybridTest: can't find tick " + subgts.ticks[i] + " in seasonal.ticks");      } else {        subgts.doubleValues[i]-=(seasonal.doubleValues[idx] + m);      }    }    anomalous_ticks.addAll(ESDTest(subgts,k,true,alpha));  }  return anomalous_ticks;}  }
class C{  public int computeMaxStack() throws BadBytecode {  maxStack=new CodeAnalyzer(this).computeMaxStack();  return maxStack;}  }
class C{  public DepositoException(){  super(null,ELEMENT_DELETED,ArchivoModules.DEPOSITOS_MODULE);}  }
class C{  public static void cleanDepartures(TransitSchedule schedule){  for (  TransitLine transitLine : schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : transitLine.getRoutes().values()) {      final Set<Double> departureTimes=new HashSet<>();      final List<Departure> departuresToRemove=new ArrayList<>();      for (      Departure departure : transitRoute.getDepartures().values()) {        double dt=departure.getDepartureTime();        if (departureTimes.contains(dt)) {          departuresToRemove.add(departure);        } else {          departureTimes.add(dt);        }      }      for (      Departure departure2Remove : departuresToRemove) {        transitRoute.removeDeparture(departure2Remove);      }    }  }}  }
class C{  public static void checkArgument(boolean expression,Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  public Index indexingQueuesSize(Integer indexingQueuesSize){  this.indexingQueuesSize=indexingQueuesSize;  return this;}  }
class C{  public Vector3f half(Vector3fc other){  return this.add(other).normalize();}  }
class C{  public int simulateSnow(final Vector position,final double radius) throws MaxChangedBlocksException {  final double radiusSq=radius * radius;  final int ox=position.getBlockX();  final int oy=position.getBlockY();  final int oz=position.getBlockZ();  final BaseBlock ice=new BaseBlock(BlockID.ICE);  final BaseBlock snow=new BaseBlock(BlockID.SNOW);  final int ceilRadius=(int)Math.ceil(radius);  for (int x=ox - ceilRadius; x <= (ox + ceilRadius); ++x) {    int dx=x - ox;    int dx2=dx * dx;    for (int z=oz - ceilRadius; z <= (oz + ceilRadius); ++z) {      int dz=z - oz;      int dz2=dz * dz;      if (dx2 + dz2 > radiusSq) {        continue;      }      for (int y=maxY; y >= 1; --y) {        final int id=FaweCache.getId(queue.getCombinedId4Data(x,y,z));        if (id == BlockID.AIR) {          continue;        }        if ((id == BlockID.WATER) || (id == BlockID.STATIONARY_WATER)) {          this.setBlock(x,y,z,ice);          break;        }        if (BlockType.isTranslucent(id)) {          break;        }        if (y == maxY) {          break;        }        this.setBlock(x,y + 1,z,snow);        break;      }    }  }  return changes;}  }
class C{  public DataStoreModelsImpl(SQL modelsTable,IModelFileHandler<T> modelFileHandler,int modelsCacheSize){  m_modelsTable=modelsTable;  m_modelMetaDataLoader=new ModelMetaDataLoader(modelsTable);  m_modelFileHandler=modelFileHandler;  m_modelsCache=Collections.synchronizedMap(new LruCachedMap<String,T>(modelsCacheSize));  m_modelDataObject=new TreeMap<String,Object>();}  }
class C{  public void insertAfterInCodeOrder(BasicBlock old,BasicBlock toAdd){  if (IR.SANITY_CHECK)   VM._assert(toAdd.next == null);  if (IR.SANITY_CHECK)   VM._assert(toAdd.prev == null);  SpaceEffGraphNode oldNext=old.next;  if (oldNext == null) {    if (IR.SANITY_CHECK)     VM._assert(_lastNode == old);    old.append(toAdd);    _lastNode=toAdd;  } else {    old.append(toAdd);    toAdd.append(oldNext);  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public String threeLetter(){  return mThreeLetter;}  }
class C{  @Override public void openURI(GenericOpenURIEvent event){  log.debug("Called");  if (event == null) {    log.warn("Received a null event");    return;  }  log.debug("Event class is {}",event.getClass().getSimpleName());  log.debug("Received open URI request of '{}'",event.getURI());  log.debug("Broadcasting to {} listener(s)",listeners.size());  for (  GenericOpenURIEventListener listener : listeners) {    listener.onOpenURIEvent(event);  }}  }
class C{  public long executeInsert(){  acquireReference();  try {    return getSession().executeForLastInsertedRowId(getSql(),getBindArgs(),getConnectionFlags());  } catch (  SQLiteDatabaseCorruptException ex) {    onCorruption();    throw ex;  } finally {    releaseReference();  }}  }
class C{  public SimpleFragmentIntent<F> putExtra(String name,boolean[] value){  if (extras == null) {    extras=new Bundle();  }  extras.putBooleanArray(name,value);  return this;}  }
class C{  public boolean compare(String arg0,String arg1){  arg0=fixProtocol(arg0);  arg1=fixProtocol(arg1);  return this.comparator.compare(arg0,arg1);}  }
class C{  public static String decryptString(CipherTextIvMac civ,SecretKeys secretKeys,String encoding) throws UnsupportedEncodingException, GeneralSecurityException {  return new String(decrypt(civ,secretKeys),encoding);}  }
class C{  @Override public final void serialize(JsonGenerator jg,SerializerProvider provider) throws IOException, JsonProcessingException {  jg.writeStartObject();  if (_children != null) {    for (    Map.Entry<String,JsonNode> en : _children.entrySet()) {      jg.writeFieldName(en.getKey());      ((BaseJsonNode)en.getValue()).serialize(jg,provider);    }  }  jg.writeEndObject();}  }
class C{  @VisibleForTesting synchronized void rebuild(){  QueueConfigSchema queueConfigSchema=queueConfigSchemaRef.get();  int numServers=numPinLaterServers.get();  if (queueConfigSchema == null || queueConfigSchema.queues == null || queueConfigSchema.queues.isEmpty()) {    return;  }  ImmutableMap.Builder<String,QueueRateLimiter.IFace> builder=new ImmutableMap.Builder<String,QueueRateLimiter.IFace>();  for (  QueueConfigSchema.Queue queue : queueConfigSchema.queues) {    builder.put(queue.name,QueueRateLimiter.create(queue.queueConfig.maxJobsPerSecond / numServers));  }  queueRateLimitMapRef.set(builder.build());}  }
class C{  public boolean isLinesTogetherMode(){  return firstRow.getParent() == secondRow.getParent();}  }
class C{  public String maxRuleSizeTipText(){  return "The maximum number of tests in rules.";}  }
class C{  public static byte[] decode(String encoded){  if (encoded == null) {    return null;  }  char[] base64Data=encoded.toCharArray();  int len=removeWhiteSpace(base64Data);  if (len % FOURBYTE != 0) {    return null;  }  int numberQuadruple=(len / FOURBYTE);  if (numberQuadruple == 0) {    return new byte[0];  }  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0;  char d1=0, d2=0, d3=0, d4=0;  int i=0;  int encodedIndex=0;  int dataIndex=0;  decodedData=new byte[(numberQuadruple) * 3];  for (; i < numberQuadruple - 1; i++) {    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {      return null;    }    b1=base64Alphabet[d1];    b2=base64Alphabet[d2];    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {    return null;  }  b1=base64Alphabet[d1];  b2=base64Alphabet[d2];  d3=base64Data[dataIndex++];  d4=base64Data[dataIndex++];  if (!isData((d3)) || !isData((d4))) {    if (isPad(d3) && isPad(d4)) {      if ((b2 & 0xf) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 1];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      return tmp;    } else     if (!isPad(d3) && isPad(d4)) {      b3=base64Alphabet[d3];      if ((b3 & 0x3) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 2];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      return tmp;    } else {      return null;    }  } else {    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  return decodedData;}  }
class C{  public static boolean isPropertyField(String fieldName){  return !ID_FIELD_NAME.equals(fieldName) && !URI_FIELD_NAME.equals(fieldName) && !TEXT_FIELD_NAME.equals(fieldName)&& !CONTEXT_FIELD_NAME.equals(fieldName)&& fieldName.charAt(0) != '_';}  }
class C{  public Set<String> knownClasses(){  return new HashSet<String>(instructionMap.keySet());}  }
class C{  public int lastIndexOf(final StrMatcher matcher){  return lastIndexOf(matcher,size);}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,String encoding) throws IOException {  writeLines(lines,lineEnding,output,Charsets.toCharset(encoding));}  }
class C{  public void resetAnnotData(final int insetW,final int insetH,final PdfPageData pageData,final int page,final PdfObjectReader currentPdfFile,final byte[][] currentAnnotList){  this.currentPdfFile=currentPdfFile;  this.pageData=pageData;  boolean resetToEmpty=true;  addedMissingPopup=false;  compData.setPageData(pageData,insetW,insetH);  if (currentAnnotList == null) {    AfieldCount=null;    ATotalCount=0;    if (annotList != null) {      annotList[page]=null;    }    annotList=null;  } else {    int pageCount=pageData.getPageCount() + 1;    if (pageCount <= page) {      pageCount=page + 1;    }    if (annotList == null) {      annotList=new PdfArrayIterator[pageCount];      AfieldCount=new int[pageCount];    } else     if (page >= annotList.length) {      final PdfArrayIterator[] tempList=annotList;      final int[] tempCount=AfieldCount;      AfieldCount=new int[pageCount];      annotList=new PdfArrayIterator[pageCount];      for (int ii=0; ii < tempList.length; ii++) {        AfieldCount[ii]=tempCount[ii];        annotList[ii]=tempList[ii];      }    } else     if (AfieldCount == null) {      AfieldCount=new int[pageCount];    }    annotList[page]=new PdfArrayIterator(currentAnnotList);    final int size=annotList[page].getTokenCount();    AfieldCount[page]=size;    ATotalCount+=size;    resetToEmpty=false;    if (fDecoder == null) {      PDFformType=FormTypes.NON_XFA;      fDecoder=new FormStream();    }  }  resetContainers(resetToEmpty);}  }
class C{  public BytesWritable createValue(){  return ReflectionUtils.newInstance(BytesWritable.class,conf);}  }
class C{  public void windowStateChanged(WindowEvent e){}  }
class C{  public void editMessage(String content,String messageID,String channelID) throws ParseException {  if (null != ws) {    content=StringEscapeUtils.escapeJson(content);    Channel channel=getChannelByID(channelID);    if (channel == null) {      Discord4J.logger.error("Channel id " + channelID + " doesn't exist!");      return;    }    Message oldMessage=channel.getMessageByID(messageID);    try {      String response=Requests.PATCH.makeRequest(DiscordEndpoints.CHANNELS + channelID + "/messages/"+ messageID,new StringEntity("{\"content\":\"" + content + "\", \"mentions\":[]}","UTF-8"),new BasicNameValuePair("authorization",token),new BasicNameValuePair("content-type","application/json"));      JSONObject object1=(JSONObject)JSON_PARSER.parse(response);      Message newMessage=new Message((String)object1.get("id"),content,this.ourUser,getChannelByID(channelID),oldMessage.getTimestamp());      DiscordClient.this.dispatcher.dispatch(new MessageUpdateEvent(oldMessage,newMessage));      oldMessage.setContent(content);    } catch (    HTTP403Exception e) {      Discord4J.logger.error("Received 403 error attempting to send message; is your login correct?");    }  } else {    Discord4J.logger.error("Bot has not signed in yet!");  }}  }
class C{  public Annotation(String type,boolean isPersistent,String text,int layer,ImageResource image){  this(type,isPersistent,text,layer,image,null);}  }
class C{  public boolean hasPrimary(){  return getPrimary() != null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodenotationnodetype.class,args);}  }
class C{  public Builder withEmailCollection(boolean collectEmail){  this.isEmailRequired=collectEmail;  return this;}  }
class C{  private void cancelAcquire(Node node){  if (node == null)   return;  node.thread=null;  Node pred=node.prev;  while (pred.waitStatus > 0)   node.prev=pred=pred.prev;  Node predNext=pred.next;  node.waitStatus=Node.CANCELLED;  if (node == tail && compareAndSetTail(node,pred)) {    compareAndSetNext(pred,predNext,null);  } else {    int ws;    if (pred != head && ((ws=pred.waitStatus) == Node.SIGNAL || (ws <= 0 && compareAndSetWaitStatus(pred,ws,Node.SIGNAL))) && pred.thread != null) {      Node next=node.next;      if (next != null && next.waitStatus <= 0)       compareAndSetNext(pred,predNext,next);    } else {      unparkSuccessor(node);    }    node.next=node;  }}  }
class C{  public void destroy(){  for (int i=0; i < runs.size(); i++) {    final Run run=(Run)runs.get(i);    run.destroy();  }}  }
class C{  @Override public boolean equals(final Object o){  if (o == this)   return true;  if (!(o instanceof Bool))   return false;  return value == ((Bool)o).value;}  }
class C{  public void put(String key,Image image){  Entry entry=getEntry(key);  if (entry == null) {    entry=new Entry();    putEntry(key,entry);  }  if (entry.image != null || entry.descriptor != null) {    throw new IllegalArgumentException("ImageRegistry key already in use: " + key);  }  entry.image=image;  entry.descriptor=new OriginalImageDescriptor(image,manager.getDevice());  try {    manager.create(entry.descriptor);  } catch (  DeviceResourceException e) {  }}  }
class C{  public NavigationPopup(Profile profile,Context context,NavigationController navigationController,boolean isForward){  super(context,null,android.R.attr.popupMenuStyle);  mProfile=profile;  mContext=context;  mNavigationController=navigationController;  mHistory=mNavigationController.getDirectedNavigationHistory(isForward,MAXIMUM_HISTORY_ITEMS);  mAdapter=new NavigationAdapter();  mFaviconSize=mContext.getResources().getDimensionPixelSize(R.dimen.default_favicon_size);  setModal(true);  setInputMethodMode(PopupWindow.INPUT_METHOD_NOT_NEEDED);  setHeight(ViewGroup.LayoutParams.WRAP_CONTENT);  setOnItemClickListener(this);  setAdapter(new HeaderViewListAdapter(null,null,mAdapter));  mListItemFactory=new ListItemFactory(context);}  }
class C{  public void stopContainer(String container,long timeout,TimeUnit timeunit) throws IOException {  final List<Pair<String,?>> headers=new ArrayList<>(2);  headers.add(Pair.of("Content-Type",MediaType.TEXT_PLAIN));  headers.add(Pair.of("Content-Length",0));  try (DockerConnection connection=openConnection(dockerDaemonUri).method("POST").path("/containers/" + container + "/stop").query("t",timeunit.toSeconds(timeout)).headers(headers)){    final DockerResponse response=connection.request();    final int status=response.getStatus();    if (!(NO_CONTENT.getStatusCode() == status || NOT_MODIFIED.getStatusCode() == status)) {      throw new DockerException(getDockerExceptionMessage(response),status);    }  } }  }
class C{  @YesNoCancelResult public static int showYesNoCancelDialog(String message,@Nls(capitalization=Nls.Capitalization.Title) String title,Icon icon){  return showYesNoCancelDialog(message,title,YES_BUTTON,NO_BUTTON,CANCEL_BUTTON,icon);}  }
class C{  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory){  return factory.getDefaultEnvelope();}  }
class C{  QuickList(){  myName="";}  }
class C{  static boolean isShutdownImminent(){  return _shutdownImminent;}  }
class C{  private void updateButtonSelection(){  String controlbutton=(String)buttonList.getSelectedValue();  if (controlbutton == null) {    resetView();    return;  }  list=map.getControls(ControllerButton.valueOf(controlbutton));  jLabel4.setText((index + 1) + "");  if (list == null) {    list=new LinkedList<AssignableControl>();    commandList.setSelectedIndex(0);    setDefaultMode();    return;  }  if (list.size() <= index) {    commandList.setSelectedIndex(0);    setDefaultMode();    return;  }  AssignableControl control=list.get(index);  commandList.setSelectedItem(control.getCommand().name());  if (control.getCommand() == Command.PLAY_ANIMATION) {    setAnimMode();    valueList.setSelectedItem(control.getAnim().name());  } else   if (control.getCommand() == Command.PLAY_LED) {    setLEDMode();    valueList.setSelectedItem(control.getLed().name());  } else {    setDefaultMode();  }  durationSpinner.setValue(control.getDuration());  frequencySpinner.setValue(control.getFrequency());  delaySpinner.setValue(control.getDelay());}  }
class C{  protected int index(long val){  byte[] states=_states;  long[] set=_set;  int length=states.length;  int hash=_hashingStrategy.computeHashCode(val) & 0x7fffffff;  int index=hash % length;  if (states[index] != FREE && (states[index] == REMOVED || set[index] != val)) {    int probe=1 + (hash % (length - 2));    do {      index-=probe;      if (index < 0) {        index+=length;      }    } while (states[index] != FREE && (states[index] == REMOVED || set[index] != val));  }  return states[index] == FREE ? -1 : index;}  }
class C{  private boolean executeStatement(){  if (m_sqlUpdate == null)   return false;  int no=0;  if (m_isInsert && m_numberColumns > 2) {    m_sqlInsert.append(m_sqlInsertValue).append(")");    log.info(m_sqlInsert.toString());    no=DB.executeUpdate(m_sqlInsert.toString(),get_TrxName());    if (no == -1) {      m_errors++;    } else     if (no == 0) {      log.warning("Insert failed - " + m_sqlInsert);      m_checkFailed++;    } else     m_ok++;  } else {    m_sqlUpdate.append(m_sqlUpdateWhere);    log.info(m_sqlUpdate.toString());    no=DB.executeUpdate(m_sqlUpdate.toString(),get_TrxName());    if (no == -1) {      m_errors++;    } else     if (no == 0) {      log.warning("Failed - " + m_sqlUpdate);      m_checkFailed++;    } else     m_ok++;  }  m_sqlUpdate=null;  m_sqlUpdateWhere=null;  m_sqlInsert=null;  m_sqlInsertValue=null;  m_columns=new ArrayList<String>();  return no > 0;}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#processingInstruction: " + target + ", "+ data);  if (m_contentHandler != null) {    m_contentHandler.processingInstruction(target,data);  }}  }
class C{  public Polygon2D center(ReadonlyVec2D origin){  Vec2D centroid=getCentroid();  Vec2D delta=origin != null ? origin.sub(centroid) : centroid.invert();  for (  Vec2D v : vertices) {    v.addSelf(delta);  }  return this;}  }
class C{  public boolean uninstallCounters(){  return debugCounterService.removeCounterHierarchy(COUNTER_MODULE,dpidAndConnIdString);}  }
class C{  public Boolean isHod(final Long assignId){  final List<HeadOfDepartments> hodList=employeeDepartmentRepository.getAllHodDepartments(assignId);  return !hodList.isEmpty();}  }
class C{  public void updateObservaciones(String id,String observaciones){  final String qual=new StringBuffer().append("WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID,id)).toString();  HashMap mapColumnsToUpdate=new HashMap();  mapColumnsToUpdate.put(CAMPO_OBSERVACIONES,observaciones);  updateFields(qual,mapColumnsToUpdate,TABLE_NAME);}  }
class C{  public static double[] readDoubles(String filename){  return new In(filename).readAllDoubles();}  }
class C{  public ShadowGenerator(View view,Paint paint){  this.mView=view;  this.mResources=mView.getContext().getResources();  this.shadowPaint=paint;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {    mView.setLayerType(View.LAYER_TYPE_SOFTWARE,shadowPaint);  }  animationSet=new AnimationSet(true);  animationSet.setInterpolator(interpolator);  maxShadowOffset=mResources.getDimension(R.dimen.mat_fab_shadow_offset) * 1.5f;  minShadowOffset=maxShadowOffset / 1.5f;  maxShadowSize=mResources.getDimension(R.dimen.mat_fab_shadow_max_radius);  minShawdowSize=mResources.getDimension(R.dimen.mat_fab_shadow_min_radius) / 2;  init();}  }
class C{  public FileInputStream openLastValidVersionForReading() throws IllegalStateException, FileNotFoundException {  if (randomAccessFile != null)   throw new IllegalStateException("Already started writing.");  inputStream=new FileInputStream(getCurrentVersionFileName());  return inputStream;}  }
class C{  @Override protected int computeHorizontalScrollExtent(){  return 1;}  }
class C{  public static String[] splitc(String src,char[] delimiters){  if ((delimiters.length == 0) || (src.length() == 0)) {    return new String[]{src};  }  char[] srcc=src.toCharArray();  int maxparts=srcc.length + 1;  int[] start=new int[maxparts];  int[] end=new int[maxparts];  int count=0;  start[0]=0;  int s=0, e;  if (CharUtil.equalsOne(srcc[0],delimiters) == true) {    end[0]=0;    count++;    s=CharUtil.findFirstDiff(srcc,1,delimiters);    if (s == -1) {      return new String[]{EMPTY,EMPTY};    }    start[1]=s;  }  while (true) {    e=CharUtil.findFirstEqual(srcc,s,delimiters);    if (e == -1) {      end[count]=srcc.length;      break;    }    end[count]=e;    count++;    s=CharUtil.findFirstDiff(srcc,e,delimiters);    if (s == -1) {      start[count]=end[count]=srcc.length;      break;    }    start[count]=s;  }  count++;  String[] result=new String[count];  for (int i=0; i < count; i++) {    result[i]=src.substring(start[i],end[i]);  }  return result;}  }
class C{  public void testContainsAll(){  LinkedBlockingDeque q=populatedDeque(SIZE);  LinkedBlockingDeque p=new LinkedBlockingDeque(SIZE);  for (int i=0; i < SIZE; ++i) {    assertTrue(q.containsAll(p));    assertFalse(p.containsAll(q));    p.add(new Integer(i));  }  assertTrue(p.containsAll(q));}  }
class C{  public boolean verify(byte[] signature,boolean truncation_ok){  byte[] expected=sign();  if (truncation_ok && signature.length < expected.length) {    byte[] truncated=new byte[signature.length];    System.arraycopy(expected,0,truncated,0,truncated.length);    expected=truncated;  }  return Arrays.equals(signature,expected);}  }
class C{  public static Boolean checkAvailable(){  String state=Environment.getExternalStorageState();  if (Environment.MEDIA_MOUNTED.equals(state)) {    return true;  } else {    return false;  }}  }
class C{  public IPv4AddrIV(final IPv4Address value){  super(DTE.Extension);  this.value=value;}  }
class C{  static public void assertOnTopEdgeOfScreen(View origin,View view){  int[] xy=new int[2];  view.getLocationOnScreen(xy);  int[] xyRoot=new int[2];  origin.getLocationOnScreen(xyRoot);  int bottom=xy[1] + view.getHeight();  int bottomOfRoot=xyRoot[1] + origin.getHeight();  assertTrue(bottom < bottomOfRoot);  assertTrue(bottom > xyRoot[1]);  assertTrue(xy[1] < xyRoot[1]);}  }
class C{  public static String errorJSON(String provider,String error){  final JSONObject json=new JSONObject();  try {    json.put("provider",provider);    json.put("error",error);  } catch (  JSONException exc) {    logJSONException(exc);  }  return json.toString();}  }
class C{  public static Object read(InputStream stream) throws Exception {  Class<?> komlClass;  Class<?>[] komlClassArgs;  Object[] komlArgs;  java.lang.reflect.Constructor<?> constructor;  Object koml;  java.lang.reflect.Method methodRead;  java.lang.reflect.Method methodClose;  Class<?>[] readArgsClasses;  Class<?>[] closeArgsClasses;  Object[] readArgs;  Object[] closeArgs;  Object result;  result=null;  komlClass=Class.forName("fr.dyade.koala.xml.koml.KOMLDeserializer");  komlClassArgs=new Class[2];  komlClassArgs[0]=java.io.InputStream.class;  komlClassArgs[1]=Boolean.TYPE;  komlArgs=new Object[2];  komlArgs[0]=stream;  komlArgs[1]=new Boolean(false);  constructor=komlClass.getConstructor(komlClassArgs);  koml=constructor.newInstance(komlArgs);  readArgsClasses=new Class[0];  methodRead=komlClass.getMethod("readObject",readArgsClasses);  readArgs=new Object[0];  closeArgsClasses=new Class[0];  methodClose=komlClass.getMethod("close",closeArgsClasses);  closeArgs=new Object[0];  try {    result=methodRead.invoke(koml,readArgs);  } catch (  Exception e) {    result=null;  } finally {    methodClose.invoke(koml,closeArgs);  }  return result;}  }
class C{  protected void postCollapse(DoubleBuffer[] toCollapse){  if (toCollapse.length == bufferSet.b()) {    currentTreeHeight++;    if (currentTreeHeight >= treeHeightStartingSampling) {      sampler.setWeight(sampler.getWeight() * 2);    }  }}  }
class C{  public String nextTo(String delimiters) throws JSONException {  char c;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=this.next();    if (delimiters.indexOf(c) >= 0 || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public final DoubleGrid2D upperBound(final double toNoMoreThanThisMuch){  double[] fieldx=null;  final int width=this.width;  final int height=this.height;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++)     if (fieldx[y] > toNoMoreThanThisMuch)     fieldx[y]=toNoMoreThanThisMuch;  }  return this;}  }
class C{  public void removeConnectionListener(ConnectionListener l){  m_ConnectionListeners.remove(l);}  }
class C{  public static PathImpl lookup(String url,Map<String,Object> attr){  return getPwd().lookup(url,attr);}  }
class C{  public static ScaleAndIndex median(){  return scale(2).index(1);}  }
class C{  public BytesRead(int bytesRead){  this();  this.bytesRead=bytesRead;}  }
class C{  public static String interpretReplaceEscapes(String replaceText,String foundText,String lineDelim){  return new ReplaceStringConstructor(lineDelim).interpretReplaceEscapes(replaceText,foundText);}  }
class C{  public PagedBytes(int blockBits){  assert blockBits > 0 && blockBits <= 31 : blockBits;  this.blockSize=1 << blockBits;  this.blockBits=blockBits;  blockMask=blockSize - 1;  upto=blockSize;  bytesUsedPerBlock=RamUsageEstimator.alignObjectSize(blockSize + RamUsageEstimator.NUM_BYTES_ARRAY_HEADER);  numBlocks=0;}  }
class C{  public TraceStateEntered createTraceStateEntered(){  TraceStateEnteredImpl traceStateEntered=new TraceStateEnteredImpl();  return traceStateEntered;}  }
class C{  public void print(final OutputStream output) throws IOException {  this.printHead(output);  this.printBody(output);}  }
class C{  public static boolean isNotEmpty(final Object[] array){  return array != null && array.length != 0;}  }
class C{  public void write(IoBuffer buffer){  buffer.put(signature);  buffer.put(version);  buffer.put((byte)(FLV_HEADER_FLAG_HAS_AUDIO * (flagAudio ? 1 : 0) + FLV_HEADER_FLAG_HAS_VIDEO * (flagVideo ? 1 : 0)));  buffer.putInt(9);  buffer.putInt(0);  buffer.flip();}  }
class C{  int readEntryLength() throws IOException {  return read(4);}  }
class C{  public void addNodes(Collection<BNode> newNodes){  for (  BNode newNode : newNodes) {    addNode(newNode);  }}  }
class C{  private BitSet(long[] words){  this.words=words;  this.wordsInUse=words.length;  checkInvariants();}  }
class C{  private void createPiedPiper(){  TPPQuestHelperFunctions.setupPiper(piedpiper);  fullpath=PathsBuildHelper.getAdosCollectingRatsPaths();  leadNPC();}  }
class C{  public boolean remove(INode n){  INode state=contains(n);  if (state == null) {    return false;  }  return list.remove(state);}  }
class C{  @Override public void startSync(Uri uri,Bundle extras){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  static int typeOffset(String type){switch (type.toUpperCase().charAt(0)) {case 'B':    return 0;case 'A':  return SerialNode.offsetA;case 'M':return SerialNode.offsetM;case 'P':return SerialNode.offsetP;case 'S':return SerialNode.offsetS;default :return -1;}}  }
class C{  public static void merge(final Network networkA,final String prefixA,final Network networkB,final String prefixB,final Network mergedNetwork){  double capacityFactor=mergedNetwork.getCapacityPeriod() / networkA.getCapacityPeriod();  NetworkFactory factory=mergedNetwork.getFactory();  for (  Node node : networkA.getNodes().values()) {    Node node2=(Node)factory.createNode(Id.create(prefixA + node.getId().toString(),Node.class),node.getCoord());    mergedNetwork.addNode(node2);  }  for (  Link link : networkA.getLinks().values()) {    Id<Node> fromNodeId=Id.create(prefixA + link.getFromNode().getId().toString(),Node.class);    Id<Node> toNodeId=Id.create(prefixA + link.getToNode().getId().toString(),Node.class);    Node fromNode=mergedNetwork.getNodes().get(fromNodeId);    Node toNode=mergedNetwork.getNodes().get(toNodeId);    Link link2=factory.createLink(Id.create(prefixA + link.getId().toString(),Link.class),fromNode,toNode);    link2.setAllowedModes(link.getAllowedModes());    link2.setCapacity(link.getCapacity() * capacityFactor);    link2.setFreespeed(link.getFreespeed());    link2.setLength(link.getLength());    link2.setNumberOfLanes(link.getNumberOfLanes());    mergedNetwork.addLink(link2);    fromNode.addOutLink(link2);    toNode.addInLink(link2);  }  capacityFactor=mergedNetwork.getCapacityPeriod() / networkB.getCapacityPeriod();  for (  Node node : networkB.getNodes().values()) {    Node node2=(Node)factory.createNode(Id.create(prefixB + node.getId().toString(),Node.class),node.getCoord());    mergedNetwork.addNode(node2);  }  for (  Link link : networkB.getLinks().values()) {    Id<Node> fromNodeId=Id.create(prefixB + link.getFromNode().getId().toString(),Node.class);    Id<Node> toNodeId=Id.create(prefixB + link.getToNode().getId().toString(),Node.class);    Node fromNode=mergedNetwork.getNodes().get(fromNodeId);    Node toNode=mergedNetwork.getNodes().get(toNodeId);    Link link2=factory.createLink(Id.create(prefixB + link.getId().toString(),Link.class),fromNode,toNode);    link2.setAllowedModes(link.getAllowedModes());    link2.setCapacity(link.getCapacity() * capacityFactor);    link2.setFreespeed(link.getFreespeed());    link2.setLength(link.getLength());    link2.setNumberOfLanes(link.getNumberOfLanes());    mergedNetwork.addLink(link2);    fromNode.addOutLink(link2);    toNode.addInLink(link2);  }}  }
class C{  public TableImpl createTable(TableBuilder table) throws IOException {  _name=table.getName();  _columns=table.getColumns();  _indexes=table.getIndexes();  if (_indexes == null) {    _indexes=Collections.<IndexBuilder>emptyList();  }  validate();  short columnNumber=(short)0;  for (  ColumnBuilder col : _columns) {    col.setColumnNumber(columnNumber++);    if (col.getType().isLongValue()) {      _lvalCols.add(col);      _columnStates.put(col,new ColumnState());    }  }  if (hasIndexes()) {    for (    IndexBuilder idx : _indexes) {      idx.setIndexNumber(_logicalIndexCount++);      findIndexDataState(idx);    }  }  getPageChannel().startExclusiveWrite();  try {    _tdefPageNumber=reservePageNumber();    _umapPageNumber=reservePageNumber();    TableImpl.writeTableDefinition(this);    getDatabase().addNewTable(_name,_tdefPageNumber,DatabaseImpl.TYPE_TABLE,null,null);    TableImpl newTable=getDatabase().getTable(_name);    boolean addedProps=false;    Map<String,PropertyMap.Property> props=table.getProperties();    if (props != null) {      newTable.getProperties().putAll(props.values());      addedProps=true;    }    for (    ColumnBuilder cb : _columns) {      Map<String,PropertyMap.Property> colProps=cb.getProperties();      if (colProps != null) {        newTable.getColumn(cb.getName()).getProperties().putAll(colProps.values());        addedProps=true;      }    }    if (addedProps) {      newTable.getProperties().save();    }    return newTable;  }  finally {    getPageChannel().finishWrite();  }}  }
class C{  public void discardRecording(){  if (recorder != null) {    try {      recorder.stop();      recorder.release();      recorder=null;      if (file != null && file.exists() && !file.isDirectory()) {        file.delete();      }    } catch (    IllegalStateException e) {    }catch (    RuntimeException e) {    }    isRecording=false;  }}  }
class C{  public ReliefF(final ClassificationDataSet cds,int featureCount,final int m,final int n,final DistanceMetric dm){  this(cds,featureCount,m,n,dm,new DefaultVectorCollectionFactory<Vec>());}  }
class C{  protected SVGOMMultiImageElement(){}  }
class C{  @Override public int size(){  return this._map.size();}  }
class C{  FiringPlan guessBestFiringPlan(Entity shooter,@Nullable EntityState shooterState,Targetable target,@Nullable EntityState targetState,IGame game){  FiringPlan alphaStrike=guessFullFiringPlan(shooter,shooterState,target,targetState,game);  if (shooter.getHeatCapacity() == 999 && !(shooter instanceof Infantry) && !(shooter instanceof BattleArmor)) {    return alphaStrike;  }  FiringPlan allPlans[]=calcFiringPlansUnderHeat(shooter,alphaStrike);  return getBestFiringPlanUnderHeat(target,shooter,allPlans);}  }
class C{  protected DoubleMatrix1D like1D(int size,int offset,int stride){  return new SparseDoubleMatrix1D(size,this.elements,offset,stride);}  }
class C{  private Predicate createPartitionValueFilters(BusinessObjectDataSearchKey businessDataSearchKey,Root<BusinessObjectDataEntity> businessObjectDataEntity,Join<BusinessObjectDataEntity,BusinessObjectFormatEntity> businessObjectFormatEntity,CriteriaBuilder builder,Predicate predicatePram){  Predicate predicate=predicatePram;  if (businessDataSearchKey.getPartitionValueFilters() != null && !businessDataSearchKey.getPartitionValueFilters().isEmpty()) {    for (    PartitionValueFilter partitionFilter : businessDataSearchKey.getPartitionValueFilters()) {      Join<BusinessObjectFormatEntity,SchemaColumnEntity> schemaEntity=businessObjectFormatEntity.join(BusinessObjectFormatEntity_.schemaColumns);      List<String> partitionValues=partitionFilter.getPartitionValues();      predicate=builder.and(predicate,builder.equal(builder.upper(schemaEntity.get(SchemaColumnEntity_.name)),partitionFilter.getPartitionKey().toUpperCase()));      predicate=builder.and(predicate,builder.isNotNull(schemaEntity.get(SchemaColumnEntity_.partitionLevel)));      if (partitionValues != null && !partitionValues.isEmpty()) {        predicate=builder.and(predicate,builder.or(builder.and(builder.equal(schemaEntity.get(SchemaColumnEntity_.partitionLevel),1),businessObjectDataEntity.get(BusinessObjectDataEntity_.partitionValue).in(partitionValues)),builder.and(builder.equal(schemaEntity.get(SchemaColumnEntity_.partitionLevel),2),businessObjectDataEntity.get(BusinessObjectDataEntity_.partitionValue2).in(partitionValues)),builder.and(builder.equal(schemaEntity.get(SchemaColumnEntity_.partitionLevel),3),businessObjectDataEntity.get(BusinessObjectDataEntity_.partitionValue3).in(partitionValues)),builder.and(builder.equal(schemaEntity.get(SchemaColumnEntity_.partitionLevel),4),businessObjectDataEntity.get(BusinessObjectDataEntity_.partitionValue4).in(partitionValues)),builder.and(builder.equal(schemaEntity.get(SchemaColumnEntity_.partitionLevel),5),businessObjectDataEntity.get(BusinessObjectDataEntity_.partitionValue5).in(partitionValues))));      } else       if (partitionFilter.getPartitionValueRange() != null) {        PartitionValueRange partitionRange=partitionFilter.getPartitionValueRange();        String startPartitionValue=partitionRange.getStartPartitionValue();        String endPartitionValue=partitionRange.getEndPartitionValue();        predicate=builder.and(predicate,builder.or(builder.and(builder.equal(schemaEntity.get(SchemaColumnEntity_.partitionLevel),1),builder.greaterThanOrEqualTo(businessObjectDataEntity.get(BusinessObjectDataEntity_.partitionValue),startPartitionValue),builder.lessThanOrEqualTo(businessObjectDataEntity.get(BusinessObjectDataEntity_.partitionValue),endPartitionValue)),builder.and(builder.equal(schemaEntity.get(SchemaColumnEntity_.partitionLevel),2),builder.greaterThanOrEqualTo(businessObjectDataEntity.get(BusinessObjectDataEntity_.partitionValue2),startPartitionValue),builder.lessThanOrEqualTo(businessObjectDataEntity.get(BusinessObjectDataEntity_.partitionValue2),endPartitionValue)),builder.and(builder.equal(schemaEntity.get(SchemaColumnEntity_.partitionLevel),3),builder.greaterThanOrEqualTo(businessObjectDataEntity.get(BusinessObjectDataEntity_.partitionValue3),startPartitionValue),builder.lessThanOrEqualTo(businessObjectDataEntity.get(BusinessObjectDataEntity_.partitionValue3),endPartitionValue)),builder.and(builder.equal(schemaEntity.get(SchemaColumnEntity_.partitionLevel),4),builder.greaterThanOrEqualTo(businessObjectDataEntity.get(BusinessObjectDataEntity_.partitionValue4),startPartitionValue),builder.lessThanOrEqualTo(businessObjectDataEntity.get(BusinessObjectDataEntity_.partitionValue4),endPartitionValue)),builder.and(builder.equal(schemaEntity.get(SchemaColumnEntity_.partitionLevel),5),builder.greaterThanOrEqualTo(businessObjectDataEntity.get(BusinessObjectDataEntity_.partitionValue5),startPartitionValue),builder.lessThanOrEqualTo(businessObjectDataEntity.get(BusinessObjectDataEntity_.partitionValue5),endPartitionValue))));      }    }  }  return predicate;}  }
class C{  public static int stringToBytesAscii(byte[] buffer,int offset,String str){  int length=str.length();  int end=offset + length;  for (int i=0; i < length; i++) {    buffer[i + offset]=(byte)str.charAt(i);  }  return end;}  }
class C{  public SurfaceText(String text,Position position,Font font,Color color){  this.setText(text);  this.setPosition(position);  this.setFont(font);  this.setColor(color);}  }
class C{  private ChatAction createReward(){  return new MultipleActions(new IncreaseKarmaAction(5),new IncreaseXPAction(50),new EquipRandomAmountOfItemAction("grain",10,20),new SetQuestAction(QUEST_SLOT,"done"));}  }
class C{  protected void runEntranceTransition(Object entranceTransition){}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DatatypePackage.ENUM__ENUMS:    getEnums().clear();  return;}super.eUnset(featureID);}  }
class C{  public Tag addTag(final Tag parent,final String name) throws CouldntSaveDataException {  try {    if (parent == null) {      return ObjectFinders.getObject(m_manager.addTag(m_root.getNative(),name),m_allTags.values());    } else {      return ObjectFinders.getObject(m_manager.addTag(parent.getNative(),name),m_allTags.values());    }  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() == bUp)   setLine(-1,false); else   if (e.getSource() == bDown)   setLine(+1,false); else   if (e.getSource() == bNew)   setLine(0,true); else {    if (e.getSource() == bDelete)     cmd_delete(); else     if (e.getActionCommand().equals(ConfirmPanel.A_OK)) {      if (!cmd_save())       return;    }    dispose();  }}  }
class C{  public static void copy(File from,Charset charset,Appendable to) throws IOException {  asCharSource(from,charset).copyTo(to);}  }
class C{  public static InfoOverlayDialog newInstance(String title,String summary){  InfoOverlayDialog dialog=new InfoOverlayDialog();  dialog.setStyle(DialogFragment.STYLE_NO_FRAME,R.style.TransparentDialog);  dialog.setTitleAndSummary(title,summary);  return dialog;}  }
class C{  @SuppressWarnings("unchecked") public boolean hasSuperState(Class<? extends StateEngine<?>> stateClass){  if (stateClass.equals(getClass())) {    return true;  }  final T_State state=getState((Class<? extends T_State>)stateClass);  return state.isSuperStateFor(this);}  }
class C{  static void validate(VOVatRate vo) throws ValidationException {  BLValidator.isVat(FIELD_NAME_RATE,vo.getRate());}  }
class C{  private RE postfix2() throws InterruptedException {  Postfix2 o=(Postfix2)strOp;  int start=o.getStart();  RE arg=cats.get(0);switch (arg.op) {case STRING:    if (arg.lit.length() > start) {      return mkString(arg.lit.substring(start));    } else {      return null;    }case CONCAT:  List<RE> tail=new LinkedList<RE>();tail.addAll(arg.cats);while (!tail.isEmpty()) {if (Thread.interrupted()) throw new InterruptedException();RE a=tail.remove(0);if (a.op == ReOp.STRING) {  int len=a.lit.length();  if (len >= start) {    RE s=mkString(a.lit.substring(start));    tail.add(0,s);    RE res=new RE(ReOp.CONCAT);    res.cats=tail;    return res;  } else {    start-=len;  }}return null;}return null;default :return null;}}  }
class C{  public ClassificationModelEvaluation(Classifier classifier,ClassificationDataSet dataSet){  this(classifier,dataSet,null);}  }
class C{  @Command(description="Generate certificate request") public void generateCertRequest(@Param(name="keyId",description="Key ID") String keyId,@Param(name="memberId",description="Member identifier") ClientId memberId,@Param(name="usage",description="Key usage (a - auth, s - sign)") String usage,@Param(name="subjectName",description="Subject name") String subjectName) throws Exception {  KeyUsageInfo keyUsage="a".equals(usage) ? KeyUsageInfo.AUTHENTICATION : KeyUsageInfo.SIGNING;  Map<String,Object> logData=new LinkedHashMap<>();  logData.put(KEY_ID_PARAM,keyId);  logData.put(CLIENT_IDENTIFIER_PARAM,memberId);  logData.put(KEY_USAGE_PARAM,keyUsage.name());  logData.put(SUBJECT_NAME_PARAM,subjectName);  GenerateCertRequestResponse response;  try {    GenerateCertRequest request=new GenerateCertRequest(keyId,memberId,keyUsage,subjectName);    response=SignerClient.execute(request);    AuditLogger.log(GENERATE_A_CERT_REQUEST_EVENT,XROAD_USER,logData);  } catch (  Exception e) {    AuditLogger.log(GENERATE_A_CERT_REQUEST_EVENT,XROAD_USER,e.getMessage(),logData);    throw e;  }  bytesToFile(keyId + ".csr",response.getCertRequest());}  }
class C{  public boolean isDisplayChartValues(){  return mDisplayChartValues;}  }
class C{  private int safeCopyStringToChars(String str,char[] dst,int dstBegin,int dstEnd){  if (VM.VerifyAssertions)   VM._assert(VM.runningVM);  RVMThread.getCurrentThread().disableYieldpoints();  char[] str_backing=java.lang.JikesRVMSupport.getBackingCharArray(str);  int str_length=java.lang.JikesRVMSupport.getStringLength(str);  int str_offset=java.lang.JikesRVMSupport.getStringOffset(str);  int n=(dstBegin + str_length <= dstEnd) ? str_length : (dstEnd - dstBegin);  for (int i=0; i < n; i++) {    Services.setArrayNoBarrier(dst,dstBegin + i,str_backing[str_offset + i]);  }  RVMThread.getCurrentThread().enableYieldpoints();  return n;}  }
class C{  public static String random(int count,char[] chars){  if (chars == null) {    return random(count,0,0,false,false,null,RANDOM);  }  return random(count,0,chars.length,false,false,chars,RANDOM);}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public void removeComment(){  comment=null;}  }
class C{  public RandomMixedRunner(GraphWrapper graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params);}  }
class C{  public String convertProjectDependencyScopeToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  if (!getItemVisible(series,item)) {    return;  }  if (pass == 0) {    IntervalXYDataset intervalDataset=(IntervalXYDataset)dataset;    State drState=(State)state;    double x=intervalDataset.getXValue(series,item);    double yLow=intervalDataset.getStartYValue(series,item);    double yHigh=intervalDataset.getEndYValue(series,item);    RectangleEdge xAxisLocation=plot.getDomainAxisEdge();    RectangleEdge yAxisLocation=plot.getRangeAxisEdge();    double xx=domainAxis.valueToJava2D(x,dataArea,xAxisLocation);    double yyLow=rangeAxis.valueToJava2D(yLow,dataArea,yAxisLocation);    double yyHigh=rangeAxis.valueToJava2D(yHigh,dataArea,yAxisLocation);    PlotOrientation orientation=plot.getOrientation();    if (orientation == PlotOrientation.HORIZONTAL) {      drState.lowerCoordinates.add(new double[]{yyLow,xx});      drState.upperCoordinates.add(new double[]{yyHigh,xx});    } else     if (orientation == PlotOrientation.VERTICAL) {      drState.lowerCoordinates.add(new double[]{xx,yyLow});      drState.upperCoordinates.add(new double[]{xx,yyHigh});    }    if (item == (dataset.getItemCount(series) - 1)) {      Composite originalComposite=g2.getComposite();      g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,this.alpha));      g2.setPaint(getItemFillPaint(series,item));      GeneralPath area=new GeneralPath(GeneralPath.WIND_NON_ZERO,drState.lowerCoordinates.size() + drState.upperCoordinates.size());      double[] coords=(double[])drState.lowerCoordinates.get(0);      area.moveTo((float)coords[0],(float)coords[1]);      for (int i=1; i < drState.lowerCoordinates.size(); i++) {        coords=(double[])drState.lowerCoordinates.get(i);        area.lineTo((float)coords[0],(float)coords[1]);      }      int count=drState.upperCoordinates.size();      coords=(double[])drState.upperCoordinates.get(count - 1);      area.lineTo((float)coords[0],(float)coords[1]);      for (int i=count - 2; i >= 0; i--) {        coords=(double[])drState.upperCoordinates.get(i);        area.lineTo((float)coords[0],(float)coords[1]);      }      area.closePath();      g2.fill(area);      g2.setComposite(originalComposite);      drState.lowerCoordinates.clear();      drState.upperCoordinates.clear();    }  }  if (isLinePass(pass)) {    if (item == 0) {      State s=(State)state;      s.seriesPath.reset();      s.setLastPointGood(false);    }    if (getItemLineVisible(series,item)) {      drawPrimaryLineAsPath(state,g2,plot,dataset,pass,series,item,domainAxis,rangeAxis,dataArea);    }  } else   if (isItemPass(pass)) {    EntityCollection entities=null;    if (info != null) {      entities=info.getOwner().getEntityCollection();    }    drawSecondaryPass(g2,plot,dataset,pass,series,item,domainAxis,dataArea,rangeAxis,crosshairState,entities);  }}  }
class C{  public boolean shouldBreedSubpop(EvolutionState state,int subpop,int threadnum){  return (!sequentialBreeding || (state.generation % state.population.subpops.length) == subpop);}  }
class C{  public LazyFutureStream<T> ioFutureStream(String key){  if (!pipes.get(key).isPresent())   pipes.register(key,factory.build());  return pipes.futureStream(key,io.get()).get();}  }
class C{  private void subscribeTask(String taskPath,Consumer<Operation> notificationTarget) throws Throwable {  URI taskUri=UriUtils.buildUri(this.host,taskPath);  Operation subscribe=Operation.createPost(taskUri).setCompletion(this.host.getCompletion()).setReferer(this.host.getReferer());  this.host.testStart(1);  this.host.startSubscriptionService(subscribe,notificationTarget);  this.host.testWait();}  }
class C{  public static void addDebugger(final AbstractSQLProvider provider,final INaviProject project,final DebuggerTemplate debugger) throws CouldntSaveDataException {  checkArguments(provider,project);  Preconditions.checkNotNull(debugger,"IE00519: Debugger argument can't be null");  Preconditions.checkArgument(debugger.inSameDatabase(provider),"IE00520: The given debugger template is not part of this database");  final CConnection connection=provider.getConnection();  try {    final String insertQuery=String.format("INSERT INTO %s values(?, ?)",CTableNames.PROJECT_DEBUGGERS_TABLE);    final PreparedStatement insertStatement=connection.getConnection().prepareStatement(insertQuery);    final String deleteQuery=String.format("DELETE FROM %s WHERE project_id = ? AND debugger_id = ?",CTableNames.PROJECT_DEBUGGERS_TABLE);    final PreparedStatement deleteStatement=connection.getConnection().prepareStatement(deleteQuery);    try {      PostgreSQLHelpers.beginTransaction(connection);      deleteStatement.setInt(1,project.getConfiguration().getId());      deleteStatement.setInt(2,debugger.getId());      deleteStatement.execute();      insertStatement.setInt(1,project.getConfiguration().getId());      insertStatement.setInt(2,debugger.getId());      insertStatement.execute();      PostgreSQLHelpers.endTransaction(connection);    }  finally {      deleteStatement.close();      insertStatement.close();    }  } catch (  final SQLException exception) {    try {      PostgreSQLHelpers.rollback(connection);    } catch (    final SQLException e) {      throw new CouldntSaveDataException("E00056: Could not rollback transaction");    }    throw new CouldntSaveDataException("E00057: Could not update project debugger");  }  PostgreSQLHelpers.updateModificationDate(connection,"" + CTableNames.PROJECTS_TABLE + "",project.getConfiguration().getId());}  }
class C{  public void test_select_uri() throws MalformedQueryException, TokenMgrError, ParseException {  final String sparql="select ( <http://xmlns.com/foaf/0.1/> as ?x) where {?s ?p ?o}";  final QueryRoot expected=new QueryRoot(QueryType.SELECT);{    final ProjectionNode projection=new ProjectionNode();    projection.addProjectionExpression(new AssignmentNode(new VarNode("x"),new ConstantNode(makeIV(valueFactory.createURI("http://xmlns.com/foaf/0.1/")))));    expected.setProjection(projection);  }  final QueryRoot actual=parse(sparql,baseURI);  assertSameAST(sparql,expected.getProjection(),actual.getProjection());}  }
class C{  private int deleteFileFromStorage(String fileName){  Storage tempStorage=null;  File tempFile=null;  int msg=DataCloudTags.FILE_DELETE_ERROR;  for (int i=0; i < getStorageList().size(); i++) {    tempStorage=getStorageList().get(i);    tempFile=tempStorage.getFile(fileName);    tempStorage.deleteFile(fileName,tempFile);    msg=DataCloudTags.FILE_DELETE_SUCCESSFUL;  }  return msg;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void clear(){  int h=head;  int t=tail;  if (h != t) {    head=tail=0;    int i=h;    int mask=elements.length - 1;    do {      elements[i]=null;      i=(i + 1) & mask;    } while (i != t);  }}  }
class C{  public void testCase12(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  int aSign=1;  int bSign=-1;  byte rBytes[]={1,2,3,4,15,26,37,41,52,63,74,15,26,37};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(1,result.signum());}  }
class C{  private boolean updateStructureOfType(ParametricStructure type1,ParametricStructure type2){  if (type1 == null || type2 == null)   return false;  ParametricStructure[] parms1=type1.getParameters();  ParametricStructure[] parms2=type2.getParameters();  boolean someChange=false;  Assert.isTrue(parms1.length == parms2.length);  for (int i=0; i < parms1.length; i++) {    if (type1 == parms2[i]) {      if (parms1[i] != ParametricStructure.NONE) {        parms1[i]=ParametricStructure.NONE;        someChange=true;      }    } else     if (updateStructureOfIthParamFrom(type1,i,parms2[i]))     someChange=true;  }  return someChange;}  }
class C{  public static boolean isRunning(JComponent c){  return sharedInstance._isRunning(c);}  }
class C{  public boolean visit(CatchClause node){  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:25.569 -0500",hash_original_method="F05F4238EDB347ACAD0B24F734C6EC9A",hash_generated_method="29C53E3687E9449EF990569C7679DD39") @DSVerified @DSSafe(DSCat.GUI) protected void showDialog(Bundle state){  Context context=getContext();  mWhichButtonClicked=DialogInterface.BUTTON_NEGATIVE;  mBuilder=new AlertDialog.Builder(context).setTitle(mDialogTitle).setIcon(mDialogIcon).setPositiveButton(mPositiveButtonText,this).setNegativeButton(mNegativeButtonText,this);  View contentView=onCreateDialogView();  if (contentView != null) {    onBindDialogView(contentView);    mBuilder.setView(contentView);  } else {    mBuilder.setMessage(mDialogMessage);  }  onPrepareDialogBuilder(mBuilder);  getPreferenceManager().registerOnActivityDestroyListener(this);  final Dialog dialog=mDialog=mBuilder.create();  onDismiss(dialog);  Parcelable otherState=onSaveInstanceState();  if (otherState != null)   onRestoreInstanceState(otherState);  if (state != null) {    dialog.onRestoreInstanceState(state);  }  if (needInputMethod()) {    requestInputMethod(dialog);  }  dialog.setOnDismissListener(this);  dialog.show();}  }
class C{  public Node compose(Reader yaml){  Composer composer=new Composer(new ParserImpl(new StreamReader(yaml)),resolver);  constructor.setComposer(composer);  return composer.getSingleNode();}  }
class C{  public synchronized void shutdown(){  try {    save();  } catch (  Exception exception) {    getBot().log(this,exception);  }}  }
class C{  private String changeExtension(String fileName,String extension){  if (fileName == null) {    return null;  }  int lastIndexOf=fileName.lastIndexOf(".");  return lastIndexOf != -1 ? fileName.substring(0,lastIndexOf + 1) + extension : fileName + "." + extension;}  }
class C{  public final void consume() throws IOException {  Assertions.checkState(dataSourceStream != null);  consumeStream(dataSourceStream);}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  private int countNonNewline(char[] cbuf,int off,int len){  for (int cnt=0; cnt < len; cnt++) {    final int pos=off + cnt;    if (cbuf[pos] == UNIX_NEWLINE) {      return cnt;    }    if (cbuf[pos] == CARRIAGE_RETURN) {      return cnt;    }  }  return len;}  }
class C{  public void print(boolean bool){  print(String.valueOf(bool));}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,-1 * z1);        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean arrowScrollV(int direction){  View currentFocused=findFocus();  if (currentFocused == this)   currentFocused=null;  View nextFocused=FocusFinder.getInstance().findNextFocus(this,currentFocused,direction);  final int maxJump=getMaxScrollAmountV();  if (nextFocused != null && isWithinDeltaOfScreenV(nextFocused,maxJump,getHeight())) {    nextFocused.getDrawingRect(mTempRect);    offsetDescendantRectToMyCoords(nextFocused,mTempRect);    int scrollDelta=computeScrollDeltaToGetChildRectOnScreenV(mTempRect);    doScrollY(scrollDelta);    nextFocused.requestFocus(direction);  } else {    int scrollDelta=maxJump;    if (direction == View.FOCUS_UP && getScrollY() < scrollDelta) {      scrollDelta=getScrollY();    } else     if (direction == View.FOCUS_DOWN) {      if (getChildCount() > 0) {        int daBottom=getChildAt(0).getBottom();        int screenBottom=getScrollY() + getHeight();        if (daBottom - screenBottom < maxJump) {          scrollDelta=daBottom - screenBottom;        }      }    }    if (scrollDelta == 0) {      return false;    }    doScrollY(direction == View.FOCUS_DOWN ? scrollDelta : -scrollDelta);  }  if (currentFocused != null && currentFocused.isFocused() && isOffScreenV(currentFocused)) {    final int descendantFocusability=getDescendantFocusability();    setDescendantFocusability(ViewGroup.FOCUS_BEFORE_DESCENDANTS);    requestFocus();    setDescendantFocusability(descendantFocusability);  }  return true;}  }
class C{  public TemplateEngine(TemplateContextType contextType){  Assert.isNotNull(contextType);  fContextType=contextType;}  }
class C{  protected boolean haveSharedCellsRaw(DoubleMatrix2D other){  if (other instanceof SelectedDenseDoubleMatrix2D) {    SelectedDenseDoubleMatrix2D otherMatrix=(SelectedDenseDoubleMatrix2D)other;    return this.elements == otherMatrix.elements;  } else   if (other instanceof DenseDoubleMatrix2D) {    DenseDoubleMatrix2D otherMatrix=(DenseDoubleMatrix2D)other;    return this.elements == otherMatrix.elements;  }  return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void addPrefix(String prefix,String namespaceURI){  log.log(Level.FINE,"addPrefix({0}, {1})",new Object[]{prefix,namespaceURI});  if (prefix == null || namespaceURI == null) {    throw new IllegalArgumentException("Prefix or namespaceURI cannot be null!");  }  prefixToNamespace.put(prefix,namespaceURI);  Set<String> prefixes=namespaceToPrefix.get(namespaceURI);  if (prefixes == null) {    prefixes=new HashSet<String>();  }  prefixes.add(prefix);  namespaceToPrefix.put(namespaceURI,prefixes);}  }
class C{  public static DateTime toDatetime(Object o,TimeZone tz) throws PageException {  return DateCaster.toDateAdvanced(o,tz);}  }
class C{  public void addFileField(String name,File file) throws IOException {  String fileName=file.getName();  writer.append("--" + boundary).append(LINE_BREAK);  writer.append("Content-Disposition: form-data; name=\"" + name + "\"; filename=\""+ fileName+ "\"").append(LINE_BREAK);  String probableContentType=URLConnection.guessContentTypeFromName(fileName);  writer.append("Content-Type: " + probableContentType).append(LINE_BREAK);  writer.append("Content-Transfer-Encoding: binary").append(LINE_BREAK);  writer.append(LINE_BREAK);  writer.flush();  try (FileInputStream inputStream=new FileInputStream(file)){    moveContent(inputStream,outputStream);  }   writer.append(LINE_BREAK);  writer.flush();}  }
class C{  public void configure(PluginContext context) throws ReplicatorException, InterruptedException {  logger.info("Configuring pipeline: " + name);  this.context=context;  if (stages.size() == 0)   throw new ReplicatorException("Attempt to configure pipeline without any stages");  channels=getLastStage().getTaskCount();  Stage first=stages.getFirst();  first.setAutoSync(autoSync);  for (  String name : getServiceNames()) {    ReplicatorRuntime.configurePlugin(services.get(name),context);  }  for (  String name : getStoreNames()) {    ReplicatorRuntime.configurePlugin(stores.get(name),context);  }  for (  Stage stage : stages) {    stage.configure(context);  }}  }
class C{  protected void notifyError(final Error error) throws ErrorNotHandledException {  onErrorCallback.get().onError(error);}  }
class C{  public void pathInfo(String pathInfo){  Objects.requireNonNull(pathInfo);  _pathInfo=pathInfo;}  }
class C{  public SparseShortVector(short[] values) throws IllegalArgumentException {  this.dimensionality=values.length;  int size=0;{    for (int i=0; i < values.length; i++) {      if (values[i] != 0) {        size++;      }    }  }  this.indexes=new int[size];  this.values=new short[size];{    int pos=0;    for (int i=0; i < values.length; i++) {      short value=values[i];      if (value != 0) {        this.indexes[pos]=i;        this.values[pos]=value;        pos++;      }    }  }}  }
class C{  private static Set<String> keyToolEnums() throws Exception {  Set<String> names=new HashSet<String>();  String file="sun/security/tools/keytool/Main.java";  System.err.println("Working on " + file);  File origFile=new File(file);  File tmpFile=new File(file + ".tmp");  origFile.renameTo(tmpFile);  tmpFile.deleteOnExit();  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(tmpFile)));  PrintWriter out=new PrintWriter(new FileOutputStream(origFile));  int stage=0;  int match=0;  while (true) {    String s=br.readLine();    if (s == null) {      break;    }    if (s.indexOf("enum Command") >= 0)     stage=1; else     if (s.indexOf("enum Option") >= 0)     stage=2; else     if (s.indexOf("private static final String JKS") >= 0)     stage=3;    if (stage == 1 || stage == 2) {      if (s.indexOf("(\"") >= 0) {        match++;        int p1, p2;        if (stage == 1) {          p1=s.indexOf("\"");          p2=s.indexOf("\"",p1 + 1);        } else {          p2=s.lastIndexOf("\"");          p1=s.lastIndexOf("\"",p2 - 1);        }        String name=s.substring(p1 + 1,p2);        names.add(name);        out.println(s.substring(0,p1 + 1) + normalize(name) + s.substring(p2));      } else {        out.println(s);      }    } else {      out.println(s);    }  }  br.close();  out.close();  System.err.println("    GOOD  match is " + match);  return names;}  }
class C{  @Override public final void openPdfArray(final byte[] data,final String password) throws PdfException {  if (data == null) {    throw new RuntimeException("Attempting to open null byte stream");  }  preOpen();  if (fileAccess.isOpen) {    closePdfFile();  }  fileAccess.openPdfArray(data,password);  postOpen();}  }
class C{  public String toString(){  String rtn="";  byte[] bytes;  bytes=longToBytes(v0);  String hexStr=toHex(bytes,0,bytes.length);  rtn+="v0=" + hexStr + " ";  bytes=longToBytes(v1);  hexStr=toHex(bytes,0,bytes.length);  rtn+="v1=" + hexStr + " ";  bytes=longToBytes(v2);  hexStr=toHex(bytes,0,bytes.length);  rtn+="v2=" + hexStr + " ";  bytes=longToBytes(v3);  hexStr=toHex(bytes,0,bytes.length);  rtn+="v3=" + hexStr + " ";  return rtn;}  }
class C{  public static Border createBevelLowered(int highlightOuter,int highlightInner,int shadowOuter,int shadowInner){  Border b=new Border();  b.type=TYPE_BEVEL_LOWERED;  b.themeColors=false;  b.colorA=highlightOuter;  b.colorB=highlightInner;  b.colorC=shadowOuter;  b.colorD=shadowInner;  b.thickness=2;  return b;}  }
class C{  public void removeDocValidate(String tableName,ModelValidator listener){  if (tableName == null || listener == null)   return;  String propertyName=m_globalValidators.contains(listener) ? tableName + "*" : tableName + listener.getAD_Client_ID();  ArrayList<ModelValidator> list=m_docValidateListeners.get(propertyName);  if (list == null)   return;  list.remove(listener);  if (list.size() == 0)   m_docValidateListeners.remove(propertyName);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public BaseHeap(){  super(Harness.options,"Base Heap","Base Heap Size (scaled for the current plan)",0);}  }
class C{  public static DateTimeFormatter dateHour(){  return Constants.dh;}  }
class C{  public static <T>void assert2DArrayEquals(T[][] array1,T[][] array2){  Assert.assertEquals(array1.length,array2.length);  for (int i=0; i < array1.length; ++i) {    Assert.assertEquals(array1[i],array2[i]);  }}  }
class C{  public void replaceSteppables(Collection collection){  if (toReplace == null)   toReplace=new Steppable[collection.size()];  toReplace=(Steppable[])(collection.toArray(toReplace));}  }
class C{  VariableNames(final boolean usePrimes){  super();  this.usePrimes=usePrimes;}  }
class C{  @Inline public static boolean tryCompareAndSwap(Object base,Offset offset,int testValue,int newValue){  if (Barriers.NEEDS_INT_PUTFIELD_BARRIER || Barriers.NEEDS_INT_GETFIELD_BARRIER) {    return Barriers.intTryCompareAndSwap(base,offset,testValue,newValue);  } else {    if (VM.BuildForIA32) {      return Magic.attemptInt(base,offset,testValue,newValue);    } else {      int oldValue;      do {        oldValue=Magic.prepareInt(base,offset);        if (oldValue != testValue)         return false;      } while (!Magic.attemptInt(base,offset,oldValue,newValue));      return true;    }  }}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public void addEdges(int node,int pool,int[] src,int srcPos,int length){  int position=getNodePosition(node);  readerAccessibleInfo.edges.arrayCopy(src,srcPos,position + POW_TABLE_30[pool],length,true);}  }
class C{  private void tryRegister(String className,String fromStringMethodName){  try {    Class<?> cls=getClass().getClassLoader().loadClass(className);    registerMethods(cls,"toString",fromStringMethodName);  } catch (  Exception ex) {  }}  }
class C{  public static void quicksort(int[] source,int left,int right){  if (right > left) {    int index=partition(source,left,right,right);    quicksort(source,left,index - 1);    quicksort(source,index + 1,right);  }}  }
class C{  private void printTable(){  MessageFormat headerFmt;  MessageFormat footerFmt;  JTable.PrintMode printMode=fitWidth.isSelected() ? JTable.PrintMode.FIT_WIDTH : JTable.PrintMode.NORMAL;  String text;  text=headerTextField.getText();  if (text != null && text.length() > 0) {    headerFmt=new MessageFormat(text);  } else {    headerFmt=null;  }  text=footerTextField.getText();  if (text != null && text.length() > 0) {    footerFmt=new MessageFormat(text);  } else {    footerFmt=null;  }  try {    boolean status=tableView.print(printMode,headerFmt,footerFmt);    if (status) {      JOptionPane.showMessageDialog(tableView.getParent(),getString("TableDemo.printingComplete"),getString("TableDemo.printingResult"),JOptionPane.INFORMATION_MESSAGE);    } else {      JOptionPane.showMessageDialog(tableView.getParent(),getString("TableDemo.printingCancelled"),getString("TableDemo.printingResult"),JOptionPane.INFORMATION_MESSAGE);    }  } catch (  PrinterException pe) {    String errorMessage=MessageFormat.format(getString("TableDemo.printingFailed"),new Object[]{pe.getMessage()});    JOptionPane.showMessageDialog(tableView.getParent(),errorMessage,getString("TableDemo.printingResult"),JOptionPane.ERROR_MESSAGE);  }catch (  SecurityException se) {    String errorMessage=MessageFormat.format(getString("TableDemo.printingFailed"),new Object[]{se.getMessage()});    JOptionPane.showMessageDialog(tableView.getParent(),errorMessage,getString("TableDemo.printingResult"),JOptionPane.ERROR_MESSAGE);  }}  }
class C{  public Geo crossNormalize(Geo b,Geo ret){  double x=this.y() * b.z() - this.z() * b.y();  double y=this.z() * b.x() - this.x() * b.z();  double z=this.x() * b.y() - this.y() * b.x();  double L=Math.sqrt(x * x + y * y + z * z);  ret.initialize(x / L,y / L,z / L);  return ret;}  }
class C{  static String determinePathToJar(final URL resourceURL){  final String packageName=Program.class.getPackage().getName();  final String resourcePath=resourceURL.getPath();  final String decodedResourcePath;  try {    decodedResourcePath=URLDecoder.decode(resourcePath,UriHelper.UTF_8);  } catch (  final UnsupportedEncodingException e) {    throw new Error(e);  }  final String packagePath=packageName.replace(".","/");  final String resourceSuffix="!/" + packagePath + "/";  String jarPath=decodedResourcePath.replace(resourceSuffix,"");  jarPath=jarPath.replace("file:","");  return jarPath;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.986 -0400",hash_original_method="B829940FDDA83108C12ADCFE12967B77",hash_generated_method="D5922C7B6EFBC5FF2512DF05DCDEF26B") @Override public String toString(){  StringBuilder builder=new StringBuilder();  builder.append(getClass().getSimpleName());  builder.append("[file='");  builder.append(getDirectory().getPath());  builder.append('\'');  if (fileFilter != null) {    builder.append(", ");    builder.append(fileFilter.toString());  }  builder.append(", listeners=");  builder.append(listeners.size());  builder.append("]");  return builder.toString();}  }
class C{  private void dynInit(){  super.dynInit(statusBar);  m_gridController=new GridController();  m_gridController.initGrid(m_mTab,true,m_WindowNo,null,null);  mainPanel.add(m_gridController,BorderLayout.CENTER);}  }
class C{  public static void generateSequence(MatrixBlock out,double from,double to,double incr) throws DMLRuntimeException {  if ((from > to && incr > 0) || incr == 0)   throw new DMLRuntimeException("Wrong sequence increment: from=" + from + ", to="+ to+ ", incr="+ incr);  int rows=1 + (int)Math.floor((to - from) / incr);  int cols=1;  out.reset(rows,cols,false);  out.allocateDenseBlock();  double[] c=out.denseBlock;  double cur=from;  for (int i=0; i < rows; i++) {    c[i]=cur;    cur+=incr;  }  out.recomputeNonZeros();}  }
class C{  private CloseableHttpClient createClient(){  try {    HttpClientBuilder builder=HttpClientBuilder.create();    SSLContext ctx=SSLContext.getInstance("TLS");    ctx.init(null,new TrustManager[]{getTrustManager()},null);    SSLConnectionSocketFactory scsf=new SSLConnectionSocketFactory(ctx,SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);    builder.setSSLSocketFactory(scsf);    Registry<ConnectionSocketFactory> registry=RegistryBuilder.<ConnectionSocketFactory>create().register("https",scsf).build();    HttpClientConnectionManager ccm=new BasicHttpClientConnectionManager(registry);    builder.setConnectionManager(ccm);    return builder.build();  } catch (  Exception ex) {    ex.printStackTrace();    return null;  }}  }
class C{  public static String[][] read(final URL url) throws IOException {  URLConnection con=url.openConnection();  return read(con.getInputStream());}  }
class C{  public static Object instantiate(ClassLoader cls,String beanName,BeanContext beanContext) throws IOException, ClassNotFoundException {  return internalInstantiate(cls,beanName,beanContext,null);}  }
class C{  public static int toInt(byte[] bytes,int index){  return (((bytes[index + 3]) << 24) | ((bytes[index + 2] & 0xff) << 16) | ((bytes[index + 1] & 0xff) << 8)| ((bytes[index] & 0xff)));}  }
class C{  public boolean hasPrimaryKey(){  return m_hasPrimaryKey;}  }
class C{  private void showAddOrEditDialog(final String editingWord,final String editingShortcut){  final Bundle args=new Bundle();  args.putInt(UserDictionaryAddWordContents.EXTRA_MODE,null == editingWord ? UserDictionaryAddWordContents.MODE_INSERT : UserDictionaryAddWordContents.MODE_EDIT);  args.putString(UserDictionaryAddWordContents.EXTRA_WORD,editingWord);  args.putString(UserDictionaryAddWordContents.EXTRA_SHORTCUT,editingShortcut);  args.putString(UserDictionaryAddWordContents.EXTRA_LOCALE,mLocale);  android.preference.PreferenceActivity pa=(android.preference.PreferenceActivity)getActivity();  pa.startPreferencePanel(com.android.settings.inputmethod.UserDictionaryAddWordFragment.class.getName(),args,R.string.user_dict_settings_add_dialog_title,null,null,0);}  }
class C{  public RosterEntryComboBox(Roster roster){  this(roster,Roster.getDefault().getDefaultRosterGroup(),null,null,null,null,null,null,null);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void transform(Transform3D transform){  Transform3D current=getTransform();  current.mul(transform,current);  setTransform(current);}  }
class C{  private void drawHorizontalRangeSlider(final GC gc){  drawBackgroundHorizontal(gc);  drawBarsHorizontal(gc);  coordUpper=drawHorizontalKnob(gc,upperValue,true);  coordLower=drawHorizontalKnob(gc,lowerValue,false);}  }
class C{  public double distance(int x,int y){  return Math.sqrt(distanceSquared(x,y));}  }
class C{  public Holder(){}  }
class C{  protected void fireResponseListener(ActionEvent ev){  if (actionListeners != null) {    actionListeners.fireActionEvent(ev);  }}  }
class C{  public static int decode(byte[] data,OutputStream out) throws IOException {  int off=0;  int length=data.length;  int endOffset=off + length;  int bytesWritten=0;  while (off < endOffset) {    byte ch=data[off++];    if (ch == '_') {      out.write(' ');    } else     if (ch == '=') {      if (off + 1 >= endOffset) {        throw new IOException("Invalid quoted printable encoding; truncated escape sequence");      }      byte b1=data[off++];      byte b2=data[off++];      if (b1 == '\r') {        if (b2 != '\n') {          throw new IOException("Invalid quoted printable encoding; CR must be followed by LF");        }      } else {        int c1=hexToBinary(b1);        int c2=hexToBinary(b2);        out.write((c1 << UPPER_NIBBLE_SHIFT) | c2);        bytesWritten++;      }    } else {      out.write(ch);      bytesWritten++;    }  }  return bytesWritten;}  }
class C{  public void testXformLoadFailed_ReenablesXformFetch(){  mController.init();  mFakeGlobalEventBus.post(new FetchXformFailedEvent(FetchXformFailedEvent.Reason.UNKNOWN));  verify(mMockUi).reEnableFetch();}  }
class C{  public static String convertToARGB(int color){  String alpha=Integer.toHexString(Color.alpha(color));  String red=Integer.toHexString(Color.red(color));  String green=Integer.toHexString(Color.green(color));  String blue=Integer.toHexString(Color.blue(color));  if (alpha.length() == 1) {    alpha="0" + alpha;  }  if (red.length() == 1) {    red="0" + red;  }  if (green.length() == 1) {    green="0" + green;  }  if (blue.length() == 1) {    blue="0" + blue;  }  return "#" + alpha + red+ green+ blue;}  }
class C{  public PackedDataOutput(DataOutput out){  this.out=out;  current=0;  remainingBits=8;}  }
class C{  public void finishSnapshotting(String workspaceId){  try (StripedLocks.WriteLock ignored=stripedLocks.acquireWriteLock(workspaceId)){    final WorkspaceState state=workspaces.get(workspaceId);    if (state != null && state.status == SNAPSHOTTING) {      state.status=RUNNING;    }  } }  }
class C{  public final void show(final OptionsTreeNode node){  if (!panesByKey.containsKey(node.getTitleKey())) {    OptionsPane pane=FACTORY.createOptionsPane(node);    pane.initOptions();    addPane(pane);    panesByKey.put(node.getTitleKey(),pane);    if (node.getTitleKey().equals(OptionsConstructor.SAVE_BASIC_KEY) && !panesByKey.containsKey(OptionsConstructor.SHARED_BASIC_KEY)) {      OptionsPane shared=FACTORY.createOptionsPane(node);      shared.initOptions();      addPane(shared);      panesByKey.put(node.getTitleKey(),shared);    }  }  CARD_LAYOUT.show(MAIN_PANEL,node.getTitleKey());}  }
class C{  public static NamingException wrapRemoteException(RemoteException re){  NamingException ne;  if (re instanceof ConnectException) {    ne=new ServiceUnavailableException();  } else   if (re instanceof AccessException) {    ne=new NoPermissionException();  } else   if (re instanceof StubNotFoundException || re instanceof UnknownHostException || re instanceof SocketSecurityException) {    ne=new ConfigurationException();  } else   if (re instanceof ExportException || re instanceof ConnectIOException || re instanceof MarshalException|| re instanceof UnmarshalException|| re instanceof NoSuchObjectException) {    ne=new CommunicationException();  } else   if (re instanceof ServerException && re.detail instanceof RemoteException) {    ne=wrapRemoteException((RemoteException)re.detail);  } else {    ne=new NamingException();  }  ne.setRootCause(re);  return ne;}  }
class C{  public ChangeLocaleCartCommandImpl(final ShoppingCartCommandRegistry registry,final LanguageService languageService){  super(registry);  this.languageService=languageService;}  }
class C{  public Draft(){  super(KEY);}  }
class C{  protected void startNode(Node node) throws org.xml.sax.SAXException {  if (node instanceof Locator) {    Locator loc=(Locator)node;    m_locator.setColumnNumber(loc.getColumnNumber());    m_locator.setLineNumber(loc.getLineNumber());    m_locator.setPublicId(loc.getPublicId());    m_locator.setSystemId(loc.getSystemId());  } else {    m_locator.setColumnNumber(0);    m_locator.setLineNumber(0);  }switch (node.getNodeType()) {case Node.COMMENT_NODE:{      String data=((Comment)node).getData();      if (m_contentHandler instanceof LexicalHandler) {        LexicalHandler lh=((LexicalHandler)this.m_contentHandler);        lh.comment(data.toCharArray(),0,data.length());      }    }  break;case Node.DOCUMENT_FRAGMENT_NODE:break;case Node.DOCUMENT_NODE:break;case Node.ELEMENT_NODE:Element elem_node=(Element)node;{String uri=elem_node.getNamespaceURI();if (uri != null) {String prefix=elem_node.getPrefix();if (prefix == null) prefix="";this.m_contentHandler.startPrefixMapping(prefix,uri);}}NamedNodeMap atts=elem_node.getAttributes();int nAttrs=atts.getLength();for (int i=0; i < nAttrs; i++) {final Node attr=atts.item(i);final String attrName=attr.getNodeName();final int colon=attrName.indexOf(':');final String prefix;if (attrName.equals("xmlns") || attrName.startsWith("xmlns:")) {if (colon < 0) prefix=""; else prefix=attrName.substring(colon + 1);this.m_contentHandler.startPrefixMapping(prefix,attr.getNodeValue());} else if (colon > 0) {prefix=attrName.substring(0,colon);String uri=attr.getNamespaceURI();if (uri != null) this.m_contentHandler.startPrefixMapping(prefix,uri);}}String ns=m_dh.getNamespaceOfNode(node);if (null == ns) ns="";this.m_contentHandler.startElement(ns,m_dh.getLocalNameOfNode(node),node.getNodeName(),new AttList(atts,m_dh));break;case Node.PROCESSING_INSTRUCTION_NODE:{ProcessingInstruction pi=(ProcessingInstruction)node;String name=pi.getNodeName();if (name.equals("xslt-next-is-raw")) {nextIsRaw=true;} else {this.m_contentHandler.processingInstruction(pi.getNodeName(),pi.getData());}}break;case Node.CDATA_SECTION_NODE:{boolean isLexH=(m_contentHandler instanceof LexicalHandler);LexicalHandler lh=isLexH ? ((LexicalHandler)this.m_contentHandler) : null;if (isLexH) {lh.startCDATA();}dispatachChars(node);{if (isLexH) {lh.endCDATA();}}}break;case Node.TEXT_NODE:{if (nextIsRaw) {nextIsRaw=false;m_contentHandler.processingInstruction(javax.xml.transform.Result.PI_DISABLE_OUTPUT_ESCAPING,"");dispatachChars(node);m_contentHandler.processingInstruction(javax.xml.transform.Result.PI_ENABLE_OUTPUT_ESCAPING,"");} else {dispatachChars(node);}}break;case Node.ENTITY_REFERENCE_NODE:{EntityReference eref=(EntityReference)node;if (m_contentHandler instanceof LexicalHandler) {((LexicalHandler)this.m_contentHandler).startEntity(eref.getNodeName());} else {}}break;default :}}  }
class C{  public boolean isDirectSuccessor(BytecodeInstruction v1,BytecodeInstruction v2){  if (v1 == null || v2 == null)   throw new IllegalArgumentException("null given");  if (!knowsInstruction(v1) || !knowsInstruction(v2))   throw new IllegalArgumentException("instructions not contained in this CFG");  BasicBlock b1=v1.getBasicBlock();  BasicBlock b2=v2.getBasicBlock();  if (b1 == null || b2 == null)   throw new IllegalStateException("expect CFG to contain the BasicBlock for each instruction knowsInstruction() returns true on");  return isDirectSuccessor(b1,b2);}  }
class C{  public RMIMasterSocketFactory(){  altFactoryList=new Vector<>(2);  boolean setFactories=false;  try {    String proxyHost;    proxyHost=java.security.AccessController.doPrivileged(new GetPropertyAction("http.proxyHost"));    if (proxyHost == null)     proxyHost=java.security.AccessController.doPrivileged(new GetPropertyAction("proxyHost"));    boolean disable=java.security.AccessController.doPrivileged(new GetPropertyAction("java.rmi.server.disableHttp","true")).equalsIgnoreCase("true");    if (!disable && proxyHost != null && proxyHost.length() > 0) {      setFactories=true;    }  } catch (  Exception e) {  }  if (setFactories) {    altFactoryList.addElement(new RMIHttpToPortSocketFactory());    altFactoryList.addElement(new RMIHttpToCGISocketFactory());  }}  }
class C{  public PKCS5S2ParametersGenerator(){  this(AndroidDigestFactory.getSHA1());}  }
class C{  public static boolean hasIccCard(Context context){  TelephonyManager tm=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);  return tm.hasIccCard();}  }
class C{  public static String right(String s,int width){  return right(s,width,' ');}  }
class C{  private void checkFindAccessibilityNodeInfoResultIntegrity(List<AccessibilityNodeInfo> infos){  if (infos.size() == 0) {    return;  }  AccessibilityNodeInfo root=infos.get(0);  final int infoCount=infos.size();  for (int i=1; i < infoCount; i++) {    for (int j=i; j < infoCount; j++) {      AccessibilityNodeInfo candidate=infos.get(j);      if (root.getParentNodeId() == candidate.getSourceNodeId()) {        root=candidate;        break;      }    }  }  if (root == null) {    Log.e(LOG_TAG,"No root.");  }  HashSet<AccessibilityNodeInfo> seen=new HashSet<AccessibilityNodeInfo>();  Queue<AccessibilityNodeInfo> fringe=new LinkedList<AccessibilityNodeInfo>();  fringe.add(root);  while (!fringe.isEmpty()) {    AccessibilityNodeInfo current=fringe.poll();    if (!seen.add(current)) {      Log.e(LOG_TAG,"Duplicate node.");      return;    }    SparseLongArray childIds=current.getChildNodeIds();    final int childCount=childIds.size();    for (int i=0; i < childCount; i++) {      final long childId=childIds.valueAt(i);      for (int j=0; j < infoCount; j++) {        AccessibilityNodeInfo child=infos.get(j);        if (child.getSourceNodeId() == childId) {          fringe.add(child);        }      }    }  }  final int disconnectedCount=infos.size() - seen.size();  if (disconnectedCount > 0) {    Log.e(LOG_TAG,disconnectedCount + " Disconnected nodes.");  }}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  m_expr.fixupVariables(vars,globalsSize);}  }
class C{  public static <T>BiMap<T,Integer> create(Collection<T> collection){  return create(collection,0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:52.427 -0500",hash_original_method="9AD980F40A2045042AAB302D5FCF2B5F",hash_generated_method="30BC18EB056406780EC8E5E51FC6F0CF") public AndroidPrintStream(int priority,String tag){  if (tag == null) {    throw new NullPointerException("tag");  }  this.priority=priority;  this.tag=tag;}  }
class C{  protected static InternalDistributedMember fetchDistributionManagerId(){  InternalDistributedSystem sys=InternalDistributedSystem.getAnyInstance();  if (sys != null) {    return sys.getDistributionManager().getId();  } else {    return null;  }}  }
class C{  synchronized String[] toStringArray(){  if (suiteNames == null) {    suiteNames=new String[cipherSuites.size()];    int i=0;    for (    CipherSuite c : cipherSuites) {      suiteNames[i++]=c.name;    }  }  return suiteNames.clone();}  }
class C{  public GridClientConfiguration(String prefix,Properties in) throws GridClientException {  load(prefix,in);}  }
class C{  protected Object newInitialFlow(){  return emptySet.clone();}  }
class C{  public static <T>T use(List<Class> categoryClasses,Closure<T> closure){  return THREAD_INFO.getInfo().use(categoryClasses,closure);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.071 -0500",hash_original_method="19D08FF6AA5F9D4D6B65E686C6EC5676",hash_generated_method="679C3A0573ECBD7C7C7659C937002ECA") public int flags(){  return theFlags;}  }
class C{  public void gotoFirstField(){  if (formRanges.size() > 0) {    FormRange firstRange=(FormRange)formRanges.get(0);    setCaretPosition(firstRange.start);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TFUNCTION__AST_ELEMENT:    return astElement != null;case TypesPackage.TFUNCTION__EXTERNAL:  return external != EXTERNAL_EDEFAULT;case TypesPackage.TFUNCTION__FPARS:return fpars != null && !fpars.isEmpty();case TypesPackage.TFUNCTION__RETURN_TYPE_REF:return returnTypeRef != null;case TypesPackage.TFUNCTION__TYPE_VARS:return typeVars != null && !typeVars.isEmpty();case TypesPackage.TFUNCTION__DECLARED_THIS_TYPE:return declaredThisType != null;case TypesPackage.TFUNCTION__DECLARED_ASYNC:return declaredAsync != DECLARED_ASYNC_EDEFAULT;case TypesPackage.TFUNCTION__CONSTRUCTOR:return constructor != CONSTRUCTOR_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public void error(SourceLocator srcLctr,Node styleNode,Node sourceNode,String msg) throws TransformerException {  error(srcLctr,styleNode,sourceNode,msg,null);}  }
class C{  public ImErrorInfo(int code,String description){  mCode=code;  mDescription=description;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.SCRIPT;}  }
class C{  public static void startInstalledAppDetails(Context context,String packageName){  Intent intent=new Intent();  int sdkVersion=Build.VERSION.SDK_INT;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {    intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);    intent.setData(Uri.fromParts("package",packageName,null));  } else {    intent.setAction(Intent.ACTION_VIEW);    intent.setClassName("com.android.settings","com.android.settings.InstalledAppDetails");    intent.putExtra((sdkVersion == Build.VERSION_CODES.FROYO ? "pkg" : "com.android.settings.ApplicationPkgName"),packageName);  }  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(intent);}  }
class C{  public boolean isMostlyInside(Rectangle rect){  return centroid().inside(rect.getBoundingRect());}  }
class C{  public static Stats compute(HyperEdge edge,float spanPct,References references){  Stats stats=new Stats();  stats.reflen=(int)(spanPct * references.reflen);  Rule rule=edge.getRule();  if (rule != null) {    int[] symbols=rule.getEnglish();    ArrayList<Integer> currentNgram=new ArrayList<>();    int boundary=-1;    int tailIndex=-1;    for (    int symbol : symbols) {      if (symbol < 0) {        tailIndex++;        NgramDPState ngramState=null;        try {          ngramState=(NgramDPState)edge.getTailNodes().get(tailIndex).getDPState(0);        } catch (        ClassCastException e) {          throw new RuntimeException(String.format("* FATAL: first state needs to be NgramDPState (found %s)",edge.getTailNodes().get(tailIndex).getDPState(0).getClass()));        }        if (currentNgram.size() > 0) {          boundary=currentNgram.size();          for (          int id : ngramState.getLeftLMStateWords())           currentNgram.add(id);          Stats partStats=computeOverDivide(currentNgram,references,boundary);          stats.add(partStats);          currentNgram.clear();        }        for (        int id : ngramState.getRightLMStateWords())         currentNgram.add(id);        boundary=currentNgram.size();      } else {        currentNgram.add(symbol);        stats.len++;        if (boundary != -1) {          Stats partStats=computeOverDivide(currentNgram,references,boundary);          stats.add(partStats);          for (int j=0; j < boundary; j++)           currentNgram.remove(0);          boundary=-1;        }      }      if (currentNgram.size() > 0 && currentNgram.size() != boundary) {        Stats partStats=computeOverDivide(currentNgram,references,boundary);        stats.add(partStats);      }    }  }  return stats;}  }
class C{  public double computeAverageEntropyOfObservation2(){  double entropy=0.0;  for (int b=0; b < totalObservations; b++) {    double prob=mvkeDest.getProbability(destObservations[b],b);    double cont=0.0;    if (prob > 0.0) {      cont=-Math.log(prob);    }    entropy+=cont;    if (debug) {      System.out.println(b + ": " + prob+ " -> "+ cont / Math.log(2.0) + " -> sum: " + (entropy / Math.log(2.0)));    }  }  return entropy / (double)totalObservations / Math.log(2.0);}  }
class C{  public boolean match(String stringToMatch){  if (stringToMatch == null) {    return false;  }  return likeUtil.compare(stringToMatch);}  }
class C{  public static void fill(short[] array,int start,int end,short value){  checkBounds(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  private void parseViewElement(View view,JSONObject elem) throws ScreenConfigException {  try {    view.setViewElement(elem);    String[] attributes=JSONObject.getNames(elem);    int length=attributes.length;    for (int i=0; i < length; i++) {      String attrName=attributes[i];      if (attrName.equals("useController")) {        parseViewUseControllerAttribute(view,elem);      } else       if (attrName.equals("useResource")) {        parseViewUseResourceAttribute(view,elem);      } else       if (attrName.equals("useFormatter")) {        parseViewUseFormatterAttribute(view,elem);      } else       if (attrName.equals("useDataSource")) {        parseViewUseDatasourceAttribute(view,elem);      } else       if (attrName.equals("useView")) {      } else       if (attrName.equals("width")) {        view.setWidth(elem.getString(attrName));      } else       if (attrName.equals("styleName")) {        view.setStyleName(elem.getString(attrName));      } else       if (attrName.equals("height")) {        view.setHeight(elem.getString(attrName));      } else       if (attrName.equals("smallViewport")) {        view.setSmallViewport(elem.getString(attrName));      } else       if (attrName.equals("largeViewport")) {        view.setLargeViewport(elem.getString(attrName));      } else       if (attrName.equals("disableRefresh")) {        view.setDisableRefresh(elem.getBoolean(attrName));      } else       if (attrName.startsWith("on")) {        Event event=EventFactory.getEvent(attrName,elem.getString(attrName));        if (event != null) {          view.addEvent(event);        }      } else       if (attrName.equals("title")) {        String title=elem.getString(attrName);        if (title != null && title.length() > 0) {          view.setTitle(title);        }      } else       if (attrName.equals("fragment")) {        String fragment=elem.getString(attrName);        if (fragment != null && fragment.length() > 0) {          view.setFragment(fragment);        }      } else       if (attrName.equals("dataObject")) {        String dataObject=elem.getString(attrName);        if (dataObject != null && dataObject.length() > 0) {          view.setDataObject(dataObject);        }      } else       if (!attrName.equals("id") && !attrName.equals("_type")) {        if (logger.isInfoEnabled())         logger.info("Error setting property [" + attrName + "] for view ["+ view.getId()+ "].");      }    }  } catch (  JSONException e) {    throw new ScreenConfigException("Error parsing view metaData. View [" + view.getId() + "].");  }}  }
class C{  public void testConstructor_StringIInetAddressI() throws Exception {  int sport=startServer("Cons String,I,InetAddress,I");  int[] invalidPort={-1,Integer.MIN_VALUE,65536,Integer.MAX_VALUE};  SSLSocket ssl=getSSLSocket(InetAddress.getLocalHost().getHostName(),sport,InetAddress.getLocalHost(),0);  assertNotNull(ssl);  assertEquals(sport,ssl.getPort());  try {    getSSLSocket(InetAddress.getLocalHost().getHostName(),8081,InetAddress.getLocalHost(),8082);    fail();  } catch (  IOException expected) {  }  for (int i=0; i < invalidPort.length; i++) {    try {      getSSLSocket(InetAddress.getLocalHost().getHostName(),invalidPort[i],InetAddress.getLocalHost(),0);      fail();    } catch (    IllegalArgumentException expected) {    }    try {      getSSLSocket(InetAddress.getLocalHost().getHostName(),sport,InetAddress.getLocalHost(),invalidPort[i]);      fail();    } catch (    IllegalArgumentException expected) {    }  }  try {    getSSLSocket("bla-bla",sport,InetAddress.getLocalHost(),0);    fail();  } catch (  UnknownHostException expected) {  }}  }
class C{  public static void ensureSameLength(final char[] a,final char[] b){  if (a.length != b.length)   throw new IllegalArgumentException("Array size mismatch: " + a.length + " != "+ b.length);}  }
class C{  public void reset(){  System.arraycopy(IV,0,ofbV,0,IV.length);  cipher.reset();}  }
class C{  public CHelpLabel(final String text,final IHelpInformation information){  super(text);  m_information=information;  enableEvents(AWTEvent.MOUSE_EVENT_MASK);}  }
class C{  @Override public StompFrame onAck(StompFrame request){  StompFrame response=null;  String messageID=request.getHeader(Stomp.Headers.Ack.ID);  String txID=request.getHeader(Stomp.Headers.TRANSACTION);  if (txID != null) {    ActiveMQServerLogger.LOGGER.stompTXAckNorSupported();  }  if (messageID == null) {    ActiveMQStompException error=BUNDLE.noIDInAck().setHandler(connection.getFrameHandler());    return error.getFrame();  }  try {    connection.acknowledge(messageID,null);  } catch (  ActiveMQStompException e) {    response=e.getFrame();  }  return response;}  }
class C{  public static Type unionType(Type lhst,Type rhst,Unit unit){  List<Type> list=new ArrayList<Type>(2);  addToUnion(list,rhst);  addToUnion(list,lhst);  UnionType ut=new UnionType(unit);  ut.setCaseTypes(list);  return ut.getType();}  }
class C{  public MBeanInfo(String className,String description,MBeanAttributeInfo[] attributes,MBeanConstructorInfo[] constructors,MBeanOperationInfo[] operations,MBeanNotificationInfo[] notifications,Descriptor descriptor) throws IllegalArgumentException {  this.className=className;  this.description=description;  if (attributes == null)   attributes=MBeanAttributeInfo.NO_ATTRIBUTES;  this.attributes=attributes;  if (operations == null)   operations=MBeanOperationInfo.NO_OPERATIONS;  this.operations=operations;  if (constructors == null)   constructors=MBeanConstructorInfo.NO_CONSTRUCTORS;  this.constructors=constructors;  if (notifications == null)   notifications=MBeanNotificationInfo.NO_NOTIFICATIONS;  this.notifications=notifications;  if (descriptor == null)   descriptor=ImmutableDescriptor.EMPTY_DESCRIPTOR;  this.descriptor=descriptor;  this.arrayGettersSafe=arrayGettersSafe(this.getClass(),MBeanInfo.class);}  }
class C{  public BMPWriter(JComponent c){  super(c);}  }
class C{  public ISO9796d2PSSSigner(AsymmetricBlockCipher cipher,Digest digest,int saltLength,boolean implicit){  this.cipher=cipher;  this.digest=digest;  this.hLen=digest.getDigestSize();  this.saltLength=saltLength;  if (implicit) {    trailer=TRAILER_IMPLICIT;  } else {    Integer trailerObj=(Integer)trailerMap.get(digest.getAlgorithmName());    if (trailerObj != null) {      trailer=trailerObj.intValue();    } else {      throw new IllegalArgumentException("no valid trailer for digest");    }  }}  }
class C{  public MediaScanner(Context context,String string){  mFile=string;  mMediaScanner=new MediaScannerConnection(context,this);  mMediaScanner.connect();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (id: ");  result.append(id);  result.append(", type: ");  result.append(type);  result.append(')');  return result.toString();}  }
class C{  @SmallTest public void testBeamsOverlapMajorAxisCloserMinorAxisFurther(){  assertBetterCandidate(View.FOCUS_DOWN,new Rect(0,0,100,100),new Rect(0,100,480,200),new Rect(0,200,100,300));}  }
class C{  private void updateCurrentTime(){  boolean updateMinutes=(mPreviousMinute != mActualMinute);  boolean updateHours=(mPreviousHour != mActualHour);  mShadowDialController.updateShapeShadowsToCurrentTime(updateMinutes,updateHours,mActualMinute,mActualHour);  if (updateMinutes) {    mPreviousMinute=mActualMinute;  }  if (updateHours) {    mPreviousHour=mActualHour;  }}  }
class C{  public lalr_item find(lalr_item itm){  return (lalr_item)_all.get(itm);}  }
class C{  public JobType matchJobType(HadoopApplicationData data){  if (data != null) {    List<JobType> jobTypeList=_appTypeToJobTypes.get(data.getApplicationType());    Properties jobProp=data.getConf();    for (    JobType type : jobTypeList) {      if (type.matchType(jobProp)) {        return type;      }    }  }  return null;}  }
class C{  public static LatLonPoint MGRStoLL(Ellipsoid ellip,double northing,double easting,int zoneNumber,char zoneLetter,LatLonPoint llp){  return UTMtoLL(ellip,northing,easting,zoneNumber,MGRSPoint.MGRSZoneToUTMZone(zoneLetter),llp);}  }
class C{  public static String toIdentityVariableName(String varName){  char[] chars=varName.toCharArray();  long changes=0;  StringBuilder rtn=new StringBuilder(chars.length + 2);  rtn.append("CF");  for (int i=0; i < chars.length; i++) {    char c=chars[i];    if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'))     rtn.append(c); else {      rtn.append('_');      changes+=(c * (i + 1));    }  }  return rtn.append(changes).toString();}  }
class C{  private Bits(){}  }
class C{  public static boolean isIn24HourInterval(double startIntervalTime,double endIntervalTime,double timeToCheck){  errorIfNot24HourProjectedTime(startIntervalTime);  errorIfNot24HourProjectedTime(endIntervalTime);  errorIfNot24HourProjectedTime(timeToCheck);  if (startIntervalTime < endIntervalTime && timeToCheck >= startIntervalTime && timeToCheck <= endIntervalTime) {    return true;  }  if (startIntervalTime > endIntervalTime && (timeToCheck >= startIntervalTime || timeToCheck <= endIntervalTime)) {    return true;  }  return false;}  }
class C{  public KillerTable(){  ktList=new KTEntry[200];  for (int i=0; i < ktList.length; i++)   ktList[i]=new KTEntry();}  }
class C{  public void remove(Instance instance){  placements.add(new Placement(instance,frameNumber));}  }
class C{  private void attemptOutlinePaintSelection(){  Color c;  c=JColorChooser.showDialog(this,localizationResources.getString("Outline_Color"),Color.blue);  if (c != null) {    this.outlinePaintSample.setPaint(c);  }}  }
class C{  public int lastIndexOf(String str){  return lastIndexOf(str,size - 1);}  }
class C{  private static void parseFilesInformation(final Node registersNode,final List<RemoteFile> files){  final NodeList nodes=registersNode.getChildNodes();  for (int i=0; i < nodes.getLength(); ++i) {    final Node node=nodes.item(i);    final String nodeName=node.getNodeName();    if ("File".equals(nodeName)) {      files.add(new RemoteFile(node.getAttributes().getNamedItem("name").getNodeValue()));    }  }}  }
class C{  Node<K,V> findNear(K kkey,int rel){  Comparable<? super K> key=comparable(kkey);  for (; ; ) {    Node<K,V> b=findPredecessor(key);    Node<K,V> n=b.next;    for (; ; ) {      if (n == null)       return ((rel & LT) == 0 || b.isBaseHeader()) ? null : b;      Node<K,V> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (v == n || b.value == null)       break;      int c=key.compareTo(n.key);      if ((c == 0 && (rel & EQ) != 0) || (c < 0 && (rel & LT) == 0))       return n;      if (c <= 0 && (rel & LT) != 0)       return b.isBaseHeader() ? null : b;      b=n;      n=f;    }  }}  }
class C{  public FastBooleanBuffer append(FastBooleanBuffer buff){  if (buff.size == 0) {    return this;  }  for (int i=0; i < buff.currentBufferIndex; i++) {    append(buff.buffers[i]);  }  append(buff.currentBuffer,0,buff.offset);  return this;}  }
class C{  public void logWarn(Object message,Throwable exception){  logInternal(WARN,message,exception);}  }
class C{  public static void registerProcess(final int adTableId,final int adProcessId){  Check.assume(adTableId > 0,"adTableId > 0");  Check.assume(adProcessId > 0,"adProcessId > 0");  List<Integer> processIds=staticRegisteredProcesses.get(adTableId);  if (processIds == null) {    processIds=new ArrayList<Integer>();    staticRegisteredProcesses.put(adTableId,processIds);  }  if (!processIds.contains(adProcessId)) {    processIds.add(adProcessId);  }}  }
class C{  public int indexOf(int offset,byte value){  for (int i=offset; i < _pos; i++) {    if (_data[i] == value) {      return i;    }  }  return -1;}  }
class C{  private boolean isSensorRepeatedMessage(byte sortID){  String sExpected=HexDump.toHexString(expectedSensorSortNumber);  String sSortId=HexDump.toHexString(sortID);  if (sExpected != null && sSortId != null && sExpected.length() == sSortId.length() && sExpected.length() >= 2) {    return (sExpected.charAt(0) == sSortId.charAt(0)) && (sSortId.charAt(1) == '1');  } else   return false;}  }
class C{  public SimpleLog(String filename){  this(filename,true);}  }
class C{  private String generateId(){  return UUID.randomUUID().toString().toUpperCase() + "-GF";}  }
class C{  public void flush(IoSession session){  try {    internalFlush(session.getFilterChain().getNextFilter(this),session,buffersMap.get(session));  } catch (  Exception e) {    session.getFilterChain().fireExceptionCaught(e);  }}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  static GramBooleanQuery computeConjunction(GramBooleanQuery left,GramBooleanQuery right){  if (right.operator == QueryOp.ANY) {    return deepCopy(left);  }  if (right.operator == QueryOp.NONE) {    return deepCopy(right);  }  if (left.operator == QueryOp.ANY) {    return deepCopy(right);  }  if (left.operator == QueryOp.NONE) {    return deepCopy(left);  }  if ((left.operator == QueryOp.AND && right.operator == QueryOp.AND) || (left.operator == QueryOp.AND && right.operator == QueryOp.LEAF) || (left.operator == QueryOp.LEAF && right.operator == QueryOp.AND)) {    GramBooleanQuery toReturn=new GramBooleanQuery(QueryOp.AND);    mergeIntoSubquery(toReturn,deepCopy(left));    mergeIntoSubquery(toReturn,deepCopy(right));    return toReturn;  } else {    GramBooleanQuery toReturn=new GramBooleanQuery(QueryOp.AND);    toReturn.subQuerySet.add(deepCopy(left));    toReturn.subQuerySet.add(deepCopy(right));    return toReturn;  }}  }
class C{  public KMeanspp(OperatorDescription description,int anz,ExampleSet es,DistanceMeasure measure,RandomGenerator generator) throws OperatorException {  super(description);  this.minK=anz;  this.exampleSet=es;  this.examplesize=es.size();  this.measure=measure;  this.generator=generator;}  }
class C{  public PLObject(){  super();}  }
class C{  public boolean isCellEditable(int row,int column){  if (column == 0) {    return false;  }  if (columnNames[column] == TYPE) {    IndicatorSeries element=getData().getIndicatorSeries().get(row);    if (null != element.getIdIndicatorSeries()) {      return false;    }  }  return true;}  }
class C{  private void fillPicks() throws Exception {  prepareTable(m_layout,getTableName()," DocStatus='" + MPPOrder.DOCSTATUS_Drafted + "' ","2");  executeQuery();}  }
class C{  synchronized void enqueue(Reference<? extends T> reference){  if (head == null) {    reference.queueNext=reference;  } else {    reference.queueNext=head;  }  head=reference;  notify();}  }
class C{  public static int encodeLatitude(double latitude){  checkLatitude(latitude);  if (latitude == 90.0D) {    latitude=Math.nextDown(latitude);  }  return (int)Math.floor(latitude / LAT_DECODE);}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  protected int defaultMaxInstNum(){  return 50;}  }
class C{  private void loadNetwork(){  if ((this.config.network() != null) && (this.config.network().getInputFile() != null)) {    URL networkUrl=this.config.network().getInputFileURL(this.config.getContext());    log.info("loading network from " + networkUrl);    if (config.network().getInputCRS() == null) {      MatsimNetworkReader reader=new MatsimNetworkReader(this.scenario.getNetwork());      reader.putAttributeConverters(attributeConverters);      reader.parse(networkUrl);    } else {      log.info("re-projecting network from " + config.network().getInputCRS() + " to "+ config.global().getCoordinateSystem()+ " for import");      final CoordinateTransformation transformation=TransformationFactory.getCoordinateTransformation(config.network().getInputCRS(),config.global().getCoordinateSystem());      MatsimNetworkReader reader=new MatsimNetworkReader(transformation,this.scenario.getNetwork());      reader.putAttributeConverters(attributeConverters);      reader.parse(networkUrl);    }    if ((this.config.network().getChangeEventsInputFile() != null) && this.config.network().isTimeVariantNetwork()) {      log.info("loading network change events from " + this.config.network().getChangeEventsInputFileUrl(this.config.getContext()).getFile());      Network network=this.scenario.getNetwork();      List<NetworkChangeEvent> changeEvents=new ArrayList<>();      NetworkChangeEventsParser parser=new NetworkChangeEventsParser(network,changeEvents);      parser.parse(this.config.network().getChangeEventsInputFileUrl(config.getContext()));      NetworkUtils.setNetworkChangeEvents(network,changeEvents);    }  }}  }
class C{  private static boolean shouldParkAfterFailedAcquire(Node pred,Node node){  int ws=pred.waitStatus;  if (ws == Node.SIGNAL)   return true;  if (ws > 0) {    do {      node.prev=pred=pred.prev;    } while (pred.waitStatus > 0);    pred.next=node;  } else {    compareAndSetWaitStatus(pred,ws,Node.SIGNAL);  }  return false;}  }
class C{  public double doubleValue(){  return hi + lo;}  }
class C{  protected SourceRecord consumeRecord() throws InterruptedException {  return consumedLines.poll(pollTimeoutInMs,TimeUnit.MILLISECONDS);}  }
class C{  public LayoutShortcutsPlugin(GLPanel panel){  this.panel=panel;}  }
class C{  public static void validate(ASN1ObjectIdentifier oid) throws InvalidObjectIdException {  int[] arcs=extractArcs(oid);  validate(arcs);}  }
class C{  private void fillEngineers(){  for (  String engineer : migrationTask.getEngineers()) {    engineers.add(engineer);  }}  }
class C{  public static void main(String[] args) throws Exception {  Ignition.setClientMode(true);  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    if (!ExamplesUtils.hasServerNodes(ignite))     return;    IgniteCache<AffinityUuid,String> stmCache=ignite.getOrCreateCache(CacheConfig.wordCache());    try (IgniteDataStreamer<AffinityUuid,String> stmr=ignite.dataStreamer(stmCache.getName())){      while (true) {        InputStream in=StreamWords.class.getResourceAsStream("alice-in-wonderland.txt");        try (LineNumberReader rdr=new LineNumberReader(new InputStreamReader(in))){          for (String line=rdr.readLine(); line != null; line=rdr.readLine()) {            for (            String word : line.split(" "))             if (!word.isEmpty())             stmr.addData(new AffinityUuid(word),word);          }        }       }    }   } }  }
class C{  public double computeDistance(BloomFilter<E> filter){  if (this.metric == 2)   return computeJaccardDistance(filter); else   if (this.metric == 3)   return computeCosineDistance(filter);  return computeHammingDistance(filter);}  }
class C{  public static String formatTime(long time){  SimpleDateFormat sdf=new SimpleDateFormat("h:mm a");  Calendar c=Calendar.getInstance();  c.setTimeInMillis(time * 1000);  return sdf.format(c.getTime());}  }
class C{  public static boolean isEmpty(String string){  return string == null || string.length() == 0;}  }
class C{  public Iterator<String> keyIterator(){  return mRequestInformation.keySet().iterator();}  }
class C{  public static void initialize(Context context){  sContext=context;  sIsMuted=Prefs.getBoolean(PrefKeys.MUTED,false);}  }
class C{  public void mouseReleased(MouseEvent e){}  }
class C{  public double constrain(double value){  double result=value;  if (!contains(value)) {    if (value > this.upper) {      result=this.upper;    } else     if (value < this.lower) {      result=this.lower;    }  }  return result;}  }
class C{  @YesNoCancelResult public static int showYesNoCancelDialog(String message,@NotNull @Nls(capitalization=Nls.Capitalization.Title) String title,@NotNull String yes,@NotNull String no,@NotNull String cancel,Icon icon,@Nullable DialogWrapper.DoNotAskOption doNotAskOption){  try {    if (canShowMacSheetPanel()) {      return MacMessages.getInstance().showYesNoCancelDialog(title,message,yes,no,cancel,null,doNotAskOption);    }  } catch (  MessageException ignored) {  }catch (  Exception reportThis) {    LOG.error(reportThis);  }  int buttonNumber=showDialog(message,title,new String[]{yes,no,cancel},0,icon,doNotAskOption);  return buttonNumber == 0 ? YES : buttonNumber == 1 ? NO : CANCEL;}  }
class C{  public XmlWriter(OutputStream stream,boolean autoFlush){  writer=new PrintWriter(stream,autoFlush);}  }
class C{  public void testBug4119() throws Exception {  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug4119");    this.stmt.executeUpdate("CREATE TABLE `testBug4119` (`field1` varchar(255) NOT NULL default '', `field2` bigint(20) default NULL," + "`field3` int(11) default NULL, `field4` datetime default NULL, `field5` varchar(75) default NULL," + "`field6` varchar(75) default NULL, `field7` varchar(75) default NULL, `field8` datetime default NULL,"+ " PRIMARY KEY  (`field1`(100)))");    PreparedStatement pStmt=this.conn.prepareStatement("insert into testBug4119 (field2, field3, field4, field5, field6, field7, field8, field1) values (?, ?, ?, ?, ?, ?, ?, ?)");    pStmt.setString(1,"0");    pStmt.setString(2,"0");    pStmt.setTimestamp(3,new java.sql.Timestamp(System.currentTimeMillis()));    pStmt.setString(4,"ABC");    pStmt.setString(5,"DEF");    pStmt.setString(6,"AA");    pStmt.setTimestamp(7,new java.sql.Timestamp(System.currentTimeMillis()));    pStmt.setString(8,"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");    pStmt.executeUpdate();  }  finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug4119");  }}  }
class C{  public static Rectangle computeUnion(int x,int y,int width,int height,Rectangle dest){  int x1=(x < dest.x) ? x : dest.x;  int x2=((x + width) > (dest.x + dest.width)) ? (x + width) : (dest.x + dest.width);  int y1=(y < dest.y) ? y : dest.y;  int y2=((y + height) > (dest.y + dest.height)) ? (y + height) : (dest.y + dest.height);  dest.x=x1;  dest.y=y1;  dest.width=(x2 - x1);  dest.height=(y2 - y1);  return dest;}  }
class C{  @VisibleForTesting static Intent createFindAndUploadAllCrashesIntent(Context context){  Intent intent=new Intent(context,MinidumpUploadService.class);  intent.setAction(ACTION_FIND_ALL);  return intent;}  }
class C{  private String[] cleanTextForSRT(Caption current){  String[] lines;  String text=current.content;  lines=text.split("<br />");  for (int i=0; i < lines.length; i++) {    lines[i]=lines[i].replaceAll("\\<.*?\\>","");  }  return lines;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int col;  int row;  int numCols;  int numRows;  int i;  int progress;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    numRows=image.getNumberRows();    numCols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    double[] data;    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] == noData) {          output.setValue(row,col,0);        } else {          output.setValue(row,col,data[col]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (numRows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void visitIntInsn(int opcode,int operand){  if (opcode == Opcodes.NEWARRAY) {    if (operand >= 4 && operand <= 11) {      super.visitInsn(Opcodes.DUP);      super.visitIntInsn(opcode,operand);      invokeRecordAllocation(primitiveTypeNames[operand]);    } else {      AllocationInstrumenter.logger.severe("NEWARRAY called with an invalid operand " + operand + ".  Not instrumenting this allocation!");      super.visitIntInsn(opcode,operand);    }  } else {    super.visitIntInsn(opcode,operand);  }}  }
class C{  protected double calculatePairwiseDistance(int i,int j){  final double obsDist=super.calculatePairwiseDistance(i,j);  if (obsDist == 0.0)   return 0.0;  if (obsDist >= const1) {    return MAX_DISTANCE;  }  final double expDist=-const1 * Math.log(1.0 - (const2 * obsDist));  if (expDist < MAX_DISTANCE) {    return expDist;  } else {    return MAX_DISTANCE;  }}  }
class C{  public static final Capsule scale(Capsule capsule,double scale){  if (capsule == null)   throw new NullPointerException(Messages.getString("geometry.nullShape"));  if (scale <= 0)   throw new IllegalArgumentException(Messages.getString("geometry.invalidScale"));  return new Capsule(capsule.getLength() * scale,capsule.getCapRadius() * 2.0 * scale);}  }
class C{  public void clearDataButKeepGameInfo(final String gameName,final String gameRound,final String gameVersion){synchronized (this) {    m_data=null;    m_gameName=gameName;    m_gameRound=gameRound;    m_gameVersion=gameVersion;  }  notifyObs();}  }
class C{  public int read(byte[] bytes,int offset,int count) throws IOException {  if (bytes == null)   throw new IllegalArgumentException("bytes cannot be null.");  int startingCount=count;  int copyCount=Math.min(limit - position,count);  while (true) {    System.arraycopy(buffer,position,bytes,offset,copyCount);    position+=copyCount;    count-=copyCount;    if (count == 0)     break;    offset+=copyCount;    copyCount=optional(count);    if (copyCount == -1) {      if (startingCount == count)       return -1;      break;    }    if (position == limit)     break;  }  return startingCount - count;}  }
class C{  public static void copyFile(File fromFile,File toFile) throws IOException {  FileInputStream fileInputStream=new FileInputStream(fromFile);  FileOutputStream fileOutputStream=new FileOutputStream(toFile);  int i;  byte bytes[]=new byte[2048];  while ((i=fileInputStream.read(bytes)) != -1) {    fileOutputStream.write(bytes,0,i);  }  fileInputStream.close();  fileOutputStream.close();}  }
class C{  public static PSPCommunicationException convertToApi(org.oscm.internal.types.exception.PSPCommunicationException oldEx){  return convertExceptionToApi(oldEx,PSPCommunicationException.class);}  }
class C{  @Override public void buildClassifier(Instances data) throws Exception {  m_rootMeanSquaredError=Double.MAX_VALUE;  m_instances=data;  m_classIndex=m_instances.classIndex();  m_numInstances=m_instances.numInstances();  m_numAttributes=m_instances.numAttributes();  m_nodeModel=null;  m_right=null;  m_left=null;  if ((m_numInstances < m_splitNum) || (Rule.stdDev(m_classIndex,m_instances) < (m_globalDeviation * m_devFraction))) {    m_isLeaf=true;  } else {    m_isLeaf=false;  }  split();}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doPost(request,response);}  }
class C{  @Nullable public static String unboxIfPossible(final String type){  if (type == null)   return null;  final String s=ourUnboxedTypes.get(type);  return s == null ? type : s;}  }
class C{  public ConfigurationBuffer(Class configClass,Map<String,String> aliases,ConfigurationFilter filter){  this.configClass=configClass;  this.varMap=new HashMap<String,List>();  this.committed=new HashSet<String>();  loadCache(configClass,null,filter);  assert (varCache.size() > 0) : "coding error: nothing was configurable in the provided object!";  for (Iterator it=aliases.entrySet().iterator(); it.hasNext(); ) {    Map.Entry e=(Map.Entry)it.next();    addAlias((String)e.getKey(),(String)e.getValue());  }}  }
class C{  public static EnumVerticalRotation fromFacing(EnumFacing facing){switch (facing) {case DOWN:    return DOWN;case UP:  return UP;default :return SIDE;}}  }
class C{  public static void printCallHierarchy(){  if (Log.VERBOSE > DEBUG_LEVEL) {    String tag=getClassName();    String method=callMethodAndLine();    String hierarchy=getCallHierarchy();    Log.v(tag,method + hierarchy);    if (DEBUG_SYSOUT) {      System.out.println(tag + "  " + method+ hierarchy);    }  }}  }
class C{  public AbstractCommandContext(DBCExecutionContext executionContext,boolean atomic){  this.executionContext=executionContext;  this.atomic=atomic;}  }
class C{  public static boolean isUserdata(final LuaValue target){  return target != null && target.type() == LuaValue.TUSERDATA;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.475 -0400",hash_original_method="FA9F888D4C4D27A705AD6E4249FF9A0F",hash_generated_method="C8F649F07984A40C7FEFB1C94172B5AD") @Override public long skip(long ln) throws IOException {  try {    return in.skip(ln);  } catch (  IOException e) {    handleIOException(e);    return 0;  }}  }
class C{  protected ExifTag addTag(ExifTag tag){  if (tag != null) {    int ifd=tag.getIfd();    return addTag(tag,ifd);  }  return null;}  }
class C{  private boolean checkDups(){  Map<String,List<JmrixConfigPane>> ports=new HashMap<>();  ArrayList<JmrixConfigPane> configPaneList=JmrixConfigPane.getListOfConfigPanes();  for (  JmrixConfigPane configPane : configPaneList) {    if (!configPane.getDisabled()) {      String port=configPane.getCurrentProtocolInfo();      if (!port.equals(JmrixConfigPane.NONE)) {        if (!ports.containsKey(port)) {          List<JmrixConfigPane> arg1=new ArrayList<>();          arg1.add(configPane);          ports.put(port,arg1);        } else {          ports.get(port).add(configPane);        }      }    }  }  boolean ret=true;  for (  Map.Entry<String,List<JmrixConfigPane>> e : ports.entrySet()) {    if (e.getValue().size() > 1) {      ret=false;      StringBuilder nameB=new StringBuilder();      for (int n=0; n < e.getValue().size(); n++) {        nameB.append(e.getValue().get(n).getCurrentManufacturerName());        nameB.append("|");      }      String instanceNames=new String(nameB);      instanceNames=instanceNames.substring(0,instanceNames.lastIndexOf("|"));      instanceNames=instanceNames.replaceAll("[|]",", ");      log.error("Duplicate ports found on: " + instanceNames + " for port: "+ e.getKey());    }  }  return ret;}  }
class C{  protected SubscriptionEvent(String nodeId,List<String> subscriptionIds){  super(nodeId);  if (subscriptionIds != null)   subIds=subscriptionIds;}  }
class C{  public boolean isPickFrustumClippingEnabled(){  return pickFrustumClippingEnabled;}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  super.onActivityResult(requestCode,resultCode,data);  FragmentManager fragmentManager=getSupportFragmentManager();  Fragment fragment=fragmentManager.findFragmentByTag("donationsFragment");  if (fragment != null) {    fragment.onActivityResult(requestCode,resultCode,data);  }}  }
class C{  public final void append(char[] chars,int start,int length){  int strlen=length;  if (0 == strlen)   return;  int copyfrom=start;  char[] chunk=m_array[m_lastChunk];  int available=m_chunkSize - m_firstFree;  while (strlen > 0) {    if (available > strlen)     available=strlen;    System.arraycopy(chars,copyfrom,m_array[m_lastChunk],m_firstFree,available);    strlen-=available;    copyfrom+=available;    if (strlen > 0) {      int i=m_array.length;      if (m_lastChunk + 1 == i) {        char[][] newarray=new char[i + 16][];        System.arraycopy(m_array,0,newarray,0,i);        m_array=newarray;      }      chunk=m_array[++m_lastChunk];      if (chunk == null) {        if (m_lastChunk == 1 << m_rebundleBits && m_chunkBits < m_maxChunkBits) {          m_innerFSB=new FastStringBuffer(this);        }        chunk=m_array[m_lastChunk]=new char[m_chunkSize];      }      available=m_chunkSize;      m_firstFree=0;    }  }  m_firstFree+=available;}  }
class C{  public int loadInstruction32(int addr){  return (loadInstruction8(addr) << 24) | (loadInstruction8(addr + 1) << 16) | (loadInstruction8(addr + 2) << 8)| loadInstruction8(addr + 3);}  }
class C{  public GmailSettingsService(String applicationName,String domain,String username,String password) throws AuthenticationException {  super(applicationName,Constants.PROTOCOL,Constants.APPS_APIS_DOMAIN);  this.domain=domain;  new GenericFeed().declareExtensions(getExtensionProfile());  this.setUserCredentials(username + "@" + domain,password);}  }
class C{  @Override public Class loadClass(String name,boolean resolve) throws ClassNotFoundException {  Class c=null;  if (isRelevant(name)) {    c=findLoadedClass(name);    if (c == null) {      try {        c=findClass(name);      } catch (      ClassNotFoundException cnfe) {      }    }  }  if (c == null) {    if (getParent() != null) {      c=getParent().loadClass(name);    } else {      c=getSystemClassLoader().loadClass(name);    }  }  if (resolve) {    resolveClass(c);  }  return c;}  }
class C{  public MailContent row(String firstCell,String secondCell,String thirdCell){  return tag("tr").cell(firstCell).cell(secondCell).cell(thirdCell).end();}  }
class C{  @Override public int hashCode(){  return this.name.hashCode();}  }
class C{  @SuppressWarnings("unchecked") @Override public void addBlankRecord(){  List<Object> record=new ArrayList<Object>();  record.add(i18n.get(MetaDbfTableModel.class,"New_Column","New Column"));  record.add(DBF_TYPE_CHARACTER);  record.add(new Integer(12));  record.add(new Integer(0));  addRecord(record);  if (DEBUG) {    Debug.output("Adding record: " + record);  }}  }
class C{  public void sendAttack(final OutputStream os,final long payloadSize) throws IOException {  if (payloadSize < 0 || payloadSize % 2 != 0) {    throw new IllegalArgumentException("Payload size must be an even, non-negative number");  }  os.write(0xAC);  os.write(0xED);  os.write(0);  os.write(STREAM_VERSION);  if (payloadSize <= 0xFFFF) {    os.write(TC_STRING);    os.write((int)payloadSize >>> 8);    os.write((int)payloadSize);  } else {    os.write(TC_LONGSTRING);    os.write((int)(payloadSize >>> 56));    os.write((int)(payloadSize >>> 48));    os.write((int)(payloadSize >>> 40));    os.write((int)(payloadSize >>> 32));    os.write((int)(payloadSize >>> 24));    os.write((int)(payloadSize >>> 16));    os.write((int)(payloadSize >>> 8));    os.write((int)(payloadSize >>> 0));  }  try {    for (long i=0; i < payloadSize; i++) {      os.write((byte)'B');      if (listener != null && payloadSize % callbackFrequency == 0) {        listener.onChunkWritten(i);      }    }  } catch (  IOException e) {    System.err.println("[!] Possible success. Couldn't communicate with host.");  }}  }
class C{  public static void notifyAll(Object lock){synchronized (lock) {    lock.notifyAll();  }}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/exports/{protocol},{secType},{perm},{root_mapping}") public TaskResourceRep modifyExportInternal(@PathParam("id") URI id,@PathParam("protocol") String protocol,@PathParam("secType") String securityType,@PathParam("perm") String permissions,@PathParam("root_mapping") String rootUserMapping,FileExportUpdateParam updateParam) throws InternalException {  ArgValidator.checkFieldUriType(id,FileShare.class,"id");  FileShare fs=_fileService.queryResource(id);  checkFileShareInternal(fs);  return _fileService.updateExport(id,protocol,securityType,permissions,rootUserMapping,updateParam);}  }
class C{  @RequestProcessing(value="/admin/orders",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,MallAdminCheck.class}) @After(adviceClass={CSRFToken.class,StopwatchEndAdvice.class}) public void showOrders(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("admin/orders.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  String pageNumStr=request.getParameter("p");  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {    pageNumStr="1";  }  final int pageNum=Integer.valueOf(pageNumStr);  final int pageSize=Symphonys.PAGE_SIZE;  final int windowSize=Symphonys.WINDOW_SIZE;  final JSONObject requestJSONObject=new JSONObject();  requestJSONObject.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  requestJSONObject.put(Pagination.PAGINATION_PAGE_SIZE,pageSize);  requestJSONObject.put(Pagination.PAGINATION_WINDOW_SIZE,windowSize);  final String category=request.getParameter(Common.CATEGORY);  if (!Strings.isEmptyOrNull(category)) {    requestJSONObject.put(Order.ORDER_PRODUCT_CATEGORY,category);    dataModel.put(Common.CATEGORY,category);  } else {    dataModel.put(Common.CATEGORY,"");  }  final String status=request.getParameter(Common.STATUS);  if (!Strings.isEmptyOrNull(status)) {    requestJSONObject.put(Order.ORDER_STATUS,status);    dataModel.put(Common.STATUS,status);  } else {    requestJSONObject.put(Order.ORDER_STATUS,Order.ORDER_STATUS_C_INIT);    dataModel.put(Common.STATUS,String.valueOf(Order.ORDER_STATUS_C_INIT));  }  final String from=request.getParameter(Common.FROM);  if (!Strings.isEmptyOrNull(from)) {    final Date date=DateUtils.parseDate(from,new String[]{"yyyy-MM-dd"});    requestJSONObject.put(Common.FROM,date.getTime());    dataModel.put(Common.FROM,DateFormatUtils.format(date,"yyyy-MM-dd"));  } else {    final Date date=DateUtils.addMonths(new Date(),-1);    requestJSONObject.put(Common.FROM,date.getTime());    dataModel.put(Common.FROM,DateFormatUtils.format(date,"yyyy-MM-dd"));  }  final String to=request.getParameter(Common.TO);  if (!Strings.isEmptyOrNull(to)) {    final Date date=DateUtils.parseDate(to,new String[]{"yyyy-MM-dd"});    requestJSONObject.put(Common.TO,Times.getDayEndTime(date.getTime()));    dataModel.put(Common.TO,DateFormatUtils.format(date,"yyyy-MM-dd"));  } else {    requestJSONObject.put(Common.TO,Times.getDayEndTime(System.currentTimeMillis()));    dataModel.put(Common.TO,DateFormatUtils.format(new Date(),"yyyy-MM-dd"));  }  final Map<String,Class<?>> fields=new HashMap<String,Class<?>>();  fields.put(Keys.OBJECT_ID,String.class);  fields.put(Order.ORDER_CONFIRM_TIME,Long.class);  fields.put(Order.ORDER_CREATE_TIME,Long.class);  fields.put(Order.ORDER_HANDLER_ID,String.class);  fields.put(Order.ORDER_POINT,Integer.class);  fields.put(Order.ORDER_PRICE,Double.class);  fields.put(Order.ORDER_PRODUCT_NAME,String.class);  fields.put(Order.ORDER_STATUS,Integer.class);  fields.put(Order.ORDER_BUYER_ID,String.class);  final JSONObject result=orderQueryService.getOrders(requestJSONObject,fields);  dataModel.put(Order.ORDERS,CollectionUtils.jsonArrayToList(result.optJSONArray(Order.ORDERS)));  final JSONObject pagination=result.optJSONObject(Pagination.PAGINATION);  final int pageCount=pagination.optInt(Pagination.PAGINATION_PAGE_COUNT);  final JSONArray pageNums=pagination.optJSONArray(Pagination.PAGINATION_PAGE_NUMS);  dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.opt(0));  dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.opt(pageNums.length() - 1));  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,CollectionUtils.jsonArrayToList(pageNums));  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  public void readInteger() throws IOException {  if (tag != ASN1Constants.TAG_INTEGER) {    throw expected("integer");  }  if (length < 1) {    throw new ASN1Exception("Wrong length for ASN.1 integer at [" + tagOffset + "]");  }  readContent();  if (length > 1) {    byte firstByte=buffer[offset - length];    byte secondByte=(byte)(buffer[offset - length + 1] & 0x80);    if (firstByte == 0 && secondByte == 0 || firstByte == (byte)0xFF && secondByte == (byte)0x80) {      throw new ASN1Exception("Wrong content for ASN.1 integer at [" + (offset - length) + "]. An integer MUST be encoded in minimum number of octets");    }  }}  }
class C{  @Override public boolean hasChildren(Object object){  Object parent=super.getParent(object);  return parent != null;}  }
class C{  public String replace(final CharSequence source,final int offset,final int length){  if (source == null) {    return null;  }  final StrBuilder buf=new StrBuilder(length).append(source,offset,length);  substitute(buf,0,length);  return buf.toString();}  }
class C{  public static void writeOneBlockToXml(Block toSerialize,OutputStream os) throws BlocklySerializerException {  List<Block> temp=new ArrayList<>();  temp.add(toSerialize);  writeToXml(temp,os);}  }
class C{  public CollectionObject(){  super();}  }
class C{  public boolean matchesTags(Map<String,String> tags){  if (this.tags == null) {    return true;  }  if (tags == null) {    return false;  }  for (  final Map.Entry<String,String> entry : this.tags.entrySet()) {    final String value=entry.getValue();    final String tagValue=tags.get(entry.getKey());    if (tagValue == null) {      if (value == null) {        continue;      }      return false;    }    if (!tagValue.equals(value)) {      return false;    }  }  return true;}  }
class C{  public static float determinant(double m00,double m01,double m02,double m03,double m10,double m11,double m12,double m13,double m20,double m21,double m22,double m23,double m30,double m31,double m32,double m33){  double det01=m20 * m31 - m21 * m30;  double det02=m20 * m32 - m22 * m30;  double det03=m20 * m33 - m23 * m30;  double det12=m21 * m32 - m22 * m31;  double det13=m21 * m33 - m23 * m31;  double det23=m22 * m33 - m23 * m32;  return (float)(m00 * (m11 * det23 - m12 * det13 + m13 * det12) - m01 * (m10 * det23 - m12 * det03 + m13 * det02) + m02 * (m10 * det13 - m11 * det03 + m13 * det01) - m03 * (m10 * det12 - m11 * det02 + m12 * det01));}  }
class C{  protected TemplateToken createTemplateToken(int id,ILexerTokenRegion token){  int tokenOffset=token.getOffset();  int tokenLength=token.getLength();  TemplateToken result=new TemplateToken();switch (id) {case RULE_TEMPLATE_HEAD:    result.delimiter=false;  result.offsets=new int[]{tokenOffset,tokenOffset + tokenLength - 2};result.lengths=new int[]{tokenLength - 2,2};break;case RULE_TEMPLATE_MIDDLE:if (tokenLength == 2) {result.delimiter=true;result.offsets=new int[]{tokenOffset};result.lengths=new int[]{tokenLength};} else {result.delimiter=false;result.offsets=new int[]{tokenOffset,tokenOffset + tokenLength - 2};result.lengths=new int[]{tokenLength - 2,2};}}return result;}  }
class C{  static void reset(){  isInitialized=false;}  }
class C{  public void uploadConfigDir(Path dir,String configName,Pattern filenameExclusions) throws IOException {  zkClient.uploadToZK(dir,CONFIGS_ZKNODE + "/" + configName,filenameExclusions);}  }
class C{  @SuppressWarnings("rawtypes") protected Class resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {  String cname=classDesc.getName();  return ClassFinder.resolveClass(cname,this.loader);}  }
class C{  @Override public void onCompletion(int token,int result){  getArgs().getCounter().add(result);  executeImpl();}  }
class C{  public Map<ObjectName,List<String>> findAssociatedMBeans(ObjectName mbeanName,String relationTypeName,String roleName) throws IllegalArgumentException {  if (mbeanName == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"findAssociatedMBeans",new Object[]{mbeanName,relationTypeName,roleName});  Map<String,List<String>> relId2RoleNamesMap=findReferencingRelations(mbeanName,relationTypeName,roleName);  Map<ObjectName,List<String>> result=new HashMap<ObjectName,List<String>>();  for (  String currRelId : relId2RoleNamesMap.keySet()) {    Map<ObjectName,List<String>> objName2RoleNamesMap;    try {      objName2RoleNamesMap=getReferencedMBeans(currRelId);    } catch (    RelationNotFoundException exc) {      throw new RuntimeException(exc.getMessage());    }    for (    ObjectName currObjName : objName2RoleNamesMap.keySet()) {      if (!(currObjName.equals(mbeanName))) {        List<String> currRelIdList=result.get(currObjName);        if (currRelIdList == null) {          currRelIdList=new ArrayList<String>();          currRelIdList.add(currRelId);          result.put(currObjName,currRelIdList);        } else {          currRelIdList.add(currRelId);        }      }    }  }  RELATION_LOGGER.exiting(RelationService.class.getName(),"findAssociatedMBeans");  return result;}  }
class C{  public ListIterator<AbstractInsnNode> iterator(){  return iterator(0);}  }
class C{  protected int peekCodePoint() throws IOException {  int result=readCodePoint();  unread(result);  return result;}  }
class C{  protected int hashIndex(int hashCode,int dataSize){  return hashCode & (dataSize - 1);}  }
class C{  public static <K>void verifyQueryKeyAndValues(LuceneQuery<K,Object> query,HashMap expectedResults) throws LuceneQueryException {  HashMap actualResults=new HashMap<>();  final PageableLuceneQueryResults<K,Object> results=query.findPages();  while (results.hasNext()) {    results.next().stream().forEach(null);  }  assertEquals(expectedResults,actualResults);}  }
class C{  @Override protected void paintComponent(Graphics g){  g.drawImage(image,0,0,mImageAWidth,mImageAHeight,this);  g.drawImage(imageB,mImageAWidth,0,mImageBWidth,mImageBHeight,Color.WHITE,this);  if (mSurfA != null && mSurfB != null) {    drawConnectingPoints(g);  }}  }
class C{  @Override public void displayOffer(Offer offer){  planAdapter.addOffer(offer);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:50.931 -0500",hash_original_method="11C583A748C5126F7632A70965DAF4B7",hash_generated_method="106AED6AFFFEAC4EFF5136245DD51CBA") private static void decodeIs91VoicemailStatus(BearerData bData) throws BitwiseInputStream.AccessException, CodingException {  BitwiseInputStream inStream=new BitwiseInputStream(bData.userData.payload);  int dataLen=inStream.available() / 6;  int numFields=bData.userData.numFields;  if ((dataLen > 14) || (dataLen < 3) || (dataLen < numFields)) {    throw new CodingException("IS-91 voicemail status decoding failed");  }  try {    StringBuffer strbuf=new StringBuffer(dataLen);    while (inStream.available() >= 6) {      strbuf.append(UserData.ASCII_MAP[inStream.read(6)]);    }    String data=strbuf.toString();    bData.numberOfMessages=Integer.parseInt(data.substring(0,2));    char prioCode=data.charAt(2);    if (prioCode == ' ') {      bData.priority=PRIORITY_NORMAL;    } else     if (prioCode == '!') {      bData.priority=PRIORITY_URGENT;    } else {      throw new CodingException("IS-91 voicemail status decoding failed: " + "illegal priority setting (" + prioCode + ")");    }    bData.priorityIndicatorSet=true;    bData.userData.payloadStr=data.substring(3,numFields - 3);  } catch (  java.lang.NumberFormatException ex) {    throw new CodingException("IS-91 voicemail status decoding failed: " + ex);  }catch (  java.lang.IndexOutOfBoundsException ex) {    throw new CodingException("IS-91 voicemail status decoding failed: " + ex);  }}  }
class C{  public static void triggerActivity(){  lastActivity=System.currentTimeMillis();  informListeners();}  }
class C{  public int createHeaderHash(){  StringBuilder s=new StringBuilder();  s.append(this.contentType);  s.append(";");  for (  Argument arg : arguments) {    s.append(arg.getType());    s.append(" ");    s.append(arg.getName());    s.append(";");  }  return s.toString().hashCode();}  }
class C{  public static MGRSPoint LLtoMGRS(LatLonPoint llp,Ellipsoid ellip,MGRSPoint mgrsp){  if (mgrsp == null || !(mgrsp instanceof MGRSPoint)) {    mgrsp=new MGRSPoint();  }  mgrsp=(MGRSPoint)LLtoUTM(llp,ellip,mgrsp);  mgrsp.zone_letter=mgrsp.getLetterDesignator(llp.getLatitude());  mgrsp.resolve();  return mgrsp;}  }
class C{  protected boolean afterDelete(boolean success){  setHeader();  return success;}  }
class C{  public void listSchemas() throws SQLException {  log.info(m_md.getSchemaTerm());  ResultSet rs=m_md.getSchemas();  while (rs.next()) {    dump(rs);  }}  }
class C{  public static BigInt[] readArrayOfSizeBigInts(InputStream in) throws IOException {  Vector A=new Vector();  int i=0;  try {    do {      A.addElement(readSizeBigInt(in));      i++;    } while (true);  } catch (  IOException e) {  }  BigInt[] bA=new BigInt[i];  for (int j=0; j < i; j++)   bA[j]=(BigInt)A.elementAt(j);  return bA;}  }
class C{  public void endVisit(AnnotationTypeDeclaration node){}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_1__LIST_1:    return list_1 != LIST_1_EDEFAULT;case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_1__NAME_1:  return NAME_1_EDEFAULT == null ? name_1 != null : !NAME_1_EDEFAULT.equals(name_1);case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_1__TYPE_1:return TYPE_1_EDEFAULT == null ? type_1 != null : !TYPE_1_EDEFAULT.equals(type_1);}return super.eIsSet(featureID);}  }
class C{  public static byte convertUint8toByte(char uint8){  if (uint8 > Byte.MAX_VALUE - Byte.MIN_VALUE) {    throw new RuntimeException("Out of Boundary");  }  return (byte)uint8;}  }
class C{  private static Throwable extractException(Exception ex){  if (ex instanceof UnableToTakeScreenshotException) {    return ex.getCause();  }  return ex;}  }
class C{  public boolean isInProgress(){  if (m_order == null)   return false;  return MOrder.DOCSTATUS_InProgress.equals(m_order.getDocStatus());}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildPrisonArea(zone);}  }
class C{  private static GeoPoint pickPole(final Random generator,final PlanetModel planetModel,final List<GeoPoint> points){  final int pointIndex=generator.nextInt(points.size());  final GeoPoint closePoint=points.get(pointIndex);  final double angle=generator.nextDouble() * Math.PI * 2.0 - Math.PI;  double maxArcDistance=points.get(0).arcDistance(points.get(1));  double trialArcDistance=points.get(0).arcDistance(points.get(2));  if (trialArcDistance > maxArcDistance) {    maxArcDistance=trialArcDistance;  }  final double arcDistance=maxArcDistance - generator.nextDouble() * maxArcDistance;  final double x=Math.cos(arcDistance);  final double sinArcDistance=Math.sin(arcDistance);  final double y=Math.cos(angle) * sinArcDistance;  final double z=Math.sin(angle) * sinArcDistance;  final double sinLatitude=Math.sin(closePoint.getLatitude());  final double cosLatitude=Math.cos(closePoint.getLatitude());  final double sinLongitude=Math.sin(closePoint.getLongitude());  final double cosLongitude=Math.cos(closePoint.getLongitude());  final double x1=x * cosLatitude - z * sinLatitude;  final double y1=y;  final double z1=x * sinLatitude + z * cosLatitude;  final double x2=x1 * cosLongitude - y1 * sinLongitude;  final double y2=x1 * sinLongitude + y1 * cosLongitude;  final double z2=z1;  return planetModel.createSurfacePoint(x2,y2,z2);}  }
class C{  public Location(String address,float latitude,float longitude){  setAddress(address);  setLatitude(latitude);  setLongitude(longitude);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:07.474 -0500",hash_original_method="4288B76F5BEB205918AF7DDCE9EEE5BF",hash_generated_method="1D1197DEDB5E6762F259CE237F1BB214") public Builder addVertexType(Type t) throws IllegalStateException {  if (mVertexTypeCount >= mVertexTypes.length) {    throw new IllegalStateException("Max vertex types exceeded.");  }  mVertexTypes[mVertexTypeCount]=new Entry();  mVertexTypes[mVertexTypeCount].t=t;  mVertexTypes[mVertexTypeCount].e=null;  mVertexTypeCount++;  return this;}  }
class C{  public void initNodeTest(int whatToShow,String namespace,String name){  m_whatToShow=whatToShow;  m_namespace=namespace;  m_name=name;  calcScore();}  }
class C{  public static void main(String... args) throws Exception {  File netFile=new File(args[0]);  TransportNetwork network;  if (netFile.isDirectory())   network=TransportNetwork.fromDirectory(netFile); else {    InputStream is=new BufferedInputStream(new FileInputStream(netFile));    network=TransportNetwork.read(is);    is.close();  }  Writer writer=new FileWriter(args[1]);  writer.write("iteration,origin,lat,lon,edges_relabeled,reachable_vertices_before,reachable_vertices_after\n");  LTSRelabeler relabeler=new LTSRelabeler(network);  MersenneTwister mt=new MersenneTwister();  for (int relabel=0; relabel < RELABEL_ITERATIONS; relabel++) {    long start=System.currentTimeMillis();    if (relabel % 100 == 0)     LOG.info("{} / {} relabels",relabel,RELABEL_ITERATIONS);    int[] origins=IntStream.range(0,SEARCHES_PER_ITERATION).map(null).toArray();    int[] before=new int[origins.length];    int[] after=new int[origins.length];    relabeler.restore();    IntStream.range(0,SEARCHES_PER_ITERATION).parallel().forEach(null);    int vertex;    int relabeledEdges;    do {      vertex=mt.nextInt(network.streetLayer.getVertexCount());    } while ((relabeledEdges=relabeler.relabel(vertex)) == 0);    IntStream.range(0,SEARCHES_PER_ITERATION).parallel().forEach(null);    VertexStore.Vertex v=network.streetLayer.vertexStore.getCursor(vertex);    for (int search=0; search < SEARCHES_PER_ITERATION; search++) {      writer.write(relabel + "," + origins[search]+ ","+ v.getLat()+ ","+ v.getLon()+ ","+ relabeledEdges+ ","+ before[search]+ ","+ after[search]+ "\n");    }    LOG.info("Relabel {}, {}ms",relabel,System.currentTimeMillis() - start);  }}  }
class C{  public static Object invoke(Object obj,String method,Class[] paramClasses,Object[] params) throws IllegalAccessException, NoSuchMethodException, InvocationTargetException {  Method m=obj.getClass().getMethod(method,paramClasses);  return m.invoke(obj,params);}  }
class C{  public void stopSession(){  if (sLogger.isActivated()) {    sLogger.info("Stop the session");  }  if (mProcessor != null) {    mProcessor.stopProcessing();  }}  }
class C{  public static void checkArgument(boolean expression,Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  @Override public void disable(int track){  Assertions.checkState(state == STATE_PREPARED);  Assertions.checkState(trackEnabledStates[track]);  Log.d(TAG,"disable(track=" + track + "): --> <--");  this.trackEnabledStates[track]=false;  pendingDiscontinuities[track]=false;}  }
class C{  @Override public int hashCode(){  return key().hashCode();}  }
class C{  public void print(){  DoubleLinkedNode<E> curr=top;  out.print("[");  if (curr == null) {    out.println("]");    return;  }  while (curr.next != null) {    out.print(curr.item.toString() + ",");    curr=curr.next;  }  out.println(curr.item.toString() + "]");  out.print("[");  while (curr.prev != null) {    out.print(curr.item.toString() + ",");    curr=curr.prev;  }  out.println(curr.item.toString() + "]");}  }
class C{  public void parse(URL base,Reader r,boolean parseDeclaration,boolean isLink) throws IOException {  this.base=base;  this.isLink=isLink;  this.parsingDeclaration=parseDeclaration;  declaration.removeAttributes(declaration);  selectorTokens.removeAllElements();  selectors.removeAllElements();  propertyName=null;  parser.parse(r,this,parseDeclaration);}  }
class C{  public UnsupportedTemporalTypeException(String message){  super(message);}  }
class C{  public static boolean contains(byte[] array,byte value){  return indexOf(array,value) != -1;}  }
class C{  public final void removeAllItems(){  adapter.clear();  adaptGridViewHeight();}  }
class C{  public java.rmi.MarshalledObject newInstance(java.rmi.activation.ActivationID id,java.rmi.activation.ActivationDesc desc) throws java.rmi.RemoteException, java.rmi.activation.ActivationException {  return null;}  }
class C{  public void testMultiThreadedInterval() throws Exception {  AtomicIntervalGuard<String> ati=new AtomicIntervalGuard<String>(15);  AtomicCounter counter=new AtomicCounter(0);  SampleThreadIntervalWriter[] writer=new SampleThreadIntervalWriter[15];  for (int i=0; i < writer.length; i++) {    writer[i]=new SampleThreadIntervalWriter(i,counter,ati,500000);    ati.report(i,0,0);    writer[i].start();  }  long startMillis=System.currentTimeMillis();  for (; ; ) {    long seqno=counter.incrAndGetSeqno();    if (seqno >= 500000)     break;    ati.waitMinTime(Math.max(seqno - 5000,0),seqno);    if (seqno % 50000 == 0) {      double elapsed=(System.currentTimeMillis() - startMillis) / 1000.0;      logger.info("Processed seqno=" + seqno + " elapsed="+ elapsed);    }  }  double elapsed=(System.currentTimeMillis() - startMillis) / 1000.0;  logger.info("Processed seqno=" + counter.getSeqno() + " elapsed="+ elapsed);  for (int i=0; i < writer.length; i++) {    writer[i].join(60000);    if (writer[i].throwable != null) {      throw new Exception("Writer terminated abnormally: writer=" + i + " seqno="+ writer[i].seqno,writer[i].throwable);    }    if (!writer[i].done) {      throw new Exception("Writer did not terminate: writer=" + i + " seqno="+ writer[i].seqno);    }    assertEquals("Checking writer[" + i + "] seqno",500000,writer[i].seqno);  }}  }
class C{  private boolean isAsyncProvisioning(Subscription subscription){  TechnicalProduct product=subscription.getProduct().getTechnicalProduct();  return product.getProvisioningType() == ProvisioningType.ASYNCHRONOUS;}  }
class C{  @Override public ImmutableSetMultimap<K,V> build(){  if (keyComparator != null) {    Multimap<K,V> sortedCopy=MultimapBuilder.linkedHashKeys().linkedHashSetValues().<K,V>build();    List<Map.Entry<K,Collection<V>>> entries=Ordering.from(keyComparator).<K>onKeys().immutableSortedCopy(builderMultimap.asMap().entrySet());    for (    Map.Entry<K,Collection<V>> entry : entries) {      sortedCopy.putAll(entry.getKey(),entry.getValue());    }    builderMultimap=sortedCopy;  }  return copyOf(builderMultimap,valueComparator);}  }
class C{  public static byte[] decode(String s,int options) throws java.io.IOException {  if (s == null) {    throw new NullPointerException("Input string was null.");  }  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  boolean dontGunzip=(options & DONT_GUNZIP) != 0;  if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {        e.printStackTrace();      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  public static CheckIndex.Status checkIndex(Directory dir,boolean crossCheckTermVectors,boolean failFast,ByteArrayOutputStream output) throws IOException {  if (output == null) {    output=new ByteArrayOutputStream(1024);  }  try (CheckIndex checker=new CheckIndex(dir,NoLockFactory.INSTANCE.obtainLock(dir,"bogus"))){    checker.setCrossCheckTermVectors(crossCheckTermVectors);    checker.setFailFast(failFast);    checker.setInfoStream(new PrintStream(output,false,IOUtils.UTF_8),false);    CheckIndex.Status indexStatus=checker.checkIndex(null);    if (indexStatus == null || indexStatus.clean == false) {      System.out.println("CheckIndex failed");      System.out.println(output.toString(IOUtils.UTF_8));      throw new RuntimeException("CheckIndex failed");    } else {      if (LuceneTestCase.INFOSTREAM) {        System.out.println(output.toString(IOUtils.UTF_8));      }      return indexStatus;    }  } }  }
class C{  public synchronized void clearStacks(boolean clearBackStack,boolean clearForwardStack){  if (clearBackStack && backStack != null) {    ProjHolder currentProj=pop();    backStack.clear();    push(currentProj);  }  if (clearForwardStack && forwardStack != null) {    forwardStack.clear();  }  fireStackStatus();}  }
class C{  public boolean containsAny(String string){  return containsAny(string,0);}  }
class C{  protected void readAttributes(Context context,@Nullable AttributeSet attrs){  if (attrs == null) {    return;  }  TypedArray typedArray=context.obtainStyledAttributes(attrs,R.styleable.EMVideoView);  if (typedArray == null) {    return;  }  boolean useDefaultControls=typedArray.getBoolean(R.styleable.EMVideoView_useDefaultControls,false);  if (useDefaultControls) {    setControls(deviceUtil.isDeviceTV(getContext()) ? new VideoControlsLeanback(getContext()) : new VideoControlsMobile(getContext()));  }  typedArray.recycle();}  }
class C{  public Object clone(){  GVTAttributedCharacterIterator cloneACI=new GVTACIImpl(this);  return cloneACI;}  }
class C{  public SnmpIpAddress(byte[] bytes) throws IllegalArgumentException {  buildFromByteArray(bytes);}  }
class C{  public int load32(int addr){  return (loadSigned8(addr) << 24) | (loadUnsigned8(addr + 1) << 16) | (loadUnsigned8(addr + 2) << 8)| loadUnsigned8(addr + 3);}  }
class C{  public int read(byte[] b,int off,int len) throws IOException {  int n;  if (first == null) {    n=super.read(b,off,len);  } else {    n=-1;  }  if (jv != null) {    jv.update(n,b,off,len,mev);  }  return n;}  }
class C{  public static void addChemicalCrystallizerRecipe(GasStack input,ItemStack output){  addRecipe(Recipe.CHEMICAL_CRYSTALLIZER,new CrystallizerRecipe(input,output));}  }
class C{  public void addFlyOverPath(Entity e){  if (e.getPosition() == null) {    return;  }  flyOverSprites.add(new FlyOverSprite(this,e));}  }
class C{  public void forNumVMsInvoke(int numVMs,String methodName,Object[] args){  Host host=Host.getHost(0);  for (int i=0; i < numVMs; i++) {    logInfo("Invoking " + methodName + "on VM#"+ i);    host.getVM(i).invoke(this.getClass(),methodName,args);  }}  }
class C{  public void decrementInUseCount(){  Preconditions.checkState(mInUseLength > 0);  mInUseLength--;}  }
class C{  private void loadPage(URL url){  try {    super.setPage(url);  } catch (  Exception e) {    displayError("Error: URL not found",url,e);  }}  }
class C{  public XNull(){  super();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case RegularExpressionPackage.CHARACTER_CLASS_ESCAPE_SEQUENCE__CHARACTER:    return CHARACTER_EDEFAULT == null ? character != null : !CHARACTER_EDEFAULT.equals(character);case RegularExpressionPackage.CHARACTER_CLASS_ESCAPE_SEQUENCE__SEQUENCE:  return SEQUENCE_EDEFAULT == null ? sequence != null : !SEQUENCE_EDEFAULT.equals(sequence);}return super.eIsSet(featureID);}  }
class C{  public NetMember newNetMember(InetAddress i,int p,boolean splitBrainEnabled,boolean canBeCoordinator,MemberAttributes attr,short version){  GMSMember result=new GMSMember(attr,i,p,splitBrainEnabled,canBeCoordinator,version,0,0);  return result;}  }
class C{  @Provides public ServiceFactory serviceFactory() throws IOException {  ipServiceCallMock=mock(Call.class);  IpService ipServiceMock=mock(IpService.class);  when(ipServiceMock.getIp(anyString())).thenReturn(ipServiceCallMock);  ServiceFactory serviceFactoryMock=mock(ServiceFactory.class);  when(serviceFactoryMock.createService(IpService.class)).thenReturn(ipServiceMock);  return serviceFactoryMock;}  }
class C{  @Field(38) public __VARIANT_NAME_3_union pdecVal(Pointer<DECIMAL> pdecVal){  this.io.setPointerField(this,38,pdecVal);  return this;}  }
class C{  TermScorer(Weight weight,PostingsEnum td,Similarity.SimScorer docScorer){  super(weight);  this.docScorer=docScorer;  this.postingsEnum=td;}  }
class C{  public NotificationChain basicSetExpr(Expression newExpr,NotificationChain msgs){  Expression oldExpr=expr;  expr=newExpr;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.STATEMENT__EXPR,oldExpr,newExpr);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override protected AdminResponse createResponse(DistributionManager dm){  return FetchDistLockInfoResponse.create(dm,this.getSender());}  }
class C{  private int nextIterationMarkSpanSize() throws IOException {  int spanSize=0;  for (int i=bufferPosition; buffer.get(i) != -1 && isIterationMark((char)(buffer.get(i))); i++) {    spanSize++;  }  if (bufferPosition - spanSize < iterationMarkSpanEndPosition) {    spanSize=bufferPosition - iterationMarkSpanEndPosition;  }  return spanSize;}  }
class C{  public TableChangeImplBase(Table table){  this.table=table;}  }
class C{  public BakedModelTRSR(IBakedModel original,EnumFacing facing){  this.original=original;  this.override=new TRSROverride(this);  this.faceOffset=4 + EnumFacing.NORTH.getHorizontalIndex() - facing.getHorizontalIndex();  double r=Math.PI * (360 - facing.getOpposite().getHorizontalIndex() * 90) / 180d;  TRSRTransformation t=new TRSRTransformation(null,null,null,TRSRTransformation.quatFromXYZ(0,(float)r,0));  this.transformation=TRSRTransformation.blockCenterToCorner(t);}  }
class C{  @Override public String browse(String textToShow) throws CancelException {  return browse(textToShow,playOnLinuxContext.getUserHome(),null);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == TypableElement.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == IdentifiableElement.class) {switch (baseFeatureID) {case TypesPackage.IDENTIFIABLE_ELEMENT__NAME:    return N4JSPackage.VARIABLE__NAME;default :  return -1;}}if (baseClass == NamedElement.class) {switch (baseFeatureID) {default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  void deletePressed(ActionEvent e){  InstanceManager.getDefault(jmri.SignalGroupManager.class).deleteSignalGroup(curSignalGroup);  curSignalGroup=null;  finishUpdate();}  }
class C{  public JParamsStock(){  initComponents();  m_StockLevelModel=new ComboBoxValModel();  m_StockLevelModel.add(null);  m_StockLevelModel.add(QBFCompareEnum.COMP_EQUALS);  m_StockLevelModel.add(QBFCompareEnum.COMP_GREATER);  m_StockLevelModel.add(QBFCompareEnum.COMP_LESS);  m_jstock.setModel(m_StockLevelModel);}  }
class C{  public void updateNameColumnWidth(Dimension nameDim){  if (labelAttName != null) {    if (nameDim == null) {      labelAttName.setMinimumSize(DIMENSION_LABEL_ATTRIBUTE);      labelAttName.setPreferredSize(DIMENSION_LABEL_ATTRIBUTE);    } else {      Dimension newDim=new Dimension(nameDim.width + 30,nameDim.height);      labelAttName.setMinimumSize(newDim);      labelAttName.setPreferredSize(newDim);    }    panelAttName.revalidate();    panelAttName.repaint();  }}  }
class C{  protected void sequence_DefaultClause(ISerializationContext context,DefaultClause semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void testRemainingOptions(){  if (!m_OptionTester.checkRemainingOptions()) {    fail("There were 'left-over' options.");  }}  }
class C{  public UnsatisfiedRWAccessDescription(IEObjectDescription delegate,boolean isReadMissing){  super(delegate);  this.isReadMissing=isReadMissing;}  }
class C{  public PLCamera(){  super();}  }
class C{  public void error(String msg){  output(getText(msg));}  }
class C{  public void testConstructorSignBytesZeroNull1(){  byte aBytes[]={};  int aSign=-1;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,aNumber.signum());}  }
class C{  public static int cs_reach(Scs G,Scs B,int k,int[] xi,int[] pinv){  int p, n, top, Bp[], Bi[], Gp[];  if (!Scs_util.CS_CSC(G) || !Scs_util.CS_CSC(B) || xi == null)   return (-1);  n=G.n;  Bp=B.p;  Bi=B.i;  Gp=G.p;  top=n;  for (p=Bp[k]; p < Bp[k + 1]; p++) {    if (!Scs_util.CS_MARKES(Gp,Bi[p])) {      top=Scs_dfs.cs_dfs(Bi[p],G,top,xi,0,xi,n,pinv,0);    }  }  for (p=top; p < n; p++)   Scs_util.CS_MARK(Gp,xi[p]);  return (top);}  }
class C{  public Vset checkValue(Environment env,Context ctx,Vset vset,Hashtable exp){  vset=right.checkValue(env,ctx,vset,exp);  int tm=right.type.getTypeMask();  selectType(env,ctx,tm);  if (((tm & TM_ERROR) == 0) && type.isType(TC_ERROR)) {    env.error(where,"invalid.arg",opNames[op]);  }  return vset;}  }
class C{  public static float[] quaternionMatrixOpenGL(float[] quaternion){  float[] matrix=new float[16];  normalizeVector(quaternion);  float x=quaternion[0];  float y=quaternion[1];  float z=quaternion[2];  float w=quaternion[3];  float x2=x * x;  float y2=y * y;  float z2=z * z;  float xy=x * y;  float xz=x * z;  float yz=y * z;  float wx=w * x;  float wy=w * y;  float wz=w * z;  matrix[0]=1f - 2f * (y2 + z2);  matrix[4]=2f * (xy - wz);  matrix[8]=2f * (xz + wy);  matrix[12]=0f;  matrix[1]=2f * (xy + wz);  matrix[5]=1f - 2f * (x2 + z2);  matrix[9]=2f * (yz - wx);  matrix[13]=0f;  matrix[2]=2f * (xz - wy);  matrix[6]=2f * (yz + wx);  matrix[10]=1f - 2f * (x2 + y2);  matrix[14]=0f;  matrix[3]=0f;  matrix[7]=0f;  matrix[11]=0f;  matrix[15]=1f;  return matrix;}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    byte numNeighbouringStreamCells=0;    double currentID=0;    double currentValue=0;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            currentID++;            output.setValue(y,x,currentID);            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  currentValue=output.getValue(y,x);                  if (currentValue > 0) {                    flag=false;                    break;                  }                  numNeighbouringStreamCells=0;                  int x2, y2;                  for (int d=0; d < 8; d++) {                    x2=x + dX[d];                    y2=y + dY[d];                    if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[d]) {                      numNeighbouringStreamCells++;                    }                  }                  if (numNeighbouringStreamCells >= 2) {                    currentID++;                  }                  output.setValue(y,x,currentID);                }              } else {                if (streams.getValue(y,x) > 0) {                  output.setValue(y,x,currentID);                }                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public MidiWorld(){  super();  add("Center",new JLabel("MIDI World"));}  }
class C{  public void findAndInit(Object someObj){  if (someObj instanceof LayerHandler) {    setLayerHandler((LayerHandler)someObj);  }  if (someObj instanceof MapBean) {    setMapBean((MapBean)someObj);  }}  }
class C{  public static boolean validateOutputDirectory(final CFlags flags){  final File outputDir=(File)flags.getValue(OUTPUT_FLAG);  return validateOutputDirectory(outputDir);}  }
class C{  protected void onDismiss(int[] reverseSortedPositions){  if (swipeListViewListener != null) {    swipeListViewListener.onDismiss(reverseSortedPositions);  }}  }
class C{  public static RawHeaders fromMultimap(Map<String,List<String>> map,boolean response) throws IOException {  if (!response)   throw new UnsupportedOperationException();  RawHeaders result=new RawHeaders();  for (  Entry<String,List<String>> entry : map.entrySet()) {    String fieldName=entry.getKey();    List<String> values=entry.getValue();    if (fieldName != null) {      for (      String value : values) {        result.addLenient(fieldName,value);      }    } else     if (!values.isEmpty()) {      result.setStatusLine(values.get(values.size() - 1));    }  }  return result;}  }
class C{  private void prepareDirectories(FileSystem fs) throws IOException {  X.println(">>> Cleaning up DFS result directory: " + RESULT_DFS_DIR);  fs.delete(RESULT_DFS_DIR,true);  X.println(">>> Cleaning up DFS input directory: " + BOOKS_DFS_DIR);  fs.delete(BOOKS_DFS_DIR,true);  X.println(">>> Copy local files into DFS input directory: " + BOOKS_DFS_DIR);  fs.copyFromLocalFile(BOOKS_LOCAL_DIR,BOOKS_DFS_DIR);}  }
class C{  public CategoricalColumn range(List<String> range){  setRange(range);  return this;}  }
class C{  public PlatformDotNetSessionData updateAndUnlock(UUID lockNodeId,long lockId,Map<String,byte[]> items,boolean isDiff,byte[] staticObjects,int timeout){  assert items != null;  PlatformDotNetSessionData res=unlock(lockNodeId,lockId);  if (!isDiff) {    this.items.clear();  }  for (  Map.Entry<String,byte[]> e : items.entrySet()) {    String key=e.getKey();    byte[] value=e.getValue();    if (value != null)     this.items.put(key,value); else     this.items.remove(key);  }  res.staticObjects=staticObjects;  res.timeout=timeout;  return res;}  }
class C{  public void cacheClass(String name,ClassNode res){  cachedClasses.put(name,res);}  }
class C{  public void TOMulticast(TOMMessage sm){  cs.send(useSignatures,this.viewController.getCurrentViewProcesses(),sm);}  }
class C{  @POST @Path("/property/payPropertyTax") @Consumes(MediaType.APPLICATION_FORM_URLENCODED) @Produces(MediaType.APPLICATION_JSON) public String payPropertyTax(@FormParam("assessmentNo") String assessmentNo,@FormParam("paymentMode") String paymentMode,@FormParam("totalAmount") BigDecimal totalAmount,@FormParam("paidBy") String paidBy,@FormParam("username") String username,@FormParam("password") String password) throws JsonGenerationException, JsonMappingException, IOException {  String responseJson=new String();  Boolean isAuthenticatedUser=propertyExternalService.authenticateUser(username,password);  if (isAuthenticatedUser) {    ErrorDetails errorDetails=propertyExternalService.validatePaymentDetails(assessmentNo,paymentMode,totalAmount,paidBy);    if (null != errorDetails) {      responseJson=getJSONResponse(errorDetails);    } else {      PayPropertyTaxDetails pt=new PayPropertyTaxDetails();      pt.setAssessmentNo(assessmentNo);      pt.setPaymentMode(paymentMode);      pt.setPaymentAmount(totalAmount);      pt.setPaidBy(paidBy);      ReceiptDetails receiptDetails=propertyExternalService.payPropertyTax(pt,"");      responseJson=getJSONResponse(receiptDetails);    }  }  return responseJson;}  }
class C{  public void reset(){  msgSize=0;  cnt=-4;  data=null;}  }
class C{  public ServerContext completeSignIn(final ServerContext context){  if (context.getType() == ServerContext.Type.TFS) {    return ServerContextManager.getInstance().validateServerConnection(context);  } else {    ServerContextManager.getInstance().add(context);    return context;  }}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.activity_create_widget_clock_day_doneButton:    SharedPreferences.Editor editor=getSharedPreferences(getString(R.string.sp_widget_clock_day_setting),MODE_PRIVATE).edit();  editor.putString(getString(R.string.key_location),location.location);editor.putBoolean(getString(R.string.key_show_card),showCardSwitch.isChecked());editor.putBoolean(getString(R.string.key_black_text),blackTextSwitch.isChecked());editor.apply();Intent intent=getIntent();Bundle extras=intent.getExtras();int appWidgetId=0;if (extras != null) {appWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);}Intent resultValue=new Intent();resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,appWidgetId);setResult(RESULT_OK,resultValue);Intent service=new Intent(this,WidgetClockDayService.class);startService(service);finish();break;}}  }
class C{  private void validateSRDFStopOperation(URI id,CopiesParam param){  List<URI> srdfVolumeURIList=new ArrayList<URI>();  Volume srdfSourceVolume=_dbClient.queryObject(Volume.class,id);  if (srdfSourceVolume.checkForSRDF() && srdfSourceVolume.hasConsistencyGroup()) {    srdfVolumeURIList.add(id);    for (    Copy copy : param.getCopies()) {      URI copyID=copy.getCopyID();      if (URIUtil.isType(copyID,Volume.class) && URIUtil.isValid(copyID)) {        srdfVolumeURIList.add(copyID);        break;      }    }    for (    URI srdfVolURI : srdfVolumeURIList) {      Volume volume=_dbClient.queryObject(Volume.class,srdfVolURI);      URIQueryResultList list=new URIQueryResultList();      Constraint constraint=ContainmentConstraint.Factory.getVolumeSnapshotConstraint(srdfVolURI);      _dbClient.queryByConstraint(constraint,list);      Iterator<URI> it=list.iterator();      while (it.hasNext()) {        URI snapshotID=it.next();        BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,snapshotID);        if (snapshot != null && !snapshot.getInactive()) {          throw APIException.badRequests.cannotStopSRDFBlockSnapShotExists(volume.getLabel());        }      }      List<BlockSnapshotSession> snapSessions=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,BlockSnapshotSession.class,ContainmentConstraint.Factory.getParentSnapshotSessionConstraint(srdfVolURI));      if (!snapSessions.isEmpty()) {        throw APIException.badRequests.cannotStopSRDFBlockSnapShotExists(volume.getLabel());      }      if (!getFullCopyManager().volumeCanBeDeleted(volume)) {        throw APIException.badRequests.cantStopSRDFFullCopyNotDetached(volume.getLabel());      }    }  }}  }
class C{  public void helpTestStartAndEndIterator(Region region,Object startValue,boolean startInclusive,Object endValue,boolean endInclusive,int expectedSize) throws IMQException {  addValues(region,numValues);  CloseableIterator<IndexStoreEntry> iterator=indexDataStructure.iterator(startValue,startInclusive,endValue,endInclusive,null);  validateIteratorSize(iterator,expectedSize);}  }
class C{  public SolrQuery removeSort(SortClause sortClause){  return removeSort(sortClause.getItem());}  }
class C{  protected void fireStructureChanged(){  fireTreeStructureChanged(new TreePath(getRoot()));}  }
class C{  private void createButtons(){  closeButton=createTitleButton();  closeButton.setAction(closeAction);  closeButton.setText(null);  closeButton.putClientProperty("paintActive",Boolean.TRUE);  closeButton.setBorder(handyEmptyBorder);  closeButton.putClientProperty(AccessibleContext.ACCESSIBLE_NAME_PROPERTY,"Close");  closeButton.setIcon(UIManager.getIcon("InternalFrame.closeIcon"));  if (getWindowDecorationStyle() == JRootPane.FRAME) {    maximizeIcon=UIManager.getIcon("InternalFrame.maximizeIcon");    minimizeIcon=UIManager.getIcon("InternalFrame.minimizeIcon");    iconifyButton=createTitleButton();    iconifyButton.setAction(iconifyAction);    iconifyButton.setText(null);    iconifyButton.putClientProperty("paintActive",Boolean.TRUE);    iconifyButton.setBorder(handyEmptyBorder);    iconifyButton.putClientProperty(AccessibleContext.ACCESSIBLE_NAME_PROPERTY,"Iconify");    iconifyButton.setIcon(UIManager.getIcon("InternalFrame.iconifyIcon"));    toggleButton=createTitleButton();    toggleButton.setAction(restoreAction);    toggleButton.putClientProperty("paintActive",Boolean.TRUE);    toggleButton.setBorder(handyEmptyBorder);    toggleButton.putClientProperty(AccessibleContext.ACCESSIBLE_NAME_PROPERTY,"Maximize");    toggleButton.setIcon(maximizeIcon);  }}  }
class C{  public void reduce(Text key,Iterator<ObjectWritable> values,OutputCollector<Text,Node> output,Reporter reporter) throws IOException {  String url=key.toString();  Set<String> domains=new HashSet<String>();  Set<String> pages=new HashSet<String>();  Node node=null;  int numInlinks=0;  float totalInlinkScore=rankOne;  while (values.hasNext()) {    ObjectWritable next=values.next();    Object value=next.get();    if (value instanceof Node) {      node=(Node)value;    } else     if (value instanceof LinkDatum) {      LinkDatum linkDatum=(LinkDatum)value;      float scoreFromInlink=linkDatum.getScore();      String inlinkUrl=linkDatum.getUrl();      String inLinkDomain=URLUtil.getDomainName(inlinkUrl);      String inLinkPage=URLUtil.getPage(inlinkUrl);      if ((limitPages && pages.contains(inLinkPage)) || (limitDomains && domains.contains(inLinkDomain))) {        LOG.debug(url + ": ignoring " + scoreFromInlink+ " from "+ inlinkUrl+ ", duplicate page or domain");        continue;      }      numInlinks++;      totalInlinkScore+=scoreFromInlink;      domains.add(inLinkDomain);      pages.add(inLinkPage);      LOG.debug(url + ": adding " + scoreFromInlink+ " from "+ inlinkUrl+ ", total: "+ totalInlinkScore);    }  }  float linkRankScore=(1 - this.dampingFactor) + (this.dampingFactor * totalInlinkScore);  LOG.debug(url + ": score: " + linkRankScore+ " num inlinks: "+ numInlinks+ " iteration: "+ itNum);  Node outNode=(Node)WritableUtils.clone(node,conf);  outNode.setInlinkScore(linkRankScore);  output.collect(key,outNode);}  }
class C{  public void visitTableSwitchInsn(int min,int max,Label dflt,Label... labels){  if (mv != null) {    mv.visitTableSwitchInsn(min,max,dflt,labels);  }}  }
class C{  public static byte[] toBytes(int x){  return toBytes(x,new byte[4],0);}  }
class C{  public void pushSubQueryInfo(int[] masks,TableFilter[] filters,int filter,SortOrder sortOrder){  subQueryInfo=new SubQueryInfo(subQueryInfo,masks,filters,filter,sortOrder);}  }
class C{  public static Pair<List<SecurityGroup>,List<String>> mergeSelfSecurityGroups(List<SecurityGroup> existingSecurityGroups,List<String> selfSecurityGroups){  checkNotNull(existingSecurityGroups,"Provided value for existingSecurityGroups is unacceptably null");  checkNotNull(selfSecurityGroups,"Provided value for selfSecurityGroups is unacceptably null");  List<SecurityGroup> mergedSecurityGroups=new ArrayList<>();  List<String> securityGroupsNotMerged=new ArrayList<>();  Set<String> inheritedSecurityGroupNames=new HashSet<>();  existingSecurityGroups.stream().filter(null).forEach(null);  selfSecurityGroups.forEach(null);  return Pair.of(mergedSecurityGroups,securityGroupsNotMerged);}  }
class C{  public Coverage(Coverage other){  this.firstZero=other.firstZero;  this.bits=(BitSet)other.bits.clone();}  }
class C{  private static void reverseRange(Object[] a,int lo,int hi){  hi--;  while (lo < hi) {    Object t=a[lo];    a[lo++]=a[hi];    a[hi--]=t;  }}  }
class C{  public SimpleHistogramBin(double lowerBound,double upperBound,boolean includeLowerBound,boolean includeUpperBound){  if (lowerBound >= upperBound) {    throw new IllegalArgumentException("Invalid bounds");  }  this.lowerBound=lowerBound;  this.upperBound=upperBound;  this.includeLowerBound=includeLowerBound;  this.includeUpperBound=includeUpperBound;  this.itemCount=0;}  }
class C{  private void locateUriRoot(File f){  String tUriBase=uriBase;  if (tUriBase == null) {    tUriBase="/";  }  try {    if (f.exists()) {      f=new File(f.getCanonicalPath());      while (f != null) {        File g=new File(f,"WEB-INF");        if (g.exists() && g.isDirectory()) {          uriRoot=f.getCanonicalPath();          uriBase=tUriBase;          if (log.isLoggable(Level.INFO)) {            log.info(Localizer.getMessage("jspc.implicit.uriRoot",uriRoot));          }          break;        }        if (f.exists() && f.isDirectory()) {          tUriBase="/" + f.getName() + "/"+ tUriBase;        }        String fParent=f.getParent();        if (fParent == null) {          break;        } else {          f=new File(fParent);        }      }      if (uriRoot != null) {        File froot=new File(uriRoot);        uriRoot=froot.getCanonicalPath();      }    }  } catch (  IOException ioe) {  }}  }
class C{  public static Double makeDouble(String s){  if (WWUtil.isEmpty(s)) {    return null;  }  try {    return Double.valueOf(s);  } catch (  NumberFormatException e) {    return null;  }}  }
class C{  private static void print(int width,boolean alignRight,PrintStream out,Object obj){  String s=String.valueOf(obj);  int padLen=width - s.length();  if (alignRight) {    pad(padLen,out);  }  out.print(s);  if (!alignRight) {    pad(padLen,out);  }}  }
class C{  public void debit(Double debitAmount){  if (Double.compare(debitAmount,0.0d) > 0 && this.balance - debitAmount > -1) {    apply(new AccountDebitedEvent(this.accountNo,debitAmount,this.balance));  } else {    throw new IllegalArgumentException("Cannot debit with the amount");  }}  }
class C{  public void ifICmp(final int mode,final Label label){  ifCmp(Type.INT_TYPE,mode,label);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  public boolean sort(E[] ar,int left,int right,Comparator<E> comparator){  if (right <= left) {    return false;  }  ExternalBinaryHeap<E> heap=new ExternalBinaryHeap<E>(right - left + 1,comparator);  Object[] sorted=new Object[right - left + 1];  int i=left;  while (i <= right) {    heap.insert(ar[i]);    i++;  }  i=left;  while (!heap.isEmpty()) {    sorted[i++]=heap.smallest();  }  System.arraycopy(sorted,0,ar,left,sorted.length);  return true;}  }
class C{  public ListEditor(JSpinner spinner){  super(spinner);  if (!(spinner.getModel() instanceof SpinnerListModel)) {    throw new IllegalArgumentException("model not a SpinnerListModel");  }  getTextField().setEditable(true);  getTextField().setFormatterFactory(new DefaultFormatterFactory(new ListFormatter()));}  }
class C{  public void applyMirroredCorrection(ResultPoint[] points){  if (!mirrored || points == null || points.length < 3) {    return;  }  ResultPoint bottomLeft=points[0];  points[0]=points[2];  points[2]=bottomLeft;}  }
class C{  public void addTableModelListener(TableModelListener l){  if (!listeners.contains(l))   listeners.add(l);}  }
class C{  public boolean remove(Predicate p){  if (m_clauses.remove(p)) {    fireExpressionChange();    return true;  } else {    return false;  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String streamsHeader="";  String outputHeader=null;  int row, col, x, y;  int progress=0;  double myPointer, neighbourPointer;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  double[] outflowingVals=new double[]{1,2,4,8,16,32,64,128};  boolean streamsSpecified=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  if (!args[1].toLowerCase().equals("not specified")) {    streamsHeader=args[1];    streamsSpecified=true;  }  outputHeader=args[2];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,noData);    output.setDataScale(WhiteboxRaster.DataScale.BOOLEAN);    output.setPreferredPalette("spectrum_black_background.pal");    boolean isParallel;    if (!streamsSpecified) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          myPointer=pntr.getValue(row,col);          if (myPointer != noData) {            isParallel=false;            for (i=0; i < 8; i++) {              if (myPointer != outflowingVals[i]) {                neighbourPointer=pntr.getValue(row + dY[i],col + dX[i]);                if (neighbourPointer == myPointer && neighbourPointer != inflowingVals[i]) {                  isParallel=true;                  break;                }              }            }            if (isParallel) {              output.setValue(row,col,1);            } else {              output.setValue(row,col,0);            }          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else {      WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");      if (streams.getNumberRows() != rows || streams.getNumberColumns() != cols) {        showFeedback("The flow pointer and streams file must have the same number " + "\nof rows and columns.");        return;      }      double streamsNoData=streams.getNoDataValue();      double streamVal, neighbourStreamVal;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          myPointer=pntr.getValue(row,col);          streamVal=streams.getValue(row,col);          if (myPointer != noData && streamVal != streamsNoData && streamVal > 0) {            isParallel=false;            for (i=0; i < 8; i++) {              if (myPointer != outflowingVals[i]) {                neighbourPointer=pntr.getValue(row + dY[i],col + dX[i]);                neighbourStreamVal=streams.getValue(row + dY[i],col + dX[i]);                if (neighbourPointer == myPointer && neighbourPointer != inflowingVals[i] && neighbourStreamVal > 0) {                  isParallel=true;                  break;                }              }            }            if (isParallel) {              output.setValue(row,col,1);            } else {              output.setValue(row,col,0);            }          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      streams.close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public X509Certificate generateX509Certificate(PrivateKey key,SecureRandom random) throws SecurityException, SignatureException, InvalidKeyException {  try {    return generateX509Certificate(key,"BC",random);  } catch (  NoSuchProviderException e) {    throw new SecurityException("BC provider not installed!");  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:05.762 -0500",hash_original_method="8AAF3F50F887FE806E4860779AA74DE9",hash_generated_method="05D1D900B439E490D08316FB8261B25F") public static Bitmap decodeByteArray(byte[] data,int offset,int length,Options opts){  if ((offset | length) < 0 || data.length < offset + length) {    throw new ArrayIndexOutOfBoundsException();  }  Bitmap bm=nativeDecodeByteArray(data,offset,length,opts);  if (bm == null && opts != null && opts.inBitmap != null) {    throw new IllegalArgumentException("Problem decoding into existing bitmap");  }  return bm;}  }
class C{  public static View button(int position,Context context,String text,int desiredHeight){  TextView result=new Button(context);  result.setHeight(desiredHeight);  result.setText(text);  final ViewGroup.LayoutParams lp=new AbsListView.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);  result.setLayoutParams(lp);  result.setId(position);  result.setTag("button");  return result;}  }
class C{  public Long call() throws Exception {  final long begin=System.currentTimeMillis();  nwritten.addAndGet(dst.getSPORelation().addJustifications(src));  final long elapsed=System.currentTimeMillis() - begin;  return elapsed;}  }
class C{  public boolean isMultiVersion(){  return multiVersion;}  }
class C{  public static BufferedWriter newWriter(File file,Charset charset) throws FileNotFoundException {  checkNotNull(file);  checkNotNull(charset);  return new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file),charset));}  }
class C{  public static boolean isPaymentType(GenericValue payment,String inputTypeId) throws GenericEntityException {  if (payment == null) {    return false;  }  GenericValue paymentType=payment.getRelatedOne("PaymentType",true);  if (paymentType == null) {    throw new GenericEntityException("Cannot find PaymentType for paymentId " + payment.getString("paymentId"));  }  String paymentTypeId=paymentType.getString("paymentTypeId");  if (inputTypeId.equals(paymentTypeId)) {    return true;  }  return isPaymentTypeRecurse(paymentType,inputTypeId);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public CertificatePolicies(){}  }
class C{  private static void notifyListeners(List<ExecutorTerminatedListener> listeners){  for (  ExecutorTerminatedListener listener : listeners) {    listener.terminated();  }}  }
class C{  public void start(int restartableId){  stop(restartableId);  requested.add(restartableId);  restartableSubscriptions.put(restartableId,restartables.get(restartableId).call());}  }
class C{  public SamFilterParams filterParams(){  return mFilterParams;}  }
class C{  private String buildCookieHeader(List<String> cookies){  if (cookies.size() == 1)   return cookies.get(0);  StringBuilder sb=new StringBuilder();  for (int i=0; i < cookies.size(); i++) {    if (i > 0)     sb.append("; ");    sb.append(cookies.get(i));  }  return sb.toString();}  }
class C{  private Module createSupplierModule(Classifier<?> supplier,Class factory,Class implementer){  Module supplierModule=new Module("SupplierModule");  supplierModule.addClassifier(supplier);  if (implementer != null)   supplierModule.addClassifier(implementer);  if (factory != null)   supplierModule.addClassifier(factory);  return supplierModule;}  }
class C{  protected void addWidget(Widget widget){  if (widget != null) {    widgets.put(widget.getId(),widget);    if (!widgetTypes.contains(widget.getType())) {      widgetTypes.add(widget.getType());    }  }}  }
class C{  public static boolean isDedicatedLocator(){  InternalLocator internalLocator=getLocator();  if (internalLocator == null) {    return false;  }  InternalDistributedSystem ids=(InternalDistributedSystem)internalLocator.myDs;  if (ids == null) {    return false;  }  DM dm=ids.getDistributionManager();  if (dm.isLoner()) {    return false;  }  DistributionManager distMgr=(DistributionManager)ids.getDistributionManager();  return distMgr.getDMType() == DistributionManager.LOCATOR_DM_TYPE;}  }
class C{  public void pop2(){  mv.visitInsn(Opcodes.POP2);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  if (isValid(attributes)) {    final int x=MathHelper.parseInt(attributes.get("x"));    final int y=MathHelper.parseInt(attributes.get("y"));    buildStoredChest(zone,x,y);  }}  }
class C{  public AttributeSet copyAttributes(){  NamedStyle a=new NamedStyle();  a.attributes=attributes.copyAttributes();  return a;}  }
class C{  public GenericEntry updateVerifiedStatus(GenericEntry entry,boolean status) throws AppsForYourDomainException, IOException, ServiceException {  entry.removeProperty("verified");  entry.addProperty("verified",String.valueOf(status));  return entry.update();}  }
class C{  public CouldntSaveDataException(final Exception exception){  super(exception);}  }
class C{  public Builder withButtonColor(final int color){  this.color=color;  return this;}  }
class C{  public long logSize(){  return logBytes;}  }
class C{  public Yytoken yylex() throws java.io.IOException, ParseException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    yychar+=zzMarkedPosL - zzStartRead;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 11:{        sb.append(yytext());      }case 25:    break;case 4:{    sb.delete(0,sb.length());    yybegin(STRING_BEGIN);  }case 26:break;case 16:{sb.append('\b');}case 27:break;case 6:{return new Yytoken(Yytoken.TYPE_RIGHT_BRACE,null);}case 28:break;case 23:{Boolean val=Boolean.valueOf(yytext());return new Yytoken(Yytoken.TYPE_VALUE,val);}case 29:break;case 22:{return new Yytoken(Yytoken.TYPE_VALUE,null);}case 30:break;case 13:{yybegin(YYINITIAL);return new Yytoken(Yytoken.TYPE_VALUE,sb.toString());}case 31:break;case 12:{sb.append('\\');}case 32:break;case 21:{Double val=Double.valueOf(yytext());return new Yytoken(Yytoken.TYPE_VALUE,val);}case 33:break;case 1:{throw new ParseException(yychar,ParseException.ERROR_UNEXPECTED_CHAR,new Character(yycharat(0)));}case 34:break;case 8:{return new Yytoken(Yytoken.TYPE_RIGHT_SQUARE,null);}case 35:break;case 19:{sb.append('\r');}case 36:break;case 15:{sb.append('/');}case 37:break;case 10:{return new Yytoken(Yytoken.TYPE_COLON,null);}case 38:break;case 14:{sb.append('"');}case 39:break;case 5:{return new Yytoken(Yytoken.TYPE_LEFT_BRACE,null);}case 40:break;case 17:{sb.append('\f');}case 41:break;case 24:{try {int ch=Integer.parseInt(yytext().substring(2),16);sb.append((char)ch);} catch (Exception e) {throw new ParseException(yychar,ParseException.ERROR_UNEXPECTED_EXCEPTION,e);}}case 42:break;case 20:{sb.append('\t');}case 43:break;case 7:{return new Yytoken(Yytoken.TYPE_LEFT_SQUARE,null);}case 44:break;case 2:{Long val=Long.valueOf(yytext());return new Yytoken(Yytoken.TYPE_VALUE,val);}case 45:break;case 18:{sb.append('\n');}case 46:break;case 9:{return new Yytoken(Yytoken.TYPE_COMMA,null);}case 47:break;case 3:{}case 48:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  @Override protected Journal reopenStore(final Journal store){  store.close();  if (!store.isStable()) {    throw new UnsupportedOperationException("The backing store is not stable");  }  final Properties properties=(Properties)getProperties().clone();  properties.setProperty(Options.CREATE_TEMP_FILE,"false");  final File file=store.getFile();  assertNotNull(file);  properties.setProperty(Options.FILE,file.toString());  return new Journal(properties);}  }
class C{  public static String readLine(){  String line;  try {    line=scanner.nextLine();  } catch (  NoSuchElementException e) {    line=null;  }  return line;}  }
class C{  private void update(){  Layout<String,Integer> layout=getGraphLayout(currentState,tab.showParameters());  setGraphLayout(layout);  updateDistribs();}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer analyzer=new NorwegianAnalyzer();  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);  analyzer.close();}  }
class C{  public void transformSelectedNodes(TransformerImpl transformer) throws TransformerException {  final XPathContext xctxt=transformer.getXPathContext();  final int sourceNode=xctxt.getCurrentNode();  DTMIterator sourceNodes=m_selectExpression.asIterator(xctxt,sourceNode);  try {    final Vector keys=(m_sortElems == null) ? null : transformer.processSortKeys(this,sourceNode);    if (null != keys)     sourceNodes=sortNodes(xctxt,keys,sourceNodes);    xctxt.pushCurrentNode(DTM.NULL);    IntStack currentNodes=xctxt.getCurrentNodeStack();    xctxt.pushCurrentExpressionNode(DTM.NULL);    IntStack currentExpressionNodes=xctxt.getCurrentExpressionNodeStack();    xctxt.pushSAXLocatorNull();    xctxt.pushContextNodeList(sourceNodes);    transformer.pushElemTemplateElement(null);    DTM dtm=xctxt.getDTM(sourceNode);    int docID=sourceNode & DTMManager.IDENT_DTM_DEFAULT;    int child;    while (DTM.NULL != (child=sourceNodes.nextNode())) {      currentNodes.setTop(child);      currentExpressionNodes.setTop(child);      if ((child & DTMManager.IDENT_DTM_DEFAULT) != docID) {        dtm=xctxt.getDTM(child);        docID=child & DTMManager.IDENT_DTM_DEFAULT;      }      final int nodeType=dtm.getNodeType(child);      for (ElemTemplateElement t=this.m_firstChild; t != null; t=t.m_nextSibling) {        xctxt.setSAXLocator(t);        transformer.setCurrentElement(t);        t.execute(transformer);      }      if (m_doc_cache_off) {        if (DEBUG)         System.out.println("JJK***** CACHE RELEASE *****\n" + "\tdtm=" + dtm.getDocumentBaseURI());        xctxt.getSourceTreeManager().removeDocumentFromCache(dtm.getDocument());        xctxt.release(dtm,false);      }    }  }  finally {    xctxt.popSAXLocator();    xctxt.popContextNodeList();    transformer.popElemTemplateElement();    xctxt.popCurrentExpressionNode();    xctxt.popCurrentNode();    sourceNodes.detach();  }}  }
class C{  public void detachScsiLun(HostScsiDisk disk){  try {    HostStorageSystem storageSystem=getStorageSystem();    storageSystem.detachScsiLun(disk.getUuid());  } catch (  HostConfigFault e) {    throw new VMWareException(e);  }catch (  RuntimeFault e) {    throw new VMWareException(e);  }catch (  RemoteException e) {    throw new VMWareException(e);  }}  }
class C{  public boolean logout() throws LoginException {  if (debug)   debugPrint("Entering logout " + status);switch (status) {case UNINITIALIZED:    throw new LoginException("The login module is not initialized");case INITIALIZED:case AUTHENTICATED:default :  return false;case LOGGED_IN:logoutInternal();return true;}}  }
class C{  public void passed(Description description,String sessionId){  if (verboseEnabled()) {    slackSession.sendMessage(verboseChannel,"",createHeaderAttachment(description,true));  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("Post from " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  Properties ctx=JSPEnv.getCtx(request);  HttpSession session=request.getSession(true);  session.removeAttribute(WebSessionCtx.HDR_MESSAGE);  WebUser wu=(WebUser)session.getAttribute(WebUser.NAME);  WebBasket wb=(WebBasket)session.getAttribute(WebBasket.NAME);  MOrder order=null;  boolean done=false;  String url="/paymentInfo.jsp";  if (wu == null || !wu.isLoggedIn()) {    session.setAttribute("CheckOut","Y");    url="/login.jsp";    done=true;  } else   order=getOrder(request,ctx);  if (!done && order != null) {    if (processOrder(request,order))     url="/orders.jsp"; else {      WebOrder wo=new WebOrder(order);      MPayment p=createPayment(session,ctx,wu,wo);      if (p != null) {        session.setAttribute(PaymentServlet.ATTR_PAYMENT,p);        session.setAttribute(WebOrder.NAME,wo);      } else       url="/orders.jsp";    }    done=true;  }  if (!done && (wb == null || wb.getLineCount() == 0)) {    url="/basket.jsp";    done=true;  }  if (!done) {    WebOrder wo=new WebOrder(wu,wb,ctx);    if (wo.isInProgress() || wo.isCompleted()) {      session.removeAttribute(CheckOutServlet.ATTR_CHECKOUT);      session.removeAttribute(WebBasket.NAME);      sendEMail(request,ctx,wo,wu);    }    if (wo.getGrandTotal().compareTo(Env.ZERO) > 0) {      session.setAttribute(WebOrder.NAME,wo);      MPayment p=createPayment(session,ctx,wu,wo);      if (p == null) {        WebUtil.createForwardPage(response,"Payment could not be created","orders.jsp",5);        return;      } else       session.setAttribute(PaymentServlet.ATTR_PAYMENT,p);    } else {      url="/orders.jsp";    }  }  log.info("Forward to " + url);  RequestDispatcher dispatcher=getServletContext().getRequestDispatcher(url);  dispatcher.forward(request,response);}  }
class C{  @Override public String toString(){  String str=id + ": ";  for (  RuleCase theCase : cases) {    if (!theCase.equals(cases.get(0))) {      str+="\telse ";    }    str+=theCase.toString() + "\n";  }  if (!cases.isEmpty()) {    str=str.substring(0,str.length() - 1);  }  return str;}  }
class C{  public Response api(final String url,final String methodType,final Map<String,String> params,final Map<String,String> headerParams,final String body) throws Exception {  Response response;  try {    response=getCurrentProvider().api(url,methodType,params,headerParams,body);  } catch (  Exception e) {    throw new SocialAuthException("Error while making request to URL : " + url,e);  }  return response;}  }
class C{  public CF6(int numberOfVariables){  super(numberOfVariables,2,2);}  }
class C{  public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1){  return of(Ordering.natural(),k1,v1);}  }
class C{  public void removeTreeSelectionListener(TreeSelectionListener tsl){  listenerList.remove(TreeSelectionListener.class,tsl);  if (listenerList.getListenerCount(TreeSelectionListener.class) == 0 && selectionRedirector != null) {    selectionModel.removeTreeSelectionListener(selectionRedirector);    selectionRedirector=null;  }}  }
class C{  public final boolean isString(){  return (m_Type == STRING);}  }
class C{  public void removeListener(final IThreadListener listener){  m_listeners.removeListener(listener);}  }
class C{  public final String showPrompt(String message,String defaultValue){  return null;}  }
class C{  public boolean isDaemon(){  return this.map.get("daemon") != null;}  }
class C{  public CommitmentTypeQualifier(ASN1ObjectIdentifier commitmentTypeIdentifier){  this(commitmentTypeIdentifier,null);}  }
class C{  private void initRecyclerView(){  CycleBinder cycleBinder=textAdapter.getCycleBinder();  AcceptedOfferBinder offerBinder=textAdapter.getOfferBinder();  talkRecyclerView.setAdapter(textAdapter);  talkRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));  populateRecyclerList();  presenter.removeOffer(offerBinder.getRemoveOfferStream());  presenter.undoRemoveOffer(offerModel.getUndoOfferRemoveStream());}  }
class C{  public DefaultMosaicTransferFeeCalculator(final MosaicLevyLookup mosaicLevyLookup){  this.mosaicLevyLookup=mosaicLevyLookup;}  }
class C{  public static void checkMove(@NotNull PsiElement element,@NotNull PsiElement newContainer) throws IncorrectOperationException {  if (element instanceof PsiDirectoryContainer) {    PsiDirectory[] dirs=((PsiDirectoryContainer)element).getDirectories();    if (dirs.length == 0) {      throw new IncorrectOperationException();    } else     if (dirs.length > 1) {      throw new IncorrectOperationException("Moving of packages represented by more than one physical directory is not supported.");    }    checkMove(dirs[0],newContainer);    return;  }  newContainer.checkAdd(element);  checkIfMoveIntoSelf(element,newContainer);}  }
class C{  public Alarm(){  this(ThreadToUse.SWING_THREAD);}  }
class C{  protected void addApplicationToVolume(URI voluri,DbClient dbClient){  Volume volume=dbClient.queryObject(Volume.class,voluri);  StringSet applications=volume.getVolumeGroupIds();  if (applications == null) {    applications=new StringSet();  }  applications.add(getId().toString());  volume.setVolumeGroupIds(applications);  dbClient.updateObject(volume);  StringSet fullCopies=volume.getFullCopies();  List<Volume> fullCopiesToUpdate=new ArrayList<Volume>();  if (fullCopies != null && !fullCopies.isEmpty()) {    for (    String fullCopyId : fullCopies) {      Volume fullCopy=dbClient.queryObject(Volume.class,URI.create(fullCopyId));      if (fullCopy != null && NullColumnValueGetter.isNullValue(fullCopy.getFullCopySetName())) {        fullCopy.setFullCopySetName(fullCopy.getReplicationGroupInstance());        fullCopiesToUpdate.add(fullCopy);      }    }  }  if (!fullCopiesToUpdate.isEmpty()) {    dbClient.updateObject(fullCopiesToUpdate);  }}  }
class C{  public static void evolve(BinaryVariable v1,BinaryVariable v2){  if (v1.getNumberOfBits() != v2.getNumberOfBits()) {    throw new FrameworkException("binary variables not same length");  }  for (int i=0; i < v1.getNumberOfBits(); i++) {    boolean value=v1.get(i);    if ((value != v2.get(i)) && PRNG.nextBoolean()) {      v1.set(i,!value);      v2.set(i,value);    }  }}  }
class C{  public static final double[][] timesEquals(final double[][] m1,final double s1){  for (int i=0; i < m1.length; i++) {    final double[] row=m1[i];    for (int j=0; j < row.length; j++) {      row[j]*=s1;    }  }  return m1;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.N4_CLASS_DEFINITION__SUPER_CLASS_REF:    return basicSetSuperClassRef(null,msgs);case N4JSPackage.N4_CLASS_DEFINITION__SUPER_CLASS_EXPRESSION:  return basicSetSuperClassExpression(null,msgs);case N4JSPackage.N4_CLASS_DEFINITION__IMPLEMENTED_INTERFACE_REFS:return ((InternalEList<?>)getImplementedInterfaceRefs()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void parseFeatures(XmlPullParser parser) throws Exception {  boolean done=false;  while (!done) {    int eventType=parser.next();    if (eventType == XmlPullParser.START_TAG) {      if (parser.getName().equals("mechanisms")) {        connection.getSASLAuthentication().setAvailableSASLMethods(PacketParserUtils.parseMechanisms(parser));      } else       if (parser.getName().equals("bind")) {        connection.getSASLAuthentication().bindingRequired();      } else       if (parser.getName().equals("session")) {        connection.getSASLAuthentication().sessionsSupported();      } else       if (parser.getName().equals("register")) {        connection.getAccountManager().setSupportsAccountCreation(true);      }    } else     if (eventType == XmlPullParser.END_TAG) {      if (parser.getName().equals("features")) {        done=true;      }    }  }}  }
class C{  public boolean isEventCondition(){  return false;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.659 -0500",hash_original_method="17B527703375EC0E18C6C2B14F73239B",hash_generated_method="978A8D227C75F06C0F72123179F370E8") public static Typeface create(String familyName,int style){  return new Typeface(nativeCreate(familyName,style));}  }
class C{  private static RetainFragment findOrCreateRetainFragment(FragmentManager fm){  RetainFragment mRetainFragment=(RetainFragment)fm.findFragmentByTag(TAG);  if (mRetainFragment == null) {    mRetainFragment=new RetainFragment();    fm.beginTransaction().add(mRetainFragment,TAG).commitAllowingStateLoss();  }  return mRetainFragment;}  }
class C{  public static boolean ionEqualsByContent(final IonValue v1,final IonValue v2){  return ionEqualsImpl(v1,v2,false);}  }
class C{  public static OptionBuilder hasOptionalArg(){  OptionBuilder.numberOfArgs=1;  OptionBuilder.optionalArg=true;  return instance;}  }
class C{  public static Paint newBackgroundPaint(Context context){  final Paint paint=new Paint();  paint.setColor(Color.parseColor(DEFAULT_BACKGROUND_COLOR_ID));  return paint;}  }
class C{  @Override public void populateDAG(DAG dag,Configuration conf){  InputReceiver randomGen=dag.addOperator("Receiver",InputReceiver.class);  DimensionGenerator dimensionGenerator=dag.addOperator("DimensionsGenerator",DimensionGenerator.class);  dag.addStream("Events",randomGen.outputInline,dimensionGenerator.inputPort);  MachineInfoAveragingPrerequisitesOperator prereqAverageOper=addAverageCalculation(dag,conf);  dag.addStream("DimensionalData",dimensionGenerator.outputInline,prereqAverageOper.inputPort);}  }
class C{  public boolean isRunning(){  return hasViewAttached() && mRunning;}  }
class C{  public ViolationInfo(Throwable tr,int policy){  crashInfo=new ApplicationErrorReport.CrashInfo(tr);  violationUptimeMillis=SystemClock.uptimeMillis();  this.policy=policy;  this.numAnimationsRunning=ValueAnimator.getCurrentAnimationsCount();  Intent broadcastIntent=ActivityThread.getIntentBeingBroadcast();  if (broadcastIntent != null) {    broadcastIntentAction=broadcastIntent.getAction();  }  ThreadSpanState state=sThisThreadSpanState.get();  if (tr instanceof InstanceCountViolation) {    this.numInstances=((InstanceCountViolation)tr).mInstances;  }synchronized (state) {    int spanActiveCount=state.mActiveSize;    if (spanActiveCount > MAX_SPAN_TAGS) {      spanActiveCount=MAX_SPAN_TAGS;    }    if (spanActiveCount != 0) {      this.tags=new String[spanActiveCount];      Span iter=state.mActiveHead;      int index=0;      while (iter != null && index < spanActiveCount) {        this.tags[index]=iter.mName;        index++;        iter=iter.mNext;      }    }  }}  }
class C{  public static void executeCreateTable(final Connection connection,final String sql) throws SQLException {  DdlHelper.executeDDL(connection,sql,ISCConstants.isc_no_meta_update);}  }
class C{  public void connect(String ipAddress){  if (sLogger.isActivated()) {    sLogger.info("Network access connected (" + ipAddress + ")");  }  mIpAddress=ipAddress;  if (mRcsSettings.isSecureMsrpOverMobile()) {    try {      KeyStoreManager.updateClientCertificate(ipAddress);    } catch (    CertificateException|IOException e) {      if (sLogger.isActivated()) {        sLogger.error(e.getMessage());      }    }  }}  }
class C{  public void toArray(int[] array){  System.arraycopy(data,0,array,0,size);}  }
class C{  public Token<T> pop() throws ParseException {  Token<T> t=peek();  advance();  return t;}  }
class C{  protected void assertUpdateLogsEquals(String collection,int numberOfTLogs) throws Exception {  CollectionInfo info=collectInfo(collection);  Map<String,List<CollectionInfo.CoreInfo>> shardToCoresMap=info.getShardToCoresMap();  for (  String shard : shardToCoresMap.keySet()) {    Map<Long,Long> leaderFilesMeta=this.getFilesMeta(info.getLeader(shard).ulogDir);    Map<Long,Long> slaveFilesMeta=this.getFilesMeta(info.getReplicas(shard).get(0).ulogDir);    assertEquals("Incorrect number of tlog files on the leader",numberOfTLogs,leaderFilesMeta.size());    assertEquals("Incorrect number of tlog files on the slave",numberOfTLogs,slaveFilesMeta.size());    for (    Long leaderFileVersion : leaderFilesMeta.keySet()) {      assertTrue("Slave is missing a tlog for version " + leaderFileVersion,slaveFilesMeta.containsKey(leaderFileVersion));      assertEquals("Slave's tlog file size differs for version " + leaderFileVersion,leaderFilesMeta.get(leaderFileVersion),slaveFilesMeta.get(leaderFileVersion));    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (pluggy != null) {    if (pluggy.isServerConfiguredPlugin()) {      stack.push(pluggy);      return makeNetworkedCall(stack);    }    return sage.plugin.CorePluginManager.getInstance().enablePlugin(pluggy.getId(),stack.getUIMgr()) ? Boolean.TRUE : Boolean.FALSE;  }  return null;}  }
class C{  boolean canStore(){  if (table.getUniqueIndex() != null) {    return true;  }  return false;}  }
class C{  protected <K,V>ConcurrentLinkedHashMap<K,V> newEmptyMap(){  return new Builder<K,V>().maximumWeightedCapacity(capacity()).build();}  }
class C{  private void putHead(String key,TemplateSubPatternAssociation assoc){  if (key.equals(PsuedoNames.PSEUDONAME_TEXT))   m_textPatterns=assoc; else   if (key.equals(PsuedoNames.PSEUDONAME_ROOT))   m_docPatterns=assoc; else   if (key.equals(PsuedoNames.PSEUDONAME_COMMENT))   m_commentPatterns=assoc;  m_patternTable.put(key,assoc);}  }
class C{  public TrainSchedule(Element e){  org.jdom2.Attribute a;  if ((a=e.getAttribute(Xml.ID)) != null) {    _id=a.getValue();  } else {    log.warn("no id attribute in schedule element when reading operations");  }  if ((a=e.getAttribute(Xml.NAME)) != null) {    _name=a.getValue();  }  if ((a=e.getAttribute(Xml.COMMENT)) != null) {    _comment=a.getValue();  }  if ((a=e.getAttribute(Xml.TRAIN_IDS)) != null) {    String ids=a.getValue();    String[] trainIds=ids.split(",");    for (    String id : trainIds) {      _trainIds.add(id);    }  }}  }
class C{  @Override public Iterator<Map.Entry<String,Object>> iterator(){  return vals.entrySet().iterator();}  }
class C{  public boolean isJPAIdNested(AbstractSession session){  if (isJPAId()) {    return true;  } else {    ClassDescriptor referenceDescriptor=getReferenceDescriptor();    if (referenceDescriptor == null) {      referenceDescriptor=session.getDescriptor(getReferenceClass());    }    for (    DatabaseMapping mapping : referenceDescriptor.getMappings()) {      if (mapping.isAggregateObjectMapping() && ((AggregateObjectMapping)mapping).isJPAIdNested(session)) {        return true;      }    }    return false;  }}  }
class C{  public WampConnectionPromise(ICompletionCallback<T> callback,Object state){  this.callback=callback;  this.state=state;}  }
class C{  @SuppressWarnings("unchecked") public static BucketReferer parseGetBucketReferer(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    boolean allowEmptyReferer=Boolean.valueOf(root.getChildText("AllowEmptyReferer"));    List<String> refererList=new ArrayList<String>();    if (root.getChild("RefererList") != null) {      Element refererListElem=root.getChild("RefererList");      List<Element> refererElems=refererListElem.getChildren("Referer");      if (refererElems != null && !refererElems.isEmpty()) {        for (        Element e : refererElems) {          refererList.add(e.getText());        }      }    }    return new BucketReferer(allowEmptyReferer,refererList);  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  public RxJava1ClientWebRequestBuilder accept(String... mediaTypes){  this.delegate.accept(mediaTypes);  return this;}  }
class C{  private int matchString(String text,int start,int field,Map<String,Integer> data,CalendarBuilder calb){  if (data != null) {    if (data instanceof SortedMap) {      for (      String name : data.keySet()) {        if (text.regionMatches(true,start,name,0,name.length())) {          calb.set(field,data.get(name));          return start + name.length();        }      }      return -start;    }    String bestMatch=null;    for (    String name : data.keySet()) {      int length=name.length();      if (bestMatch == null || length > bestMatch.length()) {        if (text.regionMatches(true,start,name,0,length)) {          bestMatch=name;        }      }    }    if (bestMatch != null) {      calb.set(field,data.get(bestMatch));      return start + bestMatch.length();    }  }  return -start;}  }
class C{  protected void updateAnnotations(Annotation existingAnnotation,Position newPos,Map additions,List modifications,List deletions){  if (existingAnnotation instanceof FoldingAnnotation) {    FoldingAnnotation foldingAnnotation=(FoldingAnnotation)existingAnnotation;    if (newPos != null && newPos.length > 0 && projectionAnnotationModel != null) {      Position oldPos=projectionAnnotationModel.getPosition(foldingAnnotation);      if (!newPos.equals(oldPos)) {        oldPos.setOffset(newPos.offset);        oldPos.setLength(newPos.length);        modifications.add(foldingAnnotation);      }    } else {      deletions.add(foldingAnnotation);    }  }}  }
class C{  public static final boolean isIdentifier(String str){  boolean result=true;  boolean allChars=true;  int i=0;  while (result && (i < str.length())) {    char ch=str.charAt(i);    result=Character.isLetterOrDigit(ch) || (ch == '_');    allChars=allChars && Character.isDigit(ch);    i++;  }  return result && (!allChars);}  }
class C{  public static int compareParentToChild(String path1,String path2){  return path1.compareTo(path2);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int mediaMask=getMediaMask(stack);  Object o=stack.pop();  if (o instanceof DBObject)   return ((DBObject)o).hasMediaMaskAny(mediaMask) ? Boolean.TRUE : Boolean.FALSE;  Airing a=getAirObj(o);  if (a != null)   return a.hasMediaMaskAny(mediaMask) ? Boolean.TRUE : Boolean.FALSE;  return Boolean.FALSE;}  }
class C{  private Partition addPartition(String partitionId,String partitionDn) throws Exception {  JdbmPartition partition=new JdbmPartition();  partition.setId(partitionId);  partition.setPartitionDir(new File(service.getWorkingDirectory(),partitionId));  partition.setSuffix(partitionDn);  service.addPartition(partition);  return partition;}  }
class C{  public static void createZip(String inPath,String filenameZip){  try {    System.out.println("Start generating zipfile");    File f=new File(inPath);    File[] files=f.listFiles();    String outPathFile=inPath + filenameZip;    BufferedInputStream origin=null;    FileOutputStream dest=new FileOutputStream(outPathFile);    ZipOutputStream out=new ZipOutputStream(new BufferedOutputStream(dest));    byte data[]=new byte[BUFFER];    for (int i=0; i < files.length; i++) {      if (!files[i].equals(filenameZip)) {        FileInputStream fi=new FileInputStream(files[i]);        origin=new BufferedInputStream(fi,BUFFER);        ZipEntry entry=new ZipEntry(files[i].getName());        out.putNextEntry(entry);        int count;        while ((count=origin.read(data,0,BUFFER)) != -1) {          out.write(data,0,count);        }        origin.close();      }    }    out.close();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private static boolean tryNumber(String s,boolean precedingZeroIsntNumber,boolean precedingPlusIsntNumber){  if (s.startsWith("0.")) {    return true;  } else   if (precedingPlusIsntNumber && s.startsWith("+")) {    return false;  } else   if (precedingZeroIsntNumber && s.startsWith("0")) {    return false;  }  return true;}  }
class C{  public void testOnUserAddFailed_showsSpinner(){  mController.init();  JsonUser user=new JsonUser("idA","nameA");  mFakeEventBus.post(new UserAddFailedEvent(new JsonNewUser(),0));  verify(mMockFragmentUi).showSpinner(false);}  }
class C{  public static String toJavaName(String classname){  return classname.replace('/','.');}  }
class C{  protected PaintServer(){}  }
class C{  public RemoteException(){  initCause(null);}  }
class C{  public void testPreconditions(){  StoreRetrieveData dataStorage=getDataStorage();  ArrayList<ToDoItem> items=null;  try {    items=dataStorage.loadFromFile();  } catch (  Exception e) {    fail("Couldn't read from data storage: " + e.getMessage());  }  assertEquals(0,items.size());}  }
class C{  public final void translateMoves(){  List<Integer> currPath=new ArrayList<Integer>();  while (currentNode != rootNode) {    Node child=currentNode;    goBack();    int childNum=currentNode.children.indexOf(child);    currPath.add(childNum);  }  translateMovesHelper();  for (int i=currPath.size() - 1; i >= 0; i--)   goForward(currPath.get(i),false);}  }
class C{  public static void assertQ(String request,String... tests){  try {    int queryStartPos=request.indexOf('?');    String query;    String path;    if (-1 == queryStartPos) {      query="";      path=request;    } else {      query=request.substring(queryStartPos + 1);      path=request.substring(0,queryStartPos);    }    if (!query.matches(".*wt=schema\\.xml.*")) {      query=setParam(query,"wt","xml");    }    request=path + '?' + setParam(query,"indent","on");    String response=restTestHarness.query(request);    String results=TestHarness.validateXPath(response,tests);    if (null != results) {      String msg="REQUEST FAILED: xpath=" + results + "\n\txml response was: "+ response+ "\n\trequest was:"+ request;      log.error(msg);      throw new RuntimeException(msg);    }  } catch (  XPathExpressionException e1) {    throw new RuntimeException("XPath is invalid",e1);  }catch (  Exception e2) {    SolrException.log(log,"REQUEST FAILED: " + request,e2);    throw new RuntimeException("Exception during query",e2);  }}  }
class C{  private DefaultValue(){}  }
class C{  void error(String msg){  System.err.println(msg);  errors++;}  }
class C{  static public PrintWriter createWriter(OutputStream output){  try {    BufferedOutputStream bos=new BufferedOutputStream(output,8192);    OutputStreamWriter osw=new OutputStreamWriter(bos,"UTF-8");    return new PrintWriter(osw);  } catch (  UnsupportedEncodingException e) {  }  return null;}  }
class C{  public static int smallSetSize(int maxDoc){  return (maxDoc >> 6) + 5;}  }
class C{  public void checkDeliveryTime(Message message) throws JMSException {  long creation=message.getJMSTimestamp();  long min=System.currentTimeMillis() - (offline.max + online.min);  if (min > creation) {    SimpleDateFormat df=new SimpleDateFormat("HH:mm:ss.SSS");    exit("" + this + ".checkDeliveryTime failed. Message time: "+ df.format(new Date(creation))+ ", min: "+ df.format(new Date(min))+ "\r\n"+ message);  }}  }
class C{  public Builder stereoReset(boolean stereoReset){  if (stereoReset) {    mFlags|=FLAG_STEREO_RESET;  } else {    mFlags&=~FLAG_STEREO_RESET;  }  return this;}  }
class C{  private void doPress(JLabel label){  Component labelFor=label.getLabelFor();  if (labelFor != null && labelFor.isEnabled()) {    Component owner=label.getLabelFor();    if (owner instanceof Container && ((Container)owner).isFocusCycleRoot()) {      owner.requestFocus();    } else {      if (owner instanceof Container) {        Container container=(Container)owner;        if (container.isFocusCycleRoot()) {          FocusTraversalPolicy policy=container.getFocusTraversalPolicy();          Component comp=policy.getDefaultComponent(container);          if (comp != null) {            comp.requestFocus();            return;          }        }        Container rootAncestor=container.getFocusCycleRootAncestor();        if (rootAncestor != null) {          FocusTraversalPolicy policy=rootAncestor.getFocusTraversalPolicy();          Component comp=policy.getComponentAfter(rootAncestor,container);          if (comp != null && SwingUtilities.isDescendingFrom(comp,container)) {            comp.requestFocus();            return;          }        }      }      if (owner.isFocusable()) {        owner.requestFocus();        return;      }    }  }}  }
class C{  @Override public void fire(final Player player,final Sentence sentence,final EventRaiser speakerNPC){  final String monstersType=chooseRandomEnemys();  speakerNPC.say("I need help to defeat #enemy " + monstersType + " armies. They are a grave concern. Kill at least "+ enemyForces.get(monstersType).first()+ " of any "+ monstersType+ " soldiers and I will reward you.");  final HashMap<String,Pair<Integer,Integer>> toKill=new HashMap<String,Pair<Integer,Integer>>();  List<String> sortedcreatures=enemys.get(monstersType);  player.setQuest(QUEST_SLOT,0,"start");  player.setQuest(QUEST_SLOT,1,monstersType);  for (int i=0; i < sortedcreatures.size(); i++) {    toKill.put(sortedcreatures.get(i),new Pair<Integer,Integer>(0,0));  }  new StartRecordingKillsAction(QUEST_SLOT,2,toKill).fire(player,sentence,speakerNPC);}  }
class C{  public NonUniqueBusinessKeyException(ClassEnum classEnum,String businessKey){  super(generateMessage(classEnum,businessKey),classEnum,businessKey);}  }
class C{  public void testFourNodeSequentialEvent() throws Throwable {  testSequentialEvent(4);}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.ENTRY_EVENT;}  }
class C{  private static boolean referenceEquals(Object[] a1,Object[] a2){  if (a1.length != a2.length) {    return false;  }  for (int i=0; i < a1.length; i++) {    if (a1[i] != a2[i]) {      return false;    }  }  return true;}  }
class C{  public void writeRawByte(final byte value) throws IOException {  if (position == limit) {    refreshBuffer();  }  buffer[position++]=value;}  }
class C{  @Override protected void reorderActions(final List<String> list){  if (list.remove(ActionType.ATTACK.getRepresentation())) {    list.add(0,ActionType.ATTACK.getRepresentation());  }}  }
class C{  private void initializeLiveAttributes(){  x=createLiveAnimatedLength(null,SVG_X_ATTRIBUTE,SVG_CURSOR_X_DEFAULT_VALUE,SVGOMAnimatedLength.HORIZONTAL_LENGTH,false);  y=createLiveAnimatedLength(null,SVG_Y_ATTRIBUTE,SVG_CURSOR_Y_DEFAULT_VALUE,SVGOMAnimatedLength.VERTICAL_LENGTH,false);  externalResourcesRequired=createLiveAnimatedBoolean(null,SVG_EXTERNAL_RESOURCES_REQUIRED_ATTRIBUTE,false);}  }
class C{  public boolean search(int[] A,int target){  if (A == null || A.length == 0)   return false;  int l=0;  int r=A.length - 1;  while (l <= r) {    int m=l + (r - l) / 2;    if (A[m] == target)     return true;    if (A[l] == A[m] && A[m] == A[r]) {      l++;      r--;    } else     if (A[l] == A[m])     l=m + 1; else     if (A[m] == A[r])     r=m; else     if (A[l] < A[m]) {      if (A[l] <= target && target < A[m]) {        r=m - 1;      } else       l=m + 1;    } else     if (A[l] > A[m]) {      if (A[m] < target && target <= A[r])       l=m + 1; else       r=m - 1;    }  }  return false;}  }
class C{  public static UpdateStatement orReplace(CharSequence table){  return produce(table,"REPLACE");}  }
class C{  private static boolean matches(XmlPullParser parser,String mcc,String mnc){  boolean mccMatches=false;  boolean mncMatches=false;  boolean isMMSType=false;  for (int i=0; i < parser.getAttributeCount(); i++) {    String name=parser.getAttributeName(i);    String value=parser.getAttributeValue(i);    if ("mcc".equals(name) && mcc.equals(value)) {      mccMatches=true;    } else     if ("mnc".equals(name) && mnc.equals(value)) {      mncMatches=true;    } else     if ("type".equals(name) && !TextUtils.isEmpty(value) && value.contains("mms")) {      isMMSType=true;    }  }  return mccMatches && mncMatches && isMMSType;}  }
class C{  Type attribTree(JCTree tree,Env<AttrContext> env,ResultInfo resultInfo){  Env<AttrContext> prevEnv=this.env;  ResultInfo prevResult=this.resultInfo;  try {    this.env=env;    this.resultInfo=resultInfo;    tree.accept(this);    if (tree == breakTree && resultInfo.checkContext.deferredAttrContext().mode == AttrMode.CHECK) {      throw new BreakAttr(copyEnv(env));    }    return result;  } catch (  CompletionFailure ex) {    tree.type=syms.errType;    return chk.completionError(tree.pos(),ex);  } finally {    this.env=prevEnv;    this.resultInfo=prevResult;  }}  }
class C{  public static int asInt(int[] data,int n){  if ((data == null) || (data.length == 0)) {    throw new SketchesArgumentException("Input is null or empty.");  }  return asInteger(toLongArray(data),n);}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  static public void qsort(byte[] array){  qsort_h(array,0,array.length - 1);}  }
class C{  public void close() throws IOException {  for (int i=path.length; --i >= 0; ) {    if (path[i].zip != null) {      path[i].zip.close();    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String shapefile=null;  String inputFieldsString=null;  String[] fieldNames=null;  double z;  int numFields;  int progress=0;  int lastProgress=0;  int row;  int a, i, j;  double[] fieldAverages;  double[] fieldTotals;  boolean standardizedPCA=false;  int numberOfComponentsOutput=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFieldsString=args[0];  standardizedPCA=Boolean.parseBoolean(args[1]);  if (args[2].toLowerCase().contains("not")) {    numberOfComponentsOutput=0;  } else {    numberOfComponentsOutput=Integer.parseInt(args[2]);  }  try {    String[] inputs=inputFieldsString.split(";");    shapefile=inputs[0];    numFields=inputs.length - 1;    fieldNames=new String[numFields];    System.arraycopy(inputs,1,fieldNames,0,numFields);    AttributeTable table=new AttributeTable(shapefile.replace(".shp",".dbf"));    int numRecs=table.getNumberOfRecords();    DBFField[] fields=table.getAllFields();    ArrayList<Integer> PCAFields=new ArrayList<>();    for (j=0; j < fieldNames.length; j++) {      for (i=0; i < fields.length; i++) {        if (fields[i].getName().equals(fieldNames[j]) && (fields[i].getDataType() == DBFField.DBFDataType.NUMERIC || fields[i].getDataType() == DBFField.DBFDataType.FLOAT)) {          PCAFields.add(i);        }      }    }    if (numFields != PCAFields.size()) {      showFeedback("Not all of the specified database fields were found in the file or " + "a field of a non-numerical type was selected.");      return;    }    double[][] fieldArray=new double[numRecs][numFields];    Object[] rec;    for (i=0; i < numRecs; i++) {      rec=table.getRecord(i);      for (j=0; j < numFields; j++) {        fieldArray[i][j]=(Double)(rec[PCAFields.get(j)]);      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * i / (numRecs - 1));      if (progress != lastProgress) {        updateProgress("Reading data:",progress);      }      lastProgress=progress;    }    fieldAverages=new double[numFields];    fieldTotals=new double[numFields];    for (row=0; row < numRecs; row++) {      for (i=0; i < numFields; i++) {        fieldTotals[i]+=fieldArray[row][i];      }    }    for (i=0; i < numFields; i++) {      fieldAverages[i]=fieldTotals[i] / numRecs;    }    double[] fieldTotalDeviation=new double[numFields];    double[][] covariances=new double[numFields][numFields];    double[][] correlationMatrix=new double[numFields][numFields];    for (row=0; row < numRecs; row++) {      for (i=0; i < numFields; i++) {        fieldTotalDeviation[i]+=(fieldArray[row][i] - fieldAverages[i]) * (fieldArray[row][i] - fieldAverages[i]);        for (a=0; a < numFields; a++) {          covariances[i][a]+=(fieldArray[row][i] - fieldAverages[i]) * (fieldArray[row][a] - fieldAverages[a]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (numRecs - 1));      if (progress != lastProgress) {        updateProgress("Calculating covariances:",progress);      }      lastProgress=progress;    }    for (i=0; i < numFields; i++) {      for (a=0; a < numFields; a++) {        correlationMatrix[i][a]=covariances[i][a] / (Math.sqrt(fieldTotalDeviation[i] * fieldTotalDeviation[a]));      }    }    for (i=0; i < numFields; i++) {      for (a=0; a < numFields; a++) {        covariances[i][a]=covariances[i][a] / (numRecs - 1);      }    }    Matrix cov=null;    if (!standardizedPCA) {      cov=new Matrix(covariances);    } else {      cov=new Matrix(correlationMatrix);    }    EigenvalueDecomposition eigen=cov.eig();    double[] eigenvalues;    Matrix eigenvectors;    SortedSet<PrincipalComponent> principalComponents;    eigenvalues=eigen.getRealEigenvalues();    eigenvectors=eigen.getV();    double[][] vecs=eigenvectors.getArray();    int numComponents=eigenvectors.getColumnDimension();    principalComponents=new TreeSet<PrincipalComponent>();    for (i=0; i < numComponents; i++) {      double[] eigenvector=new double[numComponents];      for (j=0; j < numComponents; j++) {        eigenvector[j]=vecs[j][i];      }      principalComponents.add(new PrincipalComponent(eigenvalues[i],eigenvector));    }    double totalEigenvalue=0;    for (i=0; i < numComponents; i++) {      totalEigenvalue+=eigenvalues[i];    }    double[][] explainedVarianceArray=new double[numComponents][2];    j=0;    for (    PrincipalComponent pc : principalComponents) {      explainedVarianceArray[j][0]=pc.eigenValue / totalEigenvalue * 100.0;      if (j == 0) {        explainedVarianceArray[j][1]=explainedVarianceArray[j][0];      } else {        explainedVarianceArray[j][1]=explainedVarianceArray[j][0] + explainedVarianceArray[j - 1][1];      }      j++;    }    DecimalFormat df1=new DecimalFormat("0.00");    DecimalFormat df2=new DecimalFormat("0.0000");    DecimalFormat df3=new DecimalFormat("0.000000");    DecimalFormat df4=new DecimalFormat("0.000");    String ret="Principal Component Analysis Report:\n\n";    ret+="Component\tExplained Var.\tCum. %\tEigenvalue\tEigenvector\n";    j=0;    for (    PrincipalComponent pc : principalComponents) {      String explainedVariance=df1.format(explainedVarianceArray[j][0]);      String explainedCumVariance=df1.format(explainedVarianceArray[j][1]);      double[] eigenvector=pc.eigenVector.clone();      ret+=(j + 1) + "\t" + explainedVariance+ "\t"+ explainedCumVariance+ "\t"+ df2.format(pc.eigenValue)+ "\t";      String eigenvec="[";      for (i=0; i < numComponents; i++) {        if (i < numComponents - 1) {          eigenvec+=df3.format(eigenvector[i]) + ", ";        } else {          eigenvec+=df3.format(eigenvector[i]);        }      }      eigenvec+="]";      ret+=eigenvec + "\n";      if (j < numberOfComponentsOutput) {        DBFField field=new DBFField();        field=new DBFField();        field.setName("COMP" + (j + 1));        field.setDataType(DBFField.DBFDataType.NUMERIC);        field.setFieldLength(10);        field.setDecimalCount(4);        table.addField(field);        for (row=0; row < numRecs; row++) {          z=0;          for (i=0; i < numFields; i++) {            z+=fieldArray[row][i] * eigenvector[i];          }          Object[] recData=table.getRecord(row);          recData[recData.length - 1]=new Double(z);          table.updateRecord(row,recData);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (numRecs - 1));          if (progress != lastProgress) {            updateProgress("Outputing Component " + (j + 1) + ":",progress);          }          lastProgress=progress;        }      }      j++;    }    ret+="\nFactor Loadings:\n";    ret+="\t\tComponent\n\t";    for (i=0; i < numComponents; i++) {      ret+=(i + 1) + "\t";    }    ret+="\n";    double loading=0;    if (!standardizedPCA) {      for (i=0; i < numFields; i++) {        ret+="field " + (i + 1) + "\t";        for (        PrincipalComponent pc : principalComponents) {          double[] eigenvector=pc.eigenVector.clone();          double ev=pc.eigenValue;          loading=(eigenvector[i] * Math.sqrt(ev)) / Math.sqrt(covariances[i][i]);          ret+=df4.format(loading) + "\t";        }        ret+="\n";      }    } else {      for (i=0; i < numFields; i++) {        ret+="field " + (i + 1) + "\t";        for (        PrincipalComponent pc : principalComponents) {          double[] eigenvector=pc.eigenVector.clone();          double ev=pc.eigenValue;          loading=(eigenvector[i] * Math.sqrt(ev));          ret+=df4.format(loading) + "\t";        }        ret+="\n";      }    }    ret+="\n";    for (i=0; i < numFields; i++) {      ret+="field " + (i + 1) + "\t"+ fieldNames[i]+ "\n";    }    returnData(ret);    if (numberOfComponentsOutput > 0) {      returnData(table.getFileName());    }    ScreePlot plot=new ScreePlot(explainedVarianceArray);    returnData(plot);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static BufferedWriter newWriter(File file,String charset,boolean append) throws IOException {  return newWriter(file,charset,append,false);}  }
class C{  public Assignment newAssignment(){  Assignment result=new Assignment(this);  return result;}  }
class C{  private ApiInfo apiInfo(){  return new ApiInfo(propertyResolver.getProperty("title"),propertyResolver.getProperty("description"),propertyResolver.getProperty("version"),propertyResolver.getProperty("termsOfServiceUrl"),propertyResolver.getProperty("contact"),propertyResolver.getProperty("license"),propertyResolver.getProperty("licenseUrl"));}  }
class C{  public boolean offer(E e,long timeout,TimeUnit unit){  return offer(e);}  }
class C{  public void wakeEveryHour(AlarmListener al){}  }
class C{  protected boolean readDataRecords(){  boolean ret=true;  for (int lon_index=0; lon_index < uhl.num_lon_lines; lon_index++) {    if (readDataRecord(lon_index) == false) {      ret=false;    }  }  return ret;}  }
class C{  public static byte[] escape(final byte[] bytes){  final byte[] temp=new byte[2 * bytes.length];  int currentPosition=0;  for (  final byte b : bytes) {    if (b == ESCAPE_CHAR) {      temp[currentPosition++]=ESCAPE_CHAR;      temp[currentPosition++]=REPLACEMENT_CHAR;    } else     if (b == DELIMITER) {      temp[currentPosition++]=ESCAPE_CHAR;      temp[currentPosition++]=ESCAPE_CHAR;    } else {      temp[currentPosition++]=b;    }  }  final byte[] escaped=new byte[currentPosition];  System.arraycopy(temp,0,escaped,0,currentPosition);  return escaped;}  }
class C{  public PreviewInfoJson stopPreview(String pipelineName,String previewerId) throws ApiException {  Object postBody=null;  byte[] postBinaryBody=null;  if (pipelineName == null) {    throw new ApiException(400,"Missing the required parameter 'pipelineName' when calling stopPreview");  }  if (previewerId == null) {    throw new ApiException(400,"Missing the required parameter 'previewerId' when calling stopPreview");  }  String path="/v1/pipeline/{pipelineName}/preview/{previewerId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pipelineName" + "\\}",apiClient.escapeString(pipelineName.toString())).replaceAll("\\{" + "previewerId" + "\\}",apiClient.escapeString(previewerId.toString()));  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,Object> formParams=new HashMap<String,Object>();  final String[] accepts={"application/json"};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  String[] authNames=new String[]{"basic"};  TypeRef returnType=new TypeRef<PreviewInfoJson>(){  };  return apiClient.invokeAPI(path,"DELETE",queryParams,postBody,postBinaryBody,headerParams,formParams,accept,contentType,authNames,returnType);}  }
class C{  public int size(){  return this.size;}  }
class C{  public void testSystemPropertiesNeverNull(){  AbstractInstalledLocalContainer container=new AbstractInstalledLocalContainerStub(configuration);  assertNotNull(container.getSystemProperties());  assertEquals(0,container.getSystemProperties().size());}  }
class C{  public ConversationService(final String versionDate){  super(SERVICE_NAME);  if ((getEndPoint() == null) || getEndPoint().isEmpty()) {    setEndPoint(URL);  }  Validator.isTrue((versionDate != null) && !versionDate.isEmpty(),"'version cannot be null. Use " + VERSION_DATE_2016_09_20);  this.versionDate=versionDate;}  }
class C{  public GPlainDocument(String validchars){  super();  this.valid_characters=validchars;}  }
class C{  public static <E extends Comparable<E>>void doubleTree(BinaryNode<E> node){  if (node == null)   return;  BinaryNode<E> newNode=new BinaryNode<>(node.value,node.left,null);  node.left=newNode;  doubleTree(newNode.left);  doubleTree(node.right);}  }
class C{  public void testManagerCanInsertAnElementIntoFileWithNamespace() throws Exception {  Document document=builder.newDocument();  Element domain=document.createElement("domain");  domain.setAttribute("xmlns","http://www.bea.com/ns/weblogic/920/domain");  domain.setAttribute("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");  domain.setAttribute("xsi:schemaLocation","http://www.bea.com/ns/weblogic/920/domain " + "http://www.bea.com/ns/weblogic/920/domain.xsd");  document.appendChild(domain);  util.saveXml(document,TEST_FILE);  fileHandler.createFile(TEST_FILE);  manager.setNamespaces(namespaces);  manager.setFile(TEST_FILE);  manager.loadFile();  manager.insertElementsUnderXPath("<subnode property='hello' />","//weblogic:domain");  manager.writeFile();  String xml=fileHandler.readTextFile(TEST_FILE,"UTF-8");  XMLAssert.assertXpathEvaluatesTo("hello","//weblogic:domain/weblogic:subnode/@property",xml);}  }
class C{  public static java.io.PrintStream logStream(){  return info().stream;}  }
class C{  public int size(){  return workQueue.size();}  }
class C{  @Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser){  Log.d(TAG,"onProgressChanged " + progress);}  }
class C{  public static int randomInt(int lowerThan){  return RANDOM.nextInt(lowerThan);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:55.312 -0500",hash_original_method="8BE5160C40379A67738659300BC656A4",hash_generated_method="8BE5160C40379A67738659300BC656A4") void resetAppWidget(AppWidgetProviderInfo info){  mInfo=info;  mViewMode=VIEW_MODE_NOINIT;  updateAppWidget(null);}  }
class C{  public boolean isReady(){  return true;}  }
class C{  public static void uploadObject(Storage storage,String bucketName,String objectName,InputStream data,String base64CseKey,String base64CseKeyHash) throws IOException {  InputStreamContent mediaContent=new InputStreamContent("text/plain",data);  Storage.Objects.Insert insertObject=storage.objects().insert(bucketName,null,mediaContent).setName(objectName);  insertObject.getMediaHttpUploader().setDisableGZipContent(true);  final HttpHeaders httpHeaders=new HttpHeaders();  httpHeaders.set("x-goog-encryption-algorithm","AES256");  httpHeaders.set("x-goog-encryption-key",base64CseKey);  httpHeaders.set("x-goog-encryption-key-sha256",base64CseKeyHash);  insertObject.setRequestHeaders(httpHeaders);  try {    insertObject.execute();  } catch (  GoogleJsonResponseException e) {    System.out.println("Error uploading: " + e.getContent());    System.exit(1);  }}  }
class C{  public SimpleColorMap(Color[] colorTable){  setColorTable(colorTable);}  }
class C{  public final boolean finishActivity(IBinder token,int resultCode,Intent resultData){  if (resultData != null && resultData.hasFileDescriptors() == true) {    throw new IllegalArgumentException("File descriptors passed in Intent");  }synchronized (this) {    if (mController != null) {      ActivityRecord next=mMainStack.topRunningActivityLocked(token,0);      if (next != null) {        boolean resumeOK=true;        try {          resumeOK=mController.activityResuming(next.packageName);        } catch (        RemoteException e) {          mController=null;          Watchdog.getInstance().setActivityController(null);        }        if (!resumeOK) {          return false;        }      }    }    final long origId=Binder.clearCallingIdentity();    boolean res=mMainStack.requestFinishActivityLocked(token,resultCode,resultData,"app-request",true);    Binder.restoreCallingIdentity(origId);    return res;  }}  }
class C{  public ExtensionListing icon(int icon){  mIcon=icon;  return this;}  }
class C{  public void add(final long operand){  this.value+=operand;}  }
class C{  public Vote vote(SimpleString handler,Vote vote){  QuorumVoteHandler quorumVoteHandler=handlers.get(handler);  return quorumVoteHandler.vote(vote);}  }
class C{  public void incrementAll(Collection<? extends E> collection,double count){  for (  E key : collection) {    incrementCount(key,count);  }  dirty=true;}  }
class C{  public boolean isSetTriggerType(){  return this.triggerType != null;}  }
class C{  protected void onException(Exception e) throws RuntimeException {  onThrowable(e);}  }
class C{  public CProjectsTable(final JTree projectTree,final IDatabase database){  super(projectTree,new CProjectsModel(database),new CProjectsTableHelp());  m_database=Preconditions.checkNotNull(database,"IE02874: database argument can not be null");  setDefaultRenderer(Object.class,new ProjectLoadedRenderer());  final InputMap windowImap=getInputMap(JComponent.WHEN_FOCUSED);  windowImap.put(HotKeys.LOAD_HK.getKeyStroke(),"LOAD");  getActionMap().put("LOAD",CActionProxy.proxy(new LoadProjectAction()));}  }
class C{  private JPanel createLegendPanel(JPanel basePanel){  final JPanel panel;  if (basePanel != null) {    basePanel.removeAll();    basePanel.setLayout(new GridBagLayout());    panel=basePanel;  } else {    panel=new JPanel(new GridBagLayout());  }  panel.setBorder(BorderFactory.createTitledBorder(I18n.tr("Legend")));  GridBagConstraints gbc=new GridBagConstraints();  gbc.anchor=GridBagConstraints.WEST;  gbc.insets=new Insets(0,4,0,6);  JCheckBox checkBox=new JCheckBox();  checkBox.setSelected(true);  panel.add(createIconLabel(checkBox),gbc);  MultiLineLabel label=new MultiLineLabel(I18n.tr("Folder and subfolders are included in the Library."),true);  GridBagConstraints labelGbc=new GridBagConstraints();  labelGbc.anchor=GridBagConstraints.WEST;  labelGbc.fill=GridBagConstraints.HORIZONTAL;  labelGbc.gridwidth=GridBagConstraints.REMAINDER;  labelGbc.gridx=1;  labelGbc.weightx=1;  panel.add(label,labelGbc);  checkBox.setSelected(false);  gbc.gridy=1;  panel.add(createIconLabel(checkBox),gbc);  label=new MultiLineLabel(I18n.tr("Folder is not included and no subfolders are included in the Library."),true);  labelGbc.gridy=1;  panel.add(label,labelGbc);  checkBox.setIcon(partiallyIncludedIcon);  gbc.gridy=2;  gbc.insets=new Insets(0,6,0,0);  panel.add(createIconLabel(checkBox),gbc);  label=new MultiLineLabel(I18n.tr("Folder\'s files and some subfolders are included in the Library."),true);  labelGbc.gridy=2;  gbc.insets=null;  panel.add(label,labelGbc);  return panel;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processPostRequest(request,response);}  }
class C{  public boolean buildCandle(ZonedDateTime time,double open,double high,double low,double close,long volume,double vwap,int tradeCount,int rollupInterval,ZonedDateTime lastUpdateDate){  boolean newBar=this.getBaseCandleSeries().buildCandle(time,open,high,low,close,volume,vwap,tradeCount,rollupInterval,lastUpdateDate);  this.currentBaseCandleCount=this.getBaseCandleSeries().getItemCount() - 1;  CandleItem candleItem=(CandleItem)this.getBaseCandleSeries().getDataItem(this.currentBaseCandleCount);  this.getBaseCandleSeries().updatePercentChanged(candleItem);  updateIndicators(this.getBaseCandleDataset(),newBar);  this.getBaseCandleSeries().fireSeriesChanged();  if (this.isRunning()) {synchronized (lockStrategyWorker) {      this.seriesChanged=true;      lockStrategyWorker.notifyAll();    }  } else {synchronized (this.getBaseCandleDataset()) {      this.getCandleDataset().updateDataset(this.getBaseCandleDataset(),0,newBar);    }  }  return newBar;}  }
class C{  public void add(double x,double y){  xStats.add(x);  if (isFinite(x) && isFinite(y)) {    if (xStats.count() > 1) {      sumOfProductsOfDeltas+=(x - xStats.mean()) * (y - yStats.mean());    }  } else {    sumOfProductsOfDeltas=NaN;  }  yStats.add(y);}  }
class C{  protected char charAt(String value,int index){  if (index < 0 || index >= value.length()) {    return Character.MIN_VALUE;  }  return value.charAt(index);}  }
class C{  public JSONObject putOnce(String key,Object value) throws JSONException {  if (key != null && value != null) {    if (this.opt(key) != null) {      throw new JSONException("Duplicate key \"" + key + "\"");    }    this.put(key,value);  }  return this;}  }
class C{  protected void addTypePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_TimeEventSpec_type_feature"),getString("_UI_PropertyDescriptor_description","_UI_TimeEventSpec_type_feature","_UI_TimeEventSpec_type"),StextPackage.Literals.TIME_EVENT_SPEC__TYPE,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public void sendGameOptions(String password,Vector<IBasicOption> options){  final Object[] data=new Object[2];  data[0]=password;  data[1]=options;  send(new Packet(Packet.COMMAND_SENDING_GAME_SETTINGS,data));}  }
class C{  public void purgeCachedData(){  CCSpriteFrameCache.purgeSharedSpriteFrameCache();  CCTextureCache.purgeSharedTextureCache();}  }
class C{  private List<Node> dereferenceSameDocumentURI(Node node){  List<Node> nodeSet=new ArrayList<Node>();  if (node != null) {    nodeSetMinusCommentNodes(node,nodeSet,null);  }  return nodeSet;}  }
class C{  public AXLMainXMPPackage(VeraPDFMeta xmpMetadata,boolean isSerializationValid,PDFAFlavour flavour){  super(xmpMetadata,isSerializationValid,true,false,null,MAIN_XMP_PACKAGE_TYPE,flavour);}  }
class C{  public void delete(Key key){  if (key == null)   throw new NullPointerException("called delete() with null key");  st.remove(key);}  }
class C{  private void writeOneEvent(BufferedWriter writer,Event event) throws MarshallingExcetion {  try {    if (_count.getAndIncrement() > 0) {      while (!_firstWritten.get()) {        try {          Thread.sleep(1);        } catch (        InterruptedException e) {          _logger.warn("Sleep interrupted");        }      }      writer.write("," + _mapper.writeValueAsString(event));    } else {      writer.write(_mapper.writeValueAsString(event));      _firstWritten.set(true);    }  } catch (  JsonGenerationException e) {    throw new MarshallingExcetion("JSON Generation Error",e);  }catch (  JsonMappingException e) {    throw new MarshallingExcetion("JSON Mapping Error",e);  }catch (  IOException e) {    throw new MarshallingExcetion("JSON streaming failed: " + event.getEventId(),e);  }}  }
class C{  public double jointEntropy(int[] x,int[] y){  double h=0.0;  int[][] ns=new int[2][2];  int n=x.length;  double ln2=Math.log(2.0);  ns[0][0]=0;  ns[0][1]=0;  ns[1][0]=0;  ns[1][1]=0;  for (int i=0; i < n; i++) {    ns[x[i]][y[i]]++;  }  int ntot=n;  double[][] p=new double[2][2];  double lp00, lp01, lp10, lp11;  p[0][0]=(double)ns[0][0] / (double)ntot;  p[0][1]=(double)ns[0][1] / (double)ntot;  p[1][0]=(double)ns[1][0] / (double)ntot;  p[1][1]=(double)ns[1][1] / (double)ntot;  if (p[0][0] == 0.0) {    lp00=0.0;  } else {    lp00=-p[0][0] * Math.log(p[0][0]);  }  if (p[0][1] == 0.0) {    lp01=0.0;  } else {    lp01=-p[0][1] * Math.log(p[0][1]);  }  if (p[1][0] == 0.0) {    lp10=0.0;  } else {    lp10=-p[1][0] * Math.log(p[1][0]);  }  if (p[1][1] == 0.0) {    lp11=0.0;  } else {    lp11=-p[1][1] * Math.log(p[1][1]);  }  h=lp00 + lp01 + lp10+ lp11;  h/=ln2;  return h;}  }
class C{  public JapaneseTokenizerFactory(Map<String,String> args){  super(args);  mode=Mode.valueOf(get(args,MODE,JapaneseTokenizer.DEFAULT_MODE.toString()).toUpperCase(Locale.ROOT));  userDictionaryPath=args.remove(USER_DICT_PATH);  userDictionaryEncoding=args.remove(USER_DICT_ENCODING);  discardPunctuation=getBoolean(args,DISCARD_PUNCTUATION,true);  nbestCost=getInt(args,NBEST_COST,0);  nbestExamples=args.remove(NBEST_EXAMPLES);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  private Cluster<SubspaceModel> makeCluster(Relation<V> relation,DBIDs C,long[] D){  DBIDs ids=DBIDUtil.newHashSet(C);  Cluster<SubspaceModel> cluster=new Cluster<>(ids);  cluster.setModel(new SubspaceModel(new Subspace(D),Centroid.make(relation,ids).getArrayRef()));  return cluster;}  }
class C{  public GenericFeed retrieveAllMembers(String groupId) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return getFeed(new URL(baseDomainUrl + groupId + "/member"),GenericFeed.class);}  }
class C{  public void saveXml(Document document,String filename){  OutputStream os=null;  try {    TransformerFactory tFactory=TransformerFactory.newInstance();    Transformer transformer=tFactory.newTransformer();    os=getFileHandler().getOutputStream(filename);    transformer.transform(new DOMSource(document),new StreamResult(os));  } catch (  Exception e) {    throw new CargoException("Cannot modify XML file " + filename,e);  } finally {    if (os != null) {      try {        os.close();      } catch (      Exception ignored) {      } finally {        os=null;      }    }    System.gc();  }}  }
class C{  public synchronized boolean contains(File file){  return value.contains(file);}  }
class C{  public synchronized void resetPlanNodes(){  planNodes=null;}  }
class C{  private static void checkParameters(MultipleCategorySeries dataset,DefaultRenderer renderer){  if (dataset == null || renderer == null || !checkMultipleSeriesItems(dataset,renderer.getSeriesRendererCount())) {    throw new IllegalArgumentException("Titles and values should be not null and the dataset number of items should be equal to the number of series renderers");  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatagetdata.class,args);}  }
class C{  public static void listVerificationValues(WebmasterToolsService myService,String siteUrl) throws IOException, ServiceException {  String siteId=URLEncoder.encode(siteUrl,"UTF-8");  URL feedUrl=new URL(getSitesFeedUrl() + siteId);  SitesEntry entry=myService.getEntry(feedUrl,SitesEntry.class);  for (  VerificationMethod method : entry.getVerificationMethods()) {    System.out.println("Verification method: " + method.getMethodType());    if (method.getMethodType() == VerificationMethod.MethodType.METATAG) {      System.out.println("Meta verification tag value: " + method.getValue());    } else     if (method.getMethodType() == VerificationMethod.MethodType.HTMLPAGE) {      System.out.println("HTML verification page is: " + method.getValue());    }  }}  }
class C{  public boolean equals(Object obj){  if (obj == null)   return false;  if (obj == this)   return true;  if (obj.getClass() != getClass())   return false;  DiscoverInfo.Identity other=(DiscoverInfo.Identity)obj;  if (!this.category.equals(other.category))   return false;  String otherLang=other.lang == null ? "" : other.lang;  String thisLang=lang == null ? "" : lang;  if (!otherLang.equals(thisLang))   return false;  String otherType=other.type == null ? "" : other.type;  String thisType=type == null ? "" : type;  if (!otherType.equals(thisType))   return false;  String otherName=other.name == null ? "" : other.name;  String thisName=name == null ? "" : other.name;  if (!thisName.equals(otherName))   return false;  return true;}  }
class C{  public static String unescapeHTML(String html){  return HTMLEntities.unescapeHTML(html);}  }
class C{  public void swap(){  mv.visitInsn(Opcodes.SWAP);}  }
class C{  String validateMemoryReference(String name){  Memory m=null;  if (name != null) {    if (name.length() > 0) {      m=InstanceManager.memoryManagerInstance().getByUserName(name);      if (m != null) {        return name;      }    }    m=InstanceManager.memoryManagerInstance().getBySystemName(name);  }  if (m == null) {    messageInvalidActionItemName(name,"Memory");    return null;  }  return name;}  }
class C{  public static NetStats diff(NetStats current,NetStats previous){  if (current == null || previous == null) {    return null;  }  long diffReceived=current.getBytesReceived() - previous.getBytesReceived();  long diffTransmitted=current.getBytesTransmitted() - previous.getBytesTransmitted();  if (diffReceived < 0) {    diffReceived=0;  }  if (diffTransmitted < 0) {    diffTransmitted=0;  }  return new NetStats(diffReceived,diffTransmitted);}  }
class C{  @Override public void addTileEntity(TileEntity tileEntity){  getCube(tileEntity.getPos()).addTileEntity(tileEntity);}  }
class C{  public double weight(){  double total=0.0;  for (int i=0; i < n; i++) {    if (xy[i] != UNMATCHED)     total+=weight[i][xy[i]];  }  return total;}  }
class C{  private void visitFocus(NodeItem n,NodeItem c){  if (n.getDOI() <= -1) {    visit(n,c,0,0);    if (m_threshold < 0)     visitDescendants(n,c);    visitAncestors(n);  }}  }
class C{  public static final double[] plus(final double[] v1,final double d){  final double[] result=new double[v1.length];  for (int i=0; i < result.length; i++) {    result[i]=v1[i] + d;  }  return result;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node refChild;  Node newChild;  Node insertedNode;  String childName;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  refChild=childList.item(3);  newChild=doc.createElement("newChild");  insertedNode=employeeNode.insertBefore(newChild,refChild);  childName=insertedNode.getNodeName();  assertEquals("nodeInsertBeforeNodeNameAssert1","newChild",childName);}  }
class C{  public ElementoEtiquetaDato findElementoEtiquetaDatoById(String idElemento){  ElementoEtiquetaDato dato=null;  if (StringUtils.isNotBlank(idElemento)) {    Area area;    for (int i=0; (dato == null) && (i < areas.size()); i++) {      area=(Area)areas.get(i);      for (int j=0; (dato == null) && (j < area.getTotalElementos()); j++) {        Elemento elemento=(Elemento)area.getElemento(j);switch (elemento.getTipo()) {case TiposElemento.TIPO_ELEMENTO_AREA:case TiposElemento.TIPO_ELEMENTO_CABECERA:case TiposElemento.TIPO_ELEMENTO_TABLA:case TiposElemento.TIPO_ELEMENTO_TABLA_TEXTUAL:          dato=findElementoEtiquetaDatoById(idElemento,(ContenedorElementos)elemento);        break;case TiposElemento.TIPO_ELEMENTO_ETIQUETA_DATO:      if ((((ElementoEtiquetaDato)elemento).getEdicion() != null) && idElemento.equals(((ElementoEtiquetaDato)elemento).getEdicion().getId()))       dato=(ElementoEtiquetaDato)elemento;    break;}}}}return dato;}  }
class C{  public void disableRealtimeStepsNotify(){  checkConnection();  final List<BLEAction> list=new ArrayList<>();  list.add(new WriteAction(Profile.UUID_CHAR_CONTROL_POINT,Protocol.DISABLE_REALTIME_STEPS_NOTIFY));  queue(list);}  }
class C{  public boolean checkWritePermission(InetAddress address,String community){  if (alwaysAuthorized)   return (true);  PrincipalImpl p=new PrincipalImpl(address);  return acl.checkPermission(p,community,WRITE);}  }
class C{  public static Years years(int years){switch (years) {case 0:    return ZERO;case 1:  return ONE;case 2:return TWO;case 3:return THREE;case Integer.MAX_VALUE:return MAX_VALUE;case Integer.MIN_VALUE:return MIN_VALUE;default :return new Years(years);}}  }
class C{  public void stopStack(){  if (this.timer != null)   this.timer.cancel();  timer=null;  this.pendingTransactions.clear();  this.toExit=true;synchronized (this) {    this.notifyAll();  }synchronized (this.clientTransactionTable) {    clientTransactionTable.notifyAll();  }synchronized (this.messageProcessors) {    MessageProcessor[] processorList;    processorList=getMessageProcessors();    for (int processorIndex=0; processorIndex < processorList.length; processorIndex++) {      removeMessageProcessor(processorList[processorIndex]);    }    this.ioHandler.closeAll();  }  try {    Thread.sleep(1000);  } catch (  InterruptedException ex) {  }  this.clientTransactionTable.clear();  this.serverTransactionTable.clear();  this.dialogTable.clear();  this.serverLogger.closeLogFile();}  }
class C{  public DBException(Exception e){  super(e);  if (CLogMgt.isLevelFinest()) {    e.printStackTrace();  }}  }
class C{  public AStarSearch(IScore sf){  this.scoringFunction=sf;}  }
class C{  public static void save(final AbstractSQLProvider provider,final TraceList trace) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE00579: Provider argument can not be null");  Preconditions.checkNotNull(trace,"IE00580: List argument can not be null");  Preconditions.checkArgument(trace.inSameDatabase(provider),"IE00581: List is not part of this database");  final CConnection connection=provider.getConnection();  if (trace.getEventCount() != 0) {    saveEvents(connection,trace);    saveEventValues(connection,trace);  }}  }
class C{  public void detach(boolean keepalive){  this.pool.getRITracker().unregisterRegion(this,keepalive);  super.detach();}  }
class C{  public boolean isUpdateImports(){  return updateImports;}  }
class C{  public int compare(Object obj1,Object obj2){  int res=0;  ElementoGeograficoVO a=(ElementoGeograficoVO)obj1;  ElementoGeograficoVO b=(ElementoGeograficoVO)obj2;switch (tipoBusqueda) {case GestorGeograficos.PAIS:    res=a.getNamePais().compareTo(b.getNamePais());  break;case GestorGeograficos.PROVINCIA:res=a.getNameProvincia().compareTo(b.getNameProvincia());break;case GestorGeograficos.MUNICIPIO:res=a.getNameMunicipio().compareTo(b.getNameMunicipio());break;case GestorGeograficos.POBLACION:res=a.getNamePoblacion().compareTo(b.getNamePoblacion());break;}return res;}  }
class C{  public static final long waitForExpiryClockToChange(final LocalRegion cacheTimeMillisSource,final long baseTime){  long nowTime;  do {    Thread.yield();    nowTime=cacheTimeMillisSource.cacheTimeMillis();  } while ((nowTime - baseTime) <= 0L);  return nowTime;}  }
class C{  public void kickParticipant(String nickname,String reason) throws XMPPException {  changeRole(nickname,"none",reason);}  }
class C{  protected void internalSetIndex(int i){  id=i;}  }
class C{  protected boolean processQueryUsingParams(Message msg,Query query,String queryString,Set regionNames,long start,ServerCQ cqQuery,QueryOperationContext queryContext,ServerConnection servConn,boolean sendResults,Object[] params) throws IOException, InterruptedException {  ChunkedMessage queryResponseMsg=servConn.getQueryResponseMessage();  CacheServerStats stats=servConn.getCacheServerStats();  CachedRegionHelper crHelper=servConn.getCachedRegionHelper();{    long oldStart=start;    start=DistributionStats.getStatTime();    stats.incReadQueryRequestTime(start - oldStart);  }  if (servConn.getClientVersion().compareTo(Version.GFE_70) >= 0) {    ((DefaultQuery)query).setRemoteQuery(true);  }  try {    for (    Object regionName : regionNames) {      this.securityService.authorizeRegionRead(regionName.toString());    }    Object result=null;    if (params != null) {      result=query.execute(params);    } else {      result=query.execute();    }    Iterator itr=regionNames.iterator();    while (itr.hasNext()) {      String regionName=(String)itr.next();      if (crHelper.getRegion(regionName) == null) {        throw new RegionDestroyedException(LocalizedStrings.BaseCommand_REGION_DESTROYED_DURING_THE_EXECUTION_OF_THE_QUERY.toLocalizedString(),regionName);      }    }    AuthorizeRequestPP postAuthzRequest=servConn.getPostAuthzRequest();    if (postAuthzRequest != null) {      if (cqQuery == null) {        queryContext=postAuthzRequest.queryAuthorize(queryString,regionNames,result,queryContext,params);      } else {        queryContext=postAuthzRequest.executeCQAuthorize(cqQuery.getName(),queryString,regionNames,result,queryContext);      }      result=queryContext.getQueryResult();    }    if (result instanceof SelectResults) {      SelectResults selectResults=(SelectResults)result;      if (logger.isDebugEnabled()) {        logger.debug("Query Result size for : {} is {}",query.getQueryString(),selectResults.size());      }      CollectionType collectionType=null;      boolean sendCqResultsWithKey=true;      boolean isStructs=false;      boolean hasSerializedObjects=((DefaultQuery)query).isKeepSerialized();      if (logger.isDebugEnabled()) {        logger.debug("Query Result for :{} has serialized objects: {}",query.getQueryString(),hasSerializedObjects);      }      collectionType=selectResults.getCollectionType();      isStructs=collectionType.getElementType().isStructType();      if (cqQuery != null) {        sendCqResultsWithKey=sendCqResultsWithKey(servConn);        if (sendCqResultsWithKey) {          collectionType=new CollectionTypeImpl(Collection.class,new StructTypeImpl(new String[]{"key","value"}));          isStructs=collectionType.getElementType().isStructType();        }      }      int numberOfChunks=(int)Math.ceil(selectResults.size() * 1.0 / maximumChunkSize);      if (logger.isTraceEnabled()) {        logger.trace("{}: Query results size: {}: Entries in chunk: {}: Number of chunks: {}",servConn.getName(),selectResults.size(),maximumChunkSize,numberOfChunks);      }      long oldStart=start;      start=DistributionStats.getStatTime();      stats.incProcessQueryTime(start - oldStart);      if (sendResults) {        queryResponseMsg.setMessageType(MessageType.RESPONSE);        queryResponseMsg.setTransactionId(msg.getTransactionId());        queryResponseMsg.sendHeader();      }      if (sendResults && numberOfChunks == 0) {        if (logger.isTraceEnabled()) {          logger.trace("{}: Creating chunk: 0",servConn.getName());        }        writeQueryResponseChunk(new Object[0],collectionType,true,servConn);        if (logger.isDebugEnabled()) {          logger.debug("{}: Sent chunk (1 of 1) of query response for query {}",servConn.getName(),queryString);        }      } else {        if (hasSerializedObjects) {          sendResultsAsObjectPartList(numberOfChunks,servConn,selectResults.asList(),isStructs,collectionType,queryString,cqQuery,sendCqResultsWithKey,sendResults);        } else {          sendResultsAsObjectArray(selectResults,numberOfChunks,servConn,isStructs,collectionType,queryString,cqQuery,sendCqResultsWithKey,sendResults);        }      }      if (cqQuery != null) {        cqQuery.setCqResultsCacheInitialized();      }    } else     if (result instanceof Integer) {      if (sendResults) {        queryResponseMsg.setMessageType(MessageType.RESPONSE);        queryResponseMsg.setTransactionId(msg.getTransactionId());        queryResponseMsg.sendHeader();        writeQueryResponseChunk(result,null,true,servConn);      }    } else {      throw new QueryInvalidException(LocalizedStrings.BaseCommand_UNKNOWN_RESULT_TYPE_0.toLocalizedString(result.getClass()));    }    msg.clearParts();  } catch (  QueryInvalidException e) {    logger.warn(LocalizedMessage.create(LocalizedStrings.BaseCommand_UNEXPECTED_QUERYINVALIDEXCEPTION_WHILE_PROCESSING_QUERY_0,queryString),e);    QueryInvalidException qie=new QueryInvalidException(LocalizedStrings.BaseCommand_0_QUERYSTRING_IS_1.toLocalizedString(new Object[]{e.getLocalizedMessage(),queryString}));    writeQueryResponseException(msg,qie,false,servConn);    return false;  }catch (  DistributedSystemDisconnectedException se) {    if (msg != null && logger.isDebugEnabled()) {      logger.debug("{}: ignoring message of type {} from client {} because shutdown occurred during message processing.",servConn.getName(),MessageType.getString(msg.getMessageType()),servConn.getProxyID());    }    servConn.setFlagProcessMessagesAsFalse();    return false;  }catch (  Exception e) {    checkForInterrupt(servConn,e);    DefaultQuery defaultQuery=(DefaultQuery)query;    if ((defaultQuery).isCanceled()) {      e=new QueryException(defaultQuery.getQueryCanceledException().getMessage(),e.getCause());    }    writeQueryResponseException(msg,e,false,servConn);    return false;  } finally {  }  if (logger.isDebugEnabled()) {    logger.debug("{}: Sent query response for query {}",servConn.getName(),queryString);  }  stats.incWriteQueryResponseTime(DistributionStats.getStatTime() - start);  return true;}  }
class C{  public static void validateResalePermission(String productId,ServiceStatus status) throws ServiceStateException {  if (status == null) {    throw new NullPointerException("status is not allowed to be null");  }  if (status == ServiceStatus.DELETED) {    String expected="[" + ServiceStatus.INACTIVE.name() + ", "+ ServiceStatus.SUSPENDED.name()+ "]";    ServiceStateException e=new ServiceStateException(status,expected,productId);    logger.logWarn(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.WARN_INVALID_SERVICE_STATUS,expected,status.name(),productId);    throw e;  }}  }
class C{  public boolean canWrite(){  if (_stream != null)   return _stream.canWrite(); else   return false;}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  public static int[] sort(int[] array){  int[] index=new int[array.length];  int[] newIndex=new int[array.length];  int[] helpIndex;  int numEqual;  for (int i=0; i < index.length; i++) {    index[i]=i;  }  quickSort(array,index,0,array.length - 1);  int i=0;  while (i < index.length) {    numEqual=1;    for (int j=i + 1; ((j < index.length) && (array[index[i]] == array[index[j]])); j++) {      numEqual++;    }    if (numEqual > 1) {      helpIndex=new int[numEqual];      for (int j=0; j < numEqual; j++) {        helpIndex[j]=i + j;      }      quickSort(index,helpIndex,0,numEqual - 1);      for (int j=0; j < numEqual; j++) {        newIndex[i + j]=index[helpIndex[j]];      }      i+=numEqual;    } else {      newIndex[i]=index[i];      i++;    }  }  return newIndex;}  }
class C{  public void testSloppyPhraseRelativePositions() throws Exception {  Term t1=randomTerm();  Term t2=randomTerm();  PhraseQuery q1=new PhraseQuery(2,t1.field(),t1.bytes(),t2.bytes());  PhraseQuery.Builder builder=new PhraseQuery.Builder();  builder.add(t1,10000);  builder.add(t2,10001);  builder.setSlop(2);  PhraseQuery q2=builder.build();  assertSameScores(q1,q2);}  }
class C{  public WFG4(int k,int l,int M){  super(k,l,M);}  }
class C{  public FieldAccessor newFieldAccessor(Field field,boolean override){  checkInitted();  return UnsafeFieldAccessorFactory.newFieldAccessor(field,override);}  }
class C{  void writeNormalizedChars(char ch[],int start,int length,boolean isCData,boolean useSystemLineSeparator) throws IOException, org.xml.sax.SAXException {  final java.io.Writer writer=m_writer;  int end=start + length;  for (int i=start; i < end; i++) {    char c=ch[i];    if (CharInfo.S_LINEFEED == c && useSystemLineSeparator) {      writer.write(m_lineSep,0,m_lineSepLen);    } else     if (isCData && (!escapingNotNeeded(c))) {      if (m_cdataTagOpen)       closeCDATA();      if (Encodings.isHighUTF16Surrogate(c)) {        writeUTF16Surrogate(c,ch,i,end);        i++;      } else {        writer.write("&#");        String intStr=Integer.toString((int)c);        writer.write(intStr);        writer.write(';');      }    } else     if (isCData && ((i < (end - 2)) && (']' == c) && (']' == ch[i + 1])&& ('>' == ch[i + 2]))) {      writer.write(CDATA_CONTINUE);      i+=2;    } else {      if (escapingNotNeeded(c)) {        if (isCData && !m_cdataTagOpen) {          writer.write(CDATA_DELIMITER_OPEN);          m_cdataTagOpen=true;        }        writer.write(c);      } else       if (Encodings.isHighUTF16Surrogate(c)) {        if (m_cdataTagOpen)         closeCDATA();        writeUTF16Surrogate(c,ch,i,end);        i++;      } else {        if (m_cdataTagOpen)         closeCDATA();        writer.write("&#");        String intStr=Integer.toString((int)c);        writer.write(intStr);        writer.write(';');      }    }  }}  }
class C{  public static SendPingResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  SendPingResponseE object=new SendPingResponseE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","sendPingResponse").equals(reader.getName())) {          object.setSendPingResponse(org.oscm.xsd.SendPingResponse.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public boolean isSSL(){  return _isSSL;}  }
class C{  public void replaceAttributeAt(Attribute att,int position){  if ((position < 0) || (position > m_Attributes.size())) {    throw new IllegalArgumentException("Index out of range");  }  if (!att.name().equals(m_Attributes.get(position).name())) {    Attribute candidate=attribute(att.name());    if ((candidate != null) && (position != candidate.index())) {      throw new IllegalArgumentException("Attribute name '" + att.name() + "' already in use at position #"+ attribute(att.name()).index());    }  }  att=(Attribute)att.copy();  att.setIndex(position);  ArrayList<Attribute> newList=new ArrayList<Attribute>(m_Attributes.size());  newList.addAll(m_Attributes.subList(0,position));  newList.add(att);  newList.addAll(m_Attributes.subList(position + 1,m_Attributes.size()));  m_Attributes=newList;  for (int i=0; i < numInstances(); i++) {    instance(i).setDataset(null);    instance(i).setMissing(position);    instance(i).setDataset(this);  }  if (m_ClassIndex >= position) {    m_ClassIndex++;  }}  }
class C{  public NotificationChain basicSetIfStmt(Statement newIfStmt,NotificationChain msgs){  Statement oldIfStmt=ifStmt;  ifStmt=newIfStmt;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.IF_STATEMENT__IF_STMT,oldIfStmt,newIfStmt);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public final void sendMessage(int what,int arg1,int arg2,Object obj){  SmHandler smh=mSmHandler;  if (smh == null)   return;  smh.sendMessage(obtainMessage(what,arg1,arg2,obj));}  }
