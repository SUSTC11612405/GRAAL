class C{  public void generate(Queue<Pair<Env<AttrContext>,JCClassDecl>> queue){  generate(queue,null);}  }
class C{  @Override public int hashCode(){  return subconditions.hashCode() - operator.hashCode();}  }
class C{  public URLConnection openConnection(Proxy proxy) throws IOException {  if (proxy == null) {    throw new IllegalArgumentException("proxy == null");  }  return streamHandler.openConnection(this,proxy);}  }
class C{  public MoneyFlowIndexItem(RegularTimePeriod period,BigDecimal moneyFlowIndex){  super(period,new MoneyFlowIndex(moneyFlowIndex));}  }
class C{  @Override protected void initListeners(){}  }
class C{  public static long sum(ByteBuffer buffer,int offset,int length){  long sum=0;  for (int i=offset; i < offset + length; i++)   sum+=buffer.get(i);  return sum;}  }
class C{  public String cancelPreview(){  setShowConfirm(false);  return null;}  }
class C{  public int indexOf(Object node){  if (node == null || !(node instanceof GraphicsNode)) {    return -1;  }  if (((GraphicsNode)node).getParent() == this) {    int iCount=count;    GraphicsNode[] workList=children;    for (int i=0; i < iCount; i++) {      if (node == workList[i]) {        return i;      }    }  }  return -1;}  }
class C{  public void removePort(){  if (hostPort != null)   hostPort.removePort();}  }
class C{  public int read(byte[] out_buffer,int buff_offset,int count){  count=readLimit(count);  if (count > 0) {    readOp(out_buffer,buff_offset,count,array,read_pos,array.length);    read_pos=(read_pos + count) % array.length;    buffered-=count;  }  return count;}  }
class C{  public boolean atEnd(){  return currentToken.length() == 0;}  }
class C{  public InstructionGraphNode(final ReilInstruction instruction){  Preconditions.checkNotNull(instruction,"Error: Instruction argument can not be null");  this.instruction=instruction;}  }
class C{  public void emergencyClose(){  if (stopped) {    return;  }  stopped=true;  try {    if (channel != null) {      channel.close();    } else {      if (socket != null) {        socket.close();      }    }  } catch (  IOException e) {  }  ConnectionTable.emergencyClose();  socket=null;  thread=null;  conTable=null;}  }
class C{  private void removeAcked(ArrayList<RecordInfo> acks){  for (  RecordInfo info : acks) {    AckDescribe ack=(AckDescribe)DescribeJournal.newObjectEncoding(info,null);    HashMap<Long,ReferenceDescribe> referenceDescribeHashMap=messageRefs.get(info.id);    referenceDescribeHashMap.remove(ack.refEncoding.queueID);    if (referenceDescribeHashMap.size() == 0) {      messages.remove(info.id);      messageRefs.remove(info.id);    }  }}  }
class C{  public static byte[] toArray(final List<Byte> list){  final byte[] output=new byte[list.size()];  for (int i=0; i < output.length; i++) {    output[i]=list.get(i);  }  return output;}  }
class C{  public TemplateReaderWriter(){}  }
class C{  public Kursawe(int numberOfVariables,double lowerBound,double upperBound){  super(numberOfVariables,2);  this.lowerBound=lowerBound;  this.upperBound=upperBound;}  }
class C{  private static String printThreadDump(Map<Thread,StackTraceElement[]> map){  StringWriter stringWriter=new StringWriter();  PrintWriter printWriter=new PrintWriter(stringWriter);  for (  Map.Entry<Thread,StackTraceElement[]> entry : map.entrySet()) {    Thread t=entry.getKey();    StackTraceElement elements[]=entry.getValue();    printWriter.println((new StringBuilder()).append(t));    printStackTrace(printWriter,elements);    printWriter.println();  }  return stringWriter.toString();}  }
class C{  static WifiP2pDnsSdServiceResponse newInstance(int status,int transId,WifiP2pDevice dev,byte[] data){  if (status != WifiP2pServiceResponse.Status.SUCCESS) {    return new WifiP2pDnsSdServiceResponse(status,transId,dev,null);  }  try {    return new WifiP2pDnsSdServiceResponse(status,transId,dev,data);  } catch (  IllegalArgumentException e) {    e.printStackTrace();  }  return null;}  }
class C{  public Cursor rawQuery(String sql,String[] selectionArgs){  return dbOpenHelper.getReadableDatabase().rawQuery(sql,selectionArgs);}  }
class C{  public PrintGCStat(MBeanServerConnection server) throws IOException {  this.rmbean=newPlatformMXBeanProxy(server,RUNTIME_MXBEAN_NAME,RuntimeMXBean.class);  this.mmbean=newPlatformMXBeanProxy(server,MEMORY_MXBEAN_NAME,MemoryMXBean.class);  ObjectName poolName=null;  ObjectName gcName=null;  try {    poolName=new ObjectName(MEMORY_POOL_MXBEAN_DOMAIN_TYPE + ",*");    gcName=new ObjectName(GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE + ",*");  } catch (  MalformedObjectNameException e) {    assert (false);  }  Set<ObjectName> mbeans=server.queryNames(poolName,null);  if (mbeans != null) {    pools=new ArrayList<MemoryPoolMXBean>();    for (    ObjectName objName : mbeans) {      MemoryPoolMXBean p=newPlatformMXBeanProxy(server,objName.getCanonicalName(),MemoryPoolMXBean.class);      pools.add(p);    }  }  mbeans=server.queryNames(gcName,null);  if (mbeans != null) {    gcmbeans=new ArrayList<GarbageCollectorMXBean>();    for (    ObjectName objName : mbeans) {      GarbageCollectorMXBean gc=newPlatformMXBeanProxy(server,objName.getCanonicalName(),GarbageCollectorMXBean.class);      gcmbeans.add(gc);    }  }}  }
class C{  private void traverseConstituents(JCas jcas,Annotation currAnno,int parent_rankPre){  Constituent c;  int currNodeId=nodeId;  int rankPre=rank;  if (currAnno == null) {    return;  }  nodeId++;  rank++;  if (currAnno instanceof Token) {    Token t=(Token)currAnno;    int pos=selectCovered(jcas,Token.class,0,t.getBegin()).size();    writeToFile("node",currNodeId,textId,documentId,"token_merged","tok_" + currNodeId,t.getBegin(),t.getEnd(),pos,"true",t.getCoveredText());    if (writePos && (t.getPos() != null)) {      writeToFile("node_annotation",currNodeId,"token_merged","pos",t.getPos().getPosValue());    }    if (writeLemma && (t.getLemma() != null)) {      writeToFile("node_annotation",currNodeId,"token_merged","lemma",t.getLemma().getValue());    }    nodes.put((Token)currAnno,currNodeId);    writeToFile("rank",rankPre,rank,currNodeId,componentId,(parent_rankPre >= 0 ? parent_rankPre : "NULL"));    writeToFile("edge_annotation",rankPre,"tiger","func","SF (T)");  } else {    if (!(currAnno instanceof Constituent)) {      return;    }    c=(Constituent)currAnno;    writeToFile("node",currNodeId,textId,documentId,"tiger","const_" + currNodeId,c.getBegin(),c.getEnd(),"NULL","true","NULL");    writeToFile("node_annotation",currNodeId,"tiger","cat",c.getConstituentType());    FSArray children=c.getChildren();    for (int i=0; i < children.size(); i++) {      traverseConstituents(jcas,c.getChildren(i),rankPre);    }    writeToFile("component",componentId,"d","tiger","edge");    writeToFile("rank",rankPre,rank,currNodeId,componentId,(parent_rankPre >= 0 ? parent_rankPre : "NULL"));    String synFunc=c.getSyntacticFunction();    if (synFunc == null) {      synFunc=" ";    }    writeToFile("edge_annotation",rankPre,"tiger","func",synFunc);    componentId++;  }  rank++;}  }
class C{  public boolean isLoaded(){  return m_project.isLoaded();}  }
class C{  void ok() throws IOException {  writeLine("ok");}  }
class C{  @NonNull public static Animator rotateBy(float rotation,float duration,@Nullable Interpolator interpolator){  return rotate(rotation,duration,interpolator,ActionType.ROTATE_BY);}  }
class C{  public static void println(short x){  out.println(x);}  }
class C{  public void addArchiveFile(String name,File file){  files.put(name,new LocalFile(file));}  }
class C{  public boolean isDynamicDocument(Document doc){  return BaseScriptingEnvironment.isDynamicDocument(this,doc);}  }
class C{  private void moveConnectionTo(Connection conn,int newX,int newY){  if (conn.getPosition().equals(newX,newY)) {    return;  }  if (conn.inDragMode()) {    conn.setPosition(newX,newY);  } else {    removeConnection(conn);    conn.setPosition(newX,newY);    addConnection(conn);  }}  }
class C{  public String lambdaTipText(){  return "Penalizes non-continuous subsequence matches, from (0,1)";}  }
class C{  public void projectionChanged(ProjectionEvent e){  omgraphics.project(e.getProjection(),true);  repaint();}  }
class C{  protected double objectiveFunction(double[] x){  double nll=0;  int dim=m_NumPredictors + 1;  for (int i=0; i < cls.length; i++) {    double[] exp=new double[m_NumClasses - 1];    int index;    for (int offset=0; offset < m_NumClasses - 1; offset++) {      index=offset * dim;      for (int j=0; j < dim; j++) {        exp[offset]+=m_Data[i][j] * x[index + j];      }    }    double max=exp[Utils.maxIndex(exp)];    double denom=Math.exp(-max);    double num;    if (cls[i] == m_NumClasses - 1) {      num=-max;    } else {      num=exp[cls[i]] - max;    }    for (int offset=0; offset < m_NumClasses - 1; offset++) {      denom+=Math.exp(exp[offset] - max);    }    nll-=weights[i] * (num - Math.log(denom));  }  for (int offset=0; offset < m_NumClasses - 1; offset++) {    for (int r=1; r < dim; r++) {      nll+=m_Ridge * x[offset * dim + r] * x[offset * dim + r];    }  }  return nll;}  }
class C{  public Vector<SiftFeature> run(int max_size){  Vector<SiftFeature> features=new Vector<SiftFeature>();  for (int o=0; o < octaves.length; ++o) {    if (octaves[o].width <= max_size && octaves[o].height <= max_size) {      Vector<SiftFeature> more=runOctave(o);      features.addAll(more);    }  }  return features;}  }
class C{  private void pushCompletionOnMemberAccessOnExpressionStack(boolean isSuperAccess){  char[] source=this.identifierStack[this.identifierPtr];  long pos=this.identifierPositionStack[this.identifierPtr--];  CompletionOnMemberAccess fr=new CompletionOnMemberAccess(source,pos,isInsideAnnotation());  this.assistNode=fr;  this.lastCheckPoint=fr.sourceEnd + 1;  this.identifierLengthPtr--;  if (isSuperAccess) {    fr.sourceStart=this.intStack[this.intPtr--];    fr.receiver=new SuperReference(fr.sourceStart,this.endPosition);    pushOnExpressionStack(fr);  } else {    if ((fr.receiver=this.expressionStack[this.expressionPtr]).isThis()) {      fr.sourceStart=fr.receiver.sourceStart;    }    this.expressionStack[this.expressionPtr]=fr;  }}  }
class C{  public static Date parseDateStrictly(final String str,final String... parsePatterns) throws ParseException {  return parseDateStrictly(str,null,parsePatterns);}  }
class C{  public void fatal(String trace){  printTrace(trace,FATAL_LEVEL);}  }
class C{  public static void toast(final Context context,final String message,final int displayTime,final int severity){  toast(context,message,displayTime,severity,null);}  }
class C{  public void checkJvmThreadContentionMonitoring(EnumJvmThreadContentionMonitoring x) throws SnmpStatusException {  if (JvmThreadContentionMonitoringUnsupported.intValue() == x.intValue()) {    log.debug("checkJvmThreadContentionMonitoring","Try to set to illegal unsupported value");    throw new SnmpStatusException(SnmpDefinitions.snmpRspWrongValue);  }  if ((JvmThreadContentionMonitoringEnabled.intValue() == x.intValue()) || (JvmThreadContentionMonitoringDisabled.intValue() == x.intValue())) {    ThreadMXBean mbean=getThreadMXBean();    if (mbean.isThreadContentionMonitoringSupported())     return;    log.debug("checkJvmThreadContentionMonitoring","Unsupported operation, can't set state");    throw new SnmpStatusException(SnmpDefinitions.snmpRspInconsistentValue);  }  log.debug("checkJvmThreadContentionMonitoring","Try to set to unknown value");  throw new SnmpStatusException(SnmpDefinitions.snmpRspWrongValue);}  }
class C{  @Override public void releaseChannel(TunerChannelSource source){  removeListener((Listener<ComplexBuffer>)source);  if (source != null) {    getController().releaseChannel(source);  }}  }
class C{  public double errorValue(boolean calculate){  if (!Double.isNaN(m_unitValue) && Double.isNaN(m_unitError) && calculate) {    m_unitError=m_methods.errorValue(this);  }  return m_unitError;}  }
class C{  private String backCompatNameToDisplayName(String queryName){  if (queryName.indexOf((char)0x00ab) >= 0) {    queryName=queryName.substring(queryName.indexOf((char)0x00ab) + 1);    queryName=StringUtil.replace(queryName,new String(new char[]{0x00bb,' '}),"\\");    queryName=queryName.replace((char)0x2044,'\\');  }  return queryName;}  }
class C{  public void pad(int align){  if (align <= 0)   return;  while ((position % align) != 0)   put(0);}  }
class C{  public boolean next() throws Exception {  if (m_NumGenerated >= m_NumIterations) {    return false;  }  if (m_ZeroR != null) {    return false;  }  double previousLoglikelihood=m_logLikelihood;  performIteration(m_trainYs,m_trainFs,m_probs,m_data,m_sumOfWeights);  m_logLikelihood=logLikelihood(m_trainYs,m_probs);  if (m_Debug) {    System.err.println("Avg. log-likelihood: " + m_logLikelihood);  }  if (Math.abs(previousLoglikelihood - m_logLikelihood) < m_Precision) {    return false;  }  return true;}  }
class C{  private void currentMove(Coords dest){  if (dest != null) {    if (gear == GEAR_TURN) {      cmd.rotatePathfinder(cmd.getFinalCoords().direction(dest),false);    } else     if (gear == GEAR_LAND || gear == GEAR_JUMP) {      cmd.findPathTo(dest,MoveStepType.FORWARDS);    } else     if (gear == GEAR_BACKUP) {      cmd.findPathTo(dest,MoveStepType.BACKWARDS);    } else     if (gear == GEAR_CHARGE) {      cmd.findPathTo(dest,MoveStepType.CHARGE);    } else     if (gear == GEAR_DFA) {      cmd.findPathTo(dest,MoveStepType.DFA);    } else     if (gear == GEAR_SWIM) {      cmd.findPathTo(dest,MoveStepType.SWIM);    }  }}  }
class C{  public Asn1Exception(Throwable causeThrowable){  super(causeThrowable);}  }
class C{  public void valueChanged(TreeSelectionEvent e){  Object obj=_tree.getLastSelectedPathComponent();  if (obj instanceof OptionsTreeNode) {    OptionsTreeNode node=(OptionsTreeNode)obj;    if (node.isLeaf())     OptionsMediator.instance().handleSelection(node); else {      _tree.expandPath(new TreePath(node.getPath()));      OptionsMediator.instance().handleSelection((OptionsTreeNode)node.getFirstChild());    }  }}  }
class C{  protected void readResponse(InputStream input) throws IOException {  if (isKilled()) {    return;  }  if (destinationFile != null) {    OutputStream o=FileSystemStorage.getInstance().openOutputStream(destinationFile);    Util.copy(input,o);    Util.cleanup(o);    if (isKilled()) {      FileSystemStorage.getInstance().delete(destinationFile);    }  } else {    if (destinationStorage != null) {      OutputStream o=Storage.getInstance().createOutputStream(destinationStorage);      Util.copy(input,o);      Util.cleanup(o);      if (isKilled()) {        Storage.getInstance().deleteStorageFile(destinationStorage);      }    } else {      data=Util.readInputStream(input);    }  }  if (hasResponseListeners() && !isKilled()) {    fireResponseListener(new NetworkEvent(this,data));  }}  }
class C{  @Override public void resolve(DeserializationContext ctxt) throws JsonMappingException {  super.resolve(ctxt);  if (_externalTypeIdHandler != null || _unwrappedPropertyHandler != null) {    return;  }  int len=_orderedPropertyNames.length;  ArrayList<SettableBeanProperty> props=new ArrayList<SettableBeanProperty>(len);  int i=0;  for (; i < len; ++i) {    SettableBeanProperty prop=_beanProperties.find(_orderedPropertyNames[i].toString());    if (prop == null) {      break;    }    props.add(prop);  }  if (i == 0) {    throw new IllegalStateException("Afterburner internal error: BeanDeserializer for " + _beanType + " has no properties that match expected ordering (should have "+ len+ ") -- can not create optimized deserializer");  }  _orderedProperties=props.toArray(new SettableBeanProperty[props.size()]);}  }
class C{  protected void doFreeOffHeapMemory(int numAllocations,int numDestroys){  assertTrue(numDestroys <= numAllocations);  Region region=getCache().getRegion(OFF_HEAP_REGION_NAME);  assertNotNull(region);  assertTrue(numDestroys <= region.size());  String key="KEY0";  Object value=key;  int destroyed=0;  while (destroyed < numDestroys) {    key="KEY" + ((int)(Math.random() * numAllocations));    value=region.get(key);    if (null != value) {      region.destroy(key);      ++destroyed;    }  }}  }
class C{  public static Pair<Integer,Integer> min(int[] array){  int min=Integer.MAX_VALUE;  int argMin=-1;  int id=0;  for (  int d : array) {    if (d < min) {      min=d;      argMin=id;    }    id++;  }  return new Pair<>(argMin,min);}  }
class C{  private static void echo(IgniteCheckedException e){  assert e != null;  System.err.println(e);}  }
class C{  private void selectClicked(MouseEvent e){  int row=table.rowAtPoint(e.getPoint());  if (row != -1 && !table.isRowSelected(row)) {    table.getSelectionModel().setSelectionInterval(row,row);  }}  }
class C{  public LinkedList(Collection<? extends E> c){  this();  addAll(c);}  }
class C{  public void testBug71038() throws Exception {  Properties p=new Properties();  p.setProperty("useSSL","false");  p.setProperty("detectCustomCollations","false");  p.setProperty("statementInterceptors",Bug71038StatementInterceptor.class.getName());  MySQLConnection c=(MySQLConnection)getConnectionWithProps(p);  Bug71038StatementInterceptor si=(Bug71038StatementInterceptor)c.getStatementInterceptorsInstances().get(0);  assertTrue("SHOW COLLATION was issued when detectCustomCollations=false",si.cnt == 0);  c.close();  p.setProperty("detectCustomCollations","true");  p.setProperty("statementInterceptors",Bug71038StatementInterceptor.class.getName());  c=(MySQLConnection)getConnectionWithProps(p);  si=(Bug71038StatementInterceptor)c.getStatementInterceptorsInstances().get(0);  assertTrue("SHOW COLLATION wasn't issued when detectCustomCollations=true",si.cnt > 0);  c.close();}  }
class C{  private void broadcastOnUpdate(Integer value){  for (  MapDownloadListener listener : mapDownloadListeners) {    listener.progressUpdate(value);  }}  }
class C{  public static Network createTriangularNetwork(){  MutableScenario scenario=(MutableScenario)ScenarioUtils.createScenario(ConfigUtils.createConfig());  Network network=(Network)scenario.getNetwork();  Node node1=NetworkUtils.createAndAddNode(network,Id.create(1,Node.class),new Coord((double)0,(double)0));  Node node2=NetworkUtils.createAndAddNode(network,Id.create(2,Node.class),new Coord((double)50,(double)100));  Node node3=NetworkUtils.createAndAddNode(network,Id.create(3,Node.class),new Coord((double)50,(double)0));  Node node4=NetworkUtils.createAndAddNode(network,Id.create(4,Node.class),new Coord((double)100,(double)0));  final Node fromNode=node1;  final Node toNode=node2;  NetworkUtils.createAndAddLink(network,Id.create(1,Link.class),fromNode,toNode,500.0,10.0,3600.0,(double)1);  final Node fromNode1=node2;  final Node toNode1=node4;  NetworkUtils.createAndAddLink(network,Id.create(2,Link.class),fromNode1,toNode1,500.0,10.0,3600.0,(double)1);  final Node fromNode2=node1;  final Node toNode2=node3;  NetworkUtils.createAndAddLink(network,Id.create(3,Link.class),fromNode2,toNode2,50.0,0.1,3600.0,(double)1);  final Node fromNode3=node3;  final Node toNode3=node4;  NetworkUtils.createAndAddLink(network,Id.create(4,Link.class),fromNode3,toNode3,50.0,0.1,3600.0,(double)1);  return network;}  }
class C{  public boolean isDouble(String key){  Object val=get(key);  return val instanceof Double;}  }
class C{  @Deprecated public boolean supportsSwing(){  return isSwingAvailable;}  }
class C{  public void stop(){  if (sLogger.isActivated()) {    sLogger.info("Stop call monitoring");  }  if (mOutgoingCallReceiver != null) {    mCtx.unregisterReceiver(mOutgoingCallReceiver);    mOutgoingCallReceiver=null;  }  mPhonyManager.listen(listener,PhoneStateListener.LISTEN_NONE);}  }
class C{  public double[] computeLocalOfPreviousObservations() throws Exception {  double[] local=miKernel.computeLocalOfPreviousObservations();  lastAverage=miKernel.getLastAverage();  if (!addedMoreThanOneObservationSet) {    double[] localsToReturn=new double[local.length + k];    System.arraycopy(local,0,localsToReturn,k,local.length);    return localsToReturn;  } else {    return local;  }}  }
class C{  @Override protected final boolean canCompact(){  return true;}  }
class C{  public void invalidate(){  MOD_COUNT++;}  }
class C{  public static String collectionToDelimitedString(Iterable<?> coll,String delim){  return collectionToDelimitedString(coll,delim,"","");}  }
class C{  private Entry checkTag(Entry e,byte tag) throws ClassFormatException {  if (e == null || !e.tagMatches(tag)) {    String where=(inPos == constantPoolLimit ? " in constant pool" : " at pos: " + inPos);    String got=(e == null ? "null CP index" : "type=" + ConstantPool.tagName(e.tag));    throw new ClassFormatException("Bad constant, expected type=" + ConstantPool.tagName(tag) + " got "+ got+ ", in File: "+ cls.file.nameString+ where);  }  return e;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"PLD");  long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  instructions.add(ReilHelpers.createUnknown(baseOffset++));}  }
class C{  public static boolean isExternalStorageRemovable(){  return Environment.isExternalStorageRemovable();}  }
class C{  public VersionedDataOutputStream(OutputStream out,Version version){  super(out);  this.version=version;}  }
class C{  public static JSONNode toJSON(Instances inst){  JSONNode result;  JSONNode header;  JSONNode atts;  JSONNode data;  int i;  result=new JSONNode();  header=result.addObject(HEADER);  header.addPrimitive(RELATION,inst.relationName());  atts=header.addArray(ATTRIBUTES);  for (i=0; i < inst.numAttributes(); i++)   atts.add(toJSON(inst,inst.attribute(i)));  data=result.addArray(DATA);  for (i=0; i < inst.numInstances(); i++)   data.add(toJSON(inst.instance(i)));  return result;}  }
class C{  public TurtleWriter(Writer writer){  this.writer=new IndentingWriter(writer);  namespaceTable=new LinkedHashMap<String,String>();  writingStarted=false;  statementClosed=true;  lastWrittenSubject=null;  lastWrittenPredicate=null;}  }
class C{  private void scanFractionAndSuffix(int pos){  radix=10;  scanFraction(pos);  if (reader.ch == 'f' || reader.ch == 'F') {    reader.putChar(true);    tk=TokenKind.FLOATLITERAL;  } else {    if (reader.ch == 'd' || reader.ch == 'D') {      reader.putChar(true);    }    tk=TokenKind.DOUBLELITERAL;  }}  }
class C{  public static Path categoriesLineFile(Path f){  Path dir=f.toAbsolutePath().getParent();  String categoriesName="categories-" + f.getFileName();  return dir.resolve(categoriesName);}  }
class C{  public PcMaxRunner(Graph graph,Parameters params){  super(graph,params);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entityList;  Entity entityNode;  String entityName;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  entityList=docType.getEntities();  assertNotNull("entitiesNotNull",entityList);  entityNode=(Entity)entityList.getNamedItem("ent1");  entityName=entityNode.getNodeName();  assertEquals("entityGetEntityNameAssert","ent1",entityName);}  }
class C{  public static int countShortestRow(final double[][] data){  int minLength=0;  for (  double[] row : data) {    if (row.length < minLength) {      minLength=row.length;    }  }  return minLength;}  }
class C{  public void addAdditionalAnswer(DNSIncoming in,DNSRecord rec) throws IOException {  MessageOutputStream record=new MessageOutputStream(512,this);  record.writeRecord(rec,0);  byte[] byteArray=record.toByteArray();  if (byteArray.length < this.availableSpace()) {    _additionals.add(rec);    _additionalsAnswersBytes.write(byteArray,0,byteArray.length);  } else {    throw new IOException("message full");  }}  }
class C{  public final void update(byte[] input) throws IllegalStateException {  if (!isInitMac) {    throw new IllegalStateException();  }  if (input != null) {    spiImpl.engineUpdate(input,0,input.length);  }}  }
class C{  private void action_Save(){  log.info("");  StringBuffer sb=new StringBuffer();  StringBuffer sql=new StringBuffer("SELECT C_ValidCombination_ID, Alias FROM C_ValidCombination WHERE ");  Object value=null;  if (s_AcctSchema.isHasAlias()) {    value=f_Alias.getValue().toString();    if (isEmpty(value) && f_Alias.isMandatory())     sb.append(Msg.translate(Env.getCtx(),"Alias")).append(", ");  }  MAcctSchemaElement[] elements=s_AcctSchema.getAcctSchemaElements();  for (int i=0; i < elements.length; i++) {    MAcctSchemaElement ase=elements[i];    String type=ase.getElementType();    if (type.equals(MAcctSchemaElement.ELEMENTTYPE_Organization)) {      value=f_AD_Org_ID.getValue();      sql.append("AD_Org_ID");      if (isEmpty(value))       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_Account)) {      value=f_Account_ID.getValue();      sql.append("Account_ID");      if (isEmpty(value))       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_SubAccount)) {      value=f_SubAcct_ID.getValue();      sql.append("C_SubAcct_ID");      if (isEmpty(value))       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_Product)) {      value=f_M_Product_ID.getValue();      sql.append("M_Product_ID");      if (isEmpty(value))       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_BPartner)) {      value=f_C_BPartner_ID.getValue();      sql.append("C_BPartner_ID");      if (isEmpty(value))       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_Campaign)) {      value=f_C_Campaign_ID.getValue();      sql.append("C_Campaign_ID");      if (isEmpty(value))       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_LocationFrom)) {      value=f_C_LocFrom_ID.getValue();      sql.append("C_LocFrom_ID");      if (isEmpty(value))       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_LocationTo)) {      value=f_C_LocTo_ID.getValue();      sql.append("C_LocTo_ID");      if (isEmpty(value))       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_Project)) {      value=f_C_Project_ID.getValue();      sql.append("C_Project_ID");      if (isEmpty(value))       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_SalesRegion)) {      value=f_C_SalesRegion_ID.getValue();      sql.append("C_SalesRegion_ID");      if (isEmpty(value))       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_OrgTrx)) {      value=f_AD_OrgTrx_ID.getValue();      sql.append("AD_OrgTrx_ID");      if (isEmpty(value))       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_Activity)) {      value=f_C_Activity_ID.getValue();      sql.append("C_Activity_ID");      if (isEmpty(value))       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_UserList1)) {      value=f_User1_ID.getValue();      sql.append("User1_ID");      if (isEmpty(value))       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_UserList2)) {      value=f_User2_ID.getValue();      sql.append("User2_ID");      if (isEmpty(value))       sql.append(" IS NULL AND "); else       sql.append("=").append(value).append(" AND ");    }    if (ase.isMandatory() && isEmpty(value))     sb.append(ase.getName()).append(", ");  }  if (sb.length() != 0) {    FDialog.error(m_WindowNo,this,"FillMandatory",sb.substring(0,sb.length() - 2));    return;  }  if (f_AD_Org_ID == null || f_AD_Org_ID.getValue() == null) {    FDialog.error(m_WindowNo,this,"FillMandatory",Msg.getElement(Env.getCtx(),"AD_Org_ID"));    return;  }  if (f_Account_ID == null || f_Account_ID.getValue() == null) {    FDialog.error(m_WindowNo,this,"FillMandatory",Msg.getElement(Env.getCtx(),"Account_ID"));    return;  }  sql.append("AD_Client_ID=? AND C_AcctSchema_ID=?");  log.fine("Check = " + sql.toString());  int IDvalue=0;  String Alias=null;  try {    PreparedStatement pstmt=DB.prepareStatement(sql.toString(),null);    pstmt.setInt(1,m_AD_Client_ID);    pstmt.setInt(2,s_AcctSchema.getC_AcctSchema_ID());    ResultSet rs=pstmt.executeQuery();    if (rs.next()) {      IDvalue=rs.getInt(1);      Alias=rs.getString(2);    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql.toString(),e);    IDvalue=0;  }  log.fine("ID=" + IDvalue + ", Alias="+ Alias);  if (Alias == null)   Alias="";  if (IDvalue != 0 && s_AcctSchema.isHasAlias() && !f_Alias.getValue().toString().equals(Alias)) {    sql=new StringBuffer("UPDATE C_ValidCombination SET Alias=");    if (f_Alias.getValue().toString().length() == 0)     sql.append("NULL"); else     sql.append("'").append(f_Alias.getValue()).append("'");    sql.append(" WHERE C_ValidCombination_ID=").append(IDvalue);    int i=0;    try {      java.sql.PreparedStatement stmt=DB.prepareStatement(sql.toString(),ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_UPDATABLE,null);      i=stmt.executeUpdate();      stmt.close();    } catch (    SQLException e) {      log.log(Level.SEVERE,sql.toString(),e);    }    if (i == 0)     FDialog.error(m_WindowNo,this,"AccountNotUpdated");  }  if (IDvalue != 0) {    loadInfo(IDvalue,s_AcctSchema.getC_AcctSchema_ID());    action_Find(false);    return;  }  log.config("New");  Alias=null;  if (f_Alias != null)   Alias=f_Alias.getValue().toString();  int C_SubAcct_ID=0;  if (f_SubAcct_ID != null && !isEmpty(f_SubAcct_ID.getValue()))   C_SubAcct_ID=((Integer)f_SubAcct_ID.getValue()).intValue();  int M_Product_ID=0;  if (f_M_Product_ID != null && !isEmpty(f_M_Product_ID.getValue()))   M_Product_ID=((Integer)f_M_Product_ID.getValue()).intValue();  int C_BPartner_ID=0;  if (f_C_BPartner_ID != null && !isEmpty(f_C_BPartner_ID.getValue()))   C_BPartner_ID=((Integer)f_C_BPartner_ID.getValue()).intValue();  int AD_OrgTrx_ID=0;  if (f_AD_OrgTrx_ID != null && !isEmpty(f_AD_OrgTrx_ID.getValue()))   AD_OrgTrx_ID=((Integer)f_AD_OrgTrx_ID.getValue()).intValue();  int C_LocFrom_ID=0;  if (f_C_LocFrom_ID != null && !isEmpty(f_C_LocFrom_ID.getValue()))   C_LocFrom_ID=((Integer)f_C_LocFrom_ID.getValue()).intValue();  int C_LocTo_ID=0;  if (f_C_LocTo_ID != null && !isEmpty(f_C_LocTo_ID.getValue()))   C_LocTo_ID=((Integer)f_C_LocTo_ID.getValue()).intValue();  int C_SRegion_ID=0;  if (f_C_SalesRegion_ID != null && !isEmpty(f_C_SalesRegion_ID.getValue()))   C_SRegion_ID=((Integer)f_C_SalesRegion_ID.getValue()).intValue();  int C_Project_ID=0;  if (f_C_Project_ID != null && !isEmpty(f_C_Project_ID.getValue()))   C_Project_ID=((Integer)f_C_Project_ID.getValue()).intValue();  int C_Campaign_ID=0;  if (f_C_Campaign_ID != null && !isEmpty(f_C_Campaign_ID.getValue()))   C_Campaign_ID=((Integer)f_C_Campaign_ID.getValue()).intValue();  int C_Activity_ID=0;  if (f_C_Activity_ID != null && !isEmpty(f_C_Activity_ID.getValue()))   C_Activity_ID=((Integer)f_C_Activity_ID.getValue()).intValue();  int User1_ID=0;  if (f_User1_ID != null && !isEmpty(f_User1_ID.getValue()))   User1_ID=((Integer)f_User1_ID.getValue()).intValue();  int User2_ID=0;  if (f_User2_ID != null && !isEmpty(f_User2_ID.getValue()))   User2_ID=((Integer)f_User2_ID.getValue()).intValue();  MAccount acct=MAccount.get(Env.getCtx(),m_AD_Client_ID,((Integer)f_AD_Org_ID.getValue()).intValue(),s_AcctSchema.getC_AcctSchema_ID(),((Integer)f_Account_ID.getValue()).intValue(),C_SubAcct_ID,M_Product_ID,C_BPartner_ID,AD_OrgTrx_ID,C_LocFrom_ID,C_LocTo_ID,C_SRegion_ID,C_Project_ID,C_Campaign_ID,C_Activity_ID,User1_ID,User2_ID,0,0,null);  if (acct != null && acct.get_ID() == 0)   acct.saveEx();  if (acct == null || acct.get_ID() == 0)   loadInfo(0,0); else {    if (Alias != null && Alias.length() > 0) {      acct.setAlias(Alias);      acct.saveEx();    }    loadInfo(acct.get_ID(),s_AcctSchema.getC_AcctSchema_ID());  }  action_Find(false);}  }
class C{  protected Cache createDynamicRegionCache(String testName,String connectionPoolName){  DynamicRegionFactory.get().open(new DynamicRegionFactory.Config(null,connectionPoolName,false,true));  org.apache.geode.test.dunit.LogWriterUtils.getLogWriter().info("CREATED IT");  Cache z=getCache();  return z;}  }
class C{  public String timerString(String message){  return timerString(message,this.getClass().getName());}  }
class C{  public static <T,PT extends Procedure<? super T>>void forEach(Iterable<T> iterable,ProcedureFactory<PT> procedureFactory,Combiner<PT> combiner,int batchSize){  FJIterate.forEach(iterable,procedureFactory,combiner,batchSize,FJIterate.FORK_JOIN_POOL);}  }
class C{  public static void init(){  server=SocketManager.register("TOAST_logger");  String pass=ToastConfiguration.Property.LOGGER_DELEGATE_PASSWORD.asString();  String algorithm=ToastConfiguration.Property.LOGGER_DELEGATE_ALGORITHM.asString();  if (pass != null && !pass.equals("")) {    if (algorithm != null && Security.HashType.match(algorithm) != null)     server.setPassword(pass,Security.HashType.match(algorithm)); else     server.setPassword(pass);  }  clients=new Vector<>();  LoggerDelegate instance=new LoggerDelegate();  server.callback(instance);  SysLogProxy.master.add(instance);  SysLogProxy.masterError.add(instance);}  }
class C{  protected void fireHistoricalDataComplete(Tradestrategy tradestrategy){  Object[] listeners=this.listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == BrokerChangeListener.class) {      ((BrokerChangeListener)listeners[i + 1]).historicalDataComplete(tradestrategy);    }  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:38.540 -0500",hash_original_method="6347D93E04E74669648A802B7921C1D5",hash_generated_method="4E7EA45BA0A36F9382B93B520D4AEA66") public WorkSource(){  mNum=0;}  }
class C{  public boolean hasParent(){  return parts.size() > 1;}  }
class C{  @Override public boolean isHeader(){  return super.isHeader() && isHeader(this.myHeader);}  }
class C{  public PluginInfoDialog(java.awt.Frame parent,boolean modal,PluginInfo pi){  super(parent,modal);  initComponents();  this.pi=pi;  lblName.setText(pi.plugin_name);  lblDescription.setText(pi.description);  lblStatus.setText(pi.stage);  lblAuthors.setText(StrUtils.parseParams("",pi.authors.toArray(),", "));  lblCategories.setText(StrUtils.parseParams("",pi.categories.toArray(),", "));  lblWebsite.setText(pi.link);  DefaultTableModel model=(DefaultTableModel)lstPluginInfo.getModel();  for (  PluginVersion v : pi.versions)   model.addRow(new Object[]{v.date,v.version,v.filename,StrUtils.parseParams("",v.game_versions.toArray(),", "),v.type});  lstPluginInfo.updateUI();}  }
class C{  public static org.oscm.internal.vo.VOCatalogEntry convertToUp(org.oscm.vo.VOCatalogEntry oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOCatalogEntry newVO=new org.oscm.internal.vo.VOCatalogEntry();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setMarketplace(convertToUp(oldVO.getMarketplace()));  newVO.setAnonymousVisible(oldVO.isAnonymousVisible());  newVO.setCategories(convertToUpVOCategory(oldVO.getCategories()));  newVO.setVisibleInCatalog(oldVO.isVisibleInCatalog());  newVO.setService(convertToUp(oldVO.getService()));  return newVO;}  }
class C{  protected AbstractSet(){  super();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newChild;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node oldChild;  Node appendedChild;  doc=(Document)load("hc_staff",true);  newChild=doc.getDocumentElement();  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);{    boolean success=false;    try {      appendedChild=employeeNode.appendChild(newChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  public synchronized <K1,V1>MapBuilder<K1,V1> cloneBuilder(){  MapBuilder<K1,V1> b=new MapBuilder<K1,V1>();  checkMemoryManager();  b.memoryManager=this.memoryManager;  return b;}  }
class C{  static List<File> load(Context context,ApplicationInfo applicationInfo,File dexDir,boolean forceReload) throws IOException {  Log.i(TAG,"MultiDexExtractor.load(" + applicationInfo.sourceDir + ", "+ forceReload+ ")");  final File sourceApk=new File(applicationInfo.sourceDir);  File archive=new File(applicationInfo.sourceDir);  long currentCrc=getZipCrc(archive);  List<File> files;  if (!forceReload && !isModified(context,archive,currentCrc)) {    try {      files=loadExistingExtractions(context,sourceApk,dexDir);    } catch (    IOException ioe) {      Log.w(TAG,"Failed to reload existing extracted secondary dex files," + " falling back to fresh extraction",ioe);      files=performExtractions(sourceApk,dexDir);      putStoredApkInfo(context,getTimeStamp(sourceApk),currentCrc,files.size() + 1);    }  } else {    Log.i(TAG,"Detected that extraction must be performed.");    files=performExtractions(sourceApk,dexDir);    putStoredApkInfo(context,getTimeStamp(sourceApk),currentCrc,files.size() + 1);  }  Log.i(TAG,"load found " + files.size() + " secondary dex files");  return files;}  }
class C{  @Override public int hashCode(){  int hash=0;  if (typeMatching) {    hash|=1;  }  if (exactMatching) {    hash|=2;  }  if (similarMatching) {    hash|=4;  }  if (caseInsensitive) {    hash|=8;  }  if (jokerMatching) {    hash|=0x10;  }  return hash;}  }
class C{  @ApiMethod(httpMethod="GET") public final CollectionResponse<Registration> listDevices(@Named("count") final int count,final User user) throws UnauthorizedException {  EndpointUtil.throwIfNotAdmin(user);  List<Registration> records=ofy().load().type(Registration.class).limit(count).list();  return CollectionResponse.<Registration>builder().setItems(records).build();}  }
class C{  public boolean isSetSrcPartitions(){  return this.srcPartitions != null;}  }
class C{  public SVGFeGaussianBlurElementBridge(){}  }
class C{  public static TableDesc mockup(String tableName){  TableDesc mockup=new TableDesc();  mockup.setName(tableName);  return mockup;}  }
class C{  public void paintSplitPaneDividerBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  private static boolean evaluateLogicTuple(String value1,String operand,String value2){  if (value1 == null || operand == null || value2 == null)   return false;  BigDecimal value1bd=null;  BigDecimal value2bd=null;  try {    if (!value1.startsWith("'"))     value1bd=new BigDecimal(value1);    if (!value2.startsWith("'"))     value2bd=new BigDecimal(value2);  } catch (  Exception e) {    value1bd=null;    value2bd=null;  }  if (operand.equals("=")) {    if (value1bd != null && value2bd != null)     return value1bd.compareTo(value2bd) == 0;    return value1.compareTo(value2) == 0;  } else   if (operand.equals("<")) {    if (value1bd != null && value2bd != null)     return value1bd.compareTo(value2bd) < 0;    return value1.compareTo(value2) < 0;  } else   if (operand.equals(">")) {    if (value1bd != null && value2bd != null)     return value1bd.compareTo(value2bd) > 0;    return value1.compareTo(value2) > 0;  } else {    if (value1bd != null && value2bd != null)     return value1bd.compareTo(value2bd) != 0;    return value1.compareTo(value2) != 0;  }}  }
class C{  private static String createString(byte data[]){  StringBuilder sb=new StringBuilder();  for (int i=0; i < data.length; i++) {    if (data[i] == 0) {      break;    }    sb.append((char)data[i]);  }  String result=sb.toString();  return result;}  }
class C{  private boolean isContextual(Method method){  Class[] list=method.getParameterTypes();  if (list.length == 1) {    return Map.class.equals(list[0]);  }  return false;}  }
class C{  public void synchBits(){  bitBuf=0;  bitPos=0;}  }
class C{  private Injector createInjectorFor(final List<Class<? extends AbstractModule>> classes) throws InitializationError {  List<AbstractModule> modules=Lists.newArrayList();  for (  Class<? extends AbstractModule> clazz : classes) {    try {      modules.add(clazz.newInstance());    } catch (    InstantiationException|IllegalAccessException e) {      throw new IllegalStateException(e);    }  }  return Guice.createInjector(modules);}  }
class C{  @Override public UpdateRequest routing(String routing){  if (routing != null && routing.length() == 0) {    this.routing=null;  } else {    this.routing=routing;  }  return this;}  }
class C{  public static ClusterMetrics deserialize(byte[] data,int off){  ClusterMetricsSnapshot metrics=new ClusterMetricsSnapshot();  ByteBuffer buf=ByteBuffer.wrap(data,off,METRICS_SIZE);  metrics.setLastUpdateTime(U.currentTimeMillis());  metrics.setMaximumActiveJobs(buf.getInt());  metrics.setCurrentActiveJobs(buf.getInt());  metrics.setAverageActiveJobs(buf.getFloat());  metrics.setMaximumWaitingJobs(buf.getInt());  metrics.setCurrentWaitingJobs(buf.getInt());  metrics.setAverageWaitingJobs(buf.getFloat());  metrics.setMaximumRejectedJobs(buf.getInt());  metrics.setCurrentRejectedJobs(buf.getInt());  metrics.setAverageRejectedJobs(buf.getFloat());  metrics.setMaximumCancelledJobs(buf.getInt());  metrics.setCurrentCancelledJobs(buf.getInt());  metrics.setAverageCancelledJobs(buf.getFloat());  metrics.setTotalRejectedJobs(buf.getInt());  metrics.setTotalCancelledJobs(buf.getInt());  metrics.setTotalExecutedJobs(buf.getInt());  metrics.setMaximumJobWaitTime(buf.getLong());  metrics.setCurrentJobWaitTime(buf.getLong());  metrics.setAverageJobWaitTime(buf.getDouble());  metrics.setMaximumJobExecuteTime(buf.getLong());  metrics.setCurrentJobExecuteTime(buf.getLong());  metrics.setAverageJobExecuteTime(buf.getDouble());  metrics.setTotalExecutedTasks(buf.getInt());  metrics.setCurrentIdleTime(buf.getLong());  metrics.setTotalIdleTime(buf.getLong());  metrics.setAvailableProcessors(buf.getInt());  metrics.setCurrentCpuLoad(buf.getDouble());  metrics.setAverageCpuLoad(buf.getDouble());  metrics.setCurrentGcCpuLoad(buf.getDouble());  metrics.setHeapMemoryInitialized(buf.getLong());  metrics.setHeapMemoryUsed(buf.getLong());  metrics.setHeapMemoryCommitted(buf.getLong());  metrics.setHeapMemoryMaximum(buf.getLong());  metrics.setHeapMemoryTotal(buf.getLong());  metrics.setNonHeapMemoryInitialized(buf.getLong());  metrics.setNonHeapMemoryUsed(buf.getLong());  metrics.setNonHeapMemoryCommitted(buf.getLong());  metrics.setNonHeapMemoryMaximum(buf.getLong());  metrics.setNonHeapMemoryTotal(buf.getLong());  metrics.setStartTime(buf.getLong());  metrics.setNodeStartTime(buf.getLong());  metrics.setUpTime(buf.getLong());  metrics.setCurrentThreadCount(buf.getInt());  metrics.setMaximumThreadCount(buf.getInt());  metrics.setTotalStartedThreadCount(buf.getLong());  metrics.setCurrentDaemonThreadCount(buf.getInt());  metrics.setLastDataVersion(buf.getLong());  metrics.setSentMessagesCount(buf.getInt());  metrics.setSentBytesCount(buf.getLong());  metrics.setReceivedMessagesCount(buf.getInt());  metrics.setReceivedBytesCount(buf.getLong());  metrics.setOutboundMessagesQueueSize(buf.getInt());  metrics.setTotalNodes(buf.getInt());  return metrics;}  }
class C{  public JavaModelStatus(int code,IJavaElement element,IPath path){  this(code,new IJavaElement[]{element});  this.path=path;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:02.404 -0500",hash_original_method="4BE5AFBC6E7AF7109FE6D4429F8CEB8D",hash_generated_method="D1A4E670EEBDCB98A0A2CF76FD22C954") @DSVerified @DSSpec(DSCat.IO) protected void _connectAction_() throws IOException {  super._connectAction_();  _reader=new BufferedReader(new InputStreamReader(_input_,__DEFAULT_ENCODING));  _writer=new BufferedWriter(new OutputStreamWriter(_output_,__DEFAULT_ENCODING));  __getReply();}  }
class C{  protected void decodeParams() throws IOException {  if (params == null)   throw new IOException("DSA alg params are null");  if (params.tag != DerValue.tag_Sequence)   throw new IOException("DSA alg parsing error");  params.data.reset();  this.p=params.data.getBigInteger();  this.q=params.data.getBigInteger();  this.g=params.data.getBigInteger();  if (params.data.available() != 0)   throw new IOException("AlgIdDSA params, extra=" + params.data.available());}  }
class C{  private void createIndices() throws AdeException {}  }
class C{  public void quitarPermisosRol(String idRol,String[] permisoRol){  StringBuffer qual=new StringBuffer("WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID_ROL,idRol));  if (permisoRol != null)   qual.append(" AND ").append(DBUtils.generateInTokenField(CAMPO_PERM,permisoRol));  deleteVO(qual.toString(),TABLE_NAME);}  }
class C{  public SimpleLiveLocals(UnitGraph graph){  if (Options.v().time())   Timers.v().liveTimer.start();  if (Options.v().verbose())   G.v().out.println("[" + graph.getBody().getMethod().getName() + "]     Constructing SimpleLiveLocals...");  SimpleLiveLocalsAnalysis analysis=new SimpleLiveLocalsAnalysis(graph);  if (Options.v().time())   Timers.v().livePostTimer.start();{    unitToLocalsAfter=new HashMap<Unit,List>(graph.size() * 2 + 1,0.7f);    unitToLocalsBefore=new HashMap<Unit,List>(graph.size() * 2 + 1,0.7f);    Iterator unitIt=graph.iterator();    while (unitIt.hasNext()) {      Unit s=(Unit)unitIt.next();      FlowSet set=(FlowSet)analysis.getFlowBefore(s);      unitToLocalsBefore.put(s,Collections.unmodifiableList(set.toList()));      set=(FlowSet)analysis.getFlowAfter(s);      unitToLocalsAfter.put(s,Collections.unmodifiableList(set.toList()));    }  }  if (Options.v().time())   Timers.v().livePostTimer.end();  if (Options.v().time())   Timers.v().liveTimer.end();}  }
class C{  public static double correlation(double[] x,double[] y,int dataLength){  double c=0;  double meanX=mean(x,0,dataLength);  double meanY=mean(y,0,dataLength);  for (int t=0; t < dataLength; t++) {    c+=(x[t] - meanX) * (y[t] - meanY);  }  double covariance=c / (double)(dataLength - 1);  return covariance / stdDev(x,meanX,dataLength) / stdDev(y,meanY,dataLength);}  }
class C{  protected boolean heapifyDownComparator(final int ipos,Object cur){  int pos=ipos;  final int half=size >>> 1;  while (pos < half) {    int min=pos;    Object best=cur;    final int lchild=(pos << 1) + 1;    Object left=queue[lchild];    if (comparator.compare(best,left) > 0) {      min=lchild;      best=left;    }    final int rchild=lchild + 1;    if (rchild < size) {      Object right=queue[rchild];      if (comparator.compare(best,right) > 0) {        min=rchild;        best=right;      }    }    if (min == pos) {      break;    }    queue[pos]=best;    pos=min;  }  queue[pos]=cur;  return (pos != ipos);}  }
class C{  public UnsupportedOptionsException(){}  }
class C{  public void hleRescheduleCurrentThread(boolean doCallbacks){  SceKernelThreadInfo thread=currentThread;  if (doCallbacks) {    if (thread != null) {      thread.doCallbacks=doCallbacks;    }    checkCallbacks();  }  hleRescheduleCurrentThread();  if (currentThread == thread && doCallbacks) {    if (thread.isRunning()) {      thread.doCallbacks=false;    }  }}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;    framingRect=null;    framingRectInPreview=null;  }}  }
class C{  public Object read(InputNode node,Object value) throws Exception {  String name=node.getName();  String element=path.getElement(name);  Label label=elements.get(element);  Converter converter=label.getConverter(context);  return converter.read(node,value);}  }
class C{  private LogPolicy(){  addPolicy(LOG_POLICY_SHOW_CLASS,Boolean.TRUE);  addPolicy(LOG_POLICY_SHOW_LEVEL,Boolean.TRUE);  addPolicy(LOG_POLICY_SHOW_CLASS,Boolean.TRUE);  addPolicy(LOG_POLICY_SHOW_MESSAGE,Boolean.TRUE);  addPolicy(LOG_POLICY_SHOW_METHOD,Boolean.TRUE);  addPolicy(LOG_POLICY_SHOW_SOURCE,Boolean.TRUE);  addPolicy(LOG_POLICY_SHOW_THREAD,Boolean.TRUE);  addPolicy(LOG_POLICY_SHOW_THREAD_ID,Boolean.TRUE);  String df=LogManager.getLogManager().getProperty(LOG_POLICY_DATE_FORMAT);  if (df != null) {    if (!df.equals("")) {      dateFormat=new SimpleDateFormat(df);    }  } else {    dateFormat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  }}  }
class C{  public void save(Graph<V,E> g,Writer w) throws IOException {  save(g,w,null,null,null);}  }
class C{  protected boolean isChangeable(){  return true;}  }
class C{  private static String encodePath(String path){  StringBuilder buffer=new StringBuilder();  for (int i=0; i < path.length(); i++) {    char c=path.charAt(i);    if (c == ' ') {      buffer.append("%20");    } else {      buffer.append(c);    }  }  return buffer.toString();}  }
class C{  public void open(@NonNull RootFragment fragment){  getRoot().manager.addFragment(this,fragment,null);}  }
class C{  public InputLocationMessageContent.InputLocationMessageContentBuilder latitude(double latitude){  this.latitude=latitude;  return this;}  }
class C{  public double dot(KernelPoint x){  if (getBasisSize() == 0 || x.getBasisSize() == 0)   return 0;  int shift=this.alpha.size();  List<Vec> mergedVecs=ListUtils.mergedView(this.vecs,x.vecs);  List<Double> mergedCache;  if (this.kernelAccel == null || x.kernelAccel == null)   mergedCache=null; else   mergedCache=ListUtils.mergedView(this.kernelAccel,x.kernelAccel);  double dot=0;  for (int i=0; i < this.alpha.size(); i++)   for (int j=0; j < x.alpha.size(); j++) {    dot+=this.alpha.get(i) * x.alpha.get(j) * k.eval(i,j + shift,mergedVecs,mergedCache);  }  return dot;}  }
class C{  public String sqlObject_dropTable(String vendorName,String catalogName,String schemaName,String tableName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlObject_dropTable(catalogName,schemaName,tableName);}  }
class C{  public static boolean annotationTypeMatches(Class<? extends java.lang.annotation.Annotation> type,EclipseNode node){  if (node.getKind() != Kind.ANNOTATION)   return false;  return typeMatches(type,node,((Annotation)node.get()).type);}  }
class C{  public void notify(String tag,int id,Notification notification){  int[] idOut=new int[1];  INotificationManager service=getService();  String pkg=mContext.getPackageName();  if (notification.sound != null) {    notification.sound=notification.sound.getCanonicalUri();    if (StrictMode.vmFileUriExposureEnabled()) {      notification.sound.checkFileUriExposed("Notification.sound");    }  }  if (localLOGV)   Log.v(TAG,pkg + ": notify(" + id+ ", "+ notification+ ")");  try {    service.enqueueNotificationWithTag(pkg,mContext.getBasePackageName(),tag,id,notification,idOut,UserHandle.myUserId());    if (id != idOut[0]) {      Log.w(TAG,"notify: id corrupted: sent " + id + ", got back "+ idOut[0]);    }  } catch (  RemoteException e) {  }}  }
class C{  public void auxConnectionOpened(IOFConnectionBackend connection){  log.debug("[{}] - Switch Handshake - unhandled aux connection event",getDpid());}  }
class C{  public body(String color){  setBgColor(color);}  }
class C{  @Override public void removePropertyChangeListener(PropertyChangeListener l){  m_Support.removePropertyChangeListener(l);}  }
class C{  private int computeRelevance(){  final int R_DEFAULT=0;  final int R_INTERESTING=5;  final int R_CASE=10;  final int R_NON_RESTRICTED=3;  final int R_EXACT_NAME=4;  final int R_INLINE_TAG=31;  int base=R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED;  try {    if (fContext instanceof DocumentTemplateContext) {      DocumentTemplateContext templateContext=(DocumentTemplateContext)fContext;      IDocument document=templateContext.getDocument();      String content=document.get(fRegion.getOffset(),fRegion.getLength());      if (content.length() > 0 && fTemplate.getName().startsWith(content))       base+=R_CASE;      if (fTemplate.getName().equalsIgnoreCase(content))       base+=R_EXACT_NAME;      if (fContext instanceof JavaDocContext)       base+=R_INLINE_TAG;    }  } catch (  BadLocationException e) {  }  final int TEMPLATE_RELEVANCE=1;  return base * 16 + TEMPLATE_RELEVANCE;}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof MessageIntegrityAttribute))   return false;  if (obj == this)   return true;  MessageIntegrityAttribute att=(MessageIntegrityAttribute)obj;  if (att.getAttributeType() != getAttributeType() || att.getDataLength() != getDataLength() || !Arrays.equals(att.hmacSha1Content,hmacSha1Content))   return false;  return true;}  }
class C{  @SuppressWarnings({"ClassLoader2Instantiation"}) private static GridUriDeploymentFileProcessorResult processWithDescriptorFile(GridUriDeploymentSpringDocument doc,File file,String uri,IgniteLogger log) throws IgniteSpiException {  ClassLoader clsLdr=GridUriDeploymentClassLoaderFactory.create(U.gridClassLoader(),file,log);  List<Class<? extends ComputeTask<?,?>>> tasks=doc.getTasks(clsLdr);  List<Class<? extends ComputeTask<?,?>>> validTasks=null;  if (!F.isEmpty(tasks)) {    validTasks=new ArrayList<>();    for (    Class<? extends ComputeTask<?,?>> task : tasks) {      if (!isAllowedTaskClass(task)) {        U.warn(log,"Failed to load task. Task should be public none-abstract class " + "(might be inner static one) that implements ComputeTask interface [taskCls=" + task + ']');      } else {        if (log.isDebugEnabled())         log.debug("Found grid deployment task: " + task.getName());        validTasks.add(task);      }    }  }  GridUriDeploymentFileProcessorResult res=new GridUriDeploymentFileProcessorResult();  res.setFile(file);  res.setClassLoader(clsLdr);  if (!F.isEmpty(validTasks))   res.setTaskClasses(validTasks); else   if (log.isDebugEnabled())   log.debug("No tasks loaded from file [file=" + file.getAbsolutePath() + ", uri="+ U.hidePassword(uri)+ ']');  return res;}  }
class C{  public static ImmutableMap<String,Object> create(Status status,String message,Iterable<? extends Map<String,?>> results){  return ImmutableMap.<String,Object>of("status",status.toString(),"message",checkNotNull(message,"message"),"results",ImmutableList.copyOf(results));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String setting=getString(stack);  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (pluggy != null) {    if (pluggy.isServerPluginInfo()) {      stack.push(pluggy);      stack.push(setting);      return makeNetworkedCall(stack);    }    SageTVPlugin realPlug=sage.plugin.CorePluginManager.getInstance().getRealPlugin(pluggy.getId());    if (realPlug != null) {      if (stack.getUIMgr() != null) {        Catbert.uiContextThreadNames.set(stack.getUIMgr().getLocalUIClientName());      }      return realPlug.getConfigOptions(setting);    }  }  return Pooler.EMPTY_STRING_ARRAY;}  }
class C{  private void createPortStatMetric(List<String> metricSequence,StoragePort port,Map<String,Object> keyMap,List<Stat> portStatsList,String metrics[]){  int count=0;  Stat portStat=new Stat();  Long kbytes=0L;  Long iops=0L;  String statisticTime="";  for (  String metricName : metricSequence) {    portStat.setTimeCollected((Long)keyMap.get(Constants._TimeCollected));    portStat.setTimeInMillis((Long)keyMap.get(Constants._TimeCollected));    portStat.setNativeGuid(port.getNativeGuid());    portStat.setResourceId(port.getId());    portStat.setServiceType(Constants._Block);switch (FEPortMetric.lookup(metricName)) {case InstanceID:case ElementType:      break;case TotalIOs:    iops=ControllerUtils.getLongValue(metrics[count]);  portStat.setTotalIOs(iops);break;case KBytesTransferred:kbytes=ControllerUtils.getLongValue(metrics[count]);portStat.setKbytesTransferred(kbytes);break;case StatisticTime:statisticTime=metrics[count];break;default :_logger.warn("Ignoring unknown metric {} during system metric processing:",metricName);break;}count++;}portStatsList.add(portStat);portMetricsProcessor.processFEPortMetrics(kbytes,iops,port,convertCIMStatisticTime(statisticTime));}  }
class C{  public static boolean areItemStackTagsEqual(ItemStack a,ItemStack b,List<String> exclusions){  if (a == null && b == null) {    return true;  }  if (a != null && b != null) {    if (a.getTagCompound() == null && b.getTagCompound() == null) {      return true;    }    if (a.getTagCompound() == null ^ b.getTagCompound() == null) {      return false;    }    return areNBTCompoundsEquals(a.getTagCompound(),b.getTagCompound(),exclusions);  }  return false;}  }
class C{  private boolean isEnablePlayService(){  GoogleApiAvailability mGoogleAPI=GoogleApiAvailability.getInstance();  int mResultCodeAPI=mGoogleAPI.isGooglePlayServicesAvailable(this);  if (mResultCodeAPI != ConnectionResult.SUCCESS) {    if (mGoogleAPI.isUserResolvableError(mResultCodeAPI)) {      mGoogleAPI.getErrorDialog(this,mResultCodeAPI,PLAY_SERVICES_RESOLUTION_REQUEST).show();    } else {      finish();    }    return false;  }  return true;}  }
class C{  public FeatureDescriptor(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.143 -0400",hash_original_method="12D2194E9C278BDA57991A732D339F66",hash_generated_method="1E9BB347F752599D6C85D601AE462597") private LogSource(){}  }
class C{  public static void main(String[] args){  List<User> list=(List<User>)fromJson("[{id:1,name:22},{id:2,name:33}]",new TypeToken<ArrayList<User>>(){  });  System.out.println(list.size());  for (  User u : list) {    System.out.println(u.getName());  }  User u=(User)fromJson("{id:1,name:22}",User.class);  System.out.println(u.getName());}  }
class C{  @Override public boolean canWrite(){  return true;}  }
class C{  public int capacity(){  return storage.length;}  }
class C{  public FXGNode parse(InputStream stream,String documentName) throws FXGException, IOException {  try {    scanner.setDocumentName(documentName);    SAXParserFactory saxFactory=SAXParserFactory.newInstance();    saxFactory.setValidating(false);    saxFactory.setNamespaceAware(true);    SAXParser parser=saxFactory.newSAXParser();    parser.parse(stream,scanner);    FXGNode node=scanner.getRootNode();    return node;  } catch (  ParserConfigurationException ex) {    throw new FXGException(scanner.getStartLine(),scanner.getStartColumn(),"ErrorParsingFXG",ex.getLocalizedMessage(),ex);  }catch (  SAXException ex) {    throw new FXGException(scanner.getStartLine(),scanner.getStartColumn(),"ErrorParsingFXG",ex.getLocalizedMessage(),ex);  } finally {    stream.close();  }}  }
class C{  private void runListPermissionGroups(){  try {    List<PermissionGroupInfo> pgs=mPm.getAllPermissionGroups(0);    int count=pgs.size();    for (int p=0; p < count; p++) {      PermissionGroupInfo pgi=pgs.get(p);      System.out.print("permission group:");      System.out.println(pgi.name);    }  } catch (  RemoteException e) {    System.err.println(e.toString());    System.err.println(PM_NOT_RUNNING_ERR);  }}  }
class C{  private void restoreLastRecipient(){  String phoneNumber=mKeyValueHelper.getValue(KeyValueHelper.KEY_LAST_RECIPIENT);  if (phoneNumber != null) {    setLastRecipientNow(phoneNumber,true);  }}  }
class C{  public double product(Vector v) throws IllegalDimension {  int n=v.dimension();  if (components.length != n)   throw new IllegalDimension("Dot product with mismatched dimensions: " + components.length + ", "+ n);  return secureProduct(v);}  }
class C{  public IntentBuilder skipOrientationNormalization(){  result.putExtra(EXTRA_SKIP_ORIENTATION_NORMALIZATION,true);  return (this);}  }
class C{  public HttpNoAuthLogicHandler(final ProxyIoSession proxyIoSession) throws ProxyAuthException {  super(proxyIoSession);}  }
class C{  public void ensureTable(byte[] tableName,byte[][] cfs) throws IOException {  HBaseAdmin admin=htu.getHBaseAdmin();  if (!admin.tableExists(tableName)) {    htu.createTable(tableName,cfs);  }}  }
class C{  public static boolean registerSolderingMetal(ItemStack aTool){  return registerTool(aTool,sSolderingMetalList);}  }
class C{  static double df(double[] coefs,double x){  double y=0;  for (int i=0; i < coefs.length - 1; i++) {    y+=coefs[i] * (coefs.length - 1 - i) * pow(x,coefs.length - 2 - i);  }  return y;}  }
class C{  public Component createRenderer(MetaData metaData){  if (metaData == null) {    return null;  }  if (factories.containsKey(metaData.getClass())) {    MetaDataRendererFactory factory=factories.get(metaData.getClass());    if (factory == null) {      return null;    } else {      return factory.createRenderer(metaData);    }  } else {    int distance=Integer.MAX_VALUE;    Iterator<Class<? extends MetaData>> iterator=factories.keySet().iterator();    Class<?> rendererCandidateMetaDataClass=null;    while (iterator.hasNext()) {      Class<?> metaDataClass=iterator.next();      int currentDistance=getInheritenceLevelDistance(metaData.getClass(),metaDataClass);      if (currentDistance != -1 && currentDistance < distance) {        distance=currentDistance;        rendererCandidateMetaDataClass=metaDataClass;      }    }    if (rendererCandidateMetaDataClass != null) {      MetaDataRendererFactory factory=factories.get(rendererCandidateMetaDataClass);      factories.put(metaData.getClass(),factory);      return factory.createRenderer(metaData);    } else {      factories.put(metaData.getClass(),null);      return null;    }  }}  }
class C{  public void testInputSkipWithBuffering() throws Exception {  int size=1000000;  File f=this.initFile("testInputResources");  writeAscendingIntFile(f,size);  int jumps=size / 5000;  int jumpSize=size / jumps;  int jumpOffset=jumpSize * 4;  int bsize=256;  for (int b=0; b < 2; b++) {    logger.info("Reading with buffer size=" + bsize);    BufferedFileDataInput bfdi=new BufferedFileDataInput(f,bsize);    bsize*=256;    for (int i=0; i < jumps; i++) {      int value=i * jumpSize;      long offset=i * jumpOffset;      bfdi.seek(offset);      String position="i: " + i;      assertEquals(position,offset,bfdi.getOffset());      assertEquals(position,value,bfdi.readInt());      bfdi.skip(jumpOffset);    }    logger.info(bfdi);    bfdi.close();  }}  }
class C{  public void initialize(long initializationTimestamp){  mInitializationTimestamp=initializationTimestamp;}  }
class C{  public static String findHttpHeader(byte[] buffer,int byteOffset,int byteCount,String headerKey){  String headerValue=null;  ByteArrayInputStream byteInputStream=new ByteArrayInputStream(buffer,byteOffset,byteCount);  BufferedReader reader=new BufferedReader(new InputStreamReader(byteInputStream));  String line=null;  try {    line=reader.readLine();  } catch (  IOException e) {    MeshLog.e(DEBUG,USE_LOG4J,CLASS,"findHttpHeader() IOException firstly");  }  while (line != null) {    String[] kv=line.split(":( )+");    if (kv.length == 2 && kv[0].equals(headerKey)) {      headerValue=kv[1];      break;    } else {      try {        line=reader.readLine();      } catch (      IOException e) {        MeshLog.e(DEBUG,USE_LOG4J,CLASS,"findHttpHeader() IOException");        break;      }    }  }  try {    byteInputStream.close();    reader.close();  } catch (  IOException e) {    e.printStackTrace();  }  return headerValue;}  }
class C{  public void registerBlockingService(BlockingService service){  rpcForwarder.registerBlockingService(service);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatareplacedataend.class,args);}  }
class C{  public VNXeCommandJob updateFileSystemQuotaConfig(String quotaConfigId,FileSystemQuotaConfigParam param){  _url=URL_INSTANCE + quotaConfigId + URL_MODIFY;  MultivaluedMap<String,String> queryParams=new MultivaluedMapImpl();  queryParams.add(VNXeConstants.TIMEOUT,"0");  setQueryParameters(queryParams);  _logger.info("Post request async for: " + quotaConfigId);  return postRequestAsync(param);}  }
class C{  public CipherParameters generateDerivedParameters(int keySize,int ivSize){  keySize=keySize / 8;  ivSize=ivSize / 8;  byte[] dKey=generateDerivedKey(keySize + ivSize);  return new ParametersWithIV(new KeyParameter(dKey,0,keySize),dKey,keySize,ivSize);}  }
class C{  public ASN1InputStream(InputStream input,int limit,boolean lazyEvaluate){  super(input);  this.limit=limit;  this.lazyEvaluate=lazyEvaluate;  this.tmpBuffers=new byte[11][];}  }
class C{  public ImportSpecifier basicGetImportSpecifier(){  return importSpecifier;}  }
class C{  private boolean looksLikeMethodCall(){  nextToken();  return fToken == Symbols.TokenIDENT;}  }
class C{  public void initQuantumJpegChromin(){  int quality=QUALITY;  if (quality < 50) {    quality=5000 / quality;  } else {    quality=200 - quality * 2;  }  for (int i=0; i < NJPEG; i++) {    for (int j=0; j < NJPEG; j++) {      if (quality != 0) {        this.Quantum[i][j]=(JPEG_CHROMIN_QUANT_TBL[i][j] * quality + 50) / 100;      } else {        this.Quantum[i][j]=JPEG_CHROMIN_QUANT_TBL[i][j];      }    }  }}  }
class C{  public void evalScript(final String url,final String text){  DimIProxy action=new DimIProxy(this,IPROXY_EVAL_SCRIPT);  action.url=url;  action.text=text;  action.withContext();}  }
class C{  public EncodedWriter(Writer out,Encoder encoder){  super(out);  if (encoder == null) {    throw new NullPointerException("encoder must not be null");  }  _out=out;  _encoder=encoder;}  }
class C{  private boolean isInterOrg(MAcctSchema as){  MAcctSchemaElement elementorg=as.getAcctSchemaElement(MAcctSchemaElement.ELEMENTTYPE_Organization);  if (elementorg == null || !elementorg.isBalanced()) {    return false;  }  if (m_ioLine != null && m_oLine != null && m_ioLine.getAD_Org_ID() != m_oLine.getAD_Org_ID())   return true;  return false;}  }
class C{  @NotNull public static List<HeaderStringtableKey> findAllStringtableKeys(@NotNull Project project,@NotNull Module module,@NotNull String keyText){  List<HeaderStringtableKey> result=new ArrayList<>();  Collection<VirtualFile> files=FileBasedIndex.getInstance().getContainingFiles(FileTypeIndex.NAME,HeaderFileType.INSTANCE,module.getModuleContentScope());  for (  VirtualFile virtualFile : files) {    PsiFile file=PsiManager.getInstance(project).findFile(virtualFile);    if (!(file instanceof HeaderFile)) {      continue;    }    HeaderFile headerFile=(HeaderFile)file;    ArrayList<HeaderStringtableKey> strings=PsiUtil.findDescendantElementsOfInstance(headerFile,HeaderStringtableKey.class,null);    if (strings == null) {      continue;    }    for (    HeaderStringtableKey string : strings) {      if (string.getKey().equals(keyText)) {        result.add(string);      }    }  }  return result;}  }
class C{  private static <E>ListIterator<E> constrainedListIterator(ListIterator<E> listIterator,Constraint<? super E> constraint){  return new ConstrainedListIterator<E>(listIterator,constraint);}  }
class C{  private void privateReconfigureLogging(String pkg,final String name){  LogManager logManager=LogManager.getLogManager();  Logger logger=Logger.getLogger(LoggingConfiguration.class.getName());  if (pkg == null) {    pkg="";  }  String cfgfile=name;  if (new File(name).exists()) {    cfgfile=name;  } else {    cfgfile=pkg.replace('.',File.separatorChar) + File.separatorChar + name;  }  try {    InputStream cfgdata=openSystemFile(cfgfile);    logManager.readConfiguration(cfgdata);    InputStream cfgdata2=openSystemFile(cfgfile);    Properties cfgprop=new Properties();    cfgprop.load(cfgdata2);    DEBUG=Boolean.parseBoolean(cfgprop.getProperty("debug"));    logger.info("Logging configuration read.");  } catch (  FileNotFoundException e) {    logger.log(Level.SEVERE,"Could not find logging configuration file: " + cfgfile,e);  }catch (  Exception e) {    logger.log(Level.SEVERE,"Failed to configure logging from file: " + cfgfile,e);  }}  }
class C{  private void addToPriceModel(){  VOPriceModel priceModel=priceModelBean.getPriceModel();  List<VOSteppedPrice> steps=priceModelBean.getSteppedPrices();  int addToIndex=0;  if (steps != null) {    addToIndex=1;    if (steps.isEmpty()) {      addToIndex=0;      VOSteppedPrice vo=new VOSteppedPrice();      vo.setLimit(Long.valueOf(1));      vo.setPrice(priceModel.getPricePerUserAssignment());      steps.add(vo);    }    if (index >= 0 && index < steps.size()) {      VOSteppedPrice row=steps.get(index);      VOSteppedPrice vo=new VOSteppedPrice();      vo.setPrice(row.getPrice());      steps.add(index + 1,vo);    }  }  index+=addToIndex;}  }
class C{  public String partitionGeneratorTipText(){  return "The partition generator that will generate membership values for the instances.";}  }
class C{  public synchronized int length(){  return value.size();}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  if ((event.getAction() & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_DOWN) {    cancelAllAnimations();  }  if (event.getPointerCount() > 1) {    mMidPntX=(event.getX(0) + event.getX(1)) / 2;    mMidPntY=(event.getY(0) + event.getY(1)) / 2;  }  mGestureDetector.onTouchEvent(event);  if (mIsScaleEnabled) {    mScaleDetector.onTouchEvent(event);  }  if (mIsRotateEnabled) {    mRotateDetector.onTouchEvent(event);  }  if ((event.getAction() & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_UP) {    setImageToWrapCropBounds();  }  return true;}  }
class C{  public LruTaxonomyWriterCache(int cacheSize,LRUType lruType){  if (lruType == LRUType.LRU_HASHED) {    this.cache=new NameHashIntCacheLRU(cacheSize);  } else {    this.cache=new NameIntCacheLRU(cacheSize);  }}  }
class C{  public int cardinality(){  return cardinality;}  }
class C{  public int lastIndexOf(String string){  return lastIndexOf(string,count);}  }
class C{  public AbstractSimpleState(S id,Collection<E> deferred,Collection<? extends Action<S,E>> entryActions,Collection<? extends Action<S,E>> exitActions,PseudoState<S,E> pseudoState){  super(id,deferred,entryActions,exitActions,pseudoState);  this.ids=new ArrayList<S>();  this.ids.add(id);}  }
class C{  private static String decodeBase900toBase10(int[] codewords,int count) throws FormatException {  BigInteger result=BigInteger.ZERO;  for (int i=0; i < count; i++) {    result=result.add(EXP900[count - i - 1].multiply(BigInteger.valueOf(codewords[i])));  }  String resultString=result.toString();  if (resultString.charAt(0) != '1') {    throw FormatException.getFormatInstance();  }  return resultString.substring(1);}  }
class C{  private void zAdjustTableRowHeightIfNeeded(JTable table){  if (!autoAdjustMinimumTableRowHeight) {    return;  }  if ((table.getRowHeight() < minimumRowHeightInPixels)) {    table.setRowHeight(minimumRowHeightInPixels);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newNode;  String newValue;  doc=(Document)load("staff",true);  newNode=doc.createComment("This is a new Comment node");  newValue=newNode.getNodeValue();  assertEquals("initial","This is a new Comment node",newValue);  newNode.setNodeValue("This should have an effect");  newValue=newNode.getNodeValue();  assertEquals("afterChange","This should have an effect",newValue);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.556 -0400",hash_original_method="EF6E00E126C186B440F3A1423802E998",hash_generated_method="F50A63B374EFBBE76B9662368892D6B8") public OrFileFilter(final List<IOFileFilter> fileFilters){  if (fileFilters == null) {    this.fileFilters=new ArrayList<IOFileFilter>();  } else {    this.fileFilters=new ArrayList<IOFileFilter>(fileFilters);  }}  }
class C{  public void abortSession() throws RcsPermissionDeniedException, RcsGenericException {  try {    mSessionIntf.abortSession();  } catch (  Exception e) {    RcsPermissionDeniedException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case MappingPackage.MAPPING_MODEL__NAME:    return getName();case MappingPackage.MAPPING_MODEL__NAMESPACE:  return getNamespace();case MappingPackage.MAPPING_MODEL__VERSION:return getVersion();case MappingPackage.MAPPING_MODEL__REFERENCES:return getReferences();case MappingPackage.MAPPING_MODEL__DESCRIPTION:return getDescription();case MappingPackage.MAPPING_MODEL__DISPLAYNAME:return getDisplayname();case MappingPackage.MAPPING_MODEL__CATEGORY:return getCategory();case MappingPackage.MAPPING_MODEL__RULES:return getRules();case MappingPackage.MAPPING_MODEL__TARGET_PLATFORM:return getTargetPlatform();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public LIMIT LIMIT(String limit){  return new LIMIT(this,limit);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.188 -0500",hash_original_method="B3BAFBC51FF629F36C7E41D021DDE05F",hash_generated_method="7C419FE6FAD865AC422C74E859F80193") static public Allocation createCubemapFromCubeFaces(RenderScript rs,Bitmap xpos,Bitmap xneg,Bitmap ypos,Bitmap yneg,Bitmap zpos,Bitmap zneg,MipmapControl mips,int usage){  int height=xpos.getHeight();  if (xpos.getWidth() != height || xneg.getWidth() != height || xneg.getHeight() != height || ypos.getWidth() != height || ypos.getHeight() != height || yneg.getWidth() != height || yneg.getHeight() != height || zpos.getWidth() != height || zpos.getHeight() != height || zneg.getWidth() != height || zneg.getHeight() != height) {    throw new RSIllegalArgumentException("Only square cube map faces supported");  }  boolean isPow2=(height & (height - 1)) == 0;  if (!isPow2) {    throw new RSIllegalArgumentException("Only power of 2 cube faces supported");  }  Element e=elementFromBitmap(rs,xpos);  Type.Builder tb=new Type.Builder(rs,e);  tb.setX(height);  tb.setY(height);  tb.setFaces(true);  tb.setMipmaps(mips == MipmapControl.MIPMAP_FULL);  Type t=tb.create();  Allocation cubemap=Allocation.createTyped(rs,t,mips,usage);  AllocationAdapter adapter=AllocationAdapter.create2D(rs,cubemap);  adapter.setFace(Type.CubemapFace.POSITIVE_X);  adapter.copyFrom(xpos);  adapter.setFace(Type.CubemapFace.NEGATIVE_X);  adapter.copyFrom(xneg);  adapter.setFace(Type.CubemapFace.POSITIVE_Y);  adapter.copyFrom(ypos);  adapter.setFace(Type.CubemapFace.NEGATIVE_Y);  adapter.copyFrom(yneg);  adapter.setFace(Type.CubemapFace.POSITIVE_Z);  adapter.copyFrom(zpos);  adapter.setFace(Type.CubemapFace.NEGATIVE_Z);  adapter.copyFrom(zneg);  return cubemap;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void dispose(){  if (DO_MONITORS) {    rdrCtx.stats.mon_pipe_renderTiles.stop();  }  cache.dispose();  rdr.dispose();  MarlinRenderingEngine.returnRendererContext(rdrCtx);}  }
class C{  public static int sizeofString(final SimpleString str){  return str.sizeof();}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public void interactiveTags(TagInfo tagInfo){  tagInfo=new TagInfo("details",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS);  this.put("details",tagInfo);  tagInfo=new TagInfo("summary",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS);  tagInfo.defineRequiredEnclosingTags("details");  tagInfo.defineForbiddenTags("summary");  this.put("summary",tagInfo);  tagInfo=new TagInfo("command",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineForbiddenTags("command");  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS);  this.put("command",tagInfo);  tagInfo=new TagInfo("menu",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS);  tagInfo.defineAllowedChildrenTags("menuitem,li");  this.put("menu",tagInfo);  tagInfo=new TagInfo("menuitem",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS);  tagInfo.defineRequiredEnclosingTags("menu");  this.put("menuitem",tagInfo);  tagInfo=new TagInfo("dialog",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.any);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS);  this.put("dialog",tagInfo);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  protected void putToStore(Object key,Object val){  if (!storeEnabled())   throw new IllegalStateException("Failed to put to store because store is disabled.");  storeStgy.putToStore(key,val);}  }
class C{  protected void drawHullLines(String sname,double[] cent,Polygon chres){  if (chres.size() <= 1) {    return;  }  CSSClass cls=opacStyle == 1 ? new CSSClass(null,"temp") : null;  for (int i=1; i <= times; i++) {    SVGPath path=new SVGPath();    for (int p=0; p < chres.size(); p++) {      path.drawTo(plusTimes(cent,chres.get(p),i));    }    path.close();    Element ellipse=path.makeElement(svgp);    SVGUtil.addCSSClass(ellipse,sname);    if (cls != null) {      double s=(i >= 1 && i <= sigma.length) ? sigma[i - 1] : 0.0;      cls.setStatement(SVGConstants.CSS_FILL_OPACITY_PROPERTY,s);      SVGUtil.setAtt(ellipse,SVGConstants.SVG_STYLE_ATTRIBUTE,cls.inlineCSS());    }    layer.appendChild(ellipse);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case RegularExpressionPackage.CHARACTER_ESCAPE_SEQUENCE__CHARACTER:    return getCharacter();case RegularExpressionPackage.CHARACTER_ESCAPE_SEQUENCE__SEQUENCE:  return getSequence();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected boolean canAnimateType(int type){  return type == SVGTypes.TYPE_COLOR || type == SVGTypes.TYPE_PAINT;}  }
class C{  public static Writable filterLine(InputStream self,String charset,@ClosureParams(value=SimpleType.class,options="java.lang.String") Closure predicate) throws UnsupportedEncodingException {  return filterLine(newReader(self,charset),predicate);}  }
class C{  public DrawerBuilder withAccountHeader(@NonNull AccountHeader accountHeader,boolean accountHeaderSticky){  this.mAccountHeader=accountHeader;  this.mAccountHeaderSticky=accountHeaderSticky;  return this;}  }
class C{  @Override public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    this.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      this.out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        this.out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  public void reset(){  resetInternal();  invalidateSelf();}  }
class C{  void fireMarkedOccurrencesChanged(){  firePropertyChange(RSyntaxTextArea.MARKED_OCCURRENCES_CHANGED_PROPERTY,null,null);}  }
class C{  @Override public void onTurnReached(int currentTurn){  String sound=sounds[(int)(Math.random() * sounds.length)];  RPEvent event=new SoundEvent(sound,radius,volume,SoundLayer.AMBIENT_SOUND);  this.addEvent(event);  this.notifyWorldAboutChanges();  setupNotifier();}  }
class C{  public void add(long x){  Cell[] as;  long b, v;  int[] hc;  Cell a;  int n;  if ((as=cells) != null || !casBase(b=base,b + x)) {    boolean uncontended=true;    if ((hc=threadHashCode.get()) == null || as == null || (n=as.length) < 1 || (a=as[(n - 1) & hc[0]]) == null || !(uncontended=a.cas(v=a.value,v + x)))     retryUpdate(x,hc,uncontended);  }}  }
class C{  public void snapshotAllocators(final ISnapshotData tm){  for (  FixedAllocator alloc : m_allocs) {    alloc.snapshot(tm);  }}  }
class C{  public Lex(String s){  lastChar=-1;  textBuffer=new StringBuffer();  currentToken=new Token();  lookAheadTokens=null;  input=s;  position=0;  maxlen=s.length();  lineNumber=0;}  }
class C{  private final byte[] receiveMessage(int maxlen) throws IOException {  byte[] msglen=new byte[4];  readBytes(msglen,0,4);  int len=(((msglen[0] & 0xff) << 24) | ((msglen[1] & 0xff) << 16) | ((msglen[2] & 0xff) << 8)| (msglen[3] & 0xff));  if ((len > maxlen) || (len <= 0))   throw new IOException("Illegal sftp packet len: " + len);  byte[] msg=new byte[len];  readBytes(msg,0,len);  return msg;}  }
class C{  SearchRow convertToSearchRow(ValueArray key){  Value[] array=key.getList();  SearchRow searchRow=mvTable.getTemplateRow();  searchRow.setKey((array[array.length - 1]).getLong());  Column[] cols=getColumns();  for (int i=0; i < array.length - 1; i++) {    Column c=cols[i];    int idx=c.getColumnId();    Value v=array[i];    searchRow.setValue(idx,v);  }  return searchRow;}  }
class C{  public static Url create(String url) throws MalformedURLException {  String formattedString=UrlUtil.removeSpecialSpaces(url.trim().replace(" ","%20"));  List<Url> urls=new UrlDetector(formattedString,UrlDetectorOptions.ALLOW_SINGLE_LEVEL_DOMAIN).detect();  if (urls.size() == 1) {    return urls.get(0);  } else   if (urls.size() == 0) {    throw new MalformedURLException("We couldn't find any urls in string: " + url);  } else {    throw new MalformedURLException("We found more than one url in string: " + url);  }}  }
class C{  public void disconnectWithoutSettlement(){  wireParser.closeConnection();}  }
class C{  public VectorClock(){  this(new ArrayList<ClockEntry>(0),System.currentTimeMillis());}  }
class C{  public boolean isMethodCallEnabled(Method testMe){  if (!isSameMethod(testMe)) {    return false;  }  for (int i=0; i < testMe.args.length; i++) {    if (this.args[i].isConcreteList()) {      if (!testMe.args[i].isConcreteList())       return false;      if (!((ConcreteListArgumentValue)args[i]).doesEnable((ConcreteListArgumentValue)testMe.args[i]))       return false;    }  }  return true;}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines) throws IOException {  writeLines(file,encoding,lines,null,false);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected void drawTick(Graphics2D g2,Rectangle2D meterArea,double value,boolean label){  double valueAngle=valueToAngle(value);  double meterMiddleX=meterArea.getCenterX();  double meterMiddleY=meterArea.getCenterY();  g2.setPaint(this.tickPaint);  g2.setStroke(new BasicStroke(2.0f));  double valueP2X;  double valueP2Y;  double radius=(meterArea.getWidth() / 2) + DEFAULT_BORDER_SIZE;  double radius1=radius - 15;  double valueP1X=meterMiddleX + (radius * Math.cos(Math.PI * (valueAngle / 180)));  double valueP1Y=meterMiddleY - (radius * Math.sin(Math.PI * (valueAngle / 180)));  valueP2X=meterMiddleX + (radius1 * Math.cos(Math.PI * (valueAngle / 180)));  valueP2Y=meterMiddleY - (radius1 * Math.sin(Math.PI * (valueAngle / 180)));  Line2D.Double line=new Line2D.Double(valueP1X,valueP1Y,valueP2X,valueP2Y);  g2.draw(line);  if (this.tickLabelsVisible && label) {    String tickLabel=this.tickLabelFormat.format(value);    g2.setFont(this.tickLabelFont);    g2.setPaint(this.tickLabelPaint);    FontMetrics fm=g2.getFontMetrics();    Rectangle2D tickLabelBounds=TextUtilities.getTextBounds(tickLabel,g2,fm);    double x=valueP2X;    double y=valueP2Y;    if (valueAngle == 90 || valueAngle == 270) {      x=x - tickLabelBounds.getWidth() / 2;    } else     if (valueAngle < 90 || valueAngle > 270) {      x=x - tickLabelBounds.getWidth();    }    if ((valueAngle > 135 && valueAngle < 225) || valueAngle > 315 || valueAngle < 45) {      y=y - tickLabelBounds.getHeight() / 2;    } else {      y=y + tickLabelBounds.getHeight() / 2;    }    g2.drawString(tickLabel,(float)x,(float)y);  }}  }
class C{  protected String adapt(String body){  if (!isOldFormat(body)) {    return body;  }  final JsonParser parser=new JsonParser();  final JsonElement rootEl=parser.parse(body);  if (!rootEl.isJsonObject()) {    return body;  }  final JsonObject workspaceConfObj=getWorkspaceConfigObj(rootEl.getAsJsonObject());  if (workspaceConfObj == null) {    return body;  }  configAdapter.adaptModifying(getWorkspaceConfigObj(rootEl.getAsJsonObject()));  return rootEl.toString();}  }
class C{  private static <Item extends Comparable>Queue<Item> catenate(Queue<Item> q1,Queue<Item> q2){  Queue<Item> catenated=new Queue<Item>();  for (  Item item : q1) {    catenated.enqueue(item);  }  for (  Item item : q2) {    catenated.enqueue(item);  }  return catenated;}  }
class C{  public synchronized void destroy(){  if (log.isDebugEnabled()) {    log.debug("Destroying Esper Socket Adapter");  }  for (  EsperSocketService service : sockets.values()) {    try {      service.destroy();    } catch (    Throwable t) {      log.info("Error destroying service '" + service.getServiceName() + "' :"+ t.getMessage());    }  }  sockets.clear();}  }
class C{  static public int compareCanonicalVersions(String version1,String version2) throws IllegalArgumentException {  int result=0;  if (!isCanonicalVersion(version1)) {    throw new IllegalArgumentException("Parameter version1 (" + version1 + ") is not a canonical version string.");  }  if (!isCanonicalVersion(version2)) {    throw new IllegalArgumentException("Parameter version2 (" + version2 + ") is not a canonical version string.");  }  String[] p1=version1.split("\\.");  String[] p2=version2.split("\\.");  for (int i=0; i < 3; i++) {    result=p1[i].compareTo(p2[i]);    if (result != 0) {      return result;    }  }  return result;}  }
class C{  static byte[] toByteArray(InputStream in,int expectedSize) throws IOException {  byte[] bytes=new byte[expectedSize];  int remaining=expectedSize;  while (remaining > 0) {    int off=expectedSize - remaining;    int read=in.read(bytes,off,remaining);    if (read == -1) {      return Arrays.copyOf(bytes,off);    }    remaining-=read;  }  int b=in.read();  if (b == -1) {    return bytes;  }  FastByteArrayOutputStream out=new FastByteArrayOutputStream();  out.write(b);  copy(in,out);  byte[] result=new byte[bytes.length + out.size()];  System.arraycopy(bytes,0,result,0,bytes.length);  out.writeTo(result,bytes.length);  return result;}  }
class C{  public boolean isTextSelected(){  if (hexEditControl == null)   return false;  long[] selection=hexEditControl.getSelection();  return selection[0] != selection[1];}  }
class C{  public static Byte toByte(boolean b){  return new Byte(toByteValue(b));}  }
class C{  public MutableDateTime(DateTimeZone zone){  super(zone);}  }
class C{  protected Polygon makeHull(double[][] pc){  GrahamScanConvexHull2D hull=new GrahamScanConvexHull2D();  double[] diag=new double[]{0,0};  for (int j=0; j < pc.length; j++) {    hull.add(pc[j]);    hull.add(times(pc[j],-1));    for (int k=j + 1; k < pc.length; k++) {      double[] q=pc[k];      double[] ppq=timesEquals(plus(pc[j],q),MathUtil.SQRTHALF);      double[] pmq=timesEquals(minus(pc[j],q),MathUtil.SQRTHALF);      hull.add(ppq);      hull.add(times(ppq,-1));      hull.add(pmq);      hull.add(times(pmq,-1));    }    plusEquals(diag,pc[j]);  }  timesEquals(diag,1.0 / Math.sqrt(pc.length));  hull.add(diag);  hull.add(times(diag,-1));  return hull.getHull();}  }
class C{  public InlineMenuBuilder forWhom(Chat chat){  this.forWhom=chat;  return this;}  }
class C{  public void resetTagDefinitions(){  mTagInfo=null;}  }
class C{  public String transactionsMustContainTipText(){  return "Limit input to FPGrowth to those transactions (instances)" + " that contain these items. Provide a comma separated" + " list of attribute names.";}  }
class C{  private void createHttpSensorConfigOptions(HttpSensorConfig httpSensorConfig,Composite parent,FormToolkit toolkit){  toolkit.createLabel(parent,"Session Capture:").setLayoutData(getIndentGridData());  sessionCaptureCombo=new Combo(parent,SWT.READ_ONLY);  GridData layoutData=new GridData(GridData.FILL_BOTH);  layoutData.horizontalSpan=2;  sessionCaptureCombo.setLayoutData(layoutData);  sessionCaptureCombo.add("No");  sessionCaptureCombo.add("Yes");  sessionCaptureCombo.setData("No",Boolean.FALSE);  sessionCaptureCombo.setData("Yes",Boolean.TRUE);  toolkit.adapt(sessionCaptureCombo,false,false);  createInfoLabel(parent,toolkit,"The Http sensor can capture information about the HTTP session that is currently associated with the respective request. In the current realization the http sensor always captures the session attributes at the start of the invocation. Session capturing will never open a new http session, but just read data from an existing one.");  if (httpSensorConfig.isSessionCapture()) {    sessionCaptureCombo.select(1);  } else {    sessionCaptureCombo.select(0);  }}  }
class C{  public NetworkEvent(ConnectionRequest request,int responseCode,String message){  super(request,ActionEvent.Type.Response);  this.progressType=responseCode;  this.message=message;}  }
class C{  private String beforeSave(MAssetGroup ag,boolean newRecord) throws Exception {  if (ag.is_ValueChanged("IsDefault")) {    int no=DB.getSQLValue(ag.get_TrxName(),"SELECT count(*) FROM A_Asset_Group WHERE IsActive='Y' AND IsDefault='Y' AND Ad_Client_ID=? AND Ad_Org_ID=?",ag.getAD_Client_ID(),ag.getAD_Org_ID());    if (no == 1 && !ag.isDefault() && !newRecord) {      throw new IllegalStateException("One active Default is expected");    }  }  return null;}  }
class C{  public void pause(final int downloadId){  BaseDownloadTask downloadTask=FileDownloadList.getImpl().get(downloadId);  if (downloadTask == null) {    FileDownloadLog.w(this,"request pause but not exist %d",downloadId);    return;  }  downloadTask.pause();}  }
class C{  public void loadDataFromPush(Node sourceNode,String channelId,InputStream in,OutputStream out) throws IOException {  Node local=nodeService.findIdentity();  if (local != null) {    ProcessInfo processInfo=statisticManager.newProcessInfo(new ProcessInfoKey(sourceNode.getNodeId(),channelId,local.getNodeId(),ProcessInfoKey.ProcessType.PUSH_HANDLER));    try {      List<IncomingBatch> batchList=loadDataFromTransport(processInfo,sourceNode,new InternalIncomingTransport(in),out);      logDataReceivedFromPush(sourceNode,batchList);      NodeSecurity security=nodeService.findNodeSecurity(local.getNodeId());      processInfo.setStatus(ProcessInfo.Status.ACKING);      transportManager.writeAcknowledgement(out,sourceNode,batchList,local,security != null ? security.getNodePassword() : null);      if (containsError(batchList)) {        processInfo.setStatus(ProcessInfo.Status.ERROR);      } else {        processInfo.setStatus(ProcessInfo.Status.OK);      }    } catch (    Exception e) {      processInfo.setStatus(ProcessInfo.Status.ERROR);      if (e instanceof RuntimeException) {        throw (RuntimeException)e;      } else       if (e instanceof IOException) {        throw (IOException)e;      }      throw new RuntimeException(e);    }  } else {    throw new SymmetricException("Could not load data because the node is not registered");  }}  }
class C{  public void removeProgram(final int index){  programs.remove(index);  validateSelectedPage();}  }
class C{  public void testInjection() throws Exception {  ProtectedBean protectedBean=new ProtectedBean();  PackagePrivateBean packagePrivateBean=new PackagePrivateBean();  PrivateBean privateBean=new PrivateBean();  ConcreteBean concreteBean=new ConcreteBean();  ApplicationFactory aFactory=(ApplicationFactory)FactoryFinder.getFactory(FactoryFinder.APPLICATION_FACTORY);  aFactory.getApplication();  ApplicationAssociate associate=ApplicationAssociate.getInstance(getFacesContext().getExternalContext());  assertNotNull(associate);  InjectionProvider injectionProvider=associate.getInjectionProvider();  assertNotNull(injectionProvider);  try {    injectionProvider.inject(protectedBean);    injectionProvider.invokePostConstruct(protectedBean);    injectionProvider.invokePreDestroy(protectedBean);    injectionProvider.inject(packagePrivateBean);    injectionProvider.invokePostConstruct(packagePrivateBean);    injectionProvider.invokePreDestroy(packagePrivateBean);    injectionProvider.inject(privateBean);    injectionProvider.invokePostConstruct(privateBean);    injectionProvider.invokePreDestroy(privateBean);    injectionProvider.inject(concreteBean);    injectionProvider.invokePostConstruct(concreteBean);    injectionProvider.invokePreDestroy(concreteBean);  } catch (  Exception e) {    System.out.println(e);    e.printStackTrace();    assertTrue(false);  }  assertTrue(protectedBean.getInit());  assertTrue(protectedBean.getDestroy());  assertTrue(packagePrivateBean.getInit());  assertTrue(packagePrivateBean.getDestroy());  assertTrue(privateBean.getInit());  assertTrue(privateBean.getDestroy());  assertTrue(concreteBean.getInit());  assertTrue(concreteBean.getDestroy());}  }
class C{  public ClassicCompleteUnitGraph(Body body){  super(body);}  }
class C{  public STGroupFile(String fileName){  this(fileName,'<','>');}  }
class C{  protected JPanel createButtonsPanel(){  JPanel p=new JPanel(new FlowLayout());  p.add(okButton=buttonFactory.createJButton("OKButton"));  p.add(buttonFactory.createJButton("CancelButton"));  p.add(clearButton=buttonFactory.createJButton("ClearButton"));  okButton.setEnabled(false);  clearButton.setEnabled(false);  return p;}  }
class C{  public void checkForSynthetic(){  if (!API.v().isSystemMethod(sootMethod) && SootUtils.isSynthetic(sootMethod)) {    MethodOrMethodContext thisMomc=sootMethod;    Context context=ptaInfo.getEdge().tgtCtxt();    if (context != null)     thisMomc=MethodContext.v(sootMethod,context);    SootMethod newTarget=null;    Iterator<Edge> edges=Scene.v().getCallGraph().edgesOutOf(thisMomc);    while (edges.hasNext()) {      Edge edge=edges.next();      SootMethod target=edge.tgt();      if (!edge.isExplicit())       continue;      if (!target.getName().equals(sootMethod.getName()))       return;      if (sootMethod.getParameterCount() != target.getParameterCount())       return;      for (int i=0; i < target.getParameterCount(); i++) {        if (!SootUtils.isSubTypeOfIncluding(target.getParameterType(i),sootMethod.getParameterType(i))) {          return;        }      }      if (newTarget != null && !newTarget.equals(target))       return;      newTarget=target;    }    realTarget=newTarget;  }}  }
class C{  public InterfaceBody_ createInterfaceBody_(){  InterfaceBody_Impl interfaceBody_=new InterfaceBody_Impl();  return interfaceBody_;}  }
class C{  protected AbstractMapEntry(Object key,Object value){  super(key,value);}  }
class C{  public VirtualFile resolve(SinglePathResolver[] resolvers,String pathStr){  if (pathStr == null) {    return null;  }  VirtualFile virt=null;  if (resolvers != null) {    for (int i=0; i < resolvers.length; i++) {      SinglePathResolver resolver=resolvers[i];      virt=resolver.resolve(pathStr);      if (virt != null)       break;    }  }  if (virt == null) {    virt=checkSinglePathResolvers(virt,pathStr);  }  return virt;}  }
class C{  public JFXDialog(){  this(null,null,DialogTransition.CENTER);}  }
class C{  public CActionSearchOnlySelectedNodes(final ZyGraph graph){  super("Selected Only Search");  m_graph=graph;}  }
class C{  private int handleT(String value,DoubleMetaphoneResult result,int index){  if (contains(value,index,4,"TION")) {    result.append('X');    index+=3;  } else   if (contains(value,index,3,"TIA","TCH")) {    result.append('X');    index+=3;  } else   if (contains(value,index,2,"TH") || contains(value,index,3,"TTH")) {    if (contains(value,index + 2,2,"OM","AM") || contains(value,0,4,"VAN ","VON ") || contains(value,0,3,"SCH")) {      result.append('T');    } else {      result.append('0','T');    }    index+=2;  } else {    result.append('T');    index=contains(value,index + 1,1,"T","D") ? index + 2 : index + 1;  }  return index;}  }
class C{  public static Function sqliteVersion(){  return new Function("sqlite_version()");}  }
class C{  public void suspend(String id){  TraceState ts=traceState.get();  if (log.isLoggable(Level.FINEST)) {    log.finest("Suspend trace state = " + ts + " id = "+ id);  }  if (ts != null) {    setExpire(ts);    try {      suspendedStateLock.lock();      if (suspendedState.containsKey(id) && log.isLoggable(Level.FINEST)) {        log.finest("WARNING: Overwriting previous suspended trace state = " + suspendedState.get(id) + " id = "+ id);      }      suspendedState.put(id,ts);      traceState.remove();    }  finally {      suspendedStateLock.unlock();    }  }}  }
class C{  public void writeHouseholds(String outputfolder){  if (this.households == null || this.householdAttributes == null) {    throw new RuntimeException("Either no households or household attributes to write.");  } else {    LOG.info("Writing households to file...");    HouseholdsWriterV10 hw=new HouseholdsWriterV10(this.households);    hw.setPrettyPrint(true);    hw.writeFile(outputfolder + "Households.xml");    LOG.info("Writing household attributes to file...");    ObjectAttributesXmlWriter oaw=new ObjectAttributesXmlWriter(householdAttributes);    oaw.setPrettyPrint(true);    oaw.writeFile(outputfolder + "HouseholdAttributes.xml");  }}  }
class C{  @Override public Object scoreNames(){  return null;}  }
class C{  public JSONWriter value(long l) throws JSONException {  return this.append(Long.toString(l));}  }
class C{  public int lineToY(int line){  FontMetrics fm=painter.getFontMetrics();  return (line - firstLine) * fm.getHeight() - (fm.getLeading() + fm.getMaxDescent());}  }
class C{  public static boolean isSQL99NonReservedKeyword(String identifier){  if (identifier == null) {    throw new NullPointerException("The identifier cannot be null");  }  return Arrays.binarySearch(SQL99_NON_RESERVED,identifier.toUpperCase()) >= 0;}  }
class C{  public void recordTXOperation(ServerRegionDataAccess region,ServerRegionOperation op,Object key,Object arguments[]){  if (ClientTXStateStub.transactionRecordingEnabled()) {    this.recordedOperations.add(new TransactionalOperation(this,region.getRegionName(),op,key,arguments));  }}  }
class C{  public SerializableList(final int initialCapacity,final String label){  super(initialCapacity,label);}  }
class C{  public void applyApplicationCache(ApplicationCache applicationCache){  for (  Map.Entry<String,Source> entry : sources.entrySet()) {    String className=entry.getKey();    Source source=entry.getValue();    Source cachedSource=applicationCache.getSource(className);    if ((cachedSource != null) && !cachedSource.isUpdated()) {      CompilationUnit cachedCompilationUnit=cachedSource.getCompilationUnit();      if (cachedSource.getPathRoot().equals(source.getPathRoot()) && (cachedCompilationUnit != null) && cachedCompilationUnit.hasTypeInfo) {        CompilationUnit compilationUnit=source.newCompilationUnit(cachedCompilationUnit.getSyntaxTree(),new CompilerContext());        Source.copyCompilationUnit(cachedCompilationUnit,compilationUnit,true);        source.setFileTime(cachedSource.getFileTime());        cachedSource.reused();      }    }  }}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public final boolean addAll(int index,Collection<? extends E> newElements){  throw new UnsupportedOperationException();}  }
class C{  @SuppressWarnings("unchecked") protected static void appendValue(final StringBuilder sb,final Object value){  if (value instanceof Map) {    sb.append('{');    for (    final Entry<Object,Object> entry : ((Map<Object,Object>)value).entrySet()) {      if (entry.getValue() == null)       continue;      sb.append(entry.getKey()).append('=');      appendValue(sb,entry.getValue());    }    sb.append("}; ");  } else   if (value instanceof Object[]) {    sb.append('[');    for (    final Object e : (Object[])value)     appendValue(sb,e);    sb.append("]; ");  } else   if (value instanceof StructView) {    appendValue(sb,((StructView)value).getStruct());  } else   if (value instanceof Pair) {    sb.append(((Pair<String,Object>)value).value1).append('=');    appendValue(sb,((Pair<String,Object>)value).value2);  } else   if (value instanceof XString) {    final String s=value.toString();    sb.append(s.indexOf('\0') >= 0 ? s.replace("\0","") : s).append("; ");  } else   sb.append(value).append("; ");}  }
class C{  private static boolean findKeyInCertificates(PublicKey key,Certificate[] certs){  if (key == null || certs == null)   return false;  for (  Certificate cert : certs) {    if (cert.getPublicKey().equals(key))     return true;  }  return false;}  }
class C{  private void connectChildren(InvocationSequenceData parent){  if (null != parent.getNestedSequences()) {    for (    InvocationSequenceData child : parent.getNestedSequences()) {      child.setParentSequence(parent);      connectChildren(child);    }  }}  }
class C{  private boolean validFirstChar(char c){  return Character.isLetter(c) || c == '_';}  }
class C{  public OCSPResp put(String key,OCSPResp value){  log.trace("Setting OCSP response for '{}'",key);  return cache.put(key,value);}  }
class C{  public static long ticks2microsec(long tick,double tempoMPQ,int resolution){  return (long)(((double)tick) * tempoMPQ / resolution);}  }
class C{  void processBackSpace(){  if (this.displayMode != DISPLAY_MODE.ERROR) {    setDisplayString(getDisplayString().substring(0,getDisplayString().length() - 1));    if (getDisplayString().length() < 1) {      setDisplayString(CHARACTER_ZERO);    }  }}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster streams;  String outputHeader=null;  String streamsHeader=null;  String outletHeader=null;  int rows=0;  int cols=0;  int row, col;  double noData=-32768;  double gridRes=0;  int i;  float progress=0;  double z;  int x, y;  int minX=0;  int minY=0;  double minDist=0;  double snapDistance=0;  int snapDistInt=0;  double outletID;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  outletHeader=args[0];  streamsHeader=args[1];  outputHeader=args[2];  snapDistance=Double.parseDouble(args[3]);  if (outletHeader.isEmpty() || streamsHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if (outletHeader.endsWith(".dep") && outputHeader.endsWith(".shp")) {    outputHeader=StringUtilities.replaceLast(outputHeader,".shp",".dep");  }  if (outletHeader.endsWith(".shp") && outputHeader.endsWith(".dep")) {    outputHeader=StringUtilities.replaceLast(outputHeader,".dep",".shp");  }  try {    streams=new WhiteboxRaster(streamsHeader,"r");    rows=streams.getNumberRows();    cols=streams.getNumberColumns();    if (outletHeader.toLowerCase().endsWith(".shp")) {      double outletX, outletY;      int outletCol, outletRow;      int recordNumber;      double zValue=0, mValue=0;      ShapeFile outlets=new ShapeFile(outletHeader);      if (outlets.getShapeType().getBaseType() != ShapeType.POINT) {        showFeedback("The outlets vector should be of a Point or " + "MultiPoint ShapeType.");        return;      }      ShapeFile output=new ShapeFile(outputHeader,outlets.getShapeType(),outlets.getAttributeTable().getAllFields());      gridRes=(streams.getCellSizeX() + streams.getCellSizeY()) / 2;      snapDistInt=(int)(snapDistance / gridRes);      if (snapDistInt < 1) {        snapDistInt=1;      }      for (      ShapeFileRecord record : outlets.records) {        recordNumber=record.getRecordNumber();        double[][] vertices;        ShapeType shapeType=record.getShapeType();switch (shapeType) {case POINT:          whitebox.geospatialfiles.shapefile.Point recPoint=(whitebox.geospatialfiles.shapefile.Point)(record.getGeometry());        vertices=recPoint.getPoints();      break;case POINTZ:    PointZ recPointZ=(PointZ)(record.getGeometry());  zValue=recPointZ.getZ();mValue=recPointZ.getM();vertices=recPointZ.getPoints();break;case POINTM:PointM recPointM=(PointM)(record.getGeometry());mValue=recPointM.getM();vertices=recPointM.getPoints();break;default :showFeedback("This ShapeType is not supported by this operation. \n" + "Please use an outlet vector of a Point base ShapeType.");return;}outletRow=streams.getRowFromYCoordinate(vertices[0][1]);outletCol=streams.getColumnFromXCoordinate(vertices[0][0]);minDist=99999999;minX=outletCol;minY=outletRow;for (x=outletCol - snapDistInt; x <= outletCol + snapDistInt; x++) {for (y=outletRow - snapDistInt; y <= outletRow + snapDistInt; y++) {z=streams.getValue(y,x);if (z > 0) {z=(x - outletCol) * (x - outletCol) + (y - outletRow) * (y - outletRow);if (z < minDist) {minDist=z;minX=x;minY=y;}}}}outletX=streams.getXCoordinateFromColumn(minX);outletY=streams.getYCoordinateFromRow(minY);Object[] recData=outlets.getAttributeTable().getRecord(recordNumber - 1);switch (shapeType) {case POINT:whitebox.geospatialfiles.shapefile.Point wbPoint=new whitebox.geospatialfiles.shapefile.Point(outletX,outletY);output.addRecord(wbPoint,recData);break;case POINTZ:PointZ pointZ=new PointZ(outletX,outletY,zValue,mValue);output.addRecord(pointZ,recData);break;case POINTM:PointM pointM=new PointM(outletX,outletY,mValue);output.addRecord(pointM,recData);break;}}output.write();} else if (outletHeader.toLowerCase().endsWith(".dep")) {WhiteboxRaster outlets=new WhiteboxRaster(outletHeader,"r");rows=outlets.getNumberRows();cols=outlets.getNumberColumns();noData=outlets.getNoDataValue();gridRes=(outlets.getCellSizeX() + outlets.getCellSizeY()) / 2;if (streams.getNumberColumns() != cols || streams.getNumberRows() != rows) {showFeedback("The input files must have the same dimensions.");return;}WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",outletHeader,WhiteboxRaster.DataType.FLOAT,noData);output.setPreferredPalette(outlets.getPreferredPalette());output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);snapDistInt=(int)(snapDistance / gridRes);if (snapDistInt < 1) {snapDistInt=1;}double[] data;for (row=0; row < rows; row++) {data=outlets.getRowValues(row);for (col=0; col < cols; col++) {outletID=data[col];if (outletID != 0 && outletID != noData) {minDist=99999999;minX=col;minY=row;for (x=col - snapDistInt; x <= col + snapDistInt; x++) {for (y=row - snapDistInt; y <= row + snapDistInt; y++) {z=streams.getValue(y,x);if (z > 0) {z=(x - col) * (x - col) + (y - row) * (y - row);if (z < minDist) {minDist=z;minX=x;minY=y;}}}}output.setValue(minY,minX,outletID);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());outlets.close();streams.close();output.close();}returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  protected Slice readNext(FileSystemWAL.FileSystemWALReader reader){  try {    return reader.next();  } catch (  IOException ex) {    try {      reader.close();    } catch (    IOException ioe) {    }    return null;  }}  }
class C{  private void updateToolTipText(){  if (!isChecked()) {    setToolTipText("Show inactive instrumentations");  } else {    setToolTipText("Hide inactive instrumentations");  }}  }
class C{  public static ModbusTCPListener createTCPSlave() throws Exception {  ModbusTCPListener listener=null;  try {    getSimpleProcessImage();    listener=new ModbusTCPListener(5);    listener.setListening(true);    listener.setPort(PORT);    new Thread(listener).start();  } catch (  Exception x) {    if (listener != null) {      listener.stop();    }    throw new Exception(x.getMessage());  }  return listener;}  }
class C{  public static long newLinearId(long startValue,Map<Long,?> controlMap){  long val=startValue;  for (; ; ) {    val++;    if (val > IdValidator.MAX_VALID_ID)     val=IdValidator.MIN_VALID_ID;    if (controlMap == null || !controlMap.containsKey(val))     return val;  }}  }
class C{  public void copy(SceModule sceModule){  nsegment=(byte)(sceModule.nsegment & 0xFF);  segmentaddr[0]=sceModule.segmentaddr[0];  segmentaddr[1]=sceModule.segmentaddr[1];  segmentaddr[2]=sceModule.segmentaddr[2];  segmentaddr[3]=sceModule.segmentaddr[3];  segmentsize[0]=sceModule.segmentsize[0];  segmentsize[1]=sceModule.segmentsize[1];  segmentsize[2]=sceModule.segmentsize[2];  segmentsize[3]=sceModule.segmentsize[3];  entry_addr=sceModule.entry_addr;  gp_value=sceModule.gp_value;  text_addr=sceModule.text_addr;  text_size=sceModule.text_size;  data_size=sceModule.data_size;  bss_size=sceModule.bss_size;  attribute=sceModule.attribute;  version[0]=sceModule.version[0];  version[1]=sceModule.version[1];  name=sceModule.modname;}  }
class C{  private void partition(long qAddr,int part){  mem.writeInt(qAddr + 2,part);}  }
class C{  public boolean hasCycle(){  return cycle != null;}  }
class C{  public void addListener(final L listener){  Validate.notNull(listener,"Listener object cannot be null.");  listeners.add(listener);}  }
class C{  public static Address fromPublicKey(final byte version,final PublicKey publicKey){  if (null == publicKey) {    throw new IllegalArgumentException("public key cannot be null");  }  return new Address(version,publicKey);}  }
class C{  public boolean contains(double x,double y,double w,double h){  return path.contains(x,y,w,h);}  }
class C{  public int size(){  return m_fields.length;}  }
class C{  protected boolean covers(final double x,final double y,final double z){  if (isNull()) {    return false;  }  return covers(x,y) && z >= minz && z <= maxz;}  }
class C{  public void addRoundRectangleStraightLeft(final float x,final float y,final float width,final float height,final float arcWidth,final float arcHeight){  if (this.isDisposed()) {    SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);  }  moveTo(x,y);  lineTo(x + width - arcWidth,y);  this.cubicTo(x + width,y,x + width,y,x + width - arcWidth,y);  this.cubicTo(x + width,y,x + width,y,x + width,y + arcHeight);  this.cubicTo(x + width,y + height,x + width,y + height,x + width,y + height - arcHeight);  this.cubicTo(x + width,y + height,x + width,y + height,x + width - arcWidth,y + height);  lineTo(x,y + height);  lineTo(x,y);}  }
class C{  static <T>List<List<T>> partition(List<T> list,int size){  return new Partition<>(list,size);}  }
class C{  public boolean wasAtRest(){  return mWasAtRest;}  }
class C{  private void notifyDownloadResult(DownloadFileOperation download,RemoteOperationResult downloadResult){  mNotificationManager.cancel(R.string.downloader_download_in_progress_ticker);  if (!downloadResult.isCancelled()) {    int tickerId=(downloadResult.isSuccess()) ? R.string.downloader_download_succeeded_ticker : R.string.downloader_download_failed_ticker;    boolean needsToUpdateCredentials=(downloadResult.getCode() == ResultCode.UNAUTHORIZED || downloadResult.isIdPRedirection());    tickerId=(needsToUpdateCredentials) ? R.string.downloader_download_failed_credentials_error : tickerId;    mNotificationBuilder.setTicker(getString(tickerId)).setContentTitle(getString(tickerId)).setAutoCancel(true).setOngoing(false).setProgress(0,0,false);    if (needsToUpdateCredentials) {      Intent updateAccountCredentials=new Intent(this,AuthenticatorActivity.class);      updateAccountCredentials.putExtra(AuthenticatorActivity.EXTRA_ACCOUNT,download.getAccount());      updateAccountCredentials.putExtra(AuthenticatorActivity.EXTRA_ACTION,AuthenticatorActivity.ACTION_UPDATE_EXPIRED_TOKEN);      updateAccountCredentials.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);      updateAccountCredentials.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);      updateAccountCredentials.addFlags(Intent.FLAG_FROM_BACKGROUND);      mNotificationBuilder.setContentIntent(PendingIntent.getActivity(this,(int)System.currentTimeMillis(),updateAccountCredentials,PendingIntent.FLAG_ONE_SHOT));    } else {      Intent showDetailsIntent=new Intent();      mNotificationBuilder.setContentIntent(PendingIntent.getActivity(this,(int)System.currentTimeMillis(),showDetailsIntent,0));    }    mNotificationBuilder.setContentText(ErrorMessageAdapter.getErrorCauseMessage(downloadResult,download,getResources()));    mNotificationManager.notify(tickerId,mNotificationBuilder.build());    if (downloadResult.isSuccess()) {      NotificationDelayer.cancelWithDelay(mNotificationManager,R.string.downloader_download_succeeded_ticker,2000);    }  }}  }
class C{  public void end(String namespace,String name) throws Exception {  ManagedPropertyBean top;  try {    top=(ManagedPropertyBean)digester.pop();  } catch (  Exception e) {    throw new IllegalStateException("Popped object is not a " + CLASS_NAME + " instance");  }  ManagedBeanBean mbb=(ManagedBeanBean)digester.peek();  validate(mbb.getManagedBeanName(),top);  ManagedPropertyBean old=mbb.getManagedProperty(top.getPropertyName());  if (old == null) {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[ManagedPropertyRule]{" + digester.getMatch() + "} New("+ top.getPropertyName()+ ")");    }    mbb.addManagedProperty(top);  } else {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[ManagedPropertyRule]{" + digester.getMatch() + "} Merge("+ top.getPropertyName()+ ")");    }    mergeManagedProperty(top,old);  }}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  public final CC endGroupX(String s){  hor.setEndGroup(s);  return this;}  }
class C{  @RequestMapping(value="/foos",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Foo> createFoo(@RequestBody Foo foo) throws URISyntaxException {  log.debug("REST request to save Foo : {}",foo);  if (foo.getId() != null) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("foo","idexists","A new foo cannot already have an ID")).body(null);  }  Foo result=fooRepository.save(foo);  return ResponseEntity.created(new URI("/api/foos/" + result.getId())).headers(HeaderUtil.createEntityCreationAlert("foo",result.getId().toString())).body(result);}  }
class C{  public void processServerResponse(int response,ResponseData rawData){  if (response != Policy.RETRY) {    setRetryCount(0);  } else {    setRetryCount(mRetryCount + 1);  }  if (response == Policy.LICENSED) {    Map<String,String> extras=decodeExtras(rawData.extra);    mLastResponse=response;    setValidityTimestamp(extras.get("VT"));    setRetryUntil(extras.get("GT"));    setMaxRetries(extras.get("GR"));  } else   if (response == Policy.NOT_LICENSED) {    setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP);    setRetryUntil(DEFAULT_RETRY_UNTIL);    setMaxRetries(DEFAULT_MAX_RETRIES);  }  setLastResponse(response);  mPreferences.commit();}  }
class C{  protected SparseObjectMatrix1D(int size,AbstractIntObjectMap elements,int offset,int stride){  setUp(size,offset,stride);  this.elements=elements;  this.isNoView=false;}  }
class C{  @Override public Void gather(IGASState<PATHS.VS,PATHS.ES,Void> state,Value u,Statement e){  throw new UnsupportedOperationException();}  }
class C{  public void addRestriction(String whereClause){  if (whereClause == null || whereClause.trim().length() == 0)   return;  Restriction r=new Restriction(whereClause,true,0);  m_list.add(r);  m_newRecord=whereClause.equals(NEWRECORD);}  }
class C{  public static double[] enuToLLA(final double x,final double y,final double z,final double centerLon,final double centerLat,final double centerAlt,double[] lla){  if (lla == null) {    lla=new double[3];  }  lla=enuToECF(x,y,z,centerLon,centerLat,centerAlt,lla);  return ecfToLLA(lla[0],lla[1],lla[2],lla);}  }
class C{  public void start(@NonNull Context context,@NonNull android.support.v4.app.Fragment fragment,int requestCode){  fragment.startActivityForResult(getIntent(context),requestCode);}  }
class C{  private static void encode(double val,byte[] bytes,int offset){  NumericUtils.longToSortableBytes(NumericUtils.doubleToSortableLong(val),bytes,offset);}  }
class C{  public double distance2(double p1,double p2){  return (p1 - p2) * (p1 - p2);}  }
class C{  private COperandsDeterminer(){}  }
class C{  public static char[] encodeHex(final byte[] data){  return encodeHex(data,true);}  }
class C{  public static UserActiveException convertToApi(org.oscm.internal.types.exception.UserActiveException oldEx){  return convertExceptionToApi(oldEx,UserActiveException.class);}  }
class C{  public static int size(){  InternalThreadLocalMap threadLocalMap=InternalThreadLocalMap.getIfSet();  if (threadLocalMap == null) {    return 0;  } else {    return threadLocalMap.size();  }}  }
class C{  protected String handleLong(ResultSet rs,int columnIndex) throws SQLException {  long lv=rs.getLong(columnIndex);  return rs.wasNull() ? "" : Long.toString(lv);}  }
class C{  protected boolean isReInvite(){  return this.reInviteFlag;}  }
class C{  public boolean showOverflowMenu(){  if (mReserveOverflow && !isOverflowMenuShowing() && mMenu != null && mMenuView != null && mPostedOpenRunnable == null && !mMenu.getNonActionItems().isEmpty()) {    OverflowPopup popup=new OverflowPopup(mContext,mMenu,mOverflowButton,true);    mPostedOpenRunnable=new OpenOverflowRunnable(popup);    ((View)mMenuView).post(mPostedOpenRunnable);    super.onSubMenuSelected(null);    return true;  }  return false;}  }
class C{  public static void assertArrayEqual(short[] expected,short[] actual,String errorMessage){  if (verbose) {    log("assertArrayEqual(" + arrayToString(expected) + ", "+ arrayToString(actual)+ ", "+ errorMessage+ ")");  }  if (expected.length != actual.length) {    TestUtils.assertBool(false);  }  for (int index=0; index < expected.length; ++index) {    assertEqual(expected[index],actual[index],errorMessage);  }}  }
class C{  public void cancelCellEditing(){  realEditor.cancelCellEditing();  cleanupAfterEditing();}  }
class C{  @Override public boolean open(String access){  if (access.equals("r")) {    try {      iStream=new FileImageInputStream(new File(filePath));      parser=new LabelParser();      metadata=parser.parseHeader(iStream);      iStream.close();      iStream=null;    } catch (    IOException e) {      try {        iStream.close();      } catch (      Exception x) {      }      return (false);    }  }  return (super.open(access));}  }
class C{  public RadVizPlotter(PlotterConfigurationModel settings,DataTable dataTable){  this(settings);  setDataTable(dataTable);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:20.015 -0400",hash_original_method="4771911ED2BF63791776325A4503EB1A",hash_generated_method="7FC2BCA9A434EC57FCBA20AD30F46DA2") public boolean remove(Object o){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return q.remove(o);  }  finally {    lock.unlock();  }}  }
class C{  public ECPoint multiply(ECPoint p,BigInteger k,PreCompInfo preCompInfo){  WNafPreCompInfo wnafPreCompInfo;  if ((preCompInfo != null) && (preCompInfo instanceof WNafPreCompInfo)) {    wnafPreCompInfo=(WNafPreCompInfo)preCompInfo;  } else {    wnafPreCompInfo=new WNafPreCompInfo();  }  int m=k.bitLength();  byte width;  int reqPreCompLen;  if (m < 13) {    width=2;    reqPreCompLen=1;  } else {    if (m < 41) {      width=3;      reqPreCompLen=2;    } else {      if (m < 121) {        width=4;        reqPreCompLen=4;      } else {        if (m < 337) {          width=5;          reqPreCompLen=8;        } else {          if (m < 897) {            width=6;            reqPreCompLen=16;          } else {            if (m < 2305) {              width=7;              reqPreCompLen=32;            } else {              width=8;              reqPreCompLen=127;            }          }        }      }    }  }  int preCompLen=1;  ECPoint[] preComp=wnafPreCompInfo.getPreComp();  ECPoint twiceP=wnafPreCompInfo.getTwiceP();  if (preComp == null) {    preComp=new ECPoint[]{p};  } else {    preCompLen=preComp.length;  }  if (twiceP == null) {    twiceP=p.twice();  }  if (preCompLen < reqPreCompLen) {    ECPoint[] oldPreComp=preComp;    preComp=new ECPoint[reqPreCompLen];    System.arraycopy(oldPreComp,0,preComp,0,preCompLen);    for (int i=preCompLen; i < reqPreCompLen; i++) {      preComp[i]=twiceP.add(preComp[i - 1]);    }  }  byte[] wnaf=windowNaf(width,k);  int l=wnaf.length;  ECPoint q=p.getCurve().getInfinity();  for (int i=l - 1; i >= 0; i--) {    q=q.twice();    if (wnaf[i] != 0) {      if (wnaf[i] > 0) {        q=q.add(preComp[(wnaf[i] - 1) / 2]);      } else {        q=q.subtract(preComp[(-wnaf[i] - 1) / 2]);      }    }  }  wnafPreCompInfo.setPreComp(preComp);  wnafPreCompInfo.setTwiceP(twiceP);  p.setPreCompInfo(wnafPreCompInfo);  return q;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  protected void postAsyncCommand(Command cmd,ActionEvent sourceEvent){}  }
class C{  public static NbtOutputStream write(NbtTag tag,OutputStream outputStream) throws IOException {  NbtOutputStream out=new NbtOutputStream(outputStream);  out.write(tag);  return out;}  }
class C{  @Override public void exitIndexedExpression(IndexedExpressionContext ctx){  boolean isRowLower=(ctx.rowLower != null && !ctx.rowLower.isEmpty() && (ctx.rowLower.info.expr != null));  boolean isRowUpper=(ctx.rowUpper != null && !ctx.rowUpper.isEmpty() && (ctx.rowUpper.info.expr != null));  boolean isColLower=(ctx.colLower != null && !ctx.colLower.isEmpty() && (ctx.colLower.info.expr != null));  boolean isColUpper=(ctx.colUpper != null && !ctx.colUpper.isEmpty() && (ctx.colUpper.info.expr != null));  boolean isRowSliceImplicit=ctx.rowImplicitSlice != null;  boolean isColSliceImplicit=ctx.colImplicitSlice != null;  ExpressionInfo rowLower=isRowLower ? ctx.rowLower.info : null;  ExpressionInfo rowUpper=isRowUpper ? ctx.rowUpper.info : null;  ExpressionInfo colLower=isColLower ? ctx.colLower.info : null;  ExpressionInfo colUpper=isColUpper ? ctx.colUpper.info : null;  ctx.dataInfo.expr=new IndexedIdentifier(ctx.name.getText(),false,false);  setFileLineColumn(ctx.dataInfo.expr,ctx);  try {    ArrayList<ArrayList<Expression>> exprList=new ArrayList<ArrayList<Expression>>();    ArrayList<Expression> rowIndices=new ArrayList<Expression>();    ArrayList<Expression> colIndices=new ArrayList<Expression>();    if (!isRowLower && !isRowUpper) {      rowIndices.add(null);      rowIndices.add(null);    } else     if (isRowLower && isRowUpper) {      rowIndices.add(incrementByOne(rowLower.expr,ctx));      rowIndices.add(rowUpper.expr);    } else     if (isRowLower && !isRowUpper) {      rowIndices.add(incrementByOne(rowLower.expr,ctx));      if (isRowSliceImplicit) {        Expression.BuiltinFunctionOp bop=Expression.BuiltinFunctionOp.NROW;        DataIdentifier x=new DataIdentifier(ctx.name.getText());        int line=ctx.start.getLine();        int col=ctx.start.getCharPositionInLine();        Expression expr=new BuiltinFunctionExpression(bop,new Expression[]{x},currentFile,line,col,line,col);        setFileLineColumn(expr,ctx);        rowIndices.add(expr);      }    } else     if (!isRowLower && isRowUpper && isRowSliceImplicit) {      int line=ctx.start.getLine();      int col=ctx.start.getCharPositionInLine();      IntIdentifier one=new IntIdentifier(1,currentFile,line,col,line,col);      setFileLineColumn(one,ctx);      rowIndices.add(one);      rowIndices.add(rowUpper.expr);    } else {      notifyErrorListeners("incorrect index expression for row",ctx.start);      return;    }    if (!isColLower && !isColUpper) {      colIndices.add(null);      colIndices.add(null);    } else     if (isColLower && isColUpper) {      colIndices.add(incrementByOne(colLower.expr,ctx));      colIndices.add(colUpper.expr);    } else     if (isColLower && !isColUpper) {      colIndices.add(incrementByOne(colLower.expr,ctx));      if (isColSliceImplicit) {        Expression.BuiltinFunctionOp bop=Expression.BuiltinFunctionOp.NCOL;        DataIdentifier x=new DataIdentifier(ctx.name.getText());        int line=ctx.start.getLine();        int col=ctx.start.getCharPositionInLine();        Expression expr=new BuiltinFunctionExpression(bop,new Expression[]{x},currentFile,line,col,line,col);        setFileLineColumn(expr,ctx);        colIndices.add(expr);      }    } else     if (!isColLower && isColUpper && isColSliceImplicit) {      int line=ctx.start.getLine();      int col=ctx.start.getCharPositionInLine();      IntIdentifier one=new IntIdentifier(1,currentFile,line,col,line,col);      setFileLineColumn(one,ctx);      colIndices.add(one);      colIndices.add(colUpper.expr);    } else {      notifyErrorListeners("incorrect index expression for column",ctx.start);      return;    }    exprList.add(rowIndices);    exprList.add(colIndices);    ((IndexedIdentifier)ctx.dataInfo.expr).setIndices(exprList);  } catch (  Exception e) {    notifyErrorListeners("cannot set the indices",ctx.start);    return;  }}  }
class C{  private void init(Tuple input){  profileConfig=(ProfileConfig)input.getValueByField("profile");  measurement=new ProfileMeasurement(profileConfig.getProfile(),input.getStringByField("entity"),getTimestamp(),periodDurationMillis,TimeUnit.MILLISECONDS);  try {    JSONObject message=(JSONObject)input.getValueByField("message");    Map<String,String> expressions=profileConfig.getInit();    expressions.forEach(null);  } catch (  ParseException e) {    String msg=format("Bad 'init' expression: %s, profile=%s, entity=%s",e.getMessage(),measurement.getProfileName(),measurement.getEntity());    throw new ParseException(msg,e);  }}  }
class C{  @Override public boolean touchDown(Object sender){  if (super.touchDown(sender)) {    if (mOnClick != null && mOnClick.length() > 0) {      PLIInterpreter commandInterpreter=new PLCommandInterpreter();      if (sender instanceof PLIScene)       commandInterpreter.interpret(((PLIScene)sender).getInternalView(),mOnClick); else       if (sender instanceof PLIRenderer)       commandInterpreter.interpret(((PLIRenderer)sender).getInternalView(),mOnClick);    }    return true;  }  return false;}  }
class C{  private CollectionDescriptor(String uriName,String dbSchema,String dbObjectName,byte dbObjectType,String keyColumnName,byte keyColumnType,int keyColumnLength,String contentColumnName,byte contentColumnType,int contentColumnLength,byte contentLobCompress,boolean contentLobCache,byte contentLobEncrypt,String doctypeColumnName,String creationColumnName,String timestampColumnName,String versionColumnName,byte versioningMethod,byte keyAssignmentMethod,String keySequenceName,boolean writable,byte validationMode,String timeIndex){  this.uriName=uriName;  this.dbSchema=dbSchema;  this.dbObjectName=dbObjectName;  this.dbObjectType=dbObjectType;  this.keyColumnName=keyColumnName;  this.keyLength=keyColumnLength;  this.keyDataType=keyColumnType;  this.contentColumnName=contentColumnName;  this.contentDataType=contentColumnType;  this.contentLength=contentColumnLength;  this.contentLobCompress=contentLobCompress;  this.contentLobEncrypt=contentLobEncrypt;  this.contentLobCache=contentLobCache;  this.doctypeColumnName=doctypeColumnName;  this.creationColumnName=creationColumnName;  this.timestampColumnName=timestampColumnName;  this.timeIndex=timeIndex;  this.versionColumnName=versionColumnName;  this.versioningMethod=versioningMethod;  this.keySequenceName=keySequenceName;  this.keyAssignmentMethod=keyAssignmentMethod;  this.writable=writable;  this.validationMode=validationMode;}  }
class C{  private static List<TableRow> executeQuery(String querySql,Bigquery bigquery,String projectId) throws IOException {  QueryResponse query=bigquery.jobs().query(projectId,new QueryRequest().setQuery(querySql)).execute();  GetQueryResultsResponse queryResult=bigquery.jobs().getQueryResults(query.getJobReference().getProjectId(),query.getJobReference().getJobId()).execute();  return queryResult.getRows();}  }
class C{  default Task<?> postDeactivation(AbstractActor<?> actor){  return Task.done();}  }
class C{  public static void postDecorateResponse(SolrRequestHandler handler,SolrQueryRequest req,SolrQueryResponse rsp){  NamedList<Object> responseHeader=rsp.getResponseHeader();  final int qtime=(int)(rsp.getEndTime() - req.getStartTime());  int status=0;  Exception exception=rsp.getException();  if (exception != null) {    if (exception instanceof SolrException)     status=((SolrException)exception).code(); else     status=500;  }  responseHeader.add("status",status);  responseHeader.add("QTime",qtime);  if (rsp.getToLog().size() > 0) {    rsp.getToLog().add("status",status);    rsp.getToLog().add("QTime",qtime);  }  SolrParams params=req.getParams();  if (null != handler && params.getBool(CommonParams.HEADER_ECHO_HANDLER,false)) {    responseHeader.add("handler",handler.getName());  }  String ep=params.get(CommonParams.HEADER_ECHO_PARAMS,null);  if (ep != null) {    EchoParamStyle echoParams=EchoParamStyle.get(ep);    if (echoParams == null) {      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Invalid value '" + ep + "' for "+ CommonParams.HEADER_ECHO_PARAMS+ " parameter, use '"+ EchoParamStyle.EXPLICIT+ "' or '"+ EchoParamStyle.ALL+ "'");    }    if (echoParams == EchoParamStyle.EXPLICIT) {      responseHeader.add("params",req.getOriginalParams().toNamedList());    } else     if (echoParams == EchoParamStyle.ALL) {      responseHeader.add("params",req.getParams().toNamedList());    }  }}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  Signature sig;  try {    sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(Base64.decode(signature))) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");  }  return false;}  }
class C{  public BDS(int featureCount,Regressor evaluator,int folds){  setFeatureCount(featureCount);  setFolds(folds);  setEvaluator(evaluator);}  }
class C{  private void negotiateScan(final ScannerIOMetadata metadata){  ScannerDevice device=metadata.getDevice();  try {    device.setShowProgressBar(false);    if (!showUI) {      device.setResolution(resolution);      if (metadata instanceof TwainIOMetadata) {        TwainSource source=((TwainIOMetadata)metadata).getSource();        source.setXferMech(scanMode);        source.setImageFileFormat(TwainConstants.TWFF_BMP);        source.setCapability(TwainConstants.CAP_DUPLEXENABLED,duplex == true ? 1 : 0);        source.setCapability(TwainConstants.CAP_FEEDERENABLED,adf);        source.setCapability(TwainConstants.ICAP_PIXELTYPE,bpp);        source.setCapability(TwainConstants.ICAP_SUPPORTEDSIZES,size);        source.setCapability(TwainConstants.ICAP_BRIGHTNESS,brightness);        source.setCapability(TwainConstants.ICAP_CONTRAST,contrast);      }    }    device.setShowUserInterface(showUI);  } catch (  ScannerIOException e) {    e.printStackTrace();    endProcess(true,false);  }}  }
class C{  Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    int length=this.length();    writer.write('[');    if (length == 1) {      JSONObject.writeValue(writer,this.myArrayList.get(0),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      for (int i=0; i < length; i+=1) {        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        JSONObject.indent(writer,newindent);        JSONObject.writeValue(writer,this.myArrayList.get(i),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      JSONObject.indent(writer,indent);    }    writer.write(']');    return writer;  } catch (  IOException e) {    throw new JSONException(e);  }}  }
class C{  public TypeBinding upperBound(){  if (this.firstBound != null) {    return this.firstBound;  }  return this.superclass;}  }
class C{  public void onDescriptorDownload(@NotNull IdeaPluginDescriptor descriptor){  PluginId id=descriptor.getPluginId();  IdeaPluginDescriptor existing=PluginManager.getPlugin(id);  if (existing == null || existing.isBundled() || wasUpdated(id)) {    return;  }  boolean newer=PluginDownloader.compareVersionsSkipBroken(existing,descriptor.getVersion()) > 0 && !PluginManagerCore.isIncompatible(descriptor);  String idString=id.getIdString();synchronized (myLock) {    List<String> outdatedPlugins=myUpdateSettings.getOutdatedPlugins();    if (newer) {      if (!outdatedPlugins.contains(idString)) {        outdatedPlugins.add(idString);      }    } else {      outdatedPlugins.remove(idString);    }  }}  }
class C{  public static ScheduledThreadPoolExecutor newScheduledThreadPool(int corePoolSize,ThreadFactory threadFactory){  return newScheduledThreadPoolExecutor(corePoolSize,threadFactory);}  }
class C{  static private Element storePathKey(OPath path){  Element elem=new Element("path");  elem.setAttribute("pathName",path.getName());  elem.setAttribute("blockName","" + path.getBlock().getSystemName());  return elem;}  }
class C{  private static void addServerLocator(Integer distributedSystemId,LocatorMembershipListener locatorListener,DistributionLocatorId locator){  if (!locator.isServerLocator()) {    return;  }  ConcurrentHashMap<Integer,Set<String>> allServerLocatorsInfo=(ConcurrentHashMap<Integer,Set<String>>)locatorListener.getAllServerLocatorsInfo();  Set<String> locatorsSet=new CopyOnWriteHashSet<String>();  locatorsSet.add(locator.toString());  Set<String> existingValue=allServerLocatorsInfo.putIfAbsent(distributedSystemId,locatorsSet);  if (existingValue != null) {    if (!existingValue.contains(locator.toString())) {      existingValue.add(locator.toString());    }  }}  }
class C{  public Dialog(Component parent,String title,List mediaList){  super(JOptionPane.getFrameForComponent(parent),title);  listeners.put("OKButtonAction",new OKButtonAction());  listeners.put("CancelButtonAction",new CancelButtonAction());  CSSMediaPanel panel=new CSSMediaPanel();  panel.setMedia(mediaList);  getContentPane().add(panel,BorderLayout.CENTER);  getContentPane().add(createButtonsPanel(),BorderLayout.SOUTH);}  }
class C{  @Override public final boolean sendValues(){  return true;}  }
class C{  private void ensureSortedByIndex(){  if (currentSortOrder != SORT_ORDER_BY_INDEX) {    Collections.sort(samples,INDEX_COMPARATOR);    currentSortOrder=SORT_ORDER_BY_INDEX;  }}  }
class C{  public static void v(String msg){  if (DEBUG)   android.util.Log.v(TAG,buildMessage(msg));}  }
class C{  private void emitMapPut(Method method,String fieldName,StringBuilder builder){  builder.append("    public void ");  builder.append(getMapPutterName(fieldName));  builder.append("(String k, ");  builder.append(getTypeArgumentImplName((ParameterizedType)method.getGenericReturnType(),1));  builder.append(" v) {\n      ");  builder.append(getEnsureName(fieldName));  builder.append("();\n      ");  builder.append(fieldName);  builder.append(".put(k, v);\n");  builder.append("    }\n\n");}  }
class C{  public LocalDate withYearOfCentury(int yearOfCentury){  return withLocalMillis(getChronology().yearOfCentury().set(getLocalMillis(),yearOfCentury));}  }
class C{  public void push(Stack<T> v,T new_ele){  length++;  v.elements.add(new_ele);}  }
class C{  public MetaDataRegressionTest(String name){  super(name);}  }
class C{  @Override protected void restoreState(){  changed=storedChanged;  logLikelihood=storedLogLikelihood;  likelihoodKnown=storedLikelihoodKnown;  trace=storedTrace;  traceKnown=storedTraceKnown;  residualKnown=storedResidualKnown;  LxFKnown=storedLxFKnown;  double[] temp=residual;  residual=storedResidual;  storedResidual=temp;  temp=LxF;  LxF=storedLxF;  storedLxF=temp;  logDetCol=storedLogDetCol;  logDetColKnown=storedLogDetColKnown;  factorsKnown=storedFactorsKnown;  loadingsKnown=storedLoadingsKnown;  dataKnown=storedDataKnown;  totalRecompute=storedTotalRecompute;  changedValues=storedChangedValues;}  }
class C{  public void nodeChanged(boolean save,int keyID,String name,String description,boolean isSummary,String imageIndicator){  log.config("Save=" + save + ", KeyID="+ keyID+ ", Name="+ name+ ", Description="+ description+ ", IsSummary="+ isSummary+ ", ImageInd="+ imageIndicator+ ", root="+ m_root);  if (keyID == 0)   return;  MTreeNode node=m_root.findNode(keyID);  if (node == null && save) {    node=new MTreeNode(keyID,0,name,description,m_root.getNode_ID(),isSummary,imageIndicator,false,null);    m_root.add(node);  } else   if (node != null && save) {    node.setName(name);    node.setAllowsChildren(isSummary);  } else   if (node != null && !save) {    MTreeNode parent=(MTreeNode)node.getParent();    node.removeFromParent();    node=parent;  } else {    log.log(Level.SEVERE,"Save=" + save + ", KeyID="+ keyID+ ", Node="+ node);    node=null;  }  if (node == null)   return;  tree.updateUI();  TreePath treePath=new TreePath(node.getPath());  tree.setSelectionPath(treePath);  tree.makeVisible(treePath);  tree.scrollPathToVisible(treePath);}  }
class C{  public static void dump(BaseEntry entry,OutputStream out) throws IOException {  Writer w=new OutputStreamWriter(out);  XmlWriter xmlW=new XmlWriter(w,false);  entry.generateAtom(xmlW,new ExtensionProfile());  w.flush();}  }
class C{  public Object next(){  return iterator.next();}  }
class C{  public MoreLikeThisQueryBuilder unlike(String... unlikeTexts){  this.unlikeTexts=new ArrayList<>();  return addUnlikeText(unlikeTexts);}  }
class C{  public static BoolQueryBuilder boolQuery(){  return new BoolQueryBuilder();}  }
class C{  public CIDFontType2(final PdfObjectReader currentPdfFile,final String substituteFontFile){  isCIDFont=true;  TTstreamisCID=true;  glyphs=new TTGlyphs();  init(currentPdfFile);  this.substituteFontFile=substituteFontFile;}  }
class C{  private static void addSessionInfo(SessionInformation sessionInformation,Element parent){  parent.addElement(XML_USER_TEXT).addText(sessionInformation.getUser());  parent.addElement(XML_USERNAME_TEXT).add(DocumentHelper.createCDATA(sessionInformation.getUserName()));  parent.addElement(XML_OFFICECODE_TEXT).addText(sessionInformation.getOfficeCode());  parent.addElement(XML_OFFICENAME_TEXT).add(DocumentHelper.createCDATA(sessionInformation.getOfficeName()));  parent.addElement(XML_OFFICEENABLED_TEXT).addText(sessionInformation.getOfficeEnabled());  parent.addElement(XML_OTHEROFFICE_TEXT).addText(sessionInformation.getOtherOffice());  parent.addElement(XML_SESSIONID_TEXT).addText(sessionInformation.getSessionId());  parent.addElement(XML_CASESENSITIVE_TEXT).addText(sessionInformation.getCaseSensitive());}  }
class C{  protected void updateVelocity(int i){  Solution particle=particles[i];  Solution localBestParticle=localBestParticles[i];  Solution leader=selectLeader();  double r1=PRNG.nextDouble();  double r2=PRNG.nextDouble();  double C1=PRNG.nextDouble(1.5,2.0);  double C2=PRNG.nextDouble(1.5,2.0);  double W=PRNG.nextDouble(0.1,0.5);  for (int j=0; j < problem.getNumberOfVariables(); j++) {    double particleValue=EncodingUtils.getReal(particle.getVariable(j));    double localBestValue=EncodingUtils.getReal(localBestParticle.getVariable(j));    double leaderValue=EncodingUtils.getReal(leader.getVariable(j));    velocities[i][j]=W * velocities[i][j] + C1 * r1 * (localBestValue - particleValue) + C2 * r2 * (leaderValue - particleValue);  }}  }
class C{  private Object[] singleRow(int row){  Object[] res=new Object[this.nFields];  for (int i=0; i < this.nFields; i+=1) {    if (this.isNull == null || !this.isNull[row * this.nFields + i]) {      res[i]=ArrayFuncs.newInstance(this.types[i],1);      System.arraycopy(this.data[i],row,res[i],0,1);    }  }  return res;}  }
class C{  public static boolean parseAndWrapStringContent(PsiBuilder b,int l){  assert b instanceof PerlBuilder;  IElementType tokenType=b.getTokenType();  if (tokenType instanceof PerlStringContentTokenType) {    PerlStringWrapper stringWrapper=((PerlBuilder)b).getStringWrapper();    if (stringWrapper == null || !stringWrapper.canProcess() || tokenType != STRING_IDENTIFIER) {      b.advanceLexer();    } else {      stringWrapper.wrapNextToken((PerlBuilder)b);    }    return true;  }  return false;}  }
class C{  private void checkHost(HostResource host,String domainName,String repoId){  assertThat(host).isNotNull();  assertThat(host.getFullyQualifiedHostName()).isEqualTo(domainName);  assertThat(host.getRepoId()).isEqualTo(repoId);}  }
class C{  public void append(final StringBuffer sb){  if (sb == null) {    return;  }  provideCapacity(length + sb.length());  sb.getChars(0,sb.length(),c,length);  length+=sb.length();}  }
class C{  public Iterator<String[]> iterator(){  try {    return new CSVIterator(this);  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public long removeIndex(int index){  if (index >= size)   throw new IndexOutOfBoundsException(String.valueOf(index));  long[] items=this.items;  long value=items[index];  size--;  if (ordered)   System.arraycopy(items,index + 1,items,index,size - index); else   items[index]=items[size];  return value;}  }
class C{  private static long bit(int bitIndex){  return 1L << (bitIndex & BIT_INDEX_MASK);}  }
class C{  protected final void fireColumnEvent(int idx,int prev){  Object[] lstnrs=m_listeners.getArray();  for (int i=0; i < lstnrs.length; ++i)   ((ColumnListener)lstnrs[i]).columnChanged(this,idx,prev);}  }
class C{  public static void showMessage(String messageKey){  _callback.showMessage(messageKey);}  }
class C{  public void destroy() throws Exception {  stop();  FileUtils.deleteDirectory(dataDir);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  @Override public void configure(){  if (isAutoRange()) {    autoAdjustRange();  }}  }
class C{  private String locateFilebyName(String name,String wiresharkDir) throws FileNotFoundException {  File f=new File(wiresharkDir);  String[] files=f.list();  for (int i=0; i < files.length; i++) {    if (files[i].contains(name)) {      return files[i];    }  }  throw new java.io.FileNotFoundException(wiresharkDir);}  }
class C{  public VisorIgfsProfilerEntry(String path,long ts,IgfsMode mode,long size,long bytesRead,long readTime,long userReadTime,long bytesWritten,long writeTime,long userWriteTime,VisorIgfsProfilerUniformityCounters counters){  assert counters != null;  this.path=path;  this.ts=ts;  this.mode=mode;  this.size=size;  this.bytesRead=bytesRead;  this.readTime=readTime;  this.userReadTime=userReadTime;  this.bytesWritten=bytesWritten;  this.writeTime=writeTime;  this.userWriteTime=userWriteTime;  this.counters=counters;  readSpeed=speed(bytesRead,readTime);  writeSpeed=speed(bytesWritten,writeTime);}  }
class C{  @Override public String toString(){  StringWriter writer=new StringWriter();  writer.write(getClass().getSimpleName());  writer.write("(");  boolean first=true;  for (  Emotion emotion : getEmotions().values()) {    if (!first) {      writer.write(", ");    } else {      first=false;    }    writer.write(emotion.toString());  }  writer.write(")");  return writer.toString();}  }
class C{  @Override public void onCountDownStart(){  Toast.makeText(StyleActivity.this,"onCountDownStart",Toast.LENGTH_SHORT).show();}  }
class C{  public void testMac03() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  String provider=null;  for (int i=0; i < validValues.length; i++) {    try {      Mac.getInstance(validValues[i],provider);      fail("IllegalArgumentException must be thrown when provider is null");    } catch (    IllegalArgumentException e) {    }    try {      Mac.getInstance(validValues[i],"");      fail("IllegalArgumentException must be thrown when provider is empty");    } catch (    IllegalArgumentException e) {    }    for (int j=1; j < invalidValues.length; j++) {      try {        Mac.getInstance(validValues[i],invalidValues[j]);        fail("NoSuchProviderException must be thrown (algorithm: ".concat(validValues[i]).concat(" provider: ").concat(invalidValues[j]).concat(")"));      } catch (      NoSuchProviderException e) {      }    }  }}  }
class C{  public T seed(DeterministicSeed seed){  this.seed=seed;  return self();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Sage.durFormat(getLong(stack));}  }
class C{  private void preprocess(HGQueryCondition c){  if (c instanceof LinkCondition) {    LinkCondition lc=(LinkCondition)c;    if (lc.getTargetSet().contains(hg.constant(hg.anyHandle()))) {      lc.getTargetSet().remove(hg.constant(hg.anyHandle()));      lc.getTargetSet().add(hg.constant((HGHandle)graph.getHandleFactory().anyHandle()));    }  } else   if (c instanceof OrderedLinkCondition) {    OrderedLinkCondition lc=(OrderedLinkCondition)c;    for (int i=0; i < lc.getTargets().length; i++)     if (lc.getTargets()[i].equals(hg.constant(hg.anyHandle())))     lc.getTargets()[i]=hg.constant((HGHandle)graph.getHandleFactory().anyHandle());  } else   if (c instanceof Not) {    if (((Not)c).getPredicate() instanceof HGQueryCondition)     preprocess((HGQueryCondition)((Not)c).getPredicate());  } else   if (c instanceof And) {    for (    HGQueryCondition sub : (And)c)     preprocess(sub);  } else   if (c instanceof Or) {    for (    HGQueryCondition sub : (Or)c)     preprocess(sub);  } else   if (c instanceof MapCondition) {    preprocess(((MapCondition)c).getCondition());  }}  }
class C{  public void recogerDatosDictamenExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  saveCurrentInvocation(KeysClientsInvocations.VALORACION_DICTAMEN,request);  removeInTemporalSession(request,ValoracionConstants.LISTA_BOLETINES_OFICIALES_KEY);  setInTemporalSession(request,ValoracionConstants.LISTA_BOLETINES_OFICIALES_KEY,getGestionValoracionBI(request).getBoletinesOficiales());  setReturnActionFordward(request,mappings.findForward("cambio_estado"));}  }
class C{  @After public void clearStored(){  if (housePortal != null) {    StendhalRPZone zone=housePortal.getZone();    if (zone != null) {      zone.remove(housePortal);      housePortal=null;    }  }  if (chest != null) {    StendhalRPZone zone=chest.getZone();    if (zone != null) {      zone.remove(chest);      chest=null;    }  }  PlayerTestHelper.removeNPC("Cyk");  PlayerTestHelper.removeNPC("Mr Taxman");  PlayerTestHelper.removeNPC("Roger Frampton");}  }
class C{  public static Map<String,Object> jsonToStorageEntry(String fmJson) throws IOException {  Map<String,Object> entry=new HashMap<String,Object>();  MappingJsonFactory f=new MappingJsonFactory();  JsonParser jp;  String tpSrcPort="NOT_SPECIFIED";  String tpDstPort="NOT_SPECIFIED";  String ipProto="NOT_SPECIFIED";  try {    jp=f.createParser(fmJson);  } catch (  JsonParseException e) {    throw new IOException(e);  }  jp.nextToken();  if (jp.getCurrentToken() != JsonToken.START_OBJECT) {    throw new IOException("Expected START_OBJECT");  }  while (jp.nextToken() != JsonToken.END_OBJECT) {    if (jp.getCurrentToken() != JsonToken.FIELD_NAME) {      throw new IOException("Expected FIELD_NAME");    }    String n=jp.getCurrentName();    jp.nextToken();switch (n) {case StaticFlowEntryPusher.COLUMN_NAME:      entry.put(StaticFlowEntryPusher.COLUMN_NAME,jp.getText());    break;case StaticFlowEntryPusher.COLUMN_SWITCH:  entry.put(StaticFlowEntryPusher.COLUMN_SWITCH,jp.getText());break;case StaticFlowEntryPusher.COLUMN_TABLE_ID:entry.put(StaticFlowEntryPusher.COLUMN_TABLE_ID,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ACTIVE:entry.put(StaticFlowEntryPusher.COLUMN_ACTIVE,jp.getText());break;case StaticFlowEntryPusher.COLUMN_IDLE_TIMEOUT:entry.put(StaticFlowEntryPusher.COLUMN_IDLE_TIMEOUT,jp.getText());break;case StaticFlowEntryPusher.COLUMN_HARD_TIMEOUT:entry.put(StaticFlowEntryPusher.COLUMN_HARD_TIMEOUT,jp.getText());break;case StaticFlowEntryPusher.COLUMN_PRIORITY:entry.put(StaticFlowEntryPusher.COLUMN_PRIORITY,jp.getText());break;case StaticFlowEntryPusher.COLUMN_COOKIE:entry.put(StaticFlowEntryPusher.COLUMN_COOKIE,jp.getText());break;case StaticFlowEntryPusher.COLUMN_IN_PORT:entry.put(StaticFlowEntryPusher.COLUMN_IN_PORT,jp.getText());break;case StaticFlowEntryPusher.COLUMN_DL_SRC:entry.put(StaticFlowEntryPusher.COLUMN_DL_SRC,jp.getText());break;case StaticFlowEntryPusher.COLUMN_DL_DST:entry.put(StaticFlowEntryPusher.COLUMN_DL_DST,jp.getText());break;case StaticFlowEntryPusher.COLUMN_DL_VLAN:entry.put(StaticFlowEntryPusher.COLUMN_DL_VLAN,jp.getText());break;case StaticFlowEntryPusher.COLUMN_DL_VLAN_PCP:entry.put(StaticFlowEntryPusher.COLUMN_DL_VLAN_PCP,jp.getText());break;case StaticFlowEntryPusher.COLUMN_DL_TYPE:entry.put(StaticFlowEntryPusher.COLUMN_DL_TYPE,jp.getText());break;case StaticFlowEntryPusher.COLUMN_NW_TOS:entry.put(StaticFlowEntryPusher.COLUMN_NW_TOS,jp.getText());break;case StaticFlowEntryPusher.COLUMN_NW_ECN:entry.put(StaticFlowEntryPusher.COLUMN_NW_ECN,jp.getText());break;case StaticFlowEntryPusher.COLUMN_NW_DSCP:entry.put(StaticFlowEntryPusher.COLUMN_NW_DSCP,jp.getText());break;case StaticFlowEntryPusher.COLUMN_NW_PROTO:entry.put(StaticFlowEntryPusher.COLUMN_NW_PROTO,jp.getText());ipProto=jp.getText();break;case StaticFlowEntryPusher.COLUMN_NW_SRC:entry.put(StaticFlowEntryPusher.COLUMN_NW_SRC,jp.getText());break;case StaticFlowEntryPusher.COLUMN_NW_DST:entry.put(StaticFlowEntryPusher.COLUMN_NW_DST,jp.getText());break;case StaticFlowEntryPusher.COLUMN_SCTP_SRC:entry.put(StaticFlowEntryPusher.COLUMN_SCTP_SRC,jp.getText());break;case StaticFlowEntryPusher.COLUMN_SCTP_DST:entry.put(StaticFlowEntryPusher.COLUMN_SCTP_DST,jp.getText());break;case StaticFlowEntryPusher.COLUMN_UDP_SRC:entry.put(StaticFlowEntryPusher.COLUMN_UDP_SRC,jp.getText());break;case StaticFlowEntryPusher.COLUMN_UDP_DST:entry.put(StaticFlowEntryPusher.COLUMN_UDP_DST,jp.getText());break;case StaticFlowEntryPusher.COLUMN_TCP_SRC:entry.put(StaticFlowEntryPusher.COLUMN_TCP_SRC,jp.getText());break;case StaticFlowEntryPusher.COLUMN_TCP_DST:entry.put(StaticFlowEntryPusher.COLUMN_TCP_DST,jp.getText());break;case StaticFlowEntryPusher.COLUMN_TP_SRC:entry.put(StaticFlowEntryPusher.COLUMN_TP_SRC,jp.getText());tpSrcPort=jp.getText();break;case StaticFlowEntryPusher.COLUMN_TP_DST:entry.put(StaticFlowEntryPusher.COLUMN_TP_DST,jp.getText());tpDstPort=jp.getText();break;case StaticFlowEntryPusher.COLUMN_ICMP_TYPE:entry.put(StaticFlowEntryPusher.COLUMN_ICMP_TYPE,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ICMP_CODE:entry.put(StaticFlowEntryPusher.COLUMN_ICMP_CODE,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ARP_OPCODE:entry.put(StaticFlowEntryPusher.COLUMN_ARP_OPCODE,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ARP_SHA:entry.put(StaticFlowEntryPusher.COLUMN_ARP_SHA,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ARP_DHA:entry.put(StaticFlowEntryPusher.COLUMN_ARP_DHA,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ARP_SPA:entry.put(StaticFlowEntryPusher.COLUMN_ARP_SPA,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ARP_DPA:entry.put(StaticFlowEntryPusher.COLUMN_ARP_DPA,jp.getText());break;case StaticFlowEntryPusher.COLUMN_NW6_SRC:entry.put(StaticFlowEntryPusher.COLUMN_NW6_SRC,jp.getText());break;case StaticFlowEntryPusher.COLUMN_NW6_DST:entry.put(StaticFlowEntryPusher.COLUMN_NW6_DST,jp.getText());break;case StaticFlowEntryPusher.COLUMN_IPV6_FLOW_LABEL:entry.put(StaticFlowEntryPusher.COLUMN_IPV6_FLOW_LABEL,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ICMP6_TYPE:entry.put(StaticFlowEntryPusher.COLUMN_ICMP6_TYPE,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ICMP6_CODE:entry.put(StaticFlowEntryPusher.COLUMN_ICMP6_CODE,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ND_SLL:entry.put(StaticFlowEntryPusher.COLUMN_ND_SLL,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ND_TLL:entry.put(StaticFlowEntryPusher.COLUMN_ND_TLL,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ND_TARGET:entry.put(StaticFlowEntryPusher.COLUMN_ND_TARGET,jp.getText());break;case StaticFlowEntryPusher.COLUMN_MPLS_LABEL:entry.put(StaticFlowEntryPusher.COLUMN_MPLS_LABEL,jp.getText());break;case StaticFlowEntryPusher.COLUMN_MPLS_TC:entry.put(StaticFlowEntryPusher.COLUMN_MPLS_TC,jp.getText());break;case StaticFlowEntryPusher.COLUMN_MPLS_BOS:entry.put(StaticFlowEntryPusher.COLUMN_MPLS_BOS,jp.getText());break;case StaticFlowEntryPusher.COLUMN_METADATA:entry.put(StaticFlowEntryPusher.COLUMN_METADATA,jp.getText());break;case StaticFlowEntryPusher.COLUMN_TUNNEL_ID:entry.put(StaticFlowEntryPusher.COLUMN_TUNNEL_ID,jp.getText());break;case StaticFlowEntryPusher.COLUMN_PBB_ISID:entry.put(StaticFlowEntryPusher.COLUMN_PBB_ISID,jp.getText());break;case StaticFlowEntryPusher.COLUMN_ACTIONS:entry.put(StaticFlowEntryPusher.COLUMN_ACTIONS,jp.getText());break;case StaticFlowEntryPusher.COLUMN_INSTR_APPLY_ACTIONS:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_APPLY_ACTIONS,jp.getText());break;case StaticFlowEntryPusher.COLUMN_INSTR_WRITE_ACTIONS:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_WRITE_ACTIONS,jp.getText());break;case StaticFlowEntryPusher.COLUMN_INSTR_CLEAR_ACTIONS:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_CLEAR_ACTIONS,jp.getText());break;case StaticFlowEntryPusher.COLUMN_INSTR_GOTO_METER:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_GOTO_METER,jp.getText());break;case StaticFlowEntryPusher.COLUMN_INSTR_GOTO_TABLE:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_GOTO_TABLE,jp.getText());break;case StaticFlowEntryPusher.COLUMN_INSTR_WRITE_METADATA:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_WRITE_METADATA,jp.getText());break;case StaticFlowEntryPusher.COLUMN_INSTR_EXPERIMENTER:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_EXPERIMENTER,jp.getText());break;default :log.error("Could not decode field from JSON string: {}",n);break;}}if (ipProto.equalsIgnoreCase("tcp")) {if (!tpSrcPort.equals("NOT_SPECIFIED")) {entry.remove(StaticFlowEntryPusher.COLUMN_TP_SRC);entry.put(StaticFlowEntryPusher.COLUMN_TCP_SRC,tpSrcPort);}if (!tpDstPort.equals("NOT_SPECIFIED")) {entry.remove(StaticFlowEntryPusher.COLUMN_TP_DST);entry.put(StaticFlowEntryPusher.COLUMN_TCP_DST,tpDstPort);}} else if (ipProto.equalsIgnoreCase("udp")) {if (!tpSrcPort.equals("NOT_SPECIFIED")) {entry.remove(StaticFlowEntryPusher.COLUMN_TP_SRC);entry.put(StaticFlowEntryPusher.COLUMN_UDP_SRC,tpSrcPort);}if (!tpDstPort.equals("NOT_SPECIFIED")) {entry.remove(StaticFlowEntryPusher.COLUMN_TP_DST);entry.put(StaticFlowEntryPusher.COLUMN_UDP_DST,tpDstPort);}} else if (ipProto.equalsIgnoreCase("sctp")) {if (!tpSrcPort.equals("NOT_SPECIFIED")) {entry.remove(StaticFlowEntryPusher.COLUMN_TP_SRC);entry.put(StaticFlowEntryPusher.COLUMN_SCTP_SRC,tpSrcPort);}if (!tpDstPort.equals("NOT_SPECIFIED")) {entry.remove(StaticFlowEntryPusher.COLUMN_TP_DST);entry.put(StaticFlowEntryPusher.COLUMN_SCTP_DST,tpDstPort);}} else {log.debug("Got IP protocol of '{}' and tp-src of '{}' and tp-dst of '" + tpDstPort + "' via SFP REST API",ipProto,tpSrcPort);}return entry;}  }
class C{  private ArrayList<Completion> lookupSortedByWeight(BytesRef key,int num,boolean collectAll) throws IOException {  final ArrayList<Completion> res=new ArrayList<>(Math.min(10,num));  final BytesRef output=BytesRef.deepCopyOf(key);  for (int i=0; i < rootArcs.length; i++) {    final FST.Arc<Object> rootArc=rootArcs[i];    final FST.Arc<Object> arc=new FST.Arc<>().copyFrom(rootArc);    if (descendWithPrefix(arc,key)) {      output.length=key.length - 1;      if (collect(res,num,rootArc.label,output,arc) && !collectAll) {        if (exactFirst) {          if (!checkExistingAndReorder(res,key)) {            int exactMatchBucket=getExactMatchStartingFromRootArc(i,key);            if (exactMatchBucket != -1) {              while (res.size() >= num) {                res.remove(res.size() - 1);              }              res.add(0,new Completion(key,exactMatchBucket));            }          }        }        break;      }    }  }  return res;}  }
class C{  public void testCertificateFactory10(){  if (!X509Support) {    fail(NotSupportMsg);    return;  }  CertificateFactory[] certFs=initCertFs();  assertNotNull("CertificateFactory objects were not created",certFs);  byte[] bb={};  InputStream is=new ByteArrayInputStream(bb);  Collection<?> colCer;  Collection<?> colCrl;  for (int i=0; i < certFs.length; i++) {    try {      certFs[i].generateCertificate(null);      fail("generateCertificate must thrown CertificateException or NullPointerEXception when input stream is null");    } catch (    CertificateException e) {    }catch (    NullPointerException e) {    }    is=new ByteArrayInputStream(bb);    try {      certFs[i].generateCertificates(null);      fail("generateCertificates must throw CertificateException or NullPointerException when input stream is null");    } catch (    CertificateException e) {    }catch (    NullPointerException e) {    }    is=new ByteArrayInputStream(bb);    try {      certFs[i].generateCertificate(is);    } catch (    CertificateException e) {    }    is=new ByteArrayInputStream(bb);    try {      colCer=certFs[i].generateCertificates(is);      if (colCer != null) {        assertTrue("Not empty certificate collection",colCer.isEmpty());      }    } catch (    CertificateException e) {    }  }  for (int i=0; i < certFs.length; i++) {    try {      certFs[i].generateCRL(null);    } catch (    CRLException e) {    }catch (    NullPointerException e) {    }    try {      colCrl=certFs[i].generateCRLs(null);      if (colCrl != null) {        assertTrue("Not empty CRL collection was returned from null stream",colCrl.isEmpty());      }    } catch (    CRLException e) {    }catch (    NullPointerException e) {    }    is=new ByteArrayInputStream(bb);    try {      certFs[i].generateCRL(is);    } catch (    CRLException e) {    }    is=new ByteArrayInputStream(bb);    try {      certFs[i].generateCRLs(is);      colCrl=certFs[i].generateCRLs(null);      if (colCrl != null) {        assertTrue("Not empty CRL collection was returned from empty stream",colCrl.isEmpty());      }    } catch (    CRLException e) {    }  }}  }
class C{  public static boolean isProtected(int flags){  return (flags & AccProtected) != 0;}  }
class C{  public Exception(java.lang.String s){}  }
class C{  public void testConstrStringWithoutExpPos2(){  String a="+732546982374982347892379283571094797.287346782359284756";  int aScale=18;  BigInteger bA=new BigInteger("732546982374982347892379283571094797287346782359284756");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  public Enumeration<String> communities(){  return commList.elements();}  }
class C{  @VisibleForTesting static String escapeSqlString(String string){  return string.replaceAll("'","''");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:26.736 -0500",hash_original_method="C3125975C33A76683DB83E92F1059496",hash_generated_method="D6F6173D5989C7938638DB17648EF907") public int enumerate(ThreadGroup[] groups,boolean recurse){  return enumerateGeneric(groups,recurse,0,false);}  }
class C{  @Override protected boolean isZoneLevelResource(){  return false;}  }
class C{  public void restore(String database,boolean isSchema){  getBot().log(this,"Restoring",Bot.FINE,this,database);}  }
class C{  public static String calculateCidrFromIpV4Range(long ipLow,long ipHigh){  Preconditions.checkArgument(ipLow <= ipHigh,String.format("ipLow should be less than or equal to ipHigh, ipLow=%s, ipHigh=%s",ipLow,ipHigh));  int inverseSubnetMask=(int)(ipHigh - ipLow);  int subnetMask=~inverseSubnetMask;  Preconditions.checkState((inverseSubnetMask == 0) || ((inverseSubnetMask & (inverseSubnetMask + 1)) == 0),String.format("inverseSubnetMask should be 0 or " + "inverseSubnetMask + 1 should be a power of 2, inverseSubnetMask=%s, ipLow=%s, ipHigh=%s",Long.toBinaryString(ipLow),Long.toBinaryString(ipHigh),Long.toBinaryString(inverseSubnetMask)));  Preconditions.checkState((ipLow & subnetMask) == ipLow,String.format("ipLow & subnetMask should equal ipLow, ipLow = %s, ipHigh= %s, subnetMask= %s",Long.toBinaryString(ipLow),Long.toBinaryString(ipHigh),Long.toBinaryString(subnetMask)));  int cidr=(32 - Integer.numberOfTrailingZeros(subnetMask));  InetAddress subnetAddress=longToIp(ipLow);  return subnetAddress.getHostAddress() + "/" + cidr;}  }
class C{  public UserNamespaceAuthorizationEntity createUserNamespaceAuthorizationEntity(UserNamespaceAuthorizationKey userNamespaceAuthorizationKey,List<NamespacePermissionEnum> namespacePermissions){  NamespaceEntity namespaceEntity=namespaceDao.getNamespaceByCd(userNamespaceAuthorizationKey.getNamespace());  if (namespaceEntity == null) {    namespaceEntity=namespaceDaoTestHelper.createNamespaceEntity(userNamespaceAuthorizationKey.getNamespace());  }  return createUserNamespaceAuthorizationEntity(userNamespaceAuthorizationKey.getUserId(),namespaceEntity,namespacePermissions);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.752 -0500",hash_original_method="50074BA46CE711F7C7225760B0DBD702",hash_generated_method="80C77194FFCD32BB305D561965B5100C") public void error(Object message,Throwable exception){  log(Level.SEVERE,String.valueOf(message),exception);}  }
class C{  public MessageEntry(){  super();  this.getCategories().add(CATEGORY);}  }
class C{  public void clearRecentFiles(){  view.clearRecentFiles();}  }
class C{  public void init(){  try {    finModel=option.openModelFile();    if (finModel == null) {      System.out.println("Couldn't open model file");      return;    }    data=new Data(option);    data.readCpMaps(finModel);    data.readLbMaps(finModel);    dict=new Dictionary(option,data);    dict.readDict(finModel);    feagen=new FeatureGen(option,data,dict);    feagen.readFeatures(finModel);    inference=new Inference();    model=new Model(option,data,dict,feagen,null,inference,null);    model.initInference();    finModel.close();  } catch (  IOException e) {    System.out.println("Couldn't load the model, check the model file again");    System.out.println(e.toString());  }  intCps=new ArrayList();  initialized=true;}  }
class C{  public long run(String[] args) throws Exception {  int reps=Integer.parseInt(args[0]);  Dummy dummy=new Dummy();  StreamBuffer sbuf=new StreamBuffer();  doReps(sbuf,dummy,1);  long start=System.currentTimeMillis();  doReps(sbuf,dummy,reps);  return System.currentTimeMillis() - start;}  }
class C{  public void clear() throws BackingStoreException {  Preferences preferences=getUnderlyingPreferences();  preferences.clear();}  }
class C{  public GDSMessage(String template){  this.template=template;  params=new String[getParamCountInternal()];}  }
class C{  @Override public void write(byte[] buf) throws IOException {  write(buf,0,buf.length);}  }
class C{  private static void validateNewAddition(Vector paths,ExpressionOwner owner,LocPathIterator path) throws RuntimeException {  assertion(owner.getExpression() == path,"owner.getExpression() != path!!!");  int n=paths.size();  for (int i=0; i < n; i++) {    ExpressionOwner ew=(ExpressionOwner)paths.elementAt(i);    assertion(ew != owner,"duplicate owner on the list!!!");    assertion(ew.getExpression() != path,"duplicate expression on the list!!!");  }}  }
class C{  public <T,X>void processObserverMethod(@Observes ProcessObserverMethod<T,X> pom,BeanManager beanManager){  final Type type=pom.getObserverMethod().getObservedType();  if (type instanceof Class<?>) {    final Class<?> clazz=(Class<?>)type;    if (MvcEvent.class.isAssignableFrom(clazz)) {      addObservedEvent((Class<? extends MvcEvent>)type);    }  }}  }
class C{  public static boolean equals(String a,String b){  if (a == null) {    return b == null;  }  return a.equals(b);}  }
class C{  protected boolean writeSpaceship(int type,boolean simulate){  if (type != COMPARE_TO)   return false;  if (!simulate) {    MethodVisitor mv=getController().getMethodVisitor();    mv.visitInsn(DUP2);    Label l1=new Label();    mv.visitJumpInsn(IF_ICMPGE,l1);    mv.visitInsn(POP2);    mv.visitInsn(ICONST_M1);    Label l2=new Label();    mv.visitJumpInsn(GOTO,l2);    mv.visitLabel(l1);    Label l3=new Label();    mv.visitJumpInsn(IF_ICMPNE,l3);    mv.visitInsn(ICONST_0);    mv.visitJumpInsn(GOTO,l2);    mv.visitLabel(l3);    mv.visitInsn(ICONST_1);    getController().getOperandStack().replace(ClassHelper.int_TYPE,2);  }  return true;}  }
class C{  public KMZInputStream(InputStream sourceStream) throws IOException {  if (sourceStream == null) {    String message=Logging.getMessage("nullValue.InputStreamIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.zipStream=new ZipInputStream(sourceStream);  this.files=new HashMap<String,File>();  this.moveToNextEntry();}  }
class C{  public void logMessage(String message){  Log.p(message);}  }
class C{  @Override public boolean isUnderspecified(){  return true;}  }
class C{  protected void checkParameters() throws BuildException {  if (module == null || module.isEmpty()) {    throw new BuildException("Missing module parameter is required");  }}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  public X500PrivateCredential(X509Certificate cert,PrivateKey key){  if (cert == null || key == null)   throw new IllegalArgumentException();  this.cert=cert;  this.key=key;  this.alias=null;}  }
class C{  protected AdditiveExpressionImpl(){  super();}  }
class C{  public void mouseReleased(MouseEvent e){  if (SwingUtilities.isLeftMouseButton(e)) {    buttonOff(e);  }}  }
class C{  public String debugName(){  return _name;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:51.291 -0500",hash_original_method="96BEEC8FF3377FBD2EA8C52D4E2435B2",hash_generated_method="4B08AE1FE38C0BA5AFDB4FFFD2225CB6") public IOError(Throwable cause){  super(cause);}  }
class C{  public SearchRequestBuilder addField(String field){  sourceBuilder().field(field);  return this;}  }
class C{  @SuppressWarnings("deprecation") @Override public void stop(){  if (m_listenee instanceof BeanCommon) {    ((BeanCommon)m_listenee).stop();  }  if (m_tasks != null) {    for (    EvaluationTask t : m_tasks) {      t.setStopped();    }  }  m_tasks=null;  m_visual.setStatic();  m_setsComplete=0;  if (m_executorPool != null) {    m_executorPool.shutdownNow();    m_executorPool.purge();    m_executorPool=null;  }}  }
class C{  protected Double wrapKey(double k){  return new Double(k);}  }
class C{  public void add(int ctrlMask,Point2D.Double c0,Point2D.Double c1,Point2D.Double c2){  add(new Node(ctrlMask,c0,c1,c2));}  }
class C{  public long readLongMinimalBinary(final long b) throws IOException {  return readLongMinimalBinary(b,Fast.mostSignificantBit(b));}  }
class C{  @Deprecated public void removeSplashScreen(){  doSplashScreenAction("hide",null);}  }
class C{  public static void requestBugReport(Error e){  err("An unexpected error occurred. Please send a report of this to");  err("<bugs@jflex.de> and include the following information:");  err("");  printSystemInfo();  err("Exception:");  e.printStackTrace(out);  err("");  err("Please also include a specification (as small as possible)");  err("that triggers this error. You may also want to check at");  err("http://www.jflex.de if there is a newer version available");  err("that doesn't have this problem");  err("");  err("Thanks for your support.");}  }
class C{  public StringOwnTokenizer(String text,String nontokenDelims){  this(text,nontokenDelims,null);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public void layoutGraph(){  if (m_le != null) {    m_le.layoutGraph();  }}  }
class C{  static public String formatDate(Date d){  if (timeFormatter == null) {    try {      return Long.toString(d.getTime());    } catch (    Exception ignore) {      return "timestampFormatFailed";    }  }  try {synchronized (timeFormatter) {      return timeFormatter.format(d);    }  } catch (  Exception e1) {    try {      return d.toString();    } catch (    Exception e2) {      try {        return Long.toString(d.getTime());      } catch (      Exception e3) {        return "timestampFormatFailed";      }    }  }}  }
class C{  public void onPluginInstall(@NotNull IdeaPluginDescriptor descriptor){  PluginId id=descriptor.getPluginId();  boolean existing=PluginManager.isPluginInstalled(id);synchronized (myLock) {    myUpdateSettings.getOutdatedPlugins().remove(id.getIdString());    if (existing) {      myUpdatedPlugins.put(id,descriptor);    } else {      myInstalledPlugins.put(id,descriptor);    }  }}  }
class C{  public Vector3f add(float x,float y,float z){  this.x+=x;  this.y+=y;  this.z+=z;  return this;}  }
class C{  public JMXProviderException(String message){  super(message);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ExpressionsPackage.ELEMENT_REFERENCE_EXPRESSION__REFERENCE:    return reference != null;case ExpressionsPackage.ELEMENT_REFERENCE_EXPRESSION__OPERATION_CALL:  return operationCall != OPERATION_CALL_EDEFAULT;case ExpressionsPackage.ELEMENT_REFERENCE_EXPRESSION__ARGS:return args != null && !args.isEmpty();case ExpressionsPackage.ELEMENT_REFERENCE_EXPRESSION__ARRAY_SELECTOR:return arraySelector != null && !arraySelector.isEmpty();case ExpressionsPackage.ELEMENT_REFERENCE_EXPRESSION__ARRAY_ACCESS:return arrayAccess != ARRAY_ACCESS_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public CarrierPlanXmlWriterV2(Carriers carriers){  super();  this.carriers=carriers.getCarriers().values();}  }
class C{  public TileFactoryInfo(int minimumZoomLevel,int maximumZoomLevel,int totalMapZoom,int tileSize,boolean xr2l,boolean yt2b,String baseURL,String xparam,String yparam,String zparam){  this("name not provided",minimumZoomLevel,maximumZoomLevel,totalMapZoom,tileSize,xr2l,yt2b,baseURL,xparam,yparam,zparam);}  }
class C{  public void show(){  JLabel label=new JLabel(new ImageIcon(this.image));  JFrame f=new JFrame();  f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  f.getContentPane().add(label);  f.pack();  f.setVisible(true);}  }
class C{  public GridFailoverContextImpl(GridTaskSessionImpl taskSes,ComputeJobResult jobRes,GridLoadBalancerManager loadMgr,int partId,@Nullable Object affKey,@Nullable String affCacheName,@Nullable AffinityTopologyVersion topVer){  assert taskSes != null;  assert jobRes != null;  assert loadMgr != null;  this.taskSes=taskSes;  this.jobRes=jobRes;  this.loadMgr=loadMgr;  this.partId=partId;  this.affKey=affKey;  this.affCacheName=affCacheName;  this.topVer=topVer;}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  static double computeFinalSum(double[] summands){  double tmp=summands[0] + summands[1];  double simpleSum=summands[summands.length - 1];  if (Double.isNaN(tmp) && Double.isInfinite(simpleSum)) {    return simpleSum;  } else {    return tmp;  }}  }
class C{  public QuantizingColorWheelImageProducer(ColorSpace sys,int w,int h){  super(sys,w,h);}  }
class C{  public void reportPublicApi(ClassSymbol sym){}  }
class C{  private double[] alphafunction(double[] x){  if (numberOfObjectives == 2) {    if (pType == 21) {      return new double[]{x[0],1 - Math.sqrt(x[0])};    } else     if (pType == 22) {      return new double[]{x[0],1 - x[0] * x[0]};    } else     if (pType == 23) {      return new double[]{x[0],1 - Math.sqrt(x[0]) - x[0] * Math.sin(10 * x[0] * x[0]* Math.PI)};    } else     if (pType == 24) {      return new double[]{x[0],1 - x[0] - 0.05 * Math.sin(4 * Math.PI * x[0])};    } else {      throw new IllegalStateException();    }  } else   if (numberOfObjectives == 3) {    if (pType == 31) {      return new double[]{Math.cos(x[0] * Math.PI / 2) * Math.cos(x[1] * Math.PI / 2),Math.cos(x[0] * Math.PI / 2) * Math.sin(x[1] * Math.PI / 2),Math.sin(x[0] * Math.PI / 2)};    } else     if (pType == 32) {      return new double[]{1 - Math.cos(x[0] * Math.PI / 2) * Math.cos(x[1] * Math.PI / 2),1 - Math.cos(x[0] * Math.PI / 2) * Math.sin(x[1] * Math.PI / 2),1 - Math.sin(x[0] * Math.PI / 2)};    } else     if (pType == 33) {      return new double[]{x[0],x[1],3 - (Math.sin(3 * Math.PI * x[0]) + Math.sin(3 * Math.PI * x[1])) - 2 * (x[0] + x[1])};    } else     if (pType == 34) {      return new double[]{x[0] * x[1],x[0] * (1 - x[1]),(1 - x[0])};    } else {      throw new IllegalStateException();    }  } else {    throw new IllegalStateException();  }}  }
class C{  public void writeField(final String name,final char value) throws java.io.IOException {  writeField(name,Character.toString(value));}  }
class C{  private synchronized void writeObject(java.io.ObjectOutputStream s) throws IOException {  if (actions == null)   getActions();  s.defaultWriteObject();}  }
class C{  private static double euclideanNorm(double vector[]){  int n=vector.length;  if (n < 1) {    return 0;  }  if (n == 1) {    return Math.abs(vector[0]);  }  double scale=0;  double sum=1;  for (int i=0; i < n; i++) {    if (vector[i] != 0) {      double abs=Math.abs(vector[i]);      if (scale < abs) {        double t=scale / abs;        sum=1 + sum * (t * t);        scale=abs;      } else {        double t=abs / scale;        sum+=t * t;      }    }  }  return scale * Math.sqrt(sum);}  }
class C{  public void testGetInstanceStringString02() throws IllegalArgumentException, NoSuchAlgorithmException, NoSuchProviderException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  String provider=null;  for (int i=0; i < validValues.length; i++) {    try {      KeyAgreement.getInstance(validValues[i],provider);      fail("IllegalArgumentException must be thrown when provider is null");    } catch (    IllegalArgumentException e) {    }    try {      KeyAgreement.getInstance(validValues[i],"");      fail("IllegalArgumentException must be thrown when provider is empty");    } catch (    IllegalArgumentException e) {    }    for (int j=1; j < invalidValues.length; j++) {      try {        KeyAgreement.getInstance(validValues[i],invalidValues[j]);        fail("NoSuchProviderException must be thrown (algorithm: ".concat(validValues[i]).concat(" provider: ").concat(invalidValues[j]).concat(")"));      } catch (      NoSuchProviderException e) {      }    }  }}  }
class C{  private void installPrerequisiteApks(Collection<String> prerequisiteApks) throws DeviceNotAvailableException {  for (  String apkName : prerequisiteApks) {    try {      File apkFile=mCtsBuild.getTestApp(apkName);      String errorCode=getDevice().installPackage(apkFile,true);      if (errorCode != null) {        CLog.e("Failed to install %s. Reason: %s",apkName,errorCode);      }    } catch (    FileNotFoundException e) {      CLog.e("Could not find test apk %s",apkName);    }  }}  }
class C{  public DoubleVector cumulateInPlace(){  for (int i=1; i < size(); i++) {    V[i]+=V[i - 1];  }  return this;}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/continuous-copies/refresh") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskList refreshContinuousCopies(@PathParam("id") URI id,FileReplicationParam param) throws ControllerException {  ArgValidator.checkFieldUriType(id,FileShare.class,"id");  return performFileProtectionAction(param,id,ProtectionOp.REFRESH.getRestOp());}  }
class C{  public static FilterResult included(String reason){  return new FilterResult(true,reason);}  }
class C{  protected void initialize(Class<T> mappedClass){  this.mappedClass=mappedClass;  this.mappedFields=new HashMap<String,PropertyDescriptor>();  this.mappedProperties=new HashSet<String>();  PropertyDescriptor[] pds=BeanUtils.getPropertyDescriptors(mappedClass);  for (  PropertyDescriptor pd : pds) {    if (pd.getWriteMethod() != null) {      this.mappedFields.put(pd.getName().toLowerCase(),pd);      String underscoredName=underscoreName(pd.getName());      if (!pd.getName().toLowerCase().equals(underscoredName)) {        this.mappedFields.put(underscoredName,pd);      }      this.mappedProperties.add(pd.getName());    }  }}  }
class C{  public int defineTemporaryVariable(String name,boolean store){  return defineTemporaryVariable(name,ClassHelper.DYNAMIC_TYPE,store);}  }
class C{  public void exec(@Nonnull final DockerClient client,@Nonnull final String imageName) throws IOException {  List<Image> images=client.listImagesCmd().exec();  NameParser.ReposTag repostag=NameParser.parseRepositoryTag(imageName);  final String fullImageName=repostag.repos + ":" + (repostag.tag.isEmpty() ? "latest" : repostag.tag);  boolean hasImage=Iterables.any(images,null);  boolean pull=hasImage ? getPullStrategy().pullIfExists(imageName) : getPullStrategy().pullIfNotExists(imageName);  if (pull) {    LOG.info("Pulling image '{}' {}. This may take awhile...",imageName,hasImage ? "again" : "since one wasn't pulled before.");    long startTime=System.currentTimeMillis();    final PullImageCmd pullImageCmd=client.pullImageCmd(imageName);    if (StringUtils.isNotBlank(credentialsId)) {      Credentials credentials=lookupSystemCredentials(credentialsId);      if (credentials instanceof DockerRegistryAuthCredentials) {        final DockerRegistryAuthCredentials authCredentials=(DockerRegistryAuthCredentials)credentials;        pullImageCmd.withAuthConfig(authCredentials.getAuthConfig());      }    }    pullImageCmd.exec(new PullImageResultCallback()).awaitSuccess();    long pullTime=System.currentTimeMillis() - startTime;    LOG.info("Finished pulling image '{}', took {} ms",imageName,pullTime);  }}  }
class C{  public CLIOutputResponse add(final AddRequest request) throws IOException, SubversionException {  final File projectPath=new File(request.getProjectPath());  final List<String> args=defaultArgs();  addFlag(args,"--no-ignore",request.isAddIgnored());  addFlag(args,"--parents",request.isAddParents());  if (request.isAutoProps()) {    args.add("--auto-props");  }  if (request.isNotAutoProps()) {    args.add("--no-auto-props");  }  addOption(args,"--depth",request.getDepth());  args.add("add");  final CommandLineResult result=runCommand(null,args,projectPath,request.getPaths());  return DtoFactory.getInstance().createDto(CLIOutputResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrOutput(result.getStderr());}  }
class C{  public Observable<BeerRating> postRating(Rating rating,long userId){  Observable<Response<Void>> post;  String comments=Normalizer.urlEncode(rating.comments);  if (rating.ratingId == null)   post=routes.postRating(rating.beerId.intValue(),rating.aroma,rating.appearance,rating.flavor,rating.mouthfeel,rating.overall,comments); else   post=routes.updateRating(rating.beerId.intValue(),rating.ratingId.intValue(),rating.aroma,rating.appearance,rating.flavor,rating.mouthfeel,rating.overall,comments);  return post.flatMap(null).filter(null).first();}  }
class C{  private double computeReferenceAngle(){  double r1=((SandboxBody)this.cmbBody1.getSelectedItem()).getTransform().getRotation();  double r2=((SandboxBody)this.cmbBody2.getSelectedItem()).getTransform().getRotation();  return r1 - r2;}  }
class C{  protected static IndexSegmentBuilder newInstanceTwoPass(final ILocalBTreeView src,final File outFile,final File tmpDir,final int m,final boolean compactingMerge,final long createTime,final byte[] fromKey,final byte[] toKey,final boolean bufferNodes) throws IOException {  if (src == null)   throw new IllegalArgumentException();  if (outFile == null)   throw new IllegalArgumentException();  if (tmpDir == null)   throw new IllegalArgumentException();  if (createTime <= 0L)   throw new IllegalArgumentException();  final int nentries;  final int flags;  if (compactingMerge) {    flags=IRangeQuery.DEFAULT;    final long n=src.rangeCountExact(fromKey,toKey);    if (n > Integer.MAX_VALUE) {      throw new UnsupportedOperationException(ERR_TOO_MANY_TUPLES);    }    nentries=(int)n;  } else {    flags=IRangeQuery.DEFAULT | IRangeQuery.DELETED;    final long n=src.rangeCountExactWithDeleted(fromKey,toKey);    if (n > Integer.MAX_VALUE) {      throw new UnsupportedOperationException(ERR_TOO_MANY_TUPLES);    }    nentries=(int)n;  }  final ITupleIterator<?> itr=src.rangeIterator(fromKey,toKey,0,flags,null);  final IndexMetadata indexMetadata=src.getIndexMetadata();  return IndexSegmentBuilder.newInstance(outFile,tmpDir,nentries,itr,m,indexMetadata,createTime,compactingMerge,bufferNodes);}  }
class C{  static String replaceDefault(String summaryLabel,String defaultString){  return summaryLabel.replaceAll("(?i)default",defaultString);}  }
class C{  public void comment(char[] ch,int start,int length) throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.comment(ch,start,length);}  }
class C{  private static void CallNonvirtualVoidMethodV(JNIEnvironment env,int objJREF,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualVoidMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    JNIHelpers.invokeWithVarArg(obj,methodID,argAddress,TypeReference.Void,true);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  private void showNotification(){  PendingIntent intent=PendingIntent.getActivity(this,0,new Intent(this,TabHostActivity.class),0);  if (VERSION.SDK_INT >= VERSION_CODES.JELLY_BEAN) {    Notification.Builder builder=new Notification.Builder(this.getApplicationContext());    builder.setAutoCancel(false);    builder.setContentTitle(getString(R.string.app_name));    builder.setContentText(getString(R.string.notification_caption));    builder.setSmallIcon(R.drawable.icon_greyed_25x25);    builder.setContentIntent(intent);    builder.setOngoing(true);    mNotificationManager.notify(NOTIFICATION_ID,builder.build());  } else   if (VERSION.SDK_INT < VERSION_CODES.JELLY_BEAN) {    NotificationCompat.Builder compat=new NotificationCompat.Builder(getApplicationContext());    compat.setAutoCancel(false);    compat.setContentTitle(getString(R.string.app_name));    compat.setContentText(getString(R.string.notification_caption));    compat.setSmallIcon(R.drawable.icon_greyed_25x25);    compat.setContentIntent(intent);    compat.setOngoing(true);    mNotificationManager.notify(NOTIFICATION_ID,compat.build());  }}  }
class C{  public void traverse(Node pos) throws org.xml.sax.SAXException {  this.m_contentHandler.startDocument();  Node top=pos;  while (null != pos) {    startNode(pos);    Node nextNode=pos.getFirstChild();    while (null == nextNode) {      endNode(pos);      if (top.equals(pos))       break;      nextNode=pos.getNextSibling();      if (null == nextNode) {        pos=pos.getParentNode();        if ((null == pos) || (top.equals(pos))) {          if (null != pos)           endNode(pos);          nextNode=null;          break;        }      }    }    pos=nextNode;  }  this.m_contentHandler.endDocument();}  }
class C{  public UdpWorker(final int actorMaxOperationTimeoutSec,final UdpMeta udpMeta,final String targetHost){  super();  this.actorMaxOperationTimeoutSec=actorMaxOperationTimeoutSec;  this.udpMeta=udpMeta;  this.targetHost=targetHost;}  }
class C{  public boolean isSelected(){  return this.mSelected;}  }
class C{  @Override public boolean equals(Object launchSession){  return super.equals(launchSession);}  }
class C{  public void checkTableControlDecorations(){  for (  JmxBeanSensorAssignment assignment : jmxAssignments) {    Set<ValidationState> states=super.getValidationErrorStates(assignment);    if (CollectionUtils.isNotEmpty(states)) {      tableItemControlDecorationManager.showTableItemControlDecoration(tableViewer,assignment,TextFormatter.getErroMessageFull(assignment,states));    } else {      tableItemControlDecorationManager.hideTableItemControlDecoration(tableViewer,assignment);    }  }}  }
class C{  public void expandAndSelectIfExists(RepositoryLocation location){  if (location.parent() != null) {    expandIfExists(location.parent(),location.getName());  } else {    expandIfExists(location,null);  }  scrollPathToVisible(getSelectionPath());}  }
class C{  public CopyKeyPairAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("CopyKeyPairAction.statusbar"));}  }
class C{  public static void println(int priority,String tag,String msg){  println(priority,tag,msg,null);}  }
class C{  protected void clearOutEvents(){}  }
class C{  public void dispatchCharactersEvents(int nodeHandle,ContentHandler ch,boolean normalize) throws SAXException {  int identity=makeNodeIdentity(nodeHandle);  if (identity == DTM.NULL)   return;  int type=_type(identity);  if (isTextType(type)) {    int dataIndex=m_dataOrQName.elementAt(identity);    int offset=m_data.elementAt(dataIndex);    int length=m_data.elementAt(dataIndex + 1);    if (normalize)     m_chars.sendNormalizedSAXcharacters(ch,offset,length); else     m_chars.sendSAXcharacters(ch,offset,length);  } else {    int firstChild=_firstch(identity);    if (DTM.NULL != firstChild) {      int offset=-1;      int length=0;      int startNode=identity;      identity=firstChild;      do {        type=_type(identity);        if (isTextType(type)) {          int dataIndex=_dataOrQName(identity);          if (-1 == offset) {            offset=m_data.elementAt(dataIndex);          }          length+=m_data.elementAt(dataIndex + 1);        }        identity=getNextNodeIdentity(identity);      } while (DTM.NULL != identity && (_parent(identity) >= startNode));      if (length > 0) {        if (normalize)         m_chars.sendNormalizedSAXcharacters(ch,offset,length); else         m_chars.sendSAXcharacters(ch,offset,length);      }    } else     if (type != DTM.ELEMENT_NODE) {      int dataIndex=_dataOrQName(identity);      if (dataIndex < 0) {        dataIndex=-dataIndex;        dataIndex=m_data.elementAt(dataIndex + 1);      }      String str=m_valuesOrPrefixes.indexToString(dataIndex);      if (normalize)       FastStringBuffer.sendNormalizedSAXcharacters(str.toCharArray(),0,str.length(),ch); else       ch.characters(str.toCharArray(),0,str.length());    }  }}  }
class C{  public void ordinaryChar(int ch){  if (ch >= 0 && ch < ctype.length)   ctype[ch]=0;}  }
class C{  public static String uppercaseFirst(String str){  return str.substring(0,1).toUpperCase(Locale.getDefault()) + str.substring(1,str.length());}  }
class C{  public void resolvePending(){  Chain x=pendingJumps;  pendingJumps=null;  resolve(x,cp);}  }
class C{  @Path("{" + PARAM_NAME + "}"+ "/annotations") @ApiOperation(hidden=true,value="Annotation API") @GET public AnnotationList readAnnotations(@PathParam(PARAM_NAME) String projectId,@QueryParam("unread") Integer unread){  return delegate.readAnnotations(userContext,new ProjectPK(userContext.getCustomerId(),projectId),unread);}  }
class C{  public synchronized void addAllSeries(List<XYSeries> series){  mSeries.addAll(series);}  }
class C{  public Object[] toArray(){  return al.toArray();}  }
class C{  public void forwardEvent(EventType eventType,Object data,boolean historyEvent){  AppEvent ae=new AppEvent(eventType,data);  ae.setHistoryEvent(historyEvent);  dispatch(ae);}  }
class C{  private BufferedImage step2(final JMenuBar menubar){  final BufferedImage bi2=new BufferedImage(W,H,TYPE_INT_ARGB_PRE);  final Graphics2D g2d2=bi2.createGraphics();  g2d2.scale(2,2);  g2d2.setColor(Color.RED);  g2d2.fillRect(0,0,W,H);  menubar.paintAll(g2d2);  menubar.getBorder().paintBorder(menubar,g2d2,menubar.getX(),menubar.getX(),menubar.getWidth(),menubar.getHeight());  g2d2.dispose();  return bi2;}  }
class C{  public static String replaceElementText(String xmlFile,String tagName,String value,boolean all,boolean overwrite) throws DOMException {  Map elements=new HashMap();  elements.put(tagName,value);  return replaceElementText(xmlFile,elements,all,overwrite);}  }
class C{  public void GET(final String uri,final boolean concurrent) throws IOException {  GET(new MultiProtocolURL(uri),concurrent);}  }
class C{  public Ed25519EncodedGroupElement encode(){switch (this.coordinateSystem) {case P2:case P3:    final Ed25519FieldElement inverse=this.Z.invert();  final Ed25519FieldElement x=this.X.multiply(inverse);final Ed25519FieldElement y=this.Y.multiply(inverse);final byte[] s=y.encode().getRaw();s[s.length - 1]|=(x.isNegative() ? (byte)0x80 : 0);return new Ed25519EncodedGroupElement(s);default :return this.toP2().encode();}}  }
class C{  public static void sort(int[] a){  DualPivotQuicksort.sort(a,0,a.length - 1,null,0,0);}  }
class C{  public static boolean isLanguageStartChar(int codePoint){  return ASCIIUtil.isLetter(codePoint);}  }
class C{  protected final void ATTEMPT_LONG(RegisterOperand result,MemoryOperand mo,Operand oldValue,Operand newValue){  if (VM.BuildFor32Addr) {    if (oldValue.isRegister()) {      Register oldValue_hval=oldValue.asRegister().getRegister();      Register oldValue_lval=regpool.getSecondReg(oldValue_hval);      EMIT(MIR_Move.create(IA32_MOV,new RegisterOperand(getEDX(),TypeReference.Int),new RegisterOperand(oldValue_hval,TypeReference.Int)));      EMIT(MIR_Move.create(IA32_MOV,new RegisterOperand(getEAX(),TypeReference.Int),new RegisterOperand(oldValue_lval,TypeReference.Int)));    } else {      if (VM.VerifyAssertions)       opt_assert(oldValue.isLongConstant());      LongConstantOperand val=oldValue.asLongConstant();      EMIT(MIR_Move.create(IA32_MOV,new RegisterOperand(getEDX(),TypeReference.Int),IC(val.upper32())));      EMIT(MIR_Move.create(IA32_MOV,new RegisterOperand(getEAX(),TypeReference.Int),IC(val.lower32())));    }    if (newValue.isRegister()) {      Register newValue_hval=newValue.asRegister().getRegister();      Register newValue_lval=regpool.getSecondReg(newValue_hval);      EMIT(MIR_Move.create(IA32_MOV,new RegisterOperand(getECX(),TypeReference.Int),new RegisterOperand(newValue_hval,TypeReference.Int)));      EMIT(MIR_Move.create(IA32_MOV,new RegisterOperand(getEBX(),TypeReference.Int),new RegisterOperand(newValue_lval,TypeReference.Int)));    } else {      if (VM.VerifyAssertions)       opt_assert(newValue.isLongConstant());      LongConstantOperand val=newValue.asLongConstant();      EMIT(MIR_Move.create(IA32_MOV,new RegisterOperand(getECX(),TypeReference.Int),IC(val.upper32())));      EMIT(MIR_Move.create(IA32_MOV,new RegisterOperand(getEBX(),TypeReference.Int),IC(val.lower32())));    }    EMIT(MIR_CompareExchange8B.create(IA32_LOCK_CMPXCHG8B,new RegisterOperand(getEDX(),TypeReference.Int),new RegisterOperand(getEAX(),TypeReference.Int),mo,new RegisterOperand(getECX(),TypeReference.Int),new RegisterOperand(getEBX(),TypeReference.Int)));    RegisterOperand temp=regpool.makeTemp(result);    EMIT(MIR_Set.create(IA32_SET__B,temp,IA32ConditionOperand.EQ()));    EMIT(MIR_Unary.create(IA32_MOVZX__B,result,temp.copy()));  } else {    RegisterOperand temp=regpool.makeTempLong();    RegisterOperand temp2=regpool.makeTemp(result);    EMIT(MIR_Move.create(IA32_MOV,temp,newValue));    EMIT(MIR_Move.create(IA32_MOV,new RegisterOperand(getEAX(),TypeReference.Long),oldValue));    EMIT(MIR_CompareExchange.create(IA32_LOCK_CMPXCHG,new RegisterOperand(getEAX(),TypeReference.Long),mo,temp.copyRO()));    EMIT(MIR_Set.create(IA32_SET__B,temp2,IA32ConditionOperand.EQ()));    EMIT(MIR_Unary.create(IA32_MOVZX__B,result,temp2.copy()));  }}  }
class C{  protected void firePopupMenuWillBecomeVisible(){  Object[] listeners=listenerList.getListenerList();  PopupMenuEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == PopupMenuListener.class) {      if (e == null)       e=new PopupMenuEvent(this);      ((PopupMenuListener)listeners[i + 1]).popupMenuWillBecomeVisible(e);    }  }}  }
class C{  static RenewSpec extractIssue(RequestSecurityTokenType rst,AssertionType inputToken){  assert rst != null;  final boolean renewable=isRenewable(rst.getRenewing());  final boolean renew=false;  return (inputToken == null) ? new RenewSpec(renewable) : new RenewSpec(renewable,renew,parseRenewCount(inputToken));}  }
class C{  public static <K,V>SortedMap<K,V> unmodifiableSortedMap(SortedMap<K,? extends V> m){  return new UnmodifiableSortedMap<>(m);}  }
class C{  public double leaveOneOutCV(BayesNet bayesNet) throws Exception {  m_BayesNet=bayesNet;  double fAccuracy=0.0;  double fWeight=0.0;  Instances instances=bayesNet.m_Instances;  bayesNet.estimateCPTs();  for (int iInstance=0; iInstance < instances.numInstances(); iInstance++) {    Instance instance=instances.instance(iInstance);    instance.setWeight(-instance.weight());    bayesNet.updateClassifier(instance);    fAccuracy+=accuracyIncrease(instance);    fWeight+=instance.weight();    instance.setWeight(-instance.weight());    bayesNet.updateClassifier(instance);  }  return fAccuracy / fWeight;}  }
class C{  public static byte[] gzip(String input){  ByteArrayOutputStream baos=new ByteArrayOutputStream();  GZIPOutputStream gzos=null;  try {    gzos=new GZIPOutputStream(baos);    gzos.write(input.getBytes("UTF-8"));  } catch (  IOException e) {    e.printStackTrace();  } finally {    if (gzos != null)     try {      gzos.close();    } catch (    IOException ignore) {    }  }  return baos.toByteArray();}  }
class C{  public static String[] vector_to_strings(Vector v){  int len=v.size();  String[] ret=new String[len];  for (int i=0; i < len; i++) {    ret[i]=v.elementAt(i).toString();  }  return ret;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("[").append("Count=").append(m_count).append(",").append(m_totalCount).append(",Sum=").append(m_sum).append(",SumSquare=").append(m_sumSquare).append(",Min=").append(m_min).append(",Max=").append(m_max);  sb.append("]");  return sb.toString();}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public boolean isSOTrx(){  Object oo=get_Value(COLUMNNAME_IsSOTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static boolean inheritsFromAndroidActivity(final SootClass cn){  if (cn.isInterface())   return false;  return Scene.v().getActiveHierarchy().isClassSubclassOfIncluding(cn,Scene.v().getSootClass(Components.ACTIVITY_CLASS));}  }
class C{  public int compareTo(Rule that){  int answer=compareInt(this.importPrecedence,that.importPrecedence);  if (answer == 0) {    answer=Double.compare(this.priority,that.priority);    if (answer == 0) {      answer=compareInt(this.appearenceCount,that.appearenceCount);    }  }  return answer;}  }
class C{  private void scanIdent(){  boolean isJavaIdentifierPart;  char high;  reader.putChar(true);  do {switch (reader.ch) {case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':case 'G':case 'H':case 'I':case 'J':case 'K':case 'L':case 'M':case 'N':case 'O':case 'P':case 'Q':case 'R':case 'S':case 'T':case 'U':case 'V':case 'W':case 'X':case 'Y':case 'Z':case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':case 'g':case 'h':case 'i':case 'j':case 'k':case 'l':case 'm':case 'n':case 'o':case 'p':case 'q':case 'r':case 's':case 't':case 'u':case 'v':case 'w':case 'x':case 'y':case 'z':case '$':case '_':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':      break;case '\u0000':case '\u0001':case '\u0002':case '\u0003':case '\u0004':case '\u0005':case '\u0006':case '\u0007':case '\u0008':case '\u000E':case '\u000F':case '\u0010':case '\u0011':case '\u0012':case '\u0013':case '\u0014':case '\u0015':case '\u0016':case '\u0017':case '\u0018':case '\u0019':case '\u001B':case '\u007F':    reader.scanChar();  continue;case '\u001A':if (reader.bp >= reader.buflen) {  name=reader.name();  tk=tokens.lookupKind(name);  return;}reader.scanChar();continue;default :if (reader.ch < '\u0080') {isJavaIdentifierPart=false;} else {if (Character.isIdentifierIgnorable(reader.ch)) {reader.scanChar();continue;} else {high=reader.scanSurrogates();if (high != 0) {reader.putChar(high);isJavaIdentifierPart=Character.isJavaIdentifierPart(Character.toCodePoint(high,reader.ch));} else {isJavaIdentifierPart=Character.isJavaIdentifierPart(reader.ch);}}}if (!isJavaIdentifierPart) {name=reader.name();tk=tokens.lookupKind(name);return;}}reader.putChar(true);} while (true);}  }
class C{  public void autoRegisterNodes(){synchronized (this) {    if (autoRegistrationRunning || autoRegistrationComplete) {      return;    }  }  autoRegistrationRunning=true;  try {    callAutoRegisterMethods(getClass());  }  finally {    autoRegistrationComplete=true;    autoRegistrationRunning=false;  }}  }
class C{  protected void calcYValueCount(List<? extends DataSet<?>> dataSets){  mYValCount=0;  if (dataSets == null)   return;  int count=0;  for (int i=0; i < dataSets.size(); i++) {    count+=dataSets.get(i).getEntryCount();  }  mYValCount=count;}  }
class C{  public void addWatchSyncPredicate(WatchPredicate<ReplDBMSHeader> predicate) throws InterruptedException {  readQueue.addWatchSyncPredicate(predicate);}  }
class C{  @Inject PageImporterImpl(EntryUpdater entryUpdater,EntryUploader entryUploader,PageParser pageParser,RelativeLinkConverter linkConverter,RevisionsImporter revisionsImporter){  this.entryUpdater=checkNotNull(entryUpdater);  this.entryUploader=checkNotNull(entryUploader);  this.pageParser=checkNotNull(pageParser);  this.linkConverter=checkNotNull(linkConverter);  this.revisionsImporter=checkNotNull(revisionsImporter);}  }
class C{  public void test_allocCommitFreeCommitSessionWriteCache(){  final Journal store=(Journal)getStore();  try {    final RWStrategy bs=(RWStrategy)store.getBufferStrategy();    final long addr=bs.write(randomData(78));    assertTrue(bs.inWriteCache(addr));    store.commit();    IRawTx tx=bs.newTx();    bs.delete(addr);    assertTrue(bs.inWriteCache(addr));    store.commit();    assertTrue(bs.inWriteCache(addr));    tx.close();    assertFalse(bs.inWriteCache(addr));  }  finally {    store.destroy();  }}  }
class C{  private boolean isPresentIn(String[] values,String field){  for (  String value : values)   if (value.equalsIgnoreCase(JMapConversion.ALL) || value.equals(field))   return true;  return false;}  }
class C{  protected void onException(final Exception e) throws Exception {}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void skipBytes(InputStream is,int numBytes) throws IOException {  if (is == null) {    String message=Logging.getMessage("nullValue.InputStreamIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  int byteSkipped=0;  while (byteSkipped < numBytes) {    byteSkipped+=is.skip(numBytes - byteSkipped);  }}  }
class C{  private int readHeaders(InputStream is){  int nread=0;  log("Read headers");  while (true) {    int headerLen=0;    headerLen=parseHeader(is);    if (headerLen == -1)     return -1;    nread+=headerLen;    if (headerLen <= 2) {      return nread;    }  }}  }
class C{  ElementKey<?,?> findElement(QName id){  return elements.get(id);}  }
class C{  public void putWithVersion(RowCursor cursor,Result<Boolean> cont){  _tableService.put(cursor,PutType.PUT,cont);}  }
class C{  public static ModifySubscription parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ModifySubscription object=new ModifySubscription();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"modifySubscription".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (ModifySubscription)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list3=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","instanceId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setInstanceId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","subscriptionId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setSubscriptionId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","parameterValues").equals(reader.getName())) {      list3.add(org.oscm.xsd.ServiceParameter.Factory.parse(reader));      boolean loopDone3=false;      while (!loopDone3) {        while (!reader.isEndElement())         reader.next();        reader.next();        while (!reader.isStartElement() && !reader.isEndElement())         reader.next();        if (reader.isEndElement()) {          loopDone3=true;        } else {          if (new javax.xml.namespace.QName("","parameterValues").equals(reader.getName())) {            list3.add(org.oscm.xsd.ServiceParameter.Factory.parse(reader));          } else {            loopDone3=true;          }        }      }      object.setParameterValues((org.oscm.xsd.ServiceParameter[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(org.oscm.xsd.ServiceParameter.class,list3));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","requestingUser").equals(reader.getName())) {      object.setRequestingUser(org.oscm.xsd.User.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public byte[] encode() throws UnsupportedOperationException {  throw new UnsupportedOperationException("ContentDependentAttributes should be encoded " + "through the contend-dependent encode method");}  }
class C{  public static String convertFileName(File parentDir,String name) throws IOException {  int parentLength=parentDir.getAbsolutePath().getBytes(Charset.defaultCharset().name()).length;  if (parentLength >= OSUtils.getMaxPathLength() - 1) {    throw new IOException("Path too long");  }  return convertFileName(name,Math.min(OSUtils.getMaxPathLength() - parentLength - 1,180));}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:04.958 -0500",hash_original_method="0C791DFCDA5E7DFE7963EF393BDBDA11",hash_generated_method="0C791DFCDA5E7DFE7963EF393BDBDA11") int measureNullChild(int childIndex){  return 0;}  }
class C{  @Override public boolean equals(Object other){  if (other instanceof List<?>)   return equals(this,(List<?>)other);  if (other instanceof java.util.List<?>) {    List<A> t=this;    Iterator<?> oIter=((java.util.List<?>)other).iterator();    while (t.tail != null && oIter.hasNext()) {      Object o=oIter.next();      if (!(t.head == null ? o == null : t.head.equals(o)))       return false;      t=t.tail;    }    return (t.isEmpty() && !oIter.hasNext());  }  return false;}  }
class C{  void memoryChange(int x){  if (memoryCount < Constants.MEMORY_FACTOR) {    memoryPerPage+=(x - memoryPerPage) / ++memoryCount;  } else {    memoryPerPage+=(x > memoryPerPage ? 1 : -1) + ((x - memoryPerPage) / Constants.MEMORY_FACTOR);  }}  }
class C{  protected void push(final String stack,final Stack.Entry e) throws IOException, SpaceExceededException {  Stack s=getStack(stack);  if (s == null)   return;  s.push(e);}  }
class C{  public long arg_end(){  return Long.parseLong(fields[48]);}  }
class C{  public static void gluOrtho2D(GL10 gl,double left,double right,double bottom,double top){  gl.glOrthof((float)left,(float)right,(float)bottom,(float)top,-1.0f,1.0f);}  }
class C{  private void makeGroundTargetType(AnnotatedDeclaredType overriddenType){  if (overriddenType.getTypeArguments().size() > 0) {    List<AnnotatedTypeParameterBounds> bounds=this.typeVariablesFromUse(overriddenType,(TypeElement)overriddenType.getUnderlyingType().asElement());    List<AnnotatedTypeMirror> newTypeArguments=new ArrayList<>(overriddenType.getTypeArguments());    for (int i=0; i < overriddenType.getTypeArguments().size(); i++) {      AnnotatedTypeMirror argType=overriddenType.getTypeArguments().get(i);      if (argType.getKind() == TypeKind.WILDCARD) {        AnnotatedWildcardType wildcardType=(AnnotatedWildcardType)argType;        final TypeMirror wilcardUbType=wildcardType.getExtendsBound().getUnderlyingType();        final TypeMirror typeParamUbType=bounds.get(i).getUpperBound().getUnderlyingType();        if (isExtendsWildcard(wildcardType)) {          TypeMirror glbType=InternalUtils.greatestLowerBound(this.checker.getProcessingEnvironment(),typeParamUbType,wilcardUbType);          final AnnotatedTypeMirror newArg;          if (types.isSameType(wilcardUbType,glbType)) {            newArg=wildcardType.getExtendsBound().deepCopy();          } else {            newArg=this.toAnnotatedType(glbType,false);            newArg.replaceAnnotations(wildcardType.getExtendsBound().getAnnotations());          }          newTypeArguments.set(i,newArg);        } else {          newTypeArguments.set(i,wildcardType.getSuperBound());        }      }    }    overriddenType.setTypeArguments(newTypeArguments);  }}  }
class C{  public OutlierResult run(Database database,Relation<V> relation){  final int dbsize=relation.size();  ArrayList<ArrayList<DBIDs>> ranges=buildRanges(relation);  Heap<Individuum>.UnorderedIter individuums=(new EvolutionarySearch(relation,ranges,m,rnd.getSingleThreadedRandom())).run();  WritableDoubleDataStore outlierScore=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_STATIC);  for (; individuums.valid(); individuums.advance()) {    DBIDs ids=computeSubspaceForGene(individuums.get().getGene(),ranges);    double sparsityC=sparsity(ids.size(),dbsize,k,phi);    for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {      double prev=outlierScore.doubleValue(iter);      if (Double.isNaN(prev) || sparsityC < prev) {        outlierScore.putDouble(iter,sparsityC);      }    }  }  DoubleMinMax minmax=new DoubleMinMax();  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    double val=outlierScore.doubleValue(iditer);    if (Double.isNaN(val)) {      outlierScore.putDouble(iditer,0.0);      val=0.0;    }    minmax.put(val);  }  DoubleRelation scoreResult=new MaterializedDoubleRelation("AggarwalYuEvolutionary","aggarwal-yu-outlier",outlierScore,relation.getDBIDs());  OutlierScoreMeta meta=new InvertedOutlierScoreMeta(minmax.getMin(),minmax.getMax(),Double.NEGATIVE_INFINITY,0.0);  return new OutlierResult(meta,scoreResult);}  }
class C{  public static <E extends SpatialComparable,A>double[] unionFlatMBR(A data,ArrayAdapter<E,? super A> getter){  final int num=getter.size(data);  assert (num > 0) : "Cannot compute MBR of empty set.";  final int dim;  final double[] mbr;{    final E first=getter.get(data,0);    dim=first.getDimensionality();    mbr=new double[2 * dim];    for (int d=0; d < dim; d++) {      mbr[d]=first.getMin(d);      mbr[dim + d]=first.getMax(d);    }  }  for (int i=1; i < num; i++) {    E next=getter.get(data,i);    for (int d=0; d < dim; d++) {      mbr[d]=Math.min(mbr[d],next.getMin(d));      mbr[dim + d]=Math.max(mbr[dim + d],next.getMax(d));    }  }  return mbr;}  }
class C{  protected static void addMethodBinders(final BindingManager manager,final Method method){  final ControllerBinder[] binders=method.getAnnotationsByType(ControllerBinder.class);  if (binders == null) {    return;  }  for (  final ControllerBinder binder : binders) {    try {      final Binder binderImpl=binder.value().newInstance();      if (binderImpl instanceof ControllerBinderParametersAware) {        ((ControllerBinderParametersAware)binderImpl).setParameters(binder.parameters());      }      manager.addBinder(binderImpl);    } catch (    InstantiationException|IllegalAccessException e) {      manager.addBinder(new ErrorBinder(e));    }  }}  }
class C{  public ParallaxPage headerTypeface(String path){  this.headerTypefacePath=path;  return this;}  }
class C{  public void repaintPanel(){  removeAll();  initializeLayout();  repaint();}  }
class C{  void flipPath(){  reachedDestination=false;  pathDirection=-pathDirection;  linkDirection=-linkDirection;}  }
class C{  public static InputStream toInputStream(CharSequence input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  public URIConverter(){  super();}  }
class C{  public SchedulerStateManagerAdaptor(IStateManager delegate,int timeout){  this.delegate=delegate;  this.timeout=timeout;}  }
class C{  public void addValue(double data,double given,double weight){  m_Estimators[(int)given].addValue(data,weight);}  }
class C{  public BaseEventFeed(Class<E> entryClass){  super(entryClass);  getCategories().add(EventEntry.EVENT_CATEGORY);}  }
class C{  public void testDismissButtonReturnsImmediatelyWithNoChanges(){  inUserLoginGoToDemoPatientChart();  openEncounterForm();  click(viewWithText("Discard"));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Seeker.getInstance().getInterleavedScheduledAirings();}  }
class C{  static void cleanGarbage(){  System.gc();  try {    Thread.sleep(100);  } catch (  Exception e) {  }  System.gc();}  }
class C{  public void testConstrStringMathContext(){  String a="-238768787678287e214";  int precision=5;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String res="-23876";  int resScale=-224;  BigDecimal result=new BigDecimal(a,mc);  assertEquals("incorrect value",res,result.unscaledValue().toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public static void unregisterInterest(){  try {    Region region1=cacheClient.getRegion(Region.SEPARATOR + REGION_NAME1);    Region region2=cacheClient.getRegion(Region.SEPARATOR + REGION_NAME2);    region1.unregisterInterest("ALL_KEYS");    region2.unregisterInterest("ALL_KEYS");  } catch (  CacheWriterException e) {    fail("test failed due to " + e);  }}  }
class C{  public static Vector3 pow(Vector3 o,double power){  return new Vector3(Math.pow(o.x,power),Math.pow(o.y,power),Math.pow(o.z,power));}  }
class C{  public static String convertType(Type type){  if (type instanceof ParameterizedType) {    ParameterizedType parameterizedType=(ParameterizedType)type;    Type rawType=parameterizedType.getRawType();    return convertParametrizedType(type,parameterizedType,rawType);  } else   if (String.class.equals(type) || (type instanceof Class && ((Class)type).isEnum())) {    return "string";  } else   if (Integer.class.equals(type) || Integer.TYPE.equals(type) || Long.class.equals(type)|| Long.TYPE.equals(type)|| Double.class.equals(type)|| Double.TYPE.equals(type)) {    return "number";  } else   if (Boolean.class.equals(type)) {    return "boolean";  }  return type.getTypeName();}  }
class C{  public void destroy(){  log.info("destroy");}  }
class C{  public RangeQueryBuilder includeLower(boolean includeLower){  this.includeLower=includeLower;  return this;}  }
class C{  protected boolean hasMoreChildren(){  return (Boolean)unsupportedOperation();}  }
class C{  private static boolean equal(double[][] array1,double[][] array2){  if (array1 == null) {    return (array2 == null);  }  if (array2 == null) {    return false;  }  if (array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (!Arrays.equals(array1[i],array2[i])) {      return false;    }  }  return true;}  }
class C{  public static void verifyGetAfterSet(FinishedTriggers finishedSet){  ExecutableTriggerStateMachine trigger=ExecutableTriggerStateMachine.create(AfterAllStateMachine.of(AfterFirstStateMachine.of(AfterPaneStateMachine.elementCountAtLeast(3),AfterWatermarkStateMachine.pastEndOfWindow()),AfterAllStateMachine.of(AfterPaneStateMachine.elementCountAtLeast(10),AfterProcessingTimeStateMachine.pastFirstElementInPane())));  verifyGetAfterSet(finishedSet,trigger);  verifyGetAfterSet(finishedSet,trigger.subTriggers().get(0).subTriggers().get(1));  verifyGetAfterSet(finishedSet,trigger.subTriggers().get(0));  verifyGetAfterSet(finishedSet,trigger.subTriggers().get(1));  verifyGetAfterSet(finishedSet,trigger.subTriggers().get(1).subTriggers().get(1));  verifyGetAfterSet(finishedSet,trigger.subTriggers().get(1).subTriggers().get(0));}  }
class C{  public BitwiseByteArray(final int bits){  this(0,bits,ARR_SIZE,true);}  }
class C{  final Node succ(Node p){  Node next=p.next;  return (p == next) ? head : next;}  }
class C{  protected String composeStabilityOperationsSymCode(){  StringBuilder sb=new StringBuilder();  appendFieldValue(sb,this.getScheme(),1);  appendFieldValue(sb,this.getStandardIdentity(),1);  appendFieldValue(sb,this.getCategory(),1);  appendFieldValue(sb,this.getStatus(),1);  appendFieldValue(sb,this.getFunctionId(),6);  appendFieldValue(sb,this.getSymbolModifier(),2);  appendFieldValue(sb,this.getCountryCode(),2);  appendFieldValue(sb,this.getOrderOfBattle(),1);  return sb.toString();}  }
class C{  public ValidationException(ReasonEnum reason,String member,Object[] params){  super(getMessage(reason,member,params),params);  bean.setReason(reason);  bean.setMember(member);  setMessageKey(initMessageKey());}  }
class C{  HTMLFont(String fontKey,Font font){  this.font=font;  systemFont=(font.getCharset() == null);  if (isSystemFont()) {    bold=((font.getStyle() & Font.STYLE_BOLD) != 0);    italic=((font.getStyle() & Font.STYLE_ITALIC) != 0);    size=font.getSize();    if (font.getFace() == Font.FACE_SYSTEM) {      family="system";    } else     if (font.getFace() == Font.FACE_MONOSPACE) {      family="monospace";    } else     if (font.getFace() == Font.FACE_PROPORTIONAL) {      family="proportional";    }  } else {    if (fontKey != null) {      boolean sufficientInfo=false;      int lastIndex=0;      if (!fontKey.endsWith(".")) {        fontKey+='.';      }      int index=fontKey.indexOf(TOKEN);      while (index != -1) {        String str=fontKey.substring(lastIndex,index);        try {          int num=Integer.parseInt(str);          size=num;        } catch (        NumberFormatException nfe) {          if (str.equalsIgnoreCase("bold")) {            bold=true;          } else           if (str.equalsIgnoreCase("italic")) {            italic=true;          } else           if (str.equalsIgnoreCase("plain")) {          } else           if (SPECIAL_FONT_TAGS.contains(str)) {            HTMLComponent.fonts.put(str,this);            sufficientInfo=true;          } else {            family=str.toLowerCase();            sufficientInfo=true;          }        }        lastIndex=index + 1;        index=fontKey.indexOf(TOKEN,lastIndex);      }      if (!sufficientInfo) {        System.out.println("WARNING: Font was added with key '" + fontKey + "' which doesn't contain info on the font's family or attributes it to a special tag. The font will probably be unusable by the font engine.");      }    }  }  if (bold) {    style+=Font.STYLE_BOLD;    counterpartFonts[BOLD]=this;  }  if (italic) {    style+=Font.STYLE_ITALIC;    counterpartFonts[ITALIC]=this;  }  if (isSystemFont()) {    if (size == Font.SIZE_LARGE) {      counterpartFonts[BIG]=this;    } else     if (size == Font.SIZE_SMALL) {      counterpartFonts[SMALL]=this;    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  public S2Cap complement(){  double cHeight=isFull() ? -1 : 2 - Math.max(height,0.0);  return S2Cap.fromAxisHeight(S2Point.neg(axis),cHeight);}  }
class C{  @Override public void respond(String response){  getBot().sendRaw().rawLine(response);}  }
class C{  public final static boolean isAnnotation(final Element element){  if (element == null) {    return false;  }  final Object role=element.getDataset().at(ELEMENT_ROLE_DATA_PROPERTY);  return ELEMENT_ROLE_VALUE_ANNOTATION.equals(role);}  }
class C{  public static <T>Permutations<T> create(T[] in,T[] out,int m){  return new Permutations<T>(in,out,m);}  }
class C{  @SuppressWarnings("unchecked") @Override public DescriptivePiStatistics statistics(Set<? extends Vertex> vertices){  DescriptivePiStatistics stats=facory.newInstance();  int iteration=SnowballStatistics.getInstance().lastIteration((Set<? extends SampledVertex>)vertices);  TObjectDoubleHashMap<? extends Vertex> values=localClusteringCoefficients(vertices);  TObjectDoubleIterator<? extends Vertex> it=values.iterator();  for (int i=0; i < values.size(); i++) {    it.advance();    if (((SampledVertex)it.key()).getIterationSampled() <= iteration - 1) {      double p=piEstimator.probability((SampledVertex)it.key(),iteration - 1);      if (p > 0)       stats.addValue(it.value(),p);    }  }  return stats;}  }
class C{  static NotesFragment newInstance(long restaurantId){  NotesFragment frag=new NotesFragment();  frag.mRestaurantId=restaurantId;  return frag;}  }
class C{  public boolean isMultivdc(){  return getVdcSiteMap().keySet().size() > 1;}  }
class C{  public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2){  return new ImmutableCollections.MapN<K,V>(k1,v1,k2,v2);}  }
class C{  LightnessSelector(HSLSelectionModel model){  super(model);}  }
class C{  private void addApiKeyToRequest(Builder builder,String apiKey){  final HttpUrl url=HttpUrl.parse(builder.build().url().toString());  if ((url.query() == null) || url.query().isEmpty()) {    builder.url(builder.build().url() + "?" + apiKey);  } else {    builder.url(builder.build().url() + "&" + apiKey);  }}  }
class C{  public ProgressIndicator(@Nullable String message,@Nullable String note,int min,int max,boolean indeterminate){  initComponents();  messageLabel.setFont(messageLabel.getFont().deriveFont(Font.BOLD));  progressModel=new DefaultBoundedRangeModel(0,0,min,max);  progressBar.setModel(progressModel);  setMessage(message);  setNote(note);  setIndeterminate(indeterminate);}  }
class C{  public void createConfigPanel(){  if (configPanel == null) {    Item[] items=new Item[3];    String ipAddress="127.0.0.1";    String portNum="1883";    String clientId="MQTT_MIDLET";    if (config != null) {      byte[] ip=null;      byte[] port=null;      byte[] cid=null;      try {        ip=config.getRecord(1);        if (ip != null) {          ipAddress=new String(ip);        }        port=config.getRecord(2);        if (port != null) {          portNum=new String(port);        }        cid=config.getRecord(3);        if (cid != null) {          clientId=new String(cid);        }      } catch (      RecordStoreException rse) {      }    }    TextField t1=new TextField("Client Id",clientId,100,TextField.ANY);    TextField t2=new TextField("IP address",ipAddress,100,TextField.ANY);    TextField t3=new TextField("IP port",portNum,4,TextField.NUMERIC);    items[IDX_CLIENT_ID]=(Item)t1;    items[IDX_IP_ADDR]=(Item)t2;    items[IDX_PORT_NUM]=(Item)t3;    Form f=new Form("Connection",items);    f.addCommand(connect);    f.addCommand(cancel);    f.setCommandListener(this);    configPanel=f;    Display.getDisplay(this).setCurrent(configPanel);  }}  }
class C{  public void updateVolume(int delta){  if (null != mMediaRouter.getSelectedRoute()) {    MediaRouter.RouteInfo info=mMediaRouter.getSelectedRoute();    info.requestUpdateVolume(delta);  }}  }
class C{  public boolean isShowParticles(){  return this.showParticles;}  }
class C{  @Override public String globalInfo(){  return "Combining several multi-label classifiers in an ensemble where the attribute space for each model is a random subset of the original space.";}  }
class C{  public boolean isEmpty(){  int bSize=this.bodies.size();  int jSize=this.joints.size();  return bSize == 0 && jSize == 0;}  }
class C{  public void test_getBitsFromByteArray_correctRejection_off_and_len_03(){  BytesUtil.getBits(new byte[1],0,8);  try {    BytesUtil.getBits(new byte[1],0,8 + 1);    fail("Expecting: " + IllegalArgumentException.class);  } catch (  IllegalArgumentException ex) {    if (log.isInfoEnabled())     log.info("Ignoring expected exception: " + ex);  }}  }
class C{  public DocumentValueSourceDictionary(IndexReader reader,String field,ValueSource weightsValueSource,String payload,String contexts){  super(reader,field,null,payload,contexts);  this.weightsValueSource=weightsValueSource;}  }
class C{  public static void bindThis(QueryExecution qexec,RDFNode value){  if (value != null) {    QuerySolutionMap bindings=new QuerySolutionMap();    bindings.add(SPIN.THIS_VAR_NAME,value);    qexec.setInitialBinding(bindings);  }}  }
class C{  public void testRuntimeConfigurationDefaultValues(){  RuntimeConfiguration runtimeConfiguration=new Jonas4xRuntimeConfiguration();  AbstractRemoteContainer remoteContainer=new Jonas4xRemoteContainer(runtimeConfiguration);  AbstractJonasRemoteDeployer remoteDeployer=new TestDeployer(remoteContainer);  RemoteDeployerConfig deployerConfig=remoteDeployer.getConfig();  assertEquals("jonas",deployerConfig.getServerName());  assertEquals("jonas",deployerConfig.getDomainName());  assertNull(deployerConfig.getClusterName());}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public void recalculateFastCatchupAndFilter(FilterRecalculateMode mode){  lock.lock();  try {    if (chain != null && chain.shouldVerifyTransactions())     return;    log.info("Recalculating filter in mode {}",mode);    long earliestKeyTimeSecs=Long.MAX_VALUE;    int elements=0;    boolean requiresUpdateAll=false;    for (    PeerFilterProvider p : peerFilterProviders) {      earliestKeyTimeSecs=Math.min(earliestKeyTimeSecs,p.getEarliestKeyCreationTime());      elements+=p.getBloomFilterElementCount();      requiresUpdateAll=requiresUpdateAll || p.isRequiringUpdateAllBloomFilter();    }    if (elements > 0) {      lastBloomFilterElementCount=elements > lastBloomFilterElementCount ? elements + 100 : lastBloomFilterElementCount;      BloomFilter.BloomUpdate bloomFlags=requiresUpdateAll ? BloomFilter.BloomUpdate.UPDATE_ALL : BloomFilter.BloomUpdate.UPDATE_P2PUBKEY_ONLY;      BloomFilter filter=new BloomFilter(lastBloomFilterElementCount,bloomFilterFPRate,bloomFilterTweak,bloomFlags);      for (      PeerFilterProvider p : peerFilterProviders)       filter.merge(p.getBloomFilter(lastBloomFilterElementCount,bloomFilterFPRate,bloomFilterTweak));      boolean changed=!filter.equals(bloomFilter);      boolean send=false;      bloomFilter=filter;switch (mode) {case SEND_IF_CHANGED:        send=changed;      break;case DONT_SEND:    send=false;  break;case FORCE_SEND:send=true;break;}if (send) {for (Peer peer : peers) peer.setBloomFilter(filter);if (chain != null) chain.resetFalsePositiveEstimate();}}earliestKeyTimeSecs-=86400 * 7;setFastCatchupTimeSecs(earliestKeyTimeSecs);}  finally {lock.unlock();}}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  AbstractDialLayer clone=(AbstractDialLayer)super.clone();  clone.listenerList=new EventListenerList();  return clone;}  }
class C{  public UserAgent(String agentName,String emailAddress,String webAddress,String browserVersion){  this(agentName,emailAddress,webAddress,browserVersion,DEFAULT_CRAWLER_VERSION);}  }
class C{  public Type3Font(String baseFont,PDFObject fontObj,HashMap<String,PDFObject> resources,PDFFontDescriptor descriptor) throws IOException {  super(baseFont,descriptor);  rsrc=new HashMap<String,PDFObject>();  if (resources != null) {    rsrc.putAll(resources);  }  PDFObject matrix=fontObj.getDictRef("FontMatrix");  float matrixAry[]=new float[6];  for (int i=0; i < 6; i++) {    matrixAry[i]=matrix.getAt(i).getFloatValue();  }  at=Utils.createMatrix(matrixAry);  float scale=matrixAry[0] + matrixAry[2];  PDFObject rsrcObj=fontObj.getDictRef("Resources");  if (rsrcObj != null) {    rsrc.putAll(rsrcObj.getDictionary());  }  charProcs=fontObj.getDictRef("CharProcs").getDictionary();  PDFObject[] bboxdef=fontObj.getDictRef("FontBBox").getArray();  float[] bboxfdef=new float[4];  for (int i=0; i < 4; i++) {    bboxfdef[i]=bboxdef[i].getFloatValue();  }  bbox=new RectF(bboxfdef[0],bboxfdef[1],bboxfdef[2] - bboxfdef[0],bboxfdef[3] - bboxfdef[1]);  if (bbox.isEmpty()) {    bbox=null;  }  PDFObject[] widthArray=fontObj.getDictRef("Widths").getArray();  widths=new float[widthArray.length];  for (int i=0; i < widthArray.length; i++) {    widths[i]=widthArray[i].getFloatValue();  }  firstChar=fontObj.getDictRef("FirstChar").getIntValue();  lastChar=fontObj.getDictRef("LastChar").getIntValue();}  }
class C{  public final double lengthSq(){  return x * x + y * y;}  }
class C{  public void write(MappedBusMessage message) throws EOFException {  long limit=allocate();  long commitPos=limit;  limit+=Length.StatusFlags;  mem.putInt(limit,message.type());  limit+=Length.Metadata;  message.write(mem,limit);  commit(commitPos);}  }
class C{  public static UUID generateUUID(){  return UUID.nameUUIDFromBytes(Build.SERIAL.getBytes(UTF8));}  }
class C{  public APPlatformException(String message,Throwable cause){  super(message,cause);  this.messages=new ArrayList<LocalizedText>();  this.messages.add(new LocalizedText(DEFAULT_LOCALE,message));}  }
class C{  public ClientResponse put(URI uri,String body){  return client.resource(uri).header(GlanceConstants.AUTH_TOKEN_HEADER,authTokenHeader).put(ClientResponse.class,body);}  }
class C{  private void removeViewListeners(final INaviView view){  view.removeListener(m_viewListener);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__EXECUTE_CLAUSE_1:    return ((InternalEList<?>)getExecuteClause_1()).basicRemove(otherEnd,msgs);case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_WHEN_1:  return ((InternalEList<?>)getTraceWhen_1()).basicRemove(otherEnd,msgs);case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_FOR_1:return ((InternalEList<?>)getTraceFor_1()).basicRemove(otherEnd,msgs);case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_PERIOD_1:return ((InternalEList<?>)getTracePeriod_1()).basicRemove(otherEnd,msgs);case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_DURING_1:return ((InternalEList<?>)getTraceDuring_1()).basicRemove(otherEnd,msgs);case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_CASE_ACTIVATION_1:return ((InternalEList<?>)getTraceCaseActivation_1()).basicRemove(otherEnd,msgs);case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_RECORD_1:return ((InternalEList<?>)getTraceRecord_1()).basicRemove(otherEnd,msgs);case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_LEVEL_1:return ((InternalEList<?>)getTraceLevel_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  static String valueToString(Object value,int indentFactor,int indent) throws JSONException {  if (value == null || value.equals(null)) {    return "null";  }  try {    if (value instanceof JSONString) {      Object o=((JSONString)value).toJSONString();      if (o instanceof String) {        return (String)o;      }    }  } catch (  Exception ignore) {  }  if (value instanceof Number) {    return numberToString((Number)value);  }  if (value instanceof Boolean) {    return value.toString();  }  if (value instanceof JSONObject) {    return ((JSONObject)value).toString(indentFactor,indent);  }  if (value instanceof JSONArray) {    return ((JSONArray)value).toString(indentFactor,indent);  }  if (value instanceof Map) {    return new JSONObject((Map)value).toString(indentFactor,indent);  }  if (value instanceof Collection) {    return new JSONArray((Collection)value).toString(indentFactor,indent);  }  if (value.getClass().isArray()) {    return new JSONArray(value).toString(indentFactor,indent);  }  return quote(value.toString());}  }
class C{  public static Uri absolutePathToUri(Context context,String path){  String basePath=context.getFilesDir().getAbsolutePath();  if ((null != path) && path.startsWith(basePath)) {    return Uri.parse("content://" + VectorContentProvider.AUTHORITIES + path.substring(basePath.length()));  }  return null;}  }
class C{  @Deprecated public boolean removeEventListener(WalletEventListener listener){  return removeChangeEventListener(listener) || removeCoinsReceivedEventListener(listener) || removeCoinsSentEventListener(listener)|| removeKeyChainEventListener(listener)|| removeReorganizeEventListener(listener)|| removeTransactionConfidenceEventListener(listener);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public String doDefault(){  return INPUT;}  }
class C{  protected void createSubsample(){  int origSize=getInputFormat().numInstances();  int sampleSize=(int)(origSize * m_SampleSizePercent / 100);  getInputFormat().sort(getInputFormat().classIndex());  int[] classIndices=new int[getInputFormat().numClasses() + 1];  int currentClass=0;  classIndices[currentClass]=0;  for (int i=0; i < getInputFormat().numInstances(); i++) {    Instance current=getInputFormat().instance(i);    if (current.classIsMissing()) {      for (int j=currentClass + 1; j < classIndices.length; j++) {        classIndices[j]=i;      }      break;    } else     if (current.classValue() != currentClass) {      for (int j=currentClass + 1; j <= current.classValue(); j++) {        classIndices[j]=i;      }      currentClass=(int)current.classValue();    }  }  if (currentClass <= getInputFormat().numClasses()) {    for (int j=currentClass + 1; j < classIndices.length; j++) {      classIndices[j]=getInputFormat().numInstances();    }  }  int actualClasses=0;  for (int i=0; i < classIndices.length - 1; i++) {    if (classIndices[i] != classIndices[i + 1]) {      actualClasses++;    }  }  Random random=new Random(m_RandomSeed);  if (getNoReplacement()) {    createSubsampleWithoutReplacement(random,origSize,sampleSize,actualClasses,classIndices);  } else {    createSubsampleWithReplacement(random,origSize,sampleSize,actualClasses,classIndices);  }}  }
class C{  @DSModeled(DSC.SAFE) public RectF(RectF r){  this();  addTaint(r.getTaint());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void inject(Object managedBean) throws InjectionProviderException {  try {    injectionManager.injectInstance(managedBean,getNamingEnvironment(),false);  } catch (  InjectionException ie) {    throw new InjectionProviderException(ie);  }}  }
class C{  public Graph next(){  ++index;  if (index < graphs.size()) {    return graphs.get(index);  } else {    return null;  }}  }
class C{  public static void removeAllIOSApps(){  Process p=null;  try {    String[] cmdRemoveApps={"ssh","-p","2222","root@localhost","rm","-r","/User/Applications/*"};    p=Runtime.getRuntime().exec(cmdRemoveApps);    p.waitFor();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public static void convertActivityToTranslucentBeforeL(Activity activity){  try {    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method method=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz);    method.setAccessible(true);    method.invoke(activity,new Object[]{null});  } catch (  Throwable t) {  }}  }
class C{  @Override public boolean canProduceRules(){  return true;}  }
class C{  protected static void safeClose(final Closeable closeable){  if (closeable != null)   try {    closeable.close();  } catch (  IOException e) {  }}  }
class C{  public double nextEventsTime(){  return this.nextEvent.getTime();}  }
class C{  public void tearDown() throws Exception {}  }
class C{  public String globalInfo(){  return "Visualize incoming data/training/test sets in a 2D scatter plot.";}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WifiLock'";  db.execSQL(sql);}  }
class C{  public String pop(){  return executeStack.isEmpty() ? null : executeStack.pop();}  }
class C{  public PlainCstInsn(Rop opcode,SourcePosition position,RegisterSpec result,RegisterSpecList sources,Constant cst){  super(opcode,position,result,sources,cst);  if (opcode.getBranchingness() != Rop.BRANCH_NONE) {    throw new IllegalArgumentException("bogus branchingness");  }}  }
class C{  @Override public boolean equals(final Object obj){  if (obj instanceof MutableInt) {    return value == ((MutableInt)obj).intValue();  }  return false;}  }
class C{  @Override public int countMissing(){  int count=0;  for (int i=0; i < size(); i++) {    if (get(i) == MISSING_VALUE) {      count++;    }  }  return count;}  }
class C{  public static void installFramePrefsHandler(final Preferences prefs,final String name,Window window){  installFramePrefsHandler(prefs,name,window,new Dimension(400,300));}  }
class C{  public static void removeDir(String dir,long timeout) throws Exception {  File file=new File(dir);  if (file != null && file.exists()) {    if (file.isDirectory()) {      for (      File f : file.listFiles()) {        if (f == null)         continue;        if (f.isDirectory()) {          removeDir(f.getAbsolutePath(),timeout);        } else {          try {            long time=System.currentTimeMillis() - f.lastModified();            if (time > timeout)             f.delete();            Thread.sleep(1);          } catch (          Exception e) {            e.printStackTrace();          }        }      }    } else {      try {        long time=System.currentTimeMillis() - file.lastModified();        if (time > timeout)         file.delete();        Thread.sleep(1);      } catch (      Exception e) {        e.printStackTrace();      }    }  }}  }
class C{  public void receiveErrorcreateServiceSession(java.lang.Exception e){}  }
class C{  public boolean isLeaf(){  return right == null && left == null;}  }
class C{  public static org.apache.nutch.storage.ParseStatus.Builder newBuilder(){  return new org.apache.nutch.storage.ParseStatus.Builder();}  }
class C{  @Override public void processNewResult(ResultHierarchy hier,Result result){  List<Clustering<?>> clusterings=ResultUtil.getClusteringResults(result);  if (clusterings.size() < 2) {    return;  }  Segments segments=new Segments(clusterings);  hier.add(result,segments);}  }
class C{  private static String readZeroTerminatedString(final ByteBuffer wrapper){  final StringBuilder sb=new StringBuilder();  byte ch;  while ((ch=wrapper.get()) != 0)   sb.append((char)ch);  return sb.toString();}  }
class C{  public static String stripChar(String string,char c){  if (string.length() == 0) {    return string;  }  if (string.length() == 1) {    if (string.charAt(0) == c) {      return StringPool.EMPTY;    }    return string;  }  int left=0;  int right=string.length();  if (string.charAt(left) == c) {    left++;  }  if (string.charAt(right - 1) == c) {    right--;  }  return string.substring(left,right);}  }
class C{  @Override public String asString(){  return IDENTIFIER + actualLocation + targetLocation;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("DbConnectionConfig[");  buffer.append("cntByDriver = ").append(m_cntByDriver);  buffer.append(", cntParam = ").append(m_cntParam);  buffer.append(", url = ").append(m_url);  buffer.append(", user = ").append(m_user);  buffer.append(", pwd = ").append(m_pwd);  buffer.append("]");  return buffer.toString();}  }
class C{  public ModelImporterVisualPanel4(){  initComponents();}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  throwable=(Throwable)in.readObject();  deSerializeMessages(in);  deSerializeContext(in);}  }
class C{  public boolean addAll(Collection<Vec3D> points){  boolean addedAll=true;  for (  Vec3D p : points) {    addedAll&=addPoint(p);  }  return addedAll;}  }
class C{  public Path parent(){  return segmentCount() == 1 ? Path.ROOT : this.removeLastSegments(1);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!super.equals(obj)) {    return false;  }  if (!(obj instanceof XYLineAnnotation)) {    return false;  }  XYLineAnnotation that=(XYLineAnnotation)obj;  if (this.x1 != that.x1) {    return false;  }  if (this.y1 != that.y1) {    return false;  }  if (this.x2 != that.x2) {    return false;  }  if (this.y2 != that.y2) {    return false;  }  if (!PaintUtilities.equal(this.paint,that.paint)) {    return false;  }  if (!ObjectUtilities.equal(this.stroke,that.stroke)) {    return false;  }  return true;}  }
class C{  public void parsePatternByteCode(TextStream stream,DataOutputStream dataStream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network) throws IOException {  stream.nextWord();  stream.skipWhitespace();  dataStream.writeLong(network.createVertex(Primitive.CASE).getId());  dataStream.writeLong(network.createVertex(Primitive.PATTERN).getId());  Vertex pattern=null;  if (stream.peek() == '"') {    stream.skip();    pattern=network.createPattern(stream.nextStringDoubleQuotes(),this);    dataStream.writeLong(pattern.getId());  } else {    parseElementByteCode(stream,dataStream,elements,debug,network);  }  String next=stream.nextWord().toLowerCase();  if (next.equals(TOPIC)) {    dataStream.writeLong(network.createVertex(Primitive.TOPIC).getId());    parseElementByteCode(stream,dataStream,elements,debug,network);    next=stream.nextWord().toLowerCase();  }  if (next.equals(THAT)) {    dataStream.writeLong(network.createVertex(Primitive.THAT).getId());    Vertex that=null;    stream.skipWhitespace();    if (stream.peek() == '"') {      stream.skip();      that=network.createPattern(stream.nextStringDoubleQuotes(),this);      dataStream.writeLong(that.getId());    } else {      parseElementByteCode(stream,dataStream,elements,debug,network);    }    next=stream.nextWord().toLowerCase();  }  if (next.equals(GOTO)) {    dataStream.writeLong(network.createVertex(Primitive.GOTO).getId());    stream.skipWhitespace();    boolean parseGoto=true;    while (parseGoto) {      parseElementByteCode(stream,dataStream,elements,debug,network);      stream.skipWhitespace();      if (stream.peek() == ',') {        stream.skip();      } else {        parseGoto=false;      }    }    dataStream.writeLong(0l);  } else   if (next.equals(RETURN)) {    dataStream.writeLong(network.createVertex(Primitive.GOTO).getId());    dataStream.writeLong(network.createVertex(Primitive.RETURN).getId());    dataStream.writeLong(0l);  } else   if (next.equals(TEMPLATE) || next.equals(ANSWER)) {    dataStream.writeLong(network.createVertex(Primitive.TEMPLATE).getId());    parseElementByteCode(stream,dataStream,elements,debug,network);  } else {    stream.setPosition(stream.getPosition() - next.length());    throw new SelfParseException("expected one of GOTO, TEMPLATE, RETURN, THAT, TOPIC, found: " + next,stream);  }  dataStream.writeLong(0l);  ensureNext(';',stream);}  }
class C{  public int countJSONObjectSize(JsonObject obj,String key){  JsonArray items=obj.get(key).getAsJsonArray();  return items.size();}  }
class C{  public long allocate(int length){  int blocks=getBlockCount(length);  for (int i=0; ; ) {    int start=set.nextClearBit(i);    int end=set.nextSetBit(start + 1);    if (end < 0 || end - start >= blocks) {      set.set(start,start + blocks);      return getPos(start);    }    i=end;  }}  }
class C{  public void stop(){  for (  Sensor sensor : sensorList) {    sensorManager.unregisterListener(this,sensor);  }}  }
class C{  private void checkAndSetModifiersForMethod(MethodBinding methodBinding){  int modifiers=methodBinding.modifiers;  final ReferenceBinding declaringClass=methodBinding.declaringClass;  if ((modifiers & ExtraCompilerModifiers.AccAlternateModifierProblem) != 0)   problemReporter().duplicateModifierForMethod(declaringClass,(AbstractMethodDeclaration)this.referenceContext);  int realModifiers=modifiers & ExtraCompilerModifiers.AccJustFlag;  if (declaringClass.isInterface()) {    if ((realModifiers & ~(ClassFileConstants.AccPublic | ClassFileConstants.AccAbstract)) != 0) {      if ((declaringClass.modifiers & ClassFileConstants.AccAnnotation) != 0)       problemReporter().illegalModifierForAnnotationMember((AbstractMethodDeclaration)this.referenceContext); else       problemReporter().illegalModifierForInterfaceMethod((AbstractMethodDeclaration)this.referenceContext);    }    return;  }  final int UNEXPECTED_MODIFIERS=~(ClassFileConstants.AccPublic | ClassFileConstants.AccPrivate | ClassFileConstants.AccProtected| ClassFileConstants.AccAbstract| ClassFileConstants.AccStatic| ClassFileConstants.AccFinal| ClassFileConstants.AccSynchronized| ClassFileConstants.AccNative| ClassFileConstants.AccStrictfp);  if ((realModifiers & UNEXPECTED_MODIFIERS) != 0) {    problemReporter().illegalModifierForMethod((AbstractMethodDeclaration)this.referenceContext);    modifiers&=~ExtraCompilerModifiers.AccJustFlag | ~UNEXPECTED_MODIFIERS;  }  int accessorBits=realModifiers & (ClassFileConstants.AccPublic | ClassFileConstants.AccProtected | ClassFileConstants.AccPrivate);  if ((accessorBits & (accessorBits - 1)) != 0) {    problemReporter().illegalVisibilityModifierCombinationForMethod(declaringClass,(AbstractMethodDeclaration)this.referenceContext);    if ((accessorBits & ClassFileConstants.AccPublic) != 0) {      if ((accessorBits & ClassFileConstants.AccProtected) != 0)       modifiers&=~ClassFileConstants.AccProtected;      if ((accessorBits & ClassFileConstants.AccPrivate) != 0)       modifiers&=~ClassFileConstants.AccPrivate;    } else     if ((accessorBits & ClassFileConstants.AccProtected) != 0 && (accessorBits & ClassFileConstants.AccPrivate) != 0) {      modifiers&=~ClassFileConstants.AccPrivate;    }  }  if ((modifiers & ClassFileConstants.AccAbstract) != 0) {    int incompatibleWithAbstract=ClassFileConstants.AccPrivate | ClassFileConstants.AccStatic | ClassFileConstants.AccFinal| ClassFileConstants.AccSynchronized| ClassFileConstants.AccNative| ClassFileConstants.AccStrictfp;    if ((modifiers & incompatibleWithAbstract) != 0)     problemReporter().illegalAbstractModifierCombinationForMethod(declaringClass,(AbstractMethodDeclaration)this.referenceContext);    if (!methodBinding.declaringClass.isAbstract())     problemReporter().abstractMethodInAbstractClass((SourceTypeBinding)declaringClass,(AbstractMethodDeclaration)this.referenceContext);  }  if ((modifiers & ClassFileConstants.AccNative) != 0 && (modifiers & ClassFileConstants.AccStrictfp) != 0)   problemReporter().nativeMethodsCannotBeStrictfp(declaringClass,(AbstractMethodDeclaration)this.referenceContext);  if (((realModifiers & ClassFileConstants.AccStatic) != 0) && declaringClass.isNestedType() && !declaringClass.isStatic())   problemReporter().unexpectedStaticModifierForMethod(declaringClass,(AbstractMethodDeclaration)this.referenceContext);  methodBinding.modifiers=modifiers;}  }
class C{  @Field(36) public __VARIANT_NAME_3_union intVal(int intVal){  this.io.setIntField(this,36,intVal);  return this;}  }
class C{  public PTBTokenizerFactory(){  this(false);}  }
class C{  public UISourceViewer(String sourceCode,String codeStyle){  super(new BorderLayout());  this.sourceCode=sourceCode;  this.codeStyle=codeStyle;  initComponent();}  }
class C{  private File createTemporaryFile(String tmpbase,String suffix){  File tmpfile=null;  try {    tmpfile=File.createTempFile(tmpbase,suffix);  } catch (  IOException|SecurityException e) {  }  if (tmpfile == null) {    if (fname != null) {      try {        File tmpfolder=new File(fname).getAbsoluteFile().getParentFile();        tmpfile=File.createTempFile(fname,".tmp" + suffix,tmpfolder);      } catch (      IOException ioe) {        fatalError(ioe);      }    } else {      fatalError(new IOException(getMsg("error.create.tempfile")));    }  }  return tmpfile;}  }
class C{  public void onDrawerClosed(View view){  super.onDrawerClosed(view);}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  NonUnivLocationForm nonUnivLocationForm=(NonUnivLocationForm)form;  MessageResources rsc=getResources(request);  ActionMessages errors=new ActionMessages();  sessionContext.checkPermission(Right.AddNonUnivLocation);  Set<Department> departments=Department.getUserDepartments(sessionContext.getUser());  if (nonUnivLocationForm.getDoit() != null) {    String doit=nonUnivLocationForm.getDoit();    if (doit.equals(rsc.getMessage("button.returnToRoomList"))) {      return mapping.findForward("showRoomList");    }    if (doit.equals(rsc.getMessage("button.addNew"))) {      errors=nonUnivLocationForm.validate(mapping,request);      if (errors.isEmpty() && !sessionContext.hasPermission(nonUnivLocationForm.getDeptCode(),"Department",Right.AddNonUnivLocation)) {        errors.add("nonUniversityLocation",new ActionMessage("errors.generic","Acess denied."));      }      if (errors.size() == 0) {        update(request,nonUnivLocationForm);        return mapping.findForward("showRoomList");      } else {        setDepts(request,departments);        saveErrors(request,errors);        return mapping.findForward("showAdd");      }    }  }  setDepts(request,departments);  nonUnivLocationForm.setDeptSize(departments.size());  if (departments.size() == 1) {    Department d=departments.iterator().next();    nonUnivLocationForm.setDeptCode(d.getDeptCode());  } else   if (sessionContext.getAttribute(SessionAttribute.DepartmentCodeRoom) != null) {    nonUnivLocationForm.setDeptCode((String)sessionContext.getAttribute(SessionAttribute.DepartmentCodeRoom));  }  return mapping.findForward("showAdd");}  }
class C{  private static float[] randomPoints(Random random,int wavesCount,float width,float shiftCoef){  float shift;  float[] points=new float[wavesCount + 1];  for (int i=0; i < points.length; i++) {    if (i == 0) {      points[i]=-1;    } else     if (i == points.length - 1) {      points[i]=1;    } else {      shift=random.nextFloat() * shiftCoef * width;      shift*=random.nextBoolean() ? 1 : -1;      points[i]=-1 + i * width + shift;    }  }  return points;}  }
class C{  public Marker updateItineraryMarker(Marker marker,GeoPoint p,int index,int titleResId,int markerResId,int imageResId,String address){  Drawable icon=ResourcesCompat.getDrawable(getResources(),markerResId,null);  String title=getResources().getString(titleResId);  if (marker == null) {    marker=new Marker(map);    marker.setAnchor(Marker.ANCHOR_CENTER,Marker.ANCHOR_BOTTOM);    marker.setInfoWindow(mViaPointInfoWindow);    marker.setDraggable(true);    marker.setOnMarkerDragListener(mItineraryListener);    mItineraryMarkers.add(marker);  }  marker.setTitle(title);  marker.setPosition(p);  marker.setIcon(icon);  if (imageResId != -1)   marker.setImage(ResourcesCompat.getDrawable(getResources(),imageResId,null));  marker.setRelatedObject(index);  map.invalidate();  if (address != null)   marker.setSnippet(address); else   new ReverseGeocodingTask().execute(marker);  return marker;}  }
class C{  @PostConstruct public void customInit(){  logger.debug("Looking for Spring active profiles...");  if (env.getActiveProfiles().length == 0) {    logger.info("No Spring profile configured, running with default configuration.");  } else {    logger.info("Detected Spring profiles: {}",Arrays.asList(env.getActiveProfiles()));  }}  }
class C{  public void testValidApiNameAttribute(){  doTest();}  }
class C{  public AsyncLogTarget(final LogTarget logTarget,final int queueSize,final boolean closeTarget){  super(logTarget,closeTarget);  m_list=new LinkedList();  m_queueSize=queueSize;  open();}  }
class C{  public static String formatTimeFromTimestamp(long ts,String fmt){  java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat(fmt);  sdf.setTimeZone(TimeZone.getTimeZone("UTC"));  try {    return sdf.format(new Date(ts));  } catch (  Exception ex) {  }  return "";}  }
class C{  public Quadrant reflect(int direction){  if (direction == QuadTreeNode.WEST || direction == QuadTreeNode.EAST) {    return cNorthEast;  }  return cSouthWest;}  }
class C{  @Override public void addToken(PLTokenType tokenType,String regex){  mTokensData.add(PLTokenData.PLTokenDataMake(tokenType,Pattern.compile("^(" + regex + ")")));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:35.915 -0500",hash_original_method="F795553E3E2863CD60C70A0480C00F05",hash_generated_method="9849AA69ACB5B2607449DBE34ECE3361") public static boolean startActivities(Activity activity,Intent[] intents){  if (Build.VERSION.SDK_INT >= 11) {    ActivityCompatHoneycomb.startActivities(activity,intents);    return true;  }  return false;}  }
class C{  public CopyAction(){  super(copyAction);}  }
class C{  public static void main(final String[] args){  Config config=ConfigUtils.createConfig();  config.addModule(OsmConverterConfigGroup.createDefaultConfig());  Set<String> toRemove=config.getModules().keySet().stream().filter(null).collect(Collectors.toSet());  toRemove.forEach(null);  new ConfigWriter(config).write(args[0]);}  }
class C{  public HardReferenceQueue(final HardReferenceQueueEvictionListener<T> listener,final int capacity){  this(listener,capacity,Math.min(capacity,DEFAULT_NSCAN));}  }
class C{  public Collection<Integer> partitions(){  return parts.keySet();}  }
class C{  public static void insert(final CCriteriumTreeNode parent,final CCriteriumTreeNode child){  for (  final CCriteriumTreeNode grandchild : parent.getChildren()) {    child.getChildren().add(grandchild);    grandchild.m_parent=child;  }  parent.getChildren().clear();  parent.getChildren().add(child);  child.m_parent=parent;}  }
class C{  public <K,V>JavaPairRDD<T,Option<V>> outerJoinGeodeRegion(String regionPath,Function<T,K> func){  return outerJoinGeodeRegion(regionPath,func,rddf.defaultConnectionConf());}  }
class C{  public static <T>Source<T> of(Generator<T> generator){  return new Source<>(generator,noShrink(),defaultAsString());}  }
class C{  private void throwExceptionIfValidationWarningsExist(final List<ApiParameterError> dataValidationErrors){  if (!dataValidationErrors.isEmpty()) {    throw new PlatformApiDataValidationException(dataValidationErrors);  }}  }
class C{  private UnManagedVolume findUnManagedVolumeForWwn(String wwn,DbClient dbClient,List<String> cachedStorageNativeIds){  UnManagedVolume unManagedVolume=unManagedVolumesToUpdateByWwn.get(wwn);  if (null == unManagedVolume) {    unManagedVolume=DiscoveryUtils.checkUnManagedVolumeExistsInDBByWwn(dbClient,wwn);  }  if (null == unManagedVolume && cachedStorageNativeIds != null) {    for (    String storageNativeIdPrefix : cachedStorageNativeIds) {      String searchCriteria=storageNativeIdPrefix + "+UNMANAGEDVOLUME+" + wwn.toLowerCase();      List<UnManagedVolume> volumes=CustomQueryUtility.getUnManagedVolumeByNativeGuid(dbClient,searchCriteria);      if (volumes != null && !volumes.isEmpty()) {        log.info("Found XIO unmanaged volume: " + volumes.get(0).getLabel());        return volumes.get(0);      }    }  }  return unManagedVolume;}  }
class C{  @Override public void write(String str){  write(str.toCharArray());}  }
class C{  public void addStep(IStep step){  if (step == null)   throw new IllegalArgumentException();  if (focusStore == null) {    super.addStep(step);  } else {    final Program subProgram=getTMUtility().mapForTruthMaintenance(step,focusStore);    if (this.isClosure()) {      final Iterator<? extends IStep> steps=subProgram.steps();      while (steps.hasNext()) {        super.addStep(steps.next());      }    } else {      super.addStep(subProgram);    }  }}  }
class C{  public static void removeFiles(String[] files){  for (  String directory : files) {    File f=new File(directory);    if (!f.exists() || !f.canWrite() || f.isDirectory())     continue;    f.delete();  }}  }
class C{  public AsyncOperationException(final AsyncOperationStatus status){  super(status.status + ": " + status.statusDescription,null,OneDriveErrorCodes.AsyncTaskFailed);  mStatus=status;}  }
class C{  public NoInitialContextException(){  super();}  }
class C{  @Override protected byte[] downloadFile(){  this.setRunning(true);  byte[] result=null;  InputStream is=null;  ByteArrayOutputStream bas=null;  String url=this.getURL();  PLFileDownloaderListener listener=this.getListener();  boolean hasListener=(listener != null);  int responseCode=-1;  long startTime=System.currentTimeMillis();  HttpClient client=new HttpClient();  HttpMethod method=new GetMethod(url);  HttpMethodParams methodParams=method.getParams();  methodParams.setParameter(HttpMethodParams.USER_AGENT,"PanoramaGL Android");  methodParams.setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET,"UTF-8");  methodParams.setParameter(HttpMethodParams.RETRY_HANDLER,new DefaultHttpMethodRetryHandler(this.getMaxAttempts(),false));  try {    responseCode=client.executeMethod(method);    if (responseCode != HttpStatus.SC_OK)     throw new IOException(method.getStatusText());    Header header=method.getRequestHeader("Content-Length");    long contentLength=(header != null ? Long.parseLong(header.getValue()) : 1);    if (this.isRunning()) {      if (hasListener)       listener.didBeginDownload(url,startTime);    } else     throw new PLRequestInvalidatedException(url);    is=method.getResponseBodyAsStream();    bas=new ByteArrayOutputStream();    byte[] buffer=new byte[256];    int length=0, total=0;    while ((length=is.read(buffer)) != -1) {      if (this.isRunning()) {        bas.write(buffer,0,length);        total+=length;        if (hasListener)         listener.didProgressDownload(url,(int)(((float)total / (float)contentLength) * 100.0f));      } else       throw new PLRequestInvalidatedException(url);    }    if (total == 0)     throw new IOException("Request data has invalid size (0)");    if (this.isRunning()) {      result=bas.toByteArray();      if (hasListener)       listener.didEndDownload(url,result,System.currentTimeMillis() - startTime);    } else     throw new PLRequestInvalidatedException(url);  } catch (  Throwable e) {    if (this.isRunning()) {      PLLog.error("PLHTTPFileDownloader::downloadFile",e);      if (hasListener)       listener.didErrorDownload(url,e.toString(),responseCode,result);    }  } finally {    if (bas != null) {      try {        bas.close();      } catch (      IOException e) {        PLLog.error("PLHTTPFileDownloader::downloadFile",e);      }    }    if (is != null) {      try {        is.close();      } catch (      IOException e) {        PLLog.error("PLHTTPFileDownloader::downloadFile",e);      }    }    method.releaseConnection();  }  this.setRunning(false);  return result;}  }
class C{  public BeanDescriptor(Class<?> beanClass,Class<?> customizerClass){  this.beanClassRef=getWeakReference(beanClass);  this.customizerClassRef=getWeakReference(customizerClass);  String name=beanClass.getName();  while (name.indexOf('.') >= 0) {    name=name.substring(name.indexOf('.') + 1);  }  setName(name);}  }
class C{  public void copy(){  if (startPosition >= endPosition)   return;  myClipboard.setContents(content,startPosition,endPosition - startPosition);}  }
class C{  protected static <T extends EppResource>void assertAsyncDeletionTaskEnqueued(T resource,String requestingClientId,boolean isSuperuser) throws Exception {  String expectedPayload=String.format("resourceKey=%s&requestingClientId=%s&isSuperuser=%s",Key.create(resource).getString(),requestingClientId,Boolean.toString(isSuperuser));  assertTasksEnqueued("async-delete-pull",new TaskMatcher().etaDelta(Duration.standardSeconds(75),Duration.standardSeconds(105)).payload(expectedPayload));}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  m_resultContentHandler.ignorableWhitespace(ch,start,length);}  }
class C{  public Map<String,String> addAuthHeader(Map<String,String> params){  return addAuthHeader(getUser(),getPassword(),params);}  }
class C{  public static Marketplace createMarketplaceWithRestrictedAccessAndAccessibleOrganizations(Organization owner,String marketplaceId,DataService ds,List<Organization> accessibleOrganizations) throws NonUniqueBusinessKeyException {  Assert.assertNotNull("Marketplace owner not defined",owner);  Assert.assertNotNull("Marketplace id not defined",marketplaceId);  Assert.assertTrue(marketplaceId.trim().length() > 0);  Marketplace mp=new Marketplace();  mp.setMarketplaceId(marketplaceId.trim());  mp.setOrganization(owner);  mp.setOpen(true);  setDefaultLandingpage(mp);  createRevenueModels(mp,ds);  mp.setRestricted(true);  ds.persist(mp);  for (  Organization org : accessibleOrganizations) {    MarketplaceAccess access=new MarketplaceAccess();    access.setMarketplace(mp);    access.setOrganization(org);    ds.persist(access);  }  return mp;}  }
class C{  @Override public void onRead(EndpointServiceRequest<ReadRequest,ReadResponse> req) throws ServiceFaultException {  ReadRequest request=req.getRequest();  ReadValueId[] nodesToRead=request.getNodesToRead();  DataValue[] results=null;  ReadResponse response=null;  ResponseHeader h=checkRequestHeader(request.getRequestHeader());  if (h.getServiceResult().isGood()) {    if (request.getMaxAge() < 0) {      h=new ResponseHeader(DateTime.currentTime(),request.getRequestHeader().getRequestHandle(),new StatusCode(StatusCodes.Bad_MaxAgeInvalid),null,null,null);    } else     if (request.getTimestampsToReturn() == null) {      h=new ResponseHeader(DateTime.currentTime(),request.getRequestHeader().getRequestHandle(),new StatusCode(StatusCodes.Bad_TimestampsToReturnInvalid),null,null,null);    } else     if (nodesToRead != null) {      results=new DataValue[nodesToRead.length];      DateTime serverTimestamp=DateTime.currentTime();      for (int i=0; i < nodesToRead.length; i++) {        results[i]=null;        Map<UnsignedInteger,DataValue> attributeMap=onReadResultsMap.get(nodesToRead[i].getNodeId());        if (attributeMap != null) {          if (attributeMap.containsKey(nodesToRead[i].getAttributeId())) {            results[i]=(DataValue)attributeMap.get(nodesToRead[i].getAttributeId()).clone();            if (results[i] == null) {              results[i]=new DataValue(new StatusCode(StatusCodes.Bad_AttributeIdInvalid));            } else             if (new UnsignedInteger(13).equals(nodesToRead[i].getAttributeId())) {              DateTime currentTimestamp=results[i].getServerTimestamp();              DateTime currentTime=DateTime.fromMillis(System.currentTimeMillis());              long age=currentTime.getTimeInMillis() - currentTimestamp.getTimeInMillis();              long maxAge=request.getMaxAge().longValue();              long diff=maxAge - age;              if (diff <= 0) {                results[i].setServerTimestamp(serverTimestamp);              }              if (request.getTimestampsToReturn() != null) {switch (request.getTimestampsToReturn()) {case Source:                  results[i].setSourceTimestamp(serverTimestamp);                results[i].setServerTimestamp(null);              break;case Both:            results[i].setSourceTimestamp(serverTimestamp);          break;case Neither:        results[i].setServerTimestamp(null);      break;default :    break;}}}} else {results[i]=new DataValue(new StatusCode(StatusCodes.Bad_AttributeIdInvalid));}} else {results[i]=new DataValue(new StatusCode(StatusCodes.Bad_NodeIdUnknown));}}} else {h=new ResponseHeader(DateTime.currentTime(),request.getRequestHeader().getRequestHandle(),new StatusCode(StatusCodes.Bad_NothingToDo),null,null,null);}}response=new ReadResponse(null,results,null);response.setResponseHeader(h);req.sendResponse(response);}  }
class C{  @Nullable public T_ENTITY findById(@Nonnull Integer id){  T_ENTITY result=null;  try {    begin();    result=getEntityManager().find(entityClass,id);    if (reloadEntities && result != null) {      getHibernateSession().refresh(result,LockOptions.READ);    }    commit();  } catch (  Exception e) {    rollback();    e.printStackTrace();    throw new RuntimeException(e);  } finally {    cleanup();  }  return result;}  }
class C{  public Response advanced(){  return response;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.016 -0400",hash_original_method="05F3A8B360721C62190516DE568C4E59",hash_generated_method="35E0CF5CD1087DF45A1FE3EBC4CC70B6") public final boolean isInfoEnabled(){  return isLevelEnabled(SimpleLog.LOG_LEVEL_INFO);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:25.382 -0500",hash_original_method="9C8BB7874FA14669E3E1A4855CFECE2B",hash_generated_method="1E4AE75F15E21F869CCCFC0572EF8EC7") private void cleanUp(){  if (rehash()) {    return;  }  if (size == 0) {    return;  }  int index=clean;  Object[] table=this.table;  for (int counter=table.length; counter > 0; counter>>=1, index=next(index)) {    Object k=table[index];    if (k == TOMBSTONE || k == null) {      continue;    }    @SuppressWarnings("unchecked") Reference<ThreadLocal<?>> reference=(Reference<ThreadLocal<?>>)k;    if (reference.get() == null) {      table[index]=TOMBSTONE;      table[index + 1]=null;      tombstones++;      size--;    }  }  clean=index;}  }
class C{  @Override public void onCanceled(List<AppEntry> apps){  super.onCanceled(apps);  onReleaseResources(apps);}  }
class C{  public static void main(String[] args) throws Exception {  LOG.debug("Starting up");  Callable<Object> task=null;  AsyncDBUtil.performLocked(task,"/tmp/locktest",new Object());  LOG.debug("Shutting down");}  }
class C{  private void tryScrollBackToTop(){  if (!mPtrIndicator.isUnderTouch()) {    mScrollChecker.tryToScrollTo(PtrIndicator.POS_START,mDurationToCloseHeader);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected RewrittenOutboundUrl processEncodeURL(HttpServletResponse hsResponse,HttpServletRequest hsRequest,boolean encodeUrlHasBeenRun,String outboundUrl){  if (log.isDebugEnabled()) {    log.debug("processing outbound url for " + outboundUrl);  }  if (outboundUrl == null) {    return new RewrittenOutboundUrl(null,true);  }  boolean finalEncodeOutboundUrl=true;  String finalToUrl=outboundUrl;  final List outboundRules=conf.getOutboundRules();  try {    for (int i=0; i < outboundRules.size(); i++) {      final OutboundRule outboundRule=(OutboundRule)outboundRules.get(i);      if (!encodeUrlHasBeenRun && outboundRule.isEncodeFirst()) {        continue;      }      if (encodeUrlHasBeenRun && !outboundRule.isEncodeFirst()) {        continue;      }      final RewrittenOutboundUrl rewrittenUrl=outboundRule.execute(finalToUrl,hsRequest,hsResponse);      if (rewrittenUrl != null) {        if (log.isDebugEnabled()) {          log.debug("\"" + outboundRule.getDisplayName() + "\" matched");        }        finalToUrl=rewrittenUrl.getTarget();        finalEncodeOutboundUrl=rewrittenUrl.isEncode();        if (outboundRule.isLast()) {          log.debug("rule is last");          break;        }      }    }  } catch (  InvocationTargetException e) {    try {      handleInvocationTargetException(hsRequest,hsResponse,e);    } catch (    ServletException e1) {      log.error(e1);    }catch (    IOException e1) {      log.error(e1);    }  }  return new RewrittenOutboundUrl(finalToUrl,finalEncodeOutboundUrl);}  }
class C{  public void stopAnimation(){  if (!valueAnimator.isRunning()) {    return;  }  valueAnimator.cancel();  resetAll();  invalidate();}  }
class C{  public int run(String[] args) throws Exception {  Options options=new Options();  Option helpOpts=OptionBuilder.withArgName("help").withDescription("show this help message").create("help");  Option webGraphDbOpts=OptionBuilder.withArgName("webgraphdb").hasArg().withDescription("the web graph database to use").create("webgraphdb");  Option segOpts=OptionBuilder.withArgName("segment").hasArgs().withDescription("the segment(s) to use").create("segment");  Option segDirOpts=OptionBuilder.withArgName("segmentDir").hasArgs().withDescription("the segment directory to use").create("segmentDir");  Option normalizeOpts=OptionBuilder.withArgName("normalize").withDescription("whether to use URLNormalizers on the URL's in the segment").create("normalize");  Option filterOpts=OptionBuilder.withArgName("filter").withDescription("whether to use URLFilters on the URL's in the segment").create("filter");  options.addOption(helpOpts);  options.addOption(webGraphDbOpts);  options.addOption(segOpts);  options.addOption(segDirOpts);  options.addOption(normalizeOpts);  options.addOption(filterOpts);  CommandLineParser parser=new GnuParser();  try {    CommandLine line=parser.parse(options,args);    if (line.hasOption("help") || !line.hasOption("webgraphdb") || (!line.hasOption("segment") && !line.hasOption("segmentDir"))) {      HelpFormatter formatter=new HelpFormatter();      formatter.printHelp("WebGraph",options);      return -1;    }    String webGraphDb=line.getOptionValue("webgraphdb");    Path[] segPaths=null;    if (line.hasOption("segment")) {      String[] segments=line.getOptionValues("segment");      segPaths=new Path[segments.length];      for (int i=0; i < segments.length; i++) {        segPaths[i]=new Path(segments[i]);      }    }    if (line.hasOption("segmentDir")) {      Path dir=new Path(line.getOptionValue("segmentDir"));      FileSystem fs=dir.getFileSystem(getConf());      FileStatus[] fstats=fs.listStatus(dir,HadoopFSUtil.getPassDirectoriesFilter(fs));      segPaths=HadoopFSUtil.getPaths(fstats);    }    boolean normalize=false;    if (line.hasOption("normalize")) {      normalize=true;    }    boolean filter=false;    if (line.hasOption("filter")) {      filter=true;    }    createWebGraph(new Path(webGraphDb),segPaths,normalize,filter);    return 0;  } catch (  Exception e) {    LOG.error("WebGraph: " + StringUtils.stringifyException(e));    return -2;  }}  }
class C{  public void evaluateCalculationFunctions(JCas jcas){  List<Timex3> linearDates=new ArrayList<Timex3>();  FSIterator iterTimex=jcas.getAnnotationIndex(Timex3.type).iterator();  while (iterTimex.hasNext()) {    Timex3 timex=(Timex3)iterTimex.next();    if ((timex.getTimexType().equals("DATE")) || (timex.getTimexType().equals("TIME"))) {      linearDates.add(timex);    }  }  Pattern cmd_p=Pattern.compile("((\\w\\w\\w\\w)-(\\w\\w)-(\\w\\w))\\s+funcDateCalc\\((\\w+)\\((.+)\\)\\)");  Pattern year_p=Pattern.compile("(\\d\\d\\d\\d)");  Pattern date_p=Pattern.compile("(\\d\\d\\d\\d)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])");  Matcher cmd_m;  Matcher year_m;  Matcher date_m;  String date;  String year;  String month;  String day;  String function;  String args[];  String valueNew;  for (int i=0; i < linearDates.size(); i++) {    Timex3 t_i=(Timex3)linearDates.get(i);    String value_i=t_i.getTimexValue();    cmd_m=cmd_p.matcher(value_i);    valueNew=value_i;    if (cmd_m.matches()) {      date=cmd_m.group(1);      year=cmd_m.group(2);      month=cmd_m.group(3);      day=cmd_m.group(4);      function=cmd_m.group(5);      args=cmd_m.group(6).split("\\s*,\\s*");      for (int j=0; j < args.length; j++) {        args[j]=args[j].replace("DATE",date);        args[j]=args[j].replace("YEAR",year);        args[j]=args[j].replace("MONTH",month);        args[j]=args[j].replace("DAY",day);      }      if (function.equals("EasterSunday")) {        year_m=year_p.matcher(args[0]);        if (year_m.matches()) {          valueNew=this.getEasterSunday(Integer.valueOf(args[0]),Integer.valueOf(args[1]));        } else {          Logger.printError("wrong format");          valueNew="XXXX-XX-XX";        }      } else       if (function.equals("WeekdayRelativeTo")) {        date_m=date_p.matcher(args[0]);        if (date_m.matches()) {          valueNew=this.getWeekdayRelativeTo(args[0],Integer.valueOf(args[1]),Integer.valueOf(args[2]),Boolean.parseBoolean(args[3]));        } else {          Logger.printError("wrong format");          valueNew="XXXX-XX-XX";        }      } else       if (function.equals("EasterSundayOrthodox")) {        year_m=year_p.matcher(args[0]);        if (year_m.matches()) {          valueNew=this.getEasterSundayOrthodox(Integer.valueOf(args[0]),Integer.valueOf(args[1]));        } else {          Logger.printError("wrong format");          valueNew="XXXX-XX-XX";        }      } else       if (function.equals("ShroveTideOrthodox")) {        year_m=year_p.matcher(args[0]);        if (year_m.matches()) {          valueNew=this.getShroveTideWeekOrthodox(Integer.valueOf(args[0]));        } else {          Logger.printError("wrong format");          valueNew="XXXX-XX-XX";        }      } else {        Logger.printError("command not found");        valueNew="XXXX-XX-XX";      }    }    t_i.removeFromIndexes();    t_i.setTimexValue(valueNew);    t_i.addToIndexes();    linearDates.set(i,t_i);  }}  }
class C{  public void addEpsilon(int source,int dest){  Transition t=new Transition();  int count=initTransition(dest,t);  for (int i=0; i < count; i++) {    getNextTransition(t);    addTransition(source,t.dest,t.min,t.max);  }  if (isAccept(dest)) {    setAccept(source,true);  }}  }
class C{  public StoreFileMetaData metadata(){  return metadata;}  }
class C{  private void addCounters(Iterable<HadoopCounter> cntrs,boolean cp){  assert cntrs != null;  for (  HadoopCounter cntr : cntrs) {    if (cp) {      HadoopCounter cntrCp=createCounter(cntr.getClass(),cntr.group(),cntr.name());      cntrCp.merge(cntr);      cntr=cntrCp;    }    cntrsMap.put(new CounterKey(cntr.getClass(),cntr.group(),cntr.name()),cntr);  }}  }
class C{  public char charAt(int index){  return ((char[])m_obj)[index + m_start];}  }
class C{  public void addInvokevirtual(CtClass clazz,String name,String desc){  addInvokevirtual(constPool.addClassInfo(clazz),name,desc);}  }
class C{  public static void main(String[] argv){  runClusterer(new FarthestFirst(),argv);}  }
class C{  public LocalResult(){}  }
class C{  public void onTaskStart(HadoopTaskInfo info,long ts){  evts.add(new T2<>(eventName(info,"start"),ts));}  }
class C{  public void doLayout(){  if (editingComponent != null) {    int width=getWidth();    int height=getHeight();    if (getComponentOrientation().isLeftToRight()) {      editingComponent.setBounds(offset,0,width - offset,height);    } else {      editingComponent.setBounds(0,0,width - offset,height);    }  }}  }
class C{  public void searchFor(final String searchString){  setSelectedItem(searchString);  m_searcher.clearResults();  searchFor(searchString,false,false);}  }
class C{  private void addInstructionCount(int count){  cfw.addALoad(contextLocal);  cfw.addPush(count);  addScriptRuntimeInvoke("addInstructionCount","(Lorg/mozilla/javascript/Context;" + "I)V");}  }
class C{  public static String toString(byte x){  return toString(x,10);}  }
class C{  public void resize(int maxSize){  if (maxSize <= 0) {    throw new IllegalArgumentException("maxSize <= 0");  }synchronized (this) {    this.maxSize=maxSize;  }  trimToSize(maxSize);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:46.156 -0500",hash_original_method="915750F5CD3DA8563236F4856CDF7624",hash_generated_method="9BD8A92E1B6E56BFF9D1B998641A3453") private void processNextLoader(){  LoadListener loader=null;synchronized (mLoaderQueue) {    loader=mLoaderQueue.peek();  }  if (loader != null) {synchronized (mRequestInFlightLock) {      assert (mRequestInFlight == false);      mRequestInFlight=true;    }    CallbackProxy proxy=loader.getFrame().getCallbackProxy();    String hostname=loader.proxyAuthenticate() ? mNetwork.getProxyHostname() : loader.host();    String realm=loader.realm();    proxy.onReceivedHttpAuthRequest(this,hostname,realm);  }}  }
class C{  public DebugConfiguration(DebugConfigurationType type,String name,String host,int port,Map<String,String> connectionProperties){  this.type=type;  this.name=name;  this.host=host;  this.port=port;  this.connectionProperties=connectionProperties;}  }
class C{  private void checkOffsetOrImageTag(ExifTag tag){  if (tag.getComponentCount() == 0) {    return;  }  short tid=tag.getTagId();  int ifd=tag.getIfd();  if (tid == TAG_EXIF_IFD && checkAllowed(ifd,ExifInterface.TAG_EXIF_IFD)) {    if (isIfdRequested(IfdId.TYPE_IFD_EXIF) || isIfdRequested(IfdId.TYPE_IFD_INTEROPERABILITY)) {      registerIfd(IfdId.TYPE_IFD_EXIF,tag.getValueAt(0));    }  } else   if (tid == TAG_GPS_IFD && checkAllowed(ifd,ExifInterface.TAG_GPS_IFD)) {    if (isIfdRequested(IfdId.TYPE_IFD_GPS)) {      registerIfd(IfdId.TYPE_IFD_GPS,tag.getValueAt(0));    }  } else   if (tid == TAG_INTEROPERABILITY_IFD && checkAllowed(ifd,ExifInterface.TAG_INTEROPERABILITY_IFD)) {    if (isIfdRequested(IfdId.TYPE_IFD_INTEROPERABILITY)) {      registerIfd(IfdId.TYPE_IFD_INTEROPERABILITY,tag.getValueAt(0));    }  } else   if (tid == TAG_JPEG_INTERCHANGE_FORMAT && checkAllowed(ifd,ExifInterface.TAG_JPEG_INTERCHANGE_FORMAT)) {    if (isThumbnailRequested()) {      registerCompressedImage(tag.getValueAt(0));    }  } else   if (tid == TAG_JPEG_INTERCHANGE_FORMAT_LENGTH && checkAllowed(ifd,ExifInterface.TAG_JPEG_INTERCHANGE_FORMAT_LENGTH)) {    if (isThumbnailRequested()) {      mJpegSizeTag=tag;    }  } else   if (tid == TAG_STRIP_OFFSETS && checkAllowed(ifd,ExifInterface.TAG_STRIP_OFFSETS)) {    if (isThumbnailRequested()) {      if (tag.hasValue()) {        for (int i=0; i < tag.getComponentCount(); i++) {          if (tag.getDataType() == ExifTag.TYPE_UNSIGNED_SHORT) {            registerUncompressedStrip(i,tag.getValueAt(i));          } else {            registerUncompressedStrip(i,tag.getValueAt(i));          }        }      } else {        mCorrespondingEvent.put(tag.getOffset(),new ExifTagEvent(tag,false));      }    }  } else   if (tid == TAG_STRIP_BYTE_COUNTS && checkAllowed(ifd,ExifInterface.TAG_STRIP_BYTE_COUNTS) && isThumbnailRequested() && tag.hasValue()) {    mStripSizeTag=tag;  }}  }
class C{  public boolean contains(Object o){  return super.contains(WeakElement.create(o));}  }
class C{  private void addToCandidates(DotNode dotNode){  List<Rule> rules=dotNode.getRuleCollection().getSortedRules(featureFunctions);  Rule bestRule=rules.get(0);  List<SuperNode> superNodes=dotNode.getAntSuperNodes();  List<HGNode> tailNodes=new ArrayList<>();  for (  SuperNode superNode : superNodes)   tailNodes.add(superNode.nodes.get(0));  int[] ranks=new int[1 + superNodes.size()];  Arrays.fill(ranks,1);  ComputeNodeResult result=new ComputeNodeResult(featureFunctions,bestRule,tailNodes,dotNode.begin(),dotNode.end(),dotNode.getSourcePath(),sentence);  CubePruneState seedState=new CubePruneState(result,ranks,rules,tailNodes,dotNode);  allCandidates[dotNode.end() - dotNode.begin()].add(seedState);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 158) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public void refillGirls(){}  }
class C{  public List<String> makeURLList(String shard){  List<String> urls=StrUtils.splitSmart(shard,"|",true);  for (int i=0; i < urls.size(); i++) {    urls.set(i,buildUrl(urls.get(i)));  }  if (urls.size() > 1)   Collections.shuffle(urls,r);  return urls;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentgetelementsbytagnamelength.class,args);}  }
class C{  public final double divide(Angle angle){  if (angle == null) {    throw new IllegalArgumentException("Angle Is Null");  }  if (angle.getDegrees() == 0.0) {    throw new IllegalArgumentException("Divide By Zero");  }  return this.degrees / angle.degrees;}  }
class C{  public boolean isIndependent(Node x,Node y,List<Node> z){  if (z == null) {    throw new NullPointerException();  }  for (  Node node : z) {    if (node == null) {      throw new NullPointerException();    }  }  int size=z.size() + 2;  int[] indices=new int[size];  indices[0]=getVariables().indexOf(x);  indices[1]=getVariables().indexOf(y);  for (int i=0; i < z.size(); i++) {    indices[i + 2]=getVariables().indexOf(z.get(i));  }  TetradMatrix submatrix=covMatrix().getMatrix().getSelection(indices,indices);  if (DataUtils.containsMissingValue(submatrix)) {    throw new IllegalArgumentException("Please remove or impute missing values first.");  }  if (submatrix.rank() != submatrix.rows()) {    throw new IllegalArgumentException("Matrix singularity detected while using correlations " + "\nto check for independence; probably due to collinearity " + "\nin the data. The independence fact being checked was "+ "\n" + x + " _||_ "+ y+ " | "+ z+ ".");  }  submatrix=submatrix.inverse();  double a=-1.0 * submatrix.get(0,1);  double b=Math.sqrt(submatrix.get(0,0) * submatrix.get(1,1));  this.storedR=a / b;  if (Math.abs(storedR) > 1) {    storedR=Math.signum(storedR);  }  if (Double.isNaN(this.storedR)) {    throw new IllegalArgumentException("Conditional correlation cannot be computed: " + SearchLogUtils.independenceFact(x,y,z));  }  boolean independent=isZero(this.storedR,size,getAlpha());  double pValue=getPValue();  if (verbose) {    if (independent) {      TetradLogger.getInstance().log("independencies",SearchLogUtils.independenceFactMsg(x,y,z,pValue));    } else {      TetradLogger.getInstance().log("dependencies",SearchLogUtils.dependenceFactMsg(x,y,z,pValue));    }  }  return independent;}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  if (source == null) {    throw new NullPointerException("Source array was null.");  }  if (destination == null) {    throw new NullPointerException("Destination array was null.");  }  if (srcOffset < 0 || srcOffset + 3 >= source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and still process four bytes.",source.length,srcOffset));  }  if (destOffset < 0 || destOffset + 2 >= destination.length) {    throw new IllegalArgumentException(String.format("Destination array with length %d cannot have offset of %d and still store three bytes.",destination.length,destOffset));  }  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=(DECODABET[source[srcOffset]] & 0xFF) << 18 | (DECODABET[source[srcOffset + 1]] & 0xFF) << 12;    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=(DECODABET[source[srcOffset]] & 0xFF) << 18 | (DECODABET[source[srcOffset + 1]] & 0xFF) << 12 | (DECODABET[source[srcOffset + 2]] & 0xFF) << 6;    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=(DECODABET[source[srcOffset]] & 0xFF) << 18 | (DECODABET[source[srcOffset + 1]] & 0xFF) << 12 | (DECODABET[source[srcOffset + 2]] & 0xFF) << 6 | DECODABET[source[srcOffset + 3]] & 0xFF;    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)outBuff;    return 3;  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.asin(z));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public SIPMessage parseSIPMessage(byte[] msgBuffer) throws ParseException {  if (msgBuffer == null || msgBuffer.length == 0)   return null;  int i=0;  try {    while (msgBuffer[i] < 0x20)     i++;  } catch (  ArrayIndexOutOfBoundsException e) {    return null;  }  String currentLine=null;  String currentHeader=null;  boolean isFirstLine=true;  SIPMessage message=null;  do {    int lineStart=i;    try {      while (msgBuffer[i] != '\r' && msgBuffer[i] != '\n')       i++;    } catch (    ArrayIndexOutOfBoundsException e) {      break;    }    int lineLength=i - lineStart;    try {      currentLine=new String(msgBuffer,lineStart,lineLength,"UTF-8");    } catch (    UnsupportedEncodingException e) {      throw new ParseException("Bad message encoding!",0);    }    currentLine=trimEndOfLine(currentLine);    if (currentLine.length() == 0) {      if (currentHeader != null && message != null) {        processHeader(currentHeader,message);      }    } else {      if (isFirstLine) {        message=processFirstLine(currentLine);      } else {        char firstChar=currentLine.charAt(0);        if (firstChar == '\t' || firstChar == ' ') {          if (currentHeader == null)           throw new ParseException("Bad header continuation.",0);          currentHeader+=currentLine.substring(1);        } else {          if (currentHeader != null && message != null) {            processHeader(currentHeader,message);          }          currentHeader=currentLine;        }      }    }    if (msgBuffer[i] == '\r' && msgBuffer.length > i + 1 && msgBuffer[i + 1] == '\n')     i++;    i++;    isFirstLine=false;  } while (currentLine.length() > 0);  if (message == null)   throw new ParseException("Bad message",0);  message.setSize(i);  if (readBody && message.getContentLength() != null && message.getContentLength().getContentLength() != 0) {    int bodyLength=msgBuffer.length - i;    byte[] body=new byte[bodyLength];    System.arraycopy(msgBuffer,i,body,0,bodyLength);    message.setMessageContent(body,computeContentLengthFromMessage,message.getContentLength().getContentLength());  }  return message;}  }
class C{  protected int makePressColor(){  int r=(this.backgroundColor >> 16) & 0xFF;  int g=(this.backgroundColor >> 8) & 0xFF;  int b=(this.backgroundColor >> 0) & 0xFF;  return Color.argb(128,r,g,b);}  }
class C{  public CircularCharArrayBuffer(int maxChar){  buffer=new char[maxChar];  if (DEBUG)   Arrays.fill(buffer,' ');}  }
class C{  public static ValueTime convertTime(Time x,Calendar calendar){  if (calendar == null) {    throw DbException.getInvalidValueException("calendar",null);  }  Calendar cal=(Calendar)calendar.clone();  cal.setTimeInMillis(x.getTime());  long nanos=nanosFromCalendar(cal);  return ValueTime.fromNanos(nanos);}  }
class C{  public void go(){  for (  Long d : handlers.getPriorities()) {    ast.traverse(new AnnotationVisitor(d));    handlers.callASTVisitors(ast,d,ast.isCompleteParse());  }}  }
class C{  public static int[] executeBatch(Connection connection,String rawSqlQuery,int parametersPerBatch,List<Object> parameters) throws SQLException {  Preconditions.checkArgument(parameters.size() % parametersPerBatch == 0);  PreparedStatement stmt=null;  try {    stmt=connection.prepareStatement(rawSqlQuery);    int numBatches=parameters.size() / parametersPerBatch;    for (int batch=0; batch < numBatches; batch++) {      for (int param=0; param < parametersPerBatch; param++) {        JdbcUtils.bindParameter(stmt,param + 1,parameters.get(batch * parametersPerBatch + param));      }      stmt.addBatch();    }    return stmt.executeBatch();  }  finally {    JdbcUtils.closeStatement(stmt);  }}  }
class C{  public static boolean isSameDomainName(URL url1,URL url2){  return getDomainName(url1).equalsIgnoreCase(getDomainName(url2));}  }
class C{  public PointerDensityHierarchyRepresentationResult run(Database db,Relation<O> relation){  final DistanceQuery<O> distQ=db.getDistanceQuery(relation,getDistanceFunction());  final KNNQuery<O> knnQ=db.getKNNQuery(distQ,minPts);  final ArrayDBIDs ids=DBIDUtil.ensureArray(relation.getDBIDs());  final WritableDoubleDataStore coredists=computeCoreDists(ids,knnQ,minPts);  WritableDBIDDataStore pi=DataStoreUtil.makeDBIDStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_STATIC);  WritableDoubleDataStore lambda=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_STATIC,Double.POSITIVE_INFINITY);  WritableDoubleDataStore m=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP);  FiniteProgress progress=LOG.isVerbose() ? new FiniteProgress("Running HDBSCAN*-SLINK",ids.size(),LOG) : null;  ModifiableDBIDs processedIDs=DBIDUtil.newArray(ids.size());  for (DBIDIter id=ids.iter(); id.valid(); id.advance()) {    step1(id,pi,lambda);    step2(id,processedIDs,distQ,coredists,m);    step3(id,pi,lambda,processedIDs,m);    step4(id,pi,lambda,processedIDs);    processedIDs.add(id);    LOG.incrementProcessed(progress);  }  LOG.ensureCompleted(progress);  return new PointerDensityHierarchyRepresentationResult(ids,pi,lambda,coredists);}  }
class C{  public Word and(Word w2){  return null;}  }
class C{  private void push(JSONObject jo) throws JSONException {  if (this.top >= maxdepth) {    throw new JSONException("Nesting too deep.");  }  this.stack[this.top]=jo;  this.mode=jo == null ? 'a' : 'k';  this.top+=1;}  }
class C{  public double eval(double params[]){  return (Math.sin(params[0]));}  }
class C{  public void testPassiveJoinLate() throws Throwable {  testServerJoinLate(Member.Type.PASSIVE,CopycatServer.State.PASSIVE);}  }
class C{  public static String replaceOnce(String text,char repl,char with){  return replace(text,repl,with,1);}  }
class C{  public void openReadWrite(ReadStreamOld is,WriteStreamOld os) throws IOException {  getWrappedPath().openReadWrite(is,os);}  }
class C{  public void send(String data) throws IOException {  DatagramPacket dp=new DatagramPacket(data.getBytes(),data.length(),multicastGroup);  datagramSocket.send(dp);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node oldChild;  NodeList elementList;  Node elementNode;  Node removedChild;  doc=(Document)load("staff",true);  oldChild=doc.createElement("oldChild");  elementList=doc.getElementsByTagName("employee");  elementNode=elementList.item(1);{    boolean success=false;    try {      removedChild=elementNode.removeChild(oldChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  public void clickNewGame(View view){  GameActivity.invalidateSavedGame();  startGame();}  }
class C{  public static <T>T withReader(Path self,@ClosureParams(value=SimpleType.class,options="java.io.Reader") Closure<T> closure) throws IOException {  return IOGroovyMethods.withReader(newReader(self),closure);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.369 -0500",hash_original_method="D28ACF4ED7DED6C7ED370F52380381BA",hash_generated_method="21646247B3F1AB7BA202FFA1C126FBBF") public void popContext(){  contexts[contextPos].clear();  contextPos--;  if (contextPos < 0) {    throw new EmptyStackException();  }  currentContext=contexts[contextPos];}  }
class C{  public List<NamedRelatedResourceRep> listByStorageSystem(URI storageSystemId){  StoragePoolList response=client.get(StoragePoolList.class,PathConstants.STORAGE_POOL_BY_STORAGE_SYSTEM_URL,storageSystemId);  return ResourceUtils.defaultList(response.getPools());}  }
class C{  public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY){  mScroller.fling(startX,startY,velocityX,velocityY,minX,maxX,minY,maxY);}  }
class C{  public NotificationChain basicSetLhs(Expression newLhs,NotificationChain msgs){  Expression oldLhs=lhs;  lhs=newLhs;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.BINARY_BITWISE_EXPRESSION__LHS,oldLhs,newLhs);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void lockInCache(CtClass c){  super.cacheCtClass(c.getName(),c,false);}  }
class C{  @Override protected void handleSimpleCollision(final int nx,final int ny){  if (isZoneChangeAllowed()) {    if (getZone().leavesZone(this,nx,ny)) {      handleLeaveZone(nx,ny);      return;    }  }  if (isGhost()) {    this.move(getX(),getY(),nx,ny);  } else   if (Testing.MOVEMENT) {    if (this.has(AUTOWALK)) {      this.remove(AUTOWALK);    }    this.stop();  }}  }
class C{  public static GenericArrayTypeImpl make(Type ct){  return new GenericArrayTypeImpl(ct);}  }
class C{  @Override public boolean pinchOut(String obj,int percent,int steps) throws UiObjectNotFoundException, NotImplementedException {  return pinchOut(getUiObject(obj),percent,steps);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  count.set(0);  last=head=new Node<E>(null);  for (; ; ) {    @SuppressWarnings("unchecked") E item=(E)s.readObject();    if (item == null)     break;    add(item);  }}  }
class C{  @Override public ResponseEntity<Void> deleteConfigurationValue(@PathVariable("keyName") final String keyName){  final TenantConfigurationKey configKey=TenantConfigurationKey.fromKeyName(keyName);  tenantConfigurationManagement.deleteConfiguration(configKey);  LOG.debug("{} config value deleted, return status {}",keyName,HttpStatus.OK);  return new ResponseEntity<>(HttpStatus.NO_CONTENT);}  }
class C{  public void unfollow(int followerId,int followeeId){  if (followerId != followeeId && followMap.get(followerId) != null && followMap.get(followerId).get(followeeId) != null) {    followMap.get(followerId).remove(followeeId);  }}  }
class C{  public Object nextEntity(char ampersand) throws JSONException {  StringBuffer sb=new StringBuffer();  for (; ; ) {    char c=next();    if (Character.isLetterOrDigit(c) || c == '#') {      sb.append(Character.toLowerCase(c));    } else     if (c == ';') {      break;    } else {      throw syntaxError("Missing ';' in XML entity: &" + sb);    }  }  String string=sb.toString();  Object object=entity.get(string);  return object != null ? object : ampersand + string + ";";}  }
class C{  private void attachCoreEvents(){  final VersionControlEventEngine eventEngine=workspace.getClient().getEventEngine();  eventEngine.addNewPendingChangeListener(coreEventListener);  eventEngine.addUndonePendingChangeListener(coreEventListener);  eventEngine.addMergingListener(coreEventListener);  eventEngine.addCheckinListener(coreEventListener);  eventEngine.addOperationStartedListener(coreEventListener);  eventEngine.addOperationCompletedListener(coreEventListener);  eventEngine.addPendingChangesChangedListener(coreEventListener);  eventEngine.addFolderContentChangedListener(coreEventListener);  eventEngine.addGetCompletedListener(coreEventListener);  eventEngine.addLocalWorkspaceScanListener(coreEventListener);}  }
class C{  public void clearPages(ClassLoader cl){synchronized (pageSources) {    Iterator<PageSource> it=this.pageSources.values().iterator();    PageSourceImpl entry;    while (it.hasNext()) {      entry=(PageSourceImpl)it.next();      if (cl != null)       entry.clear(cl); else       entry.clear();    }  }}  }
class C{  public static void intArraySet(int[] a,int i,int v){  try {    a[i]=v;  } catch (  Throwable t) {    a[DefaultGroovyMethodsSupport.normaliseIndex(i,a.length)]=v;  }}  }
class C{  static public String executeFunction(String[] values,Variables variables,String addtlString){  try {    if (values[2].equalsIgnoreCase("userid")) {      return StringFunctions.userIdDate(Integer.valueOf(values[3]),values[4]);    } else     if (values[2].equalsIgnoreCase("randomalphalower")) {      return StringFunctions.randomString(StringFunctions.alphaLower,Integer.valueOf(values[3]));    } else     if (values[2].equalsIgnoreCase("randomalphaupper")) {      return StringFunctions.randomString(StringFunctions.alphaUpper,Integer.valueOf(values[3]));    } else     if (values[2].equalsIgnoreCase("randomalphamixed")) {      return StringFunctions.randomString(StringFunctions.alphaMixed(),Integer.valueOf(values[3]));    } else     if (values[2].equalsIgnoreCase("randomnumeric")) {      return StringFunctions.randomString(StringFunctions.numeric,Integer.valueOf(values[3]));    } else     if (values[2].equalsIgnoreCase("randomspecial")) {      return StringFunctions.randomString(StringFunctions.special,Integer.valueOf(values[3]));    } else     if (values[2].equalsIgnoreCase("randomalphamixednumeric")) {      return StringFunctions.randomString(StringFunctions.alphaMixedNumeric(),Integer.valueOf(values[3]));    } else     if (values[2].equalsIgnoreCase("randomalphamixedspecial")) {      return StringFunctions.randomString(StringFunctions.alphaMixedSpecial(),Integer.valueOf(values[3]));    } else     if (values[2].equalsIgnoreCase("randomalphaMixedNumericSpecial")) {      return StringFunctions.randomString(StringFunctions.alphaMixedNumericSpecial(),Integer.valueOf(values[3]));    } else     if (values[2].equalsIgnoreCase("concat")) {      return StringFunctions.concat(values,variables);    } else     if (values[2].equalsIgnoreCase("useridFromRange")) {      return StringFunctions.userIdFromRange(values,false);    } else     if (values[2].equalsIgnoreCase("useridFromRangeInclude")) {      return StringFunctions.userIdFromRange(values,true);    } else     if (values[2].equalsIgnoreCase("useridFromRangeExclude")) {      return StringFunctions.userIdFromRange(values,false);    } else     if (values[2].equalsIgnoreCase("useridFromRangeWithMod")) {      return StringFunctions.userIdFromRangeWithMod(values,true);    } else     if (values[2].equalsIgnoreCase("useridFromRangeWithModInclude")) {      return StringFunctions.userIdFromRangeWithMod(values,true);    } else     if (values[2].equalsIgnoreCase("useridFromRangeWithModExclude")) {      return StringFunctions.userIdFromRangeWithMod(values,false);    } else     if (values[2].equalsIgnoreCase("substring")) {      if (values.length == 5) {        return StringFunctions.getSubstring(values[3],Integer.valueOf(values[4]),-1);      } else       if (values.length == 6)       try {        return StringFunctions.getSubstring(values[3],Integer.valueOf(values[4]),Integer.valueOf(values[5]));      } catch (      NumberFormatException nfe) {        return StringFunctions.getSubstring(addtlString,values[3],values[4]);      }    }    return "";  } catch (  Exception ex) {    return "";  }}  }
class C{  public OMGraphic edit(EditableOMGraphic eomg,DrawingToolRequestor requestor){  if (setCurrentEditable(eomg)) {    if (DEBUG) {      Debug.output("OMDrawingTool.edit success");    }    this.requestor=requestor;    if (currentEditable != null) {      graphicAttributes.setFrom(currentEditable.getGraphic());      activate();      if (currentEditable != null) {        return currentEditable.getGraphic();      }    }  }  if (DEBUG) {    Debug.output("OMDrawingTool.edit(): can't edit " + eomg.getClass().getName() + ", drawing tool busy with another graphic.");  }  return null;}  }
class C{  public static void sendNotModified(ChannelHandlerContext ctx){  FullHttpResponse response=new DefaultFullHttpResponse(HTTP_1_1,NOT_MODIFIED);  setDateHeader(response);  ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);}  }
class C{  public static Text createText(Composite parent,int style,int hspan,int fill){  Text t=new Text(parent,style);  t.setFont(parent.getFont());  GridData gd=new GridData(fill);  gd.horizontalSpan=hspan;  t.setLayoutData(gd);  return t;}  }
class C{  public void printAvailableChunks(){  int i=0;  for (int z=0; z < 32; z++)   for (int x=0; x < 32; x++, i++) {    int off=offset.getInt(4 * i);    if (off != 0) {      System.out.println("{" + x + ","+ z+ "} -> "+ (off >> 8)+ "/"+ (off & 0xff));    }  }}  }
class C{  private void testPopulation(String pathToOutputFile){  new PopulationReader(ScenarioUtils.createScenario(ConfigUtils.createConfig())).readFile(pathToOutputFile);}  }
class C{  public DoubleMatrix2D sample(int rows,int columns,double value,double nonZeroFraction){  DoubleMatrix2D matrix=make(rows,columns);  sample(matrix,value,nonZeroFraction);  return matrix;}  }
class C{  public void removesScanResult(String uri,String method){  SpiderScanResult toRemove=new SpiderScanResult(uri,method);synchronized (scanResults) {    int index=scanResults.indexOf(toRemove);    if (index >= 0) {      scanResults.remove(index);      fireTableRowsDeleted(index,index);    }  }}  }
class C{  public @Test final void testRemoveGrantsNegative(){  Role role=new Role(TEST_ROLE);  thrown.expect(IllegalArgumentException.class);  role.removeGrants(null);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("MultiTemplateLoader(");  for (int i=0; i < loaders.length; i++) {    if (i != 0) {      sb.append(", ");    }    sb.append("loader").append(i + 1).append(" = ").append(loaders[i]);  }  sb.append(")");  return sb.toString();}  }
class C{  @Override public String resourceText(){  return resourceText;}  }
class C{  public boolean accept(File f){  if (f != null) {    if (f.isDirectory()) {      return true;    }    String extension=getExtension(f);    if ((extension != null) && (filters.get(getExtension(f)) != null)) {      return true;    }  }  return false;}  }
class C{  protected HttpCookie decodeCookie(String cookieString){  byte[] bytes=hexStringToByteArray(cookieString);  ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(bytes);  HttpCookie cookie=null;  try {    ObjectInputStream objectInputStream=new ObjectInputStream(byteArrayInputStream);    cookie=((SerializableHttpCookie)objectInputStream.readObject()).getCookie();  } catch (  IOException e) {    Log.d(LOG_TAG,"IOException in decodeCookie",e);  }catch (  ClassNotFoundException e) {    Log.d(LOG_TAG,"ClassNotFoundException in decodeCookie",e);  }  return cookie;}  }
class C{  @Override public void execute(FunctionContext context){  List<Object> args=(List<Object>)context.getArguments();  String regionName=(String)args.get(0);  try {    Cache cache=CacheFactory.getAnyInstance();    if (cache.getRegion(regionName) == null) {      cache.createRegionFactory(RegionShortcut.PARTITION).create(regionName);    }  } catch (  RegionExistsException re) {    context.getResultSender().lastResult(new ArrayList<Integer>());  }catch (  CacheClosedException e) {    context.getResultSender().lastResult(new ArrayList<Integer>());  }  context.getResultSender().lastResult(new ArrayList<Integer>());}  }
class C{  public static Bitmap extractMiniThumb(Bitmap source,int width,int height){  return BitmapUtils.extractMiniThumb(source,width,height,true);}  }
class C{  protected static int[] computePowers(int base,int numPowers){  int[] powers=new int[numPowers];  powers[0]=1;  for (int i=1; i < numPowers; i++) {    powers[i]+=base * powers[i - 1];  }  return powers;}  }
class C{  public Instrumenter attachInvertedGenerationalDistanceCollector(){  includeInvertedGenerationalDistance=true;  return this;}  }
class C{  public static int[] concatAllInt(int[]... arrays){  int totalLength=0;  final int subArrayCount=arrays.length;  for (int i=0; i < subArrayCount; ++i) {    totalLength+=arrays[i].length;  }  int[] result=Arrays.copyOf(arrays[0],totalLength);  int offset=arrays[0].length;  for (int i=1; i < subArrayCount; ++i) {    System.arraycopy(arrays[i],0,result,offset,arrays[i].length);    offset+=arrays[i].length;  }  return result;}  }
class C{  public double var(){  return sum / (n - 1);}  }
class C{  private static boolean isResolutionLow(){  Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();  return screenSize.width <= 800 || screenSize.height <= 600;}  }
class C{  private Object stringToValue(String value,boolean completeMatch) throws ParseException {  int errorOffset;  if ((errorOffset=getInvalidOffset(value,completeMatch)) == -1) {    if (!getValueContainsLiteralCharacters()) {      value=stripLiteralChars(value);    }    return super.stringToValue(value);  }  throw new ParseException("stringToValue passed invalid value",errorOffset);}  }
class C{  private List<String> flattenCampaigns(){  List<String> ads=new ArrayList<>();  for (  Map.Entry<String,List<String>> entry : campaigns.entrySet()) {    for (    String ad : entry.getValue()) {      ads.add(ad);    }  }  return ads;}  }
class C{  public boolean isRemovingEntities(){  return removingEntities;}  }
class C{  public void opened(int tenant,long time_nanos){  finished(Operation.OPEN,tenant,0,time_nanos);}  }
class C{  private SecurityHeaderType extractSecurityHeader(SOAPMessageContext ctx){  assert ctx != null;  final Node secHeaderNode=extractSecurityNode(ctx);  final SecurityHeaderType header=extractFromSOAPHeader(ctx,WSSE_SECURITY_QNAME,jaxbSecurityHeaderCtx,secHeaderNode,securityHeaderSchema.newValidator());  validateWsseSecurity(secHeaderNode);  return header;}  }
class C{  public static String convert(String prefix){  StringBuilder sb=new StringBuilder();  prefix=prefix.replace('\n',';');  String[] lines=prefix.split("[;]");  for (  String line : lines) {    List<String> tokens=new ArrayList<String>();    char[] c=UnsafeString.getChars(line);    int lastidx=0;    int idx=0;    while (idx < c.length) {      while (c[idx] != '(' && c[idx] != ')' && c[idx] != ',') {        idx++;      }      if (idx != lastidx) {        tokens.add(new String(c,lastidx,idx - lastidx));      }      idx++;      lastidx=idx;    }    Collections.reverse(tokens);    for (    String token : tokens) {      sb.append(token);      sb.append("\n");    }  }  return sb.toString();}  }
class C{  public DefaultMapEntry(final K key,final V value){  super(key,value);}  }
class C{  public CorruptQueueException(String message){  super(message);}  }
class C{  public boolean isHighlightSections(){  return null == highlightSections ? _highlightSections : highlightSections.get();}  }
class C{  public static void join(String base64baggage){  join(DetachedBaggage.decode(base64baggage,StringEncoding.BASE64));}  }
class C{  public static String streamFile(HttpServletResponse response,File file){  if (file == null)   return "No File";  if (!file.exists())   return "File not found: " + file.getAbsolutePath();  MimeType mimeType=MimeType.get(file.getAbsolutePath());  BufferedInputStream bis=null;  BufferedOutputStream bos=null;  FileInputStream in=null;  ServletOutputStream out=null;  try {    int bufferSize=8 * 1024;    int fileLength=(int)file.length();    response.setContentType(mimeType.getMimeType());    response.setBufferSize(bufferSize);    log.fine(file.toString());    long time=System.currentTimeMillis();    in=new FileInputStream(file);    bis=new BufferedInputStream(in);    out=response.getOutputStream();    bos=new BufferedOutputStream(out);    byte[] bytes=new byte[bufferSize];    int c;    while ((c=bis.read(bytes,0,bytes.length)) != -1) {      bos.write(bytes,0,c);    }    out.flush();    time=System.currentTimeMillis() - time;    double speed=(fileLength / 1024) / ((double)time / 1000);    log.info("Length=" + fileLength + " - "+ time+ " ms - "+ speed+ " kB/sec - "+ mimeType);  } catch (  Exception ex) {    log.log(Level.SEVERE,ex.toString());    return "Streaming error - " + ex;  } finally {    try {      if (bis != null)       bis.close();      if (bos != null)       bos.close();      if (out != null)       out.close();      if (in != null)       in.close();    } catch (    IOException e) {      e.printStackTrace();    }  }  return null;}  }
class C{  public boolean isIgnoreSensors(){  return this.ignoreSensors;}  }
class C{  @HLEFunction(nid=0xC11BA8C4,version=150) public int sceKernelNotifyCallback(@CheckArgument("checkCallbackID") int uid,int arg){  SceKernelCallbackInfo callback=getCallbackInfo(uid);  boolean foundCallback=false;  for (int i=0; i < SceKernelThreadInfo.THREAD_CALLBACK_SIZE; i++) {    RegisteredCallbacks registeredCallbacks=getCurrentThread().getRegisteredCallbacks(i);    if (registeredCallbacks.hasCallback(callback)) {      hleKernelNotifyCallback(i,uid,arg);      foundCallback=true;      break;    }  }  if (!foundCallback) {    if (hleKernelRegisterCallback(SceKernelThreadInfo.THREAD_CALLBACK_USER_DEFINED,uid)) {      hleKernelNotifyCallback(SceKernelThreadInfo.THREAD_CALLBACK_USER_DEFINED,uid,arg);    }  }  return 0;}  }
class C{  protected void sampledLastValue(int repeatIteration){  if (value == null) {    value=to;    markDirty();  }}  }
class C{  public RouterItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static void modifyRequestToAcceptGzipResponse(HttpRequest request){  request.addHeader("Accept-Encoding","gzip");}  }
class C{  private boolean shouldAddImports(){  if (isInJavadoc() && !isJavadocProcessingEnabled()) {    return false;  }  return true;}  }
class C{  protected BooleanLiteralImpl(){  super();}  }
class C{  public Object addLineHighlight(int line,Color color) throws BadLocationException {  if (lineHighlightManager == null) {    lineHighlightManager=new LineHighlightManager(this);  }  return lineHighlightManager.addLineHighlight(line,color);}  }
class C{  public JGraphicList(int initialCapacity){  super(initialCapacity);}  }
class C{  public void removeOperation(String name){  if (name == null || name.length() < 1) {    return;  }synchronized (operations) {    List operationsList=new ArrayList(this.operations.length);    for (int i=0; i < this.operations.length; i++) {      if (!name.equals(this.operations[i].getName())) {        operationsList.add(this.operations[i]);      }    }    this.operations=(OperationInfo[])operationsList.toArray(new OperationInfo[operationsList.size()]);    setType(this.type);  }}  }
class C{  public String select(final int index){  checkIsInMulti();  client.select(index);  return client.getStatusCodeReply();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.STRING_EXPR___NAME_1:    setName_1((String)newValue);  return;case UmplePackage.STRING_EXPR___EQUALITY_OP_1:getEqualityOp_1().clear();getEqualityOp_1().addAll((Collection<? extends EqualityOp_>)newValue);return;case UmplePackage.STRING_EXPR___STRING_LIT_1:getStringLit_1().clear();getStringLit_1().addAll((Collection<? extends StringLit_>)newValue);return;case UmplePackage.STRING_EXPR___INDEX_1:setIndex_1((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private long calculateAnimationDuration(float initialVelocity,float displacement){  return MathUtils.clamp(Math.round(Math.abs(2000 * displacement / initialVelocity)),MINIMUM_ANIMATION_DURATION_MS,MAXIMUM_ANIMATION_DURATION_MS);}  }
class C{  private static void transactionMenu(FinanceService service,Scanner sc) throws IOException, ServiceException {  printTransactionMenuHelp();  while (true) {    String requestUrl=baseUrl + PORTFOLIO_FEED_URL_SUFFIX + "/";switch (processTransactionMenuCommand(sc.nextLine().toLowerCase())) {case QUERY_FEED:      System.out.println("Enter portfolio ID");    portfolioIdProperty=sc.nextLine();  System.out.println("Enter ticker (<exchange>:<symbol>)");tickerProperty=sc.nextLine();requestUrl+=portfolioIdProperty + POSITION_FEED_URL_SUFFIX + "/"+ tickerProperty+ TRANSACTION_FEED_URL_SUFFIX;queryTransactionFeed(service,requestUrl);break;case QUERY_ENTRY:System.out.println("Enter portfolio ID");portfolioIdProperty=sc.nextLine();System.out.println("Enter ticker (<exchange>:<ticker>)");tickerProperty=sc.nextLine();System.out.println("Enter transaction ID");transactionIdProperty=sc.nextLine();requestUrl+=portfolioIdProperty + POSITION_FEED_URL_SUFFIX + "/"+ tickerProperty+ TRANSACTION_FEED_URL_SUFFIX+ "/"+ transactionIdProperty;queryTransactionEntry(service,requestUrl);break;case CREATE:System.out.println("Enter portfolio ID");portfolioIdProperty=sc.nextLine();System.out.println("Enter ticker (<exchange>:<ticker>) ");tickerProperty=sc.nextLine();requestUrl+=portfolioIdProperty + POSITION_FEED_URL_SUFFIX + "/"+ tickerProperty+ TRANSACTION_FEED_URL_SUFFIX;System.out.print("Enter transaction type (Buy, Sell, Sell Short, Buy to Cover): ");String type=sc.nextLine();System.out.print("Enter transaction date (yyyy-mm-dd or blank): ");String date=sc.nextLine();System.out.print("Enter number of shares (optional, e.g. 100.0): ");String shares=sc.nextLine();System.out.print("Enter price (optional, e.g. 141.14): ");String price=sc.nextLine();System.out.print("Enter commission (optional, e.g. 20.0): ");String commission=sc.nextLine();System.out.print("Enter currency (optional, e.g. USD, EUR, JPY): ");String currency=sc.nextLine();System.out.print("Enter any notes: ");String notes=sc.nextLine();TransactionEntry entry=FinanceUtilities.makeTransactionEntry(type,date,shares,price,commission,currency,notes);insertTransactionEntry(service,requestUrl,entry);break;case UPDATE:System.out.println("Enter portfolio ID");portfolioIdProperty=sc.nextLine();System.out.println("Enter ticker (<exchange>:<ticker>) ");tickerProperty=sc.nextLine();System.out.println("Enter transaction ID");transactionIdProperty=sc.nextLine();requestUrl+=portfolioIdProperty + POSITION_FEED_URL_SUFFIX + "/"+ tickerProperty+ TRANSACTION_FEED_URL_SUFFIX+ "/"+ transactionIdProperty;System.out.print("Enter transaction type (Buy, Sell, Sell Short, Buy to Cover): ");type=sc.nextLine();System.out.print("Enter transaction date (yyyy-mm-dd or blank): ");date=sc.nextLine();System.out.print("Enter number of shares (optional, e.g. 100.0): ");shares=sc.nextLine();System.out.print("Enter price (optional, e.g. 141.14): ");price=sc.nextLine();System.out.print("Enter commission (optional, e.g. 20.0): ");commission=sc.nextLine();System.out.print("Enter currency (optional, e.g. USD, EUR, JPY): ");currency=sc.nextLine();System.out.print("Enter any notes: ");notes=sc.nextLine();entry=FinanceUtilities.makeTransactionEntry(type,date,shares,price,commission,currency,notes);updateTransactionEntry(service,requestUrl,entry);break;case DELETE:System.out.println("Enter portfolio ID");portfolioIdProperty=sc.nextLine();System.out.println("Enter ticker (<exchange>:<ticker>)");tickerProperty=sc.nextLine();System.out.println("Enter transaction ID");transactionIdProperty=sc.nextLine();requestUrl+=portfolioIdProperty + POSITION_FEED_URL_SUFFIX + "/"+ tickerProperty+ TRANSACTION_FEED_URL_SUFFIX+ "/"+ transactionIdProperty;deleteTransactionEntry(service,requestUrl);break;case BACK:return;case QUIT:System.exit(0);case HELP:printTransactionMenuHelp();break;default :printTransactionMenuHelp();}}}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  void handshake(Socket s,long timeout) throws IOException {  s.setSoTimeout((int)timeout);  byte[] hello="JDWP-Handshake".getBytes("UTF-8");  s.getOutputStream().write(hello);  byte[] b=new byte[hello.length];  int received=0;  while (received < hello.length) {    int n;    try {      n=s.getInputStream().read(b,received,hello.length - received);    } catch (    SocketTimeoutException x) {      throw new IOException("handshake timeout");    }    if (n < 0) {      s.close();      throw new IOException("handshake failed - connection prematurally closed");    }    received+=n;  }  for (int i=0; i < hello.length; i++) {    if (b[i] != hello[i]) {      throw new IOException("handshake failed - unrecognized message from target VM");    }  }  s.setSoTimeout(0);}  }
class C{  @Override public boolean supportsDataDefinitionAndDataManipulationTransactions(){  debugCodeCall("supportsDataDefinitionAndDataManipulationTransactions");  return false;}  }
class C{  public boolean isPrivateDnsRouteSet(){  return mPrivateDnsRouteSet.get();}  }
class C{  public XlsxResultSet(Operator callingOperator,ExcelResultSetConfiguration configuration,int sheetIndex,XlsxReadMode readMode) throws UserError {  this(callingOperator,configuration,sheetIndex,readMode,null);}  }
class C{  @Override public boolean conditionOk(Example example){  return true;}  }
class C{  private void animateProperty(int constantName,float toValue){  float fromValue=getValue(constantName);  float deltaValue=toValue - fromValue;  animatePropertyBy(constantName,fromValue,deltaValue);}  }
class C{  public boolean load(Element sharedMemories,Element perNodeMemories){  InstanceManager.memoryManagerInstance();  loadMemories(sharedMemories);  return true;}  }
class C{  @Override public boolean isRunning(){  return !paused;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void repaintImmediate(){  Graphics g=this.getGraphics();  if (g != null && m_offscreen != null) {    paintBufferToScreen(g);  }}  }
class C{  private VariableReference createPrimitive(TestCase test,GenericClass clazz,int position,int recursionDepth) throws ConstructionFailedException {  if (clazz.isClass()) {    if (clazz.hasWildcardOrTypeVariables()) {      logger.debug("Getting generic instantiation of class");      clazz=clazz.getGenericInstantiation();      logger.debug("Chosen: " + clazz);    }    Type parameterType=clazz.getParameterTypes().get(0);    if (GenericTypeReflector.erase(parameterType).equals(Class.class)) {      throw new ConstructionFailedException("Cannot instantiate a class with a class");    }  }  Statement st=PrimitiveStatement.getRandomStatement(test,clazz,position);  VariableReference ret=test.addStatement(st,position);  ret.setDistance(recursionDepth);  return ret;}  }
class C{  public SourceCallChainInfo(SootMethod m,Stmt s,String type){  this.type=type;  this.link="as_call";  this.method=m;  this.stmt=s;  calls=1;  if (type.equals("syscall"))   syscalls=1;}  }
class C{  private boolean isInputValid(){  this.setMessage(dialogMessage,IMessageProvider.INFORMATION);  if (ObjectUtils.equals(oldName,nameBox.getText().trim()) && ObjectUtils.equals(oldDescription,descriptionBox.getText().trim())) {    this.setMessage("Fields have not been modified!",IMessageProvider.ERROR);    return false;  }  if (nameBox.getText().isEmpty()) {    this.setMessage("No value for the name entered",IMessageProvider.ERROR);    return false;  }  if (null != existingNames) {    for (    String existingName : existingNames) {      if (ObjectUtils.equals(existingName,oldName)) {        continue;      }      if (ObjectUtils.equals(existingName,nameBox.getText().trim())) {        this.setMessage("This name already exists!",IMessageProvider.ERROR);        return false;      }    }  }  return true;}  }
class C{  public void groupKeyAndDescendantsIterator(Session session,MemoryStoreData storeData){  assert storeData.storageDescription.getObject() instanceof Group : storeData.storageDescription;  MemoryTransaction txn=getTransaction(session);  packKey(storeData);  byte[] begin=storeData.rawKey;  byte[] end=join(storeData.rawKey,BYTES_FF);  storeData.iterator=txn.getRange(begin,end);}  }
class C{  @Override public Long put(Long key,Long value){  return wrapValue(_map.put(unwrapKey(key),unwrapValue(value)));}  }
class C{  private void updateHSDInfoInExportMask(ExportMask exportMask,Set<URI> hostInitiators,Set<HostStorageDomain> matchedHSDs,StorageSystem storage,Map<String,Set<URI>> matchingMasks){  StringBuilder builder=new StringBuilder();  if (null != matchedHSDs && !matchedHSDs.isEmpty()) {    StringSetMap deviceDataMapEntries=new StringSetMap();    for (    HostStorageDomain matchedHSD : matchedHSDs) {      List<String> initiatorsExistsOnHSD=getInitiatorsExistsOnHSD(matchedHSD.getWwnList(),matchedHSD.getIscsiList());      Map<String,Integer> volumesExistsOnHSD=getExportedVolumes(matchedHSD.getPathList(),storage);      log.info("Current list of Volumes exists on this HSD: {}",volumesExistsOnHSD);      builder.append(String.format("XM:%s I:{%s} V:{%s}%n",matchedHSD.getObjectID(),Joiner.on(',').join(initiatorsExistsOnHSD),Joiner.on(',').join(volumesExistsOnHSD.keySet())));      updateDeviceDataMapInExportMask(exportMask,matchedHSD,storage,deviceDataMapEntries);      List<String> storagePorts=Arrays.asList(matchedHSD.getPortID());      List<String> storagePortURIs=getStoragePortURIs(storagePorts,storage);      if (null != exportMask.getStoragePorts() && !exportMask.getStoragePorts().isEmpty()) {        exportMask.getStoragePorts().addAll(storagePortURIs);      } else {        exportMask.setStoragePorts(storagePortURIs);      }      String maskName=(null == matchedHSD.getName()) ? matchedHSD.getNickname() : matchedHSD.getName();      exportMask.setMaskName(maskName);      exportMask.addToExistingVolumesIfAbsent(volumesExistsOnHSD);      exportMask.addToExistingInitiatorsIfAbsent(initiatorsExistsOnHSD);      builder.append(String.format("XM is matching. " + "EI: { %s }, EV: { %s }\n",Joiner.on(',').join(exportMask.getExistingInitiators()),Joiner.on(',').join(exportMask.getExistingVolumes().keySet())));    }    if (null == exportMask.getDeviceDataMap() || exportMask.getDeviceDataMap().isEmpty()) {      exportMask.addDeviceDataMap(deviceDataMapEntries);    } else {      exportMask.replaceDeviceDataMapEntries(deviceDataMapEntries);    }  }  log.info(builder.toString());}  }
class C{  @SuppressWarnings({"deprecation","fallthrough"}) @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="SF_SWITCH_FALLTHROUGH") private void takeActionIfNeeded(){  if (log.isTraceEnabled()) {    log.trace("takeActionIfNeeded starts for " + getSystemName());  }  int actionCount=0;  int actionNeeded=0;  int act=0;  int state=0;  ArrayList<String> errorList=new ArrayList<String>();  int currentState=_currentState;  for (int i=0; i < _actionList.size(); i++) {    ConditionalAction action=_actionList.get(i);    int neededAction=actionNeeded;    int option=action.getOption();    if (log.isTraceEnabled()) {      log.trace(" takeActionIfNeeded considers action " + i + " with currentState: "+ currentState+ " and option: "+ option);    }    if (((currentState == TRUE) && (option == ACTION_OPTION_ON_CHANGE_TO_TRUE)) || ((currentState == FALSE) && (option == ACTION_OPTION_ON_CHANGE_TO_FALSE)) || (option == ACTION_OPTION_ON_CHANGE)) {      actionNeeded++;      SignalHead h=null;      SignalMast f=null;      Logix x=null;      Light lgt=null;      Warrant w=null;      NamedBean nb=null;      if (action.getNamedBean() != null) {        nb=(NamedBean)action.getNamedBean().getBean();      }      int value=0;      Timer timer=null;      int type=action.getType();      String devName=getDeviceName(action);      if (devName == null) {        errorList.add("invalid memory name in action - " + action);        continue;      }      if (log.isDebugEnabled()) {        log.debug("getDeviceName()=" + action.getDeviceName() + " devName= "+ devName);      }switch (type) {case Conditional.ACTION_NONE:        break;case Conditional.ACTION_SET_TURNOUT:      Turnout t=(Turnout)nb;    if (t == null) {      errorList.add("invalid turnout name in action - " + action.getDeviceName());    } else {      act=action.getActionData();      if (act == Route.TOGGLE) {        state=t.getKnownState();        if (state == Turnout.CLOSED) {          act=Turnout.THROWN;        } else {          act=Turnout.CLOSED;        }      }      t.setCommandedState(act);      actionCount++;    }  break;case Conditional.ACTION_RESET_DELAYED_TURNOUT:action.stopTimer();case Conditional.ACTION_DELAYED_TURNOUT:if (!action.isTimerActive()) {timer=action.getTimer();if (timer == null) {  action.setListener(new TimeTurnout(i));  timer=new Timer(2000,action.getListener());  timer.setRepeats(true);}value=getMillisecondValue(action);if (value < 0) {  break;}timer.setInitialDelay(value);action.setTimer(timer);action.startTimer();actionCount++;} else {log.warn("timer already active on request to start delayed turnout action - " + devName);}break;case Conditional.ACTION_CANCEL_TURNOUT_TIMERS:ConditionalManager cmg=jmri.InstanceManager.getDefault(jmri.ConditionalManager.class);java.util.Iterator<String> iter=cmg.getSystemNameList().iterator();while (iter.hasNext()) {String sname=iter.next();if (sname == null) {errorList.add("Conditional system name null during cancel turnout timers for " + action.getDeviceName());}Conditional c=cmg.getBySystemName(sname);if (c == null) {errorList.add("Conditional null during cancel turnout timers for " + action.getDeviceName());} else {c.cancelTurnoutTimer(devName);actionCount++;}}break;case Conditional.ACTION_LOCK_TURNOUT:Turnout tl=(Turnout)nb;if (tl == null) {errorList.add("invalid turnout name in action - " + action.getDeviceName());} else {act=action.getActionData();if (act == Route.TOGGLE) {if (tl.getLocked(Turnout.CABLOCKOUT)) {act=Turnout.UNLOCKED;} else {act=Turnout.LOCKED;}}if (act == Turnout.LOCKED) {tl.setLocked(Turnout.CABLOCKOUT + Turnout.PUSHBUTTONLOCKOUT,true);} else if (act == Turnout.UNLOCKED) {tl.setLocked(Turnout.CABLOCKOUT + Turnout.PUSHBUTTONLOCKOUT,false);}actionCount++;}break;case Conditional.ACTION_SET_SIGNAL_APPEARANCE:h=(SignalHead)nb;if (h == null) {errorList.add("invalid Signal Head name in action - " + action.getDeviceName());} else {h.setAppearance(action.getActionData());actionCount++;}break;case Conditional.ACTION_SET_SIGNAL_HELD:h=(SignalHead)nb;if (h == null) {errorList.add("invalid Signal Head name in action - " + action.getDeviceName());} else {h.setHeld(true);actionCount++;}break;case Conditional.ACTION_CLEAR_SIGNAL_HELD:h=(SignalHead)nb;if (h == null) {errorList.add("invalid Signal Head name in action - " + action.getDeviceName());} else {h.setHeld(false);actionCount++;}break;case Conditional.ACTION_SET_SIGNAL_DARK:h=(SignalHead)nb;if (h == null) {errorList.add("invalid Signal Head name in action - " + action.getDeviceName());} else {h.setLit(false);actionCount++;}break;case Conditional.ACTION_SET_SIGNAL_LIT:h=(SignalHead)nb;if (h == null) {errorList.add("invalid Signal Head name in action - " + action.getDeviceName());} else {h.setLit(true);actionCount++;}break;case Conditional.ACTION_TRIGGER_ROUTE:Route r=(Route)nb;if (r == null) {errorList.add("invalid Route name in action - " + action.getDeviceName());} else {r.setRoute();actionCount++;}break;case Conditional.ACTION_SET_SENSOR:Sensor sn=(Sensor)nb;if (sn == null) {errorList.add("invalid Sensor name in action - " + action.getDeviceName());} else {act=action.getActionData();if (act == Route.TOGGLE) {state=sn.getState();if (state == Sensor.ACTIVE) {act=Sensor.INACTIVE;} else {act=Sensor.ACTIVE;}}try {sn.setKnownState(act);actionCount++;} catch (JmriException e) {log.warn("Exception setting Sensor " + devName + " in action");}}break;case Conditional.ACTION_RESET_DELAYED_SENSOR:action.stopTimer();case Conditional.ACTION_DELAYED_SENSOR:if (!action.isTimerActive()) {timer=action.getTimer();if (timer == null) {action.setListener(new TimeSensor(i));timer=new Timer(2000,action.getListener());timer.setRepeats(true);}value=getMillisecondValue(action);if (value < 0) {break;}timer.setInitialDelay(value);action.setTimer(timer);action.startTimer();actionCount++;} else {log.warn("timer already active on request to start delayed sensor action - " + devName);}break;case Conditional.ACTION_CANCEL_SENSOR_TIMERS:ConditionalManager cm=jmri.InstanceManager.getDefault(jmri.ConditionalManager.class);java.util.Iterator<String> itr=cm.getSystemNameList().iterator();while (itr.hasNext()) {String sname=itr.next();if (sname == null) {errorList.add("Conditional system name null during cancel sensor timers for " + action.getDeviceName());}Conditional c=cm.getBySystemName(sname);if (c == null) {errorList.add("Conditional null during cancel sensor timers for " + action.getDeviceName());} else {c.cancelSensorTimer(devName);actionCount++;}}break;case Conditional.ACTION_SET_LIGHT:lgt=(Light)nb;if (lgt == null) {errorList.add("invalid light name in action - " + action.getDeviceName());} else {act=action.getActionData();if (act == Route.TOGGLE) {state=lgt.getState();if (state == Light.ON) {act=Light.OFF;} else {act=Light.ON;}}lgt.setState(act);actionCount++;}break;case Conditional.ACTION_SET_LIGHT_INTENSITY:lgt=(Light)nb;if (lgt == null) {errorList.add("invalid light name in action - " + action.getDeviceName());} else {try {value=getIntegerValue(action);if (value < 0) {break;}lgt.setTargetIntensity((value) / 100.0);actionCount++;} catch (IllegalArgumentException e) {errorList.add("Exception in set light intensity action - " + action.getDeviceName());}}break;case Conditional.ACTION_SET_LIGHT_TRANSITION_TIME:lgt=(Light)nb;if (lgt == null) {errorList.add("invalid light name in action - " + action.getDeviceName());} else {try {value=getIntegerValue(action);if (value < 0) {break;}lgt.setTransitionTime(value);actionCount++;} catch (IllegalArgumentException e) {errorList.add("Exception in set light transition time action - " + action.getDeviceName());}}break;case Conditional.ACTION_SET_MEMORY:Memory m=(Memory)nb;if (m == null) {errorList.add("invalid memory name in action - " + action.getDeviceName());} else {m.setValue(action.getActionString());actionCount++;}break;case Conditional.ACTION_COPY_MEMORY:Memory mFrom=(Memory)nb;if (mFrom == null) {errorList.add("invalid memory name in action - " + action.getDeviceName());} else {Memory mTo=getMemory(action.getActionString());if (mTo == null) {errorList.add("invalid memory name in action - " + action.getActionString());} else {mTo.setValue(mFrom.getValue());actionCount++;}}break;case Conditional.ACTION_ENABLE_LOGIX:x=InstanceManager.getDefault(jmri.LogixManager.class).getLogix(devName);if (x == null) {errorList.add("invalid logix name in action - " + action.getDeviceName());} else {x.setEnabled(true);actionCount++;}break;case Conditional.ACTION_DISABLE_LOGIX:x=InstanceManager.getDefault(jmri.LogixManager.class).getLogix(devName);if (x == null) {errorList.add("invalid logix name in action - " + action.getDeviceName());} else {x.setEnabled(false);actionCount++;}break;case Conditional.ACTION_PLAY_SOUND:String path=getActionString(action);if (!path.equals("")) {Sound sound=action.getSound();if (sound == null) {try {sound=new Sound(path);} catch (NullPointerException ex) {errorList.add("invalid path to sound: " + path);}}if (sound != null) {sound.play();}actionCount++;}break;case Conditional.ACTION_RUN_SCRIPT:if (!(getActionString(action).equals(""))) {JmriScriptEngineManager.getDefault().runScript(new File(jmri.util.FileUtil.getExternalFilename(getActionString(action))));actionCount++;}break;case Conditional.ACTION_SET_FAST_CLOCK_TIME:Date date=InstanceManager.getDefault(jmri.Timebase.class).getTime();date.setHours(action.getActionData() / 60);date.setMinutes(action.getActionData() - ((action.getActionData() / 60) * 60));date.setSeconds(0);InstanceManager.getDefault(jmri.Timebase.class).userSetTime(date);actionCount++;break;case Conditional.ACTION_START_FAST_CLOCK:InstanceManager.getDefault(jmri.Timebase.class).setRun(true);actionCount++;break;case Conditional.ACTION_STOP_FAST_CLOCK:InstanceManager.getDefault(jmri.Timebase.class).setRun(false);actionCount++;break;case Conditional.ACTION_CONTROL_AUDIO:Audio audio=InstanceManager.getDefault(jmri.AudioManager.class).getAudio(devName);if (audio.getSubType() == Audio.SOURCE) {AudioSource audioSource=(AudioSource)audio;switch (action.getActionData()) {case Audio.CMD_PLAY:audioSource.play();break;case Audio.CMD_STOP:audioSource.stop();break;case Audio.CMD_PLAY_TOGGLE:audioSource.togglePlay();break;case Audio.CMD_PAUSE:audioSource.pause();break;case Audio.CMD_RESUME:audioSource.resume();break;case Audio.CMD_PAUSE_TOGGLE:audioSource.togglePause();break;case Audio.CMD_REWIND:audioSource.rewind();break;case Audio.CMD_FADE_IN:audioSource.fadeIn();break;case Audio.CMD_FADE_OUT:audioSource.fadeOut();break;case Audio.CMD_RESET_POSITION:audioSource.resetCurrentPosition();break;default :break;}} else if (audio.getSubType() == Audio.LISTENER) {AudioListener audioListener=(AudioListener)audio;switch (action.getActionData()) {case Audio.CMD_RESET_POSITION:audioListener.resetCurrentPosition();break;default :break;}}break;case Conditional.ACTION_JYTHON_COMMAND:if (!(getActionString(action).isEmpty())) {ScriptOutput.writeScript(getActionString(action));try {JmriScriptEngineManager.getDefault().eval(getActionString(action),JmriScriptEngineManager.getDefault().getEngine(JmriScriptEngineManager.PYTHON));} catch (ScriptException ex) {log.error("Error executing script:",ex);}actionCount++;}break;case Conditional.ACTION_ALLOCATE_WARRANT_ROUTE:w=(Warrant)nb;if (w == null) {errorList.add("invalid Warrant name in action - " + action.getDeviceName());} else {String msg=w.allocateRoute(null);if (msg != null) {log.info("Warrant " + action.getDeviceName() + " - "+ msg);}actionCount++;}break;case Conditional.ACTION_DEALLOCATE_WARRANT_ROUTE:w=(Warrant)nb;if (w == null) {errorList.add("invalid Warrant name in action - " + action.getDeviceName());} else {w.deAllocate();actionCount++;}break;case Conditional.ACTION_SET_ROUTE_TURNOUTS:w=(Warrant)nb;if (w == null) {errorList.add("invalid Warrant name in action - " + action.getDeviceName());} else {String msg=w.setRoute(0,null);if (msg != null) {log.info("Warrant " + action.getDeviceName() + " unable to Set Route - "+ msg);}actionCount++;}break;case Conditional.ACTION_THROTTLE_FACTOR:log.info("Set warrant Throttle Factor deprecated - Use Warrrant Preferences");break;case Conditional.ACTION_SET_TRAIN_ID:w=(Warrant)nb;if (w == null) {errorList.add("invalid Warrant name in action - " + action.getDeviceName());} else {if (!w.setTrainId(getActionString(action))) {String s="Unable to find train Id " + getActionString(action) + " in Roster  - "+ action.getDeviceName();log.info(s);errorList.add(s);}actionCount++;}break;case Conditional.ACTION_SET_TRAIN_NAME:w=(Warrant)nb;if (w == null) {errorList.add("invalid Warrant name in action - " + action.getDeviceName());} else {w.setTrainName(getActionString(action));actionCount++;}break;case Conditional.ACTION_AUTO_RUN_WARRANT:w=(Warrant)nb;if (w == null) {errorList.add("invalid Warrant name in action - " + action.getDeviceName());} else {jmri.jmrit.logix.WarrantTableFrame frame=jmri.jmrit.logix.WarrantTableFrame.getInstance();String err=frame.runTrain(w);if (err != null) {w.stopWarrant(true);}if (err != null) {errorList.add("runAutoTrain error - " + err);w.stopWarrant(true);}actionCount++;}break;case Conditional.ACTION_MANUAL_RUN_WARRANT:w=(Warrant)nb;if (w == null) {errorList.add("invalid Warrant name in action - " + action.getDeviceName());} else {String err=w.setRoute(0,null);if (err == null) {err=w.setRunMode(Warrant.MODE_MANUAL,null,null,null,false);}if (err != null) {errorList.add("runManualTrain error - " + err);}actionCount++;}break;case Conditional.ACTION_CONTROL_TRAIN:w=(Warrant)nb;if (w == null) {errorList.add("invalid Warrant name in action - " + action.getDeviceName());} else {if (!w.controlRunTrain(action.getActionData())) {log.info("Train " + w.getTrainId() + " not running  - "+ devName);}actionCount++;}break;case Conditional.ACTION_SET_SIGNALMAST_ASPECT:f=(SignalMast)nb;if (f == null) {errorList.add("invalid Signal Mast name in action - " + action.getDeviceName());} else {f.setAspect(getActionString(action));actionCount++;}break;case Conditional.ACTION_SET_SIGNALMAST_HELD:f=(SignalMast)nb;if (f == null) {errorList.add("invalid Signal Mast name in action - " + action.getDeviceName());} else {f.setHeld(true);actionCount++;}break;case Conditional.ACTION_CLEAR_SIGNALMAST_HELD:f=(SignalMast)nb;if (f == null) {errorList.add("invalid Signal Mast name in action - " + action.getDeviceName());} else {f.setHeld(false);actionCount++;}break;case Conditional.ACTION_SET_SIGNALMAST_DARK:f=(SignalMast)nb;if (f == null) {errorList.add("invalid Signal Head name in action - " + action.getDeviceName());} else {f.setLit(false);actionCount++;}break;case Conditional.ACTION_SET_SIGNALMAST_LIT:f=(SignalMast)nb;if (f == null) {errorList.add("invalid Signal Head name in action - " + action.getDeviceName());} else {f.setLit(true);actionCount++;}break;case Conditional.ACTION_SET_BLOCK_VALUE:OBlock b=(OBlock)nb;if (b == null) {errorList.add("invalid Block name in action - " + action.getDeviceName());} else {b.setValue(getActionString(action));actionCount++;}break;case Conditional.ACTION_SET_BLOCK_ERROR:b=(OBlock)nb;if (b == null) {errorList.add("invalid Block name in action - " + action.getDeviceName());} else {b.setError(true);actionCount++;}break;case Conditional.ACTION_CLEAR_BLOCK_ERROR:b=(OBlock)nb;if (b == null) {errorList.add("invalid Block name in action - " + action.getDeviceName());} else {b.setError(false);}break;case ACTION_DEALLOCATE_BLOCK:b=(OBlock)nb;if (b == null) {errorList.add("invalid Block name in action - " + action.getDeviceName());} else {b.deAllocate(null);actionCount++;}break;case ACTION_SET_BLOCK_OUT_OF_SERVICE:b=(OBlock)nb;if (b == null) {errorList.add("invalid Block name in action - " + action.getDeviceName());} else {b.setOutOfService(true);actionCount++;}break;case ACTION_SET_BLOCK_IN_SERVICE:b=(OBlock)nb;if (b == null) {errorList.add("invalid Block name in action - " + action.getDeviceName());} else {b.setOutOfService(false);actionCount++;}break;default :log.warn("takeActionIfNeeded drops through switch statement for action " + i + " of "+ getSystemName());break;}}if (PARKS_DEBUG) {System.out.println("Global state= " + _currentState + " Local state= "+ currentState+ " - Action "+ (actionNeeded > neededAction ? "WAS" : "NOT")+ " taken for action = "+ action.getTypeString()+ " "+ action.getActionString()+ " for device "+ action.getDeviceName());}}if (errorList.size() > 0) {for (int i=0; i < errorList.size(); i++) {log.error(getDisplayName() + " - " + errorList.get(i));}if (!GraphicsEnvironment.isHeadless()) {java.awt.Toolkit.getDefaultToolkit().beep();if (!_skipErrorDialog) {new ErrorDialog(errorList,this);}}}if (log.isDebugEnabled()) {log.debug("Conditional \"" + getUserName() + "\" ("+ getSystemName()+ " has "+ _actionList.size()+ " actions and has executed "+ actionCount+ " actions of "+ actionNeeded+ " actions needed on state change to "+ currentState);}if (PARKS_DEBUG) {System.out.println("Conditional \"" + getUserName() + "\" ("+ getSystemName()+ " has "+ _actionList.size()+ " actions and has executed "+ actionCount+ " actions of "+ actionNeeded+ " actions needed on state change to "+ currentState);}}  }
class C{  protected double categoryUtilityChild(CNode child) throws Exception {  double sum=0;  for (int i=0; i < m_numAttributes; i++) {    if (m_clusterInstances.attribute(i).isNominal()) {      for (int j=0; j < m_clusterInstances.attribute(i).numValues(); j++) {        double x=child.getProbability(i,j);        double y=getProbability(i,j);        sum+=(x * x) - (y * y);      }    } else {      sum+=((m_normal / child.getStandardDev(i)) - (m_normal / getStandardDev(i)));    }  }  return (child.m_totalInstances / m_totalInstances) * sum;}  }
class C{  public void add(DashboardPanel dashboardPanel){  dashboardPanels.add(dashboardPanel);}  }
class C{  private MessageContext createMessageContext(AxisEngine engine,HttpServletRequest req,HttpServletResponse res,Component component){  MessageContext msgContext=new MessageContext(engine);  String requestPath=getRequestPath(req);  if (isDebug) {    log.debug("MessageContext:" + msgContext);    log.debug("HEADER_CONTENT_TYPE:" + req.getHeader(HTTPConstants.HEADER_CONTENT_TYPE));    log.debug("HEADER_CONTENT_LOCATION:" + req.getHeader(HTTPConstants.HEADER_CONTENT_LOCATION));    log.debug("Constants.MC_HOME_DIR:" + String.valueOf(homeDir));    log.debug("Constants.MC_RELATIVE_PATH:" + requestPath);    log.debug("HTTPConstants.MC_HTTP_SERVLETLOCATION:" + String.valueOf(webInfPath));    log.debug("HTTPConstants.MC_HTTP_SERVLETPATHINFO:" + req.getPathInfo());    log.debug("HTTPConstants.HEADER_AUTHORIZATION:" + req.getHeader(HTTPConstants.HEADER_AUTHORIZATION));    log.debug("Constants.MC_REMOTE_ADDR:" + req.getRemoteAddr());    log.debug("configPath:" + String.valueOf(webInfPath));  }  msgContext.setTransportName("http");  msgContext.setProperty(Constants.MC_HOME_DIR,homeDir);  msgContext.setProperty(Constants.MC_RELATIVE_PATH,requestPath);  msgContext.setProperty(HTTPConstants.MC_HTTP_SERVLET,this);  msgContext.setProperty(HTTPConstants.MC_HTTP_SERVLETREQUEST,req);  msgContext.setProperty(HTTPConstants.MC_HTTP_SERVLETRESPONSE,res);  msgContext.setProperty(HTTPConstants.MC_HTTP_SERVLETLOCATION,webInfPath);  msgContext.setProperty(HTTPConstants.MC_HTTP_SERVLETPATHINFO,req.getPathInfo());  msgContext.setProperty(HTTPConstants.HEADER_AUTHORIZATION,req.getHeader(HTTPConstants.HEADER_AUTHORIZATION));  msgContext.setProperty(lucee.runtime.net.rpc.server.Constants.COMPONENT,component);  msgContext.setProperty(Constants.MC_REMOTE_ADDR,req.getRemoteAddr());  ServletEndpointContextImpl sec=new ServletEndpointContextImpl();  msgContext.setProperty(Constants.MC_SERVLET_ENDPOINT_CONTEXT,sec);  String realpath=context.getRealPath(requestPath);  if (realpath != null) {    msgContext.setProperty(Constants.MC_REALPATH,realpath);  }  msgContext.setProperty(Constants.MC_CONFIGPATH,webInfPath);  return msgContext;}  }
class C{  private <T>void construct(T implementation,Class<T> mbeanInterface,boolean nullImplementationAllowed,boolean isMXBean) throws NotCompliantMBeanException {  if (implementation == null) {    if (nullImplementationAllowed)     implementation=Util.<T>cast(this); else     throw new IllegalArgumentException("implementation is null");  }  if (isMXBean) {    if (mbeanInterface == null) {      mbeanInterface=Util.cast(Introspector.getMXBeanInterface(implementation.getClass()));    }    this.mbean=new MXBeanSupport(implementation,mbeanInterface);  } else {    if (mbeanInterface == null) {      mbeanInterface=Util.cast(Introspector.getStandardMBeanInterface(implementation.getClass()));    }    this.mbean=new StandardMBeanSupport(implementation,mbeanInterface);  }}  }
class C{  private boolean isValidParentId(int parentId,String entidad) throws Exception {  String tblName, qual=null;  boolean valid=false;  int count=0;  DirsTable table=new DirsTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    tblName=table.getDirTableName();    qual=table.getLoadDirQual(parentId);    if (parentId == 0)     valid=true; else {      count=DbSelectFns.selectCount(dbConn,tblName,qual);      if (count > 0)       valid=true;    }  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return valid;}  }
class C{  public LineIterator(final FastBufferedReader fastBufferedReader,final ProgressLogger pl){  this.fastBufferedReader=fastBufferedReader;  this.pl=pl;}  }
class C{  public void renderParticleFullTexture(VertexBuffer worldRendererIn,Entity entityIn,float partialTicks,float rotationX,float rotationZ,float rotationYZ,float rotationXY,float rotationXZ){  float minU=0.0F;  float maxU=1.0F;  float minV=0.0F;  float maxV=1.0F;  float scale=0.1F * this.particleScale;  float interpX=(float)(this.prevPosX + (this.posX - this.prevPosX) * (double)partialTicks - interpPosX);  float interpY=(float)(this.prevPosY + (this.posY - this.prevPosY) * (double)partialTicks - interpPosY);  float interpZ=(float)(this.prevPosZ + (this.posZ - this.prevPosZ) * (double)partialTicks - interpPosZ);  int brightness=this.getBrightnessForRender(partialTicks);  int lightmapX=brightness >> 16 & 65535;  int lightmapY=brightness & 65535;  Vec3d[] scaledRotations=new Vec3d[]{new Vec3d((double)(-rotationX * scale - rotationXY * scale),(double)(-rotationZ * scale),(double)(-rotationYZ * scale - rotationXZ * scale)),new Vec3d((double)(-rotationX * scale + rotationXY * scale),(double)(rotationZ * scale),(double)(-rotationYZ * scale + rotationXZ * scale)),new Vec3d((double)(rotationX * scale + rotationXY * scale),(double)(rotationZ * scale),(double)(rotationYZ * scale + rotationXZ * scale)),new Vec3d((double)(rotationX * scale - rotationXY * scale),(double)(-rotationZ * scale),(double)(rotationYZ * scale - rotationXZ * scale))};  if (this.field_190014_F != 0.0F) {    float interpRoll=this.field_190014_F + (this.field_190014_F - this.field_190015_G) * partialTicks;    float f9=MathHelper.cos(interpRoll * 0.5F);    float f10=MathHelper.sin(interpRoll * 0.5F) * (float)field_190016_K.xCoord;    float f11=MathHelper.sin(interpRoll * 0.5F) * (float)field_190016_K.yCoord;    float f12=MathHelper.sin(interpRoll * 0.5F) * (float)field_190016_K.zCoord;    Vec3d vec3d=new Vec3d((double)f10,(double)f11,(double)f12);    for (int l=0; l < 4; ++l) {      scaledRotations[l]=vec3d.scale(2.0D * scaledRotations[l].dotProduct(vec3d)).add(scaledRotations[l].scale((double)(f9 * f9) - vec3d.dotProduct(vec3d))).add(vec3d.crossProduct(scaledRotations[l]).scale((double)(2.0F * f9)));    }  }  int fadeInDuration=15;  int fadeOutStart=45;  int fadeOutDuration=this.particleMaxAge - fadeOutStart;  if (this.particleAge < fadeOutStart) {    this.particleAlpha=Math.min((float)this.particleAge / (float)fadeInDuration,1.0F);  } else {    this.particleAlpha=1.0F - Math.min((float)(this.particleAge - fadeOutStart) / (float)fadeOutDuration,1.0F);  }  worldRendererIn.pos((double)interpX + scaledRotations[0].xCoord,(double)interpY + scaledRotations[0].yCoord,(double)interpZ + scaledRotations[0].zCoord).tex((double)maxU,(double)maxV).color(this.particleRed,this.particleGreen,this.particleBlue,this.particleAlpha).lightmap(lightmapX,lightmapY).endVertex();  worldRendererIn.pos((double)interpX + scaledRotations[1].xCoord,(double)interpY + scaledRotations[1].yCoord,(double)interpZ + scaledRotations[1].zCoord).tex((double)maxU,(double)minV).color(this.particleRed,this.particleGreen,this.particleBlue,this.particleAlpha).lightmap(lightmapX,lightmapY).endVertex();  worldRendererIn.pos((double)interpX + scaledRotations[2].xCoord,(double)interpY + scaledRotations[2].yCoord,(double)interpZ + scaledRotations[2].zCoord).tex((double)minU,(double)minV).color(this.particleRed,this.particleGreen,this.particleBlue,this.particleAlpha).lightmap(lightmapX,lightmapY).endVertex();  worldRendererIn.pos((double)interpX + scaledRotations[3].xCoord,(double)interpY + scaledRotations[3].yCoord,(double)interpZ + scaledRotations[3].zCoord).tex((double)minU,(double)maxV).color(this.particleRed,this.particleGreen,this.particleBlue,this.particleAlpha).lightmap(lightmapX,lightmapY).endVertex();}  }
class C{  public JmxManager(String host,int registryPort,String serviceName,AuthenticationInfo authInfo){  this(host,registryPort + 1,registryPort,serviceName,authInfo);}  }
class C{  public static java.sql.Date previous(java.sql.Date self){  return new java.sql.Date(previous((Date)self).getTime());}  }
class C{  Vector<Integer> nodeRepPath(){  Vector<Integer> result=new Vector<Integer>();  NodeRepresentation currNR=this;  while (currNR.parentNode != null) {    int idx1=currNR.getParentIndex();    result.addElement(new Integer(idx1));    Vector<NodeRepresentation> parVec=currNR.getParentVector();    currNR=currNR.parentNode;    Vector<Vector<NodeRepresentation>> childs=currNR.children;    boolean notFound=true;    int idx2=0;    while (notFound && (idx2 < childs.size())) {      if (childs.elementAt(idx2) == parVec) {        notFound=false;      } else {        idx2++;      }    }    if (notFound) {      MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","An error that should not happen has occurred in " + "line 5208 of NewDecomposeProofHandler.");      return null;    }    result.addElement(new Integer(idx2));  }  if (currNR.getParentVector() == null) {    result.addElement(new Integer(-1));  } else {    result.addElement(new Integer(currNR.getParentIndex()));  }  return result;}  }
class C{  @Override public final void postSetUp() throws Exception {  createDataRegions();  createRegions.run();  loadMoreData();  log("Data region created and populated.");}  }
class C{  public SparseDoubleMatrix2D(double[][] values){  this(values.length,values.length == 0 ? 0 : values[0].length);  assign(values);}  }
class C{  public Iterator<String> parameterSignatureIterator(){  return new ParameterSignatureIterator();}  }
class C{  public static boolean isEmpty(Map<?,?> map){  return (map == null) || map.isEmpty();}  }
class C{  protected void createRenderers(CombinedChart chart,ChartAnimator animator,ViewPortHandler viewPortHandler){  mRenderers=new ArrayList<DataRenderer>();  DrawOrder[] orders=chart.getDrawOrder();  for (  DrawOrder order : orders) {switch (order) {case BAR:      if (chart.getBarData() != null)       mRenderers.add(new BarChartRenderer(chart,animator,viewPortHandler));    break;case LINE:  if (chart.getLineData() != null)   mRenderers.add(new LineChartRenderer(chart,animator,viewPortHandler));break;case CANDLE:if (chart.getCandleData() != null) mRenderers.add(new CandleStickChartRenderer(chart,animator,viewPortHandler));break;case SCATTER:if (chart.getScatterData() != null) mRenderers.add(new ScatterChartRenderer(chart,animator,viewPortHandler));break;}}}  }
class C{  public final void renameClass(Map classnames){  String jvmNewThisName=(String)classnames.get(Descriptor.toJvmName(thisclassname));  if (jvmNewThisName != null)   thisclassname=Descriptor.toJavaName(jvmNewThisName);  constPool.renameClass(classnames);  AttributeInfo.renameClass(attributes,classnames);  ArrayList list=methods;  int n=list.size();  for (int i=0; i < n; ++i) {    MethodInfo minfo=(MethodInfo)list.get(i);    String desc=minfo.getDescriptor();    minfo.setDescriptor(Descriptor.rename(desc,classnames));    AttributeInfo.renameClass(minfo.getAttributes(),classnames);  }  list=fields;  n=list.size();  for (int i=0; i < n; ++i) {    FieldInfo finfo=(FieldInfo)list.get(i);    String desc=finfo.getDescriptor();    finfo.setDescriptor(Descriptor.rename(desc,classnames));    AttributeInfo.renameClass(finfo.getAttributes(),classnames);  }}  }
class C{  public Float evaluate(float fraction,Number startValue,Number endValue){  float startFloat=startValue.floatValue();  return startFloat + fraction * (endValue.floatValue() - startFloat);}  }
class C{  public void checkRange(double[] range,int scale){  if (mChart instanceof XYChart) {    double[] calcRange=((XYChart)mChart).getCalcRange(scale);    if (calcRange != null) {      if (!mRenderer.isMinXSet(scale)) {        range[0]=calcRange[0];        mRenderer.setXAxisMin(range[0],scale);      }      if (!mRenderer.isMaxXSet(scale)) {        range[1]=calcRange[1];        mRenderer.setXAxisMax(range[1],scale);      }      if (!mRenderer.isMinYSet(scale)) {        range[2]=calcRange[2];        mRenderer.setYAxisMin(range[2],scale);      }      if (!mRenderer.isMaxYSet(scale)) {        range[3]=calcRange[3];        mRenderer.setYAxisMax(range[3],scale);      }    }  }}  }
class C{  public MockSingleConnectionFactory(IConnection connection){  mConnection=connection;}  }
class C{  private void open() throws IOException {  int version=2;  while (Files.exists(mFile)) {    mFile=Paths.get(mFile.toFile().getAbsolutePath().replace(".wav","_" + version + ".wav"));    version++;  }  Files.createFile(mFile);  mFileChannel=(FileChannel.open(mFile,StandardOpenOption.WRITE));  ByteBuffer header=WaveUtils.getWaveHeader(mAudioFormat);  header.flip();  while (header.hasRemaining()) {    mFileChannel.write(header);  }}  }
class C{  private void rebuildSegmentIterators(){  readerAccessibleInfo=multiSegmentBipartiteGraph.getReaderAccessibleInfo();  segmentEdgeAccessor.setReaderAccessibleInfo(readerAccessibleInfo);  oldestSegmentId=readerAccessibleInfo.oldestSegmentId;  liveSegmentId=readerAccessibleInfo.liveSegmentId;  oldestSegment=readerAccessibleInfo.segments.get(oldestSegmentId);  segmentEdgeAccessor.rebuildIterators(oldestSegmentId,liveSegmentId);}  }
class C{  protected int index(int val){  byte[] states=_states;  int[] set=_set;  int length=states.length;  int hash=_hashingStrategy.computeHashCode(val) & 0x7fffffff;  int index=hash % length;  if (states[index] != FREE && (states[index] == REMOVED || set[index] != val)) {    int probe=1 + (hash % (length - 2));    do {      index-=probe;      if (index < 0) {        index+=length;      }    } while (states[index] != FREE && (states[index] == REMOVED || set[index] != val));  }  return states[index] == FREE ? -1 : index;}  }
class C{  private void printShipments(){  if (m_ids == null)   return;  if (!FDialog.ask(m_WindowNo,this,"PrintShipments"))   return;  m_messageText.append("<p>").append(Msg.getMsg(Env.getCtx(),"PrintShipments")).append("</p>");  message.setContent(m_messageText.toString());  showBusyDialog();  Clients.response(new AuEcho(this,"onPrintShipments",null));}  }
class C{  public void forEachInsn(SsaInsn.Visitor visitor){  for (  SsaBasicBlock block : blocks) {    block.forEachInsn(visitor);  }}  }
class C{  private static void applyOpenSSLFix() throws SecurityException {  if ((Build.VERSION.SDK_INT < VERSION_CODE_JELLY_BEAN) || (Build.VERSION.SDK_INT > VERSION_CODE_JELLY_BEAN_MR2)) {    return;  }  try {    Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_seed",byte[].class).invoke(null,generateSeed());    int bytesRead=(Integer)Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_load_file",String.class,long.class).invoke(null,"/dev/urandom",1024);    if (bytesRead != 1024) {      throw new IOException("Unexpected number of bytes read from Linux PRNG: " + bytesRead);    }  } catch (  Exception e) {    throw new SecurityException("Failed to seed OpenSSL PRNG",e);  }}  }
class C{  public void testPositionCache(){  OffsetIndex index=new DelegatingOffsetIndex(HeapBuffer.allocate(1024 * 8));  index.index(2,0);  index.index(3,40);  index.index(4,80);  index.index(5,120);  index.position(5);  assertEquals(index.position(0),-1);}  }
class C{  protected void updateDeferredRecipientNotFoundMessageIDs(){  setDeferredRecipientNotFoundMessageIDs(computeDeferredRecipientNotFoundMessageIDs());}  }
class C{  public boolean isGrouped(){  return mDataSets.size() > 1 ? true : false;}  }
class C{  public FieldReferenceMatch(IJavaElement enclosingElement,int accuracy,int offset,int length,boolean isReadAccess,boolean isWriteAccess,boolean insideDocComment,SearchParticipant participant,IResource resource){  super(enclosingElement,accuracy,offset,length,insideDocComment,participant,resource);  this.isReadAccess=isReadAccess;  this.isWriteAccess=isWriteAccess;}  }
class C{  public ActionEvent(Object source){  this.source=source;  this.trigger=Type.Other;}  }
class C{  public void seekTypes(String name,IPackageFragment pkg,boolean partialMatch,int acceptFlags,IJavaElementRequestor requestor,boolean considerSecondaryTypes){  String matchName=partialMatch ? name.toLowerCase() : name;  if (pkg == null) {    findAllTypes(matchName,partialMatch,acceptFlags,requestor);    return;  }  PackageFragmentRoot root=(PackageFragmentRoot)pkg.getParent();  try {    int firstDot=-1;    String topLevelTypeName=null;    int packageFlavor=root.internalKind();    if (this.typesInWorkingCopies != null || packageFlavor == IPackageFragmentRoot.K_SOURCE) {      firstDot=matchName.indexOf('.');      if (!partialMatch)       topLevelTypeName=firstDot == -1 ? matchName : matchName.substring(0,firstDot);    }    if (this.typesInWorkingCopies != null) {      if (seekTypesInWorkingCopies(matchName,pkg,firstDot,partialMatch,topLevelTypeName,acceptFlags,requestor,considerSecondaryTypes))       return;    }switch (packageFlavor) {case IPackageFragmentRoot.K_BINARY:      matchName=matchName.replace('.','$');    seekTypesInBinaryPackage(matchName,pkg,partialMatch,acceptFlags,requestor);  break;case IPackageFragmentRoot.K_SOURCE:seekTypesInSourcePackage(matchName,pkg,firstDot,partialMatch,topLevelTypeName,acceptFlags,requestor);if (matchName.indexOf('$') != -1) {matchName=matchName.replace('$','.');firstDot=matchName.indexOf('.');if (!partialMatch) topLevelTypeName=firstDot == -1 ? matchName : matchName.substring(0,firstDot);seekTypesInSourcePackage(matchName,pkg,firstDot,partialMatch,topLevelTypeName,acceptFlags,requestor);}break;default :return;}} catch (JavaModelException e) {return;}}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.557 -0400",hash_original_method="FBA32DA5B44CA2DA8EFD603946A54B03",hash_generated_method="0909D638497257790797F5B7F015DB0A") public void run(){  RandomAccessFile reader=null;  try {    long last=0;    long position=0;    while (run && reader == null) {      try {        reader=new RandomAccessFile(file,RAF_MODE);      } catch (      FileNotFoundException e) {        listener.fileNotFound();      }      if (reader == null) {        try {          Thread.sleep(delayMillis);        } catch (        InterruptedException e) {        }      } else {        position=end ? file.length() : 0;        last=System.currentTimeMillis();        reader.seek(position);      }    }    while (run) {      boolean newer=FileUtils.isFileNewer(file,last);      long length=file.length();      if (length < position) {        listener.fileRotated();        try {          RandomAccessFile save=reader;          reader=new RandomAccessFile(file,RAF_MODE);          position=0;          IOUtils.closeQuietly(save);        } catch (        FileNotFoundException e) {          listener.fileNotFound();        }        continue;      } else {        if (length > position) {          position=readLines(reader);          last=System.currentTimeMillis();        } else         if (newer) {          position=0;          reader.seek(position);          position=readLines(reader);          last=System.currentTimeMillis();        }      }      if (reOpen) {        IOUtils.closeQuietly(reader);      }      try {        Thread.sleep(delayMillis);      } catch (      InterruptedException e) {      }      if (run && reOpen) {        reader=new RandomAccessFile(file,RAF_MODE);        reader.seek(position);      }    }  } catch (  Exception e) {    listener.handle(e);  } finally {    IOUtils.closeQuietly(reader);  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.PROPERTY_SETTER_DECLARATION__ANNOTATION_LIST:    return basicSetAnnotationList(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void takeSnapshot(File file) throws IOException {  canvas.beginCapturing(false);  BufferedImage image=canvas.getLastImage();  PNGEncoder tmpEncoder=new PNGEncoder(image,false,PNGEncoder.FILTER_NONE,9);  OutputStream stream=new BufferedOutputStream(new FileOutputStream(file));  stream.write(tmpEncoder.pngEncode());  stream.close();  image.flush();}  }
class C{  protected void addLeafPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_State_leaf_feature"),getString("_UI_PropertyDescriptor_description","_UI_State_leaf_feature","_UI_State_type"),SGraphPackage.Literals.STATE__LEAF,false,false,false,ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,null,null));}  }
class C{  private boolean checkSuspendedSteps(Workflow workflow){  boolean again;  String fromStepId="None";  Set<String> suspendedSteps=new HashSet<String>();  do {    again=false;    for (    Step step : workflow.getStepMap().values()) {      if (step.status.state == StepState.SUSPENDED_NO_ERROR || step.status.state == StepState.CANCELLED) {        continue;      }      try {        try {          if (!isBlocked(workflow,step) && isStepMarkedForSuspend(workflow,step)) {            again=true;            changeStepToSuspendedNoErrorState(workflow,suspendedSteps,step);            fromStepId=step.stepId;          }        } catch (        CancelledException ex) {          again=true;          step.status.updateState(StepState.CANCELLED,null,"Cancelled by step: " + fromStepId);          _log.info(String.format("Step %s has been cancelled by step %s",step.stepId,fromStepId));          persistWorkflowStep(workflow,step);        }      } catch (      Exception ex) {        _log.error("Exception" + ex.getMessage());      }    }  } while (again == true);  for (  Step step : workflow.getStepMap().values()) {    if (step.status.state == StepState.CREATED || step.status.state == StepState.BLOCKED || step.status.state == StepState.QUEUED) {      return false;    }  }  return true;}  }
class C{  public String toString(){  return label.toString();}  }
class C{  private static int pack7Oid(BigInteger input,byte[] out,int ooffset){  byte[] b=input.toByteArray();  return pack7Oid(b,0,b.length,out,ooffset);}  }
class C{  @Inline public static boolean tryCompareAndSwap(Object base,Offset offset,long testValue,long newValue){  if (Barriers.NEEDS_LONG_PUTFIELD_BARRIER || Barriers.NEEDS_LONG_GETFIELD_BARRIER) {    return Barriers.longTryCompareAndSwap(base,offset,testValue,newValue);  } else {    if (VM.BuildForIA32) {      return Magic.attemptLong(base,offset,testValue,newValue);    } else {      long oldValue;      do {        oldValue=Magic.prepareLong(base,offset);        if (oldValue != testValue)         return false;      } while (!Magic.attemptLong(base,offset,oldValue,newValue));      return true;    }  }}  }
class C{  private void filter(final int ulx,final int uly,final int lrx,final int lry,final FilterMode filter,final int bgcolor){  final int lox=Math.min(Math.max(Math.min(ulx,lrx),0),this.width - 1);  final int loy=Math.min(Math.max(Math.min(uly,lry),0),this.height - 1);  final int rux=Math.min(Math.max(Math.max(ulx,lrx),0),this.width - 1);  final int ruy=Math.min(Math.max(Math.max(uly,lry),0),this.height - 1);  int numberOfNeighbours=0;  int rgbR=0;  int rgbG=0;  int rgbB=0;  int rgb=0;  final int width2=rux - lox + 1;  final int height2=ruy - loy + 1;  boolean border=false;  final BufferedImage image2=new BufferedImage(width2,height2,BufferedImage.TYPE_INT_RGB);  for (int i=lox; i < rux + 1; i++) {    for (int j=loy; j < ruy + 1; j++) {      numberOfNeighbours=0;      rgbR=0;      rgbG=0;      rgbB=0;      if (filter == FilterMode.FILTER_ANTIALIASING || filter == FilterMode.FILTER_BLUR) {        if (i > lox) {          rgb=this.image.getRGB(i - 1,j);          border=(rgb == bgcolor);          rgbR+=rgb >> 16 & 0xff;          rgbG+=rgb >> 8 & 0xff;          rgbB+=rgb & 0xff;          numberOfNeighbours++;        }        if (j > loy) {          rgb=this.image.getRGB(i,j - 1);          border=border || (rgb == bgcolor);          rgbR+=rgb >> 16 & 0xff;          rgbG+=rgb >> 8 & 0xff;          rgbB+=rgb & 0xff;          numberOfNeighbours++;        }        if (i < this.width - 1) {          rgb=this.image.getRGB(i + 1,j);          border=border || (rgb == bgcolor);          rgbR+=rgb >> 16 & 0xff;          rgbG+=rgb >> 8 & 0xff;          rgbB+=rgb & 0xff;          numberOfNeighbours++;        }        if (i < this.height - 1) {          rgb=this.image.getRGB(i,j + 1);          border=border || (rgb == bgcolor);          rgbR+=rgb >> 16 & 0xff;          rgbG+=rgb >> 8 & 0xff;          rgbB+=rgb & 0xff;          numberOfNeighbours++;        }      }      rgb=this.image.getRGB(i,j);      if (filter == FilterMode.FILTER_ANTIALIASING && border || filter == FilterMode.FILTER_BLUR) {        rgbR+=(rgb >> 16 & 0xff);        rgbG+=(rgb >> 8 & 0xff);        rgbB+=(rgb & 0xff);        numberOfNeighbours++;        border=false;      } else       if (filter == FilterMode.FILTER_ANTIALIASING) {        rgbR=(rgb >> 16 & 0xff);        rgbG=(rgb >> 8 & 0xff);        rgbB=(rgb & 0xff);        numberOfNeighbours=1;      } else       if (filter == FilterMode.FILTER_INVERT) {        rgb=rgb ^ 0xffffff;        rgbR=(rgb >> 16 & 0xff);        rgbG=(rgb >> 8 & 0xff);        rgbB=(rgb & 0xff);        numberOfNeighbours=1;      }      rgbR=(rgbR / numberOfNeighbours);      rgbG=(rgbG / numberOfNeighbours);      rgbB=(rgbB / numberOfNeighbours);      rgb=(rgbR << 16) | (rgbG << 8) | rgbB;      image2.setRGB(i - lox,j - loy,rgb);    }  }  insertBitmap(image2,lox,loy);}  }
class C{  public long copyStream(String id,int version,InputStream is){  final FileVersionOutputStream os=(FileVersionOutputStream)outputStream(id,version);  final long ncopied;  try {    ncopied=os.copyStream(is);    if (ncopied == 0) {      appendBlock(id,version,new byte[]{},0,0);    }    os.close();  } catch (  IOException ex) {    throw new RuntimeException(ex);  }  return ncopied;}  }
class C{  private void updateBounds(){  this.minimumRangeValue=Double.NaN;  this.minimumRangeValueRow=-1;  this.minimumRangeValueColumn=-1;  this.maximumRangeValue=Double.NaN;  this.maximumRangeValueRow=-1;  this.maximumRangeValueColumn=-1;  int rowCount=getRowCount();  int columnCount=getColumnCount();  for (int r=0; r < rowCount; r++) {    for (int c=0; c < columnCount; c++) {      BoxAndWhiskerItem item=getItem(r,c);      if (item != null) {        Number min=item.getMinOutlier();        if (min != null) {          double minv=min.doubleValue();          if (!Double.isNaN(minv)) {            if (minv < this.minimumRangeValue || Double.isNaN(this.minimumRangeValue)) {              this.minimumRangeValue=minv;              this.minimumRangeValueRow=r;              this.minimumRangeValueColumn=c;            }          }        }        Number max=item.getMaxOutlier();        if (max != null) {          double maxv=max.doubleValue();          if (!Double.isNaN(maxv)) {            if (maxv > this.maximumRangeValue || Double.isNaN(this.maximumRangeValue)) {              this.maximumRangeValue=maxv;              this.maximumRangeValueRow=r;              this.maximumRangeValueColumn=c;            }          }        }      }    }  }}  }
class C{  EnabledManagedEntityController(AdminDistributedSystem system){  this.system=system;  this.threadGroup=LoggingThreadGroup.createThreadGroup("ManagedEntityController threads",logger);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tSQL query to execute.","Q",1,"-Q <query>"));  result.addElement(new Option("\tReturn sparse rather than normal instances.","S",0,"-S"));  result.addElement(new Option("\tThe username to use for connecting.","U",1,"-U <username>"));  result.addElement(new Option("\tThe password to use for connecting.","P",1,"-P <password>"));  result.add(new Option("\tThe custom properties file to use instead of default ones,\n" + "\tcontaining the database parameters.\n" + "\t(default: none)","custom-props",1,"-custom-props <file>"));  result.addElement(new Option("\tEnables debug output.","D",0,"-D"));  return result.elements();}  }
class C{  protected boolean calculateSize(){  p_width=0;  p_height=0;  if (m_image == null)   return true;  if (waitForLoad(m_image) && m_image != null) {    p_width=m_image.getWidth(this);    p_height=m_image.getHeight(this);    if (p_width * p_height == 0)     return true;    m_scaleFactor=1;    if (p_maxWidth != 0 && p_width > p_maxWidth)     m_scaleFactor=p_maxWidth / p_width;    if (p_maxHeight != 0 && p_height > p_maxHeight && p_maxHeight / p_height < m_scaleFactor)     m_scaleFactor=p_maxHeight / p_height;    p_width=(float)m_scaleFactor * p_width;    p_height=(float)m_scaleFactor * p_height;  } else {    m_image=null;  }  return true;}  }
class C{  public boolean isRecursive(){  return recursive;}  }
class C{  protected void rememberAttribute(String name,String value){  if (textAttributes == null)   textAttributes=new HashMap<String,String>(4);  textAttributes.put(name,value);}  }
class C{  public void testGetName(){  String expectedReturn="CONNECTION-ID";  String actualReturn=connectionIdAttribute.getName();  assertEquals("getting name failed",expectedReturn,actualReturn);}  }
class C{  public T caseTAnnotationArgument(TAnnotationArgument object){  return null;}  }
class C{  public DirtyRegion removeNextDirtyRegion(){  if (fDirtyRegions.size() == 0) {    return null;  }  final DirtyRegion dr=fDirtyRegions.get(0);  fDirtyRegions.remove(0);  return dr;}  }
class C{  public static void main(String[] args){  int MAX_R=21;  int NUM_TRIALS=20;  UniformGenerator ug=new UniformGenerator();  TrialSuite last=new TrialSuite();  TrialSuite random=new TrialSuite();  TrialSuite[] lastMT=new TrialSuite[MAX_R];  TrialSuite[] randomMT=new TrialSuite[MAX_R];  for (int r=0; r < MAX_R; r++) {    lastMT[r]=new TrialSuite();    randomMT[r]=new TrialSuite();  }  for (int nt=1; nt < 10; nt++) {    System.out.println("num thread=" + nt);    for (int size=65536; size <= 1048576; size*=2) {      System.out.println(size + "...");      for (int t=0; t < NUM_TRIALS; t++) {        IPoint[] pts=ug.generate(size / 2);        if (nt == 1) {          runTrialNormal(size,last,pts,new LastSelector());          runTrialNormal(size,random,pts,new RandomSelector());        }        for (int r=0; r < MAX_R; r++) {          int ratio=r + 1;          if (r == MAX_R - 1) {            ratio=Integer.MAX_VALUE;          }          runTrialParallel(size,lastMT[r],pts,new LastSelector(),ratio,nt);          runTrialParallel(size,randomMT[r],pts,new RandomSelector(),ratio,nt);        }      }    }    if (nt == 1) {      System.out.println("LAST");      System.out.println(last.computeTable());      System.out.println("RANDOM");      System.out.println(random.computeTable());    }    String lastT=TrialSuiteHelper.combine(lastMT);    String randomT=TrialSuiteHelper.combine(randomMT);    System.out.println("LAST-ONE-HELPER(r)");    System.out.println(lastT);    System.out.println("RANDOM-ONE-HELPER(r)");    System.out.println(randomT);  }}  }
class C{  public BasicLagGraph(){  this.connectivity=new TreeMap<>();}  }
class C{  public void processFEAdaptMetrics(Double percentBusy,Long iops,StorageHADomain haDomain,String statisticTime,boolean usingCIMTime){  StorageSystem system=_dbClient.queryObject(StorageSystem.class,haDomain.getStorageDeviceURI());  StringMap dbMetrics=haDomain.getMetrics();  Long sampleTime=(usingCIMTime) ? convertCIMStatisticTime(statisticTime) : Long.valueOf(statisticTime);  _log.info(String.format("FEAdaptMetrics %s %s percentBusy %f  iops %d sampleTime %d",haDomain.getAdapterName(),haDomain.getNativeGuid(),percentBusy,iops,sampleTime));  Long iopsValue=MetricsKeys.getLong(MetricsKeys.iopsValue,dbMetrics);  Long iopsDelta=iops - iopsValue;  percentBusy*=10.0;  if (percentBusy >= 0.0) {    computePercentBusyAverages(percentBusy.longValue(),1000L,iopsDelta,dbMetrics,haDomain.getNativeGuid(),haDomain.getAdapterName() + " [cpu]",sampleTime,system);  }  MetricsKeys.putLong(MetricsKeys.iopsValue,iops,dbMetrics);  MetricsKeys.putLong(MetricsKeys.lastSampleTime,sampleTime,dbMetrics);  haDomain.setMetrics(dbMetrics);  _dbClient.persistObject(haDomain);}  }
class C{  public java.lang.StringBuffer insert(int offset,double d){  return null;}  }
class C{  @Override public void print(@NotNull String text,@NotNull String color){  view.print(text,color);  view.scrollBottom();  for (  ActionDelegate actionDelegate : actionDelegates) {    actionDelegate.onConsoleOutput(this);  }}  }
class C{  public boolean isPreDestroyCalled(){  return this.preDestroyCalled;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void print(short x){  out.print(x);  out.flush();}  }
class C{  public List fetchControllers(){  List result=this.cachedControllerProfiles;  if (result == null) {synchronized (this.cacheLock) {      result=this.cachedControllerProfiles;      if (result == null) {        result=fetchProfiles(CONTROLLER_FILTER);        this.cachedControllerProfiles=result;      }    }  }  return result;}  }
class C{  public static void replace(ByteString namespace,ByteString key,Iterable<? extends ByteString> values){  getOrCreate().replace(namespace,key,values);}  }
class C{  public synchronized long flush(int atLeastMarkerCount) throws IOException {  assert isPrimary;  try (Connection c=new Connection(tcpPort)){    c.out.writeByte(SimplePrimaryNode.CMD_FLUSH);    c.out.writeVInt(atLeastMarkerCount);    c.flush();    c.s.shutdownOutput();    return c.in.readLong();  } }  }
class C{  public void writeTo(String filename) throws IOException {  ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(filename));  oos.writeObject(this);  oos.flush();  oos.close();}  }
class C{  @SuppressWarnings("unused") public boolean removeHeaderItem(View v){  return mHeaderItems.remove(v) && mAdapter != null && mAdapter.removeHeaderItem(v);}  }
class C{  public ArrayList<ValueNamePair> loadPaymentRule(int C_PaySelection_ID){  ArrayList<ValueNamePair> data=new ArrayList<ValueNamePair>();  int AD_Reference_ID=195;  Language language=Language.getLanguage(Env.getAD_Language(Env.getCtx()));  MLookupInfo info=MLookupFactory.getLookup_List(language,AD_Reference_ID);  String sql=info.Query.substring(0,info.Query.indexOf(" ORDER BY")) + " AND " + info.KeyColumn+ " IN (SELECT PaymentRule FROM C_PaySelectionCheck WHERE C_PaySelection_ID=?) "+ info.Query.substring(info.Query.indexOf(" ORDER BY"));  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,C_PaySelection_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      ValueNamePair pp=new ValueNamePair(rs.getString(2),rs.getString(3));      data.add(pp);    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  if (data.size() == 0)   log.config("PaySel=" + C_PaySelection_ID + ", BAcct="+ m_C_BankAccount_ID+ " - "+ sql);  return data;}  }
class C{  private static String readTextDate(final Reader r) throws IOException {  final BufferedReader br=new BufferedReader(r);  StringBuilder textData=new StringBuilder();  String line=br.readLine();  while (line != null) {    textData.append(line);    line=br.readLine();  }  br.close();  return textData.toString();}  }
class C{  public final TextImpl minimize(){  if (getLength() == 0) {    parent.removeChild(this);    return null;  }  Node previous=getPreviousSibling();  if (previous == null || previous.getNodeType() != Node.TEXT_NODE) {    return this;  }  TextImpl previousText=(TextImpl)previous;  previousText.buffer.append(buffer);  parent.removeChild(this);  return previousText;}  }
class C{  public RequestParams(final String key,final String value){  this(new HashMap<String,String>(){{      put(key,value);    }  });}  }
class C{  public AsyncResult CloseSecureChannelAsync(RequestHeader RequestHeader){  CloseSecureChannelRequest req=new CloseSecureChannelRequest(RequestHeader);  return channel.serviceRequestAsync(req);}  }
class C{  public static CCFadeTransition transition(float t,CCScene s,ccColor3B rgb){  return new CCFadeTransition(t,s,rgb);}  }
class C{  public String extractURLfromJDBCURL(String url){  try {    final Matcher matcher=urlPattern.matcher(url);    matcher.find();    return matcher.group(1);  } catch (  IllegalStateException i) {    return url;  }}  }
class C{  public void register(IGeneratorManager<E> m){  managers.add(m);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:33.003 -0500",hash_original_method="74975F7A6AFB5E81CCF3457B53FB8A14",hash_generated_method="76CCCA88EDF0B80C204E0A2802C9ECAD") public ReferenceQueue(){}  }
class C{  public Builder detectNetwork(){  return enable(DETECT_NETWORK);}  }
class C{  public void remove(String key){  properties.remove(key);}  }
class C{  public StreamAllocation close(){  if (bufferedRequestBody != null) {    closeQuietly(bufferedRequestBody);  } else   if (requestBodyOut != null) {    closeQuietly(requestBodyOut);  }  if (userResponse != null) {    closeQuietly(userResponse.body());  } else {    streamAllocation.connectionFailed();  }  return streamAllocation;}  }
class C{  public int findMaxDiff(int[] A){  int[] maxSubArr=maxKadane(A);  int[] minSubArr=minKadane(A);  int sum1=printArr(A,maxSubArr[0],maxSubArr[1]);  int sum2=printArr(A,minSubArr[0],minSubArr[1]);  return sum1 - sum2;}  }
class C{  private E dequeue(){  Node<E> h=head;  Node<E> first=h.next;  h.next=h;  head=first;  E x=first.item;  first.item=null;  return x;}  }
class C{  private CReilConverter(){}  }
class C{  public RefactoringStatusEntry(int severity,String msg,RefactoringStatusContext context,String pluginId,int code,Object data){  Assert.isTrue(severity == RefactoringStatus.INFO || severity == RefactoringStatus.WARNING || severity == RefactoringStatus.ERROR || severity == RefactoringStatus.FATAL);  Assert.isNotNull(msg);  Assert.isTrue(code == NO_CODE || code >= 0);  if (code != NO_CODE)   Assert.isTrue(pluginId != null);  fMessage=msg;  fSeverity=severity;  fContext=context;  fPluginId=pluginId;  fCode=code;  fData=data;}  }
class C{  public static void main(String[] args){  Splash.getSplash();  startup(true);  String className="org.compiere.apps.AMenu";  for (int i=0; i < args.length; i++) {    if (!args[i].equals("-debug")) {      className=args[i];      break;    }  }  try {    Class<?> startClass=Class.forName(className);    startClass.newInstance();  } catch (  Exception e) {    System.err.println("ADempiere starting: " + className + " - "+ e.toString());    e.printStackTrace();  }}  }
class C{  private InputStream downloadDriveFile(File driveFile,boolean canRetry) throws IOException {  if (driveFile.getDownloadUrl() == null || driveFile.getDownloadUrl().length() == 0) {    Log.d(TAG,"Drive file download url doesn't exist: " + driveFile.getTitle());    return null;  }  try {    HttpResponse httpResponse=drive.getRequestFactory().buildGetRequest(new GenericUrl(driveFile.getDownloadUrl())).execute();    if (httpResponse == null) {      Log.e(TAG,"http response is null");      return null;    }    return httpResponse.getContent();  } catch (  UserRecoverableAuthIOException e) {    throw e;  }catch (  IOException e) {    if (canRetry) {      return downloadDriveFile(driveFile,false);    }    throw e;  }}  }
class C{  public ModelBuilder add(Resource subject,IRI predicate,Object object){  model.setNamespace(XMLSchema.NS);  final Value objectValue=(object instanceof Value) ? (Value)object : Literals.createLiteral(SimpleValueFactory.getInstance(),object);  if (currentNamedGraph != null) {    model.add(subject,predicate,objectValue,currentNamedGraph);  } else {    model.add(subject,predicate,objectValue);  }  return this;}  }
class C{  public Item pop(){  if (isEmpty())   throw new NoSuchElementException("Stack underflow");  Item item=a[n - 1];  a[n - 1]=null;  n--;  if (n > 0 && n == a.length / 4)   resize(a.length / 2);  return item;}  }
class C{  public static String formatDateForApi(long date){  Calendar c=Calendar.getInstance();  c.setTimeInMillis(date);  return FORMAT_API.format(c.getTime());}  }
class C{  public boolean isDoubleBuffered(){  return isDoubleBuffered;}  }
class C{  public void close(){}  }
class C{  protected void sequence_ParameterizedTypeRefStructural_TStructMemberList(ISerializationContext context,ParameterizedTypeRefStructural semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public String toString(){  return name + " version " + version;}  }
class C{  public boolean optBoolean(String key){  return this.optBoolean(key,false);}  }
class C{  private static void sendNotModified(ChannelHandlerContext ctx){  FullHttpResponse response=new DefaultFullHttpResponse(HTTP_1_1,NOT_MODIFIED);  setDateHeader(response);  ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);}  }
class C{  public static DoubleMatrix1D minus(DoubleMatrix1D A,DoubleMatrix1D B){  return A.assign(B,F.minus);}  }
class C{  public static String changeCase(String element){  if (element == null) {    return null;  }  if (WWNUtility.isValidWWN(element)) {    return element.toUpperCase();  } else {    return element.toLowerCase();  }}  }
class C{  private Set<Statement> readExpectedGraphQueryResult(String resultFile) throws Exception {  RDFFormat rdfFormat=Rio.getParserFormatForFileName(resultFile).orElseThrow(Rio.unsupportedFormat(resultFile));  RDFParser parser=Rio.createParser(rdfFormat);  parser.setDatatypeHandling(DatatypeHandling.IGNORE);  parser.setPreserveBNodeIDs(true);  parser.setValueFactory(SimpleValueFactory.getInstance());  Set<Statement> result=new LinkedHashSet<Statement>();  parser.setRDFHandler(new StatementCollector(result));  InputStream in=SPARQLServiceEvaluationTest.class.getResourceAsStream(resultFile);  try {    parser.parse(in,null);  }  finally {    in.close();  }  return result;}  }
class C{  public static void markExistingUsersForNoFolderCreation(Context context){  UserManagerCompat userManager=UserManagerCompat.getInstance(context);  UserHandleCompat myUser=UserHandleCompat.myUserHandle();  SharedPreferences prefs=null;  for (  UserHandleCompat user : userManager.getUserProfiles()) {    if (myUser.equals(user)) {      continue;    }    if (prefs == null) {      prefs=context.getSharedPreferences(LauncherFiles.MANAGED_USER_PREFERENCES_KEY,Context.MODE_PRIVATE);    }    String folderIdKey=USER_FOLDER_ID_PREFIX + userManager.getSerialNumberForUser(user);    if (!prefs.contains(folderIdKey)) {      prefs.edit().putLong(folderIdKey,ItemInfo.NO_ID).apply();    }  }}  }
class C{  public synchronized <T>T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException {  try {    if ("java.sql.Statement".equals(iface.getName()) || "java.sql.PreparedStatement".equals(iface.getName()) || "java.sql.Wrapper.class".equals(iface.getName())) {      return iface.cast(this);    }    if (unwrappedInterfaces == null) {      unwrappedInterfaces=new HashMap<Class<?>,Object>();    }    Object cachedUnwrapped=unwrappedInterfaces.get(iface);    if (cachedUnwrapped == null) {      if (cachedUnwrapped == null) {        cachedUnwrapped=Proxy.newProxyInstance(this.wrappedStmt.getClass().getClassLoader(),new Class<?>[]{iface},new ConnectionErrorFiringInvocationHandler(this.wrappedStmt));        unwrappedInterfaces.put(iface,cachedUnwrapped);      }      unwrappedInterfaces.put(iface,cachedUnwrapped);    }    return iface.cast(cachedUnwrapped);  } catch (  ClassCastException cce) {    throw SQLError.createSQLException("Unable to unwrap to " + iface.toString(),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,this.exceptionInterceptor);  }}  }
class C{  public Set<String> addContent(DialogueState newState){  if (!paused) {    curState.addToState(newState);    return update();  } else {    log.info("system is paused, ignoring content " + newState);    return Collections.emptySet();  }}  }
class C{  public IComment editComment(final IComment comment,final String newComment) throws CouldntSaveDataException {  try {    return m_function.editGlobalComment(comment,newComment);  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  public NecroData(String identifier,String title,Chapter... chapters){  this(identifier,title,null,chapters);}  }
class C{  public boolean isManual(){  Object oo=get_Value(COLUMNNAME_IsManual);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void restoreVolatileRegisters(Instruction inst){  PhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet().asPPC();  Register FP=phys.getFP();  int i=0;  for (Enumeration<Register> e=phys.enumerateVolatileGPRs(); e.hasMoreElements(); i++) {    Register r=e.nextElement();    int location=saveVolatileGPRLocation[i];    inst.insertBefore(MIR_Load.create(PPC_LAddr,A(r),A(FP),IC(location)));  }  i=0;  for (Enumeration<Register> e=phys.enumerateVolatileFPRs(); e.hasMoreElements(); i++) {    Register r=e.nextElement();    int location=saveVolatileFPRLocation[i];    inst.insertBefore(MIR_Load.create(PPC_LFD,D(r),A(FP),IC(location)));  }  Register temp=phys.getTemp();  inst.insertBefore(MIR_Load.create(PPC_LInt,I(temp),A(FP),IC(saveXERLocation)));  inst.insertBefore(MIR_Move.create(PPC_MTSPR,I(phys.getXER()),I(temp)));  inst.insertBefore(MIR_Load.create(PPC_LAddr,A(temp),A(FP),IC(saveCTRLocation)));  inst.insertBefore(MIR_Move.create(PPC_MTSPR,A(phys.getCTR()),A(temp)));}  }
class C{  public void finishImporting(final IDatabase database,final String idb){  m_imports.get(database).remove(idb);}  }
class C{  private void updateUserTenantRolesBasedOnUserGroup(StorageOSUser user,TenantOrg tenant,Set<String> tenantRoles){  if (user == null || tenant == null) {    _log.error("Invalid user {} or tenant {}",user,tenant);    return;  }  StringSetMap roleAssignments=tenant.getRoleAssignments();  Map<UserGroup,StringSet> userGroupsWithRoles=getUserGroupsFromRoleAssignments(roleAssignments);  if (CollectionUtils.isEmpty(userGroupsWithRoles)) {    _log.debug("There are no role assignments for tenant {} with user group",tenant.getLabel());    return;  }  StringSet roleSet=findAllRolesToAdd(user,userGroupsWithRoles);  if (CollectionUtils.isEmpty(roleSet)) {    _log.debug("There are no roles found for user group in the tenant {}",tenant.getLabel());    return;  }  for (  String role : roleSet) {    if (isRoleTenantLevel(role)) {      _log.debug("Adding the tenant role {} to the user {}",role,user.getDistinguishedName());      tenantRoles.add(role);    }  }}  }
class C{  public static int loadShader(int type,String shaderCode){  int shader=GLES20.glCreateShader(type);  GLES20.glShaderSource(shader,shaderCode);  GLES20.glCompileShader(shader);  return shader;}  }
class C{  public static String toCss(final Color color){  return "rgb(" + color.getRed() + ","+ color.getGreen()+ ","+ color.getBlue()+ ")";}  }
class C{  public void testPalyndrome2() throws Exception {  query=new PhraseQuery("field","two","three");  ScoreDoc[] hits=searcher.search(query,1000).scoreDocs;  assertEquals("phrase found with exact phrase scorer",1,hits.length);  float score0=hits[0].score;  QueryUtils.check(random(),query,searcher);  query=new PhraseQuery("field","two","three");  hits=searcher.search(query,1000).scoreDocs;  assertEquals("just sloppy enough",1,hits.length);  float score1=hits[0].score;  assertEquals("exact scorer and sloppy scorer score the same when slop does not matter",score0,score1,SCORE_COMP_THRESH);  QueryUtils.check(random(),query,searcher);  query=new PhraseQuery(2,"palindrome","two","three");  hits=searcher.search(query,1000).scoreDocs;  assertEquals("just sloppy enough",1,hits.length);  QueryUtils.check(random(),query,searcher);  query=new PhraseQuery(2,"palindrome","three","two");  hits=searcher.search(query,1000).scoreDocs;  assertEquals("just sloppy enough",1,hits.length);  QueryUtils.check(random(),query,searcher);}  }
class C{  private void paintBackgroundPressed(Graphics2D g,JComponent c,int width,int height){  paintBackground(g,c,width,height,pressed);}  }
class C{  public SerialX10Light(String systemName,SerialTrafficController tc,String userName){  super(systemName,tc,userName);  this.tc=tc;  maxDimStep=tc.getNumberOfIntensitySteps();}  }
class C{  public void sessionToken(byte[] sesTok){  this.sesTok=sesTok;}  }
class C{  @Override public Cloudlet migrateCloudlet(){  ResCloudlet rcl=getCloudletExecList().remove(0);  rcl.finalizeCloudlet();  Cloudlet cl=rcl.getCloudlet();  usedPes-=cl.getNumberOfPes();  return cl;}  }
class C{  public void stopPreview(){  if (camera != null && previewing) {    if (!useOneShotPreviewCallback) {      camera.setPreviewCallback(null);    }    camera.stopPreview();    previewCallback.setHandler(null,0);    autoFocusCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tFull name of base clusterer.\n" + "\t(default: " + defaultClustererString() + ")","W",1,"-W"));  result.addAll(Collections.list(super.listOptions()));  if (m_Clusterer instanceof OptionHandler) {    result.addElement(new Option("","",0,"\nOptions specific to clusterer " + m_Clusterer.getClass().getName() + ":"));    result.addAll(Collections.list(((OptionHandler)m_Clusterer).listOptions()));  }  return result.elements();}  }
class C{  private void remove(){  before.after=after;  after.before=before;}  }
class C{  @Ignore @Test public void testAttendingtoAttendingDoneQuestmessage(){  for (  final String playerSays : ConversationPhrases.QUEST_MESSAGES) {    final Player player=PlayerTestHelper.createPlayer("bob");    player.setQuest(QUEST_SLOT,"done");    npcEngine.setCurrentState(ATTENDING);    npcEngine.step(player,playerSays);    assertThat(playerSays,getReply(npc),is("I'm now busy studying the properties of the elvish armor you brought me. It really is intriguing. Until I can reproduce it, I would buy similar items from you."));    assertThat(playerSays,npcEngine.getCurrentState(),is(ATTENDING));  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"QSUB");  translateAll(environment,instruction,"QSUB",instructions);}  }
class C{  public boolean contains(CharSequence s){  return value.contains(s);}  }
class C{  @Dev public SetQuestToPlayerAgeAction(final String questname,final int index){  this.questname=checkNotNull(questname);  this.index=index;}  }
class C{  public void fireGenerateEvent(int eventType,char[] ch,int start,int length){}  }
class C{  public boolean interiorContains(S2LatLngRect other){  return (lat.interiorContains(other.lat) && lng.interiorContains(other.lng));}  }
class C{  public void testOperatorPreferenceAvailable(){}  }
class C{  public char readChar() throws java.io.IOException {  if (inBuf > 0) {    --inBuf;    if (++bufpos == bufsize)     bufpos=0;    return buffer[bufpos];  }  char c;  if (++bufpos == available)   AdjustBuffSize();  if ((buffer[bufpos]=c=ReadByte()) == '\\') {    UpdateLineColumn(c);    int backSlashCnt=1;    for (; ; ) {      if (++bufpos == available)       AdjustBuffSize();      try {        if ((buffer[bufpos]=c=ReadByte()) != '\\') {          UpdateLineColumn(c);          if ((c == 'u') && ((backSlashCnt & 1) == 1)) {            if (--bufpos < 0)             bufpos=bufsize - 1;            break;          }          backup(backSlashCnt);          return '\\';        }      } catch (      java.io.IOException e) {        if (backSlashCnt > 1)         backup(backSlashCnt - 1);        return '\\';      }      UpdateLineColumn(c);      backSlashCnt++;    }    try {      while ((c=ReadByte()) == 'u')       ++column;      buffer[bufpos]=c=(char)(hexval(c) << 12 | hexval(ReadByte()) << 8 | hexval(ReadByte()) << 4 | hexval(ReadByte()));      column+=4;    } catch (    java.io.IOException e) {      throw new Error("Invalid escape character at line " + line + " column "+ column+ ".");    }    if (backSlashCnt == 1)     return c; else {      backup(backSlashCnt - 1);      return '\\';    }  } else {    UpdateLineColumn(c);    return c;  }}  }
class C{  public String last(){  append("last()");  scroll(data.getRowCount() - 1);  return (null);}  }
class C{  protected BusinessObjectDataAvailability checkBusinessObjectDataAvailabilityImpl(BusinessObjectDataAvailabilityRequest request){  return checkBusinessObjectDataAvailabilityImpl(request,false);}  }
class C{  private Orientation(int angle){  mAngle=angle;}  }
class C{  public static Number floor(Number a){  if (isFloatingPoint(a)) {    return Math.floor(a.doubleValue());  } else {    return a.longValue();  }}  }
class C{  public void testTokenSeparatorNoUnigrams() throws Exception {  Reader reader=new StringReader("this is a test");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("Shingle","tokenSeparator","=BLAH=","outputUnigrams","false").create(stream);  assertTokenStreamContents(stream,new String[]{"this=BLAH=is","is=BLAH=a","a=BLAH=test"});}  }
class C{  ReasonsMask(ReasonFlags reasons){  _reasons=reasons.intValue();}  }
class C{  public static String parseUUIDFromURI(URI id){  return (id != null) ? parsePartFromURI(id.toString(),UUID_PARTS_COUNT) : null;}  }
class C{  public ProjectRestRep create(ProjectParam input){  return create(parent.getUserTenantId(),input);}  }
class C{  public static PsiElementClassMember[] combineToClassMemberList(PsiField[] filteredFields,PsiMethod[] filteredMethods){  PsiElementClassMember[] members=new PsiElementClassMember[filteredFields.length + filteredMethods.length];  for (int i=0; i < filteredFields.length; i++) {    members[i]=new PsiFieldMember(filteredFields[i]);  }  for (int i=0; i < filteredMethods.length; i++) {    members[filteredFields.length + i]=new PsiMethodMember(filteredMethods[i]);  }  return members;}  }
class C{  private ClassVertex addClassAndGetClassVertex(XClass xclass){  if (xclass == null) {    throw new IllegalStateException();  }  LinkedList<XClass> workList=new LinkedList<XClass>();  workList.add(xclass);  while (!workList.isEmpty()) {    XClass work=workList.removeFirst();    ClassVertex vertex=classDescriptorToVertexMap.get(work.getClassDescriptor());    if (vertex != null && vertex.isFinished()) {      continue;    }    if (vertex == null) {      vertex=ClassVertex.createResolvedClassVertex(work.getClassDescriptor(),work);      addVertexToGraph(work.getClassDescriptor(),vertex);    }    addSupertypeEdges(vertex,workList);    vertex.setFinished(true);  }  return classDescriptorToVertexMap.get(xclass.getClassDescriptor());}  }
class C{  public void displayMessage(String message){  try {    SVGAbstractTranscoder.this.handler.warning(new TranscoderException(message));  } catch (  TranscoderException ex) {    throw new RuntimeException(ex.getMessage());  }}  }
class C{  private MountedItem(){}  }
class C{  public HyperGraphPeer(File configFile){  loadConfig(configFile);}  }
class C{  protected boolean requestImage(DrawContext dc){  if (this.isBufferedImageSource())   this.setImage((BufferedImage)this.getImageSource());  if (this.getImage() != null && !this.getTextureAtlas().contains(this.getImageSource()))   return this.addAtlasImage();  if (WorldWind.getTaskService().isFull())   return false;  Runnable task=this.createRequestTask();  if (WorldWind.getTaskService().contains(task))   return false;  this.listener=dc.getCurrentLayer() != null ? dc.getCurrentLayer() : dc.getLayers();  WorldWind.getTaskService().addTask(task);  return false;}  }
class C{  public static int climbStairs(int n){  int[] cache=new int[n + 1];  return helper(n,cache);}  }
class C{  private void calculateIntervals(){  int nodeCount=tree.getNodeCount();  times=new double[nodeCount];  int[] childCounts=new int[nodeCount];  collectTimes(tree,times,childCounts);  indices=new int[nodeCount];  HeapSort.sort(times,indices);  if (intervals == null || intervals.length != nodeCount) {    intervals=new double[nodeCount];    lineageCounts=new int[nodeCount];    lineagesAdded=new List[nodeCount];    lineagesRemoved=new List[nodeCount];    lineages=new List[nodeCount];  }  double start=times[indices[0]];  int numLines=0;  int nodeNo=0;  intervalCount=0;  while (nodeNo < nodeCount) {    int lineagesRemoved=0;    int lineagesAdded=0;    double finish=times[indices[nodeNo]];    double next;    do {      final int childIndex=indices[nodeNo];      final int childCount=childCounts[childIndex];      nodeNo+=1;      if (childCount == 0) {        addLineage(intervalCount,tree.getNode(childIndex));        lineagesAdded+=1;      } else {        lineagesRemoved+=(childCount - 1);        final NodeRef parent=tree.getNode(childIndex);        for (int j=0; j < childCount; j++) {          NodeRef child=tree.getChild(parent,j);          removeLineage(intervalCount,child);        }        addLineage(intervalCount,parent);        if (multifurcationLimit == 0.0) {          break;        }      }      if (nodeNo < nodeCount) {        next=times[indices[nodeNo]];      } else       break;    } while (Math.abs(next - finish) <= multifurcationLimit);    if (lineagesAdded > 0) {      if (intervalCount > 0 || ((finish - start) > multifurcationLimit)) {        intervals[intervalCount]=finish - start;        lineageCounts[intervalCount]=numLines;        intervalCount+=1;      }      start=finish;    }    numLines+=lineagesAdded;    if (lineagesRemoved > 0) {      intervals[intervalCount]=finish - start;      lineageCounts[intervalCount]=numLines;      intervalCount+=1;      start=finish;    }    numLines-=lineagesRemoved;  }  intervalsKnown=true;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public final TestSubscriber assertNotSubscribed(){  String prefix="";  if (done.getCount() != 0) {    prefix="Subscriber still running! ";  }  if (subscription.get() != null) {    fail(prefix,"Subscribed!",errors);  } else   if (!errors.isEmpty()) {    fail(prefix,"Not subscribed but errors found",errors);  }  return this;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataindexsizeerrdeletedataoffsetgreater.class,args);}  }
class C{  public Pattern namedPattern(){  return parentPattern;}  }
class C{  public int size(){  return size(root);}  }
class C{  public JdpJmxPacket(UUID id,String jmxServiceUrl){  this.id=id;  this.jmxServiceUrl=jmxServiceUrl;}  }
class C{  @Override public void write(Kryo kryo,Output _o,T object){  if (!(_o instanceof OutputWithRoot)) {    super.write(kryo,_o,object);    return;  }  OutputWithRoot output=(OutputWithRoot)_o;  CachedField<?>[] fields=getFields();  output.writeVarInt(this.superTypeVersion,true);  for (int i=0, n=fields.length; i < n; i++) {    if (output.getRoot() == object && (i == this.indexKind || i == this.indexSelfLink)) {      fields[i].write(output,TEMPLATE);    } else {      fields[i].write(output,object);    }  }}  }
class C{  public boolean isAutoIndentEnabled(){  return autoIndentEnabled;}  }
class C{  public boolean isFinishPage(){  FacesContext realContext=FacesContext.getCurrentInstance(), copyContext=createShadowFacesContext(realContext), nextCopyContext;  NavigationHandler nav=copyContext.getApplication().getNavigationHandler();  nav.handleNavigation(copyContext,null,"next");  nextCopyContext=createShadowFacesContext(copyContext);  nav.handleNavigation(nextCopyContext,null,"next");  return compareUIViewRoots(copyContext.getViewRoot(),nextCopyContext.getViewRoot());}  }
class C{  public void addDocValidate(String tableName,ModelValidator listener){  if (tableName == null || listener == null)   return;  String propertyName=m_globalValidators.contains(listener) ? tableName + "*" : tableName + listener.getAD_Client_ID();  ArrayList<ModelValidator> list=(ArrayList<ModelValidator>)m_docValidateListeners.get(propertyName);  if (list == null) {    list=new ArrayList<ModelValidator>();    list.add(listener);    m_docValidateListeners.put(propertyName,list);  } else   if (!list.contains(listener)) {    list.add(listener);  }}  }
class C{  protected Container createPopupContent(List<FloatingActionButton> fabs){  Container con=new Container(new BoxLayout(BoxLayout.Y_AXIS));  for (  FloatingActionButton next : subMenu) {    next.setPreferredW(getWidth());    Container c=new Container(new BorderLayout());    Label txt=new Label(next.text);    txt.setUIID("FloatingActionText");    c.add(BorderLayout.CENTER,FlowLayout.encloseRight(txt));    c.add(BorderLayout.EAST,next);    con.add(c);  }  return con;}  }
class C{  public static byte[] toByteArray(InputStream input) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output);  return output.toByteArray();}  }
class C{  public void destroyMemory(String database,boolean isSchema){}  }
class C{  public Log restart() throws IOException {  return restarter.restart(this);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @Deprecated public int checkReverseMapping(final int articleID,final int revisionCounter) throws SQLException {  PreparedStatement statement=null;  ResultSet result=null;  try {    statement=this.connection.prepareStatement("SELECT ReverseMapping FROM index_chronological WHERE ArticleID=? LIMIT 1");    statement.setInt(1,articleID);    result=statement.executeQuery();    if (result.next()) {      String mapping=result.getString(1);      return getMapping(mapping,revisionCounter);    }  }  finally {    if (statement != null) {      statement.close();    }    if (result != null) {      result.close();    }  }  return revisionCounter;}  }
class C{  public void testLikeOnInvalidLikeEscapeSequence(){  checkFail("LIKE 'AAA's'");  checkFail("LIKE 'AAA\'s'");  checkFail("LIKE '\\%AAA%' {escape'\\' }");  checkFail("LIKE '\\%AAA%' {'\\' ORDER BY id");  checkFail("LIKE '\\%AAA%' {escape '\\' ORDER BY id;");  checkFail("LIKE '\\%AAA%' '\\'} ORDER BY id");  checkFail("LIKE '\\%AAA%' escape '\\'} ORDER BY id;");}  }
class C{  private void validateEmrClusterCreationLogUnique(EmrCluster emrCluster,EmrClusterDefinition expectedEmrClusterDefinition) throws JAXBException {  String namespace=emrCluster.getNamespace();  String emrClusterDefinitionName=emrCluster.getEmrClusterDefinitionName();  String emrClusterName=emrCluster.getEmrClusterName();  List<EmrClusterCreationLogEntity> list=getEmrClusterCreationLogEntities(namespace,emrClusterDefinitionName,emrClusterName);  assertEquals("EMR cluster creation log size",1,list.size());  EmrClusterCreationLogEntity log=list.get(0);  assertEquals("EMR cluster creation log cluster ID",emrCluster.getId(),log.getEmrClusterId());  assertEquals("EMR cluster creation log namespace",namespace,log.getNamespace().getCode());  String expectedDefinitionXml=xmlHelper.objectToXml(expectedEmrClusterDefinition);  assertEquals("EMR cluster creation log definition",expectedDefinitionXml,log.getEmrClusterDefinition());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(processinginstructiongetdata.class,args);}  }
class C{  public static double determinant(double[][] matrix) throws Exception {  int rows=matrix.length;  for (int r=0; r < rows; r++) {    if (matrix[r].length != rows) {      throw new Exception("Cannot compute the determinant of a non-square matrix");    }  }  return recursiveDeterminant(matrix);}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public boolean canTraverseOutsideSubtree(){  if (null != m_left && m_left.canTraverseOutsideSubtree())   return true;  if (null != m_right && m_right.canTraverseOutsideSubtree())   return true;  return false;}  }
class C{  public void onFinishQuest(Player player){  getAndCheckAchievementsInCategory(player,Category.QUEST);  getAndCheckAchievementsInCategory(player,Category.QUEST_ADOS_ITEMS);  getAndCheckAchievementsInCategory(player,Category.QUEST_SEMOS_MONSTER);  getAndCheckAchievementsInCategory(player,Category.QUEST_KIRDNEH_ITEM);  getAndCheckAchievementsInCategory(player,Category.FRIEND);  getAndCheckAchievementsInCategory(player,Category.OBTAIN);  getAndCheckAchievementsInCategory(player,Category.PRODUCTION);  getAndCheckAchievementsInCategory(player,Category.QUEST_MITHRILBOURGH_ENEMY_ARMY);}  }
class C{  static <T>GeneralRange<T> range(Comparator<? super T> comparator,@Nullable T lower,BoundType lowerType,@Nullable T upper,BoundType upperType){  return new GeneralRange<T>(comparator,true,lower,lowerType,true,upper,upperType);}  }
class C{  public void startDocumentProcess(){  finishDocumentProcess();  documentTimerContext=MetricsFactory.getInstance().getTimer(pipelineName,DOCUMENT_TIMER).time();}  }
class C{  public void addResultChangedListener(ResultChangedListener l){  m_ResultPanel.addResultChangedListener(l);}  }
class C{  protected void checkRange(final double t,final boolean extrapolate){  QL.require(t >= 0.0,"negative time given");  QL.require(extrapolate || allowsExtrapolation() || t <= maxTime() || Closeness.isCloseEnough(t,maxTime()),"time is past max curve");}  }
class C{  public static boolean withinAWeek(long milli){  long diff=System.currentTimeMillis() - toMilliseconds(milli);  return diff < MILLI_SECONDS_IN_WEEK;}  }
class C{  public static void stop(){  stop(Thread.currentThread().getContextClassLoader());}  }
class C{  public void addToLog(String name,Object val){  toLog.add(name,val);}  }
class C{  @Override public void emitTuple(HashMap<K,Integer> tuple){  most.emit(tuple);}  }
class C{  public SnackbarWrapper buildWrapper(){  return new SnackbarWrapper(build());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public TDoubleHashSet(int initialCapacity,float loadFactor,TDoubleHashingStrategy strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  public Date dec(){  serialNumber--;  checkSerialNumber();  return this;}  }
class C{  public CursesUI(CursesWindow window){  ClientSingletonRepository.setUserInterface(this);  soundSystemFacade=new NoSoundFacade();  this.window=window;}  }
class C{  public SelectedNodes(){  update();}  }
class C{  public boolean mouseReleased(MouseEvent e){  dragging=false;  return false;}  }
class C{  public void initialize(int gsmSignalStrength,int gsmBitErrorRate,int cdmaDbm,int cdmaEcio,int evdoDbm,int evdoEcio,int evdoSnr,boolean gsm){  initialize(gsmSignalStrength,gsmBitErrorRate,cdmaDbm,cdmaEcio,evdoDbm,evdoEcio,evdoSnr,99,INVALID,INVALID,INVALID,INVALID,gsm);}  }
class C{  public ColtDataBox(TetradMatrix data){  this.data=data;}  }
class C{  protected SSLSocketInputStream(SSLSocketImpl owner){  this.owner=owner;}  }
class C{  public void simpleElement(XmlNamespace namespace,String name,List<Attribute> attrs,String value) throws IOException {  startElement(namespace,name,attrs,null);  characters(value);  endElement(namespace,name);}  }
class C{  private void noteUnconditionallyDereferencedNullValue(Location thisLocation,Map<ValueNumber,SortedSet<Location>> bugLocations,Map<ValueNumber,NullValueUnconditionalDeref> nullValueGuaranteedDerefMap,UnconditionalValueDerefSet derefSet,IsNullValue isNullValue,ValueNumber valueNumber){  if (DEBUG) {    System.out.println("%%% HIT for value number " + valueNumber + " @ "+ thisLocation);  }  Set<Location> unconditionalDerefLocationSet=derefSet.getUnconditionalDerefLocationSet(valueNumber);  if (unconditionalDerefLocationSet.isEmpty()) {    AnalysisContext.logError("empty set of unconditionally dereferenced locations at " + thisLocation.getHandle().getPosition() + " in "+ classContext.getClassDescriptor()+ "."+ method.getName()+ method.getSignature());    return;  }  NullValueUnconditionalDeref thisNullValueDeref=nullValueGuaranteedDerefMap.get(valueNumber);  if (thisNullValueDeref == null) {    thisNullValueDeref=new NullValueUnconditionalDeref();    nullValueGuaranteedDerefMap.put(valueNumber,thisNullValueDeref);  }  thisNullValueDeref.add(isNullValue,unconditionalDerefLocationSet);  if (thisLocation != null) {    SortedSet<Location> locationsForThisBug=bugLocations.get(valueNumber);    if (locationsForThisBug == null) {      locationsForThisBug=new TreeSet<Location>();      bugLocations.put(valueNumber,locationsForThisBug);    }    locationsForThisBug.add(thisLocation);  }}  }
class C{  public SQLiteSession(SQLiteConnectionPool connectionPool){  if (connectionPool == null) {    throw new IllegalArgumentException("connectionPool must not be null");  }  mConnectionPool=connectionPool;}  }
class C{  public byte[] readBytes() throws SQLException {  return (byte[])getNextAttribute();}  }
class C{  void insert(V val,K key){  ArrayList<K> list=map.get(val);  if (list == null) {    list=new ArrayList<K>(4);    map.put(cloneValue(val),list);  }  list.add(key);}  }
class C{  public DisruptionPotion(String unlocalizedName,DeityType deity,Potion potion){  super(unlocalizedName,deity);  this.potion=potion;}  }
class C{  public synchronized boolean isClosed(){  return journalWriter == null;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.xpath.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new LSDocumentBuilderFactory(JAXPDOMTestDocumentBuilderFactory.getConfiguration2());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  public String trimAudio(String path,double start,double length) throws Exception {  ArrayList<String> cmd=new ArrayList<String>();  File file=new File(path);  String outFile=file.getCanonicalPath() + "_trimmed.wav";  cmd.add(soxBin);  cmd.add(path);  cmd.add("-e");  cmd.add("signed-integer");  cmd.add("-b");  cmd.add("16");  cmd.add(outFile);  cmd.add("trim");  cmd.add(start + "");  if (length != -1)   cmd.add(length + "");  int rc=execSox(cmd,callback);  if (rc != 0) {    outFile=null;  }  if (file.exists())   return outFile; else   return null;}  }
class C{  public boolean isPlugAndPlay(){  return plugAndPlay;}  }
class C{  public static ArrayList<Map.Entry<String,String>> split(final String text){  ArrayList<Map.Entry<String,String>> a=new ArrayList<>(1 + text.length() / 4);  final StringBuilder o=new StringBuilder();  final StringBuilder l=new StringBuilder();  for (int i=0; i < text.length(); i++) {    final char c=text.charAt(i);    if (Character.isLetterOrDigit(c)) {      o.append(c);      l.append(Character.toLowerCase(c));      continue;    }    if (o.length() > 0) {      a.add(new AbstractMap.SimpleEntry<String,String>(l.toString(),o.toString()));      o.setLength(0);      l.setLength(0);    }  }  if (o.length() > 0) {    a.add(new AbstractMap.SimpleEntry<String,String>(l.toString(),o.toString()));    o.setLength(0);    l.setLength(0);  }  return a;}  }
class C{  public TerminalSize withRelative(TerminalSize delta){  return withRelative(delta.getColumns(),delta.getRows());}  }
class C{  public int readUTF8ByByteLength(char[] buffer,int offset,int byteLength) throws IOException {  int k=0;  for (int i=0; i < byteLength; i++) {    if (_readLength <= _readOffset) {      readBuffer();    }    int ch=_readBuffer[_readOffset++] & 0xff;    if (ch < 0x80) {      buffer[k++]=(char)ch;    } else     if ((ch & 0xe0) == 0xc0) {      int c2=read();      i+=1;      buffer[k++]=(char)(((ch & 0x1f) << 6) + (c2 & 0x3f));    } else {      int c2=read();      int c3=read();      i+=2;      buffer[k++]=(char)(((ch & 0x1f) << 12) + ((c2 & 0x3f) << 6) + ((c3 & 0x3f)));    }  }  return k;}  }
class C{  private void generateAndStoreDeviceID(){  String privateDeviceID=store.get(DEVICE_PRIVATE_ID_KEY);  String publicDeviceID=store.get(DEVICE_PUBLIC_ID_KEY);  if (privateDeviceID == null || publicDeviceID == null) {    if (privateDeviceID != publicDeviceID) {      if (privateDeviceID == null) {        Log.wtf(TAG,"Only one of private and public ID are stored! Public is stored, private is null.");      } else {        Log.wtf(TAG,"Only one of private and public ID are stored! Private is stored, public is null.");      }    }    AsymmetricCipherKeyPair keypair=Crypto.generateUserID();    privateDeviceID=bytesToBase64(Crypto.generatePrivateID(keypair));    publicDeviceID=bytesToBase64(Crypto.generatePublicID(keypair));    store.put(DEVICE_PRIVATE_ID_KEY,privateDeviceID);    store.put(DEVICE_PUBLIC_ID_KEY,publicDeviceID);  }}  }
class C{  public AtomTypeCondition(Ref<?> typeRef){  this.type=typeRef;}  }
class C{  public void visitApply(JCMethodInvocation tree){  Env<AttrContext> localEnv=env.dup(tree,env.info.dup());  List<Type> argtypes;  List<Type> typeargtypes=null;  Name methName=TreeInfo.name(tree.meth);  boolean isConstructorCall=methName == names._this || methName == names._super;  ListBuffer<Type> argtypesBuf=new ListBuffer<>();  if (isConstructorCall) {    if (checkFirstConstructorStat(tree,env)) {      localEnv.info.isSelfCall=true;      attribArgs(tree.args,localEnv,argtypesBuf);      argtypes=argtypesBuf.toList();      typeargtypes=attribTypes(tree.typeargs,localEnv);      Type site=env.enclClass.sym.type;      if (methName == names._super) {        if (site == syms.objectType) {          log.error(tree.meth.pos(),"no.superclass",site);          site=types.createErrorType(syms.objectType);        } else {          site=types.supertype(site);        }      }      if (site.hasTag(CLASS)) {        Type encl=site.getEnclosingType();        while (encl != null && encl.hasTag(TYPEVAR))         encl=encl.getUpperBound();        if (encl.hasTag(CLASS)) {          if (tree.meth.hasTag(SELECT)) {            JCTree qualifier=((JCFieldAccess)tree.meth).selected;            chk.checkRefType(qualifier.pos(),attribExpr(qualifier,localEnv,encl));          } else           if (methName == names._super) {            rs.resolveImplicitThis(tree.meth.pos(),localEnv,site,true);          }        } else         if (tree.meth.hasTag(SELECT)) {          log.error(tree.meth.pos(),"illegal.qual.not.icls",site.tsym);        }        if (site.tsym == syms.enumSym && allowEnums)         argtypes=argtypes.prepend(syms.intType).prepend(syms.stringType);        boolean selectSuperPrev=localEnv.info.selectSuper;        localEnv.info.selectSuper=true;        localEnv.info.pendingResolutionPhase=null;        Symbol sym=rs.resolveConstructor(tree.meth.pos(),localEnv,site,argtypes,typeargtypes);        localEnv.info.selectSuper=selectSuperPrev;        TreeInfo.setSymbol(tree.meth,sym);        Type mpt=newMethodTemplate(resultInfo.pt,argtypes,typeargtypes);        checkId(tree.meth,site,sym,localEnv,new ResultInfo(MTH,mpt));      }    }    result=tree.type=syms.voidType;  } else {    int kind=attribArgs(tree.args,localEnv,argtypesBuf);    argtypes=argtypesBuf.toList();    typeargtypes=attribAnyTypes(tree.typeargs,localEnv);    Type mpt=newMethodTemplate(resultInfo.pt,argtypes,typeargtypes);    localEnv.info.pendingResolutionPhase=null;    Type mtype=attribTree(tree.meth,localEnv,new ResultInfo(kind,mpt,resultInfo.checkContext));    Type restype=mtype.getReturnType();    if (restype.hasTag(WILDCARD))     throw new AssertionError(mtype);    Type qualifier=(tree.meth.hasTag(SELECT)) ? ((JCFieldAccess)tree.meth).selected.type : env.enclClass.sym.type;    restype=adjustMethodReturnType(qualifier,methName,argtypes,restype);    chk.checkRefTypes(tree.typeargs,typeargtypes);    result=check(tree,capture(restype),VAL,resultInfo);  }  chk.validate(tree.typeargs,localEnv);}  }
class C{  private AppliedMigration createAppliedMigration(int version){  return createAppliedMigration(version,"x");}  }
class C{  public float dotProduct(Vector3f inputVec){  return points[0] * inputVec.points[0] + points[1] * inputVec.points[1] + points[2] * inputVec.points[2];}  }
class C{  public Object eval(Reader reader,ScriptEngine engine) throws ScriptException {  return engine.eval(reader);}  }
class C{  public byte[] compileClass(final String className,final String classCode) throws IOException {  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();  JavaCompiler javaCompiler=ToolProvider.getSystemJavaCompiler();  OutputStreamJavaFileManager<JavaFileManager> fileManager=new OutputStreamJavaFileManager<JavaFileManager>(javaCompiler.getStandardFileManager(null,null,null),byteArrayOutputStream);  List<JavaFileObject> fileObjects=new ArrayList<JavaFileObject>();  fileObjects.add(new JavaSourceFromString(className,classCode));  List<String> options=Arrays.asList("-classpath",this.classPath);  DiagnosticCollector<JavaFileObject> diagnostics=new DiagnosticCollector<JavaFileObject>();  if (!javaCompiler.getTask(null,fileManager,diagnostics,options,null,fileObjects).call()) {    StringBuilder errorMsg=new StringBuilder();    for (    Diagnostic d : diagnostics.getDiagnostics()) {      String err=String.format("Compilation error: Line %d - %s%n",d.getLineNumber(),d.getMessage(null));      errorMsg.append(err);      System.err.print(err);    }    throw new IOException(errorMsg.toString());  }  return byteArrayOutputStream.toByteArray();}  }
class C{  public LiterallySignedStringMap(final Object2LongFunction<? extends CharSequence> function,final ObjectList<? extends MutableString> list){  this.function=function;  this.list=list;  size=list.size();  for (int i=0; i < size; i++)   if (function.getLong(list.get(i)) != i)   throw new IllegalArgumentException("Function and list do not agree");  defRetValue=-1;}  }
class C{  private void updateMultiEdges(final IViewNode<?> node){  if (m_multiEdgeUpdatingEnabled) {    if (m_graph.getSettings().getEdgeSettings().getDisplayMultipleEdgesAsOne()) {      MultiEdgeHider.hideMultipleEdgesInternal(m_graph.getNode(node));    } else {      MultiEdgeHider.unhideMultipleEdgesInternal(m_graph);    }  }}  }
class C{  public synchronized void run(){  if (component != null) {    TextUI mapper=component.getUI();    if (mapper != null && lastDoc == component.getDocument()) {      int len=p0.size();      for (int i=0; i < len; i++) {        mapper.damageRange(component,p0.get(i).getOffset(),p1.get(i).getOffset());      }    }  }  p0.clear();  p1.clear();  lastDoc=null;}  }
class C{  public RoundedTransformationBuilder cornerRadiusBottomRight(float radiusPx){  mCornerRadius[3]=radiusPx;  return this;}  }
class C{  public static UserModificationConstraintException convertToApi(org.oscm.internal.types.exception.UserModificationConstraintException oldEx){  org.oscm.internal.types.exception.beans.UserModificationConstraintExceptionBean bean=(org.oscm.internal.types.exception.beans.UserModificationConstraintExceptionBean)getFaultInfo(oldEx);  UserModificationConstraintExceptionBean v13Bean=convertBeanToApi(bean,UserModificationConstraintExceptionBean.class);  if (bean != null) {    UserModificationConstraintException.Reason v13Reason=EnumConverter.convert(bean.getReason(),UserModificationConstraintException.Reason.class);    v13Bean.setReason(v13Reason);  }  return newApiException(UserModificationConstraintException.class,getExceptionMessage(oldEx),v13Bean,oldEx.getStackTrace());}  }
class C{  public DeployableMonitorStub(String deployableName){  this.deployableName=deployableName;}  }
class C{  public Builder(TweetUi tweetUi){  if (tweetUi == null) {    throw new IllegalArgumentException("TweetUi instance must not be null");  }  this.tweetUi=tweetUi;}  }
class C{  public DefaultRequest itemQuantity(Integer value){  setInteger(ITEM_QUANTITY,value);  return this;}  }
class C{  public static int size(){  return protocol.size();}  }
class C{  public int add(BTDownloadDataLine tl,int row){  if (!allow(tl)) {    HIDDEN.add(tl);    return -1;  } else {    return super.add(tl,row);  }}  }
class C{  public Map<String,List<String>> parameters(){  if (params == null) {    if (hasPath) {      int pathLength=path().length();      if (uri.length() == pathLength) {        return Collections.emptyMap();      }      decodeParams(uri.substring(pathLength + 1));    } else {      if (uri.isEmpty()) {        return Collections.emptyMap();      }      decodeParams(uri);    }  }  return params;}  }
class C{  public NokiaOperatorLogo(OtaBitmap otaBitmap,int mcc,int mnc){  this(otaBitmap.getBytes(),mcc,mnc);}  }
class C{  @SuppressWarnings("unchecked") private TypeAlias loadTypeAlias(String name,Map<String,Object> m,Scope parent,List<TypeParameter> existing){  TypeAlias alias;  if (m.get(KEY_METATYPE) instanceof TypeAlias) {    alias=(TypeAlias)m.get(KEY_METATYPE);    if (m.size() == 1) {      return alias;    }  } else {    Declaration maybe=parent.getDirectMember(name,null,false);    if (maybe == null) {      alias=new TypeAlias();      alias.setContainer(parent);      alias.setScope(parent);      alias.setName(name);      alias.setUnit(u2);      setAnnotations(alias,(Integer)m.remove(KEY_PACKED_ANNS),(Map<String,Object>)m.remove(KEY_ANNOTATIONS));      if (parent == this) {        u2.addDeclaration(alias);      }      parent.addMember(alias);      m.put(KEY_METATYPE,alias);    } else     if (maybe instanceof TypeAlias) {      alias=(TypeAlias)maybe;    } else {      throw new IllegalStateException(maybe + " should be an TypeAlias");    }  }  List<Map<String,Object>> listOfMaps=(List<Map<String,Object>>)m.get(KEY_TYPE_PARAMS);  final List<TypeParameter> tparms;  if (listOfMaps != null && alias.getTypeParameters().size() < listOfMaps.size()) {    tparms=parseTypeParameters(listOfMaps,alias,existing);    alias.setTypeParameters(tparms);  } else {    tparms=alias.getTypeParameters();  }  final List<TypeParameter> allparms=JsonPackage.merge(tparms,existing);  if (alias.getExtendedType() == null) {    alias.setExtendedType(getTypeFromJson((Map<String,Object>)m.get("$alias"),parent instanceof Declaration ? (Declaration)parent : null,allparms));  }  if (m.containsKey(KEY_SELF_TYPE)) {    for (    TypeParameter _tp : tparms) {      if (_tp.getName().equals(m.get(KEY_SELF_TYPE))) {        alias.setSelfType(_tp.getType());      }    }  }  if (m.containsKey("of")) {    alias.setCaseTypes(parseTypeList((List<Map<String,Object>>)m.remove("of"),allparms));  }  if (m.containsKey(KEY_SATISFIES)) {    List<Map<String,Object>> stypes=(List<Map<String,Object>>)m.remove(KEY_SATISFIES);    alias.setSatisfiedTypes(parseTypeList(stypes,allparms));  }  m.clear();  m.put(KEY_METATYPE,alias);  return alias;}  }
class C{  public float length(){  return MathUtil.sqrt(length2());}  }
class C{  public boolean drawImage(Image img,AffineTransform xform,ImageObserver obs){  boolean retVal=true;  if (xform.getDeterminant() != 0) {    AffineTransform inverseTransform=null;    try {      inverseTransform=xform.createInverse();    } catch (    NoninvertibleTransformException e) {      throw new Error(e.getMessage());    }    gc.transform(xform);    retVal=drawImage(img,0,0,null);    gc.transform(inverseTransform);  } else {    AffineTransform savTransform=new AffineTransform(gc.getTransform());    gc.transform(xform);    retVal=drawImage(img,0,0,null);    gc.setTransform(savTransform);  }  return retVal;}  }
class C{  private void updateRingColor(float interpolatedTime,Ring ring){  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.380 -0400",hash_original_method="BF2D432EB127F7CFDFED5801805EF7D3",hash_generated_method="21C31E4611E532237AF4689D6DC78AA9") public BoundedInputStream(InputStream in,long size){  this.max=size;  this.in=in;}  }
class C{  public static String modifyCart(HttpServletRequest request,HttpServletResponse response){  HttpSession session=request.getSession();  ShoppingCart cart=getCartObject(request);  Locale locale=UtilHttp.getLocale(request);  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  Security security=(Security)request.getAttribute("security");  ShoppingCartHelper cartHelper=new ShoppingCartHelper(null,dispatcher,cart);  String controlDirective;  Map<String,Object> result;  Map<String,Object> paramMap=UtilHttp.getParameterMap(request);  String removeSelectedFlag=request.getParameter("removeSelected");  String selectedItems[]=request.getParameterValues("selectedItem");  boolean removeSelected=("true".equals(removeSelectedFlag) && selectedItems != null && selectedItems.length > 0);  result=cartHelper.modifyCart(security,userLogin,paramMap,removeSelected,selectedItems,locale);  controlDirective=processResult(result,request);  if (controlDirective.equals(ERROR)) {    return "error";  } else {    return "success";  }}  }
class C{  public SoftValueHashMap(int initialCapacity){  hash=new HashMap(initialCapacity);}  }
class C{  public static MobileDoc create(boolean plain,String title,boolean javaClient){  MobileDoc doc=new MobileDoc();  doc.setUp(plain,javaClient,title);  return doc;}  }
class C{  public Integer analyze(String partitionFullPath){  for (  PartitionLayout pl : this.layoutList) {    Pattern p=Pattern.compile(pl.getRegex());    Matcher m=p.matcher(partitionFullPath);    if (m.matches()) {      return pl.getLayoutId();    }  }  return null;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TANNOTATION_STRING_ARGUMENT__VALUE:    return getValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public double optDouble(String key,double defaultValue){  try {    return this.getDouble(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  @GwtIncompatible("Array.newInstance(Class, int)") public static <T extends Object>T[] concat(T[] first,T[] second,Class<T> type){  T[] result=newArray(type,first.length + second.length);  System.arraycopy(first,0,result,0,first.length);  System.arraycopy(second,0,result,first.length,second.length);  return result;}  }
