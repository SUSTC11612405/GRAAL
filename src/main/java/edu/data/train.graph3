class C{  public void test_setBooleanLjava_lang_ObjectIZ(){  boolean[] x={false};  boolean thrown=false;  try {    Array.setBoolean(x,0,true);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertTrue("Failed to set correct value",Array.getBoolean(x,0));  try {    Array.setBoolean(new Object(),0,false);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    Array.setBoolean(x,4,false);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    Array.setBoolean(null,0,true);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  public static boolean isConnectedWifi(Context context){  NetworkInfo info=Connectivity.getNetworkInfo(context);  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_WIFI);}  }
class C{  private void checkValid(Position pos,Move move){  assertTrue(move != null);  MoveGen.MoveList moveList=new MoveGen().pseudoLegalMoves(pos);  MoveGen.removeIllegal(pos,moveList);  boolean contains=false;  for (int mi=0; mi < moveList.size; mi++)   if (moveList.m[mi].equals(move)) {    contains=true;    break;  }  assertTrue(contains);}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,byte value){  buffer.append(value);}  }
class C{  public void onGoogleLoginError(final Exception error){  Logger.e(TAG,"GOOGLE LOGIN ERROR");}  }
class C{  public boolean isOpposed(ECMInfo other){  return (owner == null) || (other.getOwner() == null) || owner.isEnemyOf(other.getOwner());}  }
class C{  private String neededPermissionForFeature(String feature){  String neededPermission=null;  if (FEATURE_KEY_PREF_CONTACTS.equals(feature)) {    neededPermission=Manifest.permission.READ_CONTACTS;  } else   if (FEATURE_KEY_PREF_DIALER.equals(feature)) {    neededPermission=Manifest.permission.WRITE_CALL_LOG;  }  return neededPermission;}  }
class C{  public boolean booleanPrimitiveValueOfParameterNamed(final String parameterName){  final Boolean value=this.fromApiJsonHelper.extractBooleanNamed(parameterName,this.parsedQuery);  return (Boolean)ObjectUtils.defaultIfNull(value,Boolean.FALSE);}  }
class C{  public static void v(String tag,String msg){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg);}  }
class C{  public static ImageRequestBuilder newBuilderWithSource(Uri uri){  return new ImageRequestBuilder().setSource(uri);}  }
class C{  private int decodeGaincData(){  int ret;  for (int chNum=0; chNum < numChannels; chNum++) {    for (int i=0; i < ATRAC3P_SUBBANDS; i++) {      ctx.channels[chNum].gainData[i].clear();    }    if (br.readBool()) {      int codedSubbands=br.read(4) + 1;      if (br.readBool()) {        ctx.channels[chNum].numGainSubbands=br.read(4) + 1;      } else {        ctx.channels[chNum].numGainSubbands=codedSubbands;      }      ret=decodeGaincNPoints(chNum,codedSubbands);      if (ret < 0) {        return ret;      }      ret=decodeGaincLevels(chNum,codedSubbands);      if (ret < 0) {        return ret;      }      ret=decodeGaincLocCodes(chNum,codedSubbands);      if (ret < 0) {        return ret;      }      if (codedSubbands > 0) {        for (int sb=codedSubbands; sb < ctx.channels[chNum].numGainSubbands; sb++) {          ctx.channels[chNum].gainData[sb].copy(ctx.channels[chNum].gainData[sb - 1]);        }      }    } else {      ctx.channels[chNum].numGainSubbands=0;    }  }  return 0;}  }
class C{  static public void qsort(double[] array){  qsort_h(array,0,array.length - 1);}  }
class C{  public boolean isEmpty(){  return bits == 0;}  }
class C{  public MutableLeafData(final int branchingFactor,final ILeafData src){  keys=new MutableKeyBuffer(branchingFactor + 1,src.getKeys());  vals=new MutableValueBuffer(branchingFactor + 1,src.getValues());  versionTimestamps=(src.hasVersionTimestamps() ? new long[branchingFactor + 1] : null);  deleteMarkers=(src.hasDeleteMarkers() ? new boolean[branchingFactor + 1] : null);  rawRecords=(src.hasRawRecords() ? new boolean[branchingFactor + 1] : null);  final int nkeys=keys.size();  if (versionTimestamps != null) {    for (int i=0; i < nkeys; i++) {      versionTimestamps[i]=src.getVersionTimestamp(i);    }    minimumVersionTimestamp=src.getMinimumVersionTimestamp();    maximumVersionTimestamp=src.getMaximumVersionTimestamp();  } else {    minimumVersionTimestamp=Long.MAX_VALUE;    maximumVersionTimestamp=Long.MIN_VALUE;  }  if (deleteMarkers != null) {    for (int i=0; i < nkeys; i++) {      deleteMarkers[i]=src.getDeleteMarker(i);    }  }  if (rawRecords != null) {    for (int i=0; i < nkeys; i++) {      rawRecords[i]=src.getRawRecord(i) != IRawStore.NULL;    }  }}  }
class C{  public boolean isI_IsImported(){  Object oo=get_Value(COLUMNNAME_I_IsImported);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static int nextPowerOfTwo(int x){  if (x == 0)   return 1;  x--;  x|=x >> 1;  x|=x >> 2;  x|=x >> 4;  x|=x >> 8;  return (x | x >> 16) + 1;}  }
class C{  public static ObjectAnimator ofFloat(Object target,String propertyName,float... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setFloatValues(values);  return anim;}  }
class C{  public static int calculateReward(Player player){  int moneys=0;  int kills=0;  for (int i=0; i < RAT_TYPES.size(); i++) {    try {      final String killed=player.getQuest(QUEST_SLOT,i + 1);      if (killed != null) {        kills=Integer.decode(killed);      }    } catch (    NumberFormatException nfe) {    }    moneys=moneys + kills * RAT_REWARDS.get(i);  }  return (moneys);}  }
class C{  public void copyContent(){  StringSelection selection;  Clipboard clipboard;  selection=getTable().getStringSelection();  if (selection == null) {    return;  }  clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();  clipboard.setContents(selection,selection);}  }
class C{  public AngularObject add(String name,Object o,String noteId,String paragraphId,boolean emit){  AngularObject ao=createNewAngularObject(name,o,noteId,paragraphId);synchronized (registry) {    Map<String,AngularObject> noteLocalRegistry=getRegistryForKey(noteId,paragraphId);    noteLocalRegistry.put(name,ao);    if (listener != null && emit) {      listener.onAdd(interpreterId,ao);    }  }  return ao;}  }
class C{  public DisqusClient(ApiConfig config,Context context){  super(config);  mcontent=context;  if (instance_am == null) {    instance_am=createAuthenticationManager(context);  }}  }
class C{  public FunctionDeclaration(ImportStack importStack,Context context,String signature,Object object,Method method,List<ArgumentConverter> argumentConverters){  this.importStack=importStack;  this.context=context;  this.signature=signature;  this.object=object;  this.method=method;  this.argumentConverters=argumentConverters;}  }
class C{  public List<RawProperty> removeExperimentalProperties(String name){  List<RawProperty> all=getExperimentalProperties();  List<RawProperty> toRemove=new ArrayList<RawProperty>();  for (  RawProperty property : all) {    if (property.getName().equalsIgnoreCase(name)) {      toRemove.add(property);    }  }  all.removeAll(toRemove);  return Collections.unmodifiableList(toRemove);}  }
class C{  public int typicalIndsProduced(){  return (tossSecondParent ? 1 : INDS_PRODUCED);}  }
class C{  public static String asUrl(File file){  return PROTOCOL + file.getAbsolutePath();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:13.410 -0400",hash_original_method="25736550470809040A3F8C62976339C4",hash_generated_method="B61E8F76A04C239FB09D418D5B87F38F") public Method element(){  return element;}  }
class C{  int read(byte[] buffer,int offset,int length) throws IOException {  throw new UnsupportedOperationException();}  }
class C{  private String replacePlaceholders(String query,Map<String,String> replacements){  String resultQuery=query;  for (  Map.Entry<String,String> entry : replacements.entrySet()) {    resultQuery=resultQuery.replace(entry.getKey(),entry.getValue());  }  return resultQuery;}  }
class C{  public static void annotateSupers(List<AnnotatedDeclaredType> supertypes,TypeElement subtypeElement){  SuperTypeApplier.annotateSupers(supertypes,subtypeElement);}  }
class C{  public void close() throws java.io.IOException {  out.writeBytes(PREFIX);  out.writeBytes(boundary);  out.writeBytes(PREFIX);  out.writeBytes(NEWLINE);  out.flush();  out.close();}  }
class C{  private void processMethods(final Object component,final Context context,final ContextDestroyer contextDestroyer){  Class<?> componentClass=component.getClass();  while (componentClass != null && !componentClass.equals(Object.class)) {    final Method[] methods=ClassReflection.getDeclaredMethods(componentClass);    if (methods != null && methods.length > 0) {      processMethods(component,methods,context,contextDestroyer);    }    componentClass=componentClass.getSuperclass();  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  int row, col;  int nrows, ncols;  double x, y, z;  int i;  int progress=0;  int numPoints=0;  int lineNum=0;  int nlines=0;  double maxDist=Double.POSITIVE_INFINITY;  double minX=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  double north, south, east, west;  double resolution=1;  String delimiter=" ";  boolean firstLineHeader=false;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  List<KdTree.Entry<Double>> results;  double noData=-32768;  double northing, easting;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  firstLineHeader=Boolean.parseBoolean(args[1]);  outputHeader=args[2];  resolution=Double.parseDouble(args[3]);  if (!args[4].equalsIgnoreCase("not specified")) {    maxDist=Double.parseDouble(args[4]);  }  if ((inputFilesString.length() <= 0) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    if (maxDist < Double.POSITIVE_INFINITY) {      maxDist=maxDist * maxDist;    }    updateProgress("Counting the number of points:",0);    numPoints=0;    for (i=0; i < numPointFiles; i++) {      nlines=countLinesInFile(pointFiles[i]);      if (firstLineHeader) {        numPoints+=nlines - 1;      } else {        numPoints+=nlines;      }    }    KdTree<Double> pointsTree=new KdTree.SqrEuclid<Double>(2,new Integer(numPoints));    nlines=0;    for (i=0; i < numPointFiles; i++) {      DataInputStream in=null;      BufferedReader br=null;      try {        FileInputStream fstream=new FileInputStream(pointFiles[i]);        in=new DataInputStream(fstream);        br=new BufferedReader(new InputStreamReader(in));        String line;        String[] str;        lineNum=1;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if ((lineNum > 1 || !firstLineHeader) && (str.length >= 3)) {            x=Double.parseDouble(str[0]);            y=Double.parseDouble(str[1]);            z=Double.parseDouble(str[2]);            double[] entry={y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          lineNum++;          nlines++;          progress=(int)(100d * nlines / numPoints);          updateProgress("Reading point data:",progress);        }        in.close();        br.close();      } catch (      java.io.IOException e) {        System.err.println("Error: " + e.getMessage());      } finally {        try {          if (in != null || br != null) {            in.close();            br.close();          }        } catch (        java.io.IOException ex) {        }      }    }    west=minX - 0.5 * resolution;    north=maxY + 0.5 * resolution;    nrows=(int)(Math.ceil((north - minY) / resolution));    ncols=(int)(Math.ceil((maxX - west) / resolution));    south=north - nrows * resolution;    east=west + ncols * resolution;    fw=new FileWriter(outputHeader,false);    bw=new BufferedWriter(fw);    out=new PrintWriter(bw,true);    str1="Min:\t" + Double.toString(Integer.MAX_VALUE);    out.println(str1);    str1="Max:\t" + Double.toString(Integer.MIN_VALUE);    out.println(str1);    str1="North:\t" + Double.toString(north);    out.println(str1);    str1="South:\t" + Double.toString(south);    out.println(str1);    str1="East:\t" + Double.toString(east);    out.println(str1);    str1="West:\t" + Double.toString(west);    out.println(str1);    str1="Cols:\t" + Integer.toString(ncols);    out.println(str1);    str1="Rows:\t" + Integer.toString(nrows);    out.println(str1);    str1="Data Type:\t" + "float";    out.println(str1);    str1="Z Units:\t" + "not specified";    out.println(str1);    str1="XY Units:\t" + "not specified";    out.println(str1);    str1="Projection:\t" + "not specified";    out.println(str1);    str1="Data Scale:\tcontinuous";    out.println(str1);    str1="Preferred Palette:\t" + "spectrum.pal";    out.println(str1);    str1="NoData:\t" + noData;    out.println(str1);    if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {      str1="Byte Order:\t" + "LITTLE_ENDIAN";    } else {      str1="Byte Order:\t" + "BIG_ENDIAN";    }    out.println(str1);    out.close();    WhiteboxRaster image=new WhiteboxRaster(outputHeader,"rw");    double halfResolution=resolution / 2;    for (row=0; row < nrows; row++) {      for (col=0; col < ncols; col++) {        easting=(col * resolution) + (west + halfResolution);        northing=(north - halfResolution) - (row * resolution);        double[] entry={northing,easting};        results=pointsTree.nearestNeighbor(entry,1,true);        if (results.get(0).distance < maxDist) {          image.setValue(row,col,results.get(0).value);        } else {          image.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nrows - 1));      updateProgress("Interpolating point data:",progress);    }    image.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    image.addMetadataEntry("Created on " + new Date());    image.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public RotateFilter(float angle){  this(angle,true);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DomPackage.VARIABLE_REFERENCE__VARIABLE_NAME:    setVariableName((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static void writeStaticField(final Class<?> cls,final String fieldName,final Object value) throws IllegalAccessException {  FieldUtils.writeStaticField(cls,fieldName,value,false);}  }
class C{  static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {  try {    Class providerClass=findProviderClass(className,cl,doFallback);    Object instance=providerClass.newInstance();    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return instance;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  public void calcMajorTick(){  majorTick=10;  majorTickCount=(int)Math.round(log10(maxTick / minTick)) + 1;}  }
class C{  protected void finalize() throws Throwable {  this.systemID=null;  this.encapsulatedException=null;  super.finalize();}  }
class C{  public TFSFolder(final ExtendedItem extendedItem){  this(extendedItem,null);}  }
class C{  public NGramTokenizer(int n,Tokenizer base,boolean allSubN){  if (n <= 0)   throw new IllegalArgumentException("Number of n-grams must be positive, not " + n);  this.n=n;  this.base=base;  this.allSubN=allSubN;}  }
class C{  protected boolean accept(XSLTVisitor visitor){  return visitor.visitInstruction(this);}  }
class C{  public void query(String query){}  }
class C{  public void push(final int a){  if (pointer >= stack.length) {    final int[] newStack=new int[(int)(stack.length * 1.5)];    System.arraycopy(stack,0,newStack,0,stack.length);    stack=newStack;  }  stack[pointer]=a;  pointer++;}  }
class C{  private HttpEntity paramsToEntity(RequestParams params,ResponseHandlerInterface responseHandler){  HttpEntity entity=null;  try {    if (params != null) {      entity=params.getEntity(responseHandler);    }  } catch (  IOException e) {    if (responseHandler != null) {      responseHandler.sendFailureMessage(0,null,null,e);    } else {      e.printStackTrace();    }  }  return entity;}  }
class C{  public void shuffle(){  Random random=new Random();  for (int i=size() - 1; i > 0; i--) {    int j=random.nextInt(i);    swapCards(i,j);  }}  }
class C{  public void readCommandLine(String[] args){  String key=null;  String value="";  for (int i=0; i < args.length; i++) {    if (args[i].startsWith("-")) {      if (key != null) {        put(key,value);      }      key=args[i].substring(1);      int ik=key.indexOf('=');      if (ik >= 0) {        value=key.substring(ik + 1);        key=key.substring(0,ik).toLowerCase();      } else {        key=key.toLowerCase();        value=NULL;      }    } else {      if (value == NULL) {        value=args[i];      } else {        value+=(" " + args[i]);      }    }  }  if (key != null) {    put(key,value);  }}  }
class C{  public CubeHash224(){}  }
class C{  public void swap(int original,int newPosition){  Song temp=mSongs.get(original);  Song newSong=mSongs.get(newPosition);  mSongs.set(original,newSong);  mSongs.set(newPosition,temp);  int tempVis=mVisible.get(original);  mVisible.set(original,mVisible.get(newPosition));  mVisible.set(newPosition,tempVis);  int tempId=mIds.get(original);  mIds.set(original,mIds.get(newPosition));  mIds.set(newPosition,tempId);  super.notifyDataSetChanged();}  }
class C{  public SignificantTermsBuilder field(String field){  this.field=field;  return this;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public BubbleTransition(int duration,String componentName){  this(duration);  this.componentName=componentName;}  }
class C{  public Object clone(){  OVector clone=null;  try {    clone=(OVector)super.clone();  } catch (  Exception e) {    System.err.println("Error cloning " + getClass().getName() + ":");    e.printStackTrace();    System.exit(1);  }  clone.vector=(Object[])vector.clone();  return clone;}  }
class C{  void remove(String filename){  if (debug) {    System.err.println("Removing " + filename);  }  new File(filename).delete();  if (new File(filename).exists()) {    throw new RuntimeException("Error deleting " + filename);  }}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == ReferencingElement_IM.class) {switch (derivedFeatureID) {case ImPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM__REWIRED_TARGET:      return ImPackage.REFERENCING_ELEMENT_IM__REWIRED_TARGET;default :    return -1;}}if (baseClass == ReferencingElementExpression_IM.class) {switch (derivedFeatureID) {default :  return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  private DefaultJavaType createType(TypeDef typeDef,int dimensions){  if (typeDef == null) {    return null;  }  return TypeAssembler.createUnresolved(typeDef,dimensions,classStack.isEmpty() ? source : classStack.getFirst());}  }
class C{  public ConfigureXmlEntityExpansionDialog_NB(XmlEntityExpansion xmlEntityExpansion){  this.xmlEntityExpansion=xmlEntityExpansion;  initComponents();  final IterateModel numberOfEntitiesIterator=xmlEntityExpansion.getNumberOfEntitiesIterator();  configureNumberOfEntities.setStartAt(String.valueOf(numberOfEntitiesIterator.getStartAt()));  configureNumberOfEntities.setStopAt(String.valueOf(numberOfEntitiesIterator.getStopAt()));  configureNumberOfEntities.setIncrement(String.valueOf(numberOfEntitiesIterator.getIncrement()));  configureNumberOfEntities.setIterateStrategie(numberOfEntitiesIterator.getIterateStrategie());  final IterateModel numberOfTagsIterator=xmlEntityExpansion.getNumberOfEntityElementsIterator();  configureNumberOfTags.setStartAt(String.valueOf(numberOfTagsIterator.getStartAt()));  configureNumberOfTags.setStopAt(String.valueOf(numberOfTagsIterator.getStopAt()));  configureNumberOfTags.setIncrement(String.valueOf(numberOfTagsIterator.getIncrement()));  configureNumberOfTags.setIterateStrategie(numberOfTagsIterator.getIterateStrategie());}  }
class C{  static public short unpackShort(final InputStream is) throws IOException {  short b=(short)readByte(is);  short v;  if ((b & 0x80) != 0) {    v=(short)((b & 0x7f) << 8);    b=readByte(is);    v|=(b & 0xff);  } else {    v=b;  }  return (short)v;}  }
class C{  private void action_loadTree(){  KeyNamePair tree=treeField.getSelectedItem().toKeyNamePair();  log.info("Tree=" + tree);  if (tree.getKey() <= 0) {    SimpleListModel tmp=new SimpleListModel();    centerList.setItemRenderer(tmp);    centerList.setModel(tmp);    return;  }  m_tree=new MTree(Env.getCtx(),tree.getKey(),null);  cbAllNodes.setSelected(m_tree.isAllNodes());  bAddAll.setEnabled(!m_tree.isAllNodes());  bAdd.setEnabled(!m_tree.isAllNodes());  bDelete.setEnabled(!m_tree.isAllNodes());  bDeleteAll.setEnabled(!m_tree.isAllNodes());  String fromClause=m_tree.getSourceTableName(false);  String columnNameX=m_tree.getSourceTableName(true);  String actionColor=m_tree.getActionColorName();  SimpleListModel model=new SimpleListModel();  ArrayList<ListItem> items=getTreeItemData();  for (  ListItem item : items)   model.addElement(item);  log.config("#" + model.getSize());  centerList.setItemRenderer(model);  centerList.setModel(model);  try {    centerTree.setModel(null);  } catch (  Exception e) {  }  if (centerTree.getTreecols() != null)   centerTree.getTreecols().detach();  if (centerTree.getTreefoot() != null)   centerTree.getTreefoot().detach();  if (centerTree.getTreechildren() != null)   centerTree.getTreechildren().detach();  SimpleTreeModel.initADTree(centerTree,m_tree.getAD_Tree_ID(),m_WindowNo);}  }
class C{  public void testPeek(){  LinkedBlockingQueue q=populatedQueue(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(i,q.peek());    assertEquals(i,q.poll());    assertTrue(q.peek() == null || !q.peek().equals(i));  }  assertNull(q.peek());}  }
class C{  public boolean isInitializing(){  return getState().isInitializing();}  }
class C{  public PMElement elementAt(int i){  return gr.elementAt(i);}  }
class C{  public void emitMessage(String emitType,JSONObject jsonObject){  if (mSocket != null)   mSocket.emit(emitType,jsonObject);}  }
class C{  void allocPaddle(){  BasicAlignedRect rect=new BasicAlignedRect();  rect.setScale(DEFAULT_PADDLE_WIDTH * mPaddleSizeMultiplier,ARENA_HEIGHT * PADDLE_HEIGHT_PERC);  rect.setColor(1.0f,1.0f,1.0f);  rect.setPosition(ARENA_WIDTH / 2.0f,ARENA_HEIGHT * PADDLE_VERTICAL_PERC);  mPaddle=rect;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DatatypePackage.TYPE__NAME:    setName((String)newValue);  return;case DatatypePackage.TYPE__NAMESPACE:setNamespace((String)newValue);return;case DatatypePackage.TYPE__VERSION:setVersion((String)newValue);return;case DatatypePackage.TYPE__REFERENCES:getReferences().clear();getReferences().addAll((Collection<? extends ModelReference>)newValue);return;case DatatypePackage.TYPE__DESCRIPTION:setDescription((String)newValue);return;case DatatypePackage.TYPE__DISPLAYNAME:setDisplayname((String)newValue);return;case DatatypePackage.TYPE__CATEGORY:setCategory((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean isAttribute(){  return false;}  }
class C{  void loadMethodIds() throws IOException {  int count=mHeaderItem.methodIdsSize;  mMethodIds=new MethodIdItem[count];  seek(mHeaderItem.methodIdsOff);  for (int i=0; i < count; i++) {    mMethodIds[i]=new MethodIdItem();    mMethodIds[i].classIdx=readShort() & 0xffff;    mMethodIds[i].protoIdx=readShort() & 0xffff;    mMethodIds[i].nameIdx=readInt();  }}  }
class C{  public long next(){  moveToNextIndex();  return _hash._set[_index];}  }
class C{  public static void checkState(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  public boolean requiresFreshAST(){  return fRequiresFreshAST;}  }
class C{  public BigdataValueSerializer(final ValueFactory valueFactory){  if (valueFactory == null)   throw new IllegalArgumentException();  this.valueFactory=valueFactory;  this.uc=new UnicodeHelper(new NoCompressor());}  }
class C{  public final void referencesMustNotBeFrozen(){  if (referencesFrozen) {    throw new CompilerError("referencesMustNotBeFrozen " + this);  }}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Builder addListenUrl(String url){  if (UrlUtil.isUrl(url)) {    if (mListenUrls == null) {      mListenUrls=new HashSet<String>();    }    mListenUrls.add(url);  }  return this;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("UasDaoLdapUserRecA[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_ldapGuid = ").append(m_ldapGuid);  buffer.append(", m_ldapFullName = ").append(m_ldapFullName);  buffer.append("]");  return buffer.toString();}  }
class C{  public static <T>void ifPresent(T primary,Consumer<? super T> consumer){  if (primary != null) {    consumer.accept(primary);  }}  }
class C{  private int mapNSTokens(String pat,int startSubstring,int posOfNSSep,int posOfScan) throws javax.xml.transform.TransformerException {  String prefix="";  if ((startSubstring >= 0) && (posOfNSSep >= 0)) {    prefix=pat.substring(startSubstring,posOfNSSep);  }  String uName;  if ((null != m_namespaceContext) && !prefix.equals("*") && !prefix.equals("xmlns")) {    try {      if (prefix.length() > 0)       uName=((PrefixResolver)m_namespaceContext).getNamespaceForPrefix(prefix); else {        if (false) {          addToTokenQueue(":");          String s=pat.substring(posOfNSSep + 1,posOfScan);          if (s.length() > 0)           addToTokenQueue(s);          return -1;        } else {          uName=((PrefixResolver)m_namespaceContext).getNamespaceForPrefix(prefix);        }      }    } catch (    ClassCastException cce) {      uName=m_namespaceContext.getNamespaceForPrefix(prefix);    }  } else {    uName=prefix;  }  if ((null != uName) && (uName.length() > 0)) {    addToTokenQueue(uName);    addToTokenQueue(":");    String s=pat.substring(posOfNSSep + 1,posOfScan);    if (s.length() > 0)     addToTokenQueue(s);  } else {    m_processor.errorForDOM3(XPATHErrorResources.ER_PREFIX_MUST_RESOLVE,new String[]{prefix});  }  return -1;}  }
class C{  public void testOneNodeSubmitQueryWithLinearizableConsistency() throws Throwable {  testSubmitQuery(1,Query.ConsistencyLevel.LINEARIZABLE);}  }
class C{  public LongMap(){  this(32,0.8f);}  }
class C{  protected void handleMouseReleased(MouseEvent e){  Object obj=e.getSource();  MapBean map=(MapBean)theMap;  Point firstPoint=this.point1;  Point secondPoint=this.point2;  if (!(obj == map) || !autoZoom || firstPoint == null || secondPoint == null) {    return;  }  Projection projection=map.getProjection();  Proj p=(Proj)projection;synchronized (this) {    point2=getRatioPoint((MapBean)e.getSource(),firstPoint,e.getPoint());    secondPoint=point2;    int dx=Math.abs(secondPoint.x - firstPoint.x);    int dy=Math.abs(secondPoint.y - firstPoint.y);    if ((dx < 5) || (dy < 5)) {      if ((dx < 5) && (dy < 5)) {        Point2D llp=map.getCoordinates(e);        boolean shift=e.isShiftDown();        boolean control=e.isControlDown();        if (control) {          if (shift) {            p.setScale(p.getScale() * 2.0f);          } else {            p.setScale(p.getScale() / 2.0f);          }        }        cleanUp();        p.setCenter(llp);        map.setProjection(p);      } else {        cleanUp();        map.repaint();      }      return;    }    float newScale=com.bbn.openmap.proj.ProjMath.getScale(firstPoint,secondPoint,projection);    int centerx=Math.min(firstPoint.x,secondPoint.x) + dx / 2;    int centery=Math.min(firstPoint.y,secondPoint.y) + dy / 2;    Point2D center=map.inverse(centerx,centery,null);    p.setScale(newScale);    p.setCenter(center);    cleanUp();    map.setProjection(p);  }}  }
class C{  public static String toUpperCase(String src){  if (src == null) {    return null;  } else {    return src.toUpperCase();  }}  }
class C{  public void visitTypeArgument(){}  }
class C{  public boolean isGroupOwner(){  return (groupCapability & GROUP_CAPAB_GROUP_OWNER) != 0;}  }
class C{  private void processBackwardBranch(int index,int branchtarget){  BasicBlock existingBB, currentBB, newBB;  int newBlockNum, i, newBlockEnd;  existingBB=basicBlocks[byteToBlockMap[branchtarget]];  if (existingBB.getStart() != branchtarget) {    newBB=bbf.newBlock(existingBB.getStart());    addBasicBlock(newBB);    newBlockNum=newBB.getBlockNumber();    existingBB.setStart(branchtarget);    for (i=branchtarget - 1; byteToBlockMap[i] == BasicBlock.NOTBLOCK; i--) {    }    newBlockEnd=i;    newBB.setEnd(i);    for (i=newBB.getStart(); i <= newBlockEnd; i++) {      if (byteToBlockMap[i] != BasicBlock.NOTBLOCK) {        byteToBlockMap[i]=(short)newBlockNum;      }    }    BasicBlock.transferPredecessors(existingBB,newBB);    existingBB.addPredecessor(newBB);  } else {  }  currentBB=basicBlocks[byteToBlockMap[index]];  existingBB.addPredecessor(currentBB);}  }
class C{  public static final String createMessage(String msgKey,Object args[]){  return createMsg(XSLTBundle,msgKey,args);}  }
class C{  @Override public void doSave(IProgressMonitor monitor){  if (!isDirty()) {    return;  }  try {    saveInProgress=true;    monitor.beginTask("Save changes...",1);    try {      monitor.subTask("Save '" + getPartName() + "' changes...");      SaveJob saveJob=new SaveJob();      saveJob.schedule();      Display display=Display.getCurrent();      while (saveJob.finished == null) {        if (!display.readAndDispatch()) {          display.sleep();        }      }      display.update();      if (!saveJob.finished) {        monitor.setCanceled(true);        return;      }    }  finally {      monitor.done();    }    firePropertyChange(IEditorPart.PROP_DIRTY);  }  finally {    saveInProgress=false;  }}  }
class C{  public Object nextEntity(char ampersand) throws JSONException {  StringBuilder sb=new StringBuilder();  for (; ; ) {    char c=next();    if (Character.isLetterOrDigit(c) || c == '#') {      sb.append(Character.toLowerCase(c));    } else     if (c == ';') {      break;    } else {      throw syntaxError("Missing ';' in XML entity: &" + sb);    }  }  String string=sb.toString();  Object object=entity.get(string);  return object != null ? object : ampersand + string + ";";}  }
class C{  public String retryTime(){  if (code == 7100)   return retryTime;  return null;}  }
class C{  public static void check(String answer,String path) throws IOException {  String ans=trimTrailingSlashes(answer);  if (path.length() == 0)   return;  if (checked.get(path) != null) {    System.err.println("DUP " + path);    return;  }  checked.put(path,path);  String cpath;  try {    File f=new File(path);    cpath=f.getCanonicalPath();    if (f.exists() && f.isFile() && f.canRead()) {      InputStream in=new FileInputStream(path);      in.close();      RandomAccessFile raf=new RandomAccessFile(path,"r");      raf.close();    }  } catch (  IOException x) {    System.err.println(ans + " <-- " + path+ " ==> "+ x);    if (debug)     return; else     throw x;  }  if (cpath.equals(ans)) {    System.err.println(ans + " <== " + path);  } else {    System.err.println(ans + " <-- " + path+ " ==> "+ cpath+ " MISMATCH");    if (!debug) {      throw new RuntimeException("Mismatch: " + path + " ==> "+ cpath+ ", should be "+ ans);    }  }}  }
class C{  int entryCountMod(){  int result=0;  Iterator it=this.entryMods.values().iterator();  while (it.hasNext()) {    TXEntryState es=(TXEntryState)it.next();    result+=es.entryCountMod();  }  return result;}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (final Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    final Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public Vector minus(Vector v){  Vector result=new Vector(size());  for (int i=0; i < size(); i++) {    result.setValue(i,getValue(i) - v.getValue(i));  }  return result;}  }
class C{  @Override public void emitErrorMessage(String pMessage){  if (mMessageCollectionEnabled) {    mMessages.add(pMessage);  } else {    super.emitErrorMessage(pMessage);  }}  }
class C{  public static int read(FileDescriptor fd,byte[] bytes,int byteOffset,int byteCount) throws IOException {  Arrays.checkOffsetAndCount(bytes.length,byteOffset,byteCount);  if (byteCount == 0) {    return 0;  }  try {    int readCount=Libcore.os.read(fd,bytes,byteOffset,byteCount);    if (readCount == 0) {      return -1;    }    return readCount;  } catch (  ErrnoException errnoException) {    if (errnoException.errno == EAGAIN) {      return 0;    }    throw errnoException.rethrowAsIOException();  }}  }
class C{  public WallForce(float x1,float y1,float x2,float y2){  this(DEFAULT_GRAV_CONSTANT,x1,y1,x2,y2);}  }
class C{  public Buffer maxDistance(String maxDistance){  this.maxDistance=maxDistance;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.153 -0500",hash_original_method="52B4DCA52CE9008BF4F1F47D8B6558D0",hash_generated_method="A1DE28B462D206CC85DA36A53CF4B23D") public int body(String messageId) throws IOException {  return sendCommand(NNTPCommand.BODY,messageId);}  }
class C{  public V put(K key,V value){  m_keys.add(key);  m_values.add(value);  return null;}  }
class C{  public static Boolean isTopActivity(Context context,String packageName){  if (context == null || StringUtils.isEmpty(packageName)) {    return null;  }  ActivityManager activityManager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<RunningTaskInfo> tasksInfo=activityManager.getRunningTasks(1);  if (ListUtils.isEmpty(tasksInfo)) {    return null;  }  try {    return packageName.equals(tasksInfo.get(0).topActivity.getPackageName());  } catch (  Exception e) {    e.printStackTrace();    return false;  }}  }
class C{  public boolean isFullyZoomedOut(){  if (isFullyZoomedOutX() && isFullyZoomedOutY())   return true; else   return false;}  }
class C{  @Override public void start(){  try {    super.start();    readSlopeData();    readLandUseData();    readExcludedAreaData();    readUrbanAreaData();    readTransportData();    readHillShadeData();    System.out.println("Successfully read in all data!");    for (int i=0; i < grid_width; i++) {      for (int j=0; j < grid_height; j++) {        Tile tile=(Tile)landscape.get(i,j);        if (tile != null && tile.urbanized) {          numUrban++;          int numUrbanizedNeighbors=getUrbanNeighbors(tile).size();          if (numUrbanizedNeighbors > 1 && numUrbanizedNeighbors < 6) {            spreadingCenters.add(tile);          }        } else {          numNonUrban++;        }      }    }    Grower grower=new Grower();    schedule.scheduleRepeating(grower);  } catch (  FileNotFoundException ex) {    Logger.getLogger(SleuthWorld.class.getName()).log(Level.SEVERE,null,ex);  }}  }
class C{  void destroy() throws IOException {  if (raf != null) {    raf.close();  }  if (out != null) {    out.close();  }}  }
class C{  public static boolean isValidSpecName(final String aSpecName){  String identifier=getIdentifier(aSpecName);  return aSpecName.equals(identifier);}  }
class C{  @SuppressFBWarnings(value="EI_EXPOSE_REP2",justification="This class is designed to simply wrap an object array.") public ArrayTuple(final Object[] tuple){  this.tuple=tuple;}  }
class C{  @Override protected Action[] createActions(){  return new Action[]{getOKAction()};}  }
class C{  private int pop(){  if (outputStackTop > 0) {    return outputStack[--outputStackTop];  } else {    return STACK | -(--owner.inputStackTop);  }}  }
class C{  public void keyReleased(KeyEvent e){  if (e.getKeyCode() == KeyEvent.VK_ESCAPE)   setText(m_initialText);}  }
class C{  public boolean containsPrefix(String prefix){  return m_Root.contains(prefix);}  }
class C{  public int findReferencePosition(int offset,int nextToken){  boolean danglingElse=false;  boolean unindent=false;  boolean indent=false;  boolean matchBrace=false;  boolean matchParen=false;  boolean matchCase=false;  if (offset < fDocument.getLength()) {    try {      IRegion line=fDocument.getLineInformationOfOffset(offset);      int lineOffset=line.getOffset();      int prevPos=Math.max(offset - 1,0);      boolean isFirstTokenOnLine=fDocument.get(lineOffset,prevPos + 1 - lineOffset).trim().length() == 0;      int prevToken=fScanner.previousToken(prevPos,JavaHeuristicScanner.UNBOUND);      boolean bracelessBlockStart=fScanner.isBracelessBlockStart(prevPos,JavaHeuristicScanner.UNBOUND);switch (nextToken) {case Symbols.TokenELSE:        danglingElse=true;      break;case Symbols.TokenCASE:case Symbols.TokenDEFAULT:    if (isFirstTokenOnLine)     matchCase=true;  break;case Symbols.TokenLBRACE:if (bracelessBlockStart && !fPrefs.prefIndentBracesForBlocks) unindent=true; else if ((prevToken == Symbols.TokenCOLON || prevToken == Symbols.TokenEQUAL || prevToken == Symbols.TokenRBRACKET) && !fPrefs.prefIndentBracesForArrays) unindent=true; else if (!bracelessBlockStart && fPrefs.prefIndentBracesForMethods) indent=true;break;case Symbols.TokenRBRACE:if (isFirstTokenOnLine) matchBrace=true;break;case Symbols.TokenRPAREN:if (isFirstTokenOnLine) matchParen=true;break;}} catch (BadLocationException e) {}} else {danglingElse=false;}int ref=findReferencePosition(offset,danglingElse,matchBrace,matchParen,matchCase);if (unindent) fIndent--;if (indent) fIndent++;return ref;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.METHOD_DECLARATOR___METHOD_NAME_1:    return METHOD_NAME_1_EDEFAULT == null ? methodName_1 != null : !METHOD_NAME_1_EDEFAULT.equals(methodName_1);case UmplePackage.METHOD_DECLARATOR___PARAMETER_LIST_1:  return parameterList_1 != null && !parameterList_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private boolean isRolloverInstallment(Installment installment){  Date systemCreatedDate=basicProperty.getProperty().getCreatedDate();  return propertyTaxUtil.between(new Date(),installment.getFromDate(),installment.getToDate()) && !propertyTaxUtil.between(systemCreatedDate,installment.getFromDate(),installment.getToDate());}  }
class C{  private int deleteData(){  StringBuilder updateSQL=new StringBuilder();  updateSQL.append("DELETE FROM M_ForecastLine WHERE M_Forecast_ID=").append(p_M_Forecast_ID);  return DB.executeUpdateEx(updateSQL.toString(),get_TrxName());}  }
class C{  private static void validate(File file,byte[] actual) throws IOException {  String mode=Settings.getFileProtectionMode();  File digestFile=getDigestFile(file);  if (digestFile.exists()) {    byte[] expected=loadDigest(file);    if (!MessageDigest.isEqual(actual,expected)) {      throw new ValidationException(file,"digest does not match");    }  } else {    if (mode.equalsIgnoreCase(STRICT_MODE)) {      throw new ValidationException(file,"no digest file");    } else {      System.err.println("no digest file exists to validate " + file);    }  }}  }
class C{  public static boolean equals(int[] list1,int[] list2){  if (list1.length != list2.length)   return false;  sort(list1);  sort(list2);  for (int i=0; i < list1.length; i++) {    if (list1[i] != list2[i])     return false;  }  return true;}  }
class C{  public static HashMap<ICondition,Boolean> testAllConditionsRecursive(final HashSet<ICondition> rules,HashMap<ICondition,Boolean> allConditionsTestedSoFar,final IDelegateBridge aBridge){  if (allConditionsTestedSoFar == null) {    allConditionsTestedSoFar=new HashMap<>();  }  for (  final ICondition c : rules) {    if (!allConditionsTestedSoFar.containsKey(c)) {      testAllConditionsRecursive(new HashSet<>(c.getConditions()),allConditionsTestedSoFar,aBridge);      allConditionsTestedSoFar.put(c,c.isSatisfied(allConditionsTestedSoFar,aBridge));    }  }  return allConditionsTestedSoFar;}  }
class C{  public List<TriggerKey> selectTriggersInState(Connection conn,String state) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    ps=conn.prepareStatement(rtp(SELECT_TRIGGERS_IN_STATE));    ps.setString(1,state);    rs=ps.executeQuery();    LinkedList<TriggerKey> list=new LinkedList<TriggerKey>();    while (rs.next()) {      list.add(triggerKey(rs.getString(1),rs.getString(2)));    }    return list;  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  public static void main(String[] args) throws IOException {  process_command_line(args);  info=new JarInfo();  if (printVersion) {    doPrintVersion();  }  if (printHelp) {    doPrintHelp();  }}  }
class C{  @Override public boolean contains(int x,int y){  Rectangle r=gridElement.getRectangle();  if (gridElement.isSelectableOn(new Point(r.getX() + x,r.getY() + y))) {    return ElementUtils.checkForOverlap(gridElement,new Point(x,y));  } else {    return false;  }}  }
class C{  @SuppressWarnings("unchecked") default T addDependency(String gav) throws Exception {  addAsLibrary(ArtifactLookup.get().artifact(gav));  return (T)this;}  }
class C{  @Override public void init(FilterConfig fConfig) throws ServletException {  this.filterConfig=fConfig;  this.attribute=fConfig.getInitParameter("attribute");}  }
class C{  public int size(){  return n;}  }
class C{  public List(Vector items){  this(new DefaultListModel(items));}  }
class C{  public static void printf(Locale locale,String format,Object... args){  out.printf(locale,format,args);  out.flush();}  }
class C{  private boolean makeServiceNameUnique(ServiceInfoImpl info){  final String originalQualifiedName=info.getKey();  final long now=System.currentTimeMillis();  boolean collision;  do {    collision=false;    for (    DNSEntry dnsEntry : this.getCache().getDNSEntryList(info.getKey())) {      if (DNSRecordType.TYPE_SRV.equals(dnsEntry.getRecordType()) && !dnsEntry.isExpired(now)) {        final DNSRecord.Service s=(DNSRecord.Service)dnsEntry;        if (s.getPort() != info.getPort() || !s.getServer().equals(_localHost.getName())) {          if (logger.isLoggable(Level.FINER)) {            logger.finer("makeServiceNameUnique() JmDNS.makeServiceNameUnique srv collision:" + dnsEntry + " s.server="+ s.getServer()+ " "+ _localHost.getName()+ " equals:"+ (s.getServer().equals(_localHost.getName())));          }          info.setName(NameRegister.Factory.getRegistry().incrementName(_localHost.getInetAddress(),info.getName(),NameRegister.NameType.SERVICE));          collision=true;          break;        }      }    }    final ServiceInfo selfService=_services.get(info.getKey());    if (selfService != null && selfService != info) {      info.setName(NameRegister.Factory.getRegistry().incrementName(_localHost.getInetAddress(),info.getName(),NameRegister.NameType.SERVICE));      collision=true;    }  } while (collision);  return !(originalQualifiedName.equals(info.getKey()));}  }
class C{  public static String toString(final BOp bop){  final StringBuilder sb=new StringBuilder();  toString(bop,sb,0);  sb.setLength(sb.length() - 1);  return sb.toString();}  }
class C{  public WeakHashMapPro(){  this(DEFAULT_INITIAL_CAPACITY,DEFAULT_LOAD_FACTOR);}  }
class C{  public SuggestWordQueue(int size,Comparator<SuggestWord> comparator){  super(size);  this.comparator=comparator;}  }
class C{  public Object[] values(){  Object[] values=new Object[this.size()];  Entry[] table=this.table;  int i=0;  for (int bucket=0; bucket < table.length; bucket++) {    for (Entry e=table[bucket]; e != null; e=e.next) {      values[i++]=e.value;    }  }  return values;}  }
class C{  private void subscribe(){  String topic=((EditText)connectionDetails.findViewById(R.id.topic)).getText().toString();  ((EditText)connectionDetails.findViewById(R.id.topic)).getText().clear();  RadioGroup radio=(RadioGroup)connectionDetails.findViewById(R.id.qosSubRadio);  int checked=radio.getCheckedRadioButtonId();  int qos=ActivityConstants.defaultQos;switch (checked) {case R.id.qos0:    qos=0;  break;case R.id.qos1:qos=1;break;case R.id.qos2:qos=2;break;}try {String[] topics=new String[1];topics[0]=topic;Connections.getInstance(context).getConnection(clientHandle).getClient().subscribe(topic,qos,null,new ActionListener(context,Action.SUBSCRIBE,clientHandle,topics));} catch (MqttSecurityException e) {Log.e(this.getClass().getCanonicalName(),"Failed to subscribe to" + topic + " the client with the handle "+ clientHandle,e);}catch (MqttException e) {Log.e(this.getClass().getCanonicalName(),"Failed to subscribe to" + topic + " the client with the handle "+ clientHandle,e);}}  }
class C{  public static int extractLag_Display(String laggedFactor){  int colonIndex=laggedFactor.indexOf(":L");  int lag=Integer.parseInt(laggedFactor.substring(colonIndex + 2,laggedFactor.length()));  return lag;}  }
class C{  public boolean phaseHasTurns(IGame.Phase thisPhase){switch (thisPhase) {case PHASE_SET_ARTYAUTOHITHEXES:case PHASE_DEPLOY_MINEFIELDS:case PHASE_DEPLOYMENT:case PHASE_MOVEMENT:case PHASE_FIRING:case PHASE_PHYSICAL:case PHASE_TARGETING:case PHASE_OFFBOARD:    return true;default :  return false;}}  }
class C{  public static String marshal(Object obj) throws JAXBException {  StringWriter writer=new StringWriter();  JAXBUtils.getJAXBContext().createMarshaller().marshal(obj,writer);  return writer.toString();}  }
class C{  public JSONObject putOpt(String key,Object value) throws JSONException {  if (key != null && value != null) {    this.put(key,value);  }  return this;}  }
class C{  private static Map<String,String> extractMdc(Map<String,String> map,List<String> keys){  return keys.stream().filter(null).collect(Collectors.toMap(null,null));}  }
class C{  public ExpressionsAdapterFactory(){  if (modelPackage == null) {    modelPackage=ExpressionsPackage.eINSTANCE;  }}  }
class C{  public static NurbsCurve createSemiCircle(Origin3D o,float r){  Vec4D[] cp=new Vec4D[4];  cp[0]=new Vec4D(o.xAxis.scale(r),1);  cp[3]=cp[0].getInvertedXYZ();  cp[0].addXYZSelf(o.origin);  cp[3].addXYZSelf(o.origin);  cp[1]=new Vec4D(o.xAxis.add(o.yAxis).scaleSelf(r).addSelf(o.origin),0.5f);  cp[2]=new Vec4D(o.xAxis.getInverted().addSelf(o.yAxis).scaleSelf(r).addSelf(o.origin),0.5f);  float[] u={0,0,0,0.5f,1,1,1};  return new BasicNurbsCurve(cp,u,2);}  }
class C{  public synchronized void removePropertyChangeListener(PropertyChangeListener listener){  listenerList.remove(listener);}  }
class C{  @Uninterruptible @Pure public byte parseForArrayElementTypeCode(){  if (VM.VerifyAssertions) {    VM._assert(val.length > 1,"An array descriptor has at least two characters");    VM._assert(val[0] == '[',"An array descriptor must start with '['");  }  return val[1];}  }
class C{  public ImageRotationCalculatorImpl(OrientationManager orientationManager,int sensorOrientationDegrees,boolean frontFacing){  mSensorOrientationDegrees=sensorOrientationDegrees;  mFrontFacing=frontFacing;  mOrientationManager=orientationManager;}  }
class C{  public void stop(){  messageLogger.stop();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private boolean shouldAddImports(){  if (isInJavadoc() && !isJavadocProcessingEnabled())   return false;  return true;}  }
class C{  public synchronized void decrement(){  tempSet.set(0,dimension);  for (int q=0; q < votingRecord.size(); q++) {    votingRecord.get(q).xor(tempSet);    tempSet.and(votingRecord.get(q));  }}  }
class C{  public TimeLagGraphWorkbench(){  this(new TimeLagGraph());}  }
class C{  @Override public void registerPackages(ResourceSet resourceSet){  super.registerPackages(resourceSet);  if (!isInWorkspace(com.github.lbroudoux.dsl.eip.EipPackage.class)) {    resourceSet.getPackageRegistry().put(com.github.lbroudoux.dsl.eip.EipPackage.eINSTANCE.getNsURI(),com.github.lbroudoux.dsl.eip.EipPackage.eINSTANCE);  }}  }
class C{  public boolean cmd_save(boolean manualCmd){  if (m_curAPanelTab != null)   manualCmd=false;  log.config("Manual=" + manualCmd);  m_errorDisplayed=false;  m_curGC.stopEditor(true);  m_curGC.acceptEditorChanges();  if (m_curAPanelTab != null) {    m_curAPanelTab.saveData();    aSave.setEnabled(false);  }  if (m_curTab.getCommitWarning().length() > 0 && m_curTab.needSave(true,false))   if (!ADialog.ask(m_curWindowNo,this,"SaveChanges?",m_curTab.getCommitWarning()))   return false;  boolean retValue=m_curTab.dataSave(manualCmd);  if (manualCmd && !retValue && !m_errorDisplayed) {    showLastError();  }  if (retValue)   m_curGC.rowChanged(true,m_curTab.getRecord_ID());  if (manualCmd) {    m_curGC.dynamicDisplay(0);    if (!isNested)     m_window.setTitle(getTitle());  }  if (m_curGC.isDetailGrid() && retValue) {    m_curGC.getGCParent().refreshMTab(m_curGC);  }  return retValue;}  }
class C{  public synchronized int size(){  return this.stack.size();}  }
class C{  public static long readVarLong(ByteBuffer buff){  int shift=0;  long l=0;  while (true) {    byte b=(byte)buff.get();    l|=(long)(b & 0x7F) << shift;    shift+=7;    if (b >= 0) {      return l;    }  }}  }
class C{  @Override public int prepare(Xid xid) throws XAException {  if (isDebugEnabled()) {    debugCode("prepare(" + JdbcXid.toString(xid) + ");");  }  checkOpen();  if (!currentTransaction.equals(xid)) {    throw new XAException(XAException.XAER_INVAL);  }  try (Statement stat=physicalConn.createStatement()){    stat.execute("PREPARE COMMIT " + JdbcXid.toString(xid));    prepared=true;  } catch (  SQLException e) {    throw convertException(e);  }  return XA_OK;}  }
class C{  public static void main(String[] args){  System.out.println(PROPERTIES);}  }
class C{  private static void deleteRecursiveSilent(CarbonFile f){  if (f.isDirectory()) {    if (f.listFiles() != null) {      for (      CarbonFile c : f.listFiles()) {        deleteRecursiveSilent(c);      }    }  }  if (f.exists() && !f.delete()) {    return;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:44.177 -0500",hash_original_method="E35FF664DA486BBF1CFE86498473FB9B",hash_generated_method="81AF2D5B35CA402304449ACA5C911EFF") public static void disableVsync(){  nDisableVsync();}  }
class C{  public boolean similar(Object other){  if (!(other instanceof JSONArray)) {    return false;  }  int len=this.length();  if (len != ((JSONArray)other).length()) {    return false;  }  for (int i=0; i < len; i+=1) {    Object valueThis=this.get(i);    Object valueOther=((JSONArray)other).get(i);    if (valueThis instanceof JSONObject) {      if (!((JSONObject)valueThis).similar(valueOther)) {        return false;      }    } else     if (valueThis instanceof JSONArray) {      if (!((JSONArray)valueThis).similar(valueOther)) {        return false;      }    } else     if (!valueThis.equals(valueOther)) {      return false;    }  }  return true;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.IDENTIFIER_REF__STRICT_MODE:    return strictMode != STRICT_MODE_EDEFAULT;case N4JSPackage.IDENTIFIER_REF__ID:  return id != null;case N4JSPackage.IDENTIFIER_REF__ID_AS_TEXT:return ID_AS_TEXT_EDEFAULT == null ? idAsText != null : !ID_AS_TEXT_EDEFAULT.equals(idAsText);}return super.eIsSet(featureID);}  }
class C{  private void processBinaryMeta(CacheTypeMetadata meta,TypeDescriptor d) throws IgniteCheckedException {  Map<String,String> aliases=meta.getAliases();  if (aliases == null)   aliases=Collections.emptyMap();  for (  Map.Entry<String,Class<?>> entry : meta.getAscendingFields().entrySet()) {    BinaryProperty prop=buildBinaryProperty(entry.getKey(),entry.getValue(),aliases);    d.addProperty(prop,false);    String idxName=prop.name() + "_idx";    d.addIndex(idxName,isGeometryClass(prop.type()) ? GEO_SPATIAL : SORTED);    d.addFieldToIndex(idxName,prop.name(),0,false);  }  for (  Map.Entry<String,Class<?>> entry : meta.getDescendingFields().entrySet()) {    BinaryProperty prop=buildBinaryProperty(entry.getKey(),entry.getValue(),aliases);    d.addProperty(prop,false);    String idxName=prop.name() + "_idx";    d.addIndex(idxName,isGeometryClass(prop.type()) ? GEO_SPATIAL : SORTED);    d.addFieldToIndex(idxName,prop.name(),0,true);  }  for (  String txtIdx : meta.getTextFields()) {    BinaryProperty prop=buildBinaryProperty(txtIdx,String.class,aliases);    d.addProperty(prop,false);    d.addFieldToTextIndex(prop.name());  }  Map<String,LinkedHashMap<String,IgniteBiTuple<Class<?>,Boolean>>> grps=meta.getGroups();  if (grps != null) {    for (    Map.Entry<String,LinkedHashMap<String,IgniteBiTuple<Class<?>,Boolean>>> entry : grps.entrySet()) {      String idxName=entry.getKey();      LinkedHashMap<String,IgniteBiTuple<Class<?>,Boolean>> idxFields=entry.getValue();      int order=0;      for (      Map.Entry<String,IgniteBiTuple<Class<?>,Boolean>> idxField : idxFields.entrySet()) {        BinaryProperty prop=buildBinaryProperty(idxField.getKey(),idxField.getValue().get1(),aliases);        d.addProperty(prop,false);        Boolean descending=idxField.getValue().get2();        d.addFieldToIndex(idxName,prop.name(),order,descending != null && descending);        order++;      }    }  }  for (  Map.Entry<String,Class<?>> entry : meta.getQueryFields().entrySet()) {    BinaryProperty prop=buildBinaryProperty(entry.getKey(),entry.getValue(),aliases);    if (!d.props.containsKey(prop.name()))     d.addProperty(prop,false);  }}  }
class C{  private static boolean isCorbaUrl(String url){  return url.startsWith("iiop://") || url.startsWith("iiopname://") || url.startsWith("corbaname:");}  }
class C{  public T caseAnonymous_program_1_(Anonymous_program_1_ object){  return null;}  }
class C{  public static BinaryExpression newInitializationExpression(String variable,ClassNode type,Expression rhs){  VariableExpression lhs=new VariableExpression(variable);  if (type != null) {    lhs.setType(type);  }  Token operator=Token.newPlaceholder(Types.ASSIGN);  return new BinaryExpression(lhs,operator,rhs);}  }
class C{  @Override public boolean containsValue(Object value){  if (value == null)   return containsNullValue();  Entry[] tab=table;  for (int i=0; i < tab.length; i++)   for (Entry e=tab[i]; e != null; e=e.next)   if (value.equals(e.value))   return true;  return false;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("DbConnectionConfig[");  buffer.append("cntByDriver = ").append(m_cntByDriver);  buffer.append(", cntParam = ").append(m_cntParam);  buffer.append(", url = ").append(m_url);  buffer.append(", user = ").append(m_user);  buffer.append(", pwd = ").append(m_pwd);  buffer.append("]");  return buffer.toString();}  }
class C{  DocCollection createCollection(int nSlices,DocRouter router){  List<Range> ranges=router.partitionRange(nSlices,router.fullRange());  Map<String,Slice> slices=new HashMap<>();  for (int i=0; i < ranges.size(); i++) {    Range range=ranges.get(i);    Slice slice=new Slice("shard" + (i + 1),null,map("range",range));    slices.put(slice.getName(),slice);  }  DocCollection coll=new DocCollection("collection1",slices,null,router);  return coll;}  }
class C{  public ESRIPointRecord(byte b[],int off) throws IOException {  super(b,off);  int ptr=off + 8;  int shapeType=readLEInt(b,ptr);  ptr+=4;  if (shapeType != SHAPE_TYPE_POINT) {    throw new IOException("Invalid point record.  Expected shape " + "type " + SHAPE_TYPE_POINT + " but found "+ shapeType);  }  x=readLEDouble(b,ptr);  ptr+=8;  y=readLEDouble(b,ptr);  ptr+=8;}  }
class C{  public boolean isBeanSupportEnabled(){  return beanSupportEnabled;}  }
class C{  public NominalToNumericModel(ExampleSet exampleSet,int codingType){  super(exampleSet);  this.codingType=codingType;}  }
class C{  public static boolean isNullOrEmpty(String... input){  if (input == null) {    return true;  }  for (  String s : input) {    if (s == null || s.isEmpty()) {      return true;    }  }  return false;}  }
class C{  public void test_DELETE_accessPath_delete_c_nothingMatched() throws Exception {  if (TestMode.quads != getTestMode())   return;  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.trig");  final long mutationResult=doDeleteWithAccessPath(null,null,null,new URIImpl("http://xmlns.com/foaf/0.1/XXX"));  assertEquals(0,mutationResult);}  }
class C{  public synchronized boolean makeProxyClass(Class clazz) throws CannotCompileException, NotFoundException {  String classname=clazz.getName();  if (proxyClasses.get(classname) != null)   return false; else {    CtClass ctclazz=produceProxyClass(classPool.get(classname),clazz);    proxyClasses.put(classname,ctclazz);    modifySuperclass(ctclazz);    return true;  }}  }
class C{  private static BufferedImage cutByShort(String source) throws UtilException {  try {    BufferedImage src=ImageIO.read(new File(source));    int width=src.getWidth();    int height=src.getHeight();    int size=width > height ? height : width;    BufferedImage dest=new BufferedImage(size,size,BufferedImage.TYPE_INT_RGB);    Graphics g=dest.getGraphics();    g.drawImage(src,0,0,size,size,0,0,size,size,null);    return dest;  } catch (  IOException e) {    throw new UtilException(ErrorCodeDef.IMAGE_ZOOM_10020,e);  }}  }
class C{  static void copy32bit(byte[] src,int isrc,byte[] dest,int idest){  dest[idest]=src[isrc];  dest[idest + 1]=src[isrc + 1];  dest[idest + 2]=src[isrc + 2];  dest[idest + 3]=src[isrc + 3];}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8,E e9,E e10,E e11){  return construct(e1,e2,e3,e4,e5,e6,e7,e8,e9,e10,e11);}  }
class C{  @Override public double totalEstimatedQuantityForPreviousREs(final Long woActivityId,Long estimateId,final Long activityId,final WorkOrder workOrder){  if (estimateId == null)   estimateId=-1l;  Object[] params=null;  Double estQuantity=null;  params=new Object[]{estimateId,workOrder,workOrder,woActivityId,activityId};  estQuantity=(Double)genericService.findByNamedQuery("totalEstimatedQuantityInRE",params);  Double estQuantityRE=null;  params=new Object[]{estimateId,workOrder,workOrder,activityId};  estQuantityRE=(Double)genericService.findByNamedQuery("totalEstimatedQuantityForPreviousREs",params);  if (estQuantity != null && estQuantityRE != null)   estQuantity=estQuantity + estQuantityRE;  if (estQuantity == null && estQuantityRE != null)   estQuantity=estQuantityRE;  if (estQuantity == null)   return 0.0d; else   return estQuantity.doubleValue();}  }
class C{  public Element(String name,String id,XmlTag xml){  final Matcher matcher=sIdPattern.matcher(id);  if (matcher.find() && matcher.groupCount() > 1) {    this.id=matcher.group(2);    String androidNS=matcher.group(1);    this.isAndroidNS=!(androidNS == null || androidNS.length() == 0);  }  if (this.id == null) {    throw new IllegalArgumentException("Invalid format of view id");  }  String[] packages=name.split("\\.");  if (packages.length > 1) {    this.nameFull=name;    this.name=packages[packages.length - 1];  } else {    this.nameFull=null;    this.name=name;  }  this.xml=xml;  XmlAttribute clickable=xml.getAttribute("android:clickable",null);  boolean hasClickable=clickable != null && clickable.getValue() != null && clickable.getValue().equals("true");  String xmlName=xml.getName();  if (xmlName.contains("RadioButton")) {  } else {    if ((xmlName.contains("ListView") || xmlName.contains("GridView")) && hasClickable) {      isItemClickable=true;    } else     if (xmlName.contains("Button") || hasClickable) {      isClickable=true;    }  }  isEditText=xmlName.contains("EditText");}  }
class C{  public void run(Throwing.Runnable runnable){  wrap(runnable).run();}  }
class C{  @Override public String validateName(String name,boolean increaseNumber){  String result=name;  if (!isOKImpl(name,true).isEmpty() && !increaseNumber || name.isEmpty()) {    return "";  }  int i=1;  while (!isOKImpl(result,true).isEmpty()) {    result=name + i;    i++;  }  return result;}  }
class C{  public boolean isValid(){  if (mXVals == null || mXVals.size() <= 0 || mDataSets == null || mDataSets.size() < 1 || mDataSets.get(0).getYVals().size() <= 0) {    return false;  } else {    return true;  }}  }
class C{  public static void closeRegistersQuery(String sessionID,Integer bookID) throws BookException, SessionException, ValidationException {  Validator.validate_String_NotNull_LengthMayorZero(sessionID,ValidationException.ATTRIBUTE_SESSION);  Validator.validate_Integer(bookID,ValidationException.ATTRIBUTE_BOOK);  try {    CacheBag cacheBag=CacheFactory.getCacheInterface().getCacheEntry(sessionID);    if (!cacheBag.containsKey(bookID)) {      throw new BookException(BookException.ERROR_BOOK_NOT_OPEN);    }    THashMap bookInformation=(THashMap)cacheBag.get(bookID);    AxSfQueryResults queryResults=(AxSfQueryResults)bookInformation.get(AXSF_QUERY_RESULTS);    if (queryResults == null) {      throw new BookException(BookException.ERROR_QUERY_NOT_OPEN);    } else {      bookInformation.remove(AXSF_QUERY_RESULTS);    }  } catch (  SessionException sE) {    throw sE;  }catch (  BookException bE) {    throw bE;  }catch (  Exception e) {    log.error("Impossible to close the book [" + bookID + "] for the session ["+ sessionID+ "]",e);    throw new BookException(BookException.ERROR_CANNOT_CLOSE_BOOK);  }}  }
class C{  public NaiveKMeans(DistanceMetric dm,SeedSelection seedSelection){  this(dm,seedSelection,new XORWOW());}  }
class C{  private static int checkFieldTypeSignature(final String signature,int pos){switch (getChar(signature,pos)) {case 'L':    return checkClassTypeSignature(signature,pos);case '[':  return checkTypeSignature(signature,pos + 1);default :return checkTypeVariableSignature(signature,pos);}}  }
class C{  public URLConnectionRequestPropertiesBuilder withCookie(String cookieName,String cookieValue){  if (requestProperties.containsKey("Cookie")) {    final String cookies=requestProperties.get("Cookie");    requestProperties.put("Cookie",cookies + COOKIES_SEPARATOR + buildCookie(cookieName,cookieValue));  } else {    requestProperties.put("Cookie",buildCookie(cookieName,cookieValue));  }  return this;}  }
class C{  @Command(aliases="join",description="Join the game") @PlayerCommand public static void join(CommandContext cmd,@Optional Team team){  Player player=(Player)cmd.getSender();  MatchThread thread=Cardinal.getMatchThread(player);  Match match=thread.getCurrentMatch();  PlayingPlayerContainer playing=team;  if (!match.isFfa()) {    if (playing == null) {      playing=Team.getEmptiestTeam(Team.getTeams(Cardinal.getMatch(player)));    }  } else {    playing=SinglePlayerContainer.of(player);  }  PlayerContainerData newData=new PlayerContainerData(thread,match,playing);  PlayerContainerData oldData=PlayerContainerData.of(player);  Containers.handleStateChangeEvent(player,oldData,newData);}  }
class C{  public boolean checkPattern(List<LockPatternView.Cell> pattern){  try {    RandomAccessFile raf=new RandomAccessFile(sLockPatternFilename,"r");    final byte[] stored=new byte[(int)raf.length()];    int got=raf.read(stored,0,stored.length);    raf.close();    if (got <= 0) {      return true;    }    return Arrays.equals(stored,LockPatternUtils.patternToHash(pattern));  } catch (  FileNotFoundException fnfe) {    return true;  }catch (  IOException ioe) {    return true;  }}  }
class C{  public boolean isLeft(){  return m_left;}  }
class C{  public synchronized void connected(BluetoothSocket socket){  if (mConnectThread != null) {    mConnectThread.cancel();    mConnectThread=null;  }  if (mConnectedThread != null) {    mConnectedThread.cancel();    mConnectedThread=null;  }  if (mAcceptThread != null) {    mAcceptThread.cancel();    mAcceptThread=null;  }  mConnectedThread=new ConnectedThread(socket);  mConnectedThread.start();  mBluetoothDevice=socket.getRemoteDevice();  setState(State.STATE_CONNECTED);}  }
class C{  protected CollectionAdminResponse deleteCollection(String collectionName) throws Exception {  SolrClient client=createCloudClient(null);  CollectionAdminResponse res;  try {    ModifiableSolrParams params=new ModifiableSolrParams();    params.set("action",CollectionParams.CollectionAction.DELETE.toString());    params.set("name",collectionName);    QueryRequest request=new QueryRequest(params);    request.setPath("/admin/collections");    res=new CollectionAdminResponse();    res.setResponse(client.request(request));  } catch (  Exception e) {    log.warn("Error while deleting the collection " + collectionName,e);    return new CollectionAdminResponse();  } finally {    client.close();  }  return res;}  }
class C{  public void sendMessage(String configKey,String value){  if (mPeerId != null) {    DataMap config=new DataMap();    config.putString(configKey,value);    byte[] rawData=config.toByteArray();    Wearable.MessageApi.sendMessage(mGoogleApiClient,mPeerId,PATH_WITH_FEATURE,rawData);  }}  }
class C{  public MoveDownAction(){  putValue(SMALL_ICON,new ImageIcon(CMain.class.getResource("data/arrow_down.png")));}  }
class C{  @Override public void startRadio(String streamURL){  mService.play(streamURL);}  }
class C{  public ClusterInfo(final Map<String,DiskUsage> leastAvailableSpaceUsage,final Map<String,DiskUsage> mostAvailableSpaceUsage,final Map<String,Long> shardSizes,Map<ShardRouting,String> routingToDataPath){  this.leastAvailableSpaceUsage=leastAvailableSpaceUsage;  this.shardSizes=shardSizes;  this.mostAvailableSpaceUsage=mostAvailableSpaceUsage;  this.routingToDataPath=routingToDataPath;}  }
class C{  public String normalizeSystemName(String systemName){  boolean aMatch=aCodes.reset(systemName).matches();  int aCount=aCodes.groupCount();  boolean hMatch=hCodes.reset(systemName).matches();  int hCount=hCodes.groupCount();  boolean iMatch=iCodes.reset(systemName).matches();  int iCount=iCodes.groupCount();  if (!aMatch || aCount != 2 || (!validSystemNameFormat(systemName,aCodes.group(2).charAt(0)))) {    return "";  }  String nName="";  if (hMatch && hCount == 4) {    nName=hCodes.group(1) + hCodes.group(2) + hCodes.group(3)+ Integer.toString(Integer.parseInt(hCodes.group(4)));  }  if (nName.equals("")) {    if (iMatch && iCount == 5) {      nName=iCodes.group(1) + iCodes.group(2) + iCodes.group(3)+ "."+ iCodes.group(4)+ "."+ iCodes.group(5);    } else {      if (log.isDebugEnabled()) {        log.debug("valid name doesn't normalize: " + systemName + " hMatch: "+ hMatch+ " hCount: "+ hCount);      }    }  }  return nName;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildprincipal(zone);}  }
class C{  public boolean equals(Object other){  if (!(other instanceof action_part))   return false; else   return equals((action_part)other);}  }
class C{  public ParseException generateParseException(){  jj_expentries.clear();  boolean[] la1tokens=new boolean[40];  if (jj_kind >= 0) {    la1tokens[jj_kind]=true;    jj_kind=-1;  }  for (int i=0; i < 23; i++) {    if (jj_la1[i] == jj_gen) {      for (int j=0; j < 32; j++) {        if ((jj_la1_0[i] & (1 << j)) != 0) {          la1tokens[j]=true;        }        if ((jj_la1_1[i] & (1 << j)) != 0) {          la1tokens[32 + j]=true;        }      }    }  }  for (int i=0; i < 40; i++) {    if (la1tokens[i]) {      jj_expentry=new int[1];      jj_expentry[0]=i;      jj_expentries.add(jj_expentry);    }  }  jj_endpos=0;  jj_rescan_token();  jj_add_error_token(0,0);  int[][] exptokseq=new int[jj_expentries.size()][];  for (int i=0; i < jj_expentries.size(); i++) {    exptokseq[i]=jj_expentries.get(i);  }  return new ParseException(token,exptokseq,tokenImage);}  }
class C{  public void reset(){  color=null;  background=null;}  }
class C{  private static double determinant(DelaunayVertex[] matrix,int row,boolean[] columns){  if (row == matrix.length) {    return 1;  }  double sum=0;  int sign=1;  for (int col=0; col < columns.length; col++) {    if (!columns[col]) {      continue;    }    columns[col]=false;    sum+=sign * matrix[row].coordinates[col] * determinant(matrix,row + 1,columns);    columns[col]=true;    sign=-sign;  }  return sum;}  }
class C{  public DataTable(){  this(new DataSortedTableModel(""));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (isNetworkedPlaylistCall(stack,0)) {    return makeNetworkedCall(stack);  }  Playlist p=getPlaylist(stack);  if (p != null && p.getID() == 0) {    p.clear();  } else   if (Permissions.hasPermission(Permissions.PERMISSION_PLAYLIST,stack.getUIMgr())) {    Wizard.getInstance().removePlaylist(p);    sage.plugin.PluginEventManager.postEvent(sage.plugin.PluginEventManager.PLAYLIST_REMOVED,new Object[]{sage.plugin.PluginEventManager.VAR_PLAYLIST,p,sage.plugin.PluginEventManager.VAR_UICONTEXT,(stack.getUIMgr() != null ? stack.getUIMgr().getLocalUIClientName() : null)});  }  return null;}  }
class C{  public static void stopStoreSessionListeners(GridKernalContext ctx,Collection<CacheStoreSessionListener> sesLsnrs) throws IgniteCheckedException {  if (sesLsnrs == null)   return;  for (  CacheStoreSessionListener lsnr : sesLsnrs) {    if (lsnr instanceof LifecycleAware)     ((LifecycleAware)lsnr).stop();    ctx.resource().cleanupGeneric(lsnr);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public synchronized void engineStore(OutputStream stream,char[] password) throws IOException, NoSuchAlgorithmException, CertificateException {  if (password == null) {    throw new IllegalArgumentException("password can't be null");  }  DerOutputStream pfx=new DerOutputStream();  DerOutputStream version=new DerOutputStream();  version.putInteger(VERSION_3);  byte[] pfxVersion=version.toByteArray();  pfx.write(pfxVersion);  DerOutputStream authSafe=new DerOutputStream();  DerOutputStream authSafeContentInfo=new DerOutputStream();  if (privateKeyCount > 0 || secretKeyCount > 0) {    if (debug != null) {      debug.println("Storing " + (privateKeyCount + secretKeyCount) + " protected key(s) in a PKCS#7 data content-type");    }    byte[] safeContentData=createSafeContent();    ContentInfo dataContentInfo=new ContentInfo(safeContentData);    dataContentInfo.encode(authSafeContentInfo);  }  if (certificateCount > 0) {    if (debug != null) {      debug.println("Storing " + certificateCount + " certificate(s) in a PKCS#7 encryptedData content-type");    }    byte[] encrData=createEncryptedData(password);    ContentInfo encrContentInfo=new ContentInfo(ContentInfo.ENCRYPTED_DATA_OID,new DerValue(encrData));    encrContentInfo.encode(authSafeContentInfo);  }  DerOutputStream cInfo=new DerOutputStream();  cInfo.write(DerValue.tag_SequenceOf,authSafeContentInfo);  byte[] authenticatedSafe=cInfo.toByteArray();  ContentInfo contentInfo=new ContentInfo(authenticatedSafe);  contentInfo.encode(authSafe);  byte[] authSafeData=authSafe.toByteArray();  pfx.write(authSafeData);  byte[] macData=calculateMac(password,authenticatedSafe);  pfx.write(macData);  DerOutputStream pfxout=new DerOutputStream();  pfxout.write(DerValue.tag_Sequence,pfx);  byte[] pfxData=pfxout.toByteArray();  stream.write(pfxData);  stream.flush();}  }
class C{  void back(){  if (index > 0)   index--;}  }
class C{  private void initializeLiveAttributes(){  target=createLiveAnimatedString(null,SVG_TARGET_ATTRIBUTE);}  }
class C{  public void applyToTaskView(View v,int duration,Interpolator interp,boolean allowLayers,boolean allowShadows,ValueAnimator.AnimatorUpdateListener updateCallback){  if (duration > 0) {    ViewPropertyAnimator anim=v.animate();    boolean requiresLayers=false;    if (hasTranslationYChangedFrom(v.getTranslationY())) {      anim.translationY(translationY);    }    if (allowShadows && hasTranslationZChangedFrom(v.getTranslationZ())) {      anim.translationZ(translationZ);    }    if (hasScaleChangedFrom(v.getScaleX())) {      anim.scaleX(scale).scaleY(scale);      requiresLayers=true;    }    if (hasAlphaChangedFrom(v.getAlpha())) {      anim.alpha(alpha);      requiresLayers=true;    }    if (requiresLayers && allowLayers) {      anim.withLayer();    }    if (updateCallback != null) {      anim.setUpdateListener(updateCallback);    } else {      anim.setUpdateListener(null);    }    anim.setStartDelay(startDelay).setDuration(duration).setInterpolator(interp).start();  } else {    if (hasTranslationYChangedFrom(v.getTranslationY())) {      v.setTranslationY(translationY);    }    if (allowShadows && hasTranslationZChangedFrom(v.getTranslationZ())) {      v.setTranslationZ(translationZ);    }    if (hasScaleChangedFrom(v.getScaleX())) {      v.setScaleX(scale);      v.setScaleY(scale);    }    if (hasAlphaChangedFrom(v.getAlpha())) {      v.setAlpha(alpha);    }  }}  }
class C{  @Override public Iterator iterator(){  return new StructBagIterator(fieldValuesIterator());}  }
class C{  public Tradestrategy findTradestrategyByUniqueKeys(final ZonedDateTime open,final String strategy,final Integer idContract,final String portfolioName) throws PersistentModelException {  return m_tradestrategyHome.findTradestrategyByUniqueKeys(open,strategy,idContract,portfolioName);}  }
class C{  public void print(String value) throws IOException {  print(value,true);}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy,int duration){  mScrollerX.mMode=mScrollerY.mMode=SCROLL_MODE;  mScrollerX.startScroll(startX,dx,duration);  mScrollerY.startScroll(startY,dy,duration);}  }
class C{  public void testSortsElementsWithDifferentValue() throws Exception {  XppDom dom1=XppFactory.buildDom("<dom>value1</dom>");  XppDom dom2=XppFactory.buildDom("<dom>value2</dom>");  assertEquals(-1,comparator.compare(dom1,dom2));  assertEquals("/dom::text()",xpath.get());  assertEquals(1,comparator.compare(dom2,dom1));  assertEquals("/dom::text()",xpath.get());}  }
class C{  public void initGUI(){  removeAll();  try {    URL url=PropUtils.getResourceOrFileOrURL(this,forwardIconURL);    forwardIcon=new ImageIcon(url);    url=PropUtils.getResourceOrFileOrURL(this,forwardStepIconURL);    forwardStepIcon=new ImageIcon(url);    url=PropUtils.getResourceOrFileOrURL(this,backwardIconURL);    backwardIcon=new ImageIcon(url);    url=PropUtils.getResourceOrFileOrURL(this,backwardStepIconURL);    backwardStepIcon=new ImageIcon(url);    url=PropUtils.getResourceOrFileOrURL(this,pauseIconURL);    pauseIcon=new ImageIcon(url);  } catch (  MalformedURLException murle) {    Debug.error("TimerToggleButton: initGUI() bad icon.");  }catch (  NullPointerException npe) {    Debug.error("TimerToggleButton: initGUI() bad icon.");    npe.printStackTrace();  }  JToolBar jtb=new JToolBar();  jtb.setFloatable(false);  backwardButton=new JButton(backwardIcon);  backwardButton.setToolTipText("Run Timer Backwards");  backwardButton.setActionCommand(TimerStatus.TIMER_BACKWARD);  backwardButton.addActionListener(this);  jtb.add(backwardButton);  JButton button=new JButton(backwardStepIcon);  button.setToolTipText("Step Timer Backward");  button.setActionCommand(TimerStatus.TIMER_STEP_BACKWARD);  button.addActionListener(this);  jtb.add(button);  button=new JButton(forwardStepIcon);  button.setToolTipText("Step Timer Forward");  button.setActionCommand(TimerStatus.TIMER_STEP_FORWARD);  button.addActionListener(this);  jtb.add(button);  forwardButton=new JButton(forwardIcon);  forwardButton.setToolTipText("Run Timer Forward");  forwardButton.setActionCommand(TimerStatus.TIMER_FORWARD);  forwardButton.addActionListener(this);  jtb.add(forwardButton);  add(jtb);}  }
class C{  private void calculateCalibration(long difference,float currentMeasure,byte currentIndex){  if (difference >= MedtronicConstants.TIME_15_MIN_IN_MS && difference < MedtronicConstants.TIME_20_MIN_IN_MS) {    if (isSensorMeasureInRange(currentIndex,expectedSensorSortNumberForCalibration)) {      isCalibrating=false;      calibrationStatus=MedtronicConstants.CALIBRATED;      calibrationIsigValue=currentMeasure;      SharedPreferences.Editor editor=settings.edit();      calibrationFactor=lastGlucometerValue / calibrationIsigValue;      editor.remove("expectedSensorSortNumberForCalibration0");      editor.remove("expectedSensorSortNumberForCalibration1");      editor.putFloat("calibrationFactor",(float)calibrationFactor);      editor.putInt("calibrationStatus",calibrationStatus);      editor.commit();    } else {      if (calibrationStatus != MedtronicConstants.WITHOUT_ANY_CALIBRATION && currentIndex != expectedSensorSortNumber) {        calibrationStatus=MedtronicConstants.LAST_CALIBRATION_FAILED_USING_PREVIOUS;        isCalibrating=false;      } else {        calibrationStatus=MedtronicConstants.WITHOUT_ANY_CALIBRATION;      }      SharedPreferences.Editor editor=settings.edit();      editor.remove("expectedSensorSortNumberForCalibration0");      editor.remove("expectedSensorSortNumberForCalibration1");      editor.commit();    }  } else   if (difference >= MedtronicConstants.TIME_20_MIN_IN_MS) {    if (isSensorMeasureInRange(currentIndex,expectedSensorSortNumberForCalibration)) {      calibrationStatus=MedtronicConstants.CALIBRATED_IN_15MIN;      calibrationIsigValue=currentMeasure;      SharedPreferences.Editor editor=settings.edit();      calibrationFactor=lastGlucometerValue / calibrationIsigValue;      editor.remove("expectedSensorSortNumberForCalibration0");      editor.remove("expectedSensorSortNumberForCalibration1");      editor.putFloat("calibrationFactor",(float)calibrationFactor);      editor.putInt("calibrationStatus",calibrationStatus);      editor.commit();    } else {      if (calibrationStatus != MedtronicConstants.WITHOUT_ANY_CALIBRATION)       calibrationStatus=MedtronicConstants.LAST_CALIBRATION_FAILED_USING_PREVIOUS; else {        calibrationStatus=MedtronicConstants.WITHOUT_ANY_CALIBRATION;      }      SharedPreferences.Editor editor=settings.edit();      editor.remove("expectedSensorSortNumberForCalibration0");      editor.remove("expectedSensorSortNumberForCalibration1");      editor.commit();    }    isCalibrating=false;  } else {    if (isCalibrating) {      if (difference < MedtronicConstants.TIME_5_MIN_IN_MS) {        calibrationStatus=MedtronicConstants.CALIBRATING;      } else       if (difference >= MedtronicConstants.TIME_5_MIN_IN_MS && difference <= MedtronicConstants.TIME_15_MIN_IN_MS)       calibrationStatus=MedtronicConstants.CALIBRATING2; else       calibrationStatus=MedtronicConstants.CALIBRATING;    } else {      if (calibrationStatus != MedtronicConstants.WITHOUT_ANY_CALIBRATION)       calibrationStatus=MedtronicConstants.LAST_CALIBRATION_FAILED_USING_PREVIOUS; else {        calibrationStatus=MedtronicConstants.WITHOUT_ANY_CALIBRATION;      }      SharedPreferences.Editor editor=settings.edit();      editor.remove("expectedSensorSortNumberForCalibration0");      editor.remove("expectedSensorSortNumberForCalibration1");      editor.putInt("calibrationStatus",calibrationStatus);      editor.commit();    }  }}  }
class C{  @Inline @Entrypoint public static void floatArrayWrite(float[] ref,int index,float value){  if (NEEDS_FLOAT_GC_WRITE_BARRIER) {    ObjectReference array=ObjectReference.fromObject(ref);    Offset offset=Offset.fromIntZeroExtend(index << LOG_BYTES_IN_FLOAT);    Selected.Mutator.get().floatWrite(array,array.toAddress().plus(offset),value,offset.toWord(),Word.zero(),ARRAY_ELEMENT);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public static boolean isXMLDocument(Object o){  return o instanceof Document;}  }
class C{  public static synchronized void injectPools(ExecutorService globalThreadPool,ScheduledExecutorService scheduledThreadPool){  if (globalThreadPool == null || scheduledThreadPool == null)   throw new IllegalArgumentException("thread pools must not be null");  clearThreadPools();  ActiveMQClient.globalThreadPool=globalThreadPool;  ActiveMQClient.globalScheduledThreadPool=scheduledThreadPool;  injectedPools=true;}  }
class C{  protected void reportWarning(String msg,long lineNo,long columnNo){  if (errListener != null) {    errListener.warning(msg,lineNo,columnNo);  }}  }
class C{  public static String loadTextFileFromAssets(Context context,String fileName) throws IOException {  InputStream inputStream=context.getAssets().open(fileName);  try {    OutputStream outputStream=new ByteArrayOutputStream();    try {      byte[] buffer=new byte[DEFAULT_BUFFER_SIZE];      for (int n; (n=inputStream.read(buffer)) >= 0; ) {        outputStream.write(buffer,0,n);      }      return outputStream.toString();    }  finally {      outputStream.close();    }  }  finally {    inputStream.close();  }}  }
class C{  private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {  try {    ois.defaultReadObject();    remove(m_visualLabel);    m_visualLabel=new JLabel(m_icon);    loadIcons(m_iconPath,m_animatedIconPath);    add(m_visualLabel,BorderLayout.CENTER);    Dimension d=m_visualLabel.getPreferredSize();    Dimension d2=new Dimension((int)d.getWidth() + 10,(int)d.getHeight() + 10);    setMinimumSize(d2);    setPreferredSize(d2);    setMaximumSize(d2);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public void cacheEntryAdded(CacheEntryEvent arg0){  super.cacheEntryAdded(arg0);  StringBuffer buffer=new StringBuffer();  buffer.append("Cache entry added [");  buffer.append(arg0.getEntry().getKey());  buffer.append("]. Added [");  buffer.append(getEntryAddedCount());  buffer.append("] Removed [");  buffer.append(getEntryRemovedCount());  buffer.append("]");  log.debug(buffer.toString());}  }
class C{  public CtClass[] mayThrow(){  return super.mayThrow();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:36.469 -0500",hash_original_method="19A6345BB30DA1B94EF425A139EBF7B6",hash_generated_method="3F38B0E9396A1A008A1A74F14E81449E") public boolean isColumnCollapsed(int columnIndex){  return mCollapsedColumns.get(columnIndex);}  }
class C{  @Override public Object dataAccessObjectProcess(ProceedingJoinPoint pjp) throws AuthorityException, ServiceException, Throwable {  return pjp.proceed();}  }
class C{  public int nextNode(){  if (m_foundLast)   return DTM.NULL;  int next;  if (null != m_exprObj) {    m_lastFetched=next=m_exprObj.nextNode();  } else   m_lastFetched=next=DTM.NULL;  if (DTM.NULL != next) {    m_pos++;    return next;  } else {    m_foundLast=true;    return DTM.NULL;  }}  }
class C{  private void updateUiForConfigDataMap(final DataMap config){  boolean uiUpdated=false;  for (  String configKey : config.keySet()) {    if (!config.containsKey(configKey)) {      continue;    }    if (updateUiForKey(configKey,config)) {      uiUpdated=true;    }  }  if (uiUpdated) {    invalidate();    sendMessage("WEARABLE_SETTINGS_CHANGE",config.toByteArray());  }}  }
class C{  public void stop(){  if (mLocaleChangedReceiver != null) {    mCtx.unregisterReceiver(mLocaleChangedReceiver);    mLocaleChangedReceiver=null;  }  mUpdateExecutor.shutdownNow();}  }
class C{  @Deprecated public ScriptSortBuilder lang(String lang){  this.lang=lang;  return this;}  }
class C{  public void reset(){  super.reset();  H0=0x67452301;  H1=0xefcdab89;  H2=0x98badcfe;  H3=0x10325476;  H4=0x76543210;  H5=0xFEDCBA98;  H6=0x89ABCDEF;  H7=0x01234567;  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof AbstractChronology) {    return compareTo((AbstractChronology)obj) == 0;  }  return false;}  }
class C{  @Override protected final Object clone(){  return this;}  }
class C{  private Object readResolve(){  dataset=new XYSeriesCollection();  dataset.addSeries(new XYSeries("Data",false,true));  projector.postOpenInit();  addListeners();  return this;}  }
class C{  @Override public void updateSelectionTo(Collection<GraphNode> selection){  for (  GraphNode node : getEditor().getViewGraph().getNodes()) {    NodeWrapper<NodeDisplayProperty> nodeWrapper=nodeTreeView.getNodeWrapper(node);    if (null != nodeWrapper) {      nodeTreeView.getTreeViewer().update(nodeWrapper,new String[]{COL_SELECTED});    }  }  updateSelectedExtend(selection);}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public static char toDimensionSymbol(int dimensionValue){switch (dimensionValue) {case FALSE:    return SYM_FALSE;case TRUE:  return SYM_TRUE;case DONTCARE:return SYM_DONTCARE;case P:return SYM_P;case L:return SYM_L;case A:return SYM_A;}throw new IllegalArgumentException("Unknown dimension value: " + dimensionValue);}  }
class C{  private K highestKey(){  ConcurrentSkipListMap.Node<K,V> n=hiNode();  if (n != null) {    K last=n.key;    if (inBounds(last))     return last;  }  throw new NoSuchElementException();}  }
class C{  public ScatterPlotSetter(final Integer index){  this.index=index;}  }
class C{  private boolean saveSelection(){  if (!m_readWrite)   return true;  log.info("");  MAttributeSet as=m_masi.getMAttributeSet();  if (as == null)   return true;  m_changed=false;  String mandatory="";  if ((!m_productWindow || !m_productASI) && as.isLot()) {    log.fine("Lot=" + fieldLotString.getText());    String text=fieldLotString.getText();    m_masi.setLot(text);    if (as.isLotMandatory() && (text == null || text.length() == 0))     mandatory+=" - " + Msg.translate(Env.getCtx(),"Lot");    m_changed=true;  }  if ((!m_productWindow || !m_productASI) && as.isSerNo()) {    log.fine("SerNo=" + fieldSerNo.getText());    String text=fieldSerNo.getText();    m_masi.setSerNo(text);    if (as.isSerNoMandatory() && (text == null || text.length() == 0))     mandatory+=" - " + Msg.translate(Env.getCtx(),"SerNo");    m_changed=true;  }  if ((!m_productWindow || !m_productASI) && as.isGuaranteeDate()) {    log.fine("GuaranteeDate=" + fieldGuaranteeDate.getValue());    Timestamp ts=(Timestamp)fieldGuaranteeDate.getValue();    m_masi.setGuaranteeDate(ts);    if (as.isGuaranteeDateMandatory() && ts == null)     mandatory+=" - " + Msg.translate(Env.getCtx(),"GuaranteeDate");    m_changed=true;  }  if (m_changed || m_masi.getM_AttributeSetInstance_ID() == 0) {    m_masi.save();    m_M_AttributeSetInstance_ID=m_masi.getM_AttributeSetInstance_ID();    m_M_AttributeSetInstanceName=m_masi.getDescription();  }  if (m_M_AttributeSetInstance_ID > 0 && m_readWrite) {    MAttribute[] attributes=as.getMAttributes(!m_productASI);    for (int i=0; i < attributes.length; i++) {      if (MAttribute.ATTRIBUTEVALUETYPE_List.equals(attributes[i].getAttributeValueType())) {        CComboBox editor=(CComboBox)m_editors.get(i);        MAttributeValue value=(MAttributeValue)editor.getSelectedItem();        log.fine(attributes[i].getName() + "=" + value);        if (attributes[i].isMandatory() && value == null)         mandatory+=" - " + attributes[i].getName();        attributes[i].setMAttributeInstance(m_M_AttributeSetInstance_ID,value);      } else       if (MAttribute.ATTRIBUTEVALUETYPE_Number.equals(attributes[i].getAttributeValueType())) {        VNumber editor=(VNumber)m_editors.get(i);        BigDecimal value=(BigDecimal)editor.getValue();        log.fine(attributes[i].getName() + "=" + value);        if (attributes[i].isMandatory() && value == null)         mandatory+=" - " + attributes[i].getName();        if (value != null && value.scale() == 0)         value=value.setScale(1,BigDecimal.ROUND_HALF_UP);        attributes[i].setMAttributeInstance(m_M_AttributeSetInstance_ID,value);      } else {        VString editor=(VString)m_editors.get(i);        String value=editor.getText();        log.fine(attributes[i].getName() + "=" + value);        if (attributes[i].isMandatory() && (value == null || value.length() == 0))         mandatory+=" - " + attributes[i].getName();        attributes[i].setMAttributeInstance(m_M_AttributeSetInstance_ID,value);      }    }    m_changed=true;  }  if (m_changed) {    m_masi.setDescription();    m_masi.save();  }  m_M_AttributeSetInstance_ID=m_masi.getM_AttributeSetInstance_ID();  m_M_AttributeSetInstanceName=m_masi.getDescription();  if (mandatory.length() > 0) {    ADialog.error(m_WindowNo,this,"FillMandatory",mandatory);    return false;  }  return true;}  }
class C{  public static ArrayList<Instruction> cleanupRuntimeInstructions(ArrayList<Instruction> insts,String[] outputs){  for (int i=0; i < insts.size(); i++) {    Instruction linst=insts.get(i);    if (linst instanceof VariableCPInstruction && ((VariableCPInstruction)linst).isRemoveVariable()) {      VariableCPInstruction varinst=(VariableCPInstruction)linst;      for (      String var : outputs)       if (varinst.isRemoveVariable(var)) {        insts.remove(i);        i--;        break;      }    }  }  return insts;}  }
class C{  private void init(){  setFocusPainted(false);  setFocusable(false);  JComboBox box=new JComboBox();  Object preventHide=box.getClientProperty("doNotCancelPopup");  putClientProperty("doNotCancelPopup",preventHide);}  }
class C{  @Override public void beginOfStream() throws AdeException, AdeFlowException {  if (s_marshaller == null) {    JAXBContext jaxbContext;    try {      jaxbContext=JAXBContext.newInstance(ADEEXT_JAXB_CONTEXT);    } catch (    JAXBException e) {      throw new AdeInternalException("failed to create JAXBContext object for package " + Arrays.toString(ADEEXT_JAXB_CONTEXT),e);    }    try {      s_marshaller=jaxbContext.createMarshaller();    } catch (    JAXBException e) {      throw new AdeInternalException("failed to create JAXB Marshaller object",e);    }    try {      s_marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,m_formatXMLOutput);      s_marshaller.setProperty(Marshaller.JAXB_FRAGMENT,Boolean.TRUE);      s_marshaller.setProperty(Marshaller.JAXB_NO_NAMESPACE_SCHEMA_LOCATION,XML_INTERVAL_V2_XSD);    } catch (    PropertyException e) {      throw new AdeInternalException("failed to set formatted output for JAXB Marshaller object",e);    }    SchemaFactory sf=SchemaFactory.newInstance(javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI);    File xmlParent=Ade.getAde().getConfigProperties().getXsltDir().getAbsoluteFile();    xmlParent=xmlParent.getParentFile();    File intervalSchema=new File(xmlParent,XML_INTERVAL_V2_XSD);    Schema schema;    try {      URL analyzedIntervalSchema=intervalSchema.toURI().toURL();      schema=sf.newSchema(analyzedIntervalSchema);    } catch (    SAXException e) {      throw new AdeInternalException("failed to create XML Schemal for event log analysis results",e);    }catch (    MalformedURLException e) {      throw new AdeInternalException("failed to create URL from Schema path: " + intervalSchema.getAbsolutePath(),e);    }    s_marshaller.setSchema(schema);  }  m_xmlMetaData=new XMLMetaDataRetriever();}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (!new CustomDate(this.fechaFormato,this.fechaA,this.fechaM,this.fechaD,this.fechaS).validate() || !new CustomDate(this.fechaIniFormato,this.fechaIniA,this.fechaIniM,this.fechaIniD,this.fechaIniS).validate() || !new CustomDate(this.fechaFinFormato,this.fechaFinA,this.fechaFinM,this.fechaFinD,this.fechaFinS).validate()) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(DescripcionConstants.DESCRIPCION_BUSQUEDA_AUT_FECHA,request.getLocale())));  }  if (StringUtils.isNotBlank(numero) && !NumberUtils.isNumber(numero)) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_INVALID,Messages.getString(ArchivoDetails.DESCRIPCION_BUSQUEDA_DATO_NUMERICO,request.getLocale())));  }  if (listasDescriptoras.length == 0) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(ArchivoDetails.DESCRIPCION_BUSQUEDA_LISTAS_DESCRIPTORAS,request.getLocale())));  }  return errors;}  }
class C{  @Override public boolean canHandleJitter(){  return true;}  }
class C{  public OperationNotSupportException(Throwable arg0){  super(arg0);}  }
class C{  private static void initialize(GemFireCacheImpl cache){  try {    AttributesFactory factory=new AttributesFactory();    factory.setScope(Scope.LOCAL);    factory.setEntryTimeToLive(new ExpirationAttributes(ADMIN_REGION_EXPIRY_INTERVAL,ExpirationAction.DESTROY));    cache.getLogger().fine("ClientHealthMonitoringRegion, setting TTL for entry....");    factory.addCacheListener(prepareCacheListener());    factory.setStatisticsEnabled(true);    RegionAttributes regionAttrs=factory.create();    InternalRegionArguments internalArgs=new InternalRegionArguments();    internalArgs.setIsUsedForMetaRegion(true);    internalArgs.setIsUsedForPartitionedRegionAdmin(false);    currentInstance=cache.createVMRegion(ADMIN_REGION_NAME,regionAttrs,internalArgs);  } catch (  Exception ex) {    cache.getLoggerI18n().error(LocalizedStrings.ClientHealthMonitoringRegion_ERROR_WHILE_CREATING_AN_ADMIN_REGION,ex);  }}  }
class C{  public String namespace(){  return theNamespace;}  }
class C{  private List<StoragePool> processStorageThickPoolResponse(StorageSystem system,List<Pool> thickPoolListFromResponse,AccessProfile accessProfile,Set<String> supportedProtocols,List<StoragePool> poolsToMatchWithVpool) throws IOException {  _logger.debug("Entering {}",Thread.currentThread().getStackTrace()[1].getMethodName());  List<StoragePool> newPools=new ArrayList<StoragePool>();  List<StoragePool> updatePools=new ArrayList<StoragePool>();  List<StoragePool> allPools=new ArrayList<StoragePool>();  if (null != thickPoolListFromResponse && !thickPoolListFromResponse.isEmpty()) {    _logger.debug("thickPoolListFromResponse.size() :{}",thickPoolListFromResponse.size());    for (    Pool poolFromResponse : thickPoolListFromResponse) {      _logger.debug("Pool Id:{}",poolFromResponse.getPoolID());      if (!(0 == Integer.valueOf(poolFromResponse.getType()) || -1 == Integer.valueOf(poolFromResponse.getType()) || 1 == Integer.valueOf(poolFromResponse.getType()))) {        continue;      }      boolean isNew=false;      boolean isModified=false;      String nativeGuid=NativeGUIDGenerator.generateNativeGuid(system,poolFromResponse.getObjectID(),NativeGUIDGenerator.POOL);      _logger.debug("nativeGuid :{}",nativeGuid);      StoragePool pool=checkPoolExistsInDB(nativeGuid);      if (null == pool) {        isNew=true;        pool=new StoragePool();        pool.setNativeGuid(nativeGuid);        pool.setStorageDevice(system.getId());        pool.setId(URIUtil.createId(StoragePool.class));        pool.setNativeId(poolFromResponse.getPoolID());        pool.setOperationalStatus(StoragePool.PoolOperationalStatus.READY.toString());        pool.setMaximumThickVolumeSize(104857600L);        pool.setPoolServiceType(PoolServiceType.block.toString());        pool.setRegistrationStatus(DiscoveredDataObject.RegistrationStatus.REGISTERED.toString());        StringSet raidLevels=new StringSet();        String raidLevel=parseRaidLevel(poolFromResponse.getRaidType());        if (StringUtils.isNotEmpty(raidLevel)) {          raidLevels.add(raidLevel);        }        pool.addSupportedRaidLevels(raidLevels);        pool.setSupportedResourceTypes(StoragePool.SupportedResourceTypes.THICK_ONLY.toString());        _logger.info("poolType {} {}",poolFromResponse.getType(),poolFromResponse.getObjectID());      }      StringSet protocols=new StringSet(supportedProtocols);      if (!isNew && ImplicitPoolMatcher.checkPoolPropertiesChanged(pool.getProtocols(),protocols)) {        isModified=true;      }      pool.setProtocols(protocols);      pool.setPoolName(poolFromResponse.getDisplayName());      pool.setFreeCapacity(poolFromResponse.getFreeCapacity());      StringSet copyTypes=new StringSet();      copyTypes.add(StoragePool.CopyTypes.UNSYNC_ASSOC.name());      copyTypes.add(StoragePool.CopyTypes.UNSYNC_UNASSOC.name());      copyTypes.add(StoragePool.CopyTypes.SYNC.name());      copyTypes.add(StoragePool.CopyTypes.ASYNC.name());      pool.setSupportedCopyTypes(copyTypes);      pool.setTotalCapacity(poolFromResponse.getFreeCapacity() + poolFromResponse.getUsedCapacity());      if (StringUtils.isNotBlank(poolFromResponse.getDisplayName())) {        pool.setLabel(poolFromResponse.getDisplayName().length() == 1 ? " " + poolFromResponse.getDisplayName() : poolFromResponse.getDisplayName());      }      if (!isNew && !isModified && (ImplicitPoolMatcher.checkPoolPropertiesChanged(pool.getCompatibilityStatus(),CompatibilityStatus.COMPATIBLE.name()) || ImplicitPoolMatcher.checkPoolPropertiesChanged(pool.getDiscoveryStatus(),DiscoveryStatus.VISIBLE.name()))) {        isModified=true;      }      pool.setCompatibilityStatus(CompatibilityStatus.COMPATIBLE.name());      pool.setDiscoveryStatus(DiscoveryStatus.VISIBLE.name());      if (isNew) {        newPools.add(pool);        poolsToMatchWithVpool.add(pool);      } else {        updatePools.add(pool);        if (isModified) {          poolsToMatchWithVpool.add(pool);        }      }    }    StoragePoolAssociationHelper.setStoragePoolVarrays(system.getId(),newPools,_dbClient);    _logger.debug("newPools size:{}",newPools.size());    _logger.debug("updatePools size:{}",updatePools.size());    _dbClient.createObject(newPools);    _dbClient.persistObject(updatePools);    allPools.addAll(newPools);    allPools.addAll(updatePools);  }  _logger.debug("Exiting {}",Thread.currentThread().getStackTrace()[1].getMethodName());  return allPools;}  }
class C{  public void translate(Properties ctx){  if (m_originalString == null)   return;  String inText=Msg.parseTranslation(ctx,m_originalString);  String[] lines=Pattern.compile("$",Pattern.MULTILINE).split(inText);  m_string_paper=new AttributedString[lines.length];  for (int i=0; i < lines.length; i++) {    String line=Util.removeCRLF(lines[i]);    m_string_paper[i]=new AttributedString(line);    if (line.length() > 0) {      m_string_paper[i].addAttribute(TextAttribute.FONT,m_font);      m_string_paper[i].addAttribute(TextAttribute.FOREGROUND,m_paint);    }  }  m_string_view=m_string_paper;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:30.328 -0500",hash_original_method="C0D74F5DDFD9A01C19E54F3379BA7652",hash_generated_method="618EE3A321C4FFDE67749913AA58ADE8") final public boolean isAdded(){  return mActivity != null && mAdded;}  }
class C{  public void onReferencesBuild(RefElement refElement){}  }
class C{  public Matrix4f(){  mMat=new float[16];  loadIdentity();}  }
class C{  public static void responseCodeReceived(Context context,RestoreTransactions request,ResponseCode responseCode){  if (sPurchaseObserver != null) {    sPurchaseObserver.onRestoreTransactionsResponse(request,responseCode);  }}  }
class C{  public Partition(double ratio[],int size,PartitionBuilder builder){  init(ratio,size,builder);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.log(z));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void java_lang_Class_setSigners(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  ReferenceVariable tempFld=helper.tempField("<java.lang.Class signers>");  helper.assign(tempFld,params[0]);}  }
class C{  public UserTunnel(UserContext userContext,GuacamoleTunnel tunnel){  super(tunnel);  this.userContext=userContext;}  }
class C{  protected JTree createTree(){  JTree tree=new JTree(model);  tree.setName("TreePopup.tree");  tree.setFont(getFont());  tree.setForeground(getForeground());  tree.setBackground(getBackground());  tree.setBorder(null);  tree.setFocusable(true);  tree.addMouseListener(handler);  tree.addKeyListener(handler);  tree.setCellRenderer(new Renderer());  return tree;}  }
class C{  @Override public int aggregateData(AbstractScannedResult scannedResult){  while (scannedResult.hasNext()) {    wrapper.setDictionaryKey(scannedResult.getDictionaryKeyArray());    wrapper.setNoDictionaryKeys(scannedResult.getNoDictionaryKeyArray());    wrapper.setComplexTypesKeys(scannedResult.getComplexTypeKeyArray());    MeasureAggregator[] measureAggregators=aggData.get(wrapper);    if (null == measureAggregators) {      measureAggregators=getNewAggregator();      ByteArrayWrapper byteArrayWrapper=wrapper;      wrapper=new ByteArrayWrapper();      aggData.put(byteArrayWrapper,measureAggregators);    }    dataAggregator.aggregateData(scannedResult,measureAggregators);  }  return 0;}  }
class C{  public void testCrashCorruptsIndexing() throws Exception {  path=createTempDir("testCrashCorruptsIndexing");  indexAndCrashOnCreateOutputSegments2();  searchForFleas(2);  indexAfterRestart();  searchForFleas(3);}  }
class C{  public ServiceHost startService(Service service){  Operation post=Operation.createPost(UriUtils.buildUri(this,service.getClass()));  return startService(post,service);}  }
class C{  public String dropEngine(Engine engine){  StringBuilder builder=new StringBuilder();  for (  String attribute : Setup.getDropEngineMessageFormat()) {    builder.append(getEngineAttribute(engine,attribute,!PICKUP));  }  return builder.toString();}  }
class C{  @Override public boolean rowInserted() throws SQLException {  try {    debugCodeCall("rowInserted");    return false;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:22.109 -0500",hash_original_method="3044E621F64D9746C61861BC2D15D7B8",hash_generated_method="55D3BEE5320ADD2D9AB948841488DEF3") private void sendMessage(byte[] msg,boolean retry) throws IOException {  Socket sock=this.sipStack.ioHandler.sendBytes(this.messageProcessor.getIpAddress(),this.peerAddress,this.peerPort,this.peerProtocol,msg,retry,this);  if (sock != mySock && sock != null) {    try {      if (mySock != null)       mySock.close();    } catch (    IOException ex) {    }    mySock=sock;    this.myClientInputStream=mySock.getInputStream();    this.myClientOutputStream=mySock.getOutputStream();    Thread thread=new Thread(this);    thread.setDaemon(true);    thread.setName("TCPMessageChannelThread");    thread.start();  }}  }
class C{  public int indexOf(final StrMatcher matcher){  return indexOf(matcher,0);}  }
class C{  public static void checkArgument(boolean expression,Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  public int score(){  return score;}  }
class C{  public void tryToDequeueAllOneToOneChatMessagesAndOneToOneFileTransfers(){  mImOperationHandler.post(new OneToOneChatDequeueTask(mCtx,mCore,mMessagingLog,mRcsSettings,mChatService,mFileTransferService,mContactManager,mHistoryLog));}  }
class C{  public DisposableLazy(){  super();}  }
class C{  public boolean selectSingleNode(D nodeData){  if ((selectedNodes.size() == 1) && (selectedNodes.get(0).equals(nodeData))) {    return false;  }  clearSelections();  insertAndSelectNode(nodeData,0,true);  return true;}  }
class C{  @Deprecated public MutuallyExclusiveSetLock(boolean fair){  this(fair,null);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void start(){  mStarted=true;  mEnableSessionInvalidationsTimer.resume();  Intent intent=new Intent(mContext,InvalidationClientService.class);  mContext.startService(intent);}  }
class C{  public static SimpleSimulationProperties serializableInstance(){  return new SimpleSimulationProperties();}  }
class C{  public Annotation(boolean isPersistent){  this(null,isPersistent,null,0,null,null);}  }
class C{  public void addState(int[] specs,Animation animation){  Tuple tuple=new Tuple(specs,animation);  animation.setAnimationListener(mAnimationListener);  mTuples.add(tuple);}  }
class C{  public void decodeAttributeBody(byte[] attributeValue,char offset,char length){  hmacSha1Content=new byte[length];  System.arraycopy(attributeValue,offset,hmacSha1Content,0,length);}  }
class C{  public ShapeWriter(PointTransformation pointTransformer,PointShapeFactory pointFactory){  if (pointTransformer != null)   this.pointTransformer=pointTransformer;  if (pointFactory != null)   this.pointFactory=pointFactory;}  }
class C{  private int handleDataMessage(String lastRxMsg){  int result=0;switch (service) {case OBD_SVC_NONE:    break;case OBD_SVC_CAN_MONITOR:  result=canProt.handleTelegram(lastRxMsg.toCharArray());break;default :result=super.handleTelegram(lastRxMsg.toCharArray());}return result;}  }
class C{  public final Intersection[] intersect(Line line){  if (line == null) {    String message=Logging.getMessage("nullValue.LineIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double a=line.getDirection().getLengthSquared3();  double b=2 * line.selfDot();  double c=line.getOrigin().getLengthSquared3() - this.radius * this.radius;  double discriminant=Sphere.discriminant(a,b,c);  if (discriminant < 0)   return null;  double discriminantRoot=Math.sqrt(discriminant);  if (discriminant == 0) {    Vec4 p=line.getPointAt((-b - discriminantRoot) / (2 * a));    return new Intersection[]{new Intersection(p,true)};  } else {    Vec4 near=line.getPointAt((-b - discriminantRoot) / (2 * a));    Vec4 far=line.getPointAt((-b + discriminantRoot) / (2 * a));    return new Intersection[]{new Intersection(near,false),new Intersection(far,false)};  }}  }
class C{  public void addMessageToConsole(String message,int lineNumber,String sourceID,int msgLevel){  if (mWebChromeClient == null) {    return;  }  Message msg=obtainMessage(ADD_MESSAGE_TO_CONSOLE);  msg.getData().putString("message",message);  msg.getData().putString("sourceID",sourceID);  msg.getData().putInt("lineNumber",lineNumber);  msg.getData().putInt("msgLevel",msgLevel);  sendMessage(msg);}  }
class C{  public org.smpte_ra.schemas.st2067_2_2016.CompositionTimecodeType buildCompositionTimeCode(BigInteger compositionEditRate){  org.smpte_ra.schemas.st2067_2_2016.CompositionTimecodeType compositionTimecodeType=new CompositionTimecodeType();  compositionTimecodeType.setTimecodeDropFrame(false);  compositionTimecodeType.setTimecodeRate(compositionEditRate);  compositionTimecodeType.setTimecodeStartAddress(IMFUtils.generateTimecodeStartAddress());  return compositionTimecodeType;}  }
class C{  public static String saveImageResultsToHtml(String prefix,ImageSearchHits hits,String queryImage,IndexReader reader) throws IOException {  long l=System.currentTimeMillis() / 1000;  String fileName="results-" + prefix + "-"+ l+ ".html";  BufferedWriter bw=new BufferedWriter(new FileWriter(fileName));  bw.write("<html>\n" + "<head><title>Search Results</title></head>\n" + "<body bgcolor=\"#FFFFFF\">\n");  bw.write("<h3>query</h3>\n");  bw.write("<a href=\"file://" + queryImage + "\"><img src=\"file://"+ queryImage+ "\"></a><p>\n");  bw.write("<h3>results</h3>\n");  for (int i=0; i < hits.length(); i++) {    bw.write(hits.score(i) + " - <a href=\"file://" + reader.document(hits.documentID(i)).getValues(DocumentBuilder.FIELD_NAME_IDENTIFIER)[0]+ "\"><img src=\"file://"+ reader.document(hits.documentID(i)).getValues(DocumentBuilder.FIELD_NAME_IDENTIFIER)[0]+ "\"></a><p>\n");  }  bw.write("</body>\n" + "</html>");  bw.close();  return fileName;}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzBufferArrayL=zzBufferArray;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++)); else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 2:{        return JavaTokenType.WHITE_SPACE;      }case 7:    break;case 3:{    return SPITokenType.IDENTIFIER;  }case 8:break;case 6:{return JavaTokenType.DOT;}case 9:break;case 5:{return SPITokenType.DOLLAR;}case 10:break;case 4:{return JavaTokenType.END_OF_LINE_COMMENT;}case 11:break;case 1:{return JavaTokenType.BAD_CHARACTER;}case 12:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;zzDoEOF();return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public RequestBuilder form(Object... args){  return with(formParams,args);}  }
class C{  private static MyPresenceManager createInstance(Context context,MXSession session){  MyPresenceManager instance=new MyPresenceManager(context,session);  instances.put(session,instance);  return instance;}  }
class C{  public Builder(){}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  boolean flag;  int row, col, rN, cN, r, c, count;  double xCoord, yCoord;  int progress;  int i, a;  boolean patternMatch;  double value, z, zN;  int[] neighbours=new int[8];  int FID=0;  int[] rowVals=new int[2];  int[] colVals=new int[2];  int traceDirection=0;  int previousTraceDirection=0;  double currentHalfRow=0, currentHalfCol=0;  double[] inputValueData=new double[4];  long numPoints;  int minLineLength=2;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int[][] elements={{6,7,0,4,3,2},{7,0,1,3,5},{0,1,2,4,5,6},{1,2,3,5,7},{2,3,4,6,7,0},{3,4,5,7,1},{4,5,6,0,1,2},{5,6,7,1,3},{0,1,2,3,4,5,6,7},{0,1,2,3,4,5,6,7}};  double[][] vals={{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{1,1,1,1,1,1,1,1},{0,0,0,0,0,0,0,0}};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  minLineLength=Integer.parseInt(args[2]);  if (minLineLength < 2) {    minLineLength=2;  }  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster input=new WhiteboxRaster(inputFile,"r");    int rows=input.getNumberRows();    int cols=input.getNumberColumns();    double rowsD=(double)rows;    double colsD=(double)cols;    double noData=input.getNoDataValue();    double gridResX=input.getCellSizeX();    double gridResY=input.getCellSizeY();    double east=input.getEast() - gridResX / 2.0;    double west=input.getWest() + gridResX / 2.0;    double EWRange=east - west;    double north=input.getNorth() - gridResY / 2.0;    double south=input.getSouth() + gridResY / 2.0;    double NSRange=north - south;    String tempHeader1=inputFile.replace(".dep","_temp1.dep");    WhiteboxRaster temp1=new WhiteboxRaster(tempHeader1,"rw",inputFile,WhiteboxRaster.DataType.INTEGER,0);    temp1.isTemporaryFile=true;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=input.getValue(row,col);        if (z > 0 && z != noData) {          for (i=0; i < 8; i++) {            z=input.getValue(row + dY[i],col + dX[i]);            if (z == 1) {              neighbours[i]=1;            } else {              neighbours[i]=0;            }          }          value=1;          for (a=8; a < elements.length; a++) {            patternMatch=true;            for (i=0; i < elements[a].length; i++) {              if (neighbours[elements[a][i]] != vals[a][i]) {                patternMatch=false;                break;              }            }            if (patternMatch) {              value=0;            }          }          temp1.setValue(row,col,value);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100.0 * row / (rows - 1));      updateProgress("Loop 1 of 4:",progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=temp1.getValue(row,col);        if (z == 1) {          for (i=0; i < 8; i++) {            z=temp1.getValue(row + dY[i],col + dX[i]);            if (z == 1) {              neighbours[i]=1;            } else {              neighbours[i]=0;            }          }          value=1;          for (a=0; a < 8; a++) {            patternMatch=true;            for (i=0; i < elements[a].length; i++) {              if (neighbours[elements[a][i]] != vals[a][i]) {                patternMatch=false;                break;              }            }            if (patternMatch) {              value=0;            }          }          temp1.setValue(row,col,value);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100.0 * row / (rows - 1));      updateProgress("Loop 2 of 4:",progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=temp1.getValue(row,col);        if (z > 0 && z != noData) {          count=0;          for (i=0; i < 8; i++) {            rN=row + dY[i];            cN=col + dX[i];            zN=temp1.getValue(rN,cN);            if (zN > 0 && zN != noData) {              count++;            }          }          temp1.setValue(row,col,count);        } else {          temp1.setValue(row,col,0);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100.0 * row / (rows - 1));      updateProgress("Loop 3 of 4:",progress);    }    ShapeFile output=new ShapeFile(outputFile,ShapeType.POLYLINE);    DBFField fields[]=new DBFField[2];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("VALUE");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(2);    String DBFName=output.getDatabaseFile();    DBFWriter writer=new DBFWriter(new File(DBFName));    writer.setFields(fields);    int[] parts={0};    boolean pointAdded=false;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=temp1.getValue(row,col);        if (z == 1) {          PointsList points=new PointsList();          value=1;          r=row;          c=col;          flag=true;          previousTraceDirection=-1;          traceDirection=0;          do {            xCoord=west + (c / colsD) * EWRange;            yCoord=north - (r / rowsD) * NSRange;            pointAdded=false;            if (traceDirection != previousTraceDirection) {              points.addPoint(xCoord,yCoord);              previousTraceDirection=traceDirection;              pointAdded=true;            }            temp1.setValue(r,c,0);            traceDirection=-1;            value=-1;            for (i=0; i < 8; i++) {              rN=r + dY[i];              cN=c + dX[i];              zN=temp1.getValue(rN,cN);              if (zN > 0 && zN != noData) {                traceDirection=i;                value=zN;                break;              }            }            if (value == 2) {              r+=dY[traceDirection];              c+=dX[traceDirection];            } else             if (value >= 0) {              r+=dY[traceDirection];              c+=dX[traceDirection];              if (!pointAdded) {                xCoord=west + (c / colsD) * EWRange;                yCoord=north - (r / rowsD) * NSRange;                points.addPoint(xCoord,yCoord);              }              if (value == 1) {                temp1.setValue(r,c,0);              } else {                temp1.setValue(r,c,value - 1);              }              flag=false;            } else {              flag=false;            }          } while (flag);          if (points.size() >= minLineLength) {            PolyLine poly=new PolyLine(parts,points.getPointsArray());            output.addRecord(poly);            Object[] rowData=new Object[2];            rowData[0]=new Double(FID);            rowData[1]=new Double(z);            writer.addRecord(rowData);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100.0 * row / (rows - 1));      updateProgress("Loop 4 of 4:",progress);    }    temp1.close();    input.close();    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean isErrors(){  return errors;}  }
class C{  public CustomSwitchPreference(Context context,AttributeSet attrs){  super(context,attrs);}  }
class C{  public KerningTable(Kern[] entries){  this.entries=entries;}  }
class C{  public static byte[] formatMessageForSigning(String message){  try {    ByteArrayOutputStream bos=new ByteArrayOutputStream();    bos.write(BITCOIN_SIGNED_MESSAGE_HEADER_BYTES.length);    bos.write(BITCOIN_SIGNED_MESSAGE_HEADER_BYTES);    byte[] messageBytes=message.getBytes(Charsets.UTF_8);    VarInt size=new VarInt(messageBytes.length);    bos.write(size.encode());    bos.write(messageBytes);    return bos.toByteArray();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public Scenario(MapEnvironment env,Map agentMap,String agentLoc){  this.agentMap=agentMap;  this.env=env;  this.initAgentLoc=agentLoc;}  }
class C{  public IpInterfaceRestRep create(URI hostId,IpInterfaceCreateParam input){  return client.post(IpInterfaceRestRep.class,input,PathConstants.IPINTERFACE_BY_HOST_URL,hostId);}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  private boolean createTable(MTable mTable,DatabaseMetaData md){  String tableName=mTable.getTableName();  log.info(tableName);  String catalog=m_dbSource.getCatalog();  String schema=m_dbSource.getSchema();  String table=tableName.toUpperCase();  MColumn[] columns=mTable.getColumns(false);  StringBuffer sb=new StringBuffer("CREATE TABLE ");  sb.append(tableName).append(" (");  try {    boolean first=true;    ResultSet sourceColumns=md.getColumns(catalog,schema,table,null);    while (sourceColumns.next()) {      sb.append(first ? "" : ", ");      first=false;      MColumn column=null;      String columnName=sourceColumns.getString("COLUMN_NAME");      for (int i=0; i < columns.length; i++) {        String cn=columns[i].getColumnName();        if (cn.equalsIgnoreCase(columnName)) {          columnName=cn;          column=columns[i];          break;        }      }      sb.append(columnName).append(" ");      int sqlType=sourceColumns.getInt("DATA_TYPE");      String typeName=sourceColumns.getString("TYPE_NAME");      int size=sourceColumns.getInt("COLUMN_SIZE");      int decDigits=sourceColumns.getInt("DECIMAL_DIGITS");      if (sourceColumns.wasNull())       decDigits=-1;      if (typeName.equals("NUMBER")) {        int dt=column.getAD_Reference_ID();        if (DisplayType.isID(dt))         sb.append("INTEGER"); else {          int scale=DisplayType.getDefaultPrecision(dt);          sb.append("DECIMAL(").append(18 + scale).append(",").append(scale).append(")");        }      } else       if (typeName.equals("DATE") || typeName.equals("BLOB") || typeName.equals("CLOB"))       sb.append(typeName); else       if (typeName.equals("CHAR") || typeName.startsWith("VARCHAR"))       sb.append(typeName).append("(").append(size).append(")"); else       if (typeName.startsWith("NCHAR") || typeName.startsWith("NVAR"))       sb.append(typeName).append("(").append(size / 2).append(")"); else       if (typeName.startsWith("TIMESTAMP"))       sb.append("DATE"); else       log.severe("Do not support data type " + typeName);      String def=sourceColumns.getString("COLUMN_DEF");      if (def != null) {        def.replaceAll("''","\\'");        sb.append(" DEFAULT ").append(def);      }      if (sourceColumns.getInt("NULLABLE") == DatabaseMetaData.columnNoNulls)       sb.append(" NOT NULL"); else       sb.append(" NULL");    }    sourceColumns.close();    ResultSet sourcePK=md.getPrimaryKeys(catalog,schema,table);    first=true;    boolean hasPK=false;    while (sourcePK.next()) {      hasPK=true;      if (first)       sb.append(", CONSTRAINT ").append(sourcePK.getString("PK_NAME")).append(" PRIMARY KEY ("); else       sb.append(",");      first=false;      String columnName=sourcePK.getString("COLUMN_NAME");      sb.append(checkColumnName(columnName));    }    if (hasPK)     sb.append(")");    sourcePK.close();    sb.append(")");  } catch (  Exception ex) {    log.log(Level.SEVERE,"createTable",ex);    return false;  }  if (!executeCommands(new String[]{sb.toString()},m_conn,false,true))   return true;  createTableIndexes(mTable,md);  return createTableData(mTable);}  }
class C{  public ImAdapterFactory(){  if (modelPackage == null) {    modelPackage=ImPackage.eINSTANCE;  }}  }
class C{  public static int indexOf(Coordinate coordinate,Coordinate[] coordinates){  for (int i=0; i < coordinates.length; i++) {    if (coordinate.equals(coordinates[i])) {      return i;    }  }  return -1;}  }
class C{  public void addTestSuite(Class<? extends Test> testClass,Validator[] validators){  addTestSuite(testClass,validators,null);}  }
class C{  public void testHttpsConnection_Not_Found_Response() throws Throwable {  setUpStoreProperties();  SSLContext ctx=getContext();  ServerSocket ss=ctx.getServerSocketFactory().createServerSocket(0);  TestHostnameVerifier hnv=new TestHostnameVerifier();  HttpsURLConnection.setDefaultHostnameVerifier(hnv);  URL url=new URL("https://localhost:" + ss.getLocalPort());  HttpsURLConnection connection=(HttpsURLConnection)url.openConnection();  connection.setSSLSocketFactory(ctx.getSocketFactory());  try {    doInteraction(connection,ss,NOT_FOUND_CODE);    fail("Expected exception was not thrown.");  } catch (  FileNotFoundException e) {    if (DO_LOG) {      System.out.println("Expected exception was thrown: " + e.getMessage());      e.printStackTrace();    }  }  connection.connect();}  }
class C{  private void synthesise(String utterance){  String systemSpeechVar=system.getSettings().systemSpeech;  SpeechData outputSpeech;  if (ttsCache.containsKey(utterance)) {    outputSpeech=ttsCache.get(utterance);    outputSpeech.rewind();  } else {    AudioFormat format=new AudioFormat(16000,16,1,true,false);    outputSpeech=new SpeechData(format);    new Thread(null).start();  }  currentSynthesis.add(outputSpeech);  new Thread(null).start();}  }
class C{  public HostCandidate(TransportAddress transportAddress,Component parentComponent){  super(transportAddress,parentComponent,CandidateType.HOST_CANDIDATE,CandidateExtendedType.HOST_CANDIDATE,null);  this.socket=null;  setBase(this);}  }
class C{  public void applyQueryTimeout(Statement stmt){  if (hasQueryTimeout()) {    try {      stmt.setQueryTimeout(getQueryTimeoutInSeconds());    } catch (    SQLException e) {      throw new JDBCException("failed to setQueryTimeout to :" + getQueryTimeoutInSeconds(),e,e.getSQLState());    }  }}  }
class C{  public static SRegResponse createFetchResponse(){  return new SRegResponse();}  }
class C{  public static UPSCoord fromLatLon(Angle latitude,Angle longitude){  if (latitude == null || longitude == null) {    throw new IllegalArgumentException("Latitude Or Longitude Is Null");  }  final UPSCoordConverter converter=new UPSCoordConverter();  long err=converter.convertGeodeticToUPS(latitude.radians,longitude.radians);  if (err != UPSCoordConverter.UPS_NO_ERROR) {    throw new IllegalArgumentException("UPS Conversion Error");  }  return new UPSCoord(latitude,longitude,converter.getHemisphere(),converter.getEasting(),converter.getNorthing());}  }
class C{  public boolean isEmpty(){  return (m_index == -1);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.028 -0400",hash_original_method="95976D81CB90569BB8CC4A3AB0B84125",hash_generated_method="24F0FD499D929F2BE98900B33186C3D7") @Override public String toString(){  return new String(toByteArray());}  }
class C{  public Cursor newCursor(String storeName) throws UnknownStoreException {  IStore<ByteArray,byte[]> store=getStore(storeName);  int cursorId=rpcService.getTransactionId();  Cursor cursor=new Cursor(cursorId,store.entries());  cursorMap.put(Integer.valueOf(cursorId),cursor);  return cursor;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  double z;  int progress=0;  int i, a;  long counter=0;  int loopNum=0;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int[][] elements={{0,1,4,5,6,7},{0,1,2,5,6,7},{0,1,2,3,6,7},{0,1,2,3,4,7},{0,1,2,3,4,5},{1,2,3,4,5,6},{2,3,4,5,6,7},{0,3,4,5,6,7}};  double[] neighbours=new double[8];  boolean patternMatch=false;  int numIterations=10;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  numIterations=Integer.parseInt(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int nRows=image.getNumberRows();    int nCols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("black_white.pal");    double[] data=null;    for (row=0; row < nRows; row++) {      data=image.getRowValues(row);      for (col=0; col < nCols; col++) {        if (data[col] > 0) {          output.setValue(row,col,1);        } else         if (data[col] == noData) {          output.setValue(row,col,noData);        } else {          output.setValue(row,col,0);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress(progress);    }    image.close();    output.flush();    for (int k=0; k < numIterations; k++) {      loopNum++;      updateProgress("Loop Number " + loopNum + ":",0);      counter=0;      for (row=0; row < nRows; row++) {        for (col=0; col < nCols; col++) {          z=output.getValue(row,col);          if (z == 1 && z != noData) {            for (i=0; i < 8; i++) {              neighbours[i]=output.getValue(row + dY[i],col + dX[i]);            }            for (a=0; a < 8; a++) {              patternMatch=true;              for (i=0; i < elements[a].length; i++) {                if (neighbours[elements[a][i]] != 0) {                  patternMatch=false;                }              }              if (patternMatch) {                output.setValue(row,col,0);                counter++;              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress(progress);      }      if (counter == 0) {        break;      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatareplacedataend.class,args);}  }
class C{  public ToolMetaBuilder start(final ToolMeta meta){  return new ToolMetaBuilder(meta);}  }
class C{  public void loadAttributes(Element e3){  if (e3 != null) {    List<Element> l=e3.getChildren("keyvaluepair");    for (    Element fn : l) {      String key=fn.getChild("key").getText();      String value=fn.getChild("value").getText();      this.putAttribute(key,value);    }  }}  }
class C{  public static boolean neededFor(int uc){  return (uc >= UCS4_MIN) && (uc <= UCS4_MAX);}  }
class C{  public Coordinate centre(){  if (isNull())   return null;  return new Coordinate((getMinX() + getMaxX()) / 2.0,(getMinY() + getMaxY()) / 2.0);}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  private CIMObjectPath createOrSelectSLOBasedStorageGroup(StorageSystem storage,URI exportMaskURI,Collection<Initiator> initiators,VolumeURIHLU[] volumeURIHLUs,String parentGroupName,Map<StorageGroupPolicyLimitsParam,CIMObjectPath> newlyCreatedChildVolumeGroups,TaskCompleter taskCompleter) throws Exception {  List<CIMObjectPath> childVolumeGroupsToBeAddedToParentGroup=new ArrayList<CIMObjectPath>();  String groupName=null;  CIMObjectPath groupPath=null;  ExportMask mask=_dbClient.queryObject(ExportMask.class,exportMaskURI);  ListMultimap<StorageGroupPolicyLimitsParam,VolumeURIHLU> policyToVolumeGroup=ArrayListMultimap.create();  WBEMClient client=_helper.getConnection(storage).getCimClient();  for (  VolumeURIHLU volumeUriHLU : volumeURIHLUs) {    policyToVolumeGroup.put(new StorageGroupPolicyLimitsParam(volumeUriHLU,storage,_helper),volumeUriHLU);  }  _log.info("{} Groups generated based on grouping volumes by fast policy",policyToVolumeGroup.size());  for (  Entry<StorageGroupPolicyLimitsParam,Collection<VolumeURIHLU>> policyToVolumeGroupEntry : policyToVolumeGroup.asMap().entrySet()) {    List<CIMObjectPath> childVolumeGroupsToBeAdded=new ArrayList<CIMObjectPath>();    StorageGroupPolicyLimitsParam storageGroupPolicyLimitsParam=policyToVolumeGroupEntry.getKey();    ListMultimap<String,VolumeURIHLU> expectedVolumeHluMap=ControllerUtils.getVolumeNativeGuids(policyToVolumeGroupEntry.getValue(),_dbClient);    Map<String,Set<String>> existingGroupPaths;    _log.info("Running Storage Group Selection Process");    existingGroupPaths=_helper.findAnyStorageGroupsCanBeReUsed(storage,expectedVolumeHluMap,storageGroupPolicyLimitsParam);    _log.info("Existing Storage Groups Found :" + Joiner.on("\t").join(existingGroupPaths.keySet()));    if (existingGroupPaths.size() > 0) {      if (existingGroupPaths.size() > 0) {        childVolumeGroupsToBeAdded.addAll(_helper.constructMaskingGroupPathsFromNames(existingGroupPaths.keySet(),storage));      }    }    Set<String> volumesInExistingStorageGroups=_helper.constructVolumeNativeGuids(existingGroupPaths.values());    _log.debug("Volumes part of existing reusable Storage Groups {}",Joiner.on("\t").join(volumesInExistingStorageGroups));    Set<String> diff=Sets.difference(expectedVolumeHluMap.asMap().keySet(),volumesInExistingStorageGroups);    _log.debug("Remaining Volumes, for which new Storage Group needs to be created",Joiner.on("\t").join(diff));    if (!diff.isEmpty()) {      VolumeURIHLU[] volumeURIHLU=ControllerUtils.constructVolumeUriHLUs(diff,expectedVolumeHluMap);      groupName=generateStorageGroupName(storage,mask,initiators,storageGroupPolicyLimitsParam);      _log.debug("Group Name Created :",groupName);      groupPath=createVolumeGroup(storage,groupName,volumeURIHLU,taskCompleter,true);      _log.info("{} Volume Group created on Array {}",storage.getSerialNumber());    }    if (null != groupPath) {      newlyCreatedChildVolumeGroups.put(storageGroupPolicyLimitsParam,groupPath);      childVolumeGroupsToBeAdded.add(groupPath);    }    childVolumeGroupsToBeAddedToParentGroup.addAll(childVolumeGroupsToBeAdded);  }  parentGroupName=_helper.generateGroupName(_helper.getExistingStorageGroupsFromArray(storage),parentGroupName);  CIMObjectPath cascadedGroupPath=createCascadedVolumeGroup(storage,parentGroupName,childVolumeGroupsToBeAddedToParentGroup,taskCompleter);  for (  Entry<StorageGroupPolicyLimitsParam,CIMObjectPath> createdChildVolumeGroupEntry : newlyCreatedChildVolumeGroups.entrySet()) {    CIMObjectPath childGroupPath=createdChildVolumeGroupEntry.getValue();    StorageGroupPolicyLimitsParam storageGroupPolicyLimitsParam=createdChildVolumeGroupEntry.getKey();    if (storageGroupPolicyLimitsParam.isHostIOLimitBandwidthSet()) {      _helper.updateHostIOLimitBandwidth(client,childGroupPath,storageGroupPolicyLimitsParam.getHostIOLimitBandwidth());    }    if (storageGroupPolicyLimitsParam.isHostIOLimitIOPsSet()) {      _helper.updateHostIOLimitIOPs(client,childGroupPath,storageGroupPolicyLimitsParam.getHostIOLimitIOPs());    }  }  return cascadedGroupPath;}  }
class C{  public static boolean matchesExtension(String filename,String ext){  return filename.endsWith("." + ext);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case BasePackage.DOMAIN_ELEMENT__DOMAIN_ID:    setDomainID((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public boolean isPreserveHourOfDayAcrossDaylightSavings(){  return preserveHourOfDayAcrossDaylightSavings;}  }
class C{  public static final Uri buildFolderUri(long folderId){  return ContentUris.withAppendedId(CONTENT_URI_DEFAULT_FOLDER,folderId);}  }
class C{  public synchronized static void closeAll(){  for (  HyperGraph graph : dbs.values()) {    if (graph.isOpen())     try {      graph.close();    } catch (    Throwable t) {      System.err.println("Problem closing HyperGraphDB instance at " + graph.getLocation() + ", stack trace follows...");      t.printStackTrace(System.err);    }  }  dbs.clear();}  }
class C{  public void add(Permission permission){  if (!(permission instanceof DelegationPermission))   throw new IllegalArgumentException("invalid permission: " + permission);  if (isReadOnly())   throw new SecurityException("attempt to add a Permission to a readonly PermissionCollection");synchronized (this) {    perms.add(0,permission);  }}  }
class C{  public boolean empty(){  return isEmpty();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static boolean findActivity(ArrayList<AppInfo> apps,ComponentName component,UserHandleCompat user){  final int N=apps.size();  for (int i=0; i < N; i++) {    final AppInfo info=apps.get(i);    if (info.user.equals(user) && info.componentName.equals(component)) {      return true;    }  }  return false;}  }
class C{  private void checkAccessTime(ClientIdentification.Agent agent,final DigestURL url){  if (!url.isLocal()) {    String host=url.getHost();    final Long lastAccess=accessTime.get(host);    long wait=0;    if (lastAccess != null)     wait=Math.max(0,agent.minimumDelta + lastAccess.longValue() - System.currentTimeMillis());    if (wait > 0) {      final long untilTime=System.currentTimeMillis() + wait;      cleanupAccessTimeTable(untilTime);      if (System.currentTimeMillis() < untilTime) {        long frcdslp=untilTime - System.currentTimeMillis();        LoaderDispatcher.log.info("Forcing sleep of " + frcdslp + " ms for host "+ host);        try {          Thread.sleep(frcdslp);        } catch (        final InterruptedException ee) {        }      }    }  }}  }
class C{  @SuppressForbidden(reason="System.out required: command line tool") public static void main(java.lang.String[] args) throws Exception {  if (args.length < 1) {    return;  }  args[0].toUpperCase(Locale.ROOT);  backward=args[0].charAt(0) == '-';  int qq=(backward) ? 1 : 0;  boolean storeorig=false;  if (args[0].charAt(qq) == '0') {    storeorig=true;    qq++;  }  multi=args[0].charAt(qq) == 'M';  if (multi) {    qq++;  }  String charset=System.getProperty("egothor.stemmer.charset","UTF-8");  char optimizer[]=new char[args[0].length() - qq];  for (int i=0; i < optimizer.length; i++) {    optimizer[i]=args[0].charAt(qq + i);  }  for (int i=1; i < args.length; i++) {    Diff diff=new Diff();    allocTrie();    System.out.println(args[i]);    try (LineNumberReader in=new LineNumberReader(Files.newBufferedReader(Paths.get(args[i]),Charset.forName(charset)))){      for (String line=in.readLine(); line != null; line=in.readLine()) {        try {          line=line.toLowerCase(Locale.ROOT);          StringTokenizer st=new StringTokenizer(line);          String stem=st.nextToken();          if (storeorig) {            trie.add(stem,"-a");          }          while (st.hasMoreTokens()) {            String token=st.nextToken();            if (token.equals(stem) == false) {              trie.add(token,diff.exec(token,stem));            }          }        } catch (        java.util.NoSuchElementException x) {        }      }    }     Optimizer o=new Optimizer();    Optimizer2 o2=new Optimizer2();    Lift l=new Lift(true);    Lift e=new Lift(false);    Gener g=new Gener();    for (int j=0; j < optimizer.length; j++) {      String prefix;switch (optimizer[j]) {case 'G':        trie=trie.reduce(g);      prefix="G: ";    break;case 'L':  trie=trie.reduce(l);prefix="L: ";break;case 'E':trie=trie.reduce(e);prefix="E: ";break;case '2':trie=trie.reduce(o2);prefix="2: ";break;case '1':trie=trie.reduce(o);prefix="1: ";break;default :continue;}trie.printInfo(System.out,prefix + " ");}try (DataOutputStream os=new DataOutputStream(new BufferedOutputStream(Files.newOutputStream(Paths.get(args[i] + ".out"))))){os.writeUTF(args[0]);trie.store(os);} }}  }
class C{  public ConnectionConfig(jmri.jmrix.NetworkPortAdapter p){  super(p);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.PROPERTY_METHOD_DECLARATION__BODY:    return basicSetBody(null,msgs);case N4JSPackage.PROPERTY_METHOD_DECLARATION__LOK:  return basicSet_lok(null,msgs);case N4JSPackage.PROPERTY_METHOD_DECLARATION__FPARS:return ((InternalEList<?>)getFpars()).basicRemove(otherEnd,msgs);case N4JSPackage.PROPERTY_METHOD_DECLARATION__RETURN_TYPE_REF:return basicSetReturnTypeRef(null,msgs);case N4JSPackage.PROPERTY_METHOD_DECLARATION__TYPE_VARS:return ((InternalEList<?>)getTypeVars()).basicRemove(otherEnd,msgs);case N4JSPackage.PROPERTY_METHOD_DECLARATION__DECLARED_TYPE_REF:return basicSetDeclaredTypeRef(null,msgs);case N4JSPackage.PROPERTY_METHOD_DECLARATION__BOGUS_TYPE_REF:return basicSetBogusTypeRef(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void characters(StylesheetHandler handler,char ch[],int start,int length) throws org.xml.sax.SAXException {  handler.error(XSLTErrorResources.ER_CHARS_NOT_ALLOWED,null,null);}  }
class C{  private static boolean isDeprecatedSSLProtocol(){  return ("com.sun.net.ssl.internal.www.protocol".equals(System.getProperty("java.protocol.handler.pkgs")));}  }
class C{  public static String formatTimestamp(Timestamp timestamp,String format){  if (null != timestamp) {    SimpleDateFormat sdf=new SimpleDateFormat(format);    return sdf.format(timestamp);  } else {    return "";  }}  }
class C{  public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){  int i;  if (tag != cp.tag)   return tag - cp.tag;  CONSTANT_Methodref_info cu=(CONSTANT_Methodref_info)cp;  i=constant_pool[class_index].compareTo(constant_pool,cp_constant_pool[cu.class_index],cp_constant_pool);  if (i != 0)   return i;  return constant_pool[name_and_type_index].compareTo(constant_pool,cp_constant_pool[cu.name_and_type_index],cp_constant_pool);}  }
class C{  protected boolean isRelevantToUser(EReference reference){  return TypesPackage.Literals.SYNTAX_RELATED_TELEMENT__AST_ELEMENT != reference && TypesPackage.Literals.TSTRUCT_MEMBER__DEFINED_MEMBER != reference;}  }
class C{  public void startPreview(){  if (camera != null && !previewing) {    camera.startPreview();    previewing=true;  }}  }
class C{  public final void flushLayoutCache(){synchronized (mCachedXmlBlockIds) {    final int num=mCachedXmlBlockIds.length;    for (int i=0; i < num; i++) {      mCachedXmlBlockIds[i]=-0;      XmlBlock oldBlock=mCachedXmlBlocks[i];      if (oldBlock != null) {        oldBlock.close();      }      mCachedXmlBlocks[i]=null;    }  }}  }
class C{  public TableRowElement(){  super("tr",new ListElement());}  }
class C{  public Set<Map.Entry<String,Object>> valueSet(){  return mValues.entrySet();}  }
class C{  @SuppressWarnings("unchecked") @protection static <E>Set<E> dynamicallyCastSet(Set<?> set,Class<E> type){  return dynamicallyCastCollection(set,type,Set.class);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SRuntimePackage.COMPOSITE_SLOT__SLOTS:    return ((InternalEList<?>)getSlots()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static String padRight(String s,int n){  return String.format("%1$-" + n + "s",s);}  }
class C{  public static boolean isCompressed(String filename){  if (filename == null) {    return false;  }  File test=new File(filename);  if (test.exists()) {    return isCompressed(test);  }  int len=filename.length();  return len > 2 && (filename.substring(len - GZIP_EXTENTION.length()).equalsIgnoreCase(GZIP_EXTENTION) || filename.substring(len - COMPRESS_EXTENTION.length()).equals(COMPRESS_EXTENTION) || filename.substring(len - BZIP2_EXTENTION.length()).equals(BZIP2_EXTENTION));}  }
class C{  boolean shouldMerge(){  return mergeState.segmentInfo.maxDoc() > 0;}  }
class C{  public void addDaemonThreadCount(int daemonThreadCount){  this.totalDaemonThreadCount+=daemonThreadCount;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:50.929 -0500",hash_original_method="F21E97E0131CF96F90294027D325F2F1",hash_generated_method="6C0974834F4ED5E3334D2C54E96A4062") public boolean isUnshared(){  return unshared;}  }
class C{  public boolean isEqualNode(Node arg){  if (arg == this) {    return true;  }  if (arg.getNodeType() != getNodeType()) {    return false;  }  if (getNodeName() == null) {    if (arg.getNodeName() != null) {      return false;    }  } else   if (!getNodeName().equals(arg.getNodeName())) {    return false;  }  if (getLocalName() == null) {    if (arg.getLocalName() != null) {      return false;    }  } else   if (!getLocalName().equals(arg.getLocalName())) {    return false;  }  if (getNamespaceURI() == null) {    if (arg.getNamespaceURI() != null) {      return false;    }  } else   if (!getNamespaceURI().equals(arg.getNamespaceURI())) {    return false;  }  if (getPrefix() == null) {    if (arg.getPrefix() != null) {      return false;    }  } else   if (!getPrefix().equals(arg.getPrefix())) {    return false;  }  if (getNodeValue() == null) {    if (arg.getNodeValue() != null) {      return false;    }  } else   if (!getNodeValue().equals(arg.getNodeValue())) {    return false;  }  return true;}  }
class C{  public static void loadComments(Element commentNode,ICommentHolder parent,Comment.Type type){  loadComments(commentNode,parent,0,false,false,type);}  }
class C{  @Override public void merge(Descriptor other){  for (  DescriptorTag tag : descriptorTagFactory.getAllTags()) {    Identifier identifier=tag.getIdentifier();    if (identifier != null) {      MergeStrategy strategy=getMergeStrategy(tag.getTagName());      Descriptor left=baseDescriptor;      Descriptor right=other;      List<Element> itemsL=new ArrayList<Element>(left.getTags(tag));      List<Element> itemsR=new ArrayList<Element>(right.getTags(tag));      try {        for (        Element itemL : itemsL) {          DescriptorElement lElement=(DescriptorElement)itemL;          DescriptorElement rElement=(DescriptorElement)right.getTagByIdentifier(tag.getTagName(),identifier.getIdentifier(lElement));          if (rElement != null) {            strategy.inBoth(left,lElement,rElement);          } else {            strategy.inLeft(left,lElement);          }        }        for (        Element itemR : itemsR) {          DescriptorElement rElement=(DescriptorElement)itemR;          DescriptorElement lElement=(DescriptorElement)left.getTagByIdentifier(tag.getTagName(),identifier.getIdentifier(rElement));          if (lElement == null) {            strategy.inRight(left,rElement);          }        }      } catch (      Exception ex) {        throw new CargoException("Element Merging Exception",ex);      }    } else {      Descriptor left=baseDescriptor;      Descriptor right=other;      List<Element> itemsL=left.getTags(tag);      List<Element> itemsR=new ArrayList<Element>(right.getTags(tag));      if (tag.isMultipleAllowed()) {        for (        Element itemR : itemsR) {          DescriptorElement rightElement=(DescriptorElement)itemR;          left.addElement(tag,rightElement,left.getRootElement());        }      } else {        MergeStrategy strategy=getMergeStrategy(tag.getTagName());        DescriptorElement leftElement=itemsL.size() == 0 ? null : (DescriptorElement)itemsL.get(0);        DescriptorElement rightElement=itemsR.size() == 0 ? null : (DescriptorElement)itemsR.get(0);        try {          if (leftElement != null && rightElement != null) {            strategy.inBoth(left,leftElement,rightElement);          } else           if (leftElement != null) {            strategy.inLeft(left,leftElement);          } else           if (rightElement != null) {            strategy.inRight(left,rightElement);          }        } catch (        Exception ex) {          throw new CargoException("Element Merging Exception",ex);        }      }    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.EXTERNAL_DEFINITION___INTERFACE_1:    return isInterface_1();case UmplePackage.EXTERNAL_DEFINITION___NAME_1:  return getName_1();case UmplePackage.EXTERNAL_DEFINITION___CLASS_CONTENT_1:return getClassContent_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public NotificationChain basicSetScope(Scope newScope,NotificationChain msgs){  Scope oldScope=scope;  scope=newScope;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,StextPackage.STATE_SPECIFICATION__SCOPE,oldScope,newScope);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static Container encloseIn(Layout l,Component... cmp){  Container cnt=new Container(l);  for (  Component c : cmp) {    cnt.addComponent(c);  }  return cnt;}  }
class C{  public static Stopwatch createUnstarted(Ticker ticker){  return new Stopwatch(ticker);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:36.567 -0500",hash_original_method="55B8B2C74AE8EFAFCF07CA3753E23BB0",hash_generated_method="A30D64FD09E2B0376DF0127CD24EFA6B") public String debugDump(){  String superstring=super.debugDump();  stringRepresentation="";  sprint(SIPResponse.class.getCanonicalName());  sprint("{");  if (statusLine != null) {    sprint(statusLine.debugDump());  }  sprint(superstring);  sprint("}");  return stringRepresentation;}  }
class C{  public String toString(){  int iMax=length() - 1;  if (iMax == -1) {    return "[]";  }  StringBuilder b=new StringBuilder((17 + 2) * (iMax + 1));  b.append('[');  for (int i=0; ; i++) {    b.append(longBitsToDouble(longs.get(i)));    if (i == iMax) {      return b.append(']').toString();    }    b.append(',').append(' ');  }}  }
class C{  private void createProxyAndRegionForClient(){  PoolFactory pf=PoolManager.createFactory();  pf.addServer("localhost",PORT);  pf.setMinConnections(0);  pf.setPingInterval(10000);  pf.setThreadLocalConnections(true);  pf.setReadTimeout(2000);  pf.setSocketBufferSize(32768);  proxy=(PoolImpl)pf.create("junitPool");  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  factory.setPoolName("junitPool");  RegionAttributes attrs=factory.createRegionAttributes();  cache.createVMRegion(regionName,attrs);}  }
class C{  public boolean isFieldAlignLeading(){  return getFieldAlignmentType().equals(FIELDALIGNMENTTYPE_LeadingLeft);}  }
class C{  public static List<String> changeCase(List<String> list){  if (list != null) {    List<String> result=new ArrayList<String>();    for (    String element : list) {      result.add(changeCase(element));    }    return result;  }  return null;}  }
class C{  public MessageHandler(GlowNetworkServer connectionManager){  this.connectionManager=connectionManager;}  }
class C{  public void addRange(BytesRef minPrefixCoded,BytesRef maxPrefixCoded){  throw new UnsupportedOperationException();}  }
class C{  public void encode(DerOutputStream out) throws IOException {  out.write(tag);  out.putLength(length);  if (length > 0) {    byte[] value=new byte[length];synchronized (data) {      buffer.reset();      if (buffer.read(value) != length) {        throw new IOException("short DER value read (encode)");      }      out.write(value);    }  }}  }
class C{  public Entry proxyAuth(final String auth,final String ip){  final Entry entry=proxyAuth(auth);  if (entry != null) {    entry.updateLastAccess(false);    this.ipUsers.put(ip,entry.getUserName());  }  return entry;}  }
class C{  @SubscribeEvent public static void playerClone(PlayerEvent.Clone event){  final IMaxHealth oldMaxHealth=getMaxHealth(event.getOriginal());  final IMaxHealth newMaxHealth=getMaxHealth(event.getEntityPlayer());  if (newMaxHealth != null && oldMaxHealth != null) {    newMaxHealth.setBonusMaxHealth(oldMaxHealth.getBonusMaxHealth());  }}  }
class C{  private TokenImpl(int type){  fType=type;  fData=null;}  }
class C{  public void create(){  try {    ManagementFactory.getFactory().registerMBeanObject(JMX_NAME,this);    start();    if (logger.isInfoEnabled())     logger.info(JMX_NAME + " registrado con \351xito.");  } catch (  Exception e) {    logger.error("Error al intentar registrar: " + JMX_NAME + ". Abortado registro.",e);  }}  }
class C{  public int hashCode(){  return value.hashCode() ^ locale.hashCode();}  }
class C{  public static boolean isSameLength(final double[] array1,final double[] array2){  if (array1 == null && array2 != null && array2.length > 0 || array2 == null && array1 != null && array1.length > 0 || array1 != null && array2 != null && array1.length != array2.length) {    return false;  }  return true;}  }
class C{  public static void processStatementScheduleMultiple(EPStatementAgentInstanceHandle handle,Object callbackObject,EPServicesContext services){  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().qTimeCP(handle,services.getSchedulingService().getTime());  }  handle.getStatementAgentInstanceLock().acquireWriteLock();  try {    if (!handle.isDestroyed()) {      if (handle.isHasVariables()) {        services.getVariableService().setLocalVersion();      }      if (callbackObject instanceof ArrayDeque) {        ArrayDeque<ScheduleHandleCallback> callbackList=(ArrayDeque<ScheduleHandleCallback>)callbackObject;        for (        ScheduleHandleCallback callback : callbackList) {          callback.scheduledTrigger(services.getEngineLevelExtensionServicesContext());        }      } else {        ScheduleHandleCallback callback=(ScheduleHandleCallback)callbackObject;        callback.scheduledTrigger(services.getEngineLevelExtensionServicesContext());      }      handle.internalDispatch();    }  } catch (  RuntimeException ex) {    services.getExceptionHandlingService().handleException(ex,handle,ExceptionHandlerExceptionType.PROCESS,null);  } finally {    if (handle.isHasTableAccess()) {      services.getTableService().getTableExprEvaluatorContext().releaseAcquiredLocks();    }    handle.getStatementAgentInstanceLock().releaseWriteLock();    if (InstrumentationHelper.ENABLED) {      InstrumentationHelper.get().aTimeCP();    }  }}  }
class C{  public CategoryListItem(Category category,CategoryListItem parentItem){  name=category.getName();  fullName=parentItem == null ? name : parentItem.fullName + " / " + name;  key=category.getKey();  List<Category> subCategories=category.getSubCategories();  int cntSubCategories=subCategories == null ? 0 : subCategories.size();  if (cntSubCategories == 0) {    subItems=new CategoryListItem[0];  } else {    subItems=new CategoryListItem[cntSubCategories];    for (int i=0; i < cntSubCategories; i++) {      subItems[i]=new CategoryListItem(subCategories.get(i),this);    }    subItems[cntSubCategories - 1]=new CategoryListItem(name,fullName,key,null);  }}  }
class C{  public void sortFromTo(int from,int to){  countSortFromTo(from,to);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public BetterWeakReference(T r,ReferenceQueue<? super T> q){  super(r,q);}  }
class C{  public String addBinary(String a,String b){  int m=a.length();  int n=b.length();  int carry=0;  StringBuilder res=new StringBuilder();  int i=0;  while (i < m || i < n) {    int p=i < m ? a.charAt(m - 1 - i) - '0' : 0;    int q=i < n ? b.charAt(n - 1 - i) - '0' : 0;    int temp=p + q + carry;    carry=temp / 2;    res.insert(0,temp % 2);    i++;  }  return carry == 0 ? res.toString() : "1" + res.toString();}  }
class C{  protected void init(DerValue encoding,int rep_type) throws Asn1Exception, IOException, RealmException {  DerValue der, subDer;  msgType=(encoding.getTag() & (byte)0x1F);  if (msgType != Krb5.KRB_ENC_AS_REP_PART && msgType != Krb5.KRB_ENC_TGS_REP_PART) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  der=encoding.getData().getDerValue();  if (der.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  key=EncryptionKey.parse(der.getData(),(byte)0x00,false);  lastReq=LastReq.parse(der.getData(),(byte)0x01,false);  subDer=der.getData().getDerValue();  if ((subDer.getTag() & (byte)0x1F) == (byte)0x02) {    nonce=subDer.getData().getBigInteger().intValue();  } else {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  keyExpiration=KerberosTime.parse(der.getData(),(byte)0x03,true);  flags=TicketFlags.parse(der.getData(),(byte)0x04,false);  authtime=KerberosTime.parse(der.getData(),(byte)0x05,false);  starttime=KerberosTime.parse(der.getData(),(byte)0x06,true);  endtime=KerberosTime.parse(der.getData(),(byte)0x07,false);  renewTill=KerberosTime.parse(der.getData(),(byte)0x08,true);  Realm srealm=Realm.parse(der.getData(),(byte)0x09,false);  sname=PrincipalName.parse(der.getData(),(byte)0x0A,false,srealm);  if (der.getData().available() > 0) {    caddr=HostAddresses.parse(der.getData(),(byte)0x0B,true);  }}  }
class C{  public boolean hasMoreTokens(){  return super.hasMoreTokens();}  }
class C{  private static Unit insertGotoBefore(Chain unitChain,Unit node,Unit target){  Unit newGoto=Jimple.v().newGotoStmt(target);  unitChain.insertBefore(newGoto,node);  newGoto.redirectJumpsToThisTo(node);  return newGoto;}  }
class C{  public static boolean isPrimitive(String signature){  char t=signature.charAt(0);  return t == 'Z' || t == 'B' || t == 'C' || t == 'S' || t == 'I' || t == 'J' || t == 'F' || t == 'D';}  }
class C{  private void inflateViewContainerLayout(){  setContentView(R.layout.activity_main);  ButterKnife.inject(this);  mainFlow=mainView.getFlow();}  }
class C{  public MimeTypeParseException(String s){  super(s);}  }
class C{  private void buildLines(List<SuperMatchBucket> buckets){  final Set<CondensedLine> unsortedLines=new HashSet<CondensedLine>();  for (  SuperMatchBucket bucket : buckets) {    boolean bucketFoundAHome=false;    for (    CondensedLine line : unsortedLines) {      bucketFoundAHome=line.addSuperMatchesSameTypeWithoutOverlap(bucket);      if (bucketFoundAHome) {        break;      }    }    if (!bucketFoundAHome) {      unsortedLines.add(new CondensedLine(bucket));    }    numSuperMatchBlobs+=bucket.getSupermatches().size();  }  lines=new TreeSet<CondensedLine>(unsortedLines);}  }
class C{  public Color(Color color){  if (color == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Color","constructor","missingColor"));  }  this.red=color.red;  this.green=color.green;  this.blue=color.blue;  this.alpha=color.alpha;}  }
class C{  public BiosCommandResult doCreateReplicationPolicy(StorageSystem system,String name,String source_root_path,String target_host,String target_path,IsilonSyncPolicy.Action action,String description,String schedule){  try {    _log.info("IsilonFileStorageDevice doCreateReplicationPolicy {} - start",source_root_path);    IsilonApi isi=getIsilonDevice(system);    IsilonSyncPolicy policy=new IsilonSyncPolicy(name,source_root_path,target_path,target_host,action);    if (schedule != null && !schedule.isEmpty()) {      policy.setSchedule(schedule);    }    if (description != null && !description.isEmpty()) {      policy.setDescription(description);    }    policy.setEnabled(false);    String policyId=isi.createReplicationPolicy(policy);    _log.info("IsilonFileStorageDevice doCreateReplicationPolicy {} with policyId {} - complete",name,policyId);    return BiosCommandResult.createSuccessfulResult();  } catch (  IsilonException e) {    return BiosCommandResult.createErrorResult(e);  }}  }
class C{  @Override public void deliver(WriteStream os,OutHttp2 outHttp) throws IOException {  outHttp.writeGoAway();}  }
class C{  private int preFillGrid(Direction direction,int dy,int emptyTop,RecyclerView.Recycler recycler,RecyclerView.State state){  int newFirstVisiblePosition=firstChildPositionForRow(mFirstVisibleRow);  SparseArray<View> viewCache=new SparseArray<>(getChildCount());  int startLeftOffset=getPaddingLeft();  int startTopOffset=getPaddingTop() + emptyTop;  if (getChildCount() != 0) {    startTopOffset=getDecoratedTop(getChildAt(0));    if (mFirstVisiblePosition != newFirstVisiblePosition) {switch (direction) {case UP:        double previousTopRowHeight=sizeForChildAtPosition(mFirstVisiblePosition - 1).getHeight();      startTopOffset-=previousTopRowHeight;    break;case DOWN:  double topRowHeight=sizeForChildAtPosition(mFirstVisiblePosition).getHeight();startTopOffset+=topRowHeight;break;}}for (int i=0; i < getChildCount(); i++) {int position=mFirstVisiblePosition + i;final View child=getChildAt(i);viewCache.put(position,child);}for (int i=0; i < viewCache.size(); i++) {final View cachedView=viewCache.valueAt(i);detachView(cachedView);}}mFirstVisiblePosition=newFirstVisiblePosition;int leftOffset=startLeftOffset;int topOffset=startTopOffset + mPendingScrollPositionOffset;int nextPosition=mFirstVisiblePosition;while (nextPosition >= 0 && nextPosition < state.getItemCount()) {boolean isViewCached=true;View view=viewCache.get(nextPosition);if (view == null) {view=recycler.getViewForPosition(nextPosition);isViewCached=false;}if (mIsFirstViewHeader && nextPosition == HEADER_POSITION) {measureChildWithMargins(view,0,0);mHeaderViewSize=new Size(view.getMeasuredWidth(),view.getMeasuredHeight());}Size viewSize=sizeForChildAtPosition(nextPosition);if ((leftOffset + viewSize.getWidth()) > getContentWidth()) {leftOffset=startLeftOffset;Size previousViewSize=sizeForChildAtPosition(nextPosition - 1);topOffset+=previousViewSize.getHeight();}boolean isAtEndOfContent;switch (direction) {case DOWN:isAtEndOfContent=topOffset >= getContentHeight() + dy;break;default :isAtEndOfContent=topOffset >= getContentHeight();break;}if (isAtEndOfContent) break;if (isViewCached) {attachView(view);viewCache.remove(nextPosition);} else {addView(view);measureChildWithMargins(view,0,0);int right=leftOffset + viewSize.getWidth();int bottom=topOffset + viewSize.getHeight();layoutDecorated(view,leftOffset,topOffset,right,bottom);}leftOffset+=viewSize.getWidth();nextPosition++;}for (int i=0; i < viewCache.size(); i++) {final View removingView=viewCache.valueAt(i);recycler.recycleView(removingView);}int pixelsFilled=0;if (getChildCount() > 0) {pixelsFilled=getChildAt(getChildCount() - 1).getBottom();}return pixelsFilled;}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof AttributeWeights)) {    return false;  } else {    AttributeWeights other=(AttributeWeights)o;    return this.weightMap.equals(other.weightMap);  }}  }
class C{  private static PipelineOp convertNamedSolutionSetScan(PipelineOp left,final NamedSubqueryInclude nsi,final Set<IVariable<?>> doneSet,final AST2BOpContext ctx){  @SuppressWarnings("rawtypes") final Map<IConstraint,Set<IVariable<IV>>> needsMaterialization=new LinkedHashMap<IConstraint,Set<IVariable<IV>>>();  final IConstraint[] joinConstraints=getJoinConstraints(getJoinConstraints(nsi),needsMaterialization);  final String name=nsi.getName();  final INamedSolutionSetRef namedSolutionSet=NamedSolutionSetRefUtility.newInstance(ctx.getNamespace(),ctx.getTimestamp(),name,IVariable.EMPTY);  left=new NestedLoopJoinOp(leftOrEmpty(left),new NV(BOp.Annotations.BOP_ID,ctx.nextId()),new NV(BOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER),new NV(PipelineOp.Annotations.SHARED_STATE,true),new NV(NestedLoopJoinOp.Annotations.NAMED_SET_REF,namedSolutionSet),new NV(NestedLoopJoinOp.Annotations.CONSTRAINTS,joinConstraints));  left=addMaterializationSteps3(left,doneSet,needsMaterialization,nsi.getQueryHints(),ctx);  return left;}  }
class C{  public Map<String,StoredException> loadAll(){  Map<String,StoredException> storedExceptions=new HashMap<>();  if (context != null) {    String[] fileNames=context.fileList();    if (fileNames != null) {      for (      String fileName : fileNames) {        if (utils.isNotBlank(fileName) && fileName.startsWith("FoamStoredException")) {          StoredException storedException=loadStoredExceptionData(fileName);          if (storedException != null) {            storedExceptions.put(fileName,storedException);          }        }      }    }  }  return storedExceptions;}  }
class C{  public void uploadConfigDir(Path dir,String configName) throws IOException {  zkClient.uploadToZK(dir,CONFIGS_ZKNODE + "/" + configName,UPLOAD_FILENAME_EXCLUDE_PATTERN);}  }
class C{  public static final boolean isConversationAbort(byte esmClass){  return isMessageType(esmClass,SMPPConstant.ESMCLS_CONV_ABORT);}  }
class C{  public static boolean request(final long size,final boolean force){  if (size < 1024)   return true;  return getStrategy().request(size,force,shortStatus);}  }
class C{  static MPrintFont create(Font font){  MPrintFont pf=new MPrintFont(Env.getCtx(),0,null);  StringBuffer name=new StringBuffer(font.getName());  if (font.isBold())   name.append(" bold");  if (font.isItalic())   name.append(" italic");  name.append(" ").append(font.getSize());  pf.setName(name.toString());  pf.setFont(font);  pf.saveEx();  return pf;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @SuppressWarnings({"PMD.LooseCoupling","unchecked"}) protected void createDefaultState(){  Class<?> c=getStateClass();  try {    Object newState=(T)c.newInstance();    this.state=(T)newState;  } catch (  Exception e) {    throw new UncheckedException(e);  }}  }
class C{  @TransactionAttribute(TransactionAttributeType.REQUIRED) public boolean restart(boolean isRestartAPP){  final String messageKey="mail_bes_notification_connection_success";  boolean isSuspendedByApp=false;  if (!besDAO.isBESAvalible()) {    if (isRestartAPP) {      sendMailToAppAdmin("mail_bes_notification_error_app_admin");    }    return false;  }  List<ServiceInstance> serviceInstances=instanceDAO.getInstancesSuspendedbyApp();  for (  ServiceInstance instance : serviceInstances) {    String actionLink=getResumeLinkForInstance(instance);    if (actionLink == null || actionLink.isEmpty()) {      isSuspendedByApp=true;      continue;    }    sendActionMail(true,instance,messageKey,null,actionLink,false);    instance.setSuspendedByApp(false);  }  configService.setAPPSuspend(Boolean.valueOf(isSuspendedByApp).toString());  return true;}  }
class C{  public AdempiereThemeInnova(){  setDefault();  s_theme=this;  s_name=NAME;}  }
class C{  protected void determineCoverageGoals(){  List<MethodCoverageTestFitness> goals=new MethodCoverageFactory().getCoverageGoals();  for (  MethodCoverageTestFitness goal : goals) {    methodCoverageMap.put(goal.getClassName() + "." + goal.getMethod(),goal);    if (Properties.TEST_ARCHIVE)     TestsArchive.instance.addGoalToCover(this,goal);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:04.128 -0400",hash_original_method="7855450641F7BEAB9B605C4390783013",hash_generated_method="4D3E123755D01FEB460C17473C4BE80F") protected void engineUpdate(byte input){  oneByte[0]=input;  SHA1Impl.updateHash(buffer,oneByte,0,0);  messageLength++;}  }
class C{  public Allele(String seq,int start,int end,byte[] nt){  super(seq,start,end);  if (nt == null) {    throw new NullPointerException();  }  mNt=nt;}  }
class C{  public static ShareIntentNoBuilder from(@NonNull Context context){  checkNotNull(context);  ShareIntentBuilder builder=new ShareIntentBuilder(context);  return new ShareIntentNoBuilder(builder);}  }
class C{  private void testIsoDayOfWeek() throws Exception {  assertEquals(1,getIsoDayOfWeek(parse("2008-09-29")));  assertEquals(2,getIsoDayOfWeek(parse("2008-09-30")));  assertEquals(3,getIsoDayOfWeek(parse("2008-10-01")));  assertEquals(4,getIsoDayOfWeek(parse("2008-10-02")));  assertEquals(5,getIsoDayOfWeek(parse("2008-10-03")));  assertEquals(6,getIsoDayOfWeek(parse("2008-10-04")));  assertEquals(7,getIsoDayOfWeek(parse("2008-10-05")));}  }
class C{  public int indexOf(int elem){  if (null == m_map)   return -1;  for (int i=0; i < m_firstFree; i++) {    int node=m_map[i];    if (node == elem)     return i;  }  return -1;}  }
class C{  private void stateChange(int nextState){  if (state == nextState)   return;  if (newState == nextState) {    state=nextState;    phaser.arrive();    log("%d:   state change: %s %s%n",getId(),toStateName(nextState),phaserToString(phaser));    return;  }  throw new RuntimeException("current " + state + " next "+ nextState+ " new state "+ newState);}  }
class C{  private boolean same(double d1,double d2,double tolerance){  return (Math.abs(d1 - d2) < tolerance);}  }
class C{  public AssignmentWizard(String action,String description,Assignment assignment,int fieldFlags,String helpId,String pageTwoHelpId){  super();  this.assignment=assignment;  assignmentPage=new AssignmentWizardPage(action,description,fieldFlags,helpId);  typePage=new TypingWizardPage(action,description,pageTwoHelpId);}  }
class C{  static WordInfo[] doWordAnalysis(GVTGlyphVector gv,AttributedCharacterIterator aci,int numWords,FontRenderContext frc){  int numGlyphs=gv.getNumGlyphs();  int[] glyphWords=new int[numGlyphs];  int[] wordMap=allocWordMap(null,10);  int maxWord=0;  int aciIdx=aci.getBeginIndex();  for (int i=0; i < numGlyphs; i++) {    int cnt=gv.getCharacterCount(i,i);    aci.setIndex(aciIdx);    Integer integer=(Integer)aci.getAttribute(WORD_LIMIT);    int minWord=integer.intValue() - numWords;    if (minWord > maxWord) {      maxWord=minWord;      wordMap=allocWordMap(wordMap,maxWord + 1);    }    aciIdx++;    for (int c=1; c < cnt; c++) {      aci.setIndex(aciIdx);      integer=(Integer)aci.getAttribute(WORD_LIMIT);      int cWord=integer.intValue() - numWords;      if (cWord > maxWord) {        maxWord=cWord;        wordMap=allocWordMap(wordMap,maxWord + 1);      }      if (cWord < minWord) {        wordMap[minWord]=cWord;        minWord=cWord;      } else       if (cWord > minWord) {        wordMap[cWord]=minWord;      }      aciIdx++;    }    glyphWords[i]=minWord;  }  int words=0;  WordInfo[] cWordMap=new WordInfo[maxWord + 1];  for (int i=0; i <= maxWord; i++) {    int nw=wordMap[i];    if (nw == -1) {      cWordMap[i]=new WordInfo(words++);    } else {      int word=nw;      nw=wordMap[i];      while (nw != -1) {        word=nw;        nw=wordMap[word];      }      wordMap[i]=word;      cWordMap[i]=cWordMap[word];    }  }  wordMap=null;  WordInfo[] wordInfos=new WordInfo[words];  for (int i=0; i <= maxWord; i++) {    WordInfo wi=cWordMap[i];    wordInfos[wi.getIndex()]=cWordMap[i];  }  aciIdx=aci.getBeginIndex();  int aciEnd=aci.getEndIndex();  char ch=aci.setIndex(aciIdx);  int aciWordStart=aciIdx;  GVTFont gvtFont=(GVTFont)aci.getAttribute(GVT_FONT);  float lineHeight=1.0f;  Float lineHeightFloat=(Float)aci.getAttribute(LINE_HEIGHT);  if (lineHeightFloat != null)   lineHeight=lineHeightFloat.floatValue();  int runLimit=aci.getRunLimit(szAtts);  WordInfo prevWI=null;  float[] lastAdvAdj=new float[numGlyphs];  float[] advAdj=new float[numGlyphs];  boolean[] hideLast=new boolean[numGlyphs];  boolean[] hide=new boolean[numGlyphs];  boolean[] space=new boolean[numGlyphs];  float[] glyphPos=gv.getGlyphPositions(0,numGlyphs + 1,null);  for (int i=0; i < numGlyphs; i++) {    char pch=ch;    ch=aci.setIndex(aciIdx);    Integer integer=(Integer)aci.getAttribute(WORD_LIMIT);    WordInfo theWI=cWordMap[integer.intValue() - numWords];    if (theWI.getFlowLine() == null)     theWI.setFlowLine(aci.getAttribute(FLOW_LINE_BREAK));    if (prevWI == null) {      prevWI=theWI;    } else     if (prevWI != theWI) {      GVTLineMetrics lm=gvtFont.getLineMetrics(aci,aciWordStart,aciIdx,frc);      prevWI.addLineMetrics(gvtFont,lm);      prevWI.addLineHeight(lineHeight);      aciWordStart=aciIdx;      prevWI=theWI;    }    int chCnt=gv.getCharacterCount(i,i);    if (chCnt == 1) {      char nch;      float kern;switch (ch) {case SOFT_HYPHEN:        hideLast[i]=true;      nch=aci.next();    aci.previous();  kern=gvtFont.getHKern(pch,nch);advAdj[i]=-(glyphPos[2 * i + 2] - glyphPos[2 * i] + kern);break;case ZERO_WIDTH_JOINER:hide[i]=true;break;case ZERO_WIDTH_SPACE:hide[i]=true;break;case SPACE:space[i]=true;nch=aci.next();aci.previous();kern=gvtFont.getHKern(pch,nch);lastAdvAdj[i]=-(glyphPos[2 * i + 2] - glyphPos[2 * i] + kern);default :}}aciIdx+=chCnt;if ((aciIdx > runLimit) && (aciIdx < aciEnd)) {GVTLineMetrics lm=gvtFont.getLineMetrics(aci,aciWordStart,runLimit,frc);prevWI.addLineMetrics(gvtFont,lm);prevWI.addLineHeight(lineHeight);prevWI=null;aciWordStart=aciIdx;aci.setIndex(aciIdx);gvtFont=(GVTFont)aci.getAttribute(GVT_FONT);Float f=(Float)aci.getAttribute(LINE_HEIGHT);lineHeight=f.floatValue();runLimit=aci.getRunLimit(szAtts);}}GVTLineMetrics lm=gvtFont.getLineMetrics(aci,aciWordStart,runLimit,frc);prevWI.addLineMetrics(gvtFont,lm);prevWI.addLineHeight(lineHeight);int[] wordGlyphCounts=new int[words];for (int i=0; i < numGlyphs; i++) {int word=glyphWords[i];int cWord=cWordMap[word].getIndex();glyphWords[i]=cWord;wordGlyphCounts[cWord]++;}cWordMap=null;int[][] wordGlyphs=new int[words][];int[] wordGlyphGroupsCounts=new int[words];for (int i=0; i < numGlyphs; i++) {int cWord=glyphWords[i];int[] wgs=wordGlyphs[cWord];if (wgs == null) {wgs=wordGlyphs[cWord]=new int[wordGlyphCounts[cWord]];wordGlyphCounts[cWord]=0;}int cnt=wordGlyphCounts[cWord];wgs[cnt]=i;if (cnt == 0) {wordGlyphGroupsCounts[cWord]++;} else {if (wgs[cnt - 1] != i - 1) wordGlyphGroupsCounts[cWord]++;}wordGlyphCounts[cWord]++;}for (int i=0; i < words; i++) {int cnt=wordGlyphGroupsCounts[i];GlyphGroupInfo[] wordGlyphGroups=new GlyphGroupInfo[cnt];if (cnt == 1) {int[] glyphs=wordGlyphs[i];int start=glyphs[0];int end=glyphs[glyphs.length - 1];wordGlyphGroups[0]=new GlyphGroupInfo(gv,start,end,hide,hideLast[end],glyphPos,advAdj,lastAdvAdj,space);} else {int glyphGroup=0;int[] glyphs=wordGlyphs[i];int prev=glyphs[0];int start=prev;for (int j=1; j < glyphs.length; j++) {if (prev + 1 != glyphs[j]) {int end=glyphs[j - 1];wordGlyphGroups[glyphGroup]=new GlyphGroupInfo(gv,start,end,hide,hideLast[end],glyphPos,advAdj,lastAdvAdj,space);start=glyphs[j];glyphGroup++;}prev=glyphs[j];}int end=glyphs[glyphs.length - 1];wordGlyphGroups[glyphGroup]=new GlyphGroupInfo(gv,start,end,hide,hideLast[end],glyphPos,advAdj,lastAdvAdj,space);}wordInfos[i].setGlyphGroups(wordGlyphGroups);}return wordInfos;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:04.328 -0500",hash_original_method="D53B73924CE25BA79BE5C682EDA80315",hash_generated_method="76103A06C46A7D3BD84888DC632CF17F") public static Sampler CLAMP_NEAREST(RenderScript rs){  if (rs.mSampler_CLAMP_NEAREST == null) {    Builder b=new Builder(rs);    b.setMinification(Value.NEAREST);    b.setMagnification(Value.NEAREST);    b.setWrapS(Value.CLAMP);    b.setWrapT(Value.CLAMP);    rs.mSampler_CLAMP_NEAREST=b.create();  }  return rs.mSampler_CLAMP_NEAREST;}  }
class C{  public static XMLObjectReader newInstance(InputStream in,String encoding) throws XMLStreamException {  XMLObjectReader reader=new XMLObjectReader();  reader.setInput(in,encoding);  return reader;}  }
class C{  public boolean isForeignKeysSupported(){  return foreignKeysSupported;}  }
class C{  public Builder(RenderScript rs,Element e){  e.checkValid();  mRS=rs;  mElement=e;}  }
class C{  public void prologueStackHeights(NormalMethod method,BytecodeStream bcodes,int[] stackHeights){  if (VM.TraceOnStackReplacement) {    VM.sysWriteln("computing stack heights of method " + method.toString());  }  bytecodes=bcodes;  visitedpc=new byte[bytecodes.length()];  ignoreGotos=true;  int localsize=method.getLocalWords();  retaddr=new int[localsize];  for (int i=0; i < localsize; i++) {    retaddr[i]=-1;  }  addr=-1;  int stacksize=method.getOperandWords();  TypeStack simstacks=new TypeStack(stacksize,VoidTypeCode);{    int startpc=0;    scanBlocks(method,bytecodes,false,-1,null,null,startpc,simstacks,stackHeights);  }  visitedpc=null;}  }
class C{  public void sendSAXComment(org.xml.sax.ext.LexicalHandler ch,int start,int length) throws org.xml.sax.SAXException {  String comment=getString(start,length);  ch.comment(comment.toCharArray(),0,length);}  }
class C{  public AbstractIndexTask(final String termText,final int termNdx,final int numTerms,final boolean prefixMatch,final double queryTermWeight,final FullTextIndex<V> searchEngine){  if (termText == null)   throw new IllegalArgumentException();  if (searchEngine == null)   throw new IllegalArgumentException();  this.queryTerm=termText;  this.queryTermNdx=termNdx;  this.numQueryTerms=numTerms;  this.queryTermWeight=queryTermWeight;  final IKeyBuilder keyBuilder=searchEngine.getIndex().getIndexMetadata().getKeyBuilder();{    keyBuilder.reset();    keyBuilder.appendText(termText,true,false);    final byte[] tmp=keyBuilder.getKey();    if (prefixMatch) {      fromKey=new byte[tmp.length - 3];      System.arraycopy(tmp,0,fromKey,0,fromKey.length);    } else {      fromKey=tmp;    }  }{    toKey=SuccessorUtil.successor(fromKey.clone());  }}  }
class C{  public List<Pair<Level,String>> load() throws IOException {  final Logger logger=GPLogger.getLogger(GanttCSVOpen.class);  final List<Pair<Level,String>> errors=Lists.newArrayList();  for (  RecordGroup group : myRecordGroups) {    group.setErrorOutput(errors);  }  int idxCurrentGroup=0;  int idxNextGroup;  int skipHeadLines=0;  do {    idxNextGroup=idxCurrentGroup;    CSVFormat format=CSVFormat.DEFAULT.withIgnoreEmptyLines(false).withIgnoreSurroundingSpaces(true);    if (myCsvOptions != null) {      format=format.withDelimiter(myCsvOptions.sSeparatedChar.charAt(0)).withQuote(myCsvOptions.sSeparatedTextChar.charAt(0));    }    RecordGroup currentGroup=myRecordGroups.get(idxCurrentGroup);    if (currentGroup.getHeader() != null) {      format=format.withHeader(currentGroup.getHeader().toArray(new String[0]));      idxNextGroup++;    }    try (Reader reader=myInputSupplier.get()){      CSVParser parser=new CSVParser(reader,format);      skipHeadLines=doLoad(parser,idxCurrentGroup,skipHeadLines);    }     idxCurrentGroup=idxNextGroup;  } while (skipHeadLines > 0);  for (  RecordGroup group : myRecordGroups) {    group.postProcess();  }  return errors;}  }
class C{  public void convertToFileIfRequired(){  try {    if (small != null && small.length > getMaxLengthInplaceLob()) {      int len=getBufferSize(Long.MAX_VALUE);      int tabId=tableId;      if (type == Value.BLOB) {        createFromStream(DataUtils.newBytes(len),0,getInputStream(),Long.MAX_VALUE);      } else {        createFromReader(new char[len],0,getReader(),Long.MAX_VALUE);      }      Value v2=link(tabId);      if (SysProperties.CHECK && v2 != this) {        DbException.throwInternalError();      }    }  } catch (  IOException e) {    throw DbException.convertIOException(e,null);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  return new Long(mf == null ? 0 : mf.getRecordTime());}  }
class C{  public JCExpression makeNullCheck(JCExpression arg){  Name name=TreeInfo.name(arg);  if (name == names._this || name == names._super)   return arg;  JCTree.Tag optag=NULLCHK;  JCUnary tree=make.at(arg.pos).Unary(optag,arg);  tree.operator=syms.nullcheck;  tree.type=arg.type;  return tree;}  }
class C{  protected boolean handle(){  log.debug("Waiting for state change");  waitSensorChange(now,sensor);  now=sensor.getKnownState();  log.debug("Found new state: " + now);  setTurnout(now);  return true;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__BODY:    setBody((Block)newValue);  return;case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__LOK:set_lok((LocalArgumentsVariable)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public Offer(final RPObject object){  super(object);  setRPClass("offer");  hide();  getSlot(OFFER_ITEM_SLOT_NAME).clear();  final RPObject itemObject=object.getSlot(OFFER_ITEM_SLOT_NAME).getFirst();  final Item entity=new ItemTransformer().transform(itemObject);  if (entity == null) {    int quantity=1;    if (itemObject.has("quantity")) {      quantity=itemObject.getInt("quantity");    }    logger.warn("Cannot restore " + quantity + " "+ itemObject.get("name")+ " to offer "+ " because this item was removed from items.xml");    return;  }  getSlot(OFFER_ITEM_SLOT_NAME).addPreservingId(entity);}  }
class C{  static void stopRefreshTimer(){  try {    if (refreshTimer != null && mbeanServer != null) {      mbeanServer.unregisterMBean(refreshTimerObjectName);      refreshTimer.stop();    }  } catch (  JMException e) {    logStackTrace(Level.WARN,e);  }catch (  JMRuntimeException e) {    logStackTrace(Level.WARN,e);  }catch (  Exception e) {    logStackTrace(Level.DEBUG,e,"Failed to stop refresh timer for MBeanUtil");  }}  }
class C{  public RenderPass(RajawaliScene scene,Camera camera,int clearColor){  mPassType=PassType.RENDER;  mScene=scene;  mCamera=camera;  mClearColor=clearColor;  mOldClearColor=0x00000000;  mEnabled=true;  mClear=true;  mNeedsSwap=true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:29.511 -0500",hash_original_method="3040682D1BCFEA9BA338FA9FE200A62D",hash_generated_method="CAAB92B2FE1C02DD4BCA219B7AFDAD2B") public void onRingingBack(SipSession session){}  }
class C{  public TaskResourceRep hostVcenterUnassign(URI hostId,URI eventId){  return hostClusterChange(hostId,NullColumnValueGetter.getNullURI(),NullColumnValueGetter.getNullURI(),true,eventId);}  }
class C{  private void openFile(final File file,final int page){  try {    final boolean fileCanBeOpened=OpenFile.openUpFile(file.getCanonicalPath(),commonValues,searchFrame,currentGUI,decode_pdf,properties,thumbnails);    commonValues.setCurrentPage(page);    if (fileCanBeOpened) {      OpenFile.processPage(commonValues,decode_pdf,currentGUI,thumbnails);    }  } catch (  final Exception e) {    System.err.println("Exception " + e + " processing file");    e.printStackTrace();    Values.setProcessing(false);  }}  }
class C{  public Vertex top(Network network){  if (this.contextStack.isEmpty()) {    return null;  }  return network.findById(this.contextStack.get(this.contextStack.size() - 1));}  }
class C{  public static GenericValue create(Delegator delegator,ModelEntity modelEntity,Map<String,? extends Object> fields){  GenericValue newValue=new GenericValue();  newValue.init(delegator,modelEntity,fields);  return newValue;}  }
class C{  public AuthSSLInitializationError(String message){  super(message);}  }
class C{  public boolean containsEntry(int position,VariableReference var){  if (!trace.containsKey(position)) {    trace.put(position,new HashMap<Integer,T>());    return false;  }  if (!trace.get(position).containsKey(var.getStPosition()))   return false;  return true;}  }
class C{  protected ConditionExpression andConditions(ConditionExpression conds,ConditionExpression cond){  if (conds == null)   return cond; else {    List<ConditionExpression> operands=new ArrayList<>(2);    operands.add(conds);    operands.add(cond);    return new LogicalFunctionCondition("and",operands,cond.getSQLtype(),null,typesTranslator.typeForSQLType(cond.getSQLtype()));  }}  }
class C{  public boolean isNullOrEmpty(String section,String key){  String value=getKeyValueEL(section,key);  return (value == null || value.length() == 0);}  }
class C{  public static SymbolTable makeLocalSymtab(IonSystem system,String... localSymbols){  return newLocalSymtab(system,system.getSystemSymbolTable(),Arrays.asList(localSymbols));}  }
class C{  public boolean isSynchronised() throws IOException {  String serverVersion=preCalcMatchClient.getServerVersion();  int finalDashIndex=interproscanVersion.lastIndexOf("-");  String interproDataVersion=interproscanVersion.substring(finalDashIndex);  if (!serverVersion.endsWith(interproDataVersion)) {    displayLookupSynchronisationError(interproscanVersion,serverVersion);    return false;  }  return true;}  }
class C{  public String clusterResultsToString(){  return m_clusteringResults.toString();}  }
class C{  public static RxANRequest.PatchRequestBuilder patch(String url){  return new RxANRequest.PatchRequestBuilder(url);}  }
class C{  @Override public String toString(){  return name;}  }
class C{  protected double defaultNoiseVariance(){  return 1.0;}  }
class C{  public IgniteTxRollbackCheckedException(Throwable cause){  super(cause);}  }
class C{  public void reAlloc(){  final long newAllocationSize=allocationSizeInBytes * 2L;  if (newAllocationSize > MAX_ALLOCATION_SIZE) {    throw new OversizedAllocationException("Requested amount of memory is more than max allowed allocation size");  }  final int curSize=(int)newAllocationSize;  final ArrowBuf newBuf=allocator.buffer(curSize);  newBuf.setZero(0,newBuf.capacity());  newBuf.setBytes(0,data,0,data.capacity());  data.release();  data=newBuf;  allocationSizeInBytes=curSize;}  }
class C{  public boolean undo(INode state){  SmallPuzzle tp=(SmallPuzzle)state;  tp.s[0]*=2;  tp.s[1]*=2;  return true;}  }
class C{  public GradlePluginsRuntimeException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public DataHeaderViewHolder newViewHolder(ViewGroup viewGroup){  View dataHeaderView=LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.offer_header,viewGroup,false);  return new DataHeaderViewHolder(dataHeaderView);}  }
class C{  public void restart(String gatewayId) throws PageException {  executeThread(gatewayId,GatewayThread.RESTART);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private int readAnnotationValue(int v,final char[] buf,final String name,final AnnotationVisitor av){  int i;  if (av == null) {switch (b[v] & 0xFF) {case 'e':      return v + 5;case '@':    return readAnnotationValues(v + 3,buf,true,null);case '[':  return readAnnotationValues(v + 1,buf,false,null);default :return v + 3;}}switch (b[v++] & 0xFF) {case 'I':case 'J':case 'F':case 'D':av.visit(name,readConst(readUnsignedShort(v),buf));v+=2;break;case 'B':av.visit(name,new Byte((byte)readInt(items[readUnsignedShort(v)])));v+=2;break;case 'Z':av.visit(name,readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE);v+=2;break;case 'S':av.visit(name,new Short((short)readInt(items[readUnsignedShort(v)])));v+=2;break;case 'C':av.visit(name,new Character((char)readInt(items[readUnsignedShort(v)])));v+=2;break;case 's':av.visit(name,readUTF8(v,buf));v+=2;break;case 'e':av.visitEnum(name,readUTF8(v,buf),readUTF8(v + 2,buf));v+=4;break;case 'c':av.visit(name,Type.getType(readUTF8(v,buf)));v+=2;break;case '@':v=readAnnotationValues(v + 2,buf,true,av.visitAnnotation(name,readUTF8(v,buf)));break;case '[':int size=readUnsignedShort(v);v+=2;if (size == 0) {return readAnnotationValues(v - 2,buf,false,av.visitArray(name));}switch (this.b[v++] & 0xFF) {case 'B':byte[] bv=new byte[size];for (i=0; i < size; i++) {bv[i]=(byte)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,bv);--v;break;case 'Z':boolean[] zv=new boolean[size];for (i=0; i < size; i++) {zv[i]=readInt(items[readUnsignedShort(v)]) != 0;v+=3;}av.visit(name,zv);--v;break;case 'S':short[] sv=new short[size];for (i=0; i < size; i++) {sv[i]=(short)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,sv);--v;break;case 'C':char[] cv=new char[size];for (i=0; i < size; i++) {cv[i]=(char)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,cv);--v;break;case 'I':int[] iv=new int[size];for (i=0; i < size; i++) {iv[i]=readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,iv);--v;break;case 'J':long[] lv=new long[size];for (i=0; i < size; i++) {lv[i]=readLong(items[readUnsignedShort(v)]);v+=3;}av.visit(name,lv);--v;break;case 'F':float[] fv=new float[size];for (i=0; i < size; i++) {fv[i]=Float.intBitsToFloat(readInt(items[readUnsignedShort(v)]));v+=3;}av.visit(name,fv);--v;break;case 'D':double[] dv=new double[size];for (i=0; i < size; i++) {dv[i]=Double.longBitsToDouble(readLong(items[readUnsignedShort(v)]));v+=3;}av.visit(name,dv);--v;break;default :v=readAnnotationValues(v - 3,buf,false,av.visitArray(name));}}return v;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public SubscriptionAlreadyExistsException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public BandPassBuilder stopFrequency2(int stopFrequency){  mStopFrequency2=stopFrequency;  return this;}  }
class C{  public NotificationChain basicSetArgs(ExpressionList newArgs,NotificationChain msgs){  ExpressionList oldArgs=args;  args=newArgs;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.ACCESS__ARGS,oldArgs,newArgs);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public ObjectNotFoundException(List<LocalizedText> messages){  super(messages);}  }
class C{  public ReadOnlyFileSystemException(){}  }
class C{  public void writeToNBT(final NBTTagCompound nbt){  final NBTTagList modulesNbt=new NBTTagList();  for (  final Module module : modules) {    final NBTTagCompound moduleNbt=new NBTTagCompound();    if (module != null) {      module.writeToNBT(moduleNbt);    }    modulesNbt.appendTag(moduleNbt);  }  nbt.setTag(TAG_MODULES,modulesNbt);  lock.ifPresent(null);  lock.ifPresent(null);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static float function2(float x){  return x * x * x* x* x - 2 * x * x* x + x;}  }
class C{  public static Number add(Number a,Number b){  if (isFloatingPoint(a) || isFloatingPoint(b)) {    return a.doubleValue() + b.doubleValue();  } else {    return a.longValue() + b.longValue();  }}  }
class C{  public void testUnivariateTEforCoupledVariablesFromFile() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/2coupledRandomCols-1.txt");  double[][] data=afr.getDouble2DMatrix();  double[] col0=MatrixUtils.selectColumn(data,0);  double[] col1=MatrixUtils.selectColumn(data,1);  col0=MatrixUtils.normaliseIntoNewArray(col0);  col1=MatrixUtils.normaliseIntoNewArray(col1);  int kNNs=4;  double expectedFromTRENTOOL0to1=0.3058006;  double expectedFromTRENTOOL1to0=-0.0029744;  System.out.println("Kraskov TE comparison 1 to TRENTOOL - univariate coupled data 1");  TransferEntropyCalculatorKraskov teCalc=new TransferEntropyCalculatorKraskov();  teCalc.setProperty(ConditionalMutualInfoCalculatorMultiVariateKraskov.PROP_K,Integer.toString(kNNs));  teCalc.setProperty(ConditionalMutualInfoCalculatorMultiVariateKraskov.PROP_NORMALISE,"false");  teCalc.setProperty(ConditionalMutualInfoCalculatorMultiVariateKraskov.PROP_ADD_NOISE,"0");  teCalc.initialise(1);  teCalc.setObservations(col0,col1);  double result=teCalc.computeAverageLocalOfObservations();  System.out.printf("From 2coupledRandomCols 0->1 expecting %.6f, got %.6f\n",expectedFromTRENTOOL0to1,result);  assertEquals(expectedFromTRENTOOL0to1,result,0.000001);  teCalc.initialise(1);  teCalc.setObservations(col1,col0);  result=teCalc.computeAverageLocalOfObservations();  assertEquals(expectedFromTRENTOOL1to0,result,0.000001);  System.out.printf("From 2coupledRandomCols 1->0 expecting %.6f, got %.6f\n",expectedFromTRENTOOL1to0,result);  assertEquals(99,teCalc.getNumObservations());}  }
class C{  public String app_source_path(String app_class){  String filename=app_class.replace(".","/");  filename=filename.replaceFirst("[$][0-9]+","");  if (filename.indexOf("$") > 0) {    filename=filename.substring(0,filename.indexOf("$"));  }  return "../jsrc/" + filename + ".java.html";}  }
class C{  public Pair<BigDecimal,BigDecimal> findQuantity(final Collection<Warehouse> warehouses,final String productSkuCode){  final List<Object> warehouseIdList=new ArrayList<Object>(warehouses.size());  for (  Warehouse wh : warehouses) {    warehouseIdList.add(wh.getWarehouseId());  }  final List rez=getGenericDao().findQueryObjectsByNamedQuery("SKU.QTY.ON.WAREHOUSES.IN.WAREHOUSEID.BY.SKUCODE",productSkuCode,warehouseIdList);  BigDecimal quantity=BigDecimal.ZERO.setScale(Constants.DEFAULT_SCALE);  BigDecimal reserved=BigDecimal.ZERO.setScale(Constants.DEFAULT_SCALE);  if (!rez.isEmpty()) {    final Object obj[]=(Object[])rez.get(0);    if (obj.length > 0 && obj[0] != null) {      quantity=((BigDecimal)obj[0]).setScale(Constants.DEFAULT_SCALE);    }    if (obj.length > 1 && obj[1] != null) {      reserved=((BigDecimal)obj[1]).setScale(Constants.DEFAULT_SCALE);    }  }  return new Pair<BigDecimal,BigDecimal>(quantity,reserved);}  }
class C{  private void checkMatrix(){  for (  Node variable : variables) {    if (variable == null) {      throw new NullPointerException();    }  }  if (sampleSize < 1) {    throw new IllegalArgumentException("Sample size must be at least 1.");  }  for (int i=0; i < matrix.rows(); i++) {    for (int j=0; j < matrix.columns(); j++) {      if (Double.isNaN(matrix.get(i,j))) {        throw new IllegalArgumentException("Please remove or impute missing values.");      }    }  }}  }
class C{  public DummyDataSource(){}  }
class C{  private int hash(String name){  assert name.intern() == name;  return name.hashCode() & (hashTableMask);}  }
class C{  @Override public boolean isConsciousProcessingRequired(){  return true;}  }
class C{  public boolean useForType(JavaType t){switch (_appliesFor) {case NON_CONCRETE_AND_ARRAYS:    while (t.isArrayType()) {      t=t.getContentType();    }case OBJECT_AND_NON_CONCRETE:  return (t.getRawClass() == Object.class) || !t.isConcrete();case NON_FINAL:while (t.isArrayType()) {  t=t.getContentType();}return !t.isFinal();default :return (t.getRawClass() == Object.class);}}  }
class C{  public void testFailure(Failure failure) throws Exception {  String printedOutput=this.endCapture();  String printedOutputNoTrailingWS=printedOutput.replaceFirst("\\s+$","");  System.out.println("Running " + mostRecentTestName + ": ");  System.out.println("====================================");  if (printedOutputNoTrailingWS.length() > 0) {    System.out.println(printedOutputNoTrailingWS);  }  System.out.println(JUnitUtilities.failureToString(failure));  mostRecentTestPassed=false;}  }
class C{  public ChunkedInputStream(InputStream in,HttpClient hc,MessageHeader responses) throws IOException {  this.in=in;  this.responses=responses;  this.hc=hc;  state=STATE_AWAITING_CHUNK_HEADER;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String arcFile=null;  String whiteboxHeaderFile=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  int progress=0;  double xllcenter=0;  double yllcenter=0;  double xllcorner=0;  double yllcorner=0;  double cellsize=0;  double north=0;  double east=0;  double west=0;  double south=0;  double arcNoData=-9999;  double whiteboxNoData=-32768d;  double z=0;  String delimiter=" ";  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  DataInputStream in=null;  BufferedReader br=null;  try {    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      arcFile=imageFiles[i];      if (!((new File(arcFile)).exists())) {        showFeedback("ArcGIS raster file does not exist.");        return;      }      if (arcFile.lastIndexOf(".") >= 0) {        String extension=arcFile.substring(arcFile.lastIndexOf("."));        whiteboxHeaderFile=arcFile.replace(extension,".dep");      } else {        whiteboxHeaderFile=arcFile + ".dep";      }      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxHeaderFile.replace(".dep",".tas"))).delete();      FileInputStream fstream=new FileInputStream(arcFile);      rows=0;      cols=0;      in=new DataInputStream(fstream);      br=new BufferedReader(new InputStreamReader(in));      if (arcFile != null) {        String line;        String[] str;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if (str[0].toLowerCase().contains("ncols")) {            cols=Integer.parseInt(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("nrows")) {            rows=Integer.parseInt(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("xllcenter")) {            xllcenter=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("yllcenter")) {            yllcenter=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("xllcorner")) {            xllcorner=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("yllcorner")) {            yllcorner=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("cellsize")) {            cellsize=Double.parseDouble(str[str.length - 1]);            if (xllcorner != 0) {              east=xllcorner + cols * cellsize;              west=xllcorner;              south=yllcorner;              north=yllcorner + rows * cellsize;            } else {              east=xllcenter - (0.5 * cellsize) + cols * cellsize;              west=xllcenter - (0.5 * cellsize);              south=yllcenter - (0.5 * cellsize);              north=yllcenter - (0.5 * cellsize) + rows * cellsize;            }          } else           if (str[0].toLowerCase().contains("nodata")) {            arcNoData=Double.parseDouble(str[str.length - 1]);          } else {            break;          }        }        fw=new FileWriter(whiteboxHeaderFile,false);        bw=new BufferedWriter(fw);        out=new PrintWriter(bw,true);        str1="Min:\t" + Double.toString(Integer.MAX_VALUE);        out.println(str1);        str1="Max:\t" + Double.toString(Integer.MIN_VALUE);        out.println(str1);        str1="North:\t" + Double.toString(north);        out.println(str1);        str1="South:\t" + Double.toString(south);        out.println(str1);        str1="East:\t" + Double.toString(east);        out.println(str1);        str1="West:\t" + Double.toString(west);        out.println(str1);        str1="Cols:\t" + Integer.toString(cols);        out.println(str1);        str1="Rows:\t" + Integer.toString(rows);        out.println(str1);        str1="Data Type:\t" + "float";        out.println(str1);        str1="Z Units:\t" + "not specified";        out.println(str1);        str1="XY Units:\t" + "not specified";        out.println(str1);        str1="Projection:\t" + "not specified";        out.println(str1);        str1="Data Scale:\tcontinuous";        out.println(str1);        str1="Preferred Palette:\t" + "spectrum.pal";        out.println(str1);        str1="NoData:\t-32768";        out.println(str1);        if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {          str1="Byte Order:\t" + "LITTLE_ENDIAN";        } else {          str1="Byte Order:\t" + "BIG_ENDIAN";        }        out.println(str1);        WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"rw");        delimiter=" ";        row=0;        col=0;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if (str[0].toLowerCase().contains("ncols")) {          } else           if (str[0].toLowerCase().contains("nrows")) {          } else           if (str[0].toLowerCase().contains("xllcenter")) {          } else           if (str[0].toLowerCase().contains("yllcenter")) {          } else           if (str[0].toLowerCase().contains("xllcorner")) {          } else           if (str[0].toLowerCase().contains("yllcorner")) {          } else           if (str[0].toLowerCase().contains("cellsize")) {          } else           if (str[0].toLowerCase().contains("nodata")) {          } else {            for (i=0; i < str.length; i++) {              z=Double.parseDouble(str[i]);              if (z != arcNoData) {                wbr.setValue(row,col,z);              } else {                wbr.setValue(row,col,whiteboxNoData);              }              col++;              if (col == cols) {                col=0;                row++;              }            }          }        }        in.close();        br.close();        wbr.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");        wbr.addMetadataEntry("Created on " + new Date());        wbr.close();        returnData(whiteboxHeaderFile);      }    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public IntArray(int capacity){  data=new int[capacity];}  }
class C{  @Override public void installBorderSettings(){  UIManager.put("DockView.singleDockableBorder",null);  UIManager.put("DockView.tabbedDockableBorder",null);  UIManager.put("DockView.maximizedDockableBorder",null);}  }
class C{  private String match(MBankStatementLine bsl){  if (m_matchers == null || bsl == null || bsl.getC_Payment_ID() != 0)   return "--";  log.fine("match - " + bsl);  BankStatementMatchInfo info=null;  for (int i=0; i < m_matchers.length; i++) {    if (m_matchers[i].isMatcherValid()) {      info=m_matchers[i].getMatcher().findMatch(bsl);      if (info != null && info.isMatched()) {        if (info.getC_Payment_ID() > 0)         bsl.setC_Payment_ID(info.getC_Payment_ID());        if (info.getC_Invoice_ID() > 0)         bsl.setC_Invoice_ID(info.getC_Invoice_ID());        if (info.getC_BPartner_ID() > 0)         bsl.setC_BPartner_ID(info.getC_BPartner_ID());        bsl.saveEx();        return "OK";      }    }  }  return "--";}  }
class C{  public Value convert(Value v){  try {    return v.convertTo(type);  } catch (  DbException e) {    if (e.getErrorCode() == ErrorCode.DATA_CONVERSION_ERROR_1) {      String target=(table == null ? "" : table.getName() + ": ") + getCreateSQL();      throw DbException.get(ErrorCode.DATA_CONVERSION_ERROR_1,v.getSQL() + " (" + target+ ")");    }    throw e;  }}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 4) {    System.out.println();    System.out.println("Usage: " + SerialUIDChanger.class.getName() + " <oldUID> <newUID> <oldFilename> <newFilename>");    System.out.println("       <oldFilename> and <newFilename> have to be different");    System.out.println();  } else {    if (args[2].equals(args[3]))     throw new Exception("Filenames have to be different!");    changeUID(Long.parseLong(args[0]),Long.parseLong(args[1]),args[2],args[3]);  }}  }
class C{  public void sendEmptyDataChunk() throws NetworkException {  msrpMgr.sendEmptyChunk();}  }
class C{  public boolean commitCorrection(CorrectionInfo correctionInfo){  return false;}  }
class C{  public void testSimpleWatchActionMulti() throws Exception {  WatchManager<String> em=new WatchManager<String>();  StringWatchAction action=new StringWatchAction(3);  Watch<String> w=em.watch(new StringWatchPredicate("hello"),3,action);  for (int i=0; i < 3; i++) {    assertNull("Action not taken before match: " + i,action.getString(i));    em.process("hello",i);    assertEquals("Should have string after match: " + i,"hello",action.getString(i));  }  assertTrue("Should be done",w.isDone());}  }
class C{  public boolean hasInitialResponse(){  return true;}  }
class C{  protected boolean matches(Node object){  if (object instanceof Element) {    Element element=(Element)object;    return name.equals(element.getName());  }  return false;}  }
class C{  public boolean showJavaScriptSites(){  return mContentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_JAVASCRIPT;}  }
class C{  public boolean isSortingCategories(){  return sortingCategories;}  }
class C{  public PacProxyException(){  super();}  }
class C{  public void allZero(){  this.coeff_domlength=0;  this.coeff_date=0;  this.coeff_wordsintitle=0;  this.coeff_wordsintext=0;  this.coeff_phrasesintext=0;  this.coeff_llocal=0;  this.coeff_lother=0;  this.coeff_urllength=0;  this.coeff_urlcomps=0;  this.coeff_hitcount=0;  this.coeff_posintext=0;  this.coeff_posofphrase=0;  this.coeff_posinphrase=0;  this.coeff_authority=0;  this.coeff_worddistance=0;  this.coeff_appurl=0;  this.coeff_app_dc_title=0;  this.coeff_app_dc_creator=0;  this.coeff_app_dc_subject=0;  this.coeff_app_dc_description=0;  this.coeff_appemph=0;  this.coeff_catindexof=0;  this.coeff_cathasimage=0;  this.coeff_cathasaudio=0;  this.coeff_cathasvideo=0;  this.coeff_cathasapp=0;  this.coeff_termfrequency=0;  this.coeff_urlcompintoplist=0;  this.coeff_descrcompintoplist=0;  this.coeff_prefer=0;  this.coeff_language=0;  this.coeff_citation=0;}  }
class C{  public final boolean isTopLevel(){  return outerClass == null || isStatic() || isInterface();}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.SCRIPT_ELEMENT;}  }
class C{  public Type1Font(String baseName,PDFObject src,PDFFontDescriptor descriptor) throws IOException {  super(baseName,src,descriptor);  if (descriptor != null && descriptor.getFontFile() != null) {    int start=descriptor.getFontFile().getDictRef("Length1").getIntValue();    int len=descriptor.getFontFile().getDictRef("Length2").getIntValue();    byte font[]=descriptor.getFontFile().getStream();    parseFont(font,start,len);  }}  }
class C{  public static double sortingAUC(ArrayList<Tuple2D> data){  double P=sumTruth(data);  double N=data.size() - P;  double n=data.size();  double lastpred=data.get(0).pred - 1.;  double lastx=0, lasty=0;  double x, y;  double tp=0, fp=0;  double auc=0;  for (  Tuple2D tuple : data) {    if (tuple.pred != lastpred) {      x=fp / N;      y=tp / P;      auc=auc + 0.5 * (lasty + y) * (x - lastx);      lastx=x;      lasty=y;      lastpred=tuple.pred;    }    if (tuple.truth > 0)     tp++; else     fp++;  }  return auc;}  }
class C{  public LinearLocation toLowest(Geometry linearGeom){  LineString lineComp=(LineString)linearGeom.getGeometryN(componentIndex);  int nseg=lineComp.getNumPoints() - 1;  if (segmentIndex < nseg)   return this;  return new LinearLocation(componentIndex,nseg,1.0,false);}  }
class C{  public void extractAudioWaveform(ExtractAudioWaveformProgressListener listener) throws IOException {  int frameDuration=0;  int sampleCount=0;  final String projectPath=mMANativeHelper.getProjectPath();  if (mAudioWaveformFilename == null) {    String mAudioWaveFileName=null;    mAudioWaveFileName=String.format(projectPath + "/" + "audioWaveformFile-"+ getId()+ ".dat");    if (mMANativeHelper.getAudioCodecType(mAudioType) == MediaProperties.ACODEC_AMRNB) {      frameDuration=(MediaProperties.SAMPLES_PER_FRAME_AMRNB * 1000) / MediaProperties.DEFAULT_SAMPLING_FREQUENCY;      sampleCount=MediaProperties.SAMPLES_PER_FRAME_AMRNB;    } else     if (mMANativeHelper.getAudioCodecType(mAudioType) == MediaProperties.ACODEC_AMRWB) {      frameDuration=(MediaProperties.SAMPLES_PER_FRAME_AMRWB * 1000) / MediaProperties.DEFAULT_SAMPLING_FREQUENCY;      sampleCount=MediaProperties.SAMPLES_PER_FRAME_AMRWB;    } else     if (mMANativeHelper.getAudioCodecType(mAudioType) == MediaProperties.ACODEC_AAC_LC) {      frameDuration=(MediaProperties.SAMPLES_PER_FRAME_AAC * 1000) / MediaProperties.DEFAULT_SAMPLING_FREQUENCY;      sampleCount=MediaProperties.SAMPLES_PER_FRAME_AAC;    }    mMANativeHelper.generateAudioGraph(getId(),mFilename,mAudioWaveFileName,frameDuration,MediaProperties.DEFAULT_CHANNEL_COUNT,sampleCount,listener,true);    mAudioWaveformFilename=mAudioWaveFileName;  }  mWaveformData=new SoftReference<WaveformData>(new WaveformData(mAudioWaveformFilename));}  }
class C{  public void actionPerformed(ActionEvent e){  log.fine("VPayment.actionPerformed - " + e.getActionCommand());  if (e.getActionCommand().equals(ConfirmPanel.A_OK)) {    if (checkMandatory()) {      saveChanges();      dispose();    }  } else   if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL))   dispose(); else   if (e.getSource() == paymentCombo) {    ValueNamePair pp=(ValueNamePair)paymentCombo.getSelectedItem();    if (pp != null) {      String s=pp.getValue().toLowerCase();      if (X_C_Order.PAYMENTRULE_DirectDebit.equalsIgnoreCase(s))       s=X_C_Order.PAYMENTRULE_DirectDeposit.toLowerCase();      s+="Panel";      centerLayout.show(centerPanel,s);      int C_Invoice_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNo,"C_Invoice_ID");      MInvoice invoice_tmp=new MInvoice(Env.getCtx(),C_Invoice_ID,null);      if (!invoice_tmp.isSOTrx()) {        bAmountField.setValue(m_Amount.negate());      } else {        bAmountField.setValue(m_Amount);      }      invoice_tmp=null;    }  } else   if (e.getSource() == sCurrencyCombo) {    KeyNamePair pp=(KeyNamePair)sCurrencyCombo.getSelectedItem();    BigDecimal amt=MConversionRate.convert(Env.getCtx(),m_Amount,m_C_Currency_ID,pp.getKey(),m_AD_Client_ID,m_AD_Org_ID);    sAmountField.setValue(amt);  } else   if (e.getSource() == bCurrencyCombo) {    KeyNamePair pp=(KeyNamePair)bCurrencyCombo.getSelectedItem();    BigDecimal amt=MConversionRate.convert(Env.getCtx(),m_Amount,m_C_Currency_ID,pp.getKey(),m_AD_Client_ID,m_AD_Org_ID);    bAmountField.setValue(amt);  } else   if (e.getSource() == kOnline || e.getSource() == sOnline)   processOnline();}  }
class C{  protected int read(byte[] buffer) throws IOException {  return mTiffStream.read(buffer);}  }
class C{  public URL find(String classname){  if (this.classname.equals(classname)) {    String cname=classname.replace('.','/') + ".class";    try {      return new URL("file:/ByteArrayClassPath/" + cname);    } catch (    MalformedURLException e) {    }  }  return null;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public void selectInList(String listName,int offset){  TestUtils.selectInList(listName,offset);}  }
class C{  public MarketService updateUrl(String url){  this.updateUrl=url;  return this;}  }
class C{  public void invert(final int ulx,final int uly,final int lrx,final int lry){  filter(ulx,uly,lrx,lry,FilterMode.FILTER_INVERT,-1);}  }
class C{  public void addModel(ModelInstance instance){  instances.add(instance);}  }
class C{  boolean isHandshakeComplete(){  return handshakeComplete;}  }
class C{  public StackBlurFilter(){  this(3,3);}  }
class C{  public static CC parseComponentConstraint(String s){  CC cc=new CC();  if (s.length() == 0)   return cc;  String[] parts=toTrimmedTokens(s,',');  for (  String part : parts) {    try {      if (part.length() == 0)       continue;      int ix=-1;      char c=part.charAt(0);      if (c == 'n') {        if (part.equals("north")) {          cc.setDockSide(0);          continue;        }        if (part.equals("newline")) {          cc.setNewline(true);          continue;        }        if (part.startsWith("newline ")) {          String gapSz=part.substring(7).trim();          cc.setNewlineGapSize(parseBoundSize(gapSz,true,true));          continue;        }      }      if (c == 'f' && (part.equals("flowy") || part.equals("flowx"))) {        cc.setFlowX(part.charAt(4) == 'x' ? Boolean.TRUE : Boolean.FALSE);        continue;      }      if (c == 's') {        ix=startsWithLenient(part,"skip",4,true);        if (ix > -1) {          String num=part.substring(ix).trim();          cc.setSkip(num.length() != 0 ? Integer.parseInt(num) : 1);          continue;        }        ix=startsWithLenient(part,"split",5,true);        if (ix > -1) {          String split=part.substring(ix).trim();          cc.setSplit(split.length() > 0 ? Integer.parseInt(split) : LayoutUtil.INF);          continue;        }        if (part.equals("south")) {          cc.setDockSide(2);          continue;        }        ix=startsWithLenient(part,new String[]{"spany","sy"},new int[]{5,2},true);        if (ix > -1) {          cc.setSpanY(parseSpan(part.substring(ix).trim()));          continue;        }        ix=startsWithLenient(part,new String[]{"spanx","sx"},new int[]{5,2},true);        if (ix > -1) {          cc.setSpanX(parseSpan(part.substring(ix).trim()));          continue;        }        ix=startsWithLenient(part,"span",4,true);        if (ix > -1) {          String[] spans=toTrimmedTokens(part.substring(ix).trim(),' ');          cc.setSpanX(spans[0].length() > 0 ? Integer.parseInt(spans[0]) : LayoutUtil.INF);          cc.setSpanY(spans.length > 1 ? Integer.parseInt(spans[1]) : 1);          continue;        }        ix=startsWithLenient(part,"shrinkx",7,true);        if (ix > -1) {          cc.getHorizontal().setShrink(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          continue;        }        ix=startsWithLenient(part,"shrinky",7,true);        if (ix > -1) {          cc.getVertical().setShrink(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          continue;        }        ix=startsWithLenient(part,"shrink",6,false);        if (ix > -1) {          String[] shrinks=toTrimmedTokens(part.substring(ix).trim(),' ');          cc.getHorizontal().setShrink(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          if (shrinks.length > 1)           cc.getVertical().setShrink(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          continue;        }        ix=startsWithLenient(part,new String[]{"shrinkprio","shp"},new int[]{10,3},true);        if (ix > -1) {          String sp=part.substring(ix).trim();          if (sp.startsWith("x") || sp.startsWith("y")) {            (sp.startsWith("x") ? cc.getHorizontal() : cc.getVertical()).setShrinkPriority(Integer.parseInt(sp.substring(2)));          } else {            String[] shrinks=toTrimmedTokens(sp,' ');            cc.getHorizontal().setShrinkPriority(Integer.parseInt(shrinks[0]));            if (shrinks.length > 1)             cc.getVertical().setShrinkPriority(Integer.parseInt(shrinks[1]));          }          continue;        }        ix=startsWithLenient(part,new String[]{"sizegroupx","sizegroupy","sgx","sgy"},new int[]{9,9,2,2},true);        if (ix > -1) {          String sg=part.substring(ix).trim();          char lc=part.charAt(ix - 1);          if (lc != 'y')           cc.getHorizontal().setSizeGroup(sg);          if (lc != 'x')           cc.getVertical().setSizeGroup(sg);          continue;        }      }      if (c == 'g') {        ix=startsWithLenient(part,"growx",5,true);        if (ix > -1) {          cc.getHorizontal().setGrow(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          continue;        }        ix=startsWithLenient(part,"growy",5,true);        if (ix > -1) {          cc.getVertical().setGrow(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          continue;        }        ix=startsWithLenient(part,"grow",4,false);        if (ix > -1) {          String[] grows=toTrimmedTokens(part.substring(ix).trim(),' ');          cc.getHorizontal().setGrow(parseFloat(grows[0],ResizeConstraint.WEIGHT_100));          cc.getVertical().setGrow(parseFloat(grows.length > 1 ? grows[1] : "",ResizeConstraint.WEIGHT_100));          continue;        }        ix=startsWithLenient(part,new String[]{"growprio","gp"},new int[]{8,2},true);        if (ix > -1) {          String gp=part.substring(ix).trim();          char c0=gp.length() > 0 ? gp.charAt(0) : ' ';          if (c0 == 'x' || c0 == 'y') {            (c0 == 'x' ? cc.getHorizontal() : cc.getVertical()).setGrowPriority(Integer.parseInt(gp.substring(2)));          } else {            String[] grows=toTrimmedTokens(gp,' ');            cc.getHorizontal().setGrowPriority(Integer.parseInt(grows[0]));            if (grows.length > 1)             cc.getVertical().setGrowPriority(Integer.parseInt(grows[1]));          }          continue;        }        if (part.startsWith("gap")) {          BoundSize[] gaps=parseGaps(part);          if (gaps[0] != null)           cc.getVertical().setGapBefore(gaps[0]);          if (gaps[1] != null)           cc.getHorizontal().setGapBefore(gaps[1]);          if (gaps[2] != null)           cc.getVertical().setGapAfter(gaps[2]);          if (gaps[3] != null)           cc.getHorizontal().setGapAfter(gaps[3]);          continue;        }      }      if (c == 'a') {        ix=startsWithLenient(part,new String[]{"aligny","ay"},new int[]{6,2},true);        if (ix > -1) {          cc.getVertical().setAlign(parseUnitValueOrAlign(part.substring(ix).trim(),false,null));          continue;        }        ix=startsWithLenient(part,new String[]{"alignx","ax"},new int[]{6,2},true);        if (ix > -1) {          cc.getHorizontal().setAlign(parseUnitValueOrAlign(part.substring(ix).trim(),true,null));          continue;        }        ix=startsWithLenient(part,"align",2,true);        if (ix > -1) {          String[] gaps=toTrimmedTokens(part.substring(ix).trim(),' ');          cc.getHorizontal().setAlign(parseUnitValueOrAlign(gaps[0],true,null));          if (gaps.length > 1)           cc.getVertical().setAlign(parseUnitValueOrAlign(gaps[1],false,null));          continue;        }      }      if ((c == 'x' || c == 'y') && part.length() > 2) {        char c2=part.charAt(1);        if (c2 == ' ' || (c2 == '2' && part.charAt(2) == ' ')) {          if (cc.getPos() == null) {            cc.setPos(new UnitValue[4]);          } else           if (cc.isBoundsInGrid() == false) {            throw new IllegalArgumentException("Cannot combine 'position' with 'x/y/x2/y2' keywords.");          }          int edge=(c == 'x' ? 0 : 1) + (c2 == '2' ? 2 : 0);          UnitValue[] pos=cc.getPos();          pos[edge]=parseUnitValue(part.substring(2).trim(),null,c == 'x');          cc.setPos(pos);          cc.setBoundsInGrid(true);          continue;        }      }      if (c == 'c') {        ix=startsWithLenient(part,"cell",4,true);        if (ix > -1) {          String[] grs=toTrimmedTokens(part.substring(ix).trim(),' ');          if (grs.length < 2)           throw new IllegalArgumentException("At least two integers must follow " + part);          cc.setCellX(Integer.parseInt(grs[0]));          cc.setCellY(Integer.parseInt(grs[1]));          if (grs.length > 2)           cc.setSpanX(Integer.parseInt(grs[2]));          if (grs.length > 3)           cc.setSpanY(Integer.parseInt(grs[3]));          continue;        }      }      if (c == 'p') {        ix=startsWithLenient(part,"pos",3,true);        if (ix > -1) {          if (cc.getPos() != null && cc.isBoundsInGrid())           throw new IllegalArgumentException("Can not combine 'pos' with 'x/y/x2/y2' keywords.");          String[] pos=toTrimmedTokens(part.substring(ix).trim(),' ');          UnitValue[] bounds=new UnitValue[4];          for (int j=0; j < pos.length; j++)           bounds[j]=parseUnitValue(pos[j],null,j % 2 == 0);          if (bounds[0] == null && bounds[2] == null || bounds[1] == null && bounds[3] == null)           throw new IllegalArgumentException("Both x and x2 or y and y2 can not be null!");          cc.setPos(bounds);          cc.setBoundsInGrid(false);          continue;        }        ix=startsWithLenient(part,"pad",3,true);        if (ix > -1) {          UnitValue[] p=parseInsets(part.substring(ix).trim(),false);          cc.setPadding(new UnitValue[]{p[0],p.length > 1 ? p[1] : null,p.length > 2 ? p[2] : null,p.length > 3 ? p[3] : null});          continue;        }        ix=startsWithLenient(part,"pushx",5,true);        if (ix > -1) {          cc.setPushX(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          continue;        }        ix=startsWithLenient(part,"pushy",5,true);        if (ix > -1) {          cc.setPushY(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          continue;        }        ix=startsWithLenient(part,"push",4,false);        if (ix > -1) {          String[] pushs=toTrimmedTokens(part.substring(ix).trim(),' ');          cc.setPushX(parseFloat(pushs[0],ResizeConstraint.WEIGHT_100));          cc.setPushY(parseFloat(pushs.length > 1 ? pushs[1] : "",ResizeConstraint.WEIGHT_100));          continue;        }      }      if (c == 't') {        ix=startsWithLenient(part,"tag",3,true);        if (ix > -1) {          cc.setTag(part.substring(ix).trim());          continue;        }      }      if (c == 'w' || c == 'h') {        if (part.equals("wrap")) {          cc.setWrap(true);          continue;        }        if (part.startsWith("wrap ")) {          String gapSz=part.substring(5).trim();          cc.setWrapGapSize(parseBoundSize(gapSz,true,true));          continue;        }        boolean isHor=c == 'w';        if (isHor && (part.startsWith("w ") || part.startsWith("width "))) {          String uvStr=part.substring(part.charAt(1) == ' ' ? 2 : 6).trim();          cc.getHorizontal().setSize(parseBoundSize(uvStr,false,true));          continue;        }        if (!isHor && (part.startsWith("h ") || part.startsWith("height "))) {          String uvStr=part.substring(part.charAt(1) == ' ' ? 2 : 7).trim();          cc.getVertical().setSize(parseBoundSize(uvStr,false,false));          continue;        }        if (part.startsWith("wmin ") || part.startsWith("wmax ") || part.startsWith("hmin ")|| part.startsWith("hmax ")) {          String uvStr=part.substring(5).trim();          if (uvStr.length() > 0) {            UnitValue uv=parseUnitValue(uvStr,null,isHor);            boolean isMin=part.charAt(3) == 'n';            DimConstraint dc=isHor ? cc.getHorizontal() : cc.getVertical();            dc.setSize(new BoundSize(isMin ? uv : dc.getSize().getMin(),dc.getSize().getPreferred(),isMin ? (dc.getSize().getMax()) : uv,uvStr));            continue;          }        }        if (part.equals("west")) {          cc.setDockSide(1);          continue;        }        if (part.startsWith("hidemode ")) {          cc.setHideMode(Integer.parseInt(part.substring(9)));          continue;        }      }      if (c == 'i' && part.startsWith("id ")) {        cc.setId(part.substring(3).trim());        int dIx=cc.getId().indexOf('.');        if (dIx == 0 || dIx == cc.getId().length() - 1)         throw new IllegalArgumentException("Dot must not be first or last!");        continue;      }      if (c == 'e') {        if (part.equals("east")) {          cc.setDockSide(3);          continue;        }        if (part.equals("external")) {          cc.setExternal(true);          continue;        }        ix=startsWithLenient(part,new String[]{"endgroupx","endgroupy","egx","egy"},new int[]{-1,-1,-1,-1},true);        if (ix > -1) {          String sg=part.substring(ix).trim();          char lc=part.charAt(ix - 1);          DimConstraint dc=(lc == 'x' ? cc.getHorizontal() : cc.getVertical());          dc.setEndGroup(sg);          continue;        }      }      if (c == 'd') {        if (part.equals("dock north")) {          cc.setDockSide(0);          continue;        }        if (part.equals("dock west")) {          cc.setDockSide(1);          continue;        }        if (part.equals("dock south")) {          cc.setDockSide(2);          continue;        }        if (part.equals("dock east")) {          cc.setDockSide(3);          continue;        }        if (part.equals("dock center")) {          cc.getHorizontal().setGrow(100f);          cc.getVertical().setGrow(100f);          cc.setPushX(100f);          cc.setPushY(100f);          continue;        }      }      UnitValue horAlign=parseAlignKeywords(part,true);      if (horAlign != null) {        cc.getHorizontal().setAlign(horAlign);        continue;      }      UnitValue verAlign=parseAlignKeywords(part,false);      if (verAlign != null) {        cc.getVertical().setAlign(verAlign);        continue;      }      throw new IllegalArgumentException("Unknown keyword.");    } catch (    Exception ex) {      throw new IllegalArgumentException("Illegal Constraint: '" + part + "'\n"+ ex.getMessage());    }  }  return cc;}  }
class C{  @Override public void removeConnection(Connection connection){  super.removeConnection(connection);  if (this.getConnections().isEmpty()) {    this.setValue(this.getSocketHint().createInitialValue().orElse(null));  }}  }
class C{  @Override protected void after(){  ActiveMQTestBase.deleteDirectory(new File(folderName));}  }
class C{  private int runClientSide(String args[],String serviceUrlStr) throws Exception {  List<String> opts=buildCommandLine(args);  opts.add("-serviceUrl");  opts.add(serviceUrlStr);  int exitCode=0;  String[] optsArray=opts.toArray(new String[0]);  ProcessBuilder pb=new ProcessBuilder(optsArray);  Process p=ProcessTools.startProcess("AuthorizationTest$ClientSide",pb);  try {    exitCode=p.waitFor();    if (exitCode != 0) {      System.out.println("Subprocess unexpected exit value of [" + exitCode + "]. Expected 0.\n");    }  } catch (  InterruptedException e) {    System.out.println("Parent process interrupted with exception : \n " + e + " :");    p.destroyForcibly();    throw new RuntimeException("Parent process interrupted with exception : \n " + e + " :");  } finally {    if (p.isAlive()) {      p.destroyForcibly();    }    return exitCode;  }}  }
class C{  public static boolean pickDirectory(Activity activity,File startPath,int requestCode){  PackageManager packageMgr=activity.getPackageManager();  for (  String[] intent : PICK_DIRECTORY_INTENTS) {    String intentAction=intent[0];    String uriPrefix=intent[1];    Intent startIntent=new Intent(intentAction).putExtra("org.openintents.extra.TITLE",activity.getString(R.string.save_as)).setData(Uri.parse(uriPrefix + startPath.getPath()));    try {      if (startIntent.resolveActivity(packageMgr) != null) {        activity.startActivityForResult(startIntent,requestCode);        return true;      }    } catch (    ActivityNotFoundException e) {      showNoFilePickerError(activity,e);    }  }  return false;}  }
class C{  public Object opt(String key){  return key == null ? null : this.map.get(key);}  }
class C{  public void close(){}  }
class C{  protected SVGOMFlowRegionExcludeElement(){}  }
class C{  public String query(SolrQueryRequest req) throws Exception {  return query(req.getParams().get(CommonParams.QT),req);}  }
class C{  public MethodCallExpr addArgument(Expression arg){  getArgs().add(arg);  arg.setParentNode(this);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:42.369 -0500",hash_original_method="67C1C5FB3D4E718484F296CD0580B923",hash_generated_method="E4FB769FEDC02FEA8A2364FC8AD6FAE5") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("MinExpiresParser.parse");  MinExpires minExpires=new MinExpires();  try {    headerName(TokenTypes.MIN_EXPIRES);    minExpires.setHeaderName(SIPHeaderNames.MIN_EXPIRES);    String number=this.lexer.number();    try {      minExpires.setExpires(Integer.parseInt(number));    } catch (    InvalidArgumentException ex) {      throw createParseException(ex.getMessage());    }    this.lexer.SPorHT();    this.lexer.match('\n');    return minExpires;  }  finally {    if (debug)     dbg_leave("MinExpiresParser.parse");  }}  }
class C{  public boolean isOrthogonalTo(IntVector v){  return dotProduct(v) == 0;}  }
class C{  public static char toCharacter(final String value){  return value.charAt(0);}  }
class C{  final boolean acquireQueued(final Node node,long arg){  boolean failed=true;  try {    boolean interrupted=false;    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return interrupted;      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       interrupted=true;    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public Rule(String suffix,int min,String replacement){  this.suffix=suffix.toCharArray();  this.replacement=replacement.toCharArray();  this.min=min;}  }
class C{  private void validateCoreDataFile(ArchiveFile coreFile,boolean archiveHasExtensions) throws GeneratorException, InterruptedException, IOException {  addMessage(Level.INFO,"Validating the core file: " + coreFile.getTitle() + ". Depending on the number of records, this can take a while.");  Term id=TERM_FACTORY.findTerm(AppConfig.coreIdTerm(resource.getCoreRowType()));  Term basisOfRecord=TERM_FACTORY.findTerm(Constants.DWC_BASIS_OF_RECORD);  int basisOfRecordIndex=-1;  if (isOccurrenceFile(coreFile)) {    if (!coreFile.hasTerm(basisOfRecord)) {      addMessage(Level.ERROR,"Archive validation failed, because required term basisOfRecord was not mapped in the occurrence core");      throw new GeneratorException("Can't validate DwC-A for resource " + resource.getShortname() + ". Required term basisOfRecord was not mapped in the occurrence core");    }    addMessage(Level.INFO,"? Validating the core basisOfRecord is always present is always present and its " + "value matches the Darwin Core Type Vocabulary.");    basisOfRecordIndex=coreFile.getField(basisOfRecord).getIndex();  }  if (coreFile.hasTerm(id) || archiveHasExtensions) {    String msg="? Validating the core ID field " + id.simpleName() + " is always present and unique.";    if (archiveHasExtensions) {      msg=msg + " Note: the core ID field is required to link core records and extension records together. ";    }    addMessage(Level.INFO,msg);  }  File sortedCore=sortCoreDataFile(coreFile,ID_COLUMN_INDEX);  CSVReader reader=CSVReaderFactory.build(sortedCore,CHARACTER_ENCODING,coreFile.getFieldsTerminatedBy(),coreFile.getFieldsEnclosedBy(),coreFile.getIgnoreHeaderLines());  AtomicInteger recordsWithNoId=new AtomicInteger(0);  AtomicInteger recordsWithDuplicateId=new AtomicInteger(0);  AtomicInteger recordsWithNoBasisOfRecord=new AtomicInteger(0);  AtomicInteger recordsWithNonMatchingBasisOfRecord=new AtomicInteger(0);  AtomicInteger recordsWithAmbiguousBasisOfRecord=new AtomicInteger(0);  ClosableReportingIterator<String[]> iter=null;  int line=0;  String lastId=null;  try {    iter=reader.iterator();    while (iter.hasNext()) {      line++;      if (line % 1000 == 0) {        checkForInterruption(line);        reportIfNeeded();      }      String[] record=iter.next();      if (record == null || record.length == 0) {        continue;      }      if (iter.hasRowError() && iter.getException() != null) {        throw new GeneratorException("A fatal error was encountered while trying to validate sorted core data file: " + iter.getErrorMessage(),iter.getException());      } else {        if (coreFile.hasTerm(id) || archiveHasExtensions) {          lastId=validateIdentifier(record[ID_COLUMN_INDEX],lastId,recordsWithNoId,recordsWithDuplicateId);        }        if (isOccurrenceFile(coreFile)) {          validateBasisOfRecord(record[basisOfRecordIndex],line,recordsWithNoBasisOfRecord,recordsWithNonMatchingBasisOfRecord,recordsWithAmbiguousBasisOfRecord);        }      }    }  } catch (  InterruptedException e) {    setState(e);    throw e;  }catch (  Exception e) {    log.error("Exception caught while validating archive",e);    setState(e);    throw new GeneratorException("Error while validating archive occurred on line " + line,e);  } finally {    if (iter != null) {      if (!iter.hasRowError() && iter.getErrorMessage() != null) {        writePublicationLogMessage("Error reading data: " + iter.getErrorMessage());      }      iter.close();    }    FileUtils.deleteQuietly(sortedCore);  }  if (coreFile.hasTerm(id) || archiveHasExtensions) {    summarizeIdentifierValidation(recordsWithNoId,recordsWithDuplicateId,id.simpleName());  }  if (isOccurrenceFile(coreFile)) {    summarizeBasisOfRecordValidation(recordsWithNoBasisOfRecord,recordsWithNonMatchingBasisOfRecord,recordsWithAmbiguousBasisOfRecord);  }}  }
class C{  private void population(){  Network activityLinkNetwork=NetworkTools.filterNetworkByLinkMode(network,Collections.singleton("car"));  new NetworkCleaner().run(activityLinkNetwork);  log.info("adapting plans...");  Counter personCounter=new Counter(" person # ");  for (  Person person : population.getPersons().values()) {    personCounter.incCounter();    List<? extends Plan> plans=person.getPlans();    for (    Plan plan : plans) {      List<PlanElement> elements=plan.getPlanElements();      for (      PlanElement e : elements) {        if (e instanceof Activity) {          Activity activity=(Activity)e;switch (activity.getType()) {case "home":            break;case "work":          break;default :        activity.setType(OTHER);    }    activity.setFacilityId(null);    activity.setLinkId(NetworkTools.getNearestLink(activityLinkNetwork,activity.getCoord()).getId());  }}}}}  }
class C{  public boolean visit(MultiTextEdit edit){  return visitNode(edit);}  }
class C{  public Iterator<IRemoteTxState0> listTx(){  final ConnectOptions opts=new ConnectOptions(mgr.getBaseServiceURL() + "/tx");  opts.method="GET";  JettyResponseListener response=null;  try {    RemoteRepository.checkResponseCode(response=mgr.doConnect(opts));    return multiTxResponse(response).iterator();  } catch (  Exception e) {    throw new RuntimeException(e);  } finally {    if (response != null)     response.abort();  }}  }
class C{  public Builder nodeSettings(StaticNodeSettings staticNodeSettings){  this.staticNodeSettings=staticNodeSettings;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:03.289 -0500",hash_original_method="41E781585F5EF3A93F8FE051E438DFA6",hash_generated_method="71A4764486C7D6EA74D91BA9F31D39F0") public static void refresh(){  if (needRefresh) {    refreshNumber++;    updateServiceInfo();  }}  }
class C{  private void revertFieldsJavaNames(Collection<PojoField> selFields){  for (  PojoField field : selFields)   field.resetJavaName();}  }
class C{  public CompactConcurrentHashSet2(){}  }
class C{  public boolean checkType(JCTree declaringElement,Name declaringElementName,JCExpression typeExpression){  if (!JSweetConfig.isJDKReplacementMode()) {    if (typeExpression instanceof JCArrayTypeTree) {      return checkType(declaringElement,declaringElementName,((JCArrayTypeTree)typeExpression).elemtype);    }    String type=typeExpression.type.tsym.toString();    if (!translator.getContext().options.isJDKAllowed() && !translator.getContext().strictMode && type.startsWith("java.")) {      if (!(AUTHORIZED_DECLARED_TYPES.contains(type) || NUMBER_TYPES.contains(type) || type.startsWith("java.util.function"))) {        translator.report(declaringElement,declaringElementName,JSweetProblem.JDK_TYPE,type);        return false;      }    }  }  return true;}  }
class C{  @Override protected SpringApplicationBuilder configure(SpringApplicationBuilder application){  return application.sources(Application.class);}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  private void showOptions(){  if (client.getGame().getPhase() == IGame.Phase.PHASE_LOUNGE) {    getGameOptionsDialog().setEditable(true);  } else {    getGameOptionsDialog().setEditable(false);  }  getGameOptionsDialog().update(client.getGame().getOptions());  getGameOptionsDialog().setVisible(true);}  }
class C{  public static void checkAndAppendIntegerlement(AVList params,String paramKey,Element context,String path){  if (params == null) {    String message=Logging.getMessage("nullValue.ParametersIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramKey == null) {    String message=Logging.getMessage("nullValue.ParameterKeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (context == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Integer i=AVListImpl.getIntegerValue(params,paramKey);  if (i != null) {    appendInteger(context,path,i);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.342 -0400",hash_original_method="610F60ED6DB50185F33A85945665EF11",hash_generated_method="57A04B03533AEBB95DA85C73B06358AD") @Override public String toString(){  return charSequence.toString();}  }
class C{  @Override public long position(java.sql.Clob searchstr,long start) throws SQLException {  return position(searchstr.getSubString(0,(int)searchstr.length()),(int)start);}  }
class C{  protected void checkCapacity(){  if (size >= threshold) {    final int newCapacity=data.length * 2;    if (newCapacity <= MAXIMUM_CAPACITY) {      ensureCapacity(newCapacity);    }  }}  }
class C{  public JBBPOut Bits(final JBBPBitNumber numberOfBits,final int value) throws IOException {  assertNotEnded();  JBBPUtils.assertNotNull(numberOfBits,"Number of bits must not be null");  if (this.processCommands) {    _writeBits(numberOfBits,value);  }  return this;}  }
class C{  public void testCacheImpacts() throws Exception {  assertU(adoc("id","9","str","c","float","-3.2","int","42"));  assertU(adoc("id","7","str","c","float","-3.2","int","-1976"));  assertU(adoc("id","2","str","c","float","-3.2","int","666"));  assertU(adoc("id","0","str","b","float","64.5","int","-42"));  assertU(adoc("id","5","str","b","float","64.5","int","2001"));  assertU(adoc("id","8","str","b","float","64.5","int","4055"));  assertU(adoc("id","6","str","a","float","64.5","int","7"));  assertU(adoc("id","1","str","a","float","64.5","int","7"));  assertU(adoc("id","4","str","a","float","11.1","int","6"));  assertU(adoc("id","3","str","a","float","11.1","int","3"));  assertU(commit());  final Collection<String> allFieldNames=getAllSortFieldNames();  final SolrInfoMBean filterCacheStats=h.getCore().getInfoRegistry().get("filterCache");  assertNotNull(filterCacheStats);  final SolrInfoMBean queryCacheStats=h.getCore().getInfoRegistry().get("queryResultCache");  assertNotNull(queryCacheStats);  final long preQcIn=(Long)queryCacheStats.getStatistics().get("inserts");  final long preFcIn=(Long)filterCacheStats.getStatistics().get("inserts");  final long preFcHits=(Long)filterCacheStats.getStatistics().get("hits");  SentinelIntSet ids=assertFullWalkNoDups(10,params("q","*:*","rows","" + TestUtil.nextInt(random(),1,11),"fq","-id:[1 TO 2]","fq","-id:[6 TO 7]","fl","id","sort",buildRandomSort(allFieldNames)));  assertEquals(6,ids.size());  final long postQcIn=(Long)queryCacheStats.getStatistics().get("inserts");  final long postFcIn=(Long)filterCacheStats.getStatistics().get("inserts");  final long postFcHits=(Long)filterCacheStats.getStatistics().get("hits");  assertEquals("query cache inserts changed",preQcIn,postQcIn);  assertEquals("filter cache did not grow correctly",3,postFcIn - preFcIn);  assertTrue("filter cache did not have any new cache hits",0 < postFcHits - preFcHits);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SMULW");  translateAll(environment,instruction,"SMULW",instructions);}  }
class C{  public int jumpToIndex(FormIndex index){  return mFormEntryController.jumpToIndex(index);}  }
class C{  public static boolean startsWith(String s,String start){  return s == null || start == null ? false : s.startsWith(start);}  }
class C{  protected void sequence_ThisTypeRefNominal_TypeRefWithoutModifiers(ISerializationContext context,ThisTypeRefNominal semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static String numberToString(Number number) throws JSONException {  if (number == null) {    throw new JSONException("Null pointer");  }  testValidity(number);  String string=number.toString();  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  private void refreshLiveNodes(Watcher watcher) throws KeeperException, InterruptedException {synchronized (refreshLiveNodesLock) {    Set<String> newLiveNodes;    try {      List<String> nodeList=zkClient.getChildren(LIVE_NODES_ZKNODE,watcher,true);      newLiveNodes=new HashSet<>(nodeList);    } catch (    KeeperException.NoNodeException e) {      newLiveNodes=emptySet();    }    lastFetchedLiveNodes.set(newLiveNodes);  }  Set<String> oldLiveNodes, newLiveNodes;synchronized (getUpdateLock()) {    newLiveNodes=lastFetchedLiveNodes.getAndSet(null);    if (newLiveNodes == null) {      return;    }    oldLiveNodes=this.liveNodes;    this.liveNodes=newLiveNodes;    if (clusterState != null) {      clusterState.setLiveNodes(newLiveNodes);    }  }  if (oldLiveNodes.size() != newLiveNodes.size()) {    LOG.info("Updated live nodes from ZooKeeper... ({}) -> ({})",oldLiveNodes.size(),newLiveNodes.size());  }  if (LOG.isDebugEnabled()) {    LOG.debug("Updated live nodes from ZooKeeper... {} -> {}",new TreeSet<>(oldLiveNodes),new TreeSet<>(newLiveNodes));  }}  }
class C{  private void refreshView(){  if (!wasInvalidatedBefore) {    wasInvalidatedBefore=true;    invalidate();  }}  }
class C{  private void applyKitKatTranslucency(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    int topPadding=Common.getStatusBarHeight(mContext);    if (mDrawerParentLayout != null) {      mDrawerParentLayout.setPadding(0,(0 - topPadding),0,0);      mDrawerParentLayout.setClipToPadding(false);      int navigationBarHeight=Common.getNavigationBarHeight(mContext);      mListView.setClipToPadding(false);      mListView.setPadding(mListView.getPaddingLeft(),mListView.getPaddingTop(),mListView.getPaddingRight(),mListView.getPaddingBottom() + navigationBarHeight);    }  }}  }
class C{  public PubsubFuture<Void> modifyAckDeadline(final String canonicalSubscriptionName,final int ackDeadlineSeconds,final List<String> ackIds){  final String path=canonicalSubscriptionName + ":modifyAckDeadline";  final ModifyAckDeadlineRequest req=ModifyAckDeadlineRequest.builder().ackDeadlineSeconds(ackDeadlineSeconds).ackIds(ackIds).build();  return post("modify ack deadline",path,req,Void.class);}  }
class C{  public void testGetPrototype() throws Exception {  TestService mockService=control.createMock(TestService.class);  assertSame(mockService.getRequestPrototype(fooDescriptor),FooRequest.getDefaultInstance());  assertSame(mockService.getResponsePrototype(fooDescriptor),FooResponse.getDefaultInstance());  assertSame(mockService.getRequestPrototype(barDescriptor),BarRequest.getDefaultInstance());  assertSame(mockService.getResponsePrototype(barDescriptor),BarResponse.getDefaultInstance());}  }
class C{  @Override public boolean isSingleton(){  return true;}  }
class C{  public static boolean isPrimitiveWrapper(Class<?> clazz){  Assert.notNull(clazz,"Class must not be null");  return primitiveWrapperTypeMap.containsKey(clazz);}  }
class C{  public int size(){  return this.parts.size();}  }
class C{  public static int octant(Coordinate p0,Coordinate p1){  double dx=p1.x - p0.x;  double dy=p1.y - p0.y;  if (dx == 0.0 && dy == 0.0)   throw new IllegalArgumentException("Cannot compute the octant for two identical points " + p0);  return octant(dx,dy);}  }
class C{  @Override public Integer put(Long key,Integer value){  return wrapValue(_map.put(unwrapKey(key),unwrapValue(value)));}  }
class C{  @Override public void updateTextCycle(Cycle cycle){  textCycle=cycle;  textCycleStream.onNext(textCycle);}  }
class C{  public static String decodeJavaMIMEType(String nat){  return (isJavaMIMEType(nat)) ? nat.substring(JavaMIME.length(),nat.length()).trim() : null;}  }
class C{  @Override protected void onAttach(){  super.onAttach();  setInteractivity(false);  mPulseAnimation=AnimationUtils.loadAnimation(SampleKeyguardProviderService.this,R.anim.pulsing_anim);  mImageView.startAnimation(mPulseAnimation);}  }
class C{  public AttributesDescriptor(String displayName,TextAttributesKey key){  myKey=key;  myDisplayName=displayName;}  }
class C{  public byte[] encrypt(String clearString) throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException, InvalidKeyException, InvalidKeySpecException, BadPaddingException, IllegalBlockSizeException {  if ((clearString == null) || (clearString.isEmpty())) {    return null;  }  Cipher cipher=getCipher(Cipher.ENCRYPT_MODE);  return cipher.doFinal(clearString.getBytes("UTF8"));}  }
class C{  protected void prepare(){  p_Record_ID=getRecord_ID();  if (p_AD_Client_ID == 0)   p_AD_Client_ID=Env.getAD_Client_ID(getCtx());  AD_Table_ID=getTable_ID();  StringBuffer sb=new StringBuffer("AD_Table_ID=").append(AD_Table_ID);  sb.append("; Record_ID=").append(getRecord_ID());  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("AD_Table_ID"))     p_AD_Table_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  log.info(sb.toString());}  }
class C{  private StringBuilder removeHiddenMarkers(final int c){  if (content[c].indexOf(MARKER) == -1) {    return content[c];  }  final StringTokenizer tokens=new StringTokenizer(content[c].toString(),MARKER,true);  String temp;  StringBuilder processedData=new StringBuilder();  while (tokens.hasMoreTokens()) {    temp=tokens.nextToken();    if (temp.equals(MARKER)) {      tokens.nextToken();      tokens.nextToken();      tokens.nextToken();      tokens.nextToken();      processedData=processedData.append(tokens.nextToken());    } else {      processedData=processedData.append(temp);    }  }  return processedData;}  }
class C{  public static CoffeeEntry createIcedCoffeeEntry(SkuDetails icedCoffeeDetails){  return new CoffeeEntry(icedCoffeeDetails,ICED_COFFEE_CAFFEINE_RATE,ICED_COFFEE_ENERGY_RATE,ICED_COFFEE_CANDYNESS_RATE);}  }
class C{  public static void main(String[] argv) throws IOException {  if (argv.length == 1) {    OperatorDocGenerator opDocGen=null;    if (argv[0].equals("LATEX"))     opDocGen=new LatexOperatorDocGenerator(); else     opDocGen=new ProgramHTMLOperatorDocGenerator();    ParameterService.init();    File file=new File(ParameterService.getRapidMinerHome(),"tutorial" + File.separator + "OperatorsGenerated.tex");    LogService.getGlobal().log("Generating class documentation to '" + file + "'.",LogService.STATUS);    DocumentationGenerator docGen=new DocumentationGenerator(opDocGen);    docGen.getRootDoc();    docGen.generateAll(new PrintWriter(new FileWriter(file)));  } else   if (argv.length == 2) {    OperatorDocGenerator opDocGen=null;    if (argv[0].equals("LATEX"))     opDocGen=new LatexOperatorDocGenerator(); else     opDocGen=new ProgramHTMLOperatorDocGenerator();    ParameterService.init();    File file=new File(argv[1]);    LogService.getGlobal().log("Generating class documentation to '" + file + "'.",LogService.STATUS);    DocumentationGenerator docGen=new DocumentationGenerator(opDocGen);    docGen.getRootDoc();    docGen.generateAll(new PrintWriter(new FileWriter(file)));  } else   if (argv.length >= 5) {    OperatorDocGenerator opDocGen=null;    if (argv[0].equals("LATEX"))     opDocGen=new LatexOperatorDocGenerator(); else     opDocGen=new ProgramHTMLOperatorDocGenerator();    try {      OperatorService.registerOperators(argv[1],new FileInputStream(argv[1]),null);    } catch (    IOException e) {      LogService.getGlobal().log("Cannot read 'operators.xml'.",LogService.ERROR);    }    File file=new File(argv[4]);    LogService.getGlobal().log("Generating class documentation to '" + file + "'.",LogService.STATUS);    PrintWriter out=new PrintWriter(new FileWriter(file));    DocumentationGenerator docGen=new DocumentationGenerator(opDocGen);    boolean generateSubgroups=false;    if (argv.length == 6) {      if (argv[5].equals("true"))       generateSubgroups=true;    }    docGen.getRootDoc(new File(argv[2]),argv[3]);    docGen.generateAll(new PrintWriter(new FileWriter(file)),generateSubgroups);    out.close();  } else {    LogService.getGlobal().log("usage: java com.rapidminer.doc.DocumentationGenerator or" + Tools.getLineSeparator() + "       java com.rapidminer.doc.DocumentationGenerator operatordesc srcdir subpackages outputfile [generate subgroups (true/false)]",LogService.WARNING);  }}  }
class C{  public NotificationChain basicSetDeclaredTypeRef(TypeRef newDeclaredTypeRef,NotificationChain msgs){  TypeRef oldDeclaredTypeRef=declaredTypeRef;  declaredTypeRef=newDeclaredTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.PROPERTY_NAME_VALUE_PAIR__DECLARED_TYPE_REF,oldDeclaredTypeRef,newDeclaredTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public DailyTimeIntervalTriggerImpl(String name,Date startTime,Date endTime,TimeOfDay startTimeOfDay,TimeOfDay endTimeOfDay,IntervalUnit intervalUnit,int repeatInterval){  this(name,null,startTime,endTime,startTimeOfDay,endTimeOfDay,intervalUnit,repeatInterval);}  }
class C{  public Vector3f reflect(Vector3fc normal){  float dot=this.dot(normal);  x=x - (dot + dot) * normal.x();  y=y - (dot + dot) * normal.y();  z=z - (dot + dot) * normal.z();  return this;}  }
class C{  public Name(String name) throws IOException {  rdn=new DNParser(name).parse();}  }
class C{  @Override public boolean request(int interruptNumber){  int imcSection=getRequestImcSection(interruptNumber);  int il=getRequestLevel(interruptNumber);  if (isImcDmSet(imcSection)) {    dreqflg=Format.clearBit(dreqflg,il);    ((TxDmaController)platform.getDmaController()).getChannel(il).startTransferIfConditionsOk();    return true;  } else {    if (il > 0) {      return request(new TxInterruptRequest(Type.HARDWARE_INTERRUPT,interruptNumber,il));    } else {      return false;    }  }}  }
class C{  private int match(final int[] list,final int value){  for (int i=0; i < list.length; i++) {    if (value == list[i])     return i;  }  return -1;}  }
class C{  private List<ItemDTO> mockBaseItemWith2Key1Comment1Blank(){  ItemDTO i1=new ItemDTO("","","#qqqq",1);  ItemDTO i2=new ItemDTO("a","b","",2);  ItemDTO i3=new ItemDTO("","","",3);  ItemDTO i4=new ItemDTO("b","c","",4);  i4.setLineNum(4);  return Arrays.asList(i1,i2,i3,i4);}  }
class C{  public String checkAcceptanceChangeable(final DigestURL url,final CrawlProfile profile,final int depth){  final String urlProtocol=url.getProtocol();  final String urlstring=url.toNormalform(true);  if (!Switchboard.getSwitchboard().loader.isSupportedProtocol(urlProtocol)) {    CrawlStacker.log.severe("Unsupported protocol in URL '" + urlstring + "'.");    return "unsupported protocol";  }  final String urlRejectReason=urlInAcceptedDomain(url);  if (urlRejectReason != null) {    if (CrawlStacker.log.isFine())     CrawlStacker.log.fine("denied_(" + urlRejectReason + ")");    return "denied_(" + urlRejectReason + ")";  }  if (Switchboard.urlBlacklist.isListed(BlacklistType.CRAWLER,url)) {    CrawlStacker.log.fine("URL '" + urlstring + "' is in blacklist.");    return "url in blacklist";  }  if ((depth > 0) && !profile.urlMustMatchPattern().matcher(urlstring).matches()) {    if (CrawlStacker.log.isFine())     CrawlStacker.log.fine("URL '" + urlstring + "' does not match must-match crawling filter '"+ profile.urlMustMatchPattern().toString()+ "'.");    return ERROR_NO_MATCH_MUST_MATCH_FILTER + profile.urlMustMatchPattern().toString();  }  if ((depth > 0) && profile.urlMustNotMatchPattern().matcher(urlstring).matches()) {    if (CrawlStacker.log.isFine())     CrawlStacker.log.fine("URL '" + urlstring + "' matches must-not-match crawling filter '"+ profile.urlMustNotMatchPattern().toString()+ "'.");    return ERROR_MATCH_WITH_MUST_NOT_MATCH_FILTER + profile.urlMustNotMatchPattern().toString();  }  if (url.isIndividual() && !profile.crawlingQ()) {    if (CrawlStacker.log.isFine())     CrawlStacker.log.fine("URL '" + urlstring + "' is CGI URL.");    return "individual url (sessionid etc) not wanted";  }  if (url.isPOST() && !profile.crawlingQ()) {    if (CrawlStacker.log.isFine())     CrawlStacker.log.fine("URL '" + urlstring + "' is post URL.");    return "post url not allowed";  }  if ((depth > 0) && profile.ipMustMatchPattern() != CrawlProfile.MATCH_ALL_PATTERN && url.getHost() != null && !profile.ipMustMatchPattern().matcher(url.getInetAddress().getHostAddress()).matches()) {    if (CrawlStacker.log.isFine())     CrawlStacker.log.fine("IP " + url.getInetAddress().getHostAddress() + " of URL '"+ urlstring+ "' does not match must-match crawling filter '"+ profile.ipMustMatchPattern().toString()+ "'.");    return "ip " + url.getInetAddress().getHostAddress() + " of url does not match must-match filter";  }  if ((depth > 0) && profile.ipMustNotMatchPattern() != CrawlProfile.MATCH_NEVER_PATTERN && url.getHost() != null && profile.ipMustNotMatchPattern().matcher(url.getInetAddress().getHostAddress()).matches()) {    if (CrawlStacker.log.isFine())     CrawlStacker.log.fine("IP " + url.getInetAddress().getHostAddress() + " of URL '"+ urlstring+ "' matches must-not-match crawling filter '"+ profile.ipMustNotMatchPattern().toString()+ "'.");    return "ip " + url.getInetAddress().getHostAddress() + " of url matches must-not-match filter";  }  final String[] countryMatchList=profile.countryMustMatchList();  if (depth > 0 && countryMatchList != null && countryMatchList.length > 0) {    final Locale locale=url.getLocale();    if (locale != null) {      final String c0=locale.getCountry();      boolean granted=false;      matchloop:       for (      final String c : countryMatchList) {        if (c0.equals(c)) {          granted=true;          break matchloop;        }      }      if (!granted) {        if (CrawlStacker.log.isFine())         CrawlStacker.log.fine("IP " + url.getInetAddress().getHostAddress() + " of URL '"+ urlstring+ "' does not match must-match crawling filter '"+ profile.ipMustMatchPattern().toString()+ "'.");        return "country " + c0 + " of url does not match must-match filter for countries";      }    }  }  return null;}  }
class C{  public WriterToUTF8Buffered(OutputStream out){  m_os=out;  m_outputBytes=new byte[BYTES_MAX + 3];  m_inputChars=new char[CHARS_MAX + 2];  count=0;}  }
class C{  protected boolean matches(JavaModelStatus status,int mask){  int severityMask=mask & 0x7;  int categoryMask=mask & ~0x7;  int bits=status.getBits();  return ((severityMask == 0) || (bits & severityMask) != 0) && ((categoryMask == 0) || (bits & categoryMask) != 0);}  }
class C{  public IndexMap(Map<Integer,E> map){  this.array=new Object[map.size()];  putAll(map);}  }
class C{  public void remove(Track track){  if (_tracks.contains(track)) {    int oldSize=_tracks.size();    _tracks.remove(track);    this.propertyChangeSupport.firePropertyChange(LISTCHANGE_CHANGED_PROPERTY,Integer.valueOf(oldSize),Integer.valueOf(_tracks.size()));  }}  }
class C{  public static void main(String[] args) throws Exception {  try {    int exitCode=ToolRunner.run(new RedisExportJob(),args);    System.exit(exitCode);  } catch (  Exception e) {    System.err.println(e.getMessage());  }}  }
class C{  public static void showAlert(Context context,CharSequence title,CharSequence msg,CharSequence ok,DialogInterface.OnClickListener lOk){  AlertDialog dialog=buildAlert(context,title,msg,ok,null,lOk,null);  if (dialog != null) {    dialog.show();  }}  }
class C{  public void close(){  if (mBluetoothGatt == null) {    return;  }  mBluetoothGatt.close();  mBluetoothGatt=null;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:59.514 -0500",hash_original_method="DBB4EF5840B4656B4D7CD7498EF1A157",hash_generated_method="B5D6BEEE5C50711516C06A63C9884CAB") private static boolean matchIpAddress(X509Certificate certificate,String thisDomain){  if (LOG_ENABLED) {    Log.v(TAG,"DomainNameValidator.matchIpAddress(): this domain: " + thisDomain);  }  try {    Collection subjectAltNames=certificate.getSubjectAlternativeNames();    if (subjectAltNames != null) {      Iterator i=subjectAltNames.iterator();      while (i.hasNext()) {        List altNameEntry=(List)(i.next());        if (altNameEntry != null && 2 <= altNameEntry.size()) {          Integer altNameType=(Integer)(altNameEntry.get(0));          if (altNameType != null) {            if (altNameType.intValue() == ALT_IPA_NAME) {              String altName=(String)(altNameEntry.get(1));              if (altName != null) {                if (LOG_ENABLED) {                  Log.v(TAG,"alternative IP: " + altName);                }                if (thisDomain.equalsIgnoreCase(altName)) {                  return true;                }              }            }          }        }      }    }  } catch (  CertificateParsingException e) {  }  return false;}  }
class C{  public static void main(String[] args){  LeadingSpaces tester=new LeadingSpaces();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  protected DMLYarnClient(String dmlScriptStr,DMLConfig conf,String[] args){  _dmlScript=dmlScriptStr;  _dmlConfig=conf;  _args=args;}  }
class C{  public boolean isIndependent(Node xVar,Node yVar,List<Node> zList){  if (zList == null) {    throw new NullPointerException();  }  for (  Node node : zList) {    if (node == null) {      throw new NullPointerException();    }  }  List<Node> regressors=new ArrayList<>();  regressors.add(dataSet.getVariable(yVar.getName()));  for (  Node zVar : zList) {    regressors.add(dataSet.getVariable(zVar.getName()));  }  Regression regression=new RegressionDataset(dataSet);  RegressionResult result=null;  try {    result=regression.regress(xVar,regressors);  } catch (  Exception e) {    return false;  }  double p=result.getP()[1];  boolean independent=p > alpha;  if (verbose) {    if (independent) {      TetradLogger.getInstance().log("independencies",SearchLogUtils.independenceFactMsg(xVar,yVar,zList,p));    } else {      TetradLogger.getInstance().log("dependencies",SearchLogUtils.dependenceFactMsg(xVar,yVar,zList,p));    }  }  return independent;}  }
class C{  @Override public String addStepsVcenterClusterCleanup(Workflow workflow,String waitFor,URI clusterId) throws InternalException {  Cluster cluster=_dbClient.queryObject(Cluster.class,clusterId);  if (NullColumnValueGetter.isNullURI(cluster.getVcenterDataCenter())) {    log.info("cluster is not synced to vcenter");    return waitFor;  }  boolean hasDiscoveredHosts=false;  boolean hasProvisionedHosts=false;  List<URI> clusterHosts=ComputeSystemHelper.getChildrenUris(_dbClient,clusterId,Host.class,"cluster");  List<Host> hosts=_dbClient.queryObject(Host.class,clusterHosts);  for (  Host host : hosts) {    if (NullColumnValueGetter.isNullURI(host.getComputeElement())) {      hasDiscoveredHosts=true;    } else {      hasProvisionedHosts=true;    }  }  log.info("cluster has provisioned hosts: {}, and discovered hosts: {}",hasProvisionedHosts,hasDiscoveredHosts);  if (hasProvisionedHosts) {    waitFor=workflow.createStep(CHECK_CLUSTER_VMS,"If synced with vCenter, check if there are VMs in the cluster",waitFor,clusterId,clusterId.toString(),this.getClass(),new Workflow.Method("checkClusterVms",cluster.getId(),cluster.getVcenterDataCenter()),null,null);  }  if (hasProvisionedHosts && !hasDiscoveredHosts) {    waitFor=workflow.createStep(REMOVE_VCENTER_CLUSTER,"If synced with vCenter, remove the cluster",waitFor,clusterId,clusterId.toString(),this.getClass(),new Workflow.Method("removeVcenterCluster",cluster.getId(),cluster.getVcenterDataCenter()),null,null);  }  return waitFor;}  }
class C{  private static int subAndCheck(final int x,final int y){  final long s=(long)x - (long)y;  if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {    throw new ArithmeticException("overflow: add");  }  return (int)s;}  }
class C{  public boolean isRangeZeroBaselineVisible(){  return this.rangeZeroBaselineVisible;}  }
class C{  @Override public boolean shouldDelayChildPressedState(){  return false;}  }
class C{  private void dialogChanged(){  errorMsg=validateInputs();  updateStatus(errorMsg);}  }
class C{  public static void main(String[] argv){  try {    Evaluation.runExperiment((MultiLabelClassifier)new WvARAM(),argv);  } catch (  Exception e) {    e.printStackTrace();    System.err.println(e.getMessage());  }}  }
class C{  public void seekN(int n){  pos+=n;}  }
class C{  @Override public void updateBlob(String columnLabel,InputStream x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBlob(" + quote(columnLabel) + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createBlob(x,-1);    update(columnLabel,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static void previous(final IdocApplet ui){  FileVO ele=(FileVO)ui.getFileVO();  if (ele.getImageSelectIndex() - 1 < 0) {    ele.setImageSelectIndex(ele.getListImage().size() - 1);  } else {    ele.setImageSelectIndex(ele.getImageSelectIndex() - 1);  }}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(NAME).setRequired(true);  builder.addAttribute(TYPE);  builder.addAttribute(UNIT);}  }
class C{  private static int testSwitchingTwoWays(){  int failures=0;  for (  MetaSynVar msv : MetaSynVar.values()) {    int enumResult=enumSwitch(msv);    int stringResult=stringSwitch(msv.name());    if (enumResult != stringResult) {      failures++;      System.err.printf("One value %s, computed 0x%x with the enum switch " + "and 0x%x with the string one.%n",msv,enumResult,stringResult);    }  }  return failures;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.993 -0500",hash_original_method="D1AF4635F236F26EDAA4AC997AD8C09A",hash_generated_method="2288A665FEBE4EF35DE6B0C0BF9BCD7C") public static String valueOf(long value){  String str=new String();  str.addTaint(value);  return str;}  }
class C{  private ExternalSaslClient(String authorizationId,String protocol,String serverName,Map props,CallbackHandler cbh){  m_authorizationId=authorizationId;  m_protocol=protocol;  m_serverName=serverName;  m_props=props;  m_cbh=cbh;  m_state=STATE_INITIAL;}  }
class C{  public double scaleValue(double value){  if (logarithm) {    value=Math.log(value);  }  double min=getMinValue();  double max=getMaxValue();  return ((value - min) / (max - min));}  }
class C{  public static double product(int size,double sumOfLogarithms){  return Math.pow(Math.exp(sumOfLogarithms / size),size);}  }
class C{  public void enableRotation(final boolean enable){  mRotationEnabled=enable;  if (!mRotationEnabled) {    mListRotation=0;  }  invalidate();}  }
class C{  public void start(){  if (sLogger.isActivated()) {    sLogger.info("Start the IMS module");  }  mCnxManager.start();  mExtensionManager.start();  mServiceDispatcher.start();  mCallManager.start();  if (sLogger.isActivated()) {    sLogger.info("IMS module is started");  }}  }
class C{  public static Text valueOf(char c,int length){  if (length < 0)   throw new IndexOutOfBoundsException();  if (length <= BLOCK_SIZE) {    Text text=Text.newPrimitive(length);    for (int i=0; i < length; ) {      text._data[i++]=c;    }    return text;  } else {    final int middle=(length >> 1);    return Text.newComposite(Text.valueOf(c,middle),Text.valueOf(c,length - middle));  }}  }
class C{  public ByteList MethodInfo(ByteList bytes,int param_count,int return_type,IntList param_types,IntList param_values,ByteList param_kinds,IntList param_names,int debug_name_index,int flags,int method_info_index){  if (show_bytecode) {    defns_out.write("\n      MethodInfo ");    defns_out.write(" param_count=" + param_count);    defns_out.write(" return_type=" + return_type + " param_types={ ");    for (int i=0, size=param_types == null ? 0 : param_types.size(); i < size; i++) {      defns_out.write(param_types.get(i) + " ");    }    defns_out.write("} debug_name_index=" + debug_name_index + " needs_arguments="+ ((flags & METHOD_Arguments) != 0 ? "true" : "false")+ " need_rest="+ ((flags & METHOD_Needrest) != 0 ? "true" : "false")+ " needs_activation="+ ((flags & METHOD_Activation) != 0 ? "true" : "false")+ " has_optional="+ ((flags & METHOD_HasOptional) != 0 ? "true" : "false")+ " ignore_rest="+ ((flags & METHOD_IgnoreRest) != 0 ? "true" : "false")+ " native="+ ((flags & METHOD_Native) != 0 ? "true" : "false")+ " has_param_names ="+ ((flags & METHOD_HasParamNames) != 0 ? "true" : "false"));    if ((flags & METHOD_HasOptional) != 0) {      defns_out.write(" optional_count=" + param_values.size());      defns_out.write(" optional_indexes={ ");      for (int i=0, size=param_values == null ? 0 : param_values.size(); i < size; i++) {        defns_out.write(" " + param_values.get(i));      }      defns_out.write(" }");      defns_out.write(" optional_kinds={ ");      for (int i=0, size=param_values == null ? 0 : param_values.size(); i < size; i++) {        defns_out.write(" " + param_kinds.get(i));      }      defns_out.write(" }");    }    if ((flags & METHOD_HasParamNames) != 0) {      defns_out.write(" param_names={ ");      for (int i=0, size=param_names == null ? 0 : param_names.size(); i < size; i++) {        defns_out.write(" " + param_names.get(i));      }      defns_out.write(" }");    }    defns_out.write(" -> " + method_info_index);  }  if (debug) {    System.out.print("\n      bytes.size() = " + bytes.size());  }  Int(bytes,param_count);  Int(bytes,return_type);  for (int i=0; i < param_count; i++) {    Int(bytes,param_types.get(i));  }  Int(bytes,debug_name_index);  Byte(bytes,flags);  if ((flags & METHOD_HasOptional) != 0) {    Int(bytes,param_values.size());    for (int i=0, n=param_values.size(); i < n; i++) {      Int(bytes,param_values.get(i));      bytes.add(param_kinds.get(i));    }  }  if ((flags & METHOD_HasParamNames) != 0) {    for (int i=0; i < param_count; i++) {      Int(bytes,param_names.get(i));    }  }  return bytes;}  }
class C{  public RSAAgentConfig(RSAAMInstanceInfo instInfo){  Validate.notNull(instInfo,"RSAAMInstanceInfo");  this.get_instMap().put(instInfo.get_siteID(),instInfo);}  }
class C{  public boolean intersects(Vector3D other){  return other.getX() >= this.min.getX() && other.getX() < this.max.getX() ? (other.getY() >= this.min.getY() && other.getY() < this.max.getY() ? other.getZ() >= this.min.getZ() && other.getZ() < this.max.getZ() : false) : false;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  protected synchronized void expandBufferSizes(){  acceptLargeFragments=true;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Agent q=(Agent)stack.pop();  Agent a=(Agent)stack.pop();  if (Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr()))   Carny.getInstance().createPriority(a,q);  return null;}  }
class C{  private void close(T stream){  try {    stream.close();  } catch (  IOException e) {    logger.warn("Unable to close intercepted stream: {}",e.getMessage());    logger.debug("I/O error prevented closure of intercepted stream.",e);  }synchronized (stream) {    stream.notify();  }}  }
class C{  protected int selectOperator(){  lastUpdate++;  if ((lastUpdate >= UPDATE_WINDOW) || (probabilities == null)) {    lastUpdate=0;    probabilities=getOperatorProbabilities();  }  double rand=PRNG.nextDouble();  double sum=0.0;  for (int i=0; i < operators.size(); i++) {    sum+=probabilities[i];    if (sum > rand) {      return i;    }  }  throw new IllegalStateException();}  }
class C{  private void verifyPluginToAdd(final IPlugin<IPluginInterface> plugin){  Preconditions.checkNotNull(plugin,"IE00835: Plugin can't be null");  if ((plugin.getName() == null) || plugin.getName().equals("")) {    throw new IllegalArgumentException("IE00836: Invalid plugin name");  }  if (plugin.getGuid() == 0) {    throw new IllegalArgumentException("IE00837: Invalid plugin GUID");  }  for (  final IPlugin<IPluginInterface> oldPlugin : plugins) {    if (oldPlugin == plugin) {      throw new IllegalArgumentException("IE00838: Can not add plugin more than once");    }    if (oldPlugin.getGuid() == plugin.getGuid()) {      throw new IllegalArgumentException("IE00839: Plugin with GUID " + plugin.getGuid() + " already exists");    }  }}  }
class C{  public void shutdown() throws Exception {  (new Thread(this,"NestedActivate")).start();  if (obj != null)   obj.shutdown();}  }
class C{  @Override public ExampleSet createExampleSet(){  return createExampleSet(Collections.<Attribute,String>emptyMap());}  }
class C{  public Enumeration<AclEntry> entries(){  return acl.entries();}  }
class C{  public void fsync(Result<Boolean> result) throws IOException {  SegmentStream nodeStream=_nodeStream;  if (nodeStream != null) {    nodeStream.fsync(result);  } else {    result.ok(true);  }}  }
class C{  public static BufferedImage loadCompatibleImage(URL resource) throws IOException {  BufferedImage image=ImageIO.read(resource);  return toCompatibleImage(image);}  }
class C{  public synchronized void removeTextListener(TextListener cl){  m_textListeners.remove(cl);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static ChatMessage createChatMessage(String msgId,String apiMimeType,String content,ContactId contact,String displayName,long timestamp,long timestampSent){  if (MimeType.TEXT_MESSAGE.equals(apiMimeType)) {    return new ChatMessage(msgId,contact,content,MimeType.TEXT_MESSAGE,timestamp,timestampSent,displayName);  } else   if (MimeType.GEOLOC_MESSAGE.equals(apiMimeType)) {    return new ChatMessage(msgId,contact,content,MimeType.GEOLOC_MESSAGE,timestamp,timestampSent,displayName);  }  throw new IllegalArgumentException("Unable to create message, Invalid mimetype " + apiMimeType);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ExpressionsPackage.LOGICAL_OR_EXPRESSION__LEFT_OPERAND:    setLeftOperand((Expression)null);  return;case ExpressionsPackage.LOGICAL_OR_EXPRESSION__RIGHT_OPERAND:setRightOperand((Expression)null);return;}super.eUnset(featureID);}  }
class C{  private boolean inBounds(final int x,final int y){  return x >= 0 && x < m_bufferedImage.getWidth(null) && y >= 0 && y < m_bufferedImage.getHeight(null);}  }
class C{  private void trace(){  glUseProgram(computeProgram);  if (mouseDown) {    currRotationAboutY=rotationAboutY + (mouseX - mouseDownX) * 0.01f;  } else {    currRotationAboutY=rotationAboutY;  }  cameraPosition.set((float)sin(-currRotationAboutY) * 3.0f,2.0f,(float)cos(-currRotationAboutY) * 3.0f);  viewMatrix.setLookAt(cameraPosition,cameraLookAt,cameraUp);  if (resetFramebuffer) {    projMatrix.setPerspective((float)Math.toRadians(60.0f),(float)width / height,1f,2f);    resizeFramebufferTexture();    resetFramebuffer=false;  }  projMatrix.invertPerspectiveView(viewMatrix,invViewProjMatrix);  glBindBufferBase(GL_ATOMIC_COUNTER_BUFFER,0,atomicBuffer);  intBuffer.put(0,(int)System.nanoTime());  glBufferSubData(GL_ATOMIC_COUNTER_BUFFER,0,intBuffer);  float blendFactor=frameNumber / (frameNumber + 1.0f);  glUniform1f(blendFactorUniform,blendFactor);  glUniform1i(bounceCountUniform,bounceCount);  glUniform3f(eyeUniform,cameraPosition.x,cameraPosition.y,cameraPosition.z);  invViewProjMatrix.transformProject(tmpVector.set(-1,-1,0)).sub(cameraPosition);  glUniform3f(ray00Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  invViewProjMatrix.transformProject(tmpVector.set(-1,1,0)).sub(cameraPosition);  glUniform3f(ray01Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  invViewProjMatrix.transformProject(tmpVector.set(1,-1,0)).sub(cameraPosition);  glUniform3f(ray10Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  invViewProjMatrix.transformProject(tmpVector.set(1,1,0)).sub(cameraPosition);  glUniform3f(ray11Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  glBindImageTexture(framebufferImageBinding,tex,0,false,0,GL_READ_WRITE,GL_RGBA32F);  int worksizeX=mathRoundPoT(width);  int worksizeY=mathRoundPoT(height);  glDispatchCompute(worksizeX / workGroupSizeX,worksizeY / workGroupSizeY,1);  glMemoryBarrier(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT);  glBindImageTexture(framebufferImageBinding,0,0,false,0,GL_READ_WRITE,GL_RGBA32F);  glBindBufferBase(GL_ATOMIC_COUNTER_BUFFER,0,0);  glUseProgram(0);  frameNumber++;}  }
class C{  public DirtyFlagMap(final int initialCapacity,final float loadFactor){  map=new HashMap<K,V>(initialCapacity,loadFactor);}  }
class C{  LWComponentPeer<?,?> findPeerAt(final int x,final int y){  final Rectangle r=getBounds();  final Region sh=getRegion();  final boolean found=isVisible() && sh.contains(x - r.x,y - r.y);  return found ? this : null;}  }
class C{  public void onCreate(Bundle savedInstanceState){  mSlidingMenu=(SlidingMenu)LayoutInflater.from(mActivity).inflate(R.layout.slidingmenumain,null);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_CONSTANT_DECLARATION_1__LIST_1:    setList_1((Boolean)newValue);  return;case UmplePackage.ANONYMOUS_CONSTANT_DECLARATION_1__NAME_1:setName_1((String)newValue);return;case UmplePackage.ANONYMOUS_CONSTANT_DECLARATION_1__TYPE_1:setType_1((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  final public static float[] earthCircle(float phi1,float lambda0,float c,int n,float[] ret_val){  return earthCircle(phi1,lambda0,c,0.0f,MoreMath.TWO_PI,n,ret_val);}  }
class C{  public boolean isExplicit(){  return kind.isExplicit();}  }
class C{  private void enableProgressBarView(boolean aIsProgressBarDisplayed){  if (null != mProgressBarView) {    mProgressBarView.setVisibility(aIsProgressBarDisplayed ? View.VISIBLE : View.GONE);  }}  }
class C{  public void putString(String s){  ensureCapacity((s.length() * 2) + 1);  System.arraycopy(s.getBytes(),0,this.byteBuffer,this.position,s.length());  this.position+=s.length();  this.byteBuffer[this.position++]=0;}  }
class C{  public int read() throws IOException {  return checkInputFile().read();}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  this(AccountManager.get(context),account,authTokenType,notifyAuthFailure);}  }
class C{  public ConsoleDocument(){}  }
class C{  private void readFrameRemainder(ParsableByteArray source){  int bytesToRead=Math.min(source.bytesLeft(),frameSize - frameBytesRead);  output.sampleData(source,bytesToRead);  frameBytesRead+=bytesToRead;  if (frameBytesRead < frameSize) {    return;  }  output.sampleMetadata(timeUs,C.SAMPLE_FLAG_SYNC,frameSize,0,null);  timeUs+=frameDurationUs;  frameBytesRead=0;  state=STATE_FINDING_HEADER;}  }
class C{  public Lucene50CompoundReader(Directory directory,SegmentInfo si,IOContext context) throws IOException {  this.directory=directory;  this.segmentName=si.name;  String dataFileName=IndexFileNames.segmentFileName(segmentName,"",Lucene50CompoundFormat.DATA_EXTENSION);  String entriesFileName=IndexFileNames.segmentFileName(segmentName,"",Lucene50CompoundFormat.ENTRIES_EXTENSION);  this.entries=readEntries(si.getId(),directory,entriesFileName);  boolean success=false;  long expectedLength=CodecUtil.indexHeaderLength(Lucene50CompoundFormat.DATA_CODEC,"");  for (  Map.Entry<String,FileEntry> ent : entries.entrySet()) {    expectedLength+=ent.getValue().length;  }  expectedLength+=CodecUtil.footerLength();  handle=directory.openInput(dataFileName,context);  try {    CodecUtil.checkIndexHeader(handle,Lucene50CompoundFormat.DATA_CODEC,version,version,si.getId(),"");    CodecUtil.retrieveChecksum(handle);    if (handle.length() != expectedLength) {      throw new CorruptIndexException("length should be " + expectedLength + " bytes, but is "+ handle.length()+ " instead",handle);    }    success=true;  }  finally {    if (!success) {      IOUtils.closeWhileHandlingException(handle);    }  }}  }
class C{  public void writeExif(Bitmap bmap,OutputStream exifOutStream) throws IOException {  if (bmap == null || exifOutStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=getExifWriterStream(exifOutStream);  bmap.compress(Bitmap.CompressFormat.JPEG,90,s);  s.flush();}  }
class C{  @Override public String toString(){  return String.format("Thread (TID: %d)",getThreadId());}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FlushFdrPage[");  buffer.append("fixedValue = ").append(fixedValue);  buffer.append(", className = ").append(className);  buffer.append(", treeId = ").append(treeId);  buffer.append(", pageName = ").append(pageName);  buffer.append(", fatherId = ").append(fatherId);  buffer.append(", fatherClassName = ").append(fatherClassName);  buffer.append("]");  return buffer.toString();}  }
class C{  private void ensureCapacity(int newNumStates){  int oldLength=epsilon.length;  if (newNumStates < oldLength)   return;  int newStatesLength=Math.max(oldLength * 2,newNumStates);  boolean[] newFinal=new boolean[newStatesLength];  boolean[] newIsPush=new boolean[newStatesLength];  Action[] newAction=new Action[newStatesLength];  StateSet[][] newTable=new StateSet[newStatesLength][numInput];  StateSet[] newEpsilon=new StateSet[newStatesLength];  System.arraycopy(isFinal,0,newFinal,0,numStates);  System.arraycopy(action,0,newAction,0,numStates);  System.arraycopy(epsilon,0,newEpsilon,0,numStates);  System.arraycopy(table,0,newTable,0,numStates);  isFinal=newFinal;  action=newAction;  epsilon=newEpsilon;  table=newTable;}  }
class C{  protected List<TestDiagnostic> readDiagnostics(TestConfiguration config,CompilationResult compilationResult){  List<TestDiagnostic> expectedDiagnostics;  if (config.getDiagnosticFiles() == null || config.getDiagnosticFiles().isEmpty()) {    expectedDiagnostics=JavaDiagnosticReader.readExpectedDiagnosticsJfo(compilationResult.getJavaFileObjects(),true);  } else {    expectedDiagnostics=JavaDiagnosticReader.readDiagnosticFiles(config.getDiagnosticFiles(),true);  }  return expectedDiagnostics;}  }
class C{  public static String readFile(String fileName){  try {    URL resource=TestUtil.class.getClassLoader().getResource(fileName);    if (resource == null) {      throw new FileNotFoundException(format("Could not find the file on classpath: %s",fileName));    }    return Resources.toString(resource,Charsets.UTF_8);  } catch (  IOException e) {    throw new IllegalArgumentException(format("Error reading file \"%s\"",fileName),e);  }}  }
class C{  public boolean skipPast(String to) throws JSONException {  boolean b;  char c;  int i;  int j;  int offset=0;  int length=to.length();  char[] circle=new char[length];  for (i=0; i < length; i+=1) {    c=next();    if (c == 0) {      return false;    }    circle[i]=c;  }  for (; ; ) {    j=offset;    b=true;    for (i=0; i < length; i+=1) {      if (circle[j] != to.charAt(i)) {        b=false;        break;      }      j+=1;      if (j >= length) {        j-=length;      }    }    if (b) {      return true;    }    c=next();    if (c == 0) {      return false;    }    circle[offset]=c;    offset+=1;    if (offset >= length) {      offset-=length;    }  }}  }
class C{  public void add(Permission permission){  if (!(permission instanceof ExecOptionPermission))   throw new IllegalArgumentException("invalid permission: " + permission);  if (isReadOnly())   throw new SecurityException("attempt to add a Permission to a readonly PermissionCollection");  ExecOptionPermission p=(ExecOptionPermission)permission;  permissions.put(p.getName(),permission);  if (!all_allowed) {    if (p.getName().equals("*"))     all_allowed=true;  }}  }
class C{  public boolean isReusable(){  if ((socket != null) && (socket instanceof RMISocketInfo))   return ((RMISocketInfo)socket).isReusable(); else   return true;}  }
class C{  public ColumnList addCounter(byte[] family,byte[] qualifier,long incr){  counters().add(new Counter(family,qualifier,incr));  return this;}  }
class C{  private final void _writeSegment(int end) throws IOException, JsonGenerationException {  final int[] escCodes=CharTypes.getOutputEscapes();  final int escLen=escCodes.length;  int ptr=0;  output_loop:   while (ptr < end) {    int start=ptr;    while (true) {      char c=_outputBuffer[ptr];      if (c < escLen && escCodes[c] != 0) {        break;      }      if (++ptr >= end) {        break;      }    }    int flushLen=(ptr - start);    if (flushLen > 0) {      _writer.write(_outputBuffer,start,flushLen);      if (ptr >= end) {        break output_loop;      }    }{      int escCode=escCodes[_outputBuffer[ptr]];      ++ptr;      int needLen=(escCode < 0) ? 6 : 2;      if (needLen > _outputTail) {        _writeSingleEscape(escCode);      } else {        ptr-=needLen;        _appendSingleEscape(escCode,_outputBuffer,ptr);      }    }  }}  }
class C{  private void fillPicks(){  String sql="SELECT M_PriceList_Version.M_PriceList_Version_ID," + " M_PriceList_Version.Name || ' (' || c.Iso_Code || ')' AS ValueName " + "FROM M_PriceList_Version, M_PriceList pl, C_Currency c "+ "WHERE M_PriceList_Version.M_PriceList_ID=pl.M_PriceList_ID"+ " AND pl.C_Currency_ID=c.C_Currency_ID"+ " AND M_PriceList_Version.IsActive='Y' AND pl.IsActive='Y'";  sql=MRole.getDefault().addAccessSQL(sql,"M_PriceList_Version",true,false) + " ORDER BY M_PriceList_Version.Name";  try {    pickPriceList.addItem(new KeyNamePair(0,""));    PreparedStatement pstmt=DB.prepareStatement(sql,null);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      KeyNamePair kn=new KeyNamePair(rs.getInt(1),rs.getString(2));      pickPriceList.addItem(kn);    }    rs.close();    pstmt.close();    sql="SELECT M_Warehouse_ID, Value || ' - ' || Name AS ValueName " + "FROM M_Warehouse " + "WHERE IsActive='Y'";    sql=MRole.getDefault().addAccessSQL(sql,"M_Warehouse",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO) + " ORDER BY Value";    pickWarehouse.addItem(new KeyNamePair(0,""));    pstmt=DB.prepareStatement(sql,null);    rs=pstmt.executeQuery();    while (rs.next()) {      KeyNamePair kn=new KeyNamePair(rs.getInt("M_Warehouse_ID"),rs.getString("ValueName"));      pickWarehouse.addItem(kn);    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }}  }
class C{  public HttpException(){  super();}  }
class C{  static public boolean hasPhoto(Tweet tweet){  return getPhotoEntity(tweet) != null;}  }
class C{  public ScopeContext(String scopeName,Map<String,Object> scope){  this.scopeName=scopeName;  this.scope=scope;}  }
class C{  public boolean isOK(){  return fSeverity == OK;}  }
class C{  void waitBeforeNextPoll(int pollingInterval) throws InterruptedException {synchronized (this) {    wait(pollingInterval);  }  if (!pollOutstanding) {    return;  }  log.debug("--- extra wait");  for (int i=0; i < 20; i++) {synchronized (this) {      wait(pollingInterval / 4);    }    log.debug("-------------extra wait");    if (!pollOutstanding) {      return;    }  }}  }
class C{  public boolean equivalent(Label other){  if (other == null) {    return false;  }  boolean result=true;  result&=value.equals(other.getValue());  result&=scope.equals(other.getScope());  return result;}  }
class C{  private static Map<String,Integer> optionArgDefs(){  Map<String,Integer> optionArgDefs=new HashMap<>();  optionArgDefs.put("annotationsSplit",0);  optionArgDefs.put("sourceTokens",1);  optionArgDefs.put("targetTokens",1);  optionArgDefs.put("alignment",1);  optionArgDefs.put("annotations",1);  return optionArgDefs;}  }
class C{  public static ClassInfo[] findOrCreateClass(Class<?>[] l){  final ClassInfo[] a=new ClassInfo[l.length];  for (int i=0; i < a.length; ++i) {    a[i]=findOrCreateClass(l[i]);  }  return a;}  }
class C{  private boolean existsXmlConversion(Class<?> clazz){  return exists(xml.getConversionMethods(clazz));}  }
class C{  public static void putObject_test4() throws Exception {  println("Test: putObject(String bucketName, String objectName, String contentType, long size, InputStream body)");  String fileName=createFile(3 * MB);  InputStream is=Files.newInputStream(Paths.get(fileName));  client.putObject(bucketName,fileName,is,1024 * 1024,customContenType);  is.close();  Files.delete(Paths.get(fileName));  ObjectStat objectStat=client.statObject(bucketName,fileName);  if (!customContenType.equals(objectStat.contentType())) {    println("FAILED");  }  client.removeObject(bucketName,fileName);}  }
class C{  public WorldWindowGLCanvas(WorldWindow shareWith,java.awt.GraphicsDevice device){  super(Configuration.getRequiredGLCapabilities(),new BasicGLCapabilitiesChooser(),device);  if (shareWith != null)   this.setSharedContext(shareWith.getContext());  try {    this.wwd=((WorldWindowGLDrawable)WorldWind.createConfigurationComponent(AVKey.WORLD_WINDOW_CLASS_NAME));    this.wwd.initDrawable(this);    this.wwd.addPropertyChangeListener(this);    if (shareWith != null)     this.wwd.initGpuResourceCache(shareWith.getGpuResourceCache()); else     this.wwd.initGpuResourceCache(WorldWindowImpl.createGpuResourceCache());    this.createView();    this.createDefaultInputHandler();    WorldWind.addPropertyChangeListener(WorldWind.SHUTDOWN_EVENT,this);    this.wwd.endInitialization();  } catch (  Exception e) {    String message=Logging.getMessage("Awt.WorldWindowGLSurface.UnabletoCreateWindow");    Logging.logger().severe(message);    throw new WWRuntimeException(message,e);  }}  }
class C{  long triggerTime(long delay){  return now() + ((delay < (Long.MAX_VALUE >> 1)) ? delay : overflowFree(delay));}  }
class C{  public final void flush(){  if (offset > 0 && offset >= minLenToWrite()) {    ChunkRaw c=new ChunkRaw(offset,getChunkId(),false);    c.data=buf;    c.writeChunk(outputStream);    totalBytesWriten+=c.len + 12;    chunksWriten++;    offset=0;    availLen=maxChunkLen;    postReset();  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StandardXYSeriesLabelGenerator)) {    return false;  }  StandardXYSeriesLabelGenerator that=(StandardXYSeriesLabelGenerator)obj;  if (!this.formatPattern.equals(that.formatPattern)) {    return false;  }  return true;}  }
class C{  public SecurityObjectAuthority(SecurityObject securityObject){  sObj=securityObject;}  }
class C{  private static void usage(){  System.out.println("TAnk Standalone Agent Startup Usage:");  System.out.println("java -cp standaloneagent-startup-pkg-1.0-all.jar com/intuit/tank/agent/StandaloneAgentStartup <options>");  System.out.println("-controller=<controller_base_url>:  The url of the controller to get test info from.");  System.out.println("-host=<agent ip or host>:  optional. only need if agent cannot determine correct ip. The ip or dns name of this agent.");  System.out.println("-capacity=<integer>:  optional. The number of users this agent can simulate. Default 4000.");}  }
class C{  public static void startSettingsApp(Fragment fragment){  startSettingsApp((Context)fragment.getActivity());}  }
class C{  public void runMATSimPSSIterations(int numberOfIterations){  File resultsDirectory=new File(resultDirectory);  if (resultsDirectory.list().length > 0) {    throw new Error("The result directory is not empty.");  }  if (!new File(outputPSSPath + "\\hubPriceInfo.txt").exists()) {    throw new Error("The initial price file is not in " + outputPSSPath);  }  GeneralLib.copyFile(outputPSSPath + "\\hubPriceInfo.txt",resultDirectory + "initialHubPriceInfo.txt");  for (iterationNumber=0; iterationNumber < numberOfIterations; iterationNumber++) {    runMATSimIterations();    saveMATSimResults();    preparePSSInput();    runPSS();    savePSSResults();    prepareMATSimInput();  }}  }
class C{  public void start(){  init();  m_Start=getCurrentTime();  m_Stop=m_Start;  m_Running=true;}  }
class C{  public PricedProductRole copy(PriceModel pm){  return copy(pm,null,null);}  }
class C{  public void handleEvent(Event evt){  Node node=(Node)evt.getTarget();  BridgeUpdateHandler h=getBridgeUpdateHandler(node);  if (h != null) {    try {      h.handleDOMNodeRemovedEvent((MutationEvent)evt);    } catch (    Exception e) {      userAgent.displayError(e);    }  }}  }
class C{  @Override public void characters(char[] ch,int start,int length){  if (this.currentText != null) {    this.currentText.append(String.copyValueOf(ch,start,length));  }}  }
class C{  public RDFXMLWriter(Writer writer){  this.writer=writer;  namespaceTable=new LinkedHashMap<String,String>();  writingStarted=false;  headerWritten=false;  lastWrittenSubject=null;}  }
class C{  @Override public boolean isEmpty(){  return 0 == size();}  }
class C{  private BitMatrix sampleGrid(BitMatrix image,ResultPoint topLeft,ResultPoint bottomLeft,ResultPoint bottomRight,ResultPoint topRight) throws NotFoundException {  int dimension;  if (compact) {    dimension=4 * nbLayers + 11;  } else {    if (nbLayers <= 4) {      dimension=4 * nbLayers + 15;    } else {      dimension=4 * nbLayers + 2 * ((nbLayers - 4) / 8 + 1) + 15;    }  }  GridSampler sampler=GridSampler.getInstance();  return sampler.sampleGrid(image,dimension,dimension,0.5f,0.5f,dimension - 0.5f,0.5f,dimension - 0.5f,dimension - 0.5f,0.5f,dimension - 0.5f,topLeft.getX(),topLeft.getY(),topRight.getX(),topRight.getY(),bottomRight.getX(),bottomRight.getY(),bottomLeft.getX(),bottomLeft.getY());}  }
class C{  private void put(final Item i){  if (index + typeCount > threshold) {    int ll=items.length;    int nl=ll * 2 + 1;    Item[] newItems=new Item[nl];    for (int l=ll - 1; l >= 0; --l) {      Item j=items[l];      while (j != null) {        int index=j.hashCode % newItems.length;        Item k=j.next;        j.next=newItems[index];        newItems[index]=j;        j=k;      }    }    items=newItems;    threshold=(int)(nl * 0.75);  }  int index=i.hashCode % items.length;  i.next=items[index];  items[index]=i;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  String prefix;  String namespace;  String methName;  String fullName=m_arg0.execute(xctxt).str();  int indexOfNSSep=fullName.indexOf(':');  if (indexOfNSSep < 0) {    prefix="";    namespace=Constants.S_XSLNAMESPACEURL;    methName=fullName;  } else {    prefix=fullName.substring(0,indexOfNSSep);    namespace=xctxt.getNamespaceContext().getNamespaceForPrefix(prefix);    if (null == namespace)     return XBoolean.S_FALSE;    methName=fullName.substring(indexOfNSSep + 1);  }  if (namespace.equals(Constants.S_XSLNAMESPACEURL) || namespace.equals(Constants.S_BUILTIN_EXTENSIONS_URL)) {    try {      TransformerImpl transformer=(TransformerImpl)xctxt.getOwnerObject();      return transformer.getStylesheet().getAvailableElements().containsKey(new QName(namespace,methName)) ? XBoolean.S_TRUE : XBoolean.S_FALSE;    } catch (    Exception e) {      return XBoolean.S_FALSE;    }  } else {    ExtensionsProvider extProvider=(ExtensionsProvider)xctxt.getOwnerObject();    return extProvider.elementAvailable(namespace,methName) ? XBoolean.S_TRUE : XBoolean.S_FALSE;  }}  }
class C{  public boolean allowTrailingEdges(){  return patternElement.allowTrailingEdges();}  }
class C{  public static CompoundTag putItemHelper(Item item){  return putItemHelper(item,null);}  }
class C{  public final boolean contains(String key){  for (int i=0; i < m_firstFree; i++) {    if (m_map[i].equals(key))     return true;  }  return false;}  }
class C{  public void installUI(JComponent c){  super.installUI(c);  c.setOpaque(false);}  }
class C{  public Collection<GridQueryTypeDescriptor> types(@Nullable String space){  Collection<GridQueryTypeDescriptor> spaceTypes=new ArrayList<>(Math.min(10,types.size()));  for (  Map.Entry<TypeId,TypeDescriptor> e : types.entrySet()) {    TypeDescriptor desc=e.getValue();    if (desc.registered() && F.eq(e.getKey().space,space))     spaceTypes.add(desc);  }  return spaceTypes;}  }
class C{  public final synchronized void queueAnalyzeRequest(SearchRequest sr){  killOldEngine(sr.engine);  stopSearch();  ArrayList<Move> moves=movesToSearch(sr);  if (moves.size() == 0)   return;  searchRequest=sr;  handleQueue();}  }
class C{  public void fireGenerateEvent(int eventType){}  }
class C{  public static void enable(){}  }
class C{  public Debug_ createDebug_(){  Debug_Impl debug_=new Debug_Impl();  return debug_;}  }
class C{  @Override protected boolean shouldContinue(){  return receivedJDPpackets < 3;}  }
class C{  public void test_getPublicExponent(){  assertEquals("invalid public exponent",Util.rsaCrtParam.getPublicExponent(),key.getPublicExponent());}  }
class C{  private Throwable prepareFault(HashMap fault) throws IOException {  Object detail=fault.get("detail");  String message=(String)fault.get("message");  if (detail instanceof Throwable) {    _replyFault=(Throwable)detail;    if (message != null && _detailMessageField != null) {      try {        _detailMessageField.set(_replyFault,message);      } catch (      Throwable e) {      }    }    return _replyFault;  } else {    String code=(String)fault.get("code");    _replyFault=new HessianServiceException(message,code,detail);    return _replyFault;  }}  }
class C{  public void free(){  logger.fine("Free ICE agent");  shutdown=true;  if (stunKeepAliveThread != null)   stunKeepAliveThread.interrupt();  connCheckServer.stop();  IceProcessingState state=getState();  if (!IceProcessingState.FAILED.equals(state) && !IceProcessingState.TERMINATED.equals(state)) {    terminate(IceProcessingState.TERMINATED);  }  boolean interrupted=false;  logger.fine("remove streams");  for (  IceMediaStream stream : getStreams()) {    try {      removeStream(stream);      logger.fine("remove stream " + stream.getName());    } catch (    Throwable t) {      logger.fine("remove stream " + stream.getName() + " failed: "+ t);      if (t instanceof InterruptedException)       interrupted=true; else       if (t instanceof ThreadDeath)       throw (ThreadDeath)t;    }  }  if (interrupted)   Thread.currentThread().interrupt();  getStunStack().shutDown();  logger.fine("ICE agent freed");}  }
class C{  public boolean containsIgnoredSections(){  return containsIgnoredSections;}  }
class C{  public NullOutputLogTarget(){  open();}  }
class C{  @SuppressWarnings("deprecation") protected void preShow(){  if (mRootView == null)   throw new IllegalStateException("setContentView was not called with a view to display.");  onShow();  if (mBackground == null)   mWindow.setBackgroundDrawable(new BitmapDrawable()); else   mWindow.setBackgroundDrawable(mBackground);  mWindow.setWidth(WindowManager.LayoutParams.WRAP_CONTENT);  mWindow.setHeight(WindowManager.LayoutParams.WRAP_CONTENT);  mWindow.setTouchable(true);  mWindow.setFocusable(true);  mWindow.setOutsideTouchable(true);  mWindow.setContentView(mRootView);}  }
class C{  private void updateOffsets(){  float minSizeX=imageWidth * minRelativeOffset;  float minSizeY=imageHeight * minRelativeOffset;  offsetWidth=(imageWidth - canvasWidth - minSizeX) > 0 ? imageWidth - canvasWidth : 0;  offsetHeight=(imageHeight - canvasHeight - minSizeY) > 0 ? imageHeight - canvasHeight : 0;}  }
class C{  public boolean isParentOf(Node node1,Node node2){  for (  Edge edge1 : getEdges(node1)) {    Edge edge=(edge1);    Node sub=Edges.traverseDirected(node1,edge);    if (sub == node2) {      return true;    }  }  return false;}  }
class C{  public Rule findById(Integer id){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    Rule instance=entityManager.find(Rule.class,id);    entityManager.getTransaction().commit();    return instance;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:53.600 -0400",hash_original_method="3EB1A4F1628CAC368761882425F0BB03",hash_generated_method="3EB1A4F1628CAC368761882425F0BB03") boolean isValid(){  return (null != mMimeType && !mMimeType.equals("") && null != mData && mData.length > 0);}  }
class C{  public static Builder newBuilder(@Nullable Context context){  return new Builder(context);}  }
class C{  @AfterClass public static void afterClassBaseTest() throws SQLException {  if (testSingleHost) {    if (!sharedConnection.isClosed()) {      if (!tempViewList.isEmpty()) {        Statement stmt=sharedConnection.createStatement();        String viewName;        while ((viewName=tempViewList.poll()) != null) {          try {            stmt.execute("DROP VIEW IF EXISTS " + viewName);          } catch (          SQLException e) {          }        }      }      if (!tempTableList.isEmpty()) {        Statement stmt=sharedConnection.createStatement();        String tableName;        while ((tableName=tempTableList.poll()) != null) {          try {            stmt.execute("DROP TABLE IF EXISTS " + tableName);          } catch (          SQLException e) {          }        }      }      if (!tempProcedureList.isEmpty()) {        Statement stmt=sharedConnection.createStatement();        String procedureName;        while ((procedureName=tempProcedureList.poll()) != null) {          try {            stmt.execute("DROP procedure IF EXISTS " + procedureName);          } catch (          SQLException e) {          }        }      }      if (!tempFunctionList.isEmpty()) {        Statement stmt=sharedConnection.createStatement();        String functionName;        while ((functionName=tempFunctionList.poll()) != null) {          try {            stmt.execute("DROP FUNCTION IF EXISTS " + functionName);          } catch (          SQLException e) {          }        }      }    }    try {      sharedConnection.close();    } catch (    SQLException e) {      e.printStackTrace();    }  }}  }
class C{  public boolean isSorted(){  return (mSortColumn > -1);}  }
class C{  public CacheProfile(FilterProfile localProfile){  this.filterProfile=localProfile;}  }
class C{  Type(Response.Status status){  this.status=status;}  }
class C{  public INode copy(){  return new SmallPuzzle(s);}  }
class C{  @Override protected final void addArgument(Object argument){  if (this.arguments == null) {    throw new IllegalStateException("Could not add argument to evaluated element");  }  this.arguments.add(argument);}  }
class C{  public DImportKeyPairPvk(JFrame parent){  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  initComponents();}  }
class C{  private IgniteBiTuple<Integer,Integer> fieldPositionAndLength(int footerPos,int footerEnd,int rawPos,int fieldIdLen,int fieldOffsetLen){  int fieldOffset=BinaryUtils.fieldOffsetRelative(reader,footerPos + fieldIdLen,fieldOffsetLen);  int fieldPos=start + fieldOffset;  int fieldLen;  if (footerPos + fieldIdLen + fieldOffsetLen == footerEnd)   fieldLen=rawPos - fieldPos; else {    int nextFieldOffset=BinaryUtils.fieldOffsetRelative(reader,footerPos + fieldIdLen + fieldOffsetLen+ fieldIdLen,fieldOffsetLen);    fieldLen=nextFieldOffset - fieldOffset;  }  return F.t(fieldPos,fieldLen);}  }
class C{  public Graph search(Node target){  long start=System.currentTimeMillis();  this.numIndependenceTests=0;  this.allTriples=new HashSet<>();  this.ambiguousTriples=new HashSet<>();  this.colliderTriples=new HashSet<>();  this.noncolliderTriples=new HashSet<>();  if (target == null) {    throw new IllegalArgumentException("Null target name not permitted");  }  this.target=target;  logger.log("info","Target = " + target);  this.maxRemainingAtDepth=new int[20];  this.maxVariableAtDepth=new Node[20];  Arrays.fill(maxRemainingAtDepth,-1);  Arrays.fill(maxVariableAtDepth,null);  logger.log("info","target = " + getTarget());  Graph graph=new EdgeListGraph();  this.a=new HashSet<>();  logger.log("info","BEGINNING step 1 (prune target).");  graph.addNode(getTarget());  constructFan(getTarget(),graph);  logger.log("graph","After step 1 (prune target)" + graph);  logger.log("graph","After step 1 (prune target)" + graph);  logger.log("info","BEGINNING step 2 (prune PC).");  for (  Node v : graph.getAdjacentNodes(getTarget())) {    constructFan(v,graph);    W:     for (    Node w : graph.getAdjacentNodes(v)) {      if (a.contains(w)) {        continue;      }      List _a=new LinkedList<>(a);      _a.retainAll(graph.getAdjacentNodes(w));      if (_a.size() > 1)       continue;      List<Node> adjT=graph.getAdjacentNodes(getTarget());      DepthChoiceGenerator cg=new DepthChoiceGenerator(adjT.size(),depth);      int[] choice;      while ((choice=cg.next()) != null) {        List<Node> s=GraphUtils.asList(choice,adjT);        if (!s.contains(v))         continue;        if (independent(getTarget(),w,s)) {          graph.removeEdge(v,w);          continue W;        }      }    }  }  logger.log("graph","After step 2 (prune PC)" + graph);  logger.log("info","BEGINNING step 3 (prune PCPC).");  for (  Node v : graph.getAdjacentNodes(getTarget())) {    for (    Node w : graph.getAdjacentNodes(v)) {      if (getA().contains(w)) {        continue;      }      constructFan(w,graph);    }  }  logger.log("graph","After step 3 (prune PCPC)" + graph);  logger.log("info","BEGINNING step 4 (PC Orient).");  SearchGraphUtils.pcOrientbk(knowledge,graph,graph.getNodes());  List<Node> _visited=new LinkedList<>(getA());  orientUnshieldedTriples(knowledge,graph,getTest(),getDepth(),_visited);  MeekRules meekRules=new MeekRules();  meekRules.setAggressivelyPreventCycles(this.aggressivelyPreventCycles);  meekRules.setKnowledge(knowledge);  meekRules.orientImplied(graph);  logger.log("graph","After step 4 (PC Orient)" + graph);  logger.log("info","BEGINNING step 5 (Trim graph to {T} U PC U " + "{Parents(Children(T))}).");  MbUtils.trimToMbNodes(graph,getTarget(),false);  logger.log("graph","After step 5 (Trim graph to {T} U PC U {Parents(Children(T))})" + graph);  logger.log("info","BEGINNING step 6 (Remove edges among P and P of C).");  MbUtils.trimEdgesAmongParents(graph,getTarget());  MbUtils.trimEdgesAmongParentsOfChildren(graph,getTarget());  logger.log("graph","After step 6 (Remove edges among P and P of C)" + graph);  finishUp(start,graph);  this.logger.log("graph","\nReturning this graph: " + graph);  this.graph=graph;  return graph;}  }
class C{  public static SliceMetaData readSliceMetadata(File rsFiles,int restructFolderNumber) throws CarbonUtilException {  SliceMetaData readObject=null;  InputStream stream=null;  ObjectInputStream objectInputStream=null;  File file=null;  try {    file=new File(rsFiles + File.separator + getSliceMetaDataFileName(restructFolderNumber));    stream=new FileInputStream(rsFiles + File.separator + getSliceMetaDataFileName(restructFolderNumber));    objectInputStream=new ObjectInputStream(stream);    readObject=(SliceMetaData)objectInputStream.readObject();  } catch (  ClassNotFoundException e) {    throw new CarbonUtilException("Problem while reading the slicemeta data file " + file.getAbsolutePath(),e);  }catch (  IOException e) {    throw new CarbonUtilException("Problem while reading the slicemeta data file ",e);  } finally {    closeStreams(objectInputStream,stream);  }  return readObject;}  }
class C{  private void writeObject(java.io.ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();}  }
class C{  public static void warn(String tag,String text){  try {    Log.w(tag,getFormattedLogLine() + text);  } catch (  OutOfMemoryError error) {    error.printStackTrace();  }catch (  Exception exception) {    exception.printStackTrace();  }}  }
class C{  public boolean parse(){  BStack=new BracketStack();  BStack.newClass();  BStack.registerInCurrentClass(AND);  BStack.newClass();  BStack.registerInCurrentClass(OR);  BStack.newClass();  BStack.registerInCurrentClass(PROOF);  BStack.newClass();  BStack.registerInCurrentClass(LBR);  BStack.newClass();  BStack.registerInCurrentClass(ASSUME);  try {    ParseTree=CompilationUnit();  } catch (  ParseException e) {    PErrors.push(new ParseError(msgStackToString(e)));  }catch (  TokenMgrError tme) {    String msg=tme.getMessage();    int bl=jj_input_stream.getBeginLine() + 1;    int el=jj_input_stream.getEndLine() + 1;    if ((msg.indexOf("EOF") != -1) && (bl != el)) {      PErrors.push(new ParseError("Lexical {error: EOF reached, " + "possibly open comment starting around line " + (bl - 1)));    } else     PErrors.push(new ParseError(msg));  }  if (PErrors.empty())   Assert.check(heirsIndex == 0,EC.SANY_PARSER_CHECK_1); else {    tla2sany.st.ParseError list[]=PErrors.errors();    for (int i=0; i < list.length; i++) {      ToolIO.out.println(list[i].reportedError());    }  }  return PErrors.empty();}  }
class C{  void addOrReplaceDecls(XMLNSDecl newDecl){  int n=m_prefixTable.size();  for (int i=n - 1; i >= 0; i--) {    XMLNSDecl decl=(XMLNSDecl)m_prefixTable.get(i);    if (decl.getPrefix().equals(newDecl.getPrefix())) {      return;    }  }  m_prefixTable.add(newDecl);}  }
class C{  protected ChangeDescriptor(){}  }
class C{  PortTcp port(){  return _port;}  }
class C{  public static final String portDisplayTextFunction(Interface iface){  String string;  if (iface.hasSpecifiedName()) {    string=String.format("%s %s",iface.getName(),iface.getPort().getDisplayText());  } else {    string=iface.getPort().getDisplayText();  }  return string;}  }
class C{  public void visitFieldInsn(int opcode,String owner,String name,String desc){  if (mv != null) {    mv.visitFieldInsn(opcode,owner,name,desc);  }}  }
class C{  public boolean visit(final int depth,final Value predecessor){  if (this.depth.compareAndSet(-1,depth)) {    this.predecessor.set(predecessor);    return true;  }  return false;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  cardboardAudioEngine=new GvrAudioEngine(this,GvrAudioEngine.RenderingMode.BINAURAL_HIGH_QUALITY);  setMain(new SpatialAudioMain(cardboardAudioEngine),"gvr.xml");}  }
class C{  public DataFilterCriteria.Builder<Select<T>> openBracketOr(){  return new DataFilterCriteria.Builder<>(this,DataFilterClause.DataFilterConjunction.OR);}  }
class C{  protected void putChar(char ch,boolean scan){  sbuf=ArrayUtils.ensureCapacity(sbuf,sp);  sbuf[sp++]=ch;  if (scan)   scanChar();}  }
class C{  private boolean isCacheServerPortEquals(CacheServer other){  return (this.getPort() == 0) ? true : this.getPort() == other.getPort();}  }
class C{  Property(YearMonthDay partial,int fieldIndex){  super();  iYearMonthDay=partial;  iFieldIndex=fieldIndex;}  }
class C{  public E push(E item){  top=new Node<>(item,top);  return item;}  }
class C{  public static byte[] asByteArray(final List<Byte> l){  final byte[] a=new byte[l.size()];  for (int i=0; i < a.length; i++) {    a[i]=l.get(i);  }  return a;}  }
class C{  public double nextDouble(double lambda){  return -Math.log(randomGenerator.raw()) / lambda;}  }
class C{  public void addObserver(AppMenuObserver observer){  mObservers.add(observer);}  }
class C{  private static void initClamp(){  for (int i=0; i < 256; i++) {    clamp[CLAMP_BASE + i]=i;  }  for (int i=0; i < CLAMP_BASE; i++) {    clamp[i]=0;    clamp[i + CLAMP_BASE + 256]=255;  }}  }
class C{  public void detachDatastore(Datastore datastore){  for (  HostScsiDisk disk : listDisks(datastore)) {    try {      host.getHostStorageSystem().detachScsiLun(disk.getUuid());    } catch (    RemoteException e) {      throw new VMWareException(e);    }  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @SuppressWarnings("deprecation") public static Expression create(String expression,StatsCollector[] statsCollectors){  int paren=expression.indexOf('(');  if (paren <= 0) {    throw new SolrException(ErrorCode.BAD_REQUEST,"The expression [" + expression + "] has no arguments and is not supported.");  }  String topOperation=expression.substring(0,paren).trim();  String operands;  try {    operands=expression.substring(paren + 1,expression.lastIndexOf(')')).trim();  } catch (  Exception e) {    throw new SolrException(ErrorCode.BAD_REQUEST,"Missing closing parenthesis in [" + expression + "]",e);  }  if (AnalyticsParams.ALL_STAT_SET.contains(topOperation)) {    if (topOperation.equals(AnalyticsParams.STAT_PERCENTILE)) {      operands=expression.substring(expression.indexOf(',') + 1,expression.lastIndexOf(')')).trim();      topOperation=topOperation + "_" + expression.substring(expression.indexOf('(') + 1,expression.indexOf(',')).trim();    }    StatsCollector collector=null;    for (    StatsCollector c : statsCollectors) {      if (c.valueSourceString().equals(operands)) {        collector=c;        break;      }    }    if (collector == null) {      throw new SolrException(ErrorCode.BAD_REQUEST,"ValueSource [" + operands + "] in Expression ["+ expression+ "] not found.");    }    return new BaseExpression(collector,topOperation);  }  if (topOperation.equals(AnalyticsParams.CONSTANT_NUMBER)) {    try {      return new ConstantNumberExpression(Double.parseDouble(operands));    } catch (    NumberFormatException e) {      throw new SolrException(ErrorCode.BAD_REQUEST,"The constant " + operands + " cannot be converted into a number.",e);    }  } else   if (topOperation.equals(AnalyticsParams.CONSTANT_DATE)) {    return new ConstantDateExpression(DateMathParser.parseMath(null,operands));  } else   if (topOperation.equals(AnalyticsParams.CONSTANT_STRING)) {    operands=expression.substring(paren + 1,expression.lastIndexOf(')'));    return new ConstantStringExpression(operands);  }  String[] arguments=getArguments(operands);  Expression[] expArgs=new Expression[arguments.length];  for (int count=0; count < arguments.length; count++) {    expArgs[count]=create(arguments[count],statsCollectors);  }  if (expArgs.length == 1) {    if (topOperation.equals(AnalyticsParams.NEGATE)) {      return new NegateExpression(expArgs[0]);    }    if (topOperation.equals(AnalyticsParams.ABSOLUTE_VALUE)) {      return new AbsoluteValueExpression(expArgs[0]);    } else     if (topOperation.equals(AnalyticsParams.REVERSE)) {      return new ReverseExpression(expArgs[0]);    }    throw new SolrException(ErrorCode.BAD_REQUEST,topOperation + " does not have the correct number of arguments.");  } else {    if (topOperation.equals(AnalyticsParams.ADD)) {      return new AddExpression(expArgs);    } else     if (topOperation.equals(AnalyticsParams.MULTIPLY)) {      return new MultiplyExpression(expArgs);    } else     if (topOperation.equals(AnalyticsParams.DATE_MATH)) {      return new DateMathExpression(expArgs);    } else     if (topOperation.equals(AnalyticsParams.CONCATENATE)) {      return new ConcatenateExpression(expArgs);    } else     if (expArgs.length == 2 && (topOperation.equals(AnalyticsParams.DIVIDE) || topOperation.equals(AnalyticsParams.POWER) || topOperation.equals(AnalyticsParams.LOG))) {      if (topOperation.equals(AnalyticsParams.DIVIDE)) {        return new DivideExpression(expArgs[0],expArgs[1]);      } else       if (topOperation.equals(AnalyticsParams.POWER)) {        return new PowerExpression(expArgs[0],expArgs[1]);      } else       if (topOperation.equals(AnalyticsParams.LOG)) {        return new LogExpression(expArgs[0],expArgs[1]);      }      return null;    }    throw new SolrException(ErrorCode.BAD_REQUEST,topOperation + " does not have the correct number of arguments or is unsupported.");  }}  }
class C{  protected SystemMember createSystemMember(InternalDistributedMember member) throws org.apache.geode.admin.AdminException {  return new SystemMemberImpl(this,member);}  }
class C{  void writeData(int streamId,byte[] buffer,int offset,int length,int flags) throws IOException {  WriteStream os=_os;  if (os == null) {    return;  }  if (offset >= 8) {    offset-=8;    BitsUtil.writeInt16(buffer,offset,length);    buffer[offset + 2]=Http2Constants.FRAME_DATA;    buffer[offset + 3]=(byte)flags;    BitsUtil.writeInt(buffer,offset + 4,streamId);    os.write(buffer,offset,length + 8);  } else {    os.write((byte)(length >> 16));    os.write((byte)(length >> 8));    os.write((byte)(length));    os.write(Http2Constants.FRAME_DATA);    os.write(flags);    BitsUtil.writeInt(os,streamId);    if (length > 0) {      os.write(buffer,offset,length);    }  }  if ((flags & Http2Constants.END_STREAM) != 0) {    closeWrite(streamId);  }}  }
class C{  private final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  private ShellUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  private String preparePath(String path){  if (path.endsWith("/") || path.endsWith(pathSeparator)) {    path+=DEFAULT_RAML_FILENAME;  }  return path;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildhotdoglady(zone);}  }
class C{  public static Scs cs_multiply(Scs A,Scs B){  int p, j, nz=0, anz, Cp[], Ci[], Bp[], m, n, bnz, w[], Bi[];  float x[], Bx[], Cx[];  boolean values;  Scs C;  if (!Scs_util.CS_CSC(A) || !Scs_util.CS_CSC(B))   return (null);  if (A.n != B.m)   return (null);  m=A.m;  anz=A.p[A.n];  n=B.n;  Bp=B.p;  Bi=B.i;  Bx=B.x;  bnz=Bp[n];  w=new int[m];  values=(A.x != null) && (Bx != null);  x=values ? new float[m] : null;  C=Scs_util.cs_spalloc(m,n,anz + bnz,values,false);  Cp=C.p;  for (j=0; j < n; j++) {    if (nz + m > C.nzmax) {      Scs_util.cs_sprealloc(C,2 * (C.nzmax) + m);    }    Ci=C.i;    Cx=C.x;    Cp[j]=nz;    for (p=Bp[j]; p < Bp[j + 1]; p++) {      nz=Scs_scatter.cs_scatter(A,Bi[p],(Bx != null) ? Bx[p] : 1,w,x,j + 1,C,nz);    }    if (values)     for (p=Cp[j]; p < nz; p++)     Cx[p]=x[Ci[p]];  }  Cp[n]=nz;  Scs_util.cs_sprealloc(C,0);  return C;}  }
class C{  @Override public void topologyChanged(List<LDUpdate> updateList){  Iterator<Device> diter=deviceMap.values().iterator();  if (updateList != null) {    if (logger.isTraceEnabled()) {      for (      LDUpdate update : updateList) {        logger.trace("Topo update: {}",update);      }    }  }  while (diter.hasNext()) {    Device d=diter.next();    if (d.updateAttachmentPoint()) {      if (logger.isDebugEnabled()) {        logger.debug("Attachment point changed for device: {}",d);      }      sendDeviceMovedNotification(d);    }  }  debugEventService.flushEvents();}  }
class C{  private TreePath findShallowestPath(TreePath[] paths){  int shallowest=-1;  TreePath shallowestPath=null;  for (int counter=paths.length - 1; counter >= 0; counter--) {    if (paths[counter] != null) {      if (shallowest != -1) {        if (paths[counter].getPathCount() < shallowest) {          shallowest=paths[counter].getPathCount();          shallowestPath=paths[counter];          if (shallowest == 1) {            return shallowestPath;          }        }      } else {        shallowestPath=paths[counter];        shallowest=paths[counter].getPathCount();      }    }  }  return shallowestPath;}  }
class C{  public AppUser addNewUser(String username,String pwd,String priv,String email,boolean confirmed){  if (this.retrieveUserInfoFromMetaDB(username) != null)   return null;  AppUser newUser=new AppUser();  newUser.setName(username.trim().toLowerCase());  newUser.setPassword(pwd);  newUser.setUserprivilege(AppUser.PRIV_USER_STANDARD);  newUser.setEmail(email);  newUser.setVerified(confirmed);  try {    int privInt=Integer.parseInt(priv);    if (privInt == AppUser.PRIV_USER_POWER || privInt == AppUser.PRIV_USER_RESTRICTED)     newUser.setUserprivilege(privInt);  } catch (  Exception ex) {  }  newUser.setMd5Hash(newUser.calMd5(newUser.getPassword()));  metaDb.upsertAppUser(newUser);  this.addUser(newUser);  return newUser;}  }
class C{  protected FinallyBlockImpl(){  super();}  }
class C{  private Compiler(){}  }
class C{  public boolean initLogin(){  m_cc=CConnection.get(Adempiere.getCodeBaseHost());  hostField.setValue(m_cc);  if (Ini.isPropertyBool(Ini.P_VALIDATE_CONNECTION_ON_STARTUP)) {    validateConnection();  }  userTextField.setText(Ini.getProperty(Ini.P_UID));  if (Ini.isPropertyBool(Ini.P_STORE_PWD))   passwordField.setText(Ini.getProperty(Ini.P_PWD)); else   passwordField.setText("");  languageCombo.setSelectedItem(Ini.getProperty(Ini.P_LANGUAGE));  if (Ini.isPropertyBool(Ini.P_A_LOGIN)) {    connectionOK();    defaultsOK();    if (m_connectionOK)     m_okPressed=true;    return m_connectionOK;  }  return false;}  }
class C{  public final double doOperation() throws OperatorFailedException {  List<NodeRef> candidates=new ArrayList<NodeRef>();  for (int i=0; i < tree.getNodeCount(); i++) {    NodeRef node=tree.getNode(i);    if (tree.getNodeTrait(node,indicatorTrait) == 1.0)     candidates.add(node);  }  if (candidates.size() == 0)   throw new OperatorFailedException("No suitable bits!");  NodeRef node=candidates.get(MathUtils.nextInt(candidates.size()));  NodeRef newNode=node;  for (int i=0; i < k; i++) {    int randomNode=MathUtils.nextInt(3);    if (randomNode < 2) {      if (!tree.isExternal(newNode)) {        newNode=tree.getChild(newNode,randomNode);      }    } else     if (!tree.isRoot(newNode)) {      newNode=tree.getParent(newNode);    }  }  if (node == newNode)   throw new OperatorFailedException("Moving to same node!");  double nodeTrait, newTrait;  double nodeRate, newRate;  nodeTrait=tree.getNodeTrait(node,indicatorTrait);  newTrait=tree.getNodeTrait(newNode,indicatorTrait);  tree.setNodeTrait(node,indicatorTrait,newTrait);  tree.setNodeTrait(newNode,indicatorTrait,nodeTrait);  if (swapTrait2) {    if (trait2 != null) {      nodeTrait=tree.getNodeTrait(node,trait2);      newTrait=tree.getNodeTrait(newNode,trait2);      tree.setNodeTrait(node,trait2,newTrait);      tree.setNodeTrait(newNode,trait2,nodeTrait);    } else {      nodeRate=tree.getNodeRate(node);      newRate=tree.getNodeRate(newNode);      tree.setNodeRate(node,newRate);      tree.setNodeRate(newNode,nodeRate);    }  }  return 0.0;}  }
class C{  public void serializationPerformanceRoutine(ShoppingCartStateSerializer serializer,int sampleSize,int skuCount,int giftCount,int couponCount) throws Exception {  final List<ShoppingCart> carts=new ArrayList<ShoppingCart>(sampleSize);  final List<byte[]> cartsB=new ArrayList<byte[]>(sampleSize);  for (int i=0; i < sampleSize; i++) {    carts.add(createRandomCart(skuCount,giftCount,couponCount,i));  }  byte[] bytes=null;  final long startSerializing=System.currentTimeMillis();  for (  final ShoppingCart cart : carts) {    bytes=serializer.saveState(cart);    cartsB.add(bytes);  }  final long finishSerializing=System.currentTimeMillis();  System.out.println("Serializing " + sampleSize + " carts took ~"+ (finishSerializing - startSerializing)+ "ms "+ "(size of cart is ~"+ new BigDecimal(((double)bytes.length) / 1024).setScale(1,RoundingMode.HALF_UP).toPlainString()+ "Kb)");  ShoppingCart cart=null;  final long startDeserializing=System.currentTimeMillis();  for (  byte[] b : cartsB) {    cart=serializer.restoreState(b);  }  final long finishDeserializing=System.currentTimeMillis();  System.out.println("Deserializing " + sampleSize + " carts took ~"+ (finishDeserializing - startDeserializing)+ "ms");  assertNotNull(cart.getGuid());  long totalMs=(finishSerializing - startSerializing + finishDeserializing - startDeserializing);  System.out.println("Total to and back for " + sampleSize + " carts took ~"+ totalMs+ "ms (~"+ new BigDecimal(totalMs).divide(new BigDecimal(sampleSize),2,RoundingMode.HALF_UP).toPlainString()+ "ms per cart)");}  }
class C{  public void writeSample(MediaSample sample){  mRtpDummySender.incomingStarted();  VideoOrientation orientation=((VideoSample)sample).getVideoOrientation();  if (orientation != null) {    this.videoOrientation=orientation;  }  int[] decodedFrame=NativeH264Decoder.DecodeAndConvert(sample.getData(),videoOrientation.getOrientation().getValue(),decodedFrameDimensions);  if (NativeH264Decoder.getLastDecodeStatus() == 0) {    if ((mSurface != null) && (decodedFrame.length > 0)) {      if ((rgbFrame.getWidth() != decodedFrameDimensions[0]) || (rgbFrame.getHeight() != decodedFrameDimensions[1])) {        rgbFrame=Bitmap.createBitmap(decodedFrameDimensions[0],decodedFrameDimensions[1],Bitmap.Config.RGB_565);        mEventListener.onPlayerResized(decodedFrameDimensions[0],decodedFrameDimensions[1]);      }      rgbFrame.setPixels(decodedFrame,0,decodedFrameDimensions[0],0,0,decodedFrameDimensions[0],decodedFrameDimensions[1]);      mSurface.setImage(rgbFrame);    }  }}  }
class C{  public void save() throws IOException {  try {    final FileOutputStream fos=new FileOutputStream(new File(configfile.getFile()));    final Document doc=new DocumentImpl();    final Element collections=doc.createElement(Subcollection.TAG_COLLECTIONS);    final Iterator iterator=collectionMap.values().iterator();    while (iterator.hasNext()) {      final Subcollection subCol=(Subcollection)iterator.next();      final Element collection=doc.createElement(Subcollection.TAG_COLLECTION);      collections.appendChild(collection);      final Element name=doc.createElement(Subcollection.TAG_NAME);      name.setNodeValue(subCol.getName());      collection.appendChild(name);      final Element whiteList=doc.createElement(Subcollection.TAG_WHITELIST);      whiteList.setNodeValue(subCol.getWhiteListString());      collection.appendChild(whiteList);      final Element blackList=doc.createElement(Subcollection.TAG_BLACKLIST);      blackList.setNodeValue(subCol.getBlackListString());      collection.appendChild(blackList);    }    DomUtil.saveDom(fos,collections);    fos.flush();    fos.close();  } catch (  FileNotFoundException e) {    throw new IOException(e.toString());  }}  }
class C{  public ModifierSlot(final String enumName,final String typeName){  super(enumName);  this.typeName=typeName;}  }
class C{  public int nnz(){  return st.size();}  }
class C{  public InternalStatisticsDisabledException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public void tickSyncScheduler(){  this.syncScheduler.tick();}  }
class C{  @Override public boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof Set))   return false;  Collection c=(Collection)o;  if (c.size() != size())   return false;  try {    return containsAll(c);  } catch (  ClassCastException unused) {    return false;  }catch (  NullPointerException unused) {    return false;  }}  }
class C{  public ProviderNotFoundException(String name,Throwable cause){  super(MessageFormat.format("no provider for {0}",name),cause);}  }
class C{  public static boolean fileCopy(String src,String dest){  SuperUserCommand superUserCommand=new SuperUserCommand(new String[]{"rm -f '" + dest + "'","cat '" + src + "' >> '"+ dest+ "'","chmod 0777 '" + dest + "'","echo 'done'"});  superUserCommand.setHideStandardOutput(true);  superUserCommand.execute();  return superUserCommand.commandWasSuccessful();}  }
class C{  @Override public WeightVector train(SLProblem problem,SLParameters params) throws Exception {  WeightVector init=new WeightVector(10000);  return train(problem,params,init);}  }
class C{  private void messageDeliveredAction(Bundle data){  IMqttToken token=removeMqttToken(data);  if (token != null) {    if (callback != null) {      Status status=(Status)data.getSerializable(MqttServiceConstants.CALLBACK_STATUS);      if (status == Status.OK && token instanceof IMqttDeliveryToken) {        callback.deliveryComplete((IMqttDeliveryToken)token);      }    }  }}  }
class C{  private static void initFont(String fontName){  GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();  boolean needsLoading=true;  for (  String font : ge.getAvailableFontFamilyNames()) {    if (fontName.equals(font)) {      needsLoading=false;      break;    }  }  if (needsLoading) {    String resource="data/gui/" + fontName + ".ttf";    try {      ge.registerFont(Font.createFont(Font.TRUETYPE_FONT,DataLoader.getResourceAsStream(resource)));    } catch (    IOException|FontFormatException e) {      logger.error("Error loading custom font '" + resource + '"',e);    }  }}  }
class C{  public void printMissingDeps(List<Map<String,Set<String>>> result){  assert result.size() == 2;  @SuppressWarnings("unused") Map<String,Set<String>> deps=result.get(0);  Map<String,Set<String>> missing=result.get(1);  for (  String fqcn : missing.keySet()) {    mLog.info("%s",fqcn);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public int size(){  return size;}  }
class C{  public static boolean usingLocalGraphics(Context context){  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);  String sunshineArtPack=context.getString(R.string.pref_art_pack_sunshine);  return prefs.getString(context.getString(R.string.pref_art_pack_key),sunshineArtPack).equals(sunshineArtPack);}  }
class C{  private void findAllModifiedClasses(String name,PathImpl sourceDir,PathImpl classDir,String sourcePath,ArrayList<String> sources) throws IOException, ClassNotFoundException {  String[] list;  try {    list=sourceDir.list();  } catch (  IOException e) {    return;  }  for (int i=0; list != null && i < list.length; i++) {    if (list[i].startsWith("."))     continue;    if (_excludedDirectories.contains(list[i]))     continue;    PathImpl subSource=sourceDir.lookup(list[i]);    if (subSource.isDirectory()) {      findAllModifiedClasses(name + list[i] + "/",subSource,classDir.lookup(list[i]),sourcePath,sources);    } else     if (list[i].endsWith(_sourceExt)) {      int tail=list[i].length() - _sourceExt.length();      String prefix=list[i].substring(0,tail);      PathImpl subClass=classDir.lookup(prefix + ".class");      if (subClass.getLastModified() < subSource.getLastModified()) {        sources.add(name + list[i]);      }    }  }  if (!_requireSource)   return;  try {    list=classDir.list();  } catch (  IOException e) {    return;  }  for (int i=0; list != null && i < list.length; i++) {    if (list[i].startsWith("."))     continue;    if (_excludedDirectories.contains(list[i]))     continue;    PathImpl subClass=classDir.lookup(list[i]);    if (list[i].endsWith(".class")) {      String prefix=list[i].substring(0,list[i].length() - 6);      PathImpl subSource=sourceDir.lookup(prefix + _sourceExt);      if (!subSource.exists()) {        String tail=subSource.getTail();        boolean doRemove=true;        if (tail.indexOf('$') > 0) {          String subTail=tail.substring(0,tail.indexOf('$')) + _sourceExt;          PathImpl subJava=subSource.getParent().lookup(subTail);          if (subJava.exists())           doRemove=false;        }        if (doRemove) {          log.finer(L.l("removing obsolete class '{0}'.",subClass.getPath()));          subClass.remove();        }      }    }  }}  }
class C{  public static MethodTraceCoverageTestFitness createMethodTestFitness(String className,String method){  return new MethodTraceCoverageTestFitness(className,method.substring(method.lastIndexOf(".") + 1));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:50.439 -0500",hash_original_method="EB3E524D388CAA0001E918D3BE2E0050",hash_generated_method="F8904635ACB2C47E51F6597E693D3268") public static void start(){  if (!enabled) {    return;  }  if (samplingProfiler != null) {    Log.e(TAG,"SamplingProfilerIntegration already started at " + new Date(startMillis));    return;  }  ThreadGroup group=Thread.currentThread().getThreadGroup();  SamplingProfiler.ThreadSet threadSet=SamplingProfiler.newThreadGroupTheadSet(group);  samplingProfiler=new SamplingProfiler(samplingProfilerDepth,threadSet);  samplingProfiler.start(samplingProfilerMilliseconds);  startMillis=System.currentTimeMillis();}  }
class C{  @Inject public NewMyFileAction(SampleActionsResources resources,DialogFactory dialogFactory,CoreLocalizationConstant coreLocalizationConstant,EventBus eventBus,AppContext appContext,NotificationManager notificationManager){  super("Create my file","Create a new file",resources.icon(),dialogFactory,coreLocalizationConstant,eventBus,appContext,notificationManager);}  }
class C{  static String pathToCookiePath(String path){  if (path == null) {    return "/";  }  int lastSlash=path.lastIndexOf('/');  return path.substring(0,lastSlash + 1);}  }
class C{  public void error(SourceLocator srcLctr,String msg,Exception e) throws TransformerException {  error(srcLctr,msg,null,e);}  }
class C{  public void destroy(){  EventBus.getDefault().post(new ControllerDestroyedEvent(this));  EventBus.getDefault().unregister(this);}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (!(obj instanceof Path))   return false;  Path target=(Path)obj;  if ((separators & HASH_MASK) != (target.separators & HASH_MASK))   return false;  String[] targetSegments=target.segments;  int i=segments.length;  if (i != targetSegments.length)   return false;  while (--i >= 0)   if (!segments[i].equals(targetSegments[i]))   return false;  return device == target.device || (device != null && device.equals(target.device));}  }
class C{  public ActiveMQRAMessageListener(final MessageListener listener,final ActiveMQRAMessageConsumer consumer){  if (ActiveMQRAMessageListener.trace) {    ActiveMQRALogger.LOGGER.trace("constructor(" + listener + ", "+ consumer+ ")");  }  this.listener=listener;  this.consumer=consumer;}  }
class C{  @Override protected void sendDispositionHeader(final OutputStream out) throws IOException {  LOG.trace("enter sendDispositionHeader(OutputStream out)");  super.sendDispositionHeader(out);  final String filename=source.getFileName();  if (filename != null) {    out.write(FILE_NAME_BYTES);    out.write(QUOTE_BYTES);    out.write(EncodingUtil.getAsciiBytes(filename));    out.write(QUOTE_BYTES);  }}  }
class C{  void traceError(Throwable e){  if (trace) {    e.printStackTrace();  }}  }
class C{  public void statistics(Statistic stats){  log(Level.STATISTICS,stats.getKey() + ": " + stats.formatValue());}  }
class C{  public LineView(Element elem){  super(elem);}  }
class C{  public void enableVM(String hostname) throws IllegalStateException {  logger.info("Enabling VM " + hostname);  assignableVMs.enableVM(hostname);}  }
class C{  private List<StoragePool> returnMatchedVNXPoolsForGivenAutoTieringPolicy(List<StoragePool> pools,String auto_tier_policy_name){  if (AutoTieringPolicy.VnxFastPolicy.DEFAULT_NO_MOVEMENT.toString().equalsIgnoreCase(auto_tier_policy_name)) {    _logger.info("Auto Tiering {} Matcher Ended  {} :",auto_tier_policy_name,Joiner.on("\t").join(getNativeGuidFromPools(pools)));    return pools;  }  if (AutoTieringPolicy.VnxFastPolicy.DEFAULT_AUTOTIER.toString().equalsIgnoreCase(auto_tier_policy_name) || AutoTieringPolicy.VnxFastPolicy.DEFAULT_START_HIGH_THEN_AUTOTIER.toString().equalsIgnoreCase(auto_tier_policy_name)) {    return getMatchingPoolsForVNXAutoTier(pools,auto_tier_policy_name);  }  return runRankingAlgorithmToGetMatchedPoolsForHighAndLowTiers(auto_tier_policy_name,pools);}  }
class C{  final public boolean isInLayout(){  return mInLayout;}  }
class C{  public void traverse(int pos,int top) throws org.xml.sax.SAXException {  while (DTM.NULL != pos) {    startNode(pos);    int nextNode=m_dtm.getFirstChild(pos);    while (DTM.NULL == nextNode) {      endNode(pos);      if ((DTM.NULL != top) && top == pos)       break;      nextNode=m_dtm.getNextSibling(pos);      if (DTM.NULL == nextNode) {        pos=m_dtm.getParent(pos);        if ((DTM.NULL == pos) || ((DTM.NULL != top) && (top == pos))) {          nextNode=DTM.NULL;          break;        }      }    }    pos=nextNode;  }}  }
class C{  public LatLng toLatLng(){  double OSGB_F0=0.9996012717;  double N0=-100000.0;  double E0=400000.0;  double phi0=Math.toRadians(49.0);  double lambda0=Math.toRadians(-2.0);  double a=RefEll.AIRY_1830.getMaj();  double b=RefEll.AIRY_1830.getMin();  double eSquared=RefEll.AIRY_1830.getEcc();  double phi=0.0;  double lambda=0.0;  double E=this.easting;  double N=this.northing;  double n=(a - b) / (a + b);  double M=0.0;  double phiPrime=((N - N0) / (a * OSGB_F0)) + phi0;  do {    M=(b * OSGB_F0) * (((1 + n + ((5.0 / 4.0) * n * n)+ ((5.0 / 4.0) * n * n* n)) * (phiPrime - phi0)) - (((3 * n) + (3 * n * n) + ((21.0 / 8.0) * n * n* n)) * Math.sin(phiPrime - phi0) * Math.cos(phiPrime + phi0)) + ((((15.0 / 8.0) * n * n) + ((15.0 / 8.0) * n * n* n)) * Math.sin(2.0 * (phiPrime - phi0)) * Math.cos(2.0 * (phiPrime + phi0))) - (((35.0 / 24.0) * n * n* n) * Math.sin(3.0 * (phiPrime - phi0)) * Math.cos(3.0 * (phiPrime + phi0))));    phiPrime+=(N - N0 - M) / (a * OSGB_F0);  } while ((N - N0 - M) >= 0.001);  double v=a * OSGB_F0 * Math.pow(1.0 - eSquared * Util.sinSquared(phiPrime),-0.5);  double rho=a * OSGB_F0 * (1.0 - eSquared)* Math.pow(1.0 - eSquared * Util.sinSquared(phiPrime),-1.5);  double etaSquared=(v / rho) - 1.0;  double VII=Math.tan(phiPrime) / (2 * rho * v);  double VIII=(Math.tan(phiPrime) / (24.0 * rho * Math.pow(v,3.0))) * (5.0 + (3.0 * Util.tanSquared(phiPrime)) + etaSquared - (9.0 * Util.tanSquared(phiPrime) * etaSquared));  double IX=(Math.tan(phiPrime) / (720.0 * rho * Math.pow(v,5.0))) * (61.0 + (90.0 * Util.tanSquared(phiPrime)) + (45.0 * Util.tanSquared(phiPrime) * Util.tanSquared(phiPrime)));  double X=Util.sec(phiPrime) / v;  double XI=(Util.sec(phiPrime) / (6.0 * v * v* v)) * ((v / rho) + (2 * Util.tanSquared(phiPrime)));  double XII=(Util.sec(phiPrime) / (120.0 * Math.pow(v,5.0))) * (5.0 + (28.0 * Util.tanSquared(phiPrime)) + (24.0 * Util.tanSquared(phiPrime) * Util.tanSquared(phiPrime)));  double XIIA=(Util.sec(phiPrime) / (5040.0 * Math.pow(v,7.0))) * (61.0 + (662.0 * Util.tanSquared(phiPrime)) + (1320.0 * Util.tanSquared(phiPrime) * Util.tanSquared(phiPrime))+ (720.0 * Util.tanSquared(phiPrime) * Util.tanSquared(phiPrime)* Util.tanSquared(phiPrime)));  phi=phiPrime - (VII * Math.pow(E - E0,2.0)) + (VIII * Math.pow(E - E0,4.0)) - (IX * Math.pow(E - E0,6.0));  lambda=lambda0 + (X * (E - E0)) - (XI * Math.pow(E - E0,3.0)) + (XII * Math.pow(E - E0,5.0)) - (XIIA * Math.pow(E - E0,7.0));  return new LatLng(Math.toDegrees(phi),Math.toDegrees(lambda));}  }
class C{  public static String toSVG(Object... objects){  List<Object> flattened=new ArrayList<>();  for (  Object o : objects) {    if (o instanceof Polygon[]) {      flattened.addAll(Arrays.asList((Polygon[])o));    } else {      flattened.add(o);    }  }  double minLat=Double.POSITIVE_INFINITY;  double maxLat=Double.NEGATIVE_INFINITY;  double minLon=Double.POSITIVE_INFINITY;  double maxLon=Double.NEGATIVE_INFINITY;  for (  Object o : flattened) {    final Rectangle r;    if (o instanceof Polygon) {      r=Rectangle.fromPolygon(new Polygon[]{(Polygon)o});      minLat=Math.min(minLat,r.minLat);      maxLat=Math.max(maxLat,r.maxLat);      minLon=Math.min(minLon,r.minLon);      maxLon=Math.max(maxLon,r.maxLon);    }  }  if (Double.isFinite(minLat) == false || Double.isFinite(maxLat) == false || Double.isFinite(minLon) == false || Double.isFinite(maxLon) == false) {    throw new IllegalArgumentException("you must pass at least one polygon");  }  double xpadding=(maxLon - minLon) / 64;  double ypadding=(maxLat - minLat) / 64;  double pointX=xpadding * 0.1;  double pointY=ypadding * 0.1;  StringBuilder sb=new StringBuilder();  sb.append("<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"640\" width=\"480\" viewBox=\"");  sb.append(minLon - xpadding).append(" ").append(90 - maxLat - ypadding).append(" ").append(maxLon - minLon + (2 * xpadding)).append(" ").append(maxLat - minLat + (2 * ypadding));  sb.append("\">\n");  for (  Object o : flattened) {    if (o instanceof double[]) {      double point[]=(double[])o;      sb.append("<!-- point: ");      sb.append(point[0] + "," + point[1]);      sb.append(" -->\n");    } else {      sb.append("<!-- " + o.getClass().getSimpleName() + ": \n");      sb.append(o.toString());      sb.append("\n-->\n");    }    final Polygon gon;    final String style;    final String opacity;    if (o instanceof Rectangle) {      gon=boxPolygon((Rectangle)o);      style="fill:lightskyblue;stroke:black;stroke-width:0.2%;stroke-dasharray:0.5%,1%;";      opacity="0.3";    } else     if (o instanceof double[]) {      double point[]=(double[])o;      gon=boxPolygon(new Rectangle(Math.max(-90,point[0] - pointY),Math.min(90,point[0] + pointY),Math.max(-180,point[1] - pointX),Math.min(180,point[1] + pointX)));      style="fill:red;stroke:red;stroke-width:0.1%;";      opacity="0.7";    } else {      gon=(Polygon)o;      style="fill:lawngreen;stroke:black;stroke-width:0.3%;";      opacity="0.5";    }    double polyLats[]=gon.getPolyLats();    double polyLons[]=gon.getPolyLons();    sb.append("<polygon fill-opacity=\"" + opacity + "\" points=\"");    for (int i=0; i < polyLats.length; i++) {      if (i > 0) {        sb.append(" ");      }      sb.append(polyLons[i]).append(",").append(90 - polyLats[i]);    }    sb.append("\" style=\"" + style + "\"/>\n");    for (    Polygon hole : gon.getHoles()) {      double holeLats[]=hole.getPolyLats();      double holeLons[]=hole.getPolyLons();      sb.append("<polygon points=\"");      for (int i=0; i < holeLats.length; i++) {        if (i > 0) {          sb.append(" ");        }        sb.append(holeLons[i]).append(",").append(90 - holeLats[i]);      }      sb.append("\" style=\"fill:lightgray\"/>\n");    }  }  sb.append("</svg>\n");  return sb.toString();}  }
class C{  @SuppressWarnings("deprecation") public void rewardMoney(Player player,int amount){  if (plugin.setUpEconomy(true)) {    try {      plugin.getEconomy().depositPlayer(player,amount);    } catch (    NoSuchMethodError e) {      plugin.getEconomy().depositPlayer(player.getName(),amount);    }    if (amount > 1)     player.sendMessage(plugin.getChatHeader() + ChatColor.translateAlternateColorCodes('&',plugin.getPluginLang().getString("money-reward-received","You received: AMOUNT !").replace("AMOUNT",amount + " " + plugin.getEconomy().currencyNamePlural()))); else     player.sendMessage(plugin.getChatHeader() + ChatColor.translateAlternateColorCodes('&',plugin.getPluginLang().getString("money-reward-received","You received: AMOUNT !").replace("AMOUNT",amount + " " + plugin.getEconomy().currencyNameSingular())));  }}  }
class C{  public boolean isSmallestMinY(final PlanetModel planetModel){  if (minY == null)   return false;  return minY - planetModel.getMinimumYValue() < Vector.MINIMUM_RESOLUTION;}  }
class C{  List<String> linesToStatements(List<String> lines){  List<String> statements=new ArrayList<>();  Delimiter nonStandardDelimiter=null;  CqlStatementBuilder cqlStatementBuilder=new CqlStatementBuilder();  for (int lineNumber=1; lineNumber <= lines.size(); lineNumber++) {    String line=lines.get(lineNumber - 1);    if (cqlStatementBuilder.isEmpty()) {      if (!StringUtils.hasText(line)) {        continue;      }      Delimiter newDelimiter=cqlStatementBuilder.extractNewDelimiterFromLine(line);      if (newDelimiter != null) {        nonStandardDelimiter=newDelimiter;        continue;      }      cqlStatementBuilder.setLineNumber(lineNumber);      if (nonStandardDelimiter != null) {        cqlStatementBuilder.setDelimiter(nonStandardDelimiter);      }    }    cqlStatementBuilder.addLine(line);    if (cqlStatementBuilder.isTerminated()) {      String cqlStatement=cqlStatementBuilder.getCqlStatement();      statements.add(cqlStatement);      LOG.debug("Found statement: " + cqlStatement);      cqlStatementBuilder=new CqlStatementBuilder();    } else     if (cqlStatementBuilder.canDiscard()) {      cqlStatementBuilder=new CqlStatementBuilder();    }  }  if (!cqlStatementBuilder.isEmpty()) {    statements.add(cqlStatementBuilder.getCqlStatement());  }  return statements;}  }
class C{  public NSDate(String textRepresentation) throws ParseException {  date=parseDateString(textRepresentation);}  }
class C{  public boolean textIsPresent(String courseWareErrorText,String text){  if (courseWareErrorText.equals(text)) {    return true;  } else {    return false;  }}  }
class C{  public IssueMatcher equals(URI expectedValue){  return addPropertyMatcher(URIPropertyMatcher.Mode.Equals,expectedValue);}  }
class C{  boolean fitsIntoLong(boolean isPositive,boolean ignoreNegativeZero){  while (count > 0 && digits[count - 1] == '0') {    --count;  }  if (count == 0) {    return isPositive || ignoreNegativeZero;  }  if (decimalAt < count || decimalAt > MAX_COUNT) {    return false;  }  if (decimalAt < MAX_COUNT)   return true;  for (int i=0; i < count; ++i) {    char dig=digits[i], max=LONG_MIN_REP[i];    if (dig > max)     return false;    if (dig < max)     return true;  }  if (count < decimalAt)   return true;  return !isPositive;}  }
class C{  public LineIterator(final Reader reader) throws IllegalArgumentException {  if (reader == null) {    throw new IllegalArgumentException("Reader must not be null");  }  if (reader instanceof BufferedReader) {    bufferedReader=(BufferedReader)reader;  } else {    bufferedReader=new BufferedReader(reader);  }}  }
class C{  private Patterns(){}  }
class C{  public static double pdf(double x,double location,double shape){  final double v=(x - location) / shape;  return 1. / (Math.PI * shape * (1 + v * v));}  }
class C{  @Deprecated public String templateName(){  return template == null ? null : template.getScript();}  }
class C{  public final int allocateNodeNumber(){  return numberOfNodes++;}  }
class C{  public ActivityMap(ActivityMap parent){  m_map=new HashMap();  m_parent=parent;}  }
class C{  void doVolunteerForPrimary(){  if (!beginVolunteering()) {    return;  }  boolean dlsDestroyed=false;  try {    if (logger.isDebugEnabled()) {      logger.debug("Begin volunteerForPrimary for {}",BucketAdvisor.this);    }    DistributedMemberLock thePrimaryLock=null;    while (continueVolunteering()) {      BucketAdvisor parentBA=parentAdvisor;      BucketAdvisor.this.activePrimaryMoveLock.lock();      try {        boolean acquiredLock=false;        getAdvisee().getCancelCriterion().checkCancelInProgress(null);        if (parentBA != null) {          if (parentBA.isPrimary() && !isPrimary()) {            acquiredLock=acquiredPrimaryLock();          } else {            return;          }        } else {          if (startingBucketAdvisor == null) {            assignStartingBucketAdvisor();          }          if (startingBucketAdvisor != null) {            Assert.assertHoldsLock(this,false);synchronized (startingBucketAdvisor) {              if (startingBucketAdvisor.isPrimary() && !isPrimary()) {                acquiredLock=acquiredPrimaryLock();              } else {                return;              }            }          } else {            if (thePrimaryLock == null) {              thePrimaryLock=getPrimaryLock(true);              if (thePrimaryLock == null) {                return;              }            }            Assert.assertTrue(!thePrimaryLock.holdsLock());            if (isAggressive()) {              acquiredLock=thePrimaryLock.tryLock(Long.MAX_VALUE,TimeUnit.MILLISECONDS);            } else {              acquiredLock=thePrimaryLock.tryLock();            }            if (acquiredLock) {              acquiredLock=acquiredPrimaryLock();            }          }        }        if (acquiredLock) {          acquirePrimaryRecursivelyForColocated();          acquirePrimaryForRestOfTheBucket();          return;        }      }  finally {        BucketAdvisor.this.activePrimaryMoveLock.unlock();      }      if (!continueVolunteering()) {        return;      }      waitIfNoPrimaryMemberFound();    }  } catch (  LockServiceDestroyedException e) {    dlsDestroyed=true;    handleException(e,true);  }catch (  RegionDestroyedException e) {    handleException(e,false);  }catch (  CancelException e) {    handleException(e,false);  }catch (  InterruptedException e) {    Thread.currentThread().interrupt();    handleException(e,false);  } finally {    if (logger.isDebugEnabled()) {      logger.debug("Exit volunteerForPrimary for {}; dlsDestroyed={}",BucketAdvisor.this,dlsDestroyed);    }    endVolunteering();  }}  }
class C{  public static byte[] decodeHex(String hexString){  int length=hexString.length();  if ((length & 0x01) != 0) {    throw new IllegalArgumentException("Odd number of characters.");  }  boolean badHex=false;  byte[] out=new byte[length >> 1];  for (int i=0, j=0; j < length; i++) {    int c1=hexString.charAt(j++);    if (c1 > 'f') {      badHex=true;      break;    }    final byte d1=DIGITS[c1];    if (d1 == -1) {      badHex=true;      break;    }    int c2=hexString.charAt(j++);    if (c2 > 'f') {      badHex=true;      break;    }    final byte d2=DIGITS[c2];    if (d2 == -1) {      badHex=true;      break;    }    out[i]=(byte)(d1 << 4 | d2);  }  if (badHex) {    throw new IllegalArgumentException("Invalid hexadecimal digit: " + hexString);  }  return out;}  }
class C{  public boolean isSortingProperties(){  return sortingProperties;}  }
class C{  private void startQuest(){  setTimings();  getPhases().add(new InactivePhase(timings));  getPhases().add(new InvasionPhase(timings));  getPhases().add(new AwaitingPhase(timings));  setNewNotificationTime(getDefaultPhaseClass().getMinTimeOut(),getDefaultPhaseClass().getMaxTimeOut());}  }
class C{  public String toleranceTipText(){  return "tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol";}  }
class C{  protected List<MemoryPoolMXBean> loadRawDatas(Map<Object,Object> userData){  return ManagementFactory.getMemoryPoolMXBeans();}  }
class C{  public static Schema load(final JSONObject schemaJson,final SchemaClient httpClient){  SchemaLoader loader=builder().schemaJson(schemaJson).httpClient(httpClient).build();  return loader.load().build();}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot,boolean isNeedResultMsg){  return execCommand(new String[]{command},isRoot,isNeedResultMsg);}  }
class C{  public OMColor(int a,int r,int g,int b){  super(r,g,b);  argb=(a << 24) | ((r & 0xFF) << 16) | ((g & 0xFF) << 8)| ((b & 0xFF) << 0);}  }
class C{  public boolean merge(final Frame<? extends V> frame,final boolean[] access){  boolean changes=false;  for (int i=0; i < locals; ++i) {    if (!access[i] && !values[i].equals(frame.values[i])) {      values[i]=frame.values[i];      changes=true;    }  }  return changes;}  }
class C{  public static void assign(int[] n1,int n2[]){  int idx=n1.length - 1;  int i;  for (i=n2.length - 1; i >= 0; i--) {    n1[idx--]=n2[i];  }  while (idx > 0) {    n1[idx--]=0;  }}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>Map<K,V> mapOf(Object... keyValPair){  if (keyValPair.length % 2 != 0)   throw new IllegalArgumentException("Keys and values must be in pairs");  Map<K,V> map=new HashMap<K,V>(keyValPair.length / 2);  for (int i=0; i < keyValPair.length; i+=2) {    map.put((K)keyValPair[i],(V)keyValPair[i + 1]);  }  return map;}  }
class C{  @Deprecated @Override public boolean commit() throws InstantiationError {  if (mEditor != null) {    return mEditor.commit();  }  throw new InstantiationError("\n ======================================== \nError : " + "Do not call " + tag + "'s `commit()`."+ "\n This method is not supported directly."+ " \n ======================================== \n");}  }
class C{  private static double createSubscore(double value,double bestValue,double variance,double bias,boolean ignoreSign){  return Math.min(MathUtil.normalPDFNormalized((ignoreSign ? value - bestValue : Math.max((value - bestValue),0)) / bestValue,variance,0) * bias,bias);}  }
class C{  public void append(StringBuffer buffer,String fieldName,boolean[] array,Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (array == null) {    appendNullText(buffer,fieldName);  } else   if (isFullDetail(fullDetail)) {    appendDetail(buffer,fieldName,array);  } else {    appendSummary(buffer,fieldName,array);  }  appendFieldEnd(buffer,fieldName);}  }
class C{  @CanIgnoreReturnValue @Override public boolean put(@Nullable K key,@Nullable V value){  addNode(key,value,null);  return true;}  }
class C{  public void ReInit(SimpleCharStream stream,int lexState){  ReInit(stream);  SwitchTo(lexState);}  }
class C{  public static RPairList create(int size){  return create(size,null);}  }
class C{  public WebgraphConfiguration(final File configurationFile,boolean lazy) throws IOException {  super(configurationFile);  this.lazy=lazy;  if (this.isEmpty())   return;  Iterator<Entry> it=this.entryIterator();  for (SchemaConfiguration.Entry etr=it.next(); it.hasNext(); etr=it.next()) {    try {      WebgraphSchema f=WebgraphSchema.valueOf(etr.key());      f.setSolrFieldName(etr.getValue());    } catch (    final IllegalArgumentException e) {      ConcurrentLog.fine("SolrWebgraphWriter","solr schema file " + configurationFile.getAbsolutePath() + " defines unknown attribute '"+ etr.toString()+ "'");      it.remove();    }  }  for (  SchemaDeclaration field : WebgraphSchema.values()) {    if (this.get(field.name()) == null) {      ConcurrentLog.warn("SolrWebgraphWriter"," solr schema file " + configurationFile.getAbsolutePath() + " is missing declaration for '"+ field.name()+ "'");    }  }}  }
class C{  public void testPingPongShortSegments(){  PseudoTcpTestPingPong test=new PseudoTcpTestPingPong();  test.setLocalMtu(1500);  test.setRemoteMtu(1500);  test.setOptAckDelay(5000);  test.setBytesPerSend(50);  test.doTestPingPong(100,5);}  }
class C{  protected void messageLoop(){  try {    byte[] buffer=new byte[40000];    while (isConnected()) {      int numRead=socket.getInputStream().read(buffer);      if (numRead > 0) {        if (LOG.isDebugEnabled()) {          LOG.debug("TimesealSocketMessageProducer " + "Read " + numRead + " bytes.");        }        String text=isTimesealOn ? handleTimeseal(new String(buffer,0,numRead)) : new String(buffer,0,numRead);        if (StringUtils.isNotBlank(text)) {          inboundMessageBuffer.append(IcsUtils.cleanupMessage(text));          listener.messageArrived(inboundMessageBuffer);        }      } else {        if (LOG.isDebugEnabled()) {          LOG.debug("TimesealSocketMessageProducer  " + "Read 0 bytes disconnecting.");        }        close();        break;      }    }    LOG.debug("TimesealSocketMessageProducer " + "Not connected disconnecting.");  } catch (  Throwable t) {    if (t instanceof IOException) {      LOG.debug("TimesealSocketMessageProducer " + "Connector " + "IOException occured in messageLoop (These are common when disconnecting and ignorable)",t);    } else {      listener.onError("TimesealSocketMessageProducer " + "Connector Error in DaemonRun Thwoable",t);    }    close();  } finally {    LOG.debug("TimesealSocketMessageProducer  Leaving readInput");  }}  }
class C{  public void useDropdownVisibleText(String locator,String option){  Select select=new Select(findElement(locator));  select.selectByVisibleText(option);}  }
class C{  public HdfsFileIO(URI uri,TungstenProperties props){  this.uri=uri;  hdfsConfig=new Configuration();  for (  String key : props.keyNames()) {    String value=props.get(key);    hdfsConfig.set(key,value);  }  try {    this.hdfs=FileSystem.get(uri,hdfsConfig);  } catch (  IOException e) {    throw new FileIOException("Unable to access HDFS: uri=" + uri + " message="+ e.getMessage(),e);  }}  }
class C{  public Constant(long value){  this(Long.class,value);}  }
class C{  public static ConversionMethod toConversionMethod(XmlConversion xmlConversion){  if (isEmpty(xmlConversion.name)) {    xmlConversion.name="undefinedName";    throw new XmlConversionNameException("it's mandatory define a name");  }  String name=xmlConversion.name;  String conversionType=xmlConversion.type;  boolean avoidSet=xmlConversion.avoidSet;  Type type=conversionType == null ? JMapConversion.Type.STATIC : conversionType.equalsIgnoreCase("STATIC") ? Type.STATIC : conversionType.equalsIgnoreCase("DYNAMIC") ? Type.DYNAMIC : null;  if (type == null)   throw new XmlConversionTypeException("wrong type defined, only STATIC and DYNAMIC options are permitted");  String[] from=xmlConversion.from == null ? new String[]{ALL} : trim(xmlConversion.from.split(","));  String[] to=xmlConversion.to == null ? new String[]{ALL} : trim(xmlConversion.to.split(","));  String content=xmlConversion.content.trim();  if (!content.contains(source) && content.contains(destination))   throw new XmlConversionParameterException("the use of the destination isn't permitted without the use of the source");  ParameterNumber number=content.contains(source) ? content.contains(destination) ? TWO : ONE : ZERO;  return new ConversionMethod(name,from,to,type,number,content,avoidSet);}  }
class C{  public final int pop(){  m_firstFree--;  int n=m_map[m_firstFree];  m_map[m_firstFree]=DTM.NULL;  return n;}  }
class C{  public static void main(String[] args) throws AdeException {  final AdeExtRequestType requestType=AdeExtRequestType.CONTROL_DB;  System.err.println("Running Ade: " + requestType);  final AdeExtMessageHandler messageHandler=new AdeExtMessageHandler();  final ControlDB controlDB=new ControlDB();  try {    controlDB.run(args);  } catch (  AdeUsageException e) {    messageHandler.handleUserException(e);  }catch (  AdeInternalException e) {    messageHandler.handleAdeInternalException(e);  }catch (  AdeException e) {    messageHandler.handleAdeException(e);  }catch (  Throwable e) {    messageHandler.handleUnexpectedException(e);  } finally {    controlDB.quietCleanup();  }}  }
class C{  private int[] locate(int number){  return new int[]{number >> SHIFT,number & MOD};}  }
class C{  public Container add(String label){  return add(new Label(label));}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public static void clear(){  PM.clear();  ConfigBean config=getConfig();  if (config == null || !Env.APP_SETTINGS.get(Settings.INITIAL_PER_MIN_CALC_EXCL_TIME).equals(config.getInitialPerMinCalcExclTime())) {    try {      Files.deleteIfExists(PATH_CONFIG_BEAN);    } catch (    final IOException ie) {      Env.LOGGER.error("Failed to delete replay processor cache config: " + PATH_CONFIG_BEAN,ie);    }    config=new ConfigBean();    config.setInitialPerMinCalcExclTime(Env.APP_SETTINGS.get(Settings.INITIAL_PER_MIN_CALC_EXCL_TIME));    setConfig(config);  }}  }
class C{  public void runRaptorScheduled(TIntIntMap initialStops,int departureTime){  long startClockTime=System.currentTimeMillis();  max_time=departureTime + req.maxTripDurationMinutes * 60;  round=0;  patternsTouchedThisRound.clear();  stopsTouchedThisSearch.clear();  stopsTouchedThisRound.clear();  TIntIntIterator iterator=initialStops.iterator();  while (iterator.hasNext()) {    iterator.advance();    int stopIndex=iterator.key();    int time=iterator.value() + departureTime;    RaptorState state=scheduleState.get(0);    if (time < state.bestTimes[stopIndex]) {      state.bestTimes[stopIndex]=time;      state.transferStop[stopIndex]=-1;      markPatternsForStop(stopIndex);    }  }  advanceToNextRound();  while (doOneRound(scheduleState.get(round - 1),scheduleState.get(round),false,null) && round < req.maxRides) {    advanceToNextRound();  }  scheduledRounds=Math.max(round + 1,scheduledRounds);  while (round < scheduleState.size() - 1) {    scheduleState.get(round + 1).min(scheduleState.get(round));    round++;  }  scheduledSearchTime+=System.currentTimeMillis() - startClockTime;}  }
class C{  public static boolean isSameLength(byte[] array1,byte[] array2){  if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {    return false;  }  return true;}  }
class C{  public ArrayBackedByteBuffer(final byte[] buf,final int ofs,final int pos,final int siz){  this.buf=buf;  this.ofs=ofs;  this.pos=pos;  this.siz=siz;}  }
class C{  private void startInvalidGrid(String name){  try {    startGrid(name);    assert false : "Exception should have been thrown.";  } catch (  Exception e) {    info("Caught expected exception: " + e);  }}  }
class C{  static float interpolate(final float x,final float xmin,final float xmax,final float ymin,final float ymax){  return ((x - xmin) * (ymax - ymin) / (xmax - xmin)) + ymin;}  }
class C{  void pointToCellRounded(int x,int y,int[] result){  pointToCellExact(x + (mCellWidth / 2),y + (mCellHeight / 2),result);}  }
class C{  public static String findPath(Class<?> context) throws IllegalStateException {  if (context == null) {    context=DynamicJarPathFinder.class;  }  String rawName=context.getName();  String classFileName;{    int idx=rawName.lastIndexOf('.');    classFileName=(idx == -1 ? rawName : rawName.substring(idx + 1)) + ".class";  }  String uri=context.getResource(classFileName).toString();  if (uri.startsWith("file:")) {    LOG.warn("This class has been loaded from a directory and not from a jar file: {}",uri);    String fileName=null;    try {      fileName=URLDecoder.decode(uri.substring("file:".length(),uri.length()),Charset.defaultCharset().name());      return new File(fileName).getAbsolutePath();    } catch (    UnsupportedEncodingException e) {      throw new InternalError("default charset doesn't exist. Your VM is borked.");    }  }  if (!uri.startsWith("jar:file:")) {    int idx=uri.indexOf(':');    String protocol=idx == -1 ? "(unknown)" : uri.substring(0,idx);    throw new IllegalStateException("This class has been loaded remotely via the " + protocol + " protocol. Only loading from a jar on the local file system is supported.");  }  int idx=uri.indexOf('!');  if (idx == -1) {    throw new IllegalStateException("You appear to have loaded this class from a local jar file, but I can't make sense of the URL!");  }  try {    String fileName=URLDecoder.decode(uri.substring("jar:file:".length(),idx),Charset.defaultCharset().name());    return new File(fileName).getAbsolutePath();  } catch (  UnsupportedEncodingException e) {    throw new InternalError("default charset doesn't exist. Your VM is borked.");  }}  }
class C{  public ISourceViewer publicGetSourceViewer(){  return this.getSourceViewer();}  }
class C{  protected double computeRandomProjection(int rpIndex,int classIndex,Instance instance){  double sum=0.0;  for (int i=0; i < instance.numValues(); i++) {    int index=instance.index(i);    if (index != classIndex) {      double value=instance.valueSparse(i);      if (!Utils.isMissingValue(value)) {        sum+=m_rmatrix[rpIndex][index] * value;      }    }  }  return sum;}  }
class C{  protected static void addStreamsOptions(ContextMenu m,int numStreams,boolean join){  String count="";  String s="";  if (numStreams > 1) {    s="s";    count=String.valueOf(numStreams) + " ";  }  String streamSubmenu="Twitch Stream" + s;  String miscSubmenu="Miscellaneous";  m.setSubMenuIcon(streamSubmenu,ICON_SPACING);  m.addSubItem("stream","Normal",streamSubmenu);  m.addSubItem("streamPopout","Popout",streamSubmenu);  m.addSeparator(streamSubmenu);  m.addSubItem("streamsMultitwitchtv","Multitwitch.tv",streamSubmenu);  m.addSubItem("streamsSpeedruntv","Speedrun.tv",streamSubmenu);  m.addSubItem("streamsKadgar","Kadgar.net",streamSubmenu);  addLivestreamerOptions(m);  if (join) {    m.addSeparator();    m.addItem("join","Join " + count + "channel"+ s);    m.addSeparator();    m.addSubItem("hostchannel","Host Channel",miscSubmenu);    m.addSeparator(miscSubmenu);    m.addSubItem("copy","Copy Stream Name",miscSubmenu);    m.addSeparator(miscSubmenu);    m.addSubItem("follow","Follow Channel",miscSubmenu);    m.addSubItem("unfollow","Unfollow Channel",miscSubmenu);  }}  }
class C{  private MessagingUseBehavior(String publicMessage,String privateMessage){  this.publicMessage=publicMessage;  this.privateMessage=privateMessage;  if ((publicMessage == null) && (privateMessage == null)) {    LOGGER.warn("MessagingUseBehavior with no messages");  }}  }
class C{  @Override public void addMouseListener(MouseListener l){}  }
class C{  public LocatorDUnitTest(){  super();}  }
class C{  public Bundler putParcelableArray(String key,Parcelable[] value){  bundle.putParcelableArray(key,value);  return this;}  }
class C{  public boolean isMtuMismatch(){  return mtuMismatch;}  }
class C{  public RawByteCache(File cacheDir,long maxCacheBytes,long maxObjectBytes,int maxOpenFiles){  this.cacheDir=cacheDir;  this.maxCacheBytes=maxCacheBytes;  this.maxObjectBytes=maxObjectBytes;  this.maxOpenFiles=maxOpenFiles;}  }
class C{  protected final void CAST_Encipher(int L0,int R0,int result[]){  int Lp=L0;  int Rp=R0;  int Li=L0, Ri=R0;  for (int i=1; i <= _rounds; i++) {    Lp=Li;    Rp=Ri;    Li=Rp;switch (i) {case 1:case 4:case 7:case 10:case 13:case 16:      Ri=Lp ^ F1(Rp,_Km[i],_Kr[i]);    break;case 2:case 5:case 8:case 11:case 14:  Ri=Lp ^ F2(Rp,_Km[i],_Kr[i]);break;case 3:case 6:case 9:case 12:case 15:Ri=Lp ^ F3(Rp,_Km[i],_Kr[i]);break;}}result[0]=Ri;result[1]=Li;return;}  }
class C{  public final float determinant(){  float det;  det=m00 * (m11 * m22 * m33 + m12 * m23 * m31 + m13 * m21 * m32 - m13 * m22 * m31 - m11 * m23 * m32 - m12 * m21 * m33);  det-=m01 * (m10 * m22 * m33 + m12 * m23 * m30 + m13 * m20 * m32 - m13 * m22 * m30 - m10 * m23 * m32 - m12 * m20 * m33);  det+=m02 * (m10 * m21 * m33 + m11 * m23 * m30 + m13 * m20 * m31 - m13 * m21 * m30 - m10 * m23 * m31 - m11 * m20 * m33);  det-=m03 * (m10 * m21 * m32 + m11 * m22 * m30 + m12 * m20 * m31 - m12 * m21 * m30 - m10 * m22 * m31 - m11 * m20 * m32);  return (det);}  }
class C{  public int addBarPlot(String name,Color color,double[][] XY){  return ((Plot2DCanvas)plotCanvas).addBarPlot(name,color,XY);}  }
class C{  public static double L_RankLoss(int y[],int r[]){  int L=y.length;  ArrayList<Integer> tI=new ArrayList<Integer>();  ArrayList<Integer> fI=new ArrayList<Integer>();  for (int j=0; j < L; j++) {    if (y[j] == 1) {      tI.add(j);    } else {      fI.add(j);    }  }  if (!tI.isEmpty() && !fI.isEmpty()) {    int c=0;    for (    int k : tI) {      for (      int l : fI) {        if (position(k,r) < position(l,r)) {          c++;        }      }    }    return (double)c / (double)(tI.size() * fI.size());  } else {    return 0.0;  }}  }
class C{  public Headers responseHeaders(){  return mResponseHeaders;}  }
class C{  @Override protected void applyEditorTo(WeaveConfiguration runnerConfiguration) throws ConfigurationException {  runnerConfiguration.setWeaveOutput(this.configurationPanel.getOutput().getText());  runnerConfiguration.setWeaveFile(this.configurationPanel.getWeaveFile().getText());  runnerConfiguration.setMuleHome(this.configurationPanel.getWeaveHome().getText());  final Module selectedModule=this.configurationPanel.getModuleCombo().getSelectedModule();  if (selectedModule != null) {    runnerConfiguration.setModule(selectedModule);  }  runnerConfiguration.setWeaveInputs(this.configurationPanel.getWeaveInputs().getItems());}  }
class C{  @Override protected void internalAdd(final TemplatePersistenceData data){  if (!data.isCustom()) {    final String id=getNewIdFromId(data.getId());    final TemplatePersistenceData d2=new TemplatePersistenceData(data.getTemplate(),true,id);    super.internalAdd(d2);  }}  }
class C{  @Override public void run2(){  try {    boolean warningLogged=false;    while (this.allBucketsRecoveredFromDisk.getCount() > 0) {      int sleepMillis=SLEEP_PERIOD;      if (!warningLogged) {        sleepMillis=SLEEP_PERIOD / 2;      }      Thread.sleep(sleepMillis);      if (this.membershipChanged) {        this.membershipChanged=false;        for (        RegionStatus region : regions) {          region.logWaitingForMembers();        }        warningLogged=true;      }    }  } catch (  InterruptedException e) {    logger.error(e.getMessage(),e);  } finally {    removeListeners();    for (    RegionStatus region : regions) {      if (!region.loggedDoneMessage) {        region.logDoneMessage();      }    }  }}  }
class C{  public Vector4d negate(){  x=-x;  y=-y;  z=-z;  w=-w;  return this;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void initializeLiveAttributes(){  externalResourcesRequired=createLiveAnimatedBoolean(null,SVG_EXTERNAL_RESOURCES_REQUIRED_ATTRIBUTE,false);}  }
class C{  private String replaceReservedChars(boolean isTableResponseType,String str){  if (str == null) {    return EMPTY_COLUMN_VALUE;  }  return (!isTableResponseType) ? str : str.replace(TAB,WHITESPACE).replace(NEWLINE,WHITESPACE);}  }
class C{  public double metersToPixels(){  double screenCenterLat=screenTopLeft.latitude - screenSize.latitude / 2;  double metersToLon=1 / (Util.LON_TO_METERS_AT_EQUATOR * Math.cos(screenCenterLat / 180 * Math.PI));  return screenSize.longitude / windowWidth * metersToLon;}  }
class C{  public static boolean isAssignable(Type lhsType,Type rhsType){  Assert.notNull(lhsType,"Left-hand side type must not be null");  Assert.notNull(rhsType,"Right-hand side type must not be null");  if (lhsType.equals(rhsType) || lhsType.equals(Object.class)) {    return true;  }  if (lhsType instanceof Class<?>) {    Class<?> lhsClass=(Class<?>)lhsType;    if (rhsType instanceof Class<?>) {      return ClassUtils.isAssignable(lhsClass,(Class<?>)rhsType);    }    if (rhsType instanceof ParameterizedType) {      Type rhsRaw=((ParameterizedType)rhsType).getRawType();      if (rhsRaw instanceof Class<?>) {        return ClassUtils.isAssignable(lhsClass,(Class<?>)rhsRaw);      }    } else     if (lhsClass.isArray() && rhsType instanceof GenericArrayType) {      Type rhsComponent=((GenericArrayType)rhsType).getGenericComponentType();      return isAssignable(lhsClass.getComponentType(),rhsComponent);    }  }  if (lhsType instanceof ParameterizedType) {    if (rhsType instanceof Class<?>) {      Type lhsRaw=((ParameterizedType)lhsType).getRawType();      if (lhsRaw instanceof Class<?>) {        return ClassUtils.isAssignable((Class<?>)lhsRaw,(Class<?>)rhsType);      }    } else     if (rhsType instanceof ParameterizedType) {      return isAssignable((ParameterizedType)lhsType,(ParameterizedType)rhsType);    }  }  if (lhsType instanceof GenericArrayType) {    Type lhsComponent=((GenericArrayType)lhsType).getGenericComponentType();    if (rhsType instanceof Class<?>) {      Class<?> rhsClass=(Class<?>)rhsType;      if (rhsClass.isArray()) {        return isAssignable(lhsComponent,rhsClass.getComponentType());      }    } else     if (rhsType instanceof GenericArrayType) {      Type rhsComponent=((GenericArrayType)rhsType).getGenericComponentType();      return isAssignable(lhsComponent,rhsComponent);    }  }  if (lhsType instanceof WildcardType) {    return isAssignable((WildcardType)lhsType,rhsType);  }  return false;}  }
class C{  private Algorithm instantiateAlgorithm(AlgorithmProvider provider,String name,Properties properties,Problem problem){  try {    return provider.getAlgorithm(name,properties,problem);  } catch (  ServiceConfigurationError e) {    System.err.println(e.getMessage());  }  return null;}  }
class C{  public void adapt(){  double[] zmin=new double[numberOfObjectives];  double[] zmax=new double[numberOfObjectives];  Arrays.fill(zmin,Double.POSITIVE_INFINITY);  Arrays.fill(zmax,Double.NEGATIVE_INFINITY);  for (  Solution solution : this) {    for (int i=0; i < numberOfObjectives; i++) {      zmin[i]=Math.min(zmin[i],solution.getObjective(i));      zmax[i]=Math.max(zmax[i],solution.getObjective(i));    }  }  weights.clear();  for (  double[] weight : originalWeights) {    double[] newWeight=weight.clone();    for (int i=0; i < numberOfObjectives; i++) {      newWeight[i]*=Math.max(0.01,zmax[i] - zmin[i]);    }    weights.add(Vector.normalize(newWeight));  }  minAngles=new double[weights.size()];  for (int i=0; i < weights.size(); i++) {    minAngles[i]=smallestAngleBetweenWeights(i);  }}  }
class C{  public static String stringFilterStrict(String searchText){  return searchText.replaceAll("[^ a-zA-Z0-9\\u4e00-\\u9fa5]","");}  }
class C{  public void loadByteData(int[] data,int[] dims){  this.dims=dims;  byte[] byteData=new byte[data.length];  for (int i=0; i < data.length; i++) {    byteData[i]=(byte)data[i];  }  this.data=ByteBuffer.wrap(byteData);}  }
class C{  protected boolean arePrimeAnnosEqual(final AnnotatedTypeMirror type1,final AnnotatedTypeMirror type2){  if (currentTop != null) {    return AnnotationUtils.areSame(type1.getAnnotationInHierarchy(currentTop),type2.getAnnotationInHierarchy(currentTop));  }  return AnnotationUtils.areSame(type1.getAnnotations(),type2.getAnnotations());}  }
class C{  protected void writeImageDesc() throws IOException {  out.write(0x2c);  writeShort(0);  writeShort(0);  writeShort(width);  writeShort(height);  if (firstFrame) {    out.write(0);  } else {    out.write(0x80 | 0 | 0| 0| palSize);  }}  }
class C{  public StreamResult(String systemId){  this.systemId=systemId;}  }
class C{  private void updatePhysicalInterval(Register p,BasicInterval i){  CompoundInterval physInterval=regAllocState.getInterval(p);  if (physInterval == null) {    regAllocState.setInterval(p,new CompoundInterval(i,p));  } else {    CompoundInterval ci=new CompoundInterval(i,p);    if (VM.VerifyAssertions)     VM._assert(!ci.intersects(physInterval));    physInterval.addAll(ci);  }}  }
class C{  @Override public String toString(){  StringBuffer result=new StringBuffer();  for (int i=0; i < data.length; i++) {    result.append((i == 0 ? "" : ",") + data[i]);  }  return result.toString();}  }
class C{  public BoolLiteralItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private static void initGameFolder(){  String defaultFolder=System.getProperty("user.home") + STENDHAL_FOLDER;  String unixLikes="AIX|Digital Unix|FreeBSD|HP UX|Irix|Linux|Mac OS X|Solaris";  String system=System.getProperty("os.name");  if (system.matches(unixLikes)) {    File f=new File(defaultFolder + "user.dat");    if (!f.exists()) {      gameFolder=System.getProperty("user.home") + separator + ".config"+ separator+ STENDHAL_FOLDER;      return;    }  }  gameFolder=defaultFolder;}  }
class C{  public void addCMap(short platformID,short platformSpecificID,CMap cMap){  CmapSubtable key=new CmapSubtable(platformID,platformSpecificID);  subtables.put(key,cMap);}  }
class C{  public static void incrementalWeightedUpdate(DoubleArrayList data,DoubleArrayList weights,int from,int to,double[] inOut){  int dataSize=data.size();  checkRangeFromTo(from,to,dataSize);  if (dataSize != weights.size())   throw new IllegalArgumentException("from=" + from + ", to="+ to+ ", data.size()="+ dataSize+ ", weights.size()="+ weights.size());  double sum=inOut[0];  double sumOfSquares=inOut[1];  double[] elements=data.elements();  double[] w=weights.elements();  for (int i=from - 1; ++i <= to; ) {    double element=elements[i];    double weight=w[i];    double prod=element * weight;    sum+=prod;    sumOfSquares+=element * prod;  }  inOut[0]=sum;  inOut[1]=sumOfSquares;}  }
class C{  public static UpdateSettingsRequest updateSettingsRequest(String... indices){  return new UpdateSettingsRequest(indices);}  }
class C{  public SQLTransientException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public static boolean isCompareOperator(BinaryOperator bOp){  return (bOp.fn instanceof LessThan || bOp.fn instanceof LessThanEquals || bOp.fn instanceof GreaterThan|| bOp.fn instanceof GreaterThanEquals|| bOp.fn instanceof Equals|| bOp.fn instanceof NotEquals);}  }
class C{  @Override protected EClass eStaticClass(){  return DatatypePackage.Literals.ENUM_LITERAL_PROPERTY_ATTRIBUTE;}  }
class C{  @Override public void contextCreated(ELContextEvent ece){  FacesContext context=FacesContext.getCurrentInstance();  if (context == null) {    return;  }  ELContext source=(ELContext)ece.getSource();  source.putContext(FacesContext.class,context);  ExpressionFactory exFactory=ELUtils.getDefaultExpressionFactory(context);  if (null != exFactory) {    source.putContext(ExpressionFactory.class,exFactory);  }  ELContextListener[] listeners=context.getApplication().getELContextListeners();  if (listeners == null) {    return;  }  for (int i=0; i < listeners.length; ++i) {    ELContextListener elcl=listeners[i];    elcl.contextCreated(new ELContextEvent(source));  }}  }
class C{  public static void launchActivity(Activity context,Class<? extends Activity> activity,boolean closeCurrentActivity,Map<String,String> params){  Intent intent=new Intent(context,activity);  if (params != null) {    Bundle bundle=new Bundle();    for (    Entry<String,String> param : params.entrySet()) {      bundle.putString(param.getKey(),param.getValue());    }    intent.putExtras(bundle);  }  context.startActivity(intent);  if (closeCurrentActivity) {    context.finish();  }}  }
class C{  static XPath rewriteChildToExpression(ElemTemplateElement varElem) throws TransformerException {  ElemTemplateElement t=varElem.getFirstChildElem();  if (null != t && null == t.getNextSiblingElem()) {    int etype=t.getXSLToken();    if (Constants.ELEMNAME_VALUEOF == etype) {      ElemValueOf valueof=(ElemValueOf)t;      if (valueof.getDisableOutputEscaping() == false && valueof.getDOMBackPointer() == null) {        varElem.m_firstChild=null;        return new XPath(new XRTreeFragSelectWrapper(valueof.getSelect().getExpression()));      }    } else     if (Constants.ELEMNAME_TEXTLITERALRESULT == etype) {      ElemTextLiteral lit=(ElemTextLiteral)t;      if (lit.getDisableOutputEscaping() == false && lit.getDOMBackPointer() == null) {        String str=lit.getNodeValue();        XString xstr=new XString(str);        varElem.m_firstChild=null;        return new XPath(new XRTreeFragSelectWrapper(xstr));      }    }  }  return null;}  }
class C{  public final void testParsesFuzz(){  StringBuilder testCases=new StringBuilder();  String randomJs="";  boolean failed=false;  for (int testCaseCount=0; testCaseCount < MAX_NUMBER_OF_TESTS; testCaseCount++) {    try {      randomJs=fudgeroonify();      js(fromString(randomJs));    } catch (    ParseException e) {    }catch (    Throwable e) {      failed=true;      testCases.append(generateTestCase(randomJs,testCaseCount,e.getMessage()));    }  }  System.err.print(testCases.toString());  if (failed) {    fail();  }}  }
class C{  public SVMExamples(int size,double b){  this.train_size=size;  this.b=b;  atts=new double[train_size][];  index=new int[train_size][];  ys=new double[train_size];  alphas=new double[train_size];  ids=new String[size];}  }
class C{  public static KeyInfo generateKey(String tokenId) throws Exception {  LOG.trace("Generating key for token '{}'",tokenId);  KeyInfo keyInfo=execute(new GenerateKey(tokenId));  LOG.trace("Received response with keyId '{}' and public key '{}'",keyInfo.getId(),keyInfo.getPublicKey());  return keyInfo;}  }
class C{  private void badIndex(int index) throws ArrayIndexOutOfBoundsException {  String msg="Attempt to modify attribute at illegal index: " + index;  throw new ArrayIndexOutOfBoundsException(msg);}  }
class C{  @Override public void load(Element element,Object o){  log.error("Unexpected call of load(Element, Object)");}  }
class C{  public V put(String text,V value){  return put(text.toCharArray(),value);}  }
class C{  public static boolean isLandscape(Context context){  return context.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE;}  }
class C{  public boolean queueSurfaceDataReplacing(Component c,Runnable r){  return false;}  }
class C{  private static String parseContent(XmlPullParser parser) throws XmlPullParserException, IOException {  int parserDepth=parser.getDepth();  return parseContentDepth(parser,parserDepth);}  }
class C{  public final void deleteTables(SQL[] tables) throws AdeException {  if (tables == null) {    return;  }  for (  SQL table : tables) {    TableGeneralUtils.deleteTable(table.toString());  }}  }
class C{  public long length(){  return getBestPath().length();}  }
class C{  public static void waitForCondition(String condition){  BValue cond=getCond(condition);synchronized (cond) {    if (!cond.v) {      try {        cond.wait();      } catch (      InterruptedException e) {      }    }  }}  }
class C{  @Override public float estimateFutureCost(Rule rule,DPState state,Sentence sentence){  return 0.0f;}  }
class C{  public static <T>T[] subarray(T[] buffer,int offset,int length){  Class<T> componentType=(Class<T>)buffer.getClass().getComponentType();  return subarray(buffer,offset,length,componentType);}  }
class C{  @Override public boolean job(){  if (currentQuery == null && querystack != null && querystack.size() > 0) {    currentQuery=querystack.iterator().next();    querystack.remove(currentQuery);    initPeerList();  }  if (currentQuery != null && !currentQuery.isEmpty()) {    if (currentTargets != null && !currentTargets.isEmpty()) {      while (currentTargets.size() > 0) {        String peerhash=currentTargets.iterator().next();        currentTargets.remove(peerhash);        Seed seed=Switchboard.getSwitchboard().peers.getConnected(peerhash);        if (seed != null) {          processSingleTarget(seed);          return true;        }      }    }    currentQuery=null;  }  checkBookmarkDB();  ConcurrentLog.fine(AutoSearch.class.getName(),"nothing to do");  return this.querystack.size() > 0;}  }
class C{  public Iterator<AnalysisPass> passIterator(){  return passList.iterator();}  }
class C{  private static InetAddress[] lookupHostByName(String host) throws UnknownHostException {  BlockGuard.getThreadPolicy().onNetwork();  Object cachedResult=addressCache.get(host);  if (cachedResult != null) {    if (cachedResult instanceof InetAddress[]) {      return (InetAddress[])cachedResult;    } else {      throw new UnknownHostException((String)cachedResult);    }  }  try {    StructAddrinfo hints=new StructAddrinfo();    hints.ai_flags=AI_ADDRCONFIG;    hints.ai_family=AF_UNSPEC;    hints.ai_socktype=SOCK_STREAM;    InetAddress[] addresses=Libcore.os.getaddrinfo(host,hints);    for (    InetAddress address : addresses) {      address.hostName=host;    }    addressCache.put(host,addresses);    return addresses;  } catch (  GaiException gaiException) {    if (gaiException.getCause() instanceof ErrnoException) {      if (((ErrnoException)gaiException.getCause()).errno == EACCES) {        throw new SecurityException("Permission denied (missing INTERNET permission?)",gaiException);      }    }    String detailMessage="Unable to resolve host \"" + host + "\": "+ Libcore.os.gai_strerror(gaiException.error);    addressCache.putUnknownHost(host,detailMessage);    throw gaiException.rethrowAsUnknownHostException(detailMessage);  }}  }
class C{  public static void sort(AbstractList array){  Object temp;  int j, n=array.size();  for (j=n / 2; j > 0; j--) {    adjust(array,j,n);  }  for (j=n - 1; j > 0; j--) {    temp=array.get(0);    array.set(0,array.get(j));    array.set(j,temp);    adjust(array,1,j);  }}  }
class C{  private void initLabelsAndModels(ArrayList<GeneratorInterface> generators,ClassLabel[] labels,Model[] models,Pattern reassign){  int existingclusters=0;  if (reassign != null) {    for (int i=0; i < labels.length; i++) {      final GeneratorInterface curclus=generators.get(i);      if (!reassign.matcher(curclus.getName()).find()) {        labels[i]=new SimpleClassLabel(curclus.getName());        models[i]=curclus.makeModel();        ++existingclusters;      }    }    if (existingclusters == 0) {      LOG.warning("All clusters matched the 'reassign' pattern. Ignoring.");    }    if (existingclusters == 1) {      for (int i=0; i < labels.length; i++) {        if (labels[i] != null) {          Arrays.fill(labels,labels[i]);          Arrays.fill(models,models[i]);          break;        }      }    }    if (existingclusters == labels.length) {      LOG.warning("No clusters matched the 'reassign' pattern.");    }  }  if (existingclusters == 0) {    for (int i=0; i < labels.length; i++) {      final GeneratorInterface curclus=generators.get(i);      labels[i]=new SimpleClassLabel(curclus.getName());      models[i]=curclus.makeModel();    }  }}  }
class C{  public Directory<T> addFolder(Directory<T> subDirectory){  return folder.put(subDirectory.getName(),subDirectory);}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TGETTER;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void init_actions(){  action_obj=new CUP$actions();}  }
class C{  public boolean newMessage(List<Object> cmds){  if (!isBlocked && failoverHandler != null) {    if (unprocessedCount() != 0) {      processPendingMessages();    }    failoverHandler.accept(cmds);    return true;  } else {synchronized (this) {      notProcessedTransactions.add(cmds);    }    return false;  }}  }
class C{  public CNodeChooserTable(final ZyGraph graph,final CGraphSearchField searchField){  m_graph=Preconditions.checkNotNull(graph,"IE01773: Graph argument can't be null.");  m_searchField=Preconditions.checkNotNull(searchField,"IE01774: Search field argument can not be null");  m_model=new CNodeChooserModel(graph);  setModel(m_model);  final TableRowSorter<CNodeChooserModel> tableSorter=new TableRowSorter<CNodeChooserModel>(m_model);  setRowSorter(tableSorter);  tableSorter.setComparator(CNodeChooserModel.COLUMN_IN,new IntComparator());  tableSorter.setComparator(CNodeChooserModel.COLUMN_OUT,new IntComparator());  tableSorter.setComparator(CNodeChooserModel.COLUMN_ADDRESS,new LexicalComparator());  tableSorter.setComparator(CNodeChooserModel.COLUMN_COLOR,new IntComparator());  final CNodeChooserRenderer renderer=new CNodeChooserRenderer(this,m_graph,m_searchField.getGraphSearcher());  setRowSelectionAllowed(true);  setColumnSelectionAllowed(false);  setCellSelectionEnabled(false);  setSelectionMode(ListSelectionModel.SINGLE_SELECTION);  getTableHeader().setReorderingAllowed(false);  getColumnModel().getColumn(0).setCellRenderer(renderer);  getColumnModel().getColumn(1).setCellRenderer(renderer);  getColumnModel().getColumn(2).setCellRenderer(renderer);  getColumnModel().getColumn(3).setCellRenderer(renderer);  getColumnModel().getColumn(0).setPreferredWidth(35);  getColumnModel().getColumn(1).setPreferredWidth(35);  getColumnModel().getColumn(3).setPreferredWidth(50);  getColumnModel().getColumn(0).setMaxWidth(50);  getColumnModel().getColumn(1).setMaxWidth(50);  getColumnModel().getColumn(3).setMaxWidth(50);  m_searchField.addListener(m_searchFieldListener);  m_mouselistener=new CNodeChooserMouseListener(this,graph);  addMouseListener(m_mouselistener);  m_graph.addListener((INaviGraphListener)m_viewListener);  m_graph.addListener((IZyGraphSelectionListener)m_viewListener);  initializeViewListeners(m_graph.getRawView());}  }
class C{  protected JsonDeserializer<Object> _findRootDeserializer(DeserializationConfig cfg,JavaType valueType) throws JsonMappingException {  if (valueType == null) {    throw new JsonMappingException("No value type configured for ObjectReader");  }  JsonDeserializer<Object> deser=_rootDeserializers.get(valueType);  if (deser != null) {    return deser;  }  deser=_provider.findTypedValueDeserializer(cfg,valueType,null);  if (deser == null) {    throw new JsonMappingException("Can not find a deserializer for type " + valueType);  }  _rootDeserializers.put(valueType,deser);  return deser;}  }
class C{  public void write(BufferedImage bimg,OutputStream os) throws IOException {  ImageWriter writer=null;  ImageOutputStream ios=null;  try {    writer=lookupImageWriterForFormat(imageFormat);    ios=ImageIO.createImageOutputStream(os);    writer.setOutput(ios);    ImageWriteParam iwparam=getImageWriteParameters(writer);    writer.write(null,new IIOImage(bimg,null,null),iwparam);  }  finally {    if (ios != null) {      try {        ios.flush();      } catch (      IOException e) {      }      try {        ios.close();      } catch (      IOException e) {      }    }    if (writer != null) {      writer.dispose();    }  }}  }
class C{  static void createNetwork2(final MutableScenario scenario){  Network network=(Network)scenario.getNetwork();  network.setCapacityPeriod(Time.parseTime("01:00:00"));  Node node0=NetworkUtils.createAndAddNode(network,Id.create("0",Node.class),new Coord((double)0,(double)10));  Node node1=NetworkUtils.createAndAddNode(network,Id.create("1",Node.class),new Coord((double)0,(double)100));  Node node2=NetworkUtils.createAndAddNode(network,Id.create("2",Node.class),new Coord((double)100,(double)100));  Node node3=NetworkUtils.createAndAddNode(network,Id.create("3",Node.class),new Coord((double)150,(double)150));  Node node4=NetworkUtils.createAndAddNode(network,Id.create("4",Node.class),new Coord((double)200,(double)100));  Node node5=NetworkUtils.createAndAddNode(network,Id.create("5",Node.class),new Coord((double)300,(double)100));  final double y5=-100;  Node node6=NetworkUtils.createAndAddNode(network,Id.create("6",Node.class),new Coord((double)300,y5));  final double y4=-100;  Node node7=NetworkUtils.createAndAddNode(network,Id.create("7",Node.class),new Coord((double)200,y4));  final double y3=-150;  Node node8=NetworkUtils.createAndAddNode(network,Id.create("8",Node.class),new Coord((double)150,y3));  final double y2=-100;  Node node9=NetworkUtils.createAndAddNode(network,Id.create("9",Node.class),new Coord((double)100,y2));  final double y1=-100;  Node node10=NetworkUtils.createAndAddNode(network,Id.create("10",Node.class),new Coord((double)0,y1));  final double y=-10;  Node node11=NetworkUtils.createAndAddNode(network,Id.create("11",Node.class),new Coord((double)0,y));  final Node fromNode=node0;  final Node toNode=node1;  NetworkUtils.createAndAddLink(network,Id.create("1",Link.class),fromNode,toNode,(double)100,(double)5,(double)100,(double)1);  final Node fromNode1=node1;  final Node toNode1=node2;  NetworkUtils.createAndAddLink(network,Id.create("2",Link.class),fromNode1,toNode1,(double)100,(double)5,(double)100,(double)1);  final Node fromNode2=node2;  final Node toNode2=node3;  NetworkUtils.createAndAddLink(network,Id.create("3",Link.class),fromNode2,toNode2,(double)100,(double)5,(double)100,(double)1);  final Node fromNode3=node3;  final Node toNode3=node4;  NetworkUtils.createAndAddLink(network,Id.create("4",Link.class),fromNode3,toNode3,(double)100,(double)5,(double)100,(double)1);  final Node fromNode4=node2;  final Node toNode4=node4;  NetworkUtils.createAndAddLink(network,Id.create("5",Link.class),fromNode4,toNode4,(double)100,(double)5,(double)100,(double)1);  final Node fromNode5=node4;  final Node toNode5=node5;  NetworkUtils.createAndAddLink(network,Id.create("6",Link.class),fromNode5,toNode5,(double)100,(double)5,(double)100,(double)1);  final Node fromNode6=node5;  final Node toNode6=node6;  NetworkUtils.createAndAddLink(network,Id.create("7",Link.class),fromNode6,toNode6,(double)100,(double)5,(double)100,(double)1);  final Node fromNode7=node6;  final Node toNode7=node7;  NetworkUtils.createAndAddLink(network,Id.create("8",Link.class),fromNode7,toNode7,(double)100,(double)5,(double)100,(double)1);  final Node fromNode8=node7;  final Node toNode8=node8;  NetworkUtils.createAndAddLink(network,Id.create("9",Link.class),fromNode8,toNode8,(double)100,(double)5,(double)100,(double)1);  final Node fromNode9=node8;  final Node toNode9=node9;  NetworkUtils.createAndAddLink(network,Id.create("10",Link.class),fromNode9,toNode9,(double)100,(double)5,(double)100,(double)1);  final Node fromNode10=node7;  final Node toNode10=node9;  NetworkUtils.createAndAddLink(network,Id.create("11",Link.class),fromNode10,toNode10,(double)100,(double)5,(double)100,(double)1);  final Node fromNode11=node9;  final Node toNode11=node10;  NetworkUtils.createAndAddLink(network,Id.create("12",Link.class),fromNode11,toNode11,(double)100,(double)5,(double)100,(double)1);  final Node fromNode12=node10;  final Node toNode12=node11;  NetworkUtils.createAndAddLink(network,Id.create("13",Link.class),fromNode12,toNode12,(double)100,(double)5,(double)100,(double)1);}  }
class C{  @Override public void onStart(){  if (!didStartApp) {    didStartApp=true;    InstallOptions pendingInstall=this.codePushPackageManager.getPendingInstall();    if (pendingInstall == null) {      handleUnconfirmedInstall(false);    }    handleAppStart();    if (pendingInstall != null && (InstallMode.ON_NEXT_RESUME.equals(pendingInstall.installMode) || InstallMode.ON_NEXT_RESTART.equals(pendingInstall.installMode))) {      this.markUpdate();      this.codePushPackageManager.clearPendingInstall();    }  } else {    InstallOptions pendingInstall=this.codePushPackageManager.getPendingInstall();    long durationInBackground=(new Date().getTime() - lastPausedTimeMs) / 1000;    if (pendingInstall != null && InstallMode.ON_NEXT_RESUME.equals(pendingInstall.installMode) && durationInBackground >= pendingInstall.minimumBackgroundDuration) {      handleAppStart();      this.markUpdate();      this.codePushPackageManager.clearPendingInstall();    }  }}  }
class C{  public static List<HostAddress> resolveXMPPServerDomain(String domain){  return resolveDomain(domain,'s');}  }
class C{  public void xtestTransactionRollbackOnSessionClose() throws Exception {  Destination destination=createDestination(getClass().getName());  Connection connection=createConnection();  connection.setClientID(idGen.generateId());  connection.start();  Session consumerSession=connection.createSession(true,Session.CLIENT_ACKNOWLEDGE);  MessageConsumer consumer=null;  if (topic) {    consumer=consumerSession.createDurableSubscriber((Topic)destination,"TESTRED");  } else {    consumer=consumerSession.createConsumer(destination);  }  Session producerSession=connection.createSession(true,Session.AUTO_ACKNOWLEDGE);  MessageProducer producer=producerSession.createProducer(destination);  producer.setDeliveryMode(deliveryMode);  TextMessage sentMsg=producerSession.createTextMessage();  sentMsg.setText("msg1");  producer.send(sentMsg);  producerSession.commit();  Message recMsg=consumer.receive(RECEIVE_TIMEOUT);  assertFalse(recMsg.getJMSRedelivered());  consumerSession.close();  consumerSession=connection.createSession(true,Session.CLIENT_ACKNOWLEDGE);  consumer=consumerSession.createConsumer(destination);  recMsg=consumer.receive(RECEIVE_TIMEOUT);  consumerSession.commit();  assertTrue(recMsg.equals(sentMsg));  connection.close();}  }
class C{  public SnmpNull(String dummy){  this();}  }
class C{  public SQLTransientException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  public static void main(String[] args){  try {    PluginManager.loadPlugins();    if (args.length == 0) {      try {        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());      } catch (      Exception e) {      }      new OpenStegoUI().setVisible(true);    } else {      OpenStegoCmd.execute(args);    }  } catch (  OpenStegoException osEx) {    if (osEx.getErrorCode() == OpenStegoException.UNHANDLED_EXCEPTION) {      osEx.printStackTrace();    } else {      System.err.println(osEx.getMessage());    }  }catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public AmqpReceiver createDurableReceiver(String address,String subscriptionName) throws Exception {  return createDurableReceiver(address,subscriptionName,null,false);}  }
class C{  public static RuntimeException codeBug(String msg) throws RuntimeException {  msg="FAILED ASSERTION: " + msg;  RuntimeException ex=new IllegalStateException(msg);  ex.printStackTrace(System.err);  throw ex;}  }
class C{  @Override protected void register(DeployerFactory deployerFactory){  deployerFactory.registerDeployer("tomcat4x",DeployerType.INSTALLED,TomcatCopyingInstalledLocalDeployer.class);  deployerFactory.registerDeployer("tomcat4x",DeployerType.REMOTE,Tomcat4xRemoteDeployer.class);  deployerFactory.registerDeployer("tomcat5x",DeployerType.INSTALLED,TomcatCopyingInstalledLocalDeployer.class);  deployerFactory.registerDeployer("tomcat5x",DeployerType.REMOTE,Tomcat5xRemoteDeployer.class);  deployerFactory.registerDeployer("tomcat5x",DeployerType.EMBEDDED,TomcatEmbeddedLocalDeployer.class);  deployerFactory.registerDeployer("tomcat6x",DeployerType.INSTALLED,TomcatCopyingInstalledLocalDeployer.class);  deployerFactory.registerDeployer("tomcat6x",DeployerType.REMOTE,Tomcat6xRemoteDeployer.class);  deployerFactory.registerDeployer("tomcat6x",DeployerType.EMBEDDED,TomcatEmbeddedLocalDeployer.class);  deployerFactory.registerDeployer("tomcat7x",DeployerType.INSTALLED,TomcatCopyingInstalledLocalDeployer.class);  deployerFactory.registerDeployer("tomcat7x",DeployerType.REMOTE,Tomcat7xRemoteDeployer.class);  deployerFactory.registerDeployer("tomcat7x",DeployerType.EMBEDDED,TomcatEmbeddedLocalDeployer.class);  deployerFactory.registerDeployer("tomcat8x",DeployerType.INSTALLED,TomcatCopyingInstalledLocalDeployer.class);  deployerFactory.registerDeployer("tomcat8x",DeployerType.REMOTE,Tomcat8xRemoteDeployer.class);  deployerFactory.registerDeployer("tomcat8x",DeployerType.EMBEDDED,TomcatEmbeddedLocalDeployer.class);  deployerFactory.registerDeployer("tomcat9x",DeployerType.INSTALLED,TomcatCopyingInstalledLocalDeployer.class);  deployerFactory.registerDeployer("tomcat9x",DeployerType.REMOTE,Tomcat9xRemoteDeployer.class);  deployerFactory.registerDeployer("tomcat9x",DeployerType.EMBEDDED,TomcatEmbeddedLocalDeployer.class);}  }
class C{  protected void putInQueue(Object val) throws InterruptedException {  if (val instanceof HAEventWrapper && ((HAEventWrapper)val).getClientUpdateMessage() == null) {    if (logger.isDebugEnabled()) {      logger.debug("HARegionQueue.putGIIDataInRegion(): key={} was removed at sender side, so not putting it into the ha queue.",((HAEventWrapper)val).getKeyToConflate());    }  } else {    this.put(val);  }}  }
class C{  protected EventException createEventException(short code,String key,Object[] args){  try {    AbstractDocument doc=(AbstractDocument)node.getOwnerDocument();    return new EventException(code,doc.formatMessage(key,args));  } catch (  Exception e) {    return new EventException(code,key);  }}  }
class C{  private void fetchKey(){  if (this.flowLevel == 0) {    if (!this.allowSimpleKey) {      throw new ScannerException(null,null,"mapping keys are not allowed here",reader.getMark());    }    if (addIndent(this.reader.getColumn())) {      Mark mark=reader.getMark();      this.tokens.add(new BlockMappingStartToken(mark,mark));    }  }  this.allowSimpleKey=this.flowLevel == 0;  removePossibleSimpleKey();  Mark startMark=reader.getMark();  reader.forward();  Mark endMark=reader.getMark();  Token token=new KeyToken(startMark,endMark);  this.tokens.add(token);}  }
class C{  @Deprecated protected ActionListener createKeyboardEndListener(){  return new KeyboardEndHandler();}  }
class C{  public FisheyeTreeFilter(String group){  this(group,1);}  }
class C{  public BufferedSageFile(SageFileSource sageFileSource,int readBufferSize,int writeBufferSize){  this.sageFileSource=sageFileSource;  realFilePosition=sageFileSource.position();  readonly=sageFileSource.isReadOnly();  readBuffer=new byte[readBufferSize];  readWrap=null;  if (readonly) {    writeBuffer=empty;  } else {    if (writeBufferSize == 0)     writeBufferSize=8192;    int remainder=writeBufferSize % 8192;    if (remainder != 0)     writeBufferSize=writeBufferSize + 8192 - remainder;    writeOptimizerLimit=writeBufferSize / 2;    writeBuffer=new byte[writeBufferSize];    writeWrap=null;  }}  }
class C{  public static boolean isVplexDistributedVolume(UnManagedVolume unManagedVolume){  if (isVplexVolume(unManagedVolume)) {    String locality=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.VPLEX_LOCALITY.toString(),unManagedVolume.getVolumeInformation());    if (VPlexApiConstants.DISTRIBUTED_VIRTUAL_VOLUME.equalsIgnoreCase(locality)) {      return true;    }  }  return false;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  registry.build(KEY);}  }
class C{  private boolean filterStaticColumns(OneRowChange orc) throws ReplicatorException {  boolean transformed=false;  if (orc.getAction() != ActionType.UPDATE)   return transformed;  if (tungstenSchema != null && orc.getSchemaName().compareToIgnoreCase(tungstenSchema) == 0) {    if (logger.isDebugEnabled())     logger.debug("Ignoring " + tungstenSchema + " schema");    return transformed;  }  ArrayList<ColumnSpec> keys=orc.getKeySpec();  ArrayList<ColumnSpec> columns=orc.getColumnSpec();  ArrayList<ArrayList<ColumnVal>> keyValues=orc.getKeyValues();  ArrayList<ArrayList<ColumnVal>> columnValues=orc.getColumnValues();  ArrayList<ColumnSpec> columnsToRemove=new ArrayList<ColumnSpec>();  if (columns.size() != keys.size() && logger.isDebugEnabled()) {    logger.debug("Column and key counts are different. Checking only columns matching present keys.");  }  for (int k=0; k < keys.size(); k++) {    ColumnSpec keySpec=keys.get(k);    boolean valueExists=false;    int valIndex;    ColumnSpec colSpec=null;    for (valIndex=0; valIndex < columns.size(); valIndex++) {      colSpec=columns.get(valIndex);      if (colSpec.getIndex() == keySpec.getIndex()) {        valueExists=true;        break;      }    }    if (!valueExists)     continue;    boolean columnStatic=true;    for (int row=0; row < keyValues.size(); row++) {      ColumnVal keyValue=keyValues.get(row).get(k);      ColumnVal colValue=columnValues.get(row).get(valIndex);      if (!(keySpec.getType() == colSpec.getType() && keySpec.getIndex() == colSpec.getIndex() && ((keyValue.getValue() == null && colValue.getValue() == null) || (keyValue.getValue() != null && keyValue.getValue().equals(colValue.getValue()))))) {        columnStatic=false;      } else {        logger.debug("Col " + colSpec.getIndex() + " @ Row "+ row+ " is static: "+ keyValue.getValue()+ " = "+ colValue.getValue());      }    }    if (columnStatic)     columnsToRemove.add(colSpec);  }  if (columnsToRemove.size() == columns.size()) {    if (logger.isDebugEnabled())     logger.debug("All " + columnsToRemove.size() + " of "+ columns.size()+ " columns where static - leaving them as is to have a valid transaction");    return transformed;  }  for (Iterator<ColumnSpec> iterator=columnsToRemove.iterator(); iterator.hasNext(); ) {    ColumnSpec columnToRemoveSpec=iterator.next();    int idx=columns.indexOf(columnToRemoveSpec);    for (Iterator<ArrayList<ColumnVal>> iterator2=columnValues.iterator(); iterator2.hasNext(); ) {      ArrayList<ColumnVal> values=iterator2.next();      values.remove(idx);    }    columns.remove(idx);    logger.debug("Col " + columnToRemoveSpec.getIndex() + " removed");    transformed=true;  }  return transformed;}  }
class C{  public static List<Type> types(List<? extends JCTree> trees){  ListBuffer<Type> ts=new ListBuffer<Type>();  for (List<? extends JCTree> l=trees; l.nonEmpty(); l=l.tail)   ts.append(l.head.type);  return ts.toList();}  }
class C{  public void service(Mail mail){  counter++;  log(counter + "");  mail.setState(Mail.GHOST);}  }
class C{  public static boolean isPostJDK7(String bytecodeVersion){  return JDK7.equals(bytecodeVersion) || JDK8.equals(bytecodeVersion);}  }
class C{  @Override protected void registerOperator(Process process){  super.registerOperator(process);  for (  ExecutionUnit subprocess : subprocesses) {    for (    Operator child : subprocess.getOperators()) {      child.registerOperator(process);    }  }}  }
class C{  public ListQueuesResult listQueues(String queueNamePrefix) throws AmazonServiceException, AmazonClientException {  return amazonSqsToBeExtended.listQueues(queueNamePrefix);}  }
class C{  public void exitLock(long id){  lock(id).unlock();}  }
class C{  public WriteMultipleRegistersResponse(int reference,int wordCount){  super();  setFunctionCode(Modbus.WRITE_MULTIPLE_REGISTERS);  setDataLength(4);  this.reference=reference;  this.wordCount=wordCount;}  }
class C{  public IJavaElement createLambdaTypeElement(LambdaExpression expression,ICompilationUnit unit,HashSet existingElements,HashMap knownScopes){  return createElement(expression.scope,expression.sourceStart(),unit,existingElements,knownScopes).getParent();}  }
class C{  @Override public boolean onLongClick(View v){  TextInfo parsed=(TextInfo)v.getTag();  String text=parsed.getClipboardPrefix() + parsed.getString();  Util.copyToClipboard(v.getContext(),R.string.atlas_text_cell_factory_clipboard_description,text);  Toast.makeText(v.getContext(),R.string.atlas_text_cell_factory_copied_to_clipboard,Toast.LENGTH_SHORT).show();  return true;}  }
class C{  public synchronized static boolean isOpen(String location){  location=normalize(location);  HyperGraph graph=dbs.get(location);  return graph != null && graph.isOpen();}  }
class C{  public NodeFilter createXPathFilter(String xpathFilterExpression){  return createXPath(xpathFilterExpression);}  }
class C{  long generateRegionId(){  long result;  do {    result=this.regionIdCtr.getAndIncrement();  } while (result <= MAX_RESERVED_DRID && result >= MIN_RESERVED_DRID);  return result;}  }
class C{  public void incFunctionExecutionHasResultRunning(){  this._stats.incInt(_functionExecutionsHasResultRunningId,1);  aggregateStats.incFunctionExecutionHasResultRunning();}  }
class C{  public int size(){  return map.size();}  }
class C{  @Override public void onBookClicked(View view,String userId,String userName,String userImage,String cardId,String tagName,String contactNumber,String price,String title){  loadChat(userId,userName,userImage,tagName,contactNumber,price,title);}  }
class C{  public void generateBooleanEqual(BlockScope currentScope,boolean valueRequired){  boolean isEqualOperator=((this.bits & OperatorMASK) >> OperatorSHIFT) == EQUAL_EQUAL;  Constant cst=this.left.optimizedBooleanConstant();  if (cst != Constant.NotAConstant) {    Constant rightCst=this.right.optimizedBooleanConstant();    if (rightCst != Constant.NotAConstant) {      this.left.generateCode(currentScope,false);      this.right.generateCode(currentScope,false);    } else     if (cst.booleanValue() == isEqualOperator) {      this.left.generateCode(currentScope,false);      this.right.generateCode(currentScope,valueRequired);    } else {      if (valueRequired) {        BranchLabel falseLabel=new BranchLabel();        this.left.generateCode(currentScope,false);        this.right.generateOptimizedBoolean(currentScope,null,falseLabel,valueRequired);      } else {        this.left.generateCode(currentScope,false);        this.right.generateCode(currentScope,false);      }    }    return;  }  cst=this.right.optimizedBooleanConstant();  if (cst != Constant.NotAConstant) {    if (cst.booleanValue() == isEqualOperator) {      this.left.generateCode(currentScope,valueRequired);      this.right.generateCode(currentScope,false);    } else {      if (valueRequired) {        BranchLabel falseLabel=new BranchLabel();        this.left.generateOptimizedBoolean(currentScope,null,falseLabel,valueRequired);        this.right.generateCode(currentScope,false);      } else {        this.left.generateCode(currentScope,false);        this.right.generateCode(currentScope,false);      }      return;    }    this.left.generateCode(currentScope,valueRequired);    this.right.generateCode(currentScope,valueRequired);  }}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  @Override public void put(String name,long value){  emulatedFields.put(name,value);}  }
class C{  public NdefMessage(NdefRecord record,NdefRecord... records){  if (record == null)   throw new NullPointerException("record cannot be null");  for (  NdefRecord r : records) {    if (r == null) {      throw new NullPointerException("record cannot be null");    }  }  mRecords=new NdefRecord[1 + records.length];  mRecords[0]=record;  System.arraycopy(records,0,mRecords,1,records.length);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DomPackage.LINE_TAG__DOCLET:    setDoclet((Doclet)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public IntHashMap(Map t){  this(Math.max(2 * t.size(),11),0.75f);  putAll(t);}  }
class C{  public View build(Context ctx){  mContainer=new LinearLayout(ctx);  if (mInnerShadow) {    if (!mInRTL) {      mContainer.setBackgroundResource(R.drawable.material_drawer_shadow_left);    } else {      mContainer.setBackgroundResource(R.drawable.material_drawer_shadow_right);    }  }  mRecyclerView=new RecyclerView(ctx);  mContainer.addView(mRecyclerView,ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);  mRecyclerView.setItemAnimator(new DefaultItemAnimator());  mRecyclerView.setFadingEdgeLength(0);  mRecyclerView.setClipToPadding(false);  mRecyclerView.setLayoutManager(new LinearLayoutManager(ctx));  mDrawerAdapter=new DrawerAdapter();  mRecyclerView.setAdapter(mDrawerAdapter);  if (mDrawer != null && mDrawer.mDrawerBuilder != null && (mDrawer.mDrawerBuilder.mFullscreen || mDrawer.mDrawerBuilder.mTranslucentStatusBar)) {    mRecyclerView.setPadding(mRecyclerView.getPaddingLeft(),UIUtils.getStatusBarHeight(ctx),mRecyclerView.getPaddingRight(),mRecyclerView.getPaddingBottom());  }  if (mDrawer != null && mDrawer.mDrawerBuilder != null && (mDrawer.mDrawerBuilder.mFullscreen || mDrawer.mDrawerBuilder.mTranslucentNavigationBar)) {    mRecyclerView.setPadding(mRecyclerView.getPaddingLeft(),mRecyclerView.getPaddingTop(),mRecyclerView.getPaddingRight(),UIUtils.getNavigationBarHeight(ctx));  }  createItems();  return mContainer;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void endVisit(MemberValuePair node){}  }
class C{  public <T>CLBuffer<T> createBuffer(CLMem.Usage usage,Pointer<T> data){  return createBuffer(usage,data,true);}  }
class C{  public void notifyClientsOffline(){  for (  MqttConnection connection : connections.values()) {    connection.offline();  }}  }
class C{  protected PropertyChangeListener createPropertyChangeListener(){  return getHandler();}  }
class C{  private Map<IVariable<?>,Map<URI,StatementPatternNode>> verifyGraphPattern(final AbstractTripleStore database,final GroupNodeBase<IGroupMemberNode> group){  Map<IVariable<?>,Map<URI,StatementPatternNode>> tmp=null;  final int arity=group.arity();  for (int i=0; i < arity; i++) {    final BOp child=group.get(i);    if (child instanceof GroupNodeBase<?>) {      throw new FulltextSearchException("Nested groups are not allowed.");    }    if (child instanceof StatementPatternNode) {      final StatementPatternNode sp=(StatementPatternNode)child;      final TermNode p=sp.p();      if (!p.isConstant())       throw new FulltextSearchException("Expecting search predicate: " + sp);      final URI uri=(URI)((ConstantNode)p).getValue();      if (!uri.stringValue().startsWith(FTS.NAMESPACE))       throw new FulltextSearchException("Expecting search predicate: " + sp);      if (!ASTFulltextSearchOptimizer.searchUris.contains(uri))       throw new FulltextSearchException("Unknown search predicate: " + uri);      final TermNode s=sp.s();      if (!s.isVariable())       throw new FulltextSearchException("Subject of search predicate is constant: " + sp);      final IVariable<?> searchVar=((VarNode)s).getValueExpression();      if (tmp == null) {        tmp=new LinkedHashMap<IVariable<?>,Map<URI,StatementPatternNode>>();      }      Map<URI,StatementPatternNode> statementPatterns=tmp.get(searchVar);      if (statementPatterns == null) {        tmp.put(searchVar,statementPatterns=new LinkedHashMap<URI,StatementPatternNode>());      }      statementPatterns.put(uri,sp);    }  }  return tmp;}  }
class C{  private void configurePlatformApiGwtClients(){  bind(UserServiceClient.class).to(UserServiceClientImpl.class).in(Singleton.class);  bind(UserProfileServiceClient.class).to(UserProfileServiceClientImpl.class).in(Singleton.class);  bind(GitServiceClient.class).to(GitServiceClientImpl.class).in(Singleton.class);  bind(AccountServiceClient.class).to(AccountServiceClientImpl.class).in(Singleton.class);  bind(FactoryServiceClient.class).to(FactoryServiceClientImpl.class).in(Singleton.class);  bind(WorkspaceServiceClient.class).to(WorkspaceServiceClientImpl.class).in(Singleton.class);  bind(VfsServiceClient.class).to(VfsServiceClientImpl.class).in(Singleton.class);  bind(ProjectServiceClient.class).to(ProjectServiceClientImpl.class).in(Singleton.class);  bind(ProjectImportersServiceClient.class).to(ProjectImportersServiceClientImpl.class).in(Singleton.class);  bind(ProjectTypeServiceClient.class).to(ProjectTypeServiceClientImpl.class).in(Singleton.class);  bind(ProjectTemplateServiceClient.class).to(ProjectTemplateServiceClientImpl.class).in(Singleton.class);  bind(BuilderServiceClient.class).to(BuilderServiceClientImpl.class).in(Singleton.class);  bind(RunnerServiceClient.class).to(RunnerServiceClientImpl.class).in(Singleton.class);  bind(ProjectTypeRegistry.class).to(ProjectTypeRegistryImpl.class).in(Singleton.class);  bind(ProjectTemplateRegistry.class).to(ProjectTemplateRegistryImpl.class).in(Singleton.class);}  }
class C{  private static void updateNetwork(WifiManager wifiManager,WifiConfiguration config){  Integer foundNetworkID=findNetworkInExistingConfig(wifiManager,config.SSID);  if (foundNetworkID != null) {    Log.i(TAG,"Removing old configuration for network " + config.SSID);    wifiManager.removeNetwork(foundNetworkID);    wifiManager.saveConfiguration();  }  int networkId=wifiManager.addNetwork(config);  if (networkId >= 0) {    if (wifiManager.enableNetwork(networkId,true)) {      Log.i(TAG,"Associating to network " + config.SSID);      wifiManager.saveConfiguration();    } else {      Log.w(TAG,"Failed to enable network " + config.SSID);    }  } else {    Log.w(TAG,"Unable to add network " + config.SSID);  }}  }
class C{  public CModulesTableRenderer(final JTable table){  m_table=Preconditions.checkNotNull(table,"IE02290: table argument can not be null");}  }
class C{  protected Set adjustForQueuing(Set recipients){  Set result=null;  return result;}  }
class C{  public static Range iterateRangeBounds(CategoryDataset dataset){  return iterateRangeBounds(dataset,true);}  }
class C{  protected void checkDOMVersion(Hashtable h){  if (null == h)   h=new Hashtable();  final String DOM_LEVEL2_CLASS="org.w3c.dom.Document";  final String DOM_LEVEL2_METHOD="createElementNS";  final String DOM_LEVEL2WD_CLASS="org.w3c.dom.Node";  final String DOM_LEVEL2WD_METHOD="supported";  final String DOM_LEVEL2FD_CLASS="org.w3c.dom.Node";  final String DOM_LEVEL2FD_METHOD="isSupported";  final Class twoStringArgs[]={java.lang.String.class,java.lang.String.class};  try {    Class clazz=ObjectFactory.findProviderClass(DOM_LEVEL2_CLASS,ObjectFactory.findClassLoader(),true);    Method method=clazz.getMethod(DOM_LEVEL2_METHOD,twoStringArgs);    h.put(VERSION + "DOM","2.0");    try {      clazz=ObjectFactory.findProviderClass(DOM_LEVEL2WD_CLASS,ObjectFactory.findClassLoader(),true);      method=clazz.getMethod(DOM_LEVEL2WD_METHOD,twoStringArgs);      h.put(ERROR + VERSION + "DOM.draftlevel","2.0wd");      h.put(ERROR,ERROR_FOUND);    } catch (    Exception e2) {      try {        clazz=ObjectFactory.findProviderClass(DOM_LEVEL2FD_CLASS,ObjectFactory.findClassLoader(),true);        method=clazz.getMethod(DOM_LEVEL2FD_METHOD,twoStringArgs);        h.put(VERSION + "DOM.draftlevel","2.0fd");      } catch (      Exception e3) {        h.put(ERROR + VERSION + "DOM.draftlevel","2.0unknown");        h.put(ERROR,ERROR_FOUND);      }    }  } catch (  Exception e) {    h.put(ERROR + VERSION + "DOM","ERROR attempting to load DOM level 2 class: " + e.toString());    h.put(ERROR,ERROR_FOUND);  }}  }
class C{  public TLongHash(){  _hashingStrategy=this;}  }
class C{  public ErrorCountTranspilationHandler(TranspilationHandler delegate){  this.delegate=delegate;}  }
class C{  private synchronized void addChildNode(DefaultMutableTreeNode parent,DefaultMutableTreeNode child,int index){  DefaultTreeModel model=(DefaultTreeModel)getModel();  model.insertNodeInto(child,parent,index);}  }
class C{  public static List<LoadMetadataDetails> filterOutNewlyAddedSegments(List<LoadMetadataDetails> segments,List<LoadMetadataDetails> loadsToMerge,LoadMetadataDetails lastSeg){  List<LoadMetadataDetails> list=new ArrayList<>(segments);  List<LoadMetadataDetails> trimmedList=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  CarbonDataMergerUtil.sortSegments(list);  trimmedList=list.subList(0,list.indexOf(lastSeg) + 1);  return trimmedList;}  }
class C{  public void count(Collection<T> collection){  for (  T element : collection) {    count(element);  }}  }
class C{  @Override public boolean equals(Object o){  if (this == o)   return true;  if (o == null || !(o instanceof RyaType))   return false;  RyaType ryaType=(RyaType)o;  if (data != null ? !data.equals(ryaType.data) : ryaType.data != null)   return false;  if (dataType != null ? !dataType.equals(ryaType.dataType) : ryaType.dataType != null)   return false;  return true;}  }
class C{  public void testTimedInvokeAny1() throws Throwable {  ExecutorService e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    try {      e.invokeAny(null,MEDIUM_DELAY_MS,MILLISECONDS);      shouldThrow();    } catch (    NullPointerException success) {    }  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  public BinomialMinPQ(Key[] a){  comp=new MyComparator();  for (  Key k : a)   insert(k);}  }
class C{  public void addField(FieldInfo finfo) throws DuplicateMemberException {  testExistingField(finfo.getName(),finfo.getDescriptor());  fields.add(finfo);}  }
class C{  @Override public String toString(){  StringBuffer result=new StringBuffer();  for (int i=0; i < data.length; i++) {    result.append((i == 0 ? "" : ",") + data[i]);  }  return result.toString();}  }
class C{  public String globalInfo(){  return "Applies the given filter before calling the given distance function.";}  }
class C{  public void testFieldTypeTablesMatch() throws Exception {  FieldDescriptor.Type[] values1=FieldDescriptor.Type.values();  WireFormat.FieldType[] values2=WireFormat.FieldType.values();  assertEquals(values1.length,values2.length);  for (int i=0; i < values1.length; i++) {    assertEquals(values1[i].toString(),values2[i].toString());  }}  }
class C{  public static String toRegex(String glob,char separator){  return new GlobToRegexParser(glob,separator).parseToRegex();}  }
class C{  private void drawFrequencies(Graphics2D graphics){  Stroke currentStroke=graphics.getStroke();  long minFrequency=getMinDisplayFrequency();  long maxFrequency=getMaxDisplayFrequency();  int label=mLabelSizeMonitor.getLabelIncrement(graphics);  int major=mLabelSizeMonitor.getMajorTickIncrement(graphics);  int minor=mLabelSizeMonitor.getMinorTickIncrement(graphics);  if (minor == 0) {    minor=1;  }  long frequency=minFrequency - (minFrequency % minor);  while (frequency < maxFrequency) {    if (frequency % label == 0) {      drawFrequencyLineAndLabel(graphics,frequency);    } else     if (frequency % major == 0) {      drawTickLine(graphics,frequency,true);    } else {      drawTickLine(graphics,frequency,false);    }    frequency+=minor;  }}  }
class C{  final public void yyclose() throws java.io.IOException {  yy_atEOF=true;  yy_endRead=yy_startRead;  if (yy_reader != null)   yy_reader.close();}  }
class C{  public static void execute(ExecutablePool pool,int txId){  RollbackOpImpl op=new RollbackOpImpl(txId);  pool.execute(op);}  }
class C{  public static void fft(ComplexArray ca,boolean inverse){  final double[] real=ca.real;  final double[] complex=ca.complex;  int n, mmax, m, j, istep, i;  double wtemp, wr, wpr, wpi, wi, theta;  double tempr, tempi;  final double radians;  if (inverse) {    radians=2.0 * Math.PI;  } else {    radians=-2.0 * Math.PI;  }  n=ca.length << 1;  j=1;  for (i=1; i < n; i+=2) {    if (j > i) {      final int halfI=i >> 1;      final int halfJ=j >> 1;      swap(real,halfJ,halfI);      swap(complex,halfJ,halfI);    }    m=ca.length;    while (m >= 2 && j > m) {      j-=m;      m>>=1;    }    j+=m;  }  mmax=2;  while (n > mmax) {    istep=mmax << 1;    theta=(radians / mmax);    wtemp=Math.sin(0.5 * theta);    wpr=-2.0 * wtemp * wtemp;    wpi=Math.sin(theta);    wr=1.0;    wi=0.0;    for (m=1; m < mmax; m+=2) {      for (i=m; i <= n; i+=istep) {        j=i + mmax;        final int halfI=i >> 1;        final int halfJ=j >> 1;        tempr=wr * real[halfJ] - wi * complex[halfJ];        tempi=wr * complex[halfJ] + wi * real[halfJ];        real[halfJ]=real[halfI] - tempr;        complex[halfJ]=complex[halfI] - tempi;        real[halfI]+=tempr;        complex[halfI]+=tempi;      }      wtemp=wr;      wr+=wr * wpr - wi * wpi;      wi+=wi * wpr + wtemp * wpi;    }    mmax=istep;  }}  }
class C{  public BitVector dominators(BasicBlock block,IR ir){  BitVector dominators=new BitVector(ir.getMaxBasicBlockNumber() + 1);  dominators.set(block.getNumber());  while ((block=getIdom(block,ir)) != null) {    dominators.set(block.getNumber());  }  return dominators;}  }
class C{  @Override public void repaint(long tm,int x,int y,int width,int height){}  }
class C{  public void disconnectPort(MrcPortController p){  istream=null;  ostream=null;  if (controller != p) {    log.warn("disconnectPort: disconnect called from non-connected MrcPortController");  }  controller=null;}  }
class C{  public GenericEntry createOrganizationUnit(String customerId,String orgUnitName,String parentOrgUnitPath,String description,boolean blockInheritance) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  GenericEntry entry=new GenericEntry();  entry.addProperty("parentOrgUnitPath",parentOrgUnitPath);  entry.addProperty("description",description);  entry.addProperty("name",orgUnitName);  entry.addProperty("blockInheritance",String.valueOf(blockInheritance));  entry=service.insert(new URL("https://apps-apis.google.com/a/feeds/orgunit/2.0/" + customerId),entry);  return entry;}  }
class C{  private boolean isSomethingToSave(){  if (allowEmpty) {    return true;  }  String currentInput=format(input.getText());  return currentInput != null && !currentInput.isEmpty();}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  charactersFlush();  int dataIndex=m_data.size();  m_previous=addNode(DTM.PROCESSING_INSTRUCTION_NODE,DTM.PROCESSING_INSTRUCTION_NODE,m_parents.peek(),m_previous,-dataIndex,false);  m_data.addElement(m_valuesOrPrefixes.stringToIndex(target));  m_values.addElement(data);  m_data.addElement(m_valueIndex++);}  }
class C{  public static boolean equals(Object[] array1,Object[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    Object e1=array1[i], e2=array2[i];    if (!(e1 == null ? e2 == null : e1.equals(e2))) {      return false;    }  }  return true;}  }
class C{  public SVG build() throws SVGParseException {  if (data == null) {    throw new IllegalStateException("SVG input not specified. Call one of the readFrom...() methods first.");  }  try {    final SVGParser.SVGHandler handler=new SVGParser.SVGHandler();    handler.setColorSwap(searchColor,replaceColor,overideOpacity);    handler.setWhiteMode(whiteMode);    if (strokeColorFilter != null) {      handler.strokePaint.setColorFilter(strokeColorFilter);    }    if (fillColorFilter != null) {      handler.fillPaint.setColorFilter(fillColorFilter);    }    if (!data.markSupported())     data=new BufferedInputStream(data);    try {      data.mark(4);      byte[] magic=new byte[2];      int r=data.read(magic,0,2);      int magicInt=(magic[0] + ((magic[1]) << 8)) & 0xffff;      data.reset();      if (r == 2 && magicInt == GZIPInputStream.GZIP_MAGIC) {        GZIPInputStream gin=new GZIPInputStream(data);        data=gin;      }    } catch (    IOException ioe) {      throw new SVGParseException(ioe);    }    final SVG svg=SVGParser.parse(new InputSource(data),handler);    return svg;  }  finally {    if (closeInputStream) {      try {        data.close();      } catch (      IOException e) {        Log.e(SVGParser.TAG,"Error closing SVG input stream.",e);      }    }  }}  }
class C{  public synchronized OMGraphicList prepare(){  OMGraphicList list=getList();  if (list == null) {    list=new OMGraphicList();  } else {    list.clear();  }  Debug.message("basic",getName() + "|DayNightLayer.prepare(): doing it");  OMGraphic ras=createImage(getProjection());  if (timer != null)   timer.restart();  list.add(ras);  return list;}  }
class C{  private String toIndentedString(Object o){  if (o == null) {    return "null";  }  return o.toString().replace("\n","\n    ");}  }
class C{  public void insert(INode n){  stack.push(n);}  }
class C{  protected boolean drawTopBorder(Component c,Graphics g,int x,int y,int width,int height){  Rectangle titleBarRect=new Rectangle(x,y,width,BORDER_SIZE);  if (!g.getClipBounds().intersects(titleBarRect)) {    return false;  }  int maxX=width - 1;  int maxY=BORDER_SIZE - 1;  g.setColor(frameColor);  g.drawLine(x,y + 2,maxX - 2,y + 2);  g.drawLine(x,y + 3,maxX - 2,y + 3);  g.drawLine(x,y + 4,maxX - 2,y + 4);  g.setColor(frameHighlight);  g.drawLine(x,y,maxX,y);  g.drawLine(x,y + 1,maxX,y + 1);  g.drawLine(x,y + 2,x,y + 4);  g.drawLine(x + 1,y + 2,x + 1,y + 4);  g.setColor(frameShadow);  g.drawLine(x + 4,y + 4,maxX - 4,y + 4);  g.drawLine(maxX,y + 1,maxX,maxY);  g.drawLine(maxX - 1,y + 2,maxX - 1,maxY);  return true;}  }
class C{  public String fullTypeName(){  StringBuilder strb=new StringBuilder();  boolean _moduleNameSet=this.moduleNameSet();  if (_moduleNameSet) {    String _moduleName=this.getModuleName();    strb.append(_moduleName);  }  boolean _typeNameSet=this.typeNameSet();  if (_typeNameSet) {    strb.append(".");    String _typeName=this.getTypeName();    strb.append(_typeName);  }  return strb.toString();}  }
class C{  private E xfer(E e,boolean haveData,int how,long nanos){  if (haveData && (e == null))   throw new NullPointerException();  Node s=null;  retry:   for (; ; ) {    for (Node h=head, p=h; p != null; ) {      boolean isData=p.isData;      Object item=p.item;      if (item != p && (item != null) == isData) {        if (isData == haveData)         break;        if (p.casItem(item,e)) {          for (Node q=p; q != h; ) {            Node n=q.next;            if (head == h && casHead(h,n == null ? q : n)) {              h.forgetNext();              break;            }            if ((h=head) == null || (q=h.next) == null || !q.isMatched())             break;          }          LockSupport.unpark(p.waiter);          return LinkedTransferQueue.<E>cast(item);        }      }      Node n=p.next;      p=(p != n) ? n : (h=head);    }    if (how != NOW) {      if (s == null)       s=new Node(e,haveData);      Node pred=tryAppend(s,haveData);      if (pred == null)       continue retry;      if (how != ASYNC)       return awaitMatch(s,pred,e,(how == TIMED),nanos);    }    return e;  }}  }
class C{  public ButtonColors(Color top,Color leftOuter,Color leftInner,Color edge,Color edgeShade,Color shadow,Color interior){  this.top=top;  this.leftOuter=leftOuter;  this.leftInner=leftInner;  this.edge=edge;  this.edgeShade=edgeShade;  this.shadow=shadow;  this.interior=interior;}  }
class C{  public static PropertyValuesHolder ofObject(String propertyName,TypeEvaluator evaluator,Object... values){  PropertyValuesHolder pvh=new PropertyValuesHolder(propertyName);  pvh.setObjectValues(values);  pvh.setEvaluator(evaluator);  return pvh;}  }
class C{  public void paintDesktopPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public void addInfo(String msg){  addInfo(msg,null);}  }
class C{  public int hashCode(){  return toString().hashCode();}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.SEQUENCE;}  }
class C{  public static List<String> readLines(Reader input) throws IOException {  BufferedReader reader=toBufferedReader(input);  List<String> list=new ArrayList<String>();  String line=reader.readLine();  while (line != null) {    list.add(line);    line=reader.readLine();  }  return list;}  }
class C{  private void validate(){  if (checkers != null) {    for (    RamlChecker checker : checkers) {      Pair<Set<Issue>,Set<Issue>> check=checker.check(published,implemented);      warnings.addAll(check.getFirst());      errors.addAll(check.getSecond());    }  }}  }
class C{  @Override @TargetApi(21) public void onReceivedClientCertRequest(WebView view,ClientCertRequest request){  PluginManager pluginManager=this.parentEngine.pluginManager;  if (pluginManager != null && pluginManager.onReceivedClientCertRequest(null,new CordovaClientCertRequest(request))) {    parentEngine.client.clearLoadTimeoutTimer();    return;  }  super.onReceivedClientCertRequest(view,request);}  }
class C{  public OracleExtractException(String message,Throwable cause){  super(message,cause);}  }
class C{  public double positivePredictedValue(int classindex){  int tp=truePositives(classindex);  return (double)tp / ((double)(tp + falsePositives(classindex)));}  }
class C{  public void removeCardOffer(Offer offer){  ((AcceptedOfferBinder)getDataBinder(TYPE_CARDS)).remove(offer);}  }
class C{  public static Coord inverseMercator(double latitude,double longitude){  double x=(longitude / SIZE) * 180;  double y=(latitude / SIZE) * 180;  y=180.0 / Math.PI * (2 * MathUtil.atan(MathUtil.exp(y * Math.PI / 180)) - Math.PI / 2);  return new Coord(y,x,false);}  }
class C{  private List<Pair<String,String>> extractPortsList(final MachineEntity machine){  List<Pair<String,String>> ports=new ArrayList<>();  if (machine == null || machine.getRuntime() == null) {    return ports;  }  Map<String,? extends Server> servers=machine.getRuntime().getServers();  for (  Map.Entry<String,? extends Server> entry : servers.entrySet()) {    String port=entry.getKey();    if (port.endsWith("/tcp")) {      String portWithoutTcp=port.substring(0,port.length() - 4);      String description=portWithoutTcp + " (" + entry.getValue().getRef()+ ")";      Pair<String,String> pair=new Pair<>(description,portWithoutTcp);      ports.add(pair);    }  }  return ports;}  }
class C{  public void keyReleased(KeyEvent e){}  }
class C{  private void initialize(){  this.setIconImages(DisplayUtils.getZapIconImages());  this.setVisible(false);  this.setTitle(Constant.PROGRAM_NAME);  final Dimension dim=restoreWindowSize();  if (dim == null) {    this.setSize(WINDOW_DEFAULT_WIDTH,WINDOW_DEFAULT_HEIGHT);  }  final Point point=restoreWindowLocation();  if (point == null) {    centerFrame();  }  restoreWindowState();  this.addWindowStateListener(new FrameWindowStateListener());  this.addComponentListener(new FrameResizedListener());}  }
class C{  public boolean IsWindowsAuthEnabled(){  return this._windowsAuthEnabled;}  }
class C{  private void muteDevice(String code){  resultBuilder.build(code);  AudioManager audioManager=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);  audioManager.setStreamVolume(AudioManager.STREAM_RING,DEFAULT_VOLUME,DEFAULT_FLAG);}  }
class C{  public TextOverflowHandle(TextHolderFigure owner){  super(owner);}  }
class C{  public void write(ByteCodeWriter out) throws IOException {  out.writeShort(_accessFlags);  out.writeUTF8Const(_name);  out.writeUTF8Const(_descriptor);  out.writeShort(_attributes.size());  for (int i=0; i < _attributes.size(); i++) {    Attribute attr=_attributes.get(i);    attr.write(out);  }}  }
class C{  public static void exportWriter(Cursor cursor,BufferedWriter out,boolean header,String delim,char quote,ExportFilter filter) throws IOException {  String delimiter=(delim == null) ? DEFAULT_DELIMITER : delim;  Pattern needsQuotePattern=Pattern.compile("(?:" + Pattern.quote(delimiter) + ")|(?:"+ Pattern.quote("" + quote)+ ")|(?:[\n\r])");  List<? extends Column> origCols=cursor.getTable().getColumns();  List<Column> columns=new ArrayList<Column>(origCols);  columns=filter.filterColumns(columns);  Collection<String> columnNames=null;  if (!origCols.equals(columns)) {    columnNames=new HashSet<String>();    for (    Column c : columns) {      columnNames.add(c.getName());    }  }  if (header) {    for (Iterator<Column> iter=columns.iterator(); iter.hasNext(); ) {      writeValue(out,iter.next().getName(),quote,needsQuotePattern);      if (iter.hasNext()) {        out.write(delimiter);      }    }    out.newLine();  }  Object[] unfilteredRowData=new Object[columns.size()];  Row row;  while ((row=cursor.getNextRow(columnNames)) != null) {    for (int i=0; i < columns.size(); i++) {      unfilteredRowData[i]=columns.get(i).getRowValue(row);    }    Object[] rowData=filter.filterRow(unfilteredRowData);    if (rowData == null) {      continue;    }    for (int i=0; i < columns.size(); i++) {      Object obj=rowData[i];      if (obj != null) {        String value=null;        if (obj instanceof byte[]) {          value=ByteUtil.toHexString((byte[])obj);        } else {          value=String.valueOf(rowData[i]);        }        writeValue(out,value,quote,needsQuotePattern);      }      if (i < columns.size() - 1) {        out.write(delimiter);      }    }    out.newLine();  }  out.flush();}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public InvertedGenerationalDistance(Problem problem,NondominatedPopulation referenceSet){  this(problem,referenceSet,Settings.getIGDPower());}  }
class C{  public RegisteredProject removeProjectType(String projectPath,String type) throws ConflictException, ForbiddenException, NotFoundException, ServerException {  final RegisteredProject project=getProject(projectPath);  if (project == null) {    return null;  }  List<String> newMixins=project.getMixins();  String newType=project.getType();  if (newMixins.contains(type)) {    newMixins.remove(type);  } else   if (newType.equals(type)) {    if (project.isDetected()) {      projects.remove(project.getPath());      return null;    }    newType=BaseProjectType.ID;  }  final NewProjectConfig conf=new NewProjectConfig(project.getPath(),newType,newMixins,project.getName(),project.getDescription(),project.getAttributes(),project.getSource());  return putProject(conf,project.getBaseFolder(),true,project.isDetected());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void quit(){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static String removeLeadingZeros(final String str){  String result=str;  if (str != null && str.length() != 0) {    int startIndex=0;    while (startIndex < str.length() - 1) {      final char ch=str.charAt(startIndex);      if (ch != '0') {        break;      }      startIndex++;    }    if (startIndex > 0) {      result=str.substring(startIndex);    }  }  return result;}  }
class C{  public int readNonBlock(byte[] buffer,int offset,int length) throws IOException {  return readTimeout(buffer,offset,length,0);}  }
class C{  public CommunicationException(String arg0){  super(arg0);}  }
class C{  @SmallTest public void testPreconditions(){  assertNotNull(mLeftButton);  assertTrue("center button should be right of left button",mLeftButton.getRight() < mCenterButton.getLeft());  assertTrue("right button should be right of center button",mCenterButton.getRight() < mRightButton.getLeft());}  }
class C{  private JSONWriter end(char mode,char c) throws JSONException {  if (this.mode != mode) {    throw new JSONException(mode == 'a' ? "Misplaced endArray." : "Misplaced endObject.");  }  this.pop(mode);  try {    this.writer.write(c);  } catch (  IOException e) {    throw new JSONException(e);  }  this.comma=true;  return this;}  }
class C{  public static void initPrivateKey(Properties props) throws Exception {  String privateKeyFilePath=props.getProperty(PRIVATE_KEY_FILE_PROP);  privateKeyAlias="";  privateKeyEncrypt=null;  if (privateKeyFilePath != null && privateKeyFilePath.length() > 0) {    KeyStore ks=KeyStore.getInstance("PKCS12");    privateKeyAlias=props.getProperty(PRIVATE_KEY_ALIAS_PROP);    if (privateKeyAlias == null) {      privateKeyAlias="";    }    String keyStorePass=props.getProperty(PRIVATE_KEY_PASSWD_PROP);    char[] passPhrase=(keyStorePass != null ? keyStorePass.toCharArray() : null);    FileInputStream privateKeyFile=new FileInputStream(privateKeyFilePath);    try {      ks.load(privateKeyFile,passPhrase);    }  finally {      privateKeyFile.close();    }    Key key=ks.getKey(privateKeyAlias,passPhrase);    Certificate keyCert=ks.getCertificate(privateKeyAlias);    if (key instanceof PrivateKey && keyCert instanceof X509Certificate) {      privateKeyEncrypt=(PrivateKey)key;      privateKeySignAlgo=((X509Certificate)keyCert).getSigAlgName();      privateKeySubject=((X509Certificate)keyCert).getSubjectDN().getName();    }  }}  }
class C{  public final Vector3d vectorTo(IMovingAgent agent){  Vector3d v=new Vector3d();  v.sub(agent.getLocation(),location);  return v;}  }
class C{  @DSComment("Wifi subsystem") @DSSpec(DSCat.WIFI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.312 -0500",hash_original_method="13D7026BA6E2310038D9CCEC7D1F5CA4",hash_generated_method="68D6939781BFBE3ABBF2F3F61C7E9CDE") public boolean disconnect(){  try {    mService.disconnect();    return true;  } catch (  RemoteException e) {    return false;  }}  }
